perf metricgroup: Fix printing event names of metric group with multiple events incase of overlapping events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Kajol Jain <kjain@linux.ibm.com>
commit 58fc90fda0cc983c11c5290c7a9e992b08ac4a5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/58fc90fd.failed

Commit f01642e4912b ("perf metricgroup: Support multiple events for
metricgroup") introduced support for multiple events in a metric group.
But with the current upstream, metric events names are not printed
properly incase we try to run multiple metric groups with overlapping
event.

With current upstream version, incase of overlapping metric events issue
is, we always start our comparision logic from start.  So, the events
which already matched with some metric group also take part in
comparision logic. Because of that when we have overlapping events, we
end up matching current metric group event with already matched one.

For example, in skylake machine we have metric event CoreIPC and
Instructions. Both of them need 'inst_retired.any' event value.  As
events in Instructions is subset of events in CoreIPC, they endup in
pointing to same 'inst_retired.any' value.

In skylake platform:

command:# ./perf stat -M CoreIPC,Instructions  -C 0 sleep 1

 Performance counter stats for 'CPU(s) 0':

     1,254,992,790      inst_retired.any          # 1254992790.0
                                                    Instructions
                                                  #      1.3 CoreIPC
       977,172,805      cycles
     1,254,992,756      inst_retired.any

       1.000802596 seconds time elapsed

command:# sudo ./perf stat -M UPI,IPC sleep 1

   Performance counter stats for 'sleep 1':
           948,650      uops_retired.retire_slots
           866,182      inst_retired.any          #      0.7 IPC
           866,182      inst_retired.any
         1,175,671      cpu_clk_unhalted.thread

Patch fixes the issue by adding a new bool pointer 'evlist_used' to keep
track of events which already matched with some group by setting it
true.  So, we skip all used events in list when we start comparision
logic.  Patch also make some changes in comparision logic, incase we get
a match miss, we discard the whole match and start again with first
event id in metric event.

With this patch:

In skylake platform:

command:# ./perf stat -M CoreIPC,Instructions  -C 0 sleep 1

 Performance counter stats for 'CPU(s) 0':

         3,348,415      inst_retired.any          #      0.3 CoreIPC
        11,779,026      cycles
         3,348,381      inst_retired.any          # 3348381.0
                                                    Instructions

       1.001649056 seconds time elapsed

command:# ./perf stat -M UPI,IPC sleep 1

 Performance counter stats for 'sleep 1':

         1,023,148      uops_retired.retire_slots #      1.1 UPI
           924,976      inst_retired.any
           924,976      inst_retired.any          #      0.6 IPC
         1,489,414      cpu_clk_unhalted.thread

       1.003064672 seconds time elapsed

	Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Anju T Sudhakar <anju@linux.vnet.ibm.com>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Kan Liang <kan.liang@linux.intel.com>
	Cc: Madhavan Srinivasan <maddy@linux.vnet.ibm.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
Link: http://lore.kernel.org/lkml/20200221101121.28920-1-kjain@linux.ibm.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 58fc90fda0cc983c11c5290c7a9e992b08ac4a5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/metricgroup.c
diff --cc tools/perf/util/metricgroup.c
index 178b5ec009c2,926449a7cdbf..000000000000
--- a/tools/perf/util/metricgroup.c
+++ b/tools/perf/util/metricgroup.c
@@@ -96,59 -89,68 +96,121 @@@ struct egroup 
  	const char **ids;
  	const char *metric_name;
  	const char *metric_expr;
 -	const char *metric_unit;
  };
  
++<<<<<<< HEAD
 +static bool record_evsel(int *ind, struct perf_evsel **start,
 +			 int idnum,
 +			 struct perf_evsel **metric_events,
 +			 struct perf_evsel *ev)
 +{
 +	metric_events[*ind] = ev;
 +	if (*ind == 0)
 +		*start = ev;
 +	if (++*ind == idnum) {
 +		metric_events[*ind] = NULL;
 +		return true;
 +	}
 +	return false;
 +}
 +
 +static struct perf_evsel *find_evsel_group(struct perf_evlist *perf_evlist,
 +					   const char **ids,
 +					   int idnum,
 +					   struct perf_evsel **metric_events)
 +{
 +	struct perf_evsel *ev, *start = NULL;
 +	int ind = 0;
 +
 +	evlist__for_each_entry (perf_evlist, ev) {
 +		if (ev->collect_stat)
 +			continue;
 +		if (!strcmp(ev->name, ids[ind])) {
 +			if (record_evsel(&ind, &start, idnum,
 +					 metric_events, ev))
 +				return start;
 +		} else {
 +			/*
 +			 * We saw some other event that is not
 +			 * in our list of events. Discard
 +			 * the whole match and start again.
 +			 */
 +			ind = 0;
 +			start = NULL;
 +			if (!strcmp(ev->name, ids[ind])) {
 +				if (record_evsel(&ind, &start, idnum,
 +						 metric_events, ev))
 +					return start;
 +			}
 +		}
 +	}
 +	/*
 +	 * This can happen when an alias expands to multiple
 +	 * events, like for uncore events.
 +	 * We don't support this case for now.
 +	 */
 +	return NULL;
++=======
+ static struct evsel *find_evsel_group(struct evlist *perf_evlist,
+ 				      const char **ids,
+ 				      int idnum,
+ 				      struct evsel **metric_events,
+ 				      bool *evlist_used)
+ {
+ 	struct evsel *ev;
+ 	int i = 0, j = 0;
+ 	bool leader_found;
+ 
+ 	evlist__for_each_entry (perf_evlist, ev) {
+ 		if (evlist_used[j++])
+ 			continue;
+ 		if (!strcmp(ev->name, ids[i])) {
+ 			if (!metric_events[i])
+ 				metric_events[i] = ev;
+ 			i++;
+ 			if (i == idnum)
+ 				break;
+ 		} else {
+ 			/* Discard the whole match and start again */
+ 			i = 0;
+ 			memset(metric_events, 0,
+ 				sizeof(struct evsel *) * idnum);
+ 
+ 			if (!strcmp(ev->name, ids[i])) {
+ 				if (!metric_events[i])
+ 					metric_events[i] = ev;
+ 				i++;
+ 				if (i == idnum)
+ 					break;
+ 			}
+ 		}
+ 	}
+ 
+ 	if (i != idnum) {
+ 		/* Not whole match */
+ 		return NULL;
+ 	}
+ 
+ 	metric_events[idnum] = NULL;
+ 
+ 	for (i = 0; i < idnum; i++) {
+ 		leader_found = false;
+ 		evlist__for_each_entry(perf_evlist, ev) {
+ 			if (!leader_found && (ev == metric_events[i]))
+ 				leader_found = true;
+ 
+ 			if (leader_found &&
+ 			    !strcmp(ev->name, metric_events[i]->name)) {
+ 				ev->metric_leader = metric_events[i];
+ 			}
+ 			j++;
+ 		}
+ 		ev = metric_events[i];
+ 		evlist_used[ev->idx] = true;
+ 	}
+ 
+ 	return metric_events[0];
++>>>>>>> 58fc90fda0cc (perf metricgroup: Fix printing event names of metric group with multiple events incase of overlapping events)
  }
  
  static int metricgroup__setup_events(struct list_head *groups,
@@@ -160,10 -162,17 +222,21 @@@
  	int i = 0;
  	int ret = 0;
  	struct egroup *eg;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
++=======
+ 	struct evsel *evsel;
+ 	bool *evlist_used;
+ 
+ 	evlist_used = calloc(perf_evlist->core.nr_entries, sizeof(bool));
+ 	if (!evlist_used) {
+ 		ret = -ENOMEM;
+ 		return ret;
+ 	}
++>>>>>>> 58fc90fda0cc (perf metricgroup: Fix printing event names of metric group with multiple events incase of overlapping events)
  
  	list_for_each_entry (eg, groups, nd) {
 -		struct evsel **metric_events;
 +		struct perf_evsel **metric_events;
  
  		metric_events = calloc(sizeof(void *), eg->idnum + 1);
  		if (!metric_events) {
* Unmerged path tools/perf/util/metricgroup.c
