bnxt_en: Add partno to devlink info_get cb

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Vasundhara Volam <vasundhara-v.volam@broadcom.com>
commit 56d69c784d36bee693e950de37fe1751e99fda57
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/56d69c78.failed

Add part number info from the vital product data to info_get command
via devlink tool. Update bnxt.rst documentation as well.

	Cc: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 56d69c784d36bee693e950de37fe1751e99fda57)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/devlink/bnxt.rst
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index 36b0c371f46c,0c8283b9bafe..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -321,6 -359,150 +321,153 @@@ static void bnxt_copy_from_nvm_data(uni
  		dst->vu8 = (u8)val32;
  }
  
++<<<<<<< HEAD
++=======
+ static int bnxt_hwrm_get_nvm_cfg_ver(struct bnxt *bp,
+ 				     union devlink_param_value *nvm_cfg_ver)
+ {
+ 	struct hwrm_nvm_get_variable_input req = {0};
+ 	union bnxt_nvm_data *data;
+ 	dma_addr_t data_dma_addr;
+ 	int rc;
+ 
+ 	bnxt_hwrm_cmd_hdr_init(bp, &req, HWRM_NVM_GET_VARIABLE, -1, -1);
+ 	data = dma_alloc_coherent(&bp->pdev->dev, sizeof(*data),
+ 				  &data_dma_addr, GFP_KERNEL);
+ 	if (!data)
+ 		return -ENOMEM;
+ 
+ 	req.dest_data_addr = cpu_to_le64(data_dma_addr);
+ 	req.data_len = cpu_to_le16(BNXT_NVM_CFG_VER_BITS);
+ 	req.option_num = cpu_to_le16(NVM_OFF_NVM_CFG_VER);
+ 
+ 	rc = hwrm_send_message_silent(bp, &req, sizeof(req), HWRM_CMD_TIMEOUT);
+ 	if (!rc)
+ 		bnxt_copy_from_nvm_data(nvm_cfg_ver, data,
+ 					BNXT_NVM_CFG_VER_BITS,
+ 					BNXT_NVM_CFG_VER_BYTES);
+ 
+ 	dma_free_coherent(&bp->pdev->dev, sizeof(*data), data, data_dma_addr);
+ 	return rc;
+ }
+ 
+ static int bnxt_dl_info_get(struct devlink *dl, struct devlink_info_req *req,
+ 			    struct netlink_ext_ack *extack)
+ {
+ 	struct bnxt *bp = bnxt_get_bp_from_dl(dl);
+ 	union devlink_param_value nvm_cfg_ver;
+ 	struct hwrm_ver_get_output *ver_resp;
+ 	char mgmt_ver[FW_VER_STR_LEN];
+ 	char roce_ver[FW_VER_STR_LEN];
+ 	char fw_ver[FW_VER_STR_LEN];
+ 	char buf[32];
+ 	int rc;
+ 
+ 	rc = devlink_info_driver_name_put(req, DRV_MODULE_NAME);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (strlen(bp->board_partno)) {
+ 		rc = devlink_info_version_fixed_put(req,
+ 			DEVLINK_INFO_VERSION_GENERIC_BOARD_ID,
+ 			bp->board_partno);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 
+ 	sprintf(buf, "%X", bp->chip_num);
+ 	rc = devlink_info_version_fixed_put(req,
+ 			DEVLINK_INFO_VERSION_GENERIC_ASIC_ID, buf);
+ 	if (rc)
+ 		return rc;
+ 
+ 	ver_resp = &bp->ver_resp;
+ 	sprintf(buf, "%X", ver_resp->chip_rev);
+ 	rc = devlink_info_version_fixed_put(req,
+ 			DEVLINK_INFO_VERSION_GENERIC_ASIC_REV, buf);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (BNXT_PF(bp)) {
+ 		sprintf(buf, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
+ 			bp->dsn[7], bp->dsn[6], bp->dsn[5], bp->dsn[4],
+ 			bp->dsn[3], bp->dsn[2], bp->dsn[1], bp->dsn[0]);
+ 		rc = devlink_info_serial_number_put(req, buf);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 
+ 	if (strlen(ver_resp->active_pkg_name)) {
+ 		rc =
+ 		    devlink_info_version_running_put(req,
+ 					DEVLINK_INFO_VERSION_GENERIC_FW,
+ 					ver_resp->active_pkg_name);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 
+ 	if (BNXT_PF(bp) && !bnxt_hwrm_get_nvm_cfg_ver(bp, &nvm_cfg_ver)) {
+ 		u32 ver = nvm_cfg_ver.vu32;
+ 
+ 		sprintf(buf, "%X.%X.%X", (ver >> 16) & 0xF, (ver >> 8) & 0xF,
+ 			ver & 0xF);
+ 		rc = devlink_info_version_running_put(req,
+ 				DEVLINK_INFO_VERSION_GENERIC_FW_PSID, buf);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 
+ 	if (ver_resp->flags & VER_GET_RESP_FLAGS_EXT_VER_AVAIL) {
+ 		snprintf(fw_ver, FW_VER_STR_LEN, "%d.%d.%d.%d",
+ 			 ver_resp->hwrm_fw_major, ver_resp->hwrm_fw_minor,
+ 			 ver_resp->hwrm_fw_build, ver_resp->hwrm_fw_patch);
+ 
+ 		snprintf(mgmt_ver, FW_VER_STR_LEN, "%d.%d.%d.%d",
+ 			 ver_resp->mgmt_fw_major, ver_resp->mgmt_fw_minor,
+ 			 ver_resp->mgmt_fw_build, ver_resp->mgmt_fw_patch);
+ 
+ 		snprintf(roce_ver, FW_VER_STR_LEN, "%d.%d.%d.%d",
+ 			 ver_resp->roce_fw_major, ver_resp->roce_fw_minor,
+ 			 ver_resp->roce_fw_build, ver_resp->roce_fw_patch);
+ 	} else {
+ 		snprintf(fw_ver, FW_VER_STR_LEN, "%d.%d.%d.%d",
+ 			 ver_resp->hwrm_fw_maj_8b, ver_resp->hwrm_fw_min_8b,
+ 			 ver_resp->hwrm_fw_bld_8b, ver_resp->hwrm_fw_rsvd_8b);
+ 
+ 		snprintf(mgmt_ver, FW_VER_STR_LEN, "%d.%d.%d.%d",
+ 			 ver_resp->mgmt_fw_maj_8b, ver_resp->mgmt_fw_min_8b,
+ 			 ver_resp->mgmt_fw_bld_8b, ver_resp->mgmt_fw_rsvd_8b);
+ 
+ 		snprintf(roce_ver, FW_VER_STR_LEN, "%d.%d.%d.%d",
+ 			 ver_resp->roce_fw_maj_8b, ver_resp->roce_fw_min_8b,
+ 			 ver_resp->roce_fw_bld_8b, ver_resp->roce_fw_rsvd_8b);
+ 	}
+ 	rc = devlink_info_version_running_put(req,
+ 			DEVLINK_INFO_VERSION_GENERIC_FW_APP, fw_ver);
+ 	if (rc)
+ 		return rc;
+ 
+ 	rc = devlink_info_version_running_put(req,
+ 				DEVLINK_INFO_VERSION_GENERIC_FW_MGMT_API,
+ 				bp->hwrm_ver_supp);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (!(bp->flags & BNXT_FLAG_CHIP_P5)) {
+ 		rc = devlink_info_version_running_put(req,
+ 			DEVLINK_INFO_VERSION_GENERIC_FW_MGMT, mgmt_ver);
+ 		if (rc)
+ 			return rc;
+ 
+ 		rc = devlink_info_version_running_put(req,
+ 			DEVLINK_INFO_VERSION_GENERIC_FW_ROCE, roce_ver);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> 56d69c784d36 (bnxt_en: Add partno to devlink info_get cb)
  static int bnxt_hwrm_nvm_req(struct bnxt *bp, u32 param_id, void *msg,
  			     int msg_len, union devlink_param_value *val)
  {
* Unmerged path Documentation/networking/devlink/bnxt.rst
* Unmerged path Documentation/networking/devlink/bnxt.rst
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
