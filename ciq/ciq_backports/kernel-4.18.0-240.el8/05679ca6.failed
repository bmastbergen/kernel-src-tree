xdp: Prevent overflow in devmap_hash cost calculation for 32-bit builds

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit 05679ca6feebc1ef3bf743563315d9975adcf6fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/05679ca6.failed

Tetsuo pointed out that without an explicit cast, the cost calculation for
devmap_hash type maps could overflow on 32-bit builds. This adds the
missing cast.

Fixes: 6f9d451ab1a3 ("xdp: Add devmap_hash map type for looking up devices by hashed index")
	Reported-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20191017105702.2807093-1-toke@redhat.com
(cherry picked from commit 05679ca6feebc1ef3bf743563315d9975adcf6fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/devmap.c
diff --cc kernel/bpf/devmap.c
index cfc445b29247,c0a48f336997..000000000000
--- a/kernel/bpf/devmap.c
+++ b/kernel/bpf/devmap.c
@@@ -105,6 -123,14 +105,17 @@@ static int dev_map_init_map(struct bpf_
  	cost = (u64) dtab->map.max_entries * sizeof(struct bpf_dtab_netdev *);
  	cost += sizeof(struct list_head) * num_possible_cpus();
  
++<<<<<<< HEAD
++=======
+ 	if (attr->map_type == BPF_MAP_TYPE_DEVMAP_HASH) {
+ 		dtab->n_buckets = roundup_pow_of_two(dtab->map.max_entries);
+ 
+ 		if (!dtab->n_buckets) /* Overflow check */
+ 			return -EINVAL;
+ 		cost += (u64) sizeof(struct hlist_head) * dtab->n_buckets;
+ 	}
+ 
++>>>>>>> 05679ca6feeb (xdp: Prevent overflow in devmap_hash cost calculation for 32-bit builds)
  	/* if map size is larger than memlock limit, reject it */
  	err = bpf_map_charge_init(&dtab->map.memory, cost);
  	if (err)
* Unmerged path kernel/bpf/devmap.c
