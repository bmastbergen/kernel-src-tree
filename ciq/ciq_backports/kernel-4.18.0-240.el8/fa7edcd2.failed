drm/i915: Use intel_attached_encoder()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit fa7edcd25cd0ffd0321d89c2cf0257ce043c8e60
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fa7edcd2.failed

It's easy to confuse the drm_connector->encoder (legacy state
adjusted during modeset) and intel_connector->encoder (the statically
(sans. MST) attached encoder of the connector). For the latter
let's use intel_attached_encoder() consistently.

@@
identifier F !~ "^intel_attached_encoder$";
struct intel_connector *C;
expression E;
@@
F(...)
{
<...
(
  C->encoder = E
|
- C->encoder
+ intel_attached_encoder(C)
)
...>
}

@@
identifier F !~ "^intel_attached_encoder$";
struct drm_connector *C;
expression E;
@@
F(...)
{
<...
(
  to_intel_connector(C)->encoder = E
|
- to_intel_connector(C)->encoder
+ intel_attached_encoder(to_intel_connector(C))
)
...>
}

v2: Regenerated

	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20191204180549.1267-6-ville.syrjala@linux.intel.com
	Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
(cherry picked from commit fa7edcd25cd0ffd0321d89c2cf0257ce043c8e60)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
#	drivers/gpu/drm/i915/display/intel_dsi_dcs_backlight.c
#	drivers/gpu/drm/i915/display/intel_hdcp.c
#	drivers/gpu/drm/i915/display/intel_hotplug.c
#	drivers/gpu/drm/i915/display/intel_psr.c
#	drivers/gpu/drm/i915/i915_debugfs.c
diff --cc drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
index c801bea66719,e251ccd5bf6c..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
+++ b/drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
@@@ -57,7 -57,7 +57,11 @@@ static void set_aux_backlight_enable(st
   */
  static u32 intel_dp_aux_get_backlight(struct intel_connector *connector)
  {
++<<<<<<< HEAD
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_attached_encoder(connector));
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	u8 read_val[2] = { 0x0 };
  	u8 mode_reg;
  	u16 level = 0;
@@@ -99,7 -99,7 +103,11 @@@ static voi
  intel_dp_aux_set_backlight(const struct drm_connector_state *conn_state, u32 level)
  {
  	struct intel_connector *connector = to_intel_connector(conn_state->connector);
++<<<<<<< HEAD
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_attached_encoder(connector));
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	u8 vals[2] = { 0x0 };
  
  	vals[0] = level;
@@@ -127,7 -127,7 +135,11 @@@
  static bool intel_dp_aux_set_pwm_freq(struct intel_connector *connector)
  {
  	struct drm_i915_private *dev_priv = to_i915(connector->base.dev);
++<<<<<<< HEAD
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_attached_encoder(connector));
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	const u8 pn = connector->panel.backlight.pwmgen_bit_count;
  	int freq, fxp, f, fxp_actual, fxp_min, fxp_max;
  
@@@ -162,7 -162,7 +174,11 @@@ static void intel_dp_aux_enable_backlig
  					  const struct drm_connector_state *conn_state)
  {
  	struct intel_connector *connector = to_intel_connector(conn_state->connector);
++<<<<<<< HEAD
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_attached_encoder(connector));
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	struct intel_panel *panel = &connector->panel;
  	u8 dpcd_buf, new_dpcd_buf, edp_backlight_mode;
  
@@@ -220,7 -221,7 +236,11 @@@ static void intel_dp_aux_disable_backli
  static u32 intel_dp_aux_calc_max_backlight(struct intel_connector *connector)
  {
  	struct drm_i915_private *i915 = to_i915(connector->base.dev);
++<<<<<<< HEAD
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_attached_encoder(connector));
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	struct intel_panel *panel = &connector->panel;
  	u32 max_backlight = 0;
  	int freq, fxp, fxp_min, fxp_max, fxp_actual, f = 1;
@@@ -310,7 -311,7 +330,11 @@@ static int intel_dp_aux_setup_backlight
  static bool
  intel_dp_aux_display_control_capable(struct intel_connector *connector)
  {
++<<<<<<< HEAD
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_attached_encoder(connector));
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  
  	/* Check the eDP Display control capabilities registers to determine if
  	 * the panel can support backlight control over the aux channel
diff --cc drivers/gpu/drm/i915/display/intel_dsi_dcs_backlight.c
index 8c33262cb0b2,ac3eff26df12..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dsi_dcs_backlight.c
+++ b/drivers/gpu/drm/i915/display/intel_dsi_dcs_backlight.c
@@@ -45,8 -45,8 +45,13 @@@
  
  static u32 dcs_get_backlight(struct intel_connector *connector)
  {
++<<<<<<< HEAD
 +	struct intel_encoder *encoder = connector->encoder;
 +	struct intel_dsi *intel_dsi = enc_to_intel_dsi(&encoder->base);
++=======
+ 	struct intel_encoder *encoder = intel_attached_encoder(connector);
+ 	struct intel_dsi *intel_dsi = enc_to_intel_dsi(encoder);
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	struct mipi_dsi_device *dsi_device;
  	u8 data = 0;
  	enum port port;
diff --cc drivers/gpu/drm/i915/display/intel_hdcp.c
index 19667beb88a8,2859230671ae..000000000000
--- a/drivers/gpu/drm/i915/display/intel_hdcp.c
+++ b/drivers/gpu/drm/i915/display/intel_hdcp.c
@@@ -1493,11 -1527,12 +1493,16 @@@ static int hdcp2_enable_encryption(stru
  	struct intel_digital_port *intel_dig_port = conn_to_dig_port(connector);
  	struct drm_i915_private *dev_priv = to_i915(connector->base.dev);
  	struct intel_hdcp *hdcp = &connector->hdcp;
++<<<<<<< HEAD
 +	enum port port = connector->encoder->port;
++=======
+ 	enum port port = intel_attached_encoder(connector)->port;
+ 	enum transcoder cpu_transcoder = hdcp->cpu_transcoder;
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	int ret;
  
 -	WARN_ON(I915_READ(HDCP2_STATUS(dev_priv, cpu_transcoder, port)) &
 -		LINK_ENCRYPTION_STATUS);
 +	WARN_ON(I915_READ(HDCP2_STATUS_DDI(port)) & LINK_ENCRYPTION_STATUS);
 +
  	if (hdcp->shim->toggle_signalling) {
  		ret = hdcp->shim->toggle_signalling(intel_dig_port, true);
  		if (ret) {
@@@ -1527,16 -1565,21 +1532,21 @@@ static int hdcp2_disable_encryption(str
  	struct intel_digital_port *intel_dig_port = conn_to_dig_port(connector);
  	struct drm_i915_private *dev_priv = to_i915(connector->base.dev);
  	struct intel_hdcp *hdcp = &connector->hdcp;
++<<<<<<< HEAD
 +	enum port port = connector->encoder->port;
++=======
+ 	enum port port = intel_attached_encoder(connector)->port;
+ 	enum transcoder cpu_transcoder = hdcp->cpu_transcoder;
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	int ret;
  
 -	WARN_ON(!(I915_READ(HDCP2_STATUS(dev_priv, cpu_transcoder, port)) &
 -			    LINK_ENCRYPTION_STATUS));
 +	WARN_ON(!(I915_READ(HDCP2_STATUS_DDI(port)) & LINK_ENCRYPTION_STATUS));
  
 -	I915_WRITE(HDCP2_CTL(dev_priv, cpu_transcoder, port),
 -		   I915_READ(HDCP2_CTL(dev_priv, cpu_transcoder, port)) &
 -		   ~CTL_LINK_ENCRYPTION_REQ);
 +	I915_WRITE(HDCP2_CTL_DDI(port),
 +		   I915_READ(HDCP2_CTL_DDI(port)) & ~CTL_LINK_ENCRYPTION_REQ);
  
 -	ret = intel_de_wait_for_clear(dev_priv,
 -				      HDCP2_STATUS(dev_priv, cpu_transcoder,
 -						   port),
 -				      LINK_ENCRYPTION_STATUS,
 +	ret = intel_wait_for_register(&dev_priv->uncore, HDCP2_STATUS_DDI(port),
 +				      LINK_ENCRYPTION_STATUS, 0x0,
  				      ENCRYPT_STATUS_CHANGE_TIMEOUT_MS);
  	if (ret == -ETIMEDOUT)
  		DRM_DEBUG_KMS("Disable Encryption Timedout");
@@@ -1633,7 -1676,8 +1643,12 @@@ static int intel_hdcp2_check_link(struc
  	struct intel_digital_port *intel_dig_port = conn_to_dig_port(connector);
  	struct drm_i915_private *dev_priv = to_i915(connector->base.dev);
  	struct intel_hdcp *hdcp = &connector->hdcp;
++<<<<<<< HEAD
 +	enum port port = connector->encoder->port;
++=======
+ 	enum port port = intel_attached_encoder(connector)->port;
+ 	enum transcoder cpu_transcoder;
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	int ret = 0;
  
  	mutex_lock(&hdcp->mutex);
@@@ -1770,7 -1827,24 +1785,27 @@@ static inline int initialize_hdcp_port_
  	struct intel_hdcp *hdcp = &connector->hdcp;
  	struct hdcp_port_data *data = &hdcp->port_data;
  
++<<<<<<< HEAD
 +	data->fw_ddi = intel_get_mei_fw_ddi_index(connector->encoder->port);
++=======
+ 	if (INTEL_GEN(dev_priv) < 12)
+ 		data->fw_ddi =
+ 			intel_get_mei_fw_ddi_index(intel_attached_encoder(connector)->port);
+ 	else
+ 		/*
+ 		 * As per ME FW API expectation, for GEN 12+, fw_ddi is filled
+ 		 * with zero(INVALID PORT index).
+ 		 */
+ 		data->fw_ddi = MEI_DDI_INVALID_PORT;
+ 
+ 	/*
+ 	 * As associated transcoder is set and modified at modeset, here fw_tc
+ 	 * is initialized to zero (invalid transcoder index). This will be
+ 	 * retained for <Gen12 forever.
+ 	 */
+ 	data->fw_tc = MEI_INVALID_TRANSCODER;
+ 
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  	data->port_type = (u8)HDCP_PORT_TYPE_INTEGRATED;
  	data->protocol = (u8)shim->protocol;
  
diff --cc drivers/gpu/drm/i915/display/intel_hotplug.c
index ea3de4acc850,c3a48af35997..000000000000
--- a/drivers/gpu/drm/i915/display/intel_hotplug.c
+++ b/drivers/gpu/drm/i915/display/intel_hotplug.c
@@@ -373,11 -386,14 +373,17 @@@ static void i915_hotplug_work_func(stru
  
  	drm_connector_list_iter_begin(dev, &conn_iter);
  	drm_for_each_connector_iter(connector, &conn_iter) {
 -		u32 hpd_bit;
 -
  		intel_connector = to_intel_connector(connector);
- 		if (!intel_connector->encoder)
+ 		if (!intel_attached_encoder(intel_connector))
  			continue;
++<<<<<<< HEAD
 +		intel_encoder = intel_connector->encoder;
 +		if (hpd_event_bits & (1 << intel_encoder->hpd_pin)) {
++=======
+ 		intel_encoder = intel_attached_encoder(intel_connector);
+ 		hpd_bit = BIT(intel_encoder->hpd_pin);
+ 		if ((hpd_event_bits | hpd_retry_bits) & hpd_bit) {
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  			DRM_DEBUG_KMS("Connector %s (pin %i) received hotplug event.\n",
  				      connector->name, intel_encoder->hpd_pin);
  
diff --cc drivers/gpu/drm/i915/display/intel_psr.c
index 0c48249085cc,7f4056057f0c..000000000000
--- a/drivers/gpu/drm/i915/display/intel_psr.c
+++ b/drivers/gpu/drm/i915/display/intel_psr.c
@@@ -1317,3 -1519,27 +1317,30 @@@ bool intel_psr_enabled(struct intel_dp 
  
  	return ret;
  }
++<<<<<<< HEAD
++=======
+ 
+ void intel_psr_atomic_check(struct drm_connector *connector,
+ 			    struct drm_connector_state *old_state,
+ 			    struct drm_connector_state *new_state)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(connector->dev);
+ 	struct intel_connector *intel_connector;
+ 	struct intel_digital_port *dig_port;
+ 	struct drm_crtc_state *crtc_state;
+ 
+ 	if (!CAN_PSR(dev_priv) || !new_state->crtc ||
+ 	    dev_priv->psr.initially_probed)
+ 		return;
+ 
+ 	intel_connector = to_intel_connector(connector);
+ 	dig_port = enc_to_dig_port(intel_attached_encoder(intel_connector));
+ 	if (dev_priv->psr.dp != &dig_port->dp)
+ 		return;
+ 
+ 	crtc_state = drm_atomic_get_new_crtc_state(new_state->state,
+ 						   new_state->crtc);
+ 	crtc_state->mode_changed = true;
+ 	dev_priv->psr.initially_probed = true;
+ }
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
diff --cc drivers/gpu/drm/i915/i915_debugfs.c
index 62cf34db9280,49291f142386..000000000000
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@@ -2606,8 -2391,8 +2606,13 @@@ static void intel_panel_info(struct seq
  static void intel_dp_info(struct seq_file *m,
  			  struct intel_connector *intel_connector)
  {
++<<<<<<< HEAD
 +	struct intel_encoder *intel_encoder = intel_connector->encoder;
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&intel_encoder->base);
++=======
+ 	struct intel_encoder *intel_encoder = intel_attached_encoder(intel_connector);
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_encoder);
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  
  	seq_printf(m, "\tDPCD rev: %x\n", intel_dp->dpcd[DP_DPCD_REV]);
  	seq_printf(m, "\taudio support: %s\n", yesno(intel_dp->has_audio));
@@@ -2621,9 -2410,9 +2626,9 @@@
  static void intel_dp_mst_info(struct seq_file *m,
  			  struct intel_connector *intel_connector)
  {
- 	struct intel_encoder *intel_encoder = intel_connector->encoder;
+ 	struct intel_encoder *intel_encoder = intel_attached_encoder(intel_connector);
  	struct intel_dp_mst_encoder *intel_mst =
 -		enc_to_mst(intel_encoder);
 +		enc_to_mst(&intel_encoder->base);
  	struct intel_digital_port *intel_dig_port = intel_mst->primary;
  	struct intel_dp *intel_dp = &intel_dig_port->dp;
  	bool has_audio = drm_dp_mst_port_has_audio(&intel_dp->mst_mgr,
@@@ -2635,10 -2424,14 +2640,15 @@@
  static void intel_hdmi_info(struct seq_file *m,
  			    struct intel_connector *intel_connector)
  {
++<<<<<<< HEAD
 +	struct intel_encoder *intel_encoder = intel_connector->encoder;
 +	struct intel_hdmi *intel_hdmi = enc_to_intel_hdmi(&intel_encoder->base);
++=======
+ 	struct intel_encoder *intel_encoder = intel_attached_encoder(intel_connector);
+ 	struct intel_hdmi *intel_hdmi = enc_to_intel_hdmi(intel_encoder);
++>>>>>>> fa7edcd25cd0 (drm/i915: Use intel_attached_encoder())
  
  	seq_printf(m, "\taudio support: %s\n", yesno(intel_hdmi->has_audio));
 -	if (intel_connector->hdcp.shim) {
 -		seq_puts(m, "\tHDCP version: ");
 -		intel_hdcp_info(m, intel_connector);
 -	}
  }
  
  static void intel_lvds_info(struct seq_file *m,
diff --git a/drivers/gpu/drm/i915/display/intel_connector.c b/drivers/gpu/drm/i915/display/intel_connector.c
index 41310f8e5a2a..8ce8d28c1ff0 100644
--- a/drivers/gpu/drm/i915/display/intel_connector.c
+++ b/drivers/gpu/drm/i915/display/intel_connector.c
@@ -153,7 +153,7 @@ void intel_connector_attach_encoder(struct intel_connector *connector,
 bool intel_connector_get_hw_state(struct intel_connector *connector)
 {
 	enum pipe pipe = 0;
-	struct intel_encoder *encoder = connector->encoder;
+	struct intel_encoder *encoder = intel_attached_encoder(connector);
 
 	return encoder->get_hw_state(encoder, &pipe);
 }
diff --git a/drivers/gpu/drm/i915/display/intel_ddi.c b/drivers/gpu/drm/i915/display/intel_ddi.c
index fd58aa20d02e..7312c3e5704a 100644
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@ -1897,7 +1897,7 @@ bool intel_ddi_connector_get_hw_state(struct intel_connector *intel_connector)
 {
 	struct drm_device *dev = intel_connector->base.dev;
 	struct drm_i915_private *dev_priv = to_i915(dev);
-	struct intel_encoder *encoder = intel_connector->encoder;
+	struct intel_encoder *encoder = intel_attached_encoder(intel_connector);
 	int type = intel_connector->base.connector_type;
 	enum port port = encoder->port;
 	enum transcoder cpu_transcoder;
diff --git a/drivers/gpu/drm/i915/display/intel_display.c b/drivers/gpu/drm/i915/display/intel_display.c
index 5c8c11deb857..a64850c00413 100644
--- a/drivers/gpu/drm/i915/display/intel_display.c
+++ b/drivers/gpu/drm/i915/display/intel_display.c
@@ -7014,7 +7014,7 @@ static void intel_connector_verify_state(struct drm_crtc_state *crtc_state,
 		      connector->base.name);
 
 	if (connector->get_hw_state(connector)) {
-		struct intel_encoder *encoder = connector->encoder;
+		struct intel_encoder *encoder = intel_attached_encoder(connector);
 
 		I915_STATE_WARN(!crtc_state,
 			 "connector enabled without attached crtc\n");
@@ -16557,7 +16557,7 @@ static void intel_modeset_readout_hw_state(struct drm_device *dev)
 		if (connector->get_hw_state(connector)) {
 			connector->base.dpms = DRM_MODE_DPMS_ON;
 
-			encoder = connector->encoder;
+			encoder = intel_attached_encoder(connector);
 			connector->base.encoder = &encoder->base;
 
 			if (encoder->base.crtc &&
* Unmerged path drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
diff --git a/drivers/gpu/drm/i915/display/intel_dp_mst.c b/drivers/gpu/drm/i915/display/intel_dp_mst.c
index c8fe352ea6e7..f403289828de 100644
--- a/drivers/gpu/drm/i915/display/intel_dp_mst.c
+++ b/drivers/gpu/drm/i915/display/intel_dp_mst.c
@@ -490,9 +490,9 @@ static const struct drm_encoder_funcs intel_dp_mst_enc_funcs = {
 
 static bool intel_dp_mst_get_hw_state(struct intel_connector *connector)
 {
-	if (connector->encoder && connector->base.state->crtc) {
+	if (intel_attached_encoder(connector) && connector->base.state->crtc) {
 		enum pipe pipe;
-		if (!connector->encoder->get_hw_state(connector->encoder, &pipe))
+		if (!intel_attached_encoder(connector)->get_hw_state(intel_attached_encoder(connector), &pipe))
 			return false;
 		return true;
 	}
* Unmerged path drivers/gpu/drm/i915/display/intel_dsi_dcs_backlight.c
* Unmerged path drivers/gpu/drm/i915/display/intel_hdcp.c
* Unmerged path drivers/gpu/drm/i915/display/intel_hotplug.c
* Unmerged path drivers/gpu/drm/i915/display/intel_psr.c
diff --git a/drivers/gpu/drm/i915/display/vlv_dsi.c b/drivers/gpu/drm/i915/display/vlv_dsi.c
index e272d826210a..486597b88bea 100644
--- a/drivers/gpu/drm/i915/display/vlv_dsi.c
+++ b/drivers/gpu/drm/i915/display/vlv_dsi.c
@@ -1595,7 +1595,7 @@ static enum drm_panel_orientation
 vlv_dsi_get_hw_panel_orientation(struct intel_connector *connector)
 {
 	struct drm_i915_private *dev_priv = to_i915(connector->base.dev);
-	struct intel_encoder *encoder = connector->encoder;
+	struct intel_encoder *encoder = intel_attached_encoder(connector);
 	enum intel_display_power_domain power_domain;
 	enum drm_panel_orientation orientation;
 	struct intel_plane *plane;
* Unmerged path drivers/gpu/drm/i915/i915_debugfs.c
