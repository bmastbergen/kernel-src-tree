libbpf: Fix probe code to return EPERM if encountered

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Eelco Chaudron <echaudro@redhat.com>
commit fd9eef1a132d1974405c3ebf9d5688ec5c51da94
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fd9eef1a.failed

When the probe code was failing for any reason ENOTSUP was returned, even
if this was due to not having enough lock space. This patch fixes this by
returning EPERM to the user application, so it can respond and increase
the RLIMIT_MEMLOCK size.

	Signed-off-by: Eelco Chaudron <echaudro@redhat.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/158927424896.2342.10402475603585742943.stgit@ebuild
(cherry picked from commit fd9eef1a132d1974405c3ebf9d5688ec5c51da94)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 7277de638c6d,fd882616ab52..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -4171,9 -5657,22 +4192,28 @@@ int bpf_object__load_xattr(struct bpf_o
  
  	obj->loaded = true;
  
++<<<<<<< HEAD
 +	CHECK_ERR(bpf_object__create_maps(obj), err, out);
 +	CHECK_ERR(bpf_object__relocate(obj, attr->target_btf_path), err, out);
 +	CHECK_ERR(bpf_object__load_progs(obj, attr->log_level), err, out);
++=======
+ 	err = bpf_object__probe_loading(obj);
+ 	err = err ? : bpf_object__probe_caps(obj);
+ 	err = err ? : bpf_object__resolve_externs(obj, obj->kconfig);
+ 	err = err ? : bpf_object__sanitize_and_load_btf(obj);
+ 	err = err ? : bpf_object__sanitize_maps(obj);
+ 	err = err ? : bpf_object__load_vmlinux_btf(obj);
+ 	err = err ? : bpf_object__init_kern_struct_ops_maps(obj);
+ 	err = err ? : bpf_object__create_maps(obj);
+ 	err = err ? : bpf_object__relocate(obj, attr->target_btf_path);
+ 	err = err ? : bpf_object__load_progs(obj, attr->log_level);
+ 
+ 	btf__free(obj->btf_vmlinux);
+ 	obj->btf_vmlinux = NULL;
+ 
+ 	if (err)
+ 		goto out;
++>>>>>>> fd9eef1a132d (libbpf: Fix probe code to return EPERM if encountered)
  
  	return 0;
  out:
* Unmerged path tools/lib/bpf/libbpf.c
