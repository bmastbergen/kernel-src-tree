netfilter: conntrack: export nf_ct_acct_update()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 8ac2bd357775b3abf838110833279ea1a3b035e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8ac2bd35.failed

This function allows you to update the conntrack counters.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 8ac2bd357775b3abf838110833279ea1a3b035e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/nf_conntrack_acct.h
diff --cc include/net/netfilter/nf_conntrack_acct.h
index 79d8d16732b4,df198c51244a..000000000000
--- a/include/net/netfilter/nf_conntrack_acct.h
+++ b/include/net/netfilter/nf_conntrack_acct.h
@@@ -58,11 -60,14 +58,17 @@@ static inline bool nf_ct_acct_enabled(s
  /* Enable/disable connection tracking accounting */
  static inline void nf_ct_set_acct(struct net *net, bool enable)
  {
 -#if IS_ENABLED(CONFIG_NF_CONNTRACK)
  	net->ct.sysctl_acct = enable;
 -#endif
  }
  
++<<<<<<< HEAD
 +int nf_conntrack_acct_pernet_init(struct net *net);
 +void nf_conntrack_acct_pernet_fini(struct net *net);
++=======
+ void nf_ct_acct_update(struct nf_conn *ct, u32 dir, unsigned int bytes);
+ 
+ void nf_conntrack_acct_pernet_init(struct net *net);
++>>>>>>> 8ac2bd357775 (netfilter: conntrack: export nf_ct_acct_update())
  
  int nf_conntrack_acct_init(void);
  void nf_conntrack_acct_fini(void);
* Unmerged path include/net/netfilter/nf_conntrack_acct.h
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 680e0b0d92a5..b82b7eb36605 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -760,9 +760,7 @@ nf_conntrack_hash_check_insert(struct nf_conn *ct)
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_hash_check_insert);
 
-static inline void nf_ct_acct_update(struct nf_conn *ct,
-				     enum ip_conntrack_info ctinfo,
-				     unsigned int len)
+void nf_ct_acct_update(struct nf_conn *ct, u32 dir, unsigned int bytes)
 {
 	struct nf_conn_acct *acct;
 
@@ -770,10 +768,11 @@ static inline void nf_ct_acct_update(struct nf_conn *ct,
 	if (acct) {
 		struct nf_conn_counter *counter = acct->counter;
 
-		atomic64_inc(&counter[CTINFO2DIR(ctinfo)].packets);
-		atomic64_add(len, &counter[CTINFO2DIR(ctinfo)].bytes);
+		atomic64_inc(&counter[dir].packets);
+		atomic64_add(bytes, &counter[dir].bytes);
 	}
 }
+EXPORT_SYMBOL_GPL(nf_ct_acct_update);
 
 static void nf_ct_acct_merge(struct nf_conn *ct, enum ip_conntrack_info ctinfo,
 			     const struct nf_conn *loser_ct)
@@ -787,7 +786,7 @@ static void nf_ct_acct_merge(struct nf_conn *ct, enum ip_conntrack_info ctinfo,
 
 		/* u32 should be fine since we must have seen one packet. */
 		bytes = atomic64_read(&counter[CTINFO2DIR(ctinfo)].bytes);
-		nf_ct_acct_update(ct, ctinfo, bytes);
+		nf_ct_acct_update(ct, CTINFO2DIR(ctinfo), bytes);
 	}
 }
 
@@ -1640,7 +1639,7 @@ void __nf_ct_refresh_acct(struct nf_conn *ct,
 	ct->timeout = extra_jiffies;
 acct:
 	if (do_acct)
-		nf_ct_acct_update(ct, ctinfo, skb->len);
+		nf_ct_acct_update(ct, CTINFO2DIR(ctinfo), skb->len);
 }
 EXPORT_SYMBOL_GPL(__nf_ct_refresh_acct);
 
@@ -1648,7 +1647,7 @@ bool nf_ct_kill_acct(struct nf_conn *ct,
 		     enum ip_conntrack_info ctinfo,
 		     const struct sk_buff *skb)
 {
-	nf_ct_acct_update(ct, ctinfo, skb->len);
+	nf_ct_acct_update(ct, CTINFO2DIR(ctinfo), skb->len);
 
 	return nf_ct_delete(ct, 0, 0);
 }
