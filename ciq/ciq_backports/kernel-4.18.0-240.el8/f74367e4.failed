drm/amdgpu/display: create fake mst encoders ahead of time (v4)

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alex Deucher <alexander.deucher@amd.com>
commit f74367e492ba24be43ba0f440c6bac98a6f3b277
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f74367e4.failed

Prevents a warning in the MST create connector case.

v2: create global fake encoders rather per connector fake encoders
to avoid running out of encoder indices.

v3: use the actual number of crtcs on the asic rather than the max
to conserve encoders.

v4: v3 plus missing hunk I forgot to git add.

Bug: https://gitlab.freedesktop.org/drm/amd/-/issues/1108
Fixes: c6385e503aeaf9 ("drm/amdgpu: drop legacy drm load and unload callbacks")
	Reviewed-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit f74367e492ba24be43ba0f440c6bac98a6f3b277)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.h
#	drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c
#	drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.h
diff --cc drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.h
index b89cbbfcc0e9,3f50328fe537..000000000000
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.h
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.h
@@@ -237,7 -333,13 +240,17 @@@ struct amdgpu_display_manager 
  	 * available in FW
  	 */
  	const struct gpu_info_soc_bounding_box_v1_0 *soc_bounding_box;
++<<<<<<< HEAD
 +#endif
++=======
+ 
+ 	/**
+ 	 * @mst_encoders:
+ 	 *
+ 	 * fake encoders used for DP MST.
+ 	 */
+ 	struct amdgpu_encoder mst_encoders[AMDGPU_DM_MAX_CRTC];
++>>>>>>> f74367e492ba (drm/amdgpu/display: create fake mst encoders ahead of time (v4))
  };
  
  struct amdgpu_dm_connector {
@@@ -266,7 -368,7 +279,11 @@@
  	struct amdgpu_dm_dp_aux dm_dp_aux;
  	struct drm_dp_mst_port *port;
  	struct amdgpu_dm_connector *mst_port;
++<<<<<<< HEAD
 +	struct amdgpu_encoder *mst_encoder;
++=======
+ 	struct drm_dp_aux *dsc_aux;
++>>>>>>> f74367e492ba (drm/amdgpu/display: create fake mst encoders ahead of time (v4))
  
  	/* TODO see if we can merge with ddc_bus or make a dm_connector */
  	struct amdgpu_i2c_adapter *i2c;
diff --cc drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c
index 6e205ee36ac3,0affd1997fe7..000000000000
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c
@@@ -141,19 -93,49 +141,29 @@@ dm_dp_mst_detect(struct drm_connector *
  static void
  dm_dp_mst_connector_destroy(struct drm_connector *connector)
  {
++<<<<<<< HEAD
 +	struct amdgpu_dm_connector *amdgpu_dm_connector = to_amdgpu_dm_connector(connector);
 +	struct amdgpu_encoder *amdgpu_encoder = amdgpu_dm_connector->mst_encoder;
++=======
+ 	struct amdgpu_dm_connector *aconnector =
+ 		to_amdgpu_dm_connector(connector);
++>>>>>>> f74367e492ba (drm/amdgpu/display: create fake mst encoders ahead of time (v4))
  
 -	if (aconnector->dc_sink) {
 -		dc_link_remove_remote_sink(aconnector->dc_link,
 -					   aconnector->dc_sink);
 -		dc_sink_release(aconnector->dc_sink);
 +	if (amdgpu_dm_connector->edid) {
 +		kfree(amdgpu_dm_connector->edid);
 +		amdgpu_dm_connector->edid = NULL;
  	}
  
++<<<<<<< HEAD
 +	drm_encoder_cleanup(&amdgpu_encoder->base);
 +	kfree(amdgpu_encoder);
++=======
+ 	kfree(aconnector->edid);
+ 
++>>>>>>> f74367e492ba (drm/amdgpu/display: create fake mst encoders ahead of time (v4))
  	drm_connector_cleanup(connector);
 -	drm_dp_mst_put_port_malloc(aconnector->port);
 -	kfree(aconnector);
 -}
 -
 -static int
 -amdgpu_dm_mst_connector_late_register(struct drm_connector *connector)
 -{
 -	struct amdgpu_dm_connector *amdgpu_dm_connector =
 -		to_amdgpu_dm_connector(connector);
 -	int r;
 -
 -	r = drm_dp_mst_connector_late_register(connector,
 -					       amdgpu_dm_connector->port);
 -	if (r < 0)
 -		return r;
 -
 -#if defined(CONFIG_DEBUG_FS)
 -	connector_debugfs_init(amdgpu_dm_connector);
 -#endif
 -
 -	return 0;
 -}
 -
 -static void
 -amdgpu_dm_mst_connector_early_unregister(struct drm_connector *connector)
 -{
 -	struct amdgpu_dm_connector *amdgpu_dm_connector =
 -		to_amdgpu_dm_connector(connector);
 -	struct drm_dp_mst_port *port = amdgpu_dm_connector->port;
 -
 -	drm_dp_mst_connector_early_unregister(connector, port);
 +	drm_dp_mst_put_port_malloc(amdgpu_dm_connector->port);
 +	kfree(amdgpu_dm_connector);
  }
  
  static const struct drm_connector_funcs dm_dp_mst_connector_funcs = {
@@@ -223,11 -236,57 +233,20 @@@ static int dm_dp_mst_get_modes(struct d
  	return ret;
  }
  
 -static struct drm_encoder *
 -dm_mst_atomic_best_encoder(struct drm_connector *connector,
 -			   struct drm_connector_state *connector_state)
 +static struct drm_encoder *dm_mst_best_encoder(struct drm_connector *connector)
  {
++<<<<<<< HEAD
 +	struct amdgpu_dm_connector *amdgpu_dm_connector = to_amdgpu_dm_connector(connector);
++=======
+ 	struct drm_device *dev = connector->dev;
+ 	struct amdgpu_device *adev = dev->dev_private;
+ 	struct amdgpu_crtc *acrtc = to_amdgpu_crtc(connector_state->crtc);
+ 
+ 	return &adev->dm.mst_encoders[acrtc->crtc_id].base;
+ }
++>>>>>>> f74367e492ba (drm/amdgpu/display: create fake mst encoders ahead of time (v4))
  
 -static int
 -dm_dp_mst_detect(struct drm_connector *connector,
 -		 struct drm_modeset_acquire_ctx *ctx, bool force)
 -{
 -	struct amdgpu_dm_connector *aconnector = to_amdgpu_dm_connector(connector);
 -	struct amdgpu_dm_connector *master = aconnector->mst_port;
 -
 -	return drm_dp_mst_detect_port(connector, ctx, &master->mst_mgr,
 -				      aconnector->port);
 -}
 -
 -static int dm_dp_mst_atomic_check(struct drm_connector *connector,
 -				struct drm_atomic_state *state)
 -{
 -	struct drm_connector_state *new_conn_state =
 -			drm_atomic_get_new_connector_state(state, connector);
 -	struct drm_connector_state *old_conn_state =
 -			drm_atomic_get_old_connector_state(state, connector);
 -	struct amdgpu_dm_connector *aconnector = to_amdgpu_dm_connector(connector);
 -	struct drm_crtc_state *new_crtc_state;
 -	struct drm_dp_mst_topology_mgr *mst_mgr;
 -	struct drm_dp_mst_port *mst_port;
 -
 -	mst_port = aconnector->port;
 -	mst_mgr = &aconnector->mst_port->mst_mgr;
 -
 -	if (!old_conn_state->crtc)
 -		return 0;
 -
 -	if (new_conn_state->crtc) {
 -		new_crtc_state = drm_atomic_get_new_crtc_state(state, new_conn_state->crtc);
 -		if (!new_crtc_state ||
 -		    !drm_atomic_crtc_needs_modeset(new_crtc_state) ||
 -		    new_crtc_state->enable)
 -			return 0;
 -		}
 -
 -	return drm_dp_atomic_release_vcpi_slots(state,
 -						mst_mgr,
 -						mst_port);
 +	return &amdgpu_dm_connector->mst_encoder->base;
  }
  
  static const struct drm_connector_helper_funcs dm_dp_mst_connector_helper_funcs = {
@@@ -309,10 -367,19 +325,11 @@@ dm_dp_add_mst_connector(struct drm_dp_m
  		master->dc_link,
  		master->connector_id);
  
- 	aconnector->mst_encoder = dm_dp_create_fake_mst_encoder(master);
- 	drm_connector_attach_encoder(&aconnector->base,
- 				     &aconnector->mst_encoder->base);
+ 	for (i = 0; i < adev->dm.display_indexes_num; i++) {
+ 		drm_connector_attach_encoder(&aconnector->base,
+ 					     &adev->dm.mst_encoders[i].base);
+ 	}
  
 -	connector->max_bpc_property = master->base.max_bpc_property;
 -	if (connector->max_bpc_property)
 -		drm_connector_attach_max_bpc_property(connector, 8, 16);
 -
 -	connector->vrr_capable_property = master->base.vrr_capable_property;
 -	if (connector->vrr_capable_property)
 -		drm_connector_attach_vrr_capable_property(connector);
 -
  	drm_object_attach_property(
  		&connector->base,
  		dev->mode_config.path_property,
diff --cc drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.h
index 2da851b40042,b38bd68121ce..000000000000
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.h
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.h
@@@ -29,7 -29,18 +29,20 @@@
  struct amdgpu_display_manager;
  struct amdgpu_dm_connector;
  
 -int dm_mst_get_pbn_divider(struct dc_link *link);
 -
  void amdgpu_dm_initialize_dp_connector(struct amdgpu_display_manager *dm,
++<<<<<<< HEAD
 +				       struct amdgpu_dm_connector *aconnector);
++=======
+ 				       struct amdgpu_dm_connector *aconnector,
+ 				       int link_index);
+ 
+ void
+ dm_dp_create_fake_mst_encoders(struct amdgpu_device *adev);
+ 
+ #if defined(CONFIG_DRM_AMD_DC_DCN)
+ bool compute_mst_dsc_configs_for_state(struct drm_atomic_state *state,
+ 				       struct dc_state *dc_state);
+ #endif
++>>>>>>> f74367e492ba (drm/amdgpu/display: create fake mst encoders ahead of time (v4))
  
  #endif
diff --git a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
index 3a8489bf308b..46dfe2abb1a7 100644
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
@@ -729,6 +729,9 @@ static int amdgpu_dm_init(struct amdgpu_device *adev)
 	/* Update the actual used number of crtc */
 	adev->mode_info.num_crtc = adev->dm.display_indexes_num;
 
+	/* create fake encoders for MST */
+	dm_dp_create_fake_mst_encoders(adev);
+
 	/* TODO: Add_display_info? */
 
 	/* TODO use dynamic cursor width */
@@ -757,6 +760,12 @@ static int amdgpu_dm_init(struct amdgpu_device *adev)
 
 static void amdgpu_dm_fini(struct amdgpu_device *adev)
 {
+	int i;
+
+	for (i = 0; i < adev->dm.display_indexes_num; i++) {
+		drm_encoder_cleanup(&adev->dm.mst_encoders[i].base);
+	}
+
 	amdgpu_dm_audio_fini(adev);
 
 	amdgpu_dm_destroy_drm_device(&adev->dm);
* Unmerged path drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.h
* Unmerged path drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.c
* Unmerged path drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_mst_types.h
