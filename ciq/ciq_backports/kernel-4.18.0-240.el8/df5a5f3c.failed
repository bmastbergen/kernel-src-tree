perf tools: Add arm64 version of get_cpuid()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author John Garry <john.garry@huawei.com>
commit df5a5f3cf24608457bb5e57297dd9f0d528be58f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/df5a5f3c.failed

Add an arm64 version of get_cpuid(), which is used for various annotation
and headers - for example, I now get the CPUID in "perf report --header",
as shown in this snippet:

  # hostname : ubuntu
  # os release : 5.5.0-rc1-dirty
  # perf version : 5.5.rc1.gbf8a13dc9851
  # arch : aarch64
  # nrcpus online : 96
  # nrcpus avail : 96
  # cpuid : 0x00000000480fd010

Since much of the code to read the MIDR is already in get_cpuid_str(),
factor out this code.

Tester notes:

I tested this patch on my new ARM64 Kunpeng 920 server.
[root@node1 zsk]# ./perf --version
perf version 5.6.rc1.g2cdb955b7252

Both perf list and perf stat can work.

	Signed-off-by: John Garry <john.garry@huawei.com>
	Tested-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Will Deacon <will@kernel.org>
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linuxarm@huawei.com
Link: http://lore.kernel.org/lkml/1576245255-210926-1-git-send-email-john.garry@huawei.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit df5a5f3cf24608457bb5e57297dd9f0d528be58f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/arm64/util/header.c
diff --cc tools/perf/arch/arm64/util/header.c
index dbbcdab2e988,d730666ab95d..000000000000
--- a/tools/perf/arch/arm64/util/header.c
+++ b/tools/perf/arch/arm64/util/header.c
@@@ -1,6 -1,10 +1,13 @@@
  #include <stdio.h>
  #include <stdlib.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <util/cpumap.h>
+ #include <internal/cpumap.h>
++>>>>>>> df5a5f3cf246 (perf tools: Add arm64 version of get_cpuid())
  #include <api/fs/fs.h>
+ #include <errno.h>
  #include "debug.h"
  #include "header.h"
  
@@@ -10,26 -14,21 +17,32 @@@
  #define MIDR_VARIANT_SHIFT      20
  #define MIDR_VARIANT_MASK       (0xf << MIDR_VARIANT_SHIFT)
  
- char *get_cpuid_str(struct perf_pmu *pmu)
+ static int _get_cpuid(char *buf, size_t sz, struct perf_cpu_map *cpus)
  {
- 	char *buf = NULL;
- 	char path[PATH_MAX];
  	const char *sysfs = sysfs__mountpoint();
- 	int cpu;
  	u64 midr = 0;
++<<<<<<< HEAD
 +	struct cpu_map *cpus;
 +	FILE *file;
++=======
+ 	int cpu;
++>>>>>>> df5a5f3cf246 (perf tools: Add arm64 version of get_cpuid())
  
- 	if (!sysfs || !pmu || !pmu->cpus)
- 		return NULL;
+ 	if (!sysfs || sz < MIDR_SIZE)
+ 		return EINVAL;
  
- 	buf = malloc(MIDR_SIZE);
- 	if (!buf)
- 		return NULL;
+ 	cpus = perf_cpu_map__get(cpus);
  
++<<<<<<< HEAD
 +	/* read midr from list of cpus mapped to this pmu */
 +	cpus = cpu_map__get(pmu->cpus);
 +	for (cpu = 0; cpu < cpus->nr; cpu++) {
++=======
+ 	for (cpu = 0; cpu < perf_cpu_map__nr(cpus); cpu++) {
+ 		char path[PATH_MAX];
+ 		FILE *file;
+ 
++>>>>>>> df5a5f3cf246 (perf tools: Add arm64 version of get_cpuid())
  		scnprintf(path, PATH_MAX, "%s/devices/system/cpu/cpu%d"MIDR,
  				sysfs, cpus->map[cpu]);
  
@@@ -61,6 -97,5 +111,9 @@@ char *get_cpuid_str(struct perf_pmu *pm
  		buf = NULL;
  	}
  
++<<<<<<< HEAD
 +	cpu_map__put(cpus);
++=======
++>>>>>>> df5a5f3cf246 (perf tools: Add arm64 version of get_cpuid())
  	return buf;
  }
* Unmerged path tools/perf/arch/arm64/util/header.c
