PM: QoS: Simplify definitions of CPU latency QoS trace events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 333eed7d20069e2d80446f5fdf9ac3868b55e7b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/333eed7d.failed

Modify the definitions of the CPU latency QoS trace events to take
one argument (since PM_QOS_CPU_DMA_LATENCY is always passed as the
pm_qos_class argument to them) and update the documentation of them
accordingly (while at it, make it explicitly mention CPU latency QoS
and relocate it after the device PM QoS trace events documentation).

The names and output format of the trace events do not change to
preserve user space compatibility.

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
	Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
	Tested-by: Amit Kucheria <amit.kucheria@linaro.org>
(cherry picked from commit 333eed7d20069e2d80446f5fdf9ac3868b55e7b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/power/qos.c
diff --cc kernel/power/qos.c
index 61dc8358d615,afac7010e0f2..000000000000
--- a/kernel/power/qos.c
+++ b/kernel/power/qos.c
@@@ -263,15 -247,12 +263,20 @@@ int pm_qos_request_active(struct pm_qos
  }
  EXPORT_SYMBOL_GPL(pm_qos_request_active);
  
++<<<<<<< HEAD
 +static void __pm_qos_update_request(struct pm_qos_request *req,
 +			   s32 new_value)
++=======
+ static void cpu_latency_qos_apply(struct pm_qos_request *req,
+ 				  enum pm_qos_req_action action, s32 value)
++>>>>>>> 333eed7d2006 (PM: QoS: Simplify definitions of CPU latency QoS trace events)
  {
 -	int ret = pm_qos_update_target(req->qos, &req->node, action, value);
 -	if (ret > 0)
 -		wake_up_all_idle_cpus();
 +	trace_pm_qos_update_request(req->pm_qos_class, new_value);
 +
 +	if (new_value != req->node.prio)
 +		pm_qos_update_target(
 +			pm_qos_array[req->pm_qos_class]->constraints,
 +			&req->node, PM_QOS_UPDATE_REQ, new_value);
  }
  
  /**
@@@ -297,10 -277,11 +302,18 @@@ void pm_qos_add_request(struct pm_qos_r
  		WARN(1, KERN_ERR "pm_qos_add_request() called for already added request\n");
  		return;
  	}
++<<<<<<< HEAD
 +	req->pm_qos_class = pm_qos_class;
 +	trace_pm_qos_add_request(pm_qos_class, value);
 +	pm_qos_update_target(pm_qos_array[pm_qos_class]->constraints,
 +			     &req->node, PM_QOS_ADD_REQ, value);
++=======
+ 
+ 	trace_pm_qos_add_request(value);
+ 
+ 	req->qos = &cpu_latency_constraints;
+ 	cpu_latency_qos_apply(req, PM_QOS_ADD_REQ, value);
++>>>>>>> 333eed7d2006 (PM: QoS: Simplify definitions of CPU latency QoS trace events)
  }
  EXPORT_SYMBOL_GPL(pm_qos_add_request);
  
@@@ -325,7 -305,12 +338,16 @@@ void pm_qos_update_request(struct pm_qo
  		return;
  	}
  
++<<<<<<< HEAD
 +	__pm_qos_update_request(req, new_value);
++=======
+ 	trace_pm_qos_update_request(new_value);
+ 
+ 	if (new_value == req->node.prio)
+ 		return;
+ 
+ 	cpu_latency_qos_apply(req, PM_QOS_UPDATE_REQ, new_value);
++>>>>>>> 333eed7d2006 (PM: QoS: Simplify definitions of CPU latency QoS trace events)
  }
  EXPORT_SYMBOL_GPL(pm_qos_update_request);
  
@@@ -348,10 -333,9 +370,16 @@@ void pm_qos_remove_request(struct pm_qo
  		return;
  	}
  
++<<<<<<< HEAD
 +	trace_pm_qos_remove_request(req->pm_qos_class, PM_QOS_DEFAULT_VALUE);
 +	pm_qos_update_target(pm_qos_array[req->pm_qos_class]->constraints,
 +			     &req->node, PM_QOS_REMOVE_REQ,
 +			     PM_QOS_DEFAULT_VALUE);
++=======
+ 	trace_pm_qos_remove_request(PM_QOS_DEFAULT_VALUE);
+ 
+ 	cpu_latency_qos_apply(req, PM_QOS_REMOVE_REQ, PM_QOS_DEFAULT_VALUE);
++>>>>>>> 333eed7d2006 (PM: QoS: Simplify definitions of CPU latency QoS trace events)
  	memset(req, 0, sizeof(*req));
  }
  EXPORT_SYMBOL_GPL(pm_qos_remove_request);
diff --git a/Documentation/trace/events-power.rst b/Documentation/trace/events-power.rst
index eec7453a168e..f45bf11fa88d 100644
--- a/Documentation/trace/events-power.rst
+++ b/Documentation/trace/events-power.rst
@@ -73,14 +73,6 @@ The second parameter is the power domain target state.
 ================
 The PM QoS events are used for QoS add/update/remove request and for
 target/flags update.
-::
-
-  pm_qos_add_request                 "pm_qos_class=%s value=%d"
-  pm_qos_update_request              "pm_qos_class=%s value=%d"
-  pm_qos_remove_request              "pm_qos_class=%s value=%d"
-
-The first parameter gives the QoS class name (e.g. "CPU_DMA_LATENCY").
-The second parameter is value to be added/updated/removed.
 ::
 
   pm_qos_update_target               "action=%s prev_value=%d curr_value=%d"
@@ -90,7 +82,7 @@ The first parameter gives the QoS action name (e.g. "ADD_REQ").
 The second parameter is the previous QoS value.
 The third parameter is the current QoS value to update.
 
-And, there are also events used for device PM QoS add/update/remove request.
+There are also events used for device PM QoS add/update/remove request.
 ::
 
   dev_pm_qos_add_request             "device=%s type=%s new_value=%d"
@@ -101,3 +93,12 @@ The first parameter gives the device name which tries to add/update/remove
 QoS requests.
 The second parameter gives the request type (e.g. "DEV_PM_QOS_RESUME_LATENCY").
 The third parameter is value to be added/updated/removed.
+
+And, there are events used for CPU latency QoS add/update/remove request.
+::
+
+  pm_qos_add_request        "value=%d"
+  pm_qos_update_request     "value=%d"
+  pm_qos_remove_request     "value=%d"
+
+The parameter is the value to be added/updated/removed.
diff --git a/include/trace/events/power.h b/include/trace/events/power.h
index ecf39daabf16..af5018aa9517 100644
--- a/include/trace/events/power.h
+++ b/include/trace/events/power.h
@@ -359,51 +359,50 @@ DEFINE_EVENT(power_domain, power_domain_target,
 );
 
 /*
- * The pm qos events are used for pm qos update
+ * CPU latency QoS events used for global CPU latency QoS list updates
  */
-DECLARE_EVENT_CLASS(pm_qos_request,
+DECLARE_EVENT_CLASS(cpu_latency_qos_request,
 
-	TP_PROTO(int pm_qos_class, s32 value),
+	TP_PROTO(s32 value),
 
-	TP_ARGS(pm_qos_class, value),
+	TP_ARGS(value),
 
 	TP_STRUCT__entry(
-		__field( int,                    pm_qos_class   )
 		__field( s32,                    value          )
 	),
 
 	TP_fast_assign(
-		__entry->pm_qos_class = pm_qos_class;
 		__entry->value = value;
 	),
 
-	TP_printk("pm_qos_class=%s value=%d",
-		  __print_symbolic(__entry->pm_qos_class,
-			{ PM_QOS_CPU_DMA_LATENCY,	"CPU_DMA_LATENCY" }),
+	TP_printk("CPU_DMA_LATENCY value=%d",
 		  __entry->value)
 );
 
-DEFINE_EVENT(pm_qos_request, pm_qos_add_request,
+DEFINE_EVENT(cpu_latency_qos_request, pm_qos_add_request,
 
-	TP_PROTO(int pm_qos_class, s32 value),
+	TP_PROTO(s32 value),
 
-	TP_ARGS(pm_qos_class, value)
+	TP_ARGS(value)
 );
 
-DEFINE_EVENT(pm_qos_request, pm_qos_update_request,
+DEFINE_EVENT(cpu_latency_qos_request, pm_qos_update_request,
 
-	TP_PROTO(int pm_qos_class, s32 value),
+	TP_PROTO(s32 value),
 
-	TP_ARGS(pm_qos_class, value)
+	TP_ARGS(value)
 );
 
-DEFINE_EVENT(pm_qos_request, pm_qos_remove_request,
+DEFINE_EVENT(cpu_latency_qos_request, pm_qos_remove_request,
 
-	TP_PROTO(int pm_qos_class, s32 value),
+	TP_PROTO(s32 value),
 
-	TP_ARGS(pm_qos_class, value)
+	TP_ARGS(value)
 );
 
+/*
+ * General PM QoS events used for updates of PM QoS request lists
+ */
 DECLARE_EVENT_CLASS(pm_qos_update,
 
 	TP_PROTO(enum pm_qos_req_action action, int prev_value, int curr_value),
* Unmerged path kernel/power/qos.c
