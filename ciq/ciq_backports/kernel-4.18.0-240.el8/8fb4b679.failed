perf record: Add --all-cgroups option

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Namhyung Kim <namhyung@kernel.org>
commit 8fb4b67939e169fca68174e9ac7be79fe9a04498
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8fb4b679.failed

The --all-cgroups option is to enable cgroup profiling support.  It
tells kernel to record CGROUP events in the ring buffer so that perf
report can identify task/cgroup association later.

  [root@seventh ~]# perf record --all-cgroups --namespaces /wb/cgtest
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 0.042 MB perf.data (558 samples) ]
  [root@seventh ~]# perf report --stdio -s cgroup_id,cgroup,pid
  # To display the perf.data header info, please use --header/--header-only options.
  #
  #
  # Total Lost Samples: 0
  #
  # Samples: 558  of event 'cycles'
  # Event count (approx.): 458017341
  #
  # Overhead  cgroup id (dev/inode)  Cgroup          Pid:Command
  # ........  .....................  ..........  ...............
  #
      33.15%  4/0xeffffffb           /sub           9615:looper0
      32.83%  4/0xf00002f5           /sub/cgrp2     9620:looper2
      32.79%  4/0xf00002f4           /sub/cgrp1     9619:looper1
       0.35%  4/0xf00002f5           /sub/cgrp2     9618:cgtest
       0.34%  4/0xf00002f4           /sub/cgrp1     9617:cgtest
       0.32%  4/0xeffffffb           /              9615:looper0
       0.11%  4/0xeffffffb           /sub           9617:cgtest
       0.10%  4/0xeffffffb           /sub           9618:cgtest

  #
  # (Tip: Sample related events with: perf record -e '{cycles,instructions}:S')
  #
  [root@seventh ~]#

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20200325124536.2800725-8-namhyung@kernel.org
Link: http://lore.kernel.org/lkml/20200402015249.3800462-1-namhyung@kernel.org
[ Extracted the HAVE_FILE_HANDLE from the followup patch ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 8fb4b67939e169fca68174e9ac7be79fe9a04498)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/record.h
diff --cc tools/perf/util/evsel.c
index ebf7fb36e8ca,eb880efbce16..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -2013,25 -1794,38 +2018,36 @@@ try_fallback
  	 * Must probe features in the order they were added to the
  	 * perf_event_attr interface.
  	 */
++<<<<<<< HEAD
 +	if (!perf_missing_features.bpf_event && evsel->attr.bpf_event) {
 +		perf_missing_features.bpf_event = true;
 +		pr_debug2("switching off bpf_event\n");
++=======
+         if (!perf_missing_features.cgroup && evsel->core.attr.cgroup) {
+ 		perf_missing_features.cgroup = true;
+ 		pr_debug2_peo("Kernel has no cgroup sampling support, bailing out\n");
+ 		goto out_close;
+         } else if (!perf_missing_features.branch_hw_idx &&
+ 	    (evsel->core.attr.branch_sample_type & PERF_SAMPLE_BRANCH_HW_INDEX)) {
+ 		perf_missing_features.branch_hw_idx = true;
+ 		pr_debug2("switching off branch HW index support\n");
++>>>>>>> 8fb4b67939e1 (perf record: Add --all-cgroups option)
  		goto fallback_missing_features;
 -	} else if (!perf_missing_features.aux_output && evsel->core.attr.aux_output) {
 -		perf_missing_features.aux_output = true;
 -		pr_debug2_peo("Kernel has no attr.aux_output support, bailing out\n");
 -		goto out_close;
 -	} else if (!perf_missing_features.bpf && evsel->core.attr.bpf_event) {
 -		perf_missing_features.bpf = true;
 -		pr_debug2_peo("switching off bpf_event\n");
 -		goto fallback_missing_features;
 -	} else if (!perf_missing_features.ksymbol && evsel->core.attr.ksymbol) {
 +	} else if (!perf_missing_features.ksymbol && evsel->attr.ksymbol) {
  		perf_missing_features.ksymbol = true;
 -		pr_debug2_peo("switching off ksymbol\n");
 +		pr_debug2("switching off ksymbol\n");
  		goto fallback_missing_features;
 -	} else if (!perf_missing_features.write_backward && evsel->core.attr.write_backward) {
 +	} else if (!perf_missing_features.write_backward && evsel->attr.write_backward) {
  		perf_missing_features.write_backward = true;
 -		pr_debug2_peo("switching off write_backward\n");
 +		pr_debug2("switching off write_backward\n");
  		goto out_close;
 -	} else if (!perf_missing_features.clockid_wrong && evsel->core.attr.use_clockid) {
 +	} else if (!perf_missing_features.clockid_wrong && evsel->attr.use_clockid) {
  		perf_missing_features.clockid_wrong = true;
 -		pr_debug2_peo("switching off clockid\n");
 +		pr_debug2("switching off clockid\n");
  		goto fallback_missing_features;
 -	} else if (!perf_missing_features.clockid && evsel->core.attr.use_clockid) {
 +	} else if (!perf_missing_features.clockid && evsel->attr.use_clockid) {
  		perf_missing_features.clockid = true;
 -		pr_debug2_peo("switching off use_clockid\n");
 +		pr_debug2("switching off use_clockid\n");
  		goto fallback_missing_features;
  	} else if (!perf_missing_features.cloexec && (flags & PERF_FLAG_FD_CLOEXEC)) {
  		perf_missing_features.cloexec = true;
diff --cc tools/perf/util/evsel.h
index 2ab992b39a4c,53187c501ee8..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -184,7 -117,10 +184,14 @@@ struct perf_missing_features 
  	bool write_backward;
  	bool group_read;
  	bool ksymbol;
++<<<<<<< HEAD
 +	bool bpf_event;
++=======
+ 	bool bpf;
+ 	bool aux_output;
+ 	bool branch_hw_idx;
+ 	bool cgroup;
++>>>>>>> 8fb4b67939e1 (perf record: Add --all-cgroups option)
  };
  
  extern struct perf_missing_features perf_missing_features;
* Unmerged path tools/perf/util/record.h
diff --git a/tools/perf/Documentation/perf-record.txt b/tools/perf/Documentation/perf-record.txt
index 2381560b6e8d..694f582a0707 100644
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@ -388,7 +388,10 @@ displayed with the weight and local_weight sort keys.  This currently works for
 abort events and some memory events in precise mode on modern Intel CPUs.
 
 --namespaces::
-Record events of type PERF_RECORD_NAMESPACES.
+Record events of type PERF_RECORD_NAMESPACES.  This enables 'cgroup_id' sort key.
+
+--all-cgroups::
+Record events of type PERF_RECORD_CGROUP.  This enables 'cgroup' sort key.
 
 --transaction::
 Record transaction flags for transaction related events.
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 8d9bbe9f78ab..e4e8b8685e79 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1378,6 +1378,15 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 	if (rec->opts.record_namespaces)
 		tool->namespace_events = true;
 
+	if (rec->opts.record_cgroup) {
+#ifdef HAVE_FILE_HANDLE
+		tool->cgroup_events = true;
+#else
+		pr_err("cgroup tracking is not supported\n");
+		return -1;
+#endif
+	}
+
 	if (rec->opts.auxtrace_snapshot_mode || rec->switch_output.enabled) {
 		signal(SIGUSR2, snapshot_sig_handler);
 		if (rec->opts.auxtrace_snapshot_mode)
@@ -2266,6 +2275,8 @@ static struct option __record_options[] = {
 			"per thread proc mmap processing timeout in ms"),
 	OPT_BOOLEAN(0, "namespaces", &record.opts.record_namespaces,
 		    "Record namespaces events"),
+	OPT_BOOLEAN(0, "all-cgroups", &record.opts.record_cgroup,
+		    "Record cgroup events"),
 	OPT_BOOLEAN(0, "switch-events", &record.opts.record_switch_events,
 		    "Record context switch events"),
 	OPT_BOOLEAN_FLAG(0, "all-kernel", &record.opts.all_kernel,
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/record.h
