drm/i915: Move ringbuffer WAs to engine workaround list

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
commit 380f0423180768f4a2f368c3ee3d417e255de176
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/380f0423.failed

Now that intel_engine_apply_workarounds is called on all gens, we can
use the engine workaround lists for pre-gen8 workarounds as well to be
consistent in the way we handle and dump the WAs.

v2: Ignore the sanity check of MI_MODE on Broadwater, for whatever reason
it is not sticking.

	Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
	Cc: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
	Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
Link: https://patchwork.freedesktop.org/patch/msgid/20200201194004.3622493-1-chris@chris-wilson.co.uk
(cherry picked from commit 380f0423180768f4a2f368c3ee3d417e255de176)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_ringbuffer.c
#	drivers/gpu/drm/i915/gt/intel_workarounds.c
diff --cc drivers/gpu/drm/i915/gt/intel_ringbuffer.c
index 12010e798868,9537d4912225..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/gt/intel_ringbuffer.c
@@@ -826,47 -854,13 +826,53 @@@ static int rcs_resume(struct intel_engi
  	 * they are already accustomed to from before contexts were
  	 * enabled.
  	 */
 -	if (IS_GEN(i915, 4))
 -		intel_uncore_write(uncore, ECOSKPD,
 +	if (IS_GEN(dev_priv, 4))
 +		I915_WRITE(ECOSKPD,
  			   _MASKED_BIT_ENABLE(ECO_CONSTANT_BUFFER_SR_DISABLE));
  
++<<<<<<< HEAD:drivers/gpu/drm/i915/gt/intel_ringbuffer.c
 +	/* WaTimedSingleVertexDispatch:cl,bw,ctg,elk,ilk,snb */
 +	if (IS_GEN_RANGE(dev_priv, 4, 6))
 +		I915_WRITE(MI_MODE, _MASKED_BIT_ENABLE(VS_TIMER_DISPATCH));
 +
 +	/* We need to disable the AsyncFlip performance optimisations in order
 +	 * to use MI_WAIT_FOR_EVENT within the CS. It should already be
 +	 * programmed to '1' on all products.
 +	 *
 +	 * WaDisableAsyncFlipPerfMode:snb,ivb,hsw,vlv
 +	 */
 +	if (IS_GEN_RANGE(dev_priv, 6, 7))
 +		I915_WRITE(MI_MODE, _MASKED_BIT_ENABLE(ASYNC_FLIP_PERF_DISABLE));
 +
 +	/* Required for the hardware to program scanline values for waiting */
 +	/* WaEnableFlushTlbInvalidationMode:snb */
 +	if (IS_GEN(dev_priv, 6))
 +		I915_WRITE(GFX_MODE,
 +			   _MASKED_BIT_ENABLE(GFX_TLB_INVALIDATE_EXPLICIT));
 +
 +	/* WaBCSVCSTlbInvalidationMode:ivb,vlv,hsw */
 +	if (IS_GEN(dev_priv, 7))
 +		I915_WRITE(GFX_MODE_GEN7,
 +			   _MASKED_BIT_ENABLE(GFX_TLB_INVALIDATE_EXPLICIT) |
 +			   _MASKED_BIT_ENABLE(GFX_REPLAY_MODE));
 +
 +	if (IS_GEN(dev_priv, 6)) {
 +		/* From the Sandybridge PRM, volume 1 part 3, page 24:
 +		 * "If this bit is set, STCunit will have LRA as replacement
 +		 *  policy. [...] This bit must be reset.  LRA replacement
 +		 *  policy is not supported."
 +		 */
 +		I915_WRITE(CACHE_MODE_0,
 +			   _MASKED_BIT_DISABLE(CM0_STC_EVICT_DISABLE_LRA_SNB));
 +	}
 +
 +	if (IS_GEN_RANGE(dev_priv, 6, 7))
 +		I915_WRITE(INSTPM, _MASKED_BIT_ENABLE(INSTPM_FORCE_ORDERING));
++=======
+ 	if (IS_GEN_RANGE(i915, 6, 7))
+ 		intel_uncore_write(uncore, INSTPM,
+ 				   _MASKED_BIT_ENABLE(INSTPM_FORCE_ORDERING));
++>>>>>>> 380f04231807 (drm/i915: Move ringbuffer WAs to engine workaround list):drivers/gpu/drm/i915/gt/intel_ring_submission.c
  
  	return xcs_resume(engine);
  }
diff --cc drivers/gpu/drm/i915/gt/intel_workarounds.c
index 8f75882ded3f,61106129287f..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_workarounds.c
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds.c
@@@ -1355,10 -1528,10 +1401,10 @@@ xcs_engine_wa_init(struct intel_engine_
  static void
  engine_init_workarounds(struct intel_engine_cs *engine, struct i915_wa_list *wal)
  {
- 	if (I915_SELFTEST_ONLY(INTEL_GEN(engine->i915) < 8))
+ 	if (I915_SELFTEST_ONLY(INTEL_GEN(engine->i915) < 4))
  		return;
  
 -	if (engine->class == RENDER_CLASS)
 +	if (engine->id == RCS0)
  		rcs_engine_wa_init(engine, wal);
  	else
  		xcs_engine_wa_init(engine, wal);
@@@ -1368,10 -1541,10 +1414,14 @@@ void intel_engine_init_workarounds(stru
  {
  	struct i915_wa_list *wal = &engine->wa_list;
  
++<<<<<<< HEAD
 +	if (GEM_WARN_ON(INTEL_GEN(engine->i915) < 8))
++=======
+ 	if (INTEL_GEN(engine->i915) < 4)
++>>>>>>> 380f04231807 (drm/i915: Move ringbuffer WAs to engine workaround list)
  		return;
  
 -	wa_init_start(wal, "engine", engine->name);
 +	wa_init_start(wal, engine->name);
  	engine_init_workarounds(engine, wal);
  	wa_init_finish(wal);
  }
* Unmerged path drivers/gpu/drm/i915/gt/intel_ringbuffer.c
* Unmerged path drivers/gpu/drm/i915/gt/intel_workarounds.c
