lib/smp_processor_id: Don't use cpumask_equal()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Waiman Long <longman@redhat.com>
commit e950cca3f3c40902a052a78a36b3fac1f8a62d19
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e950cca3.failed

The check_preemption_disabled() function uses cpumask_equal() to see
if the task is bounded to the current CPU only. cpumask_equal() calls
memcmp() to do the comparison. As x86 doesn't have __HAVE_ARCH_MEMCMP,
the slow memcmp() function in lib/string.c is used.

On a RT kernel that call check_preemption_disabled() very frequently,
below is the perf-record output of a certain microbenchmark:

  42.75%  2.45%  testpmd [kernel.kallsyms] [k] check_preemption_disabled
  40.01% 39.97%  testpmd [kernel.kallsyms] [k] memcmp

We should avoid calling memcmp() in performance critical path. So the
cpumask_equal() call is now replaced with an equivalent simpler check.

	Signed-off-by: Waiman Long <longman@redhat.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Juri Lelli <juri.lelli@redhat.com>
	Acked-by:  Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20191003203608.21881-1-longman@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e950cca3f3c40902a052a78a36b3fac1f8a62d19)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/smp_processor_id.c
diff --cc lib/smp_processor_id.c
index 85925aaa4fff,bd9571653288..000000000000
--- a/lib/smp_processor_id.c
+++ b/lib/smp_processor_id.c
@@@ -22,7 -23,7 +22,11 @@@ notrace static unsigned int check_preem
  	 * Kernel threads bound to a single CPU can safely use
  	 * smp_processor_id():
  	 */
++<<<<<<< HEAD
 +	if (cpumask_equal(&current->cpus_allowed, cpumask_of(this_cpu)))
++=======
+ 	if (current->nr_cpus_allowed == 1)
++>>>>>>> e950cca3f3c4 (lib/smp_processor_id: Don't use cpumask_equal())
  		goto out;
  
  	/*
* Unmerged path lib/smp_processor_id.c
