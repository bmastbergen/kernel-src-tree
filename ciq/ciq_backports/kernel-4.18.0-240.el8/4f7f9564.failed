ASoC: SOF: fix an Oops, caused by invalid topology

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: SOF: fix an Oops, caused by invalid topology (Jaroslav Kysela) [1797509]
Rebuild_FUZZ: 94.34%
commit-author Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
commit 4f7f9564a8937f38f97e8624cb7d6a28ee35f7cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4f7f9564.failed

It is possible to create invalid topology that will cause a kernel
Oops when trying to allocate buffers for a NULL substream.
Specifically such an Oops was caused by a topology, where a DAI on a
capture pipeline was referencing the PCM ID from a playback pipeline.
Fix the Oops by explicitly checking for NULL.

	Signed-off-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20200124213625.30186-2-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 4f7f9564a8937f38f97e8624cb7d6a28ee35f7cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/pcm.c
diff --cc sound/soc/sof/pcm.c
index dd0bf75d160e,29435ba2d329..000000000000
--- a/sound/soc/sof/pcm.c
+++ b/sound/soc/sof/pcm.c
@@@ -591,13 -587,19 +591,25 @@@ static int sof_pcm_new(struct snd_soc_c
  	caps = &spcm->pcm.caps[stream];
  
  	/* pre-allocate playback audio buffer pages */
 -	dev_dbg(component->dev,
 -		"spcm: allocate %s playback DMA buffer size 0x%x max 0x%x\n",
 +	dev_dbg(sdev->dev, "spcm: allocate %s playback DMA buffer size 0x%x max 0x%x\n",
  		caps->name, caps->buffer_size_min, caps->buffer_size_max);
  
++<<<<<<< HEAD
 +	snd_pcm_lib_preallocate_pages(pcm->streams[stream].substream,
 +				      SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
 +				      le32_to_cpu(caps->buffer_size_min),
 +				      le32_to_cpu(caps->buffer_size_max));
++=======
+ 	if (!pcm->streams[stream].substream) {
+ 		dev_err(component->dev, "error: NULL playback substream!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	snd_pcm_set_managed_buffer(pcm->streams[stream].substream,
+ 				   SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
+ 				   le32_to_cpu(caps->buffer_size_min),
+ 				   le32_to_cpu(caps->buffer_size_max));
++>>>>>>> 4f7f9564a893 (ASoC: SOF: fix an Oops, caused by invalid topology)
  capture:
  	stream = SNDRV_PCM_STREAM_CAPTURE;
  
@@@ -608,13 -610,19 +620,25 @@@
  	caps = &spcm->pcm.caps[stream];
  
  	/* pre-allocate capture audio buffer pages */
 -	dev_dbg(component->dev,
 -		"spcm: allocate %s capture DMA buffer size 0x%x max 0x%x\n",
 +	dev_dbg(sdev->dev, "spcm: allocate %s capture DMA buffer size 0x%x max 0x%x\n",
  		caps->name, caps->buffer_size_min, caps->buffer_size_max);
  
++<<<<<<< HEAD
 +	snd_pcm_lib_preallocate_pages(pcm->streams[stream].substream,
 +				      SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
 +				      le32_to_cpu(caps->buffer_size_min),
 +				      le32_to_cpu(caps->buffer_size_max));
++=======
+ 	if (!pcm->streams[stream].substream) {
+ 		dev_err(component->dev, "error: NULL capture substream!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	snd_pcm_set_managed_buffer(pcm->streams[stream].substream,
+ 				   SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
+ 				   le32_to_cpu(caps->buffer_size_min),
+ 				   le32_to_cpu(caps->buffer_size_max));
++>>>>>>> 4f7f9564a893 (ASoC: SOF: fix an Oops, caused by invalid topology)
  
  	return 0;
  }
* Unmerged path sound/soc/sof/pcm.c
