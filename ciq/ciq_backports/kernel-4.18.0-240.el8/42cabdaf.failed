scsi: zfcp: log FC Endpoint Security errors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jens Remus <jremus@linux.ibm.com>
commit 42cabdaf103be174adb6f1ca61383eb2b35a013a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/42cabdaf.failed

Log any FC Endpoint Security errors to the kernel ring buffer with rate-
limiting.

Link: https://lore.kernel.org/r/20200312174505.51294-11-maier@linux.ibm.com
	Reviewed-by: Steffen Maier <maier@linux.ibm.com>
	Signed-off-by: Jens Remus <jremus@linux.ibm.com>
	Signed-off-by: Steffen Maier <maier@linux.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 42cabdaf103be174adb6f1ca61383eb2b35a013a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/scsi/zfcp_fsf.c
diff --cc drivers/s390/scsi/zfcp_fsf.c
index aaa4066c5699,662ddbc74263..000000000000
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@@ -1388,6 -1598,111 +1388,114 @@@ out_unlock
  	return retval;
  }
  
++<<<<<<< HEAD
++=======
+ static void zfcp_fsf_log_port_fc_security(struct zfcp_port *port,
+ 					  struct zfcp_fsf_req *req)
+ {
+ 	char mnemonic_old[ZFCP_FSF_MAX_FC_SECURITY_MNEMONIC_LENGTH];
+ 	char mnemonic_new[ZFCP_FSF_MAX_FC_SECURITY_MNEMONIC_LENGTH];
+ 
+ 	if (port->connection_info == port->connection_info_old) {
+ 		/* no change, no log nor trace */
+ 		return;
+ 	}
+ 
+ 	zfcp_dbf_hba_fsf_fces("fsfcesp", req, port->wwpn,
+ 			      port->connection_info_old,
+ 			      port->connection_info);
+ 
+ 	zfcp_fsf_scnprint_fc_security(mnemonic_old, sizeof(mnemonic_old),
+ 				      port->connection_info_old,
+ 				      ZFCP_FSF_PRINT_FMT_SINGLEITEM);
+ 	zfcp_fsf_scnprint_fc_security(mnemonic_new, sizeof(mnemonic_new),
+ 				      port->connection_info,
+ 				      ZFCP_FSF_PRINT_FMT_SINGLEITEM);
+ 
+ 	if (strncmp(mnemonic_old, mnemonic_new,
+ 		    ZFCP_FSF_MAX_FC_SECURITY_MNEMONIC_LENGTH) == 0) {
+ 		/* no change in string representation, no log */
+ 		goto out;
+ 	}
+ 
+ 	if (port->connection_info_old == 0) {
+ 		/* activation */
+ 		dev_info(&port->adapter->ccw_device->dev,
+ 			 "FC Endpoint Security of connection to remote port 0x%16llx enabled: %s\n",
+ 			 port->wwpn, mnemonic_new);
+ 	} else if (port->connection_info == 0) {
+ 		/* deactivation */
+ 		dev_warn(&port->adapter->ccw_device->dev,
+ 			 "FC Endpoint Security of connection to remote port 0x%16llx disabled: was %s\n",
+ 			 port->wwpn, mnemonic_old);
+ 	} else {
+ 		/* change */
+ 		dev_warn(&port->adapter->ccw_device->dev,
+ 			 "FC Endpoint Security of connection to remote port 0x%16llx changed: from %s to %s\n",
+ 			 port->wwpn, mnemonic_old, mnemonic_new);
+ 	}
+ 
+ out:
+ 	port->connection_info_old = port->connection_info;
+ }
+ 
+ static void zfcp_fsf_log_security_error(const struct device *dev, u32 fsf_sqw0,
+ 					u64 wwpn)
+ {
+ 	switch (fsf_sqw0) {
+ 
+ 	/*
+ 	 * Open Port command error codes
+ 	 */
+ 
+ 	case FSF_SQ_SECURITY_REQUIRED:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: FC security is required but not supported or configured on remote port 0x%016llx\n",
+ 				     wwpn);
+ 		break;
+ 	case FSF_SQ_SECURITY_TIMEOUT:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: a timeout prevented opening remote port 0x%016llx\n",
+ 				     wwpn);
+ 		break;
+ 	case FSF_SQ_SECURITY_KM_UNAVAILABLE:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: opening remote port 0x%016llx failed because local and external key manager cannot communicate\n",
+ 				     wwpn);
+ 		break;
+ 	case FSF_SQ_SECURITY_RKM_UNAVAILABLE:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: opening remote port 0x%016llx failed because it cannot communicate with the external key manager\n",
+ 				     wwpn);
+ 		break;
+ 	case FSF_SQ_SECURITY_AUTH_FAILURE:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: the device could not verify the identity of remote port 0x%016llx\n",
+ 				     wwpn);
+ 		break;
+ 
+ 	/*
+ 	 * Send FCP command error codes
+ 	 */
+ 
+ 	case FSF_SQ_SECURITY_ENC_FAILURE:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: FC connection to remote port 0x%016llx closed because encryption broke down\n",
+ 				     wwpn);
+ 		break;
+ 
+ 	/*
+ 	 * Unknown error codes
+ 	 */
+ 
+ 	default:
+ 		dev_warn_ratelimited(dev,
+ 				     "FC Endpoint Security error: the device issued an unknown error code 0x%08x related to the FC connection to remote port 0x%016llx\n",
+ 				     fsf_sqw0, wwpn);
+ 	}
+ }
+ 
++>>>>>>> 42cabdaf103b (scsi: zfcp: log FC Endpoint Security errors)
  static void zfcp_fsf_open_port_handler(struct zfcp_fsf_req *req)
  {
  	struct zfcp_adapter *adapter = req->adapter;
@@@ -1411,6 -1726,12 +1519,15 @@@
  					 ZFCP_STATUS_COMMON_ERP_FAILED);
  		req->status |= ZFCP_STATUS_FSFREQ_ERROR;
  		break;
++<<<<<<< HEAD
++=======
+ 	case FSF_SECURITY_ERROR:
+ 		zfcp_fsf_log_security_error(&req->adapter->ccw_device->dev,
+ 					    header->fsf_status_qual.word[0],
+ 					    port->wwpn);
+ 		req->status |= ZFCP_STATUS_FSFREQ_ERROR;
+ 		break;
++>>>>>>> 42cabdaf103b (scsi: zfcp: log FC Endpoint Security errors)
  	case FSF_ADAPTER_STATUS_AVAILABLE:
  		switch (header->fsf_status_qual.word[0]) {
  		case FSF_SQ_INVOKE_LINK_TEST_PROCEDURE:
@@@ -2132,6 -2462,13 +2249,16 @@@ static void zfcp_fsf_fcp_handler_common
  			zfcp_fc_test_link(zfcp_sdev->port);
  		req->status |= ZFCP_STATUS_FSFREQ_ERROR;
  		break;
++<<<<<<< HEAD
++=======
+ 	case FSF_SECURITY_ERROR:
+ 		zfcp_fsf_log_security_error(&req->adapter->ccw_device->dev,
+ 					    header->fsf_status_qual.word[0],
+ 					    zfcp_sdev->port->wwpn);
+ 		zfcp_erp_port_forced_reopen(zfcp_sdev->port, 0, "fssfch7");
+ 		req->status |= ZFCP_STATUS_FSFREQ_ERROR;
+ 		break;
++>>>>>>> 42cabdaf103b (scsi: zfcp: log FC Endpoint Security errors)
  	}
  }
  
* Unmerged path drivers/s390/scsi/zfcp_fsf.c
diff --git a/drivers/s390/scsi/zfcp_fsf.h b/drivers/s390/scsi/zfcp_fsf.h
index 535628b92f0a..a6832640afc8 100644
--- a/drivers/s390/scsi/zfcp_fsf.h
+++ b/drivers/s390/scsi/zfcp_fsf.h
@@ -110,6 +110,14 @@
 #define FSF_PSQ_LINK_MODE_TABLE_CURRUPTED	0x00004000
 #define FSF_PSQ_LINK_NO_WWPN_ASSIGNMENT		0x00008000
 
+/* FSF status qualifier, security error */
+#define FSF_SQ_SECURITY_REQUIRED		0x00000001
+#define FSF_SQ_SECURITY_TIMEOUT			0x00000002
+#define FSF_SQ_SECURITY_KM_UNAVAILABLE		0x00000003
+#define FSF_SQ_SECURITY_RKM_UNAVAILABLE		0x00000004
+#define FSF_SQ_SECURITY_AUTH_FAILURE		0x00000005
+#define FSF_SQ_SECURITY_ENC_FAILURE		0x00000010
+
 /* payload size in status read buffer */
 #define FSF_STATUS_READ_PAYLOAD_SIZE		4032
 
