nvme: add a Identify Namespace Identification Descriptor list quirk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 5bedd3afee8eb01ccd256f0cd2cc0fa6f841417a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5bedd3af.failed

Add a quirk for a device that does not support the Identify Namespace
Identification Descriptor list despite claiming 1.3 compliance.

Fixes: ea43d9709f72 ("nvme: fix identify error status silent ignore")
	Reported-by: Ingo Brunberg <ingo_brunberg@web.de>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Tested-by: Ingo Brunberg <ingo_brunberg@web.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
(cherry picked from commit 5bedd3afee8eb01ccd256f0cd2cc0fa6f841417a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/nvme.h
diff --cc drivers/nvme/host/core.c
index 54bfa09c007b,4ee2330c603e..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1022,8 -1115,11 +1025,14 @@@ static int nvme_identify_ns_descs(struc
  
  	status = nvme_submit_sync_cmd(ctrl->admin_q, &c, data,
  				      NVME_IDENTIFY_DATA_SIZE);
++<<<<<<< HEAD
 +	if (status)
++=======
+ 	if (status) {
+ 		dev_warn(ctrl->device,
+ 			"Identify Descriptors failed (%d)\n", status);
++>>>>>>> 5bedd3afee8e (nvme: add a Identify Namespace Identification Descriptor list quirk)
  		goto free_data;
 -	}
  
  	for (pos = 0; pos < NVME_IDENTIFY_DATA_SIZE; pos += len) {
  		struct nvme_ns_id_desc *cur = data + pos;
diff --cc drivers/nvme/host/nvme.h
index 09ed30add536,09ffc3246f60..000000000000
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@@ -97,6 -109,33 +97,36 @@@ enum nvme_quirks 
  	 * Force simple suspend/resume path.
  	 */
  	NVME_QUIRK_SIMPLE_SUSPEND		= (1 << 10),
++<<<<<<< HEAD
++=======
+ 
+ 	/*
+ 	 * Use only one interrupt vector for all queues
+ 	 */
+ 	NVME_QUIRK_SINGLE_VECTOR		= (1 << 11),
+ 
+ 	/*
+ 	 * Use non-standard 128 bytes SQEs.
+ 	 */
+ 	NVME_QUIRK_128_BYTES_SQES		= (1 << 12),
+ 
+ 	/*
+ 	 * Prevent tag overlap between queues
+ 	 */
+ 	NVME_QUIRK_SHARED_TAGS                  = (1 << 13),
+ 
+ 	/*
+ 	 * Don't change the value of the temperature threshold feature
+ 	 */
+ 	NVME_QUIRK_NO_TEMP_THRESH_CHANGE	= (1 << 14),
+ 
+ 	/*
+ 	 * The controller doesn't handle the Identify Namespace
+ 	 * Identification Descriptor list subcommand despite claiming
+ 	 * NVMe 1.3 compliance.
+ 	 */
+ 	NVME_QUIRK_NO_NS_DESC_LIST		= (1 << 15),
++>>>>>>> 5bedd3afee8e (nvme: add a Identify Namespace Identification Descriptor list quirk)
  };
  
  /*
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/nvme.h
diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
index 2bab31a7d130..3e048d986339 100644
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -3000,6 +3000,8 @@ static const struct pci_device_id nvme_id_table[] = {
 	{ PCI_VDEVICE(INTEL, 0x5845),	/* Qemu emulated controller */
 		.driver_data = NVME_QUIRK_IDENTIFY_CNS |
 				NVME_QUIRK_DISABLE_WRITE_ZEROES, },
+	{ PCI_DEVICE(0x126f, 0x2263),	/* Silicon Motion unidentified */
+		.driver_data = NVME_QUIRK_NO_NS_DESC_LIST, },
 	{ PCI_DEVICE(0x1bb1, 0x0100),   /* Seagate Nytro Flash Storage */
 		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
 	{ PCI_DEVICE(0x1c58, 0x0003),	/* HGST adapter */
