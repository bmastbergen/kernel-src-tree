esp4: add gso_segment for esp4 beet mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Xin Long <lucien.xin@gmail.com>
commit 384a46ea7bdc77e1e070b728d427b763e364613c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/384a46ea.failed

Similar to xfrm4_tunnel/transport_gso_segment(), _gso_segment()
is added to do gso_segment for esp4 beet mode. Before calling
inet_offloads[proto]->callbacks.gso_segment, it needs to do:

  - Get the upper proto from ph header to get its gso_segment
    when xo->proto is IPPROTO_BEETPH.

  - Add SKB_GSO_TCPV4 to gso_type if x->sel.family == AF_INET6
    and the proto == IPPROTO_TCP, so that the current tcp ipv4
    packet can be segmented.

  - Calculate a right value for skb->transport_header and move
    skb->data to the transport header position.

	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit 384a46ea7bdc77e1e070b728d427b763e364613c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/esp4_offload.c
diff --cc net/ipv4/esp4_offload.c
index 27b0232dd3b1,731022cff600..000000000000
--- a/net/ipv4/esp4_offload.c
+++ b/net/ipv4/esp4_offload.c
@@@ -110,6 -108,76 +110,79 @@@ static void esp4_gso_encap(struct xfrm_
  	xo->proto = proto;
  }
  
++<<<<<<< HEAD
++=======
+ static struct sk_buff *xfrm4_tunnel_gso_segment(struct xfrm_state *x,
+ 						struct sk_buff *skb,
+ 						netdev_features_t features)
+ {
+ 	__skb_push(skb, skb->mac_len);
+ 	return skb_mac_gso_segment(skb, features);
+ }
+ 
+ static struct sk_buff *xfrm4_transport_gso_segment(struct xfrm_state *x,
+ 						   struct sk_buff *skb,
+ 						   netdev_features_t features)
+ {
+ 	const struct net_offload *ops;
+ 	struct sk_buff *segs = ERR_PTR(-EINVAL);
+ 	struct xfrm_offload *xo = xfrm_offload(skb);
+ 
+ 	skb->transport_header += x->props.header_len;
+ 	ops = rcu_dereference(inet_offloads[xo->proto]);
+ 	if (likely(ops && ops->callbacks.gso_segment))
+ 		segs = ops->callbacks.gso_segment(skb, features);
+ 
+ 	return segs;
+ }
+ 
+ static struct sk_buff *xfrm4_beet_gso_segment(struct xfrm_state *x,
+ 					      struct sk_buff *skb,
+ 					      netdev_features_t features)
+ {
+ 	struct xfrm_offload *xo = xfrm_offload(skb);
+ 	struct sk_buff *segs = ERR_PTR(-EINVAL);
+ 	const struct net_offload *ops;
+ 	int proto = xo->proto;
+ 
+ 	skb->transport_header += x->props.header_len;
+ 
+ 	if (proto == IPPROTO_BEETPH) {
+ 		struct ip_beet_phdr *ph = (struct ip_beet_phdr *)skb->data;
+ 
+ 		skb->transport_header += ph->hdrlen * 8;
+ 		proto = ph->nexthdr;
+ 	} else if (x->sel.family != AF_INET6) {
+ 		skb->transport_header -= IPV4_BEET_PHMAXLEN;
+ 	} else if (proto == IPPROTO_TCP) {
+ 		skb_shinfo(skb)->gso_type |= SKB_GSO_TCPV4;
+ 	}
+ 
+ 	__skb_pull(skb, skb_transport_offset(skb));
+ 	ops = rcu_dereference(inet_offloads[proto]);
+ 	if (likely(ops && ops->callbacks.gso_segment))
+ 		segs = ops->callbacks.gso_segment(skb, features);
+ 
+ 	return segs;
+ }
+ 
+ static struct sk_buff *xfrm4_outer_mode_gso_segment(struct xfrm_state *x,
+ 						    struct sk_buff *skb,
+ 						    netdev_features_t features)
+ {
+ 	switch (x->outer_mode.encap) {
+ 	case XFRM_MODE_TUNNEL:
+ 		return xfrm4_tunnel_gso_segment(x, skb, features);
+ 	case XFRM_MODE_TRANSPORT:
+ 		return xfrm4_transport_gso_segment(x, skb, features);
+ 	case XFRM_MODE_BEET:
+ 		return xfrm4_beet_gso_segment(x, skb, features);
+ 	}
+ 
+ 	return ERR_PTR(-EOPNOTSUPP);
+ }
+ 
++>>>>>>> 384a46ea7bdc (esp4: add gso_segment for esp4 beet mode)
  static struct sk_buff *esp4_gso_segment(struct sk_buff *skb,
  				        netdev_features_t features)
  {
* Unmerged path net/ipv4/esp4_offload.c
