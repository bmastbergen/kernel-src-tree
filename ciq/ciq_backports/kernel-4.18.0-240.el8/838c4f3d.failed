iomap: move the iomap_dio_rw ->end_io callback into a structure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 838c4f3d7515efe9d0e32c846fb5d102b6d8a29d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/838c4f3d.failed

Add a new iomap_dio_ops structure that for now just contains the end_io
handler.  This avoid storing the function pointer in a mutable structure,
which is a possible exploit vector for kernel code execution, and prepares
for adding a submit_io handler that btrfs needs.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 838c4f3d7515efe9d0e32c846fb5d102b6d8a29d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/iomap/direct-io.c
#	include/linux/iomap.h
diff --cc include/linux/iomap.h
index 960967bb5048,7aa5d6117936..000000000000
--- a/include/linux/iomap.h
+++ b/include/linux/iomap.h
@@@ -179,10 -188,14 +179,19 @@@ sector_t iomap_bmap(struct address_spac
   */
  #define IOMAP_DIO_UNWRITTEN	(1 << 0)	/* covers unwritten extent(s) */
  #define IOMAP_DIO_COW		(1 << 1)	/* covers COW extent(s) */
++<<<<<<< HEAD
 +typedef int (iomap_dio_end_io_t)(struct kiocb *iocb, ssize_t ret,
 +		unsigned flags);
++=======
+ 
+ struct iomap_dio_ops {
+ 	int (*end_io)(struct kiocb *iocb, ssize_t size, int error,
+ 		      unsigned flags);
+ };
+ 
++>>>>>>> 838c4f3d7515 (iomap: move the iomap_dio_rw ->end_io callback into a structure)
  ssize_t iomap_dio_rw(struct kiocb *iocb, struct iov_iter *iter,
- 		const struct iomap_ops *ops, iomap_dio_end_io_t end_io);
+ 		const struct iomap_ops *ops, const struct iomap_dio_ops *dops);
  int iomap_dio_iopoll(struct kiocb *kiocb, bool spin);
  
  #ifdef CONFIG_SWAP
* Unmerged path fs/iomap/direct-io.c
* Unmerged path fs/iomap/direct-io.c
diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index c9c7bcb69ae3..5c642b79576a 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -436,6 +436,10 @@ xfs_dio_write_end_io(
 	return error;
 }
 
+static const struct iomap_dio_ops xfs_dio_write_ops = {
+	.end_io		= xfs_dio_write_end_io,
+};
+
 /*
  * xfs_file_dio_aio_write - handle direct IO writes
  *
@@ -536,7 +540,7 @@ xfs_file_dio_aio_write(
 	}
 
 	trace_xfs_file_direct_write(ip, count, iocb->ki_pos);
-	ret = iomap_dio_rw(iocb, from, &xfs_iomap_ops, xfs_dio_write_end_io);
+	ret = iomap_dio_rw(iocb, from, &xfs_iomap_ops, &xfs_dio_write_ops);
 
 	/*
 	 * If unaligned, this is the only IO in-flight. If it has not yet
* Unmerged path include/linux/iomap.h
