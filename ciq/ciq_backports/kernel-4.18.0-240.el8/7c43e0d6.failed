bpftool: Simplify format string to not use positional args

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 7c43e0d6a526e7734eb854fe242886f52ccd06ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7c43e0d6.failed

Change format string referring to just single argument out of two available.
Some versions of libc can reject such format string.

	Reported-by: Nikita Shirokov <tehnerd@tehnerd.com>
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20191218214314.2403729-1-andriin@fb.com
(cherry picked from commit 7c43e0d6a526e7734eb854fe242886f52ccd06ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/bpf/bpftool/gen.c
diff --cc tools/bpf/bpftool/gen.c
index fbac89cefb31,851c465f99dc..000000000000
--- a/tools/bpf/bpftool/gen.c
+++ b/tools/bpf/bpftool/gen.c
@@@ -434,87 -537,39 +434,91 @@@ static int do_skeleton(int argc, char *
  	codegen("\
  		\n\
  									    \n\
 -			s->data_sz = %d;				    \n\
 -			s->data = \"\\					    \n\
 -		",
 -		file_sz);
 -
 -	/* embed contents of BPF object file */
 -	for (i = 0, len = 0; i < file_sz; i++) {
 -		int w = obj_data[i] ? 4 : 2;
 -
 -		len += w;
 -		if (len > 78) {
 -			printf("\\\n");
 -			len = w;
 -		}
 -		if (!obj_data[i])
 -			printf("\\0");
 -		else
 -			printf("\\x%02x", (unsigned char)obj_data[i]);
 -	}
 -
 -	codegen("\
 -		\n\
 -		\";							    \n\
 -									    \n\
 -			return 0;					    \n\
 +			return s;					    \n\
  		err:							    \n\
  			bpf_object__destroy_skeleton(s);		    \n\
 -			return -1;					    \n\
 +			return NULL;					    \n\
 +		}							    \n\
 +									    \n\
 +		static void						    \n\
 +		%1$s__destroy(struct %1$s *obj)				    \n\
 +		{							    \n\
 +			if (!obj)					    \n\
 +				return;					    \n\
 +			if (obj->skeleton)				    \n\
 +				bpf_object__destroy_skeleton(obj->skeleton);\n\
 +			free(obj);					    \n\
 +		}							    \n\
 +									    \n\
 +		static inline struct %1$s *				    \n\
 +		%1$s__open_opts(struct bpf_embed_data *embed, const struct bpf_object_open_opts *opts)\n\
 +		{							    \n\
 +			struct %1$s *obj;				    \n\
 +									    \n\
 +			obj = calloc(1, sizeof(*obj));			    \n\
 +			if (!obj)					    \n\
 +				return NULL;				    \n\
 +									    \n\
 +			obj->skeleton = %1$s__create_skeleton(obj, embed);  \n\
 +			if (!obj->skeleton)				    \n\
 +				goto err;				    \n\
 +									    \n\
 +			if (bpf_object__open_skeleton(obj->skeleton, opts)) \n\
 +				goto err;				    \n\
 +									    \n\
 +			return obj;					    \n\
 +		err:							    \n\
 +			%1$s__destroy(obj);				    \n\
 +			return NULL;					    \n\
 +		}							    \n\
 +									    \n\
 +		static inline struct %1$s *				    \n\
 +		%1$s__open(struct bpf_embed_data *embed)		    \n\
 +		{							    \n\
 +			return %1$s__open_opts(embed, NULL);		    \n\
 +		}							    \n\
 +									    \n\
 +		static inline int					    \n\
 +		%1$s__load(struct %1$s *obj)				    \n\
 +		{							    \n\
 +			return bpf_object__load_skeleton(obj->skeleton);    \n\
 +		}							    \n\
 +									    \n\
 +		static inline struct %1$s *				    \n\
 +		%1$s__open_and_load(struct bpf_embed_data *embed)	    \n\
 +		{							    \n\
 +			struct %1$s *obj;				    \n\
 +									    \n\
 +			obj = %1$s__open(embed);			    \n\
 +			if (!obj)					    \n\
 +				return NULL;				    \n\
 +			if (%1$s__load(obj)) {				    \n\
 +				%1$s__destroy(obj);			    \n\
 +				return NULL;				    \n\
 +			}						    \n\
 +			return obj;					    \n\
 +		}							    \n\
 +									    \n\
 +		static inline int					    \n\
 +		%1$s__attach(struct %1$s *obj)				    \n\
 +		{							    \n\
 +			return bpf_object__attach_skeleton(obj->skeleton);  \n\
 +		}							    \n\
 +									    \n\
 +		static inline void					    \n\
 +		%1$s__detach(struct %1$s *obj)				    \n\
 +		{							    \n\
 +			return bpf_object__detach_skeleton(obj->skeleton);  \n\
  		}							    \n\
  									    \n\
- 		#endif /* %2$s */					    \n\
+ 		#endif /* %s */						    \n\
  		",
++<<<<<<< HEAD
 +		obj_name, header_guard
 +	);
++=======
+ 		header_guard);
++>>>>>>> 7c43e0d6a526 (bpftool: Simplify format string to not use positional args)
  	err = 0;
  out:
  	bpf_object__close(obj);
* Unmerged path tools/bpf/bpftool/gen.c
