bpf: Document BPF_F_QUERY_EFFECTIVE flag

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrey Ignatov <rdna@fb.com>
commit f5bfcd953d811dbb8913de36b96b38da6bb62135
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f5bfcd95.failed

Document BPF_F_QUERY_EFFECTIVE flag, mostly to clarify how it affects
attach_flags what may not be obvious and what may lead to confision.

Specifically attach_flags is returned only for target_fd but if programs
are inherited from an ancestor cgroup then returned attach_flags for
current cgroup may be confusing. For example, two effective programs of
same attach_type can be returned but w/o BPF_F_ALLOW_MULTI in
attach_flags.

Simple repro:
  # bpftool c s /sys/fs/cgroup/path/to/task
  ID       AttachType      AttachFlags     Name
  # bpftool c s /sys/fs/cgroup/path/to/task effective
  ID       AttachType      AttachFlags     Name
  95043    ingress                         tw_ipt_ingress
  95048    ingress                         tw_ingress

	Signed-off-by: Andrey Ignatov <rdna@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Song Liu <songliubraving@fb.com>
Link: https://lore.kernel.org/bpf/20200108014006.938363-1-rdna@fb.com
(cherry picked from commit f5bfcd953d811dbb8913de36b96b38da6bb62135)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/bpf.h
#	tools/include/uapi/linux/bpf.h
diff --cc include/uapi/linux/bpf.h
index f26f93a554f1,52966e758fe5..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -349,7 -356,15 +349,19 @@@ enum bpf_attach_type 
  /* Clone map from listener for newly accepted socket */
  #define BPF_F_CLONE		(1U << 9)
  
++<<<<<<< HEAD
 +/* flags for BPF_PROG_QUERY */
++=======
+ /* Enable memory-mapping BPF map */
+ #define BPF_F_MMAPABLE		(1U << 10)
+ 
+ /* Flags for BPF_PROG_QUERY. */
+ 
+ /* Query effective (directly attached + inherited from ancestor cgroups)
+  * programs that will be executed for events within a cgroup.
+  * attach_flags with this flag are returned only for directly attached programs.
+  */
++>>>>>>> f5bfcd953d81 (bpf: Document BPF_F_QUERY_EFFECTIVE flag)
  #define BPF_F_QUERY_EFFECTIVE	(1U << 0)
  
  enum bpf_stack_build_id_status {
diff --cc tools/include/uapi/linux/bpf.h
index 4c50a38c7288,52966e758fe5..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -341,7 -353,18 +341,22 @@@ enum bpf_attach_type 
  #define BPF_F_RDONLY_PROG	(1U << 7)
  #define BPF_F_WRONLY_PROG	(1U << 8)
  
++<<<<<<< HEAD
 +/* flags for BPF_PROG_QUERY */
++=======
+ /* Clone map from listener for newly accepted socket */
+ #define BPF_F_CLONE		(1U << 9)
+ 
+ /* Enable memory-mapping BPF map */
+ #define BPF_F_MMAPABLE		(1U << 10)
+ 
+ /* Flags for BPF_PROG_QUERY. */
+ 
+ /* Query effective (directly attached + inherited from ancestor cgroups)
+  * programs that will be executed for events within a cgroup.
+  * attach_flags with this flag are returned only for directly attached programs.
+  */
++>>>>>>> f5bfcd953d81 (bpf: Document BPF_F_QUERY_EFFECTIVE flag)
  #define BPF_F_QUERY_EFFECTIVE	(1U << 0)
  
  enum bpf_stack_build_id_status {
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path tools/include/uapi/linux/bpf.h
