locking/lockdep: Rename lockdep_assert_held_exclusive() -> lockdep_assert_held_write()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Nikolay Borisov <nborisov@suse.com>
commit 9ffbe8ac05dbb4ab4a4836a55a47fc6be945a38f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9ffbe8ac.failed

All callers of lockdep_assert_held_exclusive() use it to verify the
correct locking state of either a semaphore (ldisc_sem in tty,
mmap_sem for perf events, i_rwsem of inode for dax) or rwlock by
apparmor. Thus it makes sense to rename _exclusive to _write since
that's the semantics callers care. Additionally there is already
lockdep_assert_held_read(), which this new naming is more consistent with.

No functional changes.

	Signed-off-by: Nikolay Borisov <nborisov@suse.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20190531100651.3969-1-nborisov@suse.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 9ffbe8ac05dbb4ab4a4836a55a47fc6be945a38f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/tty_ldisc.c
diff --cc drivers/tty/tty_ldisc.c
index fc4c97cae01e,fde8d4073e74..000000000000
--- a/drivers/tty/tty_ldisc.c
+++ b/drivers/tty/tty_ldisc.c
@@@ -471,6 -487,7 +471,10 @@@ static int tty_ldisc_open(struct tty_st
  
  static void tty_ldisc_close(struct tty_struct *tty, struct tty_ldisc *ld)
  {
++<<<<<<< HEAD
++=======
+ 	lockdep_assert_held_write(&tty->ldisc_sem);
++>>>>>>> 9ffbe8ac05db (locking/lockdep: Rename lockdep_assert_held_exclusive() -> lockdep_assert_held_write())
  	WARN_ON(!test_bit(TTY_LDISC_OPEN, &tty->flags));
  	clear_bit(TTY_LDISC_OPEN, &tty->flags);
  	if (ld->ops->close)
@@@ -492,6 -509,7 +496,10 @@@ static int tty_ldisc_failto(struct tty_
  	struct tty_ldisc *disc = tty_ldisc_get(tty, ld);
  	int r;
  
++<<<<<<< HEAD
++=======
+ 	lockdep_assert_held_write(&tty->ldisc_sem);
++>>>>>>> 9ffbe8ac05db (locking/lockdep: Rename lockdep_assert_held_exclusive() -> lockdep_assert_held_write())
  	if (IS_ERR(disc))
  		return PTR_ERR(disc);
  	tty->ldisc = disc;
@@@ -615,6 -633,7 +623,10 @@@ EXPORT_SYMBOL_GPL(tty_set_ldisc)
   */
  static void tty_ldisc_kill(struct tty_struct *tty)
  {
++<<<<<<< HEAD
++=======
+ 	lockdep_assert_held_write(&tty->ldisc_sem);
++>>>>>>> 9ffbe8ac05db (locking/lockdep: Rename lockdep_assert_held_exclusive() -> lockdep_assert_held_write())
  	if (!tty->ldisc)
  		return;
  	/*
@@@ -662,6 -681,7 +674,10 @@@ int tty_ldisc_reinit(struct tty_struct 
  	struct tty_ldisc *ld;
  	int retval;
  
++<<<<<<< HEAD
++=======
+ 	lockdep_assert_held_write(&tty->ldisc_sem);
++>>>>>>> 9ffbe8ac05db (locking/lockdep: Rename lockdep_assert_held_exclusive() -> lockdep_assert_held_write())
  	ld = tty_ldisc_get(tty, disc);
  	if (IS_ERR(ld)) {
  		BUG_ON(disc == N_TTY);
diff --git a/arch/x86/events/core.c b/arch/x86/events/core.c
index fdaa204a9f1c..471cd5fa19fe 100644
--- a/arch/x86/events/core.c
+++ b/arch/x86/events/core.c
@@ -2133,7 +2133,7 @@ static void x86_pmu_event_mapped(struct perf_event *event, struct mm_struct *mm)
 	 * For now, this can't happen because all callers hold mmap_sem
 	 * for write.  If this changes, we'll need a different solution.
 	 */
-	lockdep_assert_held_exclusive(&mm->mmap_sem);
+	lockdep_assert_held_write(&mm->mmap_sem);
 
 	if (atomic_inc_return(&mm->context.perf_rdpmc_allowed) == 1)
 		on_each_cpu_mask(mm_cpumask(mm), refresh_pce, NULL, 1);
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index 62553a925d7f..012224cecd28 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -468,7 +468,7 @@ static int alloc_name(struct ib_device *ibdev, const char *name)
 	int rc;
 	int i;
 
-	lockdep_assert_held_exclusive(&devices_rwsem);
+	lockdep_assert_held_write(&devices_rwsem);
 	ida_init(&inuse);
 	xa_for_each (&devices, index, device) {
 		char buf[IB_DEVICE_NAME_MAX];
* Unmerged path drivers/tty/tty_ldisc.c
diff --git a/fs/dax.c b/fs/dax.c
index b0d01bff87fd..d8dac8e01a74 100644
--- a/fs/dax.c
+++ b/fs/dax.c
@@ -1208,7 +1208,7 @@ dax_iomap_rw(struct kiocb *iocb, struct iov_iter *iter,
 	unsigned flags = 0;
 
 	if (iov_iter_rw(iter) == WRITE) {
-		lockdep_assert_held_exclusive(&inode->i_rwsem);
+		lockdep_assert_held_write(&inode->i_rwsem);
 		flags |= IOMAP_WRITE;
 	} else {
 		lockdep_assert_held(&inode->i_rwsem);
diff --git a/include/linux/lockdep.h b/include/linux/lockdep.h
index 8bf2cf44a6c8..b66be87e5beb 100644
--- a/include/linux/lockdep.h
+++ b/include/linux/lockdep.h
@@ -391,7 +391,7 @@ extern void lock_unpin_lock(struct lockdep_map *lock, struct pin_cookie);
 		WARN_ON(debug_locks && !lockdep_is_held(l));	\
 	} while (0)
 
-#define lockdep_assert_held_exclusive(l)	do {			\
+#define lockdep_assert_held_write(l)	do {			\
 		WARN_ON(debug_locks && !lockdep_is_held_type(l, 0));	\
 	} while (0)
 
@@ -476,7 +476,7 @@ struct lockdep_map { };
 #define lockdep_is_held_type(l, r)		(1)
 
 #define lockdep_assert_held(l)			do { (void)(l); } while (0)
-#define lockdep_assert_held_exclusive(l)	do { (void)(l); } while (0)
+#define lockdep_assert_held_write(l)	do { (void)(l); } while (0)
 #define lockdep_assert_held_read(l)		do { (void)(l); } while (0)
 #define lockdep_assert_held_once(l)		do { (void)(l); } while (0)
 
diff --git a/security/apparmor/label.c b/security/apparmor/label.c
index ba11bdf9043a..3cab01eec805 100644
--- a/security/apparmor/label.c
+++ b/security/apparmor/label.c
@@ -80,7 +80,7 @@ void __aa_proxy_redirect(struct aa_label *orig, struct aa_label *new)
 
 	AA_BUG(!orig);
 	AA_BUG(!new);
-	lockdep_assert_held_exclusive(&labels_set(orig)->lock);
+	lockdep_assert_held_write(&labels_set(orig)->lock);
 
 	tmp = rcu_dereference_protected(orig->proxy->label,
 					&labels_ns(orig)->lock);
@@ -570,7 +570,7 @@ static bool __label_remove(struct aa_label *label, struct aa_label *new)
 
 	AA_BUG(!ls);
 	AA_BUG(!label);
-	lockdep_assert_held_exclusive(&ls->lock);
+	lockdep_assert_held_write(&ls->lock);
 
 	if (new)
 		__aa_proxy_redirect(label, new);
@@ -607,7 +607,7 @@ static bool __label_replace(struct aa_label *old, struct aa_label *new)
 	AA_BUG(!ls);
 	AA_BUG(!old);
 	AA_BUG(!new);
-	lockdep_assert_held_exclusive(&ls->lock);
+	lockdep_assert_held_write(&ls->lock);
 	AA_BUG(new->flags & FLAG_IN_TREE);
 
 	if (!label_is_stale(old))
@@ -644,7 +644,7 @@ static struct aa_label *__label_insert(struct aa_labelset *ls,
 	AA_BUG(!ls);
 	AA_BUG(!label);
 	AA_BUG(labels_set(label) != ls);
-	lockdep_assert_held_exclusive(&ls->lock);
+	lockdep_assert_held_write(&ls->lock);
 	AA_BUG(label->flags & FLAG_IN_TREE);
 
 	/* Figure out where to put new node */
