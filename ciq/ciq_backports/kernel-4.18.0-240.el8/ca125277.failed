perf evsel: Introduce evsel_fprintf.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ca1252779f48ece225c6003e01c675abb91cf1b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ca125277.failed

We already had evsel_fprintf.c, add its counterpart, so that we can
reduce evsel.h a bit more.

We needed a new perf_event_attr_fprintf.c file so as to have a separate
object to link with the python binding in tools/perf/util/python-ext-sources
and not drag symbol_conf, etc into the python binding.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-06bdmt1062d9unzgqmxwlv88@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ca1252779f48ece225c6003e01c675abb91cf1b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/util/Build
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/evsel_fprintf.c
diff --cc tools/perf/builtin-trace.c
index 7d4226fa0dcb,bb5130d02155..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -26,10 -25,16 +26,16 @@@
  #include "util/color.h"
  #include "util/config.h"
  #include "util/debug.h"
 -#include "util/dso.h"
  #include "util/env.h"
  #include "util/event.h"
++<<<<<<< HEAD
++=======
+ #include "util/evsel.h"
+ #include "util/evsel_fprintf.h"
+ #include "util/synthetic-events.h"
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  #include "util/evlist.h"
  #include "util/evswitch.h"
 -#include "util/mmap.h"
 -#include <subcmd/pager.h>
  #include <subcmd/exec-cmd.h>
  #include "util/machine.h"
  #include "util/map.h"
diff --cc tools/perf/util/Build
index d4bfbe7a4761,8dcfca1a882f..000000000000
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@@ -10,6 -11,8 +10,11 @@@ perf-y += event.
  perf-y += evlist.o
  perf-y += evsel.o
  perf-y += evsel_fprintf.o
++<<<<<<< HEAD
++=======
+ perf-y += perf_event_attr_fprintf.o
+ perf-y += evswitch.o
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  perf-y += find_bit.o
  perf-y += get_current_dir_name.o
  perf-y += kallsyms.o
diff --cc tools/perf/util/evsel.c
index 90bfc2303a40,6323b0c60f6c..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -26,10 -25,14 +26,11 @@@
  #include "asm/bug.h"
  #include "callchain.h"
  #include "cgroup.h"
 -#include "counts.h"
  #include "event.h"
  #include "evsel.h"
+ #include "util/evsel_fprintf.h"
  #include "evlist.h"
 -#include <perf/cpumap.h>
 +#include "cpumap.h"
  #include "thread_map.h"
  #include "target.h"
  #include "perf_regs.h"
@@@ -1567,153 -1444,7 +1568,157 @@@ static int get_group_fd(struct perf_evs
  	return fd;
  }
  
++<<<<<<< HEAD
 +struct bit_names {
 +	int bit;
 +	const char *name;
 +};
 +
 +static void __p_bits(char *buf, size_t size, u64 value, struct bit_names *bits)
 +{
 +	bool first_bit = true;
 +	int i = 0;
 +
 +	do {
 +		if (value & bits[i].bit) {
 +			buf += scnprintf(buf, size, "%s%s", first_bit ? "" : "|", bits[i].name);
 +			first_bit = false;
 +		}
 +	} while (bits[++i].name != NULL);
 +}
 +
 +static void __p_sample_type(char *buf, size_t size, u64 value)
 +{
 +#define bit_name(n) { PERF_SAMPLE_##n, #n }
 +	struct bit_names bits[] = {
 +		bit_name(IP), bit_name(TID), bit_name(TIME), bit_name(ADDR),
 +		bit_name(READ), bit_name(CALLCHAIN), bit_name(ID), bit_name(CPU),
 +		bit_name(PERIOD), bit_name(STREAM_ID), bit_name(RAW),
 +		bit_name(BRANCH_STACK), bit_name(REGS_USER), bit_name(STACK_USER),
 +		bit_name(IDENTIFIER), bit_name(REGS_INTR), bit_name(DATA_SRC),
 +		bit_name(WEIGHT), bit_name(PHYS_ADDR),
 +		{ .name = NULL, }
 +	};
 +#undef bit_name
 +	__p_bits(buf, size, value, bits);
 +}
 +
 +static void __p_branch_sample_type(char *buf, size_t size, u64 value)
 +{
 +#define bit_name(n) { PERF_SAMPLE_BRANCH_##n, #n }
 +	struct bit_names bits[] = {
 +		bit_name(USER), bit_name(KERNEL), bit_name(HV), bit_name(ANY),
 +		bit_name(ANY_CALL), bit_name(ANY_RETURN), bit_name(IND_CALL),
 +		bit_name(ABORT_TX), bit_name(IN_TX), bit_name(NO_TX),
 +		bit_name(COND), bit_name(CALL_STACK), bit_name(IND_JUMP),
 +		bit_name(CALL), bit_name(NO_FLAGS), bit_name(NO_CYCLES),
 +		{ .name = NULL, }
 +	};
 +#undef bit_name
 +	__p_bits(buf, size, value, bits);
 +}
 +
 +static void __p_read_format(char *buf, size_t size, u64 value)
 +{
 +#define bit_name(n) { PERF_FORMAT_##n, #n }
 +	struct bit_names bits[] = {
 +		bit_name(TOTAL_TIME_ENABLED), bit_name(TOTAL_TIME_RUNNING),
 +		bit_name(ID), bit_name(GROUP),
 +		{ .name = NULL, }
 +	};
 +#undef bit_name
 +	__p_bits(buf, size, value, bits);
 +}
 +
 +#define BUF_SIZE		1024
 +
 +#define p_hex(val)		snprintf(buf, BUF_SIZE, "%#"PRIx64, (uint64_t)(val))
 +#define p_unsigned(val)		snprintf(buf, BUF_SIZE, "%"PRIu64, (uint64_t)(val))
 +#define p_signed(val)		snprintf(buf, BUF_SIZE, "%"PRId64, (int64_t)(val))
 +#define p_sample_type(val)	__p_sample_type(buf, BUF_SIZE, val)
 +#define p_branch_sample_type(val) __p_branch_sample_type(buf, BUF_SIZE, val)
 +#define p_read_format(val)	__p_read_format(buf, BUF_SIZE, val)
 +
 +#define PRINT_ATTRn(_n, _f, _p)				\
 +do {							\
 +	if (attr->_f) {					\
 +		_p(attr->_f);				\
 +		ret += attr__fprintf(fp, _n, buf, priv);\
 +	}						\
 +} while (0)
 +
 +#define PRINT_ATTRf(_f, _p)	PRINT_ATTRn(#_f, _f, _p)
 +
 +int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
 +			     attr__fprintf_f attr__fprintf, void *priv)
 +{
 +	char buf[BUF_SIZE];
 +	int ret = 0;
 +
 +	PRINT_ATTRf(type, p_unsigned);
 +	PRINT_ATTRf(size, p_unsigned);
 +	PRINT_ATTRf(config, p_hex);
 +	PRINT_ATTRn("{ sample_period, sample_freq }", sample_period, p_unsigned);
 +	PRINT_ATTRf(sample_type, p_sample_type);
 +	PRINT_ATTRf(read_format, p_read_format);
 +
 +	PRINT_ATTRf(disabled, p_unsigned);
 +	PRINT_ATTRf(inherit, p_unsigned);
 +	PRINT_ATTRf(pinned, p_unsigned);
 +	PRINT_ATTRf(exclusive, p_unsigned);
 +	PRINT_ATTRf(exclude_user, p_unsigned);
 +	PRINT_ATTRf(exclude_kernel, p_unsigned);
 +	PRINT_ATTRf(exclude_hv, p_unsigned);
 +	PRINT_ATTRf(exclude_idle, p_unsigned);
 +	PRINT_ATTRf(mmap, p_unsigned);
 +	PRINT_ATTRf(comm, p_unsigned);
 +	PRINT_ATTRf(freq, p_unsigned);
 +	PRINT_ATTRf(inherit_stat, p_unsigned);
 +	PRINT_ATTRf(enable_on_exec, p_unsigned);
 +	PRINT_ATTRf(task, p_unsigned);
 +	PRINT_ATTRf(watermark, p_unsigned);
 +	PRINT_ATTRf(precise_ip, p_unsigned);
 +	PRINT_ATTRf(mmap_data, p_unsigned);
 +	PRINT_ATTRf(sample_id_all, p_unsigned);
 +	PRINT_ATTRf(exclude_host, p_unsigned);
 +	PRINT_ATTRf(exclude_guest, p_unsigned);
 +	PRINT_ATTRf(exclude_callchain_kernel, p_unsigned);
 +	PRINT_ATTRf(exclude_callchain_user, p_unsigned);
 +	PRINT_ATTRf(mmap2, p_unsigned);
 +	PRINT_ATTRf(comm_exec, p_unsigned);
 +	PRINT_ATTRf(use_clockid, p_unsigned);
 +	PRINT_ATTRf(context_switch, p_unsigned);
 +	PRINT_ATTRf(write_backward, p_unsigned);
 +	PRINT_ATTRf(namespaces, p_unsigned);
 +	PRINT_ATTRf(ksymbol, p_unsigned);
 +	PRINT_ATTRf(bpf_event, p_unsigned);
 +	PRINT_ATTRf(aux_output, p_unsigned);
 +
 +	PRINT_ATTRn("{ wakeup_events, wakeup_watermark }", wakeup_events, p_unsigned);
 +	PRINT_ATTRf(bp_type, p_unsigned);
 +	PRINT_ATTRn("{ bp_addr, config1 }", bp_addr, p_hex);
 +	PRINT_ATTRn("{ bp_len, config2 }", bp_len, p_hex);
 +	PRINT_ATTRf(branch_sample_type, p_branch_sample_type);
 +	PRINT_ATTRf(sample_regs_user, p_hex);
 +	PRINT_ATTRf(sample_stack_user, p_unsigned);
 +	PRINT_ATTRf(clockid, p_signed);
 +	PRINT_ATTRf(sample_regs_intr, p_hex);
 +	PRINT_ATTRf(aux_watermark, p_unsigned);
 +	PRINT_ATTRf(sample_max_stack, p_unsigned);
 +
 +	return ret;
 +}
 +
 +static int __open_attr__fprintf(FILE *fp, const char *name, const char *val,
 +				void *priv __maybe_unused)
 +{
 +	return fprintf(fp, "  %-32s %s\n", name, val);
 +}
 +
 +static void perf_evsel__remove_fd(struct perf_evsel *pos,
++=======
+ static void perf_evsel__remove_fd(struct evsel *pos,
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  				  int nr_cpus, int nr_threads,
  				  int thread_idx)
  {
diff --cc tools/perf/util/evsel.h
index 2ab992b39a4c,48183b5f5f83..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -4,34 -4,14 +4,41 @@@
  
  #include <linux/list.h>
  #include <stdbool.h>
++<<<<<<< HEAD
 +#include <stdio.h>
++=======
+ #include <sys/types.h>
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  #include <linux/perf_event.h>
  #include <linux/types.h>
 -#include <internal/evsel.h>
 -#include <perf/evsel.h>
 +#include "xyarray.h"
  #include "symbol_conf.h"
 -#include <internal/cpumap.h>
 +#include "cpumap.h"
 +#include "counts.h"
  
++<<<<<<< HEAD
 +struct perf_evsel;
 +
 +/*
 + * Per fd, to map back from PERF_SAMPLE_ID to evsel, only used when there are
 + * more than one entry in the evlist.
 + */
 +struct perf_sample_id {
 +	struct hlist_node 	node;
 +	u64		 	id;
 +	struct perf_evsel	*evsel;
 +	int			idx;
 +	int			cpu;
 +	pid_t			tid;
 +
 +	/* Holds total ID period value for PERF_SAMPLE_READ processing. */
 +	u64			period;
 +};
 +
 +struct cgroup;
 +
++=======
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  /*
   * The 'struct perf_evsel_config_term' is used to pass event
   * specific configuration data to perf_evsel__config routine.
@@@ -84,13 -68,10 +95,17 @@@ enum perf_tool_event 
  	PERF_TOOL_DURATION_TIME = 1,
  };
  
++<<<<<<< HEAD
 +struct bpf_object;
 +
 +/** struct perf_evsel - event selector
++=======
+ /** struct evsel - event selector
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
   *
   * @evlist - evlist this evsel is in, if it is in one.
 - * @core - libperf evsel object
 + * @node - To insert it into evlist->entries or in other list_heads, say in
 + *         the event parsing routines.
   * @name - Can be set to retain the original event name passed by the user,
   *         so that when showing results in tools such as 'perf stat', we
   *         show the name used, not some alias.
@@@ -433,44 -398,12 +448,48 @@@ static inline bool perf_evsel__is_clock
  	       perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK);
  }
  
++<<<<<<< HEAD
 +struct perf_attr_details {
 +	bool freq;
 +	bool verbose;
 +	bool event_group;
 +	bool force;
 +	bool trace_fields;
 +};
 +
 +int perf_evsel__fprintf(struct perf_evsel *evsel,
 +			struct perf_attr_details *details, FILE *fp);
 +
 +#define EVSEL__PRINT_IP			(1<<0)
 +#define EVSEL__PRINT_SYM		(1<<1)
 +#define EVSEL__PRINT_DSO		(1<<2)
 +#define EVSEL__PRINT_SYMOFFSET		(1<<3)
 +#define EVSEL__PRINT_ONELINE		(1<<4)
 +#define EVSEL__PRINT_SRCLINE		(1<<5)
 +#define EVSEL__PRINT_UNKNOWN_AS_ADDR	(1<<6)
 +#define EVSEL__PRINT_CALLCHAIN_ARROW	(1<<7)
 +#define EVSEL__PRINT_SKIP_IGNORED	(1<<8)
 +
 +struct callchain_cursor;
 +
 +int sample__fprintf_callchain(struct perf_sample *sample, int left_alignment,
 +			      unsigned int print_opts, struct callchain_cursor *cursor,
 +			      struct strlist *bt_stop_list, FILE *fp);
 +
 +int sample__fprintf_sym(struct perf_sample *sample, struct addr_location *al,
 +			int left_alignment, unsigned int print_opts,
 +			struct callchain_cursor *cursor,
 +			struct strlist *bt_stop_list, FILE *fp);
 +
 +bool perf_evsel__fallback(struct perf_evsel *evsel, int err,
++=======
+ bool perf_evsel__fallback(struct evsel *evsel, int err,
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  			  char *msg, size_t msgsize);
 -int perf_evsel__open_strerror(struct evsel *evsel, struct target *target,
 +int perf_evsel__open_strerror(struct perf_evsel *evsel, struct target *target,
  			      int err, char *msg, size_t size);
  
 -static inline int perf_evsel__group_idx(struct evsel *evsel)
 +static inline int perf_evsel__group_idx(struct perf_evsel *evsel)
  {
  	return evsel->idx - evsel->leader->idx;
  }
@@@ -485,24 -418,19 +504,28 @@@ for ((_evsel) = list_entry((_leader)->n
  #define for_each_group_evsel(_evsel, _leader) 					\
  for ((_evsel) = _leader; 							\
       (_evsel) && (_evsel)->leader == (_leader);					\
 -     (_evsel) = list_entry((_evsel)->core.node.next, struct evsel, core.node))
 +     (_evsel) = list_entry((_evsel)->node.next, struct perf_evsel, node))
  
 -static inline bool perf_evsel__has_branch_callstack(const struct evsel *evsel)
 +static inline bool perf_evsel__has_branch_callstack(const struct perf_evsel *evsel)
  {
 -	return evsel->core.attr.branch_sample_type & PERF_SAMPLE_BRANCH_CALL_STACK;
 +	return evsel->attr.branch_sample_type & PERF_SAMPLE_BRANCH_CALL_STACK;
  }
  
 -static inline bool evsel__has_callchain(const struct evsel *evsel)
 +static inline bool evsel__has_callchain(const struct perf_evsel *evsel)
  {
 -	return (evsel->core.attr.sample_type & PERF_SAMPLE_CALLCHAIN) != 0;
 +	return (evsel->attr.sample_type & PERF_SAMPLE_CALLCHAIN) != 0;
  }
  
++<<<<<<< HEAD
 +typedef int (*attr__fprintf_f)(FILE *, const char *, const char *, void *);
 +
 +int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
 +			     attr__fprintf_f attr__fprintf, void *priv);
 +
 +struct perf_env *perf_evsel__env(struct perf_evsel *evsel);
++=======
+ struct perf_env *perf_evsel__env(struct evsel *evsel);
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  
 -int perf_evsel__store_ids(struct evsel *evsel, struct evlist *evlist);
 +int perf_evsel__store_ids(struct perf_evsel *evsel, struct perf_evlist *evlist);
  #endif /* __PERF_EVSEL_H */
diff --cc tools/perf/util/evsel_fprintf.c
index 6e853a36c9f3,028df7afb0dc..000000000000
--- a/tools/perf/util/evsel_fprintf.c
+++ b/tools/perf/util/evsel_fprintf.c
@@@ -4,6 -4,8 +4,11 @@@
  #include <stdbool.h>
  #include <traceevent/event-parse.h>
  #include "evsel.h"
++<<<<<<< HEAD
++=======
+ #include "util/evsel_fprintf.h"
+ #include "util/event.h"
++>>>>>>> ca1252779f48 (perf evsel: Introduce evsel_fprintf.h)
  #include "callchain.h"
  #include "map.h"
  #include "strlist.h"
diff --git a/tools/perf/builtin-evlist.c b/tools/perf/builtin-evlist.c
index 36069acf5df2..56473d9513d3 100644
--- a/tools/perf/builtin-evlist.c
+++ b/tools/perf/builtin-evlist.c
@@ -12,6 +12,7 @@
 #include "perf.h"
 #include "util/evlist.h"
 #include "util/evsel.h"
+#include "util/evsel_fprintf.h"
 #include "util/parse-events.h"
 #include <subcmd/parse-options.h>
 #include "util/session.h"
diff --git a/tools/perf/builtin-sched.c b/tools/perf/builtin-sched.c
index f02ea70c8f09..aad20dfe67a4 100644
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@ -5,6 +5,7 @@
 #include "util/evlist.h"
 #include "util/cache.h"
 #include "util/evsel.h"
+#include "util/evsel_fprintf.h"
 #include "util/symbol.h"
 #include "util/thread.h"
 #include "util/header.h"
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 2da0ca33e795..46f8d5c6358c 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -18,6 +18,7 @@
 #include "util/trace-event.h"
 #include "util/evlist.h"
 #include "util/evsel.h"
+#include "util/evsel_fprintf.h"
 #include "util/evswitch.h"
 #include "util/sort.h"
 #include "util/data.h"
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/util/Build
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/evsel_fprintf.c
diff --git a/tools/perf/util/evsel_fprintf.h b/tools/perf/util/evsel_fprintf.h
new file mode 100644
index 000000000000..47e6c8456bb1
--- /dev/null
+++ b/tools/perf/util/evsel_fprintf.h
@@ -0,0 +1,50 @@
+// SPDX-License-Identifier: GPL-2.0
+#ifndef __PERF_EVSEL_FPRINTF_H
+#define __PERF_EVSEL_FPRINTF_H 1
+
+#include <stdio.h>
+#include <stdbool.h>
+
+struct evsel;
+
+struct perf_attr_details {
+	bool freq;
+	bool verbose;
+	bool event_group;
+	bool force;
+	bool trace_fields;
+};
+
+int perf_evsel__fprintf(struct evsel *evsel,
+			struct perf_attr_details *details, FILE *fp);
+
+#define EVSEL__PRINT_IP			(1<<0)
+#define EVSEL__PRINT_SYM		(1<<1)
+#define EVSEL__PRINT_DSO		(1<<2)
+#define EVSEL__PRINT_SYMOFFSET		(1<<3)
+#define EVSEL__PRINT_ONELINE		(1<<4)
+#define EVSEL__PRINT_SRCLINE		(1<<5)
+#define EVSEL__PRINT_UNKNOWN_AS_ADDR	(1<<6)
+#define EVSEL__PRINT_CALLCHAIN_ARROW	(1<<7)
+#define EVSEL__PRINT_SKIP_IGNORED	(1<<8)
+
+struct addr_location;
+struct perf_event_attr;
+struct perf_sample;
+struct callchain_cursor;
+struct strlist;
+
+int sample__fprintf_callchain(struct perf_sample *sample, int left_alignment,
+			      unsigned int print_opts, struct callchain_cursor *cursor,
+			      struct strlist *bt_stop_list, FILE *fp);
+
+int sample__fprintf_sym(struct perf_sample *sample, struct addr_location *al,
+			int left_alignment, unsigned int print_opts,
+			struct callchain_cursor *cursor,
+			struct strlist *bt_stop_list, FILE *fp);
+
+typedef int (*attr__fprintf_f)(FILE *, const char *, const char *, void *);
+
+int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
+			     attr__fprintf_f attr__fprintf, void *priv);
+#endif // __PERF_EVSEL_H
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index 13489971ed57..6b200e093f82 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -23,6 +23,7 @@
 
 #include "evlist.h"
 #include "evsel.h"
+#include "util/evsel_fprintf.h"
 #include "header.h"
 #include "memswap.h"
 #include "trace-event.h"
diff --git a/tools/perf/util/perf_event_attr_fprintf.c b/tools/perf/util/perf_event_attr_fprintf.c
new file mode 100644
index 000000000000..d4ad3f04923a
--- /dev/null
+++ b/tools/perf/util/perf_event_attr_fprintf.c
@@ -0,0 +1,148 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <inttypes.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/perf_event.h>
+#include "util/evsel_fprintf.h"
+
+struct bit_names {
+	int bit;
+	const char *name;
+};
+
+static void __p_bits(char *buf, size_t size, u64 value, struct bit_names *bits)
+{
+	bool first_bit = true;
+	int i = 0;
+
+	do {
+		if (value & bits[i].bit) {
+			buf += scnprintf(buf, size, "%s%s", first_bit ? "" : "|", bits[i].name);
+			first_bit = false;
+		}
+	} while (bits[++i].name != NULL);
+}
+
+static void __p_sample_type(char *buf, size_t size, u64 value)
+{
+#define bit_name(n) { PERF_SAMPLE_##n, #n }
+	struct bit_names bits[] = {
+		bit_name(IP), bit_name(TID), bit_name(TIME), bit_name(ADDR),
+		bit_name(READ), bit_name(CALLCHAIN), bit_name(ID), bit_name(CPU),
+		bit_name(PERIOD), bit_name(STREAM_ID), bit_name(RAW),
+		bit_name(BRANCH_STACK), bit_name(REGS_USER), bit_name(STACK_USER),
+		bit_name(IDENTIFIER), bit_name(REGS_INTR), bit_name(DATA_SRC),
+		bit_name(WEIGHT), bit_name(PHYS_ADDR),
+		{ .name = NULL, }
+	};
+#undef bit_name
+	__p_bits(buf, size, value, bits);
+}
+
+static void __p_branch_sample_type(char *buf, size_t size, u64 value)
+{
+#define bit_name(n) { PERF_SAMPLE_BRANCH_##n, #n }
+	struct bit_names bits[] = {
+		bit_name(USER), bit_name(KERNEL), bit_name(HV), bit_name(ANY),
+		bit_name(ANY_CALL), bit_name(ANY_RETURN), bit_name(IND_CALL),
+		bit_name(ABORT_TX), bit_name(IN_TX), bit_name(NO_TX),
+		bit_name(COND), bit_name(CALL_STACK), bit_name(IND_JUMP),
+		bit_name(CALL), bit_name(NO_FLAGS), bit_name(NO_CYCLES),
+		{ .name = NULL, }
+	};
+#undef bit_name
+	__p_bits(buf, size, value, bits);
+}
+
+static void __p_read_format(char *buf, size_t size, u64 value)
+{
+#define bit_name(n) { PERF_FORMAT_##n, #n }
+	struct bit_names bits[] = {
+		bit_name(TOTAL_TIME_ENABLED), bit_name(TOTAL_TIME_RUNNING),
+		bit_name(ID), bit_name(GROUP),
+		{ .name = NULL, }
+	};
+#undef bit_name
+	__p_bits(buf, size, value, bits);
+}
+
+#define BUF_SIZE		1024
+
+#define p_hex(val)		snprintf(buf, BUF_SIZE, "%#"PRIx64, (uint64_t)(val))
+#define p_unsigned(val)		snprintf(buf, BUF_SIZE, "%"PRIu64, (uint64_t)(val))
+#define p_signed(val)		snprintf(buf, BUF_SIZE, "%"PRId64, (int64_t)(val))
+#define p_sample_type(val)	__p_sample_type(buf, BUF_SIZE, val)
+#define p_branch_sample_type(val) __p_branch_sample_type(buf, BUF_SIZE, val)
+#define p_read_format(val)	__p_read_format(buf, BUF_SIZE, val)
+
+#define PRINT_ATTRn(_n, _f, _p)				\
+do {							\
+	if (attr->_f) {					\
+		_p(attr->_f);				\
+		ret += attr__fprintf(fp, _n, buf, priv);\
+	}						\
+} while (0)
+
+#define PRINT_ATTRf(_f, _p)	PRINT_ATTRn(#_f, _f, _p)
+
+int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
+			     attr__fprintf_f attr__fprintf, void *priv)
+{
+	char buf[BUF_SIZE];
+	int ret = 0;
+
+	PRINT_ATTRf(type, p_unsigned);
+	PRINT_ATTRf(size, p_unsigned);
+	PRINT_ATTRf(config, p_hex);
+	PRINT_ATTRn("{ sample_period, sample_freq }", sample_period, p_unsigned);
+	PRINT_ATTRf(sample_type, p_sample_type);
+	PRINT_ATTRf(read_format, p_read_format);
+
+	PRINT_ATTRf(disabled, p_unsigned);
+	PRINT_ATTRf(inherit, p_unsigned);
+	PRINT_ATTRf(pinned, p_unsigned);
+	PRINT_ATTRf(exclusive, p_unsigned);
+	PRINT_ATTRf(exclude_user, p_unsigned);
+	PRINT_ATTRf(exclude_kernel, p_unsigned);
+	PRINT_ATTRf(exclude_hv, p_unsigned);
+	PRINT_ATTRf(exclude_idle, p_unsigned);
+	PRINT_ATTRf(mmap, p_unsigned);
+	PRINT_ATTRf(comm, p_unsigned);
+	PRINT_ATTRf(freq, p_unsigned);
+	PRINT_ATTRf(inherit_stat, p_unsigned);
+	PRINT_ATTRf(enable_on_exec, p_unsigned);
+	PRINT_ATTRf(task, p_unsigned);
+	PRINT_ATTRf(watermark, p_unsigned);
+	PRINT_ATTRf(precise_ip, p_unsigned);
+	PRINT_ATTRf(mmap_data, p_unsigned);
+	PRINT_ATTRf(sample_id_all, p_unsigned);
+	PRINT_ATTRf(exclude_host, p_unsigned);
+	PRINT_ATTRf(exclude_guest, p_unsigned);
+	PRINT_ATTRf(exclude_callchain_kernel, p_unsigned);
+	PRINT_ATTRf(exclude_callchain_user, p_unsigned);
+	PRINT_ATTRf(mmap2, p_unsigned);
+	PRINT_ATTRf(comm_exec, p_unsigned);
+	PRINT_ATTRf(use_clockid, p_unsigned);
+	PRINT_ATTRf(context_switch, p_unsigned);
+	PRINT_ATTRf(write_backward, p_unsigned);
+	PRINT_ATTRf(namespaces, p_unsigned);
+	PRINT_ATTRf(ksymbol, p_unsigned);
+	PRINT_ATTRf(bpf_event, p_unsigned);
+	PRINT_ATTRf(aux_output, p_unsigned);
+
+	PRINT_ATTRn("{ wakeup_events, wakeup_watermark }", wakeup_events, p_unsigned);
+	PRINT_ATTRf(bp_type, p_unsigned);
+	PRINT_ATTRn("{ bp_addr, config1 }", bp_addr, p_hex);
+	PRINT_ATTRn("{ bp_len, config2 }", bp_len, p_hex);
+	PRINT_ATTRf(branch_sample_type, p_branch_sample_type);
+	PRINT_ATTRf(sample_regs_user, p_hex);
+	PRINT_ATTRf(sample_stack_user, p_unsigned);
+	PRINT_ATTRf(clockid, p_signed);
+	PRINT_ATTRf(sample_regs_intr, p_hex);
+	PRINT_ATTRf(aux_watermark, p_unsigned);
+	PRINT_ATTRf(sample_max_stack, p_unsigned);
+
+	return ret;
+}
diff --git a/tools/perf/util/python-ext-sources b/tools/perf/util/python-ext-sources
index 1591dcafa139..dcd584eb2be4 100644
--- a/tools/perf/util/python-ext-sources
+++ b/tools/perf/util/python-ext-sources
@@ -10,6 +10,7 @@ util/python.c
 util/cap.c
 util/evlist.c
 util/evsel.c
+util/perf_event_attr_fprintf.c
 util/cpumap.c
 util/memswap.c
 util/mmap.c
