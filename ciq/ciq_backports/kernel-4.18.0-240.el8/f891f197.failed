kexec_file: Allow archs to handle special regions while locating memory hole

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hari Bathini <hbathini@linux.ibm.com>
commit f891f19736bdf404845f97d8038054be37160ea8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f891f197.failed

Some architectures may have special memory regions, within the given
memory range, which can't be used for the buffer in a kexec segment.
Implement weak arch_kexec_locate_mem_hole() definition which arch code
may override, to take care of special regions, while trying to locate
a memory hole.

Also, add the missing declarations for arch overridable functions and
and drop the __weak descriptors in the declarations to avoid non-weak
definitions from becoming weak.

	Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
	Tested-by: Pingfan Liu <piliu@redhat.com>
	Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Acked-by: Dave Young <dyoung@redhat.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/159602273603.575379.17665852963340380839.stgit@hbathini
(cherry picked from commit f891f19736bdf404845f97d8038054be37160ea8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kexec.h
diff --cc include/linux/kexec.h
index b9b1bc5f9669,9e93bef52968..000000000000
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@@ -183,15 -183,24 +183,36 @@@ int kexec_purgatory_get_set_symbol(stru
  				   bool get_value);
  void *kexec_purgatory_get_symbol_addr(struct kimage *image, const char *name);
  
++<<<<<<< HEAD
 +void * __weak arch_kexec_kernel_image_load(struct kimage *image);
 +int __weak arch_kexec_apply_relocations_add(struct purgatory_info *pi,
 +					    Elf_Shdr *section,
 +					    const Elf_Shdr *relsec,
 +					    const Elf_Shdr *symtab);
 +int __weak arch_kexec_apply_relocations(struct purgatory_info *pi,
 +					Elf_Shdr *section,
 +					const Elf_Shdr *relsec,
 +					const Elf_Shdr *symtab);
++=======
+ /* Architectures may override the below functions */
+ int arch_kexec_kernel_image_probe(struct kimage *image, void *buf,
+ 				  unsigned long buf_len);
+ void *arch_kexec_kernel_image_load(struct kimage *image);
+ int arch_kexec_apply_relocations_add(struct purgatory_info *pi,
+ 				     Elf_Shdr *section,
+ 				     const Elf_Shdr *relsec,
+ 				     const Elf_Shdr *symtab);
+ int arch_kexec_apply_relocations(struct purgatory_info *pi,
+ 				 Elf_Shdr *section,
+ 				 const Elf_Shdr *relsec,
+ 				 const Elf_Shdr *symtab);
+ int arch_kimage_file_post_load_cleanup(struct kimage *image);
+ #ifdef CONFIG_KEXEC_SIG
+ int arch_kexec_kernel_verify_sig(struct kimage *image, void *buf,
+ 				 unsigned long buf_len);
+ #endif
+ int arch_kexec_locate_mem_hole(struct kexec_buf *kbuf);
++>>>>>>> f891f19736bd (kexec_file: Allow archs to handle special regions while locating memory hole)
  
  extern int kexec_add_buffer(struct kexec_buf *kbuf);
  int kexec_locate_mem_hole(struct kexec_buf *kbuf);
* Unmerged path include/linux/kexec.h
diff --git a/kernel/kexec_file.c b/kernel/kexec_file.c
index ab516b3959b2..bb1ff3c7f88c 100644
--- a/kernel/kexec_file.c
+++ b/kernel/kexec_file.c
@@ -600,6 +600,19 @@ int kexec_locate_mem_hole(struct kexec_buf *kbuf)
 	return ret == 1 ? 0 : -EADDRNOTAVAIL;
 }
 
+/**
+ * arch_kexec_locate_mem_hole - Find free memory to place the segments.
+ * @kbuf:                       Parameters for the memory search.
+ *
+ * On success, kbuf->mem will have the start address of the memory region found.
+ *
+ * Return: 0 on success, negative errno on error.
+ */
+int __weak arch_kexec_locate_mem_hole(struct kexec_buf *kbuf)
+{
+	return kexec_locate_mem_hole(kbuf);
+}
+
 /**
  * kexec_add_buffer - place a buffer in a kexec segment
  * @kbuf:	Buffer contents and memory parameters.
@@ -612,7 +625,6 @@ int kexec_locate_mem_hole(struct kexec_buf *kbuf)
  */
 int kexec_add_buffer(struct kexec_buf *kbuf)
 {
-
 	struct kexec_segment *ksegment;
 	int ret;
 
@@ -640,7 +652,7 @@ int kexec_add_buffer(struct kexec_buf *kbuf)
 	kbuf->buf_align = max(kbuf->buf_align, PAGE_SIZE);
 
 	/* Walk the RAM ranges and allocate a suitable range for the buffer */
-	ret = kexec_locate_mem_hole(kbuf);
+	ret = arch_kexec_locate_mem_hole(kbuf);
 	if (ret)
 		return ret;
 
