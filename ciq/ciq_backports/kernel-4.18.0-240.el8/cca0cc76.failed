perf block-info: Allow selecting which columns to report and its order

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jin Yao <yao.jin@linux.intel.com>
commit cca0cc76f5f56dff2c8461b551a3e1fdabcd3fba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/cca0cc76.failed

Currently we use a predefined array to set the block info output
formats, it's fixed and inflexible.

This patch adds two parameters "block_hpps" and "nr_hpps" in
block_info__create_report and other static functions, in order to let
user decide which columns to report and with specified report ordering.
It should be more flexible.

Buffers will be allocated to contain the new fmts, of course, we need to
release them before perf exits.

	Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jin Yao <yao.jin@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kan Liang <kan.liang@linux.intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20200202141655.32053-4-yao.jin@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit cca0cc76f5f56dff2c8461b551a3e1fdabcd3fba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-report.c
#	tools/perf/util/block-info.c
#	tools/perf/util/block-info.h
diff --cc tools/perf/builtin-report.c
index 0f7dce6aa82b,d7c905f7520f..000000000000
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@@ -92,6 -102,9 +92,12 @@@ struct report 
  	DECLARE_BITMAP(cpu_bitmap, MAX_NR_CPUS);
  	struct branch_type_stat	brtype_stat;
  	bool			symbol_ipc;
++<<<<<<< HEAD
++=======
+ 	bool			total_cycles_mode;
+ 	struct block_report	*block_reports;
+ 	int			nr_block_reports;
++>>>>>>> cca0cc76f5f5 (perf block-info: Allow selecting which columns to report and its order)
  };
  
  static int report__config(const char *var, const char *value, void *cb)
@@@ -927,6 -966,24 +933,27 @@@ static int __cmd_report(struct report *
  
  	report__output_resort(rep);
  
++<<<<<<< HEAD
++=======
+ 	if (rep->total_cycles_mode) {
+ 		int block_hpps[6] = {
+ 			PERF_HPP_REPORT__BLOCK_TOTAL_CYCLES_PCT,
+ 			PERF_HPP_REPORT__BLOCK_LBR_CYCLES,
+ 			PERF_HPP_REPORT__BLOCK_CYCLES_PCT,
+ 			PERF_HPP_REPORT__BLOCK_AVG_CYCLES,
+ 			PERF_HPP_REPORT__BLOCK_RANGE,
+ 			PERF_HPP_REPORT__BLOCK_DSO,
+ 		};
+ 
+ 		rep->block_reports = block_info__create_report(session->evlist,
+ 							       rep->total_cycles,
+ 							       block_hpps, 6,
+ 							       &rep->nr_block_reports);
+ 		if (!rep->block_reports)
+ 			return -1;
+ 	}
+ 
++>>>>>>> cca0cc76f5f5 (perf block-info: Allow selecting which columns to report and its order)
  	return report__browse_hists(rep);
  }
  
@@@ -1488,6 -1562,13 +1515,16 @@@ error
  		itrace_synth_opts__clear_time_range(&itrace_synth_opts);
  		zfree(&report.ptime_range);
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	if (report.block_reports) {
+ 		block_info__free_report(report.block_reports,
+ 					report.nr_block_reports);
+ 		report.block_reports = NULL;
+ 	}
+ 
++>>>>>>> cca0cc76f5f5 (perf block-info: Allow selecting which columns to report and its order)
  	zstd_fini(&(session->zstd_data));
  	perf_session__delete(session);
  	return ret;
* Unmerged path tools/perf/util/block-info.c
* Unmerged path tools/perf/util/block-info.h
* Unmerged path tools/perf/builtin-report.c
* Unmerged path tools/perf/util/block-info.c
* Unmerged path tools/perf/util/block-info.h
