selftests: netfilter: use randomized netns names

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Florian Westphal <fw@strlen.de>
commit 5a2e6af81807d4616f9839ad0ae7d1313b45c64d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5a2e6af8.failed

Using ns0, ns1, etc. isn't a good idea, they might exist already.
Use a random suffix.

Also, older nft versions don't support "-" as alias for stdin, so
use /dev/stdin instead.

	Signed-off-by: Florian Westphal <fw@strlen.de>
	Acked-by: Phil Sutter <phil@nwl.cc>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 5a2e6af81807d4616f9839ad0ae7d1313b45c64d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/netfilter/nft_nat.sh
diff --cc tools/testing/selftests/netfilter/nft_nat.sh
index 356b1ba221a4,d7e07f4c3d7f..000000000000
--- a/tools/testing/selftests/netfilter/nft_nat.sh
+++ b/tools/testing/selftests/netfilter/nft_nat.sh
@@@ -8,6 -8,16 +8,19 @@@ ksft_skip=
  ret=0
  test_inet_nat=true
  
++<<<<<<< HEAD
++=======
+ sfx=$(mktemp -u "XXXXXXXX")
+ ns0="ns0-$sfx"
+ ns1="ns1-$sfx"
+ ns2="ns2-$sfx"
+ 
+ cleanup()
+ {
+ 	for i in 0 1 2; do ip netns del ns$i-"$sfx";done
+ }
+ 
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  nft --version > /dev/null 2>&1
  if [ $? -ne 0 ];then
  	echo "SKIP: Could not run test without nft tool"
@@@ -20,11 -30,27 +33,33 @@@ if [ $? -ne 0 ];the
  	exit $ksft_skip
  fi
  
++<<<<<<< HEAD
 +ip netns add ns0
 +ip netns add ns1
 +ip netns add ns2
++=======
+ ip netns add "$ns0"
+ if [ $? -ne 0 ];then
+ 	echo "SKIP: Could not create net namespace $ns0"
+ 	exit $ksft_skip
+ fi
+ 
+ trap cleanup EXIT
+ 
+ ip netns add "$ns1"
+ if [ $? -ne 0 ];then
+ 	echo "SKIP: Could not create net namespace $ns1"
+ 	exit $ksft_skip
+ fi
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
+ 
+ ip netns add "$ns2"
+ if [ $? -ne 0 ];then
+ 	echo "SKIP: Could not create net namespace $ns2"
+ 	exit $ksft_skip
+ fi
  
- ip link add veth0 netns ns0 type veth peer name eth0 netns ns1 > /dev/null 2>&1
+ ip link add veth0 netns "$ns0" type veth peer name eth0 netns "$ns1" > /dev/null 2>&1
  if [ $? -ne 0 ];then
      echo "SKIP: No virtual ethernet pair device support in kernel"
      exit $ksft_skip
@@@ -351,13 -378,14 +387,13 @@@ EO
  test_masquerade6()
  {
  	local family=$1
 -	local natflags=$2
  	local lret=0
  
- 	ip netns exec ns0 sysctl net.ipv6.conf.all.forwarding=1 > /dev/null
+ 	ip netns exec "$ns0" sysctl net.ipv6.conf.all.forwarding=1 > /dev/null
  
- 	ip netns exec ns2 ping -q -c 1 dead:1::99 > /dev/null # ping ns2->ns1
+ 	ip netns exec "$ns2" ping -q -c 1 dead:1::99 > /dev/null # ping ns2->ns1
  	if [ $? -ne 0 ] ; then
- 		echo "ERROR: cannot ping ns1 from ns2 via ipv6"
+ 		echo "ERROR: cannot ping $ns1 from $ns2 via ipv6"
  		return 1
  		lret=1
  	fi
@@@ -393,19 -421,18 +429,27 @@@ EO
  		return $ksft_skip
  	fi
  
- 	ip netns exec ns2 ping -q -c 1 dead:1::99 > /dev/null # ping ns2->ns1
+ 	ip netns exec "$ns2" ping -q -c 1 dead:1::99 > /dev/null # ping ns2->ns1
  	if [ $? -ne 0 ] ; then
++<<<<<<< HEAD
 +		echo "ERROR: cannot ping ns1 from ns2 with active $family masquerading"
++=======
+ 		echo "ERROR: cannot ping $ns1 from $ns2 with active $family masquerade $natflags"
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  		lret=1
  	fi
  
  	# ns1 should have seen packets from ns0, due to masquerade
  	expect="packets 1 bytes 104"
  	for dir in "in6" "out6" ; do
++<<<<<<< HEAD
 +
 +		cnt=$(ip netns exec ns1 nft list counter inet filter ns0${dir} | grep -q "$expect")
++=======
+ 		cnt=$(ip netns exec "$ns1" nft list counter inet filter ns0${dir} | grep -q "$expect")
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  		if [ $? -ne 0 ]; then
- 			bad_counter ns1 ns0$dir "$expect"
+ 			bad_counter "$ns1" ns0$dir "$expect" "test_masquerade6 3"
  			lret=1
  		fi
  
@@@ -432,13 -459,19 +476,27 @@@
  		fi
  	done
  
++<<<<<<< HEAD
 +	ip netns exec ns0 nft flush chain $family nat postrouting
++=======
+ 	ip netns exec "$ns2" ping -q -c 1 dead:1::99 > /dev/null # ping ns2->ns1
+ 	if [ $? -ne 0 ] ; then
+ 		echo "ERROR: cannot ping $ns1 from $ns2 with active ipv6 masquerade $natflags (attempt 2)"
+ 		lret=1
+ 	fi
+ 
+ 	ip netns exec "$ns0" nft flush chain $family nat postrouting
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  	if [ $? -ne 0 ]; then
  		echo "ERROR: Could not flush $family nat postrouting" 1>&2
  		lret=1
  	fi
  
++<<<<<<< HEAD
 +	test $lret -eq 0 && echo "PASS: $family IPv6 masquerade for ns2"
++=======
+ 	test $lret -eq 0 && echo "PASS: $family IPv6 masquerade $natflags for $ns2"
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  
  	return $lret
  }
@@@ -446,14 -479,15 +504,18 @@@
  test_masquerade()
  {
  	local family=$1
 -	local natflags=$2
  	local lret=0
  
- 	ip netns exec ns0 sysctl net.ipv4.conf.veth0.forwarding=1 > /dev/null
- 	ip netns exec ns0 sysctl net.ipv4.conf.veth1.forwarding=1 > /dev/null
+ 	ip netns exec "$ns0" sysctl net.ipv4.conf.veth0.forwarding=1 > /dev/null
+ 	ip netns exec "$ns0" sysctl net.ipv4.conf.veth1.forwarding=1 > /dev/null
  
- 	ip netns exec ns2 ping -q -c 1 10.0.1.99 > /dev/null # ping ns2->ns1
+ 	ip netns exec "$ns2" ping -q -c 1 10.0.1.99 > /dev/null # ping ns2->ns1
  	if [ $? -ne 0 ] ; then
++<<<<<<< HEAD
 +		echo "ERROR: canot ping ns1 from ns2"
++=======
+ 		echo "ERROR: cannot ping $ns1 from "$ns2" $natflags"
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  		lret=1
  	fi
  
@@@ -488,9 -522,9 +550,13 @@@ EO
  		return $ksft_skip
  	fi
  
- 	ip netns exec ns2 ping -q -c 1 10.0.1.99 > /dev/null # ping ns2->ns1
+ 	ip netns exec "$ns2" ping -q -c 1 10.0.1.99 > /dev/null # ping ns2->ns1
  	if [ $? -ne 0 ] ; then
++<<<<<<< HEAD
 +		echo "ERROR: cannot ping ns1 from ns2 with active $family masquerading"
++=======
+ 		echo "ERROR: cannot ping $ns1 from $ns2 with active $family masquerade $natflags"
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  		lret=1
  	fi
  
@@@ -526,13 -560,19 +592,27 @@@
  		fi
  	done
  
++<<<<<<< HEAD
 +	ip netns exec ns0 nft flush chain $family nat postrouting
++=======
+ 	ip netns exec "$ns2" ping -q -c 1 10.0.1.99 > /dev/null # ping ns2->ns1
+ 	if [ $? -ne 0 ] ; then
+ 		echo "ERROR: cannot ping $ns1 from $ns2 with active ip masquerade $natflags (attempt 2)"
+ 		lret=1
+ 	fi
+ 
+ 	ip netns exec "$ns0" nft flush chain $family nat postrouting
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  	if [ $? -ne 0 ]; then
  		echo "ERROR: Could not flush $family nat postrouting" 1>&2
  		lret=1
  	fi
  
++<<<<<<< HEAD
 +	test $lret -eq 0 && echo "PASS: $family IP masquerade for ns2"
++=======
+ 	test $lret -eq 0 && echo "PASS: $family IP masquerade $natflags for $ns2"
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  
  	return $lret
  }
@@@ -819,6 -861,9 +899,13 @@@ reset_counter
  $test_inet_nat && test_redirect inet
  $test_inet_nat && test_redirect6 inet
  
++<<<<<<< HEAD
 +for i in 0 1 2; do ip netns del ns$i;done
++=======
+ if [ $ret -ne 0 ];then
+ 	echo -n "FAIL: "
+ 	nft --version
+ fi
++>>>>>>> 5a2e6af81807 (selftests: netfilter: use randomized netns names)
  
  exit $ret
* Unmerged path tools/testing/selftests/netfilter/nft_nat.sh
