libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 72932371e78012cea96edb9e833d81f1c32dd892
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/72932371.failed

Even more, to have a "perf_record_" prefix, so that they match the
PERF_RECORD_ enum they map to.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190828135717.7245-23-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 72932371e78012cea96edb9e833d81f1c32dd892)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-script.c
#	tools/perf/builtin-stat.c
#	tools/perf/lib/include/perf/event.h
#	tools/perf/tests/cpumap.c
#	tools/perf/tests/event_update.c
#	tools/perf/tests/thread-map.c
#	tools/perf/util/cpumap.c
#	tools/perf/util/cpumap.h
#	tools/perf/util/event.c
#	tools/perf/util/event.h
#	tools/perf/util/header.c
#	tools/perf/util/session.c
#	tools/perf/util/stat.c
#	tools/perf/util/thread_map.c
#	tools/perf/util/thread_map.h
diff --cc tools/perf/builtin-script.c
index 315e8eb7f02d,37297b67905d..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -3239,8 -3244,8 +3239,13 @@@ static void script__setup_sample_type(s
  static int process_stat_round_event(struct perf_session *session,
  				    union perf_event *event)
  {
++<<<<<<< HEAD
 +	struct stat_round_event *round = &event->stat_round;
 +	struct perf_evsel *counter;
++=======
+ 	struct perf_record_stat_round *round = &event->stat_round;
+ 	struct evsel *counter;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
  	evlist__for_each_entry(session->evlist, counter) {
  		perf_stat_process_counter(&stat_config, counter);
diff --cc tools/perf/builtin-stat.c
index b71c4390d333,a7e8c26635db..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1463,8 -1462,8 +1463,13 @@@ static int __cmd_record(int argc, cons
  static int process_stat_round_event(struct perf_session *session,
  				    union perf_event *event)
  {
++<<<<<<< HEAD
 +	struct stat_round_event *stat_round = &event->stat_round;
 +	struct perf_evsel *counter;
++=======
+ 	struct perf_record_stat_round *stat_round = &event->stat_round;
+ 	struct evsel *counter;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  	struct timespec tsh, *ts = NULL;
  	const char **argv = session->header.env.cmdline_argv;
  	int argc = session->header.env.nr_cmdline;
diff --cc tools/perf/lib/include/perf/event.h
index 585c9d82dba3,1655c744ec2b..000000000000
--- a/tools/perf/lib/include/perf/event.h
+++ b/tools/perf/lib/include/perf/event.h
@@@ -104,4 -105,258 +104,261 @@@ struct bpf_event 
  	__u8			 tag[BPF_TAG_SIZE];  // prog tag
  };
  
++<<<<<<< HEAD
++=======
+ struct perf_record_sample {
+ 	struct perf_event_header header;
+ 	__u64			 array[];
+ };
+ 
+ struct perf_record_switch {
+ 	struct perf_event_header header;
+ 	__u32			 next_prev_pid;
+ 	__u32			 next_prev_tid;
+ };
+ 
+ struct perf_record_header_attr {
+ 	struct perf_event_header header;
+ 	struct perf_event_attr	 attr;
+ 	__u64			 id[];
+ };
+ 
+ enum {
+ 	PERF_CPU_MAP__CPUS = 0,
+ 	PERF_CPU_MAP__MASK = 1,
+ };
+ 
+ struct cpu_map_entries {
+ 	__u16			 nr;
+ 	__u16			 cpu[];
+ };
+ 
+ struct perf_record_record_cpu_map {
+ 	__u16			 nr;
+ 	__u16			 long_size;
+ 	unsigned long		 mask[];
+ };
+ 
+ struct perf_record_cpu_map_data {
+ 	__u16			 type;
+ 	char			 data[];
+ };
+ 
+ struct perf_record_cpu_map {
+ 	struct perf_event_header	 header;
+ 	struct perf_record_cpu_map_data	 data;
+ };
+ 
+ enum {
+ 	PERF_EVENT_UPDATE__UNIT  = 0,
+ 	PERF_EVENT_UPDATE__SCALE = 1,
+ 	PERF_EVENT_UPDATE__NAME  = 2,
+ 	PERF_EVENT_UPDATE__CPUS  = 3,
+ };
+ 
+ struct perf_record_event_update_cpus {
+ 	struct perf_record_cpu_map_data	 cpus;
+ };
+ 
+ struct perf_record_event_update_scale {
+ 	double			 scale;
+ };
+ 
+ struct perf_record_event_update {
+ 	struct perf_event_header header;
+ 	__u64			 type;
+ 	__u64			 id;
+ 	char			 data[];
+ };
+ 
+ #define MAX_EVENT_NAME 64
+ 
+ struct perf_trace_event_type {
+ 	__u64			 event_id;
+ 	char			 name[MAX_EVENT_NAME];
+ };
+ 
+ struct perf_record_header_event_type {
+ 	struct perf_event_header	 header;
+ 	struct perf_trace_event_type	 event_type;
+ };
+ 
+ struct perf_record_header_tracing_data {
+ 	struct perf_event_header header;
+ 	__u32			 size;
+ };
+ 
+ struct perf_record_header_build_id {
+ 	struct perf_event_header header;
+ 	pid_t			 pid;
+ 	__u8			 build_id[24];
+ 	char			 filename[];
+ };
+ 
+ struct id_index_entry {
+ 	__u64			 id;
+ 	__u64			 idx;
+ 	__u64			 cpu;
+ 	__u64			 tid;
+ };
+ 
+ struct perf_record_id_index {
+ 	struct perf_event_header header;
+ 	__u64			 nr;
+ 	struct id_index_entry	 entries[0];
+ };
+ 
+ struct perf_record_auxtrace_info {
+ 	struct perf_event_header header;
+ 	__u32			 type;
+ 	__u32			 reserved__; /* For alignment */
+ 	__u64			 priv[];
+ };
+ 
+ struct perf_record_auxtrace {
+ 	struct perf_event_header header;
+ 	__u64			 size;
+ 	__u64			 offset;
+ 	__u64			 reference;
+ 	__u32			 idx;
+ 	__u32			 tid;
+ 	__u32			 cpu;
+ 	__u32			 reserved__; /* For alignment */
+ };
+ 
+ #define MAX_AUXTRACE_ERROR_MSG 64
+ 
+ struct perf_record_auxtrace_error {
+ 	struct perf_event_header header;
+ 	__u32			 type;
+ 	__u32			 code;
+ 	__u32			 cpu;
+ 	__u32			 pid;
+ 	__u32			 tid;
+ 	__u32			 fmt;
+ 	__u64			 ip;
+ 	__u64			 time;
+ 	char			 msg[MAX_AUXTRACE_ERROR_MSG];
+ };
+ 
+ struct perf_record_aux {
+ 	struct perf_event_header header;
+ 	__u64			 aux_offset;
+ 	__u64			 aux_size;
+ 	__u64			 flags;
+ };
+ 
+ struct perf_record_itrace_start {
+ 	struct perf_event_header header;
+ 	__u32			 pid;
+ 	__u32			 tid;
+ };
+ 
+ struct perf_record_thread_map_entry {
+ 	__u64			 pid;
+ 	char			 comm[16];
+ };
+ 
+ struct perf_record_thread_map {
+ 	struct perf_event_header		 header;
+ 	__u64					 nr;
+ 	struct perf_record_thread_map_entry	 entries[];
+ };
+ 
+ enum {
+ 	PERF_STAT_CONFIG_TERM__AGGR_MODE	= 0,
+ 	PERF_STAT_CONFIG_TERM__INTERVAL		= 1,
+ 	PERF_STAT_CONFIG_TERM__SCALE		= 2,
+ 	PERF_STAT_CONFIG_TERM__MAX		= 3,
+ };
+ 
+ struct perf_record_stat_config_entry {
+ 	__u64			 tag;
+ 	__u64			 val;
+ };
+ 
+ struct perf_record_stat_config {
+ 	struct perf_event_header		 header;
+ 	__u64					 nr;
+ 	struct perf_record_stat_config_entry	 data[];
+ };
+ 
+ struct perf_record_stat {
+ 	struct perf_event_header header;
+ 
+ 	__u64			 id;
+ 	__u32			 cpu;
+ 	__u32			 thread;
+ 
+ 	union {
+ 		struct {
+ 			__u64	 val;
+ 			__u64	 ena;
+ 			__u64	 run;
+ 		};
+ 		__u64		 values[3];
+ 	};
+ };
+ 
+ struct perf_record_stat_round {
+ 	struct perf_event_header header;
+ 	__u64			 type;
+ 	__u64			 time;
+ };
+ 
+ struct perf_record_time_conv {
+ 	struct perf_event_header header;
+ 	__u64			 time_shift;
+ 	__u64			 time_mult;
+ 	__u64			 time_zero;
+ };
+ 
+ struct perf_record_header_feature {
+ 	struct perf_event_header header;
+ 	__u64			 feat_id;
+ 	char			 data[];
+ };
+ 
+ struct perf_record_compressed {
+ 	struct perf_event_header header;
+ 	char			 data[];
+ };
+ 
+ union perf_event {
+ 	struct perf_event_header		header;
+ 	struct perf_record_mmap			mmap;
+ 	struct perf_record_mmap2		mmap2;
+ 	struct perf_record_comm			comm;
+ 	struct perf_record_namespaces		namespaces;
+ 	struct perf_record_fork			fork;
+ 	struct perf_record_lost			lost;
+ 	struct perf_record_lost_samples		lost_samples;
+ 	struct perf_record_read			read;
+ 	struct perf_record_throttle		throttle;
+ 	struct perf_record_sample		sample;
+ 	struct perf_record_bpf_event		bpf;
+ 	struct perf_record_ksymbol		ksymbol;
+ 	struct perf_record_header_attr		attr;
+ 	struct perf_record_event_update		event_update;
+ 	struct perf_record_header_event_type	event_type;
+ 	struct perf_record_header_tracing_data	tracing_data;
+ 	struct perf_record_header_build_id	build_id;
+ 	struct perf_record_id_index		id_index;
+ 	struct perf_record_auxtrace_info	auxtrace_info;
+ 	struct perf_record_auxtrace		auxtrace;
+ 	struct perf_record_auxtrace_error	auxtrace_error;
+ 	struct perf_record_aux			aux;
+ 	struct perf_record_itrace_start		itrace_start;
+ 	struct perf_record_switch		context_switch;
+ 	struct perf_record_thread_map		thread_map;
+ 	struct perf_record_cpu_map		cpu_map;
+ 	struct perf_record_stat_config		stat_config;
+ 	struct perf_record_stat			stat;
+ 	struct perf_record_stat_round		stat_round;
+ 	struct perf_record_time_conv		time_conv;
+ 	struct perf_record_header_feature	feat;
+ 	struct perf_record_compressed		pack;
+ };
+ 
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  #endif /* __LIBPERF_EVENT_H */
diff --cc tools/perf/tests/cpumap.c
index e78b897677bd,39493de50117..000000000000
--- a/tools/perf/tests/cpumap.c
+++ b/tools/perf/tests/cpumap.c
@@@ -14,10 -15,10 +14,17 @@@ static int process_event_mask(struct pe
  			 struct perf_sample *sample __maybe_unused,
  			 struct machine *machine __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct cpu_map_event *map_event = &event->cpu_map;
 +	struct cpu_map_mask *mask;
 +	struct cpu_map_data *data;
 +	struct cpu_map *map;
++=======
+ 	struct perf_record_cpu_map *map_event = &event->cpu_map;
+ 	struct perf_record_record_cpu_map *mask;
+ 	struct perf_record_cpu_map_data *data;
+ 	struct perf_cpu_map *map;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  	int i;
  
  	data = &map_event->data;
@@@ -48,10 -49,10 +55,15 @@@ static int process_event_cpus(struct pe
  			 struct perf_sample *sample __maybe_unused,
  			 struct machine *machine __maybe_unused)
  {
- 	struct cpu_map_event *map_event = &event->cpu_map;
+ 	struct perf_record_cpu_map *map_event = &event->cpu_map;
  	struct cpu_map_entries *cpus;
++<<<<<<< HEAD
 +	struct cpu_map_data *data;
 +	struct cpu_map *map;
++=======
+ 	struct perf_record_cpu_map_data *data;
+ 	struct perf_cpu_map *map;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
  	data = &map_event->data;
  
diff --cc tools/perf/tests/event_update.c
index f14dcd613438,1411155597b8..000000000000
--- a/tools/perf/tests/event_update.c
+++ b/tools/perf/tests/event_update.c
@@@ -59,11 -60,11 +59,17 @@@ static int process_event_cpus(struct pe
  			      struct perf_sample *sample __maybe_unused,
  			      struct machine *machine __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct event_update_event *ev = (struct event_update_event*) event;
 +	struct event_update_event_cpus *ev_data;
 +	struct cpu_map *map;
++=======
+ 	struct perf_record_event_update *ev = (struct perf_record_event_update *)event;
+ 	struct perf_record_event_update_cpus *ev_data;
+ 	struct perf_cpu_map *map;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
- 	ev_data = (struct event_update_event_cpus*) ev->data;
+ 	ev_data = (struct perf_record_event_update_cpus *) ev->data;
  
  	map = cpu_map__new_data(&ev_data->cpus);
  
diff --cc tools/perf/tests/thread-map.c
index ccc17aced49e,c19ec8849e77..000000000000
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@@ -56,8 -56,8 +56,13 @@@ static int process_event(struct perf_to
  			 struct perf_sample *sample __maybe_unused,
  			 struct machine *machine __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct thread_map_event *map = &event->thread_map;
 +	struct thread_map *threads;
++=======
+ 	struct perf_record_thread_map *map = &event->thread_map;
+ 	struct perf_thread_map *threads;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
  	TEST_ASSERT_VAL("wrong nr",   map->nr == 1);
  	TEST_ASSERT_VAL("wrong pid",  map->entries[0].pid == (u64) getpid());
diff --cc tools/perf/util/cpumap.c
index 77925b3c8d91,b9301e7e9c76..000000000000
--- a/tools/perf/util/cpumap.c
+++ b/tools/perf/util/cpumap.c
@@@ -226,9 -43,9 +226,13 @@@ static struct cpu_map *cpu_map__from_en
  	return map;
  }
  
++<<<<<<< HEAD
 +static struct cpu_map *cpu_map__from_mask(struct cpu_map_mask *mask)
++=======
+ static struct perf_cpu_map *cpu_map__from_mask(struct perf_record_record_cpu_map *mask)
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  {
 -	struct perf_cpu_map *map;
 +	struct cpu_map *map;
  	int nr, nbits = mask->nr * mask->long_size * BITS_PER_BYTE;
  
  	nr = bitmap_weight(mask->mask, nbits);
@@@ -244,15 -61,15 +248,19 @@@
  
  }
  
++<<<<<<< HEAD
 +struct cpu_map *cpu_map__new_data(struct cpu_map_data *data)
++=======
+ struct perf_cpu_map *cpu_map__new_data(struct perf_record_cpu_map_data *data)
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  {
  	if (data->type == PERF_CPU_MAP__CPUS)
  		return cpu_map__from_entries((struct cpu_map_entries *)data->data);
  	else
- 		return cpu_map__from_mask((struct cpu_map_mask *)data->data);
+ 		return cpu_map__from_mask((struct perf_record_record_cpu_map *)data->data);
  }
  
 -size_t cpu_map__fprintf(struct perf_cpu_map *map, FILE *fp)
 +size_t cpu_map__fprintf(struct cpu_map *map, FILE *fp)
  {
  #define BUFSIZE 1024
  	char buf[BUFSIZE];
diff --cc tools/perf/util/cpumap.h
index 1265f0e33920,2553bef1279d..000000000000
--- a/tools/perf/util/cpumap.h
+++ b/tools/perf/util/cpumap.h
@@@ -4,40 -4,28 +4,50 @@@
  
  #include <stdio.h>
  #include <stdbool.h>
 -#include <internal/cpumap.h>
 -#include <perf/cpumap.h>
 +#include <linux/refcount.h>
  
++<<<<<<< HEAD
 +#include "perf.h"
 +#include "util/debug.h"
 +
 +struct cpu_map {
 +	refcount_t refcnt;
 +	int nr;
 +	int map[];
 +};
 +
 +struct cpu_map *cpu_map__new(const char *cpu_list);
 +struct cpu_map *cpu_map__empty_new(int nr);
 +struct cpu_map *cpu_map__dummy_new(void);
 +struct cpu_map *cpu_map__new_data(struct cpu_map_data *data);
 +struct cpu_map *cpu_map__read(FILE *file);
 +size_t cpu_map__snprint(struct cpu_map *map, char *buf, size_t size);
 +size_t cpu_map__snprint_mask(struct cpu_map *map, char *buf, size_t size);
 +size_t cpu_map__fprintf(struct cpu_map *map, FILE *fp);
++=======
+ struct perf_record_cpu_map_data;
+ 
+ struct perf_cpu_map *perf_cpu_map__empty_new(int nr);
+ struct perf_cpu_map *cpu_map__new_data(struct perf_record_cpu_map_data *data);
+ size_t cpu_map__snprint(struct perf_cpu_map *map, char *buf, size_t size);
+ size_t cpu_map__snprint_mask(struct perf_cpu_map *map, char *buf, size_t size);
+ size_t cpu_map__fprintf(struct perf_cpu_map *map, FILE *fp);
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  int cpu_map__get_socket_id(int cpu);
 -int cpu_map__get_socket(struct perf_cpu_map *map, int idx, void *data);
 +int cpu_map__get_socket(struct cpu_map *map, int idx, void *data);
  int cpu_map__get_die_id(int cpu);
 -int cpu_map__get_die(struct perf_cpu_map *map, int idx, void *data);
 +int cpu_map__get_die(struct cpu_map *map, int idx, void *data);
  int cpu_map__get_core_id(int cpu);
 -int cpu_map__get_core(struct perf_cpu_map *map, int idx, void *data);
 -int cpu_map__build_socket_map(struct perf_cpu_map *cpus, struct perf_cpu_map **sockp);
 -int cpu_map__build_die_map(struct perf_cpu_map *cpus, struct perf_cpu_map **diep);
 -int cpu_map__build_core_map(struct perf_cpu_map *cpus, struct perf_cpu_map **corep);
 -const struct perf_cpu_map *cpu_map__online(void); /* thread unsafe */
 +int cpu_map__get_core(struct cpu_map *map, int idx, void *data);
 +int cpu_map__build_socket_map(struct cpu_map *cpus, struct cpu_map **sockp);
 +int cpu_map__build_die_map(struct cpu_map *cpus, struct cpu_map **diep);
 +int cpu_map__build_core_map(struct cpu_map *cpus, struct cpu_map **corep);
 +const struct cpu_map *cpu_map__online(void); /* thread unsafe */
 +
 +struct cpu_map *cpu_map__get(struct cpu_map *map);
 +void cpu_map__put(struct cpu_map *map);
  
 -static inline int cpu_map__socket(struct perf_cpu_map *sock, int s)
 +static inline int cpu_map__socket(struct cpu_map *sock, int s)
  {
  	if (!sock || s > sock->nr || s < 0)
  		return 0;
diff --cc tools/perf/util/event.c
index 3df19da29403,c9d1f83c747a..000000000000
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@@ -992,8 -992,8 +992,13 @@@ int perf_event__synthesize_thread_map2(
  	event->thread_map.nr = threads->nr;
  
  	for (i = 0; i < threads->nr; i++) {
++<<<<<<< HEAD
 +		struct thread_map_event_entry *entry = &event->thread_map.entries[i];
 +		char *comm = thread_map__comm(threads, i);
++=======
+ 		struct perf_record_thread_map_entry *entry = &event->thread_map.entries[i];
+ 		char *comm = perf_thread_map__comm(threads, i);
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
  		if (!comm)
  			comm = (char *) "";
@@@ -1019,8 -1019,8 +1024,13 @@@ static void synthesize_cpus(struct cpu_
  		cpus->cpu[i] = map->map[i];
  }
  
++<<<<<<< HEAD
 +static void synthesize_mask(struct cpu_map_mask *mask,
 +			    struct cpu_map *map, int max)
++=======
+ static void synthesize_mask(struct perf_record_record_cpu_map *mask,
+ 			    struct perf_cpu_map *map, int max)
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  {
  	int i;
  
@@@ -1050,13 -1050,13 +1060,13 @@@ static size_t mask_size(struct cpu_map 
  			*max = bit;
  	}
  
- 	return sizeof(struct cpu_map_mask) + BITS_TO_LONGS(*max) * sizeof(long);
+ 	return sizeof(struct perf_record_record_cpu_map) + BITS_TO_LONGS(*max) * sizeof(long);
  }
  
 -void *cpu_map_data__alloc(struct perf_cpu_map *map, size_t *size, u16 *type, int *max)
 +void *cpu_map_data__alloc(struct cpu_map *map, size_t *size, u16 *type, int *max)
  {
  	size_t size_cpus, size_mask;
 -	bool is_dummy = perf_cpu_map__empty(map);
 +	bool is_dummy = cpu_map__empty(map);
  
  	/*
  	 * Both array and mask data have variable size based
@@@ -1087,7 -1087,7 +1097,11 @@@
  	return zalloc(*size);
  }
  
++<<<<<<< HEAD
 +void cpu_map_data__synthesize(struct cpu_map_data *data, struct cpu_map *map,
++=======
+ void cpu_map_data__synthesize(struct perf_record_cpu_map_data *data, struct perf_cpu_map *map,
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  			      u16 type, int max)
  {
  	data->type = type;
@@@ -1103,10 -1103,10 +1117,14 @@@
  	};
  }
  
++<<<<<<< HEAD
 +static struct cpu_map_event* cpu_map_event__new(struct cpu_map *map)
++=======
+ static struct perf_record_cpu_map *cpu_map_event__new(struct perf_cpu_map *map)
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  {
- 	size_t size = sizeof(struct cpu_map_event);
- 	struct cpu_map_event *event;
+ 	size_t size = sizeof(struct perf_record_cpu_map);
+ 	struct perf_record_cpu_map *event;
  	int max;
  	u16 type;
  
diff --cc tools/perf/util/event.h
index ba0ec1b6aad3,a7341e14eb48..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -762,8 -510,8 +762,13 @@@ size_t perf_event__fprintf(union perf_e
  int kallsyms__get_function_start(const char *kallsyms_filename,
  				 const char *symbol_name, u64 *addr);
  
++<<<<<<< HEAD
 +void *cpu_map_data__alloc(struct cpu_map *map, size_t *size, u16 *type, int *max);
 +void  cpu_map_data__synthesize(struct cpu_map_data *data, struct cpu_map *map,
++=======
+ void *cpu_map_data__alloc(struct perf_cpu_map *map, size_t *size, u16 *type, int *max);
+ void  cpu_map_data__synthesize(struct perf_record_cpu_map_data *data, struct perf_cpu_map *map,
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  			       u16 type, int max);
  
  void event_attr_init(struct perf_event_attr *attr);
diff --cc tools/perf/util/header.c
index f9721694453e,0a842d9eff22..000000000000
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@@ -3788,10 -3798,10 +3788,10 @@@ event_update_event__new(size_t size, u6
  
  int
  perf_event__synthesize_event_update_unit(struct perf_tool *tool,
 -					 struct evsel *evsel,
 +					 struct perf_evsel *evsel,
  					 perf_event__handler_t process)
  {
- 	struct event_update_event *ev;
+ 	struct perf_record_event_update *ev;
  	size_t size = strlen(evsel->unit);
  	int err;
  
@@@ -3807,11 -3817,11 +3807,11 @@@
  
  int
  perf_event__synthesize_event_update_scale(struct perf_tool *tool,
 -					  struct evsel *evsel,
 +					  struct perf_evsel *evsel,
  					  perf_event__handler_t process)
  {
- 	struct event_update_event *ev;
- 	struct event_update_event_scale *ev_data;
+ 	struct perf_record_event_update *ev;
+ 	struct perf_record_event_update_scale *ev_data;
  	int err;
  
  	ev = event_update_event__new(sizeof(*ev_data), PERF_EVENT_UPDATE__SCALE, evsel->id[0]);
@@@ -3827,10 -3837,10 +3827,10 @@@
  
  int
  perf_event__synthesize_event_update_name(struct perf_tool *tool,
 -					 struct evsel *evsel,
 +					 struct perf_evsel *evsel,
  					 perf_event__handler_t process)
  {
- 	struct event_update_event *ev;
+ 	struct perf_record_event_update *ev;
  	size_t len = strlen(evsel->name);
  	int err;
  
@@@ -3846,11 -3856,11 +3846,11 @@@
  
  int
  perf_event__synthesize_event_update_cpus(struct perf_tool *tool,
 -					struct evsel *evsel,
 +					struct perf_evsel *evsel,
  					perf_event__handler_t process)
  {
- 	size_t size = sizeof(struct event_update_event);
- 	struct event_update_event *ev;
+ 	size_t size = sizeof(struct perf_record_event_update);
+ 	struct perf_record_event_update *ev;
  	int max, err;
  	u16 type;
  
@@@ -3866,8 -3876,8 +3866,13 @@@
  	ev->type = PERF_EVENT_UPDATE__CPUS;
  	ev->id   = evsel->id[0];
  
++<<<<<<< HEAD
 +	cpu_map_data__synthesize((struct cpu_map_data *) ev->data,
 +				 evsel->own_cpus,
++=======
+ 	cpu_map_data__synthesize((struct perf_record_cpu_map_data *)ev->data,
+ 				 evsel->core.own_cpus,
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  				 type, max);
  
  	err = process(tool, (union perf_event*) ev, NULL, NULL);
@@@ -3877,13 -3887,13 +3882,20 @@@
  
  size_t perf_event__fprintf_event_update(union perf_event *event, FILE *fp)
  {
++<<<<<<< HEAD
 +	struct event_update_event *ev = &event->event_update;
 +	struct event_update_event_scale *ev_scale;
 +	struct event_update_event_cpus *ev_cpus;
 +	struct cpu_map *map;
++=======
+ 	struct perf_record_event_update *ev = &event->event_update;
+ 	struct perf_record_event_update_scale *ev_scale;
+ 	struct perf_record_event_update_cpus *ev_cpus;
+ 	struct perf_cpu_map *map;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  	size_t ret;
  
 -	ret = fprintf(fp, "\n... id:    %" PRI_lu64 "\n", ev->id);
 +	ret = fprintf(fp, "\n... id:    %" PRIu64 "\n", ev->id);
  
  	switch (ev->type) {
  	case PERF_EVENT_UPDATE__SCALE:
@@@ -4041,14 -4051,14 +4053,23 @@@ int perf_event__process_attr(struct per
  
  int perf_event__process_event_update(struct perf_tool *tool __maybe_unused,
  				     union perf_event *event,
 -				     struct evlist **pevlist)
 -{
 +				     struct perf_evlist **pevlist)
 +{
++<<<<<<< HEAD
 +	struct event_update_event *ev = &event->event_update;
 +	struct event_update_event_scale *ev_scale;
 +	struct event_update_event_cpus *ev_cpus;
 +	struct perf_evlist *evlist;
 +	struct perf_evsel *evsel;
 +	struct cpu_map *map;
++=======
+ 	struct perf_record_event_update *ev = &event->event_update;
+ 	struct perf_record_event_update_scale *ev_scale;
+ 	struct perf_record_event_update_cpus *ev_cpus;
+ 	struct evlist *evlist;
+ 	struct evsel *evsel;
+ 	struct perf_cpu_map *map;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
  	if (!pevlist || *pevlist == NULL)
  		return -EINVAL;
diff --cc tools/perf/util/session.c
index 432be2de2e63,7350b0dfbc1e..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -2381,11 -2375,11 +2381,16 @@@ out
  int perf_event__process_id_index(struct perf_session *session,
  				 union perf_event *event)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct id_index_event *ie = &event->id_index;
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct perf_record_id_index *ie = &event->id_index;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  	size_t i, nr, max_nr;
  
- 	max_nr = (ie->header.size - sizeof(struct id_index_event)) /
+ 	max_nr = (ie->header.size - sizeof(struct perf_record_id_index)) /
  		 sizeof(struct id_index_entry);
  	nr = ie->nr;
  	if (nr > max_nr)
diff --cc tools/perf/util/stat.c
index 9b8d699cb791,66f8808e57d3..000000000000
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@@ -381,8 -382,8 +381,13 @@@ int perf_event__process_stat_event(stru
  				   union perf_event *event)
  {
  	struct perf_counts_values count;
++<<<<<<< HEAD
 +	struct stat_event *st = &event->stat;
 +	struct perf_evsel *counter;
++=======
+ 	struct perf_record_stat *st = &event->stat;
+ 	struct evsel *counter;
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
  	count.val = st->val;
  	count.ena = st->ena;
@@@ -401,12 -402,12 +406,12 @@@
  
  size_t perf_event__fprintf_stat(union perf_event *event, FILE *fp)
  {
- 	struct stat_event *st = (struct stat_event *) event;
+ 	struct perf_record_stat *st = (struct perf_record_stat *)event;
  	size_t ret;
  
 -	ret  = fprintf(fp, "\n... id %" PRI_lu64 ", cpu %d, thread %d\n",
 +	ret  = fprintf(fp, "\n... id %" PRIu64 ", cpu %d, thread %d\n",
  		       st->id, st->cpu, st->thread);
 -	ret += fprintf(fp, "... value %" PRI_lu64 ", enabled %" PRI_lu64 ", running %" PRI_lu64 "\n",
 +	ret += fprintf(fp, "... value %" PRIu64 ", enabled %" PRIu64 ", running %" PRIu64 "\n",
  		       st->val, st->ena, st->run);
  
  	return ret;
@@@ -414,10 -415,10 +419,10 @@@
  
  size_t perf_event__fprintf_stat_round(union perf_event *event, FILE *fp)
  {
- 	struct stat_round_event *rd = (struct stat_round_event *)event;
+ 	struct perf_record_stat_round *rd = (struct perf_record_stat_round *)event;
  	size_t ret;
  
 -	ret = fprintf(fp, "\n... time %" PRI_lu64 ", type %s\n", rd->time,
 +	ret = fprintf(fp, "\n... time %" PRIu64 ", type %s\n", rd->time,
  		      rd->type == PERF_STAT_ROUND_TYPE__FINAL ? "FINAL" : "INTERVAL");
  
  	return ret;
diff --cc tools/perf/util/thread_map.c
index 5b3511f2b6b1,c9bfe4696943..000000000000
--- a/tools/perf/util/thread_map.c
+++ b/tools/perf/util/thread_map.c
@@@ -429,8 -368,8 +429,13 @@@ void thread_map__read_comms(struct thre
  		comm_init(threads, i);
  }
  
++<<<<<<< HEAD
 +static void thread_map__copy_event(struct thread_map *threads,
 +				   struct thread_map_event *event)
++=======
+ static void thread_map__copy_event(struct perf_thread_map *threads,
+ 				   struct perf_record_thread_map *event)
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  {
  	unsigned i;
  
@@@ -444,9 -383,9 +449,13 @@@
  	refcount_set(&threads->refcnt, 1);
  }
  
++<<<<<<< HEAD
 +struct thread_map *thread_map__new_event(struct thread_map_event *event)
++=======
+ struct perf_thread_map *thread_map__new_event(struct perf_record_thread_map *event)
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  {
 -	struct perf_thread_map *threads;
 +	struct thread_map *threads;
  
  	threads = thread_map__alloc(event->nr);
  	if (threads)
diff --cc tools/perf/util/thread_map.h
index 2f689c90a8c6,3bb860a32b8e..000000000000
--- a/tools/perf/util/thread_map.h
+++ b/tools/perf/util/thread_map.h
@@@ -5,61 -5,27 +5,71 @@@
  #include <sys/types.h>
  #include <stdio.h>
  #include <linux/refcount.h>
 -#include <internal/threadmap.h>
 -#include <perf/threadmap.h>
 +
 +struct thread_map_data {
 +	pid_t    pid;
 +	char	*comm;
 +};
 +
 +struct thread_map {
 +	refcount_t refcnt;
 +	int nr;
 +	int err_thread;
 +	struct thread_map_data map[];
 +};
  
- struct thread_map_event;
+ struct perf_record_thread_map;
  
++<<<<<<< HEAD
 +struct thread_map *thread_map__new_dummy(void);
 +struct thread_map *thread_map__new_by_pid(pid_t pid);
 +struct thread_map *thread_map__new_by_tid(pid_t tid);
 +struct thread_map *thread_map__new_by_uid(uid_t uid);
 +struct thread_map *thread_map__new_all_cpus(void);
 +struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
 +struct thread_map *thread_map__new_event(struct thread_map_event *event);
++=======
+ struct perf_thread_map *thread_map__new_dummy(void);
+ struct perf_thread_map *thread_map__new_by_pid(pid_t pid);
+ struct perf_thread_map *thread_map__new_by_tid(pid_t tid);
+ struct perf_thread_map *thread_map__new_by_uid(uid_t uid);
+ struct perf_thread_map *thread_map__new_all_cpus(void);
+ struct perf_thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
+ struct perf_thread_map *thread_map__new_event(struct perf_record_thread_map *event);
++>>>>>>> 72932371e780 (libperf: Rename the PERF_RECORD_ structs to have a "perf" prefix)
  
 -struct perf_thread_map *thread_map__new_str(const char *pid,
 +struct thread_map *thread_map__get(struct thread_map *map);
 +void thread_map__put(struct thread_map *map);
 +
 +struct thread_map *thread_map__new_str(const char *pid,
  		const char *tid, uid_t uid, bool all_threads);
  
 -struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str);
 +struct thread_map *thread_map__new_by_tid_str(const char *tid_str);
 +
 +size_t thread_map__fprintf(struct thread_map *threads, FILE *fp);
 +
 +static inline int thread_map__nr(struct thread_map *threads)
 +{
 +	return threads ? threads->nr : 1;
 +}
 +
 +static inline pid_t thread_map__pid(struct thread_map *map, int thread)
 +{
 +	return map->map[thread].pid;
 +}
 +
 +static inline void
 +thread_map__set_pid(struct thread_map *map, int thread, pid_t pid)
 +{
 +	map->map[thread].pid = pid;
 +}
  
 -size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp);
 +static inline char *thread_map__comm(struct thread_map *map, int thread)
 +{
 +	return map->map[thread].comm;
 +}
  
 -void thread_map__read_comms(struct perf_thread_map *threads);
 -bool thread_map__has(struct perf_thread_map *threads, pid_t pid);
 -int thread_map__remove(struct perf_thread_map *threads, int idx);
 +void thread_map__read_comms(struct thread_map *threads);
 +bool thread_map__has(struct thread_map *threads, pid_t pid);
 +int thread_map__remove(struct thread_map *threads, int idx);
  #endif	/* __PERF_THREAD_MAP_H */
diff --git a/tools/perf/arch/arm/util/cs-etm.c b/tools/perf/arch/arm/util/cs-etm.c
index 4208974c24f8..bba5f77ea5a1 100644
--- a/tools/perf/arch/arm/util/cs-etm.c
+++ b/tools/perf/arch/arm/util/cs-etm.c
@@ -564,7 +564,7 @@ static int cs_etm_get_ro(struct perf_pmu *pmu, int cpu, const char *path)
 
 static void cs_etm_get_metadata(int cpu, u32 *offset,
 				struct auxtrace_record *itr,
-				struct auxtrace_info_event *info)
+				struct perf_record_auxtrace_info *info)
 {
 	u32 increment;
 	u64 magic;
@@ -629,7 +629,7 @@ static void cs_etm_get_metadata(int cpu, u32 *offset,
 
 static int cs_etm_info_fill(struct auxtrace_record *itr,
 			    struct perf_session *session,
-			    struct auxtrace_info_event *info,
+			    struct perf_record_auxtrace_info *info,
 			    size_t priv_size)
 {
 	int i;
diff --git a/tools/perf/arch/arm64/util/arm-spe.c b/tools/perf/arch/arm64/util/arm-spe.c
index 2c009aa74633..b576f4074d56 100644
--- a/tools/perf/arch/arm64/util/arm-spe.c
+++ b/tools/perf/arch/arm64/util/arm-spe.c
@@ -39,7 +39,7 @@ arm_spe_info_priv_size(struct auxtrace_record *itr __maybe_unused,
 
 static int arm_spe_info_fill(struct auxtrace_record *itr,
 			     struct perf_session *session,
-			     struct auxtrace_info_event *auxtrace_info,
+			     struct perf_record_auxtrace_info *auxtrace_info,
 			     size_t priv_size)
 {
 	struct arm_spe_recording *sper =
diff --git a/tools/perf/arch/s390/util/auxtrace.c b/tools/perf/arch/s390/util/auxtrace.c
index 0fe1be93f375..2ce09ea9f05e 100644
--- a/tools/perf/arch/s390/util/auxtrace.c
+++ b/tools/perf/arch/s390/util/auxtrace.c
@@ -28,7 +28,7 @@ static size_t cpumsf_info_priv_size(struct auxtrace_record *itr __maybe_unused,
 static int
 cpumsf_info_fill(struct auxtrace_record *itr __maybe_unused,
 		 struct perf_session *session __maybe_unused,
-		 struct auxtrace_info_event *auxtrace_info __maybe_unused,
+		 struct perf_record_auxtrace_info *auxtrace_info __maybe_unused,
 		 size_t priv_size __maybe_unused)
 {
 	auxtrace_info->type = PERF_AUXTRACE_S390_CPUMSF;
diff --git a/tools/perf/arch/x86/util/intel-bts.c b/tools/perf/arch/x86/util/intel-bts.c
index 4cbd3d775c19..90cef4c46c2b 100644
--- a/tools/perf/arch/x86/util/intel-bts.c
+++ b/tools/perf/arch/x86/util/intel-bts.c
@@ -66,7 +66,7 @@ intel_bts_info_priv_size(struct auxtrace_record *itr __maybe_unused,
 
 static int intel_bts_info_fill(struct auxtrace_record *itr,
 			       struct perf_session *session,
-			       struct auxtrace_info_event *auxtrace_info,
+			       struct perf_record_auxtrace_info *auxtrace_info,
 			       size_t priv_size)
 {
 	struct intel_bts_recording *btsr =
diff --git a/tools/perf/arch/x86/util/intel-pt.c b/tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4..251cd827ff38 100644
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@ -321,7 +321,7 @@ static void intel_pt_tsc_ctc_ratio(u32 *n, u32 *d)
 
 static int intel_pt_info_fill(struct auxtrace_record *itr,
 			      struct perf_session *session,
-			      struct auxtrace_info_event *auxtrace_info,
+			      struct perf_record_auxtrace_info *auxtrace_info,
 			      size_t priv_size)
 {
 	struct intel_pt_recording *ptr =
diff --git a/tools/perf/arch/x86/util/tsc.c b/tools/perf/arch/x86/util/tsc.c
index b1eb963b4a6e..81720e27f8a3 100644
--- a/tools/perf/arch/x86/util/tsc.c
+++ b/tools/perf/arch/x86/util/tsc.c
@@ -57,7 +57,7 @@ int perf_event__synth_time_conv(const struct perf_event_mmap_page *pc,
 		.time_conv = {
 			.header = {
 				.type = PERF_RECORD_TIME_CONV,
-				.size = sizeof(struct time_conv_event),
+				.size = sizeof(struct perf_record_time_conv),
 			},
 		},
 	};
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6caefa2bcf6c..8be8a59641af 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -899,7 +899,7 @@ static void record__adjust_affinity(struct record *rec, struct perf_mmap *map)
 
 static size_t process_comp_header(void *record, size_t increment)
 {
-	struct compressed_event *event = record;
+	struct perf_record_compressed *event = record;
 	size_t size = sizeof(*event);
 
 	if (increment) {
@@ -917,7 +917,7 @@ static size_t zstd_compress(struct perf_session *session, void *dst, size_t dst_
 			    void *src, size_t src_size)
 {
 	size_t compressed;
-	size_t max_record_size = PERF_SAMPLE_MAX_SIZE - sizeof(struct compressed_event) - 1;
+	size_t max_record_size = PERF_SAMPLE_MAX_SIZE - sizeof(struct perf_record_compressed) - 1;
 
 	compressed = zstd_compress_stream_to_records(&session->zstd_data, dst, dst_size, src, src_size,
 						     max_record_size, process_comp_header);
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/lib/include/perf/event.h
* Unmerged path tools/perf/tests/cpumap.c
* Unmerged path tools/perf/tests/event_update.c
diff --git a/tools/perf/tests/stat.c b/tools/perf/tests/stat.c
index 94250024684a..cc10b4116c9f 100644
--- a/tools/perf/tests/stat.c
+++ b/tools/perf/tests/stat.c
@@ -6,7 +6,7 @@
 #include "counts.h"
 #include "debug.h"
 
-static bool has_term(struct stat_config_event *config,
+static bool has_term(struct perf_record_stat_config *config,
 		     u64 tag, u64 val)
 {
 	unsigned i;
@@ -25,7 +25,7 @@ static int process_stat_config_event(struct perf_tool *tool __maybe_unused,
 				     struct perf_sample *sample __maybe_unused,
 				     struct machine *machine __maybe_unused)
 {
-	struct stat_config_event *config = &event->stat_config;
+	struct perf_record_stat_config *config = &event->stat_config;
 	struct perf_stat_config stat_config;
 
 #define HAS(term, val) \
@@ -65,7 +65,7 @@ static int process_stat_event(struct perf_tool *tool __maybe_unused,
 			      struct perf_sample *sample __maybe_unused,
 			      struct machine *machine __maybe_unused)
 {
-	struct stat_event *st = &event->stat;
+	struct perf_record_stat *st = &event->stat;
 
 	TEST_ASSERT_VAL("wrong cpu",    st->cpu    == 1);
 	TEST_ASSERT_VAL("wrong thread", st->thread == 2);
@@ -95,7 +95,7 @@ static int process_stat_round_event(struct perf_tool *tool __maybe_unused,
 				    struct perf_sample *sample __maybe_unused,
 				    struct machine *machine __maybe_unused)
 {
-	struct stat_round_event *stat_round = &event->stat_round;
+	struct perf_record_stat_round *stat_round = &event->stat_round;
 
 	TEST_ASSERT_VAL("wrong time", stat_round->time == 0xdeadbeef);
 	TEST_ASSERT_VAL("wrong type", stat_round->type == PERF_STAT_ROUND_TYPE__INTERVAL);
* Unmerged path tools/perf/tests/thread-map.c
diff --git a/tools/perf/util/arm-spe.c b/tools/perf/util/arm-spe.c
index a314e5b26e9d..e930fa344630 100644
--- a/tools/perf/util/arm-spe.c
+++ b/tools/perf/util/arm-spe.c
@@ -192,12 +192,12 @@ static void arm_spe_print_info(u64 *arr)
 int arm_spe_process_auxtrace_info(union perf_event *event,
 				  struct perf_session *session)
 {
-	struct auxtrace_info_event *auxtrace_info = &event->auxtrace_info;
+	struct perf_record_auxtrace_info *auxtrace_info = &event->auxtrace_info;
 	size_t min_sz = sizeof(u64) * ARM_SPE_PMU_TYPE;
 	struct arm_spe *spe;
 	int err;
 
-	if (auxtrace_info->header.size < sizeof(struct auxtrace_info_event) +
+	if (auxtrace_info->header.size < sizeof(struct perf_record_auxtrace_info) +
 					min_sz)
 		return -EINVAL;
 
diff --git a/tools/perf/util/auxtrace.c b/tools/perf/util/auxtrace.c
index 2e60b09cfd97..09bbec9769a0 100644
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@ -394,7 +394,7 @@ static int auxtrace_queues__add_indexed_event(struct auxtrace_queues *queues,
 		return err;
 
 	if (event->header.type == PERF_RECORD_AUXTRACE) {
-		if (event->header.size < sizeof(struct auxtrace_event) ||
+		if (event->header.size < sizeof(struct perf_record_auxtrace) ||
 		    event->header.size != sz) {
 			err = -EINVAL;
 			goto out;
@@ -527,7 +527,7 @@ static int auxtrace_not_supported(void)
 
 int auxtrace_record__info_fill(struct auxtrace_record *itr,
 			       struct perf_session *session,
-			       struct auxtrace_info_event *auxtrace_info,
+			       struct perf_record_auxtrace_info *auxtrace_info,
 			       size_t priv_size)
 {
 	if (itr)
@@ -867,13 +867,13 @@ void auxtrace_buffer__free(struct auxtrace_buffer *buffer)
 	free(buffer);
 }
 
-void auxtrace_synth_error(struct auxtrace_error_event *auxtrace_error, int type,
+void auxtrace_synth_error(struct perf_record_auxtrace_error *auxtrace_error, int type,
 			  int code, int cpu, pid_t pid, pid_t tid, u64 ip,
 			  const char *msg, u64 timestamp)
 {
 	size_t size;
 
-	memset(auxtrace_error, 0, sizeof(struct auxtrace_error_event));
+	memset(auxtrace_error, 0, sizeof(struct perf_record_auxtrace_error));
 
 	auxtrace_error->header.type = PERF_RECORD_AUXTRACE_ERROR;
 	auxtrace_error->type = type;
@@ -902,12 +902,12 @@ int perf_event__synthesize_auxtrace_info(struct auxtrace_record *itr,
 
 	pr_debug2("Synthesizing auxtrace information\n");
 	priv_size = auxtrace_record__info_priv_size(itr, session->evlist);
-	ev = zalloc(sizeof(struct auxtrace_info_event) + priv_size);
+	ev = zalloc(sizeof(struct perf_record_auxtrace_info) + priv_size);
 	if (!ev)
 		return -ENOMEM;
 
 	ev->auxtrace_info.header.type = PERF_RECORD_AUXTRACE_INFO;
-	ev->auxtrace_info.header.size = sizeof(struct auxtrace_info_event) +
+	ev->auxtrace_info.header.size = sizeof(struct perf_record_auxtrace_info) +
 					priv_size;
 	err = auxtrace_record__info_fill(itr, session, &ev->auxtrace_info,
 					 priv_size);
@@ -1177,7 +1177,7 @@ static const char *auxtrace_error_name(int type)
 
 size_t perf_event__fprintf_auxtrace_error(union perf_event *event, FILE *fp)
 {
-	struct auxtrace_error_event *e = &event->auxtrace_error;
+	struct perf_record_auxtrace_error *e = &event->auxtrace_error;
 	unsigned long long nsecs = e->time;
 	const char *msg = e->msg;
 	int ret;
@@ -1205,7 +1205,7 @@ size_t perf_event__fprintf_auxtrace_error(union perf_event *event, FILE *fp)
 void perf_session__auxtrace_error_inc(struct perf_session *session,
 				      union perf_event *event)
 {
-	struct auxtrace_error_event *e = &event->auxtrace_error;
+	struct perf_record_auxtrace_error *e = &event->auxtrace_error;
 
 	if (e->type < PERF_AUXTRACE_ERROR_MAX)
 		session->evlist->stats.nr_auxtrace_errors[e->type] += 1;
diff --git a/tools/perf/util/auxtrace.h b/tools/perf/util/auxtrace.h
index 48376e23c130..c2d2dd08790c 100644
--- a/tools/perf/util/auxtrace.h
+++ b/tools/perf/util/auxtrace.h
@@ -37,7 +37,7 @@ struct perf_tool;
 struct perf_mmap;
 struct option;
 struct record_opts;
-struct auxtrace_info_event;
+struct perf_record_auxtrace_info;
 struct events_stats;
 
 /* Auxtrace records must have the same alignment as perf event records */
@@ -327,7 +327,7 @@ struct auxtrace_record {
 				 struct perf_evlist *evlist);
 	int (*info_fill)(struct auxtrace_record *itr,
 			 struct perf_session *session,
-			 struct auxtrace_info_event *auxtrace_info,
+			 struct perf_record_auxtrace_info *auxtrace_info,
 			 size_t priv_size);
 	void (*free)(struct auxtrace_record *itr);
 	int (*snapshot_start)(struct auxtrace_record *itr);
@@ -507,7 +507,7 @@ size_t auxtrace_record__info_priv_size(struct auxtrace_record *itr,
 				       struct perf_evlist *evlist);
 int auxtrace_record__info_fill(struct auxtrace_record *itr,
 			       struct perf_session *session,
-			       struct auxtrace_info_event *auxtrace_info,
+			       struct perf_record_auxtrace_info *auxtrace_info,
 			       size_t priv_size);
 void auxtrace_record__free(struct auxtrace_record *itr);
 int auxtrace_record__snapshot_start(struct auxtrace_record *itr);
@@ -524,7 +524,7 @@ int auxtrace_index__process(int fd, u64 size, struct perf_session *session,
 			    bool needs_swap);
 void auxtrace_index__free(struct list_head *head);
 
-void auxtrace_synth_error(struct auxtrace_error_event *auxtrace_error, int type,
+void auxtrace_synth_error(struct perf_record_auxtrace_error *auxtrace_error, int type,
 			  int code, int cpu, pid_t pid, pid_t tid, u64 ip,
 			  const char *msg, u64 timestamp);
 
diff --git a/tools/perf/util/build-id.c b/tools/perf/util/build-id.c
index f1abfab7aa8c..21cb140ebdce 100644
--- a/tools/perf/util/build-id.c
+++ b/tools/perf/util/build-id.c
@@ -295,7 +295,7 @@ static int write_buildid(const char *name, size_t name_len, u8 *build_id,
 			 pid_t pid, u16 misc, struct feat_fd *fd)
 {
 	int err;
-	struct build_id_event b;
+	struct perf_record_header_build_id b;
 	size_t len;
 
 	len = name_len + 1;
* Unmerged path tools/perf/util/cpumap.c
* Unmerged path tools/perf/util/cpumap.h
diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index d7ad43911473..bf19654d1bc6 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -2394,7 +2394,7 @@ static void cs_etm__print_auxtrace_info(u64 *val, int num)
 int cs_etm__process_auxtrace_info(union perf_event *event,
 				  struct perf_session *session)
 {
-	struct auxtrace_info_event *auxtrace_info = &event->auxtrace_info;
+	struct perf_record_auxtrace_info *auxtrace_info = &event->auxtrace_info;
 	struct cs_etm_auxtrace *etm = NULL;
 	struct int_node *inode;
 	unsigned int pmu_type;
* Unmerged path tools/perf/util/event.c
* Unmerged path tools/perf/util/event.h
* Unmerged path tools/perf/util/header.c
diff --git a/tools/perf/util/intel-bts.c b/tools/perf/util/intel-bts.c
index 278498772e84..6e8c824c8483 100644
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@ -857,12 +857,12 @@ static void intel_bts_print_info(u64 *arr, int start, int finish)
 int intel_bts_process_auxtrace_info(union perf_event *event,
 				    struct perf_session *session)
 {
-	struct auxtrace_info_event *auxtrace_info = &event->auxtrace_info;
+	struct perf_record_auxtrace_info *auxtrace_info = &event->auxtrace_info;
 	size_t min_sz = sizeof(u64) * INTEL_BTS_SNAPSHOT_MODE;
 	struct intel_bts *bts;
 	int err;
 
-	if (auxtrace_info->header.size < sizeof(struct auxtrace_info_event) +
+	if (auxtrace_info->header.size < sizeof(struct perf_record_auxtrace_info) +
 					min_sz)
 		return -EINVAL;
 
diff --git a/tools/perf/util/intel-pt.c b/tools/perf/util/intel-pt.c
index c05fafa87b14..d89fcda3ada1 100644
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@ -3056,23 +3056,23 @@ static void intel_pt_print_info_str(const char *name, const char *str)
 	fprintf(stdout, "  %-20s%s\n", name, str ? str : "");
 }
 
-static bool intel_pt_has(struct auxtrace_info_event *auxtrace_info, int pos)
+static bool intel_pt_has(struct perf_record_auxtrace_info *auxtrace_info, int pos)
 {
 	return auxtrace_info->header.size >=
-		sizeof(struct auxtrace_info_event) + (sizeof(u64) * (pos + 1));
+		sizeof(struct perf_record_auxtrace_info) + (sizeof(u64) * (pos + 1));
 }
 
 int intel_pt_process_auxtrace_info(union perf_event *event,
 				   struct perf_session *session)
 {
-	struct auxtrace_info_event *auxtrace_info = &event->auxtrace_info;
+	struct perf_record_auxtrace_info *auxtrace_info = &event->auxtrace_info;
 	size_t min_sz = sizeof(u64) * INTEL_PT_PER_CPU_MMAPS;
 	struct intel_pt *pt;
 	void *info_end;
 	u64 *info;
 	int err;
 
-	if (auxtrace_info->header.size < sizeof(struct auxtrace_info_event) +
+	if (auxtrace_info->header.size < sizeof(struct perf_record_auxtrace_info) +
 					min_sz)
 		return -EINVAL;
 
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 9c3b43665909..86945876b1dd 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -430,8 +430,8 @@ static char pyrf_context_switch_event__doc[] = PyDoc_STR("perf context_switch ev
 static PyMemberDef pyrf_context_switch_event__members[] = {
 	sample_members
 	member_def(perf_event_header, type, T_UINT, "event type"),
-	member_def(context_switch_event, next_prev_pid, T_UINT, "next/prev pid"),
-	member_def(context_switch_event, next_prev_tid, T_UINT, "next/prev tid"),
+	member_def(perf_record_switch, next_prev_pid, T_UINT, "next/prev pid"),
+	member_def(perf_record_switch, next_prev_tid, T_UINT, "next/prev tid"),
 	{ .name = NULL, },
 };
 
diff --git a/tools/perf/util/s390-cpumsf.c b/tools/perf/util/s390-cpumsf.c
index 83d2e149ef19..2b553cf3d570 100644
--- a/tools/perf/util/s390-cpumsf.c
+++ b/tools/perf/util/s390-cpumsf.c
@@ -1109,11 +1109,11 @@ static int s390_cpumsf__config(const char *var, const char *value, void *cb)
 int s390_cpumsf_process_auxtrace_info(union perf_event *event,
 				      struct perf_session *session)
 {
-	struct auxtrace_info_event *auxtrace_info = &event->auxtrace_info;
+	struct perf_record_auxtrace_info *auxtrace_info = &event->auxtrace_info;
 	struct s390_cpumsf *sf;
 	int err;
 
-	if (auxtrace_info->header.size < sizeof(struct auxtrace_info_event))
+	if (auxtrace_info->header.size < sizeof(struct perf_record_auxtrace_info))
 		return -EINVAL;
 
 	sf = zalloc(sizeof(struct s390_cpumsf));
* Unmerged path tools/perf/util/session.c
diff --git a/tools/perf/util/session.h b/tools/perf/util/session.h
index 863dbad87849..67a0aa33e86b 100644
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@ -28,7 +28,7 @@ struct perf_session {
 	struct itrace_synth_opts *itrace_synth_opts;
 	struct list_head	auxtrace_index;
 	struct trace_event	tevent;
-	struct time_conv_event	time_conv;
+	struct perf_record_time_conv	time_conv;
 	bool			repipe;
 	bool			one_mmap;
 	void			*one_mmap_addr;
* Unmerged path tools/perf/util/stat.c
* Unmerged path tools/perf/util/thread_map.c
* Unmerged path tools/perf/util/thread_map.h
