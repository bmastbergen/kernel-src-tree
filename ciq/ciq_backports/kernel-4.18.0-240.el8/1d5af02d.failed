libperf: Move 'heads' from 'struct evlist' to 'struct perf_evlist'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 1d5af02d7a92acaa877ab0fbec0756114852720a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1d5af02d.failed

Move 'heads' hash table from 'struct evlist' to 'struct perf_evlist'.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-27-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1d5af02d7a92acaa877ab0fbec0756114852720a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,c6af7c622612..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -42,19 -49,15 +42,25 @@@
  int sigqueue(pid_t pid, int sig, const union sigval value);
  #endif
  
 -#define FD(e, x, y) (*(int *)xyarray__entry(e->core.fd, x, y))
 -#define SID(e, x, y) xyarray__entry(e->core.sample_id, x, y)
 +#define FD(e, x, y) (*(int *)xyarray__entry(e->fd, x, y))
 +#define SID(e, x, y) xyarray__entry(e->sample_id, x, y)
  
 -void evlist__init(struct evlist *evlist, struct perf_cpu_map *cpus,
 -		  struct perf_thread_map *threads)
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads)
  {
++<<<<<<< HEAD
 +	int i;
 +
 +	for (i = 0; i < PERF_EVLIST__HLIST_SIZE; ++i)
 +		INIT_HLIST_HEAD(&evlist->heads[i]);
 +	INIT_LIST_HEAD(&evlist->entries);
 +	perf_evlist__set_maps(evlist, cpus, threads);
 +	fdarray__init(&evlist->pollfd, 64);
++=======
+ 	perf_evlist__init(&evlist->core);
+ 	perf_evlist__set_maps(&evlist->core, cpus, threads);
+ 	fdarray__init(&evlist->core.pollfd, 64);
++>>>>>>> 1d5af02d7a92 (libperf: Move 'heads' from 'struct evlist' to 'struct perf_evlist')
  	evlist->workload.pid = -1;
  	evlist->bkw_mmap_state = BKW_MMAP_NOTREADY;
  }
@@@ -497,10 -471,10 +503,10 @@@ static void perf_evlist__id_hash(struc
  	sid->id = id;
  	sid->evsel = evsel;
  	hash = hash_64(sid->id, PERF_EVLIST__HLIST_BITS);
- 	hlist_add_head(&sid->node, &evlist->heads[hash]);
+ 	hlist_add_head(&sid->node, &evlist->core.heads[hash]);
  }
  
 -void perf_evlist__id_add(struct evlist *evlist, struct evsel *evsel,
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
  			 int cpu, int thread, u64 id)
  {
  	perf_evlist__id_hash(evlist, evsel, cpu, thread, id);
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,ad9c0ba57a91..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -18,21 -17,41 +18,54 @@@
  
  struct pollfd;
  struct thread_map;
 -struct perf_cpu_map;
 +struct cpu_map;
  struct record_opts;
  
++<<<<<<< HEAD
 +#define PERF_EVLIST__HLIST_BITS 8
 +#define PERF_EVLIST__HLIST_SIZE (1 << PERF_EVLIST__HLIST_BITS)
 +
 +struct perf_evlist {
 +	struct list_head entries;
 +	struct hlist_head heads[PERF_EVLIST__HLIST_SIZE];
 +	int		 nr_entries;
++=======
+ /*
+  * State machine of bkw_mmap_state:
+  *
+  *                     .________________(forbid)_____________.
+  *                     |                                     V
+  * NOTREADY --(0)--> RUNNING --(1)--> DATA_PENDING --(2)--> EMPTY
+  *                     ^  ^              |   ^               |
+  *                     |  |__(forbid)____/   |___(forbid)___/|
+  *                     |                                     |
+  *                      \_________________(3)_______________/
+  *
+  * NOTREADY     : Backward ring buffers are not ready
+  * RUNNING      : Backward ring buffers are recording
+  * DATA_PENDING : We are required to collect data from backward ring buffers
+  * EMPTY        : We have collected data from backward ring buffers.
+  *
+  * (0): Setup backward ring buffer
+  * (1): Pause ring buffers for reading
+  * (2): Read from ring buffers
+  * (3): Resume ring buffers for recording
+  */
+ enum bkw_mmap_state {
+ 	BKW_MMAP_NOTREADY,
+ 	BKW_MMAP_RUNNING,
+ 	BKW_MMAP_DATA_PENDING,
+ 	BKW_MMAP_EMPTY,
+ };
+ 
+ struct evlist {
+ 	struct perf_evlist core;
++>>>>>>> 1d5af02d7a92 (libperf: Move 'heads' from 'struct evlist' to 'struct perf_evlist')
  	int		 nr_groups;
 +	int		 nr_mmaps;
  	bool		 enabled;
 +	bool		 has_user_cpus;
 +	size_t		 mmap_len;
  	int		 id_pos;
  	int		 is_pos;
  	u64		 combined_sample_type;
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
