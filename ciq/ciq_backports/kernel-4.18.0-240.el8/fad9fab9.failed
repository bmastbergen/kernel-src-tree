EDAC/altera, firmware/intel: Add Stratix10 ECC DBE SMC call

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Thor Thayer <thor.thayer@linux.intel.com>
commit fad9fab975cb9fae651854c811cb07a30bc2b98a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fad9fab9.failed

Reserve ECC Double Bit Error SMC call to alert U-Boot that a DBE has
occurred. Move the call from local EDAC header file to a common header.

 [ bp: Merge the two patches. ]

	Signed-off-by: Thor Thayer <thor.thayer@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Richard Gong <richard.gong@intel.com>
	Reviewed-by: Alan Tull <atull@kernel.org> # firmware
	Cc: Greg KH <greg@kroah.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: linux-edac <linux-edac@vger.kernel.org>
	Cc: mchehab@kernel.org
Link: https://lkml.kernel.org/r/1553870639-23895-1-git-send-email-thor.thayer@linux.intel.com

	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit fad9fab975cb9fae651854c811cb07a30bc2b98a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/altera_edac.h
diff --cc drivers/edac/altera_edac.h
index 81f0554e09de,55654cc4bcdf..000000000000
--- a/drivers/edac/altera_edac.h
+++ b/drivers/edac/altera_edac.h
@@@ -370,80 -369,7 +370,83 @@@ struct altr_arria10_edac 
  	struct irq_domain	*domain;
  	struct irq_chip		irq_chip;
  	struct list_head	a10_ecc_devices;
 +};
 +
++<<<<<<< HEAD
 +/*
 + * Functions specified by ARM SMC Calling convention:
 + *
 + * FAST call executes atomic operations, returns when the requested operation
 + * has completed.
 + * STD call starts a operation which can be preempted by a non-secure
 + * interrupt. The call can return before the requested operation has
 + * completed.
 + *
 + * a0..a7 is used as register names in the descriptions below, on arm32
 + * that translates to r0..r7 and on arm64 to w0..w7.
 + */
 +
 +#define INTEL_SIP_SMC_STD_CALL_VAL(func_num) \
 +	ARM_SMCCC_CALL_VAL(ARM_SMCCC_STD_CALL, ARM_SMCCC_SMC_64, \
 +	ARM_SMCCC_OWNER_SIP, (func_num))
 +
 +#define INTEL_SIP_SMC_FAST_CALL_VAL(func_num) \
 +	ARM_SMCCC_CALL_VAL(ARM_SMCCC_FAST_CALL, ARM_SMCCC_SMC_64, \
 +	ARM_SMCCC_OWNER_SIP, (func_num))
 +
 +#define INTEL_SIP_SMC_RETURN_UNKNOWN_FUNCTION		0xFFFFFFFF
 +#define INTEL_SIP_SMC_STATUS_OK				0x0
 +#define INTEL_SIP_SMC_REG_ERROR				0x5
 +
 +/*
 + * Request INTEL_SIP_SMC_REG_READ
 + *
 + * Read a protected register using SMCCC
 + *
 + * Call register usage:
 + * a0: INTEL_SIP_SMC_REG_READ.
 + * a1: register address.
 + * a2-7: not used.
 + *
 + * Return status:
 + * a0: INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_REG_ERROR, or
 + *     INTEL_SIP_SMC_RETURN_UNKNOWN_FUNCTION
 + * a1: Value in the register
 + * a2-3: not used.
 + */
 +#define INTEL_SIP_SMC_FUNCID_REG_READ 7
 +#define INTEL_SIP_SMC_REG_READ \
 +	INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_REG_READ)
 +
 +/*
 + * Request INTEL_SIP_SMC_REG_WRITE
 + *
 + * Write a protected register using SMCCC
 + *
 + * Call register usage:
 + * a0: INTEL_SIP_SMC_REG_WRITE.
 + * a1: register address
 + * a2: value to program into register.
 + * a3-7: not used.
 + *
 + * Return status:
 + * a0: INTEL_SIP_SMC_STATUS_OK, INTEL_SIP_SMC_REG_ERROR, or
 + *     INTEL_SIP_SMC_RETURN_UNKNOWN_FUNCTION
 + * a1-3: not used.
 + */
 +#define INTEL_SIP_SMC_FUNCID_REG_WRITE 8
 +#define INTEL_SIP_SMC_REG_WRITE \
 +	INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_REG_WRITE)
 +
 +struct altr_stratix10_edac {
 +	struct device		*dev;
 +	int sb_irq;
 +	struct irq_domain	*domain;
 +	struct irq_chip		irq_chip;
 +	struct list_head	s10_ecc_devices;
  	struct notifier_block	panic_notifier;
  };
  
++=======
++>>>>>>> fad9fab975cb (EDAC/altera, firmware/intel: Add Stratix10 ECC DBE SMC call)
  #endif	/* #ifndef _ALTERA_EDAC_H */
diff --git a/drivers/edac/altera_edac.c b/drivers/edac/altera_edac.c
index 5305cf492235..4927d53756ef 100644
--- a/drivers/edac/altera_edac.c
+++ b/drivers/edac/altera_edac.c
@@ -9,6 +9,7 @@
 #include <linux/ctype.h>
 #include <linux/delay.h>
 #include <linux/edac.h>
+#include <linux/firmware/intel/stratix10-smc.h>
 #include <linux/genalloc.h>
 #include <linux/interrupt.h>
 #include <linux/irqchip/chained_irq.h>
* Unmerged path drivers/edac/altera_edac.h
diff --git a/include/linux/firmware/intel/stratix10-smc.h b/include/linux/firmware/intel/stratix10-smc.h
index 5be5dab50b13..01684d935580 100644
--- a/include/linux/firmware/intel/stratix10-smc.h
+++ b/include/linux/firmware/intel/stratix10-smc.h
@@ -309,4 +309,23 @@ INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_FPGA_CONFIG_COMPLETED_WRITE)
 #define INTEL_SIP_SMC_FUNCID_RSU_UPDATE 12
 #define INTEL_SIP_SMC_RSU_UPDATE \
 	INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_RSU_UPDATE)
+
+/*
+ * Request INTEL_SIP_SMC_ECC_DBE
+ *
+ * Sync call used by service driver at EL1 to alert EL3 that a Double
+ * Bit ECC error has occurred.
+ *
+ * Call register usage:
+ * a0 INTEL_SIP_SMC_ECC_DBE
+ * a1 SysManager Double Bit Error value
+ * a2-7 not used
+ *
+ * Return status
+ * a0 INTEL_SIP_SMC_STATUS_OK
+ */
+#define INTEL_SIP_SMC_FUNCID_ECC_DBE 13
+#define INTEL_SIP_SMC_ECC_DBE \
+	INTEL_SIP_SMC_FAST_CALL_VAL(INTEL_SIP_SMC_FUNCID_ECC_DBE)
+
 #endif
