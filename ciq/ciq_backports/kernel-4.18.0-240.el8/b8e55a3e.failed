powerpc/kexec_file: Avoid stomping memory used by special regions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [powerpc] ppc64/kexec_file: avoid stomping memory used by special regions (Diego Domingos) [1829715]
Rebuild_FUZZ: 95.31%
commit-author Hari Bathini <hbathini@linux.ibm.com>
commit b8e55a3e5c208862eacded5aad822184f89f85d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b8e55a3e.failed

crashkernel region could have an overlap with special memory regions
like OPAL, RTAS, TCE table & such. These regions are referred to as
excluded memory ranges. Setup these ranges during image probe in order
to avoid them while finding the buffer for different kdump segments.
Override arch_kexec_locate_mem_hole() to locate a memory hole taking
these ranges into account.

	Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
	Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/159602281047.575379.6636807148335160795.stgit@hbathini
(cherry picked from commit b8e55a3e5c208862eacded5aad822184f89f85d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/kexec.h
#	arch/powerpc/include/asm/kexec_ranges.h
#	arch/powerpc/kexec/elf_64.c
#	arch/powerpc/kexec/file_load_64.c
#	arch/powerpc/kexec/ranges.c
diff --cc arch/powerpc/include/asm/kexec.h
index 4a585cba1787,639f31e13593..000000000000
--- a/arch/powerpc/include/asm/kexec.h
+++ b/arch/powerpc/include/asm/kexec.h
@@@ -113,6 -118,16 +115,19 @@@ int setup_new_fdt(const struct kimage *
  		  unsigned long initrd_load_addr, unsigned long initrd_len,
  		  const char *cmdline);
  int delete_fdt_mem_rsv(void *fdt, unsigned long start, unsigned long size);
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_PPC64
+ int setup_purgatory_ppc64(struct kimage *image, const void *slave_code,
+ 			  const void *fdt, unsigned long kernel_load_addr,
+ 			  unsigned long fdt_load_addr);
+ int setup_new_fdt_ppc64(const struct kimage *image, void *fdt,
+ 			unsigned long initrd_load_addr,
+ 			unsigned long initrd_len, const char *cmdline);
+ #endif /* CONFIG_PPC64 */
+ 
++>>>>>>> b8e55a3e5c20 (powerpc/kexec_file: Avoid stomping memory used by special regions)
  #endif /* CONFIG_KEXEC_FILE */
  
  #else /* !CONFIG_KEXEC_CORE */
* Unmerged path arch/powerpc/include/asm/kexec_ranges.h
* Unmerged path arch/powerpc/kexec/elf_64.c
* Unmerged path arch/powerpc/kexec/file_load_64.c
* Unmerged path arch/powerpc/kexec/ranges.c
* Unmerged path arch/powerpc/include/asm/kexec.h
* Unmerged path arch/powerpc/include/asm/kexec_ranges.h
* Unmerged path arch/powerpc/kexec/elf_64.c
* Unmerged path arch/powerpc/kexec/file_load_64.c
* Unmerged path arch/powerpc/kexec/ranges.c
