drm/fb-helper: Remove drm_fb_helper_fbdev_{setup, teardown}()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Thomas Zimmermann <tzimmermann@suse.de>
commit 8204f235a64e175b624893f91531a9ba76dcc8e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8204f235.failed

Both functions are unused and can be removed. Drivers should use
drm_fbdev_generic_setup() instead.

	Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
	Reviewed-by: Noralf Tr√∏nnes <noralf@tronnes.org>
Link: https://patchwork.freedesktop.org/patch/msgid/20191106124727.11641-3-tzimmermann@suse.de
(cherry picked from commit 8204f235a64e175b624893f91531a9ba76dcc8e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_fb_helper.c
diff --cc drivers/gpu/drm/drm_fb_helper.c
index 8d193a58363d,1038a2f0639e..000000000000
--- a/drivers/gpu/drm/drm_fb_helper.c
+++ b/drivers/gpu/drm/drm_fb_helper.c
@@@ -91,10 -92,9 +91,13 @@@ static DEFINE_MUTEX(kernel_fb_helper_lo
   *
   * Drivers that support a dumb buffer with a virtual address and mmap support,
   * should try out the generic fbdev emulation using drm_fbdev_generic_setup().
 - * It will automatically set up deferred I/O if the driver requires a shadow
 - * buffer.
   *
++<<<<<<< HEAD
 + * Setup fbdev emulation by calling drm_fb_helper_fbdev_setup() and tear it
 + * down by calling drm_fb_helper_fbdev_teardown().
 + *
++=======
++>>>>>>> 8204f235a64e (drm/fb-helper: Remove drm_fb_helper_fbdev_{setup, teardown}())
   * At runtime drivers should restore the fbdev console by using
   * drm_fb_helper_lastclose() as their &drm_driver.lastclose callback.
   * They should also notify the fb helper code from updates to the output
* Unmerged path drivers/gpu/drm/drm_fb_helper.c
diff --git a/include/drm/drm_fb_helper.h b/include/drm/drm_fb_helper.h
index c8a8ae2a678a..e1bb09272c13 100644
--- a/include/drm/drm_fb_helper.h
+++ b/include/drm/drm_fb_helper.h
@@ -270,13 +270,6 @@ int drm_fb_helper_initial_config(struct drm_fb_helper *fb_helper, int bpp_sel);
 int drm_fb_helper_debug_enter(struct fb_info *info);
 int drm_fb_helper_debug_leave(struct fb_info *info);
 
-int drm_fb_helper_fbdev_setup(struct drm_device *dev,
-			      struct drm_fb_helper *fb_helper,
-			      const struct drm_fb_helper_funcs *funcs,
-			      unsigned int preferred_bpp,
-			      unsigned int max_conn_count);
-void drm_fb_helper_fbdev_teardown(struct drm_device *dev);
-
 void drm_fb_helper_lastclose(struct drm_device *dev);
 void drm_fb_helper_output_poll_changed(struct drm_device *dev);
 
@@ -453,24 +446,6 @@ static inline int drm_fb_helper_debug_leave(struct fb_info *info)
 	return 0;
 }
 
-static inline int
-drm_fb_helper_fbdev_setup(struct drm_device *dev,
-			  struct drm_fb_helper *fb_helper,
-			  const struct drm_fb_helper_funcs *funcs,
-			  unsigned int preferred_bpp,
-			  unsigned int max_conn_count)
-{
-	/* So drivers can use it to free the struct */
-	dev->fb_helper = fb_helper;
-
-	return 0;
-}
-
-static inline void drm_fb_helper_fbdev_teardown(struct drm_device *dev)
-{
-	dev->fb_helper = NULL;
-}
-
 static inline void drm_fb_helper_lastclose(struct drm_device *dev)
 {
 }
