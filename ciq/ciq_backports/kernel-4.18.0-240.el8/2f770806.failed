mm/memblock.c: warn if zero alignment was requested

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Mike Rapoport <rppt@linux.vnet.ibm.com>
commit 2f770806fd2c3db9616965e57ba60d80f43c827d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2f770806.failed

After updating all memblock users to explicitly specify SMP_CACHE_BYTES
alignment rather than use 0, it is still possible that uncovered users may
sneak in.  Add a WARN_ON_ONCE for such cases.

[sfr@canb.auug.org.au: use dump_stack() instead of WARN_ON_ONCE for the alignment checks]
  Link: http://lkml.kernel.org/r/20181016131927.6ceba6ab@canb.auug.org.au
[akpm@linux-foundation.org: add apologetic comment]
Link: http://lkml.kernel.org/r/20181011060850.GA19822@rapoport-lnx
	Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2f770806fd2c3db9616965e57ba60d80f43c827d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memblock.c
diff --cc mm/memblock.c
index cd97dba20bb1,7df468c8ebc8..000000000000
--- a/mm/memblock.c
+++ b/mm/memblock.c
@@@ -1239,8 -1247,11 +1239,16 @@@ static phys_addr_t __init memblock_allo
  {
  	phys_addr_t found;
  
++<<<<<<< HEAD
 +	if (!align)
 +		align = SMP_CACHE_BYTES;
++=======
+ 	if (!align) {
+ 		/* Can't use WARNs this early in boot on powerpc */
+ 		dump_stack();
+ 		align = SMP_CACHE_BYTES;
+ 	}
++>>>>>>> 2f770806fd2c (mm/memblock.c: warn if zero alignment was requested)
  
  	found = memblock_find_in_range_node(size, align, start, end, nid,
  					    flags);
@@@ -1367,8 -1375,10 +1375,15 @@@ static void * __init memblock_virt_allo
  	if (WARN_ON_ONCE(slab_is_available()))
  		return kzalloc_node(size, GFP_NOWAIT, nid);
  
++<<<<<<< HEAD
 +	if (!align)
 +		align = SMP_CACHE_BYTES;
++=======
+ 	if (!align) {
+ 		dump_stack();
+ 		align = SMP_CACHE_BYTES;
+ 	}
++>>>>>>> 2f770806fd2c (mm/memblock.c: warn if zero alignment was requested)
  
  	if (max_addr > memblock.current_limit)
  		max_addr = memblock.current_limit;
* Unmerged path mm/memblock.c
