io_uring: Remove unnecessary null check

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author YueHaibing <yuehaibing@huawei.com>
commit 96fd84d83a778450ffae737d9efa546ac3983b1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/96fd84d8.failed

Null check kfree is redundant, so remove it.
This is detected by coccinelle.

	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 96fd84d83a778450ffae737d9efa546ac3983b1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 28a601d08266,00426b686092..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -615,12 -1148,24 +615,31 @@@ out
  	return NULL;
  }
  
 -static void __io_req_do_free(struct io_kiocb *req)
 +static void io_free_req_many(struct io_ring_ctx *ctx, void **reqs, int *nr)
  {
++<<<<<<< HEAD
 +	if (*nr) {
 +		kmem_cache_free_bulk(req_cachep, *nr, reqs);
 +		percpu_ref_put_many(&ctx->refs, *nr);
 +		*nr = 0;
++=======
+ 	if (likely(!io_is_fallback_req(req)))
+ 		kmem_cache_free(req_cachep, req);
+ 	else
+ 		clear_bit_unlock(0, (unsigned long *) req->ctx->fallback_req);
+ }
+ 
+ static void __io_req_aux_free(struct io_kiocb *req)
+ {
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 
+ 	kfree(req->io);
+ 	if (req->file) {
+ 		if (req->flags & REQ_F_FIXED_FILE)
+ 			percpu_ref_put(&ctx->file_data->refs);
+ 		else
+ 			fput(req->file);
++>>>>>>> 96fd84d83a77 (io_uring: Remove unnecessary null check)
  	}
  }
  
* Unmerged path fs/io_uring.c
