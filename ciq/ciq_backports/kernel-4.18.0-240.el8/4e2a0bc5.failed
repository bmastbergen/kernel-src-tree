KVM: VMX: Rename NMI_PENDING to NMI_WINDOW

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Xiaoyao Li <xiaoyao.li@intel.com>
commit 4e2a0bc56ad197e5ccfab8395649b681067fe8cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4e2a0bc5.failed

Rename the NMI-window exiting related definitions to match the latest
Intel SDM. No functional changes.

	Signed-off-by: Xiaoyao Li <xiaoyao.li@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 4e2a0bc56ad197e5ccfab8395649b681067fe8cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/nested.c
diff --cc arch/x86/kvm/vmx/nested.c
index 14c603e204e3,f8b9da53191e..000000000000
--- a/arch/x86/kvm/vmx/nested.c
+++ b/arch/x86/kvm/vmx/nested.c
@@@ -2172,8 -2172,8 +2172,13 @@@ static void prepare_vmcs02_early(struc
  	 * EXEC CONTROLS
  	 */
  	exec_control = vmx_exec_control(vmx); /* L0's desires */
++<<<<<<< HEAD
 +	exec_control &= ~CPU_BASED_VIRTUAL_INTR_PENDING;
 +	exec_control &= ~CPU_BASED_VIRTUAL_NMI_PENDING;
++=======
+ 	exec_control &= ~CPU_BASED_INTR_WINDOW_EXITING;
+ 	exec_control &= ~CPU_BASED_NMI_WINDOW_EXITING;
++>>>>>>> 4e2a0bc56ad1 (KVM: VMX: Rename NMI_PENDING to NMI_WINDOW)
  	exec_control &= ~CPU_BASED_TPR_SHADOW;
  	exec_control |= vmcs12->cpu_based_vm_exec_control;
  
@@@ -3186,7 -3183,7 +3191,11 @@@ enum nvmx_vmentry_status nested_vmx_ent
  	u32 exit_qual;
  
  	evaluate_pending_interrupts = exec_controls_get(vmx) &
++<<<<<<< HEAD
 +		(CPU_BASED_VIRTUAL_INTR_PENDING | CPU_BASED_VIRTUAL_NMI_PENDING);
++=======
+ 		(CPU_BASED_INTR_WINDOW_EXITING | CPU_BASED_NMI_WINDOW_EXITING);
++>>>>>>> 4e2a0bc56ad1 (KVM: VMX: Rename NMI_PENDING to NMI_WINDOW)
  	if (likely(!evaluate_pending_interrupts) && kvm_vcpu_apicv_active(vcpu))
  		evaluate_pending_interrupts |= vmx_has_apicv_interrupt(vcpu);
  
@@@ -3410,8 -3407,8 +3419,13 @@@ static int nested_vmx_run(struct kvm_vc
  	 */
  	if ((vmcs12->guest_activity_state == GUEST_ACTIVITY_HLT) &&
  	    !(vmcs12->vm_entry_intr_info_field & INTR_INFO_VALID_MASK) &&
++<<<<<<< HEAD
 +	    !(vmcs12->cpu_based_vm_exec_control & CPU_BASED_VIRTUAL_NMI_PENDING) &&
 +	    !((vmcs12->cpu_based_vm_exec_control & CPU_BASED_VIRTUAL_INTR_PENDING) &&
++=======
+ 	    !(vmcs12->cpu_based_vm_exec_control & CPU_BASED_NMI_WINDOW_EXITING) &&
+ 	    !((vmcs12->cpu_based_vm_exec_control & CPU_BASED_INTR_WINDOW_EXITING) &&
++>>>>>>> 4e2a0bc56ad1 (KVM: VMX: Rename NMI_PENDING to NMI_WINDOW)
  	      (vmcs12->guest_rflags & X86_EFLAGS_IF))) {
  		vmx->nested.nested_run_pending = 0;
  		return kvm_vcpu_halt(vcpu);
@@@ -5527,10 -5524,10 +5541,10 @@@ bool nested_vmx_exit_reflected(struct k
  		return false;
  	case EXIT_REASON_TRIPLE_FAULT:
  		return true;
 -	case EXIT_REASON_INTERRUPT_WINDOW:
 -		return nested_cpu_has(vmcs12, CPU_BASED_INTR_WINDOW_EXITING);
 +	case EXIT_REASON_PENDING_INTERRUPT:
 +		return nested_cpu_has(vmcs12, CPU_BASED_VIRTUAL_INTR_PENDING);
  	case EXIT_REASON_NMI_WINDOW:
- 		return nested_cpu_has(vmcs12, CPU_BASED_VIRTUAL_NMI_PENDING);
+ 		return nested_cpu_has(vmcs12, CPU_BASED_NMI_WINDOW_EXITING);
  	case EXIT_REASON_TASK_SWITCH:
  		return true;
  	case EXIT_REASON_CPUID:
@@@ -6018,8 -6015,8 +6032,13 @@@ void nested_vmx_setup_ctls_msrs(struct 
  	msrs->procbased_ctls_low =
  		CPU_BASED_ALWAYSON_WITHOUT_TRUE_MSR;
  	msrs->procbased_ctls_high &=
++<<<<<<< HEAD
 +		CPU_BASED_VIRTUAL_INTR_PENDING |
 +		CPU_BASED_VIRTUAL_NMI_PENDING | CPU_BASED_USE_TSC_OFFSETING |
++=======
+ 		CPU_BASED_INTR_WINDOW_EXITING |
+ 		CPU_BASED_NMI_WINDOW_EXITING | CPU_BASED_USE_TSC_OFFSETING |
++>>>>>>> 4e2a0bc56ad1 (KVM: VMX: Rename NMI_PENDING to NMI_WINDOW)
  		CPU_BASED_HLT_EXITING | CPU_BASED_INVLPG_EXITING |
  		CPU_BASED_MWAIT_EXITING | CPU_BASED_CR3_LOAD_EXITING |
  		CPU_BASED_CR3_STORE_EXITING |
diff --git a/arch/x86/include/asm/vmx.h b/arch/x86/include/asm/vmx.h
index 1ae56d893b39..3521fb35accd 100644
--- a/arch/x86/include/asm/vmx.h
+++ b/arch/x86/include/asm/vmx.h
@@ -44,7 +44,7 @@
 #define CPU_BASED_CR8_LOAD_EXITING              0x00080000
 #define CPU_BASED_CR8_STORE_EXITING             0x00100000
 #define CPU_BASED_TPR_SHADOW                    0x00200000
-#define CPU_BASED_VIRTUAL_NMI_PENDING		0x00400000
+#define CPU_BASED_NMI_WINDOW_EXITING		0x00400000
 #define CPU_BASED_MOV_DR_EXITING                0x00800000
 #define CPU_BASED_UNCOND_IO_EXITING             0x01000000
 #define CPU_BASED_USE_IO_BITMAPS                0x02000000
* Unmerged path arch/x86/kvm/vmx/nested.c
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index d1c5b096e0f4..c4369066e244 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -4431,7 +4431,7 @@ static void enable_nmi_window(struct kvm_vcpu *vcpu)
 		return;
 	}
 
-	exec_controls_setbit(to_vmx(vcpu), CPU_BASED_VIRTUAL_NMI_PENDING);
+	exec_controls_setbit(to_vmx(vcpu), CPU_BASED_NMI_WINDOW_EXITING);
 }
 
 static void vmx_inject_irq(struct kvm_vcpu *vcpu)
@@ -5252,7 +5252,7 @@ static int handle_ept_misconfig(struct kvm_vcpu *vcpu)
 static int handle_nmi_window(struct kvm_vcpu *vcpu)
 {
 	WARN_ON_ONCE(!enable_vnmi);
-	exec_controls_clearbit(to_vmx(vcpu), CPU_BASED_VIRTUAL_NMI_PENDING);
+	exec_controls_clearbit(to_vmx(vcpu), CPU_BASED_NMI_WINDOW_EXITING);
 	++vcpu->stat.nmi_window_exits;
 	kvm_make_request(KVM_REQ_EVENT, vcpu);
 
diff --git a/tools/testing/selftests/kvm/include/x86_64/vmx.h b/tools/testing/selftests/kvm/include/x86_64/vmx.h
index 433c43cce2ea..b2e788a6a4ec 100644
--- a/tools/testing/selftests/kvm/include/x86_64/vmx.h
+++ b/tools/testing/selftests/kvm/include/x86_64/vmx.h
@@ -32,7 +32,7 @@
 #define CPU_BASED_CR8_LOAD_EXITING		0x00080000
 #define CPU_BASED_CR8_STORE_EXITING		0x00100000
 #define CPU_BASED_TPR_SHADOW			0x00200000
-#define CPU_BASED_VIRTUAL_NMI_PENDING		0x00400000
+#define CPU_BASED_NMI_WINDOW_EXITING		0x00400000
 #define CPU_BASED_MOV_DR_EXITING		0x00800000
 #define CPU_BASED_UNCOND_IO_EXITING		0x01000000
 #define CPU_BASED_USE_IO_BITMAPS		0x02000000
