libperf: Adopt simplified perf_evsel__close() function from tools/perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 88761fa1f1e3fb2df86727ac99f88abf2ac7e00b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/88761fa1.failed

Add perf_evsel__close() function to libperf while keeping a tools/perf
specific evsel__close() to free ids.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-64-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 88761fa1f1e3fb2df86727ac99f88abf2ac7e00b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/lib/evsel.c
#	tools/perf/lib/include/internal/evsel.h
#	tools/perf/lib/include/perf/evsel.h
#	tools/perf/lib/libperf.map
#	tools/perf/util/evlist.c
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
diff --cc tools/perf/builtin-trace.c
index 9f9c869e0f26,75eb3811e942..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2400,8 -2400,8 +2400,13 @@@ static int trace__event_handler(struct 
  			++trace->nr_events_printed;
  
  			if (evsel->max_events != ULONG_MAX && ++evsel->nr_events_printed == evsel->max_events) {
++<<<<<<< HEAD
 +				perf_evsel__disable(evsel);
 +				perf_evsel__close(evsel);
++=======
+ 				evsel__disable(evsel);
+ 				evsel__close(evsel);
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  			}
  		}
  	}
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,0b90999dcdcb..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,28 +1,31 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__init;
+ 		perf_evsel__open;
+ 		perf_evsel__close;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  	local:
  		*;
  };
diff --cc tools/perf/util/evlist.c
index 4739b7914374,c6b4883b2d49..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -34,6 -33,9 +34,12 @@@
  #include <linux/log2.h>
  #include <linux/err.h>
  #include <linux/zalloc.h>
++<<<<<<< HEAD
++=======
+ #include <perf/evlist.h>
+ #include <perf/evsel.h>
+ #include <perf/cpumap.h>
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  
  #ifdef LACKS_SIGQUEUE_PROTOTYPE
  int sigqueue(pid_t pid, int sig, const union sigval value);
@@@ -1349,18 -1299,18 +1355,18 @@@ void perf_evlist__set_selected(struct p
  	evlist->selected = evsel;
  }
  
 -void evlist__close(struct evlist *evlist)
 +void perf_evlist__close(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry_reverse(evlist, evsel)
- 		perf_evsel__close(evsel);
+ 		evsel__close(evsel);
  }
  
 -static int perf_evlist__create_syswide_maps(struct evlist *evlist)
 +static int perf_evlist__create_syswide_maps(struct perf_evlist *evlist)
  {
 -	struct perf_cpu_map *cpus;
 -	struct perf_thread_map *threads;
 +	struct cpu_map	  *cpus;
 +	struct thread_map *threads;
  	int err = -ENOMEM;
  
  	/*
@@@ -1823,9 -1773,9 +1829,9 @@@ struct perf_evsel *perf_evlist__reset_w
  			is_open = false;
  		if (c2->leader == leader) {
  			if (is_open)
- 				perf_evsel__close(c2);
+ 				evsel__close(c2);
  			c2->leader = c2;
 -			c2->core.nr_members = 0;
 +			c2->nr_members = 0;
  		}
  	}
  	return leader;
diff --cc tools/perf/util/evsel.c
index e99257f738ba,8d8ed36377f5..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1282,13 -1265,7 +1282,17 @@@ int perf_evsel__alloc_id(struct perf_ev
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void perf_evsel__free_fd(struct perf_evsel *evsel)
 +{
 +	xyarray__delete(evsel->fd);
 +	evsel->fd = NULL;
 +}
 +
 +static void perf_evsel__free_id(struct perf_evsel *evsel)
++=======
+ static void perf_evsel__free_id(struct evsel *evsel)
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  {
  	xyarray__delete(evsel->sample_id);
  	evsel->sample_id = NULL;
@@@ -1306,23 -1283,12 +1310,27 @@@ static void perf_evsel__free_config_ter
  	}
  }
  
++<<<<<<< HEAD
 +void perf_evsel__close_fd(struct perf_evsel *evsel)
 +{
 +	int cpu, thread;
 +
 +	for (cpu = 0; cpu < xyarray__max_x(evsel->fd); cpu++)
 +		for (thread = 0; thread < xyarray__max_y(evsel->fd); ++thread) {
 +			close(FD(evsel, cpu, thread));
 +			FD(evsel, cpu, thread) = -1;
 +		}
 +}
 +
 +void perf_evsel__exit(struct perf_evsel *evsel)
++=======
+ void perf_evsel__exit(struct evsel *evsel)
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  {
 -	assert(list_empty(&evsel->core.node));
 +	assert(list_empty(&evsel->node));
  	assert(evsel->evlist == NULL);
  	perf_evsel__free_counts(evsel);
- 	perf_evsel__free_fd(evsel);
+ 	perf_evsel__free_fd(&evsel->core);
  	perf_evsel__free_id(evsel);
  	perf_evsel__free_config_terms(evsel);
  	cgroup__put(evsel->cgrp);
@@@ -2074,13 -2040,9 +2082,19 @@@ out_close
  	return err;
  }
  
++<<<<<<< HEAD
 +void perf_evsel__close(struct perf_evsel *evsel)
 +{
 +	if (evsel->fd == NULL)
 +		return;
 +
 +	perf_evsel__close_fd(evsel);
 +	perf_evsel__free_fd(evsel);
++=======
+ void evsel__close(struct evsel *evsel)
+ {
+ 	perf_evsel__close(&evsel->core);
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  	perf_evsel__free_id(evsel);
  }
  
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,03fc8edad492..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -269,17 -262,16 +269,21 @@@ extern const char *perf_evsel__hw_names
  extern const char *perf_evsel__sw_names[PERF_COUNT_SW_MAX];
  int __perf_evsel__hw_cache_type_op_res_name(u8 type, u8 op, u8 result,
  					    char *bf, size_t size);
 -const char *perf_evsel__name(struct evsel *evsel);
 +const char *perf_evsel__name(struct perf_evsel *evsel);
  
 -const char *perf_evsel__group_name(struct evsel *evsel);
 -int perf_evsel__group_desc(struct evsel *evsel, char *buf, size_t size);
 +const char *perf_evsel__group_name(struct perf_evsel *evsel);
 +int perf_evsel__group_desc(struct perf_evsel *evsel, char *buf, size_t size);
  
++<<<<<<< HEAD
 +int perf_evsel__alloc_id(struct perf_evsel *evsel, int ncpus, int nthreads);
 +void perf_evsel__close_fd(struct perf_evsel *evsel);
++=======
+ int perf_evsel__alloc_id(struct evsel *evsel, int ncpus, int nthreads);
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  
 -void __perf_evsel__set_sample_bit(struct evsel *evsel,
 +void __perf_evsel__set_sample_bit(struct perf_evsel *evsel,
  				  enum perf_event_sample_format bit);
 -void __perf_evsel__reset_sample_bit(struct evsel *evsel,
 +void __perf_evsel__reset_sample_bit(struct perf_evsel *evsel,
  				    enum perf_event_sample_format bit);
  
  #define perf_evsel__set_sample_bit(evsel, bit) \
@@@ -288,24 -280,24 +292,34 @@@
  #define perf_evsel__reset_sample_bit(evsel, bit) \
  	__perf_evsel__reset_sample_bit(evsel, PERF_SAMPLE_##bit)
  
 -void perf_evsel__set_sample_id(struct evsel *evsel,
 +void perf_evsel__set_sample_id(struct perf_evsel *evsel,
  			       bool use_sample_identifier);
  
 -int perf_evsel__set_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__append_tp_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__append_addr_filter(struct evsel *evsel,
 +int perf_evsel__set_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__append_tp_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__append_addr_filter(struct perf_evsel *evsel,
  				   const char *filter);
 -int evsel__apply_filter(struct evsel *evsel, const char *filter);
 -int evsel__enable(struct evsel *evsel);
 -int evsel__disable(struct evsel *evsel);
 -
 +int perf_evsel__apply_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__enable(struct perf_evsel *evsel);
 +int perf_evsel__disable(struct perf_evsel *evsel);
 +
++<<<<<<< HEAD
 +int perf_evsel__open_per_cpu(struct perf_evsel *evsel,
 +			     struct cpu_map *cpus);
 +int perf_evsel__open_per_thread(struct perf_evsel *evsel,
 +				struct thread_map *threads);
 +int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 +		     struct thread_map *threads);
 +void perf_evsel__close(struct perf_evsel *evsel);
++=======
+ int perf_evsel__open_per_cpu(struct evsel *evsel,
+ 			     struct perf_cpu_map *cpus);
+ int perf_evsel__open_per_thread(struct evsel *evsel,
+ 				struct perf_thread_map *threads);
+ int evsel__open(struct evsel *evsel, struct perf_cpu_map *cpus,
+ 		struct perf_thread_map *threads);
+ void evsel__close(struct evsel *evsel);
++>>>>>>> 88761fa1f1e3 (libperf: Adopt simplified perf_evsel__close() function from tools/perf)
  
  struct perf_sample;
  
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/lib/include/perf/evsel.h
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/lib/include/perf/evsel.h
* Unmerged path tools/perf/lib/libperf.map
diff --git a/tools/perf/tests/openat-syscall-all-cpus.c b/tools/perf/tests/openat-syscall-all-cpus.c
index 493ecb611540..adc07d218716 100644
--- a/tools/perf/tests/openat-syscall-all-cpus.c
+++ b/tools/perf/tests/openat-syscall-all-cpus.c
@@ -116,7 +116,7 @@ int test__openat_syscall_event_on_all_cpus(struct test *test __maybe_unused, int
 
 	perf_evsel__free_counts(evsel);
 out_close_fd:
-	perf_evsel__close_fd(evsel);
+	perf_evsel__close_fd(&evsel->core);
 out_evsel_delete:
 	perf_evsel__delete(evsel);
 out_cpu_map_delete:
diff --git a/tools/perf/tests/openat-syscall.c b/tools/perf/tests/openat-syscall.c
index 00cd63f90b92..175756af323f 100644
--- a/tools/perf/tests/openat-syscall.c
+++ b/tools/perf/tests/openat-syscall.c
@@ -57,7 +57,7 @@ int test__openat_syscall_event(struct test *test __maybe_unused, int subtest __m
 
 	err = 0;
 out_close_fd:
-	perf_evsel__close_fd(evsel);
+	perf_evsel__close_fd(&evsel->core);
 out_evsel_delete:
 	perf_evsel__delete(evsel);
 out_thread_map_delete:
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
