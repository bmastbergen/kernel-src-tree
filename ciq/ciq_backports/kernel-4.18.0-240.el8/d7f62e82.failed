io_uring: add BUILD_BUG_ON() to assert the layout of struct io_uring_sqe

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Stefan Metzmacher <metze@samba.org>
commit d7f62e825fd19202a0749d10fb439714c51f67d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d7f62e82.failed

With nesting of anonymous unions and structs it's hard to
review layout changes. It's better to ask the compiler
for these things.

	Signed-off-by: Stefan Metzmacher <metze@samba.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit d7f62e825fd19202a0749d10fb439714c51f67d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 943ec60fc256,217721c7bc41..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -4096,6 -7038,40 +4096,43 @@@ out_fput
  
  static int __init io_uring_init(void)
  {
++<<<<<<< HEAD
++=======
+ #define __BUILD_BUG_VERIFY_ELEMENT(stype, eoffset, etype, ename) do { \
+ 	BUILD_BUG_ON(offsetof(stype, ename) != eoffset); \
+ 	BUILD_BUG_ON(sizeof(etype) != sizeof_field(stype, ename)); \
+ } while (0)
+ 
+ #define BUILD_BUG_SQE_ELEM(eoffset, etype, ename) \
+ 	__BUILD_BUG_VERIFY_ELEMENT(struct io_uring_sqe, eoffset, etype, ename)
+ 	BUILD_BUG_ON(sizeof(struct io_uring_sqe) != 64);
+ 	BUILD_BUG_SQE_ELEM(0,  __u8,   opcode);
+ 	BUILD_BUG_SQE_ELEM(1,  __u8,   flags);
+ 	BUILD_BUG_SQE_ELEM(2,  __u16,  ioprio);
+ 	BUILD_BUG_SQE_ELEM(4,  __s32,  fd);
+ 	BUILD_BUG_SQE_ELEM(8,  __u64,  off);
+ 	BUILD_BUG_SQE_ELEM(8,  __u64,  addr2);
+ 	BUILD_BUG_SQE_ELEM(16, __u64,  addr);
+ 	BUILD_BUG_SQE_ELEM(24, __u32,  len);
+ 	BUILD_BUG_SQE_ELEM(28,     __kernel_rwf_t, rw_flags);
+ 	BUILD_BUG_SQE_ELEM(28, /* compat */   int, rw_flags);
+ 	BUILD_BUG_SQE_ELEM(28, /* compat */ __u32, rw_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  fsync_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u16,  poll_events);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  sync_range_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  msg_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  timeout_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  accept_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  cancel_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  open_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  statx_flags);
+ 	BUILD_BUG_SQE_ELEM(28, __u32,  fadvise_advice);
+ 	BUILD_BUG_SQE_ELEM(32, __u64,  user_data);
+ 	BUILD_BUG_SQE_ELEM(40, __u16,  buf_index);
+ 	BUILD_BUG_SQE_ELEM(42, __u16,  personality);
+ 
+ 	BUILD_BUG_ON(ARRAY_SIZE(io_op_defs) != IORING_OP_LAST);
++>>>>>>> d7f62e825fd1 (io_uring: add BUILD_BUG_ON() to assert the layout of struct io_uring_sqe)
  	req_cachep = KMEM_CACHE(io_kiocb, SLAB_HWCACHE_ALIGN | SLAB_PANIC);
  	return 0;
  };
* Unmerged path fs/io_uring.c
