KVM: X86: Fix initialization of MSR lists

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Chenyi Qiang <chenyi.qiang@intel.com>
commit 7a5ee6edb42e0bb487954806d34877995b6b8d59
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7a5ee6ed.failed

The three MSR lists(msrs_to_save[], emulated_msrs[] and
msr_based_features[]) are global arrays of kvm.ko, which are
adjusted (copy supported MSRs forward to override the unsupported MSRs)
when insmod kvm-{intel,amd}.ko, but it doesn't reset these three arrays
to their initial value when rmmod kvm-{intel,amd}.ko. Thus, at the next
installation, kvm-{intel,amd}.ko will do operations on the modified
arrays with some MSRs lost and some MSRs duplicated.

So define three constant arrays to hold the initial MSR lists and
initialize msrs_to_save[], emulated_msrs[] and msr_based_features[]
based on the constant arrays.

	Cc: stable@vger.kernel.org
	Reviewed-by: Xiaoyao Li <xiaoyao.li@intel.com>
	Signed-off-by: Chenyi Qiang <chenyi.qiang@intel.com>
[Remove now useless conditionals. - Paolo]
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 7a5ee6edb42e0bb487954806d34877995b6b8d59)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index ea0e7b249129,8c8a5e20ea06..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -1182,12 -1179,12 +1184,13 @@@ static const u32 msrs_to_save_all[] = 
  	MSR_ARCH_PERFMON_EVENTSEL0 + 12, MSR_ARCH_PERFMON_EVENTSEL0 + 13,
  	MSR_ARCH_PERFMON_EVENTSEL0 + 14, MSR_ARCH_PERFMON_EVENTSEL0 + 15,
  	MSR_ARCH_PERFMON_EVENTSEL0 + 16, MSR_ARCH_PERFMON_EVENTSEL0 + 17,
 +	MSR_IA32_UMWAIT_CONTROL,
  };
  
+ static u32 msrs_to_save[ARRAY_SIZE(msrs_to_save_all)];
  static unsigned num_msrs_to_save;
  
- static u32 emulated_msrs[] = {
+ static const u32 emulated_msrs_all[] = {
  	MSR_KVM_SYSTEM_TIME, MSR_KVM_WALL_CLOCK,
  	MSR_KVM_SYSTEM_TIME_NEW, MSR_KVM_WALL_CLOCK_NEW,
  	HV_X64_MSR_GUEST_OS_ID, HV_X64_MSR_HYPERCALL,
@@@ -5128,17 -5095,15 +5133,23 @@@ static void kvm_init_msr_list(void
  {
  	struct x86_pmu_capability x86_pmu;
  	u32 dummy[2];
- 	unsigned i, j;
+ 	unsigned i;
  
++<<<<<<< HEAD
 +	/*
 +	 * RHEL-only: uncomment when 6017608936c18 is backported
 +	 * BUILD_BUG_ON_MSG(INTEL_PMC_MAX_FIXED != 4,
 +	 *		 "Please update the fixed PMCs in msrs_to_save[]");
 +	 */
++=======
+ 	BUILD_BUG_ON_MSG(INTEL_PMC_MAX_FIXED != 4,
+ 			 "Please update the fixed PMCs in msrs_to_saved_all[]");
+ 
++>>>>>>> 7a5ee6edb42e (KVM: X86: Fix initialization of MSR lists)
  	perf_get_x86_pmu_capability(&x86_pmu);
  
- 	for (i = j = 0; i < ARRAY_SIZE(msrs_to_save); i++) {
- 		if (rdmsr_safe(msrs_to_save[i], &dummy[0], &dummy[1]) < 0)
+ 	for (i = 0; i < ARRAY_SIZE(msrs_to_save_all); i++) {
+ 		if (rdmsr_safe(msrs_to_save_all[i], &dummy[0], &dummy[1]) < 0)
  			continue;
  
  		/*
* Unmerged path arch/x86/kvm/x86.c
