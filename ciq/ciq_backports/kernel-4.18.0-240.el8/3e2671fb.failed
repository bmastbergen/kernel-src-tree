selftests/bpf: Ensure consistent test failure output

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 3e2671fb9a95d2b46990832466383ec8384d88a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3e2671fb.failed

printf() doesn't seem to honor using overwritten stdout/stderr (as part of
stdio hijacking), so ensure all "standard" invocations of printf() do
fprintf(stdout, ...) instead.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20200313172336.1879637-2-andriin@fb.com
(cherry picked from commit 3e2671fb9a95d2b46990832466383ec8384d88a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_progs.c
#	tools/testing/selftests/bpf/test_progs.h
diff --cc tools/testing/selftests/bpf/test_progs.c
index 57a96962ee9f,f85a06512541..000000000000
--- a/tools/testing/selftests/bpf/test_progs.c
+++ b/tools/testing/selftests/bpf/test_progs.c
@@@ -165,8 -216,8 +165,13 @@@ int bpf_find_map(const char *test, stru
  
  	map = bpf_object__find_map_by_name(obj, name);
  	if (!map) {
++<<<<<<< HEAD
 +		printf("%s:FAIL:map '%s' not found\n", test, name);
 +		error_cnt++;
++=======
+ 		fprintf(stdout, "%s:FAIL:map '%s' not found\n", test, name);
+ 		test__fail();
++>>>>>>> 3e2671fb9a95 (selftests/bpf: Ensure consistent test failure output)
  		return -1;
  	}
  	return bpf_map__fd(map);
@@@ -331,9 -385,9 +336,9 @@@ static const struct argp_option opts[] 
  static int libbpf_print_fn(enum libbpf_print_level level,
  			   const char *format, va_list args)
  {
 -	if (env.verbosity < VERBOSE_VERY && level == LIBBPF_DEBUG)
 +	if (!env.very_verbose && level == LIBBPF_DEBUG)
  		return 0;
- 	vprintf(format, args);
+ 	vfprintf(stdout, format, args);
  	return 0;
  }
  
@@@ -585,13 -711,20 +590,13 @@@ int main(int argc, char **argv
  		fprintf(env.stdout, "#%d %s:%s\n",
  			test->test_num, test->test_name,
  			test->error_cnt ? "FAIL" : "OK");
 -
 -		if (test->need_cgroup_cleanup)
 -			cleanup_cgroup_environment();
  	}
  	stdio_restore();
- 	printf("Summary: %d/%d PASSED, %d SKIPPED, %d FAILED\n",
- 	       env.succ_cnt, env.sub_succ_cnt, env.skip_cnt, env.fail_cnt);
+ 	fprintf(stdout, "Summary: %d/%d PASSED, %d SKIPPED, %d FAILED\n",
+ 		env.succ_cnt, env.sub_succ_cnt, env.skip_cnt, env.fail_cnt);
  
 -	free(env.test_selector.blacklist.strs);
 -	free(env.test_selector.whitelist.strs);
  	free(env.test_selector.num_set);
 -	free(env.subtest_selector.blacklist.strs);
 -	free(env.subtest_selector.whitelist.strs);
  	free(env.subtest_selector.num_set);
  
 -	return env.fail_cnt ? EXIT_FAILURE : EXIT_SUCCESS;
 +	return error_cnt ? EXIT_FAILURE : EXIT_SUCCESS;
  }
diff --cc tools/testing/selftests/bpf/test_progs.h
index 9defd35cb6c0,fd85fa61dbf7..000000000000
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@@ -95,15 -106,27 +95,37 @@@ extern struct ipv6_packet pkt_v6
  
  #define _CHECK(condition, tag, duration, format...) ({			\
  	int __ret = !!(condition);					\
 -	int __save_errno = errno;					\
  	if (__ret) {							\
++<<<<<<< HEAD
 +		error_cnt++;						\
 +		printf("%s:FAIL:%s ", __func__, tag);			\
 +		printf(format);						\
 +	} else {							\
 +		pass_cnt++;						\
 +		printf("%s:PASS:%s %d nsec\n",				\
 +		       __func__, tag, duration);			\
 +	}								\
++=======
+ 		test__fail();						\
+ 		fprintf(stdout, "%s:FAIL:%s ", __func__, tag);		\
+ 		fprintf(stdout, ##format);				\
+ 	} else {							\
+ 		fprintf(stdout, "%s:PASS:%s %d nsec\n",			\
+ 		       __func__, tag, duration);			\
+ 	}								\
+ 	errno = __save_errno;						\
+ 	__ret;								\
+ })
+ 
+ #define CHECK_FAIL(condition) ({					\
+ 	int __ret = !!(condition);					\
+ 	int __save_errno = errno;					\
+ 	if (__ret) {							\
+ 		test__fail();						\
+ 		fprintf(stdout, "%s:FAIL:%d\n", __func__, __LINE__);	\
+ 	}								\
+ 	errno = __save_errno;						\
++>>>>>>> 3e2671fb9a95 (selftests/bpf: Ensure consistent test failure output)
  	__ret;								\
  })
  
* Unmerged path tools/testing/selftests/bpf/test_progs.c
* Unmerged path tools/testing/selftests/bpf/test_progs.h
