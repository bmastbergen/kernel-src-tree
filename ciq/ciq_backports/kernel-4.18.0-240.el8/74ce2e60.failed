KVM: PPC: Move all vcpu init code into kvm_arch_vcpu_create()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 74ce2e60d4874fc2464e321af1397c6fae984ec9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/74ce2e60.failed

Fold init() into create() now that the two are called back-to-back by
common KVM code (kvm_vcpu_init() calls kvm_arch_vcpu_init() as its last
action, and kvm_vm_ioctl_create_vcpu() calls kvm_arch_vcpu_create()
immediately thereafter).  Rinse and repeat for kvm_arch_vcpu_uninit()
and kvm_arch_vcpu_destroy().  This paves the way for removing
kvm_arch_vcpu_{un}init() entirely.

Note, calling kvmppc_mmu_destroy() if kvmppc_core_vcpu_create() fails
may or may not be necessary.  Move it along with the more obvious call
to kvmppc_subarch_vcpu_uninit() so as not to inadvertantly introduce a
functional change and/or bug.

No functional change intended.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 74ce2e60d4874fc2464e321af1397c6fae984ec9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kvm/powerpc.c
diff --cc arch/powerpc/kvm/powerpc.c
index 124aecce15bf,4fbf8690b8c5..000000000000
--- a/arch/powerpc/kvm/powerpc.c
+++ b/arch/powerpc/kvm/powerpc.c
@@@ -728,32 -720,48 +728,76 @@@ void kvm_arch_flush_shadow_memslot(stru
  	kvmppc_core_flush_memslot(kvm, slot);
  }
  
++<<<<<<< HEAD
 +struct kvm_vcpu *kvm_arch_vcpu_create(struct kvm *kvm, unsigned int id)
++=======
+ int kvm_arch_vcpu_precreate(struct kvm *kvm, unsigned int id)
+ {
+ 	return 0;
+ }
+ 
+ static enum hrtimer_restart kvmppc_decrementer_wakeup(struct hrtimer *timer)
+ {
+ 	struct kvm_vcpu *vcpu;
+ 
+ 	vcpu = container_of(timer, struct kvm_vcpu, arch.dec_timer);
+ 	kvmppc_decrementer_func(vcpu);
+ 
+ 	return HRTIMER_NORESTART;
+ }
+ 
+ int kvm_arch_vcpu_create(struct kvm_vcpu *vcpu)
++>>>>>>> 74ce2e60d487 (KVM: PPC: Move all vcpu init code into kvm_arch_vcpu_create())
  {
 +	struct kvm_vcpu *vcpu;
  	int err;
  
++<<<<<<< HEAD
 +	vcpu = kmem_cache_zalloc(kvm_vcpu_cache, GFP_KERNEL);
 +	if (!vcpu)
 +		return ERR_PTR(-ENOMEM);
 +
 +	err = kvm_vcpu_init(vcpu, kvm, id);
 +	if (err)
 +		goto free_vcpu;
 +
 +	err = kvmppc_core_vcpu_create(vcpu);
++=======
+ 	hrtimer_init(&vcpu->arch.dec_timer, CLOCK_REALTIME, HRTIMER_MODE_ABS);
+ 	vcpu->arch.dec_timer.function = kvmppc_decrementer_wakeup;
+ 	vcpu->arch.dec_expires = get_tb();
+ 
+ #ifdef CONFIG_KVM_EXIT_TIMING
+ 	mutex_init(&vcpu->arch.exit_timing_lock);
+ #endif
+ 	err = kvmppc_subarch_vcpu_init(vcpu);
++>>>>>>> 74ce2e60d487 (KVM: PPC: Move all vcpu init code into kvm_arch_vcpu_create())
  	if (err)
 -		return err;
 +		goto uninit_vcpu;
  
+ 	err = kvmppc_core_vcpu_create(vcpu);
+ 	if (err)
+ 		goto out_vcpu_uninit;
+ 
  	vcpu->arch.wqp = &vcpu->wq;
++<<<<<<< HEAD
 +	kvmppc_create_vcpu_debugfs(vcpu, id);
 +	return vcpu;
 +
 +uninit_vcpu:
 +	kvm_vcpu_uninit(vcpu);
 +free_vcpu:
 +	kmem_cache_free(kvm_vcpu_cache, vcpu);
 +	return ERR_PTR(err);
++=======
+ 	kvmppc_create_vcpu_debugfs(vcpu, vcpu->vcpu_id);
+ 	return 0;
+ 
+ out_vcpu_uninit:
+ 	kvmppc_mmu_destroy(vcpu);
+ 	kvmppc_subarch_vcpu_uninit(vcpu);
+ 	return err;
++>>>>>>> 74ce2e60d487 (KVM: PPC: Move all vcpu init code into kvm_arch_vcpu_create())
  }
  
  void kvm_arch_vcpu_postcreate(struct kvm_vcpu *vcpu)
@@@ -784,9 -792,8 +828,14 @@@ void kvm_arch_vcpu_destroy(struct kvm_v
  
  	kvmppc_core_vcpu_free(vcpu);
  
++<<<<<<< HEAD
 +	kvm_vcpu_uninit(vcpu);
 +
 +	kmem_cache_free(kvm_vcpu_cache, vcpu);
++=======
+ 	kvmppc_mmu_destroy(vcpu);
+ 	kvmppc_subarch_vcpu_uninit(vcpu);
++>>>>>>> 74ce2e60d487 (KVM: PPC: Move all vcpu init code into kvm_arch_vcpu_create())
  }
  
  int kvm_cpu_has_pending_timer(struct kvm_vcpu *vcpu)
* Unmerged path arch/powerpc/kvm/powerpc.c
