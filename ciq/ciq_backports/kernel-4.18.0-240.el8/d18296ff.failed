net/mlx5: E-Switch, Introduce global tables

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Paul Blakey <paulb@mellanox.com>
commit d18296ffd9ccde82c82c220263fca2e76d5258be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d18296ff.failed

Currently, flow tables are automatically connected according to their
<chain,prio,level> tuple.

Introduce global tables which are flow tables that are detached from the
eswitch chains processing, and will be connected by explicitly referencing
them from multiple chains.

Add this new table type, and allow connecting them by refenece.

	Signed-off-by: Paul Blakey <paulb@mellanox.com>
	Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d18296ffd9ccde82c82c220263fca2e76d5258be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_chains.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_chains.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index 9c629f913b96,dae0f3e5ada9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@@ -404,6 -420,9 +404,12 @@@ struct mlx5_esw_flow_attr 
  	u32	chain;
  	u16	prio;
  	u32	dest_chain;
++<<<<<<< HEAD
++=======
+ 	u32	flags;
+ 	struct mlx5_flow_table *fdb;
+ 	struct mlx5_flow_table *dest_ft;
++>>>>>>> d18296ffd9cc (net/mlx5: E-Switch, Introduce global tables)
  	struct mlx5e_tc_flow_parse_attr *parse_attr;
  };
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 1f7d3f1673cb,0c4bf69f6c47..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -173,10 -322,22 +173,27 @@@ mlx5_eswitch_add_offloaded_rule(struct 
  	}
  
  	if (flow_act.action & MLX5_FLOW_CONTEXT_ACTION_FWD_DEST) {
 -		struct mlx5_flow_table *ft;
 +		if (attr->dest_chain) {
 +			struct mlx5_flow_table *ft;
  
++<<<<<<< HEAD
 +			ft = esw_get_prio_table(esw, attr->dest_chain, 1, 0);
++=======
+ 		if (attr->dest_ft) {
+ 			flow_act.flags |= FLOW_ACT_IGNORE_FLOW_LEVEL;
+ 			dest[i].type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
+ 			dest[i].ft = attr->dest_ft;
+ 			i++;
+ 		} else if (attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH) {
+ 			flow_act.flags |= FLOW_ACT_IGNORE_FLOW_LEVEL;
+ 			dest[i].type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
+ 			dest[i].ft = mlx5_esw_chains_get_tc_end_ft(esw);
+ 			i++;
+ 		} else if (attr->dest_chain) {
+ 			flow_act.flags |= FLOW_ACT_IGNORE_FLOW_LEVEL;
+ 			ft = mlx5_esw_chains_get_table(esw, attr->dest_chain,
+ 						       1, 0);
++>>>>>>> d18296ffd9cc (net/mlx5: E-Switch, Introduce global tables)
  			if (IS_ERR(ft)) {
  				rule = ERR_CAST(ft);
  				goto err_create_goto_table;
@@@ -221,7 -380,16 +238,20 @@@
  	if (flow_act.action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
  		flow_act.modify_hdr = attr->modify_hdr;
  
++<<<<<<< HEAD
 +	fdb = esw_get_prio_table(esw, attr->chain, attr->prio, !!split);
++=======
+ 	if (split) {
+ 		fdb = esw_vport_tbl_get(esw, attr);
+ 	} else {
+ 		if (attr->chain || attr->prio)
+ 			fdb = mlx5_esw_chains_get_table(esw, attr->chain,
+ 							attr->prio, 0);
+ 		else
+ 			fdb = attr->fdb;
+ 		mlx5_eswitch_set_rule_source_port(esw, spec, attr);
+ 	}
++>>>>>>> d18296ffd9cc (net/mlx5: E-Switch, Introduce global tables)
  	if (IS_ERR(fdb)) {
  		rule = ERR_CAST(fdb);
  		goto err_esw_get;
@@@ -240,10 -408,13 +270,17 @@@
  	return rule;
  
  err_add_rule:
++<<<<<<< HEAD
 +	esw_put_prio_table(esw, attr->chain, attr->prio, !!split);
++=======
+ 	if (split)
+ 		esw_vport_tbl_put(esw, attr);
+ 	else if (attr->chain || attr->prio)
+ 		mlx5_esw_chains_put_table(esw, attr->chain, attr->prio, 0);
++>>>>>>> d18296ffd9cc (net/mlx5: E-Switch, Introduce global tables)
  err_esw_get:
 -	if (!(attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH) && attr->dest_chain)
 -		mlx5_esw_chains_put_table(esw, attr->dest_chain, 1, 0);
 +	if (attr->dest_chain)
 +		esw_put_prio_table(esw, attr->dest_chain, 1, 0);
  err_create_goto_table:
  	return rule;
  }
@@@ -330,12 -502,16 +367,20 @@@ __mlx5_eswitch_del_rule(struct mlx5_esw
  	atomic64_dec(&esw->offloads.num_flows);
  
  	if (fwd_rule)  {
 -		esw_vport_tbl_put(esw, attr);
 -		mlx5_esw_chains_put_table(esw, attr->chain, attr->prio, 0);
 +		esw_put_prio_table(esw, attr->chain, attr->prio, 1);
 +		esw_put_prio_table(esw, attr->chain, attr->prio, 0);
  	} else {
++<<<<<<< HEAD
 +		esw_put_prio_table(esw, attr->chain, attr->prio, !!split);
++=======
+ 		if (split)
+ 			esw_vport_tbl_put(esw, attr);
+ 		else if (attr->chain || attr->prio)
+ 			mlx5_esw_chains_put_table(esw, attr->chain, attr->prio,
+ 						  0);
++>>>>>>> d18296ffd9cc (net/mlx5: E-Switch, Introduce global tables)
  		if (attr->dest_chain)
 -			mlx5_esw_chains_put_table(esw, attr->dest_chain, 1, 0);
 +			esw_put_prio_table(esw, attr->dest_chain, 1, 0);
  	}
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_chains.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_chains.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_chains.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads_chains.h
