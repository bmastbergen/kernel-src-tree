PCI: Add pci_irq_vector() and other stubs when !CONFIG_PCI

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 0d8006ddbe89cbaedef06a8789ddefa1164a3a77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0d8006dd.failed

Add stub functions pci_alloc_irq_vectors_affinity() and pci_irq_vector()
when CONFIG_PCI is off so drivers can use them without resorting to ifdefs.

Also move the PCI_IRQ_* macros outside of the ifdefs so they are always
available.

Fixes: 625f269a5a7a ("crypto: inside-secure - add support for PCI based FPGA development board")
Link: https://lore.kernel.org/r/20190904122600.GA28660@gondor.apana.org.au
	Reported-by: kbuild test robot <lkp@intel.com>
	Reported-by: YueHaibing <yuehaibing@huawei.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 0d8006ddbe89cbaedef06a8789ddefa1164a3a77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index cceda893502d,23e4a6bcd08d..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -1777,8 -1767,49 +1769,54 @@@ static inline int pci_irqd_intx_xlate(s
  				      unsigned long *out_hwirq,
  				      unsigned int *out_type)
  { return -EINVAL; }
++<<<<<<< HEAD
 +#endif /* CONFIG_PCI */
 +
++=======
+ 
+ static inline const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,
+ 							 struct pci_dev *dev)
+ { return NULL; }
+ static inline bool pci_ats_disabled(void) { return true; }
+ 
+ static inline int pci_irq_vector(struct pci_dev *dev, unsigned int nr)
+ {
+ 	return -EINVAL;
+ }
+ 
+ static inline int
+ pci_alloc_irq_vectors_affinity(struct pci_dev *dev, unsigned int min_vecs,
+ 			       unsigned int max_vecs, unsigned int flags,
+ 			       struct irq_affinity *aff_desc)
+ {
+ 	return -ENOSPC;
+ }
+ #endif /* CONFIG_PCI */
+ 
+ static inline int
+ pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs,
+ 		      unsigned int max_vecs, unsigned int flags)
+ {
+ 	return pci_alloc_irq_vectors_affinity(dev, min_vecs, max_vecs, flags,
+ 					      NULL);
+ }
+ 
+ #ifdef CONFIG_PCI_ATS
+ /* Address Translation Service */
+ void pci_ats_init(struct pci_dev *dev);
+ int pci_enable_ats(struct pci_dev *dev, int ps);
+ void pci_disable_ats(struct pci_dev *dev);
+ int pci_ats_queue_depth(struct pci_dev *dev);
+ int pci_ats_page_aligned(struct pci_dev *dev);
+ #else
+ static inline void pci_ats_init(struct pci_dev *d) { }
+ static inline int pci_enable_ats(struct pci_dev *d, int ps) { return -ENODEV; }
+ static inline void pci_disable_ats(struct pci_dev *d) { }
+ static inline int pci_ats_queue_depth(struct pci_dev *d) { return -ENODEV; }
+ static inline int pci_ats_page_aligned(struct pci_dev *dev) { return 0; }
+ #endif
+ 
++>>>>>>> 0d8006ddbe89 (PCI: Add pci_irq_vector() and other stubs when !CONFIG_PCI)
  /* Include architecture-dependent settings and functions */
  
  #include <asm/pci.h>
* Unmerged path include/linux/pci.h
