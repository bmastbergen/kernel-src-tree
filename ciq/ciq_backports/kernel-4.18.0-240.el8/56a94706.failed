libperf: Add 'cpu' to struct perf_mmap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 56a94706cd7233b158ab13e5ac93f5a97ca88941
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/56a94706.failed

Move 'cpu' from tools/perf's mmap to libperf's perf_mmap struct.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-14-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 56a94706cd7233b158ab13e5ac93f5a97ca88941)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
diff --cc tools/perf/util/mmap.c
index 850493205040,dc8320891344..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -344,12 -347,12 +344,12 @@@ static void perf_mmap__setup_affinity_m
  {
  	CPU_ZERO(&map->affinity_mask);
  	if (mp->affinity == PERF_AFFINITY_NODE && cpu__max_node() > 1)
- 		build_node_mask(cpu__get_node(map->cpu), &map->affinity_mask);
+ 		build_node_mask(cpu__get_node(map->core.cpu), &map->affinity_mask);
  	else if (mp->affinity == PERF_AFFINITY_CPU)
- 		CPU_SET(map->cpu, &map->affinity_mask);
+ 		CPU_SET(map->core.cpu, &map->affinity_mask);
  }
  
 -int perf_mmap__mmap(struct mmap *map, struct mmap_params *mp, int fd, int cpu)
 +int perf_mmap__mmap(struct perf_mmap *map, struct mmap_params *mp, int fd, int cpu)
  {
  	/*
  	 * The last one will be done at perf_mmap__consume(), so that we
@@@ -366,17 -369,17 +366,22 @@@
  	 */
  	refcount_set(&map->refcnt, 2);
  	map->prev = 0;
 -	map->core.mask = mp->mask;
 -	map->core.base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
 +	map->mask = mp->mask;
 +	map->base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
  			 MAP_SHARED, fd, 0);
 -	if (map->core.base == MAP_FAILED) {
 +	if (map->base == MAP_FAILED) {
  		pr_debug2("failed to mmap perf event ring buffer, error %d\n",
  			  errno);
 -		map->core.base = NULL;
 +		map->base = NULL;
  		return -1;
  	}
++<<<<<<< HEAD
 +	map->fd = fd;
 +	map->cpu = cpu;
++=======
+ 	map->core.fd = fd;
+ 	map->core.cpu = cpu;
++>>>>>>> 56a94706cd72 (libperf: Add 'cpu' to struct perf_mmap)
  
  	perf_mmap__setup_affinity_mask(map, mp);
  
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,8ab779c98f4d..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -18,11 -20,8 +18,16 @@@ struct aiocb
   *
   * @refcnt - e.g. code using PERF_EVENT_IOC_SET_OUTPUT to share this
   */
++<<<<<<< HEAD
 +struct perf_mmap {
 +	void		 *base;
 +	int		 mask;
 +	int		 fd;
 +	int		 cpu;
++=======
+ struct mmap {
+ 	struct perf_mmap	core;
++>>>>>>> 56a94706cd72 (libperf: Add 'cpu' to struct perf_mmap)
  	refcount_t	 refcnt;
  	u64		 prev;
  	u64		 start;
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 9c3b43665909..fd4f68a44bc4 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -986,7 +986,7 @@ static struct perf_mmap *get_md(struct perf_evlist *evlist, int cpu)
 	for (i = 0; i < evlist->nr_mmaps; i++) {
 		struct perf_mmap *md = &evlist->mmap[i];
 
-		if (md->cpu == cpu)
+		if (md->core.cpu == cpu)
 			return md;
 	}
 
