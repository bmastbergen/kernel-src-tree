Abstract out support for locating an EFI config table

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Matthew Garrett <matthewgarrett@google.com>
commit 82d736ac56d7cd78696c5234853684bad05efadf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/82d736ac.failed

We want to grab a pointer to the TPM final events table, so abstract out
the existing code for finding an FDT table and make it generic.

	Signed-off-by: Matthew Garrett <mjg59@google.com>
	Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit 82d736ac56d7cd78696c5234853684bad05efadf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/efi/libstub/efistub.h
#	drivers/firmware/efi/libstub/fdt.c
diff --cc drivers/firmware/efi/libstub/efistub.h
index f59564b72ddc,7f1556fd867d..000000000000
--- a/drivers/firmware/efi/libstub/efistub.h
+++ b/drivers/firmware/efi/libstub/efistub.h
@@@ -67,4 -65,17 +67,20 @@@ efi_status_t check_platform_features(ef
  
  efi_status_t efi_random_get_seed(efi_system_table_t *sys_table_arg);
  
++<<<<<<< HEAD
++=======
+ void *get_efi_config_table(efi_system_table_t *sys_table, efi_guid_t guid);
+ 
+ /* Helper macros for the usual case of using simple C variables: */
+ #ifndef fdt_setprop_inplace_var
+ #define fdt_setprop_inplace_var(fdt, node_offset, name, var) \
+ 	fdt_setprop_inplace((fdt), (node_offset), (name), &(var), sizeof(var))
+ #endif
+ 
+ #ifndef fdt_setprop_var
+ #define fdt_setprop_var(fdt, node_offset, name, var) \
+ 	fdt_setprop((fdt), (node_offset), (name), &(var), sizeof(var))
+ #endif
+ 
++>>>>>>> 82d736ac56d7 (Abstract out support for locating an EFI config table)
  #endif
diff --cc drivers/firmware/efi/libstub/fdt.c
index 8830fa601e45,0bf0190917e0..000000000000
--- a/drivers/firmware/efi/libstub/fdt.c
+++ b/drivers/firmware/efi/libstub/fdt.c
@@@ -364,24 -363,17 +364,39 @@@ fail
  
  void *get_fdt(efi_system_table_t *sys_table, unsigned long *fdt_size)
  {
++<<<<<<< HEAD
 +	efi_guid_t fdt_guid = DEVICE_TREE_GUID;
 +	efi_config_table_t *tables;
 +	void *fdt;
 +	int i;
 +
 +	tables = (efi_config_table_t *) sys_table->tables;
 +	fdt = NULL;
 +
 +	for (i = 0; i < sys_table->nr_tables; i++)
 +		if (efi_guidcmp(tables[i].guid, fdt_guid) == 0) {
 +			fdt = (void *) tables[i].table;
 +			if (fdt_check_header(fdt) != 0) {
 +				pr_efi_err(sys_table, "Invalid header detected on UEFI supplied FDT, ignoring ...\n");
 +				return NULL;
 +			}
 +			*fdt_size = fdt_totalsize(fdt);
 +			break;
 +	 }
 +
++=======
+ 	void *fdt;
+ 
+ 	fdt = get_efi_config_table(sys_table, DEVICE_TREE_GUID);
+ 
+ 	if (!fdt)
+ 		return NULL;
+ 
+ 	if (fdt_check_header(fdt) != 0) {
+ 		pr_efi_err(sys_table, "Invalid header detected on UEFI supplied FDT, ignoring ...\n");
+ 		return NULL;
+ 	}
+ 	*fdt_size = fdt_totalsize(fdt);
++>>>>>>> 82d736ac56d7 (Abstract out support for locating an EFI config table)
  	return fdt;
  }
diff --git a/drivers/firmware/efi/libstub/efi-stub-helper.c b/drivers/firmware/efi/libstub/efi-stub-helper.c
index 2edf4a348084..8dc1b3918f5b 100644
--- a/drivers/firmware/efi/libstub/efi-stub-helper.c
+++ b/drivers/firmware/efi/libstub/efi-stub-helper.c
@@ -888,3 +888,18 @@ efi_status_t efi_exit_boot_services(efi_system_table_t *sys_table_arg,
 fail:
 	return status;
 }
+
+void *get_efi_config_table(efi_system_table_t *sys_table, efi_guid_t guid)
+{
+	efi_config_table_t *tables = (efi_config_table_t *)sys_table->tables;
+	int i;
+
+	for (i = 0; i < sys_table->nr_tables; i++) {
+		if (efi_guidcmp(tables[i].guid, guid) != 0)
+			continue;
+
+		return (void *)tables[i].table;
+	}
+
+	return NULL;
+}
* Unmerged path drivers/firmware/efi/libstub/efistub.h
* Unmerged path drivers/firmware/efi/libstub/fdt.c
