s390/gmap: return proper error code on ksm unsharing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christian Borntraeger <borntraeger@de.ibm.com>
commit 7a2653612bb6f18fb236c5b0c4d28f7b459bf7c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7a265361.failed

If a signal is pending we might return -ENOMEM instead of -EINTR.
We should propagate the proper error during KSM unsharing.
unmerge_ksm_pages returns -ERESTARTSYS on signal_pending. This gets
translated by entry.S to -EINTR. It is important to get this error
code so that userspace can retry.

To make this clearer we also add -EINTR to the documentation of the
PV_ENABLE call, which calls unmerge_ksm_pages.

Fixes: 3ac8e38015d4 ("s390/mm: disable KSM for storage key enabled pages")
	Reviewed-by: Janosch Frank <frankja@linux.vnet.ibm.com>
	Reported-by: Marc Hartmayer <mhartmay@linux.ibm.com>
	Tested-by: Marc Hartmayer <mhartmay@linux.ibm.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit 7a2653612bb6f18fb236c5b0c4d28f7b459bf7c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/virt/kvm/api.txt
#	arch/s390/mm/gmap.c
diff --cc Documentation/virt/kvm/api.txt
index 0fa33ec7673f,2edb28bd07a9..000000000000
--- a/Documentation/virt/kvm/api.txt
+++ b/Documentation/virt/kvm/api.txt
@@@ -4143,9 -4583,123 +4143,129 @@@ counters are controlled by the fixed_co
  
  No flags are defined yet, the field must be zero.
  
++<<<<<<< HEAD:Documentation/virt/kvm/api.txt
 +Valid values for 'action':
 +#define KVM_PMU_EVENT_ALLOW 0
 +#define KVM_PMU_EVENT_DENY 1
++=======
+ Valid values for 'action'::
+ 
+   #define KVM_PMU_EVENT_ALLOW 0
+   #define KVM_PMU_EVENT_DENY 1
+ 
+ 4.121 KVM_PPC_SVM_OFF
+ ---------------------
+ 
+ :Capability: basic
+ :Architectures: powerpc
+ :Type: vm ioctl
+ :Parameters: none
+ :Returns: 0 on successful completion,
+ 
+ Errors:
+ 
+   ======     ================================================================
+   EINVAL     if ultravisor failed to terminate the secure guest
+   ENOMEM     if hypervisor failed to allocate new radix page tables for guest
+   ======     ================================================================
+ 
+ This ioctl is used to turn off the secure mode of the guest or transition
+ the guest from secure mode to normal mode. This is invoked when the guest
+ is reset. This has no effect if called for a normal guest.
+ 
+ This ioctl issues an ultravisor call to terminate the secure guest,
+ unpins the VPA pages and releases all the device pages that are used to
+ track the secure pages by hypervisor.
+ 
+ 4.122 KVM_S390_NORMAL_RESET
+ 
+ Capability: KVM_CAP_S390_VCPU_RESETS
+ Architectures: s390
+ Type: vcpu ioctl
+ Parameters: none
+ Returns: 0
+ 
+ This ioctl resets VCPU registers and control structures according to
+ the cpu reset definition in the POP (Principles Of Operation).
+ 
+ 4.123 KVM_S390_INITIAL_RESET
+ 
+ Capability: none
+ Architectures: s390
+ Type: vcpu ioctl
+ Parameters: none
+ Returns: 0
+ 
+ This ioctl resets VCPU registers and control structures according to
+ the initial cpu reset definition in the POP. However, the cpu is not
+ put into ESA mode. This reset is a superset of the normal reset.
+ 
+ 4.124 KVM_S390_CLEAR_RESET
+ 
+ Capability: KVM_CAP_S390_VCPU_RESETS
+ Architectures: s390
+ Type: vcpu ioctl
+ Parameters: none
+ Returns: 0
+ 
+ This ioctl resets VCPU registers and control structures according to
+ the clear cpu reset definition in the POP. However, the cpu is not put
+ into ESA mode. This reset is a superset of the initial reset.
+ 
+ 
+ 4.125 KVM_S390_PV_COMMAND
+ -------------------------
+ 
+ :Capability: KVM_CAP_S390_PROTECTED
+ :Architectures: s390
+ :Type: vm ioctl
+ :Parameters: struct kvm_pv_cmd
+ :Returns: 0 on success, < 0 on error
+ 
+ ::
+ 
+   struct kvm_pv_cmd {
+ 	__u32 cmd;	/* Command to be executed */
+ 	__u16 rc;	/* Ultravisor return code */
+ 	__u16 rrc;	/* Ultravisor return reason code */
+ 	__u64 data;	/* Data or address */
+ 	__u32 flags;    /* flags for future extensions. Must be 0 for now */
+ 	__u32 reserved[3];
+   };
+ 
+ cmd values:
+ 
+ KVM_PV_ENABLE
+   Allocate memory and register the VM with the Ultravisor, thereby
+   donating memory to the Ultravisor that will become inaccessible to
+   KVM. All existing CPUs are converted to protected ones. After this
+   command has succeeded, any CPU added via hotplug will become
+   protected during its creation as well.
+ 
+   Errors:
+ 
+   =====      =============================
+   EINTR      an unmasked signal is pending
+   =====      =============================
+ 
+ KVM_PV_DISABLE
+ 
+   Deregister the VM from the Ultravisor and reclaim the memory that
+   had been donated to the Ultravisor, making it usable by the kernel
+   again.  All registered VCPUs are converted back to non-protected
+   ones.
+ 
+ KVM_PV_VM_SET_SEC_PARMS
+   Pass the image header from VM memory to the Ultravisor in
+   preparation of image unpacking and verification.
+ 
+ KVM_PV_VM_UNPACK
+   Unpack (protect and decrypt) a page of the encrypted boot image.
+ 
+ KVM_PV_VM_VERIFY
+   Verify the integrity of the unpacked image. Only if this succeeds,
+   KVM is allowed to start protected VCPUs.
++>>>>>>> 7a2653612bb6 (s390/gmap: return proper error code on ksm unsharing):Documentation/virt/kvm/api.rst
  
  
  5. The kvm_run structure
diff --cc arch/s390/mm/gmap.c
index 911c7ded35f1,2fbece47ef6f..000000000000
--- a/arch/s390/mm/gmap.c
+++ b/arch/s390/mm/gmap.c
@@@ -2546,6 -2548,23 +2546,26 @@@ int s390_enable_sie(void
  }
  EXPORT_SYMBOL_GPL(s390_enable_sie);
  
++<<<<<<< HEAD
++=======
+ int gmap_mark_unmergeable(void)
+ {
+ 	struct mm_struct *mm = current->mm;
+ 	struct vm_area_struct *vma;
+ 	int ret;
+ 
+ 	for (vma = mm->mmap; vma; vma = vma->vm_next) {
+ 		ret = ksm_madvise(vma, vma->vm_start, vma->vm_end,
+ 				  MADV_UNMERGEABLE, &vma->vm_flags);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 	mm->def_flags &= ~VM_MERGEABLE;
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(gmap_mark_unmergeable);
+ 
++>>>>>>> 7a2653612bb6 (s390/gmap: return proper error code on ksm unsharing)
  /*
   * Enable storage key handling from now on and initialize the storage
   * keys with the default key.
* Unmerged path Documentation/virt/kvm/api.txt
* Unmerged path arch/s390/mm/gmap.c
