drm/amdgpu: add TMR destory function for psp

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Huang Rui <ray.huang@amd.com>
commit 90937420c44f7535fd3ac4341a48c4c4dd1fe190
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/90937420.failed

TMR is required to be destoried with GFX_CMD_ID_DESTROY_TMR while the
system goes to suspend. Otherwise, PSP may return the failure state
(0xFFFF007) on Gfx-2-PSP command GFX_CMD_ID_SETUP_TMR after do multiple
times suspend/resume.

	Signed-off-by: Huang Rui <ray.huang@amd.com>
	Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit 90937420c44f7535fd3ac4341a48c4c4dd1fe190)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
diff --cc drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
index c027e5e7713e,23ebb50b1a19..000000000000
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
@@@ -290,9 -430,54 +290,60 @@@ failed
  	return ret;
  }
  
++<<<<<<< HEAD
 +static void psp_prep_asd_cmd_buf(struct psp_gfx_cmd_resp *cmd,
 +				 uint64_t asd_mc, uint64_t asd_mc_shared,
 +				 uint32_t size, uint32_t shared_size)
++=======
+ static void psp_prep_tmr_unload_cmd_buf(struct psp_context *psp,
+ 					struct psp_gfx_cmd_resp *cmd)
+ {
+ 	if (amdgpu_sriov_vf(psp->adev))
+ 		cmd->cmd_id = GFX_CMD_ID_DESTROY_VMR;
+ 	else
+ 		cmd->cmd_id = GFX_CMD_ID_DESTROY_TMR;
+ }
+ 
+ static int psp_tmr_unload(struct psp_context *psp)
+ {
+ 	int ret;
+ 	struct psp_gfx_cmd_resp *cmd;
+ 
+ 	cmd = kzalloc(sizeof(struct psp_gfx_cmd_resp), GFP_KERNEL);
+ 	if (!cmd)
+ 		return -ENOMEM;
+ 
+ 	psp_prep_tmr_unload_cmd_buf(psp, cmd);
+ 	DRM_INFO("free PSP TMR buffer\n");
+ 
+ 	ret = psp_cmd_submit_buf(psp, NULL, cmd,
+ 				 psp->fence_buf_mc_addr);
+ 
+ 	kfree(cmd);
+ 
+ 	return ret;
+ }
+ 
+ static int psp_tmr_terminate(struct psp_context *psp)
+ {
+ 	int ret;
+ 	void *tmr_buf;
+ 	void **pptr;
+ 
+ 	ret = psp_tmr_unload(psp);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* free TMR memory buffer */
+ 	pptr = amdgpu_sriov_vf(psp->adev) ? &tmr_buf : NULL;
+ 	amdgpu_bo_free_kernel(&psp->tmr_bo, &psp->tmr_mc_addr, pptr);
+ 
+ 	return 0;
+ }
+ 
+ static void psp_prep_asd_load_cmd_buf(struct psp_gfx_cmd_resp *cmd,
+ 				uint64_t asd_mc, uint32_t size)
++>>>>>>> 90937420c44f (drm/amdgpu: add TMR destory function for psp)
  {
  	cmd->cmd_id = GFX_CMD_ID_LOAD_ASD;
  	cmd->cmd.cmd_load_ta.app_phy_addr_lo = lower_32_bits(asd_mc);
@@@ -1115,17 -1912,24 +1166,25 @@@ static int psp_hw_fini(void *handle
  {
  	struct amdgpu_device *adev = (struct amdgpu_device *)handle;
  	struct psp_context *psp = &adev->psp;
++<<<<<<< HEAD
++=======
+ 	int ret;
++>>>>>>> 90937420c44f (drm/amdgpu: add TMR destory function for psp)
  
 -	if (psp->adev->psp.ta_fw) {
 -		psp_ras_terminate(psp);
 -		psp_dtm_terminate(psp);
 -		psp_hdcp_terminate(psp);
 -	}
 +	if (adev->gmc.xgmi.num_physical_nodes > 1 &&
 +	    psp->xgmi_context.initialized == 1)
 +                psp_xgmi_terminate(psp);
  
 -	psp_asd_unload(psp);
 -	ret = psp_clear_vf_fw(psp);
 -	if (ret) {
 -		DRM_ERROR("PSP clear vf fw!\n");
 -		return ret;
 -	}
 +	if (psp->adev->psp.ta_fw)
 +		psp_ras_terminate(psp);
  
+ 	psp_tmr_terminate(psp);
  	psp_ring_destroy(psp, PSP_RING_TYPE__KM);
  
++<<<<<<< HEAD
 +	amdgpu_bo_free_kernel(&psp->tmr_bo, &psp->tmr_mc_addr, &psp->tmr_buf);
++=======
++>>>>>>> 90937420c44f (drm/amdgpu: add TMR destory function for psp)
  	amdgpu_bo_free_kernel(&psp->fw_pri_bo,
  			      &psp->fw_pri_mc_addr, &psp->fw_pri_buf);
  	amdgpu_bo_free_kernel(&psp->fence_buf_bo,
@@@ -1162,8 -1964,30 +1221,14 @@@ static int psp_suspend(void *handle
  			DRM_ERROR("Failed to terminate ras ta\n");
  			return ret;
  		}
 -		ret = psp_hdcp_terminate(psp);
 -		if (ret) {
 -			DRM_ERROR("Failed to terminate hdcp ta\n");
 -			return ret;
 -		}
 -		ret = psp_dtm_terminate(psp);
 -		if (ret) {
 -			DRM_ERROR("Failed to terminate dtm ta\n");
 -			return ret;
 -		}
 -	}
 -
 -	ret = psp_asd_unload(psp);
 -	if (ret) {
 -		DRM_ERROR("Failed to unload asd\n");
 -		return ret;
  	}
  
+ 	ret = psp_tmr_terminate(psp);
+ 	if (ret) {
+ 		DRM_ERROR("Falied to terminate tmr\n");
+ 		return ret;
+ 	}
+ 
  	ret = psp_ring_stop(psp, PSP_RING_TYPE__KM);
  	if (ret) {
  		DRM_ERROR("PSP ring stop failed\n");
* Unmerged path drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c
