io_uring: break links for failed defer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit d3b35796b1e3f118017491d621f624e0de7ff9fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d3b35796.failed

If io_req_defer() failed, it needs to cancel a dependant link.

	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit d3b35796b1e3f118017491d621f624e0de7ff9fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 79a564f6a100,c1226f609e18..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -2212,21 -2954,19 +2212,28 @@@ static int io_queue_sqe(struct io_ring_
  {
  	int ret;
  
 -	ret = io_req_defer(req);
 +	ret = io_req_defer(ctx, req, s->sqe);
  	if (ret) {
  		if (ret != -EIOCBQUEUED) {
++<<<<<<< HEAD
 +			io_free_req(req);
 +			io_cqring_add_event(ctx, s->sqe->user_data, ret);
++=======
+ 			io_cqring_add_event(req, ret);
+ 			if (req->flags & REQ_F_LINK)
+ 				req->flags |= REQ_F_FAIL_LINK;
+ 			io_double_put_req(req);
++>>>>>>> d3b35796b1e3 (io_uring: break links for failed defer)
  		}
 -	} else
 -		__io_queue_sqe(req);
 +		return 0;
 +	}
 +
 +	return __io_queue_sqe(ctx, req, s, force_nonblock);
  }
  
 -static void io_queue_link_head(struct io_kiocb *req, struct io_kiocb *shadow)
 +static int io_queue_link_head(struct io_ring_ctx *ctx, struct io_kiocb *req,
 +			      struct sqe_submit *s, struct io_kiocb *shadow,
 +			      bool force_nonblock)
  {
  	int ret;
  	int need_submit = false;
@@@ -2240,13 -2987,17 +2247,24 @@@
  	 * list.
  	 */
  	req->flags |= REQ_F_IO_DRAIN;
 -	ret = io_req_defer(req);
 +	ret = io_req_defer(ctx, req, s->sqe);
  	if (ret) {
  		if (ret != -EIOCBQUEUED) {
++<<<<<<< HEAD
 +			io_free_req(req);
 +			__io_free_req(shadow);
 +			io_cqring_add_event(ctx, s->sqe->user_data, ret);
 +			return 0;
++=======
+ err:
+ 			io_cqring_add_event(req, ret);
+ 			if (req->flags & REQ_F_LINK)
+ 				req->flags |= REQ_F_FAIL_LINK;
+ 			io_double_put_req(req);
+ 			if (shadow)
+ 				__io_free_req(shadow);
+ 			return;
++>>>>>>> d3b35796b1e3 (io_uring: break links for failed defer)
  		}
  	} else {
  		/*
* Unmerged path fs/io_uring.c
