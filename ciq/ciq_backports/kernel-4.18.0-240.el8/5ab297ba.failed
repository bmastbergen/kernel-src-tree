sched/fair: Fix reordering of enqueue/dequeue_task_fair()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Vincent Guittot <vincent.guittot@linaro.org>
commit 5ab297bab984310267734dfbcc8104566658ebef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5ab297ba.failed

Even when a cgroup is throttled, the group se of a child cgroup can still
be enqueued and its gse->on_rq stays true. When a task is enqueued on such
child, we still have to update the load_avg and increase
h_nr_running of the throttled cfs. Nevertheless, the 1st
for_each_sched_entity() loop is skipped because of gse->on_rq == true and the
2nd loop because the cfs is throttled whereas we have to update both
load_avg with the old h_nr_running and increase h_nr_running in such case.

The same sequence can happen during dequeue when se moves to parent before
breaking in the 1st loop.

Note that the update of load_avg will effectively happen only once in order
to sync up to the throttled time. Next call for updating load_avg will stop
early because the clock stays unchanged.

	Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Fixes: 6d4d22468dae ("sched/fair: Reorder enqueue/dequeue_task_fair path")
Link: https://lkml.kernel.org/r/20200306084208.12583-1-vincent.guittot@linaro.org
(cherry picked from commit 5ab297bab984310267734dfbcc8104566658ebef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 0b55f8f47ff7,1dea8554ead0..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -5212,15 -5459,20 +5212,28 @@@ enqueue_task_fair(struct rq *rq, struc
  
  	for_each_sched_entity(se) {
  		cfs_rq = cfs_rq_of(se);
 +		cfs_rq->h_nr_running++;
  
++<<<<<<< HEAD
 +		if (cfs_rq_throttled(cfs_rq))
 +			break;
 +
++=======
++>>>>>>> 5ab297bab984 (sched/fair: Fix reordering of enqueue/dequeue_task_fair())
  		update_load_avg(cfs_rq, se, UPDATE_TG);
 -		se_update_runnable(se);
  		update_cfs_group(se);
++<<<<<<< HEAD
++=======
+ 
+ 		cfs_rq->h_nr_running++;
+ 		cfs_rq->idle_h_nr_running += idle_h_nr_running;
+ 
+ 		/* end evaluation on encountering a throttled cfs_rq */
+ 		if (cfs_rq_throttled(cfs_rq))
+ 			goto enqueue_throttle;
++>>>>>>> 5ab297bab984 (sched/fair: Fix reordering of enqueue/dequeue_task_fair())
  	}
  
 -enqueue_throttle:
  	if (!se) {
  		add_nr_running(rq, 1);
  		/*
@@@ -5306,15 -5557,21 +5319,29 @@@ static void dequeue_task_fair(struct r
  
  	for_each_sched_entity(se) {
  		cfs_rq = cfs_rq_of(se);
 +		cfs_rq->h_nr_running--;
 +
++<<<<<<< HEAD
 +		if (cfs_rq_throttled(cfs_rq))
 +			break;
  
++=======
++>>>>>>> 5ab297bab984 (sched/fair: Fix reordering of enqueue/dequeue_task_fair())
  		update_load_avg(cfs_rq, se, UPDATE_TG);
 -		se_update_runnable(se);
  		update_cfs_group(se);
++<<<<<<< HEAD
++=======
+ 
+ 		cfs_rq->h_nr_running--;
+ 		cfs_rq->idle_h_nr_running -= idle_h_nr_running;
+ 
+ 		/* end evaluation on encountering a throttled cfs_rq */
+ 		if (cfs_rq_throttled(cfs_rq))
+ 			goto dequeue_throttle;
+ 
++>>>>>>> 5ab297bab984 (sched/fair: Fix reordering of enqueue/dequeue_task_fair())
  	}
  
 -dequeue_throttle:
  	if (!se)
  		sub_nr_running(rq, 1);
  
* Unmerged path kernel/sched/fair.c
