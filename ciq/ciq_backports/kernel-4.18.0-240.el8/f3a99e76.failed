x86/Hyper-V: Report crash data in die() when panic_on_oops is set

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [x86] hyper-v: Report crash data in die() when panic_on_oops is set (Mohammed Gamal) [1828451 1815498]
Rebuild_FUZZ: 96.83%
commit-author Tianyu Lan <Tianyu.Lan@microsoft.com>
commit f3a99e761efa616028b255b4de58e9b5b87c5545
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f3a99e76.failed

When oops happens with panic_on_oops unset, the oops
thread is killed by die() and system continues to run.
In such case, guest should not report crash register
data to host since system still runs. Check panic_on_oops
and return directly in hyperv_report_panic() when the function
is called in the die() and panic_on_oops is unset. Fix it.

Fixes: 7ed4325a44ea ("Drivers: hv: vmbus: Make panic reporting to be more useful")
	Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
Link: https://lore.kernel.org/r/20200406155331.2105-7-Tianyu.Lan@microsoft.com
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
(cherry picked from commit f3a99e761efa616028b255b4de58e9b5b87c5545)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/vmbus_drv.c
diff --cc drivers/hv/vmbus_drv.c
index 12bce1b87223,a68bce4d0ddb..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -43,6 -31,9 +43,12 @@@
  #include <linux/kdebug.h>
  #include <linux/efi.h>
  #include <linux/random.h>
++<<<<<<< HEAD
++=======
+ #include <linux/kernel.h>
+ #include <linux/syscore_ops.h>
+ #include <clocksource/hyperv_timer.h>
++>>>>>>> f3a99e761efa (x86/Hyper-V: Report crash data in die() when panic_on_oops is set)
  #include "hyperv_vmbus.h"
  
  struct vmbus_dynid {
@@@ -63,9 -66,18 +69,22 @@@ static int hyperv_panic_event(struct no
  {
  	struct pt_regs *regs;
  
 -	vmbus_initiate_unload(true);
 +	regs = current_pt_regs();
  
++<<<<<<< HEAD
 +	hyperv_report_panic(regs, val);
++=======
+ 	/*
+ 	 * Hyper-V should be notified only once about a panic.  If we will be
+ 	 * doing hyperv_report_panic_msg() later with kmsg data, don't do
+ 	 * the notification here.
+ 	 */
+ 	if (ms_hyperv.misc_features & HV_FEATURE_GUEST_CRASH_MSR_AVAILABLE
+ 	    && hyperv_report_reg()) {
+ 		regs = current_pt_regs();
+ 		hyperv_report_panic(regs, val, false);
+ 	}
++>>>>>>> f3a99e761efa (x86/Hyper-V: Report crash data in die() when panic_on_oops is set)
  	return NOTIFY_DONE;
  }
  
@@@ -75,7 -87,13 +94,17 @@@ static int hyperv_die_event(struct noti
  	struct die_args *die = (struct die_args *)args;
  	struct pt_regs *regs = die->regs;
  
++<<<<<<< HEAD
 +	hyperv_report_panic(regs, val);
++=======
+ 	/*
+ 	 * Hyper-V should be notified only once about a panic.  If we will be
+ 	 * doing hyperv_report_panic_msg() later with kmsg data, don't do
+ 	 * the notification here.
+ 	 */
+ 	if (hyperv_report_reg())
+ 		hyperv_report_panic(regs, val, true);
++>>>>>>> f3a99e761efa (x86/Hyper-V: Report crash data in die() when panic_on_oops is set)
  	return NOTIFY_DONE;
  }
  
diff --git a/arch/x86/hyperv/hv_init.c b/arch/x86/hyperv/hv_init.c
index 346ed6001be8..d893105c05ba 100644
--- a/arch/x86/hyperv/hv_init.c
+++ b/arch/x86/hyperv/hv_init.c
@@ -31,6 +31,7 @@
 #include <linux/clockchips.h>
 #include <linux/hyperv.h>
 #include <linux/slab.h>
+#include <linux/kernel.h>
 #include <linux/cpuhotplug.h>
 
 #ifdef CONFIG_HYPERV_TSCPAGE
@@ -460,11 +461,14 @@ void hyperv_cleanup(void)
 }
 EXPORT_SYMBOL_GPL(hyperv_cleanup);
 
-void hyperv_report_panic(struct pt_regs *regs, long err)
+void hyperv_report_panic(struct pt_regs *regs, long err, bool in_die)
 {
 	static bool panic_reported;
 	u64 guest_id;
 
+	if (in_die && !panic_on_oops)
+		return;
+
 	/*
 	 * We prefer to report panic on 'die' chain as we have proper
 	 * registers to report, but if we miss it (e.g. on BUG()) we need
* Unmerged path drivers/hv/vmbus_drv.c
diff --git a/include/asm-generic/mshyperv.h b/include/asm-generic/mshyperv.h
index 1cb40016ee53..c5edc5e08b94 100644
--- a/include/asm-generic/mshyperv.h
+++ b/include/asm-generic/mshyperv.h
@@ -163,7 +163,7 @@ static inline int cpumask_to_vpset(struct hv_vpset *vpset,
 	return nr_bank;
 }
 
-void hyperv_report_panic(struct pt_regs *regs, long err);
+void hyperv_report_panic(struct pt_regs *regs, long err, bool in_die);
 void hyperv_report_panic_msg(phys_addr_t pa, size_t size);
 bool hv_is_hyperv_initialized(void);
 bool hv_is_hibernation_supported(void);
