KVM: x86/mmu: Zap any compound page when collapsing sptes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit d32ec81bab670e599e645e1d1d5231d62de7d0d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d32ec81b.failed

Zap any compound page, e.g. THP or HugeTLB pages, when zapping sptes
that can potentially be converted to huge sptes after disabling dirty
logging on the associated memslot.  Note, this approach could result in
false positives, e.g. if a random compound page is mapped into the
guest, but mapping non-huge compound pages into the guest is far from
the norm, and toggling dirty logging is not a frequent operation.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit d32ec81bab670e599e645e1d1d5231d62de7d0d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu/mmu.c
diff --cc arch/x86/kvm/mmu/mmu.c
index f41b4d90aa8d,9090842ccd10..000000000000
--- a/arch/x86/kvm/mmu/mmu.c
+++ b/arch/x86/kvm/mmu/mmu.c
@@@ -5963,7 -5951,7 +5963,11 @@@ restart
  		 */
  		if (sp->role.direct && !kvm_is_reserved_pfn(pfn) &&
  		    !kvm_is_zone_device_pfn(pfn) &&
++<<<<<<< HEAD
 +		    PageTransCompoundMap(pfn_to_page(pfn))) {
++=======
+ 		    PageCompound(pfn_to_page(pfn))) {
++>>>>>>> d32ec81bab67 (KVM: x86/mmu: Zap any compound page when collapsing sptes)
  			pte_list_remove(rmap_head, sptep);
  
  			if (kvm_available_flush_tlb_with_range())
* Unmerged path arch/x86/kvm/mmu/mmu.c
