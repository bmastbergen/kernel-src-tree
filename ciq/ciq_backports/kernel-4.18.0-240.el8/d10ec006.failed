perf hists browser: Allow passing an initial hotkey

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit d10ec006dcd7b20b2eb7e9ef32fc6f83b0112893
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d10ec006.failed

Sometimes we're in an outer code, like the main hists browser popup menu
and the user follows a suggestion about using some hotkey, and that
hotkey is really handled by hists_browser__run(), so allow for calling
it with that hotkey, making it handle it instead of waiting for the user
to press one.

	Reviewed-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-xv2l7i6o4urn37nv1h40ryfs@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d10ec006dcd7b20b2eb7e9ef32fc6f83b0112893)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/browsers/hists.c
diff --cc tools/perf/ui/browsers/hists.c
index d19476d5f2b0,ac118aef5ed1..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -3518,3 -3534,75 +3523,78 @@@ single_entry
  					       warn_lost_event,
  					       annotation_opts);
  }
++<<<<<<< HEAD
++=======
+ 
+ static int block_hists_browser__title(struct hist_browser *browser, char *bf,
+ 				      size_t size)
+ {
+ 	struct hists *hists = evsel__hists(browser->block_evsel);
+ 	const char *evname = perf_evsel__name(browser->block_evsel);
+ 	unsigned long nr_samples = hists->stats.nr_events[PERF_RECORD_SAMPLE];
+ 	int ret;
+ 
+ 	ret = scnprintf(bf, size, "# Samples: %lu", nr_samples);
+ 	if (evname)
+ 		scnprintf(bf + ret, size -  ret, " of event '%s'", evname);
+ 
+ 	return 0;
+ }
+ 
+ int block_hists_tui_browse(struct block_hist *bh, struct evsel *evsel,
+ 			   float min_percent, struct perf_env *env,
+ 			   struct annotation_options *annotation_opts)
+ {
+ 	struct hists *hists = &bh->block_hists;
+ 	struct hist_browser *browser;
+ 	int key = -1;
+ 	struct popup_action action;
+ 	static const char help[] =
+ 	" q             Quit \n";
+ 
+ 	browser = hist_browser__new(hists);
+ 	if (!browser)
+ 		return -1;
+ 
+ 	browser->block_evsel = evsel;
+ 	browser->title = block_hists_browser__title;
+ 	browser->min_pcnt = min_percent;
+ 	browser->env = env;
+ 	browser->annotation_opts = annotation_opts;
+ 
+ 	/* reset abort key so that it can get Ctrl-C as a key */
+ 	SLang_reset_tty();
+ 	SLang_init_tty(0, 0, 0);
+ 
+ 	memset(&action, 0, sizeof(action));
+ 
+ 	while (1) {
+ 		key = hist_browser__run(browser, "? - help", true, 0);
+ 
+ 		switch (key) {
+ 		case 'q':
+ 			goto out;
+ 		case '?':
+ 			ui_browser__help_window(&browser->b, help);
+ 			break;
+ 		case 'a':
+ 		case K_ENTER:
+ 			if (!browser->selection ||
+ 			    !browser->selection->sym) {
+ 				continue;
+ 			}
+ 
+ 			action.ms.map = browser->selection->map;
+ 			action.ms.sym = browser->selection->sym;
+ 			do_annotate(browser, &action);
+ 			continue;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ 
+ out:
+ 	hist_browser__delete(browser);
+ 	return 0;
+ }
++>>>>>>> d10ec006dcd7 (perf hists browser: Allow passing an initial hotkey)
diff --git a/tools/perf/builtin-c2c.c b/tools/perf/builtin-c2c.c
index 320332a4246d..97160336a486 100644
--- a/tools/perf/builtin-c2c.c
+++ b/tools/perf/builtin-c2c.c
@@ -2380,7 +2380,7 @@ static int perf_c2c__browse_cacheline(struct hist_entry *he)
 	c2c_browser__update_nr_entries(browser);
 
 	while (1) {
-		key = hist_browser__run(browser, "? - help", true);
+		key = hist_browser__run(browser, "? - help", true, 0);
 
 		switch (key) {
 		case 's':
@@ -2449,7 +2449,7 @@ static int perf_c2c__hists_browse(struct hists *hists)
 	c2c_browser__update_nr_entries(browser);
 
 	while (1) {
-		key = hist_browser__run(browser, "? - help", true);
+		key = hist_browser__run(browser, "? - help", true, 0);
 
 		switch (key) {
 		case 'q':
* Unmerged path tools/perf/ui/browsers/hists.c
diff --git a/tools/perf/ui/browsers/hists.h b/tools/perf/ui/browsers/hists.h
index 91d3e18b50aa..fba59179bebd 100644
--- a/tools/perf/ui/browsers/hists.h
+++ b/tools/perf/ui/browsers/hists.h
@@ -32,7 +32,7 @@ struct hist_browser {
 struct hist_browser *hist_browser__new(struct hists *hists);
 void hist_browser__delete(struct hist_browser *browser);
 int hist_browser__run(struct hist_browser *browser, const char *help,
-		      bool warn_lost_event);
+		      bool warn_lost_event, int key);
 void hist_browser__init(struct hist_browser *browser,
 			struct hists *hists);
 #endif /* _PERF_UI_BROWSER_HISTS_H_ */
