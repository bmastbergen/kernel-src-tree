net: phylink: Add phylink_{printk, err, warn, info, dbg} macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ioana Ciornei <ioana.ciornei@nxp.com>
commit 17091180b1521ee9b4455d75ab61b35bc0b216ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/17091180.failed

With the latest addition to the PHYLINK infrastructure, we are faced
with a decision on when to print necessary info using the struct
net_device and when with the struct device.

Add a series of macros that encapsulate this decision and replace all
uses of netdev_err&co with phylink_err.

	Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
	Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 17091180b1521ee9b4455d75ab61b35bc0b216ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phylink.c
diff --cc drivers/net/phy/phylink.c
index f51febdb1dc6,68d0a89c52be..000000000000
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@@ -295,16 -310,16 +312,16 @@@ static int phylink_parse_mode(struct ph
  static void phylink_mac_config(struct phylink *pl,
  			       const struct phylink_link_state *state)
  {
- 	netdev_dbg(pl->netdev,
- 		   "%s: mode=%s/%s/%s/%s adv=%*pb pause=%02x link=%u an=%u\n",
- 		   __func__, phylink_an_mode_str(pl->link_an_mode),
- 		   phy_modes(state->interface),
- 		   phy_speed_to_str(state->speed),
- 		   phy_duplex_to_str(state->duplex),
- 		   __ETHTOOL_LINK_MODE_MASK_NBITS, state->advertising,
- 		   state->pause, state->link, state->an_enabled);
+ 	phylink_dbg(pl,
+ 		    "%s: mode=%s/%s/%s/%s adv=%*pb pause=%02x link=%u an=%u\n",
+ 		    __func__, phylink_an_mode_str(pl->link_an_mode),
+ 		    phy_modes(state->interface),
+ 		    phy_speed_to_str(state->speed),
+ 		    phy_duplex_to_str(state->duplex),
+ 		    __ETHTOOL_LINK_MODE_MASK_NBITS, state->advertising,
+ 		    state->pause, state->link, state->an_enabled);
  
 -	pl->ops->mac_config(pl->config, pl->link_an_mode, state);
 +	pl->ops->mac_config(pl->netdev, pl->link_an_mode, state);
  }
  
  static void phylink_mac_config_up(struct phylink *pl,
@@@ -400,6 -414,36 +417,39 @@@ static const char *phylink_pause_to_str
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void phylink_mac_link_up(struct phylink *pl,
+ 				struct phylink_link_state link_state)
+ {
+ 	struct net_device *ndev = pl->netdev;
+ 
+ 	pl->ops->mac_link_up(pl->config, pl->link_an_mode,
+ 			     pl->phy_state.interface,
+ 			     pl->phydev);
+ 
+ 	if (ndev)
+ 		netif_carrier_on(ndev);
+ 
+ 	phylink_info(pl,
+ 		     "Link is Up - %s/%s - flow control %s\n",
+ 		     phy_speed_to_str(link_state.speed),
+ 		     phy_duplex_to_str(link_state.duplex),
+ 		     phylink_pause_to_str(link_state.pause));
+ }
+ 
+ static void phylink_mac_link_down(struct phylink *pl)
+ {
+ 	struct net_device *ndev = pl->netdev;
+ 
+ 	if (ndev)
+ 		netif_carrier_off(ndev);
+ 	pl->ops->mac_link_down(pl->config, pl->link_an_mode,
+ 			       pl->phy_state.interface);
+ 	phylink_info(pl, "Link is Down\n");
+ }
+ 
++>>>>>>> 17091180b152 (net: phylink: Add phylink_{printk, err, warn, info, dbg} macros)
  static void phylink_resolve(struct work_struct *w)
  {
  	struct phylink *pl = container_of(w, struct phylink, resolve);
@@@ -896,12 -935,13 +946,12 @@@ void phylink_start(struct phylink *pl
  {
  	ASSERT_RTNL();
  
- 	netdev_info(pl->netdev, "configuring for %s/%s link mode\n",
- 		    phylink_an_mode_str(pl->link_an_mode),
- 		    phy_modes(pl->link_config.interface));
+ 	phylink_info(pl, "configuring for %s/%s link mode\n",
+ 		     phylink_an_mode_str(pl->link_an_mode),
+ 		     phy_modes(pl->link_config.interface));
  
  	/* Always set the carrier off */
 -	if (pl->netdev)
 -		netif_carrier_off(pl->netdev);
 +	netif_carrier_off(pl->netdev);
  
  	/* Apply the link configuration to the MAC when starting. This allows
  	 * a fixed-link to start with the correct parameters, and also
@@@ -1643,23 -1653,21 +1693,23 @@@ static int phylink_sfp_module_insert(vo
  		return ret;
  	}
  
 +	linkmode_copy(support1, support);
 +
  	iface = sfp_select_interface(pl->sfp_bus, id, config.advertising);
  	if (iface == PHY_INTERFACE_MODE_NA) {
- 		netdev_err(pl->netdev,
- 			   "selection of interface failed, advertisement %*pb\n",
- 			   __ETHTOOL_LINK_MODE_MASK_NBITS, config.advertising);
+ 		phylink_err(pl,
+ 			    "selection of interface failed, advertisement %*pb\n",
+ 			    __ETHTOOL_LINK_MODE_MASK_NBITS, config.advertising);
  		return -EINVAL;
  	}
  
  	config.interface = iface;
 -	ret = phylink_validate(pl, support, &config);
 +	ret = phylink_validate(pl, support1, &config);
  	if (ret) {
- 		netdev_err(pl->netdev, "validation of %s/%s with support %*pb failed: %d\n",
- 			   phylink_an_mode_str(MLO_AN_INBAND),
- 			   phy_modes(config.interface),
- 			   __ETHTOOL_LINK_MODE_MASK_NBITS, support, ret);
+ 		phylink_err(pl, "validation of %s/%s with support %*pb failed: %d\n",
+ 			    phylink_an_mode_str(MLO_AN_INBAND),
+ 			    phy_modes(config.interface),
+ 			    __ETHTOOL_LINK_MODE_MASK_NBITS, support, ret);
  		return ret;
  	}
  
* Unmerged path drivers/net/phy/phylink.c
