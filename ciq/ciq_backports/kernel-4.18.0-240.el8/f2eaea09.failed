perf map_symbol: Rename ms->mg to ms->maps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit f2eaea09d684177f57db55a9ce2b67d048083fd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f2eaea09.failed

One more step on the merge of 'struct maps' with 'struct map_groups'.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-61rra2wg392rhvdgw421wzpt@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f2eaea09d684177f57db55a9ce2b67d048083fd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/s390/annotate/instructions.c
#	tools/perf/ui/browsers/annotate.c
#	tools/perf/util/annotate.c
#	tools/perf/util/callchain.c
#	tools/perf/util/hist.c
#	tools/perf/util/machine.c
#	tools/perf/util/map_symbol.h
#	tools/perf/util/unwind-libdw.c
#	tools/perf/util/unwind-libunwind-local.c
diff --cc tools/perf/arch/s390/annotate/instructions.c
index 20050fb54948,0e136630659e..000000000000
--- a/tools/perf/arch/s390/annotate/instructions.c
+++ b/tools/perf/arch/s390/annotate/instructions.c
@@@ -38,9 -38,9 +38,15 @@@ static int s390_call__parse(struct arc
  		return -1;
  	target.addr = map__objdump_2mem(map, ops->target.addr);
  
++<<<<<<< HEAD
 +	if (map_groups__find_ams(map->groups, &target) == 0 &&
 +	    map__rip_2objdump(target.map, map->map_ip(target.map, target.addr)) == ops->target.addr)
 +		ops->target.sym = target.sym;
++=======
+ 	if (maps__find_ams(ms->maps, &target) == 0 &&
+ 	    map__rip_2objdump(target.ms.map, map->map_ip(target.ms.map, target.addr)) == ops->target.addr)
+ 		ops->target.sym = target.ms.sym;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  
  	return 0;
  }
diff --cc tools/perf/ui/browsers/annotate.c
index e67880bf1efe,badbddbb30f8..000000000000
--- a/tools/perf/ui/browsers/annotate.c
+++ b/tools/perf/ui/browsers/annotate.c
@@@ -429,8 -430,11 +429,14 @@@ static bool annotate_browser__callq(str
  		return true;
  	}
  
++<<<<<<< HEAD
++=======
+ 	target_ms.maps = ms->maps;
+ 	target_ms.map = ms->map;
+ 	target_ms.sym = dl->ops.target.sym;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	pthread_mutex_unlock(&notes->lock);
 -	symbol__tui_annotate(&target_ms, evsel, hbt, browser->opts);
 +	symbol__tui_annotate(dl->ops.target.sym, ms->map, evsel, hbt, browser->opts);
  	sym_title(ms->sym, ms->map, title, sizeof(title), browser->opts->percent_type);
  	ui_browser__show_title(&browser->b, title);
  	return true;
diff --cc tools/perf/util/annotate.c
index e5850bb6616c,14f3edc3c261..000000000000
--- a/tools/perf/util/annotate.c
+++ b/tools/perf/util/annotate.c
@@@ -269,9 -271,9 +269,15 @@@ static int call__parse(struct arch *arc
  find_target:
  	target.addr = map__objdump_2mem(map, ops->target.addr);
  
++<<<<<<< HEAD
 +	if (map_groups__find_ams(map->groups, &target) == 0 &&
 +	    map__rip_2objdump(target.map, map->map_ip(target.map, target.addr)) == ops->target.addr)
 +		ops->target.sym = target.sym;
++=======
+ 	if (maps__find_ams(ms->maps, &target) == 0 &&
+ 	    map__rip_2objdump(target.ms.map, map->map_ip(target.ms.map, target.addr)) == ops->target.addr)
+ 		ops->target.sym = target.ms.sym;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  
  	return 0;
  
@@@ -389,9 -391,9 +395,15 @@@ static int jump__parse(struct arch *arc
  	 * Actual navigation will come next, with further understanding of how
  	 * the symbol searching and disassembly should be done.
  	 */
++<<<<<<< HEAD
 +	if (map_groups__find_ams(map->groups, &target) == 0 &&
 +	    map__rip_2objdump(target.map, map->map_ip(target.map, target.addr)) == ops->target.addr)
 +		ops->target.sym = target.sym;
++=======
+ 	if (maps__find_ams(ms->maps, &target) == 0 &&
+ 	    map__rip_2objdump(target.ms.map, map->map_ip(target.ms.map, target.addr)) == ops->target.addr)
+ 		ops->target.sym = target.ms.sym;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  
  	if (!ops->target.outside) {
  		ops->target.offset = target.addr - start;
@@@ -1538,13 -1541,13 +1550,19 @@@ static int symbol__parse_objdump_line(s
  	/* kcore has no symbols, so add the call target symbol */
  	if (dl->ins.ops && ins__is_call(&dl->ins) && !dl->ops.target.sym) {
  		struct addr_map_symbol target = {
 +			.map = map,
  			.addr = dl->ops.target.addr,
 -			.ms = { .map = map, },
  		};
  
++<<<<<<< HEAD
 +		if (!map_groups__find_ams(map->groups, &target) &&
 +		    target.sym->start == target.al_addr)
 +			dl->ops.target.sym = target.sym;
++=======
+ 		if (!maps__find_ams(args->ms.maps, &target) &&
+ 		    target.ms.sym->start == target.al_addr)
+ 			dl->ops.target.sym = target.ms.sym;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	}
  
  	annotation_line__add(&dl->al, &notes->src->source);
diff --cc tools/perf/util/callchain.c
index ca37b95d0f91,818aa4efd386..000000000000
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@@ -1102,6 -1106,7 +1102,10 @@@ int hist_entry__append_callchain(struc
  int fill_callchain_info(struct addr_location *al, struct callchain_cursor_node *node,
  			bool hide_unresolved)
  {
++<<<<<<< HEAD
++=======
+ 	al->maps = node->ms.maps;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	al->map = node->ms.map;
  	al->sym = node->ms.sym;
  	al->srcline = node->srcline;
diff --cc tools/perf/util/hist.c
index e487bb0ce346,ca5a8f4d007e..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -684,6 -692,7 +684,10 @@@ __hists__add_entry(struct hists *hists
  			.ino = ns ? ns->link_info[CGROUP_NS_INDEX].ino : 0,
  		},
  		.ms = {
++<<<<<<< HEAD
++=======
+ 			.maps	= al->maps,
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  			.map	= al->map,
  			.sym	= al->sym,
  		},
@@@ -750,6 -759,11 +754,14 @@@ struct hist_entry *hists__add_entry_blo
  	struct hist_entry entry = {
  		.block_info = block_info,
  		.hists = hists,
++<<<<<<< HEAD
++=======
+ 		.ms = {
+ 			.maps = al->maps,
+ 			.map = al->map,
+ 			.sym = al->sym,
+ 		},
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	}, *he = hists__findnew_entry(hists, &entry, al, false);
  
  	return he;
@@@ -881,8 -895,9 +893,14 @@@ iter_next_branch_entry(struct hist_entr
  	if (iter->curr >= iter->total)
  		return 0;
  
++<<<<<<< HEAD
 +	al->map = bi[i].to.map;
 +	al->sym = bi[i].to.sym;
++=======
+ 	al->maps = bi[i].to.ms.maps;
+ 	al->map = bi[i].to.ms.map;
+ 	al->sym = bi[i].to.ms.sym;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	al->addr = bi[i].to.addr;
  	return 1;
  }
@@@ -1057,6 -1072,7 +1075,10 @@@ iter_add_next_cumulative_entry(struct h
  		.comm = thread__comm(al->thread),
  		.ip = al->addr,
  		.ms = {
++<<<<<<< HEAD
++=======
+ 			.maps = al->maps,
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  			.map = al->map,
  			.sym = al->sym,
  		},
diff --cc tools/perf/util/machine.c
index 97b56c40a5df,c1ae5e6f84e2..000000000000
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@@ -1931,8 -1934,9 +1931,14 @@@ static void ip__resolve_ams(struct thre
  
  	ams->addr = ip;
  	ams->al_addr = al.addr;
++<<<<<<< HEAD
 +	ams->sym = al.sym;
 +	ams->map = al.map;
++=======
+ 	ams->ms.maps = al.maps;
+ 	ams->ms.sym = al.sym;
+ 	ams->ms.map = al.map;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	ams->phys_addr = 0;
  }
  
@@@ -1948,8 -1952,9 +1954,14 @@@ static void ip__resolve_data(struct thr
  
  	ams->addr = addr;
  	ams->al_addr = al.addr;
++<<<<<<< HEAD
 +	ams->sym = al.sym;
 +	ams->map = al.map;
++=======
+ 	ams->ms.maps = al.maps;
+ 	ams->ms.sym = al.sym;
+ 	ams->ms.map = al.map;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	ams->phys_addr = phys_addr;
  }
  
@@@ -2064,6 -2069,7 +2076,10 @@@ static int add_callchain_ip(struct thre
  		iter_cycles = iter->cycles;
  	}
  
++<<<<<<< HEAD
++=======
+ 	ms.maps = al.maps;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	ms.map = al.map;
  	ms.sym = al.sym;
  	srcline = callchain_srcline(&ms, al.addr);
diff --cc tools/perf/util/map_symbol.h
index 5a1aed9f6bb4,5b8ca93798e9..000000000000
--- a/tools/perf/util/map_symbol.h
+++ b/tools/perf/util/map_symbol.h
@@@ -8,6 -9,7 +8,10 @@@ struct map
  struct symbol;
  
  struct map_symbol {
++<<<<<<< HEAD
++=======
+ 	struct maps   *maps;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	struct map    *map;
  	struct symbol *sym;
  };
diff --cc tools/perf/util/unwind-libdw.c
index c1679f08d22f,7a3dbc259cec..000000000000
--- a/tools/perf/util/unwind-libdw.c
+++ b/tools/perf/util/unwind-libdw.c
@@@ -81,6 -81,7 +81,10 @@@ static int entry(u64 ip, struct unwind_
  		return -1;
  
  	e->ip	  = ip;
++<<<<<<< HEAD
++=======
+ 	e->ms.maps = al.maps;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  	e->ms.map = al.map;
  	e->ms.sym = al.sym;
  
diff --cc tools/perf/util/unwind-libunwind-local.c
index aaf7a445c595,515131e85e9c..000000000000
--- a/tools/perf/util/unwind-libunwind-local.c
+++ b/tools/perf/util/unwind-libunwind-local.c
@@@ -579,6 -578,7 +579,10 @@@ static int entry(u64 ip, struct thread 
  	e.ms.sym = thread__find_symbol(thread, PERF_RECORD_MISC_USER, ip, &al);
  	e.ip     = ip;
  	e.ms.map = al.map;
++<<<<<<< HEAD
++=======
+ 	e.ms.maps = al.maps;
++>>>>>>> f2eaea09d684 (perf map_symbol: Rename ms->mg to ms->maps)
  
  	pr_debug("unwind: %s:ip = 0x%" PRIx64 " (0x%" PRIx64 ")\n",
  		 al.sym ? al.sym->name : "''",
* Unmerged path tools/perf/arch/s390/annotate/instructions.c
* Unmerged path tools/perf/ui/browsers/annotate.c
* Unmerged path tools/perf/util/annotate.c
* Unmerged path tools/perf/util/callchain.c
* Unmerged path tools/perf/util/hist.c
* Unmerged path tools/perf/util/machine.c
* Unmerged path tools/perf/util/map_symbol.h
* Unmerged path tools/perf/util/unwind-libdw.c
* Unmerged path tools/perf/util/unwind-libunwind-local.c
