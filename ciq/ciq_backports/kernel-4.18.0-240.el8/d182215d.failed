Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alex Lu <alex_lu@realsil.com.cn>
commit d182215d2fb9e58a7637efc937fa11dc15cf7a84
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d182215d.failed

the rtl: or RTL: prefix in the string is pointless. The rtl_dev_* macros
already does that.

	Signed-off-by: Alex Lu <alex_lu@realsil.com.cn>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit d182215d2fb9e58a7637efc937fa11dc15cf7a84)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btrtl.c
diff --cc drivers/bluetooth/btrtl.c
index 437f080deaab,20aeed3c1ee7..000000000000
--- a/drivers/bluetooth/btrtl.c
+++ b/drivers/bluetooth/btrtl.c
@@@ -103,7 -213,7 +103,11 @@@ static int rtl_read_rom_version(struct 
  	}
  
  	if (skb->len != sizeof(*rom_version)) {
++<<<<<<< HEAD
 +		BT_ERR("%s: RTL version event length mismatch", hdev->name);
++=======
+ 		rtl_dev_err(hdev, "version event length mismatch\n");
++>>>>>>> d182215d2fb9 (Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros)
  		kfree_skb(skb);
  		return -EIO;
  	}
@@@ -329,7 -451,7 +333,11 @@@ static int rtl_load_config(struct hci_d
  	const struct firmware *fw;
  	int ret;
  
++<<<<<<< HEAD
 +	bt_dev_info(hdev, "rtl: loading %s", name);
++=======
+ 	rtl_dev_info(hdev, "loading %s\n", name);
++>>>>>>> d182215d2fb9 (Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros)
  	ret = request_firmware(&fw, name, &hdev->dev);
  	if (ret < 0)
  		return ret;
@@@ -460,65 -519,124 +468,142 @@@ err_req_fw
  	return ret;
  }
  
 -void btrtl_free(struct btrtl_device_info *btrtl_dev)
 +static struct sk_buff *btrtl_read_local_version(struct hci_dev *hdev)
  {
 -	kfree(btrtl_dev->fw_data);
 -	kfree(btrtl_dev->cfg_data);
 -	kfree(btrtl_dev);
 +	struct sk_buff *skb;
 +
 +	skb = __hci_cmd_sync(hdev, HCI_OP_READ_LOCAL_VERSION, 0, NULL,
 +			     HCI_INIT_TIMEOUT);
 +	if (IS_ERR(skb)) {
 +		BT_ERR("%s: HCI_OP_READ_LOCAL_VERSION failed (%ld)",
 +		       hdev->name, PTR_ERR(skb));
 +		return skb;
 +	}
 +
 +	if (skb->len != sizeof(struct hci_rp_read_local_version)) {
 +		BT_ERR("%s: HCI_OP_READ_LOCAL_VERSION event length mismatch",
 +		       hdev->name);
 +		kfree_skb(skb);
 +		return ERR_PTR(-EIO);
 +	}
 +
 +	return skb;
  }
 -EXPORT_SYMBOL_GPL(btrtl_free);
  
 -struct btrtl_device_info *btrtl_initialize(struct hci_dev *hdev,
 -					   const char *postfix)
 +int btrtl_setup_realtek(struct hci_dev *hdev)
  {
 -	struct btrtl_device_info *btrtl_dev;
  	struct sk_buff *skb;
  	struct hci_rp_read_local_version *resp;
 -	char cfg_name[40];
  	u16 hci_rev, lmp_subver;
 -	u8 hci_ver;
 -	int ret;
 -
 -	btrtl_dev = kzalloc(sizeof(*btrtl_dev), GFP_KERNEL);
 -	if (!btrtl_dev) {
 -		ret = -ENOMEM;
 -		goto err_alloc;
 -	}
  
  	skb = btrtl_read_local_version(hdev);
 -	if (IS_ERR(skb)) {
 -		ret = PTR_ERR(skb);
 -		goto err_free;
 -	}
 +	if (IS_ERR(skb))
 +		return -PTR_ERR(skb);
  
  	resp = (struct hci_rp_read_local_version *)skb->data;
++<<<<<<< HEAD
 +	bt_dev_info(hdev, "rtl: examining hci_ver=%02x hci_rev=%04x "
 +		    "lmp_ver=%02x lmp_subver=%04x",
 +		    resp->hci_ver, resp->hci_rev,
 +		    resp->lmp_ver, resp->lmp_subver);
++=======
+ 	rtl_dev_info(hdev, "examining hci_ver=%02x hci_rev=%04x lmp_ver=%02x lmp_subver=%04x\n",
+ 		     resp->hci_ver, resp->hci_rev,
+ 		     resp->lmp_ver, resp->lmp_subver);
++>>>>>>> d182215d2fb9 (Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros)
  
 -	hci_ver = resp->hci_ver;
  	hci_rev = le16_to_cpu(resp->hci_rev);
  	lmp_subver = le16_to_cpu(resp->lmp_subver);
  	kfree_skb(skb);
  
++<<<<<<< HEAD
++=======
+ 	btrtl_dev->ic_info = btrtl_match_ic(lmp_subver, hci_rev, hci_ver,
+ 					    hdev->bus);
+ 
+ 	if (!btrtl_dev->ic_info) {
+ 		rtl_dev_info(hdev, "unknown IC info, lmp subver %04x, hci rev %04x, hci ver %04x",
+ 			    lmp_subver, hci_rev, hci_ver);
+ 		return btrtl_dev;
+ 	}
+ 
+ 	if (btrtl_dev->ic_info->has_rom_version) {
+ 		ret = rtl_read_rom_version(hdev, &btrtl_dev->rom_version);
+ 		if (ret)
+ 			goto err_free;
+ 	}
+ 
+ 	btrtl_dev->fw_len = rtl_load_file(hdev, btrtl_dev->ic_info->fw_name,
+ 					  &btrtl_dev->fw_data);
+ 	if (btrtl_dev->fw_len < 0) {
+ 		rtl_dev_err(hdev, "firmware file %s not found\n",
+ 			    btrtl_dev->ic_info->fw_name);
+ 		ret = btrtl_dev->fw_len;
+ 		goto err_free;
+ 	}
+ 
+ 	if (btrtl_dev->ic_info->cfg_name) {
+ 		if (postfix) {
+ 			snprintf(cfg_name, sizeof(cfg_name), "%s-%s.bin",
+ 				 btrtl_dev->ic_info->cfg_name, postfix);
+ 		} else {
+ 			snprintf(cfg_name, sizeof(cfg_name), "%s.bin",
+ 				 btrtl_dev->ic_info->cfg_name);
+ 		}
+ 		btrtl_dev->cfg_len = rtl_load_file(hdev, cfg_name,
+ 						   &btrtl_dev->cfg_data);
+ 		if (btrtl_dev->ic_info->config_needed &&
+ 		    btrtl_dev->cfg_len <= 0) {
+ 			rtl_dev_err(hdev, "mandatory config file %s not found\n",
+ 				    btrtl_dev->ic_info->cfg_name);
+ 			ret = btrtl_dev->cfg_len;
+ 			goto err_free;
+ 		}
+ 	}
+ 
+ 	return btrtl_dev;
+ 
+ err_free:
+ 	btrtl_free(btrtl_dev);
+ err_alloc:
+ 	return ERR_PTR(ret);
+ }
+ EXPORT_SYMBOL_GPL(btrtl_initialize);
+ 
+ int btrtl_download_firmware(struct hci_dev *hdev,
+ 			    struct btrtl_device_info *btrtl_dev)
+ {
++>>>>>>> d182215d2fb9 (Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros)
  	/* Match a set of subver values that correspond to stock firmware,
  	 * which is not compatible with standard btusb.
  	 * If matched, upload an alternative firmware that does conform to
  	 * standard btusb. Once that firmware is uploaded, the subver changes
  	 * to a different value.
  	 */
++<<<<<<< HEAD
 +	switch (lmp_subver) {
++=======
+ 	if (!btrtl_dev->ic_info) {
+ 		rtl_dev_info(hdev, "assuming no firmware upload needed\n");
+ 		return 0;
+ 	}
+ 
+ 	switch (btrtl_dev->ic_info->lmp_subver) {
++>>>>>>> d182215d2fb9 (Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros)
  	case RTL_ROM_LMP_8723A:
  	case RTL_ROM_LMP_3499:
 -		return btrtl_setup_rtl8723a(hdev, btrtl_dev);
 +		return btrtl_setup_rtl8723a(hdev);
  	case RTL_ROM_LMP_8723B:
  	case RTL_ROM_LMP_8821A:
  	case RTL_ROM_LMP_8761A:
  	case RTL_ROM_LMP_8822B:
 -		return btrtl_setup_rtl8723b(hdev, btrtl_dev);
 +		return btrtl_setup_rtl8723b(hdev, hci_rev, lmp_subver);
  	default:
++<<<<<<< HEAD
 +		bt_dev_info(hdev, "rtl: assuming no firmware upload needed");
++=======
+ 		rtl_dev_info(hdev, "assuming no firmware upload needed\n");
++>>>>>>> d182215d2fb9 (Bluetooth: btrtl: Remove redundant prefix from calls to rtl_dev macros)
  		return 0;
  	}
  }
* Unmerged path drivers/bluetooth/btrtl.c
