net/mlx5e: Reduce number of arguments in slow path handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Eli Cohen <eli@mellanox.com>
commit 178f69b4776ea5e6c1dc1240d447d9c76e32c839
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/178f69b4.failed

mlx5e_tc_offload_to_slow_path() and mlx5e_tc_unoffload_from_slow_path()
take an extra argument allocated on the stack of the caller but not used
by the caller. Avoid the extra argument and use local variable in the
function itself.

	Signed-off-by: Eli Cohen <eli@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 178f69b4776ea5e6c1dc1240d447d9c76e32c839)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 3a708d1db4f9,333c3ec59b17..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -1074,17 -1076,17 +1074,24 @@@ mlx5e_tc_unoffload_fdb_rules(struct mlx
  static struct mlx5_flow_handle *
  mlx5e_tc_offload_to_slow_path(struct mlx5_eswitch *esw,
  			      struct mlx5e_tc_flow *flow,
- 			      struct mlx5_flow_spec *spec,
- 			      struct mlx5_esw_flow_attr *slow_attr)
+ 			      struct mlx5_flow_spec *spec)
  {
+ 	struct mlx5_esw_flow_attr slow_attr;
  	struct mlx5_flow_handle *rule;
  
++<<<<<<< HEAD
 +	memcpy(slow_attr, flow->esw_attr, sizeof(*slow_attr));
 +	slow_attr->action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 +	slow_attr->split_count = 0;
 +	slow_attr->dest_chain = FDB_SLOW_PATH_CHAIN;
- 
- 	rule = mlx5e_tc_offload_fdb_rules(esw, flow, spec, slow_attr);
++=======
+ 	memcpy(&slow_attr, flow->esw_attr, sizeof(slow_attr));
+ 	slow_attr.action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
+ 	slow_attr.split_count = 0;
+ 	slow_attr.flags |= MLX5_ESW_ATTR_FLAG_SLOW_PATH;
++>>>>>>> 178f69b4776e (net/mlx5e: Reduce number of arguments in slow path handling)
+ 
+ 	rule = mlx5e_tc_offload_fdb_rules(esw, flow, spec, &slow_attr);
  	if (!IS_ERR(rule))
  		flow_flag_set(flow, SLOW);
  
@@@ -1093,14 -1095,15 +1100,23 @@@
  
  static void
  mlx5e_tc_unoffload_from_slow_path(struct mlx5_eswitch *esw,
- 				  struct mlx5e_tc_flow *flow,
- 				  struct mlx5_esw_flow_attr *slow_attr)
+ 				  struct mlx5e_tc_flow *flow)
  {
++<<<<<<< HEAD
 +	memcpy(slow_attr, flow->esw_attr, sizeof(*slow_attr));
 +	slow_attr->action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 +	slow_attr->split_count = 0;
 +	slow_attr->dest_chain = FDB_SLOW_PATH_CHAIN;
 +	mlx5e_tc_unoffload_fdb_rules(esw, flow, slow_attr);
++=======
+ 	struct mlx5_esw_flow_attr slow_attr;
+ 
+ 	memcpy(&slow_attr, flow->esw_attr, sizeof(slow_attr));
+ 	slow_attr.action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
+ 	slow_attr.split_count = 0;
+ 	slow_attr.flags |= MLX5_ESW_ATTR_FLAG_SLOW_PATH;
+ 	mlx5e_tc_unoffload_fdb_rules(esw, flow, &slow_attr);
++>>>>>>> 178f69b4776e (net/mlx5e: Reduce number of arguments in slow path handling)
  	flow_flag_clear(flow, SLOW);
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
