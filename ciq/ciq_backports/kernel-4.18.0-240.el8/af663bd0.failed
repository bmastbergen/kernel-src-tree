libperf: Add threads to struct perf_evsel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit af663bd01beaff8d9514199fcc1b239902a77de5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/af663bd0.failed

Move 'threads' from tools/perf's evsel to libperf's perf_evsel struct.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-53-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit af663bd01beaff8d9514199fcc1b239902a77de5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
#	tools/perf/builtin-script.c
#	tools/perf/lib/include/internal/evsel.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/scripting-engines/trace-event-python.c
#	tools/perf/util/stat-display.c
diff --cc tools/perf/builtin-record.c
index 6dccaf4058f3,27ff899bed88..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -740,7 -739,7 +740,11 @@@ static int record__open(struct record *
  
  	evlist__for_each_entry(evlist, pos) {
  try_again:
++<<<<<<< HEAD
 +		if (perf_evsel__open(pos, pos->cpus, pos->threads) < 0) {
++=======
+ 		if (evsel__open(pos, pos->core.cpus, pos->core.threads) < 0) {
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  			if (perf_evsel__fallback(pos, errno, msg, sizeof(msg))) {
  				if (verbose > 0)
  					ui__warning("%s\n", msg);
diff --cc tools/perf/builtin-script.c
index 381a10d3337c,a787c5cb1331..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -1898,9 -1897,9 +1898,9 @@@ static void process_event(struct perf_s
  
  static struct scripting_ops	*scripting_ops;
  
 -static void __process_stat(struct evsel *counter, u64 tstamp)
 +static void __process_stat(struct perf_evsel *counter, u64 tstamp)
  {
- 	int nthreads = thread_map__nr(counter->threads);
+ 	int nthreads = thread_map__nr(counter->core.threads);
  	int ncpus = perf_evsel__nr_cpus(counter);
  	int cpu, thread;
  	static int header_printed;
@@@ -1921,8 -1920,8 +1921,13 @@@
  			counts = perf_counts(counter->counts, cpu, thread);
  
  			printf("%3d %8d %15" PRIu64 " %15" PRIu64 " %15" PRIu64 " %15" PRIu64 " %s\n",
++<<<<<<< HEAD
 +				counter->cpus->map[cpu],
 +				thread_map__pid(counter->threads, thread),
++=======
+ 				counter->core.cpus->map[cpu],
+ 				thread_map__pid(counter->core.threads, thread),
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  				counts->val,
  				counts->ena,
  				counts->run,
diff --cc tools/perf/util/evlist.c
index 4739b7914374,5ce8fc730453..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -158,21 -159,21 +158,26 @@@ static void __perf_evlist__propagate_ma
  	 * We already have cpus for evsel (via PMU sysfs) so
  	 * keep it, if there's no target cpu list defined.
  	 */
 -	if (!evsel->core.own_cpus || evlist->has_user_cpus) {
 -		perf_cpu_map__put(evsel->core.cpus);
 -		evsel->core.cpus = perf_cpu_map__get(evlist->cpus);
 -	} else if (evsel->core.cpus != evsel->core.own_cpus) {
 -		perf_cpu_map__put(evsel->core.cpus);
 -		evsel->core.cpus = perf_cpu_map__get(evsel->core.own_cpus);
 -	}
 -
 +	if (!evsel->own_cpus || evlist->has_user_cpus) {
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evlist->cpus);
 +	} else if (evsel->cpus != evsel->own_cpus) {
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evsel->own_cpus);
 +	}
 +
++<<<<<<< HEAD
 +	thread_map__put(evsel->threads);
 +	evsel->threads = thread_map__get(evlist->threads);
++=======
+ 	perf_thread_map__put(evsel->core.threads);
+ 	evsel->core.threads = perf_thread_map__get(evlist->threads);
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  }
  
 -static void perf_evlist__propagate_maps(struct evlist *evlist)
 +static void perf_evlist__propagate_maps(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evlist__propagate_maps(evlist, evsel);
@@@ -1406,7 -1407,7 +1411,11 @@@ int perf_evlist__open(struct perf_evlis
  	perf_evlist__update_id_pos(evlist);
  
  	evlist__for_each_entry(evlist, evsel) {
++<<<<<<< HEAD
 +		err = perf_evsel__open(evsel, evsel->cpus, evsel->threads);
++=======
+ 		err = evsel__open(evsel, evsel->core.cpus, evsel->core.threads);
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  		if (err < 0)
  			goto out_err;
  	}
diff --cc tools/perf/util/evsel.c
index e99257f738ba,f7758ce0dd5c..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1326,9 -1325,9 +1326,15 @@@ void perf_evsel__exit(struct perf_evse
  	perf_evsel__free_id(evsel);
  	perf_evsel__free_config_terms(evsel);
  	cgroup__put(evsel->cgrp);
++<<<<<<< HEAD
 +	cpu_map__put(evsel->cpus);
 +	cpu_map__put(evsel->own_cpus);
 +	thread_map__put(evsel->threads);
++=======
+ 	perf_cpu_map__put(evsel->core.cpus);
+ 	perf_cpu_map__put(evsel->core.own_cpus);
+ 	perf_thread_map__put(evsel->core.threads);
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  	zfree(&evsel->group_name);
  	zfree(&evsel->name);
  	perf_evsel__object.fini(evsel);
@@@ -3063,10 -3062,10 +3069,15 @@@ static int store_evsel_ids(struct perf_
  	return 0;
  }
  
 -int perf_evsel__store_ids(struct evsel *evsel, struct evlist *evlist)
 +int perf_evsel__store_ids(struct perf_evsel *evsel, struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct cpu_map *cpus = evsel->cpus;
 +	struct thread_map *threads = evsel->threads;
++=======
+ 	struct perf_cpu_map *cpus = evsel->core.cpus;
+ 	struct perf_thread_map *threads = evsel->core.threads;
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  
  	if (perf_evsel__alloc_id(evsel, cpus->nr, threads->nr))
  		return -ENOMEM;
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,57b5523b480c..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -124,9 -123,6 +124,12 @@@ struct perf_evsel 
  	u64			db_id;
  	struct cgroup		*cgrp;
  	void			*handler;
++<<<<<<< HEAD
 +	struct cpu_map		*cpus;
 +	struct cpu_map		*own_cpus;
 +	struct thread_map	*threads;
++=======
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  	unsigned int		sample_size;
  	int			id_pos;
  	int			is_pos;
diff --cc tools/perf/util/scripting-engines/trace-event-python.c
index 25dc1d765553,32c17a727450..000000000000
--- a/tools/perf/util/scripting-engines/trace-event-python.c
+++ b/tools/perf/util/scripting-engines/trace-event-python.c
@@@ -1390,10 -1390,10 +1390,15 @@@ process_stat(struct perf_evsel *counter
  }
  
  static void python_process_stat(struct perf_stat_config *config,
 -				struct evsel *counter, u64 tstamp)
 +				struct perf_evsel *counter, u64 tstamp)
  {
++<<<<<<< HEAD
 +	struct thread_map *threads = counter->threads;
 +	struct cpu_map *cpus = counter->cpus;
++=======
+ 	struct perf_thread_map *threads = counter->core.threads;
+ 	struct perf_cpu_map *cpus = counter->core.cpus;
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  	int cpu, thread;
  
  	if (config->aggr_mode == AGGR_GLOBAL) {
diff --cc tools/perf/util/stat-display.c
index 58df6a0dbb9f,7c938135398b..000000000000
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@@ -116,9 -116,9 +116,13 @@@ static void aggr_printout(struct perf_s
  	case AGGR_THREAD:
  		fprintf(config->output, "%*s-%*d%s",
  			config->csv_output ? 0 : 16,
++<<<<<<< HEAD
 +			thread_map__comm(evsel->threads, id),
++=======
+ 			perf_thread_map__comm(evsel->core.threads, id),
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  			config->csv_output ? 0 : -8,
- 			thread_map__pid(evsel->threads, id),
+ 			thread_map__pid(evsel->core.threads, id),
  			config->csv_sep);
  		break;
  	case AGGR_GLOBAL:
@@@ -741,11 -741,11 +745,16 @@@ static struct perf_aggr_thread_value *s
  
  static void print_aggr_thread(struct perf_stat_config *config,
  			      struct target *_target,
 -			      struct evsel *counter, char *prefix)
 +			      struct perf_evsel *counter, char *prefix)
  {
  	FILE *output = config->output;
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(counter->threads);
 +	int ncpus = cpu_map__nr(counter->cpus);
++=======
+ 	int nthreads = thread_map__nr(counter->core.threads);
+ 	int ncpus = cpu_map__nr(counter->core.cpus);
++>>>>>>> af663bd01bea (libperf: Add threads to struct perf_evsel)
  	int thread, sorted_threads, id;
  	struct perf_aggr_thread_value *buf;
  
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/builtin-record.c
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/scripting-engines/trace-event-python.c
* Unmerged path tools/perf/util/stat-display.c
diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c
index da269d46c09f..65d5f4f711f9 100644
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@ -158,7 +158,7 @@ static void perf_evsel__free_prev_raw_counts(struct perf_evsel *evsel)
 static int perf_evsel__alloc_stats(struct perf_evsel *evsel, bool alloc_raw)
 {
 	int ncpus = perf_evsel__nr_cpus(evsel);
-	int nthreads = thread_map__nr(evsel->threads);
+	int nthreads = thread_map__nr(evsel->core.threads);
 
 	if (perf_evsel__alloc_stat_priv(evsel) < 0 ||
 	    perf_evsel__alloc_counts(evsel, ncpus, nthreads) < 0 ||
@@ -308,7 +308,7 @@ process_counter_values(struct perf_stat_config *config, struct perf_evsel *evsel
 static int process_counter_maps(struct perf_stat_config *config,
 				struct perf_evsel *counter)
 {
-	int nthreads = thread_map__nr(counter->threads);
+	int nthreads = thread_map__nr(counter->core.threads);
 	int ncpus = perf_evsel__nr_cpus(counter);
 	int cpu, thread;
 
@@ -485,7 +485,7 @@ int create_perf_stat_counter(struct perf_evsel *evsel,
 	if (target__has_cpu(target) && !target__has_per_thread(target))
 		return perf_evsel__open_per_cpu(evsel, perf_evsel__cpus(evsel));
 
-	return perf_evsel__open_per_thread(evsel, evsel->threads);
+	return perf_evsel__open_per_thread(evsel, evsel->core.threads);
 }
 
 int perf_stat_synthesize_config(struct perf_stat_config *config,
