drm/i915: Flatten intel_dp_check_mst_status() a bit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 3c0ec2c2d5948356a22c8f1c08a8087b12a303e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3c0ec2c2.failed

Make intel_dp_check_mst_status() somewhat legible by humans.

Note that the return value of drm_dp_mst_hpd_irq() is always
either 0 or -ENOMEM, and we never did anything with the latter
so we can just ignore the whole thing.

We can also get rid of the direct drm_dp_mst_topology_mgr_set_mst(false)
call since returning -EINVAL causes the caller to do the very same call
for us.

	Cc: Lyude Paul <lyude@redhat.com>
	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200417152734.464-1-ville.syrjala@linux.intel.com
	Reviewed-by: Lyude Paul <lyude@redhat.com>
(cherry picked from commit 3c0ec2c2d5948356a22c8f1c08a8087b12a303e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dp.c
diff --cc drivers/gpu/drm/i915/display/intel_dp.c
index 9ec0808f141e,ca2193c6f7f1..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dp.c
+++ b/drivers/gpu/drm/i915/display/intel_dp.c
@@@ -4720,58 -5624,56 +4720,102 @@@ update_status
  static int
  intel_dp_check_mst_status(struct intel_dp *intel_dp)
  {
++<<<<<<< HEAD
 +	bool bret;
++=======
+ 	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
++>>>>>>> 3c0ec2c2d594 (drm/i915: Flatten intel_dp_check_mst_status() a bit)
+ 
+ 	if (!intel_dp->is_mst)
+ 		return -EINVAL;
  
- 	if (intel_dp->is_mst) {
- 		u8 esi[DP_DPRX_ESI_LEN] = { 0 };
- 		int ret = 0;
+ 	WARN_ON_ONCE(intel_dp->active_mst_links < 0);
+ 
+ 	for (;;) {
+ 		u8 esi[DP_DPRX_ESI_LEN] = {};
+ 		bool bret, handled;
  		int retry;
- 		bool handled;
  
- 		WARN_ON_ONCE(intel_dp->active_mst_links < 0);
  		bret = intel_dp_get_sink_irq_esi(intel_dp, esi);
++<<<<<<< HEAD
 +go_again:
 +		if (bret == true) {
 +
 +			/* check link status - esi[10] = 0x200c */
 +			if (intel_dp->active_mst_links > 0 &&
 +			    !drm_dp_channel_eq_ok(&esi[10], intel_dp->lane_count)) {
 +				DRM_DEBUG_KMS("channel EQ not ok, retraining\n");
 +				intel_dp_start_link_train(intel_dp);
 +				intel_dp_stop_link_train(intel_dp);
 +			}
 +
 +			DRM_DEBUG_KMS("got esi %3ph\n", esi);
 +			ret = drm_dp_mst_hpd_irq(&intel_dp->mst_mgr, esi, &handled);
 +
 +			if (handled) {
 +				for (retry = 0; retry < 3; retry++) {
 +					int wret;
 +					wret = drm_dp_dpcd_write(&intel_dp->aux,
 +								 DP_SINK_COUNT_ESI+1,
 +								 &esi[1], 3);
 +					if (wret == 3) {
 +						break;
 +					}
 +				}
 +
 +				bret = intel_dp_get_sink_irq_esi(intel_dp, esi);
 +				if (bret == true) {
 +					DRM_DEBUG_KMS("got esi2 %3ph\n", esi);
 +					goto go_again;
 +				}
 +			} else
 +				ret = 0;
 +
 +			return ret;
 +		} else {
 +			DRM_DEBUG_KMS("failed to get ESI - device may have failed\n");
 +			intel_dp->is_mst = false;
 +			drm_dp_mst_topology_mgr_set_mst(&intel_dp->mst_mgr,
 +							intel_dp->is_mst);
++=======
+ 		if (!bret) {
+ 			drm_dbg_kms(&i915->drm,
+ 				    "failed to get ESI - device may have failed\n");
+ 			return -EINVAL;
+ 		}
+ 
+ 		/* check link status - esi[10] = 0x200c */
+ 		/*
+ 		 * FIXME kill this and use the SST retraining approach
+ 		 * for MST as well.
+ 		 */
+ 		if (intel_dp->active_mst_links > 0 &&
+ 		    !drm_dp_channel_eq_ok(&esi[10], intel_dp->lane_count)) {
+ 			drm_dbg_kms(&i915->drm,
+ 				    "channel EQ not ok, retraining\n");
+ 			intel_dp_start_link_train(intel_dp);
+ 			intel_dp_stop_link_train(intel_dp);
+ 		}
+ 
+ 		drm_dbg_kms(&i915->drm, "got esi %3ph\n", esi);
+ 
+ 		drm_dp_mst_hpd_irq(&intel_dp->mst_mgr, esi, &handled);
+ 		if (!handled)
+ 			break;
+ 
+ 		for (retry = 0; retry < 3; retry++) {
+ 			int wret;
+ 
+ 			wret = drm_dp_dpcd_write(&intel_dp->aux,
+ 						 DP_SINK_COUNT_ESI+1,
+ 						 &esi[1], 3);
+ 			if (wret == 3)
+ 				break;
++>>>>>>> 3c0ec2c2d594 (drm/i915: Flatten intel_dp_check_mst_status() a bit)
  		}
  	}
- 	return -EINVAL;
+ 
+ 	return 0;
  }
  
  static bool
* Unmerged path drivers/gpu/drm/i915/display/intel_dp.c
