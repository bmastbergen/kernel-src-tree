perf evlist: Introduce append_tp_filter_pid() and append_tp_filter_pids()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 1827ab5ba8e1d0354cc36b3692444306ced01471
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1827ab5b.failed

We'll need this to support 'perf trace e tracepoint --filter=expr', as
the command line tracepoint filter is attache to the preceding evsel,
just like in 'perf record' and when we go to set pid filters, which we
do at the minimum to filter 'perf trace' own syscalls, we need to
append, not set the tp filter.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Luis ClÃ¡udio GonÃ§alves <lclaudio@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-daynpknni44ywuzi8iua57nn@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1827ab5ba8e1d0354cc36b3692444306ced01471)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,e33b46aca5cb..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -1221,11 -1128,25 +1221,29 @@@ int perf_evlist__set_tp_filter_pid(stru
  	return perf_evlist__set_tp_filter_pids(evlist, 1, &pid);
  }
  
++<<<<<<< HEAD
 +bool perf_evlist__valid_sample_type(struct perf_evlist *evlist)
++=======
+ int perf_evlist__append_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids)
+ {
+ 	char *filter = asprintf__tp_filter_pids(npids, pids);
+ 	int ret = perf_evlist__append_tp_filter(evlist, filter);
+ 
+ 	free(filter);
+ 	return ret;
+ }
+ 
+ int perf_evlist__append_tp_filter_pid(struct evlist *evlist, pid_t pid)
+ {
+ 	return perf_evlist__append_tp_filter_pids(evlist, 1, &pid);
+ }
+ 
+ bool perf_evlist__valid_sample_type(struct evlist *evlist)
++>>>>>>> 1827ab5ba8e1 (perf evlist: Introduce append_tp_filter_pid() and append_tp_filter_pids())
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
 -	if (evlist->core.nr_entries == 1)
 +	if (evlist->nr_entries == 1)
  		return true;
  
  	if (evlist->id_pos < 0 || evlist->is_pos < 0)
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,13051409fd22..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -113,41 -136,39 +113,52 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
 -int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
 -int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
 -int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
 +int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
 +int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
 +int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
  
 -int perf_evlist__append_tp_filter(struct evlist *evlist, const char *filter);
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
  
++<<<<<<< HEAD
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
++=======
+ int perf_evlist__append_tp_filter_pid(struct evlist *evlist, pid_t pid);
+ int perf_evlist__append_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
+ 
+ struct evsel *
+ perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
+ 
+ struct evsel *
+ perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
++>>>>>>> 1827ab5ba8e1 (perf evlist: Introduce append_tp_filter_pid() and append_tp_filter_pids())
  				     const char *name);
  
 -int evlist__add_pollfd(struct evlist *evlist, int fd);
 -int evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd);
 +
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
  
 -int evlist__poll(struct evlist *evlist, int timeout);
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
  
 -struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
 -struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
  						u64 id);
  
 -struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
 +struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
  
 -void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
 +void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
  
 -void evlist__mmap_consume(struct evlist *evlist, int idx);
 +void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
  
 -int evlist__open(struct evlist *evlist);
 -void evlist__close(struct evlist *evlist);
 +int perf_evlist__open(struct perf_evlist *evlist);
 +void perf_evlist__close(struct perf_evlist *evlist);
  
  struct callchain_param;
  
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
