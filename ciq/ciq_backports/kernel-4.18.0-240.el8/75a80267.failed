cpuidle: Allow idle states to be disabled by default

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 75a80267410e38ab76c4ceb39753f96d72113781
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/75a80267.failed

In certain situations it may be useful to prevent some idle states
from being used by default while allowing user space to enable them
later on.

For this purpose, introduce a new state flag, CPUIDLE_FLAG_OFF, to
mark idle states that should be disabled by default, make the core
set CPUIDLE_STATE_DISABLED_BY_USER for those states at the
initialization time and add a new state attribute in sysfs,
"default_status", to inform user space of the initial status of
the given idle state ("disabled" if CPUIDLE_FLAG_OFF is set for it,
"enabled" otherwise).

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 75a80267410e38ab76c4ceb39753f96d72113781)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpuidle/cpuidle.c
#	drivers/cpuidle/sysfs.c
#	include/linux/cpuidle.h
diff --cc drivers/cpuidle/cpuidle.c
index 08b37025da09,a2af7bb8f0a5..000000000000
--- a/drivers/cpuidle/cpuidle.c
+++ b/drivers/cpuidle/cpuidle.c
@@@ -575,6 -572,14 +575,17 @@@ static int __cpuidle_register_device(st
  	if (!try_module_get(drv->owner))
  		return -EINVAL;
  
++<<<<<<< HEAD
++=======
+ 	for (i = 0; i < drv->state_count; i++) {
+ 		if (drv->states[i].flags & CPUIDLE_FLAG_UNUSABLE)
+ 			dev->states_usage[i].disable |= CPUIDLE_STATE_DISABLED_BY_DRIVER;
+ 
+ 		if (drv->states[i].flags & CPUIDLE_FLAG_OFF)
+ 			dev->states_usage[i].disable |= CPUIDLE_STATE_DISABLED_BY_USER;
+ 	}
+ 
++>>>>>>> 75a80267410e (cpuidle: Allow idle states to be disabled by default)
  	per_cpu(cpuidle_devices, dev->cpu) = dev;
  	list_add(&dev->device_list, &cpuidle_detected_devices);
  
diff --cc drivers/cpuidle/sysfs.c
index 3bd044148a96,254d1560dc19..000000000000
--- a/drivers/cpuidle/sysfs.c
+++ b/drivers/cpuidle/sysfs.c
@@@ -293,36 -263,78 +293,44 @@@ static ssize_t show_state_##_name(struc
  	return sprintf(buf, "%llu\n", state_usage->_name);\
  }
  
 -#define define_show_state_str_function(_name) \
 +#define define_show_state_rh_ull_function(_name) \
  static ssize_t show_state_##_name(struct cpuidle_state *state, \
 -				  struct cpuidle_state_usage *state_usage, \
 +				  struct rh_cpuidle_state_usage *rh_state_usage, \
  				  char *buf)				\
  { \
 -	if (state->_name[0] == '\0')\
 -		return sprintf(buf, "<null>\n");\
 -	return sprintf(buf, "%s\n", state->_name);\
 +	return sprintf(buf, "%llu\n", rh_state_usage->_name);\
  }
  
 -#define define_show_state_time_function(_name) \
 +#define define_show_state_str_function(_name) \
  static ssize_t show_state_##_name(struct cpuidle_state *state, \
  				  struct cpuidle_state_usage *state_usage, \
 -				  char *buf) \
 +				  char *buf)				\
  { \
 -	return sprintf(buf, "%llu\n", ktime_to_us(state->_name##_ns)); \
 +	if (state->_name[0] == '\0')\
 +		return sprintf(buf, "<null>\n");\
 +	return sprintf(buf, "%s\n", state->_name);\
  }
  
 -define_show_state_time_function(exit_latency)
 -define_show_state_time_function(target_residency)
 +define_show_state_function(exit_latency)
 +define_show_state_function(target_residency)
  define_show_state_function(power_usage)
  define_show_state_ull_function(usage)
 +define_show_state_ull_function(time)
  define_show_state_str_function(name)
  define_show_state_str_function(desc)
 -define_show_state_ull_function(above)
 -define_show_state_ull_function(below)
 -
 -static ssize_t show_state_time(struct cpuidle_state *state,
 -			       struct cpuidle_state_usage *state_usage,
 -			       char *buf)
 -{
 -	return sprintf(buf, "%llu\n", ktime_to_us(state_usage->time_ns));
 -}
 -
 -static ssize_t show_state_disable(struct cpuidle_state *state,
 -				  struct cpuidle_state_usage *state_usage,
 -				  char *buf)
 -{
 -	return sprintf(buf, "%llu\n",
 -		       state_usage->disable & CPUIDLE_STATE_DISABLED_BY_USER);
 -}
 -
 -static ssize_t store_state_disable(struct cpuidle_state *state,
 -				   struct cpuidle_state_usage *state_usage,
 -				   const char *buf, size_t size)
 -{
 -	unsigned int value;
 -	int err;
 -
 -	if (!capable(CAP_SYS_ADMIN))
 -		return -EPERM;
 -
 -	err = kstrtouint(buf, 0, &value);
 -	if (err)
 -		return err;
 -
 -	if (value)
 -		state_usage->disable |= CPUIDLE_STATE_DISABLED_BY_USER;
 -	else
 -		state_usage->disable &= ~CPUIDLE_STATE_DISABLED_BY_USER;
 -
 -	return size;
 -}
 +define_show_state_ull_function(disable)
 +define_store_state_ull_function(disable)
 +define_show_state_rh_ull_function(above)
 +define_show_state_rh_ull_function(below)
  
+ static ssize_t show_state_default_status(struct cpuidle_state *state,
+ 					  struct cpuidle_state_usage *state_usage,
+ 					  char *buf)
+ {
+ 	return sprintf(buf, "%s\n",
+ 		       state->flags & CPUIDLE_FLAG_OFF ? "disabled" : "enabled");
+ }
+ 
  define_one_state_ro(name, show_state_name);
  define_one_state_ro(desc, show_state_desc);
  define_one_state_ro(latency, show_state_exit_latency);
@@@ -331,8 -343,9 +339,14 @@@ define_one_state_ro(power, show_state_p
  define_one_state_ro(usage, show_state_usage);
  define_one_state_ro(time, show_state_time);
  define_one_state_rw(disable, show_state_disable, store_state_disable);
++<<<<<<< HEAD
 +define_one_rh_state_ro(above, show_state_above);
 +define_one_rh_state_ro(below, show_state_below);
++=======
+ define_one_state_ro(above, show_state_above);
+ define_one_state_ro(below, show_state_below);
+ define_one_state_ro(default_status, show_state_default_status);
++>>>>>>> 75a80267410e (cpuidle: Allow idle states to be disabled by default)
  
  static struct attribute *cpuidle_state_default_attrs[] = {
  	&attr_name.attr,
diff --cc include/linux/cpuidle.h
index a24a6cef6983,ebfb52b3ffbf..000000000000
--- a/include/linux/cpuidle.h
+++ b/include/linux/cpuidle.h
@@@ -104,6 -76,8 +104,11 @@@ struct cpuidle_state 
  #define CPUIDLE_FLAG_POLLING	BIT(0) /* polling state */
  #define CPUIDLE_FLAG_COUPLED	BIT(1) /* state applies to multiple cpus */
  #define CPUIDLE_FLAG_TIMER_STOP BIT(2) /* timer is stopped on this state */
++<<<<<<< HEAD
++=======
+ #define CPUIDLE_FLAG_UNUSABLE	BIT(3) /* avoid using this state */
+ #define CPUIDLE_FLAG_OFF	BIT(4) /* disable this state by default */
++>>>>>>> 75a80267410e (cpuidle: Allow idle states to be disabled by default)
  
  struct cpuidle_device_kobj;
  struct cpuidle_state_kobj;
diff --git a/Documentation/ABI/testing/sysfs-devices-system-cpu b/Documentation/ABI/testing/sysfs-devices-system-cpu
index 2601ac00ce82..9d8611a21129 100644
--- a/Documentation/ABI/testing/sysfs-devices-system-cpu
+++ b/Documentation/ABI/testing/sysfs-devices-system-cpu
@@ -195,6 +195,12 @@ Description:
 		does not reflect it. Likewise, if one enables a deep state but a
 		lighter state still is disabled, then this has no effect.
 
+What:		/sys/devices/system/cpu/cpuX/cpuidle/stateN/default_status
+Date:		December 2019
+KernelVersion:	v5.6
+Contact:	Linux power management list <linux-pm@vger.kernel.org>
+Description:
+		(RO) The default status of this state, "enabled" or "disabled".
 
 What:		/sys/devices/system/cpu/cpuX/cpuidle/stateN/residency
 Date:		March 2014
diff --git a/Documentation/admin-guide/pm/cpuidle.rst b/Documentation/admin-guide/pm/cpuidle.rst
index e17fdfb145e3..aef9fed24a04 100644
--- a/Documentation/admin-guide/pm/cpuidle.rst
+++ b/Documentation/admin-guide/pm/cpuidle.rst
@@ -501,6 +501,9 @@ object corresponding to it, as follows:
 ``disable``
 	Whether or not this idle state is disabled.
 
+``default_status``
+	The default status of this state, "enabled" or "disabled".
+
 ``latency``
 	Exit latency of the idle state in microseconds.
 
* Unmerged path drivers/cpuidle/cpuidle.c
* Unmerged path drivers/cpuidle/sysfs.c
* Unmerged path include/linux/cpuidle.h
