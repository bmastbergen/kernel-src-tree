libperf: Add perf_mmap__init() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 353120b48d4f61288e4745b0c8a191784b11c0f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/353120b4.failed

Add perf_mmap__init() function to initialize 'struct perf_mmap' objects.

Add it to a new mmap.c source file, that will carry all the mmap related
functions.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20191007125344.14268-2-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 353120b48d4f61288e4745b0c8a191784b11c0f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/Build
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/util/evlist.c
diff --cc tools/perf/lib/Build
index 5196958cec01,2ef9a4ec6d99..000000000000
--- a/tools/perf/lib/Build
+++ b/tools/perf/lib/Build
@@@ -1,1 -1,13 +1,16 @@@
  libperf-y += core.o
++<<<<<<< HEAD
++=======
+ libperf-y += cpumap.o
+ libperf-y += threadmap.o
+ libperf-y += evsel.o
+ libperf-y += evlist.o
+ libperf-y += mmap.o
+ libperf-y += zalloc.o
+ libperf-y += xyarray.o
+ libperf-y += lib.o
+ 
+ $(OUTPUT)zalloc.o: ../../lib/zalloc.c FORCE
+ 	$(call rule_mkdir)
+ 	$(call if_changed_dep,cc_o_c)
++>>>>>>> 353120b48d4f (libperf: Add perf_mmap__init() function)
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,6c8de0865670..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -729,9 -628,7 +729,13 @@@ static struct perf_mmap *perf_evlist__a
  	if (!map)
  		return NULL;
  
++<<<<<<< HEAD
 +	for (i = 0; i < evlist->nr_mmaps; i++) {
 +		map[i].fd = -1;
 +		map[i].overwrite = overwrite;
++=======
+ 	for (i = 0; i < evlist->core.nr_mmaps; i++) {
++>>>>>>> 353120b48d4f (libperf: Add perf_mmap__init() function)
  		/*
  		 * When the perf_mmap() call is made we grab one refcount, plus
  		 * one extra to let perf_mmap__consume() get the last
@@@ -741,8 -638,9 +745,13 @@@
  		 * Each PERF_EVENT_IOC_SET_OUTPUT points to this mmap and
  		 * thus does perf_mmap__get() on it.
  		 */
++<<<<<<< HEAD
 +		refcount_set(&map[i].refcnt, 0);
++=======
+ 		perf_mmap__init(&map[i].core, overwrite);
++>>>>>>> 353120b48d4f (libperf: Add perf_mmap__init() function)
  	}
+ 
  	return map;
  }
  
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/Build
* Unmerged path tools/perf/lib/include/internal/mmap.h
diff --git a/tools/perf/lib/mmap.c b/tools/perf/lib/mmap.c
new file mode 100644
index 000000000000..3da6177510e6
--- /dev/null
+++ b/tools/perf/lib/mmap.c
@@ -0,0 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <internal/mmap.h>
+
+void perf_mmap__init(struct perf_mmap *map, bool overwrite)
+{
+	map->fd = -1;
+	map->overwrite = overwrite;
+	refcount_set(&map->refcnt, 0);
+}
* Unmerged path tools/perf/util/evlist.c
