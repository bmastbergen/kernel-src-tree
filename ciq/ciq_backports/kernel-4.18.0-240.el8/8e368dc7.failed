bpf: Fix use of sk->sk_reuseport from sk_assign

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Joe Stringer <joe@wand.net.nz>
commit 8e368dc72e86ad1e1a612416f32d5ad22dca88bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8e368dc7.failed

In testing, we found that for request sockets the sk->sk_reuseport field
may yet be uninitialized, which caused bpf_sk_assign() to randomly
succeed or return -ESOCKTNOSUPPORT when handling the forward ACK in a
three-way handshake.

Fix it by only applying the reuseport check for full sockets.

Fixes: cf7fbe660f2d ("bpf: Add socket assign support")
	Signed-off-by: Joe Stringer <joe@wand.net.nz>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20200408033540.10339-1-joe@wand.net.nz
(cherry picked from commit 8e368dc72e86ad1e1a612416f32d5ad22dca88bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/filter.c
diff --cc net/core/filter.c
index f77b9440c7a9,7d6ceaa54d21..000000000000
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@@ -5946,6 -5917,36 +5946,39 @@@ static const struct bpf_func_proto bpf_
  	.arg5_type	= ARG_CONST_SIZE,
  };
  
++<<<<<<< HEAD
++=======
+ BPF_CALL_3(bpf_sk_assign, struct sk_buff *, skb, struct sock *, sk, u64, flags)
+ {
+ 	if (flags != 0)
+ 		return -EINVAL;
+ 	if (!skb_at_tc_ingress(skb))
+ 		return -EOPNOTSUPP;
+ 	if (unlikely(dev_net(skb->dev) != sock_net(sk)))
+ 		return -ENETUNREACH;
+ 	if (unlikely(sk_fullsock(sk) && sk->sk_reuseport))
+ 		return -ESOCKTNOSUPPORT;
+ 	if (sk_is_refcounted(sk) &&
+ 	    unlikely(!refcount_inc_not_zero(&sk->sk_refcnt)))
+ 		return -ENOENT;
+ 
+ 	skb_orphan(skb);
+ 	skb->sk = sk;
+ 	skb->destructor = sock_pfree;
+ 
+ 	return 0;
+ }
+ 
+ static const struct bpf_func_proto bpf_sk_assign_proto = {
+ 	.func		= bpf_sk_assign,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type      = ARG_PTR_TO_CTX,
+ 	.arg2_type      = ARG_PTR_TO_SOCK_COMMON,
+ 	.arg3_type	= ARG_ANYTHING,
+ };
+ 
++>>>>>>> 8e368dc72e86 (bpf: Fix use of sk->sk_reuseport from sk_assign)
  #endif /* CONFIG_INET */
  
  bool bpf_helper_changes_pkt_data(void *func)
* Unmerged path net/core/filter.c
