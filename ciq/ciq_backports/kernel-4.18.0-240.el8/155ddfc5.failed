netdevsim: add couple of debugfs bools to debug devlink reload

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit 155ddfc5e54a68f0e8d20f31f2b4b6b25e1071b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/155ddfc5.failed

Add flag to disallow reload and another one that causes reload to
always fail.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 155ddfc5e54a68f0e8d20f31f2b4b6b25e1071b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/netdevsim/dev.c
diff --cc drivers/net/netdevsim/dev.c
index 863a10803cdb,31d1752c703a..000000000000
--- a/drivers/net/netdevsim/dev.c
+++ b/drivers/net/netdevsim/dev.c
@@@ -521,36 -473,41 +525,62 @@@ static void nsim_dev_traps_exit(struct 
  	kfree(nsim_dev->trap_data);
  }
  
 -static int nsim_dev_reload_create(struct nsim_dev *nsim_dev,
 -				  struct netlink_ext_ack *extack);
 -static void nsim_dev_reload_destroy(struct nsim_dev *nsim_dev);
 -
 -static int nsim_dev_reload_down(struct devlink *devlink, bool netns_change,
 +static int nsim_dev_reload_down(struct devlink *devlink,
  				struct netlink_ext_ack *extack)
  {
++<<<<<<< HEAD
++=======
+ 	struct nsim_dev *nsim_dev = devlink_priv(devlink);
+ 
+ 	if (nsim_dev->dont_allow_reload) {
+ 		/* For testing purposes, user set debugfs dont_allow_reload
+ 		 * value to true. So forbid it.
+ 		 */
+ 		NL_SET_ERR_MSG_MOD(extack, "User forbidded reload for testing purposes");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	nsim_dev_reload_destroy(nsim_dev);
++>>>>>>> 155ddfc5e54a (netdevsim: add couple of debugfs bools to debug devlink reload)
  	return 0;
  }
  
  static int nsim_dev_reload_up(struct devlink *devlink,
  			      struct netlink_ext_ack *extack)
  {
 -	struct nsim_dev *nsim_dev = devlink_priv(devlink);
 +	enum nsim_resource_id res_ids[] = {
 +		NSIM_RESOURCE_IPV4_FIB, NSIM_RESOURCE_IPV4_FIB_RULES,
 +		NSIM_RESOURCE_IPV6_FIB, NSIM_RESOURCE_IPV6_FIB_RULES
 +	};
 +	struct net *net = nsim_devlink_net(devlink);
 +	int i;
  
++<<<<<<< HEAD
 +	for (i = 0; i < ARRAY_SIZE(res_ids); ++i) {
 +		int err;
 +		u64 val;
 +
 +		err = devlink_resource_size_get(devlink, res_ids[i], &val);
 +		if (!err) {
 +			err = nsim_fib_set_max(net, res_ids[i], val, extack);
 +			if (err)
 +				return err;
 +		}
 +	}
 +	nsim_devlink_param_load_driverinit_values(devlink);
 +
 +	return 0;
++=======
+ 	if (nsim_dev->fail_reload) {
+ 		/* For testing purposes, user set debugfs fail_reload
+ 		 * value to true. Fail right away.
+ 		 */
+ 		NL_SET_ERR_MSG_MOD(extack, "User setup the reload to fail for testing purposes");
+ 		return -EINVAL;
+ 	}
+ 
+ 	return nsim_dev_reload_create(nsim_dev, extack);
++>>>>>>> 155ddfc5e54a (netdevsim: add couple of debugfs bools to debug devlink reload)
  }
  
  #define NSIM_DEV_FLASH_SIZE 500000
* Unmerged path drivers/net/netdevsim/dev.c
diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 4035af41eca9..364f66ca0457 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -161,6 +161,8 @@ struct nsim_dev {
 	bool fw_update_status;
 	u32 max_macs;
 	bool test1;
+	bool dont_allow_reload;
+	bool fail_reload;
 	struct devlink_region *dummy_region;
 };
 
