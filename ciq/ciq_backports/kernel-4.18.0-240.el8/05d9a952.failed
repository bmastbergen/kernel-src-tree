powerpc/prom_init: Undo relocation before entering secure mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [powerpc] prom_init: Undo relocation before entering secure mode (Michael Roth) [1730194]
Rebuild_FUZZ: 93.10%
commit-author Thiago Jung Bauermann <bauerman@linux.ibm.com>
commit 05d9a952832cb206a32e3705eff6edebdb2207e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/05d9a952.failed

The ultravisor will do an integrity check of the kernel image but we
relocated it so the check will fail. Restore the original image by
relocating it back to the kernel virtual base address.

This works because during build vmlinux is linked with an expected
virtual runtime address of KERNELBASE.

Fixes: 6a9c930bd775 ("powerpc/prom_init: Add the ESM call to prom_init")
	Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Tested-by: Michael Anderson <andmike@linux.ibm.com>
[mpe: Add IS_ENABLED() to fix the CONFIG_RELOCATABLE=n build]
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20190911163433.12822-1-bauerman@linux.ibm.com
(cherry picked from commit 05d9a952832cb206a32e3705eff6edebdb2207e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/prom_init.c
diff --cc arch/powerpc/kernel/prom_init.c
index 8eb1d8e418de,100f1b57ec2f..000000000000
--- a/arch/powerpc/kernel/prom_init.c
+++ b/arch/powerpc/kernel/prom_init.c
@@@ -3166,6 -3221,59 +3166,62 @@@ static void unreloc_toc(void
  #endif
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_PPC_SVM
+ /*
+  * Perform the Enter Secure Mode ultracall.
+  */
+ static int enter_secure_mode(unsigned long kbase, unsigned long fdt)
+ {
+ 	register unsigned long r3 asm("r3") = UV_ESM;
+ 	register unsigned long r4 asm("r4") = kbase;
+ 	register unsigned long r5 asm("r5") = fdt;
+ 
+ 	asm volatile("sc 2" : "+r"(r3) : "r"(r4), "r"(r5));
+ 
+ 	return r3;
+ }
+ 
+ /*
+  * Call the Ultravisor to transfer us to secure memory if we have an ESM blob.
+  */
+ static void setup_secure_guest(unsigned long kbase, unsigned long fdt)
+ {
+ 	int ret;
+ 
+ 	if (!prom_svm_enable)
+ 		return;
+ 
+ 	/* Switch to secure mode. */
+ 	prom_printf("Switching to secure mode.\n");
+ 
+ 	/*
+ 	 * The ultravisor will do an integrity check of the kernel image but we
+ 	 * relocated it so the check will fail. Restore the original image by
+ 	 * relocating it back to the kernel virtual base address.
+ 	 */
+ 	if (IS_ENABLED(CONFIG_RELOCATABLE))
+ 		relocate(KERNELBASE);
+ 
+ 	ret = enter_secure_mode(kbase, fdt);
+ 
+ 	/* Relocate the kernel again. */
+ 	if (IS_ENABLED(CONFIG_RELOCATABLE))
+ 		relocate(kbase);
+ 
+ 	if (ret != U_SUCCESS) {
+ 		prom_printf("Returned %d from switching to secure mode.\n", ret);
+ 		prom_rtas_os_term("Switch to secure mode failed.\n");
+ 	}
+ }
+ #else
+ static void setup_secure_guest(unsigned long kbase, unsigned long fdt)
+ {
+ }
+ #endif /* CONFIG_PPC_SVM */
+ 
++>>>>>>> 05d9a952832c (powerpc/prom_init: Undo relocation before entering secure mode)
  /*
   * We enter here early on, when the Open Firmware prom is still
   * handling exceptions and the MMU hash table for us.
diff --git a/arch/powerpc/include/asm/elf.h b/arch/powerpc/include/asm/elf.h
index 548d9a411a0d..01d64894666b 100644
--- a/arch/powerpc/include/asm/elf.h
+++ b/arch/powerpc/include/asm/elf.h
@@ -179,4 +179,7 @@ do {									\
 	ARCH_DLINFO_CACHE_GEOMETRY;					\
 } while (0)
 
+/* Relocate the kernel image to @final_address */
+void relocate(unsigned long final_address);
+
 #endif /* _ASM_POWERPC_ELF_H */
* Unmerged path arch/powerpc/kernel/prom_init.c
diff --git a/arch/powerpc/kernel/prom_init_check.sh b/arch/powerpc/kernel/prom_init_check.sh
index c467d414795e..895406e1804c 100644
--- a/arch/powerpc/kernel/prom_init_check.sh
+++ b/arch/powerpc/kernel/prom_init_check.sh
@@ -21,7 +21,8 @@ _end enter_prom memcpy memset reloc_offset __secondary_hold
 __secondary_hold_acknowledge __secondary_hold_spinloop __start
 logo_linux_clut224
 reloc_got2 kernstart_addr memstart_addr linux_banner _stext
-__prom_init_toc_start __prom_init_toc_end btext_setup_display TOC."
+__prom_init_toc_start __prom_init_toc_end btext_setup_display TOC.
+relocate"
 
 NM="$1"
 OBJ="$2"
