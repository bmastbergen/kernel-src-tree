security: keys: trusted: fix lost handle flush

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author James Bottomley <James.Bottomley@HansenPartnership.com>
commit 45477b3fe3d10376b649b1b85fce72b2f9f1da84
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/45477b3f.failed

The original code, before it was moved into security/keys/trusted-keys
had a flush after the blob unseal.  Without that flush, the volatile
handles increase in the TPM until it becomes unusable and the system
either has to be rebooted or the TPM volatile area manually flushed.
Fix by adding back the lost flush, which we now have to export because
of the relocation of the trusted key code may cause the consumer to be
modular.

	Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
Fixes: 2e19e10131a0 ("KEYS: trusted: Move TPM2 trusted keys code")
	Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit 45477b3fe3d10376b649b1b85fce72b2f9f1da84)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/tpm/tpm.h
#	security/keys/trusted-keys/trusted_tpm2.c
diff --cc drivers/char/tpm/tpm.h
index 32daee5fb87d,5620747da0cf..000000000000
--- a/drivers/char/tpm/tpm.h
+++ b/drivers/char/tpm/tpm.h
@@@ -435,13 -218,6 +435,16 @@@ int tpm2_pcr_read(struct tpm_chip *chip
  int tpm2_pcr_extend(struct tpm_chip *chip, u32 pcr_idx,
  		    struct tpm_digest *digests);
  int tpm2_get_random(struct tpm_chip *chip, u8 *dest, size_t max);
++<<<<<<< HEAD
 +void tpm2_flush_context(struct tpm_chip *chip, u32 handle);
 +int tpm2_seal_trusted(struct tpm_chip *chip,
 +		      struct trusted_key_payload *payload,
 +		      struct trusted_key_options *options);
 +int tpm2_unseal_trusted(struct tpm_chip *chip,
 +			struct trusted_key_payload *payload,
 +			struct trusted_key_options *options);
++=======
++>>>>>>> 45477b3fe3d1 (security: keys: trusted: fix lost handle flush)
  ssize_t tpm2_get_tpm_pt(struct tpm_chip *chip, u32 property_id,
  			u32 *value, const char *desc);
  
* Unmerged path security/keys/trusted-keys/trusted_tpm2.c
* Unmerged path drivers/char/tpm/tpm.h
diff --git a/drivers/char/tpm/tpm2-cmd.c b/drivers/char/tpm/tpm2-cmd.c
index a33e802f0c75..5172a7423eae 100644
--- a/drivers/char/tpm/tpm2-cmd.c
+++ b/drivers/char/tpm/tpm2-cmd.c
@@ -376,6 +376,7 @@ void tpm2_flush_context(struct tpm_chip *chip, u32 handle)
 	tpm_transmit_cmd(chip, &buf, 0, "flushing context");
 	tpm_buf_destroy(&buf);
 }
+EXPORT_SYMBOL_GPL(tpm2_flush_context);
 
 /**
  * tpm_buf_append_auth() - append TPMS_AUTH_COMMAND to the buffer.
diff --git a/include/linux/tpm.h b/include/linux/tpm.h
index a3d6ecd39753..4e290ff7f729 100644
--- a/include/linux/tpm.h
+++ b/include/linux/tpm.h
@@ -184,6 +184,7 @@ extern int tpm_unseal_trusted(struct tpm_chip *chip,
 			      struct trusted_key_payload *payload,
 			      struct trusted_key_options *options);
 extern struct tpm_chip *tpm_default_chip(void);
+void tpm2_flush_context(struct tpm_chip *chip, u32 handle);
 #else
 static inline int tpm_is_tpm2(struct tpm_chip *chip)
 {
* Unmerged path security/keys/trusted-keys/trusted_tpm2.c
