ASoC: SOF: pcm: skip DMA buffer pre-allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: SOF: pcm: skip DMA buffer pre-allocation (Jaroslav Kysela) [1797509]
Rebuild_FUZZ: 93.88%
commit-author Keyon Jie <yang.jie@linux.intel.com>
commit e582f4832a9ee27d92502b58f3a1b3331457e8bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e582f483.failed

As discussion in ALSA https://patchwork.kernel.org/patch/11336023/, it
is suggested to skip DMA buffer pre-allocation with passing size=0 when
calling snd_pcm_set_managed_buffer(), to make the full buffer_bytes
range configured in topology file selectable from user space, here do
the corresponding change in SOF PCM driver to implement it.

This change doesn't have dependency to the change that Takashi will do
in the ALSA core by adding total_pcm_alloc_bytes limitation to the
struct snd_card, it passes tests both with or without Takashi's coming
change on SOF CML platform.

	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Signed-off-by: Keyon Jie <yang.jie@linux.intel.com>
Link: https://lore.kernel.org/r/20200228231850.9226-2-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit e582f4832a9ee27d92502b58f3a1b3331457e8bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/pcm.c
diff --cc sound/soc/sof/pcm.c
index af195e499df8,f4769e19965a..000000000000
--- a/sound/soc/sof/pcm.c
+++ b/sound/soc/sof/pcm.c
@@@ -591,13 -590,18 +591,24 @@@ static int sof_pcm_new(struct snd_soc_c
  	caps = &spcm->pcm.caps[stream];
  
  	/* pre-allocate playback audio buffer pages */
 -	dev_dbg(component->dev,
 -		"spcm: allocate %s playback DMA buffer size 0x%x max 0x%x\n",
 +	dev_dbg(sdev->dev, "spcm: allocate %s playback DMA buffer size 0x%x max 0x%x\n",
  		caps->name, caps->buffer_size_min, caps->buffer_size_max);
  
++<<<<<<< HEAD
 +	snd_pcm_lib_preallocate_pages(pcm->streams[stream].substream,
 +				      SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
 +				      le32_to_cpu(caps->buffer_size_min),
 +				      le32_to_cpu(caps->buffer_size_max));
++=======
+ 	if (!pcm->streams[stream].substream) {
+ 		dev_err(component->dev, "error: NULL playback substream!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	snd_pcm_set_managed_buffer(pcm->streams[stream].substream,
+ 				   SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
+ 				   0, le32_to_cpu(caps->buffer_size_max));
++>>>>>>> e582f4832a9e (ASoC: SOF: pcm: skip DMA buffer pre-allocation)
  capture:
  	stream = SNDRV_PCM_STREAM_CAPTURE;
  
@@@ -608,13 -612,18 +619,24 @@@
  	caps = &spcm->pcm.caps[stream];
  
  	/* pre-allocate capture audio buffer pages */
 -	dev_dbg(component->dev,
 -		"spcm: allocate %s capture DMA buffer size 0x%x max 0x%x\n",
 +	dev_dbg(sdev->dev, "spcm: allocate %s capture DMA buffer size 0x%x max 0x%x\n",
  		caps->name, caps->buffer_size_min, caps->buffer_size_max);
  
++<<<<<<< HEAD
 +	snd_pcm_lib_preallocate_pages(pcm->streams[stream].substream,
 +				      SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
 +				      le32_to_cpu(caps->buffer_size_min),
 +				      le32_to_cpu(caps->buffer_size_max));
++=======
+ 	if (!pcm->streams[stream].substream) {
+ 		dev_err(component->dev, "error: NULL capture substream!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	snd_pcm_set_managed_buffer(pcm->streams[stream].substream,
+ 				   SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
+ 				   0, le32_to_cpu(caps->buffer_size_max));
++>>>>>>> e582f4832a9e (ASoC: SOF: pcm: skip DMA buffer pre-allocation)
  
  	return 0;
  }
* Unmerged path sound/soc/sof/pcm.c
