libperf: Add 'fd' to struct perf_mmap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 2cf07b294a604aecd6b583e60724eaa1607f0fbc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2cf07b29.failed

Move 'fd' from tools/perf's mmap to libperf's perf_mmap struct.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-13-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 2cf07b294a604aecd6b583e60724eaa1607f0fbc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
diff --cc tools/perf/util/mmap.c
index 850493205040,40bf124cb658..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -314,10 -317,10 +314,17 @@@ void perf_mmap__munmap(struct perf_mma
  		munmap(map->data, perf_mmap__mmap_len(map));
  		map->data = NULL;
  	}
++<<<<<<< HEAD
 +	if (map->base != NULL) {
 +		munmap(map->base, perf_mmap__mmap_len(map));
 +		map->base = NULL;
 +		map->fd = -1;
++=======
+ 	if (map->core.base != NULL) {
+ 		munmap(map->core.base, perf_mmap__mmap_len(map));
+ 		map->core.base = NULL;
+ 		map->core.fd = -1;
++>>>>>>> 2cf07b294a60 (libperf: Add 'fd' to struct perf_mmap)
  		refcount_set(&map->refcnt, 0);
  	}
  	auxtrace_mmap__munmap(&map->auxtrace_mmap);
@@@ -366,16 -369,16 +373,16 @@@ int perf_mmap__mmap(struct perf_mmap *m
  	 */
  	refcount_set(&map->refcnt, 2);
  	map->prev = 0;
 -	map->core.mask = mp->mask;
 -	map->core.base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
 +	map->mask = mp->mask;
 +	map->base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
  			 MAP_SHARED, fd, 0);
 -	if (map->core.base == MAP_FAILED) {
 +	if (map->base == MAP_FAILED) {
  		pr_debug2("failed to mmap perf event ring buffer, error %d\n",
  			  errno);
 -		map->core.base = NULL;
 +		map->base = NULL;
  		return -1;
  	}
- 	map->fd = fd;
+ 	map->core.fd = fd;
  	map->cpu = cpu;
  
  	perf_mmap__setup_affinity_mask(map, mp);
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,de991194af8d..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -18,10 -20,8 +18,15 @@@ struct aiocb
   *
   * @refcnt - e.g. code using PERF_EVENT_IOC_SET_OUTPUT to share this
   */
++<<<<<<< HEAD
 +struct perf_mmap {
 +	void		 *base;
 +	int		 mask;
 +	int		 fd;
++=======
+ struct mmap {
+ 	struct perf_mmap	core;
++>>>>>>> 2cf07b294a60 (libperf: Add 'fd' to struct perf_mmap)
  	int		 cpu;
  	refcount_t	 refcnt;
  	u64		 prev;
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/include/internal/mmap.h
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 29a998d183ce..aa812e45f4ef 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -674,7 +674,7 @@ static int perf_evlist__set_paused(struct perf_evlist *evlist, bool value)
 		return 0;
 
 	for (i = 0; i < evlist->nr_mmaps; i++) {
-		int fd = evlist->overwrite_mmap[i].fd;
+		int fd = evlist->overwrite_mmap[i].core.fd;
 		int err;
 
 		if (fd < 0)
@@ -730,7 +730,7 @@ static struct perf_mmap *perf_evlist__alloc_mmap(struct perf_evlist *evlist,
 		return NULL;
 
 	for (i = 0; i < evlist->nr_mmaps; i++) {
-		map[i].fd = -1;
+		map[i].core.fd = -1;
 		map[i].overwrite = overwrite;
 		/*
 		 * When the perf_mmap() call is made we grab one refcount, plus
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
