perf tools: Add a 'struct map_groups' pointer to 'struct map_symbol'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 08f6680e627edf913c6d6adb9bb9ecc9d57a408d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/08f6680e.failed

And fill it whenever we setup a a 'struct map_symbol', now we need to
use it, next cset.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-fzwfcnddenz1o7uj1fzw3g46@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 08f6680e627edf913c6d6adb9bb9ecc9d57a408d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.c
#	tools/perf/util/machine.c
diff --cc tools/perf/util/hist.c
index e487bb0ce346,0a8d72ae93ca..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -750,6 -759,11 +751,14 @@@ struct hist_entry *hists__add_entry_blo
  	struct hist_entry entry = {
  		.block_info = block_info,
  		.hists = hists,
++<<<<<<< HEAD
++=======
+ 		.ms = {
+ 			.mg  = al->mg,
+ 			.map = al->map,
+ 			.sym = al->sym,
+ 		},
++>>>>>>> 08f6680e627e (perf tools: Add a 'struct map_groups' pointer to 'struct map_symbol')
  	}, *he = hists__findnew_entry(hists, &entry, al, false);
  
  	return he;
@@@ -881,8 -895,9 +890,14 @@@ iter_next_branch_entry(struct hist_entr
  	if (iter->curr >= iter->total)
  		return 0;
  
++<<<<<<< HEAD
 +	al->map = bi[i].to.map;
 +	al->sym = bi[i].to.sym;
++=======
+ 	al->mg  = bi[i].to.ms.mg;
+ 	al->map = bi[i].to.ms.map;
+ 	al->sym = bi[i].to.ms.sym;
++>>>>>>> 08f6680e627e (perf tools: Add a 'struct map_groups' pointer to 'struct map_symbol')
  	al->addr = bi[i].to.addr;
  	return 1;
  }
diff --cc tools/perf/util/machine.c
index a06f2861e3c8,6a0f5c25ce3e..000000000000
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@@ -1959,8 -1968,9 +1959,14 @@@ static void ip__resolve_ams(struct thre
  
  	ams->addr = ip;
  	ams->al_addr = al.addr;
++<<<<<<< HEAD
 +	ams->sym = al.sym;
 +	ams->map = al.map;
++=======
+ 	ams->ms.mg  = al.mg;
+ 	ams->ms.sym = al.sym;
+ 	ams->ms.map = al.map;
++>>>>>>> 08f6680e627e (perf tools: Add a 'struct map_groups' pointer to 'struct map_symbol')
  	ams->phys_addr = 0;
  }
  
@@@ -1976,8 -1986,9 +1982,14 @@@ static void ip__resolve_data(struct thr
  
  	ams->addr = addr;
  	ams->al_addr = al.addr;
++<<<<<<< HEAD
 +	ams->sym = al.sym;
 +	ams->map = al.map;
++=======
+ 	ams->ms.mg  = al.mg;
+ 	ams->ms.sym = al.sym;
+ 	ams->ms.map = al.map;
++>>>>>>> 08f6680e627e (perf tools: Add a 'struct map_groups' pointer to 'struct map_symbol')
  	ams->phys_addr = phys_addr;
  }
  
diff --git a/tools/perf/util/callchain.c b/tools/perf/util/callchain.c
index ca37b95d0f91..e37ad77619ee 100644
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@ -1102,6 +1102,7 @@ int hist_entry__append_callchain(struct hist_entry *he, struct perf_sample *samp
 int fill_callchain_info(struct addr_location *al, struct callchain_cursor_node *node,
 			bool hide_unresolved)
 {
+	al->mg	= node->ms.mg;
 	al->map = node->ms.map;
 	al->sym = node->ms.sym;
 	al->srcline = node->srcline;
* Unmerged path tools/perf/util/hist.c
* Unmerged path tools/perf/util/machine.c
diff --git a/tools/perf/util/map_symbol.h b/tools/perf/util/map_symbol.h
index 5a1aed9f6bb4..e35af3c5927c 100644
--- a/tools/perf/util/map_symbol.h
+++ b/tools/perf/util/map_symbol.h
@@ -4,10 +4,12 @@
 
 #include <linux/types.h>
 
+struct map_groups;
 struct map;
 struct symbol;
 
 struct map_symbol {
+	struct map_groups *mg;
 	struct map    *map;
 	struct symbol *sym;
 };
diff --git a/tools/perf/util/unwind-libdw.c b/tools/perf/util/unwind-libdw.c
index c1679f08d22f..8211a09f9626 100644
--- a/tools/perf/util/unwind-libdw.c
+++ b/tools/perf/util/unwind-libdw.c
@@ -81,6 +81,7 @@ static int entry(u64 ip, struct unwind_info *ui)
 		return -1;
 
 	e->ip	  = ip;
+	e->ms.mg  = al.mg;
 	e->ms.map = al.map;
 	e->ms.sym = al.sym;
 
diff --git a/tools/perf/util/unwind-libunwind-local.c b/tools/perf/util/unwind-libunwind-local.c
index aaf7a445c595..63f160ecf785 100644
--- a/tools/perf/util/unwind-libunwind-local.c
+++ b/tools/perf/util/unwind-libunwind-local.c
@@ -579,6 +579,7 @@ static int entry(u64 ip, struct thread *thread,
 	e.ms.sym = thread__find_symbol(thread, PERF_RECORD_MISC_USER, ip, &al);
 	e.ip     = ip;
 	e.ms.map = al.map;
+	e.ms.mg  = al.mg;
 
 	pr_debug("unwind: %s:ip = 0x%" PRIx64 " (0x%" PRIx64 ")\n",
 		 al.sym ? al.sym->name : "''",
