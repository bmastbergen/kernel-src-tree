mm: split out a new pagewalk.h header from mm.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit a520110e4a15ceb385304d9cab22bb51438f6080
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a520110e.failed

Add a new header for the two handful of users of the walk_page_range /
walk_page_vma interface instead of polluting all users of mm.h with it.

Link: https://lore.kernel.org/r/20190828141955.22210-2-hch@lst.de
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
	Reviewed-by: Steven Price <steven.price@arm.com>
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit a520110e4a15ceb385304d9cab22bb51438f6080)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/openrisc/kernel/dma.c
#	include/linux/mm.h
diff --cc arch/openrisc/kernel/dma.c
index ec7fd45704d2,c7812e6effa2..000000000000
--- a/arch/openrisc/kernel/dma.c
+++ b/arch/openrisc/kernel/dma.c
@@@ -19,9 -15,8 +19,14 @@@
   * the only thing implemented properly.  The rest need looking into...
   */
  
++<<<<<<< HEAD
 +#include <linux/dma-mapping.h>
 +#include <linux/dma-debug.h>
 +#include <linux/export.h>
++=======
+ #include <linux/dma-noncoherent.h>
+ #include <linux/pagewalk.h>
++>>>>>>> a520110e4a15 (mm: split out a new pagewalk.h header from mm.h)
  
  #include <asm/cpuinfo.h>
  #include <asm/spr_defs.h>
diff --cc include/linux/mm.h
index 7814b1c09166,7cf955feb823..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -1349,52 -1430,8 +1349,57 @@@ void zap_page_range(struct vm_area_stru
  void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  		unsigned long start, unsigned long end);
  
++<<<<<<< HEAD
 +/**
 + * mm_walk - callbacks for walk_page_range
 + * @pud_entry: if set, called for each non-empty PUD (2nd-level) entry
 + *	       this handler should only handle pud_trans_huge() puds.
 + *	       the pmd_entry or pte_entry callbacks will be used for
 + *	       regular PUDs.
 + * @pmd_entry: if set, called for each non-empty PMD (3rd-level) entry
 + *	       this handler is required to be able to handle
 + *	       pmd_trans_huge() pmds.  They may simply choose to
 + *	       split_huge_page() instead of handling it explicitly.
 + * @pte_entry: if set, called for each non-empty PTE (4th-level) entry
 + * @pte_hole: if set, called for each hole at all levels
 + * @hugetlb_entry: if set, called for each hugetlb entry
 + * @test_walk: caller specific callback function to determine whether
 + *             we walk over the current vma or not. Returning 0
 + *             value means "do page table walk over the current vma,"
 + *             and a negative one means "abort current page table walk
 + *             right now." 1 means "skip the current vma."
 + * @mm:        mm_struct representing the target process of page table walk
 + * @vma:       vma currently walked (NULL if walking outside vmas)
 + * @private:   private data for callbacks' usage
 + *
 + * (see the comment on walk_page_range() for more details)
 + */
 +struct mm_walk {
 +	int (*pud_entry)(pud_t *pud, unsigned long addr,
 +			 unsigned long next, struct mm_walk *walk);
 +	int (*pmd_entry)(pmd_t *pmd, unsigned long addr,
 +			 unsigned long next, struct mm_walk *walk);
 +	int (*pte_entry)(pte_t *pte, unsigned long addr,
 +			 unsigned long next, struct mm_walk *walk);
 +	int (*pte_hole)(unsigned long addr, unsigned long next,
 +			struct mm_walk *walk);
 +	int (*hugetlb_entry)(pte_t *pte, unsigned long hmask,
 +			     unsigned long addr, unsigned long next,
 +			     struct mm_walk *walk);
 +	int (*test_walk)(unsigned long addr, unsigned long next,
 +			struct mm_walk *walk);
 +	struct mm_struct *mm;
 +	struct vm_area_struct *vma;
 +	void *private;
 +};
 +
 +int walk_page_range(unsigned long addr, unsigned long end,
 +		struct mm_walk *walk);
 +int walk_page_vma(struct vm_area_struct *vma, struct mm_walk *walk);
++=======
+ struct mmu_notifier_range;
+ 
++>>>>>>> a520110e4a15 (mm: split out a new pagewalk.h header from mm.h)
  void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  		unsigned long end, unsigned long floor, unsigned long ceiling);
  int copy_page_range(struct mm_struct *dst, struct mm_struct *src,
* Unmerged path arch/openrisc/kernel/dma.c
diff --git a/arch/powerpc/mm/book3s64/subpage_prot.c b/arch/powerpc/mm/book3s64/subpage_prot.c
index 199822357568..cb69e00a3a6f 100644
--- a/arch/powerpc/mm/book3s64/subpage_prot.c
+++ b/arch/powerpc/mm/book3s64/subpage_prot.c
@@ -11,7 +11,7 @@
 #include <linux/kernel.h>
 #include <linux/gfp.h>
 #include <linux/types.h>
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/hugetlb.h>
 #include <linux/syscalls.h>
 
diff --git a/arch/s390/mm/gmap.c b/arch/s390/mm/gmap.c
index 911c7ded35f1..a70190db6e7e 100644
--- a/arch/s390/mm/gmap.c
+++ b/arch/s390/mm/gmap.c
@@ -9,7 +9,7 @@
  */
 
 #include <linux/kernel.h>
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/swap.h>
 #include <linux/smp.h>
 #include <linux/spinlock.h>
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 85cefc505c86..7331dc8d095e 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/vmacache.h>
 #include <linux/hugetlb.h>
 #include <linux/huge_mm.h>
* Unmerged path include/linux/mm.h
diff --git a/include/linux/pagewalk.h b/include/linux/pagewalk.h
new file mode 100644
index 000000000000..df278a94086d
--- /dev/null
+++ b/include/linux/pagewalk.h
@@ -0,0 +1,54 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _LINUX_PAGEWALK_H
+#define _LINUX_PAGEWALK_H
+
+#include <linux/mm.h>
+
+/**
+ * mm_walk - callbacks for walk_page_range
+ * @pud_entry: if set, called for each non-empty PUD (2nd-level) entry
+ *	       this handler should only handle pud_trans_huge() puds.
+ *	       the pmd_entry or pte_entry callbacks will be used for
+ *	       regular PUDs.
+ * @pmd_entry: if set, called for each non-empty PMD (3rd-level) entry
+ *	       this handler is required to be able to handle
+ *	       pmd_trans_huge() pmds.  They may simply choose to
+ *	       split_huge_page() instead of handling it explicitly.
+ * @pte_entry: if set, called for each non-empty PTE (4th-level) entry
+ * @pte_hole: if set, called for each hole at all levels
+ * @hugetlb_entry: if set, called for each hugetlb entry
+ * @test_walk: caller specific callback function to determine whether
+ *             we walk over the current vma or not. Returning 0
+ *             value means "do page table walk over the current vma,"
+ *             and a negative one means "abort current page table walk
+ *             right now." 1 means "skip the current vma."
+ * @mm:        mm_struct representing the target process of page table walk
+ * @vma:       vma currently walked (NULL if walking outside vmas)
+ * @private:   private data for callbacks' usage
+ *
+ * (see the comment on walk_page_range() for more details)
+ */
+struct mm_walk {
+	int (*pud_entry)(pud_t *pud, unsigned long addr,
+			 unsigned long next, struct mm_walk *walk);
+	int (*pmd_entry)(pmd_t *pmd, unsigned long addr,
+			 unsigned long next, struct mm_walk *walk);
+	int (*pte_entry)(pte_t *pte, unsigned long addr,
+			 unsigned long next, struct mm_walk *walk);
+	int (*pte_hole)(unsigned long addr, unsigned long next,
+			struct mm_walk *walk);
+	int (*hugetlb_entry)(pte_t *pte, unsigned long hmask,
+			     unsigned long addr, unsigned long next,
+			     struct mm_walk *walk);
+	int (*test_walk)(unsigned long addr, unsigned long next,
+			struct mm_walk *walk);
+	struct mm_struct *mm;
+	struct vm_area_struct *vma;
+	void *private;
+};
+
+int walk_page_range(unsigned long addr, unsigned long end,
+		struct mm_walk *walk);
+int walk_page_vma(struct vm_area_struct *vma, struct mm_walk *walk);
+
+#endif /* _LINUX_PAGEWALK_H */
diff --git a/mm/hmm.c b/mm/hmm.c
index 78e07e5f853a..91d15e233681 100644
--- a/mm/hmm.c
+++ b/mm/hmm.c
@@ -17,7 +17,7 @@
  * Refer to include/linux/hmm.h for information about heterogeneous memory
  * management or HMM for short.
  */
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/hmm.h>
 #include <linux/init.h>
 #include <linux/rmap.h>
diff --git a/mm/madvise.c b/mm/madvise.c
index 4f76df2dbfb5..87668fb3c416 100644
--- a/mm/madvise.c
+++ b/mm/madvise.c
@@ -20,6 +20,7 @@
 #include <linux/file.h>
 #include <linux/blkdev.h>
 #include <linux/backing-dev.h>
+#include <linux/pagewalk.h>
 #include <linux/swap.h>
 #include <linux/swapops.h>
 #include <linux/shmem_fs.h>
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 383961c504ef..b7f9ae20baa2 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -34,7 +34,7 @@
 #include <linux/page_counter.h>
 #include <linux/memcontrol.h>
 #include <linux/cgroup.h>
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/sched/mm.h>
 #include <linux/shmem_fs.h>
 #include <linux/hugetlb.h>
diff --git a/mm/mempolicy.c b/mm/mempolicy.c
index a22278fe510c..436531ce7167 100644
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@ -68,7 +68,7 @@
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #include <linux/mempolicy.h>
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/highmem.h>
 #include <linux/hugetlb.h>
 #include <linux/kernel.h>
diff --git a/mm/migrate.c b/mm/migrate.c
index 8dd716702fdd..5a8897abcc6e 100644
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@ -38,6 +38,7 @@
 #include <linux/hugetlb.h>
 #include <linux/hugetlb_cgroup.h>
 #include <linux/gfp.h>
+#include <linux/pagewalk.h>
 #include <linux/pfn_t.h>
 #include <linux/memremap.h>
 #include <linux/userfaultfd_k.h>
diff --git a/mm/mincore.c b/mm/mincore.c
index 4fe91d497436..3b051b6ab3fe 100644
--- a/mm/mincore.c
+++ b/mm/mincore.c
@@ -10,7 +10,7 @@
  */
 #include <linux/pagemap.h>
 #include <linux/gfp.h>
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/mman.h>
 #include <linux/syscalls.h>
 #include <linux/swap.h>
diff --git a/mm/mprotect.c b/mm/mprotect.c
index 86837f25055b..41b20e78159f 100644
--- a/mm/mprotect.c
+++ b/mm/mprotect.c
@@ -9,7 +9,7 @@
  *  (C) Copyright 2002 Red Hat Inc, All Rights Reserved
  */
 
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/hugetlb.h>
 #include <linux/shm.h>
 #include <linux/mman.h>
diff --git a/mm/pagewalk.c b/mm/pagewalk.c
index c3084ff2569d..8a92a961a2ee 100644
--- a/mm/pagewalk.c
+++ b/mm/pagewalk.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
-#include <linux/mm.h>
+#include <linux/pagewalk.h>
 #include <linux/highmem.h>
 #include <linux/sched.h>
 #include <linux/hugetlb.h>
