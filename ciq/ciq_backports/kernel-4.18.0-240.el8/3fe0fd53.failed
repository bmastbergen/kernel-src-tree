netdevsim: support taking immediate snapshot via devlink

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 3fe0fd531a35c229f8309c8b74ef0226de2626ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3fe0fd53.failed

Implement the .snapshot region operation for the dummy data region. This
enables a region snapshot to be taken upon request via the new
DEVLINK_CMD_REGION_SNAPSHOT command.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3fe0fd531a35c229f8309c8b74ef0226de2626ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/netdevsim/dev.c
diff --cc drivers/net/netdevsim/dev.c
index eff772f604d1,2b727a7001f6..000000000000
--- a/drivers/net/netdevsim/dev.c
+++ b/drivers/net/netdevsim/dev.c
@@@ -38,14 -39,11 +38,18 @@@ static struct dentry *nsim_dev_ddir
  
  #define NSIM_DEV_DUMMY_REGION_SIZE (1024 * 32)
  
- static ssize_t nsim_dev_take_snapshot_write(struct file *file,
- 					    const char __user *data,
- 					    size_t count, loff_t *ppos)
+ static int
+ nsim_dev_take_snapshot(struct devlink *devlink, struct netlink_ext_ack *extack,
+ 		       u8 **data)
  {
++<<<<<<< HEAD
 +	struct nsim_dev *nsim_dev = file->private_data;
  	void *dummy_data;
 +	int err;
 +	u32 id;
++=======
++	void *dummy_data;
++>>>>>>> 3fe0fd531a35 (netdevsim: support taking immediate snapshot via devlink)
  
  	dummy_data = kmalloc(NSIM_DEV_DUMMY_REGION_SIZE, GFP_KERNEL);
  	if (!dummy_data)
@@@ -53,7 -51,28 +57,32 @@@
  
  	get_random_bytes(dummy_data, NSIM_DEV_DUMMY_REGION_SIZE);
  
++<<<<<<< HEAD
 +	err = devlink_region_snapshot_id_get(priv_to_devlink(nsim_dev), &id);
++=======
+ 	*data = dummy_data;
+ 
+ 	return 0;
+ }
+ 
+ static ssize_t nsim_dev_take_snapshot_write(struct file *file,
+ 					    const char __user *data,
+ 					    size_t count, loff_t *ppos)
+ {
+ 	struct nsim_dev *nsim_dev = file->private_data;
+ 	struct devlink *devlink;
+ 	u8 *dummy_data;
+ 	int err;
+ 	u32 id;
+ 
+ 	devlink = priv_to_devlink(nsim_dev);
+ 
+ 	err = nsim_dev_take_snapshot(devlink, NULL, &dummy_data);
+ 	if (err)
+ 		return err;
+ 
+ 	err = devlink_region_snapshot_id_get(devlink, &id);
++>>>>>>> 3fe0fd531a35 (netdevsim: support taking immediate snapshot via devlink)
  	if (err) {
  		pr_err("Failed to get snapshot id\n");
  		return err;
* Unmerged path drivers/net/netdevsim/dev.c
diff --git a/tools/testing/selftests/drivers/net/netdevsim/devlink.sh b/tools/testing/selftests/drivers/net/netdevsim/devlink.sh
index 6a67eb8c24b0..b0cbf294fff7 100755
--- a/tools/testing/selftests/drivers/net/netdevsim/devlink.sh
+++ b/tools/testing/selftests/drivers/net/netdevsim/devlink.sh
@@ -140,6 +140,16 @@ regions_test()
 
 	check_region_snapshot_count dummy post-first-delete 2
 
+	devlink region new $DL_HANDLE/dummy snapshot 25
+	check_err $? "Failed to create a new snapshot with id 25"
+
+	check_region_snapshot_count dummy post-first-request 3
+
+	devlink region del $DL_HANDLE/dummy snapshot 25
+	check_err $? "Failed to delete snapshot with id 25"
+
+	check_region_snapshot_count dummy post-second-delete 2
+
 	log_test "regions test"
 }
 
