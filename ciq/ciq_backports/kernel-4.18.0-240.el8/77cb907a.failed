gpiolib: acpi: Split ACPI stuff to gpiolib-acpi.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 77cb907abe6c4b399ad77f9b6c1d77d44a435de3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/77cb907a.failed

This is a follow up to the commit

  f626d6dfb709 ("gpio: of: Break out OF-only code")

which broke down OF parts of GPIO library. Here we do the similar to ACPI.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Link: https://lore.kernel.org/r/20190730104337.21235-2-andriy.shevchenko@linux.intel.com
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 77cb907abe6c4b399ad77f9b6c1d77d44a435de3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpio-mb86s7x.c
#	drivers/gpio/gpiolib.c
#	drivers/gpio/gpiolib.h
diff --cc drivers/gpio/gpio-mb86s7x.c
index 3134c0d2bfe4,501e89548f53..000000000000
--- a/drivers/gpio/gpio-mb86s7x.c
+++ b/drivers/gpio/gpio-mb86s7x.c
@@@ -27,6 -20,9 +27,12 @@@
  #include <linux/spinlock.h>
  #include <linux/slab.h>
  
++<<<<<<< HEAD
++=======
+ #include "gpiolib.h"
+ #include "gpiolib-acpi.h"
+ 
++>>>>>>> 77cb907abe6c (gpiolib: acpi: Split ACPI stuff to gpiolib-acpi.h)
  /*
   * Only first 8bits of a register correspond to each pin,
   * so there are 4 registers for 32 pins.
diff --cc drivers/gpio/gpiolib.c
index a54d417d4239,f83870a18ae7..000000000000
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@@ -30,6 -29,8 +30,11 @@@
  #include <uapi/linux/gpio.h>
  
  #include "gpiolib.h"
++<<<<<<< HEAD
++=======
+ #include "gpiolib-of.h"
+ #include "gpiolib-acpi.h"
++>>>>>>> 77cb907abe6c (gpiolib: acpi: Split ACPI stuff to gpiolib-acpi.h)
  
  #define CREATE_TRACE_POINTS
  #include <trace/events/gpio.h>
diff --cc drivers/gpio/gpiolib.h
index 7c52c2442173,b8b10a409c7b..000000000000
--- a/drivers/gpio/gpiolib.h
+++ b/drivers/gpio/gpiolib.h
@@@ -16,9 -16,6 +16,12 @@@
  #include <linux/module.h>
  #include <linux/cdev.h>
  
++<<<<<<< HEAD
 +enum of_gpio_flags;
 +struct acpi_device;
 +
++=======
++>>>>>>> 77cb907abe6c (gpiolib: acpi: Split ACPI stuff to gpiolib-acpi.h)
  /**
   * struct gpio_device - internal state container for GPIO devices
   * @id: numerical ID number for the GPIO chip
@@@ -72,123 -69,6 +75,106 @@@ struct gpio_device 
  /* gpio suffixes used for ACPI and device tree lookup */
  static __maybe_unused const char * const gpio_suffixes[] = { "gpios", "gpio" };
  
++<<<<<<< HEAD
 +#ifdef CONFIG_OF_GPIO
 +struct gpio_desc *of_find_gpio(struct device *dev,
 +			       const char *con_id,
 +			       unsigned int idx,
 +			       unsigned long *lookupflags);
 +struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 +		   const char *list_name, int index, enum of_gpio_flags *flags);
 +int of_gpiochip_add(struct gpio_chip *gc);
 +void of_gpiochip_remove(struct gpio_chip *gc);
 +#else
 +static inline struct gpio_desc *of_find_gpio(struct device *dev,
 +					     const char *con_id,
 +					     unsigned int idx,
 +					     unsigned long *lookupflags)
 +{
 +	return ERR_PTR(-ENOENT);
 +}
 +static inline struct gpio_desc *of_get_named_gpiod_flags(struct device_node *np,
 +		   const char *list_name, int index, enum of_gpio_flags *flags)
 +{
 +	return ERR_PTR(-ENOENT);
 +}
 +static inline int of_gpiochip_add(struct gpio_chip *gc) { return 0; }
 +static inline void of_gpiochip_remove(struct gpio_chip *gc) { }
 +#endif /* CONFIG_OF_GPIO */
 +
 +#ifdef CONFIG_ACPI
 +void acpi_gpiochip_add(struct gpio_chip *chip);
 +void acpi_gpiochip_remove(struct gpio_chip *chip);
 +
 +void acpi_gpiochip_request_interrupts(struct gpio_chip *chip);
 +void acpi_gpiochip_free_interrupts(struct gpio_chip *chip);
 +
 +int acpi_gpio_update_gpiod_flags(enum gpiod_flags *flags,
 +				 struct acpi_gpio_info *info);
 +int acpi_gpio_update_gpiod_lookup_flags(unsigned long *lookupflags,
 +					struct acpi_gpio_info *info);
 +
 +struct gpio_desc *acpi_find_gpio(struct device *dev,
 +				 const char *con_id,
 +				 unsigned int idx,
 +				 enum gpiod_flags *dflags,
 +				 unsigned long *lookupflags);
 +struct gpio_desc *acpi_node_get_gpiod(struct fwnode_handle *fwnode,
 +				      const char *propname, int index,
 +				      struct acpi_gpio_info *info);
 +
 +int acpi_gpio_count(struct device *dev, const char *con_id);
 +
 +bool acpi_can_fallback_to_crs(struct acpi_device *adev, const char *con_id);
 +#else
 +static inline void acpi_gpiochip_add(struct gpio_chip *chip) { }
 +static inline void acpi_gpiochip_remove(struct gpio_chip *chip) { }
 +
 +static inline void
 +acpi_gpiochip_request_interrupts(struct gpio_chip *chip) { }
 +
 +static inline void
 +acpi_gpiochip_free_interrupts(struct gpio_chip *chip) { }
 +
 +static inline int
 +acpi_gpio_update_gpiod_flags(enum gpiod_flags *flags, struct acpi_gpio_info *info)
 +{
 +	return 0;
 +}
 +static inline int
 +acpi_gpio_update_gpiod_lookup_flags(unsigned long *lookupflags,
 +				    struct acpi_gpio_info *info)
 +{
 +	return 0;
 +}
 +
 +static inline struct gpio_desc *
 +acpi_find_gpio(struct device *dev, const char *con_id,
 +	       unsigned int idx, enum gpiod_flags *dflags,
 +	       unsigned long *lookupflags)
 +{
 +	return ERR_PTR(-ENOENT);
 +}
 +static inline struct gpio_desc *
 +acpi_node_get_gpiod(struct fwnode_handle *fwnode, const char *propname,
 +		    int index, struct acpi_gpio_info *info)
 +{
 +	return ERR_PTR(-ENXIO);
 +}
 +static inline int acpi_gpio_count(struct device *dev, const char *con_id)
 +{
 +	return -ENODEV;
 +}
 +
 +static inline bool acpi_can_fallback_to_crs(struct acpi_device *adev,
 +					    const char *con_id)
 +{
 +	return false;
 +}
 +#endif
 +
++=======
++>>>>>>> 77cb907abe6c (gpiolib: acpi: Split ACPI stuff to gpiolib-acpi.h)
  struct gpio_array {
  	struct gpio_desc	**desc;
  	unsigned int		size;
diff --git a/drivers/gpio/gpio-dwapb.c b/drivers/gpio/gpio-dwapb.c
index 7a2de3de6571..846d2d91907b 100644
--- a/drivers/gpio/gpio-dwapb.c
+++ b/drivers/gpio/gpio-dwapb.c
@@ -30,6 +30,7 @@
 #include <linux/slab.h>
 
 #include "gpiolib.h"
+#include "gpiolib-acpi.h"
 
 #define GPIO_SWPORTA_DR		0x00
 #define GPIO_SWPORTA_DDR	0x04
* Unmerged path drivers/gpio/gpio-mb86s7x.c
diff --git a/drivers/gpio/gpio-xgene-sb.c b/drivers/gpio/gpio-xgene-sb.c
index acd59113e08b..52aa8b8bc7a4 100644
--- a/drivers/gpio/gpio-xgene-sb.c
+++ b/drivers/gpio/gpio-xgene-sb.c
@@ -28,6 +28,7 @@
 #include <linux/acpi.h>
 
 #include "gpiolib.h"
+#include "gpiolib-acpi.h"
 
 /* Common property names */
 #define XGENE_NIRQ_PROPERTY		"apm,nr-irqs"
diff --git a/drivers/gpio/gpiolib-acpi.c b/drivers/gpio/gpiolib-acpi.c
index 64bed0fedbfb..9fe945f77ece 100644
--- a/drivers/gpio/gpiolib-acpi.c
+++ b/drivers/gpio/gpiolib-acpi.c
@@ -19,6 +19,7 @@
 #include <linux/pinctrl/pinctrl.h>
 
 #include "gpiolib.h"
+#include "gpiolib-acpi.h"
 
 static int run_edge_events_on_boot = -1;
 module_param(run_edge_events_on_boot, int, 0444);
diff --git a/drivers/gpio/gpiolib-acpi.h b/drivers/gpio/gpiolib-acpi.h
new file mode 100644
index 000000000000..d7241b432b8b
--- /dev/null
+++ b/drivers/gpio/gpiolib-acpi.h
@@ -0,0 +1,104 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * ACPI helpers for GPIO API
+ *
+ * Copyright (C) 2012,2019 Intel Corporation
+ */
+
+#ifndef GPIOLIB_ACPI_H
+#define GPIOLIB_ACPI_H
+
+struct acpi_device;
+
+/**
+ * struct acpi_gpio_info - ACPI GPIO specific information
+ * @adev: reference to ACPI device which consumes GPIO resource
+ * @flags: GPIO initialization flags
+ * @gpioint: if %true this GPIO is of type GpioInt otherwise type is GpioIo
+ * @pin_config: pin bias as provided by ACPI
+ * @polarity: interrupt polarity as provided by ACPI
+ * @triggering: triggering type as provided by ACPI
+ * @quirks: Linux specific quirks as provided by struct acpi_gpio_mapping
+ */
+struct acpi_gpio_info {
+	struct acpi_device *adev;
+	enum gpiod_flags flags;
+	bool gpioint;
+	int pin_config;
+	int polarity;
+	int triggering;
+	unsigned int quirks;
+};
+
+#ifdef CONFIG_ACPI
+void acpi_gpiochip_add(struct gpio_chip *chip);
+void acpi_gpiochip_remove(struct gpio_chip *chip);
+
+void acpi_gpiochip_request_interrupts(struct gpio_chip *chip);
+void acpi_gpiochip_free_interrupts(struct gpio_chip *chip);
+
+int acpi_gpio_update_gpiod_flags(enum gpiod_flags *flags,
+				 struct acpi_gpio_info *info);
+int acpi_gpio_update_gpiod_lookup_flags(unsigned long *lookupflags,
+					struct acpi_gpio_info *info);
+
+struct gpio_desc *acpi_find_gpio(struct device *dev,
+				 const char *con_id,
+				 unsigned int idx,
+				 enum gpiod_flags *dflags,
+				 unsigned long *lookupflags);
+struct gpio_desc *acpi_node_get_gpiod(struct fwnode_handle *fwnode,
+				      const char *propname, int index,
+				      struct acpi_gpio_info *info);
+
+int acpi_gpio_count(struct device *dev, const char *con_id);
+
+bool acpi_can_fallback_to_crs(struct acpi_device *adev, const char *con_id);
+#else
+static inline void acpi_gpiochip_add(struct gpio_chip *chip) { }
+static inline void acpi_gpiochip_remove(struct gpio_chip *chip) { }
+
+static inline void
+acpi_gpiochip_request_interrupts(struct gpio_chip *chip) { }
+
+static inline void
+acpi_gpiochip_free_interrupts(struct gpio_chip *chip) { }
+
+static inline int
+acpi_gpio_update_gpiod_flags(enum gpiod_flags *flags, struct acpi_gpio_info *info)
+{
+	return 0;
+}
+static inline int
+acpi_gpio_update_gpiod_lookup_flags(unsigned long *lookupflags,
+				    struct acpi_gpio_info *info)
+{
+	return 0;
+}
+
+static inline struct gpio_desc *
+acpi_find_gpio(struct device *dev, const char *con_id,
+	       unsigned int idx, enum gpiod_flags *dflags,
+	       unsigned long *lookupflags)
+{
+	return ERR_PTR(-ENOENT);
+}
+static inline struct gpio_desc *
+acpi_node_get_gpiod(struct fwnode_handle *fwnode, const char *propname,
+		    int index, struct acpi_gpio_info *info)
+{
+	return ERR_PTR(-ENXIO);
+}
+static inline int acpi_gpio_count(struct device *dev, const char *con_id)
+{
+	return -ENODEV;
+}
+
+static inline bool acpi_can_fallback_to_crs(struct acpi_device *adev,
+					    const char *con_id)
+{
+	return false;
+}
+#endif
+
+#endif /* GPIOLIB_ACPI_H */
* Unmerged path drivers/gpio/gpiolib.c
* Unmerged path drivers/gpio/gpiolib.h
