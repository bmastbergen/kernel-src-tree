mei: no need to check return value of debugfs_create functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 5666d896e838c974c535b3949353c83d68ce4384
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5666d896.failed

When calling debugfs functions, there is no need to ever check the
return value.  The function can work or not, but the code logic should
never do something different based on this.

	Cc: Tomas Winkler <tomas.winkler@intel.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 5666d896e838c974c535b3949353c83d68ce4384)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/debugfs.c
diff --cc drivers/misc/mei/debugfs.c
index 47cfd5005e1b,df6bf8b81936..000000000000
--- a/drivers/misc/mei/debugfs.c
+++ b/drivers/misc/mei/debugfs.c
@@@ -154,46 -233,22 +154,53 @@@ void mei_dbgfs_deregister(struct mei_de
   *
   * @dev: the mei device structure
   * @name: the mei device name
-  *
-  * Return: 0 on success, <0 on failure.
   */
- int mei_dbgfs_register(struct mei_device *dev, const char *name)
+ void mei_dbgfs_register(struct mei_device *dev, const char *name)
  {
- 	struct dentry *dir, *f;
+ 	struct dentry *dir;
  
  	dir = debugfs_create_dir(name, NULL);
- 	if (!dir)
- 		return -ENOMEM;
- 
  	dev->dbgfs_dir = dir;
  
++<<<<<<< HEAD
 +	f = debugfs_create_file("meclients", S_IRUSR, dir,
 +				dev, &mei_dbgfs_meclients_fops);
 +	if (!f) {
 +		dev_err(dev->dev, "meclients: registration failed\n");
 +		goto err;
 +	}
 +	f = debugfs_create_file("active", S_IRUSR, dir,
 +				dev, &mei_dbgfs_active_fops);
 +	if (!f) {
 +		dev_err(dev->dev, "active: registration failed\n");
 +		goto err;
 +	}
 +	f = debugfs_create_file("devstate", S_IRUSR, dir,
 +				dev, &mei_dbgfs_devstate_fops);
 +	if (!f) {
 +		dev_err(dev->dev, "devstate: registration failed\n");
 +		goto err;
 +	}
 +	f = debugfs_create_file("allow_fixed_address", S_IRUSR | S_IWUSR, dir,
 +				&dev->allow_fixed_address,
 +				&mei_dbgfs_allow_fa_fops);
 +	if (!f) {
 +		dev_err(dev->dev, "allow_fixed_address: registration failed\n");
 +		goto err;
 +	}
 +	return 0;
 +err:
 +	mei_dbgfs_deregister(dev);
 +	return -ENODEV;
++=======
+ 	debugfs_create_file("meclients", S_IRUSR, dir, dev,
+ 			    &mei_dbgfs_fops_meclients);
+ 	debugfs_create_file("active", S_IRUSR, dir, dev,
+ 			    &mei_dbgfs_fops_active);
+ 	debugfs_create_file("devstate", S_IRUSR, dir, dev,
+ 			    &mei_dbgfs_fops_devstate);
+ 	debugfs_create_file("allow_fixed_address", S_IRUSR | S_IWUSR, dir,
+ 			    &dev->allow_fixed_address,
+ 			    &mei_dbgfs_fops_allow_fa);
++>>>>>>> 5666d896e838 (mei: no need to check return value of debugfs_create functions)
  }
 -
* Unmerged path drivers/misc/mei/debugfs.c
diff --git a/drivers/misc/mei/main.c b/drivers/misc/mei/main.c
index ad02097d7fee..f894d1f8a53e 100644
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@ -984,16 +984,10 @@ int mei_register(struct mei_device *dev, struct device *parent)
 		goto err_dev_create;
 	}
 
-	ret = mei_dbgfs_register(dev, dev_name(clsdev));
-	if (ret) {
-		dev_err(clsdev, "cannot register debugfs ret = %d\n", ret);
-		goto err_dev_dbgfs;
-	}
+	mei_dbgfs_register(dev, dev_name(clsdev));
 
 	return 0;
 
-err_dev_dbgfs:
-	device_destroy(mei_class, devno);
 err_dev_create:
 	cdev_del(&dev->cdev);
 err_dev_add:
diff --git a/drivers/misc/mei/mei_dev.h b/drivers/misc/mei/mei_dev.h
index fca832fcac57..f71a023aed3c 100644
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@ -718,13 +718,10 @@ bool mei_hbuf_acquire(struct mei_device *dev);
 bool mei_write_is_idle(struct mei_device *dev);
 
 #if IS_ENABLED(CONFIG_DEBUG_FS)
-int mei_dbgfs_register(struct mei_device *dev, const char *name);
+void mei_dbgfs_register(struct mei_device *dev, const char *name);
 void mei_dbgfs_deregister(struct mei_device *dev);
 #else
-static inline int mei_dbgfs_register(struct mei_device *dev, const char *name)
-{
-	return 0;
-}
+static inline void mei_dbgfs_register(struct mei_device *dev, const char *name) {}
 static inline void mei_dbgfs_deregister(struct mei_device *dev) {}
 #endif /* CONFIG_DEBUG_FS */
 
