libperf: Add PERF_RECORD_HEADER_BUILD_ID 'struct build_id_event' to perf/event.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit ffd337b45b1aedc86b1de3cf8de9a79c10fd3810
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ffd337b4.failed

Move the PERF_RECORD_HEADER_BUILD_ID event definition to libperf's event.h.

In order to keep libperf simple, we switch 'u64/u32/u16/u8'
types used events to their generic '__u*' versions.

Adding the fix value for build_id variable, because it will never
change.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190828135717.7245-7-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ffd337b45b1aedc86b1de3cf8de9a79c10fd3810)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/perf/event.h
diff --cc tools/perf/lib/include/perf/event.h
index 585c9d82dba3,5e6b6d16793c..000000000000
--- a/tools/perf/lib/include/perf/event.h
+++ b/tools/perf/lib/include/perf/event.h
@@@ -6,8 -6,9 +6,9 @@@
  #include <linux/types.h>
  #include <linux/limits.h>
  #include <linux/bpf.h>
+ #include <sys/types.h> /* pid_t */
  
 -struct perf_record_mmap {
 +struct mmap_event {
  	struct perf_event_header header;
  	__u32			 pid, tid;
  	__u64			 start;
@@@ -104,4 -105,87 +105,90 @@@ struct bpf_event 
  	__u8			 tag[BPF_TAG_SIZE];  // prog tag
  };
  
++<<<<<<< HEAD
++=======
+ struct perf_record_sample {
+ 	struct perf_event_header header;
+ 	__u64			 array[];
+ };
+ 
+ struct attr_event {
+ 	struct perf_event_header header;
+ 	struct perf_event_attr	 attr;
+ 	__u64			 id[];
+ };
+ 
+ enum {
+ 	PERF_CPU_MAP__CPUS = 0,
+ 	PERF_CPU_MAP__MASK = 1,
+ };
+ 
+ struct cpu_map_entries {
+ 	__u16			 nr;
+ 	__u16			 cpu[];
+ };
+ 
+ struct cpu_map_mask {
+ 	__u16			 nr;
+ 	__u16			 long_size;
+ 	unsigned long		 mask[];
+ };
+ 
+ struct cpu_map_data {
+ 	__u16			 type;
+ 	char			 data[];
+ };
+ 
+ struct cpu_map_event {
+ 	struct perf_event_header header;
+ 	struct cpu_map_data	 data;
+ };
+ 
+ enum {
+ 	PERF_EVENT_UPDATE__UNIT  = 0,
+ 	PERF_EVENT_UPDATE__SCALE = 1,
+ 	PERF_EVENT_UPDATE__NAME  = 2,
+ 	PERF_EVENT_UPDATE__CPUS  = 3,
+ };
+ 
+ struct event_update_event_cpus {
+ 	struct cpu_map_data	 cpus;
+ };
+ 
+ struct event_update_event_scale {
+ 	double			 scale;
+ };
+ 
+ struct event_update_event {
+ 	struct perf_event_header header;
+ 	__u64			 type;
+ 	__u64			 id;
+ 	char			 data[];
+ };
+ 
+ #define MAX_EVENT_NAME 64
+ 
+ struct perf_trace_event_type {
+ 	__u64			 event_id;
+ 	char			 name[MAX_EVENT_NAME];
+ };
+ 
+ struct event_type_event {
+ 	struct perf_event_header	 header;
+ 	struct perf_trace_event_type	 event_type;
+ };
+ 
+ struct tracing_data_event {
+ 	struct perf_event_header header;
+ 	__u32			 size;
+ };
+ 
+ struct build_id_event {
+ 	struct perf_event_header header;
+ 	pid_t			 pid;
+ 	__u8			 build_id[24];
+ 	char			 filename[];
+ };
+ 
++>>>>>>> ffd337b45b1a (libperf: Add PERF_RECORD_HEADER_BUILD_ID 'struct build_id_event' to perf/event.h)
  #endif /* __LIBPERF_EVENT_H */
* Unmerged path tools/perf/lib/include/perf/event.h
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index ba0ec1b6aad3..3735ffc11007 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -149,13 +149,6 @@ struct perf_sample {
 	 PERF_MEM_S(LOCK, NA) |\
 	 PERF_MEM_S(TLB, NA))
 
-struct build_id_event {
-	struct perf_event_header header;
-	pid_t			 pid;
-	u8			 build_id[PERF_ALIGN(BUILD_ID_SIZE, sizeof(u64))];
-	char			 filename[];
-};
-
 enum perf_user_event_type { /* above any possible kernel type */
 	PERF_RECORD_USER_TYPE_START		= 64,
 	PERF_RECORD_HEADER_ATTR			= 64,
