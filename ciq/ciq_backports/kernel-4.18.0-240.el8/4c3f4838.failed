dm mpath: enhance queue_if_no_path debugging

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Mike Snitzer <snitzer@redhat.com>
commit 4c3f48380fedbd714fc95958f503c1b5adf3ee6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4c3f4838.failed

Add more DMDEBUG that shows arguments passed and caller, and another
that shows state of related flags at end of queue_if_no_path().

Also add queue_if_no_path DMDEBUG to multipath_resume().

	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 4c3f48380fedbd714fc95958f503c1b5adf3ee6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-mpath.c
diff --cc drivers/md/dm-mpath.c
index 2e96c8990089,b17da3046611..000000000000
--- a/drivers/md/dm-mpath.c
+++ b/drivers/md/dm-mpath.c
@@@ -750,6 -735,43 +760,46 @@@ static int queue_if_no_path(struct mult
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * If the queue_if_no_path timeout fires, turn off queue_if_no_path and
+  * process any queued I/O.
+  */
+ static void queue_if_no_path_timeout_work(struct timer_list *t)
+ {
+ 	struct multipath *m = from_timer(m, t, nopath_timer);
+ 	struct mapped_device *md = dm_table_get_md(m->ti->table);
+ 
+ 	DMWARN("queue_if_no_path timeout on %s, failing queued IO", dm_device_name(md));
+ 	queue_if_no_path(m, false, false, __func__);
+ }
+ 
+ /*
+  * Enable the queue_if_no_path timeout if necessary.
+  * Called with m->lock held.
+  */
+ static void enable_nopath_timeout(struct multipath *m)
+ {
+ 	unsigned long queue_if_no_path_timeout =
+ 		READ_ONCE(queue_if_no_path_timeout_secs) * HZ;
+ 
+ 	lockdep_assert_held(&m->lock);
+ 
+ 	if (queue_if_no_path_timeout > 0 &&
+ 	    atomic_read(&m->nr_valid_paths) == 0 &&
+ 	    test_bit(MPATHF_QUEUE_IF_NO_PATH, &m->flags)) {
+ 		mod_timer(&m->nopath_timer,
+ 			  jiffies + queue_if_no_path_timeout);
+ 	}
+ }
+ 
+ static void disable_nopath_timeout(struct multipath *m)
+ {
+ 	del_timer_sync(&m->nopath_timer);
+ }
+ 
+ /*
++>>>>>>> 4c3f48380fed (dm mpath: enhance queue_if_no_path debugging)
   * An event is triggered whenever a path is taken out of use.
   * Includes path failure and PG bypass.
   */
@@@ -1836,10 -1878,14 +1892,21 @@@ static int multipath_message(struct dm_
  
  	if (argc == 1) {
  		if (!strcasecmp(argv[0], "queue_if_no_path")) {
++<<<<<<< HEAD
 +			r = queue_if_no_path(m, true, false);
 +			goto out;
 +		} else if (!strcasecmp(argv[0], "fail_if_no_path")) {
 +			r = queue_if_no_path(m, false, false);
++=======
+ 			r = queue_if_no_path(m, true, false, __func__);
+ 			spin_lock_irqsave(&m->lock, flags);
+ 			enable_nopath_timeout(m);
+ 			spin_unlock_irqrestore(&m->lock, flags);
+ 			goto out;
+ 		} else if (!strcasecmp(argv[0], "fail_if_no_path")) {
+ 			r = queue_if_no_path(m, false, false, __func__);
+ 			disable_nopath_timeout(m);
++>>>>>>> 4c3f48380fed (dm mpath: enhance queue_if_no_path debugging)
  			goto out;
  		}
  	}
* Unmerged path drivers/md/dm-mpath.c
