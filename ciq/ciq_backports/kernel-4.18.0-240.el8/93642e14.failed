net: introduce dev_net notifier register/unregister variants

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] introduce dev_net notifier register/unregister variants (Ivan Vecera) [1818102]
Rebuild_FUZZ: 95.65%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 93642e14bd50e59b11cf6389ce3fc243e932777a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/93642e14.failed

Introduce dev_net variants of netdev notifier register/unregister functions
and allow per-net notifier to follow the netdevice into the namespace it is
moved to.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 93642e14bd50e59b11cf6389ce3fc243e932777a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index 4bd94d67974c,4626188a754b..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -987,10 -926,24 +987,15 @@@ struct dev_ifalias 
  	char ifalias[];
  };
  
 -struct devlink;
 -struct tlsdev_ops;
 -
 -struct netdev_name_node {
 -	struct hlist_node hlist;
 -	struct list_head list;
 -	struct net_device *dev;
 -	const char *name;
 +struct net_device_ops_extended_rh {
  };
 -
 -int netdev_name_node_alt_create(struct net_device *dev, const char *name);
 -int netdev_name_node_alt_destroy(struct net_device *dev, const char *name);
 +struct devlink;
  
+ struct netdev_net_notifier {
+ 	struct list_head list;
+ 	struct notifier_block *nb;
+ };
+ 
  /*
   * This structure defines the management hooks for network devices.
   * The following hooks can be defined; unless noted otherwise, they are
@@@ -2183,45 -2088,14 +2192,51 @@@ struct net_device 
  #endif
  	struct phy_device	*phydev;
  	struct sfp_bus		*sfp_bus;
 -	struct lock_class_key	qdisc_tx_busylock_key;
 -	struct lock_class_key	qdisc_running_key;
 -	struct lock_class_key	qdisc_xmit_lock_key;
 -	struct lock_class_key	addr_list_lock_key;
 +	struct lock_class_key	*qdisc_tx_busylock;
 +	struct lock_class_key	*qdisc_running_key;
  	bool			proto_down;
++<<<<<<< HEAD
 +	RH_KABI_FILL_HOLE(unsigned	wol_enabled:1)
 +
 +	/* 23 bits hole remain and... */
 +	/* 4 bytes hole remain prior RH_KABI reservations below */
 +
 +	RH_KABI_USE(1, struct mpls_dev __rcu   *mpls_ptr)
 +	RH_KABI_RESERVE(2)
 +	RH_KABI_RESERVE(3)
 +	RH_KABI_RESERVE(4)
 +	RH_KABI_RESERVE(5)
 +	RH_KABI_RESERVE(6)
 +	RH_KABI_RESERVE(7)
 +	RH_KABI_RESERVE(8)
 +	RH_KABI_RESERVE(9)
 +	RH_KABI_RESERVE(10)
 +	RH_KABI_RESERVE(11)
 +	RH_KABI_RESERVE(12)
 +	RH_KABI_RESERVE(13)
 +	RH_KABI_RESERVE(14)
 +	RH_KABI_RESERVE(15)
 +	RH_KABI_RESERVE(16)
 +	RH_KABI_RESERVE(17)
 +	RH_KABI_RESERVE(18)
 +	RH_KABI_RESERVE(19)
 +	RH_KABI_RESERVE(20)
 +	RH_KABI_RESERVE(21)
 +	RH_KABI_RESERVE(22)
 +	RH_KABI_RESERVE(23)
 +	RH_KABI_RESERVE(24)
 +	RH_KABI_RESERVE(25)
 +	RH_KABI_RESERVE(26)
 +	RH_KABI_RESERVE(27)
 +	RH_KABI_RESERVE(28)
 +	RH_KABI_RESERVE(29)
 +	RH_KABI_RESERVE(30)
 +	RH_KABI_SIZE_AND_EXTEND_PTR(net_device_extended)
++=======
+ 	unsigned		wol_enabled:1;
+ 
+ 	struct list_head	net_notifier_list;
++>>>>>>> 93642e14bd50 (net: introduce dev_net notifier register/unregister variants)
  };
  #define to_net_dev(d) container_of(d, struct net_device, dev)
  
@@@ -2672,6 -2537,15 +2687,18 @@@ const char *netdev_cmd_to_name(enum net
  
  int register_netdevice_notifier(struct notifier_block *nb);
  int unregister_netdevice_notifier(struct notifier_block *nb);
++<<<<<<< HEAD
++=======
+ int register_netdevice_notifier_net(struct net *net, struct notifier_block *nb);
+ int unregister_netdevice_notifier_net(struct net *net,
+ 				      struct notifier_block *nb);
+ int register_netdevice_notifier_dev_net(struct net_device *dev,
+ 					struct notifier_block *nb,
+ 					struct netdev_net_notifier *nn);
+ int unregister_netdevice_notifier_dev_net(struct net_device *dev,
+ 					  struct notifier_block *nb,
+ 					  struct netdev_net_notifier *nn);
++>>>>>>> 93642e14bd50 (net: introduce dev_net notifier register/unregister variants)
  
  struct netdev_notifier_info {
  	struct net_device	*dev;
diff --cc net/core/dev.c
index fa297e42a858,38bc35da39f7..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -1752,6 -1784,138 +1752,141 @@@ unlock
  }
  EXPORT_SYMBOL(unregister_netdevice_notifier);
  
++<<<<<<< HEAD
++=======
+ static int __register_netdevice_notifier_net(struct net *net,
+ 					     struct notifier_block *nb,
+ 					     bool ignore_call_fail)
+ {
+ 	int err;
+ 
+ 	err = raw_notifier_chain_register(&net->netdev_chain, nb);
+ 	if (err)
+ 		return err;
+ 	if (dev_boot_phase)
+ 		return 0;
+ 
+ 	err = call_netdevice_register_net_notifiers(nb, net);
+ 	if (err && !ignore_call_fail)
+ 		goto chain_unregister;
+ 
+ 	return 0;
+ 
+ chain_unregister:
+ 	raw_notifier_chain_unregister(&net->netdev_chain, nb);
+ 	return err;
+ }
+ 
+ static int __unregister_netdevice_notifier_net(struct net *net,
+ 					       struct notifier_block *nb)
+ {
+ 	int err;
+ 
+ 	err = raw_notifier_chain_unregister(&net->netdev_chain, nb);
+ 	if (err)
+ 		return err;
+ 
+ 	call_netdevice_unregister_net_notifiers(nb, net);
+ 	return 0;
+ }
+ 
+ /**
+  * register_netdevice_notifier_net - register a per-netns network notifier block
+  * @net: network namespace
+  * @nb: notifier
+  *
+  * Register a notifier to be called when network device events occur.
+  * The notifier passed is linked into the kernel structures and must
+  * not be reused until it has been unregistered. A negative errno code
+  * is returned on a failure.
+  *
+  * When registered all registration and up events are replayed
+  * to the new notifier to allow device to have a race free
+  * view of the network device list.
+  */
+ 
+ int register_netdevice_notifier_net(struct net *net, struct notifier_block *nb)
+ {
+ 	int err;
+ 
+ 	rtnl_lock();
+ 	err = __register_netdevice_notifier_net(net, nb, false);
+ 	rtnl_unlock();
+ 	return err;
+ }
+ EXPORT_SYMBOL(register_netdevice_notifier_net);
+ 
+ /**
+  * unregister_netdevice_notifier_net - unregister a per-netns
+  *                                     network notifier block
+  * @net: network namespace
+  * @nb: notifier
+  *
+  * Unregister a notifier previously registered by
+  * register_netdevice_notifier(). The notifier is unlinked into the
+  * kernel structures and may then be reused. A negative errno code
+  * is returned on a failure.
+  *
+  * After unregistering unregister and down device events are synthesized
+  * for all devices on the device list to the removed notifier to remove
+  * the need for special case cleanup code.
+  */
+ 
+ int unregister_netdevice_notifier_net(struct net *net,
+ 				      struct notifier_block *nb)
+ {
+ 	int err;
+ 
+ 	rtnl_lock();
+ 	err = __unregister_netdevice_notifier_net(net, nb);
+ 	rtnl_unlock();
+ 	return err;
+ }
+ EXPORT_SYMBOL(unregister_netdevice_notifier_net);
+ 
+ int register_netdevice_notifier_dev_net(struct net_device *dev,
+ 					struct notifier_block *nb,
+ 					struct netdev_net_notifier *nn)
+ {
+ 	int err;
+ 
+ 	rtnl_lock();
+ 	err = __register_netdevice_notifier_net(dev_net(dev), nb, false);
+ 	if (!err) {
+ 		nn->nb = nb;
+ 		list_add(&nn->list, &dev->net_notifier_list);
+ 	}
+ 	rtnl_unlock();
+ 	return err;
+ }
+ EXPORT_SYMBOL(register_netdevice_notifier_dev_net);
+ 
+ int unregister_netdevice_notifier_dev_net(struct net_device *dev,
+ 					  struct notifier_block *nb,
+ 					  struct netdev_net_notifier *nn)
+ {
+ 	int err;
+ 
+ 	rtnl_lock();
+ 	list_del(&nn->list);
+ 	err = __unregister_netdevice_notifier_net(dev_net(dev), nb);
+ 	rtnl_unlock();
+ 	return err;
+ }
+ EXPORT_SYMBOL(unregister_netdevice_notifier_dev_net);
+ 
+ static void move_netdevice_notifiers_dev_net(struct net_device *dev,
+ 					     struct net *net)
+ {
+ 	struct netdev_net_notifier *nn;
+ 
+ 	list_for_each_entry(nn, &dev->net_notifier_list, list) {
+ 		__unregister_netdevice_notifier_net(dev_net(dev), nn->nb);
+ 		__register_netdevice_notifier_net(net, nn->nb, true);
+ 	}
+ }
+ 
++>>>>>>> 93642e14bd50 (net: introduce dev_net notifier register/unregister variants)
  /**
   *	call_netdevice_notifiers_info - call all network notifier blocks
   *	@val: value passed unmodified to notifier function
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev.c
