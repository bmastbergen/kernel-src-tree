vfs: Add file timestamp range support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Deepa Dinamani <deepa.kernel@gmail.com>
commit 188d20bcd1ebd8277d9b8a79525bd66b66d40a2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/188d20bc.failed

Add fields to the superblock to track the min and max
timestamps supported by filesystems.

Initially, when a superblock is allocated, initialize
it to the max and min values the fields can hold.
Individual filesystems override these to match their
actual limits.

Pseudo filesystems are assumed to always support the
min and max allowable values for the fields.

	Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
	Acked-by: Jeff Layton <jlayton@kernel.org>
(cherry picked from commit 188d20bcd1ebd8277d9b8a79525bd66b66d40a2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/fs.h
diff --cc include/linux/fs.h
index 652bd41d3698,4b349851b00c..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -1403,6 -1439,23 +1403,26 @@@ struct super_block 
  
  	struct sb_writers	s_writers;
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Keep s_fs_info, s_time_gran, s_fsnotify_mask, and
+ 	 * s_fsnotify_marks together for cache efficiency. They are frequently
+ 	 * accessed and rarely modified.
+ 	 */
+ 	void			*s_fs_info;	/* Filesystem private info */
+ 
+ 	/* Granularity of c/m/atime in ns (cannot be worse than a second) */
+ 	u32			s_time_gran;
+ 	/* Time limits for c/m/atime in seconds */
+ 	time64_t		   s_time_min;
+ 	time64_t		   s_time_max;
+ #ifdef CONFIG_FSNOTIFY
+ 	__u32			s_fsnotify_mask;
+ 	struct fsnotify_mark_connector __rcu	*s_fsnotify_marks;
+ #endif
+ 
++>>>>>>> 188d20bcd1eb (vfs: Add file timestamp range support)
  	char			s_id[32];	/* Informational name */
  	uuid_t			s_uuid;		/* UUID */
  
diff --git a/fs/super.c b/fs/super.c
index f3a8c008e164..ad13de87fa00 100644
--- a/fs/super.c
+++ b/fs/super.c
@@ -255,6 +255,8 @@ static struct super_block *alloc_super(struct file_system_type *type, int flags,
 	s->s_maxbytes = MAX_NON_LFS;
 	s->s_op = &default_op;
 	s->s_time_gran = 1000000000;
+	s->s_time_min = TIME64_MIN;
+	s->s_time_max = TIME64_MAX;
 	s->cleancache_poolid = CLEANCACHE_NO_POOL;
 
 	s->s_shrink.seeks = DEFAULT_SEEKS;
* Unmerged path include/linux/fs.h
diff --git a/include/linux/time64.h b/include/linux/time64.h
index 0a7b2f79cec7..553800bc3652 100644
--- a/include/linux/time64.h
+++ b/include/linux/time64.h
@@ -37,6 +37,8 @@ struct itimerspec64 {
 
 /* Located here for timespec[64]_valid_strict */
 #define TIME64_MAX			((s64)~((u64)1 << 63))
+#define TIME64_MIN			(-TIME64_MAX - 1)
+
 #define KTIME_MAX			((s64)~((u64)1 << 63))
 #define KTIME_SEC_MAX			(KTIME_MAX / NSEC_PER_SEC)
 
