perf expr: Make expr__parse() return -1 on error

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit d942815a76463fa53b81d3d1c064f76bb3f80ead
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d942815a.failed

To match the error value of the expr__find_other function, so all
exported expr functions return the same values:
0 on success, -1 on error.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Reviewed-by: Andi Kleen <ak@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: John Garry <john.garry@huawei.com>
	Cc: Kajol Jain <kjain@linux.ibm.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
Link: http://lore.kernel.org/lkml/20200228093616.67125-6-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d942815a76463fa53b81d3d1c064f76bb3f80ead)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/expr.c
#	tools/perf/util/expr.c
diff --cc tools/perf/tests/expr.c
index ee1d88650e69,28313e59d6f6..000000000000
--- a/tools/perf/tests/expr.c
+++ b/tools/perf/tests/expr.c
@@@ -43,12 -44,12 +43,21 @@@ int test__expr(struct test *t __maybe_u
  		return ret;
  
  	p = "FOO/0";
++<<<<<<< HEAD
 +	ret = expr__parse(&val, &ctx, &p);
 +	TEST_ASSERT_VAL("division by zero", ret == 1);
 +
 +	p = "BAR/";
 +	ret = expr__parse(&val, &ctx, &p);
 +	TEST_ASSERT_VAL("missing operand", ret == 1);
++=======
+ 	ret = expr__parse(&val, &ctx, p);
+ 	TEST_ASSERT_VAL("division by zero", ret == -1);
+ 
+ 	p = "BAR/";
+ 	ret = expr__parse(&val, &ctx, p);
+ 	TEST_ASSERT_VAL("missing operand", ret == -1);
++>>>>>>> d942815a7646 (perf expr: Make expr__parse() return -1 on error)
  
  	TEST_ASSERT_VAL("find other",
  			expr__find_other("FOO + BAR + BAZ + BOZO", "FOO", &other, &num_other) == 0);
diff --cc tools/perf/util/expr.c
index b39fd39f10ec,fd192ddf93c1..000000000000
--- a/tools/perf/util/expr.c
+++ b/tools/perf/util/expr.c
@@@ -52,9 -52,9 +52,13 @@@ __expr__parse(double *val, struct parse
  	return ret;
  }
  
 -int expr__parse(double *final_val, struct parse_ctx *ctx, const char *expr)
 +int expr__parse(double *final_val, struct parse_ctx *ctx, const char **pp)
  {
++<<<<<<< HEAD
 +	return __expr__parse(final_val, ctx, *pp, EXPR_PARSE);
++=======
+ 	return __expr__parse(final_val, ctx, expr, EXPR_PARSE) ? -1 : 0;
++>>>>>>> d942815a7646 (perf expr: Make expr__parse() return -1 on error)
  }
  
  static bool
* Unmerged path tools/perf/tests/expr.c
* Unmerged path tools/perf/util/expr.c
