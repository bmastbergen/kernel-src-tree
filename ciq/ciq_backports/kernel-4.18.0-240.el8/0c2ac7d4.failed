Bluetooth: Use list_for_each_entry_rcu() to traverse RCU list in RCU read-side CS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
commit 0c2ac7d4f08d330dc5b092b4beba9ef88602d369
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0c2ac7d4.failed

In function hci_is_blocked_key() RCU list is traversed with
list_for_each_entry() in RCU read-side CS.
Use list_for_each_entry_rcu() instead.

	Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 0c2ac7d4f08d330dc5b092b4beba9ef88602d369)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/hci_core.c
diff --cc net/bluetooth/hci_core.c
index 692fa43be8ec,4e6d61a95b20..000000000000
--- a/net/bluetooth/hci_core.c
+++ b/net/bluetooth/hci_core.c
@@@ -2189,6 -2311,33 +2189,36 @@@ void hci_smp_irks_clear(struct hci_dev 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void hci_blocked_keys_clear(struct hci_dev *hdev)
+ {
+ 	struct blocked_key *b;
+ 
+ 	list_for_each_entry(b, &hdev->blocked_keys, list) {
+ 		list_del_rcu(&b->list);
+ 		kfree_rcu(b, rcu);
+ 	}
+ }
+ 
+ bool hci_is_blocked_key(struct hci_dev *hdev, u8 type, u8 val[16])
+ {
+ 	bool blocked = false;
+ 	struct blocked_key *b;
+ 
+ 	rcu_read_lock();
+ 	list_for_each_entry_rcu(b, &hdev->blocked_keys, list) {
+ 		if (b->type == type && !memcmp(b->val, val, sizeof(b->val))) {
+ 			blocked = true;
+ 			break;
+ 		}
+ 	}
+ 
+ 	rcu_read_unlock();
+ 	return blocked;
+ }
+ 
++>>>>>>> 0c2ac7d4f08d (Bluetooth: Use list_for_each_entry_rcu() to traverse RCU list in RCU read-side CS)
  struct link_key *hci_find_link_key(struct hci_dev *hdev, bdaddr_t *bdaddr)
  {
  	struct link_key *k;
* Unmerged path net/bluetooth/hci_core.c
