perf evlist: Adopt __set_tracepoint_handlers method from perf_session

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit c0e53476ab5087353547cbcd37f001d98941326c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c0e53476.failed

It all operates on the evsels in the session's evlist, so move it to the
evlist layer to make it useful to tools not using perf_session, just
evlists, like 'perf trace' in live mode.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-9oc53gnfi53vg82fvolkm85g@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit c0e53476ab5087353547cbcd37f001d98941326c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evlist.h
#	tools/perf/util/session.c
#	tools/perf/util/session.h
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,00eab9435847..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -95,16 -111,23 +95,27 @@@ int perf_evlist__add_sb_event(struct pe
  			      struct perf_event_attr *attr,
  			      perf_evsel__sb_cb_t cb,
  			      void *data);
 -int perf_evlist__start_sb_thread(struct evlist *evlist,
 +int perf_evlist__start_sb_thread(struct perf_evlist *evlist,
  				 struct target *target);
 -void perf_evlist__stop_sb_thread(struct evlist *evlist);
 +void perf_evlist__stop_sb_thread(struct perf_evlist *evlist);
  
 -int perf_evlist__add_newtp(struct evlist *evlist,
 +int perf_evlist__add_newtp(struct perf_evlist *evlist,
  			   const char *sys, const char *name, void *handler);
  
++<<<<<<< HEAD
 +void __perf_evlist__set_sample_bit(struct perf_evlist *evlist,
++=======
+ int __evlist__set_tracepoints_handlers(struct evlist *evlist,
+ 				       const struct evsel_str_handler *assocs,
+ 				       size_t nr_assocs);
+ 
+ #define evlist__set_tracepoints_handlers(evlist, array) \
+ 	__evlist__set_tracepoints_handlers(evlist, array, ARRAY_SIZE(array))
+ 
+ void __perf_evlist__set_sample_bit(struct evlist *evlist,
++>>>>>>> c0e53476ab50 (perf evlist: Adopt __set_tracepoint_handlers method from perf_session)
  				   enum perf_event_sample_format bit);
 -void __perf_evlist__reset_sample_bit(struct evlist *evlist,
 +void __perf_evlist__reset_sample_bit(struct perf_evlist *evlist,
  				     enum perf_event_sample_format bit);
  
  #define perf_evlist__set_sample_bit(evlist, bit) \
diff --cc tools/perf/util/session.c
index f17051057db0,6cc32f5ec043..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -2358,35 -2355,6 +2358,38 @@@ void perf_session__fprintf_info(struct 
  	fprintf(fp, "# ========\n#\n");
  }
  
++<<<<<<< HEAD
 +
 +int __perf_session__set_tracepoints_handlers(struct perf_session *session,
 +					     const struct perf_evsel_str_handler *assocs,
 +					     size_t nr_assocs)
 +{
 +	struct perf_evsel *evsel;
 +	size_t i;
 +	int err;
 +
 +	for (i = 0; i < nr_assocs; i++) {
 +		/*
 +		 * Adding a handler for an event not in the session,
 +		 * just ignore it.
 +		 */
 +		evsel = perf_evlist__find_tracepoint_by_name(session->evlist, assocs[i].name);
 +		if (evsel == NULL)
 +			continue;
 +
 +		err = -EEXIST;
 +		if (evsel->handler != NULL)
 +			goto out;
 +		evsel->handler = assocs[i].handler;
 +	}
 +
 +	err = 0;
 +out:
 +	return err;
 +}
 +
++=======
++>>>>>>> c0e53476ab50 (perf evlist: Adopt __set_tracepoint_handlers method from perf_session)
  int perf_event__process_id_index(struct perf_session *session,
  				 union perf_event *event)
  {
diff --cc tools/perf/util/session.h
index 863dbad87849,8456e1d868fd..000000000000
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@@ -118,14 -118,10 +118,17 @@@ int perf_session__cpu_bitmap(struct per
  
  void perf_session__fprintf_info(struct perf_session *s, FILE *fp, bool full);
  
 -struct evsel_str_handler;
 +struct perf_evsel_str_handler;
  
++<<<<<<< HEAD
 +int __perf_session__set_tracepoints_handlers(struct perf_session *session,
 +					     const struct perf_evsel_str_handler *assocs,
 +					     size_t nr_assocs);
 +
++=======
++>>>>>>> c0e53476ab50 (perf evlist: Adopt __set_tracepoint_handlers method from perf_session)
  #define perf_session__set_tracepoints_handlers(session, array) \
- 	__perf_session__set_tracepoints_handlers(session, array, ARRAY_SIZE(array))
+ 	__evlist__set_tracepoints_handlers(session->evlist, array, ARRAY_SIZE(array))
  
  extern volatile int session_done;
  
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 29a998d183ce..82a5755bfe31 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -212,6 +212,30 @@ void perf_evlist__splice_list_tail(struct perf_evlist *evlist,
 	}
 }
 
+int __evlist__set_tracepoints_handlers(struct evlist *evlist,
+				       const struct evsel_str_handler *assocs, size_t nr_assocs)
+{
+	struct evsel *evsel;
+	size_t i;
+	int err;
+
+	for (i = 0; i < nr_assocs; i++) {
+		// Adding a handler for an event not in this evlist, just ignore it.
+		evsel = perf_evlist__find_tracepoint_by_name(evlist, assocs[i].name);
+		if (evsel == NULL)
+			continue;
+
+		err = -EEXIST;
+		if (evsel->handler != NULL)
+			goto out;
+		evsel->handler = assocs[i].handler;
+	}
+
+	err = 0;
+out:
+	return err;
+}
+
 void __perf_evlist__set_leader(struct list_head *list)
 {
 	struct perf_evsel *evsel, *leader;
* Unmerged path tools/perf/util/evlist.h
* Unmerged path tools/perf/util/session.c
* Unmerged path tools/perf/util/session.h
