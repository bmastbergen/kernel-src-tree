jbd2: move the clearing of b_modified flag to the journal_unmap_buffer()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author zhangyi (F) <yi.zhang@huawei.com>
commit 6a66a7ded12baa6ebbb2e3e82f8cb91382814839
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6a66a7de.failed

There is no need to delay the clearing of b_modified flag to the
transaction committing time when unmapping the journalled buffer, so
just move it to the journal_unmap_buffer().

Link: https://lore.kernel.org/r/20200213063821.30455-2-yi.zhang@huawei.com
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@kernel.org
(cherry picked from commit 6a66a7ded12baa6ebbb2e3e82f8cb91382814839)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/jbd2/transaction.c
diff --cc fs/jbd2/transaction.c
index 990e7b5062e7,2dd848a743ed..000000000000
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@@ -2301,10 -2338,11 +2302,17 @@@ static int journal_unmap_buffer(journal
  		set_buffer_freed(bh);
  		if (journal->j_running_transaction && buffer_jbddirty(bh))
  			jh->b_next_transaction = journal->j_running_transaction;
++<<<<<<< HEAD
++=======
+ 		jh->b_modified = 0;
+ 		spin_unlock(&journal->j_list_lock);
+ 		spin_unlock(&jh->b_state_lock);
+ 		write_unlock(&journal->j_state_lock);
++>>>>>>> 6a66a7ded12b (jbd2: move the clearing of b_modified flag to the journal_unmap_buffer())
  		jbd2_journal_put_journal_head(jh);
 +		spin_unlock(&journal->j_list_lock);
 +		jbd_unlock_bh_state(bh);
 +		write_unlock(&journal->j_state_lock);
  		return 0;
  	} else {
  		/* Good, the buffer belongs to the running transaction.
diff --git a/fs/jbd2/commit.c b/fs/jbd2/commit.c
index 132fb92098c7..2d322160dc24 100644
--- a/fs/jbd2/commit.c
+++ b/fs/jbd2/commit.c
@@ -972,34 +972,21 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 		 * it. */
 
 		/*
-		* A buffer which has been freed while still being journaled by
-		* a previous transaction.
-		*/
-		if (buffer_freed(bh)) {
-			/*
-			 * If the running transaction is the one containing
-			 * "add to orphan" operation (b_next_transaction !=
-			 * NULL), we have to wait for that transaction to
-			 * commit before we can really get rid of the buffer.
-			 * So just clear b_modified to not confuse transaction
-			 * credit accounting and refile the buffer to
-			 * BJ_Forget of the running transaction. If the just
-			 * committed transaction contains "add to orphan"
-			 * operation, we can completely invalidate the buffer
-			 * now. We are rather through in that since the
-			 * buffer may be still accessible when blocksize <
-			 * pagesize and it is attached to the last partial
-			 * page.
-			 */
-			jh->b_modified = 0;
-			if (!jh->b_next_transaction) {
-				clear_buffer_freed(bh);
-				clear_buffer_jbddirty(bh);
-				clear_buffer_mapped(bh);
-				clear_buffer_new(bh);
-				clear_buffer_req(bh);
-				bh->b_bdev = NULL;
-			}
+		 * A buffer which has been freed while still being journaled
+		 * by a previous transaction, refile the buffer to BJ_Forget of
+		 * the running transaction. If the just committed transaction
+		 * contains "add to orphan" operation, we can completely
+		 * invalidate the buffer now. We are rather through in that
+		 * since the buffer may be still accessible when blocksize <
+		 * pagesize and it is attached to the last partial page.
+		 */
+		if (buffer_freed(bh) && !jh->b_next_transaction) {
+			clear_buffer_freed(bh);
+			clear_buffer_jbddirty(bh);
+			clear_buffer_mapped(bh);
+			clear_buffer_new(bh);
+			clear_buffer_req(bh);
+			bh->b_bdev = NULL;
 		}
 
 		if (buffer_jbddirty(bh)) {
* Unmerged path fs/jbd2/transaction.c
