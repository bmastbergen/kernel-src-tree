libperf: Adopt perf_mmap__mmap_len() function from tools/perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit bf59b3053e63783520c2810fc3f676553bc7eedd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/bf59b305.failed

Move perf_mmap__mmap_len() from tools/perf wto libperf, it will be used
in the following patches. And rename the existing perf's function to
mmap__mmap_len().

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20191007125344.14268-4-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit bf59b3053e63783520c2810fc3f676553bc7eedd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/lib/mmap.c
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
diff --cc tools/perf/util/mmap.c
index 850493205040,a8e81c4cbae8..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -17,11 -19,13 +17,17 @@@
  #include "debug.h"
  #include "event.h"
  #include "mmap.h"
 -#include "../perf.h"
 -#include <internal/lib.h> /* page_size */
 +#include "util.h" /* page_size */
  
++<<<<<<< HEAD
 +size_t perf_mmap__mmap_len(struct perf_mmap *map)
 +{
 +	return map->mask + 1 + page_size;
++=======
+ size_t mmap__mmap_len(struct mmap *map)
+ {
+ 	return perf_mmap__mmap_len(&map->core);
++>>>>>>> bf59b3053e63 (libperf: Adopt perf_mmap__mmap_len() function from tools/perf)
  }
  
  /* When check_messup is true, 'end' must points to a good entry */
@@@ -164,9 -168,9 +170,9 @@@ static int perf_mmap__aio_enabled(struc
  }
  
  #ifdef HAVE_LIBNUMA_SUPPORT
 -static int perf_mmap__aio_alloc(struct mmap *map, int idx)
 +static int perf_mmap__aio_alloc(struct perf_mmap *map, int idx)
  {
- 	map->aio.data[idx] = mmap(NULL, perf_mmap__mmap_len(map), PROT_READ|PROT_WRITE,
+ 	map->aio.data[idx] = mmap(NULL, mmap__mmap_len(map), PROT_READ|PROT_WRITE,
  				  MAP_PRIVATE|MAP_ANONYMOUS, 0, 0);
  	if (map->aio.data[idx] == MAP_FAILED) {
  		map->aio.data[idx] = NULL;
@@@ -176,10 -180,10 +182,10 @@@
  	return 0;
  }
  
 -static void perf_mmap__aio_free(struct mmap *map, int idx)
 +static void perf_mmap__aio_free(struct perf_mmap *map, int idx)
  {
  	if (map->aio.data[idx]) {
- 		munmap(map->aio.data[idx], perf_mmap__mmap_len(map));
+ 		munmap(map->aio.data[idx], mmap__mmap_len(map));
  		map->aio.data[idx] = NULL;
  	}
  }
@@@ -204,9 -208,9 +210,9 @@@ static int perf_mmap__aio_bind(struct p
  	return 0;
  }
  #else /* !HAVE_LIBNUMA_SUPPORT */
 -static int perf_mmap__aio_alloc(struct mmap *map, int idx)
 +static int perf_mmap__aio_alloc(struct perf_mmap *map, int idx)
  {
- 	map->aio.data[idx] = malloc(perf_mmap__mmap_len(map));
+ 	map->aio.data[idx] = malloc(mmap__mmap_len(map));
  	if (map->aio.data[idx] == NULL)
  		return -1;
  
@@@ -311,14 -315,14 +317,22 @@@ void perf_mmap__munmap(struct perf_mma
  {
  	perf_mmap__aio_munmap(map);
  	if (map->data != NULL) {
- 		munmap(map->data, perf_mmap__mmap_len(map));
+ 		munmap(map->data, mmap__mmap_len(map));
  		map->data = NULL;
  	}
++<<<<<<< HEAD
 +	if (map->base != NULL) {
 +		munmap(map->base, perf_mmap__mmap_len(map));
 +		map->base = NULL;
 +		map->fd = -1;
 +		refcount_set(&map->refcnt, 0);
++=======
+ 	if (map->core.base != NULL) {
+ 		munmap(map->core.base, mmap__mmap_len(map));
+ 		map->core.base = NULL;
+ 		map->core.fd = -1;
+ 		refcount_set(&map->core.refcnt, 0);
++>>>>>>> bf59b3053e63 (libperf: Adopt perf_mmap__mmap_len() function from tools/perf)
  	}
  	auxtrace_mmap__munmap(&map->auxtrace_mmap);
  }
@@@ -364,19 -368,19 +378,26 @@@ int perf_mmap__mmap(struct perf_mmap *m
  	 * evlist layer can't just drop it when filtering events in
  	 * perf_evlist__filter_pollfd().
  	 */
++<<<<<<< HEAD
 +	refcount_set(&map->refcnt, 2);
 +	map->prev = 0;
 +	map->mask = mp->mask;
 +	map->base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
++=======
+ 	refcount_set(&map->core.refcnt, 2);
+ 	map->core.prev = 0;
+ 	map->core.mask = mp->core.mask;
+ 	map->core.base = mmap(NULL, mmap__mmap_len(map), mp->core.prot,
++>>>>>>> bf59b3053e63 (libperf: Adopt perf_mmap__mmap_len() function from tools/perf)
  			 MAP_SHARED, fd, 0);
 -	if (map->core.base == MAP_FAILED) {
 +	if (map->base == MAP_FAILED) {
  		pr_debug2("failed to mmap perf event ring buffer, error %d\n",
  			  errno);
 -		map->core.base = NULL;
 +		map->base = NULL;
  		return -1;
  	}
 -	map->core.fd = fd;
 -	map->core.cpu = cpu;
 +	map->fd = fd;
 +	map->cpu = cpu;
  
  	perf_mmap__setup_affinity_mask(map, mp);
  
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,2b97dc6d9ee2..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -77,33 -42,33 +77,37 @@@ struct mmap_params 
  	struct auxtrace_mmap_params auxtrace_mp;
  };
  
 -int perf_mmap__mmap(struct mmap *map, struct mmap_params *mp, int fd, int cpu);
 -void perf_mmap__munmap(struct mmap *map);
 +int perf_mmap__mmap(struct perf_mmap *map, struct mmap_params *mp, int fd, int cpu);
 +void perf_mmap__munmap(struct perf_mmap *map);
  
 -void perf_mmap__get(struct mmap *map);
 -void perf_mmap__put(struct mmap *map);
 +void perf_mmap__get(struct perf_mmap *map);
 +void perf_mmap__put(struct perf_mmap *map);
  
 -void perf_mmap__consume(struct mmap *map);
 +void perf_mmap__consume(struct perf_mmap *map);
  
 -static inline u64 perf_mmap__read_head(struct mmap *mm)
 +static inline u64 perf_mmap__read_head(struct perf_mmap *mm)
  {
 -	return ring_buffer_read_head(mm->core.base);
 +	return ring_buffer_read_head(mm->base);
  }
  
 -static inline void perf_mmap__write_tail(struct mmap *md, u64 tail)
 +static inline void perf_mmap__write_tail(struct perf_mmap *md, u64 tail)
  {
 -	ring_buffer_write_tail(md->core.base, tail);
 +	ring_buffer_write_tail(md->base, tail);
  }
  
 -union perf_event *perf_mmap__read_forward(struct mmap *map);
 +union perf_event *perf_mmap__read_forward(struct perf_mmap *map);
  
 -union perf_event *perf_mmap__read_event(struct mmap *map);
 +union perf_event *perf_mmap__read_event(struct perf_mmap *map);
  
 -int perf_mmap__push(struct mmap *md, void *to,
 -		    int push(struct mmap *map, void *to, void *buf, size_t size));
 +int perf_mmap__push(struct perf_mmap *md, void *to,
 +		    int push(struct perf_mmap *map, void *to, void *buf, size_t size));
  
++<<<<<<< HEAD
 +size_t perf_mmap__mmap_len(struct perf_mmap *map);
++=======
+ size_t mmap__mmap_len(struct mmap *map);
++>>>>>>> bf59b3053e63 (libperf: Adopt perf_mmap__mmap_len() function from tools/perf)
  
 -int perf_mmap__read_init(struct mmap *md);
 -void perf_mmap__read_done(struct mmap *map);
 +int perf_mmap__read_init(struct perf_mmap *md);
 +void perf_mmap__read_done(struct perf_mmap *map);
  #endif /*__PERF_MMAP_H */
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index de0619148499..b03b18874fc6 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -272,7 +272,7 @@ static int record__aio_pushfn(struct perf_mmap *map, void *to, void *buf, size_t
 
 	if (record__comp_enabled(aio->rec)) {
 		size = zstd_compress(aio->rec->session, aio->data + aio->size,
-				     perf_mmap__mmap_len(map) - aio->size,
+				     mmap__mmap_len(map) - aio->size,
 				     buf, size);
 	} else {
 		memcpy(aio->data + aio->size, buf, size);
@@ -484,7 +484,7 @@ static int record__pushfn(struct perf_mmap *map, void *to, void *bf, size_t size
 	struct record *rec = to;
 
 	if (record__comp_enabled(rec)) {
-		size = zstd_compress(rec->session, map->data, perf_mmap__mmap_len(map), bf, size);
+		size = zstd_compress(rec->session, map->data, mmap__mmap_len(map), bf, size);
 		bf   = map->data;
 	}
 
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
