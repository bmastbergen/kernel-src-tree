libperf: Add perf_evlist__first()/last() functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 515dbe48f6202147fb7c88aac48c43f49db1c793
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/515dbe48.failed

Add perf_evlist__first()/last() functions to libperf, as internal
functions and rename perf's origins to evlist__first/last.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-29-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 515dbe48f6202147fb7c88aac48c43f49db1c793)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-top.c
#	tools/perf/builtin-trace.c
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/tests/event-times.c
#	tools/perf/tests/parse-events.c
#	tools/perf/tests/task-exit.c
#	tools/perf/ui/browsers/hists.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
#	tools/perf/util/jitdump.c
#	tools/perf/util/parse-events.c
#	tools/perf/util/record.c
#	tools/perf/util/top.c
diff --cc tools/perf/builtin-top.c
index 95aec2602043,73bf79053ae3..000000000000
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@@ -521,8 -530,8 +521,13 @@@ static bool perf_top__handle_keypress(s
  
  				prompt_integer(&counter, "Enter details event counter");
  
++<<<<<<< HEAD
 +				if (counter >= top->evlist->nr_entries) {
 +					top->sym_evsel = perf_evlist__first(top->evlist);
++=======
+ 				if (counter >= top->evlist->core.nr_entries) {
+ 					top->sym_evsel = evlist__first(top->evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  					fprintf(stderr, "Sorry, no such event, using %s.\n", perf_evsel__name(top->sym_evsel));
  					sleep(1);
  					break;
diff --cc tools/perf/builtin-trace.c
index 4b81b4c2c4c2,97667287f573..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -3414,16 -3422,16 +3414,22 @@@ static int trace__run(struct trace *tra
  
  	if (trace->opts.initial_delay) {
  		usleep(trace->opts.initial_delay * 1000);
 -		evlist__enable(evlist);
 +		perf_evlist__enable(evlist);
  	}
  
++<<<<<<< HEAD
 +	trace->multiple_threads = thread_map__pid(evlist->threads, 0) == -1 ||
 +				  evlist->threads->nr > 1 ||
 +				  perf_evlist__first(evlist)->attr.inherit;
++=======
+ 	trace->multiple_threads = perf_thread_map__pid(evlist->core.threads, 0) == -1 ||
+ 				  evlist->core.threads->nr > 1 ||
+ 				  evlist__first(evlist)->core.attr.inherit;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	/*
 -	 * Now that we already used evsel->core.attr to ask the kernel to setup the
 -	 * events, lets reuse evsel->core.attr.sample_max_stack as the limit in
 +	 * Now that we already used evsel->attr to ask the kernel to setup the
 +	 * events, lets reuse evsel->attr.sample_max_stack as the limit in
  	 * trace__resolve_callchain(), allowing per-event max-stack settings
  	 * to override an explicitly set --max-stack global setting.
  	 */
diff --cc tools/perf/tests/event-times.c
index 1a2686f1fcf0,1ee8704e2284..000000000000
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@@ -12,9 -13,10 +12,13 @@@
  #include "thread_map.h"
  #include "target.h"
  
 -static int attach__enable_on_exec(struct evlist *evlist)
 +static int attach__enable_on_exec(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
++=======
+ 	struct evsel *evsel = evlist__last(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	struct target target = {
  		.uid = UINT_MAX,
  	};
@@@ -54,10 -56,10 +58,15 @@@ static int detach__enable_on_exec(struc
  	return 0;
  }
  
 -static int attach__current_disabled(struct evlist *evlist)
 +static int attach__current_disabled(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct thread_map *threads;
++=======
+ 	struct evsel *evsel = evlist__last(evlist);
+ 	struct perf_thread_map *threads;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	int err;
  
  	pr_debug("attaching to current thread as disabled\n");
@@@ -76,14 -78,14 +85,19 @@@
  		return err;
  	}
  
 -	perf_thread_map__put(threads);
 -	return evsel__enable(evsel) == 0 ? TEST_OK : TEST_FAIL;
 +	thread_map__put(threads);
 +	return perf_evsel__enable(evsel) == 0 ? TEST_OK : TEST_FAIL;
  }
  
 -static int attach__current_enabled(struct evlist *evlist)
 +static int attach__current_enabled(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct thread_map *threads;
++=======
+ 	struct evsel *evsel = evlist__last(evlist);
+ 	struct perf_thread_map *threads;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	int err;
  
  	pr_debug("attaching to current thread as enabled\n");
@@@ -100,17 -102,17 +114,26 @@@
  	return err == 0 ? TEST_OK : TEST_FAIL;
  }
  
 -static int detach__disable(struct evlist *evlist)
 +static int detach__disable(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
++=======
+ 	struct evsel *evsel = evlist__last(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	return evsel__enable(evsel);
 +	return perf_evsel__enable(evsel);
  }
  
 -static int attach__cpu_disabled(struct evlist *evlist)
 +static int attach__cpu_disabled(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct cpu_map *cpus;
++=======
+ 	struct evsel *evsel = evlist__last(evlist);
+ 	struct perf_cpu_map *cpus;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	int err;
  
  	pr_debug("attaching to CPU 0 as enabled\n");
@@@ -132,14 -134,14 +155,19 @@@
  		return err;
  	}
  
 -	perf_cpu_map__put(cpus);
 -	return evsel__enable(evsel);
 +	cpu_map__put(cpus);
 +	return perf_evsel__enable(evsel);
  }
  
 -static int attach__cpu_enabled(struct evlist *evlist)
 +static int attach__cpu_enabled(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct cpu_map *cpus;
++=======
+ 	struct evsel *evsel = evlist__last(evlist);
+ 	struct perf_cpu_map *cpus;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	int err;
  
  	pr_debug("attaching to CPU 0 as enabled\n");
@@@ -178,8 -180,8 +206,13 @@@ static int test_times(int (attach)(stru
  		goto out_err;
  	}
  
++<<<<<<< HEAD
 +	evsel = perf_evlist__last(evlist);
 +	evsel->attr.read_format |=
++=======
+ 	evsel = evlist__last(evlist);
+ 	evsel->core.attr.read_format |=
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  		PERF_FORMAT_TOTAL_TIME_ENABLED |
  		PERF_FORMAT_TOTAL_TIME_RUNNING;
  
diff --cc tools/perf/tests/parse-events.c
index 8f3c80e13584,25e0ed2eedfc..000000000000
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@@ -44,16 -44,16 +44,20 @@@ static bool kvm_s390_create_vm_valid(vo
  }
  #endif
  
 -static int test__checkevent_tracepoint(struct evlist *evlist)
 +static int test__checkevent_tracepoint(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong number of groups", 0 == evlist->nr_groups);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_TRACEPOINT == evsel->core.attr.type);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_TRACEPOINT == evsel->attr.type);
  	TEST_ASSERT_VAL("wrong sample_type",
 -		PERF_TP_SAMPLE_TYPE == evsel->core.attr.sample_type);
 -	TEST_ASSERT_VAL("wrong sample_period", 1 == evsel->core.attr.sample_period);
 +		PERF_TP_SAMPLE_TYPE == evsel->attr.sample_type);
 +	TEST_ASSERT_VAL("wrong sample_period", 1 == evsel->attr.sample_period);
  	return 0;
  }
  
@@@ -75,45 -75,45 +79,61 @@@ static int test__checkevent_tracepoint_
  	return 0;
  }
  
 -static int test__checkevent_raw(struct evlist *evlist)
 +static int test__checkevent_raw(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0x1a == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0x1a == evsel->attr.config);
  	return 0;
  }
  
 -static int test__checkevent_numeric(struct evlist *evlist)
 +static int test__checkevent_numeric(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", 1 == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 1 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", 1 == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 1 == evsel->attr.config);
  	return 0;
  }
  
 -static int test__checkevent_symbolic_name(struct evlist *evlist)
 +static int test__checkevent_symbolic_name(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_INSTRUCTIONS == evsel->core.attr.config);
 +			PERF_COUNT_HW_INSTRUCTIONS == evsel->attr.config);
  	return 0;
  }
  
 -static int test__checkevent_symbolic_name_config(struct evlist *evlist)
 +static int test__checkevent_symbolic_name_config(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
  	/*
  	 * The period value gets configured within perf_evlist__config,
  	 * while this test executes only parse events method.
@@@ -127,107 -127,107 +147,139 @@@
  	return 0;
  }
  
 -static int test__checkevent_symbolic_alias(struct evlist *evlist)
 +static int test__checkevent_symbolic_alias(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->core.attr.type);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->attr.type);
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_SW_PAGE_FAULTS == evsel->core.attr.config);
 +			PERF_COUNT_SW_PAGE_FAULTS == evsel->attr.config);
  	return 0;
  }
  
 -static int test__checkevent_genhw(struct evlist *evlist)
 +static int test__checkevent_genhw(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HW_CACHE == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", (1 << 16) == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HW_CACHE == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", (1 << 16) == evsel->attr.config);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint(struct evlist *evlist)
 +static int test__checkevent_breakpoint(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type", (HW_BREAKPOINT_R | HW_BREAKPOINT_W) ==
 -					 evsel->core.attr.bp_type);
 +					 evsel->attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len", HW_BREAKPOINT_LEN_4 ==
 -					evsel->core.attr.bp_len);
 +					evsel->attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_x(struct evlist *evlist)
 +static int test__checkevent_breakpoint_x(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
 -			HW_BREAKPOINT_X == evsel->core.attr.bp_type);
 -	TEST_ASSERT_VAL("wrong bp_len", sizeof(long) == evsel->core.attr.bp_len);
 +			HW_BREAKPOINT_X == evsel->attr.bp_type);
 +	TEST_ASSERT_VAL("wrong bp_len", sizeof(long) == evsel->attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_r(struct evlist *evlist)
 +static int test__checkevent_breakpoint_r(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong type",
 -			PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +			PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
 -			HW_BREAKPOINT_R == evsel->core.attr.bp_type);
 +			HW_BREAKPOINT_R == evsel->attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len",
 -			HW_BREAKPOINT_LEN_4 == evsel->core.attr.bp_len);
 +			HW_BREAKPOINT_LEN_4 == evsel->attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_w(struct evlist *evlist)
 +static int test__checkevent_breakpoint_w(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong type",
 -			PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +			PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
 -			HW_BREAKPOINT_W == evsel->core.attr.bp_type);
 +			HW_BREAKPOINT_W == evsel->attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len",
 -			HW_BREAKPOINT_LEN_4 == evsel->core.attr.bp_len);
 +			HW_BREAKPOINT_LEN_4 == evsel->attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_rw(struct evlist *evlist)
 +static int test__checkevent_breakpoint_rw(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong type",
 -			PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +			PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
 -		(HW_BREAKPOINT_R|HW_BREAKPOINT_W) == evsel->core.attr.bp_type);
 +		(HW_BREAKPOINT_R|HW_BREAKPOINT_W) == evsel->attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len",
 -			HW_BREAKPOINT_LEN_4 == evsel->core.attr.bp_len);
 +			HW_BREAKPOINT_LEN_4 == evsel->attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_tracepoint_modifier(struct evlist *evlist)
 +static int test__checkevent_tracepoint_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	return test__checkevent_tracepoint(evlist);
  }
@@@ -251,197 -251,197 +303,257 @@@ test__checkevent_tracepoint_multi_modif
  	return test__checkevent_tracepoint_multi(evlist);
  }
  
 -static int test__checkevent_raw_modifier(struct evlist *evlist)
 +static int test__checkevent_raw_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
  
  	return test__checkevent_raw(evlist);
  }
  
 -static int test__checkevent_numeric_modifier(struct evlist *evlist)
 +static int test__checkevent_numeric_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
  
  	return test__checkevent_numeric(evlist);
  }
  
 -static int test__checkevent_symbolic_name_modifier(struct evlist *evlist)
 +static int test__checkevent_symbolic_name_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_exclude_host_modifier(struct evlist *evlist)
 +static int test__checkevent_exclude_host_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_exclude_guest_modifier(struct evlist *evlist)
 +static int test__checkevent_exclude_guest_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_symbolic_alias_modifier(struct evlist *evlist)
 +static int test__checkevent_symbolic_alias_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	return test__checkevent_symbolic_alias(evlist);
  }
  
 -static int test__checkevent_genhw_modifier(struct evlist *evlist)
 +static int test__checkevent_genhw_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
  
  	return test__checkevent_genhw(evlist);
  }
  
 -static int test__checkevent_exclude_idle_modifier(struct evlist *evlist)
 +static int test__checkevent_exclude_idle_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude idle", evsel->core.attr.exclude_idle);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude idle", evsel->attr.exclude_idle);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_exclude_idle_modifier_1(struct evlist *evlist)
 +static int test__checkevent_exclude_idle_modifier_1(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude idle", evsel->core.attr.exclude_idle);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude idle", evsel->attr.exclude_idle);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_breakpoint_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:u"));
  
  	return test__checkevent_breakpoint(evlist);
  }
  
 -static int test__checkevent_breakpoint_x_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_x_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:x:k"));
  
  	return test__checkevent_breakpoint_x(evlist);
  }
  
 -static int test__checkevent_breakpoint_r_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_r_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:r:hp"));
  
  	return test__checkevent_breakpoint_r(evlist);
  }
  
 -static int test__checkevent_breakpoint_w_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_w_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:w:up"));
  
  	return test__checkevent_breakpoint_w(evlist);
  }
  
 -static int test__checkevent_breakpoint_rw_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_rw_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:rw:kp"));
  
  	return test__checkevent_breakpoint_rw(evlist);
  }
  
 -static int test__checkevent_pmu(struct evlist *evlist)
 +static int test__checkevent_pmu(struct perf_evlist *evlist)
  {
  
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config",    10 == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong config1",    1 == evsel->core.attr.config1);
 -	TEST_ASSERT_VAL("wrong config2",    3 == evsel->core.attr.config2);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",    10 == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong config1",    1 == evsel->attr.config1);
 +	TEST_ASSERT_VAL("wrong config2",    3 == evsel->attr.config2);
  	/*
  	 * The period value gets configured within perf_evlist__config,
  	 * while this test executes only parse events method.
@@@ -451,21 -451,21 +563,25 @@@
  	return 0;
  }
  
 -static int test__checkevent_list(struct evlist *evlist)
 +static int test__checkevent_list(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->nr_entries);
  
  	/* r1 */
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 1 == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong config1", 0 == evsel->core.attr.config1);
 -	TEST_ASSERT_VAL("wrong config2", 0 == evsel->core.attr.config2);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 1 == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong config1", 0 == evsel->attr.config1);
 +	TEST_ASSERT_VAL("wrong config2", 0 == evsel->attr.config2);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	/* syscalls:sys_enter_openat:k */
  	evsel = perf_evsel__next(evsel);
@@@ -490,14 -490,14 +606,18 @@@
  	return 0;
  }
  
 -static int test__checkevent_pmu_name(struct evlist *evlist)
 +static int test__checkevent_pmu_name(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	/* cpu/config=1,name=krava/u */
 -	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config",  1 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",  1 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong name", !strcmp(perf_evsel__name(evsel), "krava"));
  
  	/* cpu/config=2/u" */
@@@ -511,14 -511,14 +631,18 @@@
  	return 0;
  }
  
 -static int test__checkevent_pmu_partial_time_callgraph(struct evlist *evlist)
 +static int test__checkevent_pmu_partial_time_callgraph(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	/* cpu/config=1,call-graph=fp,time,period=100000/ */
 -	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config",  1 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",  1 == evsel->attr.config);
  	/*
  	 * The period, time and callgraph value gets configured
  	 * within perf_evlist__config,
@@@ -544,37 -544,37 +668,45 @@@
  	return 0;
  }
  
 -static int test__checkevent_pmu_events(struct evlist *evlist)
 +static int test__checkevent_pmu_events(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
  	TEST_ASSERT_VAL("wrong exclude_user",
 -			!evsel->core.attr.exclude_user);
 +			!evsel->attr.exclude_user);
  	TEST_ASSERT_VAL("wrong exclude_kernel",
 -			evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 -	TEST_ASSERT_VAL("wrong pinned", !evsel->core.attr.pinned);
 +			evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong pinned", !evsel->attr.pinned);
  
  	return 0;
  }
  
  
 -static int test__checkevent_pmu_events_mix(struct evlist *evlist)
 +static int test__checkevent_pmu_events_mix(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	/* pmu-event:u */
 -	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong exclude_user",
 -			!evsel->core.attr.exclude_user);
 +			!evsel->attr.exclude_user);
  	TEST_ASSERT_VAL("wrong exclude_kernel",
 -			evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 -	TEST_ASSERT_VAL("wrong pinned", !evsel->core.attr.pinned);
 +			evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong pinned", !evsel->attr.pinned);
  
  	/* cpu/pmu-event/u*/
  	evsel = perf_evsel__next(evsel);
@@@ -642,18 -642,18 +774,23 @@@ static int test__group1(struct perf_evl
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* instructions:k */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_INSTRUCTIONS == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_INSTRUCTIONS == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  	TEST_ASSERT_VAL("wrong sample_read", !evsel->sample_read);
  
@@@ -684,18 -684,18 +821,23 @@@ static int test__group2(struct perf_evl
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* faults + :ku modifier */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_SW_PAGE_FAULTS == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_SW_PAGE_FAULTS == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  	TEST_ASSERT_VAL("wrong sample_read", !evsel->sample_read);
  
@@@ -739,17 -739,17 +881,22 @@@ static int test__group3(struct perf_evl
  	TEST_ASSERT_VAL("wrong number of groups", 2 == evlist->nr_groups);
  
  	/* group1 syscalls:sys_enter_openat:H */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_TRACEPOINT == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_TRACEPOINT == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong sample_type",
 -		PERF_TP_SAMPLE_TYPE == evsel->core.attr.sample_type);
 -	TEST_ASSERT_VAL("wrong sample_period", 1 == evsel->core.attr.sample_period);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +		PERF_TP_SAMPLE_TYPE == evsel->attr.sample_type);
 +	TEST_ASSERT_VAL("wrong sample_period", 1 == evsel->attr.sample_period);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
  	TEST_ASSERT_VAL("wrong group name",
  		!strcmp(leader->group_name, "group1"));
@@@ -831,20 -831,20 +978,25 @@@ static int test__group4(struct perf_evl
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* cycles:u + p */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
  	/* use of precise requires exclude_guest */
 -	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip == 1);
 +	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip == 1);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  	TEST_ASSERT_VAL("wrong sample_read", !evsel->sample_read);
  
@@@ -875,19 -875,19 +1027,24 @@@ static int test__group5(struct perf_evl
  	TEST_ASSERT_VAL("wrong number of groups", 2 == evlist->nr_groups);
  
  	/* cycles + G */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  	TEST_ASSERT_VAL("wrong sample_read", !evsel->sample_read);
  
@@@ -961,19 -961,19 +1118,24 @@@ static int test__group_gh1(struct perf_
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* cycles + :H group modifier */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  
  	/* cache-misses:G + :H group modifier */
@@@ -1001,19 -1001,19 +1163,24 @@@ static int test__group_gh2(struct perf_
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* cycles + :G group modifier */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  
  	/* cache-misses:H + :G group modifier */
@@@ -1041,19 -1041,19 +1208,24 @@@ static int test__group_gh3(struct perf_
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* cycles:G + :u group modifier */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  
  	/* cache-misses:H + :u group modifier */
@@@ -1081,19 -1081,19 +1253,24 @@@ static int test__group_gh4(struct perf_
  	TEST_ASSERT_VAL("wrong number of groups", 1 == evlist->nr_groups);
  
  	/* cycles:G + :uG group modifier */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", perf_evsel__is_group_leader(evsel));
 -	TEST_ASSERT_VAL("wrong core.nr_members", evsel->core.nr_members == 2);
 +	TEST_ASSERT_VAL("wrong nr_members", evsel->nr_members == 2);
  	TEST_ASSERT_VAL("wrong group_idx", perf_evsel__group_idx(evsel) == 0);
  
  	/* cache-misses:H + :uG group modifier */
@@@ -1113,23 -1113,23 +1290,28 @@@
  	return 0;
  }
  
 -static int test__leader_sample1(struct evlist *evlist)
 +static int test__leader_sample1(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel, *leader;
 +	struct perf_evsel *evsel, *leader;
  
 -	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->nr_entries);
  
  	/* cycles - sampling group leader */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", evsel->leader == leader);
  	TEST_ASSERT_VAL("wrong sample_read", evsel->sample_read);
@@@ -1166,23 -1166,23 +1348,28 @@@
  	return 0;
  }
  
 -static int test__leader_sample2(struct evlist *evlist __maybe_unused)
 +static int test__leader_sample2(struct perf_evlist *evlist __maybe_unused)
  {
 -	struct evsel *evsel, *leader;
 +	struct perf_evsel *evsel, *leader;
  
 -	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
  
  	/* instructions - sampling group leader */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_INSTRUCTIONS == evsel->core.attr.config);
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
 -	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +			PERF_COUNT_HW_INSTRUCTIONS == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
 +	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", evsel->leader == leader);
  	TEST_ASSERT_VAL("wrong sample_read", evsel->sample_read);
@@@ -1205,33 -1205,33 +1392,42 @@@
  	return 0;
  }
  
 -static int test__checkevent_pinned_modifier(struct evlist *evlist)
 +static int test__checkevent_pinned_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
 -	TEST_ASSERT_VAL("wrong pinned", evsel->core.attr.pinned);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong pinned", evsel->attr.pinned);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__pinned_group(struct evlist *evlist)
 +static int test__pinned_group(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel, *leader;
 +	struct perf_evsel *evsel, *leader;
  
 -	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->nr_entries);
  
  	/* cycles - group leader */
++<<<<<<< HEAD
 +	evsel = leader = perf_evlist__first(evlist);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	evsel = leader = evlist__first(evlist);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
 +			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong group name", !evsel->group_name);
  	TEST_ASSERT_VAL("wrong leader", evsel->leader == leader);
 -	TEST_ASSERT_VAL("wrong pinned", evsel->core.attr.pinned);
 +	TEST_ASSERT_VAL("wrong pinned", evsel->attr.pinned);
  
  	/* cache-misses - can not be pinned, but will go on with the leader */
  	evsel = perf_evsel__next(evsel);
@@@ -1249,87 -1249,87 +1445,119 @@@
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_len(struct evlist *evlist)
 +static int test__checkevent_breakpoint_len(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type", (HW_BREAKPOINT_R | HW_BREAKPOINT_W) ==
 -					 evsel->core.attr.bp_type);
 +					 evsel->attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len", HW_BREAKPOINT_LEN_1 ==
 -					evsel->core.attr.bp_len);
 +					evsel->attr.bp_len);
  
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_len_w(struct evlist *evlist)
 +static int test__checkevent_breakpoint_len_w(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
 -	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
  	TEST_ASSERT_VAL("wrong bp_type", HW_BREAKPOINT_W ==
 -					 evsel->core.attr.bp_type);
 +					 evsel->attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len", HW_BREAKPOINT_LEN_2 ==
 -					evsel->core.attr.bp_len);
 +					evsel->attr.bp_len);
  
  	return 0;
  }
  
  static int
 -test__checkevent_breakpoint_len_rw_modifier(struct evlist *evlist)
 +test__checkevent_breakpoint_len_rw_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 -	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
 -	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
 +	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
 +	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
  
  	return test__checkevent_breakpoint_rw(evlist);
  }
  
 -static int test__checkevent_precise_max_modifier(struct evlist *evlist)
 +static int test__checkevent_precise_max_modifier(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
 -	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->core.attr.type);
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->attr.type);
  	TEST_ASSERT_VAL("wrong config",
 -			PERF_COUNT_SW_TASK_CLOCK == evsel->core.attr.config);
 +			PERF_COUNT_SW_TASK_CLOCK == evsel->attr.config);
  	return 0;
  }
  
 -static int test__checkevent_config_symbol(struct evlist *evlist)
 +static int test__checkevent_config_symbol(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	TEST_ASSERT_VAL("wrong name setting", strcmp(evsel->name, "insn") == 0);
  	return 0;
  }
  
 -static int test__checkevent_config_raw(struct evlist *evlist)
 +static int test__checkevent_config_raw(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	TEST_ASSERT_VAL("wrong name setting", strcmp(evsel->name, "rawpmu") == 0);
  	return 0;
  }
  
 -static int test__checkevent_config_num(struct evlist *evlist)
 +static int test__checkevent_config_num(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	TEST_ASSERT_VAL("wrong name setting", strcmp(evsel->name, "numpmu") == 0);
  	return 0;
  }
  
 -static int test__checkevent_config_cache(struct evlist *evlist)
 +static int test__checkevent_config_cache(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	TEST_ASSERT_VAL("wrong name setting", strcmp(evsel->name, "cachepmu") == 0);
  	return 0;
@@@ -1340,39 -1340,39 +1568,55 @@@ static bool test__intel_pt_valid(void
  	return !!perf_pmu__find("intel_pt");
  }
  
 -static int test__intel_pt(struct evlist *evlist)
 +static int test__intel_pt(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	TEST_ASSERT_VAL("wrong name setting", strcmp(evsel->name, "intel_pt//u") == 0);
  	return 0;
  }
  
 -static int test__checkevent_complex_name(struct evlist *evlist)
 +static int test__checkevent_complex_name(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	TEST_ASSERT_VAL("wrong complex name parsing", strcmp(evsel->name, "COMPLEX_CYCLES_NAME:orig=cycles,desc=chip-clock-ticks") == 0);
  	return 0;
  }
  
 -static int test__sym_event_slash(struct evlist *evlist)
 +static int test__sym_event_slash(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong type", evsel->core.attr.type == PERF_TYPE_HARDWARE);
 -	TEST_ASSERT_VAL("wrong config", evsel->core.attr.config == PERF_COUNT_HW_CPU_CYCLES);
 -	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
 +	TEST_ASSERT_VAL("wrong type", evsel->attr.type == PERF_TYPE_HARDWARE);
 +	TEST_ASSERT_VAL("wrong config", evsel->attr.config == PERF_COUNT_HW_CPU_CYCLES);
 +	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
  	return 0;
  }
  
 -static int test__sym_event_dc(struct evlist *evlist)
 +static int test__sym_event_dc(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
++=======
+ 	struct evsel *evsel = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
 -	TEST_ASSERT_VAL("wrong type", evsel->core.attr.type == PERF_TYPE_HARDWARE);
 -	TEST_ASSERT_VAL("wrong config", evsel->core.attr.config == PERF_COUNT_HW_CPU_CYCLES);
 -	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
 +	TEST_ASSERT_VAL("wrong type", evsel->attr.type == PERF_TYPE_HARDWARE);
 +	TEST_ASSERT_VAL("wrong config", evsel->attr.config == PERF_COUNT_HW_CPU_CYCLES);
 +	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
  	return 0;
  }
  
diff --cc tools/perf/tests/task-exit.c
index e92fa6029ac7,24565f83e07d..000000000000
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@@ -83,19 -88,19 +83,24 @@@ int test__task_exit(struct test *test _
  		goto out_delete_evlist;
  	}
  
++<<<<<<< HEAD
 +	evsel = perf_evlist__first(evlist);
 +	evsel->attr.task = 1;
++=======
+ 	evsel = evlist__first(evlist);
+ 	evsel->core.attr.task = 1;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  #ifdef __s390x__
 -	evsel->core.attr.sample_freq = 1000000;
 +	evsel->attr.sample_freq = 1000000;
  #else
 -	evsel->core.attr.sample_freq = 1;
 +	evsel->attr.sample_freq = 1;
  #endif
 -	evsel->core.attr.inherit = 0;
 -	evsel->core.attr.watermark = 0;
 -	evsel->core.attr.wakeup_events = 1;
 -	evsel->core.attr.exclude_kernel = 1;
 +	evsel->attr.inherit = 0;
 +	evsel->attr.watermark = 0;
 +	evsel->attr.wakeup_events = 1;
 +	evsel->attr.exclude_kernel = 1;
  
 -	err = evlist__open(evlist);
 +	err = perf_evlist__open(evlist);
  	if (err < 0) {
  		pr_debug("Couldn't open the evlist: %s\n",
  			 str_error_r(-err, sbuf, sizeof(sbuf)));
diff --cc tools/perf/ui/browsers/hists.c
index bef534a58839,7a7187e069b4..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -3312,14 -3318,14 +3312,24 @@@ browse_hists
  			ui_browser__show_title(&menu->b, title);
  			switch (key) {
  			case K_TAB:
++<<<<<<< HEAD
 +				if (pos->node.next == &evlist->entries)
 +					pos = perf_evlist__first(evlist);
++=======
+ 				if (pos->core.node.next == &evlist->core.entries)
+ 					pos = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  				else
  					pos = perf_evsel__next(pos);
  				goto browse_hists;
  			case K_UNTAB:
++<<<<<<< HEAD
 +				if (pos->node.prev == &evlist->entries)
 +					pos = perf_evlist__last(evlist);
++=======
+ 				if (pos->core.node.prev == &evlist->core.entries)
+ 					pos = evlist__last(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  				else
  					pos = perf_evsel__prev(pos);
  				goto browse_hists;
@@@ -3411,7 -3417,7 +3421,11 @@@ int perf_evlist__tui_browse_hists(struc
  
  single_entry:
  	if (nr_entries == 1) {
++<<<<<<< HEAD
 +		struct perf_evsel *first = perf_evlist__first(evlist);
++=======
+ 		struct evsel *first = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  		return perf_evsel__hists_browse(first, nr_entries, help,
  						false, hbt, min_pcnt,
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,e8f0357b1532..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -100,9 -103,9 +100,13 @@@ struct perf_evlist *perf_evlist__new_du
   * Events with compatible sample types all have the same id_pos
   * and is_pos.  For convenience, put a copy on evlist.
   */
 -void perf_evlist__set_id_pos(struct evlist *evlist)
 +void perf_evlist__set_id_pos(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
++=======
+ 	struct evsel *first = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	evlist->id_pos = first->id_pos;
  	evlist->is_pos = first->is_pos;
@@@ -584,15 -558,15 +588,20 @@@ struct perf_evsel *perf_evlist__id2evse
  {
  	struct perf_sample_id *sid;
  
++<<<<<<< HEAD
 +	if (evlist->nr_entries == 1 || !id)
 +		return perf_evlist__first(evlist);
++=======
+ 	if (evlist->core.nr_entries == 1 || !id)
+ 		return evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	sid = perf_evlist__id2sid(evlist, id);
  	if (sid)
 -		return container_of(sid->evsel, struct evsel, core);
 +		return sid->evsel;
  
  	if (!perf_evlist__sample_id_all(evlist))
- 		return perf_evlist__first(evlist);
+ 		return evlist__first(evlist);
  
  	return NULL;
  }
@@@ -633,10 -607,10 +642,14 @@@ static int perf_evlist__event2id(struc
  	return 0;
  }
  
 -struct evsel *perf_evlist__event2evsel(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__event2evsel(struct perf_evlist *evlist,
  					    union perf_event *event)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
++=======
+ 	struct evsel *first = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	struct hlist_head *head;
  	struct perf_sample_id *sid;
  	int hash;
@@@ -1269,14 -1220,14 +1282,20 @@@ u64 perf_evlist__combined_branch_type(s
  	return branch_type;
  }
  
 -bool perf_evlist__valid_read_format(struct evlist *evlist)
 +bool perf_evlist__valid_read_format(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist), *pos = first;
 +	u64 read_format = first->attr.read_format;
 +	u64 sample_type = first->attr.sample_type;
++=======
+ 	struct evsel *first = evlist__first(evlist), *pos = first;
+ 	u64 read_format = first->core.attr.read_format;
+ 	u64 sample_type = first->core.attr.sample_type;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	evlist__for_each_entry(evlist, pos) {
 -		if (read_format != pos->core.attr.read_format)
 +		if (read_format != pos->attr.read_format)
  			return false;
  	}
  
@@@ -1289,15 -1240,15 +1308,24 @@@
  	return true;
  }
  
 -u64 perf_evlist__read_format(struct evlist *evlist)
 +u64 perf_evlist__read_format(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
 +	return first->attr.read_format;
++=======
+ 	struct evsel *first = evlist__first(evlist);
+ 	return first->core.attr.read_format;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  }
  
 -u16 perf_evlist__id_hdr_size(struct evlist *evlist)
 +u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
++=======
+ 	struct evsel *first = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  	struct perf_sample *data;
  	u64 sample_type;
  	u16 size = 0;
@@@ -1328,26 -1279,26 +1356,35 @@@ out
  	return size;
  }
  
 -bool perf_evlist__valid_sample_id_all(struct evlist *evlist)
 +bool perf_evlist__valid_sample_id_all(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist), *pos = first;
++=======
+ 	struct evsel *first = evlist__first(evlist), *pos = first;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	evlist__for_each_entry_continue(evlist, pos) {
 -		if (first->core.attr.sample_id_all != pos->core.attr.sample_id_all)
 +		if (first->attr.sample_id_all != pos->attr.sample_id_all)
  			return false;
  	}
  
  	return true;
  }
  
 -bool perf_evlist__sample_id_all(struct evlist *evlist)
 +bool perf_evlist__sample_id_all(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
 +	return first->attr.sample_id_all;
++=======
+ 	struct evsel *first = evlist__first(evlist);
+ 	return first->core.attr.sample_id_all;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  }
  
 -void perf_evlist__set_selected(struct evlist *evlist,
 -			       struct evsel *evsel)
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel)
  {
  	evlist->selected = evsel;
  }
@@@ -1617,7 -1568,7 +1654,11 @@@ int perf_evlist__strerror_open(struct p
  				    "Hint:\tThe current value is %d.", value);
  		break;
  	case EINVAL: {
++<<<<<<< HEAD
 +		struct perf_evsel *first = perf_evlist__first(evlist);
++=======
+ 		struct evsel *first = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  		int max_freq;
  
  		if (sysctl__read_int("kernel/perf_event_max_sample_rate", &max_freq) < 0)
@@@ -1673,13 -1624,13 +1714,13 @@@ int perf_evlist__strerror_mmap(struct p
  	return 0;
  }
  
 -void perf_evlist__to_front(struct evlist *evlist,
 -			   struct evsel *move_evsel)
 +void perf_evlist__to_front(struct perf_evlist *evlist,
 +			   struct perf_evsel *move_evsel)
  {
 -	struct evsel *evsel, *n;
 +	struct perf_evsel *evsel, *n;
  	LIST_HEAD(move);
  
- 	if (move_evsel == perf_evlist__first(evlist))
+ 	if (move_evsel == evlist__first(evlist))
  		return;
  
  	evlist__for_each_entry_safe(evlist, n, evsel) {
@@@ -1797,10 -1748,10 +1838,14 @@@ bool perf_evlist__exclude_kernel(struc
   * the group display. Set the artificial group and set the leader's
   * forced_leader flag to notify the display code.
   */
 -void perf_evlist__force_leader(struct evlist *evlist)
 +void perf_evlist__force_leader(struct perf_evlist *evlist)
  {
  	if (!evlist->nr_groups) {
++<<<<<<< HEAD
 +		struct perf_evsel *leader = perf_evlist__first(evlist);
++=======
+ 		struct evsel *leader = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  		perf_evlist__set_leader(evlist);
  		leader->forced_leader = true;
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,6529ad2a9d97..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -8,11 -8,11 +8,17 @@@
  #include <linux/list.h>
  #include <api/fd/array.h>
  #include <stdio.h>
++<<<<<<< HEAD
 +#include "../perf.h"
 +#include "event.h"
++=======
+ #include <internal/evlist.h>
+ #include <internal/evsel.h>
+ #include "events_stats.h"
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  #include "evsel.h"
 -#include <pthread.h>
 +#include "mmap.h"
 +#include "util.h"
  #include <signal.h>
  #include <unistd.h>
  
@@@ -216,36 -231,40 +222,51 @@@ int perf_evlist__parse_sample_timestamp
  					union perf_event *event,
  					u64 *timestamp);
  
 -bool perf_evlist__valid_sample_type(struct evlist *evlist);
 -bool perf_evlist__valid_sample_id_all(struct evlist *evlist);
 -bool perf_evlist__valid_read_format(struct evlist *evlist);
 +bool perf_evlist__valid_sample_type(struct perf_evlist *evlist);
 +bool perf_evlist__valid_sample_id_all(struct perf_evlist *evlist);
 +bool perf_evlist__valid_read_format(struct perf_evlist *evlist);
  
 -void perf_evlist__splice_list_tail(struct evlist *evlist,
 +void perf_evlist__splice_list_tail(struct perf_evlist *evlist,
  				   struct list_head *list);
  
 -static inline bool perf_evlist__empty(struct evlist *evlist)
 +static inline bool perf_evlist__empty(struct perf_evlist *evlist)
 +{
 +	return list_empty(&evlist->entries);
 +}
 +
++<<<<<<< HEAD
 +static inline struct perf_evsel *perf_evlist__first(struct perf_evlist *evlist)
  {
 -	return list_empty(&evlist->core.entries);
 +	return list_entry(evlist->entries.next, struct perf_evsel, node);
  }
  
 +static inline struct perf_evsel *perf_evlist__last(struct perf_evlist *evlist)
 +{
 +	return list_entry(evlist->entries.prev, struct perf_evsel, node);
++=======
+ static inline struct evsel *evlist__first(struct evlist *evlist)
+ {
+ 	struct perf_evsel *evsel = perf_evlist__first(&evlist->core);
+ 
+ 	return container_of(evsel, struct evsel, core);
+ }
+ 
+ static inline struct evsel *evlist__last(struct evlist *evlist)
+ {
+ 	struct perf_evsel *evsel = perf_evlist__last(&evlist->core);
+ 
+ 	return container_of(evsel, struct evsel, core);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  }
  
 -size_t perf_evlist__fprintf(struct evlist *evlist, FILE *fp);
 +size_t perf_evlist__fprintf(struct perf_evlist *evlist, FILE *fp);
  
 -int perf_evlist__strerror_open(struct evlist *evlist, int err, char *buf, size_t size);
 -int perf_evlist__strerror_mmap(struct evlist *evlist, int err, char *buf, size_t size);
 +int perf_evlist__strerror_open(struct perf_evlist *evlist, int err, char *buf, size_t size);
 +int perf_evlist__strerror_mmap(struct perf_evlist *evlist, int err, char *buf, size_t size);
  
 -bool perf_evlist__can_select_event(struct evlist *evlist, const char *str);
 -void perf_evlist__to_front(struct evlist *evlist,
 -			   struct evsel *move_evsel);
 +bool perf_evlist__can_select_event(struct perf_evlist *evlist, const char *str);
 +void perf_evlist__to_front(struct perf_evlist *evlist,
 +			   struct perf_evsel *move_evsel);
  
  /**
   * __evlist__for_each_entry - iterate thru all the evsels
diff --cc tools/perf/util/jitdump.c
index 0cfa6b39a08f,1bdf4c6ea3e5..000000000000
--- a/tools/perf/util/jitdump.c
+++ b/tools/perf/util/jitdump.c
@@@ -777,8 -777,8 +777,13 @@@ jit_process(struct perf_session *sessio
  	 * track sample_type to compute id_all layout
  	 * perf sets the same sample type to all events as of now
  	 */
++<<<<<<< HEAD
 +	first = perf_evlist__first(session->evlist);
 +	jd.sample_type = first->attr.sample_type;
++=======
+ 	first = evlist__first(session->evlist);
+ 	jd.sample_type = first->core.attr.sample_type;
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	*nbytes = 0;
  
diff --cc tools/perf/util/parse-events.c
index 5941be0e92cc,d69ff746cda5..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -2047,8 -2049,8 +2047,13 @@@ foreach_evsel_in_last_glob(struct perf_
  	 *
  	 * So no need to WARN here, let *func do this.
  	 */
++<<<<<<< HEAD
 +	if (evlist->nr_entries > 0)
 +		last = perf_evlist__last(evlist);
++=======
+ 	if (evlist->core.nr_entries > 0)
+ 		last = evlist__last(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  	do {
  		err = (*func)(last, arg);
diff --cc tools/perf/util/record.c
index 9cfc7bf16531,8579505c29a4..000000000000
--- a/tools/perf/util/record.c
+++ b/tools/perf/util/record.c
@@@ -26,10 -30,10 +26,10 @@@ static int perf_do_probe_api(setup_prob
  	if (parse_events(evlist, str, NULL))
  		goto out_delete;
  
- 	evsel = perf_evlist__first(evlist);
+ 	evsel = evlist__first(evlist);
  
  	while (1) {
 -		fd = sys_perf_event_open(&evsel->core.attr, pid, cpu, -1, flags);
 +		fd = sys_perf_event_open(&evsel->attr, pid, cpu, -1, flags);
  		if (fd < 0) {
  			if (pid == -1 && errno == EACCES) {
  				pid = 0;
@@@ -166,11 -170,11 +166,16 @@@ void perf_evlist__config(struct perf_ev
  		 */
  		use_sample_identifier = perf_can_sample_identifier();
  		sample_id = true;
++<<<<<<< HEAD
 +	} else if (evlist->nr_entries > 1) {
 +		struct perf_evsel *first = perf_evlist__first(evlist);
++=======
+ 	} else if (evlist->core.nr_entries > 1) {
+ 		struct evsel *first = evlist__first(evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  
  		evlist__for_each_entry(evlist, evsel) {
 -			if (evsel->core.attr.sample_type == first->core.attr.sample_type)
 +			if (evsel->attr.sample_type == first->attr.sample_type)
  				continue;
  			use_sample_identifier = perf_can_sample_identifier();
  			break;
@@@ -272,15 -276,15 +277,15 @@@ bool perf_evlist__can_select_event(stru
  	if (err)
  		goto out_delete;
  
- 	evsel = perf_evlist__last(temp_evlist);
+ 	evsel = evlist__last(temp_evlist);
  
 -	if (!evlist || perf_cpu_map__empty(evlist->core.cpus)) {
 -		struct perf_cpu_map *cpus = perf_cpu_map__new(NULL);
 +	if (!evlist || cpu_map__empty(evlist->cpus)) {
 +		struct cpu_map *cpus = cpu_map__new(NULL);
  
  		cpu =  cpus ? cpus->map[0] : 0;
 -		perf_cpu_map__put(cpus);
 +		cpu_map__put(cpus);
  	} else {
 -		cpu = evlist->core.cpus->map[0];
 +		cpu = evlist->cpus->map[0];
  	}
  
  	while (1) {
diff --cc tools/perf/util/top.c
index 4c8da8c4435f,3dce2de9d005..000000000000
--- a/tools/perf/util/top.c
+++ b/tools/perf/util/top.c
@@@ -71,10 -70,10 +71,15 @@@ size_t perf_top__header_snprintf(struc
  			       esamples_percent);
  	}
  
++<<<<<<< HEAD
 +	if (top->evlist->nr_entries == 1) {
 +		struct perf_evsel *first = perf_evlist__first(top->evlist);
++=======
+ 	if (top->evlist->core.nr_entries == 1) {
+ 		struct evsel *first = evlist__first(top->evlist);
++>>>>>>> 515dbe48f620 (libperf: Add perf_evlist__first()/last() functions)
  		ret += SNPRINTF(bf + ret, size - ret, "%" PRIu64 "%s ",
 -				(uint64_t)first->core.attr.sample_period,
 +				(uint64_t)first->attr.sample_period,
  				opts->freq ? "Hz" : "");
  	}
  
* Unmerged path tools/perf/lib/include/internal/evlist.h
diff --git a/tools/perf/arch/arm/util/cs-etm.c b/tools/perf/arch/arm/util/cs-etm.c
index 4208974c24f8..136306d00007 100644
--- a/tools/perf/arch/arm/util/cs-etm.c
+++ b/tools/perf/arch/arm/util/cs-etm.c
@@ -413,7 +413,7 @@ static int cs_etm_recording_options(struct auxtrace_record *itr,
 		if (err)
 			goto out;
 
-		tracking_evsel = perf_evlist__last(evlist);
+		tracking_evsel = evlist__last(evlist);
 		perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
 		tracking_evsel->attr.freq = 0;
diff --git a/tools/perf/arch/arm64/util/arm-spe.c b/tools/perf/arch/arm64/util/arm-spe.c
index 2c009aa74633..3d2ee54ecf5c 100644
--- a/tools/perf/arch/arm64/util/arm-spe.c
+++ b/tools/perf/arch/arm64/util/arm-spe.c
@@ -127,7 +127,7 @@ static int arm_spe_recording_options(struct auxtrace_record *itr,
 	if (err)
 		return err;
 
-	tracking_evsel = perf_evlist__last(evlist);
+	tracking_evsel = evlist__last(evlist);
 	perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
 	tracking_evsel->attr.freq = 0;
diff --git a/tools/perf/arch/x86/tests/intel-cqm.c b/tools/perf/arch/x86/tests/intel-cqm.c
index 77e59b7364cf..130351ead841 100644
--- a/tools/perf/arch/x86/tests/intel-cqm.c
+++ b/tools/perf/arch/x86/tests/intel-cqm.c
@@ -63,9 +63,9 @@ int test__intel_cqm_count_nmi_context(struct test *test __maybe_unused, int subt
 		goto out;
 	}
 
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 	if (!evsel) {
-		pr_debug("perf_evlist__first failed\n");
+		pr_debug("evlist__first failed\n");
 		goto out;
 	}
 
diff --git a/tools/perf/arch/x86/tests/perf-time-to-tsc.c b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86..8321959cd06d 100644
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@ -77,7 +77,7 @@ int test__perf_time_to_tsc(struct test *test __maybe_unused, int subtest __maybe
 
 	perf_evlist__config(evlist, &opts, NULL);
 
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 
 	evsel->attr.comm = 1;
 	evsel->attr.disabled = 1;
diff --git a/tools/perf/arch/x86/util/intel-bts.c b/tools/perf/arch/x86/util/intel-bts.c
index 4cbd3d775c19..58cf718f2842 100644
--- a/tools/perf/arch/x86/util/intel-bts.c
+++ b/tools/perf/arch/x86/util/intel-bts.c
@@ -236,7 +236,7 @@ static int intel_bts_recording_options(struct auxtrace_record *itr,
 		if (err)
 			return err;
 
-		tracking_evsel = perf_evlist__last(evlist);
+		tracking_evsel = evlist__last(evlist);
 
 		perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
diff --git a/tools/perf/arch/x86/util/intel-pt.c b/tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4..39a688b91bf3 100644
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@ -423,7 +423,7 @@ static int intel_pt_track_switches(struct perf_evlist *evlist)
 		return err;
 	}
 
-	evsel = perf_evlist__last(evlist);
+	evsel = evlist__last(evlist);
 
 	perf_evsel__set_sample_bit(evsel, CPU);
 	perf_evsel__set_sample_bit(evsel, TIME);
@@ -700,7 +700,7 @@ static int intel_pt_recording_options(struct auxtrace_record *itr,
 				if (err)
 					return err;
 
-				switch_evsel = perf_evlist__last(evlist);
+				switch_evsel = evlist__last(evlist);
 
 				switch_evsel->attr.freq = 0;
 				switch_evsel->attr.sample_period = 1;
@@ -758,7 +758,7 @@ static int intel_pt_recording_options(struct auxtrace_record *itr,
 		if (err)
 			return err;
 
-		tracking_evsel = perf_evlist__last(evlist);
+		tracking_evsel = evlist__last(evlist);
 
 		perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index de0619148499..3be47e99e828 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -752,9 +752,9 @@ static int record__open(struct record *rec)
 		if (perf_evlist__add_dummy(evlist))
 			return -ENOMEM;
 
-		pos = perf_evlist__first(evlist);
+		pos = evlist__first(evlist);
 		pos->tracking = 0;
-		pos = perf_evlist__last(evlist);
+		pos = evlist__last(evlist);
 		pos->tracking = 1;
 		pos->attr.enable_on_exec = 1;
 	}
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 315e8eb7f02d..9e07b8d0f608 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -2035,7 +2035,7 @@ static int process_attr(struct perf_tool *tool, union perf_event *event,
 		return err;
 
 	evlist = *pevlist;
-	evsel = perf_evlist__last(*pevlist);
+	evsel = evlist__last(*pevlist);
 
 	if (!evsel->priv) {
 		if (scr->per_event_dump) {
* Unmerged path tools/perf/builtin-top.c
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
diff --git a/tools/perf/tests/code-reading.c b/tools/perf/tests/code-reading.c
index aa6df122b175..aa81d619d5b0 100644
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@ -640,7 +640,7 @@ static int do_test_code_reading(bool try_kcore)
 
 		perf_evlist__config(evlist, &opts, NULL);
 
-		evsel = perf_evlist__first(evlist);
+		evsel = evlist__first(evlist);
 
 		evsel->attr.comm = 1;
 		evsel->attr.disabled = 1;
* Unmerged path tools/perf/tests/event-times.c
diff --git a/tools/perf/tests/event_update.c b/tools/perf/tests/event_update.c
index 458ad9f8e8ad..7c930343cc2e 100644
--- a/tools/perf/tests/event_update.c
+++ b/tools/perf/tests/event_update.c
@@ -86,7 +86,7 @@ int test__event_update(struct test *test __maybe_unused, int subtest __maybe_unu
 	evlist = perf_evlist__new_default();
 	TEST_ASSERT_VAL("failed to get evlist", evlist);
 
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 
 	TEST_ASSERT_VAL("failed to allocate ids",
 			!perf_evsel__alloc_id(evsel, 1, 1));
diff --git a/tools/perf/tests/evsel-roundtrip-name.c b/tools/perf/tests/evsel-roundtrip-name.c
index a104728ebf25..8f06383c21a0 100644
--- a/tools/perf/tests/evsel-roundtrip-name.c
+++ b/tools/perf/tests/evsel-roundtrip-name.c
@@ -34,7 +34,7 @@ static int perf_evsel__roundtrip_cache_name_test(void)
 	}
 
 	idx = 0;
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 
 	for (type = 0; type < PERF_COUNT_HW_CACHE_MAX; type++) {
 		for (op = 0; op < PERF_COUNT_HW_CACHE_OP_MAX; op++) {
diff --git a/tools/perf/tests/hists_cumulate.c b/tools/perf/tests/hists_cumulate.c
index 046748f36a84..500abc144a43 100644
--- a/tools/perf/tests/hists_cumulate.c
+++ b/tools/perf/tests/hists_cumulate.c
@@ -720,7 +720,7 @@ int test__hists_cumulate(struct test *test __maybe_unused, int subtest __maybe_u
 	if (verbose > 1)
 		machine__fprintf(machine, stderr);
 
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 
 	for (i = 0; i < ARRAY_SIZE(testcases); i++) {
 		err = testcases[i](evsel, machine);
diff --git a/tools/perf/tests/hists_link.c b/tools/perf/tests/hists_link.c
index 5a10bd43b3e7..ff5d614d83e0 100644
--- a/tools/perf/tests/hists_link.c
+++ b/tools/perf/tests/hists_link.c
@@ -311,8 +311,8 @@ int test__hists_link(struct test *test __maybe_unused, int subtest __maybe_unuse
 			print_hists_in(hists);
 	}
 
-	first = perf_evlist__first(evlist);
-	evsel = perf_evlist__last(evlist);
+	first = evlist__first(evlist);
+	evsel = evlist__last(evlist);
 
 	first_hists = evsel__hists(first);
 	hists = evsel__hists(evsel);
diff --git a/tools/perf/tests/hists_output.c b/tools/perf/tests/hists_output.c
index 2fe2398a1296..c54f0bb2460d 100644
--- a/tools/perf/tests/hists_output.c
+++ b/tools/perf/tests/hists_output.c
@@ -607,7 +607,7 @@ int test__hists_output(struct test *test __maybe_unused, int subtest __maybe_unu
 	if (verbose > 1)
 		machine__fprintf(machine, stderr);
 
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 
 	for (i = 0; i < ARRAY_SIZE(testcases); i++) {
 		err = testcases[i](evsel, machine);
diff --git a/tools/perf/tests/keep-tracking.c b/tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e..7e096b205bea 100644
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@ -88,7 +88,7 @@ int test__keep_tracking(struct test *test __maybe_unused, int subtest __maybe_un
 
 	perf_evlist__config(evlist, &opts, NULL);
 
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 
 	evsel->attr.comm = 1;
 	evsel->attr.disabled = 1;
@@ -127,7 +127,7 @@ int test__keep_tracking(struct test *test __maybe_unused, int subtest __maybe_un
 
 	perf_evlist__enable(evlist);
 
-	evsel = perf_evlist__last(evlist);
+	evsel = evlist__last(evlist);
 
 	CHECK__(perf_evsel__disable(evsel));
 
* Unmerged path tools/perf/tests/parse-events.c
diff --git a/tools/perf/tests/perf-record.c b/tools/perf/tests/perf-record.c
index 07f6bd8ed719..bf5b437c7544 100644
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@ -102,7 +102,7 @@ int test__PERF_RECORD(struct test *test __maybe_unused, int subtest __maybe_unus
 	/*
 	 * Config the evsels, setting attr->comm on the first one, etc.
 	 */
-	evsel = perf_evlist__first(evlist);
+	evsel = evlist__first(evlist);
 	perf_evsel__set_sample_bit(evsel, CPU);
 	perf_evsel__set_sample_bit(evsel, TID);
 	perf_evsel__set_sample_bit(evsel, TIME);
diff --git a/tools/perf/tests/switch-tracking.c b/tools/perf/tests/switch-tracking.c
index 6cdab5f4812a..1857de564e51 100644
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@ -362,7 +362,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 		goto out_err;
 	}
 
-	cpu_clocks_evsel = perf_evlist__last(evlist);
+	cpu_clocks_evsel = evlist__last(evlist);
 
 	/* Second event */
 	err = parse_events(evlist, "cycles:u", NULL);
@@ -371,7 +371,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 		goto out_err;
 	}
 
-	cycles_evsel = perf_evlist__last(evlist);
+	cycles_evsel = evlist__last(evlist);
 
 	/* Third event */
 	if (!perf_evlist__can_select_event(evlist, sched_switch)) {
@@ -386,7 +386,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 		goto out_err;
 	}
 
-	switch_evsel = perf_evlist__last(evlist);
+	switch_evsel = evlist__last(evlist);
 
 	perf_evsel__set_sample_bit(switch_evsel, CPU);
 	perf_evsel__set_sample_bit(switch_evsel, TIME);
@@ -396,12 +396,12 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 	switch_evsel->immediate = true;
 
 	/* Test moving an event to the front */
-	if (cycles_evsel == perf_evlist__first(evlist)) {
+	if (cycles_evsel == evlist__first(evlist)) {
 		pr_debug("cycles event already at front");
 		goto out_err;
 	}
 	perf_evlist__to_front(evlist, cycles_evsel);
-	if (cycles_evsel != perf_evlist__first(evlist)) {
+	if (cycles_evsel != evlist__first(evlist)) {
 		pr_debug("Failed to move cycles event to front");
 		goto out_err;
 	}
@@ -416,7 +416,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 		goto out_err;
 	}
 
-	tracking_evsel = perf_evlist__last(evlist);
+	tracking_evsel = evlist__last(evlist);
 
 	perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
@@ -429,7 +429,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 	perf_evlist__config(evlist, &opts, NULL);
 
 	/* Check moved event is still at the front */
-	if (cycles_evsel != perf_evlist__first(evlist)) {
+	if (cycles_evsel != evlist__first(evlist)) {
 		pr_debug("Front event no longer at front");
 		goto out_err;
 	}
* Unmerged path tools/perf/tests/task-exit.c
* Unmerged path tools/perf/ui/browsers/hists.c
diff --git a/tools/perf/util/bpf-loader.c b/tools/perf/util/bpf-loader.c
index f250e555f4d0..6ce0f87d9e6f 100644
--- a/tools/perf/util/bpf-loader.c
+++ b/tools/perf/util/bpf-loader.c
@@ -1567,7 +1567,7 @@ struct perf_evsel *bpf__setup_output_event(struct perf_evlist *evlist, const cha
 			return ERR_PTR(-err);
 		}
 
-		evsel = perf_evlist__last(evlist);
+		evsel = evlist__last(evlist);
 	}
 
 	bpf__for_each_map_named(map, obj, tmp, name) {
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
* Unmerged path tools/perf/util/jitdump.c
* Unmerged path tools/perf/util/parse-events.c
* Unmerged path tools/perf/util/record.c
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 04a07cac6b1e..d57a8b901758 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -2323,7 +2323,7 @@ static struct perf_evsel *find_evsel(struct perf_evlist *evlist, char *event_nam
 		if (nr > evlist->nr_entries)
 			return NULL;
 
-		evsel = perf_evlist__first(evlist);
+		evsel = evlist__first(evlist);
 		while (--nr > 0)
 			evsel = perf_evsel__next(evsel);
 
* Unmerged path tools/perf/util/top.c
