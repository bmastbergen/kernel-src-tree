perf stat: Increase perf metric output resolution

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Paul A. Clarke <pc@us.ibm.com>
commit d4d5ca0baac3de82c00ebc7677ee84537c31ba3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d4d5ca0b.failed

Add another digit of precision to the perf metrics output.

Before:

  $ /usr/bin/perf stat --metrics run_cpi /bin/ls
  [...]
           4,345,526      pm_run_cyc                #      1.1 run_cpi
           3,818,069      pm_run_inst_cmpl
  [...]
  $ /usr/bin/perf stat --metrics run_cpi --metric-only /bin/ls
  [...]
               run_cpi
                   1.1
  [...]

After:

  $ perf stat --metrics run_cpi /bin/ls
  [...]
           4,280,882      pm_run_cyc                #     1.12 run_cpi
           3,817,016      pm_run_inst_cmpl
  [...]
  $ perf stat --metrics run_cpi --metric-only /bin/ls
  [...]
               run_cpi
                  1.06
  [...]

	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Signed-off-by: Paul Clarke <pc@us.ibm.com>
LPU-Reference: 1588861087-31280-1-git-send-email-pc@us.ibm.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d4d5ca0baac3de82c00ebc7677ee84537c31ba3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/stat-shadow.c
diff --cc tools/perf/util/stat-shadow.c
index 7b8f4fa4b612,9bd7a8d2a858..000000000000
--- a/tools/perf/util/stat-shadow.c
+++ b/tools/perf/util/stat-shadow.c
@@@ -755,18 -770,40 +755,43 @@@ static void generic_metric(struct perf_
  		pn = strchr(n, ' ');
  		if (pn)
  			*pn = 0;
 -
 -		if (metric_total)
 -			expr__add_id(&pctx, n, metric_total);
 -		else
 -			expr__add_id(&pctx, n, avg_stats(stats)*scale);
 +		expr__add_id(&pctx, n, avg_stats(stats)*scale);
  	}
 -
  	if (!metric_events[i]) {
 -		if (expr__parse(&ratio, &pctx, metric_expr, runtime) == 0) {
 -			char *unit;
 -			char metric_bf[64];
 -
 +		const char *p = metric_expr;
 +
++<<<<<<< HEAD
 +		if (expr__parse(&ratio, &pctx, &p) == 0)
 +			print_metric(config, ctxp, NULL, "%8.1f",
 +				metric_name ?
 +				metric_name :
 +				out->force_header ?  name : "",
 +				ratio);
 +		else
++=======
+ 			if (metric_unit && metric_name) {
+ 				if (perf_pmu__convert_scale(metric_unit,
+ 					&unit, &scale) >= 0) {
+ 					ratio *= scale;
+ 				}
+ 				if (strstr(metric_expr, "?"))
+ 					scnprintf(metric_bf, sizeof(metric_bf),
+ 					  "%s  %s_%d", unit, metric_name, runtime);
+ 				else
+ 					scnprintf(metric_bf, sizeof(metric_bf),
+ 					  "%s  %s", unit, metric_name);
+ 
+ 				print_metric(config, ctxp, NULL, "%8.1f",
+ 					     metric_bf, ratio);
+ 			} else {
+ 				print_metric(config, ctxp, NULL, "%8.2f",
+ 					metric_name ?
+ 					metric_name :
+ 					out->force_header ?  name : "",
+ 					ratio);
+ 			}
+ 		} else {
++>>>>>>> d4d5ca0baac3 (perf stat: Increase perf metric output resolution)
  			print_metric(config, ctxp, NULL, NULL,
  				     out->force_header ?
  				     (metric_name ? metric_name : name) : "", 0);
* Unmerged path tools/perf/util/stat-shadow.c
