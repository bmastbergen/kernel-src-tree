arm64: Lower priority mask for GIC_PRIO_IRQON

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Julien Thierry <julien.thierry.kdev@gmail.com>
commit 677379bc9139ac24b310a281fcb21a2f04288353
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/677379bc.failed

On a system with two security states, if SCR_EL3.FIQ is cleared,
non-secure IRQ priorities get shifted to fit the secure view but
priority masks aren't.

On such system, it turns out that GIC_PRIO_IRQON masks the priority of
normal interrupts, which obviously ends up in a hang.

Increase GIC_PRIO_IRQON value (i.e. lower priority) to make sure
interrupts are not blocked by it.

	Cc: Oleg Nesterov <oleg@redhat.com>
Fixes: bd82d4bd21880b7c ("arm64: Fix incorrect irqflag restore for priority masking")
	Acked-by: Marc Zyngier <marc.zyngier@arm.com>
	Signed-off-by: Julien Thierry <julien.thierry.kdev@gmail.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
[will: fixed Fixes: tag]
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 677379bc9139ac24b310a281fcb21a2f04288353)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/arch_gicv3.h
#	arch/arm64/include/asm/ptrace.h
diff --cc arch/arm64/include/asm/arch_gicv3.h
index ba7f57a02ff4,89e4c8b79349..000000000000
--- a/arch/arm64/include/asm/arch_gicv3.h
+++ b/arch/arm64/include/asm/arch_gicv3.h
@@@ -148,7 -152,15 +148,19 @@@ static inline bool gic_prio_masking_ena
  
  static inline void gic_pmr_mask_irqs(void)
  {
++<<<<<<< HEAD
 +	BUILD_BUG_ON(GICD_INT_DEF_PRI <= GIC_PRIO_IRQOFF);
++=======
+ 	BUILD_BUG_ON(GICD_INT_DEF_PRI < (GIC_PRIO_IRQOFF |
+ 					 GIC_PRIO_PSR_I_SET));
+ 	BUILD_BUG_ON(GICD_INT_DEF_PRI >= GIC_PRIO_IRQON);
+ 	/*
+ 	 * Need to make sure IRQON allows IRQs when SCR_EL3.FIQ is cleared
+ 	 * and non-secure PMR accesses are not subject to the shifts that
+ 	 * are applied to IRQ priorities
+ 	 */
+ 	BUILD_BUG_ON((0x80 | (GICD_INT_DEF_PRI >> 1)) >= GIC_PRIO_IRQON);
++>>>>>>> 677379bc9139 (arm64: Lower priority mask for GIC_PRIO_IRQON)
  	gic_write_pmr(GIC_PRIO_IRQOFF);
  }
  
diff --cc arch/arm64/include/asm/ptrace.h
index 4ad186e6deb1,1dcf63a9ac1f..000000000000
--- a/arch/arm64/include/asm/ptrace.h
+++ b/arch/arm64/include/asm/ptrace.h
@@@ -35,9 -24,15 +35,15 @@@
   * means masking more IRQs (or at least that the same IRQs remain masked).
   *
   * To mask interrupts, we clear the most significant bit of PMR.
 - *
 - * Some code sections either automatically switch back to PSR.I or explicitly
 - * require to not use priority masking. If bit GIC_PRIO_PSR_I_SET is included
 - * in the  the priority mask, it indicates that PSR.I should be set and
 - * interrupt disabling temporarily does not rely on IRQ priorities.
   */
++<<<<<<< HEAD
 +#define GIC_PRIO_IRQON		0xf0
 +#define GIC_PRIO_IRQOFF		(GIC_PRIO_IRQON & ~0x80)
++=======
+ #define GIC_PRIO_IRQON			0xe0
+ #define GIC_PRIO_IRQOFF			(GIC_PRIO_IRQON & ~0x80)
+ #define GIC_PRIO_PSR_I_SET		(1 << 4)
++>>>>>>> 677379bc9139 (arm64: Lower priority mask for GIC_PRIO_IRQON)
  
  /* Additional SPSR bits not exposed in the UABI */
  #define PSR_IL_BIT		(1 << 20)
* Unmerged path arch/arm64/include/asm/arch_gicv3.h
* Unmerged path arch/arm64/include/asm/ptrace.h
