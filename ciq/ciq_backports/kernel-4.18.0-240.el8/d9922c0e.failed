net: phylink: fix link mode modification in PHY mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Russell King <rmk+kernel@armlinux.org.uk>
commit d9922c0e9171129aada1911489dc9e021fcfcb96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d9922c0e.failed

Modifying the link settings via phylink_ethtool_ksettings_set() and
phylink_ethtool_set_pauseparam() didn't always work as intended for
PHY based setups, as calling phylink_mac_config() would result in the
unresolved configuration being committed to the MAC, rather than the
configuration with the speed and duplex setting.

This would work fine if the update caused the link to renegotiate,
but if no settings have changed, phylib won't trigger a renegotiation
cycle, and the MAC will be left incorrectly configured.

Avoid calling phylink_mac_config() unless we are using an inband mode
in phylink_ethtool_ksettings_set(), and use phy_set_asym_pause() as
introduced in 4.20 to set the PHY settings in
phylink_ethtool_set_pauseparam().

	Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d9922c0e9171129aada1911489dc9e021fcfcb96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phylink.c
diff --cc drivers/net/phy/phylink.c
index 12a80fae54e5,536236fdb232..000000000000
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@@ -1263,14 -1344,16 +1269,25 @@@ int phylink_ethtool_set_pauseparam(stru
  	if (pause->tx_pause)
  		config->pause |= MLO_PAUSE_TX;
  
- 	if (!test_bit(PHYLINK_DISABLE_STOPPED, &pl->phylink_disable_state)) {
+ 	/* If we have a PHY, phylib will call our link state function if the
+ 	 * mode has changed, which will trigger a resolve and update the MAC
+ 	 * configuration.
+ 	 */
+ 	if (pl->phydev) {
+ 		phy_set_asym_pause(pl->phydev, pause->rx_pause,
+ 				   pause->tx_pause);
+ 	} else if (!test_bit(PHYLINK_DISABLE_STOPPED,
+ 			     &pl->phylink_disable_state)) {
  		switch (pl->link_an_mode) {
++<<<<<<< HEAD
 +		case MLO_AN_PHY:
 +			/* Silently mark the carrier down, and then trigger a resolve */
 +			netif_carrier_off(pl->netdev);
 +			phylink_run_resolve(pl);
 +			break;
 +
++=======
++>>>>>>> d9922c0e9171 (net: phylink: fix link mode modification in PHY mode)
  		case MLO_AN_FIXED:
  			/* Should we allow fixed links to change against the config? */
  			phylink_resolve_flow(pl, config);
* Unmerged path drivers/net/phy/phylink.c
