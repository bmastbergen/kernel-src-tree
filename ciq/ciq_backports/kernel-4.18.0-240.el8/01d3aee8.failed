crypto: sha256 - Make lib/crypto/sha256.c suitable for generic use

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit 01d3aee86625bd798a5e69afb92517d5530c7ed1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/01d3aee8.failed

Before this commit lib/crypto/sha256.c has only been used in the s390 and
x86 purgatory code, make it suitable for generic use:

* Export interesting symbols
* Add  -D__DISABLE_EXPORTS to CFLAGS_sha256.o for purgatory builds to
  avoid the exports for the purgatory builds
* Add to lib/crypto/Makefile and crypto/Kconfig

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 01d3aee86625bd798a5e69afb92517d5530c7ed1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/Kconfig
#	lib/crypto/Makefile
diff --cc crypto/Kconfig
index eea86349593e,e96b321b51af..000000000000
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@@ -848,53 -849,8 +848,58 @@@ config CRYPTO_SHA1_PPC_SP
  	  SHA-1 secure hash standard (DFIPS 180-4) implemented
  	  using powerpc SPE SIMD instruction set.
  
++<<<<<<< HEAD
 +config CRYPTO_SHA1_MB
 +	tristate "SHA1 digest algorithm (x86_64 Multi-Buffer, Experimental)"
 +	depends on X86 && 64BIT
 +	select CRYPTO_SHA1
 +	select CRYPTO_HASH
 +	select CRYPTO_MCRYPTD
 +	help
 +	  SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2) implemented
 +	  using multi-buffer technique.  This algorithm computes on
 +	  multiple data lanes concurrently with SIMD instructions for
 +	  better throughput.  It should not be enabled by default but
 +	  used when there is significant amount of work to keep the keep
 +	  the data lanes filled to get performance benefit.  If the data
 +	  lanes remain unfilled, a flush operation will be initiated to
 +	  process the crypto jobs, adding a slight latency.
 +
 +config CRYPTO_SHA256_MB
 +	tristate "SHA256 digest algorithm (x86_64 Multi-Buffer, Experimental)"
 +	depends on X86 && 64BIT
 +	select CRYPTO_SHA256
 +	select CRYPTO_HASH
 +	select CRYPTO_MCRYPTD
 +	help
 +	  SHA-256 secure hash standard (FIPS 180-1/DFIPS 180-2) implemented
 +	  using multi-buffer technique.  This algorithm computes on
 +	  multiple data lanes concurrently with SIMD instructions for
 +	  better throughput.  It should not be enabled by default but
 +	  used when there is significant amount of work to keep the keep
 +	  the data lanes filled to get performance benefit.  If the data
 +	  lanes remain unfilled, a flush operation will be initiated to
 +	  process the crypto jobs, adding a slight latency.
 +
 +config CRYPTO_SHA512_MB
 +        tristate "SHA512 digest algorithm (x86_64 Multi-Buffer, Experimental)"
 +        depends on X86 && 64BIT
 +        select CRYPTO_SHA512
 +        select CRYPTO_HASH
 +        select CRYPTO_MCRYPTD
 +        help
 +          SHA-512 secure hash standard (FIPS 180-1/DFIPS 180-2) implemented
 +          using multi-buffer technique.  This algorithm computes on
 +          multiple data lanes concurrently with SIMD instructions for
 +          better throughput.  It should not be enabled by default but
 +          used when there is significant amount of work to keep the keep
 +          the data lanes filled to get performance benefit.  If the data
 +          lanes remain unfilled, a flush operation will be initiated to
 +          process the crypto jobs, adding a slight latency.
++=======
+ config CRYPTO_LIB_SHA256
+ 	tristate
++>>>>>>> 01d3aee86625 (crypto: sha256 - Make lib/crypto/sha256.c suitable for generic use)
  
  config CRYPTO_SHA256
  	tristate "SHA224 and SHA256 digest algorithm"
diff --cc lib/crypto/Makefile
index 88195c34932d,cbe0b6a6450d..000000000000
--- a/lib/crypto/Makefile
+++ b/lib/crypto/Makefile
@@@ -1,4 -1,13 +1,13 @@@
  # SPDX-License-Identifier: GPL-2.0
  
 -obj-$(CONFIG_CRYPTO_LIB_AES) += libaes.o
 -libaes-y := aes.o
 -
  obj-$(CONFIG_CRYPTO_LIB_ARC4) += libarc4.o
  libarc4-y := arc4.o
++<<<<<<< HEAD
++=======
+ 
+ obj-$(CONFIG_CRYPTO_LIB_DES) += libdes.o
+ libdes-y := des.o
+ 
+ obj-$(CONFIG_CRYPTO_LIB_SHA256) += libsha256.o
+ libsha256-y := sha256.o
++>>>>>>> 01d3aee86625 (crypto: sha256 - Make lib/crypto/sha256.c suitable for generic use)
diff --git a/arch/s390/purgatory/Makefile b/arch/s390/purgatory/Makefile
index e94abfc65d17..0edc884eba79 100644
--- a/arch/s390/purgatory/Makefile
+++ b/arch/s390/purgatory/Makefile
@@ -10,6 +10,8 @@ PURGATORY_OBJS = $(addprefix $(obj)/,$(purgatory-y))
 $(obj)/sha256.o: $(srctree)/lib/crypto/sha256.c FORCE
 	$(call if_changed_rule,cc_o_c)
 
+CFLAGS_sha256.o := -D__DISABLE_EXPORTS
+
 $(obj)/mem.o: $(srctree)/arch/s390/lib/mem.S FORCE
 	$(call if_changed_rule,as_o_S)
 
diff --git a/arch/x86/purgatory/Makefile b/arch/x86/purgatory/Makefile
index f40064fc27a6..82e4410ed04e 100644
--- a/arch/x86/purgatory/Makefile
+++ b/arch/x86/purgatory/Makefile
@@ -9,6 +9,8 @@ PURGATORY_OBJS = $(addprefix $(obj)/,$(purgatory-y))
 $(obj)/sha256.o: $(srctree)/lib/crypto/sha256.c FORCE
 	$(call if_changed_rule,cc_o_c)
 
+CFLAGS_sha256.o := -D__DISABLE_EXPORTS
+
 LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib -z nodefaultlib
 targets += purgatory.ro
 
* Unmerged path crypto/Kconfig
diff --git a/include/crypto/sha256.h b/include/crypto/sha256.h
index 6791d21adc71..49aa56e85025 100644
--- a/include/crypto/sha256.h
+++ b/include/crypto/sha256.h
@@ -16,8 +16,9 @@
 /*
  * Stand-alone implementation of the SHA256 algorithm. It is designed to
  * have as little dependencies as possible so it can be used in the
- * kexec_file purgatory. In other cases you should use the implementation in
- * crypto/.
+ * kexec_file purgatory. In other cases you should generally use the
+ * hash APIs from include/crypto/hash.h. Especially when hashing large
+ * amounts of data as those APIs may be hw-accelerated.
  *
  * For details see lib/crypto/sha256.c
  */
* Unmerged path lib/crypto/Makefile
diff --git a/lib/crypto/sha256.c b/lib/crypto/sha256.c
index 75cf3499a1c2..cd3f75386444 100644
--- a/lib/crypto/sha256.c
+++ b/lib/crypto/sha256.c
@@ -16,6 +16,7 @@
  */
 
 #include <linux/bitops.h>
+#include <linux/export.h>
 #include <linux/string.h>
 #include <crypto/sha256.h>
 #include <asm/unaligned.h>
@@ -222,6 +223,7 @@ int sha256_init(struct sha256_state *sctx)
 
 	return 0;
 }
+EXPORT_SYMBOL(sha256_init);
 
 int sha256_update(struct sha256_state *sctx, const u8 *data, unsigned int len)
 {
@@ -252,6 +254,7 @@ int sha256_update(struct sha256_state *sctx, const u8 *data, unsigned int len)
 
 	return 0;
 }
+EXPORT_SYMBOL(sha256_update);
 
 int sha256_final(struct sha256_state *sctx, u8 *out)
 {
@@ -281,3 +284,4 @@ int sha256_final(struct sha256_state *sctx, u8 *out)
 
 	return 0;
 }
+EXPORT_SYMBOL(sha256_final);
