drm/amd/display: Use cursor locking to prevent flip delays

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Aric Cyr <aric.cyr@amd.com>
commit 1e461c37d1fb6712561ad682b2d67ed4f5cbd3ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1e461c37.failed

[Why]
Current locking scheme for cursor can result in a flip missing
its vsync, deferring it for one or more vsyncs.  Result is a
potential for stuttering when cursor is moved.

[How]
Use cursor update lock so that flips are not blocked while cursor
is being programmed.

	Signed-off-by: Aric Cyr <aric.cyr@amd.com>
	Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
	Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit 1e461c37d1fb6712561ad682b2d67ed4f5cbd3ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/dc/core/dc_stream.c
#	drivers/gpu/drm/amd/display/dc/dce110/dce110_hw_sequencer.c
#	drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.h
#	drivers/gpu/drm/amd/display/dc/dcn10/dcn10_init.c
#	drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.c
#	drivers/gpu/drm/amd/display/dc/dcn20/dcn20_init.c
#	drivers/gpu/drm/amd/display/dc/dcn21/dcn21_init.c
#	drivers/gpu/drm/amd/display/dc/dcn21/dcn21_resource.c
#	drivers/gpu/drm/amd/display/dc/inc/hw_sequencer.h
diff --cc drivers/gpu/drm/amd/display/dc/core/dc_stream.c
index 6328ba4cefeb,4f0e7203dba4..000000000000
--- a/drivers/gpu/drm/amd/display/dc/core/dc_stream.c
+++ b/drivers/gpu/drm/amd/display/dc/core/dc_stream.c
@@@ -235,34 -231,6 +235,37 @@@ struct dc_stream_status *dc_stream_get_
  	return dc_stream_get_status_from_state(dc->current_state, stream);
  }
  
++<<<<<<< HEAD
 +static void delay_cursor_until_vupdate(struct pipe_ctx *pipe_ctx, struct dc *dc)
 +{
 +#if defined(CONFIG_DRM_AMD_DC_DCN1_0)
 +	unsigned int vupdate_line;
 +	unsigned int lines_to_vupdate, us_to_vupdate, vpos, nvpos;
 +	struct dc_stream_state *stream = pipe_ctx->stream;
 +	unsigned int us_per_line;
 +
 +	if (stream->ctx->asic_id.chip_family == FAMILY_RV &&
 +			ASICREV_IS_RAVEN(stream->ctx->asic_id.hw_internal_rev)) {
 +
 +		vupdate_line = get_vupdate_offset_from_vsync(pipe_ctx);
 +		if (!dc_stream_get_crtc_position(dc, &stream, 1, &vpos, &nvpos))
 +			return;
 +
 +		if (vpos >= vupdate_line)
 +			return;
 +
 +		us_per_line = stream->timing.h_total * 10000 / stream->timing.pix_clk_100hz;
 +		lines_to_vupdate = vupdate_line - vpos;
 +		us_to_vupdate = lines_to_vupdate * us_per_line;
 +
 +		/* 70 us is a conservative estimate of cursor update time*/
 +		if (us_to_vupdate < 70)
 +			udelay(us_to_vupdate);
 +	}
 +#endif
 +}
++=======
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  
  /**
   * dc_stream_set_cursor_attributes() - Update cursor attributes and set cursor surface address
@@@ -302,18 -270,16 +305,26 @@@ bool dc_stream_set_cursor_attributes
  
  		if (!pipe_to_program) {
  			pipe_to_program = pipe_ctx;
++<<<<<<< HEAD
 +
 +			delay_cursor_until_vupdate(pipe_ctx, core_dc);
 +			core_dc->hwss.pipe_control_lock(core_dc, pipe_to_program, true);
++=======
+ 			dc->hwss.cursor_lock(dc, pipe_to_program, true);
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  		}
  
 -		dc->hwss.set_cursor_attribute(pipe_ctx);
 -		if (dc->hwss.set_cursor_sdr_white_level)
 -			dc->hwss.set_cursor_sdr_white_level(pipe_ctx);
 +		core_dc->hwss.set_cursor_attribute(pipe_ctx);
 +		if (core_dc->hwss.set_cursor_sdr_white_level)
 +			core_dc->hwss.set_cursor_sdr_white_level(pipe_ctx);
  	}
  
  	if (pipe_to_program)
++<<<<<<< HEAD
 +		core_dc->hwss.pipe_control_lock(core_dc, pipe_to_program, false);
++=======
+ 		dc->hwss.cursor_lock(dc, pipe_to_program, false);
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  
  	return true;
  }
@@@ -353,16 -319,14 +364,24 @@@ bool dc_stream_set_cursor_position
  
  		if (!pipe_to_program) {
  			pipe_to_program = pipe_ctx;
++<<<<<<< HEAD
 +
 +			delay_cursor_until_vupdate(pipe_ctx, core_dc);
 +			core_dc->hwss.pipe_control_lock(core_dc, pipe_to_program, true);
++=======
+ 			dc->hwss.cursor_lock(dc, pipe_to_program, true);
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  		}
  
 -		dc->hwss.set_cursor_position(pipe_ctx);
 +		core_dc->hwss.set_cursor_position(pipe_ctx);
  	}
  
  	if (pipe_to_program)
++<<<<<<< HEAD
 +		core_dc->hwss.pipe_control_lock(core_dc, pipe_to_program, false);
++=======
+ 		dc->hwss.cursor_lock(dc, pipe_to_program, false);
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  
  	return true;
  }
diff --cc drivers/gpu/drm/amd/display/dc/dce110/dce110_hw_sequencer.c
index fafb4b470140,6bd8d4e1c294..000000000000
--- a/drivers/gpu/drm/amd/display/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/display/dc/dce110/dce110_hw_sequencer.c
@@@ -2761,10 -2764,10 +2761,15 @@@ static const struct hw_sequencer_funcs 
  	.blank_stream = dce110_blank_stream,
  	.enable_audio_stream = dce110_enable_audio_stream,
  	.disable_audio_stream = dce110_disable_audio_stream,
 +	.enable_display_pipe_clock_gating = enable_display_pipe_clock_gating,
 +	.enable_display_power_gating = dce110_enable_display_power_gating,
  	.disable_plane = dce110_power_down_fe,
  	.pipe_control_lock = dce_pipe_control_lock,
++<<<<<<< HEAD
++=======
+ 	.interdependent_update_lock = NULL,
+ 	.cursor_lock = dce_pipe_control_lock,
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  	.prepare_bandwidth = dce110_prepare_bandwidth,
  	.optimize_bandwidth = dce110_optimize_bandwidth,
  	.set_drr = set_drr,
diff --cc drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.h
index d3616b1948cc,af51424315d5..000000000000
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.h
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.h
@@@ -31,16 -32,71 +31,83 @@@
  struct dc;
  
  void dcn10_hw_sequencer_construct(struct dc *dc);
 +extern void fill_display_configs(
 +	const struct dc_state *context,
 +	struct dm_pp_display_configuration *pp_display_cfg);
  
 +bool is_rgb_cspace(enum dc_color_space output_color_space);
 +
 +void hwss1_plane_atomic_disconnect(struct dc *dc, struct pipe_ctx *pipe_ctx);
 +
 +void dcn10_verify_allow_pstate_change_high(struct dc *dc);
 +
++<<<<<<< HEAD
++=======
+ int dcn10_get_vupdate_offset_from_vsync(struct pipe_ctx *pipe_ctx);
+ void dcn10_setup_vupdate_interrupt(struct dc *dc, struct pipe_ctx *pipe_ctx);
+ enum dc_status dcn10_enable_stream_timing(
+ 		struct pipe_ctx *pipe_ctx,
+ 		struct dc_state *context,
+ 		struct dc *dc);
+ void dcn10_optimize_bandwidth(
+ 		struct dc *dc,
+ 		struct dc_state *context);
+ void dcn10_prepare_bandwidth(
+ 		struct dc *dc,
+ 		struct dc_state *context);
+ void dcn10_pipe_control_lock(
+ 	struct dc *dc,
+ 	struct pipe_ctx *pipe,
+ 	bool lock);
+ void dcn10_cursor_lock(struct dc *dc, struct pipe_ctx *pipe, bool lock);
+ void dcn10_blank_pixel_data(
+ 		struct dc *dc,
+ 		struct pipe_ctx *pipe_ctx,
+ 		bool blank);
+ void dcn10_unblank_stream(struct pipe_ctx *pipe_ctx,
+ 		struct dc_link_settings *link_settings);
+ void dcn10_program_output_csc(struct dc *dc,
+ 		struct pipe_ctx *pipe_ctx,
+ 		enum dc_color_space colorspace,
+ 		uint16_t *matrix,
+ 		int opp_id);
+ bool dcn10_set_output_transfer_func(struct dc *dc, struct pipe_ctx *pipe_ctx,
+ 				const struct dc_stream_state *stream);
+ bool dcn10_set_input_transfer_func(struct dc *dc, struct pipe_ctx *pipe_ctx,
+ 			const struct dc_plane_state *plane_state);
+ void dcn10_update_plane_addr(const struct dc *dc, struct pipe_ctx *pipe_ctx);
+ void dcn10_update_mpcc(struct dc *dc, struct pipe_ctx *pipe_ctx);
+ void dcn10_reset_hw_ctx_wrap(
+ 		struct dc *dc,
+ 		struct dc_state *context);
+ void dcn10_disable_plane(struct dc *dc, struct pipe_ctx *pipe_ctx);
+ void dcn10_lock_all_pipes(
+ 		struct dc *dc,
+ 		struct dc_state *context,
+ 		bool lock);
+ void dcn10_apply_ctx_for_surface(
+ 		struct dc *dc,
+ 		const struct dc_stream_state *stream,
+ 		int num_planes,
+ 		struct dc_state *context);
+ void dcn10_post_unlock_program_front_end(
+ 		struct dc *dc,
+ 		struct dc_state *context);
+ void dcn10_hubp_pg_control(
+ 		struct dce_hwseq *hws,
+ 		unsigned int hubp_inst,
+ 		bool power_on);
+ void dcn10_dpp_pg_control(
+ 		struct dce_hwseq *hws,
+ 		unsigned int dpp_inst,
+ 		bool power_on);
+ void dcn10_enable_power_gating_plane(
+ 	struct dce_hwseq *hws,
+ 	bool enable);
+ void dcn10_plane_atomic_disable(struct dc *dc, struct pipe_ctx *pipe_ctx);
+ void dcn10_disable_vga(
+ 	struct dce_hwseq *hws);
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  void dcn10_program_pipe(
  		struct dc *dc,
  		struct pipe_ctx *pipe_ctx,
diff --cc drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.c
index 0bca011ed7c9,3fcd408e9103..000000000000
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.c
@@@ -364,6 -377,25 +370,28 @@@ void mpc1_mpc_init(struct mpc *mpc
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void mpc1_mpc_init_single_inst(struct mpc *mpc, unsigned int mpcc_id)
+ {
+ 	struct dcn10_mpc *mpc10 = TO_DCN10_MPC(mpc);
+ 	int opp_id;
+ 
+ 	REG_GET(MPCC_OPP_ID[mpcc_id], MPCC_OPP_ID, &opp_id);
+ 
+ 	REG_SET(MPCC_TOP_SEL[mpcc_id], 0, MPCC_TOP_SEL, 0xf);
+ 	REG_SET(MPCC_BOT_SEL[mpcc_id], 0, MPCC_BOT_SEL, 0xf);
+ 	REG_SET(MPCC_OPP_ID[mpcc_id],  0, MPCC_OPP_ID,  0xf);
+ 	REG_SET(MPCC_UPDATE_LOCK_SEL[mpcc_id], 0, MPCC_UPDATE_LOCK_SEL, 0xf);
+ 
+ 	mpc1_init_mpcc(&(mpc->mpcc_array[mpcc_id]), mpcc_id);
+ 
+ 	if (opp_id < MAX_OPP && REG(MUX[opp_id]))
+ 		REG_UPDATE(MUX[opp_id], MPC_OUT_MUX, 0xf);
+ }
+ 
+ 
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  void mpc1_init_mpcc_list_from_hw(
  	struct mpc *mpc,
  	struct mpc_tree *tree)
@@@ -438,7 -478,7 +473,11 @@@ static const struct mpc_funcs dcn10_mpc
  	.assert_mpcc_idle_before_connect = mpc1_assert_mpcc_idle_before_connect,
  	.init_mpcc_list_from_hw = mpc1_init_mpcc_list_from_hw,
  	.update_blending = mpc1_update_blending,
++<<<<<<< HEAD
 +#if defined(CONFIG_DRM_AMD_DC_DCN2_0)
++=======
+ 	.cursor_lock = mpc1_cursor_lock,
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  	.set_denorm = NULL,
  	.set_denorm_clamp = NULL,
  	.set_output_csc = NULL,
diff --cc drivers/gpu/drm/amd/display/dc/inc/hw_sequencer.h
index c6fd0f92eb43,1570fed20de0..000000000000
--- a/drivers/gpu/drm/amd/display/dc/inc/hw_sequencer.h
+++ b/drivers/gpu/drm/amd/display/dc/inc/hw_sequencer.h
@@@ -43,160 -37,84 +43,171 @@@ enum vline_select 
  	VLINE1
  };
  
 +struct dce_hwseq_wa {
 +	bool blnd_crtc_trigger;
 +	bool DEGVIDCN10_253;
 +	bool false_optc_underflow;
 +	bool DEGVIDCN10_254;
 +};
 +
 +struct hwseq_wa_state {
 +	bool DEGVIDCN10_253_applied;
 +};
 +
 +struct dce_hwseq {
 +	struct dc_context *ctx;
 +	const struct dce_hwseq_registers *regs;
 +	const struct dce_hwseq_shift *shifts;
 +	const struct dce_hwseq_mask *masks;
 +	struct dce_hwseq_wa wa;
 +	struct hwseq_wa_state wa_state;
 +};
 +
  struct pipe_ctx;
  struct dc_state;
 +#if defined(CONFIG_DRM_AMD_DC_DCN2_0)
  struct dc_stream_status;
  struct dc_writeback_info;
 +#endif
  struct dchub_init_data;
 -struct dc_static_screen_params;
 +struct dc_static_screen_events;
  struct resource_pool;
 +struct resource_context;
 +struct stream_resource;
 +#ifdef CONFIG_DRM_AMD_DC_DCN2_0
  struct dc_phy_addr_space_config;
  struct dc_virtual_addr_space_config;
 -struct dpp;
 -struct dce_hwseq;
 +#endif
  
  struct hw_sequencer_funcs {
 -	/* Embedded Display Related */
 -	void (*edp_power_control)(struct dc_link *link, bool enable);
 -	void (*edp_wait_for_hpd_ready)(struct dc_link *link, bool power_up);
  
 -	/* Pipe Programming Related */
 +	void (*disable_stream_gating)(struct dc *dc, struct pipe_ctx *pipe_ctx);
 +
 +	void (*enable_stream_gating)(struct dc *dc, struct pipe_ctx *pipe_ctx);
 +
  	void (*init_hw)(struct dc *dc);
 -	void (*enable_accelerated_mode)(struct dc *dc,
 -			struct dc_state *context);
 -	enum dc_status (*apply_ctx_to_hw)(struct dc *dc,
 -			struct dc_state *context);
 -	void (*disable_plane)(struct dc *dc, struct pipe_ctx *pipe_ctx);
 -	void (*apply_ctx_for_surface)(struct dc *dc,
 +
 +	void (*init_pipes)(struct dc *dc, struct dc_state *context);
 +
 +	enum dc_status (*apply_ctx_to_hw)(
 +			struct dc *dc, struct dc_state *context);
 +
 +	void (*reset_hw_ctx_wrap)(
 +			struct dc *dc, struct dc_state *context);
 +
 +	void (*apply_ctx_for_surface)(
 +			struct dc *dc,
  			const struct dc_stream_state *stream,
 -			int num_planes, struct dc_state *context);
 -	void (*program_front_end_for_ctx)(struct dc *dc,
 -			struct dc_state *context);
 -	void (*post_unlock_program_front_end)(struct dc *dc,
 +			int num_planes,
  			struct dc_state *context);
 -	void (*update_plane_addr)(const struct dc *dc,
 +
 +	void (*program_gamut_remap)(
  			struct pipe_ctx *pipe_ctx);
 -	void (*update_dchub)(struct dce_hwseq *hws,
 -			struct dchub_init_data *dh_data);
 -	void (*wait_for_mpcc_disconnect)(struct dc *dc,
 -			struct resource_pool *res_pool,
 +
 +	void (*program_output_csc)(struct dc *dc,
 +			struct pipe_ctx *pipe_ctx,
 +			enum dc_color_space colorspace,
 +			uint16_t *matrix,
 +			int opp_id);
 +
 +#if defined(CONFIG_DRM_AMD_DC_DCN2_0)
 +	void (*program_triplebuffer)(
 +		const struct dc *dc,
 +		struct pipe_ctx *pipe_ctx,
 +		bool enableTripleBuffer);
 +	void (*set_flip_control_gsl)(
 +		struct pipe_ctx *pipe_ctx,
 +		bool flip_immediate);
 +#endif
 +
 +	void (*update_plane_addr)(
 +		const struct dc *dc,
 +		struct pipe_ctx *pipe_ctx);
 +
 +	void (*plane_atomic_disconnect)(
 +		struct dc *dc,
 +		struct pipe_ctx *pipe_ctx);
 +
 +	void (*update_dchub)(
 +		struct dce_hwseq *hws,
 +		struct dchub_init_data *dh_data);
 +
 +#ifdef CONFIG_DRM_AMD_DC_DCN2_0
 +	int (*init_sys_ctx)(
 +			struct dce_hwseq *hws,
 +			struct dc *dc,
 +			struct dc_phy_addr_space_config *pa_config);
 +	void (*init_vm_ctx)(
 +			struct dce_hwseq *hws,
 +			struct dc *dc,
 +			struct dc_virtual_addr_space_config *va_config,
 +			int vmid);
 +#endif
 +	void (*update_mpcc)(
 +		struct dc *dc,
 +		struct pipe_ctx *pipe_ctx);
 +
 +	void (*update_pending_status)(
  			struct pipe_ctx *pipe_ctx);
 -	void (*edp_backlight_control)(
 -			struct dc_link *link,
 -			bool enable);
 -	void (*program_triplebuffer)(const struct dc *dc,
 -		struct pipe_ctx *pipe_ctx, bool enableTripleBuffer);
 -	void (*update_pending_status)(struct pipe_ctx *pipe_ctx);
 +
 +	bool (*set_input_transfer_func)(
 +				struct pipe_ctx *pipe_ctx,
 +				const struct dc_plane_state *plane_state);
 +
 +	bool (*set_output_transfer_func)(
 +				struct pipe_ctx *pipe_ctx,
 +				const struct dc_stream_state *stream);
 +
  	void (*power_down)(struct dc *dc);
  
++<<<<<<< HEAD
 +	void (*enable_accelerated_mode)(struct dc *dc, struct dc_state *context);
++=======
+ 	/* Pipe Lock Related */
+ 	void (*pipe_control_lock)(struct dc *dc,
+ 			struct pipe_ctx *pipe, bool lock);
+ 	void (*interdependent_update_lock)(struct dc *dc,
+ 			struct dc_state *context, bool lock);
+ 	void (*set_flip_control_gsl)(struct pipe_ctx *pipe_ctx,
+ 			bool flip_immediate);
+ 	void (*cursor_lock)(struct dc *dc, struct pipe_ctx *pipe, bool lock);
++>>>>>>> 1e461c37d1fb (drm/amd/display: Use cursor locking to prevent flip delays)
  
 -	/* Timing Related */
 -	void (*get_position)(struct pipe_ctx **pipe_ctx, int num_pipes,
 -			struct crtc_position *position);
 -	int (*get_vupdate_offset_from_vsync)(struct pipe_ctx *pipe_ctx);
 -	void (*enable_per_frame_crtc_position_reset)(struct dc *dc,
 -			int group_size, struct pipe_ctx *grouped_pipes[]);
 -	void (*enable_timing_synchronization)(struct dc *dc,
 -			int group_index, int group_size,
 +	void (*enable_timing_synchronization)(
 +			struct dc *dc,
 +			int group_index,
 +			int group_size,
  			struct pipe_ctx *grouped_pipes[]);
 -	void (*setup_periodic_interrupt)(struct dc *dc,
 -			struct pipe_ctx *pipe_ctx,
 -			enum vline_select vline);
 -	void (*set_drr)(struct pipe_ctx **pipe_ctx, int num_pipes,
 -			unsigned int vmin, unsigned int vmax,
 -			unsigned int vmid, unsigned int vmid_frame_number);
 -	void (*set_static_screen_control)(struct pipe_ctx **pipe_ctx,
 -			int num_pipes,
 -			const struct dc_static_screen_params *events);
  
 -	/* Stream Related */
 +	void (*enable_per_frame_crtc_position_reset)(
 +			struct dc *dc,
 +			int group_size,
 +			struct pipe_ctx *grouped_pipes[]);
 +
 +	void (*enable_display_pipe_clock_gating)(
 +					struct dc_context *ctx,
 +					bool clock_gating);
 +
 +	bool (*enable_display_power_gating)(
 +					struct dc *dc,
 +					uint8_t controller_id,
 +					struct dc_bios *dcb,
 +					enum pipe_gating_control power_gating);
 +
 +	void (*disable_plane)(struct dc *dc, struct pipe_ctx *pipe_ctx);
 +
 +	void (*update_info_frame)(struct pipe_ctx *pipe_ctx);
 +
 +	void (*send_immediate_sdp_message)(
 +				struct pipe_ctx *pipe_ctx,
 +				const uint8_t *custom_sdp_message,
 +				unsigned int sdp_message_size);
 +
  	void (*enable_stream)(struct pipe_ctx *pipe_ctx);
 -	void (*disable_stream)(struct pipe_ctx *pipe_ctx);
 -	void (*blank_stream)(struct pipe_ctx *pipe_ctx);
 +
 +	void (*disable_stream)(struct pipe_ctx *pipe_ctx,
 +			int option);
 +
  	void (*unblank_stream)(struct pipe_ctx *pipe_ctx,
  			struct dc_link_settings *link_settings);
  
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn10/dcn10_init.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn20/dcn20_init.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn21/dcn21_init.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn21/dcn21_resource.c
* Unmerged path drivers/gpu/drm/amd/display/dc/core/dc_stream.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dce110/dce110_hw_sequencer.c
diff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
index 2118ea21d7e9..75cd1e951fcc 100644
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
@@ -1420,6 +1420,16 @@ static void dcn10_pipe_control_lock(
 		dcn10_verify_allow_pstate_change_high(dc);
 }
 
+void dcn10_cursor_lock(struct dc *dc, struct pipe_ctx *pipe, bool lock)
+{
+	/* cursor lock is per MPCC tree, so only need to lock one pipe per stream */
+	if (!pipe || pipe->top_pipe)
+		return;
+
+	dc->res_pool->mpc->funcs->cursor_lock(dc->res_pool->mpc,
+			pipe->stream_res.opp->inst, lock);
+}
+
 static bool wait_for_reset_trigger_to_occur(
 	struct dc_context *dc_ctx,
 	struct timing_generator *tg)
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.h
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn10/dcn10_init.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.c
diff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.h b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.h
index d3d16c4cbea3..d82f099557df 100644
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.h
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_mpc.h
@@ -39,11 +39,12 @@
 	SRII(MPCC_BG_G_Y, MPCC, inst),\
 	SRII(MPCC_BG_R_CR, MPCC, inst),\
 	SRII(MPCC_BG_B_CB, MPCC, inst),\
-	SRII(MPCC_BG_B_CB, MPCC, inst),\
-	SRII(MPCC_SM_CONTROL, MPCC, inst)
+	SRII(MPCC_SM_CONTROL, MPCC, inst),\
+	SRII(MPCC_UPDATE_LOCK_SEL, MPCC, inst)
 
 #define MPC_OUT_MUX_COMMON_REG_LIST_DCN1_0(inst) \
-	SRII(MUX, MPC_OUT, inst)
+	SRII(MUX, MPC_OUT, inst),\
+	VUPDATE_SRII(CUR, VUPDATE_LOCK_SET, inst)
 
 #define MPC_COMMON_REG_VARIABLE_LIST \
 	uint32_t MPCC_TOP_SEL[MAX_MPCC]; \
@@ -55,7 +56,9 @@
 	uint32_t MPCC_BG_R_CR[MAX_MPCC]; \
 	uint32_t MPCC_BG_B_CB[MAX_MPCC]; \
 	uint32_t MPCC_SM_CONTROL[MAX_MPCC]; \
-	uint32_t MUX[MAX_OPP];
+	uint32_t MUX[MAX_OPP]; \
+	uint32_t MPCC_UPDATE_LOCK_SEL[MAX_MPCC]; \
+	uint32_t CUR[MAX_OPP];
 
 #define MPC_COMMON_MASK_SH_LIST_DCN1_0(mask_sh)\
 	SF(MPCC0_MPCC_TOP_SEL, MPCC_TOP_SEL, mask_sh),\
@@ -78,7 +81,8 @@
 	SF(MPCC0_MPCC_SM_CONTROL, MPCC_SM_FIELD_ALT, mask_sh),\
 	SF(MPCC0_MPCC_SM_CONTROL, MPCC_SM_FORCE_NEXT_FRAME_POL, mask_sh),\
 	SF(MPCC0_MPCC_SM_CONTROL, MPCC_SM_FORCE_NEXT_TOP_POL, mask_sh),\
-	SF(MPC_OUT0_MUX, MPC_OUT_MUX, mask_sh)
+	SF(MPC_OUT0_MUX, MPC_OUT_MUX, mask_sh),\
+	SF(MPCC0_MPCC_UPDATE_LOCK_SEL, MPCC_UPDATE_LOCK_SEL, mask_sh)
 
 #define MPC_REG_FIELD_LIST(type) \
 	type MPCC_TOP_SEL;\
@@ -101,7 +105,9 @@
 	type MPCC_SM_FIELD_ALT;\
 	type MPCC_SM_FORCE_NEXT_FRAME_POL;\
 	type MPCC_SM_FORCE_NEXT_TOP_POL;\
-	type MPC_OUT_MUX;
+	type MPC_OUT_MUX;\
+	type MPCC_UPDATE_LOCK_SEL;\
+	type CUR_VUPDATE_LOCK_SET;
 
 struct dcn_mpc_registers {
 	MPC_COMMON_REG_VARIABLE_LIST
@@ -188,4 +194,6 @@ void mpc1_read_mpcc_state(
 		int mpcc_inst,
 		struct mpcc_state *s);
 
+void mpc1_cursor_lock(struct mpc *mpc, int opp_id, bool lock);
+
 #endif
diff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_resource.c b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_resource.c
index 3f25e8da5396..00703e6ff048 100644
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_resource.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_resource.c
@@ -179,6 +179,14 @@ enum dcn10_clk_src_array_id {
 	.reg_name[id] = BASE(mm ## block ## id ## _ ## reg_name ## _BASE_IDX) + \
 					mm ## block ## id ## _ ## reg_name
 
+#define VUPDATE_SRII(reg_name, block, id)\
+	.reg_name[id] = BASE(mm ## reg_name ## 0 ## _ ## block ## id ## _BASE_IDX) + \
+					mm ## reg_name ## 0 ## _ ## block ## id
+
+/* set field/register/bitfield name */
+#define SFRB(field_name, reg_name, bitfield, post_fix)\
+	.field_name = reg_name ## __ ## bitfield ## post_fix
+
 /* NBIO */
 #define NBIO_BASE_INNER(seg) \
 	NBIF_BASE__INST0_SEG ## seg
@@ -409,11 +417,13 @@ static const struct dcn_mpc_registers mpc_regs = {
 };
 
 static const struct dcn_mpc_shift mpc_shift = {
-	MPC_COMMON_MASK_SH_LIST_DCN1_0(__SHIFT)
+	MPC_COMMON_MASK_SH_LIST_DCN1_0(__SHIFT),\
+	SFRB(CUR_VUPDATE_LOCK_SET, CUR0_VUPDATE_LOCK_SET0, CUR0_VUPDATE_LOCK_SET, __SHIFT)
 };
 
 static const struct dcn_mpc_mask mpc_mask = {
-	MPC_COMMON_MASK_SH_LIST_DCN1_0(_MASK),
+	MPC_COMMON_MASK_SH_LIST_DCN1_0(_MASK),\
+	SFRB(CUR_VUPDATE_LOCK_SET, CUR0_VUPDATE_LOCK_SET0, CUR0_VUPDATE_LOCK_SET, _MASK)
 };
 
 #define tg_regs(id)\
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn20/dcn20_init.c
diff --git a/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.c b/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.c
index 240749e4cf83..1f7c7d9cacc2 100644
--- a/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.c
@@ -489,6 +489,7 @@ const struct mpc_funcs dcn20_mpc_funcs = {
 	.remove_mpcc = mpc1_remove_mpcc,
 	.mpc_init = mpc1_mpc_init,
 	.update_blending = mpc2_update_blending,
+	.cursor_lock = mpc1_cursor_lock,
 	.get_mpcc_for_dpp = mpc2_get_mpcc_for_dpp,
 	.wait_for_idle = mpc2_assert_idle_mpcc,
 	.assert_mpcc_idle_before_connect = mpc2_assert_mpcc_idle_before_connect,
diff --git a/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.h b/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.h
index 9750095d2d73..0632692660d5 100644
--- a/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.h
+++ b/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_mpc.h
@@ -171,7 +171,8 @@
 	SF(MPC_OUT0_DENORM_CLAMP_G_Y, MPC_OUT_DENORM_CLAMP_MAX_G_Y, mask_sh),\
 	SF(MPC_OUT0_DENORM_CLAMP_G_Y, MPC_OUT_DENORM_CLAMP_MIN_G_Y, mask_sh),\
 	SF(MPC_OUT0_DENORM_CLAMP_B_CB, MPC_OUT_DENORM_CLAMP_MAX_B_CB, mask_sh),\
-	SF(MPC_OUT0_DENORM_CLAMP_B_CB, MPC_OUT_DENORM_CLAMP_MIN_B_CB, mask_sh)
+	SF(MPC_OUT0_DENORM_CLAMP_B_CB, MPC_OUT_DENORM_CLAMP_MIN_B_CB, mask_sh),\
+	SF(CUR_VUPDATE_LOCK_SET0, CUR_VUPDATE_LOCK_SET, mask_sh)
 
 #define MPC_REG_FIELD_LIST_DCN2_0(type) \
 	MPC_REG_FIELD_LIST(type)\
diff --git a/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_resource.c b/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_resource.c
index 3cf504d27335..88894eb362fb 100644
--- a/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_resource.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn20/dcn20_resource.c
@@ -217,6 +217,10 @@ enum dcn20_clk_src_array_id {
 	.block ## _ ## reg_name[id] = BASE(mm ## block ## id ## _ ## reg_name ## _BASE_IDX) + \
 					mm ## block ## id ## _ ## reg_name
 
+#define VUPDATE_SRII(reg_name, block, id)\
+	.reg_name[id] = BASE(mm ## reg_name ## _ ## block ## id ## _BASE_IDX) + \
+					mm ## reg_name ## _ ## block ## id
+
 /* NBIO */
 #define NBIO_BASE_INNER(seg) \
 	NBIO_BASE__INST0_SEG ## seg
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn21/dcn21_init.c
* Unmerged path drivers/gpu/drm/amd/display/dc/dcn21/dcn21_resource.c
diff --git a/drivers/gpu/drm/amd/display/dc/inc/hw/mpc.h b/drivers/gpu/drm/amd/display/dc/inc/hw/mpc.h
index 45b94e319cd4..ef2934c2f7ff 100644
--- a/drivers/gpu/drm/amd/display/dc/inc/hw/mpc.h
+++ b/drivers/gpu/drm/amd/display/dc/inc/hw/mpc.h
@@ -214,6 +214,22 @@ struct mpc_funcs {
 		struct mpcc_blnd_cfg *blnd_cfg,
 		int mpcc_id);
 
+	/*
+	 * Lock cursor updates for the specified OPP.
+	 * OPP defines the set of MPCC that are locked together for cursor.
+	 *
+	 * Parameters:
+	 * [in] 	mpc		- MPC context.
+	 * [in]     opp_id	- The OPP to lock cursor updates on
+	 * [in]		lock	- lock/unlock the OPP
+	 *
+	 * Return:  void
+	 */
+	void (*cursor_lock)(
+			struct mpc *mpc,
+			int opp_id,
+			bool lock);
+
 	struct mpcc* (*get_mpcc_for_dpp)(
 			struct mpc_tree *tree,
 			int dpp_id);
* Unmerged path drivers/gpu/drm/amd/display/dc/inc/hw_sequencer.h
