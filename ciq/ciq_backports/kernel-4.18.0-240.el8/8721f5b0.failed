KVM: x86: Add a helper to check kernel support when setting cpu cap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 8721f5b061eb18c4bb3b77be3ec1c2811ca574ba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8721f5b0.failed

Add a helper, kvm_cpu_cap_check_and_set(), to query boot_cpu_has() as
part of setting a KVM cpu capability.  VMX in particular has a number of
features that are dependent on both a VMCS capability and kernel
support.

No functional change intended.

	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 8721f5b061eb18c4bb3b77be3ec1c2811ca574ba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/cpuid.h
#	arch/x86/kvm/svm.c
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/cpuid.h
index a2335b92a9a0,fd29b646916a..000000000000
--- a/arch/x86/kvm/cpuid.h
+++ b/arch/x86/kvm/cpuid.h
@@@ -223,4 -266,26 +223,29 @@@ static inline bool cpuid_fault_enabled(
  		  MSR_MISC_FEATURES_ENABLES_CPUID_FAULT;
  }
  
++<<<<<<< HEAD
++=======
+ static __always_inline void kvm_cpu_cap_clear(unsigned int x86_feature)
+ {
+ 	unsigned int x86_leaf = x86_feature / 32;
+ 
+ 	reverse_cpuid_check(x86_leaf);
+ 	kvm_cpu_caps[x86_leaf] &= ~__feature_bit(x86_feature);
+ }
+ 
+ static __always_inline void kvm_cpu_cap_set(unsigned int x86_feature)
+ {
+ 	unsigned int x86_leaf = x86_feature / 32;
+ 
+ 	reverse_cpuid_check(x86_leaf);
+ 	kvm_cpu_caps[x86_leaf] |= __feature_bit(x86_feature);
+ }
+ 
+ static __always_inline void kvm_cpu_cap_check_and_set(unsigned int x86_feature)
+ {
+ 	if (boot_cpu_has(x86_feature))
+ 		kvm_cpu_cap_set(x86_feature);
+ }
+ 
++>>>>>>> 8721f5b061eb (KVM: x86: Add a helper to check kernel support when setting cpu cap)
  #endif
diff --cc arch/x86/kvm/svm.c
index 2c7c88ef7253,997a471d4704..000000000000
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@@ -1372,6 -1367,22 +1372,25 @@@ static void svm_hardware_teardown(void
  	iopm_base = 0;
  }
  
++<<<<<<< HEAD
++=======
+ static __init void svm_set_cpu_caps(void)
+ {
+ 	kvm_set_cpu_caps();
+ 
+ 	/* CPUID 0x80000001 */
+ 	if (nested)
+ 		kvm_cpu_cap_set(X86_FEATURE_SVM);
+ 
+ 	/* CPUID 0x8000000A */
+ 	/* Support next_rip if host supports it */
+ 	kvm_cpu_cap_check_and_set(X86_FEATURE_NRIPS);
+ 
+ 	if (npt_enabled)
+ 		kvm_cpu_cap_set(X86_FEATURE_NPT);
+ }
+ 
++>>>>>>> 8721f5b061eb (KVM: x86: Add a helper to check kernel support when setting cpu cap)
  static __init int svm_hardware_setup(void)
  {
  	int cpu;
diff --cc arch/x86/kvm/vmx/vmx.c
index b4f527d117f1,16a32d37aff9..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -7251,10 -7123,50 +7251,50 @@@ static void vmx_cpuid_update(struct kvm
  	}
  }
  
 -/*
 - * Vendor specific emulation must be handled via ->set_supported_cpuid(), not
 - * vmx_set_cpu_caps(), as capabilities configured during hardware_setup() are
 - * masked against hardware/kernel support, i.e. they'd be lost.
 - */
 -static void vmx_set_supported_cpuid(struct kvm_cpuid_entry2 *entry)
 +static void vmx_set_supported_cpuid(u32 func, struct kvm_cpuid_entry2 *entry)
  {
++<<<<<<< HEAD
 +	if (func == 1 && nested)
 +		entry->ecx |= feature_bit(VMX);
++=======
+ 	switch (entry->function) {
+ 	case 0x7:
+ 		if (vmx_umip_emulated())
+ 			cpuid_entry_set(entry, X86_FEATURE_UMIP);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ static __init void vmx_set_cpu_caps(void)
+ {
+ 	kvm_set_cpu_caps();
+ 
+ 	/* CPUID 0x1 */
+ 	if (nested)
+ 		kvm_cpu_cap_set(X86_FEATURE_VMX);
+ 
+ 	/* CPUID 0x7 */
+ 	if (kvm_mpx_supported())
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_MPX);
+ 	if (cpu_has_vmx_invpcid())
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_INVPCID);
+ 	if (vmx_pt_mode_is_host_guest())
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_INTEL_PT);
+ 
+ 	/* PKU is not yet implemented for shadow paging. */
+ 	if (enable_ept && boot_cpu_has(X86_FEATURE_OSPKE))
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_PKU);
+ 
+ 	/* CPUID 0xD.1 */
+ 	if (!vmx_xsaves_supported())
+ 		kvm_cpu_cap_clear(X86_FEATURE_XSAVES);
+ 
+ 	/* CPUID 0x80000001 */
+ 	if (!cpu_has_vmx_rdtscp())
+ 		kvm_cpu_cap_clear(X86_FEATURE_RDTSCP);
++>>>>>>> 8721f5b061eb (KVM: x86: Add a helper to check kernel support when setting cpu cap)
  }
  
  static void vmx_request_immediate_exit(struct kvm_vcpu *vcpu)
* Unmerged path arch/x86/kvm/cpuid.h
* Unmerged path arch/x86/kvm/svm.c
* Unmerged path arch/x86/kvm/vmx/vmx.c
