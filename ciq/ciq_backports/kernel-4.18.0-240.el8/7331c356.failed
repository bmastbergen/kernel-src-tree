drm/i915/gt: Move vlv GT workarounds from init_clock_gating to workarounds

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit 7331c356b6d2d8a01422cacab27478a1dba9fa2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7331c356.failed

Rescue the GT workarounds from being buried inside init_clock_gating so
that we remember to apply them after a GT reset, and that they are
included in our verification that the workarounds are applied.

	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
	Cc: stable@vger.kernel.org
Link: https://patchwork.freedesktop.org/patch/msgid/20200611080140.30228-3-chris@chris-wilson.co.uk
(cherry picked from commit 7331c356b6d2d8a01422cacab27478a1dba9fa2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_workarounds.c
diff --cc drivers/gpu/drm/i915/gt/intel_workarounds.c
index f8ed29b62e58,6f78c2f02ca1..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_workarounds.c
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds.c
@@@ -666,6 -715,163 +666,166 @@@ int intel_engine_emit_ctx_wa(struct i91
  }
  
  static void
++<<<<<<< HEAD
++=======
+ ivb_gt_workarounds_init(struct drm_i915_private *i915, struct i915_wa_list *wal)
+ {
+ 	/* WaDisableEarlyCull:ivb */
+ 	wa_masked_en(wal, _3D_CHICKEN3, _3D_CHICKEN_SF_DISABLE_OBJEND_CULL);
+ 
+ 	/* WaDisablePSDDualDispatchEnable:ivb */
+ 	if (IS_IVB_GT1(i915))
+ 		wa_masked_en(wal,
+ 			     GEN7_HALF_SLICE_CHICKEN1,
+ 			     GEN7_PSD_SINGLE_PORT_DISPATCH_ENABLE);
+ 
+ 	/* WaDisable_RenderCache_OperationalFlush:ivb */
+ 	wa_masked_dis(wal, CACHE_MODE_0_GEN7, RC_OP_FLUSH_ENABLE);
+ 
+ 	/* Apply the WaDisableRHWOOptimizationForRenderHang:ivb workaround. */
+ 	wa_masked_dis(wal,
+ 		      GEN7_COMMON_SLICE_CHICKEN1,
+ 		      GEN7_CSC1_RHWO_OPT_DISABLE_IN_RCC);
+ 
+ 	/* WaApplyL3ControlAndL3ChickenMode:ivb */
+ 	wa_write(wal, GEN7_L3CNTLREG1, GEN7_WA_FOR_GEN7_L3_CONTROL);
+ 	wa_write(wal, GEN7_L3_CHICKEN_MODE_REGISTER, GEN7_WA_L3_CHICKEN_MODE);
+ 
+ 	/* WaForceL3Serialization:ivb */
+ 	wa_write_clr(wal, GEN7_L3SQCREG4, L3SQ_URB_READ_CAM_MATCH_DISABLE);
+ 
+ 	/*
+ 	 * WaVSThreadDispatchOverride:ivb,vlv
+ 	 *
+ 	 * This actually overrides the dispatch
+ 	 * mode for all thread types.
+ 	 */
+ 	wa_write_masked_or(wal, GEN7_FF_THREAD_MODE,
+ 			   GEN7_FF_SCHED_MASK,
+ 			   GEN7_FF_TS_SCHED_HW |
+ 			   GEN7_FF_VS_SCHED_HW |
+ 			   GEN7_FF_DS_SCHED_HW);
+ 
+ 	if (0) { /* causes HiZ corruption on ivb:gt1 */
+ 		/* enable HiZ Raw Stall Optimization */
+ 		wa_masked_dis(wal, CACHE_MODE_0_GEN7, HIZ_RAW_STALL_OPT_DISABLE);
+ 	}
+ 
+ 	/* WaDisable4x2SubspanOptimization:ivb */
+ 	wa_masked_en(wal, CACHE_MODE_1, PIXEL_SUBSPAN_COLLECT_OPT_DISABLE);
+ 
+ 	/*
+ 	 * BSpec recommends 8x4 when MSAA is used,
+ 	 * however in practice 16x4 seems fastest.
+ 	 *
+ 	 * Note that PS/WM thread counts depend on the WIZ hashing
+ 	 * disable bit, which we don't touch here, but it's good
+ 	 * to keep in mind (see 3DSTATE_PS and 3DSTATE_WM).
+ 	 */
+ 	wa_add(wal, GEN7_GT_MODE, 0,
+ 	       _MASKED_FIELD(GEN6_WIZ_HASHING_MASK, GEN6_WIZ_HASHING_16x4),
+ 	       GEN6_WIZ_HASHING_16x4);
+ }
+ 
+ static void
+ vlv_gt_workarounds_init(struct drm_i915_private *i915, struct i915_wa_list *wal)
+ {
+ 	/* WaDisableEarlyCull:vlv */
+ 	wa_masked_en(wal, _3D_CHICKEN3, _3D_CHICKEN_SF_DISABLE_OBJEND_CULL);
+ 
+ 	/* WaPsdDispatchEnable:vlv */
+ 	/* WaDisablePSDDualDispatchEnable:vlv */
+ 	wa_masked_en(wal,
+ 		     GEN7_HALF_SLICE_CHICKEN1,
+ 		     GEN7_MAX_PS_THREAD_DEP |
+ 		     GEN7_PSD_SINGLE_PORT_DISPATCH_ENABLE);
+ 
+ 	/* WaDisable_RenderCache_OperationalFlush:vlv */
+ 	wa_masked_dis(wal, CACHE_MODE_0_GEN7, RC_OP_FLUSH_ENABLE);
+ 
+ 	/* WaForceL3Serialization:vlv */
+ 	wa_write_clr(wal, GEN7_L3SQCREG4, L3SQ_URB_READ_CAM_MATCH_DISABLE);
+ 
+ 	/*
+ 	 * WaVSThreadDispatchOverride:ivb,vlv
+ 	 *
+ 	 * This actually overrides the dispatch
+ 	 * mode for all thread types.
+ 	 */
+ 	wa_write_masked_or(wal,
+ 			   GEN7_FF_THREAD_MODE,
+ 			   GEN7_FF_SCHED_MASK,
+ 			   GEN7_FF_TS_SCHED_HW |
+ 			   GEN7_FF_VS_SCHED_HW |
+ 			   GEN7_FF_DS_SCHED_HW);
+ 
+ 	/*
+ 	 * BSpec says this must be set, even though
+ 	 * WaDisable4x2SubspanOptimization isn't listed for VLV.
+ 	 */
+ 	wa_masked_en(wal, CACHE_MODE_1, PIXEL_SUBSPAN_COLLECT_OPT_DISABLE);
+ 
+ 	/*
+ 	 * BSpec recommends 8x4 when MSAA is used,
+ 	 * however in practice 16x4 seems fastest.
+ 	 *
+ 	 * Note that PS/WM thread counts depend on the WIZ hashing
+ 	 * disable bit, which we don't touch here, but it's good
+ 	 * to keep in mind (see 3DSTATE_PS and 3DSTATE_WM).
+ 	 */
+ 	wa_add(wal, GEN7_GT_MODE, 0,
+ 	       _MASKED_FIELD(GEN6_WIZ_HASHING_MASK, GEN6_WIZ_HASHING_16x4),
+ 	       GEN6_WIZ_HASHING_16x4);
+ 
+ 	/*
+ 	 * WaIncreaseL3CreditsForVLVB0:vlv
+ 	 * This is the hardware default actually.
+ 	 */
+ 	wa_write(wal, GEN7_L3SQCREG1, VLV_B0_WA_L3SQCREG1_VALUE);
+ }
+ 
+ static void
+ hsw_gt_workarounds_init(struct drm_i915_private *i915, struct i915_wa_list *wal)
+ {
+ 	/* L3 caching of data atomics doesn't work -- disable it. */
+ 	wa_write(wal, HSW_SCRATCH1, HSW_SCRATCH1_L3_DATA_ATOMICS_DISABLE);
+ 
+ 	wa_add(wal,
+ 	       HSW_ROW_CHICKEN3, 0,
+ 	       _MASKED_BIT_ENABLE(HSW_ROW_CHICKEN3_L3_GLOBAL_ATOMICS_DISABLE),
+ 		0 /* XXX does this reg exist? */);
+ 
+ 	/* WaVSRefCountFullforceMissDisable:hsw */
+ 	wa_write_clr(wal, GEN7_FF_THREAD_MODE, GEN7_FF_VS_REF_CNT_FFME);
+ 
+ 	wa_masked_dis(wal,
+ 		      CACHE_MODE_0_GEN7,
+ 		      /* WaDisable_RenderCache_OperationalFlush:hsw */
+ 		      RC_OP_FLUSH_ENABLE |
+ 		      /* enable HiZ Raw Stall Optimization */
+ 		      HIZ_RAW_STALL_OPT_DISABLE);
+ 
+ 	/* WaDisable4x2SubspanOptimization:hsw */
+ 	wa_masked_en(wal, CACHE_MODE_1, PIXEL_SUBSPAN_COLLECT_OPT_DISABLE);
+ 
+ 	/*
+ 	 * BSpec recommends 8x4 when MSAA is used,
+ 	 * however in practice 16x4 seems fastest.
+ 	 *
+ 	 * Note that PS/WM thread counts depend on the WIZ hashing
+ 	 * disable bit, which we don't touch here, but it's good
+ 	 * to keep in mind (see 3DSTATE_PS and 3DSTATE_WM).
+ 	 */
+ 	wa_add(wal, GEN7_GT_MODE, 0,
+ 	       _MASKED_FIELD(GEN6_WIZ_HASHING_MASK, GEN6_WIZ_HASHING_16x4),
+ 	       GEN6_WIZ_HASHING_16x4);
+ 
+ 	/* WaSampleCChickenBitEnable:hsw */
+ 	wa_masked_en(wal, HALF_SLICE_CHICKEN3, HSW_SAMPLE_C_PERFORMANCE);
+ }
+ 
+ static void
++>>>>>>> 7331c356b6d2 (drm/i915/gt: Move vlv GT workarounds from init_clock_gating to workarounds)
  gen9_gt_workarounds_init(struct drm_i915_private *i915, struct i915_wa_list *wal)
  {
  	/* WaDisableKillLogic:bxt,skl,kbl */
@@@ -917,6 -1148,12 +1077,15 @@@ gt_init_workarounds(struct drm_i915_pri
  		bxt_gt_workarounds_init(i915, wal);
  	else if (IS_SKYLAKE(i915))
  		skl_gt_workarounds_init(i915, wal);
++<<<<<<< HEAD
++=======
+ 	else if (IS_HASWELL(i915))
+ 		hsw_gt_workarounds_init(i915, wal);
+ 	else if (IS_VALLEYVIEW(i915))
+ 		vlv_gt_workarounds_init(i915, wal);
+ 	else if (IS_IVYBRIDGE(i915))
+ 		ivb_gt_workarounds_init(i915, wal);
++>>>>>>> 7331c356b6d2 (drm/i915/gt: Move vlv GT workarounds from init_clock_gating to workarounds)
  	else if (INTEL_GEN(i915) <= 8)
  		return;
  	else
* Unmerged path drivers/gpu/drm/i915/gt/intel_workarounds.c
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index 8862271193ca..001d8abf761e 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -9138,24 +9138,6 @@ static void gen6_init_clock_gating(struct drm_i915_private *dev_priv)
 	gen6_check_mch_setup(dev_priv);
 }
 
-static void gen7_setup_fixed_func_scheduler(struct drm_i915_private *dev_priv)
-{
-	u32 reg = I915_READ(GEN7_FF_THREAD_MODE);
-
-	/*
-	 * WaVSThreadDispatchOverride:ivb,vlv
-	 *
-	 * This actually overrides the dispatch
-	 * mode for all thread types.
-	 */
-	reg &= ~GEN7_FF_SCHED_MASK;
-	reg |= GEN7_FF_TS_SCHED_HW;
-	reg |= GEN7_FF_VS_SCHED_HW;
-	reg |= GEN7_FF_DS_SCHED_HW;
-
-	I915_WRITE(GEN7_FF_THREAD_MODE, reg);
-}
-
 static void lpt_init_clock_gating(struct drm_i915_private *dev_priv)
 {
 	/*
@@ -9524,28 +9506,11 @@ static void ivb_init_clock_gating(struct drm_i915_private *dev_priv)
 
 static void vlv_init_clock_gating(struct drm_i915_private *dev_priv)
 {
-	/* WaDisableEarlyCull:vlv */
-	I915_WRITE(_3D_CHICKEN3,
-		   _MASKED_BIT_ENABLE(_3D_CHICKEN_SF_DISABLE_OBJEND_CULL));
-
 	/* WaDisableBackToBackFlipFix:vlv */
 	I915_WRITE(IVB_CHICKEN3,
 		   CHICKEN3_DGMG_REQ_OUT_FIX_DISABLE |
 		   CHICKEN3_DGMG_DONE_FIX_DISABLE);
 
-	/* WaPsdDispatchEnable:vlv */
-	/* WaDisablePSDDualDispatchEnable:vlv */
-	I915_WRITE(GEN7_HALF_SLICE_CHICKEN1,
-		   _MASKED_BIT_ENABLE(GEN7_MAX_PS_THREAD_DEP |
-				      GEN7_PSD_SINGLE_PORT_DISPATCH_ENABLE));
-
-	/* WaDisable_RenderCache_OperationalFlush:vlv */
-	I915_WRITE(CACHE_MODE_0_GEN7, _MASKED_BIT_DISABLE(RC_OP_FLUSH_ENABLE));
-
-	/* WaForceL3Serialization:vlv */
-	I915_WRITE(GEN7_L3SQCREG4, I915_READ(GEN7_L3SQCREG4) &
-		   ~L3SQ_URB_READ_CAM_MATCH_DISABLE);
-
 	/* WaDisableDopClockGating:vlv */
 	I915_WRITE(GEN7_ROW_CHICKEN2,
 		   _MASKED_BIT_ENABLE(DOP_CLOCK_GATING_DISABLE));
@@ -9555,8 +9520,6 @@ static void vlv_init_clock_gating(struct drm_i915_private *dev_priv)
 		   I915_READ(GEN7_SQ_CHICKEN_MBCUNIT_CONFIG) |
 		   GEN7_SQ_CHICKEN_MBCUNIT_SQINTMOB);
 
-	gen7_setup_fixed_func_scheduler(dev_priv);
-
 	/*
 	 * According to the spec, bit 13 (RCZUNIT) must be set on IVB.
 	 * This implements the WaDisableRCZUnitClockGating:vlv workaround.
@@ -9570,30 +9533,6 @@ static void vlv_init_clock_gating(struct drm_i915_private *dev_priv)
 	I915_WRITE(GEN7_UCGCTL4,
 		   I915_READ(GEN7_UCGCTL4) | GEN7_L3BANK2X_CLOCK_GATE_DISABLE);
 
-	/*
-	 * BSpec says this must be set, even though
-	 * WaDisable4x2SubspanOptimization isn't listed for VLV.
-	 */
-	I915_WRITE(CACHE_MODE_1,
-		   _MASKED_BIT_ENABLE(PIXEL_SUBSPAN_COLLECT_OPT_DISABLE));
-
-	/*
-	 * BSpec recommends 8x4 when MSAA is used,
-	 * however in practice 16x4 seems fastest.
-	 *
-	 * Note that PS/WM thread counts depend on the WIZ hashing
-	 * disable bit, which we don't touch here, but it's good
-	 * to keep in mind (see 3DSTATE_PS and 3DSTATE_WM).
-	 */
-	I915_WRITE(GEN7_GT_MODE,
-		   _MASKED_FIELD(GEN6_WIZ_HASHING_MASK, GEN6_WIZ_HASHING_16x4));
-
-	/*
-	 * WaIncreaseL3CreditsForVLVB0:vlv
-	 * This is the hardware default actually.
-	 */
-	I915_WRITE(GEN7_L3SQCREG1, VLV_B0_WA_L3SQCREG1_VALUE);
-
 	/*
 	 * WaDisableVLVClockGating_VBIIssue:vlv
 	 * Disable clock gating on th GCFG unit to prevent a delay
