bpf: Attach raw_tp program with BTF via type name

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit ac4414b5ca47d16c8de3134cc1b868056c4a68ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ac4414b5.failed

BTF type id specified at program load time has all
necessary information to attach that program to raw tracepoint.
Use kernel type name to find raw tracepoint.

Add missing CHECK_ATTR() condition.

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20191016032505.2089704-8-ast@kernel.org
(cherry picked from commit ac4414b5ca47d16c8de3134cc1b868056c4a68ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/syscall.c
index 508dc7afd03d,523e3ac15a08..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -1879,19 -1816,52 +1879,61 @@@ static int bpf_raw_tracepoint_open(cons
  	struct bpf_raw_tracepoint *raw_tp;
  	struct bpf_raw_event_map *btp;
  	struct bpf_prog *prog;
- 	char tp_name[128];
+ 	const char *tp_name;
+ 	char buf[128];
  	int tp_fd, err;
  
++<<<<<<< HEAD
 +	rh_mark_used_feature("eBPF/rawtrace");
 +
 +	if (strncpy_from_user(tp_name, u64_to_user_ptr(attr->raw_tracepoint.name),
 +			      sizeof(tp_name) - 1) < 0)
 +		return -EFAULT;
 +	tp_name[sizeof(tp_name) - 1] = 0;
++=======
+ 	if (CHECK_ATTR(BPF_RAW_TRACEPOINT_OPEN))
+ 		return -EINVAL;
+ 
+ 	prog = bpf_prog_get(attr->raw_tracepoint.prog_fd);
+ 	if (IS_ERR(prog))
+ 		return PTR_ERR(prog);
+ 
+ 	if (prog->type != BPF_PROG_TYPE_RAW_TRACEPOINT &&
+ 	    prog->type != BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE) {
+ 		err = -EINVAL;
+ 		goto out_put_prog;
+ 	}
+ 
+ 	if (prog->type == BPF_PROG_TYPE_RAW_TRACEPOINT &&
+ 	    prog->aux->attach_btf_id) {
+ 		if (attr->raw_tracepoint.name) {
+ 			/* raw_tp name should not be specified in raw_tp
+ 			 * programs that were verified via in-kernel BTF info
+ 			 */
+ 			err = -EINVAL;
+ 			goto out_put_prog;
+ 		}
+ 		/* raw_tp name is taken from type name instead */
+ 		tp_name = kernel_type_name(prog->aux->attach_btf_id);
+ 		/* skip the prefix */
+ 		tp_name += sizeof("btf_trace_") - 1;
+ 	} else {
+ 		if (strncpy_from_user(buf,
+ 				      u64_to_user_ptr(attr->raw_tracepoint.name),
+ 				      sizeof(buf) - 1) < 0) {
+ 			err = -EFAULT;
+ 			goto out_put_prog;
+ 		}
+ 		buf[sizeof(buf) - 1] = 0;
+ 		tp_name = buf;
+ 	}
++>>>>>>> ac4414b5ca47 (bpf: Attach raw_tp program with BTF via type name)
  
  	btp = bpf_get_raw_tracepoint(tp_name);
- 	if (!btp)
- 		return -ENOENT;
+ 	if (!btp) {
+ 		err = -ENOENT;
+ 		goto out_put_prog;
+ 	}
  
  	raw_tp = kzalloc(sizeof(*raw_tp), GFP_USER);
  	if (!raw_tp) {
* Unmerged path kernel/bpf/syscall.c
