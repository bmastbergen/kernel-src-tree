selftests: use "$(MAKE)" instead of "make"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ilya Leoshkevich <iii@linux.ibm.com>
commit 0ac33e4e9b5e4ccdd43c9d4e77882a1af0e41dec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0ac33e4e.failed

When doing "make kselftest TARGETS=bpf -j12", bpf progs end up being
compiled sequentially and thus slowly.

The reason is that parent make (tools/testing/selftests/Makefile) does
not share its jobserver with child make
(tools/testing/selftests/bpf/Makefile), therefore the latter runs with
-j1.

Change all instances of "make" to "$(MAKE)", so that the whole make
hierarchy runs using a single jobserver.

	Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 0ac33e4e9b5e4ccdd43c9d4e77882a1af0e41dec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/Makefile
diff --cc tools/testing/selftests/Makefile
index b432f0c3e7aa,c3feccb99ff5..000000000000
--- a/tools/testing/selftests/Makefile
+++ b/tools/testing/selftests/Makefile
@@@ -71,16 -78,61 +71,57 @@@ ifneq ($(KBUILD_SRC),
  override LDFLAGS =
  endif
  
 -ifneq ($(O),)
 -	BUILD := $(O)
 -else
 -	ifneq ($(KBUILD_OUTPUT),)
 -		BUILD := $(KBUILD_OUTPUT)/kselftest
 -	else
 -		BUILD := $(shell pwd)
 -		DEFAULT_INSTALL_HDR_PATH := 1
 -	endif
 +BUILD := $(O)
 +ifndef BUILD
 +  BUILD := $(KBUILD_OUTPUT)
 +endif
 +ifndef BUILD
 +  BUILD := $(shell pwd)
  endif
  
 -# Prepare for headers install
 -top_srcdir ?= ../../..
 -include $(top_srcdir)/scripts/subarch.include
 -ARCH           ?= $(SUBARCH)
 -export KSFT_KHDR_INSTALL_DONE := 1
  export BUILD
++<<<<<<< HEAD
 +all:
++=======
+ 
+ # build and run gpio when output directory is the src dir.
+ # gpio has dependency on tools/gpio and builds tools/gpio
+ # objects in the src directory in all cases making the src
+ # repo dirty even when objects are relocated.
+ ifneq (1,$(DEFAULT_INSTALL_HDR_PATH))
+ 	TMP := $(filter-out gpio, $(TARGETS))
+ 	TARGETS := $(TMP)
+ endif
+ 
+ # set default goal to all, so make without a target runs all, even when
+ # all isn't the first target in the file.
+ .DEFAULT_GOAL := all
+ 
+ # Install headers here once for all tests. KSFT_KHDR_INSTALL_DONE
+ # is used to avoid running headers_install from lib.mk.
+ # Invoke headers install with --no-builtin-rules to avoid circular
+ # dependency in "make kselftest" case. In this case, second level
+ # make inherits builtin-rules which will use the rule generate
+ # Makefile.o and runs into
+ # "Circular Makefile.o <- prepare dependency dropped."
+ # and headers_install fails and test compile fails.
+ #
+ # O= KBUILD_OUTPUT cases don't run into this error, since main Makefile
+ # invokes them as sub-makes and --no-builtin-rules is not necessary,
+ # but doesn't cause any failures. Keep it simple and use the same
+ # flags in both cases.
+ # Local build cases: "make kselftest", "make -C" - headers are installed
+ # in the default INSTALL_HDR_PATH usr/include.
+ khdr:
+ ifeq (1,$(DEFAULT_INSTALL_HDR_PATH))
+ 	$(MAKE) --no-builtin-rules ARCH=$(ARCH) -C $(top_srcdir) headers_install
+ else
+ 	$(MAKE) --no-builtin-rules INSTALL_HDR_PATH=$$BUILD/usr \
+ 		ARCH=$(ARCH) -C $(top_srcdir) headers_install
+ endif
+ 
+ all: khdr
++>>>>>>> 0ac33e4e9b5e (selftests: use "$(MAKE)" instead of "make")
  	@for TARGET in $(TARGETS); do		\
  		BUILD_TARGET=$$BUILD/$$TARGET;	\
  		mkdir $$BUILD_TARGET  -p;	\
@@@ -164,7 -216,7 +205,7 @@@ endi
  clean:
  	@for TARGET in $(TARGETS); do \
  		BUILD_TARGET=$$BUILD/$$TARGET;	\
- 		make OUTPUT=$$BUILD_TARGET -C $$TARGET clean;\
+ 		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET clean;\
  	done;
  
 -.PHONY: khdr all run_tests hotplug run_hotplug clean_hotplug run_pstore_crash install clean
 +.PHONY: all run_tests hotplug run_hotplug clean_hotplug run_pstore_crash install clean
* Unmerged path tools/testing/selftests/Makefile
