netfilter: nat: remove csum_recalc hook

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Florian Westphal <fw@strlen.de>
commit dac3fe72596f91011afc649a9d181b18466dd895
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/dac3fe72.failed

We can now use direct calls.

	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit dac3fe72596f91011afc649a9d181b18466dd895)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/nf_nat_l3proto.h
#	net/netfilter/nf_nat_proto.c
diff --cc include/net/netfilter/nf_nat_l3proto.h
index d300b8f03972,8ee0b5b629c7..000000000000
--- a/include/net/netfilter/nf_nat_l3proto.h
+++ b/include/net/netfilter/nf_nat_l3proto.h
@@@ -2,39 -2,16 +2,50 @@@
  #ifndef _NF_NAT_L3PROTO_H
  #define _NF_NAT_L3PROTO_H
  
 +struct nf_nat_l4proto;
  struct nf_nat_l3proto {
  	u8	l3proto;
++<<<<<<< HEAD
 +
 +	bool	(*in_range)(const struct nf_conntrack_tuple *t,
 +			    const struct nf_nat_range2 *range);
 +
 +	u32 	(*secure_port)(const struct nf_conntrack_tuple *t, __be16);
 +
 +	bool	(*manip_pkt)(struct sk_buff *skb,
 +			     unsigned int iphdroff,
 +			     const struct nf_nat_l4proto *l4proto,
 +			     const struct nf_conntrack_tuple *target,
 +			     enum nf_nat_manip_type maniptype);
 +
 +	void	(*csum_update)(struct sk_buff *skb, unsigned int iphdroff,
 +			       __sum16 *check,
 +			       const struct nf_conntrack_tuple *t,
 +			       enum nf_nat_manip_type maniptype);
 +
 +	void	(*csum_recalc)(struct sk_buff *skb, u8 proto,
 +			       void *data, __sum16 *check,
 +			       int datalen, int oldlen);
 +
 +	void	(*decode_session)(struct sk_buff *skb,
 +				  const struct nf_conn *ct,
 +				  enum ip_conntrack_dir dir,
 +				  unsigned long statusbit,
 +				  struct flowi *fl);
 +
 +	int	(*nlattr_to_range)(struct nlattr *tb[],
 +				   struct nf_nat_range2 *range);
 +};
++=======
+ };
+ 
+ unsigned int nf_nat_manip_pkt(struct sk_buff *skb, struct nf_conn *ct,
+ 			      enum nf_nat_manip_type mtype,
+ 			      enum ip_conntrack_dir dir);
+ void nf_nat_csum_recalc(struct sk_buff *skb,
+ 			u8 nfproto, u8 proto, void *data, __sum16 *check,
+ 			int datalen, int oldlen);
++>>>>>>> dac3fe72596f (netfilter: nat: remove csum_recalc hook)
  
  int nf_nat_l3proto_register(const struct nf_nat_l3proto *);
  void nf_nat_l3proto_unregister(const struct nf_nat_l3proto *);
* Unmerged path net/netfilter/nf_nat_proto.c
* Unmerged path include/net/netfilter/nf_nat_l3proto.h
diff --git a/net/netfilter/nf_nat_helper.c b/net/netfilter/nf_nat_helper.c
index 99606baedda4..b96d4eb8d002 100644
--- a/net/netfilter/nf_nat_helper.c
+++ b/net/netfilter/nf_nat_helper.c
@@ -98,7 +98,6 @@ bool __nf_nat_mangle_tcp_packet(struct sk_buff *skb,
 				const char *rep_buffer,
 				unsigned int rep_len, bool adjust)
 {
-	const struct nf_nat_l3proto *l3proto;
 	struct tcphdr *tcph;
 	int oldlen, datalen;
 
@@ -120,9 +119,8 @@ bool __nf_nat_mangle_tcp_packet(struct sk_buff *skb,
 
 	datalen = skb->len - protoff;
 
-	l3proto = __nf_nat_l3proto_find(nf_ct_l3num(ct));
-	l3proto->csum_recalc(skb, IPPROTO_TCP, tcph, &tcph->check,
-			     datalen, oldlen);
+	nf_nat_csum_recalc(skb, nf_ct_l3num(ct), IPPROTO_TCP,
+			   tcph, &tcph->check, datalen, oldlen);
 
 	if (adjust && rep_len != match_len)
 		nf_ct_seqadj_set(ct, ctinfo, tcph->seq,
@@ -152,7 +150,6 @@ nf_nat_mangle_udp_packet(struct sk_buff *skb,
 			 const char *rep_buffer,
 			 unsigned int rep_len)
 {
-	const struct nf_nat_l3proto *l3proto;
 	struct udphdr *udph;
 	int datalen, oldlen;
 
@@ -178,9 +175,8 @@ nf_nat_mangle_udp_packet(struct sk_buff *skb,
 	if (!udph->check && skb->ip_summed != CHECKSUM_PARTIAL)
 		return true;
 
-	l3proto = __nf_nat_l3proto_find(nf_ct_l3num(ct));
-	l3proto->csum_recalc(skb, IPPROTO_UDP, udph, &udph->check,
-			     datalen, oldlen);
+	nf_nat_csum_recalc(skb, nf_ct_l3num(ct), IPPROTO_TCP,
+			   udph, &udph->check, datalen, oldlen);
 
 	return true;
 }
* Unmerged path net/netfilter/nf_nat_proto.c
