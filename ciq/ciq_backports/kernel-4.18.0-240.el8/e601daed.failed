Bluetooth: hci_bcm: Drive RTS only for BCM43438

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Stefan Wahren <wahrenst@gmx.net>
commit e601daed271e9eb1b923972a0a1af65f8c7bb77b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e601daed.failed

The commit 3347a80965b3 ("Bluetooth: hci_bcm: Fix RTS handling during
startup") is causing at least a regression for AP6256 on Orange Pi 3.
So do the RTS line handing during startup only on the necessary platform.

Fixes: 3347a80965b3 ("Bluetooth: hci_bcm: Fix RTS handling during startup")
	Reported-by: Ond≈ôej Jirman <megous@megous.com>
	Signed-off-by: Stefan Wahren <wahrenst@gmx.net>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit e601daed271e9eb1b923972a0a1af65f8c7bb77b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/hci_bcm.c
diff --cc drivers/bluetooth/hci_bcm.c
index 70da7a5e5d81,769bb4404bd1..000000000000
--- a/drivers/bluetooth/hci_bcm.c
+++ b/drivers/bluetooth/hci_bcm.c
@@@ -51,8 -37,25 +51,22 @@@
  #define BCM_LM_DIAG_PKT 0x07
  #define BCM_LM_DIAG_SIZE 63
  
 -#define BCM_TYPE49_PKT 0x31
 -#define BCM_TYPE49_SIZE 0
 -
 -#define BCM_TYPE52_PKT 0x34
 -#define BCM_TYPE52_SIZE 0
 -
  #define BCM_AUTOSUSPEND_DELAY	5000 /* default autosleep delay */
  
++<<<<<<< HEAD
++=======
+ #define BCM_NUM_SUPPLIES 2
+ 
+ /**
+  * struct bcm_device_data - device specific data
+  * @no_early_set_baudrate: Disallow set baudrate before driver setup()
+  */
+ struct bcm_device_data {
+ 	bool	no_early_set_baudrate;
+ 	bool	drive_rts_on_open;
+ };
+ 
++>>>>>>> e601daed271e (Bluetooth: hci_bcm: Drive RTS only for BCM43438)
  /**
   * struct bcm_device - device driver resources
   * @serdev_hu: HCI UART controller struct
@@@ -114,6 -122,9 +128,12 @@@ struct bcm_device 
  	struct hci_uart		*hu;
  	bool			is_suspended;
  #endif
++<<<<<<< HEAD
++=======
+ 	bool			no_early_set_baudrate;
+ 	bool			drive_rts_on_open;
+ 	u8			pcm_int_params[5];
++>>>>>>> e601daed271e (Bluetooth: hci_bcm: Drive RTS only for BCM43438)
  };
  
  /* generic bcm uart resources */
@@@ -408,11 -458,22 +428,16 @@@ static int bcm_open(struct hci_uart *hu
  
  out:
  	if (bcm->dev) {
- 		hci_uart_set_flow_control(hu, true);
+ 		if (bcm->dev->drive_rts_on_open)
+ 			hci_uart_set_flow_control(hu, true);
+ 
  		hu->init_speed = bcm->dev->init_speed;
 -
 -		/* If oper_speed is set, ldisc/serdev will set the baudrate
 -		 * before calling setup()
 -		 */
 -		if (!bcm->dev->no_early_set_baudrate)
 -			hu->oper_speed = bcm->dev->oper_speed;
 -
 +		hu->oper_speed = bcm->dev->oper_speed;
  		err = bcm_gpio_set_power(bcm->dev, true);
- 		hci_uart_set_flow_control(hu, false);
+ 
+ 		if (bcm->dev->drive_rts_on_open)
+ 			hci_uart_set_flow_control(hu, false);
+ 
  		if (err)
  			goto err_unset_hu;
  	}
@@@ -1307,6 -1453,12 +1332,15 @@@ static int bcm_serdev_probe(struct serd
  	if (err)
  		dev_err(&serdev->dev, "Failed to power down\n");
  
++<<<<<<< HEAD
++=======
+ 	data = device_get_match_data(bcmdev->dev);
+ 	if (data) {
+ 		bcmdev->no_early_set_baudrate = data->no_early_set_baudrate;
+ 		bcmdev->drive_rts_on_open = data->drive_rts_on_open;
+ 	}
+ 
++>>>>>>> e601daed271e (Bluetooth: hci_bcm: Drive RTS only for BCM43438)
  	return hci_uart_register_device(&bcmdev->serdev_hu, &bcm_proto);
  }
  
@@@ -1318,9 -1470,22 +1352,28 @@@ static void bcm_serdev_remove(struct se
  }
  
  #ifdef CONFIG_OF
++<<<<<<< HEAD
 +static const struct of_device_id bcm_bluetooth_of_match[] = {
 +	{ .compatible = "brcm,bcm43438-bt" },
 +	{ .compatible = "brcm,bcm43540-bt" },
++=======
+ static struct bcm_device_data bcm4354_device_data = {
+ 	.no_early_set_baudrate = true,
+ };
+ 
+ static struct bcm_device_data bcm43438_device_data = {
+ 	.drive_rts_on_open = true,
+ };
+ 
+ static const struct of_device_id bcm_bluetooth_of_match[] = {
+ 	{ .compatible = "brcm,bcm20702a1" },
+ 	{ .compatible = "brcm,bcm4329-bt" },
+ 	{ .compatible = "brcm,bcm4345c5" },
+ 	{ .compatible = "brcm,bcm4330-bt" },
+ 	{ .compatible = "brcm,bcm43438-bt", .data = &bcm43438_device_data },
+ 	{ .compatible = "brcm,bcm43540-bt", .data = &bcm4354_device_data },
+ 	{ .compatible = "brcm,bcm4335a0" },
++>>>>>>> e601daed271e (Bluetooth: hci_bcm: Drive RTS only for BCM43438)
  	{ },
  };
  MODULE_DEVICE_TABLE(of, bcm_bluetooth_of_match);
* Unmerged path drivers/bluetooth/hci_bcm.c
