sched: Fix pick_next_task() vs 'change' pattern race

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 6e2df0581f569038719cf2bc2b3baa3fcc83cab4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6e2df058.failed

Commit 67692435c411 ("sched: Rework pick_next_task() slow-path")
inadvertly introduced a race because it changed a previously
unexplored dependency between dropping the rq->lock and
sched_class::put_prev_task().

The comments about dropping rq->lock, in for example
newidle_balance(), only mentions the task being current and ->on_cpu
being set. But when we look at the 'change' pattern (in for example
sched_setnuma()):

	queued = task_on_rq_queued(p); /* p->on_rq == TASK_ON_RQ_QUEUED */
	running = task_current(rq, p); /* rq->curr == p */

	if (queued)
		dequeue_task(...);
	if (running)
		put_prev_task(...);

	/* change task properties */

	if (queued)
		enqueue_task(...);
	if (running)
		set_next_task(...);

It becomes obvious that if we do this after put_prev_task() has
already been called on @p, things go sideways. This is exactly what
the commit in question allows to happen when it does:

	prev->sched_class->put_prev_task(rq, prev, rf);
	if (!rq->nr_running)
		newidle_balance(rq, rf);

The newidle_balance() call will drop rq->lock after we've called
put_prev_task() and that allows the above 'change' pattern to
interleave and mess up the state.

Furthermore, it turns out we lost the RT-pull when we put the last DL
task.

Fix both problems by extracting the balancing from put_prev_task() and
doing a multi-class balance() pass before put_prev_task().

Fixes: 67692435c411 ("sched: Rework pick_next_task() slow-path")
	Reported-by: Quentin Perret <qperret@google.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Tested-by: Quentin Perret <qperret@google.com>
	Tested-by: Valentin Schneider <valentin.schneider@arm.com>
(cherry picked from commit 6e2df0581f569038719cf2bc2b3baa3fcc83cab4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
#	kernel/sched/deadline.c
#	kernel/sched/stop_task.c
diff --cc kernel/sched/core.c
index 9079f8ce0c0d,0f2eb3629070..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -3350,14 -3928,28 +3350,35 @@@ pick_next_task(struct rq *rq, struct ta
  		return p;
  	}
  
++<<<<<<< HEAD
 +again:
++=======
+ restart:
+ #ifdef CONFIG_SMP
+ 	/*
+ 	 * We must do the balancing pass before put_next_task(), such
+ 	 * that when we release the rq->lock the task is in the same
+ 	 * state as before we took rq->lock.
+ 	 *
+ 	 * We can terminate the balance pass as soon as we know there is
+ 	 * a runnable task of @class priority or higher.
+ 	 */
+ 	for_class_range(class, prev->sched_class, &idle_sched_class) {
+ 		if (class->balance(rq, prev, rf))
+ 			break;
+ 	}
+ #endif
+ 
+ 	put_prev_task(rq, prev);
+ 
++>>>>>>> 6e2df0581f56 (sched: Fix pick_next_task() vs 'change' pattern race)
  	for_each_class(class) {
 -		p = class->pick_next_task(rq, NULL, NULL);
 -		if (p)
 +		p = class->pick_next_task(rq, prev, rf);
 +		if (p) {
 +			if (unlikely(p == RETRY_TASK))
 +				goto again;
  			return p;
 +		}
  	}
  
  	/* The idle class should always have a runnable task: */
diff --cc kernel/sched/deadline.c
index f6520d44abd2,a8a08030a8f7..000000000000
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@@ -1758,49 -1774,18 +1774,52 @@@ static struct task_struct 
  pick_next_task_dl(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
  {
  	struct sched_dl_entity *dl_se;
+ 	struct dl_rq *dl_rq = &rq->dl;
  	struct task_struct *p;
- 	struct dl_rq *dl_rq;
  
++<<<<<<< HEAD
 +	dl_rq = &rq->dl;
 +
 +	if (need_pull_dl_task(rq, prev)) {
 +		/*
 +		 * This is OK, because current is on_cpu, which avoids it being
 +		 * picked for load-balance and preemption/IRQs are still
 +		 * disabled avoiding further scheduler activity on it and we're
 +		 * being very careful to re-start the picking loop.
 +		 */
 +		rq_unpin_lock(rq, rf);
 +		pull_dl_task(rq);
 +		rq_repin_lock(rq, rf);
 +		/*
 +		 * pull_dl_task() can drop (and re-acquire) rq->lock; this
 +		 * means a stop task can slip in, in which case we need to
 +		 * re-start task selection.
 +		 */
 +		if (rq->stop && task_on_rq_queued(rq->stop))
 +			return RETRY_TASK;
 +	}
 +
 +	/*
 +	 * When prev is DL, we may throttle it in put_prev_task().
 +	 * So, we update time before we check for dl_nr_running.
 +	 */
 +	if (prev->sched_class == &dl_sched_class)
 +		update_curr_dl(rq);
 +
 +	if (unlikely(!dl_rq->dl_nr_running))
++=======
+ 	WARN_ON_ONCE(prev || rf);
+ 
+ 	if (!sched_dl_runnable(rq))
++>>>>>>> 6e2df0581f56 (sched: Fix pick_next_task() vs 'change' pattern race)
  		return NULL;
  
 +	put_prev_task(rq, prev);
 +
  	dl_se = pick_next_dl_entity(rq, dl_rq);
  	BUG_ON(!dl_se);
- 
  	p = dl_task_of(dl_se);
- 
  	set_next_task_dl(rq, p);
- 
  	return p;
  }
  
diff --cc kernel/sched/stop_task.c
index 8f414018d5e0,c0640739e05e..000000000000
--- a/kernel/sched/stop_task.c
+++ b/kernel/sched/stop_task.c
@@@ -31,15 -37,13 +37,25 @@@ static void set_next_task_stop(struct r
  static struct task_struct *
  pick_next_task_stop(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
  {
++<<<<<<< HEAD
 +	struct task_struct *stop = rq->stop;
 +
 +	if (!stop || !task_on_rq_queued(stop))
 +		return NULL;
 +
 +	put_prev_task(rq, prev);
 +	set_next_task_stop(rq, stop);
 +
 +	return stop;
++=======
+ 	WARN_ON_ONCE(prev || rf);
+ 
+ 	if (!sched_stop_runnable(rq))
+ 		return NULL;
+ 
+ 	set_next_task_stop(rq, rq->stop);
+ 	return rq->stop;
++>>>>>>> 6e2df0581f56 (sched: Fix pick_next_task() vs 'change' pattern race)
  }
  
  static void
* Unmerged path kernel/sched/core.c
* Unmerged path kernel/sched/deadline.c
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 8a156a004ef4..095ae6c926fe 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6500,6 +6500,15 @@ static void task_dead_fair(struct task_struct *p)
 {
 	remove_entity_load_avg(&p->se);
 }
+
+static int
+balance_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
+{
+	if (rq->nr_running)
+		return 1;
+
+	return newidle_balance(rq, rf) != 0;
+}
 #endif /* CONFIG_SMP */
 
 static unsigned long wakeup_gran(struct sched_entity *se)
@@ -6676,7 +6685,7 @@ pick_next_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf
 	int new_tasks;
 
 again:
-	if (!cfs_rq->nr_running)
+	if (!sched_fair_runnable(rq))
 		goto idle;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
@@ -6811,7 +6820,7 @@ done: __maybe_unused;
 /*
  * Account for a descheduled task:
  */
-static void put_prev_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
+static void put_prev_task_fair(struct rq *rq, struct task_struct *prev)
 {
 	struct sched_entity *se = &prev->se;
 	struct cfs_rq *cfs_rq;
@@ -10329,11 +10338,11 @@ const struct sched_class fair_sched_class = {
 	.check_preempt_curr	= check_preempt_wakeup,
 
 	.pick_next_task		= pick_next_task_fair,
-
 	.put_prev_task		= put_prev_task_fair,
 	.set_next_task          = set_next_task_fair,
 
 #ifdef CONFIG_SMP
+	.balance		= balance_fair,
 	.select_task_rq		= select_task_rq_fair,
 	.migrate_task_rq	= migrate_task_rq_fair,
 
diff --git a/kernel/sched/idle.c b/kernel/sched/idle.c
index b77157291d47..f0fdac9c51f8 100644
--- a/kernel/sched/idle.c
+++ b/kernel/sched/idle.c
@@ -378,6 +378,12 @@ select_task_rq_idle(struct task_struct *p, int cpu, int sd_flag, int flags)
 {
 	return task_cpu(p); /* IDLE tasks as never migrated */
 }
+
+static int
+balance_idle(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
+{
+	return WARN_ON_ONCE(1);
+}
 #endif
 
 /*
@@ -388,7 +394,7 @@ static void check_preempt_curr_idle(struct rq *rq, struct task_struct *p, int fl
 	resched_curr(rq);
 }
 
-static void put_prev_task_idle(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
+static void put_prev_task_idle(struct rq *rq, struct task_struct *prev)
 {
 }
 
@@ -471,6 +477,7 @@ const struct sched_class idle_sched_class = {
 	.set_next_task          = set_next_task_idle,
 
 #ifdef CONFIG_SMP
+	.balance		= balance_idle,
 	.select_task_rq		= select_task_rq_idle,
 	.set_cpus_allowed	= set_cpus_allowed_common,
 #endif
diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 9a6c4d4cbc91..63b79f264ead 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -1468,6 +1468,22 @@ static void check_preempt_equal_prio(struct rq *rq, struct task_struct *p)
 	resched_curr(rq);
 }
 
+static int balance_rt(struct rq *rq, struct task_struct *p, struct rq_flags *rf)
+{
+	if (!on_rt_rq(&p->rt) && need_pull_rt_task(rq, p)) {
+		/*
+		 * This is OK, because current is on_cpu, which avoids it being
+		 * picked for load-balance and preemption/IRQs are still
+		 * disabled avoiding further scheduler activity on it and we've
+		 * not yet started the picking loop.
+		 */
+		rq_unpin_lock(rq, rf);
+		pull_rt_task(rq);
+		rq_repin_lock(rq, rf);
+	}
+
+	return sched_stop_runnable(rq) || sched_dl_runnable(rq) || sched_rt_runnable(rq);
+}
 #endif /* CONFIG_SMP */
 
 /*
@@ -1551,7 +1567,6 @@ static struct task_struct *
 pick_next_task_rt(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
 {
 	struct task_struct *p;
-	struct rt_rq *rt_rq = &rq->rt;
 
 	if (need_pull_rt_task(rq, prev)) {
 		/*
@@ -1580,19 +1595,17 @@ pick_next_task_rt(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
 	if (prev->sched_class == &rt_sched_class)
 		update_curr_rt(rq);
 
-	if (!rt_rq->rt_queued)
+	if (!sched_rt_runnable(rq))
 		return NULL;
 
 	put_prev_task(rq, prev);
 
 	p = _pick_next_task_rt(rq);
-
 	set_next_task_rt(rq, p);
-
 	return p;
 }
 
-static void put_prev_task_rt(struct rq *rq, struct task_struct *p, struct rq_flags *rf)
+static void put_prev_task_rt(struct rq *rq, struct task_struct *p)
 {
 	update_curr_rt(rq);
 
@@ -1604,18 +1617,6 @@ static void put_prev_task_rt(struct rq *rq, struct task_struct *p, struct rq_fla
 	 */
 	if (on_rt_rq(&p->rt) && p->nr_cpus_allowed > 1)
 		enqueue_pushable_task(rq, p);
-
-	if (rf && !on_rt_rq(&p->rt) && need_pull_rt_task(rq, p)) {
-		/*
-		 * This is OK, because current is on_cpu, which avoids it being
-		 * picked for load-balance and preemption/IRQs are still
-		 * disabled avoiding further scheduler activity on it and we've
-		 * not yet started the picking loop.
-		 */
-		rq_unpin_lock(rq, rf);
-		pull_rt_task(rq);
-		rq_repin_lock(rq, rf);
-	}
 }
 
 #ifdef CONFIG_SMP
@@ -2392,8 +2393,8 @@ const struct sched_class rt_sched_class = {
 	.set_next_task          = set_next_task_rt,
 
 #ifdef CONFIG_SMP
+	.balance		= balance_rt,
 	.select_task_rq		= select_task_rq_rt,
-
 	.set_cpus_allowed       = set_cpus_allowed_common,
 	.rq_online              = rq_online_rt,
 	.rq_offline             = rq_offline_rt,
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 53610e62107c..dbc357a91eba 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -1687,10 +1687,11 @@ struct sched_class {
 	struct task_struct * (*pick_next_task)(struct rq *rq,
 					       struct task_struct *prev,
 					       struct rq_flags *rf);
-	void (*put_prev_task)(struct rq *rq, struct task_struct *p, struct rq_flags *rf);
+	void (*put_prev_task)(struct rq *rq, struct task_struct *p);
 	void (*set_next_task)(struct rq *rq, struct task_struct *p);
 
 #ifdef CONFIG_SMP
+	int (*balance)(struct rq *rq, struct task_struct *prev, struct rq_flags *rf);
 	int  (*select_task_rq)(struct task_struct *p, int task_cpu, int sd_flag, int flags);
 	RH_KABI_REPLACE(void (*migrate_task_rq)(struct task_struct *p),\
 			void (*migrate_task_rq)(struct task_struct *p, int new_cpu))
@@ -1738,7 +1739,7 @@ struct sched_class {
 static inline void put_prev_task(struct rq *rq, struct task_struct *prev)
 {
 	WARN_ON_ONCE(rq->curr != prev);
-	prev->sched_class->put_prev_task(rq, prev, NULL);
+	prev->sched_class->put_prev_task(rq, prev);
 }
 
 static inline void set_next_task(struct rq *rq, struct task_struct *next)
@@ -1752,8 +1753,12 @@ static inline void set_next_task(struct rq *rq, struct task_struct *next)
 #else
 #define sched_class_highest (&dl_sched_class)
 #endif
+
+#define for_class_range(class, _from, _to) \
+	for (class = (_from); class != (_to); class = class->next)
+
 #define for_each_class(class) \
-   for (class = sched_class_highest; class; class = class->next)
+	for_class_range(class, sched_class_highest, NULL)
 
 extern const struct sched_class stop_sched_class;
 extern const struct sched_class dl_sched_class;
@@ -1761,6 +1766,25 @@ extern const struct sched_class rt_sched_class;
 extern const struct sched_class fair_sched_class;
 extern const struct sched_class idle_sched_class;
 
+static inline bool sched_stop_runnable(struct rq *rq)
+{
+	return rq->stop && task_on_rq_queued(rq->stop);
+}
+
+static inline bool sched_dl_runnable(struct rq *rq)
+{
+	return rq->dl.dl_nr_running > 0;
+}
+
+static inline bool sched_rt_runnable(struct rq *rq)
+{
+	return rq->rt.rt_queued > 0;
+}
+
+static inline bool sched_fair_runnable(struct rq *rq)
+{
+	return rq->cfs.nr_running > 0;
+}
 
 #ifdef CONFIG_SMP
 
* Unmerged path kernel/sched/stop_task.c
