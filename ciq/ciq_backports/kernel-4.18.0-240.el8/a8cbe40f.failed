perf evsel: Add iterator to iterate over events ordered by CPU

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andi Kleen <ak@linux.intel.com>
commit a8cbe40fe9f4ba499cc60b8b6a6851c2c1963797
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a8cbe40f.failed

Add some common code that is needed to iterate over all events
in CPU order. Used in followon patches

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: http://lore.kernel.org/lkml/20191121001522.180827-6-andi@firstfloor.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a8cbe40fe9f4ba499cc60b8b6a6851c2c1963797)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/cpumap.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/cpumap.h
index 1265f0e33920,3a442f021468..000000000000
--- a/tools/perf/util/cpumap.h
+++ b/tools/perf/util/cpumap.h
@@@ -76,11 -57,11 +76,17 @@@ int cpu__max_cpu(void)
  int cpu__max_present_cpu(void);
  int cpu__get_node(int cpu);
  
 -int cpu_map__build_map(struct perf_cpu_map *cpus, struct perf_cpu_map **res,
 -		       int (*f)(struct perf_cpu_map *map, int cpu, void *data),
 +int cpu_map__build_map(struct cpu_map *cpus, struct cpu_map **res,
 +		       int (*f)(struct cpu_map *map, int cpu, void *data),
  		       void *data);
  
++<<<<<<< HEAD
 +int cpu_map__cpu(struct cpu_map *cpus, int idx);
 +bool cpu_map__has(struct cpu_map *cpus, int cpu);
 +int cpu_map__idx(struct cpu_map *cpus, int cpu);
++=======
+ int cpu_map__cpu(struct perf_cpu_map *cpus, int idx);
+ bool cpu_map__has(struct perf_cpu_map *cpus, int cpu);
+ 
++>>>>>>> a8cbe40fe9f4 (perf evsel: Add iterator to iterate over events ordered by CPU)
  #endif /* __PERF_CPUMAP_H */
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,dae6e846b2f8..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -338,23 -333,55 +338,59 @@@ int perf_evlist__add_newtp(struct perf_
  	return 0;
  }
  
 -static int perf_evlist__nr_threads(struct evlist *evlist,
 -				   struct evsel *evsel)
 +static int perf_evlist__nr_threads(struct perf_evlist *evlist,
 +				   struct perf_evsel *evsel)
  {
 -	if (evsel->core.system_wide)
 +	if (evsel->system_wide)
  		return 1;
  	else
 -		return perf_thread_map__nr(evlist->core.threads);
 +		return thread_map__nr(evlist->threads);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__disable(struct perf_evlist *evlist)
++=======
+ void evlist__cpu_iter_start(struct evlist *evlist)
+ {
+ 	struct evsel *pos;
+ 
+ 	/*
+ 	 * Reset the per evsel cpu_iter. This is needed because
+ 	 * each evsel's cpumap may have a different index space,
+ 	 * and some operations need the index to modify
+ 	 * the FD xyarray (e.g. open, close)
+ 	 */
+ 	evlist__for_each_entry(evlist, pos)
+ 		pos->cpu_iter = 0;
+ }
+ 
+ bool evsel__cpu_iter_skip_no_inc(struct evsel *ev, int cpu)
+ {
+ 	if (ev->cpu_iter >= ev->core.cpus->nr)
+ 		return true;
+ 	if (cpu >= 0 && ev->core.cpus->map[ev->cpu_iter] != cpu)
+ 		return true;
+ 	return false;
+ }
+ 
+ bool evsel__cpu_iter_skip(struct evsel *ev, int cpu)
+ {
+ 	if (!evsel__cpu_iter_skip_no_inc(ev, cpu)) {
+ 		ev->cpu_iter++;
+ 		return false;
+ 	}
+ 	return true;
+ }
+ 
+ void evlist__disable(struct evlist *evlist)
++>>>>>>> a8cbe40fe9f4 (perf evsel: Add iterator to iterate over events ordered by CPU)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
 -		if (pos->disabled || !perf_evsel__is_group_leader(pos) || !pos->core.fd)
 +		if (pos->disabled || !perf_evsel__is_group_leader(pos) || !pos->fd)
  			continue;
 -		evsel__disable(pos);
 +		perf_evsel__disable(pos);
  	}
  
  	evlist->enabled = false;
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,22e2f58eabea..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -311,21 -332,29 +311,37 @@@ void perf_evlist__to_front(struct perf_
   * @tmp: struct evsel temp iterator
   */
  #define evlist__for_each_entry_safe(evlist, tmp, evsel) \
 -	__evlist__for_each_entry_safe(&(evlist)->core.entries, tmp, evsel)
 +	__evlist__for_each_entry_safe(&(evlist)->entries, tmp, evsel)
 +
++<<<<<<< HEAD
 +void perf_evlist__set_tracking_event(struct perf_evlist *evlist,
 +				     struct perf_evsel *tracking_evsel);
  
 +struct perf_evsel *
 +perf_evlist__find_evsel_by_str(struct perf_evlist *evlist, const char *str);
++=======
+ #define evlist__for_each_cpu(evlist, index, cpu)	\
+ 	evlist__cpu_iter_start(evlist);			\
+ 	perf_cpu_map__for_each_cpu (cpu, index, (evlist)->core.all_cpus)
+ 
+ void perf_evlist__set_tracking_event(struct evlist *evlist,
+ 				     struct evsel *tracking_evsel);
+ 
+ void evlist__cpu_iter_start(struct evlist *evlist);
+ bool evsel__cpu_iter_skip(struct evsel *ev, int cpu);
+ bool evsel__cpu_iter_skip_no_inc(struct evsel *ev, int cpu);
+ 
+ struct evsel *
+ perf_evlist__find_evsel_by_str(struct evlist *evlist, const char *str);
++>>>>>>> a8cbe40fe9f4 (perf evsel: Add iterator to iterate over events ordered by CPU)
  
 -struct evsel *perf_evlist__event2evsel(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__event2evsel(struct perf_evlist *evlist,
  					    union perf_event *event);
  
 -bool perf_evlist__exclude_kernel(struct evlist *evlist);
 +bool perf_evlist__exclude_kernel(struct perf_evlist *evlist);
  
 -void perf_evlist__force_leader(struct evlist *evlist);
 +void perf_evlist__force_leader(struct perf_evlist *evlist);
  
 -struct evsel *perf_evlist__reset_weak_group(struct evlist *evlist,
 -						 struct evsel *evsel);
 +struct perf_evsel *perf_evlist__reset_weak_group(struct perf_evlist *evlist,
 +						 struct perf_evsel *evsel);
  #endif /* __PERF_EVLIST_H */
* Unmerged path tools/perf/util/cpumap.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/evsel.h b/tools/perf/util/evsel.h
index 2ab992b39a4c..ff03c87f2c8f 100644
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@ -166,6 +166,7 @@ struct perf_evsel {
 	bool			collect_stat;
 	bool			weak_group;
 	bool			percore;
+	int			cpu_iter;
 	const char		*pmu_name;
 	struct {
 		perf_evsel__sb_cb_t	*cb;
