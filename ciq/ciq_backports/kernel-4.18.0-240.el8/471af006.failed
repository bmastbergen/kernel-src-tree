perf/x86/amd: Constrain Large Increment per Cycle events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Kim Phillips <kim.phillips@amd.com>
commit 471af006a747f1c535c8a8c6c0973c320fe01b22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/471af006.failed

AMD Family 17h processors and above gain support for Large Increment
per Cycle events.  Unfortunately there is no CPUID or equivalent bit
that indicates whether the feature exists or not, so we continue to
determine eligibility based on a CPU family number comparison.

For Large Increment per Cycle events, we add a f17h-and-compatibles
get_event_constraints_f17h() that returns an even counter bitmask:
Large Increment per Cycle events can only be placed on PMCs 0, 2,
and 4 out of the currently available 0-5.  The only currently
public event that requires this feature to report valid counts
is PMCx003 "Retired SSE/AVX Operations".

Note that the CPU family logic in amd_core_pmu_init() is changed
so as to be able to selectively add initialization for features
available in ranges of backward-compatible CPU families.  This
Large Increment per Cycle feature is expected to be retained
in future families.

A side-effect of assigning a new get_constraints function for f17h
disables calling the old (prior to f15h) amd_get_event_constraints
implementation left enabled by commit e40ed1542dd7 ("perf/x86: Add perf
support for AMD family-17h processors"), which is no longer
necessary since those North Bridge event codes are obsoleted.

Also fix a spelling mistake whilst in the area (calulating ->
calculating).

Fixes: e40ed1542dd7 ("perf/x86: Add perf support for AMD family-17h processors")
	Signed-off-by: Kim Phillips <kim.phillips@amd.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lkml.kernel.org/r/20191114183720.19887-2-kim.phillips@amd.com
(cherry picked from commit 471af006a747f1c535c8a8c6c0973c320fe01b22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/amd/core.c
diff --cc arch/x86/events/amd/core.c
index 2974a841a31b,571168f01615..000000000000
--- a/arch/x86/events/amd/core.c
+++ b/arch/x86/events/amd/core.c
@@@ -900,26 -929,9 +928,29 @@@ static int __init amd_core_pmu_init(voi
  	if (!boot_cpu_has(X86_FEATURE_PERFCTR_CORE))
  		return 0;
  
- 	/* Avoid calulating the value each time in the NMI handler */
+ 	/* Avoid calculating the value each time in the NMI handler */
  	perf_nmi_window = msecs_to_jiffies(100);
  
++<<<<<<< HEAD
 +	switch (boot_cpu_data.x86) {
 +	case 0x15:
 +		pr_cont("Fam15h ");
 +		x86_pmu.get_event_constraints = amd_get_event_constraints_f15h;
 +		break;
 +	case 0x17:
 +		pr_cont("Fam17h ");
 +		/*
 +		 * In family 17h, there are no event constraints in the PMC hardware.
 +		 * We fallback to using default amd_get_event_constraints.
 +		 */
 +		break;
 +	default:
 +		pr_err("core perfctr but no constraints; unknown hardware!\n");
 +		return -ENODEV;
 +	}
 +
++=======
++>>>>>>> 471af006a747 (perf/x86/amd: Constrain Large Increment per Cycle events)
  	/*
  	 * If core performance counter extensions exists, we must use
  	 * MSR_F15H_PERF_CTL/MSR_F15H_PERF_CTR msrs. See also
* Unmerged path arch/x86/events/amd/core.c
diff --git a/arch/x86/events/perf_event.h b/arch/x86/events/perf_event.h
index 930611db8f9a..e2fd363de649 100644
--- a/arch/x86/events/perf_event.h
+++ b/arch/x86/events/perf_event.h
@@ -77,6 +77,7 @@ static inline bool constraint_match(struct event_constraint *c, u64 ecode)
 #define PERF_X86_EVENT_AUTO_RELOAD	0x0200 /* use PEBS auto-reload */
 #define PERF_X86_EVENT_LARGE_PEBS	0x0400 /* use large PEBS */
 #define PERF_X86_EVENT_PEBS_VIA_PT	0x0800 /* use PT buffer for PEBS */
+#define PERF_X86_EVENT_PAIR		0x1000 /* Large Increment per Cycle */
 
 struct amd_nb {
 	int nb_id;  /* NorthBridge id */
@@ -743,6 +744,7 @@ do {									\
 #define PMU_FL_EXCL_ENABLED	0x8 /* exclusive counter active */
 #define PMU_FL_PEBS_ALL		0x10 /* all events are valid PEBS events */
 #define PMU_FL_TFA		0x20 /* deal with TSX force abort */
+#define PMU_FL_PAIR		0x40 /* merge counters for large incr. events */
 
 #define EVENT_VAR(_id)  event_attr_##_id
 #define EVENT_PTR(_id) &event_attr_##_id.attr.attr
