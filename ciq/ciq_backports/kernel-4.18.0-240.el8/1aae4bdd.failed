bpf: Switch BPF UAPI #define constants used from BPF program side to enums

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 1aae4bdd787998ea331a56f3db9d8595790fe2f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1aae4bdd.failed

Switch BPF UAPI constants, previously defined as #define macro, to anonymous
enum values. This preserves constants values and behavior in expressions, but
has added advantaged of being captured as part of DWARF and, subsequently, BTF
type info. Which, in turn, greatly improves usefulness of generated vmlinux.h
for BPF applications, as it will not require BPF users to copy/paste various
flags and constants, which are frequently used with BPF helpers. Only those
constants that are used/useful from BPF program side are converted.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20200303003233.3496043-2-andriin@fb.com
(cherry picked from commit 1aae4bdd787998ea331a56f3db9d8595790fe2f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/bpf.h
#	tools/include/uapi/linux/bpf.h
diff --cc include/uapi/linux/bpf.h
index c9871d53e313,d6b33ea27bcc..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -326,30 -341,37 +329,41 @@@ enum 
   * Note, the LRU nodes (including free nodes) cannot be moved
   * across different LRU lists.
   */
- #define BPF_F_NO_COMMON_LRU	(1U << 1)
+ 	BPF_F_NO_COMMON_LRU	= (1U << 1),
  /* Specify numa node during map creation */
- #define BPF_F_NUMA_NODE		(1U << 2)
- 
- #define BPF_OBJ_NAME_LEN 16U
+ 	BPF_F_NUMA_NODE		= (1U << 2),
  
  /* Flags for accessing BPF object from syscall side. */
- #define BPF_F_RDONLY		(1U << 3)
- #define BPF_F_WRONLY		(1U << 4)
+ 	BPF_F_RDONLY		= (1U << 3),
+ 	BPF_F_WRONLY		= (1U << 4),
  
  /* Flag for stack_map, store build_id+offset instead of pointer */
- #define BPF_F_STACK_BUILD_ID	(1U << 5)
+ 	BPF_F_STACK_BUILD_ID	= (1U << 5),
  
  /* Zero-initialize hash function seed. This should only be used for testing. */
- #define BPF_F_ZERO_SEED		(1U << 6)
+ 	BPF_F_ZERO_SEED		= (1U << 6),
  
  /* Flags for accessing BPF object from program side. */
- #define BPF_F_RDONLY_PROG	(1U << 7)
- #define BPF_F_WRONLY_PROG	(1U << 8)
+ 	BPF_F_RDONLY_PROG	= (1U << 7),
+ 	BPF_F_WRONLY_PROG	= (1U << 8),
  
  /* Clone map from listener for newly accepted socket */
- #define BPF_F_CLONE		(1U << 9)
+ 	BPF_F_CLONE		= (1U << 9),
  
++<<<<<<< HEAD
 +/* flags for BPF_PROG_QUERY */
++=======
+ /* Enable memory-mapping BPF map */
+ 	BPF_F_MMAPABLE		= (1U << 10),
+ };
+ 
+ /* Flags for BPF_PROG_QUERY. */
+ 
+ /* Query effective (directly attached + inherited from ancestor cgroups)
+  * programs that will be executed for events within a cgroup.
+  * attach_flags with this flag are returned only for directly attached programs.
+  */
++>>>>>>> 1aae4bdd7879 (bpf: Switch BPF UAPI #define constants used from BPF program side to enums)
  #define BPF_F_QUERY_EFFECTIVE	(1U << 0)
  
  enum bpf_stack_build_id_status {
@@@ -2943,11 -3130,20 +2981,23 @@@ enum 
  					 << BPF_ADJ_ROOM_ENCAP_L2_SHIFT)
  
  /* BPF_FUNC_sysctl_get_name flags. */
- #define BPF_F_SYSCTL_BASE_NAME		(1ULL << 0)
+ enum {
+ 	BPF_F_SYSCTL_BASE_NAME		= (1ULL << 0),
+ };
  
  /* BPF_FUNC_sk_storage_get flags */
- #define BPF_SK_STORAGE_GET_F_CREATE	(1ULL << 0)
+ enum {
+ 	BPF_SK_STORAGE_GET_F_CREATE	= (1ULL << 0),
+ };
+ 
++<<<<<<< HEAD
++=======
+ /* BPF_FUNC_read_branch_records flags. */
+ enum {
+ 	BPF_F_GET_BRANCH_RECORDS_SIZE	= (1ULL << 0),
+ };
  
++>>>>>>> 1aae4bdd7879 (bpf: Switch BPF UAPI #define constants used from BPF program side to enums)
  /* Mode for BPF_FUNC_skb_adjust_room helper. */
  enum bpf_adj_room_mode {
  	BPF_ADJ_ROOM_NET,
diff --cc tools/include/uapi/linux/bpf.h
index 2bc35095902a,d6b33ea27bcc..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -321,27 -341,37 +324,41 @@@ enum 
   * Note, the LRU nodes (including free nodes) cannot be moved
   * across different LRU lists.
   */
- #define BPF_F_NO_COMMON_LRU	(1U << 1)
+ 	BPF_F_NO_COMMON_LRU	= (1U << 1),
  /* Specify numa node during map creation */
- #define BPF_F_NUMA_NODE		(1U << 2)
- 
- #define BPF_OBJ_NAME_LEN 16U
+ 	BPF_F_NUMA_NODE		= (1U << 2),
  
  /* Flags for accessing BPF object from syscall side. */
- #define BPF_F_RDONLY		(1U << 3)
- #define BPF_F_WRONLY		(1U << 4)
+ 	BPF_F_RDONLY		= (1U << 3),
+ 	BPF_F_WRONLY		= (1U << 4),
  
  /* Flag for stack_map, store build_id+offset instead of pointer */
- #define BPF_F_STACK_BUILD_ID	(1U << 5)
+ 	BPF_F_STACK_BUILD_ID	= (1U << 5),
  
  /* Zero-initialize hash function seed. This should only be used for testing. */
- #define BPF_F_ZERO_SEED		(1U << 6)
+ 	BPF_F_ZERO_SEED		= (1U << 6),
  
  /* Flags for accessing BPF object from program side. */
- #define BPF_F_RDONLY_PROG	(1U << 7)
- #define BPF_F_WRONLY_PROG	(1U << 8)
+ 	BPF_F_RDONLY_PROG	= (1U << 7),
+ 	BPF_F_WRONLY_PROG	= (1U << 8),
  
++<<<<<<< HEAD
 +/* flags for BPF_PROG_QUERY */
++=======
+ /* Clone map from listener for newly accepted socket */
+ 	BPF_F_CLONE		= (1U << 9),
+ 
+ /* Enable memory-mapping BPF map */
+ 	BPF_F_MMAPABLE		= (1U << 10),
+ };
+ 
+ /* Flags for BPF_PROG_QUERY. */
+ 
+ /* Query effective (directly attached + inherited from ancestor cgroups)
+  * programs that will be executed for events within a cgroup.
+  * attach_flags with this flag are returned only for directly attached programs.
+  */
++>>>>>>> 1aae4bdd7879 (bpf: Switch BPF UAPI #define constants used from BPF program side to enums)
  #define BPF_F_QUERY_EFFECTIVE	(1U << 0)
  
  enum bpf_stack_build_id_status {
@@@ -2903,11 -3130,20 +2944,23 @@@ enum 
  					 << BPF_ADJ_ROOM_ENCAP_L2_SHIFT)
  
  /* BPF_FUNC_sysctl_get_name flags. */
- #define BPF_F_SYSCTL_BASE_NAME		(1ULL << 0)
+ enum {
+ 	BPF_F_SYSCTL_BASE_NAME		= (1ULL << 0),
+ };
  
  /* BPF_FUNC_sk_storage_get flags */
- #define BPF_SK_STORAGE_GET_F_CREATE	(1ULL << 0)
+ enum {
+ 	BPF_SK_STORAGE_GET_F_CREATE	= (1ULL << 0),
+ };
+ 
++<<<<<<< HEAD
++=======
+ /* BPF_FUNC_read_branch_records flags. */
+ enum {
+ 	BPF_F_GET_BRANCH_RECORDS_SIZE	= (1ULL << 0),
+ };
  
++>>>>>>> 1aae4bdd7879 (bpf: Switch BPF UAPI #define constants used from BPF program side to enums)
  /* Mode for BPF_FUNC_skb_adjust_room helper. */
  enum bpf_adj_room_mode {
  	BPF_ADJ_ROOM_NET,
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path tools/include/uapi/linux/bpf.h
