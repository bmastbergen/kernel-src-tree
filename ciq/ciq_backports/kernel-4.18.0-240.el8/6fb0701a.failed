net/mlx5: E-Switch, Add support for offloading rules with no in_port

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Paul Blakey <paulb@mellanox.com>
commit 6fb0701a9cfa248f1c1e5dfde15c4d79bb1bdc69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6fb0701a.failed

FTEs in global tables may match on packets from multiple in_ports.
Provide the capability to omit the in_port match condition.

	Signed-off-by: Paul Blakey <paulb@mellanox.com>
	Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6fb0701a9cfa248f1c1e5dfde15c4d79bb1bdc69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index 9c629f913b96,6254bb6e7886..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@@ -376,6 -388,12 +376,15 @@@ enum 
  	MLX5_ESW_DEST_ENCAP_VALID   = BIT(1),
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	MLX5_ESW_ATTR_FLAG_VLAN_HANDLED  = BIT(0),
+ 	MLX5_ESW_ATTR_FLAG_SLOW_PATH     = BIT(1),
+ 	MLX5_ESW_ATTR_FLAG_NO_IN_PORT    = BIT(2),
+ };
+ 
++>>>>>>> 6fb0701a9cfa (net/mlx5: E-Switch, Add support for offloading rules with no in_port)
  struct mlx5_esw_flow_attr {
  	struct mlx5_eswitch_rep *in_rep;
  	struct mlx5_core_dev	*in_mdev;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 1f7d3f1673cb,c36185eb5fbb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -221,7 -380,18 +221,22 @@@ mlx5_eswitch_add_offloaded_rule(struct 
  	if (flow_act.action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
  		flow_act.modify_hdr = attr->modify_hdr;
  
++<<<<<<< HEAD
 +	fdb = esw_get_prio_table(esw, attr->chain, attr->prio, !!split);
++=======
+ 	if (split) {
+ 		fdb = esw_vport_tbl_get(esw, attr);
+ 	} else {
+ 		if (attr->chain || attr->prio)
+ 			fdb = mlx5_esw_chains_get_table(esw, attr->chain,
+ 							attr->prio, 0);
+ 		else
+ 			fdb = attr->fdb;
+ 
+ 		if (!(attr->flags & MLX5_ESW_ATTR_FLAG_NO_IN_PORT))
+ 			mlx5_eswitch_set_rule_source_port(esw, spec, attr);
+ 	}
++>>>>>>> 6fb0701a9cfa (net/mlx5: E-Switch, Add support for offloading rules with no in_port)
  	if (IS_ERR(fdb)) {
  		rule = ERR_CAST(fdb);
  		goto err_esw_get;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
