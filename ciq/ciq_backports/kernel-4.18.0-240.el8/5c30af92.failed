libperf: Adopt perf_evsel__read() function from tools/perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 5c30af92f2b1e9d844e1ae3243e4adcd7753d4c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5c30af92.failed

Move the perf_evsel__read() function to libperf as a public interface
together with struct perf_counts_values for returning counter values.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-65-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 5c30af92f2b1e9d844e1ae3243e4adcd7753d4c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evsel.c
#	tools/perf/lib/include/internal/evsel.h
#	tools/perf/lib/include/perf/evsel.h
#	tools/perf/lib/libperf.map
#	tools/perf/util/counts.h
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,2e23cf420cce..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,29 +1,32 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__init;
+ 		perf_evsel__open;
+ 		perf_evsel__close;
+ 		perf_evsel__read;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
++>>>>>>> 5c30af92f2b1 (libperf: Adopt perf_evsel__read() function from tools/perf)
  	local:
  		*;
  };
diff --cc tools/perf/util/counts.h
index 460b56ce3252,13430f353c19..000000000000
--- a/tools/perf/util/counts.h
+++ b/tools/perf/util/counts.h
@@@ -2,18 -2,8 +2,23 @@@
  #ifndef __PERF_COUNTS_H
  #define __PERF_COUNTS_H
  
++<<<<<<< HEAD
 +#include "xyarray.h"
 +
 +struct perf_counts_values {
 +	union {
 +		struct {
 +			u64 val;
 +			u64 ena;
 +			u64 run;
 +		};
 +		u64 values[3];
 +	};
 +};
++=======
+ #include <internal/xyarray.h>
+ #include <perf/evsel.h>
++>>>>>>> 5c30af92f2b1 (libperf: Adopt perf_evsel__read() function from tools/perf)
  
  struct perf_counts {
  	s8			  scaled;
diff --cc tools/perf/util/evsel.c
index e99257f738ba,0957ec24f518..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1380,49 -1346,8 +1380,52 @@@ void perf_counts_values__scale(struct p
  		*pscaled = scaled;
  }
  
++<<<<<<< HEAD
 +static int perf_evsel__read_size(struct perf_evsel *evsel)
 +{
 +	u64 read_format = evsel->attr.read_format;
 +	int entry = sizeof(u64); /* value */
 +	int size = 0;
 +	int nr = 1;
 +
 +	if (read_format & PERF_FORMAT_TOTAL_TIME_ENABLED)
 +		size += sizeof(u64);
 +
 +	if (read_format & PERF_FORMAT_TOTAL_TIME_RUNNING)
 +		size += sizeof(u64);
 +
 +	if (read_format & PERF_FORMAT_ID)
 +		entry += sizeof(u64);
 +
 +	if (read_format & PERF_FORMAT_GROUP) {
 +		nr = evsel->nr_members;
 +		size += sizeof(u64);
 +	}
 +
 +	size += entry * nr;
 +	return size;
 +}
 +
 +int perf_evsel__read(struct perf_evsel *evsel, int cpu, int thread,
 +		     struct perf_counts_values *count)
 +{
 +	size_t size = perf_evsel__read_size(evsel);
 +
 +	memset(count, 0, sizeof(*count));
 +
 +	if (FD(evsel, cpu, thread) < 0)
 +		return -EINVAL;
 +
 +	if (readn(FD(evsel, cpu, thread), count->values, size) <= 0)
 +		return -errno;
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5c30af92f2b1 (libperf: Adopt perf_evsel__read() function from tools/perf)
  static int
 -perf_evsel__read_one(struct evsel *evsel, int cpu, int thread)
 +perf_evsel__read_one(struct perf_evsel *evsel, int cpu, int thread)
  {
  	struct perf_counts_values *count = perf_counts(evsel->counts, cpu, thread);
  
@@@ -1483,11 -1408,11 +1486,16 @@@ perf_evsel__process_group_data(struct p
  }
  
  static int
 -perf_evsel__read_group(struct evsel *leader, int cpu, int thread)
 +perf_evsel__read_group(struct perf_evsel *leader, int cpu, int thread)
  {
  	struct perf_stat_evsel *ps = leader->stats;
++<<<<<<< HEAD
 +	u64 read_format = leader->attr.read_format;
 +	int size = perf_evsel__read_size(leader);
++=======
+ 	u64 read_format = leader->core.attr.read_format;
+ 	int size = perf_evsel__read_size(&leader->core);
++>>>>>>> 5c30af92f2b1 (libperf: Adopt perf_evsel__read() function from tools/perf)
  	u64 *data = ps->group_data;
  
  	if (!(read_format & PERF_FORMAT_ID))
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,57e315d8158e..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -341,15 -333,12 +341,19 @@@ static inline bool perf_evsel__match2(s
  #define perf_evsel__cmp(a, b)			\
  	((a) &&					\
  	 (b) &&					\
 -	 (a)->core.attr.type == (b)->core.attr.type &&	\
 -	 (a)->core.attr.config == (b)->core.attr.config)
 +	 (a)->attr.type == (b)->attr.type &&	\
 +	 (a)->attr.config == (b)->attr.config)
  
++<<<<<<< HEAD
 +int perf_evsel__read(struct perf_evsel *evsel, int cpu, int thread,
 +		     struct perf_counts_values *count);
 +
 +int perf_evsel__read_counter(struct perf_evsel *evsel, int cpu, int thread);
++=======
+ int perf_evsel__read_counter(struct evsel *evsel, int cpu, int thread);
++>>>>>>> 5c30af92f2b1 (libperf: Adopt perf_evsel__read() function from tools/perf)
  
 -int __perf_evsel__read_on_cpu(struct evsel *evsel,
 +int __perf_evsel__read_on_cpu(struct perf_evsel *evsel,
  			      int cpu, int thread, bool scale);
  
  /**
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/lib/include/perf/evsel.h
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/lib/include/perf/evsel.h
* Unmerged path tools/perf/lib/libperf.map
diff --git a/tools/perf/tests/event-times.c b/tools/perf/tests/event-times.c
index 1a2686f1fcf0..1e4f1ca4ea21 100644
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@ -195,7 +195,7 @@ static int test_times(int (attach)(struct perf_evlist *),
 
 	TEST_ASSERT_VAL("failed to detach", !detach(evlist));
 
-	perf_evsel__read(evsel, 0, 0, &count);
+	perf_evsel__read(&evsel->core, 0, 0, &count);
 
 	err = !(count.ena == count.run);
 
* Unmerged path tools/perf/util/counts.h
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
