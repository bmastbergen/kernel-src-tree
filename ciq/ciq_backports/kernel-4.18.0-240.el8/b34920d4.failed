sched/fair: Move task_numa_work() init to init_numa_balancing()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Valentin Schneider <valentin.schneider@arm.com>
commit b34920d4ce6e6fc9424c20a4be98676eb543122f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b34920d4.failed

We only need to set the callback_head worker function once, do it
during sched_fork().

While at it, move the comment regarding double task_work addition to
init_numa_balancing(), since the double add sentinel is first set there.

	Suggested-by: Peter Zijlstra <peterz@infradead.org>
	Signed-off-by: Valentin Schneider <valentin.schneider@arm.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: mgorman@suse.de
	Cc: riel@surriel.com
Link: https://lkml.kernel.org/r/20190715102508.32434-3-valentin.schneider@arm.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b34920d4ce6e6fc9424c20a4be98676eb543122f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 8e9226f8554c,fd391fc00ed8..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -2646,6 -2624,50 +2646,53 @@@ out
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void init_numa_balancing(unsigned long clone_flags, struct task_struct *p)
+ {
+ 	int mm_users = 0;
+ 	struct mm_struct *mm = p->mm;
+ 
+ 	if (mm) {
+ 		mm_users = atomic_read(&mm->mm_users);
+ 		if (mm_users == 1) {
+ 			mm->numa_next_scan = jiffies + msecs_to_jiffies(sysctl_numa_balancing_scan_delay);
+ 			mm->numa_scan_seq = 0;
+ 		}
+ 	}
+ 	p->node_stamp			= 0;
+ 	p->numa_scan_seq		= mm ? mm->numa_scan_seq : 0;
+ 	p->numa_scan_period		= sysctl_numa_balancing_scan_delay;
+ 	/* Protect against double add, see task_tick_numa and task_numa_work */
+ 	p->numa_work.next		= &p->numa_work;
+ 	p->numa_faults			= NULL;
+ 	RCU_INIT_POINTER(p->numa_group, NULL);
+ 	p->last_task_numa_placement	= 0;
+ 	p->last_sum_exec_runtime	= 0;
+ 
+ 	init_task_work(&p->numa_work, task_numa_work);
+ 
+ 	/* New address space, reset the preferred nid */
+ 	if (!(clone_flags & CLONE_VM)) {
+ 		p->numa_preferred_nid = NUMA_NO_NODE;
+ 		return;
+ 	}
+ 
+ 	/*
+ 	 * New thread, keep existing numa_preferred_nid which should be copied
+ 	 * already by arch_dup_task_struct but stagger when scans start.
+ 	 */
+ 	if (mm) {
+ 		unsigned int delay;
+ 
+ 		delay = min_t(unsigned int, task_scan_max(current),
+ 			current->numa_scan_period * mm_users * NSEC_PER_MSEC);
+ 		delay += 2 * TICK_NSEC;
+ 		p->node_stamp = delay;
+ 	}
+ }
+ 
++>>>>>>> b34920d4ce6e (sched/fair: Move task_numa_work() init to init_numa_balancing())
  /*
   * Drive the periodic memory faults..
   */
* Unmerged path kernel/sched/fair.c
