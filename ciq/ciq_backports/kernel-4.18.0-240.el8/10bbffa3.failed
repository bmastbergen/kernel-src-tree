Bluetooth: Fix using advertising instance duration as timeout

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
commit 10bbffa3e88e3aae870c734b234c0718d26f97ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/10bbffa3.failed

When using LE Set Extended Advertising Enable command the duration
refers to the lifetime of instance not the length which is actually
controlled by the interval_min and interval_max when setting the
parameters.

	Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 10bbffa3e88e3aae870c734b234c0718d26f97ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/hci_request.c
diff --cc net/bluetooth/hci_request.c
index 9ceb26407637,3a2ec34c2999..000000000000
--- a/net/bluetooth/hci_request.c
+++ b/net/bluetooth/hci_request.c
@@@ -1283,6 -1460,267 +1283,270 @@@ unlock
  	hci_dev_unlock(hdev);
  }
  
++<<<<<<< HEAD
++=======
+ int hci_get_random_address(struct hci_dev *hdev, bool require_privacy,
+ 			   bool use_rpa, struct adv_info *adv_instance,
+ 			   u8 *own_addr_type, bdaddr_t *rand_addr)
+ {
+ 	int err;
+ 
+ 	bacpy(rand_addr, BDADDR_ANY);
+ 
+ 	/* If privacy is enabled use a resolvable private address. If
+ 	 * current RPA has expired then generate a new one.
+ 	 */
+ 	if (use_rpa) {
+ 		int to;
+ 
+ 		*own_addr_type = ADDR_LE_DEV_RANDOM;
+ 
+ 		if (adv_instance) {
+ 			if (!adv_instance->rpa_expired &&
+ 			    !bacmp(&adv_instance->random_addr, &hdev->rpa))
+ 				return 0;
+ 
+ 			adv_instance->rpa_expired = false;
+ 		} else {
+ 			if (!hci_dev_test_and_clear_flag(hdev, HCI_RPA_EXPIRED) &&
+ 			    !bacmp(&hdev->random_addr, &hdev->rpa))
+ 				return 0;
+ 		}
+ 
+ 		err = smp_generate_rpa(hdev, hdev->irk, &hdev->rpa);
+ 		if (err < 0) {
+ 			BT_ERR("%s failed to generate new RPA", hdev->name);
+ 			return err;
+ 		}
+ 
+ 		bacpy(rand_addr, &hdev->rpa);
+ 
+ 		to = msecs_to_jiffies(hdev->rpa_timeout * 1000);
+ 		if (adv_instance)
+ 			queue_delayed_work(hdev->workqueue,
+ 					   &adv_instance->rpa_expired_cb, to);
+ 		else
+ 			queue_delayed_work(hdev->workqueue,
+ 					   &hdev->rpa_expired, to);
+ 
+ 		return 0;
+ 	}
+ 
+ 	/* In case of required privacy without resolvable private address,
+ 	 * use an non-resolvable private address. This is useful for
+ 	 * non-connectable advertising.
+ 	 */
+ 	if (require_privacy) {
+ 		bdaddr_t nrpa;
+ 
+ 		while (true) {
+ 			/* The non-resolvable private address is generated
+ 			 * from random six bytes with the two most significant
+ 			 * bits cleared.
+ 			 */
+ 			get_random_bytes(&nrpa, 6);
+ 			nrpa.b[5] &= 0x3f;
+ 
+ 			/* The non-resolvable private address shall not be
+ 			 * equal to the public address.
+ 			 */
+ 			if (bacmp(&hdev->bdaddr, &nrpa))
+ 				break;
+ 		}
+ 
+ 		*own_addr_type = ADDR_LE_DEV_RANDOM;
+ 		bacpy(rand_addr, &nrpa);
+ 
+ 		return 0;
+ 	}
+ 
+ 	/* No privacy so use a public address. */
+ 	*own_addr_type = ADDR_LE_DEV_PUBLIC;
+ 
+ 	return 0;
+ }
+ 
+ void __hci_req_clear_ext_adv_sets(struct hci_request *req)
+ {
+ 	hci_req_add(req, HCI_OP_LE_CLEAR_ADV_SETS, 0, NULL);
+ }
+ 
+ int __hci_req_setup_ext_adv_instance(struct hci_request *req, u8 instance)
+ {
+ 	struct hci_cp_le_set_ext_adv_params cp;
+ 	struct hci_dev *hdev = req->hdev;
+ 	bool connectable;
+ 	u32 flags;
+ 	bdaddr_t random_addr;
+ 	u8 own_addr_type;
+ 	int err;
+ 	struct adv_info *adv_instance;
+ 	bool secondary_adv;
+ 	/* In ext adv set param interval is 3 octets */
+ 	const u8 adv_interval[3] = { 0x00, 0x08, 0x00 };
+ 
+ 	if (instance > 0) {
+ 		adv_instance = hci_find_adv_instance(hdev, instance);
+ 		if (!adv_instance)
+ 			return -EINVAL;
+ 	} else {
+ 		adv_instance = NULL;
+ 	}
+ 
+ 	flags = get_adv_instance_flags(hdev, instance);
+ 
+ 	/* If the "connectable" instance flag was not set, then choose between
+ 	 * ADV_IND and ADV_NONCONN_IND based on the global connectable setting.
+ 	 */
+ 	connectable = (flags & MGMT_ADV_FLAG_CONNECTABLE) ||
+ 		      mgmt_get_connectable(hdev);
+ 
+ 	if (!is_advertising_allowed(hdev, connectable))
+ 		return -EPERM;
+ 
+ 	/* Set require_privacy to true only when non-connectable
+ 	 * advertising is used. In that case it is fine to use a
+ 	 * non-resolvable private address.
+ 	 */
+ 	err = hci_get_random_address(hdev, !connectable,
+ 				     adv_use_rpa(hdev, flags), adv_instance,
+ 				     &own_addr_type, &random_addr);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	memset(&cp, 0, sizeof(cp));
+ 
+ 	memcpy(cp.min_interval, adv_interval, sizeof(cp.min_interval));
+ 	memcpy(cp.max_interval, adv_interval, sizeof(cp.max_interval));
+ 
+ 	secondary_adv = (flags & MGMT_ADV_FLAG_SEC_MASK);
+ 
+ 	if (connectable) {
+ 		if (secondary_adv)
+ 			cp.evt_properties = cpu_to_le16(LE_EXT_ADV_CONN_IND);
+ 		else
+ 			cp.evt_properties = cpu_to_le16(LE_LEGACY_ADV_IND);
+ 	} else if (get_adv_instance_scan_rsp_len(hdev, instance)) {
+ 		if (secondary_adv)
+ 			cp.evt_properties = cpu_to_le16(LE_EXT_ADV_SCAN_IND);
+ 		else
+ 			cp.evt_properties = cpu_to_le16(LE_LEGACY_ADV_SCAN_IND);
+ 	} else {
+ 		if (secondary_adv)
+ 			cp.evt_properties = cpu_to_le16(LE_EXT_ADV_NON_CONN_IND);
+ 		else
+ 			cp.evt_properties = cpu_to_le16(LE_LEGACY_NONCONN_IND);
+ 	}
+ 
+ 	cp.own_addr_type = own_addr_type;
+ 	cp.channel_map = hdev->le_adv_channel_map;
+ 	cp.tx_power = 127;
+ 	cp.handle = instance;
+ 
+ 	if (flags & MGMT_ADV_FLAG_SEC_2M) {
+ 		cp.primary_phy = HCI_ADV_PHY_1M;
+ 		cp.secondary_phy = HCI_ADV_PHY_2M;
+ 	} else if (flags & MGMT_ADV_FLAG_SEC_CODED) {
+ 		cp.primary_phy = HCI_ADV_PHY_CODED;
+ 		cp.secondary_phy = HCI_ADV_PHY_CODED;
+ 	} else {
+ 		/* In all other cases use 1M */
+ 		cp.primary_phy = HCI_ADV_PHY_1M;
+ 		cp.secondary_phy = HCI_ADV_PHY_1M;
+ 	}
+ 
+ 	hci_req_add(req, HCI_OP_LE_SET_EXT_ADV_PARAMS, sizeof(cp), &cp);
+ 
+ 	if (own_addr_type == ADDR_LE_DEV_RANDOM &&
+ 	    bacmp(&random_addr, BDADDR_ANY)) {
+ 		struct hci_cp_le_set_adv_set_rand_addr cp;
+ 
+ 		/* Check if random address need to be updated */
+ 		if (adv_instance) {
+ 			if (!bacmp(&random_addr, &adv_instance->random_addr))
+ 				return 0;
+ 		} else {
+ 			if (!bacmp(&random_addr, &hdev->random_addr))
+ 				return 0;
+ 		}
+ 
+ 		memset(&cp, 0, sizeof(cp));
+ 
+ 		cp.handle = 0;
+ 		bacpy(&cp.bdaddr, &random_addr);
+ 
+ 		hci_req_add(req,
+ 			    HCI_OP_LE_SET_ADV_SET_RAND_ADDR,
+ 			    sizeof(cp), &cp);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int __hci_req_enable_ext_advertising(struct hci_request *req, u8 instance)
+ {
+ 	struct hci_dev *hdev = req->hdev;
+ 	struct hci_cp_le_set_ext_adv_enable *cp;
+ 	struct hci_cp_ext_adv_set *adv_set;
+ 	u8 data[sizeof(*cp) + sizeof(*adv_set) * 1];
+ 	struct adv_info *adv_instance;
+ 
+ 	if (instance > 0) {
+ 		adv_instance = hci_find_adv_instance(hdev, instance);
+ 		if (!adv_instance)
+ 			return -EINVAL;
+ 	} else {
+ 		adv_instance = NULL;
+ 	}
+ 
+ 	cp = (void *) data;
+ 	adv_set = (void *) cp->data;
+ 
+ 	memset(cp, 0, sizeof(*cp));
+ 
+ 	cp->enable = 0x01;
+ 	cp->num_of_sets = 0x01;
+ 
+ 	memset(adv_set, 0, sizeof(*adv_set));
+ 
+ 	adv_set->handle = instance;
+ 
+ 	/* Set duration per instance since controller is responsible for
+ 	 * scheduling it.
+ 	 */
+ 	if (adv_instance && adv_instance->duration) {
+ 		u16 duration = adv_instance->timeout * MSEC_PER_SEC;
+ 
+ 		/* Time = N * 10 ms */
+ 		adv_set->duration = cpu_to_le16(duration / 10);
+ 	}
+ 
+ 	hci_req_add(req, HCI_OP_LE_SET_EXT_ADV_ENABLE,
+ 		    sizeof(*cp) + sizeof(*adv_set) * cp->num_of_sets,
+ 		    data);
+ 
+ 	return 0;
+ }
+ 
+ int __hci_req_start_ext_adv(struct hci_request *req, u8 instance)
+ {
+ 	struct hci_dev *hdev = req->hdev;
+ 	int err;
+ 
+ 	if (hci_dev_test_flag(hdev, HCI_LE_ADV))
+ 		__hci_req_disable_advertising(req);
+ 
+ 	err = __hci_req_setup_ext_adv_instance(req, instance);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	__hci_req_update_scan_rsp_data(req, instance);
+ 	__hci_req_enable_ext_advertising(req, instance);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 10bbffa3e88e (Bluetooth: Fix using advertising instance duration as timeout)
  int __hci_req_schedule_adv_instance(struct hci_request *req, u8 instance,
  				    bool force)
  {
* Unmerged path net/bluetooth/hci_request.c
