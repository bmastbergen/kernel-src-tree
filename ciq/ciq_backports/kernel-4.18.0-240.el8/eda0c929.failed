bpf: Add bpf_ksym_find function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit eda0c92902b57bbde674c27882554b074e9180a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/eda0c929.failed

Adding bpf_ksym_find function that is used bpf bpf address
lookup functions:
  __bpf_address_lookup
  is_bpf_text_address

while keeping bpf_prog_kallsyms_find to be used only for lookup
of bpf_prog objects (will happen in following changes).

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200312195610.346362-8-jolsa@kernel.org
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit eda0c92902b57bbde674c27882554b074e9180a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/core.c
diff --cc kernel/bpf/core.c
index 5381636b23b4,cd380f7f015c..000000000000
--- a/kernel/bpf/core.c
+++ b/kernel/bpf/core.c
@@@ -682,15 -679,16 +690,28 @@@ static struct bpf_ksym *bpf_ksym_find(u
  const char *__bpf_address_lookup(unsigned long addr, unsigned long *size,
  				 unsigned long *off, char *sym)
  {
++<<<<<<< HEAD
 +	unsigned long symbol_start, symbol_end;
 +	struct bpf_prog *prog;
 +	char *ret = NULL;
 +
 +	rcu_read_lock();
 +	prog = bpf_prog_kallsyms_find(addr);
 +	if (prog) {
 +		bpf_get_prog_addr_region(prog, &symbol_start, &symbol_end);
 +		bpf_get_prog_name(prog, sym);
++=======
+ 	struct bpf_ksym *ksym;
+ 	char *ret = NULL;
+ 
+ 	rcu_read_lock();
+ 	ksym = bpf_ksym_find(addr);
+ 	if (ksym) {
+ 		unsigned long symbol_start = ksym->start;
+ 		unsigned long symbol_end = ksym->end;
+ 
+ 		strncpy(sym, ksym->name, KSYM_NAME_LEN);
++>>>>>>> eda0c92902b5 (bpf: Add bpf_ksym_find function)
  
  		ret = sym;
  		if (size)
* Unmerged path kernel/bpf/core.c
