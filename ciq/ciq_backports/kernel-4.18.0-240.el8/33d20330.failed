net/smc: remove DELETE LINK processing from smc_core.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Karsten Graul <kgraul@linux.ibm.com>
commit 33d203302d1cc744a13349d2576c985feb469220
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/33d20330.failed

Support for multiple links makes the former DELETE LINK processing
obsolete which sent one DELETE_LINK LLC message for each single link.
Remove this processing from smc_core.c.

	Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
	Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 33d203302d1cc744a13349d2576c985feb469220)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_core.c
diff --cc net/smc/smc_core.c
index cf74dd642f9a,60c708f6de51..000000000000
--- a/net/smc/smc_core.c
+++ b/net/smc/smc_core.c
@@@ -199,20 -202,6 +199,23 @@@ void smc_lgr_cleanup_early(struct smc_c
  	smc_lgr_schedule_free_work_fast(lgr);
  }
  
++<<<<<<< HEAD
 +/* Send delete link, either as client to request the initiation
 + * of the DELETE LINK sequence from server; or as server to
 + * initiate the delete processing. See smc_llc_rx_delete_link().
 + */
 +static int smcr_link_send_delete(struct smc_link *lnk, bool orderly)
 +{
 +	if (lnk->state == SMC_LNK_ACTIVE &&
 +	    !smc_llc_send_delete_link(lnk, SMC_LLC_REQ, orderly)) {
 +		smc_llc_link_deleting(lnk);
 +		return 0;
 +	}
 +	return -ENOTCONN;
 +}
 +
++=======
++>>>>>>> 33d203302d1c (net/smc: remove DELETE LINK processing from smc_core.c)
  static void smc_lgr_free(struct smc_link_group *lgr);
  
  static void smc_lgr_free_work(struct work_struct *work)
* Unmerged path net/smc/smc_core.c
