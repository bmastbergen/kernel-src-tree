io_uring: add opcode to issue trace event

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jens Axboe <axboe@kernel.dk>
commit 354420f705ccd0aa2d41249f3bb55b4afbed1873
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/354420f7.failed

For some test apps at least, user_data is just zeroes. So it's not a
good way to tell what the command actually is. Add the opcode to the
issue trace point.

	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 354420f705ccd0aa2d41249f3bb55b4afbed1873)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
#	include/trace/events/io_uring.h
diff --cc fs/io_uring.c
index 28a601d08266,50233efd9445..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -2439,44 -4774,52 +2439,56 @@@ static int io_submit_sqes(struct io_rin
  	}
  
  	for (i = 0; i < nr; i++) {
 -		const struct io_uring_sqe *sqe;
 -		struct io_kiocb *req;
 -
 -		req = io_get_req(ctx, statep);
 -		if (unlikely(!req)) {
 -			if (!submitted)
 -				submitted = -EAGAIN;
 -			break;
 -		}
 -		if (!io_get_sqring(ctx, req, &sqe)) {
 -			__io_req_do_free(req);
 -			break;
 -		}
 -
 -		/* will complete beyond this point, count as submitted */
 -		submitted++;
 -
 -		if (unlikely(req->opcode >= IORING_OP_LAST)) {
 -			io_cqring_add_event(req, -EINVAL);
 -			io_double_put_req(req);
 -			break;
 -		}
 -
 -		if (io_op_defs[req->opcode].needs_mm && !*mm) {
 -			mm_fault = mm_fault || !mmget_not_zero(ctx->sqo_mm);
 -			if (!mm_fault) {
 -				use_mm(ctx->sqo_mm);
 -				*mm = ctx->sqo_mm;
 +		/*
 +		 * If previous wasn't linked and we have a linked command,
 +		 * that's the end of the chain. Submit the previous link.
 +		 */
 +		if (!prev_was_link && link) {
 +			io_queue_link_head(ctx, link, &link->submit, shadow_req,
 +						true);
 +			link = NULL;
 +			shadow_req = NULL;
 +		}
 +		prev_was_link = (sqes[i].sqe->flags & IOSQE_IO_LINK) != 0;
 +
 +		if (link && (sqes[i].sqe->flags & IOSQE_IO_DRAIN)) {
 +			if (!shadow_req) {
 +				shadow_req = io_get_req(ctx, NULL);
 +				if (unlikely(!shadow_req))
 +					goto out;
 +				shadow_req->flags |= (REQ_F_IO_DRAIN | REQ_F_SHADOW_DRAIN);
 +				refcount_dec(&shadow_req->refs);
  			}
 +			shadow_req->sequence = sqes[i].sequence;
  		}
  
++<<<<<<< HEAD
 +out:
 +		if (unlikely(mm_fault)) {
 +			io_cqring_add_event(ctx, sqes[i].sqe->user_data,
 +						-EFAULT);
 +		} else {
 +			sqes[i].has_user = has_user;
 +			sqes[i].needs_lock = true;
 +			sqes[i].needs_fixed_file = true;
 +			io_submit_sqe(ctx, &sqes[i], statep, &link, true);
 +			submitted++;
 +		}
++=======
+ 		req->ring_file = ring_file;
+ 		req->ring_fd = ring_fd;
+ 		req->has_user = *mm != NULL;
+ 		req->in_async = async;
+ 		req->needs_fixed_file = async;
+ 		trace_io_uring_submit_sqe(ctx, req->opcode, req->user_data,
+ 						true, async);
+ 		if (!io_submit_sqe(req, sqe, statep, &link))
+ 			break;
++>>>>>>> 354420f705cc (io_uring: add opcode to issue trace event)
  	}
  
 -	if (submitted != nr)
 -		percpu_ref_put_many(&ctx->refs, nr - submitted);
  	if (link)
 -		io_queue_link_head(link);
 +		io_queue_link_head(ctx, link, &link->submit, shadow_req, true);
  	if (statep)
  		io_submit_state_end(&state);
  
* Unmerged path include/trace/events/io_uring.h
* Unmerged path fs/io_uring.c
* Unmerged path include/trace/events/io_uring.h
