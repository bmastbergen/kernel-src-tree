libbpf: Expose BTF-to-C type declaration emitting API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 9f81654eebe8de7e0db15534816d8f6c84b2e1e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9f81654e.failed

Expose API that allows to emit type declaration and field/variable definition
(if optional field name is specified) in valid C syntax for any provided BTF
type. This is going to be used by bpftool when emitting data section layout as
a struct. As part of making this API useful in a stand-alone fashion, move
initialization of some of the internal btf_dump state to earlier phase.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20191214014341.3442258-8-andriin@fb.com
(cherry picked from commit 9f81654eebe8de7e0db15534816d8f6c84b2e1e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf_dump.c
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/btf_dump.c
index 613a4208127f,e95f7710f210..000000000000
--- a/tools/lib/bpf/btf_dump.c
+++ b/tools/lib/bpf/btf_dump.c
@@@ -199,22 -224,6 +222,25 @@@ int btf_dump__dump_type(struct btf_dum
  	if (id > btf__get_nr_types(d->btf))
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	/* type states are lazily allocated, as they might not be needed */
 +	if (!d->type_states) {
 +		d->type_states = calloc(1 + btf__get_nr_types(d->btf),
 +					sizeof(d->type_states[0]));
 +		if (!d->type_states)
 +			return -ENOMEM;
 +		d->cached_names = calloc(1 + btf__get_nr_types(d->btf),
 +					 sizeof(d->cached_names[0]));
 +		if (!d->cached_names)
 +			return -ENOMEM;
 +
 +		/* VOID is special */
 +		d->type_states[0].order_state = ORDERED;
 +		d->type_states[0].emit_state = EMITTED;
 +	}
 +
++=======
++>>>>>>> 9f81654eebe8 (libbpf: Expose BTF-to-C type declaration emitting API)
  	d->emit_queue_cnt = 0;
  	err = btf_dump_order_type(d, id, false);
  	if (err < 0)
diff --cc tools/lib/bpf/libbpf.map
index 3ca7228af37e,990c7c0e2d9f..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -188,9 -197,21 +188,22 @@@ LIBBPF_0.0.4 
  		bpf_map__get_pin_path;
  		bpf_map__is_pinned;
  		bpf_map__set_pin_path;
 -		bpf_object__open_file;
 -		bpf_object__open_mem;
 -		bpf_program__attach_trace;
  		bpf_program__get_expected_attach_type;
  		bpf_program__get_type;
 -		bpf_program__is_tracing;
 -		bpf_program__set_tracing;
 +		bpf_get_link_xdp_info;
  		bpf_program__size;
++<<<<<<< HEAD
 +		bpf_btf_get_next_id;
 +} LIBBPF_0.0.3;
++=======
+ 		btf__find_by_name_kind;
+ 		libbpf_find_vmlinux_btf_id;
+ } LIBBPF_0.0.5;
+ 
+ LIBBPF_0.0.7 {
+ 	global:
+ 		btf_dump__emit_type_decl;
+ 		bpf_program__attach;
+ 		btf__align_of;
+ } LIBBPF_0.0.6;
++>>>>>>> 9f81654eebe8 (libbpf: Expose BTF-to-C type declaration emitting API)
diff --git a/tools/lib/bpf/btf.h b/tools/lib/bpf/btf.h
index c73d83a17dcd..c4c7cf2765a3 100644
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@ -123,6 +123,28 @@ LIBBPF_API void btf_dump__free(struct btf_dump *d);
 
 LIBBPF_API int btf_dump__dump_type(struct btf_dump *d, __u32 id);
 
+struct btf_dump_emit_type_decl_opts {
+	/* size of this struct, for forward/backward compatiblity */
+	size_t sz;
+	/* optional field name for type declaration, e.g.:
+	 * - struct my_struct <FNAME>
+	 * - void (*<FNAME>)(int)
+	 * - char (*<FNAME>)[123]
+	 */
+	const char *field_name;
+	/* extra indentation level (in number of tabs) to emit for multi-line
+	 * type declarations (e.g., anonymous struct); applies for lines
+	 * starting from the second one (first line is assumed to have
+	 * necessary indentation already
+	 */
+	int indent_level;
+};
+#define btf_dump_emit_type_decl_opts__last_field indent_level
+
+LIBBPF_API int
+btf_dump__emit_type_decl(struct btf_dump *d, __u32 id,
+			 const struct btf_dump_emit_type_decl_opts *opts);
+
 /*
  * A set of helpers for easier BTF types handling
  */
* Unmerged path tools/lib/bpf/btf_dump.c
* Unmerged path tools/lib/bpf/libbpf.map
