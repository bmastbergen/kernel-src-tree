bpf, x86, arm64: Enable jit by default when not built as always-on

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 81c22041d9f19df07b9cba95e3cd02e0f41bc1e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/81c22041.failed

After Spectre 2 fix via 290af86629b2 ("bpf: introduce BPF_JIT_ALWAYS_ON
config") most major distros use BPF_JIT_ALWAYS_ON configuration these days
which compiles out the BPF interpreter entirely and always enables the
JIT. Also given recent fix in e1608f3fa857 ("bpf: Avoid setting bpf insns
pages read-only when prog is jited"), we additionally avoid fragmenting
the direct map for the BPF insns pages sitting in the general data heap
since they are not used during execution. Latter is only needed when run
through the interpreter.

Since both x86 and arm64 JITs have seen a lot of exposure over the years,
are generally most up to date and maintained, there is more downside in
!BPF_JIT_ALWAYS_ON configurations to have the interpreter enabled by default
rather than the JIT. Add a ARCH_WANT_DEFAULT_BPF_JIT config which archs can
use to set the bpf_jit_{enable,kallsyms} to 1. Back in the days the
bpf_jit_kallsyms knob was set to 0 by default since major distros still
had /proc/kallsyms addresses exposed to unprivileged user space which is
not the case anymore. Hence both knobs are set via BPF_JIT_DEFAULT_ON which
is set to 'y' in case of BPF_JIT_ALWAYS_ON or ARCH_WANT_DEFAULT_BPF_JIT.

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Will Deacon <will@kernel.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/f78ad24795c2966efcc2ee19025fa3459f622185.1575903816.git.daniel@iogearbox.net
(cherry picked from commit 81c22041d9f19df07b9cba95e3cd02e0f41bc1e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/Kconfig
#	kernel/bpf/core.c
diff --cc arch/arm64/Kconfig
index d9a7ce52dbae,29d03459de20..000000000000
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -65,10 -66,13 +65,16 @@@ config ARM6
  	select ARCH_USE_QUEUED_SPINLOCKS
  	select ARCH_SUPPORTS_MEMORY_FAILURE
  	select ARCH_SUPPORTS_ATOMIC_RMW
 -	select ARCH_SUPPORTS_INT128 if CC_HAS_INT128 && (GCC_VERSION >= 50000 || CC_IS_CLANG)
 +	select ARCH_SUPPORTS_INT128 if GCC_VERSION >= 50000 || CC_IS_CLANG
  	select ARCH_SUPPORTS_NUMA_BALANCING
++<<<<<<< HEAD
 +	select ARCH_WANT_COMPAT_IPC_PARSE_VERSION
++=======
+ 	select ARCH_WANT_COMPAT_IPC_PARSE_VERSION if COMPAT
+ 	select ARCH_WANT_DEFAULT_BPF_JIT
+ 	select ARCH_WANT_DEFAULT_TOPDOWN_MMAP_LAYOUT
++>>>>>>> 81c22041d9f1 (bpf, x86, arm64: Enable jit by default when not built as always-on)
  	select ARCH_WANT_FRAME_POINTERS
 -	select ARCH_WANT_HUGE_PMD_SHARE if ARM64_4K_PAGES || (ARM64_16K_PAGES && !ARM64_VA_BITS_36)
  	select ARCH_HAS_UBSAN_SANITIZE_ALL
  	select ARM_AMBA
  	select ARM_ARCH_TIMER
diff --cc kernel/bpf/core.c
index e8ab7b5844e9,2ff01a716128..000000000000
--- a/kernel/bpf/core.c
+++ b/kernel/bpf/core.c
@@@ -523,11 -520,9 +523,17 @@@ void bpf_prog_kallsyms_del_all(struct b
  
  #ifdef CONFIG_BPF_JIT
  /* All BPF JIT sysctl knobs here. */
++<<<<<<< HEAD
 +int bpf_jit_enable   __read_mostly = IS_BUILTIN(CONFIG_BPF_JIT_ALWAYS_ON);
 +/* RHEL-only: set it to 1 by default */
 +int bpf_jit_harden   __read_mostly = 1;
 +/* RHEL-only: set it to 1 by default */
 +int bpf_jit_kallsyms __read_mostly = 1;
++=======
+ int bpf_jit_enable   __read_mostly = IS_BUILTIN(CONFIG_BPF_JIT_DEFAULT_ON);
+ int bpf_jit_kallsyms __read_mostly = IS_BUILTIN(CONFIG_BPF_JIT_DEFAULT_ON);
+ int bpf_jit_harden   __read_mostly;
++>>>>>>> 81c22041d9f1 (bpf, x86, arm64: Enable jit by default when not built as always-on)
  long bpf_jit_limit   __read_mostly;
  
  static __always_inline void
* Unmerged path arch/arm64/Kconfig
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index e4d5b7411273..8356c9147b51 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -85,6 +85,7 @@ config X86
 	select ARCH_USE_QUEUED_RWLOCKS
 	select ARCH_USE_QUEUED_SPINLOCKS
 	select ARCH_WANT_BATCHED_UNMAP_TLB_FLUSH
+	select ARCH_WANT_DEFAULT_BPF_JIT	if X86_64
 	select ARCH_WANTS_DYNAMIC_TASK_STRUCT
 	select ARCH_WANTS_THP_SWAP		if X86_64
 	select BUILDTIME_EXTABLE_SORT
diff --git a/init/Kconfig b/init/Kconfig
index 3b1ea0bbdb4e..7cf185e894f8 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1479,6 +1479,9 @@ config BPF_SYSCALL
 	  Enable the bpf() system call that allows to manipulate eBPF
 	  programs and maps via file descriptors.
 
+config ARCH_WANT_DEFAULT_BPF_JIT
+	bool
+
 config BPF_JIT_ALWAYS_ON
 	bool "Permanently enable BPF JIT and remove BPF interpreter"
 	depends on BPF_SYSCALL && HAVE_EBPF_JIT && BPF_JIT
@@ -1486,6 +1489,10 @@ config BPF_JIT_ALWAYS_ON
 	  Enables BPF JIT and removes BPF interpreter to avoid
 	  speculative execution of BPF instructions by the interpreter
 
+config BPF_JIT_DEFAULT_ON
+	def_bool ARCH_WANT_DEFAULT_BPF_JIT || BPF_JIT_ALWAYS_ON
+	depends on HAVE_EBPF_JIT && BPF_JIT
+
 config USERFAULTFD
 	bool "Enable userfaultfd() system call"
 	select ANON_INODES
* Unmerged path kernel/bpf/core.c
