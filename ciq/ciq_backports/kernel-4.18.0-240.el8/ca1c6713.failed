xprtrdma: Fix DMA scatter-gather list mapping imbalance

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit ca1c671302825182629d3c1a60363cee6f5455bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ca1c6713.failed

The @nents value that was passed to ib_dma_map_sg() has to be passed
to the matching ib_dma_unmap_sg() call. If ib_dma_map_sg() choses to
concatenate sg entries, it will return a different nents value than
it was passed.

The bug was exposed by recent changes to the AMD IOMMU driver, which
enabled sg entry concatenation.

Looking all the way back to commit 4143f34e01e9 ("xprtrdma: Port to
new memory registration API") and reviewing other kernel ULPs, it's
not clear that the frwr_map() logic was ever correct for this case.

	Reported-by: Andre Tomt <andre@tomt.net>
	Suggested-by: Robin Murphy <robin.murphy@arm.com>
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Cc: stable@vger.kernel.org
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit ca1c671302825182629d3c1a60363cee6f5455bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtrdma/frwr_ops.c
diff --cc net/sunrpc/xprtrdma/frwr_ops.c
index 6583f1081c90,125297c9aa3e..000000000000
--- a/net/sunrpc/xprtrdma/frwr_ops.c
+++ b/net/sunrpc/xprtrdma/frwr_ops.c
@@@ -334,20 -284,14 +334,26 @@@ size_t frwr_maxpages(struct rpcrdma_xpr
  struct rpcrdma_mr_seg *frwr_map(struct rpcrdma_xprt *r_xprt,
  				struct rpcrdma_mr_seg *seg,
  				int nsegs, bool writing, __be32 xid,
 -				struct rpcrdma_mr *mr)
 +				struct rpcrdma_mr **out)
  {
  	struct rpcrdma_ia *ia = &r_xprt->rx_ia;
++<<<<<<< HEAD
 +	bool holes_ok = ia->ri_mrtype == IB_MR_TYPE_SG_GAPS;
 +	struct rpcrdma_mr *mr;
 +	struct ib_mr *ibmr;
 +	struct ib_reg_wr *reg_wr;
 +	int i, n;
++=======
+ 	struct ib_reg_wr *reg_wr;
+ 	int i, n, dma_nents;
+ 	struct ib_mr *ibmr;
++>>>>>>> ca1c67130282 (xprtrdma: Fix DMA scatter-gather list mapping imbalance)
  	u8 key;
  
 +	mr = rpcrdma_mr_get(r_xprt);
 +	if (!mr)
 +		goto out_getmr_err;
 +
  	if (nsegs > ia->ri_max_frwr_depth)
  		nsegs = ia->ri_max_frwr_depth;
  	for (i = 0; i < nsegs;) {
* Unmerged path net/sunrpc/xprtrdma/frwr_ops.c
