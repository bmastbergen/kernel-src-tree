net: avoid updating qdisc_xmit_lock_key in netdev_update_lockdep_key()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] avoid updating qdisc_xmit_lock_key in netdev_update_lockdep_key() (Ivan Vecera) [1818074]
Rebuild_FUZZ: 96.30%
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit 53d374979ef147ab51f5d632dfe20b14aebeccd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/53d37497.failed

syzbot reported some bogus lockdep warnings, for example bad unlock
balance in sch_direct_xmit(). They are due to a race condition between
slow path and fast path, that is qdisc_xmit_lock_key gets re-registered
in netdev_update_lockdep_key() on slow path, while we could still
acquire the queue->_xmit_lock on fast path in this small window:

CPU A						CPU B
						__netif_tx_lock();
lockdep_unregister_key(qdisc_xmit_lock_key);
						__netif_tx_unlock();
lockdep_register_key(qdisc_xmit_lock_key);

In fact, unlike the addr_list_lock which has to be reordered when
the master/slave device relationship changes, queue->_xmit_lock is
only acquired on fast path and only when NETIF_F_LLTX is not set,
so there is likely no nested locking for it.

Therefore, we can just get rid of re-registration of
qdisc_xmit_lock_key.

	Reported-by: syzbot+4ec99438ed7450da6272@syzkaller.appspotmail.com
Fixes: ab92d68fc22f ("net: core: add generic lockdep keys")
	Cc: Taehee Yoo <ap420073@gmail.com>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Acked-by: Taehee Yoo <ap420073@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 53d374979ef147ab51f5d632dfe20b14aebeccd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index b1d9a896d680,7e885d069707..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -8691,6 -9159,31 +8691,34 @@@ void netif_tx_stop_all_queues(struct ne
  }
  EXPORT_SYMBOL(netif_tx_stop_all_queues);
  
++<<<<<<< HEAD
++=======
+ static void netdev_register_lockdep_key(struct net_device *dev)
+ {
+ 	lockdep_register_key(&dev->qdisc_tx_busylock_key);
+ 	lockdep_register_key(&dev->qdisc_running_key);
+ 	lockdep_register_key(&dev->qdisc_xmit_lock_key);
+ 	lockdep_register_key(&dev->addr_list_lock_key);
+ }
+ 
+ static void netdev_unregister_lockdep_key(struct net_device *dev)
+ {
+ 	lockdep_unregister_key(&dev->qdisc_tx_busylock_key);
+ 	lockdep_unregister_key(&dev->qdisc_running_key);
+ 	lockdep_unregister_key(&dev->qdisc_xmit_lock_key);
+ 	lockdep_unregister_key(&dev->addr_list_lock_key);
+ }
+ 
+ void netdev_update_lockdep_key(struct net_device *dev)
+ {
+ 	lockdep_unregister_key(&dev->addr_list_lock_key);
+ 	lockdep_register_key(&dev->addr_list_lock_key);
+ 
+ 	lockdep_set_class(&dev->addr_list_lock, &dev->addr_list_lock_key);
+ }
+ EXPORT_SYMBOL(netdev_update_lockdep_key);
+ 
++>>>>>>> 53d374979ef1 (net: avoid updating qdisc_xmit_lock_key in netdev_update_lockdep_key())
  /**
   *	register_netdevice	- register a network device
   *	@dev: device to register
* Unmerged path net/core/dev.c
