libnvdimm/namespace: Enforce memremap_compat_align()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Dan Williams <dan.j.williams@intel.com>
commit 6acd7d5ef264d8e9a8988cebf6eeb3567eaf60c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6acd7d5e.failed

The pmem driver on PowerPC crashes with the following signature when
instantiating misaligned namespaces that map their capacity via
memremap_pages().

    BUG: Unable to handle kernel data access at 0xc001000406000000
    Faulting instruction address: 0xc000000000090790
    NIP [c000000000090790] arch_add_memory+0xc0/0x130
    LR [c000000000090744] arch_add_memory+0x74/0x130
    Call Trace:
     arch_add_memory+0x74/0x130 (unreliable)
     memremap_pages+0x74c/0xa30
     devm_memremap_pages+0x3c/0xa0
     pmem_attach_disk+0x188/0x770
     nvdimm_bus_probe+0xd8/0x470

With the assumption that only memremap_pages() has alignment
constraints, enforce memremap_compat_align() for
pmem_should_map_pages(), nd_pfn, and nd_dax cases. This includes
preventing the creation of namespaces where the base address is
misaligned and cases there infoblock padding parameters are invalid.

	Reported-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
	Cc: Jeff Moyer <jmoyer@redhat.com>
Fixes: a3619190d62e ("libnvdimm/pfn: stop padding pmem namespaces to section alignment")
	Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 6acd7d5ef264d8e9a8988cebf6eeb3567eaf60c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/pfn_devs.c
diff --cc drivers/nvdimm/pfn_devs.c
index 99a92b7421e8,34db557dbad1..000000000000
--- a/drivers/nvdimm/pfn_devs.c
+++ b/drivers/nvdimm/pfn_devs.c
@@@ -566,7 -594,19 +568,23 @@@ int nd_pfn_validate(struct nd_pfn *nd_p
  		return -EOPNOTSUPP;
  	}
  
++<<<<<<< HEAD
 +	return nd_pfn_clear_memmap_errors(nd_pfn);
++=======
+ 	if (!IS_ALIGNED(res->start + le32_to_cpu(pfn_sb->start_pad),
+ 				memremap_compat_align())) {
+ 		dev_err(&nd_pfn->dev, "resource start misaligned\n");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (!IS_ALIGNED(res->end + 1 - le32_to_cpu(pfn_sb->end_trunc),
+ 				memremap_compat_align())) {
+ 		dev_err(&nd_pfn->dev, "resource end misaligned\n");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	return 0;
++>>>>>>> 6acd7d5ef264 (libnvdimm/namespace: Enforce memremap_compat_align())
  }
  EXPORT_SYMBOL(nd_pfn_validate);
  
@@@ -727,7 -764,19 +745,23 @@@ static int nd_pfn_init(struct nd_pfn *n
  	start = nsio->res.start;
  	size = resource_size(&nsio->res);
  	npfns = PHYS_PFN(size - SZ_8K);
++<<<<<<< HEAD
 +	align = max(nd_pfn->align, (1UL << SUBSECTION_SHIFT));
++=======
+ 	align = max(nd_pfn->align, memremap_compat_align());
+ 
+ 	/*
+ 	 * When @start is misaligned fail namespace creation. See
+ 	 * the 'struct nd_pfn_sb' commentary on why ->start_pad is not
+ 	 * an option.
+ 	 */
+ 	if (!IS_ALIGNED(start, memremap_compat_align())) {
+ 		dev_err(&nd_pfn->dev, "%s: start %pa misaligned to %#lx\n",
+ 				dev_name(&ndns->dev), &start,
+ 				memremap_compat_align());
+ 		return -EINVAL;
+ 	}
++>>>>>>> 6acd7d5ef264 (libnvdimm/namespace: Enforce memremap_compat_align())
  	end_trunc = start + size - ALIGN_DOWN(start + size, align);
  	if (nd_pfn->mode == PFN_MODE_PMEM) {
  		/*
diff --git a/drivers/nvdimm/namespace_devs.c b/drivers/nvdimm/namespace_devs.c
index a44019daf202..7154d48054ad 100644
--- a/drivers/nvdimm/namespace_devs.c
+++ b/drivers/nvdimm/namespace_devs.c
@@ -18,6 +18,7 @@
 #include <linux/nd.h>
 #include "nd-core.h"
 #include "pmem.h"
+#include "pfn.h"
 #include "nd.h"
 
 static void namespace_io_release(struct device *dev)
@@ -1743,6 +1744,22 @@ struct nd_namespace_common *nvdimm_namespace_common_probe(struct device *dev)
 		return ERR_PTR(-ENODEV);
 	}
 
+	/*
+	 * Note, alignment validation for fsdax and devdax mode
+	 * namespaces happens in nd_pfn_validate() where infoblock
+	 * padding parameters can be applied.
+	 */
+	if (pmem_should_map_pages(dev)) {
+		struct nd_namespace_io *nsio = to_nd_namespace_io(&ndns->dev);
+		struct resource *res = &nsio->res;
+
+		if (!IS_ALIGNED(res->start | (res->end + 1),
+					memremap_compat_align())) {
+			dev_err(&ndns->dev, "%pr misaligned, unable to map\n", res);
+			return ERR_PTR(-EOPNOTSUPP);
+		}
+	}
+
 	if (is_namespace_pmem(&ndns->dev)) {
 		struct nd_namespace_pmem *nspm;
 
diff --git a/drivers/nvdimm/pfn.h b/drivers/nvdimm/pfn.h
index 5f94a7a5f5fd..76aaf0607081 100644
--- a/drivers/nvdimm/pfn.h
+++ b/drivers/nvdimm/pfn.h
@@ -32,6 +32,18 @@ struct nd_pfn_sb {
 	__le64 npfns;
 	__le32 mode;
 	/* minor-version-1 additions for section alignment */
+	/**
+	 * @start_pad: Deprecated attribute to pad start-misaligned namespaces
+	 *
+	 * start_pad is deprecated because the original definition did
+	 * not comprehend that dataoff is relative to the base address
+	 * of the namespace not the start_pad adjusted base. The result
+	 * is that the dax path is broken, but the block-I/O path is
+	 * not. The kernel will no longer create namespaces using start
+	 * padding, but it still supports block-I/O for legacy
+	 * configurations mainly to allow a backup, reconfigure the
+	 * namespace, and restore flow to repair dax operation.
+	 */
 	__le32 start_pad;
 	__le32 end_trunc;
 	/* minor-version-2 record the base alignment of the mapping */
* Unmerged path drivers/nvdimm/pfn_devs.c
