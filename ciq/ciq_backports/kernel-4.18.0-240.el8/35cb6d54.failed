fs: make build_open_flags() available internally

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jens Axboe <axboe@kernel.dk>
commit 35cb6d54c1d5daf1d1ed585ef5ce4557e7ab284c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/35cb6d54.failed

This is a prep patch for supporting non-blocking open from io_uring.

	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 35cb6d54c1d5daf1d1ed585ef5ce4557e7ab284c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/open.c
diff --cc fs/open.c
index 72bcae72bce9,0788b3715731..000000000000
--- a/fs/open.c
+++ b/fs/open.c
@@@ -927,8 -955,28 +927,33 @@@ struct file *open_with_fake_path(const 
  }
  EXPORT_SYMBOL(open_with_fake_path);
  
++<<<<<<< HEAD
 +static inline int build_open_flags(int flags, umode_t mode, struct open_flags *op)
 +{
++=======
+ #define WILL_CREATE(flags)	(flags & (O_CREAT | __O_TMPFILE))
+ #define O_PATH_FLAGS		(O_DIRECTORY | O_NOFOLLOW | O_PATH | O_CLOEXEC)
+ 
+ inline struct open_how build_open_how(int flags, umode_t mode)
+ {
+ 	struct open_how how = {
+ 		.flags = flags & VALID_OPEN_FLAGS,
+ 		.mode = mode & S_IALLUGO,
+ 	};
+ 
+ 	/* O_PATH beats everything else. */
+ 	if (how.flags & O_PATH)
+ 		how.flags &= O_PATH_FLAGS;
+ 	/* Modes should only be set for create-like flags. */
+ 	if (!WILL_CREATE(how.flags))
+ 		how.mode = 0;
+ 	return how;
+ }
+ 
+ inline int build_open_flags(const struct open_how *how, struct open_flags *op)
+ {
+ 	int flags = how->flags;
++>>>>>>> 35cb6d54c1d5 (fs: make build_open_flags() available internally)
  	int lookup_flags = 0;
  	int acc_mode = ACC_MODE(flags);
  
diff --git a/fs/internal.h b/fs/internal.h
index e54ad4361d0d..ee2405a1b734 100644
--- a/fs/internal.h
+++ b/fs/internal.h
@@ -117,6 +117,8 @@ extern struct file *do_filp_open(int dfd, struct filename *pathname,
 		const struct open_flags *op);
 extern struct file *do_file_open_root(struct dentry *, struct vfsmount *,
 		const char *, const struct open_flags *);
+extern struct open_how build_open_how(int flags, umode_t mode);
+extern int build_open_flags(const struct open_how *how, struct open_flags *op);
 
 long do_sys_ftruncate(unsigned int fd, loff_t length, int small);
 long do_faccessat(int dfd, const char __user *filename, int mode);
* Unmerged path fs/open.c
