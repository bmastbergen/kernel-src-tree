libperf: Add perf_thread_map__nr/perf_thread_map__pid functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit a2f354e3abb853f9a40048829e1f839e8f7fada5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a2f354e3.failed

So it's part of libperf library as basic functions operating on
perf_thread_map objects.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190822111141.25823-6-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a2f354e3abb853f9a40048829e1f839e8f7fada5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-ftrace.c
#	tools/perf/builtin-script.c
#	tools/perf/builtin-stat.c
#	tools/perf/builtin-trace.c
#	tools/perf/lib/include/perf/threadmap.h
#	tools/perf/lib/libperf.map
#	tools/perf/lib/threadmap.c
#	tools/perf/util/auxtrace.c
#	tools/perf/util/evlist.c
#	tools/perf/util/stat-display.c
#	tools/perf/util/stat.c
#	tools/perf/util/thread_map.h
diff --cc tools/perf/builtin-ftrace.c
index 2898f937b494,565db782c1b9..000000000000
--- a/tools/perf/builtin-ftrace.c
+++ b/tools/perf/builtin-ftrace.c
@@@ -159,9 -158,9 +159,13 @@@ static int set_tracing_pid(struct perf_
  	if (target__has_cpu(&ftrace->target))
  		return 0;
  
++<<<<<<< HEAD
 +	for (i = 0; i < thread_map__nr(ftrace->evlist->threads); i++) {
++=======
+ 	for (i = 0; i < perf_thread_map__nr(ftrace->evlist->core.threads); i++) {
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  		scnprintf(buf, sizeof(buf), "%d",
 -			  ftrace->evlist->core.threads->map[i]);
 +			  ftrace->evlist->threads->map[i]);
  		if (append_tracing_file("set_ftrace_pid", buf) < 0)
  			return -1;
  	}
diff --cc tools/perf/builtin-script.c
index 7f9fd1c95e4e,9b93ddeaeafa..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -1900,9 -1904,9 +1900,13 @@@ static void process_event(struct perf_s
  
  static struct scripting_ops	*scripting_ops;
  
 -static void __process_stat(struct evsel *counter, u64 tstamp)
 +static void __process_stat(struct perf_evsel *counter, u64 tstamp)
  {
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(counter->threads);
++=======
+ 	int nthreads = perf_thread_map__nr(counter->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	int ncpus = perf_evsel__nr_cpus(counter);
  	int cpu, thread;
  	static int header_printed;
@@@ -1923,8 -1927,8 +1927,13 @@@
  			counts = perf_counts(counter->counts, cpu, thread);
  
  			printf("%3d %8d %15" PRIu64 " %15" PRIu64 " %15" PRIu64 " %15" PRIu64 " %s\n",
++<<<<<<< HEAD
 +				counter->cpus->map[cpu],
 +				thread_map__pid(counter->threads, thread),
++=======
+ 				counter->core.cpus->map[cpu],
+ 				perf_thread_map__pid(counter->core.threads, thread),
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  				counts->val,
  				counts->ena,
  				counts->run,
diff --cc tools/perf/builtin-stat.c
index b71c4390d333,8a4f1a7d0cba..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -263,9 -262,9 +263,13 @@@ static int read_single_counter(struct p
   * Read out the results of a single counter:
   * do not aggregate counts across CPUs in system-wide mode
   */
 -static int read_counter(struct evsel *counter, struct timespec *rs)
 +static int read_counter(struct perf_evsel *counter, struct timespec *rs)
  {
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(evsel_list->threads);
++=======
+ 	int nthreads = perf_thread_map__nr(evsel_list->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	int ncpus, cpu, thread;
  
  	if (target__has_cpu(&target) && !target__has_per_thread(&target))
@@@ -1891,10 -1890,10 +1895,14 @@@ int cmd_stat(int argc, const char **arg
  	 * so we could print it out on output.
  	 */
  	if (stat_config.aggr_mode == AGGR_THREAD) {
 -		thread_map__read_comms(evsel_list->core.threads);
 +		thread_map__read_comms(evsel_list->threads);
  		if (target.system_wide) {
  			if (runtime_stat_new(&stat_config,
++<<<<<<< HEAD
 +				thread_map__nr(evsel_list->threads))) {
++=======
+ 				perf_thread_map__nr(evsel_list->core.threads))) {
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  				goto out;
  			}
  		}
diff --cc tools/perf/builtin-trace.c
index a72c9eeb4317,de126258ca10..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -3188,7 -3188,7 +3188,11 @@@ static int trace__set_filter_pids(struc
  			err = bpf_map__set_filter_pids(trace->filter_pids.map, trace->filter_pids.nr,
  						       trace->filter_pids.entries);
  		}
++<<<<<<< HEAD
 +	} else if (thread_map__pid(trace->evlist->threads, 0) == -1) {
++=======
+ 	} else if (perf_thread_map__pid(trace->evlist->core.threads, 0) == -1) {
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  		err = trace__set_filter_loop_pids(trace);
  	}
  
@@@ -3414,16 -3414,16 +3418,22 @@@ static int trace__run(struct trace *tra
  
  	if (trace->opts.initial_delay) {
  		usleep(trace->opts.initial_delay * 1000);
 -		evlist__enable(evlist);
 +		perf_evlist__enable(evlist);
  	}
  
++<<<<<<< HEAD
 +	trace->multiple_threads = thread_map__pid(evlist->threads, 0) == -1 ||
 +				  evlist->threads->nr > 1 ||
 +				  perf_evlist__first(evlist)->attr.inherit;
++=======
+ 	trace->multiple_threads = perf_thread_map__pid(evlist->core.threads, 0) == -1 ||
+ 				  evlist->core.threads->nr > 1 ||
+ 				  perf_evlist__first(evlist)->core.attr.inherit;
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  
  	/*
 -	 * Now that we already used evsel->core.attr to ask the kernel to setup the
 -	 * events, lets reuse evsel->core.attr.sample_max_stack as the limit in
 +	 * Now that we already used evsel->attr to ask the kernel to setup the
 +	 * events, lets reuse evsel->attr.sample_max_stack as the limit in
  	 * trace__resolve_callchain(), allowing per-event max-stack settings
  	 * to override an explicitly set --max-stack global setting.
  	 */
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,dc4d66363bc4..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,43 +1,46 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_cpu_map__nr;
+ 		perf_cpu_map__cpu;
+ 		perf_cpu_map__empty;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__nr;
+ 		perf_thread_map__pid;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__enable;
+ 		perf_evsel__disable;
+ 		perf_evsel__init;
+ 		perf_evsel__open;
+ 		perf_evsel__close;
+ 		perf_evsel__read;
+ 		perf_evsel__cpus;
+ 		perf_evsel__threads;
+ 		perf_evsel__attr;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__open;
+ 		perf_evlist__close;
+ 		perf_evlist__enable;
+ 		perf_evlist__disable;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	local:
  		*;
  };
diff --cc tools/perf/util/auxtrace.c
index 2e60b09cfd97,094e6ceb3cf2..000000000000
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@@ -139,14 -130,14 +139,24 @@@ void auxtrace_mmap_params__set_idx(stru
  	mp->idx = idx;
  
  	if (per_cpu) {
++<<<<<<< HEAD
 +		mp->cpu = evlist->cpus->map[idx];
 +		if (evlist->threads)
 +			mp->tid = thread_map__pid(evlist->threads, 0);
++=======
+ 		mp->cpu = evlist->core.cpus->map[idx];
+ 		if (evlist->core.threads)
+ 			mp->tid = perf_thread_map__pid(evlist->core.threads, 0);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  		else
  			mp->tid = -1;
  	} else {
  		mp->cpu = -1;
++<<<<<<< HEAD
 +		mp->tid = thread_map__pid(evlist->threads, idx);
++=======
+ 		mp->tid = perf_thread_map__pid(evlist->core.threads, idx);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	}
  }
  
diff --cc tools/perf/util/evlist.c
index 4251de03a5d4,ff415680fe0a..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -343,17 -316,17 +343,21 @@@ static int perf_evlist__nr_threads(stru
  	if (evsel->system_wide)
  		return 1;
  	else
++<<<<<<< HEAD
 +		return thread_map__nr(evlist->threads);
++=======
+ 		return perf_thread_map__nr(evlist->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  }
  
 -void evlist__disable(struct evlist *evlist)
 +void perf_evlist__disable(struct perf_evlist *evlist)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
 -		if (pos->disabled || !perf_evsel__is_group_leader(pos) || !pos->core.fd)
 +		if (pos->disabled || !perf_evsel__is_group_leader(pos) || !pos->fd)
  			continue;
 -		evsel__disable(pos);
 +		perf_evsel__disable(pos);
  	}
  
  	evlist->enabled = false;
@@@ -423,12 -396,12 +427,17 @@@ int perf_evlist__enable_event_idx(struc
  		return perf_evlist__enable_event_thread(evlist, evsel, idx);
  }
  
 -int perf_evlist__alloc_pollfd(struct evlist *evlist)
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
 +	int nr_threads = thread_map__nr(evlist->threads);
++=======
+ 	int nr_cpus = perf_cpu_map__nr(evlist->core.cpus);
+ 	int nr_threads = perf_thread_map__nr(evlist->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	int nfds = 0;
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->system_wide)
@@@ -553,12 -526,12 +562,17 @@@ static void perf_evlist__set_sid_idx(st
  {
  	struct perf_sample_id *sid = SID(evsel, cpu, thread);
  	sid->idx = idx;
 -	if (evlist->core.cpus && cpu >= 0)
 -		sid->cpu = evlist->core.cpus->map[cpu];
 +	if (evlist->cpus && cpu >= 0)
 +		sid->cpu = evlist->cpus->map[cpu];
  	else
  		sid->cpu = -1;
++<<<<<<< HEAD
 +	if (!evsel->system_wide && evlist->threads && thread >= 0)
 +		sid->tid = thread_map__pid(evlist->threads, thread);
++=======
+ 	if (!evsel->system_wide && evlist->core.threads && thread >= 0)
+ 		sid->tid = perf_thread_map__pid(evlist->core.threads, thread);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	else
  		sid->tid = -1;
  }
@@@ -721,9 -694,9 +735,15 @@@ static struct perf_mmap *perf_evlist__a
  	int i;
  	struct perf_mmap *map;
  
++<<<<<<< HEAD
 +	evlist->nr_mmaps = cpu_map__nr(evlist->cpus);
 +	if (cpu_map__empty(evlist->cpus))
 +		evlist->nr_mmaps = thread_map__nr(evlist->threads);
++=======
+ 	evlist->nr_mmaps = perf_cpu_map__nr(evlist->core.cpus);
+ 	if (perf_cpu_map__empty(evlist->core.cpus))
+ 		evlist->nr_mmaps = perf_thread_map__nr(evlist->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	map = zalloc(evlist->nr_mmaps * sizeof(struct perf_mmap));
  	if (!map)
  		return NULL;
@@@ -836,8 -809,8 +856,13 @@@ static int perf_evlist__mmap_per_cpu(st
  				     struct mmap_params *mp)
  {
  	int cpu, thread;
++<<<<<<< HEAD
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
 +	int nr_threads = thread_map__nr(evlist->threads);
++=======
+ 	int nr_cpus = perf_cpu_map__nr(evlist->core.cpus);
+ 	int nr_threads = perf_thread_map__nr(evlist->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  
  	pr_debug2("perf event ring buffer mmapped per cpu\n");
  	for (cpu = 0; cpu < nr_cpus; cpu++) {
@@@ -865,7 -838,7 +890,11 @@@ static int perf_evlist__mmap_per_thread
  					struct mmap_params *mp)
  {
  	int thread;
++<<<<<<< HEAD
 +	int nr_threads = thread_map__nr(evlist->threads);
++=======
+ 	int nr_threads = perf_thread_map__nr(evlist->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  
  	pr_debug2("perf event ring buffer mmapped per thread\n");
  	for (thread = 0; thread < nr_threads; thread++) {
diff --cc tools/perf/util/stat-display.c
index 69a800dd6926,51d6781aa90d..000000000000
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@@ -117,9 -117,9 +117,13 @@@ static void aggr_printout(struct perf_s
  	case AGGR_THREAD:
  		fprintf(config->output, "%*s-%*d%s",
  			config->csv_output ? 0 : 16,
 -			perf_thread_map__comm(evsel->core.threads, id),
 +			thread_map__comm(evsel->threads, id),
  			config->csv_output ? 0 : -8,
++<<<<<<< HEAD
 +			thread_map__pid(evsel->threads, id),
++=======
+ 			perf_thread_map__pid(evsel->core.threads, id),
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  			config->csv_sep);
  		break;
  	case AGGR_GLOBAL:
@@@ -742,11 -742,11 +746,16 @@@ static struct perf_aggr_thread_value *s
  
  static void print_aggr_thread(struct perf_stat_config *config,
  			      struct target *_target,
 -			      struct evsel *counter, char *prefix)
 +			      struct perf_evsel *counter, char *prefix)
  {
  	FILE *output = config->output;
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(counter->threads);
 +	int ncpus = cpu_map__nr(counter->cpus);
++=======
+ 	int nthreads = perf_thread_map__nr(counter->core.threads);
+ 	int ncpus = perf_cpu_map__nr(counter->core.cpus);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	int thread, sorted_threads, id;
  	struct perf_aggr_thread_value *buf;
  
diff --cc tools/perf/util/stat.c
index 9b8d699cb791,0cbfd1eca1dd..000000000000
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@@ -156,10 -156,10 +156,14 @@@ static void perf_evsel__free_prev_raw_c
  	evsel->prev_raw_counts = NULL;
  }
  
 -static int perf_evsel__alloc_stats(struct evsel *evsel, bool alloc_raw)
 +static int perf_evsel__alloc_stats(struct perf_evsel *evsel, bool alloc_raw)
  {
  	int ncpus = perf_evsel__nr_cpus(evsel);
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(evsel->threads);
++=======
+ 	int nthreads = perf_thread_map__nr(evsel->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  
  	if (perf_evsel__alloc_stat_priv(evsel) < 0 ||
  	    perf_evsel__alloc_counts(evsel, ncpus, nthreads) < 0 ||
@@@ -307,9 -307,9 +311,13 @@@ process_counter_values(struct perf_stat
  }
  
  static int process_counter_maps(struct perf_stat_config *config,
 -				struct evsel *counter)
 +				struct perf_evsel *counter)
  {
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(counter->threads);
++=======
+ 	int nthreads = perf_thread_map__nr(counter->core.threads);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  	int ncpus = perf_evsel__nr_cpus(counter);
  	int cpu, thread;
  
diff --cc tools/perf/util/thread_map.h
index 2f689c90a8c6,ca165fdf6cb0..000000000000
--- a/tools/perf/util/thread_map.h
+++ b/tools/perf/util/thread_map.h
@@@ -20,46 -10,22 +20,52 @@@ struct thread_map 
  
  struct thread_map_event;
  
 -struct perf_thread_map *thread_map__new_dummy(void);
 -struct perf_thread_map *thread_map__new_by_pid(pid_t pid);
 -struct perf_thread_map *thread_map__new_by_tid(pid_t tid);
 -struct perf_thread_map *thread_map__new_by_uid(uid_t uid);
 -struct perf_thread_map *thread_map__new_all_cpus(void);
 -struct perf_thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
 -struct perf_thread_map *thread_map__new_event(struct thread_map_event *event);
 +struct thread_map *thread_map__new_dummy(void);
 +struct thread_map *thread_map__new_by_pid(pid_t pid);
 +struct thread_map *thread_map__new_by_tid(pid_t tid);
 +struct thread_map *thread_map__new_by_uid(uid_t uid);
 +struct thread_map *thread_map__new_all_cpus(void);
 +struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
 +struct thread_map *thread_map__new_event(struct thread_map_event *event);
  
 -struct perf_thread_map *thread_map__new_str(const char *pid,
 +struct thread_map *thread_map__get(struct thread_map *map);
 +void thread_map__put(struct thread_map *map);
 +
 +struct thread_map *thread_map__new_str(const char *pid,
  		const char *tid, uid_t uid, bool all_threads);
  
 -struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str);
 +struct thread_map *thread_map__new_by_tid_str(const char *tid_str);
 +
 +size_t thread_map__fprintf(struct thread_map *threads, FILE *fp);
 +
++<<<<<<< HEAD
 +static inline int thread_map__nr(struct thread_map *threads)
 +{
 +	return threads ? threads->nr : 1;
 +}
 +
 +static inline pid_t thread_map__pid(struct thread_map *map, int thread)
 +{
 +	return map->map[thread].pid;
 +}
 +
 +static inline void
 +thread_map__set_pid(struct thread_map *map, int thread, pid_t pid)
 +{
 +	map->map[thread].pid = pid;
 +}
  
 -size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp);
 +static inline char *thread_map__comm(struct thread_map *map, int thread)
 +{
 +	return map->map[thread].comm;
 +}
  
 +void thread_map__read_comms(struct thread_map *threads);
 +bool thread_map__has(struct thread_map *threads, pid_t pid);
 +int thread_map__remove(struct thread_map *threads, int idx);
++=======
+ void thread_map__read_comms(struct perf_thread_map *threads);
+ bool thread_map__has(struct perf_thread_map *threads, pid_t pid);
+ int thread_map__remove(struct perf_thread_map *threads, int idx);
++>>>>>>> a2f354e3abb8 (libperf: Add perf_thread_map__nr/perf_thread_map__pid functions)
  #endif	/* __PERF_THREAD_MAP_H */
* Unmerged path tools/perf/lib/include/perf/threadmap.h
* Unmerged path tools/perf/lib/threadmap.c
* Unmerged path tools/perf/builtin-ftrace.c
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/lib/include/perf/threadmap.h
* Unmerged path tools/perf/lib/libperf.map
* Unmerged path tools/perf/lib/threadmap.c
diff --git a/tools/perf/tests/thread-map.c b/tools/perf/tests/thread-map.c
index ccc17aced49e..a923e3512c66 100644
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@ -26,7 +26,7 @@ int test__thread_map(struct test *test __maybe_unused, int subtest __maybe_unuse
 
 	TEST_ASSERT_VAL("wrong nr", map->nr == 1);
 	TEST_ASSERT_VAL("wrong pid",
-			thread_map__pid(map, 0) == getpid());
+			perf_thread_map__pid(map, 0) == getpid());
 	TEST_ASSERT_VAL("wrong comm",
 			thread_map__comm(map, 0) &&
 			!strcmp(thread_map__comm(map, 0), NAME));
@@ -41,7 +41,7 @@ int test__thread_map(struct test *test __maybe_unused, int subtest __maybe_unuse
 	thread_map__read_comms(map);
 
 	TEST_ASSERT_VAL("wrong nr", map->nr == 1);
-	TEST_ASSERT_VAL("wrong pid", thread_map__pid(map, 0) == -1);
+	TEST_ASSERT_VAL("wrong pid", perf_thread_map__pid(map, 0) == -1);
 	TEST_ASSERT_VAL("wrong comm",
 			thread_map__comm(map, 0) &&
 			!strcmp(thread_map__comm(map, 0), "dummy"));
@@ -68,7 +68,7 @@ static int process_event(struct perf_tool *tool __maybe_unused,
 
 	TEST_ASSERT_VAL("wrong nr", threads->nr == 1);
 	TEST_ASSERT_VAL("wrong pid",
-			thread_map__pid(threads, 0) == getpid());
+			perf_thread_map__pid(threads, 0) == getpid());
 	TEST_ASSERT_VAL("wrong comm",
 			thread_map__comm(threads, 0) &&
 			!strcmp(thread_map__comm(threads, 0), NAME));
* Unmerged path tools/perf/util/auxtrace.c
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index f1f4848947ce..6bce41f17e99 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -647,7 +647,7 @@ int perf_event__synthesize_thread_map(struct perf_tool *tool,
 	for (thread = 0; thread < threads->nr; ++thread) {
 		if (__event__synthesize_thread(comm_event, mmap_event,
 					       fork_event, namespaces_event,
-					       thread_map__pid(threads, thread), 0,
+					       perf_thread_map__pid(threads, thread), 0,
 					       process, tool, machine,
 					       mmap_data)) {
 			err = -1;
@@ -658,12 +658,12 @@ int perf_event__synthesize_thread_map(struct perf_tool *tool,
 		 * comm.pid is set to thread group id by
 		 * perf_event__synthesize_comm
 		 */
-		if ((int) comm_event->comm.pid != thread_map__pid(threads, thread)) {
+		if ((int) comm_event->comm.pid != perf_thread_map__pid(threads, thread)) {
 			bool need_leader = true;
 
 			/* is thread group leader in thread_map? */
 			for (j = 0; j < threads->nr; ++j) {
-				if ((int) comm_event->comm.pid == thread_map__pid(threads, j)) {
+				if ((int) comm_event->comm.pid == perf_thread_map__pid(threads, j)) {
 					need_leader = false;
 					break;
 				}
@@ -997,7 +997,7 @@ int perf_event__synthesize_thread_map2(struct perf_tool *tool,
 		if (!comm)
 			comm = (char *) "";
 
-		entry->pid = thread_map__pid(threads, i);
+		entry->pid = perf_thread_map__pid(threads, i);
 		strncpy((char *) &entry->comm, comm, sizeof(entry->comm));
 	}
 
* Unmerged path tools/perf/util/evlist.c
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index 90bfc2303a40..2d5688919cba 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -1751,7 +1751,7 @@ static bool ignore_missing_thread(struct perf_evsel *evsel,
 				  struct thread_map *threads,
 				  int thread, int err)
 {
-	pid_t ignore_pid = thread_map__pid(threads, thread);
+	pid_t ignore_pid = perf_thread_map__pid(threads, thread);
 
 	if (!evsel->ignore_missing_thread)
 		return false;
@@ -1913,7 +1913,7 @@ int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 			int fd, group_fd;
 
 			if (!evsel->cgrp && !evsel->system_wide)
-				pid = thread_map__pid(threads, thread);
+				pid = perf_thread_map__pid(threads, thread);
 
 			group_fd = get_group_fd(evsel, cpu, thread);
 retry_open:
diff --git a/tools/perf/util/scripting-engines/trace-event-python.c b/tools/perf/util/scripting-engines/trace-event-python.c
index f383c17770ab..91fb7820fcfe 100644
--- a/tools/perf/util/scripting-engines/trace-event-python.c
+++ b/tools/perf/util/scripting-engines/trace-event-python.c
@@ -1406,7 +1406,7 @@ static void python_process_stat(struct perf_stat_config *config,
 	for (thread = 0; thread < threads->nr; thread++) {
 		for (cpu = 0; cpu < cpus->nr; cpu++) {
 			process_stat(counter, cpus->map[cpu],
-				     thread_map__pid(threads, thread), tstamp,
+				     perf_thread_map__pid(threads, thread), tstamp,
 				     perf_counts(counter->counts, cpu, thread));
 		}
 	}
* Unmerged path tools/perf/util/stat-display.c
* Unmerged path tools/perf/util/stat.c
diff --git a/tools/perf/util/thread_map.c b/tools/perf/util/thread_map.c
index 5b3511f2b6b1..70b3bf59d133 100644
--- a/tools/perf/util/thread_map.c
+++ b/tools/perf/util/thread_map.c
@@ -371,7 +371,7 @@ size_t thread_map__fprintf(struct thread_map *threads, FILE *fp)
 	size_t printed = fprintf(fp, "%d thread%s: ",
 				 threads->nr, threads->nr > 1 ? "s" : "");
 	for (i = 0; i < threads->nr; ++i)
-		printed += fprintf(fp, "%s%d", i ? ", " : "", thread_map__pid(threads, i));
+		printed += fprintf(fp, "%s%d", i ? ", " : "", perf_thread_map__pid(threads, i));
 
 	return printed + fprintf(fp, "\n");
 }
@@ -402,7 +402,7 @@ static int get_comm(char **comm, pid_t pid)
 
 static void comm_init(struct thread_map *map, int i)
 {
-	pid_t pid = thread_map__pid(map, i);
+	pid_t pid = perf_thread_map__pid(map, i);
 	char *comm = NULL;
 
 	/* dummy pid comm initialization */
* Unmerged path tools/perf/util/thread_map.h
