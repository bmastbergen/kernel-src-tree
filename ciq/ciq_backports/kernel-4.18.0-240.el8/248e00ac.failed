bpf: cgroup: Allow multi-attach program to replace itself

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Lorenz Bauer <lmb@cloudflare.com>
commit 248e00ac47d64e153b9c50f45aad73cd61894a73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/248e00ac.failed

When using BPF_PROG_ATTACH to attach a program to a cgroup in
BPF_F_ALLOW_MULTI mode, it is not possible to replace a program
with itself. This is because the check for duplicate programs
doesn't take the replacement program into account.

Replacing a program with itself might seem weird, but it has
some uses: first, it allows resetting the associated cgroup storage.
Second, it makes the API consistent with the non-ALLOW_MULTI usage,
where it is possible to replace a program with itself. Third, it
aligns BPF_PROG_ATTACH with bpf_link, where replacing itself is
also supported.

Sice this code has been refactored a few times this change will
only apply to v5.7 and later. Adjustments could be made to
commit 1020c1f24a94 ("bpf: Simplify __cgroup_bpf_attach") and
commit d7bf2c10af05 ("bpf: allocate cgroup storage entries on attaching bpf programs")
as well as commit 324bda9e6c5a ("bpf: multi program support for cgroup+bpf")

Fixes: af6eea57437a ("bpf: Implement bpf_link-based cgroup BPF program attachment")
	Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200608162202.94002-1-lmb@cloudflare.com
(cherry picked from commit 248e00ac47d64e153b9c50f45aad73cd61894a73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/cgroup.c
#	tools/testing/selftests/bpf/prog_tests/cgroup_attach_multi.c
diff --cc kernel/bpf/cgroup.c
index 5b8da1ceafe3,4d76f16524cc..000000000000
--- a/kernel/bpf/cgroup.c
+++ b/kernel/bpf/cgroup.c
@@@ -292,8 -362,46 +292,49 @@@ cleanup
  
  #define BPF_CGROUP_MAX_PROGS 64
  
++<<<<<<< HEAD
++=======
+ static struct bpf_prog_list *find_attach_entry(struct list_head *progs,
+ 					       struct bpf_prog *prog,
+ 					       struct bpf_cgroup_link *link,
+ 					       struct bpf_prog *replace_prog,
+ 					       bool allow_multi)
+ {
+ 	struct bpf_prog_list *pl;
+ 
+ 	/* single-attach case */
+ 	if (!allow_multi) {
+ 		if (list_empty(progs))
+ 			return NULL;
+ 		return list_first_entry(progs, typeof(*pl), node);
+ 	}
+ 
+ 	list_for_each_entry(pl, progs, node) {
+ 		if (prog && pl->prog == prog && prog != replace_prog)
+ 			/* disallow attaching the same prog twice */
+ 			return ERR_PTR(-EINVAL);
+ 		if (link && pl->link == link)
+ 			/* disallow attaching the same link twice */
+ 			return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	/* direct prog multi-attach w/ replacement case */
+ 	if (replace_prog) {
+ 		list_for_each_entry(pl, progs, node) {
+ 			if (pl->prog == replace_prog)
+ 				/* a match found */
+ 				return pl;
+ 		}
+ 		/* prog to replace not found for cgroup */
+ 		return ERR_PTR(-ENOENT);
+ 	}
+ 
+ 	return NULL;
+ }
+ 
++>>>>>>> 248e00ac47d6 (bpf: cgroup: Allow multi-attach program to replace itself)
  /**
 - * __cgroup_bpf_attach() - Attach the program or the link to a cgroup, and
 + * __cgroup_bpf_attach() - Attach the program to a cgroup, and
   *                         propagate the change to descendants
   * @cgrp: The cgroup which descendants to traverse
   * @prog: A program to attach
* Unmerged path tools/testing/selftests/bpf/prog_tests/cgroup_attach_multi.c
* Unmerged path kernel/bpf/cgroup.c
* Unmerged path tools/testing/selftests/bpf/prog_tests/cgroup_attach_multi.c
