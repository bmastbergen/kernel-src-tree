nvme: refactor nvme_identify_ns_descs error handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit fb314eb0cbb2e11540d1ae1a7b28346397f621ef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fb314eb0.failed

Move the handling of an error into the function from the caller, and
only do it for an actual error on the admin command itself, not the
command parsing, as that should be enough to deal with devices claiming
a bogus version compliance.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Keith Busch <kbusch@kernel.org>
(cherry picked from commit fb314eb0cbb2e11540d1ae1a7b28346397f621ef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 54bfa09c007b,6bd1c6dfac6b..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1601,14 -1772,9 +1610,20 @@@ static void nvme_report_ns_ids(struct n
  		memcpy(ids->eui64, id->eui64, sizeof(id->eui64));
  	if (ctrl->vs >= NVME_VS(1, 2, 0))
  		memcpy(ids->nguid, id->nguid, sizeof(id->nguid));
++<<<<<<< HEAD
 +	if (ctrl->vs >= NVME_VS(1, 3, 0)) {
 +		 /* Don't treat error as fatal we potentially
 +		  * already have a NGUID or EUI-64
 +		  */
 +		if (nvme_identify_ns_descs(ctrl, nsid, ids))
 +			dev_warn(ctrl->device,
 +				 "%s: Identify Descriptors failed\n", __func__);
 +	}
++=======
+ 	if (ctrl->vs >= NVME_VS(1, 3, 0))
+ 		return nvme_identify_ns_descs(ctrl, nsid, ids);
+ 	return 0;
++>>>>>>> fb314eb0cbb2 (nvme: refactor nvme_identify_ns_descs error handling)
  }
  
  static bool nvme_ns_ids_valid(struct nvme_ns_ids *ids)
* Unmerged path drivers/nvme/host/core.c
