IB/mlx5: Add mmap support for VAR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 3f59b6c3e600f9665dcf5b8e566cd7b778f03045
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3f59b6c3.failed

Add mmap support for VAR, it uses the 'offset' command mode with
involvement of IB core APIs to find the previously allocated mmap entry.

Link: https://lore.kernel.org/r/20191212110928.334995-6-leon@kernel.org
	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 3f59b6c3e600f9665dcf5b8e566cd7b778f03045)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index 31c8d9c10418,97bcf01960ae..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -2195,25 -2211,67 +2195,49 @@@ free_bfreg
  	return err;
  }
  
 -static int add_dm_mmap_entry(struct ib_ucontext *context,
 -			     struct mlx5_ib_dm *mdm,
 -			     u64 address)
 -{
 -	mdm->mentry.mmap_flag = MLX5_IB_MMAP_TYPE_MEMIC;
 -	mdm->mentry.address = address;
 -	return rdma_user_mmap_entry_insert_range(
 -			context, &mdm->mentry.rdma_entry,
 -			mdm->size,
 -			MLX5_IB_MMAP_DEVICE_MEM << 16,
 -			(MLX5_IB_MMAP_DEVICE_MEM << 16) + (1UL << 16) - 1);
 -}
 -
 -static unsigned long mlx5_vma_to_pgoff(struct vm_area_struct *vma)
 +static int dm_mmap(struct ib_ucontext *context, struct vm_area_struct *vma)
  {
 -	unsigned long idx;
 -	u8 command;
 -
 -	command = get_command(vma->vm_pgoff);
 -	idx = get_extended_index(vma->vm_pgoff);
 -
 -	return (command << 16 | idx);
 -}
 -
 -static int mlx5_ib_mmap_offset(struct mlx5_ib_dev *dev,
 -			       struct vm_area_struct *vma,
 -			       struct ib_ucontext *ucontext)
 -{
 -	struct mlx5_user_mmap_entry *mentry;
 -	struct rdma_user_mmap_entry *entry;
 -	unsigned long pgoff;
 -	pgprot_t prot;
 +	struct mlx5_ib_ucontext *mctx = to_mucontext(context);
 +	struct mlx5_ib_dev *dev = to_mdev(context->device);
 +	u16 page_idx = get_extended_index(vma->vm_pgoff);
 +	size_t map_size = vma->vm_end - vma->vm_start;
 +	u32 npages = map_size >> PAGE_SHIFT;
  	phys_addr_t pfn;
 -	int ret;
  
 -	pgoff = mlx5_vma_to_pgoff(vma);
 -	entry = rdma_user_mmap_entry_get_pgoff(ucontext, pgoff);
 -	if (!entry)
 +	if (find_next_zero_bit(mctx->dm_pages, page_idx + npages, page_idx) !=
 +	    page_idx + npages)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	pfn = ((dev->mdev->bar_addr +
 +	      MLX5_CAP64_DEV_MEM(dev->mdev, memic_bar_start_addr)) >>
 +	      PAGE_SHIFT) +
 +	      page_idx;
 +	return rdma_user_mmap_io(context, vma, pfn, map_size,
 +				 pgprot_writecombine(vma->vm_page_prot));
++=======
+ 	mentry = to_mmmap(entry);
+ 	pfn = (mentry->address >> PAGE_SHIFT);
+ 	if (mentry->mmap_flag == MLX5_IB_MMAP_TYPE_VAR)
+ 		prot = pgprot_noncached(vma->vm_page_prot);
+ 	else
+ 		prot = pgprot_writecombine(vma->vm_page_prot);
+ 	ret = rdma_user_mmap_io(ucontext, vma, pfn,
+ 				entry->npages * PAGE_SIZE,
+ 				prot,
+ 				entry);
+ 	rdma_user_mmap_entry_put(&mentry->rdma_entry);
+ 	return ret;
+ }
+ 
+ static u64 mlx5_entry_to_mmap_offset(struct mlx5_user_mmap_entry *entry)
+ {
+ 	u16 cmd = entry->rdma_entry.start_pgoff >> 16;
+ 	u16 index = entry->rdma_entry.start_pgoff & 0xFFFF;
+ 
+ 	return (((index >> 8) << 16) | (cmd << MLX5_IB_MMAP_CMD_SHIFT) |
+ 		(index & 0xFF)) << PAGE_SHIFT;
++>>>>>>> 3f59b6c3e600 (IB/mlx5: Add mmap support for VAR)
  }
  
  static int mlx5_ib_mmap(struct ib_ucontext *ibcontext, struct vm_area_struct *vma)
* Unmerged path drivers/infiniband/hw/mlx5/main.c
