mm/vunmap: add cond_resched() in vunmap_pmd_range

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
commit e47110e90584a22e9980510b00d0dfad3a83354e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e47110e9.failed

Like zap_pte_range add cond_resched so that we can avoid softlockups as
reported below.  On non-preemptible kernel with large I/O map region (like
the one we get when using persistent memory with sector mode), an unmap of
the namespace can report below softlockups.

22724.027334] watchdog: BUG: soft lockup - CPU#49 stuck for 23s! [ndctl:50777]
 NIP [c0000000000dc224] plpar_hcall+0x38/0x58
 LR [c0000000000d8898] pSeries_lpar_hpte_invalidate+0x68/0xb0
 Call Trace:
    flush_hash_page+0x114/0x200
    hpte_need_flush+0x2dc/0x540
    vunmap_page_range+0x538/0x6f0
    free_unmap_vmap_area+0x30/0x70
    remove_vm_area+0xfc/0x140
    __vunmap+0x68/0x270
    __iounmap.part.0+0x34/0x60
    memunmap+0x54/0x70
    release_nodes+0x28c/0x300
    device_release_driver_internal+0x16c/0x280
    unbind_store+0x124/0x170
    drv_attr_store+0x44/0x60
    sysfs_kf_write+0x64/0x90
    kernfs_fop_write+0x1b0/0x290
    __vfs_write+0x3c/0x70
    vfs_write+0xd8/0x260
    ksys_write+0xdc/0x130
    system_call+0x5c/0x70

	Reported-by: Harish Sriram <harish@linux.ibm.com>
	Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
	Cc: <stable@vger.kernel.org>
Link: http://lkml.kernel.org/r/20200807075933.310240-1-aneesh.kumar@linux.ibm.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit e47110e90584a22e9980510b00d0dfad3a83354e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmalloc.c
diff --cc mm/vmalloc.c
index 3a0d3d48aee0,be4724b916b3..000000000000
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@@ -81,7 -103,9 +81,13 @@@ static void vunmap_pmd_range(pud_t *pud
  			continue;
  		if (pmd_none_or_clear_bad(pmd))
  			continue;
++<<<<<<< HEAD
 +		vunmap_pte_range(pmd, addr, next);
++=======
+ 		vunmap_pte_range(pmd, addr, next, mask);
+ 
+ 		cond_resched();
++>>>>>>> e47110e90584 (mm/vunmap: add cond_resched() in vunmap_pmd_range)
  	} while (pmd++, addr = next, addr != end);
  }
  
* Unmerged path mm/vmalloc.c
