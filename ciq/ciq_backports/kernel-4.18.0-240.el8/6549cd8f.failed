perf tools: Use perf_cpu_map__nr instead of cpu_map__nr

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 6549cd8f2cc2cdf7e107fbbc3a68ecefb774bb2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6549cd8f.failed

Switch the rest of the perf code to use libperf's perf_cpu_map__nr(),
which is the same as current cpu_map__nr() and remove the cpu_map__nr()
function.

Link: http://lkml.kernel.org/n/tip-6e0guy75clis7nm0xpuz9fga@git.kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190822111141.25823-3-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 6549cd8f2cc2cdf7e107fbbc3a68ecefb774bb2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/cpumap.h
#	tools/perf/util/evlist.c
#	tools/perf/util/stat-display.c
diff --cc tools/perf/util/cpumap.h
index 1265f0e33920,77f85e9c88d4..000000000000
--- a/tools/perf/util/cpumap.h
+++ b/tools/perf/util/cpumap.h
@@@ -59,12 -49,7 +59,16 @@@ static inline int cpu_map__id_to_cpu(in
  	return id & 0xffff;
  }
  
++<<<<<<< HEAD
 +static inline int cpu_map__nr(const struct cpu_map *map)
 +{
 +	return map ? map->nr : 1;
 +}
 +
 +static inline bool cpu_map__empty(const struct cpu_map *map)
++=======
+ static inline bool cpu_map__empty(const struct perf_cpu_map *map)
++>>>>>>> 6549cd8f2cc2 (perf tools: Use perf_cpu_map__nr instead of cpu_map__nr)
  {
  	return map ? map->map[0] == -1 : true;
  }
diff --cc tools/perf/util/evlist.c
index 4739b7914374,15d1046014d7..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -397,9 -370,9 +397,13 @@@ static int perf_evlist__enable_event_th
  					    int thread)
  {
  	int cpu;
++<<<<<<< HEAD
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
++=======
+ 	int nr_cpus = perf_cpu_map__nr(evlist->core.cpus);
++>>>>>>> 6549cd8f2cc2 (perf tools: Use perf_cpu_map__nr instead of cpu_map__nr)
  
 -	if (!evsel->core.fd)
 +	if (!evsel->fd)
  		return -EINVAL;
  
  	for (cpu = 0; cpu < nr_cpus; cpu++) {
@@@ -421,12 -394,12 +425,17 @@@ int perf_evlist__enable_event_idx(struc
  		return perf_evlist__enable_event_thread(evlist, evsel, idx);
  }
  
 -int perf_evlist__alloc_pollfd(struct evlist *evlist)
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
 +	int nr_threads = thread_map__nr(evlist->threads);
++=======
+ 	int nr_cpus = perf_cpu_map__nr(evlist->core.cpus);
+ 	int nr_threads = thread_map__nr(evlist->core.threads);
++>>>>>>> 6549cd8f2cc2 (perf tools: Use perf_cpu_map__nr instead of cpu_map__nr)
  	int nfds = 0;
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->system_wide)
@@@ -719,9 -692,9 +728,15 @@@ static struct perf_mmap *perf_evlist__a
  	int i;
  	struct perf_mmap *map;
  
++<<<<<<< HEAD
 +	evlist->nr_mmaps = cpu_map__nr(evlist->cpus);
 +	if (cpu_map__empty(evlist->cpus))
 +		evlist->nr_mmaps = thread_map__nr(evlist->threads);
++=======
+ 	evlist->nr_mmaps = perf_cpu_map__nr(evlist->core.cpus);
+ 	if (cpu_map__empty(evlist->core.cpus))
+ 		evlist->nr_mmaps = thread_map__nr(evlist->core.threads);
++>>>>>>> 6549cd8f2cc2 (perf tools: Use perf_cpu_map__nr instead of cpu_map__nr)
  	map = zalloc(evlist->nr_mmaps * sizeof(struct perf_mmap));
  	if (!map)
  		return NULL;
@@@ -834,8 -807,8 +849,13 @@@ static int perf_evlist__mmap_per_cpu(st
  				     struct mmap_params *mp)
  {
  	int cpu, thread;
++<<<<<<< HEAD
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
 +	int nr_threads = thread_map__nr(evlist->threads);
++=======
+ 	int nr_cpus = perf_cpu_map__nr(evlist->core.cpus);
+ 	int nr_threads = thread_map__nr(evlist->core.threads);
++>>>>>>> 6549cd8f2cc2 (perf tools: Use perf_cpu_map__nr instead of cpu_map__nr)
  
  	pr_debug2("perf event ring buffer mmapped per cpu\n");
  	for (cpu = 0; cpu < nr_cpus; cpu++) {
@@@ -1039,9 -1012,9 +1059,9 @@@ int perf_evlist__mmap_ex(struct perf_ev
  				   auxtrace_pages, auxtrace_overwrite);
  
  	evlist__for_each_entry(evlist, evsel) {
 -		if ((evsel->core.attr.read_format & PERF_FORMAT_ID) &&
 +		if ((evsel->attr.read_format & PERF_FORMAT_ID) &&
  		    evsel->sample_id == NULL &&
- 		    perf_evsel__alloc_id(evsel, cpu_map__nr(cpus), threads->nr) < 0)
+ 		    perf_evsel__alloc_id(evsel, perf_cpu_map__nr(cpus), threads->nr) < 0)
  			return -ENOMEM;
  	}
  
diff --cc tools/perf/util/stat-display.c
index 58df6a0dbb9f,3df0e39ccd52..000000000000
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@@ -741,11 -741,11 +741,16 @@@ static struct perf_aggr_thread_value *s
  
  static void print_aggr_thread(struct perf_stat_config *config,
  			      struct target *_target,
 -			      struct evsel *counter, char *prefix)
 +			      struct perf_evsel *counter, char *prefix)
  {
  	FILE *output = config->output;
++<<<<<<< HEAD
 +	int nthreads = thread_map__nr(counter->threads);
 +	int ncpus = cpu_map__nr(counter->cpus);
++=======
+ 	int nthreads = thread_map__nr(counter->core.threads);
+ 	int ncpus = perf_cpu_map__nr(counter->core.cpus);
++>>>>>>> 6549cd8f2cc2 (perf tools: Use perf_cpu_map__nr instead of cpu_map__nr)
  	int thread, sorted_threads, id;
  	struct perf_aggr_thread_value *buf;
  
diff --git a/tools/perf/arch/arm/util/cs-etm.c b/tools/perf/arch/arm/util/cs-etm.c
index 4208974c24f8..cedb46a4ccac 100644
--- a/tools/perf/arch/arm/util/cs-etm.c
+++ b/tools/perf/arch/arm/util/cs-etm.c
@@ -653,7 +653,7 @@ static int cs_etm_info_fill(struct auxtrace_record *itr,
 		cpu_map = online_cpus;
 	} else {
 		/* Make sure all specified CPUs are online */
-		for (i = 0; i < cpu_map__nr(event_cpus); i++) {
+		for (i = 0; i < perf_cpu_map__nr(event_cpus); i++) {
 			if (cpu_map__has(event_cpus, i) &&
 			    !cpu_map__has(online_cpus, i))
 				return -EINVAL;
@@ -662,7 +662,7 @@ static int cs_etm_info_fill(struct auxtrace_record *itr,
 		cpu_map = event_cpus;
 	}
 
-	nr_cpu = cpu_map__nr(cpu_map);
+	nr_cpu = perf_cpu_map__nr(cpu_map);
 	/* Get PMU type as dynamically assigned by the core */
 	type = cs_etm_pmu->type;
 
* Unmerged path tools/perf/util/cpumap.h
* Unmerged path tools/perf/util/evlist.c
diff --git a/tools/perf/util/mmap.c b/tools/perf/util/mmap.c
index 850493205040..f1fc0d5f0899 100644
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@ -332,7 +332,7 @@ static void build_node_mask(int node, cpu_set_t *mask)
 	if (!cpu_map)
 		return;
 
-	nr_cpus = cpu_map__nr(cpu_map);
+	nr_cpus = perf_cpu_map__nr(cpu_map);
 	for (c = 0; c < nr_cpus; c++) {
 		cpu = cpu_map->map[c]; /* map c index to online cpu index */
 		if (cpu__get_node(cpu) == node)
* Unmerged path tools/perf/util/stat-display.c
