block: don't send uevent for empty disk when not invalidating

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Eric Biggers <ebiggers@google.com>
commit 490547ca2df66b8413bce97cb651630f2c531487
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/490547ca.failed

Commit 6917d0689993 ("block: merge invalidate_partitions into
rescan_partitions") caused a regression where systemd-udevd spins
forever using max CPU starting at boot time.

It's caused by a behavior change where a KOBJ_CHANGE uevent is now sent
in a case where previously it wasn't.

Restore the old behavior.

Fixes: 6917d0689993 ("block: merge invalidate_partitions into rescan_partitions")
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Eric Biggers <ebiggers@google.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 490547ca2df66b8413bce97cb651630f2c531487)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
diff --cc fs/block_dev.c
index 445bfb04306f,69bf2fb6f7cd..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -1529,18 -1508,44 +1529,48 @@@ EXPORT_SYMBOL(bd_set_size)
  
  static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part);
  
 -int bdev_disk_changed(struct block_device *bdev, bool invalidate)
 +static void bdev_disk_changed(struct block_device *bdev, bool invalidate)
  {
++<<<<<<< HEAD
 +	if (disk_part_scan_enabled(bdev->bd_disk)) {
 +		if (invalidate)
 +			invalidate_partitions(bdev->bd_disk, bdev);
 +		else
 +			rescan_partitions(bdev->bd_disk, bdev);
 +	} else {
 +		check_disk_size_change(bdev->bd_disk, bdev, !invalidate);
 +		bdev->bd_invalidated = 0;
++=======
+ 	struct gendisk *disk = bdev->bd_disk;
+ 	int ret;
+ 
+ 	lockdep_assert_held(&bdev->bd_mutex);
+ 
+ rescan:
+ 	ret = blk_drop_partitions(disk, bdev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (invalidate)
+ 		set_capacity(disk, 0);
+ 	else if (disk->fops->revalidate_disk)
+ 		disk->fops->revalidate_disk(disk);
+ 
+ 	check_disk_size_change(disk, bdev, !invalidate);
+ 
+ 	if (get_capacity(disk)) {
+ 		ret = blk_add_partitions(disk, bdev);
+ 		if (ret == -EAGAIN)
+ 			goto rescan;
+ 	} else if (invalidate) {
+ 		/*
+ 		 * Tell userspace that the media / partition table may have
+ 		 * changed.
+ 		 */
+ 		kobject_uevent(&disk_to_dev(disk)->kobj, KOBJ_CHANGE);
++>>>>>>> 490547ca2df6 (block: don't send uevent for empty disk when not invalidating)
  	}
 -
 -	return ret;
  }
 -/*
 - * Only exported for for loop and dasd for historic reasons.  Don't use in new
 - * code!
 - */
 -EXPORT_SYMBOL_GPL(bdev_disk_changed);
  
  /*
   * bd_mutex locking:
* Unmerged path fs/block_dev.c
