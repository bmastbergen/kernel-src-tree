futex: Remove pointless mmgrap() + mmdrop()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 222993395ed38f3751287f4bd82ef46b3eb3a66d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/22299339.failed

We always set 'key->private.mm' to 'current->mm', getting an extra
reference on 'current->mm' is quite pointless, because as long as the
task is blocked it isn't going to go away.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
(cherry picked from commit 222993395ed38f3751287f4bd82ef46b3eb3a66d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/futex.c
diff --cc kernel/futex.c
index b1471854bcc6,3463c916605a..000000000000
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@@ -335,16 -325,11 +335,24 @@@ static inline bool should_fail_futex(bo
  }
  #endif /* CONFIG_FAIL_FUTEX */
  
++<<<<<<< HEAD
 +static inline void futex_get_mm(union futex_key *key)
 +{
 +	mmgrab(key->private.mm);
 +	/*
 +	 * Ensure futex_get_mm() implies a full barrier such that
 +	 * get_futex_key() implies a full barrier. This is relied upon
 +	 * as smp_mb(); (B), see the ordering comment above.
 +	 */
 +	smp_mb__after_atomic();
 +}
++=======
+ #ifdef CONFIG_COMPAT
+ static void compat_exit_robust_list(struct task_struct *curr);
+ #else
+ static inline void compat_exit_robust_list(struct task_struct *curr) { }
+ #endif
++>>>>>>> 222993395ed3 (futex: Remove pointless mmgrap() + mmdrop())
  
  /*
   * Reflects a new waiter being added to the waitqueue.
@@@ -433,10 -418,10 +441,10 @@@ static void get_futex_key_refs(union fu
  
  	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
  	case FUT_OFF_INODE:
 -		smp_mb();		/* explicit smp_mb(); (B) */
 +		ihold(key->shared.inode); /* implies smp_mb(); (B) */
  		break;
  	case FUT_OFF_MMSHARED:
- 		futex_get_mm(key); /* implies smp_mb(); (B) */
+ 		smp_mb();		/* explicit smp_mb(); (B) */
  		break;
  	default:
  		/*
@@@ -467,10 -452,8 +475,9 @@@ static void drop_futex_key_refs(union f
  
  	switch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {
  	case FUT_OFF_INODE:
 +		iput(key->shared.inode);
  		break;
  	case FUT_OFF_MMSHARED:
- 		mmdrop(key->private.mm);
  		break;
  	}
  }
* Unmerged path kernel/futex.c
