libbpf: Simplify BTF initialization logic

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit b7d7f3e185b6e643dcd49d1486b11cade8519008
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b7d7f3e1.failed

Current implementation of bpf_object's BTF initialization is very convoluted
and thus prone to errors. It doesn't have to be like that. This patch
simplifies it significantly.

This code also triggered static analysis issues over logically dead code due
to redundant error checks. This simplification should fix that as well.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200117060801.1311525-3-andriin@fb.com
(cherry picked from commit b7d7f3e185b6e643dcd49d1486b11cade8519008)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 3a32419a3814,3b0b88c3377d..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -1554,11 -2308,7 +1555,15 @@@ static int bpf_object__init_btf(struct 
  				BTF_ELF_SEC, err);
  			goto out;
  		}
++<<<<<<< HEAD
 +		err = btf__finalize_data(obj, obj->btf);
 +		if (err) {
 +			pr_warn("Error finalizing %s: %d.\n", BTF_ELF_SEC, err);
 +			goto out;
 +		}
++=======
+ 		err = 0;
++>>>>>>> b7d7f3e185b6 (libbpf: Simplify BTF initialization logic)
  	}
  	if (btf_ext_data) {
  		if (!obj->btf) {
* Unmerged path tools/lib/bpf/libbpf.c
