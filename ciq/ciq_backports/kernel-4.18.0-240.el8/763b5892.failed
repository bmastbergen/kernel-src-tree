block: clarify context for refcount increment helpers

jira LE-1907
cve CVE-2019-19770
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Luis Chamberlain <mcgrof@kernel.org>
commit 763b58923aeb0a06c5a5f7e5fbb4c654c644d91d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/763b5892.failed

Let us clarify the context under which the helpers to increment the
refcount for the gendisk and request_queue can be called under. We
make this explicit on the places where we may sleep with might_sleep().

We don't address the decrement context yet, as that needs some extra
work and fixes, but will be addressed in the next patch.

	Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 763b58923aeb0a06c5a5f7e5fbb4c654c644d91d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
#	block/genhd.c
diff --cc block/blk-core.c
index 4b5867b7c476,f68398cb2ef6..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -549,8 -588,31 +549,35 @@@ fail_q
  	kmem_cache_free(blk_requestq_cachep, q);
  	return NULL;
  }
 +EXPORT_SYMBOL(blk_alloc_queue_node);
  
++<<<<<<< HEAD
++=======
+ struct request_queue *blk_alloc_queue(make_request_fn make_request, int node_id)
+ {
+ 	struct request_queue *q;
+ 
+ 	if (WARN_ON_ONCE(!make_request))
+ 		return NULL;
+ 
+ 	q = __blk_alloc_queue(node_id);
+ 	if (!q)
+ 		return NULL;
+ 	q->make_request_fn = make_request;
+ 	q->nr_requests = BLKDEV_MAX_RQ;
+ 	return q;
+ }
+ EXPORT_SYMBOL(blk_alloc_queue);
+ 
+ /**
+  * blk_get_queue - increment the request_queue refcount
+  * @q: the request_queue structure to increment the refcount for
+  *
+  * Increment the refcount of the request_queue kobject.
+  *
+  * Context: Any context.
+  */
++>>>>>>> 763b58923aeb (block: clarify context for refcount increment helpers)
  bool blk_get_queue(struct request_queue *q)
  {
  	if (likely(!blk_queue_dying(q))) {
diff --cc block/genhd.c
index 450adefa8955,1be86b1f43ec..000000000000
--- a/block/genhd.c
+++ b/block/genhd.c
@@@ -1550,6 -1762,15 +1554,18 @@@ struct gendisk *__alloc_disk_node(int m
  }
  EXPORT_SYMBOL(__alloc_disk_node);
  
++<<<<<<< HEAD
++=======
+ /**
+  * get_disk_and_module - increments the gendisk and gendisk fops module refcount
+  * @disk: the struct gendisk to to increment the refcount for
+  *
+  * This increments the refcount for the struct gendisk, and the gendisk's
+  * fops module owner.
+  *
+  * Context: Any context.
+  */
++>>>>>>> 763b58923aeb (block: clarify context for refcount increment helpers)
  struct kobject *get_disk_and_module(struct gendisk *disk)
  {
  	struct module *owner;
* Unmerged path block/blk-core.c
* Unmerged path block/genhd.c
