drm/i915/tgl: Add Wa_14010477008:tgl

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Matt Roper <matthew.d.roper@intel.com>
commit dbff5a8db9c630f61a892ab41a283445e01270f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/dbff5a8d.failed

Media decompression support should not be advertised on any display
planes for steppings A0-C0.

Bspec: 53273
Fixes: 2dfbf9d2873a ("drm/i915/tgl: Gen-12 display can decompress surfaces compressed by the media engine")
	Cc: Matt Atwood <matthew.s.atwood@intel.com>
	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200414211118.2787489-3-matthew.d.roper@intel.com
	Reviewed-by: Jos√© Roberto de Souza <jose.souza@intel.com>
(cherry picked from commit dbff5a8db9c630f61a892ab41a283445e01270f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_sprite.c
#	drivers/gpu/drm/i915/i915_drv.h
diff --cc drivers/gpu/drm/i915/display/intel_sprite.c
index 004b52027ae8,33d886141138..000000000000
--- a/drivers/gpu/drm/i915/display/intel_sprite.c
+++ b/drivers/gpu/drm/i915/display/intel_sprite.c
@@@ -2153,6 -2817,81 +2153,84 @@@ static bool skl_plane_format_mod_suppor
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static bool gen12_plane_supports_mc_ccs(struct drm_i915_private *dev_priv,
+ 					enum plane_id plane_id)
+ {
+ 	/* Wa_14010477008:tgl[a0..c0] */
+ 	if (IS_TGL_REVID(dev_priv, TGL_REVID_A0, TGL_REVID_C0))
+ 		return false;
+ 
+ 	return plane_id < PLANE_SPRITE4;
+ }
+ 
+ static bool gen12_plane_format_mod_supported(struct drm_plane *_plane,
+ 					     u32 format, u64 modifier)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(_plane->dev);
+ 	struct intel_plane *plane = to_intel_plane(_plane);
+ 
+ 	switch (modifier) {
+ 	case I915_FORMAT_MOD_Y_TILED_GEN12_MC_CCS:
+ 		if (!gen12_plane_supports_mc_ccs(dev_priv, plane->id))
+ 			return false;
+ 		/* fall through */
+ 	case DRM_FORMAT_MOD_LINEAR:
+ 	case I915_FORMAT_MOD_X_TILED:
+ 	case I915_FORMAT_MOD_Y_TILED:
+ 	case I915_FORMAT_MOD_Y_TILED_GEN12_RC_CCS:
+ 		break;
+ 	default:
+ 		return false;
+ 	}
+ 
+ 	switch (format) {
+ 	case DRM_FORMAT_XRGB8888:
+ 	case DRM_FORMAT_XBGR8888:
+ 	case DRM_FORMAT_ARGB8888:
+ 	case DRM_FORMAT_ABGR8888:
+ 		if (is_ccs_modifier(modifier))
+ 			return true;
+ 		/* fall through */
+ 	case DRM_FORMAT_YUYV:
+ 	case DRM_FORMAT_YVYU:
+ 	case DRM_FORMAT_UYVY:
+ 	case DRM_FORMAT_VYUY:
+ 	case DRM_FORMAT_NV12:
+ 	case DRM_FORMAT_P010:
+ 	case DRM_FORMAT_P012:
+ 	case DRM_FORMAT_P016:
+ 		if (modifier == I915_FORMAT_MOD_Y_TILED_GEN12_MC_CCS)
+ 			return true;
+ 		/* fall through */
+ 	case DRM_FORMAT_RGB565:
+ 	case DRM_FORMAT_XRGB2101010:
+ 	case DRM_FORMAT_XBGR2101010:
+ 	case DRM_FORMAT_ARGB2101010:
+ 	case DRM_FORMAT_ABGR2101010:
+ 	case DRM_FORMAT_XVYU2101010:
+ 	case DRM_FORMAT_C8:
+ 	case DRM_FORMAT_XBGR16161616F:
+ 	case DRM_FORMAT_ABGR16161616F:
+ 	case DRM_FORMAT_XRGB16161616F:
+ 	case DRM_FORMAT_ARGB16161616F:
+ 	case DRM_FORMAT_Y210:
+ 	case DRM_FORMAT_Y212:
+ 	case DRM_FORMAT_Y216:
+ 	case DRM_FORMAT_XVYU12_16161616:
+ 	case DRM_FORMAT_XVYU16161616:
+ 		if (modifier == DRM_FORMAT_MOD_LINEAR ||
+ 		    modifier == I915_FORMAT_MOD_X_TILED ||
+ 		    modifier == I915_FORMAT_MOD_Y_TILED)
+ 			return true;
+ 		/* fall through */
+ 	default:
+ 		return false;
+ 	}
+ }
+ 
++>>>>>>> dbff5a8db9c6 (drm/i915/tgl: Add Wa_14010477008:tgl)
  static const struct drm_plane_funcs g4x_sprite_funcs = {
  	.update_plane = drm_atomic_helper_update_plane,
  	.disable_plane = drm_atomic_helper_disable_plane,
@@@ -2217,6 -2962,57 +2295,60 @@@ static bool skl_plane_has_planar(struc
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ static const u32 *skl_get_plane_formats(struct drm_i915_private *dev_priv,
+ 					enum pipe pipe, enum plane_id plane_id,
+ 					int *num_formats)
+ {
+ 	if (skl_plane_has_planar(dev_priv, pipe, plane_id)) {
+ 		*num_formats = ARRAY_SIZE(skl_planar_formats);
+ 		return skl_planar_formats;
+ 	} else {
+ 		*num_formats = ARRAY_SIZE(skl_plane_formats);
+ 		return skl_plane_formats;
+ 	}
+ }
+ 
+ static const u32 *glk_get_plane_formats(struct drm_i915_private *dev_priv,
+ 					enum pipe pipe, enum plane_id plane_id,
+ 					int *num_formats)
+ {
+ 	if (skl_plane_has_planar(dev_priv, pipe, plane_id)) {
+ 		*num_formats = ARRAY_SIZE(glk_planar_formats);
+ 		return glk_planar_formats;
+ 	} else {
+ 		*num_formats = ARRAY_SIZE(skl_plane_formats);
+ 		return skl_plane_formats;
+ 	}
+ }
+ 
+ static const u32 *icl_get_plane_formats(struct drm_i915_private *dev_priv,
+ 					enum pipe pipe, enum plane_id plane_id,
+ 					int *num_formats)
+ {
+ 	if (icl_is_hdr_plane(dev_priv, plane_id)) {
+ 		*num_formats = ARRAY_SIZE(icl_hdr_plane_formats);
+ 		return icl_hdr_plane_formats;
+ 	} else if (icl_is_nv12_y_plane(plane_id)) {
+ 		*num_formats = ARRAY_SIZE(icl_sdr_y_plane_formats);
+ 		return icl_sdr_y_plane_formats;
+ 	} else {
+ 		*num_formats = ARRAY_SIZE(icl_sdr_uv_plane_formats);
+ 		return icl_sdr_uv_plane_formats;
+ 	}
+ }
+ 
+ static const u64 *gen12_get_plane_modifiers(struct drm_i915_private *dev_priv,
+ 					    enum plane_id plane_id)
+ {
+ 	if (gen12_plane_supports_mc_ccs(dev_priv, plane_id))
+ 		return gen12_plane_format_modifiers_mc_ccs;
+ 	else
+ 		return gen12_plane_format_modifiers_rc_ccs;
+ }
+ 
++>>>>>>> dbff5a8db9c6 (drm/i915/tgl: Add Wa_14010477008:tgl)
  static bool skl_plane_has_ccs(struct drm_i915_private *dev_priv,
  			      enum pipe pipe, enum plane_id plane_id)
  {
@@@ -2267,39 -3063,29 +2399,52 @@@ skl_universal_plane_create(struct drm_i
  	plane->disable_plane = skl_disable_plane;
  	plane->get_hw_state = skl_plane_get_hw_state;
  	plane->check_plane = skl_plane_check;
 -	plane->min_cdclk = skl_plane_min_cdclk;
 +	if (icl_is_nv12_y_plane(plane_id))
 +		plane->update_slave = icl_update_slave;
  
 -	if (INTEL_GEN(dev_priv) >= 11)
 -		formats = icl_get_plane_formats(dev_priv, pipe,
 -						plane_id, &num_formats);
 -	else if (INTEL_GEN(dev_priv) >= 10 || IS_GEMINILAKE(dev_priv))
 -		formats = glk_get_plane_formats(dev_priv, pipe,
 -						plane_id, &num_formats);
 -	else
 -		formats = skl_get_plane_formats(dev_priv, pipe,
 -						plane_id, &num_formats);
 +	if (skl_plane_has_planar(dev_priv, pipe, plane_id)) {
 +		if (icl_is_hdr_plane(dev_priv, plane_id)) {
 +			formats = icl_hdr_planar_formats;
 +			num_formats = ARRAY_SIZE(icl_hdr_planar_formats);
 +		} else if (INTEL_GEN(dev_priv) >= 11) {
 +			formats = icl_planar_formats;
 +			num_formats = ARRAY_SIZE(icl_planar_formats);
 +		} else if (INTEL_GEN(dev_priv) == 10 || IS_GEMINILAKE(dev_priv)) {
 +			formats = glk_planar_formats;
 +			num_formats = ARRAY_SIZE(glk_planar_formats);
 +		} else {
 +			formats = skl_planar_formats;
 +			num_formats = ARRAY_SIZE(skl_planar_formats);
 +		}
 +	} else if (icl_is_hdr_plane(dev_priv, plane_id)) {
 +		formats = icl_hdr_plane_formats;
 +		num_formats = ARRAY_SIZE(icl_hdr_plane_formats);
 +	} else if (INTEL_GEN(dev_priv) >= 11) {
 +		formats = icl_plane_formats;
 +		num_formats = ARRAY_SIZE(icl_plane_formats);
 +	} else {
 +		formats = skl_plane_formats;
 +		num_formats = ARRAY_SIZE(skl_plane_formats);
 +	}
  
  	plane->has_ccs = skl_plane_has_ccs(dev_priv, pipe, plane_id);
++<<<<<<< HEAD
 +	if (plane->has_ccs)
 +		modifiers = skl_plane_format_modifiers_ccs;
 +	else
 +		modifiers = skl_plane_format_modifiers_noccs;
++=======
+ 	if (INTEL_GEN(dev_priv) >= 12) {
+ 		modifiers = gen12_get_plane_modifiers(dev_priv, plane_id);
+ 		plane_funcs = &gen12_plane_funcs;
+ 	} else {
+ 		if (plane->has_ccs)
+ 			modifiers = skl_plane_format_modifiers_ccs;
+ 		else
+ 			modifiers = skl_plane_format_modifiers_noccs;
+ 		plane_funcs = &skl_plane_funcs;
+ 	}
++>>>>>>> dbff5a8db9c6 (drm/i915/tgl: Add Wa_14010477008:tgl)
  
  	if (plane_id == PLANE_PRIMARY)
  		plane_type = DRM_PLANE_TYPE_PRIMARY;
diff --cc drivers/gpu/drm/i915/i915_drv.h
index 6f70e09e3726,2f3fff648f08..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -2231,6 -1504,13 +2231,16 @@@ IS_SUBPLATFORM(const struct drm_i915_pr
  #define IS_ICL_REVID(p, since, until) \
  	(IS_ICELAKE(p) && IS_REVID(p, since, until))
  
++<<<<<<< HEAD
++=======
+ #define TGL_REVID_A0		0x0
+ #define TGL_REVID_B0		0x1
+ #define TGL_REVID_C0		0x2
+ 
+ #define IS_TGL_REVID(p, since, until) \
+ 	(IS_TIGERLAKE(p) && IS_REVID(p, since, until))
+ 
++>>>>>>> dbff5a8db9c6 (drm/i915/tgl: Add Wa_14010477008:tgl)
  #define IS_LP(dev_priv)	(INTEL_INFO(dev_priv)->is_lp)
  #define IS_GEN9_LP(dev_priv)	(IS_GEN(dev_priv, 9) && IS_LP(dev_priv))
  #define IS_GEN9_BC(dev_priv)	(IS_GEN(dev_priv, 9) && !IS_LP(dev_priv))
* Unmerged path drivers/gpu/drm/i915/display/intel_sprite.c
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
