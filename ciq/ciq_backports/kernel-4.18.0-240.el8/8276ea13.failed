net/mlx5e: Report and recover from CQE with error on RQ

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Aya Levin <ayal@mellanox.com>
commit 8276ea1353a4968a212f04ddf16659223e5408d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8276ea13.failed

Add support for report and recovery from error on completion on RQ by
setting the queue back to ready state. Handle only errors with a
syndrome indicating the RQ might enter error state and could be
recovered.

	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 8276ea1353a4968a212f04ddf16659223e5408d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/health.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/health.h
index cee840e40a05,d3693fa547ac..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/health.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/health.h
@@@ -6,9 -6,48 +6,55 @@@
  
  #include "en.h"
  
++<<<<<<< HEAD
 +int mlx5e_tx_reporter_create(struct mlx5e_priv *priv);
 +void mlx5e_tx_reporter_destroy(struct mlx5e_priv *priv);
 +void mlx5e_tx_reporter_err_cqe(struct mlx5e_txqsq *sq);
 +int mlx5e_tx_reporter_timeout(struct mlx5e_txqsq *sq);
++=======
+ #define MLX5E_RX_ERR_CQE(cqe) (get_cqe_opcode(cqe) != MLX5_CQE_RESP_SEND)
+ 
+ static inline bool cqe_syndrome_needs_recover(u8 syndrome)
+ {
+ 	return syndrome == MLX5_CQE_SYNDROME_LOCAL_LENGTH_ERR ||
+ 	       syndrome == MLX5_CQE_SYNDROME_LOCAL_QP_OP_ERR ||
+ 	       syndrome == MLX5_CQE_SYNDROME_LOCAL_PROT_ERR ||
+ 	       syndrome == MLX5_CQE_SYNDROME_WR_FLUSH_ERR;
+ }
+ 
+ int mlx5e_reporter_tx_create(struct mlx5e_priv *priv);
+ void mlx5e_reporter_tx_destroy(struct mlx5e_priv *priv);
+ void mlx5e_reporter_tx_err_cqe(struct mlx5e_txqsq *sq);
+ int mlx5e_reporter_tx_timeout(struct mlx5e_txqsq *sq);
+ 
+ int mlx5e_reporter_cq_diagnose(struct mlx5e_cq *cq, struct devlink_fmsg *fmsg);
+ int mlx5e_reporter_cq_common_diagnose(struct mlx5e_cq *cq, struct devlink_fmsg *fmsg);
+ int mlx5e_reporter_named_obj_nest_start(struct devlink_fmsg *fmsg, char *name);
+ int mlx5e_reporter_named_obj_nest_end(struct devlink_fmsg *fmsg);
+ 
+ int mlx5e_reporter_rx_create(struct mlx5e_priv *priv);
+ void mlx5e_reporter_rx_destroy(struct mlx5e_priv *priv);
+ void mlx5e_reporter_icosq_cqe_err(struct mlx5e_icosq *icosq);
+ void mlx5e_reporter_rq_cqe_err(struct mlx5e_rq *rq);
+ void mlx5e_reporter_rx_timeout(struct mlx5e_rq *rq);
+ 
+ #define MLX5E_REPORTER_PER_Q_MAX_LEN 256
+ 
+ struct mlx5e_err_ctx {
+ 	int (*recover)(void *ctx);
+ 	void *ctx;
+ };
+ 
+ int mlx5e_health_sq_to_ready(struct mlx5e_channel *channel, u32 sqn);
+ int mlx5e_health_channel_eq_recover(struct mlx5_eq_comp *eq, struct mlx5e_channel *channel);
+ int mlx5e_health_recover_channels(struct mlx5e_priv *priv);
+ int mlx5e_health_report(struct mlx5e_priv *priv,
+ 			struct devlink_health_reporter *reporter, char *err_str,
+ 			struct mlx5e_err_ctx *err_ctx);
+ int mlx5e_health_create_reporters(struct mlx5e_priv *priv);
+ void mlx5e_health_destroy_reporters(struct mlx5e_priv *priv);
+ void mlx5e_health_channels_update(struct mlx5e_priv *priv);
+ 
++>>>>>>> 8276ea1353a4 (net/mlx5e: Report and recover from CQE with error on RQ)
  
  #endif
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 8d26f32a5c2f,7fdea6479ff6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -917,6 -914,8 +925,11 @@@ void mlx5e_deactivate_rq(struct mlx5e_r
  void mlx5e_close_rq(struct mlx5e_rq *rq)
  {
  	cancel_work_sync(&rq->dim.work);
++<<<<<<< HEAD
++=======
+ 	cancel_work_sync(&rq->channel->icosq.recover_work);
+ 	cancel_work_sync(&rq->recover_work);
++>>>>>>> 8276ea1353a4 (net/mlx5e: Report and recover from CQE with error on RQ)
  	mlx5e_destroy_rq(rq);
  	mlx5e_free_rx_descs(rq);
  	mlx5e_free_rq(rq);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 1a04987bcf15,2fd2760d0bb7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -1153,6 -1151,12 +1162,15 @@@ void mlx5e_handle_rx_cqe(struct mlx5e_r
  	wi       = get_frag(rq, ci);
  	cqe_bcnt = be32_to_cpu(cqe->byte_cnt);
  
++<<<<<<< HEAD
++=======
+ 	if (unlikely(MLX5E_RX_ERR_CQE(cqe))) {
+ 		trigger_report(rq, cqe);
+ 		rq->stats->wqe_err++;
+ 		goto free_wqe;
+ 	}
+ 
++>>>>>>> 8276ea1353a4 (net/mlx5e: Report and recover from CQE with error on RQ)
  	skb = INDIRECT_CALL_2(rq->wqe.skb_from_cqe,
  			      mlx5e_skb_from_cqe_linear,
  			      mlx5e_skb_from_cqe_nonlinear,
@@@ -1328,7 -1337,8 +1346,12 @@@ void mlx5e_handle_rx_cqe_mpwrq(struct m
  
  	wi->consumed_strides += cstrides;
  
++<<<<<<< HEAD
 +	if (unlikely(get_cqe_opcode(cqe) != MLX5_CQE_RESP_SEND)) {
++=======
+ 	if (unlikely(MLX5E_RX_ERR_CQE(cqe))) {
+ 		trigger_report(rq, cqe);
++>>>>>>> 8276ea1353a4 (net/mlx5e: Report and recover from CQE with error on RQ)
  		rq->stats->wqe_err++;
  		goto mpwrq_cqe_out;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 84575c0bcca6..bc9ea48a4be8 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -308,6 +308,7 @@ struct mlx5e_dcbx_dp {
 
 enum {
 	MLX5E_RQ_STATE_ENABLED,
+	MLX5E_RQ_STATE_RECOVERING,
 	MLX5E_RQ_STATE_AM,
 	MLX5E_RQ_STATE_NO_CSUM_COMPLETE,
 	MLX5E_RQ_STATE_CSUM_FULL, /* cqe_csum_full hw bit is set */
@@ -678,6 +679,8 @@ struct mlx5e_rq {
 	struct zero_copy_allocator zca;
 	struct xdp_umem       *umem;
 
+	struct work_struct     recover_work;
+
 	/* control */
 	struct mlx5_wq_ctrl    wq_ctrl;
 	__be32                 mkey_be;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/health.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
