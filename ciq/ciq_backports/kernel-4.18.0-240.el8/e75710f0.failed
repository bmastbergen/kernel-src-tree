libperf: Adopt perf_mmap__get() function from tools/perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit e75710f063e29ae7715c57b45eb27c2d504b32ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e75710f0.failed

Move perf_mmap__get() from tools/perf to libperf in the internal header
internal/mmap.h.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20191007125344.14268-6-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e75710f063e29ae7715c57b45eb27c2d504b32ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/lib/mmap.c
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
diff --cc tools/perf/util/mmap.c
index 850493205040,be691b58d8ab..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -101,21 -105,16 +101,25 @@@ union perf_event *perf_mmap__read_event
  	return event;
  }
  
 -static bool perf_mmap__empty(struct mmap *map)
 +static bool perf_mmap__empty(struct perf_mmap *map)
  {
 -	return perf_mmap__read_head(map) == map->core.prev && !map->auxtrace_mmap.base;
 +	return perf_mmap__read_head(map) == map->prev && !map->auxtrace_mmap.base;
  }
  
++<<<<<<< HEAD
 +void perf_mmap__get(struct perf_mmap *map)
 +{
 +	refcount_inc(&map->refcnt);
 +}
 +
 +void perf_mmap__put(struct perf_mmap *map)
++=======
+ void perf_mmap__put(struct mmap *map)
++>>>>>>> e75710f063e2 (libperf: Adopt perf_mmap__get() function from tools/perf)
  {
 -	BUG_ON(map->core.base && refcount_read(&map->core.refcnt) == 0);
 +	BUG_ON(map->base && refcount_read(&map->refcnt) == 0);
  
 -	if (refcount_dec_and_test(&map->core.refcnt))
 +	if (refcount_dec_and_test(&map->refcnt))
  		perf_mmap__munmap(map);
  }
  
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,a73402ee8fe0..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -77,33 -42,32 +77,37 @@@ struct mmap_params 
  	struct auxtrace_mmap_params auxtrace_mp;
  };
  
 -int mmap__mmap(struct mmap *map, struct mmap_params *mp, int fd, int cpu);
 -void perf_mmap__munmap(struct mmap *map);
 +int perf_mmap__mmap(struct perf_mmap *map, struct mmap_params *mp, int fd, int cpu);
 +void perf_mmap__munmap(struct perf_mmap *map);
  
++<<<<<<< HEAD
 +void perf_mmap__get(struct perf_mmap *map);
 +void perf_mmap__put(struct perf_mmap *map);
++=======
+ void perf_mmap__put(struct mmap *map);
++>>>>>>> e75710f063e2 (libperf: Adopt perf_mmap__get() function from tools/perf)
  
 -void perf_mmap__consume(struct mmap *map);
 +void perf_mmap__consume(struct perf_mmap *map);
  
 -static inline u64 perf_mmap__read_head(struct mmap *mm)
 +static inline u64 perf_mmap__read_head(struct perf_mmap *mm)
  {
 -	return ring_buffer_read_head(mm->core.base);
 +	return ring_buffer_read_head(mm->base);
  }
  
 -static inline void perf_mmap__write_tail(struct mmap *md, u64 tail)
 +static inline void perf_mmap__write_tail(struct perf_mmap *md, u64 tail)
  {
 -	ring_buffer_write_tail(md->core.base, tail);
 +	ring_buffer_write_tail(md->base, tail);
  }
  
 -union perf_event *perf_mmap__read_forward(struct mmap *map);
 +union perf_event *perf_mmap__read_forward(struct perf_mmap *map);
  
 -union perf_event *perf_mmap__read_event(struct mmap *map);
 +union perf_event *perf_mmap__read_event(struct perf_mmap *map);
  
 -int perf_mmap__push(struct mmap *md, void *to,
 -		    int push(struct mmap *map, void *to, void *buf, size_t size));
 +int perf_mmap__push(struct perf_mmap *md, void *to,
 +		    int push(struct perf_mmap *map, void *to, void *buf, size_t size));
  
 -size_t mmap__mmap_len(struct mmap *map);
 +size_t perf_mmap__mmap_len(struct perf_mmap *map);
  
 -int perf_mmap__read_init(struct mmap *md);
 -void perf_mmap__read_done(struct mmap *map);
 +int perf_mmap__read_init(struct perf_mmap *md);
 +void perf_mmap__read_done(struct perf_mmap *map);
  #endif /*__PERF_MMAP_H */
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index de0619148499..6adaacfc153d 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -289,7 +289,7 @@ static int record__aio_pushfn(struct perf_mmap *map, void *to, void *buf, size_t
 		 * after started aio request completion or at record__aio_push()
 		 * if the request failed to start.
 		 */
-		perf_mmap__get(map);
+		perf_mmap__get(&map->core);
 	}
 
 	aio->size += size;
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 29a998d183ce..9698648843ad 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -803,7 +803,7 @@ static int perf_evlist__mmap_per_evsel(struct perf_evlist *evlist, int idx,
 			if (ioctl(fd, PERF_EVENT_IOC_SET_OUTPUT, *output) != 0)
 				return -1;
 
-			perf_mmap__get(&maps[idx]);
+			perf_mmap__get(&maps[idx].core);
 		}
 
 		revent = perf_evlist__should_poll(evlist, evsel) ? POLLIN : 0;
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
