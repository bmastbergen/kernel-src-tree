bpf: Introduce BPF_PROG_TYPE_LSM

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author KP Singh <kpsingh@google.com>
commit fc611f47f2188ade2b48ff6902d5cce8baac0c58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fc611f47.failed

Introduce types and configs for bpf programs that can be attached to
LSM hooks. The programs can be enabled by the config option
CONFIG_BPF_LSM.

	Signed-off-by: KP Singh <kpsingh@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Brendan Jackman <jackmanb@google.com>
	Reviewed-by: Florent Revest <revest@google.com>
	Reviewed-by: Thomas Garnier <thgarnie@google.com>
	Acked-by: Yonghong Song <yhs@fb.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: James Morris <jamorris@linux.microsoft.com>
Link: https://lore.kernel.org/bpf/20200329004356.27286-2-kpsingh@chromium.org
(cherry picked from commit fc611f47f2188ade2b48ff6902d5cce8baac0c58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	MAINTAINERS
#	include/linux/bpf_types.h
#	include/uapi/linux/bpf.h
#	kernel/bpf/Makefile
#	kernel/trace/bpf_trace.c
#	tools/include/uapi/linux/bpf.h
#	tools/lib/bpf/libbpf_probes.c
diff --cc MAINTAINERS
index 0470e68e4a05,3197fe9256b2..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -2754,8 -3136,20 +2754,16 @@@ F:	include/uapi/linux/if_bonding.
  BPF (Safe dynamic programs and tools)
  M:	Alexei Starovoitov <ast@kernel.org>
  M:	Daniel Borkmann <daniel@iogearbox.net>
++<<<<<<< HEAD
++=======
+ R:	Martin KaFai Lau <kafai@fb.com>
+ R:	Song Liu <songliubraving@fb.com>
+ R:	Yonghong Song <yhs@fb.com>
+ R:	Andrii Nakryiko <andriin@fb.com>
+ R:	KP Singh <kpsingh@chromium.org>
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  L:	netdev@vger.kernel.org
 -L:	bpf@vger.kernel.org
 +L:	linux-kernel@vger.kernel.org
  T:	git git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git
  T:	git git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git
  Q:	https://patchwork.ozlabs.org/project/netdev/list/?delegate=77147
diff --cc include/linux/bpf_types.h
index eec5aeeeaf92,ba0c2d56f8a3..000000000000
--- a/include/linux/bpf_types.h
+++ b/include/linux/bpf_types.h
@@@ -2,41 -2,78 +2,56 @@@
  /* internal file - do not include directly */
  
  #ifdef CONFIG_NET
 -BPF_PROG_TYPE(BPF_PROG_TYPE_SOCKET_FILTER, sk_filter,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_SCHED_CLS, tc_cls_act,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_SCHED_ACT, tc_cls_act,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_XDP, xdp,
 -	      struct xdp_md, struct xdp_buff)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SOCKET_FILTER, sk_filter)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SCHED_CLS, tc_cls_act)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SCHED_ACT, tc_cls_act)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_XDP, xdp)
  #ifdef CONFIG_CGROUP_BPF
 -BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SKB, cg_skb,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SOCK, cg_sock,
 -	      struct bpf_sock, struct sock)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SOCK_ADDR, cg_sock_addr,
 -	      struct bpf_sock_addr, struct bpf_sock_addr_kern)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SKB, cg_skb)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SOCK, cg_sock)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SOCK_ADDR, cg_sock_addr)
  #endif
 -BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_IN, lwt_in,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_OUT, lwt_out,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_XMIT, lwt_xmit,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_SEG6LOCAL, lwt_seg6local,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_SOCK_OPS, sock_ops,
 -	      struct bpf_sock_ops, struct bpf_sock_ops_kern)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_SK_SKB, sk_skb,
 -	      struct __sk_buff, struct sk_buff)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_SK_MSG, sk_msg,
 -	      struct sk_msg_md, struct sk_msg)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_FLOW_DISSECTOR, flow_dissector,
 -	      struct __sk_buff, struct bpf_flow_dissector)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_IN, lwt_in)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_OUT, lwt_out)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_XMIT, lwt_xmit)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_LWT_SEG6LOCAL, lwt_seg6local)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SOCK_OPS, sock_ops)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SK_SKB, sk_skb)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SK_MSG, sk_msg)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_FLOW_DISSECTOR, flow_dissector)
  #endif
  #ifdef CONFIG_BPF_EVENTS
 -BPF_PROG_TYPE(BPF_PROG_TYPE_KPROBE, kprobe,
 -	      bpf_user_pt_regs_t, struct pt_regs)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_TRACEPOINT, tracepoint,
 -	      __u64, u64)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_PERF_EVENT, perf_event,
 -	      struct bpf_perf_event_data, struct bpf_perf_event_data_kern)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_RAW_TRACEPOINT, raw_tracepoint,
 -	      struct bpf_raw_tracepoint_args, u64)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE, raw_tracepoint_writable,
 -	      struct bpf_raw_tracepoint_args, u64)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_TRACING, tracing,
 -	      void *, void *)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_KPROBE, kprobe)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_TRACEPOINT, tracepoint)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_PERF_EVENT, perf_event)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_RAW_TRACEPOINT, raw_tracepoint)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE, raw_tracepoint_writable)
  #endif
  #ifdef CONFIG_CGROUP_BPF
 -BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_DEVICE, cg_dev,
 -	      struct bpf_cgroup_dev_ctx, struct bpf_cgroup_dev_ctx)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SYSCTL, cg_sysctl,
 -	      struct bpf_sysctl, struct bpf_sysctl_kern)
 -BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SOCKOPT, cg_sockopt,
 -	      struct bpf_sockopt, struct bpf_sockopt_kern)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_DEVICE, cg_dev)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SYSCTL, cg_sysctl)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_SOCKOPT, cg_sockopt)
  #endif
  #ifdef CONFIG_BPF_LIRC_MODE2
 -BPF_PROG_TYPE(BPF_PROG_TYPE_LIRC_MODE2, lirc_mode2,
 -	      __u32, u32)
 +BPF_PROG_TYPE(BPF_PROG_TYPE_LIRC_MODE2, lirc_mode2)
  #endif
  #ifdef CONFIG_INET
++<<<<<<< HEAD
 +BPF_PROG_TYPE(BPF_PROG_TYPE_SK_REUSEPORT, sk_reuseport)
++=======
+ BPF_PROG_TYPE(BPF_PROG_TYPE_SK_REUSEPORT, sk_reuseport,
+ 	      struct sk_reuseport_md, struct sk_reuseport_kern)
+ #endif
+ #if defined(CONFIG_BPF_JIT)
+ BPF_PROG_TYPE(BPF_PROG_TYPE_STRUCT_OPS, bpf_struct_ops,
+ 	      void *, void *)
+ BPF_PROG_TYPE(BPF_PROG_TYPE_EXT, bpf_extension,
+ 	      void *, void *)
+ #ifdef CONFIG_BPF_LSM
+ BPF_PROG_TYPE(BPF_PROG_TYPE_LSM, lsm,
+ 	       void *, void *)
+ #endif /* CONFIG_BPF_LSM */
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  #endif
  
  BPF_MAP_TYPE(BPF_MAP_TYPE_ARRAY, array_map_ops)
diff --cc include/uapi/linux/bpf.h
index c9871d53e313,f1fbc36f58d3..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -175,7 -178,10 +175,14 @@@ enum bpf_prog_type 
  	BPF_PROG_TYPE_CGROUP_SYSCTL,
  	BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
  	BPF_PROG_TYPE_CGROUP_SOCKOPT,
++<<<<<<< HEAD
 +#endif /* __GENKSYMS__ */
++=======
+ 	BPF_PROG_TYPE_TRACING,
+ 	BPF_PROG_TYPE_STRUCT_OPS,
+ 	BPF_PROG_TYPE_EXT,
+ 	BPF_PROG_TYPE_LSM,
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  };
  
  enum bpf_attach_type {
@@@ -203,7 -208,11 +210,15 @@@
  	BPF_CGROUP_UDP6_RECVMSG,
  	BPF_CGROUP_GETSOCKOPT,
  	BPF_CGROUP_SETSOCKOPT,
++<<<<<<< HEAD
 +#endif /* __GENKSYMS__ */
++=======
+ 	BPF_TRACE_RAW_TP,
+ 	BPF_TRACE_FENTRY,
+ 	BPF_TRACE_FEXIT,
+ 	BPF_MODIFY_RETURN,
+ 	BPF_LSM_MAC,
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  	__MAX_BPF_ATTACH_TYPE
  };
  
diff --cc kernel/bpf/Makefile
index e1d9adb212f9,f2d7be596966..000000000000
--- a/kernel/bpf/Makefile
+++ b/kernel/bpf/Makefile
@@@ -25,3 -27,7 +25,10 @@@ endi
  ifeq ($(CONFIG_SYSFS),y)
  obj-$(CONFIG_DEBUG_INFO_BTF) += sysfs_btf.o
  endif
++<<<<<<< HEAD
++=======
+ ifeq ($(CONFIG_BPF_JIT),y)
+ obj-$(CONFIG_BPF_SYSCALL) += bpf_struct_ops.o
+ obj-${CONFIG_BPF_LSM} += bpf_lsm.o
+ endif
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
diff --cc kernel/trace/bpf_trace.c
index 2425aaf4e9d9,37ffceab608f..000000000000
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@@ -702,8 -767,20 +702,25 @@@ static const struct bpf_func_proto bpf_
  	.arg1_type	= ARG_ANYTHING,
  };
  
++<<<<<<< HEAD
 +static const struct bpf_func_proto *
 +tracing_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
++=======
+ BPF_CALL_1(bpf_send_signal_thread, u32, sig)
+ {
+ 	return bpf_send_signal_common(sig, PIDTYPE_PID);
+ }
+ 
+ static const struct bpf_func_proto bpf_send_signal_thread_proto = {
+ 	.func		= bpf_send_signal_thread,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_ANYTHING,
+ };
+ 
+ const struct bpf_func_proto *
+ bpf_tracing_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  {
  	switch (func_id) {
  	case BPF_FUNC_map_lookup_elem:
@@@ -951,8 -1079,10 +968,8 @@@ pe_prog_func_proto(enum bpf_func_id fun
  		return &bpf_get_stack_proto_tp;
  	case BPF_FUNC_perf_prog_read_value:
  		return &bpf_perf_prog_read_value_proto;
 -	case BPF_FUNC_read_branch_records:
 -		return &bpf_read_branch_records_proto;
  	default:
- 		return tracing_func_proto(func_id, prog);
+ 		return bpf_tracing_func_proto(func_id, prog);
  	}
  }
  
diff --cc tools/include/uapi/linux/bpf.h
index 2bc35095902a,f1fbc36f58d3..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -173,6 -178,10 +173,13 @@@ enum bpf_prog_type 
  	BPF_PROG_TYPE_CGROUP_SYSCTL,
  	BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
  	BPF_PROG_TYPE_CGROUP_SOCKOPT,
++<<<<<<< HEAD
++=======
+ 	BPF_PROG_TYPE_TRACING,
+ 	BPF_PROG_TYPE_STRUCT_OPS,
+ 	BPF_PROG_TYPE_EXT,
+ 	BPF_PROG_TYPE_LSM,
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  };
  
  enum bpf_attach_type {
@@@ -199,6 -208,11 +206,14 @@@
  	BPF_CGROUP_UDP6_RECVMSG,
  	BPF_CGROUP_GETSOCKOPT,
  	BPF_CGROUP_SETSOCKOPT,
++<<<<<<< HEAD
++=======
+ 	BPF_TRACE_RAW_TP,
+ 	BPF_TRACE_FENTRY,
+ 	BPF_TRACE_FEXIT,
+ 	BPF_MODIFY_RETURN,
+ 	BPF_LSM_MAC,
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  	__MAX_BPF_ATTACH_TYPE
  };
  
diff --cc tools/lib/bpf/libbpf_probes.c
index 4b0b0364f5fc,2c92059c0c90..000000000000
--- a/tools/lib/bpf/libbpf_probes.c
+++ b/tools/lib/bpf/libbpf_probes.c
@@@ -102,6 -105,10 +102,13 @@@ probe_load(enum bpf_prog_type prog_type
  	case BPF_PROG_TYPE_FLOW_DISSECTOR:
  	case BPF_PROG_TYPE_CGROUP_SYSCTL:
  	case BPF_PROG_TYPE_CGROUP_SOCKOPT:
++<<<<<<< HEAD
++=======
+ 	case BPF_PROG_TYPE_TRACING:
+ 	case BPF_PROG_TYPE_STRUCT_OPS:
+ 	case BPF_PROG_TYPE_EXT:
+ 	case BPF_PROG_TYPE_LSM:
++>>>>>>> fc611f47f218 (bpf: Introduce BPF_PROG_TYPE_LSM)
  	default:
  		break;
  	}
* Unmerged path MAINTAINERS
diff --git a/include/linux/bpf.h b/include/linux/bpf.h
index c1c99fdb999a..8857204461ca 100644
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -1099,6 +1099,9 @@ extern const struct bpf_func_proto bpf_strtol_proto;
 extern const struct bpf_func_proto bpf_strtoul_proto;
 extern const struct bpf_func_proto bpf_tcp_sock_proto;
 
+const struct bpf_func_proto *bpf_tracing_func_proto(
+	enum bpf_func_id func_id, const struct bpf_prog *prog);
+
 /* Shared helpers among cBPF and eBPF. */
 void bpf_user_rnd_init_once(void);
 u64 bpf_user_rnd_u32(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
* Unmerged path include/linux/bpf_types.h
* Unmerged path include/uapi/linux/bpf.h
diff --git a/init/Kconfig b/init/Kconfig
index 3b1ea0bbdb4e..21a3919c06b3 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1469,6 +1469,18 @@ config KALLSYMS_BASE_RELATIVE
 # end of the "standard kernel features (expert users)" menu
 
 # syscall, maps, verifier
+
+config BPF_LSM
+	bool "LSM Instrumentation with BPF"
+	depends on BPF_SYSCALL
+	depends on SECURITY
+	depends on BPF_JIT
+	help
+	  Enables instrumentation of the security hooks with eBPF programs for
+	  implementing dynamic MAC and Audit Policies.
+
+	  If you are unsure how to answer this question, answer N.
+
 config BPF_SYSCALL
 	bool "Enable bpf() system call"
 	select ANON_INODES
* Unmerged path kernel/bpf/Makefile
diff --git a/kernel/bpf/bpf_lsm.c b/kernel/bpf/bpf_lsm.c
new file mode 100644
index 000000000000..82875039ca90
--- /dev/null
+++ b/kernel/bpf/bpf_lsm.c
@@ -0,0 +1,17 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/*
+ * Copyright (C) 2020 Google LLC.
+ */
+
+#include <linux/filter.h>
+#include <linux/bpf.h>
+#include <linux/btf.h>
+
+const struct bpf_prog_ops lsm_prog_ops = {
+};
+
+const struct bpf_verifier_ops lsm_verifier_ops = {
+	.get_func_proto = bpf_tracing_func_proto,
+	.is_valid_access = btf_ctx_access,
+};
* Unmerged path kernel/trace/bpf_trace.c
* Unmerged path tools/include/uapi/linux/bpf.h
* Unmerged path tools/lib/bpf/libbpf_probes.c
