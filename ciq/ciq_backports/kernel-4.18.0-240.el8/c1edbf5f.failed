io_uring: flag SQPOLL busy condition to userspace

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jens Axboe <axboe@kernel.dk>
commit c1edbf5f081be9fbbea68c1d564b773e59c1acf3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c1edbf5f.failed

Now that we have backpressure, for SQPOLL, we have one more condition
that warrants flagging that the application needs to enter the kernel:
we failed to submit IO due to backpressure. Make sure we catch that
and flag it appropriately.

If we run into backpressure issues with the SQPOLL thread, flag it
as such to the application by setting IORING_SQ_NEED_WAKEUP. This will
cause the application to enter the kernel, and that will flush the
backlog and clear the condition.

	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit c1edbf5f081be9fbbea68c1d564b773e59c1acf3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index fca9cdc96d77,912d2648f8db..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -2476,16 -3118,16 +2476,21 @@@ static int io_sq_thread(void *data
  	DEFINE_WAIT(wait);
  	unsigned inflight;
  	unsigned long timeout;
+ 	int ret;
  
 -	complete(&ctx->completions[1]);
 +	complete(&ctx->sqo_thread_started);
  
  	old_fs = get_fs();
  	set_fs(USER_DS);
  
- 	timeout = inflight = 0;
+ 	ret = timeout = inflight = 0;
  	while (!kthread_should_park()) {
++<<<<<<< HEAD
 +		bool all_fixed, mm_fault = false;
 +		int i;
++=======
+ 		unsigned int to_submit;
++>>>>>>> c1edbf5f081b (io_uring: flag SQPOLL busy condition to userspace)
  
  		if (inflight) {
  			unsigned nr_events = 0;
@@@ -2518,7 -3160,13 +2523,17 @@@
  				timeout = jiffies + ctx->sq_thread_idle;
  		}
  
++<<<<<<< HEAD
 +		if (!io_get_sqring(ctx, &sqes[0])) {
++=======
+ 		to_submit = io_sqring_entries(ctx);
+ 
+ 		/*
+ 		 * If submit got -EBUSY, flag us as needing the application
+ 		 * to enter the kernel to reap and flush events.
+ 		 */
+ 		if (!to_submit || ret == -EBUSY) {
++>>>>>>> c1edbf5f081b (io_uring: flag SQPOLL busy condition to userspace)
  			/*
  			 * We're polling. If we're within the defined idle
  			 * period, then let us spin without work before going
@@@ -2549,7 -3200,8 +2567,12 @@@
  			/* make sure to read SQ tail after writing flags */
  			smp_mb();
  
++<<<<<<< HEAD
 +			if (!io_get_sqring(ctx, &sqes[0])) {
++=======
+ 			to_submit = io_sqring_entries(ctx);
+ 			if (!to_submit || ret == -EBUSY) {
++>>>>>>> c1edbf5f081b (io_uring: flag SQPOLL busy condition to userspace)
  				if (kthread_should_park()) {
  					finish_wait(&ctx->sqo_wait, &wait);
  					break;
* Unmerged path fs/io_uring.c
