netfilter: ipset: call ip_set_free() instead of kfree()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Eric Dumazet <edumazet@google.com>
commit c4e8fa9074ad94f80e5c0dcaa16b313e50e958c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c4e8fa90.failed

Whenever ip_set_alloc() is used, allocated memory can either
use kmalloc() or vmalloc(). We should call kvfree() or
ip_set_free()

invalid opcode: 0000 [#1] PREEMPT SMP KASAN
CPU: 0 PID: 21935 Comm: syz-executor.3 Not tainted 5.8.0-rc2-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
RIP: 0010:__phys_addr+0xa7/0x110 arch/x86/mm/physaddr.c:28
Code: 1d 7a 09 4c 89 e3 31 ff 48 d3 eb 48 89 de e8 d0 58 3f 00 48 85 db 75 0d e8 26 5c 3f 00 4c 89 e0 5b 5d 41 5c c3 e8 19 5c 3f 00 <0f> 0b e8 12 5c 3f 00 48 c7 c0 10 10 a8 89 48 ba 00 00 00 00 00 fc
RSP: 0000:ffffc900018572c0 EFLAGS: 00010046
RAX: 0000000000040000 RBX: 0000000000000001 RCX: ffffc9000fac3000
RDX: 0000000000040000 RSI: ffffffff8133f437 RDI: 0000000000000007
RBP: ffffc90098aff000 R08: 0000000000000000 R09: ffff8880ae636cdb
R10: 0000000000000000 R11: 0000000000000000 R12: 0000408018aff000
R13: 0000000000080000 R14: 000000000000001d R15: ffffc900018573d8
FS:  00007fc540c66700(0000) GS:ffff8880ae600000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007fc9dcd67200 CR3: 0000000059411000 CR4: 00000000001406f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 virt_to_head_page include/linux/mm.h:841 [inline]
 virt_to_cache mm/slab.h:474 [inline]
 kfree+0x77/0x2c0 mm/slab.c:3749
 hash_net_create+0xbb2/0xd70 net/netfilter/ipset/ip_set_hash_gen.h:1536
 ip_set_create+0x6a2/0x13c0 net/netfilter/ipset/ip_set_core.c:1128
 nfnetlink_rcv_msg+0xbe8/0xea0 net/netfilter/nfnetlink.c:230
 netlink_rcv_skb+0x15a/0x430 net/netlink/af_netlink.c:2469
 nfnetlink_rcv+0x1ac/0x420 net/netfilter/nfnetlink.c:564
 netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
 netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1329
 netlink_sendmsg+0x856/0xd90 net/netlink/af_netlink.c:1918
 sock_sendmsg_nosec net/socket.c:652 [inline]
 sock_sendmsg+0xcf/0x120 net/socket.c:672
 ____sys_sendmsg+0x6e8/0x810 net/socket.c:2352
 ___sys_sendmsg+0xf3/0x170 net/socket.c:2406
 __sys_sendmsg+0xe5/0x1b0 net/socket.c:2439
 do_syscall_64+0x60/0xe0 arch/x86/entry/common.c:359
 entry_SYSCALL_64_after_hwframe+0x44/0xa9
RIP: 0033:0x45cb19
Code: Bad RIP value.
RSP: 002b:00007fc540c65c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
RAX: ffffffffffffffda RBX: 00000000004fed80 RCX: 000000000045cb19
RDX: 0000000000000000 RSI: 0000000020001080 RDI: 0000000000000003
RBP: 000000000078bf00 R08: 0000000000000000 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
R13: 000000000000095e R14: 00000000004cc295 R15: 00007fc540c666d4

Fixes: f66ee0410b1c ("netfilter: ipset: Fix "INFO: rcu detected stall in hash_xxx" reports")
Fixes: 03c8b234e61a ("netfilter: ipset: Generalize extensions support")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: syzbot <syzkaller@googlegroups.com>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit c4e8fa9074ad94f80e5c0dcaa16b313e50e958c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/ipset/ip_set_hash_gen.h
diff --cc net/netfilter/ipset/ip_set_hash_gen.h
index 987ddccbf272,521e970be402..000000000000
--- a/net/netfilter/ipset/ip_set_hash_gen.h
+++ b/net/netfilter/ipset/ip_set_hash_gen.h
@@@ -587,53 -680,71 +587,62 @@@ retry
  		ret = -ENOMEM;
  		goto out;
  	}
++<<<<<<< HEAD
++=======
+ 	t->hregion = ip_set_alloc(ahash_sizeof_regions(htable_bits));
+ 	if (!t->hregion) {
+ 		ip_set_free(t);
+ 		ret = -ENOMEM;
+ 		goto out;
+ 	}
++>>>>>>> c4e8fa9074ad (netfilter: ipset: call ip_set_free() instead of kfree())
  	t->htable_bits = htable_bits;
 -	t->maxelem = h->maxelem / ahash_numof_locks(htable_bits);
 -	for (i = 0; i < ahash_numof_locks(htable_bits); i++)
 -		spin_lock_init(&t->hregion[i].lock);
  
 -	/* There can't be another parallel resizing,
 -	 * but dumping, gc, kernel side add/del are possible
 -	 */
 -	orig = ipset_dereference_bh_nfnl(h->table);
 +	spin_lock_bh(&set->lock);
 +	orig = __ipset_dereference_protected(h->table, 1);
 +	/* There can't be another parallel resizing, but dumping is possible */
  	atomic_set(&orig->ref, 1);
  	atomic_inc(&orig->uref);
 +	extsize = 0;
  	pr_debug("attempt to resize set %s from %u to %u, t %p\n",
  		 set->name, orig->htable_bits, htable_bits, orig);
 -	for (r = 0; r < ahash_numof_locks(orig->htable_bits); r++) {
 -		/* Expire may replace a hbucket with another one */
 -		rcu_read_lock_bh();
 -		for (i = ahash_bucket_start(r, orig->htable_bits);
 -		     i < ahash_bucket_end(r, orig->htable_bits); i++) {
 -			n = __ipset_dereference(hbucket(orig, i));
 -			if (!n)
 +	for (i = 0; i < jhash_size(orig->htable_bits); i++) {
 +		n = __ipset_dereference_protected(hbucket(orig, i), 1);
 +		if (!n)
 +			continue;
 +		for (j = 0; j < n->pos; j++) {
 +			if (!test_bit(j, n->used))
  				continue;
 -			for (j = 0; j < n->pos; j++) {
 -				if (!test_bit(j, n->used))
 -					continue;
 -				data = ahash_data(n, j, dsize);
 -				if (SET_ELEM_EXPIRED(set, data))
 -					continue;
 +			data = ahash_data(n, j, dsize);
  #ifdef IP_SET_HASH_WITH_NETS
 -				/* We have readers running parallel with us,
 -				 * so the live data cannot be modified.
 -				 */
 -				flags = 0;
 -				memcpy(tmp, data, dsize);
 -				data = tmp;
 -				mtype_data_reset_flags(data, &flags);
 +			/* We have readers running parallel with us,
 +			 * so the live data cannot be modified.
 +			 */
 +			flags = 0;
 +			memcpy(tmp, data, dsize);
 +			data = tmp;
 +			mtype_data_reset_flags(data, &flags);
  #endif
 -				key = HKEY(data, h->initval, htable_bits);
 -				m = __ipset_dereference(hbucket(t, key));
 -				nr = ahash_region(key, htable_bits);
 -				if (!m) {
 -					m = kzalloc(sizeof(*m) +
 +			key = HKEY(data, h->initval, htable_bits);
 +			m = __ipset_dereference_protected(hbucket(t, key), 1);
 +			if (!m) {
 +				m = kzalloc(sizeof(*m) +
  					    AHASH_INIT_SIZE * dsize,
  					    GFP_ATOMIC);
 -					if (!m) {
 -						ret = -ENOMEM;
 -						goto cleanup;
 -					}
 -					m->size = AHASH_INIT_SIZE;
 -					t->hregion[nr].ext_size +=
 -						ext_size(AHASH_INIT_SIZE,
 -							 dsize);
 -					RCU_INIT_POINTER(hbucket(t, key), m);
 -				} else if (m->pos >= m->size) {
 -					struct hbucket *ht;
 -
 -					if (m->size >= AHASH_MAX(h)) {
 -						ret = -EAGAIN;
 -					} else {
 -						ht = kzalloc(sizeof(*ht) +
 +				if (!m) {
 +					ret = -ENOMEM;
 +					goto cleanup;
 +				}
 +				m->size = AHASH_INIT_SIZE;
 +				extsize += ext_size(AHASH_INIT_SIZE, dsize);
 +				RCU_INIT_POINTER(hbucket(t, key), m);
 +			} else if (m->pos >= m->size) {
 +				struct hbucket *ht;
 +
 +				if (m->size >= AHASH_MAX(h)) {
 +					ret = -EAGAIN;
 +				} else {
 +					ht = kzalloc(sizeof(*ht) +
  						(m->size + AHASH_INIT_SIZE)
  						* dsize,
  						GFP_ATOMIC);
@@@ -1300,6 -1531,15 +1309,18 @@@ IPSET_TOKEN(HTYPE, _create)(struct net 
  		kfree(h);
  		return -ENOMEM;
  	}
++<<<<<<< HEAD
++=======
+ 	t->hregion = ip_set_alloc(ahash_sizeof_regions(hbits));
+ 	if (!t->hregion) {
+ 		ip_set_free(t);
+ 		kfree(h);
+ 		return -ENOMEM;
+ 	}
+ 	h->gc.set = set;
+ 	for (i = 0; i < ahash_numof_locks(hbits); i++)
+ 		spin_lock_init(&t->hregion[i].lock);
++>>>>>>> c4e8fa9074ad (netfilter: ipset: call ip_set_free() instead of kfree())
  	h->maxelem = maxelem;
  #ifdef IP_SET_HASH_WITH_NETMASK
  	h->netmask = netmask;
diff --git a/net/netfilter/ipset/ip_set_bitmap_ip.c b/net/netfilter/ipset/ip_set_bitmap_ip.c
index 488d6d05c65c..a8cd9b5ebf9f 100644
--- a/net/netfilter/ipset/ip_set_bitmap_ip.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ip.c
@@ -317,7 +317,7 @@ bitmap_ip_create(struct net *net, struct ip_set *set, struct nlattr *tb[],
 	set->variant = &bitmap_ip;
 	if (!init_map_ip(set, map, first_ip, last_ip,
 			 elements, hosts, netmask)) {
-		kfree(map);
+		ip_set_free(map);
 		return -ENOMEM;
 	}
 	if (tb[IPSET_ATTR_TIMEOUT]) {
diff --git a/net/netfilter/ipset/ip_set_bitmap_ipmac.c b/net/netfilter/ipset/ip_set_bitmap_ipmac.c
index 794e0335a864..f0806e54c31a 100644
--- a/net/netfilter/ipset/ip_set_bitmap_ipmac.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ipmac.c
@@ -367,7 +367,7 @@ bitmap_ipmac_create(struct net *net, struct ip_set *set, struct nlattr *tb[],
 	map->memsize = bitmap_bytes(0, elements - 1);
 	set->variant = &bitmap_ipmac;
 	if (!init_map_ipmac(set, map, first_ip, last_ip, elements)) {
-		kfree(map);
+		ip_set_free(map);
 		return -ENOMEM;
 	}
 	if (tb[IPSET_ATTR_TIMEOUT]) {
diff --git a/net/netfilter/ipset/ip_set_bitmap_port.c b/net/netfilter/ipset/ip_set_bitmap_port.c
index b561ca8b3659..1306961e9174 100644
--- a/net/netfilter/ipset/ip_set_bitmap_port.c
+++ b/net/netfilter/ipset/ip_set_bitmap_port.c
@@ -251,7 +251,7 @@ bitmap_port_create(struct net *net, struct ip_set *set, struct nlattr *tb[],
 	map->memsize = bitmap_bytes(0, map->elements);
 	set->variant = &bitmap_port;
 	if (!init_map_port(set, map, first_port, last_port)) {
-		kfree(map);
+		ip_set_free(map);
 		return -ENOMEM;
 	}
 	if (tb[IPSET_ATTR_TIMEOUT]) {
* Unmerged path net/netfilter/ipset/ip_set_hash_gen.h
