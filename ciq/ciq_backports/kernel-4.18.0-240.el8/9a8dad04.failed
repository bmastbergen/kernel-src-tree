libperf: Add PERF_RECORD_AUXTRACE_INFO 'struct auxtrace_info_event' to perf/event.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 9a8dad0419552934573ddf94d11146faeda465b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9a8dad04.failed

Move the PERF_RECORD_AUXTRACE_INFO event definition to libperf's
event.h.

In order to keep libperf simple, we switch 'u64/u32/u16/u8' types used
events to their generic '__u*' versions.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190828135717.7245-9-jolsa@kernel.org
[ Fix cs_etm__print_auxtrace_info() arg to be __u64 too to fix the CORESIGHT=1 build ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9a8dad0419552934573ddf94d11146faeda465b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/perf/event.h
#	tools/perf/util/event.h
diff --cc tools/perf/lib/include/perf/event.h
index 585c9d82dba3,02da73491451..000000000000
--- a/tools/perf/lib/include/perf/event.h
+++ b/tools/perf/lib/include/perf/event.h
@@@ -104,4 -105,107 +104,110 @@@ struct bpf_event 
  	__u8			 tag[BPF_TAG_SIZE];  // prog tag
  };
  
++<<<<<<< HEAD
++=======
+ struct perf_record_sample {
+ 	struct perf_event_header header;
+ 	__u64			 array[];
+ };
+ 
+ struct attr_event {
+ 	struct perf_event_header header;
+ 	struct perf_event_attr	 attr;
+ 	__u64			 id[];
+ };
+ 
+ enum {
+ 	PERF_CPU_MAP__CPUS = 0,
+ 	PERF_CPU_MAP__MASK = 1,
+ };
+ 
+ struct cpu_map_entries {
+ 	__u16			 nr;
+ 	__u16			 cpu[];
+ };
+ 
+ struct cpu_map_mask {
+ 	__u16			 nr;
+ 	__u16			 long_size;
+ 	unsigned long		 mask[];
+ };
+ 
+ struct cpu_map_data {
+ 	__u16			 type;
+ 	char			 data[];
+ };
+ 
+ struct cpu_map_event {
+ 	struct perf_event_header header;
+ 	struct cpu_map_data	 data;
+ };
+ 
+ enum {
+ 	PERF_EVENT_UPDATE__UNIT  = 0,
+ 	PERF_EVENT_UPDATE__SCALE = 1,
+ 	PERF_EVENT_UPDATE__NAME  = 2,
+ 	PERF_EVENT_UPDATE__CPUS  = 3,
+ };
+ 
+ struct event_update_event_cpus {
+ 	struct cpu_map_data	 cpus;
+ };
+ 
+ struct event_update_event_scale {
+ 	double			 scale;
+ };
+ 
+ struct event_update_event {
+ 	struct perf_event_header header;
+ 	__u64			 type;
+ 	__u64			 id;
+ 	char			 data[];
+ };
+ 
+ #define MAX_EVENT_NAME 64
+ 
+ struct perf_trace_event_type {
+ 	__u64			 event_id;
+ 	char			 name[MAX_EVENT_NAME];
+ };
+ 
+ struct event_type_event {
+ 	struct perf_event_header	 header;
+ 	struct perf_trace_event_type	 event_type;
+ };
+ 
+ struct tracing_data_event {
+ 	struct perf_event_header header;
+ 	__u32			 size;
+ };
+ 
+ struct build_id_event {
+ 	struct perf_event_header header;
+ 	pid_t			 pid;
+ 	__u8			 build_id[24];
+ 	char			 filename[];
+ };
+ 
+ struct id_index_entry {
+ 	__u64			 id;
+ 	__u64			 idx;
+ 	__u64			 cpu;
+ 	__u64			 tid;
+ };
+ 
+ struct id_index_event {
+ 	struct perf_event_header header;
+ 	__u64			 nr;
+ 	struct id_index_entry	 entries[0];
+ };
+ 
+ struct auxtrace_info_event {
+ 	struct perf_event_header header;
+ 	__u32			 type;
+ 	__u32			 reserved__; /* For alignment */
+ 	__u64			 priv[];
+ };
+ 
++>>>>>>> 9a8dad041955 (libperf: Add PERF_RECORD_AUXTRACE_INFO 'struct auxtrace_info_event' to perf/event.h)
  #endif /* __LIBPERF_EVENT_H */
diff --cc tools/perf/util/event.h
index ba0ec1b6aad3,ca2cae332c43..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -342,98 -332,6 +342,101 @@@ struct events_stats 
  	u32 nr_proc_map_timeout;
  };
  
++<<<<<<< HEAD
 +enum {
 +	PERF_CPU_MAP__CPUS = 0,
 +	PERF_CPU_MAP__MASK = 1,
 +};
 +
 +struct cpu_map_entries {
 +	u16	nr;
 +	u16	cpu[];
 +};
 +
 +struct cpu_map_mask {
 +	u16	nr;
 +	u16	long_size;
 +	unsigned long mask[];
 +};
 +
 +struct cpu_map_data {
 +	u16	type;
 +	char	data[];
 +};
 +
 +struct cpu_map_event {
 +	struct perf_event_header	header;
 +	struct cpu_map_data		data;
 +};
 +
 +struct attr_event {
 +	struct perf_event_header header;
 +	struct perf_event_attr attr;
 +	u64 id[];
 +};
 +
 +enum {
 +	PERF_EVENT_UPDATE__UNIT  = 0,
 +	PERF_EVENT_UPDATE__SCALE = 1,
 +	PERF_EVENT_UPDATE__NAME  = 2,
 +	PERF_EVENT_UPDATE__CPUS  = 3,
 +};
 +
 +struct event_update_event_cpus {
 +	struct cpu_map_data cpus;
 +};
 +
 +struct event_update_event_scale {
 +	double scale;
 +};
 +
 +struct event_update_event {
 +	struct perf_event_header header;
 +	u64 type;
 +	u64 id;
 +
 +	char data[];
 +};
 +
 +#define MAX_EVENT_NAME 64
 +
 +struct perf_trace_event_type {
 +	u64	event_id;
 +	char	name[MAX_EVENT_NAME];
 +};
 +
 +struct event_type_event {
 +	struct perf_event_header header;
 +	struct perf_trace_event_type event_type;
 +};
 +
 +struct tracing_data_event {
 +	struct perf_event_header header;
 +	u32 size;
 +};
 +
 +struct id_index_entry {
 +	u64 id;
 +	u64 idx;
 +	u64 cpu;
 +	u64 tid;
 +};
 +
 +struct id_index_event {
 +	struct perf_event_header header;
 +	u64 nr;
 +	struct id_index_entry entries[0];
 +};
 +
 +struct auxtrace_info_event {
 +	struct perf_event_header header;
 +	u32 type;
 +	u32 reserved__; /* For alignment */
 +	u64 priv[];
 +};
 +
++=======
++>>>>>>> 9a8dad041955 (libperf: Add PERF_RECORD_AUXTRACE_INFO 'struct auxtrace_info_event' to perf/event.h)
  struct auxtrace_event {
  	struct perf_event_header header;
  	u64 size;
diff --git a/tools/perf/arch/x86/util/intel-pt.c b/tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4..29ddb8a73ca7 100644
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@ -335,7 +335,7 @@ static int intel_pt_info_fill(struct auxtrace_record *itr,
 	unsigned long max_non_turbo_ratio;
 	size_t filter_str_len;
 	const char *filter;
-	u64 *info;
+	__u64 *info;
 	int err;
 
 	if (priv_size != ptr->priv_size)
* Unmerged path tools/perf/lib/include/perf/event.h
diff --git a/tools/perf/util/arm-spe.c b/tools/perf/util/arm-spe.c
index a314e5b26e9d..cd26315bc9aa 100644
--- a/tools/perf/util/arm-spe.c
+++ b/tools/perf/util/arm-spe.c
@@ -181,7 +181,7 @@ static const char * const arm_spe_info_fmts[] = {
 	[ARM_SPE_PMU_TYPE]		= "  PMU Type           %"PRId64"\n",
 };
 
-static void arm_spe_print_info(u64 *arr)
+static void arm_spe_print_info(__u64 *arr)
 {
 	if (!dump_trace)
 		return;
diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index d7ad43911473..9665c7101e80 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -2371,7 +2371,7 @@ static const char * const cs_etmv4_priv_fmts[] = {
 	[CS_ETMV4_TRCAUTHSTATUS] = "	TRCAUTHSTATUS		       %llx\n",
 };
 
-static void cs_etm__print_auxtrace_info(u64 *val, int num)
+static void cs_etm__print_auxtrace_info(__u64 *val, int num)
 {
 	int i, j, cpu = 0;
 
* Unmerged path tools/perf/util/event.h
diff --git a/tools/perf/util/intel-bts.c b/tools/perf/util/intel-bts.c
index 278498772e84..23a65b6e161c 100644
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@ -843,7 +843,7 @@ static const char * const intel_bts_info_fmts[] = {
 	[INTEL_BTS_SNAPSHOT_MODE]	= "  Snapshot mode      %"PRId64"\n",
 };
 
-static void intel_bts_print_info(u64 *arr, int start, int finish)
+static void intel_bts_print_info(__u64 *arr, int start, int finish)
 {
 	int i;
 
diff --git a/tools/perf/util/intel-pt.c b/tools/perf/util/intel-pt.c
index c05fafa87b14..d85e9d1dfa8b 100644
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@ -3037,7 +3037,7 @@ static const char * const intel_pt_info_fmts[] = {
 	[INTEL_PT_FILTER_STR_LEN]	= "  Filter string len.  %"PRIu64"\n",
 };
 
-static void intel_pt_print_info(u64 *arr, int start, int finish)
+static void intel_pt_print_info(__u64 *arr, int start, int finish)
 {
 	int i;
 
@@ -3069,7 +3069,7 @@ int intel_pt_process_auxtrace_info(union perf_event *event,
 	size_t min_sz = sizeof(u64) * INTEL_PT_PER_CPU_MMAPS;
 	struct intel_pt *pt;
 	void *info_end;
-	u64 *info;
+	__u64 *info;
 	int err;
 
 	if (auxtrace_info->header.size < sizeof(struct auxtrace_info_event) +
