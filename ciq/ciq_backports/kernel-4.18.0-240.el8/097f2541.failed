context_tracking: Introduce context_tracking_enabled_cpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Frederic Weisbecker <frederic@kernel.org>
commit 097f2541c6e51e0c1cdb1e6d46ef08a624336518
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/097f2541.failed

This allows us to check if a remote CPU runs context tracking
(ie: is nohz_full). We'll need that to reliably support "nice"
accounting on kcpustat.

	Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Jacek Anaszewski <jacek.anaszewski@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Pavel Machek <pavel@ucw.cz>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rafael J . Wysocki <rjw@rjwysocki.net>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Viresh Kumar <viresh.kumar@linaro.org>
	Cc: Wanpeng Li <wanpengli@tencent.com>
	Cc: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
Link: https://lkml.kernel.org/r/20191016025700.31277-8-frederic@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 097f2541c6e51e0c1cdb1e6d46ef08a624336518)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/context_tracking_state.h
diff --cc include/linux/context_tracking_state.h
index f128dc3be0df,587717705727..000000000000
--- a/include/linux/context_tracking_state.h
+++ b/include/linux/context_tracking_state.h
@@@ -23,15 -23,20 +23,24 @@@ struct context_tracking 
  };
  
  #ifdef CONFIG_CONTEXT_TRACKING
 -extern struct static_key_false context_tracking_key;
 +extern struct static_key_false context_tracking_enabled;
  DECLARE_PER_CPU(struct context_tracking, context_tracking);
  
 -static inline bool context_tracking_enabled(void)
 +static inline bool context_tracking_is_enabled(void)
  {
 -	return static_branch_unlikely(&context_tracking_key);
 +	return static_branch_unlikely(&context_tracking_enabled);
  }
  
++<<<<<<< HEAD
 +static inline bool context_tracking_cpu_is_enabled(void)
++=======
+ static inline bool context_tracking_enabled_cpu(int cpu)
+ {
+ 	return per_cpu(context_tracking.active, cpu);
+ }
+ 
+ static inline bool context_tracking_enabled_this_cpu(void)
++>>>>>>> 097f2541c6e5 (context_tracking: Introduce context_tracking_enabled_cpu())
  {
  	return __this_cpu_read(context_tracking.active);
  }
@@@ -42,9 -47,9 +51,15 @@@ static inline bool context_tracking_in_
  }
  #else
  static inline bool context_tracking_in_user(void) { return false; }
++<<<<<<< HEAD
 +static inline bool context_tracking_active(void) { return false; }
 +static inline bool context_tracking_is_enabled(void) { return false; }
 +static inline bool context_tracking_cpu_is_enabled(void) { return false; }
++=======
+ static inline bool context_tracking_enabled(void) { return false; }
+ static inline bool context_tracking_enabled_cpu(int cpu) { return false; }
+ static inline bool context_tracking_enabled_this_cpu(void) { return false; }
++>>>>>>> 097f2541c6e5 (context_tracking: Introduce context_tracking_enabled_cpu())
  #endif /* CONFIG_CONTEXT_TRACKING */
  
  #endif
* Unmerged path include/linux/context_tracking_state.h
