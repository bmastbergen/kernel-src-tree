thermal: cpu_cooling: Switch to QoS requests for freq limits

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 5130802ddbb10a73cf17d1117e2044c8d5ba7d65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5130802d.failed

The cpufreq core now takes the min/max frequency constraints via QoS
requests and the CPUFREQ_ADJUST notifier shall get removed later on.

Switch over to using the QoS request for maximum frequency constraint
for cpu_cooling driver.

	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
[ rjw: Subject ]
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 5130802ddbb10a73cf17d1117e2044c8d5ba7d65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/thermal/cpu_cooling.c
diff --cc drivers/thermal/cpu_cooling.c
index dfd23245f778,391f39776c6a..000000000000
--- a/drivers/thermal/cpu_cooling.c
+++ b/drivers/thermal/cpu_cooling.c
@@@ -96,10 -83,8 +95,9 @@@ struct cpufreq_cooling_device 
  	int id;
  	u32 last_load;
  	unsigned int cpufreq_state;
- 	unsigned int clipped_freq;
  	unsigned int max_level;
  	struct freq_table *freq_table;	/* In descending order */
 +	struct thermal_cooling_device *cdev;
  	struct cpufreq_policy *policy;
  	struct list_head node;
  	struct time_in_idle *idle_time;
@@@ -690,14 -628,9 +644,16 @@@ __cpufreq_cooling_register(struct devic
  	cdev = thermal_of_cooling_device_register(np, dev_name, cpufreq_cdev,
  						  cooling_ops);
  	if (IS_ERR(cdev))
++<<<<<<< HEAD
 +		goto remove_ida;
 +
 +	cpufreq_cdev->clipped_freq = cpufreq_cdev->freq_table[0].frequency;
 +	cpufreq_cdev->cdev = cdev;
++=======
+ 		goto remove_qos_req;
++>>>>>>> 5130802ddbb1 (thermal: cpu_cooling: Switch to QoS requests for freq limits)
  
  	mutex_lock(&cooling_list_lock);
- 	/* Register the notifier for first cpufreq cooling device */
- 	first = list_empty(&cpufreq_cdev_list);
  	list_add(&cpufreq_cdev->node, &cpufreq_cdev_list);
  	mutex_unlock(&cooling_list_lock);
  
@@@ -803,15 -733,10 +756,18 @@@ void cpufreq_cooling_unregister(struct 
  
  	mutex_lock(&cooling_list_lock);
  	list_del(&cpufreq_cdev->node);
- 	/* Unregister the notifier for the last cpufreq cooling device */
- 	last = list_empty(&cpufreq_cdev_list);
  	mutex_unlock(&cooling_list_lock);
  
++<<<<<<< HEAD
 +	if (last)
 +		cpufreq_unregister_notifier(&thermal_cpufreq_notifier_block,
 +					    CPUFREQ_POLICY_NOTIFIER);
 +
 +	thermal_cooling_device_unregister(cpufreq_cdev->cdev);
++=======
+ 	thermal_cooling_device_unregister(cdev);
+ 	dev_pm_qos_remove_request(&cpufreq_cdev->qos_req);
++>>>>>>> 5130802ddbb1 (thermal: cpu_cooling: Switch to QoS requests for freq limits)
  	ida_simple_remove(&cpufreq_ida, cpufreq_cdev->id);
  	kfree(cpufreq_cdev->idle_time);
  	kfree(cpufreq_cdev->freq_table);
* Unmerged path drivers/thermal/cpu_cooling.c
