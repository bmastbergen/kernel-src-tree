perf tools: Move event synthesizing routines to separate header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ea49e01cfabd73c94a61649cd04fa524a2beff3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ea49e01c.failed

Those are the only routines using the perf_event__handler_t typedef and
are all related, so move to a separate header to reduce the header
dependency tree, lots of places were getting event.h and even stdio.h,
limits.h indirectly, so fix those as well.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-yvx9u1mf7baq6cu1abfhbqgs@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ea49e01cfabd73c94a61649cd04fa524a2beff3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/x86/util/archinsn.c
#	tools/perf/builtin-stat.c
#	tools/perf/builtin-top.c
#	tools/perf/tests/code-reading.c
#	tools/perf/tests/event_update.c
#	tools/perf/tests/hists_common.c
#	tools/perf/tests/thread-map.c
#	tools/perf/util/auxtrace.h
#	tools/perf/util/bpf-event.c
#	tools/perf/util/bpf-event.h
#	tools/perf/util/callchain.c
#	tools/perf/util/event.c
#	tools/perf/util/event.h
#	tools/perf/util/machine.c
#	tools/perf/util/machine.h
#	tools/perf/util/session.c
#	tools/perf/util/session.h
diff --cc tools/perf/arch/x86/util/archinsn.c
index 62e8e1820132,3e6791531ca5..000000000000
--- a/tools/perf/arch/x86/util/archinsn.c
+++ b/tools/perf/arch/x86/util/archinsn.c
@@@ -1,6 -1,7 +1,10 @@@
  // SPDX-License-Identifier: GPL-2.0
 -#include "../../../../arch/x86/include/asm/insn.h"
  #include "archinsn.h"
++<<<<<<< HEAD
 +#include "util/intel-pt-decoder/insn.h"
++=======
+ #include "event.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "machine.h"
  #include "thread.h"
  #include "symbol.h"
diff --cc tools/perf/builtin-stat.c
index b71c4390d333,eece3d1e429a..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -63,6 -61,9 +63,12 @@@
  #include "util/tool.h"
  #include "util/string2.h"
  #include "util/metricgroup.h"
++<<<<<<< HEAD
++=======
+ #include "util/synthetic-events.h"
+ #include "util/target.h"
+ #include "util/time-utils.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "util/top.h"
  #include "asm/bug.h"
  
diff --cc tools/perf/builtin-top.c
index 95aec2602043,b052470f89b4..000000000000
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@@ -32,9 -32,9 +32,13 @@@
  #include "util/map.h"
  #include "util/session.h"
  #include "util/symbol.h"
++<<<<<<< HEAD
 +#include "util/thread.h"
 +#include "util/thread_map.h"
++=======
+ #include "util/synthetic-events.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "util/top.h"
 -#include "util/util.h"
  #include <linux/rbtree.h>
  #include <subcmd/parse-options.h>
  #include "util/parse-events.h"
diff --cc tools/perf/tests/code-reading.c
index aa6df122b175,fd02c1f1d976..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -18,6 -23,8 +18,11 @@@
  #include "map.h"
  #include "symbol.h"
  #include "event.h"
++<<<<<<< HEAD
++=======
+ #include "record.h"
+ #include "util/synthetic-events.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "thread.h"
  
  #include "tests.h"
diff --cc tools/perf/tests/event_update.c
index f14dcd613438,4bb772e2b73d..000000000000
--- a/tools/perf/tests/event_update.c
+++ b/tools/perf/tests/event_update.c
@@@ -1,8 -1,14 +1,13 @@@
  // SPDX-License-Identifier: GPL-2.0
  #include <linux/compiler.h>
 -#include <perf/cpumap.h>
 -#include <string.h>
 -#include "cpumap.h"
  #include "evlist.h"
  #include "evsel.h"
 -#include "header.h"
  #include "machine.h"
++<<<<<<< HEAD
++=======
+ #include "util/synthetic-events.h"
+ #include "tool.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "tests.h"
  #include "debug.h"
  
diff --cc tools/perf/tests/hists_common.c
index 65d7b1b24c81,6f34d08b84e5..000000000000
--- a/tools/perf/tests/hists_common.c
+++ b/tools/perf/tests/hists_common.c
@@@ -1,6 -1,8 +1,11 @@@
  // SPDX-License-Identifier: GPL-2.0
  #include <inttypes.h>
  #include "util/debug.h"
++<<<<<<< HEAD
++=======
+ #include "util/dso.h"
+ #include "util/event.h" // struct perf_sample
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "util/map.h"
  #include "util/symbol.h"
  #include "util/sort.h"
diff --cc tools/perf/tests/thread-map.c
index ccc17aced49e,28f51c4bd373..000000000000
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@@ -6,7 -7,14 +6,12 @@@
  #include "tests.h"
  #include "thread_map.h"
  #include "debug.h"
++<<<<<<< HEAD
++=======
+ #include "event.h"
+ #include "util/synthetic-events.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include <linux/zalloc.h>
 -#include <perf/event.h>
 -
 -struct perf_sample;
 -struct perf_tool;
 -struct machine;
  
  #define NAME	(const char *) "perf"
  #define NAMEUL	(unsigned long) NAME
diff --cc tools/perf/util/auxtrace.h
index 1a3ea1523cb0,b110aec1da4d..000000000000
--- a/tools/perf/util/auxtrace.h
+++ b/tools/perf/util/auxtrace.h
@@@ -24,23 -16,25 +25,31 @@@
  #include <linux/perf_event.h>
  #include <linux/types.h>
  #include <asm/bitsperlong.h>
 -#include <asm/barrier.h>
  
++<<<<<<< HEAD
 +#include "../perf.h"
 +#include "event.h"
 +#include "session.h"
 +#include "debug.h"
 +
++=======
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  union perf_event;
  struct perf_session;
 -struct evlist;
 +struct perf_evlist;
  struct perf_tool;
  struct perf_mmap;
  struct perf_sample;
  struct option;
  struct record_opts;
++<<<<<<< HEAD
 +struct auxtrace_info_event;
++=======
+ struct perf_record_auxtrace_error;
+ struct perf_record_auxtrace_info;
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  struct events_stats;
  
 -enum auxtrace_error_type {
 -       PERF_AUXTRACE_ERROR_ITRACE  = 1,
 -       PERF_AUXTRACE_ERROR_MAX
 -};
 -
  /* Auxtrace records must have the same alignment as perf event records */
  #define PERF_AUXTRACE_RECORD_ALIGNMENT 8
  
@@@ -638,18 -601,9 +643,9 @@@ void auxtrace_record__free(struct auxtr
  {
  }
  
- static inline int
- perf_event__synthesize_auxtrace_info(struct auxtrace_record *itr __maybe_unused,
- 				     struct perf_tool *tool __maybe_unused,
- 				     struct perf_session *session __maybe_unused,
- 				     perf_event__handler_t process __maybe_unused)
- {
- 	return -EINVAL;
- }
- 
  static inline
  int auxtrace_record__options(struct auxtrace_record *itr __maybe_unused,
 -			     struct evlist *evlist __maybe_unused,
 +			     struct perf_evlist *evlist __maybe_unused,
  			     struct record_opts *opts __maybe_unused)
  {
  	return 0;
diff --cc tools/perf/util/bpf-event.c
index 2a4a0da35632,f7ed5d122e22..000000000000
--- a/tools/perf/util/bpf-event.c
+++ b/tools/perf/util/bpf-event.c
@@@ -14,6 -15,8 +14,11 @@@
  #include "session.h"
  #include "map.h"
  #include "evlist.h"
++<<<<<<< HEAD
++=======
+ #include "record.h"
+ #include "util/synthetic-events.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  
  #define ptr_to_u64(ptr)    ((__u64)(unsigned long)(ptr))
  
diff --cc tools/perf/util/bpf-event.h
index 04c33b3bfe28,81fdc88e6c1a..000000000000
--- a/tools/perf/util/bpf-event.h
+++ b/tools/perf/util/bpf-event.h
@@@ -30,35 -31,22 +30,45 @@@ struct btf_node 
  };
  
  #ifdef HAVE_LIBBPF_SUPPORT
++<<<<<<< HEAD
 +int machine__process_bpf_event(struct machine *machine, union perf_event *event,
 +			       struct perf_sample *sample);
 +
 +int perf_event__synthesize_bpf_events(struct perf_session *session,
 +				      perf_event__handler_t process,
 +				      struct machine *machine,
 +				      struct record_opts *opts);
 +int bpf_event__add_sb_event(struct perf_evlist **evlist,
++=======
+ int machine__process_bpf(struct machine *machine, union perf_event *event,
+ 			 struct perf_sample *sample);
+ int bpf_event__add_sb_event(struct evlist **evlist,
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  				 struct perf_env *env);
  void bpf_event__print_bpf_prog_info(struct bpf_prog_info *info,
  				    struct perf_env *env,
  				    FILE *fp);
  #else
 -static inline int machine__process_bpf(struct machine *machine __maybe_unused,
 -				       union perf_event *event __maybe_unused,
 -				       struct perf_sample *sample __maybe_unused)
 +static inline int machine__process_bpf_event(struct machine *machine __maybe_unused,
 +					     union perf_event *event __maybe_unused,
 +					     struct perf_sample *sample __maybe_unused)
 +{
 +	return 0;
 +}
 +
++<<<<<<< HEAD
 +static inline int perf_event__synthesize_bpf_events(struct perf_session *session __maybe_unused,
 +						    perf_event__handler_t process __maybe_unused,
 +						    struct machine *machine __maybe_unused,
 +						    struct record_opts *opts __maybe_unused)
  {
  	return 0;
  }
  
 +static inline int bpf_event__add_sb_event(struct perf_evlist **evlist __maybe_unused,
++=======
+ static inline int bpf_event__add_sb_event(struct evlist **evlist __maybe_unused,
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  					  struct perf_env *env __maybe_unused)
  {
  	return 0;
diff --cc tools/perf/util/callchain.c
index ec1fd070380a,9a9b56ed3f0a..000000000000
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@@ -21,6 -22,8 +21,11 @@@
  #include "asm/bug.h"
  
  #include "debug.h"
++<<<<<<< HEAD
++=======
+ #include "dso.h"
+ #include "event.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "hist.h"
  #include "sort.h"
  #include "machine.h"
diff --cc tools/perf/util/event.c
index cd16181746f7,043a08fc7398..000000000000
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@@ -28,6 -32,9 +28,12 @@@
  #include "stat.h"
  #include "session.h"
  #include "bpf-event.h"
++<<<<<<< HEAD
++=======
+ #include "synthetic-events.h"
+ #include "tool.h"
+ #include "../perf.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  
  #define DEFAULT_PROC_MAP_PARSE_TIMEOUT 500
  
diff --cc tools/perf/util/event.h
index ba0ec1b6aad3,a0a0c91cde4a..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -529,116 -277,15 +529,126 @@@ enum 
  	PERF_STAT_ROUND_TYPE__FINAL	= 1,
  };
  
 +struct stat_round_event {
 +	struct perf_event_header	header;
 +	u64				type;
 +	u64				time;
 +};
 +
 +struct time_conv_event {
 +	struct perf_event_header header;
 +	u64 time_shift;
 +	u64 time_mult;
 +	u64 time_zero;
 +};
 +
 +struct feature_event {
 +	struct perf_event_header 	header;
 +	u64				feat_id;
 +	char				data[];
 +};
 +
 +struct compressed_event {
 +	struct perf_event_header	header;
 +	char				data[];
 +};
 +
 +union perf_event {
 +	struct perf_event_header	header;
 +	struct mmap_event		mmap;
 +	struct mmap2_event		mmap2;
 +	struct comm_event		comm;
 +	struct namespaces_event		namespaces;
 +	struct fork_event		fork;
 +	struct lost_event		lost;
 +	struct lost_samples_event	lost_samples;
 +	struct read_event		read;
 +	struct throttle_event		throttle;
 +	struct sample_event		sample;
 +	struct attr_event		attr;
 +	struct event_update_event	event_update;
 +	struct event_type_event		event_type;
 +	struct tracing_data_event	tracing_data;
 +	struct build_id_event		build_id;
 +	struct id_index_event		id_index;
 +	struct auxtrace_info_event	auxtrace_info;
 +	struct auxtrace_event		auxtrace;
 +	struct auxtrace_error_event	auxtrace_error;
 +	struct aux_event		aux;
 +	struct itrace_start_event	itrace_start;
 +	struct context_switch_event	context_switch;
 +	struct thread_map_event		thread_map;
 +	struct cpu_map_event		cpu_map;
 +	struct stat_config_event	stat_config;
 +	struct stat_event		stat;
 +	struct stat_round_event		stat_round;
 +	struct time_conv_event		time_conv;
 +	struct feature_event		feat;
 +	struct ksymbol_event		ksymbol_event;
 +	struct bpf_event		bpf_event;
 +	struct compressed_event		pack;
 +};
 +
  void perf_event__print_totals(void);
  
++<<<<<<< HEAD
 +struct perf_tool;
 +struct thread_map;
 +struct cpu_map;
++=======
+ struct perf_cpu_map;
+ struct perf_record_stat_config;
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  struct perf_stat_config;
- struct perf_counts_values;
+ struct perf_tool;
  
++<<<<<<< HEAD
 +typedef int (*perf_event__handler_t)(struct perf_tool *tool,
 +				     union perf_event *event,
 +				     struct perf_sample *sample,
 +				     struct machine *machine);
 +
 +int perf_event__synthesize_thread_map(struct perf_tool *tool,
 +				      struct thread_map *threads,
 +				      perf_event__handler_t process,
 +				      struct machine *machine, bool mmap_data);
 +int perf_event__synthesize_thread_map2(struct perf_tool *tool,
 +				      struct thread_map *threads,
 +				      perf_event__handler_t process,
 +				      struct machine *machine);
 +int perf_event__synthesize_cpu_map(struct perf_tool *tool,
 +				   struct cpu_map *cpus,
 +				   perf_event__handler_t process,
 +				   struct machine *machine);
 +int perf_event__synthesize_threads(struct perf_tool *tool,
 +				   perf_event__handler_t process,
 +				   struct machine *machine, bool mmap_data,
 +				   unsigned int nr_threads_synthesize);
 +int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
 +				       perf_event__handler_t process,
 +				       struct machine *machine);
 +int perf_event__synthesize_stat_config(struct perf_tool *tool,
 +				       struct perf_stat_config *config,
 +				       perf_event__handler_t process,
 +				       struct machine *machine);
 +void perf_event__read_stat_config(struct perf_stat_config *config,
 +				  struct stat_config_event *event);
 +int perf_event__synthesize_stat(struct perf_tool *tool,
 +				u32 cpu, u32 thread, u64 id,
 +				struct perf_counts_values *count,
 +				perf_event__handler_t process,
 +				struct machine *machine);
 +int perf_event__synthesize_stat_round(struct perf_tool *tool,
 +				      u64 time, u64 type,
 +				      perf_event__handler_t process,
 +				      struct machine *machine);
 +int perf_event__synthesize_modules(struct perf_tool *tool,
 +				   perf_event__handler_t process,
 +				   struct machine *machine);
++=======
+ void perf_event__read_stat_config(struct perf_stat_config *config,
+ 				  struct perf_record_stat_config *event);
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  
  int perf_event__process_comm(struct perf_tool *tool,
  			     union perf_event *event,
@@@ -688,14 -335,10 +698,21 @@@ int perf_event__process_ksymbol(struct 
  				union perf_event *event,
  				struct perf_sample *sample,
  				struct machine *machine);
++<<<<<<< HEAD
 +int perf_event__process_bpf_event(struct perf_tool *tool,
 +				  union perf_event *event,
 +				  struct perf_sample *sample,
 +				  struct machine *machine);
 +int perf_tool__process_synth_event(struct perf_tool *tool,
 +				   union perf_event *event,
 +				   struct machine *machine,
 +				   perf_event__handler_t process);
++=======
+ int perf_event__process_bpf(struct perf_tool *tool,
+ 			    union perf_event *event,
+ 			    struct perf_sample *sample,
+ 			    struct machine *machine);
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  int perf_event__process(struct perf_tool *tool,
  			union perf_event *event,
  			struct perf_sample *sample,
diff --cc tools/perf/util/machine.c
index d0790082f28d,132de5cfb9b9..000000000000
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@@ -14,6 -20,8 +14,11 @@@
  #include "symbol.h"
  #include "sort.h"
  #include "strlist.h"
++<<<<<<< HEAD
++=======
+ #include "util/synthetic-events.h"
+ #include "target.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "thread.h"
  #include "util.h"
  #include "vdso.h"
diff --cc tools/perf/util/machine.h
index 7aa38da26427,18e13c0ccd6a..000000000000
--- a/tools/perf/util/machine.h
+++ b/tools/perf/util/machine.h
@@@ -5,8 -5,7 +5,12 @@@
  #include <sys/types.h>
  #include <linux/rbtree.h>
  #include "map_groups.h"
++<<<<<<< HEAD
 +#include "dso.h"
 +#include "event.h"
++=======
+ #include "dsos.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "rwsem.h"
  
  struct addr_location;
@@@ -250,20 -251,6 +254,23 @@@ int machines__for_each_thread(struct ma
  			      int (*fn)(struct thread *thread, void *p),
  			      void *priv);
  
++<<<<<<< HEAD
 +int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
 +				  struct target *target, struct thread_map *threads,
 +				  perf_event__handler_t process, bool data_mmap,
 +				  unsigned int nr_threads_synthesize);
 +static inline
 +int machine__synthesize_threads(struct machine *machine, struct target *target,
 +				struct thread_map *threads, bool data_mmap,
 +				unsigned int nr_threads_synthesize)
 +{
 +	return __machine__synthesize_threads(machine, NULL, target, threads,
 +					     perf_event__process, data_mmap,
 +					     nr_threads_synthesize);
 +}
 +
++=======
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  pid_t machine__get_current_tid(struct machine *machine, int cpu);
  int machine__set_current_tid(struct machine *machine, int cpu, pid_t pid,
  			     pid_t tid);
diff --cc tools/perf/util/session.c
index 82adeb8dfbcf,6267613b551d..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -27,8 -29,12 +27,15 @@@
  #include "thread-stack.h"
  #include "sample-raw.h"
  #include "stat.h"
++<<<<<<< HEAD
++=======
+ #include "util/synthetic-events.h"
+ #include "util.h"
+ #include "ui/progress.h"
+ #include "../perf.h"
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #include "arch/common.h"
 -#include <internal/lib.h>
 +#include <linux/err.h>
  
  #ifdef HAVE_ZSTD_SUPPORT
  static int perf_session__process_compressed_event(struct perf_session *session,
diff --cc tools/perf/util/session.h
index 863dbad87849,b4c9428c18f0..000000000000
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@@ -138,9 -138,4 +138,12 @@@ int perf_session__deliver_synth_event(s
  int perf_event__process_id_index(struct perf_session *session,
  				 union perf_event *event);
  
++<<<<<<< HEAD
 +int perf_event__synthesize_id_index(struct perf_tool *tool,
 +				    perf_event__handler_t process,
 +				    struct perf_evlist *evlist,
 +				    struct machine *machine);
 +
++=======
++>>>>>>> ea49e01cfabd (perf tools: Move event synthesizing routines to separate header)
  #endif /* __PERF_SESSION_H */
* Unmerged path tools/perf/arch/x86/util/archinsn.c
diff --git a/tools/perf/arch/x86/util/event.c b/tools/perf/arch/x86/util/event.c
index a3a0b6884779..d357c625c09f 100644
--- a/tools/perf/arch/x86/util/event.c
+++ b/tools/perf/arch/x86/util/event.c
@@ -3,6 +3,8 @@
 #include <linux/string.h>
 #include <linux/zalloc.h>
 
+#include "../../util/event.h"
+#include "../../util/synthetic-events.h"
 #include "../../util/machine.h"
 #include "../../util/tool.h"
 #include "../../util/map.h"
diff --git a/tools/perf/arch/x86/util/machine.c b/tools/perf/arch/x86/util/machine.c
index 1e9ec783b9a1..dc67565fa016 100644
--- a/tools/perf/arch/x86/util/machine.c
+++ b/tools/perf/arch/x86/util/machine.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/types.h>
 #include <linux/string.h>
+#include <limits.h>
 #include <stdlib.h>
 
 #include "../../util/util.h"
diff --git a/tools/perf/arch/x86/util/tsc.c b/tools/perf/arch/x86/util/tsc.c
index bb814e5f6300..bbe4d1e7f98a 100644
--- a/tools/perf/arch/x86/util/tsc.c
+++ b/tools/perf/arch/x86/util/tsc.c
@@ -7,6 +7,8 @@
 
 #include <linux/types.h>
 #include "../../../util/debug.h"
+#include "../../../util/event.h"
+#include "../../../util/synthetic-events.h"
 #include "../../../util/tsc.h"
 
 int perf_read_tsc_conversion(const struct perf_event_mmap_page *pc,
diff --git a/tools/perf/builtin-inject.c b/tools/perf/builtin-inject.c
index 6d015423b15d..5e5f151257cf 100644
--- a/tools/perf/builtin-inject.c
+++ b/tools/perf/builtin-inject.c
@@ -20,6 +20,7 @@
 #include "util/auxtrace.h"
 #include "util/jit.h"
 #include "util/symbol.h"
+#include "util/synthetic-events.h"
 #include "util/thread.h"
 #include <linux/err.h>
 
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 02e719faa488..14940b0a0506 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -16,6 +16,7 @@
 #include "util/debug.h"
 #include "util/tool.h"
 #include "util/stat.h"
+#include "util/synthetic-events.h"
 #include "util/top.h"
 #include "util/data.h"
 #include "util/ordered-events.h"
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6caefa2bcf6c..d1f9431d1ccb 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -38,6 +38,7 @@
 #include "util/trigger.h"
 #include "util/perf-hooks.h"
 #include "util/cpu-set-sched.h"
+#include "util/synthetic-events.h"
 #include "util/time-utils.h"
 #include "util/units.h"
 #include "util/bpf-event.h"
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/builtin-top.c
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 4b81b4c2c4c2..e06ee683aa7a 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -28,6 +28,7 @@
 #include "util/debug.h"
 #include "util/env.h"
 #include "util/event.h"
+#include "util/synthetic-events.h"
 #include "util/evlist.h"
 #include "util/evswitch.h"
 #include <subcmd/exec-cmd.h>
* Unmerged path tools/perf/tests/code-reading.c
diff --git a/tools/perf/tests/cpumap.c b/tools/perf/tests/cpumap.c
index e78b897677bd..4eaf70f57f8a 100644
--- a/tools/perf/tests/cpumap.c
+++ b/tools/perf/tests/cpumap.c
@@ -3,6 +3,7 @@
 #include <stdio.h>
 #include "cpumap.h"
 #include "event.h"
+#include "util/synthetic-events.h"
 #include <string.h>
 #include <linux/bitops.h>
 #include "debug.h"
diff --git a/tools/perf/tests/dwarf-unwind.c b/tools/perf/tests/dwarf-unwind.c
index f33709a79335..3075f7925f7e 100644
--- a/tools/perf/tests/dwarf-unwind.c
+++ b/tools/perf/tests/dwarf-unwind.c
@@ -14,6 +14,7 @@
 #include "symbol.h"
 #include "thread.h"
 #include "callchain.h"
+#include "util/synthetic-events.h"
 
 #if defined (__x86_64__) || defined (__i386__) || defined (__powerpc__)
 #include "arch-tests.h"
* Unmerged path tools/perf/tests/event_update.c
* Unmerged path tools/perf/tests/hists_common.c
diff --git a/tools/perf/tests/mmap-thread-lookup.c b/tools/perf/tests/mmap-thread-lookup.c
index 0a4301a5155c..a6a85df01780 100644
--- a/tools/perf/tests/mmap-thread-lookup.c
+++ b/tools/perf/tests/mmap-thread-lookup.c
@@ -8,11 +8,13 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include "debug.h"
+#include "event.h"
 #include "tests.h"
 #include "machine.h"
 #include "thread_map.h"
 #include "map.h"
 #include "symbol.h"
+#include "util/synthetic-events.h"
 #include "thread.h"
 #include "util.h"
 
diff --git a/tools/perf/tests/sample-parsing.c b/tools/perf/tests/sample-parsing.c
index 361714e2583c..b0db51fbc9e6 100644
--- a/tools/perf/tests/sample-parsing.c
+++ b/tools/perf/tests/sample-parsing.c
@@ -11,6 +11,7 @@
 #include "event.h"
 #include "evsel.h"
 #include "debug.h"
+#include "util/synthetic-events.h"
 
 #include "tests.h"
 
diff --git a/tools/perf/tests/stat.c b/tools/perf/tests/stat.c
index 94250024684a..b33436039d97 100644
--- a/tools/perf/tests/stat.c
+++ b/tools/perf/tests/stat.c
@@ -5,6 +5,7 @@
 #include "stat.h"
 #include "counts.h"
 #include "debug.h"
+#include "util/synthetic-events.h"
 
 static bool has_term(struct stat_config_event *config,
 		     u64 tag, u64 val)
* Unmerged path tools/perf/tests/thread-map.c
diff --git a/tools/perf/ui/stdio/hist.c b/tools/perf/ui/stdio/hist.c
index 51ed67548b83..8cec83607757 100644
--- a/tools/perf/ui/stdio/hist.c
+++ b/tools/perf/ui/stdio/hist.c
@@ -4,6 +4,7 @@
 
 #include "../../util/callchain.h"
 #include "../../util/debug.h"
+#include "../../util/event.h"
 #include "../../util/hist.h"
 #include "../../util/map.h"
 #include "../../util/map_groups.h"
diff --git a/tools/perf/util/auxtrace.c b/tools/perf/util/auxtrace.c
index 2e60b09cfd97..c74fd2170471 100644
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@ -43,6 +43,7 @@
 #include "evsel.h"
 #include "cpumap.h"
 #include "symbol.h"
+#include "util/synthetic-events.h"
 #include "thread_map.h"
 #include "asm/bug.h"
 #include "auxtrace.h"
* Unmerged path tools/perf/util/auxtrace.h
* Unmerged path tools/perf/util/bpf-event.c
* Unmerged path tools/perf/util/bpf-event.h
* Unmerged path tools/perf/util/callchain.c
* Unmerged path tools/perf/util/event.c
* Unmerged path tools/perf/util/event.h
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index 90bfc2303a40..f31bef4b1342 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -37,6 +37,7 @@
 #include "trace-event.h"
 #include "stat.h"
 #include "string2.h"
+#include "util/synthetic-events.h"
 #include "memswap.h"
 #include "util/parse-branch-options.h"
 
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index 13489971ed57..5e4b8eaa9246 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -42,6 +42,7 @@
 #include "units.h"
 #include "cputopo.h"
 #include "bpf-event.h"
+#include "util/synthetic-events.h"
 
 #include <linux/ctype.h>
 
diff --git a/tools/perf/util/intel-bts.c b/tools/perf/util/intel-bts.c
index 902b67a0538f..31256bacd519 100644
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@ -37,6 +37,7 @@
 #include "auxtrace.h"
 #include "intel-pt-decoder/intel-pt-insn-decoder.h"
 #include "intel-bts.h"
+#include "util/synthetic-events.h"
 
 #define MAX_TIMESTAMP (~0ULL)
 
diff --git a/tools/perf/util/intel-pt.c b/tools/perf/util/intel-pt.c
index e9ac11860229..c7b8ce076c5e 100644
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@ -41,6 +41,7 @@
 #include "tsc.h"
 #include "intel-pt.h"
 #include "config.h"
+#include "util/synthetic-events.h"
 #include "time-utils.h"
 
 #include "../arch/x86/include/uapi/asm/perf_regs.h"
* Unmerged path tools/perf/util/machine.c
* Unmerged path tools/perf/util/machine.h
* Unmerged path tools/perf/util/session.c
* Unmerged path tools/perf/util/session.h
diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c
index 9b8d699cb791..8c7583db5fb2 100644
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@ -6,6 +6,7 @@
 #include "stat.h"
 #include "evlist.h"
 #include "evsel.h"
+#include "util/synthetic-events.h"
 #include "thread_map.h"
 #include <linux/zalloc.h>
 
diff --git a/tools/perf/util/synthetic-events.h b/tools/perf/util/synthetic-events.h
new file mode 100644
index 000000000000..baead0cdc381
--- /dev/null
+++ b/tools/perf/util/synthetic-events.h
@@ -0,0 +1,103 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __PERF_SYNTHETIC_EVENTS_H
+#define __PERF_SYNTHETIC_EVENTS_H
+
+#include <stdbool.h>
+#include <sys/types.h> // pid_t
+#include <linux/compiler.h>
+#include <linux/types.h>
+
+struct auxtrace_record;
+struct dso;
+struct evlist;
+struct evsel;
+struct machine;
+struct perf_counts_values;
+struct perf_cpu_map;
+struct perf_event_attr;
+struct perf_event_mmap_page;
+struct perf_sample;
+struct perf_session;
+struct perf_stat_config;
+struct perf_thread_map;
+struct perf_tool;
+struct record_opts;
+struct target;
+
+union perf_event;
+
+typedef int (*perf_event__handler_t)(struct perf_tool *tool, union perf_event *event,
+				     struct perf_sample *sample, struct machine *machine);
+
+int perf_event__synthesize_attrs(struct perf_tool *tool, struct evlist *evlist, perf_event__handler_t process);
+int perf_event__synthesize_attr(struct perf_tool *tool, struct perf_event_attr *attr, u32 ids, u64 *id, perf_event__handler_t process);
+int perf_event__synthesize_build_id(struct perf_tool *tool, struct dso *pos, u16 misc, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_cpu_map(struct perf_tool *tool, struct perf_cpu_map *cpus, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_event_update_cpus(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
+int perf_event__synthesize_event_update_name(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
+int perf_event__synthesize_event_update_scale(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
+int perf_event__synthesize_event_update_unit(struct perf_tool *tool, struct evsel *evsel, perf_event__handler_t process);
+int perf_event__synthesize_extra_attr(struct perf_tool *tool, struct evlist *evsel_list, perf_event__handler_t process, bool is_pipe);
+int perf_event__synthesize_extra_kmaps(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_features(struct perf_tool *tool, struct perf_session *session, struct evlist *evlist, perf_event__handler_t process);
+int perf_event__synthesize_id_index(struct perf_tool *tool, perf_event__handler_t process, struct evlist *evlist, struct machine *machine);
+int perf_event__synthesize_kernel_mmap(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_mmap_events(struct perf_tool *tool, union perf_event *event, pid_t pid, pid_t tgid, perf_event__handler_t process, struct machine *machine, bool mmap_data);
+int perf_event__synthesize_modules(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_namespaces(struct perf_tool *tool, union perf_event *event, pid_t pid, pid_t tgid, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_sample(union perf_event *event, u64 type, u64 read_format, const struct perf_sample *sample);
+int perf_event__synthesize_stat_config(struct perf_tool *tool, struct perf_stat_config *config, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_stat_events(struct perf_stat_config *config, struct perf_tool *tool, struct evlist *evlist, perf_event__handler_t process, bool attrs);
+int perf_event__synthesize_stat_round(struct perf_tool *tool, u64 time, u64 type, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_stat(struct perf_tool *tool, u32 cpu, u32 thread, u64 id, struct perf_counts_values *count, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_thread_map2(struct perf_tool *tool, struct perf_thread_map *threads, perf_event__handler_t process, struct machine *machine);
+int perf_event__synthesize_thread_map(struct perf_tool *tool, struct perf_thread_map *threads, perf_event__handler_t process, struct machine *machine, bool mmap_data);
+int perf_event__synthesize_threads(struct perf_tool *tool, perf_event__handler_t process, struct machine *machine, bool mmap_data, unsigned int nr_threads_synthesize);
+int perf_event__synthesize_tracing_data(struct perf_tool *tool, int fd, struct evlist *evlist, perf_event__handler_t process);
+int perf_event__synth_time_conv(const struct perf_event_mmap_page *pc, struct perf_tool *tool, perf_event__handler_t process, struct machine *machine);
+pid_t perf_event__synthesize_comm(struct perf_tool *tool, union perf_event *event, pid_t pid, perf_event__handler_t process, struct machine *machine);
+
+int perf_tool__process_synth_event(struct perf_tool *tool, union perf_event *event, struct machine *machine, perf_event__handler_t process);
+
+size_t perf_event__sample_event_size(const struct perf_sample *sample, u64 type, u64 read_format);
+
+int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
+				  struct target *target, struct perf_thread_map *threads,
+				  perf_event__handler_t process, bool data_mmap,
+				  unsigned int nr_threads_synthesize);
+int machine__synthesize_threads(struct machine *machine, struct target *target,
+				struct perf_thread_map *threads, bool data_mmap,
+				unsigned int nr_threads_synthesize);
+
+#ifdef HAVE_AUXTRACE_SUPPORT
+int perf_event__synthesize_auxtrace_info(struct auxtrace_record *itr, struct perf_tool *tool,
+					 struct perf_session *session, perf_event__handler_t process);
+
+#else // HAVE_AUXTRACE_SUPPORT
+
+#include <errno.h>
+
+static inline int
+perf_event__synthesize_auxtrace_info(struct auxtrace_record *itr __maybe_unused,
+				     struct perf_tool *tool __maybe_unused,
+				     struct perf_session *session __maybe_unused,
+				     perf_event__handler_t process __maybe_unused)
+{
+	return -EINVAL;
+}
+#endif // HAVE_AUXTRACE_SUPPORT
+
+#ifdef HAVE_LIBBPF_SUPPORT
+int perf_event__synthesize_bpf_events(struct perf_session *session, perf_event__handler_t process,
+				      struct machine *machine, struct record_opts *opts);
+#else // HAVE_LIBBPF_SUPPORT
+static inline int perf_event__synthesize_bpf_events(struct perf_session *session __maybe_unused,
+						    perf_event__handler_t process __maybe_unused,
+						    struct machine *machine __maybe_unused,
+						    struct record_opts *opts __maybe_unused)
+{
+	return 0;
+}
+#endif // HAVE_LIBBPF_SUPPORT
+
+#endif // __PERF_SYNTHETIC_EVENTS_H
diff --git a/tools/perf/util/tsc.h b/tools/perf/util/tsc.h
index e0c3af34ac8d..3c5a632ee57c 100644
--- a/tools/perf/util/tsc.h
+++ b/tools/perf/util/tsc.h
@@ -4,13 +4,12 @@
 
 #include <linux/types.h>
 
-#include "event.h"
-
 struct perf_tsc_conversion {
 	u16 time_shift;
 	u32 time_mult;
 	u64 time_zero;
 };
+
 struct perf_event_mmap_page;
 
 int perf_read_tsc_conversion(const struct perf_event_mmap_page *pc,
@@ -20,13 +19,4 @@ u64 perf_time_to_tsc(u64 ns, struct perf_tsc_conversion *tc);
 u64 tsc_to_perf_time(u64 cyc, struct perf_tsc_conversion *tc);
 u64 rdtsc(void);
 
-struct perf_event_mmap_page;
-struct perf_tool;
-struct machine;
-
-int perf_event__synth_time_conv(const struct perf_event_mmap_page *pc,
-				struct perf_tool *tool,
-				perf_event__handler_t process,
-				struct machine *machine);
-
-#endif
+#endif // __PERF_TSC_H
