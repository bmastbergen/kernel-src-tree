sched/rt, Kconfig: Unbreak def/oldconfig with CONFIG_PREEMPT=y

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit b8d3349803ba34afda429e87a837fd95a99b2349
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b8d33498.failed

The merge of the CONFIG_PREEMPT_RT stub renamed CONFIG_PREEMPT to
CONFIG_PREEMPT_LL which causes all defconfigs which have CONFIG_PREEMPT=y
set to fall back to CONFIG_PREEMPT_NONE because CONFIG_PREEMPT depends on
the preemption mode choice wich defaults to NONE. This also affects
oldconfig builds.

So rather than changing 114 defconfig files and being an annoyance to
users, revert the rename and select a new config symbol PREEMPTION. That
keeps everything working smoothly and the revelant ifdef's are going to be
fixed up step by step.

	Reported-by: Mark Rutland <mark.rutland@arm.com>
Fixes: a50a3f4b6a31 ("sched/rt, Kconfig: Introduce CONFIG_PREEMPT_RT")
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit b8d3349803ba34afda429e87a837fd95a99b2349)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/Kconfig.preempt
diff --cc kernel/Kconfig.preempt
index 3f9c97419f02,deff97217496..000000000000
--- a/kernel/Kconfig.preempt
+++ b/kernel/Kconfig.preempt
@@@ -35,7 -37,8 +35,12 @@@ config PREEMPT_VOLUNTAR
  
  config PREEMPT
  	bool "Preemptible Kernel (Low-Latency Desktop)"
++<<<<<<< HEAD
 +	select PREEMPT_COUNT
++=======
+ 	depends on !ARCH_NO_PREEMPT
+ 	select PREEMPTION
++>>>>>>> b8d3349803ba (sched/rt, Kconfig: Unbreak def/oldconfig with CONFIG_PREEMPT=y)
  	select UNINLINE_SPIN_UNLOCK if !ARCH_INLINE_SPIN_UNLOCK
  	help
  	  This option reduces the latency of the kernel by making
@@@ -52,7 -55,28 +57,35 @@@
  	  embedded system with latency requirements in the milliseconds
  	  range.
  
++<<<<<<< HEAD
 +endchoice
 +
 +config PREEMPT_COUNT
-        bool
++       bool
++=======
+ config PREEMPT_RT
+ 	bool "Fully Preemptible Kernel (Real-Time)"
+ 	depends on EXPERT && ARCH_SUPPORTS_RT
+ 	select PREEMPTION
+ 	help
+ 	  This option turns the kernel into a real-time kernel by replacing
+ 	  various locking primitives (spinlocks, rwlocks, etc.) with
+ 	  preemptible priority-inheritance aware variants, enforcing
+ 	  interrupt threading and introducing mechanisms to break up long
+ 	  non-preemptible sections. This makes the kernel, except for very
+ 	  low level and critical code pathes (entry code, scheduler, low
+ 	  level interrupt handling) fully preemptible and brings most
+ 	  execution contexts under scheduler control.
+ 
+ 	  Select this if you are building a kernel for systems which
+ 	  require real-time guarantees.
+ 
+ endchoice
+ 
+ config PREEMPT_COUNT
+        bool
+ 
+ config PREEMPTION
+        bool
+        select PREEMPT_COUNT
++>>>>>>> b8d3349803ba (sched/rt, Kconfig: Unbreak def/oldconfig with CONFIG_PREEMPT=y)
* Unmerged path kernel/Kconfig.preempt
