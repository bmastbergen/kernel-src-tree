perf record: Add aux-sample-size config term

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit eb7a52d46c6ac95df563f867d526b3d46616b10b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/eb7a52d4.failed

To allow individual events to be selected for AUX area sampling, add
aux-sample-size config term. attr.aux_sample_size is updated by
auxtrace_parse_sample_options() so that the existing validation will see
the value. Any event that has a non-zero aux_sample_size will cause AUX
area sampling to be configured, irrespective of the --aux-sample option.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
Link: http://lore.kernel.org/lkml/20191115124225.5247-8-adrian.hunter@intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit eb7a52d46c6ac95df563f867d526b3d46616b10b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/auxtrace.c
#	tools/perf/util/evsel_config.h
diff --cc tools/perf/util/auxtrace.c
index 130597309e55,026585b67a3c..000000000000
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@@ -41,8 -31,9 +41,12 @@@
  #include "map.h"
  #include "pmu.h"
  #include "evsel.h"
++<<<<<<< HEAD
 +#include "cpumap.h"
++=======
+ #include "evsel_config.h"
++>>>>>>> eb7a52d46c6a (perf record: Add aux-sample-size config term)
  #include "symbol.h"
 -#include "util/synthetic-events.h"
  #include "thread_map.h"
  #include "asm/bug.h"
  #include "auxtrace.h"
@@@ -59,10 -51,79 +63,57 @@@
  #include "intel-bts.h"
  #include "arm-spe.h"
  #include "s390-cpumsf.h"
 -#include "util/mmap.h"
  
  #include <linux/ctype.h>
 -#include <linux/kernel.h>
  #include "symbol/kallsyms.h"
 -#include <internal/lib.h>
 -
 -static struct perf_pmu *perf_evsel__find_pmu(struct evsel *evsel)
 -{
 -	struct perf_pmu *pmu = NULL;
 -
 -	while ((pmu = perf_pmu__scan(pmu)) != NULL) {
 -		if (pmu->type == evsel->core.attr.type)
 -			break;
 -	}
 -
 -	return pmu;
 -}
 -
 -static bool perf_evsel__is_aux_event(struct evsel *evsel)
 -{
 -	struct perf_pmu *pmu = perf_evsel__find_pmu(evsel);
 -
 -	return pmu && pmu->auxtrace;
 -}
  
+ /*
+  * Make a group from 'leader' to 'last', requiring that the events were not
+  * already grouped to a different leader.
+  */
+ static int perf_evlist__regroup(struct evlist *evlist,
+ 				struct evsel *leader,
+ 				struct evsel *last)
+ {
+ 	struct evsel *evsel;
+ 	bool grp;
+ 
+ 	if (!perf_evsel__is_group_leader(leader))
+ 		return -EINVAL;
+ 
+ 	grp = false;
+ 	evlist__for_each_entry(evlist, evsel) {
+ 		if (grp) {
+ 			if (!(evsel->leader == leader ||
+ 			     (evsel->leader == evsel &&
+ 			      evsel->core.nr_members <= 1)))
+ 				return -EINVAL;
+ 		} else if (evsel == leader) {
+ 			grp = true;
+ 		}
+ 		if (evsel == last)
+ 			break;
+ 	}
+ 
+ 	grp = false;
+ 	evlist__for_each_entry(evlist, evsel) {
+ 		if (grp) {
+ 			if (evsel->leader != leader) {
+ 				evsel->leader = leader;
+ 				if (leader->core.nr_members < 1)
+ 					leader->core.nr_members = 1;
+ 				leader->core.nr_members += 1;
+ 			}
+ 		} else if (evsel == leader) {
+ 			grp = true;
+ 		}
+ 		if (evsel == last)
+ 			break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
  static bool auxtrace__dont_decode(struct perf_session *session)
  {
  	return !session->itrace_synth_opts ||
@@@ -603,8 -664,134 +654,137 @@@ int auxtrace_parse_snapshot_options(str
  	return -EINVAL;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Event record size is 16-bit which results in a maximum size of about 64KiB.
+  * Allow about 4KiB for the rest of the sample record, to give a maximum
+  * AUX area sample size of 60KiB.
+  */
+ #define MAX_AUX_SAMPLE_SIZE (60 * 1024)
+ 
+ /* Arbitrary default size if no other default provided */
+ #define DEFAULT_AUX_SAMPLE_SIZE (4 * 1024)
+ 
+ static int auxtrace_validate_aux_sample_size(struct evlist *evlist,
+ 					     struct record_opts *opts)
+ {
+ 	struct evsel *evsel;
+ 	bool has_aux_leader = false;
+ 	u32 sz;
+ 
+ 	evlist__for_each_entry(evlist, evsel) {
+ 		sz = evsel->core.attr.aux_sample_size;
+ 		if (perf_evsel__is_group_leader(evsel)) {
+ 			has_aux_leader = perf_evsel__is_aux_event(evsel);
+ 			if (sz) {
+ 				if (has_aux_leader)
+ 					pr_err("Cannot add AUX area sampling to an AUX area event\n");
+ 				else
+ 					pr_err("Cannot add AUX area sampling to a group leader\n");
+ 				return -EINVAL;
+ 			}
+ 		}
+ 		if (sz > MAX_AUX_SAMPLE_SIZE) {
+ 			pr_err("AUX area sample size %u too big, max. %d\n",
+ 			       sz, MAX_AUX_SAMPLE_SIZE);
+ 			return -EINVAL;
+ 		}
+ 		if (sz) {
+ 			if (!has_aux_leader) {
+ 				pr_err("Cannot add AUX area sampling because group leader is not an AUX area event\n");
+ 				return -EINVAL;
+ 			}
+ 			perf_evsel__set_sample_bit(evsel, AUX);
+ 			opts->auxtrace_sample_mode = true;
+ 		} else {
+ 			perf_evsel__reset_sample_bit(evsel, AUX);
+ 		}
+ 	}
+ 
+ 	if (!opts->auxtrace_sample_mode) {
+ 		pr_err("AUX area sampling requires an AUX area event group leader plus other events to which to add samples\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (!perf_can_aux_sample()) {
+ 		pr_err("AUX area sampling is not supported by kernel\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int auxtrace_parse_sample_options(struct auxtrace_record *itr,
+ 				  struct evlist *evlist,
+ 				  struct record_opts *opts, const char *str)
+ {
+ 	struct perf_evsel_config_term *term;
+ 	struct evsel *aux_evsel;
+ 	bool has_aux_sample_size = false;
+ 	bool has_aux_leader = false;
+ 	struct evsel *evsel;
+ 	char *endptr;
+ 	unsigned long sz;
+ 
+ 	if (!str)
+ 		goto no_opt;
+ 
+ 	if (!itr) {
+ 		pr_err("No AUX area event to sample\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	sz = strtoul(str, &endptr, 0);
+ 	if (*endptr || sz > UINT_MAX) {
+ 		pr_err("Bad AUX area sampling option: '%s'\n", str);
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (!sz)
+ 		sz = itr->default_aux_sample_size;
+ 
+ 	if (!sz)
+ 		sz = DEFAULT_AUX_SAMPLE_SIZE;
+ 
+ 	/* Set aux_sample_size based on --aux-sample option */
+ 	evlist__for_each_entry(evlist, evsel) {
+ 		if (perf_evsel__is_group_leader(evsel)) {
+ 			has_aux_leader = perf_evsel__is_aux_event(evsel);
+ 		} else if (has_aux_leader) {
+ 			evsel->core.attr.aux_sample_size = sz;
+ 		}
+ 	}
+ no_opt:
+ 	aux_evsel = NULL;
+ 	/* Override with aux_sample_size from config term */
+ 	evlist__for_each_entry(evlist, evsel) {
+ 		if (perf_evsel__is_aux_event(evsel))
+ 			aux_evsel = evsel;
+ 		term = perf_evsel__get_config_term(evsel, AUX_SAMPLE_SIZE);
+ 		if (term) {
+ 			has_aux_sample_size = true;
+ 			evsel->core.attr.aux_sample_size = term->val.aux_sample_size;
+ 			/* If possible, group with the AUX event */
+ 			if (aux_evsel && evsel->core.attr.aux_sample_size)
+ 				perf_evlist__regroup(evlist, aux_evsel, evsel);
+ 		}
+ 	}
+ 
+ 	if (!str && !has_aux_sample_size)
+ 		return 0;
+ 
+ 	if (!itr) {
+ 		pr_err("No AUX area event to sample\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	return auxtrace_validate_aux_sample_size(evlist, opts);
+ }
+ 
++>>>>>>> eb7a52d46c6a (perf record: Add aux-sample-size config term)
  struct auxtrace_record *__weak
 -auxtrace_record__init(struct evlist *evlist __maybe_unused, int *err)
 +auxtrace_record__init(struct perf_evlist *evlist __maybe_unused, int *err)
  {
  	*err = 0;
  	return NULL;
* Unmerged path tools/perf/util/evsel_config.h
diff --git a/tools/perf/Documentation/perf-record.txt b/tools/perf/Documentation/perf-record.txt
index 7f1416bbb189..4241cc7a8134 100644
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@ -62,6 +62,9 @@ OPTIONS
 		    like this: name=\'CPU_CLK_UNHALTED.THREAD:cmask=0x1\'.
 	  - 'aux-output': Generate AUX records instead of events. This requires
 			  that an AUX area event is also provided.
+	  - 'aux-sample-size': Set sample size for AUX area sampling. If the
+	  '--aux-sample' option has been used, set aux-sample-size=0 to disable
+	  AUX area sampling for the event.
 
           See the linkperf:perf-list[1] man page for more parameters.
 
* Unmerged path tools/perf/util/auxtrace.c
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index c59d310d3797..a585aa49fe0c 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -837,6 +837,9 @@ static void apply_config_terms(struct perf_evsel *evsel,
 		case PERF_EVSEL__CONFIG_TERM_AUX_OUTPUT:
 			attr->aux_output = term->val.aux_output ? 1 : 0;
 			break;
+		case PERF_EVSEL__CONFIG_TERM_AUX_SAMPLE_SIZE:
+			/* Already applied by auxtrace */
+			break;
 		default:
 			break;
 		}
@@ -896,6 +899,19 @@ static bool is_dummy_event(struct perf_evsel *evsel)
 	       (evsel->attr.config == PERF_COUNT_SW_DUMMY);
 }
 
+struct perf_evsel_config_term *__perf_evsel__get_config_term(struct evsel *evsel,
+							     enum evsel_term_type type)
+{
+	struct perf_evsel_config_term *term, *found_term = NULL;
+
+	list_for_each_entry(term, &evsel->config_terms, list) {
+		if (term->type == type)
+			found_term = term;
+	}
+
+	return found_term;
+}
+
 /*
  * The enable_on_exec/disabled value strategy:
  *
* Unmerged path tools/perf/util/evsel_config.h
diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c
index 42ea3476f432..bef8f29d2d0e 100644
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@ -976,6 +976,7 @@ static const char *config_term_names[__PARSE_EVENTS__TERM_TYPE_NR] = {
 	[PARSE_EVENTS__TERM_TYPE_DRV_CFG]		= "driver-config",
 	[PARSE_EVENTS__TERM_TYPE_PERCORE]		= "percore",
 	[PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT]		= "aux-output",
+	[PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE]	= "aux-sample-size",
 };
 
 static bool config_term_shrinked;
@@ -1106,6 +1107,15 @@ do {									   \
 	case PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT:
 		CHECK_TYPE_VAL(NUM);
 		break;
+	case PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE:
+		CHECK_TYPE_VAL(NUM);
+		if (term->val.num > UINT_MAX) {
+			parse_events__handle_error(err, term->err_val,
+						strdup("too big"),
+						NULL);
+			return -EINVAL;
+		}
+		break;
 	default:
 		parse_events__handle_error(err, term->err_term,
 				strdup("unknown term"),
@@ -1157,6 +1167,7 @@ static int config_term_tracepoint(struct perf_event_attr *attr,
 	case PARSE_EVENTS__TERM_TYPE_OVERWRITE:
 	case PARSE_EVENTS__TERM_TYPE_NOOVERWRITE:
 	case PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT:
+	case PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE:
 		return config_term_common(attr, term, err);
 	default:
 		if (err) {
@@ -1252,6 +1263,9 @@ do {								\
 		case PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT:
 			ADD_CONFIG_TERM(AUX_OUTPUT, aux_output, term->val.num ? 1 : 0);
 			break;
+		case PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE:
+			ADD_CONFIG_TERM(AUX_SAMPLE_SIZE, aux_sample_size, term->val.num);
+			break;
 		default:
 			break;
 		}
diff --git a/tools/perf/util/parse-events.h b/tools/perf/util/parse-events.h
index 693089501a09..2480f484ce66 100644
--- a/tools/perf/util/parse-events.h
+++ b/tools/perf/util/parse-events.h
@@ -77,6 +77,7 @@ enum {
 	PARSE_EVENTS__TERM_TYPE_DRV_CFG,
 	PARSE_EVENTS__TERM_TYPE_PERCORE,
 	PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT,
+	PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE,
 	__PARSE_EVENTS__TERM_TYPE_NR,
 };
 
diff --git a/tools/perf/util/parse-events.l b/tools/perf/util/parse-events.l
index 7469497cd28e..7b1c8ee537cf 100644
--- a/tools/perf/util/parse-events.l
+++ b/tools/perf/util/parse-events.l
@@ -285,6 +285,7 @@ overwrite		{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_OVERWRITE); }
 no-overwrite		{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_NOOVERWRITE); }
 percore			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_PERCORE); }
 aux-output		{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT); }
+aux-sample-size		{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE); }
 ,			{ return ','; }
 "/"			{ BEGIN(INITIAL); return '/'; }
 {name_minus}		{ return str(yyscanner, PE_NAME); }
