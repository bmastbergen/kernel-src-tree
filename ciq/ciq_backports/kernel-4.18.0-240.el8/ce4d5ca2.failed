arm/arm64: Make use of the SMCCC 1.1 wrapper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Steven Price <steven.price@arm.com>
commit ce4d5ca2b9dd5d85944eb93c1bbf9eb11b7a907d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ce4d5ca2.failed

Rather than directly choosing which function to use based on
psci_ops.conduit, use the new arm_smccc_1_1 wrapper instead.

In some cases we still need to do some operations based on the
conduit, but the code duplication is removed.

No functional change.

	Signed-off-by: Steven Price <steven.price@arm.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit ce4d5ca2b9dd5d85944eb93c1bbf9eb11b7a907d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/mm/proc-v7-bugs.c
diff --cc arch/arm/mm/proc-v7-bugs.c
index 5544b82a2e7a,7c90b4c615a5..000000000000
--- a/arch/arm/mm/proc-v7-bugs.c
+++ b/arch/arm/mm/proc-v7-bugs.c
@@@ -79,33 -74,23 +79,47 @@@ static void cpu_v7_spectre_init(void
  	case ARM_CPU_PART_CORTEX_A72: {
  		struct arm_smccc_res res;
  
++<<<<<<< HEAD
 +		if (psci_ops.smccc_version == SMCCC_VERSION_1_0)
 +			break;
 +
 +		switch (psci_ops.conduit) {
 +		case PSCI_CONDUIT_HVC:
 +			arm_smccc_1_1_hvc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
 +					  ARM_SMCCC_ARCH_WORKAROUND_1, &res);
 +			if ((int)res.a0 != 0)
 +				break;
 +			if (processor.switch_mm != cpu_v7_hvc_switch_mm && cpu)
 +				goto bl_error;
++=======
+ 		arm_smccc_1_1_invoke(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
+ 				     ARM_SMCCC_ARCH_WORKAROUND_1, &res);
+ 		if ((int)res.a0 != 0)
+ 			return;
+ 
+ 		switch (arm_smccc_1_1_get_conduit()) {
+ 		case SMCCC_CONDUIT_HVC:
++>>>>>>> ce4d5ca2b9dd (arm/arm64: Make use of the SMCCC 1.1 wrapper)
  			per_cpu(harden_branch_predictor_fn, cpu) =
  				call_hvc_arch_workaround_1;
 -			cpu_do_switch_mm = cpu_v7_hvc_switch_mm;
 +			processor.switch_mm = cpu_v7_hvc_switch_mm;
  			spectre_v2_method = "hypervisor";
  			break;
  
++<<<<<<< HEAD
 +		case PSCI_CONDUIT_SMC:
 +			arm_smccc_1_1_smc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
 +					  ARM_SMCCC_ARCH_WORKAROUND_1, &res);
 +			if ((int)res.a0 != 0)
 +				break;
 +			if (processor.switch_mm != cpu_v7_smc_switch_mm && cpu)
 +				goto bl_error;
++=======
+ 		case SMCCC_CONDUIT_SMC:
++>>>>>>> ce4d5ca2b9dd (arm/arm64: Make use of the SMCCC 1.1 wrapper)
  			per_cpu(harden_branch_predictor_fn, cpu) =
  				call_smc_arch_workaround_1;
 -			cpu_do_switch_mm = cpu_v7_smc_switch_mm;
 +			processor.switch_mm = cpu_v7_smc_switch_mm;
  			spectre_v2_method = "firmware";
  			break;
  
* Unmerged path arch/arm/mm/proc-v7-bugs.c
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index 9de4d99cff30..c8ff0370797d 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -229,40 +229,31 @@ static int detect_harden_bp_fw(void)
 	struct arm_smccc_res res;
 	u32 midr = read_cpuid_id();
 
+	arm_smccc_1_1_invoke(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
+			     ARM_SMCCC_ARCH_WORKAROUND_1, &res);
+
+	switch ((int)res.a0) {
+	case 1:
+		/* Firmware says we're just fine */
+		return 0;
+	case 0:
+		break;
+	default:
+		return -1;
+	}
+
 	switch (arm_smccc_1_1_get_conduit()) {
 	case SMCCC_CONDUIT_HVC:
-		arm_smccc_1_1_hvc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
-				  ARM_SMCCC_ARCH_WORKAROUND_1, &res);
-		switch ((int)res.a0) {
-		case 1:
-			/* Firmware says we're just fine */
-			return 0;
-		case 0:
-			cb = call_hvc_arch_workaround_1;
-			/* This is a guest, no need to patch KVM vectors */
-			smccc_start = NULL;
-			smccc_end = NULL;
-			break;
-		default:
-			return -1;
-		}
+		cb = call_hvc_arch_workaround_1;
+		/* This is a guest, no need to patch KVM vectors */
+		smccc_start = NULL;
+		smccc_end = NULL;
 		break;
 
 	case SMCCC_CONDUIT_SMC:
-		arm_smccc_1_1_smc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
-				  ARM_SMCCC_ARCH_WORKAROUND_1, &res);
-		switch ((int)res.a0) {
-		case 1:
-			/* Firmware says we're just fine */
-			return 0;
-		case 0:
-			cb = call_smc_arch_workaround_1;
-			smccc_start = __smccc_workaround_1_smc_start;
-			smccc_end = __smccc_workaround_1_smc_end;
-			break;
-		default:
-			return -1;
-		}
+		cb = call_smc_arch_workaround_1;
+		smccc_start = __smccc_workaround_1_smc_start;
+		smccc_end = __smccc_workaround_1_smc_end;
 		break;
 
 	default:
@@ -352,6 +343,8 @@ void __init arm64_enable_wa2_handling(struct alt_instr *alt,
 
 void arm64_set_ssbd_mitigation(bool state)
 {
+	int conduit;
+
 	if (!IS_ENABLED(CONFIG_ARM64_SSBD)) {
 		pr_info_once("SSBD disabled by kernel configuration\n");
 		return;
@@ -365,19 +358,10 @@ void arm64_set_ssbd_mitigation(bool state)
 		return;
 	}
 
-	switch (arm_smccc_1_1_get_conduit()) {
-	case SMCCC_CONDUIT_HVC:
-		arm_smccc_1_1_hvc(ARM_SMCCC_ARCH_WORKAROUND_2, state, NULL);
-		break;
-
-	case SMCCC_CONDUIT_SMC:
-		arm_smccc_1_1_smc(ARM_SMCCC_ARCH_WORKAROUND_2, state, NULL);
-		break;
+	conduit = arm_smccc_1_1_invoke(ARM_SMCCC_ARCH_WORKAROUND_2, state,
+				       NULL);
 
-	default:
-		WARN_ON_ONCE(1);
-		break;
-	}
+	WARN_ON_ONCE(conduit == SMCCC_CONDUIT_NONE);
 }
 
 static bool has_ssbd_mitigation(const struct arm64_cpu_capabilities *entry,
@@ -387,6 +371,7 @@ static bool has_ssbd_mitigation(const struct arm64_cpu_capabilities *entry,
 	bool required = true;
 	s32 val;
 	bool this_cpu_safe = false;
+	int conduit;
 
 	WARN_ON(scope != SCOPE_LOCAL_CPU || preemptible());
 
@@ -404,18 +389,10 @@ static bool has_ssbd_mitigation(const struct arm64_cpu_capabilities *entry,
 		goto out_printmsg;
 	}
 
-	switch (arm_smccc_1_1_get_conduit()) {
-	case SMCCC_CONDUIT_HVC:
-		arm_smccc_1_1_hvc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
-				  ARM_SMCCC_ARCH_WORKAROUND_2, &res);
-		break;
+	conduit = arm_smccc_1_1_invoke(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
+				       ARM_SMCCC_ARCH_WORKAROUND_2, &res);
 
-	case SMCCC_CONDUIT_SMC:
-		arm_smccc_1_1_smc(ARM_SMCCC_ARCH_FEATURES_FUNC_ID,
-				  ARM_SMCCC_ARCH_WORKAROUND_2, &res);
-		break;
-
-	default:
+	if (conduit == SMCCC_CONDUIT_NONE) {
 		ssbd_state = ARM64_SSBD_UNKNOWN;
 		if (!this_cpu_safe)
 			__ssb_safe = false;
