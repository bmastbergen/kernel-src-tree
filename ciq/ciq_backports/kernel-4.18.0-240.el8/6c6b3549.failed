block: set the zone size in blk_revalidate_disk_zones atomically

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 6c6b3549142255c3fe4bab5560efdf8391c8d858
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6c6b3549.failed

The current zone revalidation code has a major problem in that it
doesn't update the zone size and q->nr_zones atomically, leading
to a short window where an out of bounds access to the zone arrays
is possible.

To fix this move the setting of the zone size into the crticial
sections blk_revalidate_disk_zones so that it gets updated together
with the zone bitmaps and q->nr_zones.  This also slightly simplifies
the caller as it deducts the zone size from the report_zones.

This change also allows to check for a power of two zone size in generic
code.

	Reported-by: Hans Holmberg <hans@owltronix.com>
	Reviewed-by: Javier Gonz√°lez <javier@javigon.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 6c6b3549142255c3fe4bab5560efdf8391c8d858)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-zoned.c
#	drivers/block/null_blk_main.c
diff --cc block/blk-zoned.c
index dfece77e25b8,d00fcfd71dfe..000000000000
--- a/block/blk-zoned.c
+++ b/block/blk-zoned.c
@@@ -389,34 -330,96 +389,119 @@@ static inline unsigned long *blk_alloc_
  			    GFP_NOIO, node);
  }
  
 +/*
 + * Allocate an array of struct blk_zone to get nr_zones zone information.
 + * The allocated array may be smaller than nr_zones.
 + */
 +static struct blk_zone *blk_alloc_zones(int node, unsigned int *nr_zones)
 +{
 +	size_t size = *nr_zones * sizeof(struct blk_zone);
 +	struct page *page;
 +	int order;
 +
 +	for (order = get_order(size); order >= 0; order--) {
 +		page = alloc_pages_node(node, GFP_NOIO | __GFP_ZERO, order);
 +		if (page) {
 +			*nr_zones = min_t(unsigned int, *nr_zones,
 +				(PAGE_SIZE << order) / sizeof(struct blk_zone));
 +			return page_address(page);
 +		}
 +	}
 +
 +	return NULL;
 +}
 +
++<<<<<<< HEAD
  void blk_queue_free_zone_bitmaps(struct request_queue *q)
  {
 -	kfree(q->conv_zones_bitmap);
 -	q->conv_zones_bitmap = NULL;
 +	kfree(q->seq_zones_bitmap);
 +	q->seq_zones_bitmap = NULL;
  	kfree(q->seq_zones_wlock);
  	q->seq_zones_wlock = NULL;
 -}
 -
++=======
+ struct blk_revalidate_zone_args {
+ 	struct gendisk	*disk;
+ 	unsigned long	*conv_zones_bitmap;
+ 	unsigned long	*seq_zones_wlock;
+ 	unsigned int	nr_zones;
+ 	sector_t	zone_sectors;
+ 	sector_t	sector;
+ };
+ 
+ /*
+  * Helper function to check the validity of zones of a zoned block device.
+  */
+ static int blk_revalidate_zone_cb(struct blk_zone *zone, unsigned int idx,
+ 				  void *data)
+ {
+ 	struct blk_revalidate_zone_args *args = data;
+ 	struct gendisk *disk = args->disk;
+ 	struct request_queue *q = disk->queue;
+ 	sector_t capacity = get_capacity(disk);
+ 
+ 	/*
+ 	 * All zones must have the same size, with the exception on an eventual
+ 	 * smaller last zone.
+ 	 */
+ 	if (zone->start == 0) {
+ 		if (zone->len == 0 || !is_power_of_2(zone->len)) {
+ 			pr_warn("%s: Invalid zoned device with non power of two zone size (%llu)\n",
+ 				disk->disk_name, zone->len);
+ 			return -ENODEV;
+ 		}
+ 
+ 		args->zone_sectors = zone->len;
+ 		args->nr_zones = (capacity + zone->len - 1) >> ilog2(zone->len);
+ 	} else if (zone->start + args->zone_sectors < capacity) {
+ 		if (zone->len != args->zone_sectors) {
+ 			pr_warn("%s: Invalid zoned device with non constant zone size\n",
+ 				disk->disk_name);
+ 			return -ENODEV;
+ 		}
+ 	} else {
+ 		if (zone->len > args->zone_sectors) {
+ 			pr_warn("%s: Invalid zoned device with larger last zone size\n",
+ 				disk->disk_name);
+ 			return -ENODEV;
+ 		}
+ 	}
+ 
+ 	/* Check for holes in the zone report */
+ 	if (zone->start != args->sector) {
+ 		pr_warn("%s: Zone gap at sectors %llu..%llu\n",
+ 			disk->disk_name, args->sector, zone->start);
+ 		return -ENODEV;
+ 	}
+ 
+ 	/* Check zone type */
+ 	switch (zone->type) {
+ 	case BLK_ZONE_TYPE_CONVENTIONAL:
+ 		if (!args->conv_zones_bitmap) {
+ 			args->conv_zones_bitmap =
+ 				blk_alloc_zone_bitmap(q->node, args->nr_zones);
+ 			if (!args->conv_zones_bitmap)
+ 				return -ENOMEM;
+ 		}
+ 		set_bit(idx, args->conv_zones_bitmap);
+ 		break;
+ 	case BLK_ZONE_TYPE_SEQWRITE_REQ:
+ 	case BLK_ZONE_TYPE_SEQWRITE_PREF:
+ 		if (!args->seq_zones_wlock) {
+ 			args->seq_zones_wlock =
+ 				blk_alloc_zone_bitmap(q->node, args->nr_zones);
+ 			if (!args->seq_zones_wlock)
+ 				return -ENOMEM;
+ 		}
+ 		break;
+ 	default:
+ 		pr_warn("%s: Invalid zone type 0x%x at sectors %llu\n",
+ 			disk->disk_name, (int)zone->type, zone->start);
+ 		return -ENODEV;
+ 	}
+ 
+ 	args->sector += zone->len;
+ 	return 0;
++>>>>>>> 6c6b35491422 (block: set the zone size in blk_revalidate_disk_zones atomically)
  }
  
  /**
@@@ -431,87 -435,46 +516,118 @@@
  int blk_revalidate_disk_zones(struct gendisk *disk)
  {
  	struct request_queue *q = disk->queue;
++<<<<<<< HEAD
 +	unsigned int nr_zones = __blkdev_nr_zones(q, get_capacity(disk));
 +	unsigned long *seq_zones_wlock = NULL, *seq_zones_bitmap = NULL;
 +	unsigned int i, rep_nr_zones = 0, z = 0, nrz;
 +	struct blk_zone *zones = NULL;
 +	sector_t sector = 0;
 +	int ret = 0;
++=======
+ 	struct blk_revalidate_zone_args args = {
+ 		.disk		= disk,
+ 	};
+ 	unsigned int noio_flag;
+ 	int ret;
 -
 -	if (WARN_ON_ONCE(!blk_queue_is_zoned(q)))
 -		return -EIO;
 -	if (WARN_ON_ONCE(!queue_is_mq(q)))
 -		return -EIO;
++>>>>>>> 6c6b35491422 (block: set the zone size in blk_revalidate_disk_zones atomically)
  
  	/*
++<<<<<<< HEAD
 +	 * BIO based queues do not use a scheduler so only q->nr_zones
 +	 * needs to be updated so that the sysfs exposed value is correct.
 +	 */
 +	if (!queue_is_mq(q)) {
 +		q->nr_zones = nr_zones;
 +		return 0;
 +	}
++=======
+ 	 * Ensure that all memory allocations in this context are done as if
+ 	 * GFP_NOIO was specified.
+ 	 */
+ 	noio_flag = memalloc_noio_save();
+ 	ret = disk->fops->report_zones(disk, 0, UINT_MAX,
+ 				       blk_revalidate_zone_cb, &args);
+ 	memalloc_noio_restore(noio_flag);
++>>>>>>> 6c6b35491422 (block: set the zone size in blk_revalidate_disk_zones atomically)
  
 +	if (!blk_queue_is_zoned(q) || !nr_zones) {
 +		nr_zones = 0;
 +		goto update;
 +	}
 +
 +	/* Allocate bitmaps */
 +	ret = -ENOMEM;
 +	seq_zones_wlock = blk_alloc_zone_bitmap(q->node, nr_zones);
 +	if (!seq_zones_wlock)
 +		goto out;
 +	seq_zones_bitmap = blk_alloc_zone_bitmap(q->node, nr_zones);
 +	if (!seq_zones_bitmap)
 +		goto out;
 +
 +	/* Get zone information and initialize seq_zones_bitmap */
 +	rep_nr_zones = nr_zones;
 +	zones = blk_alloc_zones(q->node, &rep_nr_zones);
 +	if (!zones)
 +		goto out;
 +
 +	while (z < nr_zones) {
 +		nrz = min(nr_zones - z, rep_nr_zones);
 +		ret = blk_report_zones(disk, sector, zones, &nrz, GFP_NOIO);
 +		if (ret)
 +			goto out;
 +		if (!nrz)
 +			break;
 +		for (i = 0; i < nrz; i++) {
 +			if (zones[i].type != BLK_ZONE_TYPE_CONVENTIONAL)
 +				set_bit(z, seq_zones_bitmap);
 +			z++;
 +		}
 +		sector += nrz * blk_queue_zone_sectors(q);
 +	}
 +
 +	if (WARN_ON(z != nr_zones)) {
 +		ret = -EIO;
 +		goto out;
 +	}
 +
 +update:
  	/*
- 	 * Install the new bitmaps, making sure the queue is stopped and
- 	 * all I/Os are completed (i.e. a scheduler is not referencing the
- 	 * bitmaps).
+ 	 * Install the new bitmaps and update nr_zones only once the queue is
+ 	 * stopped and all I/Os are completed (i.e. a scheduler is not
+ 	 * referencing the bitmaps).
  	 */
  	blk_mq_freeze_queue(q);
++<<<<<<< HEAD
 +	q->nr_zones = nr_zones;
 +	swap(q->seq_zones_wlock, seq_zones_wlock);
 +	swap(q->seq_zones_bitmap, seq_zones_bitmap);
++=======
+ 	if (ret >= 0) {
+ 		blk_queue_chunk_sectors(q, args.zone_sectors);
+ 		q->nr_zones = args.nr_zones;
+ 		swap(q->seq_zones_wlock, args.seq_zones_wlock);
+ 		swap(q->conv_zones_bitmap, args.conv_zones_bitmap);
+ 		ret = 0;
+ 	} else {
+ 		pr_warn("%s: failed to revalidate zones\n", disk->disk_name);
+ 		blk_queue_free_zone_bitmaps(q);
+ 	}
++>>>>>>> 6c6b35491422 (block: set the zone size in blk_revalidate_disk_zones atomically)
  	blk_mq_unfreeze_queue(q);
  
 -	kfree(args.seq_zones_wlock);
 -	kfree(args.conv_zones_bitmap);
 +out:
 +	free_pages((unsigned long)zones,
 +		   get_order(rep_nr_zones * sizeof(struct blk_zone)));
 +	kfree(seq_zones_wlock);
 +	kfree(seq_zones_bitmap);
 +
 +	if (ret) {
 +		pr_warn("%s: failed to revalidate zones\n", disk->disk_name);
 +		blk_mq_freeze_queue(q);
 +		blk_queue_free_zone_bitmaps(q);
 +		blk_mq_unfreeze_queue(q);
 +	}
 +
  	return ret;
  }
  EXPORT_SYMBOL_GPL(blk_revalidate_disk_zones);
diff --cc drivers/block/null_blk_main.c
index 88b01572e8f5,997b7dc095b9..000000000000
--- a/drivers/block/null_blk_main.c
+++ b/drivers/block/null_blk_main.c
@@@ -1556,11 -1576,19 +1556,23 @@@ static int null_gendisk_register(struc
  	disk->queue		= nullb->q;
  	strncpy(disk->disk_name, nullb->disk_name, DISK_NAME_LEN);
  
 -#ifdef CONFIG_BLK_DEV_ZONED
  	if (nullb->dev->zoned) {
++<<<<<<< HEAD
 +		ret = blk_revalidate_disk_zones(disk);
 +		if (ret)
 +			return ret;
++=======
+ 		if (queue_is_mq(nullb->q)) {
+ 			ret = blk_revalidate_disk_zones(disk);
+ 			if (ret)
+ 				return ret;
+ 		} else {
+ 			blk_queue_chunk_sectors(nullb->q,
+ 					nullb->dev->zone_size_sects);
+ 			nullb->q->nr_zones = blkdev_nr_zones(disk);
+ 		}
++>>>>>>> 6c6b35491422 (block: set the zone size in blk_revalidate_disk_zones atomically)
  	}
 -#endif
  
  	add_disk(disk);
  	return 0;
* Unmerged path block/blk-zoned.c
* Unmerged path drivers/block/null_blk_main.c
diff --git a/drivers/scsi/sd_zbc.c b/drivers/scsi/sd_zbc.c
index 3707ee36b4d8..4359aab36815 100644
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@ -441,8 +441,6 @@ int sd_zbc_read_zones(struct scsi_disk *sdkp, unsigned char *buf)
 		goto err;
 
 	/* The drive satisfies the kernel restrictions: set it up */
-	blk_queue_chunk_sectors(sdkp->disk->queue,
-			logical_to_sectors(sdkp->device, zone_blocks));
 	blk_queue_flag_set(QUEUE_FLAG_ZONE_RESETALL, sdkp->disk->queue);
 	blk_queue_required_elevator_features(sdkp->disk->queue,
 					     ELEVATOR_F_ZBD_SEQ_WRITE);
