libbpf: Sanitise internal map names so they are not rejected by the kernel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit 113e6b7e15e23dc45d5c66eb66bb91a627812e36
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/113e6b7e.failed

The kernel only accepts map names with alphanumeric characters, underscores
and periods in their name. However, the auto-generated internal map names
used by libbpf takes their prefix from the user-supplied BPF object name,
which has no such restriction. This can lead to "Invalid argument" errors
when trying to load a BPF program using global variables.

Fix this by sanitising the map names, replacing any non-allowed characters
with underscores.

Fixes: d859900c4c56 ("bpf, libbpf: support global data/bss/rodata sections")
	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20200217171701.215215-1-toke@redhat.com
(cherry picked from commit 113e6b7e15e23dc45d5c66eb66bb91a627812e36)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 6ed9ef84b398,7469c7dcc15e..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -860,6 -1281,26 +861,29 @@@ static size_t bpf_map_mmap_sz(const str
  	return map_sz;
  }
  
++<<<<<<< HEAD
++=======
+ static char *internal_map_name(struct bpf_object *obj,
+ 			       enum libbpf_map_type type)
+ {
+ 	char map_name[BPF_OBJ_NAME_LEN], *p;
+ 	const char *sfx = libbpf_type_to_btf_name[type];
+ 	int sfx_len = max((size_t)7, strlen(sfx));
+ 	int pfx_len = min((size_t)BPF_OBJ_NAME_LEN - sfx_len - 1,
+ 			  strlen(obj->name));
+ 
+ 	snprintf(map_name, sizeof(map_name), "%.*s%.*s", pfx_len, obj->name,
+ 		 sfx_len, libbpf_type_to_btf_name[type]);
+ 
+ 	/* sanitise map name to characters allowed by kernel */
+ 	for (p = map_name; *p && p < map_name + sizeof(map_name); p++)
+ 		if (!isalnum(*p) && *p != '_' && *p != '.')
+ 			*p = '_';
+ 
+ 	return strdup(map_name);
+ }
+ 
++>>>>>>> 113e6b7e15e2 (libbpf: Sanitise internal map names so they are not rejected by the kernel)
  static int
  bpf_object__init_internal_map(struct bpf_object *obj, enum libbpf_map_type type,
  			      int sec_idx, void *data, size_t data_sz)
* Unmerged path tools/lib/bpf/libbpf.c
