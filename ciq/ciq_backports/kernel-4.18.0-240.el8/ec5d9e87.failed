PCI: Add pci_status_get_and_clear_errors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Heiner Kallweit <hkallweit1@gmail.com>
commit ec5d9e87842a43be3a10ada0d5f560bbd3f31d5d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ec5d9e87.failed

Several drivers use the following code sequence:
1. Read PCI_STATUS
2. Mask out non-error bits
3. Action based on error bits set
4. Write back set error bits to clear them

As this is a repeated pattern, add a helper to the PCI core.

	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Acked-by: Bjorn Helgaas <bhelgaas@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ec5d9e87842a43be3a10ada0d5f560bbd3f31d5d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index 97ea3a3f2c9f,7beaf51e98ec..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -1205,6 -1209,8 +1205,11 @@@ int __must_check pci_resize_resource(st
  int pci_select_bars(struct pci_dev *dev, unsigned long flags);
  bool pci_device_is_present(struct pci_dev *pdev);
  void pci_ignore_hotplug(struct pci_dev *dev);
++<<<<<<< HEAD
++=======
+ struct pci_dev *pci_real_dma_dev(struct pci_dev *dev);
+ int pci_status_get_and_clear_errors(struct pci_dev *pdev);
++>>>>>>> ec5d9e87842a (PCI: Add pci_status_get_and_clear_errors)
  
  int __printf(6, 7) pci_request_irq(struct pci_dev *dev, unsigned int nr,
  		irq_handler_t handler, irq_handler_t thread_fn, void *dev_id,
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index c438274dcc64..6c90a5b0c293 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -172,6 +172,29 @@ unsigned char pci_bus_max_busnr(struct pci_bus *bus)
 }
 EXPORT_SYMBOL_GPL(pci_bus_max_busnr);
 
+/**
+ * pci_status_get_and_clear_errors - return and clear error bits in PCI_STATUS
+ * @pdev: the PCI device
+ *
+ * Returns error bits set in PCI_STATUS and clears them.
+ */
+int pci_status_get_and_clear_errors(struct pci_dev *pdev)
+{
+	u16 status;
+	int ret;
+
+	ret = pci_read_config_word(pdev, PCI_STATUS, &status);
+	if (ret != PCIBIOS_SUCCESSFUL)
+		return -EIO;
+
+	status &= PCI_STATUS_ERROR_BITS;
+	if (status)
+		pci_write_config_word(pdev, PCI_STATUS, status);
+
+	return status;
+}
+EXPORT_SYMBOL_GPL(pci_status_get_and_clear_errors);
+
 #ifdef CONFIG_HAS_IOMEM
 void __iomem *pci_ioremap_bar(struct pci_dev *pdev, int bar)
 {
* Unmerged path include/linux/pci.h
