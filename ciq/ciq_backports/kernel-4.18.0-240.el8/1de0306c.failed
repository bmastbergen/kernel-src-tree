net/mlx5e: Enhance ICOSQ WQE info fields

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Aya Levin <ayal@mellanox.com>
commit 1de0306c3a05d305e45b1f1fabe2f4e94222eb6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1de0306c.failed

Add number of WQEBBs (WQE's Basic Block) to WQE info struct. Set the
number of WQEBBs on WQE post, and increment the consumer counter (cc)
on completion.

In case of error completions, the cc was mistakenly not incremented,
keeping a gap between cc and pc (producer counter). This failed the
recovery flow on the ICOSQ from a CQE error which timed-out waiting for
the cc and pc to meet.

Fixes: be5323c8379f ("net/mlx5e: Report and recover from CQE error on ICOSQ")
	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 1de0306c3a05d305e45b1f1fabe2f4e94222eb6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 712a1a24ac15,312d4692425b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -626,13 -623,20 +628,25 @@@ void mlx5e_poll_ico_cq(struct mlx5e_cq 
  
  			ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sqcc);
  			wi = &sq->db.ico_wqe[ci];
+ 			sqcc += wi->num_wqebbs;
  
++<<<<<<< HEAD
 +			if (likely(wi->opcode == MLX5_OPCODE_UMR)) {
 +				sqcc += MLX5E_UMR_WQEBBS;
++=======
+ 			if (last_wqe && unlikely(get_cqe_opcode(cqe) != MLX5_CQE_REQ)) {
+ 				netdev_WARN_ONCE(cq->channel->netdev,
+ 						 "Bad OP in ICOSQ CQE: 0x%x\n",
+ 						 get_cqe_opcode(cqe));
+ 				if (!test_and_set_bit(MLX5E_SQ_STATE_RECOVERING, &sq->state))
+ 					queue_work(cq->channel->priv->wq, &sq->recover_work);
+ 				break;
+ 			}
+ 
+ 			if (likely(wi->opcode == MLX5_OPCODE_UMR))
++>>>>>>> 1de0306c3a05 (net/mlx5e: Enhance ICOSQ WQE info fields)
  				wi->umr.rq->mpwqe.umr_completed++;
- 			} else if (likely(wi->opcode == MLX5_OPCODE_NOP)) {
- 				sqcc++;
- 			} else {
+ 			else if (unlikely(wi->opcode != MLX5_OPCODE_NOP))
  				netdev_WARN_ONCE(cq->channel->netdev,
  						 "Bad OPCODE in ICOSQ WQE info: 0x%x\n",
  						 wi->opcode);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 2c27faf36aec..b3725fd6554e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -369,6 +369,7 @@ enum {
 
 struct mlx5e_sq_wqe_info {
 	u8  opcode;
+	u8 num_wqebbs;
 
 	/* Auxiliary data for different opcodes. */
 	union {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
index 257a7c9f7a14..800d34ed8a96 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
@@ -78,6 +78,7 @@ void mlx5e_trigger_irq(struct mlx5e_icosq *sq)
 	u16 pi = mlx5_wq_cyc_ctr2ix(wq, sq->pc);
 
 	sq->db.ico_wqe[pi].opcode = MLX5_OPCODE_NOP;
+	sq->db.ico_wqe[pi].num_wqebbs = 1;
 	nopwqe = mlx5e_post_nop(wq, sq->sqn, &sq->pc);
 	mlx5e_notify_hw(wq, sq->pc, sq->uar_map, &nopwqe->ctrl);
 }
