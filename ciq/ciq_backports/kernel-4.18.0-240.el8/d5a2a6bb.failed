cpufreq: intel_pstate: Consolidate policy verification

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit d5a2a6bb27f390f36c899907490d25ce1e83eec5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d5a2a6bb.failed

There is still some code duplication between intel_pstate_verify_policy()
and intel_cpufreq_verify_policy(), so avoid it by moving the common
code into a separate function and calling it from both these places.

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit d5a2a6bb27f390f36c899907490d25ce1e83eec5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 8e19ba94c3ed,404982d655e2..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -2160,19 -2155,19 +2160,31 @@@ static void intel_pstate_adjust_policy_
  	}
  }
  
++<<<<<<< HEAD
 +static int intel_pstate_verify_policy(struct cpufreq_policy *policy)
++=======
+ static void intel_pstate_verify_cpu_policy(struct cpudata *cpu,
+ 					   struct cpufreq_policy_data *policy)
++>>>>>>> d5a2a6bb27f3 (cpufreq: intel_pstate: Consolidate policy verification)
  {
- 	struct cpudata *cpu = all_cpu_data[policy->cpu];
- 
  	update_turbo_state();
  	cpufreq_verify_within_limits(policy, policy->cpuinfo.min_freq,
  				     intel_pstate_get_max_freq(cpu));
  
++<<<<<<< HEAD
 +	if (policy->policy != CPUFREQ_POLICY_POWERSAVE &&
 +	    policy->policy != CPUFREQ_POLICY_PERFORMANCE)
 +		return -EINVAL;
 +
 +	intel_pstate_adjust_policy_max(policy, cpu);
++=======
+ 	intel_pstate_adjust_policy_max(cpu, policy);
+ }
+ 
+ static int intel_pstate_verify_policy(struct cpufreq_policy_data *policy)
+ {
+ 	intel_pstate_verify_cpu_policy(all_cpu_data[policy->cpu], policy);
++>>>>>>> d5a2a6bb27f3 (cpufreq: intel_pstate: Consolidate policy verification)
  
  	return 0;
  }
@@@ -2277,13 -2272,8 +2289,18 @@@ static int intel_cpufreq_verify_policy(
  {
  	struct cpudata *cpu = all_cpu_data[policy->cpu];
  
++<<<<<<< HEAD
 +	update_turbo_state();
 +	cpufreq_verify_within_limits(policy, policy->cpuinfo.min_freq,
 +				     intel_pstate_get_max_freq(cpu));
 +
 +	intel_pstate_adjust_policy_max(policy, cpu);
 +
 +	intel_pstate_update_perf_limits(policy, cpu);
++=======
+ 	intel_pstate_verify_cpu_policy(cpu, policy);
+ 	intel_pstate_update_perf_limits(cpu, policy->min, policy->max);
++>>>>>>> d5a2a6bb27f3 (cpufreq: intel_pstate: Consolidate policy verification)
  
  	return 0;
  }
* Unmerged path drivers/cpufreq/intel_pstate.c
