gpiolib: Add GPIOCHIP_NAME definition

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Geert Uytterhoeven <geert+renesas@glider.be>
commit ddd8891e01ecd87c81c04f6eb169be193868b884
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ddd8891e.failed

The string literal "gpiochip" is used in several places.
Add a definition for it, and use it everywhere, to make sure everything
stays in sync.

	Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
Link: https://lore.kernel.org/r/20191127084253.16356-2-geert+renesas@glider.be
	Reviewed-by: Ulrich Hecht <uli+renesas@fpond.eu>
	Reviewed-by: Eugeniu Rosca <erosca@de.adit-jv.com>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit ddd8891e01ecd87c81c04f6eb169be193868b884)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpiolib.h
diff --cc drivers/gpio/gpiolib.h
index 7c52c2442173,a4a759920faa..000000000000
--- a/drivers/gpio/gpiolib.h
+++ b/drivers/gpio/gpiolib.h
@@@ -16,8 -16,7 +16,12 @@@
  #include <linux/module.h>
  #include <linux/cdev.h>
  
++<<<<<<< HEAD
 +enum of_gpio_flags;
 +struct acpi_device;
++=======
+ #define GPIOCHIP_NAME	"gpiochip"
++>>>>>>> ddd8891e01ec (gpiolib: Add GPIOCHIP_NAME definition)
  
  /**
   * struct gpio_device - internal state container for GPIO devices
diff --git a/drivers/gpio/gpiolib-sysfs.c b/drivers/gpio/gpiolib-sysfs.c
index fbf6b1a0a4fa..23e3d335cd54 100644
--- a/drivers/gpio/gpiolib-sysfs.c
+++ b/drivers/gpio/gpiolib-sysfs.c
@@ -762,10 +762,9 @@ int gpiochip_sysfs_register(struct gpio_device *gdev)
 		parent = &gdev->dev;
 
 	/* use chip->base for the ID; it's already known to be unique */
-	dev = device_create_with_groups(&gpio_class, parent,
-					MKDEV(0, 0),
-					chip, gpiochip_groups,
-					"gpiochip%d", chip->base);
+	dev = device_create_with_groups(&gpio_class, parent, MKDEV(0, 0), chip,
+					gpiochip_groups, GPIOCHIP_NAME "%d",
+					chip->base);
 	if (IS_ERR(dev))
 		return PTR_ERR(dev);
 
diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
index 0e900954a4ea..8db19cb11376 100644
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -1315,7 +1315,7 @@ int gpiochip_add_data_with_key(struct gpio_chip *chip, void *data,
 		status = gdev->id;
 		goto err_free_gdev;
 	}
-	dev_set_name(&gdev->dev, "gpiochip%d", gdev->id);
+	dev_set_name(&gdev->dev, GPIOCHIP_NAME "%d", gdev->id);
 	device_initialize(&gdev->dev);
 	dev_set_drvdata(&gdev->dev, gdev);
 	if (chip->parent && chip->parent->driver)
@@ -4732,7 +4732,7 @@ static int __init gpiolib_dev_init(void)
 		return ret;
 	}
 
-	ret = alloc_chrdev_region(&gpio_devt, 0, GPIO_DEV_MAX, "gpiochip");
+	ret = alloc_chrdev_region(&gpio_devt, 0, GPIO_DEV_MAX, GPIOCHIP_NAME);
 	if (ret < 0) {
 		pr_err("gpiolib: failed to allocate char dev region\n");
 		bus_unregister(&gpio_bus_type);
* Unmerged path drivers/gpio/gpiolib.h
