libperf: Add perf_evlist__add_pollfd() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit f4009e7bf7ba3375cb00e33ca901d61a5acd6c2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f4009e7b.failed

Move perf_evlist__add_pollfd() from tools/perf to libperf, it will be
used in the following patches.

Also rename perf's perf_evlist__add_pollfd()/perf_evlist__filter_pollfd()
to evlist__add_pollfd()/evlist__filter_pollfd().

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-38-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f4009e7bf7ba3375cb00e33ca901d61a5acd6c2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,051be9a31db9..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -424,47 -398,9 +424,53 @@@ int perf_evlist__enable_event_idx(struc
  		return perf_evlist__enable_event_thread(evlist, evsel, idx);
  }
  
++<<<<<<< HEAD
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist)
 +{
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
 +	int nr_threads = thread_map__nr(evlist->threads);
 +	int nfds = 0;
 +	struct perf_evsel *evsel;
 +
 +	evlist__for_each_entry(evlist, evsel) {
 +		if (evsel->system_wide)
 +			nfds += nr_cpus;
 +		else
 +			nfds += nr_cpus * nr_threads;
 +	}
 +
 +	if (fdarray__available_entries(&evlist->pollfd) < nfds &&
 +	    fdarray__grow(&evlist->pollfd, nfds) < 0)
 +		return -ENOMEM;
 +
 +	return 0;
 +}
 +
 +static int __perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd,
 +				     struct perf_mmap *map, short revent)
 +{
 +	int pos = fdarray__add(&evlist->pollfd, fd, revent | POLLERR | POLLHUP);
 +	/*
 +	 * Save the idx so that when we filter out fds POLLHUP'ed we can
 +	 * close the associated evlist->mmap[] entry.
 +	 */
 +	if (pos >= 0) {
 +		evlist->pollfd.priv[pos].ptr = map;
 +
 +		fcntl(fd, F_SETFL, O_NONBLOCK);
 +	}
 +
 +	return pos;
 +}
 +
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd)
 +{
 +	return __perf_evlist__add_pollfd(evlist, fd, NULL, POLLIN);
++=======
+ int evlist__add_pollfd(struct evlist *evlist, int fd)
+ {
+ 	return perf_evlist__add_pollfd(&evlist->core, fd, NULL, POLLIN);
++>>>>>>> f4009e7bf7ba (libperf: Add perf_evlist__add_pollfd() function)
  }
  
  static void perf_evlist__munmap_filtered(struct fdarray *fda, int fd,
@@@ -476,9 -412,9 +482,13 @@@
  		perf_mmap__put(map);
  }
  
++<<<<<<< HEAD
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask)
++=======
+ int evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask)
++>>>>>>> f4009e7bf7ba (libperf: Add perf_evlist__add_pollfd() function)
  {
 -	return fdarray__filter(&evlist->core.pollfd, revents_and_mask,
 +	return fdarray__filter(&evlist->pollfd, revents_and_mask,
  			       perf_evlist__munmap_filtered, NULL);
  }
  
@@@ -815,8 -690,8 +825,13 @@@ static int perf_evlist__mmap_per_evsel(
  		 * other events, so it should not need to be polled anyway.
  		 * Therefore don't add it for polling.
  		 */
++<<<<<<< HEAD
 +		if (!evsel->system_wide &&
 +		    __perf_evlist__add_pollfd(evlist, fd, &maps[idx], revent) < 0) {
++=======
+ 		if (!evsel->core.system_wide &&
+ 		     perf_evlist__add_pollfd(&evlist->core, fd, &maps[idx], revent) < 0) {
++>>>>>>> f4009e7bf7ba (libperf: Add perf_evlist__add_pollfd() function)
  			perf_mmap__put(&maps[idx]);
  			return -1;
  		}
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,2eac8aab24a3..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -113,41 -130,34 +113,46 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
 -int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
 -int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
 -int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
 +int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
 +int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
 +int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
  				     const char *name);
  
++<<<<<<< HEAD
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd);
++=======
+ int evlist__add_pollfd(struct evlist *evlist, int fd);
+ int evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
++>>>>>>> f4009e7bf7ba (libperf: Add perf_evlist__add_pollfd() function)
 +
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
  
 -int perf_evlist__poll(struct evlist *evlist, int timeout);
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
  
 -struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
 -struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
  						u64 id);
  
 -struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
 +struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
  
 -void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
 +void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
  
 -void evlist__mmap_consume(struct evlist *evlist, int idx);
 +void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
  
 -int evlist__open(struct evlist *evlist);
 -void evlist__close(struct evlist *evlist);
 +int perf_evlist__open(struct perf_evlist *evlist);
 +void perf_evlist__close(struct perf_evlist *evlist);
  
  struct callchain_param;
  
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index d30bd54b42ac..5ddecf2e6af4 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -962,10 +962,10 @@ static int kvm_events_live_report(struct perf_kvm_stat *kvm)
 		goto out;
 	}
 
-	if (perf_evlist__add_pollfd(kvm->evlist, kvm->timerfd) < 0)
+	if (evlist__add_pollfd(kvm->evlist, kvm->timerfd) < 0)
 		goto out;
 
-	nr_stdin = perf_evlist__add_pollfd(kvm->evlist, fileno(stdin));
+	nr_stdin = evlist__add_pollfd(kvm->evlist, fileno(stdin));
 	if (nr_stdin < 0)
 		goto out;
 
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index de0619148499..36e9d7bfb53a 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1629,7 +1629,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 				err = 0;
 			waking++;
 
-			if (perf_evlist__filter_pollfd(rec->evlist, POLLERR | POLLHUP) == 0)
+			if (evlist__filter_pollfd(rec->evlist, POLLERR | POLLHUP) == 0)
 				draining = true;
 		}
 
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 4b81b4c2c4c2..01491b0f0a62 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -3467,7 +3467,7 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 		int timeout = done ? 100 : -1;
 
 		if (!draining && perf_evlist__poll(evlist, timeout) > 0) {
-			if (perf_evlist__filter_pollfd(evlist, POLLERR | POLLHUP | POLLNVAL) == 0)
+			if (evlist__filter_pollfd(evlist, POLLERR | POLLHUP | POLLNVAL) == 0)
 				draining = true;
 
 			goto again;
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
