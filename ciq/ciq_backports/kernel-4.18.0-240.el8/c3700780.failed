xprtrdma: Fix MR list handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit c3700780a096fc66467c81076ddf7f3f11d639b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c3700780.failed

Close some holes introduced by commit 6dc6ec9e04c4 ("xprtrdma: Cache
free MRs in each rpcrdma_req") that could result in list corruption.

In addition, the result that is tabulated in @count is no longer
used, so @count is removed.

Fixes: 6dc6ec9e04c4 ("xprtrdma: Cache free MRs in each rpcrdma_req")
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit c3700780a096fc66467c81076ddf7f3f11d639b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtrdma/verbs.c
diff --cc net/sunrpc/xprtrdma/verbs.c
index cfae694214c1,82361e7bbb51..000000000000
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@@ -962,15 -964,13 +962,22 @@@ rpcrdma_mrs_create(struct rpcrdma_xprt 
  
  		mr->mr_xprt = r_xprt;
  
++<<<<<<< HEAD
 +		list_add(&mr->mr_list, &free);
 +		list_add(&mr->mr_all, &all);
++=======
+ 		spin_lock(&buf->rb_lock);
+ 		rpcrdma_mr_push(mr, &buf->rb_mrs);
+ 		list_add(&mr->mr_all, &buf->rb_all_mrs);
+ 		spin_unlock(&buf->rb_lock);
++>>>>>>> c3700780a096 (xprtrdma: Fix MR list handling)
  	}
  
 +	spin_lock(&buf->rb_mrlock);
 +	list_splice(&free, &buf->rb_mrs);
 +	list_splice(&all, &buf->rb_all);
  	r_xprt->rx_stats.mrs_allocated += count;
 +	spin_unlock(&buf->rb_mrlock);
  	trace_xprtrdma_createmrs(r_xprt, count);
  }
  
@@@ -1148,11 -1180,22 +1155,26 @@@ static void rpcrdma_rep_destroy(struct 
   * This function assumes that the caller prevents concurrent device
   * unload and transport tear-down.
   */
 -void rpcrdma_req_destroy(struct rpcrdma_req *req)
 +void
 +rpcrdma_req_destroy(struct rpcrdma_req *req)
  {
+ 	struct rpcrdma_mr *mr;
+ 
  	list_del(&req->rl_all);
  
++<<<<<<< HEAD
++=======
+ 	while ((mr = rpcrdma_mr_pop(&req->rl_free_mrs))) {
+ 		struct rpcrdma_buffer *buf = &mr->mr_xprt->rx_buf;
+ 
+ 		spin_lock(&buf->rb_lock);
+ 		list_del(&mr->mr_all);
+ 		spin_unlock(&buf->rb_lock);
+ 
+ 		frwr_release_mr(mr);
+ 	}
+ 
++>>>>>>> c3700780a096 (xprtrdma: Fix MR list handling)
  	rpcrdma_regbuf_free(req->rl_recvbuf);
  	rpcrdma_regbuf_free(req->rl_sendbuf);
  	rpcrdma_regbuf_free(req->rl_rdmabuf);
@@@ -1165,28 -1214,20 +1193,39 @@@ static void rpcrdma_mrs_destroy(struct 
  	struct rpcrdma_xprt *r_xprt = container_of(buf, struct rpcrdma_xprt,
  						   rx_buf);
  	struct rpcrdma_mr *mr;
- 	unsigned int count;
  
++<<<<<<< HEAD
 +	count = 0;
 +	spin_lock(&buf->rb_mrlock);
 +	while (!list_empty(&buf->rb_all)) {
 +		mr = list_entry(buf->rb_all.next, struct rpcrdma_mr, mr_all);
++=======
+ 	spin_lock(&buf->rb_lock);
+ 	while ((mr = list_first_entry_or_null(&buf->rb_all_mrs,
+ 					      struct rpcrdma_mr,
+ 					      mr_all)) != NULL) {
+ 		list_del(&mr->mr_list);
++>>>>>>> c3700780a096 (xprtrdma: Fix MR list handling)
  		list_del(&mr->mr_all);
 -		spin_unlock(&buf->rb_lock);
 +
 +		spin_unlock(&buf->rb_mrlock);
 +
 +		/* Ensure MW is not on any rl_registered list */
 +		if (!list_empty(&mr->mr_list))
 +			list_del(&mr->mr_list);
  
  		frwr_release_mr(mr);
++<<<<<<< HEAD
 +		count++;
 +		spin_lock(&buf->rb_mrlock);
++=======
+ 		spin_lock(&buf->rb_lock);
++>>>>>>> c3700780a096 (xprtrdma: Fix MR list handling)
  	}
 -	spin_unlock(&buf->rb_lock);
 +	spin_unlock(&buf->rb_mrlock);
  	r_xprt->rx_stats.mrs_allocated = 0;
 +
 +	dprintk("RPC:       %s: released %u MRs\n", __func__, count);
  }
  
  /**
@@@ -1293,7 -1292,8 +1332,12 @@@ rpcrdma_mr_unmap_and_put(struct rpcrdma
  				mr->mr_sg, mr->mr_nents, mr->mr_dir);
  		mr->mr_dir = DMA_NONE;
  	}
++<<<<<<< HEAD
 +	__rpcrdma_mr_put(&r_xprt->rx_buf, mr);
++=======
+ 
+ 	rpcrdma_mr_push(mr, &mr->mr_req->rl_free_mrs);
++>>>>>>> c3700780a096 (xprtrdma: Fix MR list handling)
  }
  
  /**
* Unmerged path net/sunrpc/xprtrdma/verbs.c
