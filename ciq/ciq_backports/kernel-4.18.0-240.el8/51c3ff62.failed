io_uring: add completion trace event

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jens Axboe <axboe@kernel.dk>
commit 51c3ff62cac635ae9d75f875ce5b7bdafc97abd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/51c3ff62.failed

We currently don't have a completion event trace, add one of those. And
to better be able to match up submissions and completions, add user_data
to the submission trace as well.

	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 51c3ff62cac635ae9d75f875ce5b7bdafc97abd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
#	include/trace/events/io_uring.h
diff --cc fs/io_uring.c
index fca9cdc96d77,7813bc7d5b61..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -2447,16 -2732,12 +2449,25 @@@ static int io_submit_sqes(struct io_rin
  		}
  
  out:
++<<<<<<< HEAD
 +		if (unlikely(mm_fault)) {
 +			io_cqring_add_event(ctx, sqes[i].sqe->user_data,
 +						-EFAULT);
 +		} else {
 +			sqes[i].has_user = has_user;
 +			sqes[i].needs_lock = true;
 +			sqes[i].needs_fixed_file = true;
 +			io_submit_sqe(ctx, &sqes[i], statep, &link, true);
 +			submitted++;
 +		}
++=======
+ 		s.has_user = *mm != NULL;
+ 		s.in_async = true;
+ 		s.needs_fixed_file = true;
+ 		trace_io_uring_submit_sqe(ctx, s.sqe->user_data, true, true);
+ 		io_submit_sqe(ctx, &s, statep, &link);
+ 		submitted++;
++>>>>>>> 51c3ff62cac6 (io_uring: add completion trace event)
  	}
  
  	if (link)
@@@ -2650,22 -2909,14 +2661,27 @@@ static int io_ring_submit(struct io_rin
  		}
  
  out:
 -		s.ring_file = ring_file;
  		s.has_user = true;
 -		s.in_async = false;
 +		s.needs_lock = false;
  		s.needs_fixed_file = false;
 -		s.ring_fd = ring_fd;
  		submit++;
++<<<<<<< HEAD
 +
 +		/*
 +		 * The caller will block for events after submit, submit the
 +		 * last IO non-blocking. This is either the only IO it's
 +		 * submitting, or it already submitted the previous ones. This
 +		 * improves performance by avoiding an async punt that we don't
 +		 * need to do.
 +		 */
 +		if (block_for_last && submit == to_submit)
 +			force_nonblock = false;
 +
 +		io_submit_sqe(ctx, &s, statep, &link, force_nonblock);
++=======
+ 		trace_io_uring_submit_sqe(ctx, s.sqe->user_data, true, false);
+ 		io_submit_sqe(ctx, &s, statep, &link);
++>>>>>>> 51c3ff62cac6 (io_uring: add completion trace event)
  	}
  
  	if (link)
* Unmerged path include/trace/events/io_uring.h
* Unmerged path fs/io_uring.c
* Unmerged path include/trace/events/io_uring.h
