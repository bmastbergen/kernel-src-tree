perf intel-pt: Process options for PEBS event synthesis

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 9e64cefe4335b0f2799956d3f3cca8bb652d950f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9e64cefe.failed

Process synth_opts.other_events and attr.aux_output to set up for
synthesizing PEBs via Intel PT events.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kan Liang <kan.liang@linux.intel.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190806084606.4021-6-alexander.shishkin@linux.intel.com
	Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
[ Fixed up libbperf clashes, i.e. some places using perf_evsel (now in libperf)
  need to use instead 'evsel' (a tools/perf only abstraction) ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9e64cefe4335b0f2799956d3f3cca8bb652d950f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/intel-pt.c
diff --cc tools/perf/util/intel-pt.c
index c05fafa87b14,ea504fa9b623..000000000000
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@@ -2903,9 -2894,25 +2903,29 @@@ static int intel_pt_synth_events(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *intel_pt_find_sched_switch(struct perf_evlist *evlist)
++=======
+ static void intel_pt_setup_pebs_events(struct intel_pt *pt)
+ {
+ 	struct evsel *evsel;
+ 
+ 	if (!pt->synth_opts.other_events)
+ 		return;
+ 
+ 	evlist__for_each_entry(pt->session->evlist, evsel) {
+ 		if (evsel->core.attr.aux_output && evsel->id) {
+ 			pt->sample_pebs = true;
+ 			pt->pebs_evsel = evsel;
+ 			return;
+ 		}
+ 	}
+ }
+ 
+ static struct evsel *intel_pt_find_sched_switch(struct evlist *evlist)
++>>>>>>> 9e64cefe4335 (perf intel-pt: Process options for PEBS event synthesis)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry_reverse(evlist, evsel) {
  		const char *name = perf_evsel__name(evsel);
diff --git a/tools/perf/arch/x86/util/intel-pt.c b/tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4..7aedfdb03683 100644
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@ -557,6 +557,26 @@ static int intel_pt_validate_config(struct perf_pmu *intel_pt_pmu,
 					evsel->attr.config);
 }
 
+/*
+ * Currently, there is not enough information to disambiguate different PEBS
+ * events, so only allow one.
+ */
+static bool intel_pt_too_many_aux_output(struct evlist *evlist)
+{
+	struct evsel *evsel;
+	int aux_output_cnt = 0;
+
+	evlist__for_each_entry(evlist, evsel)
+		aux_output_cnt += !!evsel->core.attr.aux_output;
+
+	if (aux_output_cnt > 1) {
+		pr_err(INTEL_PT_PMU_NAME " supports at most one event with aux-output\n");
+		return true;
+	}
+
+	return false;
+}
+
 static int intel_pt_recording_options(struct auxtrace_record *itr,
 				      struct perf_evlist *evlist,
 				      struct record_opts *opts)
@@ -597,6 +617,9 @@ static int intel_pt_recording_options(struct auxtrace_record *itr,
 		return -EINVAL;
 	}
 
+	if (intel_pt_too_many_aux_output(evlist))
+		return -EINVAL;
+
 	if (!opts->full_auxtrace)
 		return 0;
 
* Unmerged path tools/perf/util/intel-pt.c
