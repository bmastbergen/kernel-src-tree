bpf: Restrict bpf_probe_read{, str}() only to archs where they work

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 0ebeea8ca8a4d1d453ad299aef0507dab04f6e8d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0ebeea8c.failed

Given the legacy bpf_probe_read{,str}() BPF helpers are broken on archs
with overlapping address ranges, we should really take the next step to
disable them from BPF use there.

To generally fix the situation, we've recently added new helper variants
bpf_probe_read_{user,kernel}() and bpf_probe_read_{user,kernel}_str().
For details on them, see 6ae08ae3dea2 ("bpf: Add probe_read_{user, kernel}
and probe_read_{user,kernel}_str helpers").

Given bpf_probe_read{,str}() have been around for ~5 years by now, there
are plenty of users at least on x86 still relying on them today, so we
cannot remove them entirely w/o breaking the BPF tracing ecosystem.

However, their use should be restricted to archs with non-overlapping
address ranges where they are working in their current form. Therefore,
move this behind a CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE and
have x86, arm64, arm select it (other archs supporting it can follow-up
on it as well).

For the remaining archs, they can workaround easily by relying on the
feature probe from bpftool which spills out defines that can be used out
of BPF C code to implement the drop-in replacement for old/new kernels
via: bpftool feature probe macro

	Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
	Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/bpf/20200515101118.6508-2-daniel@iogearbox.net
(cherry picked from commit 0ebeea8ca8a4d1d453ad299aef0507dab04f6e8d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/Kconfig
#	arch/arm64/Kconfig
#	kernel/trace/bpf_trace.c
diff --cc arch/arm/Kconfig
index c23576a9a9d8,c77c93c485a0..000000000000
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@@ -2,15 -2,20 +2,20 @@@
  config ARM
  	bool
  	default y
 -	select ARCH_32BIT_OFF_T
 -	select ARCH_HAS_BINFMT_FLAT
 +	select ARCH_CLOCKSOURCE_DATA
 +	select ARCH_DISCARD_MEMBLOCK if !HAVE_ARCH_PFN_VALID && !KEXEC
  	select ARCH_HAS_DEBUG_VIRTUAL if MMU
  	select ARCH_HAS_DEVMEM_IS_ALLOWED
 -	select ARCH_HAS_DMA_WRITE_COMBINE if !ARM_DMA_MEM_BUFFERABLE
  	select ARCH_HAS_ELF_RANDOMIZE
  	select ARCH_HAS_FORTIFY_SOURCE
 -	select ARCH_HAS_KEEPINITRD
  	select ARCH_HAS_KCOV
++<<<<<<< HEAD
++=======
+ 	select ARCH_HAS_MEMBARRIER_SYNC_CORE
+ 	select ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
++>>>>>>> 0ebeea8ca8a4 (bpf: Restrict bpf_probe_read{, str}() only to archs where they work)
  	select ARCH_HAS_PTE_SPECIAL if ARM_LPAE
  	select ARCH_HAS_PHYS_TO_DMA
 -	select ARCH_HAS_SETUP_DMA_OPS
  	select ARCH_HAS_SET_MEMORY
  	select ARCH_HAS_STRICT_KERNEL_RWX if MMU && !XIP_KERNEL
  	select ARCH_HAS_STRICT_MODULE_RWX if MMU
diff --cc arch/arm64/Kconfig
index 347f141befab,5d513f461957..000000000000
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -19,9 -16,12 +19,14 @@@ config ARM6
  	select ARCH_HAS_FAST_MULTIPLIER
  	select ARCH_HAS_FORTIFY_SOURCE
  	select ARCH_HAS_GCOV_PROFILE_ALL
 -	select ARCH_HAS_GIGANTIC_PAGE
 +	select ARCH_HAS_GIGANTIC_PAGE if (MEMORY_ISOLATION && COMPACTION) || CMA
  	select ARCH_HAS_KCOV
 -	select ARCH_HAS_KEEPINITRD
  	select ARCH_HAS_MEMBARRIER_SYNC_CORE
++<<<<<<< HEAD
++=======
+ 	select ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
+ 	select ARCH_HAS_PTE_DEVMAP
++>>>>>>> 0ebeea8ca8a4 (bpf: Restrict bpf_probe_read{, str}() only to archs where they work)
  	select ARCH_HAS_PTE_SPECIAL
  	select ARCH_HAS_SETUP_DMA_OPS
  	select ARCH_HAS_SET_DIRECT_MAP
diff --cc kernel/trace/bpf_trace.c
index 2425aaf4e9d9,b83bdaa31c7b..000000000000
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@@ -746,8 -821,20 +746,25 @@@ tracing_func_proto(enum bpf_func_id fun
  		return &bpf_current_task_under_cgroup_proto;
  	case BPF_FUNC_get_prandom_u32:
  		return &bpf_get_prandom_u32_proto;
++<<<<<<< HEAD
 +	case BPF_FUNC_probe_read_str:
 +		return &bpf_probe_read_str_proto;
++=======
+ 	case BPF_FUNC_probe_read_user:
+ 		return &bpf_probe_read_user_proto;
+ 	case BPF_FUNC_probe_read_kernel:
+ 		return &bpf_probe_read_kernel_proto;
+ 	case BPF_FUNC_probe_read_user_str:
+ 		return &bpf_probe_read_user_str_proto;
+ 	case BPF_FUNC_probe_read_kernel_str:
+ 		return &bpf_probe_read_kernel_str_proto;
+ #ifdef CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
+ 	case BPF_FUNC_probe_read:
+ 		return &bpf_probe_read_compat_proto;
+ 	case BPF_FUNC_probe_read_str:
+ 		return &bpf_probe_read_compat_str_proto;
+ #endif
++>>>>>>> 0ebeea8ca8a4 (bpf: Restrict bpf_probe_read{, str}() only to archs where they work)
  #ifdef CONFIG_CGROUPS
  	case BPF_FUNC_get_current_cgroup_id:
  		return &bpf_get_current_cgroup_id_proto;
* Unmerged path arch/arm/Kconfig
* Unmerged path arch/arm64/Kconfig
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index e4d5b7411273..5c4471c5a848 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -60,6 +60,7 @@ config X86
 	select ARCH_HAS_KCOV			if X86_64
 	select ARCH_HAS_MEM_ENCRYPT
 	select ARCH_HAS_MEMBARRIER_SYNC_CORE
+	select ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
 	select ARCH_HAS_PMEM_API		if X86_64
 	select ARCH_HAS_PTE_SPECIAL
 	select ARCH_HAS_REFCOUNT
diff --git a/init/Kconfig b/init/Kconfig
index 3b1ea0bbdb4e..ad975800ac62 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -2047,6 +2047,9 @@ config ASN1
 
 source "kernel/Kconfig.locks"
 
+config ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
+	bool
+
 config ARCH_HAS_SYNC_CORE_BEFORE_USERMODE
 	bool
 
* Unmerged path kernel/trace/bpf_trace.c
