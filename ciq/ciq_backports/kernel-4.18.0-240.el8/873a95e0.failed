drm/dp_mst: Increase ACT retry timeout to 3s

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Lyude Paul <lyude@redhat.com>
commit 873a95e0d59ac06901ae261dda0b7165ffd002b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/873a95e0.failed

Currently we only poll for an ACT up to 30 times, with a busy-wait delay
of 100µs between each attempt - giving us a timeout of 2900µs. While
this might seem sensible, it would appear that in certain scenarios it
can take dramatically longer then that for us to receive an ACT. On one
of the EVGA MST hubs that I have available, I observed said hub
sometimes taking longer then a second before signalling the ACT. These
delays mostly seem to occur when previous sideband messages we've sent
are NAKd by the hub, however it wouldn't be particularly surprising if
it's possible to reproduce times like this simply by introducing branch
devices with large LCTs since payload allocations have to take effect on
every downstream device up to the payload's target.

So, instead of just retrying 30 times we poll for the ACT for up to 3ms,
and additionally use usleep_range() to avoid a very long and rude
busy-wait. Note that the previous retry count of 30 appears to have been
arbitrarily chosen, as I can't find any mention of a recommended timeout
or retry count for ACTs in the DisplayPort 2.0 specification. This also
goes for the range we were previously using for udelay(), although I
suspect that was just copied from the recommended delay for link
training on SST devices.

Changes since v1:
* Use readx_poll_timeout() instead of open-coding timeout loop - Sean
  Paul
Changes since v2:
* Increase poll interval to 200us - Sean Paul
* Print status in hex when we timeout waiting for ACT - Sean Paul

	Signed-off-by: Lyude Paul <lyude@redhat.com>
Fixes: ad7f8a1f9ced ("drm/helper: add Displayport multi-stream helper (v0.6)")
	Cc: Sean Paul <sean@poorly.run>
	Cc: <stable@vger.kernel.org> # v3.17+
	Reviewed-by: Sean Paul <sean@poorly.run>
Link: https://patchwork.freedesktop.org/patch/msgid/20200406221253.1307209-4-lyude@redhat.com
(cherry picked from commit 873a95e0d59ac06901ae261dda0b7165ffd002b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_dp_mst_topology.c
diff --cc drivers/gpu/drm/drm_dp_mst_topology.c
index d0032feb394e,8942ab98ab64..000000000000
--- a/drivers/gpu/drm/drm_dp_mst_topology.c
+++ b/drivers/gpu/drm/drm_dp_mst_topology.c
@@@ -27,7 -27,15 +27,8 @@@
  #include <linux/kernel.h>
  #include <linux/sched.h>
  #include <linux/seq_file.h>
+ #include <linux/iopoll.h>
  
 -#if IS_ENABLED(CONFIG_DRM_DEBUG_DP_MST_TOPOLOGY_REFS)
 -#include <linux/stacktrace.h>
 -#include <linux/sort.h>
 -#include <linux/timekeeping.h>
 -#include <linux/math64.h>
 -#endif
 -
  #include <drm/drm_atomic.h>
  #include <drm/drm_atomic_helper.h>
  #include <drm/drm_dp_mst_helper.h>
@@@ -3377,12 -4439,28 +3378,32 @@@ fail
  	return ret;
  }
  
+ static int do_get_act_status(struct drm_dp_aux *aux)
+ {
+ 	int ret;
+ 	u8 status;
+ 
+ 	ret = drm_dp_dpcd_readb(aux, DP_PAYLOAD_TABLE_UPDATE_STATUS, &status);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	return status;
+ }
  
  /**
 - * drm_dp_check_act_status() - Polls for ACT handled status.
 + * drm_dp_check_act_status() - Check ACT handled status.
   * @mgr: manager to use
   *
++<<<<<<< HEAD
 + * Check the payload status bits in the DPCD for ACT handled completion.
++=======
+  * Tries waiting for the MST hub to finish updating it's payload table by
+  * polling for the ACT handled bit for up to 3 seconds (yes-some hubs really
+  * take that long).
+  *
+  * Returns:
+  * 0 if the ACT was handled in time, negative error code on failure.
++>>>>>>> 873a95e0d59a (drm/dp_mst: Increase ACT retry timeout to 3s)
   */
  int drm_dp_check_act_status(struct drm_dp_mst_topology_mgr *mgr)
  {
* Unmerged path drivers/gpu/drm/drm_dp_mst_topology.c
