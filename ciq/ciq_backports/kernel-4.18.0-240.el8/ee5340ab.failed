EDAC, {skx,i10nm}: Make some configurations CPU model specific

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [edac] EDAC, {skx, i10nm}: Make some configurations CPU model specific (Aristeu Rozanski) [1838508]
Rebuild_FUZZ: 99.20%
commit-author Qiuxu Zhuo <qiuxu.zhuo@intel.com>
commit ee5340abab3babb91c1807cea47de4468b2dfc91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ee5340ab.failed

The device ID for configuration agent PCI device and the offset for
bus number configuration register can be CPU model specific. So add
a new structure res_config to make them configurable and pass res_config
to {skx,i10nm}_init() and skx_get_all_bus_mappings() for use.

	Signed-off-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
	Signed-off-by: Tony Luck <tony.luck@intel.com>
	Reviewed-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20200427083246.GB11036@zn.tnic
(cherry picked from commit ee5340abab3babb91c1807cea47de4468b2dfc91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/i10nm_base.c
#	drivers/edac/skx_base.c
diff --cc drivers/edac/i10nm_base.c
index c370d5457e6b,20859dcf5239..000000000000
--- a/drivers/edac/i10nm_base.c
+++ b/drivers/edac/i10nm_base.c
@@@ -122,11 -122,17 +122,24 @@@ static int i10nm_get_all_munits(void
  	return 0;
  }
  
+ static struct res_config i10nm_cfg = {
+ 	.type			= I10NM,
+ 	.decs_did		= 0x3452,
+ 	.busno_cfg_offset	= 0xcc,
+ };
+ 
  static const struct x86_cpu_id i10nm_cpuids[] = {
++<<<<<<< HEAD
 +	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_TREMONT_D, 0, 0 },
 +	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ICELAKE_X, 0, 0 },
 +	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ICELAKE_D, 0, 0 },
 +	{ }
++=======
+ 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_TREMONT_D,	&i10nm_cfg),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_X,		&i10nm_cfg),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_D,		&i10nm_cfg),
+ 	{}
++>>>>>>> ee5340abab3b (EDAC, {skx,i10nm}: Make some configurations CPU model specific)
  };
  MODULE_DEVICE_TABLE(x86cpu, i10nm_cpuids);
  
diff --cc drivers/edac/skx_base.c
index 0fcf3785e8f3,94c942fd06c1..000000000000
--- a/drivers/edac/skx_base.c
+++ b/drivers/edac/skx_base.c
@@@ -145,8 -157,14 +145,18 @@@ fail
  	return -ENODEV;
  }
  
+ static struct res_config skx_cfg = {
+ 	.type			= SKX,
+ 	.decs_did		= 0x2016,
+ 	.busno_cfg_offset	= 0xcc,
+ };
+ 
  static const struct x86_cpu_id skx_cpuids[] = {
++<<<<<<< HEAD
 +	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_SKYLAKE_X, 0, 0 },
++=======
+ 	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE_X,	&skx_cfg),
++>>>>>>> ee5340abab3b (EDAC, {skx,i10nm}: Make some configurations CPU model specific)
  	{ }
  };
  MODULE_DEVICE_TABLE(x86cpu, skx_cpuids);
* Unmerged path drivers/edac/i10nm_base.c
* Unmerged path drivers/edac/skx_base.c
diff --git a/drivers/edac/skx_common.c b/drivers/edac/skx_common.c
index a04349c6d17e..d4223ff029de 100644
--- a/drivers/edac/skx_common.c
+++ b/drivers/edac/skx_common.c
@@ -176,12 +176,11 @@ static int get_width(u32 mtr)
 }
 
 /*
- * We use the per-socket device @did to count how many sockets are present,
+ * We use the per-socket device @cfg->did to count how many sockets are present,
  * and to detemine which PCI buses are associated with each socket. Allocate
  * and build the full list of all the skx_dev structures that we need here.
  */
-int skx_get_all_bus_mappings(unsigned int did, int off, enum type type,
-			     struct list_head **list)
+int skx_get_all_bus_mappings(struct res_config *cfg, struct list_head **list)
 {
 	struct pci_dev *pdev, *prev;
 	struct skx_dev *d;
@@ -190,7 +189,7 @@ int skx_get_all_bus_mappings(unsigned int did, int off, enum type type,
 
 	prev = NULL;
 	for (;;) {
-		pdev = pci_get_device(PCI_VENDOR_ID_INTEL, did, prev);
+		pdev = pci_get_device(PCI_VENDOR_ID_INTEL, cfg->decs_did, prev);
 		if (!pdev)
 			break;
 		ndev++;
@@ -200,7 +199,7 @@ int skx_get_all_bus_mappings(unsigned int did, int off, enum type type,
 			return -ENOMEM;
 		}
 
-		if (pci_read_config_dword(pdev, off, &reg)) {
+		if (pci_read_config_dword(pdev, cfg->busno_cfg_offset, &reg)) {
 			kfree(d);
 			pci_dev_put(pdev);
 			skx_printk(KERN_ERR, "Failed to read bus idx\n");
@@ -209,7 +208,7 @@ int skx_get_all_bus_mappings(unsigned int did, int off, enum type type,
 
 		d->bus[0] = GET_BITFIELD(reg, 0, 7);
 		d->bus[1] = GET_BITFIELD(reg, 8, 15);
-		if (type == SKX) {
+		if (cfg->type == SKX) {
 			d->seg = pci_domain_nr(pdev->bus);
 			d->bus[2] = GET_BITFIELD(reg, 16, 23);
 			d->bus[3] = GET_BITFIELD(reg, 24, 31);
diff --git a/drivers/edac/skx_common.h b/drivers/edac/skx_common.h
index 08cc971a50ea..0cb17a3c9550 100644
--- a/drivers/edac/skx_common.h
+++ b/drivers/edac/skx_common.h
@@ -111,6 +111,14 @@ struct decoded_addr {
 	int	bank_group;
 };
 
+struct res_config {
+	enum type type;
+	/* Configuration agent device ID */
+	unsigned int decs_did;
+	/* Default bus number configuration register offset */
+	int busno_cfg_offset;
+};
+
 typedef int (*get_dimm_config_f)(struct mem_ctl_info *mci);
 typedef bool (*skx_decode_f)(struct decoded_addr *res);
 
@@ -121,8 +129,7 @@ void skx_set_decode(skx_decode_f decode);
 int skx_get_src_id(struct skx_dev *d, int off, u8 *id);
 int skx_get_node_id(struct skx_dev *d, u8 *id);
 
-int skx_get_all_bus_mappings(unsigned int did, int off, enum type,
-			     struct list_head **list);
+int skx_get_all_bus_mappings(struct res_config *cfg, struct list_head **list);
 
 int skx_get_hi_lo(unsigned int did, int off[], u64 *tolm, u64 *tohm);
 
