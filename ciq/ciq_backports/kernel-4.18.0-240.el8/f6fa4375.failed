libperf: Move 'mmap_len' from 'struct evlist' to 'struct perf_evlist'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit f6fa437577937265dacd4637608f4cf0a1a928dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f6fa4375.failed

Moving 'mmap_len' from 'struct evlist' to 'struct perf_evlist' it will
be used in following patches.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-22-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f6fa437577937265dacd4637608f4cf0a1a928dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,4d8cde099e10..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -1034,11 -1012,11 +1034,17 @@@ int perf_evlist__mmap_ex(struct perf_ev
  	if (evlist->pollfd.entries == NULL && perf_evlist__alloc_pollfd(evlist) < 0)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	evlist->mmap_len = perf_evlist__mmap_size(pages);
 +	pr_debug("mmap size %zuB\n", evlist->mmap_len);
 +	mp.mask = evlist->mmap_len - page_size - 1;
++=======
+ 	evlist->core.mmap_len = evlist__mmap_size(pages);
+ 	pr_debug("mmap size %zuB\n", evlist->core.mmap_len);
+ 	mp.mask = evlist->core.mmap_len - page_size - 1;
++>>>>>>> f6fa43757793 (libperf: Move 'mmap_len' from 'struct evlist' to 'struct perf_evlist')
  
- 	auxtrace_mmap_params__init(&mp.auxtrace_mp, evlist->mmap_len,
+ 	auxtrace_mmap_params__init(&mp.auxtrace_mp, evlist->core.mmap_len,
  				   auxtrace_pages, auxtrace_overwrite);
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -1642,10 -1597,10 +1648,10 @@@ out_default
  	return 0;
  }
  
 -int perf_evlist__strerror_mmap(struct evlist *evlist, int err, char *buf, size_t size)
 +int perf_evlist__strerror_mmap(struct perf_evlist *evlist, int err, char *buf, size_t size)
  {
  	char sbuf[STRERR_BUFSIZE], *emsg = str_error_r(err, sbuf, sizeof(sbuf));
- 	int pages_attempted = evlist->mmap_len / 1024, pages_max_per_user, printed = 0;
+ 	int pages_attempted = evlist->core.mmap_len / 1024, pages_max_per_user, printed = 0;
  
  	switch (err) {
  	case EPERM:
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,765cee8bced1..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -24,15 -23,39 +24,18 @@@ struct record_opts
  #define PERF_EVLIST__HLIST_BITS 8
  #define PERF_EVLIST__HLIST_SIZE (1 << PERF_EVLIST__HLIST_BITS)
  
 -struct evlist {
 -	struct perf_evlist core;
 +struct perf_evlist {
 +	struct list_head entries;
  	struct hlist_head heads[PERF_EVLIST__HLIST_SIZE];
 +	int		 nr_entries;
  	int		 nr_groups;
 +	int		 nr_mmaps;
  	bool		 enabled;
++<<<<<<< HEAD
 +	bool		 has_user_cpus;
 +	size_t		 mmap_len;
++=======
++>>>>>>> f6fa43757793 (libperf: Move 'mmap_len' from 'struct evlist' to 'struct perf_evlist')
  	int		 id_pos;
  	int		 is_pos;
  	u64		 combined_sample_type;
* Unmerged path tools/perf/lib/include/internal/evlist.h
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index de0619148499..fc4608b7d8c8 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1417,7 +1417,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 		err = -1;
 		goto out_child;
 	}
-	session->header.env.comp_mmap_len = session->evlist->mmap_len;
+	session->header.env.comp_mmap_len = session->evlist->core.mmap_len;
 
 	err = bpf__apply_obj_config();
 	if (err) {
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
