ASoC: SOF: Generic probe compress operations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: SOF: Generic probe compress operations (Jaroslav Kysela) [1797509]
Rebuild_FUZZ: 93.62%
commit-author Cezary Rojewski <cezary.rojewski@intel.com>
commit e145e9af231adff081e0e16e1dacfb6e3c4e968f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e145e9af.failed

Define system-agnostic probe compress flow which serves as a base for
actual, hardware-dependent implementations.
As per firmware spec, maximum of one extraction stream is allowed, while
for injection, there can be plenty.

Apart from probe_pointer, all probe compress operations are mandatory.
Copy operation is defined as unified as its flow should be shared across
all SOF systems.

	Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
	Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20200218143924.10565-6-cezary.rojewski@intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit e145e9af231adff081e0e16e1dacfb6e3c4e968f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/Kconfig
#	sound/soc/sof/Makefile
#	sound/soc/sof/core.c
#	sound/soc/sof/ops.h
diff --cc sound/soc/sof/Kconfig
index 827b0ec92522,4dda4b62509f..000000000000
--- a/sound/soc/sof/Kconfig
+++ b/sound/soc/sof/Kconfig
@@@ -41,6 -41,15 +41,18 @@@ config SND_SOC_SOF_O
  	  required to enable i.MX8 devices.
  	  Say Y if you need this option. If unsure select "N".
  
++<<<<<<< HEAD
++=======
+ config SND_SOC_SOF_DEBUG_PROBES
+ 	bool "SOF enable data probing"
+ 	select SND_SOC_COMPRESS
+ 	help
+ 	  This option enables the data probing feature that can be used to
+ 	  gather data directly from specific points of the audio pipeline.
+ 	  Say Y if you want to enable probes.
+ 	  If unsure, select "N".
+ 
++>>>>>>> e145e9af231a (ASoC: SOF: Generic probe compress operations)
  config SND_SOC_SOF_DEVELOPER_SUPPORT
  	bool "SOF developer options support"
  	depends on EXPERT
diff --cc sound/soc/sof/Makefile
index b0a6f01bdc44,8eca2f85c90e..000000000000
--- a/sound/soc/sof/Makefile
+++ b/sound/soc/sof/Makefile
@@@ -1,7 -1,8 +1,12 @@@
  # SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
  
  snd-sof-objs := core.o ops.o loader.o ipc.o pcm.o pm.o debug.o topology.o\
++<<<<<<< HEAD
 +		control.o trace.o utils.o
++=======
+ 		control.o trace.o utils.o sof-audio.o
+ snd-sof-$(CONFIG_SND_SOC_SOF_DEBUG_PROBES) += probe.o compress.o
++>>>>>>> e145e9af231a (ASoC: SOF: Generic probe compress operations)
  
  snd-sof-pci-objs := sof-pci-dev.o
  snd-sof-acpi-objs := sof-acpi-dev.o
diff --cc sound/soc/sof/core.c
index d8446fb9fdde,91acfae7935c..000000000000
--- a/sound/soc/sof/core.c
+++ b/sound/soc/sof/core.c
@@@ -425,6 -294,10 +428,13 @@@ int snd_sof_device_probe(struct device 
  
  	sdev->pdata = plat_data;
  	sdev->first_boot = true;
++<<<<<<< HEAD
++=======
+ 	sdev->fw_state = SOF_FW_BOOT_NOT_STARTED;
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_PROBES)
+ 	sdev->extractor_stream_tag = SOF_PROBE_INVALID_NODE_ID;
+ #endif
++>>>>>>> e145e9af231a (ASoC: SOF: Generic probe compress operations)
  	dev_set_drvdata(dev, sdev);
  
  	/* check all mandatory ops */
diff --cc sound/soc/sof/ops.h
index 93512dcbaacd,a771500ac442..000000000000
--- a/sound/soc/sof/ops.h
+++ b/sound/soc/sof/ops.h
@@@ -391,6 -393,83 +391,86 @@@ snd_sof_pcm_platform_pointer(struct snd
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_PROBES)
+ static inline int
+ snd_sof_probe_compr_assign(struct snd_sof_dev *sdev,
+ 		struct snd_compr_stream *cstream, struct snd_soc_dai *dai)
+ {
+ 	return sof_ops(sdev)->probe_assign(sdev, cstream, dai);
+ }
+ 
+ static inline int
+ snd_sof_probe_compr_free(struct snd_sof_dev *sdev,
+ 		struct snd_compr_stream *cstream, struct snd_soc_dai *dai)
+ {
+ 	return sof_ops(sdev)->probe_free(sdev, cstream, dai);
+ }
+ 
+ static inline int
+ snd_sof_probe_compr_set_params(struct snd_sof_dev *sdev,
+ 		struct snd_compr_stream *cstream,
+ 		struct snd_compr_params *params, struct snd_soc_dai *dai)
+ {
+ 	return sof_ops(sdev)->probe_set_params(sdev, cstream, params, dai);
+ }
+ 
+ static inline int
+ snd_sof_probe_compr_trigger(struct snd_sof_dev *sdev,
+ 		struct snd_compr_stream *cstream, int cmd,
+ 		struct snd_soc_dai *dai)
+ {
+ 	return sof_ops(sdev)->probe_trigger(sdev, cstream, cmd, dai);
+ }
+ 
+ static inline int
+ snd_sof_probe_compr_pointer(struct snd_sof_dev *sdev,
+ 		struct snd_compr_stream *cstream,
+ 		struct snd_compr_tstamp *tstamp, struct snd_soc_dai *dai)
+ {
+ 	if (sof_ops(sdev) && sof_ops(sdev)->probe_pointer)
+ 		return sof_ops(sdev)->probe_pointer(sdev, cstream, tstamp, dai);
+ 
+ 	return 0;
+ }
+ #endif
+ 
+ /* machine driver */
+ static inline int
+ snd_sof_machine_register(struct snd_sof_dev *sdev, void *pdata)
+ {
+ 	if (sof_ops(sdev) && sof_ops(sdev)->machine_register)
+ 		return sof_ops(sdev)->machine_register(sdev, pdata);
+ 
+ 	return 0;
+ }
+ 
+ static inline void
+ snd_sof_machine_unregister(struct snd_sof_dev *sdev, void *pdata)
+ {
+ 	if (sof_ops(sdev) && sof_ops(sdev)->machine_unregister)
+ 		sof_ops(sdev)->machine_unregister(sdev, pdata);
+ }
+ 
+ static inline void
+ snd_sof_machine_select(struct snd_sof_dev *sdev)
+ {
+ 	if (sof_ops(sdev) && sof_ops(sdev)->machine_select)
+ 		sof_ops(sdev)->machine_select(sdev);
+ }
+ 
+ static inline void
+ snd_sof_set_mach_params(const struct snd_soc_acpi_mach *mach,
+ 			struct device *dev)
+ {
+ 	struct snd_sof_dev *sdev = dev_get_drvdata(dev);
+ 
+ 	if (sof_ops(sdev) && sof_ops(sdev)->set_mach_params)
+ 		sof_ops(sdev)->set_mach_params(mach, dev);
+ }
+ 
++>>>>>>> e145e9af231a (ASoC: SOF: Generic probe compress operations)
  static inline const struct snd_sof_dsp_ops
  *sof_get_ops(const struct sof_dev_desc *d,
  	     const struct sof_ops_table mach_ops[], int asize)
* Unmerged path sound/soc/sof/Kconfig
* Unmerged path sound/soc/sof/Makefile
diff --git a/sound/soc/sof/compress.c b/sound/soc/sof/compress.c
new file mode 100644
index 000000000000..e87cc81a0599
--- /dev/null
+++ b/sound/soc/sof/compress.c
@@ -0,0 +1,141 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2019-2020 Intel Corporation. All rights reserved.
+//
+// Author: Cezary Rojewski <cezary.rojewski@intel.com>
+//
+
+#include <sound/soc.h>
+#include "compress.h"
+#include "ops.h"
+#include "probe.h"
+
+int sof_probe_compr_open(struct snd_compr_stream *cstream,
+		struct snd_soc_dai *dai)
+{
+	struct snd_sof_dev *sdev =
+				snd_soc_component_get_drvdata(dai->component);
+	int ret;
+
+	ret = snd_sof_probe_compr_assign(sdev, cstream, dai);
+	if (ret < 0) {
+		dev_err(dai->dev, "Failed to assign probe stream: %d\n", ret);
+		return ret;
+	}
+
+	sdev->extractor_stream_tag = ret;
+	return 0;
+}
+EXPORT_SYMBOL(sof_probe_compr_open);
+
+int sof_probe_compr_free(struct snd_compr_stream *cstream,
+		struct snd_soc_dai *dai)
+{
+	struct snd_sof_dev *sdev =
+				snd_soc_component_get_drvdata(dai->component);
+	struct sof_probe_point_desc *desc;
+	size_t num_desc;
+	int i, ret;
+
+	/* disconnect all probe points */
+	ret = sof_ipc_probe_points_info(sdev, &desc, &num_desc);
+	if (ret < 0) {
+		dev_err(dai->dev, "Failed to get probe points: %d\n", ret);
+		goto exit;
+	}
+
+	for (i = 0; i < num_desc; i++)
+		sof_ipc_probe_points_remove(sdev, &desc[i].buffer_id, 1);
+	kfree(desc);
+
+exit:
+	ret = sof_ipc_probe_deinit(sdev);
+	if (ret < 0)
+		dev_err(dai->dev, "Failed to deinit probe: %d\n", ret);
+
+	sdev->extractor_stream_tag = SOF_PROBE_INVALID_NODE_ID;
+	snd_compr_free_pages(cstream);
+
+	return snd_sof_probe_compr_free(sdev, cstream, dai);
+}
+EXPORT_SYMBOL(sof_probe_compr_free);
+
+int sof_probe_compr_set_params(struct snd_compr_stream *cstream,
+		struct snd_compr_params *params, struct snd_soc_dai *dai)
+{
+	struct snd_compr_runtime *rtd = cstream->runtime;
+	struct snd_sof_dev *sdev =
+				snd_soc_component_get_drvdata(dai->component);
+	int ret;
+
+	cstream->dma_buffer.dev.type = SNDRV_DMA_TYPE_DEV_SG;
+	cstream->dma_buffer.dev.dev = sdev->dev;
+	ret = snd_compr_malloc_pages(cstream, rtd->buffer_size);
+	if (ret < 0)
+		return ret;
+
+	ret = snd_sof_probe_compr_set_params(sdev, cstream, params, dai);
+	if (ret < 0)
+		return ret;
+
+	ret = sof_ipc_probe_init(sdev, sdev->extractor_stream_tag,
+				 rtd->dma_bytes);
+	if (ret < 0) {
+		dev_err(dai->dev, "Failed to init probe: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(sof_probe_compr_set_params);
+
+int sof_probe_compr_trigger(struct snd_compr_stream *cstream, int cmd,
+		struct snd_soc_dai *dai)
+{
+	struct snd_sof_dev *sdev =
+				snd_soc_component_get_drvdata(dai->component);
+
+	return snd_sof_probe_compr_trigger(sdev, cstream, cmd, dai);
+}
+EXPORT_SYMBOL(sof_probe_compr_trigger);
+
+int sof_probe_compr_pointer(struct snd_compr_stream *cstream,
+		struct snd_compr_tstamp *tstamp, struct snd_soc_dai *dai)
+{
+	struct snd_sof_dev *sdev =
+				snd_soc_component_get_drvdata(dai->component);
+
+	return snd_sof_probe_compr_pointer(sdev, cstream, tstamp, dai);
+}
+EXPORT_SYMBOL(sof_probe_compr_pointer);
+
+int sof_probe_compr_copy(struct snd_compr_stream *cstream,
+		char __user *buf, size_t count)
+{
+	struct snd_compr_runtime *rtd = cstream->runtime;
+	unsigned int offset, n;
+	void *ptr;
+	int ret;
+
+	if (count > rtd->buffer_size)
+		count = rtd->buffer_size;
+
+	div_u64_rem(rtd->total_bytes_transferred, rtd->buffer_size, &offset);
+	ptr = rtd->dma_area + offset;
+	n = rtd->buffer_size - offset;
+
+	if (count < n) {
+		ret = copy_to_user(buf, ptr, count);
+	} else {
+		ret = copy_to_user(buf, ptr, n);
+		ret += copy_to_user(buf + n, rtd->dma_area, count - n);
+	}
+
+	if (ret)
+		return count - ret;
+	return count;
+}
+EXPORT_SYMBOL(sof_probe_compr_copy);
diff --git a/sound/soc/sof/compress.h b/sound/soc/sof/compress.h
new file mode 100644
index 000000000000..dccc9e008f81
--- /dev/null
+++ b/sound/soc/sof/compress.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause) */
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2019-2020 Intel Corporation. All rights reserved.
+ *
+ * Author: Cezary Rojewski <cezary.rojewski@intel.com>
+ */
+
+#ifndef __SOF_COMPRESS_H
+#define __SOF_COMPRESS_H
+
+#include <sound/compress_driver.h>
+
+int sof_probe_compr_open(struct snd_compr_stream *cstream,
+		struct snd_soc_dai *dai);
+int sof_probe_compr_free(struct snd_compr_stream *cstream,
+		struct snd_soc_dai *dai);
+int sof_probe_compr_set_params(struct snd_compr_stream *cstream,
+		struct snd_compr_params *params, struct snd_soc_dai *dai);
+int sof_probe_compr_trigger(struct snd_compr_stream *cstream, int cmd,
+		struct snd_soc_dai *dai);
+int sof_probe_compr_pointer(struct snd_compr_stream *cstream,
+		struct snd_compr_tstamp *tstamp, struct snd_soc_dai *dai);
+int sof_probe_compr_copy(struct snd_compr_stream *cstream,
+		char __user *buf, size_t count);
+
+#endif
* Unmerged path sound/soc/sof/core.c
* Unmerged path sound/soc/sof/ops.h
diff --git a/sound/soc/sof/sof-priv.h b/sound/soc/sof/sof-priv.h
index b6c2f9374075..82adb0afa430 100644
--- a/sound/soc/sof/sof-priv.h
+++ b/sound/soc/sof/sof-priv.h
@@ -175,6 +175,27 @@ struct snd_sof_dsp_ops {
 	snd_pcm_uframes_t (*pcm_pointer)(struct snd_sof_dev *sdev,
 					 struct snd_pcm_substream *substream); /* optional */
 
+#if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_PROBES)
+	/* Except for probe_pointer, all probe ops are mandatory */
+	int (*probe_assign)(struct snd_sof_dev *sdev,
+			struct snd_compr_stream *cstream,
+			struct snd_soc_dai *dai); /* mandatory */
+	int (*probe_free)(struct snd_sof_dev *sdev,
+			struct snd_compr_stream *cstream,
+			struct snd_soc_dai *dai); /* mandatory */
+	int (*probe_set_params)(struct snd_sof_dev *sdev,
+			struct snd_compr_stream *cstream,
+			struct snd_compr_params *params,
+			struct snd_soc_dai *dai); /* mandatory */
+	int (*probe_trigger)(struct snd_sof_dev *sdev,
+			struct snd_compr_stream *cstream, int cmd,
+			struct snd_soc_dai *dai); /* mandatory */
+	int (*probe_pointer)(struct snd_sof_dev *sdev,
+			struct snd_compr_stream *cstream,
+			struct snd_compr_tstamp *tstamp,
+			struct snd_soc_dai *dai); /* optional */
+#endif
+
 	/* host read DSP stream data */
 	void (*ipc_msg_data)(struct snd_sof_dev *sdev,
 			     struct snd_pcm_substream *substream,
@@ -476,6 +497,10 @@ struct snd_sof_dev {
 	wait_queue_head_t waitq;
 	int code_loading;
 
+#if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_PROBES)
+	unsigned int extractor_stream_tag;
+#endif
+
 	/* DMA for Trace */
 	struct snd_dma_buffer dmatb;
 	struct snd_dma_buffer dmatp;
