ASoC: SOF: topology: free kcontrol memory on error

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: SOF: topology: free kcontrol memory on error (Jaroslav Kysela) [1797509]
Rebuild_FUZZ: 94.34%
commit-author Dragos Tarcatu <dragos_tarcatu@mentor.com>
commit 1b4efdaf6d6053c8944cee0edba0969dc1be7d4b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1b4efdaf.failed

The volume and bytes kcontrols are currently not freeing their
memory on initialization failures. When an error occurs, all the
widgets loaded so far are unloaded via sof_widget_unload().
But this only happens for the widgets that got successfully loaded.

Fix that by kfree()-ing the allocated memory on load error.

Fixes: 311ce4fe7637d ("ASoC: SOF: Add support for loading topologies")
	Reviewed-by: Paul Olaru <paul.olaru@nxp.com>
	Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Signed-off-by: Dragos Tarcatu <dragos_tarcatu@mentor.com>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Link: https://lore.kernel.org/r/20191111222039.19651-1-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 1b4efdaf6d6053c8944cee0edba0969dc1be7d4b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/topology.c
diff --cc sound/soc/sof/topology.c
index 17fe6a1d5f3e,d82ab981e840..000000000000
--- a/sound/soc/sof/topology.c
+++ b/sound/soc/sof/topology.c
@@@ -1047,20 -1060,25 +1060,29 @@@ static int sof_control_load_bytes(struc
  		container_of(hdr, struct snd_soc_tplg_bytes_control, hdr);
  	struct soc_bytes_ext *sbe = (struct soc_bytes_ext *)kc->private_value;
  	int max_size = sbe->max;
+ 	int ret = 0;
  
 -	/* init the get/put bytes data */
 -	scontrol->size = sizeof(struct sof_ipc_ctrl_data) +
 -		le32_to_cpu(control->priv.size);
 -
 -	if (scontrol->size > max_size) {
 +	if (le32_to_cpu(control->priv.size) > max_size) {
  		dev_err(sdev->dev, "err: bytes data size %d exceeds max %d.\n",
++<<<<<<< HEAD
 +			control->priv.size, max_size);
 +		return -EINVAL;
++=======
+ 			scontrol->size, max_size);
+ 		ret = -EINVAL;
+ 		goto out;
++>>>>>>> 1b4efdaf6d60 (ASoC: SOF: topology: free kcontrol memory on error)
  	}
  
 +	/* init the get/put bytes data */
 +	scontrol->size = sizeof(struct sof_ipc_ctrl_data) +
 +		le32_to_cpu(control->priv.size);
  	scontrol->control_data = kzalloc(max_size, GFP_KERNEL);
  	cdata = scontrol->control_data;
- 	if (!scontrol->control_data)
- 		return -ENOMEM;
+ 	if (!scontrol->control_data) {
+ 		ret = -ENOMEM;
+ 		goto out;
+ 	}
  
  	scontrol->comp_id = sdev->next_comp_id;
  	scontrol->cmd = SOF_CTRL_CMD_BINARY;
* Unmerged path sound/soc/sof/topology.c
