libperf: Add perf_evlist__set_maps() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 453fa03090a64c0e0a561f10dfd5e8747796949c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/453fa030.failed

Move the evlist__set_maps() function from tools/perf to libperf.

Committer notes:

Fix up reject due to earlier inversion in calling perf_evlist__init().

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-57-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 453fa03090a64c0e0a561f10dfd5e8747796949c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/x86/tests/perf-time-to-tsc.c
#	tools/perf/builtin-script.c
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/perf/evlist.h
#	tools/perf/lib/libperf.map
#	tools/perf/tests/code-reading.c
#	tools/perf/tests/keep-tracking.c
#	tools/perf/tests/switch-tracking.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86,582182d98a7f..000000000000
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@@ -5,6 -5,8 +5,11 @@@
  #include <unistd.h>
  #include <linux/types.h>
  #include <sys/prctl.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  
  #include "parse-events.h"
  #include "evlist.h"
@@@ -65,13 -67,13 +70,13 @@@ int test__perf_time_to_tsc(struct test 
  	threads = thread_map__new(-1, getpid(), UINT_MAX);
  	CHECK_NOT_NULL__(threads);
  
 -	cpus = perf_cpu_map__new(NULL);
 +	cpus = cpu_map__new(NULL);
  	CHECK_NOT_NULL__(cpus);
  
 -	evlist = evlist__new();
 +	evlist = perf_evlist__new();
  	CHECK_NOT_NULL__(evlist);
  
- 	perf_evlist__set_maps(evlist, cpus, threads);
+ 	perf_evlist__set_maps(&evlist->core, cpus, threads);
  
  	CHECK__(parse_events(evlist, "cycles:u", NULL));
  
diff --cc tools/perf/builtin-script.c
index 381a10d3337c,46fadbbe1c3e..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -48,7 -48,7 +48,11 @@@
  #include <fcntl.h>
  #include <unistd.h>
  #include <subcmd/pager.h>
++<<<<<<< HEAD
 +#include <linux/err.h>
++=======
+ #include <perf/evlist.h>
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  
  #include <linux/ctype.h>
  
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,9b6e8f165014..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,26 +1,29 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__init;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  	local:
  		*;
  };
diff --cc tools/perf/tests/code-reading.c
index aa6df122b175,e45df0736261..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -8,6 -8,8 +8,11 @@@
  #include <stdio.h>
  #include <string.h>
  #include <sys/param.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  
  #include "parse-events.h"
  #include "evlist.h"
@@@ -655,10 -657,10 +660,17 @@@ static int do_test_code_reading(bool tr
  				 * and will be freed by following perf_evlist__set_maps
  				 * call. Getting refference to keep them alive.
  				 */
++<<<<<<< HEAD
 +				cpu_map__get(cpus);
 +				thread_map__get(threads);
 +				perf_evlist__set_maps(evlist, NULL, NULL);
 +				perf_evlist__delete(evlist);
++=======
+ 				perf_cpu_map__get(cpus);
+ 				perf_thread_map__get(threads);
+ 				perf_evlist__set_maps(&evlist->core, NULL, NULL);
+ 				evlist__delete(evlist);
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  				evlist = NULL;
  				continue;
  			}
diff --cc tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e,0ce5ce33bac4..000000000000
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@@ -2,6 -2,8 +2,11 @@@
  #include <linux/types.h>
  #include <unistd.h>
  #include <sys/prctl.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  
  #include "parse-events.h"
  #include "evlist.h"
@@@ -75,13 -77,13 +80,13 @@@ int test__keep_tracking(struct test *te
  	threads = thread_map__new(-1, getpid(), UINT_MAX);
  	CHECK_NOT_NULL__(threads);
  
 -	cpus = perf_cpu_map__new(NULL);
 +	cpus = cpu_map__new(NULL);
  	CHECK_NOT_NULL__(cpus);
  
 -	evlist = evlist__new();
 +	evlist = perf_evlist__new();
  	CHECK_NOT_NULL__(evlist);
  
- 	perf_evlist__set_maps(evlist, cpus, threads);
+ 	perf_evlist__set_maps(&evlist->core, cpus, threads);
  
  	CHECK__(parse_events(evlist, "dummy:u", NULL));
  	CHECK__(parse_events(evlist, "cycles:u", NULL));
diff --cc tools/perf/tests/switch-tracking.c
index 6cdab5f4812a,e3cee69f6ea2..000000000000
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@@ -5,6 -5,8 +5,11 @@@
  #include <time.h>
  #include <stdlib.h>
  #include <linux/zalloc.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  
  #include "parse-events.h"
  #include "evlist.h"
diff --cc tools/perf/util/evlist.c
index 4739b7914374,4433b656cfb7..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -49,8 -50,8 +49,13 @@@ void perf_evlist__init(struct perf_evli
  
  	for (i = 0; i < PERF_EVLIST__HLIST_SIZE; ++i)
  		INIT_HLIST_HEAD(&evlist->heads[i]);
++<<<<<<< HEAD
 +	INIT_LIST_HEAD(&evlist->entries);
 +	perf_evlist__set_maps(evlist, cpus, threads);
++=======
+ 	perf_evlist__init(&evlist->core);
+ 	perf_evlist__set_maps(&evlist->core, cpus, threads);
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  	fdarray__init(&evlist->pollfd, 64);
  	evlist->workload.pid = -1;
  	evlist->bkw_mmap_state = BKW_MMAP_NOTREADY;
@@@ -151,61 -152,32 +156,63 @@@ void perf_evlist__delete(struct perf_ev
  	free(evlist);
  }
  
++<<<<<<< HEAD
 +static void __perf_evlist__propagate_maps(struct perf_evlist *evlist,
 +					  struct perf_evsel *evsel)
 +{
 +	/*
 +	 * We already have cpus for evsel (via PMU sysfs) so
 +	 * keep it, if there's no target cpu list defined.
 +	 */
 +	if (!evsel->own_cpus || evlist->has_user_cpus) {
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evlist->cpus);
 +	} else if (evsel->cpus != evsel->own_cpus) {
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evsel->own_cpus);
 +	}
 +
 +	thread_map__put(evsel->threads);
 +	evsel->threads = thread_map__get(evlist->threads);
 +}
 +
 +static void perf_evlist__propagate_maps(struct perf_evlist *evlist)
 +{
 +	struct perf_evsel *evsel;
 +
 +	evlist__for_each_entry(evlist, evsel)
 +		__perf_evlist__propagate_maps(evlist, evsel);
 +}
 +
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry)
++=======
+ void evlist__add(struct evlist *evlist, struct evsel *entry)
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  {
  	entry->evlist = evlist;
 -	entry->idx = evlist->core.nr_entries;
 +	list_add_tail(&entry->node, &evlist->entries);
 +	entry->idx = evlist->nr_entries;
  	entry->tracking = !entry->idx;
  
 -	perf_evlist__add(&evlist->core, &entry->core);
 -
 -	if (evlist->core.nr_entries == 1)
 +	if (!evlist->nr_entries++)
  		perf_evlist__set_id_pos(evlist);
- 
- 	__perf_evlist__propagate_maps(evlist, entry);
  }
  
 -void evlist__remove(struct evlist *evlist, struct evsel *evsel)
 +void perf_evlist__remove(struct perf_evlist *evlist, struct perf_evsel *evsel)
  {
  	evsel->evlist = NULL;
 -	perf_evlist__remove(&evlist->core, &evsel->core);
 +	list_del_init(&evsel->node);
 +	evlist->nr_entries -= 1;
  }
  
 -void perf_evlist__splice_list_tail(struct evlist *evlist,
 +void perf_evlist__splice_list_tail(struct perf_evlist *evlist,
  				   struct list_head *list)
  {
 -	struct evsel *evsel, *temp;
 +	struct perf_evsel *evsel, *temp;
  
  	__evlist__for_each_entry_safe(list, temp, evsel) {
 -		list_del_init(&evsel->core.node);
 -		evlist__add(evlist, evsel);
 +		list_del_init(&evsel->node);
 +		perf_evlist__add(evlist, evsel);
  	}
  }
  
@@@ -1094,9 -1066,9 +1101,9 @@@ int perf_evlist__create_maps(struct per
  	if (!cpus)
  		goto out_delete_threads;
  
 -	evlist->core.has_user_cpus = !!target->cpu_list;
 +	evlist->has_user_cpus = !!target->cpu_list;
  
- 	perf_evlist__set_maps(evlist, cpus, threads);
+ 	perf_evlist__set_maps(&evlist->core, cpus, threads);
  
  	return 0;
  
@@@ -1105,33 -1077,10 +1112,37 @@@ out_delete_threads
  	return -1;
  }
  
++<<<<<<< HEAD
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads)
 +{
 +	/*
 +	 * Allow for the possibility that one or another of the maps isn't being
 +	 * changed i.e. don't put it.  Note we are assuming the maps that are
 +	 * being applied are brand new and evlist is taking ownership of the
 +	 * original reference count of 1.  If that is not the case it is up to
 +	 * the caller to increase the reference count.
 +	 */
 +	if (cpus != evlist->cpus) {
 +		cpu_map__put(evlist->cpus);
 +		evlist->cpus = cpu_map__get(cpus);
 +	}
 +
 +	if (threads != evlist->threads) {
 +		thread_map__put(evlist->threads);
 +		evlist->threads = thread_map__get(threads);
 +	}
 +
 +	perf_evlist__propagate_maps(evlist);
 +}
 +
 +void __perf_evlist__set_sample_bit(struct perf_evlist *evlist,
++=======
+ void __perf_evlist__set_sample_bit(struct evlist *evlist,
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  				   enum perf_event_sample_format bit)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evsel__set_sample_bit(evsel, bit);
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,e31ddcc058f2..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -184,35 -181,33 +184,40 @@@ void perf_evlist__munmap(struct perf_ev
  
  size_t perf_evlist__mmap_size(unsigned long pages);
  
 -void evlist__disable(struct evlist *evlist);
 -void evlist__enable(struct evlist *evlist);
 -void perf_evlist__toggle_enable(struct evlist *evlist);
 +void perf_evlist__disable(struct perf_evlist *evlist);
 +void perf_evlist__enable(struct perf_evlist *evlist);
 +void perf_evlist__toggle_enable(struct perf_evlist *evlist);
  
 -int perf_evlist__enable_event_idx(struct evlist *evlist,
 -				  struct evsel *evsel, int idx);
 +int perf_evlist__enable_event_idx(struct perf_evlist *evlist,
 +				  struct perf_evsel *evsel, int idx);
  
 -void perf_evlist__set_selected(struct evlist *evlist,
 -			       struct evsel *evsel);
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel);
  
++<<<<<<< HEAD
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads);
 +int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target);
 +int perf_evlist__apply_filters(struct perf_evlist *evlist, struct perf_evsel **err_evsel);
++=======
+ int perf_evlist__create_maps(struct evlist *evlist, struct target *target);
+ int perf_evlist__apply_filters(struct evlist *evlist, struct evsel **err_evsel);
++>>>>>>> 453fa03090a6 (libperf: Add perf_evlist__set_maps() function)
  
  void __perf_evlist__set_leader(struct list_head *list);
 -void perf_evlist__set_leader(struct evlist *evlist);
 +void perf_evlist__set_leader(struct perf_evlist *evlist);
  
 -u64 perf_evlist__read_format(struct evlist *evlist);
 -u64 __perf_evlist__combined_sample_type(struct evlist *evlist);
 -u64 perf_evlist__combined_sample_type(struct evlist *evlist);
 -u64 perf_evlist__combined_branch_type(struct evlist *evlist);
 -bool perf_evlist__sample_id_all(struct evlist *evlist);
 -u16 perf_evlist__id_hdr_size(struct evlist *evlist);
 +u64 perf_evlist__read_format(struct perf_evlist *evlist);
 +u64 __perf_evlist__combined_sample_type(struct perf_evlist *evlist);
 +u64 perf_evlist__combined_sample_type(struct perf_evlist *evlist);
 +u64 perf_evlist__combined_branch_type(struct perf_evlist *evlist);
 +bool perf_evlist__sample_id_all(struct perf_evlist *evlist);
 +u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist);
  
 -int perf_evlist__parse_sample(struct evlist *evlist, union perf_event *event,
 +int perf_evlist__parse_sample(struct perf_evlist *evlist, union perf_event *event,
  			      struct perf_sample *sample);
  
 -int perf_evlist__parse_sample_timestamp(struct evlist *evlist,
 +int perf_evlist__parse_sample_timestamp(struct perf_evlist *evlist,
  					union perf_event *event,
  					u64 *timestamp);
  
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/perf/evlist.h
* Unmerged path tools/perf/arch/x86/tests/perf-time-to-tsc.c
* Unmerged path tools/perf/builtin-script.c
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index b71c4390d333..d49e3f00988f 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -85,6 +85,7 @@
 #include <linux/err.h>
 
 #include <linux/ctype.h>
+#include <perf/evlist.h>
 
 #define DEFAULT_SEPARATOR	" "
 #define FREEZE_ON_SMI_PATH	"devices/cpu/freeze_on_smi"
@@ -1519,7 +1520,7 @@ static int set_maps(struct perf_stat *st)
 	if (WARN_ONCE(st->maps_allocated, "stats double allocation\n"))
 		return -EINVAL;
 
-	perf_evlist__set_maps(evsel_list, st->cpus, st->threads);
+	perf_evlist__set_maps(&evsel_list->core, st->cpus, st->threads);
 
 	if (perf_evlist__alloc_stats(evsel_list, true))
 		return -ENOMEM;
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/perf/evlist.h
* Unmerged path tools/perf/lib/libperf.map
* Unmerged path tools/perf/tests/code-reading.c
* Unmerged path tools/perf/tests/keep-tracking.c
diff --git a/tools/perf/tests/mmap-basic.c b/tools/perf/tests/mmap-basic.c
index 0919b0793e5b..1049f5f7e3a4 100644
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@ -11,6 +11,7 @@
 #include "tests.h"
 #include <linux/err.h>
 #include <linux/kernel.h>
+#include <perf/evlist.h>
 
 /*
  * This test will generate random numbers of calls to some getpid syscalls,
@@ -67,7 +68,7 @@ int test__basic_mmap(struct test *test __maybe_unused, int subtest __maybe_unuse
 		goto out_free_cpus;
 	}
 
-	perf_evlist__set_maps(evlist, cpus, threads);
+	perf_evlist__set_maps(&evlist->core, cpus, threads);
 
 	for (i = 0; i < nsyscalls; ++i) {
 		char name[64];
diff --git a/tools/perf/tests/sw-clock.c b/tools/perf/tests/sw-clock.c
index f9490b237893..cc1f99ab3465 100644
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@ -11,6 +11,7 @@
 #include "util/evlist.h"
 #include "util/cpumap.h"
 #include "util/thread_map.h"
+#include <perf/evlist.h>
 
 #define NR_LOOPS  10000000
 
@@ -64,7 +65,7 @@ static int __test__sw_clock_freq(enum perf_sw_ids clock_id)
 		goto out_free_maps;
 	}
 
-	perf_evlist__set_maps(evlist, cpus, threads);
+	perf_evlist__set_maps(&evlist->core, cpus, threads);
 
 	cpus	= NULL;
 	threads = NULL;
* Unmerged path tools/perf/tests/switch-tracking.c
diff --git a/tools/perf/tests/task-exit.c b/tools/perf/tests/task-exit.c
index e92fa6029ac7..cc7e17b18985 100644
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@ -7,6 +7,7 @@
 
 #include <errno.h>
 #include <signal.h>
+#include <perf/evlist.h>
 
 static int exited;
 static int nr_exit;
@@ -71,7 +72,7 @@ int test__task_exit(struct test *test __maybe_unused, int subtest __maybe_unused
 		goto out_free_maps;
 	}
 
-	perf_evlist__set_maps(evlist, cpus, threads);
+	perf_evlist__set_maps(&evlist->core, cpus, threads);
 
 	cpus	= NULL;
 	threads = NULL;
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
