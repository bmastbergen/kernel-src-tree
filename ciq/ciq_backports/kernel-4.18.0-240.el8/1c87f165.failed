perf evlist: Rename perf_evlist__enable() to evlist__enable()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 1c87f1654cc315fbeae0238a8dbf5bf3c498f3af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1c87f165.failed

Rename perf_evlist__enable() to evlist__enable(), so we don't have a
name clash when we add perf_evlist__enable() in libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-22-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1c87f1654cc315fbeae0238a8dbf5bf3c498f3af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 4739b7914374,94825c37a35f..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -357,9 -356,9 +357,13 @@@ void perf_evlist__disable(struct perf_e
  	evlist->enabled = false;
  }
  
++<<<<<<< HEAD
 +void perf_evlist__enable(struct perf_evlist *evlist)
++=======
+ void evlist__enable(struct evlist *evlist)
++>>>>>>> 1c87f1654cc3 (perf evlist: Rename perf_evlist__enable() to evlist__enable())
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
  		if (!perf_evsel__is_group_leader(pos) || !pos->fd)
@@@ -370,13 -369,13 +374,13 @@@
  	evlist->enabled = true;
  }
  
 -void perf_evlist__toggle_enable(struct evlist *evlist)
 +void perf_evlist__toggle_enable(struct perf_evlist *evlist)
  {
- 	(evlist->enabled ? perf_evlist__disable : perf_evlist__enable)(evlist);
+ 	(evlist->enabled ? perf_evlist__disable : evlist__enable)(evlist);
  }
  
 -static int perf_evlist__enable_event_cpu(struct evlist *evlist,
 -					 struct evsel *evsel, int cpu)
 +static int perf_evlist__enable_event_cpu(struct perf_evlist *evlist,
 +					 struct perf_evsel *evsel, int cpu)
  {
  	int thread;
  	int nr_threads = perf_evlist__nr_threads(evlist, evsel);
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,ab48bbfbca41..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -184,35 -184,35 +184,41 @@@ void perf_evlist__munmap(struct perf_ev
  
  size_t perf_evlist__mmap_size(unsigned long pages);
  
++<<<<<<< HEAD
 +void perf_evlist__disable(struct perf_evlist *evlist);
 +void perf_evlist__enable(struct perf_evlist *evlist);
 +void perf_evlist__toggle_enable(struct perf_evlist *evlist);
++=======
+ void perf_evlist__disable(struct evlist *evlist);
+ void evlist__enable(struct evlist *evlist);
+ void perf_evlist__toggle_enable(struct evlist *evlist);
++>>>>>>> 1c87f1654cc3 (perf evlist: Rename perf_evlist__enable() to evlist__enable())
  
 -int perf_evlist__enable_event_idx(struct evlist *evlist,
 -				  struct evsel *evsel, int idx);
 +int perf_evlist__enable_event_idx(struct perf_evlist *evlist,
 +				  struct perf_evsel *evsel, int idx);
  
 -void perf_evlist__set_selected(struct evlist *evlist,
 -			       struct evsel *evsel);
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel);
  
 -void perf_evlist__set_maps(struct evlist *evlist, struct perf_cpu_map *cpus,
 -			   struct perf_thread_map *threads);
 -int perf_evlist__create_maps(struct evlist *evlist, struct target *target);
 -int perf_evlist__apply_filters(struct evlist *evlist, struct evsel **err_evsel);
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads);
 +int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target);
 +int perf_evlist__apply_filters(struct perf_evlist *evlist, struct perf_evsel **err_evsel);
  
  void __perf_evlist__set_leader(struct list_head *list);
 -void perf_evlist__set_leader(struct evlist *evlist);
 +void perf_evlist__set_leader(struct perf_evlist *evlist);
  
 -u64 perf_evlist__read_format(struct evlist *evlist);
 -u64 __perf_evlist__combined_sample_type(struct evlist *evlist);
 -u64 perf_evlist__combined_sample_type(struct evlist *evlist);
 -u64 perf_evlist__combined_branch_type(struct evlist *evlist);
 -bool perf_evlist__sample_id_all(struct evlist *evlist);
 -u16 perf_evlist__id_hdr_size(struct evlist *evlist);
 +u64 perf_evlist__read_format(struct perf_evlist *evlist);
 +u64 __perf_evlist__combined_sample_type(struct perf_evlist *evlist);
 +u64 perf_evlist__combined_sample_type(struct perf_evlist *evlist);
 +u64 perf_evlist__combined_branch_type(struct perf_evlist *evlist);
 +bool perf_evlist__sample_id_all(struct perf_evlist *evlist);
 +u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist);
  
 -int perf_evlist__parse_sample(struct evlist *evlist, union perf_event *event,
 +int perf_evlist__parse_sample(struct perf_evlist *evlist, union perf_event *event,
  			      struct perf_sample *sample);
  
 -int perf_evlist__parse_sample_timestamp(struct evlist *evlist,
 +int perf_evlist__parse_sample_timestamp(struct perf_evlist *evlist,
  					union perf_event *event,
  					u64 *timestamp);
  
diff --git a/tools/perf/arch/x86/tests/perf-time-to-tsc.c b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86..5894a8944f98 100644
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@ -97,7 +97,7 @@ int test__perf_time_to_tsc(struct test *test __maybe_unused, int subtest __maybe
 		goto out_err;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	comm1 = "Test COMM 1";
 	CHECK__(prctl(PR_SET_NAME, (unsigned long)comm1, 0, 0, 0));
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 02e719faa488..7f55a7dab23c 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -973,7 +973,7 @@ static int kvm_events_live_report(struct perf_kvm_stat *kvm)
 		goto out;
 
 	/* everything is good - enable the events and process */
-	perf_evlist__enable(kvm->evlist);
+	evlist__enable(kvm->evlist);
 
 	while (!done) {
 		struct fdarray *fda = &kvm->evlist->pollfd;
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..fdfdc3fb7202 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1454,7 +1454,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 	 * so don't spoil it by prematurely enabling them.
 	 */
 	if (!target__none(&opts->target) && !opts->initial_delay)
-		perf_evlist__enable(rec->evlist);
+		evlist__enable(rec->evlist);
 
 	/*
 	 * Let the child rip
@@ -1507,7 +1507,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 
 	if (opts->initial_delay) {
 		usleep(opts->initial_delay * USEC_PER_MSEC);
-		perf_evlist__enable(rec->evlist);
+		evlist__enable(rec->evlist);
 	}
 
 	trigger_ready(&auxtrace_snapshot_trigger);
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index b71c4390d333..4a33585b809b 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -364,7 +364,7 @@ static void enable_counters(void)
 	 * - we have initial delay configured
 	 */
 	if (!target__none(&target) || stat_config.initial_delay)
-		perf_evlist__enable(evsel_list);
+		evlist__enable(evsel_list);
 }
 
 static void disable_counters(void)
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 6d6fb101231d..c7173661e945 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -1257,7 +1257,7 @@ static int __cmd_top(struct perf_top *top)
 	 * so leave the check here.
 	 */
         if (!target__none(&opts->target))
-                perf_evlist__enable(top->evlist);
+		evlist__enable(top->evlist);
 
 	ret = -1;
 	if (pthread_create(&thread_process, NULL, process_thread, top)) {
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 9f9c869e0f26..03e3d4786488 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -3402,14 +3402,14 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 		goto out_error_mmap;
 
 	if (!target__none(&trace->opts.target) && !trace->opts.initial_delay)
-		perf_evlist__enable(evlist);
+		evlist__enable(evlist);
 
 	if (forks)
 		perf_evlist__start_workload(evlist);
 
 	if (trace->opts.initial_delay) {
 		usleep(trace->opts.initial_delay * 1000);
-		perf_evlist__enable(evlist);
+		evlist__enable(evlist);
 	}
 
 	trace->multiple_threads = thread_map__pid(evlist->threads, 0) == -1 ||
diff --git a/tools/perf/tests/backward-ring-buffer.c b/tools/perf/tests/backward-ring-buffer.c
index 1a9c3becf5ff..f80ebeb699e4 100644
--- a/tools/perf/tests/backward-ring-buffer.c
+++ b/tools/perf/tests/backward-ring-buffer.c
@@ -68,7 +68,7 @@ static int do_test(struct perf_evlist *evlist, int mmap_pages,
 		return TEST_FAIL;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 	testcase();
 	perf_evlist__disable(evlist);
 
diff --git a/tools/perf/tests/bpf.c b/tools/perf/tests/bpf.c
index c9e4cdc4c9c8..e991f1d6f8b3 100644
--- a/tools/perf/tests/bpf.c
+++ b/tools/perf/tests/bpf.c
@@ -171,7 +171,7 @@ static int do_test(struct bpf_object *obj, int (*func)(void),
 		goto out_delete_evlist;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 	(*func)();
 	perf_evlist__disable(evlist);
 
diff --git a/tools/perf/tests/code-reading.c b/tools/perf/tests/code-reading.c
index aa6df122b175..66c6e5437683 100644
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@ -680,7 +680,7 @@ static int do_test_code_reading(bool try_kcore)
 		goto out_put;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	do_something();
 
diff --git a/tools/perf/tests/keep-tracking.c b/tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e..9f21d3071a6b 100644
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@ -107,7 +107,7 @@ int test__keep_tracking(struct test *test __maybe_unused, int subtest __maybe_un
 	 * enabled.
 	 */
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	comm = "Test COMM 1";
 	CHECK__(prctl(PR_SET_NAME, (unsigned long)comm, 0, 0, 0));
@@ -125,7 +125,7 @@ int test__keep_tracking(struct test *test __maybe_unused, int subtest __maybe_un
 	 * disabled with the dummy event still enabled.
 	 */
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	evsel = perf_evlist__last(evlist);
 
diff --git a/tools/perf/tests/openat-syscall-tp-fields.c b/tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469..c534edee9504 100644
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@ -74,7 +74,7 @@ int test__syscall_openat_tp_fields(struct test *test __maybe_unused, int subtest
 		goto out_delete_evlist;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	/*
 	 * Generate the event:
diff --git a/tools/perf/tests/perf-record.c b/tools/perf/tests/perf-record.c
index 07f6bd8ed719..3ccf89131143 100644
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@ -153,7 +153,7 @@ int test__PERF_RECORD(struct test *test __maybe_unused, int subtest __maybe_unus
 	 * Now that all is properly set up, enable the events, they will
 	 * count just on workload.pid, which will start...
 	 */
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	/*
 	 * Now!
diff --git a/tools/perf/tests/sw-clock.c b/tools/perf/tests/sw-clock.c
index f9490b237893..b9bc4193867e 100644
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@ -86,7 +86,7 @@ static int __test__sw_clock_freq(enum perf_sw_ids clock_id)
 		goto out_delete_evlist;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	/* collect samples */
 	for (i = 0; i < NR_LOOPS; i++)
diff --git a/tools/perf/tests/switch-tracking.c b/tools/perf/tests/switch-tracking.c
index 6cdab5f4812a..80b86bf1659e 100644
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@ -462,7 +462,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 		goto out_err;
 	}
 
-	perf_evlist__enable(evlist);
+	evlist__enable(evlist);
 
 	err = perf_evsel__disable(cpu_clocks_evsel);
 	if (err) {
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
