ACPICA: make acpi_load_table() return table index

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Nikolaus Voss <nikolaus.voss@loewensteinmedical.de>
commit 1770093c5bed404ac69b04dc8b9e62a2c4db944a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1770093c.failed

ACPICA commit d1716a829d19be23277d9157c575a03b9abb7457

For unloading an ACPI table, it is necessary to provide the index of
the table. The method intended for dynamically loading or hotplug
addition of tables, acpi_load_table(), should provide this information
via an optional pointer to the loaded table index.

This patch fixes the table unload function of acpi_configfs.

	Reported-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Fixes: d06c47e3dd07f ("ACPI: configfs: Resolve objects on host-directed table loads")
Link: https://github.com/acpica/acpica/commit/d1716a82
	Signed-off-by: Nikolaus Voss <nikolaus.voss@loewensteinmedical.de>
	Signed-off-by: Erik Schmauss <erik.schmauss@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 1770093c5bed404ac69b04dc8b9e62a2c4db944a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpica/tbxfload.c
diff --cc drivers/acpi/acpica/tbxfload.c
index d642b59734cc,0782acf85722..000000000000
--- a/drivers/acpi/acpica/tbxfload.c
+++ b/drivers/acpi/acpica/tbxfload.c
@@@ -297,15 -299,15 +299,21 @@@ acpi_status acpi_load_table(struct acpi
  	status = acpi_tb_install_and_load_table(ACPI_PTR_TO_PHYSADDR(table),
  						ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL,
  						FALSE, &table_index);
++<<<<<<< HEAD
++=======
+ 	if (table_idx) {
+ 		*table_idx = table_index;
+ 	}
++>>>>>>> 1770093c5bed (ACPICA: make acpi_load_table() return table index)
  
  	if (ACPI_SUCCESS(status)) {
 +		/* Complete the initialization/resolution of package objects */
  
 -		/* Complete the initialization/resolution of new objects */
 -
 -		acpi_ns_initialize_objects();
 +		status = acpi_ns_walk_namespace(ACPI_TYPE_PACKAGE,
 +						ACPI_ROOT_OBJECT,
 +						ACPI_UINT32_MAX, 0,
 +						acpi_ns_init_one_package,
 +						NULL, NULL, NULL);
  	}
  
  	return_ACPI_STATUS(status);
diff --git a/drivers/acpi/acpi_configfs.c b/drivers/acpi/acpi_configfs.c
index 663f0d88f912..b7ff2d178746 100644
--- a/drivers/acpi/acpi_configfs.c
+++ b/drivers/acpi/acpi_configfs.c
@@ -56,7 +56,7 @@ static ssize_t acpi_table_aml_write(struct config_item *cfg,
 	if (!table->header)
 		return -ENOMEM;
 
-	ret = acpi_load_table(table->header);
+	ret = acpi_load_table(table->header, &table->index);
 	if (ret) {
 		kfree(table->header);
 		table->header = NULL;
@@ -226,7 +226,7 @@ static void acpi_table_drop_item(struct config_group *group,
 	struct acpi_table *table = container_of(cfg, struct acpi_table, cfg);
 
 	ACPI_INFO(("Host-directed Dynamic ACPI Table Unload"));
-	acpi_tb_unload_table(table->index);
+	acpi_unload_table(table->index);
 }
 
 static struct configfs_group_operations acpi_table_group_ops = {
diff --git a/drivers/acpi/acpica/dbfileio.c b/drivers/acpi/acpica/dbfileio.c
index c6e25734dc5c..e1b6e54a96ac 100644
--- a/drivers/acpi/acpica/dbfileio.c
+++ b/drivers/acpi/acpica/dbfileio.c
@@ -93,7 +93,7 @@ acpi_status acpi_db_load_tables(struct acpi_new_table_desc *list_head)
 	while (table_list_head) {
 		table = table_list_head->table;
 
-		status = acpi_load_table(table);
+		status = acpi_load_table(table, NULL);
 		if (ACPI_FAILURE(status)) {
 			if (status == AE_ALREADY_EXISTS) {
 				acpi_os_printf
* Unmerged path drivers/acpi/acpica/tbxfload.c
diff --git a/drivers/firmware/efi/efi.c b/drivers/firmware/efi/efi.c
index 5da0232ae33f..8f9987bca8ff 100644
--- a/drivers/firmware/efi/efi.c
+++ b/drivers/firmware/efi/efi.c
@@ -311,7 +311,7 @@ static __init int efivar_ssdt_load(void)
 			goto free_data;
 		}
 
-		ret = acpi_load_table(data);
+		ret = acpi_load_table(data, NULL);
 		if (ret) {
 			pr_err("failed to load table: %d\n", ret);
 			goto free_data;
diff --git a/include/acpi/acpixf.h b/include/acpi/acpixf.h
index 109b2f14b6c6..867170049b07 100644
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@ -458,7 +458,8 @@ ACPI_EXTERNAL_RETURN_STATUS(acpi_status ACPI_INIT_FUNCTION
 					       u8 physical))
 
 ACPI_EXTERNAL_RETURN_STATUS(acpi_status
-			    acpi_load_table(struct acpi_table_header *table))
+			    acpi_load_table(struct acpi_table_header *table,
+					    u32 *table_idx))
 
 ACPI_EXTERNAL_RETURN_STATUS(acpi_status
 			    acpi_unload_table(u32 table_index))
