libperf: Add perf_evlist__poll() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 80ab2987a016f774201d4f3509118047f9d58175
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/80ab2987.failed

Move perf_evlist__poll() from tools/perf to libperf, it will be used in
the following patches.

And rename the existing perf's function to evlist__poll().

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-39-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 80ab2987a016f774201d4f3509118047f9d58175)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/perf/evlist.h
#	tools/perf/lib/libperf.map
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/builtin-trace.c
index 4b81b4c2c4c2,c52c3120a811..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -3466,8 -3474,8 +3466,13 @@@ again
  	if (trace->nr_events == before) {
  		int timeout = done ? 100 : -1;
  
++<<<<<<< HEAD
 +		if (!draining && perf_evlist__poll(evlist, timeout) > 0) {
 +			if (perf_evlist__filter_pollfd(evlist, POLLERR | POLLHUP | POLLNVAL) == 0)
++=======
+ 		if (!draining && evlist__poll(evlist, timeout) > 0) {
+ 			if (evlist__filter_pollfd(evlist, POLLERR | POLLHUP | POLLNVAL) == 0)
++>>>>>>> 80ab2987a016 (libperf: Add perf_evlist__poll() function)
  				draining = true;
  
  			goto again;
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,ab8dbde1136c..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,45 +1,49 @@@
  LIBPERF_0.0.1 {
  	global:
++<<<<<<< HEAD
 +		libperf_set_print;
++=======
+ 		libperf_init;
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_cpu_map__nr;
+ 		perf_cpu_map__cpu;
+ 		perf_cpu_map__empty;
+ 		perf_cpu_map__max;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__nr;
+ 		perf_thread_map__pid;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__enable;
+ 		perf_evsel__disable;
+ 		perf_evsel__init;
+ 		perf_evsel__open;
+ 		perf_evsel__close;
+ 		perf_evsel__read;
+ 		perf_evsel__cpus;
+ 		perf_evsel__threads;
+ 		perf_evsel__attr;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__open;
+ 		perf_evlist__close;
+ 		perf_evlist__enable;
+ 		perf_evlist__disable;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
+ 		perf_evlist__poll;
++>>>>>>> 80ab2987a016 (libperf: Add perf_evlist__poll() function)
  	local:
  		*;
  };
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,d4c7fd125ce9..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -482,74 -418,13 +482,80 @@@ int perf_evlist__filter_pollfd(struct p
  			       perf_evlist__munmap_filtered, NULL);
  }
  
++<<<<<<< HEAD
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout)
 +{
 +	return fdarray__poll(&evlist->pollfd, timeout);
++=======
+ int evlist__poll(struct evlist *evlist, int timeout)
+ {
+ 	return perf_evlist__poll(&evlist->core, timeout);
++>>>>>>> 80ab2987a016 (libperf: Add perf_evlist__poll() function)
  }
  
 -static void perf_evlist__set_sid_idx(struct evlist *evlist,
 -				     struct evsel *evsel, int idx, int cpu,
 +static void perf_evlist__id_hash(struct perf_evlist *evlist,
 +				 struct perf_evsel *evsel,
 +				 int cpu, int thread, u64 id)
 +{
 +	int hash;
 +	struct perf_sample_id *sid = SID(evsel, cpu, thread);
 +
 +	sid->id = id;
 +	sid->evsel = evsel;
 +	hash = hash_64(sid->id, PERF_EVLIST__HLIST_BITS);
 +	hlist_add_head(&sid->node, &evlist->heads[hash]);
 +}
 +
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id)
 +{
 +	perf_evlist__id_hash(evlist, evsel, cpu, thread, id);
 +	evsel->id[evsel->ids++] = id;
 +}
 +
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd)
 +{
 +	u64 read_data[4] = { 0, };
 +	int id_idx = 1; /* The first entry is the counter value */
 +	u64 id;
 +	int ret;
 +
 +	ret = ioctl(fd, PERF_EVENT_IOC_ID, &id);
 +	if (!ret)
 +		goto add;
 +
 +	if (errno != ENOTTY)
 +		return -1;
 +
 +	/* Legacy way to get event id.. All hail to old kernels! */
 +
 +	/*
 +	 * This way does not work with group format read, so bail
 +	 * out in that case.
 +	 */
 +	if (perf_evlist__read_format(evlist) & PERF_FORMAT_GROUP)
 +		return -1;
 +
 +	if (!(evsel->attr.read_format & PERF_FORMAT_ID) ||
 +	    read(fd, &read_data, sizeof(read_data)) == -1)
 +		return -1;
 +
 +	if (evsel->attr.read_format & PERF_FORMAT_TOTAL_TIME_ENABLED)
 +		++id_idx;
 +	if (evsel->attr.read_format & PERF_FORMAT_TOTAL_TIME_RUNNING)
 +		++id_idx;
 +
 +	id = read_data[id_idx];
 +
 + add:
 +	perf_evlist__id_add(evlist, evsel, cpu, thread, id);
 +	return 0;
 +}
 +
 +static void perf_evlist__set_sid_idx(struct perf_evlist *evlist,
 +				     struct perf_evsel *evsel, int idx, int cpu,
  				     int thread)
  {
  	struct perf_sample_id *sid = SID(evsel, cpu, thread);
@@@ -1890,10 -1736,10 +1896,10 @@@ static void *perf_evlist__poll_thread(v
  			draining = true;
  
  		if (!draining)
- 			perf_evlist__poll(evlist, 1000);
+ 			evlist__poll(evlist, 1000);
  
 -		for (i = 0; i < evlist->core.nr_mmaps; i++) {
 -			struct mmap *map = &evlist->mmap[i];
 +		for (i = 0; i < evlist->nr_mmaps; i++) {
 +			struct perf_mmap *map = &evlist->mmap[i];
  			union perf_event *event;
  
  			if (perf_mmap__read_init(map))
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,130d44d691b8..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -113,41 -130,34 +113,45 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
 -int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
 -int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
 -int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
 +int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
 +int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
 +int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
  				     const char *name);
  
 -int evlist__add_pollfd(struct evlist *evlist, int fd);
 -int evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
 -
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd);
 +
++<<<<<<< HEAD
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
++=======
+ int evlist__poll(struct evlist *evlist, int timeout);
++>>>>>>> 80ab2987a016 (libperf: Add perf_evlist__poll() function)
  
 -struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
 -struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
 +
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
  						u64 id);
  
 -struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
 +struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
  
 -void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
 +void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
  
 -void evlist__mmap_consume(struct evlist *evlist, int idx);
 +void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
  
 -int evlist__open(struct evlist *evlist);
 -void evlist__close(struct evlist *evlist);
 +int perf_evlist__open(struct perf_evlist *evlist);
 +void perf_evlist__close(struct perf_evlist *evlist);
  
  struct callchain_param;
  
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/perf/evlist.h
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index de0619148499..57d07fede544 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1620,7 +1620,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 		if (hits == rec->samples) {
 			if (done || draining)
 				break;
-			err = perf_evlist__poll(rec->evlist, -1);
+			err = evlist__poll(rec->evlist, -1);
 			/*
 			 * Propagate error, only if there's any. Ignore positive
 			 * number of returned events and interrupt error.
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 95aec2602043..c16512b1cb57 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -1311,7 +1311,7 @@ static int __cmd_top(struct perf_top *top)
 	}
 
 	/* Wait for a minimal set of events before starting the snapshot */
-	perf_evlist__poll(top->evlist, 100);
+	evlist__poll(top->evlist, 100);
 
 	perf_top__mmap_read(top);
 
@@ -1321,7 +1321,7 @@ static int __cmd_top(struct perf_top *top)
 		perf_top__mmap_read(top);
 
 		if (opts->overwrite || (hits == top->samples))
-			ret = perf_evlist__poll(top->evlist, 100);
+			ret = evlist__poll(top->evlist, 100);
 
 		if (resize) {
 			perf_top__resize(top);
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/perf/evlist.h
* Unmerged path tools/perf/lib/libperf.map
diff --git a/tools/perf/tests/openat-syscall-tp-fields.c b/tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469..2348df65dbe5 100644
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@ -124,7 +124,7 @@ int test__syscall_openat_tp_fields(struct test *test __maybe_unused, int subtest
 		}
 
 		if (nr_events == before)
-			perf_evlist__poll(evlist, 10);
+			evlist__poll(evlist, 10);
 
 		if (++nr_polls > 5) {
 			pr_debug("%s: no events!\n", __func__);
diff --git a/tools/perf/tests/perf-record.c b/tools/perf/tests/perf-record.c
index 07f6bd8ed719..1d89e7b881f6 100644
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@ -285,7 +285,7 @@ int test__PERF_RECORD(struct test *test __maybe_unused, int subtest __maybe_unus
 		 * perf_event_attr.wakeup_events, just PERF_EVENT_SAMPLE does.
 		 */
 		if (total_events == before && false)
-			perf_evlist__poll(evlist, -1);
+			evlist__poll(evlist, -1);
 
 		sleep(1);
 		if (++wakeups > 5) {
diff --git a/tools/perf/tests/task-exit.c b/tools/perf/tests/task-exit.c
index e92fa6029ac7..746f90435a8c 100644
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@ -125,7 +125,7 @@ int test__task_exit(struct test *test __maybe_unused, int subtest __maybe_unused
 
 out_init:
 	if (!exited || !nr_exit) {
-		perf_evlist__poll(evlist, -1);
+		evlist__poll(evlist, -1);
 		goto retry;
 	}
 
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 9c3b43665909..b1d1e1fe0128 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -913,7 +913,7 @@ static PyObject *pyrf_evlist__poll(struct pyrf_evlist *pevlist,
 	if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|i", kwlist, &timeout))
 		return NULL;
 
-	n = perf_evlist__poll(evlist, timeout);
+	n = evlist__poll(evlist, timeout);
 	if (n < 0) {
 		PyErr_SetFromErrno(PyExc_OSError);
 		return NULL;
