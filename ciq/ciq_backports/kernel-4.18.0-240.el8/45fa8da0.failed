net/smc: create improved SMC-R link_uid

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Karsten Graul <kgraul@linux.ibm.com>
commit 45fa8da0bf5cb447fcf835d184e2d3b745376e69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/45fa8da0.failed

The link_uid of an SMC-R link is exchanged between SMC peers and its
value can be used for debugging purposes. Create a unique link_uid
during link initialization and use it in communication with SMC-R peers.

	Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
	Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 45fa8da0bf5cb447fcf835d184e2d3b745376e69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_core.c
#	net/smc/smc_llc.c
#	net/smc/smc_llc.h
diff --cc net/smc/smc_core.c
index 399bc3ffb64e,fb5f685ff494..000000000000
--- a/net/smc/smc_core.c
+++ b/net/smc/smc_core.c
@@@ -344,6 -331,8 +344,11 @@@ static int smcr_link_init(struct smc_li
  	lnk->smcibdev = ini->ib_dev;
  	lnk->ibport = ini->ib_port;
  	lnk->path_mtu = ini->ib_dev->pattr[ini->ib_port - 1].active_mtu;
++<<<<<<< HEAD
++=======
+ 	smc_llc_link_set_uid(lnk);
+ 	INIT_WORK(&lnk->link_down_wrk, smc_link_down_work);
++>>>>>>> 45fa8da0bf5c (net/smc: create improved SMC-R link_uid)
  	if (!ini->ib_dev->initialized) {
  		rc = (int)smc_ib_setup_per_ibdev(ini->ib_dev);
  		if (rc)
diff --cc net/smc/smc_llc.c
index 4119cdb6b6bf,afb889d60881..000000000000
--- a/net/smc/smc_llc.c
+++ b/net/smc/smc_llc.c
@@@ -207,8 -381,8 +206,13 @@@ int smc_llc_send_confirm_link(struct sm
  	memcpy(confllc->sender_gid, link->gid, SMC_GID_SIZE);
  	hton24(confllc->sender_qp_num, link->roce_qp->qp_num);
  	confllc->link_num = link->link_id;
++<<<<<<< HEAD
 +	memcpy(confllc->link_uid, lgr->id, SMC_LGR_ID_SIZE);
 +	confllc->max_links = SMC_LLC_ADD_LNK_MAX_LINKS; /* enforce peer resp. */
++=======
+ 	memcpy(confllc->link_uid, link->link_uid, SMC_LGR_ID_SIZE);
+ 	confllc->max_links = SMC_LLC_ADD_LNK_MAX_LINKS;
++>>>>>>> 45fa8da0bf5c (net/smc: create improved SMC-R link_uid)
  	/* send llc message */
  	rc = smc_wr_tx_send(link, pend);
  	return rc;
@@@ -398,96 -803,465 +402,122 @@@ static int smc_llc_send_message(struct 
  	return 0;
  }
  
 -static void smc_llc_save_add_link_info(struct smc_link *link,
 -				       struct smc_llc_msg_add_link *add_llc)
 -{
 -	link->peer_qpn = ntoh24(add_llc->sender_qp_num);
 -	memcpy(link->peer_gid, add_llc->sender_gid, SMC_GID_SIZE);
 -	memcpy(link->peer_mac, add_llc->sender_mac, ETH_ALEN);
 -	link->peer_psn = ntoh24(add_llc->initial_psn);
 -	link->peer_mtu = add_llc->qp_mtu;
 -}
 +/********************************* receive ***********************************/
  
 -/* as an SMC client, process an add link request */
 -int smc_llc_cli_add_link(struct smc_link *link, struct smc_llc_qentry *qentry)
 +static void smc_llc_rx_confirm_link(struct smc_link *link,
 +				    struct smc_llc_msg_confirm_link *llc)
  {
 -	struct smc_llc_msg_add_link *llc = &qentry->msg.add_link;
 -	enum smc_lgr_type lgr_new_t = SMC_LGR_SYMMETRIC;
  	struct smc_link_group *lgr = smc_get_lgr(link);
 -	struct smc_link *lnk_new = NULL;
 -	struct smc_init_info ini;
 -	int lnk_idx, rc = 0;
 +	int conf_rc;
  
++<<<<<<< HEAD
 +	/* RMBE eyecatchers are not supported */
 +	if (llc->hd.flags & SMC_LLC_FLAG_NO_RMBE_EYEC)
 +		conf_rc = 0;
 +	else
 +		conf_rc = ENOTSUPP;
++=======
+ 	ini.vlan_id = lgr->vlan_id;
+ 	smc_pnet_find_alt_roce(lgr, &ini, link->smcibdev);
+ 	if (!memcmp(llc->sender_gid, link->peer_gid, SMC_GID_SIZE) &&
+ 	    !memcmp(llc->sender_mac, link->peer_mac, ETH_ALEN)) {
+ 		if (!ini.ib_dev)
+ 			goto out_reject;
+ 		lgr_new_t = SMC_LGR_ASYMMETRIC_PEER;
+ 	}
+ 	if (!ini.ib_dev) {
+ 		lgr_new_t = SMC_LGR_ASYMMETRIC_LOCAL;
+ 		ini.ib_dev = link->smcibdev;
+ 		ini.ib_port = link->ibport;
+ 	}
+ 	lnk_idx = smc_llc_alloc_alt_link(lgr, lgr_new_t);
+ 	if (lnk_idx < 0)
+ 		goto out_reject;
+ 	lnk_new = &lgr->lnk[lnk_idx];
+ 	rc = smcr_link_init(lgr, lnk_new, lnk_idx, &ini);
+ 	if (rc)
+ 		goto out_reject;
+ 	smc_llc_save_add_link_info(lnk_new, llc);
+ 	lnk_new->link_id = llc->link_num;	/* SMC server assigns link id */
+ 	smc_llc_link_set_uid(lnk_new);
++>>>>>>> 45fa8da0bf5c (net/smc: create improved SMC-R link_uid)
  
 -	rc = smc_ib_ready_link(lnk_new);
 -	if (rc)
 -		goto out_clear_lnk;
 -
 -	rc = smcr_buf_map_lgr(lnk_new);
 -	if (rc)
 -		goto out_clear_lnk;
 -
 -	rc = smc_llc_send_add_link(link,
 -				   lnk_new->smcibdev->mac[ini.ib_port - 1],
 -				   lnk_new->gid, lnk_new, SMC_LLC_RESP);
 -	if (rc)
 -		goto out_clear_lnk;
 -	rc = smc_llc_cli_rkey_exchange(link, lnk_new);
 -	if (rc) {
 -		rc = 0;
 -		goto out_clear_lnk;
 -	}
 -	rc = smc_llc_cli_conf_link(link, &ini, lnk_new, lgr_new_t);
 -	if (!rc)
 -		goto out;
 -out_clear_lnk:
 -	smcr_link_clear(lnk_new);
 -out_reject:
 -	smc_llc_cli_add_link_reject(qentry);
 -out:
 -	kfree(qentry);
 -	return rc;
 -}
 -
 -static void smc_llc_process_cli_add_link(struct smc_link_group *lgr)
 -{
 -	struct smc_llc_qentry *qentry;
 -
 -	qentry = smc_llc_flow_qentry_clr(&lgr->llc_flow_lcl);
 -
 -	mutex_lock(&lgr->llc_conf_mutex);
 -	smc_llc_cli_add_link(qentry->link, qentry);
 -	mutex_unlock(&lgr->llc_conf_mutex);
 -}
 -
 -static int smc_llc_active_link_count(struct smc_link_group *lgr)
 -{
 -	int i, link_count = 0;
 -
 -	for (i = 0; i < SMC_LINKS_PER_LGR_MAX; i++) {
 -		if (!smc_link_usable(&lgr->lnk[i]))
 -			continue;
 -		link_count++;
 -	}
 -	return link_count;
 -}
 -
 -/* find the asymmetric link when 3 links are established  */
 -static struct smc_link *smc_llc_find_asym_link(struct smc_link_group *lgr)
 -{
 -	int asym_idx = -ENOENT;
 -	int i, j, k;
 -	bool found;
 -
 -	/* determine asymmetric link */
 -	found = false;
 -	for (i = 0; i < SMC_LINKS_PER_LGR_MAX; i++) {
 -		for (j = i + 1; j < SMC_LINKS_PER_LGR_MAX; j++) {
 -			if (!smc_link_usable(&lgr->lnk[i]) ||
 -			    !smc_link_usable(&lgr->lnk[j]))
 -				continue;
 -			if (!memcmp(lgr->lnk[i].gid, lgr->lnk[j].gid,
 -				    SMC_GID_SIZE)) {
 -				found = true;	/* asym_lnk is i or j */
 -				break;
 -			}
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		if (lgr->role == SMC_SERV &&
 +		    link->state == SMC_LNK_ACTIVATING) {
 +			link->llc_confirm_resp_rc = conf_rc;
 +			complete(&link->llc_confirm_resp);
  		}
 -		if (found)
 -			break;
 -	}
 -	if (!found)
 -		goto out; /* no asymmetric link */
 -	for (k = 0; k < SMC_LINKS_PER_LGR_MAX; k++) {
 -		if (!smc_link_usable(&lgr->lnk[k]))
 -			continue;
 -		if (k != i &&
 -		    !memcmp(lgr->lnk[i].peer_gid, lgr->lnk[k].peer_gid,
 -			    SMC_GID_SIZE)) {
 -			asym_idx = i;
 -			break;
 -		}
 -		if (k != j &&
 -		    !memcmp(lgr->lnk[j].peer_gid, lgr->lnk[k].peer_gid,
 -			    SMC_GID_SIZE)) {
 -			asym_idx = j;
 -			break;
 +	} else {
 +		if (lgr->role == SMC_CLNT &&
 +		    link->state == SMC_LNK_ACTIVATING) {
 +			link->llc_confirm_rc = conf_rc;
 +			link->link_id = llc->link_num;
 +			complete(&link->llc_confirm);
  		}
  	}
 -out:
 -	return (asym_idx < 0) ? NULL : &lgr->lnk[asym_idx];
  }
  
 -static void smc_llc_delete_asym_link(struct smc_link_group *lgr)
 +static void smc_llc_rx_add_link(struct smc_link *link,
 +				struct smc_llc_msg_add_link *llc)
  {
 -	struct smc_link *lnk_new = NULL, *lnk_asym;
 -	struct smc_llc_qentry *qentry;
 -	int rc;
 -
 -	lnk_asym = smc_llc_find_asym_link(lgr);
 -	if (!lnk_asym)
 -		return; /* no asymmetric link */
 -	if (!smc_link_downing(&lnk_asym->state))
 -		return;
 -	lnk_new = smc_switch_conns(lgr, lnk_asym, false);
 -	smc_wr_tx_wait_no_pending_sends(lnk_asym);
 -	if (!lnk_new)
 -		goto out_free;
 -	/* change flow type from ADD_LINK into DEL_LINK */
 -	lgr->llc_flow_lcl.type = SMC_LLC_FLOW_DEL_LINK;
 -	rc = smc_llc_send_delete_link(lnk_new, lnk_asym->link_id, SMC_LLC_REQ,
 -				      true, SMC_LLC_DEL_NO_ASYM_NEEDED);
 -	if (rc) {
 -		smcr_link_down_cond(lnk_new);
 -		goto out_free;
 -	}
 -	qentry = smc_llc_wait(lgr, lnk_new, SMC_LLC_WAIT_TIME,
 -			      SMC_LLC_DELETE_LINK);
 -	if (!qentry) {
 -		smcr_link_down_cond(lnk_new);
 -		goto out_free;
 -	}
 -	smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
 -out_free:
 -	smcr_link_clear(lnk_asym);
 -}
 +	struct smc_link_group *lgr = smc_get_lgr(link);
  
 -static int smc_llc_srv_rkey_exchange(struct smc_link *link,
 -				     struct smc_link *link_new)
 -{
 -	struct smc_llc_msg_add_link_cont *addc_llc;
 -	struct smc_link_group *lgr = link->lgr;
 -	u8 max, num_rkeys_send, num_rkeys_recv;
 -	struct smc_llc_qentry *qentry = NULL;
 -	struct smc_buf_desc *buf_pos;
 -	int buf_lst;
 -	int rc = 0;
 -	int i;
 -
 -	mutex_lock(&lgr->rmbs_lock);
 -	num_rkeys_send = lgr->conns_num;
 -	buf_pos = smc_llc_get_first_rmb(lgr, &buf_lst);
 -	do {
 -		smc_llc_add_link_cont(link, link_new, &num_rkeys_send,
 -				      &buf_lst, &buf_pos);
 -		qentry = smc_llc_wait(lgr, link, SMC_LLC_WAIT_TIME,
 -				      SMC_LLC_ADD_LINK_CONT);
 -		if (!qentry) {
 -			rc = -ETIMEDOUT;
 -			goto out;
 -		}
 -		addc_llc = &qentry->msg.add_link_cont;
 -		num_rkeys_recv = addc_llc->num_rkeys;
 -		max = min_t(u8, num_rkeys_recv, SMC_LLC_RKEYS_PER_CONT_MSG);
 -		for (i = 0; i < max; i++) {
 -			smc_rtoken_set(lgr, link->link_idx, link_new->link_idx,
 -				       addc_llc->rt[i].rmb_key,
 -				       addc_llc->rt[i].rmb_vaddr_new,
 -				       addc_llc->rt[i].rmb_key_new);
 -			num_rkeys_recv--;
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		if (link->state == SMC_LNK_ACTIVATING)
 +			complete(&link->llc_add_resp);
 +	} else {
 +		if (link->state == SMC_LNK_ACTIVATING) {
 +			complete(&link->llc_add);
 +			return;
  		}
 -		smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
 -	} while (num_rkeys_send || num_rkeys_recv);
 -out:
 -	mutex_unlock(&lgr->rmbs_lock);
 -	return rc;
 -}
 -
 -static int smc_llc_srv_conf_link(struct smc_link *link,
 -				 struct smc_link *link_new,
 -				 enum smc_lgr_type lgr_new_t)
 -{
 -	struct smc_link_group *lgr = link->lgr;
 -	struct smc_llc_qentry *qentry = NULL;
 -	int rc;
 -
 -	/* send CONFIRM LINK request over the RoCE fabric */
 -	rc = smc_llc_send_confirm_link(link_new, SMC_LLC_REQ);
 -	if (rc)
 -		return -ENOLINK;
 -	/* receive CONFIRM LINK response over the RoCE fabric */
 -	qentry = smc_llc_wait(lgr, link, SMC_LLC_WAIT_FIRST_TIME,
 -			      SMC_LLC_CONFIRM_LINK);
 -	if (!qentry) {
 -		/* send DELETE LINK */
 -		smc_llc_send_delete_link(link, link_new->link_id, SMC_LLC_REQ,
 -					 false, SMC_LLC_DEL_LOST_PATH);
 -		return -ENOLINK;
 -	}
 -	smc_llc_link_active(link_new);
 -	if (lgr_new_t == SMC_LGR_ASYMMETRIC_LOCAL ||
 -	    lgr_new_t == SMC_LGR_ASYMMETRIC_PEER)
 -		smcr_lgr_set_type_asym(lgr, lgr_new_t, link_new->link_idx);
 -	else
 -		smcr_lgr_set_type(lgr, lgr_new_t);
 -	smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
 -	return 0;
 -}
 -
 -int smc_llc_srv_add_link(struct smc_link *link)
 -{
 -	enum smc_lgr_type lgr_new_t = SMC_LGR_SYMMETRIC;
 -	struct smc_link_group *lgr = link->lgr;
 -	struct smc_llc_msg_add_link *add_llc;
 -	struct smc_llc_qentry *qentry = NULL;
 -	struct smc_link *link_new;
 -	struct smc_init_info ini;
 -	int lnk_idx, rc = 0;
 -
 -	/* ignore client add link recommendation, start new flow */
 -	ini.vlan_id = lgr->vlan_id;
 -	smc_pnet_find_alt_roce(lgr, &ini, link->smcibdev);
 -	if (!ini.ib_dev) {
 -		lgr_new_t = SMC_LGR_ASYMMETRIC_LOCAL;
 -		ini.ib_dev = link->smcibdev;
 -		ini.ib_port = link->ibport;
 -	}
 -	lnk_idx = smc_llc_alloc_alt_link(lgr, lgr_new_t);
 -	if (lnk_idx < 0)
 -		return 0;
 -
 -	rc = smcr_link_init(lgr, &lgr->lnk[lnk_idx], lnk_idx, &ini);
 -	if (rc)
 -		return rc;
 -	link_new = &lgr->lnk[lnk_idx];
 -	rc = smc_llc_send_add_link(link,
 -				   link_new->smcibdev->mac[ini.ib_port - 1],
 -				   link_new->gid, link_new, SMC_LLC_REQ);
 -	if (rc)
 -		goto out_err;
 -	/* receive ADD LINK response over the RoCE fabric */
 -	qentry = smc_llc_wait(lgr, link, SMC_LLC_WAIT_TIME, SMC_LLC_ADD_LINK);
 -	if (!qentry) {
 -		rc = -ETIMEDOUT;
 -		goto out_err;
 -	}
 -	add_llc = &qentry->msg.add_link;
 -	if (add_llc->hd.flags & SMC_LLC_FLAG_ADD_LNK_REJ) {
 -		smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
 -		rc = -ENOLINK;
 -		goto out_err;
 -	}
 -	if (lgr->type == SMC_LGR_SINGLE &&
 -	    (!memcmp(add_llc->sender_gid, link->peer_gid, SMC_GID_SIZE) &&
 -	     !memcmp(add_llc->sender_mac, link->peer_mac, ETH_ALEN))) {
 -		lgr_new_t = SMC_LGR_ASYMMETRIC_PEER;
 -	}
 -	smc_llc_save_add_link_info(link_new, add_llc);
 -	smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
  
 -	rc = smc_ib_ready_link(link_new);
 -	if (rc)
 -		goto out_err;
 -	rc = smcr_buf_map_lgr(link_new);
 -	if (rc)
 -		goto out_err;
 -	rc = smcr_buf_reg_lgr(link_new);
 -	if (rc)
 -		goto out_err;
 -	rc = smc_llc_srv_rkey_exchange(link, link_new);
 -	if (rc)
 -		goto out_err;
 -	rc = smc_llc_srv_conf_link(link, link_new, lgr_new_t);
 -	if (rc)
 -		goto out_err;
 -	return 0;
 -out_err:
 -	smcr_link_clear(link_new);
 -	return rc;
 -}
 -
 -static void smc_llc_process_srv_add_link(struct smc_link_group *lgr)
 -{
 -	struct smc_link *link = lgr->llc_flow_lcl.qentry->link;
 -	int rc;
 +		if (lgr->role == SMC_SERV) {
 +			smc_llc_prep_add_link(llc, link,
 +					link->smcibdev->mac[link->ibport - 1],
 +					link->gid, SMC_LLC_REQ);
  
 -	smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
 -
 -	mutex_lock(&lgr->llc_conf_mutex);
 -	rc = smc_llc_srv_add_link(link);
 -	if (!rc && lgr->type == SMC_LGR_SYMMETRIC) {
 -		/* delete any asymmetric link */
 -		smc_llc_delete_asym_link(lgr);
 -	}
 -	mutex_unlock(&lgr->llc_conf_mutex);
 -}
 -
 -/* enqueue a local add_link req to trigger a new add_link flow, only as SERV */
 -void smc_llc_srv_add_link_local(struct smc_link *link)
 -{
 -	struct smc_llc_msg_add_link add_llc = {0};
 -
 -	add_llc.hd.length = sizeof(add_llc);
 -	add_llc.hd.common.type = SMC_LLC_ADD_LINK;
 -	/* no dev and port needed, we as server ignore client data anyway */
 -	smc_llc_enqueue(link, (union smc_llc_msg *)&add_llc);
 -}
 -
 -/* worker to process an add link message */
 -static void smc_llc_add_link_work(struct work_struct *work)
 -{
 -	struct smc_link_group *lgr = container_of(work, struct smc_link_group,
 -						  llc_add_link_work);
 -
 -	if (list_empty(&lgr->list)) {
 -		/* link group is terminating */
 -		smc_llc_flow_qentry_del(&lgr->llc_flow_lcl);
 -		goto out;
 +		} else {
 +			smc_llc_prep_add_link(llc, link,
 +					link->smcibdev->mac[link->ibport - 1],
 +					link->gid, SMC_LLC_RESP);
 +		}
 +		smc_llc_send_message(link, llc, sizeof(*llc));
  	}
 -
 -	if (lgr->role == SMC_CLNT)
 -		smc_llc_process_cli_add_link(lgr);
 -	else
 -		smc_llc_process_srv_add_link(lgr);
 -out:
 -	smc_llc_flow_stop(lgr, &lgr->llc_flow_lcl);
 -}
 -
 -/* enqueue a local del_link msg to trigger a new del_link flow,
 - * called only for role SMC_SERV
 - */
 -void smc_llc_srv_delete_link_local(struct smc_link *link, u8 del_link_id)
 -{
 -	struct smc_llc_msg_del_link del_llc = {0};
 -
 -	del_llc.hd.length = sizeof(del_llc);
 -	del_llc.hd.common.type = SMC_LLC_DELETE_LINK;
 -	del_llc.link_num = del_link_id;
 -	del_llc.reason = htonl(SMC_LLC_DEL_LOST_PATH);
 -	del_llc.hd.flags |= SMC_LLC_FLAG_DEL_LINK_ORDERLY;
 -	smc_llc_enqueue(link, (union smc_llc_msg *)&del_llc);
  }
  
 -static void smc_llc_process_cli_delete_link(struct smc_link_group *lgr)
 +static void smc_llc_rx_delete_link(struct smc_link *link,
 +				   struct smc_llc_msg_del_link *llc)
  {
 -	struct smc_link *lnk_del = NULL, *lnk_asym, *lnk;
 -	struct smc_llc_msg_del_link *del_llc;
 -	struct smc_llc_qentry *qentry;
 -	int active_links;
 -	int lnk_idx;
 -
 -	qentry = smc_llc_flow_qentry_clr(&lgr->llc_flow_lcl);
 -	lnk = qentry->link;
 -	del_llc = &qentry->msg.delete_link;
 -
 -	if (del_llc->hd.flags & SMC_LLC_FLAG_DEL_LINK_ALL) {
 -		smc_lgr_terminate_sched(lgr);
 -		goto out;
 -	}
 -	mutex_lock(&lgr->llc_conf_mutex);
 -	/* delete single link */
 -	for (lnk_idx = 0; lnk_idx < SMC_LINKS_PER_LGR_MAX; lnk_idx++) {
 -		if (lgr->lnk[lnk_idx].link_id != del_llc->link_num)
 -			continue;
 -		lnk_del = &lgr->lnk[lnk_idx];
 -		break;
 -	}
 -	del_llc->hd.flags |= SMC_LLC_FLAG_RESP;
 -	if (!lnk_del) {
 -		/* link was not found */
 -		del_llc->reason = htonl(SMC_LLC_DEL_NOLNK);
 -		smc_llc_send_message(lnk, &qentry->msg);
 -		goto out_unlock;
 -	}
 -	lnk_asym = smc_llc_find_asym_link(lgr);
 -
 -	del_llc->reason = 0;
 -	smc_llc_send_message(lnk, &qentry->msg); /* response */
 +	struct smc_link_group *lgr = smc_get_lgr(link);
  
 -	if (smc_link_downing(&lnk_del->state)) {
 -		smc_switch_conns(lgr, lnk_del, false);
 -		smc_wr_tx_wait_no_pending_sends(lnk_del);
 -	}
 -	smcr_link_clear(lnk_del);
 -
 -	active_links = smc_llc_active_link_count(lgr);
 -	if (lnk_del == lnk_asym) {
 -		/* expected deletion of asym link, don't change lgr state */
 -	} else if (active_links == 1) {
 -		smcr_lgr_set_type(lgr, SMC_LGR_SINGLE);
 -	} else if (!active_links) {
 -		smcr_lgr_set_type(lgr, SMC_LGR_NONE);
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		if (lgr->role == SMC_SERV)
 +			smc_lgr_schedule_free_work_fast(lgr);
 +	} else {
 +		smc_lgr_forget(lgr);
 +		smc_llc_link_deleting(link);
 +		if (lgr->role == SMC_SERV) {
 +			/* client asks to delete this link, send request */
 +			smc_llc_prep_delete_link(llc, link, SMC_LLC_REQ, true);
 +		} else {
 +			/* server requests to delete this link, send response */
 +			smc_llc_prep_delete_link(llc, link, SMC_LLC_RESP, true);
 +		}
 +		smc_llc_send_message(link, llc, sizeof(*llc));
  		smc_lgr_terminate_sched(lgr);
  	}
 -out_unlock:
 -	mutex_unlock(&lgr->llc_conf_mutex);
 -out:
 -	kfree(qentry);
  }
  
 -/* try to send a DELETE LINK ALL request on any active link,
 - * waiting for send completion
 - */
 -void smc_llc_send_link_delete_all(struct smc_link_group *lgr, bool ord, u32 rsn)
 +static void smc_llc_rx_test_link(struct smc_link *link,
 +				 struct smc_llc_msg_test_link *llc)
  {
 -	struct smc_llc_msg_del_link delllc = {0};
 -	int i;
 -
 -	delllc.hd.common.type = SMC_LLC_DELETE_LINK;
 -	delllc.hd.length = sizeof(delllc);
 -	if (ord)
 -		delllc.hd.flags |= SMC_LLC_FLAG_DEL_LINK_ORDERLY;
 -	delllc.hd.flags |= SMC_LLC_FLAG_DEL_LINK_ALL;
 -	delllc.reason = htonl(rsn);
 -
 -	for (i = 0; i < SMC_LINKS_PER_LGR_MAX; i++) {
 -		if (!smc_link_usable(&lgr->lnk[i]))
 -			continue;
 -		if (!smc_llc_send_message_wait(&lgr->lnk[i], &delllc))
 -			break;
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		if (link->state == SMC_LNK_ACTIVE)
 +			complete(&link->llc_testlink_resp);
 +	} else {
 +		llc->hd.flags |= SMC_LLC_FLAG_RESP;
 +		smc_llc_send_message(link, llc, sizeof(*llc));
  	}
  }
  
@@@ -722,6 -1775,27 +752,30 @@@ out
  	return rc;
  }
  
++<<<<<<< HEAD
++=======
+ void smc_llc_link_set_uid(struct smc_link *link)
+ {
+ 	__be32 link_uid;
+ 
+ 	link_uid = htonl(*((u32 *)link->lgr->id) + link->link_id);
+ 	memcpy(link->link_uid, &link_uid, SMC_LGR_ID_SIZE);
+ }
+ 
+ /* evaluate confirm link request or response */
+ int smc_llc_eval_conf_link(struct smc_llc_qentry *qentry,
+ 			   enum smc_llc_reqresp type)
+ {
+ 	if (type == SMC_LLC_REQ) {	/* SMC server assigns link_id */
+ 		qentry->link->link_id = qentry->msg.confirm_link.link_num;
+ 		smc_llc_link_set_uid(qentry->link);
+ 	}
+ 	if (!(qentry->msg.raw.hdr.flags & SMC_LLC_FLAG_NO_RMBE_EYEC))
+ 		return -ENOTSUPP;
+ 	return 0;
+ }
+ 
++>>>>>>> 45fa8da0bf5c (net/smc: create improved SMC-R link_uid)
  /***************************** init, exit, misc ******************************/
  
  static struct smc_wr_rx_handler smc_llc_rx_handlers[] = {
diff --cc net/smc/smc_llc.h
index 461c0c3ef76e,1b68f229cb99..000000000000
--- a/net/smc/smc_llc.h
+++ b/net/smc/smc_llc.h
@@@ -39,18 -72,37 +39,37 @@@ enum smc_llc_msg_type 
  int smc_llc_send_confirm_link(struct smc_link *lnk,
  			      enum smc_llc_reqresp reqresp);
  int smc_llc_send_add_link(struct smc_link *link, u8 mac[], u8 gid[],
 -			  struct smc_link *link_new,
  			  enum smc_llc_reqresp reqresp);
 -int smc_llc_send_delete_link(struct smc_link *link, u8 link_del_id,
 -			     enum smc_llc_reqresp reqresp, bool orderly,
 -			     u32 reason);
 -void smc_llc_srv_delete_link_local(struct smc_link *link, u8 del_link_id);
 -void smc_llc_lgr_init(struct smc_link_group *lgr, struct smc_sock *smc);
 -void smc_llc_lgr_clear(struct smc_link_group *lgr);
 +int smc_llc_send_delete_link(struct smc_link *link,
 +			     enum smc_llc_reqresp reqresp, bool orderly);
  int smc_llc_link_init(struct smc_link *link);
 -void smc_llc_link_active(struct smc_link *link);
 +void smc_llc_link_active(struct smc_link *link, int testlink_time);
 +void smc_llc_link_deleting(struct smc_link *link);
 +void smc_llc_link_inactive(struct smc_link *link);
  void smc_llc_link_clear(struct smc_link *link);
 -int smc_llc_do_confirm_rkey(struct smc_link *send_link,
 +int smc_llc_do_confirm_rkey(struct smc_link *link,
  			    struct smc_buf_desc *rmb_desc);
 -int smc_llc_do_delete_rkey(struct smc_link_group *lgr,
 +int smc_llc_do_delete_rkey(struct smc_link *link,
  			   struct smc_buf_desc *rmb_desc);
++<<<<<<< HEAD
++=======
+ int smc_llc_flow_initiate(struct smc_link_group *lgr,
+ 			  enum smc_llc_flowtype type);
+ void smc_llc_flow_stop(struct smc_link_group *lgr, struct smc_llc_flow *flow);
+ int smc_llc_eval_conf_link(struct smc_llc_qentry *qentry,
+ 			   enum smc_llc_reqresp type);
+ void smc_llc_link_set_uid(struct smc_link *link);
+ struct smc_llc_qentry *smc_llc_wait(struct smc_link_group *lgr,
+ 				    struct smc_link *lnk,
+ 				    int time_out, u8 exp_msg);
+ struct smc_llc_qentry *smc_llc_flow_qentry_clr(struct smc_llc_flow *flow);
+ void smc_llc_flow_qentry_del(struct smc_llc_flow *flow);
+ void smc_llc_send_link_delete_all(struct smc_link_group *lgr, bool ord,
+ 				  u32 rsn);
+ int smc_llc_cli_add_link(struct smc_link *link, struct smc_llc_qentry *qentry);
+ int smc_llc_srv_add_link(struct smc_link *link);
+ void smc_llc_srv_add_link_local(struct smc_link *link);
++>>>>>>> 45fa8da0bf5c (net/smc: create improved SMC-R link_uid)
  int smc_llc_init(void) __init;
  
  #endif /* SMC_LLC_H */
* Unmerged path net/smc/smc_core.c
diff --git a/net/smc/smc_core.h b/net/smc/smc_core.h
index dc42fae85777..b434ed0b93d6 100644
--- a/net/smc/smc_core.h
+++ b/net/smc/smc_core.h
@@ -70,6 +70,8 @@ struct smc_rdma_wr {				/* work requests per message
 	struct ib_rdma_wr	wr_tx_rdma[SMC_MAX_RDMA_WRITES];
 };
 
+#define SMC_LGR_ID_SIZE		4
+
 struct smc_link {
 	struct smc_ib_device	*smcibdev;	/* ib-device */
 	u8			ibport;		/* port - values 1 | 2 */
@@ -116,6 +118,7 @@ struct smc_link {
 	u8			peer_mac[ETH_ALEN];	/* = gid[8:10||13:15] */
 	u8			peer_gid[SMC_GID_SIZE];	/* gid of peer*/
 	u8			link_id;	/* unique # within link group */
+	u8			link_uid[SMC_LGR_ID_SIZE]; /* unique lnk id */
 	u8			link_idx;	/* index in lgr link array */
 	struct smc_link_group	*lgr;		/* parent link group */
 
@@ -188,7 +191,6 @@ struct smc_rtoken {				/* address/key of remote RMB */
 	u32			rkey;
 };
 
-#define SMC_LGR_ID_SIZE		4
 #define SMC_BUF_MIN_SIZE	16384	/* minimum size of an RMB */
 #define SMC_RMBE_SIZES		16	/* number of distinct RMBE sizes */
 /* theoretically, the RFC states that largest size would be 512K,
* Unmerged path net/smc/smc_llc.c
* Unmerged path net/smc/smc_llc.h
