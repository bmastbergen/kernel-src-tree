nvmet-tcp: set SO_PRIORITY for accepted sockets

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Wunderlich, Mark <mark.wunderlich@intel.com>
commit 43cc66892e81bb05283159e489a19cec177e6f9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/43cc6689.failed

Enable ability to associate all sockets related to NVMf TCP traffic
to a priority group that will perform optimized network processing for
this traffic class. Maintain initial default behavior of using priority
of zero.

	Signed-off-by: Kiran Patil <kiran.patil@intel.com>
	Signed-off-by: Mark Wunderlich <mark.wunderlich@intel.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Keith Busch <kbusch@kernel.org>
(cherry picked from commit 43cc66892e81bb05283159e489a19cec177e6f9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/target/tcp.c
diff --cc drivers/nvme/target/tcp.c
index 7cde2957a9c1,cbff1038bdb3..000000000000
--- a/drivers/nvme/target/tcp.c
+++ b/drivers/nvme/target/tcp.c
@@@ -1439,6 -1443,23 +1449,26 @@@ static int nvmet_tcp_set_queue_sock(str
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
++=======
+ 	if (so_priority > 0) {
+ 		ret = kernel_setsockopt(sock, SOL_SOCKET, SO_PRIORITY,
+ 				(char *)&so_priority, sizeof(so_priority));
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* Set socket type of service */
+ 	if (inet->rcv_tos > 0) {
+ 		int tos = inet->rcv_tos;
+ 
+ 		ret = kernel_setsockopt(sock, SOL_IP, IP_TOS,
+ 				(char *)&tos, sizeof(tos));
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
++>>>>>>> 43cc66892e81 (nvmet-tcp: set SO_PRIORITY for accepted sockets)
  	write_lock_bh(&sock->sk->sk_callback_lock);
  	sock->sk->sk_user_data = queue;
  	queue->data_ready = sock->sk->sk_data_ready;
* Unmerged path drivers/nvme/target/tcp.c
