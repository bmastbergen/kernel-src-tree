gpiolib: convert the type of hwnum to unsigned int in gpiochip_get_desc()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Bartosz Golaszewski <bgolaszewski@baylibre.com>
commit 06863620edfeadbe9e0ea5eb01dd94ce07f37549
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/06863620.failed

gpiochip_get_desc() takes a u16 hwnum, but it turns out most users don't
respect that and usually pass an unsigned int. Since implicit casting to
a smaller type is dangerous - let's change the type of hwnum to unsigned
int in gpiochip_get_desc() and in gpiochip_request_own_desc() where the
size of hwnum is not respected either and who's a user of the former.

This is safe as we then check the hwnum against the number of lines
before proceeding in gpiochip_get_desc().

	Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 06863620edfeadbe9e0ea5eb01dd94ce07f37549)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpiolib.c
#	include/linux/gpio/driver.h
diff --cc drivers/gpio/gpiolib.c
index b9f21eae602d,342c9604f46a..000000000000
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@@ -2557,11 -2990,14 +2557,19 @@@ EXPORT_SYMBOL_GPL(gpiochip_is_requested
   * A pointer to the GPIO descriptor, or an ERR_PTR()-encoded negative error
   * code on failure.
   */
++<<<<<<< HEAD
 +struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *chip, u16 hwnum,
 +					    const char *label)
++=======
+ struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *chip,
+ 					    unsigned int hwnum,
+ 					    const char *label,
+ 					    enum gpio_lookup_flags lflags,
+ 					    enum gpiod_flags dflags)
++>>>>>>> 06863620edfe (gpiolib: convert the type of hwnum to unsigned int in gpiochip_get_desc())
  {
  	struct gpio_desc *desc = gpiochip_get_desc(chip, hwnum);
 -	int ret;
 +	int err;
  
  	if (IS_ERR(desc)) {
  		chip_err(chip, "failed to get GPIO descriptor\n");
diff --cc include/linux/gpio/driver.h
index f4ee51450abd,4f032de10bae..000000000000
--- a/include/linux/gpio/driver.h
+++ b/include/linux/gpio/driver.h
@@@ -595,8 -715,11 +595,16 @@@ gpiochip_remove_pin_ranges(struct gpio_
  
  #endif /* CONFIG_PINCTRL */
  
++<<<<<<< HEAD
 +struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *chip, u16 hwnum,
 +					    const char *label);
++=======
+ struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *chip,
+ 					    unsigned int hwnum,
+ 					    const char *label,
+ 					    enum gpio_lookup_flags lflags,
+ 					    enum gpiod_flags dflags);
++>>>>>>> 06863620edfe (gpiolib: convert the type of hwnum to unsigned int in gpiochip_get_desc())
  void gpiochip_free_own_desc(struct gpio_desc *desc);
  
  void devprop_gpiochip_set_names(struct gpio_chip *chip,
* Unmerged path drivers/gpio/gpiolib.c
diff --git a/drivers/gpio/gpiolib.h b/drivers/gpio/gpiolib.h
index 7c52c2442173..87d7cd807ff4 100644
--- a/drivers/gpio/gpiolib.h
+++ b/drivers/gpio/gpiolib.h
@@ -198,7 +198,8 @@ struct gpio_array {
 	unsigned long		invert_mask[];
 };
 
-struct gpio_desc *gpiochip_get_desc(struct gpio_chip *chip, u16 hwnum);
+struct gpio_desc *gpiochip_get_desc(struct gpio_chip *chip,
+				    unsigned int hwnum);
 int gpiod_get_array_value_complex(bool raw, bool can_sleep,
 				  unsigned int array_size,
 				  struct gpio_desc **desc_array,
* Unmerged path include/linux/gpio/driver.h
