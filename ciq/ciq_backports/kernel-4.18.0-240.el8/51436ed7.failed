selftests/bpf: convert bpf_verif_scale.c to sub-tests API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 51436ed78d59d0a0b7e64a2a2b997ac66a6c050e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/51436ed7.failed

Expose each BPF verifier scale test as individual sub-test to allow
independent results output and test selection.

Test run results now look like this:

  $ sudo ./test_progs -t verif/
  #3/1 loop3.o:OK
  #3/2 test_verif_scale1.o:OK
  #3/3 test_verif_scale2.o:OK
  #3/4 test_verif_scale3.o:OK
  #3/5 pyperf50.o:OK
  #3/6 pyperf100.o:OK
  #3/7 pyperf180.o:OK
  #3/8 pyperf600.o:OK
  #3/9 pyperf600_nounroll.o:OK
  #3/10 loop1.o:OK
  #3/11 loop2.o:OK
  #3/12 strobemeta.o:OK
  #3/13 strobemeta_nounroll1.o:OK
  #3/14 strobemeta_nounroll2.o:OK
  #3/15 test_sysctl_loop1.o:OK
  #3/16 test_sysctl_loop2.o:OK
  #3/17 test_xdp_loop.o:OK
  #3/18 test_seg6_loop.o:OK
  #3 bpf_verif_scale:OK

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 51436ed78d59d0a0b7e64a2a2b997ac66a6c050e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
diff --cc tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
index db0c774864c8,b4be96162ff4..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
+++ b/tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
@@@ -81,35 -96,21 +96,43 @@@ void test_bpf_verif_scale(void
  		old_print_fn = libbpf_set_print(libbpf_debug_print);
  	}
  
- 	err = check_load("./loop3.o", BPF_PROG_TYPE_RAW_TRACEPOINT);
- 	test__printf("test_scale:loop3:%s\n",
- 		     err ? (error_cnt--, "OK") : "FAIL");
+ 	for (i = 0; i < ARRAY_SIZE(tests); i++) {
+ 		const struct scale_test_def *test = &tests[i];
  
- 	for (i = 0; i < ARRAY_SIZE(sched_cls); i++) {
- 		err = check_load(sched_cls[i], BPF_PROG_TYPE_SCHED_CLS);
- 		test__printf("test_scale:%s:%s\n", sched_cls[i],
- 			     err ? "FAIL" : "OK");
+ 		if (!test__start_subtest(test->file))
+ 			continue;
+ 
+ 		err = check_load(test->file, test->attach_type);
+ 		if (test->fails) { /* expected to fail */
+ 			if (err)
+ 				error_cnt--;
+ 			else
+ 				error_cnt++;
+ 		}
  	}
  
++<<<<<<< HEAD
 +	for (i = 0; i < ARRAY_SIZE(raw_tp); i++) {
 +		err = check_load(raw_tp[i], BPF_PROG_TYPE_RAW_TRACEPOINT);
 +		test__printf("test_scale:%s:%s\n", raw_tp[i],
 +			     err ? "FAIL" : "OK");
 +	}
 +
 +	for (i = 0; i < ARRAY_SIZE(cg_sysctl); i++) {
 +		err = check_load(cg_sysctl[i], BPF_PROG_TYPE_CGROUP_SYSCTL);
 +		test__printf("test_scale:%s:%s\n", cg_sysctl[i],
 +			     err ? "FAIL" : "OK");
 +	}
 +	err = check_load("./test_xdp_loop.o", BPF_PROG_TYPE_XDP);
 +	test__printf("test_scale:test_xdp_loop:%s\n", err ? "FAIL" : "OK");
 +
 +#if 0
 +	/* CONFIG_IPV6_SEG6_LWTUNNEL is disabled in RHEL 8 */
 +	err = check_load("./test_seg6_loop.o", BPF_PROG_TYPE_LWT_SEG6LOCAL);
 +	test__printf("test_scale:test_seg6_loop:%s\n", err ? "FAIL" : "OK");
 +#endif
++=======
++>>>>>>> 51436ed78d59 (selftests/bpf: convert bpf_verif_scale.c to sub-tests API)
  	if (env.verifier_stats)
  		libbpf_set_print(old_print_fn);
  }
* Unmerged path tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
