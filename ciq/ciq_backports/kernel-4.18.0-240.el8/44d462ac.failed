perf record: Fix binding of AIO user space buffers to nodes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexey Budankov <alexey.budankov@linux.intel.com>
commit 44d462acc0bf3eabe1522471fd1f683d8ce612cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/44d462ac.failed

Correct maxnode parameter value passed to mbind() syscall to be the
amount of node mask bits to analyze plus 1. Dynamically allocate node
mask memory depending on the index of node of cpu being profiled.

Fixes: c44a8b44ca9f ("perf record: Bind the AIO user space buffers to nodes")
	Signed-off-by: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/c7ea8ffe-1357-bf9e-3a89-1da1d8e9b75b@linux.intel.com
[ Remove leftover nr_bits + 1 comment in mbind() call ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 44d462acc0bf3eabe1522471fd1f683d8ce612cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/mmap.c
diff --cc tools/perf/util/mmap.c
index 850493205040,ab7108d22428..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -192,21 -104,28 +194,36 @@@ static int perf_mmap__aio_bind(struct p
  
  	if (affinity != PERF_AFFINITY_SYS && cpu__max_node() > 1) {
  		data = map->aio.data[idx];
++<<<<<<< HEAD
 +		mmap_len = perf_mmap__mmap_len(map);
 +		node_mask = 1UL << cpu__get_node(cpu);
 +		if (mbind(data, mmap_len, MPOL_BIND, &node_mask, 1, 0)) {
 +			pr_err("Failed to bind [%p-%p] AIO buffer to node %d: error %m\n",
 +				data, data + mmap_len, cpu__get_node(cpu));
++=======
+ 		mmap_len = mmap__mmap_len(map);
+ 		node_index = cpu__get_node(cpu);
+ 		node_mask = bitmap_alloc(node_index + 1);
+ 		if (!node_mask) {
+ 			pr_err("Failed to allocate node mask for mbind: error %m\n");
++>>>>>>> 44d462acc0bf (perf record: Fix binding of AIO user space buffers to nodes)
  			return -1;
  		}
+ 		set_bit(node_index, node_mask);
+ 		if (mbind(data, mmap_len, MPOL_BIND, node_mask, node_index + 1 + 1, 0)) {
+ 			pr_err("Failed to bind [%p-%p] AIO buffer to node %lu: error %m\n",
+ 				data, data + mmap_len, node_index);
+ 			err = -1;
+ 		}
+ 		bitmap_free(node_mask);
  	}
  
- 	return 0;
+ 	return err;
  }
  #else /* !HAVE_LIBNUMA_SUPPORT */
 -static int perf_mmap__aio_alloc(struct mmap *map, int idx)
 +static int perf_mmap__aio_alloc(struct perf_mmap *map, int idx)
  {
 -	map->aio.data[idx] = malloc(mmap__mmap_len(map));
 +	map->aio.data[idx] = malloc(perf_mmap__mmap_len(map));
  	if (map->aio.data[idx] == NULL)
  		return -1;
  
* Unmerged path tools/perf/util/mmap.c
