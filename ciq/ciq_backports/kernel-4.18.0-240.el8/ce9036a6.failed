libperf: Include perf_evlist in evlist object

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit ce9036a6e3bdfac6c7ccf8221aec9bcf9c2d355e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ce9036a6.failed

Include perf_evlist in the evlist object, will continue to move other
generic things into libperf's perf_evlist.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-37-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ce9036a6e3bdfac6c7ccf8221aec9bcf9c2d355e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-sched.c
#	tools/perf/ui/browsers/hists.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
#	tools/perf/util/parse-events.c
#	tools/perf/util/stat-display.c
diff --cc tools/perf/builtin-sched.c
index d17a75eb69b7,897d11c8ca2e..000000000000
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@@ -2925,12 -2924,12 +2925,16 @@@ static int perf_timehist__process_sampl
  }
  
  static int timehist_check_attr(struct perf_sched *sched,
 -			       struct evlist *evlist)
 +			       struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	struct evsel_runtime *er;
  
++<<<<<<< HEAD
 +	list_for_each_entry(evsel, &evlist->entries, node) {
++=======
+ 	list_for_each_entry(evsel, &evlist->core.entries, core.node) {
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  		er = perf_evsel__get_runtime(evsel);
  		if (er == NULL) {
  			pr_err("Failed to allocate memory for evsel runtime data\n");
diff --cc tools/perf/ui/browsers/hists.c
index a94eb0755e8b,ed5406ff9fe4..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -3309,13 -3309,13 +3309,21 @@@ browse_hists
  			ui_browser__show_title(&menu->b, title);
  			switch (key) {
  			case K_TAB:
++<<<<<<< HEAD
 +				if (pos->node.next == &evlist->entries)
++=======
+ 				if (pos->core.node.next == &evlist->core.entries)
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  					pos = perf_evlist__first(evlist);
  				else
  					pos = perf_evsel__next(pos);
  				goto browse_hists;
  			case K_UNTAB:
++<<<<<<< HEAD
 +				if (pos->node.prev == &evlist->entries)
++=======
+ 				if (pos->core.node.prev == &evlist->core.entries)
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  					pos = perf_evlist__last(evlist);
  				else
  					pos = perf_evsel__prev(pos);
@@@ -3367,10 -3367,10 +3375,10 @@@ static int __perf_evlist__tui_browse_hi
  					   bool warn_lost_event,
  					   struct annotation_options *annotation_opts)
  {
 -	struct evsel *pos;
 -	struct evsel_menu menu = {
 +	struct perf_evsel *pos;
 +	struct perf_evsel_menu menu = {
  		.b = {
- 			.entries    = &evlist->entries,
+ 			.entries    = &evlist->core.entries,
  			.refresh    = ui_browser__list_head_refresh,
  			.seek	    = ui_browser__list_head_seek,
  			.write	    = perf_evsel_menu__write,
diff --cc tools/perf/util/evlist.c
index 4739b7914374,faf3ffd81d4c..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -178,10 -177,10 +178,14 @@@ static void perf_evlist__propagate_maps
  		__perf_evlist__propagate_maps(evlist, evsel);
  }
  
 -void evlist__add(struct evlist *evlist, struct evsel *entry)
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry)
  {
  	entry->evlist = evlist;
++<<<<<<< HEAD
 +	list_add_tail(&entry->node, &evlist->entries);
++=======
+ 	list_add_tail(&entry->core.node, &evlist->core.entries);
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  	entry->idx = evlist->nr_entries;
  	entry->tracking = !entry->idx;
  
@@@ -1681,16 -1680,16 +1685,16 @@@ void perf_evlist__to_front(struct perf_
  
  	evlist__for_each_entry_safe(evlist, n, evsel) {
  		if (evsel->leader == move_evsel->leader)
 -			list_move_tail(&evsel->core.node, &move);
 +			list_move_tail(&evsel->node, &move);
  	}
  
- 	list_splice(&move, &evlist->entries);
+ 	list_splice(&move, &evlist->core.entries);
  }
  
 -void perf_evlist__set_tracking_event(struct evlist *evlist,
 -				     struct evsel *tracking_evsel)
 +void perf_evlist__set_tracking_event(struct perf_evlist *evlist,
 +				     struct perf_evsel *tracking_evsel)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	if (tracking_evsel->tracking)
  		return;
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,7117378a08e3..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -24,8 -25,8 +25,13 @@@ struct record_opts
  #define PERF_EVLIST__HLIST_BITS 8
  #define PERF_EVLIST__HLIST_SIZE (1 << PERF_EVLIST__HLIST_BITS)
  
++<<<<<<< HEAD
 +struct perf_evlist {
 +	struct list_head entries;
++=======
+ struct evlist {
+ 	struct perf_evlist core;
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  	struct hlist_head heads[PERF_EVLIST__HLIST_SIZE];
  	int		 nr_entries;
  	int		 nr_groups;
@@@ -216,36 -217,36 +222,44 @@@ int perf_evlist__parse_sample_timestamp
  					union perf_event *event,
  					u64 *timestamp);
  
 -bool perf_evlist__valid_sample_type(struct evlist *evlist);
 -bool perf_evlist__valid_sample_id_all(struct evlist *evlist);
 -bool perf_evlist__valid_read_format(struct evlist *evlist);
 +bool perf_evlist__valid_sample_type(struct perf_evlist *evlist);
 +bool perf_evlist__valid_sample_id_all(struct perf_evlist *evlist);
 +bool perf_evlist__valid_read_format(struct perf_evlist *evlist);
  
 -void perf_evlist__splice_list_tail(struct evlist *evlist,
 +void perf_evlist__splice_list_tail(struct perf_evlist *evlist,
  				   struct list_head *list);
  
 -static inline bool perf_evlist__empty(struct evlist *evlist)
 +static inline bool perf_evlist__empty(struct perf_evlist *evlist)
  {
- 	return list_empty(&evlist->entries);
+ 	return list_empty(&evlist->core.entries);
  }
  
 -static inline struct evsel *perf_evlist__first(struct evlist *evlist)
 +static inline struct perf_evsel *perf_evlist__first(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	return list_entry(evlist->entries.next, struct perf_evsel, node);
++=======
+ 	return list_entry(evlist->core.entries.next, struct evsel, core.node);
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  }
  
 -static inline struct evsel *perf_evlist__last(struct evlist *evlist)
 +static inline struct perf_evsel *perf_evlist__last(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	return list_entry(evlist->entries.prev, struct perf_evsel, node);
++=======
+ 	return list_entry(evlist->core.entries.prev, struct evsel, core.node);
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  }
  
 -size_t perf_evlist__fprintf(struct evlist *evlist, FILE *fp);
 +size_t perf_evlist__fprintf(struct perf_evlist *evlist, FILE *fp);
  
 -int perf_evlist__strerror_open(struct evlist *evlist, int err, char *buf, size_t size);
 -int perf_evlist__strerror_mmap(struct evlist *evlist, int err, char *buf, size_t size);
 +int perf_evlist__strerror_open(struct perf_evlist *evlist, int err, char *buf, size_t size);
 +int perf_evlist__strerror_mmap(struct perf_evlist *evlist, int err, char *buf, size_t size);
  
 -bool perf_evlist__can_select_event(struct evlist *evlist, const char *str);
 -void perf_evlist__to_front(struct evlist *evlist,
 -			   struct evsel *move_evsel);
 +bool perf_evlist__can_select_event(struct perf_evlist *evlist, const char *str);
 +void perf_evlist__to_front(struct perf_evlist *evlist,
 +			   struct perf_evsel *move_evsel);
  
  /**
   * __evlist__for_each_entry - iterate thru all the evsels
@@@ -311,21 -312,21 +325,21 @@@
   * @tmp: struct evsel temp iterator
   */
  #define evlist__for_each_entry_safe(evlist, tmp, evsel) \
- 	__evlist__for_each_entry_safe(&(evlist)->entries, tmp, evsel)
+ 	__evlist__for_each_entry_safe(&(evlist)->core.entries, tmp, evsel)
  
 -void perf_evlist__set_tracking_event(struct evlist *evlist,
 -				     struct evsel *tracking_evsel);
 +void perf_evlist__set_tracking_event(struct perf_evlist *evlist,
 +				     struct perf_evsel *tracking_evsel);
  
 -struct evsel *
 -perf_evlist__find_evsel_by_str(struct evlist *evlist, const char *str);
 +struct perf_evsel *
 +perf_evlist__find_evsel_by_str(struct perf_evlist *evlist, const char *str);
  
 -struct evsel *perf_evlist__event2evsel(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__event2evsel(struct perf_evlist *evlist,
  					    union perf_event *event);
  
 -bool perf_evlist__exclude_kernel(struct evlist *evlist);
 +bool perf_evlist__exclude_kernel(struct perf_evlist *evlist);
  
 -void perf_evlist__force_leader(struct evlist *evlist);
 +void perf_evlist__force_leader(struct perf_evlist *evlist);
  
 -struct evsel *perf_evlist__reset_weak_group(struct evlist *evlist,
 -						 struct evsel *evsel);
 +struct perf_evsel *perf_evlist__reset_weak_group(struct perf_evlist *evlist,
 +						 struct perf_evsel *evsel);
  #endif /* __PERF_EVLIST_H */
diff --cc tools/perf/util/parse-events.c
index 0540303e5e97,a0b7d68d2f8e..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -2050,9 -2050,9 +2050,13 @@@ foreach_evsel_in_last_glob(struct perf_
  		if (!last)
  			return 0;
  
++<<<<<<< HEAD
 +		if (last->node.prev == &evlist->entries)
++=======
+ 		if (last->core.node.prev == &evlist->core.entries)
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  			return 0;
 -		last = list_entry(last->core.node.prev, struct evsel, core.node);
 +		last = list_entry(last->node.prev, struct perf_evsel, node);
  	} while (!last->cmdline_group_boundary);
  
  	return 0;
diff --cc tools/perf/util/stat-display.c
index 58df6a0dbb9f,b1a2571f7c8f..000000000000
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@@ -545,11 -545,11 +545,16 @@@ static void collect_all_aliases(struct 
  				       bool first),
  			    void *data)
  {
 -	struct evlist *evlist = counter->evlist;
 -	struct evsel *alias;
 +	struct perf_evlist *evlist = counter->evlist;
 +	struct perf_evsel *alias;
  
++<<<<<<< HEAD
 +	alias = list_prepare_entry(counter, &(evlist->entries), node);
 +	list_for_each_entry_continue (alias, &evlist->entries, node) {
++=======
+ 	alias = list_prepare_entry(counter, &(evlist->core.entries), core.node);
+ 	list_for_each_entry_continue (alias, &evlist->core.entries, core.node) {
++>>>>>>> ce9036a6e3bd (libperf: Include perf_evlist in evlist object)
  		if (strcmp(perf_evsel__name(alias), perf_evsel__name(counter)) ||
  		    alias->scale != counter->scale ||
  		    alias->cgrp != counter->cgrp ||
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..0c689d39bc76 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1003,7 +1003,7 @@ static void record__init_features(struct record *rec)
 	if (rec->no_buildid)
 		perf_header__clear_feat(&session->header, HEADER_BUILD_ID);
 
-	if (!have_tracepoints(&rec->evlist->entries))
+	if (!have_tracepoints(&rec->evlist->core.entries))
 		perf_header__clear_feat(&session->header, HEADER_TRACING_DATA);
 
 	if (!rec->opts.branch_stack)
@@ -1219,7 +1219,7 @@ static int record__synthesize(struct record *rec, bool tail)
 			return err;
 		}
 
-		if (have_tracepoints(&rec->evlist->entries)) {
+		if (have_tracepoints(&rec->evlist->core.entries)) {
 			/*
 			 * FIXME err <= 0 here actually means that
 			 * there were no tracepoints so its not really
* Unmerged path tools/perf/builtin-sched.c
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 9f9c869e0f26..035c20498b7b 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -3980,7 +3980,7 @@ static int trace__parse_cgroups(const struct option *opt, const char *str, int u
 {
 	struct trace *trace = opt->value;
 
-	if (!list_empty(&trace->evlist->entries))
+	if (!list_empty(&trace->evlist->core.entries))
 		return parse_cgroups(opt, str, unset);
 
 	trace->cgroup = evlist__findnew_cgroup(trace->evlist, str);
* Unmerged path tools/perf/ui/browsers/hists.c
diff --git a/tools/perf/util/cgroup.c b/tools/perf/util/cgroup.c
index 484c29830a81..39bec9d78d09 100644
--- a/tools/perf/util/cgroup.c
+++ b/tools/perf/util/cgroup.c
@@ -208,7 +208,7 @@ int parse_cgroups(const struct option *opt, const char *str,
 	char *s;
 	int ret, i;
 
-	if (list_empty(&evlist->entries)) {
+	if (list_empty(&evlist->core.entries)) {
 		fprintf(stderr, "must define events before cgroups\n");
 		return -1;
 	}
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index c3fbdc63c78a..0dcc558179d1 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -304,7 +304,7 @@ static int write_tracing_data(struct feat_fd *ff,
 	if (WARN(ff->buf, "Error: calling %s in pipe-mode.\n", __func__))
 		return -1;
 
-	return read_tracing_data(ff->fd, &evlist->entries);
+	return read_tracing_data(ff->fd, &evlist->core.entries);
 }
 
 static int write_build_id(struct feat_fd *ff,
@@ -4104,7 +4104,7 @@ int perf_event__synthesize_tracing_data(struct perf_tool *tool, int fd,
 	 * - write the tracing data from the temp file
 	 *   to the pipe
 	 */
-	tdata = tracing_data_get(&evlist->entries, fd, true);
+	tdata = tracing_data_get(&evlist->core.entries, fd, true);
 	if (!tdata)
 		return -1;
 
* Unmerged path tools/perf/util/parse-events.c
* Unmerged path tools/perf/util/stat-display.c
