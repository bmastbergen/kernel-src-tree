block: remove (__)blkdev_reread_part as an exported API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit f0b870df80bc70dad432fd0c142bb709a49964f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f0b870df.failed

In general drivers should never mess with partition tables directly.
Unfortunately s390 and loop do for somewhat historic reasons, but they
can use bdev_disk_changed directly instead when we export it as they
satisfy the sanity checks we have in __blkdev_reread_part.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Stefan Haberland <sth@linux.ibm.com>	[dasd]
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f0b870df80bc70dad432fd0c142bb709a49964f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/ioctl.c
#	fs/block_dev.c
diff --cc block/ioctl.c
index 4825c78a6baa,7ac8a66c9787..000000000000
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@@ -154,48 -155,21 +154,51 @@@ static int blkpg_ioctl(struct block_dev
  	}
  }
  
- /*
-  * This is an exported API for the block driver, and will not
-  * acquire bd_mutex. This API should be used in case that
-  * caller has held bd_mutex already.
-  */
- int __blkdev_reread_part(struct block_device *bdev)
+ static int blkdev_reread_part(struct block_device *bdev)
  {
++<<<<<<< HEAD
 +	struct gendisk *disk = bdev->bd_disk;
 +
 +	if (!disk_part_scan_enabled(disk) || bdev != bdev->bd_contains)
++=======
+ 	int ret;
+ 
+ 	if (!disk_part_scan_enabled(bdev->bd_disk) || bdev != bdev->bd_contains)
++>>>>>>> f0b870df80bc (block: remove (__)blkdev_reread_part as an exported API)
  		return -EINVAL;
  	if (!capable(CAP_SYS_ADMIN))
  		return -EACCES;
  
++<<<<<<< HEAD
 +	lockdep_assert_held(&bdev->bd_mutex);
 +
 +	return rescan_partitions(disk, bdev);
 +}
 +EXPORT_SYMBOL(__blkdev_reread_part);
 +
 +/*
 + * This is an exported API for the block driver, and will
 + * try to acquire bd_mutex. If bd_mutex has been held already
 + * in current context, please call __blkdev_reread_part().
 + *
 + * Make sure the held locks in current context aren't required
 + * in open()/close() handler and I/O path for avoiding ABBA deadlock:
 + * - bd_mutex is held before calling block driver's open/close
 + *   handler
 + * - reading partition table may submit I/O to the block device
 + */
 +int blkdev_reread_part(struct block_device *bdev)
 +{
 +	int res;
 +
++=======
++>>>>>>> f0b870df80bc (block: remove (__)blkdev_reread_part as an exported API)
  	mutex_lock(&bdev->bd_mutex);
- 	res = __blkdev_reread_part(bdev);
+ 	ret = bdev_disk_changed(bdev, false);
  	mutex_unlock(&bdev->bd_mutex);
  
- 	return res;
+ 	return ret;
  }
- EXPORT_SYMBOL(blkdev_reread_part);
  
  static int blk_ioctl_discard(struct block_device *bdev, fmode_t mode,
  		unsigned long arg, unsigned long flags)
diff --cc fs/block_dev.c
index 445bfb04306f,9558a2f064b1..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -1529,18 -1508,45 +1529,48 @@@ EXPORT_SYMBOL(bd_set_size)
  
  static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part);
  
 -int bdev_disk_changed(struct block_device *bdev, bool invalidate)
 +static void bdev_disk_changed(struct block_device *bdev, bool invalidate)
  {
++<<<<<<< HEAD
 +	if (disk_part_scan_enabled(bdev->bd_disk)) {
 +		if (invalidate)
 +			invalidate_partitions(bdev->bd_disk, bdev);
 +		else
 +			rescan_partitions(bdev->bd_disk, bdev);
++=======
+ 	struct gendisk *disk = bdev->bd_disk;
+ 	int ret;
+ 
+ 	lockdep_assert_held(&bdev->bd_mutex);
+ 
+ rescan:
+ 	ret = blk_drop_partitions(disk, bdev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (invalidate)
+ 		set_capacity(disk, 0);
+ 	else if (disk->fops->revalidate_disk)
+ 		disk->fops->revalidate_disk(disk);
+ 
+ 	check_disk_size_change(disk, bdev, !invalidate);
+ 	bdev->bd_invalidated = 0;
+ 
+ 	if (get_capacity(disk)) {
+ 		ret = blk_add_partitions(disk, bdev);
+ 		if (ret == -EAGAIN)
+ 			goto rescan;
++>>>>>>> f0b870df80bc (block: remove (__)blkdev_reread_part as an exported API)
  	} else {
 -		/*
 -		 * Tell userspace that the media / partition table may have
 -		 * changed.
 -		 */
 -		kobject_uevent(&disk_to_dev(disk)->kobj, KOBJ_CHANGE);
 +		check_disk_size_change(bdev->bd_disk, bdev, !invalidate);
 +		bdev->bd_invalidated = 0;
  	}
 -
 -	return ret;
  }
+ /*
+  * Only exported for for loop and dasd for historic reasons.  Don't use in new
+  * code!
+  */
+ EXPORT_SYMBOL_GPL(bdev_disk_changed);
  
  /*
   * bd_mutex locking:
* Unmerged path block/ioctl.c
diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index a23a2847d67a..e69645558e57 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -640,7 +640,9 @@ static void loop_reread_partitions(struct loop_device *lo,
 {
 	int rc;
 
-	rc = blkdev_reread_part(bdev);
+	mutex_lock(&bdev->bd_mutex);
+	rc = bdev_disk_changed(bdev, false);
+	mutex_unlock(&bdev->bd_mutex);
 	if (rc)
 		pr_warn("%s: partition scan of loop%d (%s) failed (rc=%d)\n",
 			__func__, lo->lo_number, lo->lo_file_name, rc);
@@ -1164,10 +1166,11 @@ static int __loop_clr_fd(struct loop_device *lo, bool release)
 		 * must be at least one and it can only become zero when the
 		 * current holder is released.
 		 */
-		if (release)
-			err = __blkdev_reread_part(bdev);
-		else
-			err = blkdev_reread_part(bdev);
+		if (!release)
+			mutex_lock(&bdev->bd_mutex);
+		err = bdev_disk_changed(bdev, false);
+		if (!release)
+			mutex_unlock(&bdev->bd_mutex);
 		if (err)
 			pr_warn("%s: partition scan of loop%d failed (rc=%d)\n",
 				__func__, lo_number, err);
diff --git a/drivers/s390/block/dasd_genhd.c b/drivers/s390/block/dasd_genhd.c
index 5542d9eadfe0..7d079154f849 100644
--- a/drivers/s390/block/dasd_genhd.c
+++ b/drivers/s390/block/dasd_genhd.c
@@ -116,7 +116,9 @@ int dasd_scan_partitions(struct dasd_block *block)
 		return -ENODEV;
 	}
 
-	rc = blkdev_reread_part(bdev);
+	mutex_lock(&bdev->bd_mutex);
+	rc = bdev_disk_changed(bdev, false);
+	mutex_unlock(&bdev->bd_mutex);
 	if (rc)
 		DBF_DEV_EVENT(DBF_ERR, block->base,
 				"scan partitions error, rc %d", rc);
* Unmerged path fs/block_dev.c
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 652bd41d3698..da38fe1f5baf 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2617,8 +2617,6 @@ extern void bd_finish_claiming(struct block_device *bdev,
 extern void bd_abort_claiming(struct block_device *bdev,
 			      struct block_device *whole, void *holder);
 extern void blkdev_put(struct block_device *bdev, fmode_t mode);
-extern int __blkdev_reread_part(struct block_device *bdev);
-extern int blkdev_reread_part(struct block_device *bdev);
 
 #ifdef CONFIG_SYSFS
 extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
