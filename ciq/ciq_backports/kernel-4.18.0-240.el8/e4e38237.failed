bnxt_en: Report health status update after reset is done

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Vasundhara Volam <vasundhara-v.volam@broadcom.com>
commit e4e38237d7e39e84d4db4a5cf0aa1ce7fbfaa5d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e4e38237.failed

Report health status update to devlink health reporter, once
reset is completed.

	Cc: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e4e38237d7e39e84d4db4a5cf0aa1ce7fbfaa5d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 35683765af43,a1683249e360..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -10789,8 -10750,7 +10789,12 @@@ static void bnxt_fw_reset_task(struct w
  		smp_mb__before_atomic();
  		clear_bit(BNXT_STATE_IN_FW_RESET, &bp->state);
  		bnxt_ulp_start(bp, rc);
++<<<<<<< HEAD
 +		if (!rc)
 +			bnxt_reenable_sriov(bp);
++=======
+ 		bnxt_dl_health_status_update(bp, true);
++>>>>>>> e4e38237d7e3 (bnxt_en: Report health status update after reset is done)
  		rtnl_unlock();
  		break;
  	}
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
index 689c47ab2155,665d4bdcd8c0..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
@@@ -57,8 -57,7 +57,12 @@@ struct bnxt_dl_nvm_param 
  };
  
  void bnxt_devlink_health_report(struct bnxt *bp, unsigned long event);
++<<<<<<< HEAD
 +void bnxt_dl_fw_reporters_create(struct bnxt *bp);
 +void bnxt_dl_fw_reporters_destroy(struct bnxt *bp, bool all);
++=======
+ void bnxt_dl_health_status_update(struct bnxt *bp, bool healthy);
++>>>>>>> e4e38237d7e3 (bnxt_en: Report health status update after reset is done)
  int bnxt_dl_register(struct bnxt *bp);
  void bnxt_dl_unregister(struct bnxt *bp);
  
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.h b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
index c2dc1b2a8d40..2cf45826a44e 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@ -1384,6 +1384,7 @@ struct bnxt_fw_health {
 	u32 last_fw_reset_cnt;
 	u8 enabled:1;
 	u8 master:1;
+	u8 fatal:1;
 	u8 tmr_multiplier;
 	u8 tmr_counter;
 	u8 fw_reset_seq_cnt;
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index efb793c128d5..20d6bc2288d9 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@ -88,6 +88,7 @@ static int bnxt_fw_fatal_recover(struct devlink_health_reporter *reporter,
 	if (!priv_ctx)
 		return -EOPNOTSUPP;
 
+	bp->fw_health->fatal = true;
 	event = fw_reporter_ctx->sp_event;
 	if (event == BNXT_FW_RESET_NOTIFY_SP_EVENT)
 		bnxt_fw_reset(bp);
@@ -223,6 +224,26 @@ void bnxt_devlink_health_report(struct bnxt *bp, unsigned long event)
 	}
 }
 
+void bnxt_dl_health_status_update(struct bnxt *bp, bool healthy)
+{
+	struct bnxt_fw_health *health = bp->fw_health;
+	u8 state;
+
+	if (healthy)
+		state = DEVLINK_HEALTH_REPORTER_STATE_HEALTHY;
+	else
+		state = DEVLINK_HEALTH_REPORTER_STATE_ERROR;
+
+	if (health->fatal)
+		devlink_health_reporter_state_update(health->fw_fatal_reporter,
+						     state);
+	else
+		devlink_health_reporter_state_update(health->fw_reset_reporter,
+						     state);
+
+	health->fatal = false;
+}
+
 static const struct devlink_ops bnxt_dl_ops = {
 #ifdef CONFIG_BNXT_SRIOV
 	.eswitch_mode_set = bnxt_dl_eswitch_mode_set,
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
