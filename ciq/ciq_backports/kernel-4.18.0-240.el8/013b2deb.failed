uprobes: ensure that uprobe->offset and ->ref_ctr_offset are properly aligned

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Oleg Nesterov <oleg@redhat.com>
commit 013b2deba9a6b80ca02f4fafd7dedf875e9b4450
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/013b2deb.failed

uprobe_write_opcode() must not cross page boundary; prepare_uprobe()
relies on arch_uprobe_analyze_insn() which should validate "vaddr" but
some architectures (csky, s390, and sparc) don't do this.

We can remove the BUG_ON() check in prepare_uprobe() and validate the
offset early in __uprobe_register(). The new IS_ALIGNED() check matches
the alignment check in arch_prepare_kprobe() on supported architectures,
so I think that all insns must be aligned to UPROBE_SWBP_INSN_SIZE.

Another problem is __update_ref_ctr() which was wrong from the very
beginning, it can read/write outside of kmap'ed page unless "vaddr" is
aligned to sizeof(short), __uprobe_register() should check this too.

	Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
	Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
	Tested-by: Sven Schnelle <svens@linux.ibm.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: stable@vger.kernel.org
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 013b2deba9a6b80ca02f4fafd7dedf875e9b4450)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/events/uprobes.c
diff --cc kernel/events/uprobes.c
index 8bd7b8d4bc99,5dc2f46f38c0..000000000000
--- a/kernel/events/uprobes.c
+++ b/kernel/events/uprobes.c
@@@ -814,11 -861,7 +814,15 @@@ static int prepare_uprobe(struct uprob
  	if (ret)
  		goto out;
  
++<<<<<<< HEAD
 +	/* uprobe_write_opcode() assumes we don't cross page boundary */
 +	BUG_ON((uprobe->offset & ~PAGE_MASK) +
 +			UPROBE_SWBP_INSN_SIZE > PAGE_SIZE);
 +
 +	smp_wmb(); /* pairs with rmb() in find_active_uprobe() */
++=======
+ 	smp_wmb(); /* pairs with the smp_rmb() in handle_swbp() */
++>>>>>>> 013b2deba9a6 (uprobes: ensure that uprobe->offset and ->ref_ctr_offset are properly aligned)
  	set_bit(UPROBE_COPY_INSN, &uprobe->flags);
  
   out:
* Unmerged path kernel/events/uprobes.c
