libperf: Add perf_thread_map__new_dummy() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 4b49cce25e719587e934b745fe9bbb5bc8c4ba29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4b49cce2.failed

Moving the following functions:

  thread_map__new_dummy()
  thread_map__realloc()
  thread_map__set_pid()

to libperf with the following names:

  perf_thread_map__new_dummy()
  perf_thread_map__realloc()
  perf_thread_map__set_pid()

the other 2 functions are dependencies of the
perf_thread_map__new_dummy() function.

The perf_thread_map__realloc() function is not exported.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-33-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 4b49cce25e719587e934b745fe9bbb5bc8c4ba29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/threadmap.h
#	tools/perf/lib/include/perf/threadmap.h
#	tools/perf/lib/libperf.map
#	tools/perf/lib/threadmap.c
#	tools/perf/util/thread_map.c
#	tools/perf/util/thread_map.h
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,6b4ec1c4d3f3..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,11 +1,14 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
++>>>>>>> 4b49cce25e71 (libperf: Add perf_thread_map__new_dummy() function)
  	local:
  		*;
  };
diff --cc tools/perf/util/thread_map.c
index 5b3511f2b6b1,06dd9f2e4ce5..000000000000
--- a/tools/perf/util/thread_map.c
+++ b/tools/perf/util/thread_map.c
@@@ -28,34 -28,11 +28,38 @@@ static int filter(const struct dirent *
  		return 1;
  }
  
++<<<<<<< HEAD
 +static void thread_map__reset(struct thread_map *map, int start, int nr)
 +{
 +	size_t size = (nr - start) * sizeof(map->map[0]);
 +
 +	memset(&map->map[start], 0, size);
 +	map->err_thread = -1;
 +}
 +
 +static struct thread_map *thread_map__realloc(struct thread_map *map, int nr)
 +{
 +	size_t size = sizeof(*map) + sizeof(map->map[0]) * nr;
 +	int start = map ? map->nr : 0;
 +
 +	map = realloc(map, size);
 +	/*
 +	 * We only realloc to add more items, let's reset new items.
 +	 */
 +	if (map)
 +		thread_map__reset(map, start, nr);
 +
 +	return map;
 +}
 +
 +#define thread_map__alloc(__nr) thread_map__realloc(NULL, __nr)
++=======
+ #define thread_map__alloc(__nr) perf_thread_map__realloc(NULL, __nr)
++>>>>>>> 4b49cce25e71 (libperf: Add perf_thread_map__new_dummy() function)
  
 -struct perf_thread_map *thread_map__new_by_pid(pid_t pid)
 +struct thread_map *thread_map__new_by_pid(pid_t pid)
  {
 -	struct perf_thread_map *threads;
 +	struct thread_map *threads;
  	char name[256];
  	int items;
  	struct dirent **namelist = NULL;
@@@ -81,12 -58,12 +85,12 @@@
  	return threads;
  }
  
 -struct perf_thread_map *thread_map__new_by_tid(pid_t tid)
 +struct thread_map *thread_map__new_by_tid(pid_t tid)
  {
 -	struct perf_thread_map *threads = thread_map__alloc(1);
 +	struct thread_map *threads = thread_map__alloc(1);
  
  	if (threads != NULL) {
- 		thread_map__set_pid(threads, 0, tid);
+ 		perf_thread_map__set_pid(threads, 0, tid);
  		threads->nr = 1;
  		refcount_set(&threads->refcnt, 1);
  	}
@@@ -140,9 -117,9 +144,9 @@@ static struct thread_map *__thread_map_
  		}
  
  		if (grow) {
 -			struct perf_thread_map *tmp;
 +			struct thread_map *tmp;
  
- 			tmp = thread_map__realloc(threads, max_threads);
+ 			tmp = perf_thread_map__realloc(threads, max_threads);
  			if (tmp == NULL)
  				goto out_free_namelist;
  
@@@ -263,21 -240,9 +267,25 @@@ out_free_threads
  	goto out;
  }
  
++<<<<<<< HEAD
 +struct thread_map *thread_map__new_dummy(void)
 +{
 +	struct thread_map *threads = thread_map__alloc(1);
 +
 +	if (threads != NULL) {
 +		thread_map__set_pid(threads, 0, -1);
 +		threads->nr = 1;
 +		refcount_set(&threads->refcnt, 1);
 +	}
 +	return threads;
 +}
 +
 +struct thread_map *thread_map__new_by_tid_str(const char *tid_str)
++=======
+ struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str)
++>>>>>>> 4b49cce25e71 (libperf: Add perf_thread_map__new_dummy() function)
  {
 -	struct perf_thread_map *threads = NULL, *nt;
 +	struct thread_map *threads = NULL, *nt;
  	int ntasks = 0;
  	pid_t tid, prev_tid = INT_MAX;
  	char *end_ptr;
diff --cc tools/perf/util/thread_map.h
index 2f689c90a8c6,94a1f9565f5e..000000000000
--- a/tools/perf/util/thread_map.h
+++ b/tools/perf/util/thread_map.h
@@@ -5,18 -5,8 +5,23 @@@
  #include <sys/types.h>
  #include <stdio.h>
  #include <linux/refcount.h>
++<<<<<<< HEAD
 +
 +struct thread_map_data {
 +	pid_t    pid;
 +	char	*comm;
 +};
 +
 +struct thread_map {
 +	refcount_t refcnt;
 +	int nr;
 +	int err_thread;
 +	struct thread_map_data map[];
 +};
++=======
+ #include <internal/threadmap.h>
+ #include <perf/threadmap.h>
++>>>>>>> 4b49cce25e71 (libperf: Add perf_thread_map__new_dummy() function)
  
  struct thread_map_event;
  
@@@ -48,13 -38,7 +53,17 @@@ static inline pid_t thread_map__pid(str
  	return map->map[thread].pid;
  }
  
++<<<<<<< HEAD
 +static inline void
 +thread_map__set_pid(struct thread_map *map, int thread, pid_t pid)
 +{
 +	map->map[thread].pid = pid;
 +}
 +
 +static inline char *thread_map__comm(struct thread_map *map, int thread)
++=======
+ static inline char *thread_map__comm(struct perf_thread_map *map, int thread)
++>>>>>>> 4b49cce25e71 (libperf: Add perf_thread_map__new_dummy() function)
  {
  	return map->map[thread].comm;
  }
* Unmerged path tools/perf/lib/include/internal/threadmap.h
* Unmerged path tools/perf/lib/include/perf/threadmap.h
* Unmerged path tools/perf/lib/threadmap.c
* Unmerged path tools/perf/lib/include/internal/threadmap.h
* Unmerged path tools/perf/lib/include/perf/threadmap.h
* Unmerged path tools/perf/lib/libperf.map
* Unmerged path tools/perf/lib/threadmap.c
diff --git a/tools/perf/tests/openat-syscall-tp-fields.c b/tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469..06bda2efc123 100644
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@ -58,7 +58,7 @@ int test__syscall_openat_tp_fields(struct test *test __maybe_unused, int subtest
 
 	perf_evsel__config(evsel, &opts, NULL);
 
-	thread_map__set_pid(evlist->threads, 0, getpid());
+	perf_thread_map__set_pid(evlist->threads, 0, getpid());
 
 	err = perf_evlist__open(evlist);
 	if (err < 0) {
diff --git a/tools/perf/tests/thread-map.c b/tools/perf/tests/thread-map.c
index ccc17aced49e..5a4824f976c2 100644
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@ -35,7 +35,7 @@ int test__thread_map(struct test *test __maybe_unused, int subtest __maybe_unuse
 	thread_map__put(map);
 
 	/* test dummy pid */
-	map = thread_map__new_dummy();
+	map = perf_thread_map__new_dummy();
 	TEST_ASSERT_VAL("failed to alloc map", map);
 
 	thread_map__read_comms(map);
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 4739b7914374..a2ab2c1d9aa3 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1376,7 +1376,7 @@ static int perf_evlist__create_syswide_maps(struct perf_evlist *evlist)
 	if (!cpus)
 		goto out;
 
-	threads = thread_map__new_dummy();
+	threads = perf_thread_map__new_dummy();
 	if (!threads)
 		goto out_put;
 
@@ -1505,7 +1505,7 @@ int perf_evlist__prepare_workload(struct perf_evlist *evlist, struct target *tar
 				__func__, __LINE__);
 			goto out_close_pipes;
 		}
-		thread_map__set_pid(evlist->threads, 0, evlist->workload.pid);
+		perf_thread_map__set_pid(evlist->threads, 0, evlist->workload.pid);
 	}
 
 	close(child_ready_pipe[1]);
* Unmerged path tools/perf/util/thread_map.c
* Unmerged path tools/perf/util/thread_map.h
