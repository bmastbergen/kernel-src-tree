KVM: x86: move kvm_create_vcpu_debugfs after last failure point

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit 63d04348371b7ea4a134bcf47c79763d969e9168
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/63d04348.failed

The placement of kvm_create_vcpu_debugfs is more or less irrelevant, since
it cannot fail and userspace should not care about the debugfs entries until
it knows the vcpu has been created.  Moving it after the last failure
point removes the need to remove the directory when unwinding the creation.

	Reviewed-by: Emanuele Giuseppe Esposito <eesposit@redhat.com>
Message-Id: <20200331224222.393439-1-pbonzini@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 63d04348371b7ea4a134bcf47c79763d969e9168)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	virt/kvm/kvm_main.c
diff --cc virt/kvm/kvm_main.c
index d34588bc1e54,da8fd45e0e3e..000000000000
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@@ -3035,14 -3017,20 +3035,12 @@@ static int kvm_vm_ioctl_create_vcpu(str
  		goto vcpu_decrement;
  	}
  
 -	BUILD_BUG_ON(sizeof(struct kvm_run) > PAGE_SIZE);
 -	page = alloc_page(GFP_KERNEL | __GFP_ZERO);
 -	if (!page) {
 -		r = -ENOMEM;
 -		goto vcpu_free;
 -	}
 -	vcpu->run = page_address(page);
 -
 -	kvm_vcpu_init(vcpu, kvm, id);
 +	preempt_notifier_init(&vcpu->preempt_notifier, &kvm_preempt_ops);
  
 -	r = kvm_arch_vcpu_create(vcpu);
 +	r = kvm_arch_vcpu_setup(vcpu);
  	if (r)
 -		goto vcpu_free_run_page;
 +		goto vcpu_destroy;
  
- 	kvm_create_vcpu_debugfs(vcpu);
- 
  	mutex_lock(&kvm->lock);
  	if (kvm_get_vcpu_by_id(kvm, id)) {
  		r = -EEXIST;
@@@ -3075,9 -3064,11 +3074,12 @@@
  
  unlock_vcpu_destroy:
  	mutex_unlock(&kvm->lock);
++<<<<<<< HEAD
 +	debugfs_remove_recursive(vcpu->debugfs_dentry);
 +vcpu_destroy:
++=======
++>>>>>>> 63d04348371b (KVM: x86: move kvm_create_vcpu_debugfs after last failure point)
  	kvm_arch_vcpu_destroy(vcpu);
 -vcpu_free_run_page:
 -	free_page((unsigned long)vcpu->run);
 -vcpu_free:
 -	kmem_cache_free(kvm_vcpu_cache, vcpu);
  vcpu_decrement:
  	mutex_lock(&kvm->lock);
  	kvm->created_vcpus--;
* Unmerged path virt/kvm/kvm_main.c
