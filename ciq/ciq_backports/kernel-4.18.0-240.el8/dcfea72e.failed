net: introduce skb_list_walk_safe for skb segment walking

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jason A. Donenfeld <Jason@zx2c4.com>
commit dcfea72e79b0aa7a057c8f6024169d86a1bbc84b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/dcfea72e.failed

As part of the continual effort to remove direct usage of skb->next and
skb->prev, this patch adds a helper for iterating through the
singly-linked variant of skb lists, which are used for lists of GSO
packet. The name "skb_list_..." has been chosen to match the existing
function, "kfree_skb_list, which also operates on these singly-linked
lists, and the "..._walk_safe" part is the same idiom as elsewhere in
the kernel.

This patch removes the helper from wireguard and puts it into
linux/skbuff.h, while making it a bit more robust for general usage. In
particular, parenthesis are added around the macro argument usage, and it
now accounts for trying to iterate through an already-null skb pointer,
which will simply run the iteration zero times. This latter enhancement
means it can be used to replace both do { ... } while and while (...)
open-coded idioms.

This should take care of these three possible usages, which match all
current methods of iterations.

skb_list_walk_safe(segs, skb, next) { ... }
skb_list_walk_safe(skb, skb, next) { ... }
skb_list_walk_safe(segs, skb, segs) { ... }

Gcc appears to generate efficient code for each of these.

	Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dcfea72e79b0aa7a057c8f6024169d86a1bbc84b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireguard/device.h
#	include/linux/skbuff.h
diff --cc include/linux/skbuff.h
index ed7aa7b1857e,64e5b1be9ff5..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -1535,6 -1478,17 +1535,20 @@@ static inline void skb_mark_not_on_list
  	skb->next = NULL;
  }
  
++<<<<<<< HEAD
++=======
+ /* Iterate through singly-linked GSO fragments of an skb. */
+ #define skb_list_walk_safe(first, skb, next)                                   \
+ 	for ((skb) = (first), (next) = (skb) ? (skb)->next : NULL; (skb);      \
+ 	     (skb) = (next), (next) = (skb) ? (skb)->next : NULL)
+ 
+ static inline void skb_list_del_init(struct sk_buff *skb)
+ {
+ 	__list_del_entry(&skb->list);
+ 	skb_mark_not_on_list(skb);
+ }
+ 
++>>>>>>> dcfea72e79b0 (net: introduce skb_list_walk_safe for skb segment walking)
  /**
   *	skb_queue_empty - check if a queue is empty
   *	@list: queue head
* Unmerged path drivers/net/wireguard/device.h
* Unmerged path drivers/net/wireguard/device.h
* Unmerged path include/linux/skbuff.h
