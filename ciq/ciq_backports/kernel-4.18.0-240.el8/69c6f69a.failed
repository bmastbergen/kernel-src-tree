KVM: x86: Set kvm_x86_ops only after ->hardware_setup() completes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 69c6f69aa3064ab6cc8426661f125ea75ffe899c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/69c6f69a.failed

Set kvm_x86_ops with the vendor's ops only after ->hardware_setup()
completes to "prevent" using kvm_x86_ops before they are ready, i.e. to
generate a null pointer fault instead of silently consuming unconfigured
state.

An alternative implementation would be to have ->hardware_setup()
return the vendor's ops, but that would require non-trivial refactoring,
and would arguably result in less readable code, e.g. ->hardware_setup()
would need to use ERR_PTR() in multiple locations, and each vendor's
declaration of the runtime ops would be less obvious.

No functional change intended.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
Message-Id: <20200321202603.19355-6-sean.j.christopherson@intel.com>
	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 69c6f69aa3064ab6cc8426661f125ea75ffe899c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index 6c9a4f53f4db,23b6c2e38d9e..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -7288,8 -7359,6 +7288,11 @@@ int kvm_arch_init(void *opaque
  	if (r)
  		goto out_free_percpu;
  
++<<<<<<< HEAD
 +	kvm_x86_ops = ops;
 +
++=======
++>>>>>>> 69c6f69aa306 (KVM: x86: Set kvm_x86_ops only after ->hardware_setup() completes)
  	kvm_mmu_set_mask_ptes(PT_USER_MASK, PT_ACCESSED_MASK,
  			PT_DIRTY_MASK, PT64_NX_MASK, 0,
  			PT_PRESENT_MASK, 0, sme_me_mask);
@@@ -9404,6 -9638,11 +9407,14 @@@ int kvm_arch_hardware_setup(void *opaqu
  	if (r != 0)
  		return r;
  
++<<<<<<< HEAD
++=======
+ 	kvm_x86_ops = ops->runtime_ops;
+ 
+ 	if (!kvm_cpu_cap_has(X86_FEATURE_XSAVES))
+ 		supported_xss = 0;
+ 
++>>>>>>> 69c6f69aa306 (KVM: x86: Set kvm_x86_ops only after ->hardware_setup() completes)
  	cr4_reserved_bits = kvm_host_cr4_reserved_bits(&boot_cpu_data);
  
  	if (kvm_has_tsc_control) {
* Unmerged path arch/x86/kvm/x86.c
