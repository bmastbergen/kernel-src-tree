selftest/bpf: Use -m{little, big}-endian for clang

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ilya Leoshkevich <iii@linux.ibm.com>
commit 313e7f6fb1d9a8814424c2c6878848648c9c090f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/313e7f6f.failed

When cross-compiling tests from x86 to s390, the resulting BPF objects
fail to load due to endianness mismatch.

Fix by using BPF-GCC endianness check for clang as well.

	Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20191028102049.7489-1-iii@linux.ibm.com
(cherry picked from commit 313e7f6fb1d9a8814424c2c6878848648c9c090f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/Makefile
diff --cc tools/testing/selftests/bpf/Makefile
index 5f86f43d0e39,3209c208f3b3..000000000000
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@@ -148,10 -130,16 +148,23 @@@ define get_sys_include
  $(shell $(1) -v -E - </dev/null 2>&1 \
  	| sed -n '/<...> search starts here:/,/End of search list./{ s| \(/.*\)|-idirafter \1|p }')
  endef
++<<<<<<< HEAD
 +CLANG_SYS_INCLUDES = $(call get_sys_includes,$(CLANG))
 +BPF_CFLAGS = -g -D__TARGET_ARCH_$(SRCARCH) 				\
 +	     -I. -I./include/uapi -I../../../include/uapi 		\
 +	     -I$(BPFDIR) -I$(OUTPUT)/../usr/include
++=======
+ 
+ # Determine target endianness.
+ IS_LITTLE_ENDIAN = $(shell $(CC) -dM -E - </dev/null | \
+ 			grep 'define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__')
+ MENDIAN=$(if $(IS_LITTLE_ENDIAN),-mlittle-endian,-mbig-endian)
+ 
+ CLANG_SYS_INCLUDES = $(call get_sys_includes,$(CLANG))
+ BPF_CFLAGS = -g -D__TARGET_ARCH_$(SRCARCH) $(MENDIAN) 			\
+ 	     -I. -I./include/uapi -I$(APIDIR)				\
+ 	     -I$(BPFDIR) -I$(abspath $(OUTPUT)/../usr/include)
++>>>>>>> 313e7f6fb1d9 (selftest/bpf: Use -m{little, big}-endian for clang)
  
  CLANG_CFLAGS = $(CLANG_SYS_INCLUDES) \
  	       -Wno-compare-distinct-pointer-types
@@@ -160,119 -148,155 +173,126 @@@ $(OUTPUT)/test_l4lb_noinline.o: BPF_CFL
  $(OUTPUT)/test_xdp_noinline.o: BPF_CFLAGS += -fno-inline
  
  $(OUTPUT)/flow_dissector_load.o: flow_dissector_load.h
 -
 -# Build BPF object using Clang
 -# $1 - input .c file
 -# $2 - output .o file
 -# $3 - CFLAGS
 -# $4 - LDFLAGS
 -define CLANG_BPF_BUILD_RULE
 -	($(CLANG) $3 -O2 -target bpf -emit-llvm				\
 -		-c $1 -o - || echo "BPF obj compilation failed") | 	\
 -	$(LLC) -march=bpf -mcpu=probe $4 -filetype=obj -o $2
 -endef
 -# Similar to CLANG_BPF_BUILD_RULE, but using native Clang and bpf LLC
 -define CLANG_NATIVE_BPF_BUILD_RULE
 -	($(CLANG) $3 -O2 -emit-llvm					\
 -		-c $1 -o - || echo "BPF obj compilation failed") | 	\
 -	$(LLC) -march=bpf -mcpu=probe $4 -filetype=obj -o $2
 -endef
 -# Build BPF object using GCC
 -define GCC_BPF_BUILD_RULE
 -	$(BPF_GCC) $3 $4 -O2 -c $1 -o $2
 -endef
 -
 -# Set up extra TRUNNER_XXX "temporary" variables in the environment (relies on
 -# $eval()) and pass control to DEFINE_TEST_RUNNER_RULES.
 -# Parameters:
 -# $1 - test runner base binary name (e.g., test_progs)
 -# $2 - test runner extra "flavor" (e.g., no_alu32, gcc-bpf, etc)
 -define DEFINE_TEST_RUNNER
 -
 -TRUNNER_OUTPUT := $(OUTPUT)$(if $2,/)$2
 -TRUNNER_BINARY := $1$(if $2,-)$2
 -TRUNNER_TEST_OBJS := $$(patsubst %.c,$$(TRUNNER_OUTPUT)/%.test.o,	\
 -				 $$(notdir $$(wildcard $(TRUNNER_TESTS_DIR)/*.c)))
 -TRUNNER_EXTRA_OBJS := $$(patsubst %.c,$$(TRUNNER_OUTPUT)/%.o,		\
 -				 $$(filter %.c,$(TRUNNER_EXTRA_SOURCES)))
 -TRUNNER_EXTRA_HDRS := $$(filter %.h,$(TRUNNER_EXTRA_SOURCES))
 -TRUNNER_TESTS_HDR := $(TRUNNER_TESTS_DIR)/tests.h
 -TRUNNER_BPF_OBJS := $$(patsubst %.c,$$(TRUNNER_OUTPUT)/%.o,		\
 -				$$(notdir $$(wildcard $(TRUNNER_BPF_PROGS_DIR)/*.c)))
 -
 -# Evaluate rules now with extra TRUNNER_XXX variables above already defined
 -$$(eval $$(call DEFINE_TEST_RUNNER_RULES,$1,$2))
 -
 -endef
 -
 -# Using TRUNNER_XXX variables, provided by callers of DEFINE_TEST_RUNNER and
 -# set up by DEFINE_TEST_RUNNER itself, create test runner build rules with:
 -# $1 - test runner base binary name (e.g., test_progs)
 -# $2 - test runner extra "flavor" (e.g., no_alu32, gcc-bpf, etc)
 -define DEFINE_TEST_RUNNER_RULES
 -
 -ifeq ($($(TRUNNER_OUTPUT)-dir),)
 -$(TRUNNER_OUTPUT)-dir := y
 -$(TRUNNER_OUTPUT):
 -	mkdir -p $$@
 +$(OUTPUT)/test_progs.o: flow_dissector_load.h
 +
 +TEST_PROGS_CFLAGS := -I. -I$(OUTPUT)
 +TEST_MAPS_CFLAGS := -I. -I$(OUTPUT)
 +TEST_VERIFIER_CFLAGS := -I. -I$(OUTPUT) -Iverifier
 +
 +ifneq ($(SUBREG_CODEGEN),)
 +ALU32_BUILD_DIR = $(OUTPUT)/alu32
 +TEST_CUSTOM_PROGS += $(ALU32_BUILD_DIR)/test_progs_32
 +$(ALU32_BUILD_DIR):
 +	mkdir -p $@
 +
 +$(ALU32_BUILD_DIR)/urandom_read: $(OUTPUT)/urandom_read | $(ALU32_BUILD_DIR)
 +	cp $< $@
 +
 +$(ALU32_BUILD_DIR)/test_progs_32: test_progs.c $(OUTPUT)/libbpf.a\
 +						$(ALU32_BUILD_DIR)/urandom_read \
 +						| $(ALU32_BUILD_DIR)
 +	$(CC) $(TEST_PROGS_CFLAGS) $(CFLAGS) \
 +		-o $(ALU32_BUILD_DIR)/test_progs_32 \
 +		test_progs.c test_stub.c trace_helpers.c prog_tests/*.c \
 +		$(OUTPUT)/libbpf.a $(LDLIBS)
 +
 +$(ALU32_BUILD_DIR)/test_progs_32: $(PROG_TESTS_H)
 +$(ALU32_BUILD_DIR)/test_progs_32: prog_tests/*.c
 +
 +$(ALU32_BUILD_DIR)/%.o: progs/%.c $(ALU32_BUILD_DIR)/test_progs_32 \
 +					| $(ALU32_BUILD_DIR)
 +	($(CLANG) $(BPF_CFLAGS) $(CLANG_CFLAGS) -O2 -target bpf -emit-llvm \
 +		-c $< -o - || echo "clang failed") | \
 +	$(LLC) -march=bpf -mcpu=probe -mattr=+alu32 $(LLC_FLAGS) \
 +		-filetype=obj -o $@
  endif
  
 -# ensure we set up BPF objects generation rule just once for a given
 -# input/output directory combination
 -ifeq ($($(TRUNNER_BPF_PROGS_DIR)$(if $2,-)$2-bpfobjs),)
 -$(TRUNNER_BPF_PROGS_DIR)$(if $2,-)$2-bpfobjs := y
 -$(TRUNNER_BPF_OBJS): $(TRUNNER_OUTPUT)/%.o:				\
 -		     $(TRUNNER_BPF_PROGS_DIR)/%.c			\
 -		     $(TRUNNER_BPF_PROGS_DIR)/*.h			\
 -		     $$(BPF_HELPERS) | $(TRUNNER_OUTPUT)
 -	$$(call $(TRUNNER_BPF_BUILD_RULE),$$<,$$@,			\
 -					  $(TRUNNER_BPF_CFLAGS),	\
 -					  $(TRUNNER_BPF_LDFLAGS))
 -endif
 -
 -# ensure we set up tests.h header generation rule just once
 -ifeq ($($(TRUNNER_TESTS_DIR)-tests-hdr),)
 -$(TRUNNER_TESTS_DIR)-tests-hdr := y
 -$(TRUNNER_TESTS_HDR): $(TRUNNER_TESTS_DIR)/*.c
 -	$$(shell ( cd $(TRUNNER_TESTS_DIR);				\
 -		  echo '/* Generated header, do not edit */';		\
 -		  ls *.c 2> /dev/null |					\
 -			sed -e 's@\([^\.]*\)\.c@DEFINE_TEST(\1)@';	\
 -		 ) > $$@)
 -endif
 -
 -# compile individual test files
 -# Note: we cd into output directory to ensure embedded BPF object is found
 -$(TRUNNER_TEST_OBJS): $(TRUNNER_OUTPUT)/%.test.o:			\
 -		      $(TRUNNER_TESTS_DIR)/%.c				\
 -		      $(TRUNNER_EXTRA_HDRS)				\
 -		      $(TRUNNER_BPF_OBJS)				\
 -		      $$(BPFOBJ) | $(TRUNNER_OUTPUT)
 -	cd $$(@D) && $$(CC) $$(CFLAGS) -c $(CURDIR)/$$< $$(LDLIBS) -o $$(@F)
 -
 -$(TRUNNER_EXTRA_OBJS): $(TRUNNER_OUTPUT)/%.o:				\
 -		       %.c						\
 -		       $(TRUNNER_EXTRA_HDRS)				\
 -		       $(TRUNNER_TESTS_HDR)				\
 -		       $$(BPFOBJ) | $(TRUNNER_OUTPUT)
 -	$$(CC) $$(CFLAGS) -c $$< $$(LDLIBS) -o $$@
 -
 -$(TRUNNER_BINARY)-extras: $(TRUNNER_EXTRA_FILES) | $(TRUNNER_OUTPUT)
 -ifneq ($2,)
 -	# only copy extra resources if in flavored build
 -	cp -a $$^ $(TRUNNER_OUTPUT)/
 -endif
 -
 -$(OUTPUT)/$(TRUNNER_BINARY): $(TRUNNER_TEST_OBJS)			\
 -			     $(TRUNNER_EXTRA_OBJS) $$(BPFOBJ)		\
 -			     | $(TRUNNER_BINARY)-extras
 -	$$(CC) $$(CFLAGS) $$(filter %.a %.o,$$^) $$(LDLIBS) -o $$@
 -
 -endef
 -
 -# Define test_progs test runner.
 -TRUNNER_TESTS_DIR := prog_tests
 -TRUNNER_BPF_PROGS_DIR := progs
 -TRUNNER_EXTRA_SOURCES := test_progs.c cgroup_helpers.c trace_helpers.c	\
 -			 flow_dissector_load.h
 -TRUNNER_EXTRA_FILES := $(OUTPUT)/urandom_read				\
 -		       $(wildcard progs/btf_dump_test_case_*.c)
 -TRUNNER_BPF_BUILD_RULE := CLANG_BPF_BUILD_RULE
 -TRUNNER_BPF_CFLAGS := -I. -I$(OUTPUT) $(BPF_CFLAGS) $(CLANG_CFLAGS)
 -TRUNNER_BPF_LDFLAGS := -mattr=+alu32
 -$(eval $(call DEFINE_TEST_RUNNER,test_progs))
 -
 -# Define test_progs-no_alu32 test runner.
 -TRUNNER_BPF_LDFLAGS :=
 -$(eval $(call DEFINE_TEST_RUNNER,test_progs,no_alu32))
 -
 -# Define test_progs BPF-GCC-flavored test runner.
  ifneq ($(BPF_GCC),)
++<<<<<<< HEAD
 +GCC_SYS_INCLUDES = $(call get_sys_includes,gcc)
 +IS_LITTLE_ENDIAN = $(shell $(CC) -dM -E - </dev/null | \
 +			grep 'define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__')
 +ifeq ($(IS_LITTLE_ENDIAN),)
 +MENDIAN=-mbig-endian
 +else
 +MENDIAN=-mlittle-endian
 +endif
 +BPF_GCC_CFLAGS = $(GCC_SYS_INCLUDES) $(MENDIAN)
 +BPF_GCC_BUILD_DIR = $(OUTPUT)/bpf_gcc
 +TEST_CUSTOM_PROGS += $(BPF_GCC_BUILD_DIR)/test_progs_bpf_gcc
 +$(BPF_GCC_BUILD_DIR):
 +	mkdir -p $@
 +
 +$(BPF_GCC_BUILD_DIR)/urandom_read: $(OUTPUT)/urandom_read | $(BPF_GCC_BUILD_DIR)
 +	cp $< $@
 +
 +$(BPF_GCC_BUILD_DIR)/test_progs_bpf_gcc: $(OUTPUT)/test_progs \
 +					 | $(BPF_GCC_BUILD_DIR)
 +	cp $< $@
 +
 +$(BPF_GCC_BUILD_DIR)/%.o: progs/%.c $(BPF_GCC_BUILD_DIR)/test_progs_bpf_gcc \
 +			  | $(BPF_GCC_BUILD_DIR)
 +	$(BPF_GCC) $(BPF_CFLAGS) $(BPF_GCC_CFLAGS) -O2 -c $< -o $@
++=======
+ TRUNNER_BPF_BUILD_RULE := GCC_BPF_BUILD_RULE
+ TRUNNER_BPF_CFLAGS := $(BPF_CFLAGS) $(call get_sys_includes,gcc)
+ TRUNNER_BPF_LDFLAGS :=
+ $(eval $(call DEFINE_TEST_RUNNER,test_progs,bpf_gcc))
++>>>>>>> 313e7f6fb1d9 (selftest/bpf: Use -m{little, big}-endian for clang)
  endif
  
 -# Define test_maps test runner.
 -TRUNNER_TESTS_DIR := map_tests
 -TRUNNER_BPF_PROGS_DIR := progs
 -TRUNNER_EXTRA_SOURCES := test_maps.c
 -TRUNNER_EXTRA_FILES :=
 -TRUNNER_BPF_BUILD_RULE := $$(error no BPF objects should be built)
 -TRUNNER_BPF_CFLAGS :=
 -TRUNNER_BPF_LDFLAGS :=
 -$(eval $(call DEFINE_TEST_RUNNER,test_maps))
 -
 -# Define test_verifier test runner.
 -# It is much simpler than test_maps/test_progs and sufficiently different from
 -# them (e.g., test.h is using completely pattern), that it's worth just
 -# explicitly defining all the rules explicitly.
 -verifier/tests.h: verifier/*.c
 +# Have one program compiled without "-target bpf" to test whether libbpf loads
 +# it successfully
 +$(OUTPUT)/test_xdp.o: progs/test_xdp.c
 +	($(CLANG) $(BPF_CFLAGS) $(CLANG_CFLAGS) -O2 -emit-llvm -c $< -o - || \
 +		echo "clang failed") | \
 +	$(LLC) -march=bpf -mcpu=probe $(LLC_FLAGS) -filetype=obj -o $@
 +
 +# libbpf has to be built before BPF programs due to bpf_helper_defs.h
 +$(OUTPUT)/%.o: progs/%.c | $(BPFOBJ)
 +	($(CLANG) $(BPF_CFLAGS) $(CLANG_CFLAGS) -O2 -target bpf -emit-llvm \
 +		-c $< -o - || echo "clang failed") | \
 +	$(LLC) -march=bpf -mcpu=probe $(LLC_FLAGS) -filetype=obj -o $@
 +
 +PROG_TESTS_DIR = $(OUTPUT)/prog_tests
 +$(PROG_TESTS_DIR):
 +	mkdir -p $@
 +PROG_TESTS_H := $(PROG_TESTS_DIR)/tests.h
 +PROG_TESTS_FILES := $(wildcard prog_tests/*.c)
 +test_progs.c: $(PROG_TESTS_H)
 +$(OUTPUT)/test_progs: CFLAGS += $(TEST_PROGS_CFLAGS)
 +$(OUTPUT)/test_progs: test_progs.c $(PROG_TESTS_FILES) | $(OUTPUT)/test_attach_probe.o $(PROG_TESTS_H)
 +$(PROG_TESTS_H): $(PROG_TESTS_FILES) | $(PROG_TESTS_DIR)
 +	$(shell ( cd prog_tests/; \
 +		  echo '/* Generated header, do not edit */'; \
 +		  ls *.c 2> /dev/null | \
 +			sed -e 's@\([^\.]*\)\.c@DEFINE_TEST(\1)@'; \
 +		 ) > $(PROG_TESTS_H))
 +
 +MAP_TESTS_DIR = $(OUTPUT)/map_tests
 +$(MAP_TESTS_DIR):
 +	mkdir -p $@
 +MAP_TESTS_H := $(MAP_TESTS_DIR)/tests.h
 +MAP_TESTS_FILES := $(wildcard map_tests/*.c)
 +test_maps.c: $(MAP_TESTS_H)
 +$(OUTPUT)/test_maps: CFLAGS += $(TEST_MAPS_CFLAGS)
 +$(OUTPUT)/test_maps: test_maps.c $(MAP_TESTS_FILES) | $(MAP_TESTS_H)
 +$(MAP_TESTS_H): $(MAP_TESTS_FILES) | $(MAP_TESTS_DIR)
 +	$(shell ( cd map_tests/; \
 +		  echo '/* Generated header, do not edit */'; \
 +		  ls *.c 2> /dev/null | \
 +			sed -e 's@\([^\.]*\)\.c@DEFINE_TEST(\1)@'; \
 +		 ) > $(MAP_TESTS_H))
 +
 +VERIFIER_TESTS_DIR = $(OUTPUT)/verifier
 +$(VERIFIER_TESTS_DIR):
 +	mkdir -p $@
 +VERIFIER_TESTS_H := $(VERIFIER_TESTS_DIR)/tests.h
 +VERIFIER_TEST_FILES := $(wildcard verifier/*.c)
 +test_verifier.c: $(VERIFIER_TESTS_H)
 +$(OUTPUT)/test_verifier: CFLAGS += $(TEST_VERIFIER_CFLAGS)
 +$(OUTPUT)/test_verifier: test_verifier.c | $(VERIFIER_TEST_FILES) $(VERIFIER_TESTS_H)
 +$(VERIFIER_TESTS_H): $(VERIFIER_TEST_FILES) | $(VERIFIER_TESTS_DIR)
  	$(shell ( cd verifier/; \
  		  echo '/* Generated header, do not edit */'; \
  		  echo '#ifdef FILL_ARRAY'; \
* Unmerged path tools/testing/selftests/bpf/Makefile
