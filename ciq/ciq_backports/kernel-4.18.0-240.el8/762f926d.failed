net/sched: act_ct: Make tcf_ct_flow_table_restore_skb inline

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] sched: act_ct: Make tcf_ct_flow_table_restore_skb inline (Marcelo Leitner) [1840938]
Rebuild_FUZZ: 96.55%
commit-author Alaa Hleihel <alaa@mellanox.com>
commit 762f926d6f19b9ab4dee0f98d55fc67e276cd094
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/762f926d.failed

Currently, tcf_ct_flow_table_restore_skb is exported by act_ct
module, therefore modules using it will have hard-dependency
on act_ct and will require loading it all the time.

This can lead to an unnecessary overhead on systems that do not
use hardware connection tracking action (ct_metadata action) in
the first place.

To relax the hard-dependency between the modules, we unexport this
function and make it a static inline one.

Fixes: 30b0cf90c6dd ("net/sched: act_ct: Support restoring conntrack info on skbs")
	Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 762f926d6f19b9ab4dee0f98d55fc67e276cd094)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tc_act/tc_ct.h
diff --cc include/net/tc_act/tc_ct.h
index a8b156402873,8250d6f0a462..000000000000
--- a/include/net/tc_act/tc_ct.h
+++ b/include/net/tc_act/tc_ct.h
@@@ -51,8 -54,33 +51,27 @@@ static inline int tcf_ct_action(const s
  #else
  static inline uint16_t tcf_ct_zone(const struct tc_action *a) { return 0; }
  static inline int tcf_ct_action(const struct tc_action *a) { return 0; }
 -static inline struct nf_flowtable *tcf_ct_ft(const struct tc_action *a)
 -{
 -	return NULL;
 -}
  #endif /* CONFIG_NF_CONNTRACK */
  
++<<<<<<< HEAD
++=======
+ #if IS_ENABLED(CONFIG_NET_ACT_CT)
+ static inline void
+ tcf_ct_flow_table_restore_skb(struct sk_buff *skb, unsigned long cookie)
+ {
+ 	enum ip_conntrack_info ctinfo = cookie & NFCT_INFOMASK;
+ 	struct nf_conn *ct;
+ 
+ 	ct = (struct nf_conn *)(cookie & NFCT_PTRMASK);
+ 	nf_conntrack_get(&ct->ct_general);
+ 	nf_ct_set(skb, ct, ctinfo);
+ }
+ #else
+ static inline void
+ tcf_ct_flow_table_restore_skb(struct sk_buff *skb, unsigned long cookie) { }
+ #endif
+ 
++>>>>>>> 762f926d6f19 (net/sched: act_ct: Make tcf_ct_flow_table_restore_skb inline)
  static inline bool is_tcf_ct(const struct tc_action *a)
  {
  #if defined(CONFIG_NET_CLS_ACT) && IS_ENABLED(CONFIG_NF_CONNTRACK)
* Unmerged path include/net/tc_act/tc_ct.h
