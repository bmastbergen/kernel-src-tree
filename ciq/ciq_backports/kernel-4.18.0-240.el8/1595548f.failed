gfs2: Split gfs2_rsqa_delete into gfs2_rs_delete and gfs2_qa_put

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 1595548fe72ca834abe75fb3df47e300a087d563
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1595548f.failed

Keeping reservations and quotas separate helps reviewing the code.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 1595548fe72ca834abe75fb3df47e300a087d563)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/file.c
#	fs/gfs2/rgrp.c
#	fs/gfs2/rgrp.h
#	fs/gfs2/super.c
diff --cc fs/gfs2/file.c
index a25b1766d059,99a75e779ac0..000000000000
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@@ -625,10 -701,10 +625,17 @@@ static int gfs2_release(struct inode *i
  	kfree(file->private_data);
  	file->private_data = NULL;
  
++<<<<<<< HEAD
 +	if (!(file->f_mode & FMODE_WRITE))
 +		return 0;
 +
 +	gfs2_rsqa_delete(ip, &inode->i_writecount);
++=======
+ 	if (file->f_mode & FMODE_WRITE) {
+ 		gfs2_rs_delete(ip, &inode->i_writecount);
+ 		gfs2_qa_put(ip);
+ 	}
++>>>>>>> 1595548fe72c (gfs2: Split gfs2_rsqa_delete into gfs2_rs_delete and gfs2_qa_put)
  	return 0;
  }
  
diff --cc fs/gfs2/rgrp.c
index 211781482cc9,692dc11d0f13..000000000000
--- a/fs/gfs2/rgrp.c
+++ b/fs/gfs2/rgrp.c
@@@ -700,7 -673,6 +700,10 @@@ void gfs2_rs_delete(struct gfs2_inode *
  	if ((wcount == NULL) || (atomic_read(wcount) <= 1))
  		gfs2_rs_deltree(&ip->i_res);
  	up_write(&ip->i_rw_mutex);
++<<<<<<< HEAD
 +	gfs2_qa_delete(ip, wcount);
++=======
++>>>>>>> 1595548fe72c (gfs2: Split gfs2_rsqa_delete into gfs2_rs_delete and gfs2_qa_put)
  }
  
  /**
diff --cc fs/gfs2/rgrp.h
index e90478e2f545,a1d7e14fc55b..000000000000
--- a/fs/gfs2/rgrp.h
+++ b/fs/gfs2/rgrp.h
@@@ -49,11 -44,12 +49,19 @@@ extern void gfs2_inplace_release(struc
  extern int gfs2_alloc_blocks(struct gfs2_inode *ip, u64 *bn, unsigned int *n,
  			     bool dinode, u64 *generation);
  
 +extern int gfs2_rsqa_alloc(struct gfs2_inode *ip);
  extern void gfs2_rs_deltree(struct gfs2_blkreserv *rs);
++<<<<<<< HEAD
 +extern void gfs2_rsqa_delete(struct gfs2_inode *ip, atomic_t *wcount);
 +extern void __gfs2_free_blocks(struct gfs2_inode *ip, u64 bstart, u32 blen, int meta);
 +extern void gfs2_free_meta(struct gfs2_inode *ip, u64 bstart, u32 blen);
++=======
+ extern void gfs2_rs_delete(struct gfs2_inode *ip, atomic_t *wcount);
+ extern void __gfs2_free_blocks(struct gfs2_inode *ip, struct gfs2_rgrpd *rgd,
+ 			       u64 bstart, u32 blen, int meta);
+ extern void gfs2_free_meta(struct gfs2_inode *ip, struct gfs2_rgrpd *rgd,
+ 			   u64 bstart, u32 blen);
++>>>>>>> 1595548fe72c (gfs2: Split gfs2_rsqa_delete into gfs2_rs_delete and gfs2_qa_put)
  extern void gfs2_free_di(struct gfs2_rgrpd *rgd, struct gfs2_inode *ip);
  extern void gfs2_unlink_di(struct inode *inode);
  extern int gfs2_check_blk_type(struct gfs2_sbd *sdp, u64 no_addr,
diff --cc fs/gfs2/super.c
index 54e9fed68925,37fc41632aa2..000000000000
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@@ -1693,9 -1400,11 +1693,16 @@@ out_unlock
  	if (error && error != GLR_TRYFAILED && error != -EROFS)
  		fs_warn(sdp, "gfs2_evict_inode: %d\n", error);
  out:
 +	/* Case 3 starts here */
  	truncate_inode_pages_final(&inode->i_data);
++<<<<<<< HEAD
 +	gfs2_rsqa_delete(ip, NULL);
++=======
+ 	if (ip->i_qadata)
+ 		gfs2_assert_warn(sdp, ip->i_qadata->qa_ref == 0);
+ 	gfs2_rs_delete(ip, NULL);
+ 	gfs2_qa_put(ip);
++>>>>>>> 1595548fe72c (gfs2: Split gfs2_rsqa_delete into gfs2_rs_delete and gfs2_qa_put)
  	gfs2_ordered_del_inode(ip);
  	clear_inode(inode);
  	gfs2_dir_hash_inval(ip);
diff --git a/fs/gfs2/bmap.c b/fs/gfs2/bmap.c
index a469a0138165..3284b19d35a1 100644
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@ -2245,7 +2245,8 @@ int gfs2_setattr_size(struct inode *inode, u64 newsize)
 
 	ret = do_shrink(inode, newsize);
 out:
-	gfs2_rsqa_delete(ip, NULL);
+	gfs2_rs_delete(ip, NULL);
+	gfs2_qa_put(ip);
 	return ret;
 }
 
* Unmerged path fs/gfs2/file.c
diff --git a/fs/gfs2/inode.c b/fs/gfs2/inode.c
index 867d3237b9a9..3317b43b7b35 100644
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@ -783,7 +783,8 @@ static int gfs2_create_inode(struct inode *dir, struct dentry *dentry,
 		glock_clear_object(ip->i_gl, ip);
 		gfs2_glock_put(ip->i_gl);
 	}
-	gfs2_rsqa_delete(ip, NULL);
+	gfs2_rs_delete(ip, NULL);
+	gfs2_qa_put(ip);
 fail_free_acls:
 	posix_acl_release(default_acl);
 	posix_acl_release(acl);
* Unmerged path fs/gfs2/rgrp.c
* Unmerged path fs/gfs2/rgrp.h
* Unmerged path fs/gfs2/super.c
