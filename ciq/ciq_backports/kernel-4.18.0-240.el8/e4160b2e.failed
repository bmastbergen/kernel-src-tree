x86/purgatory: Fail the build if purgatory.ro has missing symbols

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit e4160b2e4b02377c67f8ecd05786811598f39acd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e4160b2e.failed

Linking purgatory.ro with -r enables "incremental linking"; this means
no checks for unresolved symbols are done while linking purgatory.ro.

A change to the sha256 code has caused the purgatory in 5.4-rc1 to have
a missing symbol on memzero_explicit(), yet things still happily build.

Add an extra check for unresolved symbols by calling ld without -r
before running bin2c to generate kexec-purgatory.c.

This causes a build of 5.4-rc1 with this patch added to fail as it should:

    CHK     arch/x86/purgatory/purgatory.ro
  ld: arch/x86/purgatory/purgatory.ro: in function `sha256_transform':
  sha256.c:(.text+0x1c0c): undefined reference to `memzero_explicit'
  make[2]: *** [arch/x86/purgatory/Makefile:72:
      arch/x86/purgatory/kexec-purgatory.c] Error 1
  make[1]: *** [scripts/Makefile.build:509: arch/x86/purgatory] Error 2
  make: *** [Makefile:1650: arch/x86] Error 2

Also remove --no-undefined from LDFLAGS_purgatory.ro as that has no
effect.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20200317130841.290418-2-hdegoede@redhat.com
(cherry picked from commit e4160b2e4b02377c67f8ecd05786811598f39acd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/purgatory/Makefile
diff --cc arch/x86/purgatory/Makefile
index f40064fc27a6,54aadbb7e0b6..000000000000
--- a/arch/x86/purgatory/Makefile
+++ b/arch/x86/purgatory/Makefile
@@@ -9,30 -9,71 +9,44 @@@ PURGATORY_OBJS = $(addprefix $(obj)/,$(
  $(obj)/sha256.o: $(srctree)/lib/crypto/sha256.c FORCE
  	$(call if_changed_rule,cc_o_c)
  
++<<<<<<< HEAD
 +LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib -z nodefaultlib
 +targets += purgatory.ro
++=======
+ CFLAGS_sha256.o := -D__DISABLE_EXPORTS
+ 
+ # When linking purgatory.ro with -r unresolved symbols are not checked,
+ # also link a purgatory.chk binary without -r to check for unresolved symbols.
+ PURGATORY_LDFLAGS := -e purgatory_start -nostdlib -z nodefaultlib
+ LDFLAGS_purgatory.ro := -r $(PURGATORY_LDFLAGS)
+ LDFLAGS_purgatory.chk := $(PURGATORY_LDFLAGS)
+ targets += purgatory.ro purgatory.chk
++>>>>>>> e4160b2e4b02 (x86/purgatory: Fail the build if purgatory.ro has missing symbols)
  
 -# Sanitizer, etc. runtimes are unavailable and cannot be linked here.
 -GCOV_PROFILE	:= n
  KASAN_SANITIZE	:= n
 -UBSAN_SANITIZE	:= n
  KCOV_INSTRUMENT := n
  
 -# These are adjustments to the compiler flags used for objects that
 -# make up the standalone purgatory.ro
 -
 -PURGATORY_CFLAGS_REMOVE := -mcmodel=kernel
 -PURGATORY_CFLAGS := -mcmodel=large -ffreestanding -fno-zero-initialized-in-bss
 -PURGATORY_CFLAGS += $(DISABLE_STACKLEAK_PLUGIN) -DDISABLE_BRANCH_PROFILING
 -
  # Default KBUILD_CFLAGS can have -pg option set when FTRACE is enabled. That
  # in turn leaves some undefined symbols like __fentry__ in purgatory and not
 -# sure how to relocate those.
 -ifdef CONFIG_FUNCTION_TRACER
 -PURGATORY_CFLAGS_REMOVE		+= $(CC_FLAGS_FTRACE)
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR_STRONG
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector-strong
 -endif
 -
 -ifdef CONFIG_RETPOLINE
 -PURGATORY_CFLAGS_REMOVE		+= $(RETPOLINE_CFLAGS)
 -endif
 -
 -CFLAGS_REMOVE_purgatory.o	+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_purgatory.o		+= $(PURGATORY_CFLAGS)
 -
 -CFLAGS_REMOVE_sha256.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_sha256.o			+= $(PURGATORY_CFLAGS)
 +# sure how to relocate those. Like kexec-tools, use custom flags.
  
 -CFLAGS_REMOVE_string.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_string.o			+= $(PURGATORY_CFLAGS)
 +KBUILD_CFLAGS := -fno-strict-aliasing -Wall -Wstrict-prototypes -fno-zero-initialized-in-bss -fno-builtin -ffreestanding -c -Os -mcmodel=large
 +KBUILD_CFLAGS += -m$(BITS)
 +KBUILD_CFLAGS += $(call cc-option,-fno-PIE)
  
  $(obj)/purgatory.ro: $(PURGATORY_OBJS) FORCE
  		$(call if_changed,ld)
  
+ $(obj)/purgatory.chk: $(obj)/purgatory.ro FORCE
+ 		$(call if_changed,ld)
+ 
  targets += kexec-purgatory.c
  
 +CMD_BIN2C = $(objtree)/scripts/basic/bin2c
  quiet_cmd_bin2c = BIN2C   $@
 -      cmd_bin2c = $(objtree)/scripts/bin2c kexec_purgatory < $< > $@
 +      cmd_bin2c = $(CMD_BIN2C) kexec_purgatory < $< > $@
  
- $(obj)/kexec-purgatory.c: $(obj)/purgatory.ro FORCE
+ $(obj)/kexec-purgatory.c: $(obj)/purgatory.ro $(obj)/purgatory.chk FORCE
  	$(call if_changed,bin2c)
  
  obj-$(CONFIG_KEXEC_FILE)	+= kexec-purgatory.o
diff --git a/arch/x86/purgatory/.gitignore b/arch/x86/purgatory/.gitignore
new file mode 100644
index 000000000000..d2be1500671d
--- /dev/null
+++ b/arch/x86/purgatory/.gitignore
@@ -0,0 +1 @@
+purgatory.chk
* Unmerged path arch/x86/purgatory/Makefile
