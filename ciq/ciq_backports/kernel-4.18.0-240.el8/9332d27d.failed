netfilter: nf_tables: remove WARN and add NLA_STRING upper limits

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Florian Westphal <fw@strlen.de>
commit 9332d27d7918182add34e8043f6a754530fdd022
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9332d27d.failed

This WARN can trigger because some of the names fed to the module
autoload function can be of arbitrary length.

Remove the WARN and add limits for all NLA_STRING attributes.

	Reported-by: syzbot+0e63ae76d117ae1c3a01@syzkaller.appspotmail.com
Fixes: 452238e8d5ffd8 ("netfilter: nf_tables: add and use helper for module autoload")
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 9332d27d7918182add34e8043f6a754530fdd022)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_tables_api.c
diff --cc net/netfilter/nf_tables_api.c
index eb8b9258c93a,b3692458d428..000000000000
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@@ -532,12 -585,15 +534,12 @@@ static void nft_request_module(struct n
  	va_start(args, fmt);
  	ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);
  	va_end(args);
- 	if (WARN(ret >= MODULE_NAME_LEN, "truncated: '%s' (len %d)", module_name, ret))
+ 	if (ret >= MODULE_NAME_LEN)
  		return;
  
 -	mutex_unlock(&net->nft.commit_mutex);
 +	nfnl_unlock(NFNL_SUBSYS_NFTABLES);
  	request_module("%s", module_name);
 -	mutex_lock(&net->nft.commit_mutex);
 -
 -	WARN_ON_ONCE(!list_empty(&net->nft.commit_list));
 -	list_splice(&commit_list, &net->nft.commit_list);
 +	nfnl_lock(NFNL_SUBSYS_NFTABLES);
  }
  #endif
  
@@@ -1162,8 -1244,10 +1164,9 @@@ static const struct nla_policy nft_chai
  				    .len = NFT_CHAIN_MAXNAMELEN - 1 },
  	[NFTA_CHAIN_HOOK]	= { .type = NLA_NESTED },
  	[NFTA_CHAIN_POLICY]	= { .type = NLA_U32 },
- 	[NFTA_CHAIN_TYPE]	= { .type = NLA_STRING },
+ 	[NFTA_CHAIN_TYPE]	= { .type = NLA_STRING,
+ 				    .len = NFT_MODULE_AUTOLOAD_LIMIT },
  	[NFTA_CHAIN_COUNTERS]	= { .type = NLA_NESTED },
 -	[NFTA_CHAIN_FLAGS]	= { .type = NLA_U32 },
  };
  
  static const struct nla_policy nft_hook_policy[NFTA_HOOK_MAX + 1] = {
@@@ -3933,8 -4202,9 +3937,13 @@@ static const struct nla_policy nft_set_
  	[NFTA_SET_ELEM_USERDATA]	= { .type = NLA_BINARY,
  					    .len = NFT_USERDATA_MAXLEN },
  	[NFTA_SET_ELEM_EXPR]		= { .type = NLA_NESTED },
++<<<<<<< HEAD
 +	[NFTA_SET_ELEM_OBJREF]		= { .type = NLA_STRING },
 +	[NFTA_SET_ELEM_KEY_END]		= { .type = NLA_NESTED },
++=======
+ 	[NFTA_SET_ELEM_OBJREF]		= { .type = NLA_STRING,
+ 					    .len = NFT_OBJ_MAXNAMELEN - 1 },
++>>>>>>> 9332d27d7918 (netfilter: nf_tables: remove WARN and add NLA_STRING upper limits)
  };
  
  static const struct nla_policy nft_set_elem_list_policy[NFTA_SET_ELEM_LIST_MAX + 1] = {
* Unmerged path net/netfilter/nf_tables_api.c
