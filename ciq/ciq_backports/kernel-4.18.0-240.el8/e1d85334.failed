io_uring: fix 1-bit bitfields to be unsigned

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Randy Dunlap <rdunlap@infradead.org>
commit e1d85334d62386e9503e4a0d5d022e2d8e0011a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e1d85334.failed

Make bitfields of size 1 bit be unsigned (since there is no room
for the sign bit).
This clears up the sparse warnings:

  CHECK   ../fs/io_uring.c
../fs/io_uring.c:207:50: error: dubious one-bit signed bitfield
../fs/io_uring.c:208:55: error: dubious one-bit signed bitfield
../fs/io_uring.c:209:63: error: dubious one-bit signed bitfield
../fs/io_uring.c:210:54: error: dubious one-bit signed bitfield
../fs/io_uring.c:211:57: error: dubious one-bit signed bitfield

Found by sight and then verified with sparse.

Fixes: 69b3e546139a ("io_uring: change io_ring_ctx bool fields into bit fields")
	Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
	Cc: Jens Axboe <axboe@kernel.dk>
	Cc: io-uring@vger.kernel.org
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e1d85334d62386e9503e4a0d5d022e2d8e0011a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index ffb8e9d82a6a,a31187e90697..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -214,11 -204,24 +214,19 @@@ struct io_ring_ctx 
  
  	struct {
  		unsigned int		flags;
++<<<<<<< HEAD
 +		bool			compat;
 +		bool			account_mem;
++=======
+ 		unsigned int		compat: 1;
+ 		unsigned int		account_mem: 1;
+ 		unsigned int		cq_overflow_flushed: 1;
+ 		unsigned int		drain_next: 1;
+ 		unsigned int		eventfd_async: 1;
++>>>>>>> e1d85334d623 (io_uring: fix 1-bit bitfields to be unsigned)
  
 -		/*
 -		 * Ring buffer of indices into array of io_uring_sqe, which is
 -		 * mmapped by the application using the IORING_OFF_SQES offset.
 -		 *
 -		 * This indirection could e.g. be used to assign fixed
 -		 * io_uring_sqe entries to operations and only submit them to
 -		 * the queue when needed.
 -		 *
 -		 * The kernel modifies neither the indices array nor the entries
 -		 * array.
 -		 */
 -		u32			*sq_array;
 +		/* SQ ring */
 +		struct io_sq_ring	*sq_ring;
  		unsigned		cached_sq_head;
  		unsigned		sq_entries;
  		unsigned		sq_mask;
* Unmerged path fs/io_uring.c
