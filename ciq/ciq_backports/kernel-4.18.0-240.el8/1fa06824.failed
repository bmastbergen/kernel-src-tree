dma-mapping: remove dma_release_declared_memory

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 1fa0682448acd5198f79c1d28ee1292a27ae406d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1fa06824.failed

This function is entirely unused given that declared memory is
generally provided by platform setup code.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 1fa0682448acd5198f79c1d28ee1292a27ae406d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/DMA-API.txt
#	include/linux/dma-mapping.h
#	kernel/dma/coherent.c
diff --cc Documentation/DMA-API.txt
index 4f0f1a98c320,2d8d2fed7317..000000000000
--- a/Documentation/DMA-API.txt
+++ b/Documentation/DMA-API.txt
@@@ -602,34 -603,6 +602,37 @@@ For reasons of efficiency, most platfor
  region only at the granularity of a page.  For smaller allocations,
  you should use the dma_pool() API.
  
++<<<<<<< HEAD
 +::
 +
 +	void
 +	dma_release_declared_memory(struct device *dev)
 +
 +Remove the memory region previously declared from the system.  This
 +API performs *no* in-use checking for this region and will return
 +unconditionally having removed all the required structures.  It is the
 +driver's job to ensure that no parts of this memory region are
 +currently in use.
 +
 +::
 +
 +	void *
 +	dma_mark_declared_memory_occupied(struct device *dev,
 +					  dma_addr_t device_addr, size_t size)
 +
 +This is used to occupy specific regions of the declared space
 +(dma_alloc_coherent() will hand out the first free region it finds).
 +
 +device_addr is the *device* address of the region requested.
 +
 +size is the size (and should be a page-sized multiple).
 +
 +The return value will be either a pointer to the processor virtual
 +address of the memory, or an error (via PTR_ERR()) if any part of the
 +region is occupied.
 +
++=======
++>>>>>>> 1fa0682448ac (dma-mapping: remove dma_release_declared_memory)
  Part III - Debug drivers use of the DMA-API
  -------------------------------------------
  
diff --cc include/linux/dma-mapping.h
index f08f222fef10,80063b0fdea8..000000000000
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@@ -759,15 -761,9 +759,19 @@@ static inline int dma_get_cache_alignme
  	return 1;
  }
  
 -#ifdef CONFIG_DMA_DECLARE_COHERENT
 +/* flags for the coherent memory api */
 +#define DMA_MEMORY_EXCLUSIVE		0x01
 +
 +#ifdef CONFIG_HAVE_GENERIC_DMA_COHERENT
  int dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
++<<<<<<< HEAD
 +				dma_addr_t device_addr, size_t size, int flags);
 +void dma_release_declared_memory(struct device *dev);
 +void *dma_mark_declared_memory_occupied(struct device *dev,
 +					dma_addr_t device_addr, size_t size);
++=======
+ 				dma_addr_t device_addr, size_t size);
++>>>>>>> 1fa0682448ac (dma-mapping: remove dma_release_declared_memory)
  #else
  static inline int
  dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
@@@ -775,19 -771,7 +779,23 @@@
  {
  	return -ENOSYS;
  }
++<<<<<<< HEAD
 +
 +static inline void
 +dma_release_declared_memory(struct device *dev)
 +{
 +}
 +
 +static inline void *
 +dma_mark_declared_memory_occupied(struct device *dev,
 +				  dma_addr_t device_addr, size_t size)
 +{
 +	return ERR_PTR(-EBUSY);
 +}
 +#endif /* CONFIG_HAVE_GENERIC_DMA_COHERENT */
++=======
+ #endif /* CONFIG_DMA_DECLARE_COHERENT */
++>>>>>>> 1fa0682448ac (dma-mapping: remove dma_release_declared_memory)
  
  static inline void *dmam_alloc_coherent(struct device *dev, size_t size,
  		dma_addr_t *dma_handle, gfp_t gfp)
diff --cc kernel/dma/coherent.c
index bf0430f352ad,7271cda86a37..000000000000
--- a/kernel/dma/coherent.c
+++ b/kernel/dma/coherent.c
@@@ -126,43 -124,8 +126,48 @@@ int dma_declare_coherent_memory(struct 
  }
  EXPORT_SYMBOL(dma_declare_coherent_memory);
  
++<<<<<<< HEAD
 +void dma_release_declared_memory(struct device *dev)
 +{
 +	struct dma_coherent_mem *mem = dev->dma_mem;
 +
 +	if (!mem)
 +		return;
 +	dma_release_coherent_memory(mem);
 +	dev->dma_mem = NULL;
 +}
 +EXPORT_SYMBOL(dma_release_declared_memory);
 +
 +void *dma_mark_declared_memory_occupied(struct device *dev,
 +					dma_addr_t device_addr, size_t size)
 +{
 +	struct dma_coherent_mem *mem = dev->dma_mem;
 +	unsigned long flags;
 +	int pos, err;
 +
 +	size += device_addr & ~PAGE_MASK;
 +
 +	if (!mem)
 +		return ERR_PTR(-EINVAL);
 +
 +	spin_lock_irqsave(&mem->spinlock, flags);
 +	pos = PFN_DOWN(device_addr - dma_get_device_base(dev, mem));
 +	err = bitmap_allocate_region(mem->bitmap, pos, get_order(size));
 +	spin_unlock_irqrestore(&mem->spinlock, flags);
 +
 +	if (err != 0)
 +		return ERR_PTR(err);
 +	return mem->virt_base + (pos << PAGE_SHIFT);
 +}
 +EXPORT_SYMBOL(dma_mark_declared_memory_occupied);
 +
 +static void *__dma_alloc_from_coherent(struct device *dev,
 +				       struct dma_coherent_mem *mem,
 +				       ssize_t size, dma_addr_t *dma_handle)
++=======
+ static void *__dma_alloc_from_coherent(struct dma_coherent_mem *mem,
+ 		ssize_t size, dma_addr_t *dma_handle)
++>>>>>>> 1fa0682448ac (dma-mapping: remove dma_release_declared_memory)
  {
  	int order = get_order(size);
  	unsigned long flags;
* Unmerged path Documentation/DMA-API.txt
* Unmerged path include/linux/dma-mapping.h
* Unmerged path kernel/dma/coherent.c
