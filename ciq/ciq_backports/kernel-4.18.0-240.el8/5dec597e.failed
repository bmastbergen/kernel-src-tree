flow_dissector: extract more ICMP information

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Matteo Croce <mcroce@redhat.com>
commit 5dec597e5cd0f4c3000d120508efa64157d5bd7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5dec597e.failed

The ICMP flow dissector currently parses only the Type and Code fields.
Some ICMP packets (echo, timestamp) have a 16 bit Identifier field which
is used to correlate packets.
Add such field in flow_dissector_key_icmp and replace skb_flow_get_be16()
with a more complex function which populate this field.

	Signed-off-by: Matteo Croce <mcroce@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5dec597e5cd0f4c3000d120508efa64157d5bd7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/flow_dissector.h
#	net/core/flow_dissector.c
diff --cc include/net/flow_dissector.h
index 93bf96a1987b,f8541d018848..000000000000
--- a/include/net/flow_dissector.h
+++ b/include/net/flow_dissector.h
@@@ -4,9 -4,10 +4,11 @@@
  
  #include <linux/types.h>
  #include <linux/in6.h>
 +#include <linux/siphash.h>
  #include <uapi/linux/if_ether.h>
  
+ struct sk_buff;
+ 
  /**
   * struct flow_dissector_key_control:
   * @thoff: Transport header offset
@@@ -283,6 -281,8 +282,11 @@@ struct flow_keys 
  	struct flow_dissector_key_vlan cvlan;
  	struct flow_dissector_key_keyid keyid;
  	struct flow_dissector_key_ports ports;
++<<<<<<< HEAD
++=======
+ 	struct flow_dissector_key_icmp icmp;
+ 	/* 'addrs' must be the last member */
++>>>>>>> 5dec597e5cd0 (flow_dissector: extract more ICMP information)
  	struct flow_dissector_key_addrs addrs;
  };
  
diff --cc net/core/flow_dissector.c
index 7abf2e67e8a1,0807df0bde02..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -206,6 -213,72 +185,75 @@@ __be32 __skb_flow_get_ports(const struc
  }
  EXPORT_SYMBOL(__skb_flow_get_ports);
  
++<<<<<<< HEAD
++=======
+ static bool icmp_has_id(u8 type)
+ {
+ 	switch (type) {
+ 	case ICMP_ECHO:
+ 	case ICMP_ECHOREPLY:
+ 	case ICMP_TIMESTAMP:
+ 	case ICMP_TIMESTAMPREPLY:
+ 	case ICMPV6_ECHO_REQUEST:
+ 	case ICMPV6_ECHO_REPLY:
+ 		return true;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ /**
+  * skb_flow_get_icmp_tci - extract ICMP(6) Type, Code and Identifier fields
+  * @skb: sk_buff to extract from
+  * @key_icmp: struct flow_dissector_key_icmp to fill
+  * @data: raw buffer pointer to the packet
+  * @toff: offset to extract at
+  * @hlen: packet header length
+  */
+ void skb_flow_get_icmp_tci(const struct sk_buff *skb,
+ 			   struct flow_dissector_key_icmp *key_icmp,
+ 			   void *data, int thoff, int hlen)
+ {
+ 	struct icmphdr *ih, _ih;
+ 
+ 	ih = __skb_header_pointer(skb, thoff, sizeof(_ih), data, hlen, &_ih);
+ 	if (!ih)
+ 		return;
+ 
+ 	key_icmp->type = ih->type;
+ 	key_icmp->code = ih->code;
+ 
+ 	/* As we use 0 to signal that the Id field is not present,
+ 	 * avoid confusion with packets without such field
+ 	 */
+ 	if (icmp_has_id(ih->type))
+ 		key_icmp->id = ih->un.echo.id ? : 1;
+ 	else
+ 		key_icmp->id = 0;
+ }
+ EXPORT_SYMBOL(skb_flow_get_icmp_tci);
+ 
+ /* If FLOW_DISSECTOR_KEY_ICMP is set, dissect an ICMP packet
+  * using skb_flow_get_icmp_tci().
+  */
+ static void __skb_flow_dissect_icmp(const struct sk_buff *skb,
+ 				    struct flow_dissector *flow_dissector,
+ 				    void *target_container,
+ 				    void *data, int thoff, int hlen)
+ {
+ 	struct flow_dissector_key_icmp *key_icmp;
+ 
+ 	if (!dissector_uses_key(flow_dissector, FLOW_DISSECTOR_KEY_ICMP))
+ 		return;
+ 
+ 	key_icmp = skb_flow_dissector_target(flow_dissector,
+ 					     FLOW_DISSECTOR_KEY_ICMP,
+ 					     target_container);
+ 
+ 	skb_flow_get_icmp_tci(skb, key_icmp, data, thoff, hlen);
+ }
+ 
++>>>>>>> 5dec597e5cd0 (flow_dissector: extract more ICMP information)
  void skb_flow_dissect_meta(const struct sk_buff *skb,
  			   struct flow_dissector *flow_dissector,
  			   void *target_container)
* Unmerged path include/net/flow_dissector.h
* Unmerged path net/core/flow_dissector.c
