bpf: Avoid storing modifier to info->btf_id

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 275517ff452a535da5eef25b1c22e53fc50b0a12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/275517ff.failed

info->btf_id expects the btf_id of a struct, so it should
store the final result after skipping modifiers (if any).

It also takes this chanace to add a missing newline in one of the
bpf_log() messages.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20200109003456.3855176-1-kafai@fb.com
(cherry picked from commit 275517ff452a535da5eef25b1c22e53fc50b0a12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/btf.c
diff --cc kernel/bpf/btf.c
index dc1f2324f36a,497ecf62d79d..000000000000
--- a/kernel/bpf/btf.c
+++ b/kernel/bpf/btf.c
@@@ -3594,15 -3697,27 +3594,34 @@@ bool btf_ctx_access(int off, int size, 
  
  	/* this is a pointer to another type */
  	info->reg_type = PTR_TO_BTF_ID;
- 	info->btf_id = t->type;
  
++<<<<<<< HEAD
 +	t = btf_type_by_id(btf_vmlinux, t->type);
 +	/* skip modifiers */
 +	while (btf_type_is_modifier(t))
 +		t = btf_type_by_id(btf_vmlinux, t->type);
++=======
+ 	if (tgt_prog) {
+ 		ret = btf_translate_to_vmlinux(log, btf, t, tgt_prog->type);
+ 		if (ret > 0) {
+ 			info->btf_id = ret;
+ 			return true;
+ 		} else {
+ 			return false;
+ 		}
+ 	}
+ 
+ 	info->btf_id = t->type;
+ 	t = btf_type_by_id(btf, t->type);
+ 	/* skip modifiers */
+ 	while (btf_type_is_modifier(t)) {
+ 		info->btf_id = t->type;
+ 		t = btf_type_by_id(btf, t->type);
+ 	}
++>>>>>>> 275517ff452a (bpf: Avoid storing modifier to info->btf_id)
  	if (!btf_type_is_struct(t)) {
  		bpf_log(log,
 -			"func '%s' arg%d type %s is not a struct\n",
 +			"raw_tp '%s' arg%d type %s is not a struct\n",
  			tname, arg, btf_kind_str[BTF_INFO_KIND(t->info)]);
  		return false;
  	}
* Unmerged path kernel/bpf/btf.c
