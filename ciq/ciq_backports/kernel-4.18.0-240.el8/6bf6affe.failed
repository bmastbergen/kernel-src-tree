selftests/bpf: Bring back c++ include/link test

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Stanislav Fomichev <sdf@google.com>
commit 6bf6affe18dafea6ef12036001162ac7f2dbf738
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6bf6affe.failed

Commit 5c26f9a78358 ("libbpf: Don't use cxx to test_libpf target")
converted existing c++ test to c. We still want to include and
link against libbpf from c++ code, so reinstate this test back,
this time in a form of a selftest with a clear comment about
its purpose.

v2:
* -lelf -> $(LDLIBS) (Andrii Nakryiko)

Fixes: 5c26f9a78358 ("libbpf: Don't use cxx to test_libpf target")
	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20191202215931.248178-1-sdf@google.com
(cherry picked from commit 6bf6affe18dafea6ef12036001162ac7f2dbf738)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/.gitignore
#	tools/testing/selftests/bpf/.gitignore
#	tools/testing/selftests/bpf/Makefile
diff --cc tools/lib/bpf/.gitignore
index 01eb9b677e27,e97c2ebcf447..000000000000
--- a/tools/lib/bpf/.gitignore
+++ b/tools/lib/bpf/.gitignore
@@@ -1,3 -1,8 +1,11 @@@
  libbpf_version.h
  libbpf.pc
  FEATURE-DUMP.libbpf
++<<<<<<< HEAD
++=======
+ libbpf.so.*
+ TAGS
+ tags
+ cscope.*
+ /bpf_helper_defs.h
++>>>>>>> 6bf6affe18da (selftests/bpf: Bring back c++ include/link test)
diff --cc tools/testing/selftests/bpf/.gitignore
index f9d8aed126b8,419652458da4..000000000000
--- a/tools/testing/selftests/bpf/.gitignore
+++ b/tools/testing/selftests/bpf/.gitignore
@@@ -21,5 -21,22 +21,24 @@@ test_lirc_mode2_use
  get_cgroup_id_user
  test_skb_cgroup_id_user
  test_socket_cookie
 -test_cgroup_attach
  test_cgroup_storage
  test_select_reuseport
++<<<<<<< HEAD
++=======
+ test_flow_dissector
+ flow_dissector_load
+ test_netcnt
+ test_section_names
+ test_tcpnotify_user
+ test_libbpf
+ test_tcp_check_syncookie_user
+ test_sysctl
+ libbpf.pc
+ libbpf.so.*
+ test_hashmap
+ test_btf_dump
+ xdping
+ test_cpp
+ /no_alu32
+ /bpf_gcc
++>>>>>>> 6bf6affe18da (selftests/bpf: Bring back c++ include/link test)
diff --cc tools/testing/selftests/bpf/Makefile
index 5f86f43d0e39,e0fe01d9ec33..000000000000
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@@ -80,8 -71,10 +80,8 @@@ TEST_PROGS_EXTENDED := with_addr.sh 
  # Compile but not part of 'make run_tests'
  TEST_GEN_PROGS_EXTENDED = test_sock_addr test_skb_cgroup_id_user \
  	flow_dissector_load test_flow_dissector test_tcp_check_syncookie_user \
- 	test_lirc_mode2_user xdping
+ 	test_lirc_mode2_user xdping test_cpp
  
 -TEST_CUSTOM_PROGS = urandom_read
 -
  include ../lib.mk
  
  # Define simple and short `make test_progs`, `make test_sysctl`, etc targets
@@@ -276,11 -311,16 +276,21 @@@ $(VERIFIER_TESTS_H): $(VERIFIER_TEST_FI
  	$(shell ( cd verifier/; \
  		  echo '/* Generated header, do not edit */'; \
  		  echo '#ifdef FILL_ARRAY'; \
 -		  ls *.c 2> /dev/null | sed -e 's@\(.*\)@#include \"\1\"@'; \
 +		  ls *.c 2> /dev/null | \
 +			sed -e 's@\(.*\)@#include \"\1\"@'; \
  		  echo '#endif' \
 -		) > verifier/tests.h)
 -$(OUTPUT)/test_verifier: test_verifier.c verifier/tests.h $(BPFOBJ) | $(OUTPUT)
 -	$(CC) $(CFLAGS) $(filter %.a %.o %.c,$^) $(LDLIBS) -o $@
 +		 ) > $(VERIFIER_TESTS_H))
  
++<<<<<<< HEAD
 +EXTRA_CLEAN := $(TEST_CUSTOM_PROGS) $(ALU32_BUILD_DIR) $(BPF_GCC_BUILD_DIR) \
 +	$(VERIFIER_TESTS_H) $(PROG_TESTS_H) $(MAP_TESTS_H) \
 +	feature
++=======
+ # Make sure we are able to include and link libbpf against c++.
+ $(OUTPUT)/test_cpp: test_cpp.cpp $(BPFOBJ)
+ 	$(CXX) $(CFLAGS) $^ $(LDLIBS) -o $@
+ 
+ EXTRA_CLEAN := $(TEST_CUSTOM_PROGS)					\
+ 	prog_tests/tests.h map_tests/tests.h verifier/tests.h		\
+ 	feature $(OUTPUT)/*.o $(OUTPUT)/no_alu32 $(OUTPUT)/bpf_gcc
++>>>>>>> 6bf6affe18da (selftests/bpf: Bring back c++ include/link test)
* Unmerged path tools/lib/bpf/.gitignore
diff --git a/tools/lib/bpf/Makefile b/tools/lib/bpf/Makefile
index e6fcbcad3199..51b399246d33 100644
--- a/tools/lib/bpf/Makefile
+++ b/tools/lib/bpf/Makefile
@@ -142,7 +142,7 @@ GLOBAL_SYM_COUNT = $(shell readelf -s --wide $(BPF_IN) | \
 VERSIONED_SYM_COUNT = $(shell readelf -s --wide $(OUTPUT)libbpf.so | \
 			      grep -Eo '[^ ]+@LIBBPF_' | cut -d@ -f1 | sort -u | wc -l)
 
-CMD_TARGETS = $(LIB_TARGET) $(PC_FILE) $(OUTPUT)test_libbpf
+CMD_TARGETS = $(LIB_TARGET) $(PC_FILE)
 
 all: fixdep
 	$(Q)$(MAKE) all_cmd
@@ -183,9 +183,6 @@ $(OUTPUT)libbpf.so.$(LIBBPF_VERSION): $(BPF_IN)
 $(OUTPUT)libbpf.a: $(BPF_IN)
 	$(QUIET_LINK)$(RM) $@; $(AR) rcs $@ $^
 
-$(OUTPUT)test_libbpf: test_libbpf.c $(OUTPUT)libbpf.a
-	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) $^ -lelf -o $@
-
 $(OUTPUT)libbpf.pc:
 	$(QUIET_GEN)sed -e "s|@PREFIX@|$(prefix)|" \
 		-e "s|@LIBDIR@|$(libdir_SQ)|" \
* Unmerged path tools/testing/selftests/bpf/.gitignore
* Unmerged path tools/testing/selftests/bpf/Makefile
diff --git a/tools/lib/bpf/test_libbpf.c b/tools/testing/selftests/bpf/test_cpp.cpp
similarity index 100%
rename from tools/lib/bpf/test_libbpf.c
rename to tools/testing/selftests/bpf/test_cpp.cpp
