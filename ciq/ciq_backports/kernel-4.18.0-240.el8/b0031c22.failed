libperf: Add perf_evlist__id_add() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit b0031c22819ab606a0cb648c0f0a7d80db3c3a89
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b0031c22.failed

Add the perf_evlist__id_add() function to libperf as an internal
function.  We already have the 'heads' member in 'struct perf_evlist'.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-31-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit b0031c22819ab606a0cb648c0f0a7d80db3c3a89)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,f2863b4c61d7..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -482,33 -456,13 +482,38 @@@ int perf_evlist__filter_pollfd(struct p
  			       perf_evlist__munmap_filtered, NULL);
  }
  
 -int perf_evlist__poll(struct evlist *evlist, int timeout)
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout)
 +{
 +	return fdarray__poll(&evlist->pollfd, timeout);
 +}
 +
++<<<<<<< HEAD
 +static void perf_evlist__id_hash(struct perf_evlist *evlist,
 +				 struct perf_evsel *evsel,
 +				 int cpu, int thread, u64 id)
 +{
 +	int hash;
 +	struct perf_sample_id *sid = SID(evsel, cpu, thread);
 +
 +	sid->id = id;
 +	sid->evsel = evsel;
 +	hash = hash_64(sid->id, PERF_EVLIST__HLIST_BITS);
 +	hlist_add_head(&sid->node, &evlist->heads[hash]);
 +}
 +
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id)
  {
 -	return fdarray__poll(&evlist->core.pollfd, timeout);
 +	perf_evlist__id_hash(evlist, evsel, cpu, thread, id);
 +	evsel->id[evsel->ids++] = id;
  }
  
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
++=======
+ int perf_evlist__id_add_fd(struct evlist *evlist,
+ 			   struct evsel *evsel,
++>>>>>>> b0031c22819a (libperf: Add perf_evlist__id_add() function)
  			   int cpu, int thread, int fd)
  {
  	u64 read_data[4] = { 0, };
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,eb35b4b1d86f..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -113,41 -130,39 +113,46 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
 -int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
 -int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
 -int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
 +int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
 +int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
 +int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
  				     const char *name);
  
++<<<<<<< HEAD
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
++=======
+ int perf_evlist__id_add_fd(struct evlist *evlist,
+ 			   struct evsel *evsel,
++>>>>>>> b0031c22819a (libperf: Add perf_evlist__id_add() function)
  			   int cpu, int thread, int fd);
  
 -int perf_evlist__add_pollfd(struct evlist *evlist, int fd);
 -int perf_evlist__alloc_pollfd(struct evlist *evlist);
 -int perf_evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
  
 -int perf_evlist__poll(struct evlist *evlist, int timeout);
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
  
 -struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
 -struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
  						u64 id);
  
 -struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
 +struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
  
 -void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
 +void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
  
 -void evlist__mmap_consume(struct evlist *evlist, int idx);
 +void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
  
 -int evlist__open(struct evlist *evlist);
 -void evlist__close(struct evlist *evlist);
 +int perf_evlist__open(struct perf_evlist *evlist);
 +void perf_evlist__close(struct perf_evlist *evlist);
  
  struct callchain_param;
  
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
diff --git a/tools/perf/tests/event_update.c b/tools/perf/tests/event_update.c
index 458ad9f8e8ad..0f42f862d069 100644
--- a/tools/perf/tests/event_update.c
+++ b/tools/perf/tests/event_update.c
@@ -91,7 +91,7 @@ int test__event_update(struct test *test __maybe_unused, int subtest __maybe_unu
 	TEST_ASSERT_VAL("failed to allocate ids",
 			!perf_evsel__alloc_id(evsel, 1, 1));
 
-	perf_evlist__id_add(evlist, evsel, 0, 0, 123);
+	perf_evlist__id_add(&evlist->core, &evsel->core, 0, 0, 123);
 
 	evsel->unit = strdup("KRAVA");
 
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index 13489971ed57..15fd82cc789c 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -3621,7 +3621,7 @@ int perf_session__read_header(struct perf_session *session)
 			if (perf_header__getbuffer64(header, fd, &f_id, sizeof(f_id)))
 				goto out_errno;
 
-			perf_evlist__id_add(session->evlist, evsel, 0, j, f_id);
+			perf_evlist__id_add(&session->evlist->core, &evsel->core, 0, j, f_id);
 		}
 
 		lseek(fd, tmp, SEEK_SET);
@@ -4050,7 +4050,7 @@ int perf_event__process_attr(struct perf_tool *tool __maybe_unused,
 		return -ENOMEM;
 
 	for (i = 0; i < n_ids; i++) {
-		perf_evlist__id_add(evlist, evsel, 0, i, event->attr.id[i]);
+		perf_evlist__id_add(&evlist->core, &evsel->core, 0, i, event->attr.id[i]);
 	}
 
 	return 0;
