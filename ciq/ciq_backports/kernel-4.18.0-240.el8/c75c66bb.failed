crypto: sha256 - Remove sha256/224_init code duplication

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit c75c66bbaa56f130e2be095402422e56f608aa62
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c75c66bb.failed

lib/crypto/sha256.c and include/crypto/sha256_base.h define
99% identical functions to init a sha256_state struct for sha224 or
sha256 use.

This commit moves the functions from lib/crypto/sha256.c to
include/crypto/sha.h (making them static inline) and makes the
sha224/256_base_init static inline functions from
include/crypto/sha256_base.h wrappers around the now also
static inline include/crypto/sha.h functions.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit c75c66bbaa56f130e2be095402422e56f608aa62)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/crypto/sha.h
#	lib/crypto/sha256.c
diff --cc include/crypto/sha.h
index 0555b571dd34,5c2132c71900..000000000000
--- a/include/crypto/sha.h
+++ b/include/crypto/sha.h
@@@ -108,4 -112,51 +108,54 @@@ extern int crypto_sha512_update(struct 
  
  extern int crypto_sha512_finup(struct shash_desc *desc, const u8 *data,
  			       unsigned int len, u8 *hash);
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * Stand-alone implementation of the SHA256 algorithm. It is designed to
+  * have as little dependencies as possible so it can be used in the
+  * kexec_file purgatory. In other cases you should generally use the
+  * hash APIs from include/crypto/hash.h. Especially when hashing large
+  * amounts of data as those APIs may be hw-accelerated.
+  *
+  * For details see lib/crypto/sha256.c
+  */
+ 
+ static inline int sha256_init(struct sha256_state *sctx)
+ {
+ 	sctx->state[0] = SHA256_H0;
+ 	sctx->state[1] = SHA256_H1;
+ 	sctx->state[2] = SHA256_H2;
+ 	sctx->state[3] = SHA256_H3;
+ 	sctx->state[4] = SHA256_H4;
+ 	sctx->state[5] = SHA256_H5;
+ 	sctx->state[6] = SHA256_H6;
+ 	sctx->state[7] = SHA256_H7;
+ 	sctx->count = 0;
+ 
+ 	return 0;
+ }
+ extern int sha256_update(struct sha256_state *sctx, const u8 *input,
+ 			 unsigned int length);
+ extern int sha256_final(struct sha256_state *sctx, u8 *hash);
+ 
+ static inline int sha224_init(struct sha256_state *sctx)
+ {
+ 	sctx->state[0] = SHA224_H0;
+ 	sctx->state[1] = SHA224_H1;
+ 	sctx->state[2] = SHA224_H2;
+ 	sctx->state[3] = SHA224_H3;
+ 	sctx->state[4] = SHA224_H4;
+ 	sctx->state[5] = SHA224_H5;
+ 	sctx->state[6] = SHA224_H6;
+ 	sctx->state[7] = SHA224_H7;
+ 	sctx->count = 0;
+ 
+ 	return 0;
+ }
+ extern int sha224_update(struct sha256_state *sctx, const u8 *input,
+ 			 unsigned int length);
+ extern int sha224_final(struct sha256_state *sctx, u8 *hash);
+ 
++>>>>>>> c75c66bbaa56 (crypto: sha256 - Remove sha256/224_init code duplication)
  #endif
diff --cc lib/crypto/sha256.c
index 75cf3499a1c2,66cb04b0cf4e..000000000000
--- a/lib/crypto/sha256.c
+++ b/lib/crypto/sha256.c
@@@ -208,21 -206,6 +208,24 @@@ static void sha256_transform(u32 *state
  	memzero_explicit(W, 64 * sizeof(u32));
  }
  
++<<<<<<< HEAD
 +int sha256_init(struct sha256_state *sctx)
 +{
 +	sctx->state[0] = SHA256_H0;
 +	sctx->state[1] = SHA256_H1;
 +	sctx->state[2] = SHA256_H2;
 +	sctx->state[3] = SHA256_H3;
 +	sctx->state[4] = SHA256_H4;
 +	sctx->state[5] = SHA256_H5;
 +	sctx->state[6] = SHA256_H6;
 +	sctx->state[7] = SHA256_H7;
 +	sctx->count = 0;
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> c75c66bbaa56 (crypto: sha256 - Remove sha256/224_init code duplication)
  int sha256_update(struct sha256_state *sctx, const u8 *data, unsigned int len)
  {
  	unsigned int partial, done;
* Unmerged path include/crypto/sha.h
diff --git a/include/crypto/sha256_base.h b/include/crypto/sha256_base.h
index d1f2195bb7de..fb3e3a9d44d1 100644
--- a/include/crypto/sha256_base.h
+++ b/include/crypto/sha256_base.h
@@ -22,34 +22,14 @@ static inline int sha224_base_init(struct shash_desc *desc)
 {
 	struct sha256_state *sctx = shash_desc_ctx(desc);
 
-	sctx->state[0] = SHA224_H0;
-	sctx->state[1] = SHA224_H1;
-	sctx->state[2] = SHA224_H2;
-	sctx->state[3] = SHA224_H3;
-	sctx->state[4] = SHA224_H4;
-	sctx->state[5] = SHA224_H5;
-	sctx->state[6] = SHA224_H6;
-	sctx->state[7] = SHA224_H7;
-	sctx->count = 0;
-
-	return 0;
+	return sha224_init(sctx);
 }
 
 static inline int sha256_base_init(struct shash_desc *desc)
 {
 	struct sha256_state *sctx = shash_desc_ctx(desc);
 
-	sctx->state[0] = SHA256_H0;
-	sctx->state[1] = SHA256_H1;
-	sctx->state[2] = SHA256_H2;
-	sctx->state[3] = SHA256_H3;
-	sctx->state[4] = SHA256_H4;
-	sctx->state[5] = SHA256_H5;
-	sctx->state[6] = SHA256_H6;
-	sctx->state[7] = SHA256_H7;
-	sctx->count = 0;
-
-	return 0;
+	return sha256_init(sctx);
 }
 
 static inline int sha256_base_do_update(struct shash_desc *desc,
* Unmerged path lib/crypto/sha256.c
