libperf: Move perf's cpu_map__idx() to perf_cpu_map__idx()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit b4df75de3b3930703415aa053a269ae07c78d9b2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b4df75de.failed

As an internal function that will be used by both perf and libperf, but
is not exported at this point.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190822111141.25823-5-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit b4df75de3b3930703415aa053a269ae07c78d9b2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/cpumap.c
#	tools/perf/lib/include/internal/cpumap.h
#	tools/perf/util/cpumap.c
#	tools/perf/util/cpumap.h
#	tools/perf/util/evlist.c
diff --cc tools/perf/util/cpumap.c
index 77925b3c8d91,8e6c2cbffedc..000000000000
--- a/tools/perf/util/cpumap.c
+++ b/tools/perf/util/cpumap.c
@@@ -676,24 -456,12 +676,28 @@@ int cpu__setup_cpunode_map(void
  	return 0;
  }
  
 -bool cpu_map__has(struct perf_cpu_map *cpus, int cpu)
 +bool cpu_map__has(struct cpu_map *cpus, int cpu)
  {
++<<<<<<< HEAD
 +	return cpu_map__idx(cpus, cpu) != -1;
 +}
 +
 +int cpu_map__idx(struct cpu_map *cpus, int cpu)
 +{
 +	int i;
 +
 +	for (i = 0; i < cpus->nr; ++i) {
 +		if (cpus->map[i] == cpu)
 +			return i;
 +	}
 +
 +	return -1;
++=======
+ 	return perf_cpu_map__idx(cpus, cpu) != -1;
++>>>>>>> b4df75de3b39 (libperf: Move perf's cpu_map__idx() to perf_cpu_map__idx())
  }
  
 -int cpu_map__cpu(struct perf_cpu_map *cpus, int idx)
 +int cpu_map__cpu(struct cpu_map *cpus, int idx)
  {
  	return cpus->map[idx];
  }
diff --cc tools/perf/util/cpumap.h
index 1265f0e33920,8dbedda7af45..000000000000
--- a/tools/perf/util/cpumap.h
+++ b/tools/perf/util/cpumap.h
@@@ -76,11 -56,10 +76,16 @@@ int cpu__max_cpu(void)
  int cpu__max_present_cpu(void);
  int cpu__get_node(int cpu);
  
 -int cpu_map__build_map(struct perf_cpu_map *cpus, struct perf_cpu_map **res,
 -		       int (*f)(struct perf_cpu_map *map, int cpu, void *data),
 +int cpu_map__build_map(struct cpu_map *cpus, struct cpu_map **res,
 +		       int (*f)(struct cpu_map *map, int cpu, void *data),
  		       void *data);
  
++<<<<<<< HEAD
 +int cpu_map__cpu(struct cpu_map *cpus, int idx);
 +bool cpu_map__has(struct cpu_map *cpus, int cpu);
 +int cpu_map__idx(struct cpu_map *cpus, int cpu);
++=======
+ int cpu_map__cpu(struct perf_cpu_map *cpus, int idx);
+ bool cpu_map__has(struct perf_cpu_map *cpus, int cpu);
++>>>>>>> b4df75de3b39 (libperf: Move perf's cpu_map__idx() to perf_cpu_map__idx())
  #endif /* __PERF_CPUMAP_H */
diff --cc tools/perf/util/evlist.c
index 4739b7914374,8582560b59af..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -785,7 -758,7 +785,11 @@@ static int perf_evlist__mmap_per_evsel(
  		if (evsel->system_wide && thread)
  			continue;
  
++<<<<<<< HEAD
 +		cpu = cpu_map__idx(evsel->cpus, evlist_cpu);
++=======
+ 		cpu = perf_cpu_map__idx(evsel->core.cpus, evlist_cpu);
++>>>>>>> b4df75de3b39 (libperf: Move perf's cpu_map__idx() to perf_cpu_map__idx())
  		if (cpu == -1)
  			continue;
  
* Unmerged path tools/perf/lib/cpumap.c
* Unmerged path tools/perf/lib/include/internal/cpumap.h
* Unmerged path tools/perf/lib/cpumap.c
* Unmerged path tools/perf/lib/include/internal/cpumap.h
* Unmerged path tools/perf/util/cpumap.c
* Unmerged path tools/perf/util/cpumap.h
* Unmerged path tools/perf/util/evlist.c
