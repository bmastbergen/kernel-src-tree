Drivers: hv: vmbus: Add module parameter to cap the VMBus version

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [hv] hv: vmbus: Add module parameter to cap the VMBus version (Mohammed Gamal) [1828451 1815498]
Rebuild_FUZZ: 92.56%
commit-author Andrea Parri <parri.andrea@gmail.com>
commit 931cccc967730d43bb6325506baf51c8f83a9a58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/931cccc9.failed

Currently, Linux guests negotiate the VMBus version with Hyper-V
and use the highest available VMBus version they can connect to.
This has some drawbacks: by using the highest available version,
certain code paths are never executed and can not be tested when
the guest runs on the newest host.

Add the module parameter "max_version", to upper-bound the VMBus
versions guests can negotiate.

	Suggested-by: Dexuan Cui <decui@microsoft.com>
	Signed-off-by: Andrea Parri <parri.andrea@gmail.com>
	Reviewed-by: Wei Liu <wei.liu@kernel.org>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Signed-off-by: Sasha Levin <sashal@kernel.org>
(cherry picked from commit 931cccc967730d43bb6325506baf51c8f83a9a58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/connection.c
diff --cc drivers/hv/connection.c
index 4fe117b761ce,0475be4356dd..000000000000
--- a/drivers/hv/connection.c
+++ b/drivers/hv/connection.c
@@@ -48,32 -41,32 +49,46 @@@ EXPORT_SYMBOL_GPL(vmbus_connection)
  __u32 vmbus_proto_version;
  EXPORT_SYMBOL_GPL(vmbus_proto_version);
  
 -/*
 - * Table of VMBus versions listed from newest to oldest.
 - */
 -static __u32 vmbus_versions[] = {
 -	VERSION_WIN10_V5_2,
 -	VERSION_WIN10_V5_1,
 -	VERSION_WIN10_V5,
 -	VERSION_WIN10_V4_1,
 -	VERSION_WIN10,
 -	VERSION_WIN8_1,
 -	VERSION_WIN8,
 -	VERSION_WIN7,
 -	VERSION_WS2008
 -};
 +static __u32 vmbus_get_next_version(__u32 current_version)
 +{
 +	switch (current_version) {
 +	case (VERSION_WIN7):
 +		return VERSION_WS2008;
 +
++<<<<<<< HEAD
 +	case (VERSION_WIN8):
 +		return VERSION_WIN7;
 +
 +	case (VERSION_WIN8_1):
 +		return VERSION_WIN8;
  
 +	case (VERSION_WIN10):
 +		return VERSION_WIN8_1;
 +
 +	case (VERSION_WIN10_V5):
 +		return VERSION_WIN10;
 +
 +	case (VERSION_WS2008):
 +	default:
 +		return VERSION_INVAL;
 +	}
 +}
 +
 +static int vmbus_negotiate_version(struct vmbus_channel_msginfo *msginfo,
 +					__u32 version)
++=======
+ /*
+  * Maximal VMBus protocol version guests can negotiate.  Useful to cap the
+  * VMBus version for testing and debugging purpose.
+  */
+ static uint max_version = VERSION_WIN10_V5_2;
+ 
+ module_param(max_version, uint, S_IRUGO);
+ MODULE_PARM_DESC(max_version,
+ 		 "Maximal VMBus protocol version which can be negotiated");
+ 
+ int vmbus_negotiate_version(struct vmbus_channel_msginfo *msginfo, u32 version)
++>>>>>>> 931cccc96773 (Drivers: hv: vmbus: Add module parameter to cap the VMBus version)
  {
  	int ret = 0;
  	unsigned int cur_cpu;
@@@ -253,9 -246,14 +268,19 @@@ int vmbus_connect(void
  	 * version.
  	 */
  
++<<<<<<< HEAD
 +	version = VERSION_CURRENT;
++=======
+ 	for (i = 0; ; i++) {
+ 		if (i == ARRAY_SIZE(vmbus_versions))
+ 			goto cleanup;
+ 
+ 		version = vmbus_versions[i];
+ 		if (version > max_version)
+ 			continue;
++>>>>>>> 931cccc96773 (Drivers: hv: vmbus: Add module parameter to cap the VMBus version)
  
 +	do {
  		ret = vmbus_negotiate_version(msginfo, version);
  		if (ret == -ETIMEDOUT)
  			goto cleanup;
* Unmerged path drivers/hv/connection.c
