tools/libbpf: Add support for BPF_PROG_TYPE_LSM

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author KP Singh <kpsingh@google.com>
commit 1e092a0318292637cde832868016f37e942eed24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1e092a03.failed

Since BPF_PROG_TYPE_LSM uses the same attaching mechanism as
BPF_PROG_TYPE_TRACING, the common logic is refactored into a static
function bpf_program__attach_btf_id.

A new API call bpf_program__attach_lsm is still added to avoid userspace
conflicts if this ever changes in the future.

	Signed-off-by: KP Singh <kpsingh@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Brendan Jackman <jackmanb@google.com>
	Reviewed-by: Florent Revest <revest@google.com>
	Reviewed-by: James Morris <jamorris@linux.microsoft.com>
	Acked-by: Yonghong Song <yhs@fb.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20200329004356.27286-7-kpsingh@chromium.org
(cherry picked from commit 1e092a0318292637cde832868016f37e942eed24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/bpf.c
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/bpf.c
index f9124e381f55,73220176728d..000000000000
--- a/tools/lib/bpf/bpf.c
+++ b/tools/lib/bpf/bpf.c
@@@ -228,9 -235,17 +228,23 @@@ int bpf_load_program_xattr(const struc
  	memset(&attr, 0, sizeof(attr));
  	attr.prog_type = load_attr->prog_type;
  	attr.expected_attach_type = load_attr->expected_attach_type;
++<<<<<<< HEAD
 +	if (attr.prog_type == BPF_PROG_TYPE_RAW_TRACEPOINT)
 +		/* expected_attach_type is ignored for tracing progs */
 +		attr.attach_btf_id = attr.expected_attach_type;
++=======
+ 	if (attr.prog_type == BPF_PROG_TYPE_STRUCT_OPS ||
+ 	    attr.prog_type == BPF_PROG_TYPE_LSM) {
+ 		attr.attach_btf_id = load_attr->attach_btf_id;
+ 	} else if (attr.prog_type == BPF_PROG_TYPE_TRACING ||
+ 		   attr.prog_type == BPF_PROG_TYPE_EXT) {
+ 		attr.attach_btf_id = load_attr->attach_btf_id;
+ 		attr.attach_prog_fd = load_attr->attach_prog_fd;
+ 	} else {
+ 		attr.prog_ifindex = load_attr->prog_ifindex;
+ 		attr.kern_version = load_attr->kern_version;
+ 	}
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  	attr.insn_cnt = (__u32)load_attr->insns_cnt;
  	attr.insns = ptr_to_u64(load_attr->insns);
  	attr.license = ptr_to_u64(load_attr->license);
diff --cc tools/lib/bpf/libbpf.c
index 7277de638c6d,0638e717f502..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -1588,6 -2332,66 +1588,69 @@@ out
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int bpf_object__finalize_btf(struct bpf_object *obj)
+ {
+ 	int err;
+ 
+ 	if (!obj->btf)
+ 		return 0;
+ 
+ 	err = btf__finalize_data(obj, obj->btf);
+ 	if (!err)
+ 		return 0;
+ 
+ 	pr_warn("Error finalizing %s: %d.\n", BTF_ELF_SEC, err);
+ 	btf__free(obj->btf);
+ 	obj->btf = NULL;
+ 	btf_ext__free(obj->btf_ext);
+ 	obj->btf_ext = NULL;
+ 
+ 	if (libbpf_needs_btf(obj)) {
+ 		pr_warn("BTF is required, but is missing or corrupted.\n");
+ 		return -ENOENT;
+ 	}
+ 	return 0;
+ }
+ 
+ static inline bool libbpf_prog_needs_vmlinux_btf(struct bpf_program *prog)
+ {
+ 	if (prog->type == BPF_PROG_TYPE_STRUCT_OPS ||
+ 	    prog->type == BPF_PROG_TYPE_LSM)
+ 		return true;
+ 
+ 	/* BPF_PROG_TYPE_TRACING programs which do not attach to other programs
+ 	 * also need vmlinux BTF
+ 	 */
+ 	if (prog->type == BPF_PROG_TYPE_TRACING && !prog->attach_prog_fd)
+ 		return true;
+ 
+ 	return false;
+ }
+ 
+ static int bpf_object__load_vmlinux_btf(struct bpf_object *obj)
+ {
+ 	struct bpf_program *prog;
+ 	int err;
+ 
+ 	bpf_object__for_each_program(prog, obj) {
+ 		if (libbpf_prog_needs_vmlinux_btf(prog)) {
+ 			obj->btf_vmlinux = libbpf_find_kernel_btf();
+ 			if (IS_ERR(obj->btf_vmlinux)) {
+ 				err = PTR_ERR(obj->btf_vmlinux);
+ 				pr_warn("Error loading vmlinux BTF: %d\n", err);
+ 				obj->btf_vmlinux = NULL;
+ 				return err;
+ 			}
+ 			return 0;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  static int bpf_object__sanitize_and_load_btf(struct bpf_object *obj)
  {
  	int err = 0;
@@@ -3819,8 -4867,17 +3882,22 @@@ load_program(struct bpf_program *prog, 
  	load_attr.insns = insns;
  	load_attr.insns_cnt = insns_cnt;
  	load_attr.license = license;
++<<<<<<< HEAD
 +	load_attr.kern_version = kern_version;
 +	load_attr.prog_ifindex = prog->prog_ifindex;
++=======
+ 	if (prog->type == BPF_PROG_TYPE_STRUCT_OPS ||
+ 	    prog->type == BPF_PROG_TYPE_LSM) {
+ 		load_attr.attach_btf_id = prog->attach_btf_id;
+ 	} else if (prog->type == BPF_PROG_TYPE_TRACING ||
+ 		   prog->type == BPF_PROG_TYPE_EXT) {
+ 		load_attr.attach_prog_fd = prog->attach_prog_fd;
+ 		load_attr.attach_btf_id = prog->attach_btf_id;
+ 	} else {
+ 		load_attr.kern_version = kern_version;
+ 		load_attr.prog_ifindex = prog->prog_ifindex;
+ 	}
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  	/* if .BTF.ext was loaded, kernel supports associated BTF for prog */
  	if (prog->obj->btf_ext)
  		btf_fd = bpf_object__btf_fd(prog->obj);
@@@ -3895,11 -4952,20 +3972,24 @@@ out
  	return ret;
  }
  
 -static int libbpf_find_attach_btf_id(struct bpf_program *prog);
 -
 -int bpf_program__load(struct bpf_program *prog, char *license, __u32 kern_ver)
 +int
 +bpf_program__load(struct bpf_program *prog,
 +		  char *license, __u32 kern_version)
  {
++<<<<<<< HEAD
 +	int err = 0, fd, i;
++=======
+ 	int err = 0, fd, i, btf_id;
+ 
+ 	if ((prog->type == BPF_PROG_TYPE_TRACING ||
+ 	     prog->type == BPF_PROG_TYPE_LSM ||
+ 	     prog->type == BPF_PROG_TYPE_EXT) && !prog->attach_btf_id) {
+ 		btf_id = libbpf_find_attach_btf_id(prog);
+ 		if (btf_id <= 0)
+ 			return btf_id;
+ 		prog->attach_btf_id = btf_id;
+ 	}
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  
  	if (prog->instances.nr < 0 || !prog->instances.fds) {
  		if (prog->preprocessor) {
@@@ -5049,7 -6246,30 +5140,34 @@@ void bpf_program__set_expected_attach_t
   */
  #define BPF_APROG_COMPAT(string, ptype) BPF_PROG_SEC(string, ptype)
  
++<<<<<<< HEAD
 +static const struct {
++=======
+ #define SEC_DEF(sec_pfx, ptype, ...) {					    \
+ 	.sec = sec_pfx,							    \
+ 	.len = sizeof(sec_pfx) - 1,					    \
+ 	.prog_type = BPF_PROG_TYPE_##ptype,				    \
+ 	__VA_ARGS__							    \
+ }
+ 
+ struct bpf_sec_def;
+ 
+ typedef struct bpf_link *(*attach_fn_t)(const struct bpf_sec_def *sec,
+ 					struct bpf_program *prog);
+ 
+ static struct bpf_link *attach_kprobe(const struct bpf_sec_def *sec,
+ 				      struct bpf_program *prog);
+ static struct bpf_link *attach_tp(const struct bpf_sec_def *sec,
+ 				  struct bpf_program *prog);
+ static struct bpf_link *attach_raw_tp(const struct bpf_sec_def *sec,
+ 				      struct bpf_program *prog);
+ static struct bpf_link *attach_trace(const struct bpf_sec_def *sec,
+ 				     struct bpf_program *prog);
+ static struct bpf_link *attach_lsm(const struct bpf_sec_def *sec,
+ 				   struct bpf_program *prog);
+ 
+ struct bpf_sec_def {
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  	const char *sec;
  	size_t len;
  	enum bpf_prog_type prog_type;
@@@ -5066,11 -6291,37 +5184,45 @@@
  	BPF_PROG_SEC("uretprobe/",		BPF_PROG_TYPE_KPROBE),
  	BPF_PROG_SEC("classifier",		BPF_PROG_TYPE_SCHED_CLS),
  	BPF_PROG_SEC("action",			BPF_PROG_TYPE_SCHED_ACT),
++<<<<<<< HEAD
 +	BPF_PROG_SEC("tracepoint/",		BPF_PROG_TYPE_TRACEPOINT),
 +	BPF_PROG_SEC("tp/",			BPF_PROG_TYPE_TRACEPOINT),
 +	BPF_PROG_SEC("raw_tracepoint/",		BPF_PROG_TYPE_RAW_TRACEPOINT),
 +	BPF_PROG_SEC("raw_tp/",			BPF_PROG_TYPE_RAW_TRACEPOINT),
 +	BPF_PROG_BTF("tp_btf/",			BPF_PROG_TYPE_RAW_TRACEPOINT),
++=======
+ 	SEC_DEF("tracepoint/", TRACEPOINT,
+ 		.attach_fn = attach_tp),
+ 	SEC_DEF("tp/", TRACEPOINT,
+ 		.attach_fn = attach_tp),
+ 	SEC_DEF("raw_tracepoint/", RAW_TRACEPOINT,
+ 		.attach_fn = attach_raw_tp),
+ 	SEC_DEF("raw_tp/", RAW_TRACEPOINT,
+ 		.attach_fn = attach_raw_tp),
+ 	SEC_DEF("tp_btf/", TRACING,
+ 		.expected_attach_type = BPF_TRACE_RAW_TP,
+ 		.is_attach_btf = true,
+ 		.attach_fn = attach_trace),
+ 	SEC_DEF("fentry/", TRACING,
+ 		.expected_attach_type = BPF_TRACE_FENTRY,
+ 		.is_attach_btf = true,
+ 		.attach_fn = attach_trace),
+ 	SEC_DEF("fmod_ret/", TRACING,
+ 		.expected_attach_type = BPF_MODIFY_RETURN,
+ 		.is_attach_btf = true,
+ 		.attach_fn = attach_trace),
+ 	SEC_DEF("fexit/", TRACING,
+ 		.expected_attach_type = BPF_TRACE_FEXIT,
+ 		.is_attach_btf = true,
+ 		.attach_fn = attach_trace),
+ 	SEC_DEF("freplace/", EXT,
+ 		.is_attach_btf = true,
+ 		.attach_fn = attach_trace),
+ 	SEC_DEF("lsm/", LSM,
+ 		.is_attach_btf = true,
+ 		.expected_attach_type = BPF_LSM_MAC,
+ 		.attach_fn = attach_lsm),
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  	BPF_PROG_SEC("xdp",			BPF_PROG_TYPE_XDP),
  	BPF_PROG_SEC("perf_event",		BPF_PROG_TYPE_PERF_EVENT),
  	BPF_PROG_SEC("lwt_in",			BPF_PROG_TYPE_LWT_IN),
@@@ -5208,6 -6453,252 +5360,255 @@@ int libbpf_prog_type_by_name(const cha
  	return -ESRCH;
  }
  
++<<<<<<< HEAD
++=======
+ static struct bpf_map *find_struct_ops_map_by_offset(struct bpf_object *obj,
+ 						     size_t offset)
+ {
+ 	struct bpf_map *map;
+ 	size_t i;
+ 
+ 	for (i = 0; i < obj->nr_maps; i++) {
+ 		map = &obj->maps[i];
+ 		if (!bpf_map__is_struct_ops(map))
+ 			continue;
+ 		if (map->sec_offset <= offset &&
+ 		    offset - map->sec_offset < map->def.value_size)
+ 			return map;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ /* Collect the reloc from ELF and populate the st_ops->progs[] */
+ static int bpf_object__collect_struct_ops_map_reloc(struct bpf_object *obj,
+ 						    GElf_Shdr *shdr,
+ 						    Elf_Data *data)
+ {
+ 	const struct btf_member *member;
+ 	struct bpf_struct_ops *st_ops;
+ 	struct bpf_program *prog;
+ 	unsigned int shdr_idx;
+ 	const struct btf *btf;
+ 	struct bpf_map *map;
+ 	Elf_Data *symbols;
+ 	unsigned int moff;
+ 	const char *name;
+ 	__u32 member_idx;
+ 	GElf_Sym sym;
+ 	GElf_Rel rel;
+ 	int i, nrels;
+ 
+ 	symbols = obj->efile.symbols;
+ 	btf = obj->btf;
+ 	nrels = shdr->sh_size / shdr->sh_entsize;
+ 	for (i = 0; i < nrels; i++) {
+ 		if (!gelf_getrel(data, i, &rel)) {
+ 			pr_warn("struct_ops reloc: failed to get %d reloc\n", i);
+ 			return -LIBBPF_ERRNO__FORMAT;
+ 		}
+ 
+ 		if (!gelf_getsym(symbols, GELF_R_SYM(rel.r_info), &sym)) {
+ 			pr_warn("struct_ops reloc: symbol %zx not found\n",
+ 				(size_t)GELF_R_SYM(rel.r_info));
+ 			return -LIBBPF_ERRNO__FORMAT;
+ 		}
+ 
+ 		name = elf_strptr(obj->efile.elf, obj->efile.strtabidx,
+ 				  sym.st_name) ? : "<?>";
+ 		map = find_struct_ops_map_by_offset(obj, rel.r_offset);
+ 		if (!map) {
+ 			pr_warn("struct_ops reloc: cannot find map at rel.r_offset %zu\n",
+ 				(size_t)rel.r_offset);
+ 			return -EINVAL;
+ 		}
+ 
+ 		moff = rel.r_offset - map->sec_offset;
+ 		shdr_idx = sym.st_shndx;
+ 		st_ops = map->st_ops;
+ 		pr_debug("struct_ops reloc %s: for %lld value %lld shdr_idx %u rel.r_offset %zu map->sec_offset %zu name %d (\'%s\')\n",
+ 			 map->name,
+ 			 (long long)(rel.r_info >> 32),
+ 			 (long long)sym.st_value,
+ 			 shdr_idx, (size_t)rel.r_offset,
+ 			 map->sec_offset, sym.st_name, name);
+ 
+ 		if (shdr_idx >= SHN_LORESERVE) {
+ 			pr_warn("struct_ops reloc %s: rel.r_offset %zu shdr_idx %u unsupported non-static function\n",
+ 				map->name, (size_t)rel.r_offset, shdr_idx);
+ 			return -LIBBPF_ERRNO__RELOC;
+ 		}
+ 
+ 		member = find_member_by_offset(st_ops->type, moff * 8);
+ 		if (!member) {
+ 			pr_warn("struct_ops reloc %s: cannot find member at moff %u\n",
+ 				map->name, moff);
+ 			return -EINVAL;
+ 		}
+ 		member_idx = member - btf_members(st_ops->type);
+ 		name = btf__name_by_offset(btf, member->name_off);
+ 
+ 		if (!resolve_func_ptr(btf, member->type, NULL)) {
+ 			pr_warn("struct_ops reloc %s: cannot relocate non func ptr %s\n",
+ 				map->name, name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		prog = bpf_object__find_prog_by_idx(obj, shdr_idx);
+ 		if (!prog) {
+ 			pr_warn("struct_ops reloc %s: cannot find prog at shdr_idx %u to relocate func ptr %s\n",
+ 				map->name, shdr_idx, name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		if (prog->type == BPF_PROG_TYPE_UNSPEC) {
+ 			const struct bpf_sec_def *sec_def;
+ 
+ 			sec_def = find_sec_def(prog->section_name);
+ 			if (sec_def &&
+ 			    sec_def->prog_type != BPF_PROG_TYPE_STRUCT_OPS) {
+ 				/* for pr_warn */
+ 				prog->type = sec_def->prog_type;
+ 				goto invalid_prog;
+ 			}
+ 
+ 			prog->type = BPF_PROG_TYPE_STRUCT_OPS;
+ 			prog->attach_btf_id = st_ops->type_id;
+ 			prog->expected_attach_type = member_idx;
+ 		} else if (prog->type != BPF_PROG_TYPE_STRUCT_OPS ||
+ 			   prog->attach_btf_id != st_ops->type_id ||
+ 			   prog->expected_attach_type != member_idx) {
+ 			goto invalid_prog;
+ 		}
+ 		st_ops->progs[member_idx] = prog;
+ 	}
+ 
+ 	return 0;
+ 
+ invalid_prog:
+ 	pr_warn("struct_ops reloc %s: cannot use prog %s in sec %s with type %u attach_btf_id %u expected_attach_type %u for func ptr %s\n",
+ 		map->name, prog->name, prog->section_name, prog->type,
+ 		prog->attach_btf_id, prog->expected_attach_type, name);
+ 	return -EINVAL;
+ }
+ 
+ #define BTF_TRACE_PREFIX "btf_trace_"
+ #define BTF_LSM_PREFIX "bpf_lsm_"
+ #define BTF_MAX_NAME_SIZE 128
+ 
+ static int find_btf_by_prefix_kind(const struct btf *btf, const char *prefix,
+ 				   const char *name, __u32 kind)
+ {
+ 	char btf_type_name[BTF_MAX_NAME_SIZE];
+ 	int ret;
+ 
+ 	ret = snprintf(btf_type_name, sizeof(btf_type_name),
+ 		       "%s%s", prefix, name);
+ 	/* snprintf returns the number of characters written excluding the
+ 	 * the terminating null. So, if >= BTF_MAX_NAME_SIZE are written, it
+ 	 * indicates truncation.
+ 	 */
+ 	if (ret < 0 || ret >= sizeof(btf_type_name))
+ 		return -ENAMETOOLONG;
+ 	return btf__find_by_name_kind(btf, btf_type_name, kind);
+ }
+ 
+ static inline int __find_vmlinux_btf_id(struct btf *btf, const char *name,
+ 					enum bpf_attach_type attach_type)
+ {
+ 	int err;
+ 
+ 	if (attach_type == BPF_TRACE_RAW_TP)
+ 		err = find_btf_by_prefix_kind(btf, BTF_TRACE_PREFIX, name,
+ 					      BTF_KIND_TYPEDEF);
+ 	else if (attach_type == BPF_LSM_MAC)
+ 		err = find_btf_by_prefix_kind(btf, BTF_LSM_PREFIX, name,
+ 					      BTF_KIND_FUNC);
+ 	else
+ 		err = btf__find_by_name_kind(btf, name, BTF_KIND_FUNC);
+ 
+ 	if (err <= 0)
+ 		pr_warn("%s is not found in vmlinux BTF\n", name);
+ 
+ 	return err;
+ }
+ 
+ int libbpf_find_vmlinux_btf_id(const char *name,
+ 			       enum bpf_attach_type attach_type)
+ {
+ 	struct btf *btf;
+ 
+ 	btf = libbpf_find_kernel_btf();
+ 	if (IS_ERR(btf)) {
+ 		pr_warn("vmlinux BTF is not found\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	return __find_vmlinux_btf_id(btf, name, attach_type);
+ }
+ 
+ static int libbpf_find_prog_btf_id(const char *name, __u32 attach_prog_fd)
+ {
+ 	struct bpf_prog_info_linear *info_linear;
+ 	struct bpf_prog_info *info;
+ 	struct btf *btf = NULL;
+ 	int err = -EINVAL;
+ 
+ 	info_linear = bpf_program__get_prog_info_linear(attach_prog_fd, 0);
+ 	if (IS_ERR_OR_NULL(info_linear)) {
+ 		pr_warn("failed get_prog_info_linear for FD %d\n",
+ 			attach_prog_fd);
+ 		return -EINVAL;
+ 	}
+ 	info = &info_linear->info;
+ 	if (!info->btf_id) {
+ 		pr_warn("The target program doesn't have BTF\n");
+ 		goto out;
+ 	}
+ 	if (btf__get_from_id(info->btf_id, &btf)) {
+ 		pr_warn("Failed to get BTF of the program\n");
+ 		goto out;
+ 	}
+ 	err = btf__find_by_name_kind(btf, name, BTF_KIND_FUNC);
+ 	btf__free(btf);
+ 	if (err <= 0) {
+ 		pr_warn("%s is not found in prog's BTF\n", name);
+ 		goto out;
+ 	}
+ out:
+ 	free(info_linear);
+ 	return err;
+ }
+ 
+ static int libbpf_find_attach_btf_id(struct bpf_program *prog)
+ {
+ 	enum bpf_attach_type attach_type = prog->expected_attach_type;
+ 	__u32 attach_prog_fd = prog->attach_prog_fd;
+ 	const char *name = prog->section_name;
+ 	int i, err;
+ 
+ 	if (!name)
+ 		return -EINVAL;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(section_defs); i++) {
+ 		if (!section_defs[i].is_attach_btf)
+ 			continue;
+ 		if (strncmp(name, section_defs[i].sec, section_defs[i].len))
+ 			continue;
+ 		if (attach_prog_fd)
+ 			err = libbpf_find_prog_btf_id(name + section_defs[i].len,
+ 						      attach_prog_fd);
+ 		else
+ 			err = __find_vmlinux_btf_id(prog->obj->btf_vmlinux,
+ 						    name + section_defs[i].len,
+ 						    attach_type);
+ 		return err;
+ 	}
+ 	pr_warn("failed to identify btf_id based on ELF section name '%s'\n", name);
+ 	return -ESRCH;
+ }
+ 
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  int libbpf_attach_type_by_name(const char *name,
  			       enum bpf_attach_type *attach_type)
  {
@@@ -5830,9 -7468,133 +6231,139 @@@ struct bpf_link *bpf_program__attach_ra
  		return ERR_PTR(pfd);
  	}
  	link->fd = pfd;
++<<<<<<< HEAD
 +	return (struct bpf_link *)link;
 +}
 +
++=======
+ 	return link;
+ }
+ 
+ static struct bpf_link *attach_raw_tp(const struct bpf_sec_def *sec,
+ 				      struct bpf_program *prog)
+ {
+ 	const char *tp_name = bpf_program__title(prog, false) + sec->len;
+ 
+ 	return bpf_program__attach_raw_tracepoint(prog, tp_name);
+ }
+ 
+ /* Common logic for all BPF program types that attach to a btf_id */
+ static struct bpf_link *bpf_program__attach_btf_id(struct bpf_program *prog)
+ {
+ 	char errmsg[STRERR_BUFSIZE];
+ 	struct bpf_link *link;
+ 	int prog_fd, pfd;
+ 
+ 	prog_fd = bpf_program__fd(prog);
+ 	if (prog_fd < 0) {
+ 		pr_warn("program '%s': can't attach before loaded\n",
+ 			bpf_program__title(prog, false));
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	link = calloc(1, sizeof(*link));
+ 	if (!link)
+ 		return ERR_PTR(-ENOMEM);
+ 	link->detach = &bpf_link__detach_fd;
+ 
+ 	pfd = bpf_raw_tracepoint_open(NULL, prog_fd);
+ 	if (pfd < 0) {
+ 		pfd = -errno;
+ 		free(link);
+ 		pr_warn("program '%s': failed to attach: %s\n",
+ 			bpf_program__title(prog, false),
+ 			libbpf_strerror_r(pfd, errmsg, sizeof(errmsg)));
+ 		return ERR_PTR(pfd);
+ 	}
+ 	link->fd = pfd;
+ 	return (struct bpf_link *)link;
+ }
+ 
+ struct bpf_link *bpf_program__attach_trace(struct bpf_program *prog)
+ {
+ 	return bpf_program__attach_btf_id(prog);
+ }
+ 
+ struct bpf_link *bpf_program__attach_lsm(struct bpf_program *prog)
+ {
+ 	return bpf_program__attach_btf_id(prog);
+ }
+ 
+ static struct bpf_link *attach_trace(const struct bpf_sec_def *sec,
+ 				     struct bpf_program *prog)
+ {
+ 	return bpf_program__attach_trace(prog);
+ }
+ 
+ static struct bpf_link *attach_lsm(const struct bpf_sec_def *sec,
+ 				   struct bpf_program *prog)
+ {
+ 	return bpf_program__attach_lsm(prog);
+ }
+ 
+ struct bpf_link *bpf_program__attach(struct bpf_program *prog)
+ {
+ 	const struct bpf_sec_def *sec_def;
+ 
+ 	sec_def = find_sec_def(bpf_program__title(prog, false));
+ 	if (!sec_def || !sec_def->attach_fn)
+ 		return ERR_PTR(-ESRCH);
+ 
+ 	return sec_def->attach_fn(sec_def, prog);
+ }
+ 
+ static int bpf_link__detach_struct_ops(struct bpf_link *link)
+ {
+ 	__u32 zero = 0;
+ 
+ 	if (bpf_map_delete_elem(link->fd, &zero))
+ 		return -errno;
+ 
+ 	return 0;
+ }
+ 
+ struct bpf_link *bpf_map__attach_struct_ops(struct bpf_map *map)
+ {
+ 	struct bpf_struct_ops *st_ops;
+ 	struct bpf_link *link;
+ 	__u32 i, zero = 0;
+ 	int err;
+ 
+ 	if (!bpf_map__is_struct_ops(map) || map->fd == -1)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	link = calloc(1, sizeof(*link));
+ 	if (!link)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	st_ops = map->st_ops;
+ 	for (i = 0; i < btf_vlen(st_ops->type); i++) {
+ 		struct bpf_program *prog = st_ops->progs[i];
+ 		void *kern_data;
+ 		int prog_fd;
+ 
+ 		if (!prog)
+ 			continue;
+ 
+ 		prog_fd = bpf_program__fd(prog);
+ 		kern_data = st_ops->kern_vdata + st_ops->kern_func_off[i];
+ 		*(unsigned long *)kern_data = prog_fd;
+ 	}
+ 
+ 	err = bpf_map_update_elem(map->fd, &zero, st_ops->kern_vdata, 0);
+ 	if (err) {
+ 		err = -errno;
+ 		free(link);
+ 		return ERR_PTR(err);
+ 	}
+ 
+ 	link->detach = bpf_link__detach_struct_ops;
+ 	link->fd = map->fd;
+ 
+ 	return link;
+ }
+ 
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  enum bpf_perf_event_ret
  bpf_perf_event_read_simple(void *mmap_mem, size_t mmap_size, size_t page_size,
  			   void **copy_mem, size_t *copy_size,
diff --cc tools/lib/bpf/libbpf.h
index e454ceec9fa2,55348724c355..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -222,6 -246,12 +222,15 @@@ LIBBPF_API struct bpf_link 
  bpf_program__attach_raw_tracepoint(struct bpf_program *prog,
  				   const char *tp_name);
  
++<<<<<<< HEAD
++=======
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_trace(struct bpf_program *prog);
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_lsm(struct bpf_program *prog);
+ struct bpf_map;
+ LIBBPF_API struct bpf_link *bpf_map__attach_struct_ops(struct bpf_map *map);
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
  struct bpf_insn;
  
  /*
diff --cc tools/lib/bpf/libbpf.map
index 3ca7228af37e,eabd3d3e689f..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -188,9 -197,56 +188,57 @@@ LIBBPF_0.0.4 
  		bpf_map__get_pin_path;
  		bpf_map__is_pinned;
  		bpf_map__set_pin_path;
 -		bpf_object__open_file;
 -		bpf_object__open_mem;
 -		bpf_program__attach_trace;
  		bpf_program__get_expected_attach_type;
  		bpf_program__get_type;
 -		bpf_program__is_tracing;
 -		bpf_program__set_tracing;
 +		bpf_get_link_xdp_info;
  		bpf_program__size;
++<<<<<<< HEAD
 +		bpf_btf_get_next_id;
 +} LIBBPF_0.0.3;
++=======
+ 		btf__find_by_name_kind;
+ 		libbpf_find_vmlinux_btf_id;
+ } LIBBPF_0.0.5;
+ 
+ LIBBPF_0.0.7 {
+ 	global:
+ 		btf_dump__emit_type_decl;
+ 		bpf_link__disconnect;
+ 		bpf_map__attach_struct_ops;
+ 		bpf_map_delete_batch;
+ 		bpf_map_lookup_and_delete_batch;
+ 		bpf_map_lookup_batch;
+ 		bpf_map_update_batch;
+ 		bpf_object__find_program_by_name;
+ 		bpf_object__attach_skeleton;
+ 		bpf_object__destroy_skeleton;
+ 		bpf_object__detach_skeleton;
+ 		bpf_object__load_skeleton;
+ 		bpf_object__open_skeleton;
+ 		bpf_probe_large_insn_limit;
+ 		bpf_prog_attach_xattr;
+ 		bpf_program__attach;
+ 		bpf_program__name;
+ 		bpf_program__is_extension;
+ 		bpf_program__is_struct_ops;
+ 		bpf_program__set_extension;
+ 		bpf_program__set_struct_ops;
+ 		btf__align_of;
+ 		libbpf_find_kernel_btf;
+ } LIBBPF_0.0.6;
+ 
+ LIBBPF_0.0.8 {
+ 	global:
+ 		bpf_link__fd;
+ 		bpf_link__open;
+ 		bpf_link__pin;
+ 		bpf_link__pin_path;
+ 		bpf_link__unpin;
+ 		bpf_map__set_initial_value;
+ 		bpf_program__attach_lsm;
+ 		bpf_program__is_lsm;
+ 		bpf_program__set_attach_target;
+ 		bpf_program__set_lsm;
+ 		bpf_set_link_xdp_fd_opts;
+ } LIBBPF_0.0.7;
++>>>>>>> 1e092a031829 (tools/libbpf: Add support for BPF_PROG_TYPE_LSM)
* Unmerged path tools/lib/bpf/bpf.c
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/lib/bpf/libbpf.map
