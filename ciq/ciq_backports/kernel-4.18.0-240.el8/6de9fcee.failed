mlxsw: spectrum_trap: Lookup and pass cookie down to devlink_trap_report()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit 6de9fceeaa654a5470627817f7800aa849dd4489
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6de9fcee.failed

Use the cookie index received along with the packet to lookup original
flow_offload cookie binary and pass it down to devlink_trap_report().
Add "fa_cookie" metadata to the ACL trap.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6de9fceeaa654a5470627817f7800aa849dd4489)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
index 6d6a29fdad47,9c300d625e04..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
@@@ -92,6 -135,17 +121,20 @@@ static void mlxsw_sp_rx_exception_liste
  			     DEVLINK_TRAP_GROUP_GENERIC(_group_id),	      \
  			     MLXSW_SP_TRAP_METADATA)
  
++<<<<<<< HEAD
++=======
+ #define MLXSW_SP_TRAP_DROP_EXT(_id, _group_id, _metadata)		      \
+ 	DEVLINK_TRAP_GENERIC(DROP, DROP, _id,				      \
+ 			     DEVLINK_TRAP_GROUP_GENERIC(_group_id),	      \
+ 			     MLXSW_SP_TRAP_METADATA | (_metadata))
+ 
+ #define MLXSW_SP_TRAP_DRIVER_DROP(_id, _group_id)			      \
+ 	DEVLINK_TRAP_DRIVER(DROP, DROP, DEVLINK_MLXSW_TRAP_ID_##_id,	      \
+ 			    DEVLINK_MLXSW_TRAP_NAME_##_id,		      \
+ 			    DEVLINK_TRAP_GROUP_GENERIC(_group_id),	      \
+ 			    MLXSW_SP_TRAP_METADATA)
+ 
++>>>>>>> 6de9fceeaa65 (mlxsw: spectrum_trap: Lookup and pass cookie down to devlink_trap_report())
  #define MLXSW_SP_TRAP_EXCEPTION(_id, _group_id)		      \
  	DEVLINK_TRAP_GENERIC(EXCEPTION, TRAP, _id,			      \
  			     DEVLINK_TRAP_GROUP_GENERIC(_group_id),	      \
@@@ -102,6 -156,11 +145,14 @@@
  		      TRAP_EXCEPTION_TO_CPU, false, SP_##_group_id,	      \
  		      SET_FW_DEFAULT, SP_##_group_id)
  
++<<<<<<< HEAD
++=======
+ #define MLXSW_SP_RXL_ACL_DISCARD(_id, _en_group_id, _dis_group_id)	      \
+ 	MLXSW_RXL_DIS(mlxsw_sp_rx_acl_drop_listener, DISCARD_##_id,	      \
+ 		      TRAP_EXCEPTION_TO_CPU, false, SP_##_en_group_id,	      \
+ 		      SET_FW_DEFAULT, SP_##_dis_group_id)
+ 
++>>>>>>> 6de9fceeaa65 (mlxsw: spectrum_trap: Lookup and pass cookie down to devlink_trap_report())
  #define MLXSW_SP_RXL_EXCEPTION(_id, _group_id, _action)			      \
  	MLXSW_RXL(mlxsw_sp_rx_exception_listener, _id,			      \
  		   _action, false, SP_##_group_id, SET_FW_DEFAULT)
@@@ -130,6 -189,15 +181,18 @@@ static const struct devlink_trap mlxsw_
  	MLXSW_SP_TRAP_EXCEPTION(UNRESOLVED_NEIGH, L3_DROPS),
  	MLXSW_SP_TRAP_EXCEPTION(IPV4_LPM_UNICAST_MISS, L3_DROPS),
  	MLXSW_SP_TRAP_EXCEPTION(IPV6_LPM_UNICAST_MISS, L3_DROPS),
++<<<<<<< HEAD
++=======
+ 	MLXSW_SP_TRAP_DRIVER_DROP(IRIF_DISABLED, L3_DROPS),
+ 	MLXSW_SP_TRAP_DRIVER_DROP(ERIF_DISABLED, L3_DROPS),
+ 	MLXSW_SP_TRAP_DROP(NON_ROUTABLE, L3_DROPS),
+ 	MLXSW_SP_TRAP_EXCEPTION(DECAP_ERROR, TUNNEL_DROPS),
+ 	MLXSW_SP_TRAP_DROP(OVERLAY_SMAC_MC, TUNNEL_DROPS),
+ 	MLXSW_SP_TRAP_DROP_EXT(INGRESS_FLOW_ACTION_DROP, ACL_DROPS,
+ 			       DEVLINK_TRAP_METADATA_TYPE_F_FA_COOKIE),
+ 	MLXSW_SP_TRAP_DROP_EXT(EGRESS_FLOW_ACTION_DROP, ACL_DROPS,
+ 			       DEVLINK_TRAP_METADATA_TYPE_F_FA_COOKIE),
++>>>>>>> 6de9fceeaa65 (mlxsw: spectrum_trap: Lookup and pass cookie down to devlink_trap_report())
  };
  
  static const struct mlxsw_listener mlxsw_sp_listeners_arr[] = {
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c b/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c
index 49f112ff5d12..a2af128a306d 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c
@@ -769,6 +769,22 @@ static void mlxsw_afa_cookie_put(struct mlxsw_afa *mlxsw_afa,
 	mlxsw_afa_cookie_destroy(mlxsw_afa, cookie);
 }
 
+/* RCU read lock must be held */
+const struct flow_action_cookie *
+mlxsw_afa_cookie_lookup(struct mlxsw_afa *mlxsw_afa, u32 cookie_index)
+{
+	struct mlxsw_afa_cookie *cookie;
+
+	/* 0 index means no cookie */
+	if (!cookie_index)
+		return NULL;
+	cookie = idr_find(&mlxsw_afa->cookie_idr, cookie_index);
+	if (!cookie)
+		return NULL;
+	return &cookie->fa_cookie;
+}
+EXPORT_SYMBOL(mlxsw_afa_cookie_lookup);
+
 struct mlxsw_afa_cookie_ref {
 	struct mlxsw_afa_resource resource;
 	struct mlxsw_afa_cookie *cookie;
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.h b/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.h
index 67473f8bd12b..5f4c1e505136 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.h
@@ -43,6 +43,8 @@ int mlxsw_afa_block_activity_get(struct mlxsw_afa_block *block, bool *activity);
 int mlxsw_afa_block_continue(struct mlxsw_afa_block *block);
 int mlxsw_afa_block_jump(struct mlxsw_afa_block *block, u16 group_id);
 int mlxsw_afa_block_terminate(struct mlxsw_afa_block *block);
+const struct flow_action_cookie *
+mlxsw_afa_cookie_lookup(struct mlxsw_afa *mlxsw_afa, u32 cookie_index);
 int mlxsw_afa_block_append_drop(struct mlxsw_afa_block *block, bool ingress,
 				const struct flow_action_cookie *fa_cookie,
 				struct netlink_ext_ack *extack);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index 8358950a64fd..29b075e0505c 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@ -780,6 +780,12 @@ int mlxsw_sp_acl_rule_get_stats(struct mlxsw_sp *mlxsw_sp,
 
 struct mlxsw_sp_fid *mlxsw_sp_acl_dummy_fid(struct mlxsw_sp *mlxsw_sp);
 
+static inline const struct flow_action_cookie *
+mlxsw_sp_acl_act_cookie_lookup(struct mlxsw_sp *mlxsw_sp, u32 cookie_index)
+{
+	return mlxsw_afa_cookie_lookup(mlxsw_sp->afa, cookie_index);
+}
+
 int mlxsw_sp_acl_init(struct mlxsw_sp *mlxsw_sp);
 void mlxsw_sp_acl_fini(struct mlxsw_sp *mlxsw_sp);
 u32 mlxsw_sp_acl_region_rehash_intrvl_get(struct mlxsw_sp *mlxsw_sp);
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
