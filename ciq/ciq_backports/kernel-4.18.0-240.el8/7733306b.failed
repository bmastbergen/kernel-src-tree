KVM: arm64: Annotate hyp NMI-related functions as __always_inline

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexandru Elisei <alexandru.elisei@arm.com>
commit 7733306bd593c737c63110175da6c35b4b8bb32c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7733306b.failed

The "inline" keyword is a hint for the compiler to inline a function.  The
functions system_uses_irq_prio_masking() and gic_write_pmr() are used by
the code running at EL2 on a non-VHE system, so mark them as
__always_inline to make sure they'll always be part of the .hyp.text
section.

This fixes the following splat when trying to run a VM:

[   47.625273] Kernel panic - not syncing: HYP panic:
[   47.625273] PS:a00003c9 PC:0000ca0b42049fc4 ESR:86000006
[   47.625273] FAR:0000ca0b42049fc4 HPFAR:0000000010001000 PAR:0000000000000000
[   47.625273] VCPU:0000000000000000
[   47.647261] CPU: 1 PID: 217 Comm: kvm-vcpu-0 Not tainted 5.8.0-rc1-ARCH+ #61
[   47.654508] Hardware name: Globalscale Marvell ESPRESSOBin Board (DT)
[   47.661139] Call trace:
[   47.663659]  dump_backtrace+0x0/0x1cc
[   47.667413]  show_stack+0x18/0x24
[   47.670822]  dump_stack+0xb8/0x108
[   47.674312]  panic+0x124/0x2f4
[   47.677446]  panic+0x0/0x2f4
[   47.680407] SMP: stopping secondary CPUs
[   47.684439] Kernel Offset: disabled
[   47.688018] CPU features: 0x240402,20002008
[   47.692318] Memory Limit: none
[   47.695465] ---[ end Kernel panic - not syncing: HYP panic:
[   47.695465] PS:a00003c9 PC:0000ca0b42049fc4 ESR:86000006
[   47.695465] FAR:0000ca0b42049fc4 HPFAR:0000000010001000 PAR:0000000000000000
[   47.695465] VCPU:0000000000000000 ]---

The instruction abort was caused by the code running at EL2 trying to fetch
an instruction which wasn't mapped in the EL2 translation tables. Using
objdump showed the two functions as separate symbols in the .text section.

Fixes: 85738e05dc38 ("arm64: kvm: Unmask PMR before entering guest")
	Cc: stable@vger.kernel.org
	Signed-off-by: Alexandru Elisei <alexandru.elisei@arm.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
	Acked-by: James Morse <james.morse@arm.com>
Link: https://lore.kernel.org/r/20200618171254.1596055-1-alexandru.elisei@arm.com
(cherry picked from commit 7733306bd593c737c63110175da6c35b4b8bb32c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/arch_gicv3.h
#	arch/arm64/include/asm/cpufeature.h
diff --cc arch/arm64/include/asm/arch_gicv3.h
index 9460b531cc76,6647ae4f0231..000000000000
--- a/arch/arm64/include/asm/arch_gicv3.h
+++ b/arch/arm64/include/asm/arch_gicv3.h
@@@ -115,6 -104,21 +115,24 @@@ static inline void gic_write_bpr1(u32 v
  	write_sysreg_s(val, SYS_ICC_BPR1_EL1);
  }
  
++<<<<<<< HEAD
++=======
+ static inline u32 gic_read_pmr(void)
+ {
+ 	return read_sysreg_s(SYS_ICC_PMR_EL1);
+ }
+ 
+ static __always_inline void gic_write_pmr(u32 val)
+ {
+ 	write_sysreg_s(val, SYS_ICC_PMR_EL1);
+ }
+ 
+ static inline u32 gic_read_rpr(void)
+ {
+ 	return read_sysreg_s(SYS_ICC_RPR_EL1);
+ }
+ 
++>>>>>>> 7733306bd593 (KVM: arm64: Annotate hyp NMI-related functions as __always_inline)
  #define gic_read_typer(c)		readq_relaxed(c)
  #define gic_write_irouter(v, c)		writeq_relaxed(v, c)
  #define gic_read_lpir(c)		readq_relaxed(c)
diff --cc arch/arm64/include/asm/cpufeature.h
index 5f8305679e3c,f7c3d1ff091d..000000000000
--- a/arch/arm64/include/asm/cpufeature.h
+++ b/arch/arm64/include/asm/cpufeature.h
@@@ -625,6 -663,35 +625,38 @@@ static inline bool system_supports_cnp(
  		cpus_have_const_cap(ARM64_HAS_CNP);
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool system_supports_address_auth(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_PTR_AUTH) &&
+ 		cpus_have_const_cap(ARM64_HAS_ADDRESS_AUTH);
+ }
+ 
+ static inline bool system_supports_generic_auth(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_PTR_AUTH) &&
+ 		cpus_have_const_cap(ARM64_HAS_GENERIC_AUTH);
+ }
+ 
+ static __always_inline bool system_uses_irq_prio_masking(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_PSEUDO_NMI) &&
+ 	       cpus_have_const_cap(ARM64_HAS_IRQ_PRIO_MASKING);
+ }
+ 
+ static inline bool system_has_prio_mask_debugging(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_DEBUG_PRIORITY_MASKING) &&
+ 	       system_uses_irq_prio_masking();
+ }
+ 
+ static inline bool system_supports_bti(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_BTI) && cpus_have_const_cap(ARM64_BTI);
+ }
+ 
++>>>>>>> 7733306bd593 (KVM: arm64: Annotate hyp NMI-related functions as __always_inline)
  #define ARM64_BP_HARDEN_UNKNOWN		-1
  #define ARM64_BP_HARDEN_WA_NEEDED	0
  #define ARM64_BP_HARDEN_NOT_REQUIRED	1
* Unmerged path arch/arm64/include/asm/arch_gicv3.h
* Unmerged path arch/arm64/include/asm/cpufeature.h
