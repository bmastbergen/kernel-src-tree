cxgb4/chcr: complete record tx handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rohit Maheshwari <rohitm@chelsio.com>
commit 5a4b9fe7fece62ecab6fb28fe92362f83b41c33e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5a4b9fe7.failed

Added tx handling in this patch. This includes handling of segments
contain single complete record.

v1->v2:
- chcr_write_cpl_set_tcb_ulp is added in this patch.

v3->v4:
- mss calculation logic.
- replaced kfree_skb with dev_kfree_skb_any.
- corrected error message reported by kbuild test robot <lkp@intel.com>

	Signed-off-by: Rohit Maheshwari <rohitm@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5a4b9fe7fece62ecab6fb28fe92362f83b41c33e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chcr_common.h
#	drivers/crypto/chelsio/chcr_core.h
#	drivers/crypto/chelsio/chcr_ktls.c
#	drivers/crypto/chelsio/chcr_ktls.h
#	drivers/net/ethernet/chelsio/cxgb4/t4_tcb.h
diff --cc drivers/crypto/chelsio/chcr_core.h
index b41ef1abfe74,b5b371b8d343..000000000000
--- a/drivers/crypto/chelsio/chcr_core.h
+++ b/drivers/crypto/chelsio/chcr_core.h
@@@ -223,4 -222,11 +223,14 @@@ int chcr_handle_resp(struct crypto_asyn
  		     int err);
  int chcr_ipsec_xmit(struct sk_buff *skb, struct net_device *dev);
  void chcr_add_xfrmops(const struct cxgb4_lld_info *lld);
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CHELSIO_TLS_DEVICE
+ void chcr_enable_ktls(struct adapter *adap);
+ void chcr_disable_ktls(struct adapter *adap);
+ int chcr_ktls_cpl_act_open_rpl(struct adapter *adap, unsigned char *input);
+ int chcr_ktls_cpl_set_tcb_rpl(struct adapter *adap, unsigned char *input);
+ int chcr_ktls_xmit(struct sk_buff *skb, struct net_device *dev);
+ #endif
++>>>>>>> 5a4b9fe7fece (cxgb4/chcr: complete record tx handling)
  #endif /* __CHCR_CORE_H__ */
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_tcb.h
index 1b9afb192f7f,50232e063f49..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_tcb.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_tcb.h
@@@ -69,7 -74,41 +69,44 @@@
  #define TCB_RTT_TS_RECENT_AGE_M		0xffffffffULL
  #define TCB_RTT_TS_RECENT_AGE_V(x)	((x) << TCB_RTT_TS_RECENT_AGE_S)
  
+ #define TCB_T_RTSEQ_RECENT_W    7
+ #define TCB_T_RTSEQ_RECENT_S    0
+ #define TCB_T_RTSEQ_RECENT_M    0xffffffffULL
+ #define TCB_T_RTSEQ_RECENT_V(x) ((x) << TCB_T_RTSEQ_RECENT_S)
+ 
+ #define TCB_TX_MAX_W		9
+ #define TCB_TX_MAX_S		0
+ #define TCB_TX_MAX_M		0xffffffffULL
+ #define TCB_TX_MAX_V(x)		((x) << TCB_TX_MAX_S)
+ 
  #define TCB_SND_UNA_RAW_W	10
++<<<<<<< HEAD
++=======
+ #define TCB_SND_UNA_RAW_S	0
+ #define TCB_SND_UNA_RAW_M	0xfffffffULL
+ #define TCB_SND_UNA_RAW_V(x)	((x) << TCB_SND_UNA_RAW_S)
+ 
+ #define TCB_SND_NXT_RAW_W	10
+ #define TCB_SND_NXT_RAW_S	28
+ #define TCB_SND_NXT_RAW_M	0xfffffffULL
+ #define TCB_SND_NXT_RAW_V(x)	((x) << TCB_SND_NXT_RAW_S)
+ 
+ #define TCB_SND_MAX_RAW_W	11
+ #define TCB_SND_MAX_RAW_S	24
+ #define TCB_SND_MAX_RAW_M	0xfffffffULL
+ #define TCB_SND_MAX_RAW_V(x)	((x) << TCB_SND_MAX_RAW_S)
+ 
+ #define TCB_RCV_NXT_W		16
+ #define TCB_RCV_NXT_S		10
+ #define TCB_RCV_NXT_M		0xffffffffULL
+ #define TCB_RCV_NXT_V(x)	((x) << TCB_RCV_NXT_S)
+ 
+ #define TCB_RCV_WND_W		17
+ #define TCB_RCV_WND_S		10
+ #define TCB_RCV_WND_M		0xffffffULL
+ #define TCB_RCV_WND_V(x)	((x) << TCB_RCV_WND_S)
+ 
++>>>>>>> 5a4b9fe7fece (cxgb4/chcr: complete record tx handling)
  #define TCB_RX_FRAG2_PTR_RAW_W	27
  #define TCB_RX_FRAG3_LEN_RAW_W	29
  #define TCB_RX_FRAG3_START_IDX_OFFSET_RAW_W	30
* Unmerged path drivers/crypto/chelsio/chcr_common.h
* Unmerged path drivers/crypto/chelsio/chcr_ktls.c
* Unmerged path drivers/crypto/chelsio/chcr_ktls.h
* Unmerged path drivers/crypto/chelsio/chcr_common.h
diff --git a/drivers/crypto/chelsio/chcr_core.c b/drivers/crypto/chelsio/chcr_core.c
index 850a3f4e837b..8147c7e6260f 100644
--- a/drivers/crypto/chelsio/chcr_core.c
+++ b/drivers/crypto/chelsio/chcr_core.c
@@ -45,9 +45,9 @@ static struct cxgb4_uld_info chcr_uld_info = {
 	.add = chcr_uld_add,
 	.state_change = chcr_uld_state_change,
 	.rx_handler = chcr_uld_rx_handler,
-#ifdef CONFIG_CHELSIO_IPSEC_INLINE
+#if defined(CONFIG_CHELSIO_IPSEC_INLINE) || defined(CONFIG_CHELSIO_TLS_DEVICE)
 	.tx_handler = chcr_uld_tx_handler,
-#endif /* CONFIG_CHELSIO_IPSEC_INLINE */
+#endif /* CONFIG_CHELSIO_IPSEC_INLINE || CONFIG_CHELSIO_TLS_DEVICE */
 };
 
 static void detach_work_fn(struct work_struct *work)
@@ -227,12 +227,22 @@ int chcr_uld_rx_handler(void *handle, const __be64 *rsp,
 	return 0;
 }
 
-#ifdef CONFIG_CHELSIO_IPSEC_INLINE
+#if defined(CONFIG_CHELSIO_IPSEC_INLINE) || defined(CONFIG_CHELSIO_TLS_DEVICE)
 int chcr_uld_tx_handler(struct sk_buff *skb, struct net_device *dev)
 {
+	/* In case if skb's decrypted bit is set, it's nic tls packet, else it's
+	 * ipsec packet.
+	 */
+#ifdef CONFIG_CHELSIO_TLS_DEVICE
+	if (skb->decrypted)
+		return chcr_ktls_xmit(skb, dev);
+#endif
+#ifdef CONFIG_CHELSIO_IPSEC_INLINE
 	return chcr_ipsec_xmit(skb, dev);
+#endif
+	return 0;
 }
-#endif /* CONFIG_CHELSIO_IPSEC_INLINE */
+#endif /* CONFIG_CHELSIO_IPSEC_INLINE || CONFIG_CHELSIO_TLS_DEVICE */
 
 static void chcr_detach_device(struct uld_ctx *u_ctx)
 {
* Unmerged path drivers/crypto/chelsio/chcr_core.h
* Unmerged path drivers/crypto/chelsio/chcr_ktls.c
* Unmerged path drivers/crypto/chelsio/chcr_ktls.h
diff --git a/drivers/net/ethernet/chelsio/cxgb4/sge.c b/drivers/net/ethernet/chelsio/cxgb4/sge.c
index c73afc9238dd..630c5acdb6c7 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@ -1418,6 +1418,11 @@ static netdev_tx_t cxgb4_eth_xmit(struct sk_buff *skb, struct net_device *dev)
 		return adap->uld[CXGB4_ULD_CRYPTO].tx_handler(skb, dev);
 #endif /* CHELSIO_IPSEC_INLINE */
 
+#ifdef CONFIG_CHELSIO_TLS_DEVICE
+	if (skb->decrypted)
+		return adap->uld[CXGB4_ULD_CRYPTO].tx_handler(skb, dev);
+#endif /* CHELSIO_TLS_DEVICE */
+
 	qidx = skb_get_queue_mapping(skb);
 	if (ptp_enabled) {
 		spin_lock(&adap->ptp_lock);
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h b/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
index 575c6abcdae7..8937712778e7 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
@@ -47,6 +47,7 @@ enum {
 	CPL_CLOSE_LISTSRV_REQ = 0x9,
 	CPL_ABORT_REQ         = 0xA,
 	CPL_ABORT_RPL         = 0xB,
+	CPL_TX_DATA           = 0xC,
 	CPL_RX_DATA_ACK       = 0xD,
 	CPL_TX_PKT            = 0xE,
 	CPL_L2T_WRITE_REQ     = 0x12,
@@ -1462,6 +1463,16 @@ struct cpl_tx_data {
 #define TX_FORCE_S	13
 #define TX_FORCE_V(x)	((x) << TX_FORCE_S)
 
+#define TX_DATA_MSS_S    16
+#define TX_DATA_MSS_M    0xFFFF
+#define TX_DATA_MSS_V(x) ((x) << TX_DATA_MSS_S)
+#define TX_DATA_MSS_G(x) (((x) >> TX_DATA_MSS_S) & TX_DATA_MSS_M)
+
+#define TX_LENGTH_S    0
+#define TX_LENGTH_M    0xFFFF
+#define TX_LENGTH_V(x) ((x) << TX_LENGTH_S)
+#define TX_LENGTH_G(x) (((x) >> TX_LENGTH_S) & TX_LENGTH_M)
+
 #define T6_TX_FORCE_S		20
 #define T6_TX_FORCE_V(x)	((x) << T6_TX_FORCE_S)
 #define T6_TX_FORCE_F		T6_TX_FORCE_V(1U)
@@ -1471,6 +1482,15 @@ struct cpl_tx_data {
 
 #define TX_SHOVE_S    14
 #define TX_SHOVE_V(x) ((x) << TX_SHOVE_S)
+#define TX_SHOVE_F    TX_SHOVE_V(1U)
+
+#define TX_BYPASS_S    21
+#define TX_BYPASS_V(x) ((x) << TX_BYPASS_S)
+#define TX_BYPASS_F    TX_BYPASS_V(1U)
+
+#define TX_PUSH_S    22
+#define TX_PUSH_V(x) ((x) << TX_PUSH_S)
+#define TX_PUSH_F    TX_PUSH_V(1U)
 
 #define TX_ULP_MODE_S    10
 #define TX_ULP_MODE_M    0x7
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_tcb.h
