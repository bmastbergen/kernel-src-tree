sched/fair: Optimize select_idle_cpu

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Cheng Jian <cj.chengjian@huawei.com>
commit 60588bfa223ff675b95f866249f90616613fbe31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/60588bfa.failed

select_idle_cpu() will scan the LLC domain for idle CPUs,
it's always expensive. so the next commit :

	1ad3aaf3fcd2 ("sched/core: Implement new approach to scale select_idle_cpu()")

introduces a way to limit how many CPUs we scan.

But it consume some CPUs out of 'nr' that are not allowed
for the task and thus waste our attempts. The function
always return nr_cpumask_bits, and we can't find a CPU
which our task is allowed to run.

Cpumask may be too big, similar to select_idle_core(), use
per_cpu_ptr 'select_idle_mask' to prevent stack overflow.

Fixes: 1ad3aaf3fcd2 ("sched/core: Implement new approach to scale select_idle_cpu()")
	Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
	Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
Link: https://lkml.kernel.org/r/20191213024530.28052-1-cj.chengjian@huawei.com
(cherry picked from commit 60588bfa223ff675b95f866249f90616613fbe31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 18d7b6f2200a,280d54ccb4be..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -5912,18 -5858,20 +5913,24 @@@ static int select_idle_cpu(struct task_
  			nr = 4;
  	}
  
 -	time = cpu_clock(this);
 +	time = local_clock();
  
- 	for_each_cpu_wrap(cpu, sched_domain_span(sd), target) {
+ 	cpumask_and(cpus, sched_domain_span(sd), p->cpus_ptr);
+ 
+ 	for_each_cpu_wrap(cpu, cpus, target) {
  		if (!--nr)
++<<<<<<< HEAD
 +			return -1;
 +		if (!cpumask_test_cpu(cpu, &p->cpus_allowed))
 +			continue;
++=======
+ 			return si_cpu;
++>>>>>>> 60588bfa223f (sched/fair: Optimize select_idle_cpu)
  		if (available_idle_cpu(cpu))
  			break;
 -		if (si_cpu == -1 && sched_idle_cpu(cpu))
 -			si_cpu = cpu;
  	}
  
 -	time = cpu_clock(this) - time;
 +	time = local_clock() - time;
  	cost = this_sd->avg_scan_cost;
  	delta = (s64)(time - cost) / 8;
  	this_sd->avg_scan_cost += delta;
* Unmerged path kernel/sched/fair.c
