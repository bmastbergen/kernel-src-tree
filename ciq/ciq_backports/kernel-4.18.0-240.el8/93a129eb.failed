net: sched: expose HW stats types per action used by drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit 93a129eb8c520b032e1823447b2e1badcc650666
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/93a129eb.failed

It may be up to the driver (in case ANY HW stats is passed) to select
which type of HW stats he is going to use. Add an infrastructure to
expose this information to user.

$ tc filter add dev enp3s0np1 ingress proto ip handle 1 pref 1 flower dst_ip 192.168.1.1 action drop
$ tc -s filter show dev enp3s0np1 ingress
filter protocol ip pref 1 flower chain 0
filter protocol ip pref 1 flower chain 0 handle 0x1
  eth_type ipv4
  dst_ip 192.168.1.1
  in_hw in_hw_count 2
        action order 1: gact action drop
         random type none pass val 0
         index 1 ref 1 bind 1 installed 10 sec used 10 sec
        Action statistics:
        Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)
        backlog 0b 0p requeues 0
        used_hw_stats immediate     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 93a129eb8c520b032e1823447b2e1badcc650666)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_matchall.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
#	drivers/net/ethernet/mscc/ocelot_flower.c
#	include/net/act_api.h
#	include/uapi/linux/pkt_cls.h
#	net/sched/act_api.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 130ef1fe0993,438128dde187..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -3966,7 -4468,9 +3966,13 @@@ int mlx5e_stats_flower(struct net_devic
  no_peer_counter:
  	mlx5_devcom_release_peer_data(devcom, MLX5_DEVCOM_ESW_OFFLOADS);
  out:
++<<<<<<< HEAD
 +	flow_stats_update(&f->stats, bytes, packets, lastuse);
++=======
+ 	flow_stats_update(&f->stats, bytes, packets, lastuse,
+ 			  FLOW_ACTION_HW_STATS_DELAYED);
+ 	trace_mlx5e_stats_flower(f);
++>>>>>>> 93a129eb8c52 (net: sched: expose HW stats types per action used by drivers)
  errout:
  	mlx5e_flow_put(priv, flow);
  	return err;
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
index 84a87d059333,67ee880a8727..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
@@@ -822,11 -977,14 +823,22 @@@ int mlxsw_sp_acl_rule_get_stats(struct 
  	int err;
  
  	rulei = mlxsw_sp_acl_rule_rulei(rule);
++<<<<<<< HEAD
 +	err = mlxsw_sp_flow_counter_get(mlxsw_sp, rulei->counter_index,
 +					&current_packets, &current_bytes);
 +	if (err)
 +		return err;
 +
++=======
+ 	if (rulei->counter_valid) {
+ 		err = mlxsw_sp_flow_counter_get(mlxsw_sp, rulei->counter_index,
+ 						&current_packets,
+ 						&current_bytes);
+ 		if (err)
+ 			return err;
+ 		*used_hw_stats = FLOW_ACTION_HW_STATS_IMMEDIATE;
+ 	}
++>>>>>>> 93a129eb8c52 (net: sched: expose HW stats types per action used by drivers)
  	*packets = current_packets - rule->last_packets;
  	*bytes = current_bytes - rule->last_bytes;
  	*last_use = rule->last_used;
diff --cc include/net/act_api.h
index 41337c7fc728,c24d7643548e..000000000000
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@@ -41,7 -41,9 +41,13 @@@ struct tc_action 
  	struct tc_cookie	__rcu *act_cookie;
  	struct tcf_chain	__rcu *goto_chain;
  	u32			tcfa_flags;
++<<<<<<< HEAD
 +	u8			hw_stats_type;
++=======
+ 	u8			hw_stats;
+ 	u8			used_hw_stats;
+ 	bool			used_hw_stats_valid;
++>>>>>>> 93a129eb8c52 (net: sched: expose HW stats types per action used by drivers)
  };
  #define tcf_index	common.tcfa_index
  #define tcf_refcnt	common.tcfa_refcnt
diff --cc include/uapi/linux/pkt_cls.h
index 7f8a995aee63,9f06d29cab70..000000000000
--- a/include/uapi/linux/pkt_cls.h
+++ b/include/uapi/linux/pkt_cls.h
@@@ -17,7 -17,8 +17,12 @@@ enum 
  	TCA_ACT_PAD,
  	TCA_ACT_COOKIE,
  	TCA_ACT_FLAGS,
++<<<<<<< HEAD
 +	TCA_ACT_HW_STATS_TYPE,
++=======
+ 	TCA_ACT_HW_STATS,
+ 	TCA_ACT_USED_HW_STATS,
++>>>>>>> 93a129eb8c52 (net: sched: expose HW stats types per action used by drivers)
  	__TCA_ACT_MAX
  };
  
diff --cc net/sched/act_api.c
index dcc177a4e783,df4560909157..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -795,24 -789,20 +795,36 @@@ tcf_action_dump_1(struct sk_buff *skb, 
  	}
  	rcu_read_unlock();
  
 -	if (a->hw_stats != TCA_ACT_HW_STATS_ANY &&
 -	    nla_put_bitfield32(skb, TCA_ACT_HW_STATS,
 -			       a->hw_stats, TCA_ACT_HW_STATS_ANY))
 -		goto nla_put_failure;
 +	if (a->hw_stats_type != TCA_ACT_HW_STATS_TYPE_ANY) {
 +		struct nla_bitfield32 hw_stats_type = {
 +			a->hw_stats_type,
 +			TCA_ACT_HW_STATS_TYPE_ANY,
 +		};
 +
++<<<<<<< HEAD
 +		if (nla_put(skb, TCA_ACT_HW_STATS_TYPE, sizeof(hw_stats_type),
 +			    &hw_stats_type))
 +			goto nla_put_failure;
 +	}
 +
 +	if (a->tcfa_flags) {
 +		struct nla_bitfield32 flags = { a->tcfa_flags,
 +						a->tcfa_flags, };
  
 +		if (nla_put(skb, TCA_ACT_FLAGS, sizeof(flags), &flags))
 +			goto nla_put_failure;
 +	}
++=======
+ 	if (a->used_hw_stats_valid &&
+ 	    nla_put_bitfield32(skb, TCA_ACT_USED_HW_STATS,
+ 			       a->used_hw_stats, TCA_ACT_HW_STATS_ANY))
+ 		goto nla_put_failure;
+ 
+ 	if (a->tcfa_flags &&
+ 	    nla_put_bitfield32(skb, TCA_ACT_FLAGS,
+ 			       a->tcfa_flags, a->tcfa_flags))
+ 		goto nla_put_failure;
++>>>>>>> 93a129eb8c52 (net: sched: expose HW stats types per action used by drivers)
  
  	nest = nla_nest_start_noflag(skb, TCA_OPTIONS);
  	if (nest == NULL)
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_matchall.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_flower.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c b/drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c
index 9bec256b0934..724777f7c74a 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c
@@ -1634,7 +1634,7 @@ static int bnxt_tc_get_flow_stats(struct bnxt *bp,
 	spin_unlock(&flow->stats_lock);
 
 	flow_stats_update(&tc_flow_cmd->stats, stats.bytes, stats.packets,
-			  lastused);
+			  lastused, FLOW_ACTION_HW_STATS_DELAYED);
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_flower.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_flower.c
index e447976bdd3e..c8496c1a20b7 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_flower.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_flower.c
@@ -812,7 +812,8 @@ int cxgb4_tc_flower_stats(struct net_device *dev,
 			ofld_stats->last_used = jiffies;
 		flow_stats_update(&cls->stats, bytes - ofld_stats->byte_count,
 				  packets - ofld_stats->packet_count,
-				  ofld_stats->last_used);
+				  ofld_stats->last_used,
+				  FLOW_ACTION_HW_STATS_IMMEDIATE);
 
 		ofld_stats->packet_count = packets;
 		ofld_stats->byte_count = bytes;
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_matchall.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index 209b2f4c4707..e8910f1fe9a2 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@ -754,7 +754,8 @@ struct mlxsw_sp_acl_rule_info *
 mlxsw_sp_acl_rule_rulei(struct mlxsw_sp_acl_rule *rule);
 int mlxsw_sp_acl_rule_get_stats(struct mlxsw_sp *mlxsw_sp,
 				struct mlxsw_sp_acl_rule *rule,
-				u64 *packets, u64 *bytes, u64 *last_use);
+				u64 *packets, u64 *bytes, u64 *last_use,
+				enum flow_action_hw_stats *used_hw_stats);
 
 struct mlxsw_sp_fid *mlxsw_sp_acl_dummy_fid(struct mlxsw_sp *mlxsw_sp);
 
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_flower.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum_flower.c
index 95387525a11b..260d55e4d9b1 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_flower.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_flower.c
@@ -506,6 +506,7 @@ int mlxsw_sp_flower_stats(struct mlxsw_sp *mlxsw_sp,
 			  struct mlxsw_sp_acl_block *block,
 			  struct flow_cls_offload *f)
 {
+	enum flow_action_hw_stats used_hw_stats = FLOW_ACTION_HW_STATS_DISABLED;
 	struct mlxsw_sp_acl_ruleset *ruleset;
 	struct mlxsw_sp_acl_rule *rule;
 	u64 packets;
@@ -524,11 +525,11 @@ int mlxsw_sp_flower_stats(struct mlxsw_sp *mlxsw_sp,
 		return -EINVAL;
 
 	err = mlxsw_sp_acl_rule_get_stats(mlxsw_sp, rule, &packets, &bytes,
-					  &lastuse);
+					  &lastuse, &used_hw_stats);
 	if (err)
 		goto err_rule_get_stats;
 
-	flow_stats_update(&f->stats, bytes, packets, lastuse);
+	flow_stats_update(&f->stats, bytes, packets, lastuse, used_hw_stats);
 
 	mlxsw_sp_acl_ruleset_put(mlxsw_sp, ruleset);
 	return 0;
* Unmerged path drivers/net/ethernet/mscc/ocelot_flower.c
diff --git a/drivers/net/ethernet/netronome/nfp/flower/offload.c b/drivers/net/ethernet/netronome/nfp/flower/offload.c
index 987ae221f6be..0476744dc4ae 100644
--- a/drivers/net/ethernet/netronome/nfp/flower/offload.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/offload.c
@@ -1418,7 +1418,8 @@ nfp_flower_get_stats(struct nfp_app *app, struct net_device *netdev,
 		nfp_flower_update_merge_stats(app, nfp_flow);
 
 	flow_stats_update(&flow->stats, priv->stats[ctx_id].bytes,
-			  priv->stats[ctx_id].pkts, priv->stats[ctx_id].used);
+			  priv->stats[ctx_id].pkts, priv->stats[ctx_id].used,
+			  FLOW_ACTION_HW_STATS_DELAYED);
 
 	priv->stats[ctx_id].pkts = 0;
 	priv->stats[ctx_id].bytes = 0;
diff --git a/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c b/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
index 124a43dc136a..d18a830e4264 100644
--- a/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
@@ -320,7 +320,8 @@ nfp_flower_stats_rate_limiter(struct nfp_app *app, struct net_device *netdev,
 	spin_unlock_bh(&fl_priv->qos_stats_lock);
 
 	flow_stats_update(&flow->stats, diff_bytes, diff_pkts,
-			  repr_priv->qos_table.last_update);
+			  repr_priv->qos_table.last_update,
+			  FLOW_ACTION_HW_STATS_DELAYED);
 	return 0;
 }
 
* Unmerged path include/net/act_api.h
diff --git a/include/net/flow_offload.h b/include/net/flow_offload.h
index 8e8fd14301d6..15b8ab741bf3 100644
--- a/include/net/flow_offload.h
+++ b/include/net/flow_offload.h
@@ -280,14 +280,24 @@ struct flow_stats {
 	u64	pkts;
 	u64	bytes;
 	u64	lastused;
+	enum flow_action_hw_stats used_hw_stats;
+	bool used_hw_stats_valid;
 };
 
 static inline void flow_stats_update(struct flow_stats *flow_stats,
-				     u64 bytes, u64 pkts, u64 lastused)
+				     u64 bytes, u64 pkts, u64 lastused,
+				     enum flow_action_hw_stats used_hw_stats)
 {
 	flow_stats->pkts	+= pkts;
 	flow_stats->bytes	+= bytes;
 	flow_stats->lastused	= max_t(u64, flow_stats->lastused, lastused);
+
+	/* The driver should pass value with a maximum of one bit set.
+	 * Passing FLOW_ACTION_HW_STATS_ANY is invalid.
+	 */
+	WARN_ON(used_hw_stats == FLOW_ACTION_HW_STATS_ANY);
+	flow_stats->used_hw_stats |= used_hw_stats;
+	flow_stats->used_hw_stats_valid = true;
 }
 
 enum flow_block_command {
diff --git a/include/net/pkt_cls.h b/include/net/pkt_cls.h
index 91a6568c2f30..936220802b99 100644
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@ -262,7 +262,8 @@ static inline void tcf_exts_put_net(struct tcf_exts *exts)
 
 static inline void
 tcf_exts_stats_update(const struct tcf_exts *exts,
-		      u64 bytes, u64 packets, u64 lastuse)
+		      u64 bytes, u64 packets, u64 lastuse,
+		      u8 used_hw_stats, bool used_hw_stats_valid)
 {
 #ifdef CONFIG_NET_CLS_ACT
 	int i;
@@ -273,6 +274,8 @@ tcf_exts_stats_update(const struct tcf_exts *exts,
 		struct tc_action *a = exts->actions[i];
 
 		tcf_action_stats_update(a, bytes, packets, lastuse, true);
+		a->used_hw_stats = used_hw_stats;
+		a->used_hw_stats_valid = used_hw_stats_valid;
 	}
 
 	preempt_enable();
* Unmerged path include/uapi/linux/pkt_cls.h
* Unmerged path net/sched/act_api.c
diff --git a/net/sched/cls_flower.c b/net/sched/cls_flower.c
index de6f3aad76bf..00accbaac57a 100644
--- a/net/sched/cls_flower.c
+++ b/net/sched/cls_flower.c
@@ -496,7 +496,9 @@ static void fl_hw_update_stats(struct tcf_proto *tp, struct cls_fl_filter *f,
 
 	tcf_exts_stats_update(&f->exts, cls_flower.stats.bytes,
 			      cls_flower.stats.pkts,
-			      cls_flower.stats.lastused);
+			      cls_flower.stats.lastused,
+			      cls_flower.stats.used_hw_stats,
+			      cls_flower.stats.used_hw_stats_valid);
 }
 
 static void __fl_put(struct cls_fl_filter *f)
diff --git a/net/sched/cls_matchall.c b/net/sched/cls_matchall.c
index ccabba6ce65f..47190335ebbc 100644
--- a/net/sched/cls_matchall.c
+++ b/net/sched/cls_matchall.c
@@ -342,7 +342,9 @@ static void mall_stats_hw_filter(struct tcf_proto *tp,
 	tc_setup_cb_call(block, TC_SETUP_CLSMATCHALL, &cls_mall, false, true);
 
 	tcf_exts_stats_update(&head->exts, cls_mall.stats.bytes,
-			      cls_mall.stats.pkts, cls_mall.stats.lastused);
+			      cls_mall.stats.pkts, cls_mall.stats.lastused,
+			      cls_mall.stats.used_hw_stats,
+			      cls_mall.stats.used_hw_stats_valid);
 }
 
 static int mall_dump(struct net *net, struct tcf_proto *tp, void *fh,
