libperf: Add PERF_RECORD_ITRACE_START 'struct itrace_start_event' to perf/event.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit f279ad63a09da65766dfeaf03cfd659f95414936
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f279ad63.failed

Move the PERF_RECORD_ITRACE_START event definition to libperf's event.h.

In order to keep libperf simple, we switch 'u64/u32/u16/u8' types used
events to their generic '__u*' versions.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190828135717.7245-13-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f279ad63a09da65766dfeaf03cfd659f95414936)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/perf/event.h
#	tools/perf/util/event.h
diff --cc tools/perf/lib/include/perf/event.h
index 585c9d82dba3,3bcbc1eaeb35..000000000000
--- a/tools/perf/lib/include/perf/event.h
+++ b/tools/perf/lib/include/perf/event.h
@@@ -104,4 -105,146 +104,149 @@@ struct bpf_event 
  	__u8			 tag[BPF_TAG_SIZE];  // prog tag
  };
  
++<<<<<<< HEAD
++=======
+ struct perf_record_sample {
+ 	struct perf_event_header header;
+ 	__u64			 array[];
+ };
+ 
+ struct attr_event {
+ 	struct perf_event_header header;
+ 	struct perf_event_attr	 attr;
+ 	__u64			 id[];
+ };
+ 
+ enum {
+ 	PERF_CPU_MAP__CPUS = 0,
+ 	PERF_CPU_MAP__MASK = 1,
+ };
+ 
+ struct cpu_map_entries {
+ 	__u16			 nr;
+ 	__u16			 cpu[];
+ };
+ 
+ struct cpu_map_mask {
+ 	__u16			 nr;
+ 	__u16			 long_size;
+ 	unsigned long		 mask[];
+ };
+ 
+ struct cpu_map_data {
+ 	__u16			 type;
+ 	char			 data[];
+ };
+ 
+ struct cpu_map_event {
+ 	struct perf_event_header header;
+ 	struct cpu_map_data	 data;
+ };
+ 
+ enum {
+ 	PERF_EVENT_UPDATE__UNIT  = 0,
+ 	PERF_EVENT_UPDATE__SCALE = 1,
+ 	PERF_EVENT_UPDATE__NAME  = 2,
+ 	PERF_EVENT_UPDATE__CPUS  = 3,
+ };
+ 
+ struct event_update_event_cpus {
+ 	struct cpu_map_data	 cpus;
+ };
+ 
+ struct event_update_event_scale {
+ 	double			 scale;
+ };
+ 
+ struct event_update_event {
+ 	struct perf_event_header header;
+ 	__u64			 type;
+ 	__u64			 id;
+ 	char			 data[];
+ };
+ 
+ #define MAX_EVENT_NAME 64
+ 
+ struct perf_trace_event_type {
+ 	__u64			 event_id;
+ 	char			 name[MAX_EVENT_NAME];
+ };
+ 
+ struct event_type_event {
+ 	struct perf_event_header	 header;
+ 	struct perf_trace_event_type	 event_type;
+ };
+ 
+ struct tracing_data_event {
+ 	struct perf_event_header header;
+ 	__u32			 size;
+ };
+ 
+ struct build_id_event {
+ 	struct perf_event_header header;
+ 	pid_t			 pid;
+ 	__u8			 build_id[24];
+ 	char			 filename[];
+ };
+ 
+ struct id_index_entry {
+ 	__u64			 id;
+ 	__u64			 idx;
+ 	__u64			 cpu;
+ 	__u64			 tid;
+ };
+ 
+ struct id_index_event {
+ 	struct perf_event_header header;
+ 	__u64			 nr;
+ 	struct id_index_entry	 entries[0];
+ };
+ 
+ struct auxtrace_info_event {
+ 	struct perf_event_header header;
+ 	__u32			 type;
+ 	__u32			 reserved__; /* For alignment */
+ 	__u64			 priv[];
+ };
+ 
+ struct auxtrace_event {
+ 	struct perf_event_header header;
+ 	__u64			 size;
+ 	__u64			 offset;
+ 	__u64			 reference;
+ 	__u32			 idx;
+ 	__u32			 tid;
+ 	__u32			 cpu;
+ 	__u32			 reserved__; /* For alignment */
+ };
+ 
+ #define MAX_AUXTRACE_ERROR_MSG 64
+ 
+ struct auxtrace_error_event {
+ 	struct perf_event_header header;
+ 	__u32			 type;
+ 	__u32			 code;
+ 	__u32			 cpu;
+ 	__u32			 pid;
+ 	__u32			 tid;
+ 	__u32			 fmt;
+ 	__u64			 ip;
+ 	__u64			 time;
+ 	char			 msg[MAX_AUXTRACE_ERROR_MSG];
+ };
+ 
+ struct aux_event {
+ 	struct perf_event_header header;
+ 	__u64			 aux_offset;
+ 	__u64			 aux_size;
+ 	__u64			 flags;
+ };
+ 
+ struct itrace_start_event {
+ 	struct perf_event_header header;
+ 	__u32			 pid;
+ 	__u32			 tid;
+ };
+ 
++>>>>>>> f279ad63a09d (libperf: Add PERF_RECORD_ITRACE_START 'struct itrace_start_event' to perf/event.h)
  #endif /* __LIBPERF_EVENT_H */
diff --cc tools/perf/util/event.h
index ba0ec1b6aad3,f89e8ddadd46..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -342,136 -332,6 +342,139 @@@ struct events_stats 
  	u32 nr_proc_map_timeout;
  };
  
++<<<<<<< HEAD
 +enum {
 +	PERF_CPU_MAP__CPUS = 0,
 +	PERF_CPU_MAP__MASK = 1,
 +};
 +
 +struct cpu_map_entries {
 +	u16	nr;
 +	u16	cpu[];
 +};
 +
 +struct cpu_map_mask {
 +	u16	nr;
 +	u16	long_size;
 +	unsigned long mask[];
 +};
 +
 +struct cpu_map_data {
 +	u16	type;
 +	char	data[];
 +};
 +
 +struct cpu_map_event {
 +	struct perf_event_header	header;
 +	struct cpu_map_data		data;
 +};
 +
 +struct attr_event {
 +	struct perf_event_header header;
 +	struct perf_event_attr attr;
 +	u64 id[];
 +};
 +
 +enum {
 +	PERF_EVENT_UPDATE__UNIT  = 0,
 +	PERF_EVENT_UPDATE__SCALE = 1,
 +	PERF_EVENT_UPDATE__NAME  = 2,
 +	PERF_EVENT_UPDATE__CPUS  = 3,
 +};
 +
 +struct event_update_event_cpus {
 +	struct cpu_map_data cpus;
 +};
 +
 +struct event_update_event_scale {
 +	double scale;
 +};
 +
 +struct event_update_event {
 +	struct perf_event_header header;
 +	u64 type;
 +	u64 id;
 +
 +	char data[];
 +};
 +
 +#define MAX_EVENT_NAME 64
 +
 +struct perf_trace_event_type {
 +	u64	event_id;
 +	char	name[MAX_EVENT_NAME];
 +};
 +
 +struct event_type_event {
 +	struct perf_event_header header;
 +	struct perf_trace_event_type event_type;
 +};
 +
 +struct tracing_data_event {
 +	struct perf_event_header header;
 +	u32 size;
 +};
 +
 +struct id_index_entry {
 +	u64 id;
 +	u64 idx;
 +	u64 cpu;
 +	u64 tid;
 +};
 +
 +struct id_index_event {
 +	struct perf_event_header header;
 +	u64 nr;
 +	struct id_index_entry entries[0];
 +};
 +
 +struct auxtrace_info_event {
 +	struct perf_event_header header;
 +	u32 type;
 +	u32 reserved__; /* For alignment */
 +	u64 priv[];
 +};
 +
 +struct auxtrace_event {
 +	struct perf_event_header header;
 +	u64 size;
 +	u64 offset;
 +	u64 reference;
 +	u32 idx;
 +	u32 tid;
 +	u32 cpu;
 +	u32 reserved__; /* For alignment */
 +};
 +
 +#define MAX_AUXTRACE_ERROR_MSG 64
 +
 +struct auxtrace_error_event {
 +	struct perf_event_header header;
 +	u32 type;
 +	u32 code;
 +	u32 cpu;
 +	u32 pid;
 +	u32 tid;
 +	u32 fmt;
 +	u64 ip;
 +	u64 time;
 +	char msg[MAX_AUXTRACE_ERROR_MSG];
 +};
 +
 +struct aux_event {
 +	struct perf_event_header header;
 +	u64	aux_offset;
 +	u64	aux_size;
 +	u64	flags;
 +};
 +
 +struct itrace_start_event {
 +	struct perf_event_header header;
 +	u32 pid, tid;
 +};
 +
++=======
++>>>>>>> f279ad63a09d (libperf: Add PERF_RECORD_ITRACE_START 'struct itrace_start_event' to perf/event.h)
  struct context_switch_event {
  	struct perf_event_header header;
  	u32 next_prev_pid;
* Unmerged path tools/perf/lib/include/perf/event.h
* Unmerged path tools/perf/util/event.h
