selftests/bpf: Test for checking return code for the extended prog

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Udip Pant <udippant@fb.com>
commit 50d19736aff497a4c25ec7e36375195bfd8570cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/50d19736.failed

This adds test to enforce same check for the return code for the extended prog
as it is enforced for the target program. It asserts failure for a
return code, which is permitted without the patch in this series, while
it is restricted after the application of this patch.

	Signed-off-by: Udip Pant <udippant@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200825232003.2877030-4-udippant@fb.com
(cherry picked from commit 50d19736aff497a4c25ec7e36375195bfd8570cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
diff --cc tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
index 7d3740d38965,d295ca9bbf96..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
+++ b/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
@@@ -103,11 -110,82 +103,56 @@@ static void test_target_yes_callees(voi
  	test_fexit_bpf2bpf_common("./fexit_bpf2bpf.o",
  				  "./test_pkt_access.o",
  				  ARRAY_SIZE(prog_name),
 -				  prog_name, true);
 -}
 -
 -static void test_func_replace(void)
 -{
 -	const char *prog_name[] = {
 -		"fexit/test_pkt_access",
 -		"fexit/test_pkt_access_subprog1",
 -		"fexit/test_pkt_access_subprog2",
 -		"fexit/test_pkt_access_subprog3",
 -		"freplace/get_skb_len",
 -		"freplace/get_skb_ifindex",
 -		"freplace/get_constant",
 -		"freplace/test_pkt_write_access_subprog",
 -	};
 -	test_fexit_bpf2bpf_common("./fexit_bpf2bpf.o",
 -				  "./test_pkt_access.o",
 -				  ARRAY_SIZE(prog_name),
 -				  prog_name, true);
 -}
 -
 -static void test_func_replace_verify(void)
 -{
 -	const char *prog_name[] = {
 -		"freplace/do_bind",
 -	};
 -	test_fexit_bpf2bpf_common("./freplace_connect4.o",
 -				  "./connect4_prog.o",
 -				  ARRAY_SIZE(prog_name),
 -				  prog_name, false);
 +				  prog_name);
  }
  
+ static void test_func_replace_return_code(void)
+ {
+ 	/*
+ 	 * standalone test that asserts failure to load freplace prog
+ 	 * because of invalid return code.
+ 	 */
+ 	struct bpf_object *obj = NULL, *pkt_obj;
+ 	int err, pkt_fd;
+ 	__u32 duration = 0;
+ 	const char *target_obj_file = "./connect4_prog.o";
+ 	const char *obj_file = "./freplace_connect_v4_prog.o";
+ 
+ 	err = bpf_prog_load(target_obj_file, BPF_PROG_TYPE_UNSPEC,
+ 			    &pkt_obj, &pkt_fd);
+ 	/* the target prog should load fine */
+ 	if (CHECK(err, "tgt_prog_load", "file %s err %d errno %d\n",
+ 		  target_obj_file, err, errno))
+ 		return;
+ 	DECLARE_LIBBPF_OPTS(bpf_object_open_opts, opts,
+ 			    .attach_prog_fd = pkt_fd,
+ 			   );
+ 
+ 	obj = bpf_object__open_file(obj_file, &opts);
+ 	if (CHECK(IS_ERR_OR_NULL(obj), "obj_open",
+ 		  "failed to open %s: %ld\n", obj_file,
+ 		  PTR_ERR(obj)))
+ 		goto close_prog;
+ 
+ 	/* It should fail to load the program */
+ 	err = bpf_object__load(obj);
+ 	if (CHECK(!err, "bpf_obj_load should fail", "err %d\n", err))
+ 		goto close_prog;
+ 
+ close_prog:
+ 	if (!IS_ERR_OR_NULL(obj))
+ 		bpf_object__close(obj);
+ 	bpf_object__close(pkt_obj);
+ }
+ 
  void test_fexit_bpf2bpf(void)
  {
  	test_target_no_callees();
  	test_target_yes_callees();
++<<<<<<< HEAD
++=======
+ 	test_func_replace();
+ 	test_func_replace_verify();
+ 	test_func_replace_return_code();
++>>>>>>> 50d19736aff4 (selftests/bpf: Test for checking return code for the extended prog)
  }
* Unmerged path tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
diff --git a/tools/testing/selftests/bpf/progs/freplace_connect_v4_prog.c b/tools/testing/selftests/bpf/progs/freplace_connect_v4_prog.c
new file mode 100644
index 000000000000..544e5ac90461
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/freplace_connect_v4_prog.c
@@ -0,0 +1,19 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2020 Facebook
+
+#include <linux/stddef.h>
+#include <linux/ipv6.h>
+#include <linux/bpf.h>
+#include <linux/in.h>
+#include <sys/socket.h>
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_endian.h>
+
+SEC("freplace/connect_v4_prog")
+int new_connect_v4_prog(struct bpf_sock_addr *ctx)
+{
+	// return value thats in invalid range
+	return 255;
+}
+
+char _license[] SEC("license") = "GPL";
