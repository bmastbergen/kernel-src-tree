ptp: Introduce strict checking of external time stamp options.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [netdrv] ptp: Introduce strict checking of external time stamp options (Petr Oros) [1795192]
Rebuild_FUZZ: 99.19%
commit-author Richard Cochran <richardcochran@gmail.com>
commit 6138e687c7b679da08c0feb55a88f448f7890c07
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6138e687.failed

User space may request time stamps on rising edges, falling edges, or
both.  However, the particular mode may or may not be supported in the
hardware or in the driver.  This patch adds a "strict" flag that tells
drivers to ensure that the requested mode will be honored.

	Signed-off-by: Richard Cochran <richardcochran@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6138e687c7b679da08c0feb55a88f448f7890c07)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
#	drivers/ptp/ptp_chardev.c
#	include/uapi/linux/ptp_clock.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
index 0059b290e095,819097d9b583..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
@@@ -236,6 -236,13 +236,16 @@@ static int mlx5_extts_configure(struct 
  	if (!MLX5_PPS_CAP(mdev))
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
++=======
+ 	/* Reject requests with unsupported flags */
+ 	if (rq->extts.flags & ~(PTP_ENABLE_FEATURE |
+ 				PTP_RISING_EDGE |
+ 				PTP_FALLING_EDGE |
+ 				PTP_STRICT_FLAGS))
+ 		return -EOPNOTSUPP;
+ 
++>>>>>>> 6138e687c7b6 (ptp: Introduce strict checking of external time stamp options.)
  	if (rq->extts.index >= clock->ptp_info.n_pins)
  		return -EINVAL;
  
diff --cc drivers/ptp/ptp_chardev.c
index 7cbea796652a,9d72ab593f13..000000000000
--- a/drivers/ptp/ptp_chardev.c
+++ b/drivers/ptp/ptp_chardev.c
@@@ -157,6 -149,26 +157,29 @@@ long ptp_ioctl(struct posix_clock *pc, 
  			err = -EFAULT;
  			break;
  		}
++<<<<<<< HEAD
++=======
+ 		if (cmd == PTP_EXTTS_REQUEST2) {
+ 			/* Tell the drivers to check the flags carefully. */
+ 			req.extts.flags |= PTP_STRICT_FLAGS;
+ 			/* Make sure no reserved bit is set. */
+ 			if ((req.extts.flags & ~PTP_EXTTS_VALID_FLAGS) ||
+ 			    req.extts.rsv[0] || req.extts.rsv[1]) {
+ 				err = -EINVAL;
+ 				break;
+ 			}
+ 			/* Ensure one of the rising/falling edge bits is set. */
+ 			if ((req.extts.flags & PTP_ENABLE_FEATURE) &&
+ 			    (req.extts.flags & PTP_EXTTS_EDGES) == 0) {
+ 				err = -EINVAL;
+ 				break;
+ 			}
+ 		} else if (cmd == PTP_EXTTS_REQUEST) {
+ 			req.extts.flags &= PTP_EXTTS_V1_VALID_FLAGS;
+ 			req.extts.rsv[0] = 0;
+ 			req.extts.rsv[1] = 0;
+ 		}
++>>>>>>> 6138e687c7b6 (ptp: Introduce strict checking of external time stamp options.)
  		if (req.extts.index >= ops->n_ext_ts) {
  			err = -EINVAL;
  			break;
diff --cc include/uapi/linux/ptp_clock.h
index 1bc794ad957a,9dc9d0079e98..000000000000
--- a/include/uapi/linux/ptp_clock.h
+++ b/include/uapi/linux/ptp_clock.h
@@@ -29,6 -31,39 +29,42 @@@
  #define PTP_ENABLE_FEATURE (1<<0)
  #define PTP_RISING_EDGE    (1<<1)
  #define PTP_FALLING_EDGE   (1<<2)
++<<<<<<< HEAD
++=======
+ #define PTP_STRICT_FLAGS   (1<<3)
+ #define PTP_EXTTS_EDGES    (PTP_RISING_EDGE | PTP_FALLING_EDGE)
+ 
+ /*
+  * flag fields valid for the new PTP_EXTTS_REQUEST2 ioctl.
+  */
+ #define PTP_EXTTS_VALID_FLAGS	(PTP_ENABLE_FEATURE |	\
+ 				 PTP_RISING_EDGE |	\
+ 				 PTP_FALLING_EDGE |	\
+ 				 PTP_STRICT_FLAGS)
+ 
+ /*
+  * flag fields valid for the original PTP_EXTTS_REQUEST ioctl.
+  * DO NOT ADD NEW FLAGS HERE.
+  */
+ #define PTP_EXTTS_V1_VALID_FLAGS	(PTP_ENABLE_FEATURE |	\
+ 					 PTP_RISING_EDGE |	\
+ 					 PTP_FALLING_EDGE)
+ 
+ /*
+  * Bits of the ptp_perout_request.flags field:
+  */
+ #define PTP_PEROUT_ONE_SHOT (1<<0)
+ 
+ /*
+  * flag fields valid for the new PTP_PEROUT_REQUEST2 ioctl.
+  */
+ #define PTP_PEROUT_VALID_FLAGS	(PTP_PEROUT_ONE_SHOT)
+ 
+ /*
+  * No flags are valid for the original PTP_PEROUT_REQUEST ioctl
+  */
+ #define PTP_PEROUT_V1_VALID_FLAGS	(0)
++>>>>>>> 6138e687c7b6 (ptp: Introduce strict checking of external time stamp options.)
  
  /*
   * struct ptp_clock_time - represents a time value
diff --git a/drivers/net/dsa/mv88e6xxx/ptp.c b/drivers/net/dsa/mv88e6xxx/ptp.c
index 99dc50b87299..4cbdd40630a1 100644
--- a/drivers/net/dsa/mv88e6xxx/ptp.c
+++ b/drivers/net/dsa/mv88e6xxx/ptp.c
@@ -243,7 +243,8 @@ static int mv88e6xxx_ptp_enable_extts(struct mv88e6xxx_chip *chip,
 	/* Reject requests with unsupported flags */
 	if (rq->extts.flags & ~(PTP_ENABLE_FEATURE |
 				PTP_RISING_EDGE |
-				PTP_FALLING_EDGE))
+				PTP_FALLING_EDGE |
+				PTP_STRICT_FLAGS))
 		return -EOPNOTSUPP;
 
 	pin = ptp_find_pin(chip->ptp_clock, PTP_PF_EXTTS, rq->extts.index);
diff --git a/drivers/net/ethernet/intel/igb/igb_ptp.c b/drivers/net/ethernet/intel/igb/igb_ptp.c
index 827b85d7453f..f46d0777d0a3 100644
--- a/drivers/net/ethernet/intel/igb/igb_ptp.c
+++ b/drivers/net/ethernet/intel/igb/igb_ptp.c
@@ -524,7 +524,8 @@ static int igb_ptp_feature_enable_i210(struct ptp_clock_info *ptp,
 		/* Reject requests with unsupported flags */
 		if (rq->extts.flags & ~(PTP_ENABLE_FEATURE |
 					PTP_RISING_EDGE |
-					PTP_FALLING_EDGE))
+					PTP_FALLING_EDGE |
+					PTP_STRICT_FLAGS))
 			return -EOPNOTSUPP;
 
 		if (on) {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
diff --git a/drivers/net/ethernet/renesas/ravb_ptp.c b/drivers/net/ethernet/renesas/ravb_ptp.c
index b1677f99a00b..82fe044f7ee2 100644
--- a/drivers/net/ethernet/renesas/ravb_ptp.c
+++ b/drivers/net/ethernet/renesas/ravb_ptp.c
@@ -189,7 +189,8 @@ static int ravb_ptp_extts(struct ptp_clock_info *ptp,
 	/* Reject requests with unsupported flags */
 	if (req->flags & ~(PTP_ENABLE_FEATURE |
 			   PTP_RISING_EDGE |
-			   PTP_FALLING_EDGE))
+			   PTP_FALLING_EDGE |
+			   PTP_STRICT_FLAGS))
 		return -EOPNOTSUPP;
 
 	if (req->index)
diff --git a/drivers/net/phy/dp83640.c b/drivers/net/phy/dp83640.c
index 2e17439f896d..9d8e4debc534 100644
--- a/drivers/net/phy/dp83640.c
+++ b/drivers/net/phy/dp83640.c
@@ -472,7 +472,8 @@ static int ptp_dp83640_enable(struct ptp_clock_info *ptp,
 		/* Reject requests with unsupported flags */
 		if (rq->extts.flags & ~(PTP_ENABLE_FEATURE |
 					PTP_RISING_EDGE |
-					PTP_FALLING_EDGE))
+					PTP_FALLING_EDGE |
+					PTP_STRICT_FLAGS))
 			return -EOPNOTSUPP;
 		index = rq->extts.index;
 		if (index >= N_EXT_TS)
* Unmerged path drivers/ptp/ptp_chardev.c
* Unmerged path include/uapi/linux/ptp_clock.h
