perf tools: Rename perf_event::bpf_event to perf_event::bpf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 6a1b359821eb8d929c4dd9f53178da84888d79ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6a1b3598.failed

Just like all the other meta events, that extra _event suffix is just
redundant, ditch it.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Song Liu <songliubraving@fb.com>
Link: https://lkml.kernel.org/n/tip-505qwpaizq1k0t6pk13v1ibd@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 6a1b359821eb8d929c4dd9f53178da84888d79ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/bpf-event.c
#	tools/perf/util/event.h
diff --cc tools/perf/util/bpf-event.c
index 2a4a0da35632,28fa2b1ce66e..000000000000
--- a/tools/perf/util/bpf-event.c
+++ b/tools/perf/util/bpf-event.c
@@@ -160,8 -160,8 +159,13 @@@ static int perf_event__synthesize_one_b
  					       union perf_event *event,
  					       struct record_opts *opts)
  {
++<<<<<<< HEAD
 +	struct ksymbol_event *ksymbol_event = &event->ksymbol_event;
 +	struct bpf_event *bpf_event = &event->bpf_event;
++=======
+ 	struct perf_record_ksymbol *ksymbol_event = &event->ksymbol;
+ 	struct perf_record_bpf_event *bpf_event = &event->bpf;
++>>>>>>> 6a1b359821eb (perf tools: Rename perf_event::bpf_event to perf_event::bpf)
  	struct bpf_prog_info_linear *info_linear;
  	struct perf_tool *tool = session->tool;
  	struct bpf_prog_info_node *info_node;
diff --cc tools/perf/util/event.h
index ba0ec1b6aad3,7251e2eee441..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -555,16 -550,18 +555,31 @@@ struct compressed_event 
  
  union perf_event {
  	struct perf_event_header	header;
++<<<<<<< HEAD
 +	struct mmap_event		mmap;
 +	struct mmap2_event		mmap2;
 +	struct comm_event		comm;
 +	struct namespaces_event		namespaces;
 +	struct fork_event		fork;
 +	struct lost_event		lost;
 +	struct lost_samples_event	lost_samples;
 +	struct read_event		read;
 +	struct throttle_event		throttle;
 +	struct sample_event		sample;
++=======
+ 	struct perf_record_mmap		mmap;
+ 	struct perf_record_mmap2	mmap2;
+ 	struct perf_record_comm		comm;
+ 	struct perf_record_namespaces	namespaces;
+ 	struct perf_record_fork		fork;
+ 	struct perf_record_lost		lost;
+ 	struct perf_record_lost_samples	lost_samples;
+ 	struct perf_record_read		read;
+ 	struct perf_record_throttle	throttle;
+ 	struct perf_record_sample	sample;
+ 	struct perf_record_bpf_event	bpf;
+ 	struct perf_record_ksymbol	ksymbol;
++>>>>>>> 6a1b359821eb (perf tools: Rename perf_event::bpf_event to perf_event::bpf)
  	struct attr_event		attr;
  	struct event_update_event	event_update;
  	struct event_type_event		event_type;
* Unmerged path tools/perf/util/bpf-event.c
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index ca1efa67f07a..1bb6fd3e2560 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -1494,8 +1494,7 @@ size_t perf_event__fprintf_ksymbol(union perf_event *event, FILE *fp)
 size_t perf_event__fprintf_bpf_event(union perf_event *event, FILE *fp)
 {
 	return fprintf(fp, " type %u, flags %u, id %u\n",
-		       event->bpf_event.type, event->bpf_event.flags,
-		       event->bpf_event.id);
+		       event->bpf.type, event->bpf.flags, event->bpf.id);
 }
 
 size_t perf_event__fprintf(union perf_event *event, FILE *fp)
* Unmerged path tools/perf/util/event.h
