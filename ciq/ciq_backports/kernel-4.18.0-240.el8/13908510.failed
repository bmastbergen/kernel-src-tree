KVM: x86: Use KVM cpu caps to detect MSR_TSC_AUX virt support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 139085101f8500b09c681b1e52c3839df681a0d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/13908510.failed

Check for MSR_TSC_AUX virtualization via kvm_cpu_cap_has() and drop
->rdtscp_supported().

Note, vmx_rdtscp_supported() needs to hang around a tiny bit longer due
other usage in VMX code.

No functional change intended.

	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 139085101f8500b09c681b1e52c3839df681a0d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/kvm_host.h
#	arch/x86/kvm/svm.c
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/include/asm/kvm_host.h
index 69418e1a3a68,00a1be55e90a..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -1148,8 -1156,6 +1148,11 @@@ struct kvm_x86_ops 
  	int (*get_tdp_level)(struct kvm_vcpu *vcpu);
  	u64 (*get_mt_mask)(struct kvm_vcpu *vcpu, gfn_t gfn, bool is_mmio);
  	int (*get_lpage_level)(void);
++<<<<<<< HEAD
 +	bool (*rdtscp_supported)(void);
 +	bool (*invpcid_supported)(void);
++=======
++>>>>>>> 139085101f85 (KVM: x86: Use KVM cpu caps to detect MSR_TSC_AUX virt support)
  
  	void (*set_tdp_cr3)(struct kvm_vcpu *vcpu, unsigned long cr3);
  
diff --cc arch/x86/kvm/svm.c
index 2c7c88ef7253,f802d9c196e9..000000000000
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@@ -6086,31 -6074,6 +6086,34 @@@ static int svm_get_lpage_level(void
  	return PT_PDPE_LEVEL;
  }
  
++<<<<<<< HEAD
 +static bool svm_rdtscp_supported(void)
 +{
 +	return boot_cpu_has(X86_FEATURE_RDTSCP);
 +}
 +
 +static bool svm_invpcid_supported(void)
 +{
 +	return false;
 +}
 +
 +static bool svm_mpx_supported(void)
 +{
 +	return false;
 +}
 +
 +static bool svm_xsaves_supported(void)
 +{
 +	return boot_cpu_has(X86_FEATURE_XSAVES);
 +}
 +
 +static bool svm_umip_emulated(void)
 +{
 +	return false;
 +}
 +
++=======
++>>>>>>> 139085101f85 (KVM: x86: Use KVM cpu caps to detect MSR_TSC_AUX virt support)
  static bool svm_pt_supported(void)
  {
  	return false;
@@@ -7464,13 -7440,7 +7467,16 @@@ static struct kvm_x86_ops svm_x86_ops _
  
  	.cpuid_update = svm_cpuid_update,
  
++<<<<<<< HEAD
 +	.rdtscp_supported = svm_rdtscp_supported,
 +	.invpcid_supported = svm_invpcid_supported,
 +	.mpx_supported = svm_mpx_supported,
 +	.xsaves_supported = svm_xsaves_supported,
 +	.umip_emulated = svm_umip_emulated,
++=======
++>>>>>>> 139085101f85 (KVM: x86: Use KVM cpu caps to detect MSR_TSC_AUX virt support)
  	.pt_supported = svm_pt_supported,
 +	.pku_supported = svm_pku_supported,
  
  	.set_supported_cpuid = svm_set_supported_cpuid,
  
diff --cc arch/x86/kvm/vmx/vmx.c
index b4f527d117f1,80e8b8423104..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -7975,10 -7939,6 +7975,13 @@@ static struct kvm_x86_ops vmx_x86_ops _
  	.get_lpage_level = vmx_get_lpage_level,
  
  	.cpuid_update = vmx_cpuid_update,
++<<<<<<< HEAD
 +
 +	.rdtscp_supported = vmx_rdtscp_supported,
 +	.invpcid_supported = vmx_invpcid_supported,
 +
++=======
++>>>>>>> 139085101f85 (KVM: x86: Use KVM cpu caps to detect MSR_TSC_AUX virt support)
  	.set_supported_cpuid = vmx_set_supported_cpuid,
  
  	.has_wbinvd_exit = cpu_has_vmx_wbinvd_exit,
* Unmerged path arch/x86/include/asm/kvm_host.h
* Unmerged path arch/x86/kvm/svm.c
* Unmerged path arch/x86/kvm/vmx/vmx.c
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 4ad9e50bf3f6..1a4a7e4849b2 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -5160,7 +5160,7 @@ static void kvm_init_msr_list(void)
 				continue;
 			break;
 		case MSR_TSC_AUX:
-			if (!kvm_x86_ops->rdtscp_supported())
+			if (!kvm_cpu_cap_has(X86_FEATURE_RDTSCP))
 				continue;
 			break;
 		case MSR_IA32_RTIT_CTL:
