libperf: Add perf_evlist__alloc_pollfd() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 31f67fc462a9e5df3b900924c2bf649c7bc63af8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/31f67fc4.failed

Move perf_evlist__alloc_pollfd() from tools/perf to libperf, it will be
used in the following patches.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-37-jolsa@kernel.org
[ Added api/fd/array.h include to the lib/evlist.c file ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 31f67fc462a9e5df3b900924c2bf649c7bc63af8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,c47f23e7f3c8..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -424,31 -398,10 +424,36 @@@ int perf_evlist__enable_event_idx(struc
  		return perf_evlist__enable_event_thread(evlist, evsel, idx);
  }
  
++<<<<<<< HEAD
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist)
 +{
 +	int nr_cpus = cpu_map__nr(evlist->cpus);
 +	int nr_threads = thread_map__nr(evlist->threads);
 +	int nfds = 0;
 +	struct perf_evsel *evsel;
 +
 +	evlist__for_each_entry(evlist, evsel) {
 +		if (evsel->system_wide)
 +			nfds += nr_cpus;
 +		else
 +			nfds += nr_cpus * nr_threads;
 +	}
 +
 +	if (fdarray__available_entries(&evlist->pollfd) < nfds &&
 +	    fdarray__grow(&evlist->pollfd, nfds) < 0)
 +		return -ENOMEM;
 +
 +	return 0;
 +}
 +
 +static int __perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd,
 +				     struct perf_mmap *map, short revent)
++=======
+ static int __perf_evlist__add_pollfd(struct evlist *evlist, int fd,
+ 				     struct mmap *map, short revent)
++>>>>>>> 31f67fc462a9 (libperf: Add perf_evlist__alloc_pollfd() function)
  {
 -	int pos = fdarray__add(&evlist->core.pollfd, fd, revent | POLLERR | POLLHUP);
 +	int pos = fdarray__add(&evlist->pollfd, fd, revent | POLLERR | POLLHUP);
  	/*
  	 * Save the idx so that when we filter out fds POLLHUP'ed we can
  	 * close the associated evlist->mmap[] entry.
@@@ -1031,14 -923,14 +1036,18 @@@ int perf_evlist__mmap_ex(struct perf_ev
  	if (!evlist->mmap)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	if (evlist->pollfd.entries == NULL && perf_evlist__alloc_pollfd(evlist) < 0)
++=======
+ 	if (evlist->core.pollfd.entries == NULL && perf_evlist__alloc_pollfd(&evlist->core) < 0)
++>>>>>>> 31f67fc462a9 (libperf: Add perf_evlist__alloc_pollfd() function)
  		return -ENOMEM;
  
 -	evlist->core.mmap_len = evlist__mmap_size(pages);
 -	pr_debug("mmap size %zuB\n", evlist->core.mmap_len);
 -	mp.mask = evlist->core.mmap_len - page_size - 1;
 +	evlist->mmap_len = perf_evlist__mmap_size(pages);
 +	pr_debug("mmap size %zuB\n", evlist->mmap_len);
 +	mp.mask = evlist->mmap_len - page_size - 1;
  
 -	auxtrace_mmap_params__init(&mp.auxtrace_mp, evlist->core.mmap_len,
 +	auxtrace_mmap_params__init(&mp.auxtrace_mp, evlist->mmap_len,
  				   auxtrace_pages, auxtrace_overwrite);
  
  	evlist__for_each_entry(evlist, evsel) {
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,bebbaa9b6325..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -113,41 -130,34 +113,46 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
 -int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
 -int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
 -int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
 +int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
 +int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
 +int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
  				     const char *name);
  
++<<<<<<< HEAD
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd);
++=======
+ int perf_evlist__add_pollfd(struct evlist *evlist, int fd);
+ int perf_evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
++>>>>>>> 31f67fc462a9 (libperf: Add perf_evlist__alloc_pollfd() function)
 +
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
  
 -int perf_evlist__poll(struct evlist *evlist, int timeout);
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
  
 -struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
 -struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
  						u64 id);
  
 -struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
 +struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
  
 -void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
 +void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
  
 -void evlist__mmap_consume(struct evlist *evlist, int idx);
 +void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
  
 -int evlist__open(struct evlist *evlist);
 -void evlist__close(struct evlist *evlist);
 +int perf_evlist__open(struct perf_evlist *evlist);
 +void perf_evlist__close(struct perf_evlist *evlist);
  
  struct callchain_param;
  
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
