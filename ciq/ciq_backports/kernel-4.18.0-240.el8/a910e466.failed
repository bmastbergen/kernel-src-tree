perf parse: Report initial event parsing error

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ian Rogers <irogers@google.com>
commit a910e4666d61712840c78de33cc7f89de8affa78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a910e466.failed

Record the first event parsing error and report. Implementing feedback
from Jiri Olsa:

  https://lkml.org/lkml/2019/10/28/680

An example error is:

  $ tools/perf/perf stat -e c/c/
  WARNING: multiple event parsing errors
  event syntax error: 'c/c/'
                         \___ unknown term

  valid terms: event,filter_rem,filter_opc0,edge,filter_isoc,filter_tid,filter_loc,filter_nc,inv,umask,filter_opc1,tid_en,thresh,filter_all_op,filter_not_nm,filter_state,filter_nm,config,config1,config2,name,period,percore

Initial error:

  event syntax error: 'c/c/'
                      \___ Cannot find PMU `c'. Missing kernel support?
  Run 'perf list' for a list of valid events

   Usage: perf stat [<options>] [<command>]

      -e, --event <event>   event selector. use 'perf list' to list available events

	Signed-off-by: Ian Rogers <irogers@google.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Allison Randal <allison@lohutok.net>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Anju T Sudhakar <anju@linux.vnet.ibm.com>
	Cc: Christian Borntraeger <borntraeger@de.ibm.com>
	Cc: Davidlohr Bueso <dave@stgolabs.net>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Thomas Richter <tmricht@linux.ibm.com>
Link: http://lore.kernel.org/lkml/20191116074652.9960-1-irogers@google.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a910e4666d61712840c78de33cc7f89de8affa78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/tests/parse-events.c
#	tools/perf/util/parse-events.c
diff --cc tools/perf/builtin-trace.c
index c9332bb97f55,46a72ecac427..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2835,15 -3012,22 +2835,28 @@@ out_free
  
  static size_t trace__fprintf_thread_summary(struct trace *trace, FILE *fp);
  
 -static bool evlist__add_vfs_getname(struct evlist *evlist)
 +static bool perf_evlist__add_vfs_getname(struct perf_evlist *evlist)
  {
  	bool found = false;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *tmp;
 +	struct parse_events_error err = { .idx = 0, };
 +	int ret = parse_events(evlist, "probe:vfs_getname*", &err);
- 
- 	if (ret)
++=======
+ 	struct evsel *evsel, *tmp;
+ 	struct parse_events_error err;
+ 	int ret;
++>>>>>>> a910e4666d61 (perf parse: Report initial event parsing error)
+ 
+ 	bzero(&err, sizeof(err));
+ 	ret = parse_events(evlist, "probe:vfs_getname*", &err);
+ 	if (ret) {
+ 		free(err.str);
+ 		free(err.help);
+ 		free(err.first_str);
+ 		free(err.first_help);
  		return false;
+ 	}
  
  	evlist__for_each_entry_safe(evlist, evsel, tmp) {
  		if (!strstarts(perf_evsel__name(evsel), "probe:vfs_getname"))
diff --cc tools/perf/tests/parse-events.c
index 8f3c80e13584,091c3aeccc27..000000000000
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@@ -1768,10 -1768,11 +1768,16 @@@ static struct terms_test test__terms[] 
  
  static int test_event(struct evlist_test *e)
  {
++<<<<<<< HEAD
 +	struct parse_events_error err = { .idx = 0, };
 +	struct perf_evlist *evlist;
++=======
+ 	struct parse_events_error err;
+ 	struct evlist *evlist;
++>>>>>>> a910e4666d61 (perf parse: Report initial event parsing error)
  	int ret;
  
+ 	bzero(&err, sizeof(err));
  	if (e->valid && !e->valid()) {
  		pr_debug("... SKIP");
  		return 0;
diff --cc tools/perf/util/parse-events.c
index 42ea3476f432,6bae9d6edc12..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -2067,9 -2103,12 +2100,18 @@@ void parse_events_print_error(struct pa
  int parse_events_option(const struct option *opt, const char *str,
  			int unset __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = *(struct perf_evlist **)opt->value;
 +	struct parse_events_error err = { .idx = 0, };
 +	int ret = parse_events(evlist, str, &err);
++=======
+ 	struct evlist *evlist = *(struct evlist **)opt->value;
+ 	struct parse_events_error err;
+ 	int ret;
+ 
+ 	bzero(&err, sizeof(err));
+ 	ret = parse_events(evlist, str, &err);
++>>>>>>> a910e4666d61 (perf parse: Report initial event parsing error)
  
  	if (ret) {
  		parse_events_print_error(&err, str);
diff --git a/tools/perf/arch/powerpc/util/kvm-stat.c b/tools/perf/arch/powerpc/util/kvm-stat.c
index ea47a5a0c0c3..98f8a7aa64f4 100644
--- a/tools/perf/arch/powerpc/util/kvm-stat.c
+++ b/tools/perf/arch/powerpc/util/kvm-stat.c
@@ -113,10 +113,10 @@ static int is_tracepoint_available(const char *str, struct perf_evlist *evlist)
 	struct parse_events_error err;
 	int ret;
 
-	err.str = NULL;
+	bzero(&err, sizeof(err));
 	ret = parse_events(evlist, str, &err);
 	if (err.str)
-		pr_err("%s : %s\n", str, err.str);
+		parse_events_print_error(&err, "tracepoint");
 	return ret;
 }
 
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index 13e7c7e6714e..ae6ee2e31aaf 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -1270,6 +1270,7 @@ static int add_default_attributes(void)
 	if (stat_config.null_run)
 		return 0;
 
+	bzero(&errinfo, sizeof(errinfo));
 	if (transaction_run) {
 		/* Handle -T as -M transaction. Once platform specific metrics
 		 * support has been added to the json files, all archictures
@@ -1327,6 +1328,7 @@ static int add_default_attributes(void)
 			return -1;
 		}
 		if (err) {
+			parse_events_print_error(&errinfo, smi_cost_attrs);
 			fprintf(stderr, "Cannot set up SMI cost events\n");
 			return -1;
 		}
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/tests/parse-events.c
diff --git a/tools/perf/util/metricgroup.c b/tools/perf/util/metricgroup.c
index fe6f7545a885..35b5c359a29a 100644
--- a/tools/perf/util/metricgroup.c
+++ b/tools/perf/util/metricgroup.c
@@ -523,7 +523,7 @@ int metricgroup__parse_groups(const struct option *opt,
 	if (ret)
 		return ret;
 	pr_debug("adding %s\n", extra_events.buf);
-	memset(&parse_error, 0, sizeof(struct parse_events_error));
+	bzero(&parse_error, sizeof(parse_error));
 	ret = parse_events(perf_evlist, extra_events.buf, &parse_error);
 	if (ret) {
 		parse_events_print_error(&parse_error, extra_events.buf);
* Unmerged path tools/perf/util/parse-events.c
diff --git a/tools/perf/util/parse-events.h b/tools/perf/util/parse-events.h
index 693089501a09..75f2c9042905 100644
--- a/tools/perf/util/parse-events.h
+++ b/tools/perf/util/parse-events.h
@@ -110,9 +110,13 @@ struct parse_events_term {
 };
 
 struct parse_events_error {
+	int   num_errors;       /* number of errors encountered */
 	int   idx;	/* index in the parsed string */
 	char *str;      /* string to display at the index */
 	char *help;	/* optional help string */
+	int   first_idx;/* as above, but for the first encountered error */
+	char *first_str;
+	char *first_help;
 };
 
 struct parse_events_state {
