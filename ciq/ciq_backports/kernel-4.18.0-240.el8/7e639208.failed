bpf: JIT helpers for fmod_ret progs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author KP Singh <kpsingh@google.com>
commit 7e639208e88d60abf83d48dfda4c0ad325a77b58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7e639208.failed

* Split the invoke_bpf program to prepare for special handling of
  fmod_ret programs introduced in a subsequent patch.
* Move the definition of emit_cond_near_jump and emit_nops as they are
  needed for fmod_ret.
* Refactor branch target alignment into its own generic helper function
  i.e. emit_align.

	Signed-off-by: KP Singh <kpsingh@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20200304191853.1529-3-kpsingh@chromium.org
(cherry picked from commit 7e639208e88d60abf83d48dfda4c0ad325a77b58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/net/bpf_jit_comp.c
diff --cc arch/x86/net/bpf_jit_comp.c
index 490d8e35c7c9,d6349e930b06..000000000000
--- a/arch/x86/net/bpf_jit_comp.c
+++ b/arch/x86/net/bpf_jit_comp.c
@@@ -1242,6 -1328,379 +1242,382 @@@ emit_jmp
  	return proglen;
  }
  
++<<<<<<< HEAD
++=======
+ static void save_regs(const struct btf_func_model *m, u8 **prog, int nr_args,
+ 		      int stack_size)
+ {
+ 	int i;
+ 	/* Store function arguments to stack.
+ 	 * For a function that accepts two pointers the sequence will be:
+ 	 * mov QWORD PTR [rbp-0x10],rdi
+ 	 * mov QWORD PTR [rbp-0x8],rsi
+ 	 */
+ 	for (i = 0; i < min(nr_args, 6); i++)
+ 		emit_stx(prog, bytes_to_bpf_size(m->arg_size[i]),
+ 			 BPF_REG_FP,
+ 			 i == 5 ? X86_REG_R9 : BPF_REG_1 + i,
+ 			 -(stack_size - i * 8));
+ }
+ 
+ static void restore_regs(const struct btf_func_model *m, u8 **prog, int nr_args,
+ 			 int stack_size)
+ {
+ 	int i;
+ 
+ 	/* Restore function arguments from stack.
+ 	 * For a function that accepts two pointers the sequence will be:
+ 	 * EMIT4(0x48, 0x8B, 0x7D, 0xF0); mov rdi,QWORD PTR [rbp-0x10]
+ 	 * EMIT4(0x48, 0x8B, 0x75, 0xF8); mov rsi,QWORD PTR [rbp-0x8]
+ 	 */
+ 	for (i = 0; i < min(nr_args, 6); i++)
+ 		emit_ldx(prog, bytes_to_bpf_size(m->arg_size[i]),
+ 			 i == 5 ? X86_REG_R9 : BPF_REG_1 + i,
+ 			 BPF_REG_FP,
+ 			 -(stack_size - i * 8));
+ }
+ 
+ static int invoke_bpf_prog(const struct btf_func_model *m, u8 **pprog,
+ 			   struct bpf_prog *p, int stack_size)
+ {
+ 	u8 *prog = *pprog;
+ 	int cnt = 0;
+ 
+ 	if (emit_call(&prog, __bpf_prog_enter, prog))
+ 		return -EINVAL;
+ 	/* remember prog start time returned by __bpf_prog_enter */
+ 	emit_mov_reg(&prog, true, BPF_REG_6, BPF_REG_0);
+ 
+ 	/* arg1: lea rdi, [rbp - stack_size] */
+ 	EMIT4(0x48, 0x8D, 0x7D, -stack_size);
+ 	/* arg2: progs[i]->insnsi for interpreter */
+ 	if (!p->jited)
+ 		emit_mov_imm64(&prog, BPF_REG_2,
+ 			       (long) p->insnsi >> 32,
+ 			       (u32) (long) p->insnsi);
+ 	/* call JITed bpf program or interpreter */
+ 	if (emit_call(&prog, p->bpf_func, prog))
+ 		return -EINVAL;
+ 
+ 	/* arg1: mov rdi, progs[i] */
+ 	emit_mov_imm64(&prog, BPF_REG_1, (long) p >> 32,
+ 		       (u32) (long) p);
+ 	/* arg2: mov rsi, rbx <- start time in nsec */
+ 	emit_mov_reg(&prog, true, BPF_REG_2, BPF_REG_6);
+ 	if (emit_call(&prog, __bpf_prog_exit, prog))
+ 		return -EINVAL;
+ 
+ 	*pprog = prog;
+ 	return 0;
+ }
+ 
+ static void emit_nops(u8 **pprog, unsigned int len)
+ {
+ 	unsigned int i, noplen;
+ 	u8 *prog = *pprog;
+ 	int cnt = 0;
+ 
+ 	while (len > 0) {
+ 		noplen = len;
+ 
+ 		if (noplen > ASM_NOP_MAX)
+ 			noplen = ASM_NOP_MAX;
+ 
+ 		for (i = 0; i < noplen; i++)
+ 			EMIT1(ideal_nops[noplen][i]);
+ 		len -= noplen;
+ 	}
+ 
+ 	*pprog = prog;
+ }
+ 
+ static void emit_align(u8 **pprog, u32 align)
+ {
+ 	u8 *target, *prog = *pprog;
+ 
+ 	target = PTR_ALIGN(prog, align);
+ 	if (target != prog)
+ 		emit_nops(&prog, target - prog);
+ 
+ 	*pprog = prog;
+ }
+ 
+ static int emit_cond_near_jump(u8 **pprog, void *func, void *ip, u8 jmp_cond)
+ {
+ 	u8 *prog = *pprog;
+ 	int cnt = 0;
+ 	s64 offset;
+ 
+ 	offset = func - (ip + 2 + 4);
+ 	if (!is_simm32(offset)) {
+ 		pr_err("Target %p is out of range\n", func);
+ 		return -EINVAL;
+ 	}
+ 	EMIT2_off32(0x0F, jmp_cond + 0x10, offset);
+ 	*pprog = prog;
+ 	return 0;
+ }
+ 
+ static int invoke_bpf(const struct btf_func_model *m, u8 **pprog,
+ 		      struct bpf_tramp_progs *tp, int stack_size)
+ {
+ 	int i;
+ 	u8 *prog = *pprog;
+ 
+ 	for (i = 0; i < tp->nr_progs; i++) {
+ 		if (invoke_bpf_prog(m, &prog, tp->progs[i], stack_size))
+ 			return -EINVAL;
+ 	}
+ 	*pprog = prog;
+ 	return 0;
+ }
+ 
+ /* Example:
+  * __be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev);
+  * its 'struct btf_func_model' will be nr_args=2
+  * The assembly code when eth_type_trans is executing after trampoline:
+  *
+  * push rbp
+  * mov rbp, rsp
+  * sub rsp, 16                     // space for skb and dev
+  * push rbx                        // temp regs to pass start time
+  * mov qword ptr [rbp - 16], rdi   // save skb pointer to stack
+  * mov qword ptr [rbp - 8], rsi    // save dev pointer to stack
+  * call __bpf_prog_enter           // rcu_read_lock and preempt_disable
+  * mov rbx, rax                    // remember start time in bpf stats are enabled
+  * lea rdi, [rbp - 16]             // R1==ctx of bpf prog
+  * call addr_of_jited_FENTRY_prog
+  * movabsq rdi, 64bit_addr_of_struct_bpf_prog  // unused if bpf stats are off
+  * mov rsi, rbx                    // prog start time
+  * call __bpf_prog_exit            // rcu_read_unlock, preempt_enable and stats math
+  * mov rdi, qword ptr [rbp - 16]   // restore skb pointer from stack
+  * mov rsi, qword ptr [rbp - 8]    // restore dev pointer from stack
+  * pop rbx
+  * leave
+  * ret
+  *
+  * eth_type_trans has 5 byte nop at the beginning. These 5 bytes will be
+  * replaced with 'call generated_bpf_trampoline'. When it returns
+  * eth_type_trans will continue executing with original skb and dev pointers.
+  *
+  * The assembly code when eth_type_trans is called from trampoline:
+  *
+  * push rbp
+  * mov rbp, rsp
+  * sub rsp, 24                     // space for skb, dev, return value
+  * push rbx                        // temp regs to pass start time
+  * mov qword ptr [rbp - 24], rdi   // save skb pointer to stack
+  * mov qword ptr [rbp - 16], rsi   // save dev pointer to stack
+  * call __bpf_prog_enter           // rcu_read_lock and preempt_disable
+  * mov rbx, rax                    // remember start time if bpf stats are enabled
+  * lea rdi, [rbp - 24]             // R1==ctx of bpf prog
+  * call addr_of_jited_FENTRY_prog  // bpf prog can access skb and dev
+  * movabsq rdi, 64bit_addr_of_struct_bpf_prog  // unused if bpf stats are off
+  * mov rsi, rbx                    // prog start time
+  * call __bpf_prog_exit            // rcu_read_unlock, preempt_enable and stats math
+  * mov rdi, qword ptr [rbp - 24]   // restore skb pointer from stack
+  * mov rsi, qword ptr [rbp - 16]   // restore dev pointer from stack
+  * call eth_type_trans+5           // execute body of eth_type_trans
+  * mov qword ptr [rbp - 8], rax    // save return value
+  * call __bpf_prog_enter           // rcu_read_lock and preempt_disable
+  * mov rbx, rax                    // remember start time in bpf stats are enabled
+  * lea rdi, [rbp - 24]             // R1==ctx of bpf prog
+  * call addr_of_jited_FEXIT_prog   // bpf prog can access skb, dev, return value
+  * movabsq rdi, 64bit_addr_of_struct_bpf_prog  // unused if bpf stats are off
+  * mov rsi, rbx                    // prog start time
+  * call __bpf_prog_exit            // rcu_read_unlock, preempt_enable and stats math
+  * mov rax, qword ptr [rbp - 8]    // restore eth_type_trans's return value
+  * pop rbx
+  * leave
+  * add rsp, 8                      // skip eth_type_trans's frame
+  * ret                             // return to its caller
+  */
+ int arch_prepare_bpf_trampoline(void *image, void *image_end,
+ 				const struct btf_func_model *m, u32 flags,
+ 				struct bpf_tramp_progs *tprogs,
+ 				void *orig_call)
+ {
+ 	int cnt = 0, nr_args = m->nr_args;
+ 	int stack_size = nr_args * 8;
+ 	struct bpf_tramp_progs *fentry = &tprogs[BPF_TRAMP_FENTRY];
+ 	struct bpf_tramp_progs *fexit = &tprogs[BPF_TRAMP_FEXIT];
+ 	u8 *prog;
+ 
+ 	/* x86-64 supports up to 6 arguments. 7+ can be added in the future */
+ 	if (nr_args > 6)
+ 		return -ENOTSUPP;
+ 
+ 	if ((flags & BPF_TRAMP_F_RESTORE_REGS) &&
+ 	    (flags & BPF_TRAMP_F_SKIP_FRAME))
+ 		return -EINVAL;
+ 
+ 	if (flags & BPF_TRAMP_F_CALL_ORIG)
+ 		stack_size += 8; /* room for return value of orig_call */
+ 
+ 	if (flags & BPF_TRAMP_F_SKIP_FRAME)
+ 		/* skip patched call instruction and point orig_call to actual
+ 		 * body of the kernel function.
+ 		 */
+ 		orig_call += X86_PATCH_SIZE;
+ 
+ 	prog = image;
+ 
+ 	EMIT1(0x55);		 /* push rbp */
+ 	EMIT3(0x48, 0x89, 0xE5); /* mov rbp, rsp */
+ 	EMIT4(0x48, 0x83, 0xEC, stack_size); /* sub rsp, stack_size */
+ 	EMIT1(0x53);		 /* push rbx */
+ 
+ 	save_regs(m, &prog, nr_args, stack_size);
+ 
+ 	if (fentry->nr_progs)
+ 		if (invoke_bpf(m, &prog, fentry, stack_size))
+ 			return -EINVAL;
+ 
+ 	if (flags & BPF_TRAMP_F_CALL_ORIG) {
+ 		if (fentry->nr_progs)
+ 			restore_regs(m, &prog, nr_args, stack_size);
+ 
+ 		/* call original function */
+ 		if (emit_call(&prog, orig_call, prog))
+ 			return -EINVAL;
+ 		/* remember return value in a stack for bpf prog to access */
+ 		emit_stx(&prog, BPF_DW, BPF_REG_FP, BPF_REG_0, -8);
+ 	}
+ 
+ 	if (fexit->nr_progs)
+ 		if (invoke_bpf(m, &prog, fexit, stack_size))
+ 			return -EINVAL;
+ 
+ 	if (flags & BPF_TRAMP_F_RESTORE_REGS)
+ 		restore_regs(m, &prog, nr_args, stack_size);
+ 
+ 	if (flags & BPF_TRAMP_F_CALL_ORIG)
+ 		/* restore original return value back into RAX */
+ 		emit_ldx(&prog, BPF_DW, BPF_REG_0, BPF_REG_FP, -8);
+ 
+ 	EMIT1(0x5B); /* pop rbx */
+ 	EMIT1(0xC9); /* leave */
+ 	if (flags & BPF_TRAMP_F_SKIP_FRAME)
+ 		/* skip our return address and return to parent */
+ 		EMIT4(0x48, 0x83, 0xC4, 8); /* add rsp, 8 */
+ 	EMIT1(0xC3); /* ret */
+ 	/* Make sure the trampoline generation logic doesn't overflow */
+ 	if (WARN_ON_ONCE(prog > (u8 *)image_end - BPF_INSN_SAFETY))
+ 		return -EFAULT;
+ 	return prog - (u8 *)image;
+ }
+ 
+ static int emit_fallback_jump(u8 **pprog)
+ {
+ 	u8 *prog = *pprog;
+ 	int err = 0;
+ 
+ #ifdef CONFIG_RETPOLINE
+ 	/* Note that this assumes the the compiler uses external
+ 	 * thunks for indirect calls. Both clang and GCC use the same
+ 	 * naming convention for external thunks.
+ 	 */
+ 	err = emit_jump(&prog, __x86_indirect_thunk_rdx, prog);
+ #else
+ 	int cnt = 0;
+ 
+ 	EMIT2(0xFF, 0xE2);	/* jmp rdx */
+ #endif
+ 	*pprog = prog;
+ 	return err;
+ }
+ 
+ static int emit_bpf_dispatcher(u8 **pprog, int a, int b, s64 *progs)
+ {
+ 	u8 *jg_reloc, *prog = *pprog;
+ 	int pivot, err, jg_bytes = 1, cnt = 0;
+ 	s64 jg_offset;
+ 
+ 	if (a == b) {
+ 		/* Leaf node of recursion, i.e. not a range of indices
+ 		 * anymore.
+ 		 */
+ 		EMIT1(add_1mod(0x48, BPF_REG_3));	/* cmp rdx,func */
+ 		if (!is_simm32(progs[a]))
+ 			return -1;
+ 		EMIT2_off32(0x81, add_1reg(0xF8, BPF_REG_3),
+ 			    progs[a]);
+ 		err = emit_cond_near_jump(&prog,	/* je func */
+ 					  (void *)progs[a], prog,
+ 					  X86_JE);
+ 		if (err)
+ 			return err;
+ 
+ 		err = emit_fallback_jump(&prog);	/* jmp thunk/indirect */
+ 		if (err)
+ 			return err;
+ 
+ 		*pprog = prog;
+ 		return 0;
+ 	}
+ 
+ 	/* Not a leaf node, so we pivot, and recursively descend into
+ 	 * the lower and upper ranges.
+ 	 */
+ 	pivot = (b - a) / 2;
+ 	EMIT1(add_1mod(0x48, BPF_REG_3));		/* cmp rdx,func */
+ 	if (!is_simm32(progs[a + pivot]))
+ 		return -1;
+ 	EMIT2_off32(0x81, add_1reg(0xF8, BPF_REG_3), progs[a + pivot]);
+ 
+ 	if (pivot > 2) {				/* jg upper_part */
+ 		/* Require near jump. */
+ 		jg_bytes = 4;
+ 		EMIT2_off32(0x0F, X86_JG + 0x10, 0);
+ 	} else {
+ 		EMIT2(X86_JG, 0);
+ 	}
+ 	jg_reloc = prog;
+ 
+ 	err = emit_bpf_dispatcher(&prog, a, a + pivot,	/* emit lower_part */
+ 				  progs);
+ 	if (err)
+ 		return err;
+ 
+ 	/* From Intel 64 and IA-32 Architectures Optimization
+ 	 * Reference Manual, 3.4.1.4 Code Alignment, Assembly/Compiler
+ 	 * Coding Rule 11: All branch targets should be 16-byte
+ 	 * aligned.
+ 	 */
+ 	emit_align(&prog, 16);
+ 	jg_offset = prog - jg_reloc;
+ 	emit_code(jg_reloc - jg_bytes, jg_offset, jg_bytes);
+ 
+ 	err = emit_bpf_dispatcher(&prog, a + pivot + 1,	/* emit upper_part */
+ 				  b, progs);
+ 	if (err)
+ 		return err;
+ 
+ 	*pprog = prog;
+ 	return 0;
+ }
+ 
+ static int cmp_ips(const void *a, const void *b)
+ {
+ 	const s64 *ipa = a;
+ 	const s64 *ipb = b;
+ 
+ 	if (*ipa > *ipb)
+ 		return 1;
+ 	if (*ipa < *ipb)
+ 		return -1;
+ 	return 0;
+ }
+ 
+ int arch_prepare_bpf_dispatcher(void *image, s64 *funcs, int num_funcs)
+ {
+ 	u8 *prog = image;
+ 
+ 	sort(funcs, num_funcs, sizeof(funcs[0]), cmp_ips, NULL);
+ 	return emit_bpf_dispatcher(&prog, 0, num_funcs - 1, funcs);
+ }
+ 
++>>>>>>> 7e639208e88d (bpf: JIT helpers for fmod_ret progs)
  struct x64_jit_data {
  	struct bpf_binary_header *header;
  	int *addrs;
* Unmerged path arch/x86/net/bpf_jit_comp.c
