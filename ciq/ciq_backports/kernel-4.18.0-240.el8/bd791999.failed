KVM: x86: Override host CPUID results with kvm_cpu_caps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit bd79199990477bf0c316b32bfcbd9862dc0f08ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/bd791999.failed

Override CPUID entries with kvm_cpu_caps during KVM_GET_SUPPORTED_CPUID
instead of masking the host CPUID result, which is redundant now that
the host CPUID is incorporated into kvm_cpu_caps at runtime.

No functional change intended.

	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit bd79199990477bf0c316b32bfcbd9862dc0f08ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/cpuid.c
#	arch/x86/kvm/cpuid.h
#	arch/x86/kvm/svm.c
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/cpuid.c
index 70fb27088e0c,493ea0e29450..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -534,13 -485,11 +534,18 @@@ static inline int __do_cpuid_func(struc
  		entry->eax = min(entry->eax, 0x1fU);
  		break;
  	case 1:
++<<<<<<< HEAD
 +		entry->edx &= kvm_cpuid_1_edx_x86_features;
 +		cpuid_mask(&entry->edx, CPUID_1_EDX);
 +		entry->ecx &= kvm_cpuid_1_ecx_x86_features;
 +		cpuid_mask(&entry->ecx, CPUID_1_ECX);
++=======
+ 		cpuid_entry_override(entry, CPUID_1_EDX);
+ 		cpuid_entry_override(entry, CPUID_1_ECX);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  		/* we support x2apic emulation even if host does not support
  		 * it since we emulate x2apic in software */
 -		cpuid_entry_set(entry, X86_FEATURE_X2APIC);
 +		entry->ecx |= F(X2APIC);
  		break;
  	case 2:
  		/*
@@@ -590,14 -530,32 +595,28 @@@
  		break;
  	/* function 7 has additional index. */
  	case 7:
++<<<<<<< HEAD
 +		do_cpuid_7_mask(entry);
++=======
+ 		entry->eax = min(entry->eax, 1u);
+ 		cpuid_entry_override(entry, CPUID_7_0_EBX);
+ 		cpuid_entry_override(entry, CPUID_7_ECX);
+ 		cpuid_entry_override(entry, CPUID_7_EDX);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  
 -		/* TSC_ADJUST and ARCH_CAPABILITIES are emulated in software. */
 -		cpuid_entry_set(entry, X86_FEATURE_TSC_ADJUST);
 -		cpuid_entry_set(entry, X86_FEATURE_ARCH_CAPABILITIES);
 -
 -		if (boot_cpu_has(X86_FEATURE_IBPB) && boot_cpu_has(X86_FEATURE_IBRS))
 -			cpuid_entry_set(entry, X86_FEATURE_SPEC_CTRL);
 -		if (boot_cpu_has(X86_FEATURE_STIBP))
 -			cpuid_entry_set(entry, X86_FEATURE_INTEL_STIBP);
 -		if (boot_cpu_has(X86_FEATURE_AMD_SSBD))
 -			cpuid_entry_set(entry, X86_FEATURE_SPEC_CTRL_SSBD);
 -
 -		/* KVM only supports 0x7.0 and 0x7.1, capped above via min(). */
 -		if (entry->eax == 1) {
 -			entry = do_host_cpuid(array, function, 1);
 +		for (i = 1, max_idx = entry->eax; i <= max_idx; i++) {
 +			entry = do_host_cpuid(array, function, i);
  			if (!entry)
  				goto out;
  
++<<<<<<< HEAD
 +			do_cpuid_7_mask(entry);
++=======
+ 			cpuid_entry_override(entry, CPUID_7_1_EAX);
+ 			entry->ebx = 0;
+ 			entry->ecx = 0;
+ 			entry->edx = 0;
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  		}
  		break;
  	case 9:
@@@ -662,10 -618,9 +681,14 @@@
  		if (!entry)
  			goto out;
  
++<<<<<<< HEAD
 +		entry->eax &= kvm_cpuid_D_1_eax_x86_features;
 +		cpuid_mask(&entry->eax, CPUID_D_1_EAX);
++=======
+ 		cpuid_entry_override(entry, CPUID_D_1_EAX);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  		if (entry->eax & (F(XSAVES)|F(XSAVEC)))
 -			entry->ebx = xstate_required_size(supported_xcr0, true);
 +			entry->ebx = xstate_required_size(supported, true);
  		else
  			entry->ebx = 0;
  		/* Saving XSS controlled state via XSAVES isn't supported. */
@@@ -743,10 -697,8 +766,15 @@@
  		entry->eax = min(entry->eax, 0x8000001f);
  		break;
  	case 0x80000001:
++<<<<<<< HEAD
 +		entry->edx &= kvm_cpuid_8000_0001_edx_x86_features;
 +		cpuid_mask(&entry->edx, CPUID_8000_0001_EDX);
 +		entry->ecx &= kvm_cpuid_8000_0001_ecx_x86_features;
 +		cpuid_mask(&entry->ecx, CPUID_8000_0001_ECX);
++=======
+ 		cpuid_entry_override(entry, CPUID_8000_0001_EDX);
+ 		cpuid_entry_override(entry, CPUID_8000_0001_ECX);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  		break;
  	case 0x80000007: /* Advanced power management */
  		/* invariant TSC is CPUID.80000007H:EDX[8] */
@@@ -764,8 -716,7 +792,12 @@@
  			g_phys_as = phys_as;
  		entry->eax = g_phys_as | (virt_as << 8);
  		entry->edx = 0;
++<<<<<<< HEAD
 +		entry->ebx &= kvm_cpuid_8000_0008_ebx_x86_features;
 +		cpuid_mask(&entry->ebx, CPUID_8000_0008_EBX);
++=======
+ 		cpuid_entry_override(entry, CPUID_8000_0008_EBX);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  		/*
  		 * AMD has separate bits for each SPEC_CTRL bit.
  		 * arch/x86/kernel/cpu/bugs.c is kind enough to
@@@ -807,8 -758,7 +839,12 @@@
  		entry->eax = min(entry->eax, 0xC0000004);
  		break;
  	case 0xC0000001:
++<<<<<<< HEAD
 +		entry->edx &= kvm_cpuid_C000_0001_edx_x86_features;
 +		cpuid_mask(&entry->edx, CPUID_C000_0001_EDX);
++=======
+ 		cpuid_entry_override(entry, CPUID_C000_0001_EDX);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  		break;
  	case 3: /* Processor serial number */
  	case 5: /* MONITOR/MWAIT */
diff --cc arch/x86/kvm/cpuid.h
index a2335b92a9a0,e9a3277ce256..000000000000
--- a/arch/x86/kvm/cpuid.h
+++ b/arch/x86/kvm/cpuid.h
@@@ -136,6 -138,47 +136,50 @@@ static __always_inline bool cpuid_entry
  	return cpuid_entry_get(entry, x86_feature);
  }
  
++<<<<<<< HEAD
++=======
+ static __always_inline void cpuid_entry_clear(struct kvm_cpuid_entry2 *entry,
+ 					      unsigned int x86_feature)
+ {
+ 	u32 *reg = cpuid_entry_get_reg(entry, x86_feature);
+ 
+ 	*reg &= ~__feature_bit(x86_feature);
+ }
+ 
+ static __always_inline void cpuid_entry_set(struct kvm_cpuid_entry2 *entry,
+ 					    unsigned int x86_feature)
+ {
+ 	u32 *reg = cpuid_entry_get_reg(entry, x86_feature);
+ 
+ 	*reg |= __feature_bit(x86_feature);
+ }
+ 
+ static __always_inline void cpuid_entry_change(struct kvm_cpuid_entry2 *entry,
+ 					       unsigned int x86_feature,
+ 					       bool set)
+ {
+ 	u32 *reg = cpuid_entry_get_reg(entry, x86_feature);
+ 
+ 	/*
+ 	 * Open coded instead of using cpuid_entry_{clear,set}() to coerce the
+ 	 * compiler into using CMOV instead of Jcc when possible.
+ 	 */
+ 	if (set)
+ 		*reg |= __feature_bit(x86_feature);
+ 	else
+ 		*reg &= ~__feature_bit(x86_feature);
+ }
+ 
+ static __always_inline void cpuid_entry_override(struct kvm_cpuid_entry2 *entry,
+ 						 enum cpuid_leafs leaf)
+ {
+ 	u32 *reg = cpuid_entry_get_reg(entry, leaf * 32);
+ 
+ 	BUILD_BUG_ON(leaf >= ARRAY_SIZE(kvm_cpu_caps));
+ 	*reg = kvm_cpu_caps[leaf];
+ }
+ 
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  static __always_inline u32 *guest_cpuid_get_register(struct kvm_vcpu *vcpu,
  						     unsigned int x86_feature)
  {
diff --cc arch/x86/kvm/svm.c
index 2c7c88ef7253,e897752524f2..000000000000
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@@ -6067,17 -6072,8 +6067,22 @@@ static void svm_set_supported_cpuid(u3
  		entry->ebx = 8; /* Lets support 8 ASIDs in case we add proper
  				   ASID emulation to nested SVM */
  		entry->ecx = 0; /* Reserved */
++<<<<<<< HEAD
 +		entry->edx = 0; /* Per default do not support any
 +				   additional features */
 +
 +		/* Support next_rip if host supports it */
 +		if (boot_cpu_has(X86_FEATURE_NRIPS))
 +			entry->edx |= F(NRIPS);
 +
 +		/* Support NPT for the guest if enabled */
 +		if (npt_enabled)
 +			entry->edx |= F(NPT);
 +
++=======
+ 		cpuid_entry_override(entry, CPUID_8000_000A_EDX);
+ 		break;
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  	}
  }
  
diff --cc arch/x86/kvm/vmx/vmx.c
index b4f527d117f1,4ba2c3e9fbcf..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -7251,10 -7123,45 +7251,45 @@@ static void vmx_cpuid_update(struct kvm
  	}
  }
  
 -/*
 - * Vendor specific emulation must be handled via ->set_supported_cpuid(), not
 - * vmx_set_cpu_caps(), as capabilities configured during hardware_setup() are
 - * masked against hardware/kernel support, i.e. they'd be lost.
 - */
 -static void vmx_set_supported_cpuid(struct kvm_cpuid_entry2 *entry)
 +static void vmx_set_supported_cpuid(u32 func, struct kvm_cpuid_entry2 *entry)
  {
++<<<<<<< HEAD
 +	if (func == 1 && nested)
 +		entry->ecx |= feature_bit(VMX);
++=======
+ }
+ 
+ static __init void vmx_set_cpu_caps(void)
+ {
+ 	kvm_set_cpu_caps();
+ 
+ 	/* CPUID 0x1 */
+ 	if (nested)
+ 		kvm_cpu_cap_set(X86_FEATURE_VMX);
+ 
+ 	/* CPUID 0x7 */
+ 	if (kvm_mpx_supported())
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_MPX);
+ 	if (cpu_has_vmx_invpcid())
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_INVPCID);
+ 	if (vmx_pt_mode_is_host_guest())
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_INTEL_PT);
+ 
+ 	/* PKU is not yet implemented for shadow paging. */
+ 	if (enable_ept && boot_cpu_has(X86_FEATURE_OSPKE))
+ 		kvm_cpu_cap_check_and_set(X86_FEATURE_PKU);
+ 
+ 	if (vmx_umip_emulated())
+ 		kvm_cpu_cap_set(X86_FEATURE_UMIP);
+ 
+ 	/* CPUID 0xD.1 */
+ 	if (!vmx_xsaves_supported())
+ 		kvm_cpu_cap_clear(X86_FEATURE_XSAVES);
+ 
+ 	/* CPUID 0x80000001 */
+ 	if (!cpu_has_vmx_rdtscp())
+ 		kvm_cpu_cap_clear(X86_FEATURE_RDTSCP);
++>>>>>>> bd7919999047 (KVM: x86: Override host CPUID results with kvm_cpu_caps)
  }
  
  static void vmx_request_immediate_exit(struct kvm_vcpu *vcpu)
* Unmerged path arch/x86/kvm/cpuid.c
* Unmerged path arch/x86/kvm/cpuid.h
* Unmerged path arch/x86/kvm/svm.c
* Unmerged path arch/x86/kvm/vmx/vmx.c
