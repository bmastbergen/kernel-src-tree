sched/vtime: Introduce vtime_accounting_enabled_cpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Frederic Weisbecker <frederic@kernel.org>
commit 9adbb9dd4c4eb45e1129fc73d8de69ca72350f81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9adbb9dd.failed

This allows us to check if a remote CPU runs vtime accounting
(ie: is nohz_full). We'll need that to reliably support reading kcpustat
on nohz_full CPUs.

Also simplify a bit the condition in the local flavoured function while
at it.

	Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Jacek Anaszewski <jacek.anaszewski@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Pavel Machek <pavel@ucw.cz>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rafael J . Wysocki <rjw@rjwysocki.net>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Viresh Kumar <viresh.kumar@linaro.org>
	Cc: Wanpeng Li <wanpengli@tencent.com>
	Cc: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
Link: https://lkml.kernel.org/r/20191016025700.31277-10-frederic@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 9adbb9dd4c4eb45e1129fc73d8de69ca72350f81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/vtime.h
diff --cc include/linux/vtime.h
index a26ed10a4eac,e2733bf33541..000000000000
--- a/include/linux/vtime.h
+++ b/include/linux/vtime.h
@@@ -24,23 -28,35 +24,42 @@@ static inline bool vtime_accounting_cpu
   */
  static inline bool vtime_accounting_enabled(void)
  {
 -	return context_tracking_enabled();
 +	return context_tracking_is_enabled();
  }
  
++<<<<<<< HEAD
 +static inline bool vtime_accounting_cpu_enabled(void)
 +{
 +	if (vtime_accounting_enabled()) {
 +		if (context_tracking_cpu_is_enabled())
 +			return true;
 +	}
 +
 +	return false;
++=======
+ static inline bool vtime_accounting_enabled_cpu(int cpu)
+ {
+ 	return (vtime_accounting_enabled() && context_tracking_enabled_cpu(cpu));
+ }
+ 
+ static inline bool vtime_accounting_enabled_this_cpu(void)
+ {
+ 	return (vtime_accounting_enabled() && context_tracking_enabled_this_cpu());
++>>>>>>> 9adbb9dd4c4e (sched/vtime: Introduce vtime_accounting_enabled_cpu())
  }
 -
 -extern void vtime_task_switch_generic(struct task_struct *prev);
 -
 -static inline void vtime_task_switch(struct task_struct *prev)
 -{
 -	if (vtime_accounting_enabled_this_cpu())
 -		vtime_task_switch_generic(prev);
 -}
 -
  #else /* !CONFIG_VIRT_CPU_ACCOUNTING */
++<<<<<<< HEAD
 +static inline bool vtime_accounting_cpu_enabled(void) { return false; }
++=======
+ 
+ static inline bool vtime_accounting_enabled_cpu(int cpu) {return false; }
+ static inline bool vtime_accounting_enabled_this_cpu(void) { return false; }
+ static inline void vtime_task_switch(struct task_struct *prev) { }
+ 
++>>>>>>> 9adbb9dd4c4e (sched/vtime: Introduce vtime_accounting_enabled_cpu())
  #endif
  
 +
  /*
   * Common vtime APIs
   */
* Unmerged path include/linux/vtime.h
