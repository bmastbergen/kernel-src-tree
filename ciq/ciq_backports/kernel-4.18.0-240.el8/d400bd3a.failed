libperf: Add cpus to struct perf_evsel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit d400bd3abf2cc68df2df32047d3533faf690f404
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d400bd3a.failed

Mov the 'cpus' field from tools/perf's evsel to libperf's perf_evsel.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-51-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d400bd3abf2cc68df2df32047d3533faf690f404)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
#	tools/perf/lib/include/internal/evsel.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/parse-events.c
#	tools/perf/util/scripting-engines/trace-event-python.c
diff --cc tools/perf/builtin-record.c
index 6dccaf4058f3,090aaa2cf4b3..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -740,7 -739,7 +740,11 @@@ static int record__open(struct record *
  
  	evlist__for_each_entry(evlist, pos) {
  try_again:
++<<<<<<< HEAD
 +		if (perf_evsel__open(pos, pos->cpus, pos->threads) < 0) {
++=======
+ 		if (evsel__open(pos, pos->core.cpus, pos->threads) < 0) {
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  			if (perf_evsel__fallback(pos, errno, msg, sizeof(msg))) {
  				if (verbose > 0)
  					ui__warning("%s\n", msg);
diff --cc tools/perf/util/evlist.c
index 4739b7914374,713968130d1d..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -159,20 -160,20 +159,28 @@@ static void __perf_evlist__propagate_ma
  	 * keep it, if there's no target cpu list defined.
  	 */
  	if (!evsel->own_cpus || evlist->has_user_cpus) {
++<<<<<<< HEAD
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evlist->cpus);
 +	} else if (evsel->cpus != evsel->own_cpus) {
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evsel->own_cpus);
++=======
+ 		perf_cpu_map__put(evsel->core.cpus);
+ 		evsel->core.cpus = perf_cpu_map__get(evlist->cpus);
+ 	} else if (evsel->core.cpus != evsel->own_cpus) {
+ 		perf_cpu_map__put(evsel->core.cpus);
+ 		evsel->core.cpus = perf_cpu_map__get(evsel->own_cpus);
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  	}
  
 -	perf_thread_map__put(evsel->threads);
 -	evsel->threads = perf_thread_map__get(evlist->threads);
 +	thread_map__put(evsel->threads);
 +	evsel->threads = thread_map__get(evlist->threads);
  }
  
 -static void perf_evlist__propagate_maps(struct evlist *evlist)
 +static void perf_evlist__propagate_maps(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evlist__propagate_maps(evlist, evsel);
@@@ -1406,7 -1407,7 +1414,11 @@@ int perf_evlist__open(struct perf_evlis
  	perf_evlist__update_id_pos(evlist);
  
  	evlist__for_each_entry(evlist, evsel) {
++<<<<<<< HEAD
 +		err = perf_evsel__open(evsel, evsel->cpus, evsel->threads);
++=======
+ 		err = evsel__open(evsel, evsel->core.cpus, evsel->threads);
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  		if (err < 0)
  			goto out_err;
  	}
diff --cc tools/perf/util/evsel.c
index e99257f738ba,651f66ee902e..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1326,9 -1325,9 +1326,15 @@@ void perf_evsel__exit(struct perf_evse
  	perf_evsel__free_id(evsel);
  	perf_evsel__free_config_terms(evsel);
  	cgroup__put(evsel->cgrp);
++<<<<<<< HEAD
 +	cpu_map__put(evsel->cpus);
 +	cpu_map__put(evsel->own_cpus);
 +	thread_map__put(evsel->threads);
++=======
+ 	perf_cpu_map__put(evsel->core.cpus);
+ 	perf_cpu_map__put(evsel->own_cpus);
+ 	perf_thread_map__put(evsel->threads);
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  	zfree(&evsel->group_name);
  	zfree(&evsel->name);
  	perf_evsel__object.fini(evsel);
@@@ -3063,10 -3062,10 +3069,15 @@@ static int store_evsel_ids(struct perf_
  	return 0;
  }
  
 -int perf_evsel__store_ids(struct evsel *evsel, struct evlist *evlist)
 +int perf_evsel__store_ids(struct perf_evsel *evsel, struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct cpu_map *cpus = evsel->cpus;
 +	struct thread_map *threads = evsel->threads;
++=======
+ 	struct perf_cpu_map *cpus = evsel->core.cpus;
+ 	struct perf_thread_map *threads = evsel->threads;
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  
  	if (perf_evsel__alloc_id(evsel, cpus->nr, threads->nr))
  		return -ENOMEM;
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,8ece5edf65ac..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -124,9 -123,8 +124,14 @@@ struct perf_evsel 
  	u64			db_id;
  	struct cgroup		*cgrp;
  	void			*handler;
++<<<<<<< HEAD
 +	struct cpu_map		*cpus;
 +	struct cpu_map		*own_cpus;
 +	struct thread_map	*threads;
++=======
+ 	struct perf_cpu_map	*own_cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  	unsigned int		sample_size;
  	int			id_pos;
  	int			is_pos;
@@@ -197,14 -195,14 +202,14 @@@ struct target
  struct thread_map;
  struct record_opts;
  
 -static inline struct perf_cpu_map *evsel__cpus(struct evsel *evsel)
 +static inline struct cpu_map *perf_evsel__cpus(struct perf_evsel *evsel)
  {
- 	return evsel->cpus;
+ 	return evsel->core.cpus;
  }
  
 -static inline int perf_evsel__nr_cpus(struct evsel *evsel)
 +static inline int perf_evsel__nr_cpus(struct perf_evsel *evsel)
  {
 -	return evsel__cpus(evsel)->nr;
 +	return perf_evsel__cpus(evsel)->nr;
  }
  
  void perf_counts_values__scale(struct perf_counts_values *count,
diff --cc tools/perf/util/parse-events.c
index 0540303e5e97,a27771eca9c2..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -332,8 -333,8 +332,13 @@@ __add_event(struct list_head *list, in
  		return NULL;
  
  	(*idx)++;
++<<<<<<< HEAD
 +	evsel->cpus        = cpu_map__get(cpus);
 +	evsel->own_cpus    = cpu_map__get(cpus);
++=======
+ 	evsel->core.cpus   = perf_cpu_map__get(cpus);
+ 	evsel->own_cpus    = perf_cpu_map__get(cpus);
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  	evsel->system_wide = pmu ? pmu->is_uncore : false;
  	evsel->auto_merge_stats = auto_merge_stats;
  
diff --cc tools/perf/util/scripting-engines/trace-event-python.c
index 25dc1d765553,c5f520e0885b..000000000000
--- a/tools/perf/util/scripting-engines/trace-event-python.c
+++ b/tools/perf/util/scripting-engines/trace-event-python.c
@@@ -1390,10 -1390,10 +1390,15 @@@ process_stat(struct perf_evsel *counter
  }
  
  static void python_process_stat(struct perf_stat_config *config,
 -				struct evsel *counter, u64 tstamp)
 +				struct perf_evsel *counter, u64 tstamp)
  {
++<<<<<<< HEAD
 +	struct thread_map *threads = counter->threads;
 +	struct cpu_map *cpus = counter->cpus;
++=======
+ 	struct perf_thread_map *threads = counter->threads;
+ 	struct perf_cpu_map *cpus = counter->core.cpus;
++>>>>>>> d400bd3abf2c (libperf: Add cpus to struct perf_evsel)
  	int cpu, thread;
  
  	if (config->aggr_mode == AGGR_GLOBAL) {
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/builtin-record.c
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 381a10d3337c..f3a8288f9974 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -1921,7 +1921,7 @@ static void __process_stat(struct perf_evsel *counter, u64 tstamp)
 			counts = perf_counts(counter->counts, cpu, thread);
 
 			printf("%3d %8d %15" PRIu64 " %15" PRIu64 " %15" PRIu64 " %15" PRIu64 " %s\n",
-				counter->cpus->map[cpu],
+				counter->core.cpus->map[cpu],
 				thread_map__pid(counter->threads, thread),
 				counts->val,
 				counts->ena,
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/parse-events.c
* Unmerged path tools/perf/util/scripting-engines/trace-event-python.c
diff --git a/tools/perf/util/stat-display.c b/tools/perf/util/stat-display.c
index 58df6a0dbb9f..6eabc61e86ed 100644
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@ -745,7 +745,7 @@ static void print_aggr_thread(struct perf_stat_config *config,
 {
 	FILE *output = config->output;
 	int nthreads = thread_map__nr(counter->threads);
-	int ncpus = cpu_map__nr(counter->cpus);
+	int ncpus = cpu_map__nr(counter->core.cpus);
 	int thread, sorted_threads, id;
 	struct perf_aggr_thread_value *buf;
 
