cgroup/cpuset: Change cpuset_rwsem and hotplug lock order

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Juri Lelli <juri.lelli@redhat.com>
commit d74b27d63a8bebe2fe634944e4ebdc7b10db7a39
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d74b27d6.failed

cpuset_rwsem is going to be acquired from sched_setscheduler() with a
following patch. There are however paths (e.g., spawn_ksoftirqd) in
which sched_scheduler() is eventually called while holding hotplug lock;
this creates a dependecy between hotplug lock (to be always acquired
first) and cpuset_rwsem (to be always acquired after hotplug lock).

Fix paths which currently take the two locks in the wrong order (after
a following patch is applied).

	Tested-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
	Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: bristot@redhat.com
	Cc: claudio@evidence.eu.com
	Cc: lizefan@huawei.com
	Cc: longman@redhat.com
	Cc: luca.abeni@santannapisa.it
	Cc: mathieu.poirier@linaro.org
	Cc: rostedt@goodmis.org
	Cc: tj@kernel.org
	Cc: tommaso.cucinotta@santannapisa.it
Link: https://lkml.kernel.org/r/20190719140000.31694-7-juri.lelli@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d74b27d63a8bebe2fe634944e4ebdc7b10db7a39)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/cgroup/cpuset.c
diff --cc kernel/cgroup/cpuset.c
index 6f44b6b04fcb,5c5014caa23c..000000000000
--- a/kernel/cgroup/cpuset.c
+++ b/kernel/cgroup/cpuset.c
@@@ -936,8 -973,8 +936,13 @@@ static void rebuild_sched_domains_locke
  	cpumask_var_t *doms;
  	int ndoms;
  
++<<<<<<< HEAD
 +	lockdep_assert_held(&cpuset_mutex);
 +	get_online_cpus();
++=======
+ 	lockdep_assert_cpus_held();
+ 	percpu_rwsem_assert_held(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  
  	/*
  	 * We have raced with CPU hotplug. Don't do anything to avoid
@@@ -956,9 -993,7 +961,13 @@@
  	ndoms = generate_sched_domains(&doms, &attr);
  
  	/* Have scheduler rebuild the domains */
++<<<<<<< HEAD
 +	partition_sched_domains(ndoms, doms, attr);
 +out:
 +	put_online_cpus();
++=======
+ 	partition_and_rebuild_sched_domains(ndoms, doms, attr);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  }
  #else /* !CONFIG_SMP */
  static void rebuild_sched_domains_locked(void)
@@@ -968,9 -1003,11 +977,17 @@@
  
  void rebuild_sched_domains(void)
  {
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
 +	rebuild_sched_domains_locked();
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
+ 	rebuild_sched_domains_locked();
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  }
  
  /**
@@@ -2208,7 -2245,8 +2225,12 @@@ static int cpuset_write_u64(struct cgro
  	cpuset_filetype_t type = cft->private;
  	int retval = 0;
  
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	if (!is_cpuset_online(cs)) {
  		retval = -ENODEV;
  		goto out_unlock;
@@@ -2244,7 -2282,8 +2266,12 @@@
  		break;
  	}
  out_unlock:
++<<<<<<< HEAD
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	return retval;
  }
  
@@@ -2255,7 -2294,8 +2282,12 @@@ static int cpuset_write_s64(struct cgro
  	cpuset_filetype_t type = cft->private;
  	int retval = -ENODEV;
  
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	if (!is_cpuset_online(cs))
  		goto out_unlock;
  
@@@ -2268,7 -2308,8 +2300,12 @@@
  		break;
  	}
  out_unlock:
++<<<<<<< HEAD
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	return retval;
  }
  
@@@ -2307,7 -2348,8 +2344,12 @@@ static ssize_t cpuset_write_resmask(str
  	kernfs_break_active_protection(of->kn);
  	flush_work(&cpuset_hotplug_work);
  
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	if (!is_cpuset_online(cs))
  		goto out_unlock;
  
@@@ -2331,7 -2373,8 +2373,12 @@@
  
  	free_cpuset(trialcs);
  out_unlock:
++<<<<<<< HEAD
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	kernfs_unbreak_active_protection(of->kn);
  	css_put(&cs->css);
  	flush_workqueue(cpuset_migrate_mm_wq);
@@@ -2462,13 -2505,15 +2509,23 @@@ static ssize_t sched_partition_write(st
  		return -EINVAL;
  
  	css_get(&cs->css);
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	if (!is_cpuset_online(cs))
  		goto out_unlock;
  
  	retval = update_prstate(cs, val);
  out_unlock:
++<<<<<<< HEAD
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	css_put(&cs->css);
  	return retval ?: nbytes;
  }
@@@ -2674,7 -2719,8 +2731,12 @@@ static int cpuset_css_online(struct cgr
  	if (!parent)
  		return 0;
  
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  
  	set_bit(CS_ONLINE, &cs->flags);
  	if (is_spread_page(parent))
@@@ -2725,7 -2771,8 +2787,12 @@@
  	cpumask_copy(cs->effective_cpus, parent->cpus_allowed);
  	spin_unlock_irq(&callback_lock);
  out_unlock:
++<<<<<<< HEAD
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  	return 0;
  }
  
@@@ -2744,7 -2791,8 +2811,12 @@@ static void cpuset_css_offline(struct c
  {
  	struct cpuset *cs = css_cs(css);
  
++<<<<<<< HEAD
 +	mutex_lock(&cpuset_mutex);
++=======
+ 	get_online_cpus();
+ 	percpu_down_write(&cpuset_rwsem);
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  
  	if (is_partition_root(cs))
  		update_prstate(cs, 0);
@@@ -2763,7 -2811,8 +2835,12 @@@
  	cpuset_dec();
  	clear_bit(CS_ONLINE, &cs->flags);
  
++<<<<<<< HEAD
 +	mutex_unlock(&cpuset_mutex);
++=======
+ 	percpu_up_write(&cpuset_rwsem);
+ 	put_online_cpus();
++>>>>>>> d74b27d63a8b (cgroup/cpuset: Change cpuset_rwsem and hotplug lock order)
  }
  
  static void cpuset_css_free(struct cgroup_subsys_state *css)
diff --git a/include/linux/cpuset.h b/include/linux/cpuset.h
index 934633a05d20..7f1478c26a33 100644
--- a/include/linux/cpuset.h
+++ b/include/linux/cpuset.h
@@ -40,14 +40,14 @@ static inline bool cpusets_enabled(void)
 
 static inline void cpuset_inc(void)
 {
-	static_branch_inc(&cpusets_pre_enable_key);
-	static_branch_inc(&cpusets_enabled_key);
+	static_branch_inc_cpuslocked(&cpusets_pre_enable_key);
+	static_branch_inc_cpuslocked(&cpusets_enabled_key);
 }
 
 static inline void cpuset_dec(void)
 {
-	static_branch_dec(&cpusets_enabled_key);
-	static_branch_dec(&cpusets_pre_enable_key);
+	static_branch_dec_cpuslocked(&cpusets_enabled_key);
+	static_branch_dec_cpuslocked(&cpusets_pre_enable_key);
 }
 
 extern int cpuset_init(void);
* Unmerged path kernel/cgroup/cpuset.c
