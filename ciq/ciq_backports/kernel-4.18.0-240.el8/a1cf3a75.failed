perf evlist: Rename perf_evlist__add() to evlist__add()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit a1cf3a75d3317ed893d453c222d220ca4d5f4c4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a1cf3a75.failed

Rename perf_evlist__add() to evlist__add(), so we don't have a name
clash when we add perf_evlist__add() in libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-13-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a1cf3a75d3317ed893d453c222d220ca4d5f4c4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/builtin-trace.c
index 9f9c869e0f26,89ae4737ef74..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2616,10 -2616,10 +2616,14 @@@ static int trace__record(struct trace *
  
  static size_t trace__fprintf_thread_summary(struct trace *trace, FILE *fp);
  
++<<<<<<< HEAD
 +static bool perf_evlist__add_vfs_getname(struct perf_evlist *evlist)
++=======
+ static bool evlist__add_vfs_getname(struct evlist *evlist)
++>>>>>>> a1cf3a75d331 (perf evlist: Rename perf_evlist__add() to evlist__add())
  {
  	bool found = false;
 -	struct evsel *evsel, *tmp;
 +	struct perf_evsel *evsel, *tmp;
  	struct parse_events_error err = { .idx = 0, };
  	int ret = parse_events(evlist, "probe:vfs_getname*", &err);
  
diff --cc tools/perf/util/evlist.c
index 4739b7914374,7741e12bdcb0..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -178,7 -177,7 +178,11 @@@ static void perf_evlist__propagate_maps
  		__perf_evlist__propagate_maps(evlist, evsel);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry)
++=======
+ void evlist__add(struct evlist *evlist, struct evsel *entry)
++>>>>>>> a1cf3a75d331 (perf evlist: Rename perf_evlist__add() to evlist__add())
  {
  	entry->evlist = evlist;
  	list_add_tail(&entry->node, &evlist->entries);
@@@ -258,10 -257,10 +262,14 @@@ int perf_evlist__add_dummy(struct perf_
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int perf_evlist__add_attrs(struct perf_evlist *evlist,
++=======
+ static int evlist__add_attrs(struct evlist *evlist,
++>>>>>>> a1cf3a75d331 (perf evlist: Rename perf_evlist__add() to evlist__add())
  				  struct perf_event_attr *attrs, size_t nr_attrs)
  {
 -	struct evsel *evsel, *n;
 +	struct perf_evsel *evsel, *n;
  	LIST_HEAD(head);
  	size_t i;
  
@@@ -290,13 -289,13 +298,13 @@@ int __perf_evlist__add_default_attrs(st
  	for (i = 0; i < nr_attrs; i++)
  		event_attr_init(attrs + i);
  
- 	return perf_evlist__add_attrs(evlist, attrs, nr_attrs);
+ 	return evlist__add_attrs(evlist, attrs, nr_attrs);
  }
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id)
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->attr.type   == PERF_TYPE_TRACEPOINT &&
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,d52b29a1d852..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -65,20 -65,20 +65,25 @@@ struct perf_evsel_str_handler 
  	void	   *handler;
  };
  
 -struct evlist *evlist__new(void);
 -struct evlist *perf_evlist__new_default(void);
 -struct evlist *perf_evlist__new_dummy(void);
 -void evlist__init(struct evlist *evlist, struct perf_cpu_map *cpus,
 -		  struct perf_thread_map *threads);
 -void perf_evlist__exit(struct evlist *evlist);
 -void evlist__delete(struct evlist *evlist);
 -
 +struct perf_evlist *perf_evlist__new(void);
 +struct perf_evlist *perf_evlist__new_default(void);
 +struct perf_evlist *perf_evlist__new_dummy(void);
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads);
 +void perf_evlist__exit(struct perf_evlist *evlist);
 +void perf_evlist__delete(struct perf_evlist *evlist);
 +
++<<<<<<< HEAD
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry);
 +void perf_evlist__remove(struct perf_evlist *evlist, struct perf_evsel *evsel);
++=======
+ void evlist__add(struct evlist *evlist, struct evsel *entry);
+ void perf_evlist__remove(struct evlist *evlist, struct evsel *evsel);
++>>>>>>> a1cf3a75d331 (perf evlist: Rename perf_evlist__add() to evlist__add())
  
 -int __perf_evlist__add_default(struct evlist *evlist, bool precise);
 +int __perf_evlist__add_default(struct perf_evlist *evlist, bool precise);
  
 -static inline int perf_evlist__add_default(struct evlist *evlist)
 +static inline int perf_evlist__add_default(struct perf_evlist *evlist)
  {
  	return __perf_evlist__add_default(evlist, true);
  }
* Unmerged path tools/perf/builtin-trace.c
diff --git a/tools/perf/tests/mmap-basic.c b/tools/perf/tests/mmap-basic.c
index 0919b0793e5b..683dfbc568f6 100644
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@ -82,7 +82,7 @@ int test__basic_mmap(struct test *test __maybe_unused, int subtest __maybe_unuse
 		evsels[i]->attr.wakeup_events = 1;
 		perf_evsel__set_sample_id(evsels[i], false);
 
-		perf_evlist__add(evlist, evsels[i]);
+		evlist__add(evlist, evsels[i]);
 
 		if (perf_evsel__open(evsels[i], cpus, threads) < 0) {
 			pr_debug("failed to open counter: %s, "
diff --git a/tools/perf/tests/openat-syscall-tp-fields.c b/tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469..4a69d0d6add3 100644
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@ -48,7 +48,7 @@ int test__syscall_openat_tp_fields(struct test *test __maybe_unused, int subtest
 		goto out_delete_evlist;
 	}
 
-	perf_evlist__add(evlist, evsel);
+	evlist__add(evlist, evsel);
 
 	err = perf_evlist__create_maps(evlist, &opts.target);
 	if (err < 0) {
diff --git a/tools/perf/tests/sw-clock.c b/tools/perf/tests/sw-clock.c
index f9490b237893..1db5be4a34cb 100644
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@ -54,7 +54,7 @@ static int __test__sw_clock_freq(enum perf_sw_ids clock_id)
 		pr_debug("perf_evsel__new\n");
 		goto out_delete_evlist;
 	}
-	perf_evlist__add(evlist, evsel);
+	evlist__add(evlist, evsel);
 
 	cpus = cpu_map__dummy_new();
 	threads = thread_map__new_by_tid(getpid());
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index c3fbdc63c78a..cb46a939f574 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -3585,7 +3585,7 @@ int perf_session__read_header(struct perf_session *session)
 		 * Do it before so that if perf_evsel__alloc_id fails, this
 		 * entry gets purged too at perf_evlist__delete().
 		 */
-		perf_evlist__add(session->evlist, evsel);
+		evlist__add(session->evlist, evsel);
 
 		nr_ids = f_attr.ids.size / sizeof(u64);
 		/*
@@ -4017,7 +4017,7 @@ int perf_event__process_attr(struct perf_tool *tool __maybe_unused,
 	if (evsel == NULL)
 		return -ENOMEM;
 
-	perf_evlist__add(evlist, evsel);
+	evlist__add(evlist, evsel);
 
 	ids = event->header.size;
 	ids -= (void *)&event->attr.id - (void *)event;
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 1e5b6718dcea..240c3d9aa751 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -974,7 +974,7 @@ static PyObject *pyrf_evlist__add(struct pyrf_evlist *pevlist,
 	Py_INCREF(pevsel);
 	evsel = &((struct pyrf_evsel *)pevsel)->evsel;
 	evsel->idx = evlist->nr_entries;
-	perf_evlist__add(evlist, evsel);
+	evlist__add(evlist, evsel);
 
 	return Py_BuildValue("i", evlist->nr_entries);
 }
