Bluetooth: Support querying for WBS support through MGMT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alain Michaud <alainm@chromium.org>
commit 4b127bd5f2cc1b2da041f472dab6dc729cdd4711
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4b127bd5.failed

This patch provides a mechanism for MGMT interface client to query the
capability of the controller to support WBS.

	Signed-off-by: Alain Michaud <alainm@chromium.org>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 4b127bd5f2cc1b2da041f472dab6dc729cdd4711)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bluetooth/hci.h
#	include/net/bluetooth/mgmt.h
diff --cc include/net/bluetooth/hci.h
index 1668211297a9,0b3ebd35681d..000000000000
--- a/include/net/bluetooth/hci.h
+++ b/include/net/bluetooth/hci.h
@@@ -183,6 -196,24 +183,27 @@@ enum 
  	 * during the hdev->setup vendor callback.
  	 */
  	HCI_QUIRK_NON_PERSISTENT_DIAG,
++<<<<<<< HEAD
++=======
+ 
+ 	/* When this quirk is set, setup() would be run after every
+ 	 * open() and not just after the first open().
+ 	 *
+ 	 * This quirk can be set before hci_register_dev is called or
+ 	 * during the hdev->setup vendor callback.
+ 	 *
+ 	 */
+ 	HCI_QUIRK_NON_PERSISTENT_SETUP,
+ 
+ 	/* When this quirk is set, wide band speech is supported by
+ 	 * the driver since no reliable mechanism exist to report
+ 	 * this from the hardware, a driver flag is use to convey
+ 	 * this support
+ 	 *
+ 	 * This quirk must be set before hci_register_dev is called.
+ 	 */
+ 	HCI_QUIRK_WIDE_BAND_SPEECH_SUPPORTED,
++>>>>>>> 4b127bd5f2cc (Bluetooth: Support querying for WBS support through MGMT)
  };
  
  /* HCI device flags */
diff --cc include/net/bluetooth/mgmt.h
index e7303eee65cd,f69f88e8e109..000000000000
--- a/include/net/bluetooth/mgmt.h
+++ b/include/net/bluetooth/mgmt.h
@@@ -101,6 -101,8 +101,11 @@@ struct mgmt_rp_read_index_list 
  #define MGMT_SETTING_PRIVACY		0x00002000
  #define MGMT_SETTING_CONFIGURATION	0x00004000
  #define MGMT_SETTING_STATIC_ADDRESS	0x00008000
++<<<<<<< HEAD
++=======
+ #define MGMT_SETTING_PHY_CONFIGURATION	0x00010000
+ #define MGMT_SETTING_WIDE_BAND_SPEECH	0x00020000
++>>>>>>> 4b127bd5f2cc (Bluetooth: Support querying for WBS support through MGMT)
  
  #define MGMT_OP_READ_INFO		0x0004
  #define MGMT_READ_INFO_SIZE		0
diff --git a/drivers/bluetooth/btusb.c b/drivers/bluetooth/btusb.c
index f9f1be91d4c8..c4d71f26251c 100644
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@ -3162,6 +3162,9 @@ static int btusb_probe(struct usb_interface *intf,
 	if (id->driver_info & BTUSB_BROKEN_ISOC)
 		data->isoc = NULL;
 
+	if (id->driver_info & BTUSB_WIDEBAND_SPEECH)
+		set_bit(HCI_QUIRK_WIDE_BAND_SPEECH_SUPPORTED, &hdev->quirks);
+
 	if (id->driver_info & BTUSB_DIGIANSWER) {
 		data->cmdreq_type = USB_TYPE_VENDOR;
 		set_bit(HCI_QUIRK_RESET_ON_CLOSE, &hdev->quirks);
* Unmerged path include/net/bluetooth/hci.h
* Unmerged path include/net/bluetooth/mgmt.h
diff --git a/net/bluetooth/mgmt.c b/net/bluetooth/mgmt.c
index 8a80d48d89c4..e6a153c28d93 100644
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@ -640,6 +640,10 @@ static u32 get_supported_settings(struct hci_dev *hdev)
 
 		if (lmp_sc_capable(hdev))
 			settings |= MGMT_SETTING_SECURE_CONN;
+
+		if (test_bit(HCI_QUIRK_WIDE_BAND_SPEECH_SUPPORTED,
+			     &hdev->quirks))
+			settings |= MGMT_SETTING_WIDE_BAND_SPEECH;
 	}
 
 	if (lmp_le_capable(hdev)) {
