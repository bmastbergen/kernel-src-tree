perf/x86/rapl: Add Ice Lake RAPL support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Kan Liang <kan.liang@linux.intel.com>
commit f649fc2eefdef7a67698a3c584222c5c8c5a6785
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f649fc2e.failed

Enable RAPL support for Intel Ice Lake X and Ice Lake D.

For RAPL support, it is identical to Sky Lake X.

	Reported-by: Stephane Eranian <eranian@google.com>
	Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lkml.kernel.org/r/1588857258-38213-1-git-send-email-kan.liang@linux.intel.com
(cherry picked from commit f649fc2eefdef7a67698a3c584222c5c8c5a6785)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/rapl.c
diff --cc arch/x86/events/intel/rapl.c
index c562c4b1bf60,9e1e141d22d3..000000000000
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@@ -715,36 -713,37 +715,68 @@@ static struct rapl_model model_skl = 
  };
  
  static const struct x86_cpu_id rapl_model_match[] __initconst = {
++<<<<<<< HEAD
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,		model_snb),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X,		model_snbep),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,		model_snb),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X,		model_snbep),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL,		model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_X,		model_hsx),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_L,		model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_G,		model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL,		model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_G,		model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,		model_hsx),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_D,		model_hsx),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL,		model_knl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM,		model_knl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_L,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,		model_hsx),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_L,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_CANNONLAKE_L,	model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT,		model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_D,	model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_PLUS,	model_hsw),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ICELAKE_L,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ICELAKE,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_COMETLAKE_L,		model_skl),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_COMETLAKE,		model_skl),
++=======
+ 	X86_MATCH_INTEL_FAM6_MODEL(SANDYBRIDGE,		&model_snb),
+ 	X86_MATCH_INTEL_FAM6_MODEL(SANDYBRIDGE_X,	&model_snbep),
+ 	X86_MATCH_INTEL_FAM6_MODEL(IVYBRIDGE,		&model_snb),
+ 	X86_MATCH_INTEL_FAM6_MODEL(IVYBRIDGE_X,		&model_snbep),
+ 	X86_MATCH_INTEL_FAM6_MODEL(HASWELL,		&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(HASWELL_X,		&model_hsx),
+ 	X86_MATCH_INTEL_FAM6_MODEL(HASWELL_L,		&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(HASWELL_G,		&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(BROADWELL,		&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(BROADWELL_G,		&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(BROADWELL_X,		&model_hsx),
+ 	X86_MATCH_INTEL_FAM6_MODEL(BROADWELL_D,		&model_hsx),
+ 	X86_MATCH_INTEL_FAM6_MODEL(XEON_PHI_KNL,	&model_knl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(XEON_PHI_KNM,	&model_knl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE_L,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(SKYLAKE_X,		&model_hsx),
+ 	X86_MATCH_INTEL_FAM6_MODEL(KABYLAKE_L,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(KABYLAKE,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(CANNONLAKE_L,	&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_GOLDMONT,	&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_GOLDMONT_D,	&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_GOLDMONT_PLUS,	&model_hsw),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_L,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_D,		&model_hsx),
+ 	X86_MATCH_INTEL_FAM6_MODEL(ICELAKE_X,		&model_hsx),
+ 	X86_MATCH_INTEL_FAM6_MODEL(COMETLAKE_L,		&model_skl),
+ 	X86_MATCH_INTEL_FAM6_MODEL(COMETLAKE,		&model_skl),
++>>>>>>> f649fc2eefde (perf/x86/rapl: Add Ice Lake RAPL support)
  	{},
  };
 +
  MODULE_DEVICE_TABLE(x86cpu, rapl_model_match);
  
  static int __init rapl_pmu_init(void)
* Unmerged path arch/x86/events/intel/rapl.c
