net/mlx5e: Add cq info to tx reporter diagnose

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Aya Levin <ayal@mellanox.com>
commit 2bf09e60ae5ef68c2282f97baf37b7dbd9cc1d48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2bf09e60.failed

Add cq information to general diagnose output: CQ size and stride size.
Per SQ add information about the related CQ: cqn and CQ's HW status.

$ devlink health diagnose pci/0000:00:0b.0 reporter tx
 Common Config:
   SQ:
     stride size: 64 size: 1024
   CQ:
     stride size: 64 size: 1024
 SQs:
   channel ix: 0 tc: 0 txq ix: 0 sqn: 4307 HW state: 1 stopped: false cc: 0 pc: 0
   CQ:
     cqn: 1030 HW status: 0
   channel ix: 1 tc: 0 txq ix: 1 sqn: 4312 HW state: 1 stopped: false cc: 0 pc: 0
   CQ:
     cqn: 1034 HW status: 0
   channel ix: 2 tc: 0 txq ix: 2 sqn: 4317 HW state: 1 stopped: false cc: 0 pc: 0
   CQ:
     cqn: 1038 HW status: 0
   channel ix: 3 tc: 0 txq ix: 3 sqn: 4322 HW state: 1 stopped: false cc: 0 pc: 0
   CQ:
     cqn: 1042 HW status: 0

$ devlink health diagnose pci/0000:00:0b.0 reporter tx -jp
{
    "Common Config": {
        "SQ": {
            "stride size": 64,
            "size": 1024
        },
        "CQ": {
            "stride size": 64,
            "size": 1024
        }
    },
    "SQs": [ {
            "channel ix": 0,
            "tc": 0,
            "txq ix": 0,
            "sqn": 4307,
            "HW state": 1,
            "stopped": false,
            "cc": 0,
            "pc": 0,
            "CQ": {
                "cqn": 1030,
                "HW status": 0
            }
        },{
            "channel ix": 1,
            "tc": 0,
            "txq ix": 1,
            "sqn": 4312,
            "HW state": 1,
            "stopped": false,
            "cc": 0,
            "pc": 0,
            "CQ": {
                "cqn": 1034,
                "HW status": 0
            }
        },{
            "channel ix": 2,
            "tc": 0,
            "txq ix": 2,
            "sqn": 4317,
            "HW state": 1,
            "stopped": false,
            "cc": 0,
            "pc": 0,
            "CQ": {
                "cqn": 1038,
                "HW status": 0
            }
        },{
            "channel ix": 3,
            "tc": 0,
            "txq ix": 3,
            "sqn": 4322,
            "HW state": 1,
            "stopped": false,
            "cc": 0,
            "pc": 0,
            "CQ": {
                "cqn": 1042,
                "HW status": 0
        } ]
}

	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 2bf09e60ae5ef68c2282f97baf37b7dbd9cc1d48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/health.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/health.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/health.h
index cee840e40a05,6725d417aaf5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/health.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/health.h
@@@ -6,9 -6,28 +6,35 @@@
  
  #include "en.h"
  
++<<<<<<< HEAD
 +int mlx5e_tx_reporter_create(struct mlx5e_priv *priv);
 +void mlx5e_tx_reporter_destroy(struct mlx5e_priv *priv);
 +void mlx5e_tx_reporter_err_cqe(struct mlx5e_txqsq *sq);
 +int mlx5e_tx_reporter_timeout(struct mlx5e_txqsq *sq);
++=======
+ int mlx5e_reporter_tx_create(struct mlx5e_priv *priv);
+ void mlx5e_reporter_tx_destroy(struct mlx5e_priv *priv);
+ void mlx5e_reporter_tx_err_cqe(struct mlx5e_txqsq *sq);
+ int mlx5e_reporter_tx_timeout(struct mlx5e_txqsq *sq);
+ 
+ int mlx5e_reporter_cq_diagnose(struct mlx5e_cq *cq, struct devlink_fmsg *fmsg);
+ int mlx5e_reporter_cq_common_diagnose(struct mlx5e_cq *cq, struct devlink_fmsg *fmsg);
+ int mlx5e_reporter_named_obj_nest_start(struct devlink_fmsg *fmsg, char *name);
+ int mlx5e_reporter_named_obj_nest_end(struct devlink_fmsg *fmsg);
+ 
+ #define MLX5E_REPORTER_PER_Q_MAX_LEN 256
+ 
+ struct mlx5e_err_ctx {
+ 	int (*recover)(void *ctx);
+ 	void *ctx;
+ };
+ 
+ int mlx5e_health_sq_to_ready(struct mlx5e_channel *channel, u32 sqn);
+ int mlx5e_health_channel_eq_recover(struct mlx5_eq_comp *eq, struct mlx5e_channel *channel);
+ int mlx5e_health_recover_channels(struct mlx5e_priv *priv);
+ int mlx5e_health_report(struct mlx5e_priv *priv,
+ 			struct devlink_health_reporter *reporter, char *err_str,
+ 			struct mlx5e_err_ctx *err_ctx);
++>>>>>>> 2bf09e60ae5e (net/mlx5e: Add cq info to tx reporter diagnose)
  
  #endif
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
index 3dc7efe01aef,bfed558637c2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
@@@ -238,6 -185,18 +238,21 @@@ mlx5e_tx_reporter_build_diagnose_output
  	if (err)
  		return err;
  
++<<<<<<< HEAD
++=======
+ 	err = devlink_fmsg_u32_pair_put(fmsg, "cc", sq->cc);
+ 	if (err)
+ 		return err;
+ 
+ 	err = devlink_fmsg_u32_pair_put(fmsg, "pc", sq->pc);
+ 	if (err)
+ 		return err;
+ 
+ 	err = mlx5e_reporter_cq_diagnose(&sq->cq, fmsg);
+ 	if (err)
+ 		return err;
+ 
++>>>>>>> 2bf09e60ae5e (net/mlx5e: Add cq info to tx reporter diagnose)
  	err = devlink_fmsg_obj_nest_end(fmsg);
  	if (err)
  		return err;
@@@ -256,6 -218,37 +271,40 @@@ static int mlx5e_tx_reporter_diagnose(s
  	if (!test_bit(MLX5E_STATE_OPENED, &priv->state))
  		goto unlock;
  
++<<<<<<< HEAD
++=======
+ 	sq_sz = mlx5_wq_cyc_get_size(&generic_sq->wq);
+ 	sq_stride = MLX5_SEND_WQE_BB;
+ 
+ 	err = mlx5e_reporter_named_obj_nest_start(fmsg, "Common Config");
+ 	if (err)
+ 		goto unlock;
+ 
+ 	err = mlx5e_reporter_named_obj_nest_start(fmsg, "SQ");
+ 	if (err)
+ 		goto unlock;
+ 
+ 	err = devlink_fmsg_u64_pair_put(fmsg, "stride size", sq_stride);
+ 	if (err)
+ 		goto unlock;
+ 
+ 	err = devlink_fmsg_u32_pair_put(fmsg, "size", sq_sz);
+ 	if (err)
+ 		goto unlock;
+ 
+ 	err = mlx5e_reporter_cq_common_diagnose(&generic_sq->cq, fmsg);
+ 	if (err)
+ 		goto unlock;
+ 
+ 	err = mlx5e_reporter_named_obj_nest_end(fmsg);
+ 	if (err)
+ 		goto unlock;
+ 
+ 	err = mlx5e_reporter_named_obj_nest_end(fmsg);
+ 	if (err)
+ 		goto unlock;
+ 
++>>>>>>> 2bf09e60ae5e (net/mlx5e: Add cq info to tx reporter diagnose)
  	err = devlink_fmsg_arr_pair_nest_start(fmsg, "SQs");
  	if (err)
  		goto unlock;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/health.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/health.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/health.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/reporter_tx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/wq.c b/drivers/net/ethernet/mellanox/mlx5/core/wq.c
index 953cc8efba69..dd2315ce4441 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/wq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/wq.c
@@ -44,6 +44,11 @@ u32 mlx5_cqwq_get_size(struct mlx5_cqwq *wq)
 	return wq->fbc.sz_m1 + 1;
 }
 
+u8 mlx5_cqwq_get_log_stride_size(struct mlx5_cqwq *wq)
+{
+	return wq->fbc.log_stride;
+}
+
 u32 mlx5_wq_ll_get_size(struct mlx5_wq_ll *wq)
 {
 	return (u32)wq->fbc.sz_m1 + 1;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/wq.h b/drivers/net/ethernet/mellanox/mlx5/core/wq.h
index f1ec58c9e9e3..55791f71a778 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/wq.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/wq.h
@@ -89,6 +89,7 @@ int mlx5_cqwq_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param,
 		     void *cqc, struct mlx5_cqwq *wq,
 		     struct mlx5_wq_ctrl *wq_ctrl);
 u32 mlx5_cqwq_get_size(struct mlx5_cqwq *wq);
+u8 mlx5_cqwq_get_log_stride_size(struct mlx5_cqwq *wq);
 
 int mlx5_wq_ll_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param,
 		      void *wqc, struct mlx5_wq_ll *wq,
