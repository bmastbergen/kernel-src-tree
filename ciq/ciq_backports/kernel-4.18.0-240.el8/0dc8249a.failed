netdevsim: Add support for setting of packet trap group parameters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ido Schimmel <idosch@mellanox.com>
commit 0dc8249a2e7ce38d9b307d1277b64f8189f53dfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0dc8249a.failed

Add a dummy callback to set trap group parameters. Return an error when
the 'fail_trap_group_set' debugfs file is set in order to exercise error
paths and verify that error is propagated to user space when should.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Reviewed-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0dc8249a2e7ce38d9b307d1277b64f8189f53dfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/netdevsim/dev.c
#	drivers/net/netdevsim/netdevsim.h
diff --cc drivers/net/netdevsim/dev.c
index 2865d9b5336b,1fe2a93ad382..000000000000
--- a/drivers/net/netdevsim/dev.c
+++ b/drivers/net/netdevsim/dev.c
@@@ -88,8 -204,26 +88,31 @@@ static int nsim_dev_debugfs_init(struc
  			   &nsim_dev->max_macs);
  	debugfs_create_bool("test1", 0600, nsim_dev->ddir,
  			    &nsim_dev->test1);
++<<<<<<< HEAD
 +	debugfs_create_file("take_snapshot", 0200, nsim_dev->ddir, nsim_dev,
 +			    &nsim_dev_take_snapshot_fops);
++=======
+ 	nsim_dev->take_snapshot = debugfs_create_file("take_snapshot",
+ 						      0200,
+ 						      nsim_dev->ddir,
+ 						      nsim_dev,
+ 						&nsim_dev_take_snapshot_fops);
+ 	debugfs_create_bool("dont_allow_reload", 0600, nsim_dev->ddir,
+ 			    &nsim_dev->dont_allow_reload);
+ 	debugfs_create_bool("fail_reload", 0600, nsim_dev->ddir,
+ 			    &nsim_dev->fail_reload);
+ 	debugfs_create_file("trap_flow_action_cookie", 0600, nsim_dev->ddir,
+ 			    nsim_dev, &nsim_dev_trap_fa_cookie_fops);
+ 	debugfs_create_bool("fail_trap_group_set", 0600,
+ 			    nsim_dev->ddir,
+ 			    &nsim_dev->fail_trap_group_set);
+ 	debugfs_create_bool("fail_trap_policer_set", 0600,
+ 			    nsim_dev->ddir,
+ 			    &nsim_dev->fail_trap_policer_set);
+ 	debugfs_create_bool("fail_trap_policer_counter_get", 0600,
+ 			    nsim_dev->ddir,
+ 			    &nsim_dev->fail_trap_policer_counter_get);
++>>>>>>> 0dc8249a2e7c (netdevsim: Add support for setting of packet trap group parameters)
  	return 0;
  }
  
@@@ -667,6 -816,53 +690,56 @@@ nsim_dev_devlink_trap_action_set(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ nsim_dev_devlink_trap_group_set(struct devlink *devlink,
+ 				const struct devlink_trap_group *group,
+ 				const struct devlink_trap_policer *policer)
+ {
+ 	struct nsim_dev *nsim_dev = devlink_priv(devlink);
+ 
+ 	if (nsim_dev->fail_trap_group_set)
+ 		return -EINVAL;
+ 
+ 	return 0;
+ }
+ 
+ static int
+ nsim_dev_devlink_trap_policer_set(struct devlink *devlink,
+ 				  const struct devlink_trap_policer *policer,
+ 				  u64 rate, u64 burst,
+ 				  struct netlink_ext_ack *extack)
+ {
+ 	struct nsim_dev *nsim_dev = devlink_priv(devlink);
+ 
+ 	if (nsim_dev->fail_trap_policer_set) {
+ 		NL_SET_ERR_MSG_MOD(extack, "User setup the operation to fail for testing purposes");
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int
+ nsim_dev_devlink_trap_policer_counter_get(struct devlink *devlink,
+ 					  const struct devlink_trap_policer *policer,
+ 					  u64 *p_drops)
+ {
+ 	struct nsim_dev *nsim_dev = devlink_priv(devlink);
+ 	u64 *cnt;
+ 
+ 	if (nsim_dev->fail_trap_policer_counter_get)
+ 		return -EINVAL;
+ 
+ 	cnt = &nsim_dev->trap_data->trap_policers_cnt_arr[policer->id - 1];
+ 	*p_drops = *cnt;
+ 	*cnt += jiffies % 64;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 0dc8249a2e7c (netdevsim: Add support for setting of packet trap group parameters)
  static const struct devlink_ops nsim_dev_devlink_ops = {
  	.reload_down = nsim_dev_reload_down,
  	.reload_up = nsim_dev_reload_up,
@@@ -674,6 -870,9 +747,12 @@@
  	.flash_update = nsim_dev_flash_update,
  	.trap_init = nsim_dev_devlink_trap_init,
  	.trap_action_set = nsim_dev_devlink_trap_action_set,
++<<<<<<< HEAD
++=======
+ 	.trap_group_set = nsim_dev_devlink_trap_group_set,
+ 	.trap_policer_set = nsim_dev_devlink_trap_policer_set,
+ 	.trap_policer_counter_get = nsim_dev_devlink_trap_policer_counter_get,
++>>>>>>> 0dc8249a2e7c (netdevsim: Add support for setting of packet trap group parameters)
  };
  
  #define NSIM_DEV_MAX_MACS_DEFAULT 32
diff --cc drivers/net/netdevsim/netdevsim.h
index 4035af41eca9,4ded54a21e1e..000000000000
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@@ -161,7 -174,15 +161,16 @@@ struct nsim_dev 
  	bool fw_update_status;
  	u32 max_macs;
  	bool test1;
 -	bool dont_allow_reload;
 -	bool fail_reload;
  	struct devlink_region *dummy_region;
++<<<<<<< HEAD
++=======
+ 	struct nsim_dev_health health;
+ 	struct flow_action_cookie *fa_cookie;
+ 	spinlock_t fa_cookie_lock; /* protects fa_cookie */
+ 	bool fail_trap_group_set;
+ 	bool fail_trap_policer_set;
+ 	bool fail_trap_policer_counter_get;
++>>>>>>> 0dc8249a2e7c (netdevsim: Add support for setting of packet trap group parameters)
  };
  
  static inline struct net *nsim_dev_net(struct nsim_dev *nsim_dev)
* Unmerged path drivers/net/netdevsim/dev.c
* Unmerged path drivers/net/netdevsim/netdevsim.h
