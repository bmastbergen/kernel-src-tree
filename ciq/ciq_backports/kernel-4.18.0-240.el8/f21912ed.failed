net/tls: rename tls_device to tls_toe_device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] tls: rename tls_device to tls_toe_device (Sabrina Dubroca) [1819627]
Rebuild_FUZZ: 95.24%
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit f21912edd1570818cbcb16bd1da7d7a2b122d66b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f21912ed.failed

Rename struct tls_device to struct tls_toe_device to avoid
confusion with normal, non-TOE offload.

No functional changes.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: John Hurley <john.hurley@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f21912edd1570818cbcb16bd1da7d7a2b122d66b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chtls/chtls_main.c
#	include/net/tls_toe.h
diff --cc drivers/crypto/chelsio/chtls/chtls_main.c
index f63294c8a97a,18996935d8ba..000000000000
--- a/drivers/crypto/chelsio/chtls/chtls_main.c
+++ b/drivers/crypto/chelsio/chtls/chtls_main.c
@@@ -160,22 -157,44 +160,56 @@@ static void chtls_destroy_hash(struct t
  		chtls_stop_listen(cdev, sk);
  }
  
++<<<<<<< HEAD
++=======
+ static void chtls_free_uld(struct chtls_dev *cdev)
+ {
+ 	int i;
+ 
+ 	tls_toe_unregister_device(&cdev->tlsdev);
+ 	kvfree(cdev->kmap.addr);
+ 	idr_destroy(&cdev->hwtid_idr);
+ 	for (i = 0; i < (1 << RSPQ_HASH_BITS); i++)
+ 		kfree_skb(cdev->rspq_skb_cache[i]);
+ 	kfree(cdev->lldi);
+ 	kfree_skb(cdev->askb);
+ 	kfree(cdev);
+ }
+ 
+ static inline void chtls_dev_release(struct kref *kref)
+ {
+ 	struct tls_toe_device *dev;
+ 	struct chtls_dev *cdev;
+ 
+ 	dev = container_of(kref, struct tls_toe_device, kref);
+ 	cdev = to_chtls_dev(dev);
+ 	chtls_free_uld(cdev);
+ }
+ 
++>>>>>>> f21912edd157 (net/tls: rename tls_device to tls_toe_device)
  static void chtls_register_dev(struct chtls_dev *cdev)
  {
- 	struct tls_device *tlsdev = &cdev->tlsdev;
+ 	struct tls_toe_device *tlsdev = &cdev->tlsdev;
  
- 	strlcpy(tlsdev->name, "chtls", TLS_DEVICE_NAME_MAX);
+ 	strlcpy(tlsdev->name, "chtls", TLS_TOE_DEVICE_NAME_MAX);
  	strlcat(tlsdev->name, cdev->lldi->ports[0]->name,
- 		TLS_DEVICE_NAME_MAX);
+ 		TLS_TOE_DEVICE_NAME_MAX);
  	tlsdev->feature = chtls_inline_feature;
  	tlsdev->hash = chtls_create_hash;
  	tlsdev->unhash = chtls_destroy_hash;
++<<<<<<< HEAD
 +	tls_register_device(&cdev->tlsdev);
 +}
 +
 +static void chtls_unregister_dev(struct chtls_dev *cdev)
 +{
 +	tls_unregister_device(&cdev->tlsdev);
++=======
+ 	tlsdev->release = chtls_dev_release;
+ 	kref_init(&tlsdev->kref);
+ 	tls_toe_register_device(tlsdev);
+ 	cdev->cdev_state = CHTLS_CDEV_STATE_UP;
++>>>>>>> f21912edd157 (net/tls: rename tls_device to tls_toe_device)
  }
  
  static void process_deferq(struct work_struct *task_param)
* Unmerged path include/net/tls_toe.h
diff --git a/drivers/crypto/chelsio/chtls/chtls.h b/drivers/crypto/chelsio/chtls/chtls.h
index e346cb5b7856..7194b8e8ccff 100644
--- a/drivers/crypto/chelsio/chtls/chtls.h
+++ b/drivers/crypto/chelsio/chtls/chtls.h
@@ -117,7 +117,7 @@ struct tls_scmd {
 };
 
 struct chtls_dev {
-	struct tls_device tlsdev;
+	struct tls_toe_device tlsdev;
 	struct list_head list;
 	struct cxgb4_lld_info *lldi;
 	struct pci_dev *pdev;
@@ -358,7 +358,7 @@ enum {
 #define TCP_PAGE(sk)   (sk->sk_frag.page)
 #define TCP_OFF(sk)    (sk->sk_frag.offset)
 
-static inline struct chtls_dev *to_chtls_dev(struct tls_device *tlsdev)
+static inline struct chtls_dev *to_chtls_dev(struct tls_toe_device *tlsdev)
 {
 	return container_of(tlsdev, struct chtls_dev, tlsdev);
 }
* Unmerged path drivers/crypto/chelsio/chtls/chtls_main.c
* Unmerged path include/net/tls_toe.h
diff --git a/net/tls/tls_main.c b/net/tls/tls_main.c
index f7a147ae7fd3..3ec850fca7bf 100644
--- a/net/tls/tls_main.c
+++ b/net/tls/tls_main.c
@@ -659,8 +659,8 @@ static void tls_hw_sk_destruct(struct sock *sk)
 
 static int tls_hw_prot(struct sock *sk)
 {
+	struct tls_toe_device *dev;
 	struct tls_context *ctx;
-	struct tls_device *dev;
 	int rc = 0;
 
 	/* RHEL: fix up the locking below after commit df9d4a178022 is
@@ -699,7 +699,7 @@ static int tls_hw_prot(struct sock *sk)
 static void tls_hw_unhash(struct sock *sk)
 {
 	struct tls_context *ctx = tls_get_ctx(sk);
-	struct tls_device *dev;
+	struct tls_toe_device *dev;
 
 	mutex_lock(&device_mutex);
 	list_for_each_entry(dev, &device_list, dev_list) {
@@ -713,7 +713,7 @@ static void tls_hw_unhash(struct sock *sk)
 static int tls_hw_hash(struct sock *sk)
 {
 	struct tls_context *ctx = tls_get_ctx(sk);
-	struct tls_device *dev;
+	struct tls_toe_device *dev;
 	int err;
 
 	err = ctx->hash(sk);
@@ -885,21 +885,21 @@ static size_t tls_get_info_size(const struct sock *sk)
 	return size;
 }
 
-void tls_register_device(struct tls_device *device)
+void tls_toe_register_device(struct tls_toe_device *device)
 {
 	mutex_lock(&device_mutex);
 	list_add_tail(&device->dev_list, &device_list);
 	mutex_unlock(&device_mutex);
 }
-EXPORT_SYMBOL(tls_register_device);
+EXPORT_SYMBOL(tls_toe_register_device);
 
-void tls_unregister_device(struct tls_device *device)
+void tls_toe_unregister_device(struct tls_toe_device *device)
 {
 	mutex_lock(&device_mutex);
 	list_del(&device->dev_list);
 	mutex_unlock(&device_mutex);
 }
-EXPORT_SYMBOL(tls_unregister_device);
+EXPORT_SYMBOL(tls_toe_unregister_device);
 
 static struct tcp_ulp_ops tcp_tls_ulp_ops __read_mostly = {
 	.name			= "tls",
