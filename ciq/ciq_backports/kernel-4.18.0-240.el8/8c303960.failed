selftests/bpf: add loop test 5

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit 8c30396074c131765b19eb3cb7ff764a4f2f2913
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8c303960.failed

Add a test with multiple exit conditions.
It's not an infinite loop only when the verifier can properly track
all math on variable 'i' through all possible ways of executing this loop.

barrier()s are needed to disable llvm optimization that combines multiple
branches into fewer branches.

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
(cherry picked from commit 8c30396074c131765b19eb3cb7ff764a4f2f2913)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
diff --cc tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
index db0c774864c8,0caf8eafa9eb..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
+++ b/tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
@@@ -56,9 -67,12 +56,16 @@@ void test_bpf_verif_scale(void
  		 * ~110 insns in loop body.
  		 * Total of 5 such loops. Total program size ~1500 insns.
  		 */
 -		{ "pyperf600_nounroll.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
 +		"./pyperf600_nounroll.o",
  
++<<<<<<< HEAD
 +		"./loop1.o", "./loop2.o",
++=======
+ 		{ "loop1.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
+ 		{ "loop2.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
+ 		{ "loop4.o", BPF_PROG_TYPE_SCHED_CLS },
+ 		{ "loop5.o", BPF_PROG_TYPE_SCHED_CLS },
++>>>>>>> 8c30396074c1 (selftests/bpf: add loop test 5)
  
  		/* partial unroll. 19k insn in a loop.
  		 * Total program size 20.8k insn.
* Unmerged path tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
diff --git a/tools/testing/selftests/bpf/progs/loop5.c b/tools/testing/selftests/bpf/progs/loop5.c
new file mode 100644
index 000000000000..28d1d668f07c
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/loop5.c
@@ -0,0 +1,32 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2019 Facebook
+#include <linux/bpf.h>
+#include "bpf_helpers.h"
+#define barrier() __asm__ __volatile__("": : :"memory")
+
+char _license[] SEC("license") = "GPL";
+
+SEC("socket")
+int while_true(volatile struct __sk_buff* skb)
+{
+	int i = 0;
+
+	while (1) {
+		if (skb->len)
+			i += 3;
+		else
+			i += 7;
+		if (i == 9)
+			break;
+		barrier();
+		if (i == 10)
+			break;
+		barrier();
+		if (i == 13)
+			break;
+		barrier();
+		if (i == 14)
+			break;
+	}
+	return i;
+}
