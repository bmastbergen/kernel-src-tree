block: simplify blkdev_nr_zones

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 9b38bb4b1e6de47b379afaad2c707df639bb4dc7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9b38bb4b.failed

Simplify the arguments to blkdev_nr_zones by passing a gendisk instead
of the block_device and capacity.  This also removes the need for
__blkdev_nr_zones as all callers are outside the fast path and can
deal with the additional branch.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 9b38bb4b1e6de47b379afaad2c707df639bb4dc7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-zoned.c
#	include/linux/blkdev.h
diff --cc block/blk-zoned.c
index dfece77e25b8,65a9bdc9fe27..000000000000
--- a/block/blk-zoned.c
+++ b/block/blk-zoned.c
@@@ -66,30 -70,20 +66,25 @@@ void __blk_req_zone_write_unlock(struc
  }
  EXPORT_SYMBOL_GPL(__blk_req_zone_write_unlock);
  
- static inline unsigned int __blkdev_nr_zones(struct request_queue *q,
- 					     sector_t nr_sectors)
- {
- 	sector_t zone_sectors = blk_queue_zone_sectors(q);
- 
- 	return (nr_sectors + zone_sectors - 1) >> ilog2(zone_sectors);
- }
- 
  /**
   * blkdev_nr_zones - Get number of zones
-  * @bdev:	Target block device
+  * @disk:	Target gendisk
   *
-  * Description:
-  *    Return the total number of zones of a zoned block device.
-  *    For a regular block device, the number of zones is always 0.
+  * Return the total number of zones of a zoned block device.  For a block
+  * device without zone capabilities, the number of zones is always 0.
   */
- unsigned int blkdev_nr_zones(struct block_device *bdev)
+ unsigned int blkdev_nr_zones(struct gendisk *disk)
  {
- 	struct request_queue *q = bdev_get_queue(bdev);
+ 	sector_t zone_sectors = blk_queue_zone_sectors(disk->queue);
  
- 	if (!blk_queue_is_zoned(q))
+ 	if (!blk_queue_is_zoned(disk->queue))
  		return 0;
++<<<<<<< HEAD
 +
 +	return __blkdev_nr_zones(q, bdev->bd_part->nr_sects);
++=======
+ 	return (get_capacity(disk) + zone_sectors - 1) >> ilog2(zone_sectors);
++>>>>>>> 9b38bb4b1e6d (block: simplify blkdev_nr_zones)
  }
  EXPORT_SYMBOL_GPL(blkdev_nr_zones);
  
@@@ -431,13 -437,13 +426,18 @@@ void blk_queue_free_zone_bitmaps(struc
  int blk_revalidate_disk_zones(struct gendisk *disk)
  {
  	struct request_queue *q = disk->queue;
++<<<<<<< HEAD
 +	unsigned int nr_zones = __blkdev_nr_zones(q, get_capacity(disk));
 +	unsigned long *seq_zones_wlock = NULL, *seq_zones_bitmap = NULL;
 +	unsigned int i, rep_nr_zones = 0, z = 0, nrz;
 +	struct blk_zone *zones = NULL;
 +	sector_t sector = 0;
++=======
+ 	unsigned int nr_zones = blkdev_nr_zones(disk);
+ 	struct blk_revalidate_zone_args args = { .disk = disk };
++>>>>>>> 9b38bb4b1e6d (block: simplify blkdev_nr_zones)
  	int ret = 0;
  
 -	if (WARN_ON_ONCE(!blk_queue_is_zoned(q)))
 -		return -EIO;
 -
  	/*
  	 * BIO based queues do not use a scheduler so only q->nr_zones
  	 * needs to be updated so that the sysfs exposed value is correct.
diff --cc include/linux/blkdev.h
index 8825c79cd84f,c5852de402b6..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -362,12 -354,13 +362,22 @@@ struct queue_limits 
  
  #ifdef CONFIG_BLK_DEV_ZONED
  
++<<<<<<< HEAD
 +extern unsigned int blkdev_nr_zones(struct block_device *bdev);
 +extern int blkdev_report_zones(struct block_device *bdev,
 +			       sector_t sector, struct blk_zone *zones,
 +			       unsigned int *nr_zones, gfp_t gfp_mask);
 +extern int blkdev_reset_zones(struct block_device *bdev, sector_t sectors,
 +			      sector_t nr_sectors, gfp_t gfp_mask);
++=======
+ #define BLK_ALL_ZONES  ((unsigned int)-1)
+ int blkdev_report_zones(struct block_device *bdev, sector_t sector,
+ 			unsigned int nr_zones, report_zones_cb cb, void *data);
+ unsigned int blkdev_nr_zones(struct gendisk *disk);
+ extern int blkdev_zone_mgmt(struct block_device *bdev, enum req_opf op,
+ 			    sector_t sectors, sector_t nr_sectors,
+ 			    gfp_t gfp_mask);
++>>>>>>> 9b38bb4b1e6d (block: simplify blkdev_nr_zones)
  extern int blk_revalidate_disk_zones(struct gendisk *disk);
  
  extern int blkdev_report_zones_ioctl(struct block_device *bdev, fmode_t mode,
* Unmerged path block/blk-zoned.c
diff --git a/block/ioctl.c b/block/ioctl.c
index 4825c78a6baa..34775bbb3692 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -535,7 +535,7 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 	case BLKGETZONESZ:
 		return put_uint(arg, bdev_zone_sectors(bdev));
 	case BLKGETNRZONES:
-		return put_uint(arg, blkdev_nr_zones(bdev));
+		return put_uint(arg, blkdev_nr_zones(bdev->bd_disk));
 	case HDIO_GETGEO:
 		return blkdev_getgeo(bdev, argp);
 	case BLKRAGET:
diff --git a/drivers/md/dm-zoned-target.c b/drivers/md/dm-zoned-target.c
index 12d96a263623..927df60e19c9 100644
--- a/drivers/md/dm-zoned-target.c
+++ b/drivers/md/dm-zoned-target.c
@@ -702,7 +702,7 @@ static int dmz_get_zoned_device(struct dm_target *ti, char *path)
 	dev->zone_nr_blocks = dmz_sect2blk(dev->zone_nr_sectors);
 	dev->zone_nr_blocks_shift = ilog2(dev->zone_nr_blocks);
 
-	dev->nr_zones = blkdev_nr_zones(dev->bdev);
+	dev->nr_zones = blkdev_nr_zones(dev->bdev->bd_disk);
 
 	dmz->dev = dev;
 
* Unmerged path include/linux/blkdev.h
