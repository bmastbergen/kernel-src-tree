net/smc: introduce link group type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Karsten Graul <kgraul@linux.ibm.com>
commit 81e6e5e70df46bb5b205e53f2b7885e49a9d4974
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/81e6e5e7.failed

Add a type field to the link group which reflects the current link group
redundancy state.

	Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
	Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 81e6e5e70df46bb5b205e53f2b7885e49a9d4974)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_core.h
diff --cc net/smc/smc_core.h
index f72213c98957,51366a9f4980..000000000000
--- a/net/smc/smc_core.h
+++ b/net/smc/smc_core.h
@@@ -197,6 -197,28 +197,31 @@@ struct smc_rtoken {				/* address/key o
  
  struct smcd_dev;
  
++<<<<<<< HEAD
++=======
+ enum smc_lgr_type {				/* redundancy state of lgr */
+ 	SMC_LGR_NONE,			/* no active links, lgr to be deleted */
+ 	SMC_LGR_SINGLE,			/* 1 active RNIC on each peer */
+ 	SMC_LGR_SYMMETRIC,		/* 2 active RNICs on each peer */
+ 	SMC_LGR_ASYMMETRIC_PEER,	/* local has 2, peer 1 active RNICs */
+ 	SMC_LGR_ASYMMETRIC_LOCAL,	/* local has 1, peer 2 active RNICs */
+ };
+ 
+ enum smc_llc_flowtype {
+ 	SMC_LLC_FLOW_NONE	= 0,
+ 	SMC_LLC_FLOW_ADD_LINK	= 2,
+ 	SMC_LLC_FLOW_DEL_LINK	= 4,
+ 	SMC_LLC_FLOW_RKEY	= 6,
+ };
+ 
+ struct smc_llc_qentry;
+ 
+ struct smc_llc_flow {
+ 	enum smc_llc_flowtype type;
+ 	struct smc_llc_qentry *qentry;
+ };
+ 
++>>>>>>> 81e6e5e70df4 (net/smc: introduce link group type)
  struct smc_link_group {
  	struct list_head	list;
  	struct rb_root		conns_all;	/* connection tree */
@@@ -232,6 -254,26 +257,29 @@@
  			DECLARE_BITMAP(rtokens_used_mask, SMC_RMBS_PER_LGR_MAX);
  						/* used rtoken elements */
  			u8			next_link_id;
++<<<<<<< HEAD
++=======
+ 			enum smc_lgr_type	type;
+ 						/* redundancy state */
+ 			struct list_head	llc_event_q;
+ 						/* queue for llc events */
+ 			spinlock_t		llc_event_q_lock;
+ 						/* protects llc_event_q */
+ 			struct work_struct	llc_event_work;
+ 						/* llc event worker */
+ 			wait_queue_head_t	llc_waiter;
+ 						/* w4 next llc event */
+ 			struct smc_llc_flow	llc_flow_lcl;
+ 						/* llc local control field */
+ 			struct smc_llc_flow	llc_flow_rmt;
+ 						/* llc remote control field */
+ 			struct smc_llc_qentry	*delayed_event;
+ 						/* arrived when flow active */
+ 			spinlock_t		llc_flow_lock;
+ 						/* protects llc flow */
+ 			int			llc_testlink_time;
+ 						/* link keep alive time */
++>>>>>>> 81e6e5e70df4 (net/smc: introduce link group type)
  		};
  		struct { /* SMC-D */
  			u64			peer_gid;
* Unmerged path net/smc/smc_core.h
