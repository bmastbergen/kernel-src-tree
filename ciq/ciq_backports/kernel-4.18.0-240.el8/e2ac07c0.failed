x86/purgatory: Disable various profiling and sanitizing options

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit e2ac07c06058ae2d58b45bbf2a2a352771d76fcb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e2ac07c0.failed

Since the purgatory is a special stand-alone binary, various profiling
and sanitizing options must be disabled. Having these options enabled
typically will cause dependencies on various special symbols exported by
special libs / stubs used by these frameworks. Since the purgatory is
special, it is not linked against these stubs causing missing symbols in
the purgatory if these options are not disabled.

Sync the set of disabled profiling and sanitizing options with that from
drivers/firmware/efi/libstub/Makefile, adding
-DDISABLE_BRANCH_PROFILING to the CFLAGS and setting:

  GCOV_PROFILE                    := n
  UBSAN_SANITIZE                  := n

This fixes broken references to ftrace_likely_update() when
CONFIG_TRACE_BRANCH_PROFILING is enabled and to __gcov_init() and
__gcov_exit() when CONFIG_GCOV_KERNEL is enabled.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20200317130841.290418-1-hdegoede@redhat.com
(cherry picked from commit e2ac07c06058ae2d58b45bbf2a2a352771d76fcb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/purgatory/Makefile
diff --cc arch/x86/purgatory/Makefile
index f40064fc27a6,9733d1cc791d..000000000000
--- a/arch/x86/purgatory/Makefile
+++ b/arch/x86/purgatory/Makefile
@@@ -12,16 -15,48 +12,29 @@@ $(obj)/sha256.o: $(srctree)/lib/crypto/
  LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib -z nodefaultlib
  targets += purgatory.ro
  
+ # Sanitizer, etc. runtimes are unavailable and cannot be linked here.
+ GCOV_PROFILE	:= n
  KASAN_SANITIZE	:= n
+ UBSAN_SANITIZE	:= n
  KCOV_INSTRUMENT := n
  
++<<<<<<< HEAD
++=======
+ # These are adjustments to the compiler flags used for objects that
+ # make up the standalone purgatory.ro
+ 
+ PURGATORY_CFLAGS_REMOVE := -mcmodel=kernel
+ PURGATORY_CFLAGS := -mcmodel=large -ffreestanding -fno-zero-initialized-in-bss
+ PURGATORY_CFLAGS += $(DISABLE_STACKLEAK_PLUGIN) -DDISABLE_BRANCH_PROFILING
+ 
++>>>>>>> e2ac07c06058 (x86/purgatory: Disable various profiling and sanitizing options)
  # Default KBUILD_CFLAGS can have -pg option set when FTRACE is enabled. That
  # in turn leaves some undefined symbols like __fentry__ in purgatory and not
 -# sure how to relocate those.
 -ifdef CONFIG_FUNCTION_TRACER
 -PURGATORY_CFLAGS_REMOVE		+= $(CC_FLAGS_FTRACE)
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR_STRONG
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector-strong
 -endif
 -
 -ifdef CONFIG_RETPOLINE
 -PURGATORY_CFLAGS_REMOVE		+= $(RETPOLINE_CFLAGS)
 -endif
 -
 -CFLAGS_REMOVE_purgatory.o	+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_purgatory.o		+= $(PURGATORY_CFLAGS)
 -
 -CFLAGS_REMOVE_sha256.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_sha256.o			+= $(PURGATORY_CFLAGS)
 +# sure how to relocate those. Like kexec-tools, use custom flags.
  
 -CFLAGS_REMOVE_string.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_string.o			+= $(PURGATORY_CFLAGS)
 +KBUILD_CFLAGS := -fno-strict-aliasing -Wall -Wstrict-prototypes -fno-zero-initialized-in-bss -fno-builtin -ffreestanding -c -Os -mcmodel=large
 +KBUILD_CFLAGS += -m$(BITS)
 +KBUILD_CFLAGS += $(call cc-option,-fno-PIE)
  
  $(obj)/purgatory.ro: $(PURGATORY_OBJS) FORCE
  		$(call if_changed,ld)
* Unmerged path arch/x86/purgatory/Makefile
