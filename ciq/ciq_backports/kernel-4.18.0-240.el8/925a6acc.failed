net/mlx5: E-switch, Prepare code to handle vport enable error

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Parav Pandit <parav@mellanox.com>
commit 925a6acc77a70f8b5bfd0df75e36557aa400b0a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/925a6acc.failed

In subsequent patch, esw_enable_vport() could fail and return error.
Prepare code to handle such error.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Vu Pham <vuhuong@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 925a6acc77a70f8b5bfd0df75e36557aa400b0a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index 7ecf89103bc8,0bdaef508e74..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@@ -456,18 -471,10 +463,25 @@@ static int esw_legacy_enable(struct mlx
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
 +	mlx5_esw_for_each_vf_vport(esw, i, vport, esw->esw_funcs.num_vfs)
 +		vport->info.link_state = MLX5_VPORT_ADMIN_STATE_AUTO;
 +
 +	mlx5_eswitch_enable_pf_vf_vports(esw, MLX5_LEGACY_SRIOV_VPORT_EVENTS);
 +	return 0;
 +}
 +
 +static void esw_destroy_legacy_table(struct mlx5_eswitch *esw)
 +{
 +	esw_cleanup_vepa_rules(esw);
 +	esw_destroy_legacy_fdb_table(esw);
 +	esw_destroy_legacy_vepa_table(esw);
++=======
+ 	ret = mlx5_eswitch_enable_pf_vf_vports(esw, MLX5_LEGACY_SRIOV_VPORT_EVENTS);
+ 	if (ret)
+ 		esw_destroy_legacy_table(esw);
+ 	return ret;
++>>>>>>> 925a6acc77a7 (net/mlx5: E-switch, Prepare code to handle vport enable error)
  }
  
  static void esw_legacy_disable(struct mlx5_eswitch *esw)
@@@ -1691,14 -1700,14 +1705,14 @@@ static void esw_vport_destroy_drop_coun
  {
  	struct mlx5_core_dev *dev = vport->dev;
  
 -	if (vport->ingress.legacy.drop_counter)
 -		mlx5_fc_destroy(dev, vport->ingress.legacy.drop_counter);
 -	if (vport->egress.legacy.drop_counter)
 -		mlx5_fc_destroy(dev, vport->egress.legacy.drop_counter);
 +	if (vport->ingress.drop_counter)
 +		mlx5_fc_destroy(dev, vport->ingress.drop_counter);
 +	if (vport->egress.drop_counter)
 +		mlx5_fc_destroy(dev, vport->egress.drop_counter);
  }
  
- static void esw_enable_vport(struct mlx5_eswitch *esw, struct mlx5_vport *vport,
- 			     enum mlx5_eswitch_vport_event enabled_events)
+ static int esw_enable_vport(struct mlx5_eswitch *esw, struct mlx5_vport *vport,
+ 			    enum mlx5_eswitch_vport_event enabled_events)
  {
  	u16 vport_num = vport->vport;
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 00d126fa6e02,98df1eeee873..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -2154,11 -2139,9 +2154,17 @@@ int esw_offloads_enable(struct mlx5_esw
  	if (err)
  		goto err_vport_metadata;
  
++<<<<<<< HEAD
 +	/* Representor will control the vport link state */
 +	mlx5_esw_for_each_vf_vport(esw, i, vport, esw->esw_funcs.num_vfs)
 +		vport->info.link_state = MLX5_VPORT_ADMIN_STATE_DOWN;
 +
 +	mlx5_eswitch_enable_pf_vf_vports(esw, MLX5_VPORT_UC_ADDR_CHANGE);
++=======
+ 	err = mlx5_eswitch_enable_pf_vf_vports(esw, MLX5_VPORT_UC_ADDR_CHANGE);
+ 	if (err)
+ 		goto err_vports;
++>>>>>>> 925a6acc77a7 (net/mlx5: E-switch, Prepare code to handle vport enable error)
  
  	err = esw_offloads_load_all_reps(esw);
  	if (err)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index ab76b9d1f8c7..30367c1856f0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -601,7 +601,7 @@ bool mlx5_eswitch_is_vf_vport(const struct mlx5_eswitch *esw, u16 vport_num);
 void mlx5_eswitch_update_num_of_vfs(struct mlx5_eswitch *esw, const int num_vfs);
 int mlx5_esw_funcs_changed_handler(struct notifier_block *nb, unsigned long type, void *data);
 
-void
+int
 mlx5_eswitch_enable_pf_vf_vports(struct mlx5_eswitch *esw,
 				 enum mlx5_eswitch_vport_event enabled_events);
 void mlx5_eswitch_disable_pf_vf_vports(struct mlx5_eswitch *esw);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
