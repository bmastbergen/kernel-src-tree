libbpf: Don't require root for bpf_object__open()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 0d13bfce023ac7cef4d0a50b83750254ce31c479
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0d13bfce.failed

Reorganize bpf_object__open and bpf_object__load steps such that
bpf_object__open doesn't need root access. This was previously done for
feature probing and BTF sanitization. This doesn't have to happen on open,
though, so move all those steps into the load phase.

This is important, because it makes it possible for tools like bpftool, to
just open BPF object file and inspect their contents: programs, maps, BTF,
etc. For such operations it is prohibitive to require root access. On the
other hand, there is a lot of custom libbpf logic in those steps, so its best
avoided for tools to reimplement all that on their own.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20191214014341.3442258-2-andriin@fb.com
(cherry picked from commit 0d13bfce023ac7cef4d0a50b83750254ce31c479)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 729a06f61573,dc993112b40b..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -3940,7 -3900,7 +3917,11 @@@ __bpf_object__open(const char *path, co
  	struct bpf_object *obj;
  	const char *obj_name;
  	char tmp_name[64];
++<<<<<<< HEAD
 +	bool relaxed_maps;
++=======
+ 	__u32 attach_prog_fd;
++>>>>>>> 0d13bfce023a (libbpf: Don't require root for bpf_object__open())
  	int err;
  
  	if (elf_version(EV_CURRENT) == EV_NONE) {
@@@ -3969,15 -3929,16 +3950,21 @@@
  		return obj;
  
  	obj->relaxed_core_relocs = OPTS_GET(opts, relaxed_core_relocs, false);
++<<<<<<< HEAD
 +	relaxed_maps = OPTS_GET(opts, relaxed_maps, false);
 +	pin_root_path = OPTS_GET(opts, pin_root_path, NULL);
- 
- 	CHECK_ERR(bpf_object__elf_init(obj), err, out);
- 	CHECK_ERR(bpf_object__check_endianness(obj), err, out);
- 	CHECK_ERR(bpf_object__probe_caps(obj), err, out);
- 	CHECK_ERR(bpf_object__elf_collect(obj, relaxed_maps, pin_root_path),
- 		  err, out);
- 	CHECK_ERR(bpf_object__collect_reloc(obj), err, out);
++=======
+ 	attach_prog_fd = OPTS_GET(opts, attach_prog_fd, 0);
++>>>>>>> 0d13bfce023a (libbpf: Don't require root for bpf_object__open())
+ 
+ 	err = bpf_object__elf_init(obj);
+ 	err = err ? : bpf_object__check_endianness(obj);
+ 	err = err ? : bpf_object__elf_collect(obj);
+ 	err = err ? : bpf_object__init_maps(obj, opts);
+ 	err = err ? : bpf_object__init_prog_names(obj);
+ 	err = err ? : bpf_object__collect_reloc(obj);
+ 	if (err)
+ 		goto out;
  	bpf_object__elf_finish(obj);
  
  	bpf_object__for_each_program(prog, obj) {
* Unmerged path tools/lib/bpf/libbpf.c
