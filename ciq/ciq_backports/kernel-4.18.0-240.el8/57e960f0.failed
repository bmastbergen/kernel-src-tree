ASoC: SOF: Use managed buffer allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: SOF: Use managed buffer allocation (Jaroslav Kysela) [1797509]
Rebuild_FUZZ: 93.02%
commit-author Takashi Iwai <tiwai@suse.de>
commit 57e960f0020ec46db277426762ba5ffe77e03e3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/57e960f0.failed

Clean up the drivers with the new managed buffer allocation API.
The superfluous snd_pcm_lib_malloc_pages() and
snd_pcm_lib_free_pages() calls are dropped.

	Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Cc: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
Link: https://lore.kernel.org/r/20191211172019.23206-2-tiwai@suse.de
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 57e960f0020ec46db277426762ba5ffe77e03e3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/pcm.c
diff --cc sound/soc/sof/pcm.c
index 2d6458eeacea,86829e5bd62d..000000000000
--- a/sound/soc/sof/pcm.c
+++ b/sound/soc/sof/pcm.c
@@@ -119,20 -118,8 +119,25 @@@ static int sof_pcm_hw_params(struct snd
  
  	memset(&pcm, 0, sizeof(pcm));
  
++<<<<<<< HEAD
 +	/* allocate audio buffer pages */
 +	ret = snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(params));
 +	if (ret < 0) {
 +		dev_err(sdev->dev, "error: could not allocate %d bytes for PCM %d\n",
 +			params_buffer_bytes(params), spcm->pcm.pcm_id);
 +		return ret;
 +	}
 +	if (ret) {
 +		/*
 +		 * ret == 1 means the buffer is changed
 +		 * create compressed page table for audio firmware
 +		 * ret == 0 means the buffer is not changed
 +		 * so no need to regenerate the page table
 +		 */
++=======
+ 	/* create compressed page table for audio firmware */
+ 	if (runtime->buffer_changed) {
++>>>>>>> 57e960f0020e (ASoC: SOF: Use managed buffer allocation)
  		ret = create_page_table(component, substream, runtime->dma_area,
  					runtime->dma_bytes);
  		if (ret < 0)
@@@ -591,13 -578,14 +594,13 @@@ static int sof_pcm_new(struct snd_soc_c
  	caps = &spcm->pcm.caps[stream];
  
  	/* pre-allocate playback audio buffer pages */
 -	dev_dbg(component->dev,
 -		"spcm: allocate %s playback DMA buffer size 0x%x max 0x%x\n",
 +	dev_dbg(sdev->dev, "spcm: allocate %s playback DMA buffer size 0x%x max 0x%x\n",
  		caps->name, caps->buffer_size_min, caps->buffer_size_max);
  
- 	snd_pcm_lib_preallocate_pages(pcm->streams[stream].substream,
- 				      SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
- 				      le32_to_cpu(caps->buffer_size_min),
- 				      le32_to_cpu(caps->buffer_size_max));
+ 	snd_pcm_set_managed_buffer(pcm->streams[stream].substream,
+ 				   SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
+ 				   le32_to_cpu(caps->buffer_size_min),
+ 				   le32_to_cpu(caps->buffer_size_max));
  capture:
  	stream = SNDRV_PCM_STREAM_CAPTURE;
  
@@@ -608,13 -596,14 +611,13 @@@
  	caps = &spcm->pcm.caps[stream];
  
  	/* pre-allocate capture audio buffer pages */
 -	dev_dbg(component->dev,
 -		"spcm: allocate %s capture DMA buffer size 0x%x max 0x%x\n",
 +	dev_dbg(sdev->dev, "spcm: allocate %s capture DMA buffer size 0x%x max 0x%x\n",
  		caps->name, caps->buffer_size_min, caps->buffer_size_max);
  
- 	snd_pcm_lib_preallocate_pages(pcm->streams[stream].substream,
- 				      SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
- 				      le32_to_cpu(caps->buffer_size_min),
- 				      le32_to_cpu(caps->buffer_size_max));
+ 	snd_pcm_set_managed_buffer(pcm->streams[stream].substream,
+ 				   SNDRV_DMA_TYPE_DEV_SG, sdev->dev,
+ 				   le32_to_cpu(caps->buffer_size_min),
+ 				   le32_to_cpu(caps->buffer_size_max));
  
  	return 0;
  }
* Unmerged path sound/soc/sof/pcm.c
