libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit e7eb9002d4513ac4a26c756b72e6c25bf063baf2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e7eb9002.failed

Move 'ids' from 'struct evsel' to libperf's 'struct perf_evsel'.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-26-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e7eb9002d4513ac4a26c756b72e6c25bf063baf2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/evsel.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evsel.c
#	tools/perf/util/header.c
#	tools/perf/util/intel-bts.c
#	tools/perf/util/intel-pt.c
#	tools/perf/util/synthetic-events.c
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,5e43fb9da359..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -504,11 -482,11 +504,15 @@@ void perf_evlist__id_add(struct perf_ev
  			 int cpu, int thread, u64 id)
  {
  	perf_evlist__id_hash(evlist, evsel, cpu, thread, id);
++<<<<<<< HEAD
 +	evsel->id[evsel->ids++] = id;
++=======
+ 	evsel->core.id[evsel->core.ids++] = id;
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  }
  
 -int perf_evlist__id_add_fd(struct evlist *evlist,
 -			   struct evsel *evsel,
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
  			   int cpu, int thread, int fd)
  {
  	u64 read_data[4] = { 0, };
diff --cc tools/perf/util/evsel.c
index 90bfc2303a40,55638eb9299c..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1285,21 -1249,15 +1285,28 @@@ int perf_evsel__alloc_id(struct perf_ev
  	return 0;
  }
  
 -static void perf_evsel__free_id(struct evsel *evsel)
 +static void perf_evsel__free_fd(struct perf_evsel *evsel)
  {
++<<<<<<< HEAD
 +	xyarray__delete(evsel->fd);
 +	evsel->fd = NULL;
 +}
 +
 +static void perf_evsel__free_id(struct perf_evsel *evsel)
 +{
 +	xyarray__delete(evsel->sample_id);
 +	evsel->sample_id = NULL;
 +	zfree(&evsel->id);
 +	evsel->ids = 0;
++=======
+ 	xyarray__delete(evsel->core.sample_id);
+ 	evsel->core.sample_id = NULL;
+ 	zfree(&evsel->core.id);
+ 	evsel->core.ids = 0;
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  }
  
 -static void perf_evsel__free_config_terms(struct evsel *evsel)
 +static void perf_evsel__free_config_terms(struct perf_evsel *evsel)
  {
  	struct perf_evsel_config_term *term, *h;
  
diff --cc tools/perf/util/header.c
index 13489971ed57,498f6a825656..000000000000
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@@ -535,7 -530,7 +535,11 @@@ static int write_event_desc(struct feat
  		/*
  		 * write unique ids for this event
  		 */
++<<<<<<< HEAD
 +		ret = do_write(ff, evsel->id, evsel->ids * sizeof(u64));
++=======
+ 		ret = do_write(ff, evsel->core.id, evsel->core.ids * sizeof(u64));
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  		if (ret < 0)
  			return ret;
  	}
@@@ -1652,8 -1656,8 +1656,13 @@@ static struct perf_evsel *read_event_de
  		id = calloc(nr, sizeof(*id));
  		if (!id)
  			goto error;
++<<<<<<< HEAD
 +		evsel->ids = nr;
 +		evsel->id = id;
++=======
+ 		evsel->core.ids = nr;
+ 		evsel->core.id = id;
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  
  		for (j = 0 ; j < nr; j++) {
  			if (do_read_u64(ff, id))
@@@ -1692,12 -1696,12 +1701,16 @@@ static void print_event_desc(struct fea
  		return;
  	}
  
 -	for (evsel = events; evsel->core.attr.size; evsel++) {
 +	for (evsel = events; evsel->attr.size; evsel++) {
  		fprintf(fp, "# event : name = %s, ", evsel->name);
  
- 		if (evsel->ids) {
+ 		if (evsel->core.ids) {
  			fprintf(fp, ", id = {");
++<<<<<<< HEAD
 +			for (j = 0, id = evsel->id; j < evsel->ids; j++, id++) {
++=======
+ 			for (j = 0, id = evsel->core.id; j < evsel->core.ids; j++, id++) {
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  				if (j)
  					fputc(',', fp);
  				fprintf(fp, " %"PRIu64, *id);
@@@ -3071,7 -3068,7 +3084,11 @@@ int perf_session__write_header(struct p
  
  	evlist__for_each_entry(session->evlist, evsel) {
  		evsel->id_offset = lseek(fd, 0, SEEK_CUR);
++<<<<<<< HEAD
 +		err = do_write(&ff, evsel->id, evsel->ids * sizeof(u64));
++=======
+ 		err = do_write(&ff, evsel->core.id, evsel->core.ids * sizeof(u64));
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  		if (err < 0) {
  			pr_debug("failed to write perf header\n");
  			return err;
@@@ -3082,10 -3079,10 +3099,10 @@@
  
  	evlist__for_each_entry(evlist, evsel) {
  		f_attr = (struct perf_file_attr){
 -			.attr = evsel->core.attr,
 +			.attr = evsel->attr,
  			.ids  = {
  				.offset = evsel->id_offset,
- 				.size   = evsel->ids * sizeof(u64),
+ 				.size   = evsel->core.ids * sizeof(u64),
  			}
  		};
  		err = do_write(&ff, &f_attr, sizeof(f_attr));
diff --cc tools/perf/util/intel-bts.c
index 902b67a0538f,34cb380d19a3..000000000000
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@@ -776,7 -768,7 +776,11 @@@ static int intel_bts_synth_events(struc
  	int err;
  
  	evlist__for_each_entry(evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == bts->pmu_type && evsel->ids) {
++=======
+ 		if (evsel->core.attr.type == bts->pmu_type && evsel->core.ids) {
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  			found = true;
  			break;
  		}
diff --cc tools/perf/util/intel-pt.c
index e9ac11860229,a1c9eb6d4f40..000000000000
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@@ -2736,13 -2729,13 +2736,17 @@@ static void intel_pt_set_event_name(str
  	}
  }
  
 -static struct evsel *intel_pt_evsel(struct intel_pt *pt,
 -					 struct evlist *evlist)
 +static struct perf_evsel *intel_pt_evsel(struct intel_pt *pt,
 +					 struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == pt->pmu_type && evsel->ids)
++=======
+ 		if (evsel->core.attr.type == pt->pmu_type && evsel->core.ids)
++>>>>>>> e7eb9002d451 (libperf: Move 'ids' from 'struct evsel' to 'struct perf_evsel')
  			return evsel;
  	}
  
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/util/synthetic-events.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evsel.c
diff --git a/tools/perf/util/evsel.h b/tools/perf/util/evsel.h
index fe84f1536094..692680ec45fc 100644
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@ -113,7 +113,6 @@ struct perf_evsel {
 	struct perf_counts	*counts;
 	struct perf_counts	*prev_raw_counts;
 	int			idx;
-	u32			ids;
 	unsigned long		max_events;
 	unsigned long		nr_events_printed;
 	char			*name;
* Unmerged path tools/perf/util/header.c
* Unmerged path tools/perf/util/intel-bts.c
* Unmerged path tools/perf/util/intel-pt.c
* Unmerged path tools/perf/util/synthetic-events.c
