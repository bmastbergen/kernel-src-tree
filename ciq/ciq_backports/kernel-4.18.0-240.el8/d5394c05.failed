powerpc/pseries/svm: Use shared memory for Debug Trace Log (DTL)

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [powerpc] pseries/svm: Use shared memory for Debug Trace Log (DTL) (Michael Roth) [1730194]
Rebuild_FUZZ: 93.33%
commit-author Anshuman Khandual <khandual@linux.vnet.ibm.com>
commit d5394c059da9786043934bed474562cde124e7d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d5394c05.failed

Secure guests need to share the DTL buffers with the hypervisor. To that
end, use a kmem_cache constructor which converts the underlying buddy
allocated SLUB cache pages into shared memory.

	Signed-off-by: Anshuman Khandual <khandual@linux.vnet.ibm.com>
	Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20190820021326.6884-10-bauerman@linux.ibm.com
(cherry picked from commit d5394c059da9786043934bed474562cde124e7d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/Makefile
#	arch/powerpc/platforms/pseries/setup.c
diff --cc arch/powerpc/platforms/pseries/Makefile
index e2487244e04c,a420ef4c9d8e..000000000000
--- a/arch/powerpc/platforms/pseries/Makefile
+++ b/arch/powerpc/platforms/pseries/Makefile
@@@ -26,7 -26,7 +26,11 @@@ obj-$(CONFIG_IBMVIO)		+= vio.
  obj-$(CONFIG_IBMEBUS)		+= ibmebus.o
  obj-$(CONFIG_PAPR_SCM)		+= papr_scm.o
  obj-$(CONFIG_PPC_SPLPAR)	+= vphn.o
++<<<<<<< HEAD
 +obj-$(CONFIG_FA_DUMP)		+= rtas-fadump.o
++=======
+ obj-$(CONFIG_PPC_SVM)		+= svm.o
++>>>>>>> d5394c059da9 (powerpc/pseries/svm: Use shared memory for Debug Trace Log (DTL))
  
  ifdef CONFIG_PPC_PSERIES
  obj-$(CONFIG_SUSPEND)		+= suspend.o
diff --cc arch/powerpc/platforms/pseries/setup.c
index 16d0569700f5,d8930c3a8a11..000000000000
--- a/arch/powerpc/platforms/pseries/setup.c
+++ b/arch/powerpc/platforms/pseries/setup.c
@@@ -70,6 -67,9 +70,12 @@@
  #include <asm/kexec.h>
  #include <asm/isa-bridge.h>
  #include <asm/security_features.h>
++<<<<<<< HEAD
++=======
+ #include <asm/asm-const.h>
+ #include <asm/swiotlb.h>
+ #include <asm/svm.h>
++>>>>>>> d5394c059da9 (powerpc/pseries/svm: Use shared memory for Debug Trace Log (DTL))
  
  #include "pseries.h"
  #include "../../../../drivers/pci/pci.h"
diff --git a/arch/powerpc/include/asm/svm.h b/arch/powerpc/include/asm/svm.h
index 2689d8d841f8..85580b30aba4 100644
--- a/arch/powerpc/include/asm/svm.h
+++ b/arch/powerpc/include/asm/svm.h
@@ -15,6 +15,9 @@ static inline bool is_secure_guest(void)
 	return mfmsr() & MSR_S;
 }
 
+void dtl_cache_ctor(void *addr);
+#define get_dtl_cache_ctor()	(is_secure_guest() ? dtl_cache_ctor : NULL)
+
 #else /* CONFIG_PPC_SVM */
 
 static inline bool is_secure_guest(void)
@@ -22,5 +25,7 @@ static inline bool is_secure_guest(void)
 	return false;
 }
 
+#define get_dtl_cache_ctor() NULL
+
 #endif /* CONFIG_PPC_SVM */
 #endif /* _ASM_POWERPC_SVM_H */
* Unmerged path arch/powerpc/platforms/pseries/Makefile
* Unmerged path arch/powerpc/platforms/pseries/setup.c
diff --git a/arch/powerpc/platforms/pseries/svm.c b/arch/powerpc/platforms/pseries/svm.c
new file mode 100644
index 000000000000..2b2b1a77ca1e
--- /dev/null
+++ b/arch/powerpc/platforms/pseries/svm.c
@@ -0,0 +1,40 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Secure VM platform
+ *
+ * Copyright 2018 IBM Corporation
+ * Author: Anshuman Khandual <khandual@linux.vnet.ibm.com>
+ */
+
+#include <linux/mm.h>
+#include <asm/ultravisor.h>
+
+/* There's one dispatch log per CPU. */
+#define NR_DTL_PAGE (DISPATCH_LOG_BYTES * CONFIG_NR_CPUS / PAGE_SIZE)
+
+static struct page *dtl_page_store[NR_DTL_PAGE];
+static long dtl_nr_pages;
+
+static bool is_dtl_page_shared(struct page *page)
+{
+	long i;
+
+	for (i = 0; i < dtl_nr_pages; i++)
+		if (dtl_page_store[i] == page)
+			return true;
+
+	return false;
+}
+
+void dtl_cache_ctor(void *addr)
+{
+	unsigned long pfn = PHYS_PFN(__pa(addr));
+	struct page *page = pfn_to_page(pfn);
+
+	if (!is_dtl_page_shared(page)) {
+		dtl_page_store[dtl_nr_pages] = page;
+		dtl_nr_pages++;
+		WARN_ON(dtl_nr_pages >= NR_DTL_PAGE);
+		uv_share_page(pfn, 1);
+	}
+}
