KVM: s390: protvirt: Add KVM api documentation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Janosch Frank <frankja@linux.ibm.com>
commit 04ed89dc4aeba57ab99df16edbd9d06e43d0a2c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/04ed89dc.failed

Add documentation for KVM_CAP_S390_PROTECTED capability and the
KVM_S390_PV_COMMAND ioctl.

	Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
[borntraeger@de.ibm.com: patch merging, splitting, fixing]
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit 04ed89dc4aeba57ab99df16edbd9d06e43d0a2c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/virt/kvm/api.txt
diff --cc Documentation/virt/kvm/api.txt
index 0fa33ec7673f,bae90f3cd11d..000000000000
--- a/Documentation/virt/kvm/api.txt
+++ b/Documentation/virt/kvm/api.txt
@@@ -4143,13 -4583,121 +4143,61 @@@ counters are controlled by the fixed_co
  
  No flags are defined yet, the field must be zero.
  
 -Valid values for 'action'::
 -
 -  #define KVM_PMU_EVENT_ALLOW 0
 -  #define KVM_PMU_EVENT_DENY 1
 -
 -4.121 KVM_PPC_SVM_OFF
 ----------------------
 -
 -:Capability: basic
 -:Architectures: powerpc
 -:Type: vm ioctl
 -:Parameters: none
 -:Returns: 0 on successful completion,
 -
 -Errors:
 -
 -  ======     ================================================================
 -  EINVAL     if ultravisor failed to terminate the secure guest
 -  ENOMEM     if hypervisor failed to allocate new radix page tables for guest
 -  ======     ================================================================
 -
 -This ioctl is used to turn off the secure mode of the guest or transition
 -the guest from secure mode to normal mode. This is invoked when the guest
 -is reset. This has no effect if called for a normal guest.
 -
 -This ioctl issues an ultravisor call to terminate the secure guest,
 -unpins the VPA pages and releases all the device pages that are used to
 -track the secure pages by hypervisor.
 -
 -4.122 KVM_S390_NORMAL_RESET
 -
 -Capability: KVM_CAP_S390_VCPU_RESETS
 -Architectures: s390
 -Type: vcpu ioctl
 -Parameters: none
 -Returns: 0
 -
 -This ioctl resets VCPU registers and control structures according to
 -the cpu reset definition in the POP (Principles Of Operation).
 -
 -4.123 KVM_S390_INITIAL_RESET
 -
 -Capability: none
 -Architectures: s390
 -Type: vcpu ioctl
 -Parameters: none
 -Returns: 0
 -
 -This ioctl resets VCPU registers and control structures according to
 -the initial cpu reset definition in the POP. However, the cpu is not
 -put into ESA mode. This reset is a superset of the normal reset.
 -
 -4.124 KVM_S390_CLEAR_RESET
 -
 -Capability: KVM_CAP_S390_VCPU_RESETS
 -Architectures: s390
 -Type: vcpu ioctl
 -Parameters: none
 -Returns: 0
 -
 -This ioctl resets VCPU registers and control structures according to
 -the clear cpu reset definition in the POP. However, the cpu is not put
 -into ESA mode. This reset is a superset of the initial reset.
 +Valid values for 'action':
 +#define KVM_PMU_EVENT_ALLOW 0
 +#define KVM_PMU_EVENT_DENY 1
  
  
+ 4.125 KVM_S390_PV_COMMAND
+ -------------------------
+ 
+ :Capability: KVM_CAP_S390_PROTECTED
+ :Architectures: s390
+ :Type: vm ioctl
+ :Parameters: struct kvm_pv_cmd
+ :Returns: 0 on success, < 0 on error
+ 
+ ::
+ 
+   struct kvm_pv_cmd {
+ 	__u32 cmd;	/* Command to be executed */
+ 	__u16 rc;	/* Ultravisor return code */
+ 	__u16 rrc;	/* Ultravisor return reason code */
+ 	__u64 data;	/* Data or address */
+ 	__u32 flags;    /* flags for future extensions. Must be 0 for now */
+ 	__u32 reserved[3];
+   };
+ 
+ cmd values:
+ 
+ KVM_PV_ENABLE
+   Allocate memory and register the VM with the Ultravisor, thereby
+   donating memory to the Ultravisor that will become inaccessible to
+   KVM. All existing CPUs are converted to protected ones. After this
+   command has succeeded, any CPU added via hotplug will become
+   protected during its creation as well.
+ 
+ KVM_PV_DISABLE
+ 
+   Deregister the VM from the Ultravisor and reclaim the memory that
+   had been donated to the Ultravisor, making it usable by the kernel
+   again.  All registered VCPUs are converted back to non-protected
+   ones.
+ 
+ KVM_PV_VM_SET_SEC_PARMS
+   Pass the image header from VM memory to the Ultravisor in
+   preparation of image unpacking and verification.
+ 
+ KVM_PV_VM_UNPACK
+   Unpack (protect and decrypt) a page of the encrypted boot image.
+ 
+ KVM_PV_VM_VERIFY
+   Verify the integrity of the unpacked image. Only if this succeeds,
+   KVM is allowed to start protected VCPUs.
+ 
+ 
  5. The kvm_run structure
 -========================
 +------------------------
  
  Application code obtains a pointer to the kvm_run structure by
  mmap()ing a vcpu fd.  From that point, application code can control
@@@ -5388,3 -6067,21 +5436,24 @@@ handling by KVM (as some KVM hypercall 
  flush hypercalls by Hyper-V) so userspace should disable KVM identification
  in CPUID and only exposes Hyper-V identification. In this case, guest
  thinks it's running on Hyper-V and only use Hyper-V hypercalls.
++<<<<<<< HEAD:Documentation/virt/kvm/api.txt
++=======
+ 
+ 8.22 KVM_CAP_S390_VCPU_RESETS
+ 
+ Architectures: s390
+ 
+ This capability indicates that the KVM_S390_NORMAL_RESET and
+ KVM_S390_CLEAR_RESET ioctls are available.
+ 
+ 8.23 KVM_CAP_S390_PROTECTED
+ 
+ Architecture: s390
+ 
+ 
+ This capability indicates that the Ultravisor has been initialized and
+ KVM can therefore start protected VMs.
+ This capability governs the KVM_S390_PV_COMMAND ioctl and the
+ KVM_MP_STATE_LOAD MP_STATE. KVM_SET_MP_STATE can fail for protected
+ guests when the state change is invalid.
++>>>>>>> 04ed89dc4aeb (KVM: s390: protvirt: Add KVM api documentation):Documentation/virt/kvm/api.rst
* Unmerged path Documentation/virt/kvm/api.txt
