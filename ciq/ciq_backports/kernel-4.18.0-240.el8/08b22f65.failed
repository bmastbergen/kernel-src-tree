drm/udl: Switch to SHMEM

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Thomas Zimmermann <tzimmermann@suse.de>
commit 08b22f65b309649057edfbae1d8772b04210b486
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/08b22f65.failed

Udl's GEM code and the generic SHMEM are almost identical. Replace
the former with SHMEM. The dmabuf support in udl is being replaced
with generic GEM PRIME functions.

The main difference is in the caching flags for mmap pages. By
default, SHMEM always sets (uncached) write combining. In udl's
memory management code, only imported buffers use write combining.
Memory pages of locally created buffer objects are mmap'ed with
caching enabled. To keep the optimization, udl provides its own
mmap function for GEM objects where it fixes up the mapping flags.

v3:
	- restore udl vmap that enables caching
v2:
	- remove obsolete code in a separate patch

	Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
	Acked-by: Gerd Hoffmann <kraxel@redhat.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20191107094307.19870-4-tzimmermann@suse.de
(cherry picked from commit 08b22f65b309649057edfbae1d8772b04210b486)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/udl/udl_drv.c
#	drivers/gpu/drm/udl/udl_fb.c
#	drivers/gpu/drm/udl/udl_gem.c
diff --cc drivers/gpu/drm/udl/udl_drv.c
index 4a49facb608d,563cc5809e56..000000000000
--- a/drivers/gpu/drm/udl/udl_drv.c
+++ b/drivers/gpu/drm/udl/udl_drv.c
@@@ -4,9 -4,15 +4,16 @@@
   */
  
  #include <linux/module.h>
 -
 +#include <drm/drmP.h>
  #include <drm/drm_crtc_helper.h>
++<<<<<<< HEAD
++=======
+ #include <drm/drm_drv.h>
+ #include <drm/drm_file.h>
+ #include <drm/drm_gem_shmem_helper.h>
+ #include <drm/drm_ioctl.h>
++>>>>>>> 08b22f65b309 (drm/udl: Switch to SHMEM)
  #include <drm/drm_probe_helper.h>
 -#include <drm/drm_print.h>
 -
  #include "udl_drv.h"
  
  static int udl_usb_suspend(struct usb_interface *interface,
@@@ -58,17 -48,10 +49,15 @@@ static struct drm_driver driver = 
  	.release = udl_driver_release,
  
  	/* gem hooks */
++<<<<<<< HEAD
 +	.gem_free_object_unlocked = udl_gem_free_object,
 +	.gem_vm_ops = &udl_gem_vm_ops,
++=======
+ 	.gem_create_object = udl_driver_gem_create_object,
++>>>>>>> 08b22f65b309 (drm/udl: Switch to SHMEM)
  
- 	.dumb_create = udl_dumb_create,
- 	.dumb_map_offset = udl_gem_mmap,
  	.fops = &udl_driver_fops,
- 
- 	.prime_handle_to_fd = drm_gem_prime_handle_to_fd,
- 	.prime_fd_to_handle = drm_gem_prime_fd_to_handle,
- 	.gem_prime_export = udl_gem_prime_export,
- 	.gem_prime_import = udl_gem_prime_import,
+ 	DRM_GEM_SHMEM_DRIVER_OPS,
  
  	.name = DRIVER_NAME,
  	.desc = DRIVER_DESC,
diff --cc drivers/gpu/drm/udl/udl_fb.c
index e1116bf7b9d7,f8153b726343..000000000000
--- a/drivers/gpu/drm/udl/udl_fb.c
+++ b/drivers/gpu/drm/udl/udl_fb.c
@@@ -7,19 -7,19 +7,28 @@@
   * Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
   * Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
   */
 -
 -#include <linux/moduleparam.h>
 +#include <linux/module.h>
 +#include <linux/slab.h>
 +#include <linux/fb.h>
  #include <linux/dma-buf.h>
 +#include <linux/mem_encrypt.h>
  
 +#include <drm/drmP.h>
 +#include <drm/drm_crtc.h>
  #include <drm/drm_crtc_helper.h>
++<<<<<<< HEAD
++=======
+ #include <drm/drm_drv.h>
+ #include <drm/drm_fb_helper.h>
+ #include <drm/drm_fourcc.h>
+ #include <drm/drm_gem_shmem_helper.h>
+ #include <drm/drm_modeset_helper.h>
+ 
++>>>>>>> 08b22f65b309 (drm/udl: Switch to SHMEM)
  #include "udl_drv.h"
  
 +#include <drm/drm_fb_helper.h>
 +
  #define DL_DEFIO_WRITE_DELAY    (HZ/20) /* fb_deferred_io.delay in jiffies */
  
  static int fb_defio = 0;  /* Optionally enable experimental fb_defio mmap support */
diff --cc drivers/gpu/drm/udl/udl_gem.c
index 9e71f3272ed1,9762265edfcf..000000000000
--- a/drivers/gpu/drm/udl/udl_gem.c
+++ b/drivers/gpu/drm/udl/udl_gem.c
@@@ -3,10 -3,123 +3,130 @@@
   * Copyright (C) 2012 Red Hat
   */
  
++<<<<<<< HEAD
 +#include <drm/drmP.h>
 +#include "udl_drv.h"
 +#include <linux/shmem_fs.h>
 +#include <linux/dma-buf.h>
++=======
+ #include <linux/dma-buf.h>
+ #include <linux/vmalloc.h>
+ 
+ #include <drm/drm_drv.h>
+ #include <drm/drm_gem_shmem_helper.h>
+ #include <drm/drm_mode.h>
+ #include <drm/drm_prime.h>
+ 
+ #include "udl_drv.h"
+ 
+ /*
+  * GEM object funcs
+  */
+ 
+ static void udl_gem_object_free_object(struct drm_gem_object *obj)
+ {
+ 	struct drm_gem_shmem_object *shmem = to_drm_gem_shmem_obj(obj);
+ 
+ 	/* Fbdev emulation vmaps the buffer. Unmap it here for consistency
+ 	 * with the original udl GEM code.
+ 	 *
+ 	 * TODO: Switch to generic fbdev emulation and release the
+ 	 *       GEM object with drm_gem_shmem_free_object().
+ 	 */
+ 	if (shmem->vaddr)
+ 		drm_gem_shmem_vunmap(obj, shmem->vaddr);
+ 
+ 	drm_gem_shmem_free_object(obj);
+ }
+ 
+ static int udl_gem_object_mmap(struct drm_gem_object *obj,
+ 			       struct vm_area_struct *vma)
+ {
+ 	int ret;
+ 
+ 	ret = drm_gem_shmem_mmap(obj, vma);
+ 	if (ret)
+ 		return ret;
+ 
+ 	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
+ 	if (obj->import_attach)
+ 		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
+ 	vma->vm_page_prot = pgprot_decrypted(vma->vm_page_prot);
+ 
+ 	return 0;
+ }
+ 
+ static void *udl_gem_object_vmap(struct drm_gem_object *obj)
+ {
+ 	struct drm_gem_shmem_object *shmem = to_drm_gem_shmem_obj(obj);
+ 	int ret;
+ 
+ 	ret = mutex_lock_interruptible(&shmem->vmap_lock);
+ 	if (ret)
+ 		return ERR_PTR(ret);
+ 
+ 	if (shmem->vmap_use_count++ > 0)
+ 		goto out;
+ 
+ 	ret = drm_gem_shmem_get_pages(shmem);
+ 	if (ret)
+ 		goto err_zero_use;
+ 
+ 	if (obj->import_attach)
+ 		shmem->vaddr = dma_buf_vmap(obj->import_attach->dmabuf);
+ 	else
+ 		shmem->vaddr = vmap(shmem->pages, obj->size >> PAGE_SHIFT,
+ 				    VM_MAP, PAGE_KERNEL);
+ 
+ 	if (!shmem->vaddr) {
+ 		DRM_DEBUG_KMS("Failed to vmap pages\n");
+ 		ret = -ENOMEM;
+ 		goto err_put_pages;
+ 	}
+ 
+ out:
+ 	mutex_unlock(&shmem->vmap_lock);
+ 	return shmem->vaddr;
+ 
+ err_put_pages:
+ 	drm_gem_shmem_put_pages(shmem);
+ err_zero_use:
+ 	shmem->vmap_use_count = 0;
+ 	mutex_unlock(&shmem->vmap_lock);
+ 	return ERR_PTR(ret);
+ }
+ 
+ static const struct drm_gem_object_funcs udl_gem_object_funcs = {
+ 	.free = udl_gem_object_free_object,
+ 	.print_info = drm_gem_shmem_print_info,
+ 	.pin = drm_gem_shmem_pin,
+ 	.unpin = drm_gem_shmem_unpin,
+ 	.get_sg_table = drm_gem_shmem_get_sg_table,
+ 	.vmap = udl_gem_object_vmap,
+ 	.vunmap = drm_gem_shmem_vunmap,
+ 	.mmap = udl_gem_object_mmap,
+ };
+ 
+ /*
+  * Helpers for struct drm_driver
+  */
+ 
+ struct drm_gem_object *udl_driver_gem_create_object(struct drm_device *dev,
+ 						    size_t size)
+ {
+ 	struct drm_gem_shmem_object *shmem;
+ 	struct drm_gem_object *obj;
+ 
+ 	shmem = kzalloc(sizeof(*shmem), GFP_KERNEL);
+ 	if (!shmem)
+ 		return NULL;
+ 
+ 	obj = &shmem->base;
+ 	obj->funcs = &udl_gem_object_funcs;
+ 
+ 	return obj;
+ }
++>>>>>>> 08b22f65b309 (drm/udl: Switch to SHMEM)
  
  struct udl_gem_object *udl_gem_alloc_object(struct drm_device *dev,
  					    size_t size)
diff --git a/drivers/gpu/drm/udl/Kconfig b/drivers/gpu/drm/udl/Kconfig
index b4d179b87f01..145b2a95ce58 100644
--- a/drivers/gpu/drm/udl/Kconfig
+++ b/drivers/gpu/drm/udl/Kconfig
@@ -5,6 +5,7 @@ config DRM_UDL
 	depends on USB_SUPPORT
 	depends on USB_ARCH_HAS_HCD
 	select USB
+	select DRM_GEM_SHMEM_HELPER
 	select DRM_KMS_HELPER
 	help
 	  This is a KMS driver for the USB displaylink video adapters.
* Unmerged path drivers/gpu/drm/udl/udl_drv.c
diff --git a/drivers/gpu/drm/udl/udl_drv.h b/drivers/gpu/drm/udl/udl_drv.h
index 0fa4d8595d1a..a99c659a63ff 100644
--- a/drivers/gpu/drm/udl/udl_drv.h
+++ b/drivers/gpu/drm/udl/udl_drv.h
@@ -79,6 +79,7 @@ struct udl_gem_object {
 struct udl_framebuffer {
 	struct drm_framebuffer base;
 	struct udl_gem_object *obj;
+	struct drm_gem_shmem_object *shmem;
 	bool active_16; /* active on the 16-bit channel */
 };
 
* Unmerged path drivers/gpu/drm/udl/udl_fb.c
* Unmerged path drivers/gpu/drm/udl/udl_gem.c
