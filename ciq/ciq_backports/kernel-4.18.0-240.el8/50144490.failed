x86/centaur: Use common IA32_FEAT_CTL MSR initialization

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [x86] centaur: Use common IA32_FEAT_CTL MSR initialization (Vitaly Kuznetsov) [1813987]
Rebuild_FUZZ: 96.30%
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 501444905fcb4166589fda99497c273ac5efc65e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/50144490.failed

Use the recently added IA32_FEAT_CTL MSR initialization sequence to
opportunistically enable VMX support when running on a Centaur CPU.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20191221044513.21680-7-sean.j.christopherson@intel.com
(cherry picked from commit 501444905fcb4166589fda99497c273ac5efc65e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig.cpu
diff --cc arch/x86/Kconfig.cpu
index 638411f22267,cba5b64266df..000000000000
--- a/arch/x86/Kconfig.cpu
+++ b/arch/x86/Kconfig.cpu
@@@ -378,7 -385,11 +378,15 @@@ config X86_MINIMUM_CPU_FAMIL
  
  config X86_DEBUGCTLMSR
  	def_bool y
++<<<<<<< HEAD
 +	depends on !(MK6 || MWINCHIPC6 || MWINCHIP3D || MCYRIXIII || M586MMX || M586TSC || M586 || M486) && !UML
++=======
+ 	depends on !(MK6 || MWINCHIPC6 || MWINCHIP3D || MCYRIXIII || M586MMX || M586TSC || M586 || M486SX || M486) && !UML
+ 
+ config IA32_FEAT_CTL
+ 	def_bool y
+ 	depends on CPU_SUP_INTEL || CPU_SUP_CENTAUR
++>>>>>>> 501444905fcb (x86/centaur: Use common IA32_FEAT_CTL MSR initialization)
  
  menuconfig PROCESSOR_SELECT
  	bool "Supported processor vendors" if EXPERT
* Unmerged path arch/x86/Kconfig.cpu
diff --git a/arch/x86/kernel/cpu/centaur.c b/arch/x86/kernel/cpu/centaur.c
index 14433ff5b828..084f6040b4df 100644
--- a/arch/x86/kernel/cpu/centaur.c
+++ b/arch/x86/kernel/cpu/centaur.c
@@ -250,6 +250,8 @@ static void init_centaur(struct cpuinfo_x86 *c)
 	set_cpu_cap(c, X86_FEATURE_LFENCE_RDTSC);
 #endif
 
+	init_ia32_feat_ctl(c);
+
 	if (cpu_has(c, X86_FEATURE_VMX))
 		centaur_detect_vmx_virtcap(c);
 }
