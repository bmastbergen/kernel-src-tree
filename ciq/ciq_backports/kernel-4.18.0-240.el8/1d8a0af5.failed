selftests/bpf: Add test for freplace program with expected_attach_type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit 1d8a0af5ee1ad219a9ebd9b43559b165bcb3ff40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1d8a0af5.failed

This adds a new selftest that tests the ability to attach an freplace
program to a program type that relies on the expected_attach_type of the
target program to pass verification.

	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/158773526831.293902.16011743438619684815.stgit@toke.dk
(cherry picked from commit 1d8a0af5ee1ad219a9ebd9b43559b165bcb3ff40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
diff --cc tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
index 7d3740d38965,c2642517e1d8..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
+++ b/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
@@@ -103,11 -109,41 +109,47 @@@ static void test_target_yes_callees(voi
  	test_fexit_bpf2bpf_common("./fexit_bpf2bpf.o",
  				  "./test_pkt_access.o",
  				  ARRAY_SIZE(prog_name),
- 				  prog_name);
+ 				  prog_name, true);
+ }
+ 
++<<<<<<< HEAD
++=======
+ static void test_func_replace(void)
+ {
+ 	const char *prog_name[] = {
+ 		"fexit/test_pkt_access",
+ 		"fexit/test_pkt_access_subprog1",
+ 		"fexit/test_pkt_access_subprog2",
+ 		"fexit/test_pkt_access_subprog3",
+ 		"freplace/get_skb_len",
+ 		"freplace/get_skb_ifindex",
+ 		"freplace/get_constant",
+ 	};
+ 	test_fexit_bpf2bpf_common("./fexit_bpf2bpf.o",
+ 				  "./test_pkt_access.o",
+ 				  ARRAY_SIZE(prog_name),
+ 				  prog_name, true);
+ }
+ 
+ static void test_func_replace_verify(void)
+ {
+ 	const char *prog_name[] = {
+ 		"freplace/do_bind",
+ 	};
+ 	test_fexit_bpf2bpf_common("./freplace_connect4.o",
+ 				  "./connect4_prog.o",
+ 				  ARRAY_SIZE(prog_name),
+ 				  prog_name, false);
  }
  
++>>>>>>> 1d8a0af5ee1a (selftests/bpf: Add test for freplace program with expected_attach_type)
  void test_fexit_bpf2bpf(void)
  {
  	test_target_no_callees();
  	test_target_yes_callees();
++<<<<<<< HEAD
++=======
+ 	test_func_replace();
+ 	test_func_replace_verify();
++>>>>>>> 1d8a0af5ee1a (selftests/bpf: Add test for freplace program with expected_attach_type)
  }
* Unmerged path tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
diff --git a/tools/testing/selftests/bpf/progs/connect4_prog.c b/tools/testing/selftests/bpf/progs/connect4_prog.c
index 1fd244d35ba9..a5a239ca4b2b 100644
--- a/tools/testing/selftests/bpf/progs/connect4_prog.c
+++ b/tools/testing/selftests/bpf/progs/connect4_prog.c
@@ -18,11 +18,25 @@
 
 int _version SEC("version") = 1;
 
+__attribute__ ((noinline))
+int do_bind(struct bpf_sock_addr *ctx)
+{
+	struct sockaddr_in sa = {};
+
+	sa.sin_family = AF_INET;
+	sa.sin_port = bpf_htons(0);
+	sa.sin_addr.s_addr = bpf_htonl(SRC_REWRITE_IP4);
+
+	if (bpf_bind(ctx, (struct sockaddr *)&sa, sizeof(sa)) != 0)
+		return 0;
+
+	return 1;
+}
+
 SEC("cgroup/connect4")
 int connect_v4_prog(struct bpf_sock_addr *ctx)
 {
 	struct bpf_sock_tuple tuple = {};
-	struct sockaddr_in sa;
 	struct bpf_sock *sk;
 
 	/* Verify that new destination is available. */
@@ -56,17 +70,7 @@ int connect_v4_prog(struct bpf_sock_addr *ctx)
 	ctx->user_ip4 = bpf_htonl(DST_REWRITE_IP4);
 	ctx->user_port = bpf_htons(DST_REWRITE_PORT4);
 
-	/* Rewrite source. */
-	memset(&sa, 0, sizeof(sa));
-
-	sa.sin_family = AF_INET;
-	sa.sin_port = bpf_htons(0);
-	sa.sin_addr.s_addr = bpf_htonl(SRC_REWRITE_IP4);
-
-	if (bpf_bind(ctx, (struct sockaddr *)&sa, sizeof(sa)) != 0)
-		return 0;
-
-	return 1;
+	return do_bind(ctx) ? 1 : 0;
 }
 
 char _license[] SEC("license") = "GPL";
diff --git a/tools/testing/selftests/bpf/progs/freplace_connect4.c b/tools/testing/selftests/bpf/progs/freplace_connect4.c
new file mode 100644
index 000000000000..a0ae84230699
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/freplace_connect4.c
@@ -0,0 +1,18 @@
+#include <linux/stddef.h>
+#include <linux/ipv6.h>
+#include <linux/bpf.h>
+#include <linux/in.h>
+#include <sys/socket.h>
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_endian.h>
+
+SEC("freplace/do_bind")
+int new_do_bind(struct bpf_sock_addr *ctx)
+{
+  struct sockaddr_in sa = {};
+
+  bpf_bind(ctx, (struct sockaddr *)&sa, sizeof(sa));
+  return 0;
+}
+
+char _license[] SEC("license") = "GPL";
