io_uring: remove req init from io_get_req()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit 0553b8bda8709c47863eab3fff7ac32ad04ca52b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0553b8bd.failed

io_get_req() do two different things: io_kiocb allocation and
initialisation. Move init part out of it and rename into
io_alloc_req(). It's simpler this way and also have better data
locality.

	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 0553b8bda8709c47863eab3fff7ac32ad04ca52b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 2afa3b27779e,7f9bf8b6e6af..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -563,8 -1271,30 +563,35 @@@ static void io_cqring_add_event(struct 
  	io_cqring_ev_posted(ctx);
  }
  
++<<<<<<< HEAD
 +static struct io_kiocb *io_get_req(struct io_ring_ctx *ctx,
 +				   struct io_submit_state *state)
++=======
+ static void io_cqring_add_event(struct io_kiocb *req, long res)
+ {
+ 	__io_cqring_add_event(req, res, 0);
+ }
+ 
+ static inline bool io_is_fallback_req(struct io_kiocb *req)
+ {
+ 	return req == (struct io_kiocb *)
+ 			((unsigned long) req->ctx->fallback_req & ~1UL);
+ }
+ 
+ static struct io_kiocb *io_get_fallback_req(struct io_ring_ctx *ctx)
+ {
+ 	struct io_kiocb *req;
+ 
+ 	req = ctx->fallback_req;
+ 	if (!test_and_set_bit_lock(0, (unsigned long *) ctx->fallback_req))
+ 		return req;
+ 
+ 	return NULL;
+ }
+ 
+ static struct io_kiocb *io_alloc_req(struct io_ring_ctx *ctx,
+ 				     struct io_submit_state *state)
++>>>>>>> 0553b8bda870 (io_uring: remove req init from io_get_req())
  {
  	gfp_t gfp = GFP_KERNEL | __GFP_NOWARN;
  	struct io_kiocb *req;
@@@ -600,25 -1327,32 +627,31 @@@
  		req = state->reqs[state->free_reqs];
  	}
  
++<<<<<<< HEAD
 +	req->file = NULL;
 +	req->ctx = ctx;
 +	req->flags = 0;
 +	/* one is dropped after submission, the other at completion */
 +	refcount_set(&req->refs, 2);
 +	req->result = 0;
 +	return req;
 +out:
 +	percpu_ref_put(&ctx->refs);
 +	return NULL;
++=======
+ 	return req;
+ fallback:
+ 	return io_get_fallback_req(ctx);
++>>>>>>> 0553b8bda870 (io_uring: remove req init from io_get_req())
  }
  
 -static inline void io_put_file(struct io_kiocb *req, struct file *file,
 -			  bool fixed)
 +static void io_free_req_many(struct io_ring_ctx *ctx, void **reqs, int *nr)
  {
 -	if (fixed)
 -		percpu_ref_put(req->fixed_file_refs);
 -	else
 -		fput(file);
 -}
 -
 -static void __io_req_aux_free(struct io_kiocb *req)
 -{
 -	if (req->flags & REQ_F_NEED_CLEANUP)
 -		io_cleanup_req(req);
 -
 -	kfree(req->io);
 -	if (req->file)
 -		io_put_file(req, req->file, (req->flags & REQ_F_FIXED_FILE));
 -	if (req->task)
 -		put_task_struct(req->task);
 -
 -	io_req_work_drop_env(req);
 +	if (*nr) {
 +		kmem_cache_free_bulk(req_cachep, *nr, reqs);
 +		percpu_ref_put_many(&ctx->refs, *nr);
 +		*nr = 0;
 +	}
  }
  
  static void __io_free_req(struct io_kiocb *req)
@@@ -2415,27 -5776,46 +2448,55 @@@ static bool io_get_sqring(struct io_rin
  	 * 2) allows the kernel side to track the head on its own, even
  	 *    though the application is the one updating it.
  	 */
 -	head = READ_ONCE(sq_array[ctx->cached_sq_head & ctx->sq_mask]);
 -	if (likely(head < ctx->sq_entries))
 -		return &ctx->sq_sqes[head];
 +	head = ctx->cached_sq_head;
 +	/* make sure SQ entry isn't read before tail */
 +	if (head == smp_load_acquire(&ring->r.tail))
 +		return false;
  
 -	/* drop invalid entries */
 -	ctx->cached_sq_dropped++;
 -	WRITE_ONCE(ctx->rings->sq_dropped, ctx->cached_sq_dropped);
 -	return NULL;
 -}
 +	head = READ_ONCE(ring->array[head & ctx->sq_mask]);
 +	if (head < ctx->sq_entries) {
 +		s->sqe = &ctx->sq_sqes[head];
 +		s->sequence = ctx->cached_sq_head;
 +		ctx->cached_sq_head++;
 +		return true;
 +	}
  
 -static inline void io_consume_sqe(struct io_ring_ctx *ctx)
 -{
 +	/* drop invalid entries */
  	ctx->cached_sq_head++;
 +	ring->dropped++;
 +	return false;
  }
  
++<<<<<<< HEAD
 +static int io_submit_sqes(struct io_ring_ctx *ctx, struct sqe_submit *sqes,
 +			  unsigned int nr, bool has_user, bool mm_fault)
++=======
+ static void io_init_req(struct io_ring_ctx *ctx, struct io_kiocb *req,
+ 			const struct io_uring_sqe *sqe)
+ {
+ 	/*
+ 	 * All io need record the previous position, if LINK vs DARIN,
+ 	 * it can be used to mark the position of the first IO in the
+ 	 * link list.
+ 	 */
+ 	req->sequence = ctx->cached_sq_head;
+ 	req->opcode = READ_ONCE(sqe->opcode);
+ 	req->user_data = READ_ONCE(sqe->user_data);
+ 	req->io = NULL;
+ 	req->file = NULL;
+ 	req->ctx = ctx;
+ 	req->flags = 0;
+ 	/* one is dropped after submission, the other at completion */
+ 	refcount_set(&req->refs, 2);
+ 	req->task = NULL;
+ 	req->result = 0;
+ 	INIT_IO_WORK(&req->work, io_wq_submit_work);
+ }
+ 
+ static int io_submit_sqes(struct io_ring_ctx *ctx, unsigned int nr,
+ 			  struct file *ring_file, int ring_fd,
+ 			  struct mm_struct **mm, bool async)
++>>>>>>> 0553b8bda870 (io_uring: remove req init from io_get_req())
  {
  	struct io_submit_state state, *statep = NULL;
  	struct io_kiocb *link = NULL;
@@@ -2448,45 -5840,63 +2509,75 @@@
  		statep = &state;
  	}
  
 -	ctx->ring_fd = ring_fd;
 -	ctx->ring_file = ring_file;
 -
  	for (i = 0; i < nr; i++) {
++<<<<<<< HEAD
 +		/*
 +		 * If previous wasn't linked and we have a linked command,
 +		 * that's the end of the chain. Submit the previous link.
 +		 */
 +		if (!prev_was_link && link) {
 +			io_queue_link_head(ctx, link, &link->submit, shadow_req,
 +						true);
 +			link = NULL;
 +			shadow_req = NULL;
++=======
+ 		const struct io_uring_sqe *sqe;
+ 		struct io_kiocb *req;
+ 		int err;
+ 
+ 		sqe = io_get_sqe(ctx);
+ 		if (unlikely(!sqe)) {
+ 			io_consume_sqe(ctx);
+ 			break;
+ 		}
+ 		req = io_alloc_req(ctx, statep);
+ 		if (unlikely(!req)) {
+ 			if (!submitted)
+ 				submitted = -EAGAIN;
+ 			break;
+ 		}
+ 
+ 		io_init_req(ctx, req, sqe);
+ 		io_consume_sqe(ctx);
+ 		/* will complete beyond this point, count as submitted */
+ 		submitted++;
+ 
+ 		if (unlikely(req->opcode >= IORING_OP_LAST)) {
+ 			err = -EINVAL;
+ fail_req:
+ 			io_cqring_add_event(req, err);
+ 			io_double_put_req(req);
+ 			break;
++>>>>>>> 0553b8bda870 (io_uring: remove req init from io_get_req())
  		}
 -
 -		if (io_op_defs[req->opcode].needs_mm && !*mm) {
 -			mm_fault = mm_fault || !mmget_not_zero(ctx->sqo_mm);
 -			if (unlikely(mm_fault)) {
 -				err = -EFAULT;
 -				goto fail_req;
 +		prev_was_link = (sqes[i].sqe->flags & IOSQE_IO_LINK) != 0;
 +
 +		if (link && (sqes[i].sqe->flags & IOSQE_IO_DRAIN)) {
 +			if (!shadow_req) {
 +				shadow_req = io_get_req(ctx, NULL);
 +				if (unlikely(!shadow_req))
 +					goto out;
 +				shadow_req->flags |= (REQ_F_IO_DRAIN | REQ_F_SHADOW_DRAIN);
 +				refcount_dec(&shadow_req->refs);
  			}
 -			use_mm(ctx->sqo_mm);
 -			*mm = ctx->sqo_mm;
 +			shadow_req->sequence = sqes[i].sequence;
  		}
  
 -		req->needs_fixed_file = async;
 -		trace_io_uring_submit_sqe(ctx, req->opcode, req->user_data,
 -						true, async);
 -		if (!io_submit_sqe(req, sqe, statep, &link))
 -			break;
 +out:
 +		if (unlikely(mm_fault)) {
 +			io_cqring_add_event(ctx, sqes[i].sqe->user_data,
 +						-EFAULT);
 +		} else {
 +			sqes[i].has_user = has_user;
 +			sqes[i].needs_lock = true;
 +			sqes[i].needs_fixed_file = true;
 +			io_submit_sqe(ctx, &sqes[i], statep, &link, true);
 +			submitted++;
 +		}
  	}
  
 -	if (unlikely(submitted != nr)) {
 -		int ref_used = (submitted == -EAGAIN) ? 0 : submitted;
 -
 -		percpu_ref_put_many(&ctx->refs, nr - ref_used);
 -	}
  	if (link)
 -		io_queue_link_head(link);
 +		io_queue_link_head(ctx, link, &link->submit, shadow_req, true);
  	if (statep)
  		io_submit_state_end(&state);
  
* Unmerged path fs/io_uring.c
