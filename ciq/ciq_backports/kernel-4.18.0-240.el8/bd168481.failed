scsi: zfcp: Move shost updates during xconfig data handling into fenced function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Benjamin Block <bblock@linux.ibm.com>
commit bd1684817d7d8d1a3b95a4347166246ad1f7670b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/bd168481.failed

When executing exchange config data for a FCP device for the first time, or
after an adapter recovery, we update several properties of the scsi host or
fibre channel host object that represent that FCP device.

When moving the scsi host object allocation and registration - and thus
also the fibre channel host object allocation - to after the first exchange
config and exchange port data, this is not possible for the former case.

Move all these update into separate, and fenced function that first checks
whether the scsi host object already exists or not, before making the
updates.

During the first ever exchange config data in the adapter life cycle this
will make the exchange config data handler skip over this update step, but
we can repeat it later, after we allocated the scsi host object.

For any further recovery of that adapter the work flow is only changed
slightly because then the scsi host object already exists and we don't free
it until we release the adapter completely at the end of its life cycle.

Link: https://lore.kernel.org/r/5fc3f4d38d4334f7aa595497c6f7865fb1102e0f.1588956679.git.bblock@linux.ibm.com
	Reviewed-by: Steffen Maier <maier@linux.ibm.com>
	Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit bd1684817d7d8d1a3b95a4347166246ad1f7670b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/scsi/zfcp_fsf.c
diff --cc drivers/s390/scsi/zfcp_fsf.c
index 1ed6f3c18039,54edfcbe84ce..000000000000
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@@ -504,11 -522,6 +495,14 @@@ static int zfcp_fsf_exchange_config_eva
  	adapter->stat_read_buf_num = max(bottom->status_read_buf_num,
  					 (u16)FSF_STATUS_READS_RECOM);
  
++<<<<<<< HEAD
 +	if (fc_host_permanent_port_name(shost) == -1)
 +		fc_host_permanent_port_name(shost) = fc_host_port_name(shost);
 +
 +	zfcp_scsi_set_prot(adapter);
 +
++=======
++>>>>>>> bd1684817d7d (scsi: zfcp: Move shost updates during xconfig data handling into fenced function)
  	/* no error return above here, otherwise must fix call chains */
  	/* do not evaluate invalid fields */
  	if (req->qtcb->header.fsf_status == FSF_EXCHANGE_CONFIG_DATA_INCOMPLETE)
@@@ -527,22 -534,11 +515,17 @@@
  		adapter->peer_d_id = ntoh24(bottom->peer_d_id);
  		adapter->peer_wwpn = be64_to_cpu(plogi->fl_wwpn);
  		adapter->peer_wwnn = be64_to_cpu(plogi->fl_wwnn);
- 		fc_host_port_type(shost) = FC_PORTTYPE_PTP;
- 		fc_host_fabric_name(shost) = 0;
  		break;
  	case FSF_TOPO_FABRIC:
- 		fc_host_fabric_name(shost) = be64_to_cpu(plogi->fl_wwnn);
- 		if (bottom->connection_features & FSF_FEATURE_NPIV_MODE)
- 			fc_host_port_type(shost) = FC_PORTTYPE_NPIV;
- 		else
- 			fc_host_port_type(shost) = FC_PORTTYPE_NPORT;
  		break;
  	case FSF_TOPO_AL:
++<<<<<<< HEAD
 +		fc_host_port_type(shost) = FC_PORTTYPE_NLPORT;
 +		fc_host_fabric_name(shost) = 0;
 +		/* fall through */
++=======
++>>>>>>> bd1684817d7d (scsi: zfcp: Move shost updates during xconfig data handling into fenced function)
  	default:
- 		fc_host_fabric_name(shost) = 0;
  		dev_err(&adapter->ccw_device->dev,
  			"Unknown or unsupported arbitrated loop "
  			"fibre channel topology detected\n");
@@@ -556,9 -552,10 +539,8 @@@
  static void zfcp_fsf_exchange_config_data_handler(struct zfcp_fsf_req *req)
  {
  	struct zfcp_adapter *adapter = req->adapter;
 -	struct zfcp_diag_header *const diag_hdr =
 -		&adapter->diagnostics->config_data.header;
  	struct fsf_qtcb *qtcb = req->qtcb;
  	struct fsf_qtcb_bottom_config *bottom = &qtcb->bottom.config;
- 	struct Scsi_Host *shost = adapter->scsi_host;
  
  	if (req->status & ZFCP_STATUS_FSFREQ_ERROR)
  		return;
@@@ -574,6 -569,13 +554,16 @@@
  
  	switch (qtcb->header.fsf_status) {
  	case FSF_GOOD:
++<<<<<<< HEAD
++=======
+ 		/*
+ 		 * usually we wait with an update till the cache is too old,
+ 		 * but because we have the data available, update it anyway
+ 		 */
+ 		zfcp_diag_update_xdata(diag_hdr, bottom, false);
+ 
+ 		zfcp_scsi_shost_update_config_data(adapter, bottom, false);
++>>>>>>> bd1684817d7d (scsi: zfcp: Move shost updates during xconfig data handling into fenced function)
  		if (zfcp_fsf_exchange_config_evaluate(req))
  			return;
  
diff --git a/drivers/s390/scsi/zfcp_ext.h b/drivers/s390/scsi/zfcp_ext.h
index f75d5680e5ba..678dcf1d2021 100644
--- a/drivers/s390/scsi/zfcp_ext.h
+++ b/drivers/s390/scsi/zfcp_ext.h
@@ -120,6 +120,7 @@ extern int zfcp_fsf_exchange_config_data_sync(struct zfcp_qdio *,
 extern int zfcp_fsf_exchange_port_data(struct zfcp_erp_action *);
 extern int zfcp_fsf_exchange_port_data_sync(struct zfcp_qdio *,
 					    struct fsf_qtcb_bottom_port *);
+extern u32 zfcp_fsf_convert_portspeed(u32 fsf_speed);
 extern void zfcp_fsf_req_dismiss_all(struct zfcp_adapter *);
 extern int zfcp_fsf_status_read(struct zfcp_qdio *);
 extern int zfcp_status_read_refill(struct zfcp_adapter *adapter);
@@ -157,6 +158,10 @@ extern void zfcp_scsi_schedule_rport_block(struct zfcp_port *);
 extern void zfcp_scsi_schedule_rports_block(struct zfcp_adapter *);
 extern void zfcp_scsi_set_prot(struct zfcp_adapter *);
 extern void zfcp_scsi_dif_sense_error(struct scsi_cmnd *, int);
+extern void zfcp_scsi_shost_update_config_data(
+	struct zfcp_adapter *const adapter,
+	const struct fsf_qtcb_bottom_config *const bottom,
+	const bool bottom_incomplete);
 
 /* zfcp_sysfs.c */
 extern const struct attribute_group *zfcp_unit_attr_groups[];
* Unmerged path drivers/s390/scsi/zfcp_fsf.c
diff --git a/drivers/s390/scsi/zfcp_scsi.c b/drivers/s390/scsi/zfcp_scsi.c
index fa5705ae73c1..a46a828b59fc 100644
--- a/drivers/s390/scsi/zfcp_scsi.c
+++ b/drivers/s390/scsi/zfcp_scsi.c
@@ -4,7 +4,7 @@
  *
  * Interface to Linux SCSI midlayer.
  *
- * Copyright IBM Corp. 2002, 2018
+ * Copyright IBM Corp. 2002, 2020
  */
 
 #define KMSG_COMPONENT "zfcp"
@@ -838,6 +838,76 @@ void zfcp_scsi_dif_sense_error(struct scsi_cmnd *scmd, int ascq)
 	set_host_byte(scmd, DID_SOFT_ERROR);
 }
 
+void zfcp_scsi_shost_update_config_data(
+	struct zfcp_adapter *const adapter,
+	const struct fsf_qtcb_bottom_config *const bottom,
+	const bool bottom_incomplete)
+{
+	struct Scsi_Host *const shost = adapter->scsi_host;
+	const struct fc_els_flogi *nsp, *plogi;
+
+	if (shost == NULL)
+		return;
+
+	snprintf(fc_host_firmware_version(shost), FC_VERSION_STRING_SIZE,
+		 "0x%08x", bottom->lic_version);
+
+	if (adapter->adapter_features & FSF_FEATURE_HBAAPI_MANAGEMENT) {
+		snprintf(fc_host_hardware_version(shost),
+			 FC_VERSION_STRING_SIZE,
+			 "0x%08x", bottom->hardware_version);
+		memcpy(fc_host_serial_number(shost), bottom->serial_number,
+		       min(FC_SERIAL_NUMBER_SIZE, 17));
+		EBCASC(fc_host_serial_number(shost),
+		       min(FC_SERIAL_NUMBER_SIZE, 17));
+	}
+
+	/* adjust pointers for missing command code */
+	nsp = (struct fc_els_flogi *) ((u8 *)&bottom->nport_serv_param
+					- sizeof(u32));
+	plogi = (struct fc_els_flogi *) ((u8 *)&bottom->plogi_payload
+					- sizeof(u32));
+
+	snprintf(fc_host_manufacturer(shost), FC_SERIAL_NUMBER_SIZE, "%s",
+		 "IBM");
+	fc_host_port_name(shost) = be64_to_cpu(nsp->fl_wwpn);
+	fc_host_node_name(shost) = be64_to_cpu(nsp->fl_wwnn);
+	fc_host_supported_classes(shost) = FC_COS_CLASS2 | FC_COS_CLASS3;
+
+	zfcp_scsi_set_prot(adapter);
+
+	/* do not evaluate invalid fields */
+	if (bottom_incomplete)
+		return;
+
+	fc_host_port_id(shost) = ntoh24(bottom->s_id);
+	fc_host_speed(shost) =
+		zfcp_fsf_convert_portspeed(bottom->fc_link_speed);
+
+	snprintf(fc_host_model(shost), FC_SYMBOLIC_NAME_SIZE, "0x%04x",
+		 bottom->adapter_type);
+
+	switch (bottom->fc_topology) {
+	case FSF_TOPO_P2P:
+		fc_host_port_type(shost) = FC_PORTTYPE_PTP;
+		fc_host_fabric_name(shost) = 0;
+		break;
+	case FSF_TOPO_FABRIC:
+		fc_host_fabric_name(shost) = be64_to_cpu(plogi->fl_wwnn);
+		if (bottom->connection_features & FSF_FEATURE_NPIV_MODE)
+			fc_host_port_type(shost) = FC_PORTTYPE_NPIV;
+		else
+			fc_host_port_type(shost) = FC_PORTTYPE_NPORT;
+		break;
+	case FSF_TOPO_AL:
+		fc_host_port_type(shost) = FC_PORTTYPE_NLPORT;
+		fallthrough;
+	default:
+		fc_host_fabric_name(shost) = 0;
+		break;
+	}
+}
+
 struct fc_function_template zfcp_transport_functions = {
 	.show_starget_port_id = 1,
 	.show_starget_port_name = 1,
