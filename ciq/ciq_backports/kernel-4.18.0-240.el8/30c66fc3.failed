timer: Prevent base->clk from moving backward

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Frederic Weisbecker <frederic@kernel.org>
commit 30c66fc30ee7a98c4f3adf5fb7e213b61884474f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/30c66fc3.failed

When a timer is enqueued with a negative delta (ie: expiry is below
base->clk), it gets added to the wheel as expiring now (base->clk).

Yet the value that gets stored in base->next_expiry, while calling
trigger_dyntick_cpu(), is the initial timer->expires value. The
resulting state becomes:

	base->next_expiry < base->clk

On the next timer enqueue, forward_timer_base() may accidentally
rewind base->clk. As a possible outcome, timers may expire way too
early, the worst case being that the highest wheel levels get spuriously
processed again.

To prevent from that, make sure that base->next_expiry doesn't get below
base->clk.

Fixes: a683f390b93f ("timers: Forward the wheel clock whenever possible")
	Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Anna-Maria Behnsen <anna-maria@linutronix.de>
	Tested-by: Juri Lelli <juri.lelli@redhat.com>
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/20200703010657.2302-1-frederic@kernel.org
(cherry picked from commit 30c66fc30ee7a98c4f3adf5fb7e213b61884474f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/timer.c
diff --cc kernel/time/timer.c
index 863a08740af0,9a838d38dbe6..000000000000
--- a/kernel/time/timer.c
+++ b/kernel/time/timer.c
@@@ -582,8 -584,16 +582,21 @@@ trigger_dyntick_cpu(struct timer_base *
  	 * Set the next expiry time and kick the CPU so it can reevaluate the
  	 * wheel:
  	 */
++<<<<<<< HEAD
 +	base->next_expiry = timer->expires;
 +		wake_up_nohz_cpu(base->cpu);
++=======
+ 	if (time_before(timer->expires, base->clk)) {
+ 		/*
+ 		 * Prevent from forward_timer_base() moving the base->clk
+ 		 * backward
+ 		 */
+ 		base->next_expiry = base->clk;
+ 	} else {
+ 		base->next_expiry = timer->expires;
+ 	}
+ 	wake_up_nohz_cpu(base->cpu);
++>>>>>>> 30c66fc30ee7 (timer: Prevent base->clk from moving backward)
  }
  
  static void
* Unmerged path kernel/time/timer.c
