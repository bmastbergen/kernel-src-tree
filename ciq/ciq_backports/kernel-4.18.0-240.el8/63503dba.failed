perf evlist: Rename struct perf_evlist to struct evlist

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 63503dba87acfab49280d3b05df6705a6f327e8a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/63503dba.failed

Rename struct perf_evlist to struct evlist, so we don't have a name
clash when we add struct perf_evlist in libperf.

Committer notes:

Added fixes to build on arm64, from Jiri and from me
(tools/perf/util/cs-etm.c)

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-6-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 63503dba87acfab49280d3b05df6705a6f327e8a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/arm/util/cs-etm.c
#	tools/perf/arch/x86/tests/intel-cqm.c
#	tools/perf/arch/x86/tests/perf-time-to-tsc.c
#	tools/perf/builtin-c2c.c
#	tools/perf/builtin-diff.c
#	tools/perf/builtin-inject.c
#	tools/perf/builtin-kvm.c
#	tools/perf/builtin-record.c
#	tools/perf/builtin-script.c
#	tools/perf/builtin-top.c
#	tools/perf/builtin-trace.c
#	tools/perf/tests/backward-ring-buffer.c
#	tools/perf/tests/code-reading.c
#	tools/perf/tests/event-times.c
#	tools/perf/tests/event_update.c
#	tools/perf/tests/evsel-roundtrip-name.c
#	tools/perf/tests/hists_cumulate.c
#	tools/perf/tests/hists_filter.c
#	tools/perf/tests/hists_link.c
#	tools/perf/tests/hists_output.c
#	tools/perf/tests/keep-tracking.c
#	tools/perf/tests/mmap-basic.c
#	tools/perf/tests/openat-syscall-tp-fields.c
#	tools/perf/tests/perf-record.c
#	tools/perf/tests/sw-clock.c
#	tools/perf/tests/switch-tracking.c
#	tools/perf/tests/task-exit.c
#	tools/perf/ui/browsers/hists.c
#	tools/perf/ui/gtk/gtk.h
#	tools/perf/util/bpf-loader.c
#	tools/perf/util/bpf-loader.h
#	tools/perf/util/cgroup.c
#	tools/perf/util/cs-etm.c
#	tools/perf/util/data-convert-bt.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/header.c
#	tools/perf/util/intel-bts.c
#	tools/perf/util/intel-pt.c
#	tools/perf/util/kvm-stat.h
#	tools/perf/util/metricgroup.c
#	tools/perf/util/parse-events.c
#	tools/perf/util/parse-events.h
#	tools/perf/util/record.c
#	tools/perf/util/sort.c
#	tools/perf/util/stat-display.c
#	tools/perf/util/stat-shadow.c
#	tools/perf/util/stat.h
#	tools/perf/util/tool.h
#	tools/perf/util/top.h
diff --cc tools/perf/arch/arm/util/cs-etm.c
index 4208974c24f8,91c64daa4487..000000000000
--- a/tools/perf/arch/arm/util/cs-etm.c
+++ b/tools/perf/arch/arm/util/cs-etm.c
@@@ -434,8 -434,8 +434,13 @@@ static u64 cs_etm_get_config(struct aux
  	struct cs_etm_recording *ptr =
  			container_of(itr, struct cs_etm_recording, itr);
  	struct perf_pmu *cs_etm_pmu = ptr->cs_etm_pmu;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = ptr->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = ptr->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->attr.type == cs_etm_pmu->type) {
diff --cc tools/perf/arch/x86/tests/intel-cqm.c
index 94aa0b673b7f,333b2f0d61e4..000000000000
--- a/tools/perf/arch/x86/tests/intel-cqm.c
+++ b/tools/perf/arch/x86/tests/intel-cqm.c
@@@ -40,8 -40,8 +40,13 @@@ static pid_t spawn(void
   */
  int test__intel_cqm_count_nmi_context(struct test *test __maybe_unused, int subtest __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = NULL;
 +	struct perf_evsel *evsel = NULL;
++=======
+ 	struct evlist *evlist = NULL;
+ 	struct evsel *evsel = NULL;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_event_attr pe;
  	int i, fd[2], flag, ret;
  	size_t mmap_len;
diff --cc tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86,d7092fc00e3b..000000000000
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@@ -49,10 -49,10 +49,17 @@@ int test__perf_time_to_tsc(struct test 
  		},
  		.sample_time	     = true,
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
 +	struct perf_evlist *evlist = NULL;
 +	struct perf_evsel *evsel = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
+ 	struct evlist *evlist = NULL;
+ 	struct evsel *evsel = NULL;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err = -1, ret, i;
  	const char *comm1, *comm2;
  	struct perf_tsc_conversion tc;
diff --cc tools/perf/builtin-c2c.c
index 5744c6803d23,f0aae6e13a33..000000000000
--- a/tools/perf/builtin-c2c.c
+++ b/tools/perf/builtin-c2c.c
@@@ -2237,8 -2236,8 +2237,13 @@@ static void print_pareto(FILE *out
  
  static void print_c2c_info(FILE *out, struct perf_session *session)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	bool first = true;
  
  	fprintf(out, "=================================================\n");
diff --cc tools/perf/builtin-diff.c
index 72eaed5b3ca5,e91c0d798181..000000000000
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@@ -449,10 -448,10 +449,15 @@@ static struct perf_diff pdiff = 
  	},
  };
  
++<<<<<<< HEAD
 +static struct perf_evsel *evsel_match(struct perf_evsel *evsel,
 +				      struct perf_evlist *evlist)
++=======
+ static struct evsel *evsel_match(struct evsel *evsel,
+ 				      struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *e;
 +	struct perf_evsel *e;
  
  	evlist__for_each_entry(evlist, e) {
  		if (perf_evsel__match2(evsel, e))
@@@ -462,9 -461,9 +467,9 @@@
  	return NULL;
  }
  
- static void perf_evlist__collapse_resort(struct perf_evlist *evlist)
+ static void perf_evlist__collapse_resort(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		struct hists *hists = evsel__hists(evsel);
@@@ -1010,8 -1009,8 +1015,13 @@@ static void data__fprintf(void
  
  static void data_process(void)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist_base = data__files[0].session->evlist;
 +	struct perf_evsel *evsel_base;
++=======
+ 	struct evlist *evlist_base = data__files[0].session->evlist;
+ 	struct evsel *evsel_base;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	bool first = true;
  
  	evlist__for_each_entry(evlist_base, evsel_base) {
@@@ -1020,8 -1019,8 +1030,13 @@@
  		int i;
  
  		data__for_each_file_new(i, d) {
++<<<<<<< HEAD
 +			struct perf_evlist *evlist = d->session->evlist;
 +			struct perf_evsel *evsel;
++=======
+ 			struct evlist *evlist = d->session->evlist;
+ 			struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  			struct hists *hists;
  
  			evsel = evsel_match(evsel_base, evlist);
diff --cc tools/perf/builtin-inject.c
index b82ad14f3fd0,d2131fc863be..000000000000
--- a/tools/perf/builtin-inject.c
+++ b/tools/perf/builtin-inject.c
@@@ -568,8 -567,8 +568,13 @@@ static int drop_sample(struct perf_too
  
  static void strip_init(struct perf_inject *inject)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = inject->session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = inject->session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	inject->tool.context_switch = perf_event__drop;
  
@@@ -591,10 -590,10 +596,15 @@@ static bool has_tracking(struct perf_ev
   * their selected event to exist, except if there is only 1 selected event left
   * and it has a compatible sample type.
   */
++<<<<<<< HEAD
 +static bool ok_to_remove(struct perf_evlist *evlist,
 +			 struct perf_evsel *evsel_to_remove)
++=======
+ static bool ok_to_remove(struct evlist *evlist,
+ 			 struct evsel *evsel_to_remove)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int cnt = 0;
  	bool ok = false;
  
@@@ -615,8 -614,8 +625,13 @@@
  
  static void strip_fini(struct perf_inject *inject)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = inject->session->evlist;
 +	struct perf_evsel *evsel, *tmp;
++=======
+ 	struct evlist *evlist = inject->session->evlist;
+ 	struct evsel *evsel, *tmp;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	/* Remove non-synthesized evsels if possible */
  	evlist__for_each_entry_safe(evlist, tmp, evsel) {
diff --cc tools/perf/builtin-kvm.c
index 02e719faa488,963dddc5853d..000000000000
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@@ -1012,8 -1011,8 +1012,13 @@@ out
  static int kvm_live_open_events(struct perf_kvm_stat *kvm)
  {
  	int err, rc = -1;
++<<<<<<< HEAD
 +	struct perf_evsel *pos;
 +	struct perf_evlist *evlist = kvm->evlist;
++=======
+ 	struct evsel *pos;
+ 	struct evlist *evlist = kvm->evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	char sbuf[STRERR_BUFSIZE];
  
  	perf_evlist__config(evlist, &kvm->opts, NULL);
diff --cc tools/perf/builtin-record.c
index 6dccaf4058f3,f08d1e6a1651..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -714,8 -713,8 +714,13 @@@ static int record__mmap(struct record *
  static int record__open(struct record *rec)
  {
  	char msg[BUFSIZ];
++<<<<<<< HEAD
 +	struct perf_evsel *pos;
 +	struct perf_evlist *evlist = rec->evlist;
++=======
+ 	struct evsel *pos;
+ 	struct evlist *evlist = rec->evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_session *session = rec->session;
  	struct record_opts *opts = &rec->opts;
  	int rc = 0;
diff --cc tools/perf/builtin-script.c
index 381a10d3337c,d741c0aa2750..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -1637,9 -1636,9 +1637,9 @@@ struct perf_script 
  	int			range_num;
  };
  
- static int perf_evlist__max_name_len(struct perf_evlist *evlist)
+ static int perf_evlist__max_name_len(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int max = 0;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -2019,13 -2018,13 +2019,18 @@@ out_put
  }
  
  static int process_attr(struct perf_tool *tool, union perf_event *event,
- 			struct perf_evlist **pevlist)
+ 			struct evlist **pevlist)
  {
  	struct perf_script *scr = container_of(tool, struct perf_script, tool);
++<<<<<<< HEAD
 +	struct perf_evlist *evlist;
 +	struct perf_evsel *evsel, *pos;
++=======
+ 	struct evlist *evlist;
+ 	struct evsel *evsel, *pos;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err;
 -	static struct evsel_script *es;
 +	static struct perf_evsel_script *es;
  
  	err = perf_event__process_attr(tool, event, pevlist);
  	if (err)
@@@ -2389,8 -2388,8 +2394,13 @@@ static void sig_handler(int sig __maybe
  
  static void perf_script__fclose_per_event_dump(struct perf_script *script)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = script->session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = script->session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (!evsel->priv)
diff --cc tools/perf/builtin-top.c
index 6d6fb101231d,c29fa1de854f..000000000000
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@@ -911,10 -909,10 +911,10 @@@ static void perf_top__mmap_read(struct 
  static int perf_top__overwrite_check(struct perf_top *top)
  {
  	struct record_opts *opts = &top->record_opts;
- 	struct perf_evlist *evlist = top->evlist;
+ 	struct evlist *evlist = top->evlist;
  	struct perf_evsel_config_term *term;
  	struct list_head *config_terms;
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int set, overwrite = -1;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -954,11 -952,11 +954,16 @@@
  }
  
  static int perf_top_overwrite_fallback(struct perf_top *top,
 -				       struct evsel *evsel)
 +				       struct perf_evsel *evsel)
  {
  	struct record_opts *opts = &top->record_opts;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = top->evlist;
 +	struct perf_evsel *counter;
++=======
+ 	struct evlist *evlist = top->evlist;
+ 	struct evsel *counter;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	if (!opts->overwrite)
  		return 0;
@@@ -977,8 -975,8 +982,13 @@@
  static int perf_top__start_counters(struct perf_top *top)
  {
  	char msg[BUFSIZ];
++<<<<<<< HEAD
 +	struct perf_evsel *counter;
 +	struct perf_evlist *evlist = top->evlist;
++=======
+ 	struct evsel *counter;
+ 	struct evlist *evlist = top->evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct record_opts *opts = &top->record_opts;
  
  	if (perf_top__overwrite_check(top)) {
diff --cc tools/perf/builtin-trace.c
index 9f9c869e0f26,f7e7daac3cbe..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2616,10 -2616,10 +2616,10 @@@ static int trace__record(struct trace *
  
  static size_t trace__fprintf_thread_summary(struct trace *trace, FILE *fp);
  
- static bool perf_evlist__add_vfs_getname(struct perf_evlist *evlist)
+ static bool perf_evlist__add_vfs_getname(struct evlist *evlist)
  {
  	bool found = false;
 -	struct evsel *evsel, *tmp;
 +	struct perf_evsel *evsel, *tmp;
  	struct parse_events_error err = { .idx = 0, };
  	int ret = parse_events(evlist, "probe:vfs_getname*", &err);
  
@@@ -2699,8 -2699,8 +2699,13 @@@ static void trace__handle_event(struct 
  static int trace__add_syscall_newtp(struct trace *trace)
  {
  	int ret = -1;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = trace->evlist;
 +	struct perf_evsel *sys_enter, *sys_exit;
++=======
+ 	struct evlist *evlist = trace->evlist;
+ 	struct evsel *sys_enter, *sys_exit;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	sys_enter = perf_evsel__raw_syscall_newtp("sys_enter", trace__sys_enter);
  	if (sys_enter == NULL)
@@@ -3250,8 -3250,8 +3255,13 @@@ static int ordered_events__deliver_even
  
  static int trace__run(struct trace *trace, int argc, const char **argv)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = trace->evlist;
 +	struct perf_evsel *evsel, *pgfault_maj = NULL, *pgfault_min = NULL;
++=======
+ 	struct evlist *evlist = trace->evlist;
+ 	struct evsel *evsel, *pgfault_maj = NULL, *pgfault_min = NULL;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err = -1, i;
  	unsigned long before;
  	const bool forks = argc > 0;
@@@ -3843,17 -3843,17 +3853,17 @@@ static int parse_pagefaults(const struc
  	return 0;
  }
  
- static void evlist__set_evsel_handler(struct perf_evlist *evlist, void *handler)
+ static void evlist__set_evsel_handler(struct evlist *evlist, void *handler)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		evsel->handler = handler;
  }
  
- static int evlist__set_syscall_tp_fields(struct perf_evlist *evlist)
+ static int evlist__set_syscall_tp_fields(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->priv || !evsel->tp_format)
diff --cc tools/perf/tests/backward-ring-buffer.c
index 1a9c3becf5ff,3f9c931069b0..000000000000
--- a/tools/perf/tests/backward-ring-buffer.c
+++ b/tools/perf/tests/backward-ring-buffer.c
@@@ -82,8 -82,8 +82,13 @@@ int test__backward_ring_buffer(struct t
  {
  	int ret = TEST_SKIP, err, sample_count = 0, comm_count = 0;
  	char pid[16], sbuf[STRERR_BUFSIZE];
++<<<<<<< HEAD
 +	struct perf_evlist *evlist;
 +	struct perf_evsel *evsel __maybe_unused;
++=======
+ 	struct evlist *evlist;
+ 	struct evsel *evsel __maybe_unused;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct parse_events_error parse_error;
  	struct record_opts opts = {
  		.target = {
diff --cc tools/perf/tests/code-reading.c
index aa6df122b175,168deb9c563e..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -552,10 -552,10 +552,17 @@@ static int do_test_code_reading(bool tr
  	struct state state = {
  		.done_cnt = 0,
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
 +	struct perf_evlist *evlist = NULL;
 +	struct perf_evsel *evsel = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
+ 	struct evlist *evlist = NULL;
+ 	struct evsel *evsel = NULL;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err = -1, ret;
  	pid_t pid;
  	struct map *map;
diff --cc tools/perf/tests/event-times.c
index 1a2686f1fcf0,c3545a6efcbc..000000000000
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@@ -12,9 -12,9 +12,9 @@@
  #include "thread_map.h"
  #include "target.h"
  
- static int attach__enable_on_exec(struct perf_evlist *evlist)
+ static int attach__enable_on_exec(struct evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
  	struct target target = {
  		.uid = UINT_MAX,
  	};
@@@ -54,10 -54,10 +54,10 @@@ static int detach__enable_on_exec(struc
  	return 0;
  }
  
- static int attach__current_disabled(struct perf_evlist *evlist)
+ static int attach__current_disabled(struct evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 -	struct perf_thread_map *threads;
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct thread_map *threads;
  	int err;
  
  	pr_debug("attaching to current thread as disabled\n");
@@@ -80,10 -80,10 +80,10 @@@
  	return perf_evsel__enable(evsel) == 0 ? TEST_OK : TEST_FAIL;
  }
  
- static int attach__current_enabled(struct perf_evlist *evlist)
+ static int attach__current_enabled(struct evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 -	struct perf_thread_map *threads;
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct thread_map *threads;
  	int err;
  
  	pr_debug("attaching to current thread as enabled\n");
@@@ -100,17 -100,17 +100,17 @@@
  	return err == 0 ? TEST_OK : TEST_FAIL;
  }
  
- static int detach__disable(struct perf_evlist *evlist)
+ static int detach__disable(struct evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
  
  	return perf_evsel__enable(evsel);
  }
  
- static int attach__cpu_disabled(struct perf_evlist *evlist)
+ static int attach__cpu_disabled(struct evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 -	struct perf_cpu_map *cpus;
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct cpu_map *cpus;
  	int err;
  
  	pr_debug("attaching to CPU 0 as enabled\n");
@@@ -136,10 -136,10 +136,10 @@@
  	return perf_evsel__enable(evsel);
  }
  
- static int attach__cpu_enabled(struct perf_evlist *evlist)
+ static int attach__cpu_enabled(struct evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 -	struct perf_cpu_map *cpus;
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct cpu_map *cpus;
  	int err;
  
  	pr_debug("attaching to CPU 0 as enabled\n");
@@@ -158,12 -158,12 +158,17 @@@
  	return err ? TEST_FAIL : TEST_OK;
  }
  
- static int test_times(int (attach)(struct perf_evlist *),
- 		      int (detach)(struct perf_evlist *))
+ static int test_times(int (attach)(struct evlist *),
+ 		      int (detach)(struct evlist *))
  {
  	struct perf_counts_values count;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = NULL;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = NULL;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err = -1, i;
  
  	evlist = perf_evlist__new();
diff --cc tools/perf/tests/event_update.c
index f14dcd613438,eb0dd359762d..000000000000
--- a/tools/perf/tests/event_update.c
+++ b/tools/perf/tests/event_update.c
@@@ -79,8 -79,8 +79,13 @@@ static int process_event_cpus(struct pe
  
  int test__event_update(struct test *test __maybe_unused, int subtest __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct event_name tmp;
  
  	evlist = perf_evlist__new_default();
diff --cc tools/perf/tests/evsel-roundtrip-name.c
index a104728ebf25,6cc408b23026..000000000000
--- a/tools/perf/tests/evsel-roundtrip-name.c
+++ b/tools/perf/tests/evsel-roundtrip-name.c
@@@ -11,8 -11,8 +11,13 @@@ static int perf_evsel__roundtrip_cache_
  {
  	char name[128];
  	int type, op, err = 0, ret = 0, i, idx;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = perf_evlist__new();
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
          if (evlist == NULL)
                  return -ENOMEM;
@@@ -67,8 -67,8 +72,13 @@@
  static int __perf_evsel__name_array_test(const char *names[], int nr_names)
  {
  	int i, err;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = perf_evlist__new();
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
          if (evlist == NULL)
                  return -ENOMEM;
diff --cc tools/perf/tests/hists_cumulate.c
index 7a2eed6c783e,d7a6b97683d6..000000000000
--- a/tools/perf/tests/hists_cumulate.c
+++ b/tools/perf/tests/hists_cumulate.c
@@@ -694,8 -694,8 +694,13 @@@ int test__hists_cumulate(struct test *t
  	int err = TEST_FAIL;
  	struct machines machines;
  	struct machine *machine;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = perf_evlist__new();
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	size_t i;
  	test_fn_t testcases[] = {
  		test1,
diff --cc tools/perf/tests/hists_filter.c
index 975844807fe2,9f0d6af839e9..000000000000
--- a/tools/perf/tests/hists_filter.c
+++ b/tools/perf/tests/hists_filter.c
@@@ -47,10 -47,10 +47,10 @@@ static struct sample fake_samples[] = 
  	{ .pid = FAKE_PID_BASH,  .ip = FAKE_IP_KERNEL_PAGE_FAULT, .socket = 3 },
  };
  
- static int add_hist_entries(struct perf_evlist *evlist,
+ static int add_hist_entries(struct evlist *evlist,
  			    struct machine *machine)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	struct addr_location al;
  	struct perf_sample sample = { .period = 100, };
  	size_t i;
@@@ -108,8 -108,8 +108,13 @@@ int test__hists_filter(struct test *tes
  	int err = TEST_FAIL;
  	struct machines machines;
  	struct machine *machine;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = perf_evlist__new();
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	TEST_ASSERT_VAL("No memory", evlist);
  
diff --cc tools/perf/tests/hists_link.c
index af633db63f4d,6ab27dd3bf3f..000000000000
--- a/tools/perf/tests/hists_link.c
+++ b/tools/perf/tests/hists_link.c
@@@ -62,9 -62,9 +62,9 @@@ static struct sample fake_samples[][5] 
  	},
  };
  
- static int add_hist_entries(struct perf_evlist *evlist, struct machine *machine)
+ static int add_hist_entries(struct evlist *evlist, struct machine *machine)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	struct addr_location al;
  	struct hist_entry *he;
  	struct perf_sample sample = { .period = 1, .weight = 1, };
@@@ -271,8 -271,8 +271,13 @@@ int test__hists_link(struct test *test 
  	struct hists *hists, *first_hists;
  	struct machines machines;
  	struct machine *machine = NULL;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *first;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel, *first;
+ 	struct evlist *evlist = perf_evlist__new();
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	if (evlist == NULL)
                  return -ENOMEM;
diff --cc tools/perf/tests/hists_output.c
index 0a510c524a5d,cd36e51cdf3b..000000000000
--- a/tools/perf/tests/hists_output.c
+++ b/tools/perf/tests/hists_output.c
@@@ -580,8 -580,8 +580,13 @@@ int test__hists_output(struct test *tes
  	int err = TEST_FAIL;
  	struct machines machines;
  	struct machine *machine;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = perf_evlist__new();
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	size_t i;
  	test_fn_t testcases[] = {
  		test1,
diff --cc tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e,e0779f2a340c..000000000000
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@@ -65,10 -65,10 +65,17 @@@ int test__keep_tracking(struct test *te
  			.uses_mmap   = true,
  		},
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
 +	struct perf_evlist *evlist = NULL;
 +	struct perf_evsel *evsel = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
+ 	struct evlist *evlist = NULL;
+ 	struct evsel *evsel = NULL;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int found, err = -1;
  	const char *comm;
  
diff --cc tools/perf/tests/mmap-basic.c
index 0919b0793e5b,749b580e9a92..000000000000
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@@ -27,9 -27,9 +27,15 @@@ int test__basic_mmap(struct test *test 
  {
  	int err = -1;
  	union perf_event *event;
++<<<<<<< HEAD
 +	struct thread_map *threads;
 +	struct cpu_map *cpus;
 +	struct perf_evlist *evlist;
++=======
+ 	struct perf_thread_map *threads;
+ 	struct perf_cpu_map *cpus;
+ 	struct evlist *evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	cpu_set_t cpu_set;
  	const char *syscall_names[] = { "getsid", "getppid", "getpgid", };
  	pid_t (*syscalls[])(void) = { (void *)getsid, getppid, (void*)getpgid };
diff --cc tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469,69bf0ec2fe5f..000000000000
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@@ -32,8 -32,8 +32,13 @@@ int test__syscall_openat_tp_fields(stru
  	};
  	const char *filename = "/etc/passwd";
  	int flags = O_RDONLY | O_DIRECTORY;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = perf_evlist__new();
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = perf_evlist__new();
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err = -1, i, nr_events = 0, nr_polls = 0;
  	char sbuf[STRERR_BUFSIZE];
  
diff --cc tools/perf/tests/perf-record.c
index 07f6bd8ed719,99b2d26881f9..000000000000
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@@ -50,8 -50,8 +50,13 @@@ int test__PERF_RECORD(struct test *tes
  	};
  	cpu_set_t cpu_mask;
  	size_t cpu_mask_size = sizeof(cpu_mask);
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = perf_evlist__new_dummy();
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = perf_evlist__new_dummy();
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_sample sample;
  	const char *cmd = "sleep";
  	const char *argv[] = { cmd, "1", NULL, };
diff --cc tools/perf/tests/sw-clock.c
index f9490b237893,69b997eeb639..000000000000
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@@ -27,8 -27,8 +27,13 @@@ static int __test__sw_clock_freq(enum p
  	int nr_samples = 0;
  	char sbuf[STRERR_BUFSIZE];
  	union perf_event *event;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist;
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_event_attr attr = {
  		.type = PERF_TYPE_SOFTWARE,
  		.config = clock_id,
diff --cc tools/perf/tests/switch-tracking.c
index 6cdab5f4812a,3e26ea36ec29..000000000000
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@@ -327,11 -327,11 +327,19 @@@ int test__switch_tracking(struct test *
  			.uses_mmap   = true,
  		},
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
 +	struct perf_evlist *evlist = NULL;
 +	struct perf_evsel *evsel, *cpu_clocks_evsel, *cycles_evsel;
 +	struct perf_evsel *switch_evsel, *tracking_evsel;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
+ 	struct evlist *evlist = NULL;
+ 	struct evsel *evsel, *cpu_clocks_evsel, *cycles_evsel;
+ 	struct evsel *switch_evsel, *tracking_evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	const char *comm;
  	int err = -1;
  
diff --cc tools/perf/tests/task-exit.c
index e92fa6029ac7,5c2cdb0ccb96..000000000000
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@@ -37,8 -37,8 +37,13 @@@ int test__task_exit(struct test *test _
  {
  	int err = -1;
  	union perf_event *event;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist;
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct target target = {
  		.uid		= UINT_MAX,
  		.uses_mmap	= true,
diff --cc tools/perf/ui/browsers/hists.c
index a94eb0755e8b,b83258bece05..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -3262,8 -3262,8 +3262,13 @@@ static int perf_evsel_menu__run(struct 
  				struct hist_browser_timer *hbt,
  				bool warn_lost_event)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = menu->b.priv;
 +	struct perf_evsel *pos;
++=======
+ 	struct evlist *evlist = menu->b.priv;
+ 	struct evsel *pos;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	const char *title = "Available samples";
  	int delay_secs = hbt ? hbt->refresh : 0;
  	int key;
diff --cc tools/perf/ui/gtk/gtk.h
index 9846ea5c831b,a9563932fa04..000000000000
--- a/tools/perf/ui/gtk/gtk.h
+++ b/tools/perf/ui/gtk/gtk.h
@@@ -52,8 -52,8 +52,13 @@@ static inline GtkWidget *perf_gtk__setu
  }
  #endif
  
++<<<<<<< HEAD
 +struct perf_evsel;
 +struct perf_evlist;
++=======
+ struct evsel;
+ struct evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  struct hist_entry;
  struct hist_browser_timer;
  
diff --cc tools/perf/util/bpf-loader.c
index 6d0dfb777a79,b0696726ab76..000000000000
--- a/tools/perf/util/bpf-loader.c
+++ b/tools/perf/util/bpf-loader.c
@@@ -1061,9 -1061,9 +1061,9 @@@ bpf_map__config_value(struct bpf_map *m
  static int
  __bpf_map__config_event(struct bpf_map *map,
  			struct parse_events_term *term,
- 			struct perf_evlist *evlist)
+ 			struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	const struct bpf_map_def *def;
  	struct bpf_map_op *op;
  	const char *map_name = bpf_map__name(map);
@@@ -1523,7 -1523,7 +1523,11 @@@ int bpf__apply_obj_config(void
  			(strcmp(name, 			\
  				bpf_map__name(pos)) == 0))
  
++<<<<<<< HEAD
 +struct perf_evsel *bpf__setup_output_event(struct perf_evlist *evlist, const char *name)
++=======
+ struct evsel *bpf__setup_output_event(struct evlist *evlist, const char *name)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	struct bpf_map_priv *tmpl_priv = NULL;
  	struct bpf_object *obj, *tmp;
@@@ -1600,9 -1600,9 +1604,9 @@@
  	return evsel;
  }
  
- int bpf__setup_stdout(struct perf_evlist *evlist)
+ int bpf__setup_stdout(struct evlist *evlist)
  {
 -	struct evsel *evsel = bpf__setup_output_event(evlist, "__bpf_stdout__");
 +	struct perf_evsel *evsel = bpf__setup_output_event(evlist, "__bpf_stdout__");
  	return PTR_ERR_OR_ZERO(evsel);
  }
  
diff --cc tools/perf/util/bpf-loader.h
index 8c3441a4b72c,25251d63164c..000000000000
--- a/tools/perf/util/bpf-loader.h
+++ b/tools/perf/util/bpf-loader.h
@@@ -39,8 -39,8 +39,13 @@@ enum bpf_loader_errno 
  	__BPF_LOADER_ERRNO__END,
  };
  
++<<<<<<< HEAD
 +struct perf_evsel;
 +struct perf_evlist;
++=======
+ struct evsel;
+ struct evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  struct bpf_object;
  struct parse_events_term;
  #define PERF_BPF_PROBE_GROUP "perf_bpf_probe"
@@@ -79,9 -79,9 +84,15 @@@ int bpf__strerror_config_obj(struct bpf
  int bpf__apply_obj_config(void);
  int bpf__strerror_apply_obj_config(int err, char *buf, size_t size);
  
++<<<<<<< HEAD
 +int bpf__setup_stdout(struct perf_evlist *evlist);
 +struct perf_evsel *bpf__setup_output_event(struct perf_evlist *evlist, const char *name);
 +int bpf__strerror_setup_output_event(struct perf_evlist *evlist, int err, char *buf, size_t size);
++=======
+ int bpf__setup_stdout(struct evlist *evlist);
+ struct evsel *bpf__setup_output_event(struct evlist *evlist, const char *name);
+ int bpf__strerror_setup_output_event(struct evlist *evlist, int err, char *buf, size_t size);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  #else
  #include <errno.h>
  #include <string.h>
@@@ -137,8 -137,8 +148,13 @@@ bpf__setup_stdout(struct evlist *evlis
  	return 0;
  }
  
++<<<<<<< HEAD
 +static inline struct perf_evsel *
 +bpf__setup_output_event(struct perf_evlist *evlist __maybe_unused, const char *name __maybe_unused)
++=======
+ static inline struct evsel *
+ bpf__setup_output_event(struct evlist *evlist __maybe_unused, const char *name __maybe_unused)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	return NULL;
  }
diff --cc tools/perf/util/cgroup.c
index 484c29830a81,deb87ecd3671..000000000000
--- a/tools/perf/util/cgroup.c
+++ b/tools/perf/util/cgroup.c
@@@ -90,9 -90,9 +90,9 @@@ static int open_cgroup(const char *name
  	return fd;
  }
  
- static struct cgroup *evlist__find_cgroup(struct perf_evlist *evlist, const char *str)
+ static struct cgroup *evlist__find_cgroup(struct evlist *evlist, const char *str)
  {
 -	struct evsel *counter;
 +	struct perf_evsel *counter;
  	/*
  	 * check if cgrp is already defined, if so we reuse it
  	 */
@@@ -137,9 -137,9 +137,9 @@@ struct cgroup *evlist__findnew_cgroup(s
  	return cgroup ?: cgroup__new(name);
  }
  
- static int add_cgroup(struct perf_evlist *evlist, const char *str)
+ static int add_cgroup(struct evlist *evlist, const char *str)
  {
 -	struct evsel *counter;
 +	struct perf_evsel *counter;
  	struct cgroup *cgrp = evlist__findnew_cgroup(evlist, str);
  	int n;
  
@@@ -190,9 -190,9 +190,9 @@@ static void evsel__set_default_cgroup(s
  		evsel->cgrp = cgroup__get(cgroup);
  }
  
- void evlist__set_default_cgroup(struct perf_evlist *evlist, struct cgroup *cgroup)
+ void evlist__set_default_cgroup(struct evlist *evlist, struct cgroup *cgroup)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		evsel__set_default_cgroup(evsel, cgroup);
@@@ -201,8 -201,8 +201,13 @@@
  int parse_cgroups(const struct option *opt, const char *str,
  		  int unset __maybe_unused)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = *(struct perf_evlist **)opt->value;
 +	struct perf_evsel *counter;
++=======
+ 	struct evlist *evlist = *(struct evlist **)opt->value;
+ 	struct evsel *counter;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct cgroup *cgrp = NULL;
  	const char *p, *e, *eos = str + strlen(str);
  	char *s;
diff --cc tools/perf/util/cs-etm.c
index 3e8fd34d54e1,c1df366f4519..000000000000
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@@ -1223,8 -1222,8 +1223,13 @@@ static int cs_etm__synth_event(struct p
  static int cs_etm__synth_events(struct cs_etm_auxtrace *etm,
  				struct perf_session *session)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_event_attr attr;
  	bool found = false;
  	u64 id;
@@@ -2295,8 -2294,8 +2300,13 @@@ static int cs_etm__process_auxtrace_eve
  
  static bool cs_etm__is_timeless_decoding(struct cs_etm_auxtrace *etm)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = etm->session->evlist;
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = etm->session->evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	bool timeless_decoding = true;
  
  	/*
diff --cc tools/perf/util/data-convert-bt.c
index 59cd62936a46,083101ae7b77..000000000000
--- a/tools/perf/util/data-convert-bt.c
+++ b/tools/perf/util/data-convert-bt.c
@@@ -1203,8 -1201,8 +1203,13 @@@ err
  
  static int setup_events(struct ctf_writer *cw, struct perf_session *session)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int ret;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -1310,8 -1308,8 +1315,13 @@@ static int setup_non_sample_events(stru
  
  static void cleanup_events(struct perf_session *session)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	evlist__for_each_entry(evlist, evsel) {
  		struct evsel_priv *priv;
diff --cc tools/perf/util/evlist.c
index 4739b7914374,c234fa4ba92a..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -42,8 -41,8 +42,13 @@@ int sigqueue(pid_t pid, int sig, const 
  #define FD(e, x, y) (*(int *)xyarray__entry(e->fd, x, y))
  #define SID(e, x, y) xyarray__entry(e->sample_id, x, y)
  
++<<<<<<< HEAD
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads)
++=======
+ void perf_evlist__init(struct evlist *evlist, struct perf_cpu_map *cpus,
+ 		       struct perf_thread_map *threads)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	int i;
  
@@@ -97,17 -96,17 +102,17 @@@ struct evlist *perf_evlist__new_dummy(v
   * Events with compatible sample types all have the same id_pos
   * and is_pos.  For convenience, put a copy on evlist.
   */
- void perf_evlist__set_id_pos(struct perf_evlist *evlist)
+ void perf_evlist__set_id_pos(struct evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist);
 +	struct perf_evsel *first = perf_evlist__first(evlist);
  
  	evlist->id_pos = first->id_pos;
  	evlist->is_pos = first->is_pos;
  }
  
- static void perf_evlist__update_id_pos(struct perf_evlist *evlist)
+ static void perf_evlist__update_id_pos(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		perf_evsel__calc_id_pos(evsel);
@@@ -115,9 -114,9 +120,9 @@@
  	perf_evlist__set_id_pos(evlist);
  }
  
- static void perf_evlist__purge(struct perf_evlist *evlist)
+ static void perf_evlist__purge(struct evlist *evlist)
  {
 -	struct evsel *pos, *n;
 +	struct perf_evsel *pos, *n;
  
  	evlist__for_each_entry_safe(evlist, n, pos) {
  		list_del_init(&pos->node);
@@@ -151,8 -150,8 +156,13 @@@ void perf_evlist__delete(struct evlist 
  	free(evlist);
  }
  
++<<<<<<< HEAD
 +static void __perf_evlist__propagate_maps(struct perf_evlist *evlist,
 +					  struct perf_evsel *evsel)
++=======
+ static void __perf_evlist__propagate_maps(struct evlist *evlist,
+ 					  struct evsel *evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	/*
  	 * We already have cpus for evsel (via PMU sysfs) so
@@@ -170,15 -169,15 +180,19 @@@
  	evsel->threads = thread_map__get(evlist->threads);
  }
  
- static void perf_evlist__propagate_maps(struct perf_evlist *evlist)
+ static void perf_evlist__propagate_maps(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evlist__propagate_maps(evlist, evsel);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry)
++=======
+ void perf_evlist__add(struct evlist *evlist, struct evsel *entry)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	entry->evlist = evlist;
  	list_add_tail(&entry->node, &evlist->entries);
@@@ -191,17 -190,17 +205,21 @@@
  	__perf_evlist__propagate_maps(evlist, entry);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__remove(struct perf_evlist *evlist, struct perf_evsel *evsel)
++=======
+ void perf_evlist__remove(struct evlist *evlist, struct evsel *evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	evsel->evlist = NULL;
  	list_del_init(&evsel->node);
  	evlist->nr_entries -= 1;
  }
  
- void perf_evlist__splice_list_tail(struct perf_evlist *evlist,
+ void perf_evlist__splice_list_tail(struct evlist *evlist,
  				   struct list_head *list)
  {
 -	struct evsel *evsel, *temp;
 +	struct perf_evsel *evsel, *temp;
  
  	__evlist__for_each_entry_safe(list, temp, evsel) {
  		list_del_init(&evsel->node);
@@@ -231,9 -230,9 +249,9 @@@ void perf_evlist__set_leader(struct evl
  	}
  }
  
- int __perf_evlist__add_default(struct perf_evlist *evlist, bool precise)
+ int __perf_evlist__add_default(struct evlist *evlist, bool precise)
  {
 -	struct evsel *evsel = perf_evsel__new_cycles(precise);
 +	struct perf_evsel *evsel = perf_evsel__new_cycles(precise);
  
  	if (evsel == NULL)
  		return -ENOMEM;
@@@ -258,10 -257,10 +276,10 @@@ int perf_evlist__add_dummy(struct evlis
  	return 0;
  }
  
- static int perf_evlist__add_attrs(struct perf_evlist *evlist,
+ static int perf_evlist__add_attrs(struct evlist *evlist,
  				  struct perf_event_attr *attrs, size_t nr_attrs)
  {
 -	struct evsel *evsel, *n;
 +	struct perf_evsel *evsel, *n;
  	LIST_HEAD(head);
  	size_t i;
  
@@@ -293,10 -292,10 +311,15 @@@ int __perf_evlist__add_default_attrs(st
  	return perf_evlist__add_attrs(evlist, attrs, nr_attrs);
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id)
++=======
+ struct evsel *
+ perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->attr.type   == PERF_TYPE_TRACEPOINT &&
@@@ -307,11 -306,11 +330,16 @@@
  	return NULL;
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
++=======
+ struct evsel *
+ perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  				     const char *name)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if ((evsel->attr.type == PERF_TYPE_TRACEPOINT) &&
@@@ -322,10 -321,10 +350,10 @@@
  	return NULL;
  }
  
- int perf_evlist__add_newtp(struct perf_evlist *evlist,
+ int perf_evlist__add_newtp(struct evlist *evlist,
  			   const char *sys, const char *name, void *handler)
  {
 -	struct evsel *evsel = perf_evsel__newtp(sys, name);
 +	struct perf_evsel *evsel = perf_evsel__newtp(sys, name);
  
  	if (IS_ERR(evsel))
  		return -1;
@@@ -335,8 -334,8 +363,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int perf_evlist__nr_threads(struct perf_evlist *evlist,
 +				   struct perf_evsel *evsel)
++=======
+ static int perf_evlist__nr_threads(struct evlist *evlist,
+ 				   struct evsel *evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	if (evsel->system_wide)
  		return 1;
@@@ -344,9 -343,9 +377,9 @@@
  		return thread_map__nr(evlist->threads);
  }
  
- void perf_evlist__disable(struct perf_evlist *evlist)
+ void perf_evlist__disable(struct evlist *evlist)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
  		if (pos->disabled || !perf_evsel__is_group_leader(pos) || !pos->fd)
@@@ -357,9 -356,9 +390,9 @@@
  	evlist->enabled = false;
  }
  
- void perf_evlist__enable(struct perf_evlist *evlist)
+ void perf_evlist__enable(struct evlist *evlist)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
  		if (!perf_evsel__is_group_leader(pos) || !pos->fd)
@@@ -375,8 -374,8 +408,13 @@@ void perf_evlist__toggle_enable(struct 
  	(evlist->enabled ? perf_evlist__disable : perf_evlist__enable)(evlist);
  }
  
++<<<<<<< HEAD
 +static int perf_evlist__enable_event_cpu(struct perf_evlist *evlist,
 +					 struct perf_evsel *evsel, int cpu)
++=======
+ static int perf_evlist__enable_event_cpu(struct evlist *evlist,
+ 					 struct evsel *evsel, int cpu)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	int thread;
  	int nr_threads = perf_evlist__nr_threads(evlist, evsel);
@@@ -392,8 -391,8 +430,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int perf_evlist__enable_event_thread(struct perf_evlist *evlist,
 +					    struct perf_evsel *evsel,
++=======
+ static int perf_evlist__enable_event_thread(struct evlist *evlist,
+ 					    struct evsel *evsel,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  					    int thread)
  {
  	int cpu;
@@@ -410,8 -409,8 +453,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int perf_evlist__enable_event_idx(struct perf_evlist *evlist,
 +				  struct perf_evsel *evsel, int idx)
++=======
+ int perf_evlist__enable_event_idx(struct evlist *evlist,
+ 				  struct evsel *evsel, int idx)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	bool per_cpu_mmaps = !cpu_map__empty(evlist->cpus);
  
@@@ -484,8 -483,8 +532,13 @@@ int perf_evlist__poll(struct evlist *ev
  	return fdarray__poll(&evlist->pollfd, timeout);
  }
  
++<<<<<<< HEAD
 +static void perf_evlist__id_hash(struct perf_evlist *evlist,
 +				 struct perf_evsel *evsel,
++=======
+ static void perf_evlist__id_hash(struct evlist *evlist,
+ 				 struct evsel *evsel,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  				 int cpu, int thread, u64 id)
  {
  	int hash;
@@@ -497,15 -496,15 +550,24 @@@
  	hlist_add_head(&sid->node, &evlist->heads[hash]);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
++=======
+ void perf_evlist__id_add(struct evlist *evlist, struct evsel *evsel,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  			 int cpu, int thread, u64 id)
  {
  	perf_evlist__id_hash(evlist, evsel, cpu, thread, id);
  	evsel->id[evsel->ids++] = id;
  }
  
++<<<<<<< HEAD
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
++=======
+ int perf_evlist__id_add_fd(struct evlist *evlist,
+ 			   struct evsel *evsel,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  			   int cpu, int thread, int fd)
  {
  	u64 read_data[4] = { 0, };
@@@ -545,8 -544,8 +607,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void perf_evlist__set_sid_idx(struct perf_evlist *evlist,
 +				     struct perf_evsel *evsel, int idx, int cpu,
++=======
+ static void perf_evlist__set_sid_idx(struct evlist *evlist,
+ 				     struct evsel *evsel, int idx, int cpu,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  				     int thread)
  {
  	struct perf_sample_id *sid = SID(evsel, cpu, thread);
@@@ -577,7 -576,7 +644,11 @@@ struct perf_sample_id *perf_evlist__id2
  	return NULL;
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id)
++=======
+ struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	struct perf_sample_id *sid;
  
@@@ -594,7 -593,7 +665,11 @@@
  	return NULL;
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
++=======
+ struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  						u64 id)
  {
  	struct perf_sample_id *sid;
@@@ -630,10 -629,10 +705,14 @@@ static int perf_evlist__event2id(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *perf_evlist__event2evsel(struct perf_evlist *evlist,
++=======
+ struct evsel *perf_evlist__event2evsel(struct evlist *evlist,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  					    union perf_event *event)
  {
 -	struct evsel *first = perf_evlist__first(evlist);
 +	struct perf_evsel *first = perf_evlist__first(evlist);
  	struct hlist_head *head;
  	struct perf_sample_id *sid;
  	int hash;
@@@ -744,8 -743,8 +823,13 @@@ static struct perf_mmap *perf_evlist__a
  }
  
  static bool
++<<<<<<< HEAD
 +perf_evlist__should_poll(struct perf_evlist *evlist __maybe_unused,
 +			 struct perf_evsel *evsel)
++=======
+ perf_evlist__should_poll(struct evlist *evlist __maybe_unused,
+ 			 struct evsel *evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	if (evsel->attr.write_backward)
  		return false;
@@@ -1056,11 -1055,11 +1140,11 @@@ int perf_evlist__mmap(struct evlist *ev
  	return perf_evlist__mmap_ex(evlist, pages, 0, false, 0, PERF_AFFINITY_SYS, 1, 0);
  }
  
- int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target)
+ int perf_evlist__create_maps(struct evlist *evlist, struct target *target)
  {
  	bool all_threads = (target->per_thread && target->system_wide);
 -	struct perf_cpu_map *cpus;
 -	struct perf_thread_map *threads;
 +	struct cpu_map *cpus;
 +	struct thread_map *threads;
  
  	/*
  	 * If specify '-a' and '--per-thread' to perf record, perf record
@@@ -1105,8 -1104,8 +1189,13 @@@ out_delete_threads
  	return -1;
  }
  
++<<<<<<< HEAD
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads)
++=======
+ void perf_evlist__set_maps(struct evlist *evlist, struct perf_cpu_map *cpus,
+ 			   struct perf_thread_map *threads)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	/*
  	 * Allow for the possibility that one or another of the maps isn't being
@@@ -1128,27 -1127,27 +1217,31 @@@
  	perf_evlist__propagate_maps(evlist);
  }
  
- void __perf_evlist__set_sample_bit(struct perf_evlist *evlist,
+ void __perf_evlist__set_sample_bit(struct evlist *evlist,
  				   enum perf_event_sample_format bit)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evsel__set_sample_bit(evsel, bit);
  }
  
- void __perf_evlist__reset_sample_bit(struct perf_evlist *evlist,
+ void __perf_evlist__reset_sample_bit(struct evlist *evlist,
  				     enum perf_event_sample_format bit)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evsel__reset_sample_bit(evsel, bit);
  }
  
++<<<<<<< HEAD
 +int perf_evlist__apply_filters(struct perf_evlist *evlist, struct perf_evsel **err_evsel)
++=======
+ int perf_evlist__apply_filters(struct evlist *evlist, struct evsel **err_evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int err = 0;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -1169,9 -1168,9 +1262,9 @@@
  	return err;
  }
  
- int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter)
+ int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int err = 0;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -1218,9 -1217,9 +1311,9 @@@ int perf_evlist__set_tp_filter_pid(stru
  	return perf_evlist__set_tp_filter_pids(evlist, 1, &pid);
  }
  
- bool perf_evlist__valid_sample_type(struct perf_evlist *evlist)
+ bool perf_evlist__valid_sample_type(struct evlist *evlist)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	if (evlist->nr_entries == 1)
  		return true;
@@@ -1237,9 -1236,9 +1330,9 @@@
  	return true;
  }
  
- u64 __perf_evlist__combined_sample_type(struct perf_evlist *evlist)
+ u64 __perf_evlist__combined_sample_type(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	if (evlist->combined_sample_type)
  		return evlist->combined_sample_type;
@@@ -1256,9 -1255,9 +1349,9 @@@ u64 perf_evlist__combined_sample_type(s
  	return __perf_evlist__combined_sample_type(evlist);
  }
  
- u64 perf_evlist__combined_branch_type(struct perf_evlist *evlist)
+ u64 perf_evlist__combined_branch_type(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	u64 branch_type = 0;
  
  	evlist__for_each_entry(evlist, evsel)
@@@ -1266,9 -1265,9 +1359,9 @@@
  	return branch_type;
  }
  
- bool perf_evlist__valid_read_format(struct perf_evlist *evlist)
+ bool perf_evlist__valid_read_format(struct evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist), *pos = first;
 +	struct perf_evsel *first = perf_evlist__first(evlist), *pos = first;
  	u64 read_format = first->attr.read_format;
  	u64 sample_type = first->attr.sample_type;
  
@@@ -1286,15 -1285,15 +1379,15 @@@
  	return true;
  }
  
- u64 perf_evlist__read_format(struct perf_evlist *evlist)
+ u64 perf_evlist__read_format(struct evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist);
 +	struct perf_evsel *first = perf_evlist__first(evlist);
  	return first->attr.read_format;
  }
  
- u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist)
+ u16 perf_evlist__id_hdr_size(struct evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist);
 +	struct perf_evsel *first = perf_evlist__first(evlist);
  	struct perf_sample *data;
  	u64 sample_type;
  	u16 size = 0;
@@@ -1325,9 -1324,9 +1418,9 @@@ out
  	return size;
  }
  
- bool perf_evlist__valid_sample_id_all(struct perf_evlist *evlist)
+ bool perf_evlist__valid_sample_id_all(struct evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist), *pos = first;
 +	struct perf_evsel *first = perf_evlist__first(evlist), *pos = first;
  
  	evlist__for_each_entry_continue(evlist, pos) {
  		if (first->attr.sample_id_all != pos->attr.sample_id_all)
@@@ -1337,30 -1336,30 +1430,35 @@@
  	return true;
  }
  
- bool perf_evlist__sample_id_all(struct perf_evlist *evlist)
+ bool perf_evlist__sample_id_all(struct evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist);
 +	struct perf_evsel *first = perf_evlist__first(evlist);
  	return first->attr.sample_id_all;
  }
  
++<<<<<<< HEAD
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel)
++=======
+ void perf_evlist__set_selected(struct evlist *evlist,
+ 			       struct evsel *evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	evlist->selected = evsel;
  }
  
- void perf_evlist__close(struct perf_evlist *evlist)
+ void perf_evlist__close(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry_reverse(evlist, evsel)
  		perf_evsel__close(evsel);
  }
  
- static int perf_evlist__create_syswide_maps(struct perf_evlist *evlist)
+ static int perf_evlist__create_syswide_maps(struct evlist *evlist)
  {
 -	struct perf_cpu_map *cpus;
 -	struct perf_thread_map *threads;
 +	struct cpu_map	  *cpus;
 +	struct thread_map *threads;
  	int err = -ENOMEM;
  
  	/*
@@@ -1388,9 -1387,9 +1486,9 @@@ out_put
  	goto out;
  }
  
- int perf_evlist__open(struct perf_evlist *evlist)
+ int perf_evlist__open(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int err;
  
  	/*
@@@ -1551,10 -1550,10 +1649,10 @@@ int perf_evlist__start_workload(struct 
  	return 0;
  }
  
- int perf_evlist__parse_sample(struct perf_evlist *evlist, union perf_event *event,
+ int perf_evlist__parse_sample(struct evlist *evlist, union perf_event *event,
  			      struct perf_sample *sample)
  {
 -	struct evsel *evsel = perf_evlist__event2evsel(evlist, event);
 +	struct perf_evsel *evsel = perf_evlist__event2evsel(evlist, event);
  
  	if (!evsel)
  		return -EFAULT;
@@@ -1572,9 -1571,9 +1670,9 @@@ int perf_evlist__parse_sample_timestamp
  	return perf_evsel__parse_sample_timestamp(evsel, event, timestamp);
  }
  
- size_t perf_evlist__fprintf(struct perf_evlist *evlist, FILE *fp)
+ size_t perf_evlist__fprintf(struct evlist *evlist, FILE *fp)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	size_t printed = 0;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -1670,10 -1669,10 +1768,15 @@@ int perf_evlist__strerror_mmap(struct e
  	return 0;
  }
  
++<<<<<<< HEAD
 +void perf_evlist__to_front(struct perf_evlist *evlist,
 +			   struct perf_evsel *move_evsel)
++=======
+ void perf_evlist__to_front(struct evlist *evlist,
+ 			   struct evsel *move_evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel, *n;
 +	struct perf_evsel *evsel, *n;
  	LIST_HEAD(move);
  
  	if (move_evsel == perf_evlist__first(evlist))
@@@ -1687,10 -1686,10 +1790,15 @@@
  	list_splice(&move, &evlist->entries);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__set_tracking_event(struct perf_evlist *evlist,
 +				     struct perf_evsel *tracking_evsel)
++=======
+ void perf_evlist__set_tracking_event(struct evlist *evlist,
+ 				     struct evsel *tracking_evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	if (tracking_evsel->tracking)
  		return;
@@@ -1703,11 -1702,11 +1811,16 @@@
  	tracking_evsel->tracking = true;
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *
 +perf_evlist__find_evsel_by_str(struct perf_evlist *evlist,
++=======
+ struct evsel *
+ perf_evlist__find_evsel_by_str(struct evlist *evlist,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  			       const char *str)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (!evsel->name)
@@@ -1777,9 -1776,9 +1890,9 @@@ state_err
  	return;
  }
  
- bool perf_evlist__exclude_kernel(struct perf_evlist *evlist)
+ bool perf_evlist__exclude_kernel(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (!evsel->attr.exclude_kernel)
@@@ -1794,20 -1793,20 +1907,25 @@@
   * the group display. Set the artificial group and set the leader's
   * forced_leader flag to notify the display code.
   */
- void perf_evlist__force_leader(struct perf_evlist *evlist)
+ void perf_evlist__force_leader(struct evlist *evlist)
  {
  	if (!evlist->nr_groups) {
 -		struct evsel *leader = perf_evlist__first(evlist);
 +		struct perf_evsel *leader = perf_evlist__first(evlist);
  
  		perf_evlist__set_leader(evlist);
  		leader->forced_leader = true;
  	}
  }
  
++<<<<<<< HEAD
 +struct perf_evsel *perf_evlist__reset_weak_group(struct perf_evlist *evsel_list,
 +						 struct perf_evsel *evsel)
++=======
+ struct evsel *perf_evlist__reset_weak_group(struct evlist *evsel_list,
+ 						 struct evsel *evsel)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *c2, *leader;
 +	struct perf_evsel *c2, *leader;
  	bool is_open = true;
  
  	leader = evsel->leader;
@@@ -1907,10 -1906,10 +2025,10 @@@ static void *perf_evlist__poll_thread(v
  	return NULL;
  }
  
- int perf_evlist__start_sb_thread(struct perf_evlist *evlist,
+ int perf_evlist__start_sb_thread(struct evlist *evlist,
  				 struct target *target)
  {
 -	struct evsel *counter;
 +	struct perf_evsel *counter;
  
  	if (!evlist)
  		return 0;
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,54f1c3e2b721..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -44,12 -44,12 +44,12 @@@ struct evlist 
  	struct fdarray	 pollfd;
  	struct perf_mmap *mmap;
  	struct perf_mmap *overwrite_mmap;
 -	struct perf_thread_map *threads;
 -	struct perf_cpu_map *cpus;
 -	struct evsel *selected;
 +	struct thread_map *threads;
 +	struct cpu_map	  *cpus;
 +	struct perf_evsel *selected;
  	struct events_stats stats;
  	struct perf_env	*env;
- 	void (*trace_event_sample_raw)(struct perf_evlist *evlist,
+ 	void (*trace_event_sample_raw)(struct evlist *evlist,
  				       union perf_event *event,
  				       struct perf_sample *sample);
  	u64		first_sample_time;
@@@ -65,20 -65,20 +65,33 @@@ struct perf_evsel_str_handler 
  	void	   *handler;
  };
  
++<<<<<<< HEAD
 +struct perf_evlist *perf_evlist__new(void);
 +struct perf_evlist *perf_evlist__new_default(void);
 +struct perf_evlist *perf_evlist__new_dummy(void);
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads);
 +void perf_evlist__exit(struct perf_evlist *evlist);
 +void perf_evlist__delete(struct perf_evlist *evlist);
 +
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry);
 +void perf_evlist__remove(struct perf_evlist *evlist, struct perf_evsel *evsel);
- 
- int __perf_evlist__add_default(struct perf_evlist *evlist, bool precise);
- 
- static inline int perf_evlist__add_default(struct perf_evlist *evlist)
++=======
+ struct evlist *perf_evlist__new(void);
+ struct evlist *perf_evlist__new_default(void);
+ struct evlist *perf_evlist__new_dummy(void);
+ void perf_evlist__init(struct evlist *evlist, struct perf_cpu_map *cpus,
+ 		       struct perf_thread_map *threads);
+ void perf_evlist__exit(struct evlist *evlist);
+ void perf_evlist__delete(struct evlist *evlist);
+ 
+ void perf_evlist__add(struct evlist *evlist, struct evsel *entry);
+ void perf_evlist__remove(struct evlist *evlist, struct evsel *evsel);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
+ 
+ int __perf_evlist__add_default(struct evlist *evlist, bool precise);
+ 
+ static inline int perf_evlist__add_default(struct evlist *evlist)
  {
  	return __perf_evlist__add_default(evlist, true);
  }
@@@ -113,41 -113,41 +126,60 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
- int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
- int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
- int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
+ int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
+ int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
+ int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
  
++<<<<<<< HEAD
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
 +
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
 +				     const char *name);
 +
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
++=======
+ struct evsel *
+ perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
+ 
+ struct evsel *
+ perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
+ 				     const char *name);
+ 
+ void perf_evlist__id_add(struct evlist *evlist, struct evsel *evsel,
+ 			 int cpu, int thread, u64 id);
+ int perf_evlist__id_add_fd(struct evlist *evlist,
+ 			   struct evsel *evsel,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  			   int cpu, int thread, int fd);
  
- int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
- int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
- int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
+ int perf_evlist__add_pollfd(struct evlist *evlist, int fd);
+ int perf_evlist__alloc_pollfd(struct evlist *evlist);
+ int perf_evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
  
- int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
+ int perf_evlist__poll(struct evlist *evlist, int timeout);
  
++<<<<<<< HEAD
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
++=======
+ struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
+ struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  						u64 id);
  
- struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
+ struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
  
- void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
+ void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
  
- void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
+ void perf_evlist__mmap_consume(struct evlist *evlist, int idx);
  
- int perf_evlist__open(struct perf_evlist *evlist);
- void perf_evlist__close(struct perf_evlist *evlist);
+ int perf_evlist__open(struct evlist *evlist);
+ void perf_evlist__close(struct evlist *evlist);
  
  struct callchain_param;
  
@@@ -184,35 -184,35 +216,48 @@@ void perf_evlist__munmap(struct evlist 
  
  size_t perf_evlist__mmap_size(unsigned long pages);
  
- void perf_evlist__disable(struct perf_evlist *evlist);
- void perf_evlist__enable(struct perf_evlist *evlist);
- void perf_evlist__toggle_enable(struct perf_evlist *evlist);
+ void perf_evlist__disable(struct evlist *evlist);
+ void perf_evlist__enable(struct evlist *evlist);
+ void perf_evlist__toggle_enable(struct evlist *evlist);
  
++<<<<<<< HEAD
 +int perf_evlist__enable_event_idx(struct perf_evlist *evlist,
 +				  struct perf_evsel *evsel, int idx);
 +
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel);
 +
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads);
 +int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target);
 +int perf_evlist__apply_filters(struct perf_evlist *evlist, struct perf_evsel **err_evsel);
++=======
+ int perf_evlist__enable_event_idx(struct evlist *evlist,
+ 				  struct evsel *evsel, int idx);
+ 
+ void perf_evlist__set_selected(struct evlist *evlist,
+ 			       struct evsel *evsel);
+ 
+ void perf_evlist__set_maps(struct evlist *evlist, struct perf_cpu_map *cpus,
+ 			   struct perf_thread_map *threads);
+ int perf_evlist__create_maps(struct evlist *evlist, struct target *target);
+ int perf_evlist__apply_filters(struct evlist *evlist, struct evsel **err_evsel);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  void __perf_evlist__set_leader(struct list_head *list);
- void perf_evlist__set_leader(struct perf_evlist *evlist);
+ void perf_evlist__set_leader(struct evlist *evlist);
  
- u64 perf_evlist__read_format(struct perf_evlist *evlist);
- u64 __perf_evlist__combined_sample_type(struct perf_evlist *evlist);
- u64 perf_evlist__combined_sample_type(struct perf_evlist *evlist);
- u64 perf_evlist__combined_branch_type(struct perf_evlist *evlist);
- bool perf_evlist__sample_id_all(struct perf_evlist *evlist);
- u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist);
+ u64 perf_evlist__read_format(struct evlist *evlist);
+ u64 __perf_evlist__combined_sample_type(struct evlist *evlist);
+ u64 perf_evlist__combined_sample_type(struct evlist *evlist);
+ u64 perf_evlist__combined_branch_type(struct evlist *evlist);
+ bool perf_evlist__sample_id_all(struct evlist *evlist);
+ u16 perf_evlist__id_hdr_size(struct evlist *evlist);
  
- int perf_evlist__parse_sample(struct perf_evlist *evlist, union perf_event *event,
+ int perf_evlist__parse_sample(struct evlist *evlist, union perf_event *event,
  			      struct perf_sample *sample);
  
- int perf_evlist__parse_sample_timestamp(struct perf_evlist *evlist,
+ int perf_evlist__parse_sample_timestamp(struct evlist *evlist,
  					union perf_event *event,
  					u64 *timestamp);
  
@@@ -228,24 -228,24 +273,38 @@@ static inline bool perf_evlist__empty(s
  	return list_empty(&evlist->entries);
  }
  
++<<<<<<< HEAD
 +static inline struct perf_evsel *perf_evlist__first(struct perf_evlist *evlist)
++=======
+ static inline struct evsel *perf_evlist__first(struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	return list_entry(evlist->entries.next, struct evsel, node);
 +	return list_entry(evlist->entries.next, struct perf_evsel, node);
  }
  
++<<<<<<< HEAD
 +static inline struct perf_evsel *perf_evlist__last(struct perf_evlist *evlist)
++=======
+ static inline struct evsel *perf_evlist__last(struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	return list_entry(evlist->entries.prev, struct evsel, node);
 +	return list_entry(evlist->entries.prev, struct perf_evsel, node);
  }
  
- size_t perf_evlist__fprintf(struct perf_evlist *evlist, FILE *fp);
+ size_t perf_evlist__fprintf(struct evlist *evlist, FILE *fp);
  
- int perf_evlist__strerror_open(struct perf_evlist *evlist, int err, char *buf, size_t size);
- int perf_evlist__strerror_mmap(struct perf_evlist *evlist, int err, char *buf, size_t size);
+ int perf_evlist__strerror_open(struct evlist *evlist, int err, char *buf, size_t size);
+ int perf_evlist__strerror_mmap(struct evlist *evlist, int err, char *buf, size_t size);
  
++<<<<<<< HEAD
 +bool perf_evlist__can_select_event(struct perf_evlist *evlist, const char *str);
 +void perf_evlist__to_front(struct perf_evlist *evlist,
 +			   struct perf_evsel *move_evsel);
++=======
+ bool perf_evlist__can_select_event(struct evlist *evlist, const char *str);
+ void perf_evlist__to_front(struct evlist *evlist,
+ 			   struct evsel *move_evsel);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  /**
   * __evlist__for_each_entry - iterate thru all the evsels
@@@ -313,19 -313,19 +372,34 @@@
  #define evlist__for_each_entry_safe(evlist, tmp, evsel) \
  	__evlist__for_each_entry_safe(&(evlist)->entries, tmp, evsel)
  
++<<<<<<< HEAD
 +void perf_evlist__set_tracking_event(struct perf_evlist *evlist,
 +				     struct perf_evsel *tracking_evsel);
 +
 +struct perf_evsel *
 +perf_evlist__find_evsel_by_str(struct perf_evlist *evlist, const char *str);
 +
 +struct perf_evsel *perf_evlist__event2evsel(struct perf_evlist *evlist,
++=======
+ void perf_evlist__set_tracking_event(struct evlist *evlist,
+ 				     struct evsel *tracking_evsel);
+ 
+ struct evsel *
+ perf_evlist__find_evsel_by_str(struct evlist *evlist, const char *str);
+ 
+ struct evsel *perf_evlist__event2evsel(struct evlist *evlist,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  					    union perf_event *event);
  
- bool perf_evlist__exclude_kernel(struct perf_evlist *evlist);
+ bool perf_evlist__exclude_kernel(struct evlist *evlist);
  
- void perf_evlist__force_leader(struct perf_evlist *evlist);
+ void perf_evlist__force_leader(struct evlist *evlist);
  
++<<<<<<< HEAD
 +struct perf_evsel *perf_evlist__reset_weak_group(struct perf_evlist *evlist,
 +						 struct perf_evsel *evsel);
++=======
+ struct evsel *perf_evlist__reset_weak_group(struct evlist *evlist,
+ 						 struct evsel *evsel);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  #endif /* __PERF_EVLIST_H */
diff --cc tools/perf/util/evsel.c
index e99257f738ba,f7f97ca6e96d..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -3045,7 -3044,7 +3045,11 @@@ struct perf_env *perf_evsel__env(struc
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static int store_evsel_ids(struct perf_evsel *evsel, struct perf_evlist *evlist)
++=======
+ static int store_evsel_ids(struct evsel *evsel, struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
  	int cpu, thread;
  
@@@ -3063,10 -3062,10 +3067,14 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int perf_evsel__store_ids(struct perf_evsel *evsel, struct perf_evlist *evlist)
++=======
+ int perf_evsel__store_ids(struct evsel *evsel, struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct perf_cpu_map *cpus = evsel->cpus;
 -	struct perf_thread_map *threads = evsel->threads;
 +	struct cpu_map *cpus = evsel->cpus;
 +	struct thread_map *threads = evsel->threads;
  
  	if (perf_evsel__alloc_id(evsel, cpus->nr, threads->nr))
  		return -ENOMEM;
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,3caabd8a4aa6..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -100,9 -100,9 +100,9 @@@ struct bpf_object
   *          is used there is an id sample appended to non-sample events
   * @priv:   And what is in its containing unnamed union are tool specific
   */
 -struct evsel {
 +struct perf_evsel {
  	struct list_head	node;
- 	struct perf_evlist	*evlist;
+ 	struct evlist	*evlist;
  	struct perf_event_attr	attr;
  	char			*filter;
  	struct xyarray		*fd;
@@@ -504,7 -504,7 +504,11 @@@ typedef int (*attr__fprintf_f)(FILE *, 
  int perf_event_attr__fprintf(FILE *fp, struct perf_event_attr *attr,
  			     attr__fprintf_f attr__fprintf, void *priv);
  
 -struct perf_env *perf_evsel__env(struct evsel *evsel);
 +struct perf_env *perf_evsel__env(struct perf_evsel *evsel);
  
++<<<<<<< HEAD
 +int perf_evsel__store_ids(struct perf_evsel *evsel, struct perf_evlist *evlist);
++=======
+ int perf_evsel__store_ids(struct evsel *evsel, struct evlist *evlist);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  #endif /* __PERF_EVSEL_H */
diff --cc tools/perf/util/header.c
index c3fbdc63c78a,692fe8ac12ae..000000000000
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@@ -470,9 -470,9 +470,9 @@@ static int write_nrcpus(struct feat_fd 
  }
  
  static int write_event_desc(struct feat_fd *ff,
- 			    struct perf_evlist *evlist)
+ 			    struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	u32 nre, nri, sz;
  	int ret;
  
@@@ -759,10 -759,10 +759,10 @@@ static int write_pmu_mappings(struct fe
   * };
   */
  static int write_group_desc(struct feat_fd *ff,
- 			    struct perf_evlist *evlist)
+ 			    struct evlist *evlist)
  {
  	u32 nr_groups = evlist->nr_groups;
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int ret;
  
  	ret = do_write(ff, &nr_groups, sizeof(nr_groups));
@@@ -1113,11 -1120,12 +1113,11 @@@ static int build_caches(struct cpu_cach
  	return 0;
  }
  
 -#define MAX_CACHES (MAX_NR_CPUS * 4)
 -
  static int write_cache(struct feat_fd *ff,
- 		       struct perf_evlist *evlist __maybe_unused)
+ 		       struct evlist *evlist __maybe_unused)
  {
 -	struct cpu_cache_level caches[MAX_CACHES];
 +	u32 max_caches = cpu__max_cpu() * MAX_CACHE_LVL;
 +	struct cpu_cache_level caches[max_caches];
  	u32 cnt = 0, i, version = 1;
  	int ret;
  
@@@ -2081,10 -2089,10 +2081,15 @@@ static int process_total_mem(struct fea
  	return 0;
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *
 +perf_evlist__find_by_index(struct perf_evlist *evlist, int idx)
++=======
+ static struct evsel *
+ perf_evlist__find_by_index(struct evlist *evlist, int idx)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->idx == idx)
@@@ -2095,10 -2103,10 +2100,15 @@@
  }
  
  static void
++<<<<<<< HEAD
 +perf_evlist__set_event_name(struct perf_evlist *evlist,
 +			    struct perf_evsel *event)
++=======
+ perf_evlist__set_event_name(struct evlist *evlist,
+ 			    struct evsel *event)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	if (!event->name)
  		return;
@@@ -3503,10 -3511,10 +3513,10 @@@ static int perf_evsel__prepare_tracepoi
  	return 0;
  }
  
- static int perf_evlist__prepare_tracepoint_events(struct perf_evlist *evlist,
+ static int perf_evlist__prepare_tracepoint_events(struct evlist *evlist,
  						  struct tep_handle *pevent)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
  		if (pos->attr.type == PERF_TYPE_TRACEPOINT &&
@@@ -3913,10 -3921,10 +3923,10 @@@ size_t perf_event__fprintf_event_update
  }
  
  int perf_event__synthesize_attrs(struct perf_tool *tool,
- 				 struct perf_evlist *evlist,
+ 				 struct evlist *evlist,
  				 perf_event__handler_t process)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	int err = 0;
  
  	evlist__for_each_entry(evlist, evsel) {
@@@ -4001,11 -4009,11 +4011,16 @@@ int perf_event__synthesize_extra_attr(s
  
  int perf_event__process_attr(struct perf_tool *tool __maybe_unused,
  			     union perf_event *event,
- 			     struct perf_evlist **pevlist)
+ 			     struct evlist **pevlist)
  {
  	u32 i, ids, n_ids;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = *pevlist;
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = *pevlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	if (evlist == NULL) {
  		*pevlist = evlist = perf_evlist__new();
@@@ -4044,9 -4052,9 +4059,15 @@@ int perf_event__process_event_update(st
  	struct event_update_event *ev = &event->event_update;
  	struct event_update_event_scale *ev_scale;
  	struct event_update_event_cpus *ev_cpus;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist;
 +	struct perf_evsel *evsel;
 +	struct cpu_map *map;
++=======
+ 	struct evlist *evlist;
+ 	struct evsel *evsel;
+ 	struct perf_cpu_map *map;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	if (!pevlist || *pevlist == NULL)
  		return -EINVAL;
diff --cc tools/perf/util/intel-bts.c
index 278498772e84,849a5b713b04..000000000000
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@@ -769,8 -760,8 +769,13 @@@ static int intel_bts_synth_event(struc
  static int intel_bts_synth_events(struct intel_bts *bts,
  				  struct perf_session *session)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_event_attr attr;
  	bool found = false;
  	u64 id;
diff --cc tools/perf/util/intel-pt.c
index c05fafa87b14,c88e3d1ee9c7..000000000000
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@@ -2722,10 -2713,10 +2722,10 @@@ static int intel_pt_synth_event(struct 
  	return err;
  }
  
- static void intel_pt_set_event_name(struct perf_evlist *evlist, u64 id,
+ static void intel_pt_set_event_name(struct evlist *evlist, u64 id,
  				    const char *name)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->id && evsel->id[0] == id) {
@@@ -2737,10 -2728,10 +2737,15 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *intel_pt_evsel(struct intel_pt *pt,
 +					 struct perf_evlist *evlist)
++=======
+ static struct evsel *intel_pt_evsel(struct intel_pt *pt,
+ 					 struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->attr.type == pt->pmu_type && evsel->ids)
@@@ -2753,8 -2744,8 +2758,13 @@@
  static int intel_pt_synth_events(struct intel_pt *pt,
  				 struct perf_session *session)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = session->evlist;
 +	struct perf_evsel *evsel = intel_pt_evsel(pt, evlist);
++=======
+ 	struct evlist *evlist = session->evlist;
+ 	struct evsel *evsel = intel_pt_evsel(pt, evlist);
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	struct perf_event_attr attr;
  	u64 id;
  	int err;
@@@ -2903,9 -2894,9 +2913,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *intel_pt_find_sched_switch(struct perf_evlist *evlist)
++=======
+ static struct evsel *intel_pt_find_sched_switch(struct evlist *evlist)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry_reverse(evlist, evsel) {
  		const char *name = perf_evsel__name(evsel);
@@@ -2917,9 -2908,9 +2931,9 @@@
  	return NULL;
  }
  
- static bool intel_pt_find_switch(struct perf_evlist *evlist)
+ static bool intel_pt_find_switch(struct evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
  		if (evsel->attr.context_switch)
diff --cc tools/perf/util/kvm-stat.h
index 1403dec189b4,a09c495f866b..000000000000
--- a/tools/perf/util/kvm-stat.h
+++ b/tools/perf/util/kvm-stat.h
@@@ -6,8 -6,8 +6,13 @@@
  #include "tool.h"
  #include "stat.h"
  
++<<<<<<< HEAD
 +struct perf_evsel;
 +struct perf_evlist;
++=======
+ struct evsel;
+ struct evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  struct perf_session;
  
  struct event_key {
diff --cc tools/perf/util/metricgroup.c
index 1e5d44aa7392,fdb0d1c5c5cf..000000000000
--- a/tools/perf/util/metricgroup.c
+++ b/tools/perf/util/metricgroup.c
@@@ -110,12 -101,12 +110,19 @@@ static bool record_evsel(int *ind, stru
  	return false;
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *find_evsel_group(struct perf_evlist *perf_evlist,
 +					   const char **ids,
 +					   int idnum,
 +					   struct perf_evsel **metric_events)
++=======
+ static struct evsel *find_evsel_group(struct evlist *perf_evlist,
+ 				      const char **ids,
+ 				      int idnum,
+ 				      struct evsel **metric_events)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *ev, *start = NULL;
 +	struct perf_evsel *ev, *start = NULL;
  	int ind = 0;
  
  	evlist__for_each_entry (perf_evlist, ev) {
diff --cc tools/perf/util/parse-events.c
index 0540303e5e97,d341b11fb141..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -2026,8 -2026,8 +2026,13 @@@ int parse_events_option(const struct op
  }
  
  static int
++<<<<<<< HEAD
 +foreach_evsel_in_last_glob(struct perf_evlist *evlist,
 +			   int (*func)(struct perf_evsel *evsel,
++=======
+ foreach_evsel_in_last_glob(struct evlist *evlist,
+ 			   int (*func)(struct evsel *evsel,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  				       const void *arg),
  			   const void *arg)
  {
diff --cc tools/perf/util/parse-events.h
index f7139e1a2fd3,48111b8fc232..000000000000
--- a/tools/perf/util/parse-events.h
+++ b/tools/perf/util/parse-events.h
@@@ -12,8 -12,8 +12,13 @@@
  #include <string.h>
  
  struct list_head;
++<<<<<<< HEAD
 +struct perf_evsel;
 +struct perf_evlist;
++=======
+ struct evsel;
+ struct evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  struct parse_events_error;
  
  struct option;
diff --cc tools/perf/util/record.c
index 9cfc7bf16531,a550d78a0b4d..000000000000
--- a/tools/perf/util/record.c
+++ b/tools/perf/util/record.c
@@@ -13,8 -13,8 +13,13 @@@ typedef void (*setup_probe_fn_t)(struc
  
  static int perf_do_probe_api(setup_probe_fn_t fn, int cpu, const char *str)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	unsigned long flags = perf_event_open_cloexec_flag();
  	int err = -EAGAIN, fd;
  	static pid_t pid = -1;
@@@ -132,10 -132,10 +137,10 @@@ bool perf_can_record_cpu_wide(void
  	return true;
  }
  
- void perf_evlist__config(struct perf_evlist *evlist, struct record_opts *opts,
+ void perf_evlist__config(struct evlist *evlist, struct record_opts *opts,
  			 struct callchain_param *callchain)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  	bool use_sample_identifier = false;
  	bool use_comm_exec;
  	bool sample_id = opts->sample_id;
@@@ -256,10 -256,10 +261,15 @@@ int record_opts__config(struct record_o
  	return record_opts__config_freq(opts);
  }
  
- bool perf_evlist__can_select_event(struct perf_evlist *evlist, const char *str)
+ bool perf_evlist__can_select_event(struct evlist *evlist, const char *str)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *temp_evlist;
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *temp_evlist;
+ 	struct evsel *evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  	int err, fd, cpu;
  	bool ret = false;
  	pid_t pid = -1;
diff --cc tools/perf/util/sort.c
index 5d2518e89fc4,d8e4392d6e18..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -2313,10 -2313,10 +2313,14 @@@ static int parse_field_name(char *str, 
   *   2. full event name (e.g. sched:sched_switch)
   *   3. partial event name (should not contain ':')
   */
++<<<<<<< HEAD
 +static struct perf_evsel *find_evsel(struct perf_evlist *evlist, char *event_name)
++=======
+ static struct evsel *find_evsel(struct evlist *evlist, char *event_name)
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  {
 -	struct evsel *evsel = NULL;
 -	struct evsel *pos;
 +	struct perf_evsel *evsel = NULL;
 +	struct perf_evsel *pos;
  	bool full_name;
  
  	/* case 1 */
diff --cc tools/perf/util/stat-display.c
index 58df6a0dbb9f,cdfceb5b4d72..000000000000
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@@ -310,9 -310,9 +310,9 @@@ static void print_metric_header(struct 
  }
  
  static int first_shadow_cpu(struct perf_stat_config *config,
 -			    struct evsel *evsel, int id)
 +			    struct perf_evsel *evsel, int id)
  {
- 	struct perf_evlist *evlist = evsel->evlist;
+ 	struct evlist *evlist = evsel->evlist;
  	int i;
  
  	if (!config->aggr_get_id)
@@@ -363,11 -363,11 +363,11 @@@ static void abs_printout(struct perf_st
  	print_cgroup(config, evsel);
  }
  
 -static bool is_mixed_hw_group(struct evsel *counter)
 +static bool is_mixed_hw_group(struct perf_evsel *counter)
  {
- 	struct perf_evlist *evlist = counter->evlist;
+ 	struct evlist *evlist = counter->evlist;
  	u32 pmu_type = counter->attr.type;
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	if (counter->nr_members < 2)
  		return false;
@@@ -545,8 -545,8 +545,13 @@@ static void collect_all_aliases(struct 
  				       bool first),
  			    void *data)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = counter->evlist;
 +	struct perf_evsel *alias;
++=======
+ 	struct evlist *evlist = counter->evlist;
+ 	struct evsel *alias;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  	alias = list_prepare_entry(counter, &(evlist->entries), node);
  	list_for_each_entry_continue (alias, &evlist->entries, node) {
diff --cc tools/perf/util/stat-shadow.c
index accb1bf1cfd8,d81bcab2e64c..000000000000
--- a/tools/perf/util/stat-shadow.c
+++ b/tools/perf/util/stat-shadow.c
@@@ -299,10 -299,10 +299,14 @@@ static const char *get_ratio_color(enu
  	return color;
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *perf_stat__find_event(struct perf_evlist *evsel_list,
++=======
+ static struct evsel *perf_stat__find_event(struct evlist *evsel_list,
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  						const char *name)
  {
 -	struct evsel *c2;
 +	struct perf_evsel *c2;
  
  	evlist__for_each_entry (evsel_list, c2) {
  		if (!strcasecmp(c2->name, name) && !c2->collect_stat)
@@@ -312,9 -312,9 +316,9 @@@
  }
  
  /* Mark MetricExpr target events and link events using them to them. */
- void perf_stat__collect_metric_expr(struct perf_evlist *evsel_list)
+ void perf_stat__collect_metric_expr(struct evlist *evsel_list)
  {
 -	struct evsel *counter, *leader, **metric_events, *oc;
 +	struct perf_evsel *counter, *leader, **metric_events, *oc;
  	bool found;
  	const char **metric_names;
  	int i;
diff --cc tools/perf/util/stat.h
index 7032dd1eeac2,95b4de7a9d51..000000000000
--- a/tools/perf/util/stat.h
+++ b/tools/perf/util/stat.h
@@@ -143,11 -143,11 +143,16 @@@ static inline void init_stats(struct st
  	stats->max  = 0;
  }
  
++<<<<<<< HEAD
 +struct perf_evsel;
 +struct perf_evlist;
++=======
+ struct evsel;
+ struct evlist;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  
  struct perf_aggr_thread_value {
 -	struct evsel *counter;
 +	struct perf_evsel *counter;
  	int id;
  	double uval;
  	u64 val;
@@@ -189,14 -189,14 +194,14 @@@ void perf_stat__print_shadow_stats(stru
  				   struct perf_stat_output_ctx *out,
  				   struct rblist *metric_events,
  				   struct runtime_stat *st);
- void perf_stat__collect_metric_expr(struct perf_evlist *);
+ void perf_stat__collect_metric_expr(struct evlist *);
  
- int perf_evlist__alloc_stats(struct perf_evlist *evlist, bool alloc_raw);
- void perf_evlist__free_stats(struct perf_evlist *evlist);
- void perf_evlist__reset_stats(struct perf_evlist *evlist);
+ int perf_evlist__alloc_stats(struct evlist *evlist, bool alloc_raw);
+ void perf_evlist__free_stats(struct evlist *evlist);
+ void perf_evlist__reset_stats(struct evlist *evlist);
  
  int perf_stat_process_counter(struct perf_stat_config *config,
 -			      struct evsel *counter);
 +			      struct perf_evsel *counter);
  struct perf_tool;
  union perf_event;
  struct perf_session;
diff --cc tools/perf/util/tool.h
index 9096a6e3de59,7f95dd1d6883..000000000000
--- a/tools/perf/util/tool.h
+++ b/tools/perf/util/tool.h
@@@ -8,8 -8,8 +8,13 @@@
  
  struct perf_session;
  union perf_event;
++<<<<<<< HEAD
 +struct perf_evlist;
 +struct perf_evsel;
++=======
+ struct evlist;
+ struct evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  struct perf_sample;
  struct perf_tool;
  struct machine;
diff --cc tools/perf/util/top.h
index 19f95eaf75c8,2023e0bf6165..000000000000
--- a/tools/perf/util/top.h
+++ b/tools/perf/util/top.h
@@@ -9,8 -9,8 +9,13 @@@
  #include <stdbool.h>
  #include <sys/ioctl.h>
  
++<<<<<<< HEAD
 +struct perf_evlist;
 +struct perf_evsel;
++=======
+ struct evlist;
+ struct evsel;
++>>>>>>> 63503dba87ac (perf evlist: Rename struct perf_evlist to struct evlist)
  struct perf_session;
  
  struct perf_top {
diff --git a/tools/perf/arch/arm/util/auxtrace.c b/tools/perf/arch/arm/util/auxtrace.c
index 02014740a1aa..f317df7b44e4 100644
--- a/tools/perf/arch/arm/util/auxtrace.c
+++ b/tools/perf/arch/arm/util/auxtrace.c
@@ -50,7 +50,7 @@ static struct perf_pmu **find_all_arm_spe_pmus(int *nr_spes, int *err)
 }
 
 struct auxtrace_record
-*auxtrace_record__init(struct perf_evlist *evlist, int *err)
+*auxtrace_record__init(struct evlist *evlist, int *err)
 {
 	struct perf_pmu	*cs_etm_pmu;
 	struct perf_evsel *evsel;
* Unmerged path tools/perf/arch/arm/util/cs-etm.c
diff --git a/tools/perf/arch/arm64/util/arm-spe.c b/tools/perf/arch/arm64/util/arm-spe.c
index 2c009aa74633..e0be366f72b3 100644
--- a/tools/perf/arch/arm64/util/arm-spe.c
+++ b/tools/perf/arch/arm64/util/arm-spe.c
@@ -27,12 +27,12 @@
 struct arm_spe_recording {
 	struct auxtrace_record		itr;
 	struct perf_pmu			*arm_spe_pmu;
-	struct perf_evlist		*evlist;
+	struct evlist		*evlist;
 };
 
 static size_t
 arm_spe_info_priv_size(struct auxtrace_record *itr __maybe_unused,
-		       struct perf_evlist *evlist __maybe_unused)
+		       struct evlist *evlist __maybe_unused)
 {
 	return ARM_SPE_AUXTRACE_PRIV_SIZE;
 }
@@ -59,7 +59,7 @@ static int arm_spe_info_fill(struct auxtrace_record *itr,
 }
 
 static int arm_spe_recording_options(struct auxtrace_record *itr,
-				     struct perf_evlist *evlist,
+				     struct evlist *evlist,
 				     struct record_opts *opts)
 {
 	struct arm_spe_recording *sper =
diff --git a/tools/perf/arch/powerpc/util/kvm-stat.c b/tools/perf/arch/powerpc/util/kvm-stat.c
index f9db341c47b6..494c8c6e50fb 100644
--- a/tools/perf/arch/powerpc/util/kvm-stat.c
+++ b/tools/perf/arch/powerpc/util/kvm-stat.c
@@ -106,7 +106,7 @@ const char * const kvm_skip_events[] = {
 };
 
 
-static int is_tracepoint_available(const char *str, struct perf_evlist *evlist)
+static int is_tracepoint_available(const char *str, struct evlist *evlist)
 {
 	struct parse_events_error err;
 	int ret;
@@ -119,7 +119,7 @@ static int is_tracepoint_available(const char *str, struct perf_evlist *evlist)
 }
 
 static int ppc__setup_book3s_hv(struct perf_kvm_stat *kvm,
-				struct perf_evlist *evlist)
+				struct evlist *evlist)
 {
 	const char **events_ptr;
 	int i, nr_tp = 0, err = -1;
@@ -146,7 +146,7 @@ static int ppc__setup_book3s_hv(struct perf_kvm_stat *kvm,
 /* Wrapper to setup kvm tracepoints */
 static int ppc__setup_kvm_tp(struct perf_kvm_stat *kvm)
 {
-	struct perf_evlist *evlist = perf_evlist__new();
+	struct evlist *evlist = perf_evlist__new();
 
 	if (evlist == NULL)
 		return -ENOMEM;
diff --git a/tools/perf/arch/s390/util/auxtrace.c b/tools/perf/arch/s390/util/auxtrace.c
index 0fe1be93f375..d10afc7b65c3 100644
--- a/tools/perf/arch/s390/util/auxtrace.c
+++ b/tools/perf/arch/s390/util/auxtrace.c
@@ -20,7 +20,7 @@ static void cpumsf_free(struct auxtrace_record *itr)
 }
 
 static size_t cpumsf_info_priv_size(struct auxtrace_record *itr __maybe_unused,
-				    struct perf_evlist *evlist __maybe_unused)
+				    struct evlist *evlist __maybe_unused)
 {
 	return 0;
 }
@@ -43,7 +43,7 @@ cpumsf_reference(struct auxtrace_record *itr __maybe_unused)
 
 static int
 cpumsf_recording_options(struct auxtrace_record *ar __maybe_unused,
-			 struct perf_evlist *evlist __maybe_unused,
+			 struct evlist *evlist __maybe_unused,
 			 struct record_opts *opts)
 {
 	unsigned int factor = 1;
@@ -82,7 +82,7 @@ cpumsf_parse_snapshot_options(struct auxtrace_record *itr __maybe_unused,
  * auxtrace_record__init is called when perf record
  * check if the event really need auxtrace
  */
-struct auxtrace_record *auxtrace_record__init(struct perf_evlist *evlist,
+struct auxtrace_record *auxtrace_record__init(struct evlist *evlist,
 					      int *err)
 {
 	struct auxtrace_record *aux;
* Unmerged path tools/perf/arch/x86/tests/intel-cqm.c
* Unmerged path tools/perf/arch/x86/tests/perf-time-to-tsc.c
diff --git a/tools/perf/arch/x86/util/auxtrace.c b/tools/perf/arch/x86/util/auxtrace.c
index b135af62011c..1038254284e8 100644
--- a/tools/perf/arch/x86/util/auxtrace.c
+++ b/tools/perf/arch/x86/util/auxtrace.c
@@ -25,7 +25,7 @@
 #include "../../util/evlist.h"
 
 static
-struct auxtrace_record *auxtrace_record__init_intel(struct perf_evlist *evlist,
+struct auxtrace_record *auxtrace_record__init_intel(struct evlist *evlist,
 						    int *err)
 {
 	struct perf_pmu *intel_pt_pmu;
@@ -59,7 +59,7 @@ struct auxtrace_record *auxtrace_record__init_intel(struct perf_evlist *evlist,
 	return NULL;
 }
 
-struct auxtrace_record *auxtrace_record__init(struct perf_evlist *evlist,
+struct auxtrace_record *auxtrace_record__init(struct evlist *evlist,
 					      int *err)
 {
 	char buffer[64];
diff --git a/tools/perf/arch/x86/util/intel-bts.c b/tools/perf/arch/x86/util/intel-bts.c
index 4cbd3d775c19..64e27ce11db1 100644
--- a/tools/perf/arch/x86/util/intel-bts.c
+++ b/tools/perf/arch/x86/util/intel-bts.c
@@ -44,7 +44,7 @@ struct intel_bts_snapshot_ref {
 struct intel_bts_recording {
 	struct auxtrace_record		itr;
 	struct perf_pmu			*intel_bts_pmu;
-	struct perf_evlist		*evlist;
+	struct evlist		*evlist;
 	bool				snapshot_mode;
 	size_t				snapshot_size;
 	int				snapshot_ref_cnt;
@@ -59,7 +59,7 @@ struct branch {
 
 static size_t
 intel_bts_info_priv_size(struct auxtrace_record *itr __maybe_unused,
-			 struct perf_evlist *evlist __maybe_unused)
+			 struct evlist *evlist __maybe_unused)
 {
 	return INTEL_BTS_AUXTRACE_PRIV_SIZE;
 }
@@ -108,7 +108,7 @@ static int intel_bts_info_fill(struct auxtrace_record *itr,
 }
 
 static int intel_bts_recording_options(struct auxtrace_record *itr,
-				       struct perf_evlist *evlist,
+				       struct evlist *evlist,
 				       struct record_opts *opts)
 {
 	struct intel_bts_recording *btsr =
diff --git a/tools/perf/arch/x86/util/intel-pt.c b/tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4..08ae8999f9a7 100644
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@ -53,7 +53,7 @@ struct intel_pt_recording {
 	struct auxtrace_record		itr;
 	struct perf_pmu			*intel_pt_pmu;
 	int				have_sched_switch;
-	struct perf_evlist		*evlist;
+	struct evlist		*evlist;
 	bool				snapshot_mode;
 	bool				snapshot_init_done;
 	size_t				snapshot_size;
@@ -119,7 +119,7 @@ static u64 intel_pt_masked_bits(u64 mask, u64 bits)
 }
 
 static int intel_pt_read_config(struct perf_pmu *intel_pt_pmu, const char *str,
-				struct perf_evlist *evlist, u64 *res)
+				struct evlist *evlist, u64 *res)
 {
 	struct perf_evsel *evsel;
 	u64 mask;
@@ -141,7 +141,7 @@ static int intel_pt_read_config(struct perf_pmu *intel_pt_pmu, const char *str,
 }
 
 static size_t intel_pt_psb_period(struct perf_pmu *intel_pt_pmu,
-				  struct perf_evlist *evlist)
+				  struct evlist *evlist)
 {
 	u64 val;
 	int err, topa_multiple_entries;
@@ -277,7 +277,7 @@ intel_pt_pmu_default_config(struct perf_pmu *intel_pt_pmu)
 	return attr;
 }
 
-static const char *intel_pt_find_filter(struct perf_evlist *evlist,
+static const char *intel_pt_find_filter(struct evlist *evlist,
 					struct perf_pmu *intel_pt_pmu)
 {
 	struct perf_evsel *evsel;
@@ -298,7 +298,7 @@ static size_t intel_pt_filter_bytes(const char *filter)
 }
 
 static size_t
-intel_pt_info_priv_size(struct auxtrace_record *itr, struct perf_evlist *evlist)
+intel_pt_info_priv_size(struct auxtrace_record *itr, struct evlist *evlist)
 {
 	struct intel_pt_recording *ptr =
 			container_of(itr, struct intel_pt_recording, itr);
@@ -407,7 +407,7 @@ static int intel_pt_info_fill(struct auxtrace_record *itr,
 	return 0;
 }
 
-static int intel_pt_track_switches(struct perf_evlist *evlist)
+static int intel_pt_track_switches(struct evlist *evlist)
 {
 	const char *sched_switch = "sched:sched_switch";
 	struct perf_evsel *evsel;
@@ -558,7 +558,7 @@ static int intel_pt_validate_config(struct perf_pmu *intel_pt_pmu,
 }
 
 static int intel_pt_recording_options(struct auxtrace_record *itr,
-				      struct perf_evlist *evlist,
+				      struct evlist *evlist,
 				      struct record_opts *opts)
 {
 	struct intel_pt_recording *ptr =
* Unmerged path tools/perf/builtin-c2c.c
* Unmerged path tools/perf/builtin-diff.c
diff --git a/tools/perf/builtin-ftrace.c b/tools/perf/builtin-ftrace.c
index f0a576403ecd..46fe3220ac14 100644
--- a/tools/perf/builtin-ftrace.c
+++ b/tools/perf/builtin-ftrace.c
@@ -28,7 +28,7 @@
 #define DEFAULT_TRACER  "function_graph"
 
 struct perf_ftrace {
-	struct perf_evlist	*evlist;
+	struct evlist		*evlist;
 	struct target		target;
 	const char		*tracer;
 	struct list_head	filters;
* Unmerged path tools/perf/builtin-inject.c
* Unmerged path tools/perf/builtin-kvm.c
* Unmerged path tools/perf/builtin-record.c
diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index b57eb8070d1b..756269733c97 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -193,7 +193,7 @@ static int hist_iter__branch_callback(struct hist_entry_iter *iter,
 }
 
 static void setup_forced_leader(struct report *report,
-				struct perf_evlist *evlist)
+				struct evlist *evlist)
 {
 	if (report->group_set)
 		perf_evlist__force_leader(evlist);
@@ -459,7 +459,7 @@ static size_t hists__fprintf_nr_sample_events(struct hists *hists, struct report
 	return ret + fprintf(fp, "\n#\n");
 }
 
-static int perf_evlist__tty_browse_hists(struct perf_evlist *evlist,
+static int perf_evlist__tty_browse_hists(struct evlist *evlist,
 					 struct report *rep,
 					 const char *help)
 {
@@ -532,7 +532,7 @@ static void report__warn_kptr_restrict(const struct report *rep)
 
 static int report__gtk_browse_hists(struct report *rep, const char *help)
 {
-	int (*hist_browser)(struct perf_evlist *evlist, const char *help,
+	int (*hist_browser)(struct evlist *evlist, const char *help,
 			    struct hist_browser_timer *timer, float min_pcnt);
 
 	hist_browser = dlsym(perf_gtk_handle, "perf_evlist__gtk_browse_hists");
@@ -549,7 +549,7 @@ static int report__browse_hists(struct report *rep)
 {
 	int ret;
 	struct perf_session *session = rep->session;
-	struct perf_evlist *evlist = session->evlist;
+	struct evlist *evlist = session->evlist;
 	const char *help = perf_tip(system_path(TIPDIR));
 
 	if (help == NULL) {
diff --git a/tools/perf/builtin-sched.c b/tools/perf/builtin-sched.c
index d17a75eb69b7..9ad218e75f25 100644
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@ -2925,7 +2925,7 @@ static int perf_timehist__process_sample(struct perf_tool *tool,
 }
 
 static int timehist_check_attr(struct perf_sched *sched,
-			       struct perf_evlist *evlist)
+			       struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 	struct evsel_runtime *er;
@@ -2964,7 +2964,7 @@ static int perf_sched__timehist(struct perf_sched *sched)
 	};
 
 	struct perf_session *session;
-	struct perf_evlist *evlist;
+	struct evlist *evlist;
 	int err = -1;
 
 	/*
* Unmerged path tools/perf/builtin-script.c
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index b71c4390d333..0bf5e9351b78 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -132,7 +132,7 @@ static const char *smi_cost_attrs = {
 	"}"
 };
 
-static struct perf_evlist	*evsel_list;
+static struct evlist	*evsel_list;
 
 static struct target target = {
 	.uid	= UINT_MAX,
* Unmerged path tools/perf/builtin-top.c
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/tests/backward-ring-buffer.c
diff --git a/tools/perf/tests/bpf.c b/tools/perf/tests/bpf.c
index c9e4cdc4c9c8..95a15b51f95c 100644
--- a/tools/perf/tests/bpf.c
+++ b/tools/perf/tests/bpf.c
@@ -118,7 +118,7 @@ static int do_test(struct bpf_object *obj, int (*func)(void),
 
 	char pid[16];
 	char sbuf[STRERR_BUFSIZE];
-	struct perf_evlist *evlist;
+	struct evlist *evlist;
 	int i, ret = TEST_FAIL, err = 0, count = 0;
 
 	struct parse_events_state parse_state;
* Unmerged path tools/perf/tests/code-reading.c
* Unmerged path tools/perf/tests/event-times.c
* Unmerged path tools/perf/tests/event_update.c
* Unmerged path tools/perf/tests/evsel-roundtrip-name.c
* Unmerged path tools/perf/tests/hists_cumulate.c
* Unmerged path tools/perf/tests/hists_filter.c
* Unmerged path tools/perf/tests/hists_link.c
* Unmerged path tools/perf/tests/hists_output.c
* Unmerged path tools/perf/tests/keep-tracking.c
* Unmerged path tools/perf/tests/mmap-basic.c
* Unmerged path tools/perf/tests/openat-syscall-tp-fields.c
diff --git a/tools/perf/tests/parse-events.c b/tools/perf/tests/parse-events.c
index 8f3c80e13584..e8763fe3aeb0 100644
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@ -44,7 +44,7 @@ static bool kvm_s390_create_vm_valid(void)
 }
 #endif
 
-static int test__checkevent_tracepoint(struct perf_evlist *evlist)
+static int test__checkevent_tracepoint(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -57,7 +57,7 @@ static int test__checkevent_tracepoint(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_tracepoint_multi(struct perf_evlist *evlist)
+static int test__checkevent_tracepoint_multi(struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 
@@ -75,7 +75,7 @@ static int test__checkevent_tracepoint_multi(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_raw(struct perf_evlist *evlist)
+static int test__checkevent_raw(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -85,7 +85,7 @@ static int test__checkevent_raw(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_numeric(struct perf_evlist *evlist)
+static int test__checkevent_numeric(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -95,7 +95,7 @@ static int test__checkevent_numeric(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_symbolic_name(struct perf_evlist *evlist)
+static int test__checkevent_symbolic_name(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -106,7 +106,7 @@ static int test__checkevent_symbolic_name(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_symbolic_name_config(struct perf_evlist *evlist)
+static int test__checkevent_symbolic_name_config(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -127,7 +127,7 @@ static int test__checkevent_symbolic_name_config(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_symbolic_alias(struct perf_evlist *evlist)
+static int test__checkevent_symbolic_alias(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -138,7 +138,7 @@ static int test__checkevent_symbolic_alias(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_genhw(struct perf_evlist *evlist)
+static int test__checkevent_genhw(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -148,7 +148,7 @@ static int test__checkevent_genhw(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -162,7 +162,7 @@ static int test__checkevent_breakpoint(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint_x(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_x(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -175,7 +175,7 @@ static int test__checkevent_breakpoint_x(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint_r(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_r(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -190,7 +190,7 @@ static int test__checkevent_breakpoint_r(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint_w(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_w(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -205,7 +205,7 @@ static int test__checkevent_breakpoint_w(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint_rw(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_rw(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -220,7 +220,7 @@ static int test__checkevent_breakpoint_rw(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_tracepoint_modifier(struct perf_evlist *evlist)
+static int test__checkevent_tracepoint_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -233,7 +233,7 @@ static int test__checkevent_tracepoint_modifier(struct perf_evlist *evlist)
 }
 
 static int
-test__checkevent_tracepoint_multi_modifier(struct perf_evlist *evlist)
+test__checkevent_tracepoint_multi_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 
@@ -251,7 +251,7 @@ test__checkevent_tracepoint_multi_modifier(struct perf_evlist *evlist)
 	return test__checkevent_tracepoint_multi(evlist);
 }
 
-static int test__checkevent_raw_modifier(struct perf_evlist *evlist)
+static int test__checkevent_raw_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -263,7 +263,7 @@ static int test__checkevent_raw_modifier(struct perf_evlist *evlist)
 	return test__checkevent_raw(evlist);
 }
 
-static int test__checkevent_numeric_modifier(struct perf_evlist *evlist)
+static int test__checkevent_numeric_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -275,7 +275,7 @@ static int test__checkevent_numeric_modifier(struct perf_evlist *evlist)
 	return test__checkevent_numeric(evlist);
 }
 
-static int test__checkevent_symbolic_name_modifier(struct perf_evlist *evlist)
+static int test__checkevent_symbolic_name_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -287,7 +287,7 @@ static int test__checkevent_symbolic_name_modifier(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_name(evlist);
 }
 
-static int test__checkevent_exclude_host_modifier(struct perf_evlist *evlist)
+static int test__checkevent_exclude_host_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -297,7 +297,7 @@ static int test__checkevent_exclude_host_modifier(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_name(evlist);
 }
 
-static int test__checkevent_exclude_guest_modifier(struct perf_evlist *evlist)
+static int test__checkevent_exclude_guest_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -307,7 +307,7 @@ static int test__checkevent_exclude_guest_modifier(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_name(evlist);
 }
 
-static int test__checkevent_symbolic_alias_modifier(struct perf_evlist *evlist)
+static int test__checkevent_symbolic_alias_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -319,7 +319,7 @@ static int test__checkevent_symbolic_alias_modifier(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_alias(evlist);
 }
 
-static int test__checkevent_genhw_modifier(struct perf_evlist *evlist)
+static int test__checkevent_genhw_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -331,7 +331,7 @@ static int test__checkevent_genhw_modifier(struct perf_evlist *evlist)
 	return test__checkevent_genhw(evlist);
 }
 
-static int test__checkevent_exclude_idle_modifier(struct perf_evlist *evlist)
+static int test__checkevent_exclude_idle_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -346,7 +346,7 @@ static int test__checkevent_exclude_idle_modifier(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_name(evlist);
 }
 
-static int test__checkevent_exclude_idle_modifier_1(struct perf_evlist *evlist)
+static int test__checkevent_exclude_idle_modifier_1(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -361,7 +361,7 @@ static int test__checkevent_exclude_idle_modifier_1(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_name(evlist);
 }
 
-static int test__checkevent_breakpoint_modifier(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -376,7 +376,7 @@ static int test__checkevent_breakpoint_modifier(struct perf_evlist *evlist)
 	return test__checkevent_breakpoint(evlist);
 }
 
-static int test__checkevent_breakpoint_x_modifier(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_x_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -390,7 +390,7 @@ static int test__checkevent_breakpoint_x_modifier(struct perf_evlist *evlist)
 	return test__checkevent_breakpoint_x(evlist);
 }
 
-static int test__checkevent_breakpoint_r_modifier(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_r_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -404,7 +404,7 @@ static int test__checkevent_breakpoint_r_modifier(struct perf_evlist *evlist)
 	return test__checkevent_breakpoint_r(evlist);
 }
 
-static int test__checkevent_breakpoint_w_modifier(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_w_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -418,7 +418,7 @@ static int test__checkevent_breakpoint_w_modifier(struct perf_evlist *evlist)
 	return test__checkevent_breakpoint_w(evlist);
 }
 
-static int test__checkevent_breakpoint_rw_modifier(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_rw_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -432,7 +432,7 @@ static int test__checkevent_breakpoint_rw_modifier(struct perf_evlist *evlist)
 	return test__checkevent_breakpoint_rw(evlist);
 }
 
-static int test__checkevent_pmu(struct perf_evlist *evlist)
+static int test__checkevent_pmu(struct evlist *evlist)
 {
 
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
@@ -451,7 +451,7 @@ static int test__checkevent_pmu(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_list(struct perf_evlist *evlist)
+static int test__checkevent_list(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -490,7 +490,7 @@ static int test__checkevent_list(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_pmu_name(struct perf_evlist *evlist)
+static int test__checkevent_pmu_name(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -511,7 +511,7 @@ static int test__checkevent_pmu_name(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_pmu_partial_time_callgraph(struct perf_evlist *evlist)
+static int test__checkevent_pmu_partial_time_callgraph(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -544,7 +544,7 @@ static int test__checkevent_pmu_partial_time_callgraph(struct perf_evlist *evlis
 	return 0;
 }
 
-static int test__checkevent_pmu_events(struct perf_evlist *evlist)
+static int test__checkevent_pmu_events(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -562,7 +562,7 @@ static int test__checkevent_pmu_events(struct perf_evlist *evlist)
 }
 
 
-static int test__checkevent_pmu_events_mix(struct perf_evlist *evlist)
+static int test__checkevent_pmu_events_mix(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -634,7 +634,7 @@ static int test__checkterms_simple(struct list_head *terms)
 	return 0;
 }
 
-static int test__group1(struct perf_evlist *evlist)
+static int test__group1(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -676,7 +676,7 @@ static int test__group1(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__group2(struct perf_evlist *evlist)
+static int test__group2(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -731,7 +731,7 @@ static int test__group2(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__group3(struct perf_evlist *evlist __maybe_unused)
+static int test__group3(struct evlist *evlist __maybe_unused)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -823,7 +823,7 @@ static int test__group3(struct perf_evlist *evlist __maybe_unused)
 	return 0;
 }
 
-static int test__group4(struct perf_evlist *evlist __maybe_unused)
+static int test__group4(struct evlist *evlist __maybe_unused)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -867,7 +867,7 @@ static int test__group4(struct perf_evlist *evlist __maybe_unused)
 	return 0;
 }
 
-static int test__group5(struct perf_evlist *evlist __maybe_unused)
+static int test__group5(struct evlist *evlist __maybe_unused)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -953,7 +953,7 @@ static int test__group5(struct perf_evlist *evlist __maybe_unused)
 	return 0;
 }
 
-static int test__group_gh1(struct perf_evlist *evlist)
+static int test__group_gh1(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -993,7 +993,7 @@ static int test__group_gh1(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__group_gh2(struct perf_evlist *evlist)
+static int test__group_gh2(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -1033,7 +1033,7 @@ static int test__group_gh2(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__group_gh3(struct perf_evlist *evlist)
+static int test__group_gh3(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -1073,7 +1073,7 @@ static int test__group_gh3(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__group_gh4(struct perf_evlist *evlist)
+static int test__group_gh4(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -1113,7 +1113,7 @@ static int test__group_gh4(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__leader_sample1(struct perf_evlist *evlist)
+static int test__leader_sample1(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -1166,7 +1166,7 @@ static int test__leader_sample1(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__leader_sample2(struct perf_evlist *evlist __maybe_unused)
+static int test__leader_sample2(struct evlist *evlist __maybe_unused)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -1205,7 +1205,7 @@ static int test__leader_sample2(struct perf_evlist *evlist __maybe_unused)
 	return 0;
 }
 
-static int test__checkevent_pinned_modifier(struct perf_evlist *evlist)
+static int test__checkevent_pinned_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1218,7 +1218,7 @@ static int test__checkevent_pinned_modifier(struct perf_evlist *evlist)
 	return test__checkevent_symbolic_name(evlist);
 }
 
-static int test__pinned_group(struct perf_evlist *evlist)
+static int test__pinned_group(struct evlist *evlist)
 {
 	struct perf_evsel *evsel, *leader;
 
@@ -1249,7 +1249,7 @@ static int test__pinned_group(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint_len(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_len(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1264,7 +1264,7 @@ static int test__checkevent_breakpoint_len(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_breakpoint_len_w(struct perf_evlist *evlist)
+static int test__checkevent_breakpoint_len_w(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1280,7 +1280,7 @@ static int test__checkevent_breakpoint_len_w(struct perf_evlist *evlist)
 }
 
 static int
-test__checkevent_breakpoint_len_rw_modifier(struct perf_evlist *evlist)
+test__checkevent_breakpoint_len_rw_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1292,7 +1292,7 @@ test__checkevent_breakpoint_len_rw_modifier(struct perf_evlist *evlist)
 	return test__checkevent_breakpoint_rw(evlist);
 }
 
-static int test__checkevent_precise_max_modifier(struct perf_evlist *evlist)
+static int test__checkevent_precise_max_modifier(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1303,7 +1303,7 @@ static int test__checkevent_precise_max_modifier(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_config_symbol(struct perf_evlist *evlist)
+static int test__checkevent_config_symbol(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1311,7 +1311,7 @@ static int test__checkevent_config_symbol(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_config_raw(struct perf_evlist *evlist)
+static int test__checkevent_config_raw(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1319,7 +1319,7 @@ static int test__checkevent_config_raw(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_config_num(struct perf_evlist *evlist)
+static int test__checkevent_config_num(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1327,7 +1327,7 @@ static int test__checkevent_config_num(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_config_cache(struct perf_evlist *evlist)
+static int test__checkevent_config_cache(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1340,7 +1340,7 @@ static bool test__intel_pt_valid(void)
 	return !!perf_pmu__find("intel_pt");
 }
 
-static int test__intel_pt(struct perf_evlist *evlist)
+static int test__intel_pt(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1348,7 +1348,7 @@ static int test__intel_pt(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__checkevent_complex_name(struct perf_evlist *evlist)
+static int test__checkevent_complex_name(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1356,7 +1356,7 @@ static int test__checkevent_complex_name(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__sym_event_slash(struct perf_evlist *evlist)
+static int test__sym_event_slash(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1366,7 +1366,7 @@ static int test__sym_event_slash(struct perf_evlist *evlist)
 	return 0;
 }
 
-static int test__sym_event_dc(struct perf_evlist *evlist)
+static int test__sym_event_dc(struct evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__first(evlist);
 
@@ -1422,7 +1422,7 @@ static int count_tracepoints(void)
 	return cnt;
 }
 
-static int test__all_tracepoints(struct perf_evlist *evlist)
+static int test__all_tracepoints(struct evlist *evlist)
 {
 	TEST_ASSERT_VAL("wrong events count",
 			count_tracepoints() == evlist->nr_entries);
@@ -1435,7 +1435,7 @@ struct evlist_test {
 	__u32 type;
 	const int id;
 	bool (*valid)(void);
-	int (*check)(struct perf_evlist *evlist);
+	int (*check)(struct evlist *evlist);
 };
 
 static struct evlist_test test__events[] = {
@@ -1769,7 +1769,7 @@ static struct terms_test test__terms[] = {
 static int test_event(struct evlist_test *e)
 {
 	struct parse_events_error err = { .idx = 0, };
-	struct perf_evlist *evlist;
+	struct evlist *evlist;
 	int ret;
 
 	if (e->valid && !e->valid()) {
diff --git a/tools/perf/tests/parse-no-sample-id-all.c b/tools/perf/tests/parse-no-sample-id-all.c
index 2196d1497c0c..fc0213246aaf 100644
--- a/tools/perf/tests/parse-no-sample-id-all.c
+++ b/tools/perf/tests/parse-no-sample-id-all.c
@@ -11,7 +11,7 @@
 #include "util.h"
 #include "debug.h"
 
-static int process_event(struct perf_evlist **pevlist, union perf_event *event)
+static int process_event(struct evlist **pevlist, union perf_event *event)
 {
 	struct perf_sample sample;
 
@@ -39,7 +39,7 @@ static int process_event(struct perf_evlist **pevlist, union perf_event *event)
 
 static int process_events(union perf_event **events, size_t count)
 {
-	struct perf_evlist *evlist = NULL;
+	struct evlist *evlist = NULL;
 	int err = 0;
 	size_t i;
 
* Unmerged path tools/perf/tests/perf-record.c
* Unmerged path tools/perf/tests/sw-clock.c
* Unmerged path tools/perf/tests/switch-tracking.c
* Unmerged path tools/perf/tests/task-exit.c
diff --git a/tools/perf/tests/time-utils-test.c b/tools/perf/tests/time-utils-test.c
index 4f53006233a1..fe57ca3b6e54 100644
--- a/tools/perf/tests/time-utils-test.c
+++ b/tools/perf/tests/time-utils-test.c
@@ -69,7 +69,7 @@ struct test_data {
 
 static bool test__perf_time__parse_for_ranges(struct test_data *d)
 {
-	struct perf_evlist evlist = {
+	struct evlist evlist = {
 		.first_sample_time = d->first,
 		.last_sample_time = d->last,
 	};
* Unmerged path tools/perf/ui/browsers/hists.c
* Unmerged path tools/perf/ui/gtk/gtk.h
diff --git a/tools/perf/ui/gtk/hists.c b/tools/perf/ui/gtk/hists.c
index 3955ed1d1bd9..a75af623c7fe 100644
--- a/tools/perf/ui/gtk/hists.c
+++ b/tools/perf/ui/gtk/hists.c
@@ -590,7 +590,7 @@ static void perf_gtk__show_hierarchy(GtkWidget *window, struct hists *hists,
 	gtk_container_add(GTK_CONTAINER(window), view);
 }
 
-int perf_evlist__gtk_browse_hists(struct perf_evlist *evlist,
+int perf_evlist__gtk_browse_hists(struct evlist *evlist,
 				  const char *help,
 				  struct hist_browser_timer *hbt __maybe_unused,
 				  float min_pcnt)
diff --git a/tools/perf/ui/hist.c b/tools/perf/ui/hist.c
index 412d6f1626e3..63b39d5883c3 100644
--- a/tools/perf/ui/hist.c
+++ b/tools/perf/ui/hist.c
@@ -795,7 +795,7 @@ static int add_hierarchy_fmt(struct hists *hists, struct perf_hpp_fmt *fmt)
 }
 
 int perf_hpp__setup_hists_formats(struct perf_hpp_list *list,
-				  struct perf_evlist *evlist)
+				  struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 	struct perf_hpp_fmt *fmt;
diff --git a/tools/perf/util/auxtrace.c b/tools/perf/util/auxtrace.c
index 7479b73720be..f16e48952814 100644
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@ -133,7 +133,7 @@ void auxtrace_mmap_params__init(struct auxtrace_mmap_params *mp,
 }
 
 void auxtrace_mmap_params__set_idx(struct auxtrace_mmap_params *mp,
-				   struct perf_evlist *evlist, int idx,
+				   struct evlist *evlist, int idx,
 				   bool per_cpu)
 {
 	mp->idx = idx;
@@ -512,7 +512,7 @@ void auxtrace_heap__pop(struct auxtrace_heap *heap)
 }
 
 size_t auxtrace_record__info_priv_size(struct auxtrace_record *itr,
-				       struct perf_evlist *evlist)
+				       struct evlist *evlist)
 {
 	if (itr)
 		return itr->info_priv_size(itr, evlist);
@@ -565,7 +565,7 @@ int auxtrace_record__find_snapshot(struct auxtrace_record *itr, int idx,
 }
 
 int auxtrace_record__options(struct auxtrace_record *itr,
-			     struct perf_evlist *evlist,
+			     struct evlist *evlist,
 			     struct record_opts *opts)
 {
 	if (itr)
@@ -594,7 +594,7 @@ int auxtrace_parse_snapshot_options(struct auxtrace_record *itr,
 }
 
 struct auxtrace_record *__weak
-auxtrace_record__init(struct perf_evlist *evlist __maybe_unused, int *err)
+auxtrace_record__init(struct evlist *evlist __maybe_unused, int *err)
 {
 	*err = 0;
 	return NULL;
@@ -2169,7 +2169,7 @@ static int perf_evsel__nr_addr_filter(struct perf_evsel *evsel)
 	return nr_addr_filters;
 }
 
-int auxtrace_parse_filters(struct perf_evlist *evlist)
+int auxtrace_parse_filters(struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 	char *filter;
diff --git a/tools/perf/util/auxtrace.h b/tools/perf/util/auxtrace.h
index c80c58eb7f4d..5b9572426197 100644
--- a/tools/perf/util/auxtrace.h
+++ b/tools/perf/util/auxtrace.h
@@ -32,7 +32,7 @@
 
 union perf_event;
 struct perf_session;
-struct perf_evlist;
+struct evlist;
 struct perf_tool;
 struct perf_mmap;
 struct option;
@@ -318,10 +318,10 @@ struct auxtrace_mmap_params {
  */
 struct auxtrace_record {
 	int (*recording_options)(struct auxtrace_record *itr,
-				 struct perf_evlist *evlist,
+				 struct evlist *evlist,
 				 struct record_opts *opts);
 	size_t (*info_priv_size)(struct auxtrace_record *itr,
-				 struct perf_evlist *evlist);
+				 struct evlist *evlist);
 	int (*info_fill)(struct auxtrace_record *itr,
 			 struct perf_session *session,
 			 struct auxtrace_info_event *auxtrace_info,
@@ -441,7 +441,7 @@ void auxtrace_mmap_params__init(struct auxtrace_mmap_params *mp,
 				unsigned int auxtrace_pages,
 				bool auxtrace_overwrite);
 void auxtrace_mmap_params__set_idx(struct auxtrace_mmap_params *mp,
-				   struct perf_evlist *evlist, int idx,
+				   struct evlist *evlist, int idx,
 				   bool per_cpu);
 
 typedef int (*process_auxtrace_t)(struct perf_tool *tool,
@@ -491,17 +491,17 @@ int auxtrace_cache__add(struct auxtrace_cache *c, u32 key,
 			struct auxtrace_cache_entry *entry);
 void *auxtrace_cache__lookup(struct auxtrace_cache *c, u32 key);
 
-struct auxtrace_record *auxtrace_record__init(struct perf_evlist *evlist,
+struct auxtrace_record *auxtrace_record__init(struct evlist *evlist,
 					      int *err);
 
 int auxtrace_parse_snapshot_options(struct auxtrace_record *itr,
 				    struct record_opts *opts,
 				    const char *str);
 int auxtrace_record__options(struct auxtrace_record *itr,
-			     struct perf_evlist *evlist,
+			     struct evlist *evlist,
 			     struct record_opts *opts);
 size_t auxtrace_record__info_priv_size(struct auxtrace_record *itr,
-				       struct perf_evlist *evlist);
+				       struct evlist *evlist);
 int auxtrace_record__info_fill(struct auxtrace_record *itr,
 			       struct perf_session *session,
 			       struct auxtrace_info_event *auxtrace_info,
@@ -549,7 +549,7 @@ void addr_filters__init(struct addr_filters *filts);
 void addr_filters__exit(struct addr_filters *filts);
 int addr_filters__parse_bare_filter(struct addr_filters *filts,
 				    const char *filter);
-int auxtrace_parse_filters(struct perf_evlist *evlist);
+int auxtrace_parse_filters(struct evlist *evlist);
 
 static inline int auxtrace__process_event(struct perf_session *session,
 					  union perf_event *event,
@@ -622,7 +622,7 @@ void itrace_synth_opts__clear_time_range(struct itrace_synth_opts *opts)
 #else
 
 static inline struct auxtrace_record *
-auxtrace_record__init(struct perf_evlist *evlist __maybe_unused,
+auxtrace_record__init(struct evlist *evlist __maybe_unused,
 		      int *err)
 {
 	*err = 0;
@@ -645,7 +645,7 @@ perf_event__synthesize_auxtrace_info(struct auxtrace_record *itr __maybe_unused,
 
 static inline
 int auxtrace_record__options(struct auxtrace_record *itr __maybe_unused,
-			     struct perf_evlist *evlist __maybe_unused,
+			     struct evlist *evlist __maybe_unused,
 			     struct record_opts *opts __maybe_unused)
 {
 	return 0;
@@ -742,7 +742,7 @@ void auxtrace_index__free(struct list_head *head __maybe_unused)
 }
 
 static inline
-int auxtrace_parse_filters(struct perf_evlist *evlist __maybe_unused)
+int auxtrace_parse_filters(struct evlist *evlist __maybe_unused)
 {
 	return 0;
 }
@@ -756,7 +756,7 @@ void auxtrace_mmap_params__init(struct auxtrace_mmap_params *mp,
 				unsigned int auxtrace_pages,
 				bool auxtrace_overwrite);
 void auxtrace_mmap_params__set_idx(struct auxtrace_mmap_params *mp,
-				   struct perf_evlist *evlist, int idx,
+				   struct evlist *evlist, int idx,
 				   bool per_cpu);
 
 #define ITRACE_HELP ""
diff --git a/tools/perf/util/bpf-event.c b/tools/perf/util/bpf-event.c
index 2a4a0da35632..5a5dcc6d8f85 100644
--- a/tools/perf/util/bpf-event.c
+++ b/tools/perf/util/bpf-event.c
@@ -418,7 +418,7 @@ static int bpf_event__sb_cb(union perf_event *event, void *data)
 	return 0;
 }
 
-int bpf_event__add_sb_event(struct perf_evlist **evlist,
+int bpf_event__add_sb_event(struct evlist **evlist,
 			    struct perf_env *env)
 {
 	struct perf_event_attr attr = {
diff --git a/tools/perf/util/bpf-event.h b/tools/perf/util/bpf-event.h
index 04c33b3bfe28..26ab9239f986 100644
--- a/tools/perf/util/bpf-event.h
+++ b/tools/perf/util/bpf-event.h
@@ -37,7 +37,7 @@ int perf_event__synthesize_bpf_events(struct perf_session *session,
 				      perf_event__handler_t process,
 				      struct machine *machine,
 				      struct record_opts *opts);
-int bpf_event__add_sb_event(struct perf_evlist **evlist,
+int bpf_event__add_sb_event(struct evlist **evlist,
 				 struct perf_env *env);
 void bpf_event__print_bpf_prog_info(struct bpf_prog_info *info,
 				    struct perf_env *env,
@@ -58,7 +58,7 @@ static inline int perf_event__synthesize_bpf_events(struct perf_session *session
 	return 0;
 }
 
-static inline int bpf_event__add_sb_event(struct perf_evlist **evlist __maybe_unused,
+static inline int bpf_event__add_sb_event(struct evlist **evlist __maybe_unused,
 					  struct perf_env *env __maybe_unused)
 {
 	return 0;
* Unmerged path tools/perf/util/bpf-loader.c
* Unmerged path tools/perf/util/bpf-loader.h
* Unmerged path tools/perf/util/cgroup.c
diff --git a/tools/perf/util/cgroup.h b/tools/perf/util/cgroup.h
index f033a80c1b14..2ec11f01090d 100644
--- a/tools/perf/util/cgroup.h
+++ b/tools/perf/util/cgroup.h
@@ -18,11 +18,11 @@ extern int nr_cgroups; /* number of explicit cgroups defined */
 struct cgroup *cgroup__get(struct cgroup *cgroup);
 void cgroup__put(struct cgroup *cgroup);
 
-struct perf_evlist;
+struct evlist;
 
-struct cgroup *evlist__findnew_cgroup(struct perf_evlist *evlist, const char *name);
+struct cgroup *evlist__findnew_cgroup(struct evlist *evlist, const char *name);
 
-void evlist__set_default_cgroup(struct perf_evlist *evlist, struct cgroup *cgroup);
+void evlist__set_default_cgroup(struct evlist *evlist, struct cgroup *cgroup);
 
 int parse_cgroups(const struct option *opt, const char *str, int unset);
 
* Unmerged path tools/perf/util/cs-etm.c
* Unmerged path tools/perf/util/data-convert-bt.c
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/header.c
diff --git a/tools/perf/util/header.h b/tools/perf/util/header.h
index 5b3abe4172e2..840bd5c75d05 100644
--- a/tools/perf/util/header.h
+++ b/tools/perf/util/header.h
@@ -92,12 +92,12 @@ struct perf_header {
 	struct perf_env 	env;
 };
 
-struct perf_evlist;
+struct evlist;
 struct perf_session;
 
 int perf_session__read_header(struct perf_session *session);
 int perf_session__write_header(struct perf_session *session,
-			       struct perf_evlist *evlist,
+			       struct evlist *evlist,
 			       int fd, bool at_exit);
 int perf_header__write_pipe(int fd);
 
@@ -117,11 +117,11 @@ int perf_header__fprintf_info(struct perf_session *s, FILE *fp, bool full);
 
 int perf_event__synthesize_features(struct perf_tool *tool,
 				    struct perf_session *session,
-				    struct perf_evlist *evlist,
+				    struct evlist *evlist,
 				    perf_event__handler_t process);
 
 int perf_event__synthesize_extra_attr(struct perf_tool *tool,
-				      struct perf_evlist *evsel_list,
+				      struct evlist *evsel_list,
 				      perf_event__handler_t process,
 				      bool is_pipe);
 
@@ -132,7 +132,7 @@ int perf_event__synthesize_attr(struct perf_tool *tool,
 				struct perf_event_attr *attr, u32 ids, u64 *id,
 				perf_event__handler_t process);
 int perf_event__synthesize_attrs(struct perf_tool *tool,
-				 struct perf_evlist *evlist,
+				 struct evlist *evlist,
 				 perf_event__handler_t process);
 int perf_event__synthesize_event_update_unit(struct perf_tool *tool,
 					     struct perf_evsel *evsel,
@@ -147,14 +147,14 @@ int perf_event__synthesize_event_update_cpus(struct perf_tool *tool,
 					     struct perf_evsel *evsel,
 					     perf_event__handler_t process);
 int perf_event__process_attr(struct perf_tool *tool, union perf_event *event,
-			     struct perf_evlist **pevlist);
+			     struct evlist **pevlist);
 int perf_event__process_event_update(struct perf_tool *tool,
 				     union perf_event *event,
-				     struct perf_evlist **pevlist);
+				     struct evlist **pevlist);
 size_t perf_event__fprintf_event_update(union perf_event *event, FILE *fp);
 
 int perf_event__synthesize_tracing_data(struct perf_tool *tool,
-					int fd, struct perf_evlist *evlist,
+					int fd, struct evlist *evlist,
 					perf_event__handler_t process);
 int perf_event__process_tracing_data(struct perf_session *session,
 				     union perf_event *event);
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index f24fd1954f6c..63c6193c7bfe 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -2573,7 +2573,7 @@ void hist__account_cycles(struct branch_stack *bs, struct addr_location *al,
 	}
 }
 
-size_t perf_evlist__fprintf_nr_events(struct perf_evlist *evlist, FILE *fp)
+size_t perf_evlist__fprintf_nr_events(struct evlist *evlist, FILE *fp)
 {
 	struct perf_evsel *pos;
 	size_t ret = 0;
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index 24635f36148d..8a40bb17f126 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -196,7 +196,7 @@ size_t events_stats__fprintf(struct events_stats *stats, FILE *fp);
 size_t hists__fprintf(struct hists *hists, bool show_header, int max_rows,
 		      int max_cols, float min_pcnt, FILE *fp,
 		      bool ignore_callchains);
-size_t perf_evlist__fprintf_nr_events(struct perf_evlist *evlist, FILE *fp);
+size_t perf_evlist__fprintf_nr_events(struct evlist *evlist, FILE *fp);
 
 void hists__filter_by_dso(struct hists *hists);
 void hists__filter_by_thread(struct hists *hists);
@@ -367,7 +367,7 @@ void perf_hpp__setup_output_field(struct perf_hpp_list *list);
 void perf_hpp__reset_output_field(struct perf_hpp_list *list);
 void perf_hpp__append_sort_keys(struct perf_hpp_list *list);
 int perf_hpp__setup_hists_formats(struct perf_hpp_list *list,
-				  struct perf_evlist *evlist);
+				  struct evlist *evlist);
 
 
 bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format);
@@ -432,7 +432,7 @@ static inline size_t perf_hpp__color_overhead(void)
 	       : 0;
 }
 
-struct perf_evlist;
+struct evlist;
 
 struct hist_browser_timer {
 	void (*timer)(void *arg);
@@ -461,7 +461,7 @@ int hist_entry__tui_annotate(struct hist_entry *he, struct perf_evsel *evsel,
 			     struct hist_browser_timer *hbt,
 			     struct annotation_options *annotation_opts);
 
-int perf_evlist__tui_browse_hists(struct perf_evlist *evlist, const char *help,
+int perf_evlist__tui_browse_hists(struct evlist *evlist, const char *help,
 				  struct hist_browser_timer *hbt,
 				  float min_pcnt,
 				  struct perf_env *env,
@@ -476,7 +476,7 @@ int res_sample_browse(struct res_sample *res_samples, int num_res,
 void res_sample_init(void);
 #else
 static inline
-int perf_evlist__tui_browse_hists(struct perf_evlist *evlist __maybe_unused,
+int perf_evlist__tui_browse_hists(struct evlist *evlist __maybe_unused,
 				  const char *help __maybe_unused,
 				  struct hist_browser_timer *hbt __maybe_unused,
 				  float min_pcnt __maybe_unused,
* Unmerged path tools/perf/util/intel-bts.c
* Unmerged path tools/perf/util/intel-pt.c
* Unmerged path tools/perf/util/kvm-stat.h
* Unmerged path tools/perf/util/metricgroup.c
diff --git a/tools/perf/util/mmap.c b/tools/perf/util/mmap.c
index 850493205040..21320aeaefeb 100644
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@ -151,7 +151,7 @@ void __weak auxtrace_mmap_params__init(struct auxtrace_mmap_params *mp __maybe_u
 }
 
 void __weak auxtrace_mmap_params__set_idx(struct auxtrace_mmap_params *mp __maybe_unused,
-					  struct perf_evlist *evlist __maybe_unused,
+					  struct evlist *evlist __maybe_unused,
 					  int idx __maybe_unused,
 					  bool per_cpu __maybe_unused)
 {
* Unmerged path tools/perf/util/parse-events.c
* Unmerged path tools/perf/util/parse-events.h
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 1e5b6718dcea..73aed68a15b2 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -858,7 +858,7 @@ static int pyrf_evsel__setup_types(void)
 struct pyrf_evlist {
 	PyObject_HEAD
 
-	struct perf_evlist evlist;
+	struct evlist evlist;
 };
 
 static int pyrf_evlist__init(struct pyrf_evlist *pevlist,
@@ -886,7 +886,7 @@ static void pyrf_evlist__delete(struct pyrf_evlist *pevlist)
 static PyObject *pyrf_evlist__mmap(struct pyrf_evlist *pevlist,
 				   PyObject *args, PyObject *kwargs)
 {
-	struct perf_evlist *evlist = &pevlist->evlist;
+	struct evlist *evlist = &pevlist->evlist;
 	static char *kwlist[] = { "pages", "overwrite", NULL };
 	int pages = 128, overwrite = false;
 
@@ -906,7 +906,7 @@ static PyObject *pyrf_evlist__mmap(struct pyrf_evlist *pevlist,
 static PyObject *pyrf_evlist__poll(struct pyrf_evlist *pevlist,
 				   PyObject *args, PyObject *kwargs)
 {
-	struct perf_evlist *evlist = &pevlist->evlist;
+	struct evlist *evlist = &pevlist->evlist;
 	static char *kwlist[] = { "timeout", NULL };
 	int timeout = -1, n;
 
@@ -926,7 +926,7 @@ static PyObject *pyrf_evlist__get_pollfd(struct pyrf_evlist *pevlist,
 					 PyObject *args __maybe_unused,
 					 PyObject *kwargs __maybe_unused)
 {
-	struct perf_evlist *evlist = &pevlist->evlist;
+	struct evlist *evlist = &pevlist->evlist;
         PyObject *list = PyList_New(0);
 	int i;
 
@@ -964,7 +964,7 @@ static PyObject *pyrf_evlist__add(struct pyrf_evlist *pevlist,
 				  PyObject *args,
 				  PyObject *kwargs __maybe_unused)
 {
-	struct perf_evlist *evlist = &pevlist->evlist;
+	struct evlist *evlist = &pevlist->evlist;
 	PyObject *pevsel;
 	struct perf_evsel *evsel;
 
@@ -979,7 +979,7 @@ static PyObject *pyrf_evlist__add(struct pyrf_evlist *pevlist,
 	return Py_BuildValue("i", evlist->nr_entries);
 }
 
-static struct perf_mmap *get_md(struct perf_evlist *evlist, int cpu)
+static struct perf_mmap *get_md(struct evlist *evlist, int cpu)
 {
 	int i;
 
@@ -996,7 +996,7 @@ static struct perf_mmap *get_md(struct perf_evlist *evlist, int cpu)
 static PyObject *pyrf_evlist__read_on_cpu(struct pyrf_evlist *pevlist,
 					  PyObject *args, PyObject *kwargs)
 {
-	struct perf_evlist *evlist = &pevlist->evlist;
+	struct evlist *evlist = &pevlist->evlist;
 	union perf_event *event;
 	int sample_id_all = 1, cpu;
 	static char *kwlist[] = { "cpu", "sample_id_all", NULL };
@@ -1049,7 +1049,7 @@ static PyObject *pyrf_evlist__read_on_cpu(struct pyrf_evlist *pevlist,
 static PyObject *pyrf_evlist__open(struct pyrf_evlist *pevlist,
 				   PyObject *args, PyObject *kwargs)
 {
-	struct perf_evlist *evlist = &pevlist->evlist;
+	struct evlist *evlist = &pevlist->evlist;
 	int group = 0;
 	static char *kwlist[] = { "group", NULL };
 
* Unmerged path tools/perf/util/record.c
diff --git a/tools/perf/util/s390-sample-raw.c b/tools/perf/util/s390-sample-raw.c
index 6650f599ed9c..00f8eef5ac72 100644
--- a/tools/perf/util/s390-sample-raw.c
+++ b/tools/perf/util/s390-sample-raw.c
@@ -200,7 +200,7 @@ static void s390_cpumcfdg_dump(struct perf_sample *sample)
  * its raw data.
  * The function is only invoked when the dump flag -D is set.
  */
-void perf_evlist__s390_sample_raw(struct perf_evlist *evlist, union perf_event *event,
+void perf_evlist__s390_sample_raw(struct evlist *evlist, union perf_event *event,
 				  struct perf_sample *sample)
 {
 	struct perf_evsel *ev_bc000;
diff --git a/tools/perf/util/sample-raw.c b/tools/perf/util/sample-raw.c
index c21e1311fb0f..e84bbe0e441a 100644
--- a/tools/perf/util/sample-raw.c
+++ b/tools/perf/util/sample-raw.c
@@ -9,7 +9,7 @@
  * Check platform the perf data file was created on and perform platform
  * specific interpretation.
  */
-void perf_evlist__init_trace_event_sample_raw(struct perf_evlist *evlist)
+void perf_evlist__init_trace_event_sample_raw(struct evlist *evlist)
 {
 	const char *arch_pf = perf_env__arch(evlist->env);
 
diff --git a/tools/perf/util/sample-raw.h b/tools/perf/util/sample-raw.h
index 95d445c87e93..afe1491a117e 100644
--- a/tools/perf/util/sample-raw.h
+++ b/tools/perf/util/sample-raw.h
@@ -2,13 +2,13 @@
 #ifndef __SAMPLE_RAW_H
 #define __SAMPLE_RAW_H 1
 
-struct perf_evlist;
+struct evlist;
 union perf_event;
 struct perf_sample;
 
-void perf_evlist__s390_sample_raw(struct perf_evlist *evlist,
+void perf_evlist__s390_sample_raw(struct evlist *evlist,
 				  union perf_event *event,
 				  struct perf_sample *sample);
 
-void perf_evlist__init_trace_event_sample_raw(struct perf_evlist *evlist);
+void perf_evlist__init_trace_event_sample_raw(struct evlist *evlist);
 #endif /* __PERF_EVLIST_H */
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index 8e7c741a2b51..9521957fe988 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -307,7 +307,7 @@ static int process_event_synth_tracing_data_stub(struct perf_session *session
 
 static int process_event_synth_attr_stub(struct perf_tool *tool __maybe_unused,
 					 union perf_event *event __maybe_unused,
-					 struct perf_evlist **pevlist
+					 struct evlist **pevlist
 					 __maybe_unused)
 {
 	dump_printf(": unhandled!\n");
@@ -316,7 +316,7 @@ static int process_event_synth_attr_stub(struct perf_tool *tool __maybe_unused,
 
 static int process_event_synth_event_update_stub(struct perf_tool *tool __maybe_unused,
 						 union perf_event *event __maybe_unused,
-						 struct perf_evlist **pevlist
+						 struct evlist **pevlist
 						 __maybe_unused)
 {
 	if (dump_trace)
@@ -1136,7 +1136,7 @@ static void stack_user__printf(struct stack_dump *dump)
 	       dump->size, dump->offset);
 }
 
-static void perf_evlist__print_tstamp(struct perf_evlist *evlist,
+static void perf_evlist__print_tstamp(struct evlist *evlist,
 				       union perf_event *event,
 				       struct perf_sample *sample)
 {
@@ -1185,7 +1185,7 @@ static void sample_read__printf(struct perf_sample *sample, u64 read_format)
 			sample->read.one.id, sample->read.one.value);
 }
 
-static void dump_event(struct perf_evlist *evlist, union perf_event *event,
+static void dump_event(struct evlist *evlist, union perf_event *event,
 		       u64 file_offset, struct perf_sample *sample)
 {
 	if (!dump_trace)
@@ -1303,7 +1303,7 @@ static struct machine *machines__find_for_cpumode(struct machines *machines,
 	return &machines->host;
 }
 
-static int deliver_sample_value(struct perf_evlist *evlist,
+static int deliver_sample_value(struct evlist *evlist,
 				struct perf_tool *tool,
 				union perf_event *event,
 				struct perf_sample *sample,
@@ -1333,7 +1333,7 @@ static int deliver_sample_value(struct perf_evlist *evlist,
 	return tool->sample(tool, event, sample, sid->evsel, machine);
 }
 
-static int deliver_sample_group(struct perf_evlist *evlist,
+static int deliver_sample_group(struct evlist *evlist,
 				struct perf_tool *tool,
 				union  perf_event *event,
 				struct perf_sample *sample,
@@ -1354,7 +1354,7 @@ static int deliver_sample_group(struct perf_evlist *evlist,
 }
 
 static int
- perf_evlist__deliver_sample(struct perf_evlist *evlist,
+ perf_evlist__deliver_sample(struct evlist *evlist,
 			     struct perf_tool *tool,
 			     union  perf_event *event,
 			     struct perf_sample *sample,
@@ -1379,7 +1379,7 @@ static int
 }
 
 static int machines__deliver_event(struct machines *machines,
-				   struct perf_evlist *evlist,
+				   struct evlist *evlist,
 				   union perf_event *event,
 				   struct perf_sample *sample,
 				   struct perf_tool *tool, u64 file_offset)
@@ -1560,7 +1560,7 @@ int perf_session__deliver_synth_event(struct perf_session *session,
 				      union perf_event *event,
 				      struct perf_sample *sample)
 {
-	struct perf_evlist *evlist = session->evlist;
+	struct evlist *evlist = session->evlist;
 	struct perf_tool *tool = session->tool;
 
 	events_stats__inc(&evlist->stats, event->header.type);
@@ -1638,7 +1638,7 @@ int perf_session__peek_event(struct perf_session *session, off_t file_offset,
 static s64 perf_session__process_event(struct perf_session *session,
 				       union perf_event *event, u64 file_offset)
 {
-	struct perf_evlist *evlist = session->evlist;
+	struct evlist *evlist = session->evlist;
 	struct perf_tool *tool = session->tool;
 	int ret;
 
@@ -2365,7 +2365,7 @@ int __perf_session__set_tracepoints_handlers(struct perf_session *session,
 int perf_event__process_id_index(struct perf_session *session,
 				 union perf_event *event)
 {
-	struct perf_evlist *evlist = session->evlist;
+	struct evlist *evlist = session->evlist;
 	struct id_index_event *ie = &event->id_index;
 	size_t i, nr, max_nr;
 
@@ -2401,7 +2401,7 @@ int perf_event__process_id_index(struct perf_session *session,
 
 int perf_event__synthesize_id_index(struct perf_tool *tool,
 				    perf_event__handler_t process,
-				    struct perf_evlist *evlist,
+				    struct evlist *evlist,
 				    struct machine *machine)
 {
 	union perf_event *ev;
diff --git a/tools/perf/util/session.h b/tools/perf/util/session.h
index 863dbad87849..64a28159c61c 100644
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@ -23,7 +23,7 @@ struct itrace_synth_opts;
 struct perf_session {
 	struct perf_header	header;
 	struct machines		machines;
-	struct perf_evlist	*evlist;
+	struct evlist	*evlist;
 	struct auxtrace		*auxtrace;
 	struct itrace_synth_opts *itrace_synth_opts;
 	struct list_head	auxtrace_index;
@@ -140,7 +140,7 @@ int perf_event__process_id_index(struct perf_session *session,
 
 int perf_event__synthesize_id_index(struct perf_tool *tool,
 				    perf_event__handler_t process,
-				    struct perf_evlist *evlist,
+				    struct evlist *evlist,
 				    struct machine *machine);
 
 #endif /* __PERF_SESSION_H */
* Unmerged path tools/perf/util/sort.c
diff --git a/tools/perf/util/sort.h b/tools/perf/util/sort.h
index a0f232151d6f..5e34676a98e8 100644
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@ -301,9 +301,9 @@ struct block_hist {
 extern struct sort_entry sort_thread;
 extern struct list_head hist_entry__sort_list;
 
-struct perf_evlist;
+struct evlist;
 struct tep_handle;
-int setup_sorting(struct perf_evlist *evlist);
+int setup_sorting(struct evlist *evlist);
 int setup_output_field(void);
 void reset_output_field(void);
 void sort__setup_elide(FILE *fp);
@@ -318,7 +318,7 @@ bool is_strict_order(const char *order);
 int hpp_dimension__add_output(unsigned col);
 void reset_dimensions(void);
 int sort_dimension__add(struct perf_hpp_list *list, const char *tok,
-			struct perf_evlist *evlist,
+			struct evlist *evlist,
 			int level);
 int output_field_add(struct perf_hpp_list *list, char *tok);
 int64_t
* Unmerged path tools/perf/util/stat-display.c
* Unmerged path tools/perf/util/stat-shadow.c
diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c
index da269d46c09f..eb35d37a2ed6 100644
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@ -168,7 +168,7 @@ static int perf_evsel__alloc_stats(struct perf_evsel *evsel, bool alloc_raw)
 	return 0;
 }
 
-int perf_evlist__alloc_stats(struct perf_evlist *evlist, bool alloc_raw)
+int perf_evlist__alloc_stats(struct evlist *evlist, bool alloc_raw)
 {
 	struct perf_evsel *evsel;
 
@@ -184,7 +184,7 @@ int perf_evlist__alloc_stats(struct perf_evlist *evlist, bool alloc_raw)
 	return -1;
 }
 
-void perf_evlist__free_stats(struct perf_evlist *evlist)
+void perf_evlist__free_stats(struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 
@@ -195,7 +195,7 @@ void perf_evlist__free_stats(struct perf_evlist *evlist)
 	}
 }
 
-void perf_evlist__reset_stats(struct perf_evlist *evlist)
+void perf_evlist__reset_stats(struct evlist *evlist)
 {
 	struct perf_evsel *evsel;
 
@@ -490,7 +490,7 @@ int create_perf_stat_counter(struct perf_evsel *evsel,
 
 int perf_stat_synthesize_config(struct perf_stat_config *config,
 				struct perf_tool *tool,
-				struct perf_evlist *evlist,
+				struct evlist *evlist,
 				perf_event__handler_t process,
 				bool attrs)
 {
* Unmerged path tools/perf/util/stat.h
* Unmerged path tools/perf/util/tool.h
* Unmerged path tools/perf/util/top.h
