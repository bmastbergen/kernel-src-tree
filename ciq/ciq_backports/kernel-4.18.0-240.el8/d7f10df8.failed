bpf: Replace zero-length array with flexible-array member

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Gustavo A. R. Silva <gustavo@embeddedor.com>
commit d7f10df86202273155a9d8f8553bc2ad28e0dd46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d7f10df8.failed

The current codebase makes use of the zero-length array language
extension to the C90 standard, but the preferred mechanism to declare
variable-length types such as these ones is a flexible array member[1][2],
introduced in C99:

struct foo {
        int stuff;
        struct boo array[];
};

By making use of the mechanism above, we will get a compiler warning
in case the flexible array does not occur last in the structure, which
will help us prevent some kind of undefined behavior bugs from being
inadvertently introduced[3] to the codebase from now on.

Also, notice that, dynamic memory allocations won't be affected by
this change:

"Flexible array members have incomplete type, and so the sizeof operator
may not be applied. As a quirk of the original implementation of
zero-length arrays, sizeof evaluates to zero."[1]

This issue was found with the help of Coccinelle.

[1] https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html
[2] https://github.com/KSPP/linux/issues/21
[3] commit 76497732932f ("cxgb3/l2t: Fix undefined behaviour")

	Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Song Liu <songliubraving@fb.com>
Link: https://lore.kernel.org/bpf/20200227001744.GA3317@embeddedor
(cherry picked from commit d7f10df86202273155a9d8f8553bc2ad28e0dd46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
#	kernel/bpf/bpf_struct_ops.c
diff --cc include/linux/bpf.h
index c1c99fdb999a,9aa33b8f3d55..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -549,8 -859,7 +549,12 @@@ struct bpf_prog_array_item 
  
  struct bpf_prog_array {
  	struct rcu_head rcu;
++<<<<<<< HEAD
 +	/* not protected by KABI, safe to replace */
 +	RH_KABI_REPLACE_UNSAFE(struct bpf_prog *progs[0],struct bpf_prog_array_item items[0])
++=======
+ 	struct bpf_prog_array_item items[];
++>>>>>>> d7f10df86202 (bpf: Replace zero-length array with flexible-array member)
  };
  
  struct bpf_prog_array *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
* Unmerged path kernel/bpf/bpf_struct_ops.c
diff --git a/include/linux/bpf-cgroup.h b/include/linux/bpf-cgroup.h
index 63c168a1495a..241c3a24cd67 100644
--- a/include/linux/bpf-cgroup.h
+++ b/include/linux/bpf-cgroup.h
@@ -38,7 +38,7 @@ struct bpf_cgroup_storage_map;
 
 struct bpf_storage_buffer {
 	struct rcu_head rcu;
-	char data[0];
+	char data[];
 };
 
 struct bpf_cgroup_storage {
* Unmerged path include/linux/bpf.h
diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index cdb4f9809fbc..0e8f68919c0f 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -73,7 +73,7 @@ struct bpf_insn {
 /* Key of an a BPF_MAP_TYPE_LPM_TRIE entry */
 struct bpf_lpm_trie_key {
 	__u32	prefixlen;	/* up to 32 for AF_INET, 128 for AF_INET6 */
-	__u8	data[0];	/* Arbitrary size */
+	__u8	data[];	/* Arbitrary size */
 };
 
 struct bpf_cgroup_storage_key {
* Unmerged path kernel/bpf/bpf_struct_ops.c
diff --git a/kernel/bpf/hashtab.c b/kernel/bpf/hashtab.c
index 88518c0f1d13..a84f136bcfbf 100644
--- a/kernel/bpf/hashtab.c
+++ b/kernel/bpf/hashtab.c
@@ -62,7 +62,7 @@ struct htab_elem {
 		struct bpf_lru_node lru_node;
 	};
 	u32 hash;
-	char key[0] __aligned(8);
+	char key[] __aligned(8);
 };
 
 static bool htab_lru_map_delete_node(void *arg, struct bpf_lru_node *node);
diff --git a/kernel/bpf/lpm_trie.c b/kernel/bpf/lpm_trie.c
index 36db02edf5f9..270fa84766a7 100644
--- a/kernel/bpf/lpm_trie.c
+++ b/kernel/bpf/lpm_trie.c
@@ -28,7 +28,7 @@ struct lpm_trie_node {
 	struct lpm_trie_node __rcu	*child[2];
 	u32				prefixlen;
 	u32				flags;
-	u8				data[0];
+	u8				data[];
 };
 
 struct lpm_trie {
