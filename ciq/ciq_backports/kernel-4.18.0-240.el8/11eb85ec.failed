Bluetooth: Fix race condition in hci_release_sock()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit 11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/11eb85ec.failed

Syzbot managed to trigger a use after free "KASAN: use-after-free Write
in hci_sock_bind".  I have reviewed the code manually and one possibly
cause I have found is that we are not holding lock_sock(sk) when we do
the hci_dev_put(hdev) in hci_sock_release().  My theory is that the bind
and the release are racing against each other which results in this use
after free.

	Reported-by: syzbot+eba992608adf3d796bcc@syzkaller.appspotmail.com
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
(cherry picked from commit 11eb85ec42dc8c7a7ec519b90ccf2eeae9409de8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/hci_sock.c
diff --cc net/bluetooth/hci_sock.c
index 304b8a1bd273,9c4a093f8960..000000000000
--- a/net/bluetooth/hci_sock.c
+++ b/net/bluetooth/hci_sock.c
@@@ -839,7 -839,7 +839,11 @@@ static int hci_sock_release(struct sock
  	if (!sk)
  		return 0;
  
++<<<<<<< HEAD
 +	hdev = hci_pi(sk)->hdev;
++=======
+ 	lock_sock(sk);
++>>>>>>> 11eb85ec42dc (Bluetooth: Fix race condition in hci_release_sock())
  
  	switch (hci_pi(sk)->channel) {
  	case HCI_CHANNEL_MONITOR:
* Unmerged path net/bluetooth/hci_sock.c
