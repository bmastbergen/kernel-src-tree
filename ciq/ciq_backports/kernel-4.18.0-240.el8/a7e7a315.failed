leds: triggers: add device attribute support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
commit a7e7a3156300a7e1982b03cc9cb8fb0c86434c49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a7e7a315.failed

As many triggers use device attributes, add support for these in
led_trigger_set which allows simplifying the drivers accordingly.

	Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
	Acked-by: Pavel Machek <pavel@ucw.cz>
	Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
(cherry picked from commit a7e7a3156300a7e1982b03cc9cb8fb0c86434c49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/leds/led-triggers.c
diff --cc drivers/leds/led-triggers.c
index 431123b048a2,3f3e8728d82c..000000000000
--- a/drivers/leds/led-triggers.c
+++ b/drivers/leds/led-triggers.c
@@@ -134,8 -136,20 +135,23 @@@ void led_trigger_set(struct led_classde
  		list_add_tail(&led_cdev->trig_list, &trig->led_cdevs);
  		write_unlock_irqrestore(&trig->leddev_list_lock, flags);
  		led_cdev->trigger = trig;
 -
  		if (trig->activate)
++<<<<<<< HEAD
 +			trig->activate(led_cdev);
++=======
+ 			ret = trig->activate(led_cdev);
+ 		else
+ 			ret = 0;
+ 
+ 		if (ret)
+ 			goto err_activate;
+ 
+ 		ret = device_add_groups(led_cdev->dev, trig->groups);
+ 		if (ret) {
+ 			dev_err(led_cdev->dev, "Failed to add trigger attributes\n");
+ 			goto err_add_groups;
+ 		}
++>>>>>>> a7e7a3156300 (leds: triggers: add device attribute support)
  	}
  
  	if (event) {
@@@ -146,6 -160,22 +162,25 @@@
  				"%s: Error sending uevent\n", __func__);
  		kfree(event);
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	return 0;
+ 
+ err_add_groups:
+ 
+ 	if (trig->deactivate)
+ 		trig->deactivate(led_cdev);
+ err_activate:
+ 
+ 	led_cdev->trigger = NULL;
+ 	write_lock_irqsave(&led_cdev->trigger->leddev_list_lock, flags);
+ 	list_del(&led_cdev->trig_list);
+ 	write_unlock_irqrestore(&led_cdev->trigger->leddev_list_lock, flags);
+ 	led_set_brightness(led_cdev, LED_OFF);
+ 
+ 	return ret;
++>>>>>>> a7e7a3156300 (leds: triggers: add device attribute support)
  }
  EXPORT_SYMBOL_GPL(led_trigger_set);
  
* Unmerged path drivers/leds/led-triggers.c
diff --git a/include/linux/leds.h b/include/linux/leds.h
index 2b160035c687..556b67962582 100644
--- a/include/linux/leds.h
+++ b/include/linux/leds.h
@@ -267,8 +267,19 @@ struct led_trigger {
 
 	/* Link to next registered trigger */
 	struct list_head  next_trig;
+
+	const struct attribute_group **groups;
 };
 
+/*
+ * Currently the attributes in struct led_trigger::groups are added directly to
+ * the LED device. As this might change in the future, the following
+ * macros abstract getting the LED device and its trigger_data from the dev
+ * parameter passed to the attribute accessor functions.
+ */
+#define led_trigger_get_led(dev)	((struct led_classdev *)dev_get_drvdata((dev)))
+#define led_trigger_get_drvdata(dev)	(led_get_trigger_data(led_trigger_get_led(dev)))
+
 ssize_t led_trigger_store(struct device *dev, struct device_attribute *attr,
 			const char *buf, size_t count);
 ssize_t led_trigger_show(struct device *dev, struct device_attribute *attr,
