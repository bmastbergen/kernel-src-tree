samples, bpf: Refactor perf_event user program with libbpf bpf_link

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Daniel T. Lee <danieltimlee@gmail.com>
commit aa5e2af660fc6e35b9518d68dd7e1bb736e9f7e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/aa5e2af6.failed

The bpf_program__attach of libbpf(using bpf_link) is much more intuitive
than the previous method using ioctl.

bpf_program__attach_perf_event manages the enable of perf_event and
attach of BPF programs to it, so there's no neeed to do this
directly with ioctl.

In addition, bpf_link provides consistency in the use of API because it
allows disable (detach, destroy) for multiple events to be treated as
one bpf_link__destroy. Also, bpf_link__destroy manages the close() of
perf_event fd.

This commit refactors samples that attach the bpf program to perf_event
by using libbbpf instead of ioctl. Also the bpf_load in the samples were
removed and migrated to use libbbpf API.

	Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20200321100424.1593964-3-danieltimlee@gmail.com
(cherry picked from commit aa5e2af660fc6e35b9518d68dd7e1bb736e9f7e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	samples/bpf/sampleip_user.c
#	samples/bpf/trace_event_user.c
diff --cc samples/bpf/sampleip_user.c
index 23b90a45c802,4372d2da2f9e..000000000000
--- a/samples/bpf/sampleip_user.c
+++ b/samples/bpf/sampleip_user.c
@@@ -16,10 -13,8 +16,14 @@@
  #include <linux/perf_event.h>
  #include <linux/ptrace.h>
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include <sys/ioctl.h>
 +#include "libbpf.h"
 +#include "bpf_load.h"
++=======
+ #include <bpf/bpf.h>
+ #include <bpf/libbpf.h>
++>>>>>>> aa5e2af660fc (samples, bpf: Refactor perf_event user program with libbpf bpf_link)
  #include "perf-sys.h"
  #include "trace_helpers.h"
  
diff --cc samples/bpf/trace_event_user.c
index ed8106d853ab,b6cd358d0418..000000000000
--- a/samples/bpf/trace_event_user.c
+++ b/samples/bpf/trace_event_user.c
@@@ -12,14 -9,10 +12,15 @@@
  #include <linux/perf_event.h>
  #include <linux/bpf.h>
  #include <signal.h>
- #include <assert.h>
  #include <errno.h>
  #include <sys/resource.h>
++<<<<<<< HEAD
 +#include "libbpf.h"
 +#include "bpf_load.h"
++=======
+ #include <bpf/bpf.h>
+ #include <bpf/libbpf.h>
++>>>>>>> aa5e2af660fc (samples, bpf: Refactor perf_event user program with libbpf bpf_link)
  #include "perf-sys.h"
  #include "trace_helpers.h"
  
diff --git a/samples/bpf/Makefile b/samples/bpf/Makefile
index 8c0995f25526..aca33e92bf6e 100644
--- a/samples/bpf/Makefile
+++ b/samples/bpf/Makefile
@@ -87,8 +87,8 @@ xdp2-objs := xdp1_user.o
 xdp_router_ipv4-objs := xdp_router_ipv4_user.o
 test_current_task_under_cgroup-objs := bpf_load.o $(CGROUP_HELPERS) \
 				       test_current_task_under_cgroup_user.o
-trace_event-objs := bpf_load.o trace_event_user.o $(TRACE_HELPERS)
-sampleip-objs := bpf_load.o sampleip_user.o $(TRACE_HELPERS)
+trace_event-objs := trace_event_user.o $(TRACE_HELPERS)
+sampleip-objs := sampleip_user.o $(TRACE_HELPERS)
 tc_l2_redirect-objs := bpf_load.o tc_l2_redirect_user.o
 lwt_len_hist-objs := bpf_load.o lwt_len_hist_user.o
 xdp_tx_iptunnel-objs := xdp_tx_iptunnel_user.o
* Unmerged path samples/bpf/sampleip_user.c
* Unmerged path samples/bpf/trace_event_user.c
