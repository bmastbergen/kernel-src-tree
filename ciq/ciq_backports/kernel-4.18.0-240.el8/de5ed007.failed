IB/mlx5: Fix implicit ODP race

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Artemy Kovalyov <artemyko@mellanox.com>
commit de5ed007a03d71daaa505f5daa4d3666530c7090
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/de5ed007.failed

Following race may occur because of the call_srcu and the placement of
the synchronize_srcu vs the xa_erase.

CPU0				   CPU1

mlx5_ib_free_implicit_mr:	   destroy_unused_implicit_child_mr:
 xa_erase(odp_mkeys)
 synchronize_srcu()
				    xa_lock(implicit_children)
				    if (still in xarray)
				       atomic_inc()
				       call_srcu()
				    xa_unlock(implicit_children)
 xa_erase(implicit_children):
   xa_lock(implicit_children)
   __xa_erase()
   xa_unlock(implicit_children)

 flush_workqueue()
				   [..]
				    free_implicit_child_mr_rcu:
				     (via call_srcu)
				      queue_work()

 WARN_ON(atomic_read())
				   [..]
				    free_implicit_child_mr_work:
				     (via wq)
				      free_implicit_child_mr()
 mlx5_mr_cache_invalidate()
				     mlx5_ib_update_xlt() <-- UMR QP fail
				     atomic_dec()

The wait_event() solves the race because it blocks until
free_implicit_child_mr_work() completes.

Fixes: 5256edcb98a1 ("RDMA/mlx5: Rework implicit ODP destroy")
Link: https://lore.kernel.org/r/20200227113918.94432-1-leon@kernel.org
	Signed-off-by: Artemy Kovalyov <artemyko@mellanox.com>
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit de5ed007a03d71daaa505f5daa4d3666530c7090)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/infiniband/hw/mlx5/odp.c
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index e85ec7570cd8,bb78142bca5e..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -618,12 -634,19 +618,24 @@@ struct mlx5_ib_mr 
  	u64			data_iova;
  	u64			pi_iova;
  
++<<<<<<< HEAD
 +	atomic_t		num_leaf_free;
 +	wait_queue_head_t       q_leaf_free;
 +	struct mlx5_async_work  cb_work;
 +	atomic_t		num_pending_prefetch;
++=======
+ 	/* For ODP and implicit */
+ 	atomic_t		num_deferred_work;
+ 	wait_queue_head_t       q_deferred_work;
+ 	struct xarray		implicit_children;
+ 	union {
+ 		struct rcu_head rcu;
+ 		struct list_head elm;
+ 		struct work_struct work;
+ 	} odp_destroy;
++>>>>>>> de5ed007a03d (IB/mlx5: Fix implicit ODP race)
  	struct ib_odp_counters	odp_stats;
  	bool			is_odp_implicit;
 -
 -	struct mlx5_async_work  cb_work;
  };
  
  static inline bool is_odp_mr(struct mlx5_ib_mr *mr)
diff --cc drivers/infiniband/hw/mlx5/odp.c
index 684ad1d7c7f5,bf50cd91f472..000000000000
--- a/drivers/infiniband/hw/mlx5/odp.c
+++ b/drivers/infiniband/hw/mlx5/odp.c
@@@ -238,18 -227,65 +238,24 @@@ static void mr_leaf_free_action(struct 
  				   MLX5_IB_UPD_XLT_INDIRECT |
  				   MLX5_IB_UPD_XLT_ATOMIC);
  		mutex_unlock(&odp_imr->umem_mutex);
 -		srcu_read_unlock(&mr->dev->odp_srcu, srcu_key);
 +		srcu_read_unlock(&mr->dev->mr_srcu, srcu_key);
  	}
 -
 -	dma_fence_odp_mr(mr);
 -
 -	mr->parent = NULL;
 +	ib_umem_release(&odp->umem);
  	mlx5_mr_cache_free(mr->dev, mr);
++<<<<<<< HEAD
 +
 +	if (atomic_dec_and_test(&imr->num_leaf_free))
 +		wake_up(&imr->q_leaf_free);
++=======
+ 	ib_umem_odp_release(odp);
+ 	if (atomic_dec_and_test(&imr->num_deferred_work))
+ 		wake_up(&imr->q_deferred_work);
++>>>>>>> de5ed007a03d (IB/mlx5: Fix implicit ODP race)
  }
  
 -static void free_implicit_child_mr_work(struct work_struct *work)
 -{
 -	struct mlx5_ib_mr *mr =
 -		container_of(work, struct mlx5_ib_mr, odp_destroy.work);
 -
 -	free_implicit_child_mr(mr, true);
 -}
 -
 -static void free_implicit_child_mr_rcu(struct rcu_head *head)
 -{
 -	struct mlx5_ib_mr *mr =
 -		container_of(head, struct mlx5_ib_mr, odp_destroy.rcu);
 -
 -	/* Freeing a MR is a sleeping operation, so bounce to a work queue */
 -	INIT_WORK(&mr->odp_destroy.work, free_implicit_child_mr_work);
 -	queue_work(system_unbound_wq, &mr->odp_destroy.work);
 -}
 -
 -static void destroy_unused_implicit_child_mr(struct mlx5_ib_mr *mr)
 -{
 -	struct ib_umem_odp *odp = to_ib_umem_odp(mr->umem);
 -	unsigned long idx = ib_umem_start(odp) >> MLX5_IMR_MTT_SHIFT;
 -	struct mlx5_ib_mr *imr = mr->parent;
 -
 -	xa_lock(&imr->implicit_children);
 -	/*
 -	 * This can race with mlx5_ib_free_implicit_mr(), the first one to
 -	 * reach the xa lock wins the race and destroys the MR.
 -	 */
 -	if (__xa_cmpxchg(&imr->implicit_children, idx, mr, NULL, GFP_ATOMIC) !=
 -	    mr)
 -		goto out_unlock;
 -
 -	atomic_inc(&imr->num_deferred_work);
 -	call_srcu(&mr->dev->odp_srcu, &mr->odp_destroy.rcu,
 -		  free_implicit_child_mr_rcu);
 -
 -out_unlock:
 -	xa_unlock(&imr->implicit_children);
 -}
 -
 -static bool mlx5_ib_invalidate_range(struct mmu_interval_notifier *mni,
 -				     const struct mmu_notifier_range *range,
 -				     unsigned long cur_seq)
 +void mlx5_ib_invalidate_range(struct ib_umem_odp *umem_odp, unsigned long start,
 +			      unsigned long end)
  {
 -	struct ib_umem_odp *umem_odp =
 -		container_of(mni, struct ib_umem_odp, notifier);
  	struct mlx5_ib_mr *mr;
  	const u64 umr_block_mask = (MLX5_UMR_MTT_ALIGNMENT /
  				    sizeof(struct mlx5_mtt)) - 1;
@@@ -556,103 -531,139 +562,166 @@@ struct mlx5_ib_mr *mlx5_ib_alloc_implic
  					     struct ib_udata *udata,
  					     int access_flags)
  {
 -	struct mlx5_ib_dev *dev = to_mdev(pd->ibpd.device);
 -	struct ib_umem_odp *umem_odp;
  	struct mlx5_ib_mr *imr;
 -	int err;
 +	struct ib_umem *umem;
  
 -	umem_odp = ib_umem_odp_alloc_implicit(&dev->ib_dev, access_flags);
 -	if (IS_ERR(umem_odp))
 -		return ERR_CAST(umem_odp);
 +	umem = ib_umem_get(udata, 0, 0, access_flags, 0);
 +	if (IS_ERR(umem))
 +		return ERR_CAST(umem);
  
 -	imr = mlx5_mr_cache_alloc(dev, MLX5_IMR_KSM_CACHE_ENTRY);
 +	imr = implicit_mr_alloc(&pd->ibpd, umem, 1, access_flags);
  	if (IS_ERR(imr)) {
 -		err = PTR_ERR(imr);
 -		goto out_umem;
 +		ib_umem_release(umem);
 +		return ERR_CAST(imr);
  	}
  
 -	imr->ibmr.pd = &pd->ibpd;
 -	imr->access_flags = access_flags;
 -	imr->mmkey.iova = 0;
 -	imr->umem = &umem_odp->umem;
 -	imr->ibmr.lkey = imr->mmkey.key;
 -	imr->ibmr.rkey = imr->mmkey.key;
 -	imr->umem = &umem_odp->umem;
 +	imr->umem = umem;
 +	init_waitqueue_head(&imr->q_leaf_free);
 +	atomic_set(&imr->num_leaf_free, 0);
 +	atomic_set(&imr->num_pending_prefetch, 0);
 +
  	imr->is_odp_implicit = true;
++<<<<<<< HEAD
++=======
+ 	atomic_set(&imr->num_deferred_work, 0);
+ 	init_waitqueue_head(&imr->q_deferred_work);
+ 	xa_init(&imr->implicit_children);
++>>>>>>> de5ed007a03d (IB/mlx5: Fix implicit ODP race)
  
 -	err = mlx5_ib_update_xlt(imr, 0,
 -				 mlx5_imr_ksm_entries,
 -				 MLX5_KSM_PAGE_SHIFT,
 -				 MLX5_IB_UPD_XLT_INDIRECT |
 -				 MLX5_IB_UPD_XLT_ZAP |
 -				 MLX5_IB_UPD_XLT_ENABLE);
 -	if (err)
 -		goto out_mr;
 +	return imr;
 +}
  
 -	err = xa_err(xa_store(&dev->odp_mkeys, mlx5_base_mkey(imr->mmkey.key),
 -			      &imr->mmkey, GFP_KERNEL));
 -	if (err)
 -		goto out_mr;
 +static int mr_leaf_free(struct ib_umem_odp *umem_odp, u64 start, u64 end,
 +			void *cookie)
 +{
 +	struct mlx5_ib_mr *mr = umem_odp->private, *imr = cookie;
  
 -	mlx5_ib_dbg(dev, "key %x mr %p\n", imr->mmkey.key, imr);
 -	return imr;
 -out_mr:
 -	mlx5_ib_err(dev, "Failed to register MKEY %d\n", err);
 -	mlx5_mr_cache_free(dev, imr);
 -out_umem:
 -	ib_umem_odp_release(umem_odp);
 -	return ERR_PTR(err);
 +	if (mr->parent != imr)
 +		return 0;
 +
 +	ib_umem_odp_unmap_dma_pages(umem_odp, ib_umem_start(umem_odp),
 +				    ib_umem_end(umem_odp));
 +
 +	if (umem_odp->dying)
 +		return 0;
 +
 +	WRITE_ONCE(umem_odp->dying, 1);
 +	atomic_inc(&imr->num_leaf_free);
 +	schedule_work(&umem_odp->work);
 +
 +	return 0;
  }
  
  void mlx5_ib_free_implicit_mr(struct mlx5_ib_mr *imr)
  {
 -	struct ib_umem_odp *odp_imr = to_ib_umem_odp(imr->umem);
 -	struct mlx5_ib_dev *dev = imr->dev;
 -	struct list_head destroy_list;
 -	struct mlx5_ib_mr *mtt;
 -	struct mlx5_ib_mr *tmp;
 -	unsigned long idx;
 +	struct ib_ucontext_per_mm *per_mm = mr_to_per_mm(imr);
  
 -	INIT_LIST_HEAD(&destroy_list);
 +	down_read(&per_mm->umem_rwsem);
 +	rbt_ib_umem_for_each_in_range(&per_mm->umem_tree, 0, ULLONG_MAX,
 +				      mr_leaf_free, imr);
 +	up_read(&per_mm->umem_rwsem);
  
++<<<<<<< HEAD
 +	wait_event(imr->q_leaf_free, !atomic_read(&imr->num_leaf_free));
++=======
+ 	xa_erase(&dev->odp_mkeys, mlx5_base_mkey(imr->mmkey.key));
+ 	/*
+ 	 * This stops the SRCU protected page fault path from touching either
+ 	 * the imr or any children. The page fault path can only reach the
+ 	 * children xarray via the imr.
+ 	 */
+ 	synchronize_srcu(&dev->odp_srcu);
+ 
+ 	xa_lock(&imr->implicit_children);
+ 	xa_for_each (&imr->implicit_children, idx, mtt) {
+ 		__xa_erase(&imr->implicit_children, idx);
+ 		list_add(&mtt->odp_destroy.elm, &destroy_list);
+ 	}
+ 	xa_unlock(&imr->implicit_children);
+ 
+ 	/*
+ 	 * num_deferred_work can only be incremented inside the odp_srcu, or
+ 	 * under xa_lock while the child is in the xarray. Thus at this point
+ 	 * it is only decreasing, and all work holding it is now on the wq.
+ 	 */
+ 	wait_event(imr->q_deferred_work, !atomic_read(&imr->num_deferred_work));
+ 
+ 	/*
+ 	 * Fence the imr before we destroy the children. This allows us to
+ 	 * skip updating the XLT of the imr during destroy of the child mkey
+ 	 * the imr points to.
+ 	 */
+ 	mlx5_mr_cache_invalidate(imr);
+ 
+ 	list_for_each_entry_safe (mtt, tmp, &destroy_list, odp_destroy.elm)
+ 		free_implicit_child_mr(mtt, false);
+ 
+ 	mlx5_mr_cache_free(dev, imr);
+ 	ib_umem_odp_release(odp_imr);
+ }
+ 
+ /**
+  * mlx5_ib_fence_odp_mr - Stop all access to the ODP MR
+  * @mr: to fence
+  *
+  * On return no parallel threads will be touching this MR and no DMA will be
+  * active.
+  */
+ void mlx5_ib_fence_odp_mr(struct mlx5_ib_mr *mr)
+ {
+ 	/* Prevent new page faults and prefetch requests from succeeding */
+ 	xa_erase(&mr->dev->odp_mkeys, mlx5_base_mkey(mr->mmkey.key));
+ 
+ 	/* Wait for all running page-fault handlers to finish. */
+ 	synchronize_srcu(&mr->dev->odp_srcu);
+ 
+ 	wait_event(mr->q_deferred_work, !atomic_read(&mr->num_deferred_work));
+ 
+ 	dma_fence_odp_mr(mr);
++>>>>>>> de5ed007a03d (IB/mlx5: Fix implicit ODP race)
  }
  
 +#define MLX5_PF_FLAGS_PREFETCH  BIT(0)
  #define MLX5_PF_FLAGS_DOWNGRADE BIT(1)
 -static int pagefault_real_mr(struct mlx5_ib_mr *mr, struct ib_umem_odp *odp,
 -			     u64 user_va, size_t bcnt, u32 *bytes_mapped,
 -			     u32 flags)
 +static int pagefault_mr(struct mlx5_ib_dev *dev, struct mlx5_ib_mr *mr,
 +			u64 io_virt, size_t bcnt, u32 *bytes_mapped,
 +			u32 flags)
  {
 -	int page_shift, ret, np;
 +	struct ib_umem_odp *odp_mr = to_ib_umem_odp(mr->umem);
  	bool downgrade = flags & MLX5_PF_FLAGS_DOWNGRADE;
 -	unsigned long current_seq;
 +	bool prefetch = flags & MLX5_PF_FLAGS_PREFETCH;
 +	int npages = 0, current_seq, page_shift, ret, np;
  	u64 access_mask;
 -	u64 start_idx;
 +	u64 start_idx, page_mask;
 +	struct ib_umem_odp *odp;
 +	size_t size;
 +
 +	if (!odp_mr->page_list) {
 +		odp = implicit_mr_get_data(mr, io_virt, bcnt);
 +
 +		if (IS_ERR(odp))
 +			return PTR_ERR(odp);
 +		mr = odp->private;
 +	} else {
 +		odp = odp_mr;
 +	}
 +
 +next_mr:
 +	size = min_t(size_t, bcnt, ib_umem_end(odp) - io_virt);
  
  	page_shift = odp->page_shift;
 -	start_idx = (user_va - ib_umem_start(odp)) >> page_shift;
 +	page_mask = ~(BIT(page_shift) - 1);
 +	start_idx = (io_virt - (mr->mmkey.iova & page_mask)) >> page_shift;
  	access_mask = ODP_READ_ALLOWED_BIT;
  
 +	if (prefetch && !downgrade && !odp->umem.writable) {
 +		/* prefetch with write-access must
 +		 * be supported by the MR
 +		 */
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +
  	if (odp->umem.writable && !downgrade)
  		access_mask |= ODP_WRITE_ALLOWED_BIT;
  
@@@ -1636,75 -1702,128 +1705,166 @@@ int mlx5_ib_odp_init(void
  
  struct prefetch_mr_work {
  	struct work_struct work;
 +	struct ib_pd *pd;
  	u32 pf_flags;
  	u32 num_sge;
 -	struct {
 -		u64 io_virt;
 -		struct mlx5_ib_mr *mr;
 -		size_t length;
 -	} frags[];
 +	struct ib_sge sg_list[0];
  };
  
 -static void destroy_prefetch_work(struct prefetch_mr_work *work)
 +static void num_pending_prefetch_dec(struct mlx5_ib_dev *dev,
 +				     struct ib_sge *sg_list, u32 num_sge,
 +				     u32 from)
  {
  	u32 i;
++<<<<<<< HEAD
++=======
+ 
+ 	for (i = 0; i < work->num_sge; ++i)
+ 		if (atomic_dec_and_test(&work->frags[i].mr->num_deferred_work))
+ 			wake_up(&work->frags[i].mr->q_deferred_work);
+ 	kvfree(work);
+ }
+ 
+ static struct mlx5_ib_mr *
+ get_prefetchable_mr(struct ib_pd *pd, enum ib_uverbs_advise_mr_advice advice,
+ 		    u32 lkey)
+ {
+ 	struct mlx5_ib_dev *dev = to_mdev(pd->device);
+ 	struct mlx5_core_mkey *mmkey;
+ 	struct ib_umem_odp *odp;
+ 	struct mlx5_ib_mr *mr;
+ 
+ 	lockdep_assert_held(&dev->odp_srcu);
+ 
+ 	mmkey = xa_load(&dev->odp_mkeys, mlx5_base_mkey(lkey));
+ 	if (!mmkey || mmkey->key != lkey || mmkey->type != MLX5_MKEY_MR)
+ 		return NULL;
+ 
+ 	mr = container_of(mmkey, struct mlx5_ib_mr, mmkey);
+ 
+ 	if (mr->ibmr.pd != pd)
+ 		return NULL;
+ 
+ 	odp = to_ib_umem_odp(mr->umem);
+ 
+ 	/* prefetch with write-access must be supported by the MR */
+ 	if (advice == IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_WRITE &&
+ 	    !odp->umem.writable)
+ 		return NULL;
+ 
+ 	return mr;
+ }
+ 
+ static void mlx5_ib_prefetch_mr_work(struct work_struct *w)
+ {
+ 	struct prefetch_mr_work *work =
+ 		container_of(w, struct prefetch_mr_work, work);
+ 	u32 bytes_mapped = 0;
+ 	u32 i;
+ 
+ 	for (i = 0; i < work->num_sge; ++i)
+ 		pagefault_mr(work->frags[i].mr, work->frags[i].io_virt,
+ 			     work->frags[i].length, &bytes_mapped,
+ 			     work->pf_flags);
+ 
+ 	destroy_prefetch_work(work);
+ }
+ 
+ static bool init_prefetch_work(struct ib_pd *pd,
+ 			       enum ib_uverbs_advise_mr_advice advice,
+ 			       u32 pf_flags, struct prefetch_mr_work *work,
+ 			       struct ib_sge *sg_list, u32 num_sge)
+ {
+ 	u32 i;
+ 
+ 	INIT_WORK(&work->work, mlx5_ib_prefetch_mr_work);
+ 	work->pf_flags = pf_flags;
+ 
+ 	for (i = 0; i < num_sge; ++i) {
+ 		work->frags[i].io_virt = sg_list[i].addr;
+ 		work->frags[i].length = sg_list[i].length;
+ 		work->frags[i].mr =
+ 			get_prefetchable_mr(pd, advice, sg_list[i].lkey);
+ 		if (!work->frags[i].mr) {
+ 			work->num_sge = i - 1;
+ 			if (i)
+ 				destroy_prefetch_work(work);
+ 			return false;
+ 		}
+ 
+ 		/* Keep the MR pointer will valid outside the SRCU */
+ 		atomic_inc(&work->frags[i].mr->num_deferred_work);
+ 	}
+ 	work->num_sge = num_sge;
+ 	return true;
+ }
+ 
+ static int mlx5_ib_prefetch_sg_list(struct ib_pd *pd,
+ 				    enum ib_uverbs_advise_mr_advice advice,
+ 				    u32 pf_flags, struct ib_sge *sg_list,
+ 				    u32 num_sge)
+ {
+ 	struct mlx5_ib_dev *dev = to_mdev(pd->device);
+ 	u32 bytes_mapped = 0;
++>>>>>>> de5ed007a03d (IB/mlx5: Fix implicit ODP race)
  	int srcu_key;
 -	int ret = 0;
 +
 +	srcu_key = srcu_read_lock(&dev->mr_srcu);
 +
 +	for (i = from; i < num_sge; ++i) {
 +		struct mlx5_core_mkey *mmkey;
 +		struct mlx5_ib_mr *mr;
 +
 +		mmkey = xa_load(&dev->mdev->priv.mkey_table,
 +				mlx5_base_mkey(sg_list[i].lkey));
 +		mr = container_of(mmkey, struct mlx5_ib_mr, mmkey);
 +		atomic_dec(&mr->num_pending_prefetch);
 +	}
 +
 +	srcu_read_unlock(&dev->mr_srcu, srcu_key);
 +}
 +
 +static bool num_pending_prefetch_inc(struct ib_pd *pd,
 +				     struct ib_sge *sg_list, u32 num_sge)
 +{
 +	struct mlx5_ib_dev *dev = to_mdev(pd->device);
 +	bool ret = true;
  	u32 i;
  
 -	srcu_key = srcu_read_lock(&dev->odp_srcu);
  	for (i = 0; i < num_sge; ++i) {
 +		struct mlx5_core_mkey *mmkey;
  		struct mlx5_ib_mr *mr;
  
 -		mr = get_prefetchable_mr(pd, advice, sg_list[i].lkey);
 -		if (!mr) {
 -			ret = -ENOENT;
 -			goto out;
 +		mmkey = xa_load(&dev->mdev->priv.mkey_table,
 +				mlx5_base_mkey(sg_list[i].lkey));
 +		if (!mmkey || mmkey->key != sg_list[i].lkey) {
 +			ret = false;
 +			break;
  		}
 -		ret = pagefault_mr(mr, sg_list[i].addr, sg_list[i].length,
 -				   &bytes_mapped, pf_flags);
 -		if (ret < 0)
 -			goto out;
 +
 +		if (mmkey->type != MLX5_MKEY_MR) {
 +			ret = false;
 +			break;
 +		}
 +
 +		mr = container_of(mmkey, struct mlx5_ib_mr, mmkey);
 +
 +		if (mr->ibmr.pd != pd) {
 +			ret = false;
 +			break;
 +		}
 +
 +		if (!mr->live) {
 +			ret = false;
 +			break;
 +		}
 +
 +		atomic_inc(&mr->num_pending_prefetch);
  	}
 -	ret = 0;
  
 -out:
 -	srcu_read_unlock(&dev->odp_srcu, srcu_key);
 +	if (!ret)
 +		num_pending_prefetch_dec(dev, sg_list, i, 0);
 +
  	return ret;
  }
  
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/infiniband/hw/mlx5/odp.c
