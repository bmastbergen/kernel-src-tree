veth: ignore peer tx_dropped when counting local rx_dropped

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiang Lidong <jianglidong3@jd.com>
commit e25d5dbcffae62c9a7fa03517dfa4b8e67670e3d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e25d5dbc.failed

When local NET_RX backlog is full due to traffic overrun,
peer veth tx_dropped counter increases. At that time, list
local veth stats, rx_dropped has double value of peer
tx_dropped, even bigger than transmit packets by peer.

In NET_RX softirq process, if any packet drop case happens,
it increases dev's rx_dropped counter and returns NET_RX_DROP.

At veth tx side, it records any error returned from peer netif_rx
into local dev tx_dropped counter.

In veth get stats process, it puts local dev rx_dropped and
peer dev tx_dropped into together as local rx_drpped value.
So that it shows double value of real dropped packets number in
this case.

This patch ignores peer tx_dropped when counting local rx_dropped,
since peer tx_dropped is duplicated to local rx_dropped at most cases.

	Signed-off-by: Jiang Lidong <jianglidong3@jd.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e25d5dbcffae62c9a7fa03517dfa4b8e67670e3d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/veth.c
diff --cc drivers/net/veth.c
index 013947869d96,d4cbb9e8c63f..000000000000
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@@ -348,9 -328,9 +348,15 @@@ static void veth_get_stats64(struct net
  	rcu_read_lock();
  	peer = rcu_dereference(priv->peer);
  	if (peer) {
++<<<<<<< HEAD
 +		tot->rx_dropped += veth_stats_tx(&tx, peer);
 +		tot->rx_bytes += tx.bytes;
 +		tot->rx_packets += tx.packets;
++=======
+ 		veth_stats_tx(peer, &packets, &bytes);
+ 		tot->rx_bytes += bytes;
+ 		tot->rx_packets += packets;
++>>>>>>> e25d5dbcffae (veth: ignore peer tx_dropped when counting local rx_dropped)
  
  		veth_stats_rx(&rx, peer);
  		tot->tx_bytes += rx.xdp_bytes;
* Unmerged path drivers/net/veth.c
