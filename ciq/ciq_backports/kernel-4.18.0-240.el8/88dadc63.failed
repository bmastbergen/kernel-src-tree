selftests/bpf: test_progs: add test__join_cgroup helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Stanislav Fomichev <sdf@google.com>
commit 88dadc632763bdccddf99d8454aa3a7932605f00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/88dadc63.failed

test__join_cgroup() combines the following operations that usually
go hand in hand and returns cgroup fd:

  * setup cgroup environment (make sure cgroupfs is mounted)
  * mkdir cgroup
  * join cgroup

It also marks a test as a "cgroup cleanup needed" and removes cgroup
state after the test is done.

	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 88dadc632763bdccddf99d8454aa3a7932605f00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_progs.c
#	tools/testing/selftests/bpf/test_progs.h
diff --cc tools/testing/selftests/bpf/test_progs.c
index e2939d383bbe,af75a1c7a458..000000000000
--- a/tools/testing/selftests/bpf/test_progs.c
+++ b/tools/testing/selftests/bpf/test_progs.c
@@@ -1,10 -1,8 +1,11 @@@
 -// SPDX-License-Identifier: GPL-2.0-only
  /* Copyright (c) 2017 Facebook
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of version 2 of the GNU General Public
 + * License as published by the Free Software Foundation.
   */
  #include "test_progs.h"
+ #include "cgroup_helpers.h"
  #include "bpf_rlimit.h"
  #include <argp.h>
  #include <string.h>
@@@ -124,6 -119,44 +126,47 @@@ void test__skip(void
  	env.test->skip_cnt++;
  }
  
++<<<<<<< HEAD
++=======
+ void test__fail(void)
+ {
+ 	env.test->error_cnt++;
+ }
+ 
+ int test__join_cgroup(const char *path)
+ {
+ 	int fd;
+ 
+ 	if (!env.test->need_cgroup_cleanup) {
+ 		if (setup_cgroup_environment()) {
+ 			fprintf(stderr,
+ 				"#%d %s: Failed to setup cgroup environment\n",
+ 				env.test->test_num, env.test->test_name);
+ 			return -1;
+ 		}
+ 
+ 		env.test->need_cgroup_cleanup = true;
+ 	}
+ 
+ 	fd = create_and_get_cgroup(path);
+ 	if (fd < 0) {
+ 		fprintf(stderr,
+ 			"#%d %s: Failed to create cgroup '%s' (errno=%d)\n",
+ 			env.test->test_num, env.test->test_name, path, errno);
+ 		return fd;
+ 	}
+ 
+ 	if (join_cgroup(path)) {
+ 		fprintf(stderr,
+ 			"#%d %s: Failed to join cgroup '%s' (errno=%d)\n",
+ 			env.test->test_num, env.test->test_name, path, errno);
+ 		return -1;
+ 	}
+ 
+ 	return fd;
+ }
+ 
++>>>>>>> 88dadc632763 (selftests/bpf: test_progs: add test__join_cgroup helper)
  struct ipv4_packet pkt_v4 = {
  	.eth.h_proto = __bpf_constant_htons(ETH_P_IP),
  	.iph.ihl = 5,
diff --cc tools/testing/selftests/bpf/test_progs.h
index 9defd35cb6c0,e518bd5da3e2..000000000000
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@@ -74,6 -70,8 +74,11 @@@ extern struct test_env env
  extern void test__force_log();
  extern bool test__start_subtest(const char *name);
  extern void test__skip(void);
++<<<<<<< HEAD
++=======
+ extern void test__fail(void);
+ extern int test__join_cgroup(const char *path);
++>>>>>>> 88dadc632763 (selftests/bpf: test_progs: add test__join_cgroup helper)
  
  #define MAGIC_BYTES 123
  
diff --git a/tools/testing/selftests/bpf/Makefile b/tools/testing/selftests/bpf/Makefile
index 4b1fee746c30..0a5265c4f419 100644
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@ -111,7 +111,7 @@ $(OUTPUT)/test_socket_cookie: cgroup_helpers.c
 $(OUTPUT)/test_sockmap: cgroup_helpers.c
 $(OUTPUT)/test_tcpbpf_user: cgroup_helpers.c
 $(OUTPUT)/test_tcpnotify_user: cgroup_helpers.c trace_helpers.c
-$(OUTPUT)/test_progs: trace_helpers.c
+$(OUTPUT)/test_progs: cgroup_helpers.c trace_helpers.c
 $(OUTPUT)/get_cgroup_id_user: cgroup_helpers.c
 $(OUTPUT)/test_cgroup_storage: cgroup_helpers.c
 $(OUTPUT)/test_netcnt: cgroup_helpers.c
@@ -207,7 +207,7 @@ $(ALU32_BUILD_DIR)/test_progs_32: test_progs.c $(OUTPUT)/libbpf.a\
 						| $(ALU32_BUILD_DIR)
 	$(CC) $(TEST_PROGS_CFLAGS) $(CFLAGS) \
 		-o $(ALU32_BUILD_DIR)/test_progs_32 \
-		test_progs.c test_stub.c trace_helpers.c prog_tests/*.c \
+		test_progs.c test_stub.c cgroup_helpers.c trace_helpers.c prog_tests/*.c \
 		$(OUTPUT)/libbpf.a $(LDLIBS)
 
 $(ALU32_BUILD_DIR)/test_progs_32: $(PROG_TESTS_H)
* Unmerged path tools/testing/selftests/bpf/test_progs.c
* Unmerged path tools/testing/selftests/bpf/test_progs.h
