drm/i915: Use engine wa list for Wa_1607090982

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Mika Kuoppala <mika.kuoppala@linux.intel.com>
commit 3873fd1a43c70bab5049a1fc7f128a65779d1575
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3873fd1a.failed

This is in mcr range of register, thus we can only verify
it through mmio. Use engine wa list with mcr range verification
skip.

Fixes: 0db1a5f8706a ("drm/i915: Implement Wa_1607090982")
	Cc: Chris Wilson <chris@chris-wilson.co.uk>
	Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
	Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
Link: https://patchwork.freedesktop.org/patch/msgid/20200212165707.11143-1-mika.kuoppala@linux.intel.com
(cherry picked from commit 3873fd1a43c70bab5049a1fc7f128a65779d1575)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_workarounds.c
diff --cc drivers/gpu/drm/i915/gt/intel_workarounds.c
index 8f75882ded3f,ba86511f1ef9..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_workarounds.c
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds.c
@@@ -581,6 -577,29 +581,32 @@@ static void icl_ctx_workarounds_init(st
  			  GEN11_SAMPLER_ENABLE_HEADLESS_MSG);
  }
  
++<<<<<<< HEAD
++=======
+ static void tgl_ctx_workarounds_init(struct intel_engine_cs *engine,
+ 				     struct i915_wa_list *wal)
+ {
+ 	u32 val;
+ 
+ 	/* Wa_1409142259:tgl */
+ 	WA_SET_BIT_MASKED(GEN11_COMMON_SLICE_CHICKEN3,
+ 			  GEN12_DISABLE_CPS_AWARE_COLOR_PIPE);
+ 
+ 	/* Wa_1604555607:tgl */
+ 	val = intel_uncore_read(engine->uncore, FF_MODE2);
+ 	val &= ~FF_MODE2_TDS_TIMER_MASK;
+ 	val |= FF_MODE2_TDS_TIMER_128;
+ 	/*
+ 	 * FIXME: FF_MODE2 register is not readable till TGL B0. We can
+ 	 * enable verification of WA from the later steppings, which enables
+ 	 * the read of FF_MODE2.
+ 	 */
+ 	wa_add(wal, FF_MODE2, FF_MODE2_TDS_TIMER_MASK, val,
+ 	       IS_TGL_REVID(engine->i915, TGL_REVID_A0, TGL_REVID_A0) ? 0 :
+ 			    FF_MODE2_TDS_TIMER_MASK);
+ }
+ 
++>>>>>>> 3873fd1a43c7 (drm/i915: Use engine wa list for Wa_1607090982)
  static void
  __intel_engine_init_ctx_wa(struct intel_engine_cs *engine,
  			   struct i915_wa_list *wal,
@@@ -1231,6 -1326,44 +1257,47 @@@ rcs_engine_wa_init(struct intel_engine_
  {
  	struct drm_i915_private *i915 = engine->i915;
  
++<<<<<<< HEAD
++=======
+ 	if (IS_TGL_REVID(i915, TGL_REVID_A0, TGL_REVID_A0)) {
+ 		/* Wa_1606700617:tgl */
+ 		wa_masked_en(wal,
+ 			     GEN9_CS_DEBUG_MODE1,
+ 			     FF_DOP_CLOCK_GATE_DISABLE);
+ 
+ 		/* Wa_1607138336:tgl */
+ 		wa_write_or(wal,
+ 			    GEN9_CTX_PREEMPT_REG,
+ 			    GEN12_DISABLE_POSH_BUSY_FF_DOP_CG);
+ 
+ 		/* Wa_1607030317:tgl */
+ 		/* Wa_1607186500:tgl */
+ 		/* Wa_1607297627:tgl */
+ 		wa_masked_en(wal,
+ 			     GEN6_RC_SLEEP_PSMI_CONTROL,
+ 			     GEN12_WAIT_FOR_EVENT_POWER_DOWN_DISABLE |
+ 			     GEN8_RC_SEMA_IDLE_MSG_DISABLE);
+ 
+ 		/*
+ 		 * Wa_1606679103:tgl
+ 		 * (see also Wa_1606682166:icl)
+ 		 */
+ 		wa_write_or(wal,
+ 			    GEN7_SARCHKMD,
+ 			    GEN7_DISABLE_SAMPLER_PREFETCH);
+ 
+ 		/* Wa_1407928979:tgl */
+ 		wa_write_or(wal,
+ 			    GEN7_FF_THREAD_MODE,
+ 			    GEN12_FF_TESSELATION_DOP_GATE_DISABLE);
+ 
+ 		/* Wa_1606931601:tgl */
+ 		wa_masked_en(wal,
+ 			     GEN7_ROW_CHICKEN2,
+ 			     GEN12_DISABLE_EARLY_READ);
+ 	}
+ 
++>>>>>>> 3873fd1a43c7 (drm/i915: Use engine wa list for Wa_1607090982)
  	if (IS_GEN(i915, 11)) {
  		/* This is not an Wa. Enable for better image quality */
  		wa_masked_en(wal,
* Unmerged path drivers/gpu/drm/i915/gt/intel_workarounds.c
