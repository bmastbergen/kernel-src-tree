perf report/top: Make 'e' visible in the help and make it toggle showing callchains

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit e6d6abfc447a65e949c1e883e66e1450903d2fbd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e6d6abfc.failed

The 'e' and 'c' hotkeys were present for a long time, but not documented
in the help window, change 'e' to be a toggle so that it gets consistent
with other toggles like '+' and document it in the help window.

Keep 'c' as is for people used to it but don't document, as it is easier
to just use 'e' to show/hide all the callchains for a top level
histogram entry.

	Reviewed-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-pmyi5x34stlqmyu81rci94x9@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e6d6abfc447a65e949c1e883e66e1450903d2fbd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/browsers/hists.c
diff --cc tools/perf/ui/browsers/hists.c
index 3386768d57cb,f36dee499320..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -665,10 -677,81 +670,85 @@@ static int hist_browser__title(struct h
  	return browser->title ? browser->title(browser, bf, size) : 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int hist_browser__handle_hotkey(struct hist_browser *browser, bool warn_lost_event, char *title, int key)
+ {
+ 	switch (key) {
+ 	case K_TIMER: {
+ 		struct hist_browser_timer *hbt = browser->hbt;
+ 		u64 nr_entries;
+ 
+ 		WARN_ON_ONCE(!hbt);
+ 
+ 		if (hbt)
+ 			hbt->timer(hbt->arg);
+ 
+ 		if (hist_browser__has_filter(browser) || symbol_conf.report_hierarchy)
+ 			hist_browser__update_nr_entries(browser);
+ 
+ 		nr_entries = hist_browser__nr_entries(browser);
+ 		ui_browser__update_nr_entries(&browser->b, nr_entries);
+ 
+ 		if (warn_lost_event &&
+ 		    (browser->hists->stats.nr_lost_warned !=
+ 		    browser->hists->stats.nr_events[PERF_RECORD_LOST])) {
+ 			browser->hists->stats.nr_lost_warned =
+ 				browser->hists->stats.nr_events[PERF_RECORD_LOST];
+ 			ui_browser__warn_lost_events(&browser->b);
+ 		}
+ 
+ 		hist_browser__title(browser, title, sizeof(title));
+ 		ui_browser__show_title(&browser->b, title);
+ 		break;
+ 	}
+ 	case 'D': { /* Debug */
+ 		struct hist_entry *h = rb_entry(browser->b.top, struct hist_entry, rb_node);
+ 		static int seq;
+ 
+ 		ui_helpline__pop();
+ 		ui_helpline__fpush("%d: nr_ent=(%d,%d), etl: %d, rows=%d, idx=%d, fve: idx=%d, row_off=%d, nrows=%d",
+ 				   seq++, browser->b.nr_entries, browser->hists->nr_entries,
+ 				   browser->b.extra_title_lines, browser->b.rows,
+ 				   browser->b.index, browser->b.top_idx, h->row_offset, h->nr_rows);
+ 	}
+ 		break;
+ 	case 'C':
+ 		/* Collapse the whole world. */
+ 		hist_browser__set_folding(browser, false);
+ 		break;
+ 	case 'c':
+ 		/* Collapse the selected entry. */
+ 		hist_browser__set_folding_selected(browser, false);
+ 		break;
+ 	case 'E':
+ 		/* Expand the whole world. */
+ 		hist_browser__set_folding(browser, true);
+ 		break;
+ 	case 'e':
+ 		/* Expand the selected entry. */
+ 		hist_browser__set_folding_selected(browser, !hist_browser__he_selection_unfolded(browser));
+ 		break;
+ 	case 'H':
+ 		browser->show_headers = !browser->show_headers;
+ 		hist_browser__update_rows(browser);
+ 		break;
+ 	case '+':
+ 		if (hist_browser__toggle_fold(browser))
+ 			break;
+ 		/* fall thru */
+ 	default:
+ 		return -1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> e6d6abfc447a (perf report/top: Make 'e' visible in the help and make it toggle showing callchains)
  int hist_browser__run(struct hist_browser *browser, const char *help,
 -		      bool warn_lost_event, int key)
 +		      bool warn_lost_event)
  {
 +	int key;
  	char title[160];
  	struct hist_browser_timer *hbt = browser->hbt;
  	int delay_secs = hbt ? hbt->refresh : 0;
* Unmerged path tools/perf/ui/browsers/hists.c
