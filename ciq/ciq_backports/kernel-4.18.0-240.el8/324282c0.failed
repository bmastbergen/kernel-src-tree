fibmap: Reject negative block numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Carlos Maiolino <cmaiolino@redhat.com>
commit 324282c0252a44a97d628813e30ea7258940d469
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/324282c0.failed

FIBMAP receives an integer from userspace which is then implicitly converted
into sector_t to be passed to bmap(). No check is made to ensure userspace
didn't send a negative block number, which can end up in an underflow, and
returning to userspace a corrupted block address.

As a side-effect, the underflow caused by a negative block here, will
trigger the WARN() in iomap_bmap_actor(), which is how this issue was
first discovered.

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Carlos Maiolino <cmaiolino@redhat.com>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 324282c0252a44a97d628813e30ea7258940d469)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ioctl.c
diff --cc fs/ioctl.c
index 812061ba667a,0be9bee9ff8f..000000000000
--- a/fs/ioctl.c
+++ b/fs/ioctl.c
@@@ -54,19 -54,32 +54,42 @@@ EXPORT_SYMBOL(vfs_ioctl)
  
  static int ioctl_fibmap(struct file *filp, int __user *p)
  {
 -	struct inode *inode = file_inode(filp);
 -	int error, ur_block;
 -	sector_t block;
 +	struct address_space *mapping = filp->f_mapping;
 +	int res, block;
  
 +	/* do we support this mess? */
 +	if (!mapping->a_ops->bmap)
 +		return -EINVAL;
  	if (!capable(CAP_SYS_RAWIO))
  		return -EPERM;
++<<<<<<< HEAD
 +	res = get_user(block, p);
 +	if (res)
 +		return res;
 +	res = mapping->a_ops->bmap(mapping, block);
 +	return put_user(res, p);
++=======
+ 
+ 	error = get_user(ur_block, p);
+ 	if (error)
+ 		return error;
+ 
+ 	if (ur_block < 0)
+ 		return -EINVAL;
+ 
+ 	block = ur_block;
+ 	error = bmap(inode, &block);
+ 
+ 	if (error)
+ 		ur_block = 0;
+ 	else
+ 		ur_block = block;
+ 
+ 	if (put_user(ur_block, p))
+ 		error = -EFAULT;
+ 
+ 	return error;
++>>>>>>> 324282c0252a (fibmap: Reject negative block numbers)
  }
  
  /**
* Unmerged path fs/ioctl.c
