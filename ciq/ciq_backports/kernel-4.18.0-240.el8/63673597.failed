net/smc: protect smc ib device initialization

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Karsten Graul <kgraul@linux.ibm.com>
commit 63673597cca93ef6fa12414933da01d5806547af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/63673597.failed

Before an smc ib device is used the first time for an smc link it is
lazily initialized. When there are 2 active link groups and a new ib
device is brought online then it might happen that 2 link creations run
in parallel and enter smc_ib_setup_per_ibdev(). Both allocate new send
and receive completion queues on the device, but only one set of them
keeps assigned and the other leaks.
Fix that by protecting the setup and cleanup code using a mutex.

	Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
Fixes: f3c1deddb21c ("net/smc: separate function for link initialization")
	Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 63673597cca93ef6fa12414933da01d5806547af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_ib.c
diff --cc net/smc/smc_ib.c
index 3d87e3a22e90,1c314dbdc7fa..000000000000
--- a/net/smc/smc_ib.c
+++ b/net/smc/smc_ib.c
@@@ -565,9 -575,10 +574,14 @@@ static void smc_ib_add_dev(struct ib_de
  	INIT_WORK(&smcibdev->port_event_work, smc_ib_port_event_work);
  	atomic_set(&smcibdev->lnk_cnt, 0);
  	init_waitqueue_head(&smcibdev->lnks_deleted);
++<<<<<<< HEAD
 +	spin_lock(&smc_ib_devices.lock);
++=======
+ 	mutex_init(&smcibdev->mutex);
+ 	mutex_lock(&smc_ib_devices.mutex);
++>>>>>>> 63673597cca9 (net/smc: protect smc ib device initialization)
  	list_add_tail(&smcibdev->list, &smc_ib_devices.list);
 -	mutex_unlock(&smc_ib_devices.mutex);
 +	spin_unlock(&smc_ib_devices.lock);
  	ib_set_client_data(ibdev, &smc_ib_client, smcibdev);
  	INIT_IB_EVENT_HANDLER(&smcibdev->event_handler, smcibdev->ibdev,
  			      smc_ib_global_event_handler);
* Unmerged path net/smc/smc_ib.c
diff --git a/net/smc/smc_ib.h b/net/smc/smc_ib.h
index e6a696ae15f3..f10fddc73b23 100644
--- a/net/smc/smc_ib.h
+++ b/net/smc/smc_ib.h
@@ -51,6 +51,7 @@ struct smc_ib_device {				/* ib-device infos for smc */
 	DECLARE_BITMAP(ports_going_away, SMC_MAX_PORTS);
 	atomic_t		lnk_cnt;	/* number of links on ibdev */
 	wait_queue_head_t	lnks_deleted;	/* wait 4 removal of all links*/
+	struct mutex		mutex;		/* protect dev setup+cleanup */
 };
 
 struct smc_buf_desc;
