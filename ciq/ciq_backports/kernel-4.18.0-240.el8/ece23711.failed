net: Properly unlink GRO packets on overflow.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] Properly unlink GRO packets on overflow. (Ivan Vecera) [1805302]
Rebuild_FUZZ: 94.12%
commit-author David S. Miller <davem@davemloft.net>
commit ece23711dd956cd5053c9cb03e9fe0668f9c8894
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ece23711.failed

Just like with normal GRO processing, we have to initialize
skb->next to NULL when we unlink overflow packets from the
GRO hash lists.

Fixes: d4546c2509b1 ("net: Convert GRO SKB handling to list_head.")
	Reported-by: Oleksandr Natalenko <oleksandr@natalenko.name>
	Tested-by: Oleksandr Natalenko <oleksandr@natalenko.name>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ece23711dd956cd5053c9cb03e9fe0668f9c8894)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index cd8bd05e0222,77d43ae2a7bb..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -5279,18 -5442,35 +5279,40 @@@ static void gro_pull_from_frag0(struct 
  	}
  }
  
++<<<<<<< HEAD
 +INDIRECT_CALLABLE_DECLARE(struct sk_buff **inet_gro_receive(struct sk_buff **,
 +							    struct sk_buff *));
 +INDIRECT_CALLABLE_DECLARE(struct sk_buff **ipv6_gro_receive(struct sk_buff **,
 +							    struct sk_buff *));
++=======
+ static void gro_flush_oldest(struct list_head *head)
+ {
+ 	struct sk_buff *oldest;
+ 
+ 	oldest = list_last_entry(head, struct sk_buff, list);
+ 
+ 	/* We are called with head length >= MAX_GRO_SKBS, so this is
+ 	 * impossible.
+ 	 */
+ 	if (WARN_ON_ONCE(!oldest))
+ 		return;
+ 
+ 	/* Do not adjust napi->gro_hash[].count, caller is adding a new
+ 	 * SKB to the chain.
+ 	 */
+ 	skb_list_del_init(oldest);
+ 	napi_gro_complete(oldest);
+ }
+ 
++>>>>>>> ece23711dd95 (net: Properly unlink GRO packets on overflow.)
  static enum gro_result dev_gro_receive(struct napi_struct *napi, struct sk_buff *skb)
  {
 -	u32 hash = skb_get_hash_raw(skb) & (GRO_HASH_BUCKETS - 1);
 -	struct list_head *head = &offload_base;
 +	struct sk_buff **pp = NULL;
  	struct packet_offload *ptype;
  	__be16 type = skb->protocol;
 -	struct list_head *gro_head;
 -	struct sk_buff *pp = NULL;
 -	enum gro_result ret;
 +	struct list_head *head = &offload_base;
  	int same_flow;
 +	enum gro_result ret;
  	int grow;
  
  	if (netif_elide_gro(skb->dev))
* Unmerged path net/core/dev.c
