net: devlink: use NL_SET_ERR_MSG_MOD instead of NL_SET_ERR_MSG

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] devlink: use NL_SET_ERR_MSG_MOD instead of NL_SET_ERR_MSG (Petr Oros) [1830928]
Rebuild_FUZZ: 95.80%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 054eae82537efb9f111b5ebc2db001d7ef07dc2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/054eae82.failed

The rest of the devlink code sets the extack message using
NL_SET_ERR_MSG_MOD. Change the existing appearances of NL_SET_ERR_MSG
to NL_SET_ERR_MSG_MOD.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 054eae82537efb9f111b5ebc2db001d7ef07dc2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/devlink.c
diff --cc net/core/devlink.c
index a66f1417ec7a,5b968d2040a5..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -2688,6 -2700,72 +2688,75 @@@ devlink_resources_validate(struct devli
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static struct net *devlink_netns_get(struct sk_buff *skb,
+ 				     struct genl_info *info)
+ {
+ 	struct nlattr *netns_pid_attr = info->attrs[DEVLINK_ATTR_NETNS_PID];
+ 	struct nlattr *netns_fd_attr = info->attrs[DEVLINK_ATTR_NETNS_FD];
+ 	struct nlattr *netns_id_attr = info->attrs[DEVLINK_ATTR_NETNS_ID];
+ 	struct net *net;
+ 
+ 	if (!!netns_pid_attr + !!netns_fd_attr + !!netns_id_attr > 1) {
+ 		NL_SET_ERR_MSG_MOD(info->extack, "multiple netns identifying attributes specified");
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	if (netns_pid_attr) {
+ 		net = get_net_ns_by_pid(nla_get_u32(netns_pid_attr));
+ 	} else if (netns_fd_attr) {
+ 		net = get_net_ns_by_fd(nla_get_u32(netns_fd_attr));
+ 	} else if (netns_id_attr) {
+ 		net = get_net_ns_by_id(sock_net(skb->sk),
+ 				       nla_get_u32(netns_id_attr));
+ 		if (!net)
+ 			net = ERR_PTR(-EINVAL);
+ 	} else {
+ 		WARN_ON(1);
+ 		net = ERR_PTR(-EINVAL);
+ 	}
+ 	if (IS_ERR(net)) {
+ 		NL_SET_ERR_MSG_MOD(info->extack, "Unknown network namespace");
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 	if (!netlink_ns_capable(skb, net->user_ns, CAP_NET_ADMIN)) {
+ 		put_net(net);
+ 		return ERR_PTR(-EPERM);
+ 	}
+ 	return net;
+ }
+ 
+ static void devlink_param_notify(struct devlink *devlink,
+ 				 unsigned int port_index,
+ 				 struct devlink_param_item *param_item,
+ 				 enum devlink_command cmd);
+ 
+ static void devlink_reload_netns_change(struct devlink *devlink,
+ 					struct net *dest_net)
+ {
+ 	struct devlink_param_item *param_item;
+ 
+ 	/* Userspace needs to be notified about devlink objects
+ 	 * removed from original and entering new network namespace.
+ 	 * The rest of the devlink objects are re-created during
+ 	 * reload process so the notifications are generated separatelly.
+ 	 */
+ 
+ 	list_for_each_entry(param_item, &devlink->param_list, list)
+ 		devlink_param_notify(devlink, 0, param_item,
+ 				     DEVLINK_CMD_PARAM_DEL);
+ 	devlink_notify(devlink, DEVLINK_CMD_DEL);
+ 
+ 	__devlink_net_set(devlink, dest_net);
+ 
+ 	devlink_notify(devlink, DEVLINK_CMD_NEW);
+ 	list_for_each_entry(param_item, &devlink->param_list, list)
+ 		devlink_param_notify(devlink, 0, param_item,
+ 				     DEVLINK_CMD_PARAM_NEW);
+ }
+ 
++>>>>>>> 054eae82537e (net: devlink: use NL_SET_ERR_MSG_MOD instead of NL_SET_ERR_MSG)
  static bool devlink_reload_supported(struct devlink *devlink)
  {
  	return devlink->ops->reload_down && devlink->ops->reload_up;
* Unmerged path net/core/devlink.c
