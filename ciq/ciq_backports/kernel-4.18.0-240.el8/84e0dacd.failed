context_tracking: Rename context_tracking_is_cpu_enabled() to context_tracking_enabled_this_cpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Frederic Weisbecker <frederic@kernel.org>
commit 84e0dacd0c347e9ee2531052013babd84683245f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/84e0dacd.failed

Standardize the naming on top of the context_tracking_enabled_*() base.
Also make it clear we are checking the context tracking state of the
*current* CPU with this function. We'll need to add an API to check that
state on remote CPUs as well, so we must disambiguate the naming.

	Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Jacek Anaszewski <jacek.anaszewski@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Pavel Machek <pavel@ucw.cz>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rafael J . Wysocki <rjw@rjwysocki.net>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Viresh Kumar <viresh.kumar@linaro.org>
	Cc: Wanpeng Li <wanpengli@tencent.com>
	Cc: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
Link: https://lkml.kernel.org/r/20191016025700.31277-7-frederic@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 84e0dacd0c347e9ee2531052013babd84683245f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/context_tracking_state.h
diff --cc include/linux/context_tracking_state.h
index f128dc3be0df,08f125f6b31b..000000000000
--- a/include/linux/context_tracking_state.h
+++ b/include/linux/context_tracking_state.h
@@@ -23,15 -23,15 +23,15 @@@ struct context_tracking 
  };
  
  #ifdef CONFIG_CONTEXT_TRACKING
 -extern struct static_key_false context_tracking_key;
 +extern struct static_key_false context_tracking_enabled;
  DECLARE_PER_CPU(struct context_tracking, context_tracking);
  
 -static inline bool context_tracking_enabled(void)
 +static inline bool context_tracking_is_enabled(void)
  {
 -	return static_branch_unlikely(&context_tracking_key);
 +	return static_branch_unlikely(&context_tracking_enabled);
  }
  
- static inline bool context_tracking_cpu_is_enabled(void)
+ static inline bool context_tracking_enabled_this_cpu(void)
  {
  	return __this_cpu_read(context_tracking.active);
  }
@@@ -42,9 -42,8 +42,14 @@@ static inline bool context_tracking_in_
  }
  #else
  static inline bool context_tracking_in_user(void) { return false; }
++<<<<<<< HEAD
 +static inline bool context_tracking_active(void) { return false; }
 +static inline bool context_tracking_is_enabled(void) { return false; }
 +static inline bool context_tracking_cpu_is_enabled(void) { return false; }
++=======
+ static inline bool context_tracking_enabled(void) { return false; }
+ static inline bool context_tracking_enabled_this_cpu(void) { return false; }
++>>>>>>> 84e0dacd0c34 (context_tracking: Rename context_tracking_is_cpu_enabled() to context_tracking_enabled_this_cpu())
  #endif /* CONFIG_CONTEXT_TRACKING */
  
  #endif
diff --git a/include/linux/context_tracking.h b/include/linux/context_tracking.h
index d05609ad329d..94cd1080ac49 100644
--- a/include/linux/context_tracking.h
+++ b/include/linux/context_tracking.h
@@ -118,7 +118,7 @@ static inline void guest_enter_irqoff(void)
 	 * one time slice). Lets treat guest mode as quiescent state, just like
 	 * we do with user-mode execution.
 	 */
-	if (!context_tracking_cpu_is_enabled())
+	if (!context_tracking_enabled_this_cpu())
 		rcu_virt_note_context_switch(smp_processor_id());
 }
 
* Unmerged path include/linux/context_tracking_state.h
diff --git a/include/linux/vtime.h b/include/linux/vtime.h
index a26ed10a4eac..a5779c4c12b4 100644
--- a/include/linux/vtime.h
+++ b/include/linux/vtime.h
@@ -30,7 +30,7 @@ static inline bool vtime_accounting_enabled(void)
 static inline bool vtime_accounting_cpu_enabled(void)
 {
 	if (vtime_accounting_enabled()) {
-		if (context_tracking_cpu_is_enabled())
+		if (context_tracking_enabled_this_cpu())
 			return true;
 	}
 
