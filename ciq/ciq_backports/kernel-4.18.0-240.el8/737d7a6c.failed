bnxt_en: Call recovery done after reset is successfully done

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Vikas Gupta <vikas.gupta@broadcom.com>
commit 737d7a6c55964955604b9de398dac3791bab5a64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/737d7a6c.failed

Return EINPROGRESS to devlink health reporter recover as we are not yet
done and call devlink_health_reporter_recovery_done once reset is
successfully completed from workqueue context.

	Signed-off-by: Vikas Gupta <vikas.gupta@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 737d7a6c55964955604b9de398dac3791bab5a64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index c998d2e4eab0,39d4309b17fb..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -10839,8 -10822,8 +10839,13 @@@ static void bnxt_fw_reset_task(struct w
  		smp_mb__before_atomic();
  		clear_bit(BNXT_STATE_IN_FW_RESET, &bp->state);
  		bnxt_ulp_start(bp, rc);
++<<<<<<< HEAD
 +		if (!rc)
 +			bnxt_reenable_sriov(bp);
++=======
+ 		bnxt_dl_health_recovery_done(bp);
+ 		bnxt_dl_health_status_update(bp, true);
++>>>>>>> 737d7a6c5596 (bnxt_en: Call recovery done after reset is successfully done)
  		rtnl_unlock();
  		break;
  	}
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index 8abbd141a3c7,0c3d224637b9..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -238,6 -242,36 +238,39 @@@ void bnxt_devlink_health_report(struct 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void bnxt_dl_health_status_update(struct bnxt *bp, bool healthy)
+ {
+ 	struct bnxt_fw_health *health = bp->fw_health;
+ 	u8 state;
+ 
+ 	if (healthy)
+ 		state = DEVLINK_HEALTH_REPORTER_STATE_HEALTHY;
+ 	else
+ 		state = DEVLINK_HEALTH_REPORTER_STATE_ERROR;
+ 
+ 	if (health->fatal)
+ 		devlink_health_reporter_state_update(health->fw_fatal_reporter,
+ 						     state);
+ 	else
+ 		devlink_health_reporter_state_update(health->fw_reset_reporter,
+ 						     state);
+ 
+ 	health->fatal = false;
+ }
+ 
+ void bnxt_dl_health_recovery_done(struct bnxt *bp)
+ {
+ 	struct bnxt_fw_health *hlth = bp->fw_health;
+ 
+ 	if (hlth->fatal)
+ 		devlink_health_reporter_recovery_done(hlth->fw_fatal_reporter);
+ 	else
+ 		devlink_health_reporter_recovery_done(hlth->fw_reset_reporter);
+ }
+ 
++>>>>>>> 737d7a6c5596 (bnxt_en: Call recovery done after reset is successfully done)
  static const struct devlink_ops bnxt_dl_ops = {
  #ifdef CONFIG_BNXT_SRIOV
  	.eswitch_mode_set = bnxt_dl_eswitch_mode_set,
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
index 689c47ab2155,08aaa4441c78..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
@@@ -57,6 -57,8 +57,11 @@@ struct bnxt_dl_nvm_param 
  };
  
  void bnxt_devlink_health_report(struct bnxt *bp, unsigned long event);
++<<<<<<< HEAD
++=======
+ void bnxt_dl_health_status_update(struct bnxt *bp, bool healthy);
+ void bnxt_dl_health_recovery_done(struct bnxt *bp);
++>>>>>>> 737d7a6c5596 (bnxt_en: Call recovery done after reset is successfully done)
  void bnxt_dl_fw_reporters_create(struct bnxt *bp);
  void bnxt_dl_fw_reporters_destroy(struct bnxt *bp, bool all);
  int bnxt_dl_register(struct bnxt *bp);
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.h
