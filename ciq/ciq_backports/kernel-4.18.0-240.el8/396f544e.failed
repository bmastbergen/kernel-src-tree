selftests/bpf: Fix BPF_KRETPROBE macro and use it in attach_probe test

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 396f544ed5e5a9c40de5663b774f643644cba059
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/396f544e.failed

For kretprobes, there is no point in capturing input arguments from pt_regs,
as they are going to be, most probably, clobbered by the time probed kernel
function returns. So switch BPF_KRETPROBE to accept zero or one argument
(optional return result).

Fixes: ac065870d928 ("selftests/bpf: Add BPF_PROG, BPF_KPROBE, and BPF_KRETPROBE macros")
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200229231112.1240137-4-andriin@fb.com
(cherry picked from commit 396f544ed5e5a9c40de5663b774f643644cba059)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/progs/test_attach_probe.c
diff --cc tools/testing/selftests/bpf/progs/test_attach_probe.c
index 534621e38906,38ed8c3bf922..000000000000
--- a/tools/testing/selftests/bpf/progs/test_attach_probe.c
+++ b/tools/testing/selftests/bpf/progs/test_attach_probe.c
@@@ -3,30 -3,25 +3,39 @@@
  
  #include <linux/ptrace.h>
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include "bpf_trace_helpers.h"
++>>>>>>> 396f544ed5e5 (selftests/bpf: Fix BPF_KRETPROBE macro and use it in attach_probe test)
  
 -int kprobe_res = 0;
 -int kretprobe_res = 0;
 -int uprobe_res = 0;
 -int uretprobe_res = 0;
 +struct {
 +	__uint(type, BPF_MAP_TYPE_ARRAY);
 +	__uint(max_entries, 4);
 +	__type(key, int);
 +	__type(value, int);
 +} results_map SEC(".maps");
  
  SEC("kprobe/sys_nanosleep")
 -int handle_kprobe(struct pt_regs *ctx)
 +int handle_sys_nanosleep_entry(struct pt_regs *ctx)
  {
 -	kprobe_res = 1;
 +	const int key = 0, value = 1;
 +
 +	bpf_map_update_elem(&results_map, &key, &value, 0);
  	return 0;
  }
  
  SEC("kretprobe/sys_nanosleep")
++<<<<<<< HEAD
 +int handle_sys_getpid_return(struct pt_regs *ctx)
++=======
+ int BPF_KRETPROBE(handle_kretprobe)
++>>>>>>> 396f544ed5e5 (selftests/bpf: Fix BPF_KRETPROBE macro and use it in attach_probe test)
  {
 -	kretprobe_res = 2;
 +	const int key = 1, value = 2;
 +
 +	bpf_map_update_elem(&results_map, &key, &value, 0);
  	return 0;
  }
  
diff --git a/tools/testing/selftests/bpf/bpf_trace_helpers.h b/tools/testing/selftests/bpf/bpf_trace_helpers.h
index 1719cabc97b7..9857ca89d27d 100644
--- a/tools/testing/selftests/bpf/bpf_trace_helpers.h
+++ b/tools/testing/selftests/bpf/bpf_trace_helpers.h
@@ -96,15 +96,16 @@ typeof(name(0)) name(struct pt_regs *ctx)				    \
 static __always_inline typeof(name(0)) ____##name(struct pt_regs *ctx, ##args)
 
 #define ___bpf_kretprobe_args0() ctx
-#define ___bpf_kretprobe_argsN(x, args...) \
-	___bpf_kprobe_args(args), (void *)PT_REGS_RET(ctx)
+#define ___bpf_kretprobe_args1(x) \
+	___bpf_kretprobe_args0(), (void *)PT_REGS_RET(ctx)
 #define ___bpf_kretprobe_args(args...) \
-	___bpf_apply(___bpf_kretprobe_args, ___bpf_empty(args))(args)
+	___bpf_apply(___bpf_kretprobe_args, ___bpf_narg(args))(args)
 
 /*
- * BPF_KRETPROBE is similar to BPF_KPROBE, except, in addition to listing all
- * input kprobe arguments, one last extra argument has to be specified, which
- * captures kprobe return value.
+ * BPF_KRETPROBE is similar to BPF_KPROBE, except, it only provides optional
+ * return value (in addition to `struct pt_regs *ctx`), but no input
+ * arguments, because they will be clobbered by the time probed function
+ * returns.
  */
 #define BPF_KRETPROBE(name, args...)					    \
 name(struct pt_regs *ctx);						    \
* Unmerged path tools/testing/selftests/bpf/progs/test_attach_probe.c
diff --git a/tools/testing/selftests/bpf/progs/test_overhead.c b/tools/testing/selftests/bpf/progs/test_overhead.c
index 48748297b860..ffe62c300628 100644
--- a/tools/testing/selftests/bpf/progs/test_overhead.c
+++ b/tools/testing/selftests/bpf/progs/test_overhead.c
@@ -17,11 +17,9 @@ int BPF_KPROBE(prog1, struct task_struct *tsk, const char *buf, bool exec)
 }
 
 SEC("kretprobe/__set_task_comm")
-int BPF_KRETPROBE(prog2,
-		  struct task_struct *tsk, const char *buf, bool exec,
-		  int ret)
+int BPF_KRETPROBE(prog2, int ret)
 {
-	return !PT_REGS_PARM1(ctx) && ret;
+	return ret;
 }
 
 SEC("raw_tp/task_rename")
