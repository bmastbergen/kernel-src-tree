device-dax: Add a driver for "hmem" devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Dan Williams <dan.j.williams@intel.com>
commit a6c7f4c6aea5f4ca6056b06cec7ebd79f8c23e33
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a6c7f4c6.failed

Platform firmware like EFI/ACPI may publish "hmem" platform devices.
Such a device is a performance differentiated memory range likely
reserved for an application specific use case. The driver gives access
to 100% of the capacity via a device-dax mmap instance by default.

However, if over-subscription and other kernel memory management is
desired the resulting dax device can be assigned to the core-mm via the
kmem driver.

This consumes "hmem" devices the producer of "hmem" devices is saved for
a follow-on patch so that it can reference the new CONFIG_DEV_DAX_HMEM
symbol to gate performing the enumeration work.

	Reported-by: kbuild test robot <lkp@intel.com>
	Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
	Acked-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a6c7f4c6aea5f4ca6056b06cec7ebd79f8c23e33)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dax/Kconfig
#	drivers/dax/Makefile
#	include/linux/memregion.h
diff --cc drivers/dax/Kconfig
index 6fc96f03920e,3b6c06f07326..000000000000
--- a/drivers/dax/Kconfig
+++ b/drivers/dax/Kconfig
@@@ -32,9 -32,42 +32,45 @@@ config DEV_DAX_PME
  
  	  Say M if unsure
  
++<<<<<<< HEAD
++=======
+ config DEV_DAX_HMEM
+ 	tristate "HMEM DAX: direct access to 'specific purpose' memory"
+ 	depends on EFI_SOFT_RESERVE
+ 	default DEV_DAX
+ 	help
+ 	  EFI 2.8 platforms, and others, may advertise 'specific purpose'
+ 	  memory. For example, a high bandwidth memory pool. The
+ 	  indication from platform firmware is meant to reserve the
+ 	  memory from typical usage by default. This driver creates
+ 	  device-dax instances for these memory ranges, and that also
+ 	  enables the possibility to assign them to the DEV_DAX_KMEM
+ 	  driver to override the reservation and add them to kernel
+ 	  "System RAM" pool.
+ 
+ 	  Say M if unsure.
+ 
+ config DEV_DAX_KMEM
+ 	tristate "KMEM DAX: volatile-use of persistent memory"
+ 	default DEV_DAX
+ 	depends on DEV_DAX
+ 	depends on MEMORY_HOTPLUG # for add_memory() and friends
+ 	help
+ 	  Support access to persistent, or other performance
+ 	  differentiated memory as if it were System RAM. This allows
+ 	  easier use of persistent memory by unmodified applications, or
+ 	  adds core kernel memory services to heterogeneous memory types
+ 	  (HMEM) marked "reserved" by platform firmware.
+ 
+ 	  To use this feature, a DAX device must be unbound from the
+ 	  device_dax driver and bound to this kmem driver on each boot.
+ 
+ 	  Say N if unsure.
+ 
++>>>>>>> a6c7f4c6aea5 (device-dax: Add a driver for "hmem" devices)
  config DEV_DAX_PMEM_COMPAT
  	tristate "PMEM DAX: support the deprecated /sys/class/dax interface"
 -	depends on m && DEV_DAX_PMEM=m
 +	depends on DEV_DAX_PMEM
  	default DEV_DAX_PMEM
  	help
  	  Older versions of the libdaxctl library expect to find all
diff --cc drivers/dax/Makefile
index 233bbffccbe6,80065b38b3c4..000000000000
--- a/drivers/dax/Makefile
+++ b/drivers/dax/Makefile
@@@ -1,6 -1,8 +1,11 @@@
  # SPDX-License-Identifier: GPL-2.0
  obj-$(CONFIG_DAX) += dax.o
  obj-$(CONFIG_DEV_DAX) += device_dax.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_DEV_DAX_KMEM) += kmem.o
+ obj-$(CONFIG_DEV_DAX_HMEM) += dax_hmem.o
++>>>>>>> a6c7f4c6aea5 (device-dax: Add a driver for "hmem" devices)
  
  dax-y := super.o
  dax-y += bus.o
* Unmerged path include/linux/memregion.h
* Unmerged path drivers/dax/Kconfig
* Unmerged path drivers/dax/Makefile
diff --git a/drivers/dax/hmem.c b/drivers/dax/hmem.c
new file mode 100644
index 000000000000..fe7214daf62e
--- /dev/null
+++ b/drivers/dax/hmem.c
@@ -0,0 +1,56 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/platform_device.h>
+#include <linux/memregion.h>
+#include <linux/module.h>
+#include <linux/pfn_t.h>
+#include "bus.h"
+
+static int dax_hmem_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct dev_pagemap pgmap = { };
+	struct dax_region *dax_region;
+	struct memregion_info *mri;
+	struct dev_dax *dev_dax;
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -ENOMEM;
+
+	mri = dev->platform_data;
+	memcpy(&pgmap.res, res, sizeof(*res));
+
+	dax_region = alloc_dax_region(dev, pdev->id, res, mri->target_node,
+			PMD_SIZE, PFN_DEV|PFN_MAP);
+	if (!dax_region)
+		return -ENOMEM;
+
+	dev_dax = devm_create_dev_dax(dax_region, 0, &pgmap);
+	if (IS_ERR(dev_dax))
+		return PTR_ERR(dev_dax);
+
+	/* child dev_dax instances now own the lifetime of the dax_region */
+	dax_region_put(dax_region);
+	return 0;
+}
+
+static int dax_hmem_remove(struct platform_device *pdev)
+{
+	/* devm handles teardown */
+	return 0;
+}
+
+static struct platform_driver dax_hmem_driver = {
+	.probe = dax_hmem_probe,
+	.remove = dax_hmem_remove,
+	.driver = {
+		.name = "hmem",
+	},
+};
+
+module_platform_driver(dax_hmem_driver);
+
+MODULE_ALIAS("platform:hmem*");
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Intel Corporation");
* Unmerged path include/linux/memregion.h
