x86/speculation: PR_SPEC_FORCE_DISABLE enforcement for indirect branches.

jira LE-1907
cve CVE-2020-10768
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [x86] x86/speculation: PR_SPEC_FORCE_DISABLE enforcement for indirect branches (Waiman Long) [1847396 1846029] {CVE-2020-10768}
Rebuild_FUZZ: 99.31%
commit-author Anthony Steinhauser <asteinhauser@google.com>
commit 4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4d8df8cb.failed

Currently, it is possible to enable indirect branch speculation even after
it was force-disabled using the PR_SPEC_FORCE_DISABLE option. Moreover, the
PR_GET_SPECULATION_CTRL command gives afterwards an incorrect result
(force-disabled when it is in fact enabled). This also is inconsistent
vs. STIBP and the documention which cleary states that
PR_SPEC_FORCE_DISABLE cannot be undone.

Fix this by actually enforcing force-disabled indirect branch
speculation. PR_SPEC_ENABLE called after PR_SPEC_FORCE_DISABLE now fails
with -EPERM as described in the documentation.

Fixes: 9137bb27e60e ("x86/speculation: Add prctl() control for indirect branch speculation")
	Signed-off-by: Anthony Steinhauser <asteinhauser@google.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: stable@vger.kernel.org
(cherry picked from commit 4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index 65f1365341af,56f573aa764f..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -1202,9 -1175,14 +1202,18 @@@ static int ib_prctl_set(struct task_str
  			return 0;
  		/*
  		 * Indirect branch speculation is always disabled in strict
- 		 * mode.
+ 		 * mode. It can neither be enabled if it was force-disabled
+ 		 * by a  previous prctl call.
+ 
  		 */
++<<<<<<< HEAD
 +		if (spectre_v2_user == SPECTRE_V2_USER_STRICT)
++=======
+ 		if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||
+ 		    spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||
+ 		    spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED ||
+ 		    task_spec_ib_force_disable(task))
++>>>>>>> 4d8df8cbb915 (x86/speculation: PR_SPEC_FORCE_DISABLE enforcement for indirect branches.)
  			return -EPERM;
  		task_clear_spec_ib_disable(task);
  		task_update_spec_tif(task);
* Unmerged path arch/x86/kernel/cpu/bugs.c
