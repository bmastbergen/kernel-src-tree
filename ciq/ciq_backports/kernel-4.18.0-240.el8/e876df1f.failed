block: add zone open, close and finish ioctl support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ajay Joshi <ajay.joshi@wdc.com>
commit e876df1fe0ad1b191284ee6ed2db7960bd322d00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e876df1f.failed

Introduce three new ioctl commands BLKOPENZONE, BLKCLOSEZONE and
BLKFINISHZONE to allow applications to control the condition of zones
on a zoned block device through the execution of the REQ_OP_ZONE_OPEN,
REQ_OP_ZONE_CLOSE and REQ_OP_ZONE_FINISH operations.

Contains contributions from Matias Bjorling, Hans Holmberg,
Dmitry Fomichev, Keith Busch, Damien Le Moal and Christoph Hellwig.

	Reviewed-by: Javier Gonz√°lez <javier@javigon.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Ajay Joshi <ajay.joshi@wdc.com>
	Signed-off-by: Matias Bjorling <matias.bjorling@wdc.com>
	Signed-off-by: Hans Holmberg <hans.holmberg@wdc.com>
	Signed-off-by: Dmitry Fomichev <dmitry.fomichev@wdc.com>
	Signed-off-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e876df1fe0ad1b191284ee6ed2db7960bd322d00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-zoned.c
diff --cc block/blk-zoned.c
index 023c295c4f36,481eaf7d04d4..000000000000
--- a/block/blk-zoned.c
+++ b/block/blk-zoned.c
@@@ -378,8 -387,25 +379,30 @@@ int blkdev_zone_mgmt_ioctl(struct block
  	if (copy_from_user(&zrange, argp, sizeof(struct blk_zone_range)))
  		return -EFAULT;
  
++<<<<<<< HEAD
 +	return blkdev_reset_zones(bdev, zrange.sector, zrange.nr_sectors,
 +				  GFP_KERNEL);
++=======
+ 	switch (cmd) {
+ 	case BLKRESETZONE:
+ 		op = REQ_OP_ZONE_RESET;
+ 		break;
+ 	case BLKOPENZONE:
+ 		op = REQ_OP_ZONE_OPEN;
+ 		break;
+ 	case BLKCLOSEZONE:
+ 		op = REQ_OP_ZONE_CLOSE;
+ 		break;
+ 	case BLKFINISHZONE:
+ 		op = REQ_OP_ZONE_FINISH;
+ 		break;
+ 	default:
+ 		return -ENOTTY;
+ 	}
+ 
+ 	return blkdev_zone_mgmt(bdev, op, zrange.sector, zrange.nr_sectors,
+ 				GFP_KERNEL);
++>>>>>>> e876df1fe0ad (block: add zone open, close and finish ioctl support)
  }
  
  static inline unsigned long *blk_alloc_zone_bitmap(int node,
* Unmerged path block/blk-zoned.c
diff --git a/block/ioctl.c b/block/ioctl.c
index 4825c78a6baa..a9a732f88852 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -531,7 +531,10 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 	case BLKREPORTZONE:
 		return blkdev_report_zones_ioctl(bdev, mode, cmd, arg);
 	case BLKRESETZONE:
-		return blkdev_reset_zones_ioctl(bdev, mode, cmd, arg);
+	case BLKOPENZONE:
+	case BLKCLOSEZONE:
+	case BLKFINISHZONE:
+		return blkdev_zone_mgmt_ioctl(bdev, mode, cmd, arg);
 	case BLKGETZONESZ:
 		return put_uint(arg, bdev_zone_sectors(bdev));
 	case BLKGETNRZONES:
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 8825c79cd84f..d05e5804d547 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -372,8 +372,8 @@ extern int blk_revalidate_disk_zones(struct gendisk *disk);
 
 extern int blkdev_report_zones_ioctl(struct block_device *bdev, fmode_t mode,
 				     unsigned int cmd, unsigned long arg);
-extern int blkdev_reset_zones_ioctl(struct block_device *bdev, fmode_t mode,
-				    unsigned int cmd, unsigned long arg);
+extern int blkdev_zone_mgmt_ioctl(struct block_device *bdev, fmode_t mode,
+				  unsigned int cmd, unsigned long arg);
 
 #else /* CONFIG_BLK_DEV_ZONED */
 
@@ -394,9 +394,9 @@ static inline int blkdev_report_zones_ioctl(struct block_device *bdev,
 	return -ENOTTY;
 }
 
-static inline int blkdev_reset_zones_ioctl(struct block_device *bdev,
-					   fmode_t mode, unsigned int cmd,
-					   unsigned long arg)
+static inline int blkdev_zone_mgmt_ioctl(struct block_device *bdev,
+					 fmode_t mode, unsigned int cmd,
+					 unsigned long arg)
 {
 	return -ENOTTY;
 }
diff --git a/include/uapi/linux/blkzoned.h b/include/uapi/linux/blkzoned.h
index 498eec813494..0cdef67135f0 100644
--- a/include/uapi/linux/blkzoned.h
+++ b/include/uapi/linux/blkzoned.h
@@ -120,9 +120,11 @@ struct blk_zone_report {
 };
 
 /**
- * struct blk_zone_range - BLKRESETZONE ioctl request
- * @sector: starting sector of the first zone to issue reset write pointer
- * @nr_sectors: Total number of sectors of 1 or more zones to reset
+ * struct blk_zone_range - BLKRESETZONE/BLKOPENZONE/
+ *                         BLKCLOSEZONE/BLKFINISHZONE ioctl
+ *                         requests
+ * @sector: Starting sector of the first zone to operate on.
+ * @nr_sectors: Total number of sectors of all zones to operate on.
  */
 struct blk_zone_range {
 	__u64		sector;
@@ -139,10 +141,19 @@ struct blk_zone_range {
  *                sector range. The sector range must be zone aligned.
  * @BLKGETZONESZ: Get the device zone size in number of 512 B sectors.
  * @BLKGETNRZONES: Get the total number of zones of the device.
+ * @BLKOPENZONE: Open the zones in the specified sector range.
+ *               The 512 B sector range must be zone aligned.
+ * @BLKCLOSEZONE: Close the zones in the specified sector range.
+ *                The 512 B sector range must be zone aligned.
+ * @BLKFINISHZONE: Mark the zones as full in the specified sector range.
+ *                 The 512 B sector range must be zone aligned.
  */
 #define BLKREPORTZONE	_IOWR(0x12, 130, struct blk_zone_report)
 #define BLKRESETZONE	_IOW(0x12, 131, struct blk_zone_range)
 #define BLKGETZONESZ	_IOR(0x12, 132, __u32)
 #define BLKGETNRZONES	_IOR(0x12, 133, __u32)
+#define BLKOPENZONE	_IOW(0x12, 134, struct blk_zone_range)
+#define BLKCLOSEZONE	_IOW(0x12, 135, struct blk_zone_range)
+#define BLKFINISHZONE	_IOW(0x12, 136, struct blk_zone_range)
 
 #endif /* _UAPI_BLKZONED_H */
