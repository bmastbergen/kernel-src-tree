io_uring: rename prev to head

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit 9d76377f7e13c19441fdd066033345289f89b5fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9d76377f.failed

Calling "prev" a head of a link is a bit misleading. Rename it

	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 9d76377f7e13c19441fdd066033345289f89b5fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index eb3b77d5111e,a463402e9067..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -2324,26 -4073,42 +2324,48 @@@ err
  	 * conditions are true (normal request), then just queue it.
  	 */
  	if (*link) {
- 		struct io_kiocb *prev = *link;
+ 		struct io_kiocb *head = *link;
  
++<<<<<<< HEAD
 +		sqe_copy = kmemdup(s->sqe, sizeof(*sqe_copy), GFP_KERNEL);
 +		if (!sqe_copy) {
++=======
+ 		if (sqe->flags & IOSQE_IO_DRAIN)
+ 			head->flags |= REQ_F_DRAIN_LINK | REQ_F_IO_DRAIN;
+ 
+ 		if (sqe->flags & IOSQE_IO_HARDLINK)
+ 			req->flags |= REQ_F_HARDLINK;
+ 
+ 		if (io_alloc_async_ctx(req)) {
++>>>>>>> 9d76377f7e13 (io_uring: rename prev to head)
  			ret = -EAGAIN;
  			goto err_req;
  		}
  
++<<<<<<< HEAD
 +		s->sqe = sqe_copy;
 +		memcpy(&req->submit, s, sizeof(*s));
 +		list_add_tail(&req->list, &prev->link_list);
 +	} else if (s->sqe->flags & IOSQE_IO_LINK) {
++=======
+ 		ret = io_req_defer_prep(req, sqe);
+ 		if (ret) {
+ 			/* fail even hard links since we don't submit */
+ 			head->flags |= REQ_F_FAIL_LINK;
+ 			goto err_req;
+ 		}
+ 		trace_io_uring_link(ctx, req, head);
+ 		list_add_tail(&req->link_list, &head->link_list);
+ 	} else if (sqe->flags & (IOSQE_IO_LINK|IOSQE_IO_HARDLINK)) {
++>>>>>>> 9d76377f7e13 (io_uring: rename prev to head)
  		req->flags |= REQ_F_LINK;
 -		if (sqe->flags & IOSQE_IO_HARDLINK)
 -			req->flags |= REQ_F_HARDLINK;
  
 +		memcpy(&req->submit, s, sizeof(*s));
  		INIT_LIST_HEAD(&req->link_list);
 -		ret = io_req_defer_prep(req, sqe);
 -		if (ret)
 -			req->flags |= REQ_F_FAIL_LINK;
  		*link = req;
  	} else {
 -		io_queue_sqe(req, sqe);
 +		io_queue_sqe(ctx, req, s, force_nonblock);
  	}
 -
 -	return true;
  }
  
  /*
* Unmerged path fs/io_uring.c
