libbpf: Add support to attach to fentry/fexit tracing progs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit b8c54ea455dc2e0bda7ea9b0370279c224e21045
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b8c54ea4.failed

Teach libbpf to recognize tracing programs types and attach them to
fentry/fexit.

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Song Liu <songliubraving@fb.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20191114185720.1641606-7-ast@kernel.org
(cherry picked from commit b8c54ea455dc2e0bda7ea9b0370279c224e21045)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/include/uapi/linux/bpf.h
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.map
diff --cc tools/include/uapi/linux/bpf.h
index 4c50a38c7288,69c200e6e696..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -199,6 -200,9 +199,12 @@@ enum bpf_attach_type 
  	BPF_CGROUP_UDP6_RECVMSG,
  	BPF_CGROUP_GETSOCKOPT,
  	BPF_CGROUP_SETSOCKOPT,
++<<<<<<< HEAD
++=======
+ 	BPF_TRACE_RAW_TP,
+ 	BPF_TRACE_FENTRY,
+ 	BPF_TRACE_FEXIT,
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
  	__MAX_BPF_ATTACH_TYPE
  };
  
diff --cc tools/lib/bpf/libbpf.c
index 513144ecbe5c,98ee033e021f..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -3886,6 -3856,9 +3886,12 @@@ bpf_object__load_progs(struct bpf_objec
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int libbpf_attach_btf_id_by_name(const char *name,
+ 					enum bpf_attach_type attach_type);
+ 
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
  static struct bpf_object *
  __bpf_object__open(const char *path, const void *obj_buf, size_t obj_buf_sz,
  		   struct bpf_object_open_opts *opts)
@@@ -3949,6 -3922,13 +3955,16 @@@
  
  		bpf_program__set_type(prog, prog_type);
  		bpf_program__set_expected_attach_type(prog, attach_type);
++<<<<<<< HEAD
++=======
+ 		if (prog_type == BPF_PROG_TYPE_TRACING) {
+ 			err = libbpf_attach_btf_id_by_name(prog->section_name,
+ 							   attach_type);
+ 			if (err <= 0)
+ 				goto out;
+ 			prog->attach_btf_id = err;
+ 		}
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
  	}
  
  	return obj;
@@@ -4952,7 -4934,12 +4968,16 @@@ static const struct 
  	BPF_PROG_SEC("tp/",			BPF_PROG_TYPE_TRACEPOINT),
  	BPF_PROG_SEC("raw_tracepoint/",		BPF_PROG_TYPE_RAW_TRACEPOINT),
  	BPF_PROG_SEC("raw_tp/",			BPF_PROG_TYPE_RAW_TRACEPOINT),
++<<<<<<< HEAD
 +	BPF_PROG_BTF("tp_btf/",			BPF_PROG_TYPE_RAW_TRACEPOINT),
++=======
+ 	BPF_PROG_BTF("tp_btf/",			BPF_PROG_TYPE_TRACING,
+ 						BPF_TRACE_RAW_TP),
+ 	BPF_PROG_BTF("fentry/",			BPF_PROG_TYPE_TRACING,
+ 						BPF_TRACE_FENTRY),
+ 	BPF_PROG_BTF("fexit/",			BPF_PROG_TYPE_TRACING,
+ 						BPF_TRACE_FEXIT),
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
  	BPF_PROG_SEC("xdp",			BPF_PROG_TYPE_XDP),
  	BPF_PROG_SEC("perf_event",		BPF_PROG_TYPE_PERF_EVENT),
  	BPF_PROG_SEC("lwt_in",			BPF_PROG_TYPE_LWT_IN),
@@@ -5090,6 -5056,59 +5115,62 @@@ int libbpf_prog_type_by_name(const cha
  	return -ESRCH;
  }
  
++<<<<<<< HEAD
++=======
+ #define BTF_PREFIX "btf_trace_"
+ int libbpf_find_vmlinux_btf_id(const char *name,
+ 			       enum bpf_attach_type attach_type)
+ {
+ 	struct btf *btf = bpf_core_find_kernel_btf();
+ 	char raw_tp_btf[128] = BTF_PREFIX;
+ 	char *dst = raw_tp_btf + sizeof(BTF_PREFIX) - 1;
+ 	const char *btf_name;
+ 	int err = -EINVAL;
+ 	u32 kind;
+ 
+ 	if (IS_ERR(btf)) {
+ 		pr_warn("vmlinux BTF is not found\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (attach_type == BPF_TRACE_RAW_TP) {
+ 		/* prepend "btf_trace_" prefix per kernel convention */
+ 		strncat(dst, name, sizeof(raw_tp_btf) - sizeof(BTF_PREFIX));
+ 		btf_name = raw_tp_btf;
+ 		kind = BTF_KIND_TYPEDEF;
+ 	} else {
+ 		btf_name = name;
+ 		kind = BTF_KIND_FUNC;
+ 	}
+ 	err = btf__find_by_name_kind(btf, btf_name, kind);
+ 	btf__free(btf);
+ 	return err;
+ }
+ 
+ static int libbpf_attach_btf_id_by_name(const char *name,
+ 					enum bpf_attach_type attach_type)
+ {
+ 	int i, err;
+ 
+ 	if (!name)
+ 		return -EINVAL;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(section_names); i++) {
+ 		if (!section_names[i].is_attach_btf)
+ 			continue;
+ 		if (strncmp(name, section_names[i].sec, section_names[i].len))
+ 			continue;
+ 		err = libbpf_find_vmlinux_btf_id(name + section_names[i].len,
+ 						 attach_type);
+ 		if (err <= 0)
+ 			pr_warn("%s is not found in vmlinux BTF\n", name);
+ 		return err;
+ 	}
+ 	pr_warn("failed to identify btf_id based on ELF section name '%s'\n", name);
+ 	return -ESRCH;
+ }
+ 
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
  int libbpf_attach_type_by_name(const char *name,
  			       enum bpf_attach_type *attach_type)
  {
diff --cc tools/lib/bpf/libbpf.map
index 3ca7228af37e,8ddc2c40e482..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -188,9 -197,14 +188,21 @@@ LIBBPF_0.0.4 
  		bpf_map__get_pin_path;
  		bpf_map__is_pinned;
  		bpf_map__set_pin_path;
++<<<<<<< HEAD
++=======
+ 		bpf_object__open_file;
+ 		bpf_object__open_mem;
+ 		bpf_program__attach_trace;
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
  		bpf_program__get_expected_attach_type;
  		bpf_program__get_type;
 -		bpf_program__is_tracing;
 -		bpf_program__set_tracing;
 +		bpf_get_link_xdp_info;
  		bpf_program__size;
++<<<<<<< HEAD
 +		bpf_btf_get_next_id;
 +} LIBBPF_0.0.3;
++=======
+ 		btf__find_by_name_kind;
+ 		libbpf_find_vmlinux_btf_id;
+ } LIBBPF_0.0.5;
++>>>>>>> b8c54ea455dc (libbpf: Add support to attach to fentry/fexit tracing progs)
* Unmerged path tools/include/uapi/linux/bpf.h
* Unmerged path tools/lib/bpf/libbpf.c
diff --git a/tools/lib/bpf/libbpf.h b/tools/lib/bpf/libbpf.h
index cb530c336c94..a644c7efc8e4 100644
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -188,6 +188,8 @@ libbpf_prog_type_by_name(const char *name, enum bpf_prog_type *prog_type,
 			 enum bpf_attach_type *expected_attach_type);
 LIBBPF_API int libbpf_attach_type_by_name(const char *name,
 					  enum bpf_attach_type *attach_type);
+LIBBPF_API int libbpf_find_vmlinux_btf_id(const char *name,
+					  enum bpf_attach_type attach_type);
 
 /* Accessors of bpf_program */
 struct bpf_program;
@@ -251,6 +253,8 @@ LIBBPF_API struct bpf_link *
 bpf_program__attach_raw_tracepoint(struct bpf_program *prog,
 				   const char *tp_name);
 
+LIBBPF_API struct bpf_link *
+bpf_program__attach_trace(struct bpf_program *prog);
 struct bpf_insn;
 
 /*
* Unmerged path tools/lib/bpf/libbpf.map
