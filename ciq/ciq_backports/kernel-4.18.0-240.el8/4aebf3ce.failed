crypto/nx: Make enable code generic to add new GZIP compression type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Haren Myneni <haren@linux.ibm.com>
commit 4aebf3ce26ca2128433b615cd2535c22b03c8fa3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4aebf3ce.failed

Make setup and enable code generic to support new GZIP compression type.
Changed nx842 reference to nx and moved some code to new functions.
Functionality is not changed except sparse warning fix - setting NULL
instead of 0 for per_cpu send window in nx_delete_coprocs().

	Signed-off-by: Haren Myneni <haren@linux.ibm.com>
	Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/1587114569.2275.1126.camel@hbabu-laptop
(cherry picked from commit 4aebf3ce26ca2128433b615cd2535c22b03c8fa3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/nx/nx-common-powernv.c
diff --cc drivers/crypto/nx/nx-common-powernv.c
index aa010b74f3e0,82dfa60ef3f4..000000000000
--- a/drivers/crypto/nx/nx-common-powernv.c
+++ b/drivers/crypto/nx/nx-common-powernv.c
@@@ -750,8 -750,23 +757,27 @@@ static int nx_open_percpu_txwins(void
  	return 0;
  }
  
+ static int __init nx_set_ct(struct nx_coproc *coproc, const char *priority,
+ 				int high, int normal)
+ {
+ 	if (!strcmp(priority, "High"))
+ 		coproc->ct = high;
+ 	else if (!strcmp(priority, "Normal"))
+ 		coproc->ct = normal;
+ 	else {
+ 		pr_err("Invalid RxFIFO priority value\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
  static int __init vas_cfg_coproc_info(struct device_node *dn, int chip_id,
++<<<<<<< HEAD
 +					int vasid)
++=======
+ 					int vasid, int type, int *ct)
++>>>>>>> 4aebf3ce26ca (crypto/nx: Make enable code generic to add new GZIP compression type)
  {
  	struct vas_window *rxwin = NULL;
  	struct vas_rx_win_attr rxattr;
@@@ -837,8 -849,17 +860,8 @@@
  
  	coproc->vas.rxwin = rxwin;
  	coproc->vas.id = vasid;
- 	nx842_add_coprocs_list(coproc, chip_id);
+ 	nx_add_coprocs_list(coproc, chip_id);
  
 -	/*
 -	 * (lpid, pid, tid) combination has to be unique for each
 -	 * coprocessor instance in the system. So to make it
 -	 * unique, skiboot uses coprocessor type such as 842 or
 -	 * GZIP for pid and provides this value to kernel in pid
 -	 * device-tree property.
 -	 */
 -	*ct = pid;
 -
  	return 0;
  
  err_out:
@@@ -846,12 -867,43 +869,47 @@@
  	return ret;
  }
  
+ static int __init nx_coproc_init(int chip_id, int ct_842)
+ {
+ 	int ret = 0;
+ 
+ 	if (opal_check_token(OPAL_NX_COPROC_INIT)) {
+ 		ret = opal_nx_coproc_init(chip_id, ct_842);
+ 		if (ret) {
+ 			ret = opal_error_code(ret);
+ 			pr_err("Failed to initialize NX for chip(%d): %d\n",
+ 				chip_id, ret);
+ 		}
+ 	} else
+ 		pr_warn("Firmware doesn't support NX initialization\n");
+ 
+ 	return ret;
+ }
+ 
+ static int __init find_nx_device_tree(struct device_node *dn, int chip_id,
+ 					int vasid, int type, char *devname,
+ 					int *ct)
+ {
+ 	int ret = 0;
+ 
+ 	if (of_device_is_compatible(dn, devname)) {
+ 		ret  = vas_cfg_coproc_info(dn, chip_id, vasid, type, ct);
+ 		if (ret)
+ 			of_node_put(dn);
+ 	}
+ 
+ 	return ret;
+ }
  
- static int __init nx842_powernv_probe_vas(struct device_node *pn)
+ static int __init nx_powernv_probe_vas(struct device_node *pn)
  {
- 	struct device_node *dn;
  	int chip_id, vasid, ret = 0;
++<<<<<<< HEAD
 +	int nx_fifo_found = 0;
++=======
+ 	struct device_node *dn;
+ 	int ct_842 = 0;
++>>>>>>> 4aebf3ce26ca (crypto/nx: Make enable code generic to add new GZIP compression type)
  
  	chip_id = of_get_ibm_chip_id(pn);
  	if (chip_id < 0) {
@@@ -866,21 -918,22 +924,36 @@@
  	}
  
  	for_each_child_of_node(pn, dn) {
++<<<<<<< HEAD
 +		if (of_device_is_compatible(dn, "ibm,p9-nx-842")) {
 +			ret = vas_cfg_coproc_info(dn, chip_id, vasid);
 +			if (ret) {
 +				of_node_put(dn);
 +				return ret;
 +			}
 +			nx_fifo_found++;
 +		}
++=======
+ 		ret = find_nx_device_tree(dn, chip_id, vasid, NX_CT_842,
+ 					"ibm,p9-nx-842", &ct_842);
+ 		if (ret)
+ 			return ret;
++>>>>>>> 4aebf3ce26ca (crypto/nx: Make enable code generic to add new GZIP compression type)
  	}
  
- 	if (!nx_fifo_found) {
+ 	if (!ct_842) {
  		pr_err("NX842 FIFO nodes are missing\n");
 -		return -EINVAL;
 +		ret = -EINVAL;
  	}
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Initialize NX instance for both high and normal priority FIFOs.
+ 	 */
+ 	ret = nx_coproc_init(chip_id, ct_842);
+ 
++>>>>>>> 4aebf3ce26ca (crypto/nx: Make enable code generic to add new GZIP compression type)
  	return ret;
  }
  
* Unmerged path drivers/crypto/nx/nx-common-powernv.c
