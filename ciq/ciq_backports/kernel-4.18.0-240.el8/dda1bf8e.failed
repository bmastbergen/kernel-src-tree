perf tools: Use CAP_SYS_ADMIN with perf_event_paranoid checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Igor Lubashev <ilubashe@akamai.com>
commit dda1bf8ea78add78739d128a20b555c4a1a19c27
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/dda1bf8e.failed

The kernel is using CAP_SYS_ADMIN instead of euid==0 to override
perf_event_paranoid check. Make perf do the same.

	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Mathieu Poirier <mathieu.poirier@linaro.org>
	Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org> # coresight part
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: James Morris <jmorris@namei.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
	Cc: linux-arm-kernel@lists.infradead.org
Link: http://lkml.kernel.org/r/1566869956-7154-3-git-send-email-ilubashe@akamai.com
	Signed-off-by: Igor Lubashev <ilubashe@akamai.com>
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit dda1bf8ea78add78739d128a20b555c4a1a19c27)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/arm/util/cs-etm.c
#	tools/perf/arch/arm64/util/arm-spe.c
#	tools/perf/arch/x86/util/intel-bts.c
#	tools/perf/arch/x86/util/intel-pt.c
diff --cc tools/perf/arch/arm/util/cs-etm.c
index 4208974c24f8,5d856edc412b..000000000000
--- a/tools/perf/arch/arm/util/cs-etm.c
+++ b/tools/perf/arch/arm/util/cs-etm.c
@@@ -15,9 -15,10 +15,10 @@@
  #include <linux/zalloc.h>
  
  #include "cs-etm.h"
 -#include "../../util/record.h"
 +#include "../../perf.h"
  #include "../../util/auxtrace.h"
  #include "../../util/cpumap.h"
+ #include "../../util/event.h"
  #include "../../util/evlist.h"
  #include "../../util/evsel.h"
  #include "../../util/pmu.h"
@@@ -252,9 -253,9 +253,15 @@@ static int cs_etm_recording_options(str
  	struct cs_etm_recording *ptr =
  				container_of(itr, struct cs_etm_recording, itr);
  	struct perf_pmu *cs_etm_pmu = ptr->cs_etm_pmu;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *cs_etm_evsel = NULL;
 +	struct cpu_map *cpus = evlist->cpus;
 +	bool privileged = (geteuid() == 0 || perf_event_paranoid() < 0);
++=======
+ 	struct evsel *evsel, *cs_etm_evsel = NULL;
+ 	struct perf_cpu_map *cpus = evlist->core.cpus;
+ 	bool privileged = perf_event_paranoid_check(-1);
++>>>>>>> dda1bf8ea78a (perf tools: Use CAP_SYS_ADMIN with perf_event_paranoid checks)
  	int err = 0;
  
  	ptr->evlist = evlist;
diff --cc tools/perf/arch/arm64/util/arm-spe.c
index 2c009aa74633,c7b38f09260f..000000000000
--- a/tools/perf/arch/arm64/util/arm-spe.c
+++ b/tools/perf/arch/arm64/util/arm-spe.c
@@@ -65,9 -67,9 +66,15 @@@ static int arm_spe_recording_options(st
  	struct arm_spe_recording *sper =
  			container_of(itr, struct arm_spe_recording, itr);
  	struct perf_pmu *arm_spe_pmu = sper->arm_spe_pmu;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *arm_spe_evsel = NULL;
 +	bool privileged = geteuid() == 0 || perf_event_paranoid() < 0;
 +	struct perf_evsel *tracking_evsel;
++=======
+ 	struct evsel *evsel, *arm_spe_evsel = NULL;
+ 	bool privileged = perf_event_paranoid_check(-1);
+ 	struct evsel *tracking_evsel;
++>>>>>>> dda1bf8ea78a (perf tools: Use CAP_SYS_ADMIN with perf_event_paranoid checks)
  	int err;
  
  	sper->evlist = evlist;
diff --cc tools/perf/arch/x86/util/intel-bts.c
index 4cbd3d775c19,16d26ea701ad..000000000000
--- a/tools/perf/arch/x86/util/intel-bts.c
+++ b/tools/perf/arch/x86/util/intel-bts.c
@@@ -114,9 -107,9 +115,15 @@@ static int intel_bts_recording_options(
  	struct intel_bts_recording *btsr =
  			container_of(itr, struct intel_bts_recording, itr);
  	struct perf_pmu *intel_bts_pmu = btsr->intel_bts_pmu;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *intel_bts_evsel = NULL;
 +	const struct cpu_map *cpus = evlist->cpus;
 +	bool privileged = geteuid() == 0 || perf_event_paranoid() < 0;
++=======
+ 	struct evsel *evsel, *intel_bts_evsel = NULL;
+ 	const struct perf_cpu_map *cpus = evlist->core.cpus;
+ 	bool privileged = perf_event_paranoid_check(-1);
++>>>>>>> dda1bf8ea78a (perf tools: Use CAP_SYS_ADMIN with perf_event_paranoid checks)
  
  	btsr->evlist = evlist;
  	btsr->snapshot_mode = opts->auxtrace_snapshot_mode;
diff --cc tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4,746981c82a16..000000000000
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@@ -565,9 -577,9 +565,15 @@@ static int intel_pt_recording_options(s
  			container_of(itr, struct intel_pt_recording, itr);
  	struct perf_pmu *intel_pt_pmu = ptr->intel_pt_pmu;
  	bool have_timing_info, need_immediate = false;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *intel_pt_evsel = NULL;
 +	const struct cpu_map *cpus = evlist->cpus;
 +	bool privileged = geteuid() == 0 || perf_event_paranoid() < 0;
++=======
+ 	struct evsel *evsel, *intel_pt_evsel = NULL;
+ 	const struct perf_cpu_map *cpus = evlist->core.cpus;
+ 	bool privileged = perf_event_paranoid_check(-1);
++>>>>>>> dda1bf8ea78a (perf tools: Use CAP_SYS_ADMIN with perf_event_paranoid checks)
  	u64 tsc_bit;
  	int err;
  
* Unmerged path tools/perf/arch/arm/util/cs-etm.c
* Unmerged path tools/perf/arch/arm64/util/arm-spe.c
* Unmerged path tools/perf/arch/x86/util/intel-bts.c
* Unmerged path tools/perf/arch/x86/util/intel-pt.c
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index 90bfc2303a40..e3ee4e28e6ee 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -280,7 +280,7 @@ struct perf_evsel *perf_evsel__new_idx(struct perf_event_attr *attr, int idx)
 
 static bool perf_event_can_profile_kernel(void)
 {
-	return geteuid() == 0 || perf_event_paranoid() == -1;
+	return perf_event_paranoid_check(-1);
 }
 
 struct perf_evsel *perf_evsel__new_cycles(bool precise)
