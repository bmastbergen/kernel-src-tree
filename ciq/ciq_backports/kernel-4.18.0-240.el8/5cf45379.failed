dma-mapping: introduce a dma_common_find_pages helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 5cf4537975bbd5691b9ddd015d540bb92f61e322
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5cf45379.failed

A helper to find the backing page array based on a virtual address.
This also ensures we do the same vm_flags check everywhere instead
of slightly different or missing ones in a few places.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 5cf4537975bbd5691b9ddd015d540bb92f61e322)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/remap.c
diff --cc kernel/dma/remap.c
index ffe78f0b2fe4,ca4e5d44b571..000000000000
--- a/kernel/dma/remap.c
+++ b/kernel/dma/remap.c
@@@ -11,9 -11,17 +11,18 @@@
  #include <linux/slab.h>
  #include <linux/vmalloc.h>
  
+ struct page **dma_common_find_pages(void *cpu_addr)
+ {
+ 	struct vm_struct *area = find_vm_area(cpu_addr);
+ 
+ 	if (!area || area->flags != VM_DMA_COHERENT)
+ 		return NULL;
+ 	return area->pages;
+ }
+ 
  static struct vm_struct *__dma_common_pages_remap(struct page **pages,
 -			size_t size, pgprot_t prot, const void *caller)
 +			size_t size, unsigned long vm_flags, pgprot_t prot,
 +			const void *caller)
  {
  	struct vm_struct *area;
  
@@@ -79,11 -85,11 +88,15 @@@ void *dma_common_contiguous_remap(struc
  /*
   * Unmaps a range previously mapped by dma_common_*_remap
   */
 -void dma_common_free_remap(void *cpu_addr, size_t size)
 +void dma_common_free_remap(void *cpu_addr, size_t size, unsigned long vm_flags)
  {
- 	struct vm_struct *area = find_vm_area(cpu_addr);
+ 	struct page **pages = dma_common_find_pages(cpu_addr);
  
++<<<<<<< HEAD
 +	if (!area || (area->flags & vm_flags) != vm_flags) {
++=======
+ 	if (!pages) {
++>>>>>>> 5cf4537975bb (dma-mapping: introduce a dma_common_find_pages helper)
  		WARN(1, "trying to free invalid coherent area: %p\n", cpu_addr);
  		return;
  	}
diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c
index 796ffc05b4d3..ccf59cc41181 100644
--- a/arch/arm/mm/dma-mapping.c
+++ b/arch/arm/mm/dma-mapping.c
@@ -1449,18 +1449,13 @@ static struct page **__atomic_get_pages(void *addr)
 
 static struct page **__iommu_get_pages(void *cpu_addr, unsigned long attrs)
 {
-	struct vm_struct *area;
-
 	if (__in_atomic_pool(cpu_addr, PAGE_SIZE))
 		return __atomic_get_pages(cpu_addr);
 
 	if (attrs & DMA_ATTR_NO_KERNEL_MAPPING)
 		return cpu_addr;
 
-	area = find_vm_area(cpu_addr);
-	if (area && (area->flags & VM_DMA_COHERENT))
-		return area->pages;
-	return NULL;
+	return dma_common_find_pages(cpu_addr);
 }
 
 static void *__iommu_alloc_simple(struct device *dev, size_t size, gfp_t gfp,
diff --git a/drivers/iommu/dma-iommu.c b/drivers/iommu/dma-iommu.c
index 4e05d76051f2..0362d272a047 100644
--- a/drivers/iommu/dma-iommu.c
+++ b/drivers/iommu/dma-iommu.c
@@ -577,15 +577,6 @@ static struct page **__iommu_dma_alloc_pages(struct device *dev,
 	return pages;
 }
 
-static struct page **__iommu_dma_get_pages(void *cpu_addr)
-{
-	struct vm_struct *area = find_vm_area(cpu_addr);
-
-	if (!area || !area->pages)
-		return NULL;
-	return area->pages;
-}
-
 /**
  * iommu_dma_alloc_remap - Allocate and map a buffer contiguous in IOVA space
  * @dev: Device to allocate memory for. Must be a real device
@@ -981,7 +972,7 @@ static void __iommu_dma_free(struct device *dev, size_t size, void *cpu_addr)
 		 * If it the address is remapped, then it's either non-coherent
 		 * or highmem CMA, or an iommu_dma_alloc_remap() construction.
 		 */
-		pages = __iommu_dma_get_pages(cpu_addr);
+		pages = dma_common_find_pages(cpu_addr);
 		if (!pages)
 			page = vmalloc_to_page(cpu_addr);
 		dma_common_free_remap(cpu_addr, alloc_size, VM_USERMAP);
@@ -1089,7 +1080,7 @@ static int iommu_dma_mmap(struct device *dev, struct vm_area_struct *vma,
 		return -ENXIO;
 
 	if (IS_ENABLED(CONFIG_DMA_REMAP) && is_vmalloc_addr(cpu_addr)) {
-		struct page **pages = __iommu_dma_get_pages(cpu_addr);
+		struct page **pages = dma_common_find_pages(cpu_addr);
 
 		if (pages)
 			return __iommu_dma_mmap(pages, size, vma);
@@ -1111,7 +1102,7 @@ static int iommu_dma_get_sgtable(struct device *dev, struct sg_table *sgt,
 	int ret;
 
 	if (IS_ENABLED(CONFIG_DMA_REMAP) && is_vmalloc_addr(cpu_addr)) {
-		struct page **pages = __iommu_dma_get_pages(cpu_addr);
+		struct page **pages = dma_common_find_pages(cpu_addr);
 
 		if (pages) {
 			return sg_alloc_table_from_pages(sgt, pages,
diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h
index e7035a66d5a5..edbd8da5aeea 100644
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@ -623,6 +623,7 @@ extern int dma_common_mmap(struct device *dev, struct vm_area_struct *vma,
 		void *cpu_addr, dma_addr_t dma_addr, size_t size,
 		unsigned long attrs);
 
+struct page **dma_common_find_pages(void *cpu_addr);
 void *dma_common_contiguous_remap(struct page *page, size_t size,
 			unsigned long vm_flags,
 			pgprot_t prot, const void *caller);
* Unmerged path kernel/dma/remap.c
