perf evsel: Add functions to enable/disable for a specific CPU

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andi Kleen <ak@linux.intel.com>
commit 363fb12189d58ebc60456561b8540d68013782a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/363fb121.failed

Refactor the existing functions to use these functions internally.

Used in the next patch.

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: http://lore.kernel.org/lkml/20191121001522.180827-12-andi@firstfloor.org
Link: http://lore.kernel.org/lkml/20191127232657.GL84886@tassilo.jf.intel.com # Fix
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 363fb12189d58ebc60456561b8540d68013782a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evsel.c
#	tools/perf/lib/include/perf/evsel.h
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
diff --cc tools/perf/util/evsel.c
index c59d310d3797,a69e64236120..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1238,19 -1223,30 +1238,38 @@@ int perf_evsel__append_addr_filter(stru
  	return perf_evsel__append_filter(evsel, "%s,%s", filter);
  }
  
++<<<<<<< HEAD
 +int perf_evsel__enable(struct perf_evsel *evsel)
++=======
+ /* Caller has to clear disabled after going through all CPUs. */
+ int evsel__enable_cpu(struct evsel *evsel, int cpu)
+ {
+ 	return perf_evsel__enable_cpu(&evsel->core, cpu);
+ }
+ 
+ int evsel__enable(struct evsel *evsel)
++>>>>>>> 363fb12189d5 (perf evsel: Add functions to enable/disable for a specific CPU)
  {
 -	int err = perf_evsel__enable(&evsel->core);
 +	int err = perf_evsel__run_ioctl(evsel, PERF_EVENT_IOC_ENABLE, 0);
  
  	if (!err)
  		evsel->disabled = false;
  	return err;
  }
  
++<<<<<<< HEAD
 +int perf_evsel__disable(struct perf_evsel *evsel)
++=======
+ /* Caller has to set disabled after going through all CPUs. */
+ int evsel__disable_cpu(struct evsel *evsel, int cpu)
+ {
+ 	return perf_evsel__disable_cpu(&evsel->core, cpu);
+ }
+ 
+ int evsel__disable(struct evsel *evsel)
++>>>>>>> 363fb12189d5 (perf evsel: Add functions to enable/disable for a specific CPU)
  {
 -	int err = perf_evsel__disable(&evsel->core);
 +	int err = perf_evsel__run_ioctl(evsel, PERF_EVENT_IOC_DISABLE, 0);
  	/*
  	 * We mark it disabled here so that tools that disable a event can
  	 * ignore events after they disable it. I.e. the ring buffer may have
diff --cc tools/perf/util/evsel.h
index 2ab992b39a4c,dc14f4a823cd..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -285,24 -215,26 +285,31 @@@ void __perf_evsel__reset_sample_bit(str
  #define perf_evsel__reset_sample_bit(evsel, bit) \
  	__perf_evsel__reset_sample_bit(evsel, PERF_SAMPLE_##bit)
  
 -void perf_evsel__set_sample_id(struct evsel *evsel,
 +void perf_evsel__set_sample_id(struct perf_evsel *evsel,
  			       bool use_sample_identifier);
  
 -int perf_evsel__set_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__append_tp_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__append_addr_filter(struct evsel *evsel,
 +int perf_evsel__set_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__append_tp_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__append_addr_filter(struct perf_evsel *evsel,
  				   const char *filter);
++<<<<<<< HEAD
 +int perf_evsel__apply_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__enable(struct perf_evsel *evsel);
 +int perf_evsel__disable(struct perf_evsel *evsel);
++=======
+ int evsel__enable_cpu(struct evsel *evsel, int cpu);
+ int evsel__enable(struct evsel *evsel);
+ int evsel__disable(struct evsel *evsel);
+ int evsel__disable_cpu(struct evsel *evsel, int cpu);
++>>>>>>> 363fb12189d5 (perf evsel: Add functions to enable/disable for a specific CPU)
  
 -int perf_evsel__open_per_cpu(struct evsel *evsel,
 -			     struct perf_cpu_map *cpus,
 -			     int cpu);
 -int perf_evsel__open_per_thread(struct evsel *evsel,
 -				struct perf_thread_map *threads);
 -int evsel__open(struct evsel *evsel, struct perf_cpu_map *cpus,
 -		struct perf_thread_map *threads);
 -void evsel__close(struct evsel *evsel);
 +int perf_evsel__open_per_cpu(struct perf_evsel *evsel,
 +			     struct cpu_map *cpus);
 +int perf_evsel__open_per_thread(struct perf_evsel *evsel,
 +				struct thread_map *threads);
 +int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 +		     struct thread_map *threads);
 +void perf_evsel__close(struct perf_evsel *evsel);
  
  struct perf_sample;
  
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/perf/evsel.h
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/perf/evsel.h
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
