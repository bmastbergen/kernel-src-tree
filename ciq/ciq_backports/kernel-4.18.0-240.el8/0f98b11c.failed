perf evlist: Rename perf_evlist__new() to evlist__new()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 0f98b11c616f240b54ee85629ff4d3650c7ccc7d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0f98b11c.failed

Rename perf_evlist__new() to evlist__new(), so we don't have a name
clash when we add perf_evlist__new() in libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-9-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0f98b11c616f240b54ee85629ff4d3650c7ccc7d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/powerpc/util/kvm-stat.c
#	tools/perf/tests/evsel-roundtrip-name.c
#	tools/perf/tests/hists_cumulate.c
#	tools/perf/tests/hists_filter.c
#	tools/perf/tests/hists_link.c
#	tools/perf/tests/hists_output.c
#	tools/perf/tests/openat-syscall-tp-fields.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/arch/powerpc/util/kvm-stat.c
index f9db341c47b6,f0dbf7b075c8..000000000000
--- a/tools/perf/arch/powerpc/util/kvm-stat.c
+++ b/tools/perf/arch/powerpc/util/kvm-stat.c
@@@ -146,7 -146,7 +146,11 @@@ static int ppc__setup_book3s_hv(struct 
  /* Wrapper to setup kvm tracepoints */
  static int ppc__setup_kvm_tp(struct perf_kvm_stat *kvm)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
  	if (evlist == NULL)
  		return -ENOMEM;
diff --cc tools/perf/tests/evsel-roundtrip-name.c
index a104728ebf25,74e79d6b7e96..000000000000
--- a/tools/perf/tests/evsel-roundtrip-name.c
+++ b/tools/perf/tests/evsel-roundtrip-name.c
@@@ -11,8 -11,8 +11,13 @@@ static int perf_evsel__roundtrip_cache_
  {
  	char name[128];
  	int type, op, err = 0, ret = 0, i, idx;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
          if (evlist == NULL)
                  return -ENOMEM;
@@@ -67,8 -67,8 +72,13 @@@
  static int __perf_evsel__name_array_test(const char *names[], int nr_names)
  {
  	int i, err;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
          if (evlist == NULL)
                  return -ENOMEM;
diff --cc tools/perf/tests/hists_cumulate.c
index 7a2eed6c783e,897e74b5ed1f..000000000000
--- a/tools/perf/tests/hists_cumulate.c
+++ b/tools/perf/tests/hists_cumulate.c
@@@ -694,8 -694,8 +694,13 @@@ int test__hists_cumulate(struct test *t
  	int err = TEST_FAIL;
  	struct machines machines;
  	struct machine *machine;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  	size_t i;
  	test_fn_t testcases[] = {
  		test1,
diff --cc tools/perf/tests/hists_filter.c
index 975844807fe2,b0468db74ca3..000000000000
--- a/tools/perf/tests/hists_filter.c
+++ b/tools/perf/tests/hists_filter.c
@@@ -108,8 -108,8 +108,13 @@@ int test__hists_filter(struct test *tes
  	int err = TEST_FAIL;
  	struct machines machines;
  	struct machine *machine;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
  	TEST_ASSERT_VAL("No memory", evlist);
  
diff --cc tools/perf/tests/hists_link.c
index af633db63f4d,878cb5bfbe78..000000000000
--- a/tools/perf/tests/hists_link.c
+++ b/tools/perf/tests/hists_link.c
@@@ -271,8 -271,8 +271,13 @@@ int test__hists_link(struct test *test 
  	struct hists *hists, *first_hists;
  	struct machines machines;
  	struct machine *machine = NULL;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel, *first;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel, *first;
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
  	if (evlist == NULL)
                  return -ENOMEM;
diff --cc tools/perf/tests/hists_output.c
index 0a510c524a5d,87a05e7afb7e..000000000000
--- a/tools/perf/tests/hists_output.c
+++ b/tools/perf/tests/hists_output.c
@@@ -580,8 -580,8 +580,13 @@@ int test__hists_output(struct test *tes
  	int err = TEST_FAIL;
  	struct machines machines;
  	struct machine *machine;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel;
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evsel *evsel;
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  	size_t i;
  	test_fn_t testcases[] = {
  		test1,
diff --cc tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469,141592437520..000000000000
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@@ -32,8 -32,8 +32,13 @@@ int test__syscall_openat_tp_fields(stru
  	};
  	const char *filename = "/etc/passwd";
  	int flags = O_RDONLY | O_DIRECTORY;
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = perf_evlist__new();
 +	struct perf_evsel *evsel;
++=======
+ 	struct evlist *evlist = evlist__new();
+ 	struct evsel *evsel;
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  	int err = -1, i, nr_events = 0, nr_polls = 0;
  	char sbuf[STRERR_BUFSIZE];
  
diff --cc tools/perf/util/evlist.c
index 4739b7914374,317b2d64ba6d..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -56,19 -55,19 +56,27 @@@ void perf_evlist__init(struct perf_evli
  	evlist->bkw_mmap_state = BKW_MMAP_NOTREADY;
  }
  
++<<<<<<< HEAD
 +struct perf_evlist *perf_evlist__new(void)
++=======
+ struct evlist *evlist__new(void)
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  {
 -	struct evlist *evlist = zalloc(sizeof(*evlist));
 +	struct perf_evlist *evlist = zalloc(sizeof(*evlist));
  
  	if (evlist != NULL)
 -		evlist__init(evlist, NULL, NULL);
 +		perf_evlist__init(evlist, NULL, NULL);
  
  	return evlist;
  }
  
 -struct evlist *perf_evlist__new_default(void)
 +struct perf_evlist *perf_evlist__new_default(void)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
  	if (evlist && perf_evlist__add_default(evlist)) {
  		perf_evlist__delete(evlist);
@@@ -78,9 -77,9 +86,13 @@@
  	return evlist;
  }
  
 -struct evlist *perf_evlist__new_dummy(void)
 +struct perf_evlist *perf_evlist__new_dummy(void)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = perf_evlist__new();
++=======
+ 	struct evlist *evlist = evlist__new();
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
  	if (evlist && perf_evlist__add_dummy(evlist)) {
  		perf_evlist__delete(evlist);
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,60e1c9268e9e..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -65,20 -65,20 +65,30 @@@ struct perf_evsel_str_handler 
  	void	   *handler;
  };
  
++<<<<<<< HEAD
 +struct perf_evlist *perf_evlist__new(void);
 +struct perf_evlist *perf_evlist__new_default(void);
 +struct perf_evlist *perf_evlist__new_dummy(void);
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads);
 +void perf_evlist__exit(struct perf_evlist *evlist);
 +void perf_evlist__delete(struct perf_evlist *evlist);
++=======
+ struct evlist *evlist__new(void);
+ struct evlist *perf_evlist__new_default(void);
+ struct evlist *perf_evlist__new_dummy(void);
+ void evlist__init(struct evlist *evlist, struct perf_cpu_map *cpus,
+ 		  struct perf_thread_map *threads);
+ void perf_evlist__exit(struct evlist *evlist);
+ void perf_evlist__delete(struct evlist *evlist);
++>>>>>>> 0f98b11c616f (perf evlist: Rename perf_evlist__new() to evlist__new())
  
 -void perf_evlist__add(struct evlist *evlist, struct evsel *entry);
 -void perf_evlist__remove(struct evlist *evlist, struct evsel *evsel);
 +void perf_evlist__add(struct perf_evlist *evlist, struct perf_evsel *entry);
 +void perf_evlist__remove(struct perf_evlist *evlist, struct perf_evsel *evsel);
  
 -int __perf_evlist__add_default(struct evlist *evlist, bool precise);
 +int __perf_evlist__add_default(struct perf_evlist *evlist, bool precise);
  
 -static inline int perf_evlist__add_default(struct evlist *evlist)
 +static inline int perf_evlist__add_default(struct perf_evlist *evlist)
  {
  	return __perf_evlist__add_default(evlist, true);
  }
* Unmerged path tools/perf/arch/powerpc/util/kvm-stat.c
diff --git a/tools/perf/arch/x86/tests/intel-cqm.c b/tools/perf/arch/x86/tests/intel-cqm.c
index 94aa0b673b7f..7e4f80da5d06 100644
--- a/tools/perf/arch/x86/tests/intel-cqm.c
+++ b/tools/perf/arch/x86/tests/intel-cqm.c
@@ -51,7 +51,7 @@ int test__intel_cqm_count_nmi_context(struct test *test __maybe_unused, int subt
 
 	flag = perf_event_open_cloexec_flag();
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (!evlist) {
 		pr_debug("perf_evlist__new failed\n");
 		return TEST_FAIL;
diff --git a/tools/perf/arch/x86/tests/perf-time-to-tsc.c b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86..7eba333442d3 100644
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@ -68,7 +68,7 @@ int test__perf_time_to_tsc(struct test *test __maybe_unused, int subtest __maybe
 	cpus = cpu_map__new(NULL);
 	CHECK_NOT_NULL__(cpus);
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	CHECK_NOT_NULL__(evlist);
 
 	perf_evlist__set_maps(evlist, cpus, threads);
diff --git a/tools/perf/builtin-ftrace.c b/tools/perf/builtin-ftrace.c
index f0a576403ecd..49146199c263 100644
--- a/tools/perf/builtin-ftrace.c
+++ b/tools/perf/builtin-ftrace.c
@@ -496,7 +496,7 @@ int cmd_ftrace(int argc, const char **argv)
 		goto out_delete_filters;
 	}
 
-	ftrace.evlist = perf_evlist__new();
+	ftrace.evlist = evlist__new();
 	if (ftrace.evlist == NULL) {
 		ret = -ENOMEM;
 		goto out_delete_filters;
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 02e719faa488..574d984baf04 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -1291,7 +1291,7 @@ static struct perf_evlist *kvm_live_event_list(void)
 	int err = -1;
 	const char * const *events_tp;
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (evlist == NULL)
 		return NULL;
 
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..657943a5d068 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -2266,7 +2266,7 @@ int cmd_record(int argc, const char **argv)
 	CPU_ZERO(&rec->affinity_mask);
 	rec->opts.affinity = PERF_AFFINITY_SYS;
 
-	rec->evlist = perf_evlist__new();
+	rec->evlist = evlist__new();
 	if (rec->evlist == NULL)
 		return -ENOMEM;
 
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index b71c4390d333..e6a29b4d12b4 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -1704,7 +1704,7 @@ int cmd_stat(int argc, const char **argv)
 
 	setlocale(LC_ALL, "");
 
-	evsel_list = perf_evlist__new();
+	evsel_list = evlist__new();
 	if (evsel_list == NULL)
 		return -ENOMEM;
 
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 6d6fb101231d..9be3713ca7be 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -1526,7 +1526,7 @@ int cmd_top(int argc, const char **argv)
 	top.annotation_opts.min_pcnt = 5;
 	top.annotation_opts.context  = 4;
 
-	top.evlist = perf_evlist__new();
+	top.evlist = evlist__new();
 	if (top.evlist == NULL)
 		return -ENOMEM;
 
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 9f9c869e0f26..5095f9e636fa 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -4169,7 +4169,7 @@ int cmd_trace(int argc, const char **argv)
 	signal(SIGSEGV, sighandler_dump_stack);
 	signal(SIGFPE, sighandler_dump_stack);
 
-	trace.evlist = perf_evlist__new();
+	trace.evlist = evlist__new();
 	trace.sctbl = syscalltbl__new();
 
 	if (trace.evlist == NULL || trace.sctbl == NULL) {
diff --git a/tools/perf/tests/backward-ring-buffer.c b/tools/perf/tests/backward-ring-buffer.c
index 1a9c3becf5ff..2a89a2a68723 100644
--- a/tools/perf/tests/backward-ring-buffer.c
+++ b/tools/perf/tests/backward-ring-buffer.c
@@ -99,7 +99,7 @@ int test__backward_ring_buffer(struct test *test __maybe_unused, int subtest __m
 	pid[sizeof(pid) - 1] = '\0';
 	opts.target.tid = opts.target.pid = pid;
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (!evlist) {
 		pr_debug("Not enough memory to create evlist\n");
 		return TEST_FAIL;
diff --git a/tools/perf/tests/bpf.c b/tools/perf/tests/bpf.c
index c9e4cdc4c9c8..85ca11e38f8b 100644
--- a/tools/perf/tests/bpf.c
+++ b/tools/perf/tests/bpf.c
@@ -140,7 +140,7 @@ static int do_test(struct bpf_object *obj, int (*func)(void),
 	opts.target.tid = opts.target.pid = pid;
 
 	/* Instead of perf_evlist__new_default, don't add default events */
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (!evlist) {
 		pr_debug("Not enough memory to create evlist\n");
 		return TEST_FAIL;
diff --git a/tools/perf/tests/code-reading.c b/tools/perf/tests/code-reading.c
index aa6df122b175..38bfe5f0241c 100644
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@ -622,7 +622,7 @@ static int do_test_code_reading(bool try_kcore)
 	while (1) {
 		const char *str;
 
-		evlist = perf_evlist__new();
+		evlist = evlist__new();
 		if (!evlist) {
 			pr_debug("perf_evlist__new failed\n");
 			goto out_put;
diff --git a/tools/perf/tests/event-times.c b/tools/perf/tests/event-times.c
index 1a2686f1fcf0..7ade03693f7d 100644
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@ -166,7 +166,7 @@ static int test_times(int (attach)(struct perf_evlist *),
 	struct perf_evsel *evsel;
 	int err = -1, i;
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (!evlist) {
 		pr_debug("failed to create event list\n");
 		goto out_err;
* Unmerged path tools/perf/tests/evsel-roundtrip-name.c
* Unmerged path tools/perf/tests/hists_cumulate.c
* Unmerged path tools/perf/tests/hists_filter.c
* Unmerged path tools/perf/tests/hists_link.c
* Unmerged path tools/perf/tests/hists_output.c
diff --git a/tools/perf/tests/keep-tracking.c b/tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e..c1b138cc6196 100644
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@ -78,7 +78,7 @@ int test__keep_tracking(struct test *test __maybe_unused, int subtest __maybe_un
 	cpus = cpu_map__new(NULL);
 	CHECK_NOT_NULL__(cpus);
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	CHECK_NOT_NULL__(evlist);
 
 	perf_evlist__set_maps(evlist, cpus, threads);
diff --git a/tools/perf/tests/mmap-basic.c b/tools/perf/tests/mmap-basic.c
index 0919b0793e5b..7d894d5e77c5 100644
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@ -61,7 +61,7 @@ int test__basic_mmap(struct test *test __maybe_unused, int subtest __maybe_unuse
 		goto out_free_cpus;
 	}
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (evlist == NULL) {
 		pr_debug("perf_evlist__new\n");
 		goto out_free_cpus;
* Unmerged path tools/perf/tests/openat-syscall-tp-fields.c
diff --git a/tools/perf/tests/parse-events.c b/tools/perf/tests/parse-events.c
index 8f3c80e13584..2cd5e0a2900b 100644
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@ -1777,7 +1777,7 @@ static int test_event(struct evlist_test *e)
 		return 0;
 	}
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (evlist == NULL)
 		return -ENOMEM;
 
diff --git a/tools/perf/tests/sw-clock.c b/tools/perf/tests/sw-clock.c
index f9490b237893..77ca870b6667 100644
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@ -43,9 +43,9 @@ static int __test__sw_clock_freq(enum perf_sw_ids clock_id)
 
 	attr.sample_freq = 500;
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (evlist == NULL) {
-		pr_debug("perf_evlist__new\n");
+		pr_debug("evlist__new\n");
 		return -1;
 	}
 
diff --git a/tools/perf/tests/switch-tracking.c b/tools/perf/tests/switch-tracking.c
index 6cdab5f4812a..5e4a2c265d4e 100644
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@ -347,9 +347,9 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 		goto out_err;
 	}
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (!evlist) {
-		pr_debug("perf_evlist__new failed!\n");
+		pr_debug("evlist__new failed!\n");
 		goto out_err;
 	}
 
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index c3fbdc63c78a..40d61c31c88b 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -3527,7 +3527,7 @@ int perf_session__read_header(struct perf_session *session)
 	int nr_attrs, nr_ids, i, j;
 	int fd = perf_data__fd(data);
 
-	session->evlist = perf_evlist__new();
+	session->evlist = evlist__new();
 	if (session->evlist == NULL)
 		return -ENOMEM;
 
@@ -4008,7 +4008,7 @@ int perf_event__process_attr(struct perf_tool *tool __maybe_unused,
 	struct perf_evlist *evlist = *pevlist;
 
 	if (evlist == NULL) {
-		*pevlist = evlist = perf_evlist__new();
+		*pevlist = evlist = evlist__new();
 		if (evlist == NULL)
 			return -ENOMEM;
 	}
diff --git a/tools/perf/util/record.c b/tools/perf/util/record.c
index 9cfc7bf16531..2bb217ff0f19 100644
--- a/tools/perf/util/record.c
+++ b/tools/perf/util/record.c
@@ -19,7 +19,7 @@ static int perf_do_probe_api(setup_probe_fn_t fn, int cpu, const char *str)
 	int err = -EAGAIN, fd;
 	static pid_t pid = -1;
 
-	evlist = perf_evlist__new();
+	evlist = evlist__new();
 	if (!evlist)
 		return -ENOMEM;
 
@@ -264,7 +264,7 @@ bool perf_evlist__can_select_event(struct perf_evlist *evlist, const char *str)
 	bool ret = false;
 	pid_t pid = -1;
 
-	temp_evlist = perf_evlist__new();
+	temp_evlist = evlist__new();
 	if (!temp_evlist)
 		return false;
 
