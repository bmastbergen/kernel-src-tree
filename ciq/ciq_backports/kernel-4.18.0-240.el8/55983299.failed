libbpf: Use .so dynamic symbols for abi check

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
commit 55983299b7ea94d714c19cdfd8d969ba86e0d7e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/55983299.failed

Since dynamic symbols are used for dynamic linking it makes sense to
use them (readelf --dyn-syms) for abi check.

Found with some configuration on powerpc where linker puts
local *.plt_call.* symbols into .so.

	Signed-off-by: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20200525061846.16524-1-yauheni.kaliuta@redhat.com
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 55983299b7ea94d714c19cdfd8d969ba86e0d7e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/Makefile
diff --cc tools/lib/bpf/Makefile
index e6fcbcad3199,bf8ed134cb8a..000000000000
--- a/tools/lib/bpf/Makefile
+++ b/tools/lib/bpf/Makefile
@@@ -137,12 -144,17 +137,23 @@@ LIB_TARGET	:= $(addprefix $(OUTPUT),$(L
  LIB_FILE	:= $(addprefix $(OUTPUT),$(LIB_FILE))
  PC_FILE		:= $(addprefix $(OUTPUT),$(PC_FILE))
  
++<<<<<<< HEAD
 +GLOBAL_SYM_COUNT = $(shell readelf -s --wide $(BPF_IN) | \
 +			   awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {s++} END{print s}')
 +VERSIONED_SYM_COUNT = $(shell readelf -s --wide $(OUTPUT)libbpf.so | \
++=======
+ TAGS_PROG := $(if $(shell which etags 2>/dev/null),etags,ctags)
+ 
+ GLOBAL_SYM_COUNT = $(shell readelf -s --wide $(BPF_IN_SHARED) | \
+ 			   cut -d "@" -f1 | sed 's/_v[0-9]_[0-9]_[0-9].*//' | \
+ 			   sed 's/\[.*\]//' | \
+ 			   awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {print $$NF}' | \
+ 			   sort -u | wc -l)
+ VERSIONED_SYM_COUNT = $(shell readelf --dyn-syms --wide $(OUTPUT)libbpf.so | \
++>>>>>>> 55983299b7ea (libbpf: Use .so dynamic symbols for abi check)
  			      grep -Eo '[^ ]+@LIBBPF_' | cut -d@ -f1 | sort -u | wc -l)
  
 -CMD_TARGETS = $(LIB_TARGET) $(PC_FILE)
 +CMD_TARGETS = $(LIB_TARGET) $(PC_FILE) $(OUTPUT)test_libbpf
  
  all: fixdep
  	$(Q)$(MAKE) all_cmd
@@@ -201,10 -213,12 +212,10 @@@ check_abi: $(OUTPUT)libbpf.s
  		     "versioned symbols in $^ ($(VERSIONED_SYM_COUNT))." \
  		     "Please make sure all LIBBPF_API symbols are"	 \
  		     "versioned in $(VERSION_SCRIPT)." >&2;		 \
 -		readelf -s --wide $(BPF_IN_SHARED) |			 \
 -		    cut -d "@" -f1 | sed 's/_v[0-9]_[0-9]_[0-9].*//' |	 \
 -		    sed 's/\[.*\]//' |					 \
 -		    awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {print $$NF}'|  \
 +		readelf -s --wide $(OUTPUT)libbpf-in.o |		 \
 +		    awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {print $$8}'|   \
  		    sort -u > $(OUTPUT)libbpf_global_syms.tmp;		 \
- 		readelf -s --wide $(OUTPUT)libbpf.so |			 \
+ 		readelf --dyn-syms --wide $(OUTPUT)libbpf.so |		 \
  		    grep -Eo '[^ ]+@LIBBPF_' | cut -d@ -f1 |		 \
  		    sort -u > $(OUTPUT)libbpf_versioned_syms.tmp; 	 \
  		diff -u $(OUTPUT)libbpf_global_syms.tmp			 \
* Unmerged path tools/lib/bpf/Makefile
