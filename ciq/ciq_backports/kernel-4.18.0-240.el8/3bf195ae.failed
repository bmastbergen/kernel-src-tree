netfilter: nat: merge nf_nat_ipv4,6 into nat core

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] netfilter: nat: merge nf_nat_ipv4, 6 into nat core (Florian Westphal) [1579145]
Rebuild_FUZZ: 98.99%
commit-author Florian Westphal <fw@strlen.de>
commit 3bf195ae6037e310d693ff3313401cfaf1261b71
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3bf195ae.failed

before:
   text    data     bss     dec     hex filename
  16566    1576    4136   22278    5706 nf_nat.ko
   3598	    844	      0	   4442	   115a	nf_nat_ipv6.ko
   3187	    844	      0	   4031	    fbf	nf_nat_ipv4.ko

after:
   text    data     bss     dec     hex filename
  22948    1612    4136   28696    7018 nf_nat.ko

... with ipv4/v6 nat now provided directly via nf_nat.ko.

Also changes:
       ret = nf_nat_ipv4_fn(priv, skb, state);
       if (ret != NF_DROP && ret != NF_STOLEN &&
into
	if (ret != NF_ACCEPT)
		return ret;

everywhere.

The nat hooks never should return anything other than
ACCEPT or DROP (and the latter only in rare error cases).

The original code uses multi-line ANDing including assignment-in-if:
        if (ret != NF_DROP && ret != NF_STOLEN &&
           !(IPCB(skb)->flags & IPSKB_XFRM_TRANSFORMED) &&
            (ct = nf_ct_get(skb, &ctinfo)) != NULL) {

I removed this while moving, breaking those in separate conditionals
and moving the assignments into extra lines.

checkpatch still generates some warnings:
 1. Overly long lines (of moved code).
    Breaking them is even more ugly. so I kept this as-is.
 2. use of extern function declarations in a .c file.
    This is necessary evil, we must call
    nf_nat_l3proto_register() from the nat core now.
    All l3proto related functions are removed later in this series,
    those prototypes are then removed as well.

v2: keep empty nf_nat_ipv6_csum_update stub for CONFIG_IPV6=n case.
v3: remove IS_ENABLED(NF_NAT_IPV4/6) tests, NF_NAT_IPVx toggles
    are removed here.
v4: also get rid of the assignments in conditionals.

	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 3bf195ae6037e310d693ff3313401cfaf1261b71)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/netfilter/Kconfig
#	net/ipv4/netfilter/Makefile
#	net/ipv4/netfilter/nf_nat_l3proto_ipv4.c
#	net/ipv6/netfilter/Kconfig
#	net/ipv6/netfilter/Makefile
#	net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
#	net/netfilter/nf_nat_proto.c
#	tools/testing/selftests/net/config
diff --cc net/ipv4/netfilter/Kconfig
index d7ecae5e93ea,8688461ed077..000000000000
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@@ -110,20 -94,7 +110,24 @@@ config NF_REJECT_IPV
  	tristate "IPv4 packet rejection"
  	default m if NETFILTER_ADVANCED=n
  
++<<<<<<< HEAD
 +config NF_NAT_IPV4
 +	tristate "IPv4 NAT"
 +	depends on NF_CONNTRACK_IPV4
 +	default m if NETFILTER_ADVANCED=n
 +	select NF_NAT
 +	help
 +	  The IPv4 NAT option allows masquerading, port forwarding and other
 +	  forms of full Network Address Port Translation. This can be
 +	  controlled by iptables or nft.
 +
 +if NF_NAT_IPV4
++=======
+ if NF_NAT
++>>>>>>> 3bf195ae6037 (netfilter: nat: merge nf_nat_ipv4,6 into nat core)
 +
 +config NF_NAT_MASQUERADE_IPV4
 +	bool
  
  if NF_TABLES
  config NFT_CHAIN_NAT_IPV4
@@@ -281,10 -247,9 +285,9 @@@ config IP_NF_TARGET_SYNPROX
  # NAT + specific targets: nf_conntrack
  config IP_NF_NAT
  	tristate "iptables NAT support"
 -	depends on NF_CONNTRACK
 +	depends on NF_CONNTRACK_IPV4
  	default m if NETFILTER_ADVANCED=n
  	select NF_NAT
- 	select NF_NAT_IPV4
  	select NETFILTER_XT_NAT
  	help
  	  This enables the `nat' table in iptables. This allows masquerading,
diff --cc net/ipv4/netfilter/Makefile
index 8394c17c269f,b2cdf705fdf1..000000000000
--- a/net/ipv4/netfilter/Makefile
+++ b/net/ipv4/netfilter/Makefile
@@@ -3,16 -3,6 +3,19 @@@
  # Makefile for the netfilter modules on top of IPv4.
  #
  
++<<<<<<< HEAD
 +# objects for l3 independent conntrack
 +nf_conntrack_ipv4-y	:=  nf_conntrack_l3proto_ipv4.o nf_conntrack_proto_icmp.o
 +
 +# connection tracking
 +obj-$(CONFIG_NF_CONNTRACK_IPV4) += nf_conntrack_ipv4.o
 +
 +nf_nat_ipv4-y		:= nf_nat_l3proto_ipv4.o nf_nat_proto_icmp.o
 +nf_nat_ipv4-$(CONFIG_NF_NAT_MASQUERADE_IPV4) += nf_nat_masquerade_ipv4.o
 +obj-$(CONFIG_NF_NAT_IPV4) += nf_nat_ipv4.o
 +
++=======
++>>>>>>> 3bf195ae6037 (netfilter: nat: merge nf_nat_ipv4,6 into nat core)
  # defrag
  obj-$(CONFIG_NF_DEFRAG_IPV4) += nf_defrag_ipv4.o
  
diff --cc net/ipv6/netfilter/Kconfig
index fd93b5a5e481,a04a38166d8c..000000000000
--- a/net/ipv6/netfilter/Kconfig
+++ b/net/ipv6/netfilter/Kconfig
@@@ -126,23 -106,6 +126,26 @@@ config NF_LOG_IPV
  	default m if NETFILTER_ADVANCED=n
  	select NF_LOG_COMMON
  
++<<<<<<< HEAD
 +config NF_NAT_IPV6
 +	tristate "IPv6 NAT"
 +	depends on NF_CONNTRACK_IPV6
 +	depends on NETFILTER_ADVANCED
 +	select NF_NAT
 +	help
 +	  The IPv6 NAT option allows masquerading, port forwarding and other
 +	  forms of full Network Address Port Translation. This can be
 +	  controlled by iptables or nft.
 +
 +if NF_NAT_IPV6
 +
 +config NF_NAT_MASQUERADE_IPV6
 +	bool
 +
 +endif # NF_NAT_IPV6
 +
++=======
++>>>>>>> 3bf195ae6037 (netfilter: nat: merge nf_nat_ipv4,6 into nat core)
  config IP6_NF_IPTABLES
  	tristate "IP6 tables support (required for filtering)"
  	depends on INET && IPV6
@@@ -328,10 -291,9 +331,9 @@@ config IP6_NF_SECURIT
  
  config IP6_NF_NAT
  	tristate "ip6tables NAT support"
 -	depends on NF_CONNTRACK
 +	depends on NF_CONNTRACK_IPV6
  	depends on NETFILTER_ADVANCED
  	select NF_NAT
- 	select NF_NAT_IPV6
  	select NETFILTER_XT_NAT
  	help
  	  This enables the `nat' table in ip6tables. This allows masquerading,
diff --cc net/ipv6/netfilter/Makefile
index 10a5a1c87320,afb880427133..000000000000
--- a/net/ipv6/netfilter/Makefile
+++ b/net/ipv6/netfilter/Makefile
@@@ -11,16 -11,6 +11,19 @@@ obj-$(CONFIG_IP6_NF_RAW) += ip6table_ra
  obj-$(CONFIG_IP6_NF_SECURITY) += ip6table_security.o
  obj-$(CONFIG_IP6_NF_NAT) += ip6table_nat.o
  
++<<<<<<< HEAD
 +# objects for l3 independent conntrack
 +nf_conntrack_ipv6-y  :=  nf_conntrack_l3proto_ipv6.o nf_conntrack_proto_icmpv6.o
 +
 +# l3 independent conntrack
 +obj-$(CONFIG_NF_CONNTRACK_IPV6) += nf_conntrack_ipv6.o
 +
 +nf_nat_ipv6-y		:= nf_nat_l3proto_ipv6.o nf_nat_proto_icmpv6.o
 +nf_nat_ipv6-$(CONFIG_NF_NAT_MASQUERADE_IPV6) += nf_nat_masquerade_ipv6.o
 +obj-$(CONFIG_NF_NAT_IPV6) += nf_nat_ipv6.o
 +
++=======
++>>>>>>> 3bf195ae6037 (netfilter: nat: merge nf_nat_ipv4,6 into nat core)
  # defrag
  nf_defrag_ipv6-y := nf_defrag_ipv6_hooks.o nf_conntrack_reasm.o
  obj-$(CONFIG_NF_DEFRAG_IPV6) += nf_defrag_ipv6.o
diff --cc tools/testing/selftests/net/config
index cd3a2f1545b5,e9c860d00416..000000000000
--- a/tools/testing/selftests/net/config
+++ b/tools/testing/selftests/net/config
@@@ -14,3 -14,16 +14,19 @@@ CONFIG_IPV6_VTI=
  CONFIG_DUMMY=y
  CONFIG_BRIDGE=y
  CONFIG_VLAN_8021Q=y
++<<<<<<< HEAD
++=======
+ CONFIG_NETFILTER=y
+ CONFIG_NETFILTER_ADVANCED=y
+ CONFIG_NF_CONNTRACK=m
+ CONFIG_NF_NAT=m
+ CONFIG_IP6_NF_IPTABLES=m
+ CONFIG_IP_NF_IPTABLES=m
+ CONFIG_IP6_NF_NAT=m
+ CONFIG_IP_NF_NAT=m
+ CONFIG_NF_TABLES=m
+ CONFIG_NF_TABLES_IPV6=y
+ CONFIG_NF_TABLES_IPV4=y
+ CONFIG_NFT_CHAIN_NAT_IPV6=m
+ CONFIG_NFT_CHAIN_NAT_IPV4=m
++>>>>>>> 3bf195ae6037 (netfilter: nat: merge nf_nat_ipv4,6 into nat core)
* Unmerged path net/ipv4/netfilter/nf_nat_l3proto_ipv4.c
* Unmerged path net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
* Unmerged path net/netfilter/nf_nat_proto.c
* Unmerged path net/ipv4/netfilter/Kconfig
* Unmerged path net/ipv4/netfilter/Makefile
* Unmerged path net/ipv4/netfilter/nf_nat_l3proto_ipv4.c
* Unmerged path net/ipv6/netfilter/Kconfig
* Unmerged path net/ipv6/netfilter/Makefile
* Unmerged path net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index 0afbf3b2f362..56bcd54f0639 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -385,7 +385,13 @@ config NETFILTER_NETLINK_GLUE_CT
 	  the enqueued via NFNETLINK.
 
 config NF_NAT
-	tristate
+	tristate "Network Address Translation support"
+	depends on NF_CONNTRACK
+	default m if NETFILTER_ADVANCED=n
+	help
+	  The NAT option allows masquerading, port forwarding and other
+	  forms of full Network Address Port Translation. This can be
+	  controlled by iptables, ip6tables or nft.
 
 config NF_NAT_NEEDED
 	bool
diff --git a/net/netfilter/nf_nat_core.c b/net/netfilter/nf_nat_core.c
index 275265d75be2..eb19b3249609 100644
--- a/net/netfilter/nf_nat_core.c
+++ b/net/netfilter/nf_nat_core.c
@@ -1050,6 +1050,8 @@ static struct nf_nat_hook nat_hook = {
 	.manip_pkt		= nf_nat_manip_pkt,
 };
 
+int nf_nat_l3proto_init(void);
+void nf_nat_l3proto_exit(void);
 static int __init nf_nat_init(void)
 {
 	int ret, i;
@@ -1084,6 +1086,19 @@ static int __init nf_nat_init(void)
 	WARN_ON(nf_nat_hook != NULL);
 	RCU_INIT_POINTER(nf_nat_hook, &nat_hook);
 
+	ret = nf_nat_l3proto_init();
+	if (ret) {
+		nf_ct_extend_unregister(&nat_extend);
+		nf_ct_helper_expectfn_unregister(&follow_master_nat);
+		RCU_INIT_POINTER(nf_nat_hook, NULL);
+
+		synchronize_net();
+		kvfree(nf_nat_bysource);
+		unregister_pernet_subsys(&nat_net_ops);
+
+		return ret;
+	}
+
 	return 0;
 }
 
@@ -1094,6 +1109,8 @@ static void __exit nf_nat_cleanup(void)
 
 	nf_ct_iterate_destroy(nf_nat_proto_clean, &clean);
 
+	nf_nat_l3proto_exit();
+
 	nf_ct_extend_unregister(&nat_extend);
 	nf_ct_helper_expectfn_unregister(&follow_master_nat);
 	RCU_INIT_POINTER(nf_nat_hook, NULL);
* Unmerged path net/netfilter/nf_nat_proto.c
diff --git a/net/openvswitch/Kconfig b/net/openvswitch/Kconfig
index 89da9512ec1e..ac1cc6e38170 100644
--- a/net/openvswitch/Kconfig
+++ b/net/openvswitch/Kconfig
@@ -8,8 +8,6 @@ config OPENVSWITCH
 	depends on !NF_CONNTRACK || \
 		   (NF_CONNTRACK && ((!NF_DEFRAG_IPV6 || NF_DEFRAG_IPV6) && \
 				     (!NF_NAT || NF_NAT) && \
-				     (!NF_NAT_IPV4 || NF_NAT_IPV4) && \
-				     (!NF_NAT_IPV6 || NF_NAT_IPV6) && \
 				     (!NETFILTER_CONNCOUNT || NETFILTER_CONNCOUNT)))
 	select LIBCRC32C
 	select MPLS
diff --git a/net/openvswitch/conntrack.c b/net/openvswitch/conntrack.c
index 7f5686829476..43d4b3dfea30 100644
--- a/net/openvswitch/conntrack.c
+++ b/net/openvswitch/conntrack.c
@@ -750,14 +750,14 @@ static int ovs_ct_nat_execute(struct sk_buff *skb, struct nf_conn *ct,
 	switch (ctinfo) {
 	case IP_CT_RELATED:
 	case IP_CT_RELATED_REPLY:
-		if (IS_ENABLED(CONFIG_NF_NAT_IPV4) &&
+		if (IS_ENABLED(CONFIG_NF_NAT) &&
 		    skb->protocol == htons(ETH_P_IP) &&
 		    ip_hdr(skb)->protocol == IPPROTO_ICMP) {
 			if (!nf_nat_icmp_reply_translation(skb, ct, ctinfo,
 							   hooknum))
 				err = NF_DROP;
 			goto push;
-		} else if (IS_ENABLED(CONFIG_NF_NAT_IPV6) &&
+		} else if (IS_ENABLED(CONFIG_IPV6) &&
 			   skb->protocol == htons(ETH_P_IPV6)) {
 			__be16 frag_off;
 			u8 nexthdr = ipv6_hdr(skb)->nexthdr;
@@ -1705,7 +1705,7 @@ static bool ovs_ct_nat_to_attr(const struct ovs_conntrack_info *info,
 	}
 
 	if (info->range.flags & NF_NAT_RANGE_MAP_IPS) {
-		if (IS_ENABLED(CONFIG_NF_NAT_IPV4) &&
+		if (IS_ENABLED(CONFIG_NF_NAT) &&
 		    info->family == NFPROTO_IPV4) {
 			if (nla_put_in_addr(skb, OVS_NAT_ATTR_IP_MIN,
 					    info->range.min_addr.ip) ||
@@ -1714,7 +1714,7 @@ static bool ovs_ct_nat_to_attr(const struct ovs_conntrack_info *info,
 			     (nla_put_in_addr(skb, OVS_NAT_ATTR_IP_MAX,
 					      info->range.max_addr.ip))))
 				return false;
-		} else if (IS_ENABLED(CONFIG_NF_NAT_IPV6) &&
+		} else if (IS_ENABLED(CONFIG_IPV6) &&
 			   info->family == NFPROTO_IPV6) {
 			if (nla_put_in6_addr(skb, OVS_NAT_ATTR_IP_MIN,
 					     &info->range.min_addr.in6) ||
* Unmerged path tools/testing/selftests/net/config
