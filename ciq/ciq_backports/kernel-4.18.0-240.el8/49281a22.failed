gpio: of: Fix hard-assigned valid_mask for OF case

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Stephen Boyd <swboyd@chromium.org>
commit 49281a222ac42724b94f6c874f43a284ec58d37e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/49281a22.failed

The recent refactoring to break out OF code to its own file
contained a bug letting the need_valid_mask
be overridden by the need of the device tree range check,
and if there were no ranges, but device tree was active
and the reserved GPIO used in another way, things likely
crash.

	Cc: Mark Brown <broonie@kernel.org>
	Cc: Bjorn Andersson <bjorn.andersson@linaro.org>
	Cc: Stephen Boyd <swboyd@chromium.org>
Fixes: f626d6dfb709 ("gpio: of: Break out OF-only code")
	Reported-by: Mark Brown <broonie@kernel.org>
	Suggested-by: Stephen Boyd <swboyd@chromium.org>
	Signed-off-by: Stephen Boyd <swboyd@chromium.org>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 49281a222ac42724b94f6c874f43a284ec58d37e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpiolib-of.c
#	drivers/gpio/gpiolib-of.h
#	drivers/gpio/gpiolib.c
diff --cc drivers/gpio/gpiolib-of.c
index e5bcf255f2bf,e39b4290b80c..000000000000
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@@ -53,6 -81,23 +53,26 @@@ static struct gpio_desc *of_xlate_and_g
  	return gpiochip_get_desc(chip, ret);
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * of_gpio_need_valid_mask() - figure out if the OF GPIO driver needs
+  * to set the .valid_mask
+  * @dev: the device for the GPIO provider
+  * @return: true if the valid mask needs to be set
+  */
+ bool of_gpio_need_valid_mask(const struct gpio_chip *gc)
+ {
+ 	int size;
+ 	struct device_node *np = gc->of_node;
+ 
+ 	size = of_property_count_u32_elems(np,  "gpio-reserved-ranges");
+ 	if (size > 0 && size % 2 == 0)
+ 		return true;
+ 	return false;
+ }
+ 
++>>>>>>> 49281a222ac4 (gpio: of: Fix hard-assigned valid_mask for OF case)
  static void of_gpio_flags_quirks(struct device_node *np,
  				 const char *propname,
  				 enum of_gpio_flags *flags,
diff --cc drivers/gpio/gpiolib.c
index a54d417d4239,20f13129cdaa..000000000000
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@@ -360,22 -361,15 +360,28 @@@ static unsigned long *gpiochip_allocate
  	return p;
  }
  
 -static int gpiochip_alloc_valid_mask(struct gpio_chip *gc)
 +static int gpiochip_alloc_valid_mask(struct gpio_chip *gpiochip)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_OF_GPIO
 +	int size;
 +	struct device_node *np = gpiochip->of_node;
 +
 +	size = of_property_count_u32_elems(np,  "gpio-reserved-ranges");
 +	if (size > 0 && size % 2 == 0)
 +		gpiochip->need_valid_mask = true;
 +#endif
 +
 +	if (!gpiochip->need_valid_mask)
++=======
+ 	if (of_gpio_need_valid_mask(gc))
+ 		gc->need_valid_mask = true;
+ 	if (!gc->need_valid_mask)
++>>>>>>> 49281a222ac4 (gpio: of: Fix hard-assigned valid_mask for OF case)
  		return 0;
  
 -	gc->valid_mask = gpiochip_allocate_mask(gc);
 -	if (!gc->valid_mask)
 +	gpiochip->valid_mask = gpiochip_allocate_mask(gpiochip);
 +	if (!gpiochip->valid_mask)
  		return -ENOMEM;
  
  	return 0;
* Unmerged path drivers/gpio/gpiolib-of.h
* Unmerged path drivers/gpio/gpiolib-of.c
* Unmerged path drivers/gpio/gpiolib-of.h
* Unmerged path drivers/gpio/gpiolib.c
