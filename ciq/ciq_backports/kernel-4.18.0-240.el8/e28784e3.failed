bpf: Factor out attach_type to prog_type mapping for attach/detach

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit e28784e3781e19f546bd2c2cd7c1c4e7c54e7f73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e28784e3.failed

Factor out logic mapping expected program attach type to program type and
subsequent handling of program attach/detach. Also list out all supported
cgroup BPF program types explicitly to prevent accidental bugs once more
program types are added to a mapping. Do the same for prog_query API.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200325065746.640559-3-andriin@fb.com
(cherry picked from commit e28784e3781e19f546bd2c2cd7c1c4e7c54e7f73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/syscall.c
index b5b79e59cfd4,fd4181939064..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -1958,30 -2535,13 +1958,16 @@@ static int bpf_prog_attach_check_attach
  	}
  }
  
++<<<<<<< HEAD
 +#define BPF_PROG_ATTACH_LAST_FIELD attach_flags
- 
- #define BPF_F_ATTACH_MASK \
- 	(BPF_F_ALLOW_OVERRIDE | BPF_F_ALLOW_MULTI)
- 
- static int bpf_prog_attach(const union bpf_attr *attr)
++=======
+ static enum bpf_prog_type
+ attach_type_to_prog_type(enum bpf_attach_type attach_type)
  {
- 	enum bpf_prog_type ptype;
- 	struct bpf_prog *prog;
- 	int ret;
- 
- 	if (!capable(CAP_NET_ADMIN))
- 		return -EPERM;
- 
- 	if (CHECK_ATTR(BPF_PROG_ATTACH))
- 		return -EINVAL;
- 
- 	if (attr->attach_flags & ~BPF_F_ATTACH_MASK)
- 		return -EINVAL;
- 
- 	switch (attr->attach_type) {
+ 	switch (attach_type) {
  	case BPF_CGROUP_INET_INGRESS:
  	case BPF_CGROUP_INET_EGRESS:
- 		ptype = BPF_PROG_TYPE_CGROUP_SKB;
+ 		return BPF_PROG_TYPE_CGROUP_SKB;
  		break;
  	case BPF_CGROUP_INET_SOCK_CREATE:
  	case BPF_CGROUP_INET4_POST_BIND:
@@@ -1996,37 -2555,53 +1981,54 @@@
  	case BPF_CGROUP_UDP6_SENDMSG:
  	case BPF_CGROUP_UDP4_RECVMSG:
  	case BPF_CGROUP_UDP6_RECVMSG:
- 		ptype = BPF_PROG_TYPE_CGROUP_SOCK_ADDR;
- 		break;
+ 		return BPF_PROG_TYPE_CGROUP_SOCK_ADDR;
  	case BPF_CGROUP_SOCK_OPS:
- 		ptype = BPF_PROG_TYPE_SOCK_OPS;
- 		break;
+ 		return BPF_PROG_TYPE_SOCK_OPS;
  	case BPF_CGROUP_DEVICE:
- 		ptype = BPF_PROG_TYPE_CGROUP_DEVICE;
- 		break;
+ 		return BPF_PROG_TYPE_CGROUP_DEVICE;
  	case BPF_SK_MSG_VERDICT:
- 		ptype = BPF_PROG_TYPE_SK_MSG;
- 		break;
+ 		return BPF_PROG_TYPE_SK_MSG;
  	case BPF_SK_SKB_STREAM_PARSER:
  	case BPF_SK_SKB_STREAM_VERDICT:
- 		ptype = BPF_PROG_TYPE_SK_SKB;
- 		break;
+ 		return BPF_PROG_TYPE_SK_SKB;
  	case BPF_LIRC_MODE2:
- 		ptype = BPF_PROG_TYPE_LIRC_MODE2;
- 		break;
+ 		return BPF_PROG_TYPE_LIRC_MODE2;
  	case BPF_FLOW_DISSECTOR:
- 		ptype = BPF_PROG_TYPE_FLOW_DISSECTOR;
- 		break;
+ 		return BPF_PROG_TYPE_FLOW_DISSECTOR;
  	case BPF_CGROUP_SYSCTL:
- 		ptype = BPF_PROG_TYPE_CGROUP_SYSCTL;
- 		break;
+ 		return BPF_PROG_TYPE_CGROUP_SYSCTL;
  	case BPF_CGROUP_GETSOCKOPT:
  	case BPF_CGROUP_SETSOCKOPT:
- 		ptype = BPF_PROG_TYPE_CGROUP_SOCKOPT;
- 		break;
+ 		return BPF_PROG_TYPE_CGROUP_SOCKOPT;
  	default:
- 		return -EINVAL;
+ 		return BPF_PROG_TYPE_UNSPEC;
  	}
+ }
+ 
+ #define BPF_PROG_ATTACH_LAST_FIELD replace_bpf_fd
++>>>>>>> e28784e3781e (bpf: Factor out attach_type to prog_type mapping for attach/detach)
+ 
+ #define BPF_F_ATTACH_MASK \
 -	(BPF_F_ALLOW_OVERRIDE | BPF_F_ALLOW_MULTI | BPF_F_REPLACE)
++	(BPF_F_ALLOW_OVERRIDE | BPF_F_ALLOW_MULTI)
+ 
+ static int bpf_prog_attach(const union bpf_attr *attr)
+ {
+ 	enum bpf_prog_type ptype;
+ 	struct bpf_prog *prog;
+ 	int ret;
+ 
+ 	if (!capable(CAP_NET_ADMIN))
+ 		return -EPERM;
+ 
+ 	if (CHECK_ATTR(BPF_PROG_ATTACH))
+ 		return -EINVAL;
+ 
+ 	if (attr->attach_flags & ~BPF_F_ATTACH_MASK)
+ 		return -EINVAL;
+ 
+ 	ptype = attach_type_to_prog_type(attr->attach_type);
+ 	if (ptype == BPF_PROG_TYPE_UNSPEC)
+ 		return -EINVAL;
  
  	prog = bpf_prog_get_type(attr->attach_bpf_fd, ptype);
  	if (IS_ERR(prog))
* Unmerged path kernel/bpf/syscall.c
