io_uring: ensure workqueue offload grabs ring mutex for poll list

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jens Axboe <axboe@kernel.dk>
commit 11ba820bf163e224bf5dd44e545a66a44a5b1d7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/11ba820b.failed

A previous commit moved the locking for the async sqthread, but didn't
take into account that the io-wq workers still need it. We can't use
req->in_async for this anymore as both the sqthread and io-wq workers
set it, gate the need for locking on io_wq_current_is_worker() instead.

Fixes: 8a4955ff1cca ("io_uring: sqthread should grab ctx->uring_lock for submissions")
	Reported-by: Bijan Mottahedeh <bijan.mottahedeh@oracle.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 11ba820bf163e224bf5dd44e545a66a44a5b1d7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index ab99aea677bc,52e5764540e4..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -1940,10 -3292,12 +1942,19 @@@ static int __io_submit_sqe(struct io_ri
  			return -EAGAIN;
  
  		/* workqueue context doesn't hold uring_lock, grab it now */
++<<<<<<< HEAD
 +		if (s->needs_lock)
 +			mutex_lock(&ctx->uring_lock);
 +		io_iopoll_req_issued(req);
 +		if (s->needs_lock)
++=======
+ 		if (in_async)
+ 			mutex_lock(&ctx->uring_lock);
+ 
+ 		io_iopoll_req_issued(req);
+ 
+ 		if (in_async)
++>>>>>>> 11ba820bf163 (io_uring: ensure workqueue offload grabs ring mutex for poll list)
  			mutex_unlock(&ctx->uring_lock);
  	}
  
* Unmerged path fs/io_uring.c
