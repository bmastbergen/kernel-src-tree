arm64: Add ARM64_WORKAROUND_1319367 for all A57 and A72 versions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [arm64] Add ARM64_WORKAROUND_1319367 for all A57 and A72 versions (Gavin Shan) [1814009]
Rebuild_FUZZ: 94.21%
commit-author Marc Zyngier <maz@kernel.org>
commit f75e2294a4415621b223150065c8d1e823896da5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f75e2294.failed

Rework the EL2 vector hardening that is only selected for A57 and A72
so that the table can also be used for ARM64_WORKAROUND_1319367.

	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit f75e2294a4415621b223150065c8d1e823896da5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/cpucaps.h
#	arch/arm64/kernel/cpu_errata.c
diff --cc arch/arm64/include/asm/cpucaps.h
index 5ca3d91a67b5,277e37b2a513..000000000000
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@@ -60,10 -49,10 +60,14 @@@
  #define ARM64_HAS_ADDRESS_AUTH_IMP_DEF		39
  #define ARM64_HAS_GENERIC_AUTH_ARCH		40
  #define ARM64_HAS_GENERIC_AUTH_IMP_DEF		41
 -#define ARM64_HAS_IRQ_PRIO_MASKING		42
 -#define ARM64_HAS_DCPODP			43
 +#define ARM64_WORKAROUND_CAVIUM_TX2_219_TVM	42
 +#define ARM64_WORKAROUND_CAVIUM_TX2_219_PRFM	43
  #define ARM64_WORKAROUND_1463225		44
++<<<<<<< HEAD
 +#define ARM64_WORKAROUND_1542419		45
++=======
+ #define ARM64_WORKAROUND_1319367		45
++>>>>>>> f75e2294a441 (arm64: Add ARM64_WORKAROUND_1319367 for all A57 and A72 versions)
  
  #define ARM64_NCAPS				46
  
diff --cc arch/arm64/kernel/cpu_errata.c
index 9de4d99cff30,a7afa6d4a58f..000000000000
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@@ -630,45 -623,9 +630,49 @@@ check_branch_predictor(const struct arm
  	return (need_wa > 0);
  }
  
++<<<<<<< HEAD
 +static const __maybe_unused struct midr_range tx2_family_cpus[] = {
 +	MIDR_ALL_VERSIONS(MIDR_BRCM_VULCAN),
 +	MIDR_ALL_VERSIONS(MIDR_CAVIUM_THUNDERX2),
 +	{},
 +};
 +
 +static bool __maybe_unused
 +needs_tx2_tvm_workaround(const struct arm64_cpu_capabilities *entry,
 +			 int scope)
 +{
 +	int i;
 +
 +	if (!is_affected_midr_range_list(entry, scope) ||
 +	    !is_hyp_mode_available())
 +		return false;
 +
 +	for_each_possible_cpu(i) {
 +		if (MPIDR_AFFINITY_LEVEL(cpu_logical_map(i), 0) != 0)
 +			return true;
 +	}
 +
 +	return false;
 +}
 +
 +static bool __maybe_unused
 +has_neoverse_n1_erratum_1542419(const struct arm64_cpu_capabilities *entry,
 +				int scope)
 +{
 +	u32 midr = read_cpuid_id();
 +	bool has_dic = read_cpuid_cachetype() & BIT(CTR_DIC_SHIFT);
 +	const struct midr_range range = MIDR_ALL_VERSIONS(MIDR_NEOVERSE_N1);
 +
 +	WARN_ON(scope != SCOPE_LOCAL_CPU || preemptible());
 +	return is_midr_in_range(midr, &range) && has_dic;
 +}
 +
 +#ifdef CONFIG_HARDEN_EL2_VECTORS
++=======
+ #if defined(CONFIG_HARDEN_EL2_VECTORS) || defined(CONFIG_ARM64_ERRATUM_1319367)
++>>>>>>> f75e2294a441 (arm64: Add ARM64_WORKAROUND_1319367 for all A57 and A72 versions)
  
- static const struct midr_range arm64_harden_el2_vectors[] = {
+ static const struct midr_range ca57_a72[] = {
  	MIDR_ALL_VERSIONS(MIDR_CORTEX_A57),
  	MIDR_ALL_VERSIONS(MIDR_CORTEX_A72),
  	{},
@@@ -862,8 -819,7 +866,12 @@@ const struct arm64_cpu_capabilities arm
  	{
  		.desc = "EL2 vector hardening",
  		.capability = ARM64_HARDEN_EL2_VECTORS,
++<<<<<<< HEAD
 +		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
 +		ERRATA_MIDR_RANGE_LIST(arm64_harden_el2_vectors),
++=======
+ 		ERRATA_MIDR_RANGE_LIST(ca57_a72),
++>>>>>>> f75e2294a441 (arm64: Add ARM64_WORKAROUND_1319367 for all A57 and A72 versions)
  	},
  #endif
  	{
@@@ -909,14 -852,11 +917,22 @@@
  		.matches = has_cortex_a76_erratum_1463225,
  	},
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_ARM64_ERRATUM_1542419
 +	{
 +		/* we depend on the firmware portion for correctness */
 +		.desc = "ARM erratum 1542419 (kernel portion)",
 +		.capability = ARM64_WORKAROUND_1542419,
 +		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
 +		.matches = has_neoverse_n1_erratum_1542419,
 +		.cpu_enable = cpu_enable_trap_ctr_access,
++=======
+ #ifdef CONFIG_ARM64_ERRATUM_1319367
+ 	{
+ 		.desc = "ARM erratum 1319367",
+ 		.capability = ARM64_WORKAROUND_1319367,
+ 		ERRATA_MIDR_RANGE_LIST(ca57_a72),
++>>>>>>> f75e2294a441 (arm64: Add ARM64_WORKAROUND_1319367 for all A57 and A72 versions)
  	},
  #endif
  	{
* Unmerged path arch/arm64/include/asm/cpucaps.h
* Unmerged path arch/arm64/kernel/cpu_errata.c
