selftests/bpf: Make tcp_rtt test more robust to failures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 4cd729fa022cb5142e5b65f25589af61c8148cf6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4cd729fa.failed

Switch to non-blocking accept and wait for server thread to exit before
proceeding. I noticed that sometimes tcp_rtt server thread failure would
"spill over" into other tests (that would run after tcp_rtt), probably just
because server thread exits much later and tcp_rtt doesn't wait for it.

v1->v2:
  - add usleep() while waiting on initial non-blocking accept() (Stanislav);

Fixes: 8a03222f508b ("selftests/bpf: test_progs: fix client/server race in tcp_rtt")
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Reviewed-by: Stanislav Fomichev <sdf@google.com>
Link: https://lore.kernel.org/bpf/20200311222749.458015-1-andriin@fb.com
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 4cd729fa022cb5142e5b65f25589af61c8148cf6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_tcp_rtt.c
diff --cc tools/testing/selftests/bpf/test_tcp_rtt.c
index a5e1b315bd8d,e08f6bb17700..000000000000
--- a/tools/testing/selftests/bpf/test_tcp_rtt.c
+++ b/tools/testing/selftests/bpf/test_tcp_rtt.c
@@@ -235,62 -221,59 +236,94 @@@ static void *server_thread(void *arg
  	pthread_cond_signal(&server_started);
  	pthread_mutex_unlock(&server_started_mtx);
  
++<<<<<<< HEAD:tools/testing/selftests/bpf/test_tcp_rtt.c
 +	if (err < 0)
 +		error(1, errno, "Failed to listed on socket");
 +
 +	client_fd = accept(fd, (struct sockaddr *)&addr, &len);
 +	if (client_fd < 0)
 +		error(1, errno, "Failed to accept client");
 +
 +	/* Wait for the next connection (that never arrives)
 +	 * to keep this thread alive to prevent calling
 +	 * close() on client_fd.
 +	 */
 +	if (accept(fd, (struct sockaddr *)&addr, &len) >= 0)
 +		error(1, errno, "Unexpected success in second accept");
++=======
+ 	if (CHECK_FAIL(err < 0)) {
+ 		perror("Failed to listed on socket");
+ 		return ERR_PTR(err);
+ 	}
+ 
+ 	while (!server_done) {
+ 		client_fd = accept(fd, (struct sockaddr *)&addr, &len);
+ 		if (client_fd == -1 && errno == EAGAIN) {
+ 			usleep(50);
+ 			continue;
+ 		}
+ 		break;
+ 	}
+ 	if (CHECK_FAIL(client_fd < 0)) {
+ 		perror("Failed to accept client");
+ 		return ERR_PTR(err);
+ 	}
+ 
+ 	while (!server_done)
+ 		usleep(50);
++>>>>>>> 4cd729fa022c (selftests/bpf: Make tcp_rtt test more robust to failures):tools/testing/selftests/bpf/prog_tests/tcp_rtt.c
  
  	close(client_fd);
  
  	return NULL;
  }
  
 -void test_tcp_rtt(void)
 +int main(int args, char **argv)
  {
  	int server_fd, cgroup_fd;
 +	int err = EXIT_SUCCESS;
  	pthread_t tid;
+ 	void *server_res;
  
 -	cgroup_fd = test__join_cgroup("/tcp_rtt");
 -	if (CHECK_FAIL(cgroup_fd < 0))
 -		return;
 +	if (setup_cgroup_environment())
 +		goto cleanup_obj;
 +
 +	cgroup_fd = create_and_get_cgroup(CG_PATH);
 +	if (cgroup_fd < 0)
 +		goto cleanup_cgroup_env;
 +
 +	if (join_cgroup(CG_PATH))
 +		goto cleanup_cgroup;
  
  	server_fd = start_server();
 -	if (CHECK_FAIL(server_fd < 0))
 -		goto close_cgroup_fd;
 +	if (server_fd < 0) {
 +		err = EXIT_FAILURE;
 +		goto cleanup_cgroup;
 +	}
  
 -	if (CHECK_FAIL(pthread_create(&tid, NULL, server_thread,
 -				      (void *)&server_fd)))
 +	if ((pthread_create(&tid, NULL, server_thread,
 +			    (void *)&server_fd))) {
 +		err = EXIT_FAILURE;
  		goto close_server_fd;
 +	}
  
  	pthread_mutex_lock(&server_started_mtx);
  	pthread_cond_wait(&server_started, &server_started_mtx);
  	pthread_mutex_unlock(&server_started_mtx);
  
++<<<<<<< HEAD:tools/testing/selftests/bpf/test_tcp_rtt.c
 +	if (run_test(cgroup_fd, server_fd))
 +		err = EXIT_FAILURE;
 +
 +	printf("test_sockopt_sk: %s\n",
 +	       err == EXIT_SUCCESS ? "PASSED" : "FAILED");
++=======
+ 	CHECK_FAIL(run_test(cgroup_fd, server_fd));
+ 
+ 	server_done = true;
+ 	pthread_join(tid, &server_res);
+ 	CHECK_FAIL(IS_ERR(server_res));
++>>>>>>> 4cd729fa022c (selftests/bpf: Make tcp_rtt test more robust to failures):tools/testing/selftests/bpf/prog_tests/tcp_rtt.c
  
  close_server_fd:
  	close(server_fd);
* Unmerged path tools/testing/selftests/bpf/test_tcp_rtt.c
