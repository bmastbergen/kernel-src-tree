Bluetooth: hci_qca: Set HCI_QUIRK_SIMULTANEOUS_DISCOVERY for QCA UART Radio

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rocky Liao <rjliao@codeaurora.org>
commit e14c167a58b80803f35edf575a33562411f9170d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e14c167a.failed

QCA UART Bluetooth controllers can do both LE scan and BR/EDR inquiry
at once, need to set HCI_QUIRK_SIMULTANEOUS_DISCOVERY quirk.

	Signed-off-by: Rocky Liao <rjliao@codeaurora.org>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit e14c167a58b80803f35edf575a33562411f9170d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/hci_qca.c
diff --cc drivers/bluetooth/hci_qca.c
index c7723b08787d,15753f6bce80..000000000000
--- a/drivers/bluetooth/hci_qca.c
+++ b/drivers/bluetooth/hci_qca.c
@@@ -914,47 -1230,67 +914,57 @@@ static int qca_setup(struct hci_uart *h
  	struct hci_dev *hdev = hu->hdev;
  	struct qca_data *qca = hu->priv;
  	unsigned int speed, qca_baudrate = QCA_BAUDRATE_115200;
 -	enum qca_btsoc_type soc_type = qca_soc_type(hu);
 -	const char *firmware_name = qca_get_firmware_name(hu);
  	int ret;
 -	int soc_ver = 0;
  
 -	ret = qca_check_speeds(hu);
 -	if (ret)
 -		return ret;
 +	bt_dev_info(hdev, "ROME setup");
  
  	/* Patch downloading has to be done without IBS mode */
 -	clear_bit(QCA_IBS_ENABLED, &qca->flags);
 -
 +	clear_bit(STATE_IN_BAND_SLEEP_ENABLED, &qca->flags);
 +
++<<<<<<< HEAD
 +	/* Setup initial baudrate */
 +	speed = 0;
 +	if (hu->init_speed)
 +		speed = hu->init_speed;
 +	else if (hu->proto->init_speed)
 +		speed = hu->proto->init_speed;
++=======
+ 	/* Enable controller to do both LE scan and BR/EDR inquiry
+ 	 * simultaneously.
+ 	 */
+ 	set_bit(HCI_QUIRK_SIMULTANEOUS_DISCOVERY, &hdev->quirks);
+ 
+ 	if (qca_is_wcn399x(soc_type)) {
+ 		bt_dev_info(hdev, "setting up wcn3990");
++>>>>>>> e14c167a58b8 (Bluetooth: hci_qca: Set HCI_QUIRK_SIMULTANEOUS_DISCOVERY for QCA UART Radio)
  
 -		/* Enable NON_PERSISTENT_SETUP QUIRK to ensure to execute
 -		 * setup for every hci up.
 -		 */
 -		set_bit(HCI_QUIRK_NON_PERSISTENT_SETUP, &hdev->quirks);
 -		set_bit(HCI_QUIRK_USE_BDADDR_PROPERTY, &hdev->quirks);
 -		hu->hdev->shutdown = qca_power_off;
 -		ret = qca_wcn3990_init(hu);
 -		if (ret)
 -			return ret;
 -
 -		ret = qca_read_soc_version(hdev, &soc_ver);
 -		if (ret)
 -			return ret;
 -	} else {
 -		bt_dev_info(hdev, "ROME setup");
 -		qca_set_speed(hu, QCA_INIT_SPEED);
 -	}
 +	if (speed)
 +		host_set_baudrate(hu, speed);
  
  	/* Setup user speed if needed */
 -	speed = qca_get_speed(hu, QCA_OPER_SPEED);
 -	if (speed) {
 -		ret = qca_set_speed(hu, QCA_OPER_SPEED);
 -		if (ret)
 -			return ret;
 +	speed = 0;
 +	if (hu->oper_speed)
 +		speed = hu->oper_speed;
 +	else if (hu->proto->oper_speed)
 +		speed = hu->proto->oper_speed;
  
 +	if (speed) {
  		qca_baudrate = qca_get_baudrate_value(speed);
 -	}
  
 -	if (!qca_is_wcn399x(soc_type)) {
 -		/* Get QCA version information */
 -		ret = qca_read_soc_version(hdev, &soc_ver);
 -		if (ret)
 +		bt_dev_info(hdev, "Set UART speed to %d", speed);
 +		ret = qca_set_baudrate(hdev, qca_baudrate);
 +		if (ret) {
 +			bt_dev_err(hdev, "Failed to change the baud rate (%d)",
 +				   ret);
  			return ret;
 +		}
 +		host_set_baudrate(hu, speed);
  	}
  
 -	bt_dev_info(hdev, "QCA controller version 0x%08x", soc_ver);
  	/* Setup patch / NVM configurations */
 -	ret = qca_uart_setup(hdev, qca_baudrate, soc_type, soc_ver,
 -			firmware_name);
 +	ret = qca_uart_setup_rome(hdev, qca_baudrate);
  	if (!ret) {
 -		set_bit(QCA_IBS_ENABLED, &qca->flags);
 +		set_bit(STATE_IN_BAND_SLEEP_ENABLED, &qca->flags);
  		qca_debugfs_init(hdev);
  	} else if (ret == -ENOENT) {
  		/* No patch/nvm-config found, run with original fw/config */
* Unmerged path drivers/bluetooth/hci_qca.c
