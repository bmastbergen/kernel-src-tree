PM: QoS: Drop PM_QOS_CPU_DMA_LATENCY and rename related functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 67b06ba01857ed077e1a66bfa139156e7c68bab2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/67b06ba0.failed

Drop the PM QoS classes enum including PM_QOS_CPU_DMA_LATENCY,
drop the wrappers around pm_qos_request(), pm_qos_request_active(),
and pm_qos_add/update/remove_request() introduced previously, rename
these functions, respectively, to cpu_latency_qos_limit(),
cpu_latency_qos_request_active(), and
cpu_latency_qos_add/update/remove_request(), and update their
kerneldoc comments.  [While at it, drop some useless comments from
these functions.]

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
	Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
	Tested-by: Amit Kucheria <amit.kucheria@linaro.org>
(cherry picked from commit 67b06ba01857ed077e1a66bfa139156e7c68bab2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pm_qos.h
#	kernel/power/qos.c
diff --cc include/linux/pm_qos.h
index 7df56233f298,e0ca4d780457..000000000000
--- a/include/linux/pm_qos.h
+++ b/include/linux/pm_qos.h
@@@ -113,17 -135,12 +105,26 @@@ int pm_qos_update_target(struct pm_qos_
  bool pm_qos_update_flags(struct pm_qos_flags *pqf,
  			 struct pm_qos_flags_request *req,
  			 enum pm_qos_req_action action, s32 val);
++<<<<<<< HEAD
 +void pm_qos_add_request(struct pm_qos_request *req, int pm_qos_class,
 +			s32 value);
 +void pm_qos_update_request(struct pm_qos_request *req,
 +			   s32 new_value);
 +void pm_qos_remove_request(struct pm_qos_request *req);
 +
 +int pm_qos_request(int pm_qos_class);
 +int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier);
 +int pm_qos_remove_notifier(int pm_qos_class, struct notifier_block *notifier);
 +int pm_qos_request_active(struct pm_qos_request *req);
 +s32 pm_qos_read_value(struct pm_qos_constraints *c);
++=======
+ 
+ s32 cpu_latency_qos_limit(void);
+ bool cpu_latency_qos_request_active(struct pm_qos_request *req);
+ void cpu_latency_qos_add_request(struct pm_qos_request *req, s32 value);
+ void cpu_latency_qos_update_request(struct pm_qos_request *req, s32 new_value);
+ void cpu_latency_qos_remove_request(struct pm_qos_request *req);
++>>>>>>> 67b06ba01857 (PM: QoS: Drop PM_QOS_CPU_DMA_LATENCY and rename related functions)
  
  #ifdef CONFIG_PM
  enum pm_qos_flags_status __dev_pm_qos_flags(struct device *dev, s32 mask);
diff --cc kernel/power/qos.c
index 61dc8358d615,7374c76f409a..000000000000
--- a/kernel/power/qos.c
+++ b/kernel/power/qos.c
@@@ -245,160 -219,129 +245,200 @@@ bool pm_qos_update_flags(struct pm_qos_
  	return prev_value != curr_value;
  }
  
 -/* Definitions related to the CPU latency QoS. */
 -
 -static struct pm_qos_constraints cpu_latency_constraints = {
 -	.list = PLIST_HEAD_INIT(cpu_latency_constraints.list),
 -	.target_value = PM_QOS_CPU_LATENCY_DEFAULT_VALUE,
 -	.default_value = PM_QOS_CPU_LATENCY_DEFAULT_VALUE,
 -	.no_constraint_value = PM_QOS_CPU_LATENCY_DEFAULT_VALUE,
 -	.type = PM_QOS_MIN,
 -};
 -
  /**
++<<<<<<< HEAD
 + * pm_qos_request - returns current system wide qos expectation
 + * @pm_qos_class: identification of which qos value is requested
 + *
 + * This function returns the current target value.
 + */
 +int pm_qos_request(int pm_qos_class)
++=======
+  * cpu_latency_qos_limit - Return current system-wide CPU latency QoS limit.
+  */
+ s32 cpu_latency_qos_limit(void)
++>>>>>>> 67b06ba01857 (PM: QoS: Drop PM_QOS_CPU_DMA_LATENCY and rename related functions)
  {
 -	return pm_qos_read_value(&cpu_latency_constraints);
 +	return pm_qos_read_value(pm_qos_array[pm_qos_class]->constraints);
  }
 +EXPORT_SYMBOL_GPL(pm_qos_request);
  
- int pm_qos_request_active(struct pm_qos_request *req)
+ /**
+  * cpu_latency_qos_request_active - Check the given PM QoS request.
+  * @req: PM QoS request to check.
+  *
+  * Return: 'true' if @req has been added to the CPU latency QoS list, 'false'
+  * otherwise.
+  */
+ bool cpu_latency_qos_request_active(struct pm_qos_request *req)
  {
 -	return req->qos == &cpu_latency_constraints;
 +	return req->pm_qos_class != 0;
  }
- EXPORT_SYMBOL_GPL(pm_qos_request_active);
+ EXPORT_SYMBOL_GPL(cpu_latency_qos_request_active);
  
 -static void cpu_latency_qos_apply(struct pm_qos_request *req,
 -				  enum pm_qos_req_action action, s32 value)
 +static void __pm_qos_update_request(struct pm_qos_request *req,
 +			   s32 new_value)
  {
 -	int ret = pm_qos_update_target(req->qos, &req->node, action, value);
 -	if (ret > 0)
 -		wake_up_all_idle_cpus();
 +	trace_pm_qos_update_request(req->pm_qos_class, new_value);
 +
 +	if (new_value != req->node.prio)
 +		pm_qos_update_target(
 +			pm_qos_array[req->pm_qos_class]->constraints,
 +			&req->node, PM_QOS_UPDATE_REQ, new_value);
  }
  
  /**
++<<<<<<< HEAD
 + * pm_qos_add_request - inserts new qos request into the list
 + * @req: pointer to a preallocated handle
 + * @pm_qos_class: identifies which list of qos request to use
 + * @value: defines the qos request
 + *
 + * This function inserts a new entry in the pm_qos_class list of requested qos
 + * performance characteristics.  It recomputes the aggregate QoS expectations
 + * for the pm_qos_class of parameters and initializes the pm_qos_request
 + * handle.  Caller needs to save this handle for later use in updates and
 + * removal.
 + */
 +
 +void pm_qos_add_request(struct pm_qos_request *req,
 +			int pm_qos_class, s32 value)
++=======
+  * cpu_latency_qos_add_request - Add new CPU latency QoS request.
+  * @req: Pointer to a preallocated handle.
+  * @value: Requested constraint value.
+  *
+  * Use @value to initialize the request handle pointed to by @req, insert it as
+  * a new entry to the CPU latency QoS list and recompute the effective QoS
+  * constraint for that list.
+  *
+  * Callers need to save the handle for later use in updates and removal of the
+  * QoS request represented by it.
+  */
+ void cpu_latency_qos_add_request(struct pm_qos_request *req, s32 value)
++>>>>>>> 67b06ba01857 (PM: QoS: Drop PM_QOS_CPU_DMA_LATENCY and rename related functions)
  {
- 	if (!req) /*guard against callers passing in null */
+ 	if (!req)
  		return;
  
- 	if (pm_qos_request_active(req)) {
- 		WARN(1, KERN_ERR "pm_qos_add_request() called for already added request\n");
+ 	if (cpu_latency_qos_request_active(req)) {
+ 		WARN(1, KERN_ERR "%s called for already added request\n", __func__);
  		return;
  	}
 -
 -	trace_pm_qos_add_request(value);
 -
 -	req->qos = &cpu_latency_constraints;
 -	cpu_latency_qos_apply(req, PM_QOS_ADD_REQ, value);
 +	req->pm_qos_class = pm_qos_class;
 +	trace_pm_qos_add_request(pm_qos_class, value);
 +	pm_qos_update_target(pm_qos_array[pm_qos_class]->constraints,
 +			     &req->node, PM_QOS_ADD_REQ, value);
  }
- EXPORT_SYMBOL_GPL(pm_qos_add_request);
+ EXPORT_SYMBOL_GPL(cpu_latency_qos_add_request);
  
  /**
-  * pm_qos_update_request - modifies an existing qos request
-  * @req : handle to list element holding a pm_qos request to use
-  * @value: defines the qos request
+  * cpu_latency_qos_update_request - Modify existing CPU latency QoS request.
+  * @req : QoS request to update.
+  * @new_value: New requested constraint value.
   *
++<<<<<<< HEAD
 + * Updates an existing qos request for the pm_qos_class of parameters along
 + * with updating the target pm_qos_class value.
 + *
 + * Attempts are made to make this code callable on hot code paths.
 + */
 +void pm_qos_update_request(struct pm_qos_request *req,
 +			   s32 new_value)
++=======
+  * Use @new_value to update the QoS request represented by @req in the CPU
+  * latency QoS list along with updating the effective constraint value for that
+  * list.
+  */
+ void cpu_latency_qos_update_request(struct pm_qos_request *req, s32 new_value)
++>>>>>>> 67b06ba01857 (PM: QoS: Drop PM_QOS_CPU_DMA_LATENCY and rename related functions)
  {
- 	if (!req) /*guard against callers passing in null */
+ 	if (!req)
  		return;
  
- 	if (!pm_qos_request_active(req)) {
- 		WARN(1, KERN_ERR "pm_qos_update_request() called for unknown object\n");
+ 	if (!cpu_latency_qos_request_active(req)) {
+ 		WARN(1, KERN_ERR "%s called for unknown object\n", __func__);
  		return;
  	}
  
 -	trace_pm_qos_update_request(new_value);
 -
 -	if (new_value == req->node.prio)
 -		return;
 -
 -	cpu_latency_qos_apply(req, PM_QOS_UPDATE_REQ, new_value);
 +	__pm_qos_update_request(req, new_value);
  }
- EXPORT_SYMBOL_GPL(pm_qos_update_request);
+ EXPORT_SYMBOL_GPL(cpu_latency_qos_update_request);
  
  /**
-  * pm_qos_remove_request - modifies an existing qos request
-  * @req: handle to request list element
+  * cpu_latency_qos_remove_request - Remove existing CPU latency QoS request.
+  * @req: QoS request to remove.
   *
++<<<<<<< HEAD
 + * Will remove pm qos request from the list of constraints and
 + * recompute the current target value for the pm_qos_class.  Call this
 + * on slow code paths.
++=======
+  * Remove the CPU latency QoS request represented by @req from the CPU latency
+  * QoS list along with updating the effective constraint value for that list.
++>>>>>>> 67b06ba01857 (PM: QoS: Drop PM_QOS_CPU_DMA_LATENCY and rename related functions)
   */
- void pm_qos_remove_request(struct pm_qos_request *req)
+ void cpu_latency_qos_remove_request(struct pm_qos_request *req)
  {
- 	if (!req) /*guard against callers passing in null */
+ 	if (!req)
  		return;
- 		/* silent return to keep pcm code cleaner */
  
- 	if (!pm_qos_request_active(req)) {
- 		WARN(1, KERN_ERR "pm_qos_remove_request() called for unknown object\n");
+ 	if (!cpu_latency_qos_request_active(req)) {
+ 		WARN(1, KERN_ERR "%s called for unknown object\n", __func__);
  		return;
  	}
  
 -	trace_pm_qos_remove_request(PM_QOS_DEFAULT_VALUE);
 -
 -	cpu_latency_qos_apply(req, PM_QOS_REMOVE_REQ, PM_QOS_DEFAULT_VALUE);
 +	trace_pm_qos_remove_request(req->pm_qos_class, PM_QOS_DEFAULT_VALUE);
 +	pm_qos_update_target(pm_qos_array[req->pm_qos_class]->constraints,
 +			     &req->node, PM_QOS_REMOVE_REQ,
 +			     PM_QOS_DEFAULT_VALUE);
  	memset(req, 0, sizeof(*req));
  }
- EXPORT_SYMBOL_GPL(pm_qos_remove_request);
+ EXPORT_SYMBOL_GPL(cpu_latency_qos_remove_request);
  
 -/* User space interface to the CPU latency QoS via misc device. */
 +/**
 + * pm_qos_add_notifier - sets notification entry for changes to target value
 + * @pm_qos_class: identifies which qos target changes should be notified.
 + * @notifier: notifier block managed by caller.
 + *
 + * will register the notifier into a notification chain that gets called
 + * upon changes to the pm_qos_class target value.
 + */
 +int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier)
 +{
 +	int retval;
 +
 +	retval = blocking_notifier_chain_register(
 +			pm_qos_array[pm_qos_class]->constraints->notifiers,
 +			notifier);
  
 -static int cpu_latency_qos_open(struct inode *inode, struct file *filp)
 +	return retval;
 +}
 +EXPORT_SYMBOL_GPL(pm_qos_add_notifier);
 +
 +/**
 + * pm_qos_remove_notifier - deletes notification entry from chain.
 + * @pm_qos_class: identifies which qos target changes are notified.
 + * @notifier: notifier block to be removed.
 + *
 + * will remove the notifier from the notification chain that gets called
 + * upon changes to the pm_qos_class target value.
 + */
 +int pm_qos_remove_notifier(int pm_qos_class, struct notifier_block *notifier)
 +{
 +	int retval;
 +
 +	retval = blocking_notifier_chain_unregister(
 +			pm_qos_array[pm_qos_class]->constraints->notifiers,
 +			notifier);
 +
 +	return retval;
 +}
 +EXPORT_SYMBOL_GPL(pm_qos_remove_notifier);
 +
 +/* User space interface to global PM QoS via misc device. */
 +
 +static int pm_qos_power_open(struct inode *inode, struct file *filp)
  {
  	struct pm_qos_request *req;
  
* Unmerged path include/linux/pm_qos.h
* Unmerged path kernel/power/qos.c
