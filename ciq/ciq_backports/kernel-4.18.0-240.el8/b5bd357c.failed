block: add docs for gendisk / request_queue refcount helpers

jira LE-1907
cve CVE-2019-19770
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Luis Chamberlain <mcgrof@kernel.org>
commit b5bd357cf8b65d31e32b1668293cbeedb6c06334
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b5bd357c.failed

This adds documentation for the gendisk / request_queue refcount
helpers.

	Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b5bd357cf8b65d31e32b1668293cbeedb6c06334)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/genhd.c
diff --cc block/genhd.c
index 450adefa8955,f741613d731f..000000000000
--- a/block/genhd.c
+++ b/block/genhd.c
@@@ -805,6 -857,39 +805,42 @@@ void device_add_disk_no_queue_reg(struc
  }
  EXPORT_SYMBOL(device_add_disk_no_queue_reg);
  
++<<<<<<< HEAD
++=======
+ static void invalidate_partition(struct gendisk *disk, int partno)
+ {
+ 	struct block_device *bdev;
+ 
+ 	bdev = bdget_disk(disk, partno);
+ 	if (!bdev)
+ 		return;
+ 
+ 	fsync_bdev(bdev);
+ 	__invalidate_device(bdev, true);
+ 
+ 	/*
+ 	 * Unhash the bdev inode for this device so that it gets evicted as soon
+ 	 * as last inode reference is dropped.
+ 	 */
+ 	remove_inode_hash(bdev->bd_inode);
+ 	bdput(bdev);
+ }
+ 
+ /**
+  * del_gendisk - remove the gendisk
+  * @disk: the struct gendisk to remove
+  *
+  * Removes the gendisk and all its associated resources. This deletes the
+  * partitions associated with the gendisk, and unregisters the associated
+  * request_queue.
+  *
+  * This is the counter to the respective __device_add_disk() call.
+  *
+  * The final removal of the struct gendisk happens when its refcount reaches 0
+  * with put_disk(), which should be called after del_gendisk(), if
+  * __device_add_disk() was used.
+  */
++>>>>>>> b5bd357cf8b6 (block: add docs for gendisk / request_queue refcount helpers)
  void del_gendisk(struct gendisk *disk)
  {
  	struct disk_part_iter piter;
diff --git a/block/blk-core.c b/block/blk-core.c
index 4b5867b7c476..13506becfa34 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -300,6 +300,13 @@ void blk_clear_pm_only(struct request_queue *q)
 }
 EXPORT_SYMBOL_GPL(blk_clear_pm_only);
 
+/**
+ * blk_put_queue - decrement the request_queue refcount
+ * @q: the request_queue structure to decrement the refcount for
+ *
+ * Decrements the refcount of the request_queue kobject. When this reaches 0
+ * we'll have blk_release_queue() called.
+ */
 void blk_put_queue(struct request_queue *q)
 {
 	kobject_put(&q->kobj);
@@ -551,6 +558,12 @@ struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
 }
 EXPORT_SYMBOL(blk_alloc_queue_node);
 
+/**
+ * blk_get_queue - increment the request_queue refcount
+ * @q: the request_queue structure to increment the refcount for
+ *
+ * Increment the refcount of the request_queue kobject.
+ */
 bool blk_get_queue(struct request_queue *q)
 {
 	if (likely(!blk_queue_dying(q))) {
* Unmerged path block/genhd.c
