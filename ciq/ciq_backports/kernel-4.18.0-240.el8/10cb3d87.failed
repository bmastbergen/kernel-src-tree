samples/bpf: Use own flags but not HOSTCFLAGS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
commit 10cb3d8706dbaa0521e761b96b3be5b7a497ae3f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/10cb3d87.failed

While compiling natively, the host's cflags and ldflags are equal to
ones used from HOSTCFLAGS and HOSTLDFLAGS. When cross compiling it
should have own, used for target arch. While verification, for arm,
arm64 and x86_64 the following flags were used always:

-Wall -O2
-fomit-frame-pointer
-Wmissing-prototypes
-Wstrict-prototypes

So, add them as they were verified and used before adding
Makefile.target and lets omit "-fomit-frame-pointer" as were proposed
while review, as no sense in such optimization for samples.

	Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20191011002808.28206-10-ivan.khoronzhuk@linaro.org
(cherry picked from commit 10cb3d8706dbaa0521e761b96b3be5b7a497ae3f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	samples/bpf/Makefile
diff --cc samples/bpf/Makefile
index 3ff0e2c54680,57a15ff938a6..000000000000
--- a/samples/bpf/Makefile
+++ b/samples/bpf/Makefile
@@@ -188,9 -173,29 +188,32 @@@ ifeq ($(ARCH), arm
  # headers when arm instruction set identification is requested.
  ARM_ARCH_SELECTOR := $(filter -D__LINUX_ARM_ARCH__%, $(KBUILD_CFLAGS))
  BPF_EXTRA_CFLAGS := $(ARM_ARCH_SELECTOR)
 -TPROGS_CFLAGS += $(ARM_ARCH_SELECTOR)
 +KBUILD_HOSTCFLAGS += $(ARM_ARCH_SELECTOR)
  endif
  
++<<<<<<< HEAD
++=======
+ TPROGS_CFLAGS += -Wall -O2
+ TPROGS_CFLAGS += -Wmissing-prototypes
+ TPROGS_CFLAGS += -Wstrict-prototypes
+ 
+ TPROGS_CFLAGS += -I$(objtree)/usr/include
+ TPROGS_CFLAGS += -I$(srctree)/tools/lib/bpf/
+ TPROGS_CFLAGS += -I$(srctree)/tools/testing/selftests/bpf/
+ TPROGS_CFLAGS += -I$(srctree)/tools/lib/
+ TPROGS_CFLAGS += -I$(srctree)/tools/include
+ TPROGS_CFLAGS += -I$(srctree)/tools/perf
+ 
+ TPROGCFLAGS_bpf_load.o += -Wno-unused-variable
+ 
+ TPROGS_LDLIBS			+= $(LIBBPF) -lelf
+ TPROGLDLIBS_tracex4		+= -lrt
+ TPROGLDLIBS_trace_output	+= -lrt
+ TPROGLDLIBS_map_perf_test	+= -lrt
+ TPROGLDLIBS_test_overhead	+= -lrt
+ TPROGLDLIBS_xdpsock		+= -pthread
+ 
++>>>>>>> 10cb3d8706db (samples/bpf: Use own flags but not HOSTCFLAGS)
  # Allows pointing LLC/CLANG to a LLVM backend with bpf support, redefine on cmdline:
  #  make samples/bpf/ LLC=~/git/llvm/build/bin/llc CLANG=~/git/llvm/build/bin/clang
  LLC ?= llc
* Unmerged path samples/bpf/Makefile
