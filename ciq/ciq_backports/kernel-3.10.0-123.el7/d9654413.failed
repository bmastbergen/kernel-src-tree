drm/radeon: free uvd ring on unload

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] radeon: free uvd ring on unload (Jerome Glisse) [1056702]
Rebuild_FUZZ: 93.94%
commit-author Jerome Glisse <jglisse@redhat.com>
commit d965441342f3b7d63db784cad852328d17d47942
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/d9654413.failed

Need to free the uvd ring. Also reshuffle gart tear down to
happen after uvd tear down.

	Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
	Cc: stable@vger.kernel.org
	Reviewed-by: Christian König <christian.koenig@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit d965441342f3b7d63db784cad852328d17d47942)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/radeon/evergreen.c
#	drivers/gpu/drm/radeon/radeon_uvd.c
#	drivers/gpu/drm/radeon/rv770.c
diff --cc drivers/gpu/drm/radeon/evergreen.c
index 0d9455192306,8a2c010b7dc5..000000000000
--- a/drivers/gpu/drm/radeon/evergreen.c
+++ b/drivers/gpu/drm/radeon/evergreen.c
@@@ -4980,8 -5473,11 +4980,13 @@@ void evergreen_fini(struct radeon_devic
  	radeon_wb_fini(rdev);
  	radeon_ib_pool_fini(rdev);
  	radeon_irq_kms_fini(rdev);
++<<<<<<< HEAD
 +	evergreen_pcie_gart_fini(rdev);
++=======
+ 	uvd_v1_0_fini(rdev);
++>>>>>>> d965441342f3 (drm/radeon: free uvd ring on unload)
  	radeon_uvd_fini(rdev);
+ 	evergreen_pcie_gart_fini(rdev);
  	r600_vram_scratch_fini(rdev);
  	radeon_gem_fini(rdev);
  	radeon_fence_driver_fini(rdev);
diff --cc drivers/gpu/drm/radeon/radeon_uvd.c
index 9839150ff5ab,3e6804b2b2ef..000000000000
--- a/drivers/gpu/drm/radeon/radeon_uvd.c
+++ b/drivers/gpu/drm/radeon/radeon_uvd.c
@@@ -209,6 -146,87 +209,90 @@@ int radeon_uvd_resume(struct radeon_dev
  
  	radeon_bo_unreserve(rdev->uvd.vcpu_bo);
  
++<<<<<<< HEAD
++=======
+ 	for (i = 0; i < RADEON_MAX_UVD_HANDLES; ++i) {
+ 		atomic_set(&rdev->uvd.handles[i], 0);
+ 		rdev->uvd.filp[i] = NULL;
+ 		rdev->uvd.img_size[i] = 0;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ void radeon_uvd_fini(struct radeon_device *rdev)
+ {
+ 	int r;
+ 
+ 	if (rdev->uvd.vcpu_bo == NULL)
+ 		return;
+ 
+ 	r = radeon_bo_reserve(rdev->uvd.vcpu_bo, false);
+ 	if (!r) {
+ 		radeon_bo_kunmap(rdev->uvd.vcpu_bo);
+ 		radeon_bo_unpin(rdev->uvd.vcpu_bo);
+ 		radeon_bo_unreserve(rdev->uvd.vcpu_bo);
+ 	}
+ 
+ 	radeon_bo_unref(&rdev->uvd.vcpu_bo);
+ 
+ 	radeon_ring_fini(rdev, &rdev->ring[R600_RING_TYPE_UVD_INDEX]);
+ 
+ 	release_firmware(rdev->uvd_fw);
+ }
+ 
+ int radeon_uvd_suspend(struct radeon_device *rdev)
+ {
+ 	unsigned size;
+ 	void *ptr;
+ 	int i;
+ 
+ 	if (rdev->uvd.vcpu_bo == NULL)
+ 		return 0;
+ 
+ 	for (i = 0; i < RADEON_MAX_UVD_HANDLES; ++i)
+ 		if (atomic_read(&rdev->uvd.handles[i]))
+ 			break;
+ 
+ 	if (i == RADEON_MAX_UVD_HANDLES)
+ 		return 0;
+ 
+ 	size = radeon_bo_size(rdev->uvd.vcpu_bo);
+ 	size -= rdev->uvd_fw->size;
+ 
+ 	ptr = rdev->uvd.cpu_addr;
+ 	ptr += rdev->uvd_fw->size;
+ 
+ 	rdev->uvd.saved_bo = kmalloc(size, GFP_KERNEL);
+ 	memcpy(rdev->uvd.saved_bo, ptr, size);
+ 
+ 	return 0;
+ }
+ 
+ int radeon_uvd_resume(struct radeon_device *rdev)
+ {
+ 	unsigned size;
+ 	void *ptr;
+ 
+ 	if (rdev->uvd.vcpu_bo == NULL)
+ 		return -EINVAL;
+ 
+ 	memcpy(rdev->uvd.cpu_addr, rdev->uvd_fw->data, rdev->uvd_fw->size);
+ 
+ 	size = radeon_bo_size(rdev->uvd.vcpu_bo);
+ 	size -= rdev->uvd_fw->size;
+ 
+ 	ptr = rdev->uvd.cpu_addr;
+ 	ptr += rdev->uvd_fw->size;
+ 
+ 	if (rdev->uvd.saved_bo != NULL) {
+ 		memcpy(ptr, rdev->uvd.saved_bo, size);
+ 		kfree(rdev->uvd.saved_bo);
+ 		rdev->uvd.saved_bo = NULL;
+ 	} else
+ 		memset(ptr, 0, size);
+ 
++>>>>>>> d965441342f3 (drm/radeon: free uvd ring on unload)
  	return 0;
  }
  
diff --cc drivers/gpu/drm/radeon/rv770.c
index 4a62ad2e5399,4e37a42305d8..000000000000
--- a/drivers/gpu/drm/radeon/rv770.c
+++ b/drivers/gpu/drm/radeon/rv770.c
@@@ -2097,8 -1955,9 +2097,13 @@@ void rv770_fini(struct radeon_device *r
  	radeon_wb_fini(rdev);
  	radeon_ib_pool_fini(rdev);
  	radeon_irq_kms_fini(rdev);
++<<<<<<< HEAD
 +	rv770_pcie_gart_fini(rdev);
++=======
+ 	uvd_v1_0_fini(rdev);
++>>>>>>> d965441342f3 (drm/radeon: free uvd ring on unload)
  	radeon_uvd_fini(rdev);
+ 	rv770_pcie_gart_fini(rdev);
  	r600_vram_scratch_fini(rdev);
  	radeon_gem_fini(rdev);
  	radeon_fence_driver_fini(rdev);
* Unmerged path drivers/gpu/drm/radeon/evergreen.c
* Unmerged path drivers/gpu/drm/radeon/radeon_uvd.c
* Unmerged path drivers/gpu/drm/radeon/rv770.c
