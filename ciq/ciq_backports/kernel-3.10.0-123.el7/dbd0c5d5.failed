powerpc: prom_init exception when updating core value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [powerpc] prom_init exception when updating core value (Steve Best) [1051192]
Rebuild_FUZZ: 90.72%
commit-author Laurent Dufour <ldufour@linux.vnet.ibm.com>
commit dbd0c5d5296f291a5c3affee4fbdde254632ffca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/dbd0c5d5.failed

Since the CPU is generating an exception when accessing unaligned word, and
as this exception is not yet handled when running prom_init, data should be
copied from the architecture vector byte per byte.

	Signed-off-by: Laurent Dufour <ldufour@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit dbd0c5d5296f291a5c3affee4fbdde254632ffca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/prom_init.c
diff --cc arch/powerpc/kernel/prom_init.c
index 5eccda9fd33f,cb64a6e1dc51..000000000000
--- a/arch/powerpc/kernel/prom_init.c
+++ b/arch/powerpc/kernel/prom_init.c
@@@ -851,9 -856,10 +851,14 @@@ static int __init prom_count_smt_thread
  
  static void __init prom_send_capabilities(void)
  {
 -	ihandle root;
 +	ihandle elfloader, root;
  	prom_arg_t ret;
++<<<<<<< HEAD
 +	u32 *cores;
++=======
+ 	u32 cores;
+ 	unsigned char *ptcores;
++>>>>>>> dbd0c5d5296f (powerpc: prom_init exception when updating core value)
  
  	root = call_prom("open", 1, 1, ADDR("/"));
  	if (root != 0) {
@@@ -863,15 -869,30 +868,42 @@@
  		 * (we assume this is the same for all cores) and use it to
  		 * divide NR_CPUS.
  		 */
++<<<<<<< HEAD
 +		cores = (u32 *)&ibm_architecture_vec[IBM_ARCH_VEC_NRCORES_OFFSET];
 +		if (*cores != NR_CPUS) {
 +			prom_printf("WARNING ! "
 +				    "ibm_architecture_vec structure inconsistent: %lu!\n",
 +				    *cores);
 +		} else {
 +			*cores = DIV_ROUND_UP(NR_CPUS, prom_count_smt_threads());
 +			prom_printf("Max number of cores passed to firmware: %lu (NR_CPUS = %lu)\n",
 +				    *cores, NR_CPUS);
++=======
+ 
+ 		/* The core value may start at an odd address. If such a word
+ 		 * access is made at a cache line boundary, this leads to an
+ 		 * exception which may not be handled at this time.
+ 		 * Forcing a per byte access to avoid exception.
+ 		 */
+ 		ptcores = &ibm_architecture_vec[IBM_ARCH_VEC_NRCORES_OFFSET];
+ 		cores = 0;
+ 		cores |= ptcores[0] << 24;
+ 		cores |= ptcores[1] << 16;
+ 		cores |= ptcores[2] << 8;
+ 		cores |= ptcores[3];
+ 		if (cores != NR_CPUS) {
+ 			prom_printf("WARNING ! "
+ 				    "ibm_architecture_vec structure inconsistent: %lu!\n",
+ 				    cores);
+ 		} else {
+ 			cores = DIV_ROUND_UP(NR_CPUS, prom_count_smt_threads());
+ 			prom_printf("Max number of cores passed to firmware: %lu (NR_CPUS = %lu)\n",
+ 				    cores, NR_CPUS);
+ 			ptcores[0] = (cores >> 24) & 0xff;
+ 			ptcores[1] = (cores >> 16) & 0xff;
+ 			ptcores[2] = (cores >> 8) & 0xff;
+ 			ptcores[3] = cores & 0xff;
++>>>>>>> dbd0c5d5296f (powerpc: prom_init exception when updating core value)
  		}
  
  		/* try calling the ibm,client-architecture-support method */
* Unmerged path arch/powerpc/kernel/prom_init.c
