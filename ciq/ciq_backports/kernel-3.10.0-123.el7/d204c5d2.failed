NFSv4.2: encode_readdir - only ask for labels when doing readdirplus

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [fs] nfs: encode_readdir - only ask for labels when doing readdirplus (Jeff Layton) [1030725]
Rebuild_FUZZ: 96.97%
commit-author Trond Myklebust <Trond.Myklebust@netapp.com>
commit d204c5d2b8f7614350cd4609f4d4cdcf25494d74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/d204c5d2.failed

Currently, if the server is doing NFSv4.2 and supports labeled NFS, then
our on-the-wire READDIR request ends up asking for the label information,
which is then ignored unless we're doing readdirplus.
This patch ensures that READDIR doesn't ask the server for label information
at all unless the readdir->bitmask contains the FATTR4_WORD2_SECURITY_LABEL
attribute, and the readdir->plus flag is set.

While we're at it, optimise away the 3rd bitmap field if it is zero.

	Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
(cherry picked from commit d204c5d2b8f7614350cd4609f4d4cdcf25494d74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4xdr.c
diff --cc fs/nfs/nfs4xdr.c
index 437b5123a2e6,5be2868c02f1..000000000000
--- a/fs/nfs/nfs4xdr.c
+++ b/fs/nfs/nfs4xdr.c
@@@ -102,6 -102,12 +102,15 @@@ static int nfs4_stat_to_errno(int)
  #define nfs4_path_maxsz		(1 + ((3 + NFS4_MAXPATHLEN) >> 2))
  #define nfs4_owner_maxsz	(1 + XDR_QUADLEN(IDMAP_NAMESZ))
  #define nfs4_group_maxsz	(1 + XDR_QUADLEN(IDMAP_NAMESZ))
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NFS_V4_SECURITY_LABEL
+ /* PI(4 bytes) + LFS(4 bytes) + 1(for null terminator?) + MAXLABELLEN */
+ #define	nfs4_label_maxsz	(4 + 4 + 1 + XDR_QUADLEN(NFS4_MAXLABELLEN))
+ #else
+ #define	nfs4_label_maxsz	0
+ #endif
++>>>>>>> d204c5d2b8f7 (NFSv4.2: encode_readdir - only ask for labels when doing readdirplus)
  /* We support only one layout type per file system */
  #define decode_mdsthreshold_maxsz (1 + 1 + nfs4_fattr_bitmap_maxsz + 1 + 8)
  /* This is based on getfattr, which uses the most attributes: */
@@@ -1578,15 -1602,15 +1595,25 @@@ static void encode_readdir(struct xdr_s
  	encode_op_hdr(xdr, OP_READDIR, decode_readdir_maxsz, hdr);
  	encode_uint64(xdr, readdir->cookie);
  	encode_nfs4_verifier(xdr, &readdir->verifier);
++<<<<<<< HEAD
 +	p = reserve_space(xdr, 20);
 +	*p++ = cpu_to_be32(dircount);
 +	*p++ = cpu_to_be32(readdir->count);
 +	*p++ = cpu_to_be32(2);
++=======
+ 	p = reserve_space(xdr, 12 + (attrlen << 2));
+ 	*p++ = cpu_to_be32(dircount);
+ 	*p++ = cpu_to_be32(readdir->count);
+ 	*p++ = cpu_to_be32(attrlen);
+ 	for (i = 0; i < attrlen; i++)
+ 		*p++ = cpu_to_be32(attrs[i]);
+ 	memcpy(verf, readdir->verifier.data, sizeof(verf));
++>>>>>>> d204c5d2b8f7 (NFSv4.2: encode_readdir - only ask for labels when doing readdirplus)
  
 -	dprintk("%s: cookie = %llu, verifier = %08x:%08x, bitmap = %08x:%08x:%08x\n",
 +	*p++ = cpu_to_be32(attrs[0] & readdir->bitmask[0]);
 +	*p = cpu_to_be32(attrs[1] & readdir->bitmask[1]);
 +	memcpy(verf, readdir->verifier.data, sizeof(verf));
 +	dprintk("%s: cookie = %Lu, verifier = %08x:%08x, bitmap = %08x:%08x\n",
  			__func__,
  			(unsigned long long)readdir->cookie,
  			verf[0], verf[1],
* Unmerged path fs/nfs/nfs4xdr.c
