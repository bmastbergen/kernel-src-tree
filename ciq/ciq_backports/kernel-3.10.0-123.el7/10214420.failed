drm/i915: Replicate BIOS eDP bpp clamping hack for hsw

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] i915: Replicate BIOS eDP bpp clamping hack for hsw (Rob Clark) [1054409]
Rebuild_FUZZ: 96.15%
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit 1021442098ee9328fdd4d113d63a3a7f2f40c37b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/10214420.failed

Haswell's DDI encoders have their own ->get_config callback and in

commit c6cd2ee2d59111a07cd9199564c9bdcb2d11e5cf
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Mon Oct 21 10:52:07 2013 +0300

    drm/i915/dp: workaround BIOS eDP bpp clamping issue

we've forgotten to replicate this hack. So let's do it that.

Note for backporters: The above commit and all it's depencies need to
be backported first.

Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=71049
	Cc: stable@vger.kernel.org
	Tested-by: Gökçen Eraslan <gokcen.eraslan@gmail.com>
	Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
(cherry picked from commit 1021442098ee9328fdd4d113d63a3a7f2f40c37b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_ddi.c
diff --cc drivers/gpu/drm/i915/intel_ddi.c
index fb961bb81903,330077bcd0bd..000000000000
--- a/drivers/gpu/drm/i915/intel_ddi.c
+++ b/drivers/gpu/drm/i915/intel_ddi.c
@@@ -1472,6 -1356,78 +1472,81 @@@ static void intel_ddi_hot_plug(struct i
  		intel_dp_check_link_status(intel_dp);
  }
  
++<<<<<<< HEAD
++=======
+ void intel_ddi_get_config(struct intel_encoder *encoder,
+ 			  struct intel_crtc_config *pipe_config)
+ {
+ 	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
+ 	struct intel_crtc *intel_crtc = to_intel_crtc(encoder->base.crtc);
+ 	enum transcoder cpu_transcoder = intel_crtc->config.cpu_transcoder;
+ 	u32 temp, flags = 0;
+ 
+ 	temp = I915_READ(TRANS_DDI_FUNC_CTL(cpu_transcoder));
+ 	if (temp & TRANS_DDI_PHSYNC)
+ 		flags |= DRM_MODE_FLAG_PHSYNC;
+ 	else
+ 		flags |= DRM_MODE_FLAG_NHSYNC;
+ 	if (temp & TRANS_DDI_PVSYNC)
+ 		flags |= DRM_MODE_FLAG_PVSYNC;
+ 	else
+ 		flags |= DRM_MODE_FLAG_NVSYNC;
+ 
+ 	pipe_config->adjusted_mode.flags |= flags;
+ 
+ 	switch (temp & TRANS_DDI_BPC_MASK) {
+ 	case TRANS_DDI_BPC_6:
+ 		pipe_config->pipe_bpp = 18;
+ 		break;
+ 	case TRANS_DDI_BPC_8:
+ 		pipe_config->pipe_bpp = 24;
+ 		break;
+ 	case TRANS_DDI_BPC_10:
+ 		pipe_config->pipe_bpp = 30;
+ 		break;
+ 	case TRANS_DDI_BPC_12:
+ 		pipe_config->pipe_bpp = 36;
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	switch (temp & TRANS_DDI_MODE_SELECT_MASK) {
+ 	case TRANS_DDI_MODE_SELECT_HDMI:
+ 	case TRANS_DDI_MODE_SELECT_DVI:
+ 	case TRANS_DDI_MODE_SELECT_FDI:
+ 		break;
+ 	case TRANS_DDI_MODE_SELECT_DP_SST:
+ 	case TRANS_DDI_MODE_SELECT_DP_MST:
+ 		pipe_config->has_dp_encoder = true;
+ 		intel_dp_get_m_n(intel_crtc, pipe_config);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	if (encoder->type == INTEL_OUTPUT_EDP && dev_priv->vbt.edp_bpp &&
+ 	    pipe_config->pipe_bpp > dev_priv->vbt.edp_bpp) {
+ 		/*
+ 		 * This is a big fat ugly hack.
+ 		 *
+ 		 * Some machines in UEFI boot mode provide us a VBT that has 18
+ 		 * bpp and 1.62 GHz link bandwidth for eDP, which for reasons
+ 		 * unknown we fail to light up. Yet the same BIOS boots up with
+ 		 * 24 bpp and 2.7 GHz link. Use the same bpp as the BIOS uses as
+ 		 * max, not what it tells us to use.
+ 		 *
+ 		 * Note: This will still be broken if the eDP panel is not lit
+ 		 * up by the BIOS, and thus we can't get the mode at module
+ 		 * load.
+ 		 */
+ 		DRM_DEBUG_KMS("pipe has %d bpp for eDP panel, overriding BIOS-provided max %d bpp\n",
+ 			      pipe_config->pipe_bpp, dev_priv->vbt.edp_bpp);
+ 		dev_priv->vbt.edp_bpp = pipe_config->pipe_bpp;
+ 	}
+ }
+ 
++>>>>>>> 1021442098ee (drm/i915: Replicate BIOS eDP bpp clamping hack for hsw)
  static void intel_ddi_destroy(struct drm_encoder *encoder)
  {
  	/* HDMI has nothing special to destroy, so we can go with this. */
* Unmerged path drivers/gpu/drm/i915/intel_ddi.c
