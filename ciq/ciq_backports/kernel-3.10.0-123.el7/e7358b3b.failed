context_tracking: Split low level state headers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Frederic Weisbecker <fweisbec@gmail.com>
commit e7358b3bc0d7fcec0e7a724477f06db2b0c68e21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/e7358b3b.failed

We plan to use the context tracking static key on inline
vtime APIs. For this we need to include the context tracking
headers from those of vtime.

However vtime headers need to stay low level because they are
included in hardirq.h that mostly contains standalone
definitions. But context_tracking.h includes sched.h for
a few task_struct references, therefore it wouldn't be sensible
to include it from vtime.h

To solve this, lets split the context tracking headers and move
out the pure state definitions that only require a few low level
headers. We can safely include that small part in vtime.h later.

	Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Li Zhong <zhong@linux.vnet.ibm.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Kevin Hilman <khilman@linaro.org>
(cherry picked from commit e7358b3bc0d7fcec0e7a724477f06db2b0c68e21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/context_tracking.h
diff --cc include/linux/context_tracking.h
index da2a20a1e54f,82ec4870e064..000000000000
--- a/include/linux/context_tracking.h
+++ b/include/linux/context_tracking.h
@@@ -2,38 -2,12 +2,30 @@@
  #define _LINUX_CONTEXT_TRACKING_H
  
  #include <linux/sched.h>
- #include <linux/percpu.h>
  #include <linux/vtime.h>
++<<<<<<< HEAD
++=======
+ #include <linux/context_tracking_state.h>
++>>>>>>> e7358b3bc0d7 (context_tracking: Split low level state headers)
  #include <asm/ptrace.h>
  
- struct context_tracking {
- 	/*
- 	 * When active is false, probes are unset in order
- 	 * to minimize overhead: TIF flags are cleared
- 	 * and calls to user_enter/exit are ignored. This
- 	 * may be further optimized using static keys.
- 	 */
- 	bool active;
- 	enum ctx_state {
- 		IN_KERNEL = 0,
- 		IN_USER,
- 	} state;
- };
- 
  
  #ifdef CONFIG_CONTEXT_TRACKING
++<<<<<<< HEAD
 +DECLARE_PER_CPU(struct context_tracking, context_tracking);
 +
 +static inline bool context_tracking_in_user(void)
 +{
 +	return __this_cpu_read(context_tracking.state) == IN_USER;
 +}
 +
 +static inline bool context_tracking_active(void)
 +{
 +	return __this_cpu_read(context_tracking.active);
 +}
 +
++=======
++>>>>>>> e7358b3bc0d7 (context_tracking: Split low level state headers)
  extern void context_tracking_cpu_set(int cpu);
  
  extern void context_tracking_user_enter(void);
@@@ -72,10 -48,13 +64,9 @@@ static inline void exception_exit(enum 
  	}
  }
  
 -static inline void context_tracking_task_switch(struct task_struct *prev,
 -						struct task_struct *next)
 -{
 -	if (static_key_false(&context_tracking_enabled))
 -		__context_tracking_task_switch(prev, next);
 -}
 +extern void context_tracking_task_switch(struct task_struct *prev,
 +					 struct task_struct *next);
  #else
- static inline bool context_tracking_in_user(void) { return false; }
  static inline void user_enter(void) { }
  static inline void user_exit(void) { }
  static inline enum ctx_state exception_enter(void) { return 0; }
* Unmerged path include/linux/context_tracking.h
diff --git a/include/linux/context_tracking_state.h b/include/linux/context_tracking_state.h
new file mode 100644
index 000000000000..0f1979d0674f
--- /dev/null
+++ b/include/linux/context_tracking_state.h
@@ -0,0 +1,39 @@
+#ifndef _LINUX_CONTEXT_TRACKING_STATE_H
+#define _LINUX_CONTEXT_TRACKING_STATE_H
+
+#include <linux/percpu.h>
+#include <linux/static_key.h>
+
+struct context_tracking {
+	/*
+	 * When active is false, probes are unset in order
+	 * to minimize overhead: TIF flags are cleared
+	 * and calls to user_enter/exit are ignored. This
+	 * may be further optimized using static keys.
+	 */
+	bool active;
+	enum ctx_state {
+		IN_KERNEL = 0,
+		IN_USER,
+	} state;
+};
+
+#ifdef CONFIG_CONTEXT_TRACKING
+extern struct static_key context_tracking_enabled;
+DECLARE_PER_CPU(struct context_tracking, context_tracking);
+
+static inline bool context_tracking_in_user(void)
+{
+	return __this_cpu_read(context_tracking.state) == IN_USER;
+}
+
+static inline bool context_tracking_active(void)
+{
+	return __this_cpu_read(context_tracking.active);
+}
+#else
+static inline bool context_tracking_in_user(void) { return false; }
+static inline bool context_tracking_active(void) { return false; }
+#endif /* CONFIG_CONTEXT_TRACKING */
+
+#endif
