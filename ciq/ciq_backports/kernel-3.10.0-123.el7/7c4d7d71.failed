xen/blkback: Use physical sector size for setup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [virt] xen-blkback: Use physical sector size for setup (Radim Krcmar) [1003683]
Rebuild_FUZZ: 97.87%
commit-author Stefan Bader <stefan.bader@canonical.com>
commit 7c4d7d710f7eb499ec483f25acc28b53adaa3260
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/7c4d7d71.failed

Currently xen-blkback passes the logical sector size over xenbus and
xen-blkfront sets up the paravirt disk with that logical block size.
But newer drives usually have the logical sector size set to 512 for
compatibility reasons and would show the actual sector size only in
physical sector size.
This results in the device being partitioned and accessed in dom0 with
the correct sector size, but the guest thinks 512 bytes is the correct
block size. And that results in poor performance.

To fix this, blkback gets modified to pass also physical-sector-size
over xenbus and blkfront to use both values to set up the paravirt
disk. I did not just change the passed in sector-size because I am
not sure having a bigger logical sector size than the physical one
is valid (and that would happen if a newer dom0 kernel hits an older
domU kernel). Also this way a domU set up before should still be
accessible (just some tools might detect the unaligned setup).

[v2: Make xenbus write failure non-fatal]
[v3: Use xenbus_scanf instead of xenbus_gather]
[v4: Rebased against segment changes]

	Signed-off-by: Stefan Bader <stefan.bader@canonical.com>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit 7c4d7d710f7eb499ec483f25acc28b53adaa3260)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/xen-blkfront.c
diff --cc drivers/block/xen-blkfront.c
index d89ef86220f4,1a0f67c10ec7..000000000000
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@@ -542,7 -608,9 +542,13 @@@ wait
  		flush_requests(info);
  }
  
++<<<<<<< HEAD
 +static int xlvbd_init_blk_queue(struct gendisk *gd, u16 sector_size)
++=======
+ static int xlvbd_init_blk_queue(struct gendisk *gd, u16 sector_size,
+ 				unsigned int physical_sector_size,
+ 				unsigned int segments)
++>>>>>>> 7c4d7d710f7e (xen/blkback: Use physical sector size for setup)
  {
  	struct request_queue *rq;
  	struct blkfront_info *info = gd->private_data;
@@@ -734,7 -807,9 +742,13 @@@ static int xlvbd_alloc_gendisk(blkif_se
  	gd->driverfs_dev = &(info->xbdev->dev);
  	set_capacity(gd, capacity);
  
++<<<<<<< HEAD
 +	if (xlvbd_init_blk_queue(gd, sector_size)) {
++=======
+ 	if (xlvbd_init_blk_queue(gd, sector_size, physical_sector_size,
+ 				 info->max_indirect_segments ? :
+ 				 BLKIF_MAX_SEGMENTS_PER_REQUEST)) {
++>>>>>>> 7c4d7d710f7e (xen/blkback: Use physical sector size for setup)
  		del_gendisk(gd);
  		goto release;
  	}
@@@ -1483,7 -1807,15 +1508,19 @@@ static void blkfront_connect(struct blk
  	else
  		info->feature_persistent = persistent;
  
++<<<<<<< HEAD
 +	err = xlvbd_alloc_gendisk(sectors, info, binfo, sector_size);
++=======
+ 	err = blkfront_setup_indirect(info);
+ 	if (err) {
+ 		xenbus_dev_fatal(info->xbdev, err, "setup_indirect at %s",
+ 				 info->xbdev->otherend);
+ 		return;
+ 	}
+ 
+ 	err = xlvbd_alloc_gendisk(sectors, info, binfo, sector_size,
+ 				  physical_sector_size);
++>>>>>>> 7c4d7d710f7e (xen/blkback: Use physical sector size for setup)
  	if (err) {
  		xenbus_dev_fatal(info->xbdev, err, "xlvbd_add at %s",
  				 info->xbdev->otherend);
diff --git a/drivers/block/xen-blkback/xenbus.c b/drivers/block/xen-blkback/xenbus.c
index 8bfd1bcf95ec..25463e333ce3 100644
--- a/drivers/block/xen-blkback/xenbus.c
+++ b/drivers/block/xen-blkback/xenbus.c
@@ -704,6 +704,11 @@ again:
 				 dev->nodename);
 		goto abort;
 	}
+	err = xenbus_printf(xbt, dev->nodename, "physical-sector-size", "%u",
+			    bdev_physical_block_size(be->blkif->vbd.bdev));
+	if (err)
+		xenbus_dev_error(dev, err, "writing %s/physical-sector-size",
+				 dev->nodename);
 
 	err = xenbus_transaction_end(xbt, 0);
 	if (err == -EAGAIN)
* Unmerged path drivers/block/xen-blkfront.c
