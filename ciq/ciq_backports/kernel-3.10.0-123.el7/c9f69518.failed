powerpc: Remove KVMTEST from RELON exception handlers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [powerpc] Remove KVMTEST from RELON exception handlers (Steve Best) [995354]
Rebuild_FUZZ: 90.72%
commit-author Michael Ellerman <michael@ellerman.id.au>
commit c9f69518e5f08170bc857984a077f693d63171df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/c9f69518.failed

KVMTEST is a macro which checks whether we are taking an exception from
guest context, if so we branch out of line and eventually call into the
KVM code to handle the switch.

When running real guests on bare metal (HV KVM) the hardware ensures
that we never take a relocation on exception when transitioning from
guest to host. For PR KVM we disable relocation on exceptions ourself in
kvmppc_core_init_vm(), as of commit a413f47 "Disable relocation on
exceptions whenever PR KVM is active".

So convert all the RELON macros to use NOTEST, and drop the remaining
KVM_HANDLER() definitions we have for 0xe40 and 0xe80.

	Signed-off-by: Michael Ellerman <michael@ellerman.id.au>
CC: <stable@vger.kernel.org> [v3.9+]
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit c9f69518e5f08170bc857984a077f693d63171df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/exceptions-64s.S
diff --cc arch/powerpc/kernel/exceptions-64s.S
index 40e4a17c8ba0,89eba1fb5bbe..000000000000
--- a/arch/powerpc/kernel/exceptions-64s.S
+++ b/arch/powerpc/kernel/exceptions-64s.S
@@@ -1180,16 -1174,8 +1180,18 @@@ tm_unavailable_common
  __end_handlers:
  
  	/* Equivalents to the above handlers for relocation-on interrupt vectors */
 +	STD_RELON_EXCEPTION_HV_OOL(0xe00, h_data_storage)
 +	KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe00)
 +	STD_RELON_EXCEPTION_HV_OOL(0xe20, h_instr_storage)
 +	KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe20)
  	STD_RELON_EXCEPTION_HV_OOL(0xe40, emulation_assist)
++<<<<<<< HEAD
 +	KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe40)
 +	STD_RELON_EXCEPTION_HV_OOL(0xe60, hmi_exception)
 +	KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe60)
++=======
++>>>>>>> c9f69518e5f0 (powerpc: Remove KVMTEST from RELON exception handlers)
  	MASKABLE_RELON_EXCEPTION_HV_OOL(0xe80, h_doorbell)
- 	KVM_HANDLER(PACA_EXGEN, EXC_HV, 0xe80)
  
  	STD_RELON_EXCEPTION_PSERIES_OOL(0xf00, performance_monitor)
  	STD_RELON_EXCEPTION_PSERIES_OOL(0xf20, altivec_unavailable)
diff --git a/arch/powerpc/include/asm/exception-64s.h b/arch/powerpc/include/asm/exception-64s.h
index 46793b58a761..07ca627e52c0 100644
--- a/arch/powerpc/include/asm/exception-64s.h
+++ b/arch/powerpc/include/asm/exception-64s.h
@@ -358,12 +358,12 @@ label##_relon_pSeries:					\
 	/* No guest interrupts come through here */	\
 	SET_SCRATCH0(r13);		/* save r13 */	\
 	EXCEPTION_RELON_PROLOG_PSERIES(PACA_EXGEN, label##_common, \
-				       EXC_STD, KVMTEST_PR, vec)
+				       EXC_STD, NOTEST, vec)
 
 #define STD_RELON_EXCEPTION_PSERIES_OOL(vec, label)		\
 	.globl label##_relon_pSeries;				\
 label##_relon_pSeries:						\
-	EXCEPTION_PROLOG_1(PACA_EXGEN, KVMTEST_PR, vec);	\
+	EXCEPTION_PROLOG_1(PACA_EXGEN, NOTEST, vec);		\
 	EXCEPTION_RELON_PROLOG_PSERIES_1(label##_common, EXC_STD)
 
 #define STD_RELON_EXCEPTION_HV(loc, vec, label)		\
@@ -374,12 +374,12 @@ label##_relon_hv:					\
 	/* No guest interrupts come through here */	\
 	SET_SCRATCH0(r13);	/* save r13 */		\
 	EXCEPTION_RELON_PROLOG_PSERIES(PACA_EXGEN, label##_common, \
-				       EXC_HV, KVMTEST, vec)
+				       EXC_HV, NOTEST, vec)
 
 #define STD_RELON_EXCEPTION_HV_OOL(vec, label)			\
 	.globl label##_relon_hv;				\
 label##_relon_hv:						\
-	EXCEPTION_PROLOG_1(PACA_EXGEN, KVMTEST, vec);		\
+	EXCEPTION_PROLOG_1(PACA_EXGEN, NOTEST, vec);		\
 	EXCEPTION_RELON_PROLOG_PSERIES_1(label##_common, EXC_HV)
 
 /* This associate vector numbers with bits in paca->irq_happened */
* Unmerged path arch/powerpc/kernel/exceptions-64s.S
