drm/i915/dvo: call ->mode_set callback only when the port is running

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] i915/dvo: call ->mode_set callback only when the port is running (Rob Clark) [1054409]
Rebuild_FUZZ: 96.97%
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit 48f34e10169dbb3dd7a19af64e328492b7f54af4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/48f34e10.failed

The ns2501 controller seems to need the dpll and dvo port to accept
the timing update commands. Quick testing on my x30 here seems to
indicate that other dvo controllers don't mind. So let's move the
->mode_set callback to a place where we have the port up and running
already.

	Tested-by: Chris Wilson <chris@chris-wilson.co.uk>
	Tested-by: Thomas Richter <thor@math.tu-berlin.de>
	Cc: stable@vger.kernel.org
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
(cherry picked from commit 48f34e10169dbb3dd7a19af64e328492b7f54af4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_dvo.c
diff --cc drivers/gpu/drm/i915/intel_dvo.c
index cc70b16d5d42,3c7736546856..000000000000
--- a/drivers/gpu/drm/i915/intel_dvo.c
+++ b/drivers/gpu/drm/i915/intel_dvo.c
@@@ -144,7 -172,8 +144,12 @@@ static void intel_disable_dvo(struct in
  static void intel_enable_dvo(struct intel_encoder *encoder)
  {
  	struct drm_i915_private *dev_priv = encoder->base.dev->dev_private;
++<<<<<<< HEAD
 +	struct intel_dvo *intel_dvo = enc_to_intel_dvo(&encoder->base);
++=======
+ 	struct intel_dvo *intel_dvo = enc_to_dvo(encoder);
+ 	struct intel_crtc *crtc = to_intel_crtc(encoder->base.crtc);
++>>>>>>> 48f34e10169d (drm/i915/dvo: call ->mode_set callback only when the port is running)
  	u32 dvo_reg = intel_dvo->dev.dvo_reg;
  	u32 temp = I915_READ(dvo_reg);
  
@@@ -174,7 -209,11 +184,9 @@@ static void intel_dvo_dpms(struct drm_c
  		return;
  	}
  
 -	/* We call connector dpms manually below in case pipe dpms doesn't
 -	 * change due to cloning. */
  	if (mode == DRM_MODE_DPMS_ON) {
+ 		config = &to_intel_crtc(crtc)->config;
+ 
  		intel_dvo->base.connectors_active = true;
  
  		intel_crtc_update_dpms(crtc);
@@@ -268,8 -308,6 +284,11 @@@ static void intel_dvo_mode_set(struct d
  		break;
  	}
  
++<<<<<<< HEAD
 +	intel_dvo->dev.dev_ops->mode_set(&intel_dvo->dev, mode, adjusted_mode);
 +
++=======
++>>>>>>> 48f34e10169d (drm/i915/dvo: call ->mode_set callback only when the port is running)
  	/* Save the data order, since I don't know what it should be set to. */
  	dvo_val = I915_READ(dvo_reg) &
  		  (DVO_PRESERVE_MASK | DVO_DATA_ORDER_GBRG);
* Unmerged path drivers/gpu/drm/i915/intel_dvo.c
