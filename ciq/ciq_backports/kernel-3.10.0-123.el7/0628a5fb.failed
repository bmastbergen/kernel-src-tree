s390/tx: allow program interruption filtering in user space

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [s390] tx: allow program interruption filtering in user space (Hendrik Brueckner) [1006517]
Rebuild_FUZZ: 95.58%
commit-author Martin Schwidefsky <schwidefsky@de.ibm.com>
commit 0628a5fbe1b5af35ef5346443ff1056e257a7350
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/0628a5fb.failed

A user space program using the transactional execution facility
should be allowed to do program interrupt filtering. Do not set the
transactional-execution program-interruption-filtering override (PIFO)
bit in CR0.

	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 0628a5fbe1b5af35ef5346443ff1056e257a7350)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/ptrace.c
diff --cc arch/s390/kernel/ptrace.c
index a314c57f4e94,9556905bd3ce..000000000000
--- a/arch/s390/kernel/ptrace.c
+++ b/arch/s390/kernel/ptrace.c
@@@ -56,17 -56,25 +56,37 @@@ void update_per_regs(struct task_struc
  #ifdef CONFIG_64BIT
  	/* Take care of the enable/disable of transactional execution. */
  	if (MACHINE_HAS_TE) {
 -		unsigned long cr[3], cr_new[3];
 +		unsigned long cr0, cr0_new;
  
++<<<<<<< HEAD
 +		__ctl_store(cr0, 0, 0);
 +		/* set or clear transaction execution bits 8 and 9. */
 +		if (task->thread.per_flags & PER_FLAG_NO_TE)
 +			cr0_new = cr0 & ~(3UL << 54);
 +		else
 +			cr0_new = cr0 | (3UL << 54);
 +		/* Only load control register 0 if necessary. */
 +		if (cr0 != cr0_new)
 +			__ctl_load(cr0_new, 0, 0);
++=======
+ 		__ctl_store(cr, 0, 2);
+ 		cr_new[1] = cr[1];
+ 		/* Set or clear transaction execution TXC bit 8. */
+ 		if (task->thread.per_flags & PER_FLAG_NO_TE)
+ 			cr_new[0] = cr[0] & ~(1UL << 55);
+ 		else
+ 			cr_new[0] = cr[0] | (1UL << 55);
+ 		/* Set or clear transaction execution TDC bits 62 and 63. */
+ 		cr_new[2] = cr[2] & ~3UL;
+ 		if (task->thread.per_flags & PER_FLAG_TE_ABORT_RAND) {
+ 			if (task->thread.per_flags & PER_FLAG_TE_ABORT_RAND_TEND)
+ 				cr_new[2] |= 1UL;
+ 			else
+ 				cr_new[2] |= 2UL;
+ 		}
+ 		if (memcmp(&cr_new, &cr, sizeof(cr)))
+ 			__ctl_load(cr_new, 0, 2);
++>>>>>>> 0628a5fbe1b5 (s390/tx: allow program interruption filtering in user space)
  	}
  #endif
  	/* Copy user specified PER registers */
* Unmerged path arch/s390/kernel/ptrace.c
