neigh: use tbl->family to distinguish ipv4 from ipv6

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit 73af614aedd221df8495fc8c9993c50e87f899f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/73af614a.failed

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 73af614aedd221df8495fc8c9993c50e87f899f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/neighbour.h
diff --cc include/net/neighbour.h
index 7e748ad8b50c,95615c9ad13a..000000000000
--- a/include/net/neighbour.h
+++ b/include/net/neighbour.h
@@@ -270,15 -296,23 +275,30 @@@ struct neigh_seq_state 
  #define NEIGH_SEQ_IS_PNEIGH	0x00000002
  #define NEIGH_SEQ_SKIP_NOARP	0x00000004
  };
 -void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *,
 -		      unsigned int);
 -void *neigh_seq_next(struct seq_file *, void *, loff_t *);
 -void neigh_seq_stop(struct seq_file *, void *);
 -
 +extern void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *, unsigned int);
 +extern void *neigh_seq_next(struct seq_file *, void *, loff_t *);
 +extern void neigh_seq_stop(struct seq_file *, void *);
 +
++<<<<<<< HEAD
 +extern int			neigh_sysctl_register(struct net_device *dev, 
 +						      struct neigh_parms *p,
 +						      char *p_name,
 +						      proc_handler *proc_handler);
 +extern void			neigh_sysctl_unregister(struct neigh_parms *p);
++=======
+ int neigh_proc_dointvec(struct ctl_table *ctl, int write,
+ 			void __user *buffer, size_t *lenp, loff_t *ppos);
+ int neigh_proc_dointvec_jiffies(struct ctl_table *ctl, int write,
+ 				void __user *buffer,
+ 				size_t *lenp, loff_t *ppos);
+ int neigh_proc_dointvec_ms_jiffies(struct ctl_table *ctl, int write,
+ 				   void __user *buffer,
+ 				   size_t *lenp, loff_t *ppos);
+ 
+ int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
+ 			  proc_handler *proc_handler);
+ void neigh_sysctl_unregister(struct neigh_parms *p);
++>>>>>>> 73af614aedd2 (neigh: use tbl->family to distinguish ipv4 from ipv6)
  
  static inline void __neigh_parms_put(struct neigh_parms *parms)
  {
* Unmerged path include/net/neighbour.h
diff --git a/net/core/neighbour.c b/net/core/neighbour.c
index 05242ae7bdcf..7ed64c187e6a 100644
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@ -2944,11 +2944,12 @@ static struct neigh_sysctl_table {
 };
 
 int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
-			  char *p_name, proc_handler *handler)
+			  proc_handler *handler)
 {
 	struct neigh_sysctl_table *t;
 	const char *dev_name_source = NULL;
 	char neigh_path[ sizeof("net//neigh/") + IFNAMSIZ + IFNAMSIZ ];
+	char *p_name;
 
 	t = kmemdup(&neigh_sysctl_template, sizeof(*t), GFP_KERNEL);
 	if (!t)
@@ -3003,6 +3004,17 @@ int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
 	if (neigh_parms_net(p)->user_ns != &init_user_ns)
 		t->neigh_vars[0].procname = NULL;
 
+	switch (neigh_parms_family(p)) {
+	case AF_INET:
+	      p_name = "ipv4";
+	      break;
+	case AF_INET6:
+	      p_name = "ipv6";
+	      break;
+	default:
+	      BUG();
+	}
+
 	snprintf(neigh_path, sizeof(neigh_path), "net/%s/neigh/%s",
 		p_name, dev_name_source);
 	t->sysctl_header =
diff --git a/net/ipv4/arp.c b/net/ipv4/arp.c
index 8173117b1205..fdb5274dbb5c 100644
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@ -1278,7 +1278,7 @@ void __init arp_init(void)
 	dev_add_pack(&arp_packet_type);
 	arp_proc_init();
 #ifdef CONFIG_SYSCTL
-	neigh_sysctl_register(NULL, &arp_tbl.parms, "ipv4", NULL);
+	neigh_sysctl_register(NULL, &arp_tbl.parms, NULL);
 #endif
 	register_netdevice_notifier(&arp_netdev_notifier);
 }
diff --git a/net/ipv4/devinet.c b/net/ipv4/devinet.c
index 6638cd21577f..8fd44bdd120f 100644
--- a/net/ipv4/devinet.c
+++ b/net/ipv4/devinet.c
@@ -2158,7 +2158,7 @@ static void __devinet_sysctl_unregister(struct ipv4_devconf *cnf)
 
 static void devinet_sysctl_register(struct in_device *idev)
 {
-	neigh_sysctl_register(idev->dev, idev->arp_parms, "ipv4", NULL);
+	neigh_sysctl_register(idev->dev, idev->arp_parms, NULL);
 	__devinet_sysctl_register(dev_net(idev->dev), idev->dev->name,
 					&idev->cnf);
 }
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index fa7269638000..5007fd7bc8d2 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -5053,7 +5053,7 @@ static void __addrconf_sysctl_unregister(struct ipv6_devconf *p)
 
 static void addrconf_sysctl_register(struct inet6_dev *idev)
 {
-	neigh_sysctl_register(idev->dev, idev->nd_parms, "ipv6",
+	neigh_sysctl_register(idev->dev, idev->nd_parms,
 			      &ndisc_ifinfo_sysctl_change);
 	__addrconf_sysctl_register(dev_net(idev->dev), idev->dev->name,
 					idev, &idev->cnf);
diff --git a/net/ipv6/ndisc.c b/net/ipv6/ndisc.c
index d252600afd68..1f042b9e00e5 100644
--- a/net/ipv6/ndisc.c
+++ b/net/ipv6/ndisc.c
@@ -1703,7 +1703,7 @@ int __init ndisc_init(void)
 	neigh_table_init(&nd_tbl);
 
 #ifdef CONFIG_SYSCTL
-	err = neigh_sysctl_register(NULL, &nd_tbl.parms, "ipv6",
+	err = neigh_sysctl_register(NULL, &nd_tbl.parms,
 				    &ndisc_ifinfo_sysctl_change);
 	if (err)
 		goto out_unregister_pernet;
