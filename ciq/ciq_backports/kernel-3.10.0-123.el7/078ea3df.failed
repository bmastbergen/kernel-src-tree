NFSv4: Add tracepoints for debugging lookup/create operations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [fs] nfs: Add tracepoints for debugging lookup/create operations (Jeff Layton) [1009119]
Rebuild_FUZZ: 98.33%
commit-author Trond Myklebust <Trond.Myklebust@netapp.com>
commit 078ea3dfe396b18ccf608c71a9585b6f7e519bb1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/078ea3df.failed

Set up basic tracepoints for debugging NFSv4 lookup, unlink/remove,
symlink, mkdir, mknod, fs_locations and secinfo.

	Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
(cherry picked from commit 078ea3dfe396b18ccf608c71a9585b6f7e519bb1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/nfs4proc.c
index c7f16576f4bc,323475856d88..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -2884,7 -3025,8 +2884,12 @@@ static int nfs4_proc_lookup_common(stru
  	struct rpc_clnt *client = *clnt;
  	int err;
  	do {
++<<<<<<< HEAD
 +		err = _nfs4_proc_lookup(client, dir, name, fhandle, fattr);
++=======
+ 		err = _nfs4_proc_lookup(client, dir, name, fhandle, fattr, label);
+ 		trace_nfs4_lookup(dir, name, err);
++>>>>>>> 078ea3dfe396 (NFSv4: Add tracepoints for debugging lookup/create operations)
  		switch (err) {
  		case -NFS4ERR_BADNAME:
  			err = -ENOENT;
@@@ -3353,13 -3530,19 +3360,19 @@@ static int nfs4_proc_symlink(struct ino
  		struct page *page, unsigned int len, struct iattr *sattr)
  {
  	struct nfs4_exception exception = { };
 -	struct nfs4_label l, *label = NULL;
  	int err;
 -
 -	label = nfs4_label_init_security(dir, dentry, sattr, &l);
 -
  	do {
++<<<<<<< HEAD
 +		err = nfs4_handle_exception(NFS_SERVER(dir),
 +				_nfs4_proc_symlink(dir, dentry, page,
 +							len, sattr),
++=======
+ 		err = _nfs4_proc_symlink(dir, dentry, page, len, sattr, label);
+ 		trace_nfs4_symlink(dir, &dentry->d_name, err);
+ 		err = nfs4_handle_exception(NFS_SERVER(dir), err,
++>>>>>>> 078ea3dfe396 (NFSv4: Add tracepoints for debugging lookup/create operations)
  				&exception);
  	} while (exception.retry);
 -
 -	nfs4_label_release_security(label);
  	return err;
  }
  
@@@ -3384,14 -3568,20 +3397,20 @@@ static int nfs4_proc_mkdir(struct inod
  		struct iattr *sattr)
  {
  	struct nfs4_exception exception = { };
 -	struct nfs4_label l, *label = NULL;
  	int err;
  
 -	label = nfs4_label_init_security(dir, dentry, sattr, &l);
 -
  	sattr->ia_mode &= ~current_umask();
  	do {
++<<<<<<< HEAD
 +		err = nfs4_handle_exception(NFS_SERVER(dir),
 +				_nfs4_proc_mkdir(dir, dentry, sattr),
++=======
+ 		err = _nfs4_proc_mkdir(dir, dentry, sattr, label);
+ 		trace_nfs4_mkdir(dir, &dentry->d_name, err);
+ 		err = nfs4_handle_exception(NFS_SERVER(dir), err,
++>>>>>>> 078ea3dfe396 (NFSv4: Add tracepoints for debugging lookup/create operations)
  				&exception);
  	} while (exception.retry);
 -	nfs4_label_release_security(label);
 -
  	return err;
  }
  
@@@ -3486,14 -3677,21 +3505,20 @@@ static int nfs4_proc_mknod(struct inod
  		struct iattr *sattr, dev_t rdev)
  {
  	struct nfs4_exception exception = { };
 -	struct nfs4_label l, *label = NULL;
  	int err;
  
 -	label = nfs4_label_init_security(dir, dentry, sattr, &l);
 -
  	sattr->ia_mode &= ~current_umask();
  	do {
++<<<<<<< HEAD
 +		err = nfs4_handle_exception(NFS_SERVER(dir),
 +				_nfs4_proc_mknod(dir, dentry, sattr, rdev),
++=======
+ 		err = _nfs4_proc_mknod(dir, dentry, sattr, label, rdev);
+ 		trace_nfs4_mknod(dir, &dentry->d_name, err);
+ 		err = nfs4_handle_exception(NFS_SERVER(dir), err,
++>>>>>>> 078ea3dfe396 (NFSv4: Add tracepoints for debugging lookup/create operations)
  				&exception);
  	} while (exception.retry);
 -
 -	nfs4_label_release_security(label);
 -
  	return err;
  }
  
* Unmerged path fs/nfs/nfs4proc.c
diff --git a/fs/nfs/nfs4trace.h b/fs/nfs/nfs4trace.h
index 3f124dbcd60a..2646a50a8208 100644
--- a/fs/nfs/nfs4trace.h
+++ b/fs/nfs/nfs4trace.h
@@ -411,6 +411,56 @@ DEFINE_NFS4_LOCK_EVENT(nfs4_lock_reclaim);
 DEFINE_NFS4_LOCK_EVENT(nfs4_lock_expired);
 DEFINE_NFS4_LOCK_EVENT(nfs4_unlock);
 
+DECLARE_EVENT_CLASS(nfs4_lookup_event,
+		TP_PROTO(
+			const struct inode *dir,
+			const struct qstr *name,
+			int error
+		),
+
+		TP_ARGS(dir, name, error),
+
+		TP_STRUCT__entry(
+			__field(dev_t, dev)
+			__field(int, error)
+			__field(u64, dir)
+			__string(name, name->name)
+		),
+
+		TP_fast_assign(
+			__entry->dev = dir->i_sb->s_dev;
+			__entry->dir = NFS_FILEID(dir);
+			__entry->error = error;
+			__assign_str(name, name->name);
+		),
+
+		TP_printk(
+			"error=%d (%s) name=%02x:%02x:%llu/%s",
+			__entry->error,
+			show_nfsv4_errors(__entry->error),
+			MAJOR(__entry->dev), MINOR(__entry->dev),
+			(unsigned long long)__entry->dir,
+			__get_str(name)
+		)
+);
+
+#define DEFINE_NFS4_LOOKUP_EVENT(name) \
+	DEFINE_EVENT(nfs4_lookup_event, name, \
+			TP_PROTO( \
+				const struct inode *dir, \
+				const struct qstr *name, \
+				int error \
+			), \
+			TP_ARGS(dir, name, error))
+
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_lookup);
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_symlink);
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_mkdir);
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_mknod);
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_remove);
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_get_fs_locations);
+DEFINE_NFS4_LOOKUP_EVENT(nfs4_secinfo);
+
 #endif /* _TRACE_NFS4_H */
 
 #undef TRACE_INCLUDE_PATH
