context_tracking: User/kernel broundary cross trace events

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Frederic Weisbecker <fweisbec@gmail.com>
commit 1b6a259aa5ab16d8b215bfc19ff7c9ffa8858f10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/1b6a259a.failed

This can be useful to track all kernel/user round trips.
And it's also helpful to debug the context tracking subsystem.

	Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Li Zhong <zhong@linux.vnet.ibm.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Kevin Hilman <khilman@linaro.org>
(cherry picked from commit 1b6a259aa5ab16d8b215bfc19ff7c9ffa8858f10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/context_tracking.c
diff --cc kernel/context_tracking.c
index 93939ff36b59,247091bf0587..000000000000
--- a/kernel/context_tracking.c
+++ b/kernel/context_tracking.c
@@@ -20,11 -20,14 +20,22 @@@
  #include <linux/hardirq.h>
  #include <linux/export.h>
  
++<<<<<<< HEAD
 +DEFINE_PER_CPU(struct context_tracking, context_tracking) = {
 +#ifdef CONFIG_CONTEXT_TRACKING_FORCE
 +	.active = true,
 +#endif
 +};
++=======
+ #define CREATE_TRACE_POINTS
+ #include <trace/events/context_tracking.h>
+ 
+ struct static_key context_tracking_enabled = STATIC_KEY_INIT_FALSE;
+ EXPORT_SYMBOL_GPL(context_tracking_enabled);
+ 
+ DEFINE_PER_CPU(struct context_tracking, context_tracking);
+ EXPORT_SYMBOL_GPL(context_tracking);
++>>>>>>> 1b6a259aa5ab (context_tracking: User/kernel broundary cross trace events)
  
  void context_tracking_cpu_set(int cpu)
  {
diff --git a/include/trace/events/context_tracking.h b/include/trace/events/context_tracking.h
new file mode 100644
index 000000000000..ce8007cf29cf
--- /dev/null
+++ b/include/trace/events/context_tracking.h
@@ -0,0 +1,58 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM context_tracking
+
+#if !defined(_TRACE_CONTEXT_TRACKING_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_CONTEXT_TRACKING_H
+
+#include <linux/tracepoint.h>
+
+DECLARE_EVENT_CLASS(context_tracking_user,
+
+	TP_PROTO(int dummy),
+
+	TP_ARGS(dummy),
+
+	TP_STRUCT__entry(
+		__field( int,	dummy	)
+	),
+
+	TP_fast_assign(
+		__entry->dummy		= dummy;
+	),
+
+	TP_printk("%s", "")
+);
+
+/**
+ * user_enter - called when the kernel resumes to userspace
+ * @dummy:	dummy arg to make trace event macro happy
+ *
+ * This event occurs when the kernel resumes to userspace  after
+ * an exception or a syscall.
+ */
+DEFINE_EVENT(context_tracking_user, user_enter,
+
+	TP_PROTO(int dummy),
+
+	TP_ARGS(dummy)
+);
+
+/**
+ * user_exit - called when userspace enters the kernel
+ * @dummy:	dummy arg to make trace event macro happy
+ *
+ * This event occurs when userspace enters the kernel through
+ * an exception or a syscall.
+ */
+DEFINE_EVENT(context_tracking_user, user_exit,
+
+	TP_PROTO(int dummy),
+
+	TP_ARGS(dummy)
+);
+
+
+#endif /*  _TRACE_CONTEXT_TRACKING_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
* Unmerged path kernel/context_tracking.c
