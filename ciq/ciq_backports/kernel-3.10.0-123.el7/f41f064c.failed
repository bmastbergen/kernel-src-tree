PCI: Workaround missing pci_set_master in pci drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [pci] Workaround missing pci_set_master in pci drivers (Myron Stowe) [1033834]
Rebuild_FUZZ: 95.05%
commit-author Yinghai Lu <yinghai@kernel.org>
commit f41f064cf4352e6a7fd982f1de8a690897702513
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/f41f064c.failed

Ben Herrenschmidt found that commit 928bea964827 ("PCI: Delay enabling
bridges until they're needed") breaks PCI in some powerpc environments.

The reason is that the PCIe port driver will call pci_enable_device() on
the bridge, so the device is enabled, but skips pci_set_master because
pcie_port_auto and no acpi on powerpc.

Because of that, pci_enable_bridge() later on (called as a result of the
child device driver doing pci_enable_device) will see the bridge as
already enabled and will not call pci_set_master() on it.

Fixed by add checking in pci_enable_bridge, and call pci_set_master
if driver skip that.

That will make the code more robot and wade off problem for missing
pci_set_master in drivers.

	Reported-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Signed-off-by: Yinghai Lu <yinghai@kernel.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f41f064cf4352e6a7fd982f1de8a690897702513)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci.c
diff --cc drivers/pci/pci.c
index 93af257a13ec,bdd64b1b4817..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -1146,6 -1146,30 +1146,33 @@@ int pci_reenable_device(struct pci_dev 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void pci_enable_bridge(struct pci_dev *dev)
+ {
+ 	int retval;
+ 
+ 	if (!dev)
+ 		return;
+ 
+ 	pci_enable_bridge(dev->bus->self);
+ 
+ 	if (pci_is_enabled(dev)) {
+ 		if (!dev->is_busmaster) {
+ 			dev_warn(&dev->dev, "driver skip pci_set_master, fix it!\n");
+ 			pci_set_master(dev);
+ 		}
+ 		return;
+ 	}
+ 
+ 	retval = pci_enable_device(dev);
+ 	if (retval)
+ 		dev_err(&dev->dev, "Error enabling bridge (%d), continuing\n",
+ 			retval);
+ 	pci_set_master(dev);
+ }
+ 
++>>>>>>> f41f064cf435 (PCI: Workaround missing pci_set_master in pci drivers)
  static int pci_enable_device_flags(struct pci_dev *dev, unsigned long flags)
  {
  	int err;
* Unmerged path drivers/pci/pci.c
