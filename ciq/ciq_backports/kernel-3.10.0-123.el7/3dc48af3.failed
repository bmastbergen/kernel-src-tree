PCI/ACPI: Fix _OSC ordering to allow PCIe hotplug use when available

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [acpi] pci_root: Fix _OSC ordering to allow PCIe hotplug use when available (Neil Horman) [990078]
Rebuild_FUZZ: 92.65%
commit-author Neil Horman <nhorman@tuxdriver.com>
commit 3dc48af310709b85d07c8b0d3aa8f1ead02829d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/3dc48af3.failed

This fixes the problem of acpiphp claiming slots that should be managed
by pciehp, which may keep ExpressCard slots from working.

The acpiphp driver claims PCIe slots unless the BIOS has granted us
control of PCIe native hotplug via _OSC.  Prior to v3.10, the acpiphp
.add method (add_bridge()) was always called *after* we had requested
native hotplug control with _OSC.

But after 3b63aaa70e ("PCI: acpiphp: Do not use ACPI PCI subdriver
mechanism"), which appeared in v3.10, acpiphp initialization is done
during the bus scan via the pcibios_add_bus() hook, and this happens
*before* we request native hotplug control.

Therefore, acpiphp doesn't know yet whether the BIOS will grant control,
and it claims slots that we should be handling with native hotplug.

This patch requests native hotplug control earlier, so we know whether
the BIOS granted it to us before we initialize acpiphp.

To avoid reintroducing the ASPM issue fixed by b8178f130e ('Revert
"PCI/ACPI: Request _OSC control before scanning PCI root bus"'), we run
_OSC earlier but defer the actual ASPM calls until after the bus scan is
complete.

Tested successfully by myself.

[bhelgaas: changelog, mark for stable]
Reference: https://bugzilla.kernel.org/show_bug.cgi?id=60736
	Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Yinghai Lu <yinghai@kernel.org>
CC: stable@vger.kernel.org	# v3.10+
CC: Len Brown <lenb@kernel.org>
CC: "Rafael J. Wysocki" <rjw@sisk.pl>
(cherry picked from commit 3dc48af310709b85d07c8b0d3aa8f1ead02829d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/pci_root.c
diff --cc drivers/acpi/pci_root.c
index f138982c8b1f,a67853e3c419..000000000000
--- a/drivers/acpi/pci_root.c
+++ b/drivers/acpi/pci_root.c
@@@ -437,27 -438,6 +438,30 @@@ static int acpi_pci_root_add(struct acp
  	flags = base_flags = OSC_PCI_SEGMENT_GROUPS_SUPPORT;
  	acpi_pci_osc_support(root, flags);
  
++<<<<<<< HEAD
 +	/*
 +	 * TBD: Need PCI interface for enumeration/configuration of roots.
 +	 */
 +
 +	/*
 +	 * Scan the Root Bridge
 +	 * --------------------
 +	 * Must do this prior to any attempt to bind the root device, as the
 +	 * PCI namespace does not get created until this call is made (and
 +	 * thus the root bridge's pci_dev does not exist).
 +	 */
 +	root->bus = pci_acpi_scan_root(root);
 +	if (!root->bus) {
 +		printk(KERN_ERR PREFIX
 +			    "Bus %04x:%02x not present in PCI namespace\n",
 +			    root->segment, (unsigned int)root->secondary.start);
 +		result = -ENODEV;
 +		goto end;
 +	}
 +
 +	/* Indicate support for various _OSC capabilities. */
++=======
++>>>>>>> 3dc48af31070 (PCI/ACPI: Fix _OSC ordering to allow PCIe hotplug use when available)
  	if (pci_ext_cfg_avail())
  		flags |= OSC_EXT_PCI_CONFIG_SUPPORT;
  	if (pcie_aspm_support_enabled()) {
@@@ -510,9 -490,16 +514,22 @@@
  				"ACPI _OSC request failed (%s), "
  				"returned control mask: 0x%02x\n",
  				acpi_format_exception(status), flags);
++<<<<<<< HEAD
 +			pr_info("ACPI _OSC control for PCIe not granted, "
 +				"disabling ASPM\n");
 +			pcie_no_aspm();
++=======
+ 			dev_info(&device->dev,
+ 				 "ACPI _OSC control for PCIe not granted, disabling ASPM\n");
+ 			/*
+ 			 * We want to disable ASPM here, but aspm_disabled
+ 			 * needs to remain in its state from boot so that we
+ 			 * properly handle PCIe 1.1 devices.  So we set this
+ 			 * flag here, to defer the action until after the ACPI
+ 			 * root scan.
+ 			 */
+ 			no_aspm = true;
++>>>>>>> 3dc48af31070 (PCI/ACPI: Fix _OSC ordering to allow PCIe hotplug use when available)
  		}
  	} else {
  		dev_info(&device->dev,
* Unmerged path drivers/acpi/pci_root.c
