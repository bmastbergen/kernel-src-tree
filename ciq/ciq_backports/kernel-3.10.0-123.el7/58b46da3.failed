sched/numa: Rename variables in task_numa_fault()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Rik van Riel <riel@redhat.com>
commit 58b46da336a9312b2e21bb576d1c2c484dbf6257
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/58b46da3.failed

We track both the node of the memory after a NUMA fault, and the node
of the CPU on which the fault happened. Rename the local variables in
task_numa_fault to make things more explicit.

	Suggested-by: Mel Gorman <mgorman@suse.de>
	Signed-off-by: Rik van Riel <riel@redhat.com>
	Acked-by: Mel Gorman <mgorman@suse.de>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Chegu Vinod <chegu_vinod@hp.com>
Link: http://lkml.kernel.org/r/1390860228-21539-9-git-send-email-riel@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 58b46da336a9312b2e21bb576d1c2c484dbf6257)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index c33e42bc435b,d5832c367d87..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -876,9 -1735,12 +876,18 @@@ static void task_numa_placement(struct 
  /*
   * Got a PROT_NONE fault for a page on @node.
   */
++<<<<<<< HEAD
 +void task_numa_fault(int node, int pages, bool migrated)
 +{
 +	struct task_struct *p = current;
++=======
+ void task_numa_fault(int last_cpupid, int mem_node, int pages, int flags)
+ {
+ 	struct task_struct *p = current;
+ 	bool migrated = flags & TNF_MIGRATED;
+ 	int cpu_node = task_node(current);
+ 	int priv;
++>>>>>>> 58b46da336a9 (sched/numa: Rename variables in task_numa_fault())
  
  	if (!numabalancing_enabled)
  		return;
@@@ -911,7 -1784,19 +920,23 @@@
  
  	task_numa_placement(p);
  
++<<<<<<< HEAD
 +	p->numa_faults_buffer[node] += pages;
++=======
+ 	/*
+ 	 * Retry task to preferred node migration periodically, in case it
+ 	 * case it previously failed, or the scheduler moved us.
+ 	 */
+ 	if (time_after(jiffies, p->numa_migrate_retry))
+ 		numa_migrate_preferred(p);
+ 
+ 	if (migrated)
+ 		p->numa_pages_migrated += pages;
+ 
+ 	p->numa_faults_buffer_memory[task_faults_idx(mem_node, priv)] += pages;
+ 	p->numa_faults_buffer_cpu[task_faults_idx(cpu_node, priv)] += pages;
+ 	p->numa_faults_locality[!!(flags & TNF_FAULT_LOCAL)] += pages;
++>>>>>>> 58b46da336a9 (sched/numa: Rename variables in task_numa_fault())
  }
  
  static void reset_ptenuma_scan(struct task_struct *p)
* Unmerged path kernel/sched/fair.c
