dm cache: fix truncation bug when mapping I/O to >2TB fast device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [md] dm-cache: fix truncation bug when mapping I/O to >2TB fast device (Mike Snitzer) [995644]
Rebuild_FUZZ: 98.46%
commit-author Heinz Mauelshagen <heinzm@redhat.com>
commit e0d849fad746cb36a6822e4595d8ba9bf0adf7fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/e0d849fa.failed

When remapping a block to the cache's fast device that is larger than
2TB we must not truncate the destination sector to 32bits.  The 32bit
temporary result of from_cblock() was being overflowed in
remap_to_cache() due to the logical left shift.

Use an intermediate 64bit type to store the 32bit from_cblock() result
to fix the overflow.

	Signed-off-by: Heinz Mauelshagen <heinzm@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
	Cc: stable@vger.kernel.org
(cherry picked from commit e0d849fad746cb36a6822e4595d8ba9bf0adf7fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-cache-target.c
diff --cc drivers/md/dm-cache-target.c
index ed4cffe4470d,1af70145fab9..000000000000
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@@ -664,15 -670,18 +664,30 @@@ static void remap_to_origin(struct cach
  static void remap_to_cache(struct cache *cache, struct bio *bio,
  			   dm_cblock_t cblock)
  {
++<<<<<<< HEAD
 +	sector_t bi_sector = bio->bi_sector;
 +
 +	bio->bi_bdev = cache->cache_dev->bdev;
 +	if (!block_size_is_power_of_two(cache))
 +		bio->bi_sector = (from_cblock(cblock) * cache->sectors_per_block) +
 +				sector_div(bi_sector, cache->sectors_per_block);
 +	else
 +		bio->bi_sector = (from_cblock(cblock) << cache->sectors_per_block_shift) |
 +				(bi_sector & (cache->sectors_per_block - 1));
++=======
+ 	sector_t bi_sector = bio->bi_iter.bi_sector;
+ 	sector_t block = from_cblock(cblock);
+ 
+ 	bio->bi_bdev = cache->cache_dev->bdev;
+ 	if (!block_size_is_power_of_two(cache))
+ 		bio->bi_iter.bi_sector =
+ 			(block * cache->sectors_per_block) +
+ 			sector_div(bi_sector, cache->sectors_per_block);
+ 	else
+ 		bio->bi_iter.bi_sector =
+ 			(block << cache->sectors_per_block_shift) |
+ 			(bi_sector & (cache->sectors_per_block - 1));
++>>>>>>> e0d849fad746 (dm cache: fix truncation bug when mapping I/O to >2TB fast device)
  }
  
  static void check_if_tick_bio_needed(struct cache *cache, struct bio *bio)
* Unmerged path drivers/md/dm-cache-target.c
