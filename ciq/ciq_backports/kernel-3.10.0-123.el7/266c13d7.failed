cpufreq: Fix serialization of frequency transitions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [cpufreq] Fix serialization of frequency transitions (Myron Stowe) [998633]
Rebuild_FUZZ: 90.32%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 266c13d767be61a17d8e6f2310b9b7c46278273b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/266c13d7.failed

Commit 7c30ed ("cpufreq: make sure frequency transitions are serialized")
interacts poorly with systems that have a single core freqency for all
cores.  On such systems we have a single policy for all cores with
several CPUs.  When we do a frequency transition the governor calls the
pre and post change notifiers which causes cpufreq_notify_transition()
per CPU.  Since the policy is the same for all of them all CPUs after
the first and the warnings added are generated by checking a per-policy
flag the warnings will be triggered for all cores after the first.

Fix this by allowing notifier to be called for n times. Where n is the number of
cpus in policy->cpus.

Reported-and-tested-by: Mark Brown <broonie@linaro.org>
	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 266c13d767be61a17d8e6f2310b9b7c46278273b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
#	include/linux/cpufreq.h
diff --cc drivers/cpufreq/cpufreq.c
index 3d4d1c6752ed,0937b8d6c2a4..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -313,6 -312,13 +313,16 @@@ void __cpufreq_notify_transition(struc
  	switch (state) {
  
  	case CPUFREQ_PRECHANGE:
++<<<<<<< HEAD
++=======
+ 		if (WARN(policy->transition_ongoing ==
+ 					cpumask_weight(policy->cpus),
+ 				"In middle of another frequency transition\n"))
+ 			return;
+ 
+ 		policy->transition_ongoing++;
+ 
++>>>>>>> 266c13d767be (cpufreq: Fix serialization of frequency transitions)
  		/* detect if the driver reported a value as "old frequency"
  		 * which is not equal to what the cpufreq core thinks is
  		 * "old frequency".
@@@ -332,6 -338,12 +342,15 @@@
  		break;
  
  	case CPUFREQ_POSTCHANGE:
++<<<<<<< HEAD
++=======
+ 		if (WARN(!policy->transition_ongoing,
+ 				"No frequency transition in progress\n"))
+ 			return;
+ 
+ 		policy->transition_ongoing--;
+ 
++>>>>>>> 266c13d767be (cpufreq: Fix serialization of frequency transitions)
  		adjust_jiffies(CPUFREQ_POSTCHANGE, freqs);
  		pr_debug("FREQ: %lu - CPU: %lu", (unsigned long)freqs->new,
  			(unsigned long)freqs->cpu);
diff --cc include/linux/cpufreq.h
index 9136195856c6,90d5a15120d5..000000000000
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@@ -120,6 -119,7 +120,10 @@@ struct cpufreq_policy 
  
  	struct kobject		kobj;
  	struct completion	kobj_unregister;
++<<<<<<< HEAD
++=======
+ 	int			transition_ongoing; /* Tracks transition status */
++>>>>>>> 266c13d767be (cpufreq: Fix serialization of frequency transitions)
  };
  
  #define CPUFREQ_ADJUST			(0)
* Unmerged path drivers/cpufreq/cpufreq.c
* Unmerged path include/linux/cpufreq.h
