PCI: Assign resources for hot-added host bridge more aggressively

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [pci] Assign resources for hot-added host bridge more aggressively (Myron Stowe) [1005229]
Rebuild_FUZZ: 96.00%
commit-author Yinghai Lu <yinghai@kernel.org>
commit 39772038ea93e85ea4f1307ec9c1f48a063d89a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/39772038.failed

When hot-adding an ACPI host bridge, use
pci_assign_unassigned_root_bus_resources() instead of
pci_assign_unassigned_bus_resources().

The former is more aggressive and will release and reassign existing
resources if necessary.  This is safe at hot-add time because no drivers
are bound to devices below the new host bridge yet.

[bhelgaas: changelog, split __init changes out for reviewability]
	Signed-off-by: Yinghai Lu <yinghai@kernel.org>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 39772038ea93e85ea4f1307ec9c1f48a063d89a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/pci_root.c
diff --cc drivers/acpi/pci_root.c
index f138982c8b1f,ce04eb28e029..000000000000
--- a/drivers/acpi/pci_root.c
+++ b/drivers/acpi/pci_root.c
@@@ -526,10 -526,7 +526,14 @@@ static int acpi_pci_root_add(struct acp
  
  	if (system_state != SYSTEM_BOOTING) {
  		pcibios_resource_survey_bus(root->bus);
++<<<<<<< HEAD
 +		pci_assign_unassigned_bus_resources(root->bus);
 +
 +		/* need to after hot-added ioapic is registered */
 +		pci_enable_bridges(root->bus);
++=======
+ 		pci_assign_unassigned_root_bus_resources(root->bus);
++>>>>>>> 39772038ea93 (PCI: Assign resources for hot-added host bridge more aggressively)
  	}
  
  	pci_bus_add_devices(root->bus);
* Unmerged path drivers/acpi/pci_root.c
diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index 6e8a6b371a19..c465ca064375 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -1462,7 +1462,7 @@ static enum enable_type pci_realloc_detect(struct pci_bus *bus,
  * second  and later try will clear small leaf bridge res
  * will stop till to the max  deepth if can not find good one
  */
-static void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
+void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus)
 {
 	LIST_HEAD(realloc_head); /* list of resources that
 					want additional resources */
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 0fd1f1582fa1..543081734000 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1003,6 +1003,7 @@ int pci_claim_resource(struct pci_dev *, int);
 void pci_assign_unassigned_resources(void);
 void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
 void pci_assign_unassigned_bus_resources(struct pci_bus *bus);
+void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus);
 void pdev_enable_device(struct pci_dev *);
 int pci_enable_resources(struct pci_dev *, int mask);
 void pci_fixup_irqs(u8 (*)(struct pci_dev *, u8 *),
