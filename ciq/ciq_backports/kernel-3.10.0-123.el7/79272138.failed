PCI: Enable upstream bridges even for VFs on virtual buses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [pci] Enable upstream bridges even for VFs on virtual buses (Myron Stowe) [1033834]
Rebuild_FUZZ: 95.50%
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit 79272138bd5c35edb9be5ae7b473a2741751a706
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/79272138.failed

Previously we enabled the upstream PCI-to-PCI bridge only when
"dev->bus->self != NULL".  In the case of a VF on a virtual bus, where
"bus->self == NULL", we didn't enable the upstream bridge.

This fixes that by enabling the upstream bridge of the PF corresponding to
the VF.

	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Yinghai Lu <yinghai@kernel.org>
(cherry picked from commit 79272138bd5c35edb9be5ae7b473a2741751a706)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci.c
diff --cc drivers/pci/pci.c
index 93af257a13ec,d3ed931c0770..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -1146,8 -1146,31 +1146,34 @@@ int pci_reenable_device(struct pci_dev 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void pci_enable_bridge(struct pci_dev *dev)
+ {
+ 	struct pci_dev *bridge;
+ 	int retval;
+ 
+ 	bridge = pci_upstream_bridge(dev);
+ 	if (bridge)
+ 		pci_enable_bridge(bridge);
+ 
+ 	if (pci_is_enabled(dev)) {
+ 		if (!dev->is_busmaster)
+ 			pci_set_master(dev);
+ 		return;
+ 	}
+ 
+ 	retval = pci_enable_device(dev);
+ 	if (retval)
+ 		dev_err(&dev->dev, "Error enabling bridge (%d), continuing\n",
+ 			retval);
+ 	pci_set_master(dev);
+ }
+ 
++>>>>>>> 79272138bd5c (PCI: Enable upstream bridges even for VFs on virtual buses)
  static int pci_enable_device_flags(struct pci_dev *dev, unsigned long flags)
  {
+ 	struct pci_dev *bridge;
  	int err;
  	int i, bars = 0;
  
@@@ -1166,6 -1189,10 +1192,13 @@@
  	if (atomic_inc_return(&dev->enable_cnt) > 1)
  		return 0;		/* already enabled */
  
++<<<<<<< HEAD
++=======
+ 	bridge = pci_upstream_bridge(dev);
+ 	if (bridge)
+ 		pci_enable_bridge(bridge);
+ 
++>>>>>>> 79272138bd5c (PCI: Enable upstream bridges even for VFs on virtual buses)
  	/* only skip sriov related */
  	for (i = 0; i <= PCI_ROM_RESOURCE; i++)
  		if (dev->resource[i].flags & flags)
* Unmerged path drivers/pci/pci.c
