xen-blkfront: set blk_queue_max_hw_sectors correctly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Roger Pau Monne <roger.pau@citrix.com>
commit 294caaf29c26cfed3b446fb46393b8b39ea1c0d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/294caaf2.failed

Now that indirect segments are enabled blk_queue_max_hw_sectors must
be set to match the maximum number of sectors we can handle in a
request.

	Signed-off-by: Roger Pau Monn√© <roger.pau@citrix.com>
	Reported-by: Felipe Franciosi <felipe.franciosi@citrix.com>
	Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit 294caaf29c26cfed3b446fb46393b8b39ea1c0d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/xen-blkfront.c
diff --cc drivers/block/xen-blkfront.c
index d89ef86220f4,2e1ee348ffe1..000000000000
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@@ -564,7 -632,8 +564,12 @@@ static int xlvbd_init_blk_queue(struct 
  
  	/* Hard sector size and max sectors impersonate the equiv. hardware. */
  	blk_queue_logical_block_size(rq, sector_size);
++<<<<<<< HEAD
 +	blk_queue_max_hw_sectors(rq, 512);
++=======
+ 	blk_queue_physical_block_size(rq, physical_sector_size);
+ 	blk_queue_max_hw_sectors(rq, (segments * PAGE_SIZE) / 512);
++>>>>>>> 294caaf29c26 (xen-blkfront: set blk_queue_max_hw_sectors correctly)
  
  	/* Each segment in a request is up to an aligned page in size. */
  	blk_queue_segment_boundary(rq, PAGE_SIZE - 1);
* Unmerged path drivers/block/xen-blkfront.c
