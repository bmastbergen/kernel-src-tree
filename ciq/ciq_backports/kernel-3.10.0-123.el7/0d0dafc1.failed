s390/kvm: rename RCP_xxx defines to PGSTE_xxx

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [s390] kvm: rename RCP_xxx defines to PGSTE_xxx (Hendrik Brueckner) [1035261]
Rebuild_FUZZ: 94.12%
commit-author Martin Schwidefsky <schwidefsky@de.ibm.com>
commit 0d0dafc1e48fd254c22f75738def870a7ffd2c3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/0d0dafc1.failed

The RCP byte is a part of the PGSTE value, the existing RCP_xxx names
are inaccurate. As the defines describe bits and pieces of the PGSTE,
the names should start with PGSTE_. The KVM_UR_BIT and KVM_UC_BIT are
part of the PGSTE as well, give them better names as well.

	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
	Signed-off-by: Gleb Natapov <gleb@redhat.com>
(cherry picked from commit 0d0dafc1e48fd254c22f75738def870a7ffd2c3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/pgtable.h
diff --cc arch/s390/include/asm/pgtable.h
index 2080dfeba64b,1fc68d97be9d..000000000000
--- a/arch/s390/include/asm/pgtable.h
+++ b/arch/s390/include/asm/pgtable.h
@@@ -632,11 -628,10 +628,11 @@@ static inline void pgste_set_unlock(pte
  {
  #ifdef CONFIG_PGSTE
  	asm(
- 		"	nihh	%1,0xff7f\n"	/* clear RCP_PCL_BIT */
+ 		"	nihh	%1,0xff7f\n"	/* clear PCL bit */
  		"	stg	%1,%0\n"
  		: "=Q" (ptep[PTRS_PER_PTE])
 -		: "d" (pgste_val(pgste)), "Q" (ptep[PTRS_PER_PTE]) : "cc");
 +		: "d" (pgste_val(pgste)), "Q" (ptep[PTRS_PER_PTE])
 +		: "cc", "memory");
  	preempt_enable();
  #endif
  }
@@@ -712,19 -700,17 +708,28 @@@ static inline void pgste_set_key(pte_t 
  {
  #ifdef CONFIG_PGSTE
  	unsigned long address;
 -	unsigned long okey, nkey;
 +	unsigned long nkey;
  
 -	if (!pte_present(entry))
 +	if (pte_val(entry) & _PAGE_INVALID)
  		return;
 +	VM_BUG_ON(!(pte_val(*ptep) & _PAGE_INVALID));
  	address = pte_val(entry) & PAGE_MASK;
++<<<<<<< HEAD
 +	/*
 +	 * Set page access key and fetch protection bit from pgste.
 +	 * The guest C/R information is still in the PGSTE, set real
 +	 * key C/R to 0.
 +	 */
 +	nkey = (pgste_val(pgste) & (RCP_ACC_BITS | RCP_FP_BIT)) >> 56;
 +	page_set_storage_key(address, nkey, 0);
++=======
+ 	okey = nkey = page_get_storage_key(address);
+ 	nkey &= ~(_PAGE_ACC_BITS | _PAGE_FP_BIT);
+ 	/* Set page access key and fetch protection bit from pgste */
+ 	nkey |= (pgste_val(pgste) & (PGSTE_ACC_BITS | PGSTE_FP_BIT)) >> 56;
+ 	if (okey != nkey)
+ 		page_set_storage_key(address, nkey, 0);
++>>>>>>> 0d0dafc1e48f (s390/kvm: rename RCP_xxx defines to PGSTE_xxx)
  #endif
  }
  
* Unmerged path arch/s390/include/asm/pgtable.h
diff --git a/arch/s390/mm/pgtable.c b/arch/s390/mm/pgtable.c
index c75c6dae91dd..df7bfbdde9d2 100644
--- a/arch/s390/mm/pgtable.c
+++ b/arch/s390/mm/pgtable.c
@@ -707,7 +707,7 @@ int gmap_ipte_notify(struct gmap *gmap, unsigned long start, unsigned long len)
 		entry = *ptep;
 		if ((pte_val(entry) & (_PAGE_INVALID | _PAGE_RO)) == 0) {
 			pgste = pgste_get_lock(ptep);
-			pgste_val(pgste) |= RCP_IN_BIT;
+			pgste_val(pgste) |= PGSTE_IN_BIT;
 			pgste_set_unlock(ptep, pgste);
 			start += PAGE_SIZE;
 			len -= PAGE_SIZE;
