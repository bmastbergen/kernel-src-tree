ALSA: hda - add connection to thinkpad_acpi to control mute/micmute LEDs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [alsa] hda: add connection to thinkpad_acpi to control mute/micmute LEDs (Jaroslav Kysela) [1044022]
Rebuild_FUZZ: 93.43%
commit-author David Henningsson <david.henningsson@canonical.com>
commit 08cf680ccafd5df9885fbcd0cab85221df00b44b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/08cf680c.failed

	Signed-off-by: David Henningsson <david.henningsson@canonical.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 08cf680ccafd5df9885fbcd0cab85221df00b44b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_conexant.c
diff --cc sound/pci/hda/patch_conexant.c
index 4edd2d0f9a3c,993b25c17711..000000000000
--- a/sound/pci/hda/patch_conexant.c
+++ b/sound/pci/hda/patch_conexant.c
@@@ -3231,8 -3237,85 +3237,88 @@@ enum 
  	CXT_FIXUP_INC_MIC_BOOST,
  	CXT_FIXUP_HEADPHONE_MIC_PIN,
  	CXT_FIXUP_HEADPHONE_MIC,
++<<<<<<< HEAD
++=======
+ 	CXT_FIXUP_GPIO1,
+ 	CXT_FIXUP_THINKPAD_ACPI,
++>>>>>>> 08cf680ccafd (ALSA: hda - add connection to thinkpad_acpi to control mute/micmute LEDs)
  };
  
+ #if IS_ENABLED(CONFIG_THINKPAD_ACPI)
+ 
+ #include <linux/thinkpad_acpi.h>
+ 
+ static int (*led_set_func)(int, bool);
+ 
+ static void update_tpacpi_mute_led(void *private_data, int enabled)
+ {
+ 	struct hda_codec *codec = private_data;
+ 	struct conexant_spec *spec = codec->spec;
+ 
+ 	if (spec->dynamic_eapd)
+ 		cx_auto_vmaster_hook(private_data, enabled);
+ 
+ 	if (led_set_func)
+ 		led_set_func(TPACPI_LED_MUTE, !enabled);
+ }
+ 
+ static void update_tpacpi_micmute_led(struct hda_codec *codec,
+ 				      struct snd_ctl_elem_value *ucontrol)
+ {
+ 	if (!ucontrol || !led_set_func)
+ 		return;
+ 	if (strcmp("Capture Switch", ucontrol->id.name) == 0 && ucontrol->id.index == 0) {
+ 		/* TODO: How do I verify if it's a mono or stereo here? */
+ 		bool val = ucontrol->value.integer.value[0] || ucontrol->value.integer.value[1];
+ 		led_set_func(TPACPI_LED_MICMUTE, !val);
+ 	}
+ }
+ 
+ static void cxt_fixup_thinkpad_acpi(struct hda_codec *codec,
+ 				  const struct hda_fixup *fix, int action)
+ {
+ 	struct conexant_spec *spec = codec->spec;
+ 
+ 	bool removefunc = false;
+ 
+ 	if (action == HDA_FIXUP_ACT_PROBE) {
+ 		if (!led_set_func)
+ 			led_set_func = symbol_request(tpacpi_led_set);
+ 		if (!led_set_func) {
+ 			snd_printk(KERN_WARNING "Failed to find thinkpad-acpi symbol tpacpi_led_set\n");
+ 			return;
+ 		}
+ 
+ 		removefunc = true;
+ 		if (led_set_func(TPACPI_LED_MUTE, false) >= 0) {
+ 			spec->gen.vmaster_mute.hook = update_tpacpi_mute_led;
+ 			removefunc = false;
+ 		}
+ 		if (led_set_func(TPACPI_LED_MICMUTE, false) >= 0) {
+ 			if (spec->gen.num_adc_nids > 1)
+ 				snd_printdd("Skipping micmute LED control due to several ADCs");
+ 			else {
+ 				spec->gen.cap_sync_hook = update_tpacpi_micmute_led;
+ 				removefunc = false;
+ 			}
+ 		}
+ 	}
+ 
+ 	if (led_set_func && (action == HDA_FIXUP_ACT_FREE || removefunc)) {
+ 		symbol_put(tpacpi_led_set);
+ 		led_set_func = NULL;
+ 	}
+ }
+ 
+ #else
+ 
+ static void cxt_fixup_thinkpad_acpi(struct hda_codec *codec,
+ 				  const struct hda_fixup *fix, int action)
+ {
+ }
+ 
+ #endif
+ 
  static void cxt_fixup_stereo_dmic(struct hda_codec *codec,
  				  const struct hda_fixup *fix, int action)
  {
@@@ -3375,6 -3460,19 +3463,22 @@@ static const struct hda_fixup cxt_fixup
  		.type = HDA_FIXUP_FUNC,
  		.v.func = cxt_fixup_headphone_mic,
  	},
++<<<<<<< HEAD
++=======
+ 	[CXT_FIXUP_GPIO1] = {
+ 		.type = HDA_FIXUP_VERBS,
+ 		.v.verbs = (const struct hda_verb[]) {
+ 			{ 0x01, AC_VERB_SET_GPIO_MASK, 0x01 },
+ 			{ 0x01, AC_VERB_SET_GPIO_DIRECTION, 0x01 },
+ 			{ 0x01, AC_VERB_SET_GPIO_DATA, 0x01 },
+ 			{ }
+ 		},
+ 	},
+ 	[CXT_FIXUP_THINKPAD_ACPI] = {
+ 		.type = HDA_FIXUP_FUNC,
+ 		.v.func = cxt_fixup_thinkpad_acpi,
+ 	},
++>>>>>>> 08cf680ccafd (ALSA: hda - add connection to thinkpad_acpi to control mute/micmute LEDs)
  };
  
  static const struct snd_pci_quirk cxt5051_fixups[] = {
* Unmerged path sound/pci/hda/patch_conexant.c
