blk-throttle: add throtl_service_queue->parent_sq

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Tejun Heo <tj@kernel.org>
commit 77216b0484817817a18aaa6b089dffe49070f7c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/77216b04.failed

To prepare for hierarchy support, this patch adds
throtl_service_queue->service_sq which points to the arent
service_queue.  Currently, for all service_queues embedded in
throtl_grps, it points to throtl_data->service_queue.  As
throtl_data->service_queue doesn't have a parent its parent_sq is set
to NULL.

There are a number of functions which take both throtl_grp *tg and
throtl_service_queue *parent_sq.  With this patch, the parent
service_queue can be determined from @tg and the @parent_sq arguments
are removed.

This patch doesn't make any behavior differences.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Acked-by: Vivek Goyal <vgoyal@redhat.com>
(cherry picked from commit 77216b0484817817a18aaa6b089dffe49070f7c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-throttle.c
diff --cc block/blk-throttle.c
index e65e45a33372,00cfdd05f98f..000000000000
--- a/block/blk-throttle.c
+++ b/block/blk-throttle.c
@@@ -755,8 -754,7 +754,12 @@@ static void tg_update_disptime(struct t
  	tg->flags &= ~THROTL_TG_WAS_EMPTY;
  }
  
++<<<<<<< HEAD
 +static void tg_dispatch_one_bio(struct throtl_grp *tg, bool rw,
 +				struct bio_list *bl)
++=======
+ static void tg_dispatch_one_bio(struct throtl_grp *tg, bool rw)
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  {
  	struct throtl_service_queue *sq = &tg->service_queue;
  	struct bio *bio;
@@@ -770,13 -768,13 +773,21 @@@
  	tg->td->nr_queued[rw]--;
  
  	throtl_charge_bio(tg, bio);
++<<<<<<< HEAD
 +	bio_list_add(bl, bio);
++=======
+ 	bio_list_add(&sq->parent_sq->bio_lists[rw], bio);
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  	bio->bi_rw |= REQ_THROTTLED;
  
  	throtl_trim_slice(tg, rw);
  }
  
++<<<<<<< HEAD
 +static int throtl_dispatch_tg(struct throtl_grp *tg, struct bio_list *bl)
++=======
+ static int throtl_dispatch_tg(struct throtl_grp *tg)
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  {
  	struct throtl_service_queue *sq = &tg->service_queue;
  	unsigned int nr_reads = 0, nr_writes = 0;
@@@ -789,7 -787,7 +800,11 @@@
  	while ((bio = bio_list_peek(&sq->bio_lists[READ])) &&
  	       tg_may_dispatch(tg, bio, NULL)) {
  
++<<<<<<< HEAD
 +		tg_dispatch_one_bio(tg, bio_data_dir(bio), bl);
++=======
+ 		tg_dispatch_one_bio(tg, bio_data_dir(bio));
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  		nr_reads++;
  
  		if (nr_reads >= max_nr_reads)
@@@ -799,7 -797,7 +814,11 @@@
  	while ((bio = bio_list_peek(&sq->bio_lists[WRITE])) &&
  	       tg_may_dispatch(tg, bio, NULL)) {
  
++<<<<<<< HEAD
 +		tg_dispatch_one_bio(tg, bio_data_dir(bio), bl);
++=======
+ 		tg_dispatch_one_bio(tg, bio_data_dir(bio));
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  		nr_writes++;
  
  		if (nr_writes >= max_nr_writes)
@@@ -824,12 -821,12 +843,16 @@@ static int throtl_select_dispatch(struc
  		if (time_before(jiffies, tg->disptime))
  			break;
  
- 		throtl_dequeue_tg(tg, parent_sq);
+ 		throtl_dequeue_tg(tg);
  
++<<<<<<< HEAD
 +		nr_disp += throtl_dispatch_tg(tg, bl);
++=======
+ 		nr_disp += throtl_dispatch_tg(tg);
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  
  		if (sq->nr_queued[0] || sq->nr_queued[1])
- 			tg_update_disptime(tg, parent_sq);
+ 			tg_update_disptime(tg);
  
  		if (nr_disp >= throtl_quantum)
  			break;
@@@ -1174,12 -1176,12 +1197,18 @@@ void blk_throtl_drain(struct request_qu
  	while ((tg = throtl_rb_first(parent_sq))) {
  		struct throtl_service_queue *sq = &tg->service_queue;
  
- 		throtl_dequeue_tg(tg, parent_sq);
+ 		throtl_dequeue_tg(tg);
  
  		while ((bio = bio_list_peek(&sq->bio_lists[READ])))
++<<<<<<< HEAD
 +			tg_dispatch_one_bio(tg, bio_data_dir(bio), &bl);
 +		while ((bio = bio_list_peek(&sq->bio_lists[WRITE])))
 +			tg_dispatch_one_bio(tg, bio_data_dir(bio), &bl);
++=======
+ 			tg_dispatch_one_bio(tg, bio_data_dir(bio));
+ 		while ((bio = bio_list_peek(&sq->bio_lists[WRITE])))
+ 			tg_dispatch_one_bio(tg, bio_data_dir(bio));
++>>>>>>> 77216b048481 (blk-throttle: add throtl_service_queue->parent_sq)
  	}
  	spin_unlock_irq(q->queue_lock);
  
* Unmerged path block/blk-throttle.c
