nfs4.1: Add SP4_MACH_CRED stateid support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [fs] nfs: Add SP4_MACH_CRED stateid support (Jeff Layton) [1009119]
Rebuild_FUZZ: 96.20%
commit-author Weston Andros Adamson <dros@netapp.com>
commit 3787d5063c52b0c38003e6293f24839508604070
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/3787d506.failed

TEST_STATEID and FREE_STATEID can use the machine credential.

	Signed-off-by: Weston Andros Adamson <dros@netapp.com>
	Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
(cherry picked from commit 3787d5063c52b0c38003e6293f24839508604070)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
#	include/linux/nfs_fs_sb.h
diff --cc fs/nfs/nfs4proc.c
index 74bc306dedb0,4818a38f469b..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -5653,7 -6141,11 +5653,15 @@@ static const struct nfs41_state_protect
  	},
  	.allow.u.words = {
  		[0] = 1 << (OP_CLOSE) |
++<<<<<<< HEAD
 +		      1 << (OP_LOCKU)
++=======
+ 		      1 << (OP_LOCKU),
+ 		[1] = 1 << (OP_SECINFO - 32) |
+ 		      1 << (OP_SECINFO_NO_NAME - 32) |
+ 		      1 << (OP_TEST_STATEID - 32) |
+ 		      1 << (OP_FREE_STATEID - 32)
++>>>>>>> 3787d5063c52 (nfs4.1: Add SP4_MACH_CRED stateid support)
  	}
  };
  
@@@ -5719,6 -6211,18 +5727,21 @@@ static int nfs4_sp4_select_mode(struct 
  			dfprintk(MOUNT, "  cleanup mode enabled\n");
  			set_bit(NFS_SP4_MACH_CRED_CLEANUP, &clp->cl_sp4_flags);
  		}
++<<<<<<< HEAD
++=======
+ 
+ 		if (test_bit(OP_SECINFO, sp->allow.u.longs) &&
+ 		    test_bit(OP_SECINFO_NO_NAME, sp->allow.u.longs)) {
+ 			dfprintk(MOUNT, "  secinfo mode enabled\n");
+ 			set_bit(NFS_SP4_MACH_CRED_SECINFO, &clp->cl_sp4_flags);
+ 		}
+ 
+ 		if (test_bit(OP_TEST_STATEID, sp->allow.u.longs) &&
+ 		    test_bit(OP_FREE_STATEID, sp->allow.u.longs)) {
+ 			dfprintk(MOUNT, "  stateid mode enabled\n");
+ 			set_bit(NFS_SP4_MACH_CRED_STATEID, &clp->cl_sp4_flags);
+ 		}
++>>>>>>> 3787d5063c52 (nfs4.1: Add SP4_MACH_CRED stateid support)
  	}
  
  	return 0;
@@@ -7045,11 -7555,15 +7068,15 @@@ static int _nfs41_test_stateid(struct n
  		.rpc_resp = &res,
  		.rpc_cred = cred,
  	};
+ 	struct rpc_clnt *rpc_client = server->client;
+ 
+ 	nfs4_state_protect(server->nfs_client, NFS_SP4_MACH_CRED_STATEID,
+ 		&rpc_client, &msg);
  
  	dprintk("NFS call  test_stateid %p\n", stateid);
 -	nfs4_init_sequence(&args.seq_args, &res.seq_res, 0);
 +	nfs41_init_sequence(&args.seq_args, &res.seq_res, 0);
  	nfs4_set_sequence_privileged(&args.seq_args);
- 	status = nfs4_call_sync_sequence(server->client, server, &msg,
+ 	status = nfs4_call_sync_sequence(rpc_client, server, &msg,
  			&args.seq_args, &res.seq_res);
  	if (status != NFS_OK) {
  		dprintk("NFS reply test_stateid: failed, %d\n", status);
diff --cc include/linux/nfs_fs_sb.h
index a52a00575751,179586555bbe..000000000000
--- a/include/linux/nfs_fs_sb.h
+++ b/include/linux/nfs_fs_sb.h
@@@ -95,6 -95,8 +95,11 @@@ struct nfs_client 
  #define NFS_SP4_MACH_CRED_MINIMAL  1	/* Minimal sp4_mach_cred - state ops
  					 * must use machine cred */
  #define NFS_SP4_MACH_CRED_CLEANUP  2	/* CLOSE and LOCKU */
++<<<<<<< HEAD
++=======
+ #define NFS_SP4_MACH_CRED_SECINFO  3	/* SECINFO and SECINFO_NO_NAME */
+ #define NFS_SP4_MACH_CRED_STATEID  4	/* TEST_STATEID and FREE_STATEID */
++>>>>>>> 3787d5063c52 (nfs4.1: Add SP4_MACH_CRED stateid support)
  #endif /* CONFIG_NFS_V4 */
  
  #ifdef CONFIG_NFS_FSCACHE
* Unmerged path fs/nfs/nfs4proc.c
* Unmerged path include/linux/nfs_fs_sb.h
