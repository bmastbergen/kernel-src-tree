inet_diag: fix inet_diag_dump_icsk() to use correct state for timewait sockets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Neal Cardwell <ncardwell@google.com>
commit 70315d22d3c7383f9a508d0aab21e2eb35b2303a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/70315d22.failed

Fix inet_diag_dump_icsk() to reflect the fact that both TCP_TIME_WAIT
and TCP_FIN_WAIT2 connections are represented by inet_timewait_sock
(not just TIME_WAIT), and for such sockets the tw_substate field holds
the real state, which can be either TCP_TIME_WAIT or TCP_FIN_WAIT2.

This brings the inet_diag state-matching code in line with the field
it uses to populate idiag_state. This is also analogous to the info
exported in /proc/net/tcp, where get_tcp4_sock() exports sk->sk_state
and get_timewait4_sock() exports tw->tw_substate.

Before fixing this, (a) neither "ss -nemoi" nor "ss -nemoi state
fin-wait-2" would return a socket in TCP_FIN_WAIT2; and (b) "ss -nemoi
state time-wait" would also return sockets in state TCP_FIN_WAIT2.

This is an old bug that predates 05dbc7b ("tcp/dccp: remove twchain").

	Signed-off-by: Neal Cardwell <ncardwell@google.com>
	Cc: Eric Dumazet <edumazet@google.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 70315d22d3c7383f9a508d0aab21e2eb35b2303a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/inet_diag.c
diff --cc net/ipv4/inet_diag.c
index f4a95a21ee3b,e34dccbc4d70..000000000000
--- a/net/ipv4/inet_diag.c
+++ b/net/ipv4/inet_diag.c
@@@ -917,24 -929,31 +917,31 @@@ skip_listen_ht
  
  		spin_lock_bh(lock);
  		sk_nulls_for_each(sk, node, &head->chain) {
++<<<<<<< HEAD
 +			struct inet_sock *inet = inet_sk(sk);
++=======
+ 			int res;
+ 			int state;
++>>>>>>> 70315d22d3c7 (inet_diag: fix inet_diag_dump_icsk() to use correct state for timewait sockets)
  
  			if (!net_eq(sock_net(sk), net))
  				continue;
  			if (num < s_num)
  				goto next_normal;
- 			if (!(r->idiag_states & (1 << sk->sk_state)))
+ 			state = (sk->sk_state == TCP_TIME_WAIT) ?
+ 				inet_twsk(sk)->tw_substate : sk->sk_state;
+ 			if (!(r->idiag_states & (1 << state)))
  				goto next_normal;
  			if (r->sdiag_family != AF_UNSPEC &&
 -			    sk->sk_family != r->sdiag_family)
 +					sk->sk_family != r->sdiag_family)
  				goto next_normal;
 -			if (r->id.idiag_sport != htons(sk->sk_num) &&
 +			if (r->id.idiag_sport != inet->inet_sport &&
  			    r->id.idiag_sport)
  				goto next_normal;
 -			if (r->id.idiag_dport != sk->sk_dport &&
 +			if (r->id.idiag_dport != inet->inet_dport &&
  			    r->id.idiag_dport)
  				goto next_normal;
 -			if (sk->sk_state == TCP_TIME_WAIT)
 -				res = inet_twsk_diag_dump(sk, skb, cb, r, bc);
 -			else
 -				res = inet_csk_diag_dump(sk, skb, cb, r, bc);
 -			if (res < 0) {
 +			if (inet_csk_diag_dump(sk, skb, cb, r, bc) < 0) {
  				spin_unlock_bh(lock);
  				goto done;
  			}
* Unmerged path net/ipv4/inet_diag.c
