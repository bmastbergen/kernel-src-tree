NFSv4.2: Remove redundant checks in nfs_setsecurity+nfs4_label_init_security

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [fs] nfs: Remove redundant checks in nfs_setsecurity+nfs4_label_init_security (Jeff Layton) [1030725]
Rebuild_FUZZ: 97.30%
commit-author Trond Myklebust <Trond.Myklebust@netapp.com>
commit fab99ebe39fe7d11fbd9b5fb84f07432af9ba36f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/fab99ebe.failed

We already check for nfs_server_capable(inode, NFS_CAP_SECURITY_LABEL)
in nfs4_label_alloc()
We check the minor version in _nfs4_server_capabilities before setting
NFS_CAP_SECURITY_LABEL.

	Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
(cherry picked from commit fab99ebe39fe7d11fbd9b5fb84f07432af9ba36f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/inode.c
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/inode.c
index fcfd14b15442,18ab2da4eeb6..000000000000
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@@ -258,6 -266,26 +258,29 @@@ nfs_init_locked(struct inode *inode, vo
  }
  
  #ifdef CONFIG_NFS_V4_SECURITY_LABEL
++<<<<<<< HEAD
++=======
+ void nfs_setsecurity(struct inode *inode, struct nfs_fattr *fattr,
+ 					struct nfs4_label *label)
+ {
+ 	int error;
+ 
+ 	if (label == NULL)
+ 		return;
+ 
+ 	if ((fattr->valid & NFS_ATTR_FATTR_V4_SECURITY_LABEL) && inode->i_security) {
+ 		error = security_inode_notifysecctx(inode, label->label,
+ 				label->len);
+ 		if (error)
+ 			printk(KERN_ERR "%s() %s %d "
+ 					"security_inode_notifysecctx() %d\n",
+ 					__func__,
+ 					(char *)label->label,
+ 					label->len, error);
+ 	}
+ }
+ 
++>>>>>>> fab99ebe39fe (NFSv4.2: Remove redundant checks in nfs_setsecurity+nfs4_label_init_security)
  struct nfs4_label *nfs4_label_alloc(struct nfs_server *server, gfp_t flags)
  {
  	struct nfs4_label *label = NULL;
diff --cc fs/nfs/nfs4proc.c
index 243e7b5c4025,5ab33c0792df..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -90,6 -91,53 +90,56 @@@ static int nfs41_test_stateid(struct nf
  static int nfs41_free_stateid(struct nfs_server *, nfs4_stateid *,
  		struct rpc_cred *);
  #endif
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_NFS_V4_SECURITY_LABEL
+ static inline struct nfs4_label *
+ nfs4_label_init_security(struct inode *dir, struct dentry *dentry,
+ 	struct iattr *sattr, struct nfs4_label *label)
+ {
+ 	int err;
+ 
+ 	if (label == NULL)
+ 		return NULL;
+ 
+ 	if (nfs_server_capable(dir, NFS_CAP_SECURITY_LABEL) == 0)
+ 		return NULL;
+ 
+ 	err = security_dentry_init_security(dentry, sattr->ia_mode,
+ 				&dentry->d_name, (void **)&label->label, &label->len);
+ 	if (err == 0)
+ 		return label;
+ 
+ 	return NULL;
+ }
+ static inline void
+ nfs4_label_release_security(struct nfs4_label *label)
+ {
+ 	if (label)
+ 		security_release_secctx(label->label, label->len);
+ }
+ static inline u32 *nfs4_bitmask(struct nfs_server *server, struct nfs4_label *label)
+ {
+ 	if (label)
+ 		return server->attr_bitmask;
+ 
+ 	return server->attr_bitmask_nl;
+ }
+ #else
+ static inline struct nfs4_label *
+ nfs4_label_init_security(struct inode *dir, struct dentry *dentry,
+ 	struct iattr *sattr, struct nfs4_label *l)
+ { return NULL; }
+ static inline void
+ nfs4_label_release_security(struct nfs4_label *label)
+ { return; }
+ static inline u32 *
+ nfs4_bitmask(struct nfs_server *server, struct nfs4_label *label)
+ { return server->attr_bitmask; }
+ #endif
+ 
++>>>>>>> fab99ebe39fe (NFSv4.2: Remove redundant checks in nfs_setsecurity+nfs4_label_init_security)
  /* Prevent leaks of NFSv4 errors into userland */
  static int nfs4_map_errors(int err)
  {
* Unmerged path fs/nfs/inode.c
* Unmerged path fs/nfs/nfs4proc.c
