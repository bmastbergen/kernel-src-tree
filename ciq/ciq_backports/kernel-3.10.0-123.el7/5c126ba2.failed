efi: Add EFI signature data types

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [efi] Add EFI signature data types (Lenny Szubowicz) [903815]
Rebuild_FUZZ: 91.80%
commit-author Dave Howells <dhowells@redhat.com>
commit 5c126ba22f894427cc770240faa1bf6b02ce7aca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/5c126ba2.failed

Add the data types that are used for containing hashes, keys and
certificates for cryptographic verification along with their corresponding
type GUIDs.

	Signed-off-by: David Howells <dhowells@redhat.com>
	Acked-by: Nayna Jain <nayna@linux.ibm.com>
	Acked-by: Serge Hallyn <serge@hallyn.com>
	Reviewed-by: James Morris <james.morris@microsoft.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
(cherry picked from commit 5c126ba22f894427cc770240faa1bf6b02ce7aca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/efi.h
diff --cc include/linux/efi.h
index 0068bba6f8b6,3d3de1673b15..000000000000
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@@ -333,61 -587,96 +333,78 @@@ typedef efi_status_t efi_query_capsule_
  					      unsigned long count,
  					      u64 *max_size,
  					      int *reset_type);
 -typedef efi_status_t efi_query_variable_store_t(u32 attributes,
 -						unsigned long size,
 -						bool nonblocking);
 -
 -typedef struct {
 -	efi_table_hdr_t			hdr;
 -	efi_get_time_t			*get_time;
 -	efi_set_time_t			*set_time;
 -	efi_get_wakeup_time_t		*get_wakeup_time;
 -	efi_set_wakeup_time_t		*set_wakeup_time;
 -	efi_set_virtual_address_map_t	*set_virtual_address_map;
 -	void				*convert_pointer;
 -	efi_get_variable_t		*get_variable;
 -	efi_get_next_variable_t		*get_next_variable;
 -	efi_set_variable_t		*set_variable;
 -	efi_get_next_high_mono_count_t	*get_next_high_mono_count;
 -	efi_reset_system_t		*reset_system;
 -	efi_update_capsule_t		*update_capsule;
 -	efi_query_capsule_caps_t	*query_capsule_caps;
 -	efi_query_variable_info_t	*query_variable_info;
 -} efi_runtime_services_t;
 -
 -void efi_native_runtime_setup(void);
 +typedef efi_status_t efi_query_variable_store_t(u32 attributes, unsigned long size);
  
  /*
 - * EFI Configuration Table and GUID definitions
 - *
 - * These are all defined in a single line to make them easier to
 - * grep for and to see them at a glance - while still having a
 - * similar structure to the definitions in the spec.
 - *
 - * Here's how they are structured:
 - *
 - * GUID: 12345678-1234-1234-1234-123456789012
 - * Spec:
 - *      #define EFI_SOME_PROTOCOL_GUID \
 - *        {0x12345678,0x1234,0x1234,\
 - *          {0x12,0x34,0x12,0x34,0x56,0x78,0x90,0x12}}
 - * Here:
 - *	#define SOME_PROTOCOL_GUID		EFI_GUID(0x12345678, 0x1234, 0x1234,  0x12, 0x34, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12)
 - *					^ tabs					    ^extra space
 - *
 - * Note that the 'extra space' separates the values at the same place
 - * where the UEFI SPEC breaks the line.
 + *  EFI Configuration Table and GUID definitions
   */
 -#define NULL_GUID				EFI_GUID(0x00000000, 0x0000, 0x0000,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
 -#define MPS_TABLE_GUID				EFI_GUID(0xeb9d2d2f, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)
 -#define ACPI_TABLE_GUID				EFI_GUID(0xeb9d2d30, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)
 -#define ACPI_20_TABLE_GUID			EFI_GUID(0x8868e871, 0xe4f1, 0x11d3,  0xbc, 0x22, 0x00, 0x80, 0xc7, 0x3c, 0x88, 0x81)
 -#define SMBIOS_TABLE_GUID			EFI_GUID(0xeb9d2d31, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)
 -#define SMBIOS3_TABLE_GUID			EFI_GUID(0xf2fd1544, 0x9794, 0x4a2c,  0x99, 0x2e, 0xe5, 0xbb, 0xcf, 0x20, 0xe3, 0x94)
 -#define SAL_SYSTEM_TABLE_GUID			EFI_GUID(0xeb9d2d32, 0x2d88, 0x11d3,  0x9a, 0x16, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)
 -#define HCDP_TABLE_GUID				EFI_GUID(0xf951938d, 0x620b, 0x42ef,  0x82, 0x79, 0xa8, 0x4b, 0x79, 0x61, 0x78, 0x98)
 -#define UGA_IO_PROTOCOL_GUID			EFI_GUID(0x61a4d49e, 0x6f68, 0x4f1b,  0xb9, 0x22, 0xa8, 0x6e, 0xed, 0x0b, 0x07, 0xa2)
 -#define EFI_GLOBAL_VARIABLE_GUID		EFI_GUID(0x8be4df61, 0x93ca, 0x11d2,  0xaa, 0x0d, 0x00, 0xe0, 0x98, 0x03, 0x2b, 0x8c)
 -#define UV_SYSTEM_TABLE_GUID			EFI_GUID(0x3b13a7d4, 0x633e, 0x11dd,  0x93, 0xec, 0xda, 0x25, 0x56, 0xd8, 0x95, 0x93)
 -#define LINUX_EFI_CRASH_GUID			EFI_GUID(0xcfc8fc79, 0xbe2e, 0x4ddc,  0x97, 0xf0, 0x9f, 0x98, 0xbf, 0xe2, 0x98, 0xa0)
 -#define LOADED_IMAGE_PROTOCOL_GUID		EFI_GUID(0x5b1b31a1, 0x9562, 0x11d2,  0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)
 -#define EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID	EFI_GUID(0x9042a9de, 0x23dc, 0x4a38,  0x96, 0xfb, 0x7a, 0xde, 0xd0, 0x80, 0x51, 0x6a)
 -#define EFI_UGA_PROTOCOL_GUID			EFI_GUID(0x982c298b, 0xf4fa, 0x41cb,  0xb8, 0x38, 0x77, 0xaa, 0x68, 0x8f, 0xb8, 0x39)
 -#define EFI_PCI_IO_PROTOCOL_GUID		EFI_GUID(0x4cf5b200, 0x68b8, 0x4ca5,  0x9e, 0xec, 0xb2, 0x3e, 0x3f, 0x50, 0x02, 0x9a)
 -#define EFI_FILE_INFO_ID			EFI_GUID(0x09576e92, 0x6d3f, 0x11d2,  0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)
 -#define EFI_SYSTEM_RESOURCE_TABLE_GUID		EFI_GUID(0xb122a263, 0x3661, 0x4f68,  0x99, 0x29, 0x78, 0xf8, 0xb0, 0xd6, 0x21, 0x80)
 -#define EFI_FILE_SYSTEM_GUID			EFI_GUID(0x964e5b22, 0x6459, 0x11d2,  0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b)
 -#define DEVICE_TREE_GUID			EFI_GUID(0xb1b621d5, 0xf19c, 0x41a5,  0x83, 0x0b, 0xd9, 0x15, 0x2c, 0x69, 0xaa, 0xe0)
 -#define EFI_PROPERTIES_TABLE_GUID		EFI_GUID(0x880aaca3, 0x4adc, 0x4a04,  0x90, 0x79, 0xb7, 0x47, 0x34, 0x08, 0x25, 0xe5)
 -#define EFI_RNG_PROTOCOL_GUID			EFI_GUID(0x3152bca5, 0xeade, 0x433d,  0x86, 0x2e, 0xc0, 0x1c, 0xdc, 0x29, 0x1f, 0x44)
 -#define EFI_RNG_ALGORITHM_RAW			EFI_GUID(0xe43176d7, 0xb6e8, 0x4827,  0xb7, 0x84, 0x7f, 0xfd, 0xc4, 0xb6, 0x85, 0x61)
 -#define EFI_MEMORY_ATTRIBUTES_TABLE_GUID	EFI_GUID(0xdcfa911d, 0x26eb, 0x469f,  0xa2, 0x20, 0x38, 0xb7, 0xdc, 0x46, 0x12, 0x20)
 -#define EFI_CONSOLE_OUT_DEVICE_GUID		EFI_GUID(0xd3b36f2c, 0xd551, 0x11d4,  0x9a, 0x46, 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d)
 -#define APPLE_PROPERTIES_PROTOCOL_GUID		EFI_GUID(0x91bd12fe, 0xf6c3, 0x44fb,  0xa5, 0xb7, 0x51, 0x22, 0xab, 0x30, 0x3a, 0xe0)
 -#define EFI_TCG2_PROTOCOL_GUID			EFI_GUID(0x607f766c, 0x7455, 0x42be,  0x93, 0x0b, 0xe4, 0xd7, 0x6d, 0xb2, 0x72, 0x0f)
 -
 -#define EFI_IMAGE_SECURITY_DATABASE_GUID	EFI_GUID(0xd719b2cb, 0x3d3a, 0x4596,  0xa3, 0xbc, 0xda, 0xd0, 0x0e, 0x67, 0x65, 0x6f)
 -#define EFI_SHIM_LOCK_GUID			EFI_GUID(0x605dab50, 0xe046, 0x4300,  0xab, 0xb6, 0x3d, 0xd8, 0x10, 0xdd, 0x8b, 0x23)
 +#define NULL_GUID \
 +    EFI_GUID(  0x00000000, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 )
 +
 +#define MPS_TABLE_GUID    \
 +    EFI_GUID(  0xeb9d2d2f, 0x2d88, 0x11d3, 0x9a, 0x16, 0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d )
 +
++<<<<<<< HEAD
 +#define ACPI_TABLE_GUID    \
 +    EFI_GUID(  0xeb9d2d30, 0x2d88, 0x11d3, 0x9a, 0x16, 0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d )
 +
 +#define ACPI_20_TABLE_GUID    \
 +    EFI_GUID(  0x8868e871, 0xe4f1, 0x11d3, 0xbc, 0x22, 0x0, 0x80, 0xc7, 0x3c, 0x88, 0x81 )
 +
 +#define SMBIOS_TABLE_GUID    \
 +    EFI_GUID(  0xeb9d2d31, 0x2d88, 0x11d3, 0x9a, 0x16, 0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d )
 +
 +#define SAL_SYSTEM_TABLE_GUID    \
 +    EFI_GUID(  0xeb9d2d32, 0x2d88, 0x11d3, 0x9a, 0x16, 0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d )
 +
 +#define HCDP_TABLE_GUID	\
 +    EFI_GUID(  0xf951938d, 0x620b, 0x42ef, 0x82, 0x79, 0xa8, 0x4b, 0x79, 0x61, 0x78, 0x98 )
 +
 +#define UGA_IO_PROTOCOL_GUID \
 +    EFI_GUID(  0x61a4d49e, 0x6f68, 0x4f1b, 0xb9, 0x22, 0xa8, 0x6e, 0xed, 0xb, 0x7, 0xa2 )
 +
 +#define EFI_GLOBAL_VARIABLE_GUID \
 +    EFI_GUID(  0x8be4df61, 0x93ca, 0x11d2, 0xaa, 0x0d, 0x00, 0xe0, 0x98, 0x03, 0x2b, 0x8c )
 +
 +#define UV_SYSTEM_TABLE_GUID \
 +    EFI_GUID(  0x3b13a7d4, 0x633e, 0x11dd, 0x93, 0xec, 0xda, 0x25, 0x56, 0xd8, 0x95, 0x93 )
 +
 +#define LINUX_EFI_CRASH_GUID \
 +    EFI_GUID(  0xcfc8fc79, 0xbe2e, 0x4ddc, 0x97, 0xf0, 0x9f, 0x98, 0xbf, 0xe2, 0x98, 0xa0 )
 +
 +#define LOADED_IMAGE_PROTOCOL_GUID \
 +    EFI_GUID(  0x5b1b31a1, 0x9562, 0x11d2, 0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b )
 +
 +#define EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID \
 +    EFI_GUID(  0x9042a9de, 0x23dc, 0x4a38, 0x96, 0xfb, 0x7a, 0xde, 0xd0, 0x80, 0x51, 0x6a )
 +
 +#define EFI_UGA_PROTOCOL_GUID \
 +    EFI_GUID(  0x982c298b, 0xf4fa, 0x41cb, 0xb8, 0x38, 0x77, 0xaa, 0x68, 0x8f, 0xb8, 0x39 )
 +
 +#define EFI_PCI_IO_PROTOCOL_GUID \
 +    EFI_GUID(  0x4cf5b200, 0x68b8, 0x4ca5, 0x9e, 0xec, 0xb2, 0x3e, 0x3f, 0x50, 0x2, 0x9a )
  
 +#define EFI_FILE_INFO_ID \
 +    EFI_GUID(  0x9576e92, 0x6d3f, 0x11d2, 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b )
 +
 +#define EFI_FILE_SYSTEM_GUID \
 +    EFI_GUID(  0x964e5b22, 0x6459, 0x11d2, 0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b )
++=======
+ #define EFI_CERT_SHA256_GUID			EFI_GUID(0xc1c41626, 0x504c, 0x4092, 0xac, 0xa9, 0x41, 0xf9, 0x36, 0x93, 0x43, 0x28)
+ #define EFI_CERT_X509_GUID			EFI_GUID(0xa5c059a1, 0x94e4, 0x4aa7, 0x87, 0xb5, 0xab, 0x15, 0x5c, 0x2b, 0xf0, 0x72)
+ #define EFI_CERT_X509_SHA256_GUID		EFI_GUID(0x3bd2a492, 0x96c0, 0x4079, 0xb4, 0x20, 0xfc, 0xf9, 0x8e, 0xf1, 0x03, 0xed)
+ 
+ /*
+  * This GUID is used to pass to the kernel proper the struct screen_info
+  * structure that was populated by the stub based on the GOP protocol instance
+  * associated with ConOut
+  */
+ #define LINUX_EFI_ARM_SCREEN_INFO_TABLE_GUID	EFI_GUID(0xe03fc20a, 0x85dc, 0x406e,  0xb9, 0x0e, 0x4a, 0xb5, 0x02, 0x37, 0x1d, 0x95)
+ #define LINUX_EFI_LOADER_ENTRY_GUID		EFI_GUID(0x4a67b082, 0x0a4c, 0x41cf,  0xb6, 0xc7, 0x44, 0x0b, 0x29, 0xbb, 0x8c, 0x4f)
+ #define LINUX_EFI_RANDOM_SEED_TABLE_GUID	EFI_GUID(0x1ce1e5bc, 0x7ceb, 0x42f2,  0x81, 0xe5, 0x8a, 0xad, 0xf1, 0x80, 0xf5, 0x7b)
+ #define LINUX_EFI_TPM_EVENT_LOG_GUID		EFI_GUID(0xb7799cb0, 0xeca2, 0x4943,  0x96, 0x67, 0x1f, 0xae, 0x07, 0xb7, 0x47, 0xfa)
+ #define LINUX_EFI_MEMRESERVE_TABLE_GUID		EFI_GUID(0x888eb0c6, 0x8ede, 0x4ff5,  0xa8, 0xf0, 0x9a, 0xee, 0x5c, 0xb9, 0x77, 0xc2)
++>>>>>>> 5c126ba22f89 (efi: Add EFI signature data types)
  
  typedef struct {
  	efi_guid_t guid;
@@@ -522,8 -919,46 +539,40 @@@ typedef struct 
  #define EFI_FILE_MODE_WRITE	0x0000000000000002
  #define EFI_FILE_MODE_CREATE	0x8000000000000000
  
 -typedef struct {
 -	u32 version;
 -	u32 length;
 -	u64 memory_protection_attribute;
 -} efi_properties_table_t;
 -
 -#define EFI_PROPERTIES_TABLE_VERSION	0x00010000
 -#define EFI_PROPERTIES_RUNTIME_MEMORY_PROTECTION_NON_EXECUTABLE_PE_DATA	0x1
 -
  #define EFI_INVALID_TABLE_ADDR		(~0UL)
  
++<<<<<<< HEAD
++=======
+ typedef struct {
+ 	u32 version;
+ 	u32 num_entries;
+ 	u32 desc_size;
+ 	u32 reserved;
+ 	efi_memory_desc_t entry[0];
+ } efi_memory_attributes_table_t;
+ 
+ typedef struct {
+ 	efi_guid_t signature_owner;
+ 	u8 signature_data[];
+ } efi_signature_data_t;
+ 
+ typedef struct {
+ 	efi_guid_t signature_type;
+ 	u32 signature_list_size;
+ 	u32 signature_header_size;
+ 	u32 signature_size;
+ 	u8 signature_header[];
+ 	/* efi_signature_data_t signatures[][] */
+ } efi_signature_list_t;
+ 
+ typedef u8 efi_sha256_hash_t[32];
+ 
+ typedef struct {
+ 	efi_sha256_hash_t to_be_signed_hash;
+ 	efi_time_t time_of_revocation;
+ } efi_cert_x509_sha256_t;
+ 
++>>>>>>> 5c126ba22f89 (efi: Add EFI signature data types)
  /*
   * All runtime access to EFI goes through this structure:
   */
* Unmerged path include/linux/efi.h
