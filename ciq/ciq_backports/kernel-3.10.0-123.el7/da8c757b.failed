mm: prevent setting of a value less than 0 to min_free_kbytes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [mm] prevent setting of a value less than 0 to min_free_kbytes (Steve Best) [1050899]
Rebuild_FUZZ: 96.61%
commit-author Han Pingtian <hanpt@linux.vnet.ibm.com>
commit da8c757b080ee84f219fa2368cb5dd23ac304fc0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/da8c757b.failed

If echo -1 > /proc/vm/sys/min_free_kbytes, the system will hang.  Changing
proc_dointvec() to proc_dointvec_minmax() in the
min_free_kbytes_sysctl_handler() can prevent this to happen.

mhocko said:

: You can still do echo $BIG_VALUE > /proc/vm/sys/min_free_kbytes and make
: your machine unusable but I agree that proc_dointvec_minmax is more
: suitable here as we already have:
:
: 	.proc_handler   = min_free_kbytes_sysctl_handler,
: 	.extra1         = &zero,
:
: It used to work properly but then 6fce56ec91b5 ("sysctl: Remove references
: to ctl_name and strategy from the generic sysctl table") has removed
: sysctl_intvec strategy and so extra1 is ignored.

	Signed-off-by: Han Pingtian <hanpt@linux.vnet.ibm.com>
	Acked-by: Michal Hocko <mhocko@suse.cz>
	Acked-by: David Rientjes <rientjes@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit da8c757b080ee84f219fa2368cb5dd23ac304fc0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index 7dea0d26e6c5,a818d568ddf3..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -5488,12 -5751,19 +5488,23 @@@ module_init(init_per_zone_wmark_min
   *	that we can call two helper functions whenever min_free_kbytes
   *	changes.
   */
 -int min_free_kbytes_sysctl_handler(ctl_table *table, int write,
 +int min_free_kbytes_sysctl_handler(ctl_table *table, int write, 
  	void __user *buffer, size_t *length, loff_t *ppos)
  {
++<<<<<<< HEAD
 +	proc_dointvec(table, write, buffer, length, ppos);
 +	if (write)
++=======
+ 	int rc;
+ 
+ 	rc = proc_dointvec_minmax(table, write, buffer, length, ppos);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (write) {
+ 		user_min_free_kbytes = min_free_kbytes;
++>>>>>>> da8c757b080e (mm: prevent setting of a value less than 0 to min_free_kbytes)
  		setup_per_zone_wmarks();
 -	}
  	return 0;
  }
  
* Unmerged path mm/page_alloc.c
