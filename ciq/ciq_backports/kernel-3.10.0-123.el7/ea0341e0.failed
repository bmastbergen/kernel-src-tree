GFS2: Fix ref count bug relating to atomic_open

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Steven Whitehouse <swhiteho@redhat.com>
commit ea0341e071527d5cec350917b01ab901af09d758
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/ea0341e0.failed

In the case that atomic_open calls finish_no_open() with
the dentry that was supplied to gfs2_atomic_open() an
extra reference count is required. This patch fixes that
issue preventing a bug trap triggering at umount time.

	Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
(cherry picked from commit ea0341e071527d5cec350917b01ab901af09d758)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/inode.c
diff --cc fs/gfs2/inode.c
index 41a03da4f2dd,7119504159f1..000000000000
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@@ -1110,7 -1143,48 +1110,52 @@@ static int gfs2_mkdir(struct inode *dir
  static int gfs2_mknod(struct inode *dir, struct dentry *dentry, umode_t mode,
  		      dev_t dev)
  {
++<<<<<<< HEAD
 +	return gfs2_create_inode(dir, dentry, mode, dev, NULL, 0, 0);
++=======
+ 	return gfs2_create_inode(dir, dentry, NULL, mode, dev, NULL, 0, 0, NULL);
+ }
+ 
+ /**
+  * gfs2_atomic_open - Atomically open a file
+  * @dir: The directory
+  * @dentry: The proposed new entry
+  * @file: The proposed new struct file
+  * @flags: open flags
+  * @mode: File mode
+  * @opened: Flag to say whether the file has been opened or not
+  *
+  * Returns: error code or 0 for success
+  */
+ 
+ static int gfs2_atomic_open(struct inode *dir, struct dentry *dentry,
+                             struct file *file, unsigned flags,
+                             umode_t mode, int *opened)
+ {
+ 	struct dentry *d;
+ 	bool excl = !!(flags & O_EXCL);
+ 
+ 	d = __gfs2_lookup(dir, dentry, file, opened);
+ 	if (IS_ERR(d))
+ 		return PTR_ERR(d);
+ 	if (d != NULL)
+ 		dentry = d;
+ 	if (dentry->d_inode) {
+ 		if (!(*opened & FILE_OPENED)) {
+ 			if (d == NULL)
+ 				dget(dentry);
+ 			return finish_no_open(file, dentry);
+ 		}
+ 		dput(d);
+ 		return 0;
+ 	}
+ 
+ 	BUG_ON(d != NULL);
+ 	if (!(flags & O_CREAT))
+ 		return -ENOENT;
+ 
+ 	return gfs2_create_inode(dir, dentry, file, S_IFREG | mode, 0, NULL, 0, excl, opened);
++>>>>>>> ea0341e07152 (GFS2: Fix ref count bug relating to atomic_open)
  }
  
  /*
* Unmerged path fs/gfs2/inode.c
