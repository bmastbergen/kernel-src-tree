GFS2: Add hints to directory leaf blocks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Steven Whitehouse <swhiteho@redhat.com>
commit 01bcb0dedbcd77a5ebb4f2dfd7d3196e3ad5cea5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/01bcb0de.failed

This patch adds four new fields to directory leaf blocks.
The intent is not to use them in the kernel itself, although
perhaps we may be able to use them as hints at some later date,
but instead to provide more information for debug/fsck use.

One new field adds a pointer to the inode to which the leaf
belongs. This can be useful if the pointer to the leaf block
has become corrupt, as it will allow us to know which inode
this block should be associated with. This field is set when
the leaf is created and never changed over its lifetime.

The second field is a "distance from the hash table" field.
The meaning is as follows:
 0  = An old leaf in which this value has not been set
 1  = This leaf is pointed to directly from the hash table
 2+ = This leaf is part of a chain, pointed to by another leaf
      block, the value gives the position in the chain.

The third and fourth fields combine to give a time stamp of
the most recent directory insertion or deletion from this
leaf block. The time stamp is not updated when a new leaf
block is chained from the current one. The code is currently
written such that the timestamp on the dir inode will match
that of the leaf block for the most recent insertion/deletion.

For backwards compatibility, any of these new fields which is
zero should be considered to be "unknown".

	Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
(cherry picked from commit 01bcb0dedbcd77a5ebb4f2dfd7d3196e3ad5cea5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/dir.c
diff --cc fs/gfs2/dir.c
index b631c9043460,fa32655449c8..000000000000
--- a/fs/gfs2/dir.c
+++ b/fs/gfs2/dir.c
@@@ -1672,11 -1701,12 +1699,17 @@@ static int dir_new_leaf(struct inode *i
   */
  
  int gfs2_dir_add(struct inode *inode, const struct qstr *name,
 -		 const struct gfs2_inode *nip, struct gfs2_diradd *da)
 +		 const struct gfs2_inode *nip)
  {
  	struct gfs2_inode *ip = GFS2_I(inode);
++<<<<<<< HEAD
 +	struct buffer_head *bh;
 +	struct gfs2_dirent *dent;
++=======
+ 	struct buffer_head *bh = da->bh;
+ 	struct gfs2_dirent *dent = da->dent;
+ 	struct timespec tv;
++>>>>>>> 01bcb0dedbcd (GFS2: Add hints to directory leaf blocks)
  	struct gfs2_leaf *leaf;
  	int error;
  
@@@ -1692,10 -1725,14 +1726,12 @@@
  			if (ip->i_diskflags & GFS2_DIF_EXHASH) {
  				leaf = (struct gfs2_leaf *)bh->b_data;
  				be16_add_cpu(&leaf->lf_entries, 1);
+ 				leaf->lf_nsec = cpu_to_be32(tv.tv_nsec);
+ 				leaf->lf_sec = cpu_to_be64(tv.tv_sec);
  			}
 -			da->dent = NULL;
 -			da->bh = NULL;
  			brelse(bh);
  			ip->i_entries++;
- 			ip->i_inode.i_mtime = ip->i_inode.i_ctime = CURRENT_TIME;
+ 			ip->i_inode.i_mtime = ip->i_inode.i_ctime = tv;
  			if (S_ISDIR(nip->i_inode.i_mode))
  				inc_nlink(&ip->i_inode);
  			mark_inode_dirty(inode);
* Unmerged path fs/gfs2/dir.c
diff --git a/include/uapi/linux/gfs2_ondisk.h b/include/uapi/linux/gfs2_ondisk.h
index b2de1f9a88d6..0f24c07aed51 100644
--- a/include/uapi/linux/gfs2_ondisk.h
+++ b/include/uapi/linux/gfs2_ondisk.h
@@ -319,7 +319,16 @@ struct gfs2_leaf {
 	__be32 lf_dirent_format;	/* Format of the dirents */
 	__be64 lf_next;			/* Next leaf, if overflow */
 
-	__u8 lf_reserved[64];
+	union {
+		__u8 lf_reserved[64];
+		struct {
+			__be64 lf_inode;	/* Dir inode number */
+			__be32 lf_dist;		/* Dist from inode on chain */
+			__be32 lf_nsec;		/* Last ins/del usecs */
+			__be64 lf_sec;		/* Last ins/del in secs */
+			__u8 lf_reserved2[40];
+		};
+	};
 };
 
 /*
