cxgb4: Adds support for T6 adapter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [scsi] cxgb4i: add support for T5 adapter (Jay Fenlason) [1060264]
Rebuild_FUZZ: 94.12%
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit 3ccc6cf74d8c0059ae076aee3bf83c9124815404
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/3ccc6cf7.failed

Adds NIC driver related changes for T6 adapter. Register related
changes, MC related changes, VF related changes, doorbell related
changes, debugfs changes, etc

	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3ccc6cf74d8c0059ae076aee3bf83c9124815404)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
#	drivers/net/ethernet/chelsio/cxgb4/sge.c
#	drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
#	drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
#	drivers/net/ethernet/chelsio/cxgb4/t4_regs.h
#	drivers/net/ethernet/chelsio/cxgb4/t4_values.h
#	drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
#	drivers/net/ethernet/chelsio/cxgb4/t4fw_version.h
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
index 18262811604f,4d3a8c20eb12..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
@@@ -219,9 -217,15 +219,8 @@@ struct tp_err_stats 
  	u32 ofldCongDefer;
  };
  
 -struct sge_params {
 -	u32 hps;			/* host page size for our PF/VF */
 -	u32 eq_qpp;			/* egress queues/page for our PF/VF */
 -	u32 iq_qpp;			/* egress queues/page for our PF/VF */
 -};
 -
  struct tp_params {
- 	unsigned int ntxchan;        /* # of Tx channels */
  	unsigned int tre;            /* log2 of core clocks per TP tick */
 -	unsigned int la_mask;        /* what events are recorded by TP LA */
  	unsigned short tx_modq_map;  /* TX modulation scheduler queue to */
  				     /* channel map */
  
@@@ -241,7 -265,48 +240,50 @@@ struct pci_params 
  	unsigned char width;
  };
  
++<<<<<<< HEAD
++=======
+ #define CHELSIO_CHIP_CODE(version, revision) (((version) << 4) | (revision))
+ #define CHELSIO_CHIP_FPGA          0x100
+ #define CHELSIO_CHIP_VERSION(code) (((code) >> 4) & 0xf)
+ #define CHELSIO_CHIP_RELEASE(code) ((code) & 0xf)
+ 
+ #define CHELSIO_T4		0x4
+ #define CHELSIO_T5		0x5
+ #define CHELSIO_T6		0x6
+ 
+ enum chip_type {
+ 	T4_A1 = CHELSIO_CHIP_CODE(CHELSIO_T4, 1),
+ 	T4_A2 = CHELSIO_CHIP_CODE(CHELSIO_T4, 2),
+ 	T4_FIRST_REV	= T4_A1,
+ 	T4_LAST_REV	= T4_A2,
+ 
+ 	T5_A0 = CHELSIO_CHIP_CODE(CHELSIO_T5, 0),
+ 	T5_A1 = CHELSIO_CHIP_CODE(CHELSIO_T5, 1),
+ 	T5_FIRST_REV	= T5_A0,
+ 	T5_LAST_REV	= T5_A1,
+ 
+ 	T6_A0 = CHELSIO_CHIP_CODE(CHELSIO_T6, 0),
+ 	T6_FIRST_REV    = T6_A0,
+ 	T6_LAST_REV     = T6_A0,
+ };
+ 
+ struct devlog_params {
+ 	u32 memtype;                    /* which memory (EDC0, EDC1, MC) */
+ 	u32 start;                      /* start of log in firmware memory */
+ 	u32 size;                       /* size of log */
+ };
+ 
+ /* Stores chip specific parameters */
+ struct arch_specific_params {
+ 	u8 nchan;
+ 	u16 mps_rplc_size;
+ 	u16 vfcount;
+ 	u32 sge_fl_db;
+ 	u16 mps_tcam_size;
+ };
+ 
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  struct adapter_params {
 -	struct sge_params sge;
  	struct tp_params  tp;
  	struct vpd_params vpd;
  	struct pci_params pci;
@@@ -260,7 -329,8 +302,12 @@@
  
  	unsigned char nports;             /* # of ethernet ports */
  	unsigned char portvec;
++<<<<<<< HEAD
 +	unsigned char rev;                /* chip revision */
++=======
+ 	enum chip_type chip;               /* chip code */
+ 	struct arch_specific_params arch;  /* chip specific params */
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  	unsigned char offload;
  
  	unsigned char bypass;
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index e39a401bdea0,a589591e5b63..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@@ -203,77 -113,36 +203,88 @@@ struct filter_entry 
  			 NETIF_MSG_TIMER | NETIF_MSG_IFDOWN | NETIF_MSG_IFUP |\
  			 NETIF_MSG_RX_ERR | NETIF_MSG_TX_ERR)
  
 -/* Macros needed to support the PCI Device ID Table ...
 - */
 -#define CH_PCI_DEVICE_ID_TABLE_DEFINE_BEGIN \
 -	static const struct pci_device_id cxgb4_pci_tbl[] = {
 -#define CH_PCI_DEVICE_ID_FUNCTION 0x4
 -
 -/* Include PCI Device IDs for both PF4 and PF0-3 so our PCI probe() routine is
 - * called for both.
 - */
 -#define CH_PCI_DEVICE_ID_FUNCTION2 0x0
 -
 -#define CH_PCI_ID_TABLE_ENTRY(devid) \
 -		{PCI_VDEVICE(CHELSIO, (devid)), 4}
 -
 -#define CH_PCI_DEVICE_ID_TABLE_DEFINE_END \
 -		{ 0, } \
 -	}
 -
 -#include "t4_pci_id_tbl.h"
 +#define CH_DEVICE(devid, data) { PCI_VDEVICE(CHELSIO, devid), (data) }
 +
 +static DEFINE_PCI_DEVICE_TABLE(cxgb4_pci_tbl) = {
 +	CH_DEVICE(0xa000, 0),  /* PE10K */
 +	CH_DEVICE(0x4001, -1),
 +	CH_DEVICE(0x4002, -1),
 +	CH_DEVICE(0x4003, -1),
 +	CH_DEVICE(0x4004, -1),
 +	CH_DEVICE(0x4005, -1),
 +	CH_DEVICE(0x4006, -1),
 +	CH_DEVICE(0x4007, -1),
 +	CH_DEVICE(0x4008, -1),
 +	CH_DEVICE(0x4009, -1),
 +	CH_DEVICE(0x400a, -1),
 +	CH_DEVICE(0x4401, 4),
 +	CH_DEVICE(0x4402, 4),
 +	CH_DEVICE(0x4403, 4),
 +	CH_DEVICE(0x4404, 4),
 +	CH_DEVICE(0x4405, 4),
 +	CH_DEVICE(0x4406, 4),
 +	CH_DEVICE(0x4407, 4),
 +	CH_DEVICE(0x4408, 4),
 +	CH_DEVICE(0x4409, 4),
 +	CH_DEVICE(0x440a, 4),
 +	CH_DEVICE(0x440d, 4),
 +	CH_DEVICE(0x440e, 4),
 +	CH_DEVICE(0x5001, 4),
 +	CH_DEVICE(0x5002, 4),
 +	CH_DEVICE(0x5003, 4),
 +	CH_DEVICE(0x5004, 4),
 +	CH_DEVICE(0x5005, 4),
 +	CH_DEVICE(0x5006, 4),
 +	CH_DEVICE(0x5007, 4),
 +	CH_DEVICE(0x5008, 4),
 +	CH_DEVICE(0x5009, 4),
 +	CH_DEVICE(0x500A, 4),
 +	CH_DEVICE(0x500B, 4),
 +	CH_DEVICE(0x500C, 4),
 +	CH_DEVICE(0x500D, 4),
 +	CH_DEVICE(0x500E, 4),
 +	CH_DEVICE(0x500F, 4),
 +	CH_DEVICE(0x5010, 4),
 +	CH_DEVICE(0x5011, 4),
 +	CH_DEVICE(0x5012, 4),
 +	CH_DEVICE(0x5013, 4),
 +	CH_DEVICE(0x5401, 4),
 +	CH_DEVICE(0x5402, 4),
 +	CH_DEVICE(0x5403, 4),
 +	CH_DEVICE(0x5404, 4),
 +	CH_DEVICE(0x5405, 4),
 +	CH_DEVICE(0x5406, 4),
 +	CH_DEVICE(0x5407, 4),
 +	CH_DEVICE(0x5408, 4),
 +	CH_DEVICE(0x5409, 4),
 +	CH_DEVICE(0x540A, 4),
 +	CH_DEVICE(0x540B, 4),
 +	CH_DEVICE(0x540C, 4),
 +	CH_DEVICE(0x540D, 4),
 +	CH_DEVICE(0x540E, 4),
 +	CH_DEVICE(0x540F, 4),
 +	CH_DEVICE(0x5410, 4),
 +	CH_DEVICE(0x5411, 4),
 +	CH_DEVICE(0x5412, 4),
 +	CH_DEVICE(0x5413, 4),
 +	{ 0, }
 +};
  
 -#define FW4_FNAME "cxgb4/t4fw.bin"
 +#define FW_FNAME "cxgb4/t4fw.bin"
  #define FW5_FNAME "cxgb4/t5fw.bin"
++<<<<<<< HEAD
 +#define FW_CFNAME "cxgb4/t4-config.txt"
 +#define FW5_CFNAME "cxgb4/t5-config.txt"
++=======
+ #define FW6_FNAME "cxgb4/t6fw.bin"
+ #define FW4_CFNAME "cxgb4/t4-config.txt"
+ #define FW5_CFNAME "cxgb4/t5-config.txt"
+ #define FW6_CFNAME "cxgb4/t6-config.txt"
+ #define PHY_AQ1202_FIRMWARE "cxgb4/aq1202_fw.cld"
+ #define PHY_BCM84834_FIRMWARE "cxgb4/bcm8483.bin"
+ #define PHY_AQ1202_DEVICEID 0x4409
+ #define PHY_BCM84834_DEVICEID 0x4486
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  MODULE_DESCRIPTION(DRV_DESC);
  MODULE_AUTHOR("Chelsio Communications");
@@@ -3224,6 -1721,11 +3235,14 @@@ static int tid_init(struct tid_info *t
  		t->afree = t->atid_tab;
  	}
  	bitmap_zero(t->stid_bmap, t->nstids + t->nsftids);
++<<<<<<< HEAD
++=======
+ 	/* Reserve stid 0 for T4/T5 adapters */
+ 	if (!t->stid_base &&
+ 	    (CHELSIO_CHIP_VERSION(adap->params.chip) <= CHELSIO_T5))
+ 		__set_bit(0, t->stid_bmap);
+ 
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  	return 0;
  }
  
@@@ -3419,24 -2071,102 +3438,96 @@@ out
  }
  EXPORT_SYMBOL(cxgb4_sync_txq_pidx);
  
 -int cxgb4_read_tpte(struct net_device *dev, u32 stag, __be32 *tpte)
 +void cxgb4_disable_db_coalescing(struct net_device *dev)
  {
  	struct adapter *adap;
++<<<<<<< HEAD
++=======
+ 	u32 offset, memtype, memaddr;
+ 	u32 edc0_size, edc1_size, mc0_size, mc1_size, size;
+ 	u32 edc0_end, edc1_end, mc0_end, mc1_end;
+ 	int ret;
+ 
+ 	adap = netdev2adap(dev);
+ 
+ 	offset = ((stag >> 8) * 32) + adap->vres.stag.start;
+ 
+ 	/* Figure out where the offset lands in the Memory Type/Address scheme.
+ 	 * This code assumes that the memory is laid out starting at offset 0
+ 	 * with no breaks as: EDC0, EDC1, MC0, MC1. All cards have both EDC0
+ 	 * and EDC1.  Some cards will have neither MC0 nor MC1, most cards have
+ 	 * MC0, and some have both MC0 and MC1.
+ 	 */
+ 	size = t4_read_reg(adap, MA_EDRAM0_BAR_A);
+ 	edc0_size = EDRAM0_SIZE_G(size) << 20;
+ 	size = t4_read_reg(adap, MA_EDRAM1_BAR_A);
+ 	edc1_size = EDRAM1_SIZE_G(size) << 20;
+ 	size = t4_read_reg(adap, MA_EXT_MEMORY0_BAR_A);
+ 	mc0_size = EXT_MEM0_SIZE_G(size) << 20;
+ 
+ 	edc0_end = edc0_size;
+ 	edc1_end = edc0_end + edc1_size;
+ 	mc0_end = edc1_end + mc0_size;
+ 
+ 	if (offset < edc0_end) {
+ 		memtype = MEM_EDC0;
+ 		memaddr = offset;
+ 	} else if (offset < edc1_end) {
+ 		memtype = MEM_EDC1;
+ 		memaddr = offset - edc0_end;
+ 	} else {
+ 		if (offset < mc0_end) {
+ 			memtype = MEM_MC0;
+ 			memaddr = offset - edc1_end;
+ 		} else if (is_t5(adap->params.chip)) {
+ 			size = t4_read_reg(adap, MA_EXT_MEMORY1_BAR_A);
+ 			mc1_size = EXT_MEM1_SIZE_G(size) << 20;
+ 			mc1_end = mc0_end + mc1_size;
+ 			if (offset < mc1_end) {
+ 				memtype = MEM_MC1;
+ 				memaddr = offset - mc0_end;
+ 			} else {
+ 				/* offset beyond the end of any memory */
+ 				goto err;
+ 			}
+ 		} else {
+ 			/* T4/T6 only has a single memory channel */
+ 			goto err;
+ 		}
+ 	}
+ 
+ 	spin_lock(&adap->win0_lock);
+ 	ret = t4_memory_rw(adap, 0, memtype, memaddr, 32, tpte, T4_MEMORY_READ);
+ 	spin_unlock(&adap->win0_lock);
+ 	return ret;
+ 
+ err:
+ 	dev_err(adap->pdev_dev, "stag %#x, offset %#x out of range\n",
+ 		stag, offset);
+ 	return -EINVAL;
+ }
+ EXPORT_SYMBOL(cxgb4_read_tpte);
+ 
+ u64 cxgb4_read_sge_timestamp(struct net_device *dev)
+ {
+ 	u32 hi, lo;
+ 	struct adapter *adap;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  	adap = netdev2adap(dev);
 -	lo = t4_read_reg(adap, SGE_TIMESTAMP_LO_A);
 -	hi = TSVAL_G(t4_read_reg(adap, SGE_TIMESTAMP_HI_A));
 -
 -	return ((u64)hi << 32) | (u64)lo;
 +	t4_set_reg_field(adap, A_SGE_DOORBELL_CONTROL, F_NOCOALESCE,
 +			 F_NOCOALESCE);
  }
 -EXPORT_SYMBOL(cxgb4_read_sge_timestamp);
 +EXPORT_SYMBOL(cxgb4_disable_db_coalescing);
  
 -int cxgb4_bar2_sge_qregs(struct net_device *dev,
 -			 unsigned int qid,
 -			 enum cxgb4_bar2_qtype qtype,
 -			 u64 *pbar2_qoffset,
 -			 unsigned int *pbar2_qid)
 +void cxgb4_enable_db_coalescing(struct net_device *dev)
  {
 -	return t4_bar2_sge_qregs(netdev2adap(dev),
 -				 qid,
 -				 (qtype == CXGB4_BAR2_QTYPE_EGRESS
 -				  ? T4_BAR2_QTYPE_EGRESS
 -				  : T4_BAR2_QTYPE_INGRESS),
 -				 pbar2_qoffset,
 -				 pbar2_qid);
 +	struct adapter *adap;
 +
 +	adap = netdev2adap(dev);
 +	t4_set_reg_field(adap, A_SGE_DOORBELL_CONTROL, F_NOCOALESCE, 0);
  }
 -EXPORT_SYMBOL(cxgb4_bar2_sge_qregs);
 +EXPORT_SYMBOL(cxgb4_enable_db_coalescing);
  
  static struct pci_driver cxgb4_driver;
  
@@@ -3524,11 -2265,36 +3615,40 @@@ static void enable_dbs(struct adapter *
  	int i;
  
  	for_each_ethrxq(&adap->sge, i)
 -		enable_txq_db(adap, &adap->sge.ethtxq[i].q);
 +		enable_txq_db(&adap->sge.ethtxq[i].q);
  	for_each_ofldrxq(&adap->sge, i)
 -		enable_txq_db(adap, &adap->sge.ofldtxq[i].q);
 +		enable_txq_db(&adap->sge.ofldtxq[i].q);
  	for_each_port(adap, i)
++<<<<<<< HEAD
 +		enable_txq_db(&adap->sge.ctrlq[i].q);
++=======
+ 		enable_txq_db(adap, &adap->sge.ctrlq[i].q);
+ }
+ 
+ static void notify_rdma_uld(struct adapter *adap, enum cxgb4_control cmd)
+ {
+ 	if (adap->uld_handle[CXGB4_ULD_RDMA])
+ 		ulds[CXGB4_ULD_RDMA].control(adap->uld_handle[CXGB4_ULD_RDMA],
+ 				cmd);
+ }
+ 
+ static void process_db_full(struct work_struct *work)
+ {
+ 	struct adapter *adap;
+ 
+ 	adap = container_of(work, struct adapter, db_full_task);
+ 
+ 	drain_db_fifo(adap, dbfifo_drain_delay);
+ 	enable_dbs(adap);
+ 	notify_rdma_uld(adap, CXGB4_CONTROL_DB_EMPTY);
+ 	if (CHELSIO_CHIP_VERSION(adap->params.chip) <= CHELSIO_T5)
+ 		t4_set_reg_field(adap, SGE_INT_ENABLE3_A,
+ 				 DBFIFO_HP_INT_F | DBFIFO_LP_INT_F,
+ 				 DBFIFO_HP_INT_F | DBFIFO_LP_INT_F);
+ 	else
+ 		t4_set_reg_field(adap, SGE_INT_ENABLE3_A,
+ 				 DBFIFO_LP_INT_F, DBFIFO_LP_INT_F);
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  }
  
  static void sync_txq_pidx(struct adapter *adap, struct sge_txq *q)
@@@ -3598,13 -2348,15 +3718,18 @@@ static void process_db_drop(struct work
  
  	adap = container_of(work, struct adapter, db_drop_task);
  
 -	if (is_t4(adap->params.chip)) {
 -		drain_db_fifo(adap, dbfifo_drain_delay);
 +	if (is_t4(adap->chip)) {
 +		disable_dbs(adap);
  		notify_rdma_uld(adap, CXGB4_CONTROL_DB_DROP);
 -		drain_db_fifo(adap, dbfifo_drain_delay);
 +		drain_db_fifo(adap, 1);
  		recover_all_queues(adap);
 -		drain_db_fifo(adap, dbfifo_drain_delay);
  		enable_dbs(adap);
++<<<<<<< HEAD
 +	} else {
++=======
+ 		notify_rdma_uld(adap, CXGB4_CONTROL_DB_EMPTY);
+ 	} else if (is_t5(adap->params.chip)) {
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		u32 dropped_db = t4_read_reg(adap, 0x010ac);
  		u16 qid = (dropped_db >> 15) & 0x1ffff;
  		u16 pidx_inc = dropped_db & 0x1fff;
@@@ -3638,7 -2377,8 +3763,12 @@@
  		t4_set_reg_field(adap, 0x10b0, 1<<15, 1<<15);
  	}
  
++<<<<<<< HEAD
 +	t4_set_reg_field(adap, A_SGE_DOORBELL_CONTROL, F_DROPPED_DB, 0);
++=======
+ 	if (CHELSIO_CHIP_VERSION(adap->params.chip) <= CHELSIO_T5)
+ 		t4_set_reg_field(adap, SGE_DOORBELL_CONTROL_A, DROPPED_DB_F, 0);
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  }
  
  void t4_db_full(struct adapter *adap)
@@@ -4517,102 -3524,10 +4650,153 @@@ static int adap_init0_config(struct ada
  	 * And now tell the firmware to use the configuration we just loaded.
  	 */
  	caps_cmd.op_to_write =
 -		htonl(FW_CMD_OP_V(FW_CAPS_CONFIG_CMD) |
 -		      FW_CMD_REQUEST_F |
 -		      FW_CMD_WRITE_F);
 +		htonl(FW_CMD_OP(FW_CAPS_CONFIG_CMD) |
 +		      FW_CMD_REQUEST |
 +		      FW_CMD_WRITE);
 +	caps_cmd.cfvalid_to_len16 = htonl(FW_LEN16(caps_cmd));
 +	ret = t4_wr_mbox(adapter, adapter->mbox, &caps_cmd, sizeof(caps_cmd),
 +			 NULL);
 +	if (ret < 0)
 +		goto bye;
 +
 +	/*
 +	 * Tweak configuration based on system architecture, module
 +	 * parameters, etc.
 +	 */
 +	ret = adap_init0_tweaks(adapter);
 +	if (ret < 0)
 +		goto bye;
 +
 +	/*
 +	 * And finally tell the firmware to initialize itself using the
 +	 * parameters from the Configuration File.
 +	 */
 +	ret = t4_fw_initialize(adapter, adapter->mbox);
 +	if (ret < 0)
 +		goto bye;
 +
 +	sprintf(fw_config_file_path, "/lib/firmware/%s", fw_config_file);
 +	/*
 +	 * Return successfully and note that we're operating with parameters
 +	 * not supplied by the driver, rather than from hard-wired
 +	 * initialization constants burried in the driver.
 +	 */
 +	adapter->flags |= USING_SOFT_PARAMS;
 +	dev_info(adapter->pdev_dev, "Successfully configured using Firmware "\
 +		 "Configuration File %s, version %#x, computed checksum %#x\n",
 +		 (using_flash
 +		  ? "in device FLASH"
 +		  : fw_config_file_path),
 +		 finiver, cfcsum);
 +	return 0;
 +
 +	/*
 +	 * Something bad happened.  Return the error ...  (If the "error"
 +	 * is that there's no Configuration File on the adapter we don't
 +	 * want to issue a warning since this is fairly common.)
 +	 */
 +bye:
 +	if (ret != -ENOENT)
 +		dev_warn(adapter->pdev_dev, "Configuration file error %d\n",
 +			 -ret);
 +	return ret;
 +}
 +
++<<<<<<< HEAD
 +/*
 + * Attempt to initialize the adapter via hard-coded, driver supplied
 + * parameters ...
 + */
 +static int adap_init0_no_config(struct adapter *adapter, int reset)
++=======
++static struct fw_info fw_info_array[] = {
++	{
++		.chip = CHELSIO_T4,
++		.fs_name = FW4_CFNAME,
++		.fw_mod_name = FW4_FNAME,
++		.fw_hdr = {
++			.chip = FW_HDR_CHIP_T4,
++			.fw_ver = __cpu_to_be32(FW_VERSION(T4)),
++			.intfver_nic = FW_INTFVER(T4, NIC),
++			.intfver_vnic = FW_INTFVER(T4, VNIC),
++			.intfver_ri = FW_INTFVER(T4, RI),
++			.intfver_iscsi = FW_INTFVER(T4, ISCSI),
++			.intfver_fcoe = FW_INTFVER(T4, FCOE),
++		},
++	}, {
++		.chip = CHELSIO_T5,
++		.fs_name = FW5_CFNAME,
++		.fw_mod_name = FW5_FNAME,
++		.fw_hdr = {
++			.chip = FW_HDR_CHIP_T5,
++			.fw_ver = __cpu_to_be32(FW_VERSION(T5)),
++			.intfver_nic = FW_INTFVER(T5, NIC),
++			.intfver_vnic = FW_INTFVER(T5, VNIC),
++			.intfver_ri = FW_INTFVER(T5, RI),
++			.intfver_iscsi = FW_INTFVER(T5, ISCSI),
++			.intfver_fcoe = FW_INTFVER(T5, FCOE),
++		},
++	}, {
++		.chip = CHELSIO_T6,
++		.fs_name = FW6_CFNAME,
++		.fw_mod_name = FW6_FNAME,
++		.fw_hdr = {
++			.chip = FW_HDR_CHIP_T6,
++			.fw_ver = __cpu_to_be32(FW_VERSION(T6)),
++			.intfver_nic = FW_INTFVER(T6, NIC),
++			.intfver_vnic = FW_INTFVER(T6, VNIC),
++			.intfver_ofld = FW_INTFVER(T6, OFLD),
++			.intfver_ri = FW_INTFVER(T6, RI),
++			.intfver_iscsipdu = FW_INTFVER(T6, ISCSIPDU),
++			.intfver_iscsi = FW_INTFVER(T6, ISCSI),
++			.intfver_fcoepdu = FW_INTFVER(T6, FCOEPDU),
++			.intfver_fcoe = FW_INTFVER(T6, FCOE),
++		},
++	}
++
++};
++
++static struct fw_info *find_fw_info(int chip)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
 +{
 +	struct sge *s = &adapter->sge;
 +	struct fw_caps_config_cmd caps_cmd;
 +	u32 v;
 +	int i, ret;
 +
 +	/*
 +	 * Reset device if necessary
 +	 */
 +	if (reset) {
 +		ret = t4_fw_reset(adapter, adapter->mbox,
 +				  PIORSTMODE | PIORST);
 +		if (ret < 0)
 +			goto bye;
 +	}
 +
 +	/*
 +	 * Get device capabilities and select which we'll be using.
 +	 */
 +	memset(&caps_cmd, 0, sizeof(caps_cmd));
 +	caps_cmd.op_to_write = htonl(FW_CMD_OP(FW_CAPS_CONFIG_CMD) |
 +				     FW_CMD_REQUEST | FW_CMD_READ);
  	caps_cmd.cfvalid_to_len16 = htonl(FW_LEN16(caps_cmd));
 +	ret = t4_wr_mbox(adapter, adapter->mbox, &caps_cmd, sizeof(caps_cmd),
 +			 &caps_cmd);
 +	if (ret < 0)
 +		goto bye;
 +
 +	if (caps_cmd.niccaps & htons(FW_CAPS_CONFIG_NIC_VM)) {
 +		if (!vf_acls)
 +			caps_cmd.niccaps ^= htons(FW_CAPS_CONFIG_NIC_VM);
 +		else
 +			caps_cmd.niccaps = htons(FW_CAPS_CONFIG_NIC_VM);
 +	} else if (vf_acls) {
 +		dev_err(adapter->pdev_dev, "virtualization ACLs not supported");
 +		goto bye;
 +	}
 +	caps_cmd.op_to_write = htonl(FW_CMD_OP(FW_CAPS_CONFIG_CMD) |
 +			      FW_CMD_REQUEST | FW_CMD_WRITE);
  	ret = t4_wr_mbox(adapter, adapter->mbox, &caps_cmd, sizeof(caps_cmd),
  			 NULL);
  	if (ret < 0)
diff --cc drivers/net/ethernet/chelsio/cxgb4/sge.c
index 2bfbb206b35a,6b7c37fd0252..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@@ -506,14 -522,35 +506,26 @@@ static void unmap_rx_buf(struct adapte
  
  static inline void ring_fl_db(struct adapter *adap, struct sge_fl *q)
  {
- 	u32 val;
  	if (q->pend_cred >= 8) {
++<<<<<<< HEAD
 +		val = PIDX(q->pend_cred / 8);
 +		if (!is_t4(adap->chip))
 +			val |= DBTYPE(1);
++=======
+ 		u32 val = adap->params.arch.sge_fl_db;
+ 
+ 		if (is_t4(adap->params.chip))
+ 			val |= PIDX_V(q->pend_cred / 8);
+ 		else
+ 			val |= PIDX_T5_V(q->pend_cred / 8);
+ 
+ 		/* Make sure all memory writes to the Free List queue are
+ 		 * committed before we tell the hardware about them.
+ 		 */
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		wmb();
 -
 -		/* If we don't have access to the new User Doorbell (T5+), use
 -		 * the old doorbell mechanism; otherwise use the new BAR2
 -		 * mechanism.
 -		 */
 -		if (unlikely(q->bar2_addr == NULL)) {
 -			t4_write_reg(adap, MYPF_REG(SGE_PF_KDOORBELL_A),
 -				     val | QID_V(q->cntxt_id));
 -		} else {
 -			writel(val | QID_V(q->bar2_qid),
 -			       q->bar2_addr + SGE_UDB_KDOORBELL);
 -
 -			/* This Write memory Barrier will force the write to
 -			 * the User Doorbell area to be flushed.
 -			 */
 -			wmb();
 -		}
 +		t4_write_reg(adap, MYPF_REG(SGE_PF_KDOORBELL), DBPRIO(1) |
 +			     QID(q->cntxt_id) | val);
  		q->pend_cred &= 7;
  	}
  }
@@@ -936,15 -1064,21 +948,28 @@@ nocsum:			/
  			goto nocsum;
  	}
  
++<<<<<<< HEAD
 +	if (likely(csum_type >= TX_CSUM_TCPIP))
 +		return TXPKT_CSUM_TYPE(csum_type) |
 +			TXPKT_IPHDR_LEN(skb_network_header_len(skb)) |
 +			TXPKT_ETHHDR_LEN(skb_network_offset(skb) - ETH_HLEN);
 +	else {
++=======
+ 	if (likely(csum_type >= TX_CSUM_TCPIP)) {
+ 		u64 hdr_len = TXPKT_IPHDR_LEN_V(skb_network_header_len(skb));
+ 		int eth_hdr_len = skb_network_offset(skb) - ETH_HLEN;
+ 
+ 		if (CHELSIO_CHIP_VERSION(chip) <= CHELSIO_T5)
+ 			hdr_len |= TXPKT_ETHHDR_LEN_V(eth_hdr_len);
+ 		else
+ 			hdr_len |= T6_TXPKT_ETHHDR_LEN_V(eth_hdr_len);
+ 		return TXPKT_CSUM_TYPE_V(csum_type) | hdr_len;
+ 	} else {
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		int start = skb_transport_offset(skb);
  
 -		return TXPKT_CSUM_TYPE_V(csum_type) |
 -			TXPKT_CSUM_START_V(start) |
 -			TXPKT_CSUM_LOC_V(start + skb->csum_offset);
 +		return TXPKT_CSUM_TYPE(csum_type) | TXPKT_CSUM_START(start) |
 +			TXPKT_CSUM_LOC(start + skb->csum_offset);
  	}
  }
  
@@@ -1046,34 -1236,47 +1071,51 @@@ out_free:	dev_kfree_skb(skb)
  		lso->c.ipid_ofst = htons(0);
  		lso->c.mss = htons(ssi->gso_size);
  		lso->c.seqno_offset = htonl(0);
 -		if (is_t4(adap->params.chip))
 -			lso->c.len = htonl(skb->len);
 -		else
 -			lso->c.len = htonl(LSO_T5_XFER_SIZE_V(skb->len));
 +		lso->c.len = htonl(skb->len);
  		cpl = (void *)(lso + 1);
++<<<<<<< HEAD
 +		cntrl = TXPKT_CSUM_TYPE(v6 ? TX_CSUM_TCPIP6 : TX_CSUM_TCPIP) |
 +			TXPKT_IPHDR_LEN(l3hdr_len) |
 +			TXPKT_ETHHDR_LEN(eth_xtra_len);
++=======
+ 
+ 		if (CHELSIO_CHIP_VERSION(adap->params.chip) <= CHELSIO_T5)
+ 			cntrl =	TXPKT_ETHHDR_LEN_V(eth_xtra_len);
+ 		else
+ 			cntrl = T6_TXPKT_ETHHDR_LEN_V(eth_xtra_len);
+ 
+ 		cntrl |= TXPKT_CSUM_TYPE_V(v6 ?
+ 					   TX_CSUM_TCPIP6 : TX_CSUM_TCPIP) |
+ 			 TXPKT_IPHDR_LEN_V(l3hdr_len);
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		q->tso++;
  		q->tx_cso += ssi->gso_segs;
  	} else {
 -		len += sizeof(*cpl);
 -		wr->op_immdlen = htonl(FW_WR_OP_V(FW_ETH_TX_PKT_WR) |
 -				       FW_WR_IMMDLEN_V(len));
 +		int len;
 +
 +		len = is_eth_imm(skb) ? skb->len + sizeof(*cpl) : sizeof(*cpl);
 +		wr->op_immdlen = htonl(FW_WR_OP(FW_ETH_TX_PKT_WR) |
 +				       FW_WR_IMMDLEN(len));
  		cpl = (void *)(wr + 1);
  		if (skb->ip_summed == CHECKSUM_PARTIAL) {
++<<<<<<< HEAD
 +			cntrl = hwcsum(skb) | TXPKT_IPCSUM_DIS;
++=======
+ 			cntrl = hwcsum(adap->params.chip, skb) |
+ 				TXPKT_IPCSUM_DIS_F;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  			q->tx_cso++;
 -		}
 +		} else
 +			cntrl = TXPKT_L4CSUM_DIS | TXPKT_IPCSUM_DIS;
  	}
  
 -	if (skb_vlan_tag_present(skb)) {
 +	if (vlan_tx_tag_present(skb)) {
  		q->vlan_ins++;
 -		cntrl |= TXPKT_VLAN_VLD_F | TXPKT_VLAN_V(skb_vlan_tag_get(skb));
 -#ifdef CONFIG_CHELSIO_T4_FCOE
 -		if (skb->protocol == htons(ETH_P_FCOE))
 -			cntrl |= TXPKT_VLAN_V(
 -				 ((skb->priority & 0x7) << VLAN_PRIO_SHIFT));
 -#endif /* CONFIG_CHELSIO_T4_FCOE */
 +		cntrl |= TXPKT_VLAN_VLD | TXPKT_VLAN(vlan_tx_tag_get(skb));
  	}
  
 -	cpl->ctrl0 = htonl(TXPKT_OPCODE_V(CPL_TX_PKT_XT) |
 -			   TXPKT_INTF_V(pi->tx_chan) |
 -			   TXPKT_PF_V(adap->pf));
 +	cpl->ctrl0 = htonl(TXPKT_OPCODE(CPL_TX_PKT_XT) |
 +			   TXPKT_INTF(pi->tx_chan) | TXPKT_PF(adap->fn));
  	cpl->pack = htons(0);
  	cpl->len = htons(skb->len);
  	cpl->ctrl1 = cpu_to_be64(cntrl);
@@@ -2094,24 -2430,38 +2136,38 @@@ int t4_sge_alloc_rxq(struct adapter *ad
  		return -ENOMEM;
  
  	memset(&c, 0, sizeof(c));
 -	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_IQ_CMD) | FW_CMD_REQUEST_F |
 -			    FW_CMD_WRITE_F | FW_CMD_EXEC_F |
 -			    FW_IQ_CMD_PFN_V(adap->pf) | FW_IQ_CMD_VFN_V(0));
 -	c.alloc_to_len16 = htonl(FW_IQ_CMD_ALLOC_F | FW_IQ_CMD_IQSTART_F |
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_IQ_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_WRITE | FW_CMD_EXEC |
 +			    FW_IQ_CMD_PFN(adap->fn) | FW_IQ_CMD_VFN(0));
 +	c.alloc_to_len16 = htonl(FW_IQ_CMD_ALLOC | FW_IQ_CMD_IQSTART(1) |
  				 FW_LEN16(c));
 -	c.type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE_V(FW_IQ_TYPE_FL_INT_CAP) |
 -		FW_IQ_CMD_IQASYNCH_V(fwevtq) | FW_IQ_CMD_VIID_V(pi->viid) |
 -		FW_IQ_CMD_IQANDST_V(intr_idx < 0) |
 -		FW_IQ_CMD_IQANUD_V(UPDATEDELIVERY_INTERRUPT_X) |
 -		FW_IQ_CMD_IQANDSTINDEX_V(intr_idx >= 0 ? intr_idx :
 +	c.type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE(FW_IQ_TYPE_FL_INT_CAP) |
 +		FW_IQ_CMD_IQASYNCH(fwevtq) | FW_IQ_CMD_VIID(pi->viid) |
 +		FW_IQ_CMD_IQANDST(intr_idx < 0) | FW_IQ_CMD_IQANUD(1) |
 +		FW_IQ_CMD_IQANDSTINDEX(intr_idx >= 0 ? intr_idx :
  							-intr_idx - 1));
 -	c.iqdroprss_to_iqesize = htons(FW_IQ_CMD_IQPCIECH_V(pi->tx_chan) |
 -		FW_IQ_CMD_IQGTSMODE_F |
 -		FW_IQ_CMD_IQINTCNTTHRESH_V(iq->pktcnt_idx) |
 -		FW_IQ_CMD_IQESIZE_V(ilog2(iq->iqe_len) - 4));
 +	c.iqdroprss_to_iqesize = htons(FW_IQ_CMD_IQPCIECH(pi->tx_chan) |
 +		FW_IQ_CMD_IQGTSMODE |
 +		FW_IQ_CMD_IQINTCNTTHRESH(iq->pktcnt_idx) |
 +		FW_IQ_CMD_IQESIZE(ilog2(iq->iqe_len) - 4));
  	c.iqsize = htons(iq->size);
  	c.iqaddr = cpu_to_be64(iq->phys_addr);
 -	if (cong >= 0)
 -		c.iqns_to_fl0congen = htonl(FW_IQ_CMD_IQFLINTCONGEN_F);
  
  	if (fl) {
++<<<<<<< HEAD
++=======
+ 		enum chip_type chip = CHELSIO_CHIP_VERSION(adap->params.chip);
+ 
+ 		/* Allocate the ring for the hardware free list (with space
+ 		 * for its status page) along with the associated software
+ 		 * descriptor ring.  The free list size needs to be a multiple
+ 		 * of the Egress Queue Unit and at least 2 Egress Units larger
+ 		 * than the SGE's Egress Congrestion Threshold
+ 		 * (fl_starve_thres - 1).
+ 		 */
+ 		if (fl->size < s->fl_starve_thres - 1 + 2 * 8)
+ 			fl->size = s->fl_starve_thres - 1 + 2 * 8;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		fl->size = roundup(fl->size, 8);
  		fl->desc = alloc_ring(adap->pdev_dev, fl->size, sizeof(__be64),
  				      sizeof(struct rx_sw_desc), &fl->addr,
@@@ -2120,12 -2470,20 +2176,29 @@@
  			goto fl_nomem;
  
  		flsz = fl->size / 8 + s->stat_len / sizeof(struct tx_desc);
++<<<<<<< HEAD
 +		c.iqns_to_fl0congen = htonl(FW_IQ_CMD_FL0PACKEN(1) |
 +					    FW_IQ_CMD_FL0FETCHRO(1) |
 +					    FW_IQ_CMD_FL0DATARO(1) |
 +					    FW_IQ_CMD_FL0PADEN(1));
 +		c.fl0dcaen_to_fl0cidxfthresh = htons(FW_IQ_CMD_FL0FBMIN(2) |
 +				FW_IQ_CMD_FL0FBMAX(3));
++=======
+ 		c.iqns_to_fl0congen |= htonl(FW_IQ_CMD_FL0PACKEN_F |
+ 					     FW_IQ_CMD_FL0FETCHRO_F |
+ 					     FW_IQ_CMD_FL0DATARO_F |
+ 					     FW_IQ_CMD_FL0PADEN_F);
+ 		if (cong >= 0)
+ 			c.iqns_to_fl0congen |=
+ 				htonl(FW_IQ_CMD_FL0CNGCHMAP_V(cong) |
+ 				      FW_IQ_CMD_FL0CONGCIF_F |
+ 				      FW_IQ_CMD_FL0CONGEN_F);
+ 		c.fl0dcaen_to_fl0cidxfthresh =
+ 			htons(FW_IQ_CMD_FL0FBMIN_V(FETCHBURSTMIN_64B_X) |
+ 			      FW_IQ_CMD_FL0FBMAX_V((chip <= CHELSIO_T5) ?
+ 						   FETCHBURSTMAX_512B_X :
+ 						   FETCHBURSTMAX_256B_X));
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		c.fl0size = htons(flsz);
  		c.fl0addr = cpu_to_be64(fl->addr);
  	}
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
index d02d4e8c4417,35a44db29347..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
@@@ -143,6 -143,63 +143,66 @@@ void t4_write_indirect(struct adapter *
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Read a 32-bit PCI Configuration Space register via the PCI-E backdoor
+  * mechanism.  This guarantees that we get the real value even if we're
+  * operating within a Virtual Machine and the Hypervisor is trapping our
+  * Configuration Space accesses.
+  */
+ void t4_hw_pci_read_cfg4(struct adapter *adap, int reg, u32 *val)
+ {
+ 	u32 req = FUNCTION_V(adap->pf) | REGISTER_V(reg);
+ 
+ 	if (CHELSIO_CHIP_VERSION(adap->params.chip) <= CHELSIO_T5)
+ 		req |= ENABLE_F;
+ 	else
+ 		req |= T6_ENABLE_F;
+ 
+ 	if (is_t4(adap->params.chip))
+ 		req |= LOCALCFG_F;
+ 
+ 	t4_write_reg(adap, PCIE_CFG_SPACE_REQ_A, req);
+ 	*val = t4_read_reg(adap, PCIE_CFG_SPACE_DATA_A);
+ 
+ 	/* Reset ENABLE to 0 so reads of PCIE_CFG_SPACE_DATA won't cause a
+ 	 * Configuration Space read.  (None of the other fields matter when
+ 	 * ENABLE is 0 so a simple register write is easier than a
+ 	 * read-modify-write via t4_set_reg_field().)
+ 	 */
+ 	t4_write_reg(adap, PCIE_CFG_SPACE_REQ_A, 0);
+ }
+ 
+ /*
+  * t4_report_fw_error - report firmware error
+  * @adap: the adapter
+  *
+  * The adapter firmware can indicate error conditions to the host.
+  * If the firmware has indicated an error, print out the reason for
+  * the firmware error.
+  */
+ static void t4_report_fw_error(struct adapter *adap)
+ {
+ 	static const char *const reason[] = {
+ 		"Crash",                        /* PCIE_FW_EVAL_CRASH */
+ 		"During Device Preparation",    /* PCIE_FW_EVAL_PREP */
+ 		"During Device Configuration",  /* PCIE_FW_EVAL_CONF */
+ 		"During Device Initialization", /* PCIE_FW_EVAL_INIT */
+ 		"Unexpected Event",             /* PCIE_FW_EVAL_UNEXPECTEDEVENT */
+ 		"Insufficient Airflow",         /* PCIE_FW_EVAL_OVERHEAT */
+ 		"Device Shutdown",              /* PCIE_FW_EVAL_DEVICESHUTDOWN */
+ 		"Reserved",                     /* reserved */
+ 	};
+ 	u32 pcie_fw;
+ 
+ 	pcie_fw = t4_read_reg(adap, PCIE_FW_A);
+ 	if (pcie_fw & PCIE_FW_ERR_F)
+ 		dev_err(adap->pdev_dev, "Firmware reports adapter error: %s\n",
+ 			reason[PCIE_FW_EVAL_G(pcie_fw)]);
+ }
+ 
+ /*
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
   * Get the reply to a mailbox command and store it in @rpl in big-endian order.
   */
  static void get_mbox_rpl(struct adapter *adap, __be64 *rpl, int nflit,
@@@ -464,11 -386,10 +524,10 @@@ static int t4_memory_rw(struct adapter 
  	/* Offset into the region of memory which is being accessed
  	 * MEM_EDC0 = 0
  	 * MEM_EDC1 = 1
- 	 * MEM_MC   = 2 -- T4
- 	 * MEM_MC0  = 2 -- For T5
- 	 * MEM_MC1  = 3 -- For T5
+ 	 * MEM_MC   = 2 -- MEM_MC for chips with only 1 memory controller
+ 	 * MEM_MC1  = 3 -- for chips with 2 memory controllers (e.g. T5)
  	 */
 -	edc_size  = EDRAM0_SIZE_G(t4_read_reg(adap, MA_EDRAM0_BAR_A));
 +	edc_size  = EDRAM_SIZE_GET(t4_read_reg(adap, MA_EDRAM0_BAR));
  	if (mtype != MEM_MC1)
  		memoffset = (mtype * (edc_size * 1024 * 1024));
  	else {
@@@ -995,60 -2284,26 +1054,70 @@@ unsigned int t4_flash_cfg_addr(struct a
  		return FLASH_CFG_START;
  }
  
 -/* Return TRUE if the specified firmware matches the adapter.  I.e. T4
 - * firmware for T4 adapters, T5 firmware for T5 adapters, etc.  We go ahead
 - * and emit an error message for mismatched firmware to save our caller the
 - * effort ...
 +/**
 + *	t4_load_cfg - download config file
 + *	@adap: the adapter
 + *	@cfg_data: the cfg text file to write
 + *	@size: text file size
 + *
 + *	Write the supplied config text file to the card's serial flash.
   */
 -static bool t4_fw_matches_chip(const struct adapter *adap,
 -			       const struct fw_hdr *hdr)
 +int t4_load_cfg(struct adapter *adap, const u8 *cfg_data, unsigned int size)
  {
++<<<<<<< HEAD
 +	int ret, i, n;
 +	unsigned int addr;
 +	unsigned int flash_cfg_start_sec;
 +	unsigned int sf_sec_size = adap->params.sf_size / adap->params.sf_nsec;
++=======
+ 	/* The expression below will return FALSE for any unsupported adapter
+ 	 * which will keep us "honest" in the future ...
+ 	 */
+ 	if ((is_t4(adap->params.chip) && hdr->chip == FW_HDR_CHIP_T4) ||
+ 	    (is_t5(adap->params.chip) && hdr->chip == FW_HDR_CHIP_T5) ||
+ 	    (is_t6(adap->params.chip) && hdr->chip == FW_HDR_CHIP_T6))
+ 		return true;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
 -	dev_err(adap->pdev_dev,
 -		"FW image (%d) is not suitable for this adapter (%d)\n",
 -		hdr->chip, CHELSIO_CHIP_VERSION(adap->params.chip));
 -	return false;
 +	addr = t4_flash_cfg_addr(adap);
 +	flash_cfg_start_sec = addr / SF_SEC_SIZE;
 +
 +	if (size > FLASH_CFG_MAX_SIZE) {
 +		dev_err(adap->pdev_dev, "cfg file too large, max is %u bytes\n",
 +			FLASH_CFG_MAX_SIZE);
 +		return -EFBIG;
 +	}
 +
 +	i = DIV_ROUND_UP(FLASH_CFG_MAX_SIZE,	/* # of sectors spanned */
 +			 sf_sec_size);
 +	ret = t4_flash_erase_sectors(adap, flash_cfg_start_sec,
 +				     flash_cfg_start_sec + i - 1);
 +	/*
 +	 * If size == 0 then we're simply erasing the FLASH sectors associated
 +	 * with the on-adapter Firmware Configuration File.
 +	 */
 +	if (ret || size == 0)
 +		goto out;
 +
 +	/* this will write to the flash up to SF_PAGE_SIZE at a time */
 +	for (i = 0; i < size; i += SF_PAGE_SIZE) {
 +		if ((size - i) <  SF_PAGE_SIZE)
 +			n = size - i;
 +		else
 +			n = SF_PAGE_SIZE;
 +		ret = t4_write_flash(adap, addr, n, cfg_data);
 +		if (ret)
 +			goto out;
 +
 +		addr += SF_PAGE_SIZE;
 +		cfg_data += SF_PAGE_SIZE;
 +	}
 +
 +out:
 +	if (ret)
 +		dev_err(adap->pdev_dev, "config file %s failed %d\n",
 +			(size == 0 ? "clear" : "download"), ret);
 +	return ret;
  }
  
  /**
@@@ -1387,46 -2837,66 +1456,91 @@@ static void tp_intr_handler(struct adap
  static void sge_intr_handler(struct adapter *adapter)
  {
  	u64 v;
+ 	u32 err;
  
  	static const struct intr_info sge_intr_info[] = {
 -		{ ERR_CPL_EXCEED_IQE_SIZE_F,
 +		{ ERR_CPL_EXCEED_IQE_SIZE,
  		  "SGE received CPL exceeding IQE size", -1, 1 },
 -		{ ERR_INVALID_CIDX_INC_F,
 +		{ ERR_INVALID_CIDX_INC,
  		  "SGE GTS CIDX increment too large", -1, 0 },
++<<<<<<< HEAD
 +		{ ERR_CPL_OPCODE_0, "SGE received 0-length CPL", -1, 0 },
 +		{ DBFIFO_LP_INT, NULL, -1, 0, t4_db_full },
 +		{ DBFIFO_HP_INT, NULL, -1, 0, t4_db_full },
 +		{ ERR_DROPPED_DB, NULL, -1, 0, t4_db_dropped },
 +		{ ERR_DATA_CPL_ON_HIGH_QID1 | ERR_DATA_CPL_ON_HIGH_QID0,
++=======
+ 		{ ERR_CPL_OPCODE_0_F, "SGE received 0-length CPL", -1, 0 },
+ 		{ DBFIFO_LP_INT_F, NULL, -1, 0, t4_db_full },
+ 		{ ERR_DATA_CPL_ON_HIGH_QID1_F | ERR_DATA_CPL_ON_HIGH_QID0_F,
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		  "SGE IQID > 1023 received CPL for FL", -1, 0 },
 -		{ ERR_BAD_DB_PIDX3_F, "SGE DBP 3 pidx increment too large", -1,
 +		{ ERR_BAD_DB_PIDX3, "SGE DBP 3 pidx increment too large", -1,
  		  0 },
 -		{ ERR_BAD_DB_PIDX2_F, "SGE DBP 2 pidx increment too large", -1,
 +		{ ERR_BAD_DB_PIDX2, "SGE DBP 2 pidx increment too large", -1,
  		  0 },
 -		{ ERR_BAD_DB_PIDX1_F, "SGE DBP 1 pidx increment too large", -1,
 +		{ ERR_BAD_DB_PIDX1, "SGE DBP 1 pidx increment too large", -1,
  		  0 },
 -		{ ERR_BAD_DB_PIDX0_F, "SGE DBP 0 pidx increment too large", -1,
 +		{ ERR_BAD_DB_PIDX0, "SGE DBP 0 pidx increment too large", -1,
  		  0 },
 -		{ ERR_ING_CTXT_PRIO_F,
 +		{ ERR_ING_CTXT_PRIO,
  		  "SGE too many priority ingress contexts", -1, 0 },
++<<<<<<< HEAD
 +		{ ERR_EGR_CTXT_PRIO,
 +		  "SGE too many priority egress contexts", -1, 0 },
 +		{ INGRESS_SIZE_ERR, "SGE illegal ingress QID", -1, 0 },
 +		{ EGRESS_SIZE_ERR, "SGE illegal egress QID", -1, 0 },
 +		{ 0 }
 +	};
 +
 +	v = (u64)t4_read_reg(adapter, SGE_INT_CAUSE1) |
 +		((u64)t4_read_reg(adapter, SGE_INT_CAUSE2) << 32);
++=======
+ 		{ INGRESS_SIZE_ERR_F, "SGE illegal ingress QID", -1, 0 },
+ 		{ EGRESS_SIZE_ERR_F, "SGE illegal egress QID", -1, 0 },
+ 		{ 0 }
+ 	};
+ 
+ 	static struct intr_info t4t5_sge_intr_info[] = {
+ 		{ ERR_DROPPED_DB_F, NULL, -1, 0, t4_db_dropped },
+ 		{ DBFIFO_HP_INT_F, NULL, -1, 0, t4_db_full },
+ 		{ ERR_EGR_CTXT_PRIO_F,
+ 		  "SGE too many priority egress contexts", -1, 0 },
+ 		{ 0 }
+ 	};
+ 
+ 	v = (u64)t4_read_reg(adapter, SGE_INT_CAUSE1_A) |
+ 		((u64)t4_read_reg(adapter, SGE_INT_CAUSE2_A) << 32);
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  	if (v) {
  		dev_alert(adapter->pdev_dev, "SGE parity error (%#llx)\n",
  				(unsigned long long)v);
 -		t4_write_reg(adapter, SGE_INT_CAUSE1_A, v);
 -		t4_write_reg(adapter, SGE_INT_CAUSE2_A, v >> 32);
 +		t4_write_reg(adapter, SGE_INT_CAUSE1, v);
 +		t4_write_reg(adapter, SGE_INT_CAUSE2, v >> 32);
  	}
  
++<<<<<<< HEAD
 +	if (t4_handle_intr_status(adapter, SGE_INT_CAUSE3, sge_intr_info) ||
 +	    v != 0)
++=======
+ 	v |= t4_handle_intr_status(adapter, SGE_INT_CAUSE3_A, sge_intr_info);
+ 	if (CHELSIO_CHIP_VERSION(adapter->params.chip) <= CHELSIO_T5)
+ 		v |= t4_handle_intr_status(adapter, SGE_INT_CAUSE3_A,
+ 					   t4t5_sge_intr_info);
+ 
+ 	err = t4_read_reg(adapter, SGE_ERROR_STATS_A);
+ 	if (err & ERROR_QID_VALID_F) {
+ 		dev_err(adapter->pdev_dev, "SGE error for queue %u\n",
+ 			ERROR_QID_G(err));
+ 		if (err & UNCAPTURED_ERROR_F)
+ 			dev_err(adapter->pdev_dev,
+ 				"SGE UNCAPTURED_ERROR set (clearing)\n");
+ 		t4_write_reg(adapter, SGE_ERROR_STATS_A, ERROR_QID_VALID_F |
+ 			     UNCAPTURED_ERROR_F);
+ 	}
+ 
+ 	if (v != 0)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		t4_fatal_err(adapter);
  }
  
@@@ -1589,16 -3069,28 +1703,32 @@@ static void cplsw_intr_handler(struct a
   */
  static void le_intr_handler(struct adapter *adap)
  {
+ 	enum chip_type chip = CHELSIO_CHIP_VERSION(adap->params.chip);
  	static const struct intr_info le_intr_info[] = {
 -		{ LIPMISS_F, "LE LIP miss", -1, 0 },
 -		{ LIP0_F, "LE 0 LIP error", -1, 0 },
 -		{ PARITYERR_F, "LE parity error", -1, 1 },
 -		{ UNKNOWNCMD_F, "LE unknown command", -1, 1 },
 -		{ REQQPARERR_F, "LE request queue parity error", -1, 1 },
 +		{ LIPMISS, "LE LIP miss", -1, 0 },
 +		{ LIP0, "LE 0 LIP error", -1, 0 },
 +		{ PARITYERR, "LE parity error", -1, 1 },
 +		{ UNKNOWNCMD, "LE unknown command", -1, 1 },
 +		{ REQQPARERR, "LE request queue parity error", -1, 1 },
  		{ 0 }
  	};
  
++<<<<<<< HEAD
 +	if (t4_handle_intr_status(adap, LE_DB_INT_CAUSE, le_intr_info))
++=======
+ 	static struct intr_info t6_le_intr_info[] = {
+ 		{ T6_LIPMISS_F, "LE LIP miss", -1, 0 },
+ 		{ T6_LIP0_F, "LE 0 LIP error", -1, 0 },
+ 		{ TCAMINTPERR_F, "LE parity error", -1, 1 },
+ 		{ T6_UNKNOWNCMD_F, "LE unknown command", -1, 1 },
+ 		{ SSRAMINTPERR_F, "LE request queue parity error", -1, 1 },
+ 		{ 0 }
+ 	};
+ 
+ 	if (t4_handle_intr_status(adap, LE_DB_INT_CAUSE_A,
+ 				  (chip <= CHELSIO_T5) ?
+ 				  le_intr_info : t6_le_intr_info))
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		t4_fatal_err(adap);
  }
  
@@@ -1828,49 -3337,51 +1958,55 @@@ int t4_slow_intr_handler(struct adapte
  
  	if (!(cause & GLBL_INTR_MASK))
  		return 0;
 -	if (cause & CIM_F)
 +	if (cause & CIM)
  		cim_intr_handler(adapter);
 -	if (cause & MPS_F)
 +	if (cause & MPS)
  		mps_intr_handler(adapter);
 -	if (cause & NCSI_F)
 +	if (cause & NCSI)
  		ncsi_intr_handler(adapter);
 -	if (cause & PL_F)
 +	if (cause & PL)
  		pl_intr_handler(adapter);
 -	if (cause & SMB_F)
 +	if (cause & SMB)
  		smb_intr_handler(adapter);
 -	if (cause & XGMAC0_F)
 +	if (cause & XGMAC0)
  		xgmac_intr_handler(adapter, 0);
 -	if (cause & XGMAC1_F)
 +	if (cause & XGMAC1)
  		xgmac_intr_handler(adapter, 1);
 -	if (cause & XGMAC_KR0_F)
 +	if (cause & XGMAC_KR0)
  		xgmac_intr_handler(adapter, 2);
 -	if (cause & XGMAC_KR1_F)
 +	if (cause & XGMAC_KR1)
  		xgmac_intr_handler(adapter, 3);
 -	if (cause & PCIE_F)
 +	if (cause & PCIE)
  		pcie_intr_handler(adapter);
 -	if (cause & MC_F)
 +	if (cause & MC)
  		mem_intr_handler(adapter, MEM_MC);
++<<<<<<< HEAD
 +	if (cause & EDC0)
++=======
+ 	if (is_t5(adapter->params.chip) && (cause & MC1_F))
+ 		mem_intr_handler(adapter, MEM_MC1);
+ 	if (cause & EDC0_F)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		mem_intr_handler(adapter, MEM_EDC0);
 -	if (cause & EDC1_F)
 +	if (cause & EDC1)
  		mem_intr_handler(adapter, MEM_EDC1);
 -	if (cause & LE_F)
 +	if (cause & LE)
  		le_intr_handler(adapter);
 -	if (cause & TP_F)
 +	if (cause & TP)
  		tp_intr_handler(adapter);
 -	if (cause & MA_F)
 +	if (cause & MA)
  		ma_intr_handler(adapter);
 -	if (cause & PM_TX_F)
 +	if (cause & PM_TX)
  		pmtx_intr_handler(adapter);
 -	if (cause & PM_RX_F)
 +	if (cause & PM_RX)
  		pmrx_intr_handler(adapter);
 -	if (cause & ULP_RX_F)
 +	if (cause & ULP_RX)
  		ulprx_intr_handler(adapter);
 -	if (cause & CPL_SWITCH_F)
 +	if (cause & CPL_SWITCH)
  		cplsw_intr_handler(adapter);
 -	if (cause & SGE_F)
 +	if (cause & SGE)
  		sge_intr_handler(adapter);
 -	if (cause & ULP_TX_F)
 +	if (cause & ULP_TX)
  		ulptx_intr_handler(adapter);
  
  	/* Clear the interrupts just processed for which we are the master. */
@@@ -1894,19 -3405,20 +2030,36 @@@
   */
  void t4_intr_enable(struct adapter *adapter)
  {
++<<<<<<< HEAD
 +	u32 pf = SOURCEPF_GET(t4_read_reg(adapter, PL_WHOAMI));
 +
 +	t4_write_reg(adapter, SGE_INT_ENABLE3, ERR_CPL_EXCEED_IQE_SIZE |
 +		     ERR_INVALID_CIDX_INC | ERR_CPL_OPCODE_0 |
 +		     ERR_DROPPED_DB | ERR_DATA_CPL_ON_HIGH_QID1 |
 +		     ERR_DATA_CPL_ON_HIGH_QID0 | ERR_BAD_DB_PIDX3 |
 +		     ERR_BAD_DB_PIDX2 | ERR_BAD_DB_PIDX1 |
 +		     ERR_BAD_DB_PIDX0 | ERR_ING_CTXT_PRIO |
 +		     ERR_EGR_CTXT_PRIO | INGRESS_SIZE_ERR |
 +		     DBFIFO_HP_INT | DBFIFO_LP_INT |
 +		     EGRESS_SIZE_ERR);
 +	t4_write_reg(adapter, MYPF_REG(PL_PF_INT_ENABLE), PF_INTR_MASK);
 +	t4_set_reg_field(adapter, PL_INT_MAP0, 0, 1 << pf);
++=======
+ 	u32 val = 0;
+ 	u32 pf = SOURCEPF_G(t4_read_reg(adapter, PL_WHOAMI_A));
+ 
+ 	if (CHELSIO_CHIP_VERSION(adapter->params.chip) <= CHELSIO_T5)
+ 		val = ERR_DROPPED_DB_F | ERR_EGR_CTXT_PRIO_F | DBFIFO_HP_INT_F;
+ 	t4_write_reg(adapter, SGE_INT_ENABLE3_A, ERR_CPL_EXCEED_IQE_SIZE_F |
+ 		     ERR_INVALID_CIDX_INC_F | ERR_CPL_OPCODE_0_F |
+ 		     ERR_DATA_CPL_ON_HIGH_QID1_F | INGRESS_SIZE_ERR_F |
+ 		     ERR_DATA_CPL_ON_HIGH_QID0_F | ERR_BAD_DB_PIDX3_F |
+ 		     ERR_BAD_DB_PIDX2_F | ERR_BAD_DB_PIDX1_F |
+ 		     ERR_BAD_DB_PIDX0_F | ERR_ING_CTXT_PRIO_F |
+ 		     DBFIFO_LP_INT_F | EGRESS_SIZE_ERR_F | val);
+ 	t4_write_reg(adapter, MYPF_REG(PL_PF_INT_ENABLE_A), PF_INTR_MASK);
+ 	t4_set_reg_field(adapter, PL_INT_MAP0_A, 0, 1 << pf);
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  }
  
  /**
@@@ -2038,6 -3551,195 +2191,198 @@@ int t4_config_glbl_rss(struct adapter *
  }
  
  /**
++<<<<<<< HEAD
++=======
+  *	t4_config_vi_rss - configure per VI RSS settings
+  *	@adapter: the adapter
+  *	@mbox: mbox to use for the FW command
+  *	@viid: the VI id
+  *	@flags: RSS flags
+  *	@defq: id of the default RSS queue for the VI.
+  *
+  *	Configures VI-specific RSS properties.
+  */
+ int t4_config_vi_rss(struct adapter *adapter, int mbox, unsigned int viid,
+ 		     unsigned int flags, unsigned int defq)
+ {
+ 	struct fw_rss_vi_config_cmd c;
+ 
+ 	memset(&c, 0, sizeof(c));
+ 	c.op_to_viid = cpu_to_be32(FW_CMD_OP_V(FW_RSS_VI_CONFIG_CMD) |
+ 				   FW_CMD_REQUEST_F | FW_CMD_WRITE_F |
+ 				   FW_RSS_VI_CONFIG_CMD_VIID_V(viid));
+ 	c.retval_len16 = cpu_to_be32(FW_LEN16(c));
+ 	c.u.basicvirtual.defaultq_to_udpen = cpu_to_be32(flags |
+ 					FW_RSS_VI_CONFIG_CMD_DEFAULTQ_V(defq));
+ 	return t4_wr_mbox(adapter, mbox, &c, sizeof(c), NULL);
+ }
+ 
+ /* Read an RSS table row */
+ static int rd_rss_row(struct adapter *adap, int row, u32 *val)
+ {
+ 	t4_write_reg(adap, TP_RSS_LKP_TABLE_A, 0xfff00000 | row);
+ 	return t4_wait_op_done_val(adap, TP_RSS_LKP_TABLE_A, LKPTBLROWVLD_F, 1,
+ 				   5, 0, val);
+ }
+ 
+ /**
+  *	t4_read_rss - read the contents of the RSS mapping table
+  *	@adapter: the adapter
+  *	@map: holds the contents of the RSS mapping table
+  *
+  *	Reads the contents of the RSS hash->queue mapping table.
+  */
+ int t4_read_rss(struct adapter *adapter, u16 *map)
+ {
+ 	u32 val;
+ 	int i, ret;
+ 
+ 	for (i = 0; i < RSS_NENTRIES / 2; ++i) {
+ 		ret = rd_rss_row(adapter, i, &val);
+ 		if (ret)
+ 			return ret;
+ 		*map++ = LKPTBLQUEUE0_G(val);
+ 		*map++ = LKPTBLQUEUE1_G(val);
+ 	}
+ 	return 0;
+ }
+ 
+ /**
+  *	t4_read_rss_key - read the global RSS key
+  *	@adap: the adapter
+  *	@key: 10-entry array holding the 320-bit RSS key
+  *
+  *	Reads the global 320-bit RSS key.
+  */
+ void t4_read_rss_key(struct adapter *adap, u32 *key)
+ {
+ 	t4_read_indirect(adap, TP_PIO_ADDR_A, TP_PIO_DATA_A, key, 10,
+ 			 TP_RSS_SECRET_KEY0_A);
+ }
+ 
+ /**
+  *	t4_write_rss_key - program one of the RSS keys
+  *	@adap: the adapter
+  *	@key: 10-entry array holding the 320-bit RSS key
+  *	@idx: which RSS key to write
+  *
+  *	Writes one of the RSS keys with the given 320-bit value.  If @idx is
+  *	0..15 the corresponding entry in the RSS key table is written,
+  *	otherwise the global RSS key is written.
+  */
+ void t4_write_rss_key(struct adapter *adap, const u32 *key, int idx)
+ {
+ 	u8 rss_key_addr_cnt = 16;
+ 	u32 vrt = t4_read_reg(adap, TP_RSS_CONFIG_VRT_A);
+ 
+ 	/* T6 and later: for KeyMode 3 (per-vf and per-vf scramble),
+ 	 * allows access to key addresses 16-63 by using KeyWrAddrX
+ 	 * as index[5:4](upper 2) into key table
+ 	 */
+ 	if ((CHELSIO_CHIP_VERSION(adap->params.chip) > CHELSIO_T5) &&
+ 	    (vrt & KEYEXTEND_F) && (KEYMODE_G(vrt) == 3))
+ 		rss_key_addr_cnt = 32;
+ 
+ 	t4_write_indirect(adap, TP_PIO_ADDR_A, TP_PIO_DATA_A, key, 10,
+ 			  TP_RSS_SECRET_KEY0_A);
+ 
+ 	if (idx >= 0 && idx < rss_key_addr_cnt) {
+ 		if (rss_key_addr_cnt > 16)
+ 			t4_write_reg(adap, TP_RSS_CONFIG_VRT_A,
+ 				     KEYWRADDRX_V(idx >> 4) |
+ 				     T6_VFWRADDR_V(idx) | KEYWREN_F);
+ 		else
+ 			t4_write_reg(adap, TP_RSS_CONFIG_VRT_A,
+ 				     KEYWRADDR_V(idx) | KEYWREN_F);
+ 	}
+ }
+ 
+ /**
+  *	t4_read_rss_pf_config - read PF RSS Configuration Table
+  *	@adapter: the adapter
+  *	@index: the entry in the PF RSS table to read
+  *	@valp: where to store the returned value
+  *
+  *	Reads the PF RSS Configuration Table at the specified index and returns
+  *	the value found there.
+  */
+ void t4_read_rss_pf_config(struct adapter *adapter, unsigned int index,
+ 			   u32 *valp)
+ {
+ 	t4_read_indirect(adapter, TP_PIO_ADDR_A, TP_PIO_DATA_A,
+ 			 valp, 1, TP_RSS_PF0_CONFIG_A + index);
+ }
+ 
+ /**
+  *	t4_read_rss_vf_config - read VF RSS Configuration Table
+  *	@adapter: the adapter
+  *	@index: the entry in the VF RSS table to read
+  *	@vfl: where to store the returned VFL
+  *	@vfh: where to store the returned VFH
+  *
+  *	Reads the VF RSS Configuration Table at the specified index and returns
+  *	the (VFL, VFH) values found there.
+  */
+ void t4_read_rss_vf_config(struct adapter *adapter, unsigned int index,
+ 			   u32 *vfl, u32 *vfh)
+ {
+ 	u32 vrt, mask, data;
+ 
+ 	if (CHELSIO_CHIP_VERSION(adapter->params.chip) <= CHELSIO_T5) {
+ 		mask = VFWRADDR_V(VFWRADDR_M);
+ 		data = VFWRADDR_V(index);
+ 	} else {
+ 		 mask =  T6_VFWRADDR_V(T6_VFWRADDR_M);
+ 		 data = T6_VFWRADDR_V(index);
+ 	}
+ 
+ 	/* Request that the index'th VF Table values be read into VFL/VFH.
+ 	 */
+ 	vrt = t4_read_reg(adapter, TP_RSS_CONFIG_VRT_A);
+ 	vrt &= ~(VFRDRG_F | VFWREN_F | KEYWREN_F | mask);
+ 	vrt |= data | VFRDEN_F;
+ 	t4_write_reg(adapter, TP_RSS_CONFIG_VRT_A, vrt);
+ 
+ 	/* Grab the VFL/VFH values ...
+ 	 */
+ 	t4_read_indirect(adapter, TP_PIO_ADDR_A, TP_PIO_DATA_A,
+ 			 vfl, 1, TP_RSS_VFL_CONFIG_A);
+ 	t4_read_indirect(adapter, TP_PIO_ADDR_A, TP_PIO_DATA_A,
+ 			 vfh, 1, TP_RSS_VFH_CONFIG_A);
+ }
+ 
+ /**
+  *	t4_read_rss_pf_map - read PF RSS Map
+  *	@adapter: the adapter
+  *
+  *	Reads the PF RSS Map register and returns its value.
+  */
+ u32 t4_read_rss_pf_map(struct adapter *adapter)
+ {
+ 	u32 pfmap;
+ 
+ 	t4_read_indirect(adapter, TP_PIO_ADDR_A, TP_PIO_DATA_A,
+ 			 &pfmap, 1, TP_RSS_PF_MAP_A);
+ 	return pfmap;
+ }
+ 
+ /**
+  *	t4_read_rss_pf_mask - read PF RSS Mask
+  *	@adapter: the adapter
+  *
+  *	Reads the PF RSS Mask register and returns its value.
+  */
+ u32 t4_read_rss_pf_mask(struct adapter *adapter)
+ {
+ 	u32 pfmask;
+ 
+ 	t4_read_indirect(adapter, TP_PIO_ADDR_A, TP_PIO_DATA_A,
+ 			 &pfmask, 1, TP_RSS_PF_MSK_A);
+ 	return pfmask;
+ }
+ 
+ /**
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
   *	t4_tp_get_tcp_stats - read TP's TCP MIB counters
   *	@adap: the adapter
   *	@v4: holds the TCP/IP counter values
@@@ -3294,43 -5203,71 +3639,108 @@@ int t4_alloc_mac_filt(struct adapter *a
  		      unsigned int viid, bool free, unsigned int naddr,
  		      const u8 **addr, u16 *idx, u64 *hash, bool sleep_ok)
  {
- 	int i, ret;
+ 	int offset, ret = 0;
  	struct fw_vi_mac_cmd c;
++<<<<<<< HEAD
 +	struct fw_vi_mac_exact *p;
 +	unsigned int max_naddr = is_t4(adap->chip) ?
 +				       NUM_MPS_CLS_SRAM_L_INSTANCES :
 +				       NUM_MPS_T5_CLS_SRAM_L_INSTANCES;
++=======
+ 	unsigned int nfilters = 0;
+ 	unsigned int max_naddr = adap->params.arch.mps_tcam_size;
+ 	unsigned int rem = naddr;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
- 	if (naddr > 7)
+ 	if (naddr > max_naddr)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	memset(&c, 0, sizeof(c));
 +	c.op_to_viid = htonl(FW_CMD_OP(FW_VI_MAC_CMD) | FW_CMD_REQUEST |
 +			     FW_CMD_WRITE | (free ? FW_CMD_EXEC : 0) |
 +			     FW_VI_MAC_CMD_VIID(viid));
 +	c.freemacs_to_len16 = htonl(FW_VI_MAC_CMD_FREEMACS(free) |
 +				    FW_CMD_LEN16((naddr + 2) / 2));
 +
 +	for (i = 0, p = c.u.exact; i < naddr; i++, p++) {
 +		p->valid_to_idx = htons(FW_VI_MAC_CMD_VALID |
 +				      FW_VI_MAC_CMD_IDX(FW_VI_MAC_ADD_MAC));
 +		memcpy(p->macaddr, addr[i], sizeof(p->macaddr));
 +	}
 +
 +	ret = t4_wr_mbox_meat(adap, mbox, &c, sizeof(c), &c, sleep_ok);
 +	if (ret)
 +		return ret;
 +
 +	for (i = 0, p = c.u.exact; i < naddr; i++, p++) {
 +		u16 index = FW_VI_MAC_CMD_IDX_GET(ntohs(p->valid_to_idx));
 +
 +		if (idx)
 +			idx[i] = index >= max_naddr ? 0xffff : index;
 +		if (index < max_naddr)
 +			ret++;
 +		else if (hash)
 +			*hash |= (1ULL << hash_mac_addr(addr[i]));
 +	}
++=======
+ 	for (offset = 0; offset < naddr ; /**/) {
+ 		unsigned int fw_naddr = (rem < ARRAY_SIZE(c.u.exact) ?
+ 					 rem : ARRAY_SIZE(c.u.exact));
+ 		size_t len16 = DIV_ROUND_UP(offsetof(struct fw_vi_mac_cmd,
+ 						     u.exact[fw_naddr]), 16);
+ 		struct fw_vi_mac_exact *p;
+ 		int i;
+ 
+ 		memset(&c, 0, sizeof(c));
+ 		c.op_to_viid = cpu_to_be32(FW_CMD_OP_V(FW_VI_MAC_CMD) |
+ 					   FW_CMD_REQUEST_F |
+ 					   FW_CMD_WRITE_F |
+ 					   FW_CMD_EXEC_V(free) |
+ 					   FW_VI_MAC_CMD_VIID_V(viid));
+ 		c.freemacs_to_len16 =
+ 			cpu_to_be32(FW_VI_MAC_CMD_FREEMACS_V(free) |
+ 				    FW_CMD_LEN16_V(len16));
+ 
+ 		for (i = 0, p = c.u.exact; i < fw_naddr; i++, p++) {
+ 			p->valid_to_idx =
+ 				cpu_to_be16(FW_VI_MAC_CMD_VALID_F |
+ 					    FW_VI_MAC_CMD_IDX_V(
+ 						    FW_VI_MAC_ADD_MAC));
+ 			memcpy(p->macaddr, addr[offset + i],
+ 			       sizeof(p->macaddr));
+ 		}
+ 
+ 		/* It's okay if we run out of space in our MAC address arena.
+ 		 * Some of the addresses we submit may get stored so we need
+ 		 * to run through the reply to see what the results were ...
+ 		 */
+ 		ret = t4_wr_mbox_meat(adap, mbox, &c, sizeof(c), &c, sleep_ok);
+ 		if (ret && ret != -FW_ENOMEM)
+ 			break;
+ 
+ 		for (i = 0, p = c.u.exact; i < fw_naddr; i++, p++) {
+ 			u16 index = FW_VI_MAC_CMD_IDX_G(
+ 					be16_to_cpu(p->valid_to_idx));
+ 
+ 			if (idx)
+ 				idx[offset + i] = (index >= max_naddr ?
+ 						   0xffff : index);
+ 			if (index < max_naddr)
+ 				nfilters++;
+ 			else if (hash)
+ 				*hash |= (1ULL <<
+ 					  hash_mac_addr(addr[offset + i]));
+ 		}
+ 
+ 		free = false;
+ 		offset += fw_naddr;
+ 		rem -= fw_naddr;
+ 	}
+ 
+ 	if (ret == 0 || ret == -FW_ENOMEM)
+ 		ret = nfilters;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  	return ret;
  }
  
@@@ -3359,9 -5296,7 +3769,13 @@@ int t4_change_mac(struct adapter *adap
  	int ret, mode;
  	struct fw_vi_mac_cmd c;
  	struct fw_vi_mac_exact *p = c.u.exact;
++<<<<<<< HEAD
 +	unsigned int max_mac_addr = is_t4(adap->chip) ?
 +				    NUM_MPS_CLS_SRAM_L_INSTANCES :
 +				    NUM_MPS_T5_CLS_SRAM_L_INSTANCES;
++=======
+ 	unsigned int max_mac_addr = adap->params.arch.mps_tcam_size;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  	if (idx < 0)                             /* new allocation */
  		idx = persist ? FW_VI_MAC_ADD_PERSIST_MAC : FW_VI_MAC_ADD_MAC;
@@@ -3708,14 -5701,34 +4122,42 @@@ int t4_prep_adapter(struct adapter *ada
  	 */
  	pci_read_config_word(adapter->pdev, PCI_DEVICE_ID, &device_id);
  	ver = device_id >> 12;
 -	adapter->params.chip = 0;
  	switch (ver) {
  	case CHELSIO_T4:
++<<<<<<< HEAD
 +		adapter->chip = CHELSIO_CHIP_CODE(CHELSIO_T4,
 +						  adapter->params.rev);
 +		break;
 +	case CHELSIO_T5:
 +		adapter->chip = CHELSIO_CHIP_CODE(CHELSIO_T5,
 +						  adapter->params.rev);
++=======
+ 		adapter->params.chip |= CHELSIO_CHIP_CODE(CHELSIO_T4, pl_rev);
+ 		adapter->params.arch.sge_fl_db = DBPRIO_F;
+ 		adapter->params.arch.mps_tcam_size =
+ 				 NUM_MPS_CLS_SRAM_L_INSTANCES;
+ 		adapter->params.arch.mps_rplc_size = 128;
+ 		adapter->params.arch.nchan = NCHAN;
+ 		adapter->params.arch.vfcount = 128;
+ 		break;
+ 	case CHELSIO_T5:
+ 		adapter->params.chip |= CHELSIO_CHIP_CODE(CHELSIO_T5, pl_rev);
+ 		adapter->params.arch.sge_fl_db = DBPRIO_F | DBTYPE_F;
+ 		adapter->params.arch.mps_tcam_size =
+ 				 NUM_MPS_T5_CLS_SRAM_L_INSTANCES;
+ 		adapter->params.arch.mps_rplc_size = 128;
+ 		adapter->params.arch.nchan = NCHAN;
+ 		adapter->params.arch.vfcount = 128;
+ 		break;
+ 	case CHELSIO_T6:
+ 		adapter->params.chip |= CHELSIO_CHIP_CODE(CHELSIO_T6, pl_rev);
+ 		adapter->params.arch.sge_fl_db = 0;
+ 		adapter->params.arch.mps_tcam_size =
+ 				 NUM_MPS_T5_CLS_SRAM_L_INSTANCES;
+ 		adapter->params.arch.mps_rplc_size = 256;
+ 		adapter->params.arch.nchan = 2;
+ 		adapter->params.arch.vfcount = 256;
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  		break;
  	default:
  		dev_err(adapter->pdev_dev, "Device %d is not supported\n",
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
index 01d484441200,132cb8fc0bf7..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
@@@ -487,15 -646,69 +487,79 @@@ struct cpl_tx_pkt 
  
  #define cpl_tx_pkt_xt cpl_tx_pkt
  
++<<<<<<< HEAD
++=======
+ /* cpl_tx_pkt_core.ctrl0 fields */
+ #define TXPKT_VF_S    0
+ #define TXPKT_VF_V(x) ((x) << TXPKT_VF_S)
+ 
+ #define TXPKT_PF_S    8
+ #define TXPKT_PF_V(x) ((x) << TXPKT_PF_S)
+ 
+ #define TXPKT_VF_VLD_S    11
+ #define TXPKT_VF_VLD_V(x) ((x) << TXPKT_VF_VLD_S)
+ #define TXPKT_VF_VLD_F    TXPKT_VF_VLD_V(1U)
+ 
+ #define TXPKT_OVLAN_IDX_S    12
+ #define TXPKT_OVLAN_IDX_V(x) ((x) << TXPKT_OVLAN_IDX_S)
+ 
+ #define TXPKT_INTF_S    16
+ #define TXPKT_INTF_V(x) ((x) << TXPKT_INTF_S)
+ 
+ #define TXPKT_INS_OVLAN_S    21
+ #define TXPKT_INS_OVLAN_V(x) ((x) << TXPKT_INS_OVLAN_S)
+ #define TXPKT_INS_OVLAN_F    TXPKT_INS_OVLAN_V(1U)
+ 
+ #define TXPKT_OPCODE_S    24
+ #define TXPKT_OPCODE_V(x) ((x) << TXPKT_OPCODE_S)
+ 
+ /* cpl_tx_pkt_core.ctrl1 fields */
+ #define TXPKT_CSUM_END_S    12
+ #define TXPKT_CSUM_END_V(x) ((x) << TXPKT_CSUM_END_S)
+ 
+ #define TXPKT_CSUM_START_S    20
+ #define TXPKT_CSUM_START_V(x) ((x) << TXPKT_CSUM_START_S)
+ 
+ #define TXPKT_IPHDR_LEN_S    20
+ #define TXPKT_IPHDR_LEN_V(x) ((__u64)(x) << TXPKT_IPHDR_LEN_S)
+ 
+ #define TXPKT_CSUM_LOC_S    30
+ #define TXPKT_CSUM_LOC_V(x) ((__u64)(x) << TXPKT_CSUM_LOC_S)
+ 
+ #define TXPKT_ETHHDR_LEN_S    34
+ #define TXPKT_ETHHDR_LEN_V(x) ((__u64)(x) << TXPKT_ETHHDR_LEN_S)
+ 
+ #define T6_TXPKT_ETHHDR_LEN_S    32
+ #define T6_TXPKT_ETHHDR_LEN_V(x) ((__u64)(x) << T6_TXPKT_ETHHDR_LEN_S)
+ 
+ #define TXPKT_CSUM_TYPE_S    40
+ #define TXPKT_CSUM_TYPE_V(x) ((__u64)(x) << TXPKT_CSUM_TYPE_S)
+ 
+ #define TXPKT_VLAN_S    44
+ #define TXPKT_VLAN_V(x) ((__u64)(x) << TXPKT_VLAN_S)
+ 
+ #define TXPKT_VLAN_VLD_S    60
+ #define TXPKT_VLAN_VLD_V(x) ((__u64)(x) << TXPKT_VLAN_VLD_S)
+ #define TXPKT_VLAN_VLD_F    TXPKT_VLAN_VLD_V(1ULL)
+ 
+ #define TXPKT_IPCSUM_DIS_S    62
+ #define TXPKT_IPCSUM_DIS_V(x) ((__u64)(x) << TXPKT_IPCSUM_DIS_S)
+ #define TXPKT_IPCSUM_DIS_F    TXPKT_IPCSUM_DIS_V(1ULL)
+ 
+ #define TXPKT_L4CSUM_DIS_S    63
+ #define TXPKT_L4CSUM_DIS_V(x) ((__u64)(x) << TXPKT_L4CSUM_DIS_S)
+ #define TXPKT_L4CSUM_DIS_F    TXPKT_L4CSUM_DIS_V(1ULL)
+ 
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  struct cpl_tx_pkt_lso_core {
  	__be32 lso_ctrl;
 +#define LSO_TCPHDR_LEN(x) ((x) << 0)
 +#define LSO_IPHDR_LEN(x)  ((x) << 4)
 +#define LSO_ETHHDR_LEN(x) ((x) << 16)
 +#define LSO_IPV6(x)       ((x) << 20)
 +#define LSO_LAST_SLICE    (1 << 22)
 +#define LSO_FIRST_SLICE   (1 << 23)
 +#define LSO_OPCODE(x)     ((x) << 24)
  	__be16 ipid_ofst;
  	__be16 mss;
  	__be32 seqno_offset;
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_regs.h
index 333e7e825bce,c7fc3d3068f9..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_regs.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_regs.h
@@@ -63,675 -63,1459 +63,2131 @@@
  #define MC_BIST_STATUS_REG(reg_addr, idx) ((reg_addr) + (idx) * 4)
  #define EDC_BIST_STATUS_REG(reg_addr, idx) ((reg_addr) + (idx) * 4)
  
++<<<<<<< HEAD
 +#define SGE_PF_KDOORBELL 0x0
 +#define  QID_MASK    0xffff8000U
 +#define  QID_SHIFT   15
 +#define  QID(x)      ((x) << QID_SHIFT)
 +#define  DBPRIO(x)   ((x) << 14)
 +#define  DBTYPE(x)   ((x) << 13)
 +#define  PIDX_MASK   0x00003fffU
 +#define  PIDX_SHIFT  0
 +#define  PIDX(x)     ((x) << PIDX_SHIFT)
 +#define  S_PIDX_T5   0
 +#define  M_PIDX_T5   0x1fffU
 +#define  PIDX_T5(x)  (((x) >> S_PIDX_T5) & M_PIDX_T5)
 +
 +
 +#define SGE_PF_GTS 0x4
 +#define  INGRESSQID_MASK   0xffff0000U
 +#define  INGRESSQID_SHIFT  16
 +#define  INGRESSQID(x)     ((x) << INGRESSQID_SHIFT)
 +#define  TIMERREG_MASK     0x0000e000U
 +#define  TIMERREG_SHIFT    13
 +#define  TIMERREG(x)       ((x) << TIMERREG_SHIFT)
 +#define  SEINTARM_MASK     0x00001000U
 +#define  SEINTARM_SHIFT    12
 +#define  SEINTARM(x)       ((x) << SEINTARM_SHIFT)
 +#define  CIDXINC_MASK      0x00000fffU
 +#define  CIDXINC_SHIFT     0
 +#define  CIDXINC(x)        ((x) << CIDXINC_SHIFT)
 +
 +#define X_RXPKTCPLMODE_SPLIT     1
 +#define X_INGPADBOUNDARY_SHIFT 5
 +
 +#define SGE_CONTROL 0x1008
 +#define  DCASYSTYPE             0x00080000U
 +#define  RXPKTCPLMODE_MASK      0x00040000U
 +#define  RXPKTCPLMODE_SHIFT     18
 +#define  RXPKTCPLMODE(x)        ((x) << RXPKTCPLMODE_SHIFT)
 +#define  EGRSTATUSPAGESIZE_MASK  0x00020000U
 +#define  EGRSTATUSPAGESIZE_SHIFT 17
 +#define  EGRSTATUSPAGESIZE(x)    ((x) << EGRSTATUSPAGESIZE_SHIFT)
 +#define  PKTSHIFT_MASK          0x00001c00U
 +#define  PKTSHIFT_SHIFT         10
 +#define  PKTSHIFT(x)            ((x) << PKTSHIFT_SHIFT)
 +#define  PKTSHIFT_GET(x)	(((x) & PKTSHIFT_MASK) >> PKTSHIFT_SHIFT)
 +#define  INGPCIEBOUNDARY_MASK   0x00000380U
 +#define  INGPCIEBOUNDARY_SHIFT  7
 +#define  INGPCIEBOUNDARY(x)     ((x) << INGPCIEBOUNDARY_SHIFT)
 +#define  INGPADBOUNDARY_MASK    0x00000070U
 +#define  INGPADBOUNDARY_SHIFT   4
 +#define  INGPADBOUNDARY(x)      ((x) << INGPADBOUNDARY_SHIFT)
 +#define  INGPADBOUNDARY_GET(x)	(((x) & INGPADBOUNDARY_MASK) \
 +				 >> INGPADBOUNDARY_SHIFT)
 +#define  EGRPCIEBOUNDARY_MASK   0x0000000eU
 +#define  EGRPCIEBOUNDARY_SHIFT  1
 +#define  EGRPCIEBOUNDARY(x)     ((x) << EGRPCIEBOUNDARY_SHIFT)
 +#define  GLOBALENABLE           0x00000001U
 +
 +#define SGE_HOST_PAGE_SIZE 0x100c
 +
 +#define  HOSTPAGESIZEPF7_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF7_SHIFT  28
 +#define  HOSTPAGESIZEPF7(x)     ((x) << HOSTPAGESIZEPF7_SHIFT)
 +
 +#define  HOSTPAGESIZEPF6_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF6_SHIFT  24
 +#define  HOSTPAGESIZEPF6(x)     ((x) << HOSTPAGESIZEPF6_SHIFT)
 +
 +#define  HOSTPAGESIZEPF5_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF5_SHIFT  20
 +#define  HOSTPAGESIZEPF5(x)     ((x) << HOSTPAGESIZEPF5_SHIFT)
 +
 +#define  HOSTPAGESIZEPF4_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF4_SHIFT  16
 +#define  HOSTPAGESIZEPF4(x)     ((x) << HOSTPAGESIZEPF4_SHIFT)
 +
 +#define  HOSTPAGESIZEPF3_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF3_SHIFT  12
 +#define  HOSTPAGESIZEPF3(x)     ((x) << HOSTPAGESIZEPF3_SHIFT)
 +
 +#define  HOSTPAGESIZEPF2_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF2_SHIFT  8
 +#define  HOSTPAGESIZEPF2(x)     ((x) << HOSTPAGESIZEPF2_SHIFT)
 +
 +#define  HOSTPAGESIZEPF1_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF1_SHIFT  4
 +#define  HOSTPAGESIZEPF1(x)     ((x) << HOSTPAGESIZEPF1_SHIFT)
 +
 +#define  HOSTPAGESIZEPF0_MASK   0x0000000fU
 +#define  HOSTPAGESIZEPF0_SHIFT  0
 +#define  HOSTPAGESIZEPF0(x)     ((x) << HOSTPAGESIZEPF0_SHIFT)
 +
 +#define SGE_EGRESS_QUEUES_PER_PAGE_PF 0x1010
 +#define  QUEUESPERPAGEPF0_MASK   0x0000000fU
 +#define  QUEUESPERPAGEPF0_GET(x) ((x) & QUEUESPERPAGEPF0_MASK)
 +
 +#define QUEUESPERPAGEPF1    4
 +
 +#define SGE_INT_CAUSE1 0x1024
 +#define SGE_INT_CAUSE2 0x1030
 +#define SGE_INT_CAUSE3 0x103c
 +#define  ERR_FLM_DBP               0x80000000U
 +#define  ERR_FLM_IDMA1             0x40000000U
 +#define  ERR_FLM_IDMA0             0x20000000U
 +#define  ERR_FLM_HINT              0x10000000U
 +#define  ERR_PCIE_ERROR3           0x08000000U
 +#define  ERR_PCIE_ERROR2           0x04000000U
 +#define  ERR_PCIE_ERROR1           0x02000000U
 +#define  ERR_PCIE_ERROR0           0x01000000U
 +#define  ERR_TIMER_ABOVE_MAX_QID   0x00800000U
 +#define  ERR_CPL_EXCEED_IQE_SIZE   0x00400000U
 +#define  ERR_INVALID_CIDX_INC      0x00200000U
 +#define  ERR_ITP_TIME_PAUSED       0x00100000U
 +#define  ERR_CPL_OPCODE_0          0x00080000U
 +#define  ERR_DROPPED_DB            0x00040000U
 +#define  ERR_DATA_CPL_ON_HIGH_QID1 0x00020000U
 +#define  ERR_DATA_CPL_ON_HIGH_QID0 0x00010000U
 +#define  ERR_BAD_DB_PIDX3          0x00008000U
 +#define  ERR_BAD_DB_PIDX2          0x00004000U
 +#define  ERR_BAD_DB_PIDX1          0x00002000U
 +#define  ERR_BAD_DB_PIDX0          0x00001000U
 +#define  ERR_ING_PCIE_CHAN         0x00000800U
 +#define  ERR_ING_CTXT_PRIO         0x00000400U
 +#define  ERR_EGR_CTXT_PRIO         0x00000200U
 +#define  DBFIFO_HP_INT             0x00000100U
 +#define  DBFIFO_LP_INT             0x00000080U
 +#define  REG_ADDRESS_ERR           0x00000040U
 +#define  INGRESS_SIZE_ERR          0x00000020U
 +#define  EGRESS_SIZE_ERR           0x00000010U
 +#define  ERR_INV_CTXT3             0x00000008U
 +#define  ERR_INV_CTXT2             0x00000004U
 +#define  ERR_INV_CTXT1             0x00000002U
 +#define  ERR_INV_CTXT0             0x00000001U
 +
 +#define SGE_INT_ENABLE3 0x1040
 +#define SGE_FL_BUFFER_SIZE0 0x1044
 +#define SGE_FL_BUFFER_SIZE1 0x1048
 +#define SGE_FL_BUFFER_SIZE2 0x104c
 +#define SGE_FL_BUFFER_SIZE3 0x1050
 +#define SGE_FL_BUFFER_SIZE4 0x1054
 +#define SGE_FL_BUFFER_SIZE5 0x1058
 +#define SGE_FL_BUFFER_SIZE6 0x105c
 +#define SGE_FL_BUFFER_SIZE7 0x1060
 +#define SGE_FL_BUFFER_SIZE8 0x1064
 +
 +#define SGE_INGRESS_RX_THRESHOLD 0x10a0
 +#define  THRESHOLD_0_MASK   0x3f000000U
 +#define  THRESHOLD_0_SHIFT  24
 +#define  THRESHOLD_0(x)     ((x) << THRESHOLD_0_SHIFT)
 +#define  THRESHOLD_0_GET(x) (((x) & THRESHOLD_0_MASK) >> THRESHOLD_0_SHIFT)
 +#define  THRESHOLD_1_MASK   0x003f0000U
 +#define  THRESHOLD_1_SHIFT  16
 +#define  THRESHOLD_1(x)     ((x) << THRESHOLD_1_SHIFT)
 +#define  THRESHOLD_1_GET(x) (((x) & THRESHOLD_1_MASK) >> THRESHOLD_1_SHIFT)
 +#define  THRESHOLD_2_MASK   0x00003f00U
 +#define  THRESHOLD_2_SHIFT  8
 +#define  THRESHOLD_2(x)     ((x) << THRESHOLD_2_SHIFT)
 +#define  THRESHOLD_2_GET(x) (((x) & THRESHOLD_2_MASK) >> THRESHOLD_2_SHIFT)
 +#define  THRESHOLD_3_MASK   0x0000003fU
 +#define  THRESHOLD_3_SHIFT  0
 +#define  THRESHOLD_3(x)     ((x) << THRESHOLD_3_SHIFT)
 +#define  THRESHOLD_3_GET(x) (((x) & THRESHOLD_3_MASK) >> THRESHOLD_3_SHIFT)
 +
 +#define SGE_CONM_CTRL 0x1094
 +#define  EGRTHRESHOLD_MASK   0x00003f00U
 +#define  EGRTHRESHOLDshift   8
 +#define  EGRTHRESHOLD(x)     ((x) << EGRTHRESHOLDshift)
 +#define  EGRTHRESHOLD_GET(x) (((x) & EGRTHRESHOLD_MASK) >> EGRTHRESHOLDshift)
 +
 +#define SGE_DBFIFO_STATUS 0x10a4
 +#define  HP_INT_THRESH_SHIFT 28
 +#define  HP_INT_THRESH_MASK  0xfU
 +#define  HP_INT_THRESH(x)    ((x) << HP_INT_THRESH_SHIFT)
 +#define  LP_INT_THRESH_SHIFT 12
 +#define  LP_INT_THRESH_MASK  0xfU
 +#define  LP_INT_THRESH(x)    ((x) << LP_INT_THRESH_SHIFT)
 +
 +#define SGE_DOORBELL_CONTROL 0x10a8
 +#define  ENABLE_DROP        (1 << 13)
 +
 +#define S_NOCOALESCE    26
 +#define V_NOCOALESCE(x) ((x) << S_NOCOALESCE)
 +#define F_NOCOALESCE    V_NOCOALESCE(1U)
 +
 +#define SGE_TIMER_VALUE_0_AND_1 0x10b8
 +#define  TIMERVALUE0_MASK   0xffff0000U
 +#define  TIMERVALUE0_SHIFT  16
 +#define  TIMERVALUE0(x)     ((x) << TIMERVALUE0_SHIFT)
 +#define  TIMERVALUE0_GET(x) (((x) & TIMERVALUE0_MASK) >> TIMERVALUE0_SHIFT)
 +#define  TIMERVALUE1_MASK   0x0000ffffU
 +#define  TIMERVALUE1_SHIFT  0
 +#define  TIMERVALUE1(x)     ((x) << TIMERVALUE1_SHIFT)
 +#define  TIMERVALUE1_GET(x) (((x) & TIMERVALUE1_MASK) >> TIMERVALUE1_SHIFT)
 +
 +#define SGE_TIMER_VALUE_2_AND_3 0x10bc
 +#define  TIMERVALUE2_MASK   0xffff0000U
 +#define  TIMERVALUE2_SHIFT  16
 +#define  TIMERVALUE2(x)     ((x) << TIMERVALUE2_SHIFT)
 +#define  TIMERVALUE2_GET(x) (((x) & TIMERVALUE2_MASK) >> TIMERVALUE2_SHIFT)
 +#define  TIMERVALUE3_MASK   0x0000ffffU
 +#define  TIMERVALUE3_SHIFT  0
 +#define  TIMERVALUE3(x)     ((x) << TIMERVALUE3_SHIFT)
 +#define  TIMERVALUE3_GET(x) (((x) & TIMERVALUE3_MASK) >> TIMERVALUE3_SHIFT)
 +
 +#define SGE_TIMER_VALUE_4_AND_5 0x10c0
 +#define  TIMERVALUE4_MASK   0xffff0000U
 +#define  TIMERVALUE4_SHIFT  16
 +#define  TIMERVALUE4(x)     ((x) << TIMERVALUE4_SHIFT)
 +#define  TIMERVALUE4_GET(x) (((x) & TIMERVALUE4_MASK) >> TIMERVALUE4_SHIFT)
 +#define  TIMERVALUE5_MASK   0x0000ffffU
 +#define  TIMERVALUE5_SHIFT  0
 +#define  TIMERVALUE5(x)     ((x) << TIMERVALUE5_SHIFT)
 +#define  TIMERVALUE5_GET(x) (((x) & TIMERVALUE5_MASK) >> TIMERVALUE5_SHIFT)
 +
 +#define SGE_DEBUG_INDEX 0x10cc
 +#define SGE_DEBUG_DATA_HIGH 0x10d0
 +#define SGE_DEBUG_DATA_LOW 0x10d4
 +#define SGE_INGRESS_QUEUES_PER_PAGE_PF 0x10f4
 +
 +#define S_HP_INT_THRESH    28
 +#define M_HP_INT_THRESH 0xfU
 +#define V_HP_INT_THRESH(x) ((x) << S_HP_INT_THRESH)
 +#define S_LP_INT_THRESH_T5    18
 +#define V_LP_INT_THRESH_T5(x) ((x) << S_LP_INT_THRESH_T5)
 +#define M_LP_COUNT_T5    0x3ffffU
 +#define G_LP_COUNT_T5(x) (((x) >> S_LP_COUNT) & M_LP_COUNT_T5)
 +#define M_HP_COUNT 0x7ffU
 +#define S_HP_COUNT 16
 +#define G_HP_COUNT(x) (((x) >> S_HP_COUNT) & M_HP_COUNT)
 +#define S_LP_INT_THRESH    12
 +#define M_LP_INT_THRESH 0xfU
 +#define M_LP_INT_THRESH_T5    0xfffU
 +#define V_LP_INT_THRESH(x) ((x) << S_LP_INT_THRESH)
 +#define M_LP_COUNT 0x7ffU
 +#define S_LP_COUNT 0
 +#define G_LP_COUNT(x) (((x) >> S_LP_COUNT) & M_LP_COUNT)
 +#define A_SGE_DBFIFO_STATUS 0x10a4
 +
 +#define SGE_STAT_TOTAL 0x10e4
 +#define SGE_STAT_MATCH 0x10e8
 +
 +#define SGE_STAT_CFG   0x10ec
 +#define S_STATSOURCE_T5    9
 +#define STATSOURCE_T5(x) ((x) << S_STATSOURCE_T5)
 +
 +#define SGE_DBFIFO_STATUS2 0x1118
 +#define M_HP_COUNT_T5    0x3ffU
 +#define G_HP_COUNT_T5(x) ((x)  & M_HP_COUNT_T5)
 +#define S_HP_INT_THRESH_T5    10
 +#define M_HP_INT_THRESH_T5    0xfU
 +#define V_HP_INT_THRESH_T5(x) ((x) << S_HP_INT_THRESH_T5)
 +
 +#define S_ENABLE_DROP    13
 +#define V_ENABLE_DROP(x) ((x) << S_ENABLE_DROP)
 +#define F_ENABLE_DROP    V_ENABLE_DROP(1U)
 +#define S_DROPPED_DB 0
 +#define V_DROPPED_DB(x) ((x) << S_DROPPED_DB)
 +#define F_DROPPED_DB V_DROPPED_DB(1U)
 +#define A_SGE_DOORBELL_CONTROL 0x10a8
 +
 +#define A_SGE_CTXT_CMD 0x11fc
 +#define A_SGE_DBQ_CTXT_BADDR 0x1084
 +
 +#define PCIE_PF_CFG 0x40
 +#define  AIVEC(x)	((x) << 4)
 +#define  AIVEC_MASK	0x3ffU
 +
 +#define PCIE_PF_CLI 0x44
 +#define PCIE_INT_CAUSE 0x3004
 +#define  UNXSPLCPLERR  0x20000000U
 +#define  PCIEPINT      0x10000000U
 +#define  PCIESINT      0x08000000U
 +#define  RPLPERR       0x04000000U
 +#define  RXWRPERR      0x02000000U
 +#define  RXCPLPERR     0x01000000U
 +#define  PIOTAGPERR    0x00800000U
 +#define  MATAGPERR     0x00400000U
 +#define  INTXCLRPERR   0x00200000U
 +#define  FIDPERR       0x00100000U
 +#define  CFGSNPPERR    0x00080000U
 +#define  HRSPPERR      0x00040000U
 +#define  HREQPERR      0x00020000U
 +#define  HCNTPERR      0x00010000U
 +#define  DRSPPERR      0x00008000U
 +#define  DREQPERR      0x00004000U
 +#define  DCNTPERR      0x00002000U
 +#define  CRSPPERR      0x00001000U
 +#define  CREQPERR      0x00000800U
 +#define  CCNTPERR      0x00000400U
 +#define  TARTAGPERR    0x00000200U
 +#define  PIOREQPERR    0x00000100U
 +#define  PIOCPLPERR    0x00000080U
 +#define  MSIXDIPERR    0x00000040U
 +#define  MSIXDATAPERR  0x00000020U
 +#define  MSIXADDRHPERR 0x00000010U
 +#define  MSIXADDRLPERR 0x00000008U
 +#define  MSIDATAPERR   0x00000004U
 +#define  MSIADDRHPERR  0x00000002U
 +#define  MSIADDRLPERR  0x00000001U
 +
 +#define  READRSPERR      0x20000000U
 +#define  TRGT1GRPPERR    0x10000000U
 +#define  IPSOTPERR       0x08000000U
 +#define  IPRXDATAGRPPERR 0x02000000U
 +#define  IPRXHDRGRPPERR  0x01000000U
 +#define  MAGRPPERR       0x00400000U
 +#define  VFIDPERR        0x00200000U
 +#define  HREQWRPERR      0x00010000U
 +#define  DREQWRPERR      0x00002000U
 +#define  MSTTAGQPERR     0x00000400U
 +#define  PIOREQGRPPERR   0x00000100U
 +#define  PIOCPLGRPPERR   0x00000080U
 +#define  MSIXSTIPERR     0x00000004U
 +#define  MSTTIMEOUTPERR  0x00000002U
 +#define  MSTGRPPERR      0x00000001U
 +
 +#define PCIE_NONFAT_ERR 0x3010
 +#define PCIE_MEM_ACCESS_BASE_WIN 0x3068
 +#define S_PCIEOFST       10
 +#define M_PCIEOFST       0x3fffffU
 +#define GET_PCIEOFST(x)  (((x) >> S_PCIEOFST) & M_PCIEOFST)
 +#define  PCIEOFST_MASK   0xfffffc00U
 +#define  BIR_MASK        0x00000300U
 +#define  BIR_SHIFT       8
 +#define  BIR(x)          ((x) << BIR_SHIFT)
 +#define  WINDOW_MASK     0x000000ffU
 +#define  WINDOW_SHIFT    0
 +#define  WINDOW(x)       ((x) << WINDOW_SHIFT)
 +#define PCIE_MEM_ACCESS_OFFSET 0x306c
 +
 +#define S_PFNUM    0
 +#define V_PFNUM(x) ((x) << S_PFNUM)
 +
 +#define PCIE_FW 0x30b8
 +#define  PCIE_FW_ERR		0x80000000U
 +#define  PCIE_FW_INIT		0x40000000U
 +#define  PCIE_FW_HALT		0x20000000U
 +#define  PCIE_FW_MASTER_VLD	0x00008000U
 +#define  PCIE_FW_MASTER(x)	((x) << 12)
 +#define  PCIE_FW_MASTER_MASK	0x7
 +#define  PCIE_FW_MASTER_GET(x)	(((x) >> 12) & PCIE_FW_MASTER_MASK)
 +
 +#define PCIE_CORE_UTL_SYSTEM_BUS_AGENT_STATUS 0x5908
 +#define  RNPP 0x80000000U
 +#define  RPCP 0x20000000U
 +#define  RCIP 0x08000000U
 +#define  RCCP 0x04000000U
 +#define  RFTP 0x00800000U
 +#define  PTRP 0x00100000U
 +
 +#define PCIE_CORE_UTL_PCI_EXPRESS_PORT_STATUS 0x59a4
 +#define  TPCP 0x40000000U
 +#define  TNPP 0x20000000U
 +#define  TFTP 0x10000000U
 +#define  TCAP 0x08000000U
 +#define  TCIP 0x04000000U
 +#define  RCAP 0x02000000U
 +#define  PLUP 0x00800000U
 +#define  PLDN 0x00400000U
 +#define  OTDD 0x00200000U
 +#define  GTRP 0x00100000U
 +#define  RDPE 0x00040000U
 +#define  TDCE 0x00020000U
 +#define  TDUE 0x00010000U
 +
 +#define MC_INT_CAUSE 0x7518
 +#define  ECC_UE_INT_CAUSE 0x00000004U
 +#define  ECC_CE_INT_CAUSE 0x00000002U
 +#define  PERR_INT_CAUSE   0x00000001U
 +
 +#define MC_ECC_STATUS 0x751c
 +#define  ECC_CECNT_MASK   0xffff0000U
 +#define  ECC_CECNT_SHIFT  16
 +#define  ECC_CECNT(x)     ((x) << ECC_CECNT_SHIFT)
 +#define  ECC_CECNT_GET(x) (((x) & ECC_CECNT_MASK) >> ECC_CECNT_SHIFT)
 +#define  ECC_UECNT_MASK   0x0000ffffU
 +#define  ECC_UECNT_SHIFT  0
 +#define  ECC_UECNT(x)     ((x) << ECC_UECNT_SHIFT)
 +#define  ECC_UECNT_GET(x) (((x) & ECC_UECNT_MASK) >> ECC_UECNT_SHIFT)
 +
 +#define MC_BIST_CMD 0x7600
 +#define  START_BIST          0x80000000U
 +#define  BIST_CMD_GAP_MASK   0x0000ff00U
 +#define  BIST_CMD_GAP_SHIFT  8
 +#define  BIST_CMD_GAP(x)     ((x) << BIST_CMD_GAP_SHIFT)
 +#define  BIST_OPCODE_MASK    0x00000003U
 +#define  BIST_OPCODE_SHIFT   0
 +#define  BIST_OPCODE(x)      ((x) << BIST_OPCODE_SHIFT)
 +
 +#define MC_BIST_CMD_ADDR 0x7604
 +#define MC_BIST_CMD_LEN 0x7608
 +#define MC_BIST_DATA_PATTERN 0x760c
 +#define  BIST_DATA_TYPE_MASK   0x0000000fU
 +#define  BIST_DATA_TYPE_SHIFT  0
 +#define  BIST_DATA_TYPE(x)     ((x) << BIST_DATA_TYPE_SHIFT)
 +
 +#define MC_BIST_STATUS_RDATA 0x7688
 +
 +#define MA_EDRAM0_BAR 0x77c0
 +#define MA_EDRAM1_BAR 0x77c4
 +#define EDRAM_SIZE_MASK   0xfffU
 +#define EDRAM_SIZE_GET(x) ((x) & EDRAM_SIZE_MASK)
 +
 +#define MA_EXT_MEMORY_BAR 0x77c8
 +#define  EXT_MEM_SIZE_MASK   0x00000fffU
 +#define  EXT_MEM_SIZE_SHIFT  0
 +#define  EXT_MEM_SIZE_GET(x) (((x) & EXT_MEM_SIZE_MASK) >> EXT_MEM_SIZE_SHIFT)
 +
 +#define MA_TARGET_MEM_ENABLE 0x77d8
 +#define  EXT_MEM1_ENABLE 0x00000010U
 +#define  EXT_MEM_ENABLE 0x00000004U
 +#define  EDRAM1_ENABLE  0x00000002U
 +#define  EDRAM0_ENABLE  0x00000001U
 +
 +#define MA_INT_CAUSE 0x77e0
 +#define  MEM_PERR_INT_CAUSE 0x00000002U
 +#define  MEM_WRAP_INT_CAUSE 0x00000001U
 +
 +#define MA_INT_WRAP_STATUS 0x77e4
 +#define  MEM_WRAP_ADDRESS_MASK   0xfffffff0U
 +#define  MEM_WRAP_ADDRESS_SHIFT  4
 +#define  MEM_WRAP_ADDRESS_GET(x) (((x) & MEM_WRAP_ADDRESS_MASK) >> MEM_WRAP_ADDRESS_SHIFT)
 +#define  MEM_WRAP_CLIENT_NUM_MASK   0x0000000fU
 +#define  MEM_WRAP_CLIENT_NUM_SHIFT  0
 +#define  MEM_WRAP_CLIENT_NUM_GET(x) (((x) & MEM_WRAP_CLIENT_NUM_MASK) >> MEM_WRAP_CLIENT_NUM_SHIFT)
 +#define MA_PCIE_FW 0x30b8
 +#define MA_PARITY_ERROR_STATUS 0x77f4
 +
 +#define MA_EXT_MEMORY1_BAR 0x7808
 +#define EDC_0_BASE_ADDR 0x7900
 +
 +#define EDC_BIST_CMD 0x7904
 +#define EDC_BIST_CMD_ADDR 0x7908
 +#define EDC_BIST_CMD_LEN 0x790c
 +#define EDC_BIST_DATA_PATTERN 0x7910
 +#define EDC_BIST_STATUS_RDATA 0x7928
 +#define EDC_INT_CAUSE 0x7978
 +#define  ECC_UE_PAR     0x00000020U
 +#define  ECC_CE_PAR     0x00000010U
 +#define  PERR_PAR_CAUSE 0x00000008U
 +
 +#define EDC_ECC_STATUS 0x797c
 +
 +#define EDC_1_BASE_ADDR 0x7980
 +
 +#define CIM_BOOT_CFG 0x7b00
 +#define  BOOTADDR_MASK 0xffffff00U
 +#define  UPCRST        0x1U
 +
 +#define CIM_PF_MAILBOX_DATA 0x240
 +#define CIM_PF_MAILBOX_CTRL 0x280
 +#define  MBMSGVALID     0x00000008U
 +#define  MBINTREQ       0x00000004U
 +#define  MBOWNER_MASK   0x00000003U
 +#define  MBOWNER_SHIFT  0
 +#define  MBOWNER(x)     ((x) << MBOWNER_SHIFT)
 +#define  MBOWNER_GET(x) (((x) & MBOWNER_MASK) >> MBOWNER_SHIFT)
 +
 +#define CIM_PF_HOST_INT_ENABLE 0x288
 +#define  MBMSGRDYINTEN(x) ((x) << 19)
 +
 +#define CIM_PF_HOST_INT_CAUSE 0x28c
 +#define  MBMSGRDYINT 0x00080000U
 +
 +#define CIM_HOST_INT_CAUSE 0x7b2c
 +#define  TIEQOUTPARERRINT  0x00100000U
 +#define  TIEQINPARERRINT   0x00080000U
 +#define  MBHOSTPARERR      0x00040000U
 +#define  MBUPPARERR        0x00020000U
 +#define  IBQPARERR         0x0001f800U
 +#define  IBQTP0PARERR      0x00010000U
 +#define  IBQTP1PARERR      0x00008000U
 +#define  IBQULPPARERR      0x00004000U
 +#define  IBQSGELOPARERR    0x00002000U
 +#define  IBQSGEHIPARERR    0x00001000U
 +#define  IBQNCSIPARERR     0x00000800U
 +#define  OBQPARERR         0x000007e0U
 +#define  OBQULP0PARERR     0x00000400U
 +#define  OBQULP1PARERR     0x00000200U
 +#define  OBQULP2PARERR     0x00000100U
 +#define  OBQULP3PARERR     0x00000080U
 +#define  OBQSGEPARERR      0x00000040U
 +#define  OBQNCSIPARERR     0x00000020U
 +#define  PREFDROPINT       0x00000002U
 +#define  UPACCNONZERO      0x00000001U
 +
 +#define CIM_HOST_UPACC_INT_CAUSE 0x7b34
 +#define  EEPROMWRINT      0x40000000U
 +#define  TIMEOUTMAINT     0x20000000U
 +#define  TIMEOUTINT       0x10000000U
 +#define  RSPOVRLOOKUPINT  0x08000000U
 +#define  REQOVRLOOKUPINT  0x04000000U
 +#define  BLKWRPLINT       0x02000000U
 +#define  BLKRDPLINT       0x01000000U
 +#define  SGLWRPLINT       0x00800000U
 +#define  SGLRDPLINT       0x00400000U
 +#define  BLKWRCTLINT      0x00200000U
 +#define  BLKRDCTLINT      0x00100000U
 +#define  SGLWRCTLINT      0x00080000U
 +#define  SGLRDCTLINT      0x00040000U
 +#define  BLKWREEPROMINT   0x00020000U
 +#define  BLKRDEEPROMINT   0x00010000U
 +#define  SGLWREEPROMINT   0x00008000U
 +#define  SGLRDEEPROMINT   0x00004000U
 +#define  BLKWRFLASHINT    0x00002000U
 +#define  BLKRDFLASHINT    0x00001000U
 +#define  SGLWRFLASHINT    0x00000800U
 +#define  SGLRDFLASHINT    0x00000400U
 +#define  BLKWRBOOTINT     0x00000200U
 +#define  BLKRDBOOTINT     0x00000100U
 +#define  SGLWRBOOTINT     0x00000080U
 +#define  SGLRDBOOTINT     0x00000040U
 +#define  ILLWRBEINT       0x00000020U
 +#define  ILLRDBEINT       0x00000010U
 +#define  ILLRDINT         0x00000008U
 +#define  ILLWRINT         0x00000004U
 +#define  ILLTRANSINT      0x00000002U
 +#define  RSVDSPACEINT     0x00000001U
 +
 +#define TP_OUT_CONFIG 0x7d04
 +#define  VLANEXTENABLE_MASK  0x0000f000U
 +#define  VLANEXTENABLE_SHIFT 12
 +
 +#define TP_GLOBAL_CONFIG 0x7d08
 +#define  FIVETUPLELOOKUP_SHIFT  17
 +#define  FIVETUPLELOOKUP_MASK   0x00060000U
 +#define  FIVETUPLELOOKUP(x)     ((x) << FIVETUPLELOOKUP_SHIFT)
 +#define  FIVETUPLELOOKUP_GET(x) (((x) & FIVETUPLELOOKUP_MASK) >> \
 +				FIVETUPLELOOKUP_SHIFT)
 +
 +#define TP_PARA_REG2 0x7d68
 +#define  MAXRXDATA_MASK    0xffff0000U
 +#define  MAXRXDATA_SHIFT   16
 +#define  MAXRXDATA_GET(x) (((x) & MAXRXDATA_MASK) >> MAXRXDATA_SHIFT)
 +
 +#define TP_TIMER_RESOLUTION 0x7d90
 +#define  TIMERRESOLUTION_MASK   0x00ff0000U
 +#define  TIMERRESOLUTION_SHIFT  16
 +#define  TIMERRESOLUTION_GET(x) (((x) & TIMERRESOLUTION_MASK) >> TIMERRESOLUTION_SHIFT)
 +#define  DELAYEDACKRESOLUTION_MASK 0x000000ffU
 +#define  DELAYEDACKRESOLUTION_SHIFT     0
 +#define  DELAYEDACKRESOLUTION_GET(x) \
 +	(((x) & DELAYEDACKRESOLUTION_MASK) >> DELAYEDACKRESOLUTION_SHIFT)
 +
 +#define TP_SHIFT_CNT 0x7dc0
 +#define  SYNSHIFTMAX_SHIFT         24
 +#define  SYNSHIFTMAX_MASK          0xff000000U
 +#define  SYNSHIFTMAX(x)            ((x) << SYNSHIFTMAX_SHIFT)
 +#define  SYNSHIFTMAX_GET(x)        (((x) & SYNSHIFTMAX_MASK) >> \
 +				   SYNSHIFTMAX_SHIFT)
 +#define  RXTSHIFTMAXR1_SHIFT       20
 +#define  RXTSHIFTMAXR1_MASK        0x00f00000U
 +#define  RXTSHIFTMAXR1(x)          ((x) << RXTSHIFTMAXR1_SHIFT)
 +#define  RXTSHIFTMAXR1_GET(x)      (((x) & RXTSHIFTMAXR1_MASK) >> \
 +				   RXTSHIFTMAXR1_SHIFT)
 +#define  RXTSHIFTMAXR2_SHIFT       16
 +#define  RXTSHIFTMAXR2_MASK        0x000f0000U
 +#define  RXTSHIFTMAXR2(x)          ((x) << RXTSHIFTMAXR2_SHIFT)
 +#define  RXTSHIFTMAXR2_GET(x)      (((x) & RXTSHIFTMAXR2_MASK) >> \
 +				   RXTSHIFTMAXR2_SHIFT)
 +#define  PERSHIFTBACKOFFMAX_SHIFT  12
 +#define  PERSHIFTBACKOFFMAX_MASK   0x0000f000U
 +#define  PERSHIFTBACKOFFMAX(x)     ((x) << PERSHIFTBACKOFFMAX_SHIFT)
 +#define  PERSHIFTBACKOFFMAX_GET(x) (((x) & PERSHIFTBACKOFFMAX_MASK) >> \
 +				   PERSHIFTBACKOFFMAX_SHIFT)
 +#define  PERSHIFTMAX_SHIFT         8
 +#define  PERSHIFTMAX_MASK          0x00000f00U
 +#define  PERSHIFTMAX(x)            ((x) << PERSHIFTMAX_SHIFT)
 +#define  PERSHIFTMAX_GET(x)        (((x) & PERSHIFTMAX_MASK) >> \
 +				   PERSHIFTMAX_SHIFT)
 +#define  KEEPALIVEMAXR1_SHIFT      4
 +#define  KEEPALIVEMAXR1_MASK       0x000000f0U
 +#define  KEEPALIVEMAXR1(x)         ((x) << KEEPALIVEMAXR1_SHIFT)
 +#define  KEEPALIVEMAXR1_GET(x)     (((x) & KEEPALIVEMAXR1_MASK) >> \
 +				   KEEPALIVEMAXR1_SHIFT)
 +#define KEEPALIVEMAXR2_SHIFT       0
 +#define KEEPALIVEMAXR2_MASK        0x0000000fU
 +#define KEEPALIVEMAXR2(x)          ((x) << KEEPALIVEMAXR2_SHIFT)
 +#define KEEPALIVEMAXR2_GET(x)      (((x) & KEEPALIVEMAXR2_MASK) >> \
 +				   KEEPALIVEMAXR2_SHIFT)
 +
 +#define TP_CCTRL_TABLE 0x7ddc
 +#define TP_MTU_TABLE 0x7de4
 +#define  MTUINDEX_MASK   0xff000000U
 +#define  MTUINDEX_SHIFT  24
 +#define  MTUINDEX(x)     ((x) << MTUINDEX_SHIFT)
 +#define  MTUWIDTH_MASK   0x000f0000U
 +#define  MTUWIDTH_SHIFT  16
 +#define  MTUWIDTH(x)     ((x) << MTUWIDTH_SHIFT)
 +#define  MTUWIDTH_GET(x) (((x) & MTUWIDTH_MASK) >> MTUWIDTH_SHIFT)
 +#define  MTUVALUE_MASK   0x00003fffU
 +#define  MTUVALUE_SHIFT  0
 +#define  MTUVALUE(x)     ((x) << MTUVALUE_SHIFT)
 +#define  MTUVALUE_GET(x) (((x) & MTUVALUE_MASK) >> MTUVALUE_SHIFT)
 +
 +#define TP_RSS_LKP_TABLE 0x7dec
 +#define  LKPTBLROWVLD        0x80000000U
 +#define  LKPTBLQUEUE1_MASK   0x000ffc00U
 +#define  LKPTBLQUEUE1_SHIFT  10
 +#define  LKPTBLQUEUE1(x)     ((x) << LKPTBLQUEUE1_SHIFT)
 +#define  LKPTBLQUEUE1_GET(x) (((x) & LKPTBLQUEUE1_MASK) >> LKPTBLQUEUE1_SHIFT)
 +#define  LKPTBLQUEUE0_MASK   0x000003ffU
 +#define  LKPTBLQUEUE0_SHIFT  0
 +#define  LKPTBLQUEUE0(x)     ((x) << LKPTBLQUEUE0_SHIFT)
 +#define  LKPTBLQUEUE0_GET(x) (((x) & LKPTBLQUEUE0_MASK) >> LKPTBLQUEUE0_SHIFT)
 +
 +#define TP_PIO_ADDR 0x7e40
 +#define TP_PIO_DATA 0x7e44
 +#define TP_MIB_INDEX 0x7e50
 +#define TP_MIB_DATA 0x7e54
 +#define TP_INT_CAUSE 0x7e74
 +#define  FLMTXFLSTEMPTY 0x40000000U
 +
 +#define TP_VLAN_PRI_MAP 0x140
 +#define  FRAGMENTATION_SHIFT 9
 +#define  FRAGMENTATION_MASK  0x00000200U
 +#define  MPSHITTYPE_MASK     0x00000100U
 +#define  MACMATCH_MASK       0x00000080U
 +#define  ETHERTYPE_MASK      0x00000040U
 +#define  PROTOCOL_MASK       0x00000020U
 +#define  TOS_MASK            0x00000010U
 +#define  VLAN_MASK           0x00000008U
 +#define  VNIC_ID_MASK        0x00000004U
 +#define  PORT_MASK           0x00000002U
 +#define  FCOE_SHIFT          0
 +#define  FCOE_MASK           0x00000001U
 +
 +#define TP_INGRESS_CONFIG 0x141
 +#define  VNIC                0x00000800U
 +#define  CSUM_HAS_PSEUDO_HDR 0x00000400U
 +#define  RM_OVLAN            0x00000200U
 +#define  LOOKUPEVERYPKT      0x00000100U
 +
 +#define TP_MIB_MAC_IN_ERR_0 0x0
 +#define TP_MIB_TCP_OUT_RST 0xc
 +#define TP_MIB_TCP_IN_SEG_HI 0x10
 +#define TP_MIB_TCP_IN_SEG_LO 0x11
 +#define TP_MIB_TCP_OUT_SEG_HI 0x12
 +#define TP_MIB_TCP_OUT_SEG_LO 0x13
 +#define TP_MIB_TCP_RXT_SEG_HI 0x14
 +#define TP_MIB_TCP_RXT_SEG_LO 0x15
 +#define TP_MIB_TNL_CNG_DROP_0 0x18
 +#define TP_MIB_TCP_V6IN_ERR_0 0x28
 +#define TP_MIB_TCP_V6OUT_RST 0x2c
 +#define TP_MIB_OFD_ARP_DROP 0x36
 +#define TP_MIB_TNL_DROP_0 0x44
 +#define TP_MIB_OFD_VLN_DROP_0 0x58
 +
 +#define ULP_TX_INT_CAUSE 0x8dcc
 +#define  PBL_BOUND_ERR_CH3 0x80000000U
 +#define  PBL_BOUND_ERR_CH2 0x40000000U
 +#define  PBL_BOUND_ERR_CH1 0x20000000U
 +#define  PBL_BOUND_ERR_CH0 0x10000000U
 +
 +#define PM_RX_INT_CAUSE 0x8fdc
 +#define  ZERO_E_CMD_ERROR     0x00400000U
 +#define  PMRX_FRAMING_ERROR   0x003ffff0U
 +#define  OCSPI_PAR_ERROR      0x00000008U
 +#define  DB_OPTIONS_PAR_ERROR 0x00000004U
 +#define  IESPI_PAR_ERROR      0x00000002U
 +#define  E_PCMD_PAR_ERROR     0x00000001U
 +
 +#define PM_TX_INT_CAUSE 0x8ffc
 +#define  PCMD_LEN_OVFL0     0x80000000U
 +#define  PCMD_LEN_OVFL1     0x40000000U
 +#define  PCMD_LEN_OVFL2     0x20000000U
 +#define  ZERO_C_CMD_ERROR   0x10000000U
 +#define  PMTX_FRAMING_ERROR 0x0ffffff0U
 +#define  OESPI_PAR_ERROR    0x00000008U
 +#define  ICSPI_PAR_ERROR    0x00000002U
 +#define  C_PCMD_PAR_ERROR   0x00000001U
++=======
+ #define PCIE_FW_REG(reg_addr, idx) ((reg_addr) + (idx) * 4)
+ 
+ #define SGE_PF_KDOORBELL_A 0x0
+ 
+ #define QID_S    15
+ #define QID_V(x) ((x) << QID_S)
+ 
+ #define DBPRIO_S    14
+ #define DBPRIO_V(x) ((x) << DBPRIO_S)
+ #define DBPRIO_F    DBPRIO_V(1U)
+ 
+ #define PIDX_S    0
+ #define PIDX_V(x) ((x) << PIDX_S)
+ 
+ #define SGE_VF_KDOORBELL_A 0x0
+ 
+ #define DBTYPE_S    13
+ #define DBTYPE_V(x) ((x) << DBTYPE_S)
+ #define DBTYPE_F    DBTYPE_V(1U)
+ 
+ #define PIDX_T5_S    0
+ #define PIDX_T5_M    0x1fffU
+ #define PIDX_T5_V(x) ((x) << PIDX_T5_S)
+ #define PIDX_T5_G(x) (((x) >> PIDX_T5_S) & PIDX_T5_M)
+ 
+ #define SGE_PF_GTS_A 0x4
+ 
+ #define INGRESSQID_S    16
+ #define INGRESSQID_V(x) ((x) << INGRESSQID_S)
+ 
+ #define TIMERREG_S    13
+ #define TIMERREG_V(x) ((x) << TIMERREG_S)
+ 
+ #define SEINTARM_S    12
+ #define SEINTARM_V(x) ((x) << SEINTARM_S)
+ 
+ #define CIDXINC_S    0
+ #define CIDXINC_M    0xfffU
+ #define CIDXINC_V(x) ((x) << CIDXINC_S)
+ 
+ #define SGE_CONTROL_A	0x1008
+ #define SGE_CONTROL2_A	0x1124
+ 
+ #define RXPKTCPLMODE_S    18
+ #define RXPKTCPLMODE_V(x) ((x) << RXPKTCPLMODE_S)
+ #define RXPKTCPLMODE_F    RXPKTCPLMODE_V(1U)
+ 
+ #define EGRSTATUSPAGESIZE_S    17
+ #define EGRSTATUSPAGESIZE_V(x) ((x) << EGRSTATUSPAGESIZE_S)
+ #define EGRSTATUSPAGESIZE_F    EGRSTATUSPAGESIZE_V(1U)
+ 
+ #define PKTSHIFT_S    10
+ #define PKTSHIFT_M    0x7U
+ #define PKTSHIFT_V(x) ((x) << PKTSHIFT_S)
+ #define PKTSHIFT_G(x) (((x) >> PKTSHIFT_S) & PKTSHIFT_M)
+ 
+ #define INGPCIEBOUNDARY_S    7
+ #define INGPCIEBOUNDARY_V(x) ((x) << INGPCIEBOUNDARY_S)
+ 
+ #define INGPADBOUNDARY_S    4
+ #define INGPADBOUNDARY_M    0x7U
+ #define INGPADBOUNDARY_V(x) ((x) << INGPADBOUNDARY_S)
+ #define INGPADBOUNDARY_G(x) (((x) >> INGPADBOUNDARY_S) & INGPADBOUNDARY_M)
+ 
+ #define EGRPCIEBOUNDARY_S    1
+ #define EGRPCIEBOUNDARY_V(x) ((x) << EGRPCIEBOUNDARY_S)
+ 
+ #define  INGPACKBOUNDARY_S	16
+ #define  INGPACKBOUNDARY_M	0x7U
+ #define  INGPACKBOUNDARY_V(x)	((x) << INGPACKBOUNDARY_S)
+ #define  INGPACKBOUNDARY_G(x)	(((x) >> INGPACKBOUNDARY_S) \
+ 				 & INGPACKBOUNDARY_M)
+ 
+ #define GLOBALENABLE_S    0
+ #define GLOBALENABLE_V(x) ((x) << GLOBALENABLE_S)
+ #define GLOBALENABLE_F    GLOBALENABLE_V(1U)
+ 
+ #define SGE_HOST_PAGE_SIZE_A 0x100c
+ 
+ #define HOSTPAGESIZEPF7_S    28
+ #define HOSTPAGESIZEPF7_M    0xfU
+ #define HOSTPAGESIZEPF7_V(x) ((x) << HOSTPAGESIZEPF7_S)
+ #define HOSTPAGESIZEPF7_G(x) (((x) >> HOSTPAGESIZEPF7_S) & HOSTPAGESIZEPF7_M)
+ 
+ #define HOSTPAGESIZEPF6_S    24
+ #define HOSTPAGESIZEPF6_M    0xfU
+ #define HOSTPAGESIZEPF6_V(x) ((x) << HOSTPAGESIZEPF6_S)
+ #define HOSTPAGESIZEPF6_G(x) (((x) >> HOSTPAGESIZEPF6_S) & HOSTPAGESIZEPF6_M)
+ 
+ #define HOSTPAGESIZEPF5_S    20
+ #define HOSTPAGESIZEPF5_M    0xfU
+ #define HOSTPAGESIZEPF5_V(x) ((x) << HOSTPAGESIZEPF5_S)
+ #define HOSTPAGESIZEPF5_G(x) (((x) >> HOSTPAGESIZEPF5_S) & HOSTPAGESIZEPF5_M)
+ 
+ #define HOSTPAGESIZEPF4_S    16
+ #define HOSTPAGESIZEPF4_M    0xfU
+ #define HOSTPAGESIZEPF4_V(x) ((x) << HOSTPAGESIZEPF4_S)
+ #define HOSTPAGESIZEPF4_G(x) (((x) >> HOSTPAGESIZEPF4_S) & HOSTPAGESIZEPF4_M)
+ 
+ #define HOSTPAGESIZEPF3_S    12
+ #define HOSTPAGESIZEPF3_M    0xfU
+ #define HOSTPAGESIZEPF3_V(x) ((x) << HOSTPAGESIZEPF3_S)
+ #define HOSTPAGESIZEPF3_G(x) (((x) >> HOSTPAGESIZEPF3_S) & HOSTPAGESIZEPF3_M)
+ 
+ #define HOSTPAGESIZEPF2_S    8
+ #define HOSTPAGESIZEPF2_M    0xfU
+ #define HOSTPAGESIZEPF2_V(x) ((x) << HOSTPAGESIZEPF2_S)
+ #define HOSTPAGESIZEPF2_G(x) (((x) >> HOSTPAGESIZEPF2_S) & HOSTPAGESIZEPF2_M)
+ 
+ #define HOSTPAGESIZEPF1_S    4
+ #define HOSTPAGESIZEPF1_M    0xfU
+ #define HOSTPAGESIZEPF1_V(x) ((x) << HOSTPAGESIZEPF1_S)
+ #define HOSTPAGESIZEPF1_G(x) (((x) >> HOSTPAGESIZEPF1_S) & HOSTPAGESIZEPF1_M)
+ 
+ #define HOSTPAGESIZEPF0_S    0
+ #define HOSTPAGESIZEPF0_M    0xfU
+ #define HOSTPAGESIZEPF0_V(x) ((x) << HOSTPAGESIZEPF0_S)
+ #define HOSTPAGESIZEPF0_G(x) (((x) >> HOSTPAGESIZEPF0_S) & HOSTPAGESIZEPF0_M)
+ 
+ #define SGE_EGRESS_QUEUES_PER_PAGE_PF_A 0x1010
+ #define SGE_EGRESS_QUEUES_PER_PAGE_VF_A 0x1014
+ 
+ #define QUEUESPERPAGEPF1_S    4
+ 
+ #define QUEUESPERPAGEPF0_S    0
+ #define QUEUESPERPAGEPF0_M    0xfU
+ #define QUEUESPERPAGEPF0_V(x) ((x) << QUEUESPERPAGEPF0_S)
+ #define QUEUESPERPAGEPF0_G(x) (((x) >> QUEUESPERPAGEPF0_S) & QUEUESPERPAGEPF0_M)
+ 
+ #define SGE_INT_CAUSE1_A	0x1024
+ #define SGE_INT_CAUSE2_A	0x1030
+ #define SGE_INT_CAUSE3_A	0x103c
+ 
+ #define ERR_FLM_DBP_S    31
+ #define ERR_FLM_DBP_V(x) ((x) << ERR_FLM_DBP_S)
+ #define ERR_FLM_DBP_F    ERR_FLM_DBP_V(1U)
+ 
+ #define ERR_FLM_IDMA1_S    30
+ #define ERR_FLM_IDMA1_V(x) ((x) << ERR_FLM_IDMA1_S)
+ #define ERR_FLM_IDMA1_F    ERR_FLM_IDMA1_V(1U)
+ 
+ #define ERR_FLM_IDMA0_S    29
+ #define ERR_FLM_IDMA0_V(x) ((x) << ERR_FLM_IDMA0_S)
+ #define ERR_FLM_IDMA0_F    ERR_FLM_IDMA0_V(1U)
+ 
+ #define ERR_FLM_HINT_S    28
+ #define ERR_FLM_HINT_V(x) ((x) << ERR_FLM_HINT_S)
+ #define ERR_FLM_HINT_F    ERR_FLM_HINT_V(1U)
+ 
+ #define ERR_PCIE_ERROR3_S    27
+ #define ERR_PCIE_ERROR3_V(x) ((x) << ERR_PCIE_ERROR3_S)
+ #define ERR_PCIE_ERROR3_F    ERR_PCIE_ERROR3_V(1U)
+ 
+ #define ERR_PCIE_ERROR2_S    26
+ #define ERR_PCIE_ERROR2_V(x) ((x) << ERR_PCIE_ERROR2_S)
+ #define ERR_PCIE_ERROR2_F    ERR_PCIE_ERROR2_V(1U)
+ 
+ #define ERR_PCIE_ERROR1_S    25
+ #define ERR_PCIE_ERROR1_V(x) ((x) << ERR_PCIE_ERROR1_S)
+ #define ERR_PCIE_ERROR1_F    ERR_PCIE_ERROR1_V(1U)
+ 
+ #define ERR_PCIE_ERROR0_S    24
+ #define ERR_PCIE_ERROR0_V(x) ((x) << ERR_PCIE_ERROR0_S)
+ #define ERR_PCIE_ERROR0_F    ERR_PCIE_ERROR0_V(1U)
+ 
+ #define ERR_CPL_EXCEED_IQE_SIZE_S    22
+ #define ERR_CPL_EXCEED_IQE_SIZE_V(x) ((x) << ERR_CPL_EXCEED_IQE_SIZE_S)
+ #define ERR_CPL_EXCEED_IQE_SIZE_F    ERR_CPL_EXCEED_IQE_SIZE_V(1U)
+ 
+ #define ERR_INVALID_CIDX_INC_S    21
+ #define ERR_INVALID_CIDX_INC_V(x) ((x) << ERR_INVALID_CIDX_INC_S)
+ #define ERR_INVALID_CIDX_INC_F    ERR_INVALID_CIDX_INC_V(1U)
+ 
+ #define ERR_CPL_OPCODE_0_S    19
+ #define ERR_CPL_OPCODE_0_V(x) ((x) << ERR_CPL_OPCODE_0_S)
+ #define ERR_CPL_OPCODE_0_F    ERR_CPL_OPCODE_0_V(1U)
+ 
+ #define ERR_DROPPED_DB_S    18
+ #define ERR_DROPPED_DB_V(x) ((x) << ERR_DROPPED_DB_S)
+ #define ERR_DROPPED_DB_F    ERR_DROPPED_DB_V(1U)
+ 
+ #define ERR_DATA_CPL_ON_HIGH_QID1_S    17
+ #define ERR_DATA_CPL_ON_HIGH_QID1_V(x) ((x) << ERR_DATA_CPL_ON_HIGH_QID1_S)
+ #define ERR_DATA_CPL_ON_HIGH_QID1_F    ERR_DATA_CPL_ON_HIGH_QID1_V(1U)
+ 
+ #define ERR_DATA_CPL_ON_HIGH_QID0_S    16
+ #define ERR_DATA_CPL_ON_HIGH_QID0_V(x) ((x) << ERR_DATA_CPL_ON_HIGH_QID0_S)
+ #define ERR_DATA_CPL_ON_HIGH_QID0_F    ERR_DATA_CPL_ON_HIGH_QID0_V(1U)
+ 
+ #define ERR_BAD_DB_PIDX3_S    15
+ #define ERR_BAD_DB_PIDX3_V(x) ((x) << ERR_BAD_DB_PIDX3_S)
+ #define ERR_BAD_DB_PIDX3_F    ERR_BAD_DB_PIDX3_V(1U)
+ 
+ #define ERR_BAD_DB_PIDX2_S    14
+ #define ERR_BAD_DB_PIDX2_V(x) ((x) << ERR_BAD_DB_PIDX2_S)
+ #define ERR_BAD_DB_PIDX2_F    ERR_BAD_DB_PIDX2_V(1U)
+ 
+ #define ERR_BAD_DB_PIDX1_S    13
+ #define ERR_BAD_DB_PIDX1_V(x) ((x) << ERR_BAD_DB_PIDX1_S)
+ #define ERR_BAD_DB_PIDX1_F    ERR_BAD_DB_PIDX1_V(1U)
+ 
+ #define ERR_BAD_DB_PIDX0_S    12
+ #define ERR_BAD_DB_PIDX0_V(x) ((x) << ERR_BAD_DB_PIDX0_S)
+ #define ERR_BAD_DB_PIDX0_F    ERR_BAD_DB_PIDX0_V(1U)
+ 
+ #define ERR_ING_CTXT_PRIO_S    10
+ #define ERR_ING_CTXT_PRIO_V(x) ((x) << ERR_ING_CTXT_PRIO_S)
+ #define ERR_ING_CTXT_PRIO_F    ERR_ING_CTXT_PRIO_V(1U)
+ 
+ #define ERR_EGR_CTXT_PRIO_S    9
+ #define ERR_EGR_CTXT_PRIO_V(x) ((x) << ERR_EGR_CTXT_PRIO_S)
+ #define ERR_EGR_CTXT_PRIO_F    ERR_EGR_CTXT_PRIO_V(1U)
+ 
+ #define DBFIFO_HP_INT_S    8
+ #define DBFIFO_HP_INT_V(x) ((x) << DBFIFO_HP_INT_S)
+ #define DBFIFO_HP_INT_F    DBFIFO_HP_INT_V(1U)
+ 
+ #define DBFIFO_LP_INT_S    7
+ #define DBFIFO_LP_INT_V(x) ((x) << DBFIFO_LP_INT_S)
+ #define DBFIFO_LP_INT_F    DBFIFO_LP_INT_V(1U)
+ 
+ #define INGRESS_SIZE_ERR_S    5
+ #define INGRESS_SIZE_ERR_V(x) ((x) << INGRESS_SIZE_ERR_S)
+ #define INGRESS_SIZE_ERR_F    INGRESS_SIZE_ERR_V(1U)
+ 
+ #define EGRESS_SIZE_ERR_S    4
+ #define EGRESS_SIZE_ERR_V(x) ((x) << EGRESS_SIZE_ERR_S)
+ #define EGRESS_SIZE_ERR_F    EGRESS_SIZE_ERR_V(1U)
+ 
+ #define SGE_INT_ENABLE3_A 0x1040
+ #define SGE_FL_BUFFER_SIZE0_A 0x1044
+ #define SGE_FL_BUFFER_SIZE1_A 0x1048
+ #define SGE_FL_BUFFER_SIZE2_A 0x104c
+ #define SGE_FL_BUFFER_SIZE3_A 0x1050
+ #define SGE_FL_BUFFER_SIZE4_A 0x1054
+ #define SGE_FL_BUFFER_SIZE5_A 0x1058
+ #define SGE_FL_BUFFER_SIZE6_A 0x105c
+ #define SGE_FL_BUFFER_SIZE7_A 0x1060
+ #define SGE_FL_BUFFER_SIZE8_A 0x1064
+ 
+ #define SGE_INGRESS_RX_THRESHOLD_A 0x10a0
+ 
+ #define THRESHOLD_0_S    24
+ #define THRESHOLD_0_M    0x3fU
+ #define THRESHOLD_0_V(x) ((x) << THRESHOLD_0_S)
+ #define THRESHOLD_0_G(x) (((x) >> THRESHOLD_0_S) & THRESHOLD_0_M)
+ 
+ #define THRESHOLD_1_S    16
+ #define THRESHOLD_1_M    0x3fU
+ #define THRESHOLD_1_V(x) ((x) << THRESHOLD_1_S)
+ #define THRESHOLD_1_G(x) (((x) >> THRESHOLD_1_S) & THRESHOLD_1_M)
+ 
+ #define THRESHOLD_2_S    8
+ #define THRESHOLD_2_M    0x3fU
+ #define THRESHOLD_2_V(x) ((x) << THRESHOLD_2_S)
+ #define THRESHOLD_2_G(x) (((x) >> THRESHOLD_2_S) & THRESHOLD_2_M)
+ 
+ #define THRESHOLD_3_S    0
+ #define THRESHOLD_3_M    0x3fU
+ #define THRESHOLD_3_V(x) ((x) << THRESHOLD_3_S)
+ #define THRESHOLD_3_G(x) (((x) >> THRESHOLD_3_S) & THRESHOLD_3_M)
+ 
+ #define SGE_CONM_CTRL_A 0x1094
+ 
+ #define EGRTHRESHOLD_S    8
+ #define EGRTHRESHOLD_M    0x3fU
+ #define EGRTHRESHOLD_V(x) ((x) << EGRTHRESHOLD_S)
+ #define EGRTHRESHOLD_G(x) (((x) >> EGRTHRESHOLD_S) & EGRTHRESHOLD_M)
+ 
+ #define EGRTHRESHOLDPACKING_S    14
+ #define EGRTHRESHOLDPACKING_M    0x3fU
+ #define EGRTHRESHOLDPACKING_V(x) ((x) << EGRTHRESHOLDPACKING_S)
+ #define EGRTHRESHOLDPACKING_G(x) \
+ 	(((x) >> EGRTHRESHOLDPACKING_S) & EGRTHRESHOLDPACKING_M)
+ 
+ #define SGE_TIMESTAMP_LO_A 0x1098
+ #define SGE_TIMESTAMP_HI_A 0x109c
+ 
+ #define TSOP_S    28
+ #define TSOP_M    0x3U
+ #define TSOP_V(x) ((x) << TSOP_S)
+ #define TSOP_G(x) (((x) >> TSOP_S) & TSOP_M)
+ 
+ #define TSVAL_S    0
+ #define TSVAL_M    0xfffffffU
+ #define TSVAL_V(x) ((x) << TSVAL_S)
+ #define TSVAL_G(x) (((x) >> TSVAL_S) & TSVAL_M)
+ 
+ #define SGE_DBFIFO_STATUS_A 0x10a4
+ 
+ #define HP_INT_THRESH_S    28
+ #define HP_INT_THRESH_M    0xfU
+ #define HP_INT_THRESH_V(x) ((x) << HP_INT_THRESH_S)
+ 
+ #define LP_INT_THRESH_S    12
+ #define LP_INT_THRESH_M    0xfU
+ #define LP_INT_THRESH_V(x) ((x) << LP_INT_THRESH_S)
+ 
+ #define SGE_DOORBELL_CONTROL_A 0x10a8
+ 
+ #define NOCOALESCE_S    26
+ #define NOCOALESCE_V(x) ((x) << NOCOALESCE_S)
+ #define NOCOALESCE_F    NOCOALESCE_V(1U)
+ 
+ #define ENABLE_DROP_S    13
+ #define ENABLE_DROP_V(x) ((x) << ENABLE_DROP_S)
+ #define ENABLE_DROP_F    ENABLE_DROP_V(1U)
+ 
+ #define SGE_TIMER_VALUE_0_AND_1_A 0x10b8
+ 
+ #define TIMERVALUE0_S    16
+ #define TIMERVALUE0_M    0xffffU
+ #define TIMERVALUE0_V(x) ((x) << TIMERVALUE0_S)
+ #define TIMERVALUE0_G(x) (((x) >> TIMERVALUE0_S) & TIMERVALUE0_M)
+ 
+ #define TIMERVALUE1_S    0
+ #define TIMERVALUE1_M    0xffffU
+ #define TIMERVALUE1_V(x) ((x) << TIMERVALUE1_S)
+ #define TIMERVALUE1_G(x) (((x) >> TIMERVALUE1_S) & TIMERVALUE1_M)
+ 
+ #define SGE_TIMER_VALUE_2_AND_3_A 0x10bc
+ 
+ #define TIMERVALUE2_S    16
+ #define TIMERVALUE2_M    0xffffU
+ #define TIMERVALUE2_V(x) ((x) << TIMERVALUE2_S)
+ #define TIMERVALUE2_G(x) (((x) >> TIMERVALUE2_S) & TIMERVALUE2_M)
+ 
+ #define TIMERVALUE3_S    0
+ #define TIMERVALUE3_M    0xffffU
+ #define TIMERVALUE3_V(x) ((x) << TIMERVALUE3_S)
+ #define TIMERVALUE3_G(x) (((x) >> TIMERVALUE3_S) & TIMERVALUE3_M)
+ 
+ #define SGE_TIMER_VALUE_4_AND_5_A 0x10c0
+ 
+ #define TIMERVALUE4_S    16
+ #define TIMERVALUE4_M    0xffffU
+ #define TIMERVALUE4_V(x) ((x) << TIMERVALUE4_S)
+ #define TIMERVALUE4_G(x) (((x) >> TIMERVALUE4_S) & TIMERVALUE4_M)
+ 
+ #define TIMERVALUE5_S    0
+ #define TIMERVALUE5_M    0xffffU
+ #define TIMERVALUE5_V(x) ((x) << TIMERVALUE5_S)
+ #define TIMERVALUE5_G(x) (((x) >> TIMERVALUE5_S) & TIMERVALUE5_M)
+ 
+ #define SGE_DEBUG_INDEX_A 0x10cc
+ #define SGE_DEBUG_DATA_HIGH_A 0x10d0
+ #define SGE_DEBUG_DATA_LOW_A 0x10d4
+ 
+ #define SGE_DEBUG_DATA_LOW_INDEX_2_A	0x12c8
+ #define SGE_DEBUG_DATA_LOW_INDEX_3_A	0x12cc
+ #define SGE_DEBUG_DATA_HIGH_INDEX_10_A	0x12a8
+ 
+ #define SGE_INGRESS_QUEUES_PER_PAGE_PF_A 0x10f4
+ #define SGE_INGRESS_QUEUES_PER_PAGE_VF_A 0x10f8
+ 
+ #define SGE_ERROR_STATS_A 0x1100
+ 
+ #define UNCAPTURED_ERROR_S    18
+ #define UNCAPTURED_ERROR_V(x) ((x) << UNCAPTURED_ERROR_S)
+ #define UNCAPTURED_ERROR_F    UNCAPTURED_ERROR_V(1U)
+ 
+ #define ERROR_QID_VALID_S    17
+ #define ERROR_QID_VALID_V(x) ((x) << ERROR_QID_VALID_S)
+ #define ERROR_QID_VALID_F    ERROR_QID_VALID_V(1U)
+ 
+ #define ERROR_QID_S    0
+ #define ERROR_QID_M    0x1ffffU
+ #define ERROR_QID_G(x) (((x) >> ERROR_QID_S) & ERROR_QID_M)
+ 
+ #define HP_INT_THRESH_S    28
+ #define HP_INT_THRESH_M    0xfU
+ #define HP_INT_THRESH_V(x) ((x) << HP_INT_THRESH_S)
+ 
+ #define HP_COUNT_S    16
+ #define HP_COUNT_M    0x7ffU
+ #define HP_COUNT_G(x) (((x) >> HP_COUNT_S) & HP_COUNT_M)
+ 
+ #define LP_INT_THRESH_S    12
+ #define LP_INT_THRESH_M    0xfU
+ #define LP_INT_THRESH_V(x) ((x) << LP_INT_THRESH_S)
+ 
+ #define LP_COUNT_S    0
+ #define LP_COUNT_M    0x7ffU
+ #define LP_COUNT_G(x) (((x) >> LP_COUNT_S) & LP_COUNT_M)
+ 
+ #define LP_INT_THRESH_T5_S    18
+ #define LP_INT_THRESH_T5_M    0xfffU
+ #define LP_INT_THRESH_T5_V(x) ((x) << LP_INT_THRESH_T5_S)
+ 
+ #define LP_COUNT_T5_S    0
+ #define LP_COUNT_T5_M    0x3ffffU
+ #define LP_COUNT_T5_G(x) (((x) >> LP_COUNT_T5_S) & LP_COUNT_T5_M)
+ 
+ #define SGE_DOORBELL_CONTROL_A 0x10a8
+ 
+ #define SGE_STAT_TOTAL_A	0x10e4
+ #define SGE_STAT_MATCH_A	0x10e8
+ #define SGE_STAT_CFG_A		0x10ec
+ 
+ #define STATSOURCE_T5_S    9
+ #define STATSOURCE_T5_V(x) ((x) << STATSOURCE_T5_S)
+ 
+ #define SGE_DBFIFO_STATUS2_A 0x1118
+ 
+ #define HP_INT_THRESH_T5_S    10
+ #define HP_INT_THRESH_T5_M    0xfU
+ #define HP_INT_THRESH_T5_V(x) ((x) << HP_INT_THRESH_T5_S)
+ 
+ #define HP_COUNT_T5_S    0
+ #define HP_COUNT_T5_M    0x3ffU
+ #define HP_COUNT_T5_G(x) (((x) >> HP_COUNT_T5_S) & HP_COUNT_T5_M)
+ 
+ #define ENABLE_DROP_S    13
+ #define ENABLE_DROP_V(x) ((x) << ENABLE_DROP_S)
+ #define ENABLE_DROP_F    ENABLE_DROP_V(1U)
+ 
+ #define DROPPED_DB_S    0
+ #define DROPPED_DB_V(x) ((x) << DROPPED_DB_S)
+ #define DROPPED_DB_F    DROPPED_DB_V(1U)
+ 
+ #define SGE_CTXT_CMD_A 0x11fc
+ #define SGE_DBQ_CTXT_BADDR_A 0x1084
+ 
+ /* registers for module PCIE */
+ #define PCIE_PF_CFG_A	0x40
+ 
+ #define AIVEC_S    4
+ #define AIVEC_M    0x3ffU
+ #define AIVEC_V(x) ((x) << AIVEC_S)
+ 
+ #define PCIE_PF_CLI_A	0x44
+ #define PCIE_INT_CAUSE_A	0x3004
+ 
+ #define UNXSPLCPLERR_S    29
+ #define UNXSPLCPLERR_V(x) ((x) << UNXSPLCPLERR_S)
+ #define UNXSPLCPLERR_F    UNXSPLCPLERR_V(1U)
+ 
+ #define PCIEPINT_S    28
+ #define PCIEPINT_V(x) ((x) << PCIEPINT_S)
+ #define PCIEPINT_F    PCIEPINT_V(1U)
+ 
+ #define PCIESINT_S    27
+ #define PCIESINT_V(x) ((x) << PCIESINT_S)
+ #define PCIESINT_F    PCIESINT_V(1U)
+ 
+ #define RPLPERR_S    26
+ #define RPLPERR_V(x) ((x) << RPLPERR_S)
+ #define RPLPERR_F    RPLPERR_V(1U)
+ 
+ #define RXWRPERR_S    25
+ #define RXWRPERR_V(x) ((x) << RXWRPERR_S)
+ #define RXWRPERR_F    RXWRPERR_V(1U)
+ 
+ #define RXCPLPERR_S    24
+ #define RXCPLPERR_V(x) ((x) << RXCPLPERR_S)
+ #define RXCPLPERR_F    RXCPLPERR_V(1U)
+ 
+ #define PIOTAGPERR_S    23
+ #define PIOTAGPERR_V(x) ((x) << PIOTAGPERR_S)
+ #define PIOTAGPERR_F    PIOTAGPERR_V(1U)
+ 
+ #define MATAGPERR_S    22
+ #define MATAGPERR_V(x) ((x) << MATAGPERR_S)
+ #define MATAGPERR_F    MATAGPERR_V(1U)
+ 
+ #define INTXCLRPERR_S    21
+ #define INTXCLRPERR_V(x) ((x) << INTXCLRPERR_S)
+ #define INTXCLRPERR_F    INTXCLRPERR_V(1U)
+ 
+ #define FIDPERR_S    20
+ #define FIDPERR_V(x) ((x) << FIDPERR_S)
+ #define FIDPERR_F    FIDPERR_V(1U)
+ 
+ #define CFGSNPPERR_S    19
+ #define CFGSNPPERR_V(x) ((x) << CFGSNPPERR_S)
+ #define CFGSNPPERR_F    CFGSNPPERR_V(1U)
+ 
+ #define HRSPPERR_S    18
+ #define HRSPPERR_V(x) ((x) << HRSPPERR_S)
+ #define HRSPPERR_F    HRSPPERR_V(1U)
+ 
+ #define HREQPERR_S    17
+ #define HREQPERR_V(x) ((x) << HREQPERR_S)
+ #define HREQPERR_F    HREQPERR_V(1U)
+ 
+ #define HCNTPERR_S    16
+ #define HCNTPERR_V(x) ((x) << HCNTPERR_S)
+ #define HCNTPERR_F    HCNTPERR_V(1U)
+ 
+ #define DRSPPERR_S    15
+ #define DRSPPERR_V(x) ((x) << DRSPPERR_S)
+ #define DRSPPERR_F    DRSPPERR_V(1U)
+ 
+ #define DREQPERR_S    14
+ #define DREQPERR_V(x) ((x) << DREQPERR_S)
+ #define DREQPERR_F    DREQPERR_V(1U)
+ 
+ #define DCNTPERR_S    13
+ #define DCNTPERR_V(x) ((x) << DCNTPERR_S)
+ #define DCNTPERR_F    DCNTPERR_V(1U)
+ 
+ #define CRSPPERR_S    12
+ #define CRSPPERR_V(x) ((x) << CRSPPERR_S)
+ #define CRSPPERR_F    CRSPPERR_V(1U)
+ 
+ #define CREQPERR_S    11
+ #define CREQPERR_V(x) ((x) << CREQPERR_S)
+ #define CREQPERR_F    CREQPERR_V(1U)
+ 
+ #define CCNTPERR_S    10
+ #define CCNTPERR_V(x) ((x) << CCNTPERR_S)
+ #define CCNTPERR_F    CCNTPERR_V(1U)
+ 
+ #define TARTAGPERR_S    9
+ #define TARTAGPERR_V(x) ((x) << TARTAGPERR_S)
+ #define TARTAGPERR_F    TARTAGPERR_V(1U)
+ 
+ #define PIOREQPERR_S    8
+ #define PIOREQPERR_V(x) ((x) << PIOREQPERR_S)
+ #define PIOREQPERR_F    PIOREQPERR_V(1U)
+ 
+ #define PIOCPLPERR_S    7
+ #define PIOCPLPERR_V(x) ((x) << PIOCPLPERR_S)
+ #define PIOCPLPERR_F    PIOCPLPERR_V(1U)
+ 
+ #define MSIXDIPERR_S    6
+ #define MSIXDIPERR_V(x) ((x) << MSIXDIPERR_S)
+ #define MSIXDIPERR_F    MSIXDIPERR_V(1U)
+ 
+ #define MSIXDATAPERR_S    5
+ #define MSIXDATAPERR_V(x) ((x) << MSIXDATAPERR_S)
+ #define MSIXDATAPERR_F    MSIXDATAPERR_V(1U)
+ 
+ #define MSIXADDRHPERR_S    4
+ #define MSIXADDRHPERR_V(x) ((x) << MSIXADDRHPERR_S)
+ #define MSIXADDRHPERR_F    MSIXADDRHPERR_V(1U)
+ 
+ #define MSIXADDRLPERR_S    3
+ #define MSIXADDRLPERR_V(x) ((x) << MSIXADDRLPERR_S)
+ #define MSIXADDRLPERR_F    MSIXADDRLPERR_V(1U)
+ 
+ #define MSIDATAPERR_S    2
+ #define MSIDATAPERR_V(x) ((x) << MSIDATAPERR_S)
+ #define MSIDATAPERR_F    MSIDATAPERR_V(1U)
+ 
+ #define MSIADDRHPERR_S    1
+ #define MSIADDRHPERR_V(x) ((x) << MSIADDRHPERR_S)
+ #define MSIADDRHPERR_F    MSIADDRHPERR_V(1U)
+ 
+ #define MSIADDRLPERR_S    0
+ #define MSIADDRLPERR_V(x) ((x) << MSIADDRLPERR_S)
+ #define MSIADDRLPERR_F    MSIADDRLPERR_V(1U)
+ 
+ #define READRSPERR_S    29
+ #define READRSPERR_V(x) ((x) << READRSPERR_S)
+ #define READRSPERR_F    READRSPERR_V(1U)
+ 
+ #define TRGT1GRPPERR_S    28
+ #define TRGT1GRPPERR_V(x) ((x) << TRGT1GRPPERR_S)
+ #define TRGT1GRPPERR_F    TRGT1GRPPERR_V(1U)
+ 
+ #define IPSOTPERR_S    27
+ #define IPSOTPERR_V(x) ((x) << IPSOTPERR_S)
+ #define IPSOTPERR_F    IPSOTPERR_V(1U)
+ 
+ #define IPRETRYPERR_S    26
+ #define IPRETRYPERR_V(x) ((x) << IPRETRYPERR_S)
+ #define IPRETRYPERR_F    IPRETRYPERR_V(1U)
+ 
+ #define IPRXDATAGRPPERR_S    25
+ #define IPRXDATAGRPPERR_V(x) ((x) << IPRXDATAGRPPERR_S)
+ #define IPRXDATAGRPPERR_F    IPRXDATAGRPPERR_V(1U)
+ 
+ #define IPRXHDRGRPPERR_S    24
+ #define IPRXHDRGRPPERR_V(x) ((x) << IPRXHDRGRPPERR_S)
+ #define IPRXHDRGRPPERR_F    IPRXHDRGRPPERR_V(1U)
+ 
+ #define MAGRPPERR_S    22
+ #define MAGRPPERR_V(x) ((x) << MAGRPPERR_S)
+ #define MAGRPPERR_F    MAGRPPERR_V(1U)
+ 
+ #define VFIDPERR_S    21
+ #define VFIDPERR_V(x) ((x) << VFIDPERR_S)
+ #define VFIDPERR_F    VFIDPERR_V(1U)
+ 
+ #define HREQWRPERR_S    16
+ #define HREQWRPERR_V(x) ((x) << HREQWRPERR_S)
+ #define HREQWRPERR_F    HREQWRPERR_V(1U)
+ 
+ #define DREQWRPERR_S    13
+ #define DREQWRPERR_V(x) ((x) << DREQWRPERR_S)
+ #define DREQWRPERR_F    DREQWRPERR_V(1U)
+ 
+ #define CREQRDPERR_S    11
+ #define CREQRDPERR_V(x) ((x) << CREQRDPERR_S)
+ #define CREQRDPERR_F    CREQRDPERR_V(1U)
+ 
+ #define MSTTAGQPERR_S    10
+ #define MSTTAGQPERR_V(x) ((x) << MSTTAGQPERR_S)
+ #define MSTTAGQPERR_F    MSTTAGQPERR_V(1U)
+ 
+ #define PIOREQGRPPERR_S    8
+ #define PIOREQGRPPERR_V(x) ((x) << PIOREQGRPPERR_S)
+ #define PIOREQGRPPERR_F    PIOREQGRPPERR_V(1U)
+ 
+ #define PIOCPLGRPPERR_S    7
+ #define PIOCPLGRPPERR_V(x) ((x) << PIOCPLGRPPERR_S)
+ #define PIOCPLGRPPERR_F    PIOCPLGRPPERR_V(1U)
+ 
+ #define MSIXSTIPERR_S    2
+ #define MSIXSTIPERR_V(x) ((x) << MSIXSTIPERR_S)
+ #define MSIXSTIPERR_F    MSIXSTIPERR_V(1U)
+ 
+ #define MSTTIMEOUTPERR_S    1
+ #define MSTTIMEOUTPERR_V(x) ((x) << MSTTIMEOUTPERR_S)
+ #define MSTTIMEOUTPERR_F    MSTTIMEOUTPERR_V(1U)
+ 
+ #define MSTGRPPERR_S    0
+ #define MSTGRPPERR_V(x) ((x) << MSTGRPPERR_S)
+ #define MSTGRPPERR_F    MSTGRPPERR_V(1U)
+ 
+ #define PCIE_NONFAT_ERR_A	0x3010
+ #define PCIE_CFG_SPACE_REQ_A	0x3060
+ #define PCIE_CFG_SPACE_DATA_A	0x3064
+ #define PCIE_MEM_ACCESS_BASE_WIN_A 0x3068
+ 
+ #define PCIEOFST_S    10
+ #define PCIEOFST_M    0x3fffffU
+ #define PCIEOFST_G(x) (((x) >> PCIEOFST_S) & PCIEOFST_M)
+ 
+ #define BIR_S    8
+ #define BIR_M    0x3U
+ #define BIR_V(x) ((x) << BIR_S)
+ #define BIR_G(x) (((x) >> BIR_S) & BIR_M)
+ 
+ #define WINDOW_S    0
+ #define WINDOW_M    0xffU
+ #define WINDOW_V(x) ((x) << WINDOW_S)
+ #define WINDOW_G(x) (((x) >> WINDOW_S) & WINDOW_M)
+ 
+ #define PCIE_MEM_ACCESS_OFFSET_A 0x306c
+ 
+ #define ENABLE_S    30
+ #define ENABLE_V(x) ((x) << ENABLE_S)
+ #define ENABLE_F    ENABLE_V(1U)
+ 
+ #define LOCALCFG_S    28
+ #define LOCALCFG_V(x) ((x) << LOCALCFG_S)
+ #define LOCALCFG_F    LOCALCFG_V(1U)
+ 
+ #define FUNCTION_S    12
+ #define FUNCTION_V(x) ((x) << FUNCTION_S)
+ 
+ #define REGISTER_S    0
+ #define REGISTER_V(x) ((x) << REGISTER_S)
+ 
+ #define T6_ENABLE_S    31
+ #define T6_ENABLE_V(x) ((x) << T6_ENABLE_S)
+ #define T6_ENABLE_F    T6_ENABLE_V(1U)
+ 
+ #define PFNUM_S    0
+ #define PFNUM_V(x) ((x) << PFNUM_S)
+ 
+ #define PCIE_FW_A 0x30b8
+ #define PCIE_FW_PF_A 0x30bc
+ 
+ #define PCIE_CORE_UTL_SYSTEM_BUS_AGENT_STATUS_A 0x5908
+ 
+ #define RNPP_S    31
+ #define RNPP_V(x) ((x) << RNPP_S)
+ #define RNPP_F    RNPP_V(1U)
+ 
+ #define RPCP_S    29
+ #define RPCP_V(x) ((x) << RPCP_S)
+ #define RPCP_F    RPCP_V(1U)
+ 
+ #define RCIP_S    27
+ #define RCIP_V(x) ((x) << RCIP_S)
+ #define RCIP_F    RCIP_V(1U)
+ 
+ #define RCCP_S    26
+ #define RCCP_V(x) ((x) << RCCP_S)
+ #define RCCP_F    RCCP_V(1U)
+ 
+ #define RFTP_S    23
+ #define RFTP_V(x) ((x) << RFTP_S)
+ #define RFTP_F    RFTP_V(1U)
+ 
+ #define PTRP_S    20
+ #define PTRP_V(x) ((x) << PTRP_S)
+ #define PTRP_F    PTRP_V(1U)
+ 
+ #define PCIE_CORE_UTL_PCI_EXPRESS_PORT_STATUS_A 0x59a4
+ 
+ #define TPCP_S    30
+ #define TPCP_V(x) ((x) << TPCP_S)
+ #define TPCP_F    TPCP_V(1U)
+ 
+ #define TNPP_S    29
+ #define TNPP_V(x) ((x) << TNPP_S)
+ #define TNPP_F    TNPP_V(1U)
+ 
+ #define TFTP_S    28
+ #define TFTP_V(x) ((x) << TFTP_S)
+ #define TFTP_F    TFTP_V(1U)
+ 
+ #define TCAP_S    27
+ #define TCAP_V(x) ((x) << TCAP_S)
+ #define TCAP_F    TCAP_V(1U)
+ 
+ #define TCIP_S    26
+ #define TCIP_V(x) ((x) << TCIP_S)
+ #define TCIP_F    TCIP_V(1U)
+ 
+ #define RCAP_S    25
+ #define RCAP_V(x) ((x) << RCAP_S)
+ #define RCAP_F    RCAP_V(1U)
+ 
+ #define PLUP_S    23
+ #define PLUP_V(x) ((x) << PLUP_S)
+ #define PLUP_F    PLUP_V(1U)
+ 
+ #define PLDN_S    22
+ #define PLDN_V(x) ((x) << PLDN_S)
+ #define PLDN_F    PLDN_V(1U)
+ 
+ #define OTDD_S    21
+ #define OTDD_V(x) ((x) << OTDD_S)
+ #define OTDD_F    OTDD_V(1U)
+ 
+ #define GTRP_S    20
+ #define GTRP_V(x) ((x) << GTRP_S)
+ #define GTRP_F    GTRP_V(1U)
+ 
+ #define RDPE_S    18
+ #define RDPE_V(x) ((x) << RDPE_S)
+ #define RDPE_F    RDPE_V(1U)
+ 
+ #define TDCE_S    17
+ #define TDCE_V(x) ((x) << TDCE_S)
+ #define TDCE_F    TDCE_V(1U)
+ 
+ #define TDUE_S    16
+ #define TDUE_V(x) ((x) << TDUE_S)
+ #define TDUE_F    TDUE_V(1U)
+ 
+ /* registers for module MC */
+ #define MC_INT_CAUSE_A		0x7518
+ #define MC_P_INT_CAUSE_A	0x41318
+ 
+ #define ECC_UE_INT_CAUSE_S    2
+ #define ECC_UE_INT_CAUSE_V(x) ((x) << ECC_UE_INT_CAUSE_S)
+ #define ECC_UE_INT_CAUSE_F    ECC_UE_INT_CAUSE_V(1U)
+ 
+ #define ECC_CE_INT_CAUSE_S    1
+ #define ECC_CE_INT_CAUSE_V(x) ((x) << ECC_CE_INT_CAUSE_S)
+ #define ECC_CE_INT_CAUSE_F    ECC_CE_INT_CAUSE_V(1U)
+ 
+ #define PERR_INT_CAUSE_S    0
+ #define PERR_INT_CAUSE_V(x) ((x) << PERR_INT_CAUSE_S)
+ #define PERR_INT_CAUSE_F    PERR_INT_CAUSE_V(1U)
+ 
+ #define MC_ECC_STATUS_A		0x751c
+ #define MC_P_ECC_STATUS_A	0x4131c
+ 
+ #define ECC_CECNT_S    16
+ #define ECC_CECNT_M    0xffffU
+ #define ECC_CECNT_V(x) ((x) << ECC_CECNT_S)
+ #define ECC_CECNT_G(x) (((x) >> ECC_CECNT_S) & ECC_CECNT_M)
+ 
+ #define ECC_UECNT_S    0
+ #define ECC_UECNT_M    0xffffU
+ #define ECC_UECNT_V(x) ((x) << ECC_UECNT_S)
+ #define ECC_UECNT_G(x) (((x) >> ECC_UECNT_S) & ECC_UECNT_M)
+ 
+ #define MC_BIST_CMD_A 0x7600
+ 
+ #define START_BIST_S    31
+ #define START_BIST_V(x) ((x) << START_BIST_S)
+ #define START_BIST_F    START_BIST_V(1U)
+ 
+ #define BIST_CMD_GAP_S    8
+ #define BIST_CMD_GAP_V(x) ((x) << BIST_CMD_GAP_S)
+ 
+ #define BIST_OPCODE_S    0
+ #define BIST_OPCODE_V(x) ((x) << BIST_OPCODE_S)
+ 
+ #define MC_BIST_CMD_ADDR_A 0x7604
+ #define MC_BIST_CMD_LEN_A 0x7608
+ #define MC_BIST_DATA_PATTERN_A 0x760c
+ 
+ #define MC_BIST_STATUS_RDATA_A 0x7688
+ 
+ /* registers for module MA */
+ #define MA_EDRAM0_BAR_A 0x77c0
+ 
+ #define EDRAM0_SIZE_S    0
+ #define EDRAM0_SIZE_M    0xfffU
+ #define EDRAM0_SIZE_V(x) ((x) << EDRAM0_SIZE_S)
+ #define EDRAM0_SIZE_G(x) (((x) >> EDRAM0_SIZE_S) & EDRAM0_SIZE_M)
+ 
+ #define MA_EDRAM1_BAR_A 0x77c4
+ 
+ #define EDRAM1_SIZE_S    0
+ #define EDRAM1_SIZE_M    0xfffU
+ #define EDRAM1_SIZE_V(x) ((x) << EDRAM1_SIZE_S)
+ #define EDRAM1_SIZE_G(x) (((x) >> EDRAM1_SIZE_S) & EDRAM1_SIZE_M)
+ 
+ #define MA_EXT_MEMORY_BAR_A 0x77c8
+ 
+ #define EXT_MEM_SIZE_S    0
+ #define EXT_MEM_SIZE_M    0xfffU
+ #define EXT_MEM_SIZE_V(x) ((x) << EXT_MEM_SIZE_S)
+ #define EXT_MEM_SIZE_G(x) (((x) >> EXT_MEM_SIZE_S) & EXT_MEM_SIZE_M)
+ 
+ #define MA_EXT_MEMORY1_BAR_A 0x7808
+ 
+ #define EXT_MEM1_SIZE_S    0
+ #define EXT_MEM1_SIZE_M    0xfffU
+ #define EXT_MEM1_SIZE_V(x) ((x) << EXT_MEM1_SIZE_S)
+ #define EXT_MEM1_SIZE_G(x) (((x) >> EXT_MEM1_SIZE_S) & EXT_MEM1_SIZE_M)
+ 
+ #define MA_EXT_MEMORY0_BAR_A 0x77c8
+ 
+ #define EXT_MEM0_SIZE_S    0
+ #define EXT_MEM0_SIZE_M    0xfffU
+ #define EXT_MEM0_SIZE_V(x) ((x) << EXT_MEM0_SIZE_S)
+ #define EXT_MEM0_SIZE_G(x) (((x) >> EXT_MEM0_SIZE_S) & EXT_MEM0_SIZE_M)
+ 
+ #define MA_TARGET_MEM_ENABLE_A 0x77d8
+ 
+ #define EXT_MEM_ENABLE_S    2
+ #define EXT_MEM_ENABLE_V(x) ((x) << EXT_MEM_ENABLE_S)
+ #define EXT_MEM_ENABLE_F    EXT_MEM_ENABLE_V(1U)
+ 
+ #define EDRAM1_ENABLE_S    1
+ #define EDRAM1_ENABLE_V(x) ((x) << EDRAM1_ENABLE_S)
+ #define EDRAM1_ENABLE_F    EDRAM1_ENABLE_V(1U)
+ 
+ #define EDRAM0_ENABLE_S    0
+ #define EDRAM0_ENABLE_V(x) ((x) << EDRAM0_ENABLE_S)
+ #define EDRAM0_ENABLE_F    EDRAM0_ENABLE_V(1U)
+ 
+ #define EXT_MEM1_ENABLE_S    4
+ #define EXT_MEM1_ENABLE_V(x) ((x) << EXT_MEM1_ENABLE_S)
+ #define EXT_MEM1_ENABLE_F    EXT_MEM1_ENABLE_V(1U)
+ 
+ #define EXT_MEM0_ENABLE_S    2
+ #define EXT_MEM0_ENABLE_V(x) ((x) << EXT_MEM0_ENABLE_S)
+ #define EXT_MEM0_ENABLE_F    EXT_MEM0_ENABLE_V(1U)
+ 
+ #define MA_INT_CAUSE_A	0x77e0
+ 
+ #define MEM_PERR_INT_CAUSE_S    1
+ #define MEM_PERR_INT_CAUSE_V(x) ((x) << MEM_PERR_INT_CAUSE_S)
+ #define MEM_PERR_INT_CAUSE_F    MEM_PERR_INT_CAUSE_V(1U)
+ 
+ #define MEM_WRAP_INT_CAUSE_S    0
+ #define MEM_WRAP_INT_CAUSE_V(x) ((x) << MEM_WRAP_INT_CAUSE_S)
+ #define MEM_WRAP_INT_CAUSE_F    MEM_WRAP_INT_CAUSE_V(1U)
+ 
+ #define MA_INT_WRAP_STATUS_A	0x77e4
+ 
+ #define MEM_WRAP_ADDRESS_S    4
+ #define MEM_WRAP_ADDRESS_M    0xfffffffU
+ #define MEM_WRAP_ADDRESS_G(x) (((x) >> MEM_WRAP_ADDRESS_S) & MEM_WRAP_ADDRESS_M)
+ 
+ #define MEM_WRAP_CLIENT_NUM_S    0
+ #define MEM_WRAP_CLIENT_NUM_M    0xfU
+ #define MEM_WRAP_CLIENT_NUM_G(x) \
+ 	(((x) >> MEM_WRAP_CLIENT_NUM_S) & MEM_WRAP_CLIENT_NUM_M)
+ 
+ #define MA_PARITY_ERROR_STATUS_A	0x77f4
+ #define MA_PARITY_ERROR_STATUS1_A	0x77f4
+ #define MA_PARITY_ERROR_STATUS2_A	0x7804
+ 
+ /* registers for module EDC_0 */
+ #define EDC_0_BASE_ADDR		0x7900
+ 
+ #define EDC_BIST_CMD_A		0x7904
+ #define EDC_BIST_CMD_ADDR_A	0x7908
+ #define EDC_BIST_CMD_LEN_A	0x790c
+ #define EDC_BIST_DATA_PATTERN_A 0x7910
+ #define EDC_BIST_STATUS_RDATA_A	0x7928
+ #define EDC_INT_CAUSE_A		0x7978
+ 
+ #define ECC_UE_PAR_S    5
+ #define ECC_UE_PAR_V(x) ((x) << ECC_UE_PAR_S)
+ #define ECC_UE_PAR_F    ECC_UE_PAR_V(1U)
+ 
+ #define ECC_CE_PAR_S    4
+ #define ECC_CE_PAR_V(x) ((x) << ECC_CE_PAR_S)
+ #define ECC_CE_PAR_F    ECC_CE_PAR_V(1U)
+ 
+ #define PERR_PAR_CAUSE_S    3
+ #define PERR_PAR_CAUSE_V(x) ((x) << PERR_PAR_CAUSE_S)
+ #define PERR_PAR_CAUSE_F    PERR_PAR_CAUSE_V(1U)
+ 
+ #define EDC_ECC_STATUS_A	0x797c
+ 
+ /* registers for module EDC_1 */
+ #define EDC_1_BASE_ADDR	0x7980
+ 
+ /* registers for module CIM */
+ #define CIM_BOOT_CFG_A 0x7b00
+ #define CIM_PF_MAILBOX_CTRL_SHADOW_COPY_A 0x290
+ 
+ #define  BOOTADDR_M	0xffffff00U
+ 
+ #define UPCRST_S    0
+ #define UPCRST_V(x) ((x) << UPCRST_S)
+ #define UPCRST_F    UPCRST_V(1U)
+ 
+ #define CIM_PF_MAILBOX_DATA_A 0x240
+ #define CIM_PF_MAILBOX_CTRL_A 0x280
+ 
+ #define MBMSGVALID_S    3
+ #define MBMSGVALID_V(x) ((x) << MBMSGVALID_S)
+ #define MBMSGVALID_F    MBMSGVALID_V(1U)
+ 
+ #define MBINTREQ_S    2
+ #define MBINTREQ_V(x) ((x) << MBINTREQ_S)
+ #define MBINTREQ_F    MBINTREQ_V(1U)
+ 
+ #define MBOWNER_S    0
+ #define MBOWNER_M    0x3U
+ #define MBOWNER_V(x) ((x) << MBOWNER_S)
+ #define MBOWNER_G(x) (((x) >> MBOWNER_S) & MBOWNER_M)
+ 
+ #define CIM_PF_HOST_INT_ENABLE_A 0x288
+ 
+ #define MBMSGRDYINTEN_S    19
+ #define MBMSGRDYINTEN_V(x) ((x) << MBMSGRDYINTEN_S)
+ #define MBMSGRDYINTEN_F    MBMSGRDYINTEN_V(1U)
+ 
+ #define CIM_PF_HOST_INT_CAUSE_A 0x28c
+ 
+ #define MBMSGRDYINT_S    19
+ #define MBMSGRDYINT_V(x) ((x) << MBMSGRDYINT_S)
+ #define MBMSGRDYINT_F    MBMSGRDYINT_V(1U)
+ 
+ #define CIM_HOST_INT_CAUSE_A 0x7b2c
+ 
+ #define TIEQOUTPARERRINT_S    20
+ #define TIEQOUTPARERRINT_V(x) ((x) << TIEQOUTPARERRINT_S)
+ #define TIEQOUTPARERRINT_F    TIEQOUTPARERRINT_V(1U)
+ 
+ #define TIEQINPARERRINT_S    19
+ #define TIEQINPARERRINT_V(x) ((x) << TIEQINPARERRINT_S)
+ #define TIEQINPARERRINT_F    TIEQINPARERRINT_V(1U)
+ 
+ #define PREFDROPINT_S    1
+ #define PREFDROPINT_V(x) ((x) << PREFDROPINT_S)
+ #define PREFDROPINT_F    PREFDROPINT_V(1U)
+ 
+ #define UPACCNONZERO_S    0
+ #define UPACCNONZERO_V(x) ((x) << UPACCNONZERO_S)
+ #define UPACCNONZERO_F    UPACCNONZERO_V(1U)
+ 
+ #define MBHOSTPARERR_S    18
+ #define MBHOSTPARERR_V(x) ((x) << MBHOSTPARERR_S)
+ #define MBHOSTPARERR_F    MBHOSTPARERR_V(1U)
+ 
+ #define MBUPPARERR_S    17
+ #define MBUPPARERR_V(x) ((x) << MBUPPARERR_S)
+ #define MBUPPARERR_F    MBUPPARERR_V(1U)
+ 
+ #define IBQTP0PARERR_S    16
+ #define IBQTP0PARERR_V(x) ((x) << IBQTP0PARERR_S)
+ #define IBQTP0PARERR_F    IBQTP0PARERR_V(1U)
+ 
+ #define IBQTP1PARERR_S    15
+ #define IBQTP1PARERR_V(x) ((x) << IBQTP1PARERR_S)
+ #define IBQTP1PARERR_F    IBQTP1PARERR_V(1U)
+ 
+ #define IBQULPPARERR_S    14
+ #define IBQULPPARERR_V(x) ((x) << IBQULPPARERR_S)
+ #define IBQULPPARERR_F    IBQULPPARERR_V(1U)
+ 
+ #define IBQSGELOPARERR_S    13
+ #define IBQSGELOPARERR_V(x) ((x) << IBQSGELOPARERR_S)
+ #define IBQSGELOPARERR_F    IBQSGELOPARERR_V(1U)
+ 
+ #define IBQSGEHIPARERR_S    12
+ #define IBQSGEHIPARERR_V(x) ((x) << IBQSGEHIPARERR_S)
+ #define IBQSGEHIPARERR_F    IBQSGEHIPARERR_V(1U)
+ 
+ #define IBQNCSIPARERR_S    11
+ #define IBQNCSIPARERR_V(x) ((x) << IBQNCSIPARERR_S)
+ #define IBQNCSIPARERR_F    IBQNCSIPARERR_V(1U)
+ 
+ #define OBQULP0PARERR_S    10
+ #define OBQULP0PARERR_V(x) ((x) << OBQULP0PARERR_S)
+ #define OBQULP0PARERR_F    OBQULP0PARERR_V(1U)
+ 
+ #define OBQULP1PARERR_S    9
+ #define OBQULP1PARERR_V(x) ((x) << OBQULP1PARERR_S)
+ #define OBQULP1PARERR_F    OBQULP1PARERR_V(1U)
+ 
+ #define OBQULP2PARERR_S    8
+ #define OBQULP2PARERR_V(x) ((x) << OBQULP2PARERR_S)
+ #define OBQULP2PARERR_F    OBQULP2PARERR_V(1U)
+ 
+ #define OBQULP3PARERR_S    7
+ #define OBQULP3PARERR_V(x) ((x) << OBQULP3PARERR_S)
+ #define OBQULP3PARERR_F    OBQULP3PARERR_V(1U)
+ 
+ #define OBQSGEPARERR_S    6
+ #define OBQSGEPARERR_V(x) ((x) << OBQSGEPARERR_S)
+ #define OBQSGEPARERR_F    OBQSGEPARERR_V(1U)
+ 
+ #define OBQNCSIPARERR_S    5
+ #define OBQNCSIPARERR_V(x) ((x) << OBQNCSIPARERR_S)
+ #define OBQNCSIPARERR_F    OBQNCSIPARERR_V(1U)
+ 
+ #define CIM_HOST_UPACC_INT_CAUSE_A 0x7b34
+ 
+ #define EEPROMWRINT_S    30
+ #define EEPROMWRINT_V(x) ((x) << EEPROMWRINT_S)
+ #define EEPROMWRINT_F    EEPROMWRINT_V(1U)
+ 
+ #define TIMEOUTMAINT_S    29
+ #define TIMEOUTMAINT_V(x) ((x) << TIMEOUTMAINT_S)
+ #define TIMEOUTMAINT_F    TIMEOUTMAINT_V(1U)
+ 
+ #define TIMEOUTINT_S    28
+ #define TIMEOUTINT_V(x) ((x) << TIMEOUTINT_S)
+ #define TIMEOUTINT_F    TIMEOUTINT_V(1U)
+ 
+ #define RSPOVRLOOKUPINT_S    27
+ #define RSPOVRLOOKUPINT_V(x) ((x) << RSPOVRLOOKUPINT_S)
+ #define RSPOVRLOOKUPINT_F    RSPOVRLOOKUPINT_V(1U)
+ 
+ #define REQOVRLOOKUPINT_S    26
+ #define REQOVRLOOKUPINT_V(x) ((x) << REQOVRLOOKUPINT_S)
+ #define REQOVRLOOKUPINT_F    REQOVRLOOKUPINT_V(1U)
+ 
+ #define BLKWRPLINT_S    25
+ #define BLKWRPLINT_V(x) ((x) << BLKWRPLINT_S)
+ #define BLKWRPLINT_F    BLKWRPLINT_V(1U)
+ 
+ #define BLKRDPLINT_S    24
+ #define BLKRDPLINT_V(x) ((x) << BLKRDPLINT_S)
+ #define BLKRDPLINT_F    BLKRDPLINT_V(1U)
+ 
+ #define SGLWRPLINT_S    23
+ #define SGLWRPLINT_V(x) ((x) << SGLWRPLINT_S)
+ #define SGLWRPLINT_F    SGLWRPLINT_V(1U)
+ 
+ #define SGLRDPLINT_S    22
+ #define SGLRDPLINT_V(x) ((x) << SGLRDPLINT_S)
+ #define SGLRDPLINT_F    SGLRDPLINT_V(1U)
+ 
+ #define BLKWRCTLINT_S    21
+ #define BLKWRCTLINT_V(x) ((x) << BLKWRCTLINT_S)
+ #define BLKWRCTLINT_F    BLKWRCTLINT_V(1U)
+ 
+ #define BLKRDCTLINT_S    20
+ #define BLKRDCTLINT_V(x) ((x) << BLKRDCTLINT_S)
+ #define BLKRDCTLINT_F    BLKRDCTLINT_V(1U)
+ 
+ #define SGLWRCTLINT_S    19
+ #define SGLWRCTLINT_V(x) ((x) << SGLWRCTLINT_S)
+ #define SGLWRCTLINT_F    SGLWRCTLINT_V(1U)
+ 
+ #define SGLRDCTLINT_S    18
+ #define SGLRDCTLINT_V(x) ((x) << SGLRDCTLINT_S)
+ #define SGLRDCTLINT_F    SGLRDCTLINT_V(1U)
+ 
+ #define BLKWREEPROMINT_S    17
+ #define BLKWREEPROMINT_V(x) ((x) << BLKWREEPROMINT_S)
+ #define BLKWREEPROMINT_F    BLKWREEPROMINT_V(1U)
+ 
+ #define BLKRDEEPROMINT_S    16
+ #define BLKRDEEPROMINT_V(x) ((x) << BLKRDEEPROMINT_S)
+ #define BLKRDEEPROMINT_F    BLKRDEEPROMINT_V(1U)
+ 
+ #define SGLWREEPROMINT_S    15
+ #define SGLWREEPROMINT_V(x) ((x) << SGLWREEPROMINT_S)
+ #define SGLWREEPROMINT_F    SGLWREEPROMINT_V(1U)
+ 
+ #define SGLRDEEPROMINT_S    14
+ #define SGLRDEEPROMINT_V(x) ((x) << SGLRDEEPROMINT_S)
+ #define SGLRDEEPROMINT_F    SGLRDEEPROMINT_V(1U)
+ 
+ #define BLKWRFLASHINT_S    13
+ #define BLKWRFLASHINT_V(x) ((x) << BLKWRFLASHINT_S)
+ #define BLKWRFLASHINT_F    BLKWRFLASHINT_V(1U)
+ 
+ #define BLKRDFLASHINT_S    12
+ #define BLKRDFLASHINT_V(x) ((x) << BLKRDFLASHINT_S)
+ #define BLKRDFLASHINT_F    BLKRDFLASHINT_V(1U)
+ 
+ #define SGLWRFLASHINT_S    11
+ #define SGLWRFLASHINT_V(x) ((x) << SGLWRFLASHINT_S)
+ #define SGLWRFLASHINT_F    SGLWRFLASHINT_V(1U)
+ 
+ #define SGLRDFLASHINT_S    10
+ #define SGLRDFLASHINT_V(x) ((x) << SGLRDFLASHINT_S)
+ #define SGLRDFLASHINT_F    SGLRDFLASHINT_V(1U)
+ 
+ #define BLKWRBOOTINT_S    9
+ #define BLKWRBOOTINT_V(x) ((x) << BLKWRBOOTINT_S)
+ #define BLKWRBOOTINT_F    BLKWRBOOTINT_V(1U)
+ 
+ #define BLKRDBOOTINT_S    8
+ #define BLKRDBOOTINT_V(x) ((x) << BLKRDBOOTINT_S)
+ #define BLKRDBOOTINT_F    BLKRDBOOTINT_V(1U)
+ 
+ #define SGLWRBOOTINT_S    7
+ #define SGLWRBOOTINT_V(x) ((x) << SGLWRBOOTINT_S)
+ #define SGLWRBOOTINT_F    SGLWRBOOTINT_V(1U)
+ 
+ #define SGLRDBOOTINT_S    6
+ #define SGLRDBOOTINT_V(x) ((x) << SGLRDBOOTINT_S)
+ #define SGLRDBOOTINT_F    SGLRDBOOTINT_V(1U)
+ 
+ #define ILLWRBEINT_S    5
+ #define ILLWRBEINT_V(x) ((x) << ILLWRBEINT_S)
+ #define ILLWRBEINT_F    ILLWRBEINT_V(1U)
+ 
+ #define ILLRDBEINT_S    4
+ #define ILLRDBEINT_V(x) ((x) << ILLRDBEINT_S)
+ #define ILLRDBEINT_F    ILLRDBEINT_V(1U)
+ 
+ #define ILLRDINT_S    3
+ #define ILLRDINT_V(x) ((x) << ILLRDINT_S)
+ #define ILLRDINT_F    ILLRDINT_V(1U)
+ 
+ #define ILLWRINT_S    2
+ #define ILLWRINT_V(x) ((x) << ILLWRINT_S)
+ #define ILLWRINT_F    ILLWRINT_V(1U)
+ 
+ #define ILLTRANSINT_S    1
+ #define ILLTRANSINT_V(x) ((x) << ILLTRANSINT_S)
+ #define ILLTRANSINT_F    ILLTRANSINT_V(1U)
+ 
+ #define RSVDSPACEINT_S    0
+ #define RSVDSPACEINT_V(x) ((x) << RSVDSPACEINT_S)
+ #define RSVDSPACEINT_F    RSVDSPACEINT_V(1U)
+ 
+ /* registers for module TP */
+ #define DBGLAWHLF_S    23
+ #define DBGLAWHLF_V(x) ((x) << DBGLAWHLF_S)
+ #define DBGLAWHLF_F    DBGLAWHLF_V(1U)
+ 
+ #define DBGLAWPTR_S    16
+ #define DBGLAWPTR_M    0x7fU
+ #define DBGLAWPTR_G(x) (((x) >> DBGLAWPTR_S) & DBGLAWPTR_M)
+ 
+ #define DBGLAENABLE_S    12
+ #define DBGLAENABLE_V(x) ((x) << DBGLAENABLE_S)
+ #define DBGLAENABLE_F    DBGLAENABLE_V(1U)
+ 
+ #define DBGLARPTR_S    0
+ #define DBGLARPTR_M    0x7fU
+ #define DBGLARPTR_V(x) ((x) << DBGLARPTR_S)
+ 
+ #define TP_DBG_LA_DATAL_A	0x7ed8
+ #define TP_DBG_LA_CONFIG_A	0x7ed4
+ #define TP_OUT_CONFIG_A		0x7d04
+ #define TP_GLOBAL_CONFIG_A	0x7d08
+ 
+ #define DBGLAMODE_S	14
+ #define DBGLAMODE_M	0x3U
+ #define DBGLAMODE_G(x)	(((x) >> DBGLAMODE_S) & DBGLAMODE_M)
+ 
+ #define FIVETUPLELOOKUP_S    17
+ #define FIVETUPLELOOKUP_M    0x3U
+ #define FIVETUPLELOOKUP_V(x) ((x) << FIVETUPLELOOKUP_S)
+ #define FIVETUPLELOOKUP_G(x) (((x) >> FIVETUPLELOOKUP_S) & FIVETUPLELOOKUP_M)
+ 
+ #define TP_PARA_REG2_A 0x7d68
+ 
+ #define MAXRXDATA_S    16
+ #define MAXRXDATA_M    0xffffU
+ #define MAXRXDATA_G(x) (((x) >> MAXRXDATA_S) & MAXRXDATA_M)
+ 
+ #define TP_TIMER_RESOLUTION_A 0x7d90
+ 
+ #define TIMERRESOLUTION_S    16
+ #define TIMERRESOLUTION_M    0xffU
+ #define TIMERRESOLUTION_G(x) (((x) >> TIMERRESOLUTION_S) & TIMERRESOLUTION_M)
+ 
+ #define TIMESTAMPRESOLUTION_S    8
+ #define TIMESTAMPRESOLUTION_M    0xffU
+ #define TIMESTAMPRESOLUTION_G(x) \
+ 	(((x) >> TIMESTAMPRESOLUTION_S) & TIMESTAMPRESOLUTION_M)
+ 
+ #define DELAYEDACKRESOLUTION_S    0
+ #define DELAYEDACKRESOLUTION_M    0xffU
+ #define DELAYEDACKRESOLUTION_G(x) \
+ 	(((x) >> DELAYEDACKRESOLUTION_S) & DELAYEDACKRESOLUTION_M)
+ 
+ #define TP_SHIFT_CNT_A 0x7dc0
+ #define TP_RXT_MIN_A 0x7d98
+ #define TP_RXT_MAX_A 0x7d9c
+ #define TP_PERS_MIN_A 0x7da0
+ #define TP_PERS_MAX_A 0x7da4
+ #define TP_KEEP_IDLE_A 0x7da8
+ #define TP_KEEP_INTVL_A 0x7dac
+ #define TP_INIT_SRTT_A 0x7db0
+ #define TP_DACK_TIMER_A 0x7db4
+ #define TP_FINWAIT2_TIMER_A 0x7db8
+ 
+ #define INITSRTT_S    0
+ #define INITSRTT_M    0xffffU
+ #define INITSRTT_G(x) (((x) >> INITSRTT_S) & INITSRTT_M)
+ 
+ #define PERSMAX_S    0
+ #define PERSMAX_M    0x3fffffffU
+ #define PERSMAX_V(x) ((x) << PERSMAX_S)
+ #define PERSMAX_G(x) (((x) >> PERSMAX_S) & PERSMAX_M)
+ 
+ #define SYNSHIFTMAX_S    24
+ #define SYNSHIFTMAX_M    0xffU
+ #define SYNSHIFTMAX_V(x) ((x) << SYNSHIFTMAX_S)
+ #define SYNSHIFTMAX_G(x) (((x) >> SYNSHIFTMAX_S) & SYNSHIFTMAX_M)
+ 
+ #define RXTSHIFTMAXR1_S    20
+ #define RXTSHIFTMAXR1_M    0xfU
+ #define RXTSHIFTMAXR1_V(x) ((x) << RXTSHIFTMAXR1_S)
+ #define RXTSHIFTMAXR1_G(x) (((x) >> RXTSHIFTMAXR1_S) & RXTSHIFTMAXR1_M)
+ 
+ #define RXTSHIFTMAXR2_S    16
+ #define RXTSHIFTMAXR2_M    0xfU
+ #define RXTSHIFTMAXR2_V(x) ((x) << RXTSHIFTMAXR2_S)
+ #define RXTSHIFTMAXR2_G(x) (((x) >> RXTSHIFTMAXR2_S) & RXTSHIFTMAXR2_M)
+ 
+ #define PERSHIFTBACKOFFMAX_S    12
+ #define PERSHIFTBACKOFFMAX_M    0xfU
+ #define PERSHIFTBACKOFFMAX_V(x) ((x) << PERSHIFTBACKOFFMAX_S)
+ #define PERSHIFTBACKOFFMAX_G(x) \
+ 	(((x) >> PERSHIFTBACKOFFMAX_S) & PERSHIFTBACKOFFMAX_M)
+ 
+ #define PERSHIFTMAX_S    8
+ #define PERSHIFTMAX_M    0xfU
+ #define PERSHIFTMAX_V(x) ((x) << PERSHIFTMAX_S)
+ #define PERSHIFTMAX_G(x) (((x) >> PERSHIFTMAX_S) & PERSHIFTMAX_M)
+ 
+ #define KEEPALIVEMAXR1_S    4
+ #define KEEPALIVEMAXR1_M    0xfU
+ #define KEEPALIVEMAXR1_V(x) ((x) << KEEPALIVEMAXR1_S)
+ #define KEEPALIVEMAXR1_G(x) (((x) >> KEEPALIVEMAXR1_S) & KEEPALIVEMAXR1_M)
+ 
+ #define KEEPALIVEMAXR2_S    0
+ #define KEEPALIVEMAXR2_M    0xfU
+ #define KEEPALIVEMAXR2_V(x) ((x) << KEEPALIVEMAXR2_S)
+ #define KEEPALIVEMAXR2_G(x) (((x) >> KEEPALIVEMAXR2_S) & KEEPALIVEMAXR2_M)
+ 
+ #define ROWINDEX_S    16
+ #define ROWINDEX_V(x) ((x) << ROWINDEX_S)
+ 
+ #define TP_CCTRL_TABLE_A	0x7ddc
+ #define TP_MTU_TABLE_A		0x7de4
+ 
+ #define MTUINDEX_S    24
+ #define MTUINDEX_V(x) ((x) << MTUINDEX_S)
+ 
+ #define MTUWIDTH_S    16
+ #define MTUWIDTH_M    0xfU
+ #define MTUWIDTH_V(x) ((x) << MTUWIDTH_S)
+ #define MTUWIDTH_G(x) (((x) >> MTUWIDTH_S) & MTUWIDTH_M)
+ 
+ #define MTUVALUE_S    0
+ #define MTUVALUE_M    0x3fffU
+ #define MTUVALUE_V(x) ((x) << MTUVALUE_S)
+ #define MTUVALUE_G(x) (((x) >> MTUVALUE_S) & MTUVALUE_M)
+ 
+ #define TP_RSS_LKP_TABLE_A	0x7dec
+ 
+ #define LKPTBLROWVLD_S    31
+ #define LKPTBLROWVLD_V(x) ((x) << LKPTBLROWVLD_S)
+ #define LKPTBLROWVLD_F    LKPTBLROWVLD_V(1U)
+ 
+ #define LKPTBLQUEUE1_S    10
+ #define LKPTBLQUEUE1_M    0x3ffU
+ #define LKPTBLQUEUE1_G(x) (((x) >> LKPTBLQUEUE1_S) & LKPTBLQUEUE1_M)
+ 
+ #define LKPTBLQUEUE0_S    0
+ #define LKPTBLQUEUE0_M    0x3ffU
+ #define LKPTBLQUEUE0_G(x) (((x) >> LKPTBLQUEUE0_S) & LKPTBLQUEUE0_M)
+ 
+ #define TP_PIO_ADDR_A	0x7e40
+ #define TP_PIO_DATA_A	0x7e44
+ #define TP_MIB_INDEX_A	0x7e50
+ #define TP_MIB_DATA_A	0x7e54
+ #define TP_INT_CAUSE_A	0x7e74
+ 
+ #define FLMTXFLSTEMPTY_S    30
+ #define FLMTXFLSTEMPTY_V(x) ((x) << FLMTXFLSTEMPTY_S)
+ #define FLMTXFLSTEMPTY_F    FLMTXFLSTEMPTY_V(1U)
+ 
+ #define TP_VLAN_PRI_MAP_A 0x140
+ 
+ #define FRAGMENTATION_S    9
+ #define FRAGMENTATION_V(x) ((x) << FRAGMENTATION_S)
+ #define FRAGMENTATION_F    FRAGMENTATION_V(1U)
+ 
+ #define MPSHITTYPE_S    8
+ #define MPSHITTYPE_V(x) ((x) << MPSHITTYPE_S)
+ #define MPSHITTYPE_F    MPSHITTYPE_V(1U)
+ 
+ #define MACMATCH_S    7
+ #define MACMATCH_V(x) ((x) << MACMATCH_S)
+ #define MACMATCH_F    MACMATCH_V(1U)
+ 
+ #define ETHERTYPE_S    6
+ #define ETHERTYPE_V(x) ((x) << ETHERTYPE_S)
+ #define ETHERTYPE_F    ETHERTYPE_V(1U)
+ 
+ #define PROTOCOL_S    5
+ #define PROTOCOL_V(x) ((x) << PROTOCOL_S)
+ #define PROTOCOL_F    PROTOCOL_V(1U)
+ 
+ #define TOS_S    4
+ #define TOS_V(x) ((x) << TOS_S)
+ #define TOS_F    TOS_V(1U)
+ 
+ #define VLAN_S    3
+ #define VLAN_V(x) ((x) << VLAN_S)
+ #define VLAN_F    VLAN_V(1U)
+ 
+ #define VNIC_ID_S    2
+ #define VNIC_ID_V(x) ((x) << VNIC_ID_S)
+ #define VNIC_ID_F    VNIC_ID_V(1U)
+ 
+ #define PORT_S    1
+ #define PORT_V(x) ((x) << PORT_S)
+ #define PORT_F    PORT_V(1U)
+ 
+ #define FCOE_S    0
+ #define FCOE_V(x) ((x) << FCOE_S)
+ #define FCOE_F    FCOE_V(1U)
+ 
+ #define FILTERMODE_S    15
+ #define FILTERMODE_V(x) ((x) << FILTERMODE_S)
+ #define FILTERMODE_F    FILTERMODE_V(1U)
+ 
+ #define FCOEMASK_S    14
+ #define FCOEMASK_V(x) ((x) << FCOEMASK_S)
+ #define FCOEMASK_F    FCOEMASK_V(1U)
+ 
+ #define TP_INGRESS_CONFIG_A	0x141
+ 
+ #define VNIC_S    11
+ #define VNIC_V(x) ((x) << VNIC_S)
+ #define VNIC_F    VNIC_V(1U)
+ 
+ #define CSUM_HAS_PSEUDO_HDR_S    10
+ #define CSUM_HAS_PSEUDO_HDR_V(x) ((x) << CSUM_HAS_PSEUDO_HDR_S)
+ #define CSUM_HAS_PSEUDO_HDR_F    CSUM_HAS_PSEUDO_HDR_V(1U)
+ 
+ #define TP_MIB_MAC_IN_ERR_0_A	0x0
+ #define TP_MIB_TCP_OUT_RST_A	0xc
+ #define TP_MIB_TCP_IN_SEG_HI_A	0x10
+ #define TP_MIB_TCP_IN_SEG_LO_A	0x11
+ #define TP_MIB_TCP_OUT_SEG_HI_A	0x12
+ #define TP_MIB_TCP_OUT_SEG_LO_A 0x13
+ #define TP_MIB_TCP_RXT_SEG_HI_A	0x14
+ #define TP_MIB_TCP_RXT_SEG_LO_A	0x15
+ #define TP_MIB_TNL_CNG_DROP_0_A 0x18
+ #define TP_MIB_TCP_V6IN_ERR_0_A 0x28
+ #define TP_MIB_TCP_V6OUT_RST_A	0x2c
+ #define TP_MIB_OFD_ARP_DROP_A	0x36
+ #define TP_MIB_TNL_DROP_0_A	0x44
+ #define TP_MIB_OFD_VLN_DROP_0_A	0x58
+ 
+ #define ULP_TX_INT_CAUSE_A	0x8dcc
+ 
+ #define PBL_BOUND_ERR_CH3_S    31
+ #define PBL_BOUND_ERR_CH3_V(x) ((x) << PBL_BOUND_ERR_CH3_S)
+ #define PBL_BOUND_ERR_CH3_F    PBL_BOUND_ERR_CH3_V(1U)
+ 
+ #define PBL_BOUND_ERR_CH2_S    30
+ #define PBL_BOUND_ERR_CH2_V(x) ((x) << PBL_BOUND_ERR_CH2_S)
+ #define PBL_BOUND_ERR_CH2_F    PBL_BOUND_ERR_CH2_V(1U)
+ 
+ #define PBL_BOUND_ERR_CH1_S    29
+ #define PBL_BOUND_ERR_CH1_V(x) ((x) << PBL_BOUND_ERR_CH1_S)
+ #define PBL_BOUND_ERR_CH1_F    PBL_BOUND_ERR_CH1_V(1U)
+ 
+ #define PBL_BOUND_ERR_CH0_S    28
+ #define PBL_BOUND_ERR_CH0_V(x) ((x) << PBL_BOUND_ERR_CH0_S)
+ #define PBL_BOUND_ERR_CH0_F    PBL_BOUND_ERR_CH0_V(1U)
+ 
+ #define PM_RX_INT_CAUSE_A	0x8fdc
+ #define PM_RX_STAT_CONFIG_A 0x8fc8
+ #define PM_RX_STAT_COUNT_A 0x8fcc
+ #define PM_RX_STAT_LSB_A 0x8fd0
+ #define PM_RX_DBG_CTRL_A 0x8fd0
+ #define PM_RX_DBG_DATA_A 0x8fd4
+ #define PM_RX_DBG_STAT_MSB_A 0x10013
+ 
+ #define PMRX_FRAMING_ERROR_F	0x003ffff0U
+ 
+ #define ZERO_E_CMD_ERROR_S    22
+ #define ZERO_E_CMD_ERROR_V(x) ((x) << ZERO_E_CMD_ERROR_S)
+ #define ZERO_E_CMD_ERROR_F    ZERO_E_CMD_ERROR_V(1U)
+ 
+ #define OCSPI_PAR_ERROR_S    3
+ #define OCSPI_PAR_ERROR_V(x) ((x) << OCSPI_PAR_ERROR_S)
+ #define OCSPI_PAR_ERROR_F    OCSPI_PAR_ERROR_V(1U)
+ 
+ #define DB_OPTIONS_PAR_ERROR_S    2
+ #define DB_OPTIONS_PAR_ERROR_V(x) ((x) << DB_OPTIONS_PAR_ERROR_S)
+ #define DB_OPTIONS_PAR_ERROR_F    DB_OPTIONS_PAR_ERROR_V(1U)
+ 
+ #define IESPI_PAR_ERROR_S    1
+ #define IESPI_PAR_ERROR_V(x) ((x) << IESPI_PAR_ERROR_S)
+ #define IESPI_PAR_ERROR_F    IESPI_PAR_ERROR_V(1U)
+ 
+ #define PMRX_E_PCMD_PAR_ERROR_S    0
+ #define PMRX_E_PCMD_PAR_ERROR_V(x) ((x) << PMRX_E_PCMD_PAR_ERROR_S)
+ #define PMRX_E_PCMD_PAR_ERROR_F    PMRX_E_PCMD_PAR_ERROR_V(1U)
+ 
+ #define PM_TX_INT_CAUSE_A	0x8ffc
+ #define PM_TX_STAT_CONFIG_A 0x8fe8
+ #define PM_TX_STAT_COUNT_A 0x8fec
+ #define PM_TX_STAT_LSB_A 0x8ff0
+ #define PM_TX_DBG_CTRL_A 0x8ff0
+ #define PM_TX_DBG_DATA_A 0x8ff4
+ #define PM_TX_DBG_STAT_MSB_A 0x1001a
+ 
+ #define PCMD_LEN_OVFL0_S    31
+ #define PCMD_LEN_OVFL0_V(x) ((x) << PCMD_LEN_OVFL0_S)
+ #define PCMD_LEN_OVFL0_F    PCMD_LEN_OVFL0_V(1U)
+ 
+ #define PCMD_LEN_OVFL1_S    30
+ #define PCMD_LEN_OVFL1_V(x) ((x) << PCMD_LEN_OVFL1_S)
+ #define PCMD_LEN_OVFL1_F    PCMD_LEN_OVFL1_V(1U)
+ 
+ #define PCMD_LEN_OVFL2_S    29
+ #define PCMD_LEN_OVFL2_V(x) ((x) << PCMD_LEN_OVFL2_S)
+ #define PCMD_LEN_OVFL2_F    PCMD_LEN_OVFL2_V(1U)
+ 
+ #define ZERO_C_CMD_ERROR_S    28
+ #define ZERO_C_CMD_ERROR_V(x) ((x) << ZERO_C_CMD_ERROR_S)
+ #define ZERO_C_CMD_ERROR_F    ZERO_C_CMD_ERROR_V(1U)
+ 
+ #define  PMTX_FRAMING_ERROR_F 0x0ffffff0U
+ 
+ #define OESPI_PAR_ERROR_S    3
+ #define OESPI_PAR_ERROR_V(x) ((x) << OESPI_PAR_ERROR_S)
+ #define OESPI_PAR_ERROR_F    OESPI_PAR_ERROR_V(1U)
+ 
+ #define ICSPI_PAR_ERROR_S    1
+ #define ICSPI_PAR_ERROR_V(x) ((x) << ICSPI_PAR_ERROR_S)
+ #define ICSPI_PAR_ERROR_F    ICSPI_PAR_ERROR_V(1U)
+ 
+ #define PMTX_C_PCMD_PAR_ERROR_S    0
+ #define PMTX_C_PCMD_PAR_ERROR_V(x) ((x) << PMTX_C_PCMD_PAR_ERROR_S)
+ #define PMTX_C_PCMD_PAR_ERROR_F    PMTX_C_PCMD_PAR_ERROR_V(1U)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  #define MPS_PORT_STAT_TX_PORT_BYTES_L 0x400
  #define MPS_PORT_STAT_TX_PORT_BYTES_H 0x404
@@@ -928,195 -1728,895 +2384,1087 @@@
  #define MPS_STAT_RX_BG_2_LB_TRUNC_FRAME_H 0x96b4
  #define MPS_STAT_RX_BG_3_LB_TRUNC_FRAME_L 0x96b8
  #define MPS_STAT_RX_BG_3_LB_TRUNC_FRAME_H 0x96bc
++<<<<<<< HEAD
 +#define MPS_TRC_CFG 0x9800
 +#define  TRCFIFOEMPTY       0x00000010U
 +#define  TRCIGNOREDROPINPUT 0x00000008U
 +#define  TRCKEEPDUPLICATES  0x00000004U
 +#define  TRCEN              0x00000002U
 +#define  TRCMULTIFILTER     0x00000001U
 +
 +#define MPS_TRC_RSS_CONTROL 0x9808
 +#define  RSSCONTROL_MASK    0x00ff0000U
 +#define  RSSCONTROL_SHIFT   16
 +#define  RSSCONTROL(x)      ((x) << RSSCONTROL_SHIFT)
 +#define  QUEUENUMBER_MASK   0x0000ffffU
 +#define  QUEUENUMBER_SHIFT  0
 +#define  QUEUENUMBER(x)     ((x) << QUEUENUMBER_SHIFT)
 +
 +#define MPS_TRC_FILTER_MATCH_CTL_A 0x9810
 +#define  TFINVERTMATCH   0x01000000U
 +#define  TFPKTTOOLARGE   0x00800000U
 +#define  TFEN            0x00400000U
 +#define  TFPORT_MASK     0x003c0000U
 +#define  TFPORT_SHIFT    18
 +#define  TFPORT(x)       ((x) << TFPORT_SHIFT)
 +#define  TFPORT_GET(x)   (((x) & TFPORT_MASK) >> TFPORT_SHIFT)
 +#define  TFDROP          0x00020000U
 +#define  TFSOPEOPERR     0x00010000U
 +#define  TFLENGTH_MASK   0x00001f00U
 +#define  TFLENGTH_SHIFT  8
 +#define  TFLENGTH(x)     ((x) << TFLENGTH_SHIFT)
 +#define  TFLENGTH_GET(x) (((x) & TFLENGTH_MASK) >> TFLENGTH_SHIFT)
 +#define  TFOFFSET_MASK   0x0000001fU
 +#define  TFOFFSET_SHIFT  0
 +#define  TFOFFSET(x)     ((x) << TFOFFSET_SHIFT)
 +#define  TFOFFSET_GET(x) (((x) & TFOFFSET_MASK) >> TFOFFSET_SHIFT)
 +
 +#define MPS_TRC_FILTER_MATCH_CTL_B 0x9820
 +#define  TFMINPKTSIZE_MASK   0x01ff0000U
 +#define  TFMINPKTSIZE_SHIFT  16
 +#define  TFMINPKTSIZE(x)     ((x) << TFMINPKTSIZE_SHIFT)
 +#define  TFMINPKTSIZE_GET(x) (((x) & TFMINPKTSIZE_MASK) >> TFMINPKTSIZE_SHIFT)
 +#define  TFCAPTUREMAX_MASK   0x00003fffU
 +#define  TFCAPTUREMAX_SHIFT  0
 +#define  TFCAPTUREMAX(x)     ((x) << TFCAPTUREMAX_SHIFT)
 +#define  TFCAPTUREMAX_GET(x) (((x) & TFCAPTUREMAX_MASK) >> TFCAPTUREMAX_SHIFT)
 +
 +#define MPS_TRC_INT_CAUSE 0x985c
 +#define  MISCPERR 0x00000100U
 +#define  PKTFIFO  0x000000f0U
 +#define  FILTMEM  0x0000000fU
 +
 +#define MPS_TRC_FILTER0_MATCH 0x9c00
 +#define MPS_TRC_FILTER0_DONT_CARE 0x9c80
 +#define MPS_TRC_FILTER1_MATCH 0x9d00
 +#define MPS_CLS_INT_CAUSE 0xd028
 +#define  PLERRENB  0x00000008U
 +#define  HASHSRAM  0x00000004U
 +#define  MATCHTCAM 0x00000002U
 +#define  MATCHSRAM 0x00000001U
 +
 +#define MPS_RX_PERR_INT_CAUSE 0x11074
 +
 +#define CPL_INTR_CAUSE 0x19054
 +#define  CIM_OP_MAP_PERR   0x00000020U
 +#define  CIM_OVFL_ERROR    0x00000010U
 +#define  TP_FRAMING_ERROR  0x00000008U
 +#define  SGE_FRAMING_ERROR 0x00000004U
 +#define  CIM_FRAMING_ERROR 0x00000002U
 +#define  ZERO_SWITCH_ERROR 0x00000001U
 +
 +#define SMB_INT_CAUSE 0x19090
 +#define  MSTTXFIFOPARINT 0x00200000U
 +#define  MSTRXFIFOPARINT 0x00100000U
 +#define  SLVFIFOPARINT   0x00080000U
 +
 +#define ULP_RX_INT_CAUSE 0x19158
 +#define ULP_RX_ISCSI_TAGMASK 0x19164
 +#define ULP_RX_ISCSI_PSZ 0x19168
 +#define  HPZ3_MASK   0x0f000000U
 +#define  HPZ3_SHIFT  24
 +#define  HPZ3(x)     ((x) << HPZ3_SHIFT)
 +#define  HPZ2_MASK   0x000f0000U
 +#define  HPZ2_SHIFT  16
 +#define  HPZ2(x)     ((x) << HPZ2_SHIFT)
 +#define  HPZ1_MASK   0x00000f00U
 +#define  HPZ1_SHIFT  8
 +#define  HPZ1(x)     ((x) << HPZ1_SHIFT)
 +#define  HPZ0_MASK   0x0000000fU
 +#define  HPZ0_SHIFT  0
 +#define  HPZ0(x)     ((x) << HPZ0_SHIFT)
 +
 +#define ULP_RX_TDDP_PSZ 0x19178
 +
 +#define SF_DATA 0x193f8
 +#define SF_OP 0x193fc
 +#define  SF_BUSY       0x80000000U
 +#define  SF_LOCK       0x00000010U
 +#define  SF_CONT       0x00000008U
 +#define  BYTECNT_MASK  0x00000006U
 +#define  BYTECNT_SHIFT 1
 +#define  BYTECNT(x)    ((x) << BYTECNT_SHIFT)
 +#define  OP_WR         0x00000001U
 +
 +#define PL_PF_INT_CAUSE 0x3c0
 +#define  PFSW  0x00000008U
 +#define  PFSGE 0x00000004U
 +#define  PFCIM 0x00000002U
 +#define  PFMPS 0x00000001U
 +
 +#define PL_PF_INT_ENABLE 0x3c4
 +#define PL_PF_CTL 0x3c8
 +#define  SWINT 0x00000001U
 +
 +#define PL_WHOAMI 0x19400
 +#define  SOURCEPF_MASK   0x00000700U
 +#define  SOURCEPF_SHIFT  8
 +#define  SOURCEPF(x)     ((x) << SOURCEPF_SHIFT)
 +#define  SOURCEPF_GET(x) (((x) & SOURCEPF_MASK) >> SOURCEPF_SHIFT)
 +#define  ISVF            0x00000080U
 +#define  VFID_MASK       0x0000007fU
 +#define  VFID_SHIFT      0
 +#define  VFID(x)         ((x) << VFID_SHIFT)
 +#define  VFID_GET(x)     (((x) & VFID_MASK) >> VFID_SHIFT)
 +
 +#define PL_INT_CAUSE 0x1940c
 +#define  ULP_TX     0x08000000U
 +#define  SGE        0x04000000U
 +#define  HMA        0x02000000U
 +#define  CPL_SWITCH 0x01000000U
 +#define  ULP_RX     0x00800000U
 +#define  PM_RX      0x00400000U
 +#define  PM_TX      0x00200000U
 +#define  MA         0x00100000U
 +#define  TP         0x00080000U
 +#define  LE         0x00040000U
 +#define  EDC1       0x00020000U
 +#define  EDC0       0x00010000U
 +#define  MC         0x00008000U
 +#define  PCIE       0x00004000U
 +#define  PMU        0x00002000U
 +#define  XGMAC_KR1  0x00001000U
 +#define  XGMAC_KR0  0x00000800U
 +#define  XGMAC1     0x00000400U
 +#define  XGMAC0     0x00000200U
 +#define  SMB        0x00000100U
 +#define  SF         0x00000080U
 +#define  PL         0x00000040U
 +#define  NCSI       0x00000020U
 +#define  MPS        0x00000010U
 +#define  MI         0x00000008U
 +#define  DBG        0x00000004U
 +#define  I2CM       0x00000002U
 +#define  CIM        0x00000001U
 +
 +#define PL_INT_ENABLE 0x19410
 +#define PL_INT_MAP0 0x19414
 +#define PL_RST 0x19428
 +#define  PIORST     0x00000002U
 +#define  PIORSTMODE 0x00000001U
 +
 +#define PL_PL_INT_CAUSE 0x19430
 +#define  FATALPERR 0x00000010U
 +#define  PERRVFID  0x00000001U
 +
 +#define PL_REV 0x1943c
 +
 +#define LE_DB_CONFIG 0x19c04
 +#define  HASHEN 0x00100000U
 +
 +#define LE_DB_SERVER_INDEX 0x19c18
 +#define LE_DB_ACT_CNT_IPV4 0x19c20
 +#define LE_DB_ACT_CNT_IPV6 0x19c24
 +
 +#define LE_DB_INT_CAUSE 0x19c3c
 +#define  REQQPARERR 0x00010000U
 +#define  UNKNOWNCMD 0x00008000U
 +#define  PARITYERR  0x00000040U
 +#define  LIPMISS    0x00000020U
 +#define  LIP0       0x00000010U
 +
 +#define LE_DB_TID_HASHBASE 0x19df8
 +
 +#define NCSI_INT_CAUSE 0x1a0d8
 +#define  CIM_DM_PRTY_ERR 0x00000100U
 +#define  MPS_DM_PRTY_ERR 0x00000080U
 +#define  TXFIFO_PRTY_ERR 0x00000002U
 +#define  RXFIFO_PRTY_ERR 0x00000001U
 +
 +#define XGMAC_PORT_CFG2 0x1018
 +#define  PATEN   0x00040000U
 +#define  MAGICEN 0x00020000U
++=======
+ 
+ #define MPS_TRC_CFG_A 0x9800
+ 
+ #define TRCFIFOEMPTY_S    4
+ #define TRCFIFOEMPTY_V(x) ((x) << TRCFIFOEMPTY_S)
+ #define TRCFIFOEMPTY_F    TRCFIFOEMPTY_V(1U)
+ 
+ #define TRCIGNOREDROPINPUT_S    3
+ #define TRCIGNOREDROPINPUT_V(x) ((x) << TRCIGNOREDROPINPUT_S)
+ #define TRCIGNOREDROPINPUT_F    TRCIGNOREDROPINPUT_V(1U)
+ 
+ #define TRCKEEPDUPLICATES_S    2
+ #define TRCKEEPDUPLICATES_V(x) ((x) << TRCKEEPDUPLICATES_S)
+ #define TRCKEEPDUPLICATES_F    TRCKEEPDUPLICATES_V(1U)
+ 
+ #define TRCEN_S    1
+ #define TRCEN_V(x) ((x) << TRCEN_S)
+ #define TRCEN_F    TRCEN_V(1U)
+ 
+ #define TRCMULTIFILTER_S    0
+ #define TRCMULTIFILTER_V(x) ((x) << TRCMULTIFILTER_S)
+ #define TRCMULTIFILTER_F    TRCMULTIFILTER_V(1U)
+ 
+ #define MPS_TRC_RSS_CONTROL_A		0x9808
+ #define MPS_T5_TRC_RSS_CONTROL_A	0xa00c
+ 
+ #define RSSCONTROL_S    16
+ #define RSSCONTROL_V(x) ((x) << RSSCONTROL_S)
+ 
+ #define QUEUENUMBER_S    0
+ #define QUEUENUMBER_V(x) ((x) << QUEUENUMBER_S)
+ 
+ #define TP_RSS_CONFIG_A 0x7df0
+ 
+ #define TNL4TUPENIPV6_S    31
+ #define TNL4TUPENIPV6_V(x) ((x) << TNL4TUPENIPV6_S)
+ #define TNL4TUPENIPV6_F    TNL4TUPENIPV6_V(1U)
+ 
+ #define TNL2TUPENIPV6_S    30
+ #define TNL2TUPENIPV6_V(x) ((x) << TNL2TUPENIPV6_S)
+ #define TNL2TUPENIPV6_F    TNL2TUPENIPV6_V(1U)
+ 
+ #define TNL4TUPENIPV4_S    29
+ #define TNL4TUPENIPV4_V(x) ((x) << TNL4TUPENIPV4_S)
+ #define TNL4TUPENIPV4_F    TNL4TUPENIPV4_V(1U)
+ 
+ #define TNL2TUPENIPV4_S    28
+ #define TNL2TUPENIPV4_V(x) ((x) << TNL2TUPENIPV4_S)
+ #define TNL2TUPENIPV4_F    TNL2TUPENIPV4_V(1U)
+ 
+ #define TNLTCPSEL_S    27
+ #define TNLTCPSEL_V(x) ((x) << TNLTCPSEL_S)
+ #define TNLTCPSEL_F    TNLTCPSEL_V(1U)
+ 
+ #define TNLIP6SEL_S    26
+ #define TNLIP6SEL_V(x) ((x) << TNLIP6SEL_S)
+ #define TNLIP6SEL_F    TNLIP6SEL_V(1U)
+ 
+ #define TNLVRTSEL_S    25
+ #define TNLVRTSEL_V(x) ((x) << TNLVRTSEL_S)
+ #define TNLVRTSEL_F    TNLVRTSEL_V(1U)
+ 
+ #define TNLMAPEN_S    24
+ #define TNLMAPEN_V(x) ((x) << TNLMAPEN_S)
+ #define TNLMAPEN_F    TNLMAPEN_V(1U)
+ 
+ #define OFDHASHSAVE_S    19
+ #define OFDHASHSAVE_V(x) ((x) << OFDHASHSAVE_S)
+ #define OFDHASHSAVE_F    OFDHASHSAVE_V(1U)
+ 
+ #define OFDVRTSEL_S    18
+ #define OFDVRTSEL_V(x) ((x) << OFDVRTSEL_S)
+ #define OFDVRTSEL_F    OFDVRTSEL_V(1U)
+ 
+ #define OFDMAPEN_S    17
+ #define OFDMAPEN_V(x) ((x) << OFDMAPEN_S)
+ #define OFDMAPEN_F    OFDMAPEN_V(1U)
+ 
+ #define OFDLKPEN_S    16
+ #define OFDLKPEN_V(x) ((x) << OFDLKPEN_S)
+ #define OFDLKPEN_F    OFDLKPEN_V(1U)
+ 
+ #define SYN4TUPENIPV6_S    15
+ #define SYN4TUPENIPV6_V(x) ((x) << SYN4TUPENIPV6_S)
+ #define SYN4TUPENIPV6_F    SYN4TUPENIPV6_V(1U)
+ 
+ #define SYN2TUPENIPV6_S    14
+ #define SYN2TUPENIPV6_V(x) ((x) << SYN2TUPENIPV6_S)
+ #define SYN2TUPENIPV6_F    SYN2TUPENIPV6_V(1U)
+ 
+ #define SYN4TUPENIPV4_S    13
+ #define SYN4TUPENIPV4_V(x) ((x) << SYN4TUPENIPV4_S)
+ #define SYN4TUPENIPV4_F    SYN4TUPENIPV4_V(1U)
+ 
+ #define SYN2TUPENIPV4_S    12
+ #define SYN2TUPENIPV4_V(x) ((x) << SYN2TUPENIPV4_S)
+ #define SYN2TUPENIPV4_F    SYN2TUPENIPV4_V(1U)
+ 
+ #define SYNIP6SEL_S    11
+ #define SYNIP6SEL_V(x) ((x) << SYNIP6SEL_S)
+ #define SYNIP6SEL_F    SYNIP6SEL_V(1U)
+ 
+ #define SYNVRTSEL_S    10
+ #define SYNVRTSEL_V(x) ((x) << SYNVRTSEL_S)
+ #define SYNVRTSEL_F    SYNVRTSEL_V(1U)
+ 
+ #define SYNMAPEN_S    9
+ #define SYNMAPEN_V(x) ((x) << SYNMAPEN_S)
+ #define SYNMAPEN_F    SYNMAPEN_V(1U)
+ 
+ #define SYNLKPEN_S    8
+ #define SYNLKPEN_V(x) ((x) << SYNLKPEN_S)
+ #define SYNLKPEN_F    SYNLKPEN_V(1U)
+ 
+ #define CHANNELENABLE_S    7
+ #define CHANNELENABLE_V(x) ((x) << CHANNELENABLE_S)
+ #define CHANNELENABLE_F    CHANNELENABLE_V(1U)
+ 
+ #define PORTENABLE_S    6
+ #define PORTENABLE_V(x) ((x) << PORTENABLE_S)
+ #define PORTENABLE_F    PORTENABLE_V(1U)
+ 
+ #define TNLALLLOOKUP_S    5
+ #define TNLALLLOOKUP_V(x) ((x) << TNLALLLOOKUP_S)
+ #define TNLALLLOOKUP_F    TNLALLLOOKUP_V(1U)
+ 
+ #define VIRTENABLE_S    4
+ #define VIRTENABLE_V(x) ((x) << VIRTENABLE_S)
+ #define VIRTENABLE_F    VIRTENABLE_V(1U)
+ 
+ #define CONGESTIONENABLE_S    3
+ #define CONGESTIONENABLE_V(x) ((x) << CONGESTIONENABLE_S)
+ #define CONGESTIONENABLE_F    CONGESTIONENABLE_V(1U)
+ 
+ #define HASHTOEPLITZ_S    2
+ #define HASHTOEPLITZ_V(x) ((x) << HASHTOEPLITZ_S)
+ #define HASHTOEPLITZ_F    HASHTOEPLITZ_V(1U)
+ 
+ #define UDPENABLE_S    1
+ #define UDPENABLE_V(x) ((x) << UDPENABLE_S)
+ #define UDPENABLE_F    UDPENABLE_V(1U)
+ 
+ #define DISABLE_S    0
+ #define DISABLE_V(x) ((x) << DISABLE_S)
+ #define DISABLE_F    DISABLE_V(1U)
+ 
+ #define TP_RSS_CONFIG_TNL_A 0x7df4
+ 
+ #define MASKSIZE_S    28
+ #define MASKSIZE_M    0xfU
+ #define MASKSIZE_V(x) ((x) << MASKSIZE_S)
+ #define MASKSIZE_G(x) (((x) >> MASKSIZE_S) & MASKSIZE_M)
+ 
+ #define MASKFILTER_S    16
+ #define MASKFILTER_M    0x7ffU
+ #define MASKFILTER_V(x) ((x) << MASKFILTER_S)
+ #define MASKFILTER_G(x) (((x) >> MASKFILTER_S) & MASKFILTER_M)
+ 
+ #define USEWIRECH_S    0
+ #define USEWIRECH_V(x) ((x) << USEWIRECH_S)
+ #define USEWIRECH_F    USEWIRECH_V(1U)
+ 
+ #define HASHALL_S    2
+ #define HASHALL_V(x) ((x) << HASHALL_S)
+ #define HASHALL_F    HASHALL_V(1U)
+ 
+ #define HASHETH_S    1
+ #define HASHETH_V(x) ((x) << HASHETH_S)
+ #define HASHETH_F    HASHETH_V(1U)
+ 
+ #define TP_RSS_CONFIG_OFD_A 0x7df8
+ 
+ #define RRCPLMAPEN_S    20
+ #define RRCPLMAPEN_V(x) ((x) << RRCPLMAPEN_S)
+ #define RRCPLMAPEN_F    RRCPLMAPEN_V(1U)
+ 
+ #define RRCPLQUEWIDTH_S    16
+ #define RRCPLQUEWIDTH_M    0xfU
+ #define RRCPLQUEWIDTH_V(x) ((x) << RRCPLQUEWIDTH_S)
+ #define RRCPLQUEWIDTH_G(x) (((x) >> RRCPLQUEWIDTH_S) & RRCPLQUEWIDTH_M)
+ 
+ #define TP_RSS_CONFIG_SYN_A 0x7dfc
+ #define TP_RSS_CONFIG_VRT_A 0x7e00
+ 
+ #define VFRDRG_S    25
+ #define VFRDRG_V(x) ((x) << VFRDRG_S)
+ #define VFRDRG_F    VFRDRG_V(1U)
+ 
+ #define VFRDEN_S    24
+ #define VFRDEN_V(x) ((x) << VFRDEN_S)
+ #define VFRDEN_F    VFRDEN_V(1U)
+ 
+ #define VFPERREN_S    23
+ #define VFPERREN_V(x) ((x) << VFPERREN_S)
+ #define VFPERREN_F    VFPERREN_V(1U)
+ 
+ #define KEYPERREN_S    22
+ #define KEYPERREN_V(x) ((x) << KEYPERREN_S)
+ #define KEYPERREN_F    KEYPERREN_V(1U)
+ 
+ #define DISABLEVLAN_S    21
+ #define DISABLEVLAN_V(x) ((x) << DISABLEVLAN_S)
+ #define DISABLEVLAN_F    DISABLEVLAN_V(1U)
+ 
+ #define ENABLEUP0_S    20
+ #define ENABLEUP0_V(x) ((x) << ENABLEUP0_S)
+ #define ENABLEUP0_F    ENABLEUP0_V(1U)
+ 
+ #define HASHDELAY_S    16
+ #define HASHDELAY_M    0xfU
+ #define HASHDELAY_V(x) ((x) << HASHDELAY_S)
+ #define HASHDELAY_G(x) (((x) >> HASHDELAY_S) & HASHDELAY_M)
+ 
+ #define VFWRADDR_S    8
+ #define VFWRADDR_M    0x7fU
+ #define VFWRADDR_V(x) ((x) << VFWRADDR_S)
+ #define VFWRADDR_G(x) (((x) >> VFWRADDR_S) & VFWRADDR_M)
+ 
+ #define KEYMODE_S    6
+ #define KEYMODE_M    0x3U
+ #define KEYMODE_V(x) ((x) << KEYMODE_S)
+ #define KEYMODE_G(x) (((x) >> KEYMODE_S) & KEYMODE_M)
+ 
+ #define VFWREN_S    5
+ #define VFWREN_V(x) ((x) << VFWREN_S)
+ #define VFWREN_F    VFWREN_V(1U)
+ 
+ #define KEYWREN_S    4
+ #define KEYWREN_V(x) ((x) << KEYWREN_S)
+ #define KEYWREN_F    KEYWREN_V(1U)
+ 
+ #define KEYWRADDR_S    0
+ #define KEYWRADDR_M    0xfU
+ #define KEYWRADDR_V(x) ((x) << KEYWRADDR_S)
+ #define KEYWRADDR_G(x) (((x) >> KEYWRADDR_S) & KEYWRADDR_M)
+ 
+ #define KEYWRADDRX_S    30
+ #define KEYWRADDRX_M    0x3U
+ #define KEYWRADDRX_V(x) ((x) << KEYWRADDRX_S)
+ #define KEYWRADDRX_G(x) (((x) >> KEYWRADDRX_S) & KEYWRADDRX_M)
+ 
+ #define KEYEXTEND_S    26
+ #define KEYEXTEND_V(x) ((x) << KEYEXTEND_S)
+ #define KEYEXTEND_F    KEYEXTEND_V(1U)
+ 
+ #define LKPIDXSIZE_S    24
+ #define LKPIDXSIZE_M    0x3U
+ #define LKPIDXSIZE_V(x) ((x) << LKPIDXSIZE_S)
+ #define LKPIDXSIZE_G(x) (((x) >> LKPIDXSIZE_S) & LKPIDXSIZE_M)
+ 
+ #define TP_RSS_VFL_CONFIG_A 0x3a
+ #define TP_RSS_VFH_CONFIG_A 0x3b
+ 
+ #define ENABLEUDPHASH_S    31
+ #define ENABLEUDPHASH_V(x) ((x) << ENABLEUDPHASH_S)
+ #define ENABLEUDPHASH_F    ENABLEUDPHASH_V(1U)
+ 
+ #define VFUPEN_S    30
+ #define VFUPEN_V(x) ((x) << VFUPEN_S)
+ #define VFUPEN_F    VFUPEN_V(1U)
+ 
+ #define VFVLNEX_S    28
+ #define VFVLNEX_V(x) ((x) << VFVLNEX_S)
+ #define VFVLNEX_F    VFVLNEX_V(1U)
+ 
+ #define VFPRTEN_S    27
+ #define VFPRTEN_V(x) ((x) << VFPRTEN_S)
+ #define VFPRTEN_F    VFPRTEN_V(1U)
+ 
+ #define VFCHNEN_S    26
+ #define VFCHNEN_V(x) ((x) << VFCHNEN_S)
+ #define VFCHNEN_F    VFCHNEN_V(1U)
+ 
+ #define DEFAULTQUEUE_S    16
+ #define DEFAULTQUEUE_M    0x3ffU
+ #define DEFAULTQUEUE_G(x) (((x) >> DEFAULTQUEUE_S) & DEFAULTQUEUE_M)
+ 
+ #define VFIP6TWOTUPEN_S    6
+ #define VFIP6TWOTUPEN_V(x) ((x) << VFIP6TWOTUPEN_S)
+ #define VFIP6TWOTUPEN_F    VFIP6TWOTUPEN_V(1U)
+ 
+ #define VFIP4FOURTUPEN_S    5
+ #define VFIP4FOURTUPEN_V(x) ((x) << VFIP4FOURTUPEN_S)
+ #define VFIP4FOURTUPEN_F    VFIP4FOURTUPEN_V(1U)
+ 
+ #define VFIP4TWOTUPEN_S    4
+ #define VFIP4TWOTUPEN_V(x) ((x) << VFIP4TWOTUPEN_S)
+ #define VFIP4TWOTUPEN_F    VFIP4TWOTUPEN_V(1U)
+ 
+ #define KEYINDEX_S    0
+ #define KEYINDEX_M    0xfU
+ #define KEYINDEX_G(x) (((x) >> KEYINDEX_S) & KEYINDEX_M)
+ 
+ #define MAPENABLE_S    31
+ #define MAPENABLE_V(x) ((x) << MAPENABLE_S)
+ #define MAPENABLE_F    MAPENABLE_V(1U)
+ 
+ #define CHNENABLE_S    30
+ #define CHNENABLE_V(x) ((x) << CHNENABLE_S)
+ #define CHNENABLE_F    CHNENABLE_V(1U)
+ 
+ #define PRTENABLE_S    29
+ #define PRTENABLE_V(x) ((x) << PRTENABLE_S)
+ #define PRTENABLE_F    PRTENABLE_V(1U)
+ 
+ #define UDPFOURTUPEN_S    28
+ #define UDPFOURTUPEN_V(x) ((x) << UDPFOURTUPEN_S)
+ #define UDPFOURTUPEN_F    UDPFOURTUPEN_V(1U)
+ 
+ #define IP6FOURTUPEN_S    27
+ #define IP6FOURTUPEN_V(x) ((x) << IP6FOURTUPEN_S)
+ #define IP6FOURTUPEN_F    IP6FOURTUPEN_V(1U)
+ 
+ #define IP6TWOTUPEN_S    26
+ #define IP6TWOTUPEN_V(x) ((x) << IP6TWOTUPEN_S)
+ #define IP6TWOTUPEN_F    IP6TWOTUPEN_V(1U)
+ 
+ #define IP4FOURTUPEN_S    25
+ #define IP4FOURTUPEN_V(x) ((x) << IP4FOURTUPEN_S)
+ #define IP4FOURTUPEN_F    IP4FOURTUPEN_V(1U)
+ 
+ #define IP4TWOTUPEN_S    24
+ #define IP4TWOTUPEN_V(x) ((x) << IP4TWOTUPEN_S)
+ #define IP4TWOTUPEN_F    IP4TWOTUPEN_V(1U)
+ 
+ #define IVFWIDTH_S    20
+ #define IVFWIDTH_M    0xfU
+ #define IVFWIDTH_V(x) ((x) << IVFWIDTH_S)
+ #define IVFWIDTH_G(x) (((x) >> IVFWIDTH_S) & IVFWIDTH_M)
+ 
+ #define CH1DEFAULTQUEUE_S    10
+ #define CH1DEFAULTQUEUE_M    0x3ffU
+ #define CH1DEFAULTQUEUE_V(x) ((x) << CH1DEFAULTQUEUE_S)
+ #define CH1DEFAULTQUEUE_G(x) (((x) >> CH1DEFAULTQUEUE_S) & CH1DEFAULTQUEUE_M)
+ 
+ #define CH0DEFAULTQUEUE_S    0
+ #define CH0DEFAULTQUEUE_M    0x3ffU
+ #define CH0DEFAULTQUEUE_V(x) ((x) << CH0DEFAULTQUEUE_S)
+ #define CH0DEFAULTQUEUE_G(x) (((x) >> CH0DEFAULTQUEUE_S) & CH0DEFAULTQUEUE_M)
+ 
+ #define VFLKPIDX_S    8
+ #define VFLKPIDX_M    0xffU
+ #define VFLKPIDX_G(x) (((x) >> VFLKPIDX_S) & VFLKPIDX_M)
+ 
+ #define T6_VFWRADDR_S    8
+ #define T6_VFWRADDR_M    0xffU
+ #define T6_VFWRADDR_V(x) ((x) << T6_VFWRADDR_S)
+ #define T6_VFWRADDR_G(x) (((x) >> T6_VFWRADDR_S) & T6_VFWRADDR_M)
+ 
+ #define TP_RSS_CONFIG_CNG_A 0x7e04
+ #define TP_RSS_SECRET_KEY0_A 0x40
+ #define TP_RSS_PF0_CONFIG_A 0x30
+ #define TP_RSS_PF_MAP_A 0x38
+ #define TP_RSS_PF_MSK_A 0x39
+ 
+ #define PF1LKPIDX_S    3
+ 
+ #define PF0LKPIDX_M    0x7U
+ 
+ #define PF1MSKSIZE_S    4
+ #define PF1MSKSIZE_M    0xfU
+ 
+ #define CHNCOUNT3_S    31
+ #define CHNCOUNT3_V(x) ((x) << CHNCOUNT3_S)
+ #define CHNCOUNT3_F    CHNCOUNT3_V(1U)
+ 
+ #define CHNCOUNT2_S    30
+ #define CHNCOUNT2_V(x) ((x) << CHNCOUNT2_S)
+ #define CHNCOUNT2_F    CHNCOUNT2_V(1U)
+ 
+ #define CHNCOUNT1_S    29
+ #define CHNCOUNT1_V(x) ((x) << CHNCOUNT1_S)
+ #define CHNCOUNT1_F    CHNCOUNT1_V(1U)
+ 
+ #define CHNCOUNT0_S    28
+ #define CHNCOUNT0_V(x) ((x) << CHNCOUNT0_S)
+ #define CHNCOUNT0_F    CHNCOUNT0_V(1U)
+ 
+ #define CHNUNDFLOW3_S    27
+ #define CHNUNDFLOW3_V(x) ((x) << CHNUNDFLOW3_S)
+ #define CHNUNDFLOW3_F    CHNUNDFLOW3_V(1U)
+ 
+ #define CHNUNDFLOW2_S    26
+ #define CHNUNDFLOW2_V(x) ((x) << CHNUNDFLOW2_S)
+ #define CHNUNDFLOW2_F    CHNUNDFLOW2_V(1U)
+ 
+ #define CHNUNDFLOW1_S    25
+ #define CHNUNDFLOW1_V(x) ((x) << CHNUNDFLOW1_S)
+ #define CHNUNDFLOW1_F    CHNUNDFLOW1_V(1U)
+ 
+ #define CHNUNDFLOW0_S    24
+ #define CHNUNDFLOW0_V(x) ((x) << CHNUNDFLOW0_S)
+ #define CHNUNDFLOW0_F    CHNUNDFLOW0_V(1U)
+ 
+ #define RSTCHN3_S    19
+ #define RSTCHN3_V(x) ((x) << RSTCHN3_S)
+ #define RSTCHN3_F    RSTCHN3_V(1U)
+ 
+ #define RSTCHN2_S    18
+ #define RSTCHN2_V(x) ((x) << RSTCHN2_S)
+ #define RSTCHN2_F    RSTCHN2_V(1U)
+ 
+ #define RSTCHN1_S    17
+ #define RSTCHN1_V(x) ((x) << RSTCHN1_S)
+ #define RSTCHN1_F    RSTCHN1_V(1U)
+ 
+ #define RSTCHN0_S    16
+ #define RSTCHN0_V(x) ((x) << RSTCHN0_S)
+ #define RSTCHN0_F    RSTCHN0_V(1U)
+ 
+ #define UPDVLD_S    15
+ #define UPDVLD_V(x) ((x) << UPDVLD_S)
+ #define UPDVLD_F    UPDVLD_V(1U)
+ 
+ #define XOFF_S    14
+ #define XOFF_V(x) ((x) << XOFF_S)
+ #define XOFF_F    XOFF_V(1U)
+ 
+ #define UPDCHN3_S    13
+ #define UPDCHN3_V(x) ((x) << UPDCHN3_S)
+ #define UPDCHN3_F    UPDCHN3_V(1U)
+ 
+ #define UPDCHN2_S    12
+ #define UPDCHN2_V(x) ((x) << UPDCHN2_S)
+ #define UPDCHN2_F    UPDCHN2_V(1U)
+ 
+ #define UPDCHN1_S    11
+ #define UPDCHN1_V(x) ((x) << UPDCHN1_S)
+ #define UPDCHN1_F    UPDCHN1_V(1U)
+ 
+ #define UPDCHN0_S    10
+ #define UPDCHN0_V(x) ((x) << UPDCHN0_S)
+ #define UPDCHN0_F    UPDCHN0_V(1U)
+ 
+ #define QUEUE_S    0
+ #define QUEUE_M    0x3ffU
+ #define QUEUE_V(x) ((x) << QUEUE_S)
+ #define QUEUE_G(x) (((x) >> QUEUE_S) & QUEUE_M)
+ 
+ #define MPS_TRC_INT_CAUSE_A	0x985c
+ 
+ #define MISCPERR_S    8
+ #define MISCPERR_V(x) ((x) << MISCPERR_S)
+ #define MISCPERR_F    MISCPERR_V(1U)
+ 
+ #define PKTFIFO_S    4
+ #define PKTFIFO_M    0xfU
+ #define PKTFIFO_V(x) ((x) << PKTFIFO_S)
+ 
+ #define FILTMEM_S    0
+ #define FILTMEM_M    0xfU
+ #define FILTMEM_V(x) ((x) << FILTMEM_S)
+ 
+ #define MPS_CLS_INT_CAUSE_A 0xd028
+ 
+ #define HASHSRAM_S    2
+ #define HASHSRAM_V(x) ((x) << HASHSRAM_S)
+ #define HASHSRAM_F    HASHSRAM_V(1U)
+ 
+ #define MATCHTCAM_S    1
+ #define MATCHTCAM_V(x) ((x) << MATCHTCAM_S)
+ #define MATCHTCAM_F    MATCHTCAM_V(1U)
+ 
+ #define MATCHSRAM_S    0
+ #define MATCHSRAM_V(x) ((x) << MATCHSRAM_S)
+ #define MATCHSRAM_F    MATCHSRAM_V(1U)
+ 
+ #define MPS_RX_PERR_INT_CAUSE_A 0x11074
+ 
+ #define MPS_CLS_TCAM_Y_L_A 0xf000
+ #define MPS_CLS_TCAM_DATA0_A 0xf000
+ #define MPS_CLS_TCAM_DATA1_A 0xf004
+ 
+ #define DMACH_S    0
+ #define DMACH_M    0xffffU
+ #define DMACH_G(x) (((x) >> DMACH_S) & DMACH_M)
+ 
+ #define MPS_CLS_TCAM_X_L_A 0xf008
+ #define MPS_CLS_TCAM_DATA2_CTL_A 0xf008
+ 
+ #define CTLCMDTYPE_S    31
+ #define CTLCMDTYPE_V(x) ((x) << CTLCMDTYPE_S)
+ #define CTLCMDTYPE_F    CTLCMDTYPE_V(1U)
+ 
+ #define CTLTCAMSEL_S    25
+ #define CTLTCAMSEL_V(x) ((x) << CTLTCAMSEL_S)
+ 
+ #define CTLTCAMINDEX_S    17
+ #define CTLTCAMINDEX_V(x) ((x) << CTLTCAMINDEX_S)
+ 
+ #define CTLXYBITSEL_S    16
+ #define CTLXYBITSEL_V(x) ((x) << CTLXYBITSEL_S)
+ 
+ #define MPS_CLS_TCAM_Y_L(idx) (MPS_CLS_TCAM_Y_L_A + (idx) * 16)
+ #define NUM_MPS_CLS_TCAM_Y_L_INSTANCES 512
+ 
+ #define MPS_CLS_TCAM_X_L(idx) (MPS_CLS_TCAM_X_L_A + (idx) * 16)
+ #define NUM_MPS_CLS_TCAM_X_L_INSTANCES 512
+ 
+ #define MPS_CLS_SRAM_L_A 0xe000
+ 
+ #define T6_MULTILISTEN0_S    26
+ 
+ #define T6_SRAM_PRIO3_S    23
+ #define T6_SRAM_PRIO3_M    0x7U
+ #define T6_SRAM_PRIO3_G(x) (((x) >> T6_SRAM_PRIO3_S) & T6_SRAM_PRIO3_M)
+ 
+ #define T6_SRAM_PRIO2_S    20
+ #define T6_SRAM_PRIO2_M    0x7U
+ #define T6_SRAM_PRIO2_G(x) (((x) >> T6_SRAM_PRIO2_S) & T6_SRAM_PRIO2_M)
+ 
+ #define T6_SRAM_PRIO1_S    17
+ #define T6_SRAM_PRIO1_M    0x7U
+ #define T6_SRAM_PRIO1_G(x) (((x) >> T6_SRAM_PRIO1_S) & T6_SRAM_PRIO1_M)
+ 
+ #define T6_SRAM_PRIO0_S    14
+ #define T6_SRAM_PRIO0_M    0x7U
+ #define T6_SRAM_PRIO0_G(x) (((x) >> T6_SRAM_PRIO0_S) & T6_SRAM_PRIO0_M)
+ 
+ #define T6_SRAM_VLD_S    13
+ #define T6_SRAM_VLD_V(x) ((x) << T6_SRAM_VLD_S)
+ #define T6_SRAM_VLD_F    T6_SRAM_VLD_V(1U)
+ 
+ #define T6_REPLICATE_S    12
+ #define T6_REPLICATE_V(x) ((x) << T6_REPLICATE_S)
+ #define T6_REPLICATE_F    T6_REPLICATE_V(1U)
+ 
+ #define T6_PF_S    9
+ #define T6_PF_M    0x7U
+ #define T6_PF_G(x) (((x) >> T6_PF_S) & T6_PF_M)
+ 
+ #define T6_VF_VALID_S    8
+ #define T6_VF_VALID_V(x) ((x) << T6_VF_VALID_S)
+ #define T6_VF_VALID_F    T6_VF_VALID_V(1U)
+ 
+ #define T6_VF_S    0
+ #define T6_VF_M    0xffU
+ #define T6_VF_G(x) (((x) >> T6_VF_S) & T6_VF_M)
+ 
+ #define MPS_CLS_SRAM_H_A 0xe004
+ 
+ #define MPS_CLS_SRAM_L(idx) (MPS_CLS_SRAM_L_A + (idx) * 8)
+ #define NUM_MPS_CLS_SRAM_L_INSTANCES 336
+ 
+ #define MPS_CLS_SRAM_H(idx) (MPS_CLS_SRAM_H_A + (idx) * 8)
+ #define NUM_MPS_CLS_SRAM_H_INSTANCES 336
+ 
+ #define MULTILISTEN0_S    25
+ 
+ #define REPLICATE_S    11
+ #define REPLICATE_V(x) ((x) << REPLICATE_S)
+ #define REPLICATE_F    REPLICATE_V(1U)
+ 
+ #define PF_S    8
+ #define PF_M    0x7U
+ #define PF_G(x) (((x) >> PF_S) & PF_M)
+ 
+ #define VF_VALID_S    7
+ #define VF_VALID_V(x) ((x) << VF_VALID_S)
+ #define VF_VALID_F    VF_VALID_V(1U)
+ 
+ #define VF_S    0
+ #define VF_M    0x7fU
+ #define VF_G(x) (((x) >> VF_S) & VF_M)
+ 
+ #define SRAM_PRIO3_S    22
+ #define SRAM_PRIO3_M    0x7U
+ #define SRAM_PRIO3_G(x) (((x) >> SRAM_PRIO3_S) & SRAM_PRIO3_M)
+ 
+ #define SRAM_PRIO2_S    19
+ #define SRAM_PRIO2_M    0x7U
+ #define SRAM_PRIO2_G(x) (((x) >> SRAM_PRIO2_S) & SRAM_PRIO2_M)
+ 
+ #define SRAM_PRIO1_S    16
+ #define SRAM_PRIO1_M    0x7U
+ #define SRAM_PRIO1_G(x) (((x) >> SRAM_PRIO1_S) & SRAM_PRIO1_M)
+ 
+ #define SRAM_PRIO0_S    13
+ #define SRAM_PRIO0_M    0x7U
+ #define SRAM_PRIO0_G(x) (((x) >> SRAM_PRIO0_S) & SRAM_PRIO0_M)
+ 
+ #define SRAM_VLD_S    12
+ #define SRAM_VLD_V(x) ((x) << SRAM_VLD_S)
+ #define SRAM_VLD_F    SRAM_VLD_V(1U)
+ 
+ #define PORTMAP_S    0
+ #define PORTMAP_M    0xfU
+ #define PORTMAP_G(x) (((x) >> PORTMAP_S) & PORTMAP_M)
+ 
+ #define CPL_INTR_CAUSE_A 0x19054
+ 
+ #define CIM_OP_MAP_PERR_S    5
+ #define CIM_OP_MAP_PERR_V(x) ((x) << CIM_OP_MAP_PERR_S)
+ #define CIM_OP_MAP_PERR_F    CIM_OP_MAP_PERR_V(1U)
+ 
+ #define CIM_OVFL_ERROR_S    4
+ #define CIM_OVFL_ERROR_V(x) ((x) << CIM_OVFL_ERROR_S)
+ #define CIM_OVFL_ERROR_F    CIM_OVFL_ERROR_V(1U)
+ 
+ #define TP_FRAMING_ERROR_S    3
+ #define TP_FRAMING_ERROR_V(x) ((x) << TP_FRAMING_ERROR_S)
+ #define TP_FRAMING_ERROR_F    TP_FRAMING_ERROR_V(1U)
+ 
+ #define SGE_FRAMING_ERROR_S    2
+ #define SGE_FRAMING_ERROR_V(x) ((x) << SGE_FRAMING_ERROR_S)
+ #define SGE_FRAMING_ERROR_F    SGE_FRAMING_ERROR_V(1U)
+ 
+ #define CIM_FRAMING_ERROR_S    1
+ #define CIM_FRAMING_ERROR_V(x) ((x) << CIM_FRAMING_ERROR_S)
+ #define CIM_FRAMING_ERROR_F    CIM_FRAMING_ERROR_V(1U)
+ 
+ #define ZERO_SWITCH_ERROR_S    0
+ #define ZERO_SWITCH_ERROR_V(x) ((x) << ZERO_SWITCH_ERROR_S)
+ #define ZERO_SWITCH_ERROR_F    ZERO_SWITCH_ERROR_V(1U)
+ 
+ #define SMB_INT_CAUSE_A 0x19090
+ 
+ #define MSTTXFIFOPARINT_S    21
+ #define MSTTXFIFOPARINT_V(x) ((x) << MSTTXFIFOPARINT_S)
+ #define MSTTXFIFOPARINT_F    MSTTXFIFOPARINT_V(1U)
+ 
+ #define MSTRXFIFOPARINT_S    20
+ #define MSTRXFIFOPARINT_V(x) ((x) << MSTRXFIFOPARINT_S)
+ #define MSTRXFIFOPARINT_F    MSTRXFIFOPARINT_V(1U)
+ 
+ #define SLVFIFOPARINT_S    19
+ #define SLVFIFOPARINT_V(x) ((x) << SLVFIFOPARINT_S)
+ #define SLVFIFOPARINT_F    SLVFIFOPARINT_V(1U)
+ 
+ #define ULP_RX_INT_CAUSE_A 0x19158
+ #define ULP_RX_ISCSI_TAGMASK_A 0x19164
+ #define ULP_RX_ISCSI_PSZ_A 0x19168
+ #define ULP_RX_LA_CTL_A 0x1923c
+ #define ULP_RX_LA_RDPTR_A 0x19240
+ #define ULP_RX_LA_RDDATA_A 0x19244
+ #define ULP_RX_LA_WRPTR_A 0x19248
+ 
+ #define HPZ3_S    24
+ #define HPZ3_V(x) ((x) << HPZ3_S)
+ 
+ #define HPZ2_S    16
+ #define HPZ2_V(x) ((x) << HPZ2_S)
+ 
+ #define HPZ1_S    8
+ #define HPZ1_V(x) ((x) << HPZ1_S)
+ 
+ #define HPZ0_S    0
+ #define HPZ0_V(x) ((x) << HPZ0_S)
+ 
+ #define ULP_RX_TDDP_PSZ_A 0x19178
+ 
+ /* registers for module SF */
+ #define SF_DATA_A 0x193f8
+ #define SF_OP_A 0x193fc
+ 
+ #define SF_BUSY_S    31
+ #define SF_BUSY_V(x) ((x) << SF_BUSY_S)
+ #define SF_BUSY_F    SF_BUSY_V(1U)
+ 
+ #define SF_LOCK_S    4
+ #define SF_LOCK_V(x) ((x) << SF_LOCK_S)
+ #define SF_LOCK_F    SF_LOCK_V(1U)
+ 
+ #define SF_CONT_S    3
+ #define SF_CONT_V(x) ((x) << SF_CONT_S)
+ #define SF_CONT_F    SF_CONT_V(1U)
+ 
+ #define BYTECNT_S    1
+ #define BYTECNT_V(x) ((x) << BYTECNT_S)
+ 
+ #define OP_S    0
+ #define OP_V(x) ((x) << OP_S)
+ #define OP_F    OP_V(1U)
+ 
+ #define PL_PF_INT_CAUSE_A 0x3c0
+ 
+ #define PFSW_S    3
+ #define PFSW_V(x) ((x) << PFSW_S)
+ #define PFSW_F    PFSW_V(1U)
+ 
+ #define PFCIM_S    1
+ #define PFCIM_V(x) ((x) << PFCIM_S)
+ #define PFCIM_F    PFCIM_V(1U)
+ 
+ #define PL_PF_INT_ENABLE_A 0x3c4
+ #define PL_PF_CTL_A 0x3c8
+ 
+ #define PL_WHOAMI_A 0x19400
+ 
+ #define SOURCEPF_S    8
+ #define SOURCEPF_M    0x7U
+ #define SOURCEPF_G(x) (((x) >> SOURCEPF_S) & SOURCEPF_M)
+ 
+ #define PL_INT_CAUSE_A 0x1940c
+ 
+ #define ULP_TX_S    27
+ #define ULP_TX_V(x) ((x) << ULP_TX_S)
+ #define ULP_TX_F    ULP_TX_V(1U)
+ 
+ #define SGE_S    26
+ #define SGE_V(x) ((x) << SGE_S)
+ #define SGE_F    SGE_V(1U)
+ 
+ #define CPL_SWITCH_S    24
+ #define CPL_SWITCH_V(x) ((x) << CPL_SWITCH_S)
+ #define CPL_SWITCH_F    CPL_SWITCH_V(1U)
+ 
+ #define ULP_RX_S    23
+ #define ULP_RX_V(x) ((x) << ULP_RX_S)
+ #define ULP_RX_F    ULP_RX_V(1U)
+ 
+ #define PM_RX_S    22
+ #define PM_RX_V(x) ((x) << PM_RX_S)
+ #define PM_RX_F    PM_RX_V(1U)
+ 
+ #define PM_TX_S    21
+ #define PM_TX_V(x) ((x) << PM_TX_S)
+ #define PM_TX_F    PM_TX_V(1U)
+ 
+ #define MA_S    20
+ #define MA_V(x) ((x) << MA_S)
+ #define MA_F    MA_V(1U)
+ 
+ #define TP_S    19
+ #define TP_V(x) ((x) << TP_S)
+ #define TP_F    TP_V(1U)
+ 
+ #define LE_S    18
+ #define LE_V(x) ((x) << LE_S)
+ #define LE_F    LE_V(1U)
+ 
+ #define EDC1_S    17
+ #define EDC1_V(x) ((x) << EDC1_S)
+ #define EDC1_F    EDC1_V(1U)
+ 
+ #define EDC0_S    16
+ #define EDC0_V(x) ((x) << EDC0_S)
+ #define EDC0_F    EDC0_V(1U)
+ 
+ #define MC_S    15
+ #define MC_V(x) ((x) << MC_S)
+ #define MC_F    MC_V(1U)
+ 
+ #define PCIE_S    14
+ #define PCIE_V(x) ((x) << PCIE_S)
+ #define PCIE_F    PCIE_V(1U)
+ 
+ #define XGMAC_KR1_S    12
+ #define XGMAC_KR1_V(x) ((x) << XGMAC_KR1_S)
+ #define XGMAC_KR1_F    XGMAC_KR1_V(1U)
+ 
+ #define XGMAC_KR0_S    11
+ #define XGMAC_KR0_V(x) ((x) << XGMAC_KR0_S)
+ #define XGMAC_KR0_F    XGMAC_KR0_V(1U)
+ 
+ #define XGMAC1_S    10
+ #define XGMAC1_V(x) ((x) << XGMAC1_S)
+ #define XGMAC1_F    XGMAC1_V(1U)
+ 
+ #define XGMAC0_S    9
+ #define XGMAC0_V(x) ((x) << XGMAC0_S)
+ #define XGMAC0_F    XGMAC0_V(1U)
+ 
+ #define SMB_S    8
+ #define SMB_V(x) ((x) << SMB_S)
+ #define SMB_F    SMB_V(1U)
+ 
+ #define SF_S    7
+ #define SF_V(x) ((x) << SF_S)
+ #define SF_F    SF_V(1U)
+ 
+ #define PL_S    6
+ #define PL_V(x) ((x) << PL_S)
+ #define PL_F    PL_V(1U)
+ 
+ #define NCSI_S    5
+ #define NCSI_V(x) ((x) << NCSI_S)
+ #define NCSI_F    NCSI_V(1U)
+ 
+ #define MPS_S    4
+ #define MPS_V(x) ((x) << MPS_S)
+ #define MPS_F    MPS_V(1U)
+ 
+ #define CIM_S    0
+ #define CIM_V(x) ((x) << CIM_S)
+ #define CIM_F    CIM_V(1U)
+ 
+ #define MC1_S    31
+ #define MC1_V(x) ((x) << MC1_S)
+ #define MC1_F    MC1_V(1U)
+ 
+ #define PL_INT_ENABLE_A 0x19410
+ #define PL_INT_MAP0_A 0x19414
+ #define PL_RST_A 0x19428
+ 
+ #define PIORST_S    1
+ #define PIORST_V(x) ((x) << PIORST_S)
+ #define PIORST_F    PIORST_V(1U)
+ 
+ #define PIORSTMODE_S    0
+ #define PIORSTMODE_V(x) ((x) << PIORSTMODE_S)
+ #define PIORSTMODE_F    PIORSTMODE_V(1U)
+ 
+ #define PL_PL_INT_CAUSE_A 0x19430
+ 
+ #define FATALPERR_S    4
+ #define FATALPERR_V(x) ((x) << FATALPERR_S)
+ #define FATALPERR_F    FATALPERR_V(1U)
+ 
+ #define PERRVFID_S    0
+ #define PERRVFID_V(x) ((x) << PERRVFID_S)
+ #define PERRVFID_F    PERRVFID_V(1U)
+ 
+ #define PL_REV_A 0x1943c
+ 
+ #define REV_S    0
+ #define REV_M    0xfU
+ #define REV_V(x) ((x) << REV_S)
+ #define REV_G(x) (((x) >> REV_S) & REV_M)
+ 
+ #define T6_UNKNOWNCMD_S    3
+ #define T6_UNKNOWNCMD_V(x) ((x) << T6_UNKNOWNCMD_S)
+ #define T6_UNKNOWNCMD_F    T6_UNKNOWNCMD_V(1U)
+ 
+ #define T6_LIP0_S    2
+ #define T6_LIP0_V(x) ((x) << T6_LIP0_S)
+ #define T6_LIP0_F    T6_LIP0_V(1U)
+ 
+ #define T6_LIPMISS_S    1
+ #define T6_LIPMISS_V(x) ((x) << T6_LIPMISS_S)
+ #define T6_LIPMISS_F    T6_LIPMISS_V(1U)
+ 
+ #define LE_DB_INT_CAUSE_A 0x19c3c
+ 
+ #define REQQPARERR_S    16
+ #define REQQPARERR_V(x) ((x) << REQQPARERR_S)
+ #define REQQPARERR_F    REQQPARERR_V(1U)
+ 
+ #define UNKNOWNCMD_S    15
+ #define UNKNOWNCMD_V(x) ((x) << UNKNOWNCMD_S)
+ #define UNKNOWNCMD_F    UNKNOWNCMD_V(1U)
+ 
+ #define PARITYERR_S    6
+ #define PARITYERR_V(x) ((x) << PARITYERR_S)
+ #define PARITYERR_F    PARITYERR_V(1U)
+ 
+ #define LIPMISS_S    5
+ #define LIPMISS_V(x) ((x) << LIPMISS_S)
+ #define LIPMISS_F    LIPMISS_V(1U)
+ 
+ #define LIP0_S    4
+ #define LIP0_V(x) ((x) << LIP0_S)
+ #define LIP0_F    LIP0_V(1U)
+ 
+ #define TCAMINTPERR_S    13
+ #define TCAMINTPERR_V(x) ((x) << TCAMINTPERR_S)
+ #define TCAMINTPERR_F    TCAMINTPERR_V(1U)
+ 
+ #define SSRAMINTPERR_S    10
+ #define SSRAMINTPERR_V(x) ((x) << SSRAMINTPERR_S)
+ #define SSRAMINTPERR_F    SSRAMINTPERR_V(1U)
+ 
+ #define NCSI_INT_CAUSE_A 0x1a0d8
+ 
+ #define CIM_DM_PRTY_ERR_S    8
+ #define CIM_DM_PRTY_ERR_V(x) ((x) << CIM_DM_PRTY_ERR_S)
+ #define CIM_DM_PRTY_ERR_F    CIM_DM_PRTY_ERR_V(1U)
+ 
+ #define MPS_DM_PRTY_ERR_S    7
+ #define MPS_DM_PRTY_ERR_V(x) ((x) << MPS_DM_PRTY_ERR_S)
+ #define MPS_DM_PRTY_ERR_F    MPS_DM_PRTY_ERR_V(1U)
+ 
+ #define TXFIFO_PRTY_ERR_S    1
+ #define TXFIFO_PRTY_ERR_V(x) ((x) << TXFIFO_PRTY_ERR_S)
+ #define TXFIFO_PRTY_ERR_F    TXFIFO_PRTY_ERR_V(1U)
+ 
+ #define RXFIFO_PRTY_ERR_S    0
+ #define RXFIFO_PRTY_ERR_V(x) ((x) << RXFIFO_PRTY_ERR_S)
+ #define RXFIFO_PRTY_ERR_F    RXFIFO_PRTY_ERR_V(1U)
+ 
+ #define XGMAC_PORT_CFG2_A 0x1018
+ 
+ #define PATEN_S    18
+ #define PATEN_V(x) ((x) << PATEN_S)
+ #define PATEN_F    PATEN_V(1U)
+ 
+ #define MAGICEN_S    17
+ #define MAGICEN_V(x) ((x) << MAGICEN_S)
+ #define MAGICEN_F    MAGICEN_V(1U)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  #define XGMAC_PORT_MAGIC_MACID_LO 0x1024
  #define XGMAC_PORT_MAGIC_MACID_HI 0x1028
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
index d1c755f78aaf,aceb1e8cacc8..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
@@@ -738,15 -831,33 +750,45 @@@ struct fw_ldst_cmd 
  	} u;
  };
  
++<<<<<<< HEAD
 +#define FW_LDST_CMD_MSG(x)	((x) << 31)
 +#define FW_LDST_CMD_PADDR(x)	((x) << 8)
 +#define FW_LDST_CMD_MMD(x)	((x) << 0)
 +#define FW_LDST_CMD_FID(x)	((x) << 15)
 +#define FW_LDST_CMD_CTL(x)	((x) << 0)
 +#define FW_LDST_CMD_RPLCPF(x)	((x) << 0)
 +#define FW_LDST_CMD_LC		(1U << 4)
 +#define FW_LDST_CMD_NACCESS(x)	((x) << 0)
 +#define FW_LDST_CMD_FN(x)	((x) << 0)
++=======
+ #define FW_LDST_CMD_MSG_S       31
+ #define FW_LDST_CMD_MSG_V(x)	((x) << FW_LDST_CMD_MSG_S)
+ 
+ #define FW_LDST_CMD_PADDR_S     8
+ #define FW_LDST_CMD_PADDR_V(x)	((x) << FW_LDST_CMD_PADDR_S)
+ 
+ #define FW_LDST_CMD_MMD_S       0
+ #define FW_LDST_CMD_MMD_V(x)	((x) << FW_LDST_CMD_MMD_S)
+ 
+ #define FW_LDST_CMD_FID_S       15
+ #define FW_LDST_CMD_FID_V(x)	((x) << FW_LDST_CMD_FID_S)
+ 
+ #define FW_LDST_CMD_IDX_S	0
+ #define FW_LDST_CMD_IDX_V(x)	((x) << FW_LDST_CMD_IDX_S)
+ 
+ #define FW_LDST_CMD_RPLCPF_S    0
+ #define FW_LDST_CMD_RPLCPF_V(x)	((x) << FW_LDST_CMD_RPLCPF_S)
+ 
+ #define FW_LDST_CMD_LC_S        4
+ #define FW_LDST_CMD_LC_V(x)     ((x) << FW_LDST_CMD_LC_S)
+ #define FW_LDST_CMD_LC_F	FW_LDST_CMD_LC_V(1U)
+ 
+ #define FW_LDST_CMD_FN_S        0
+ #define FW_LDST_CMD_FN_V(x)	((x) << FW_LDST_CMD_FN_S)
+ 
+ #define FW_LDST_CMD_NACCESS_S           0
+ #define FW_LDST_CMD_NACCESS_V(x)	((x) << FW_LDST_CMD_NACCESS_S)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  struct fw_reset_cmd {
  	__be32 op_to_write;
@@@ -2153,10 -3036,39 +2196,46 @@@ struct fw_hdr 
  	__be32  reserved6[23];
  };
  
++<<<<<<< HEAD
 +#define FW_HDR_FW_VER_MAJOR_GET(x) (((x) >> 24) & 0xff)
 +#define FW_HDR_FW_VER_MINOR_GET(x) (((x) >> 16) & 0xff)
 +#define FW_HDR_FW_VER_MICRO_GET(x) (((x) >> 8) & 0xff)
 +#define FW_HDR_FW_VER_BUILD_GET(x) (((x) >> 0) & 0xff)
++=======
+ enum fw_hdr_chip {
+ 	FW_HDR_CHIP_T4,
+ 	FW_HDR_CHIP_T5,
+ 	FW_HDR_CHIP_T6
+ };
+ 
+ #define FW_HDR_FW_VER_MAJOR_S	24
+ #define FW_HDR_FW_VER_MAJOR_M	0xff
+ #define FW_HDR_FW_VER_MAJOR_V(x) \
+ 	((x) << FW_HDR_FW_VER_MAJOR_S)
+ #define FW_HDR_FW_VER_MAJOR_G(x) \
+ 	(((x) >> FW_HDR_FW_VER_MAJOR_S) & FW_HDR_FW_VER_MAJOR_M)
+ 
+ #define FW_HDR_FW_VER_MINOR_S	16
+ #define FW_HDR_FW_VER_MINOR_M	0xff
+ #define FW_HDR_FW_VER_MINOR_V(x) \
+ 	((x) << FW_HDR_FW_VER_MINOR_S)
+ #define FW_HDR_FW_VER_MINOR_G(x) \
+ 	(((x) >> FW_HDR_FW_VER_MINOR_S) & FW_HDR_FW_VER_MINOR_M)
+ 
+ #define FW_HDR_FW_VER_MICRO_S	8
+ #define FW_HDR_FW_VER_MICRO_M	0xff
+ #define FW_HDR_FW_VER_MICRO_V(x) \
+ 	((x) << FW_HDR_FW_VER_MICRO_S)
+ #define FW_HDR_FW_VER_MICRO_G(x) \
+ 	(((x) >> FW_HDR_FW_VER_MICRO_S) & FW_HDR_FW_VER_MICRO_M)
+ 
+ #define FW_HDR_FW_VER_BUILD_S	0
+ #define FW_HDR_FW_VER_BUILD_M	0xff
+ #define FW_HDR_FW_VER_BUILD_V(x) \
+ 	((x) << FW_HDR_FW_VER_BUILD_S)
+ #define FW_HDR_FW_VER_BUILD_G(x) \
+ 	(((x) >> FW_HDR_FW_VER_BUILD_S) & FW_HDR_FW_VER_BUILD_M)
++>>>>>>> 3ccc6cf74d8c (cxgb4: Adds support for T6 adapter)
  
  enum fw_hdr_intfver {
  	FW_HDR_INTFVER_NIC      = 0x00,
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_values.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4fw_version.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sge.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_regs.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_values.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4fw_version.h
