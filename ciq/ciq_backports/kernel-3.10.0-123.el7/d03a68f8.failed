net/mlx4_en: Configure the XPS queue mapping on driver load

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [ethernet] mlx4: Configure the XPS queue mapping on driver load (Amir Vadai) [1030563 1030565 1030568 1030570 1030571 1030573 1030575]
Rebuild_FUZZ: 93.69%
commit-author Ido Shamay <idos@mellanox.com>
commit d03a68f8217ea03492e4f7928db222dc6544792a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/d03a68f8.failed

Only TX rings of User Piority 0 are mapped.
TX rings of other UP's are using UP 0 mapping.
XPS is not in use when num_tc is set.

	Signed-off-by: Ido Shamay <idos@mellanox.com>
	Signed-off-by: Amir Vadai <amirv@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d03a68f8217ea03492e4f7928db222dc6544792a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_netdev.c
#	drivers/net/ethernet/mellanox/mlx4/en_tx.c
#	drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
diff --cc drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 39ca6f97fa10,6f920900e841..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@@ -1865,12 -1905,15 +1865,19 @@@ int mlx4_en_alloc_resources(struct mlx4
  
  	/* Create tx Rings */
  	for (i = 0; i < priv->tx_ring_num; i++) {
 -		node = cpu_to_node(i % num_online_cpus());
  		if (mlx4_en_create_cq(priv, &priv->tx_cq[i],
 -				      prof->tx_ring_size, i, TX, node))
 +				      prof->tx_ring_size, i, TX))
  			goto err;
  
++<<<<<<< HEAD
 +		if (mlx4_en_create_tx_ring(priv, &priv->tx_ring[i], priv->base_tx_qpn + i,
 +					   prof->tx_ring_size, TXBB_SIZE))
++=======
+ 		if (mlx4_en_create_tx_ring(priv, &priv->tx_ring[i],
+ 					   priv->base_tx_qpn + i,
+ 					   prof->tx_ring_size, TXBB_SIZE,
+ 					   node, i))
++>>>>>>> d03a68f8217e (net/mlx4_en: Configure the XPS queue mapping on driver load)
  			goto err;
  	}
  
diff --cc drivers/net/ethernet/mellanox/mlx4/en_tx.c
index 43b8faafe2af,5e22d7d46b50..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_tx.c
@@@ -54,10 -54,11 +54,15 @@@ module_param_named(inline_thold, inline
  MODULE_PARM_DESC(inline_thold, "threshold for using inline data");
  
  int mlx4_en_create_tx_ring(struct mlx4_en_priv *priv,
++<<<<<<< HEAD
 +			   struct mlx4_en_tx_ring *ring, int qpn, u32 size,
 +			   u16 stride)
++=======
+ 			   struct mlx4_en_tx_ring **pring, int qpn, u32 size,
+ 			   u16 stride, int node, int queue_index)
++>>>>>>> d03a68f8217e (net/mlx4_en: Configure the XPS queue mapping on driver load)
  {
  	struct mlx4_en_dev *mdev = priv->mdev;
 -	struct mlx4_en_tx_ring *ring;
  	int tmp;
  	int err;
  
@@@ -119,7 -140,12 +124,11 @@@
  		ring->bf_enabled = true;
  
  	ring->hwtstamp_tx_type = priv->hwtstamp_config.tx_type;
+ 	ring->queue_index = queue_index;
+ 
+ 	if (queue_index < priv->num_tx_rings_p_up && cpu_online(queue_index))
+ 		cpumask_set_cpu(queue_index, &ring->affinity_mask);
  
 -	*pring = ring;
  	return 0;
  
  err_map:
diff --cc drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index 49b90487ac48,202d8e5eb41f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@@ -590,9 -719,12 +592,18 @@@ void mlx4_en_tx_irq(struct mlx4_cq *mcq
  u16 mlx4_en_select_queue(struct net_device *dev, struct sk_buff *skb);
  netdev_tx_t mlx4_en_xmit(struct sk_buff *skb, struct net_device *dev);
  
++<<<<<<< HEAD
 +int mlx4_en_create_tx_ring(struct mlx4_en_priv *priv, struct mlx4_en_tx_ring *ring,
 +			   int qpn, u32 size, u16 stride);
 +void mlx4_en_destroy_tx_ring(struct mlx4_en_priv *priv, struct mlx4_en_tx_ring *ring);
++=======
+ int mlx4_en_create_tx_ring(struct mlx4_en_priv *priv,
+ 			   struct mlx4_en_tx_ring **pring,
+ 			   int qpn, u32 size, u16 stride,
+ 			   int node, int queue_index);
+ void mlx4_en_destroy_tx_ring(struct mlx4_en_priv *priv,
+ 			     struct mlx4_en_tx_ring **pring);
++>>>>>>> d03a68f8217e (net/mlx4_en: Configure the XPS queue mapping on driver load)
  int mlx4_en_activate_tx_ring(struct mlx4_en_priv *priv,
  			     struct mlx4_en_tx_ring *ring,
  			     int cq, int user_prio);
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_netdev.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_tx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
