xfs: remove the inode log format from the inode log item

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Christoph Hellwig <hch@infradead.org>
commit 2f251293b09065118d78ae4e883e5639cc22f94e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/2f251293.failed

No need to keep the inode log format around all the time, we can
easily generate it at iop_format time.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>
(cherry picked from commit 2f251293b09065118d78ae4e883e5639cc22f94e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_inode_item.c
#	fs/xfs/xfs_inode_item.h
diff --cc fs/xfs/xfs_inode_item.c
index f86ec16592fa,686889b4a1e5..000000000000
--- a/fs/xfs/xfs_inode_item.c
+++ b/fs/xfs/xfs_inode_item.c
@@@ -433,40 -367,35 +433,63 @@@ xfs_inode_item_format
  {
  	struct xfs_inode_log_item *iip = INODE_ITEM(lip);
  	struct xfs_inode	*ip = iip->ili_inode;
 -	struct xfs_inode_log_format *ilf;
 -	struct xfs_log_iovec	*vecp = NULL;
 +	uint			nvecs;
 +
++<<<<<<< HEAD
 +	vecp->i_addr = &iip->ili_format;
 +	vecp->i_len  = sizeof(xfs_inode_log_format_t);
 +	vecp->i_type = XLOG_REG_TYPE_IFORMAT;
 +	vecp++;
 +	nvecs	     = 1;
 +
 +	vecp->i_addr = &ip->i_d;
 +	vecp->i_len  = xfs_icdinode_size(ip->i_d.di_version);
 +	vecp->i_type = XLOG_REG_TYPE_ICORE;
 +	vecp++;
 +	nvecs++;
  
 +	if (ip->i_d.di_version == 1)
 +		xfs_inode_item_format_v1_inode(ip);
++=======
+ 	ilf = xlog_prepare_iovec(lv, &vecp, XLOG_REG_TYPE_IFORMAT);
+ 	ilf->ilf_type = XFS_LI_INODE;
+ 	ilf->ilf_ino = ip->i_ino;
+ 	ilf->ilf_blkno = ip->i_imap.im_blkno;
+ 	ilf->ilf_len = ip->i_imap.im_len;
+ 	ilf->ilf_boffset = ip->i_imap.im_boffset;
+ 	ilf->ilf_fields = XFS_ILOG_CORE;
+ 	ilf->ilf_size = 2; /* format + core */
+ 	xlog_finish_iovec(lv, vecp, sizeof(struct xfs_inode_log_format));
+ 
+ 	if (ip->i_d.di_version == 1)
+ 		xfs_inode_item_format_v1_inode(ip);
+ 	xlog_copy_iovec(lv, &vecp, XLOG_REG_TYPE_ICORE,
+ 			&ip->i_d,
+ 			xfs_icdinode_size(ip->i_d.di_version));
++>>>>>>> 2f251293b090 (xfs: remove the inode log format from the inode log item)
  
 -	xfs_inode_item_format_data_fork(iip, ilf, lv, &vecp);
 +	vecp = xfs_inode_item_format_data_fork(iip, vecp, &nvecs);
  	if (XFS_IFORK_Q(ip)) {
 -		xfs_inode_item_format_attr_fork(iip, ilf, lv, &vecp);
 +		vecp = xfs_inode_item_format_attr_fork(iip, vecp, &nvecs);
  	} else {
  		iip->ili_fields &=
  			~(XFS_ILOG_ADATA | XFS_ILOG_ABROOT | XFS_ILOG_AEXT);
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * Now update the log format that goes out to disk from the in-core
 +	 * values.  We always write the inode core to make the arithmetic
 +	 * games in recovery easier, which isn't a big deal as just about any
 +	 * transaction would dirty it anyway.
 +	 */
 +	iip->ili_format.ilf_fields = XFS_ILOG_CORE |
 +		(iip->ili_fields & ~XFS_ILOG_TIMESTAMP);
 +	iip->ili_format.ilf_size = nvecs;
++=======
+ 	/* update the format with the exact fields we actually logged */
+ 	ilf->ilf_fields |= (iip->ili_fields & ~XFS_ILOG_TIMESTAMP);
++>>>>>>> 2f251293b090 (xfs: remove the inode log format from the inode log item)
  }
  
  /*
diff --cc fs/xfs/xfs_inode_item.h
index dce4d656768c,488d81254e28..000000000000
--- a/fs/xfs/xfs_inode_item.h
+++ b/fs/xfs/xfs_inode_item.h
@@@ -34,11 -34,6 +34,14 @@@ typedef struct xfs_inode_log_item 
  	unsigned short		ili_logged;	   /* flushed logged data */
  	unsigned int		ili_last_fields;   /* fields when flushed */
  	unsigned int		ili_fields;	   /* fields to be logged */
++<<<<<<< HEAD
 +	struct xfs_bmbt_rec	*ili_extents_buf;  /* array of logged
 +						      data exts */
 +	struct xfs_bmbt_rec	*ili_aextents_buf; /* array of logged
 +						      attr exts */
 +	xfs_inode_log_format_t	ili_format;	   /* logged structure */
++=======
++>>>>>>> 2f251293b090 (xfs: remove the inode log format from the inode log item)
  } xfs_inode_log_item_t;
  
  static inline int xfs_inode_clean(xfs_inode_t *ip)
* Unmerged path fs/xfs/xfs_inode_item.c
* Unmerged path fs/xfs/xfs_inode_item.h
