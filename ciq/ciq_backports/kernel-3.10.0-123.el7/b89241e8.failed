llists: move llist_reverse_order from raid5 to llist.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [lib] llist: move llist_reverse_order from raid5 to llist.c (Mike Snitzer) [1071014]
Rebuild_FUZZ: 99.07%
commit-author Christoph Hellwig <hch@infradead.org>
commit b89241e8cdb8321c20546d47645a9b65b58113b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/b89241e8.failed

Make this useful helper available for other users.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Cc: Jens Axboe <axboe@kernel.dk>
	Cc: Neil Brown <neilb@suse.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b89241e8cdb8321c20546d47645a9b65b58113b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid5.c
diff --cc drivers/md/raid5.c
index d825059d00ce,7f0e17a27aeb..000000000000
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@@ -239,6 -293,33 +239,36 @@@ static void __release_stripe(struct r5c
  		do_release_stripe(conf, sh);
  }
  
++<<<<<<< HEAD
++=======
+ /* should hold conf->device_lock already */
+ static int release_stripe_list(struct r5conf *conf)
+ {
+ 	struct stripe_head *sh;
+ 	int count = 0;
+ 	struct llist_node *head;
+ 
+ 	head = llist_del_all(&conf->released_stripes);
+ 	head = llist_reverse_order(head);
+ 	while (head) {
+ 		sh = llist_entry(head, struct stripe_head, release_list);
+ 		head = llist_next(head);
+ 		/* sh could be readded after STRIPE_ON_RELEASE_LIST is cleard */
+ 		smp_mb();
+ 		clear_bit(STRIPE_ON_RELEASE_LIST, &sh->state);
+ 		/*
+ 		 * Don't worry the bit is set here, because if the bit is set
+ 		 * again, the count is always > 1. This is true for
+ 		 * STRIPE_ON_UNPLUG_LIST bit too.
+ 		 */
+ 		__release_stripe(conf, sh);
+ 		count++;
+ 	}
+ 
+ 	return count;
+ }
+ 
++>>>>>>> b89241e8cdb8 (llists: move llist_reverse_order from raid5 to llist.c)
  static void release_stripe(struct stripe_head *sh)
  {
  	struct r5conf *conf = sh->raid_conf;
* Unmerged path drivers/md/raid5.c
diff --git a/include/linux/llist.h b/include/linux/llist.h
index cdaa7f023899..ca2e9997ddfc 100644
--- a/include/linux/llist.h
+++ b/include/linux/llist.h
@@ -172,4 +172,6 @@ static inline struct llist_node *llist_del_all(struct llist_head *head)
 
 extern struct llist_node *llist_del_first(struct llist_head *head);
 
+struct llist_node *llist_reverse_order(struct llist_node *head);
+
 #endif /* LLIST_H */
diff --git a/lib/llist.c b/lib/llist.c
index 4a70d120138c..ef48b87247ec 100644
--- a/lib/llist.c
+++ b/lib/llist.c
@@ -81,3 +81,25 @@ struct llist_node *llist_del_first(struct llist_head *head)
 	return entry;
 }
 EXPORT_SYMBOL_GPL(llist_del_first);
+
+/**
+ * llist_reverse_order - reverse order of a llist chain
+ * @head:	first item of the list to be reversed
+ *
+ * Reverse the oder of a chain of llist entries and return the
+ * new first entry.
+ */
+struct llist_node *llist_reverse_order(struct llist_node *head)
+{
+	struct llist_node *new_head = NULL;
+
+	while (head) {
+		struct llist_node *tmp = head;
+		head = head->next;
+		tmp->next = new_head;
+		new_head = tmp;
+	}
+
+	return new_head;
+}
+EXPORT_SYMBOL_GPL(llist_reverse_order);
