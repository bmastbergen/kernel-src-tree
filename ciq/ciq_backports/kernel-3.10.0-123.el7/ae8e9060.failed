efi: use efi_get_memory_map() to get final map for x86

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Roy Franz <roy.franz@linaro.org>
commit ae8e9060a3ecfd22bd5059e39f81547613ae376c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/ae8e9060.failed

Replace the open-coded memory map getting with the
efi_get_memory_map() that is now general enough to use.

	Signed-off-by: Roy Franz <roy.franz@linaro.org>
	Signed-off-by: Matt Fleming <matt.fleming@intel.com>
(cherry picked from commit ae8e9060a3ecfd22bd5059e39f81547613ae376c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/eboot.c
diff --cc arch/x86/boot/compressed/eboot.c
index 2b78a439967f,bf2c35d5ec1f..000000000000
--- a/arch/x86/boot/compressed/eboot.c
+++ b/arch/x86/boot/compressed/eboot.c
@@@ -557,25 -526,14 +557,33 @@@ static efi_status_t exit_boot(struct bo
  	u8 nr_entries;
  	int i;
  
- 	size = sizeof(*mem_map) * 32;
+ get_map:
+ 	status = efi_get_memory_map(sys_table, &mem_map, &size, &desc_size,
+ 				    &desc_version, &key);
  
++<<<<<<< HEAD
 +again:
 +	size += sizeof(*mem_map);
 +	_size = size;
 +	status = efi_low_alloc(sys_table, size, 1, (unsigned long *)&mem_map);
 +	if (status != EFI_SUCCESS)
 +		return status;
 +
 +	status = efi_call_phys5(sys_table->boottime->get_memory_map, &size,
 +				mem_map, &key, &desc_size, &desc_version);
 +	if (status == EFI_BUFFER_TOO_SMALL) {
 +		efi_free(sys_table, _size, (unsigned long)mem_map);
 +		goto again;
 +	}
 +
 +	if (status != EFI_SUCCESS)
 +		goto free_mem_map;
 +
++=======
+ 	if (status != EFI_SUCCESS)
+ 		return status;
+ 
++>>>>>>> ae8e9060a3ec (efi: use efi_get_memory_map() to get final map for x86)
  	memcpy(&efi->efi_loader_signature, EFI_LOADER_SIGNATURE, sizeof(__u32));
  	efi->efi_systab = (unsigned long)sys_table;
  	efi->efi_memdesc_size = desc_size;
@@@ -591,8 -549,21 +599,26 @@@
  	/* Might as well exit boot services now */
  	status = efi_call_phys2(sys_table->boottime->exit_boot_services,
  				handle, key);
++<<<<<<< HEAD
 +	if (status != EFI_SUCCESS)
 +		goto free_mem_map;
++=======
+ 	if (status != EFI_SUCCESS) {
+ 		/*
+ 		 * ExitBootServices() will fail if any of the event
+ 		 * handlers change the memory map. In which case, we
+ 		 * must be prepared to retry, but only once so that
+ 		 * we're guaranteed to exit on repeated failures instead
+ 		 * of spinning forever.
+ 		 */
+ 		if (called_exit)
+ 			goto free_mem_map;
+ 
+ 		called_exit = true;
+ 		efi_call_phys1(sys_table->boottime->free_pool, mem_map);
+ 		goto get_map;
+ 	}
++>>>>>>> ae8e9060a3ec (efi: use efi_get_memory_map() to get final map for x86)
  
  	/* Historic? */
  	boot_params->alt_mem_k = 32 * 1024;
* Unmerged path arch/x86/boot/compressed/eboot.c
