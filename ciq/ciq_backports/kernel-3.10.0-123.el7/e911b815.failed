NFSv4: Fix a use-after-free problem in open()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [fs] nfs: Fix a use-after-free problem in open() (Steve Dickson) [1062809]
Rebuild_FUZZ: 97.73%
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit e911b8158ee1def8153849b1641b736026b036e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/e911b815.failed

If we interrupt the nfs4_wait_for_completion_rpc_task() call in
nfs4_run_open_task(), then we don't prevent the RPC call from
completing. So freeing up the opendata->f_attr.mdsthreshold
in the error path in _nfs4_do_open() leads to a use-after-free
when the XDR decoder tries to decode the mdsthreshold information
from the server.

Fixes: 82be417aa37c0 (NFSv4.1 cache mdsthreshold values on OPEN)
	Tested-by: Steve Dickson <SteveD@redhat.com>
	Cc: stable@vger.kernel.org # 3.5+
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit e911b8158ee1def8153849b1641b736026b036e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/nfs4proc.c
index a51aa5807e5c,397be39c6dc8..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -2076,10 -2297,20 +2077,27 @@@ static int _nfs4_do_open(struct inode *
  	if (opendata == NULL)
  		goto err_put_state_owner;
  
++<<<<<<< HEAD
 +	if (ctx_th && server->attr_bitmask[2] & FATTR4_WORD2_MDSTHRESHOLD) {
 +		opendata->f_attr.mdsthreshold = pnfs_mdsthreshold_alloc();
 +		if (!opendata->f_attr.mdsthreshold)
 +			goto err_opendata_put;
++=======
+ 	if (label) {
+ 		olabel = nfs4_label_alloc(server, GFP_KERNEL);
+ 		if (IS_ERR(olabel)) {
+ 			status = PTR_ERR(olabel);
+ 			goto err_opendata_put;
+ 		}
+ 	}
+ 
+ 	if (server->attr_bitmask[2] & FATTR4_WORD2_MDSTHRESHOLD) {
+ 		if (!opendata->f_attr.mdsthreshold) {
+ 			opendata->f_attr.mdsthreshold = pnfs_mdsthreshold_alloc();
+ 			if (!opendata->f_attr.mdsthreshold)
+ 				goto err_free_label;
+ 		}
++>>>>>>> e911b8158ee1 (NFSv4: Fix a use-after-free problem in open())
  		opendata->o_arg.open_bitmap = &nfs4_pnfs_open_bitmap[0];
  	}
  	if (dentry->d_inode != NULL)
@@@ -2097,23 -2328,29 +2115,21 @@@
  		nfs_fattr_init(opendata->o_res.f_attr);
  		status = nfs4_do_setattr(state->inode, cred,
  				opendata->o_res.f_attr, sattr,
 -				state, label, olabel);
 -		if (status == 0) {
 +				state);
 +		if (status == 0)
  			nfs_setattr_update_inode(state->inode, sattr);
 -			nfs_post_op_update_inode(state->inode, opendata->o_res.f_attr);
 -			nfs_setsecurity(state->inode, opendata->o_res.f_attr, olabel);
 -		}
 +		nfs_post_op_update_inode(state->inode, opendata->o_res.f_attr);
  	}
 -	if (opendata->file_created)
 -		*opened |= FILE_CREATED;
  
- 	if (pnfs_use_threshold(ctx_th, opendata->f_attr.mdsthreshold, server))
+ 	if (pnfs_use_threshold(ctx_th, opendata->f_attr.mdsthreshold, server)) {
  		*ctx_th = opendata->f_attr.mdsthreshold;
- 	else
- 		kfree(opendata->f_attr.mdsthreshold);
- 	opendata->f_attr.mdsthreshold = NULL;
+ 		opendata->f_attr.mdsthreshold = NULL;
+ 	}
  
 -	nfs4_label_free(olabel);
 -
  	nfs4_opendata_put(opendata);
  	nfs4_put_state_owner(sp);
  	return 0;
 -err_free_label:
 -	nfs4_label_free(olabel);
  err_opendata_put:
- 	kfree(opendata->f_attr.mdsthreshold);
  	nfs4_opendata_put(opendata);
  err_put_state_owner:
  	nfs4_put_state_owner(sp);
* Unmerged path fs/nfs/nfs4proc.c
