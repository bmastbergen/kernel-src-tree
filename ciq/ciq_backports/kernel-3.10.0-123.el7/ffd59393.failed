net: sctp: fix sctp_connectx abi for ia32 emulation/compat mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [net] sctp: fix sctp_connectx abi for ia32 emulation/compat mode (Daniel Borkmann) [1058284]
Rebuild_FUZZ: 95.87%
commit-author Daniel Borkmann <dborkman@redhat.com>
commit ffd5939381c609056b33b7585fb05a77b4c695f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/ffd59393.failed

SCTP's sctp_connectx() abi breaks for 64bit kernels compiled with 32bit
emulation (e.g. ia32 emulation or x86_x32). Due to internal usage of
'struct sctp_getaddrs_old' which includes a struct sockaddr pointer,
sizeof(param) check will always fail in kernel as the structure in
64bit kernel space is 4bytes larger than for user binaries compiled
in 32bit mode. Thus, applications making use of sctp_connectx() won't
be able to run under such circumstances.

Introduce a compat interface in the kernel to deal with such
situations by using a 'struct compat_sctp_getaddrs_old' structure
where user data is copied into it, and then sucessively transformed
into a 'struct sctp_getaddrs_old' structure with the help of
compat_ptr(). That fixes sctp_connectx() abi without any changes
needed in user space, and lets the SCTP test suite pass when compiled
in 32bit and run on 64bit kernels.

Fixes: f9c67811ebc0 ("sctp: Fix regression introduced by new sctp_connectx api")
	Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
	Acked-by: Neil Horman <nhorman@tuxdriver.com>
	Acked-by: Vlad Yasevich <vyasevich@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ffd5939381c609056b33b7585fb05a77b4c695f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/socket.c
diff --cc net/sctp/socket.c
index 6abb1caf9836,981aaf8b6ace..000000000000
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@@ -1381,14 -1369,22 +1382,28 @@@ SCTP_STATIC int sctp_setsockopt_connect
  /*
   * New (hopefully final) interface for the API.
   * We use the sctp_getaddrs_old structure so that use-space library
-  * can avoid any unnecessary allocations.   The only defferent part
+  * can avoid any unnecessary allocations. The only different part
   * is that we store the actual length of the address buffer into the
-  * addrs_num structure member.  That way we can re-use the existing
+  * addrs_num structure member. That way we can re-use the existing
   * code.
   */
++<<<<<<< HEAD
 +SCTP_STATIC int sctp_getsockopt_connectx3(struct sock* sk, int len,
 +					char __user *optval,
 +					int __user *optlen)
++=======
+ #ifdef CONFIG_COMPAT
+ struct compat_sctp_getaddrs_old {
+ 	sctp_assoc_t	assoc_id;
+ 	s32		addr_num;
+ 	compat_uptr_t	addrs;		/* struct sockaddr * */
+ };
+ #endif
+ 
+ static int sctp_getsockopt_connectx3(struct sock *sk, int len,
+ 				     char __user *optval,
+ 				     int __user *optlen)
++>>>>>>> ffd5939381c6 (net: sctp: fix sctp_connectx abi for ia32 emulation/compat mode)
  {
  	struct sctp_getaddrs_old param;
  	sctp_assoc_t assoc_id = 0;
* Unmerged path net/sctp/socket.c
