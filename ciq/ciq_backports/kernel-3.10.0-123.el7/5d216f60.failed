drm/nouveau: allow nouveau_fence_ref() to be a noop

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] nouveau: allow nouveau_fence_ref() to be a noop (Rob Clark) [1054409]
Rebuild_FUZZ: 95.92%
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 5d216f6013d54a6085d5e499407aec6d67e79990
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/5d216f60.failed

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 5d216f6013d54a6085d5e499407aec6d67e79990)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nouveau_gem.c
diff --cc drivers/gpu/drm/nouveau/nouveau_gem.c
index b4b4d0c1f4af,c60f65a815d3..000000000000
--- a/drivers/gpu/drm/nouveau/nouveau_gem.c
+++ b/drivers/gpu/drm/nouveau/nouveau_gem.c
@@@ -101,6 -87,40 +101,43 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static void
+ nouveau_gem_object_delete(void *data)
+ {
+ 	struct nouveau_vma *vma = data;
+ 	nouveau_vm_unmap(vma);
+ 	nouveau_vm_put(vma);
+ 	kfree(vma);
+ }
+ 
+ static void
+ nouveau_gem_object_unmap(struct nouveau_bo *nvbo, struct nouveau_vma *vma)
+ {
+ 	const bool mapped = nvbo->bo.mem.mem_type != TTM_PL_SYSTEM;
+ 	struct nouveau_fence *fence = NULL;
+ 
+ 	list_del(&vma->head);
+ 
+ 	if (mapped) {
+ 		spin_lock(&nvbo->bo.bdev->fence_lock);
+ 		fence = nouveau_fence_ref(nvbo->bo.sync_obj);
+ 		spin_unlock(&nvbo->bo.bdev->fence_lock);
+ 	}
+ 
+ 	if (fence) {
+ 		nouveau_fence_work(fence, nouveau_gem_object_delete, vma);
+ 	} else {
+ 		if (mapped)
+ 			nouveau_vm_unmap(vma);
+ 		nouveau_vm_put(vma);
+ 		kfree(vma);
+ 	}
+ 	nouveau_fence_unref(&fence);
+ }
+ 
++>>>>>>> 5d216f6013d5 (drm/nouveau: allow nouveau_fence_ref() to be a noop)
  void
  nouveau_gem_object_close(struct drm_gem_object *gem, struct drm_file *file_priv)
  {
diff --git a/drivers/gpu/drm/nouveau/nouveau_bo.c b/drivers/gpu/drm/nouveau/nouveau_bo.c
index 7ff10711a4d0..62e7609f23f4 100644
--- a/drivers/gpu/drm/nouveau/nouveau_bo.c
+++ b/drivers/gpu/drm/nouveau/nouveau_bo.c
@@ -98,12 +98,7 @@ nv10_bo_put_tile_region(struct drm_device *dev, struct nouveau_drm_tile *tile,
 
 	if (tile) {
 		spin_lock(&drm->tile.lock);
-		if (fence) {
-			/* Mark it as pending. */
-			tile->fence = fence;
-			nouveau_fence_ref(fence);
-		}
-
+		tile->fence = nouveau_fence_ref(fence);
 		tile->used = false;
 		spin_unlock(&drm->tile.lock);
 	}
@@ -1444,14 +1439,12 @@ nouveau_ttm_tt_unpopulate(struct ttm_tt *ttm)
 void
 nouveau_bo_fence(struct nouveau_bo *nvbo, struct nouveau_fence *fence)
 {
+	struct nouveau_fence *new_fence = nouveau_fence_ref(fence);
 	struct nouveau_fence *old_fence = NULL;
 
-	if (likely(fence))
-		nouveau_fence_ref(fence);
-
 	spin_lock(&nvbo->bo.bdev->fence_lock);
 	old_fence = nvbo->bo.sync_obj;
-	nvbo->bo.sync_obj = fence;
+	nvbo->bo.sync_obj = new_fence;
 	spin_unlock(&nvbo->bo.bdev->fence_lock);
 
 	nouveau_fence_unref(&old_fence);
diff --git a/drivers/gpu/drm/nouveau/nouveau_fence.c b/drivers/gpu/drm/nouveau/nouveau_fence.c
index d7d4a9a45d4b..b3d5e9136a6a 100644
--- a/drivers/gpu/drm/nouveau/nouveau_fence.c
+++ b/drivers/gpu/drm/nouveau/nouveau_fence.c
@@ -241,7 +241,8 @@ nouveau_fence_unref(struct nouveau_fence **pfence)
 struct nouveau_fence *
 nouveau_fence_ref(struct nouveau_fence *fence)
 {
-	kref_get(&fence->kref);
+	if (fence)
+		kref_get(&fence->kref);
 	return fence;
 }
 
* Unmerged path drivers/gpu/drm/nouveau/nouveau_gem.c
