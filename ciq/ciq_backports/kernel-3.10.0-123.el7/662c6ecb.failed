drm/i915/vlv: fix up broken precision in vlv_crtc_clock_get

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] i915/vlv: fix up broken precision in vlv_crtc_clock_get (Rob Clark) [1054409]
Rebuild_FUZZ: 96.49%
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit 662c6ecbcdca1fe8a5402f6c83d98d242917a043
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/662c6ecb.failed

With some divider values we end up with the wrong result.  So remove the
intermediates (like Ville suggested in the first place) to get the right
answer.

	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
(cherry picked from commit 662c6ecbcdca1fe8a5402f6c83d98d242917a043)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_display.c
diff --cc drivers/gpu/drm/i915/intel_display.c
index bcc9e0539bc8,f52e6d4ebb2e..000000000000
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@@ -4757,6 -5049,59 +4757,62 @@@ static int i9xx_crtc_mode_set(struct dr
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static void i9xx_get_pfit_config(struct intel_crtc *crtc,
+ 				 struct intel_crtc_config *pipe_config)
+ {
+ 	struct drm_device *dev = crtc->base.dev;
+ 	struct drm_i915_private *dev_priv = dev->dev_private;
+ 	uint32_t tmp;
+ 
+ 	tmp = I915_READ(PFIT_CONTROL);
+ 	if (!(tmp & PFIT_ENABLE))
+ 		return;
+ 
+ 	/* Check whether the pfit is attached to our pipe. */
+ 	if (INTEL_INFO(dev)->gen < 4) {
+ 		if (crtc->pipe != PIPE_B)
+ 			return;
+ 	} else {
+ 		if ((tmp & PFIT_PIPE_MASK) != (crtc->pipe << PFIT_PIPE_SHIFT))
+ 			return;
+ 	}
+ 
+ 	pipe_config->gmch_pfit.control = tmp;
+ 	pipe_config->gmch_pfit.pgm_ratios = I915_READ(PFIT_PGM_RATIOS);
+ 	if (INTEL_INFO(dev)->gen < 5)
+ 		pipe_config->gmch_pfit.lvds_border_bits =
+ 			I915_READ(LVDS) & LVDS_BORDER_ENABLE;
+ }
+ 
+ static void vlv_crtc_clock_get(struct intel_crtc *crtc,
+ 			       struct intel_crtc_config *pipe_config)
+ {
+ 	struct drm_device *dev = crtc->base.dev;
+ 	struct drm_i915_private *dev_priv = dev->dev_private;
+ 	int pipe = pipe_config->cpu_transcoder;
+ 	intel_clock_t clock;
+ 	u32 mdiv;
+ 	int refclk = 100000;
+ 
+ 	mutex_lock(&dev_priv->dpio_lock);
+ 	mdiv = vlv_dpio_read(dev_priv, pipe, DPIO_DIV(pipe));
+ 	mutex_unlock(&dev_priv->dpio_lock);
+ 
+ 	clock.m1 = (mdiv >> DPIO_M1DIV_SHIFT) & 7;
+ 	clock.m2 = mdiv & DPIO_M2DIV_MASK;
+ 	clock.n = (mdiv >> DPIO_N_SHIFT) & 0xf;
+ 	clock.p1 = (mdiv >> DPIO_P1_SHIFT) & 7;
+ 	clock.p2 = (mdiv >> DPIO_P2_SHIFT) & 0x1f;
+ 
+ 	clock.vco = refclk * clock.m1 * clock.m2 / clock.n;
+ 	clock.dot = 2 * clock.vco / (clock.p1 * clock.p2);
+ 
+ 	pipe_config->port_clock = clock.dot / 10;
+ }
+ 
++>>>>>>> 662c6ecbcdca (drm/i915/vlv: fix up broken precision in vlv_crtc_clock_get)
  static bool i9xx_get_pipe_config(struct intel_crtc *crtc,
  				 struct intel_crtc_config *pipe_config)
  {
* Unmerged path drivers/gpu/drm/i915/intel_display.c
