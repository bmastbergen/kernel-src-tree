pktgen: Fix position of ip and udp header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Thomas Graf <tgraf@suug.ch>
commit 525cebedb32a87fa48584bc44e14170beb2c10d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/525cebed.failed

skb_set_network_header() expects an offset based on the data pointer
whereas skb_tail_offset() also includes the headroom. This resulted
in the ip header being written in a wrong location.

Use return values of skb_put() directly and rely on skb->len to
set mac, network, and transport header.

	Cc: Simon Horman <horms@verge.net.au>
	Cc: Daniel Borkmann <dborkmann@redhat.com>
Assisted-by: Daniel Borkmann <dborkmann@redhat.com>
	Signed-off-by: Thomas Graf <tgraf@suug.ch>
	Acked-by: Daniel Borkmann <dborkmann@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 525cebedb32a87fa48584bc44e14170beb2c10d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/pktgen.c
diff --cc net/core/pktgen.c
index 11f2704c3810,303412d8332b..000000000000
--- a/net/core/pktgen.c
+++ b/net/core/pktgen.c
@@@ -2708,9 -2708,12 +2708,18 @@@ static struct sk_buff *fill_packet_ipv4
  		*vlan_encapsulated_proto = htons(ETH_P_IP);
  	}
  
++<<<<<<< HEAD
 +	skb->network_header = skb->tail;
 +	skb->transport_header = skb->network_header + sizeof(struct iphdr);
 +	skb_put(skb, sizeof(struct iphdr) + sizeof(struct udphdr));
++=======
+ 	skb_set_mac_header(skb, 0);
+ 	skb_set_network_header(skb, skb->len);
+ 	iph = (struct iphdr *) skb_put(skb, sizeof(struct iphdr));
+ 
+ 	skb_set_transport_header(skb, skb->len);
+ 	udph = (struct udphdr *) skb_put(skb, sizeof(struct udphdr));
++>>>>>>> 525cebedb32a (pktgen: Fix position of ip and udp header)
  	skb_set_queue_mapping(skb, queue_map);
  	skb->priority = pkt_dev->skb_priority;
  
@@@ -2822,13 -2820,14 +2826,20 @@@ static struct sk_buff *fill_packet_ipv6
  		*vlan_encapsulated_proto = htons(ETH_P_IPV6);
  	}
  
++<<<<<<< HEAD
 +	skb->network_header = skb->tail;
 +	skb->transport_header = skb->network_header + sizeof(struct ipv6hdr);
 +	skb_put(skb, sizeof(struct ipv6hdr) + sizeof(struct udphdr));
++=======
+ 	skb_set_mac_header(skb, 0);
+ 	skb_set_network_header(skb, skb->len);
+ 	iph = (struct ipv6hdr *) skb_put(skb, sizeof(struct ipv6hdr));
+ 
+ 	skb_set_transport_header(skb, skb->len);
+ 	udph = (struct udphdr *) skb_put(skb, sizeof(struct udphdr));
++>>>>>>> 525cebedb32a (pktgen: Fix position of ip and udp header)
  	skb_set_queue_mapping(skb, queue_map);
  	skb->priority = pkt_dev->skb_priority;
- 	iph = ipv6_hdr(skb);
- 	udph = udp_hdr(skb);
  
  	memcpy(eth, pkt_dev->hh, 12);
  	*(__be16 *) &eth[12] = protocol;
* Unmerged path net/core/pktgen.c
