tcp: rename tcp_tso_segment()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 28be6e07e8bccee76b51bca8fdba52c1b28fc77c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/28be6e07.failed

Rename tcp_tso_segment() to tcp_gso_segment(), to better reflect
what is going on, and ease grep games.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 28be6e07e8bccee76b51bca8fdba52c1b28fc77c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tcp.h
diff --cc include/net/tcp.h
index 172534716ebb,372dcccfeed0..000000000000
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@@ -1546,20 -1546,31 +1546,27 @@@ extern void tcp_proc_unregister(struct 
  extern struct request_sock_ops tcp_request_sock_ops;
  extern struct request_sock_ops tcp6_request_sock_ops;
  
 -void tcp_v4_destroy_sock(struct sock *sk);
 +extern void tcp_v4_destroy_sock(struct sock *sk);
  
++<<<<<<< HEAD
 +extern struct sk_buff *tcp_tso_segment(struct sk_buff *skb,
 +				       netdev_features_t features);
 +extern struct sk_buff **tcp_gro_receive(struct sk_buff **head,
 +					struct sk_buff *skb);
 +extern int tcp_gro_complete(struct sk_buff *skb);
++=======
+ struct sk_buff *tcp_gso_segment(struct sk_buff *skb,
+ 				netdev_features_t features);
+ struct sk_buff **tcp_gro_receive(struct sk_buff **head, struct sk_buff *skb);
+ int tcp_gro_complete(struct sk_buff *skb);
++>>>>>>> 28be6e07e8bc (tcp: rename tcp_tso_segment())
  
 -void __tcp_v4_send_check(struct sk_buff *skb, __be32 saddr, __be32 daddr);
 -
 -static inline u32 tcp_notsent_lowat(const struct tcp_sock *tp)
 -{
 -	return tp->notsent_lowat ?: sysctl_tcp_notsent_lowat;
 -}
 -
 -static inline bool tcp_stream_memory_free(const struct sock *sk)
 -{
 -	const struct tcp_sock *tp = tcp_sk(sk);
 -	u32 notsent_bytes = tp->write_seq - tp->snd_nxt;
 -
 -	return notsent_bytes < tcp_notsent_lowat(tp);
 -}
 +extern void __tcp_v4_send_check(struct sk_buff *skb, __be32 saddr,
 +				__be32 daddr);
  
  #ifdef CONFIG_PROC_FS
 -int tcp4_proc_init(void);
 -void tcp4_proc_exit(void);
 +extern int tcp4_proc_init(void);
 +extern void tcp4_proc_exit(void);
  #endif
  
  /* TCP af-specific functions */
* Unmerged path include/net/tcp.h
diff --git a/net/ipv4/tcp_offload.c b/net/ipv4/tcp_offload.c
index 3a7525e6c086..8e3113f46ec1 100644
--- a/net/ipv4/tcp_offload.c
+++ b/net/ipv4/tcp_offload.c
@@ -14,7 +14,7 @@
 #include <net/tcp.h>
 #include <net/protocol.h>
 
-struct sk_buff *tcp_tso_segment(struct sk_buff *skb,
+struct sk_buff *tcp_gso_segment(struct sk_buff *skb,
 				netdev_features_t features)
 {
 	struct sk_buff *segs = ERR_PTR(-EINVAL);
@@ -139,7 +139,7 @@ struct sk_buff *tcp_tso_segment(struct sk_buff *skb,
 out:
 	return segs;
 }
-EXPORT_SYMBOL(tcp_tso_segment);
+EXPORT_SYMBOL(tcp_gso_segment);
 
 struct sk_buff **tcp_gro_receive(struct sk_buff **head, struct sk_buff *skb)
 {
@@ -320,7 +320,7 @@ static int tcp4_gro_complete(struct sk_buff *skb)
 static const struct net_offload tcpv4_offload = {
 	.callbacks = {
 		.gso_send_check	=	tcp_v4_gso_send_check,
-		.gso_segment	=	tcp_tso_segment,
+		.gso_segment	=	tcp_gso_segment,
 		.gro_receive	=	tcp4_gro_receive,
 		.gro_complete	=	tcp4_gro_complete,
 	},
diff --git a/net/ipv6/tcpv6_offload.c b/net/ipv6/tcpv6_offload.c
index 2ec6bf6a0aa0..c1097c798900 100644
--- a/net/ipv6/tcpv6_offload.c
+++ b/net/ipv6/tcpv6_offload.c
@@ -83,7 +83,7 @@ static int tcp6_gro_complete(struct sk_buff *skb)
 static const struct net_offload tcpv6_offload = {
 	.callbacks = {
 		.gso_send_check	=	tcp_v6_gso_send_check,
-		.gso_segment	=	tcp_tso_segment,
+		.gso_segment	=	tcp_gso_segment,
 		.gro_receive	=	tcp6_gro_receive,
 		.gro_complete	=	tcp6_gro_complete,
 	},
