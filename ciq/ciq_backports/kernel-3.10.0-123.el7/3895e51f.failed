xfs: ensure correct log item buffer alignment

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 3895e51f6dbf6610519be070a3bede811f6ac4fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/3895e51f.failed

On 32 bit platforms, the log item vector headers are not 64 bit
aligned or sized. hence if we don't take care to align them
correctly or pad the buffer appropriately for 8 byte alignment, we
can end up with alignment issues when accessing the user buffer
directly as a structure.

To solve this, simply pad the buffer headers to 64 bit offset so
that the data section is always 8 byte aligned.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reported-by: Michael L. Semon <mlsemon35@gmail.com>
	Tested-by: Michael L. Semon <mlsemon35@gmail.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 3895e51f6dbf6610519be070a3bede811f6ac4fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_log_cil.c
diff --cc fs/xfs/xfs_log_cil.c
index 28c72bef4a4e,4ef6fdbced78..000000000000
--- a/fs/xfs/xfs_log_cil.c
+++ b/fs/xfs/xfs_log_cil.c
@@@ -230,6 -202,16 +230,19 @@@ xlog_cil_insert_format_items
  			nbytes = 0;
  		}
  
++<<<<<<< HEAD
++=======
+ 		/*
+ 		 * We 64-bit align the length of each iovec so that the start
+ 		 * of the next one is naturally aligned.  We'll need to
+ 		 * account for that slack space here. Then round nbytes up
+ 		 * to 64-bit alignment so that the initial buffer alignment is
+ 		 * easy to calculate and verify.
+ 		 */
+ 		nbytes += niovecs * sizeof(uint64_t);
+ 		nbytes = round_up(nbytes, sizeof(uint64_t));
+ 
++>>>>>>> 3895e51f6dbf (xfs: ensure correct log item buffer alignment)
  		/* grab the old item if it exists for reservation accounting */
  		old_lv = lip->li_lv;
  
@@@ -270,9 -258,11 +289,15 @@@
  		lv->lv_niovecs = niovecs;
  
  		/* The allocated data region lies beyond the iovec region */
 -		lv->lv_buf_len = 0;
  		lv->lv_buf = (char *)lv + buf_size - nbytes;
++<<<<<<< HEAD
 +
 +		lv->lv_buf_len = xlog_cil_lv_item_format(lip, lv);
++=======
+ 		ASSERT(IS_ALIGNED((unsigned long)lv->lv_buf, sizeof(uint64_t)));
+ 
+ 		lip->li_ops->iop_format(lip, lv);
++>>>>>>> 3895e51f6dbf (xfs: ensure correct log item buffer alignment)
  insert:
  		ASSERT(lv->lv_buf_len <= nbytes);
  		xfs_cil_prepare_item(log, lv, old_lv, diff_len, diff_iovecs);
* Unmerged path fs/xfs/xfs_log_cil.c
