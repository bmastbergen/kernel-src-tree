netfilter: add help information to new nf_tables Kconfig options

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit d497c63527369844ea705149d5a26c9ac0f78282
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/d497c635.failed

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit d497c63527369844ea705149d5a26c9ac0f78282)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/netfilter/Kconfig
#	net/ipv6/netfilter/Kconfig
#	net/netfilter/Kconfig
diff --cc net/ipv4/netfilter/Kconfig
index e7916c193932,81c6910cfa92..000000000000
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@@ -36,6 -36,37 +36,40 @@@ config NF_CONNTRACK_PROC_COMPA
  
  	  If unsure, say Y.
  
++<<<<<<< HEAD
++=======
+ config NF_TABLES_IPV4
+ 	depends on NF_TABLES
+ 	tristate "IPv4 nf_tables support"
+ 	help
+ 	  This option enables the IPv4 support for nf_tables.
+ 
+ config NFT_CHAIN_ROUTE_IPV4
+ 	depends on NF_TABLES_IPV4
+ 	tristate "IPv4 nf_tables route chain support"
+ 	help
+ 	  This option enables the "route" chain for IPv4 in nf_tables. This
+ 	  chain type is used to force packet re-routing after mangling header
+ 	  fields such as the source, destination, type of service and
+ 	  the packet mark.
+ 
+ config NFT_CHAIN_NAT_IPV4
+ 	depends on NF_TABLES_IPV4
+ 	depends on NF_NAT_IPV4 && NFT_NAT
+ 	tristate "IPv4 nf_tables nat chain support"
+ 	help
+ 	  This option enables the "nat" chain for IPv4 in nf_tables. This
+ 	  chain type is used to perform Network Address Translation (NAT)
+ 	  packet transformations such as the source, destination address and
+ 	  source and destination ports.
+ 
+ config NF_TABLES_ARP
+ 	depends on NF_TABLES
+ 	tristate "ARP nf_tables support"
+ 	help
+ 	  This option enables the ARP support for nf_tables.
+ 
++>>>>>>> d497c6352736 (netfilter: add help information to new nf_tables Kconfig options)
  config IP_NF_IPTABLES
  	tristate "IP tables support (required for filtering/masq/NAT)"
  	default m if NETFILTER_ADVANCED=n
diff --cc net/ipv6/netfilter/Kconfig
index a7f842b29b67,35750df744dc..000000000000
--- a/net/ipv6/netfilter/Kconfig
+++ b/net/ipv6/netfilter/Kconfig
@@@ -25,6 -25,31 +25,34 @@@ config NF_CONNTRACK_IPV
  
  	  To compile it as a module, choose M here.  If unsure, say N.
  
++<<<<<<< HEAD
++=======
+ config NF_TABLES_IPV6
+ 	depends on NF_TABLES
+ 	tristate "IPv6 nf_tables support"
+ 	help
+ 	  This option enables the IPv6 support for nf_tables.
+ 
+ config NFT_CHAIN_ROUTE_IPV6
+ 	depends on NF_TABLES_IPV6
+ 	tristate "IPv6 nf_tables route chain support"
+ 	help
+ 	  This option enables the "route" chain for IPv6 in nf_tables. This
+ 	  chain type is used to force packet re-routing after mangling header
+ 	  fields such as the source, destination, flowlabel, hop-limit and
+ 	  the packet mark.
+ 
+ config NFT_CHAIN_NAT_IPV6
+ 	depends on NF_TABLES_IPV6
+ 	depends on NF_NAT_IPV6 && NFT_NAT
+ 	tristate "IPv6 nf_tables nat chain support"
+ 	help
+ 	  This option enables the "nat" chain for IPv6 in nf_tables. This
+ 	  chain type is used to perform Network Address Translation (NAT)
+ 	  packet transformations such as the source, destination address and
+ 	  source and destination ports.
+ 
++>>>>>>> d497c6352736 (netfilter: add help information to new nf_tables Kconfig options)
  config IP6_NF_IPTABLES
  	tristate "IP6 tables support (required for filtering)"
  	depends on INET && IPV6
diff --cc net/netfilter/Kconfig
index 112ddfea8c1a,06095144ec8d..000000000000
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@@ -408,8 -408,120 +408,120 @@@ config NF_NAT_TFT
  	depends on NF_CONNTRACK && NF_NAT
  	default NF_NAT && NF_CONNTRACK_TFTP
  
 -config NETFILTER_SYNPROXY
 -	tristate
 -
  endif # NF_CONNTRACK
  
++<<<<<<< HEAD
++=======
+ config NF_TABLES
+ 	select NETFILTER_NETLINK
+ 	tristate "Netfilter nf_tables support"
+ 	help
+ 	  nftables is the new packet classification framework that intends to
+ 	  replace the existing {ip,ip6,arp,eb}_tables infrastructure. It
+ 	  provides a pseudo-state machine with an extensible instruction-set
+ 	  (also known as expressions) that the userspace 'nft' utility
+ 	  (http://www.netfilter.org/projects/nftables) uses to build the
+ 	  rule-set. It also comes with the generic set infrastructure that
+ 	  allows you to construct mappings between matchings and actions
+ 	  for performance lookups.
+ 
+ 	  To compile it as a module, choose M here.
+ 
+ config NFT_EXTHDR
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables IPv6 exthdr module"
+ 	help
+ 	  This option adds the "exthdr" expression that you can use to match
+ 	  IPv6 extension headers.
+ 
+ config NFT_META
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables meta module"
+ 	help
+ 	  This option adds the "meta" expression that you can use to match and
+ 	  to set packet metainformation such as the packet mark.
+ 
+ config NFT_CT
+ 	depends on NF_TABLES
+ 	depends on NF_CONNTRACK
+ 	tristate "Netfilter nf_tables conntrack module"
+ 	help
+ 	  This option adds the "meta" expression that you can use to match
+ 	  connection tracking information such as the flow state.
+ 
+ config NFT_RBTREE
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables rbtree set module"
+ 	help
+ 	  This option adds the "rbtree" set type (Red Black tree) that is used
+ 	  to build interval-based sets.
+ 
+ config NFT_HASH
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables hash set module"
+ 	help
+ 	  This option adds the "hash" set type that is used to build one-way
+ 	  mappings between matchings and actions.
+ 
+ config NFT_COUNTER
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables counter module"
+ 	help
+ 	  This option adds the "counter" expression that you can use to
+ 	  include packet and byte counters in a rule.
+ 
+ config NFT_LOG
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables log module"
+ 	help
+ 	  This option adds the "log" expression that you can use to log
+ 	  packets matching some criteria.
+ 
+ config NFT_LIMIT
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables limit module"
+ 	help
+ 	  This option adds the "limit" expression that you can use to
+ 	  ratelimit rule matchings.
+ 
+ config NFT_NAT
+ 	depends on NF_TABLES
+ 	depends on NF_CONNTRACK
+ 	depends on NF_NAT
+ 	tristate "Netfilter nf_tables nat module"
+ 	help
+ 	  This option adds the "nat" expression that you can use to perform
+ 	  typical Network Address Translation (NAT) packet transformations.
+ 
+ config NFT_QUEUE
+ 	depends on NF_TABLES
+ 	depends on NETFILTER_XTABLES
+ 	depends on NETFILTER_NETLINK_QUEUE
+ 	tristate "Netfilter nf_tables queue module"
+ 	help
+ 	  This is required if you intend to use the userspace queueing
+ 	  infrastructure (also known as NFQUEUE) from nftables.
+ 
+ config NFT_REJECT
+ 	depends on NF_TABLES
+ 	depends on NF_TABLES_IPV6 || !NF_TABLES_IPV6
+ 	default m if NETFILTER_ADVANCED=n
+ 	tristate "Netfilter nf_tables reject support"
+ 	help
+ 	  This option adds the "reject" expression that you can use to
+ 	  explicitly deny and notify via TCP reset/ICMP informational errors
+ 	  unallowed traffic.
+ 
+ config NFT_COMPAT
+ 	depends on NF_TABLES
+ 	depends on NETFILTER_XTABLES
+ 	tristate "Netfilter x_tables over nf_tables module"
+ 	help
+ 	  This is required if you intend to use any of existing
+ 	  x_tables match/target extensions over the nf_tables
+ 	  framework.
+ 
++>>>>>>> d497c6352736 (netfilter: add help information to new nf_tables Kconfig options)
  config NETFILTER_XTABLES
  	tristate "Netfilter Xtables support (required for ip_tables)"
  	default m if NETFILTER_ADVANCED=n
* Unmerged path net/ipv4/netfilter/Kconfig
* Unmerged path net/ipv6/netfilter/Kconfig
* Unmerged path net/netfilter/Kconfig
