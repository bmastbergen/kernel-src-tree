ACPI / LPSS: mask the UART TX completion interrupt

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [acpi] lpss: mask the UART TX completion interrupt (Myron Stowe) [991615]
Rebuild_FUZZ: 92.47%
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit 06d8641504726322fca54400bbac982bd44f9a27
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/06d86415.failed

Intel LPSS provides an extra TX byte counter and an extra TX
completion interrupt for some of its bus controllers.  However,
there is no use for the extra UART interrupt and it has to be
masked out during initialization.

Otherwise, if the firmware does not mask the interrupt and
the driver does not clear it, it may cause an interrupt flood
freezing the board to happen.

Add code masking that problematic interrupt to the ACPI LPSS driver.

[rjw: Changelog]
	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 06d8641504726322fca54400bbac982bd44f9a27)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpi_lpss.c
diff --cc drivers/acpi/acpi_lpss.c
index a14d997f1e4c,bd9867f592b7..000000000000
--- a/drivers/acpi/acpi_lpss.c
+++ b/drivers/acpi/acpi_lpss.c
@@@ -244,17 -270,8 +267,22 @@@ static int acpi_lpss_create_device(stru
  		}
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * This works around a known issue in ACPI tables where LPSS devices
 +	 * have _PS0 and _PS3 without _PSC (and no power resources), so
 +	 * acpi_bus_init_power() will assume that the BIOS has put them into D0.
 +	 */
 +	ret = acpi_device_fix_up_power(adev);
 +	if (ret) {
 +		/* Skip the device, but continue the namespace scan. */
 +		ret = 0;
 +		goto err_out;
 +	}
++=======
+ 	if (dev_desc->setup)
+ 		dev_desc->setup(pdata);
++>>>>>>> 06d864150472 (ACPI / LPSS: mask the UART TX completion interrupt)
  
  	adev->driver_data = pdata;
  	ret = acpi_create_platform_device(adev, id);
* Unmerged path drivers/acpi/acpi_lpss.c
