NFSv4: Add tracepoints for debugging the idmapper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [fs] nfs: Add tracepoints for debugging the idmapper (Jeff Layton) [1009119]
Rebuild_FUZZ: 97.92%
commit-author Trond Myklebust <Trond.Myklebust@netapp.com>
commit 1f2d30b5338f1adaac249707ae49f1c675049cfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/1f2d30b5.failed

Add tracepoints to help debug uid/gid mappings to username/group.

	Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
(cherry picked from commit 1f2d30b5338f1adaac249707ae49f1c675049cfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4trace.h
diff --cc fs/nfs/nfs4trace.h
index 3f124dbcd60a,f58edcf418bf..000000000000
--- a/fs/nfs/nfs4trace.h
+++ b/fs/nfs/nfs4trace.h
@@@ -411,6 -411,268 +411,271 @@@ DEFINE_NFS4_LOCK_EVENT(nfs4_lock_reclai
  DEFINE_NFS4_LOCK_EVENT(nfs4_lock_expired);
  DEFINE_NFS4_LOCK_EVENT(nfs4_unlock);
  
++<<<<<<< HEAD
++=======
+ DECLARE_EVENT_CLASS(nfs4_set_delegation_event,
+ 		TP_PROTO(
+ 			const struct inode *inode,
+ 			fmode_t fmode
+ 		),
+ 
+ 		TP_ARGS(inode, fmode),
+ 
+ 		TP_STRUCT__entry(
+ 			__field(dev_t, dev)
+ 			__field(u32, fhandle)
+ 			__field(u64, fileid)
+ 			__field(unsigned int, fmode)
+ 		),
+ 
+ 		TP_fast_assign(
+ 			__entry->dev = inode->i_sb->s_dev;
+ 			__entry->fileid = NFS_FILEID(inode);
+ 			__entry->fhandle = nfs_fhandle_hash(NFS_FH(inode));
+ 			__entry->fmode = (__force unsigned int)fmode;
+ 		),
+ 
+ 		TP_printk(
+ 			"fmode=%s fileid=%02x:%02x:%llu fhandle=0x%08x",
+ 			show_fmode_flags(__entry->fmode),
+ 			MAJOR(__entry->dev), MINOR(__entry->dev),
+ 			(unsigned long long)__entry->fileid,
+ 			__entry->fhandle
+ 		)
+ );
+ #define DEFINE_NFS4_SET_DELEGATION_EVENT(name) \
+ 	DEFINE_EVENT(nfs4_set_delegation_event, name, \
+ 			TP_PROTO( \
+ 				const struct inode *inode, \
+ 				fmode_t fmode \
+ 			), \
+ 			TP_ARGS(inode, fmode))
+ DEFINE_NFS4_SET_DELEGATION_EVENT(nfs4_set_delegation);
+ DEFINE_NFS4_SET_DELEGATION_EVENT(nfs4_reclaim_delegation);
+ 
+ TRACE_EVENT(nfs4_delegreturn_exit,
+ 		TP_PROTO(
+ 			const struct nfs4_delegreturnargs *args,
+ 			const struct nfs4_delegreturnres *res,
+ 			int error
+ 		),
+ 
+ 		TP_ARGS(args, res, error),
+ 
+ 		TP_STRUCT__entry(
+ 			__field(dev_t, dev)
+ 			__field(u32, fhandle)
+ 			__field(int, error)
+ 		),
+ 
+ 		TP_fast_assign(
+ 			__entry->dev = res->server->s_dev;
+ 			__entry->fhandle = nfs_fhandle_hash(args->fhandle);
+ 			__entry->error = error;
+ 		),
+ 
+ 		TP_printk(
+ 			"error=%d (%s) dev=%02x:%02x fhandle=0x%08x",
+ 			__entry->error,
+ 			show_nfsv4_errors(__entry->error),
+ 			MAJOR(__entry->dev), MINOR(__entry->dev),
+ 			__entry->fhandle
+ 		)
+ );
+ 
+ DECLARE_EVENT_CLASS(nfs4_lookup_event,
+ 		TP_PROTO(
+ 			const struct inode *dir,
+ 			const struct qstr *name,
+ 			int error
+ 		),
+ 
+ 		TP_ARGS(dir, name, error),
+ 
+ 		TP_STRUCT__entry(
+ 			__field(dev_t, dev)
+ 			__field(int, error)
+ 			__field(u64, dir)
+ 			__string(name, name->name)
+ 		),
+ 
+ 		TP_fast_assign(
+ 			__entry->dev = dir->i_sb->s_dev;
+ 			__entry->dir = NFS_FILEID(dir);
+ 			__entry->error = error;
+ 			__assign_str(name, name->name);
+ 		),
+ 
+ 		TP_printk(
+ 			"error=%d (%s) name=%02x:%02x:%llu/%s",
+ 			__entry->error,
+ 			show_nfsv4_errors(__entry->error),
+ 			MAJOR(__entry->dev), MINOR(__entry->dev),
+ 			(unsigned long long)__entry->dir,
+ 			__get_str(name)
+ 		)
+ );
+ 
+ #define DEFINE_NFS4_LOOKUP_EVENT(name) \
+ 	DEFINE_EVENT(nfs4_lookup_event, name, \
+ 			TP_PROTO( \
+ 				const struct inode *dir, \
+ 				const struct qstr *name, \
+ 				int error \
+ 			), \
+ 			TP_ARGS(dir, name, error))
+ 
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_lookup);
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_symlink);
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_mkdir);
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_mknod);
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_remove);
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_get_fs_locations);
+ DEFINE_NFS4_LOOKUP_EVENT(nfs4_secinfo);
+ 
+ TRACE_EVENT(nfs4_rename,
+ 		TP_PROTO(
+ 			const struct inode *olddir,
+ 			const struct qstr *oldname,
+ 			const struct inode *newdir,
+ 			const struct qstr *newname,
+ 			int error
+ 		),
+ 
+ 		TP_ARGS(olddir, oldname, newdir, newname, error),
+ 
+ 		TP_STRUCT__entry(
+ 			__field(dev_t, dev)
+ 			__field(int, error)
+ 			__field(u64, olddir)
+ 			__string(oldname, oldname->name)
+ 			__field(u64, newdir)
+ 			__string(newname, newname->name)
+ 		),
+ 
+ 		TP_fast_assign(
+ 			__entry->dev = olddir->i_sb->s_dev;
+ 			__entry->olddir = NFS_FILEID(olddir);
+ 			__entry->newdir = NFS_FILEID(newdir);
+ 			__entry->error = error;
+ 			__assign_str(oldname, oldname->name);
+ 			__assign_str(newname, newname->name);
+ 		),
+ 
+ 		TP_printk(
+ 			"error=%d (%s) oldname=%02x:%02x:%llu/%s "
+ 			"newname=%02x:%02x:%llu/%s",
+ 			__entry->error,
+ 			show_nfsv4_errors(__entry->error),
+ 			MAJOR(__entry->dev), MINOR(__entry->dev),
+ 			(unsigned long long)__entry->olddir,
+ 			__get_str(oldname),
+ 			MAJOR(__entry->dev), MINOR(__entry->dev),
+ 			(unsigned long long)__entry->newdir,
+ 			__get_str(newname)
+ 		)
+ );
+ 
+ DECLARE_EVENT_CLASS(nfs4_inode_event,
+ 		TP_PROTO(
+ 			const struct inode *inode,
+ 			int error
+ 		),
+ 
+ 		TP_ARGS(inode, error),
+ 
+ 		TP_STRUCT__entry(
+ 			__field(dev_t, dev)
+ 			__field(u32, fhandle)
+ 			__field(u64, fileid)
+ 			__field(int, error)
+ 		),
+ 
+ 		TP_fast_assign(
+ 			__entry->dev = inode->i_sb->s_dev;
+ 			__entry->fileid = NFS_FILEID(inode);
+ 			__entry->fhandle = nfs_fhandle_hash(NFS_FH(inode));
+ 			__entry->error = error;
+ 		),
+ 
+ 		TP_printk(
+ 			"error=%d (%s) fileid=%02x:%02x:%llu fhandle=0x%08x",
+ 			__entry->error,
+ 			show_nfsv4_errors(__entry->error),
+ 			MAJOR(__entry->dev), MINOR(__entry->dev),
+ 			(unsigned long long)__entry->fileid,
+ 			__entry->fhandle
+ 		)
+ );
+ 
+ #define DEFINE_NFS4_INODE_EVENT(name) \
+ 	DEFINE_EVENT(nfs4_inode_event, name, \
+ 			TP_PROTO( \
+ 				const struct inode *inode, \
+ 				int error \
+ 			), \
+ 			TP_ARGS(inode, error))
+ 
+ DEFINE_NFS4_INODE_EVENT(nfs4_setattr);
+ DEFINE_NFS4_INODE_EVENT(nfs4_access);
+ DEFINE_NFS4_INODE_EVENT(nfs4_readlink);
+ DEFINE_NFS4_INODE_EVENT(nfs4_readdir);
+ DEFINE_NFS4_INODE_EVENT(nfs4_get_acl);
+ DEFINE_NFS4_INODE_EVENT(nfs4_set_acl);
+ #ifdef CONFIG_NFS_V4_SECURITY_LABEL
+ DEFINE_NFS4_INODE_EVENT(nfs4_get_security_label);
+ DEFINE_NFS4_INODE_EVENT(nfs4_set_security_label);
+ #endif /* CONFIG_NFS_V4_SECURITY_LABEL */
+ DEFINE_NFS4_INODE_EVENT(nfs4_recall_delegation);
+ DEFINE_NFS4_INODE_EVENT(nfs4_delegreturn);
+ 
+ DECLARE_EVENT_CLASS(nfs4_idmap_event,
+ 		TP_PROTO(
+ 			const char *name,
+ 			int len,
+ 			u32 id,
+ 			int error
+ 		),
+ 
+ 		TP_ARGS(name, len, id, error),
+ 
+ 		TP_STRUCT__entry(
+ 			__field(int, error)
+ 			__field(u32, id)
+ 			__dynamic_array(char, name, len > 0 ? len + 1 : 1)
+ 		),
+ 
+ 		TP_fast_assign(
+ 			if (len < 0)
+ 				len = 0;
+ 			__entry->error = error < 0 ? error : 0;
+ 			__entry->id = id;
+ 			memcpy(__get_dynamic_array(name), name, len);
+ 			((char *)__get_dynamic_array(name))[len] = 0;
+ 		),
+ 
+ 		TP_printk(
+ 			"error=%d id=%u name=%s",
+ 			__entry->error,
+ 			__entry->id,
+ 			__get_str(name)
+ 		)
+ );
+ #define DEFINE_NFS4_IDMAP_EVENT(name) \
+ 	DEFINE_EVENT(nfs4_idmap_event, name, \
+ 			TP_PROTO( \
+ 				const char *name, \
+ 				int len, \
+ 				u32 id, \
+ 				int error \
+ 			), \
+ 			TP_ARGS(name, len, id, error))
+ DEFINE_NFS4_IDMAP_EVENT(nfs4_map_name_to_uid);
+ DEFINE_NFS4_IDMAP_EVENT(nfs4_map_group_to_gid);
+ DEFINE_NFS4_IDMAP_EVENT(nfs4_map_uid_to_name);
+ DEFINE_NFS4_IDMAP_EVENT(nfs4_map_gid_to_group);
+ 
++>>>>>>> 1f2d30b5338f (NFSv4: Add tracepoints for debugging the idmapper)
  #endif /* _TRACE_NFS4_H */
  
  #undef TRACE_INCLUDE_PATH
diff --git a/fs/nfs/idmap.c b/fs/nfs/idmap.c
index 34f3e9ac7685..567983d2c0eb 100644
--- a/fs/nfs/idmap.c
+++ b/fs/nfs/idmap.c
@@ -49,6 +49,7 @@
 
 #include "internal.h"
 #include "netns.h"
+#include "nfs4trace.h"
 
 #define NFS_UINT_MAXLEN 11
 
@@ -735,6 +736,7 @@ int nfs_map_name_to_uid(const struct nfs_server *server, const char *name, size_
 		if (!uid_valid(*uid))
 			ret = -ERANGE;
 	}
+	trace_nfs4_map_name_to_uid(name, namelen, id, ret);
 	return ret;
 }
 
@@ -751,6 +753,7 @@ int nfs_map_group_to_gid(const struct nfs_server *server, const char *name, size
 		if (!gid_valid(*gid))
 			ret = -ERANGE;
 	}
+	trace_nfs4_map_group_to_gid(name, namelen, id, ret);
 	return ret;
 }
 
@@ -765,6 +768,7 @@ int nfs_map_uid_to_name(const struct nfs_server *server, kuid_t uid, char *buf,
 		ret = nfs_idmap_lookup_name(id, "user", buf, buflen, idmap);
 	if (ret < 0)
 		ret = nfs_map_numeric_to_string(id, buf, buflen);
+	trace_nfs4_map_uid_to_name(buf, ret, id, ret);
 	return ret;
 }
 int nfs_map_gid_to_group(const struct nfs_server *server, kgid_t gid, char *buf, size_t buflen)
@@ -778,5 +782,6 @@ int nfs_map_gid_to_group(const struct nfs_server *server, kgid_t gid, char *buf,
 		ret = nfs_idmap_lookup_name(id, "group", buf, buflen, idmap);
 	if (ret < 0)
 		ret = nfs_map_numeric_to_string(id, buf, buflen);
+	trace_nfs4_map_gid_to_group(buf, ret, id, ret);
 	return ret;
 }
* Unmerged path fs/nfs/nfs4trace.h
