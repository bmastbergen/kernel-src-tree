ipv6 addrconf: extend ifa_flags to u32

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [net] ipv6: addrconf: extend ifa_flags to u32 (Jiri Pirko) [1021871]
Rebuild_FUZZ: 98.70%
commit-author Jiri Pirko <jiri@resnulli.us>
commit 479840ffdbe4242e8a25349218c8e0859223aa35
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/479840ff.failed

There is no more space in u8 ifa_flags. So do what davem suffested and
add another netlink attr called IFA_FLAGS for carry more flags.

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: Thomas Haller <thaller@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 479840ffdbe4242e8a25349218c8e0859223aa35)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/addrconf.h
diff --cc include/net/addrconf.h
index c7b181cb47a6,e70278eef12a..000000000000
--- a/include/net/addrconf.h
+++ b/include/net/addrconf.h
@@@ -53,51 -53,40 +53,68 @@@ struct prefix_info 
  #define IN6_ADDR_HSIZE_SHIFT	4
  #define IN6_ADDR_HSIZE		(1 << IN6_ADDR_HSIZE_SHIFT)
  
 -int addrconf_init(void);
 -void addrconf_cleanup(void);
 +extern int			addrconf_init(void);
 +extern void			addrconf_cleanup(void);
  
 -int addrconf_add_ifaddr(struct net *net, void __user *arg);
 -int addrconf_del_ifaddr(struct net *net, void __user *arg);
 -int addrconf_set_dstaddr(struct net *net, void __user *arg);
 +extern int			addrconf_add_ifaddr(struct net *net,
 +						    void __user *arg);
 +extern int			addrconf_del_ifaddr(struct net *net,
 +						    void __user *arg);
 +extern int			addrconf_set_dstaddr(struct net *net,
 +						     void __user *arg);
  
 -int ipv6_chk_addr(struct net *net, const struct in6_addr *addr,
 -		  const struct net_device *dev, int strict);
 +extern int			ipv6_chk_addr(struct net *net,
 +					      const struct in6_addr *addr,
 +					      const struct net_device *dev,
 +					      int strict);
  
  #if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
 -int ipv6_chk_home_addr(struct net *net, const struct in6_addr *addr);
 +extern int			ipv6_chk_home_addr(struct net *net,
 +						   const struct in6_addr *addr);
  #endif
  
 -bool ipv6_chk_custom_prefix(const struct in6_addr *addr,
 -				   const unsigned int prefix_len,
 -				   struct net_device *dev);
 -
 -int ipv6_chk_prefix(const struct in6_addr *addr, struct net_device *dev);
 -
 +extern int			ipv6_chk_prefix(const struct in6_addr *addr,
 +						struct net_device *dev);
 +
 +extern struct inet6_ifaddr      *ipv6_get_ifaddr(struct net *net,
 +						 const struct in6_addr *addr,
 +						 struct net_device *dev,
 +						 int strict);
 +
++<<<<<<< HEAD
 +extern int			ipv6_dev_get_saddr(struct net *net,
 +					       const struct net_device *dev,
 +					       const struct in6_addr *daddr,
 +					       unsigned int srcprefs,
 +					       struct in6_addr *saddr);
 +extern int			__ipv6_get_lladdr(struct inet6_dev *idev,
 +						  struct in6_addr *addr,
 +						  unsigned char banned_flags);
 +extern int			ipv6_get_lladdr(struct net_device *dev,
 +						struct in6_addr *addr,
 +						unsigned char banned_flags);
 +extern int 			ipv6_rcv_saddr_equal(const struct sock *sk,
 +						    const struct sock *sk2);
 +extern void			addrconf_join_solict(struct net_device *dev,
 +					const struct in6_addr *addr);
 +extern void			addrconf_leave_solict(struct inet6_dev *idev,
 +					const struct in6_addr *addr);
++=======
+ struct inet6_ifaddr *ipv6_get_ifaddr(struct net *net,
+ 				     const struct in6_addr *addr,
+ 				     struct net_device *dev, int strict);
+ 
+ int ipv6_dev_get_saddr(struct net *net, const struct net_device *dev,
+ 		       const struct in6_addr *daddr, unsigned int srcprefs,
+ 		       struct in6_addr *saddr);
+ int __ipv6_get_lladdr(struct inet6_dev *idev, struct in6_addr *addr,
+ 		      u32 banned_flags);
+ int ipv6_get_lladdr(struct net_device *dev, struct in6_addr *addr,
+ 		    u32 banned_flags);
+ int ipv6_rcv_saddr_equal(const struct sock *sk, const struct sock *sk2);
+ void addrconf_join_solict(struct net_device *dev, const struct in6_addr *addr);
+ void addrconf_leave_solict(struct inet6_dev *idev, const struct in6_addr *addr);
++>>>>>>> 479840ffdbe4 (ipv6 addrconf: extend ifa_flags to u32)
  
  static inline unsigned long addrconf_timeout_fixup(u32 timeout,
  						   unsigned int unit)
* Unmerged path include/net/addrconf.h
diff --git a/include/net/if_inet6.h b/include/net/if_inet6.h
index 86cb1a21b762..d57b596eb004 100644
--- a/include/net/if_inet6.h
+++ b/include/net/if_inet6.h
@@ -50,8 +50,8 @@ struct inet6_ifaddr {
 
 	int			state;
 
+	__u32			flags;
 	__u8			dad_probes;
-	__u8			flags;
 
 	__u16			scope;
 
diff --git a/include/uapi/linux/if_addr.h b/include/uapi/linux/if_addr.h
index 23357ab81a77..8ab0c2cc9b73 100644
--- a/include/uapi/linux/if_addr.h
+++ b/include/uapi/linux/if_addr.h
@@ -18,6 +18,9 @@ struct ifaddrmsg {
  * It makes no difference for normally configured broadcast interfaces,
  * but for point-to-point IFA_ADDRESS is DESTINATION address,
  * local address is supplied in IFA_LOCAL attribute.
+ *
+ * IFA_FLAGS is a u32 attribute that extends the u8 field ifa_flags.
+ * If present, the value from struct ifaddrmsg will be ignored.
  */
 enum {
 	IFA_UNSPEC,
@@ -28,6 +31,7 @@ enum {
 	IFA_ANYCAST,
 	IFA_CACHEINFO,
 	IFA_MULTICAST,
+	IFA_FLAGS,
 	__IFA_MAX,
 };
 
diff --git a/net/ipv6/addrconf.c b/net/ipv6/addrconf.c
index fd3249676845..9cf44ea55994 100644
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@ -1434,7 +1434,7 @@ try_nextdev:
 EXPORT_SYMBOL(ipv6_dev_get_saddr);
 
 int __ipv6_get_lladdr(struct inet6_dev *idev, struct in6_addr *addr,
-		      unsigned char banned_flags)
+		      u32 banned_flags)
 {
 	struct inet6_ifaddr *ifp;
 	int err = -EADDRNOTAVAIL;
@@ -1451,7 +1451,7 @@ int __ipv6_get_lladdr(struct inet6_dev *idev, struct in6_addr *addr,
 }
 
 int ipv6_get_lladdr(struct net_device *dev, struct in6_addr *addr,
-		    unsigned char banned_flags)
+		    u32 banned_flags)
 {
 	struct inet6_dev *idev;
 	int err = -EADDRNOTAVAIL;
@@ -2183,7 +2183,7 @@ ok:
 		}
 
 		if (ifp) {
-			int flags;
+			u32 flags;
 			unsigned long now;
 			struct inet6_ifaddr *ift;
 			u32 stored_lft;
@@ -2390,10 +2390,11 @@ err_exit:
 /*
  *	Manual configuration of address on an interface
  */
-static int inet6_addr_add(struct net *net, int ifindex, const struct in6_addr *pfx,
+static int inet6_addr_add(struct net *net, int ifindex,
+			  const struct in6_addr *pfx,
 			  const struct in6_addr *peer_pfx,
-			  unsigned int plen, __u8 ifa_flags, __u32 prefered_lft,
-			  __u32 valid_lft)
+			  unsigned int plen, __u32 ifa_flags,
+			  __u32 prefered_lft, __u32 valid_lft)
 {
 	struct inet6_ifaddr *ifp;
 	struct inet6_dev *idev;
@@ -3429,7 +3430,7 @@ static void if6_seq_stop(struct seq_file *seq, void *v)
 static int if6_seq_show(struct seq_file *seq, void *v)
 {
 	struct inet6_ifaddr *ifp = (struct inet6_ifaddr *)v;
-	seq_printf(seq, "%pi6 %02x %02x %02x %02x %8s\n",
+	seq_printf(seq, "%pi6 %02x %02x %02x %03x %8s\n",
 		   &ifp->addr,
 		   ifp->idev->dev->ifindex,
 		   ifp->prefix_len,
@@ -3650,6 +3651,7 @@ static const struct nla_policy ifa_ipv6_policy[IFA_MAX+1] = {
 	[IFA_ADDRESS]		= { .len = sizeof(struct in6_addr) },
 	[IFA_LOCAL]		= { .len = sizeof(struct in6_addr) },
 	[IFA_CACHEINFO]		= { .len = sizeof(struct ifa_cacheinfo) },
+	[IFA_FLAGS]		= { .len = sizeof(u32) },
 };
 
 static int
@@ -3673,7 +3675,7 @@ inet6_rtm_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh)
 	return inet6_addr_del(net, ifm->ifa_index, pfx, ifm->ifa_prefixlen);
 }
 
-static int inet6_addr_modify(struct inet6_ifaddr *ifp, u8 ifa_flags,
+static int inet6_addr_modify(struct inet6_ifaddr *ifp, u32 ifa_flags,
 			     u32 prefered_lft, u32 valid_lft)
 {
 	u32 flags;
@@ -3728,7 +3730,7 @@ inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh)
 	struct inet6_ifaddr *ifa;
 	struct net_device *dev;
 	u32 valid_lft = INFINITY_LIFE_TIME, preferred_lft = INFINITY_LIFE_TIME;
-	u8 ifa_flags;
+	u32 ifa_flags;
 	int err;
 
 	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv6_policy);
@@ -3755,8 +3757,10 @@ inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh)
 	if (dev == NULL)
 		return -ENODEV;
 
+	ifa_flags = tb[IFA_FLAGS] ? nla_get_u32(tb[IFA_FLAGS]) : ifm->ifa_flags;
+
 	/* We ignore other flags so far. */
-	ifa_flags = ifm->ifa_flags & (IFA_F_NODAD | IFA_F_HOMEADDRESS);
+	ifa_flags &= IFA_F_NODAD | IFA_F_HOMEADDRESS;
 
 	ifa = ipv6_get_ifaddr(net, pfx, dev, 1);
 	if (ifa == NULL) {
@@ -3780,7 +3784,7 @@ inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh)
 	return err;
 }
 
-static void put_ifaddrmsg(struct nlmsghdr *nlh, u8 prefixlen, u8 flags,
+static void put_ifaddrmsg(struct nlmsghdr *nlh, u8 prefixlen, u32 flags,
 			  u8 scope, int ifindex)
 {
 	struct ifaddrmsg *ifm;
@@ -3823,7 +3827,8 @@ static inline int inet6_ifaddr_msgsize(void)
 	return NLMSG_ALIGN(sizeof(struct ifaddrmsg))
 	       + nla_total_size(16) /* IFA_LOCAL */
 	       + nla_total_size(16) /* IFA_ADDRESS */
-	       + nla_total_size(sizeof(struct ifa_cacheinfo));
+	       + nla_total_size(sizeof(struct ifa_cacheinfo))
+	       + nla_total_size(4)  /* IFA_FLAGS */;
 }
 
 static int inet6_fill_ifaddr(struct sk_buff *skb, struct inet6_ifaddr *ifa,
@@ -3871,6 +3876,9 @@ static int inet6_fill_ifaddr(struct sk_buff *skb, struct inet6_ifaddr *ifa,
 	if (put_cacheinfo(skb, ifa->cstamp, ifa->tstamp, preferred, valid) < 0)
 		goto error;
 
+	if (nla_put_u32(skb, IFA_FLAGS, ifa->flags) < 0)
+		goto error;
+
 	return nlmsg_end(skb, nlh);
 
 error:
