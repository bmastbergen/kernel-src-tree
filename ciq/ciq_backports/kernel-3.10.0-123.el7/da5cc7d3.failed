zram: use atomic64_xxx() to replace zram_stat64_xxx()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [zram] use atomic64_xxx() to replace zram_stat64_xxx() (Jerome Marchand) [1081936]
Rebuild_FUZZ: 94.00%
commit-author Jiang Liu <liuj97@gmail.com>
commit da5cc7d338f97886ebf35be92995460289379b73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/da5cc7d3.failed

Use atomic64_xxx() to replace open-coded zram_stat64_xxx().
Some architectures have native support of atomic64 operations,
so we can get rid of the spin_lock() in zram_stat64_xxx().
On the other hand, for platforms use generic version of atomic64
implement, it may cause an extra save/restore of the interrupt
flag.  So it's a tradeoff.

	Signed-off-by: Jiang Liu <jiang.liu@huawei.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit da5cc7d338f97886ebf35be92995460289379b73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/zram/zram_drv.c
#	drivers/staging/zram/zram_drv.h
diff --cc drivers/staging/zram/zram_drv.c
index b9456708408d,ec2b2b5a122e..000000000000
--- a/drivers/staging/zram/zram_drv.c
+++ b/drivers/staging/zram/zram_drv.c
@@@ -587,8 -572,10 +567,13 @@@ static void zram_slot_free_notify(struc
  	struct zram *zram;
  
  	zram = bdev->bd_disk->private_data;
 -	down_write(&zram->lock);
  	zram_free_page(zram, index);
++<<<<<<< HEAD
 +	zram_stat64_inc(zram, &zram->stats.notify_free);
++=======
+ 	up_write(&zram->lock);
+ 	atomic64_inc(&zram->stats.notify_free);
++>>>>>>> da5cc7d338f9 (zram: use atomic64_xxx() to replace zram_stat64_xxx())
  }
  
  static const struct block_device_operations zram_devops = {
diff --cc drivers/staging/zram/zram_drv.h
index a18b66df36a3,11b09fc25953..000000000000
--- a/drivers/staging/zram/zram_drv.h
+++ b/drivers/staging/zram/zram_drv.h
@@@ -92,9 -96,9 +96,15 @@@ struct zram_meta 
  
  struct zram {
  	struct zram_meta *meta;
++<<<<<<< HEAD
 +	spinlock_t stat64_lock;	/* protect 64-bit stats */
 +	struct rw_semaphore lock; /* protect compression buffers and table
 +				   * against concurrent read and writes */
++=======
+ 	struct rw_semaphore lock; /* protect compression buffers, table,
+ 				   * 32bit stat counters against concurrent
+ 				   * notifications, reads and writes */
++>>>>>>> da5cc7d338f9 (zram: use atomic64_xxx() to replace zram_stat64_xxx())
  	struct request_queue *queue;
  	struct gendisk *disk;
  	int init_done;
* Unmerged path drivers/staging/zram/zram_drv.c
* Unmerged path drivers/staging/zram/zram_drv.h
diff --git a/drivers/staging/zram/zram_sysfs.c b/drivers/staging/zram/zram_sysfs.c
index 8cb78221fd00..8ae579c8fd2b 100644
--- a/drivers/staging/zram/zram_sysfs.c
+++ b/drivers/staging/zram/zram_sysfs.c
@@ -19,17 +19,6 @@
 
 #include "zram_drv.h"
 
-static u64 zram_stat64_read(struct zram *zram, u64 *v)
-{
-	u64 val;
-
-	spin_lock(&zram->stat64_lock);
-	val = *v;
-	spin_unlock(&zram->stat64_lock);
-
-	return val;
-}
-
 static inline struct zram *dev_to_zram(struct device *dev)
 {
 	return (struct zram *)dev_to_disk(dev)->private_data;
@@ -116,7 +105,7 @@ static ssize_t num_reads_show(struct device *dev,
 	struct zram *zram = dev_to_zram(dev);
 
 	return sprintf(buf, "%llu\n",
-		zram_stat64_read(zram, &zram->stats.num_reads));
+			(u64)atomic64_read(&zram->stats.num_reads));
 }
 
 static ssize_t num_writes_show(struct device *dev,
@@ -125,7 +114,7 @@ static ssize_t num_writes_show(struct device *dev,
 	struct zram *zram = dev_to_zram(dev);
 
 	return sprintf(buf, "%llu\n",
-		zram_stat64_read(zram, &zram->stats.num_writes));
+			(u64)atomic64_read(&zram->stats.num_writes));
 }
 
 static ssize_t invalid_io_show(struct device *dev,
@@ -134,7 +123,7 @@ static ssize_t invalid_io_show(struct device *dev,
 	struct zram *zram = dev_to_zram(dev);
 
 	return sprintf(buf, "%llu\n",
-		zram_stat64_read(zram, &zram->stats.invalid_io));
+			(u64)atomic64_read(&zram->stats.invalid_io));
 }
 
 static ssize_t notify_free_show(struct device *dev,
@@ -143,7 +132,7 @@ static ssize_t notify_free_show(struct device *dev,
 	struct zram *zram = dev_to_zram(dev);
 
 	return sprintf(buf, "%llu\n",
-		zram_stat64_read(zram, &zram->stats.notify_free));
+			(u64)atomic64_read(&zram->stats.notify_free));
 }
 
 static ssize_t zero_pages_show(struct device *dev,
@@ -169,7 +158,7 @@ static ssize_t compr_data_size_show(struct device *dev,
 	struct zram *zram = dev_to_zram(dev);
 
 	return sprintf(buf, "%llu\n",
-		zram_stat64_read(zram, &zram->stats.compr_size));
+			(u64)atomic64_read(&zram->stats.compr_size));
 }
 
 static ssize_t mem_used_total_show(struct device *dev,
