sched/balancing: Periodically decay max cost of idle balance

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Jason Low <jason.low2@hp.com>
commit f48627e686a69f5215cb0761e731edb3d9859dd9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/f48627e6.failed

This patch builds on patch 2 and periodically decays that max value to
do idle balancing per sched domain by approximately 1% per second. Also
decay the rq's max_idle_balance_cost value.

	Signed-off-by: Jason Low <jason.low2@hp.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1379096813-3032-4-git-send-email-jason.low2@hp.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f48627e686a69f5215cb0761e731edb3d9859dd9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/metag/include/asm/topology.h
#	include/linux/sched.h
#	include/linux/topology.h
#	kernel/sched/fair.c
diff --cc arch/metag/include/asm/topology.h
index 23f5118f58db,8e9c0b3b9691..000000000000
--- a/arch/metag/include/asm/topology.h
+++ b/arch/metag/include/asm/topology.h
@@@ -26,6 -26,8 +26,11 @@@
  	.last_balance		= jiffies,		\
  	.balance_interval	= 1,			\
  	.nr_balance_failed	= 0,			\
++<<<<<<< HEAD
++=======
+ 	.max_newidle_lb_cost	= 0,			\
+ 	.next_decay_max_lb_cost	= jiffies,		\
++>>>>>>> f48627e686a6 (sched/balancing: Periodically decay max cost of idle balance)
  }
  
  #define cpu_to_node(cpu)	((void)(cpu), 0)
diff --cc include/linux/sched.h
index 933a94b9c8f9,b5344de1658b..000000000000
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@@ -828,6 -810,10 +828,13 @@@ struct sched_domain 
  	unsigned int nr_balance_failed; /* initialise to 0 */
  
  	u64 last_update;
++<<<<<<< HEAD
++=======
+ 
+ 	/* idle_balance() stats */
+ 	u64 max_newidle_lb_cost;
+ 	unsigned long next_decay_max_lb_cost;
++>>>>>>> f48627e686a6 (sched/balancing: Periodically decay max cost of idle balance)
  
  #ifdef CONFIG_SCHEDSTATS
  	/* load_balance() stats */
diff --cc include/linux/topology.h
index d3cf0d6e7712,12ae6ce997d6..000000000000
--- a/include/linux/topology.h
+++ b/include/linux/topology.h
@@@ -106,6 -106,8 +106,11 @@@ int arch_update_cpu_topology(void)
  	.last_balance		= jiffies,				\
  	.balance_interval	= 1,					\
  	.smt_gain		= 1178,	/* 15% */			\
++<<<<<<< HEAD
++=======
+ 	.max_newidle_lb_cost	= 0,					\
+ 	.next_decay_max_lb_cost	= jiffies,				\
++>>>>>>> f48627e686a6 (sched/balancing: Periodically decay max cost of idle balance)
  }
  #endif
  #endif /* CONFIG_SCHED_SMT */
@@@ -135,6 -137,8 +140,11 @@@
  				,					\
  	.last_balance		= jiffies,				\
  	.balance_interval	= 1,					\
++<<<<<<< HEAD
++=======
+ 	.max_newidle_lb_cost	= 0,					\
+ 	.next_decay_max_lb_cost	= jiffies,				\
++>>>>>>> f48627e686a6 (sched/balancing: Periodically decay max cost of idle balance)
  }
  #endif
  #endif /* CONFIG_SCHED_MC */
@@@ -166,6 -170,8 +176,11 @@@
  				,					\
  	.last_balance		= jiffies,				\
  	.balance_interval	= 1,					\
++<<<<<<< HEAD
++=======
+ 	.max_newidle_lb_cost	= 0,					\
+ 	.next_decay_max_lb_cost	= jiffies,				\
++>>>>>>> f48627e686a6 (sched/balancing: Periodically decay max cost of idle balance)
  }
  #endif
  
diff --cc kernel/sched/fair.c
index c33e42bc435b,2b89cd244b0d..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -5731,14 -5747,14 +5755,19 @@@ out
  			next_balance = sd->last_balance + interval;
  			update_next_balance = 1;
  		}
- 
+ 	}
+ 	if (need_decay) {
  		/*
- 		 * Stop the load balance at this level. There is another
- 		 * CPU in our sched group which is doing load balancing more
- 		 * actively.
+ 		 * Ensure the rq-wide value also decays but keep it at a
+ 		 * reasonable floor to avoid funnies with rq->avg_idle.
  		 */
++<<<<<<< HEAD
 +		if (!balance)
 +			break;
++=======
+ 		rq->max_idle_balance_cost =
+ 			max((u64)sysctl_sched_migration_cost, max_cost);
++>>>>>>> f48627e686a6 (sched/balancing: Periodically decay max cost of idle balance)
  	}
  	rcu_read_unlock();
  
* Unmerged path arch/metag/include/asm/topology.h
* Unmerged path include/linux/sched.h
* Unmerged path include/linux/topology.h
* Unmerged path kernel/sched/fair.c
