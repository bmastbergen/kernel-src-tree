ipv6: sit: add GSO/TSO support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 61c1db7fae21ed33c614356a43bf6580c5e53118
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/61c1db7f.failed

Now ipv6_gso_segment() is stackable, its relatively easy to
implement GSO/TSO support for SIT tunnels

Performance results, when segmentation is done after tunnel
device (as no NIC is yet enabled for TSO SIT support) :

Before patch :

lpq84:~# ./netperf -H 2002:af6:1153:: -Cc
MIGRATED TCP STREAM TEST from ::0 (::) port 0 AF_INET6 to 2002:af6:1153:: () port 0 AF_INET6
Recv   Send    Send                          Utilization       Service Demand
Socket Socket  Message  Elapsed              Send     Recv     Send    Recv
Size   Size    Size     Time     Throughput  local    remote   local   remote
bytes  bytes   bytes    secs.    10^6bits/s  % S      % S      us/KB   us/KB

 87380  16384  16384    10.00      3168.31   4.81     4.64     2.988   2.877

After patch :

lpq84:~# ./netperf -H 2002:af6:1153:: -Cc
MIGRATED TCP STREAM TEST from ::0 (::) port 0 AF_INET6 to 2002:af6:1153:: () port 0 AF_INET6
Recv   Send    Send                          Utilization       Service Demand
Socket Socket  Message  Elapsed              Send     Recv     Send    Recv
Size   Size    Size     Time     Throughput  local    remote   local   remote
bytes  bytes   bytes    secs.    10^6bits/s  % S      % S      us/KB   us/KB

 87380  16384  16384    10.00      5525.00   7.76     5.17     2.763   1.840

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 61c1db7fae21ed33c614356a43bf6580c5e53118)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdev_features.h
#	include/linux/skbuff.h
#	net/core/ethtool.c
#	net/ipv4/af_inet.c
#	net/ipv4/tcp_offload.c
#	net/ipv6/ip6_offload.c
#	net/ipv6/udp_offload.c
diff --cc include/linux/netdev_features.h
index a2a89a5c7be5,b05a4b501ab5..000000000000
--- a/include/linux/netdev_features.h
+++ b/include/linux/netdev_features.h
@@@ -42,6 -42,8 +42,11 @@@ enum 
  	NETIF_F_TSO6_BIT,		/* ... TCPv6 segmentation */
  	NETIF_F_FSO_BIT,		/* ... FCoE segmentation */
  	NETIF_F_GSO_GRE_BIT,		/* ... GRE with TSO */
++<<<<<<< HEAD
++=======
+ 	NETIF_F_GSO_IPIP_BIT,		/* ... IPIP tunnel with TSO */
+ 	NETIF_F_GSO_SIT_BIT,		/* ... SIT tunnel with TSO */
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  	NETIF_F_GSO_UDP_TUNNEL_BIT,	/* ... UDP TUNNEL with TSO */
  	NETIF_F_GSO_MPLS_BIT,		/* ... MPLS segmentation */
  	/**/NETIF_F_GSO_LAST =		/* last bit, see GSO_MASK */
@@@ -107,6 -109,8 +112,11 @@@
  #define NETIF_F_RXFCS		__NETIF_F(RXFCS)
  #define NETIF_F_RXALL		__NETIF_F(RXALL)
  #define NETIF_F_GSO_GRE		__NETIF_F(GSO_GRE)
++<<<<<<< HEAD
++=======
+ #define NETIF_F_GSO_IPIP	__NETIF_F(GSO_IPIP)
+ #define NETIF_F_GSO_SIT		__NETIF_F(GSO_SIT)
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  #define NETIF_F_GSO_UDP_TUNNEL	__NETIF_F(GSO_UDP_TUNNEL)
  #define NETIF_F_GSO_MPLS	__NETIF_F(GSO_MPLS)
  #define NETIF_F_HW_VLAN_STAG_FILTER __NETIF_F(HW_VLAN_STAG_FILTER)
diff --cc include/linux/skbuff.h
index 68e9d4dbcf3b,2c154976394b..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -318,9 -318,13 +318,17 @@@ enum 
  
  	SKB_GSO_GRE = 1 << 6,
  
 -	SKB_GSO_IPIP = 1 << 7,
 +	SKB_GSO_UDP_TUNNEL = 1 << 7,
  
++<<<<<<< HEAD
 +	SKB_GSO_MPLS = 1 << 8,
++=======
+ 	SKB_GSO_SIT = 1 << 8,
+ 
+ 	SKB_GSO_UDP_TUNNEL = 1 << 9,
+ 
+ 	SKB_GSO_MPLS = 1 << 10,
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  };
  
  #if BITS_PER_LONG > 32
diff --cc net/core/ethtool.c
index 65fb8fea6b05,862989898f61..000000000000
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@@ -81,6 -81,8 +81,11 @@@ static const char netdev_features_strin
  	[NETIF_F_TSO6_BIT] =             "tx-tcp6-segmentation",
  	[NETIF_F_FSO_BIT] =              "tx-fcoe-segmentation",
  	[NETIF_F_GSO_GRE_BIT] =		 "tx-gre-segmentation",
++<<<<<<< HEAD
++=======
+ 	[NETIF_F_GSO_IPIP_BIT] =	 "tx-ipip-segmentation",
+ 	[NETIF_F_GSO_SIT_BIT] =		 "tx-sit-segmentation",
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  	[NETIF_F_GSO_UDP_TUNNEL_BIT] =	 "tx-udp_tnl-segmentation",
  	[NETIF_F_GSO_MPLS_BIT] =	 "tx-mpls-segmentation",
  
diff --cc net/ipv4/af_inet.c
index 513d75835e6b,f4a159e705c0..000000000000
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@@ -1293,6 -1264,8 +1293,11 @@@ static struct sk_buff *inet_gso_segment
  		       SKB_GSO_DODGY |
  		       SKB_GSO_TCP_ECN |
  		       SKB_GSO_GRE |
++<<<<<<< HEAD
++=======
+ 		       SKB_GSO_IPIP |
+ 		       SKB_GSO_SIT |
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  		       SKB_GSO_TCPV6 |
  		       SKB_GSO_UDP_TUNNEL |
  		       SKB_GSO_MPLS |
diff --cc net/ipv4/tcp_offload.c
index 3a7525e6c086,a7a5583eab04..000000000000
--- a/net/ipv4/tcp_offload.c
+++ b/net/ipv4/tcp_offload.c
@@@ -56,6 -56,8 +56,11 @@@ struct sk_buff *tcp_tso_segment(struct 
  			       SKB_GSO_TCP_ECN |
  			       SKB_GSO_TCPV6 |
  			       SKB_GSO_GRE |
++<<<<<<< HEAD
++=======
+ 			       SKB_GSO_IPIP |
+ 			       SKB_GSO_SIT |
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  			       SKB_GSO_MPLS |
  			       SKB_GSO_UDP_TUNNEL |
  			       0) ||
diff --cc net/ipv6/ip6_offload.c
index e6bea2066918,4b851692b1f6..000000000000
--- a/net/ipv6/ip6_offload.c
+++ b/net/ipv6/ip6_offload.c
@@@ -99,6 -97,8 +99,11 @@@ static struct sk_buff *ipv6_gso_segment
  		       SKB_GSO_DODGY |
  		       SKB_GSO_TCP_ECN |
  		       SKB_GSO_GRE |
++<<<<<<< HEAD
++=======
+ 		       SKB_GSO_IPIP |
+ 		       SKB_GSO_SIT |
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  		       SKB_GSO_UDP_TUNNEL |
  		       SKB_GSO_MPLS |
  		       SKB_GSO_TCPV6 |
diff --cc net/ipv6/udp_offload.c
index c5b2d71cecdf,08e23b0bf302..000000000000
--- a/net/ipv6/udp_offload.c
+++ b/net/ipv6/udp_offload.c
@@@ -118,6 -64,8 +118,11 @@@ static struct sk_buff *udp6_ufo_fragmen
  				      SKB_GSO_DODGY |
  				      SKB_GSO_UDP_TUNNEL |
  				      SKB_GSO_GRE |
++<<<<<<< HEAD
++=======
+ 				      SKB_GSO_IPIP |
+ 				      SKB_GSO_SIT |
++>>>>>>> 61c1db7fae21 (ipv6: sit: add GSO/TSO support)
  				      SKB_GSO_MPLS) ||
  			     !(type & (SKB_GSO_UDP))))
  			goto out;
* Unmerged path include/linux/netdev_features.h
* Unmerged path include/linux/skbuff.h
* Unmerged path net/core/ethtool.c
* Unmerged path net/ipv4/af_inet.c
* Unmerged path net/ipv4/tcp_offload.c
* Unmerged path net/ipv6/ip6_offload.c
diff --git a/net/ipv6/sit.c b/net/ipv6/sit.c
index fbfc5a83867f..a38fc34e85cd 100644
--- a/net/ipv6/sit.c
+++ b/net/ipv6/sit.c
@@ -888,10 +888,9 @@ static netdev_tx_t ipip6_tunnel_xmit(struct sk_buff *skb,
 		ttl = iph6->hop_limit;
 	tos = INET_ECN_encapsulate(tos, ipv6_get_dsfield(iph6));
 
-	if (likely(!skb->encapsulation)) {
-		skb_reset_inner_headers(skb);
-		skb->encapsulation = 1;
-	}
+	skb = iptunnel_handle_offloads(skb, false, SKB_GSO_SIT);
+	if (IS_ERR(skb))
+		goto out;
 
 	err = iptunnel_xmit(dev_net(dev), rt, skb, fl4.saddr, fl4.daddr,
 			    IPPROTO_IPV6, tos, ttl, df);
@@ -901,8 +900,9 @@ static netdev_tx_t ipip6_tunnel_xmit(struct sk_buff *skb,
 tx_error_icmp:
 	dst_link_failure(skb);
 tx_error:
-	dev->stats.tx_errors++;
 	dev_kfree_skb(skb);
+out:
+	dev->stats.tx_errors++;
 	return NETDEV_TX_OK;
 }
 
@@ -911,13 +911,15 @@ static netdev_tx_t ipip_tunnel_xmit(struct sk_buff *skb, struct net_device *dev)
 	struct ip_tunnel *tunnel = netdev_priv(dev);
 	const struct iphdr  *tiph = &tunnel->parms.iph;
 
-	if (likely(!skb->encapsulation)) {
-		skb_reset_inner_headers(skb);
-		skb->encapsulation = 1;
-	}
+	skb = iptunnel_handle_offloads(skb, false, SKB_GSO_IPIP);
+	if (IS_ERR(skb))
+		goto out;
 
 	ip_tunnel_xmit(skb, dev, tiph, IPPROTO_IPIP);
 	return NETDEV_TX_OK;
+out:
+	dev->stats.tx_errors++;
+	return NETDEV_TX_OK;
 }
 
 static netdev_tx_t sit_tunnel_xmit(struct sk_buff *skb,
@@ -1247,6 +1249,12 @@ static void ipip6_dev_free(struct net_device *dev)
 	free_netdev(dev);
 }
 
+#define SIT_FEATURES (NETIF_F_SG	   | \
+		      NETIF_F_FRAGLIST	   | \
+		      NETIF_F_HIGHDMA	   | \
+		      NETIF_F_GSO_SOFTWARE | \
+		      NETIF_F_HW_CSUM)
+
 static void ipip6_tunnel_setup(struct net_device *dev)
 {
 	dev->netdev_ops		= &ipip6_netdev_ops;
@@ -1260,6 +1268,8 @@ static void ipip6_tunnel_setup(struct net_device *dev)
 	dev->iflink		= 0;
 	dev->addr_len		= 4;
 	dev->features		|= NETIF_F_LLTX;
+	dev->features		|= SIT_FEATURES;
+	dev->hw_features	|= SIT_FEATURES;
 }
 
 static int ipip6_tunnel_init(struct net_device *dev)
* Unmerged path net/ipv6/udp_offload.c
