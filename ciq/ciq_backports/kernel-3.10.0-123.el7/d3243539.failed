net/vlan: Provide read access to the vlan egress map

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [net] vlan: Provide read access to the vlan egress map (Doug Ledford) [1051187]
Rebuild_FUZZ: 96.00%
commit-author Eyal Perry <eyalpe@mellanox.com>
commit d32435391974e39c35ade4d115f17c538a96a708
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/d3243539.failed

Provide a method for read-only access to the vlan device egress mapping.

Do this by refactoring vlan_dev_get_egress_qos_mask() such that now it
receives as an argument the skb priority instead of pointer to the skb.

Such an access is needed for the IBoE stack where the control plane
goes through the network stack. This is an add-on step on top of commit
d4a968658c "net/route: export symbol ip_tos2prio" which allowed the RDMA-CM
to use ip_tos2prio.

	Signed-off-by: Eyal Perry <eyalpe@mellanox.com>
	Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d32435391974e39c35ade4d115f17c538a96a708)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/8021q/vlan_dev.c
diff --cc net/8021q/vlan_dev.c
index c96ab209e979,13904a414929..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -73,9 -73,11 +73,15 @@@ __vlan_dev_get_egress_qos_mask(struct n
  {
  	struct vlan_priority_tci_mapping *mp;
  
++<<<<<<< HEAD
 +	mp = vlan_dev_priv(dev)->egress_priority_map[(skb->priority & 0xF)];
++=======
+ 	smp_rmb(); /* coupled with smp_wmb() in vlan_dev_set_egress_priority() */
+ 
+ 	mp = vlan_dev_priv(dev)->egress_priority_map[(skprio & 0xF)];
++>>>>>>> d32435391974 (net/vlan: Provide read access to the vlan egress map)
  	while (mp) {
- 		if (mp->priority == skb->priority) {
+ 		if (mp->priority == skprio) {
  			return mp->vlan_qos; /* This should already be shifted
  					      * to mask correctly with the
  					      * VLAN's TCI */
@@@ -249,6 -257,11 +261,14 @@@ int vlan_dev_set_egress_priority(const 
  	np->next = mp;
  	np->priority = skb_prio;
  	np->vlan_qos = vlan_qos;
++<<<<<<< HEAD
++=======
+ 	/* Before inserting this element in hash table, make sure all its fields
+ 	 * are committed to memory.
+ 	 * coupled with smp_rmb() in __vlan_dev_get_egress_qos_mask()
+ 	 */
+ 	smp_wmb();
++>>>>>>> d32435391974 (net/vlan: Provide read access to the vlan egress map)
  	vlan->egress_priority_map[skb_prio & 0xF] = np;
  	if (vlan_qos)
  		vlan->nr_egress_mappings++;
diff --git a/include/linux/if_vlan.h b/include/linux/if_vlan.h
index 637fa71de0c7..5f1972e45f18 100644
--- a/include/linux/if_vlan.h
+++ b/include/linux/if_vlan.h
@@ -89,7 +89,8 @@ extern struct net_device *__vlan_find_dev_deep(struct net_device *real_dev,
 					       __be16 vlan_proto, u16 vlan_id);
 extern struct net_device *vlan_dev_real_dev(const struct net_device *dev);
 extern u16 vlan_dev_vlan_id(const struct net_device *dev);
-
+extern u16 vlan_dev_get_egress_qos_mask(struct net_device *dev,
+					u32 skprio);
 extern bool vlan_do_receive(struct sk_buff **skb);
 extern struct sk_buff *vlan_untag(struct sk_buff *skb);
 
@@ -122,6 +123,12 @@ static inline u16 vlan_dev_vlan_id(const struct net_device *dev)
 	return 0;
 }
 
+static inline u16 vlan_dev_get_egress_qos_mask(struct net_device *dev,
+					       u32 skprio)
+{
+	return 0;
+}
+
 static inline bool vlan_do_receive(struct sk_buff **skb)
 {
 	return false;
* Unmerged path net/8021q/vlan_dev.c
