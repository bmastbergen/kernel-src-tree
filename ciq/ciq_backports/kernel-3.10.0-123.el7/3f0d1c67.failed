usb: misc: usb3503: Support operation with no I2C control

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [usb] misc/usb3503: Support operation with no I2C control (Don Zickus) [895641]
Rebuild_FUZZ: 92.59%
commit-author Mark Brown <broonie@linaro.org>
commit 3f0d1c67fa20d524fdcb4a7dcda19ed76c59be44
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/3f0d1c67.failed

Refactor so that register writes for configuration are only performed if
the device has a regmap provided and also register as a platform driver.
This allows the driver to be used to manage GPIO based control of the
device.

	Signed-off-by: Mark Brown <broonie@linaro.org>
	Cc: devicetree@vger.kernel.org
	Reviewed-by: Dongjin Kim <tobetter@gmail.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 3f0d1c67fa20d524fdcb4a7dcda19ed76c59be44)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/devicetree/bindings/usb/usb3503.txt
#	drivers/usb/misc/usb3503.c
diff --cc Documentation/devicetree/bindings/usb/usb3503.txt
index cd60f7e4eb57,a018da4a7ad7..000000000000
--- a/Documentation/devicetree/bindings/usb/usb3503.txt
+++ b/Documentation/devicetree/bindings/usb/usb3503.txt
@@@ -2,7 -2,10 +2,14 @@@ SMSC USB3503 High-Speed Hub Controlle
  
  Required properties:
  - compatible: Should be "smsc,usb3503" or "smsc,usb3503a".
++<<<<<<< HEAD
 +- reg: Specifies the i2c slave address, it should be 0x08.
++=======
+ 
+ Optional properties:
+ - reg: Specifies the i2c slave address, it is required and should be 0x08
+        if I2C is used.
++>>>>>>> 3f0d1c67fa20 (usb: misc: usb3503: Support operation with no I2C control)
  - connect-gpios: Should specify GPIO for connect.
  - disabled-ports: Should specify the ports unused.
  	'1' or '2' or '3' are availe for this property to describe the port
diff --cc drivers/usb/misc/usb3503.c
index d8890eee25f4,a31641e18d19..000000000000
--- a/drivers/usb/misc/usb3503.c
+++ b/drivers/usb/misc/usb3503.c
@@@ -213,13 -209,16 +224,16 @@@ static int usb3503_probe(struct i2c_cli
  		hub->mode = mode;
  	}
  
+ 	if (hub->port_off_mask && !hub->regmap)
+ 		dev_err(dev, "Ports disabled with no control interface\n");
+ 
  	if (gpio_is_valid(hub->gpio_intn)) {
 -		err = devm_gpio_request_one(dev, hub->gpio_intn,
 +		err = devm_gpio_request_one(&i2c->dev, hub->gpio_intn,
  				GPIOF_OUT_INIT_HIGH, "usb3503 intn");
  		if (err) {
 -			dev_err(dev,
 -				"unable to request GPIO %d as connect pin (%d)\n",
 -				hub->gpio_intn, err);
 +			dev_err(&i2c->dev,
 +					"unable to request GPIO %d as connect pin (%d)\n",
 +					hub->gpio_intn, err);
  			return err;
  		}
  	}
@@@ -254,6 -253,44 +268,47 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int usb3503_i2c_probe(struct i2c_client *i2c,
+ 			     const struct i2c_device_id *id)
+ {
+ 	struct usb3503 *hub;
+ 	int err;
+ 
+ 	hub = devm_kzalloc(&i2c->dev, sizeof(struct usb3503), GFP_KERNEL);
+ 	if (!hub) {
+ 		dev_err(&i2c->dev, "private data alloc fail\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	i2c_set_clientdata(i2c, hub);
+ 	hub->regmap = devm_regmap_init_i2c(i2c, &usb3503_regmap_config);
+ 	if (IS_ERR(hub->regmap)) {
+ 		err = PTR_ERR(hub->regmap);
+ 		dev_err(&i2c->dev, "Failed to initialise regmap: %d\n", err);
+ 		return err;
+ 	}
+ 	hub->dev = &i2c->dev;
+ 
+ 	return usb3503_probe(hub);
+ }
+ 
+ static int usb3503_platform_probe(struct platform_device *pdev)
+ {
+ 	struct usb3503 *hub;
+ 
+ 	hub = devm_kzalloc(&pdev->dev, sizeof(struct usb3503), GFP_KERNEL);
+ 	if (!hub) {
+ 		dev_err(&pdev->dev, "private data alloc fail\n");
+ 		return -ENOMEM;
+ 	}
+ 	hub->dev = &pdev->dev;
+ 
+ 	return usb3503_probe(hub);
+ }
+ 
++>>>>>>> 3f0d1c67fa20 (usb: misc: usb3503: Support operation with no I2C control)
  static const struct i2c_device_id usb3503_id[] = {
  	{ USB3503_I2C_NAME, 0 },
  	{ }
* Unmerged path Documentation/devicetree/bindings/usb/usb3503.txt
* Unmerged path drivers/usb/misc/usb3503.c
