drm/radeon: expose render backend mask to the userspace

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] radeon: expose render backend mask to the userspace (Rob Clark) [1054409]
Rebuild_FUZZ: 96.23%
commit-author Marek Ol코치k <marek.olsak@amd.com>
commit 439a1cfffe2c1a06e5a6394ccd5d18a8e89b15d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/439a1cff.failed

This will allow userspace to correctly program the PA_SC_RASTER_CONFIG
register, so it can be considered a fix.

	Signed-off-by: Marek Ol코치k <marek.olsak@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
	Cc: stable@vger.kernel.org
(cherry picked from commit 439a1cfffe2c1a06e5a6394ccd5d18a8e89b15d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/radeon/cik.c
#	drivers/gpu/drm/radeon/radeon.h
#	include/uapi/drm/radeon_drm.h
diff --cc drivers/gpu/drm/radeon/radeon.h
index 142ce6cc69f5,45e1f447bc79..000000000000
--- a/drivers/gpu/drm/radeon/radeon.h
+++ b/drivers/gpu/drm/radeon/radeon.h
@@@ -1491,7 -1940,37 +1491,39 @@@ struct si_asic 
  	unsigned sc_earlyz_tile_fifo_size;
  
  	unsigned num_tile_pipes;
- 	unsigned num_backends_per_se;
+ 	unsigned backend_enable_mask;
+ 	unsigned backend_disable_mask_per_asic;
+ 	unsigned backend_map;
+ 	unsigned num_texture_channel_caches;
+ 	unsigned mem_max_burst_length_bytes;
+ 	unsigned mem_row_size_in_kb;
+ 	unsigned shader_engine_tile_size;
+ 	unsigned num_gpus;
+ 	unsigned multi_gpu_tile_size;
+ 
+ 	unsigned tile_config;
+ 	uint32_t tile_mode_array[32];
+ };
+ 
++<<<<<<< HEAD
++=======
+ struct cik_asic {
+ 	unsigned max_shader_engines;
+ 	unsigned max_tile_pipes;
+ 	unsigned max_cu_per_sh;
+ 	unsigned max_sh_per_se;
+ 	unsigned max_backends_per_se;
+ 	unsigned max_texture_channel_caches;
+ 	unsigned max_gprs;
+ 	unsigned max_gs_threads;
+ 	unsigned max_hw_contexts;
+ 	unsigned sc_prim_fifo_size_frontend;
+ 	unsigned sc_prim_fifo_size_backend;
+ 	unsigned sc_hiz_tile_fifo_size;
+ 	unsigned sc_earlyz_tile_fifo_size;
+ 
+ 	unsigned num_tile_pipes;
+ 	unsigned backend_enable_mask;
  	unsigned backend_disable_mask_per_asic;
  	unsigned backend_map;
  	unsigned num_texture_channel_caches;
@@@ -1503,8 -1982,9 +1535,10 @@@
  
  	unsigned tile_config;
  	uint32_t tile_mode_array[32];
+ 	uint32_t macrotile_mode_array[16];
  };
  
++>>>>>>> 439a1cfffe2c (drm/radeon: expose render backend mask to the userspace)
  union radeon_asic_config {
  	struct r300_asic	r300;
  	struct r100_asic	r100;
diff --cc include/uapi/drm/radeon_drm.h
index 321d4ac5c512,fe421e8a431b..000000000000
--- a/include/uapi/drm/radeon_drm.h
+++ b/include/uapi/drm/radeon_drm.h
@@@ -979,6 -979,12 +979,15 @@@ struct drm_radeon_cs 
  #define RADEON_INFO_RING_WORKING	0x15
  /* SI tile mode array */
  #define RADEON_INFO_SI_TILE_MODE_ARRAY	0x16
++<<<<<<< HEAD
++=======
+ /* query if CP DMA is supported on the compute ring */
+ #define RADEON_INFO_SI_CP_DMA_COMPUTE	0x17
+ /* CIK macrotile mode array */
+ #define RADEON_INFO_CIK_MACROTILE_MODE_ARRAY	0x18
+ /* query the number of render backends */
+ #define RADEON_INFO_SI_BACKEND_ENABLED_MASK	0x19
++>>>>>>> 439a1cfffe2c (drm/radeon: expose render backend mask to the userspace)
  
  
  struct drm_radeon_info {
* Unmerged path drivers/gpu/drm/radeon/cik.c
* Unmerged path drivers/gpu/drm/radeon/cik.c
* Unmerged path drivers/gpu/drm/radeon/radeon.h
diff --git a/drivers/gpu/drm/radeon/radeon_kms.c b/drivers/gpu/drm/radeon/radeon_kms.c
index 4f2d4f4c1dab..d5be27f7dd63 100644
--- a/drivers/gpu/drm/radeon/radeon_kms.c
+++ b/drivers/gpu/drm/radeon/radeon_kms.c
@@ -414,6 +414,15 @@ int radeon_info_ioctl(struct drm_device *dev, void *data, struct drm_file *filp)
 		value = rdev->config.si.tile_mode_array;
 		value_size = sizeof(uint32_t)*32;
 		break;
+	case RADEON_INFO_SI_BACKEND_ENABLED_MASK:
+		if (rdev->family >= CHIP_BONAIRE) {
+			*value = rdev->config.cik.backend_enable_mask;
+		} else if (rdev->family >= CHIP_TAHITI) {
+			*value = rdev->config.si.backend_enable_mask;
+		} else {
+			DRM_DEBUG_KMS("BACKEND_ENABLED_MASK is si+ only!\n");
+		}
+		break;
 	default:
 		DRM_DEBUG_KMS("Invalid request %d\n", info->request);
 		return -EINVAL;
diff --git a/drivers/gpu/drm/radeon/si.c b/drivers/gpu/drm/radeon/si.c
index 44cfdd2a3cda..063f8dd147cf 100644
--- a/drivers/gpu/drm/radeon/si.c
+++ b/drivers/gpu/drm/radeon/si.c
@@ -2545,6 +2545,8 @@ static void si_setup_rb(struct radeon_device *rdev,
 		mask <<= 1;
 	}
 
+	rdev->config.si.backend_enable_mask = enabled_rbs;
+
 	for (i = 0; i < se_num; i++) {
 		si_select_se_sh(rdev, i, 0xffffffff);
 		data = 0;
* Unmerged path include/uapi/drm/radeon_drm.h
