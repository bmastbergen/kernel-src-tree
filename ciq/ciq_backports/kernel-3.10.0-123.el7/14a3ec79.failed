nfs: merge nfs_direct_read into nfs_file_direct_read

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Christoph Hellwig <hch@infradead.org>
commit 14a3ec79437252d922bae574ecbf0c0584c330f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/14a3ec79.failed

Simple code cleanup to prepare for later fixes.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 14a3ec79437252d922bae574ecbf0c0584c330f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/direct.c
diff --cc fs/nfs/direct.c
index 3487d63c8859,f8b0a81c340e..000000000000
--- a/fs/nfs/direct.c
+++ b/fs/nfs/direct.c
@@@ -891,61 -933,6 +935,64 @@@ out
  }
  
  /**
++<<<<<<< HEAD
 + * nfs_file_direct_read - file direct read operation for NFS files
 + * @iocb: target I/O control block
 + * @iov: vector of user buffers into which to read data
 + * @nr_segs: size of iov vector
 + * @pos: byte offset in file where reading starts
 + *
 + * We use this function for direct reads instead of calling
 + * generic_file_aio_read() in order to avoid gfar's check to see if
 + * the request starts before the end of the file.  For that check
 + * to work, we must generate a GETATTR before each direct read, and
 + * even then there is a window between the GETATTR and the subsequent
 + * READ where the file size could change.  Our preference is simply
 + * to do all reads the application wants, and the server will take
 + * care of managing the end of file boundary.
 + *
 + * This function also eliminates unnecessarily updating the file's
 + * atime locally, as the NFS server sets the file's atime, and this
 + * client must read the updated atime from the server back into its
 + * cache.
 + */
 +ssize_t nfs_file_direct_read(struct kiocb *iocb, const struct iovec *iov,
 +				unsigned long nr_segs, loff_t pos, bool uio)
 +{
 +	ssize_t retval = -EINVAL;
 +	struct file *file = iocb->ki_filp;
 +	struct address_space *mapping = file->f_mapping;
 +	size_t count;
 +
 +	count = iov_length(iov, nr_segs);
 +	nfs_add_stats(mapping->host, NFSIOS_DIRECTREADBYTES, count);
 +
 +	dfprintk(FILE, "NFS: direct read(%s/%s, %zd@%Ld)\n",
 +		file->f_path.dentry->d_parent->d_name.name,
 +		file->f_path.dentry->d_name.name,
 +		count, (long long) pos);
 +
 +	retval = 0;
 +	if (!count)
 +		goto out;
 +
 +	retval = nfs_sync_mapping(mapping);
 +	if (retval)
 +		goto out;
 +
 +	task_io_account_read(count);
 +
 +	retval = nfs_direct_read(iocb, iov, nr_segs, pos, uio);
 +	if (retval > 0)
 +		iocb->ki_pos = pos + retval;
 +
 +out:
 +	return retval;
 +}
 +
 +/**
++=======
++>>>>>>> 14a3ec794372 (nfs: merge nfs_direct_read into nfs_file_direct_read)
   * nfs_file_direct_write - file direct write operation for NFS files
   * @iocb: target I/O control block
   * @iov: vector of user buffers from which to write data
* Unmerged path fs/nfs/direct.c
