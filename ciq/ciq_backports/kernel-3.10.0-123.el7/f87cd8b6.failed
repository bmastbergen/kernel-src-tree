drm/nouveau/devinit: lock/unlock crtc regs for all devices, not just pre-nv50

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [drm] nouveau/devinit: lock/unlock crtc regs for all devices, not just pre-nv50 (Ben Skeggs) [928744]
Rebuild_FUZZ: 97.33%
commit-author Ilia Mirkin <imirkin@alum.mit.edu>
commit f87cd8b695d372087685976460fac1ec6ba2fca9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/f87cd8b6.failed

Also make nv_lockvgac work for nv50+ devices. This should fix
IO_CONDITION and related VBIOS opcodes that read/write the crtc regs.

See https://bugs.freedesktop.org/show_bug.cgi?id=60680

	Signed-off-by: Ilia Mirkin <imirkin@alum.mit.edu>
	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit f87cd8b695d372087685976460fac1ec6ba2fca9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/core/subdev/devinit/base.c
#	drivers/gpu/drm/nouveau/core/subdev/devinit/nv04.c
#	drivers/gpu/drm/nouveau/core/subdev/devinit/priv.h
diff --cc drivers/gpu/drm/nouveau/core/subdev/devinit/base.c
index 5a07a39c1735,8fa34e8152c2..000000000000
--- a/drivers/gpu/drm/nouveau/core/subdev/devinit/base.c
+++ b/drivers/gpu/drm/nouveau/core/subdev/devinit/base.c
@@@ -24,23 -24,17 +24,24 @@@
  
  #include <core/option.h>
  
 +#include <subdev/devinit.h>
  #include <subdev/bios.h>
  #include <subdev/bios/init.h>
+ #include <subdev/vga.h>
  
 -#include "priv.h"
 -
  int
 -_nouveau_devinit_fini(struct nouveau_object *object, bool suspend)
 +nouveau_devinit_init(struct nouveau_devinit *devinit)
  {
 -	struct nouveau_devinit *devinit = (void *)object;
 +	int ret = nouveau_subdev_init(&devinit->base);
 +	if (ret)
 +		return ret;
  
 +	return nvbios_init(&devinit->base, devinit->post);
 +}
 +
 +int
 +nouveau_devinit_fini(struct nouveau_devinit *devinit, bool suspend)
 +{
  	/* force full reinit on resume */
  	if (suspend)
  		devinit->post = true;
@@@ -49,6 -46,37 +53,40 @@@
  }
  
  int
++<<<<<<< HEAD
++=======
+ _nouveau_devinit_init(struct nouveau_object *object)
+ {
+ 	struct nouveau_devinit_impl *impl = (void *)object->oclass;
+ 	struct nouveau_devinit *devinit = (void *)object;
+ 	int ret;
+ 
+ 	ret = nouveau_subdev_init(&devinit->base);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = nvbios_init(&devinit->base, devinit->post);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (impl->disable)
+ 		nv_device(devinit)->disable_mask |= impl->disable(devinit);
+ 	return 0;
+ }
+ 
+ void
+ _nouveau_devinit_dtor(struct nouveau_object *object)
+ {
+ 	struct nouveau_devinit *devinit = (void *)object;
+ 
+ 	/* lock crtc regs */
+ 	nv_lockvgac(devinit, true);
+ 
+ 	nouveau_subdev_destroy(&devinit->base);
+ }
+ 
+ int
++>>>>>>> f87cd8b695d3 (drm/nouveau/devinit: lock/unlock crtc regs for all devices, not just pre-nv50)
  nouveau_devinit_create_(struct nouveau_object *parent,
  			struct nouveau_object *engine,
  			struct nouveau_oclass *oclass,
diff --cc drivers/gpu/drm/nouveau/core/subdev/devinit/nv04.c
index 7a72d9394340,7037eae46e44..000000000000
--- a/drivers/gpu/drm/nouveau/core/subdev/devinit/nv04.c
+++ b/drivers/gpu/drm/nouveau/core/subdev/devinit/nv04.c
@@@ -128,16 -384,25 +128,30 @@@ nv04_devinit_ctor(struct nouveau_objec
  	return 0;
  }
  
 -int
 -nv04_devinit_fini(struct nouveau_object *object, bool suspend)
 +void
 +nv04_devinit_dtor(struct nouveau_object *object)
  {
  	struct nv04_devinit_priv *priv = (void *)object;
+ 	int ret;
  
 -	/* make i2c busses accessible */
 -	nv_mask(priv, 0x000200, 0x00000001, 0x00000001);
 +	/* restore vga owner saved at first init, and lock crtc regs  */
 +	nv_wrvgaowner(priv, priv->owner);
 +	nv_lockvgac(priv, true);
  
++<<<<<<< HEAD
 +	nouveau_devinit_destroy(&priv->base);
++=======
+ 	ret = nouveau_devinit_fini(&priv->base, suspend);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* unslave crtcs */
+ 	if (priv->owner < 0)
+ 		priv->owner = nv_rdvgaowner(priv);
+ 	nv_wrvgaowner(priv, 0);
+ 
+ 	return 0;
++>>>>>>> f87cd8b695d3 (drm/nouveau/devinit: lock/unlock crtc regs for all devices, not just pre-nv50)
  }
  
  int
@@@ -165,22 -430,33 +179,27 @@@ nv04_devinit_fini(struct nouveau_objec
  {
  	struct nv04_devinit_priv *priv = (void *)object;
  
++<<<<<<< HEAD
 +	/* make i2c busses accessible */
 +	nv_mask(priv, 0x000200, 0x00000001, 0x00000001);
++=======
+ 	/* restore vga owner saved at first init */
+ 	nv_wrvgaowner(priv, priv->owner);
++>>>>>>> f87cd8b695d3 (drm/nouveau/devinit: lock/unlock crtc regs for all devices, not just pre-nv50)
  
 -	nouveau_devinit_destroy(&priv->base);
 -}
 -
 -int
 -nv04_devinit_ctor(struct nouveau_object *parent, struct nouveau_object *engine,
 -		  struct nouveau_oclass *oclass, void *data, u32 size,
 -		  struct nouveau_object **pobject)
 -{
 -	struct nv04_devinit_priv *priv;
 -	int ret;
 -
 -	ret = nouveau_devinit_create(parent, engine, oclass, &priv);
 -	*pobject = nv_object(priv);
 -	if (ret)
 -		return ret;
 +	/* unlock extended vga crtc regs, and unslave crtcs */
 +	nv_lockvgac(priv, false);
 +	if (priv->owner < 0)
 +		priv->owner = nv_rdvgaowner(priv);
 +	nv_wrvgaowner(priv, 0);
  
 -	priv->owner = -1;
 -	return 0;
 +	return nouveau_devinit_fini(&priv->base, suspend);
  }
  
 -struct nouveau_oclass *
 -nv04_devinit_oclass = &(struct nouveau_devinit_impl) {
 -	.base.handle = NV_SUBDEV(DEVINIT, 0x04),
 -	.base.ofuncs = &(struct nouveau_ofuncs) {
 +struct nouveau_oclass
 +nv04_devinit_oclass = {
 +	.handle = NV_SUBDEV(DEVINIT, 0x04),
 +	.ofuncs = &(struct nouveau_ofuncs) {
  		.ctor = nv04_devinit_ctor,
  		.dtor = nv04_devinit_dtor,
  		.init = nv04_devinit_init,
* Unmerged path drivers/gpu/drm/nouveau/core/subdev/devinit/priv.h
diff --git a/drivers/gpu/drm/nouveau/core/engine/disp/vga.c b/drivers/gpu/drm/nouveau/core/engine/disp/vga.c
index 5a1c68474597..8836c3cb99c3 100644
--- a/drivers/gpu/drm/nouveau/core/engine/disp/vga.c
+++ b/drivers/gpu/drm/nouveau/core/engine/disp/vga.c
@@ -138,10 +138,15 @@ nv_wrvgai(void *obj, int head, u16 port, u8 index, u8 value)
 bool
 nv_lockvgac(void *obj, bool lock)
 {
+	struct nouveau_device *dev = nv_device(obj);
+
 	bool locked = !nv_rdvgac(obj, 0, 0x1f);
 	u8 data = lock ? 0x99 : 0x57;
-	nv_wrvgac(obj, 0, 0x1f, data);
-	if (nv_device(obj)->chipset == 0x11) {
+	if (dev->card_type < NV_50)
+		nv_wrvgac(obj, 0, 0x1f, data);
+	else
+		nv_wrvgac(obj, 0, 0x3f, data);
+	if (dev->chipset == 0x11) {
 		if (!(nv_rd32(obj, 0x001084) & 0x10000000))
 			nv_wrvgac(obj, 1, 0x1f, data);
 	}
* Unmerged path drivers/gpu/drm/nouveau/core/subdev/devinit/base.c
* Unmerged path drivers/gpu/drm/nouveau/core/subdev/devinit/nv04.c
* Unmerged path drivers/gpu/drm/nouveau/core/subdev/devinit/priv.h
