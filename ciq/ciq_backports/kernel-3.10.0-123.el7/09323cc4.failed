net: Add function to set the rxhash

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [net] Add function to set the rxhash (Ivan Vecera) [1049512]
Rebuild_FUZZ: 92.31%
commit-author Tom Herbert <therbert@google.com>
commit 09323cc479316e046931a2c679932204b36fea6c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/09323cc4.failed

The function skb_set_rxash was added for drivers to call to set
the rxhash in an skb. The type of hash is also specified as
a parameter (L2, L3, L4, or unknown type).

	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 09323cc479316e046931a2c679932204b36fea6c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/skbuff.h
diff --cc include/linux/skbuff.h
index 1783a7488172,99846956dff9..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -702,22 -693,61 +702,67 @@@ struct skb_seq_state 
  	__u8		*frag_data;
  };
  
 -void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,
 -			  unsigned int to, struct skb_seq_state *st);
 -unsigned int skb_seq_read(unsigned int consumed, const u8 **data,
 -			  struct skb_seq_state *st);
 -void skb_abort_seq_read(struct skb_seq_state *st);
 -
 -unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
 -			   unsigned int to, struct ts_config *config,
 -			   struct ts_state *state);
 -
 +extern void	      skb_prepare_seq_read(struct sk_buff *skb,
 +					   unsigned int from, unsigned int to,
 +					   struct skb_seq_state *st);
 +extern unsigned int   skb_seq_read(unsigned int consumed, const u8 **data,
 +				   struct skb_seq_state *st);
 +extern void	      skb_abort_seq_read(struct skb_seq_state *st);
 +
 +extern unsigned int   skb_find_text(struct sk_buff *skb, unsigned int from,
 +				    unsigned int to, struct ts_config *config,
 +				    struct ts_state *state);
 +
++<<<<<<< HEAD
 +extern void __skb_get_rxhash(struct sk_buff *skb);
 +static inline __u32 skb_get_rxhash(struct sk_buff *skb)
++=======
+ /*
+  * Packet hash types specify the type of hash in skb_set_hash.
+  *
+  * Hash types refer to the protocol layer addresses which are used to
+  * construct a packet's hash. The hashes are used to differentiate or identify
+  * flows of the protocol layer for the hash type. Hash types are either
+  * layer-2 (L2), layer-3 (L3), or layer-4 (L4).
+  *
+  * Properties of hashes:
+  *
+  * 1) Two packets in different flows have different hash values
+  * 2) Two packets in the same flow should have the same hash value
+  *
+  * A hash at a higher layer is considered to be more specific. A driver should
+  * set the most specific hash possible.
+  *
+  * A driver cannot indicate a more specific hash than the layer at which a hash
+  * was computed. For instance an L3 hash cannot be set as an L4 hash.
+  *
+  * A driver may indicate a hash level which is less specific than the
+  * actual layer the hash was computed on. For instance, a hash computed
+  * at L4 may be considered an L3 hash. This should only be done if the
+  * driver can't unambiguously determine that the HW computed the hash at
+  * the higher layer. Note that the "should" in the second property above
+  * permits this.
+  */
+ enum pkt_hash_types {
+ 	PKT_HASH_TYPE_NONE,	/* Undefined type */
+ 	PKT_HASH_TYPE_L2,	/* Input: src_MAC, dest_MAC */
+ 	PKT_HASH_TYPE_L3,	/* Input: src_IP, dst_IP */
+ 	PKT_HASH_TYPE_L4,	/* Input: src_IP, dst_IP, src_port, dst_port */
+ };
+ 
+ static inline void
+ skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
+ {
+ 	skb->l4_rxhash = (type == PKT_HASH_TYPE_L4);
+ 	skb->rxhash = hash;
+ }
+ 
+ void __skb_get_hash(struct sk_buff *skb);
+ static inline __u32 skb_get_hash(struct sk_buff *skb)
++>>>>>>> 09323cc47931 (net: Add function to set the rxhash)
  {
  	if (!skb->l4_rxhash)
 -		__skb_get_hash(skb);
 +		__skb_get_rxhash(skb);
  
  	return skb->rxhash;
  }
* Unmerged path include/linux/skbuff.h
