powerpc/eeh: Export functions for hotplug

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [powerpc] eeh: Export functions for hotplug (Steve Best) [1033086]
Rebuild_FUZZ: 89.19%
commit-author Gavin Shan <shangw@linux.vnet.ibm.com>
commit f2856491d24044de08da9e53cf7068841a8b4e1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/f2856491.failed

Make some functions public in order to support hotplug on either specific
PCI bus or PCI device in future.

	Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit f2856491d24044de08da9e53cf7068841a8b4e1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/eeh.h
diff --cc arch/powerpc/include/asm/eeh.h
index c3624ae6fca2,d9d35c27de25..000000000000
--- a/arch/powerpc/include/asm/eeh.h
+++ b/arch/powerpc/include/asm/eeh.h
@@@ -217,10 -208,13 +217,17 @@@ int __exit eeh_ops_unregister(const cha
  unsigned long eeh_check_failure(const volatile void __iomem *token,
  				unsigned long val);
  int eeh_dev_check_failure(struct eeh_dev *edev);
++<<<<<<< HEAD
 +void __init eeh_addr_cache_build(void);
++=======
+ void eeh_addr_cache_build(void);
+ void eeh_add_device_early(struct device_node *);
++>>>>>>> f2856491d240 (powerpc/eeh: Export functions for hotplug)
  void eeh_add_device_tree_early(struct device_node *);
+ void eeh_add_device_late(struct pci_dev *);
  void eeh_add_device_tree_late(struct pci_bus *);
  void eeh_add_sysfs_files(struct pci_bus *);
+ void eeh_remove_device(struct pci_dev *, int);
  void eeh_remove_bus_device(struct pci_dev *, int);
  
  /**
@@@ -262,11 -265,10 +273,13 @@@ static inline void eeh_add_device_tree_
  
  static inline void eeh_add_sysfs_files(struct pci_bus *bus) { }
  
+ static inline void eeh_remove_device(struct pci_dev *dev, int purge_pe) { }
+ 
  static inline void eeh_remove_bus_device(struct pci_dev *dev, int purge_pe) { }
  
 +static inline void eeh_lock(void) { }
 +static inline void eeh_unlock(void) { }
 +
  #define EEH_POSSIBLE_ERROR(val, type) (0)
  #define EEH_IO_ERROR_VALUE(size) (-1UL)
  #endif /* CONFIG_EEH */
* Unmerged path arch/powerpc/include/asm/eeh.h
diff --git a/arch/powerpc/kernel/eeh.c b/arch/powerpc/kernel/eeh.c
index b3d9c723af64..76c0cb8c1eea 100644
--- a/arch/powerpc/kernel/eeh.c
+++ b/arch/powerpc/kernel/eeh.c
@@ -816,7 +816,7 @@ core_initcall_sync(eeh_init);
  * on the CEC architecture, type of the device, on earlier boot
  * command-line arguments & etc.
  */
-static void eeh_add_device_early(struct device_node *dn)
+void eeh_add_device_early(struct device_node *dn)
 {
 	struct pci_controller *phb;
 
@@ -864,7 +864,7 @@ EXPORT_SYMBOL_GPL(eeh_add_device_tree_early);
  * This routine must be used to complete EEH initialization for PCI
  * devices that were added after system boot (e.g. hotplug, dlpar).
  */
-static void eeh_add_device_late(struct pci_dev *dev)
+void eeh_add_device_late(struct pci_dev *dev)
 {
 	struct device_node *dn;
 	struct eeh_dev *edev;
@@ -952,7 +952,7 @@ EXPORT_SYMBOL_GPL(eeh_add_sysfs_files);
  * this device will no longer be detected after this call; thus,
  * i/o errors affecting this slot may leave this device unusable.
  */
-static void eeh_remove_device(struct pci_dev *dev, int purge_pe)
+void eeh_remove_device(struct pci_dev *dev, int purge_pe)
 {
 	struct eeh_dev *edev;
 
