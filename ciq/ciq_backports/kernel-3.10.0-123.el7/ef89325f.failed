perf tools: Remove references to struct ip_event

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
Rebuild_CHGLOG: - [tools] perf: Remove references to struct ip_event (Jiri Olsa) [1036665]
Rebuild_FUZZ: 93.33%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit ef89325f773bc9f2f4e6019bd7f3d968ba85df9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/ef89325f.failed

The ip_event struct assumes fixed positions for ip, pid and tid.  That
is no longer true with the addition of PERF_SAMPLE_IDENTIFIER.  The
information is anyway in struct sample, so use that instead.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1377591794-30553-5-git-send-email-adrian.hunter@intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ef89325f773bc9f2f4e6019bd7f3d968ba85df9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-inject.c
#	tools/perf/builtin-kmem.c
#	tools/perf/builtin-script.c
#	tools/perf/util/build-id.c
#	tools/perf/util/event.c
diff --cc tools/perf/builtin-inject.c
index 1d8de2e4a407,ffacd464f9f6..000000000000
--- a/tools/perf/builtin-inject.c
+++ b/tools/perf/builtin-inject.c
@@@ -198,7 -198,7 +198,11 @@@ static int perf_event__inject_buildid(s
  
  	cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
  
++<<<<<<< HEAD
 +	thread = machine__findnew_thread(machine, event->ip.pid);
++=======
+ 	thread = machine__findnew_thread(machine, sample->pid, sample->pid);
++>>>>>>> ef89325f773b (perf tools: Remove references to struct ip_event)
  	if (thread == NULL) {
  		pr_err("problem processing %d event, skipping it.\n",
  		       event->header.type);
diff --cc tools/perf/builtin-kmem.c
index b49f5c58e152,c2dff9cb1f2c..000000000000
--- a/tools/perf/builtin-kmem.c
+++ b/tools/perf/builtin-kmem.c
@@@ -305,7 -305,8 +305,12 @@@ static int process_sample_event(struct 
  				struct perf_evsel *evsel,
  				struct machine *machine)
  {
++<<<<<<< HEAD
 +	struct thread *thread = machine__findnew_thread(machine, event->ip.pid);
++=======
+ 	struct thread *thread = machine__findnew_thread(machine, sample->pid,
+ 							sample->pid);
++>>>>>>> ef89325f773b (perf tools: Remove references to struct ip_event)
  
  	if (thread == NULL) {
  		pr_debug("problem processing %d event, skipping it.\n",
diff --cc tools/perf/builtin-script.c
index 2ad9d5b6fb3c,93a34cef9676..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -501,7 -501,8 +501,12 @@@ static int process_sample_event(struct 
  				struct machine *machine)
  {
  	struct addr_location al;
++<<<<<<< HEAD
 +	struct thread *thread = machine__findnew_thread(machine, event->ip.tid);
++=======
+ 	struct thread *thread = machine__findnew_thread(machine, sample->pid,
+ 							sample->tid);
++>>>>>>> ef89325f773b (perf tools: Remove references to struct ip_event)
  
  	if (thread == NULL) {
  		pr_debug("problem processing %d event, skipping it.\n",
diff --cc tools/perf/util/build-id.c
index 5295625c0c00,fb584092eb88..000000000000
--- a/tools/perf/util/build-id.c
+++ b/tools/perf/util/build-id.c
@@@ -24,7 -24,8 +24,12 @@@ int build_id__mark_dso_hit(struct perf_
  {
  	struct addr_location al;
  	u8 cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
++<<<<<<< HEAD
 +	struct thread *thread = machine__findnew_thread(machine, event->ip.pid);
++=======
+ 	struct thread *thread = machine__findnew_thread(machine, sample->pid,
+ 							sample->pid);
++>>>>>>> ef89325f773b (perf tools: Remove references to struct ip_event)
  
  	if (thread == NULL) {
  		pr_err("problem processing %d event, skipping it.\n",
diff --cc tools/perf/util/event.c
index 49713ae46551,8d51f21107aa..000000000000
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@@ -686,7 -686,8 +686,12 @@@ int perf_event__preprocess_sample(cons
  				  struct perf_sample *sample)
  {
  	u8 cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
++<<<<<<< HEAD
 +	struct thread *thread = machine__findnew_thread(machine, event->ip.pid);
++=======
+ 	struct thread *thread = machine__findnew_thread(machine, sample->pid,
+ 							sample->pid);
++>>>>>>> ef89325f773b (perf tools: Remove references to struct ip_event)
  
  	if (thread == NULL)
  		return -1;
* Unmerged path tools/perf/builtin-inject.c
* Unmerged path tools/perf/builtin-kmem.c
diff --git a/tools/perf/builtin-mem.c b/tools/perf/builtin-mem.c
index 706a1faa9559..791b432df847 100644
--- a/tools/perf/builtin-mem.c
+++ b/tools/perf/builtin-mem.c
@@ -94,7 +94,7 @@ dump_raw_samples(struct perf_tool *tool,
 		symbol_conf.field_sep,
 		sample->tid,
 		symbol_conf.field_sep,
-		event->ip.ip,
+		sample->ip,
 		symbol_conf.field_sep,
 		sample->addr,
 		symbol_conf.field_sep,
* Unmerged path tools/perf/builtin-script.c
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index e37521fc715a..212214162bb2 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -689,7 +689,7 @@ static void perf_event__process_sample(struct perf_tool *tool,
 {
 	struct perf_top *top = container_of(tool, struct perf_top, tool);
 	struct symbol *parent = NULL;
-	u64 ip = event->ip.ip;
+	u64 ip = sample->ip;
 	struct addr_location al;
 	int err;
 
@@ -699,10 +699,10 @@ static void perf_event__process_sample(struct perf_tool *tool,
 		if (!seen)
 			seen = intlist__new(NULL);
 
-		if (!intlist__has_entry(seen, event->ip.pid)) {
+		if (!intlist__has_entry(seen, sample->pid)) {
 			pr_err("Can't find guest [%d]'s kernel information\n",
-				event->ip.pid);
-			intlist__add(seen, event->ip.pid);
+				sample->pid);
+			intlist__add(seen, sample->pid);
 		}
 		return;
 	}
@@ -836,7 +836,8 @@ static void perf_top__mmap_read_idx(struct perf_top *top, int idx)
 			break;
 		case PERF_RECORD_MISC_GUEST_KERNEL:
 			++top->guest_kernel_samples;
-			machine = perf_session__find_machine(session, event->ip.pid);
+			machine = perf_session__find_machine(session,
+							     sample.pid);
 			break;
 		case PERF_RECORD_MISC_GUEST_USER:
 			++top->guest_us_samples;
diff --git a/tools/perf/tests/hists_link.c b/tools/perf/tests/hists_link.c
index 50bfb01183ea..8c7bd2fd290a 100644
--- a/tools/perf/tests/hists_link.c
+++ b/tools/perf/tests/hists_link.c
@@ -210,15 +210,13 @@ static int add_hist_entries(struct perf_evlist *evlist, struct machine *machine)
 	list_for_each_entry(evsel, &evlist->entries, node) {
 		for (k = 0; k < ARRAY_SIZE(fake_common_samples); k++) {
 			const union perf_event event = {
-				.ip = {
-					.header = {
-						.misc = PERF_RECORD_MISC_USER,
-					},
-					.pid = fake_common_samples[k].pid,
-					.ip  = fake_common_samples[k].ip,
+				.header = {
+					.misc = PERF_RECORD_MISC_USER,
 				},
 			};
 
+			sample.pid = fake_common_samples[k].pid;
+			sample.ip = fake_common_samples[k].ip;
 			if (perf_event__preprocess_sample(&event, machine, &al,
 							  &sample) < 0)
 				goto out;
@@ -234,15 +232,13 @@ static int add_hist_entries(struct perf_evlist *evlist, struct machine *machine)
 
 		for (k = 0; k < ARRAY_SIZE(fake_samples[i]); k++) {
 			const union perf_event event = {
-				.ip = {
-					.header = {
-						.misc = PERF_RECORD_MISC_USER,
-					},
-					.pid = fake_samples[i][k].pid,
-					.ip  = fake_samples[i][k].ip,
+				.header = {
+					.misc = PERF_RECORD_MISC_USER,
 				},
 			};
 
+			sample.pid = fake_samples[i][k].pid;
+			sample.ip = fake_samples[i][k].ip;
 			if (perf_event__preprocess_sample(&event, machine, &al,
 							  &sample) < 0)
 				goto out;
* Unmerged path tools/perf/util/build-id.c
* Unmerged path tools/perf/util/event.c
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index 15db071d96b5..19d911c011cd 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -8,16 +8,6 @@
 #include "map.h"
 #include "build-id.h"
 
-/*
- * PERF_SAMPLE_IP | PERF_SAMPLE_TID | *
- */
-struct ip_event {
-	struct perf_event_header header;
-	u64 ip;
-	u32 pid, tid;
-	unsigned char __more_data[];
-};
-
 struct mmap_event {
 	struct perf_event_header header;
 	u32 pid, tid;
@@ -166,7 +156,6 @@ struct tracing_data_event {
 
 union perf_event {
 	struct perf_event_header	header;
-	struct ip_event			ip;
 	struct mmap_event		mmap;
 	struct comm_event		comm;
 	struct fork_event		fork;
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index 9a5fb23ff8e2..7e328c47f3b6 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -1185,7 +1185,7 @@ int perf_evsel__parse_sample(struct perf_evsel *evsel, union perf_event *event,
 		return -EFAULT;
 
 	if (type & PERF_SAMPLE_IP) {
-		data->ip = event->ip.ip;
+		data->ip = *array;
 		array++;
 	}
 
@@ -1397,7 +1397,7 @@ int perf_event__synthesize_sample(union perf_event *event, u64 type,
 	array = event->sample.array;
 
 	if (type & PERF_SAMPLE_IP) {
-		event->ip.ip = sample->ip;
+		*array = sample->ip;
 		array++;
 	}
 
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index 0d05bf0dac87..e271647c8da9 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -840,7 +840,8 @@ static void dump_sample(struct perf_evsel *evsel, union perf_event *event,
 
 static struct machine *
 	perf_session__find_machine_for_cpumode(struct perf_session *session,
-					       union perf_event *event)
+					       union perf_event *event,
+					       struct perf_sample *sample)
 {
 	const u8 cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
 
@@ -852,7 +853,7 @@ static struct machine *
 		if (event->header.type == PERF_RECORD_MMAP)
 			pid = event->mmap.pid;
 		else
-			pid = event->ip.pid;
+			pid = sample->pid;
 
 		return perf_session__findnew_machine(session, pid);
 	}
@@ -958,7 +959,8 @@ static int perf_session_deliver_event(struct perf_session *session,
 		hists__inc_nr_events(&evsel->hists, event->header.type);
 	}
 
-	machine = perf_session__find_machine_for_cpumode(session, event);
+	machine = perf_session__find_machine_for_cpumode(session, event,
+							 sample);
 
 	switch (event->header.type) {
 	case PERF_RECORD_SAMPLE:
