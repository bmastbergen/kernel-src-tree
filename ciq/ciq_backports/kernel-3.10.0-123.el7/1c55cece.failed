xfs: Add write support for dirent filetype field

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 1c55cece084aa4c9a3fa34ed4eecbdf18afbf05d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/1c55cece.failed

Add support to propagate and add filetype values into the on-disk
directs. This involves passing the filetype into the xfs_da_args
structure along with the name and namelength for direct operations,
and encoding it into the dirent at the same time we write the inode
number into the dirent.

With write support, add the feature flag to the
XFS_SB_FEAT_INCOMPAT_ALL mask so we can now mount filesystems with
this feature set.

Performance of directory recursion is now much improved. Parallel
walk of ~50 million directory entries across hundreds of directories
improves significantly. Unpatched, no CRCs:

Walking via ls -R

real    3m19.886s
user    6m36.960s
sys     28m19.087s

THis is doing roughly 500 getdents() calls per second, and 250,000
inode lookups per second to determine the inode type at roughly
17,000 read IOPS. CPU usage is 90% kernel space.

With dtype support patched in and the fileset recreated with CRCs
enabled:

Walking via ls -R

real    0m31.316s
user    6m32.975s
sys     0m21.111s

This is doing roughly 3500 getdents() calls per second at 16,000
IOPS. There are no inode lookups at all. CPU usages is almost 100%
userspace.

This is a big win for recursive directory walks that only need to
find file names and file types.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Mark Tinguely <tinguely@sgi.com>
	Signed-off-by: Ben Myers <bpm@sgi.com>

(cherry picked from commit 1c55cece084aa4c9a3fa34ed4eecbdf18afbf05d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_dir2_block.c
#	fs/xfs/xfs_dir2_leaf.c
#	fs/xfs/xfs_dir2_node.c
#	fs/xfs/xfs_dir2_sf.c
#	fs/xfs/xfs_sb.h
diff --cc fs/xfs/xfs_dir2_block.c
index 53b9aa26d567,0957aa98b6c0..000000000000
--- a/fs/xfs/xfs_dir2_block.c
+++ b/fs/xfs/xfs_dir2_block.c
@@@ -549,7 -549,8 +549,12 @@@ xfs_dir2_block_addname
  	dep->inumber = cpu_to_be64(args->inumber);
  	dep->namelen = args->namelen;
  	memcpy(dep->name, args->name, args->namelen);
++<<<<<<< HEAD
 +	tagp = xfs_dir2_data_entry_tag_p(dep);
++=======
+ 	xfs_dir3_dirent_put_ftype(mp, dep, args->filetype);
+ 	tagp = xfs_dir3_data_entry_tag_p(mp, dep);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	*tagp = cpu_to_be16((char *)dep - (char *)hdr);
  	/*
  	 * Clean up the bestfree array and log the header, tail, and entry.
@@@ -1257,7 -1162,8 +1264,12 @@@ xfs_dir2_sf_to_block
  	dep->inumber = cpu_to_be64(dp->i_ino);
  	dep->namelen = 1;
  	dep->name[0] = '.';
++<<<<<<< HEAD
 +	tagp = xfs_dir2_data_entry_tag_p(dep);
++=======
+ 	xfs_dir3_dirent_put_ftype(mp, dep, XFS_DIR3_FT_DIR);
+ 	tagp = xfs_dir3_data_entry_tag_p(mp, dep);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	*tagp = cpu_to_be16((char *)dep - (char *)hdr);
  	xfs_dir2_data_log_entry(tp, bp, dep);
  	blp[0].hashval = cpu_to_be32(xfs_dir_hash_dot);
@@@ -1270,7 -1176,8 +1282,12 @@@
  	dep->inumber = cpu_to_be64(xfs_dir2_sf_get_parent_ino(sfp));
  	dep->namelen = 2;
  	dep->name[0] = dep->name[1] = '.';
++<<<<<<< HEAD
 +	tagp = xfs_dir2_data_entry_tag_p(dep);
++=======
+ 	xfs_dir3_dirent_put_ftype(mp, dep, XFS_DIR3_FT_DIR);
+ 	tagp = xfs_dir3_data_entry_tag_p(mp, dep);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	*tagp = cpu_to_be16((char *)dep - (char *)hdr);
  	xfs_dir2_data_log_entry(tp, bp, dep);
  	blp[1].hashval = cpu_to_be32(xfs_dir_hash_dotdot);
@@@ -1315,10 -1222,12 +1332,12 @@@
  		 * Copy a real entry.
  		 */
  		dep = (xfs_dir2_data_entry_t *)((char *)hdr + newoffset);
 -		dep->inumber = cpu_to_be64(xfs_dir3_sfe_get_ino(mp, sfp, sfep));
 +		dep->inumber = cpu_to_be64(xfs_dir2_sfe_get_ino(sfp, sfep));
  		dep->namelen = sfep->namelen;
+ 		xfs_dir3_dirent_put_ftype(mp, dep,
+ 					xfs_dir3_sfe_get_ftype(mp, sfp, sfep));
  		memcpy(dep->name, sfep->name, dep->namelen);
 -		tagp = xfs_dir3_data_entry_tag_p(mp, dep);
 +		tagp = xfs_dir2_data_entry_tag_p(dep);
  		*tagp = cpu_to_be16((char *)dep - (char *)hdr);
  		xfs_dir2_data_log_entry(tp, bp, dep);
  		name.name = sfep->name;
diff --cc fs/xfs/xfs_dir2_leaf.c
index 07af4c348ad1,08984eeee159..000000000000
--- a/fs/xfs/xfs_dir2_leaf.c
+++ b/fs/xfs/xfs_dir2_leaf.c
@@@ -896,7 -897,8 +896,12 @@@ xfs_dir2_leaf_addname
  	dep->inumber = cpu_to_be64(args->inumber);
  	dep->namelen = args->namelen;
  	memcpy(dep->name, args->name, dep->namelen);
++<<<<<<< HEAD
 +	tagp = xfs_dir2_data_entry_tag_p(dep);
++=======
+ 	xfs_dir3_dirent_put_ftype(mp, dep, args->filetype);
+ 	tagp = xfs_dir3_data_entry_tag_p(mp, dep);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	*tagp = cpu_to_be16((char *)dep - (char *)hdr);
  	/*
  	 * Need to scan fix up the bestfree table.
diff --cc fs/xfs/xfs_dir2_node.c
index 9f2ea96d5138,4c3dba7ffb74..000000000000
--- a/fs/xfs/xfs_dir2_node.c
+++ b/fs/xfs/xfs_dir2_node.c
@@@ -2006,7 -2008,8 +2007,12 @@@ xfs_dir2_node_addname_int
  	dep->inumber = cpu_to_be64(args->inumber);
  	dep->namelen = args->namelen;
  	memcpy(dep->name, args->name, dep->namelen);
++<<<<<<< HEAD
 +	tagp = xfs_dir2_data_entry_tag_p(dep);
++=======
+ 	xfs_dir3_dirent_put_ftype(mp, dep, args->filetype);
+ 	tagp = xfs_dir3_data_entry_tag_p(mp, dep);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	*tagp = cpu_to_be16((char *)dep - (char *)hdr);
  	xfs_dir2_data_log_entry(tp, dbp, dep);
  	/*
diff --cc fs/xfs/xfs_dir2_sf.c
index 6157424dbf8f,bb6e2848f473..000000000000
--- a/fs/xfs/xfs_dir2_sf.c
+++ b/fs/xfs/xfs_dir2_sf.c
@@@ -316,12 -331,14 +316,14 @@@ xfs_dir2_block_to_sf
  				(xfs_dir2_data_aoff_t)
  				((char *)dep - (char *)hdr));
  			memcpy(sfep->name, dep->name, dep->namelen);
 -			xfs_dir3_sfe_put_ino(mp, sfp, sfep,
 +			xfs_dir2_sfe_put_ino(sfp, sfep,
  					     be64_to_cpu(dep->inumber));
+ 			xfs_dir3_sfe_put_ftype(mp, sfp, sfep,
+ 					xfs_dir3_dirent_get_ftype(mp, dep));
  
 -			sfep = xfs_dir3_sf_nextentry(mp, sfp, sfep);
 +			sfep = xfs_dir2_sf_nextentry(sfp, sfep);
  		}
 -		ptr += xfs_dir3_data_entsize(mp, dep->namelen);
 +		ptr += xfs_dir2_data_entsize(dep->namelen);
  	}
  	ASSERT((char *)sfep - (char *)sfp == size);
  	xfs_dir2_sf_check(args);
@@@ -479,7 -497,9 +481,13 @@@ xfs_dir2_sf_addname_easy
  	sfep->namelen = args->namelen;
  	xfs_dir2_sf_put_offset(sfep, offset);
  	memcpy(sfep->name, args->name, sfep->namelen);
++<<<<<<< HEAD
 +	xfs_dir2_sfe_put_ino(sfp, sfep, args->inumber);
++=======
+ 	xfs_dir3_sfe_put_ino(dp->i_mount, sfp, sfep, args->inumber);
+ 	xfs_dir3_sfe_put_ftype(dp->i_mount, sfp, sfep, args->filetype);
+ 
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	/*
  	 * Update the header and inode.
  	 */
@@@ -570,7 -592,8 +578,12 @@@ xfs_dir2_sf_addname_hard
  	sfep->namelen = args->namelen;
  	xfs_dir2_sf_put_offset(sfep, offset);
  	memcpy(sfep->name, args->name, sfep->namelen);
++<<<<<<< HEAD
 +	xfs_dir2_sfe_put_ino(sfp, sfep, args->inumber);
++=======
+ 	xfs_dir3_sfe_put_ino(mp, sfp, sfep, args->inumber);
+ 	xfs_dir3_sfe_put_ftype(mp, sfp, sfep, args->filetype);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	sfp->count++;
  #if XFS_BIG_INUMS
  	if (args->inumber > XFS_DIR2_MAX_SHORT_INUM && !objchange)
@@@ -929,7 -858,10 +944,14 @@@ xfs_dir2_sf_lookup
  								sfep->namelen);
  		if (cmp != XFS_CMP_DIFFERENT && cmp != args->cmpresult) {
  			args->cmpresult = cmp;
++<<<<<<< HEAD
 +			args->inumber = xfs_dir2_sfe_get_ino(sfp, sfep);
++=======
+ 			args->inumber = xfs_dir3_sfe_get_ino(dp->i_mount,
+ 							     sfp, sfep);
+ 			args->filetype = xfs_dir3_sfe_get_ftype(dp->i_mount,
+ 								sfp, sfep);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  			if (cmp == XFS_CMP_EXACT)
  				return XFS_ERROR(EEXIST);
  			ci_sfep = sfep;
@@@ -1124,10 -1055,14 +1146,17 @@@ xfs_dir2_sf_replace
  			if (xfs_da_compname(args, sfep->name, sfep->namelen) ==
  								XFS_CMP_EXACT) {
  #if XFS_BIG_INUMS || defined(DEBUG)
 -				ino = xfs_dir3_sfe_get_ino(dp->i_mount,
 -							   sfp, sfep);
 +				ino = xfs_dir2_sfe_get_ino(sfp, sfep);
  				ASSERT(args->inumber != ino);
  #endif
++<<<<<<< HEAD
 +				xfs_dir2_sfe_put_ino(sfp, sfep, args->inumber);
++=======
+ 				xfs_dir3_sfe_put_ino(dp->i_mount, sfp, sfep,
+ 						     args->inumber);
+ 				xfs_dir3_sfe_put_ftype(dp->i_mount, sfp, sfep,
+ 						       args->filetype);
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  				break;
  			}
  		}
@@@ -1235,13 -1172,15 +1266,25 @@@ xfs_dir2_sf_toino4
  	for (i = 0, sfep = xfs_dir2_sf_firstentry(sfp),
  		    oldsfep = xfs_dir2_sf_firstentry(oldsfp);
  	     i < sfp->count;
++<<<<<<< HEAD
 +	     i++, sfep = xfs_dir2_sf_nextentry(sfp, sfep),
 +		  oldsfep = xfs_dir2_sf_nextentry(oldsfp, oldsfep)) {
 +		sfep->namelen = oldsfep->namelen;
 +		sfep->offset = oldsfep->offset;
 +		memcpy(sfep->name, oldsfep->name, sfep->namelen);
 +		xfs_dir2_sfe_put_ino(sfp, sfep,
 +			xfs_dir2_sfe_get_ino(oldsfp, oldsfep));
++=======
+ 	     i++, sfep = xfs_dir3_sf_nextentry(mp, sfp, sfep),
+ 		  oldsfep = xfs_dir3_sf_nextentry(mp, oldsfp, oldsfep)) {
+ 		sfep->namelen = oldsfep->namelen;
+ 		sfep->offset = oldsfep->offset;
+ 		memcpy(sfep->name, oldsfep->name, sfep->namelen);
+ 		xfs_dir3_sfe_put_ino(mp, sfp, sfep,
+ 			xfs_dir3_sfe_get_ino(mp, oldsfp, oldsfep));
+ 		xfs_dir3_sfe_put_ftype(mp, sfp, sfep,
+ 			xfs_dir3_sfe_get_ftype(mp, oldsfp, oldsfep));
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	}
  	/*
  	 * Clean up the inode.
@@@ -1310,13 -1251,15 +1355,25 @@@ xfs_dir2_sf_toino8
  	for (i = 0, sfep = xfs_dir2_sf_firstentry(sfp),
  		    oldsfep = xfs_dir2_sf_firstentry(oldsfp);
  	     i < sfp->count;
++<<<<<<< HEAD
 +	     i++, sfep = xfs_dir2_sf_nextentry(sfp, sfep),
 +		  oldsfep = xfs_dir2_sf_nextentry(oldsfp, oldsfep)) {
 +		sfep->namelen = oldsfep->namelen;
 +		sfep->offset = oldsfep->offset;
 +		memcpy(sfep->name, oldsfep->name, sfep->namelen);
 +		xfs_dir2_sfe_put_ino(sfp, sfep,
 +			xfs_dir2_sfe_get_ino(oldsfp, oldsfep));
++=======
+ 	     i++, sfep = xfs_dir3_sf_nextentry(mp, sfp, sfep),
+ 		  oldsfep = xfs_dir3_sf_nextentry(mp, oldsfp, oldsfep)) {
+ 		sfep->namelen = oldsfep->namelen;
+ 		sfep->offset = oldsfep->offset;
+ 		memcpy(sfep->name, oldsfep->name, sfep->namelen);
+ 		xfs_dir3_sfe_put_ino(mp, sfp, sfep,
+ 			xfs_dir3_sfe_get_ino(mp, oldsfp, oldsfep));
+ 		xfs_dir3_sfe_put_ftype(mp, sfp, sfep,
+ 			xfs_dir3_sfe_get_ftype(mp, oldsfp, oldsfep));
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  	}
  	/*
  	 * Clean up the inode.
diff --cc fs/xfs/xfs_sb.h
index db7593f4bc7e,c8d88989bad6..000000000000
--- a/fs/xfs/xfs_sb.h
+++ b/fs/xfs/xfs_sb.h
@@@ -599,7 -593,10 +599,14 @@@ xfs_sb_has_ro_compat_feature
  	return (sbp->sb_features_ro_compat & feature) != 0;
  }
  
++<<<<<<< HEAD
 +#define XFS_SB_FEAT_INCOMPAT_ALL 0
++=======
+ #define XFS_SB_FEAT_INCOMPAT_FTYPE	(1 << 0)	/* filetype in dirent */
+ #define XFS_SB_FEAT_INCOMPAT_ALL \
+ 		(XFS_SB_FEAT_INCOMPAT_FTYPE)
+ 
++>>>>>>> 1c55cece084a (xfs: Add write support for dirent filetype field)
  #define XFS_SB_FEAT_INCOMPAT_UNKNOWN	~XFS_SB_FEAT_INCOMPAT_ALL
  static inline bool
  xfs_sb_has_incompat_feature(
diff --git a/fs/xfs/xfs_dir2.c b/fs/xfs/xfs_dir2.c
index b26a50f9921d..793fe4f05acf 100644
--- a/fs/xfs/xfs_dir2.c
+++ b/fs/xfs/xfs_dir2.c
@@ -209,6 +209,7 @@ xfs_dir_createname(
 	memset(&args, 0, sizeof(xfs_da_args_t));
 	args.name = name->name;
 	args.namelen = name->len;
+	args.filetype = name->type;
 	args.hashval = dp->i_mount->m_dirnameops->hashname(name);
 	args.inumber = inum;
 	args.dp = dp;
@@ -283,6 +284,7 @@ xfs_dir_lookup(
 	memset(&args, 0, sizeof(xfs_da_args_t));
 	args.name = name->name;
 	args.namelen = name->len;
+	args.filetype = name->type;
 	args.hashval = dp->i_mount->m_dirnameops->hashname(name);
 	args.dp = dp;
 	args.whichfork = XFS_DATA_FORK;
@@ -338,6 +340,7 @@ xfs_dir_removename(
 	memset(&args, 0, sizeof(xfs_da_args_t));
 	args.name = name->name;
 	args.namelen = name->len;
+	args.filetype = name->type;
 	args.hashval = dp->i_mount->m_dirnameops->hashname(name);
 	args.inumber = ino;
 	args.dp = dp;
* Unmerged path fs/xfs/xfs_dir2_block.c
diff --git a/fs/xfs/xfs_dir2_data.c b/fs/xfs/xfs_dir2_data.c
index e4ce4801d4ae..4d6593a47559 100644
--- a/fs/xfs/xfs_dir2_data.c
+++ b/fs/xfs/xfs_dir2_data.c
@@ -151,6 +151,8 @@ __xfs_dir3_data_check(
 		XFS_WANT_CORRUPTED_RETURN(
 			be16_to_cpu(*xfs_dir2_data_entry_tag_p(dep)) ==
 					       (char *)dep - (char *)hdr);
+		XFS_WANT_CORRUPTED_RETURN(
+			xfs_dir3_dirent_get_ftype(mp, dep) < XFS_DIR3_FT_MAX);
 		count++;
 		lastfree = 0;
 		if (hdr->magic == cpu_to_be32(XFS_DIR2_BLOCK_MAGIC) ||
* Unmerged path fs/xfs/xfs_dir2_leaf.c
* Unmerged path fs/xfs/xfs_dir2_node.c
* Unmerged path fs/xfs/xfs_dir2_sf.c
* Unmerged path fs/xfs/xfs_sb.h
