inet: rename ir_loc_port to ir_num

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Eric Dumazet <edumazet@google.com>
commit b44084c2c822f99dd3f2334b288b7e463d222662
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/b44084c2.failed

In commit 634fb979e8f ("inet: includes a sock_common in request_sock")
I forgot that the two ports in sock_common do not have same byte order :

skc_dport is __be16 (network order), but skc_num is __u16 (host order)

So sparse complains because ir_loc_port (mapped into skc_num) is
considered as __u16 while it should be __be16

Let rename ir_loc_port to ireq->ir_num (analogy with inet->inet_num),
and perform appropriate htons/ntohs conversions.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Wu Fengguang <fengguang.wu@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b44084c2c822f99dd3f2334b288b7e463d222662)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/inet_sock.h
#	include/net/tcp.h
#	net/dccp/ipv6.c
#	net/dccp/minisocks.c
#	net/dccp/output.c
#	net/ipv4/inet_connection_sock.c
#	net/ipv4/syncookies.c
#	net/ipv4/tcp_output.c
#	net/ipv6/inet6_connection_sock.c
#	net/ipv6/syncookies.c
#	net/ipv6/tcp_ipv6.c
diff --cc include/net/inet_sock.h
index 9050ddcf0e31,06da91efbc83..000000000000
--- a/include/net/inet_sock.h
+++ b/include/net/inet_sock.h
@@@ -71,13 -70,14 +71,24 @@@ struct ip_options_data 
  
  struct inet_request_sock {
  	struct request_sock	req;
++<<<<<<< HEAD
 +#if IS_ENABLED(CONFIG_IPV6)
 +	u16			inet6_rsk_offset;
 +#endif
 +	__be16			loc_port;
 +	__be32			loc_addr;
 +	__be32			rmt_addr;
 +	__be16			rmt_port;
++=======
+ #define ir_loc_addr		req.__req_common.skc_rcv_saddr
+ #define ir_rmt_addr		req.__req_common.skc_daddr
+ #define ir_num			req.__req_common.skc_num
+ #define ir_rmt_port		req.__req_common.skc_dport
+ #define ir_v6_rmt_addr		req.__req_common.skc_v6_daddr
+ #define ir_v6_loc_addr		req.__req_common.skc_v6_rcv_saddr
+ #define ir_iif			req.__req_common.skc_bound_dev_if
+ 
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	kmemcheck_bitfield_begin(flags);
  	u16			snd_wscale : 4,
  				rcv_wscale : 4,
diff --cc include/net/tcp.h
index 172534716ebb,1db3a016bff6..000000000000
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@@ -1099,20 -1109,11 +1099,25 @@@ static inline void tcp_openreq_init(str
  	ireq->wscale_ok = rx_opt->wscale_ok;
  	ireq->acked = 0;
  	ireq->ecn_ok = 0;
++<<<<<<< HEAD
 +	ireq->rmt_port = tcp_hdr(skb)->source;
 +	ireq->loc_port = tcp_hdr(skb)->dest;
++=======
+ 	ireq->ir_rmt_port = tcp_hdr(skb)->source;
+ 	ireq->ir_num = ntohs(tcp_hdr(skb)->dest);
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  }
  
 -void tcp_enter_memory_pressure(struct sock *sk);
 +/* Compute time elapsed between SYNACK and the ACK completing 3WHS */
 +static inline void tcp_synack_rtt_meas(struct sock *sk,
 +				       struct request_sock *req)
 +{
 +	if (tcp_rsk(req)->snt_synack)
 +		tcp_valid_rtt_meas(sk,
 +		    tcp_time_stamp - tcp_rsk(req)->snt_synack);
 +}
 +
 +extern void tcp_enter_memory_pressure(struct sock *sk);
  
  static inline int keepalive_intvl_when(const struct tcp_sock *tp)
  {
diff --cc net/dccp/ipv6.c
index 9c61f9c02fdb,4ac71ff7c2e4..000000000000
--- a/net/dccp/ipv6.c
+++ b/net/dccp/ipv6.c
@@@ -225,12 -226,12 +225,18 @@@ static int dccp_v6_send_response(struc
  
  	memset(&fl6, 0, sizeof(fl6));
  	fl6.flowi6_proto = IPPROTO_DCCP;
 -	fl6.daddr = ireq->ir_v6_rmt_addr;
 -	fl6.saddr = ireq->ir_v6_loc_addr;
 +	fl6.daddr = ireq6->rmt_addr;
 +	fl6.saddr = ireq6->loc_addr;
  	fl6.flowlabel = 0;
++<<<<<<< HEAD
 +	fl6.flowi6_oif = ireq6->iif;
 +	fl6.fl6_dport = inet_rsk(req)->rmt_port;
 +	fl6.fl6_sport = inet_rsk(req)->loc_port;
++=======
+ 	fl6.flowi6_oif = ireq->ir_iif;
+ 	fl6.fl6_dport = ireq->ir_rmt_port;
+ 	fl6.fl6_sport = htons(ireq->ir_num);
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	security_req_classify_flow(req, flowi6_to_flowi(&fl6));
  
  
@@@ -504,12 -504,12 +510,17 @@@ static struct sock *dccp_v6_request_rec
  
  		memset(&fl6, 0, sizeof(fl6));
  		fl6.flowi6_proto = IPPROTO_DCCP;
 -		fl6.daddr = ireq->ir_v6_rmt_addr;
 +		fl6.daddr = ireq6->rmt_addr;
  		final_p = fl6_update_dst(&fl6, np->opt, &final);
 -		fl6.saddr = ireq->ir_v6_loc_addr;
 +		fl6.saddr = ireq6->loc_addr;
  		fl6.flowi6_oif = sk->sk_bound_dev_if;
++<<<<<<< HEAD
 +		fl6.fl6_dport = inet_rsk(req)->rmt_port;
 +		fl6.fl6_sport = inet_rsk(req)->loc_port;
++=======
+ 		fl6.fl6_dport = ireq->ir_rmt_port;
+ 		fl6.fl6_sport = htons(ireq->ir_num);
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  		security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));
  
  		dst = ip6_dst_lookup_flow(sk, &fl6, final_p, false);
diff --cc net/dccp/minisocks.c
index 662071b249cc,9e2f78bc1553..000000000000
--- a/net/dccp/minisocks.c
+++ b/net/dccp/minisocks.c
@@@ -269,10 -266,10 +269,17 @@@ int dccp_reqsk_init(struct request_soc
  {
  	struct dccp_request_sock *dreq = dccp_rsk(req);
  
++<<<<<<< HEAD
 +	inet_rsk(req)->rmt_port	  = dccp_hdr(skb)->dccph_sport;
 +	inet_rsk(req)->loc_port	  = dccp_hdr(skb)->dccph_dport;
 +	inet_rsk(req)->acked	  = 0;
 +	dreq->dreq_timestamp_echo = 0;
++=======
+ 	inet_rsk(req)->ir_rmt_port = dccp_hdr(skb)->dccph_sport;
+ 	inet_rsk(req)->ir_num	   = ntohs(dccp_hdr(skb)->dccph_dport);
+ 	inet_rsk(req)->acked	   = 0;
+ 	dreq->dreq_timestamp_echo  = 0;
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  
  	/* inherit feature negotiation options from listening socket */
  	return dccp_feat_clone_list(&dp->dccps_featneg, &dreq->dreq_featneg);
diff --cc net/dccp/output.c
index d17fc90a74b6,8876078859da..000000000000
--- a/net/dccp/output.c
+++ b/net/dccp/output.c
@@@ -424,8 -424,8 +424,13 @@@ struct sk_buff *dccp_make_response(stru
  	/* Build and checksum header */
  	dh = dccp_zeroed_hdr(skb, dccp_header_size);
  
++<<<<<<< HEAD
 +	dh->dccph_sport	= inet_rsk(req)->loc_port;
 +	dh->dccph_dport	= inet_rsk(req)->rmt_port;
++=======
+ 	dh->dccph_sport	= htons(inet_rsk(req)->ir_num);
+ 	dh->dccph_dport	= inet_rsk(req)->ir_rmt_port;
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	dh->dccph_doff	= (dccp_header_size +
  			   DCCP_SKB_CB(skb)->dccpd_opt_len) / 4;
  	dh->dccph_type	= DCCP_PKT_RESPONSE;
diff --cc net/ipv4/inet_connection_sock.c
index 6fc22f65d084,fc0e649cc002..000000000000
--- a/net/ipv4/inet_connection_sock.c
+++ b/net/ipv4/inet_connection_sock.c
@@@ -682,9 -675,9 +682,15 @@@ struct sock *inet_csk_clone_lock(const 
  		newsk->sk_state = TCP_SYN_RECV;
  		newicsk->icsk_bind_hash = NULL;
  
++<<<<<<< HEAD
 +		inet_sk(newsk)->inet_dport = inet_rsk(req)->rmt_port;
 +		inet_sk(newsk)->inet_num = ntohs(inet_rsk(req)->loc_port);
 +		inet_sk(newsk)->inet_sport = inet_rsk(req)->loc_port;
++=======
+ 		inet_sk(newsk)->inet_dport = inet_rsk(req)->ir_rmt_port;
+ 		inet_sk(newsk)->inet_num = inet_rsk(req)->ir_num;
+ 		inet_sk(newsk)->inet_sport = htons(inet_rsk(req)->ir_num);
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  		newsk->sk_write_space = sk_stream_write_space;
  
  		newicsk->icsk_retransmits = 0;
diff --cc net/ipv4/syncookies.c
index 14a15c49129d,3b64c59b4109..000000000000
--- a/net/ipv4/syncookies.c
+++ b/net/ipv4/syncookies.c
@@@ -315,10 -304,10 +315,17 @@@ struct sock *cookie_v4_check(struct soc
  	treq->rcv_isn		= ntohl(th->seq) - 1;
  	treq->snt_isn		= cookie;
  	req->mss		= mss;
++<<<<<<< HEAD
 +	ireq->loc_port		= th->dest;
 +	ireq->rmt_port		= th->source;
 +	ireq->loc_addr		= ip_hdr(skb)->daddr;
 +	ireq->rmt_addr		= ip_hdr(skb)->saddr;
++=======
+ 	ireq->ir_num		= ntohs(th->dest);
+ 	ireq->ir_rmt_port	= th->source;
+ 	ireq->ir_loc_addr	= ip_hdr(skb)->daddr;
+ 	ireq->ir_rmt_addr	= ip_hdr(skb)->saddr;
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	ireq->ecn_ok		= ecn_ok;
  	ireq->snd_wscale	= tcp_opt.snd_wscale;
  	ireq->sack_ok		= tcp_opt.sack_ok;
diff --cc net/ipv4/tcp_output.c
index 69e48116d312,2822ad021a48..000000000000
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@@ -2725,8 -2734,8 +2725,13 @@@ struct sk_buff *tcp_make_synack(struct 
  	th->syn = 1;
  	th->ack = 1;
  	TCP_ECN_make_synack(req, th);
++<<<<<<< HEAD
 +	th->source = ireq->loc_port;
 +	th->dest = ireq->rmt_port;
++=======
+ 	th->source = htons(ireq->ir_num);
+ 	th->dest = ireq->ir_rmt_port;
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	/* Setting of flags are superfluous here for callers (and ECE is
  	 * not even correctly set)
  	 */
diff --cc net/ipv6/inet6_connection_sock.c
index e4311cbc8b4e,77bb8afb141d..000000000000
--- a/net/ipv6/inet6_connection_sock.c
+++ b/net/ipv6/inet6_connection_sock.c
@@@ -77,13 -77,13 +77,18 @@@ struct dst_entry *inet6_csk_route_req(s
  
  	memset(fl6, 0, sizeof(*fl6));
  	fl6->flowi6_proto = IPPROTO_TCP;
 -	fl6->daddr = ireq->ir_v6_rmt_addr;
 +	fl6->daddr = treq->rmt_addr;
  	final_p = fl6_update_dst(fl6, np->opt, &final);
 -	fl6->saddr = ireq->ir_v6_loc_addr;
 -	fl6->flowi6_oif = ireq->ir_iif;
 +	fl6->saddr = treq->loc_addr;
 +	fl6->flowi6_oif = treq->iif;
  	fl6->flowi6_mark = sk->sk_mark;
++<<<<<<< HEAD
 +	fl6->fl6_dport = inet_rsk(req)->rmt_port;
 +	fl6->fl6_sport = inet_rsk(req)->loc_port;
++=======
+ 	fl6->fl6_dport = ireq->ir_rmt_port;
+ 	fl6->fl6_sport = htons(ireq->ir_num);
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	security_req_classify_flow(req, flowi6_to_flowi(fl6));
  
  	dst = ip6_dst_lookup_flow(sk, fl6, final_p, false);
diff --cc net/ipv6/syncookies.c
index bf63ac8a49b9,d04d3f1dd9b7..000000000000
--- a/net/ipv6/syncookies.c
+++ b/net/ipv6/syncookies.c
@@@ -202,10 -193,10 +202,17 @@@ struct sock *cookie_v6_check(struct soc
  		goto out_free;
  
  	req->mss = mss;
++<<<<<<< HEAD
 +	ireq->rmt_port = th->source;
 +	ireq->loc_port = th->dest;
 +	ireq6->rmt_addr = ipv6_hdr(skb)->saddr;
 +	ireq6->loc_addr = ipv6_hdr(skb)->daddr;
++=======
+ 	ireq->ir_rmt_port = th->source;
+ 	ireq->ir_num = ntohs(th->dest);
+ 	ireq->ir_v6_rmt_addr = ipv6_hdr(skb)->saddr;
+ 	ireq->ir_v6_loc_addr = ipv6_hdr(skb)->daddr;
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  	if (ipv6_opt_accepted(sk, skb) ||
  	    np->rxopt.bits.rxinfo || np->rxopt.bits.rxoinfo ||
  	    np->rxopt.bits.rxhlim || np->rxopt.bits.rxohlim) {
diff --cc net/ipv6/tcp_ipv6.c
index 8152594274ab,b996ee2005a9..000000000000
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@@ -1736,10 -1735,10 +1736,14 @@@ static void get_openreq6(struct seq_fil
  		   i,
  		   src->s6_addr32[0], src->s6_addr32[1],
  		   src->s6_addr32[2], src->s6_addr32[3],
++<<<<<<< HEAD
 +		   ntohs(inet_rsk(req)->loc_port),
++=======
+ 		   inet_rsk(req)->ir_num,
++>>>>>>> b44084c2c822 (inet: rename ir_loc_port to ir_num)
  		   dest->s6_addr32[0], dest->s6_addr32[1],
  		   dest->s6_addr32[2], dest->s6_addr32[3],
 -		   ntohs(inet_rsk(req)->ir_rmt_port),
 +		   ntohs(inet_rsk(req)->rmt_port),
  		   TCP_SYN_RECV,
  		   0,0, /* could print option size, but that is af dependent. */
  		   1,   /* timers active (only the expire timer) */
* Unmerged path include/net/inet_sock.h
* Unmerged path include/net/tcp.h
* Unmerged path net/dccp/ipv6.c
* Unmerged path net/dccp/minisocks.c
* Unmerged path net/dccp/output.c
* Unmerged path net/ipv4/inet_connection_sock.c
* Unmerged path net/ipv4/syncookies.c
* Unmerged path net/ipv4/tcp_output.c
* Unmerged path net/ipv6/inet6_connection_sock.c
* Unmerged path net/ipv6/syncookies.c
* Unmerged path net/ipv6/tcp_ipv6.c
