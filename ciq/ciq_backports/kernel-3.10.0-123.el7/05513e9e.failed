netfilter: nf_tables: add reject module for NFPROTO_INET

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Patrick McHardy <kaber@trash.net>
commit 05513e9e33dbded8124567466a444d32173eecc6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/05513e9e.failed

Add a reject module for NFPROTO_INET. It does nothing but dispatch
to the AF-specific modules based on the hook family.

	Signed-off-by: Patrick McHardy <kaber@trash.net>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 05513e9e33dbded8124567466a444d32173eecc6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/nft_reject.h
#	net/ipv4/netfilter/nft_reject_ipv4.c
#	net/ipv6/netfilter/nft_reject_ipv6.c
#	net/netfilter/Kconfig
#	net/netfilter/Makefile
diff --cc net/netfilter/Kconfig
index 112ddfea8c1a,e9410d17619d..000000000000
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@@ -408,8 -408,132 +408,132 @@@ config NF_NAT_TFT
  	depends on NF_CONNTRACK && NF_NAT
  	default NF_NAT && NF_CONNTRACK_TFTP
  
 -config NETFILTER_SYNPROXY
 -	tristate
 -
  endif # NF_CONNTRACK
  
++<<<<<<< HEAD
++=======
+ config NF_TABLES
+ 	select NETFILTER_NETLINK
+ 	tristate "Netfilter nf_tables support"
+ 	help
+ 	  nftables is the new packet classification framework that intends to
+ 	  replace the existing {ip,ip6,arp,eb}_tables infrastructure. It
+ 	  provides a pseudo-state machine with an extensible instruction-set
+ 	  (also known as expressions) that the userspace 'nft' utility
+ 	  (http://www.netfilter.org/projects/nftables) uses to build the
+ 	  rule-set. It also comes with the generic set infrastructure that
+ 	  allows you to construct mappings between matchings and actions
+ 	  for performance lookups.
+ 
+ 	  To compile it as a module, choose M here.
+ 
+ config NF_TABLES_INET
+ 	depends on NF_TABLES && IPV6
+ 	select NF_TABLES_IPV4
+ 	select NF_TABLES_IPV6
+ 	tristate "Netfilter nf_tables mixed IPv4/IPv6 tables support"
+ 	help
+ 	  This option enables support for a mixed IPv4/IPv6 "inet" table.
+ 
+ config NFT_EXTHDR
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables IPv6 exthdr module"
+ 	help
+ 	  This option adds the "exthdr" expression that you can use to match
+ 	  IPv6 extension headers.
+ 
+ config NFT_META
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables meta module"
+ 	help
+ 	  This option adds the "meta" expression that you can use to match and
+ 	  to set packet metainformation such as the packet mark.
+ 
+ config NFT_CT
+ 	depends on NF_TABLES
+ 	depends on NF_CONNTRACK
+ 	tristate "Netfilter nf_tables conntrack module"
+ 	help
+ 	  This option adds the "meta" expression that you can use to match
+ 	  connection tracking information such as the flow state.
+ 
+ config NFT_RBTREE
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables rbtree set module"
+ 	help
+ 	  This option adds the "rbtree" set type (Red Black tree) that is used
+ 	  to build interval-based sets.
+ 
+ config NFT_HASH
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables hash set module"
+ 	help
+ 	  This option adds the "hash" set type that is used to build one-way
+ 	  mappings between matchings and actions.
+ 
+ config NFT_COUNTER
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables counter module"
+ 	help
+ 	  This option adds the "counter" expression that you can use to
+ 	  include packet and byte counters in a rule.
+ 
+ config NFT_LOG
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables log module"
+ 	help
+ 	  This option adds the "log" expression that you can use to log
+ 	  packets matching some criteria.
+ 
+ config NFT_LIMIT
+ 	depends on NF_TABLES
+ 	tristate "Netfilter nf_tables limit module"
+ 	help
+ 	  This option adds the "limit" expression that you can use to
+ 	  ratelimit rule matchings.
+ 
+ config NFT_NAT
+ 	depends on NF_TABLES
+ 	depends on NF_CONNTRACK
+ 	depends on NF_NAT
+ 	tristate "Netfilter nf_tables nat module"
+ 	help
+ 	  This option adds the "nat" expression that you can use to perform
+ 	  typical Network Address Translation (NAT) packet transformations.
+ 
+ config NFT_QUEUE
+ 	depends on NF_TABLES
+ 	depends on NETFILTER_XTABLES
+ 	depends on NETFILTER_NETLINK_QUEUE
+ 	tristate "Netfilter nf_tables queue module"
+ 	help
+ 	  This is required if you intend to use the userspace queueing
+ 	  infrastructure (also known as NFQUEUE) from nftables.
+ 
+ config NFT_REJECT
+ 	depends on NF_TABLES
+ 	default m if NETFILTER_ADVANCED=n
+ 	tristate "Netfilter nf_tables reject support"
+ 	help
+ 	  This option adds the "reject" expression that you can use to
+ 	  explicitly deny and notify via TCP reset/ICMP informational errors
+ 	  unallowed traffic.
+ 
+ config NFT_REJECT_INET
+ 	depends on NF_TABLES_INET
+ 	default NFT_REJECT
+ 	tristate
+ 
+ config NFT_COMPAT
+ 	depends on NF_TABLES
+ 	depends on NETFILTER_XTABLES
+ 	tristate "Netfilter x_tables over nf_tables module"
+ 	help
+ 	  This is required if you intend to use any of existing
+ 	  x_tables match/target extensions over the nf_tables
+ 	  framework.
+ 
++>>>>>>> 05513e9e33db (netfilter: nf_tables: add reject module for NFPROTO_INET)
  config NETFILTER_XTABLES
  	tristate "Netfilter Xtables support (required for ip_tables)"
  	default m if NETFILTER_ADVANCED=n
diff --cc net/netfilter/Makefile
index ebfa7dc747cd,bffdad774da7..000000000000
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@@ -61,6 -61,30 +61,33 @@@ obj-$(CONFIG_NF_NAT_IRC) += nf_nat_irc.
  obj-$(CONFIG_NF_NAT_SIP) += nf_nat_sip.o
  obj-$(CONFIG_NF_NAT_TFTP) += nf_nat_tftp.o
  
++<<<<<<< HEAD
++=======
+ # SYNPROXY
+ obj-$(CONFIG_NETFILTER_SYNPROXY) += nf_synproxy_core.o
+ 
+ # nf_tables
+ nf_tables-objs += nf_tables_core.o nf_tables_api.o
+ nf_tables-objs += nft_immediate.o nft_cmp.o nft_lookup.o
+ nf_tables-objs += nft_bitwise.o nft_byteorder.o nft_payload.o
+ 
+ obj-$(CONFIG_NF_TABLES)		+= nf_tables.o
+ obj-$(CONFIG_NF_TABLES_INET)	+= nf_tables_inet.o
+ obj-$(CONFIG_NFT_COMPAT)	+= nft_compat.o
+ obj-$(CONFIG_NFT_EXTHDR)	+= nft_exthdr.o
+ obj-$(CONFIG_NFT_META)		+= nft_meta.o
+ obj-$(CONFIG_NFT_CT)		+= nft_ct.o
+ obj-$(CONFIG_NFT_LIMIT)		+= nft_limit.o
+ obj-$(CONFIG_NFT_NAT)		+= nft_nat.o
+ obj-$(CONFIG_NFT_QUEUE)		+= nft_queue.o
+ obj-$(CONFIG_NFT_REJECT) 	+= nft_reject.o
+ obj-$(CONFIG_NFT_REJECT_INET)	+= nft_reject_inet.o
+ obj-$(CONFIG_NFT_RBTREE)	+= nft_rbtree.o
+ obj-$(CONFIG_NFT_HASH)		+= nft_hash.o
+ obj-$(CONFIG_NFT_COUNTER)	+= nft_counter.o
+ obj-$(CONFIG_NFT_LOG)		+= nft_log.o
+ 
++>>>>>>> 05513e9e33db (netfilter: nf_tables: add reject module for NFPROTO_INET)
  # generic X tables 
  obj-$(CONFIG_NETFILTER_XTABLES) += x_tables.o xt_tcpudp.o
  
* Unmerged path include/net/netfilter/nft_reject.h
* Unmerged path net/ipv4/netfilter/nft_reject_ipv4.c
* Unmerged path net/ipv6/netfilter/nft_reject_ipv6.c
* Unmerged path include/net/netfilter/nft_reject.h
* Unmerged path net/ipv4/netfilter/nft_reject_ipv4.c
* Unmerged path net/ipv6/netfilter/nft_reject_ipv6.c
* Unmerged path net/netfilter/Kconfig
* Unmerged path net/netfilter/Makefile
diff --git a/net/netfilter/nft_reject_inet.c b/net/netfilter/nft_reject_inet.c
new file mode 100644
index 000000000000..8a310f239c93
--- /dev/null
+++ b/net/netfilter/nft_reject_inet.c
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2014 Patrick McHardy <kaber@trash.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/netlink.h>
+#include <linux/netfilter.h>
+#include <linux/netfilter/nf_tables.h>
+#include <net/netfilter/nf_tables.h>
+#include <net/netfilter/nft_reject.h>
+
+static void nft_reject_inet_eval(const struct nft_expr *expr,
+				 struct nft_data data[NFT_REG_MAX + 1],
+				 const struct nft_pktinfo *pkt)
+{
+	switch (pkt->ops->pf) {
+	case NFPROTO_IPV4:
+		nft_reject_ipv4_eval(expr, data, pkt);
+	case NFPROTO_IPV6:
+		nft_reject_ipv6_eval(expr, data, pkt);
+	}
+}
+
+static struct nft_expr_type nft_reject_inet_type;
+static const struct nft_expr_ops nft_reject_inet_ops = {
+	.type		= &nft_reject_inet_type,
+	.size		= NFT_EXPR_SIZE(sizeof(struct nft_reject)),
+	.eval		= nft_reject_inet_eval,
+	.init		= nft_reject_init,
+	.dump		= nft_reject_dump,
+};
+
+static struct nft_expr_type nft_reject_inet_type __read_mostly = {
+	.family		= NFPROTO_INET,
+	.name		= "reject",
+	.ops		= &nft_reject_inet_ops,
+	.policy		= nft_reject_policy,
+	.maxattr	= NFTA_REJECT_MAX,
+	.owner		= THIS_MODULE,
+};
+
+static int __init nft_reject_inet_module_init(void)
+{
+	return nft_register_expr(&nft_reject_inet_type);
+}
+
+static void __exit nft_reject_inet_module_exit(void)
+{
+	nft_unregister_expr(&nft_reject_inet_type);
+}
+
+module_init(nft_reject_inet_module_init);
+module_exit(nft_reject_inet_module_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Patrick McHardy <kaber@trash.net>");
+MODULE_ALIAS_NFT_AF_EXPR(1, "reject");
