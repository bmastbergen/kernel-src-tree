NFS: dprintk() should not print negative fileids and inode numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Niels de Vos <ndevos@redhat.com>
commit 1e8968c5b0582392d5f132422f581e3ebc24e627
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/1e8968c5.failed

A fileid in NFS is a uint64. There are some occurrences where dprintk()
outputs a signed fileid. This leads to confusion and more difficult to
read debugging (negative fileids matching positive inode numbers).

	Signed-off-by: Niels de Vos <ndevos@redhat.com>
CC: Santosh Pradhan <spradhan@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 1e8968c5b0582392d5f132422f581e3ebc24e627)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/dir.c
#	fs/nfs/file.c
#	fs/nfs/inode.c
diff --cc fs/nfs/dir.c
index 1ffba5654305,b266f734bd53..000000000000
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@@ -1392,8 -1404,8 +1392,13 @@@ int nfs_atomic_open(struct inode *dir, 
  	/* Expect a negative dentry */
  	BUG_ON(dentry->d_inode);
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: atomic_open(%s/%ld), %s\n",
 +			dir->i_sb->s_id, dir->i_ino, dentry->d_name.name);
++=======
+ 	dfprintk(VFS, "NFS: atomic_open(%s/%lu), %pd\n",
+ 			dir->i_sb->s_id, dir->i_ino, dentry);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  	err = nfs_check_flags(open_flags);
  	if (err)
@@@ -1577,8 -1594,8 +1582,13 @@@ int nfs_create(struct inode *dir, struc
  	int open_flags = excl ? O_CREAT | O_EXCL : O_CREAT;
  	int error;
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: create(%s/%ld), %s\n",
 +			dir->i_sb->s_id, dir->i_ino, dentry->d_name.name);
++=======
+ 	dfprintk(VFS, "NFS: create(%s/%lu), %pd\n",
+ 			dir->i_sb->s_id, dir->i_ino, dentry);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  	attr.ia_mode = mode;
  	attr.ia_valid = ATTR_MODE;
@@@ -1602,8 -1621,8 +1612,13 @@@ nfs_mknod(struct inode *dir, struct den
  	struct iattr attr;
  	int status;
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: mknod(%s/%ld), %s\n",
 +			dir->i_sb->s_id, dir->i_ino, dentry->d_name.name);
++=======
+ 	dfprintk(VFS, "NFS: mknod(%s/%lu), %pd\n",
+ 			dir->i_sb->s_id, dir->i_ino, dentry);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  	if (!new_valid_dev(rdev))
  		return -EINVAL;
@@@ -1629,8 -1650,8 +1644,13 @@@ int nfs_mkdir(struct inode *dir, struc
  	struct iattr attr;
  	int error;
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: mkdir(%s/%ld), %s\n",
 +			dir->i_sb->s_id, dir->i_ino, dentry->d_name.name);
++=======
+ 	dfprintk(VFS, "NFS: mkdir(%s/%lu), %pd\n",
+ 			dir->i_sb->s_id, dir->i_ino, dentry);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  	attr.ia_valid = ATTR_MODE;
  	attr.ia_mode = mode | S_IFDIR;
@@@ -1655,15 -1678,24 +1675,20 @@@ int nfs_rmdir(struct inode *dir, struc
  {
  	int error;
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: rmdir(%s/%ld), %s\n",
 +			dir->i_sb->s_id, dir->i_ino, dentry->d_name.name);
++=======
+ 	dfprintk(VFS, "NFS: rmdir(%s/%lu), %pd\n",
+ 			dir->i_sb->s_id, dir->i_ino, dentry);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
 -	trace_nfs_rmdir_enter(dir, dentry);
 -	if (dentry->d_inode) {
 -		nfs_wait_on_sillyrename(dentry);
 -		error = NFS_PROTO(dir)->rmdir(dir, &dentry->d_name);
 -		/* Ensure the VFS deletes this inode */
 -		switch (error) {
 -		case 0:
 -			clear_nlink(dentry->d_inode);
 -			break;
 -		case -ENOENT:
 -			nfs_dentry_handle_enoent(dentry);
 -		}
 -	} else
 -		error = NFS_PROTO(dir)->rmdir(dir, &dentry->d_name);
 -	trace_nfs_rmdir_exit(dir, dentry, error);
 +	error = NFS_PROTO(dir)->rmdir(dir, &dentry->d_name);
 +	/* Ensure the VFS deletes this inode */
 +	if (error == 0 && dentry->d_inode != NULL)
 +		clear_nlink(dentry->d_inode);
 +	else if (error == -ENOENT)
 +		nfs_dentry_handle_enoent(dentry);
  
  	return error;
  }
@@@ -1714,11 -1747,12 +1739,16 @@@ int nfs_unlink(struct inode *dir, struc
  	int error;
  	int need_rehash = 0;
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: unlink(%s/%ld, %s)\n", dir->i_sb->s_id,
 +		dir->i_ino, dentry->d_name.name);
++=======
+ 	dfprintk(VFS, "NFS: unlink(%s/%lu, %pd)\n", dir->i_sb->s_id,
+ 		dir->i_ino, dentry);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
 -	trace_nfs_unlink_enter(dir, dentry);
  	spin_lock(&dentry->d_lock);
 -	if (d_count(dentry) > 1) {
 +	if (dentry->d_count > 1) {
  		spin_unlock(&dentry->d_lock);
  		/* Start asynchronous writeout of the inode */
  		write_inode_now(dentry->d_inode, 0);
@@@ -1762,8 -1798,8 +1792,13 @@@ int nfs_symlink(struct inode *dir, stru
  	unsigned int pathlen = strlen(symname);
  	int error;
  
++<<<<<<< HEAD
 +	dfprintk(VFS, "NFS: symlink(%s/%ld, %s, %s)\n", dir->i_sb->s_id,
 +		dir->i_ino, dentry->d_name.name, symname);
++=======
+ 	dfprintk(VFS, "NFS: symlink(%s/%lu, %pd, %s)\n", dir->i_sb->s_id,
+ 		dir->i_ino, dentry, symname);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  	if (pathlen > PAGE_SIZE)
  		return -ENAMETOOLONG;
@@@ -1781,11 -1817,13 +1816,15 @@@
  		memset(kaddr + pathlen, 0, PAGE_SIZE - pathlen);
  	kunmap_atomic(kaddr);
  
 -	trace_nfs_symlink_enter(dir, dentry);
  	error = NFS_PROTO(dir)->symlink(dir, dentry, page, pathlen, &attr);
 -	trace_nfs_symlink_exit(dir, dentry, error);
  	if (error != 0) {
++<<<<<<< HEAD
 +		dfprintk(VFS, "NFS: symlink(%s/%ld, %s, %s) error %d\n",
++=======
+ 		dfprintk(VFS, "NFS: symlink(%s/%lu, %pd, %s) error %d\n",
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  			dir->i_sb->s_id, dir->i_ino,
 -			dentry, symname, error);
 +			dentry->d_name.name, symname, error);
  		d_drop(dentry);
  		__free_page(page);
  		return error;
diff --cc fs/nfs/file.c
index 4114362d0958,5bb790a69c71..000000000000
--- a/fs/nfs/file.c
+++ b/fs/nfs/file.c
@@@ -371,10 -354,8 +371,15 @@@ static int nfs_write_begin(struct file 
  	struct page *page;
  	int once_thru = 0;
  
++<<<<<<< HEAD
 +	dfprintk(PAGECACHE, "NFS: write_begin(%s/%s(%ld), %u@%lld)\n",
 +		file->f_path.dentry->d_parent->d_name.name,
 +		file->f_path.dentry->d_name.name,
 +		mapping->host->i_ino, len, (long long) pos);
++=======
+ 	dfprintk(PAGECACHE, "NFS: write_begin(%pD2(%lu), %u@%lld)\n",
+ 		file, mapping->host->i_ino, len, (long long) pos);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  start:
  	/*
@@@ -414,10 -395,8 +419,15 @@@ static int nfs_write_end(struct file *f
  	struct nfs_open_context *ctx = nfs_file_open_context(file);
  	int status;
  
++<<<<<<< HEAD
 +	dfprintk(PAGECACHE, "NFS: write_end(%s/%s(%ld), %u@%lld)\n",
 +		file->f_path.dentry->d_parent->d_name.name,
 +		file->f_path.dentry->d_name.name,
 +		mapping->host->i_ino, len, (long long) pos);
++=======
+ 	dfprintk(PAGECACHE, "NFS: write_end(%pD2(%lu), %u@%lld)\n",
+ 		file, mapping->host->i_ino, len, (long long) pos);
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  
  	/*
  	 * Zero any uninitialised parts of the page, and then mark the page
@@@ -604,9 -585,8 +614,14 @@@ static int nfs_vm_page_mkwrite(struct v
  	int ret = VM_FAULT_NOPAGE;
  	struct address_space *mapping;
  
++<<<<<<< HEAD
 +	dfprintk(PAGECACHE, "NFS: vm_page_mkwrite(%s/%s(%ld), offset %lld)\n",
 +		dentry->d_parent->d_name.name, dentry->d_name.name,
 +		filp->f_mapping->host->i_ino,
++=======
+ 	dfprintk(PAGECACHE, "NFS: vm_page_mkwrite(%pD2(%lu), offset %lld)\n",
+ 		filp, filp->f_mapping->host->i_ino,
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  		(long long)page_offset(page));
  
  	/* make sure the cache has finished storing the page */
diff --cc fs/nfs/inode.c
index 323cbea4dbad,5feec233895d..000000000000
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@@ -850,11 -886,18 +850,11 @@@ __nfs_revalidate_inode(struct nfs_serve
  		goto out;
  
  	nfs_inc_stats(inode, NFSIOS_INODEREVALIDATE);
 -
 -	label = nfs4_label_alloc(NFS_SERVER(inode), GFP_KERNEL);
 -	if (IS_ERR(label)) {
 -		status = PTR_ERR(label);
 -		goto out;
 -	}
 -
 -	status = NFS_PROTO(inode)->getattr(server, NFS_FH(inode), fattr, label);
 +	status = NFS_PROTO(inode)->getattr(server, NFS_FH(inode), fattr);
  	if (status != 0) {
- 		dfprintk(PAGECACHE, "nfs_revalidate_inode: (%s/%Ld) getattr failed, error=%d\n",
+ 		dfprintk(PAGECACHE, "nfs_revalidate_inode: (%s/%Lu) getattr failed, error=%d\n",
  			 inode->i_sb->s_id,
- 			 (long long)NFS_FILEID(inode), status);
+ 			 (unsigned long long)NFS_FILEID(inode), status);
  		if (status == -ESTALE) {
  			nfs_zap_caches(inode);
  			if (!S_ISDIR(inode->i_mode))
@@@ -865,10 -908,10 +865,15 @@@
  
  	status = nfs_refresh_inode(inode, fattr);
  	if (status) {
- 		dfprintk(PAGECACHE, "nfs_revalidate_inode: (%s/%Ld) refresh failed, error=%d\n",
+ 		dfprintk(PAGECACHE, "nfs_revalidate_inode: (%s/%Lu) refresh failed, error=%d\n",
  			 inode->i_sb->s_id,
++<<<<<<< HEAD
 +			 (long long)NFS_FILEID(inode), status);
 +		goto out;
++=======
+ 			 (unsigned long long)NFS_FILEID(inode), status);
+ 		goto err_out;
++>>>>>>> 1e8968c5b058 (NFS: dprintk() should not print negative fileids and inode numbers)
  	}
  
  	if (nfsi->cache_validity & NFS_INO_INVALID_ACL)
@@@ -876,11 -919,13 +881,11 @@@
  
  	nfs_setsecurity(inode, fattr, label);
  
- 	dfprintk(PAGECACHE, "NFS: (%s/%Ld) revalidation complete\n",
+ 	dfprintk(PAGECACHE, "NFS: (%s/%Lu) revalidation complete\n",
  		inode->i_sb->s_id,
- 		(long long)NFS_FILEID(inode));
+ 		(unsigned long long)NFS_FILEID(inode));
  
 -err_out:
 -	nfs4_label_free(label);
 -out:
 + out:
  	nfs_free_fattr(fattr);
  	trace_nfs_revalidate_inode_exit(inode, status);
  	return status;
* Unmerged path fs/nfs/dir.c
diff --git a/fs/nfs/direct.c b/fs/nfs/direct.c
index 0bd7a55a5f07..eb33444c3b79 100644
--- a/fs/nfs/direct.c
+++ b/fs/nfs/direct.c
@@ -239,9 +239,9 @@ static void nfs_direct_complete(struct nfs_direct_req *dreq)
 
 static void nfs_direct_readpage_release(struct nfs_page *req)
 {
-	dprintk("NFS: direct read done (%s/%lld %d@%lld)\n",
+	dprintk("NFS: direct read done (%s/%llu %d@%lld)\n",
 		req->wb_context->dentry->d_inode->i_sb->s_id,
-		(long long)NFS_FILEID(req->wb_context->dentry->d_inode),
+		(unsigned long long)NFS_FILEID(req->wb_context->dentry->d_inode),
 		req->wb_bytes,
 		(long long)req_offset(req));
 	nfs_release_request(req);
* Unmerged path fs/nfs/file.c
* Unmerged path fs/nfs/inode.c
diff --git a/fs/nfs/nfs3acl.c b/fs/nfs/nfs3acl.c
index 4a1aafba6a20..34e918d265b0 100644
--- a/fs/nfs/nfs3acl.c
+++ b/fs/nfs/nfs3acl.c
@@ -130,7 +130,7 @@ static void __nfs3_forget_cached_acls(struct nfs_inode *nfsi)
 
 void nfs3_forget_cached_acls(struct inode *inode)
 {
-	dprintk("NFS: nfs3_forget_cached_acls(%s/%ld)\n", inode->i_sb->s_id,
+	dprintk("NFS: nfs3_forget_cached_acls(%s/%lu)\n", inode->i_sb->s_id,
 		inode->i_ino);
 	spin_lock(&inode->i_lock);
 	__nfs3_forget_cached_acls(NFS_I(inode));
@@ -161,7 +161,7 @@ static struct posix_acl *nfs3_get_cached_acl(struct inode *inode, int type)
 		acl = posix_acl_dup(acl);
 out:
 	spin_unlock(&inode->i_lock);
-	dprintk("NFS: nfs3_get_cached_acl(%s/%ld, %d) = %p\n", inode->i_sb->s_id,
+	dprintk("NFS: nfs3_get_cached_acl(%s/%lu, %d) = %p\n", inode->i_sb->s_id,
 		inode->i_ino, type, acl);
 	return acl;
 }
diff --git a/fs/nfs/nfs4filelayout.c b/fs/nfs/nfs4filelayout.c
index 5c05f7b7aced..9eaff32445e6 100644
--- a/fs/nfs/nfs4filelayout.c
+++ b/fs/nfs/nfs4filelayout.c
@@ -90,10 +90,10 @@ static void filelayout_reset_write(struct nfs_write_data *data)
 
 	if (!test_and_set_bit(NFS_IOHDR_REDO, &hdr->flags)) {
 		dprintk("%s Reset task %5u for i/o through MDS "
-			"(req %s/%lld, %u bytes @ offset %llu)\n", __func__,
+			"(req %s/%llu, %u bytes @ offset %llu)\n", __func__,
 			data->task.tk_pid,
 			hdr->inode->i_sb->s_id,
-			(long long)NFS_FILEID(hdr->inode),
+			(unsigned long long)NFS_FILEID(hdr->inode),
 			data->args.count,
 			(unsigned long long)data->args.offset);
 
@@ -111,10 +111,10 @@ static void filelayout_reset_read(struct nfs_read_data *data)
 
 	if (!test_and_set_bit(NFS_IOHDR_REDO, &hdr->flags)) {
 		dprintk("%s Reset task %5u for i/o through MDS "
-			"(req %s/%lld, %u bytes @ offset %llu)\n", __func__,
+			"(req %s/%llu, %u bytes @ offset %llu)\n", __func__,
 			data->task.tk_pid,
 			hdr->inode->i_sb->s_id,
-			(long long)NFS_FILEID(hdr->inode),
+			(unsigned long long)NFS_FILEID(hdr->inode),
 			data->args.count,
 			(unsigned long long)data->args.offset);
 
diff --git a/fs/nfs/read.c b/fs/nfs/read.c
index 31db5c366b81..411aedda14bb 100644
--- a/fs/nfs/read.c
+++ b/fs/nfs/read.c
@@ -163,9 +163,9 @@ static void nfs_readpage_release(struct nfs_page *req)
 
 	unlock_page(req->wb_page);
 
-	dprintk("NFS: read done (%s/%Ld %d@%Ld)\n",
+	dprintk("NFS: read done (%s/%Lu %d@%Ld)\n",
 			req->wb_context->dentry->d_inode->i_sb->s_id,
-			(long long)NFS_FILEID(req->wb_context->dentry->d_inode),
+			(unsigned long long)NFS_FILEID(req->wb_context->dentry->d_inode),
 			req->wb_bytes,
 			(long long)req_offset(req));
 	nfs_release_request(req);
@@ -228,11 +228,11 @@ int nfs_initiate_read(struct rpc_clnt *clnt,
 	/* Set up the initial task struct. */
 	NFS_PROTO(inode)->read_setup(data, &msg);
 
-	dprintk("NFS: %5u initiated read call (req %s/%lld, %u bytes @ "
+	dprintk("NFS: %5u initiated read call (req %s/%llu, %u bytes @ "
 			"offset %llu)\n",
 			data->task.tk_pid,
 			inode->i_sb->s_id,
-			(long long)NFS_FILEID(inode),
+			(unsigned long long)NFS_FILEID(inode),
 			data->args.count,
 			(unsigned long long)data->args.offset);
 
@@ -630,9 +630,9 @@ int nfs_readpages(struct file *filp, struct address_space *mapping,
 	unsigned long npages;
 	int ret = -ESTALE;
 
-	dprintk("NFS: nfs_readpages (%s/%Ld %d)\n",
+	dprintk("NFS: nfs_readpages (%s/%Lu %d)\n",
 			inode->i_sb->s_id,
-			(long long)NFS_FILEID(inode),
+			(unsigned long long)NFS_FILEID(inode),
 			nr_pages);
 	nfs_inc_stats(inode, NFSIOS_VFSREADPAGES);
 
diff --git a/fs/nfs/write.c b/fs/nfs/write.c
index 9fb5d7c9756a..bc4e858835a8 100644
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -1015,10 +1015,10 @@ int nfs_initiate_write(struct rpc_clnt *clnt,
 	NFS_PROTO(inode)->write_setup(data, &msg);
 
 	dprintk("NFS: %5u initiated write call "
-		"(req %s/%lld, %u bytes @ offset %llu)\n",
+		"(req %s/%llu, %u bytes @ offset %llu)\n",
 		data->task.tk_pid,
 		inode->i_sb->s_id,
-		(long long)NFS_FILEID(inode),
+		(unsigned long long)NFS_FILEID(inode),
 		data->args.count,
 		(unsigned long long)data->args.offset);
 
@@ -1602,9 +1602,9 @@ static void nfs_commit_release_pages(struct nfs_commit_data *data)
 		nfs_list_remove_request(req);
 		nfs_clear_page_commit(req->wb_page);
 
-		dprintk("NFS:       commit (%s/%lld %d@%lld)",
+		dprintk("NFS:       commit (%s/%llu %d@%lld)",
 			req->wb_context->dentry->d_sb->s_id,
-			(long long)NFS_FILEID(req->wb_context->dentry->d_inode),
+			(unsigned long long)NFS_FILEID(req->wb_context->dentry->d_inode),
 			req->wb_bytes,
 			(long long)req_offset(req));
 		if (status < 0) {
