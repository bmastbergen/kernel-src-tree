ip6_output: do skb ufo init for peeked non ufo skb as well

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit c547dbf55d5f8cf615ccc0e7265e98db27d3fb8b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/c547dbf5.failed

Now, if user application does:
sendto len<mtu flag MSG_MORE
sendto len>mtu flag 0
The skb is not treated as fragmented one because it is not initialized
that way. So move the initialization to fix this.

introduced by:
commit e89e9cf539a28df7d0eb1d0a545368e9920b34ac "[IPv4/IPv6]: UFO Scatter-gather approach"

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c547dbf55d5f8cf615ccc0e7265e98db27d3fb8b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_output.c
diff --cc net/ipv6/ip6_output.c
index 8fd53f9ebb4e,975624b8d2ea..000000000000
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@@ -1034,20 -1034,25 +1033,29 @@@ static inline int ip6_ufo_append_data(s
  		/* initialize protocol header pointer */
  		skb->transport_header = skb->network_header + fragheaderlen;
  
++<<<<<<< HEAD
 +		skb->ip_summed = CHECKSUM_PARTIAL;
++=======
+ 		skb->protocol = htons(ETH_P_IPV6);
++>>>>>>> c547dbf55d5f (ip6_output: do skb ufo init for peeked non ufo skb as well)
  		skb->csum = 0;
  
- 		/* Specify the length of each IPv6 datagram fragment.
- 		 * It has to be a multiple of 8.
- 		 */
- 		skb_shinfo(skb)->gso_size = (mtu - fragheaderlen -
- 					     sizeof(struct frag_hdr)) & ~7;
- 		skb_shinfo(skb)->gso_type = SKB_GSO_UDP;
- 		ipv6_select_ident(&fhdr, rt);
- 		skb_shinfo(skb)->ip6_frag_id = fhdr.identification;
  		__skb_queue_tail(&sk->sk_write_queue, skb);
+ 	} else if (skb_is_gso(skb)) {
+ 		goto append;
  	}
  
+ 	skb->ip_summed = CHECKSUM_PARTIAL;
+ 	/* Specify the length of each IPv6 datagram fragment.
+ 	 * It has to be a multiple of 8.
+ 	 */
+ 	skb_shinfo(skb)->gso_size = (mtu - fragheaderlen -
+ 				     sizeof(struct frag_hdr)) & ~7;
+ 	skb_shinfo(skb)->gso_type = SKB_GSO_UDP;
+ 	ipv6_select_ident(&fhdr, rt);
+ 	skb_shinfo(skb)->ip6_frag_id = fhdr.identification;
+ 
+ append:
  	return skb_append_datato_frags(sk, skb, getfrag, from,
  				       (length - transhdrlen));
  }
* Unmerged path net/ipv6/ip6_output.c
