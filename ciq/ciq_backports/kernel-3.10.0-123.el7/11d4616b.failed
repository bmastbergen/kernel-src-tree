futex: revert back to the explicit waiter counting code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit 11d4616bd07f38d496bd489ed8fad1dc4d928823
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/11d4616b.failed

Srikar Dronamraju reports that commit b0c29f79ecea ("futexes: Avoid
taking the hb->lock if there's nothing to wake up") causes java threads
getting stuck on futexes when runing specjbb on a power7 numa box.

The cause appears to be that the powerpc spinlocks aren't using the same
ticket lock model that we use on x86 (and other) architectures, which in
turn result in the "spin_is_locked()" test in hb_waiters_pending()
occasionally reporting an unlocked spinlock even when there are pending
waiters.

So this reinstates Davidlohr Bueso's original explicit waiter counting
code, which I had convinced Davidlohr to drop in favor of figuring out
the pending waiters by just using the existing state of the spinlock and
the wait queue.

Reported-and-tested-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Original-code-by: Davidlohr Bueso <davidlohr@hp.com>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 11d4616bd07f38d496bd489ed8fad1dc4d928823)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/futex.c
diff --cc kernel/futex.c
index 21267342de0e,08ec814ad9d2..000000000000
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@@ -233,11 -234,14 +233,12 @@@ static const struct futex_q futex_q_ini
   * waiting on a futex.
   */
  struct futex_hash_bucket {
+ 	atomic_t waiters;
  	spinlock_t lock;
  	struct plist_head chain;
 -} ____cacheline_aligned_in_smp;
 -
 -static unsigned long __read_mostly futex_hashsize;
 +};
  
 -static struct futex_hash_bucket *futex_queues;
 +static struct futex_hash_bucket futex_queues[1<<FUTEX_HASHBITS];
  
  static inline void futex_get_mm(union futex_key *key)
  {
@@@ -2856,7 -2906,8 +2888,12 @@@ static int __init futex_init(void
  	if (cmpxchg_futex_value_locked(&curval, NULL, 0, 0) == -EFAULT)
  		futex_cmpxchg_enabled = 1;
  
++<<<<<<< HEAD
 +	for (i = 0; i < ARRAY_SIZE(futex_queues); i++) {
++=======
+ 	for (i = 0; i < futex_hashsize; i++) {
+ 		atomic_set(&futex_queues[i].waiters, 0);
++>>>>>>> 11d4616bd07f (futex: revert back to the explicit waiter counting code)
  		plist_head_init(&futex_queues[i].chain);
  		spin_lock_init(&futex_queues[i].lock);
  	}
* Unmerged path kernel/futex.c
