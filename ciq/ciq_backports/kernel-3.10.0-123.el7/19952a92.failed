stackprotector: Unify the HAVE_CC_STACKPROTECTOR logic between architectures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-123.el7
commit-author Kees Cook <keescook@chromium.org>
commit 19952a92037e752f9d3bbbad552d596f9a56e146
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-123.el7/19952a92.failed

Instead of duplicating the CC_STACKPROTECTOR Kconfig and
Makefile logic in each architecture, switch to using
HAVE_CC_STACKPROTECTOR and keep everything in one place. This
retains the x86-specific bug verification scripts.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Cc: Arjan van de Ven <arjan@linux.intel.com>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Russell King <linux@arm.linux.org.uk>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Paul Mundt <lethal@linux-sh.org>
	Cc: James Hogan <james.hogan@imgtec.com>
	Cc: Stephen Rothwell <sfr@canb.auug.org.au>
	Cc: Shawn Guo <shawn.guo@linaro.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-mips@linux-mips.org
	Cc: linux-arch@vger.kernel.org
Link: http://lkml.kernel.org/r/1387481759-14535-2-git-send-email-keescook@chromium.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 19952a92037e752f9d3bbbad552d596f9a56e146)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/Kconfig
#	arch/mips/Kconfig
#	arch/x86/Kconfig
diff --cc arch/arm/Kconfig
index 35ccf19bc387,9c909fc29272..000000000000
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@@ -19,13 -23,14 +19,14 @@@ config AR
  	select GENERIC_STRNCPY_FROM_USER
  	select GENERIC_STRNLEN_USER
  	select HARDIRQS_SW_RESEND
 +	select HAVE_AOUT
  	select HAVE_ARCH_JUMP_LABEL if !XIP_KERNEL
  	select HAVE_ARCH_KGDB
 -	select HAVE_ARCH_SECCOMP_FILTER if (AEABI && !OABI_COMPAT)
 +	select HAVE_ARCH_SECCOMP_FILTER
  	select HAVE_ARCH_TRACEHOOK
  	select HAVE_BPF_JIT
 -	select HAVE_CONTEXT_TRACKING
  	select HAVE_C_RECORDMCOUNT
+ 	select HAVE_CC_STACKPROTECTOR
  	select HAVE_DEBUG_KMEMLEAK
  	select HAVE_DMA_API_DEBUG
  	select HAVE_DMA_ATTRS
@@@ -1793,17 -1857,11 +1794,25 @@@ config SECCOM
  	  and the task is only allowed to execute a few safe syscalls
  	  defined by each seccomp mode.
  
++<<<<<<< HEAD
 +config CC_STACKPROTECTOR
 +	bool "Enable -fstack-protector buffer overflow detection (EXPERIMENTAL)"
 +	help
 +	  This option turns on the -fstack-protector GCC feature. This
 +	  feature puts, at the beginning of functions, a canary value on
 +	  the stack just before the return address, and validates
 +	  the value just before actually returning.  Stack based buffer
 +	  overflows (that need to overwrite this return address) now also
 +	  overwrite the canary, which gets detected and the attack is then
 +	  neutralized via a kernel panic.
 +	  This feature requires gcc version 4.2 or above.
++=======
+ config SWIOTLB
+ 	def_bool y
+ 
+ config IOMMU_HELPER
+ 	def_bool SWIOTLB
++>>>>>>> 19952a92037e (stackprotector: Unify the HAVE_CC_STACKPROTECTOR logic between architectures)
  
  config XEN_DOM0
  	def_bool y
diff --cc arch/mips/Kconfig
index d50a75d6737d,c93d92beb3d6..000000000000
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@@ -42,6 -46,8 +42,11 @@@ config MIP
  	select MODULES_USE_ELF_REL if MODULES
  	select MODULES_USE_ELF_RELA if MODULES && 64BIT
  	select CLONE_BACKWARDS
++<<<<<<< HEAD
++=======
+ 	select HAVE_DEBUG_STACKOVERFLOW
+ 	select HAVE_CC_STACKPROTECTOR
++>>>>>>> 19952a92037e (stackprotector: Unify the HAVE_CC_STACKPROTECTOR logic between architectures)
  
  menu "Machine selection"
  
diff --cc arch/x86/Kconfig
index a673d046c32f,838e7c34dd60..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -121,6 -123,9 +121,12 @@@ config X8
  	select OLD_SIGACTION if X86_32
  	select COMPAT_OLD_SIGACTION if IA32_EMULATION
  	select RTC_LIB
++<<<<<<< HEAD
++=======
+ 	select HAVE_DEBUG_STACKOVERFLOW
+ 	select HAVE_IRQ_EXIT_ON_IRQ_STACK if X86_64
+ 	select HAVE_CC_STACKPROTECTOR
++>>>>>>> 19952a92037e (stackprotector: Unify the HAVE_CC_STACKPROTECTOR logic between architectures)
  
  config INSTRUCTION_DECODER
  	def_bool y
diff --git a/Makefile b/Makefile
index 170ed7c159f4..8c039f53f275 100644
--- a/Makefile
+++ b/Makefile
@@ -592,10 +592,18 @@ ifneq ($(CONFIG_FRAME_WARN),0)
 KBUILD_CFLAGS += $(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})
 endif
 
-# Force gcc to behave correct even for buggy distributions
-ifndef CONFIG_CC_STACKPROTECTOR
-KBUILD_CFLAGS += $(call cc-option, -fno-stack-protector)
+# Handle stack protector mode.
+ifdef CONFIG_CC_STACKPROTECTOR
+  stackp-flag := -fstack-protector
+  ifeq ($(call cc-option, $(stackp-flag)),)
+    $(warning Cannot use CONFIG_CC_STACKPROTECTOR: \
+	      -fstack-protector not supported by compiler))
+  endif
+else
+  # Force off for distro compilers that enable stack protector by default.
+  stackp-flag := $(call cc-option, -fno-stack-protector)
 endif
+KBUILD_CFLAGS += $(stackp-flag)
 
 # This warning generated too much noise in a regular build.
 # Use make W=1 to enable this warning (see scripts/Makefile.build)
diff --git a/arch/Kconfig b/arch/Kconfig
index a4429bcd609e..743dde08b052 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -342,6 +342,28 @@ config SECCOMP_FILTER
 
 	  See Documentation/prctl/seccomp_filter.txt for details.
 
+config HAVE_CC_STACKPROTECTOR
+	bool
+	help
+	  An arch should select this symbol if:
+	  - its compiler supports the -fstack-protector option
+	  - it has implemented a stack canary (e.g. __stack_chk_guard)
+
+config CC_STACKPROTECTOR
+	bool "Enable -fstack-protector buffer overflow detection"
+	depends on HAVE_CC_STACKPROTECTOR
+	help
+	  This option turns on the -fstack-protector GCC feature. This
+	  feature puts, at the beginning of functions, a canary value on
+	  the stack just before the return address, and validates
+	  the value just before actually returning.  Stack based buffer
+	  overflows (that need to overwrite this return address) now also
+	  overwrite the canary, which gets detected and the attack is then
+	  neutralized via a kernel panic.
+
+	  This feature requires gcc version 4.2 or above, or a distribution
+	  gcc with the feature backported.
+
 config HAVE_CONTEXT_TRACKING
 	bool
 	help
* Unmerged path arch/arm/Kconfig
diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 1ba358ba16b8..ae612ebd9fda 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -39,10 +39,6 @@ ifeq ($(CONFIG_FRAME_POINTER),y)
 KBUILD_CFLAGS	+=-fno-omit-frame-pointer -mapcs -mno-sched-prolog
 endif
 
-ifeq ($(CONFIG_CC_STACKPROTECTOR),y)
-KBUILD_CFLAGS	+=-fstack-protector
-endif
-
 ifeq ($(CONFIG_CPU_BIG_ENDIAN),y)
 KBUILD_CPPFLAGS	+= -mbig-endian
 AS		+= -EB
* Unmerged path arch/mips/Kconfig
diff --git a/arch/sh/Kconfig b/arch/sh/Kconfig
index 1020dd85431a..383e997ae89b 100644
--- a/arch/sh/Kconfig
+++ b/arch/sh/Kconfig
@@ -66,6 +66,7 @@ config SUPERH32
 	select PERF_EVENTS
 	select ARCH_HIBERNATION_POSSIBLE if MMU
 	select SPARSE_IRQ
+	select HAVE_CC_STACKPROTECTOR
 
 config SUPERH64
 	def_bool ARCH = "sh64"
@@ -695,20 +696,6 @@ config SECCOMP
 
 	  If unsure, say N.
 
-config CC_STACKPROTECTOR
-	bool "Enable -fstack-protector buffer overflow detection (EXPERIMENTAL)"
-	depends on SUPERH32
-	help
-	  This option turns on the -fstack-protector GCC feature. This
-	  feature puts, at the beginning of functions, a canary value on
-	  the stack just before the return address, and validates
-	  the value just before actually returning.  Stack based buffer
-	  overflows (that need to overwrite this return address) now also
-	  overwrite the canary, which gets detected and the attack is then
-	  neutralized via a kernel panic.
-
-	  This feature requires gcc version 4.2 or above.
-
 config SMP
 	bool "Symmetric multi-processing support"
 	depends on SYS_SUPPORTS_SMP
diff --git a/arch/sh/Makefile b/arch/sh/Makefile
index aed701c7b11b..d4d16e4be07c 100644
--- a/arch/sh/Makefile
+++ b/arch/sh/Makefile
@@ -199,10 +199,6 @@ ifeq ($(CONFIG_DWARF_UNWINDER),y)
   KBUILD_CFLAGS += -fasynchronous-unwind-tables
 endif
 
-ifeq ($(CONFIG_CC_STACKPROTECTOR),y)
-  KBUILD_CFLAGS += -fstack-protector
-endif
-
 libs-$(CONFIG_SUPERH32)		:= arch/sh/lib/	$(libs-y)
 libs-$(CONFIG_SUPERH64)		:= arch/sh/lib64/ $(libs-y)
 
* Unmerged path arch/x86/Kconfig
diff --git a/arch/x86/Makefile b/arch/x86/Makefile
index 5c477260294f..bbb3ff0a1a4a 100644
--- a/arch/x86/Makefile
+++ b/arch/x86/Makefile
@@ -83,13 +83,11 @@ else
         KBUILD_CFLAGS += -maccumulate-outgoing-args
 endif
 
+# Make sure compiler does not have buggy stack-protector support.
 ifdef CONFIG_CC_STACKPROTECTOR
 	cc_has_sp := $(srctree)/scripts/gcc-x86_$(BITS)-has-stack-protector.sh
-        ifeq ($(shell $(CONFIG_SHELL) $(cc_has_sp) $(CC) $(KBUILD_CPPFLAGS) $(biarch)),y)
-                stackp-y := -fstack-protector
-                KBUILD_CFLAGS += $(stackp-y)
-        else
-                $(warning stack protector enabled but no compiler support)
+        ifneq ($(shell $(CONFIG_SHELL) $(cc_has_sp) $(CC) $(KBUILD_CPPFLAGS) $(biarch)),y)
+                $(warning stack-protector enabled but compiler support broken)
         endif
 endif
 
