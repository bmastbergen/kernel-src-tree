ceph: update and rename __update_latency helper to __update_stdev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-348.el8
commit-author Xiubo Li <xiubli@redhat.com>
commit fc123d5f504bfb26d5947c68c5eb1b164d069509
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-348.el8/fc123d5f.failed

The new __update_stdev() helper will only compute the standard
deviation.

	Signed-off-by: Xiubo Li <xiubli@redhat.com>
	Reviewed-by: Jeff Layton <jlayton@kernel.org>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit fc123d5f504bfb26d5947c68c5eb1b164d069509)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/metric.c
diff --cc fs/ceph/metric.c
index e22b4d3c2729,afa5b1f8730f..000000000000
--- a/fs/ceph/metric.c
+++ b/fs/ceph/metric.c
@@@ -320,14 -320,18 +320,26 @@@ void ceph_update_read_latency(struct ce
  	if (unlikely(rc < 0 && rc != -ENOENT && rc != -ETIMEDOUT))
  		return;
  
++<<<<<<< HEAD
 +	spin_lock(&m->read_latency_lock);
 +	__update_latency(&m->total_reads, &m->read_latency_sum,
 +			 &m->read_latency_min, &m->read_latency_max,
 +			 &m->read_latency_sq_sum, lat);
 +	spin_unlock(&m->read_latency_lock);
++=======
+ 	spin_lock(&m->read_metric_lock);
+ 	total = ++m->total_reads;
+ 	m->read_latency_sum += lat;
+ 	METRIC_UPDATE_MIN_MAX(m->read_latency_min,
+ 			      m->read_latency_max,
+ 			      lat);
+ 	__update_stdev(total, m->read_latency_sum,
+ 		       &m->read_latency_sq_sum, lat);
+ 	spin_unlock(&m->read_metric_lock);
++>>>>>>> fc123d5f504b (ceph: update and rename __update_latency helper to __update_stdev)
  }
  
 -void ceph_update_write_metrics(struct ceph_client_metric *m,
 +void ceph_update_write_latency(struct ceph_client_metric *m,
  			       ktime_t r_start, ktime_t r_end,
  			       int rc)
  {
@@@ -336,14 -341,18 +349,26 @@@
  	if (unlikely(rc && rc != -ETIMEDOUT))
  		return;
  
++<<<<<<< HEAD
 +	spin_lock(&m->write_latency_lock);
 +	__update_latency(&m->total_writes, &m->write_latency_sum,
 +			 &m->write_latency_min, &m->write_latency_max,
 +			 &m->write_latency_sq_sum, lat);
 +	spin_unlock(&m->write_latency_lock);
++=======
+ 	spin_lock(&m->write_metric_lock);
+ 	total = ++m->total_writes;
+ 	m->write_latency_sum += lat;
+ 	METRIC_UPDATE_MIN_MAX(m->write_latency_min,
+ 			      m->write_latency_max,
+ 			      lat);
+ 	__update_stdev(total, m->write_latency_sum,
+ 		       &m->write_latency_sq_sum, lat);
+ 	spin_unlock(&m->write_metric_lock);
++>>>>>>> fc123d5f504b (ceph: update and rename __update_latency helper to __update_stdev)
  }
  
 -void ceph_update_metadata_metrics(struct ceph_client_metric *m,
 +void ceph_update_metadata_latency(struct ceph_client_metric *m,
  				  ktime_t r_start, ktime_t r_end,
  				  int rc)
  {
@@@ -352,9 -362,13 +378,21 @@@
  	if (unlikely(rc && rc != -ENOENT))
  		return;
  
++<<<<<<< HEAD
 +	spin_lock(&m->metadata_latency_lock);
 +	__update_latency(&m->total_metadatas, &m->metadata_latency_sum,
 +			 &m->metadata_latency_min, &m->metadata_latency_max,
 +			 &m->metadata_latency_sq_sum, lat);
 +	spin_unlock(&m->metadata_latency_lock);
++=======
+ 	spin_lock(&m->metadata_metric_lock);
+ 	total = ++m->total_metadatas;
+ 	m->metadata_latency_sum += lat;
+ 	METRIC_UPDATE_MIN_MAX(m->metadata_latency_min,
+ 			      m->metadata_latency_max,
+ 			      lat);
+ 	__update_stdev(total, m->metadata_latency_sum,
+ 		       &m->metadata_latency_sq_sum, lat);
+ 	spin_unlock(&m->metadata_metric_lock);
++>>>>>>> fc123d5f504b (ceph: update and rename __update_latency helper to __update_stdev)
  }
* Unmerged path fs/ceph/metric.c
