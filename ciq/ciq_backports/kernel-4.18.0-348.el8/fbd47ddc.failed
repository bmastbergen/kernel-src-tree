ceph: avoid counting the same request twice or more

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-348.el8
commit-author Xiubo Li <xiubli@redhat.com>
commit fbd47ddc5e887571ee39f0d6b47c6155f2257f55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-348.el8/fbd47ddc.failed

If the request will retry, skip updating the latency metric.

	Signed-off-by: Xiubo Li <xiubli@redhat.com>
	Reviewed-by: Jeff Layton <jlayton@kernel.org>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit fbd47ddc5e887571ee39f0d6b47c6155f2257f55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/file.c
diff --cc fs/ceph/file.c
index cf129fd96e84,31542eac7e59..000000000000
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@@ -1039,16 -1037,6 +1039,19 @@@ static void ceph_aio_complete_req(struc
  	dout("ceph_aio_complete_req %p rc %d bytes %u\n",
  	     inode, rc, osd_data->bvec_pos.iter.bi_size);
  
++<<<<<<< HEAD
 +	/* r_start_latency == 0 means the request was not submitted */
 +	if (req->r_start_latency) {
 +		if (aio_req->write)
 +			ceph_update_write_latency(metric, req->r_start_latency,
 +						  req->r_end_latency, rc);
 +		else
 +			ceph_update_read_latency(metric, req->r_start_latency,
 +						 req->r_end_latency, rc);
 +	}
 +
++=======
++>>>>>>> fbd47ddc5e88 (ceph: avoid counting the same request twice or more)
  	if (rc == -EOLDSNAPC) {
  		struct ceph_aio_work *aio_work;
  		BUG_ON(!aio_req->write);
* Unmerged path fs/ceph/file.c
