xen/x86: don't lose event interrupts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.105.1.el7
commit-author Stefano Stabellini <sstabellini@kernel.org>
commit c06b6d70feb32d28f04ba37aa3df17973fd37b6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.105.1.el7/c06b6d70.failed

On slow platforms with unreliable TSC, such as QEMU emulated machines,
it is possible for the kernel to request the next event in the past. In
that case, in the current implementation of xen_vcpuop_clockevent, we
simply return -ETIME. To be precise the Xen returns -ETIME and we pass
it on. However the result of this is a missed event, which simply causes
the kernel to hang.

Instead it is better to always ask the hypervisor for a timer event,
even if the timeout is in the past. That way there are no lost
interrupts and the kernel survives. To do that, remove the
VCPU_SSHOTTMR_future flag.

	Signed-off-by: Stefano Stabellini <sstabellini@kernel.org>
	Acked-by: Juergen Gross <jgross@suse.com>
(cherry picked from commit c06b6d70feb32d28f04ba37aa3df17973fd37b6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/xen/time.c
diff --cc arch/x86/xen/time.c
index c7d8ceea71bb,6deba5bc7e34..000000000000
--- a/arch/x86/xen/time.c
+++ b/arch/x86/xen/time.c
@@@ -360,15 -287,14 +360,21 @@@ static int xen_vcpuop_set_next_event(un
  	struct vcpu_set_singleshot_timer single;
  	int ret;
  
 -	WARN_ON(!clockevent_state_oneshot(evt));
 +	WARN_ON(evt->mode != CLOCK_EVT_MODE_ONESHOT);
  
  	single.timeout_abs_ns = get_abs_timeout(delta);
- 	single.flags = VCPU_SSHOTTMR_future;
+ 	/* Get an event anyway, even if the timeout is already expired */
+ 	single.flags = 0;
  
++<<<<<<< HEAD
 +	ret = HYPERVISOR_vcpu_op(VCPUOP_set_singleshot_timer, xen_vcpu_nr(cpu),
 +				 &single);
 +
 +	BUG_ON(ret != 0 && ret != -ETIME);
++=======
+ 	ret = HYPERVISOR_vcpu_op(VCPUOP_set_singleshot_timer, cpu, &single);
+ 	BUG_ON(ret != 0);
++>>>>>>> c06b6d70feb3 (xen/x86: don't lose event interrupts)
  
  	return ret;
  }
* Unmerged path arch/x86/xen/time.c
