net/sched: cls_fw: No longer copy tcf_result on update to avoid use-after-free

jira LE-1907
cve CVE-2023-4128
Rebuild_History Non-Buildable kernel-3.10.0-1160.105.1.el7
commit-author valis <sec@valis.email>
commit 76e42ae831991c828cffa8c37736ebfb831ad5ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.105.1.el7/76e42ae8.failed

When fw_change() is called on an existing filter, the whole
tcf_result struct is always copied into the new instance of the filter.

This causes a problem when updating a filter bound to a class,
as tcf_unbind_filter() is always called on the old instance in the
success path, decreasing filter_cnt of the still referenced class
and allowing it to be deleted, leading to a use-after-free.

Fix this by no longer copying the tcf_result struct from the old filter.

Fixes: e35a8ee5993b ("net: sched: fw use RCU")
	Reported-by: valis <sec@valis.email>
	Reported-by: Bing-Jhong Billy Jheng <billy@starlabs.sg>
	Signed-off-by: valis <sec@valis.email>
	Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Reviewed-by: Victor Nogueira <victor@mojatatu.com>
	Reviewed-by: Pedro Tammela <pctammela@mojatatu.com>
	Reviewed-by: M A Ramdhan <ramdhan@starlabs.sg>
Link: https://lore.kernel.org/r/20230729123202.72406-3-jhs@mojatatu.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 76e42ae831991c828cffa8c37736ebfb831ad5ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_fw.c
diff --cc net/sched/cls_fw.c
index e05043266620,c49d6af0e048..000000000000
--- a/net/sched/cls_fw.c
+++ b/net/sched/cls_fw.c
@@@ -274,13 -267,11 +274,16 @@@ static int fw_change(struct net *net, s
  			return -ENOBUFS;
  
  		fnew->id = f->id;
++<<<<<<< HEAD
 +		fnew->res = f->res;
 +#ifdef CONFIG_NET_CLS_IND
++=======
++>>>>>>> 76e42ae83199 (net/sched: cls_fw: No longer copy tcf_result on update to avoid use-after-free)
  		fnew->ifindex = f->ifindex;
 +#endif /* CONFIG_NET_CLS_IND */
  		fnew->tp = f->tp;
  
 -		err = tcf_exts_init(&fnew->exts, net, TCA_FW_ACT,
 -				    TCA_FW_POLICE);
 +		err = tcf_exts_init(&fnew->exts, TCA_FW_ACT, TCA_FW_POLICE);
  		if (err < 0) {
  			kfree(fnew);
  			return err;
* Unmerged path net/sched/cls_fw.c
