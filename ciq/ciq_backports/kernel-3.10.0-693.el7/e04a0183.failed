net/mlx5: Consolidate flow rules regardless their flow tag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Consolidate flow rules regardless their flow tag (Kamal Heib) [1386747]
Rebuild_FUZZ: 96.43%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit e04a01837729663572baf7164100e28265de7ed8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e04a0183.failed

Flow rules with same match criteria and value should be mapped to
the same flow table entry regardless the flow tag identifier.

Flow tag is part of flow table entry context and not of the
destination, therefore we should return error when we try to add
destination to flow table entry with different flow tag.

	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit e04a01837729663572baf7164100e28265de7ed8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index b32d85f4e0ff,2f4eb99a50fa..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -1050,20 -1232,22 +1050,39 @@@ static struct mlx5_flow_rule *add_rule_
  	fs_for_each_fte(fte, fg) {
  		nested_lock_ref_node(&fte->node, FS_MUTEX_CHILD);
  		if (compare_match_value(&fg->mask, match_value, &fte->val) &&
++<<<<<<< HEAD
 +		    (action & fte->action) && flow_tag == fte->flow_tag) {
 +			int old_action = fte->action;
 +
 +			rule = find_flow_rule(fte, dest);
 +			if (rule) {
 +				atomic_inc(&rule->node.refcount);
 +				unlock_ref_node(&fte->node);
 +				unlock_ref_node(&fg->node);
 +				return rule;
 +			}
 +			fte->action |= action;
 +			rule = add_rule_fte(fte, fg, dest,
 +					    old_action != action);
 +			if (IS_ERR(rule)) {
++=======
+ 		    (flow_act->action & fte->action)) {
+ 			int old_action = fte->action;
+ 
+ 			if (fte->flow_tag != flow_act->flow_tag) {
+ 				mlx5_core_warn(get_dev(&fte->node),
+ 					       "FTE flow tag %u already exists with different flow tag %u\n",
+ 					       fte->flow_tag,
+ 					       flow_act->flow_tag);
+ 				handle = ERR_PTR(-EEXIST);
+ 				goto unlock_fte;
+ 			}
+ 
+ 			fte->action |= flow_act->action;
+ 			handle = add_rule_fte(fte, fg, dest, dest_num,
+ 					      old_action != flow_act->action);
+ 			if (IS_ERR(handle)) {
++>>>>>>> e04a01837729 (net/mlx5: Consolidate flow rules regardless their flow tag)
  				fte->action = old_action;
  				goto unlock_fte;
  			} else {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
