bonding: implement lower state change propagation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Pirko <jiri@mellanox.com>
commit f7c7eb7f7af7f87e0fc150994785fd139576e43a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f7c7eb7f.failed

Let netdev notifier listeners know about link and slave state change.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f7c7eb7f7af7f87e0fc150994785fd139576e43a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bonding.h
diff --cc include/net/bonding.h
index 6929cd9f708a,ee6c52053aa3..000000000000
--- a/include/net/bonding.h
+++ b/include/net/bonding.h
@@@ -549,10 -510,37 +554,37 @@@ static inline bool bond_is_slave_inacti
  	return slave->inactive;
  }
  
 -static inline void bond_set_slave_link_state(struct slave *slave, int state,
 -					     bool notify)
 +static inline void bond_set_slave_link_state(struct slave *slave, int state)
  {
 -	if (slave->link == state)
 -		return;
 -
  	slave->link = state;
++<<<<<<< HEAD
 +	bond_queue_slave_event(slave);
++=======
+ 	if (notify) {
+ 		bond_queue_slave_event(slave);
+ 		bond_lower_state_changed(slave);
+ 		slave->should_notify_link = 0;
+ 	} else {
+ 		if (slave->should_notify_link)
+ 			slave->should_notify_link = 0;
+ 		else
+ 			slave->should_notify_link = 1;
+ 	}
+ }
+ 
+ static inline void bond_slave_link_notify(struct bonding *bond)
+ {
+ 	struct list_head *iter;
+ 	struct slave *tmp;
+ 
+ 	bond_for_each_slave(bond, tmp, iter) {
+ 		if (tmp->should_notify_link) {
+ 			bond_queue_slave_event(tmp);
+ 			bond_lower_state_changed(tmp);
+ 			tmp->should_notify_link = 0;
+ 		}
+ 	}
++>>>>>>> f7c7eb7f7af7 (bonding: implement lower state change propagation)
  }
  
  static inline __be32 bond_confirm_addr(struct net_device *dev, __be32 dst, __be32 local)
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index ce8e9750aae0..f9307eb753db 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -1296,6 +1296,16 @@ void bond_queue_slave_event(struct slave *slave)
 	queue_delayed_work(slave->bond->wq, &nnw->work, 0);
 }
 
+void bond_lower_state_changed(struct slave *slave)
+{
+	struct netdev_lag_lower_state_info info;
+
+	info.link_up = slave->link == BOND_LINK_UP ||
+		       slave->link == BOND_LINK_FAIL;
+	info.tx_enabled = bond_is_active_slave(slave);
+	netdev_lower_state_changed(slave->dev, &info);
+}
+
 /* enslave device <slave> to bond device <master> */
 int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)
 {
* Unmerged path include/net/bonding.h
