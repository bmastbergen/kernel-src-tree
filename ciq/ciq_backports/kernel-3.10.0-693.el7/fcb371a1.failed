drm/nouveau/fb/gf100-: modify constructors to allow more customisation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [drm] nouveau/fb/gf100-: modify constructors to allow more customisation (Ben Skeggs) [1371629]
Rebuild_FUZZ: 97.06%
commit-author Ben Skeggs <bskeggs@redhat.com>
commit fcb371a1d5fc7def715227f74dfcb9be73a597e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/fcb371a1.failed

GF108/GM107 implementations will want slightly different functions for
the upcoming RAM detection improvements.

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit fcb371a1d5fc7def715227f74dfcb9be73a597e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/subdev/fb/ram.h
#	drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgk104.c
#	drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgm107.c
diff --cc drivers/gpu/drm/nouveau/nvkm/subdev/fb/ram.h
index f816cbf2ced3,9eded69163e3..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ram.h
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ram.h
@@@ -23,8 -25,18 +25,22 @@@ int  gf100_ram_ctor(const struct nvkm_r
  		    u32, struct nvkm_ram *);
  int  gf100_ram_get(struct nvkm_ram *, u64, u32, u32, u32, struct nvkm_mem **);
  void gf100_ram_put(struct nvkm_ram *, struct nvkm_mem **);
+ int gf100_ram_init(struct nvkm_ram *);
+ int gf100_ram_calc(struct nvkm_ram *, u32);
+ int gf100_ram_prog(struct nvkm_ram *);
+ void gf100_ram_tidy(struct nvkm_ram *);
  
++<<<<<<< HEAD
 +int  gk104_ram_init(struct nvkm_ram *ram);
++=======
+ int gk104_ram_new_(const struct nvkm_ram_func *, struct nvkm_fb *,
+ 		   struct nvkm_ram **, u32);
+ void *gk104_ram_dtor(struct nvkm_ram *);
+ int gk104_ram_init(struct nvkm_ram *);
+ int gk104_ram_calc(struct nvkm_ram *, u32);
+ int gk104_ram_prog(struct nvkm_ram *);
+ void gk104_ram_tidy(struct nvkm_ram *);
++>>>>>>> fcb371a1d5fc (drm/nouveau/fb/gf100-: modify constructors to allow more customisation)
  
  /* RAM type-specific MR calculation routines */
  int nvkm_sddr2_calc(struct nvkm_ram *);
diff --cc drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgk104.c
index 1fa3ade468ae,2575d6c370a8..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgk104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgk104.c
@@@ -1516,19 -1522,9 +1516,13 @@@ gk104_ram_dtor(struct nvkm_ram *base
  	return ram;
  }
  
- static const struct nvkm_ram_func
- gk104_ram_func = {
- 	.dtor = gk104_ram_dtor,
- 	.init = gk104_ram_init,
- 	.get = gf100_ram_get,
- 	.put = gf100_ram_put,
- 	.calc = gk104_ram_calc,
- 	.prog = gk104_ram_prog,
- 	.tidy = gk104_ram_tidy,
- };
- 
  int
++<<<<<<< HEAD
 +gk104_ram_new(struct nvkm_fb *fb, struct nvkm_ram **pram)
++=======
+ gk104_ram_new_(const struct nvkm_ram_func *func, struct nvkm_fb *fb,
+ 	       struct nvkm_ram **pram, u32 maskaddr)
++>>>>>>> fcb371a1d5fc (drm/nouveau/fb/gf100-: modify constructors to allow more customisation)
  {
  	struct nvkm_subdev *subdev = &fb->subdev;
  	struct nvkm_device *device = subdev->device;
@@@ -1544,7 -1539,7 +1537,11 @@@
  		return -ENOMEM;
  	*pram = &ram->base;
  
++<<<<<<< HEAD
 +	ret = gf100_ram_ctor(&gk104_ram_func, fb, 0x022554, &ram->base);
++=======
+ 	ret = gf100_ram_ctor(func, fb, maskaddr, &ram->base);
++>>>>>>> fcb371a1d5fc (drm/nouveau/fb/gf100-: modify constructors to allow more customisation)
  	if (ret)
  		return ret;
  
diff --cc drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgm107.c
index 43d807f6ca71,af5a97a9061e..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgm107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgm107.c
@@@ -24,17 -24,18 +24,32 @@@
  #include "ram.h"
  
  static const struct nvkm_ram_func
++<<<<<<< HEAD
 +gm107_ram_func = {
 +	.init = gk104_ram_init,
 +	.get = gf100_ram_get,
 +	.put = gf100_ram_put,
++=======
+ gm107_ram = {
+ 	.dtor = gk104_ram_dtor,
+ 	.init = gk104_ram_init,
+ 	.get = gf100_ram_get,
+ 	.put = gf100_ram_put,
+ 	.calc = gk104_ram_calc,
+ 	.prog = gk104_ram_prog,
+ 	.tidy = gk104_ram_tidy,
++>>>>>>> fcb371a1d5fc (drm/nouveau/fb/gf100-: modify constructors to allow more customisation)
  };
  
  int
  gm107_ram_new(struct nvkm_fb *fb, struct nvkm_ram **pram)
  {
++<<<<<<< HEAD
 +	if (!(*pram = kzalloc(sizeof(**pram), GFP_KERNEL)))
 +		return -ENOMEM;
 +
 +	return gf100_ram_ctor(&gm107_ram_func, fb, 0x021c14, *pram);
++=======
+ 	return gk104_ram_new_(&gm107_ram, fb, pram, 0x021c14);
++>>>>>>> fcb371a1d5fc (drm/nouveau/fb/gf100-: modify constructors to allow more customisation)
  }
* Unmerged path drivers/gpu/drm/nouveau/nvkm/subdev/fb/ram.h
diff --git a/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgf100.c b/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgf100.c
index 772425ca5a9e..7a0dda9da984 100644
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgf100.c
@@ -124,7 +124,7 @@ gf100_ram_train(struct gf100_ramfuc *fuc, u32 magic)
 	}
 }
 
-static int
+int
 gf100_ram_calc(struct nvkm_ram *base, u32 freq)
 {
 	struct gf100_ram *ram = gf100_ram(base);
@@ -404,7 +404,7 @@ gf100_ram_calc(struct nvkm_ram *base, u32 freq)
 	return 0;
 }
 
-static int
+int
 gf100_ram_prog(struct nvkm_ram *base)
 {
 	struct gf100_ram *ram = gf100_ram(base);
@@ -413,7 +413,7 @@ gf100_ram_prog(struct nvkm_ram *base)
 	return 0;
 }
 
-static void
+void
 gf100_ram_tidy(struct nvkm_ram *base)
 {
 	struct gf100_ram *ram = gf100_ram(base);
@@ -502,7 +502,7 @@ gf100_ram_get(struct nvkm_ram *ram, u64 size, u32 align, u32 ncmin,
 	return 0;
 }
 
-static int
+int
 gf100_ram_init(struct nvkm_ram *base)
 {
 	static const u8  train0[] = {
@@ -545,16 +545,6 @@ gf100_ram_init(struct nvkm_ram *base)
 	return 0;
 }
 
-static const struct nvkm_ram_func
-gf100_ram_func = {
-	.init = gf100_ram_init,
-	.get = gf100_ram_get,
-	.put = gf100_ram_put,
-	.calc = gf100_ram_calc,
-	.prog = gf100_ram_prog,
-	.tidy = gf100_ram_tidy,
-};
-
 int
 gf100_ram_ctor(const struct nvkm_ram_func *func, struct nvkm_fb *fb,
 	       u32 maskaddr, struct nvkm_ram *ram)
@@ -626,7 +616,8 @@ gf100_ram_ctor(const struct nvkm_ram_func *func, struct nvkm_fb *fb,
 }
 
 int
-gf100_ram_new(struct nvkm_fb *fb, struct nvkm_ram **pram)
+gf100_ram_new_(const struct nvkm_ram_func *func,
+	       struct nvkm_fb *fb, struct nvkm_ram **pram)
 {
 	struct nvkm_subdev *subdev = &fb->subdev;
 	struct nvkm_bios *bios = subdev->device->bios;
@@ -637,7 +628,7 @@ gf100_ram_new(struct nvkm_fb *fb, struct nvkm_ram **pram)
 		return -ENOMEM;
 	*pram = &ram->base;
 
-	ret = gf100_ram_ctor(&gf100_ram_func, fb, 0x022554, &ram->base);
+	ret = gf100_ram_ctor(func, fb, 0x022554, &ram->base);
 	if (ret)
 		return ret;
 
@@ -713,3 +704,19 @@ gf100_ram_new(struct nvkm_fb *fb, struct nvkm_ram **pram)
 	ram->fuc.r_0x13d8f4 = ramfuc_reg(0x13d8f4);
 	return 0;
 }
+
+static const struct nvkm_ram_func
+gf100_ram = {
+	.init = gf100_ram_init,
+	.get = gf100_ram_get,
+	.put = gf100_ram_put,
+	.calc = gf100_ram_calc,
+	.prog = gf100_ram_prog,
+	.tidy = gf100_ram_tidy,
+};
+
+int
+gf100_ram_new(struct nvkm_fb *fb, struct nvkm_ram **pram)
+{
+	return gf100_ram_new_(&gf100_ram, fb, pram);
+}
* Unmerged path drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgk104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/subdev/fb/ramgm107.c
