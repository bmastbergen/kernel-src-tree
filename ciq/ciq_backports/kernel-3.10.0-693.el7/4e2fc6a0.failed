ACPICA: Clib/EFI: Fix wrong order of standard integer types/IO handles

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit 4e2fc6a0aa0a18403ccdcd46d7ed9f624845772b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4e2fc6a0.failed

ACPICA commit 7f9b359b7c78c69b07f62eb2d58f710c351fd75d

EFI header should use standard C library stuffs (integer types and IO
handles) rather than implementing such standard stuffs.
This patch fixes this issue by:
1. Implementing standard integer types for ACPI_USE_STANDARD_HADERS=n;
2. Defining EFI types using standard integer types and standard IO handles;
3. Tuning header inclusion order and environment definition order;
4. Removing wrong standard header inclusion from ACPICA core files;
5. Moving several application headers from acpidump.h to acenv.h.
This patch corrects some of them. Lv Zheng.

Except some harmless header inclusion re-ordering, Linux kernel is not
affected by this change.

Link: https://github.com/acpica/acpica/commit/7f9b359b
Link: https://bugs.acpica.org/show_bug.cgi?id=1300
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 4e2fc6a0aa0a18403ccdcd46d7ed9f624845772b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpica/acapps.h
#	include/acpi/platform/acenv.h
#	include/acpi/platform/acenvex.h
#	tools/power/acpi/tools/acpidump/acpidump.h
diff --cc include/acpi/platform/acenv.h
index 5211e9663d36,1e2fe9501c16..000000000000
--- a/include/acpi/platform/acenv.h
+++ b/include/acpi/platform/acenv.h
@@@ -178,12 -209,20 +178,29 @@@
  #elif defined(__OS2__)
  #include "acos2.h"
  
++<<<<<<< HEAD
 +#elif defined(_AED_EFI)
 +#include "acefi.h"
 +
 +#elif defined(__HAIKU__)
 +#include "achaiku.h"
 +
++=======
+ #elif defined(__HAIKU__)
+ #include "achaiku.h"
+ 
+ #elif defined(__QNX__)
+ #include "acqnx.h"
+ 
+ /*
+  * EFI applications can be built with -nostdlib, in this case, it must be
+  * included after including all other host environmental definitions, in
+  * order to override the definitions.
+  */
+ #elif defined(_AED_EFI) || defined(_GNU_EFI)
+ #include "acefi.h"
+ 
++>>>>>>> 4e2fc6a0aa0a (ACPICA: Clib/EFI: Fix wrong order of standard integer types/IO handles)
  #else
  
  /* Unknown environment */
@@@ -311,93 -355,18 +334,94 @@@
  
  #endif				/* ACPI_USE_STANDARD_HEADERS */
  
++<<<<<<< HEAD
 +/* We will be linking to the standard Clib functions */
 +
 +#define ACPI_STRSTR(s1,s2)      strstr((s1), (s2))
 +#define ACPI_STRCHR(s1,c)       strchr((s1), (c))
 +#define ACPI_STRLEN(s)          (acpi_size) strlen((s))
 +#define ACPI_STRCPY(d,s)        (void) strcpy((d), (s))
 +#define ACPI_STRNCPY(d,s,n)     (void) strncpy((d), (s), (acpi_size)(n))
 +#define ACPI_STRNCMP(d,s,n)     strncmp((d), (s), (acpi_size)(n))
 +#define ACPI_STRCMP(d,s)        strcmp((d), (s))
 +#define ACPI_STRCAT(d,s)        (void) strcat((d), (s))
 +#define ACPI_STRNCAT(d,s,n)     strncat((d), (s), (acpi_size)(n))
 +#define ACPI_STRTOUL(d,s,n)     strtoul((d), (s), (acpi_size)(n))
 +#define ACPI_MEMCMP(s1,s2,n)    memcmp((const char *)(s1), (const char *)(s2), (acpi_size)(n))
 +#define ACPI_MEMCPY(d,s,n)      (void) memcpy((d), (s), (acpi_size)(n))
 +#define ACPI_MEMSET(d,s,n)      (void) memset((d), (s), (acpi_size)(n))
 +
 +#define ACPI_TOUPPER(i)         toupper((int) (i))
 +#define ACPI_TOLOWER(i)         tolower((int) (i))
 +#define ACPI_IS_XDIGIT(i)       isxdigit((int) (i))
 +#define ACPI_IS_DIGIT(i)        isdigit((int) (i))
 +#define ACPI_IS_SPACE(i)        isspace((int) (i))
 +#define ACPI_IS_UPPER(i)        isupper((int) (i))
 +#define ACPI_IS_PRINT(i)        isprint((int) (i))
 +#define ACPI_IS_ALPHA(i)        isalpha((int) (i))
 +
 +#else
 +
 +/******************************************************************************
 + *
 + * Not using native C library, use local implementations
 + *
 + *****************************************************************************/
 +
 +/*
 + * Use local definitions of C library macros and functions. These function
 + * implementations may not be as efficient as an inline or assembly code
 + * implementation provided by a native C library, but they are functionally
 + * equivalent.
 + */
 +#ifndef va_arg
 +
 +#ifndef _VALIST
 +#define _VALIST
 +typedef char *va_list;
 +#endif				/* _VALIST */
 +
 +/* Storage alignment properties */
 +
 +#define  _AUPBND                (sizeof (acpi_native_int) - 1)
 +#define  _ADNBND                (sizeof (acpi_native_int) - 1)
 +
 +/* Variable argument list macro definitions */
 +
 +#define _bnd(X, bnd)            (((sizeof (X)) + (bnd)) & (~(bnd)))
 +#define va_arg(ap, T)           (*(T *)(((ap) += (_bnd (T, _AUPBND))) - (_bnd (T,_ADNBND))))
 +#define va_end(ap)              (ap = (va_list) NULL)
 +#define va_start(ap, A)         (void) ((ap) = (((char *) &(A)) + (_bnd (A,_AUPBND))))
 +
 +#endif				/* va_arg */
 +
 +/* Use the local (ACPICA) definitions of the clib functions */
 +
 +#define ACPI_STRSTR(s1,s2)      acpi_ut_strstr ((s1), (s2))
 +#define ACPI_STRCHR(s1,c)       acpi_ut_strchr ((s1), (c))
 +#define ACPI_STRLEN(s)          (acpi_size) acpi_ut_strlen ((s))
 +#define ACPI_STRCPY(d,s)        (void) acpi_ut_strcpy ((d), (s))
 +#define ACPI_STRNCPY(d,s,n)     (void) acpi_ut_strncpy ((d), (s), (acpi_size)(n))
 +#define ACPI_STRNCMP(d,s,n)     acpi_ut_strncmp ((d), (s), (acpi_size)(n))
 +#define ACPI_STRCMP(d,s)        acpi_ut_strcmp ((d), (s))
 +#define ACPI_STRCAT(d,s)        (void) acpi_ut_strcat ((d), (s))
 +#define ACPI_STRNCAT(d,s,n)     acpi_ut_strncat ((d), (s), (acpi_size)(n))
 +#define ACPI_STRTOUL(d,s,n)     acpi_ut_strtoul ((d), (s), (acpi_size)(n))
 +#define ACPI_MEMCMP(s1,s2,n)    acpi_ut_memcmp((const char *)(s1), (const char *)(s2), (acpi_size)(n))
 +#define ACPI_MEMCPY(d,s,n)      (void) acpi_ut_memcpy ((d), (s), (acpi_size)(n))
 +#define ACPI_MEMSET(d,v,n)      (void) acpi_ut_memset ((d), (v), (acpi_size)(n))
 +#define ACPI_TOUPPER(c)         acpi_ut_to_upper ((int) (c))
 +#define ACPI_TOLOWER(c)         acpi_ut_to_lower ((int) (c))
 +
 +#endif				/* ACPI_USE_SYSTEM_CLIBRARY */
 +
 +#ifndef ACPI_FILE
++=======
++>>>>>>> 4e2fc6a0aa0a (ACPICA: Clib/EFI: Fix wrong order of standard integer types/IO handles)
  #ifdef ACPI_APPLICATION
- #include <stdio.h>
  #define ACPI_FILE              FILE *
 -#define ACPI_FILE_OUT          stdout
 -#define ACPI_FILE_ERR          stderr
  #else
  #define ACPI_FILE              void *
 -#define ACPI_FILE_OUT          NULL
 -#define ACPI_FILE_ERR          NULL
  #endif				/* ACPI_APPLICATION */
- #endif				/* ACPI_FILE */
  
 -#ifndef ACPI_INIT_FUNCTION
 -#define ACPI_INIT_FUNCTION
 -#endif
 -
  #endif				/* __ACENV_H__ */
* Unmerged path drivers/acpi/acpica/acapps.h
* Unmerged path include/acpi/platform/acenvex.h
* Unmerged path tools/power/acpi/tools/acpidump/acpidump.h
* Unmerged path drivers/acpi/acpica/acapps.h
diff --git a/drivers/acpi/acpica/utpredef.c b/drivers/acpi/acpica/utpredef.c
index 2b1ce4cd3207..88b3a33ec39b 100644
--- a/drivers/acpi/acpica/utpredef.c
+++ b/drivers/acpi/acpica/utpredef.c
@@ -176,8 +176,6 @@ void acpi_ut_get_expected_return_types(char *buffer, u32 expected_btypes)
  ******************************************************************************/
 
 #if (defined ACPI_ASL_COMPILER || defined ACPI_HELP_APP)
-#include <stdio.h>
-#include <string.h>
 
 /* Local prototypes */
 
* Unmerged path include/acpi/platform/acenv.h
* Unmerged path include/acpi/platform/acenvex.h
diff --git a/tools/power/acpi/common/cmfsize.c b/tools/power/acpi/common/cmfsize.c
index 5140e5edae1f..b7e3fa41a77d 100644
--- a/tools/power/acpi/common/cmfsize.c
+++ b/tools/power/acpi/common/cmfsize.c
@@ -44,7 +44,6 @@
 #include <acpi/acpi.h>
 #include "accommon.h"
 #include "acapps.h"
-#include <stdio.h>
 
 #define _COMPONENT          ACPI_TOOLS
 ACPI_MODULE_NAME("cmfsize")
* Unmerged path tools/power/acpi/tools/acpidump/acpidump.h
