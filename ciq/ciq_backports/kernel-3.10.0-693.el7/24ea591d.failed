net: sched: extend percpu stats helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: extend percpu stats helpers (Ivan Vecera) [1428588]
Rebuild_FUZZ: 93.15%
commit-author Eric Dumazet <edumazet@google.com>
commit 24ea591d2201c3257d666466e8fac50a6cf3c52f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/24ea591d.failed

qdisc_bstats_update_cpu() and other helpers were added to support
percpu stats for qdisc.

We want to add percpu stats for tc action, so this patch add common
helpers.

qdisc_bstats_update_cpu() is renamed to qdisc_bstats_cpu_update()
qdisc_qstats_drop_cpu() is renamed to qdisc_qstats_cpu_drop()

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Alexei Starovoitov <ast@plumgrid.com>
	Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Alexei Starovoitov <ast@plumgrid.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 24ea591d2201c3257d666466e8fac50a6cf3c52f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sch_generic.h
#	net/core/dev.c
diff --cc include/net/sch_generic.h
index 96bed6f81e99,2eab08c38e32..000000000000
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@@ -513,6 -513,20 +513,23 @@@ static inline void bstats_update(struc
  	bstats->packets += skb_is_gso(skb) ? skb_shinfo(skb)->gso_segs : 1;
  }
  
++<<<<<<< HEAD
++=======
+ static inline void bstats_cpu_update(struct gnet_stats_basic_cpu *bstats,
+ 				     const struct sk_buff *skb)
+ {
+ 	u64_stats_update_begin(&bstats->syncp);
+ 	bstats_update(&bstats->bstats, skb);
+ 	u64_stats_update_end(&bstats->syncp);
+ }
+ 
+ static inline void qdisc_bstats_cpu_update(struct Qdisc *sch,
+ 					   const struct sk_buff *skb)
+ {
+ 	bstats_cpu_update(this_cpu_ptr(sch->cpu_bstats), skb);
+ }
+ 
++>>>>>>> 24ea591d2201 (net: sched: extend percpu stats helpers)
  static inline void qdisc_bstats_update(struct Qdisc *sch,
  				       const struct sk_buff *skb)
  {
@@@ -536,11 -550,26 +553,29 @@@ static inline void __qdisc_qstats_drop(
  	sch->qstats.drops += count;
  }
  
+ static inline void qstats_drop_inc(struct gnet_stats_queue *qstats)
+ {
+ 	qstats->drops++;
+ }
+ 
++<<<<<<< HEAD
++=======
+ static inline void qstats_overlimit_inc(struct gnet_stats_queue *qstats)
+ {
+ 	qstats->overlimits++;
+ }
+ 
  static inline void qdisc_qstats_drop(struct Qdisc *sch)
  {
- 	sch->qstats.drops++;
+ 	qstats_drop_inc(&sch->qstats);
+ }
+ 
+ static inline void qdisc_qstats_cpu_drop(struct Qdisc *sch)
+ {
+ 	qstats_drop_inc(this_cpu_ptr(sch->cpu_qstats));
  }
  
++>>>>>>> 24ea591d2201 (net: sched: extend percpu stats helpers)
  static inline void qdisc_qstats_overlimit(struct Qdisc *sch)
  {
  	sch->qstats.overlimits++;
diff --cc net/core/dev.c
index f531f8664bdd,e0d270143fc7..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -3660,18 -3644,27 +3660,32 @@@ static inline struct sk_buff *handle_in
  		*pt_prev = NULL;
  	}
  
++<<<<<<< HEAD
 +	switch (ing_filter(skb, rxq)) {
 +	case TC_ACT_SHOT:
++=======
+ 	qdisc_skb_cb(skb)->pkt_len = skb->len;
+ 	skb->tc_verd = SET_TC_AT(skb->tc_verd, AT_INGRESS);
+ 	qdisc_bstats_cpu_update(cl->q, skb);
+ 
+ 	switch (tc_classify(skb, cl, &cl_res)) {
+ 	case TC_ACT_OK:
+ 	case TC_ACT_RECLASSIFY:
+ 		skb->tc_index = TC_H_MIN(cl_res.classid);
+ 		break;
+ 	case TC_ACT_SHOT:
+ 		qdisc_qstats_cpu_drop(cl->q);
++>>>>>>> 24ea591d2201 (net: sched: extend percpu stats helpers)
  	case TC_ACT_STOLEN:
 -	case TC_ACT_QUEUED:
  		kfree_skb(skb);
  		return NULL;
 -	default:
 -		break;
  	}
 -#endif /* CONFIG_NET_CLS_ACT */
 +
 +out:
 +	skb->tc_verd = 0;
  	return skb;
  }
 +#endif
  
  /**
   *	netdev_rx_handler_register - register receive handler
* Unmerged path include/net/sch_generic.h
* Unmerged path net/core/dev.c
