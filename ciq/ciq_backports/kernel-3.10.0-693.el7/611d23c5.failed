flow_dissector: Fix MPLS entropy label handling in flow dissector

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tom Herbert <tom@herbertland.com>
commit 611d23c559a328ca3f84ac120c02d5a9f88c08f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/611d23c5.failed

Need to shift after masking to get label value for comparison.

Fixes: b3baa0fbd02a1a9d493d8 ("mpls: Add MPLS entropy label in flow_keys")
	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Tom Herbert <tom@herbertland.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 611d23c559a328ca3f84ac120c02d5a9f88c08f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/flow_dissector.c
diff --cc net/core/flow_dissector.c
index fbf58a98e819,1818cdcaa9b9..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -213,14 -276,52 +213,48 @@@ ipv6
  		hdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);
  		if (!hdr)
  			return false;
 -		key_basic->n_proto = proto;
 -		key_control->thoff = (u16)nhoff;
 -
 -		if (skb_flow_dissector_uses_key(flow_dissector,
 -						FLOW_DISSECTOR_KEY_TIPC_ADDRS)) {
 -			key_addrs = skb_flow_dissector_target(flow_dissector,
 -							      FLOW_DISSECTOR_KEY_TIPC_ADDRS,
 -							      target_container);
 -			key_addrs->tipcaddrs.srcnode = hdr->srcnode;
 -			key_control->addr_type = FLOW_DISSECTOR_KEY_TIPC_ADDRS;
 -		}
 +		flow->src = hdr->srcnode;
 +		flow->dst = 0;
 +		flow->n_proto = proto;
 +		flow->thoff = (u16)nhoff;
  		return true;
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	case htons(ETH_P_MPLS_UC):
+ 	case htons(ETH_P_MPLS_MC): {
+ 		struct mpls_label *hdr, _hdr[2];
+ mpls:
+ 		hdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data,
+ 					   hlen, &_hdr);
+ 		if (!hdr)
+ 			return false;
+ 
+ 		if ((ntohl(hdr[0].entry) & MPLS_LS_LABEL_MASK) >>
+ 		     MPLS_LS_LABEL_SHIFT == MPLS_LABEL_ENTROPY) {
+ 			if (skb_flow_dissector_uses_key(flow_dissector,
+ 							FLOW_DISSECTOR_KEY_MPLS_ENTROPY)) {
+ 				key_keyid = skb_flow_dissector_target(flow_dissector,
+ 								      FLOW_DISSECTOR_KEY_MPLS_ENTROPY,
+ 								      target_container);
+ 				key_keyid->keyid = hdr[1].entry &
+ 					htonl(MPLS_LS_LABEL_MASK);
+ 			}
+ 
+ 			key_basic->n_proto = proto;
+ 			key_basic->ip_proto = ip_proto;
+ 			key_control->thoff = (u16)nhoff;
+ 
+ 			return true;
+ 		}
+ 
+ 		return true;
+ 	}
+ 
++>>>>>>> 611d23c559a3 (flow_dissector: Fix MPLS entropy label handling in flow dissector)
  	case htons(ETH_P_FCOE):
 -		key_control->thoff = (u16)(nhoff + FCOE_HEADER_LEN);
 +		flow->thoff = (u16)(nhoff + FCOE_HEADER_LEN);
  		/* fall through */
  	default:
  		return false;
* Unmerged path net/core/flow_dissector.c
