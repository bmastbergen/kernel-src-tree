crypto: qat - fix invalid pf2vf_resp_wq logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] qat - fix invalid pf2vf_resp_wq logic (Neil Horman) [1382849]
Rebuild_FUZZ: 90.24%
commit-author Tadeusz Struk <tadeusz.struk@intel.com>
commit 9e209fcfb804da262e38e5cd2e680c47a41f0f95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9e209fcf.failed

The pf2vf_resp_wq is a global so it has to be created at init
and destroyed at exit, instead of per device.

	Cc: <stable@vger.kernel.org>
	Tested-by: Suresh Marikkannu <sureshx.marikkannu@intel.com>
	Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 9e209fcfb804da262e38e5cd2e680c47a41f0f95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_common/adf_common_drv.h
#	drivers/crypto/qat/qat_common/adf_ctl_drv.c
diff --cc drivers/crypto/qat/qat_common/adf_common_drv.h
index 557ea361d385,155510277c54..000000000000
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@@ -144,8 -144,8 +144,13 @@@ void adf_disable_aer(struct adf_accel_d
  void adf_dev_restore(struct adf_accel_dev *accel_dev);
  int adf_init_aer(void);
  void adf_exit_aer(void);
++<<<<<<< HEAD
 +int adf_init_vf_wq(void);
 +void adf_exit_vf_wq(void);
++=======
+ int adf_init_pf_wq(void);
+ void adf_exit_pf_wq(void);
++>>>>>>> 9e209fcfb804 (crypto: qat - fix invalid pf2vf_resp_wq logic)
  int adf_init_admin_comms(struct adf_accel_dev *accel_dev);
  void adf_exit_admin_comms(struct adf_accel_dev *accel_dev);
  int adf_send_admin_init(struct adf_accel_dev *accel_dev);
diff --cc drivers/crypto/qat/qat_common/adf_ctl_drv.c
index 116ddda75e27,3c3f948290ca..000000000000
--- a/drivers/crypto/qat/qat_common/adf_ctl_drv.c
+++ b/drivers/crypto/qat/qat_common/adf_ctl_drv.c
@@@ -471,8 -462,8 +471,13 @@@ static int __init adf_register_ctl_devi
  	if (adf_init_aer())
  		goto err_aer;
  
++<<<<<<< HEAD
 +	if (adf_init_vf_wq())
 +		goto err_vf_wq;
++=======
+ 	if (adf_init_pf_wq())
+ 		goto err_pf_wq;
++>>>>>>> 9e209fcfb804 (crypto: qat - fix invalid pf2vf_resp_wq logic)
  
  	if (qat_crypto_register())
  		goto err_crypto_register;
@@@ -480,8 -471,8 +485,13 @@@
  	return 0;
  
  err_crypto_register:
++<<<<<<< HEAD
 +	adf_exit_vf_wq();
 +err_vf_wq:
++=======
+ 	adf_exit_pf_wq();
+ err_pf_wq:
++>>>>>>> 9e209fcfb804 (crypto: qat - fix invalid pf2vf_resp_wq logic)
  	adf_exit_aer();
  err_aer:
  	adf_chr_drv_destroy();
@@@ -494,7 -485,7 +504,11 @@@ static void __exit adf_unregister_ctl_d
  {
  	adf_chr_drv_destroy();
  	adf_exit_aer();
++<<<<<<< HEAD
 +	adf_exit_vf_wq();
++=======
+ 	adf_exit_pf_wq();
++>>>>>>> 9e209fcfb804 (crypto: qat - fix invalid pf2vf_resp_wq logic)
  	qat_crypto_unregister();
  	adf_clean_vf_map(false);
  	mutex_destroy(&adf_ctl_lock);
* Unmerged path drivers/crypto/qat/qat_common/adf_common_drv.h
* Unmerged path drivers/crypto/qat/qat_common/adf_ctl_drv.c
diff --git a/drivers/crypto/qat/qat_common/adf_sriov.c b/drivers/crypto/qat/qat_common/adf_sriov.c
index 4479b0b63296..4a526e2f1d7f 100644
--- a/drivers/crypto/qat/qat_common/adf_sriov.c
+++ b/drivers/crypto/qat/qat_common/adf_sriov.c
@@ -119,11 +119,6 @@ static int adf_enable_sriov(struct adf_accel_dev *accel_dev)
 	int i;
 	u32 reg;
 
-	/* Workqueue for PF2VF responses */
-	pf2vf_resp_wq = create_workqueue("qat_pf2vf_resp_wq");
-	if (!pf2vf_resp_wq)
-		return -ENOMEM;
-
 	for (i = 0, vf_info = accel_dev->pf.vf_info; i < totalvfs;
 	     i++, vf_info++) {
 		/* This ptr will be populated when VFs will be created */
@@ -216,11 +211,6 @@ void adf_disable_sriov(struct adf_accel_dev *accel_dev)
 
 	kfree(accel_dev->pf.vf_info);
 	accel_dev->pf.vf_info = NULL;
-
-	if (pf2vf_resp_wq) {
-		destroy_workqueue(pf2vf_resp_wq);
-		pf2vf_resp_wq = NULL;
-	}
 }
 EXPORT_SYMBOL_GPL(adf_disable_sriov);
 
@@ -298,3 +288,19 @@ int adf_sriov_configure(struct pci_dev *pdev, int numvfs)
 	return numvfs;
 }
 EXPORT_SYMBOL_GPL(adf_sriov_configure);
+
+int __init adf_init_pf_wq(void)
+{
+	/* Workqueue for PF2VF responses */
+	pf2vf_resp_wq = create_workqueue("qat_pf2vf_resp_wq");
+
+	return !pf2vf_resp_wq ? -ENOMEM : 0;
+}
+
+void adf_exit_pf_wq(void)
+{
+	if (pf2vf_resp_wq) {
+		destroy_workqueue(pf2vf_resp_wq);
+		pf2vf_resp_wq = NULL;
+	}
+}
