flow_dissector: change port array into src, dst tuple

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit 59346afe7a5548ab3e9730aeff33993faa76abbe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/59346afe.failed

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 59346afe7a5548ab3e9730aeff33993faa76abbe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cisco/enic/enic_clsf.c
#	drivers/net/ethernet/cisco/enic/enic_ethtool.c
#	include/net/flow_dissector.h
#	include/net/ip.h
#	include/net/ipv6.h
#	net/core/flow_dissector.c
#	net/sched/cls_flow.c
diff --cc drivers/net/ethernet/cisco/enic/enic_clsf.c
index e2fbefe5772f,6739ebc08c47..000000000000
--- a/drivers/net/ethernet/cisco/enic/enic_clsf.c
+++ b/drivers/net/ethernet/cisco/enic/enic_clsf.c
@@@ -33,10 -33,10 +33,17 @@@ int enic_addfltr_5t(struct enic *enic, 
  		return -EPROTONOSUPPORT;
  	};
  	data.type = FILTER_IPV4_5TUPLE;
++<<<<<<< HEAD
 +	data.u.ipv4.src_addr = ntohl(keys->src);
 +	data.u.ipv4.dst_addr = ntohl(keys->dst);
 +	data.u.ipv4.src_port = ntohs(keys->port16[0]);
 +	data.u.ipv4.dst_port = ntohs(keys->port16[1]);
++=======
+ 	data.u.ipv4.src_addr = ntohl(keys->addrs.src);
+ 	data.u.ipv4.dst_addr = ntohl(keys->addrs.dst);
+ 	data.u.ipv4.src_port = ntohs(keys->ports.src);
+ 	data.u.ipv4.dst_port = ntohs(keys->ports.dst);
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  	data.u.ipv4.flags = FILTER_FIELDS_IPV4_5TUPLE;
  
  	spin_lock_bh(&enic->devcmd_lock);
diff --cc drivers/net/ethernet/cisco/enic/enic_ethtool.c
index e7557a372ed3,117c0968dd0b..000000000000
--- a/drivers/net/ethernet/cisco/enic/enic_ethtool.c
+++ b/drivers/net/ethernet/cisco/enic/enic_ethtool.c
@@@ -376,16 -346,16 +376,23 @@@ static int enic_grxclsrule(struct enic 
  		break;
  	}
  
 -	fsp->h_u.tcp_ip4_spec.ip4src = n->keys.addrs.src;
 +	fsp->h_u.tcp_ip4_spec.ip4src = n->keys.src;
  	fsp->m_u.tcp_ip4_spec.ip4src = (__u32)~0;
  
 -	fsp->h_u.tcp_ip4_spec.ip4dst = n->keys.addrs.dst;
 +	fsp->h_u.tcp_ip4_spec.ip4dst = n->keys.dst;
  	fsp->m_u.tcp_ip4_spec.ip4dst = (__u32)~0;
  
++<<<<<<< HEAD
 +	fsp->h_u.tcp_ip4_spec.psrc = n->keys.port16[0];
 +	fsp->m_u.tcp_ip4_spec.psrc = (__u16)~0;
 +
 +	fsp->h_u.tcp_ip4_spec.pdst = n->keys.port16[1];
++=======
+ 	fsp->h_u.tcp_ip4_spec.psrc = n->keys.ports.src;
+ 	fsp->m_u.tcp_ip4_spec.psrc = (__u16)~0;
+ 
+ 	fsp->h_u.tcp_ip4_spec.pdst = n->keys.ports.dst;
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  	fsp->m_u.tcp_ip4_spec.pdst = (__u16)~0;
  
  	fsp->ring_cookie = n->rq_id;
diff --cc include/net/ip.h
index 5506ed81f7f4,0ed6d768e606..000000000000
--- a/include/net/ip.h
+++ b/include/net/ip.h
@@@ -362,10 -360,10 +362,17 @@@ static inline void inet_set_txhash(stru
  	struct inet_sock *inet = inet_sk(sk);
  	struct flow_keys keys;
  
++<<<<<<< HEAD
 +	keys.src = inet->inet_saddr;
 +	keys.dst = inet->inet_daddr;
 +	keys.port16[0] = inet->inet_sport;
 +	keys.port16[1] = inet->inet_dport;
++=======
+ 	keys.addrs.src = inet->inet_saddr;
+ 	keys.addrs.dst = inet->inet_daddr;
+ 	keys.ports.src = inet->inet_sport;
+ 	keys.ports.dst = inet->inet_dport;
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  
  	sk->sk_txhash = flow_hash_from_keys(&keys);
  }
diff --cc include/net/ipv6.h
index 9b1513b769fd,aab8190d16e8..000000000000
--- a/include/net/ipv6.h
+++ b/include/net/ipv6.h
@@@ -705,10 -698,10 +705,17 @@@ static inline void ip6_set_txhash(struc
  	struct ipv6_pinfo *np = inet6_sk(sk);
  	struct flow_keys keys;
  
++<<<<<<< HEAD
 +	keys.src = (__force __be32)ipv6_addr_hash(&np->saddr);
 +	keys.dst = (__force __be32)ipv6_addr_hash(&sk->sk_v6_daddr);
 +	keys.port16[0] = inet->inet_sport;
 +	keys.port16[1] = inet->inet_dport;
++=======
+ 	keys.addrs.src = (__force __be32)ipv6_addr_hash(&np->saddr);
+ 	keys.addrs.dst = (__force __be32)ipv6_addr_hash(&sk->sk_v6_daddr);
+ 	keys.ports.src = inet->inet_sport;
+ 	keys.ports.dst = inet->inet_dport;
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  
  	sk->sk_txhash = flow_hash_from_keys(&keys);
  }
diff --cc net/core/flow_dissector.c
index fbf58a98e819,204d09c42510..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -301,16 -383,17 +301,24 @@@ static inline u32 __flow_hash_from_keys
  	u32 hash;
  
  	/* get a consistent hash (same value on both flow directions) */
++<<<<<<< HEAD
 +	if (((__force u32)keys->dst < (__force u32)keys->src) ||
 +	    (((__force u32)keys->dst == (__force u32)keys->src) &&
 +	     ((__force u16)keys->port16[1] < (__force u16)keys->port16[0]))) {
 +		swap(keys->dst, keys->src);
 +		swap(keys->port16[0], keys->port16[1]);
++=======
+ 	if (((__force u32)keys->addrs.dst < (__force u32)keys->addrs.src) ||
+ 	    (((__force u32)keys->addrs.dst == (__force u32)keys->addrs.src) &&
+ 	     ((__force u16)keys->ports.dst < (__force u16)keys->ports.src))) {
+ 		swap(keys->addrs.dst, keys->addrs.src);
+ 		swap(keys->ports.src, keys->ports.dst);
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  	}
  
 -	hash = __flow_hash_3words((__force u32)keys->addrs.dst,
 -				  (__force u32)keys->addrs.src,
 -				  (__force u32)keys->ports.ports,
 -				  keyval);
 +	hash = __flow_hash_3words((__force u32)keys->dst,
 +				  (__force u32)keys->src,
 +				  (__force u32)keys->ports);
  	if (!hash)
  		hash = 1;
  
diff --cc net/sched/cls_flow.c
index c999e8f9936b,b4359924846c..000000000000
--- a/net/sched/cls_flow.c
+++ b/net/sched/cls_flow.c
@@@ -87,18 -87,18 +87,28 @@@ static u32 flow_get_proto(const struct 
  
  static u32 flow_get_proto_src(const struct sk_buff *skb, const struct flow_keys *flow)
  {
++<<<<<<< HEAD
 +	if (flow->ports)
 +		return ntohs(flow->port16[0]);
++=======
+ 	if (flow->ports.ports)
+ 		return ntohs(flow->ports.src);
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  
  	return addr_fold(skb->sk);
  }
  
  static u32 flow_get_proto_dst(const struct sk_buff *skb, const struct flow_keys *flow)
  {
++<<<<<<< HEAD
 +	if (flow->ports)
 +		return ntohs(flow->port16[1]);
++=======
+ 	if (flow->ports.ports)
+ 		return ntohs(flow->ports.dst);
++>>>>>>> 59346afe7a55 (flow_dissector: change port array into src, dst tuple)
  
 -	return addr_fold(skb_dst(skb)) ^ (__force u16) tc_skb_protocol(skb);
 +	return addr_fold(skb_dst(skb)) ^ (__force u16)skb->protocol;
  }
  
  static u32 flow_get_iif(const struct sk_buff *skb)
* Unmerged path include/net/flow_dissector.h
* Unmerged path drivers/net/ethernet/cisco/enic/enic_clsf.c
* Unmerged path drivers/net/ethernet/cisco/enic/enic_ethtool.c
* Unmerged path include/net/flow_dissector.h
* Unmerged path include/net/ip.h
* Unmerged path include/net/ipv6.h
* Unmerged path net/core/flow_dissector.c
* Unmerged path net/sched/cls_flow.c
