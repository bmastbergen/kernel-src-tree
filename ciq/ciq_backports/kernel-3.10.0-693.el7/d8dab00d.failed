io-mapping: Specify mapping size for io_mapping_map_wc()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit d8dab00de9b767eaa11496a0eedf4798fc225803
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d8dab00d.failed

The ioremap() hidden behind the io_mapping_map_wc() convenience helper
can be used for remapping multiple pages. Extend the helper so that
future callers can use it for larger ranges.

	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
	Cc: Daniel Vetter <daniel.vetter@intel.com>
	Cc: Jani Nikula <jani.nikula@linux.intel.com>
	Cc: David Airlie <airlied@linux.ie>
	Cc: Yishai Hadas <yishaih@mellanox.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
	Cc: David Hildenbrand <dahi@linux.vnet.ibm.com>
	Cc: Luis R. Rodriguez <mcgrof@kernel.org>
	Cc: intel-gfx@lists.freedesktop.org
	Cc: dri-devel@lists.freedesktop.org
	Cc: netdev@vger.kernel.org
	Cc: linux-rdma@vger.kernel.org
	Cc: linux-kernel@vger.kernel.org
	Reviewed-by: Luis R. Rodriguez <mcgrof@kernel.org>
Link: http://patchwork.freedesktop.org/patch/msgid/1461833819-3991-3-git-send-email-chris@chris-wilson.co.uk
(cherry picked from commit d8dab00de9b767eaa11496a0eedf4798fc225803)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_overlay.c
diff --cc drivers/gpu/drm/i915/intel_overlay.c
index 9168413fe204,8570c60c6fc0..000000000000
--- a/drivers/gpu/drm/i915/intel_overlay.c
+++ b/drivers/gpu/drm/i915/intel_overlay.c
@@@ -196,8 -197,9 +196,14 @@@ intel_overlay_map_regs(struct intel_ove
  	if (OVERLAY_NEEDS_PHYSICAL(overlay->dev))
  		regs = (struct overlay_registers __iomem *)overlay->reg_bo->phys_handle->vaddr;
  	else
++<<<<<<< HEAD
 +		regs = io_mapping_map_wc(dev_priv->gtt.mappable,
 +					 i915_gem_obj_ggtt_offset(overlay->reg_bo));
++=======
+ 		regs = io_mapping_map_wc(ggtt->mappable,
+ 					 overlay->flip_addr,
+ 					 PAGE_SIZE);
++>>>>>>> d8dab00de9b7 (io-mapping: Specify mapping size for io_mapping_map_wc())
  
  	return regs;
  }
* Unmerged path drivers/gpu/drm/i915/intel_overlay.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/pd.c b/drivers/net/ethernet/mellanox/mlx4/pd.c
index a6f99256254d..2bb75ff46284 100644
--- a/drivers/net/ethernet/mellanox/mlx4/pd.c
+++ b/drivers/net/ethernet/mellanox/mlx4/pd.c
@@ -206,7 +206,9 @@ int mlx4_bf_alloc(struct mlx4_dev *dev, struct mlx4_bf *bf, int node)
 			goto free_uar;
 		}
 
-		uar->bf_map = io_mapping_map_wc(priv->bf_mapping, uar->index << PAGE_SHIFT);
+		uar->bf_map = io_mapping_map_wc(priv->bf_mapping,
+						uar->index << PAGE_SHIFT,
+						PAGE_SIZE);
 		if (!uar->bf_map) {
 			err = -ENOMEM;
 			goto unamp_uar;
diff --git a/include/linux/io-mapping.h b/include/linux/io-mapping.h
index 657fab4efab3..3ea94fb73ff7 100644
--- a/include/linux/io-mapping.h
+++ b/include/linux/io-mapping.h
@@ -100,14 +100,16 @@ io_mapping_unmap_atomic(void __iomem *vaddr)
 }
 
 static inline void __iomem *
-io_mapping_map_wc(struct io_mapping *mapping, unsigned long offset)
+io_mapping_map_wc(struct io_mapping *mapping,
+		  unsigned long offset,
+		  unsigned long size)
 {
 	resource_size_t phys_addr;
 
 	BUG_ON(offset >= mapping->size);
 	phys_addr = mapping->base + offset;
 
-	return ioremap_wc(phys_addr, PAGE_SIZE);
+	return ioremap_wc(phys_addr, size);
 }
 
 static inline void
@@ -153,7 +155,9 @@ io_mapping_unmap_atomic(void __iomem *vaddr)
 
 /* Non-atomic map/unmap */
 static inline void __iomem *
-io_mapping_map_wc(struct io_mapping *mapping, unsigned long offset)
+io_mapping_map_wc(struct io_mapping *mapping,
+		  unsigned long offset,
+		  unsigned long size)
 {
 	return ((char __force __iomem *) mapping) + offset;
 }
