HID: wacom: Set button bits based on a new numbered_buttons

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: Set button bits based on a new numbered_buttons (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 95.58%
commit-author Aaron Skomra <skomra@gmail.com>
commit 70ee06c5f447b9d50747b29d3e8d48ae7ef1cabe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/70ee06c5.failed

Prior to this commit, numbered button bit setting was done separately
for each device type in wacom_setup_pad_capabilities(). Here we add a
numbered_buttons property to the wacom_features struct and extract the
repeated bit setting code to a new function:
wacom_settup_numbered_buttons().

	Signed-off-by: Aaron Skomra <aaron.skomra@wacom.com>
	Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 70ee06c5f447b9d50747b29d3e8d48ae7ef1cabe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index bdf17efa93aa,ee5d278afa3f..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -1578,17 -2374,267 +1578,281 @@@ int wacom_setup_input_capabilities(stru
  		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
  		break;
  
++<<<<<<< HEAD
 +	case WACOM_24HD:
 +		__set_bit(BTN_A, input_dev->keybit);
 +		__set_bit(BTN_B, input_dev->keybit);
 +		__set_bit(BTN_C, input_dev->keybit);
 +		__set_bit(BTN_X, input_dev->keybit);
 +		__set_bit(BTN_Y, input_dev->keybit);
 +		__set_bit(BTN_Z, input_dev->keybit);
 +
 +		for (i = 6; i < 10; i++)
 +			__set_bit(BTN_0 + i, input_dev->keybit);
 +
++=======
+ 	case WACOM_27QHD:
+ 	case WACOM_24HD:
+ 	case DTK:
+ 	case WACOM_22HD:
+ 	case WACOM_21UX2:
+ 	case WACOM_BEE:
+ 	case CINTIQ:
+ 	case WACOM_13HD:
+ 	case CINTIQ_HYBRID:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case INTUOS3:
+ 	case INTUOS3L:
+ 	case INTUOS3S:
+ 	case INTUOS4:
+ 	case INTUOS4WL:
+ 	case INTUOS4L:
+ 	case INTUOS4S:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		/* fall through */
+ 
+ 	case INTUOS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		wacom_setup_intuos(wacom_wac);
+ 		break;
+ 
+ 	case INTUOS5:
+ 	case INTUOS5L:
+ 	case INTUOSPM:
+ 	case INTUOSPL:
+ 	case INTUOS5S:
+ 	case INTUOSPS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 				      features->distance_max,
+ 				      0, 0);
+ 
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 
+ 		wacom_setup_intuos(wacom_wac);
+ 		break;
+ 
+ 	case WACOM_24HDT:
+ 	case WACOM_27QHDT:
+ 	case MTSCREEN:
+ 	case MTTPC:
+ 	case MTTPC_B:
+ 	case TABLETPC2FG:
+ 	case TABLETPC:
+ 	case TABLETPCE:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 		/* fall through */
+ 
+ 	case DTUS:
+ 	case DTUSX:
+ 	case PL:
+ 	case DTU:
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		break;
+ 
+ 	case PTU:
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 		/* fall through */
+ 
+ 	case PENPARTNER:
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case INTUOSHT:
+ 	case BAMBOO_PT:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 		input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 				      features->distance_max,
+ 				      0, 0);
+ 		break;
+ 	case BAMBOO_PAD:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 		break;
+ 	}
+ 	return 0;
+ }
+ 
+ int wacom_setup_touch_input_capabilities(struct input_dev *input_dev,
+ 					 struct wacom_wac *wacom_wac)
+ {
+ 	struct wacom_features *features = &wacom_wac->features;
+ 
+ 	input_dev->evbit[0] |= BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+ 
+ 	if (!(features->device_type & WACOM_DEVICETYPE_TOUCH))
+ 		return -ENODEV;
+ 
+ 	if (features->type == HID_GENERIC)
+ 		/* setup has already been done */
+ 		return 0;
+ 
+ 	__set_bit(BTN_TOUCH, input_dev->keybit);
+ 
+ 	if (features->touch_max == 1) {
+ 		input_set_abs_params(input_dev, ABS_X, 0,
+ 			features->x_max, features->x_fuzz, 0);
+ 		input_set_abs_params(input_dev, ABS_Y, 0,
+ 			features->y_max, features->y_fuzz, 0);
+ 		input_abs_set_res(input_dev, ABS_X,
+ 				  features->x_resolution);
+ 		input_abs_set_res(input_dev, ABS_Y,
+ 				  features->y_resolution);
+ 	}
+ 	else if (features->touch_max > 1) {
+ 		input_set_abs_params(input_dev, ABS_MT_POSITION_X, 0,
+ 			features->x_max, features->x_fuzz, 0);
+ 		input_set_abs_params(input_dev, ABS_MT_POSITION_Y, 0,
+ 			features->y_max, features->y_fuzz, 0);
+ 		input_abs_set_res(input_dev, ABS_MT_POSITION_X,
+ 				  features->x_resolution);
+ 		input_abs_set_res(input_dev, ABS_MT_POSITION_Y,
+ 				  features->y_resolution);
+ 	}
+ 
+ 	switch (features->type) {
+ 	case INTUOS5:
+ 	case INTUOS5L:
+ 	case INTUOSPM:
+ 	case INTUOSPL:
+ 	case INTUOS5S:
+ 	case INTUOSPS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, features->x_max, 0, 0);
+ 		input_set_abs_params(input_dev, ABS_MT_TOUCH_MINOR, 0, features->y_max, 0, 0);
+ 		input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
+ 		break;
+ 
+ 	case WACOM_24HDT:
+ 		input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, features->x_max, 0, 0);
+ 		input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, 0, features->x_max, 0, 0);
+ 		input_set_abs_params(input_dev, ABS_MT_WIDTH_MINOR, 0, features->y_max, 0, 0);
+ 		input_set_abs_params(input_dev, ABS_MT_ORIENTATION, 0, 1, 0, 0);
+ 		/* fall through */
+ 
+ 	case WACOM_27QHDT:
+ 	case MTSCREEN:
+ 	case MTTPC:
+ 	case MTTPC_B:
+ 	case TABLETPC2FG:
+ 		input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_DIRECT);
+ 		/*fall through */
+ 
+ 	case TABLETPC:
+ 	case TABLETPCE:
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		break;
+ 
+ 	case INTUOSHT:
+ 		input_dev->evbit[0] |= BIT_MASK(EV_SW);
+ 		__set_bit(SW_MUTE_DEVICE, input_dev->swbit);
+ 		/* fall through */
+ 
+ 	case BAMBOO_PT:
+ 		if (features->pktlen == WACOM_PKGLEN_BBTOUCH3) {
+ 			input_set_abs_params(input_dev,
+ 				     ABS_MT_TOUCH_MAJOR,
+ 				     0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev,
+ 				     ABS_MT_TOUCH_MINOR,
+ 				     0, features->y_max, 0, 0);
+ 		}
+ 		input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
+ 		break;
+ 
+ 	case BAMBOO_PAD:
+ 		input_mt_init_slots(input_dev, features->touch_max,
+ 				    INPUT_MT_POINTER);
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		break;
+ 	}
+ 	return 0;
+ }
+ 
+ void wacom_setup_numbered_buttons(struct input_dev *input_dev,
+ 				int button_count)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < button_count && i < 10; i++)
+ 		__set_bit(BTN_0 + i, input_dev->keybit);
+ 	for (i = 10; i < button_count && i < 16; i++)
+ 		__set_bit(BTN_A + (i-10), input_dev->keybit);
+ 	for (i = 16; i < button_count && i < 18; i++)
+ 		__set_bit(BTN_BASE + (i-16), input_dev->keybit);
+ }
+ 
+ int wacom_setup_pad_input_capabilities(struct input_dev *input_dev,
+ 				   struct wacom_wac *wacom_wac)
+ {
+ 	struct wacom_features *features = &wacom_wac->features;
+ 
+ 	if (!(features->device_type & WACOM_DEVICETYPE_PAD))
+ 		return -ENODEV;
+ 
+ 	input_dev->evbit[0] |= BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+ 
+ 	/* kept for making legacy xf86-input-wacom working with the wheels */
+ 	__set_bit(ABS_MISC, input_dev->absbit);
+ 
+ 	/* kept for making legacy xf86-input-wacom accepting the pad */
+ 	input_set_abs_params(input_dev, ABS_X, 0, 1, 0, 0);
+ 	input_set_abs_params(input_dev, ABS_Y, 0, 1, 0, 0);
+ 
+ 	/* kept for making udev and libwacom accepting the pad */
+ 	__set_bit(BTN_STYLUS, input_dev->keybit);
+ 
+ 	wacom_setup_numbered_buttons(input_dev, features->numbered_buttons);
+ 
+ 	switch (features->type) {
+ 
+ 	case CINTIQ_HYBRID:
+ 	case DTK:
+ 	case DTUS:
+ 	case GRAPHIRE_BT:
+ 		break;
+ 
+ 	case WACOM_MO:
+ 		__set_bit(BTN_BACK, input_dev->keybit);
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_FORWARD, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
+ 		break;
+ 
+ 	case WACOM_G4:
+ 		__set_bit(BTN_BACK, input_dev->keybit);
+ 		__set_bit(BTN_FORWARD, input_dev->keybit);
+ 		input_set_capability(input_dev, EV_REL, REL_WHEEL);
+ 		break;
+ 
+ 	case WACOM_24HD:
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  		__set_bit(KEY_PROG1, input_dev->keybit);
  		__set_bit(KEY_PROG2, input_dev->keybit);
  		__set_bit(KEY_PROG3, input_dev->keybit);
@@@ -1610,13 -2647,15 +1874,16 @@@
  		__set_bit(KEY_PROG1, input_dev->keybit);
  		__set_bit(KEY_PROG2, input_dev->keybit);
  		__set_bit(KEY_PROG3, input_dev->keybit);
 -		input_set_abs_params(input_dev, ABS_X, -2048, 2048, 0, 0);
 -		input_abs_set_res(input_dev, ABS_X, 1024); /* points/g */
 -		input_set_abs_params(input_dev, ABS_Y, -2048, 2048, 0, 0);
 -		input_abs_set_res(input_dev, ABS_Y, 1024);
 -		input_set_abs_params(input_dev, ABS_Z, -2048, 2048, 0, 0);
 -		input_abs_set_res(input_dev, ABS_Z, 1024);
 -		__set_bit(INPUT_PROP_ACCELEROMETER, input_dev->propbit);
 +
++<<<<<<< HEAD
 +		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 +
 +		wacom_setup_cintiq(wacom_wac);
 +
  		break;
  
++=======
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  	case WACOM_22HD:
  		__set_bit(KEY_PROG1, input_dev->keybit);
  		__set_bit(KEY_PROG2, input_dev->keybit);
@@@ -1624,41 -2663,14 +1891,28 @@@
  		/* fall through */
  
  	case WACOM_21UX2:
- 		__set_bit(BTN_A, input_dev->keybit);
- 		__set_bit(BTN_B, input_dev->keybit);
- 		__set_bit(BTN_C, input_dev->keybit);
- 		__set_bit(BTN_X, input_dev->keybit);
- 		__set_bit(BTN_Y, input_dev->keybit);
- 		__set_bit(BTN_Z, input_dev->keybit);
- 		__set_bit(BTN_BASE, input_dev->keybit);
- 		__set_bit(BTN_BASE2, input_dev->keybit);
- 		/* fall through */
- 
  	case WACOM_BEE:
- 		__set_bit(BTN_8, input_dev->keybit);
- 		__set_bit(BTN_9, input_dev->keybit);
- 		/* fall through */
- 
  	case CINTIQ:
- 		for (i = 0; i < 8; i++)
- 			__set_bit(BTN_0 + i, input_dev->keybit);
- 
  		input_set_abs_params(input_dev, ABS_RX, 0, 4096, 0, 0);
  		input_set_abs_params(input_dev, ABS_RY, 0, 4096, 0, 0);
 +		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 +
 +		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 +
 +		wacom_setup_cintiq(wacom_wac);
  		break;
  
  	case WACOM_13HD:
++<<<<<<< HEAD
 +		for (i = 0; i < 9; i++)
 +			__set_bit(BTN_0 + i, input_dev->keybit);
 +
 +		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 +		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 +		wacom_setup_cintiq(wacom_wac);
++=======
+ 		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  		break;
  
  	case INTUOS3:
@@@ -1672,128 -2679,34 +1921,132 @@@
  		/* fall through */
  
  	case INTUOS3S:
- 		__set_bit(BTN_0, input_dev->keybit);
- 		__set_bit(BTN_1, input_dev->keybit);
- 		__set_bit(BTN_2, input_dev->keybit);
- 		__set_bit(BTN_3, input_dev->keybit);
- 
  		input_set_abs_params(input_dev, ABS_RX, 0, 4096, 0, 0);
 +		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 +		/* fall through */
 +
 +	case INTUOS:
 +		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
 +
 +		wacom_setup_intuos(wacom_wac);
  		break;
  
  	case INTUOS5:
  	case INTUOS5L:
  	case INTUOSPM:
  	case INTUOSPL:
++<<<<<<< HEAD
 +		if (features->device_type == BTN_TOOL_PEN) {
 +			__set_bit(BTN_7, input_dev->keybit);
 +			__set_bit(BTN_8, input_dev->keybit);
 +		}
 +		/* fall through */
 +
 +	case INTUOS5S:
 +	case INTUOSPS:
 +		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
 +
 +		if (features->device_type == BTN_TOOL_PEN) {
 +			for (i = 0; i < 7; i++)
 +				__set_bit(BTN_0 + i, input_dev->keybit);
 +
 +			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
 +					      features->distance_max,
 +					      0, 0);
 +
 +			input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 +
 +			wacom_setup_intuos(wacom_wac);
 +		} else if (features->device_type == BTN_TOOL_FINGER) {
 +			__clear_bit(ABS_MISC, input_dev->absbit);
 +
 +			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR,
 +			                     0, features->x_max, 0, 0);
 +			input_set_abs_params(input_dev, ABS_MT_TOUCH_MINOR,
 +			                     0, features->y_max, 0, 0);
 +			input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
 +		}
++=======
+ 	case INTUOS5S:
+ 	case INTUOSPS:
+ 		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  		break;
  
 -	case INTUOS4WL:
 -		/*
 -		 * For Bluetooth devices, the udev rule does not work correctly
 -		 * for pads unless we add a stylus capability, which forces
 -		 * ID_INPUT_TABLET to be set.
 -		 */
 -		__set_bit(BTN_STYLUS, input_dev->keybit);
 -		/* fall through */
 -
  	case INTUOS4:
  	case INTUOS4L:
- 		__set_bit(BTN_7, input_dev->keybit);
- 		__set_bit(BTN_8, input_dev->keybit);
- 		/* fall through */
- 
  	case INTUOS4S:
++<<<<<<< HEAD
 +		for (i = 0; i < 7; i++)
 +			__set_bit(BTN_0 + i, input_dev->keybit);
 +
 +		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 +		wacom_setup_intuos(wacom_wac);
 +
 +		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
 +		break;
 +
 +	case WACOM_24HDT:
 +		if (features->device_type == BTN_TOOL_FINGER) {
 +			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, features->x_max, 0, 0);
 +			input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, 0, features->x_max, 0, 0);
 +			input_set_abs_params(input_dev, ABS_MT_WIDTH_MINOR, 0, features->y_max, 0, 0);
 +			input_set_abs_params(input_dev, ABS_MT_ORIENTATION, 0, 1, 0, 0);
 +		}
 +		/* fall through */
 +
 +	case MTSCREEN:
 +	case MTTPC:
 +	case TABLETPC2FG:
 +		if (features->device_type == BTN_TOOL_FINGER) {
 +			unsigned int flags = INPUT_MT_DIRECT;
 +
 +			if (wacom_wac->features.type == TABLETPC2FG)
 +				flags = 0;
 +
 +			input_mt_init_slots(input_dev, features->touch_max, flags);
 +		}
 +		/* fall through */
 +
 +	case TABLETPC:
 +	case TABLETPCE:
 +		__clear_bit(ABS_MISC, input_dev->absbit);
 +
 +		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 +
 +		if (features->device_type != BTN_TOOL_PEN)
 +			break;  /* no need to process stylus stuff */
 +
 +		/* fall through */
 +
 +	case PL:
 +	case DTU:
 +		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
 +		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
 +		__set_bit(BTN_STYLUS, input_dev->keybit);
 +		__set_bit(BTN_STYLUS2, input_dev->keybit);
 +
 +		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 +		break;
 +
 +	case PTU:
 +		__set_bit(BTN_STYLUS2, input_dev->keybit);
 +		/* fall through */
 +
 +	case PENPARTNER:
 +		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
 +		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
 +		__set_bit(BTN_STYLUS, input_dev->keybit);
 +
 +		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
 +		break;
 +
++=======
+ 		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
+ 		break;
+ 
+ 	case INTUOSHT:
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  	case BAMBOO_PT:
  		__clear_bit(ABS_MISC, input_dev->absbit);
  
@@@ -1835,404 -2725,490 +2088,589 @@@
  }
  
  static const struct wacom_features wacom_features_0x00 =
 -	{ "Wacom Penpartner", 5040, 3780, 255, 0,
 -	  PENPARTNER, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
 +	{ "Wacom Penpartner",     WACOM_PKGLEN_PENPRTN,    5040,  3780,  255,
 +	  0, PENPARTNER, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
  static const struct wacom_features wacom_features_0x10 =
++<<<<<<< HEAD
 +	{ "Wacom Graphire",       WACOM_PKGLEN_GRAPHIRE,  10206,  7422,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
++=======
+ 	{ "Wacom Graphire", 10206, 7422, 511, 63,
+ 	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
+ static const struct wacom_features wacom_features_0x81 =
+ 	{ "Wacom Graphire BT", 16704, 12064, 511, 32,
+ 	  GRAPHIRE_BT, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES, 2 };
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  static const struct wacom_features wacom_features_0x11 =
 -	{ "Wacom Graphire2 4x5", 10206, 7422, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire2 4x5",  WACOM_PKGLEN_GRAPHIRE,  10206,  7422,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x12 =
 -	{ "Wacom Graphire2 5x7", 13918, 10206, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire2 5x7",  WACOM_PKGLEN_GRAPHIRE,  13918, 10206,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x13 =
 -	{ "Wacom Graphire3", 10208, 7424, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire3",      WACOM_PKGLEN_GRAPHIRE,  10208,  7424,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x14 =
 -	{ "Wacom Graphire3 6x8", 16704, 12064, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire3 6x8",  WACOM_PKGLEN_GRAPHIRE,  16704, 12064,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x15 =
 -	{ "Wacom Graphire4 4x5", 10208, 7424, 511, 63,
 -	  WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire4 4x5",  WACOM_PKGLEN_GRAPHIRE,  10208,  7424,  511,
 +	  63, WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x16 =
 -	{ "Wacom Graphire4 6x8", 16704, 12064, 511, 63,
 -	  WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire4 6x8",  WACOM_PKGLEN_GRAPHIRE,  16704, 12064,  511,
 +	  63, WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x17 =
 -	{ "Wacom BambooFun 4x5", 14760, 9225, 511, 63,
 -	  WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom BambooFun 4x5",  WACOM_PKGLEN_BBFUN,     14760,  9225,  511,
 +	  63, WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x18 =
 -	{ "Wacom BambooFun 6x8", 21648, 13530, 511, 63,
 -	  WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom BambooFun 6x8",  WACOM_PKGLEN_BBFUN,     21648, 13530,  511,
 +	  63, WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x19 =
 -	{ "Wacom Bamboo1 Medium", 16704, 12064, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Bamboo1 Medium", WACOM_PKGLEN_GRAPHIRE,  16704, 12064,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x60 =
 -	{ "Wacom Volito", 5104, 3712, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom Volito",         WACOM_PKGLEN_GRAPHIRE,   5104,  3712,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x61 =
 -	{ "Wacom PenStation2", 3250, 2320, 255, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom PenStation2",    WACOM_PKGLEN_GRAPHIRE,   3250,  2320,  255,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x62 =
 -	{ "Wacom Volito2 4x5", 5104, 3712, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom Volito2 4x5",    WACOM_PKGLEN_GRAPHIRE,   5104,  3712,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x63 =
 -	{ "Wacom Volito2 2x3", 3248, 2320, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom Volito2 2x3",    WACOM_PKGLEN_GRAPHIRE,   3248,  2320,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x64 =
 -	{ "Wacom PenPartner2", 3250, 2320, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom PenPartner2",    WACOM_PKGLEN_GRAPHIRE,   3250,  2320,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x65 =
 -	{ "Wacom Bamboo", 14760, 9225, 511, 63,
 -	  WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo",         WACOM_PKGLEN_BBFUN,     14760,  9225,  511,
 +	  63, WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x69 =
 -	{ "Wacom Bamboo1", 5104, 3712, 511, 63,
 -	  GRAPHIRE, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
 +	{ "Wacom Bamboo1",        WACOM_PKGLEN_GRAPHIRE,   5104,  3712,  511,
 +	  63, GRAPHIRE, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
  static const struct wacom_features wacom_features_0x6A =
 -	{ "Wacom Bamboo1 4x6", 14760, 9225, 1023, 63,
 -	  GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo1 4x6",    WACOM_PKGLEN_GRAPHIRE,  14760,  9225, 1023,
 +	  63, GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x6B =
 -	{ "Wacom Bamboo1 5x8", 21648, 13530, 1023, 63,
 -	  GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo1 5x8",    WACOM_PKGLEN_GRAPHIRE,  21648, 13530, 1023,
 +	  63, GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x20 =
 -	{ "Wacom Intuos 4x5", 12700, 10600, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 4x5",     WACOM_PKGLEN_INTUOS,    12700, 10600, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x21 =
 -	{ "Wacom Intuos 6x8", 20320, 16240, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 6x8",     WACOM_PKGLEN_INTUOS,    20320, 16240, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x22 =
 -	{ "Wacom Intuos 9x12", 30480, 24060, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 9x12",    WACOM_PKGLEN_INTUOS,    30480, 24060, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x23 =
 -	{ "Wacom Intuos 12x12", 30480, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 12x12",   WACOM_PKGLEN_INTUOS,    30480, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x24 =
 -	{ "Wacom Intuos 12x18", 45720, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 12x18",   WACOM_PKGLEN_INTUOS,    45720, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x30 =
 -	{ "Wacom PL400", 5408, 4056, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL400",          WACOM_PKGLEN_GRAPHIRE,   5408,  4056,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x31 =
 -	{ "Wacom PL500", 6144, 4608, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL500",          WACOM_PKGLEN_GRAPHIRE,   6144,  4608,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x32 =
 -	{ "Wacom PL600", 6126, 4604, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL600",          WACOM_PKGLEN_GRAPHIRE,   6126,  4604,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x33 =
 -	{ "Wacom PL600SX", 6260, 5016, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL600SX",        WACOM_PKGLEN_GRAPHIRE,   6260,  5016,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x34 =
 -	{ "Wacom PL550", 6144, 4608, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL550",          WACOM_PKGLEN_GRAPHIRE,   6144,  4608,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x35 =
 -	{ "Wacom PL800", 7220, 5780, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL800",          WACOM_PKGLEN_GRAPHIRE,   7220,  5780,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x37 =
 -	{ "Wacom PL700", 6758, 5406, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL700",          WACOM_PKGLEN_GRAPHIRE,   6758,  5406,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x38 =
 -	{ "Wacom PL510", 6282, 4762, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL510",          WACOM_PKGLEN_GRAPHIRE,   6282,  4762,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x39 =
 -	{ "Wacom DTU710", 34080, 27660, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTU710",         WACOM_PKGLEN_GRAPHIRE,  34080, 27660,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0xC4 =
 -	{ "Wacom DTF521", 6282, 4762, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTF521",         WACOM_PKGLEN_GRAPHIRE,   6282,  4762,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0xC0 =
 -	{ "Wacom DTF720", 6858, 5506, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTF720",         WACOM_PKGLEN_GRAPHIRE,   6858,  5506,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0xC2 =
 -	{ "Wacom DTF720a", 6858, 5506, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTF720a",        WACOM_PKGLEN_GRAPHIRE,   6858,  5506,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x03 =
 -	{ "Wacom Cintiq Partner", 20480, 15360, 511, 0,
 -	  PTU, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom Cintiq Partner", WACOM_PKGLEN_GRAPHIRE,  20480, 15360,  511,
 +	  0, PTU, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x41 =
 -	{ "Wacom Intuos2 4x5", 12700, 10600, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 4x5",    WACOM_PKGLEN_INTUOS,    12700, 10600, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x42 =
 -	{ "Wacom Intuos2 6x8", 20320, 16240, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 6x8",    WACOM_PKGLEN_INTUOS,    20320, 16240, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x43 =
 -	{ "Wacom Intuos2 9x12", 30480, 24060, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 9x12",   WACOM_PKGLEN_INTUOS,    30480, 24060, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x44 =
 -	{ "Wacom Intuos2 12x12", 30480, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 12x12",  WACOM_PKGLEN_INTUOS,    30480, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x45 =
 -	{ "Wacom Intuos2 12x18", 45720, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 12x18",  WACOM_PKGLEN_INTUOS,    45720, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xB0 =
++<<<<<<< HEAD
 +	{ "Wacom Intuos3 4x5",    WACOM_PKGLEN_INTUOS,    25400, 20320, 1023,
 +	  63, INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB1 =
 +	{ "Wacom Intuos3 6x8",    WACOM_PKGLEN_INTUOS,    40640, 30480, 1023,
 +	  63, INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB2 =
 +	{ "Wacom Intuos3 9x12",   WACOM_PKGLEN_INTUOS,    60960, 45720, 1023,
 +	  63, INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB3 =
 +	{ "Wacom Intuos3 12x12",  WACOM_PKGLEN_INTUOS,    60960, 60960, 1023,
 +	  63, INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB4 =
 +	{ "Wacom Intuos3 12x19",  WACOM_PKGLEN_INTUOS,    97536, 60960, 1023,
 +	  63, INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB5 =
 +	{ "Wacom Intuos3 6x11",   WACOM_PKGLEN_INTUOS,    54204, 31750, 1023,
 +	  63, INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB7 =
 +	{ "Wacom Intuos3 4x6",    WACOM_PKGLEN_INTUOS,    31496, 19685, 1023,
 +	  63, INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB8 =
 +	{ "Wacom Intuos4 4x6",    WACOM_PKGLEN_INTUOS,    31496, 19685, 2047,
 +	  63, INTUOS4S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xB9 =
 +	{ "Wacom Intuos4 6x9",    WACOM_PKGLEN_INTUOS,    44704, 27940, 2047,
 +	  63, INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xBA =
 +	{ "Wacom Intuos4 8x13",   WACOM_PKGLEN_INTUOS,    65024, 40640, 2047,
 +	  63, INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xBB =
 +	{ "Wacom Intuos4 12x19",  WACOM_PKGLEN_INTUOS,    97536, 60960, 2047,
 +	  63, INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xBC =
 +	{ "Wacom Intuos4 WL",     WACOM_PKGLEN_INTUOS,    40640, 25400, 2047,
 +	  63, INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0x26 =
 +	{ "Wacom Intuos5 touch S", WACOM_PKGLEN_INTUOS,  31496, 19685, 2047,
 +	  63, INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
 +static const struct wacom_features wacom_features_0x27 =
 +	{ "Wacom Intuos5 touch M", WACOM_PKGLEN_INTUOS,  44704, 27940, 2047,
 +	  63, INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
 +static const struct wacom_features wacom_features_0x28 =
 +	{ "Wacom Intuos5 touch L", WACOM_PKGLEN_INTUOS, 65024, 40640, 2047,
 +	  63, INTUOS5L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
 +static const struct wacom_features wacom_features_0x29 =
 +	{ "Wacom Intuos5 S", WACOM_PKGLEN_INTUOS,  31496, 19685, 2047,
 +	  63, INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0x2A =
 +	{ "Wacom Intuos5 M", WACOM_PKGLEN_INTUOS,  44704, 27940, 2047,
 +	  63, INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0x314 =
 +	{ "Wacom Intuos Pro S", WACOM_PKGLEN_INTUOS,  31496, 19685, 2047,
 +	  63, INTUOSPS, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
 +static const struct wacom_features wacom_features_0x315 =
 +	{ "Wacom Intuos Pro M", WACOM_PKGLEN_INTUOS,  44704, 27940, 2047,
 +	  63, INTUOSPM, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
 +static const struct wacom_features wacom_features_0x317 =
 +	{ "Wacom Intuos Pro L", WACOM_PKGLEN_INTUOS,  65024, 40640, 2047,
 +	  63, INTUOSPL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
 +static const struct wacom_features wacom_features_0xF4 =
 +	{ "Wacom Cintiq 24HD",       WACOM_PKGLEN_INTUOS,   104280, 65400, 2047,
 +	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0xF8 =
 +	{ "Wacom Cintiq 24HD touch", WACOM_PKGLEN_INTUOS,   104280, 65400, 2047, /* Pen */
 +	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
++=======
+ 	{ "Wacom Intuos3 4x5", 25400, 20320, 1023, 63,
+ 	  INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 4 };
+ static const struct wacom_features wacom_features_0xB1 =
+ 	{ "Wacom Intuos3 6x8", 40640, 30480, 1023, 63,
+ 	  INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 8 };
+ static const struct wacom_features wacom_features_0xB2 =
+ 	{ "Wacom Intuos3 9x12", 60960, 45720, 1023, 63,
+ 	  INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 8 };
+ static const struct wacom_features wacom_features_0xB3 =
+ 	{ "Wacom Intuos3 12x12", 60960, 60960, 1023, 63,
+ 	  INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 8 };
+ static const struct wacom_features wacom_features_0xB4 =
+ 	{ "Wacom Intuos3 12x19", 97536, 60960, 1023, 63,
+ 	  INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 8 };
+ static const struct wacom_features wacom_features_0xB5 =
+ 	{ "Wacom Intuos3 6x11", 54204, 31750, 1023, 63,
+ 	  INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 8 };
+ static const struct wacom_features wacom_features_0xB7 =
+ 	{ "Wacom Intuos3 4x6", 31496, 19685, 1023, 63,
+ 	  INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 4 };
+ static const struct wacom_features wacom_features_0xB8 =
+ 	{ "Wacom Intuos4 4x6", 31496, 19685, 2047, 63,
+ 	  INTUOS4S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 7 };
+ static const struct wacom_features wacom_features_0xB9 =
+ 	{ "Wacom Intuos4 6x9", 44704, 27940, 2047, 63,
+ 	  INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9 };
+ static const struct wacom_features wacom_features_0xBA =
+ 	{ "Wacom Intuos4 8x13", 65024, 40640, 2047, 63,
+ 	  INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9 };
+ static const struct wacom_features wacom_features_0xBB =
+ 	{ "Wacom Intuos4 12x19", 97536, 60960, 2047, 63,
+ 	  INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9 };
+ static const struct wacom_features wacom_features_0xBC =
+ 	{ "Wacom Intuos4 WL", 40640, 25400, 2047, 63,
+ 	  INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9 };
+ static const struct wacom_features wacom_features_0xBD =
+ 	{ "Wacom Intuos4 WL", 40640, 25400, 2047, 63,
+ 	  INTUOS4WL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9 };
+ static const struct wacom_features wacom_features_0x26 =
+ 	{ "Wacom Intuos5 touch S", 31496, 19685, 2047, 63,
+ 	  INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 7, .touch_max = 16 };
+ static const struct wacom_features wacom_features_0x27 =
+ 	{ "Wacom Intuos5 touch M", 44704, 27940, 2047, 63,
+ 	  INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9, .touch_max = 16 };
+ static const struct wacom_features wacom_features_0x28 =
+ 	{ "Wacom Intuos5 touch L", 65024, 40640, 2047, 63,
+ 	  INTUOS5L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9, .touch_max = 16 };
+ static const struct wacom_features wacom_features_0x29 =
+ 	{ "Wacom Intuos5 S", 31496, 19685, 2047, 63,
+ 	  INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 7 };
+ static const struct wacom_features wacom_features_0x2A =
+ 	{ "Wacom Intuos5 M", 44704, 27940, 2047, 63,
+ 	  INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9 };
+ static const struct wacom_features wacom_features_0x314 =
+ 	{ "Wacom Intuos Pro S", 31496, 19685, 2047, 63,
+ 	  INTUOSPS, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 7, .touch_max = 16,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x315 =
+ 	{ "Wacom Intuos Pro M", 44704, 27940, 2047, 63,
+ 	  INTUOSPM, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9, .touch_max = 16,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x317 =
+ 	{ "Wacom Intuos Pro L", 65024, 40640, 2047, 63,
+ 	  INTUOSPL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9, .touch_max = 16,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0xF4 =
+ 	{ "Wacom Cintiq 24HD", 104080, 65200, 2047, 63,
+ 	  WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 16,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
+ static const struct wacom_features wacom_features_0xF8 =
+ 	{ "Wacom Cintiq 24HD touch", 104080, 65200, 2047, 63, /* Pen */
+ 	  WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 16,
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf6 };
  static const struct wacom_features wacom_features_0xF6 =
  	{ "Wacom Cintiq 24HD touch", .type = WACOM_24HDT, /* Touch */
 -	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf8, .touch_max = 10,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf8, .touch_max = 10 };
  static const struct wacom_features wacom_features_0x32A =
++<<<<<<< HEAD
 +	{ "Wacom Cintiq 27QHD", WACOM_PKGLEN_INTUOS, 119740, 67520, 2047, 63,
 +	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0x32B =
 +	{ "Wacom Cintiq 27QHD touch", WACOM_PKGLEN_INTUOS, 119740, 67520, 2047, 63,
 +	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
++=======
+ 	{ "Wacom Cintiq 27QHD", 119740, 67520, 2047, 63,
+ 	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 0,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
+ static const struct wacom_features wacom_features_0x32B =
+ 	{ "Wacom Cintiq 27QHD touch", 119740, 67520, 2047, 63,
+ 	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 0,
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32C };
  static const struct wacom_features wacom_features_0x32C =
  	{ "Wacom Cintiq 27QHD touch", .type = WACOM_27QHDT,
 -	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32B, .touch_max = 10 };
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32B, .touch_max = 10,
 +	  .pktlen = WACOM_PKGLEN_INTUOS };
  static const struct wacom_features wacom_features_0x3F =
++<<<<<<< HEAD
 +	{ "Wacom Cintiq 21UX",    WACOM_PKGLEN_INTUOS,    87200, 65600, 1023,
 +	  63, CINTIQ, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xC5 =
 +	{ "Wacom Cintiq 20WSX",   WACOM_PKGLEN_INTUOS,    86680, 54180, 1023,
 +	  63, WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0xC6 =
 +	{ "Wacom Cintiq 12WX",    WACOM_PKGLEN_INTUOS,    53020, 33440, 1023,
 +	  63, WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +static const struct wacom_features wacom_features_0x304 =
 +	{ "Wacom Cintiq 13HD",    WACOM_PKGLEN_INTUOS,    59352, 33648, 1023,
 +	  63, WACOM_13HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
++=======
+ 	{ "Wacom Cintiq 21UX", 87200, 65600, 1023, 63,
+ 	  CINTIQ, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 8 };
+ static const struct wacom_features wacom_features_0xC5 =
+ 	{ "Wacom Cintiq 20WSX", 86680, 54180, 1023, 63,
+ 	  WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 10 };
+ static const struct wacom_features wacom_features_0xC6 =
+ 	{ "Wacom Cintiq 12WX", 53020, 33440, 1023, 63,
+ 	  WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 10 };
+ static const struct wacom_features wacom_features_0x304 =
+ 	{ "Wacom Cintiq 13HD", 59152, 33448, 1023, 63,
+ 	  WACOM_13HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
+ static const struct wacom_features wacom_features_0x333 =
+ 	{ "Wacom Cintiq 13HD touch", 59152, 33448, 2047, 63,
+ 	  WACOM_13HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x335 };
+ static const struct wacom_features wacom_features_0x335 =
+ 	{ "Wacom Cintiq 13HD touch", .type = WACOM_24HDT, /* Touch */
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x333, .touch_max = 10,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  static const struct wacom_features wacom_features_0xC7 =
 -	{ "Wacom DTU1931", 37832, 30305, 511, 0,
 -	  PL, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom DTU1931",        WACOM_PKGLEN_GRAPHIRE,  37832, 30305,  511,
 +	  0, PL, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xCE =
 -	{ "Wacom DTU2231", 47864, 27011, 511, 0,
 -	  DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBMOUSE };
 +	{ "Wacom DTU2231",        WACOM_PKGLEN_GRAPHIRE,  47864, 27011,  511,
 +	  0, DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xF0 =
++<<<<<<< HEAD
 +	{ "Wacom DTU1631",        WACOM_PKGLEN_GRAPHIRE,  34623, 19553,  511,
 +	  0, DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +static const struct wacom_features wacom_features_0x57 =
 +	{ "Wacom DTK2241",        WACOM_PKGLEN_INTUOS,    95640, 54060, 2047,
 +	  63, DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0x59 = /* Pen */
 +	{ "Wacom DTH2242",        WACOM_PKGLEN_INTUOS,    95640, 54060, 2047,
 +	  63, DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
++=======
+ 	{ "Wacom DTU1631", 34623, 19553, 511, 0,
+ 	  DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
+ static const struct wacom_features wacom_features_0xFB =
+ 	{ "Wacom DTU1031", 21896, 13760, 511, 0,
+ 	  DTUS, WACOM_INTUOS_RES, WACOM_INTUOS_RES, 4,
+ 	  WACOM_DTU_OFFSET, WACOM_DTU_OFFSET };
+ static const struct wacom_features wacom_features_0x32F =
+ 	{ "Wacom DTU1031X", 22472, 12728, 511, 0,
+ 	  DTUSX, WACOM_INTUOS_RES, WACOM_INTUOS_RES, 0,
+ 	  WACOM_DTU_OFFSET, WACOM_DTU_OFFSET };
+ static const struct wacom_features wacom_features_0x336 =
+ 	{ "Wacom DTU1141", 23472, 13203, 1023, 0,
+ 	  DTUS, WACOM_INTUOS_RES, WACOM_INTUOS_RES, 4 };
+ static const struct wacom_features wacom_features_0x57 =
+ 	{ "Wacom DTK2241", 95640, 54060, 2047, 63,
+ 	  DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 6,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
+ static const struct wacom_features wacom_features_0x59 = /* Pen */
+ 	{ "Wacom DTH2242", 95640, 54060, 2047, 63,
+ 	  DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 6,
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5D };
  static const struct wacom_features wacom_features_0x5D = /* Touch */
  	{ "Wacom DTH2242",       .type = WACOM_24HDT,
 -	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x59, .touch_max = 10,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x59, .touch_max = 10 };
  static const struct wacom_features wacom_features_0xCC =
++<<<<<<< HEAD
 +	{ "Wacom Cintiq 21UX2",   WACOM_PKGLEN_INTUOS,    87000, 65400, 2047,
 +	  63, WACOM_21UX2, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0xFA =
 +	{ "Wacom Cintiq 22HD",    WACOM_PKGLEN_INTUOS,    95640, 54060, 2047,
 +	  63, WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0x5B =
 +	{ "Wacom Cintiq 22HDT", WACOM_PKGLEN_INTUOS,      95640, 54060, 2047,
 +	  63, WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
++=======
+ 	{ "Wacom Cintiq 21UX2", 86800, 65200, 2047, 63,
+ 	  WACOM_21UX2, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 18,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
+ static const struct wacom_features wacom_features_0xFA =
+ 	{ "Wacom Cintiq 22HD", 95440, 53860, 2047, 63,
+ 	  WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 18,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
+ static const struct wacom_features wacom_features_0x5B =
+ 	{ "Wacom Cintiq 22HDT", 95440, 53860, 2047, 63,
+ 	  WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 18,
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5e };
  static const struct wacom_features wacom_features_0x5E =
  	{ "Wacom Cintiq 22HDT", .type = WACOM_24HDT,
 -	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5b, .touch_max = 10,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5b, .touch_max = 10 };
  static const struct wacom_features wacom_features_0x90 =
 -	{ "Wacom ISDv4 90", 26202, 16325, 255, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 90",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x93 =
 -	{ "Wacom ISDv4 93", 26202, 16325, 255, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 93",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x97 =
 -	{ "Wacom ISDv4 97", 26202, 16325, 511, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 97",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  511,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x9A =
 -	{ "Wacom ISDv4 9A", 26202, 16325, 255, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 9A",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x9F =
 -	{ "Wacom ISDv4 9F", 26202, 16325, 255, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 9F",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xE2 =
 -	{ "Wacom ISDv4 E2", 26202, 16325, 255, 0,
 -	  TABLETPC2FG, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom ISDv4 E2",       WACOM_PKGLEN_TPC2FG,    26202, 16325,  255,
 +	  0, TABLETPC2FG, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xE3 =
 -	{ "Wacom ISDv4 E3", 26202, 16325, 255, 0,
 -	  TABLETPC2FG, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom ISDv4 E3",       WACOM_PKGLEN_TPC2FG,    26202, 16325,  255,
 +	  0, TABLETPC2FG, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xE5 =
 -	{ "Wacom ISDv4 E5", 26202, 16325, 255, 0,
 -	  MTSCREEN, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 E5",       WACOM_PKGLEN_MTOUCH,    26202, 16325,  255,
 +	  0, MTSCREEN, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xE6 =
 -	{ "Wacom ISDv4 E6", 27760, 15694, 255, 0,
 -	  TABLETPC2FG, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom ISDv4 E6",       WACOM_PKGLEN_TPC2FG,    27760, 15694,  255,
 +	  0, TABLETPC2FG, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xEC =
 -	{ "Wacom ISDv4 EC", 25710, 14500, 255, 0,
 -	  TABLETPC,    WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 EC",       WACOM_PKGLEN_GRAPHIRE,  25710, 14500,  255,
 +	  0, TABLETPC,    WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xED =
 -	{ "Wacom ISDv4 ED", 26202, 16325, 255, 0,
 -	  TABLETPCE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 ED",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  255,
 +	  0, TABLETPCE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xEF =
 -	{ "Wacom ISDv4 EF", 26202, 16325, 255, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 EF",       WACOM_PKGLEN_GRAPHIRE,  26202, 16325,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x100 =
 -	{ "Wacom ISDv4 100", 26202, 16325, 255, 0,
 -	  MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 100",      WACOM_PKGLEN_MTTPC,     26202, 16325,  255,
 +	  0, MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x101 =
 -	{ "Wacom ISDv4 101", 26202, 16325, 255, 0,
 -	  MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 101",      WACOM_PKGLEN_MTTPC,     26202, 16325,  255,
 +	  0, MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x10D =
 -	{ "Wacom ISDv4 10D", 26202, 16325, 255, 0,
 -	  MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x10E =
 -	{ "Wacom ISDv4 10E", 27760, 15694, 255, 0,
 -	  MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x10F =
 -	{ "Wacom ISDv4 10F", 27760, 15694, 255, 0,
 -	  MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x116 =
 -	{ "Wacom ISDv4 116", 26202, 16325, 255, 0,
 -	  TABLETPCE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x12C =
 -	{ "Wacom ISDv4 12C", 27848, 15752, 2047, 0,
 -	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 10D",      WACOM_PKGLEN_MTTPC,     26202, 16325,  255,
 +	  0, MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x4001 =
 -	{ "Wacom ISDv4 4001", 26202, 16325, 255, 0,
 -	  MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x4004 =
 -	{ "Wacom ISDv4 4004", 11060, 6220, 255, 0,
 -	  MTTPC_B, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x5000 =
 -	{ "Wacom ISDv4 5000", 27848, 15752, 1023, 0,
 -	  MTTPC_B, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x5002 =
 -	{ "Wacom ISDv4 5002", 29576, 16724, 1023, 0,
 -	  MTTPC_B, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom ISDv4 4001",      WACOM_PKGLEN_MTTPC,     26202, 16325,  255,
 +	  0, MTTPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x47 =
 -	{ "Wacom Intuos2 6x8", 20320, 16240, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 6x8",    WACOM_PKGLEN_INTUOS,    20320, 16240, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x84 =
 -	{ "Wacom Wireless Receiver", 0, 0, 0, 0,
 -	  WIRELESS, 0, 0, .touch_max = 16 };
 +	{ "Wacom Wireless Receiver", WACOM_PKGLEN_WIRELESS, 0, 0, 0,
 +	  0, WIRELESS, 0, 0, .touch_max = 16 };
  static const struct wacom_features wacom_features_0xD0 =
 -	{ "Wacom Bamboo 2FG", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom Bamboo 2FG",     WACOM_PKGLEN_BBFUN,     14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xD1 =
 -	{ "Wacom Bamboo 2FG 4x5", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom Bamboo 2FG 4x5", WACOM_PKGLEN_BBFUN,     14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xD2 =
 -	{ "Wacom Bamboo Craft", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom Bamboo Craft",   WACOM_PKGLEN_BBFUN,     14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xD3 =
 -	{ "Wacom Bamboo 2FG 6x8", 21648, 13700, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom Bamboo 2FG 6x8", WACOM_PKGLEN_BBFUN,     21648, 13700, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xD4 =
 -	{ "Wacom Bamboo Pen", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo Pen",     WACOM_PKGLEN_BBFUN,     14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xD5 =
 -	{ "Wacom Bamboo Pen 6x8", 21648, 13700, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo Pen 6x8",     WACOM_PKGLEN_BBFUN, 21648, 13700, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xD6 =
 -	{ "Wacom BambooPT 2FG 4x5", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom BambooPT 2FG 4x5", WACOM_PKGLEN_BBFUN,   14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xD7 =
 -	{ "Wacom BambooPT 2FG Small", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom BambooPT 2FG Small", WACOM_PKGLEN_BBFUN, 14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xD8 =
 -	{ "Wacom Bamboo Comic 2FG", 21648, 13700, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom Bamboo Comic 2FG", WACOM_PKGLEN_BBFUN,   21648, 13700, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xDA =
 -	{ "Wacom Bamboo 2FG 4x5 SE", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 -static const struct wacom_features wacom_features_0xDB =
 -	{ "Wacom Bamboo 2FG 6x8 SE", 21648, 13700, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 2 };
 +	{ "Wacom Bamboo 2FG 4x5 SE", WACOM_PKGLEN_BBFUN,  14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
 +static struct wacom_features wacom_features_0xDB =
 +	{ "Wacom Bamboo 2FG 6x8 SE", WACOM_PKGLEN_BBFUN,  21648, 13700, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 2 };
  static const struct wacom_features wacom_features_0xDD =
 -        { "Wacom Bamboo Connect", 14720, 9200, 1023, 31,
 -          BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +        { "Wacom Bamboo Connect", WACOM_PKGLEN_BBPEN,     14720,  9200, 1023,
 +          31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xDE =
 -        { "Wacom Bamboo 16FG 4x5", 14720, 9200, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 16 };
 +        { "Wacom Bamboo 16FG 4x5", WACOM_PKGLEN_BBPEN,    14720,  9200, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0xDF =
 -        { "Wacom Bamboo 16FG 6x8", 21648, 13700, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 16 };
 -static const struct wacom_features wacom_features_0x300 =
 -	{ "Wacom Bamboo One S", 14720, 9225, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x301 =
 -	{ "Wacom Bamboo One M", 21648, 13530, 1023, 31,
 -	  BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 -static const struct wacom_features wacom_features_0x302 =
 -	{ "Wacom Intuos PT S", 15200, 9500, 1023, 31,
 -	  INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 16,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 -static const struct wacom_features wacom_features_0x303 =
 -	{ "Wacom Intuos PT M", 21600, 13500, 1023, 31,
 -	  INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES, .touch_max = 16,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 -static const struct wacom_features wacom_features_0x30E =
 -	{ "Wacom Intuos S", 15200, 9500, 1023, 31,
 -	  INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +        { "Wacom Bamboo 16FG 6x8", WACOM_PKGLEN_BBPEN,    21648, 13700, 1023,
 +	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0x6004 =
++<<<<<<< HEAD
 +	{ "ISD-V4",               WACOM_PKGLEN_GRAPHIRE,  12800,  8000,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
++=======
+ 	{ "ISD-V4", 12800, 8000, 255, 0,
+ 	  TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
+ static const struct wacom_features wacom_features_0x307 =
+ 	{ "Wacom ISDv5 307", 59152, 33448, 2047, 63,
+ 	  CINTIQ_HYBRID, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x309 };
+ static const struct wacom_features wacom_features_0x309 =
+ 	{ "Wacom ISDv5 309", .type = WACOM_24HDT, /* Touch */
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x0307, .touch_max = 10,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x30A =
+ 	{ "Wacom ISDv5 30A", 59152, 33448, 2047, 63,
+ 	  CINTIQ_HYBRID, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 9,
+ 	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x30C };
+ static const struct wacom_features wacom_features_0x30C =
+ 	{ "Wacom ISDv5 30C", .type = WACOM_24HDT, /* Touch */
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x30A, .touch_max = 10,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x318 =
+ 	{ "Wacom USB Bamboo PAD", 4095, 4095, /* Touch */
+ 	  .type = BAMBOO_PAD, 35, 48, .touch_max = 4 };
+ static const struct wacom_features wacom_features_0x319 =
+ 	{ "Wacom Wireless Bamboo PAD", 4095, 4095, /* Touch */
+ 	  .type = BAMBOO_PAD, 35, 48, .touch_max = 4 };
+ static const struct wacom_features wacom_features_0x323 =
+ 	{ "Wacom Intuos P M", 21600, 13500, 1023, 31,
+ 	  INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
++>>>>>>> 70ee06c5f447 (HID: wacom: Set button bits based on a new numbered_buttons)
  
 -static const struct wacom_features wacom_features_HID_ANY_ID =
 -	{ "Wacom HID", .type = HID_GENERIC };
 -
 -#define USB_DEVICE_WACOM(prod)						\
 -	HID_DEVICE(BUS_USB, HID_GROUP_WACOM, USB_VENDOR_ID_WACOM, prod),\
 -	.driver_data = (kernel_ulong_t)&wacom_features_##prod
 +#define USB_DEVICE_WACOM(prod)					\
 +	USB_DEVICE(USB_VENDOR_ID_WACOM, prod),			\
 +	.driver_info = (kernel_ulong_t)&wacom_features_##prod
  
 -#define BT_DEVICE_WACOM(prod)						\
 -	HID_DEVICE(BUS_BLUETOOTH, HID_GROUP_WACOM, USB_VENDOR_ID_WACOM, prod),\
 -	.driver_data = (kernel_ulong_t)&wacom_features_##prod
 -
 -#define I2C_DEVICE_WACOM(prod)						\
 -	HID_DEVICE(BUS_I2C, HID_GROUP_WACOM, USB_VENDOR_ID_WACOM, prod),\
 -	.driver_data = (kernel_ulong_t)&wacom_features_##prod
 +#define USB_DEVICE_DETAILED(prod, class, sub, proto)			\
 +	USB_DEVICE_AND_INTERFACE_INFO(USB_VENDOR_ID_WACOM, prod, class,	\
 +				      sub, proto),			\
 +	.driver_info = (kernel_ulong_t)&wacom_features_##prod
  
  #define USB_DEVICE_LENOVO(prod)					\
 -	HID_USB_DEVICE(USB_VENDOR_ID_LENOVO, prod),			\
 -	.driver_data = (kernel_ulong_t)&wacom_features_##prod
 +	USB_DEVICE(USB_VENDOR_ID_LENOVO, prod),			\
 +	.driver_info = (kernel_ulong_t)&wacom_features_##prod
  
 -const struct hid_device_id wacom_ids[] = {
 +const struct usb_device_id wacom_ids[] = {
  	{ USB_DEVICE_WACOM(0x00) },
 -	{ USB_DEVICE_WACOM(0x03) },
  	{ USB_DEVICE_WACOM(0x10) },
  	{ USB_DEVICE_WACOM(0x11) },
  	{ USB_DEVICE_WACOM(0x12) },
* Unmerged path drivers/hid/wacom_wac.c
diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d220d069f329..02615b80f696 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -115,6 +115,7 @@ struct wacom_features {
 	int type;
 	int x_resolution;
 	int y_resolution;
+	int numbered_buttons;
 	int x_min;
 	int y_min;
 	int device_type;
