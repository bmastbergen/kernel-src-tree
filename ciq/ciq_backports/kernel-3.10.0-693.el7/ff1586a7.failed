mei: enqueue consecutive reads

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alexander Usyskin <alexander.usyskin@intel.com>
commit ff1586a7ea57a4758a3f10ad7c9cdb26edcbd7f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ff1586a7.failed

The FW supports only one pending read per host client, in order to
support  issuing of consecutive reads the driver  queues read requests
internally and send them to the firmware after pending one has
completed.

	Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit ff1586a7ea57a4758a3f10ad7c9cdb26edcbd7f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/main.c
diff --cc drivers/misc/mei/main.c
index 07ace00d77ac,650061b6ab9b..000000000000
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@@ -209,18 -210,9 +212,22 @@@ static ssize_t mei_read(struct file *fi
  			rets = -ENODEV;
  			goto out;
  		}
- 	}
  
++<<<<<<< HEAD
 +	cb = mei_cl_read_cb(cl, file);
 +	if (!cb) {
 +		if (mei_cl_is_fixed_address(cl) && dev->allow_fixed_address) {
 +			cb = mei_cl_read_cb(cl, NULL);
 +			if (cb)
 +				goto copy_buffer;
 +		}
 +		rets = 0;
 +		goto out;
 +	}
++=======
+ 		cb = mei_cl_read_cb(cl, file);
+ 	} while (!cb);
++>>>>>>> ff1586a7ea57 (mei: enqueue consecutive reads)
  
  copy_buffer:
  	/* now copy the data to user space */
diff --git a/drivers/misc/mei/interrupt.c b/drivers/misc/mei/interrupt.c
index 298ef580e3c9..57796bcd86f1 100644
--- a/drivers/misc/mei/interrupt.c
+++ b/drivers/misc/mei/interrupt.c
@@ -217,6 +217,9 @@ static int mei_cl_irq_read(struct mei_cl *cl, struct mei_cl_cb *cb,
 	int slots;
 	int ret;
 
+	if (!list_empty(&cl->rd_pending))
+		return 0;
+
 	msg_slots = mei_data2slots(sizeof(struct hbm_flow_control));
 	slots = mei_hbuf_empty_slots(dev);
 
* Unmerged path drivers/misc/mei/main.c
