perf trace: Make --pf maj/min/all use callchains too

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 0c3a6ef4ea54a179328734a45b7f7698e44ad805
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0c3a6ef4.failed

Forgot about page faults, a software event, when adding support for callchains,
fix it:

  # trace --no-syscalls --pf maj --call dwarf
     0.000 ( 0.000 ms): Xorg/2068 majfault [sfbSegment1+0x0] => /usr/lib64/xorg/modules/drivers/intel_drv.so@0x11b490 (x.)
                                       sfbSegment1+0x0 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       fbPolySegment32+0x361 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       sna_poly_segment+0x743 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       damagePolySegment+0x77 (/usr/libexec/Xorg)
                                       ProcPolySegment+0xe7 (/usr/libexec/Xorg)
                                       Dispatch+0x25f (/usr/libexec/Xorg)
                                       dix_main+0x3c3 (/usr/libexec/Xorg)
                                       __libc_start_main+0xf0 (/usr/lib64/libc-2.22.so)
                                       _start+0x29 (/usr/libexec/Xorg)
     0.257 ( 0.000 ms): Xorg/2068 majfault [miZeroClipLine+0x0] => /usr/libexec/Xorg@0x18e830 (x.)
                                       miZeroClipLine+0x0 (/usr/libexec/Xorg)
                                       _fbSegment+0x2c0 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       sfbSegment1+0x67 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       fbPolySegment32+0x361 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       sna_poly_segment+0x743 (/usr/lib64/xorg/modules/drivers/intel_drv.so)
                                       damagePolySegment+0x77 (/usr/libexec/Xorg)
                                       ProcPolySegment+0xe7 (/usr/libexec/Xorg)
                                       Dispatch+0x25f (/usr/libexec/Xorg)
                                       dix_main+0x3c3 (/usr/libexec/Xorg)
                                       __libc_start_main+0xf0 (/usr/lib64/libc-2.22.so)
                                       _start+0x29 (/usr/libexec/Xorg)
^C#

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Milian Wolff <milian.wolff@kdab.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-8h6ssirw5z15qyhy2lwd6f89@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0c3a6ef4ea54a179328734a45b7f7698e44ad805)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
diff --cc tools/perf/builtin-trace.c
index 08555ff210e3,d1bbcb9abca3..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2448,7 -2550,45 +2453,49 @@@ static int trace__run(struct trace *tra
  		goto out_delete_evlist;
  	}
  
++<<<<<<< HEAD
 +	perf_evlist__config(evlist, &trace->opts);
++=======
+ 	perf_evlist__config(evlist, &trace->opts, NULL);
+ 
+ 	if (callchain_param.enabled) {
+ 		bool use_identifier = false;
+ 
+ 		if (trace->syscalls.events.sys_exit) {
+ 			perf_evsel__config_callchain(trace->syscalls.events.sys_exit,
+ 						     &trace->opts, &callchain_param);
+ 			use_identifier = true;
+ 		}
+ 
+ 		if (pgfault_maj) {
+ 			perf_evsel__config_callchain(pgfault_maj, &trace->opts, &callchain_param);
+ 			use_identifier = true;
+ 		}
+ 
+ 		if (pgfault_min) {
+ 			perf_evsel__config_callchain(pgfault_min, &trace->opts, &callchain_param);
+ 			use_identifier = true;
+ 		}
+ 
+ 		if (use_identifier) {
+ 		       /*
+ 			* Now we have evsels with different sample_ids, use
+ 			* PERF_SAMPLE_IDENTIFIER to map from sample to evsel
+ 			* from a fixed position in each ring buffer record.
+ 			*
+ 			* As of this the changeset introducing this comment, this
+ 			* isn't strictly needed, as the fields that can come before
+ 			* PERF_SAMPLE_ID are all used, but we'll probably disable
+ 			* some of those for things like copying the payload of
+ 			* pointer syscall arguments, and for vfs_getname we don't
+ 			* need PERF_SAMPLE_ADDR and PERF_SAMPLE_IP, so do this
+ 			* here as a warning we need to use PERF_SAMPLE_IDENTIFIER.
+ 			*/
+ 			perf_evlist__set_sample_bit(evlist, IDENTIFIER);
+ 			perf_evlist__reset_sample_bit(evlist, ID);
+ 		}
+ 	}
++>>>>>>> 0c3a6ef4ea54 (perf trace: Make --pf maj/min/all use callchains too)
  
  	signal(SIGCHLD, sig_handler);
  	signal(SIGINT, sig_handler);
* Unmerged path tools/perf/builtin-trace.c
