rtnetlink: fix frame size warning in rtnl_fill_ifinfo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Hannes Frederic Sowa <hannes@stressinduktion.org>
commit b22b941b2c253a20e1d000c671594c4f3f0a3858
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b22b941b.failed

Fix the following warning:

  CC      net/core/rtnetlink.o
net/core/rtnetlink.c: In function ‘rtnl_fill_ifinfo’:
net/core/rtnetlink.c:1308:1: warning: the frame size of 2864 bytes is larger than 2048 bytes [-Wframe-larger-than=]
 }
 ^
by splitting up the huge rtnl_fill_ifinfo into some smaller ones, so we
don't have the huge frame allocations at the same time.

	Cc: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b22b941b2c253a20e1d000c671594c4f3f0a3858)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/rtnetlink.c
diff --cc net/core/rtnetlink.c
index 8209decfe5a9,34ba7a08876d..000000000000
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@@ -1024,6 -1005,189 +1024,192 @@@ static int rtnl_phys_port_id_fill(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int rtnl_phys_port_name_fill(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	char name[IFNAMSIZ];
+ 	int err;
+ 
+ 	err = dev_get_phys_port_name(dev, name, sizeof(name));
+ 	if (err) {
+ 		if (err == -EOPNOTSUPP)
+ 			return 0;
+ 		return err;
+ 	}
+ 
+ 	if (nla_put(skb, IFLA_PHYS_PORT_NAME, strlen(name), name))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
+ static int rtnl_phys_switch_id_fill(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	int err;
+ 	struct switchdev_attr attr = {
+ 		.id = SWITCHDEV_ATTR_ID_PORT_PARENT_ID,
+ 		.flags = SWITCHDEV_F_NO_RECURSE,
+ 	};
+ 
+ 	err = switchdev_port_attr_get(dev, &attr);
+ 	if (err) {
+ 		if (err == -EOPNOTSUPP)
+ 			return 0;
+ 		return err;
+ 	}
+ 
+ 	if (nla_put(skb, IFLA_PHYS_SWITCH_ID, attr.u.ppid.id_len,
+ 		    attr.u.ppid.id))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
+ static noinline_for_stack int rtnl_fill_stats(struct sk_buff *skb,
+ 					      struct net_device *dev)
+ {
+ 	const struct rtnl_link_stats64 *stats;
+ 	struct rtnl_link_stats64 temp;
+ 	struct nlattr *attr;
+ 
+ 	stats = dev_get_stats(dev, &temp);
+ 
+ 	attr = nla_reserve(skb, IFLA_STATS,
+ 			   sizeof(struct rtnl_link_stats));
+ 	if (!attr)
+ 		return -EMSGSIZE;
+ 
+ 	copy_rtnl_link_stats(nla_data(attr), stats);
+ 
+ 	attr = nla_reserve(skb, IFLA_STATS64,
+ 			   sizeof(struct rtnl_link_stats64));
+ 	if (!attr)
+ 		return -EMSGSIZE;
+ 
+ 	copy_rtnl_link_stats64(nla_data(attr), stats);
+ 
+ 	return 0;
+ }
+ 
+ static noinline_for_stack int rtnl_fill_vfinfo(struct sk_buff *skb,
+ 					       struct net_device *dev,
+ 					       int vfs_num,
+ 					       struct nlattr *vfinfo)
+ {
+ 	struct ifla_vf_rss_query_en vf_rss_query_en;
+ 	struct ifla_vf_link_state vf_linkstate;
+ 	struct ifla_vf_spoofchk vf_spoofchk;
+ 	struct ifla_vf_tx_rate vf_tx_rate;
+ 	struct ifla_vf_stats vf_stats;
+ 	struct ifla_vf_trust vf_trust;
+ 	struct ifla_vf_vlan vf_vlan;
+ 	struct ifla_vf_rate vf_rate;
+ 	struct nlattr *vf, *vfstats;
+ 	struct ifla_vf_mac vf_mac;
+ 	struct ifla_vf_info ivi;
+ 
+ 	/* Not all SR-IOV capable drivers support the
+ 	 * spoofcheck and "RSS query enable" query.  Preset to
+ 	 * -1 so the user space tool can detect that the driver
+ 	 * didn't report anything.
+ 	 */
+ 	ivi.spoofchk = -1;
+ 	ivi.rss_query_en = -1;
+ 	ivi.trusted = -1;
+ 	memset(ivi.mac, 0, sizeof(ivi.mac));
+ 	/* The default value for VF link state is "auto"
+ 	 * IFLA_VF_LINK_STATE_AUTO which equals zero
+ 	 */
+ 	ivi.linkstate = 0;
+ 	if (dev->netdev_ops->ndo_get_vf_config(dev, vfs_num, &ivi))
+ 		return 0;
+ 
+ 	vf_mac.vf =
+ 		vf_vlan.vf =
+ 		vf_rate.vf =
+ 		vf_tx_rate.vf =
+ 		vf_spoofchk.vf =
+ 		vf_linkstate.vf =
+ 		vf_rss_query_en.vf =
+ 		vf_trust.vf = ivi.vf;
+ 
+ 	memcpy(vf_mac.mac, ivi.mac, sizeof(ivi.mac));
+ 	vf_vlan.vlan = ivi.vlan;
+ 	vf_vlan.qos = ivi.qos;
+ 	vf_tx_rate.rate = ivi.max_tx_rate;
+ 	vf_rate.min_tx_rate = ivi.min_tx_rate;
+ 	vf_rate.max_tx_rate = ivi.max_tx_rate;
+ 	vf_spoofchk.setting = ivi.spoofchk;
+ 	vf_linkstate.link_state = ivi.linkstate;
+ 	vf_rss_query_en.setting = ivi.rss_query_en;
+ 	vf_trust.setting = ivi.trusted;
+ 	vf = nla_nest_start(skb, IFLA_VF_INFO);
+ 	if (!vf) {
+ 		nla_nest_cancel(skb, vfinfo);
+ 		return -EMSGSIZE;
+ 	}
+ 	if (nla_put(skb, IFLA_VF_MAC, sizeof(vf_mac), &vf_mac) ||
+ 	    nla_put(skb, IFLA_VF_VLAN, sizeof(vf_vlan), &vf_vlan) ||
+ 	    nla_put(skb, IFLA_VF_RATE, sizeof(vf_rate),
+ 		    &vf_rate) ||
+ 	    nla_put(skb, IFLA_VF_TX_RATE, sizeof(vf_tx_rate),
+ 		    &vf_tx_rate) ||
+ 	    nla_put(skb, IFLA_VF_SPOOFCHK, sizeof(vf_spoofchk),
+ 		    &vf_spoofchk) ||
+ 	    nla_put(skb, IFLA_VF_LINK_STATE, sizeof(vf_linkstate),
+ 		    &vf_linkstate) ||
+ 	    nla_put(skb, IFLA_VF_RSS_QUERY_EN,
+ 		    sizeof(vf_rss_query_en),
+ 		    &vf_rss_query_en) ||
+ 	    nla_put(skb, IFLA_VF_TRUST,
+ 		    sizeof(vf_trust), &vf_trust))
+ 		return -EMSGSIZE;
+ 	memset(&vf_stats, 0, sizeof(vf_stats));
+ 	if (dev->netdev_ops->ndo_get_vf_stats)
+ 		dev->netdev_ops->ndo_get_vf_stats(dev, vfs_num,
+ 						&vf_stats);
+ 	vfstats = nla_nest_start(skb, IFLA_VF_STATS);
+ 	if (!vfstats) {
+ 		nla_nest_cancel(skb, vf);
+ 		nla_nest_cancel(skb, vfinfo);
+ 		return -EMSGSIZE;
+ 	}
+ 	if (nla_put_u64(skb, IFLA_VF_STATS_RX_PACKETS,
+ 			vf_stats.rx_packets) ||
+ 	    nla_put_u64(skb, IFLA_VF_STATS_TX_PACKETS,
+ 			vf_stats.tx_packets) ||
+ 	    nla_put_u64(skb, IFLA_VF_STATS_RX_BYTES,
+ 			vf_stats.rx_bytes) ||
+ 	    nla_put_u64(skb, IFLA_VF_STATS_TX_BYTES,
+ 			vf_stats.tx_bytes) ||
+ 	    nla_put_u64(skb, IFLA_VF_STATS_BROADCAST,
+ 			vf_stats.broadcast) ||
+ 	    nla_put_u64(skb, IFLA_VF_STATS_MULTICAST,
+ 			vf_stats.multicast))
+ 		return -EMSGSIZE;
+ 	nla_nest_end(skb, vfstats);
+ 	nla_nest_end(skb, vf);
+ 	return 0;
+ }
+ 
+ static int rtnl_fill_link_ifmap(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	struct rtnl_link_ifmap map = {
+ 		.mem_start   = dev->mem_start,
+ 		.mem_end     = dev->mem_end,
+ 		.base_addr   = dev->base_addr,
+ 		.irq         = dev->irq,
+ 		.dma         = dev->dma,
+ 		.port        = dev->if_port,
+ 	};
+ 	if (nla_put(skb, IFLA_MAP, sizeof(map), &map))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> b22b941b2c25 (rtnetlink: fix frame size warning in rtnl_fill_ifinfo)
  static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
  			    int type, u32 pid, u32 seq, u32 change,
  			    unsigned int flags, u32 ext_filter_mask)
@@@ -1071,21 -1233,12 +1255,11 @@@
  	    (dev->ifalias &&
  	     nla_put_string(skb, IFLA_IFALIAS, dev->ifalias)) ||
  	    nla_put_u32(skb, IFLA_CARRIER_CHANGES,
 -			atomic_read(&dev->carrier_changes)) ||
 -	    nla_put_u8(skb, IFLA_PROTO_DOWN, dev->proto_down))
 +			atomic_read(&dev->carrier_changes)))
  		goto nla_put_failure;
  
- 	if (1) {
- 		struct rtnl_link_ifmap map = {
- 			.mem_start   = dev->mem_start,
- 			.mem_end     = dev->mem_end,
- 			.base_addr   = dev->base_addr,
- 			.irq         = dev->irq,
- 			.dma         = dev->dma,
- 			.port        = dev->if_port,
- 		};
- 		if (nla_put(skb, IFLA_MAP, sizeof(map), &map))
- 			goto nla_put_failure;
- 	}
+ 	if (rtnl_fill_link_ifmap(skb, dev))
+ 		goto nla_put_failure;
  
  	if (dev->addr_len) {
  		if (nla_put(skb, IFLA_ADDRESS, dev->addr_len, dev->dev_addr) ||
@@@ -1096,19 -1249,14 +1270,20 @@@
  	if (rtnl_phys_port_id_fill(skb, dev))
  		goto nla_put_failure;
  
++<<<<<<< HEAD
 +	attr = nla_reserve(skb, IFLA_STATS,
 +			sizeof(struct rtnl_link_stats));
 +	if (attr == NULL)
++=======
+ 	if (rtnl_phys_port_name_fill(skb, dev))
  		goto nla_put_failure;
  
- 	stats = dev_get_stats(dev, &temp);
- 	copy_rtnl_link_stats(nla_data(attr), stats);
+ 	if (rtnl_phys_switch_id_fill(skb, dev))
+ 		goto nla_put_failure;
  
- 	attr = nla_reserve(skb, IFLA_STATS64,
- 			sizeof(struct rtnl_link_stats64));
- 	if (attr == NULL)
+ 	if (rtnl_fill_stats(skb, dev))
++>>>>>>> b22b941b2c25 (rtnetlink: fix frame size warning in rtnl_fill_ifinfo)
  		goto nla_put_failure;
- 	copy_rtnl_link_stats64(nla_data(attr), stats);
  
  	if (dev->dev.parent && (ext_filter_mask & RTEXT_FILTER_VF) &&
  	    nla_put_u32(skb, IFLA_NUM_VF, dev_num_vf(dev->dev.parent)))
* Unmerged path net/core/rtnetlink.c
