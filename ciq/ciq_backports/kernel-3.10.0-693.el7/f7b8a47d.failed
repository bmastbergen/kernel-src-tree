sched: Remove lockdep check in sched_move_task()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Kirill Tkhai <ktkhai@parallels.com>
commit f7b8a47da17c9ee4998f2ca2018fcc424e953c0e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f7b8a47d.failed

sched_move_task() is the only interface to change sched_task_group:
cpu_cgrp_subsys methods and autogroup_move_group() use it.

Everything is synchronized by task_rq_lock(), so cpu_cgroup_attach()
is ordered with other users of sched_move_task(). This means we do no
need RCU here: if we've dereferenced a tg here, the .attach method
hasn't been called for it yet.

Thus, we should pass "true" to task_css_check() to silence lockdep
warnings.

Fixes: eeb61e53ea19 ("sched: Fix race between task_group and sched_task_group")
	Reported-by: Oleg Nesterov <oleg@redhat.com>
	Reported-by: Fengguang Wu <fengguang.wu@intel.com>
	Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1414473874.8574.2.camel@tkhai
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f7b8a47da17c9ee4998f2ca2018fcc424e953c0e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 8dcc6799195b,6841fb46eb07..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -8534,15 -7437,19 +8534,24 @@@ void sched_move_task(struct task_struc
  	rq = task_rq_lock(tsk, &flags);
  
  	running = task_current(rq, tsk);
 -	queued = task_on_rq_queued(tsk);
 +	on_rq = tsk->on_rq;
  
 -	if (queued)
 +	if (on_rq)
  		dequeue_task(rq, tsk, 0);
  	if (unlikely(running))
 -		put_prev_task(rq, tsk);
 +		tsk->sched_class->put_prev_task(rq, tsk);
  
++<<<<<<< HEAD
 +	tg = container_of(task_subsys_state_check(tsk, cpu_cgroup_subsys_id,
 +				lockdep_is_held(&tsk->sighand->siglock)),
++=======
+ 	/*
+ 	 * All callers are synchronized by task_rq_lock(); we do not use RCU
+ 	 * which is pointless here. Thus, we pass "true" to task_css_check()
+ 	 * to prevent lockdep warnings.
+ 	 */
+ 	tg = container_of(task_css_check(tsk, cpu_cgrp_id, true),
++>>>>>>> f7b8a47da17c (sched: Remove lockdep check in sched_move_task())
  			  struct task_group, css);
  	tg = autogroup_task_group(tsk, tg);
  	tsk->sched_task_group = tg;
* Unmerged path kernel/sched/core.c
