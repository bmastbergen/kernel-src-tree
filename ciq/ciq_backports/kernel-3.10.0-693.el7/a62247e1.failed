topology/sysfs: provide drawer id and siblings attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Heiko Carstens <heiko.carstens@de.ibm.com>
commit a62247e1f5c13b926f535bb64ecbd7f9fdef7b21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a62247e1.failed

The s390 cpu topology gained another hierarchy level. The top level is
now called drawer and contains several books. A book used to be the
top level.

In order to expose the cpu topology to user space allow to create new
sysfs attributes dependent on CONFIG_SCHED_DRAWER which an
architecture may define and select.

These additional attributes will be available:

/sys/devices/system/cpu/cpuX/topology/drawer_id
/sys/devices/system/cpu/cpuX/topology/drawer_siblings
/sys/devices/system/cpu/cpuX/topology/drawer_siblings_list

	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit a62247e1f5c13b926f535bb64ecbd7f9fdef7b21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/cputopology.txt
diff --cc Documentation/cputopology.txt
index 076ecc9c47cd,f722f227a73b..000000000000
--- a/Documentation/cputopology.txt
+++ b/Documentation/cputopology.txt
@@@ -20,24 -20,59 +20,73 @@@ to /proc/cpuinfo
  	identifier (rather than the kernel's).	The actual value is
  	architecture and platform dependent.
  
- 4) /sys/devices/system/cpu/cpuX/topology/thread_siblings:
+ 4) /sys/devices/system/cpu/cpuX/topology/drawer_id:
+ 
+ 	the drawer ID of cpuX. Typically it is the hardware platform's
+ 	identifier (rather than the kernel's).	The actual value is
+ 	architecture and platform dependent.
+ 
+ 5) /sys/devices/system/cpu/cpuX/topology/thread_siblings:
  
 -	internal kernel map of cpuX's hardware threads within the same
 -	core as cpuX.
 +	internel kernel map of cpuX's hardware threads within the same
 +	core as cpuX
  
++<<<<<<< HEAD
 +5) /sys/devices/system/cpu/cpuX/topology/core_siblings:
++=======
+ 6) /sys/devices/system/cpu/cpuX/topology/thread_siblings_list:
+ 
+ 	human-readable list of cpuX's hardware threads within the same
+ 	core as cpuX.
+ 
+ 7) /sys/devices/system/cpu/cpuX/topology/core_siblings:
++>>>>>>> a62247e1f5c1 (topology/sysfs: provide drawer id and siblings attributes)
  
  	internal kernel map of cpuX's hardware threads within the same
  	physical_package_id.
  
++<<<<<<< HEAD
 +6) /sys/devices/system/cpu/cpuX/topology/book_siblings:
++=======
+ 8) /sys/devices/system/cpu/cpuX/topology/core_siblings_list:
+ 
+ 	human-readable list of cpuX's hardware threads within the same
+ 	physical_package_id.
+ 
+ 9) /sys/devices/system/cpu/cpuX/topology/book_siblings:
++>>>>>>> a62247e1f5c1 (topology/sysfs: provide drawer id and siblings attributes)
  
  	internal kernel map of cpuX's hardware threads within the same
  	book_id.
  
++<<<<<<< HEAD
 +To implement it in an architecture-neutral way, a new source file,
 +drivers/base/topology.c, is to export the 4 or 6 attributes. The two book
 +related sysfs files will only be created if CONFIG_SCHED_BOOK is selected.
++=======
+ 10) /sys/devices/system/cpu/cpuX/topology/book_siblings_list:
+ 
+ 	human-readable list of cpuX's hardware threads within the same
+ 	book_id.
+ 
+ 11) /sys/devices/system/cpu/cpuX/topology/drawer_siblings:
+ 
+ 	internal kernel map of cpuX's hardware threads within the same
+ 	drawer_id.
+ 
+ 12) /sys/devices/system/cpu/cpuX/topology/drawer_siblings_list:
+ 
+ 	human-readable list of cpuX's hardware threads within the same
+ 	drawer_id.
+ 
+ To implement it in an architecture-neutral way, a new source file,
+ drivers/base/topology.c, is to export the 6 to 12 attributes. The book
+ and drawer related sysfs files will only be created if CONFIG_SCHED_BOOK
+ and CONFIG_SCHED_DRAWER are selected.
+ 
+ CONFIG_SCHED_BOOK and CONFIG_DRAWER are currently only used on s390, where
+ they reflect the cpu and cache hierarchy.
++>>>>>>> a62247e1f5c1 (topology/sysfs: provide drawer id and siblings attributes)
  
  For an architecture to support this feature, it must define some of
  these macros in include/asm-XXX/topology.h:
@@@ -47,9 -83,12 +97,10 @@@
  #define topology_sibling_cpumask(cpu)
  #define topology_core_cpumask(cpu)
  #define topology_book_cpumask(cpu)
+ #define topology_drawer_cpumask(cpu)
  
 -The type of **_id macros is int.
 -The type of **_cpumask macros is (const) struct cpumask *. The latter
 -correspond with appropriate **_siblings sysfs attributes (except for
 -topology_sibling_cpumask() which corresponds with thread_siblings).
 +The type of **_id is int.
 +The type of siblings is (const) struct cpumask *.
  
  To be consistent on all architectures, include/linux/topology.h
  provides default definitions for any of the above macros that are
* Unmerged path Documentation/cputopology.txt
diff --git a/drivers/base/topology.c b/drivers/base/topology.c
index e8b42a606100..7cb4defd0145 100644
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@ -122,6 +122,14 @@ define_one_ro_named(book_siblings, show_book_cpumask);
 define_one_ro_named(book_siblings_list, show_book_cpumask_list);
 #endif
 
+#ifdef CONFIG_SCHED_DRAWER
+define_id_show_func(drawer_id);
+static DEVICE_ATTR_RO(drawer_id);
+define_siblings_show_func(drawer_siblings, drawer_cpumask);
+static DEVICE_ATTR_RO(drawer_siblings);
+static DEVICE_ATTR_RO(drawer_siblings_list);
+#endif
+
 static struct attribute *default_attrs[] = {
 	&dev_attr_physical_package_id.attr,
 	&dev_attr_core_id.attr,
@@ -133,6 +141,11 @@ static struct attribute *default_attrs[] = {
 	&dev_attr_book_id.attr,
 	&dev_attr_book_siblings.attr,
 	&dev_attr_book_siblings_list.attr,
+#endif
+#ifdef CONFIG_SCHED_DRAWER
+	&dev_attr_drawer_id.attr,
+	&dev_attr_drawer_siblings.attr,
+	&dev_attr_drawer_siblings_list.attr,
 #endif
 	NULL
 };
