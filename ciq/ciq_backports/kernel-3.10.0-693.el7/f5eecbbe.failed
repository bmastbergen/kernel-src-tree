amd-xgbe: Check for complete packet on skb allocation error

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lendacky, Thomas <Thomas.Lendacky@amd.com>
commit f5eecbbef0b7d28b171b3b873e1e4a69aabd7b58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f5eecbbe.failed

If the skb allocation fails during receive processing, the driver would
continue reading descriptors without first determining if there were
any more descriptors for the current packet. Update the code to check
whether more descriptors are associated with the current packet or
whether to move on to the next descriptor as a new packet.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f5eecbbef0b7d28b171b3b873e1e4a69aabd7b58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amd/xgbe/xgbe-drv.c
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index 6617129433bd,0544931329d1..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@@ -1209,33 -1892,47 +1209,43 @@@ read_again
  			if (packet->errors)
  				DBGPR("Error in received packet\n");
  			dev_kfree_skb(skb);
 -			goto next_packet;
 +			continue;
  		}
  
 -		if (!context) {
 -			put_len = rdata->len - len;
 -			len += put_len;
 -
 -			if (!skb) {
 -				dma_sync_single_for_cpu(pdata->dev,
 -							rdata->rx_hdr.dma,
 -							rdata->rx_hdr.dma_len,
 -							DMA_FROM_DEVICE);
 -
 -				skb = xgbe_create_skb(pdata, rdata, &put_len);
 -				if (!skb) {
 +		put_len = rdata->len - cur_len;
 +		if (skb) {
 +			if (pskb_expand_head(skb, 0, put_len, GFP_ATOMIC)) {
 +				DBGPR("pskb_expand_head error\n");
 +				if (incomplete) {
  					error = 1;
- 					goto read_again;
+ 					goto skip_data;
  				}
 -			}
  
 -			if (put_len) {
 -				dma_sync_single_for_cpu(pdata->dev,
 -							rdata->rx_buf.dma,
 -							rdata->rx_buf.dma_len,
 -							DMA_FROM_DEVICE);
 -
 -				skb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags,
 -						rdata->rx_buf.pa.pages,
 -						rdata->rx_buf.pa.pages_offset,
 -						put_len, rdata->rx_buf.dma_len);
 -				rdata->rx_buf.pa.pages = NULL;
 +				dev_kfree_skb(skb);
 +				continue;
  			}
 +			memcpy(skb_tail_pointer(skb), rdata->skb->data,
 +			       put_len);
 +		} else {
 +			skb = rdata->skb;
 +			rdata->skb = NULL;
  		}
 +		skb_put(skb, put_len);
 +		cur_len += put_len;
 +
++<<<<<<< HEAD
 +		if (incomplete)
 +			goto read_again;
  
++=======
+ skip_data:
+ 		if (incomplete || context_next)
+ 			goto read_again;
+ 
+ 		if (!skb)
+ 			goto next_packet;
+ 
++>>>>>>> f5eecbbef0b7 (amd-xgbe: Check for complete packet on skb allocation error)
  		/* Be sure we don't exceed the configured MTU */
  		max_len = netdev->mtu + ETH_HLEN;
  		if (!(netdev->features & NETIF_F_HW_VLAN_CTAG_RX) &&
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-drv.c
