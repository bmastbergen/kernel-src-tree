nvmet: Fix possible infinite loop triggered on hot namespace removal

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Solganik Alexander <sashas@lightbitslabs.com>
commit e4fcf07cca6a3b6c4be00df16f08be894325eaa3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e4fcf07c.failed

When removing a namespace we delete it from the subsystem namespaces
list with list_del_init which allows us to know if it is enabled or
not.

The problem is that list_del_init initialize the list next and does
not respect the RCU list-traversal we do on the IO path for locating
a namespace. Instead we need to use list_del_rcu which is allowed to
run concurrently with the _rcu list-traversal primitives (keeps list
next intact) and guarantees concurrent nvmet_find_naespace forward
progress.

By changing that, we cannot rely on ns->dev_link for knowing if the
namspace is enabled, so add enabled indicator entry to nvmet_ns for
that.

	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Solganik Alexander <sashas@lightbitslabs.com>
	Cc: <stable@vger.kernel.org> # v4.8+
(cherry picked from commit e4fcf07cca6a3b6c4be00df16f08be894325eaa3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/target/configfs.c
#	drivers/nvme/target/core.c
#	drivers/nvme/target/nvmet.h
* Unmerged path drivers/nvme/target/configfs.c
* Unmerged path drivers/nvme/target/core.c
* Unmerged path drivers/nvme/target/nvmet.h
* Unmerged path drivers/nvme/target/configfs.c
* Unmerged path drivers/nvme/target/core.c
* Unmerged path drivers/nvme/target/nvmet.h
