lib/bug.c: use common WARN helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [lib] bug.c: use common WARN helper (Pratyush Anand) [1310539]
Rebuild_FUZZ: 93.55%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 2553b67a1fbe7bf202e4e8070ab0b00d3d3a06a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2553b67a.failed

The traceoff_on_warning option doesn't have any effect on s390, powerpc,
arm64, parisc, and sh because there are two different types of WARN
implementations:

1) The above mentioned architectures treat WARN() as a special case of a
   BUG() exception.  They handle warnings in report_bug() in lib/bug.c.

2) All other architectures just call warn_slowpath_*() directly.  Their
   warnings are handled in warn_slowpath_common() in kernel/panic.c.

Support traceoff_on_warning on all architectures and prevent any future
divergence by using a single common function to emit the warning.

Also remove the '()' from '%pS()', because the parentheses look funky:

  [   45.607629] WARNING: at /root/warn_mod/warn_mod.c:17 .init_dummy+0x20/0x40 [warn_mod]()

	Reported-by: Chunyu Hu <chuhu@redhat.com>
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Tested-by: Prarit Bhargava <prarit@redhat.com>
	Acked-by: Prarit Bhargava <prarit@redhat.com>
	Acked-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2553b67a1fbe7bf202e4e8070ab0b00d3d3a06a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/panic.c
diff --cc kernel/panic.c
index 3011cd3cc5e3,fa400852bf6c..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -23,6 -23,8 +23,11 @@@
  #include <linux/sysrq.h>
  #include <linux/init.h>
  #include <linux/nmi.h>
++<<<<<<< HEAD
++=======
+ #include <linux/console.h>
+ #include <linux/bug.h>
++>>>>>>> 2553b67a1fbe (lib/bug.c: use common WARN helper)
  
  #define PANIC_TIMER_STEP 100
  #define PANIC_BLINK_SPD 18
@@@ -469,8 -460,15 +473,20 @@@ void __warn(const char *file, int line
  {
  	disable_trace_on_warning();
  
++<<<<<<< HEAD
 +	printk(KERN_WARNING "------------[ cut here ]------------\n");
 +	printk(KERN_WARNING "WARNING: at %s:%d %pS()\n", file, line, caller);
++=======
+ 	pr_warn("------------[ cut here ]------------\n");
+ 
+ 	if (file)
+ 		pr_warn("WARNING: CPU: %d PID: %d at %s:%d %pS\n",
+ 			raw_smp_processor_id(), current->pid, file, line,
+ 			caller);
+ 	else
+ 		pr_warn("WARNING: CPU: %d PID: %d at %pS\n",
+ 			raw_smp_processor_id(), current->pid, caller);
++>>>>>>> 2553b67a1fbe (lib/bug.c: use common WARN helper)
  
  	if (args)
  		vprintk(args->fmt, args->args);
diff --git a/include/asm-generic/bug.h b/include/asm-generic/bug.h
index 7d10f962aa13..3ff4f3cae1ce 100644
--- a/include/asm-generic/bug.h
+++ b/include/asm-generic/bug.h
@@ -81,6 +81,12 @@ extern void warn_slowpath_null(const char *file, const int line);
 	do { printk(arg); __WARN_TAINT(taint); } while (0)
 #endif
 
+/* used internally by panic.c */
+struct warn_args;
+
+void __warn(const char *file, int line, void *caller, unsigned taint,
+	    struct pt_regs *regs, struct warn_args *args);
+
 #ifndef WARN_ON
 #define WARN_ON(condition) ({						\
 	int __ret_warn_on = !!(condition);				\
* Unmerged path kernel/panic.c
diff --git a/lib/bug.c b/lib/bug.c
index 6e1950534eb1..94becf64a3b7 100644
--- a/lib/bug.c
+++ b/lib/bug.c
@@ -156,30 +156,8 @@ enum bug_trap_type report_bug(unsigned long bugaddr, struct pt_regs *regs)
 
 	if (warning) {
 		/* this is a WARN_ON rather than BUG/BUG_ON */
-		pr_warn("------------[ cut here ]------------\n");
-
-		if (file)
-			pr_warn("WARNING: at %s:%u\n", file, line);
-		else
-			pr_warn("WARNING: at %p [verbose debug info unavailable]\n",
-				(void *)bugaddr);
-
-		if (panic_on_warn) {
-			/*
-			 * This thread may hit another WARN() in the panic path.
-			 * Resetting this prevents additional WARN() from
-			 * panicking the system on this thread.  Other threads
-			 * are blocked by the panic_mutex in panic().
-			 */
-			panic_on_warn = 0;
-			panic("panic_on_warn set ...\n");
-		}
-
-		print_modules();
-		show_regs(regs);
-		print_oops_end_marker();
-		/* Just a warning, don't kill lockdep. */
-		add_taint(BUG_GET_TAINT(bug), LOCKDEP_STILL_OK);
+		__warn(file, line, (void *)bugaddr, BUG_GET_TAINT(bug), regs,
+		       NULL);
 		return BUG_TRAP_TYPE_WARN;
 	}
 
