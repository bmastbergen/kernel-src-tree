io-mapping: Always create a struct to hold metadata about the io-mapping

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit cafaf14a5d8f152ed3c984ecd48dee6e824446bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/cafaf14a.failed

Currently, we only allocate a structure to hold metadata if we need to
allocate an ioremap for every access, such as on x86-32. However, it
would be useful to store basic information about the io-mapping, such as
its page protection, on all platforms.

	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: linux-mm@kvack.org
	Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/20160819155428.1670-4-chris@chris-wilson.co.uk
(cherry picked from commit cafaf14a5d8f152ed3c984ecd48dee6e824446bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/io-mapping.h
diff --cc include/linux/io-mapping.h
index 657fab4efab3,b4c4b5c4216d..000000000000
--- a/include/linux/io-mapping.h
+++ b/include/linux/io-mapping.h
@@@ -141,21 -153,37 +151,41 @@@ static inline void __iomem 
  io_mapping_map_atomic_wc(struct io_mapping *mapping,
  			 unsigned long offset)
  {
 -	preempt_disable();
  	pagefault_disable();
- 	return ((char __force __iomem *) mapping) + offset;
+ 	return io_mapping_map_wc(mapping, offset, PAGE_SIZE);
  }
  
  static inline void
  io_mapping_unmap_atomic(void __iomem *vaddr)
  {
+ 	io_mapping_unmap(vaddr);
  	pagefault_enable();
 -	preempt_enable();
  }
  
++<<<<<<< HEAD
 +/* Non-atomic map/unmap */
 +static inline void __iomem *
 +io_mapping_map_wc(struct io_mapping *mapping, unsigned long offset)
++=======
+ #endif /* HAVE_ATOMIC_IOMAP */
+ 
+ static inline struct io_mapping *
+ io_mapping_create_wc(resource_size_t base,
+ 		     unsigned long size)
++>>>>>>> cafaf14a5d8f (io-mapping: Always create a struct to hold metadata about the io-mapping)
  {
- 	return ((char __force __iomem *) mapping) + offset;
+ 	struct io_mapping *iomap;
+ 
+ 	iomap = kmalloc(sizeof(*iomap), GFP_KERNEL);
+ 	if (!iomap)
+ 		return NULL;
+ 
+ 	if (!io_mapping_init_wc(iomap, base, size)) {
+ 		kfree(iomap);
+ 		return NULL;
+ 	}
+ 
+ 	return iomap;
  }
  
  static inline void
* Unmerged path include/linux/io-mapping.h
