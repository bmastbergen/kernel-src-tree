perf/x86/rapl: Enable Apollo Lake RAPL support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Harry Pan <harry.pan@intel.com>
commit 2668c6195685f4b6f281767d10b4f4f2e32c2305
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2668c619.failed

This patch enables RAPL counters (energy consumption counters)
support for Intel Apollo Lake (Goldmont) processors (Model 92):

RAPL of Goldmont, unlikes ESU increment of Silvermont/Airmont,
it likes the Haswell microarchitecture in 1/2^ESU joules and
supports power domains in PP0/PP1/PKG/RAM.

ESU and power domains refer to Intel Software Developers' Manual,
Vol. 3C, Order No. 325384, Table 35-12.

Usage example:

  $ perf list
  $ perf stat -a -e power/energy-cores/,power/energy-pkg/ sleep 10

	Signed-off-by: Harry Pan <harry.pan@intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Cc: bp@alien8.de
	Cc: gs0622@gmail.com
	Cc: hpa@zytor.com
	Cc: srinivas.pandruvada@linux.intel.com
Link: http://lkml.kernel.org/r/1473325738-730-1-git-send-email-harry.pan@intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 2668c6195685f4b6f281767d10b4f4f2e32c2305)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/rapl.c
diff --cc arch/x86/events/intel/rapl.c
index a14d9d5f94a3,b0f0e835a770..000000000000
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@@ -701,52 -700,95 +701,79 @@@ static int __init init_rapl_pmus(void
  	return 0;
  }
  
 -#define X86_RAPL_MODEL_MATCH(model, init)	\
 -	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (unsigned long)&init }
 -
 -struct intel_rapl_init_fun {
 -	bool apply_quirk;
 -	int cntr_mask;
 -	struct attribute **attrs;
 -};
 -
 -static const struct intel_rapl_init_fun snb_rapl_init __initconst = {
 -	.apply_quirk = false,
 -	.cntr_mask = RAPL_IDX_CLN,
 -	.attrs = rapl_events_cln_attr,
 -};
 -
 -static const struct intel_rapl_init_fun hsx_rapl_init __initconst = {
 -	.apply_quirk = true,
 -	.cntr_mask = RAPL_IDX_SRV,
 -	.attrs = rapl_events_srv_attr,
 -};
 -
 -static const struct intel_rapl_init_fun hsw_rapl_init __initconst = {
 -	.apply_quirk = false,
 -	.cntr_mask = RAPL_IDX_HSW,
 -	.attrs = rapl_events_hsw_attr,
 -};
 -
 -static const struct intel_rapl_init_fun snbep_rapl_init __initconst = {
 -	.apply_quirk = false,
 -	.cntr_mask = RAPL_IDX_SRV,
 -	.attrs = rapl_events_srv_attr,
 -};
 -
 -static const struct intel_rapl_init_fun knl_rapl_init __initconst = {
 -	.apply_quirk = true,
 -	.cntr_mask = RAPL_IDX_KNL,
 -	.attrs = rapl_events_knl_attr,
 -};
 -
 -static const struct intel_rapl_init_fun skl_rapl_init __initconst = {
 -	.apply_quirk = false,
 -	.cntr_mask = RAPL_IDX_SKL_CLN,
 -	.attrs = rapl_events_skl_attr,
 -};
 -
  static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
++<<<<<<< HEAD
 +	[0] = { .vendor = X86_VENDOR_INTEL, .family = 6 },
 +	[1] = {},
++=======
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,   snb_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X, snbep_rapl_init),
+ 
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,   snb_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X, snbep_rapl_init),
+ 
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_CORE, hsw_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_X,    hsw_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_ULT,  hsw_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_GT3E, hsw_rapl_init),
+ 
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_CORE,   hsw_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_GT3E,   hsw_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,	  hsw_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D, hsw_rapl_init),
+ 
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL, knl_rapl_init),
+ 
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_MOBILE,  skl_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_DESKTOP, skl_rapl_init),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,	 hsx_rapl_init),
+ 
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT, hsw_rapl_init),
+ 	{},
++>>>>>>> 2668c6195685 (perf/x86/rapl: Enable Apollo Lake RAPL support)
  };
  
 -MODULE_DEVICE_TABLE(x86cpu, rapl_cpu_match);
 -
  static int __init rapl_pmu_init(void)
  {
 -	const struct x86_cpu_id *id;
 -	struct intel_rapl_init_fun *rapl_init;
 -	bool apply_quirk;
 +	bool apply_quirk = false;
  	int ret;
  
 -	id = x86_match_cpu(rapl_cpu_match);
 -	if (!id)
 +	if (!x86_match_cpu(rapl_cpu_match))
  		return -ENODEV;
  
 -	rapl_init = (struct intel_rapl_init_fun *)id->driver_data;
 -	apply_quirk = rapl_init->apply_quirk;
 -	rapl_cntr_mask = rapl_init->cntr_mask;
 -	rapl_pmu_events_group.attrs = rapl_init->attrs;
 +	switch (boot_cpu_data.x86_model) {
 +	case 42: /* Sandy Bridge */
 +	case 58: /* Ivy Bridge */
 +		rapl_cntr_mask = RAPL_IDX_CLN;
 +		rapl_pmu_events_group.attrs = rapl_events_cln_attr;
 +		break;
 +	case 63: /* Haswell-Server */
 +	case 79: /* Broadwell-Server */
 +		apply_quirk = true;
 +		rapl_cntr_mask = RAPL_IDX_SRV;
 +		rapl_pmu_events_group.attrs = rapl_events_srv_attr;
 +		break;
 +	case 60: /* Haswell */
 +	case 69: /* Haswell-Celeron */
 +	case 70: /* Haswell GT3e */
 +	case 61: /* Broadwell */
 +	case 71: /* Broadwell-H */
 +		rapl_cntr_mask = RAPL_IDX_HSW;
 +		rapl_pmu_events_group.attrs = rapl_events_hsw_attr;
 +		break;
 +	case 45: /* Sandy Bridge-EP */
 +	case 62: /* IvyTown */
 +		rapl_cntr_mask = RAPL_IDX_SRV;
 +		rapl_pmu_events_group.attrs = rapl_events_srv_attr;
 +		break;
 +	case 87: /* Knights Landing */
 +		apply_quirk = true;
 +		rapl_cntr_mask = RAPL_IDX_KNL;
 +		rapl_pmu_events_group.attrs = rapl_events_knl_attr;
 +		break;
 +	default:
 +		return -ENODEV;
 +	}
  
  	ret = rapl_check_hw_unit(apply_quirk);
  	if (ret)
* Unmerged path arch/x86/events/intel/rapl.c
