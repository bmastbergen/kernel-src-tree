perf trace: Bump --mmap-pages when --call-graph is used by the root user

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit f3e459d16a8493b617ccf2a940330279679e0291
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f3e459d1.failed

To reduce the chances we'll overflow the mmap buffer, manual fine tuning
trumps this.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Milian Wolff <milian.wolff@kdab.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-wxygbxmp1v9mng1ea28wet02@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f3e459d16a8493b617ccf2a940330279679e0291)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-trace.txt
#	tools/perf/builtin-trace.c
diff --cc tools/perf/Documentation/perf-trace.txt
index 13293de8869f,c075c002eaa4..000000000000
--- a/tools/perf/Documentation/perf-trace.txt
+++ b/tools/perf/Documentation/perf-trace.txt
@@@ -117,6 -117,19 +117,22 @@@ the thread executes on the designated C
  --syscalls::
  	Trace system calls. This options is enabled by default.
  
++<<<<<<< HEAD
++=======
+ --call-graph [mode,type,min[,limit],order[,key][,branch]]::
+         Setup and enable call-graph (stack chain/backtrace) recording.
+         See `--call-graph` section in perf-record and perf-report
+         man pages for details. The ones that are most useful in 'perf trace'
+         are 'dwarf' and 'lbr', where available, try: 'perf trace --call-graph dwarf'.
+ 
+         Using this will, for the root user, bump the value of --mmap-pages to 4
+         times the maximum for non-root users, based on the kernel.perf_event_mlock_kb
+         sysctl. This is done only if the user doesn't specify a --mmap-pages value.
+ 
+ --kernel-syscall-graph::
+ 	 Show the kernel callchains on the syscall exit path.
+ 
++>>>>>>> f3e459d16a84 (perf trace: Bump --mmap-pages when --call-graph is used by the root user)
  --event::
  	Trace other events, see 'perf list' for a complete list.
  
diff --cc tools/perf/builtin-trace.c
index b18ec7559ff0,026ec0c749b0..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2972,6 -3109,8 +2972,11 @@@ int cmd_trace(int argc, const char **ar
  			"per thread proc mmap processing timeout in ms"),
  	OPT_END()
  	};
++<<<<<<< HEAD
++=======
+ 	bool max_stack_user_set = true;
+ 	bool mmap_pages_user_set = true;
++>>>>>>> f3e459d16a84 (perf trace: Bump --mmap-pages when --call-graph is used by the root user)
  	const char * const trace_subcommands[] = { "record", NULL };
  	int err;
  	char bf[BUFSIZ];
@@@ -2995,6 -3144,26 +3000,29 @@@
  		trace.opts.sample_time = true;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (trace.opts.mmap_pages == UINT_MAX)
+ 		mmap_pages_user_set = false;
+ 
+ 	if (trace.max_stack == UINT_MAX) {
+ 		trace.max_stack = PERF_MAX_STACK_DEPTH;
+ 		max_stack_user_set = false;
+ 	}
+ 
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
+ 	if ((trace.min_stack || max_stack_user_set) && !trace.opts.callgraph_set)
+ 		record_opts__parse_callchain(&trace.opts, &callchain_param, "dwarf", false);
+ #endif
+ 
+ 	if (trace.opts.callgraph_set) {
+ 		if (!mmap_pages_user_set && geteuid() == 0)
+ 			trace.opts.mmap_pages = perf_event_mlock_kb_in_pages() * 4;
+ 
+ 		symbol_conf.use_callchain = true;
+ 	}
+ 
++>>>>>>> f3e459d16a84 (perf trace: Bump --mmap-pages when --call-graph is used by the root user)
  	if (trace.evlist->nr_entries > 0)
  		evlist__set_evsel_handler(trace.evlist, trace__event_handler);
  
* Unmerged path tools/perf/Documentation/perf-trace.txt
* Unmerged path tools/perf/builtin-trace.c
