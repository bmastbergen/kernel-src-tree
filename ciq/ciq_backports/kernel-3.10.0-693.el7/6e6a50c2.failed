net_sched: act: export tcf_hash_search() instead of tcf_hash_lookup()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: act: export tcf_hash_search() instead of tcf_hash_lookup() (Ivan Vecera) [1428588]
Rebuild_FUZZ: 97.01%
commit-author WANG Cong <xiyou.wangcong@gmail.com>
commit 6e6a50c254220acb19bd338ce433b1770e4a7a3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6e6a50c2.failed

So that we will not expose struct tcf_common to modules.

	Cc: Jamal Hadi Salim <jhs@mojatatu.com>
	Cc: David S. Miller <davem@davemloft.net>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6e6a50c254220acb19bd338ce433b1770e4a7a3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_police.c
diff --cc net/sched/act_police.c
index 376c02554325,1778209a332f..000000000000
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@@ -168,12 -140,8 +168,17 @@@ static int tcf_act_police_locate(struc
  	parm = nla_data(tb[TCA_POLICE_TBF]);
  
  	if (parm->index) {
++<<<<<<< HEAD
 +		struct tcf_common *pc;
 +
 +		pc = tcf_hash_lookup(parm->index, &police_hash_info);
 +		if (pc != NULL) {
 +			a->priv = pc;
 +			police = to_police(pc);
++=======
+ 		if (tcf_hash_search(a, parm->index)) {
+ 			police = to_police(a->priv);
++>>>>>>> 6e6a50c25422 (net_sched: act: export tcf_hash_search() instead of tcf_hash_lookup())
  			if (bind) {
  				police->tcf_bindcnt += 1;
  				police->tcf_refcnt += 1;
diff --git a/include/net/act_api.h b/include/net/act_api.h
index 11aac9abd0ca..fa2c47d76e19 100644
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@ -77,7 +77,7 @@ struct tc_action_ops {
 	int     (*walk)(struct sk_buff *, struct netlink_callback *, int, struct tc_action *);
 };
 
-struct tcf_common *tcf_hash_lookup(u32 index, struct tcf_hashinfo *hinfo);
+int tcf_hash_search(struct tc_action *a, u32 index);
 void tcf_hash_destroy(struct tcf_common *p, struct tcf_hashinfo *hinfo);
 int tcf_hash_release(struct tcf_common *p, int bind,
 		     struct tcf_hashinfo *hinfo);
diff --git a/net/sched/act_api.c b/net/sched/act_api.c
index 34e255487d7a..380f1dbc89c8 100644
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@ -165,7 +165,7 @@ static int tcf_generic_walker(struct sk_buff *skb, struct netlink_callback *cb,
 	}
 }
 
-struct tcf_common *tcf_hash_lookup(u32 index, struct tcf_hashinfo *hinfo)
+static struct tcf_common *tcf_hash_lookup(u32 index, struct tcf_hashinfo *hinfo)
 {
 	struct tcf_common *p;
 
@@ -179,7 +179,6 @@ struct tcf_common *tcf_hash_lookup(u32 index, struct tcf_hashinfo *hinfo)
 
 	return p;
 }
-EXPORT_SYMBOL(tcf_hash_lookup);
 
 u32 tcf_hash_new_index(u32 *idx_gen, struct tcf_hashinfo *hinfo)
 {
@@ -195,7 +194,7 @@ u32 tcf_hash_new_index(u32 *idx_gen, struct tcf_hashinfo *hinfo)
 }
 EXPORT_SYMBOL(tcf_hash_new_index);
 
-static int tcf_hash_search(struct tc_action *a, u32 index)
+int tcf_hash_search(struct tc_action *a, u32 index)
 {
 	struct tcf_hashinfo *hinfo = a->ops->hinfo;
 	struct tcf_common *p = tcf_hash_lookup(index, hinfo);
@@ -206,6 +205,7 @@ static int tcf_hash_search(struct tc_action *a, u32 index)
 	}
 	return 0;
 }
+EXPORT_SYMBOL(tcf_hash_search);
 
 struct tcf_common *tcf_hash_check(u32 index, struct tc_action *a, int bind,
 				  struct tcf_hashinfo *hinfo)
* Unmerged path net/sched/act_police.c
