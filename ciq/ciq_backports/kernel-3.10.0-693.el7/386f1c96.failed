amd-xgbe: Properly handle feature changes via ethtool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lendacky, Thomas <Thomas.Lendacky@amd.com>
commit 386f1c9650b7fe4849d2942bd42f41f0ca3aedfb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/386f1c96.failed

The ndo_set_features callback function was improperly using an unsigned
int to save the current feature value for features such as NETIF_F_RXCSUM.
Since that feature is in the upper 32 bits of a 64 bit variable the
result was always 0 making it not possible to actually turn off the
hardware RX checksum support.  Change the unsigned int type to the
netdev_features_t type in order to properly capture the current value
and perform the proper operation.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 386f1c9650b7fe4849d2942bd42f41f0ca3aedfb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amd/xgbe/xgbe-drv.c
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index 6baf601c4282,a480b231ba37..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@@ -1034,26 -1465,26 +1034,30 @@@ static int xgbe_set_features(struct net
  {
  	struct xgbe_prv_data *pdata = netdev_priv(netdev);
  	struct xgbe_hw_if *hw_if = &pdata->hw_if;
++<<<<<<< HEAD
 +	unsigned int rxcsum_enabled, rxvlan_enabled;
++=======
+ 	netdev_features_t rxcsum, rxvlan, rxvlan_filter;
++>>>>>>> 386f1c9650b7 (amd-xgbe: Properly handle feature changes via ethtool)
  
 -	rxcsum = pdata->netdev_features & NETIF_F_RXCSUM;
 -	rxvlan = pdata->netdev_features & NETIF_F_HW_VLAN_CTAG_RX;
 -	rxvlan_filter = pdata->netdev_features & NETIF_F_HW_VLAN_CTAG_FILTER;
 +	rxcsum_enabled = !!(pdata->netdev_features & NETIF_F_RXCSUM);
 +	rxvlan_enabled = !!(pdata->netdev_features & NETIF_F_HW_VLAN_CTAG_RX);
  
 -	if ((features & NETIF_F_RXCSUM) && !rxcsum)
 +	if ((features & NETIF_F_RXCSUM) && !rxcsum_enabled) {
  		hw_if->enable_rx_csum(pdata);
 -	else if (!(features & NETIF_F_RXCSUM) && rxcsum)
 +		netdev_alert(netdev, "state change - rxcsum enabled\n");
 +	} else if (!(features & NETIF_F_RXCSUM) && rxcsum_enabled) {
  		hw_if->disable_rx_csum(pdata);
 +		netdev_alert(netdev, "state change - rxcsum disabled\n");
 +	}
  
 -	if ((features & NETIF_F_HW_VLAN_CTAG_RX) && !rxvlan)
 +	if ((features & NETIF_F_HW_VLAN_CTAG_RX) && !rxvlan_enabled) {
  		hw_if->enable_rx_vlan_stripping(pdata);
 -	else if (!(features & NETIF_F_HW_VLAN_CTAG_RX) && rxvlan)
 +		netdev_alert(netdev, "state change - rxvlan enabled\n");
 +	} else if (!(features & NETIF_F_HW_VLAN_CTAG_RX) && rxvlan_enabled) {
  		hw_if->disable_rx_vlan_stripping(pdata);
 -
 -	if ((features & NETIF_F_HW_VLAN_CTAG_FILTER) && !rxvlan_filter)
 -		hw_if->enable_rx_vlan_filtering(pdata);
 -	else if (!(features & NETIF_F_HW_VLAN_CTAG_FILTER) && rxvlan_filter)
 -		hw_if->disable_rx_vlan_filtering(pdata);
 +		netdev_alert(netdev, "state change - rxvlan disabled\n");
 +	}
  
  	pdata->netdev_features = features;
  
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-drv.c
