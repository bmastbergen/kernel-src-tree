md/r5cache: enable IRQs on error path

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [md] r5cache: enable IRQs on error path (Jes Sorensen) [1380016]
Rebuild_FUZZ: 95.77%
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit d3014e21e18bfaf5b22144a45c399c8eb21aaba9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d3014e21.failed

We need to re-enable the IRQs here before returning.

Fixes: a39f7afde358 ("md/r5cache: write-out phase and reclaim support")
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit d3014e21e18bfaf5b22144a45c399c8eb21aaba9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid5-cache.c
diff --cc drivers/md/raid5-cache.c
index d876bae5f87d,874749dc7648..000000000000
--- a/drivers/md/raid5-cache.c
+++ b/drivers/md/raid5-cache.c
@@@ -558,10 -1011,40 +558,41 @@@ static void r5l_run_no_space_stripes(st
  	spin_unlock(&log->no_space_stripes_lock);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * calculate new last_checkpoint
+  * for write through mode, returns log->next_checkpoint
+  * for write back, returns log_start of first sh in stripe_in_journal_list
+  */
+ static sector_t r5c_calculate_new_cp(struct r5conf *conf)
+ {
+ 	struct stripe_head *sh;
+ 	struct r5l_log *log = conf->log;
+ 	sector_t new_cp;
+ 	unsigned long flags;
+ 
+ 	if (log->r5c_journal_mode == R5C_JOURNAL_MODE_WRITE_THROUGH)
+ 		return log->next_checkpoint;
+ 
+ 	spin_lock_irqsave(&log->stripe_in_journal_lock, flags);
+ 	if (list_empty(&conf->log->stripe_in_journal_list)) {
+ 		/* all stripes flushed */
+ 		spin_unlock_irqrestore(&log->stripe_in_journal_lock, flags);
+ 		return log->next_checkpoint;
+ 	}
+ 	sh = list_first_entry(&conf->log->stripe_in_journal_list,
+ 			      struct stripe_head, r5c);
+ 	new_cp = sh->log_start;
+ 	spin_unlock_irqrestore(&log->stripe_in_journal_lock, flags);
+ 	return new_cp;
+ }
+ 
++>>>>>>> d3014e21e18b (md/r5cache: enable IRQs on error path)
  static sector_t r5l_reclaimable_space(struct r5l_log *log)
  {
 -	struct r5conf *conf = log->rdev->mddev->private;
 -
  	return r5l_ring_distance(log, log->last_checkpoint,
 -				 r5c_calculate_new_cp(conf));
 +				 log->next_checkpoint);
  }
  
  static void r5l_run_no_mem_stripe(struct r5l_log *log)
* Unmerged path drivers/md/raid5-cache.c
