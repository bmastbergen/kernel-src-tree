Btrfs: fix extent buffer bitmap tests on big-endian systems

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Omar Sandoval <osandov@fb.com>
commit 9426ce754fab0f02a45b61402119c57de446ffa3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9426ce75.failed

The in-memory bitmap code manipulates words and is therefore sensitive
to endianness, while the extent buffer bitmap code addresses bytes and
is byte-order agnostic. Because the byte addressing of the extent buffer
bitmaps is equivalent to a little-endian in-memory bitmap, the extent
buffer bitmap tests fail on big-endian systems.

34b3e6c92af1 ("Btrfs: self-tests: Fix extent buffer bitmap test fail on
BE system") worked around another endianness bug in the tests but missed
this one because ed9e4afdb055 ("Btrfs: self-tests: Execute page
straddling test only when nodesize < PAGE_SIZE") disables this part of
the test on ppc64. That change lost the original meaning of the test,
however. We really want to test that an equivalent series of operations
using the in-memory bitmap API and the extent buffer bitmap API produces
equivalent results.

To fix this, don't use memcmp_extent_buffer() or write_extent_buffer();
do everything bit-by-bit.

	Reported-by: Anatoly Pugachev <matorola@gmail.com>
	Tested-by: Anatoly Pugachev <matorola@gmail.com>
	Tested-by: Feifei Xu <xufeifei@linux.vnet.ibm.com>
	Tested-by: Chandan Rajendra <chandan@linux.vnet.ibm.com>
	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit 9426ce754fab0f02a45b61402119c57de446ffa3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/tests/extent-io-tests.c
diff --cc fs/btrfs/tests/extent-io-tests.c
index 381ef7f53874,caad80bb9bd0..000000000000
--- a/fs/btrfs/tests/extent-io-tests.c
+++ b/fs/btrfs/tests/extent-io-tests.c
@@@ -302,30 -322,37 +320,59 @@@ static int __test_eb_bitmaps(unsigned l
  
  	bitmap_clear(bitmap, 0, len * BITS_PER_BYTE);
  	extent_buffer_bitmap_clear(eb, 0, 0, len * BITS_PER_BYTE);
- 	if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
+ 	ret = check_eb_bitmap(bitmap, eb, len);
+ 	if (ret) {
  		test_msg("Clearing all bits failed\n");
- 		return -EINVAL;
+ 		return ret;
  	}
  
++<<<<<<< HEAD
 +	bitmap_set(bitmap, (PAGE_CACHE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
 +		   sizeof(long) * BITS_PER_BYTE);
 +	extent_buffer_bitmap_set(eb, PAGE_CACHE_SIZE - sizeof(long) / 2, 0,
 +				 sizeof(long) * BITS_PER_BYTE);
 +	if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
 +		test_msg("Setting straddling pages failed\n");
 +		return -EINVAL;
 +	}
 +
 +	bitmap_set(bitmap, 0, len * BITS_PER_BYTE);
 +	bitmap_clear(bitmap,
 +		     (PAGE_CACHE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
 +		     sizeof(long) * BITS_PER_BYTE);
 +	extent_buffer_bitmap_set(eb, 0, 0, len * BITS_PER_BYTE);
 +	extent_buffer_bitmap_clear(eb, PAGE_CACHE_SIZE - sizeof(long) / 2, 0,
 +				   sizeof(long) * BITS_PER_BYTE);
 +	if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
 +		test_msg("Clearing straddling pages failed\n");
 +		return -EINVAL;
++=======
+ 	/* Straddling pages test */
+ 	if (len > PAGE_SIZE) {
+ 		bitmap_set(bitmap,
+ 			(PAGE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
+ 			sizeof(long) * BITS_PER_BYTE);
+ 		extent_buffer_bitmap_set(eb, PAGE_SIZE - sizeof(long) / 2, 0,
+ 					sizeof(long) * BITS_PER_BYTE);
+ 		ret = check_eb_bitmap(bitmap, eb, len);
+ 		if (ret) {
+ 			test_msg("Setting straddling pages failed\n");
+ 			return ret;
+ 		}
+ 
+ 		bitmap_set(bitmap, 0, len * BITS_PER_BYTE);
+ 		bitmap_clear(bitmap,
+ 			(PAGE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
+ 			sizeof(long) * BITS_PER_BYTE);
+ 		extent_buffer_bitmap_set(eb, 0, 0, len * BITS_PER_BYTE);
+ 		extent_buffer_bitmap_clear(eb, PAGE_SIZE - sizeof(long) / 2, 0,
+ 					sizeof(long) * BITS_PER_BYTE);
+ 		ret = check_eb_bitmap(bitmap, eb, len);
+ 		if (ret) {
+ 			test_msg("Clearing straddling pages failed\n");
+ 			return ret;
+ 		}
++>>>>>>> 9426ce754fab (Btrfs: fix extent buffer bitmap tests on big-endian systems)
  	}
  
  	/*
* Unmerged path fs/btrfs/tests/extent-io-tests.c
