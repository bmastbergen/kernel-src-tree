perf record: Add switch-output size warning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 0c5824498e8bd5b7d30dc03448cd89efaee4bead
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0c582449.failed

Adding switch-output size warning if the requested
size of lower than the wakeup ring buffer size.

  $ perf record --switch-output=1K ls
  WARNING: switch-output data size lower than wakeup kernel buffer size (258K) expect bigger perf.data sizes
  ...

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
Suggested-and-Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1483955520-29063-6-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0c5824498e8bd5b7d30dc03448cd89efaee4bead)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
diff --cc tools/perf/builtin-record.c
index 6cb1cbb83a86,93319e1be3ac..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -1167,6 -1377,63 +1167,66 @@@ out_free
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static void switch_output_size_warn(struct record *rec)
+ {
+ 	u64 wakeup_size = perf_evlist__mmap_size(rec->opts.mmap_pages);
+ 	struct switch_output *s = &rec->switch_output;
+ 
+ 	wakeup_size /= 2;
+ 
+ 	if (s->size < wakeup_size) {
+ 		char buf[100];
+ 
+ 		unit_number__scnprintf(buf, sizeof(buf), wakeup_size);
+ 		pr_warning("WARNING: switch-output data size lower than "
+ 			   "wakeup kernel buffer size (%s) "
+ 			   "expect bigger perf.data sizes\n", buf);
+ 	}
+ }
+ 
+ static int switch_output_setup(struct record *rec)
+ {
+ 	struct switch_output *s = &rec->switch_output;
+ 	static struct parse_tag tags_size[] = {
+ 		{ .tag  = 'B', .mult = 1       },
+ 		{ .tag  = 'K', .mult = 1 << 10 },
+ 		{ .tag  = 'M', .mult = 1 << 20 },
+ 		{ .tag  = 'G', .mult = 1 << 30 },
+ 		{ .tag  = 0 },
+ 	};
+ 	unsigned long val;
+ 
+ 	if (!s->set)
+ 		return 0;
+ 
+ 	if (!strcmp(s->str, "signal")) {
+ 		s->signal = true;
+ 		pr_debug("switch-output with SIGUSR2 signal\n");
+ 		goto enabled;
+ 	}
+ 
+ 	val = parse_tag_value(s->str, tags_size);
+ 	if (val != (unsigned long) -1) {
+ 		s->size = val;
+ 		pr_debug("switch-output with %s size threshold\n", s->str);
+ 		goto enabled;
+ 	}
+ 
+ 	return -1;
+ 
+ enabled:
+ 	rec->timestamp_filename = true;
+ 	s->enabled              = true;
+ 
+ 	if (s->size && !rec->opts.no_buffering)
+ 		switch_output_size_warn(rec);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 0c5824498e8b (perf record: Add switch-output size warning)
  static const char * const __record_usage[] = {
  	"perf record [<options>] [<command>]",
  	"perf record [<options>] -- <command> [<options>]",
* Unmerged path tools/perf/builtin-record.c
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index f8c0c61569ee..5da622e2e2ed 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1175,7 +1175,7 @@ unsigned long perf_event_mlock_kb_in_pages(void)
 	return pages;
 }
 
-static size_t perf_evlist__mmap_size(unsigned long pages)
+size_t perf_evlist__mmap_size(unsigned long pages)
 {
 	if (pages == UINT_MAX)
 		pages = perf_event_mlock_kb_in_pages();
diff --git a/tools/perf/util/evlist.h b/tools/perf/util/evlist.h
index 6d6a541f1db0..e6160bc64ad1 100644
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@ -184,6 +184,8 @@ int perf_evlist__mmap(struct perf_evlist *evlist, unsigned int pages,
 		      bool overwrite);
 void perf_evlist__munmap(struct perf_evlist *evlist);
 
+size_t perf_evlist__mmap_size(unsigned long pages);
+
 void perf_evlist__disable(struct perf_evlist *evlist);
 void perf_evlist__enable(struct perf_evlist *evlist);
 void perf_evlist__toggle_enable(struct perf_evlist *evlist);
