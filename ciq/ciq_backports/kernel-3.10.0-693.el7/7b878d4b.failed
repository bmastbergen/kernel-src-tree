random: Add arch_has_random[_seed]()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author H. Peter Anvin <hpa@linux.intel.com>
commit 7b878d4b48c4e04b936918bb83836a107ba453b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7b878d4b.failed

Add predicate functions for having arch_get_random[_seed]*().  The
only current use is to avoid the loop in arch_random_refill() when
arch_get_random_seed_long() is unavailable.

	Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Michael Ellerman <michael@ellerman.id.au>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 7b878d4b48c4e04b936918bb83836a107ba453b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/archrandom.h
#	arch/x86/include/asm/archrandom.h
#	drivers/char/random.c
#	include/linux/random.h
diff --cc arch/powerpc/include/asm/archrandom.h
index d853d163ba47,bde531103638..000000000000
--- a/arch/powerpc/include/asm/archrandom.h
+++ b/arch/powerpc/include/asm/archrandom.h
@@@ -25,8 -25,26 +25,29 @@@ static inline int arch_get_random_int(u
  	return rc;
  }
  
+ static inline int arch_has_random(void)
+ {
+ 	return !!ppc_md.get_random_long;
+ }
+ 
  int powernv_get_random_long(unsigned long *v);
  
++<<<<<<< HEAD
++=======
+ static inline int arch_get_random_seed_long(unsigned long *v)
+ {
+ 	return 0;
+ }
+ static inline int arch_get_random_seed_int(unsigned int *v)
+ {
+ 	return 0;
+ }
+ static inline int arch_has_random_seed(void)
+ {
+ 	return 0;
+ }
+ 
++>>>>>>> 7b878d4b48c4 (random: Add arch_has_random[_seed]())
  #endif /* CONFIG_ARCH_RANDOM */
  
  #endif /* _ASM_POWERPC_ARCHRANDOM_H */
diff --cc arch/x86/include/asm/archrandom.h
index 0d9ec770f2f8,69f1366f1aa3..000000000000
--- a/arch/x86/include/asm/archrandom.h
+++ b/arch/x86/include/asm/archrandom.h
@@@ -66,8 -109,26 +66,26 @@@ GET_RANDOM(arch_get_random_int, unsigne
  GET_RANDOM(arch_get_random_long, unsigned long, RDRAND_LONG, ASM_NOP3);
  GET_RANDOM(arch_get_random_int, unsigned int, RDRAND_INT, ASM_NOP3);
  
 -GET_SEED(arch_get_random_seed_long, unsigned long, RDSEED_LONG, ASM_NOP4);
 -GET_SEED(arch_get_random_seed_int, unsigned int, RDSEED_INT, ASM_NOP4);
 -
  #endif /* CONFIG_X86_64 */
  
++<<<<<<< HEAD
++=======
+ #define arch_has_random()	static_cpu_has(X86_FEATURE_RDRAND)
+ #define arch_has_random_seed()	static_cpu_has(X86_FEATURE_RDSEED)
+ 
+ #else
+ 
+ static inline int rdrand_long(unsigned long *v)
+ {
+ 	return 0;
+ }
+ 
+ static inline bool rdseed_long(unsigned long *v)
+ {
+ 	return 0;
+ }
+ 
++>>>>>>> 7b878d4b48c4 (random: Add arch_has_random[_seed]())
  #endif  /* CONFIG_ARCH_RANDOM */
  
  extern void x86_init_rdrand(struct cpuinfo_x86 *c);
diff --cc drivers/char/random.c
index e014a74135d7,6b75713d953a..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -1277,6 -1294,37 +1277,40 @@@ void rand_initialize_disk(struct gendis
  }
  #endif
  
++<<<<<<< HEAD
++=======
+ /*
+  * Attempt an emergency refill using arch_get_random_seed_long().
+  *
+  * As with add_interrupt_randomness() be paranoid and only
+  * credit the output as 50% entropic.
+  */
+ static int arch_random_refill(void)
+ {
+ 	const unsigned int nlongs = 64;	/* Arbitrary number */
+ 	unsigned int n = 0;
+ 	unsigned int i;
+ 	unsigned long buf[nlongs];
+ 
+ 	if (!arch_has_random_seed())
+ 		return 0;
+ 
+ 	for (i = 0; i < nlongs; i++) {
+ 		if (arch_get_random_seed_long(&buf[n]))
+ 			n++;
+ 	}
+ 
+ 	if (n) {
+ 		unsigned int rand_bytes = n * sizeof(unsigned long);
+ 
+ 		mix_pool_bytes(&input_pool, buf, rand_bytes, NULL);
+ 		credit_entropy_bits(&input_pool, rand_bytes*4);
+ 	}
+ 
+ 	return n;
+ }
+ 
++>>>>>>> 7b878d4b48c4 (random: Add arch_has_random[_seed]())
  static ssize_t
  random_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)
  {
diff --cc include/linux/random.h
index 2214c3046110,57fbbffd77a0..000000000000
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@@ -90,6 -88,22 +90,25 @@@ static inline int arch_get_random_int(u
  {
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ static inline int arch_has_random(void)
+ {
+ 	return 0;
+ }
+ static inline int arch_get_random_seed_long(unsigned long *v)
+ {
+ 	return 0;
+ }
+ static inline int arch_get_random_seed_int(unsigned int *v)
+ {
+ 	return 0;
+ }
+ static inline int arch_has_random_seed(void)
+ {
+ 	return 0;
+ }
++>>>>>>> 7b878d4b48c4 (random: Add arch_has_random[_seed]())
  #endif
  
  /* Pseudo random number generator from numerical recipes. */
* Unmerged path arch/powerpc/include/asm/archrandom.h
* Unmerged path arch/x86/include/asm/archrandom.h
* Unmerged path drivers/char/random.c
* Unmerged path include/linux/random.h
