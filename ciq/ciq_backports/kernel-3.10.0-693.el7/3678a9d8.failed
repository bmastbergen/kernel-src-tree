netlink: cleanup rntl_af_register

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 3678a9d86324e457d0ff9d898747ee7e787f4bb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3678a9d8.failed

The function __rtnl_af_register is never called outside this
code, and the return value is always 0.

	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3678a9d86324e457d0ff9d898747ee7e787f4bb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/addrconf.c
diff --cc net/ipv6/addrconf.c
index 1122026c2565,6c1634507ec2..000000000000
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@@ -5409,13 -5203,11 +5409,11 @@@ int __init addrconf_init(void
  	for (i = 0; i < IN6_ADDR_HSIZE; i++)
  		INIT_HLIST_HEAD(&inet6_addr_lst[i]);
  
 -	register_netdevice_notifier(&ipv6_dev_notf);
 +	register_netdevice_notifier_rh(&ipv6_dev_notf);
  
 -	addrconf_verify(0);
 +	addrconf_verify();
  
- 	err = rtnl_af_register(&inet6_ops);
- 	if (err < 0)
- 		goto errout_af;
+ 	rtnl_af_register(&inet6_ops);
  
  	err = __rtnl_register(PF_INET6, RTM_GETLINK, NULL, inet6_dump_ifinfo,
  			      NULL);
@@@ -5439,11 -5231,8 +5437,15 @@@
  	return 0;
  errout:
  	rtnl_af_unregister(&inet6_ops);
++<<<<<<< HEAD
 +errout_af:
 +	unregister_netdevice_notifier_rh(&ipv6_dev_notf);
++=======
+ 	unregister_netdevice_notifier(&ipv6_dev_notf);
++>>>>>>> 3678a9d86324 (netlink: cleanup rntl_af_register)
  errlo:
 +	destroy_workqueue(addrconf_wq);
 +out_nowq:
  	unregister_pernet_subsys(&addrconf_ops);
  out_addrlabel:
  	ipv6_addr_label_cleanup();
diff --git a/include/net/rtnetlink.h b/include/net/rtnetlink.h
index 7ab6d3e8deb8..052f3fe8783c 100644
--- a/include/net/rtnetlink.h
+++ b/include/net/rtnetlink.h
@@ -146,10 +146,9 @@ struct rtnl_af_ops {
 					       const struct nlattr *attr);
 };
 
-int __rtnl_af_register(struct rtnl_af_ops *ops);
 void __rtnl_af_unregister(struct rtnl_af_ops *ops);
 
-int rtnl_af_register(struct rtnl_af_ops *ops);
+void rtnl_af_register(struct rtnl_af_ops *ops);
 void rtnl_af_unregister(struct rtnl_af_ops *ops);
 
 struct net *rtnl_link_get_net(struct net *src_net, struct nlattr *tb[]);
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index a0524b4be13b..90bab3e0b42b 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -684,9 +684,7 @@ int __init br_netlink_init(void)
 	int err;
 
 	br_mdb_init();
-	err = rtnl_af_register(&br_af_ops);
-	if (err)
-		goto out;
+	rtnl_af_register(&br_af_ops);
 
 	err = rtnl_link_register(&br_link_ops);
 	if (err)
@@ -696,7 +694,6 @@ int __init br_netlink_init(void)
 
 out_af:
 	rtnl_af_unregister(&br_af_ops);
-out:
 	br_mdb_uninit();
 	return err;
 }
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 8209decfe5a9..ae3a8c90273a 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -460,35 +460,17 @@ static const struct rtnl_af_ops *rtnl_af_lookup(const int family)
 	return NULL;
 }
 
-/**
- * __rtnl_af_register - Register rtnl_af_ops with rtnetlink.
- * @ops: struct rtnl_af_ops * to register
- *
- * The caller must hold the rtnl_mutex.
- *
- * Returns 0 on success or a negative error code.
- */
-int __rtnl_af_register(struct rtnl_af_ops *ops)
-{
-	list_add_tail(&ops->list, &rtnl_af_ops);
-	return 0;
-}
-EXPORT_SYMBOL_GPL(__rtnl_af_register);
-
 /**
  * rtnl_af_register - Register rtnl_af_ops with rtnetlink.
  * @ops: struct rtnl_af_ops * to register
  *
  * Returns 0 on success or a negative error code.
  */
-int rtnl_af_register(struct rtnl_af_ops *ops)
+void rtnl_af_register(struct rtnl_af_ops *ops)
 {
-	int err;
-
 	rtnl_lock();
-	err = __rtnl_af_register(ops);
+	list_add_tail(&ops->list, &rtnl_af_ops);
 	rtnl_unlock();
-	return err;
 }
 EXPORT_SYMBOL_GPL(rtnl_af_register);
 
* Unmerged path net/ipv6/addrconf.c
