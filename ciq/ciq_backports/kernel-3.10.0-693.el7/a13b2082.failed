bridge: drop netfilter fake rtable unconditionally

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Florian Westphal <fw@strlen.de>
commit a13b2082ece95247779b9995c4e91b4246bed023
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a13b2082.failed

Andreas reports kernel oops during rmmod of the br_netfilter module.
Hannes debugged the oops down to a NULL rt6info->rt6i_indev.

Problem is that br_netfilter has the nasty concept of adding a fake
rtable to skb->dst; this happens in a br_netfilter prerouting hook.

A second hook (in bridge LOCAL_IN) is supposed to remove these again
before the skb is handed up the stack.

However, on module unload hooks get unregistered which means an
skb could traverse the prerouting hook that attaches the fake_rtable,
while the 'fake rtable remove' hook gets removed from the hooklist
immediately after.

Fixes: 34666d467cbf1e2e3c7 ("netfilter: bridge: move br_netfilter out of the core")
	Reported-by: Andreas Karis <akaris@redhat.com>
	Debugged-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a13b2082ece95247779b9995c4e91b4246bed023)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_input.c
#	net/bridge/br_netfilter_hooks.c
diff --cc net/bridge/br_input.c
index ca978d06eb18,013f2290bfa5..000000000000
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@@ -24,6 -27,13 +24,16 @@@
  br_should_route_hook_t __rcu *br_should_route_hook __read_mostly;
  EXPORT_SYMBOL(br_should_route_hook);
  
++<<<<<<< HEAD
++=======
+ static int
+ br_netif_receive_skb(struct net *net, struct sock *sk, struct sk_buff *skb)
+ {
+ 	br_drop_fake_rtable(skb);
+ 	return netif_receive_skb(skb);
+ }
+ 
++>>>>>>> a13b2082ece9 (bridge: drop netfilter fake rtable unconditionally)
  static int br_pass_frame_up(struct sk_buff *skb)
  {
  	struct net_device *indev, *brdev = BR_INPUT_SKB_CB(skb)->brdev;
diff --cc net/bridge/br_netfilter_hooks.c
index 3c13f8ee3a66,fa87fbd62bb7..000000000000
--- a/net/bridge/br_netfilter_hooks.c
+++ b/net/bridge/br_netfilter_hooks.c
@@@ -520,25 -521,8 +520,28 @@@ static unsigned int br_nf_pre_routing(c
  }
  
  
++<<<<<<< HEAD
 +/* PF_BRIDGE/LOCAL_IN ************************************************/
 +/* The packet is locally destined, which requires a real
 + * dst_entry, so detach the fake one.  On the way up, the
 + * packet would pass through PRE_ROUTING again (which already
 + * took place when the packet entered the bridge), but we
 + * register an IPv4 PRE_ROUTING 'sabotage' hook that will
 + * prevent this from happening. */
 +static unsigned int br_nf_local_in(const struct nf_hook_ops *ops,
 +				   struct sk_buff *skb,
 +				   const struct net_device *in,
 +				   const struct net_device *out,
 +				   const struct nf_hook_state *state)
 +{
 +	br_drop_fake_rtable(skb);
 +	return NF_ACCEPT;
 +}
 +
++=======
++>>>>>>> a13b2082ece9 (bridge: drop netfilter fake rtable unconditionally)
  /* PF_BRIDGE/FORWARD *************************************************/
 -static int br_nf_forward_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 +static int br_nf_forward_finish(struct sock *sk, struct sk_buff *skb)
  {
  	struct nf_bridge_info *nf_bridge = nf_bridge_info_get(skb);
  	struct net_device *in;
@@@ -922,15 -893,7 +925,18 @@@ static struct nf_hook_ops br_nf_ops[] _
  		.priority = NF_BR_PRI_BRNF,
  	},
  	{
++<<<<<<< HEAD
 +		.hook = br_nf_local_in,
 +		.owner = THIS_MODULE,
 +		.pf = NFPROTO_BRIDGE,
 +		.hooknum = NF_BR_LOCAL_IN,
 +		.priority = NF_BR_PRI_BRNF,
 +	},
 +	{
++=======
++>>>>>>> a13b2082ece9 (bridge: drop netfilter fake rtable unconditionally)
  		.hook = br_nf_forward_ip,
 +		.owner = THIS_MODULE,
  		.pf = NFPROTO_BRIDGE,
  		.hooknum = NF_BR_FORWARD,
  		.priority = NF_BR_PRI_BRNF - 1,
* Unmerged path net/bridge/br_input.c
* Unmerged path net/bridge/br_netfilter_hooks.c
