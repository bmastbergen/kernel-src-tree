Input: wacom - remove passing id for wacom_set_report

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Przemo Firszt <przemo@firszt.eu>
commit 296b737874b8a671a8f9ee5a64602f15c06ae937
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/296b7378.failed

Every call of wacom_set_report was passing "id" as a separate parameter
and buffer also passed the same information. We can use first u8 of the
buffer instead of "id"

	Signed-off-by: Przemo Firszt <przemo@firszt.eu>
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Reviewed-by: Ping Cheng <pingc@wacom.com>
	Tested-by: Przemo Firszt <przemo@firszt.eu>
	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit 296b737874b8a671a8f9ee5a64602f15c06ae937)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,6e0c19146a79..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -79,19 -36,14 +79,29 @@@ static int wacom_get_report(struct usb_
  	return retval;
  }
  
++<<<<<<< HEAD
 +static int wacom_set_report(struct usb_interface *intf, u8 type, u8 id,
 +			    void *buf, size_t size, unsigned int retries)
++=======
+ static int wacom_set_report(struct hid_device *hdev, u8 type, u8 *buf,
+ 			    size_t size, unsigned int retries)
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  {
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	int retval;
  
  	do {
++<<<<<<< HEAD
 +		retval = usb_control_msg(dev, usb_sndctrlpipe(dev, 0),
 +				USB_REQ_SET_REPORT,
 +				USB_TYPE_CLASS | USB_RECIP_INTERFACE,
 +				(type << 8) + id,
 +				intf->altsetting[0].desc.bInterfaceNumber,
 +				buf, size, 1000);
++=======
+ 		retval = hid_hw_raw_request(hdev, buf[0], buf, size, type,
+ 				HID_REQ_SET_REPORT);
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  	} while ((retval == -ETIMEDOUT || retval == -EPIPE) && --retries);
  
  	return retval;
@@@ -544,10 -251,10 +554,15 @@@ static int wacom_set_device_mode(struc
  		rep_data[0] = report_id;
  		rep_data[1] = mode;
  
++<<<<<<< HEAD
 +		error = wacom_set_report(intf, WAC_HID_FEATURE_REPORT,
 +		                         report_id, rep_data, length, 1);
++=======
+ 		error = wacom_set_report(hdev, HID_FEATURE_REPORT, rep_data,
+ 					 length, 1);
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  		if (error >= 0)
 -			error = wacom_get_report(hdev, HID_FEATURE_REPORT,
 +			error = wacom_get_report(intf, WAC_HID_FEATURE_REPORT,
  			                         report_id, rep_data, length, 1);
  	} while ((error < 0 || rep_data[1] != mode) && limit++ < WAC_MSG_RETRIES);
  
@@@ -556,6 -263,59 +571,62 @@@
  	return error < 0 ? error : 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int wacom_bt_query_tablet_data(struct hid_device *hdev, u8 speed,
+ 		struct wacom_features *features)
+ {
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	int ret;
+ 	u8 rep_data[2];
+ 
+ 	switch (features->type) {
+ 	case GRAPHIRE_BT:
+ 		rep_data[0] = 0x03;
+ 		rep_data[1] = 0x00;
+ 		ret = wacom_set_report(hdev, HID_FEATURE_REPORT, rep_data, 2,
+ 					3);
+ 
+ 		if (ret >= 0) {
+ 			rep_data[0] = speed == 0 ? 0x05 : 0x06;
+ 			rep_data[1] = 0x00;
+ 
+ 			ret = wacom_set_report(hdev, HID_FEATURE_REPORT,
+ 						rep_data, 2, 3);
+ 
+ 			if (ret >= 0) {
+ 				wacom->wacom_wac.bt_high_speed = speed;
+ 				return 0;
+ 			}
+ 		}
+ 
+ 		/*
+ 		 * Note that if the raw queries fail, it's not a hard failure
+ 		 * and it is safe to continue
+ 		 */
+ 		hid_warn(hdev, "failed to poke device, command %d, err %d\n",
+ 			 rep_data[0], ret);
+ 		break;
+ 	case INTUOS4WL:
+ 		if (speed == 1)
+ 			wacom->wacom_wac.bt_features &= ~0x20;
+ 		else
+ 			wacom->wacom_wac.bt_features |= 0x20;
+ 
+ 		rep_data[0] = 0x03;
+ 		rep_data[1] = wacom->wacom_wac.bt_features;
+ 
+ 		ret = wacom_set_report(hdev, HID_FEATURE_REPORT, rep_data, 2,
+ 					1);
+ 		if (ret >= 0)
+ 			wacom->wacom_wac.bt_high_speed = speed;
+ 		break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  /*
   * Switch the tablet into its most-capable mode. Wacom tablets are
   * typically configured to power-up in a mode which sends mouse-like
@@@ -771,8 -520,8 +842,13 @@@ static int wacom_led_control(struct wac
  		buf[4] = wacom->led.img_lum;
  	}
  
++<<<<<<< HEAD
 +	retval = wacom_set_report(wacom->intf, 0x03, WAC_CMD_LED_CONTROL,
 +				  buf, 9, WAC_CMD_RETRIES);
++=======
+ 	retval = wacom_set_report(wacom->hdev, HID_FEATURE_REPORT, buf, 9,
+ 				  WAC_CMD_RETRIES);
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  	kfree(buf);
  
  	return retval;
@@@ -790,8 -541,8 +866,13 @@@ static int wacom_led_putimage(struct wa
  	/* Send 'start' command */
  	buf[0] = WAC_CMD_ICON_START;
  	buf[1] = 1;
++<<<<<<< HEAD
 +	retval = wacom_set_report(wacom->intf, 0x03, WAC_CMD_ICON_START,
 +				  buf, 2, WAC_CMD_RETRIES);
++=======
+ 	retval = wacom_set_report(wacom->hdev, HID_FEATURE_REPORT, buf, 2,
+ 				  WAC_CMD_RETRIES);
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  	if (retval < 0)
  		goto out;
  
@@@ -799,10 -550,10 +880,15 @@@
  	buf[1] = button_id & 0x07;
  	for (i = 0; i < 4; i++) {
  		buf[2] = i;
 -		memcpy(buf + 3, img + i * chunk_len, chunk_len);
 +		memcpy(buf + 3, img + i * 256, 256);
  
++<<<<<<< HEAD
 +		retval = wacom_set_report(wacom->intf, 0x03, WAC_CMD_ICON_XFER,
 +					  buf, 259, WAC_CMD_RETRIES);
++=======
+ 		retval = wacom_set_report(wacom->hdev, HID_FEATURE_REPORT,
+ 					  buf, chunk_len + 3, WAC_CMD_RETRIES);
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  		if (retval < 0)
  			break;
  	}
@@@ -810,8 -561,8 +896,13 @@@
  	/* Send 'stop' */
  	buf[0] = WAC_CMD_ICON_START;
  	buf[1] = 0;
++<<<<<<< HEAD
 +	wacom_set_report(wacom->intf, 0x03, WAC_CMD_ICON_START,
 +			 buf, 2, WAC_CMD_RETRIES);
++=======
+ 	wacom_set_report(wacom->hdev, HID_FEATURE_REPORT, buf, 2,
+ 			 WAC_CMD_RETRIES);
++>>>>>>> 296b737874b8 (Input: wacom - remove passing id for wacom_set_report)
  
  out:
  	kfree(buf);
* Unmerged path drivers/hid/wacom_sys.c
