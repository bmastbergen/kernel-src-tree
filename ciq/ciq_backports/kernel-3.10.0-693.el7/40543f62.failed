dax: fix a comment in dax_zero_page_range and dax_truncate_page

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Vishal Verma <vishal.l.verma@intel.com>
commit 40543f62cbdce42633e3fe10923099feee272e1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/40543f62.failed

The distinction between PAGE_SIZE and PAGE_CACHE_SIZE was removed in

09cbfea mm, fs: get rid of PAGE_CACHE_* and page_cache_{get,release}
macros

The comments for the above functions described a distinction between
those, that is now redundant, so remove those paragraphs

	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
(cherry picked from commit 40543f62cbdce42633e3fe10923099feee272e1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
diff --cc fs/dax.c
index 2dc57eba7712,ea936b3d93dc..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -1069,12 -995,6 +1069,15 @@@ EXPORT_SYMBOL_GPL(dax_pfn_mkwrite)
   * page in a DAX file.  This is intended for hole-punch operations.  If
   * you are truncating a file, the helper function dax_truncate_page() may be
   * more convenient.
++<<<<<<< HEAD
 + *
 + * We work in terms of PAGE_CACHE_SIZE here for commonality with
 + * block_truncate_page(), but we could go down to PAGE_SIZE if the filesystem
 + * took care of disposing of the unnecessary blocks.  Even if the filesystem
 + * block size is smaller than PAGE_SIZE, we have to zero the rest of the page
 + * since the file might be mmapped.
++=======
++>>>>>>> 40543f62cbdc (dax: fix a comment in dax_zero_page_range and dax_truncate_page)
   */
  int dax_zero_page_range(struct inode *inode, loff_t from, unsigned length,
  							get_block_t get_block)
@@@ -1120,12 -1029,6 +1123,15 @@@ EXPORT_SYMBOL_GPL(dax_zero_page_range)
   *
   * Similar to block_truncate_page(), this function can be called by a
   * filesystem when it is truncating a DAX file to handle the partial page.
++<<<<<<< HEAD
 + *
 + * We work in terms of PAGE_CACHE_SIZE here for commonality with
 + * block_truncate_page(), but we could go down to PAGE_SIZE if the filesystem
 + * took care of disposing of the unnecessary blocks.  Even if the filesystem
 + * block size is smaller than PAGE_SIZE, we have to zero the rest of the page
 + * since the file might be mmapped.
++=======
++>>>>>>> 40543f62cbdc (dax: fix a comment in dax_zero_page_range and dax_truncate_page)
   */
  int dax_truncate_page(struct inode *inode, loff_t from, get_block_t get_block)
  {
* Unmerged path fs/dax.c
