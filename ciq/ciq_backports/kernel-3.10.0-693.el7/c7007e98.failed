perf tools: Introduce weak alternative to sched_getcpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit c7007e983682b31d91e9ad7c3e85c49ffcc3651f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c7007e98.failed

Which is just a wrapper for sys_getcpu and is not present in at least
musl libc.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-kblef7svmhr0g93kkx78envg@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit c7007e983682b31d91e9ad7c3e85c49ffcc3651f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/util.h
diff --cc tools/perf/util/util.h
index 0b2c51386d13,d8d41ef8da57..000000000000
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@@ -350,4 -360,9 +350,12 @@@ typedef void (*print_binary_t)(enum bin
  void print_binary(unsigned char *data, size_t len,
  		  size_t bytes_per_line, print_binary_t printer,
  		  void *extra);
++<<<<<<< HEAD
++=======
+ 
+ #ifndef __GLIBC__
+ extern int sched_getcpu(void);
+ #endif
+ 
++>>>>>>> c7007e983682 (perf tools: Introduce weak alternative to sched_getcpu())
  #endif /* GIT_COMPAT_UTIL_H */
diff --git a/tools/arch/x86/include/asm/unistd_32.h b/tools/arch/x86/include/asm/unistd_32.h
index cf33ab09273d..88b3f8c8920c 100644
--- a/tools/arch/x86/include/asm/unistd_32.h
+++ b/tools/arch/x86/include/asm/unistd_32.h
@@ -7,3 +7,6 @@
 #ifndef __NR_gettid
 # define __NR_gettid 224
 #endif
+#ifndef __NR_getcpu
+# define __NR_getcpu 318
+#endif
diff --git a/tools/arch/x86/include/asm/unistd_64.h b/tools/arch/x86/include/asm/unistd_64.h
index 2c9835695b56..fbdb70ee8837 100644
--- a/tools/arch/x86/include/asm/unistd_64.h
+++ b/tools/arch/x86/include/asm/unistd_64.h
@@ -7,3 +7,6 @@
 #ifndef __NR_gettid
 # define __NR_gettid 186
 #endif
+#ifndef __NR_getcpu
+# define __NR_getcpu 309
+#endif
diff --git a/tools/perf/util/cloexec.c b/tools/perf/util/cloexec.c
index 2babddaa2481..912a371de937 100644
--- a/tools/perf/util/cloexec.c
+++ b/tools/perf/util/cloexec.c
@@ -4,18 +4,24 @@
 #include "cloexec.h"
 #include "asm/bug.h"
 #include "debug.h"
+#include <unistd.h>
+#include <asm/unistd.h>
+#include <sys/syscall.h>
 
 static unsigned long flag = PERF_FLAG_FD_CLOEXEC;
 
-#ifdef __GLIBC_PREREQ
-#if !__GLIBC_PREREQ(2, 6)
 int __weak sched_getcpu(void)
 {
+#ifdef __NR_getcpu
+	unsigned cpu;
+	int err = syscall(__NR_getcpu, &cpu, NULL, NULL);
+	if (!err)
+		return cpu;
+#else
 	errno = ENOSYS;
+#endif
 	return -1;
 }
-#endif
-#endif
 
 static int perf_flag_probe(void)
 {
* Unmerged path tools/perf/util/util.h
