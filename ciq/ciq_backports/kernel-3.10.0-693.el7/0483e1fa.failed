x86/mm: Implement ASLR for kernel memory regions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] mm: Implement ASLR for kernel memory regions (Baoquan He) [1424943]
Rebuild_FUZZ: 95.65%
commit-author Thomas Garnier <thgarnie@google.com>
commit 0483e1fa6e09d4948272680f691dccb1edb9677f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0483e1fa.failed

Randomizes the virtual address space of kernel memory regions for
x86_64. This first patch adds the infrastructure and does not randomize
any region. The following patches will randomize the physical memory
mapping, vmalloc and vmemmap regions.

This security feature mitigates exploits relying on predictable kernel
addresses. These addresses can be used to disclose the kernel modules
base addresses or corrupt specific structures to elevate privileges
bypassing the current implementation of KASLR. This feature can be
enabled with the CONFIG_RANDOMIZE_MEMORY option.

The order of each memory region is not changed. The feature looks at the
available space for the regions based on different configuration options
and randomizes the base and space between each. The size of the physical
memory mapping is the available physical memory. No performance impact
was detected while testing the feature.

Entropy is generated using the KASLR early boot functions now shared in
the lib directory (originally written by Kees Cook). Randomization is
done on PGD & PUD page table levels to increase possible addresses. The
physical memory mapping code was adapted to support PUD level virtual
addresses. This implementation on the best configuration provides 30,000
possible virtual addresses in average for each memory region.  An
additional low memory page is used to ensure each CPU can start with a
PGD aligned virtual address (for realmode).

x86/dump_pagetable was updated to correctly display each region.

Updated documentation on x86_64 memory layout accordingly.

Performance data, after all patches in the series:

Kernbench shows almost no difference (-+ less than 1%):

Before:

Average Optimal load -j 12 Run (std deviation): Elapsed Time 102.63 (1.2695)
User Time 1034.89 (1.18115) System Time 87.056 (0.456416) Percent CPU 1092.9
(13.892) Context Switches 199805 (3455.33) Sleeps 97907.8 (900.636)

After:

Average Optimal load -j 12 Run (std deviation): Elapsed Time 102.489 (1.10636)
User Time 1034.86 (1.36053) System Time 87.764 (0.49345) Percent CPU 1095
(12.7715) Context Switches 199036 (4298.1) Sleeps 97681.6 (1031.11)

Hackbench shows 0% difference on average (hackbench 90 repeated 10 times):

attemp,before,after 1,0.076,0.069 2,0.072,0.069 3,0.066,0.066 4,0.066,0.068
5,0.066,0.067 6,0.066,0.069 7,0.067,0.066 8,0.063,0.067 9,0.067,0.065
10,0.068,0.071 average,0.0677,0.0677

	Signed-off-by: Thomas Garnier <thgarnie@google.com>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Cc: Alexander Kuleshov <kuleshovmail@gmail.com>
	Cc: Alexander Popov <alpopov@ptsecurity.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Christian Borntraeger <borntraeger@de.ibm.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jan Beulich <JBeulich@suse.com>
	Cc: Joerg Roedel <jroedel@suse.de>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Lv Zheng <lv.zheng@intel.com>
	Cc: Mark Salter <msalter@redhat.com>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephen Smalley <sds@tycho.nsa.gov>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Toshi Kani <toshi.kani@hpe.com>
	Cc: Xiao Guangrong <guangrong.xiao@linux.intel.com>
	Cc: Yinghai Lu <yinghai@kernel.org>
	Cc: kernel-hardening@lists.openwall.com
	Cc: linux-doc@vger.kernel.org
Link: http://lkml.kernel.org/r/1466556426-32664-6-git-send-email-keescook@chromium.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 0483e1fa6e09d4948272680f691dccb1edb9677f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/kaslr.h
#	arch/x86/kernel/setup.c
#	arch/x86/mm/Makefile
#	arch/x86/mm/dump_pagetables.c
diff --cc arch/x86/kernel/setup.c
index 7c228560d4bb,a2616584b6e9..000000000000
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@@ -113,6 -112,8 +113,11 @@@
  #include <asm/alternative.h>
  #include <asm/prom.h>
  #include <asm/microcode.h>
++<<<<<<< HEAD
++=======
+ #include <asm/mmu_context.h>
+ #include <asm/kaslr.h>
++>>>>>>> 0483e1fa6e09 (x86/mm: Implement ASLR for kernel memory regions)
  
  /*
   * max_low_pfn_mapped: highest direct mapped pfn under 4GB
diff --cc arch/x86/mm/Makefile
index 8b93fc0c70bb,96d2b847e09e..000000000000
--- a/arch/x86/mm/Makefile
+++ b/arch/x86/mm/Makefile
@@@ -29,8 -35,7 +29,14 @@@ obj-$(CONFIG_AMD_NUMA)		+= amdtopology.
  obj-$(CONFIG_ACPI_NUMA)		+= srat.o
  obj-$(CONFIG_NUMA_EMU)		+= numa_emulation.o
  
++<<<<<<< HEAD
 +obj-$(CONFIG_MEMTEST)		+= memtest.o
++=======
+ obj-$(CONFIG_X86_INTEL_MPX)	+= mpx.o
+ obj-$(CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS) += pkeys.o
+ obj-$(CONFIG_RANDOMIZE_MEMORY) += kaslr.o
++>>>>>>> 0483e1fa6e09 (x86/mm: Implement ASLR for kernel memory regions)
 +
 +obj-$(CONFIG_X86_INTEL_MPX)	+= mpx.o
  
 +obj-$(CONFIG_TRACK_DIRTY_PAGES)	+= track.o
diff --cc arch/x86/mm/dump_pagetables.c
index 20621d753d5f,9a17250bcbe0..000000000000
--- a/arch/x86/mm/dump_pagetables.c
+++ b/arch/x86/mm/dump_pagetables.c
@@@ -65,9 -72,15 +65,21 @@@ static struct addr_marker address_marke
  	{ 0, "User Space" },
  #ifdef CONFIG_X86_64
  	{ 0x8000000000000000UL, "Kernel Space" },
++<<<<<<< HEAD
 +	{ PAGE_OFFSET,		"Low Kernel Mapping" },
 +	{ VMALLOC_START,        "vmalloc() Area" },
 +	{ VMEMMAP_START,        "Vmemmap" },
++=======
+ 	{ 0/* PAGE_OFFSET */,   "Low Kernel Mapping" },
+ 	{ 0/* VMALLOC_START */, "vmalloc() Area" },
+ 	{ 0/* VMEMMAP_START */, "Vmemmap" },
+ # ifdef CONFIG_X86_ESPFIX64
+ 	{ ESPFIX_BASE_ADDR,	"ESPfix Area", 16 },
+ # endif
+ # ifdef CONFIG_EFI
+ 	{ EFI_VA_END,		"EFI Runtime Services" },
+ # endif
++>>>>>>> 0483e1fa6e09 (x86/mm: Implement ASLR for kernel memory regions)
  	{ __START_KERNEL_map,   "High Kernel Mapping" },
  	{ MODULES_VADDR,        "Modules" },
  	{ MODULES_END,          "End Modules" },
@@@ -351,32 -412,38 +363,43 @@@ void ptdump_walk_pgd_level(struct seq_f
  	/* Flush out the last page */
  	st.current_address = normalize_addr(PTRS_PER_PGD*PGD_LEVEL_MULT);
  	note_page(m, &st, __pgprot(0), 0);
 -	if (!checkwx)
 -		return;
 -	if (st.wx_pages)
 -		pr_info("x86/mm: Checked W+X mappings: FAILED, %lu W+X pages found.\n",
 -			st.wx_pages);
 -	else
 -		pr_info("x86/mm: Checked W+X mappings: passed, no W+X pages found.\n");
  }
  
 -void ptdump_walk_pgd_level(struct seq_file *m, pgd_t *pgd)
 +static int ptdump_show(struct seq_file *m, void *v)
  {
 -	ptdump_walk_pgd_level_core(m, pgd, false);
 +	ptdump_walk_pgd_level(m, NULL);
 +	return 0;
  }
 -EXPORT_SYMBOL_GPL(ptdump_walk_pgd_level);
  
 -void ptdump_walk_pgd_level_checkwx(void)
 +static int ptdump_open(struct inode *inode, struct file *filp)
  {
 -	ptdump_walk_pgd_level_core(NULL, NULL, true);
++<<<<<<< HEAD
 +	return single_open(filp, ptdump_show, NULL);
  }
  
 -static int __init pt_dump_init(void)
 +static const struct file_operations ptdump_fops = {
 +	.open		= ptdump_open,
 +	.read		= seq_read,
 +	.llseek		= seq_lseek,
 +	.release	= single_release,
 +};
 +
 +static int pt_dump_init(void)
  {
 +	struct dentry *pe;
 +
++=======
+ 	/*
+ 	 * Various markers are not compile-time constants, so assign them
+ 	 * here.
+ 	 */
+ #ifdef CONFIG_X86_64
+ 	address_markers[LOW_KERNEL_NR].start_address = PAGE_OFFSET;
+ 	address_markers[VMALLOC_START_NR].start_address = VMALLOC_START;
+ 	address_markers[VMEMMAP_START_NR].start_address = VMEMMAP_START;
+ #endif
++>>>>>>> 0483e1fa6e09 (x86/mm: Implement ASLR for kernel memory regions)
  #ifdef CONFIG_X86_32
- 	/* Not a compile-time constant on x86-32 */
  	address_markers[VMALLOC_START_NR].start_address = VMALLOC_START;
  	address_markers[VMALLOC_END_NR].start_address = VMALLOC_END;
  # ifdef CONFIG_HIGHMEM
* Unmerged path arch/x86/include/asm/kaslr.h
diff --git a/Documentation/x86/x86_64/mm.txt b/Documentation/x86/x86_64/mm.txt
index 36ba26216d26..fec52e7da5b3 100644
--- a/Documentation/x86/x86_64/mm.txt
+++ b/Documentation/x86/x86_64/mm.txt
@@ -35,4 +35,8 @@ range of 64Gb (arbitrarily set, can be raised if needed)
 
 0xffffffef00000000 - 0xffffffff00000000
 
+Note that if CONFIG_RANDOMIZE_MEMORY is enabled, the direct mapping of all
+physical memory, vmalloc/ioremap space and virtual memory map are randomized.
+Their order is preserved but their base will be offset early at boot time.
+
 -Andi Kleen, Jul 2004
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 5162fc083bed..65021b0d00e9 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -1823,6 +1823,23 @@ config PHYSICAL_ALIGN
 
 	  Don't change this unless you know what you are doing.
 
+config RANDOMIZE_MEMORY
+	bool "Randomize the kernel memory sections"
+	depends on X86_64
+	depends on RANDOMIZE_BASE
+	default RANDOMIZE_BASE
+	---help---
+	   Randomizes the base virtual address of kernel memory sections
+	   (physical memory mapping, vmalloc & vmemmap). This security feature
+	   makes exploits relying on predictable memory locations less reliable.
+
+	   The order of allocations remains unchanged. Entropy is generated in
+	   the same way as RANDOMIZE_BASE. Current implementation in the optimal
+	   configuration have in average 30,000 different possible virtual
+	   addresses for each memory section.
+
+	   If unsure, say N.
+
 config HOTPLUG_CPU
 	bool "Support for hot-pluggable CPUs"
 	depends on SMP
* Unmerged path arch/x86/include/asm/kaslr.h
diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
index 240cac514e74..4ef3cfee007e 100644
--- a/arch/x86/include/asm/pgtable.h
+++ b/arch/x86/include/asm/pgtable.h
@@ -709,11 +709,16 @@ void early_alloc_pgt_buf(void);
 #ifdef CONFIG_X86_64
 /* Realmode trampoline initialization. */
 extern pgd_t trampoline_pgd_entry;
-static inline void __meminit init_trampoline(void)
+static inline void __meminit init_trampoline_default(void)
 {
 	/* Default trampoline pgd value */
 	trampoline_pgd_entry = init_level4_pgt[pgd_index(__PAGE_OFFSET)];
 }
+# ifdef CONFIG_RANDOMIZE_MEMORY
+void __meminit init_trampoline(void);
+# else
+#  define init_trampoline init_trampoline_default
+# endif
 #else
 static inline void init_trampoline(void) { }
 #endif
* Unmerged path arch/x86/kernel/setup.c
* Unmerged path arch/x86/mm/Makefile
* Unmerged path arch/x86/mm/dump_pagetables.c
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 6f6527ad77c9..513e627812f8 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -17,6 +17,7 @@
 #include <asm/proto.h>
 #include <asm/dma.h>		/* for MAX_DMA_PFN */
 #include <asm/microcode.h>
+#include <asm/kaslr.h>
 
 #include "mm_internal.h"
 
diff --git a/arch/x86/mm/kaslr.c b/arch/x86/mm/kaslr.c
new file mode 100644
index 000000000000..d5380a48e8fb
--- /dev/null
+++ b/arch/x86/mm/kaslr.c
@@ -0,0 +1,152 @@
+/*
+ * This file implements KASLR memory randomization for x86_64. It randomizes
+ * the virtual address space of kernel memory regions (physical memory
+ * mapping, vmalloc & vmemmap) for x86_64. This security feature mitigates
+ * exploits relying on predictable kernel addresses.
+ *
+ * Entropy is generated using the KASLR early boot functions now shared in
+ * the lib directory (originally written by Kees Cook). Randomization is
+ * done on PGD & PUD page table levels to increase possible addresses. The
+ * physical memory mapping code was adapted to support PUD level virtual
+ * addresses. This implementation on the best configuration provides 30,000
+ * possible virtual addresses in average for each memory region. An additional
+ * low memory page is used to ensure each CPU can start with a PGD aligned
+ * virtual address (for realmode).
+ *
+ * The order of each memory region is not changed. The feature looks at
+ * the available space for the regions based on different configuration
+ * options and randomizes the base and space between each. The size of the
+ * physical memory mapping is the available physical memory.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/random.h>
+
+#include <asm/pgalloc.h>
+#include <asm/pgtable.h>
+#include <asm/setup.h>
+#include <asm/kaslr.h>
+
+#include "mm_internal.h"
+
+#define TB_SHIFT 40
+
+/*
+ * Virtual address start and end range for randomization. The end changes base
+ * on configuration to have the highest amount of space for randomization.
+ * It increases the possible random position for each randomized region.
+ *
+ * You need to add an if/def entry if you introduce a new memory region
+ * compatible with KASLR. Your entry must be in logical order with memory
+ * layout. For example, ESPFIX is before EFI because its virtual address is
+ * before. You also need to add a BUILD_BUG_ON in kernel_randomize_memory to
+ * ensure that this order is correct and won't be changed.
+ */
+static const unsigned long vaddr_start;
+static const unsigned long vaddr_end;
+
+/*
+ * Memory regions randomized by KASLR (except modules that use a separate logic
+ * earlier during boot). The list is ordered based on virtual addresses. This
+ * order is kept after randomization.
+ */
+static __initdata struct kaslr_memory_region {
+	unsigned long *base;
+	unsigned long size_tb;
+} kaslr_regions[] = {
+};
+
+/* Get size in bytes used by the memory region */
+static inline unsigned long get_padding(struct kaslr_memory_region *region)
+{
+	return (region->size_tb << TB_SHIFT);
+}
+
+/*
+ * Apply no randomization if KASLR was disabled at boot or if KASAN
+ * is enabled. KASAN shadow mappings rely on regions being PGD aligned.
+ */
+static inline bool kaslr_memory_enabled(void)
+{
+	return kaslr_enabled() && !config_enabled(CONFIG_KASAN);
+}
+
+/* Initialize base and padding for each memory region randomized with KASLR */
+void __init kernel_randomize_memory(void)
+{
+	size_t i;
+	unsigned long vaddr = vaddr_start;
+	unsigned long rand;
+	struct rnd_state rand_state;
+	unsigned long remain_entropy;
+
+	if (!kaslr_memory_enabled())
+		return;
+
+	/* Calculate entropy available between regions */
+	remain_entropy = vaddr_end - vaddr_start;
+	for (i = 0; i < ARRAY_SIZE(kaslr_regions); i++)
+		remain_entropy -= get_padding(&kaslr_regions[i]);
+
+	prandom_seed_state(&rand_state, kaslr_get_random_long("Memory"));
+
+	for (i = 0; i < ARRAY_SIZE(kaslr_regions); i++) {
+		unsigned long entropy;
+
+		/*
+		 * Select a random virtual address using the extra entropy
+		 * available.
+		 */
+		entropy = remain_entropy / (ARRAY_SIZE(kaslr_regions) - i);
+		prandom_bytes_state(&rand_state, &rand, sizeof(rand));
+		entropy = (rand % (entropy + 1)) & PUD_MASK;
+		vaddr += entropy;
+		*kaslr_regions[i].base = vaddr;
+
+		/*
+		 * Jump the region and add a minimum padding based on
+		 * randomization alignment.
+		 */
+		vaddr += get_padding(&kaslr_regions[i]);
+		vaddr = round_up(vaddr + 1, PUD_SIZE);
+		remain_entropy -= entropy;
+	}
+}
+
+/*
+ * Create PGD aligned trampoline table to allow real mode initialization
+ * of additional CPUs. Consume only 1 low memory page.
+ */
+void __meminit init_trampoline(void)
+{
+	unsigned long paddr, paddr_next;
+	pgd_t *pgd;
+	pud_t *pud_page, *pud_page_tramp;
+	int i;
+
+	if (!kaslr_memory_enabled()) {
+		init_trampoline_default();
+		return;
+	}
+
+	pud_page_tramp = alloc_low_page();
+
+	paddr = 0;
+	pgd = pgd_offset_k((unsigned long)__va(paddr));
+	pud_page = (pud_t *) pgd_page_vaddr(*pgd);
+
+	for (i = pud_index(paddr); i < PTRS_PER_PUD; i++, paddr = paddr_next) {
+		pud_t *pud, *pud_tramp;
+		unsigned long vaddr = (unsigned long)__va(paddr);
+
+		pud_tramp = pud_page_tramp + pud_index(paddr);
+		pud = pud_page + pud_index(vaddr);
+		paddr_next = (paddr & PUD_MASK) + PUD_SIZE;
+
+		*pud_tramp = *pud;
+	}
+
+	set_pgd(&trampoline_pgd_entry,
+		__pgd(_KERNPG_TABLE | __pa(pud_page_tramp)));
+}
