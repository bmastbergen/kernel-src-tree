IB/core: Add scatter FCS flag to use in WQ creation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Noa Osherovich <noaos@mellanox.com>
commit 27b0df1175d543c46f63de6dccba98d0e5cf2276
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/27b0df11.failed

Add a new creation flag to set the scatter FCS capability of a WQ.

	Signed-off-by: Noa Osherovich <noaos@mellanox.com>
	Reviewed-by: Majd Dibbiny <majd@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 27b0df1175d543c46f63de6dccba98d0e5cf2276)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/rdma/ib_verbs.h
diff --cc include/rdma/ib_verbs.h
index 0cffa4bb2aa6,62fb9c61b354..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -1468,6 -1460,84 +1468,87 @@@ struct ib_srq 
  	} ext;
  };
  
++<<<<<<< HEAD
++=======
+ enum ib_raw_packet_caps {
+ 	/* Strip cvlan from incoming packet and report it in the matching work
+ 	 * completion is supported.
+ 	 */
+ 	IB_RAW_PACKET_CAP_CVLAN_STRIPPING	= (1 << 0),
+ 	/* Scatter FCS field of an incoming packet to host memory is supported.
+ 	 */
+ 	IB_RAW_PACKET_CAP_SCATTER_FCS		= (1 << 1),
+ 	/* Checksum offloads are supported (for both send and receive). */
+ 	IB_RAW_PACKET_CAP_IP_CSUM		= (1 << 2),
+ };
+ 
+ enum ib_wq_type {
+ 	IB_WQT_RQ
+ };
+ 
+ enum ib_wq_state {
+ 	IB_WQS_RESET,
+ 	IB_WQS_RDY,
+ 	IB_WQS_ERR
+ };
+ 
+ struct ib_wq {
+ 	struct ib_device       *device;
+ 	struct ib_uobject      *uobject;
+ 	void		    *wq_context;
+ 	void		    (*event_handler)(struct ib_event *, void *);
+ 	struct ib_pd	       *pd;
+ 	struct ib_cq	       *cq;
+ 	u32		wq_num;
+ 	enum ib_wq_state       state;
+ 	enum ib_wq_type	wq_type;
+ 	atomic_t		usecnt;
+ };
+ 
+ enum ib_wq_flags {
+ 	IB_WQ_FLAGS_CVLAN_STRIPPING	= 1 << 0,
+ 	IB_WQ_FLAGS_SCATTER_FCS		= 1 << 1,
+ };
+ 
+ struct ib_wq_init_attr {
+ 	void		       *wq_context;
+ 	enum ib_wq_type	wq_type;
+ 	u32		max_wr;
+ 	u32		max_sge;
+ 	struct	ib_cq	       *cq;
+ 	void		    (*event_handler)(struct ib_event *, void *);
+ 	u32		create_flags; /* Use enum ib_wq_flags */
+ };
+ 
+ enum ib_wq_attr_mask {
+ 	IB_WQ_STATE		= 1 << 0,
+ 	IB_WQ_CUR_STATE		= 1 << 1,
+ 	IB_WQ_FLAGS		= 1 << 2,
+ };
+ 
+ struct ib_wq_attr {
+ 	enum	ib_wq_state	wq_state;
+ 	enum	ib_wq_state	curr_wq_state;
+ 	u32			flags; /* Use enum ib_wq_flags */
+ 	u32			flags_mask; /* Use enum ib_wq_flags */
+ };
+ 
+ struct ib_rwq_ind_table {
+ 	struct ib_device	*device;
+ 	struct ib_uobject      *uobject;
+ 	atomic_t		usecnt;
+ 	u32		ind_tbl_num;
+ 	u32		log_ind_tbl_size;
+ 	struct ib_wq	**ind_tbl;
+ };
+ 
+ struct ib_rwq_ind_table_init_attr {
+ 	u32		log_ind_tbl_size;
+ 	/* Each entry is a pointer to Receive Work Queue */
+ 	struct ib_wq	**ind_tbl;
+ };
+ 
++>>>>>>> 27b0df1175d5 (IB/core: Add scatter FCS flag to use in WQ creation)
  /*
   * @max_write_sge: Maximum SGE elements per RDMA WRITE request.
   * @max_read_sge:  Maximum SGE elements per RDMA READ request.
* Unmerged path include/rdma/ib_verbs.h
