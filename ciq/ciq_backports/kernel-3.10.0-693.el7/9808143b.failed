perf tools: Add unit_number__scnprintf function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 9808143ba2e54818a3cf445d9b69b3f5f15451ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9808143b.failed

Add unit_number__scnprintf function to display size units and use it in
-m option info message.

Before:
  $ perf record -m 10M ls
  rounding mmap pages size to 16777216 bytes (4096 pages)
  ...

After:
  $ perf record -m 10M ls
  rounding mmap pages size to 16M (4096 pages)
  ...

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1483955520-29063-2-git-send-email-jolsa@kernel.org
[ Rename it to unit_number__scnprintf for consistency ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9808143ba2e54818a3cf445d9b69b3f5f15451ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/Build
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/tests.h
#	tools/perf/util/util.c
#	tools/perf/util/util.h
diff --cc tools/perf/tests/Build
index 0940f32e3e4a,1cb3d9b540e9..000000000000
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@@ -37,6 -39,40 +37,43 @@@ perf-y += stat.
  perf-y += event_update.o
  perf-y += event-times.o
  perf-y += backward-ring-buffer.o
++<<<<<<< HEAD
++=======
+ perf-y += sdt.o
+ perf-y += is_printable_array.o
+ perf-y += bitmap.o
+ perf-y += perf-hooks.o
+ perf-y += clang.o
+ perf-y += unit_number__scnprintf.o
+ 
+ $(OUTPUT)tests/llvm-src-base.c: tests/bpf-script-example.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_base_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-kbuild.c: tests/bpf-script-test-kbuild.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_kbuild_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-prologue.c: tests/bpf-script-test-prologue.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_prologue_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-relocation.c: tests/bpf-script-test-relocation.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_relocation[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
++>>>>>>> 9808143ba2e5 (perf tools: Add unit_number__scnprintf function)
  
  ifeq ($(ARCH),$(filter $(ARCH),x86 arm arm64 powerpc))
  perf-$(CONFIG_DWARF_UNWIND) += dwarf-unwind.o
diff --cc tools/perf/tests/builtin-test.c
index da4eec430844,37e326bfd2dc..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -200,6 -222,35 +200,38 @@@ static struct test generic_tests[] = 
  		.func = test__cpu_map_print,
  	},
  	{
++<<<<<<< HEAD
++=======
+ 		.desc = "Probe SDT events",
+ 		.func = test__sdt_event,
+ 	},
+ 	{
+ 		.desc = "is_printable_array",
+ 		.func = test__is_printable_array,
+ 	},
+ 	{
+ 		.desc = "Print bitmap",
+ 		.func = test__bitmap_print,
+ 	},
+ 	{
+ 		.desc = "perf hooks",
+ 		.func = test__perf_hooks,
+ 	},
+ 	{
+ 		.desc = "builtin clang support",
+ 		.func = test__clang,
+ 		.subtest = {
+ 			.skip_if_fail	= true,
+ 			.get_nr		= test__clang_subtest_get_nr,
+ 			.get_desc	= test__clang_subtest_get_desc,
+ 		}
+ 	},
+ 	{
+ 		.desc = "unit_number__scnprintf",
+ 		.func = test__unit_number__scnprint,
+ 	},
+ 	{
++>>>>>>> 9808143ba2e5 (perf tools: Add unit_number__scnprintf function)
  		.func = NULL,
  	},
  };
diff --cc tools/perf/tests/tests.h
index cda0d2d339ef,1fa9b9d83aa5..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -75,6 -89,14 +75,17 @@@ int test__event_update(int subtest)
  int test__event_times(int subtest);
  int test__backward_ring_buffer(int subtest);
  int test__cpu_map_print(int subtest);
++<<<<<<< HEAD
++=======
+ int test__sdt_event(int subtest);
+ int test__is_printable_array(int subtest);
+ int test__bitmap_print(int subtest);
+ int test__perf_hooks(int subtest);
+ int test__clang(int subtest);
+ const char *test__clang_subtest_get_desc(int subtest);
+ int test__clang_subtest_get_nr(void);
+ int test__unit_number__scnprint(int subtest);
++>>>>>>> 9808143ba2e5 (perf tools: Add unit_number__scnprintf function)
  
  #if defined(__arm__) || defined(__aarch64__)
  #ifdef HAVE_DWARF_UNWIND_SUPPORT
diff --cc tools/perf/util/util.c
index 6282ead1eed1,bf29aed16bd6..000000000000
--- a/tools/perf/util/util.c
+++ b/tools/perf/util/util.c
@@@ -713,3 -773,32 +713,35 @@@ void print_binary(unsigned char *data, 
  	}
  	printer(BINARY_PRINT_DATA_END, -1, extra);
  }
++<<<<<<< HEAD
++=======
+ 
+ int is_printable_array(char *p, unsigned int len)
+ {
+ 	unsigned int i;
+ 
+ 	if (!p || !len || p[len - 1] != 0)
+ 		return 0;
+ 
+ 	len--;
+ 
+ 	for (i = 0; i < len; i++) {
+ 		if (!isprint(p[i]) && !isspace(p[i]))
+ 			return 0;
+ 	}
+ 	return 1;
+ }
+ 
+ int unit_number__scnprintf(char *buf, size_t size, u64 n)
+ {
+ 	char unit[4] = "BKMG";
+ 	int i = 0;
+ 
+ 	while (((n / 1024) > 1) && (i < 3)) {
+ 		n /= 1024;
+ 		i++;
+ 	}
+ 
+ 	return scnprintf(buf, size, "%" PRIu64 "%c", n, unit[i]);
+ }
++>>>>>>> 9808143ba2e5 (perf tools: Add unit_number__scnprintf function)
diff --cc tools/perf/util/util.h
index f09e9397b5e7,6e8be174ec0b..000000000000
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@@ -350,4 -354,14 +350,17 @@@ typedef void (*print_binary_t)(enum bin
  void print_binary(unsigned char *data, size_t len,
  		  size_t bytes_per_line, print_binary_t printer,
  		  void *extra);
++<<<<<<< HEAD
++=======
+ 
+ #if !defined(__GLIBC__) && !defined(__ANDROID__)
+ extern int sched_getcpu(void);
+ #endif
+ 
+ int is_printable_array(char *p, unsigned int len);
+ 
+ int timestamp__scnprintf_usec(u64 timestamp, char *buf, size_t sz);
+ 
+ int unit_number__scnprintf(char *buf, size_t size, u64 n);
++>>>>>>> 9808143ba2e5 (perf tools: Add unit_number__scnprintf function)
  #endif /* GIT_COMPAT_UTIL_H */
* Unmerged path tools/perf/tests/Build
* Unmerged path tools/perf/tests/builtin-test.c
* Unmerged path tools/perf/tests/tests.h
diff --git a/tools/perf/tests/unit_number__scnprintf.c b/tools/perf/tests/unit_number__scnprintf.c
new file mode 100644
index 000000000000..623c2aa53c4a
--- /dev/null
+++ b/tools/perf/tests/unit_number__scnprintf.c
@@ -0,0 +1,37 @@
+#include <linux/compiler.h>
+#include <linux/types.h>
+#include "tests.h"
+#include "util.h"
+#include "debug.h"
+
+int test__unit_number__scnprint(int subtest __maybe_unused)
+{
+	struct {
+		u64		 n;
+		const char	*str;
+	} test[] = {
+		{ 1,			"1B"	},
+		{ 10*1024,		"10K"	},
+		{ 20*1024*1024,		"20M"	},
+		{ 30*1024*1024*1024ULL,	"30G"	},
+		{ 0,			"0B"	},
+		{ 0,			NULL	},
+	};
+	unsigned i = 0;
+
+	while (test[i].str) {
+		char buf[100];
+
+		unit_number__scnprintf(buf, sizeof(buf), test[i].n);
+
+		pr_debug("n %" PRIu64 ", str '%s', buf '%s'\n",
+			 test[i].n, test[i].str, buf);
+
+		if (strcmp(test[i].str, buf))
+			return TEST_FAIL;
+
+		i++;
+	}
+
+	return TEST_OK;
+}
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index f8c0c61569ee..e9cbd8bbaab0 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1215,12 +1215,16 @@ static long parse_pages_arg(const char *str, unsigned long min,
 	if (pages == 0 && min == 0) {
 		/* leave number of pages at 0 */
 	} else if (!is_power_of_2(pages)) {
+		char buf[100];
+
 		/* round pages up to next power of 2 */
 		pages = roundup_pow_of_two(pages);
 		if (!pages)
 			return -EINVAL;
-		pr_info("rounding mmap pages size to %lu bytes (%lu pages)\n",
-			pages * page_size, pages);
+
+		unit_number__scnprintf(buf, sizeof(buf), pages * page_size);
+		pr_info("rounding mmap pages size to %s (%lu pages)\n",
+			buf, pages);
 	}
 
 	if (pages > max)
* Unmerged path tools/perf/util/util.c
* Unmerged path tools/perf/util/util.h
