tcp: warn on bogus MSS and try to amend it

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
commit dcb17d22e1c2cd72e72190c736349a675362b3bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/dcb17d22.failed

There have been some reports lately about TCP connection stalls caused
by NIC drivers that aren't setting gso_size on aggregated packets on rx
path. This causes TCP to assume that the MSS is actually the size of the
aggregated packet, which is invalid.

Although the proper fix is to be done at each driver, it's often hard
and cumbersome for one to debug, come to such root cause and report/fix
it.

This patch amends this situation in two ways. First, it adds a warning
on when this situation occurs, so it gives a hint to those trying to
debug this. It also limit the maximum probed MSS to the adverised MSS,
as it should never be any higher than that.

The result is that the connection may not have the best performance ever
but it shouldn't stall, and the admin will have a hint on what to look
for.

Tested with virtio by forcing gso_size to 0.

v2: updated msg per David's suggestion
v3: use skb_iif to find the interface and also log its name, per Eric
    Dumazet's suggestion. As the skb may be backlogged and the interface
    gone by then, we need to check if the number still has a meaning.
v4: use helper tcp_gro_dev_warn() and avoid pr_warn_once inside __once, per
    David's suggestion

	Cc: Jonathan Maxwell <jmaxwell37@gmail.com>
	Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dcb17d22e1c2cd72e72190c736349a675362b3bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_input.c
diff --cc net/ipv4/tcp_input.c
index 82210b952832,c71d49ce0c93..000000000000
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@@ -121,6 -124,27 +121,30 @@@ int sysctl_tcp_invalid_ratelimit __read
  #define TCP_REMNANT (TCP_FLAG_FIN|TCP_FLAG_URG|TCP_FLAG_SYN|TCP_FLAG_PSH)
  #define TCP_HP_BITS (~(TCP_RESERVED_BITS|TCP_FLAG_PSH))
  
++<<<<<<< HEAD
++=======
+ #define REXMIT_NONE	0 /* no loss recovery to do */
+ #define REXMIT_LOST	1 /* retransmit packets marked lost */
+ #define REXMIT_NEW	2 /* FRTO-style transmit of unsent/new packets */
+ 
+ static void tcp_gro_dev_warn(struct sock *sk, const struct sk_buff *skb)
+ {
+ 	static bool __once __read_mostly;
+ 
+ 	if (!__once) {
+ 		struct net_device *dev;
+ 
+ 		__once = true;
+ 
+ 		rcu_read_lock();
+ 		dev = dev_get_by_index_rcu(sock_net(sk), skb->skb_iif);
+ 		pr_warn("%s: Driver has suspect GRO implementation, TCP performance may be compromised.\n",
+ 			dev ? dev->name : "Unknown driver");
+ 		rcu_read_unlock();
+ 	}
+ }
+ 
++>>>>>>> dcb17d22e1c2 (tcp: warn on bogus MSS and try to amend it)
  /* Adapt the MSS value used to make delayed ack decision to the
   * real world.
   */
* Unmerged path net/ipv4/tcp_input.c
