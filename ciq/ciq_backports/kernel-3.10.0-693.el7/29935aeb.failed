phylib: remove unused adjust_state() callback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
commit 29935aebc7a8f2d3f9cc1743f24f0db8b4610ece
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/29935aeb.failed

Remove adjust_state() callback from 'struct phy_device' since it seems to have
never been really used from the inception: phy_start_machine() has been always
called with 2nd argument equal to NULL.

	Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 29935aebc7a8f2d3f9cc1743f24f0db8b4610ece)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/phy.h
diff --cc include/linux/phy.h
index 825eed90a307,cf1bb480cfb1..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -314,11 -282,9 +314,9 @@@ struct phy_c45_device_ids 
   * attached_dev: The attached enet driver's device instance ptr
   * adjust_link: Callback for the enet controller to respond to
   * changes in the link state.
-  * adjust_state: Callback for the enet driver to respond to
-  * changes in the state machine.
   *
 - * speed, duplex, pause, supported, advertising, lp_advertising,
 - * and autoneg are used like in mii_if_info
 + * speed, duplex, pause, supported, advertising, and
 + * autoneg are used like in mii_if_info
   *
   * interrupts currently only supports enabled or disabled,
   * but could be changed in the future to support enabling
@@@ -613,8 -581,7 +609,12 @@@ int phy_drivers_register(struct phy_dri
  void phy_state_machine(struct work_struct *work);
  void phy_change(struct work_struct *work);
  void phy_mac_interrupt(struct phy_device *phydev, int new_link);
++<<<<<<< HEAD
 +void phy_start_machine(struct phy_device *phydev,
 +		void (*handler)(struct net_device *));
++=======
+ void phy_start_machine(struct phy_device *phydev);
++>>>>>>> 29935aebc7a8 (phylib: remove unused adjust_state() callback)
  void phy_stop_machine(struct phy_device *phydev);
  int phy_ethtool_sset(struct phy_device *phydev, struct ethtool_cmd *cmd);
  int phy_ethtool_gset(struct phy_device *phydev, struct ethtool_cmd *cmd);
diff --git a/drivers/net/phy/mdio_bus.c b/drivers/net/phy/mdio_bus.c
index dc920974204e..b135afdf7692 100644
--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@ -388,7 +388,7 @@ static int mdio_bus_resume(struct device *dev)
 
 no_resume:
 	if (phydev->attached_dev && phydev->adjust_link)
-		phy_start_machine(phydev, NULL);
+		phy_start_machine(phydev);
 
 	return 0;
 }
@@ -410,7 +410,7 @@ static int mdio_bus_restore(struct device *dev)
 	phydev->link = 0;
 	phydev->state = PHY_UP;
 
-	phy_start_machine(phydev, NULL);
+	phy_start_machine(phydev);
 
 	return 0;
 }
diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index b46148bb0eca..3a3ac590f641 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -405,21 +405,15 @@ EXPORT_SYMBOL(phy_start_aneg);
 /**
  * phy_start_machine - start PHY state machine tracking
  * @phydev: the phy_device struct
- * @handler: callback function for state change notifications
  *
  * Description: The PHY infrastructure can run a state machine
  *   which tracks whether the PHY is starting up, negotiating,
  *   etc.  This function starts the timer which tracks the state
- *   of the PHY.  If you want to be notified when the state changes,
- *   pass in the callback @handler, otherwise, pass NULL.  If you
- *   want to maintain your own state machine, do not call this
- *   function.
+ *   of the PHY.  If you want to maintain your own state machine,
+ *   do not call this function.
  */
-void phy_start_machine(struct phy_device *phydev,
-		       void (*handler)(struct net_device *))
+void phy_start_machine(struct phy_device *phydev)
 {
-	phydev->adjust_state = handler;
-
 	queue_delayed_work(system_power_efficient_wq, &phydev->state_queue, HZ);
 }
 
@@ -439,8 +433,6 @@ void phy_stop_machine(struct phy_device *phydev)
 	if (phydev->state > PHY_UP)
 		phydev->state = PHY_UP;
 	mutex_unlock(&phydev->lock);
-
-	phydev->adjust_state = NULL;
 }
 
 /**
@@ -703,9 +695,6 @@ void phy_state_machine(struct work_struct *work)
 
 	mutex_lock(&phydev->lock);
 
-	if (phydev->adjust_state)
-		phydev->adjust_state(phydev->attached_dev);
-
 	switch (phydev->state) {
 	case PHY_DOWN:
 	case PHY_STARTING:
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index f7ef63500175..44dc0b56148e 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -422,7 +422,7 @@ int phy_connect_direct(struct net_device *dev, struct phy_device *phydev,
 		return rc;
 
 	phy_prepare_link(phydev, handler);
-	phy_start_machine(phydev, NULL);
+	phy_start_machine(phydev);
 	if (phydev->irq > 0)
 		phy_start_interrupts(phydev);
 
* Unmerged path include/linux/phy.h
