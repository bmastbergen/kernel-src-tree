crypto: testmgr - mark more algorithms as FIPS compliant

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] testmgr - mark more algorithms as FIPS compliant (Herbert Xu) [1465234]
Rebuild_FUZZ: 92.31%
commit-author Marcus Meissner <meissner@suse.de>
commit ed1afac9145c4517a2c84f93e04a35046ea206e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ed1afac9.failed

Some more authenc() wrapped algorithms are FIPS compliant, tag
them as such.

	Signed-off-by: Marcus Meissner <meissner@suse.de>
	Acked-by: Stephan Mueller <smueller@chronox.de>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit ed1afac9145c4517a2c84f93e04a35046ea206e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/testmgr.c
diff --cc crypto/testmgr.c
index cc134d1b6ccc,93f3527962ec..000000000000
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@@ -1991,8 -2035,83 +1991,88 @@@ static const struct alg_test_desc alg_t
  		.suite = {
  			.aead = {
  				.enc = {
++<<<<<<< HEAD
 +					.vecs = hmac_sha1_aes_cbc_enc_tv_template,
 +					.count = HMAC_SHA1_AES_CBC_ENC_TEST_VECTORS
++=======
+ 					.vecs =
+ 					hmac_sha1_aes_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_AES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha1),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha1),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_DES3_EDE_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha1),ecb(cipher_null))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_ecb_cipher_null_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_ECB_CIPHER_NULL_ENC_TEST_VEC
+ 				},
+ 				.dec = {
+ 					.vecs =
+ 					hmac_sha1_ecb_cipher_null_dec_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_ECB_CIPHER_NULL_DEC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha224),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha224_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA224_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha224),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha224_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA224_DES3_EDE_CBC_ENC_TEST_VEC
++>>>>>>> ed1afac9145c (crypto: testmgr - mark more algorithms as FIPS compliant)
  				}
  			}
  		}
@@@ -2003,20 -2122,105 +2083,116 @@@
  		.suite = {
  			.aead = {
  				.enc = {
++<<<<<<< HEAD
 +					.vecs = hmac_sha256_aes_cbc_enc_tv_template,
 +					.count = HMAC_SHA256_AES_CBC_ENC_TEST_VECTORS
++=======
+ 					.vecs =
+ 					hmac_sha256_aes_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA256_AES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha256),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha256_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA256_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha256),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha256_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA256_DES3_EDE_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha384),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha384_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA384_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha384),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha384_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA384_DES3_EDE_CBC_ENC_TEST_VEC
++>>>>>>> ed1afac9145c (crypto: testmgr - mark more algorithms as FIPS compliant)
  				}
  			}
  		}
  	}, {
  		.alg = "authenc(hmac(sha512),cbc(aes))",
+ 		.fips_allowed = 1,
  		.test = alg_test_aead,
 +		.fips_allowed = 1,
  		.suite = {
  			.aead = {
  				.enc = {
++<<<<<<< HEAD
 +					.vecs = hmac_sha512_aes_cbc_enc_tv_template,
 +					.count = HMAC_SHA512_AES_CBC_ENC_TEST_VECTORS
++=======
+ 					.vecs =
+ 					hmac_sha512_aes_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA512_AES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha512),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha512_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA512_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha512),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha512_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA512_DES3_EDE_CBC_ENC_TEST_VEC
++>>>>>>> ed1afac9145c (crypto: testmgr - mark more algorithms as FIPS compliant)
  				}
  			}
  		}
* Unmerged path crypto/testmgr.c
