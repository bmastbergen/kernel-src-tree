net: introduce skb_crc32c_csum_help

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] introduce skb_crc32c_csum_help (Davide Caratti) [1072503]
Rebuild_FUZZ: 92.31%
commit-author Davide Caratti <dcaratti@redhat.com>
commit b72b5bf6a8fc9065f270ae135bbd47abb9d96790
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b72b5bf6.failed

skb_crc32c_csum_help is like skb_checksum_help, but it is designed for
checksumming SCTP packets using crc32c (see RFC3309), provided that
libcrc32c.ko has been loaded before. In case libcrc32c is not loaded,
invoking skb_crc32c_csum_help on a skb results in one the following
printouts:

warn_crc32c_csum_update: attempt to compute crc32c without libcrc32c.ko
warn_crc32c_csum_combine: attempt to compute crc32c without libcrc32c.ko

	Signed-off-by: Davide Caratti <dcaratti@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b72b5bf6a8fc9065f270ae135bbd47abb9d96790)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index a6aab03373f7,8356d5f05f89..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -134,7 -138,12 +134,13 @@@
  #include <linux/static_key.h>
  #include <linux/hashtable.h>
  #include <linux/vmalloc.h>
 -#include <linux/if_macvlan.h>
 -#include <linux/errqueue.h>
  #include <linux/hrtimer.h>
++<<<<<<< HEAD
++=======
+ #include <linux/netfilter_ingress.h>
+ #include <linux/crash_dump.h>
+ #include <linux/sctp.h>
++>>>>>>> b72b5bf6a8fc (net: introduce skb_crc32c_csum_help)
  
  #include "net-sysfs.h"
  
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 6d99d7a5ae01..747d9f5b4030 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -3748,6 +3748,7 @@ extern u8 netdev_rss_key[NETDEV_RSS_KEY_LEN] __read_mostly;
 void netdev_rss_key_fill(void *buffer, size_t len);
 
 int skb_checksum_help(struct sk_buff *skb);
+int skb_crc32c_csum_help(struct sk_buff *skb);
 struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
 				  netdev_features_t features, bool tx_path);
 struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 3d397b324356..27a9873c7054 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -190,7 +190,8 @@
  *     accordingly. Note the there is no indication in the skbuff that the
  *     CHECKSUM_PARTIAL refers to an SCTP checksum, a driver that supports
  *     both IP checksum offload and SCTP CRC offload must verify which offload
- *     is configured for a packet presumably by inspecting packet headers.
+ *     is configured for a packet presumably by inspecting packet headers; in
+ *     case, skb_crc32c_csum_help is provided to compute CRC on SCTP packets.
  *
  *   NETIF_F_FCOE_CRC - This feature indicates that a device is capable of
  *     offloading the FCOE CRC in a packet. To perform this offload the stack
* Unmerged path net/core/dev.c
