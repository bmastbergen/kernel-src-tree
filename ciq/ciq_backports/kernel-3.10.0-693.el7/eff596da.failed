net/mlx5: Return EOPNOTSUPP when failing to get steering name-space

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Return EOPNOTSUPP when failing to get steering name-space (Don Dutile) [1385330 1417286]
Rebuild_FUZZ: 96.92%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit eff596da48784316ccb83bef82bc1213b512d5e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/eff596da.failed

When we fail to retrieve a hardware steering name-space, the returned error
code should say that this operation is not supported. Align the various
places in the driver where this call is made to this convention.

Also, make sure to warn when we fail to retrieve a SW (ANCHOR) name-space.

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit eff596da48784316ccb83bef82bc1213b512d5e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 4df49e660587,a0e5a69402b3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -1188,23 -1085,41 +1188,28 @@@ int mlx5e_create_flow_tables(struct mlx
  {
  	int err;
  
 -	priv->fs.ns = mlx5_get_flow_namespace(priv->mdev,
 +	priv->fts.ns = mlx5_get_flow_namespace(priv->mdev,
  					       MLX5_FLOW_NAMESPACE_KERNEL);
  
++<<<<<<< HEAD
 +	if (!priv->fts.ns)
 +		return -EINVAL;
++=======
+ 	if (!priv->fs.ns)
+ 		return -EOPNOTSUPP;
++>>>>>>> eff596da4878 (net/mlx5: Return EOPNOTSUPP when failing to get steering name-space)
  
 -	err = mlx5e_arfs_create_tables(priv);
 -	if (err) {
 -		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
 -			   err);
 -		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
 -	}
 -
 -	err = mlx5e_create_ttc_table(priv);
 -	if (err) {
 -		netdev_err(priv->netdev, "Failed to create ttc table, err=%d\n",
 -			   err);
 -		goto err_destroy_arfs_tables;
 -	}
 -
 -	err = mlx5e_create_l2_table(priv);
 -	if (err) {
 -		netdev_err(priv->netdev, "Failed to create l2 table, err=%d\n",
 -			   err);
 -		goto err_destroy_ttc_table;
 -	}
 +	err = mlx5e_create_vlan_flow_table(priv);
 +	if (err)
 +		return err;
  
 -	err = mlx5e_create_vlan_table(priv);
 -	if (err) {
 -		netdev_err(priv->netdev, "Failed to create vlan table, err=%d\n",
 -			   err);
 -		goto err_destroy_l2_table;
 -	}
 +	err = mlx5e_create_main_flow_table(priv);
 +	if (err)
 +		goto err_destroy_vlan_flow_table;
  
 -	mlx5e_ethtool_init_steering(priv);
 +	err = mlx5e_add_vlan_rule(priv, MLX5E_VLAN_RULE_TYPE_UNTAGGED, 0);
 +	if (err)
 +		goto err_destroy_main_flow_table;
  
  	return 0;
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index 6c7352099dd6,d0c8bf014453..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@@ -803,7 -962,7 +803,11 @@@ static void esw_vport_enable_egress_acl
  	root_ns = mlx5_get_flow_namespace(dev, MLX5_FLOW_NAMESPACE_ESW_EGRESS);
  	if (!root_ns) {
  		esw_warn(dev, "Failed to get E-Switch egress flow namespace\n");
++<<<<<<< HEAD
 +		return;
++=======
+ 		return -EOPNOTSUPP;
++>>>>>>> eff596da4878 (net/mlx5: Return EOPNOTSUPP when failing to get steering name-space)
  	}
  
  	flow_group_in = mlx5_vzalloc(inlen);
@@@ -916,7 -1079,7 +920,11 @@@ static void esw_vport_enable_ingress_ac
  	root_ns = mlx5_get_flow_namespace(dev, MLX5_FLOW_NAMESPACE_ESW_INGRESS);
  	if (!root_ns) {
  		esw_warn(dev, "Failed to get E-Switch ingress flow namespace\n");
++<<<<<<< HEAD
 +		return;
++=======
+ 		return -EOPNOTSUPP;
++>>>>>>> eff596da4878 (net/mlx5: Return EOPNOTSUPP when failing to get steering name-space)
  	}
  
  	flow_group_in = mlx5_vzalloc(inlen);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index b32d85f4e0ff,6346a8f5883b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -1565,12 -1821,12 +1565,17 @@@ static int create_anchor_flow_table(str
  	struct mlx5_flow_namespace *ns = NULL;
  	struct mlx5_flow_table *ft;
  
++<<<<<<< HEAD
 +	ns = mlx5_get_flow_namespace(dev, MLX5_FLOW_NAMESPACE_ANCHOR);
 +	if (!ns)
++=======
+ 	ns = mlx5_get_flow_namespace(steering->dev, MLX5_FLOW_NAMESPACE_ANCHOR);
+ 	if (WARN_ON(!ns))
++>>>>>>> eff596da4878 (net/mlx5: Return EOPNOTSUPP when failing to get steering name-space)
  		return -EINVAL;
 -	ft = mlx5_create_flow_table(ns, ANCHOR_PRIO, ANCHOR_SIZE, ANCHOR_LEVEL, 0);
 +	ft = mlx5_create_flow_table(ns, ANCHOR_PRIO, ANCHOR_SIZE);
  	if (IS_ERR(ft)) {
 -		mlx5_core_err(steering->dev, "Failed to create last anchor flow table");
 +		mlx5_core_err(dev, "Failed to create last anchor flow table");
  		return PTR_ERR(ft);
  	}
  	return 0;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
