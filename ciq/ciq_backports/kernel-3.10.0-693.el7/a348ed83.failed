EDAC, mce_amd: Detect SMCA using X86_FEATURE_SMCA

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [edac] mce_amd: Detect SMCA using X86_FEATURE_SMCA (David Arcari) [1389383]
Rebuild_FUZZ: 93.48%
commit-author Yazen Ghannam <Yazen.Ghannam@amd.com>
commit a348ed83d9efe8c11ecc85c15d7329825b97431e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a348ed83.failed

Use X86_FEATURE_SMCA when detecting if SMCA is available instead of
directly using CPUID 0x80000007_EBX.

	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: linux-edac <linux-edac@vger.kernel.org>
Link: http://lkml.kernel.org/r/1462971509-3856-7-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a348ed83d9efe8c11ecc85c15d7329825b97431e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/mce_amd.c
diff --cc drivers/edac/mce_amd.c
index 896ecd88aae5,9b6800a79c7f..000000000000
--- a/drivers/edac/mce_amd.c
+++ b/drivers/edac/mce_amd.c
@@@ -793,6 -1074,15 +793,18 @@@ int amd_decode_mce(struct notifier_bloc
  			((m->status & MCI_STATUS_DEFERRED) ? "Deferred" : "-"),
  			((m->status & MCI_STATUS_POISON)   ? "Poison"   : "-"));
  
++<<<<<<< HEAD
++=======
+ 	if (boot_cpu_has(X86_FEATURE_SMCA)) {
+ 		u32 low, high;
+ 		u32 addr = MSR_AMD64_SMCA_MCx_CONFIG(m->bank);
+ 
+ 		if (!rdmsr_safe(addr, &low, &high) &&
+ 		    (low & MCI_CONFIG_MCAX))
+ 			pr_cont("|%s", ((m->status & MCI_STATUS_TCC) ? "TCC" : "-"));
+ 	}
+ 
++>>>>>>> a348ed83d9ef (EDAC, mce_amd: Detect SMCA using X86_FEATURE_SMCA)
  	/* do the two bits[14:13] together */
  	ecc = (m->status >> 45) & 0x3;
  	if (ecc)
@@@ -803,6 -1093,11 +815,14 @@@
  	if (m->status & MCI_STATUS_ADDRV)
  		pr_emerg(HW_ERR "MC%d Error Address: 0x%016llx\n", m->bank, m->addr);
  
++<<<<<<< HEAD
++=======
+ 	if (boot_cpu_has(X86_FEATURE_SMCA)) {
+ 		decode_smca_errors(m);
+ 		goto err_code;
+ 	}
+ 
++>>>>>>> a348ed83d9ef (EDAC, mce_amd: Detect SMCA using X86_FEATURE_SMCA)
  	if (!fam_ops)
  		goto err_code;
  
@@@ -907,10 -1202,17 +927,21 @@@ static int __init mce_amd_init(void
  		fam_ops->mc2_mce = f16h_mc2_mce;
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case 0x17:
+ 		xec_mask = 0x3f;
+ 		if (!boot_cpu_has(X86_FEATURE_SMCA)) {
+ 			printk(KERN_WARNING "Decoding supported only on Scalable MCA processors.\n");
+ 			goto err_out;
+ 		}
+ 		break;
+ 
++>>>>>>> a348ed83d9ef (EDAC, mce_amd: Detect SMCA using X86_FEATURE_SMCA)
  	default:
  		printk(KERN_WARNING "Huh? What family is it: 0x%x?!\n", c->x86);
 -		goto err_out;
 +		kfree(fam_ops);
 +		fam_ops = NULL;
  	}
  
  	pr_info("MCE: In-kernel MCE decoding enabled.\n");
* Unmerged path drivers/edac/mce_amd.c
