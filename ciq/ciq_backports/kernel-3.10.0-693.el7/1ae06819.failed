kernfs, sysfs, driver-core: implement kernfs_remove_self() and its wrappers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tejun Heo <tj@kernel.org>
commit 1ae06819c77cff1ea2833c94f8c093fe8a5c79db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1ae06819.failed

Sometimes it's necessary to implement a node which wants to delete
nodes including itself.  This isn't straightforward because of kernfs
active reference.  While a file operation is in progress, an active
reference is held and kernfs_remove() waits for all such references to
drain before completing.  For a self-deleting node, this is a deadlock
as kernfs_remove() ends up waiting for an active reference that itself
is sitting on top of.

This currently is worked around in the sysfs layer using
sysfs_schedule_callback() which makes such removals asynchronous.
While it works, it's rather cumbersome and inherently breaks
synchronicity of the operation - the file operation which triggered
the operation may complete before the removal is finished (or even
started) and the removal may fail asynchronously.  If a removal
operation is immmediately followed by another operation which expects
the specific name to be available (e.g. removal followed by rename
onto the same name), there's no way to make the latter operation
reliable.

The thing is there's no inherent reason for this to be asynchrnous.
All that's necessary to do this synchronous is a dedicated operation
which drops its own active ref and deactivates self.  This patch
implements kernfs_remove_self() and its wrappers in sysfs and driver
core.  kernfs_remove_self() is to be called from one of the file
operations, drops the active ref and deactivates using
__kernfs_deactivate_self(), removes the self node, and restores active
ref to the dead node using __kernfs_reactivate_self() so that the ref
is balanced afterwards.  __kernfs_remove() is updated so that it takes
an early exit if the target node is already fully removed so that the
active ref restored by kernfs_remove_self() after removal doesn't
confuse the deactivation path.

This makes implementing self-deleting nodes very easy.  The normal
removal path doesn't even need to be changed to use
kernfs_remove_self() for the self-deleting node.  The method can
invoke kernfs_remove_self() on itself before proceeding the normal
removal path.  kernfs_remove() invoked on the node by the normal
deletion path will simply be ignored.

This will replace sysfs_schedule_callback().  A subtle feature of
sysfs_schedule_callback() is that it collapses multiple invocations -
even if multiple removals are triggered, the removal callback is run
only once.  An equivalent effect can be achieved by testing the return
value of kernfs_remove_self() - only the one which gets %true return
value should proceed with actual deletion.  All other instances of
kernfs_remove_self() will wait till the enclosing kernfs operation
which invoked the winning instance of kernfs_remove_self() finishes
and then return %false.  This trivially makes all users of
kernfs_remove_self() automatically show correct synchronous behavior
even when there are multiple concurrent operations - all "echo 1 >
delete" instances will finish only after the whole operation is
completed by one of the instances.

v2: For !CONFIG_SYSFS, dummy version kernfs_remove_self() was missing
    and sysfs_remove_file_self() had incorrect return type.  Fix it.
    Reported by kbuild test bot.

v3: Updated to use __kernfs_{de|re}activate_self().

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Cc: Alan Stern <stern@rowland.harvard.edu>
	Cc: kbuild test robot <fengguang.wu@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 1ae06819c77cff1ea2833c94f8c093fe8a5c79db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/kernfs/dir.c
#	fs/sysfs/file.c
#	include/linux/kernfs.h
#	include/linux/sysfs.h
diff --cc fs/kernfs/dir.c
index 1061602ce81a,a8028be6cdb7..000000000000
--- a/fs/kernfs/dir.c
+++ b/fs/kernfs/dir.c
@@@ -7,3 -7,1268 +7,1271 @@@
   *
   * This file is released under the GPLv2.
   */
++<<<<<<< HEAD
++=======
+ 
+ #include <linux/sched.h>
+ #include <linux/fs.h>
+ #include <linux/namei.h>
+ #include <linux/idr.h>
+ #include <linux/slab.h>
+ #include <linux/security.h>
+ #include <linux/hash.h>
+ 
+ #include "kernfs-internal.h"
+ 
+ DEFINE_MUTEX(kernfs_mutex);
+ 
+ #define rb_to_kn(X) rb_entry((X), struct kernfs_node, rb)
+ 
+ static bool kernfs_lockdep(struct kernfs_node *kn)
+ {
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	return kn->flags & KERNFS_LOCKDEP;
+ #else
+ 	return false;
+ #endif
+ }
+ 
+ /**
+  *	kernfs_name_hash
+  *	@name: Null terminated string to hash
+  *	@ns:   Namespace tag to hash
+  *
+  *	Returns 31 bit hash of ns + name (so it fits in an off_t )
+  */
+ static unsigned int kernfs_name_hash(const char *name, const void *ns)
+ {
+ 	unsigned long hash = init_name_hash();
+ 	unsigned int len = strlen(name);
+ 	while (len--)
+ 		hash = partial_name_hash(*name++, hash);
+ 	hash = (end_name_hash(hash) ^ hash_ptr((void *)ns, 31));
+ 	hash &= 0x7fffffffU;
+ 	/* Reserve hash numbers 0, 1 and INT_MAX for magic directory entries */
+ 	if (hash < 1)
+ 		hash += 2;
+ 	if (hash >= INT_MAX)
+ 		hash = INT_MAX - 1;
+ 	return hash;
+ }
+ 
+ static int kernfs_name_compare(unsigned int hash, const char *name,
+ 			       const void *ns, const struct kernfs_node *kn)
+ {
+ 	if (hash != kn->hash)
+ 		return hash - kn->hash;
+ 	if (ns != kn->ns)
+ 		return ns - kn->ns;
+ 	return strcmp(name, kn->name);
+ }
+ 
+ static int kernfs_sd_compare(const struct kernfs_node *left,
+ 			     const struct kernfs_node *right)
+ {
+ 	return kernfs_name_compare(left->hash, left->name, left->ns, right);
+ }
+ 
+ /**
+  *	kernfs_link_sibling - link kernfs_node into sibling rbtree
+  *	@kn: kernfs_node of interest
+  *
+  *	Link @kn into its sibling rbtree which starts from
+  *	@kn->parent->dir.children.
+  *
+  *	Locking:
+  *	mutex_lock(kernfs_mutex)
+  *
+  *	RETURNS:
+  *	0 on susccess -EEXIST on failure.
+  */
+ static int kernfs_link_sibling(struct kernfs_node *kn)
+ {
+ 	struct rb_node **node = &kn->parent->dir.children.rb_node;
+ 	struct rb_node *parent = NULL;
+ 
+ 	if (kernfs_type(kn) == KERNFS_DIR)
+ 		kn->parent->dir.subdirs++;
+ 
+ 	while (*node) {
+ 		struct kernfs_node *pos;
+ 		int result;
+ 
+ 		pos = rb_to_kn(*node);
+ 		parent = *node;
+ 		result = kernfs_sd_compare(kn, pos);
+ 		if (result < 0)
+ 			node = &pos->rb.rb_left;
+ 		else if (result > 0)
+ 			node = &pos->rb.rb_right;
+ 		else
+ 			return -EEXIST;
+ 	}
+ 	/* add new node and rebalance the tree */
+ 	rb_link_node(&kn->rb, parent, node);
+ 	rb_insert_color(&kn->rb, &kn->parent->dir.children);
+ 	return 0;
+ }
+ 
+ /**
+  *	kernfs_unlink_sibling - unlink kernfs_node from sibling rbtree
+  *	@kn: kernfs_node of interest
+  *
+  *	Unlink @kn from its sibling rbtree which starts from
+  *	kn->parent->dir.children.
+  *
+  *	Locking:
+  *	mutex_lock(kernfs_mutex)
+  */
+ static bool kernfs_unlink_sibling(struct kernfs_node *kn)
+ {
+ 	if (RB_EMPTY_NODE(&kn->rb))
+ 		return false;
+ 
+ 	if (kernfs_type(kn) == KERNFS_DIR)
+ 		kn->parent->dir.subdirs--;
+ 
+ 	rb_erase(&kn->rb, &kn->parent->dir.children);
+ 	RB_CLEAR_NODE(&kn->rb);
+ 	return true;
+ }
+ 
+ /**
+  *	kernfs_get_active - get an active reference to kernfs_node
+  *	@kn: kernfs_node to get an active reference to
+  *
+  *	Get an active reference of @kn.  This function is noop if @kn
+  *	is NULL.
+  *
+  *	RETURNS:
+  *	Pointer to @kn on success, NULL on failure.
+  */
+ struct kernfs_node *kernfs_get_active(struct kernfs_node *kn)
+ {
+ 	if (unlikely(!kn))
+ 		return NULL;
+ 
+ 	if (kernfs_lockdep(kn))
+ 		rwsem_acquire_read(&kn->dep_map, 0, 1, _RET_IP_);
+ 
+ 	/*
+ 	 * Try to obtain an active ref.  If @kn is deactivated, we block
+ 	 * till either it's reactivated or killed.
+ 	 */
+ 	do {
+ 		if (atomic_inc_unless_negative(&kn->active))
+ 			return kn;
+ 
+ 		wait_event(kernfs_root(kn)->deactivate_waitq,
+ 			   atomic_read(&kn->active) >= 0 ||
+ 			   RB_EMPTY_NODE(&kn->rb));
+ 	} while (!RB_EMPTY_NODE(&kn->rb));
+ 
+ 	if (kernfs_lockdep(kn))
+ 		rwsem_release(&kn->dep_map, 1, _RET_IP_);
+ 	return NULL;
+ }
+ 
+ /**
+  *	kernfs_put_active - put an active reference to kernfs_node
+  *	@kn: kernfs_node to put an active reference to
+  *
+  *	Put an active reference to @kn.  This function is noop if @kn
+  *	is NULL.
+  */
+ void kernfs_put_active(struct kernfs_node *kn)
+ {
+ 	struct kernfs_root *root = kernfs_root(kn);
+ 	int v;
+ 
+ 	if (unlikely(!kn))
+ 		return;
+ 
+ 	if (kernfs_lockdep(kn))
+ 		rwsem_release(&kn->dep_map, 1, _RET_IP_);
+ 	v = atomic_dec_return(&kn->active);
+ 	if (likely(v != KN_DEACTIVATED_BIAS))
+ 		return;
+ 
+ 	wake_up_all(&root->deactivate_waitq);
+ }
+ 
+ /**
+  * kernfs_drain - drain kernfs_node
+  * @kn: kernfs_node to drain
+  *
+  * Drain existing usages of @kn.  Mutiple removers may invoke this function
+  * concurrently on @kn and all will return after draining is complete.
+  * Returns %true if drain is performed and kernfs_mutex was temporarily
+  * released.  %false if @kn was already drained and no operation was
+  * necessary.
+  *
+  * The caller is responsible for ensuring @kn stays pinned while this
+  * function is in progress even if it gets removed by someone else.
+  */
+ static bool kernfs_drain(struct kernfs_node *kn)
+ 	__releases(&kernfs_mutex) __acquires(&kernfs_mutex)
+ {
+ 	struct kernfs_root *root = kernfs_root(kn);
+ 
+ 	lockdep_assert_held(&kernfs_mutex);
+ 	WARN_ON_ONCE(atomic_read(&kn->active) >= 0);
+ 
+ 	/*
+ 	 * We want to go through the active ref lockdep annotation at least
+ 	 * once for all node removals, but the lockdep annotation can't be
+ 	 * nested inside kernfs_mutex and deactivation can't make forward
+ 	 * progress if we keep dropping the mutex.  Use JUST_ACTIVATED to
+ 	 * force the slow path once for each deactivation if lockdep is
+ 	 * enabled.
+ 	 */
+ 	if ((!kernfs_lockdep(kn) || !(kn->flags & KERNFS_JUST_DEACTIVATED)) &&
+ 	    atomic_read(&kn->active) == KN_DEACTIVATED_BIAS)
+ 		return false;
+ 
+ 	kn->flags &= ~KERNFS_JUST_DEACTIVATED;
+ 	mutex_unlock(&kernfs_mutex);
+ 
+ 	if (kernfs_lockdep(kn)) {
+ 		rwsem_acquire(&kn->dep_map, 0, 0, _RET_IP_);
+ 		if (atomic_read(&kn->active) != KN_DEACTIVATED_BIAS)
+ 			lock_contended(&kn->dep_map, _RET_IP_);
+ 	}
+ 
+ 	wait_event(root->deactivate_waitq,
+ 		   atomic_read(&kn->active) == KN_DEACTIVATED_BIAS);
+ 
+ 	if (kernfs_lockdep(kn)) {
+ 		lock_acquired(&kn->dep_map, _RET_IP_);
+ 		rwsem_release(&kn->dep_map, 1, _RET_IP_);
+ 	}
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 	return true;
+ }
+ 
+ /**
+  * kernfs_get - get a reference count on a kernfs_node
+  * @kn: the target kernfs_node
+  */
+ void kernfs_get(struct kernfs_node *kn)
+ {
+ 	if (kn) {
+ 		WARN_ON(!atomic_read(&kn->count));
+ 		atomic_inc(&kn->count);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(kernfs_get);
+ 
+ /**
+  * kernfs_put - put a reference count on a kernfs_node
+  * @kn: the target kernfs_node
+  *
+  * Put a reference count of @kn and destroy it if it reached zero.
+  */
+ void kernfs_put(struct kernfs_node *kn)
+ {
+ 	struct kernfs_node *parent;
+ 	struct kernfs_root *root;
+ 
+ 	if (!kn || !atomic_dec_and_test(&kn->count))
+ 		return;
+ 	root = kernfs_root(kn);
+  repeat:
+ 	/*
+ 	 * Moving/renaming is always done while holding reference.
+ 	 * kn->parent won't change beneath us.
+ 	 */
+ 	parent = kn->parent;
+ 
+ 	WARN_ONCE(atomic_read(&kn->active) != KN_DEACTIVATED_BIAS,
+ 		  "kernfs_put: %s/%s: released with incorrect active_ref %d\n",
+ 		  parent ? parent->name : "", kn->name, atomic_read(&kn->active));
+ 
+ 	if (kernfs_type(kn) == KERNFS_LINK)
+ 		kernfs_put(kn->symlink.target_kn);
+ 	if (!(kn->flags & KERNFS_STATIC_NAME))
+ 		kfree(kn->name);
+ 	if (kn->iattr) {
+ 		if (kn->iattr->ia_secdata)
+ 			security_release_secctx(kn->iattr->ia_secdata,
+ 						kn->iattr->ia_secdata_len);
+ 		simple_xattrs_free(&kn->iattr->xattrs);
+ 	}
+ 	kfree(kn->iattr);
+ 	ida_simple_remove(&root->ino_ida, kn->ino);
+ 	kmem_cache_free(kernfs_node_cache, kn);
+ 
+ 	kn = parent;
+ 	if (kn) {
+ 		if (atomic_dec_and_test(&kn->count))
+ 			goto repeat;
+ 	} else {
+ 		/* just released the root kn, free @root too */
+ 		ida_destroy(&root->ino_ida);
+ 		kfree(root);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(kernfs_put);
+ 
+ static int kernfs_dop_revalidate(struct dentry *dentry, unsigned int flags)
+ {
+ 	struct kernfs_node *kn;
+ 
+ 	if (flags & LOOKUP_RCU)
+ 		return -ECHILD;
+ 
+ 	/* Always perform fresh lookup for negatives */
+ 	if (!dentry->d_inode)
+ 		goto out_bad_unlocked;
+ 
+ 	kn = dentry->d_fsdata;
+ 	mutex_lock(&kernfs_mutex);
+ 
+ 	/* Force fresh lookup if removed */
+ 	if (kn->parent && RB_EMPTY_NODE(&kn->rb))
+ 		goto out_bad;
+ 
+ 	/* The kernfs node has been moved? */
+ 	if (dentry->d_parent->d_fsdata != kn->parent)
+ 		goto out_bad;
+ 
+ 	/* The kernfs node has been renamed */
+ 	if (strcmp(dentry->d_name.name, kn->name) != 0)
+ 		goto out_bad;
+ 
+ 	/* The kernfs node has been moved to a different namespace */
+ 	if (kn->parent && kernfs_ns_enabled(kn->parent) &&
+ 	    kernfs_info(dentry->d_sb)->ns != kn->ns)
+ 		goto out_bad;
+ 
+ 	mutex_unlock(&kernfs_mutex);
+ out_valid:
+ 	return 1;
+ out_bad:
+ 	mutex_unlock(&kernfs_mutex);
+ out_bad_unlocked:
+ 	/*
+ 	 * @dentry doesn't match the underlying kernfs node, drop the
+ 	 * dentry and force lookup.  If we have submounts we must allow the
+ 	 * vfs caches to lie about the state of the filesystem to prevent
+ 	 * leaks and other nasty things, so use check_submounts_and_drop()
+ 	 * instead of d_drop().
+ 	 */
+ 	if (check_submounts_and_drop(dentry) != 0)
+ 		goto out_valid;
+ 
+ 	return 0;
+ }
+ 
+ static void kernfs_dop_release(struct dentry *dentry)
+ {
+ 	kernfs_put(dentry->d_fsdata);
+ }
+ 
+ const struct dentry_operations kernfs_dops = {
+ 	.d_revalidate	= kernfs_dop_revalidate,
+ 	.d_release	= kernfs_dop_release,
+ };
+ 
+ struct kernfs_node *kernfs_new_node(struct kernfs_root *root, const char *name,
+ 				    umode_t mode, unsigned flags)
+ {
+ 	char *dup_name = NULL;
+ 	struct kernfs_node *kn;
+ 	int ret;
+ 
+ 	if (!(flags & KERNFS_STATIC_NAME)) {
+ 		name = dup_name = kstrdup(name, GFP_KERNEL);
+ 		if (!name)
+ 			return NULL;
+ 	}
+ 
+ 	kn = kmem_cache_zalloc(kernfs_node_cache, GFP_KERNEL);
+ 	if (!kn)
+ 		goto err_out1;
+ 
+ 	ret = ida_simple_get(&root->ino_ida, 1, 0, GFP_KERNEL);
+ 	if (ret < 0)
+ 		goto err_out2;
+ 	kn->ino = ret;
+ 
+ 	atomic_set(&kn->count, 1);
+ 	atomic_set(&kn->active, KN_DEACTIVATED_BIAS);
+ 	kn->deact_depth = 1;
+ 	RB_CLEAR_NODE(&kn->rb);
+ 
+ 	kn->name = name;
+ 	kn->mode = mode;
+ 	kn->flags = flags;
+ 
+ 	return kn;
+ 
+  err_out2:
+ 	kmem_cache_free(kernfs_node_cache, kn);
+  err_out1:
+ 	kfree(dup_name);
+ 	return NULL;
+ }
+ 
+ /**
+  *	kernfs_add_one - add kernfs_node to parent without warning
+  *	@kn: kernfs_node to be added
+  *	@parent: the parent kernfs_node to add @kn to
+  *
+  *	Get @parent and set @kn->parent to it and increment nlink of the
+  *	parent inode if @kn is a directory and link into the children list
+  *	of the parent.
+  *
+  *	RETURNS:
+  *	0 on success, -EEXIST if entry with the given name already
+  *	exists.
+  */
+ int kernfs_add_one(struct kernfs_node *kn, struct kernfs_node *parent)
+ {
+ 	struct kernfs_iattrs *ps_iattr;
+ 	bool has_ns;
+ 	int ret;
+ 
+ 	if (!kernfs_get_active(parent))
+ 		return -ENOENT;
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 
+ 	ret = -EINVAL;
+ 	has_ns = kernfs_ns_enabled(parent);
+ 	if (WARN(has_ns != (bool)kn->ns, KERN_WARNING "kernfs: ns %s in '%s' for '%s'\n",
+ 		 has_ns ? "required" : "invalid", parent->name, kn->name))
+ 		goto out_unlock;
+ 
+ 	if (kernfs_type(parent) != KERNFS_DIR)
+ 		goto out_unlock;
+ 
+ 	kn->hash = kernfs_name_hash(kn->name, kn->ns);
+ 	kn->parent = parent;
+ 	kernfs_get(parent);
+ 
+ 	ret = kernfs_link_sibling(kn);
+ 	if (ret)
+ 		goto out_unlock;
+ 
+ 	/* Update timestamps on the parent */
+ 	ps_iattr = parent->iattr;
+ 	if (ps_iattr) {
+ 		struct iattr *ps_iattrs = &ps_iattr->ia_iattr;
+ 		ps_iattrs->ia_ctime = ps_iattrs->ia_mtime = CURRENT_TIME;
+ 	}
+ 
+ 	/* Mark the entry added into directory tree */
+ 	atomic_sub(KN_DEACTIVATED_BIAS, &kn->active);
+ 	kn->deact_depth--;
+ 	ret = 0;
+ out_unlock:
+ 	mutex_unlock(&kernfs_mutex);
+ 	kernfs_put_active(parent);
+ 	return ret;
+ }
+ 
+ /**
+  * kernfs_find_ns - find kernfs_node with the given name
+  * @parent: kernfs_node to search under
+  * @name: name to look for
+  * @ns: the namespace tag to use
+  *
+  * Look for kernfs_node with name @name under @parent.  Returns pointer to
+  * the found kernfs_node on success, %NULL on failure.
+  */
+ static struct kernfs_node *kernfs_find_ns(struct kernfs_node *parent,
+ 					  const unsigned char *name,
+ 					  const void *ns)
+ {
+ 	struct rb_node *node = parent->dir.children.rb_node;
+ 	bool has_ns = kernfs_ns_enabled(parent);
+ 	unsigned int hash;
+ 
+ 	lockdep_assert_held(&kernfs_mutex);
+ 
+ 	if (has_ns != (bool)ns) {
+ 		WARN(1, KERN_WARNING "kernfs: ns %s in '%s' for '%s'\n",
+ 		     has_ns ? "required" : "invalid", parent->name, name);
+ 		return NULL;
+ 	}
+ 
+ 	hash = kernfs_name_hash(name, ns);
+ 	while (node) {
+ 		struct kernfs_node *kn;
+ 		int result;
+ 
+ 		kn = rb_to_kn(node);
+ 		result = kernfs_name_compare(hash, name, ns, kn);
+ 		if (result < 0)
+ 			node = node->rb_left;
+ 		else if (result > 0)
+ 			node = node->rb_right;
+ 		else
+ 			return kn;
+ 	}
+ 	return NULL;
+ }
+ 
+ /**
+  * kernfs_find_and_get_ns - find and get kernfs_node with the given name
+  * @parent: kernfs_node to search under
+  * @name: name to look for
+  * @ns: the namespace tag to use
+  *
+  * Look for kernfs_node with name @name under @parent and get a reference
+  * if found.  This function may sleep and returns pointer to the found
+  * kernfs_node on success, %NULL on failure.
+  */
+ struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
+ 					   const char *name, const void *ns)
+ {
+ 	struct kernfs_node *kn;
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 	kn = kernfs_find_ns(parent, name, ns);
+ 	kernfs_get(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ 
+ 	return kn;
+ }
+ EXPORT_SYMBOL_GPL(kernfs_find_and_get_ns);
+ 
+ /**
+  * kernfs_create_root - create a new kernfs hierarchy
+  * @kdops: optional directory syscall operations for the hierarchy
+  * @priv: opaque data associated with the new directory
+  *
+  * Returns the root of the new hierarchy on success, ERR_PTR() value on
+  * failure.
+  */
+ struct kernfs_root *kernfs_create_root(struct kernfs_dir_ops *kdops, void *priv)
+ {
+ 	struct kernfs_root *root;
+ 	struct kernfs_node *kn;
+ 
+ 	root = kzalloc(sizeof(*root), GFP_KERNEL);
+ 	if (!root)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	ida_init(&root->ino_ida);
+ 
+ 	kn = kernfs_new_node(root, "", S_IFDIR | S_IRUGO | S_IXUGO, KERNFS_DIR);
+ 	if (!kn) {
+ 		ida_destroy(&root->ino_ida);
+ 		kfree(root);
+ 		return ERR_PTR(-ENOMEM);
+ 	}
+ 
+ 	atomic_sub(KN_DEACTIVATED_BIAS, &kn->active);
+ 	kn->deact_depth--;
+ 	kn->priv = priv;
+ 	kn->dir.root = root;
+ 
+ 	root->dir_ops = kdops;
+ 	root->kn = kn;
+ 	init_waitqueue_head(&root->deactivate_waitq);
+ 
+ 	return root;
+ }
+ 
+ /**
+  * kernfs_destroy_root - destroy a kernfs hierarchy
+  * @root: root of the hierarchy to destroy
+  *
+  * Destroy the hierarchy anchored at @root by removing all existing
+  * directories and destroying @root.
+  */
+ void kernfs_destroy_root(struct kernfs_root *root)
+ {
+ 	kernfs_remove(root->kn);	/* will also free @root */
+ }
+ 
+ /**
+  * kernfs_create_dir_ns - create a directory
+  * @parent: parent in which to create a new directory
+  * @name: name of the new directory
+  * @mode: mode of the new directory
+  * @priv: opaque data associated with the new directory
+  * @ns: optional namespace tag of the directory
+  *
+  * Returns the created node on success, ERR_PTR() value on failure.
+  */
+ struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
+ 					 const char *name, umode_t mode,
+ 					 void *priv, const void *ns)
+ {
+ 	struct kernfs_node *kn;
+ 	int rc;
+ 
+ 	/* allocate */
+ 	kn = kernfs_new_node(kernfs_root(parent), name, mode | S_IFDIR,
+ 			     KERNFS_DIR);
+ 	if (!kn)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	kn->dir.root = parent->dir.root;
+ 	kn->ns = ns;
+ 	kn->priv = priv;
+ 
+ 	/* link in */
+ 	rc = kernfs_add_one(kn, parent);
+ 	if (!rc)
+ 		return kn;
+ 
+ 	kernfs_put(kn);
+ 	return ERR_PTR(rc);
+ }
+ 
+ static struct dentry *kernfs_iop_lookup(struct inode *dir,
+ 					struct dentry *dentry,
+ 					unsigned int flags)
+ {
+ 	struct dentry *ret;
+ 	struct kernfs_node *parent = dentry->d_parent->d_fsdata;
+ 	struct kernfs_node *kn;
+ 	struct inode *inode;
+ 	const void *ns = NULL;
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 
+ 	if (kernfs_ns_enabled(parent))
+ 		ns = kernfs_info(dir->i_sb)->ns;
+ 
+ 	kn = kernfs_find_ns(parent, dentry->d_name.name, ns);
+ 
+ 	/* no such entry */
+ 	if (!kn) {
+ 		ret = NULL;
+ 		goto out_unlock;
+ 	}
+ 	kernfs_get(kn);
+ 	dentry->d_fsdata = kn;
+ 
+ 	/* attach dentry and inode */
+ 	inode = kernfs_get_inode(dir->i_sb, kn);
+ 	if (!inode) {
+ 		ret = ERR_PTR(-ENOMEM);
+ 		goto out_unlock;
+ 	}
+ 
+ 	/* instantiate and hash dentry */
+ 	ret = d_materialise_unique(dentry, inode);
+  out_unlock:
+ 	mutex_unlock(&kernfs_mutex);
+ 	return ret;
+ }
+ 
+ static int kernfs_iop_mkdir(struct inode *dir, struct dentry *dentry,
+ 			    umode_t mode)
+ {
+ 	struct kernfs_node *parent = dir->i_private;
+ 	struct kernfs_dir_ops *kdops = kernfs_root(parent)->dir_ops;
+ 
+ 	if (!kdops || !kdops->mkdir)
+ 		return -EPERM;
+ 
+ 	return kdops->mkdir(parent, dentry->d_name.name, mode);
+ }
+ 
+ static int kernfs_iop_rmdir(struct inode *dir, struct dentry *dentry)
+ {
+ 	struct kernfs_node *kn  = dentry->d_fsdata;
+ 	struct kernfs_dir_ops *kdops = kernfs_root(kn)->dir_ops;
+ 
+ 	if (!kdops || !kdops->rmdir)
+ 		return -EPERM;
+ 
+ 	return kdops->rmdir(kn);
+ }
+ 
+ static int kernfs_iop_rename(struct inode *old_dir, struct dentry *old_dentry,
+ 			     struct inode *new_dir, struct dentry *new_dentry)
+ {
+ 	struct kernfs_node *kn  = old_dentry->d_fsdata;
+ 	struct kernfs_node *new_parent = new_dir->i_private;
+ 	struct kernfs_dir_ops *kdops = kernfs_root(kn)->dir_ops;
+ 
+ 	if (!kdops || !kdops->rename)
+ 		return -EPERM;
+ 
+ 	return kdops->rename(kn, new_parent, new_dentry->d_name.name);
+ }
+ 
+ const struct inode_operations kernfs_dir_iops = {
+ 	.lookup		= kernfs_iop_lookup,
+ 	.permission	= kernfs_iop_permission,
+ 	.setattr	= kernfs_iop_setattr,
+ 	.getattr	= kernfs_iop_getattr,
+ 	.setxattr	= kernfs_iop_setxattr,
+ 	.removexattr	= kernfs_iop_removexattr,
+ 	.getxattr	= kernfs_iop_getxattr,
+ 	.listxattr	= kernfs_iop_listxattr,
+ 
+ 	.mkdir		= kernfs_iop_mkdir,
+ 	.rmdir		= kernfs_iop_rmdir,
+ 	.rename		= kernfs_iop_rename,
+ };
+ 
+ static struct kernfs_node *kernfs_leftmost_descendant(struct kernfs_node *pos)
+ {
+ 	struct kernfs_node *last;
+ 
+ 	while (true) {
+ 		struct rb_node *rbn;
+ 
+ 		last = pos;
+ 
+ 		if (kernfs_type(pos) != KERNFS_DIR)
+ 			break;
+ 
+ 		rbn = rb_first(&pos->dir.children);
+ 		if (!rbn)
+ 			break;
+ 
+ 		pos = rb_to_kn(rbn);
+ 	}
+ 
+ 	return last;
+ }
+ 
+ /**
+  * kernfs_next_descendant_post - find the next descendant for post-order walk
+  * @pos: the current position (%NULL to initiate traversal)
+  * @root: kernfs_node whose descendants to walk
+  *
+  * Find the next descendant to visit for post-order traversal of @root's
+  * descendants.  @root is included in the iteration and the last node to be
+  * visited.
+  */
+ static struct kernfs_node *kernfs_next_descendant_post(struct kernfs_node *pos,
+ 						       struct kernfs_node *root)
+ {
+ 	struct rb_node *rbn;
+ 
+ 	lockdep_assert_held(&kernfs_mutex);
+ 
+ 	/* if first iteration, visit leftmost descendant which may be root */
+ 	if (!pos)
+ 		return kernfs_leftmost_descendant(root);
+ 
+ 	/* if we visited @root, we're done */
+ 	if (pos == root)
+ 		return NULL;
+ 
+ 	/* if there's an unvisited sibling, visit its leftmost descendant */
+ 	rbn = rb_next(&pos->rb);
+ 	if (rbn)
+ 		return kernfs_leftmost_descendant(rb_to_kn(rbn));
+ 
+ 	/* no sibling left, visit parent */
+ 	return pos->parent;
+ }
+ 
+ static void __kernfs_deactivate(struct kernfs_node *kn)
+ {
+ 	struct kernfs_node *pos;
+ 
+ 	lockdep_assert_held(&kernfs_mutex);
+ 
+ 	/* prevent any new usage under @kn by deactivating all nodes */
+ 	pos = NULL;
+ 	while ((pos = kernfs_next_descendant_post(pos, kn))) {
+ 		if (!pos->deact_depth++) {
+ 			WARN_ON_ONCE(atomic_read(&pos->active) < 0);
+ 			atomic_add(KN_DEACTIVATED_BIAS, &pos->active);
+ 			pos->flags |= KERNFS_JUST_DEACTIVATED;
+ 		}
+ 	}
+ 
+ 	/*
+ 	 * Drain the subtree.  If kernfs_drain() blocked to drain, which is
+ 	 * indicated by %true return, it temporarily released kernfs_mutex
+ 	 * and the rbtree might have been modified inbetween breaking our
+ 	 * future walk.  Restart the walk after each %true return.
+ 	 */
+ 	pos = NULL;
+ 	while ((pos = kernfs_next_descendant_post(pos, kn))) {
+ 		bool drained;
+ 
+ 		kernfs_get(pos);
+ 		drained = kernfs_drain(pos);
+ 		kernfs_put(pos);
+ 		if (drained)
+ 			pos = NULL;
+ 	}
+ }
+ 
+ static void __kernfs_reactivate(struct kernfs_node *kn)
+ {
+ 	struct kernfs_node *pos;
+ 
+ 	lockdep_assert_held(&kernfs_mutex);
+ 
+ 	pos = NULL;
+ 	while ((pos = kernfs_next_descendant_post(pos, kn))) {
+ 		if (!--pos->deact_depth) {
+ 			WARN_ON_ONCE(atomic_read(&pos->active) >= 0);
+ 			atomic_sub(KN_DEACTIVATED_BIAS, &pos->active);
+ 		}
+ 		WARN_ON_ONCE(pos->deact_depth < 0);
+ 	}
+ 
+ 	/* some nodes reactivated, kick get_active waiters */
+ 	wake_up_all(&kernfs_root(kn)->deactivate_waitq);
+ }
+ 
+ static void __kernfs_deactivate_self(struct kernfs_node *kn)
+ {
+ 	/*
+ 	 * Take out ourself out of the active ref dependency chain and
+ 	 * deactivate.  If we're called without an active ref, lockdep will
+ 	 * complain.
+ 	 */
+ 	kernfs_put_active(kn);
+ 	__kernfs_deactivate(kn);
+ }
+ 
+ static void __kernfs_reactivate_self(struct kernfs_node *kn)
+ {
+ 	__kernfs_reactivate(kn);
+ 	/*
+ 	 * Restore active ref dropped by deactivate_self() so that it's
+ 	 * balanced on return.  put_active() will soon be called on @kn, so
+ 	 * this can't break anything regardless of @kn's state.
+ 	 */
+ 	atomic_inc(&kn->active);
+ 	if (kernfs_lockdep(kn))
+ 		rwsem_acquire(&kn->dep_map, 0, 1, _RET_IP_);
+ }
+ 
+ /**
+  * kernfs_deactivate - deactivate subtree of a node
+  * @kn: kernfs_node to deactivate subtree of
+  *
+  * Deactivate the subtree of @kn.  On return, there's no active operation
+  * going on under @kn and creation or renaming of a node under @kn is
+  * blocked until @kn is reactivated or removed.  This function can be
+  * called multiple times and nests properly.  Each invocation should be
+  * paired with kernfs_reactivate().
+  *
+  * For a kernfs user which uses simple locking, the subsystem lock would
+  * nest inside active reference.  This becomes problematic if the user
+  * tries to remove nodes while holding the subystem lock as it would create
+  * a reverse locking dependency from the subsystem lock to active ref.
+  * This function can be used to break such reverse dependency.  The user
+  * can call this function outside the subsystem lock and then proceed to
+  * invoke kernfs_remove() while holding the subsystem lock without
+  * introducing such reverse dependency.
+  */
+ void kernfs_deactivate(struct kernfs_node *kn)
+ {
+ 	mutex_lock(&kernfs_mutex);
+ 	__kernfs_deactivate(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ }
+ 
+ /**
+  * kernfs_reactivate - reactivate subtree of a node
+  * @kn: kernfs_node to reactivate subtree of
+  *
+  * Undo kernfs_deactivate().
+  */
+ void kernfs_reactivate(struct kernfs_node *kn)
+ {
+ 	mutex_lock(&kernfs_mutex);
+ 	__kernfs_reactivate(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ }
+ 
+ /**
+  * kernfs_deactivate_self - deactivate subtree of a node from its own method
+  * @kn: the self kernfs_node to deactivate subtree of
+  *
+  * The caller must be running off of a kernfs operation which is invoked
+  * with an active reference - e.g. one of kernfs_ops.  Once this function
+  * is called, @kn may be removed by someone else while the enclosing method
+  * is in progress.  Other than that, this function is equivalent to
+  * kernfs_deactivate() and should be paired with kernfs_reactivate_self().
+  */
+ void kernfs_deactivate_self(struct kernfs_node *kn)
+ {
+ 	mutex_lock(&kernfs_mutex);
+ 	__kernfs_deactivate_self(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ }
+ 
+ /**
+  * kernfs_reactivate_self - reactivate subtree of a node from its own method
+  * @kn: the self kernfs_node to reactivate subtree of
+  *
+  * Undo kernfs_deactivate_self().
+  */
+ void kernfs_reactivate_self(struct kernfs_node *kn)
+ {
+ 	mutex_lock(&kernfs_mutex);
+ 	__kernfs_reactivate_self(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ }
+ 
+ static void __kernfs_remove(struct kernfs_node *kn)
+ {
+ 	struct kernfs_root *root = kernfs_root(kn);
+ 	struct kernfs_node *pos;
+ 
+ 	lockdep_assert_held(&kernfs_mutex);
+ 
+ 	if (!kn)
+ 		return;
+ 
+ 	pr_debug("kernfs %s: removing\n", kn->name);
+ 
+ 	__kernfs_deactivate(kn);
+ 
+ 	/* unlink the subtree node-by-node */
+ 	do {
+ 		pos = kernfs_leftmost_descendant(kn);
+ 
+ 		/*
+ 		 * We're gonna release kernfs_mutex to unmap bin files,
+ 		 * Make sure @pos doesn't go away inbetween.
+ 		 */
+ 		kernfs_get(pos);
+ 
+ 		/*
+ 		 * This must be come before unlinking; otherwise, when
+ 		 * there are multiple removers, some may finish before
+ 		 * unmapping is complete.
+ 		 */
+ 		if (pos->flags & KERNFS_HAS_MMAP) {
+ 			mutex_unlock(&kernfs_mutex);
+ 			kernfs_unmap_file(pos);
+ 			mutex_lock(&kernfs_mutex);
+ 		}
+ 
+ 		/*
+ 		 * kernfs_unlink_sibling() succeeds once per node.  Use it
+ 		 * to decide who's responsible for cleanups.
+ 		 */
+ 		if (!pos->parent || kernfs_unlink_sibling(pos)) {
+ 			struct kernfs_iattrs *ps_iattr =
+ 				pos->parent ? pos->parent->iattr : NULL;
+ 
+ 			/* update timestamps on the parent */
+ 			if (ps_iattr) {
+ 				ps_iattr->ia_iattr.ia_ctime = CURRENT_TIME;
+ 				ps_iattr->ia_iattr.ia_mtime = CURRENT_TIME;
+ 			}
+ 
+ 			kernfs_put(pos);
+ 		}
+ 
+ 		kernfs_put(pos);
+ 	} while (pos != kn);
+ 
+ 	/* some nodes killed, kick get_active waiters */
+ 	wake_up_all(&root->deactivate_waitq);
+ }
+ 
+ /**
+  * kernfs_remove - remove a kernfs_node recursively
+  * @kn: the kernfs_node to remove
+  *
+  * Remove @kn along with all its subdirectories and files.
+  */
+ void kernfs_remove(struct kernfs_node *kn)
+ {
+ 	mutex_lock(&kernfs_mutex);
+ 	__kernfs_remove(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ }
+ 
+ /**
+  * kernfs_remove_self - remove a kernfs_node from its own method
+  * @kn: the self kernfs_node to remove
+  *
+  * The caller must be running off of a kernfs operation which is invoked
+  * with an active reference - e.g. one of kernfs_ops.  This can be used to
+  * implement a file operation which deletes itself.
+  *
+  * For example, the "delete" file for a sysfs device directory can be
+  * implemented by invoking kernfs_remove_self() on the "delete" file
+  * itself.  This function breaks the circular dependency of trying to
+  * deactivate self while holding an active ref itself.  It isn't necessary
+  * to modify the usual removal path to use kernfs_remove_self().  The
+  * "delete" implementation can simply invoke kernfs_remove_self() on self
+  * before proceeding with the usual removal path.  kernfs will ignore later
+  * kernfs_remove() on self.
+  *
+  * kernfs_remove_self() can be called multiple times concurrently on the
+  * same kernfs_node.  Only the first one actually performs removal and
+  * returns %true.  All others will wait until the kernfs operation which
+  * won self-removal finishes and return %false.  Note that the losers wait
+  * for the completion of not only the winning kernfs_remove_self() but also
+  * the whole kernfs_ops which won the arbitration.  This can be used to
+  * guarantee, for example, all concurrent writes to a "delete" file to
+  * finish only after the whole operation is complete.
+  */
+ bool kernfs_remove_self(struct kernfs_node *kn)
+ {
+ 	bool ret;
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 	__kernfs_deactivate_self(kn);
+ 
+ 	/*
+ 	 * SUICIDAL is used to arbitrate among competing invocations.  Only
+ 	 * the first one will actually perform removal.  When the removal
+ 	 * is complete, SUICIDED is set and the active ref is restored
+ 	 * while holding kernfs_mutex.  The ones which lost arbitration
+ 	 * waits for SUICDED && drained which can happen only after the
+ 	 * enclosing kernfs operation which executed the winning instance
+ 	 * of kernfs_remove_self() finished.
+ 	 */
+ 	if (!(kn->flags & KERNFS_SUICIDAL)) {
+ 		kn->flags |= KERNFS_SUICIDAL;
+ 		__kernfs_remove(kn);
+ 		kn->flags |= KERNFS_SUICIDED;
+ 		ret = true;
+ 	} else {
+ 		wait_queue_head_t *waitq = &kernfs_root(kn)->deactivate_waitq;
+ 		DEFINE_WAIT(wait);
+ 
+ 		while (true) {
+ 			prepare_to_wait(waitq, &wait, TASK_UNINTERRUPTIBLE);
+ 
+ 			if ((kn->flags & KERNFS_SUICIDED) &&
+ 			    atomic_read(&kn->active) == KN_DEACTIVATED_BIAS)
+ 				break;
+ 
+ 			mutex_unlock(&kernfs_mutex);
+ 			schedule();
+ 			mutex_lock(&kernfs_mutex);
+ 		}
+ 		finish_wait(waitq, &wait);
+ 		WARN_ON_ONCE(!RB_EMPTY_NODE(&kn->rb));
+ 		ret = false;
+ 	}
+ 
+ 	__kernfs_reactivate_self(kn);
+ 	mutex_unlock(&kernfs_mutex);
+ 	return ret;
+ }
+ 
+ /**
+  * kernfs_remove_by_name_ns - find a kernfs_node by name and remove it
+  * @parent: parent of the target
+  * @name: name of the kernfs_node to remove
+  * @ns: namespace tag of the kernfs_node to remove
+  *
+  * Look for the kernfs_node with @name and @ns under @parent and remove it.
+  * Returns 0 on success, -ENOENT if such entry doesn't exist.
+  */
+ int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
+ 			     const void *ns)
+ {
+ 	struct kernfs_node *kn;
+ 
+ 	if (!parent) {
+ 		WARN(1, KERN_WARNING "kernfs: can not remove '%s', no directory\n",
+ 			name);
+ 		return -ENOENT;
+ 	}
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 
+ 	kn = kernfs_find_ns(parent, name, ns);
+ 	if (kn)
+ 		__kernfs_remove(kn);
+ 
+ 	mutex_unlock(&kernfs_mutex);
+ 
+ 	if (kn)
+ 		return 0;
+ 	else
+ 		return -ENOENT;
+ }
+ 
+ /**
+  * kernfs_rename_ns - move and rename a kernfs_node
+  * @kn: target node
+  * @new_parent: new parent to put @sd under
+  * @new_name: new name
+  * @new_ns: new namespace tag
+  */
+ int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
+ 		     const char *new_name, const void *new_ns)
+ {
+ 	int error;
+ 
+ 	error = -ENOENT;
+ 	if (!kernfs_get_active(new_parent))
+ 		goto out;
+ 	if (!kernfs_get_active(kn))
+ 		goto out_put_new_parent;
+ 
+ 	mutex_lock(&kernfs_mutex);
+ 
+ 	error = 0;
+ 	if ((kn->parent == new_parent) && (kn->ns == new_ns) &&
+ 	    (strcmp(kn->name, new_name) == 0))
+ 		goto out_unlock;	/* nothing to rename */
+ 
+ 	error = -EEXIST;
+ 	if (kernfs_find_ns(new_parent, new_name, new_ns))
+ 		goto out_unlock;
+ 
+ 	/* rename kernfs_node */
+ 	if (strcmp(kn->name, new_name) != 0) {
+ 		error = -ENOMEM;
+ 		new_name = kstrdup(new_name, GFP_KERNEL);
+ 		if (!new_name)
+ 			goto out_unlock;
+ 
+ 		if (kn->flags & KERNFS_STATIC_NAME)
+ 			kn->flags &= ~KERNFS_STATIC_NAME;
+ 		else
+ 			kfree(kn->name);
+ 
+ 		kn->name = new_name;
+ 	}
+ 
+ 	/*
+ 	 * Move to the appropriate place in the appropriate directories rbtree.
+ 	 */
+ 	kernfs_unlink_sibling(kn);
+ 	kernfs_get(new_parent);
+ 	kernfs_put(kn->parent);
+ 	kn->ns = new_ns;
+ 	kn->hash = kernfs_name_hash(kn->name, kn->ns);
+ 	kn->parent = new_parent;
+ 	kernfs_link_sibling(kn);
+ 
+ 	error = 0;
+ out_unlock:
+ 	mutex_unlock(&kernfs_mutex);
+ 	kernfs_put_active(kn);
+ out_put_new_parent:
+ 	kernfs_put_active(new_parent);
+ out:
+ 	return error;
+ }
+ 
+ /* Relationship between s_mode and the DT_xxx types */
+ static inline unsigned char dt_type(struct kernfs_node *kn)
+ {
+ 	return (kn->mode >> 12) & 15;
+ }
+ 
+ static int kernfs_dir_fop_release(struct inode *inode, struct file *filp)
+ {
+ 	kernfs_put(filp->private_data);
+ 	return 0;
+ }
+ 
+ static struct kernfs_node *kernfs_dir_pos(const void *ns,
+ 	struct kernfs_node *parent, loff_t hash, struct kernfs_node *pos)
+ {
+ 	if (pos) {
+ 		int valid = pos->parent == parent && hash == pos->hash;
+ 		kernfs_put(pos);
+ 		if (!valid)
+ 			pos = NULL;
+ 	}
+ 	if (!pos && (hash > 1) && (hash < INT_MAX)) {
+ 		struct rb_node *node = parent->dir.children.rb_node;
+ 		while (node) {
+ 			pos = rb_to_kn(node);
+ 
+ 			if (hash < pos->hash)
+ 				node = node->rb_left;
+ 			else if (hash > pos->hash)
+ 				node = node->rb_right;
+ 			else
+ 				break;
+ 		}
+ 	}
+ 	/* Skip over entries in the wrong namespace */
+ 	while (pos && pos->ns != ns) {
+ 		struct rb_node *node = rb_next(&pos->rb);
+ 		if (!node)
+ 			pos = NULL;
+ 		else
+ 			pos = rb_to_kn(node);
+ 	}
+ 	return pos;
+ }
+ 
+ static struct kernfs_node *kernfs_dir_next_pos(const void *ns,
+ 	struct kernfs_node *parent, ino_t ino, struct kernfs_node *pos)
+ {
+ 	pos = kernfs_dir_pos(ns, parent, ino, pos);
+ 	if (pos)
+ 		do {
+ 			struct rb_node *node = rb_next(&pos->rb);
+ 			if (!node)
+ 				pos = NULL;
+ 			else
+ 				pos = rb_to_kn(node);
+ 		} while (pos && pos->ns != ns);
+ 	return pos;
+ }
+ 
+ static int kernfs_fop_readdir(struct file *file, struct dir_context *ctx)
+ {
+ 	struct dentry *dentry = file->f_path.dentry;
+ 	struct kernfs_node *parent = dentry->d_fsdata;
+ 	struct kernfs_node *pos = file->private_data;
+ 	const void *ns = NULL;
+ 
+ 	if (!dir_emit_dots(file, ctx))
+ 		return 0;
+ 	mutex_lock(&kernfs_mutex);
+ 
+ 	if (kernfs_ns_enabled(parent))
+ 		ns = kernfs_info(dentry->d_sb)->ns;
+ 
+ 	for (pos = kernfs_dir_pos(ns, parent, ctx->pos, pos);
+ 	     pos;
+ 	     pos = kernfs_dir_next_pos(ns, parent, ctx->pos, pos)) {
+ 		const char *name = pos->name;
+ 		unsigned int type = dt_type(pos);
+ 		int len = strlen(name);
+ 		ino_t ino = pos->ino;
+ 
+ 		ctx->pos = pos->hash;
+ 		file->private_data = pos;
+ 		kernfs_get(pos);
+ 
+ 		mutex_unlock(&kernfs_mutex);
+ 		if (!dir_emit(ctx, name, len, ino, type))
+ 			return 0;
+ 		mutex_lock(&kernfs_mutex);
+ 	}
+ 	mutex_unlock(&kernfs_mutex);
+ 	file->private_data = NULL;
+ 	ctx->pos = INT_MAX;
+ 	return 0;
+ }
+ 
+ static loff_t kernfs_dir_fop_llseek(struct file *file, loff_t offset,
+ 				    int whence)
+ {
+ 	struct inode *inode = file_inode(file);
+ 	loff_t ret;
+ 
+ 	mutex_lock(&inode->i_mutex);
+ 	ret = generic_file_llseek(file, offset, whence);
+ 	mutex_unlock(&inode->i_mutex);
+ 
+ 	return ret;
+ }
+ 
+ const struct file_operations kernfs_dir_fops = {
+ 	.read		= generic_read_dir,
+ 	.iterate	= kernfs_fop_readdir,
+ 	.release	= kernfs_dir_fop_release,
+ 	.llseek		= kernfs_dir_fop_llseek,
+ };
++>>>>>>> 1ae06819c77c (kernfs, sysfs, driver-core: implement kernfs_remove_self() and its wrappers)
diff --cc fs/sysfs/file.c
index 602f56db0442,1b8b91b67fdb..000000000000
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@@ -652,26 -355,47 +652,53 @@@ int sysfs_chmod_file(struct kobject *ko
  }
  EXPORT_SYMBOL_GPL(sysfs_chmod_file);
  
 +
  /**
 - * sysfs_remove_file_ns - remove an object attribute with a custom ns tag
 - * @kobj: object we're acting for
 - * @attr: attribute descriptor
 - * @ns: namespace tag of the file to remove
 + *	sysfs_remove_file - remove an object attribute.
 + *	@kobj:	object we're acting for.
 + *	@attr:	attribute descriptor.
   *
 - * Hash the attribute name and namespace tag and kill the victim.
 + *	Hash the attribute name and kill the victim.
   */
 -void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
 -			  const void *ns)
 +
 +void sysfs_remove_file(struct kobject * kobj, const struct attribute * attr)
  {
 -	struct kernfs_node *parent = kobj->sd;
 +	const void *ns;
  
 -	kernfs_remove_by_name_ns(parent, attr->name, ns);
 +	if (sysfs_attr_ns(kobj, attr, &ns))
 +		return;
 +
 +	sysfs_hash_and_remove(kobj->sd, ns, attr->name);
  }
 -EXPORT_SYMBOL_GPL(sysfs_remove_file_ns);
  
++<<<<<<< HEAD
 +void sysfs_remove_files(struct kobject * kobj, const struct attribute **ptr)
++=======
+ /**
+  * sysfs_remove_file_self - remove an object attribute from its own method
+  * @kobj: object we're acting for
+  * @attr: attribute descriptor
+  *
+  * See kernfs_remove_self() for details.
+  */
+ bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr)
+ {
+ 	struct kernfs_node *parent = kobj->sd;
+ 	struct kernfs_node *kn;
+ 	bool ret;
+ 
+ 	kn = kernfs_find_and_get(parent, attr->name);
+ 	if (WARN_ON_ONCE(!kn))
+ 		return false;
+ 
+ 	ret = kernfs_remove_self(kn);
+ 
+ 	kernfs_put(kn);
+ 	return ret;
+ }
+ 
+ void sysfs_remove_files(struct kobject *kobj, const struct attribute **ptr)
++>>>>>>> 1ae06819c77c (kernfs, sysfs, driver-core: implement kernfs_remove_self() and its wrappers)
  {
  	int i;
  	for (i = 0; ptr[i]; i++)
diff --cc include/linux/kernfs.h
index 254b9e872b09,0b7b7cc352eb..000000000000
--- a/include/linux/kernfs.h
+++ b/include/linux/kernfs.h
@@@ -7,6 -7,375 +7,379 @@@
  #ifndef __LINUX_KERNFS_H
  #define __LINUX_KERNFS_H
  
++<<<<<<< HEAD
 +struct sysfs_dirent;
++=======
+ #include <linux/kernel.h>
+ #include <linux/err.h>
+ #include <linux/list.h>
+ #include <linux/mutex.h>
+ #include <linux/idr.h>
+ #include <linux/lockdep.h>
+ #include <linux/rbtree.h>
+ #include <linux/atomic.h>
+ #include <linux/wait.h>
+ 
+ struct file;
+ struct iattr;
+ struct seq_file;
+ struct vm_area_struct;
+ struct super_block;
+ struct file_system_type;
+ 
+ struct kernfs_open_node;
+ struct kernfs_iattrs;
+ 
+ enum kernfs_node_type {
+ 	KERNFS_DIR		= 0x0001,
+ 	KERNFS_FILE		= 0x0002,
+ 	KERNFS_LINK		= 0x0004,
+ };
+ 
+ #define KERNFS_TYPE_MASK	0x000f
+ #define KERNFS_FLAG_MASK	~KERNFS_TYPE_MASK
+ 
+ enum kernfs_node_flag {
+ 	KERNFS_JUST_DEACTIVATED	= 0x0010, /* used to aid lockdep annotation */
+ 	KERNFS_NS		= 0x0020,
+ 	KERNFS_HAS_SEQ_SHOW	= 0x0040,
+ 	KERNFS_HAS_MMAP		= 0x0080,
+ 	KERNFS_LOCKDEP		= 0x0100,
+ 	KERNFS_STATIC_NAME	= 0x0200,
+ 	KERNFS_SUICIDAL		= 0x0400,
+ 	KERNFS_SUICIDED		= 0x0800,
+ };
+ 
+ /* type-specific structures for kernfs_node union members */
+ struct kernfs_elem_dir {
+ 	unsigned long		subdirs;
+ 	/* children rbtree starts here and goes through kn->rb */
+ 	struct rb_root		children;
+ 
+ 	/*
+ 	 * The kernfs hierarchy this directory belongs to.  This fits
+ 	 * better directly in kernfs_node but is here to save space.
+ 	 */
+ 	struct kernfs_root	*root;
+ };
+ 
+ struct kernfs_elem_symlink {
+ 	struct kernfs_node	*target_kn;
+ };
+ 
+ struct kernfs_elem_attr {
+ 	const struct kernfs_ops	*ops;
+ 	struct kernfs_open_node	*open;
+ 	loff_t			size;
+ };
+ 
+ /*
+  * kernfs_node - the building block of kernfs hierarchy.  Each and every
+  * kernfs node is represented by single kernfs_node.  Most fields are
+  * private to kernfs and shouldn't be accessed directly by kernfs users.
+  *
+  * As long as s_count reference is held, the kernfs_node itself is
+  * accessible.  Dereferencing elem or any other outer entity requires
+  * active reference.
+  */
+ struct kernfs_node {
+ 	atomic_t		count;
+ 	atomic_t		active;
+ 	int			deact_depth;
+ 	unsigned int		hash;	/* ns + name hash */
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	struct lockdep_map	dep_map;
+ #endif
+ 	/* the following two fields are published */
+ 	struct kernfs_node	*parent;
+ 	const char		*name;
+ 
+ 	struct rb_node		rb;
+ 
+ 	const void		*ns;	/* namespace tag */
+ 	union {
+ 		struct kernfs_elem_dir		dir;
+ 		struct kernfs_elem_symlink	symlink;
+ 		struct kernfs_elem_attr		attr;
+ 	};
+ 
+ 	void			*priv;
+ 
+ 	unsigned short		flags;
+ 	umode_t			mode;
+ 	unsigned int		ino;
+ 	struct kernfs_iattrs	*iattr;
+ };
+ 
+ /*
+  * kernfs_dir_ops may be specified on kernfs_create_root() to support
+  * directory manipulation syscalls.  These optional callbacks are invoked
+  * on the matching syscalls and can perform any kernfs operations which
+  * don't necessarily have to be the exact operation requested.
+  */
+ struct kernfs_dir_ops {
+ 	int (*mkdir)(struct kernfs_node *parent, const char *name,
+ 		     umode_t mode);
+ 	int (*rmdir)(struct kernfs_node *kn);
+ 	int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
+ 		      const char *new_name);
+ };
+ 
+ struct kernfs_root {
+ 	/* published fields */
+ 	struct kernfs_node	*kn;
+ 
+ 	/* private fields, do not use outside kernfs proper */
+ 	struct ida		ino_ida;
+ 	struct kernfs_dir_ops	*dir_ops;
+ 	wait_queue_head_t	deactivate_waitq;
+ };
+ 
+ struct kernfs_open_file {
+ 	/* published fields */
+ 	struct kernfs_node	*kn;
+ 	struct file		*file;
+ 
+ 	/* private fields, do not use outside kernfs proper */
+ 	struct mutex		mutex;
+ 	int			event;
+ 	struct list_head	list;
+ 
+ 	bool			mmapped;
+ 	const struct vm_operations_struct *vm_ops;
+ };
+ 
+ struct kernfs_ops {
+ 	/*
+ 	 * Read is handled by either seq_file or raw_read().
+ 	 *
+ 	 * If seq_show() is present, seq_file path is active.  Other seq
+ 	 * operations are optional and if not implemented, the behavior is
+ 	 * equivalent to single_open().  @sf->private points to the
+ 	 * associated kernfs_open_file.
+ 	 *
+ 	 * read() is bounced through kernel buffer and a read larger than
+ 	 * PAGE_SIZE results in partial operation of PAGE_SIZE.
+ 	 */
+ 	int (*seq_show)(struct seq_file *sf, void *v);
+ 
+ 	void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
+ 	void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
+ 	void (*seq_stop)(struct seq_file *sf, void *v);
+ 
+ 	ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
+ 			loff_t off);
+ 
+ 	/*
+ 	 * write() is bounced through kernel buffer and a write larger than
+ 	 * PAGE_SIZE results in partial operation of PAGE_SIZE.
+ 	 */
+ 	ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
+ 			 loff_t off);
+ 
+ 	int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);
+ 
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	struct lock_class_key	lockdep_key;
+ #endif
+ };
+ 
+ #ifdef CONFIG_SYSFS
+ 
+ static inline enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
+ {
+ 	return kn->flags & KERNFS_TYPE_MASK;
+ }
+ 
+ /**
+  * kernfs_enable_ns - enable namespace under a directory
+  * @kn: directory of interest, should be empty
+  *
+  * This is to be called right after @kn is created to enable namespace
+  * under it.  All children of @kn must have non-NULL namespace tags and
+  * only the ones which match the super_block's tag will be visible.
+  */
+ static inline void kernfs_enable_ns(struct kernfs_node *kn)
+ {
+ 	WARN_ON_ONCE(kernfs_type(kn) != KERNFS_DIR);
+ 	WARN_ON_ONCE(!RB_EMPTY_ROOT(&kn->dir.children));
+ 	kn->flags |= KERNFS_NS;
+ }
+ 
+ /**
+  * kernfs_ns_enabled - test whether namespace is enabled
+  * @kn: the node to test
+  *
+  * Test whether namespace filtering is enabled for the children of @ns.
+  */
+ static inline bool kernfs_ns_enabled(struct kernfs_node *kn)
+ {
+ 	return kn->flags & KERNFS_NS;
+ }
+ 
+ struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
+ 					   const char *name, const void *ns);
+ void kernfs_get(struct kernfs_node *kn);
+ void kernfs_put(struct kernfs_node *kn);
+ 
+ struct kernfs_root *kernfs_create_root(struct kernfs_dir_ops *kdops,
+ 				       void *priv);
+ void kernfs_destroy_root(struct kernfs_root *root);
+ 
+ struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
+ 					 const char *name, umode_t mode,
+ 					 void *priv, const void *ns);
+ struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
+ 					 const char *name,
+ 					 umode_t mode, loff_t size,
+ 					 const struct kernfs_ops *ops,
+ 					 void *priv, const void *ns,
+ 					 bool name_is_static,
+ 					 struct lock_class_key *key);
+ struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
+ 				       const char *name,
+ 				       struct kernfs_node *target);
+ void kernfs_deactivate(struct kernfs_node *kn);
+ void kernfs_reactivate(struct kernfs_node *kn);
+ void kernfs_deactivate_self(struct kernfs_node *kn);
+ void kernfs_reactivate_self(struct kernfs_node *kn);
+ void kernfs_remove(struct kernfs_node *kn);
+ bool kernfs_remove_self(struct kernfs_node *kn);
+ int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
+ 			     const void *ns);
+ int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
+ 		     const char *new_name, const void *new_ns);
+ int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
+ void kernfs_notify(struct kernfs_node *kn);
+ 
+ const void *kernfs_super_ns(struct super_block *sb);
+ struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
+ 			       struct kernfs_root *root, const void *ns);
+ void kernfs_kill_sb(struct super_block *sb);
+ 
+ void kernfs_init(void);
+ 
+ #else	/* CONFIG_SYSFS */
+ 
+ static inline enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
+ { return 0; }	/* whatever */
+ 
+ static inline void kernfs_enable_ns(struct kernfs_node *kn) { }
+ 
+ static inline bool kernfs_ns_enabled(struct kernfs_node *kn)
+ { return false; }
+ 
+ static inline struct kernfs_node *
+ kernfs_find_and_get_ns(struct kernfs_node *parent, const char *name,
+ 		       const void *ns)
+ { return NULL; }
+ 
+ static inline void kernfs_get(struct kernfs_node *kn) { }
+ static inline void kernfs_put(struct kernfs_node *kn) { }
+ 
+ static inline struct kernfs_root *
+ kernfs_create_root(struct kernfs_dir_ops *kdops, void *priv)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_destroy_root(struct kernfs_root *root) { }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_dir_ns(struct kernfs_node *parent, const char *name,
+ 		     umode_t mode, void *priv, const void *ns)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline struct kernfs_node *
+ __kernfs_create_file(struct kernfs_node *parent, const char *name,
+ 		     umode_t mode, loff_t size, const struct kernfs_ops *ops,
+ 		     void *priv, const void *ns, bool name_is_static,
+ 		     struct lock_class_key *key)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_link(struct kernfs_node *parent, const char *name,
+ 		   struct kernfs_node *target)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_remove(struct kernfs_node *kn) { }
+ 
+ static inline bool kernfs_remove_self(struct kernfs_node *kn)
+ { return false; }
+ 
+ static inline int kernfs_remove_by_name_ns(struct kernfs_node *kn,
+ 					   const char *name, const void *ns)
+ { return -ENOSYS; }
+ 
+ static inline int kernfs_rename_ns(struct kernfs_node *kn,
+ 				   struct kernfs_node *new_parent,
+ 				   const char *new_name, const void *new_ns)
+ { return -ENOSYS; }
+ 
+ static inline int kernfs_setattr(struct kernfs_node *kn,
+ 				 const struct iattr *iattr)
+ { return -ENOSYS; }
+ 
+ static inline void kernfs_notify(struct kernfs_node *kn) { }
+ 
+ static inline const void *kernfs_super_ns(struct super_block *sb)
+ { return NULL; }
+ 
+ static inline struct dentry *
+ kernfs_mount_ns(struct file_system_type *fs_type, int flags,
+ 		struct kernfs_root *root, const void *ns)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_kill_sb(struct super_block *sb) { }
+ 
+ static inline void kernfs_init(void) { }
+ 
+ #endif	/* CONFIG_SYSFS */
+ 
+ static inline struct kernfs_node *
+ kernfs_find_and_get(struct kernfs_node *kn, const char *name)
+ {
+ 	return kernfs_find_and_get_ns(kn, name, NULL);
+ }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
+ 		  void *priv)
+ {
+ 	return kernfs_create_dir_ns(parent, name, mode, priv, NULL);
+ }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
+ 		      umode_t mode, loff_t size, const struct kernfs_ops *ops,
+ 		      void *priv, const void *ns)
+ {
+ 	struct lock_class_key *key = NULL;
+ 
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	key = (struct lock_class_key *)&ops->lockdep_key;
+ #endif
+ 	return __kernfs_create_file(parent, name, mode, size, ops, priv, ns,
+ 				    false, key);
+ }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
+ 		   loff_t size, const struct kernfs_ops *ops, void *priv)
+ {
+ 	return kernfs_create_file_ns(parent, name, mode, size, ops, priv, NULL);
+ }
+ 
+ static inline int kernfs_remove_by_name(struct kernfs_node *parent,
+ 					const char *name)
+ {
+ 	return kernfs_remove_by_name_ns(parent, name, NULL);
+ }
+ 
+ static inline struct dentry *
+ kernfs_mount(struct file_system_type *fs_type, int flags,
+ 	     struct kernfs_root *root)
+ {
+ 	return kernfs_mount_ns(fs_type, flags, root, NULL);
+ }
++>>>>>>> 1ae06819c77c (kernfs, sysfs, driver-core: implement kernfs_remove_self() and its wrappers)
  
  #endif	/* __LINUX_KERNFS_H */
diff --cc include/linux/sysfs.h
index a0524344cf5a,bd96c603ab6c..000000000000
--- a/include/linux/sysfs.h
+++ b/include/linux/sysfs.h
@@@ -196,7 -196,9 +196,13 @@@ int __must_check sysfs_create_files(str
  				   const struct attribute **attr);
  int __must_check sysfs_chmod_file(struct kobject *kobj,
  				  const struct attribute *attr, umode_t mode);
++<<<<<<< HEAD
 +void sysfs_remove_file(struct kobject *kobj, const struct attribute *attr);
++=======
+ void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
+ 			  const void *ns);
+ bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
++>>>>>>> 1ae06819c77c (kernfs, sysfs, driver-core: implement kernfs_remove_self() and its wrappers)
  void sysfs_remove_files(struct kobject *kobj, const struct attribute **attr);
  
  int __must_check sysfs_create_bin_file(struct kobject *kobj,
diff --git a/drivers/base/core.c b/drivers/base/core.c
index cb4115569ad8..e4d1eab97c0e 100644
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -646,6 +646,23 @@ void device_remove_file(struct device *dev,
 		sysfs_remove_file(&dev->kobj, &attr->attr);
 }
 
+/**
+ * device_remove_file_self - remove sysfs attribute file from its own method.
+ * @dev: device.
+ * @attr: device attribute descriptor.
+ *
+ * See kernfs_remove_self() for details.
+ */
+bool device_remove_file_self(struct device *dev,
+			     const struct device_attribute *attr)
+{
+	if (dev)
+		return sysfs_remove_file_self(&dev->kobj, &attr->attr);
+	else
+		return false;
+}
+EXPORT_SYMBOL_GPL(device_remove_file_self);
+
 /**
  * device_create_bin_file - create sysfs binary attribute file for device.
  * @dev: device.
* Unmerged path fs/kernfs/dir.c
* Unmerged path fs/sysfs/file.c
diff --git a/include/linux/device.h b/include/linux/device.h
index b11af8a6145d..03696d757cf9 100644
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -575,6 +575,8 @@ extern int device_create_file(struct device *device,
 			      const struct device_attribute *entry);
 extern void device_remove_file(struct device *dev,
 			       const struct device_attribute *attr);
+extern bool device_remove_file_self(struct device *dev,
+				    const struct device_attribute *attr);
 extern int __must_check device_create_bin_file(struct device *dev,
 					const struct bin_attribute *attr);
 extern void device_remove_bin_file(struct device *dev,
* Unmerged path include/linux/kernfs.h
* Unmerged path include/linux/sysfs.h
