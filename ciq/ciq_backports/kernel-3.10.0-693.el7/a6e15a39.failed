PM / hibernate: introduce "nohibernate" boot parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Kees Cook <keescook@chromium.org>
commit a6e15a39048ec3229b9a53425f4384f55f6cc1b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a6e15a39.failed

To support using kernel features that are not compatible with hibernation,
this creates the "nohibernate" kernel boot parameter to disable both
hibernation and resume. This allows hibernation support to be a boot-time
choice instead of only a compile-time choice.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Acked-by: Pavel Machek <pavel@ucw.cz>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a6e15a39048ec3229b9a53425f4384f55f6cc1b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/suspend.h
#	kernel/power/hibernate.c
#	kernel/power/main.c
#	kernel/power/user.c
diff --cc include/linux/suspend.h
index f73cabf59012,519064e0c943..000000000000
--- a/include/linux/suspend.h
+++ b/include/linux/suspend.h
@@@ -320,6 -327,9 +320,12 @@@ extern unsigned long get_safe_page(gfp_
  extern void hibernation_set_ops(const struct platform_hibernation_ops *ops);
  extern int hibernate(void);
  extern bool system_entering_hibernation(void);
++<<<<<<< HEAD
++=======
+ extern bool hibernation_available(void);
+ asmlinkage int swsusp_save(void);
+ extern struct pbe *restore_pblist;
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  #else /* CONFIG_HIBERNATION */
  static inline void register_nosave_region(unsigned long b, unsigned long e) {}
  static inline void register_nosave_region_late(unsigned long b, unsigned long e) {}
diff --cc kernel/power/hibernate.c
index 2c7dfcb630a4,258f492f0347..000000000000
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@@ -35,8 -35,9 +35,9 @@@
  
  static int nocompress;
  static int noresume;
+ static int nohibernate;
  static int resume_wait;
 -static unsigned int resume_delay;
 +static int resume_delay;
  static char resume_file[256] = CONFIG_PM_STD_PARTITION;
  dev_t swsusp_resume_device;
  sector_t swsusp_resume_block;
@@@ -632,7 -648,8 +638,12 @@@ int hibernate(void
  {
  	int error;
  
++<<<<<<< HEAD
 +	if (get_securelevel() > 0) {
++=======
+ 	if (!hibernation_available()) {
+ 		pr_debug("PM: Hibernation not available.\n");
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  		return -EPERM;
  	}
  
@@@ -728,7 -745,7 +739,11 @@@ static int software_resume(void
  	/*
  	 * If the user said "noresume".. bail out early.
  	 */
++<<<<<<< HEAD
 +	if (noresume || (get_securelevel() > 0))
++=======
+ 	if (noresume || !hibernation_available())
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  		return 0;
  
  	/*
@@@ -894,10 -911,8 +909,15 @@@ static ssize_t disk_show(struct kobjec
  	int i;
  	char *start = buf;
  
++<<<<<<< HEAD
 +	if (get_securelevel() > 0) {
 +		buf += sprintf(buf, "[%s]\n", "disabled");
 +		return buf-start;
 +	}
++=======
+ 	if (!hibernation_available())
+ 		return sprintf(buf, "[disabled]\n");
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  
  	for (i = HIBERNATION_FIRST; i <= HIBERNATION_MAX; i++) {
  		if (!hibernation_modes[i])
@@@ -933,7 -948,7 +953,11 @@@ static ssize_t disk_store(struct kobjec
  	char *p;
  	int mode = HIBERNATION_INVALID;
  
++<<<<<<< HEAD
 +	if (get_securelevel() > 0)
++=======
+ 	if (!hibernation_available())
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  		return -EPERM;
  
  	p = memchr(buf, '\n', n);
diff --cc kernel/power/main.c
index 0caa1570d0c3,8e90f330f139..000000000000
--- a/kernel/power/main.c
+++ b/kernel/power/main.c
@@@ -294,20 -293,15 +294,25 @@@ static ssize_t state_show(struct kobjec
  {
  	char *s = buf;
  #ifdef CONFIG_SUSPEND
 -	suspend_state_t i;
 -
 -	for (i = PM_SUSPEND_MIN; i < PM_SUSPEND_MAX; i++)
 -		if (pm_states[i].state)
 -			s += sprintf(s,"%s ", pm_states[i].label);
 +	int i;
  
 +	for (i = 0; i < PM_SUSPEND_MAX; i++) {
 +		if (pm_states[i] && valid_state(i))
 +			s += sprintf(s,"%s ", pm_states[i]);
 +	}
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_HIBERNATION
 +	if (get_securelevel() <= 0) {
 +		s += sprintf(s, "%s\n", "disk");
 +	} else {
 +		s += sprintf(s, "\n");
 +	}
 +#else
++=======
+ 	if (hibernation_available())
+ 		s += sprintf(s, "disk ");
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  	if (s != buf)
  		/* convert the last space to a newline */
  		*(s-1) = '\n';
diff --cc kernel/power/user.c
index 95203b1ccd3d,526e8911460a..000000000000
--- a/kernel/power/user.c
+++ b/kernel/power/user.c
@@@ -49,7 -49,7 +49,11 @@@ static int snapshot_open(struct inode *
  	struct snapshot_data *data;
  	int error;
  
++<<<<<<< HEAD
 +	if (get_securelevel() > 0)
++=======
+ 	if (!hibernation_available())
++>>>>>>> a6e15a39048e (PM / hibernate: introduce "nohibernate" boot parameter)
  		return -EPERM;
  
  	lock_system_sleep();
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index ef522ccf479f..d70404906e22 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2148,6 +2148,8 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 			in certain environments such as networked servers or
 			real-time systems.
 
+	nohibernate	[HIBERNATION] Disable hibernation and resume.
+
 	nohz=		[KNL] Boottime enable/disable dynamic ticks
 			Valid arguments: on, off
 			Default: on
@@ -2900,6 +2902,7 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 		noresume	Don't check if there's a hibernation image
 				present during boot.
 		nocompress	Don't compress/decompress hibernation images.
+		no		Disable hibernation and resume.
 
 	retain_initrd	[RAM] Keep initrd memory after extraction
 
* Unmerged path include/linux/suspend.h
* Unmerged path kernel/power/hibernate.c
* Unmerged path kernel/power/main.c
* Unmerged path kernel/power/user.c
