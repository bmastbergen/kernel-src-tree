i2c: designware: fix IO timeout issue for AMD controller

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [i2c] designware: fix IO timeout issue for AMD controller (Suravee Suthikulpanit) [1354637]
Rebuild_FUZZ: 95.33%
commit-author Xiangliang Yu <Xiangliang.Yu@amd.com>
commit 2d244c81481fa5142a2ba6656ab7a8e40c849c27
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2d244c81.failed

Because of some hardware limitation, AMD I2C controller can't
trigger pending interrupt if interrupt status has been changed
after clearing interrupt status bits. Then, I2C will lost
interrupt and IO timeout.

According to hardware design, this patch implements a workaround
to disable i2c controller interrupt and re-enable i2c interrupt
before exiting ISR.

To reduce the performance impacts on other vendors, use unlikely
function to check flag in ISR.

	Signed-off-by: Xiangliang Yu <Xiangliang.Yu@amd.com>
	Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
	Cc: stable@kernel.org
(cherry picked from commit 2d244c81481fa5142a2ba6656ab7a8e40c849c27)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-platdrv.c
diff --cc drivers/i2c/busses/i2c-designware-platdrv.c
index 2dcf1a137f46,f03ea71d6519..000000000000
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@@ -116,7 -120,8 +121,12 @@@ static const struct acpi_device_id dw_i
  	{ "INT3432", 0 },
  	{ "INT3433", 0 },
  	{ "80860F41", 0 },
++<<<<<<< HEAD
 +	{ "AMD0010", 0 },
++=======
+ 	{ "808622C1", 0 },
+ 	{ "AMD0010", ACCESS_INTR_MASK },
++>>>>>>> 2d244c81481f (i2c: designware: fix IO timeout issue for AMD controller)
  	{ }
  };
  MODULE_DEVICE_TABLE(acpi, dw_i2c_acpi_match);
diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index fa49c0ff1eae..adaf533bfd5c 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -787,6 +787,12 @@ static irqreturn_t i2c_dw_isr(int this_irq, void *dev_id)
 tx_aborted:
 	if ((stat & (DW_IC_INTR_TX_ABRT | DW_IC_INTR_STOP_DET)) || dev->msg_err)
 		complete(&dev->cmd_complete);
+	else if (unlikely(dev->accessor_flags & ACCESS_INTR_MASK)) {
+		/* workaround to trigger pending interrupt */
+		stat = dw_readl(dev, DW_IC_INTR_MASK);
+		i2c_dw_disable_int(dev);
+		dw_writel(dev, stat, DW_IC_INTR_MASK);
+	}
 
 	return IRQ_HANDLED;
 }
diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index 60366c47c6de..1bde12adf6ef 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -111,6 +111,7 @@ struct dw_i2c_dev {
 
 #define ACCESS_SWAP		0x00000001
 #define ACCESS_16BIT		0x00000002
+#define ACCESS_INTR_MASK	0x00000004
 
 extern u32 dw_readl(struct dw_i2c_dev *dev, int offset);
 extern void dw_writel(struct dw_i2c_dev *dev, u32 b, int offset);
* Unmerged path drivers/i2c/busses/i2c-designware-platdrv.c
