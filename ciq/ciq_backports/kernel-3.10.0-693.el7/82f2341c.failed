tty: n_hdlc: get rid of racy n_hdlc.tbuf

jira LE-1907
cve CVE-2017-2636
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tty] n_hdlc: get rid of racy n_hdlc.tbuf ("Herton R. Krzesinski") [1429920] {CVE-2017-2636}
Rebuild_FUZZ: 93.33%
commit-author Alexander Popov <alex.popov@linux.com>
commit 82f2341c94d270421f383641b7cd670e474db56b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/82f2341c.failed

Currently N_HDLC line discipline uses a self-made singly linked list for
data buffers and has n_hdlc.tbuf pointer for buffer retransmitting after
an error.

The commit be10eb7589337e5defbe214dae038a53dd21add8
("tty: n_hdlc add buffer flushing") introduced racy access to n_hdlc.tbuf.
After tx error concurrent flush_tx_queue() and n_hdlc_send_frames() can put
one data buffer to tx_free_buf_list twice. That causes double free in
n_hdlc_release().

Let's use standard kernel linked list and get rid of n_hdlc.tbuf:
in case of tx error put current data buffer after the head of tx_buf_list.

	Signed-off-by: Alexander Popov <alex.popov@linux.com>
	Cc: stable <stable@vger.kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 82f2341c94d270421f383641b7cd670e474db56b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/n_hdlc.c
diff --cc drivers/tty/n_hdlc.c
index 1b2db9a3038c,e94aea8c0d05..000000000000
--- a/drivers/tty/n_hdlc.c
+++ b/drivers/tty/n_hdlc.c
@@@ -159,7 -156,8 +156,12 @@@ struct n_hdlc 
  /*
   * HDLC buffer list manipulation functions
   */
++<<<<<<< HEAD
 +static void n_hdlc_buf_list_init(struct n_hdlc_buf_list *list);
++=======
+ static void n_hdlc_buf_return(struct n_hdlc_buf_list *buf_list,
+ 						struct n_hdlc_buf *buf);
++>>>>>>> 82f2341c94d2 (tty: n_hdlc: get rid of racy n_hdlc.tbuf)
  static void n_hdlc_buf_put(struct n_hdlc_buf_list *list,
  			   struct n_hdlc_buf *buf);
  static struct n_hdlc_buf *n_hdlc_buf_get(struct n_hdlc_buf_list *list);
@@@ -853,13 -841,16 +845,26 @@@ static struct n_hdlc *n_hdlc_alloc(void
  	if (!n_hdlc)
  		return NULL;
  
++<<<<<<< HEAD
 +	memset(n_hdlc, 0, sizeof(*n_hdlc));
 +
 +	n_hdlc_buf_list_init(&n_hdlc->rx_free_buf_list);
 +	n_hdlc_buf_list_init(&n_hdlc->tx_free_buf_list);
 +	n_hdlc_buf_list_init(&n_hdlc->rx_buf_list);
 +	n_hdlc_buf_list_init(&n_hdlc->tx_buf_list);
 +	
++=======
+ 	spin_lock_init(&n_hdlc->rx_free_buf_list.spinlock);
+ 	spin_lock_init(&n_hdlc->tx_free_buf_list.spinlock);
+ 	spin_lock_init(&n_hdlc->rx_buf_list.spinlock);
+ 	spin_lock_init(&n_hdlc->tx_buf_list.spinlock);
+ 
+ 	INIT_LIST_HEAD(&n_hdlc->rx_free_buf_list.list);
+ 	INIT_LIST_HEAD(&n_hdlc->tx_free_buf_list.list);
+ 	INIT_LIST_HEAD(&n_hdlc->rx_buf_list.list);
+ 	INIT_LIST_HEAD(&n_hdlc->tx_buf_list.list);
+ 
++>>>>>>> 82f2341c94d2 (tty: n_hdlc: get rid of racy n_hdlc.tbuf)
  	/* allocate free rx buffer list */
  	for(i=0;i<DEFAULT_RX_BUF_COUNT;i++) {
  		buf = kmalloc(N_HDLC_BUF_SIZE, GFP_KERNEL);
@@@ -887,14 -878,22 +892,33 @@@
  }	/* end of n_hdlc_alloc() */
  
  /**
++<<<<<<< HEAD
 + * n_hdlc_buf_list_init - initialize specified HDLC buffer list
 + * @list - pointer to buffer list
 + */
 +static void n_hdlc_buf_list_init(struct n_hdlc_buf_list *list)
 +{
 +	memset(list, 0, sizeof(*list));
 +	spin_lock_init(&list->spinlock);
 +}	/* end of n_hdlc_buf_list_init() */
++=======
+  * n_hdlc_buf_return - put the HDLC buffer after the head of the specified list
+  * @buf_list - pointer to the buffer list
+  * @buf - pointer to the buffer
+  */
+ static void n_hdlc_buf_return(struct n_hdlc_buf_list *buf_list,
+ 						struct n_hdlc_buf *buf)
+ {
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&buf_list->spinlock, flags);
+ 
+ 	list_add(&buf->list_item, &buf_list->list);
+ 	buf_list->count++;
+ 
+ 	spin_unlock_irqrestore(&buf_list->spinlock, flags);
+ }
++>>>>>>> 82f2341c94d2 (tty: n_hdlc: get rid of racy n_hdlc.tbuf)
  
  /**
   * n_hdlc_buf_put - add specified HDLC buffer to tail of specified list
* Unmerged path drivers/tty/n_hdlc.c
