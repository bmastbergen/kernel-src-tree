Btrfs: self-tests: Execute page straddling test only when nodesize < PAGE_SIZE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Feifei Xu <xufeifei@linux.vnet.ibm.com>
commit ed9e4afdb0551e3ef4ee8433fe664433a20ef73a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ed9e4afd.failed

On ppc64, PAGE_SIZE is 64k which is same as BTRFS_MAX_METADATA_BLOCKSIZE.
In such a scenario, we will never be able to have an extent buffer
containing more than one page. Hence in such cases this commit does not
execute the page straddling tests.

	Reviewed-by: Josef Bacik <jbacik@fb.com>
	Signed-off-by: Feifei Xu <xufeifei@linux.vnet.ibm.com>
	Signed-off-by: Chandan Rajendra <chandan@linux.vnet.ibm.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit ed9e4afdb0551e3ef4ee8433fe664433a20ef73a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/tests/extent-io-tests.c
diff --cc fs/btrfs/tests/extent-io-tests.c
index 71ab575e7633,2794fed71fa4..000000000000
--- a/fs/btrfs/tests/extent-io-tests.c
+++ b/fs/btrfs/tests/extent-io-tests.c
@@@ -19,7 -19,9 +19,8 @@@
  #include <linux/pagemap.h>
  #include <linux/sched.h>
  #include <linux/slab.h>
 -#include <linux/sizes.h>
  #include "btrfs-tests.h"
+ #include "../ctree.h"
  #include "../extent_io.h"
  
  #define PROCESS_UNLOCK		(1 << 0)
@@@ -297,25 -299,29 +298,51 @@@ static int __test_eb_bitmaps(unsigned l
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	bitmap_set(bitmap, (PAGE_CACHE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
 +		   sizeof(long) * BITS_PER_BYTE);
 +	extent_buffer_bitmap_set(eb, PAGE_CACHE_SIZE - sizeof(long) / 2, 0,
 +				 sizeof(long) * BITS_PER_BYTE);
 +	if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
 +		test_msg("Setting straddling pages failed\n");
 +		return -EINVAL;
 +	}
 +
 +	bitmap_set(bitmap, 0, len * BITS_PER_BYTE);
 +	bitmap_clear(bitmap,
 +		     (PAGE_CACHE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
 +		     sizeof(long) * BITS_PER_BYTE);
 +	extent_buffer_bitmap_set(eb, 0, 0, len * BITS_PER_BYTE);
 +	extent_buffer_bitmap_clear(eb, PAGE_CACHE_SIZE - sizeof(long) / 2, 0,
 +				   sizeof(long) * BITS_PER_BYTE);
 +	if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
 +		test_msg("Clearing straddling pages failed\n");
 +		return -EINVAL;
++=======
+ 	/* Straddling pages test */
+ 	if (len > PAGE_SIZE) {
+ 		bitmap_set(bitmap,
+ 			(PAGE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
+ 			sizeof(long) * BITS_PER_BYTE);
+ 		extent_buffer_bitmap_set(eb, PAGE_SIZE - sizeof(long) / 2, 0,
+ 					sizeof(long) * BITS_PER_BYTE);
+ 		if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
+ 			test_msg("Setting straddling pages failed\n");
+ 			return -EINVAL;
+ 		}
+ 
+ 		bitmap_set(bitmap, 0, len * BITS_PER_BYTE);
+ 		bitmap_clear(bitmap,
+ 			(PAGE_SIZE - sizeof(long) / 2) * BITS_PER_BYTE,
+ 			sizeof(long) * BITS_PER_BYTE);
+ 		extent_buffer_bitmap_set(eb, 0, 0, len * BITS_PER_BYTE);
+ 		extent_buffer_bitmap_clear(eb, PAGE_SIZE - sizeof(long) / 2, 0,
+ 					sizeof(long) * BITS_PER_BYTE);
+ 		if (memcmp_extent_buffer(eb, bitmap, 0, len) != 0) {
+ 			test_msg("Clearing straddling pages failed\n");
+ 			return -EINVAL;
+ 		}
++>>>>>>> ed9e4afdb055 (Btrfs: self-tests: Execute page straddling test only when nodesize < PAGE_SIZE)
  	}
  
  	/*
@@@ -358,8 -364,15 +385,18 @@@ static int test_eb_bitmaps(void
  	int ret;
  
  	test_msg("Running extent buffer bitmap tests\n");
++<<<<<<< HEAD
++=======
+ 
+ 	/*
+ 	 * In ppc64, sectorsize can be 64K, thus 4 * 64K will be larger than
+ 	 * BTRFS_MAX_METADATA_BLOCKSIZE.
+ 	 */
+ 	len = (sectorsize < BTRFS_MAX_METADATA_BLOCKSIZE)
+ 		? sectorsize * 4 : sectorsize;
++>>>>>>> ed9e4afdb055 (Btrfs: self-tests: Execute page straddling test only when nodesize < PAGE_SIZE)
  
 -	bitmap = kmalloc(len, GFP_KERNEL);
 +	bitmap = kmalloc(len, GFP_NOFS);
  	if (!bitmap) {
  		test_msg("Couldn't allocate test bitmap\n");
  		return -ENOMEM;
* Unmerged path fs/btrfs/tests/extent-io-tests.c
