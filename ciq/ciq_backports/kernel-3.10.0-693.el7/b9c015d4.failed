i40e: mark the value passed to csum_replace_by_diff as __wsum

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit b9c015d421946fe3675fcb9cbacd0a37f1d3263c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b9c015d4.failed

Fix, or rather, avoid a sparse warning caused by the fact that
csum_replace_by_diff expects to receive a __wsum value. Since the
calculation appears to work, simply typecast the passed paylen value to
__wsum to avoid the warning.

This seems pretty fishy since __wsum was obviously annotated as
a separate type on purpose, so this throws the entire calculation into
question. Since it currently appears to behave as expected, the typecast
is probably safe.

Change-ID: I4fdc5cddd589abc16098176e8a61127e761488f4
	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit b9c015d421946fe3675fcb9cbacd0a37f1d3263c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40evf/i40e_txrx.c
diff --cc drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index d50a56ce7cf1,c91fcf43ccbc..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@@ -1611,10 -1628,9 +1611,16 @@@ static int i40e_tso(struct i40e_tx_buff
  			l4_offset = l4.hdr - skb->data;
  
  			/* remove payload length from outer checksum */
++<<<<<<< HEAD
 +			paylen = (__force u16)l4.udp->check;
 +			paylen += ntohs((__force __be16)1) *
 +					(u16)~(skb->len - l4_offset);
 +			l4.udp->check = ~csum_fold((__force __wsum)paylen);
++=======
+ 			paylen = skb->len - l4_offset;
+ 			csum_replace_by_diff(&l4.udp->check,
+ 					     (__force __wsum)htonl(paylen));
++>>>>>>> b9c015d42194 (i40e: mark the value passed to csum_replace_by_diff as __wsum)
  		}
  
  		/* reset pointers to inner headers */
@@@ -1634,9 -1650,8 +1640,14 @@@
  	l4_offset = l4.hdr - skb->data;
  
  	/* remove payload length from inner checksum */
++<<<<<<< HEAD
 +	paylen = (__force u16)l4.tcp->check;
 +	paylen += ntohs((__force __be16)1) * (u16)~(skb->len - l4_offset);
 +	l4.tcp->check = ~csum_fold((__force __wsum)paylen);
++=======
+ 	paylen = skb->len - l4_offset;
+ 	csum_replace_by_diff(&l4.tcp->check, (__force __wsum)htonl(paylen));
++>>>>>>> b9c015d42194 (i40e: mark the value passed to csum_replace_by_diff as __wsum)
  
  	/* compute length of segmentation header */
  	*hdr_len = (l4.tcp->doff * 4) + l4_offset;
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.c b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 9f4222c5213f..cf004cf88ada 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@ -2100,7 +2100,8 @@ static int i40e_tso(struct i40e_tx_buffer *first, u8 *hdr_len,
 
 			/* remove payload length from outer checksum */
 			paylen = skb->len - l4_offset;
-			csum_replace_by_diff(&l4.udp->check, htonl(paylen));
+			csum_replace_by_diff(&l4.udp->check,
+					     (__force __wsum)htonl(paylen));
 		}
 
 		/* reset pointers to inner headers */
@@ -2121,7 +2122,7 @@ static int i40e_tso(struct i40e_tx_buffer *first, u8 *hdr_len,
 
 	/* remove payload length from inner checksum */
 	paylen = skb->len - l4_offset;
-	csum_replace_by_diff(&l4.tcp->check, htonl(paylen));
+	csum_replace_by_diff(&l4.tcp->check, (__force __wsum)htonl(paylen));
 
 	/* compute length of segmentation header */
 	*hdr_len = (l4.tcp->doff * 4) + l4_offset;
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_txrx.c
