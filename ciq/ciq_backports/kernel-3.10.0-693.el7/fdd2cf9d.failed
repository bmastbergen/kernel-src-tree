crypto: ccp - change bitfield type to unsigned ints

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] ccp - change bitfield type to unsigned ints (Suravee Suthikulpanit) [1390820]
Rebuild_FUZZ: 91.49%
commit-author Gary R Hook <gary.hook@amd.com>
commit fdd2cf9db1e25a46a74c5802d18435171c92e7df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/fdd2cf9d.failed

Bit fields are not sensitive to endianness, so use
a transparent standard data type

	Signed-off-by: Gary R Hook <gary.hook@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit fdd2cf9db1e25a46a74c5802d18435171c92e7df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/ccp-dev.h
diff --cc drivers/crypto/ccp/ccp-dev.h
index 72bf1536b653,58e8d382e9ad..000000000000
--- a/drivers/crypto/ccp/ccp-dev.h
+++ b/drivers/crypto/ccp/ccp-dev.h
@@@ -253,8 -406,191 +253,191 @@@ struct ccp_device 
  	/* Suspend support */
  	unsigned int suspending;
  	wait_queue_head_t suspend_queue;
 -
 -	/* DMA caching attribute support */
 -	unsigned int axcache;
  };
  
++<<<<<<< HEAD
++=======
+ enum ccp_memtype {
+ 	CCP_MEMTYPE_SYSTEM = 0,
+ 	CCP_MEMTYPE_SB,
+ 	CCP_MEMTYPE_LOCAL,
+ 	CCP_MEMTYPE__LAST,
+ };
+ #define	CCP_MEMTYPE_LSB	CCP_MEMTYPE_KSB
+ 
+ struct ccp_dma_info {
+ 	dma_addr_t address;
+ 	unsigned int offset;
+ 	unsigned int length;
+ 	enum dma_data_direction dir;
+ };
+ 
+ struct ccp_dm_workarea {
+ 	struct device *dev;
+ 	struct dma_pool *dma_pool;
+ 	unsigned int length;
+ 
+ 	u8 *address;
+ 	struct ccp_dma_info dma;
+ };
+ 
+ struct ccp_sg_workarea {
+ 	struct scatterlist *sg;
+ 	int nents;
+ 
+ 	struct scatterlist *dma_sg;
+ 	struct device *dma_dev;
+ 	unsigned int dma_count;
+ 	enum dma_data_direction dma_dir;
+ 
+ 	unsigned int sg_used;
+ 
+ 	u64 bytes_left;
+ };
+ 
+ struct ccp_data {
+ 	struct ccp_sg_workarea sg_wa;
+ 	struct ccp_dm_workarea dm_wa;
+ };
+ 
+ struct ccp_mem {
+ 	enum ccp_memtype type;
+ 	union {
+ 		struct ccp_dma_info dma;
+ 		u32 sb;
+ 	} u;
+ };
+ 
+ struct ccp_aes_op {
+ 	enum ccp_aes_type type;
+ 	enum ccp_aes_mode mode;
+ 	enum ccp_aes_action action;
+ };
+ 
+ struct ccp_xts_aes_op {
+ 	enum ccp_aes_action action;
+ 	enum ccp_xts_aes_unit_size unit_size;
+ };
+ 
+ struct ccp_sha_op {
+ 	enum ccp_sha_type type;
+ 	u64 msg_bits;
+ };
+ 
+ struct ccp_rsa_op {
+ 	u32 mod_size;
+ 	u32 input_len;
+ };
+ 
+ struct ccp_passthru_op {
+ 	enum ccp_passthru_bitwise bit_mod;
+ 	enum ccp_passthru_byteswap byte_swap;
+ };
+ 
+ struct ccp_ecc_op {
+ 	enum ccp_ecc_function function;
+ };
+ 
+ struct ccp_op {
+ 	struct ccp_cmd_queue *cmd_q;
+ 
+ 	u32 jobid;
+ 	u32 ioc;
+ 	u32 soc;
+ 	u32 sb_key;
+ 	u32 sb_ctx;
+ 	u32 init;
+ 	u32 eom;
+ 
+ 	struct ccp_mem src;
+ 	struct ccp_mem dst;
+ 	struct ccp_mem exp;
+ 
+ 	union {
+ 		struct ccp_aes_op aes;
+ 		struct ccp_xts_aes_op xts;
+ 		struct ccp_sha_op sha;
+ 		struct ccp_rsa_op rsa;
+ 		struct ccp_passthru_op passthru;
+ 		struct ccp_ecc_op ecc;
+ 	} u;
+ 	struct ccp_mem key;
+ };
+ 
+ static inline u32 ccp_addr_lo(struct ccp_dma_info *info)
+ {
+ 	return lower_32_bits(info->address + info->offset);
+ }
+ 
+ static inline u32 ccp_addr_hi(struct ccp_dma_info *info)
+ {
+ 	return upper_32_bits(info->address + info->offset) & 0x0000ffff;
+ }
+ 
+ /**
+  * descriptor for version 5 CPP commands
+  * 8 32-bit words:
+  * word 0: function; engine; control bits
+  * word 1: length of source data
+  * word 2: low 32 bits of source pointer
+  * word 3: upper 16 bits of source pointer; source memory type
+  * word 4: low 32 bits of destination pointer
+  * word 5: upper 16 bits of destination pointer; destination memory type
+  * word 6: low 32 bits of key pointer
+  * word 7: upper 16 bits of key pointer; key memory type
+  */
+ struct dword0 {
+ 	unsigned int soc:1;
+ 	unsigned int ioc:1;
+ 	unsigned int rsvd1:1;
+ 	unsigned int init:1;
+ 	unsigned int eom:1;		/* AES/SHA only */
+ 	unsigned int function:15;
+ 	unsigned int engine:4;
+ 	unsigned int prot:1;
+ 	unsigned int rsvd2:7;
+ };
+ 
+ struct dword3 {
+ 	unsigned int  src_hi:16;
+ 	unsigned int  src_mem:2;
+ 	unsigned int  lsb_cxt_id:8;
+ 	unsigned int  rsvd1:5;
+ 	unsigned int  fixed:1;
+ };
+ 
+ union dword4 {
+ 	__le32 dst_lo;		/* NON-SHA	*/
+ 	__le32 sha_len_lo;	/* SHA		*/
+ };
+ 
+ union dword5 {
+ 	struct {
+ 		unsigned int  dst_hi:16;
+ 		unsigned int  dst_mem:2;
+ 		unsigned int  rsvd1:13;
+ 		unsigned int  fixed:1;
+ 	} fields;
+ 	__le32 sha_len_hi;
+ };
+ 
+ struct dword7 {
+ 	unsigned int  key_hi:16;
+ 	unsigned int  key_mem:2;
+ 	unsigned int  rsvd1:14;
+ };
+ 
+ struct ccp5_desc {
+ 	struct dword0 dw0;
+ 	__le32 length;
+ 	__le32 src_lo;
+ 	struct dword3 dw3;
+ 	union dword4 dw4;
+ 	union dword5 dw5;
+ 	__le32 key_lo;
+ 	struct dword7 dw7;
+ };
++>>>>>>> fdd2cf9db1e2 (crypto: ccp - change bitfield type to unsigned ints)
  
  int ccp_pci_init(void);
  void ccp_pci_exit(void);
* Unmerged path drivers/crypto/ccp/ccp-dev.h
