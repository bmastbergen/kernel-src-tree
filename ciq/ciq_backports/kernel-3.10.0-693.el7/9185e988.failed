tools/power turbostat: work around RC6 counter wrap

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: work around RC6 counter wrap (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 93.75%
commit-author Len Brown <len.brown@intel.com>
commit 9185e988e9d5bb70b690362e84bb2e4a9d71f2c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9185e988.failed

Sometimes the rc6 sysfs counter spontaneously resets,
causing turbostat prints a very large number
as it tries to calcuate % = 100 * (old - new) / interval

When we see (old > new), print ***.**% instead
of a bogus huge number.

Note that this detection is not fool-proof, as the counter
could reset several times and still result in new > old.

	Signed-off-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 9185e988e9d5bb70b690362e84bb2e4a9d71f2c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index 12f3b97f602a,d2ae87d148ed..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -176,6 -189,8 +176,11 @@@ struct pkg_data 
  	unsigned long long pkg_any_core_c0;
  	unsigned long long pkg_any_gfxe_c0;
  	unsigned long long pkg_both_core_gfxe_c0;
++<<<<<<< HEAD
++=======
+ 	long long gfx_rc6_ms;
+ 	unsigned int gfx_mhz;
++>>>>>>> 9185e988e9d5 (tools/power turbostat: work around RC6 counter wrap)
  	unsigned int package_id;
  	unsigned int energy_pkg;	/* MSR_PKG_ENERGY_STATUS */
  	unsigned int energy_dram;	/* MSR_DRAM_ENERGY_STATUS */
@@@ -572,6 -622,20 +577,23 @@@ int format_counters(struct thread_data 
  	if (do_ptm)
  		outp += sprintf(outp, "%8d", p->pkg_temp_c);
  
++<<<<<<< HEAD
++=======
+ 	/* GFXrc6 */
+ 	if (do_gfx_rc6_ms) {
+ 		if (p->gfx_rc6_ms == -1) {	/* detect counter reset */
+ 			outp += sprintf(outp, "  ***.**");
+ 		} else {
+ 			outp += sprintf(outp, "%8.2f",
+ 				p->gfx_rc6_ms / 10.0 / interval_float);
+ 		}
+ 	}
+ 
+ 	/* GFXMHz */
+ 	if (do_gfx_mhz)
+ 		outp += sprintf(outp, "%8d", p->gfx_mhz);
+ 
++>>>>>>> 9185e988e9d5 (tools/power turbostat: work around RC6 counter wrap)
  	/* Totl%C0, Any%C0 GFX%C0 CPUGFX% */
  	if (do_skl_residency) {
  		outp += sprintf(outp, "%8.2f", 100.0 * p->pkg_wtd_core_c0/t->tsc);
@@@ -701,6 -774,14 +723,17 @@@ delta_package(struct pkg_data *new, str
  	old->pc10 = new->pc10 - old->pc10;
  	old->pkg_temp_c = new->pkg_temp_c;
  
++<<<<<<< HEAD
++=======
+ 	/* flag an error when rc6 counter resets/wraps */
+ 	if (old->gfx_rc6_ms >  new->gfx_rc6_ms)
+ 		old->gfx_rc6_ms = -1;
+ 	else
+ 		old->gfx_rc6_ms = new->gfx_rc6_ms - old->gfx_rc6_ms;
+ 
+ 	old->gfx_mhz = new->gfx_mhz;
+ 
++>>>>>>> 9185e988e9d5 (tools/power turbostat: work around RC6 counter wrap)
  	DELTA_WRAP32(new->energy_pkg, old->energy_pkg);
  	DELTA_WRAP32(new->energy_cores, old->energy_cores);
  	DELTA_WRAP32(new->energy_gfx, old->energy_gfx);
* Unmerged path tools/power/x86/turbostat/turbostat.c
