ACPICA: Add support to allow host OS to redefine individual OSL prototypes.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [acpi] acpica: Add support to allow host OS to redefine individual OSL prototypes (Prarit Bhargava) [1432953 1383823]
Rebuild_FUZZ: 99.33%
commit-author Lv Zheng <lv.zheng@intel.com>
commit 7e94632fc530d990de3110e6c53425d6e28dd238
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7e94632f.failed

This change enables the host OS to redefine OSL prototypes found in the
acpiosxf.h file. This allows the host OS to implement OSL interfaces with
a macro or inlined function. Further, it allows the host OS to add any
additional required modifiers such as __iomem, __init, __exit, etc.,
as necessary on a per-interface basis. Enables maximum flexibility
for the OSL interfaces. Lv Zheng.

	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 7e94632fc530d990de3110e6c53425d6e28dd238)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/acpi/acpiosxf.h
diff --cc include/acpi/acpiosxf.h
index 96eeb3c4b600,55165fcd77d7..000000000000
--- a/include/acpi/acpiosxf.h
+++ b/include/acpi/acpiosxf.h
@@@ -201,12 -265,22 +265,25 @@@ acpi_thread_id acpi_os_get_thread_id(vo
  acpi_status
  acpi_os_execute(acpi_execute_type type,
  		acpi_osd_exec_callback function, void *context);
+ #endif
+ 
++<<<<<<< HEAD
++=======
+ acpi_status
+ acpi_os_hotplug_execute(acpi_osd_exec_callback function, void *context);
  
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_wait_events_complete
++>>>>>>> 7e94632fc530 (ACPICA: Add support to allow host OS to redefine individual OSL prototypes.)
  void acpi_os_wait_events_complete(void);
+ #endif
  
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_sleep
  void acpi_os_sleep(u64 milliseconds);
+ #endif
  
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_stall
  void acpi_os_stall(u32 microseconds);
+ #endif
  
  /*
   * Platform and hardware-independent I/O interfaces
@@@ -271,39 -403,12 +406,43 @@@ void *acpi_os_open_directory(char *path
  #define REQUEST_FILE_ONLY                   0
  #define REQUEST_DIR_ONLY                    1
  
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_next_filename
  char *acpi_os_get_next_filename(void *dir_handle);
+ #endif
  
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_close_directory
  void acpi_os_close_directory(void *dir_handle);
+ #endif
  
 +/*
 + * File I/O and related support
 + */
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_open_file
 +ACPI_FILE acpi_os_open_file(const char *path, u8 modes);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_close_file
 +void acpi_os_close_file(ACPI_FILE file);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_read_file
 +int
 +acpi_os_read_file(ACPI_FILE file,
 +		  void *buffer, acpi_size size, acpi_size count);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_write_file
 +int
 +acpi_os_write_file(ACPI_FILE file,
 +		   void *buffer, acpi_size size, acpi_size count);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_file_offset
 +long acpi_os_get_file_offset(ACPI_FILE file);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_set_file_offset
 +acpi_status acpi_os_set_file_offset(ACPI_FILE file, long offset, u8 from);
 +#endif
 +
  #endif				/* __ACPIOSXF_H__ */
* Unmerged path include/acpi/acpiosxf.h
diff --git a/include/acpi/platform/aclinux.h b/include/acpi/platform/aclinux.h
index 7bfab5771886..27a193732942 100644
--- a/include/acpi/platform/aclinux.h
+++ b/include/acpi/platform/aclinux.h
@@ -194,6 +194,7 @@ static inline void acpi_os_free(void *a)
 	}							\
 	lock ? AE_OK : AE_NO_MEMORY;				\
 })
+#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_create_lock
 
 #ifdef EXPORT_ACPI_INTERFACES
 #include <linux/export.h>
