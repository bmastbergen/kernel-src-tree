scsi: be2iscsi: Fix use of invalidate command table req

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] be2iscsi: Fix use of invalidate command table req (Maurizio Lombardi) [1382263]
Rebuild_FUZZ: 94.23%
commit-author Jitendra Bhivare <jitendra.bhivare@broadcom.com>
commit f3505013779646704f81b41c011ab089b26c3f3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f3505013.failed

Remove shared structure inv_tbl in phba for all sessions to post
invalidation IOCTL.
Always allocate and then free the table after use in reset handler.
Abort handler needs just one instance so define it on stack.
Add checks for BE_INVLDT_CMD_TBL_SZ to not exceed invalidation
command table size in IOCTL.

	Signed-off-by: Jitendra Bhivare <jitendra.bhivare@broadcom.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit f3505013779646704f81b41c011ab089b26c3f3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/be2iscsi/be_main.c
#	drivers/scsi/be2iscsi/be_main.h
#	drivers/scsi/be2iscsi/be_mgmt.h
diff --cc drivers/scsi/be2iscsi/be_main.c
index ff265d59e294,3811a0d230f2..000000000000
--- a/drivers/scsi/be2iscsi/be_main.c
+++ b/drivers/scsi/be2iscsi/be_main.c
@@@ -244,14 -243,10 +244,18 @@@ static int beiscsi_eh_abort(struct scsi
  	aborted_io_task = aborted_task->dd_data;
  	if (!aborted_io_task->scsi_cmnd) {
  		/* raced or invalid command */
 -		spin_unlock_bh(&session->frwd_lock);
 +		spin_unlock_bh(&session->lock);
  		return SUCCESS;
  	}
++<<<<<<< HEAD
 +	spin_unlock_bh(&session->lock);
 +	/* Invalidate WRB Posted for this Task */
 +	AMAP_SET_BITS(struct amap_iscsi_wrb, invld,
 +		      aborted_io_task->pwrb_handle->pwrb,
 +		      1);
++=======
+ 	spin_unlock_bh(&session->frwd_lock);
++>>>>>>> f35050137796 (scsi: be2iscsi: Fix use of invalidate command table req)
  
  	conn = aborted_task->conn;
  	beiscsi_conn = conn->dd_data;
@@@ -338,17 -346,23 +355,28 @@@ static int beiscsi_eh_device_reset(stru
  			      abrt_io_task->pwrb_handle->pwrb,
  			      1);
  
- 		inv_tbl->cid = cid;
- 		inv_tbl->icd = abrt_io_task->psgl_handle->sgl_index;
- 		num_invalidate++;
- 		inv_tbl++;
+ 		inv_tbl[nents].cid = cid;
+ 		inv_tbl[nents].icd = abrt_io_task->psgl_handle->sgl_index;
+ 		nents++;
  	}
++<<<<<<< HEAD
 +	spin_unlock_bh(&session->lock);
 +	inv_tbl = phba->inv_tbl;
++=======
+ 	spin_unlock_bh(&session->frwd_lock);
++>>>>>>> f35050137796 (scsi: be2iscsi: Fix use of invalidate command table req)
+ 
+ 	if (more) {
+ 		beiscsi_log(phba, KERN_ERR, BEISCSI_LOG_EH,
+ 			    "BM_%d : number of cmds exceeds size of invalidation table\n");
+ 		kfree(inv_tbl);
+ 		return FAILED;
+ 	}
  
- 	nonemb_cmd.va = pci_alloc_consistent(phba->ctrl.pdev,
- 				sizeof(struct invalidate_commands_params_in),
- 				&nonemb_cmd.dma);
+ 	nonemb_cmd.size = sizeof(union be_invldt_cmds_params);
+ 	nonemb_cmd.va = pci_zalloc_consistent(phba->ctrl.pdev,
+ 					      nonemb_cmd.size,
+ 					      &nonemb_cmd.dma);
  	if (nonemb_cmd.va == NULL) {
  		beiscsi_log(phba, KERN_ERR, BEISCSI_LOG_EH,
  			    "BM_%d : Failed to allocate memory for"
diff --cc drivers/scsi/be2iscsi/be_main.h
index 9df49b3c0177,f869e3734c02..000000000000
--- a/drivers/scsi/be2iscsi/be_main.h
+++ b/drivers/scsi/be2iscsi/be_main.h
@@@ -434,8 -429,6 +433,11 @@@ struct beiscsi_hba 
  	struct be_ctrl_info ctrl;
  	unsigned int generation;
  	unsigned int interface_handle;
++<<<<<<< HEAD
 +	struct mgmt_session_info boot_sess;
 +	struct invalidate_command_table inv_tbl[128];
++=======
++>>>>>>> f35050137796 (scsi: be2iscsi: Fix use of invalidate command table req)
  
  	struct be_aic_obj aic_obj[MAX_CPUS];
  	unsigned int attr_log_enable;
diff --cc drivers/scsi/be2iscsi/be_mgmt.h
index 3ae2c46961a3,6e19281b9d57..000000000000
--- a/drivers/scsi/be2iscsi/be_mgmt.h
+++ b/drivers/scsi/be2iscsi/be_mgmt.h
@@@ -266,10 -258,10 +259,17 @@@ struct beiscsi_endpoint 
  	u16 cid_vld;
  };
  
++<<<<<<< HEAD
 +int mgmt_get_fw_config(struct be_ctrl_info *ctrl,
 +				 struct beiscsi_hba *phba);
 +int mgmt_get_port_name(struct be_ctrl_info *ctrl,
 +		       struct beiscsi_hba *phba);
++=======
+ unsigned int mgmt_invalidate_icds(struct beiscsi_hba *phba,
+ 				struct invldt_cmd_tbl *inv_tbl,
+ 				unsigned int num_invalidate, unsigned int cid,
+ 				struct be_dma_mem *nonemb_cmd);
++>>>>>>> f35050137796 (scsi: be2iscsi: Fix use of invalidate command table req)
  
  unsigned int mgmt_invalidate_connection(struct beiscsi_hba *phba,
  					 struct beiscsi_endpoint *beiscsi_ep,
* Unmerged path drivers/scsi/be2iscsi/be_main.c
* Unmerged path drivers/scsi/be2iscsi/be_main.h
diff --git a/drivers/scsi/be2iscsi/be_mgmt.c b/drivers/scsi/be2iscsi/be_mgmt.c
index 794ed5647611..995547f6ccda 100644
--- a/drivers/scsi/be2iscsi/be_mgmt.c
+++ b/drivers/scsi/be2iscsi/be_mgmt.c
@@ -674,7 +674,7 @@ int mgmt_epfw_cleanup(struct beiscsi_hba *phba, unsigned short ulp_num)
 }
 
 unsigned int  mgmt_invalidate_icds(struct beiscsi_hba *phba,
-				struct invalidate_command_table *inv_tbl,
+				struct invldt_cmd_tbl *inv_tbl,
 				unsigned int num_invalidate, unsigned int cid,
 				struct be_dma_mem *nonemb_cmd)
 
@@ -682,9 +682,12 @@ unsigned int  mgmt_invalidate_icds(struct beiscsi_hba *phba,
 	struct be_ctrl_info *ctrl = &phba->ctrl;
 	struct be_mcc_wrb *wrb;
 	struct be_sge *sge;
-	struct invalidate_commands_params_in *req;
+	struct invldt_cmds_params_in *req;
 	unsigned int i, tag;
 
+	if (num_invalidate > BE_INVLDT_CMD_TBL_SZ)
+		return 0;
+
 	mutex_lock(&ctrl->mbox_lock);
 	wrb = alloc_mcc_wrb(phba, &tag);
 	if (!wrb) {
@@ -703,10 +706,9 @@ unsigned int  mgmt_invalidate_icds(struct beiscsi_hba *phba,
 	req->ref_handle = 0;
 	req->cleanup_type = CMD_ISCSI_COMMAND_INVALIDATE;
 	for (i = 0; i < num_invalidate; i++) {
-		req->table[i].icd = inv_tbl->icd;
-		req->table[i].cid = inv_tbl->cid;
+		req->table[i].icd = inv_tbl[i].icd;
+		req->table[i].cid = inv_tbl[i].cid;
 		req->icd_count++;
-		inv_tbl++;
 	}
 	sge->pa_hi = cpu_to_le32(upper_32_bits(nonemb_cmd->dma));
 	sge->pa_lo = cpu_to_le32(nonemb_cmd->dma & 0xFFFFFFFF);
* Unmerged path drivers/scsi/be2iscsi/be_mgmt.h
