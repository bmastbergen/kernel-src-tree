perf evsel: Introduce fprintf_callchain() method out of fprintf_sym()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ea4539652eccc87b14fbcbc90467ebcb87f02ddb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ea453965.failed

In 'perf trace' we're just interested in printing callchains, and we
don't want to use the symbol_conf.use_callchain, so move the callchain
part to a new method.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Milian Wolff <milian.wolff@kdab.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-kcn3romzivcpxb3u75s9nz33@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ea4539652eccc87b14fbcbc90467ebcb87f02ddb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/util/session.c
diff --cc tools/perf/builtin-trace.c
index 6a499ab19e51,63a3cc9b717c..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2201,6 -2191,21 +2201,24 @@@ signed_print
  		goto signed_print;
  
  	fputc('\n', trace->output);
++<<<<<<< HEAD
++=======
+ 
+ 	if (sample->callchain) {
+ 		struct addr_location al;
+ 		/* TODO: user-configurable print_opts */
+ 		const unsigned int print_opts = PRINT_IP_OPT_SYM
+ 					      | PRINT_IP_OPT_DSO;
+ 
+ 		if (machine__resolve(trace->host, &al, sample) < 0) {
+ 			pr_err("problem processing %d event, skipping it.\n",
+ 			       event->header.type);
+ 			goto out_put;
+ 		}
+ 		perf_evsel__fprintf_callchain(evsel, sample, &al, 38, print_opts,
+ 					      scripting_max_stack, trace->output);
+ 	}
++>>>>>>> ea4539652ecc (perf evsel: Introduce fprintf_callchain() method out of fprintf_sym())
  out:
  	ttrace->entry_pending = false;
  	err = 0;
diff --cc tools/perf/util/session.c
index 62b6d4051b99,e384b651a3e8..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -1953,11 -1953,12 +1953,18 @@@ struct perf_evsel *perf_session__find_f
  	return NULL;
  }
  
++<<<<<<< HEAD
 +void perf_evsel__print_ip(struct perf_evsel *evsel, struct perf_sample *sample,
 +			  struct addr_location *al, int left_alignment,
 +			  unsigned int print_opts, unsigned int stack_depth,
 +			  FILE *fp)
++=======
+ int perf_evsel__fprintf_callchain(struct perf_evsel *evsel, struct perf_sample *sample,
+ 				  struct addr_location *al, int left_alignment,
+ 				  unsigned int print_opts, unsigned int stack_depth,
+ 				  FILE *fp)
++>>>>>>> ea4539652ecc (perf evsel: Introduce fprintf_callchain() method out of fprintf_sym())
  {
 -	int printed = 0;
  	struct callchain_cursor_node *node;
  	int print_ip = print_opts & PRINT_IP_OPT_IP;
  	int print_sym = print_opts & PRINT_IP_OPT_SYM;
@@@ -2029,23 -2027,38 +2036,47 @@@
  next:
  			callchain_cursor_advance(&callchain_cursor);
  		}
+ 	}
  
++<<<<<<< HEAD
 +	} else {
 +		if (al->sym && al->sym->ignore)
 +			return;
 +
 +		fprintf(fp, "%-*.*s", left_alignment, left_alignment, " ");
++=======
+ 	return printed;
+ }
+ 
+ int perf_evsel__fprintf_sym(struct perf_evsel *evsel, struct perf_sample *sample,
+ 			    struct addr_location *al, int left_alignment,
+ 			    unsigned int print_opts, unsigned int stack_depth,
+ 			    FILE *fp)
+ {
+ 	int printed = 0;
+ 	int print_ip = print_opts & PRINT_IP_OPT_IP;
+ 	int print_sym = print_opts & PRINT_IP_OPT_SYM;
+ 	int print_dso = print_opts & PRINT_IP_OPT_DSO;
+ 	int print_symoffset = print_opts & PRINT_IP_OPT_SYMOFFSET;
+ 	int print_srcline = print_opts & PRINT_IP_OPT_SRCLINE;
+ 
+ 	if (symbol_conf.use_callchain && sample->callchain) {
+ 		printed += perf_evsel__fprintf_callchain(evsel, sample, al, left_alignment,
+ 							 print_opts, stack_depth, fp);
+ 	} else if (!(al->sym && al->sym->ignore)) {
+ 		printed += fprintf(fp, "%-*.*s", left_alignment, left_alignment, " ");
++>>>>>>> ea4539652ecc (perf evsel: Introduce fprintf_callchain() method out of fprintf_sym())
  
  		if (print_ip)
 -			printed += fprintf(fp, "%16" PRIx64, sample->ip);
 +			fprintf(fp, "%16" PRIx64, sample->ip);
  
  		if (print_sym) {
 -			printed += fprintf(fp, " ");
 +			fprintf(fp, " ");
  			if (print_symoffset)
 -				printed += symbol__fprintf_symname_offs(al->sym, al, fp);
 +				symbol__fprintf_symname_offs(al->sym, al,
 +							     fp);
  			else
 -				printed += symbol__fprintf_symname(al->sym, fp);
 +				symbol__fprintf_symname(al->sym, fp);
  		}
  
  		if (print_dso) {
* Unmerged path tools/perf/builtin-trace.c
diff --git a/tools/perf/util/evsel.h b/tools/perf/util/evsel.h
index 8b108cb05d6f..49d39d0987a1 100644
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@ -372,6 +372,12 @@ struct perf_attr_details {
 int perf_evsel__fprintf(struct perf_evsel *evsel,
 			struct perf_attr_details *details, FILE *fp);
 
+int perf_evsel__fprintf_callchain(struct perf_evsel *evsel,
+				  struct perf_sample *sample,
+				  struct addr_location *al, int left_alignment,
+				  unsigned int print_opts,
+				  unsigned int stack_depth, FILE *fp);
+
 bool perf_evsel__fallback(struct perf_evsel *evsel, int err,
 			  char *msg, size_t msgsize);
 int perf_evsel__open_strerror(struct perf_evsel *evsel, struct target *target,
* Unmerged path tools/perf/util/session.c
