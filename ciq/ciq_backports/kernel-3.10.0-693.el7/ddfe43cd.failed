x86/amd_nb: Add SMN and Indirect Data Fabric access for AMD Fam17h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] amd_nb: Add SMN and Indirect Data Fabric access for AMD Fam17h (Suravee Suthikulpanit) [1303712]
Rebuild_FUZZ: 96.88%
commit-author Yazen Ghannam <Yazen.Ghannam@amd.com>
commit ddfe43cdc0da3189feac4bb9f0f818bef6d6e56e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ddfe43cd.failed

Some devices on Fam17h can only be accessed through the System Management
Network (SMN). The SMN is accessed by a pair of index/data registers in PCI
config space. Add a pair of functions to read from and write to the SMN.

The Data Fabric on Fam17h allows multiple devices to use the same register
space. The registers of a specific device are accessed indirectly using the
device's DF InstanceId. Currently, we only need to read from these devices,
so only define a read function for now.

	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
	Cc: linux-edac <linux-edac@vger.kernel.org>
	Cc: x86-ml <x86@kernel.org>
Link: http://lkml.kernel.org/r/1478812257-5424-5-git-send-email-Yazen.Ghannam@amd.com
[ Boris: make __amd_smn_rw() even more compact. ]
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit ddfe43cdc0da3189feac4bb9f0f818bef6d6e56e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/amd_nb.c
diff --cc arch/x86/kernel/amd_nb.c
index 15d1102b9e99,458da8509b75..000000000000
--- a/arch/x86/kernel/amd_nb.c
+++ b/arch/x86/kernel/amd_nb.c
@@@ -13,8 -13,20 +13,23 @@@
  #include <linux/spinlock.h>
  #include <asm/amd_nb.h>
  
++<<<<<<< HEAD
++=======
+ #define PCI_DEVICE_ID_AMD_17H_ROOT	0x1450
+ #define PCI_DEVICE_ID_AMD_17H_DF_F3	0x1463
+ #define PCI_DEVICE_ID_AMD_17H_DF_F4	0x1464
+ 
+ /* Protect the PCI config register pairs used for SMN and DF indirect access. */
+ static DEFINE_MUTEX(smn_mutex);
+ 
++>>>>>>> ddfe43cdc0da (x86/amd_nb: Add SMN and Indirect Data Fabric access for AMD Fam17h)
  static u32 *flush_words;
  
+ static const struct pci_device_id amd_root_ids[] = {
+ 	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_17H_ROOT) },
+ 	{}
+ };
+ 
  const struct pci_device_id amd_nb_misc_ids[] = {
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_K8_NB_MISC) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_10H_NB_MISC) },
@@@ -60,9 -186,9 +168,9 @@@ int amd_cache_northbridges(void
  {
  	u16 i = 0;
  	struct amd_northbridge *nb;
- 	struct pci_dev *misc, *link;
+ 	struct pci_dev *root, *misc, *link;
  
 -	if (amd_northbridges.num)
 +	if (amd_nb_num())
  		return 0;
  
  	misc = NULL;
@@@ -79,8 -205,10 +187,15 @@@
  	amd_northbridges.nb = nb;
  	amd_northbridges.num = i;
  
++<<<<<<< HEAD
 +	link = misc = NULL;
 +	for (i = 0; i != amd_nb_num(); i++) {
++=======
+ 	link = misc = root = NULL;
+ 	for (i = 0; i != amd_northbridges.num; i++) {
+ 		node_to_amd_nb(i)->root = root =
+ 			next_northbridge(root, amd_root_ids);
++>>>>>>> ddfe43cdc0da (x86/amd_nb: Add SMN and Indirect Data Fabric access for AMD Fam17h)
  		node_to_amd_nb(i)->misc = misc =
  			next_northbridge(misc, amd_nb_misc_ids);
  		node_to_amd_nb(i)->link = link =
diff --git a/arch/x86/include/asm/amd_nb.h b/arch/x86/include/asm/amd_nb.h
index 68d2b9f95165..ea6e82503b6d 100644
--- a/arch/x86/include/asm/amd_nb.h
+++ b/arch/x86/include/asm/amd_nb.h
@@ -21,6 +21,10 @@ extern int amd_numa_init(void);
 extern int amd_get_subcaches(int);
 extern int amd_set_subcaches(int, int);
 
+extern int amd_smn_read(u16 node, u32 address, u32 *value);
+extern int amd_smn_write(u16 node, u32 address, u32 value);
+extern int amd_df_indirect_read(u16 node, u8 func, u16 reg, u8 instance_id, u32 *lo);
+
 struct amd_l3_cache {
 	unsigned indices;
 	u8	 subcaches[4];
@@ -55,6 +59,7 @@ struct threshold_bank {
 };
 
 struct amd_northbridge {
+	struct pci_dev *root;
 	struct pci_dev *misc;
 	struct pci_dev *link;
 	struct amd_l3_cache l3_cache;
* Unmerged path arch/x86/kernel/amd_nb.c
