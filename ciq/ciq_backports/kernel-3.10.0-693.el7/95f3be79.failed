perf/x86/intel/uncore: Add enable_box for client MSR uncore

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Kan Liang <kan.liang@intel.com>
commit 95f3be798472f63b495ca4712af005ea5ac7aa47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/95f3be79.failed

There are bug reports about miscounting uncore counters on some
client machines like Sandybridge, Broadwell and Skylake. It is
very likely to be observed on idle systems.

This issue is caused by a hardware issue. PERF_GLOBAL_CTL could be
cleared after Package C7, and nothing will be count.
The related errata (HSD 158) could be found in:

  www.intel.com/content/dam/www/public/us/en/documents/specification-updates/4th-gen-core-family-desktop-specification-update.pdf

This patch tries to work around this issue by re-enabling PERF_GLOBAL_CTL
in ->enable_box(). The workaround does not cover all cases. It helps for new
events after returning from C7. But it cannot prevent C7, it will still
miscount if a counter is already active.

There is no drawback in leaving it enabled, so it does not need
disable_box() here.

	Signed-off-by: Kan Liang <kan.liang@intel.com>
	Cc: <stable@vger.kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
Link: http://lkml.kernel.org/r/1470925874-59943-1-git-send-email-kan.liang@intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 95f3be798472f63b495ca4712af005ea5ac7aa47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/uncore_snb.c
diff --cc arch/x86/events/intel/uncore_snb.c
index 99408ef660a0,9d35ec0cb8fc..000000000000
--- a/arch/x86/events/intel/uncore_snb.c
+++ b/arch/x86/events/intel/uncore_snb.c
@@@ -179,6 -191,67 +186,70 @@@ void snb_uncore_cpu_init(void
  		snb_uncore_cbox.num_boxes = boot_cpu_data.x86_max_cores;
  }
  
++<<<<<<< HEAD
++=======
+ static void skl_uncore_msr_init_box(struct intel_uncore_box *box)
+ {
+ 	if (box->pmu->pmu_idx == 0) {
+ 		wrmsrl(SKL_UNC_PERF_GLOBAL_CTL,
+ 			SNB_UNC_GLOBAL_CTL_EN | SKL_UNC_GLOBAL_CTL_CORE_ALL);
+ 	}
+ }
+ 
+ static void skl_uncore_msr_enable_box(struct intel_uncore_box *box)
+ {
+ 	wrmsrl(SKL_UNC_PERF_GLOBAL_CTL,
+ 		SNB_UNC_GLOBAL_CTL_EN | SKL_UNC_GLOBAL_CTL_CORE_ALL);
+ }
+ 
+ static void skl_uncore_msr_exit_box(struct intel_uncore_box *box)
+ {
+ 	if (box->pmu->pmu_idx == 0)
+ 		wrmsrl(SKL_UNC_PERF_GLOBAL_CTL, 0);
+ }
+ 
+ static struct intel_uncore_ops skl_uncore_msr_ops = {
+ 	.init_box	= skl_uncore_msr_init_box,
+ 	.enable_box	= skl_uncore_msr_enable_box,
+ 	.exit_box	= skl_uncore_msr_exit_box,
+ 	.disable_event	= snb_uncore_msr_disable_event,
+ 	.enable_event	= snb_uncore_msr_enable_event,
+ 	.read_counter	= uncore_msr_read_counter,
+ };
+ 
+ static struct intel_uncore_type skl_uncore_cbox = {
+ 	.name		= "cbox",
+ 	.num_counters   = 4,
+ 	.num_boxes	= 5,
+ 	.perf_ctr_bits	= 44,
+ 	.fixed_ctr_bits	= 48,
+ 	.perf_ctr	= SNB_UNC_CBO_0_PER_CTR0,
+ 	.event_ctl	= SNB_UNC_CBO_0_PERFEVTSEL0,
+ 	.fixed_ctr	= SNB_UNC_FIXED_CTR,
+ 	.fixed_ctl	= SNB_UNC_FIXED_CTR_CTRL,
+ 	.single_fixed	= 1,
+ 	.event_mask	= SNB_UNC_RAW_EVENT_MASK,
+ 	.msr_offset	= SNB_UNC_CBO_MSR_OFFSET,
+ 	.ops		= &skl_uncore_msr_ops,
+ 	.format_group	= &snb_uncore_format_group,
+ 	.event_descs	= snb_uncore_events,
+ };
+ 
+ static struct intel_uncore_type *skl_msr_uncores[] = {
+ 	&skl_uncore_cbox,
+ 	&snb_uncore_arb,
+ 	NULL,
+ };
+ 
+ void skl_uncore_cpu_init(void)
+ {
+ 	uncore_msr_uncores = skl_msr_uncores;
+ 	if (skl_uncore_cbox.num_boxes > boot_cpu_data.x86_max_cores)
+ 		skl_uncore_cbox.num_boxes = boot_cpu_data.x86_max_cores;
+ 	snb_uncore_arb.ops = &skl_uncore_msr_ops;
+ }
+ 
++>>>>>>> 95f3be798472 (perf/x86/intel/uncore: Add enable_box for client MSR uncore)
  enum {
  	SNB_PCI_UNCORE_IMC,
  };
* Unmerged path arch/x86/events/intel/uncore_snb.c
