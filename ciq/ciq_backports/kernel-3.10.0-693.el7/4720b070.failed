SUNRPC: Micro optimisation for svc_data_ready

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 4720b0703a0dfcd6da6a308ea71aaacc55beade7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4720b070.failed

Don't call svc_xprt_enqueue() if the XPT_DATA flag is already set.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit 4720b0703a0dfcd6da6a308ea71aaacc55beade7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/svcsock.c
diff --cc net/sunrpc/svcsock.c
index a3ebe6c6b21b,338d6fe1103d..000000000000
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@@ -427,20 -400,18 +427,26 @@@ static bool sunrpc_waitqueue_active(wai
  /*
   * INET callback when data has been received on the socket.
   */
 -static void svc_data_ready(struct sock *sk)
 +static void svc_udp_data_ready(struct sock *sk, int count)
  {
  	struct svc_sock	*svsk = (struct svc_sock *)sk->sk_user_data;
 +	wait_queue_head_t *wq = sk_sleep(sk);
  
  	if (svsk) {
 -		dprintk("svc: socket %p(inet %p), busy=%d\n",
 -			svsk, sk,
 +		dprintk("svc: socket %p(inet %p), count=%d, busy=%d\n",
 +			svsk, sk, count,
  			test_bit(XPT_BUSY, &svsk->sk_xprt.xpt_flags));
++<<<<<<< HEAD
 +		set_bit(XPT_DATA, &svsk->sk_xprt.xpt_flags);
 +		svc_xprt_enqueue(&svsk->sk_xprt);
++=======
+ 		svsk->sk_odata(sk);
+ 		if (!test_and_set_bit(XPT_DATA, &svsk->sk_xprt.xpt_flags))
+ 			svc_xprt_enqueue(&svsk->sk_xprt);
++>>>>>>> 4720b0703a0d (SUNRPC: Micro optimisation for svc_data_ready)
  	}
 +	if (sunrpc_waitqueue_active(wq))
 +		wake_up_interruptible(wq);
  }
  
  /*
* Unmerged path net/sunrpc/svcsock.c
