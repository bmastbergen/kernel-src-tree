PCI: hv: Use zero-length array in struct pci_packet

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [pci] hv: Use zero-length array in struct pci_packet (Cathy Avery) [1364313]
Rebuild_FUZZ: 94.85%
commit-author Dexuan Cui <decui@microsoft.com>
commit 0c6045d8c0eff0f7784f310407ccad44f622aa40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0c6045d8.failed

Use zero-length array in struct pci_packet and rename struct pci_message's
field "message_type" to "type".  This makes the code more readable.

No functionality change.

	Signed-off-by: Dexuan Cui <decui@microsoft.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: KY Srinivasan <kys@microsoft.com>
CC: Jake Oshins <jakeo@microsoft.com>
CC: Haiyang Zhang <haiyangz@microsoft.com>
CC: Vitaly Kuznetsov <vkuznets@redhat.com>
(cherry picked from commit 0c6045d8c0eff0f7784f310407ccad44f622aa40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index 8104dd1b45dc,6fa40f111962..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -683,17 -688,65 +684,78 @@@ static struct pci_ops hv_pcifront_ops 
  	.write = hv_pcifront_write_config,
  };
  
 +static inline struct pci_dev *msi_desc_to_pci_dev(struct msi_desc *desc)
 +{
 +        return desc->dev;
 +}
 +
 +struct irq_cfg *irqd_cfg(struct irq_data *irq_data)
 +{
 +        return irq_data->chip_data;
 +}
 +
  /* Interrupt management hooks */
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
++=======
+ static void hv_int_desc_free(struct hv_pci_dev *hpdev,
+ 			     struct tran_int_desc *int_desc)
+ {
+ 	struct pci_delete_interrupt *int_pkt;
+ 	struct {
+ 		struct pci_packet pkt;
+ 		u8 buffer[sizeof(struct pci_delete_interrupt)];
+ 	} ctxt;
+ 
+ 	memset(&ctxt, 0, sizeof(ctxt));
+ 	int_pkt = (struct pci_delete_interrupt *)&ctxt.pkt.message;
+ 	int_pkt->message_type.type =
+ 		PCI_DELETE_INTERRUPT_MESSAGE;
+ 	int_pkt->wslot.slot = hpdev->desc.win_slot.slot;
+ 	int_pkt->int_desc = *int_desc;
+ 	vmbus_sendpacket(hpdev->hbus->hdev->channel, int_pkt, sizeof(*int_pkt),
+ 			 (unsigned long)&ctxt.pkt, VM_PKT_DATA_INBAND, 0);
+ 	kfree(int_desc);
+ }
+ 
+ /**
+  * hv_msi_free() - Free the MSI.
+  * @domain:	The interrupt domain pointer
+  * @info:	Extra MSI-related context
+  * @irq:	Identifies the IRQ.
+  *
+  * The Hyper-V parent partition and hypervisor are tracking the
+  * messages that are in use, keeping the interrupt redirection
+  * table up to date.  This callback sends a message that frees
+  * the IRT entry and related tracking nonsense.
+  */
+ static void hv_msi_free(struct irq_domain *domain, struct msi_domain_info *info,
+ 			unsigned int irq)
+ {
+ 	struct hv_pcibus_device *hbus;
+ 	struct hv_pci_dev *hpdev;
+ 	struct pci_dev *pdev;
+ 	struct tran_int_desc *int_desc;
+ 	struct irq_data *irq_data = irq_domain_get_irq_data(domain, irq);
+ 	struct msi_desc *msi = irq_data_get_msi_desc(irq_data);
+ 
+ 	pdev = msi_desc_to_pci_dev(msi);
+ 	hbus = info->data;
+ 	int_desc = irq_data_get_irq_chip_data(irq_data);
+ 	if (!int_desc)
+ 		return;
+ 
+ 	irq_data->chip_data = NULL;
+ 	hpdev = get_pcichild_wslot(hbus, devfn_to_wslot(pdev->devfn));
+ 	if (!hpdev) {
+ 		kfree(int_desc);
+ 		return;
+ 	}
+ 
+ 	hv_int_desc_free(hpdev, int_desc);
+ 	put_pcichild(hpdev, hv_pcidev_ref_by_slot);
+ }
+ 
++>>>>>>> 0c6045d8c0ef (PCI: hv: Use zero-length array in struct pci_packet):drivers/pci/host/pci-hyperv.c
  static int hv_set_affinity(struct irq_data *data, const struct cpumask *dest,
  			   bool force)
  {
@@@ -799,10 -843,11 +861,9 @@@ static void hv_compose_msi_msg(struct p
  	struct pci_create_interrupt *int_pkt;
  	struct compose_comp_ctxt comp;
  	struct tran_int_desc *int_desc;
 -	struct cpumask *affinity;
  	struct {
  		struct pci_packet pkt;
- 		u8 buffer[sizeof(struct pci_create_interrupt) -
- 			  sizeof(struct pci_message)];
+ 		u8 buffer[sizeof(struct pci_create_interrupt)];
  	} ctxt;
  	int cpu;
  	int ret;
* Unmerged path drivers/pci/pci-hyperv.c
