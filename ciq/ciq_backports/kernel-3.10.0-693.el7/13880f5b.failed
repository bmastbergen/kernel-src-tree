nvme/pci: Provide SR-IOV support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [nvme] pci: Provide SR-IOV support (David Milburn) [1384526 1389755 1366753 1374291 1383834]
Rebuild_FUZZ: 91.53%
commit-author Keith Busch <keith.busch@intel.com>
commit 13880f5b57adf34d050cf7e229a6326da45a7347
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/13880f5b.failed

This registers an sr-iov callback for nvme.

	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 13880f5b57adf34d050cf7e229a6326da45a7347)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 6cf19a97b3a4,78e0048a3391..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -2037,6 -2015,25 +2037,28 @@@ static void nvme_remove(struct pci_dev 
  	nvme_put_ctrl(&dev->ctrl);
  }
  
++<<<<<<< HEAD
++=======
+ static int nvme_pci_sriov_configure(struct pci_dev *pdev, int numvfs)
+ {
+ 	int ret = 0;
+ 
+ 	if (numvfs == 0) {
+ 		if (pci_vfs_assigned(pdev)) {
+ 			dev_warn(&pdev->dev,
+ 				"Cannot disable SR-IOV VFs while assigned\n");
+ 			return -EPERM;
+ 		}
+ 		pci_disable_sriov(pdev);
+ 		return 0;
+ 	}
+ 
+ 	ret = pci_enable_sriov(pdev, numvfs);
+ 	return ret ? ret : numvfs;
+ }
+ 
+ #ifdef CONFIG_PM_SLEEP
++>>>>>>> 13880f5b57ad (nvme/pci: Provide SR-IOV support)
  static int nvme_suspend(struct device *dev)
  {
  	struct pci_dev *pdev = to_pci_dev(dev);
@@@ -2137,8 -2135,8 +2159,9 @@@ static struct pci_driver nvme_driver = 
  	.driver		= {
  		.pm	= &nvme_dev_pm_ops,
  	},
+ 	.sriov_configure = nvme_pci_sriov_configure,
  	.err_handler	= &nvme_err_handler,
 +	.pci_driver_rh	= &nvme_driver_rh
  };
  
  static int __init nvme_init(void)
* Unmerged path drivers/nvme/host/pci.c
