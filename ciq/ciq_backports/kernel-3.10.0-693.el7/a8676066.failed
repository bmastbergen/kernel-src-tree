PCI/MSI: Export all remapped MSIs to sysfs attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [pci] msi: Export all remapped MSIs to sysfs attributes (Myron Stowe) [1405700]
Rebuild_FUZZ: 96.08%
commit-author Romain Bezut <rbezut@gmail.com>
commit a86760664f4cf44c0981ac0c91777eed3a2970e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a8676066.failed

irqbalance uses sysfs attributes to populate its internal database, which
is then used to bind the IRQ to the appropriate NUMA node.

On a device accepting multiple MSIs and with interrupt remapping enabled,
only the first IRQ entry is exported in the "msi_irqs" directory.  This
results in irqbalance having no clue of the NUMA affinity for the extra
IRQs, so it can't bind them to the correct node.

Export all MSI interrupts as sysfs attributes when relevant.

[bhelgaas: changelog]
	Signed-off-by: Romain Bezut <rbezut@gmail.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit a86760664f4cf44c0981ac0c91777eed3a2970e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/msi.c
diff --cc drivers/pci/msi.c
index 48ccfed10215,324a1643fce2..000000000000
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@@ -489,10 -475,11 +489,16 @@@ static int populate_msi_sysfs(struct pc
  	int ret = -ENOMEM;
  	int num_msi = 0;
  	int count = 0;
+ 	int i;
  
  	/* Determine how many msi entries we have */
++<<<<<<< HEAD
 +	list_for_each_entry(entry, &pdev->msi_list, list)
 +		++num_msi;
++=======
+ 	for_each_pci_msi_entry(entry, pdev)
+ 		num_msi += entry->nvec_used;
++>>>>>>> a86760664f4c (PCI/MSI: Export all remapped MSIs to sysfs attributes)
  	if (!num_msi)
  		return 0;
  
@@@ -500,20 -487,22 +506,30 @@@
  	msi_attrs = kzalloc(sizeof(void *) * (num_msi + 1), GFP_KERNEL);
  	if (!msi_attrs)
  		return -ENOMEM;
++<<<<<<< HEAD
 +	list_for_each_entry(entry, &pdev->msi_list, list) {
 +		msi_dev_attr = kzalloc(sizeof(*msi_dev_attr), GFP_KERNEL);
 +		if (!msi_dev_attr)
 +			goto error_attrs;
 +		msi_attrs[count] = &msi_dev_attr->attr;
- 
- 		sysfs_attr_init(&msi_dev_attr->attr);
- 		msi_dev_attr->attr.name = kasprintf(GFP_KERNEL, "%d",
- 						    entry->irq);
- 		if (!msi_dev_attr->attr.name)
- 			goto error_attrs;
- 		msi_dev_attr->attr.mode = S_IRUGO;
- 		msi_dev_attr->show = msi_mode_show;
- 		++count;
++=======
+ 	for_each_pci_msi_entry(entry, pdev) {
+ 		for (i = 0; i < entry->nvec_used; i++) {
+ 			msi_dev_attr = kzalloc(sizeof(*msi_dev_attr), GFP_KERNEL);
+ 			if (!msi_dev_attr)
+ 				goto error_attrs;
+ 			msi_attrs[count] = &msi_dev_attr->attr;
++>>>>>>> a86760664f4c (PCI/MSI: Export all remapped MSIs to sysfs attributes)
+ 
+ 			sysfs_attr_init(&msi_dev_attr->attr);
+ 			msi_dev_attr->attr.name = kasprintf(GFP_KERNEL, "%d",
+ 							    entry->irq + i);
+ 			if (!msi_dev_attr->attr.name)
+ 				goto error_attrs;
+ 			msi_dev_attr->attr.mode = S_IRUGO;
+ 			msi_dev_attr->show = msi_mode_show;
+ 			++count;
+ 		}
  	}
  
  	msi_irq_group = kzalloc(sizeof(*msi_irq_group), GFP_KERNEL);
* Unmerged path drivers/pci/msi.c
