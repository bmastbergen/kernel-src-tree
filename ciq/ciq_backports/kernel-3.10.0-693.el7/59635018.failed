storvsc: Refactor the code in storvsc_channel_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author K. Y. Srinivasan <kys@microsoft.com>
commit 59635018f9b7ae8b3e304d7a5da6f628b5a1dcf6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/59635018.failed

The function storvsc_channel_init() repeatedly interacts with the host
to extract various channel properties. Refactor this code to eliminate
code repetition.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Reviewed-by: Long Li <longli@microsoft.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Tested-by: Alex Ng <alexng@microsoft.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 59635018f9b7ae8b3e304d7a5da6f628b5a1dcf6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/storvsc_drv.c
diff --cc drivers/scsi/storvsc_drv.c
index 683453d24afd,811f276baed8..000000000000
--- a/drivers/scsi/storvsc_drv.c
+++ b/drivers/scsi/storvsc_drv.c
@@@ -692,29 -704,36 +692,40 @@@ static void  handle_multichannel_storag
  	vmbus_are_subchannels_present(device->channel);
  }
  
++<<<<<<< HEAD
 +static int storvsc_channel_init(struct hv_device *device)
++=======
+ static void cache_wwn(struct storvsc_device *stor_device,
+ 		      struct vstor_packet *vstor_packet)
  {
- 	struct storvsc_device *stor_device;
- 	struct storvsc_cmd_request *request;
- 	struct vstor_packet *vstor_packet;
- 	int ret, t, i;
- 	int max_chns;
- 	bool process_sub_channels = false;
+ 	/*
+ 	 * Cache the currently active port and node ww names.
+ 	 */
+ 	if (vstor_packet->wwn_packet.primary_active) {
+ 		stor_device->node_name =
+ 			wwn_to_u64(vstor_packet->wwn_packet.primary_node_wwn);
+ 		stor_device->port_name =
+ 			wwn_to_u64(vstor_packet->wwn_packet.primary_port_wwn);
+ 	} else {
+ 		stor_device->node_name =
+ 			wwn_to_u64(vstor_packet->wwn_packet.secondary_node_wwn);
+ 		stor_device->port_name =
+ 			wwn_to_u64(vstor_packet->wwn_packet.secondary_port_wwn);
+ 	}
+ }
  
- 	stor_device = get_out_stor_device(device);
- 	if (!stor_device)
- 		return -ENODEV;
  
- 	request = &stor_device->init_request;
+ static int storvsc_execute_vstor_op(struct hv_device *device,
+ 				    struct storvsc_cmd_request *request,
+ 				    bool status_check)
++>>>>>>> 59635018f9b7 (storvsc: Refactor the code in storvsc_channel_init())
+ {
+ 	struct vstor_packet *vstor_packet;
+ 	int ret, t;
+ 
  	vstor_packet = &request->vstor_packet;
  
- 	/*
- 	 * Now, initiate the vsc/vsp initialization protocol on the open
- 	 * channel
- 	 */
- 	memset(request, 0, sizeof(struct storvsc_cmd_request));
  	init_completion(&request->wait_event);
- 	vstor_packet->operation = VSTOR_OPERATION_BEGIN_INITIALIZATION;
  	vstor_packet->flags = REQUEST_COMPLETION_FLAG;
  
  	ret = vmbus_sendpacket(device->channel, vstor_packet,
@@@ -724,20 -743,50 +735,54 @@@
  			       VM_PKT_DATA_INBAND,
  			       VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED);
  	if (ret != 0)
 -		return ret;
 +		goto cleanup;
  
  	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
 -	if (t == 0)
 -		return -ETIMEDOUT;
 +	if (t == 0) {
 +		ret = -ETIMEDOUT;
 +		goto cleanup;
 +	}
  
+ 	if (!status_check)
+ 		return ret;
+ 
  	if (vstor_packet->operation != VSTOR_OPERATION_COMPLETE_IO ||
 -	    vstor_packet->status != 0)
 -		return -EINVAL;
 +	    vstor_packet->status != 0) {
 +		ret = -EINVAL;
 +		goto cleanup;
 +	}
  
+ 	return ret;
+ }
+ 
+ static int storvsc_channel_init(struct hv_device *device, bool is_fc)
+ {
+ 	struct storvsc_device *stor_device;
+ 	struct storvsc_cmd_request *request;
+ 	struct vstor_packet *vstor_packet;
+ 	int ret, i;
+ 	int max_chns;
+ 	bool process_sub_channels = false;
+ 
+ 	stor_device = get_out_stor_device(device);
+ 	if (!stor_device)
+ 		return -ENODEV;
+ 
+ 	request = &stor_device->init_request;
+ 	vstor_packet = &request->vstor_packet;
+ 
+ 	/*
+ 	 * Now, initiate the vsc/vsp initialization protocol on the open
+ 	 * channel
+ 	 */
+ 	memset(request, 0, sizeof(struct storvsc_cmd_request));
+ 	vstor_packet->operation = VSTOR_OPERATION_BEGIN_INITIALIZATION;
+ 	ret = storvsc_execute_vstor_op(device, request, true);
+ 	if (ret)
+ 		return ret;
+ 	/*
+ 	 * Query host supported protocol version.
+ 	 */
  
  	for (i = 0; i < ARRAY_SIZE(vmstor_protocols); i++) {
  		/* reuse the packet for version range supported */
@@@ -753,26 -801,12 +797,25 @@@
  		 * The revision number is only used in Windows; set it to 0.
  		 */
  		vstor_packet->version.revision = 0;
- 
- 		ret = vmbus_sendpacket(device->channel, vstor_packet,
- 			       (sizeof(struct vstor_packet) -
- 				vmscsi_size_delta),
- 			       (unsigned long)request,
- 			       VM_PKT_DATA_INBAND,
- 			       VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED);
+ 		ret = storvsc_execute_vstor_op(device, request, false);
  		if (ret != 0)
 -			return ret;
 +			goto cleanup;
 +
++<<<<<<< HEAD
 +		t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
 +		if (t == 0) {
 +			ret = -ETIMEDOUT;
 +			goto cleanup;
 +		}
  
 +		if (vstor_packet->operation != VSTOR_OPERATION_COMPLETE_IO) {
 +			ret = -EINVAL;
 +			goto cleanup;
 +		}
++=======
+ 		if (vstor_packet->operation != VSTOR_OPERATION_COMPLETE_IO)
+ 			return -EINVAL;
++>>>>>>> 59635018f9b7 (storvsc: Refactor the code in storvsc_channel_init())
  
  		if (vstor_packet->status == 0) {
  			vmstor_proto_version =
@@@ -796,30 -828,10 +839,25 @@@
  
  	memset(vstor_packet, 0, sizeof(struct vstor_packet));
  	vstor_packet->operation = VSTOR_OPERATION_QUERY_PROPERTIES;
- 	vstor_packet->flags = REQUEST_COMPLETION_FLAG;
- 
- 	ret = vmbus_sendpacket(device->channel, vstor_packet,
- 			       (sizeof(struct vstor_packet) -
- 				vmscsi_size_delta),
- 			       (unsigned long)request,
- 			       VM_PKT_DATA_INBAND,
- 			       VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED);
- 
+ 	ret = storvsc_execute_vstor_op(device, request, true);
  	if (ret != 0)
 -		return ret;
 +		goto cleanup;
  
++<<<<<<< HEAD
 +	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
 +	if (t == 0) {
 +		ret = -ETIMEDOUT;
 +		goto cleanup;
 +	}
 +
 +	if (vstor_packet->operation != VSTOR_OPERATION_COMPLETE_IO ||
 +	    vstor_packet->status != 0) {
 +		ret = -EINVAL;
 +		goto cleanup;
 +	}
 +
++=======
++>>>>>>> 59635018f9b7 (storvsc: Refactor the code in storvsc_channel_init())
  	/*
  	 * Check to see if multi-channel support is there.
  	 * Hosts that implement protocol version of 5.1 and above
@@@ -834,32 -846,31 +872,49 @@@
  	stor_device->max_transfer_bytes =
  		vstor_packet->storage_channel_properties.max_transfer_bytes;
  
++<<<<<<< HEAD
++=======
+ 	if (!is_fc)
+ 		goto done;
+ 
+ 	/*
+ 	 * For FC devices retrieve FC HBA data.
+ 	 */
  	memset(vstor_packet, 0, sizeof(struct vstor_packet));
- 	vstor_packet->operation = VSTOR_OPERATION_END_INITIALIZATION;
- 	vstor_packet->flags = REQUEST_COMPLETION_FLAG;
+ 	vstor_packet->operation = VSTOR_OPERATION_FCHBA_DATA;
+ 	ret = storvsc_execute_vstor_op(device, request, true);
+ 	if (ret != 0)
+ 		return ret;
  
- 	ret = vmbus_sendpacket(device->channel, vstor_packet,
- 			       (sizeof(struct vstor_packet) -
- 				vmscsi_size_delta),
- 			       (unsigned long)request,
- 			       VM_PKT_DATA_INBAND,
- 			       VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED);
+ 	/*
+ 	 * Cache the currently active port and node ww names.
+ 	 */
+ 	cache_wwn(stor_device, vstor_packet);
+ 
+ done:
  
++>>>>>>> 59635018f9b7 (storvsc: Refactor the code in storvsc_channel_init())
+ 	memset(vstor_packet, 0, sizeof(struct vstor_packet));
+ 	vstor_packet->operation = VSTOR_OPERATION_END_INITIALIZATION;
+ 	ret = storvsc_execute_vstor_op(device, request, true);
  	if (ret != 0)
 -		return ret;
 +		goto cleanup;
  
++<<<<<<< HEAD
 +	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
 +	if (t == 0) {
 +		ret = -ETIMEDOUT;
 +		goto cleanup;
 +	}
 +
 +	if (vstor_packet->operation != VSTOR_OPERATION_COMPLETE_IO ||
 +	    vstor_packet->status != 0) {
 +		ret = -EINVAL;
 +		goto cleanup;
 +	}
 +
++=======
++>>>>>>> 59635018f9b7 (storvsc: Refactor the code in storvsc_channel_init())
  	if (process_sub_channels)
  		handle_multichannel_storage(device, max_chns);
  
* Unmerged path drivers/scsi/storvsc_drv.c
