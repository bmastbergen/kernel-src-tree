x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] kaslr: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size' (Baoquan He) [1290840]
Rebuild_FUZZ: 97.67%
commit-author Yinghai Lu <yinghai@kernel.org>
commit 4d2d542482205d3df1a0852751f5b004cc6390cc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4d2d5424.failed

Since 'run_size' is now calculated in misc.c, the old script and associated
argument passing is no longer needed. This patch removes them, and renames
'run_size' to the more descriptive 'kernel_total_size'.

	Signed-off-by: Yinghai Lu <yinghai@kernel.org>
	Signed-off-by: Baoquan He <bhe@redhat.com>
[ Rewrote the changelog, renamed 'run_size' to 'kernel_total_size' ]
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Josh Triplett <josh@joshtriplett.org>
	Cc: Junjie Mao <eternal.n08@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vivek Goyal <vgoyal@redhat.com>
	Cc: lasse.collin@tukaani.org
Link: http://lkml.kernel.org/r/1461888548-32439-6-git-send-email-keescook@chromium.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 4d2d542482205d3df1a0852751f5b004cc6390cc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/head_32.S
#	arch/x86/boot/compressed/head_64.S
#	arch/x86/boot/compressed/misc.c
#	arch/x86/boot/compressed/mkpiggy.c
diff --cc arch/x86/boot/compressed/head_32.S
index fe4cda99cc30,1038524270e7..000000000000
--- a/arch/x86/boot/compressed/head_32.S
+++ b/arch/x86/boot/compressed/head_32.S
@@@ -203,19 -235,24 +203,33 @@@ relocated
  2:
  
  /*
 - * Do the extraction, and jump to the new kernel..
 + * Do the decompression, and jump to the new kernel..
   */
++<<<<<<< HEAD
 +				/* push arguments for decompress_kernel: */
 +	pushl	$z_output_len	/* decompressed length */
 +	leal	z_extract_offset_negative(%ebx), %ebp
++=======
+ 				/* push arguments for extract_kernel: */
+ 	pushl	$z_output_len	/* decompressed length, end of relocs */
+ 
+ 	movl    BP_init_size(%esi), %eax
+ 	subl    $_end, %eax
+ 	movl    %ebx, %ebp
+ 	subl    %eax, %ebp
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  	pushl	%ebp		/* output address */
 -
  	pushl	$z_input_len	/* input_len */
  	leal	input_data(%ebx), %eax
  	pushl	%eax		/* input_data */
  	leal	boot_heap(%ebx), %eax
  	pushl	%eax		/* heap area */
  	pushl	%esi		/* real mode pointer */
++<<<<<<< HEAD
 +	call	decompress_kernel
++=======
+ 	call	extract_kernel	/* returns kernel location in %eax */
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  	addl	$24, %esp
  
  /*
diff --cc arch/x86/boot/compressed/head_64.S
index 8b77c1f2c468,7c047002950c..000000000000
--- a/arch/x86/boot/compressed/head_64.S
+++ b/arch/x86/boot/compressed/head_64.S
@@@ -406,8 -420,8 +406,13 @@@ relocated
  	leaq	input_data(%rip), %rdx  /* input_data */
  	movl	$z_input_len, %ecx	/* input_len */
  	movq	%rbp, %r8		/* output target address */
++<<<<<<< HEAD
 +	movq	$z_output_len, %r9	/* decompressed length */
 +	call	decompress_kernel
++=======
+ 	movq	$z_output_len, %r9	/* decompressed length, end of relocs */
+ 	call	extract_kernel		/* returns kernel location in %rax */
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  	popq	%rsi
  
  /*
diff --cc arch/x86/boot/compressed/misc.c
index 243fb14b38e2,bee6238e7cfc..000000000000
--- a/arch/x86/boot/compressed/misc.c
+++ b/arch/x86/boot/compressed/misc.c
@@@ -374,13 -342,18 +374,14 @@@ asmlinkage void decompress_kernel(void 
  				  unsigned char *output,
  				  unsigned long output_len)
  {
+ 	const unsigned long kernel_total_size = VO__end - VO__text;
  	unsigned char *output_orig = output;
  
 -	/* Retain x86 boot parameters pointer passed from startup_32/64. */
 -	boot_params = rmode;
 -
 -	/* Clear flags intended for solely in-kernel use. */
 -	boot_params->hdr.loadflags &= ~KASLR_FLAG;
 +	real_mode = rmode;
  
 -	sanitize_boot_params(boot_params);
 +	sanitize_boot_params(real_mode);
  
 -	if (boot_params->screen_info.orig_video_mode == 7) {
 +	if (real_mode->screen_info.orig_video_mode == 7) {
  		vidmem = (char *) 0xb0000;
  		vidport = 0x3b4;
  	} else {
@@@ -388,15 -361,31 +389,39 @@@
  		vidport = 0x3d4;
  	}
  
++<<<<<<< HEAD
 +	lines = real_mode->screen_info.orig_video_lines;
 +	cols = real_mode->screen_info.orig_video_cols;
++=======
+ 	lines = boot_params->screen_info.orig_video_lines;
+ 	cols = boot_params->screen_info.orig_video_cols;
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  
  	console_init();
 -	debug_putstr("early console in extract_kernel\n");
 +	debug_putstr("early console in decompress_kernel\n");
  
  	free_mem_ptr     = heap;	/* Heap */
  	free_mem_end_ptr = heap + BOOT_HEAP_SIZE;
  
++<<<<<<< HEAD
++=======
+ 	/* Report initial kernel position details. */
+ 	debug_putaddr(input_data);
+ 	debug_putaddr(input_len);
+ 	debug_putaddr(output);
+ 	debug_putaddr(output_len);
+ 	debug_putaddr(kernel_total_size);
+ 
+ 	/*
+ 	 * The memory hole needed for the kernel is the larger of either
+ 	 * the entire decompressed kernel plus relocation table, or the
+ 	 * entire decompressed kernel plus .bss and .brk sections.
+ 	 */
+ 	output = choose_random_location(input_data, input_len, output,
+ 					max(output_len, kernel_total_size));
+ 
+ 	/* Validate memory location choices. */
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  	if ((unsigned long)output & (MIN_KERNEL_ALIGN - 1))
  		error("Destination address inappropriately aligned");
  #ifdef CONFIG_X86_64
diff --cc arch/x86/boot/compressed/mkpiggy.c
index b669ab65bf6c,72bad2c8debe..000000000000
--- a/arch/x86/boot/compressed/mkpiggy.c
+++ b/arch/x86/boot/compressed/mkpiggy.c
@@@ -35,7 -34,6 +35,10 @@@ int main(int argc, char *argv[]
  {
  	uint32_t olen;
  	long ilen;
++<<<<<<< HEAD
 +	unsigned long offs;
++=======
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  	FILE *f = NULL;
  	int retval = 1;
  
@@@ -65,26 -63,11 +68,32 @@@
  	ilen = ftell(f);
  	olen = get_unaligned_le32(&olen);
  
++<<<<<<< HEAD
 +	/*
 +	 * Now we have the input (compressed) and output (uncompressed)
 +	 * sizes, compute the necessary decompression offset...
 +	 */
 +
 +	offs = (olen > ilen) ? olen - ilen : 0;
 +	offs += olen >> 12;	/* Add 8 bytes for each 32K block */
 +	offs += 64*1024 + 128;	/* Add 64K + 128 bytes slack */
 +	offs = (offs+4095) & ~4095; /* Round to a 4K boundary */
 +
++=======
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  	printf(".section \".rodata..compressed\",\"a\",@progbits\n");
  	printf(".globl z_input_len\n");
  	printf("z_input_len = %lu\n", ilen);
  	printf(".globl z_output_len\n");
  	printf("z_output_len = %lu\n", (unsigned long)olen);
++<<<<<<< HEAD
 +	printf(".globl z_extract_offset\n");
 +	printf("z_extract_offset = 0x%lx\n", offs);
 +	/* z_extract_offset_negative allows simplification of head_32.S */
 +	printf(".globl z_extract_offset_negative\n");
 +	printf("z_extract_offset_negative = -0x%lx\n", offs);
++=======
++>>>>>>> 4d2d54248220 (x86/KASLR: Clean up unused code from old 'run_size' and rename it to 'kernel_total_size')
  
  	printf(".globl input_data, input_data_end\n");
  	printf("input_data:\n");
* Unmerged path arch/x86/boot/compressed/head_32.S
* Unmerged path arch/x86/boot/compressed/head_64.S
* Unmerged path arch/x86/boot/compressed/misc.c
* Unmerged path arch/x86/boot/compressed/mkpiggy.c
