Btrfs: make mapping->writeback_index point to the last written page

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Liu Bo <bo.li.liu@oracle.com>
commit a91326679f2a0a4c239cd643674fdcda28ee86be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a9132667.failed

If sequential writer is writing in the middle of the page and it just redirties
the last written page by continuing from it.

In the above case this can end up with seeking back to that firstly redirtied
page after writing all the pages at the end of file because btrfs updates
mapping->writeback_index to 1 past the current one.

For non-cow filesystems, the cost is only about extra seek, while for cow
filesystems such as btrfs, it means unnecessary fragments.

To avoid it, we just need to continue writeback from the last written page.

This also updates btrfs to behave like what write_cache_pages() does, ie, bail
 out immediately if there is an error in writepage().

<Ref: https://www.spinics.net/lists/linux-btrfs/msg52628.html>

	Reported-by: Holger Hoffst√§tte <holger.hoffstaette@googlemail.com>
	Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit a91326679f2a0a4c239cd643674fdcda28ee86be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/extent_io.c
diff --cc fs/btrfs/extent_io.c
index a056ffcb89c2,fd41a730d239..000000000000
--- a/fs/btrfs/extent_io.c
+++ b/fs/btrfs/extent_io.c
@@@ -3954,8 -3944,10 +3952,15 @@@ static int extent_write_cache_pages(str
  		index = mapping->writeback_index; /* Start from prev offset */
  		end = -1;
  	} else {
++<<<<<<< HEAD
 +		index = wbc->range_start >> PAGE_CACHE_SHIFT;
 +		end = wbc->range_end >> PAGE_CACHE_SHIFT;
++=======
+ 		index = wbc->range_start >> PAGE_SHIFT;
+ 		end = wbc->range_end >> PAGE_SHIFT;
+ 		if (wbc->range_start == 0 && wbc->range_end == LLONG_MAX)
+ 			range_whole = 1;
++>>>>>>> a91326679f2a (Btrfs: make mapping->writeback_index point to the last written page)
  		scanned = 1;
  	}
  	if (wbc->sync_mode == WB_SYNC_ALL)
* Unmerged path fs/btrfs/extent_io.c
