lib/uuid.c: use correct offset in uuid parser

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [lib] uuid.c: use correct offset in uuid parser (Tarun Gupta) [1412840]
Rebuild_FUZZ: 95.35%
commit-author Bjørn Mork <bjorn@mork.no>
commit bc9dc9d5eec908806f1b15c9ec2253d44dcf7835
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bc9dc9d5.failed

Use '+ 0' and '+ 1' as offsets, like they were intended, instead of
adding to the result.

Fixes: 2b1b0d66704a ("lib/uuid.c: introduce a few more generic helpers")
	Signed-off-by: Bjørn Mork <bjorn@mork.no>
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit bc9dc9d5eec908806f1b15c9ec2253d44dcf7835)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/uuid.c
diff --cc lib/uuid.c
index 398821e4dce1,37687af77ff8..000000000000
--- a/lib/uuid.c
+++ b/lib/uuid.c
@@@ -45,3 -68,61 +45,64 @@@ void uuid_be_gen(uuid_be *bu
  	bu->b[6] = (bu->b[6] & 0x0F) | 0x40;
  }
  EXPORT_SYMBOL_GPL(uuid_be_gen);
++<<<<<<< HEAD
++=======
+ 
+ /**
+   * uuid_is_valid - checks if UUID string valid
+   * @uuid:	UUID string to check
+   *
+   * Description:
+   * It checks if the UUID string is following the format:
+   *	xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
+   * where x is a hex digit.
+   *
+   * Return: true if input is valid UUID string.
+   */
+ bool uuid_is_valid(const char *uuid)
+ {
+ 	unsigned int i;
+ 
+ 	for (i = 0; i < UUID_STRING_LEN; i++) {
+ 		if (i == 8 || i == 13 || i == 18 || i == 23) {
+ 			if (uuid[i] != '-')
+ 				return false;
+ 		} else if (!isxdigit(uuid[i])) {
+ 			return false;
+ 		}
+ 	}
+ 
+ 	return true;
+ }
+ EXPORT_SYMBOL(uuid_is_valid);
+ 
+ static int __uuid_to_bin(const char *uuid, __u8 b[16], const u8 ei[16])
+ {
+ 	static const u8 si[16] = {0,2,4,6,9,11,14,16,19,21,24,26,28,30,32,34};
+ 	unsigned int i;
+ 
+ 	if (!uuid_is_valid(uuid))
+ 		return -EINVAL;
+ 
+ 	for (i = 0; i < 16; i++) {
+ 		int hi = hex_to_bin(uuid[si[i] + 0]);
+ 		int lo = hex_to_bin(uuid[si[i] + 1]);
+ 
+ 		b[ei[i]] = (hi << 4) | lo;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int uuid_le_to_bin(const char *uuid, uuid_le *u)
+ {
+ 	return __uuid_to_bin(uuid, u->b, uuid_le_index);
+ }
+ EXPORT_SYMBOL(uuid_le_to_bin);
+ 
+ int uuid_be_to_bin(const char *uuid, uuid_be *u)
+ {
+ 	return __uuid_to_bin(uuid, u->b, uuid_be_index);
+ }
+ EXPORT_SYMBOL(uuid_be_to_bin);
++>>>>>>> bc9dc9d5eec9 (lib/uuid.c: use correct offset in uuid parser)
* Unmerged path lib/uuid.c
