btrfs: extend btrfs_set_extent_delalloc and its friends to support in-band dedupe and subpage size patchset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Qu Wenruo <quwenruo@cn.fujitsu.com>
commit ba8b04c1d4adbc66f3653e3de5bd6c74a9a003bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ba8b04c1.failed

Extend btrfs_set_extent_delalloc() and extent_clear_unlock_delalloc()
parameters for both in-band dedupe and subpage sector size patchset.

This should reduce conflict of both patchset and the effort to rebase
them.

	Cc: Chandan Rajendra <chandan@linux.vnet.ibm.com>
	Cc: David Sterba <dsterba@suse.cz>
	Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit ba8b04c1d4adbc66f3653e3de5bd6c74a9a003bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/tests/inode-tests.c
diff --cc fs/btrfs/tests/inode-tests.c
index 846143210001,0bf46808ce8f..000000000000
--- a/fs/btrfs/tests/inode-tests.c
+++ b/fs/btrfs/tests/inode-tests.c
@@@ -954,10 -980,11 +954,15 @@@ static int test_extent_accounting(void
  		goto out;
  	}
  
 -	/* [BTRFS_MAX_EXTENT_SIZE][sectorsize] */
 +	/* [BTRFS_MAX_EXTENT_SIZE][4k] */
  	BTRFS_I(inode)->outstanding_extents++;
  	ret = btrfs_set_extent_delalloc(inode, BTRFS_MAX_EXTENT_SIZE,
++<<<<<<< HEAD
 +					BTRFS_MAX_EXTENT_SIZE + 4095, NULL);
++=======
+ 					BTRFS_MAX_EXTENT_SIZE + sectorsize - 1,
+ 					NULL, 0);
++>>>>>>> ba8b04c1d4ad (btrfs: extend btrfs_set_extent_delalloc and its friends to support in-band dedupe and subpage size patchset)
  	if (ret) {
  		test_msg("btrfs_set_extent_delalloc returned %d\n", ret);
  		goto out;
@@@ -987,11 -1014,12 +992,17 @@@
  		goto out;
  	}
  
 -	/* [BTRFS_MAX_EXTENT_SIZE][sectorsize] */
 +	/* [BTRFS_MAX_EXTENT_SIZE][4K] */
  	BTRFS_I(inode)->outstanding_extents++;
  	ret = btrfs_set_extent_delalloc(inode, BTRFS_MAX_EXTENT_SIZE >> 1,
++<<<<<<< HEAD
 +					(BTRFS_MAX_EXTENT_SIZE >> 1) + 4095,
 +					NULL);
++=======
+ 					(BTRFS_MAX_EXTENT_SIZE >> 1)
+ 					+ sectorsize - 1,
+ 					NULL, 0);
++>>>>>>> ba8b04c1d4ad (btrfs: extend btrfs_set_extent_delalloc and its friends to support in-band dedupe and subpage size patchset)
  	if (ret) {
  		test_msg("btrfs_set_extent_delalloc returned %d\n", ret);
  		goto out;
@@@ -1011,9 -1039,10 +1022,16 @@@
  	 * doing that here, this isn't the interesting case we want to test.
  	 */
  	BTRFS_I(inode)->outstanding_extents += 2;
++<<<<<<< HEAD
 +	ret = btrfs_set_extent_delalloc(inode, BTRFS_MAX_EXTENT_SIZE + 8192,
 +					(BTRFS_MAX_EXTENT_SIZE << 1) + 12287,
 +					NULL);
++=======
+ 	ret = btrfs_set_extent_delalloc(inode,
+ 			BTRFS_MAX_EXTENT_SIZE + 2 * sectorsize,
+ 			(BTRFS_MAX_EXTENT_SIZE << 1) + 3 * sectorsize - 1,
+ 			NULL, 0);
++>>>>>>> ba8b04c1d4ad (btrfs: extend btrfs_set_extent_delalloc and its friends to support in-band dedupe and subpage size patchset)
  	if (ret) {
  		test_msg("btrfs_set_extent_delalloc returned %d\n", ret);
  		goto out;
@@@ -1025,10 -1054,13 +1043,16 @@@
  		goto out;
  	}
  
 -	/*
 -	* [BTRFS_MAX_EXTENT_SIZE+sectorsize][sectorsize][BTRFS_MAX_EXTENT_SIZE+sectorsize]
 -	*/
 +	/* [BTRFS_MAX_EXTENT_SIZE+4k][4k][BTRFS_MAX_EXTENT_SIZE+4k] */
  	BTRFS_I(inode)->outstanding_extents++;
++<<<<<<< HEAD
 +	ret = btrfs_set_extent_delalloc(inode, BTRFS_MAX_EXTENT_SIZE+4096,
 +					BTRFS_MAX_EXTENT_SIZE+8191, NULL);
++=======
+ 	ret = btrfs_set_extent_delalloc(inode,
+ 			BTRFS_MAX_EXTENT_SIZE + sectorsize,
+ 			BTRFS_MAX_EXTENT_SIZE + 2 * sectorsize - 1, NULL, 0);
++>>>>>>> ba8b04c1d4ad (btrfs: extend btrfs_set_extent_delalloc and its friends to support in-band dedupe and subpage size patchset)
  	if (ret) {
  		test_msg("btrfs_set_extent_delalloc returned %d\n", ret);
  		goto out;
@@@ -1063,8 -1095,9 +1087,14 @@@
  	 * might fail and I'd rather satisfy my paranoia at this point.
  	 */
  	BTRFS_I(inode)->outstanding_extents++;
++<<<<<<< HEAD
 +	ret = btrfs_set_extent_delalloc(inode, BTRFS_MAX_EXTENT_SIZE+4096,
 +					BTRFS_MAX_EXTENT_SIZE+8191, NULL);
++=======
+ 	ret = btrfs_set_extent_delalloc(inode,
+ 			BTRFS_MAX_EXTENT_SIZE + sectorsize,
+ 			BTRFS_MAX_EXTENT_SIZE + 2 * sectorsize - 1, NULL, 0);
++>>>>>>> ba8b04c1d4ad (btrfs: extend btrfs_set_extent_delalloc and its friends to support in-band dedupe and subpage size patchset)
  	if (ret) {
  		test_msg("btrfs_set_extent_delalloc returned %d\n", ret);
  		goto out;
diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index 48f38b765f55..54ea63774d9a 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -3061,7 +3061,7 @@ int btrfs_start_delalloc_inodes(struct btrfs_root *root, int delay_iput);
 int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput,
 			       int nr);
 int btrfs_set_extent_delalloc(struct inode *inode, u64 start, u64 end,
-			      struct extent_state **cached_state);
+			      struct extent_state **cached_state, int dedupe);
 int btrfs_create_subvol_root(struct btrfs_trans_handle *trans,
 			     struct btrfs_root *new_root,
 			     struct btrfs_root *parent_root,
diff --git a/fs/btrfs/extent_io.c b/fs/btrfs/extent_io.c
index 07d85929b65a..d0e700746e06 100644
--- a/fs/btrfs/extent_io.c
+++ b/fs/btrfs/extent_io.c
@@ -1727,7 +1727,7 @@ out_failed:
 }
 
 void extent_clear_unlock_delalloc(struct inode *inode, u64 start, u64 end,
-				 struct page *locked_page,
+				 u64 delalloc_end, struct page *locked_page,
 				 unsigned clear_bits,
 				 unsigned long page_ops)
 {
diff --git a/fs/btrfs/extent_io.h b/fs/btrfs/extent_io.h
index c7b1fc085048..458e81aeb1d6 100644
--- a/fs/btrfs/extent_io.h
+++ b/fs/btrfs/extent_io.h
@@ -412,7 +412,7 @@ int map_private_extent_buffer(struct extent_buffer *eb, unsigned long offset,
 int extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end);
 int extent_range_redirty_for_io(struct inode *inode, u64 start, u64 end);
 void extent_clear_unlock_delalloc(struct inode *inode, u64 start, u64 end,
-				 struct page *locked_page,
+				 u64 delalloc_end, struct page *locked_page,
 				 unsigned bits_to_clear,
 				 unsigned long page_ops);
 struct bio *
diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index 52c64ec4acda..8f7132a71b56 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -507,7 +507,7 @@ int btrfs_dirty_pages(struct btrfs_root *root, struct inode *inode,
 
 	end_of_last_block = start_pos + num_bytes - 1;
 	err = btrfs_set_extent_delalloc(inode, start_pos, end_of_last_block,
-					cached);
+					cached, 0);
 	if (err)
 		return err;
 
diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 3fafb48a6ff7..87ca61fee1ae 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -554,8 +554,9 @@ cont:
 			 * we don't need to create any more async work items.
 			 * Unlock and free up our temp pages.
 			 */
-			extent_clear_unlock_delalloc(inode, start, end, NULL,
-						     clear_flags, PAGE_UNLOCK |
+			extent_clear_unlock_delalloc(inode, start, end, end,
+						     NULL, clear_flags,
+						     PAGE_UNLOCK |
 						     PAGE_CLEAR_DIRTY |
 						     PAGE_SET_WRITEBACK |
 						     page_error_op |
@@ -826,6 +827,8 @@ retry:
 		 * clear dirty, set writeback and unlock the pages.
 		 */
 		extent_clear_unlock_delalloc(inode, async_extent->start,
+				async_extent->start +
+				async_extent->ram_size - 1,
 				async_extent->start +
 				async_extent->ram_size - 1,
 				NULL, EXTENT_LOCKED | EXTENT_DELALLOC,
@@ -847,7 +850,8 @@ retry:
 			tree->ops->writepage_end_io_hook(p, start, end,
 							 NULL, 0);
 			p->mapping = NULL;
-			extent_clear_unlock_delalloc(inode, start, end, NULL, 0,
+			extent_clear_unlock_delalloc(inode, start, end, end,
+						     NULL, 0,
 						     PAGE_END_WRITEBACK |
 						     PAGE_SET_ERROR);
 			free_async_extent_pages(async_extent);
@@ -861,6 +865,8 @@ out_free_reserve:
 	btrfs_free_reserved_extent(root, ins.objectid, ins.offset, 1);
 out_free:
 	extent_clear_unlock_delalloc(inode, async_extent->start,
+				     async_extent->start +
+				     async_extent->ram_size - 1,
 				     async_extent->start +
 				     async_extent->ram_size - 1,
 				     NULL, EXTENT_LOCKED | EXTENT_DELALLOC |
@@ -956,7 +962,8 @@ static noinline int cow_file_range(struct inode *inode,
 		ret = cow_file_range_inline(root, inode, start, end, 0, 0,
 					    NULL);
 		if (ret == 0) {
-			extent_clear_unlock_delalloc(inode, start, end, NULL,
+			extent_clear_unlock_delalloc(inode, start, end,
+				     delalloc_end, NULL,
 				     EXTENT_LOCKED | EXTENT_DELALLOC |
 				     EXTENT_DEFRAG, PAGE_UNLOCK |
 				     PAGE_CLEAR_DIRTY | PAGE_SET_WRITEBACK |
@@ -1049,7 +1056,8 @@ static noinline int cow_file_range(struct inode *inode,
 		op |= PAGE_SET_PRIVATE2;
 
 		extent_clear_unlock_delalloc(inode, start,
-					     start + ram_size - 1, locked_page,
+					     start + ram_size - 1,
+					     delalloc_end, locked_page,
 					     EXTENT_LOCKED | EXTENT_DELALLOC,
 					     op);
 		disk_num_bytes -= cur_alloc_size;
@@ -1065,7 +1073,8 @@ out_drop_extent_cache:
 out_reserve:
 	btrfs_free_reserved_extent(root, ins.objectid, ins.offset, 1);
 out_unlock:
-	extent_clear_unlock_delalloc(inode, start, end, locked_page,
+	extent_clear_unlock_delalloc(inode, start, end, delalloc_end,
+				     locked_page,
 				     EXTENT_LOCKED | EXTENT_DO_ACCOUNTING |
 				     EXTENT_DELALLOC | EXTENT_DEFRAG,
 				     PAGE_UNLOCK | PAGE_CLEAR_DIRTY |
@@ -1244,7 +1253,8 @@ static noinline int run_delalloc_nocow(struct inode *inode,
 
 	path = btrfs_alloc_path();
 	if (!path) {
-		extent_clear_unlock_delalloc(inode, start, end, locked_page,
+		extent_clear_unlock_delalloc(inode, start, end, end,
+					     locked_page,
 					     EXTENT_LOCKED | EXTENT_DELALLOC |
 					     EXTENT_DO_ACCOUNTING |
 					     EXTENT_DEFRAG, PAGE_UNLOCK |
@@ -1262,7 +1272,8 @@ static noinline int run_delalloc_nocow(struct inode *inode,
 		trans = btrfs_join_transaction(root);
 
 	if (IS_ERR(trans)) {
-		extent_clear_unlock_delalloc(inode, start, end, locked_page,
+		extent_clear_unlock_delalloc(inode, start, end, end,
+					     locked_page,
 					     EXTENT_LOCKED | EXTENT_DELALLOC |
 					     EXTENT_DO_ACCOUNTING |
 					     EXTENT_DEFRAG, PAGE_UNLOCK |
@@ -1465,7 +1476,7 @@ out_check:
 		}
 
 		extent_clear_unlock_delalloc(inode, cur_offset,
-					     cur_offset + num_bytes - 1,
+					     cur_offset + num_bytes - 1, end,
 					     locked_page, EXTENT_LOCKED |
 					     EXTENT_DELALLOC, PAGE_UNLOCK |
 					     PAGE_SET_PRIVATE2);
@@ -1495,7 +1506,7 @@ error:
 		ret = err;
 
 	if (ret && cur_offset < end)
-		extent_clear_unlock_delalloc(inode, cur_offset, end,
+		extent_clear_unlock_delalloc(inode, cur_offset, end, end,
 					     locked_page, EXTENT_LOCKED |
 					     EXTENT_DELALLOC | EXTENT_DEFRAG |
 					     EXTENT_DO_ACCOUNTING, PAGE_UNLOCK |
@@ -1956,7 +1967,7 @@ static noinline int add_pending_csums(struct btrfs_trans_handle *trans,
 }
 
 int btrfs_set_extent_delalloc(struct inode *inode, u64 start, u64 end,
-			      struct extent_state **cached_state)
+			      struct extent_state **cached_state, int dedupe)
 {
 	WARN_ON((end & (PAGE_CACHE_SIZE - 1)) == 0);
 	return set_extent_delalloc(&BTRFS_I(inode)->io_tree, start, end,
@@ -2020,7 +2031,8 @@ again:
 		goto out;
 	 }
 
-	btrfs_set_extent_delalloc(inode, page_start, page_end, &cached_state);
+	btrfs_set_extent_delalloc(inode, page_start, page_end, &cached_state,
+				  0);
 	ClearPageChecked(page);
 	set_page_dirty(page);
 out:
@@ -4733,7 +4745,7 @@ again:
 			  0, 0, &cached_state, GFP_NOFS);
 
 	ret = btrfs_set_extent_delalloc(inode, block_start, block_end,
-					&cached_state);
+					&cached_state, 0);
 	if (ret) {
 		unlock_extent_cached(io_tree, block_start, block_end,
 				     &cached_state, GFP_NOFS);
@@ -9014,7 +9026,7 @@ again:
 			  0, 0, &cached_state, GFP_NOFS);
 
 	ret = btrfs_set_extent_delalloc(inode, page_start, end,
-					&cached_state);
+					&cached_state, 0);
 	if (ret) {
 		unlock_extent_cached(io_tree, page_start, page_end,
 				     &cached_state, GFP_NOFS);
diff --git a/fs/btrfs/relocation.c b/fs/btrfs/relocation.c
index 3fd1af30f508..8d344da7bd5a 100644
--- a/fs/btrfs/relocation.c
+++ b/fs/btrfs/relocation.c
@@ -3193,7 +3193,7 @@ static int relocate_file_extent_cluster(struct inode *inode,
 			nr++;
 		}
 
-		btrfs_set_extent_delalloc(inode, page_start, page_end, NULL);
+		btrfs_set_extent_delalloc(inode, page_start, page_end, NULL, 0);
 		set_page_dirty(page);
 
 		unlock_extent(&BTRFS_I(inode)->io_tree,
* Unmerged path fs/btrfs/tests/inode-tests.c
