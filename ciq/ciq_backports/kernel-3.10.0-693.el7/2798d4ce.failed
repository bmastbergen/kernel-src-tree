acct: get rid of acct_lock for acct->count

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 2798d4ce61601808b965253d60624bbf201b51b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2798d4ce.failed

* make acct->count atomic and acct freeing - rcu-delayed.
* instead of grabbing acct_lock around the places where we take a reference,
do that under rcu_read_lock() with atomic_long_inc_not_zero().
* have the new acct locked before making ns->bacct point to it

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 2798d4ce61601808b965253d60624bbf201b51b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/acct.c
diff --cc kernel/acct.c
index 7ffb48430dba,6fd375f15626..000000000000
--- a/kernel/acct.c
+++ b/kernel/acct.c
@@@ -78,17 -79,27 +78,33 @@@ int acct_parm[3] = {4, 2, 30}
  static void do_acct_process(struct bsd_acct_struct *acct);
  
  struct bsd_acct_struct {
++<<<<<<< HEAD
 +	long			count;
++=======
+ 	atomic_long_t		count;
+ 	union {
+ 		struct {
+ 			struct hlist_node	s_list;
+ 			struct hlist_node	m_list;
+ 		};
+ 		struct rcu_head rcu;
+ 	};
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  	struct mutex		lock;
  	int			active;
  	unsigned long		needcheck;
  	struct file		*file;
  	struct pid_namespace	*ns;
 +	struct list_head	list;
  };
  
+ static void acct_free_rcu(struct rcu_head *head)
+ {
+ 	kfree(container_of(head, struct bsd_acct_struct, rcu));
+ }
+ 
  static DEFINE_SPINLOCK(acct_lock);
 +static LIST_HEAD(acct_list);
  
  /*
   * Check the amount of free space and suspend/resume accordingly.
@@@ -155,31 -138,41 +171,62 @@@ out
  
  static void acct_put(struct bsd_acct_struct *p)
  {
- 	spin_lock(&acct_lock);
- 	if (!--p->count)
- 		kfree(p);
- 	spin_unlock(&acct_lock);
+ 	if (atomic_long_dec_and_test(&p->count))
+ 		call_rcu(&p->rcu, acct_free_rcu);
  }
  
++<<<<<<< HEAD
 +static struct bsd_acct_struct *acct_get(struct bsd_acct_struct **p)
++=======
+ static struct bsd_acct_struct *__acct_get(struct bsd_acct_struct *res)
+ {
+ 	if (!atomic_long_inc_not_zero(&res->count)) {
+ 		rcu_read_unlock();
+ 		cpu_relax();
+ 		return NULL;
+ 	}
+ 	rcu_read_unlock();
+ 	mutex_lock(&res->lock);
+ 	if (!res->ns) {
+ 		mutex_unlock(&res->lock);
+ 		acct_put(res);
+ 		return NULL;
+ 	}
+ 	return res;
+ }
+ 
+ static struct bsd_acct_struct *acct_get(struct pid_namespace *ns)
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  {
  	struct bsd_acct_struct *res;
- 	spin_lock(&acct_lock);
  again:
++<<<<<<< HEAD
 +	res = *p;
 +	if (res)
 +		res->count++;
 +	spin_unlock(&acct_lock);
 +	if (res) {
 +		mutex_lock(&res->lock);
 +		if (!res->ns) {
 +			mutex_unlock(&res->lock);
 +			spin_lock(&acct_lock);
 +			if (!--res->count)
 +				kfree(res);
 +			goto again;
 +		}
 +	}
++=======
+ 	smp_rmb();
+ 	rcu_read_lock();
+ 	res = ACCESS_ONCE(ns->bacct);
+ 	if (!res) {
+ 		rcu_read_unlock();
+ 		return NULL;
+ 	}
+ 	res = __acct_get(res);
+ 	if (!res)
+ 		goto again;
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  	return res;
  }
  
@@@ -189,23 -182,27 +236,37 @@@ static void acct_kill(struct bsd_acct_s
  	if (acct) {
  		struct file *file = acct->file;
  		struct pid_namespace *ns = acct->ns;
+ 		do_acct_process(acct);
+ 		mnt_unpin(file->f_path.mnt);
+ 		filp_close(file, NULL);
  		spin_lock(&acct_lock);
++<<<<<<< HEAD
 +		list_del(&acct->list);
 +		mnt_unpin(file->f_path.mnt);
++=======
+ 		hlist_del(&acct->m_list);
+ 		hlist_del(&acct->s_list);
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  		spin_unlock(&acct_lock);
- 		do_acct_process(acct);
- 		filp_close(file, NULL);
- 		spin_lock(&acct_lock);
  		ns->bacct = new;
  		if (new) {
++<<<<<<< HEAD
 +			mnt_pin(new->file->f_path.mnt);
 +			list_add(&new->list, &acct_list);
++=======
+ 			struct vfsmount *m = new->file->f_path.mnt;
+ 			mnt_pin(m);
+ 			spin_lock(&acct_lock);
+ 			hlist_add_head(&new->s_list, &m->mnt_sb->s_pins);
+ 			hlist_add_head(&new->m_list, &real_mount(m)->mnt_pins);
+ 			spin_unlock(&acct_lock);
+ 			mutex_unlock(&new->lock);
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  		}
  		acct->ns = NULL;
+ 		atomic_long_dec(&acct->count);
  		mutex_unlock(&acct->lock);
- 		if (!(acct->count -= 2))
- 			kfree(acct);
- 		spin_unlock(&acct_lock);
+ 		acct_put(acct);
  	}
  }
  
@@@ -246,15 -243,18 +307,21 @@@ static int acct_on(struct filename *pat
  	mutex_init(&acct->lock);
  	mnt = file->f_path.mnt;
  
++<<<<<<< HEAD
 +	old = acct_get(&ns->bacct);
++=======
+ 	old = acct_get(ns);
+ 	mutex_lock_nested(&acct->lock, 1);	/* nobody has seen it yet */
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  	if (old) {
  		acct_kill(old, acct);
  	} else {
- 		spin_lock(&acct_lock);
  		ns->bacct = acct;
+ 		spin_lock(&acct_lock);
  		mnt_pin(mnt);
 -		hlist_add_head(&acct->s_list, &mnt->mnt_sb->s_pins);
 -		hlist_add_head(&acct->m_list, &real_mount(mnt)->mnt_pins);
 +		list_add(&acct->list, &acct_list);
  		spin_unlock(&acct_lock);
+ 		mutex_unlock(&acct->lock);
  	}
  	mntput(mnt); /* it's pinned, now give up active reference */
  	return 0;
@@@ -291,68 -295,34 +358,96 @@@ SYSCALL_DEFINE1(acct, const char __use
  	return error;
  }
  
 -void acct_auto_close_mnt(struct hlist_head *list)
 +/**
 + * acct_auto_close - turn off a filesystem's accounting if it is on
 + * @m: vfsmount being shut down
 + *
 + * If the accounting is turned on for a file in the subtree pointed to
 + * to by m, turn accounting off.  Done when m is about to die.
 + */
 +void acct_auto_close_mnt(struct vfsmount *m)
  {
++<<<<<<< HEAD
 +	struct bsd_acct_struct *acct;
 +
 +	spin_lock(&acct_lock);
 +restart:
 +	list_for_each_entry(acct, &acct_list, list)
 +		if (acct->file->f_path.mnt == m) {
 +			acct->count++;
 +			spin_unlock(&acct_lock);
 +			mutex_lock(&acct->lock);
 +			if (!acct->ns) {
 +				mutex_unlock(&acct->lock);
 +				spin_lock(&acct_lock);
 +				if (!--acct->count)
 +					kfree(acct);
 +				goto restart;
 +			}
 +			acct_kill(acct, NULL);
 +			spin_lock(&acct_lock);
 +			goto restart;
 +		}
 +	spin_unlock(&acct_lock);
++=======
+ 	rcu_read_lock();
+ 	while (1) {
+ 		struct hlist_node *p = ACCESS_ONCE(list->first);
+ 		if (!p)
+ 			break;
+ 		acct_kill(__acct_get(hlist_entry(p,
+ 						 struct bsd_acct_struct,
+ 						 m_list)), NULL);
+ 		rcu_read_lock();
+ 	}
+ 	rcu_read_unlock();
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  }
  
 -void acct_auto_close(struct hlist_head *list)
 +/**
 + * acct_auto_close - turn off a filesystem's accounting if it is on
 + * @sb: super block for the filesystem
 + *
 + * If the accounting is turned on for a file in the filesystem pointed
 + * to by sb, turn accounting off.
 + */
 +void acct_auto_close(struct super_block *sb)
  {
++<<<<<<< HEAD
 +	struct bsd_acct_struct *acct;
 +
 +	spin_lock(&acct_lock);
 +restart:
 +	list_for_each_entry(acct, &acct_list, list)
 +		if (acct->file->f_path.dentry->d_sb == sb) {
 +			acct->count++;
 +			spin_unlock(&acct_lock);
 +			mutex_lock(&acct->lock);
 +			if (!acct->ns) {
 +				mutex_unlock(&acct->lock);
 +				spin_lock(&acct_lock);
 +				if (!--acct->count)
 +					kfree(acct);
 +				goto restart;
 +			}
 +			acct_kill(acct, NULL);
 +			spin_lock(&acct_lock);
 +			goto restart;
 +		}
 +	spin_unlock(&acct_lock);
++=======
+ 	rcu_read_lock();
+ 	while (1) {
+ 		struct hlist_node *p = ACCESS_ONCE(list->first);
+ 		if (!p)
+ 			break;
+ 		acct_kill(__acct_get(hlist_entry(p,
+ 						 struct bsd_acct_struct,
+ 						 s_list)), NULL);
+ 		rcu_read_lock();
+ 	}
+ 	rcu_read_unlock();
++>>>>>>> 2798d4ce6160 (acct: get rid of acct_lock for acct->count)
  }
  
  void acct_exit_ns(struct pid_namespace *ns)
* Unmerged path kernel/acct.c
