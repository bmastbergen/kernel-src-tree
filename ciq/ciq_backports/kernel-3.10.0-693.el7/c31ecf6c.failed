xen/blkfront: Fix crash if backend doesn't follow the right states.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [block] xen-blkfront: Fix crash if backend doesn't follow the right states (Vitaly Kuznetsov) [1404734]
Rebuild_FUZZ: 97.74%
commit-author Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
commit c31ecf6c126dbc7f30234eaf6c4a079649a38de7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c31ecf6c.failed

We have split the setting up of all the resources in two steps:
1) talk_to_blkback  - which figures out the num_ring_pages (from
   the default value of zero), sets up shadow and so
2) blkfront_connect - does the real part of filling out the
   internal structures.

The problem is if we bypass the 1) step and go straight to 2)
and call blkfront_setup_indirect where we use the macro
BLK_RING_SIZE - which returns an negative value (because
sz is zero  - since num_ring_pages is zero - since it has never
been set).

We can fix this by making sure that we always have called
talk_to_blkback before going to blkfront_connect.

Or we could set in blkfront_probe info->nr_ring_pages = 1
to have a default value. But that looks odd - as we haven't
actually negotiated any ring size.

This patch changes XenbusStateConnected state to detect if
we haven't done the initial handshake - and if so continue
on as if were in XenbusStateInitWait state.

We also roll the error recovery (freeing the structure) into
talk_to_blkback error path - which is safe since that function
is only called from blkback_changed.

	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit c31ecf6c126dbc7f30234eaf6c4a079649a38de7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/xen-blkfront.c
diff --cc drivers/block/xen-blkfront.c
index f6a97f7f4ca5,8a8dc91c39f7..000000000000
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@@ -1347,7 -1866,10 +1347,14 @@@ again
  		xenbus_dev_fatal(dev, err, "%s", message);
   destroy_blkring:
  	blkif_free(info, 0);
++<<<<<<< HEAD
 + out:
++=======
+ 
+ 	kfree(info);
+ 	dev_set_drvdata(&dev->dev, NULL);
+ 
++>>>>>>> c31ecf6c126d (xen/blkfront: Fix crash if backend doesn't follow the right states.)
  	return err;
  }
  
* Unmerged path drivers/block/xen-blkfront.c
