bnxt_en: Add new hardware RFS mode.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Add new hardware RFS mode (Jonathan Toppins) [1382378]
Rebuild_FUZZ: 98.55%
commit-author Michael Chan <michael.chan@broadcom.com>
commit ae10ae740ad2befd92b6f5b2ab39220bce6e5da2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ae10ae74.failed

The existing hardware RFS mode uses one hardware RSS context block
per ring just to calculate the RSS hash.  This is very wasteful and
prevents VF functions from using it.  The new hardware mode shares
the same hardware RSS context for RSS placement and RFS steering.
This allows VFs to enable RFS.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ae10ae740ad2befd92b6f5b2ab39220bce6e5da2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 3d3cd9192d53,0ca530e9f73e..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -5888,6 -5999,17 +5907,20 @@@ skip_uc
  	return rc;
  }
  
++<<<<<<< HEAD
++=======
+ /* If the chip and firmware supports RFS */
+ static bool bnxt_rfs_supported(struct bnxt *bp)
+ {
+ 	if (BNXT_PF(bp) && !BNXT_CHIP_TYPE_NITRO_A0(bp))
+ 		return true;
+ 	if (bp->flags & BNXT_FLAG_NEW_RSS_CAP)
+ 		return true;
+ 	return false;
+ }
+ 
+ /* If runtime conditions support RFS */
++>>>>>>> ae10ae740ad2 (bnxt_en: Add new hardware RFS mode.)
  static bool bnxt_rfs_capable(struct bnxt *bp)
  {
  #ifdef CONFIG_RFS_ACCEL
@@@ -5898,10 -6019,16 +5931,20 @@@
  		return false;
  
  	vnics = 1 + bp->rx_nr_rings;
++<<<<<<< HEAD
 +	if (vnics > pf->max_rsscos_ctxs || vnics > pf->max_vnics) {
++=======
+ 	max_vnics = bnxt_get_max_func_vnics(bp);
+ 	max_rss_ctxs = bnxt_get_max_func_rss_ctxs(bp);
+ 
+ 	/* RSS contexts not a limiting factor */
+ 	if (bp->flags & BNXT_FLAG_NEW_RSS_CAP)
+ 		max_rss_ctxs = max_vnics;
+ 	if (vnics > max_vnics || vnics > max_rss_ctxs) {
++>>>>>>> ae10ae740ad2 (bnxt_en: Add new hardware RFS mode.)
  		netdev_warn(bp->dev,
  			    "Not enough resources to support NTUPLE filters, enough resources for up to %d rx rings\n",
 -			    min(max_rss_ctxs - 1, max_vnics - 1));
 +			    min(pf->max_rsscos_ctxs - 1, pf->max_vnics - 1));
  		return false;
  	}
  
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.h b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
index c1ee716cd1ac..cebac1780a4b 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@ -717,6 +717,7 @@ struct bnxt_vnic_info {
 #define BNXT_VNIC_RFS_FLAG	2
 #define BNXT_VNIC_MCAST_FLAG	4
 #define BNXT_VNIC_UCAST_FLAG	8
+#define BNXT_VNIC_RFS_NEW_RSS_FLAG	0x10
 };
 
 #if defined(CONFIG_BNXT_SRIOV)
