EDAC, amd64: Add AMD Fam17h family type and ops

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [edac] amd64: Add AMD Fam17h family type and ops (Suravee Suthikulpanit) [1303712]
Rebuild_FUZZ: 93.18%
commit-author Yazen Ghannam <Yazen.Ghannam@amd.com>
commit f1cbbec9fce958d3d71ed815a01c815b35533f1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f1cbbec9.failed

Add a family type and associated ops for Fam17h. Define a struct to hold
all the UMC registers that we need. Make this a part of struct amd64_pvt
in order to maximize code reuse in the rest of the driver.

	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
	Cc: Aravind Gopalakrishnan <aravindksg.lkml@gmail.com>
	Cc: linux-edac <linux-edac@vger.kernel.org>
	Cc: x86-ml <x86@kernel.org>
Link: http://lkml.kernel.org/r/1479423463-8536-10-git-send-email-Yazen.Ghannam@amd.com
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit f1cbbec9fce958d3d71ed815a01c815b35533f1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/amd64_edac.h
diff --cc drivers/edac/amd64_edac.h
index 42bc4a8e049e,ada39f165a9b..000000000000
--- a/drivers/edac/amd64_edac.h
+++ b/drivers/edac/amd64_edac.h
@@@ -170,6 -116,10 +170,13 @@@
  #define PCI_DEVICE_ID_AMD_15H_M60H_NB_F2 0x1572
  #define PCI_DEVICE_ID_AMD_16H_NB_F1	0x1531
  #define PCI_DEVICE_ID_AMD_16H_NB_F2	0x1532
++<<<<<<< HEAD
++=======
+ #define PCI_DEVICE_ID_AMD_16H_M30H_NB_F1 0x1581
+ #define PCI_DEVICE_ID_AMD_16H_M30H_NB_F2 0x1582
+ #define PCI_DEVICE_ID_AMD_17H_DF_F0	0x1460
+ #define PCI_DEVICE_ID_AMD_17H_DF_F6	0x1466
++>>>>>>> f1cbbec9fce9 (EDAC, amd64: Add AMD Fam17h family type and ops)
  
  /*
   * Function 1 - Address Map
@@@ -315,6 -267,8 +322,11 @@@ enum amd_families 
  	F15_M30H_CPUS,
  	F15_M60H_CPUS,
  	F16_CPUS,
++<<<<<<< HEAD
++=======
+ 	F16_M30H_CPUS,
+ 	F17_CPUS,
++>>>>>>> f1cbbec9fce9 (EDAC, amd64: Add AMD Fam17h family type and ops)
  	NUM_FAMILIES,
  };
  
@@@ -507,7 -447,7 +525,11 @@@ struct low_ops 
  
  struct amd64_family_type {
  	const char *ctl_name;
++<<<<<<< HEAD
 +	u16 f1_id, f3_id;
++=======
+ 	u16 f0_id, f1_id, f2_id, f6_id;
++>>>>>>> f1cbbec9fce9 (EDAC, amd64: Add AMD Fam17h family type and ops)
  	struct low_ops ops;
  };
  
diff --git a/drivers/edac/amd64_edac.c b/drivers/edac/amd64_edac.c
index e233d8dbf7f6..c872fac60ec8 100644
--- a/drivers/edac/amd64_edac.c
+++ b/drivers/edac/amd64_edac.c
@@ -1197,6 +1197,19 @@ static int f1x_early_channel_count(struct amd64_pvt *pvt)
 	return channels;
 }
 
+static int f17_early_channel_count(struct amd64_pvt *pvt)
+{
+	int i, channels = 0;
+
+	/* SDP Control bit 31 (SdpInit) is clear for unused UMC channels */
+	for (i = 0; i < NUM_UMCS; i++)
+		channels += !!(pvt->umc[i].sdp_ctrl & UMC_SDP_INIT);
+
+	amd64_info("MCT channel count: %d\n", channels);
+
+	return channels;
+}
+
 static int ddr3_cs_size(unsigned i, bool dct_width)
 {
 	unsigned shift = 0;
@@ -1324,6 +1337,23 @@ static int f16_dbam_to_chip_select(struct amd64_pvt *pvt, u8 dct,
 		return ddr3_cs_size(cs_mode, false);
 }
 
+static int f17_base_addr_to_cs_size(struct amd64_pvt *pvt, u8 umc,
+				    unsigned int cs_mode, int csrow_nr)
+{
+	u32 base_addr = pvt->csels[umc].csbases[csrow_nr];
+
+	/*  Each mask is used for every two base addresses. */
+	u32 addr_mask = pvt->csels[umc].csmasks[csrow_nr >> 1];
+
+	/*  Register [31:1] = Address [39:9]. Size is in kBs here. */
+	u32 size = ((addr_mask >> 1) - (base_addr >> 1) + 1) >> 1;
+
+	edac_dbg(1, "BaseAddr: 0x%x, AddrMask: 0x%x\n", base_addr, addr_mask);
+
+	/* Return size in MBs. */
+	return size >> 10;
+}
+
 static void read_dram_ctl_register(struct amd64_pvt *pvt)
 {
 
@@ -1958,6 +1988,15 @@ static struct amd64_family_type family_types[] = {
 			.dbam_to_cs		= f16_dbam_to_chip_select,
 		}
 	},
+	[F17_CPUS] = {
+		.ctl_name = "F17h",
+		.f0_id = PCI_DEVICE_ID_AMD_17H_DF_F0,
+		.f6_id = PCI_DEVICE_ID_AMD_17H_DF_F6,
+		.ops = {
+			.early_channel_count	= f17_early_channel_count,
+			.dbam_to_cs		= f17_base_addr_to_cs_size,
+		}
+	},
 };
 
 /*
@@ -2781,6 +2820,11 @@ static struct amd64_family_type *per_family_init(struct amd64_pvt *pvt)
 		pvt->ops	= &family_types[F16_CPUS].ops;
 		break;
 
+	case 0x17:
+		fam_type	= &family_types[F17_CPUS];
+		pvt->ops	= &family_types[F17_CPUS].ops;
+		break;
+
 	default:
 		amd64_err("Unsupported family!\n");
 		return NULL;
* Unmerged path drivers/edac/amd64_edac.h
