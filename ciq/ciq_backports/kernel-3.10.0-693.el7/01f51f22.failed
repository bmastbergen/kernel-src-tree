net/mlx5: E-Switch, Enable/disable ACL tables on demand

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: E-Switch, Enable/disable ACL tables on demand (Don Dutile) [1383290 1417284]
Rebuild_FUZZ: 96.23%
commit-author Mohamad Haj Yahia <mohamad@mellanox.com>
commit 01f51f2247250eb69d2fd345c498eedbb078bb56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/01f51f22.failed

Enable ingress/egress ACL tables only when we need to configure ACL
rules.
Disable ingress/egress ACL tables once all ACL rules are removed.

All VF outgoing/incoming traffic need to go through the ingress/egress ACL
tables.
Adding/Removing these tables on demand will save unnecessary hops in the
flow steering when the ACL tables are empty.

	Signed-off-by: Mohamad Haj Yahia <mohamad@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 01f51f2247250eb69d2fd345c498eedbb078bb56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index 59fdb2081852,48c891982d7d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@@ -981,18 -988,34 +983,44 @@@ static int esw_vport_ingress_config(str
  	u32 *match_v;
  	u32 *match_c;
  	int err = 0;
 -	u8 *smac_v;
  
++<<<<<<< HEAD
 +	if (IS_ERR_OR_NULL(vport->ingress.acl)) {
 +		esw_warn(esw->dev,
 +			 "vport[%d] configure ingress rules failed, ingress acl is not initialized!\n",
 +			 vport->vport);
 +		return -EPERM;
++=======
+ 	if (vport->spoofchk) {
+ 		err = mlx5_query_nic_vport_mac_address(esw->dev, vport->vport, smac);
+ 		if (err) {
+ 			esw_warn(esw->dev,
+ 				 "vport[%d] configure ingress rules failed, query smac failed, err(%d)\n",
+ 				 vport->vport, err);
+ 			return err;
+ 		}
+ 
+ 		if (!is_valid_ether_addr(smac)) {
+ 			mlx5_core_warn(esw->dev,
+ 				       "vport[%d] configure ingress rules failed, illegal mac with spoofchk\n",
+ 				       vport->vport);
+ 			return -EPERM;
+ 		}
++>>>>>>> 01f51f224725 (net/mlx5: E-Switch, Enable/disable ACL tables on demand)
  	}
  
  	esw_vport_cleanup_ingress_rules(esw, vport);
  
++<<<<<<< HEAD
 +	if (!vport->vlan && !vport->qos)
++=======
+ 	if (!vport->vlan && !vport->qos && !vport->spoofchk) {
+ 		esw_vport_disable_ingress_acl(esw, vport);
++>>>>>>> 01f51f224725 (net/mlx5: E-Switch, Enable/disable ACL tables on demand)
  		return 0;
+ 	}
+ 
+ 	esw_vport_enable_ingress_acl(esw, vport);
  
  	esw_debug(esw->dev,
  		  "vport[%d] configure ingress rules, vlan(%d) qos(%d)\n",
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
