separate namespace-independent parts of filling acct_t

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit cdd37e23092c3c6fbbb2e611f8c3d18e676bf28f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/cdd37e23.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit cdd37e23092c3c6fbbb2e611f8c3d18e676bf28f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/acct.c
diff --cc kernel/acct.c
index 35610572400a,efa891beeaa3..000000000000
--- a/kernel/acct.c
+++ b/kernel/acct.c
@@@ -454,16 -506,15 +506,18 @@@ static void fill_ac(acct_t *ac
  static void do_acct_process(struct bsd_acct_struct *acct,
  		struct pid_namespace *ns, struct file *file)
  {
- 	struct pacct_struct *pacct = &current->signal->pacct;
  	acct_t ac;
 +	mm_segment_t fs;
  	unsigned long flim;
++<<<<<<< HEAD
 +	u64 elapsed;
 +	u64 run_time;
 +	struct timespec uptime;
 +	struct tty_struct *tty;
++=======
++>>>>>>> cdd37e23092c (separate namespace-independent parts of filling acct_t)
  	const struct cred *orig_cred;
  
 -	/*
 -	 * Accounting records are not subject to resource limits.
 -	 */
 -	flim = current->signal->rlim[RLIMIT_FSIZE].rlim_cur;
 -	current->signal->rlim[RLIMIT_FSIZE].rlim_cur = RLIM_INFINITY;
  	/* Perform file operations on behalf of whoever enabled accounting */
  	orig_cred = override_creds(file->f_cred);
  
@@@ -474,38 -525,7 +528,42 @@@
  	if (!check_free_space(acct, file))
  		goto out;
  
++<<<<<<< HEAD
 +	/*
 +	 * Fill the accounting struct with the needed info as recorded
 +	 * by the different kernel functions.
 +	 */
 +	memset(&ac, 0, sizeof(acct_t));
 +
 +	ac.ac_version = ACCT_VERSION | ACCT_BYTEORDER;
 +	strlcpy(ac.ac_comm, current->comm, sizeof(ac.ac_comm));
 +
 +	/* calculate run_time in nsec*/
 +	do_posix_clock_monotonic_gettime(&uptime);
 +	run_time = (u64)uptime.tv_sec*NSEC_PER_SEC + uptime.tv_nsec;
 +	run_time -= (u64)current->group_leader->start_time.tv_sec * NSEC_PER_SEC
 +		       + current->group_leader->start_time.tv_nsec;
 +	/* convert nsec -> AHZ */
 +	elapsed = nsec_to_AHZ(run_time);
 +#if ACCT_VERSION==3
 +	ac.ac_etime = encode_float(elapsed);
 +#else
 +	ac.ac_etime = encode_comp_t(elapsed < (unsigned long) -1l ?
 +	                       (unsigned long) elapsed : (unsigned long) -1l);
 +#endif
 +#if ACCT_VERSION==1 || ACCT_VERSION==2
 +	{
 +		/* new enlarged etime field */
 +		comp2_t etime = encode_comp2_t(elapsed);
 +		ac.ac_etime_hi = etime >> 16;
 +		ac.ac_etime_lo = (u16) etime;
 +	}
 +#endif
 +	do_div(elapsed, AHZ);
 +	ac.ac_btime = get_seconds() - elapsed;
++=======
+ 	fill_ac(&ac);
++>>>>>>> cdd37e23092c (separate namespace-independent parts of filling acct_t)
  	/* we really need to bite the bullet and change layout */
  	ac.ac_uid = from_kuid_munged(file->f_cred->user_ns, orig_cred->uid);
  	ac.ac_gid = from_kgid_munged(file->f_cred->user_ns, orig_cred->gid);
* Unmerged path kernel/acct.c
