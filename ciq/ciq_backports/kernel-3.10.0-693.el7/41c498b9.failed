bridge: restore br_setlink back to original

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Scott Feldman <sfeldma@gmail.com>
commit 41c498b9359e360f08723b7605ec0c40926ec415
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/41c498b9.failed

This is revert of:

commit 68e331c785b8 ("bridge: offload bridge port attributes to switch asic
if feature flag set")

Restore br_setlink back to original and don't call into SELF port driver.
rtnetlink.c:bridge_setlink() already does a call into port driver for SELF.

bridge set link cmd defaults to MASTER.  From man page for bridge link set
cmd:

       self   link setting is configured on specified physical device

       master link setting is configured on the software bridge (default)

The link setting has two values: the device-side value and the software
bridge-side value.  These are independent and settable using the bridge
link set cmd by specifying some combination of [master] | [self].
Furthermore, the device-side and bridge-side settings have their own
initial value, viewable from bridge -d link show cmd.

Restoring br_setlink back to original makes rocker (the only in-kernel user
of SELF link settings) work as first implement: two-sided values.

It's true that when both MASTER and SELF are specified from the command,
two netlink notifications are generated, one for each side of the settings.
The user-space app can distiquish between the two notifications by
observing the MASTER or SELF flag.

	Signed-off-by: Scott Feldman <sfeldma@gmail.com>
	Acked-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 41c498b9359e360f08723b7605ec0c40926ec415)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_netlink.c
diff --cc net/bridge/br_netlink.c
index 389930889e03,e9b943574542..000000000000
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@@ -543,16 -628,6 +543,19 @@@ int br_setlink(struct net_device *dev, 
  				afspec, RTM_SETLINK);
  	}
  
++<<<<<<< HEAD
 +	if (p && !(flags & BRIDGE_FLAGS_SELF)) {
 +		/* set bridge attributes in hardware if supported
 +		 */
 +		ret_offload = netdev_switch_port_bridge_setlink(dev, nlh,
 +								flags);
 +		if (ret_offload && ret_offload != -EOPNOTSUPP)
 +			br_warn(p->br, "error setting attrs on port %u(%s)\n",
 +				(unsigned int)p->port_no, p->dev->name);
 +	}
 +
++=======
++>>>>>>> 41c498b9359e (bridge: restore br_setlink back to original)
  	if (err == 0)
  		br_ifinfo_notify(RTM_NEWLINK, p);
  out:
* Unmerged path net/bridge/br_netlink.c
