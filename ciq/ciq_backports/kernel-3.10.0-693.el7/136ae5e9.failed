HID: wacom: power_supply: remove ac information

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: power_supply: remove ac information (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 94.38%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 136ae5e9bacebbd8f2a94e8dea69f0dc22fbc8c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/136ae5e9.failed

Looks like upowerd is ignoring this since October 2013, so there is
no need to keep this around in the kernel.
And as mentioned in 8aaa592 (linux: Ignore ACs coming from devices) in
the upower tree, "We already have enough information on the device
battery".

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 136ae5e9bacebbd8f2a94e8dea69f0dc22fbc8c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom.h
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom.h
index 87d2c48e3adc,26a8a057b624..000000000000
--- a/drivers/hid/wacom.h
+++ b/drivers/hid/wacom.h
@@@ -109,18 -107,68 +109,70 @@@ MODULE_LICENSE(DRIVER_LICENSE)
  #define USB_VENDOR_ID_WACOM	0x056a
  #define USB_VENDOR_ID_LENOVO	0x17ef
  
++<<<<<<< HEAD
++=======
+ enum wacom_worker {
+ 	WACOM_WORKER_WIRELESS,
+ 	WACOM_WORKER_BATTERY,
+ 	WACOM_WORKER_REMOTE,
+ };
+ 
+ struct wacom;
+ 
+ struct wacom_led {
+ 	struct led_classdev cdev;
+ 	struct led_trigger trigger;
+ 	struct wacom *wacom;
+ 	unsigned int group;
+ 	unsigned int id;
+ 	u8 llv;
+ 	u8 hlv;
+ 	bool held;
+ };
+ 
+ struct wacom_group_leds {
+ 	u8 select; /* status led selector (0..3) */
+ 	struct wacom_led *leds;
+ 	unsigned int count;
+ 	struct device *dev;
+ };
+ 
+ struct wacom_battery {
+ 	struct power_supply_desc bat_desc;
+ 	struct power_supply *battery;
+ 	char bat_name[WACOM_NAME_MAX];
+ 	int battery_capacity;
+ 	int bat_charging;
+ 	int bat_connected;
+ 	int ps_connected;
+ };
+ 
+ struct wacom_remote {
+ 	spinlock_t remote_lock;
+ 	struct kfifo remote_fifo;
+ 	struct kobject *remote_dir;
+ 	struct {
+ 		struct attribute_group group;
+ 		u32 serial;
+ 		struct input_dev *input;
+ 		bool registered;
+ 		struct wacom_battery battery;
+ 	} remotes[WACOM_MAX_REMOTES];
+ };
+ 
++>>>>>>> 136ae5e9bace (HID: wacom: power_supply: remove ac information)
  struct wacom {
 +	dma_addr_t data_dma;
  	struct usb_device *usbdev;
  	struct usb_interface *intf;
 +	struct urb *irq;
  	struct wacom_wac wacom_wac;
 -	struct hid_device *hdev;
  	struct mutex lock;
 -	struct work_struct wireless_work;
 -	struct work_struct battery_work;
 -	struct work_struct remote_work;
 -	struct wacom_remote *remote;
 -	struct wacom_leds {
 -		struct wacom_group_leds *groups;
 -		unsigned int count;
 +	struct work_struct work;
 +	bool open;
 +	char phys[32];
 +	struct wacom_led {
 +		u8 select[2]; /* status led selector (0..3) */
  		u8 llv;       /* status led brightness no button (1..127) */
  		u8 hlv;       /* status led brightness button pressed (1..127) */
  		u8 img_lum;   /* OLED matrix display brightness */
diff --cc drivers/hid/wacom_sys.c
index e75b5002a526,d8f3d3dc2c88..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1037,13 -1243,14 +1037,14 @@@ static int wacom_initialize_leds(struc
  	return 0;
  }
  
 -static int wacom_initialize_leds(struct wacom *wacom)
 +static void wacom_destroy_leds(struct wacom *wacom)
  {
 -	int error;
 +	if (!wacom->led_initialized)
 +		return;
  
 -	if (!(wacom->wacom_wac.features.device_type & WACOM_DEVICETYPE_PAD))
 -		return 0;
++<<<<<<< HEAD
 +	wacom->led_initialized = false;
  
 -	/* Initialize default values */
  	switch (wacom->wacom_wac.features.type) {
  	case INTUOS4S:
  	case INTUOS4:
@@@ -1064,98 -1296,725 +1065,152 @@@
  	case INTUOSPS:
  	case INTUOSPM:
  	case INTUOSPL:
 -		wacom->led.llv = 32;
 -		wacom->led.max_llv = 96;
 -
 -		error = wacom_leds_alloc_and_register(wacom, 1, 4, false);
 -		if (error) {
 -			hid_err(wacom->hdev,
 -				"cannot create leds err: %d\n", error);
 -			return error;
 -		}
 -
 -		error = wacom_devm_sysfs_create_group(wacom,
 -						      &intuos5_led_attr_group);
 +		if (wacom->wacom_wac.features.device_type == BTN_TOOL_PEN)
 +			sysfs_remove_group(&wacom->intf->dev.kobj,
 +					   &intuos5_led_attr_group);
  		break;
 -
 -	case REMOTE:
 -		wacom->led.llv = 255;
 -		wacom->led.max_llv = 255;
 -		error = wacom_led_groups_allocate(wacom, 5);
 -		if (error) {
 -			hid_err(wacom->hdev,
 -				"cannot create leds err: %d\n", error);
 -			return error;
 -		}
 -		return 0;
 -
 -	default:
 -		return 0;
 -	}
 -
 -	if (error) {
 -		hid_err(wacom->hdev,
 -			"cannot create sysfs group err: %d\n", error);
 -		return error;
 -	}
 -	wacom_led_control(wacom);
 -
 -	return 0;
 -}
 -
 -static enum power_supply_property wacom_battery_props[] = {
 -	POWER_SUPPLY_PROP_PRESENT,
 -	POWER_SUPPLY_PROP_STATUS,
 -	POWER_SUPPLY_PROP_SCOPE,
 -	POWER_SUPPLY_PROP_CAPACITY
 -};
 -
 -static int wacom_battery_get_property(struct power_supply *psy,
 -				      enum power_supply_property psp,
 -				      union power_supply_propval *val)
 -{
 -	struct wacom_battery *battery = power_supply_get_drvdata(psy);
 -	int ret = 0;
 -
 -	switch (psp) {
 -		case POWER_SUPPLY_PROP_PRESENT:
 -			val->intval = battery->bat_connected;
 -			break;
 -		case POWER_SUPPLY_PROP_SCOPE:
 -			val->intval = POWER_SUPPLY_SCOPE_DEVICE;
 -			break;
 -		case POWER_SUPPLY_PROP_CAPACITY:
 -			val->intval = battery->battery_capacity;
 -			break;
 -		case POWER_SUPPLY_PROP_STATUS:
 -			if (battery->bat_charging)
 -				val->intval = POWER_SUPPLY_STATUS_CHARGING;
 -			else if (battery->battery_capacity == 100 &&
 -				    battery->ps_connected)
 -				val->intval = POWER_SUPPLY_STATUS_FULL;
 -			else if (battery->ps_connected)
 -				val->intval = POWER_SUPPLY_STATUS_NOT_CHARGING;
 -			else
 -				val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
 -			break;
 -		default:
 -			ret = -EINVAL;
 -			break;
 -	}
 -
 -	return ret;
 -}
 -
 -static int __wacom_initialize_battery(struct wacom *wacom,
 -				      struct wacom_battery *battery)
 -{
 -	static atomic_t battery_no = ATOMIC_INIT(0);
 -	struct device *dev = &wacom->hdev->dev;
 -	struct power_supply_config psy_cfg = { .drv_data = battery, };
 -	struct power_supply *ps_bat;
 -	struct power_supply_desc *bat_desc = &battery->bat_desc;
 -	unsigned long n;
 -	int error;
 -
 -	if (!devres_open_group(dev, bat_desc, GFP_KERNEL))
 -		return -ENOMEM;
 -
 -	n = atomic_inc_return(&battery_no) - 1;
 -
 -	bat_desc->properties = wacom_battery_props;
 -	bat_desc->num_properties = ARRAY_SIZE(wacom_battery_props);
 -	bat_desc->get_property = wacom_battery_get_property;
 -	sprintf(battery->bat_name, "wacom_battery_%ld", n);
 -	bat_desc->name = battery->bat_name;
 -	bat_desc->type = POWER_SUPPLY_TYPE_USB;
 -	bat_desc->use_for_apm = 0;
 -
 -	ps_bat = devm_power_supply_register(dev, bat_desc, &psy_cfg);
 -	if (IS_ERR(ps_bat)) {
 -		error = PTR_ERR(ps_bat);
 -		goto err;
 -	}
 -
 -	power_supply_powers(ps_bat, &wacom->hdev->dev);
 -
 -	battery->battery = ps_bat;
 -
 -	devres_close_group(dev, bat_desc);
 -	return 0;
 -
 -err:
 -	devres_release_group(dev, bat_desc);
 -	return error;
 -}
 -
 -static int wacom_initialize_battery(struct wacom *wacom)
 -{
 -	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY)
 -		return __wacom_initialize_battery(wacom, &wacom->battery);
 -
 -	return 0;
 -}
 -
 -static void wacom_destroy_battery(struct wacom *wacom)
 -{
 -	if (wacom->battery.battery) {
 -		devres_release_group(&wacom->hdev->dev,
 -				     &wacom->battery.bat_desc);
 -		wacom->battery.battery = NULL;
 -	}
 -}
 -
 -static ssize_t wacom_show_speed(struct device *dev,
 -				struct device_attribute
 -				*attr, char *buf)
 -{
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -
 -	return snprintf(buf, PAGE_SIZE, "%i\n", wacom->wacom_wac.bt_high_speed);
 -}
 -
 -static ssize_t wacom_store_speed(struct device *dev,
 -				struct device_attribute *attr,
 -				const char *buf, size_t count)
 -{
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	u8 new_speed;
 -
 -	if (kstrtou8(buf, 0, &new_speed))
 -		return -EINVAL;
 -
 -	if (new_speed != 0 && new_speed != 1)
 -		return -EINVAL;
 -
 -	wacom_bt_query_tablet_data(hdev, new_speed, &wacom->wacom_wac.features);
 -
 -	return count;
 -}
 -
 -static DEVICE_ATTR(speed, DEV_ATTR_RW_PERM,
 -		wacom_show_speed, wacom_store_speed);
 -
 -
 -static ssize_t wacom_show_remote_mode(struct kobject *kobj,
 -				      struct kobj_attribute *kattr,
 -				      char *buf, int index)
 -{
 -	struct device *dev = kobj_to_dev(kobj->parent);
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	u8 mode;
 -
 -	mode = wacom->led.groups[index].select;
 -	if (mode >= 0 && mode < 3)
 -		return snprintf(buf, PAGE_SIZE, "%d\n", mode);
 -	else
 -		return snprintf(buf, PAGE_SIZE, "%d\n", -1);
 -}
 -
 -#define DEVICE_EKR_ATTR_GROUP(SET_ID)					\
 -static ssize_t wacom_show_remote##SET_ID##_mode(struct kobject *kobj,	\
 -			       struct kobj_attribute *kattr, char *buf)	\
 -{									\
 -	return wacom_show_remote_mode(kobj, kattr, buf, SET_ID);	\
 -}									\
 -static struct kobj_attribute remote##SET_ID##_mode_attr = {		\
 -	.attr = {.name = "remote_mode",					\
 -		.mode = DEV_ATTR_RO_PERM},				\
 -	.show = wacom_show_remote##SET_ID##_mode,			\
 -};									\
 -static struct attribute *remote##SET_ID##_serial_attrs[] = {		\
 -	&remote##SET_ID##_mode_attr.attr,				\
 -	NULL								\
 -};									\
 -static struct attribute_group remote##SET_ID##_serial_group = {		\
 -	.name = NULL,							\
 -	.attrs = remote##SET_ID##_serial_attrs,				\
 -}
 -
 -DEVICE_EKR_ATTR_GROUP(0);
 -DEVICE_EKR_ATTR_GROUP(1);
 -DEVICE_EKR_ATTR_GROUP(2);
 -DEVICE_EKR_ATTR_GROUP(3);
 -DEVICE_EKR_ATTR_GROUP(4);
 -
 -static int wacom_remote_create_attr_group(struct wacom *wacom, __u32 serial,
 -					  int index)
 -{
 -	int error = 0;
 -	struct wacom_remote *remote = wacom->remote;
 -
 -	remote->remotes[index].group.name = devm_kasprintf(&wacom->hdev->dev,
 -							  GFP_KERNEL,
 -							  "%d", serial);
 -	if (!remote->remotes[index].group.name)
 -		return -ENOMEM;
 -
 -	error = __wacom_devm_sysfs_create_group(wacom, remote->remote_dir,
 -						&remote->remotes[index].group);
 -	if (error) {
 -		remote->remotes[index].group.name = NULL;
 -		hid_err(wacom->hdev,
 -			"cannot create sysfs group err: %d\n", error);
 -		return error;
 -	}
 -
 -	return 0;
 -}
 -
 -static int wacom_cmd_unpair_remote(struct wacom *wacom, unsigned char selector)
 -{
 -	const size_t buf_size = 2;
 -	unsigned char *buf;
 -	int retval;
 -
 -	buf = kzalloc(buf_size, GFP_KERNEL);
 -	if (!buf)
 -		return -ENOMEM;
 -
 -	buf[0] = WAC_CMD_DELETE_PAIRING;
 -	buf[1] = selector;
 -
 -	retval = wacom_set_report(wacom->hdev, HID_OUTPUT_REPORT, buf,
 -				  buf_size, WAC_CMD_RETRIES);
 -	kfree(buf);
 -
 -	return retval;
 -}
 -
 -static ssize_t wacom_store_unpair_remote(struct kobject *kobj,
 -					 struct kobj_attribute *attr,
 -					 const char *buf, size_t count)
 -{
 -	unsigned char selector = 0;
 -	struct device *dev = kobj_to_dev(kobj->parent);
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	int err;
 -
 -	if (!strncmp(buf, "*\n", 2)) {
 -		selector = WAC_CMD_UNPAIR_ALL;
 -	} else {
 -		hid_info(wacom->hdev, "remote: unrecognized unpair code: %s\n",
 -			 buf);
 -		return -1;
 -	}
 -
 -	mutex_lock(&wacom->lock);
 -
 -	err = wacom_cmd_unpair_remote(wacom, selector);
 -	mutex_unlock(&wacom->lock);
 -
 -	return err < 0 ? err : count;
 -}
 -
 -static struct kobj_attribute unpair_remote_attr = {
 -	.attr = {.name = "unpair_remote", .mode = 0200},
 -	.store = wacom_store_unpair_remote,
 -};
 -
 -static const struct attribute *remote_unpair_attrs[] = {
 -	&unpair_remote_attr.attr,
 -	NULL
 -};
 -
 -static void wacom_remotes_destroy(void *data)
 -{
 -	struct wacom *wacom = data;
 -	struct wacom_remote *remote = wacom->remote;
 -
 -	if (!remote)
 -		return;
 -
 -	kobject_put(remote->remote_dir);
 -	kfifo_free(&remote->remote_fifo);
 -	wacom->remote = NULL;
 -}
 -
 -static int wacom_initialize_remotes(struct wacom *wacom)
 -{
 -	int error = 0;
 -	struct wacom_remote *remote;
 -	int i;
 -
 -	if (wacom->wacom_wac.features.type != REMOTE)
 -		return 0;
 -
 -	remote = devm_kzalloc(&wacom->hdev->dev, sizeof(*wacom->remote),
 -			      GFP_KERNEL);
 -	if (!remote)
 -		return -ENOMEM;
 -
 -	wacom->remote = remote;
 -
 -	spin_lock_init(&remote->remote_lock);
 -
 -	error = kfifo_alloc(&remote->remote_fifo,
 -			5 * sizeof(struct wacom_remote_data),
 -			GFP_KERNEL);
 -	if (error) {
 -		hid_err(wacom->hdev, "failed allocating remote_fifo\n");
 -		return -ENOMEM;
 -	}
 -
 -	remote->remotes[0].group = remote0_serial_group;
 -	remote->remotes[1].group = remote1_serial_group;
 -	remote->remotes[2].group = remote2_serial_group;
 -	remote->remotes[3].group = remote3_serial_group;
 -	remote->remotes[4].group = remote4_serial_group;
 -
 -	remote->remote_dir = kobject_create_and_add("wacom_remote",
 -						    &wacom->hdev->dev.kobj);
 -	if (!remote->remote_dir)
 -		return -ENOMEM;
 -
 -	error = sysfs_create_files(remote->remote_dir, remote_unpair_attrs);
 -
 -	if (error) {
 -		hid_err(wacom->hdev,
 -			"cannot create sysfs group err: %d\n", error);
 -		return error;
 -	}
 -
 -	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
 -		wacom->led.groups[i].select = WACOM_STATUS_UNKNOWN;
 -		remote->remotes[i].serial = 0;
 -	}
 -
 -	error = devm_add_action_or_reset(&wacom->hdev->dev,
 -					 wacom_remotes_destroy, wacom);
 -	if (error)
 -		return error;
 -
 -	return 0;
 -}
 -
 -static struct input_dev *wacom_allocate_input(struct wacom *wacom)
 -{
 -	struct input_dev *input_dev;
 -	struct hid_device *hdev = wacom->hdev;
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -
 -	input_dev = devm_input_allocate_device(&hdev->dev);
 -	if (!input_dev)
 -		return NULL;
 -
 -	input_dev->name = wacom_wac->features.name;
 -	input_dev->phys = hdev->phys;
 -	input_dev->dev.parent = &hdev->dev;
 -	input_dev->open = wacom_open;
 -	input_dev->close = wacom_close;
 -	input_dev->uniq = hdev->uniq;
 -	input_dev->id.bustype = hdev->bus;
 -	input_dev->id.vendor  = hdev->vendor;
 -	input_dev->id.product = wacom_wac->pid ? wacom_wac->pid : hdev->product;
 -	input_dev->id.version = hdev->version;
 -	input_set_drvdata(input_dev, wacom);
 -
 -	return input_dev;
 -}
 -
 -static int wacom_allocate_inputs(struct wacom *wacom)
 -{
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -
 -	wacom_wac->pen_input = wacom_allocate_input(wacom);
 -	wacom_wac->touch_input = wacom_allocate_input(wacom);
 -	wacom_wac->pad_input = wacom_allocate_input(wacom);
 -	if (!wacom_wac->pen_input ||
 -	    !wacom_wac->touch_input ||
 -	    !wacom_wac->pad_input)
 -		return -ENOMEM;
 -
 -	wacom_wac->pen_input->name = wacom_wac->pen_name;
 -	wacom_wac->touch_input->name = wacom_wac->touch_name;
 -	wacom_wac->pad_input->name = wacom_wac->pad_name;
 -
 -	return 0;
 -}
 -
 -static int wacom_register_inputs(struct wacom *wacom)
 -{
 -	struct input_dev *pen_input_dev, *touch_input_dev, *pad_input_dev;
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -	int error = 0;
 -
 -	pen_input_dev = wacom_wac->pen_input;
 -	touch_input_dev = wacom_wac->touch_input;
 -	pad_input_dev = wacom_wac->pad_input;
 -
 -	if (!pen_input_dev || !touch_input_dev || !pad_input_dev)
 -		return -EINVAL;
 -
 -	error = wacom_setup_pen_input_capabilities(pen_input_dev, wacom_wac);
 -	if (error) {
 -		/* no pen in use on this interface */
 -		input_free_device(pen_input_dev);
 -		wacom_wac->pen_input = NULL;
 -		pen_input_dev = NULL;
 -	} else {
 -		error = input_register_device(pen_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 -
 -	error = wacom_setup_touch_input_capabilities(touch_input_dev, wacom_wac);
 -	if (error) {
 -		/* no touch in use on this interface */
 -		input_free_device(touch_input_dev);
 -		wacom_wac->touch_input = NULL;
 -		touch_input_dev = NULL;
 -	} else {
 -		error = input_register_device(touch_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 -
 -	error = wacom_setup_pad_input_capabilities(pad_input_dev, wacom_wac);
 -	if (error) {
 -		/* no pad in use on this interface */
 -		input_free_device(pad_input_dev);
 -		wacom_wac->pad_input = NULL;
 -		pad_input_dev = NULL;
 -	} else {
 -		error = input_register_device(pad_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 -
 -	return 0;
 -
 -fail:
 -	wacom_wac->pad_input = NULL;
 -	wacom_wac->touch_input = NULL;
 -	wacom_wac->pen_input = NULL;
 -	return error;
 -}
 -
 -/*
 - * Not all devices report physical dimensions from HID.
 - * Compute the default from hardcoded logical dimension
 - * and resolution before driver overwrites them.
 - */
 -static void wacom_set_default_phy(struct wacom_features *features)
 -{
 -	if (features->x_resolution) {
 -		features->x_phy = (features->x_max * 100) /
 -					features->x_resolution;
 -		features->y_phy = (features->y_max * 100) /
 -					features->y_resolution;
 -	}
 -}
 -
 -static void wacom_calculate_res(struct wacom_features *features)
 -{
 -	/* set unit to "100th of a mm" for devices not reported by HID */
 -	if (!features->unit) {
 -		features->unit = 0x11;
 -		features->unitExpo = -3;
 -	}
 -
 -	features->x_resolution = wacom_calc_hid_res(features->x_max,
 -						    features->x_phy,
 -						    features->unit,
 -						    features->unitExpo);
 -	features->y_resolution = wacom_calc_hid_res(features->y_max,
 -						    features->y_phy,
 -						    features->unit,
 -						    features->unitExpo);
 -}
 -
 -void wacom_battery_work(struct work_struct *work)
 -{
 -	struct wacom *wacom = container_of(work, struct wacom, battery_work);
 -
 -	if ((wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
 -	     !wacom->battery.battery) {
 -		wacom_initialize_battery(wacom);
 -	}
 -	else if (!(wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
 -		 wacom->battery.battery) {
 -		wacom_destroy_battery(wacom);
 -	}
 -}
 -
 -static size_t wacom_compute_pktlen(struct hid_device *hdev)
 -{
 -	struct hid_report_enum *report_enum;
 -	struct hid_report *report;
 -	size_t size = 0;
 -
 -	report_enum = hdev->report_enum + HID_INPUT_REPORT;
 -
 -	list_for_each_entry(report, &report_enum->report_list, list) {
 -		size_t report_size = hid_report_len(report);
 -		if (report_size > size)
 -			size = report_size;
  	}
 -
 -	return size;
  }
  
 -static void wacom_update_name(struct wacom *wacom, const char *suffix)
 -{
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	struct wacom_features *features = &wacom_wac->features;
 -	char name[WACOM_NAME_MAX];
 -
 -	/* Generic devices name unspecified */
 -	if ((features->type == HID_GENERIC) && !strcmp("Wacom HID", features->name)) {
 -		if (strstr(wacom->hdev->name, "Wacom") ||
 -		    strstr(wacom->hdev->name, "wacom") ||
 -		    strstr(wacom->hdev->name, "WACOM")) {
 -			/* name is in HID descriptor, use it */
 -			strlcpy(name, wacom->hdev->name, sizeof(name));
 -
 -			/* strip out excess whitespaces */
 -			while (1) {
 -				char *gap = strstr(name, "  ");
 -				if (gap == NULL)
 -					break;
 -				/* shift everything including the terminator */
 -				memmove(gap, gap+1, strlen(gap));
 -			}
 -			/* get rid of trailing whitespace */
 -			if (name[strlen(name)-1] == ' ')
 -				name[strlen(name)-1] = '\0';
 -		} else {
 -			/* no meaningful name retrieved. use product ID */
 -			snprintf(name, sizeof(name),
 -				 "%s %X", features->name, wacom->hdev->product);
 -		}
 -	} else {
 -		strlcpy(name, features->name, sizeof(name));
 -	}
 -
 -	/* Append the device type to the name */
 -	snprintf(wacom_wac->pen_name, sizeof(wacom_wac->pen_name),
 -		"%s%s Pen", name, suffix);
 -	snprintf(wacom_wac->touch_name, sizeof(wacom_wac->touch_name),
 -		"%s%s Finger", name, suffix);
 -	snprintf(wacom_wac->pad_name, sizeof(wacom_wac->pad_name),
 -		"%s%s Pad", name, suffix);
 -}
 +static enum power_supply_property wacom_battery_props[] = {
 +	POWER_SUPPLY_PROP_CAPACITY
 +};
  
 -static void wacom_release_resources(struct wacom *wacom)
++=======
++>>>>>>> 136ae5e9bace (HID: wacom: power_supply: remove ac information)
 +static int wacom_battery_get_property(struct power_supply *psy,
 +				      enum power_supply_property psp,
 +				      union power_supply_propval *val)
  {
 -	struct hid_device *hdev = wacom->hdev;
 -
 -	if (!wacom->resources)
 -		return;
 -
 -	devres_release_group(&hdev->dev, wacom);
 +	struct wacom *wacom = container_of(psy, struct wacom, battery);
 +	int ret = 0;
  
 -	wacom->resources = false;
 +	switch (psp) {
 +		case POWER_SUPPLY_PROP_CAPACITY:
 +			val->intval =
 +				wacom->wacom_wac.battery_capacity * 100 / 31;
 +			break;
 +		default:
 +			ret = -EINVAL;
 +			break;
 +	}
  
 -	wacom->wacom_wac.pen_input = NULL;
 -	wacom->wacom_wac.touch_input = NULL;
 -	wacom->wacom_wac.pad_input = NULL;
 +	return ret;
  }
  
 -static int wacom_parse_and_register(struct wacom *wacom, bool wireless)
++<<<<<<< HEAD
++=======
++static int __wacom_initialize_battery(struct wacom *wacom,
++				      struct wacom_battery *battery)
+ {
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	struct wacom_features *features = &wacom_wac->features;
 -	struct hid_device *hdev = wacom->hdev;
++	static atomic_t battery_no = ATOMIC_INIT(0);
++	struct device *dev = &wacom->hdev->dev;
++	struct power_supply_config psy_cfg = { .drv_data = battery, };
++	struct power_supply *ps_bat;
++	struct power_supply_desc *bat_desc = &battery->bat_desc;
++	unsigned long n;
+ 	int error;
 -	unsigned int connect_mask = HID_CONNECT_HIDRAW;
 -
 -	features->pktlen = wacom_compute_pktlen(hdev);
 -	if (features->pktlen > WACOM_PKGLEN_MAX)
 -		return -EINVAL;
+ 
 -	if (!devres_open_group(&hdev->dev, wacom, GFP_KERNEL))
++	if (!devres_open_group(dev, bat_desc, GFP_KERNEL))
+ 		return -ENOMEM;
+ 
 -	wacom->resources = true;
++	n = atomic_inc_return(&battery_no) - 1;
+ 
 -	error = wacom_allocate_inputs(wacom);
 -	if (error)
 -		goto fail;
++	bat_desc->properties = wacom_battery_props;
++	bat_desc->num_properties = ARRAY_SIZE(wacom_battery_props);
++	bat_desc->get_property = wacom_battery_get_property;
++	sprintf(battery->bat_name, "wacom_battery_%ld", n);
++	bat_desc->name = battery->bat_name;
++	bat_desc->type = POWER_SUPPLY_TYPE_USB;
++	bat_desc->use_for_apm = 0;
+ 
 -	/*
 -	 * Bamboo Pad has a generic hid handling for the Pen, and we switch it
 -	 * into debug mode for the touch part.
 -	 * We ignore the other interfaces.
 -	 */
 -	if (features->type == BAMBOO_PAD) {
 -		if (features->pktlen == WACOM_PKGLEN_PENABLED) {
 -			features->type = HID_GENERIC;
 -		} else if ((features->pktlen != WACOM_PKGLEN_BPAD_TOUCH) &&
 -			   (features->pktlen != WACOM_PKGLEN_BPAD_TOUCH_USB)) {
 -			error = -ENODEV;
 -			goto fail;
 -		}
++	ps_bat = devm_power_supply_register(dev, bat_desc, &psy_cfg);
++	if (IS_ERR(ps_bat)) {
++		error = PTR_ERR(ps_bat);
++		goto err;
+ 	}
+ 
 -	/* set the default size in case we do not get them from hid */
 -	wacom_set_default_phy(features);
 -
 -	/* Retrieve the physical and logical size for touch devices */
 -	wacom_retrieve_hid_descriptor(hdev, features);
 -	wacom_setup_device_quirks(wacom);
 -
 -	if (features->device_type == WACOM_DEVICETYPE_NONE &&
 -	    features->type != WIRELESS) {
 -		error = features->type == HID_GENERIC ? -ENODEV : 0;
 -
 -		dev_warn(&hdev->dev, "Unknown device_type for '%s'. %s.",
 -			 hdev->name,
 -			 error ? "Ignoring" : "Assuming pen");
 -
 -		if (error)
 -			goto fail;
 -
 -		features->device_type |= WACOM_DEVICETYPE_PEN;
 -	}
++	power_supply_powers(ps_bat, &wacom->hdev->dev);
+ 
 -	wacom_calculate_res(features);
++	battery->battery = ps_bat;
+ 
 -	wacom_update_name(wacom, wireless ? " (WL)" : "");
++	devres_close_group(dev, bat_desc);
++	return 0;
+ 
 -	error = wacom_add_shared_data(hdev);
 -	if (error)
 -		goto fail;
++err:
++	devres_release_group(dev, bat_desc);
++	return error;
++}
+ 
 -	if (!(features->device_type & WACOM_DEVICETYPE_WL_MONITOR) &&
 -	     (features->quirks & WACOM_QUIRK_BATTERY)) {
 -		error = wacom_initialize_battery(wacom);
 -		if (error)
 -			goto fail;
 -	}
++>>>>>>> 136ae5e9bace (HID: wacom: power_supply: remove ac information)
 +static int wacom_initialize_battery(struct wacom *wacom)
 +{
 +	int error = 0;
  
 -	error = wacom_register_inputs(wacom);
 -	if (error)
 -		goto fail;
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR) {
 +		wacom->battery.properties = wacom_battery_props;
 +		wacom->battery.num_properties = ARRAY_SIZE(wacom_battery_props);
 +		wacom->battery.get_property = wacom_battery_get_property;
 +		wacom->battery.name = "wacom_battery";
 +		wacom->battery.type = POWER_SUPPLY_TYPE_BATTERY;
 +		wacom->battery.use_for_apm = 0;
  
 -	if (wacom->wacom_wac.features.device_type & WACOM_DEVICETYPE_PAD) {
 -		error = wacom_initialize_leds(wacom);
 -		if (error)
 -			goto fail;
 +		error = power_supply_register(&wacom->usbdev->dev,
 +					      &wacom->battery);
  
 -		error = wacom_initialize_remotes(wacom);
 -		if (error)
 -			goto fail;
 +		if (!error)
 +			power_supply_powers(&wacom->battery,
 +					    &wacom->usbdev->dev);
  	}
  
 -	if (features->type == HID_GENERIC)
 -		connect_mask |= HID_CONNECT_DRIVER;
 -
 -	/* Regular HID work starts now */
 -	error = hid_hw_start(hdev, connect_mask);
 -	if (error) {
 -		hid_err(hdev, "hw start failed\n");
 -		goto fail;
 -	}
 +	return error;
 +}
  
 -	if (!wireless) {
 -		/* Note that if query fails it is not a hard failure */
 -		wacom_query_tablet_data(hdev, features);
 +static void wacom_destroy_battery(struct wacom *wacom)
 +{
++<<<<<<< HEAD
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR &&
 +	    wacom->battery.dev) {
 +		power_supply_unregister(&wacom->battery);
 +		wacom->battery.dev = NULL;
++=======
++	if (wacom->battery.battery) {
++		devres_release_group(&wacom->hdev->dev,
++				     &wacom->battery.bat_desc);
++		wacom->battery.battery = NULL;
++>>>>>>> 136ae5e9bace (HID: wacom: power_supply: remove ac information)
  	}
 +}
  
 -	/* touch only Bamboo doesn't support pen */
 -	if ((features->type == BAMBOO_TOUCH) &&
 -	    (features->device_type & WACOM_DEVICETYPE_PEN)) {
 -		error = -ENODEV;
 -		goto fail_quirks;
 -	}
 +static int wacom_register_input(struct wacom *wacom)
 +{
 +	struct input_dev *input_dev;
 +	struct usb_interface *intf = wacom->intf;
 +	struct usb_device *dev = interface_to_usbdev(intf);
 +	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 +	int error;
  
 -	/* pen only Bamboo neither support touch nor pad */
 -	if ((features->type == BAMBOO_PEN) &&
 -	    ((features->device_type & WACOM_DEVICETYPE_TOUCH) ||
 -	    (features->device_type & WACOM_DEVICETYPE_PAD))) {
 -		error = -ENODEV;
 -		goto fail_quirks;
 +	input_dev = input_allocate_device();
 +	if (!input_dev) {
 +		error = -ENOMEM;
 +		goto fail1;
  	}
  
 -	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
 -		error = hid_hw_open(hdev);
 +	input_dev->name = wacom_wac->name;
 +	input_dev->dev.parent = &intf->dev;
 +	input_dev->open = wacom_open;
 +	input_dev->close = wacom_close;
 +	usb_to_input_id(dev, &input_dev->id);
 +	input_set_drvdata(input_dev, wacom);
  
 -	if ((wacom_wac->features.type == INTUOSHT ||
 -	     wacom_wac->features.type == INTUOSHT2) &&
 -	    (wacom_wac->features.device_type & WACOM_DEVICETYPE_TOUCH)) {
 -		wacom_wac->shared->type = wacom_wac->features.type;
 -		wacom_wac->shared->touch_input = wacom_wac->touch_input;
 -	}
 +	wacom_wac->input = input_dev;
 +	error = wacom_setup_input_capabilities(input_dev, wacom_wac);
 +	if (error)
 +		goto fail1;
  
 -	devres_close_group(&hdev->dev, wacom);
 +	error = input_register_device(input_dev);
 +	if (error)
 +		goto fail2;
  
  	return 0;
  
* Unmerged path drivers/hid/wacom.h
* Unmerged path drivers/hid/wacom_sys.c
