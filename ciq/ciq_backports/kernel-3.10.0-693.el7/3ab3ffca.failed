xfs: collapse cases in xfs_attr3_leaf_list_int

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit 3ab3ffcaca99e0b77480d77bd393fc227b09069f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3ab3ffca.failed

Consolidate the 2 calls to ->put_listent in
xfs_attr3_leaf_list_int(), by setting up name, namelen, and
valuelen for the local vs remote cases, then call ->put_listent
and do the error handling all in one spot.

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>


(cherry picked from commit 3ab3ffcaca99e0b77480d77bd393fc227b09069f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_attr_list.c
diff --cc fs/xfs/xfs_attr_list.c
index 4fa14820e2e2,d25f26b22ac9..000000000000
--- a/fs/xfs/xfs_attr_list.c
+++ b/fs/xfs/xfs_attr_list.c
@@@ -425,56 -424,25 +428,74 @@@ xfs_attr3_leaf_list_int
  			continue;		/* skip incomplete entries */
  
  		if (entry->flags & XFS_ATTR_LOCAL) {
- 			xfs_attr_leaf_name_local_t *name_loc =
- 				xfs_attr3_leaf_name_local(leaf, i);
+ 			xfs_attr_leaf_name_local_t *name_loc;
  
++<<<<<<< HEAD
 +			retval = context->put_listent(context,
 +						entry->flags,
 +						name_loc->nameval,
 +						(int)name_loc->namelen,
 +						be16_to_cpu(name_loc->valuelen),
 +						&name_loc->nameval[name_loc->namelen]);
 +			if (retval)
 +				return retval;
++=======
+ 			name_loc = xfs_attr3_leaf_name_local(leaf, i);
+ 			name = name_loc->nameval;
+ 			namelen = name_loc->namelen;
+ 			valuelen = be16_to_cpu(name_loc->valuelen);
++>>>>>>> 3ab3ffcaca99 (xfs: collapse cases in xfs_attr3_leaf_list_int)
  		} else {
- 			xfs_attr_leaf_name_remote_t *name_rmt =
- 				xfs_attr3_leaf_name_remote(leaf, i);
+ 			xfs_attr_leaf_name_remote_t *name_rmt;
  
++<<<<<<< HEAD
 +			int valuelen = be32_to_cpu(name_rmt->valuelen);
 +
 +			if (context->put_value) {
 +				xfs_da_args_t args;
 +
 +				memset((char *)&args, 0, sizeof(args));
 +				args.geo = context->dp->i_mount->m_attr_geo;
 +				args.dp = context->dp;
 +				args.whichfork = XFS_ATTR_FORK;
 +				args.valuelen = valuelen;
 +				args.rmtvaluelen = valuelen;
 +				args.value = kmem_alloc(valuelen, KM_SLEEP | KM_NOFS);
 +				args.rmtblkno = be32_to_cpu(name_rmt->valueblk);
 +				args.rmtblkcnt = xfs_attr3_rmt_blocks(
 +							args.dp->i_mount, valuelen);
 +				retval = xfs_attr_rmtval_get(&args);
 +				if (!retval)
 +					retval = context->put_listent(context,
 +							entry->flags,
 +							name_rmt->name,
 +							(int)name_rmt->namelen,
 +							valuelen,
 +							args.value);
 +				kmem_free(args.value);
 +			} else {
 +				retval = context->put_listent(context,
 +						entry->flags,
 +						name_rmt->name,
 +						(int)name_rmt->namelen,
 +						valuelen,
 +						NULL);
 +			}
 +			if (retval)
 +				return retval;
 +		}
++=======
+ 			name_rmt = xfs_attr3_leaf_name_remote(leaf, i);
+ 			name = name_rmt->name;
+ 			namelen = name_rmt->namelen;
+ 			valuelen = be32_to_cpu(name_rmt->valuelen);
+ 		}
+ 
+ 		retval = context->put_listent(context, entry->flags,
+ 					      name, namelen, valuelen);
+ 		if (retval)
+ 			break;
++>>>>>>> 3ab3ffcaca99 (xfs: collapse cases in xfs_attr3_leaf_list_int)
  		if (context->seen_enough)
  			break;
  		cursor->offset++;
* Unmerged path fs/xfs/xfs_attr_list.c
