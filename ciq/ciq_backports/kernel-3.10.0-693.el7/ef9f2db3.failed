Btrfs: self-tests: Use macros instead of constants and add missing newline

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Feifei Xu <xufeifei@linux.vnet.ibm.com>
commit ef9f2db365c31433e52b0c5863793273bb632666
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ef9f2db3.failed

This commit replaces numerical constants with appropriate
preprocessor macros.

	Reviewed-by: Josef Bacik <jbacik@fb.com>
	Signed-off-by: Chandan Rajendra <chandan@linux.vnet.ibm.com>
	Signed-off-by: Feifei Xu <xufeifei@linux.vnet.ibm.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit ef9f2db365c31433e52b0c5863793273bb632666)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/disk-io.c
#	fs/btrfs/tests/extent-buffer-tests.c
#	fs/btrfs/tests/qgroup-tests.c
diff --cc fs/btrfs/disk-io.c
index 9a96654766f1,c3764ddb2a46..000000000000
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@@ -1313,7 -1322,9 +1313,13 @@@ struct btrfs_root *btrfs_alloc_dummy_ro
  	root = btrfs_alloc_root(NULL, GFP_KERNEL);
  	if (!root)
  		return ERR_PTR(-ENOMEM);
++<<<<<<< HEAD
 +	__setup_root(4096, 4096, 4096, root, NULL, 1);
++=======
+ 	/* We don't use the stripesize in selftest, set it as sectorsize */
+ 	__setup_root(nodesize, sectorsize, sectorsize, root, NULL,
+ 			BTRFS_ROOT_TREE_OBJECTID);
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  	set_bit(BTRFS_ROOT_DUMMY_ROOT, &root->state);
  	root->alloc_bytenr = 0;
  
diff --cc fs/btrfs/tests/extent-buffer-tests.c
index f51963a8f929,4f8cbd1ec5ee..000000000000
--- a/fs/btrfs/tests/extent-buffer-tests.c
+++ b/fs/btrfs/tests/extent-buffer-tests.c
@@@ -222,8 -223,8 +222,13 @@@ out
  	return ret;
  }
  
 -int btrfs_test_extent_buffer_operations(u32 sectorsize, u32 nodesize)
 +int btrfs_test_extent_buffer_operations(void)
  {
++<<<<<<< HEAD
 +	test_msg("Running extent buffer operation tests");
 +	return test_btrfs_split_item();
++=======
+ 	test_msg("Running extent buffer operation tests\n");
+ 	return test_btrfs_split_item(sectorsize, nodesize);
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  }
diff --cc fs/btrfs/tests/qgroup-tests.c
index 846d277b1901,57a12c0d680b..000000000000
--- a/fs/btrfs/tests/qgroup-tests.c
+++ b/fs/btrfs/tests/qgroup-tests.c
@@@ -232,10 -226,10 +232,10 @@@ static int test_no_shared_qgroup(struc
  	struct ulist *new_roots = NULL;
  	int ret;
  
 -	btrfs_init_dummy_trans(&trans);
 +	init_dummy_trans(&trans);
  
  	test_msg("Qgroup basic add\n");
- 	ret = btrfs_create_qgroup(NULL, fs_info, 5);
+ 	ret = btrfs_create_qgroup(NULL, fs_info, BTRFS_FS_TREE_OBJECTID);
  	if (ret) {
  		test_msg("Couldn't create a qgroup %d\n", ret);
  		return ret;
@@@ -253,7 -247,8 +253,12 @@@
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	ret = insert_normal_tree_ref(root, 4096, 4096, 0, 5);
++=======
+ 	ret = insert_normal_tree_ref(root, nodesize, nodesize, 0,
+ 				BTRFS_FS_TREE_OBJECTID);
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  	if (ret)
  		return ret;
  
@@@ -272,7 -267,8 +277,12 @@@
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	if (btrfs_verify_qgroup_counts(fs_info, 5, 4096, 4096)) {
++=======
+ 	if (btrfs_verify_qgroup_counts(fs_info, BTRFS_FS_TREE_OBJECTID,
+ 				nodesize, nodesize)) {
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  		test_msg("Qgroup counts didn't match expected values\n");
  		return -EINVAL;
  	}
@@@ -344,7 -344,8 +357,12 @@@ static int test_multiple_refs(struct bt
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	ret = insert_normal_tree_ref(root, 4096, 4096, 0, 5);
++=======
+ 	ret = insert_normal_tree_ref(root, nodesize, nodesize, 0,
+ 				BTRFS_FS_TREE_OBJECTID);
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  	if (ret)
  		return ret;
  
@@@ -363,7 -364,8 +381,12 @@@
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	if (btrfs_verify_qgroup_counts(fs_info, 5, 4096, 4096)) {
++=======
+ 	if (btrfs_verify_qgroup_counts(fs_info, BTRFS_FS_TREE_OBJECTID,
+ 				       nodesize, nodesize)) {
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  		test_msg("Qgroup counts didn't match expected values\n");
  		return -EINVAL;
  	}
@@@ -375,7 -377,8 +398,12 @@@
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	ret = add_tree_ref(root, 4096, 4096, 0, 256);
++=======
+ 	ret = add_tree_ref(root, nodesize, nodesize, 0,
+ 			BTRFS_FIRST_FREE_OBJECTID);
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  	if (ret)
  		return ret;
  
@@@ -394,12 -397,14 +422,22 @@@
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	if (btrfs_verify_qgroup_counts(fs_info, 5, 4096, 0)) {
++=======
+ 	if (btrfs_verify_qgroup_counts(fs_info, BTRFS_FS_TREE_OBJECTID,
+ 					nodesize, 0)) {
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  		test_msg("Qgroup counts didn't match expected values\n");
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	if (btrfs_verify_qgroup_counts(fs_info, 256, 4096, 0)) {
++=======
+ 	if (btrfs_verify_qgroup_counts(fs_info, BTRFS_FIRST_FREE_OBJECTID,
+ 					nodesize, 0)) {
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  		test_msg("Qgroup counts didn't match expected values\n");
  		return -EINVAL;
  	}
@@@ -411,7 -416,8 +449,12 @@@
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	ret = remove_extent_ref(root, 4096, 4096, 0, 256);
++=======
+ 	ret = remove_extent_ref(root, nodesize, nodesize, 0,
+ 				BTRFS_FIRST_FREE_OBJECTID);
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  	if (ret)
  		return ret;
  
@@@ -435,7 -442,8 +479,12 @@@
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	if (btrfs_verify_qgroup_counts(fs_info, 5, 4096, 4096)) {
++=======
+ 	if (btrfs_verify_qgroup_counts(fs_info, BTRFS_FS_TREE_OBJECTID,
+ 					nodesize, nodesize)) {
++>>>>>>> ef9f2db365c3 (Btrfs: self-tests: Use macros instead of constants and add missing newline)
  		test_msg("Qgroup counts didn't match expected values\n");
  		return -EINVAL;
  	}
* Unmerged path fs/btrfs/disk-io.c
* Unmerged path fs/btrfs/tests/extent-buffer-tests.c
* Unmerged path fs/btrfs/tests/qgroup-tests.c
