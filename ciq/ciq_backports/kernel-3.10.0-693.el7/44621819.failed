perf trace: Exclude the kernel part of the callchain leading to a syscall

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 44621819ddc9d5d0bfd0b0616c6cf33c94189b67
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/44621819.failed

The kernel parts are not that useful:

  # trace -m 512 -e nanosleep --call dwarf  usleep 1
     0.065 ( 0.065 ms): usleep/18732 nanosleep(rqtp: 0x7ffc4ee4e200) = 0
                                       syscall_slow_exit_work ([kernel.kallsyms])
                                       do_syscall_64 ([kernel.kallsyms])
                                       return_from_SYSCALL_64 ([kernel.kallsyms])
                                       __nanosleep (/usr/lib64/libc-2.22.so)
                                       usleep (/usr/lib64/libc-2.22.so)
                                       main (/usr/bin/usleep)
                                       __libc_start_main (/usr/lib64/libc-2.22.so)
                                       _start (/usr/bin/usleep)
  #

So lets just use perf_event_attr.exclude_callchain_kernel to avoid
collecting it in the ring buffer:

  # trace -m 512 -e nanosleep --call dwarf  usleep 1
     0.063 ( 0.063 ms): usleep/19212 nanosleep(rqtp: 0x7ffc3df10fb0) = 0
                                       __nanosleep (/usr/lib64/libc-2.22.so)
                                       usleep (/usr/lib64/libc-2.22.so)
                                       main (/usr/bin/usleep)
                                       __libc_start_main (/usr/lib64/libc-2.22.so)
                                       _start (/usr/bin/usleep)
  #

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Milian Wolff <milian.wolff@kdab.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-qctu3gqhpim0dfbcp9d86c91@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 44621819ddc9d5d0bfd0b0616c6cf33c94189b67)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-trace.txt
#	tools/perf/builtin-trace.c
diff --cc tools/perf/Documentation/perf-trace.txt
index 13293de8869f,1bbcf305d233..000000000000
--- a/tools/perf/Documentation/perf-trace.txt
+++ b/tools/perf/Documentation/perf-trace.txt
@@@ -117,6 -117,15 +117,18 @@@ the thread executes on the designated C
  --syscalls::
  	Trace system calls. This options is enabled by default.
  
++<<<<<<< HEAD
++=======
+ --call-graph [mode,type,min[,limit],order[,key][,branch]]::
+         Setup and enable call-graph (stack chain/backtrace) recording.
+         See `--call-graph` section in perf-record and perf-report
+         man pages for details. The ones that are most useful in 'perf trace'
+         are 'dwarf' and 'lbr', where available, try: 'perf trace --call-graph dwarf'.
+ 
+ --kernel-syscall-graph::
+ 	 Show the kernel callchains on the syscall exit path.
+ 
++>>>>>>> 44621819ddc9 (perf trace: Exclude the kernel part of the callchain leading to a syscall)
  --event::
  	Trace other events, see 'perf list' for a complete list.
  
diff --cc tools/perf/builtin-trace.c
index 6a499ab19e51,cfa5ce8fdb7b..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -3222,6 -3277,11 +3233,14 @@@ int cmd_trace(int argc, const char **ar
  		     "Trace pagefaults", parse_pagefaults, "maj"),
  	OPT_BOOLEAN(0, "syscalls", &trace.trace_syscalls, "Trace syscalls"),
  	OPT_BOOLEAN('f', "force", &trace.force, "don't complain, do it"),
++<<<<<<< HEAD
++=======
+ 	OPT_CALLBACK(0, "call-graph", &trace.opts,
+ 		     "record_mode[,record_size]", record_callchain_help,
+ 		     &record_parse_callchain_opt),
+ 	OPT_BOOLEAN(0, "kernel-syscall-graph", &trace.kernel_syscallchains,
+ 		    "Show the kernel callchains on the syscall exit path"),
++>>>>>>> 44621819ddc9 (perf trace: Exclude the kernel part of the callchain leading to a syscall)
  	OPT_UINTEGER(0, "proc-map-timeout", &trace.opts.proc_map_timeout,
  			"per thread proc mmap processing timeout in ms"),
  	OPT_END()
* Unmerged path tools/perf/Documentation/perf-trace.txt
* Unmerged path tools/perf/builtin-trace.c
