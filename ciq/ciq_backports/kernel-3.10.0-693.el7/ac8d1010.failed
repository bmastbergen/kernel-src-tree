Input: wacom - enhance Wireless Receiver battery reporting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit ac8d10101b0e3a0a1478f8bb51bbbb0a56fe0956
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ac8d1010.failed

- Reports the current status of the battery (discharging, charging, full).
- Also notify the upower daemon when there is a change in the battery
  value.
- keep the battery value as a percentage, not the raw value
- add WACOM_QUIRK_BATTERY to easily add a battery to a device (required
  for Bluetooth devices)

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Przemo Firszt <przemo@firszt.eu>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit ac8d10101b0e3a0a1478f8bb51bbbb0a56fe0956)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom.h
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom.h
index c75e9e6ebe30,98cb93f16ba4..000000000000
--- a/drivers/hid/wacom.h
+++ b/drivers/hid/wacom.h
@@@ -132,7 -128,14 +132,18 @@@ static inline void wacom_schedule_work(
  	schedule_work(&wacom->work);
  }
  
++<<<<<<< HEAD
 +extern const struct usb_device_id wacom_ids[];
++=======
+ static inline void wacom_notify_battery(struct wacom_wac *wacom_wac)
+ {
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 
+ 	power_supply_changed(&wacom->battery);
+ }
+ 
+ extern const struct hid_device_id wacom_ids[];
++>>>>>>> ac8d10101b0e (Input: wacom - enhance Wireless Receiver battery reporting)
  
  void wacom_wac_irq(struct wacom_wac *wacom_wac, size_t len);
  void wacom_setup_device_quirks(struct wacom_features *features);
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,f8744c4d3b18..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1072,6 -769,8 +1072,11 @@@ static void wacom_destroy_leds(struct w
  }
  
  static enum power_supply_property wacom_battery_props[] = {
++<<<<<<< HEAD
++=======
+ 	POWER_SUPPLY_PROP_STATUS,
+ 	POWER_SUPPLY_PROP_SCOPE,
++>>>>>>> ac8d10101b0e (Input: wacom - enhance Wireless Receiver battery reporting)
  	POWER_SUPPLY_PROP_CAPACITY
  };
  
@@@ -1083,9 -782,21 +1088,18 @@@ static int wacom_battery_get_property(s
  	int ret = 0;
  
  	switch (psp) {
 -		case POWER_SUPPLY_PROP_SCOPE:
 -			val->intval = POWER_SUPPLY_SCOPE_DEVICE;
 -			break;
  		case POWER_SUPPLY_PROP_CAPACITY:
  			val->intval =
- 				wacom->wacom_wac.battery_capacity * 100 / 31;
+ 				wacom->wacom_wac.battery_capacity;
+ 			break;
+ 		case POWER_SUPPLY_PROP_STATUS:
+ 			if (wacom->wacom_wac.bat_charging)
+ 				val->intval = POWER_SUPPLY_STATUS_CHARGING;
+ 			else if (wacom->wacom_wac.battery_capacity == 100 &&
+ 				    wacom->wacom_wac.ps_connected)
+ 				val->intval = POWER_SUPPLY_STATUS_FULL;
+ 			else
+ 				val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
  			break;
  		default:
  			ret = -EINVAL;
@@@ -1183,31 -944,29 +1197,36 @@@ static void wacom_wireless_work(struct 
  	wacom_destroy_battery(wacom);
  
  	/* Stylus interface */
 -	hdev1 = usb_get_intfdata(usbdev->config->interface[1]);
 -	wacom1 = hid_get_drvdata(hdev1);
 +	wacom1 = usb_get_intfdata(usbdev->config->interface[1]);
  	wacom_wac1 = &(wacom1->wacom_wac);
 -	wacom_unregister_inputs(wacom1);
 +	if (wacom_wac1->input)
 +		input_unregister_device(wacom_wac1->input);
 +	wacom_wac1->input = NULL;
  
  	/* Touch interface */
 -	hdev2 = usb_get_intfdata(usbdev->config->interface[2]);
 -	wacom2 = hid_get_drvdata(hdev2);
 +	wacom2 = usb_get_intfdata(usbdev->config->interface[2]);
  	wacom_wac2 = &(wacom2->wacom_wac);
 -	wacom_unregister_inputs(wacom2);
 +	if (wacom_wac2->input)
 +		input_unregister_device(wacom_wac2->input);
 +	wacom_wac2->input = NULL;
  
  	if (wacom_wac->pid == 0) {
++<<<<<<< HEAD
 +		dev_info(&wacom->intf->dev, "wireless tablet disconnected\n");
++=======
+ 		hid_info(wacom->hdev, "wireless tablet disconnected\n");
+ 		wacom_wac1->shared->type = 0;
++>>>>>>> ac8d10101b0e (Input: wacom - enhance Wireless Receiver battery reporting)
  	} else {
 -		const struct hid_device_id *id = wacom_ids;
 +		const struct usb_device_id *id = wacom_ids;
  
 -		hid_info(wacom->hdev, "wireless tablet connected with PID %x\n",
 +		dev_info(&wacom->intf->dev,
 +			 "wireless tablet connected with PID %x\n",
  			 wacom_wac->pid);
  
 -		while (id->bus) {
 -			if (id->vendor == USB_VENDOR_ID_WACOM &&
 -			    id->product == wacom_wac->pid)
 +		while (id->match_flags) {
 +			if (id->idVendor == USB_VENDOR_ID_WACOM &&
 +			    id->idProduct == wacom_wac->pid)
  				break;
  			id++;
  		}
* Unmerged path drivers/hid/wacom.h
* Unmerged path drivers/hid/wacom_sys.c
diff --git a/drivers/hid/wacom_wac.c b/drivers/hid/wacom_wac.c
index 01ec753fea53..90c90a877885 100644
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@ -1322,20 +1322,32 @@ static int wacom_wireless_irq(struct wacom_wac *wacom, size_t len)
 
 	connected = data[1] & 0x01;
 	if (connected) {
-		int pid, battery;
+		int pid, battery, ps_connected;
 
 		pid = get_unaligned_be16(&data[6]);
-		battery = data[5] & 0x3f;
+		battery = (data[5] & 0x3f) * 100 / 31;
+		ps_connected = !!(data[5] & 0x80);
 		if (wacom->pid != pid) {
 			wacom->pid = pid;
 			wacom_schedule_work(wacom);
 		}
-		wacom->battery_capacity = battery;
+
+		if (wacom->shared->type &&
+		    (battery != wacom->battery_capacity ||
+		     ps_connected != wacom->ps_connected)) {
+			wacom->battery_capacity = battery;
+			wacom->ps_connected = ps_connected;
+			wacom->bat_charging = ps_connected &&
+						wacom->battery_capacity < 100;
+			wacom_notify_battery(wacom);
+		}
 	} else if (wacom->pid != 0) {
 		/* disconnected while previously connected */
 		wacom->pid = 0;
 		wacom_schedule_work(wacom);
 		wacom->battery_capacity = 0;
+		wacom->bat_charging = 0;
+		wacom->ps_connected = 0;
 	}
 
 	return 0;
@@ -1500,8 +1512,10 @@ void wacom_setup_device_quirks(struct wacom_features *features)
 		features->quirks |= WACOM_QUIRK_NO_INPUT;
 
 		/* must be monitor interface if no device_type set */
-		if (!features->device_type)
+		if (!features->device_type) {
 			features->quirks |= WACOM_QUIRK_MONITOR;
+			features->quirks |= WACOM_QUIRK_BATTERY;
+		}
 	}
 }
 
diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d220d069f329..5ff3c03ab0fd 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -63,6 +63,7 @@
 #define WACOM_QUIRK_BBTOUCH_LOWRES	0x0002
 #define WACOM_QUIRK_NO_INPUT		0x0004
 #define WACOM_QUIRK_MONITOR		0x0008
+#define WACOM_QUIRK_BATTERY		0x0010
 
 enum {
 	PENPARTNER = 0,
@@ -149,6 +150,8 @@ struct wacom_wac {
 	int pid;
 	int battery_capacity;
 	int num_contacts_left;
+	int bat_charging;
+	int ps_connected;
 };
 
 #endif
