nfp: use unsigned int for vector/ring counts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit a4b562bb8ebd418dcfeba2840a7ece25a74d8385
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a4b562bb.failed

Use unsigned int consistently for vector/ring counts.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a4b562bb8ebd418dcfeba2840a7ece25a74d8385)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net.h
index aecadca0b473,0ea6ebd329cf..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@@ -505,11 -523,16 +505,21 @@@ struct nfp_net 
  	u8 rss_key[NFP_NET_CFG_RSS_KEY_SZ];
  	u8 rss_itbl[NFP_NET_CFG_RSS_ITBL_SZ];
  
++<<<<<<< HEAD
 +	int max_tx_rings;
 +	int max_rx_rings;
++=======
+ 	struct nfp_stat_pair rx_filter, rx_filter_prev;
+ 	unsigned long rx_filter_change;
+ 	struct timer_list rx_filter_stats_timer;
+ 	spinlock_t rx_filter_lock;
  
- 	int num_tx_rings;
- 	int num_rx_rings;
+ 	unsigned int max_tx_rings;
+ 	unsigned int max_rx_rings;
++>>>>>>> a4b562bb8ebd (nfp: use unsigned int for vector/ring counts)
+ 
+ 	unsigned int num_tx_rings;
+ 	unsigned int num_rx_rings;
  
  	int stride_tx;
  	int stride_rx;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net.h
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 8344e8e82257..ae410e88e021 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@ -329,8 +329,8 @@ static int nfp_net_msix_alloc(struct nfp_net *nn, int nr_vecs)
  */
 static int nfp_net_irqs_wanted(struct nfp_net *nn)
 {
+	unsigned int vecs;
 	int ncpus;
-	int vecs;
 
 	ncpus = num_online_cpus();
 
@@ -2627,7 +2627,8 @@ void nfp_net_info(struct nfp_net *nn)
  * Return: NFP Net device structure, or ERR_PTR on error.
  */
 struct nfp_net *nfp_net_netdev_alloc(struct pci_dev *pdev,
-				     int max_tx_rings, int max_rx_rings)
+				     unsigned int max_tx_rings,
+				     unsigned int max_rx_rings)
 {
 	struct net_device *netdev;
 	struct nfp_net *nn;
