audit: add support for session ID user filter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Richard Guy Briggs <rgb@redhat.com>
commit 8fae47705685fcaa75a1fe4c8c3e18300a702979
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/8fae4770.failed

Define AUDIT_SESSIONID in the uapi and add support for specifying user
filters based on the session ID.  Also add the new session ID filter
to the feature bitmap so userspace knows it is available.

https://github.com/linux-audit/audit-kernel/issues/4
RFE: add a session ID filter to the kernel's user filter

	Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
[PM: combine multiple patches from Richard into this one]
	Signed-off-by: Paul Moore <paul@paul-moore.com>
(cherry picked from commit 8fae47705685fcaa75a1fe4c8c3e18300a702979)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/audit.h
diff --cc include/uapi/linux/audit.h
index 28459be2d594,c8dc97bc2c1b..000000000000
--- a/include/uapi/linux/audit.h
+++ b/include/uapi/linux/audit.h
@@@ -321,11 -325,16 +322,18 @@@ enum 
  #define AUDIT_STATUS_PID		0x0004
  #define AUDIT_STATUS_RATE_LIMIT		0x0008
  #define AUDIT_STATUS_BACKLOG_LIMIT	0x0010
 -#define AUDIT_STATUS_BACKLOG_WAIT_TIME	0x0020
  
  #define AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT	0x00000001
 -#define AUDIT_FEATURE_BITMAP_BACKLOG_WAIT_TIME	0x00000002
  #define AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH	0x00000004
+ #define AUDIT_FEATURE_BITMAP_SESSIONID_FILTER	0x00000010
  #define AUDIT_FEATURE_BITMAP_ALL (AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT | \
++<<<<<<< HEAD
 +				  AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH)
++=======
+ 				  AUDIT_FEATURE_BITMAP_BACKLOG_WAIT_TIME | \
+ 				  AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH | \
+ 				  AUDIT_FEATURE_BITMAP_SESSIONID_FILTER)
++>>>>>>> 8fae47705685 (audit: add support for session ID user filter)
  
  /* deprecated: AUDIT_VERSION_* */
  #define AUDIT_VERSION_LATEST 		AUDIT_FEATURE_BITMAP_ALL
* Unmerged path include/uapi/linux/audit.h
diff --git a/kernel/auditfilter.c b/kernel/auditfilter.c
index ddd135545844..e345cca5c740 100644
--- a/kernel/auditfilter.c
+++ b/kernel/auditfilter.c
@@ -344,6 +344,7 @@ static int audit_field_valid(struct audit_entry *entry, struct audit_field *f)
 	case AUDIT_EXIT:
 	case AUDIT_SUCCESS:
 	case AUDIT_INODE:
+	case AUDIT_SESSIONID:
 		/* bit ops are only useful on syscall args */
 		if (f->op == Audit_bitmask || f->op == Audit_bittest)
 			return -EINVAL;
@@ -462,6 +463,7 @@ static struct audit_entry *audit_data_to_entry(struct audit_rule_data *data,
 			if (!gid_valid(f->gid))
 				goto exit_free;
 			break;
+		case AUDIT_SESSIONID:
 		case AUDIT_ARCH:
 			entry->rule.arch_f = f;
 			break;
diff --git a/kernel/auditsc.c b/kernel/auditsc.c
index ac83ba981708..9bada2c3fe99 100644
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@ -446,6 +446,7 @@ static int audit_filter_rules(struct task_struct *tsk,
 	const struct cred *cred;
 	int i, need_sid = 1;
 	u32 sid;
+	unsigned int sessionid;
 
 	cred = rcu_dereference_check(tsk->cred, tsk == current || task_creation);
 
@@ -508,6 +509,10 @@ static int audit_filter_rules(struct task_struct *tsk,
 		case AUDIT_FSGID:
 			result = audit_gid_comparator(cred->fsgid, f->op, f->gid);
 			break;
+		case AUDIT_SESSIONID:
+			sessionid = audit_get_sessionid(current);
+			result = audit_comparator(sessionid, f->op, f->val);
+			break;
 		case AUDIT_PERS:
 			result = audit_comparator(tsk->personality, f->op, f->val);
 			break;
