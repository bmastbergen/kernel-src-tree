6lowpan: iphc: rename add lowpan prefix

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alexander Aring <aar@pengutronix.de>
commit 7115a968b75e9f81f6f8f45b2f97b1b43e024703
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7115a968.failed

This patch adds a lowpan prefix to each functions which doesn't have
such prefix currently.

	Reviewed-by: Stefan Schmidt <stefan@osg.samsung.com>
	Signed-off-by: Alexander Aring <aar@pengutronix.de>
	Acked-by: Jukka Rissanen <jukka.rissanen@linux.intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 7115a968b75e9f81f6f8f45b2f97b1b43e024703)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/6lowpan/iphc.c
diff --cc net/6lowpan/iphc.c
index 68c80f3c9add,66b41395ab80..000000000000
--- a/net/6lowpan/iphc.c
+++ b/net/6lowpan/iphc.c
@@@ -332,12 -334,12 +334,12 @@@ static int lowpan_iphc_uncompress_addr(
  	case LOWPAN_IPHC_SAM_11:
  	case LOWPAN_IPHC_DAM_11:
  		fail = false;
 -		switch (lowpan_dev(dev)->lltype) {
 +		switch (lowpan_priv(dev)->lltype) {
  		case LOWPAN_LLTYPE_IEEE802154:
- 			iphc_uncompress_802154_lladdr(ipaddr, lladdr);
+ 			lowpan_iphc_uncompress_802154_lladdr(ipaddr, lladdr);
  			break;
  		default:
- 			iphc_uncompress_eui64_lladdr(ipaddr, lladdr);
+ 			lowpan_iphc_uncompress_eui64_lladdr(ipaddr, lladdr);
  			break;
  		}
  		break;
@@@ -393,12 -395,12 +395,12 @@@ static int lowpan_iphc_uncompress_ctx_a
  	case LOWPAN_IPHC_SAM_11:
  	case LOWPAN_IPHC_DAM_11:
  		fail = false;
 -		switch (lowpan_dev(dev)->lltype) {
 +		switch (lowpan_priv(dev)->lltype) {
  		case LOWPAN_LLTYPE_IEEE802154:
- 			iphc_uncompress_802154_lladdr(ipaddr, lladdr);
+ 			lowpan_iphc_uncompress_802154_lladdr(ipaddr, lladdr);
  			break;
  		default:
- 			iphc_uncompress_eui64_lladdr(ipaddr, lladdr);
+ 			lowpan_iphc_uncompress_eui64_lladdr(ipaddr, lladdr);
  			break;
  		}
  		ipv6_addr_prefix_copy(ipaddr, &ctx->pfx, ctx->plen);
@@@ -665,9 -667,10 +667,16 @@@ int lowpan_header_decompress(struct sk_
  		}
  
  		pr_debug("SAC bit is set. Handle context based source address.\n");
++<<<<<<< HEAD
 +		err = uncompress_ctx_addr(skb, dev, ci, &hdr.saddr,
 +					  iphc1 & LOWPAN_IPHC_SAM_MASK, saddr);
 +		spin_unlock_bh(&lowpan_priv(dev)->ctx.lock);
++=======
+ 		err = lowpan_iphc_uncompress_ctx_addr(skb, dev, ci, &hdr.saddr,
+ 						      iphc1 & LOWPAN_IPHC_SAM_MASK,
+ 						      saddr);
+ 		spin_unlock_bh(&lowpan_dev(dev)->ctx.lock);
++>>>>>>> 7115a968b75e (6lowpan: iphc: rename add lowpan prefix)
  	} else {
  		/* Source address uncompression */
  		pr_debug("source address stateless compression\n");
@@@ -710,13 -714,15 +720,21 @@@
  
  		/* Destination address context based uncompression */
  		pr_debug("DAC bit is set. Handle context based destination address.\n");
++<<<<<<< HEAD
 +		err = uncompress_ctx_addr(skb, dev, ci, &hdr.daddr,
 +					  iphc1 & LOWPAN_IPHC_DAM_MASK, daddr);
 +		spin_unlock_bh(&lowpan_priv(dev)->ctx.lock);
++=======
+ 		err = lowpan_iphc_uncompress_ctx_addr(skb, dev, ci, &hdr.daddr,
+ 						      iphc1 & LOWPAN_IPHC_DAM_MASK,
+ 						      daddr);
+ 		spin_unlock_bh(&lowpan_dev(dev)->ctx.lock);
++>>>>>>> 7115a968b75e (6lowpan: iphc: rename add lowpan prefix)
  		break;
  	default:
- 		err = uncompress_addr(skb, dev, &hdr.daddr,
- 				      iphc1 & LOWPAN_IPHC_DAM_MASK, daddr);
+ 		err = lowpan_iphc_uncompress_addr(skb, dev, &hdr.daddr,
+ 						  iphc1 & LOWPAN_IPHC_DAM_MASK,
+ 						  daddr);
  		pr_debug("dest: stateless compression mode %d dest %pI6c\n",
  			 iphc1 & LOWPAN_IPHC_DAM_MASK, &hdr.daddr);
  		break;
* Unmerged path net/6lowpan/iphc.c
