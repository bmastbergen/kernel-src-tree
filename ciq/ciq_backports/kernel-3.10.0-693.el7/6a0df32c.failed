ACPICA: Move all ASCII utilities to a common file

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Bob Moore <robert.moore@intel.com>
commit 6a0df32c22fdfc414e6613c1bc911f19f39df01b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6a0df32c.failed

ACPICA commit ba60e4500053010bf775d58f6f61febbdb94d817

New file is utascii.c

Link: https://github.com/acpica/acpica/commit/ba60e450
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 6a0df32c22fdfc414e6613c1bc911f19f39df01b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpica/actables.h
#	drivers/acpi/acpica/acutils.h
#	drivers/acpi/acpica/dbnames.c
#	drivers/acpi/acpica/tbdata.c
#	drivers/acpi/acpica/tbfind.c
#	drivers/acpi/acpica/tbinstal.c
#	tools/power/acpi/tools/acpidump/Makefile
#	tools/power/acpi/tools/acpidump/apdump.c
diff --cc drivers/acpi/acpica/actables.h
index 917315ec21dd,cd5a135fcf29..000000000000
--- a/drivers/acpi/acpica/actables.h
+++ b/drivers/acpi/acpica/actables.h
@@@ -127,4 -161,9 +127,12 @@@ acpi_tb_install_table(acpi_physical_add
  
  acpi_status acpi_tb_parse_root_table(acpi_physical_address rsdp_address);
  
++<<<<<<< HEAD
++=======
+ /*
+  * tbxfload
+  */
+ acpi_status acpi_tb_load_namespace(void);
+ 
++>>>>>>> 6a0df32c22fd (ACPICA: Move all ASCII utilities to a common file)
  #endif				/* __ACTABLES_H__ */
diff --cc drivers/acpi/acpica/acutils.h
index 7125ee1826be,a7dbb2b882cf..000000000000
--- a/drivers/acpi/acpica/acutils.h
+++ b/drivers/acpi/acpica/acutils.h
@@@ -168,6 -167,33 +168,36 @@@ struct acpi_pkg_info 
  #define DB_QWORD_DISPLAY    8
  
  /*
++<<<<<<< HEAD
++=======
+  * utascii - ASCII utilities
+  */
+ u8 acpi_ut_valid_nameseg(char *signature);
+ 
+ u8 acpi_ut_valid_name_char(char character, u32 position);
+ 
+ void acpi_ut_check_and_repair_ascii(u8 *name, char *repaired_name, u32 count);
+ 
+ /*
+  * utnonansi - Non-ANSI C library functions
+  */
+ void acpi_ut_strupr(char *src_string);
+ 
+ void acpi_ut_strlwr(char *src_string);
+ 
+ int acpi_ut_stricmp(char *string1, char *string2);
+ 
+ acpi_status
+ acpi_ut_strtoul64(char *string,
+ 		  u32 base, u32 max_integer_byte_width, u64 *ret_integer);
+ 
+ /* Values for max_integer_byte_width above */
+ 
+ #define ACPI_MAX32_BYTE_WIDTH       4
+ #define ACPI_MAX64_BYTE_WIDTH       8
+ 
+ /*
++>>>>>>> 6a0df32c22fd (ACPICA: Move all ASCII utilities to a common file)
   * utglobal - Global data structures and procedures
   */
  acpi_status acpi_ut_init_globals(void);
@@@ -607,23 -582,24 +637,19 @@@ acpi_ut_get_resource_end_tag(union acpi
  /*
   * utstring - String and character utilities
   */
 -void acpi_ut_print_string(char *string, u16 max_length);
 +void acpi_ut_strupr(char *src_string);
  
 -#if defined ACPI_ASL_COMPILER || defined ACPI_EXEC_APP
 -void ut_convert_backslashes(char *pathname);
 -#endif
 +void acpi_ut_strlwr(char *src_string);
  
 -void acpi_ut_repair_name(char *name);
 +int acpi_ut_stricmp(char *string1, char *string2);
  
 -#if defined (ACPI_DEBUGGER) || defined (ACPI_APPLICATION)
 -u8 acpi_ut_safe_strcpy(char *dest, acpi_size dest_size, char *source);
 +acpi_status acpi_ut_strtoul64(char *string, u32 base, u64 *ret_integer);
  
 -u8 acpi_ut_safe_strcat(char *dest, acpi_size dest_size, char *source);
 +void acpi_ut_print_string(char *string, u8 max_length);
  
 -u8
 -acpi_ut_safe_strncat(char *dest,
 -		     acpi_size dest_size,
 -		     char *source, acpi_size max_transfer_length);
 -#endif
 +void ut_convert_backslashes(char *pathname);
 +
- u8 acpi_ut_valid_acpi_name(char *name);
- 
- u8 acpi_ut_valid_acpi_char(char character, u32 position);
- 
 +void acpi_ut_repair_name(char *name);
  
  /*
   * utmutex - mutex support
diff --cc drivers/acpi/acpica/tbfind.c
index e4f4f02d49e7,e348d616e60f..000000000000
--- a/drivers/acpi/acpica/tbfind.c
+++ b/drivers/acpi/acpica/tbfind.c
@@@ -74,12 -73,26 +74,28 @@@ acpi_tb_find_table(char *signature
  
  	ACPI_FUNCTION_TRACE(tb_find_table);
  
++<<<<<<< HEAD
++=======
+ 	/* Validate the input table signature */
+ 
+ 	if (!acpi_ut_valid_nameseg(signature)) {
+ 		return_ACPI_STATUS(AE_BAD_SIGNATURE);
+ 	}
+ 
+ 	/* Don't allow the OEM strings to be too long */
+ 
+ 	if ((strlen(oem_id) > ACPI_OEM_ID_SIZE) ||
+ 	    (strlen(oem_table_id) > ACPI_OEM_TABLE_ID_SIZE)) {
+ 		return_ACPI_STATUS(AE_AML_STRING_LIMIT);
+ 	}
+ 
++>>>>>>> 6a0df32c22fd (ACPICA: Move all ASCII utilities to a common file)
  	/* Normalize the input strings */
  
 -	memset(&header, 0, sizeof(struct acpi_table_header));
 +	ACPI_MEMSET(&header, 0, sizeof(struct acpi_table_header));
  	ACPI_MOVE_NAME(header.signature, signature);
 -	strncpy(header.oem_id, oem_id, ACPI_OEM_ID_SIZE);
 -	strncpy(header.oem_table_id, oem_table_id, ACPI_OEM_TABLE_ID_SIZE);
 +	ACPI_STRNCPY(header.oem_id, oem_id, ACPI_OEM_ID_SIZE);
 +	ACPI_STRNCPY(header.oem_table_id, oem_table_id, ACPI_OEM_TABLE_ID_SIZE);
  
  	/* Search for the table */
  
diff --cc drivers/acpi/acpica/tbinstal.c
index 4024bfc5fa21,8b13052128fc..000000000000
--- a/drivers/acpi/acpica/tbinstal.c
+++ b/drivers/acpi/acpica/tbinstal.c
@@@ -142,93 -261,101 +142,135 @@@ acpi_tb_add_table(struct acpi_table_des
  	}
  
  	/*
 -	 * Optionally do not load any SSDTs from the RSDT/XSDT. This can
 -	 * be useful for debugging ACPI problems on some machines.
 +	 * Validate the incoming table signature.
 +	 *
 +	 * 1) Originally, we checked the table signature for "SSDT" or "PSDT".
 +	 * 2) We added support for OEMx tables, signature "OEM".
 +	 * 3) Valid tables were encountered with a null signature, so we just
 +	 *    gave up on validating the signature, (05/2008).
 +	 * 4) We encountered non-AML tables such as the MADT, which caused
 +	 *    interpreter errors and kernel faults. So now, we once again allow
 +	 *    only "SSDT", "OEMx", and now, also a null signature. (05/2011).
  	 */
 -	if (!reload &&
 -	    acpi_gbl_disable_ssdt_table_install &&
 -	    ACPI_COMPARE_NAME(&new_table_desc.signature, ACPI_SIG_SSDT)) {
 -		ACPI_INFO(("Ignoring installation of %4.4s at %8.8X%8.8X",
 -			   new_table_desc.signature.ascii,
 -			   ACPI_FORMAT_UINT64(address)));
 -		goto release_and_exit;
 +	if ((table_desc->pointer->signature[0] != 0x00) &&
 +	    (!ACPI_COMPARE_NAME(table_desc->pointer->signature, ACPI_SIG_SSDT))
 +	    && (ACPI_STRNCMP(table_desc->pointer->signature, "OEM", 3))) {
 +		ACPI_BIOS_ERROR((AE_INFO,
 +				 "Table has invalid signature [%4.4s] (0x%8.8X), "
 +				 "must be SSDT or OEMx",
 +				 acpi_ut_valid_acpi_name(table_desc->pointer->
 +							 signature) ?
 +				 table_desc->pointer->signature : "????",
 +				 *(u32 *)table_desc->pointer->signature));
 +
 +		return_ACPI_STATUS(AE_BAD_SIGNATURE);
  	}
  
 -	/* Validate and verify a table before installation */
 +	(void)acpi_ut_acquire_mutex(ACPI_MTX_TABLES);
  
 -	status = acpi_tb_verify_temp_table(&new_table_desc, NULL);
 -	if (ACPI_FAILURE(status)) {
 -		goto release_and_exit;
 -	}
 +	/* Check if table is already registered */
  
++<<<<<<< HEAD
 +	for (i = 0; i < acpi_gbl_root_table_list.current_table_count; ++i) {
 +		if (!acpi_gbl_root_table_list.tables[i].pointer) {
 +			status =
 +			    acpi_tb_verify_table(&acpi_gbl_root_table_list.
 +						 tables[i]);
 +			if (ACPI_FAILURE(status)
 +			    || !acpi_gbl_root_table_list.tables[i].pointer) {
++=======
+ 	if (reload) {
+ 		/*
+ 		 * Validate the incoming table signature.
+ 		 *
+ 		 * 1) Originally, we checked the table signature for "SSDT" or "PSDT".
+ 		 * 2) We added support for OEMx tables, signature "OEM".
+ 		 * 3) Valid tables were encountered with a null signature, so we just
+ 		 *    gave up on validating the signature, (05/2008).
+ 		 * 4) We encountered non-AML tables such as the MADT, which caused
+ 		 *    interpreter errors and kernel faults. So now, we once again allow
+ 		 *    only "SSDT", "OEMx", and now, also a null signature. (05/2011).
+ 		 */
+ 		if ((new_table_desc.signature.ascii[0] != 0x00) &&
+ 		    (!ACPI_COMPARE_NAME
+ 		     (&new_table_desc.signature, ACPI_SIG_SSDT))
+ 		    && (strncmp(new_table_desc.signature.ascii, "OEM", 3))) {
+ 			ACPI_BIOS_ERROR((AE_INFO,
+ 					 "Table has invalid signature [%4.4s] (0x%8.8X), "
+ 					 "must be SSDT or OEMx",
+ 					 acpi_ut_valid_nameseg(new_table_desc.
+ 							       signature.
+ 							       ascii) ?
+ 					 new_table_desc.signature.
+ 					 ascii : "????",
+ 					 new_table_desc.signature.integer));
+ 
+ 			status = AE_BAD_SIGNATURE;
+ 			goto release_and_exit;
+ 		}
+ 
+ 		/* Check if table is already registered */
+ 
+ 		for (i = 0; i < acpi_gbl_root_table_list.current_table_count;
+ 		     ++i) {
+ 			/*
+ 			 * Check for a table match on the entire table length,
+ 			 * not just the header.
+ 			 */
+ 			if (!acpi_tb_compare_tables(&new_table_desc, i)) {
++>>>>>>> 6a0df32c22fd (ACPICA: Move all ASCII utilities to a common file)
  				continue;
  			}
 +		}
  
 -			/*
 -			 * Note: the current mechanism does not unregister a table if it is
 -			 * dynamically unloaded. The related namespace entries are deleted,
 -			 * but the table remains in the root table list.
 -			 *
 -			 * The assumption here is that the number of different tables that
 -			 * will be loaded is actually small, and there is minimal overhead
 -			 * in just keeping the table in case it is needed again.
 -			 *
 -			 * If this assumption changes in the future (perhaps on large
 -			 * machines with many table load/unload operations), tables will
 -			 * need to be unregistered when they are unloaded, and slots in the
 -			 * root table list should be reused when empty.
 -			 */
 -			if (acpi_gbl_root_table_list.tables[i].flags &
 -			    ACPI_TABLE_IS_LOADED) {
 -
 -				/* Table is still loaded, this is an error */
 -
 -				status = AE_ALREADY_EXISTS;
 -				goto release_and_exit;
 -			} else {
 -				/*
 -				 * Table was unloaded, allow it to be reloaded.
 -				 * As we are going to return AE_OK to the caller, we should
 -				 * take the responsibility of freeing the input descriptor.
 -				 * Refill the input descriptor to ensure
 -				 * acpi_tb_install_table_with_override() can be called again to
 -				 * indicate the re-installation.
 -				 */
 -				acpi_tb_uninstall_table(&new_table_desc);
 -				*table_index = i;
 -				return_ACPI_STATUS(AE_OK);
 -			}
 +		/*
 +		 * Check for a table match on the entire table length,
 +		 * not just the header.
 +		 */
 +		if (table_desc->length !=
 +		    acpi_gbl_root_table_list.tables[i].length) {
 +			continue;
 +		}
 +
 +		if (ACPI_MEMCMP(table_desc->pointer,
 +				acpi_gbl_root_table_list.tables[i].pointer,
 +				acpi_gbl_root_table_list.tables[i].length)) {
 +			continue;
 +		}
 +
 +		/*
 +		 * Note: the current mechanism does not unregister a table if it is
 +		 * dynamically unloaded. The related namespace entries are deleted,
 +		 * but the table remains in the root table list.
 +		 *
 +		 * The assumption here is that the number of different tables that
 +		 * will be loaded is actually small, and there is minimal overhead
 +		 * in just keeping the table in case it is needed again.
 +		 *
 +		 * If this assumption changes in the future (perhaps on large
 +		 * machines with many table load/unload operations), tables will
 +		 * need to be unregistered when they are unloaded, and slots in the
 +		 * root table list should be reused when empty.
 +		 */
 +		*table_index = i;
 +
 +		if (acpi_gbl_root_table_list.tables[i].
 +		    flags & ACPI_TABLE_IS_LOADED) {
 +
 +			/* Table is still loaded, this is an error */
 +
 +			status = AE_ALREADY_EXISTS;
 +			goto release;
 +		} else {
 +			/* Table was unloaded, allow it to be reloaded */
 +
 +			acpi_tb_delete_table(table_desc);
 +			table_desc->pointer =
 +			    acpi_gbl_root_table_list.tables[i].pointer;
 +			table_desc->address =
 +			    acpi_gbl_root_table_list.tables[i].address;
 +			status = AE_OK;
 +			goto print_header;
  		}
  	}
  
* Unmerged path drivers/acpi/acpica/dbnames.c
* Unmerged path drivers/acpi/acpica/tbdata.c
* Unmerged path tools/power/acpi/tools/acpidump/Makefile
* Unmerged path tools/power/acpi/tools/acpidump/apdump.c
diff --git a/drivers/acpi/acpica/Makefile b/drivers/acpi/acpica/Makefile
index 438304086ff1..02275c51449d 100644
--- a/drivers/acpi/acpica/Makefile
+++ b/drivers/acpi/acpica/Makefile
@@ -147,6 +147,7 @@ acpi-y +=		\
 acpi-y +=		\
 	utaddress.o	\
 	utalloc.o	\
+	utascii.o	\
 	utbuffer.o	\
 	utcopy.o	\
 	utexcep.o	\
* Unmerged path drivers/acpi/acpica/actables.h
* Unmerged path drivers/acpi/acpica/acutils.h
* Unmerged path drivers/acpi/acpica/dbnames.c
diff --git a/drivers/acpi/acpica/exnames.c b/drivers/acpi/acpica/exnames.c
index 14689dec4960..3086f458de77 100644
--- a/drivers/acpi/acpica/exnames.c
+++ b/drivers/acpi/acpica/exnames.c
@@ -178,7 +178,7 @@ static acpi_status acpi_ex_name_segment(u8 ** in_aml_address, char *name_string)
 
 	for (index = 0;
 	     (index < ACPI_NAME_SIZE)
-	     && (acpi_ut_valid_acpi_char(*aml_address, 0)); index++) {
+	     && (acpi_ut_valid_name_char(*aml_address, 0)); index++) {
 		char_buf[index] = *aml_address++;
 		ACPI_DEBUG_PRINT((ACPI_DB_LOAD, "%c\n", char_buf[index]));
 	}
* Unmerged path drivers/acpi/acpica/tbdata.c
* Unmerged path drivers/acpi/acpica/tbfind.c
* Unmerged path drivers/acpi/acpica/tbinstal.c
diff --git a/drivers/acpi/acpica/utascii.c b/drivers/acpi/acpica/utascii.c
new file mode 100644
index 000000000000..706c1f346490
--- /dev/null
+++ b/drivers/acpi/acpica/utascii.c
@@ -0,0 +1,140 @@
+/******************************************************************************
+ *
+ * Module Name: utascii - Utility ascii functions
+ *
+ *****************************************************************************/
+
+/*
+ * Copyright (C) 2000 - 2016, Intel Corp.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions, and the following disclaimer,
+ *    without modification.
+ * 2. Redistributions in binary form must reproduce at minimum a disclaimer
+ *    substantially similar to the "NO WARRANTY" disclaimer below
+ *    ("Disclaimer") and any redistribution must be conditioned upon
+ *    including a substantially similar Disclaimer requirement for further
+ *    binary redistribution.
+ * 3. Neither the names of the above-listed copyright holders nor the names
+ *    of any contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * Alternatively, this software may be distributed under the terms of the
+ * GNU General Public License ("GPL") version 2 as published by the Free
+ * Software Foundation.
+ *
+ * NO WARRANTY
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGES.
+ */
+
+#include <acpi/acpi.h>
+#include "accommon.h"
+
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_ut_valid_nameseg
+ *
+ * PARAMETERS:  name            - The name or table signature to be examined.
+ *                                Four characters, does not have to be a
+ *                                NULL terminated string.
+ *
+ * RETURN:      TRUE if signature is has 4 valid ACPI characters
+ *
+ * DESCRIPTION: Validate an ACPI table signature.
+ *
+ ******************************************************************************/
+
+u8 acpi_ut_valid_nameseg(char *name)
+{
+	u32 i;
+
+	/* Validate each character in the signature */
+
+	for (i = 0; i < ACPI_NAME_SIZE; i++) {
+		if (!acpi_ut_valid_name_char(name[i], i)) {
+			return (FALSE);
+		}
+	}
+
+	return (TRUE);
+}
+
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_ut_valid_name_char
+ *
+ * PARAMETERS:  char            - The character to be examined
+ *              position        - Byte position (0-3)
+ *
+ * RETURN:      TRUE if the character is valid, FALSE otherwise
+ *
+ * DESCRIPTION: Check for a valid ACPI character. Must be one of:
+ *              1) Upper case alpha
+ *              2) numeric
+ *              3) underscore
+ *
+ *              We allow a '!' as the last character because of the ASF! table
+ *
+ ******************************************************************************/
+
+u8 acpi_ut_valid_name_char(char character, u32 position)
+{
+
+	if (!((character >= 'A' && character <= 'Z') ||
+	      (character >= '0' && character <= '9') || (character == '_'))) {
+
+		/* Allow a '!' in the last position */
+
+		if (character == '!' && position == 3) {
+			return (TRUE);
+		}
+
+		return (FALSE);
+	}
+
+	return (TRUE);
+}
+
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_ut_check_and_repair_ascii
+ *
+ * PARAMETERS:  name                - Ascii string
+ *              count               - Number of characters to check
+ *
+ * RETURN:      None
+ *
+ * DESCRIPTION: Ensure that the requested number of characters are printable
+ *              Ascii characters. Sets non-printable and null chars to <space>.
+ *
+ ******************************************************************************/
+
+void acpi_ut_check_and_repair_ascii(u8 *name, char *repaired_name, u32 count)
+{
+	u32 i;
+
+	for (i = 0; i < count; i++) {
+		repaired_name[i] = (char)name[i];
+
+		if (!name[i]) {
+			return;
+		}
+		if (!isprint(name[i])) {
+			repaired_name[i] = ' ';
+		}
+	}
+}
diff --git a/drivers/acpi/acpica/utstring.c b/drivers/acpi/acpica/utstring.c
index 9edb65f516a6..f866cfa71b1f 100644
--- a/drivers/acpi/acpica/utstring.c
+++ b/drivers/acpi/acpica/utstring.c
@@ -422,73 +422,6 @@ void acpi_ut_print_string(char *string, u8 max_length)
 	}
 }
 
-/*******************************************************************************
- *
- * FUNCTION:    acpi_ut_valid_acpi_char
- *
- * PARAMETERS:  char            - The character to be examined
- *              position        - Byte position (0-3)
- *
- * RETURN:      TRUE if the character is valid, FALSE otherwise
- *
- * DESCRIPTION: Check for a valid ACPI character. Must be one of:
- *              1) Upper case alpha
- *              2) numeric
- *              3) underscore
- *
- *              We allow a '!' as the last character because of the ASF! table
- *
- ******************************************************************************/
-
-u8 acpi_ut_valid_acpi_char(char character, u32 position)
-{
-
-	if (!((character >= 'A' && character <= 'Z') ||
-	      (character >= '0' && character <= '9') || (character == '_'))) {
-
-		/* Allow a '!' in the last position */
-
-		if (character == '!' && position == 3) {
-			return (TRUE);
-		}
-
-		return (FALSE);
-	}
-
-	return (TRUE);
-}
-
-/*******************************************************************************
- *
- * FUNCTION:    acpi_ut_valid_acpi_name
- *
- * PARAMETERS:  name            - The name to be examined. Does not have to
- *                                be NULL terminated string.
- *
- * RETURN:      TRUE if the name is valid, FALSE otherwise
- *
- * DESCRIPTION: Check for a valid ACPI name. Each character must be one of:
- *              1) Upper case alpha
- *              2) numeric
- *              3) underscore
- *
- ******************************************************************************/
-
-u8 acpi_ut_valid_acpi_name(char *name)
-{
-	u32 i;
-
-	ACPI_FUNCTION_ENTRY();
-
-	for (i = 0; i < ACPI_NAME_SIZE; i++) {
-		if (!acpi_ut_valid_acpi_char(name[i], i)) {
-			return (FALSE);
-		}
-	}
-
-	return (TRUE);
-}
-
 /*******************************************************************************
  *
  * FUNCTION:    acpi_ut_repair_name
@@ -524,7 +457,7 @@ void acpi_ut_repair_name(char *name)
 	/* Check each character in the name */
 
 	for (i = 0; i < ACPI_NAME_SIZE; i++) {
-		if (acpi_ut_valid_acpi_char(name[i], i)) {
+		if (acpi_ut_valid_name_char(name[i], i)) {
 			continue;
 		}
 
* Unmerged path tools/power/acpi/tools/acpidump/Makefile
* Unmerged path tools/power/acpi/tools/acpidump/apdump.c
