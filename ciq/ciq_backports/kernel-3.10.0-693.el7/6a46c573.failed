mnt: Factor umount_mnt from umount_tree

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 6a46c5735c29175da55b2fa9d53775182422cdd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6a46c573.failed

For future use factor out a function umount_mnt from umount_tree.
This function unhashes a mount and remembers where the mount
was mounted so that eventually when the code makes it to a
sleeping context the mountpoint can be dput.

	Cc: stable@vger.kernel.org
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit 6a46c5735c29175da55b2fa9d53775182422cdd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/namespace.c
diff --cc fs/namespace.c
index 91fbddebae10,010d5bebcb7e..000000000000
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@@ -737,6 -809,26 +737,16 @@@ static void detach_mnt(struct mount *mn
  	mnt->mnt_mp = NULL;
  }
  
 -/*
 - * vfsmount lock must be held for write
 - */
 -static void detach_mnt(struct mount *mnt, struct path *old_path)
 -{
 -	old_path->dentry = mnt->mnt_mountpoint;
 -	old_path->mnt = &mnt->mnt_parent->mnt;
 -	unhash_mnt(mnt);
 -}
 -
+ /*
+  * vfsmount lock must be held for write
+  */
+ static void umount_mnt(struct mount *mnt)
+ {
+ 	/* old mountpoint will be dropped when we can do that */
+ 	mnt->mnt_ex_mountpoint = mnt->mnt_mountpoint;
+ 	unhash_mnt(mnt);
+ }
+ 
  /*
   * vfsmount lock must be held for write
   */
@@@ -1228,15 -1375,13 +1238,20 @@@ void umount_tree(struct mount *mnt, in
  		list_del_init(&p->mnt_list);
  		__touch_mnt_namespace(p->mnt_ns);
  		p->mnt_ns = NULL;
 -		if (how & UMOUNT_SYNC)
 -			p->mnt.mnt_flags |= MNT_SYNC_UMOUNT;
 -
 -		pin_insert_group(&p->mnt_umount, &p->mnt_parent->mnt, &unmounted);
 +		list_del_init(&p->mnt_child);
  		if (mnt_has_parent(p)) {
++<<<<<<< HEAD
 +			put_mountpoint(p->mnt_mp);
 +			/* move the reference to mountpoint into ->mnt_ex_mountpoint */
 +			p->mnt_ex_mountpoint.dentry = p->mnt_mountpoint;
 +			p->mnt_ex_mountpoint.mnt = &p->mnt_parent->mnt;
 +			p->mnt_mountpoint = p->mnt.mnt_root;
 +			p->mnt_parent = p;
 +			p->mnt_mp = NULL;
++=======
+ 			mnt_add_count(p->mnt_parent, -1);
+ 			umount_mnt(p);
++>>>>>>> 6a46c5735c29 (mnt: Factor umount_mnt from umount_tree)
  		}
  		change_mnt_propagation(p, MS_PRIVATE);
  	}
* Unmerged path fs/namespace.c
