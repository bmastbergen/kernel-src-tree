perf record: Fix --switch-output documentation and comment

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 60437ac02f398e0ee0927748d4798dd5534ac90d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/60437ac0.failed

There's no --signal-trigger option, also adding the code comment into
record man page.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Wang Nan <wangnan0@huawei.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1483431600-19887-4-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 60437ac02f398e0ee0927748d4798dd5534ac90d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-record.txt
#	tools/perf/builtin-record.c
diff --cc tools/perf/Documentation/perf-record.txt
index 37473e1c67b6,5054d9147f0f..000000000000
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@@ -331,6 -418,52 +331,55 @@@ Configure all used events to run in ker
  --all-user::
  Configure all used events to run in user space.
  
++<<<<<<< HEAD
++=======
+ --timestamp-filename
+ Append timestamp to output file name.
+ 
+ --switch-output::
+ Generate multiple perf.data files, timestamp prefixed, switching to a new one
+ when receiving a SIGUSR2.
+ 
+ A possible use case is to, given an external event, slice the perf.data file
+ that gets then processed, possibly via a perf script, to decide if that
+ particular perf.data snapshot should be kept or not.
+ 
+ Implies --timestamp-filename, --no-buildid and --no-buildid-cache.
+ The reason for the latter two is to reduce the data file switching
+ overhead. You can still switch them on with:
+ 
+   --switch-output --no-no-buildid  --no-no-buildid-cache
+ 
+ --dry-run::
+ Parse options then exit. --dry-run can be used to detect errors in cmdline
+ options.
+ 
+ 'perf record --dry-run -e' can act as a BPF script compiler if llvm.dump-obj
+ in config file is set to true.
+ 
+ --tail-synthesize::
+ Instead of collecting non-sample events (for example, fork, comm, mmap) at
+ the beginning of record, collect them during finalizing an output file.
+ The collected non-sample events reflects the status of the system when
+ record is finished.
+ 
+ --overwrite::
+ Makes all events use an overwritable ring buffer. An overwritable ring
+ buffer works like a flight recorder: when it gets full, the kernel will
+ overwrite the oldest records, that thus will never make it to the
+ perf.data file.
+ 
+ When '--overwrite' and '--switch-output' are used perf records and drops
+ events until it receives a signal, meaning that something unusual was
+ detected that warrants taking a snapshot of the most current events,
+ those fitting in the ring buffer at that moment.
+ 
+ 'overwrite' attribute can also be set or canceled for an event using
+ config terms. For example: 'cycles/overwrite/' and 'instructions/no-overwrite/'.
+ 
+ Implies --tail-synthesize.
+ 
++>>>>>>> 60437ac02f39 (perf record: Fix --switch-output documentation and comment)
  SEE ALSO
  --------
  linkperf:perf-stat[1], linkperf:perf-list[1]
diff --cc tools/perf/builtin-record.c
index 6cb1cbb83a86,4ec10e9427d9..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -1385,8 -1627,39 +1385,42 @@@ int cmd_record(int argc, const char **a
  "If some relocation was applied (e.g. kexec) symbols may be misresolved\n"
  "even with a suitable vmlinux or kallsyms file.\n\n");
  
 -	if (rec->no_buildid_cache || rec->no_buildid) {
 +	if (rec->no_buildid_cache || rec->no_buildid)
  		disable_buildid_cache();
++<<<<<<< HEAD
++=======
+ 	} else if (rec->switch_output) {
+ 		/*
+ 		 * In 'perf record --switch-output', disable buildid
+ 		 * generation by default to reduce data file switching
+ 		 * overhead. Still generate buildid if they are required
+ 		 * explicitly using
+ 		 *
+ 		 *  perf record --switch-output --no-no-buildid \
+ 		 *              --no-no-buildid-cache
+ 		 *
+ 		 * Following code equals to:
+ 		 *
+ 		 * if ((rec->no_buildid || !rec->no_buildid_set) &&
+ 		 *     (rec->no_buildid_cache || !rec->no_buildid_cache_set))
+ 		 *         disable_buildid_cache();
+ 		 */
+ 		bool disable = true;
+ 
+ 		if (rec->no_buildid_set && !rec->no_buildid)
+ 			disable = false;
+ 		if (rec->no_buildid_cache_set && !rec->no_buildid_cache)
+ 			disable = false;
+ 		if (disable) {
+ 			rec->no_buildid = true;
+ 			rec->no_buildid_cache = true;
+ 			disable_buildid_cache();
+ 		}
+ 	}
+ 
+ 	if (record.opts.overwrite)
+ 		record.opts.tail_synthesize = true;
++>>>>>>> 60437ac02f39 (perf record: Fix --switch-output documentation and comment)
  
  	if (rec->evlist->nr_entries == 0 &&
  	    perf_evlist__add_default(rec->evlist) < 0) {
* Unmerged path tools/perf/Documentation/perf-record.txt
* Unmerged path tools/perf/builtin-record.c
