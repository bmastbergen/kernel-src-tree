amd-xgbe: Prepare for working with more than one type of phy

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lendacky, Thomas <Thomas.Lendacky@amd.com>
commit e57f7a3feaef0e9e196801f1625bca1337405421
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e57f7a3f.failed

Prepare the code to be able to work with more than one type of phy by
adding additional callable functions into the phy interface and removing
phy specific settings/functions from non-phy related files.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e57f7a3feaef0e9e196801f1625bca1337405421)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amd/xgbe/Makefile
#	drivers/net/ethernet/amd/xgbe/xgbe-drv.c
#	drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c
#	drivers/net/ethernet/amd/xgbe/xgbe-main.c
#	drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
#	drivers/net/ethernet/amd/xgbe/xgbe.h
diff --cc drivers/net/ethernet/amd/xgbe/Makefile
index 26cf9af1642f,60b4ae2f05fb..000000000000
--- a/drivers/net/ethernet/amd/xgbe/Makefile
+++ b/drivers/net/ethernet/amd/xgbe/Makefile
@@@ -1,6 -1,9 +1,12 @@@
  obj-$(CONFIG_AMD_XGBE) += amd-xgbe.o
  
  amd-xgbe-objs := xgbe-main.o xgbe-drv.o xgbe-dev.o \
++<<<<<<< HEAD
 +		 xgbe-desc.o xgbe-ethtool.o xgbe-mdio.o
++=======
+ 		 xgbe-desc.o xgbe-ethtool.o xgbe-mdio.o \
+ 		 xgbe-ptp.o \
+ 		 xgbe-phy-v1.o
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  
 -amd-xgbe-$(CONFIG_AMD_XGBE_DCB) += xgbe-dcb.o
  amd-xgbe-$(CONFIG_DEBUG_FS) += xgbe-debugfs.o
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index d58e85811bc9,dd166a003572..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@@ -490,7 -775,15 +490,19 @@@ static void xgbe_free_rx_skbuff(struct 
  		}
  	}
  
++<<<<<<< HEAD
 +	DBGPR("<--xgbe_free_rx_skbuff\n");
++=======
+ 	DBGPR("<--xgbe_free_rx_data\n");
+ }
+ 
+ static int xgbe_phy_reset(struct xgbe_prv_data *pdata)
+ {
+ 	pdata->phy_link = -1;
+ 	pdata->phy_speed = SPEED_UNKNOWN;
+ 
+ 	return pdata->phy_if.phy_reset(pdata);
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  }
  
  int xgbe_powerdown(struct net_device *netdev, unsigned int caller)
@@@ -760,10 -1292,15 +772,20 @@@ static int xgbe_open(struct net_device 
  
  	DBGPR("-->xgbe_open\n");
  
++<<<<<<< HEAD
 +	/* Enable the clock */
 +	ret = clk_prepare_enable(pdata->sysclock);
++=======
+ 	/* Reset the phy settings */
+ 	ret = xgbe_phy_reset(pdata);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* Enable the clocks */
+ 	ret = clk_prepare_enable(pdata->sysclk);
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  	if (ret) {
 -		netdev_alert(netdev, "dma clk_prepare_enable failed\n");
 +		netdev_alert(netdev, "clk_prepare_enable failed\n");
  		return ret;
  	}
  
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c
index 95b1fbb7677f,46c959b994a7..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c
@@@ -304,39 -300,24 +304,44 @@@ static int xgbe_set_settings(struct net
  	u32 speed;
  	int ret;
  
 +	DBGPR("-->xgbe_set_settings\n");
 +
 +	if (!pdata->phydev)
 +		return -ENODEV;
 +
  	speed = ethtool_cmd_speed(cmd);
  
 -	if (cmd->phy_address != pdata->phy.address) {
 -		netdev_err(netdev, "invalid phy address %hhu\n",
 -			   cmd->phy_address);
 +	if (cmd->phy_address != phydev->addr)
  		return -EINVAL;
 -	}
  
  	if ((cmd->autoneg != AUTONEG_ENABLE) &&
 -	    (cmd->autoneg != AUTONEG_DISABLE)) {
 -		netdev_err(netdev, "unsupported autoneg %hhu\n",
 -			   cmd->autoneg);
 +	    (cmd->autoneg != AUTONEG_DISABLE))
  		return -EINVAL;
 -	}
  
  	if (cmd->autoneg == AUTONEG_DISABLE) {
++<<<<<<< HEAD
 +		switch (speed) {
 +		case SPEED_10000:
 +			break;
 +		case SPEED_2500:
 +			if (pdata->speed_set != XGBE_SPEEDSET_2500_10000) {
 +				netdev_err(netdev, "unsupported speed %u\n",
 +					   speed);
 +				return -EINVAL;
 +			}
 +			break;
 +		case SPEED_1000:
 +			if (pdata->speed_set != XGBE_SPEEDSET_1000_10000) {
 +				netdev_err(netdev, "unsupported speed %u\n",
 +					   speed);
 +				return -EINVAL;
 +			}
 +			break;
 +		default:
++=======
+ 		if (!pdata->phy_if.phy_valid_speed(pdata, speed)) {
+ 			netdev_err(netdev, "unsupported speed %u\n", speed);
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  			return -EINVAL;
  		}
  
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-main.c
index e79ba9088346,38c5985c52ef..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-main.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-main.c
@@@ -123,7 -123,13 +123,13 @@@
  #include <linux/io.h>
  #include <linux/of.h>
  #include <linux/of_net.h>
++<<<<<<< HEAD
++=======
+ #include <linux/of_address.h>
+ #include <linux/of_platform.h>
+ #include <linux/of_device.h>
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  #include <linux/clk.h>
 -#include <linux/property.h>
 -#include <linux/acpi.h>
 -#include <linux/mdio.h>
  
  #include "xgbe.h"
  #include "xgbe-common.h"
@@@ -134,60 -139,13 +140,63 @@@ MODULE_LICENSE("Dual BSD/GPL")
  MODULE_VERSION(XGBE_DRV_VERSION);
  MODULE_DESCRIPTION(XGBE_DRV_DESC);
  
 -static int debug = -1;
 -module_param(debug, int, S_IWUSR | S_IRUGO);
 -MODULE_PARM_DESC(debug, " Network interface message level setting");
 +static struct xgbe_channel *xgbe_alloc_rings(struct xgbe_prv_data *pdata)
 +{
 +	struct xgbe_channel *channel_mem, *channel;
 +	struct xgbe_ring *tx_ring, *rx_ring;
 +	unsigned int count, i;
 +
 +	DBGPR("-->xgbe_alloc_rings\n");
 +
++<<<<<<< HEAD
 +	count = max_t(unsigned int, pdata->tx_ring_count, pdata->rx_ring_count);
 +
 +	channel_mem = devm_kcalloc(pdata->dev, count,
 +				   sizeof(struct xgbe_channel), GFP_KERNEL);
 +	if (!channel_mem)
 +		return NULL;
 +
 +	tx_ring = devm_kcalloc(pdata->dev, pdata->tx_ring_count,
 +			       sizeof(struct xgbe_ring), GFP_KERNEL);
 +	if (!tx_ring)
 +		return NULL;
 +
 +	rx_ring = devm_kcalloc(pdata->dev, pdata->rx_ring_count,
 +			       sizeof(struct xgbe_ring), GFP_KERNEL);
 +	if (!rx_ring)
 +		return NULL;
 +
 +	for (i = 0, channel = channel_mem; i < count; i++, channel++) {
 +		snprintf(channel->name, sizeof(channel->name), "channel-%d", i);
 +		channel->pdata = pdata;
 +		channel->queue_index = i;
 +		channel->dma_regs = pdata->xgmac_regs + DMA_CH_BASE +
 +				    (DMA_CH_INC * i);
 +
 +		if (i < pdata->tx_ring_count) {
 +			spin_lock_init(&tx_ring->lock);
 +			channel->tx_ring = tx_ring++;
 +		}
 +
 +		if (i < pdata->rx_ring_count) {
 +			spin_lock_init(&rx_ring->lock);
 +			channel->rx_ring = rx_ring++;
 +		}
 +
 +		DBGPR("  %s - queue_index=%u, dma_regs=%p, tx=%p, rx=%p\n",
 +		      channel->name, channel->queue_index, channel->dma_regs,
 +		      channel->tx_ring, channel->rx_ring);
 +	}
 +
 +	pdata->channel_count = count;
 +
 +	DBGPR("<--xgbe_alloc_rings\n");
  
 -static const u32 default_msg_level = (NETIF_MSG_LINK | NETIF_MSG_IFDOWN |
 -				      NETIF_MSG_IFUP);
 +	return channel_mem;
 +}
  
++=======
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  static void xgbe_default_config(struct xgbe_prv_data *pdata)
  {
  	DBGPR("-->xgbe_default_config\n");
@@@ -214,18 -170,184 +223,189 @@@
  static void xgbe_init_all_fptrs(struct xgbe_prv_data *pdata)
  {
  	xgbe_init_function_ptrs_dev(&pdata->hw_if);
 -	xgbe_init_function_ptrs_phy(&pdata->phy_if);
  	xgbe_init_function_ptrs_desc(&pdata->desc_if);
+ 
+ 	pdata->vdata->init_function_ptrs_phy_impl(&pdata->phy_if);
+ }
+ 
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ACPI
+ static const struct acpi_device_id xgbe_acpi_match[];
+ 
+ static struct xgbe_version_data *xgbe_acpi_vdata(struct xgbe_prv_data *pdata)
+ {
+ 	const struct acpi_device_id *id;
+ 
+ 	id = acpi_match_device(xgbe_acpi_match, pdata->dev);
+ 
+ 	return id ? (struct xgbe_version_data *)id->driver_data : NULL;
+ }
+ 
+ static int xgbe_acpi_support(struct xgbe_prv_data *pdata)
+ {
+ 	struct device *dev = pdata->dev;
+ 	u32 property;
+ 	int ret;
+ 
+ 	/* Obtain the system clock setting */
+ 	ret = device_property_read_u32(dev, XGBE_ACPI_DMA_FREQ, &property);
+ 	if (ret) {
+ 		dev_err(dev, "unable to obtain %s property\n",
+ 			XGBE_ACPI_DMA_FREQ);
+ 		return ret;
+ 	}
+ 	pdata->sysclk_rate = property;
+ 
+ 	/* Obtain the PTP clock setting */
+ 	ret = device_property_read_u32(dev, XGBE_ACPI_PTP_FREQ, &property);
+ 	if (ret) {
+ 		dev_err(dev, "unable to obtain %s property\n",
+ 			XGBE_ACPI_PTP_FREQ);
+ 		return ret;
+ 	}
+ 	pdata->ptpclk_rate = property;
+ 
+ 	return 0;
+ }
+ #else   /* CONFIG_ACPI */
+ static struct xgbe_version_data *xgbe_acpi_vdata(struct xgbe_prv_data *pdata)
+ {
+ 	return NULL;
+ }
+ 
+ static int xgbe_acpi_support(struct xgbe_prv_data *pdata)
+ {
+ 	return -EINVAL;
+ }
+ #endif  /* CONFIG_ACPI */
+ 
+ #ifdef CONFIG_OF
+ static const struct of_device_id xgbe_of_match[];
+ 
+ static struct xgbe_version_data *xgbe_of_vdata(struct xgbe_prv_data *pdata)
+ {
+ 	const struct of_device_id *id;
+ 
+ 	id = of_match_device(xgbe_of_match, pdata->dev);
+ 
+ 	return id ? (struct xgbe_version_data *)id->data : NULL;
+ }
+ 
+ static int xgbe_of_support(struct xgbe_prv_data *pdata)
+ {
+ 	struct device *dev = pdata->dev;
+ 
+ 	/* Obtain the system clock setting */
+ 	pdata->sysclk = devm_clk_get(dev, XGBE_DMA_CLOCK);
+ 	if (IS_ERR(pdata->sysclk)) {
+ 		dev_err(dev, "dma devm_clk_get failed\n");
+ 		return PTR_ERR(pdata->sysclk);
+ 	}
+ 	pdata->sysclk_rate = clk_get_rate(pdata->sysclk);
+ 
+ 	/* Obtain the PTP clock setting */
+ 	pdata->ptpclk = devm_clk_get(dev, XGBE_PTP_CLOCK);
+ 	if (IS_ERR(pdata->ptpclk)) {
+ 		dev_err(dev, "ptp devm_clk_get failed\n");
+ 		return PTR_ERR(pdata->ptpclk);
+ 	}
+ 	pdata->ptpclk_rate = clk_get_rate(pdata->ptpclk);
+ 
+ 	return 0;
+ }
+ 
+ static struct platform_device *xgbe_of_get_phy_pdev(struct xgbe_prv_data *pdata)
+ {
+ 	struct device *dev = pdata->dev;
+ 	struct device_node *phy_node;
+ 	struct platform_device *phy_pdev;
+ 
+ 	phy_node = of_parse_phandle(dev->of_node, "phy-handle", 0);
+ 	if (phy_node) {
+ 		/* Old style device tree:
+ 		 *   The XGBE and PHY resources are separate
+ 		 */
+ 		phy_pdev = of_find_device_by_node(phy_node);
+ 		of_node_put(phy_node);
+ 	} else {
+ 		/* New style device tree:
+ 		 *   The XGBE and PHY resources are grouped together with
+ 		 *   the PHY resources listed last
+ 		 */
+ 		get_device(dev);
+ 		phy_pdev = pdata->pdev;
+ 	}
+ 
+ 	return phy_pdev;
+ }
+ #else   /* CONFIG_OF */
+ static struct xgbe_version_data *xgbe_of_vdata(struct xgbe_prv_data *pdata)
+ {
+ 	return NULL;
+ }
+ 
+ static int xgbe_of_support(struct xgbe_prv_data *pdata)
+ {
+ 	return -EINVAL;
+ }
+ 
+ static struct platform_device *xgbe_of_get_phy_pdev(struct xgbe_prv_data *pdata)
+ {
+ 	return NULL;
+ }
+ #endif  /* CONFIG_OF */
+ 
+ static unsigned int xgbe_resource_count(struct platform_device *pdev,
+ 					unsigned int type)
+ {
+ 	unsigned int count;
+ 	int i;
+ 
+ 	for (i = 0, count = 0; i < pdev->num_resources; i++) {
+ 		struct resource *res = &pdev->resource[i];
+ 
+ 		if (type == resource_type(res))
+ 			count++;
+ 	}
+ 
+ 	return count;
  }
  
+ static struct platform_device *xgbe_get_phy_pdev(struct xgbe_prv_data *pdata)
+ {
+ 	struct platform_device *phy_pdev;
+ 
+ 	if (pdata->use_acpi) {
+ 		get_device(pdata->dev);
+ 		phy_pdev = pdata->pdev;
+ 	} else {
+ 		phy_pdev = xgbe_of_get_phy_pdev(pdata);
+ 	}
+ 
+ 	return phy_pdev;
+ }
+ 
+ static struct xgbe_version_data *xgbe_get_vdata(struct xgbe_prv_data *pdata)
+ {
+ 	return pdata->use_acpi ? xgbe_acpi_vdata(pdata)
+ 			       : xgbe_of_vdata(pdata);
+ }
+ 
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  static int xgbe_probe(struct platform_device *pdev)
  {
  	struct xgbe_prv_data *pdata;
 +	struct xgbe_hw_if *hw_if;
 +	struct xgbe_desc_if *desc_if;
  	struct net_device *netdev;
  	struct device *dev = &pdev->dev;
++<<<<<<< HEAD
++=======
+ 	struct platform_device *phy_pdev;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  	struct resource *res;
 -	const char *phy_mode;
 -	unsigned int i, phy_memnum, phy_irqnum;
 -	enum dev_dma_attr attr;
 +	const u8 *mac_addr;
  	int ret;
  
  	DBGPR("--> xgbe_probe\n");
@@@ -245,7 -368,43 +425,47 @@@
  	platform_set_drvdata(pdev, netdev);
  
  	spin_lock_init(&pdata->lock);
++<<<<<<< HEAD
 +	mutex_init(&pdata->xpcs_mutex);
++=======
+ 	spin_lock_init(&pdata->xpcs_lock);
+ 	mutex_init(&pdata->rss_mutex);
+ 	spin_lock_init(&pdata->tstamp_lock);
+ 
+ 	pdata->msg_enable = netif_msg_init(debug, default_msg_level);
+ 
+ 	set_bit(XGBE_DOWN, &pdata->dev_state);
+ 
+ 	/* Check if we should use ACPI or DT */
+ 	pdata->use_acpi = dev->of_node ? 0 : 1;
+ 
+ 	/* Get the version data */
+ 	pdata->vdata = xgbe_get_vdata(pdata);
+ 
+ 	phy_pdev = xgbe_get_phy_pdev(pdata);
+ 	if (!phy_pdev) {
+ 		dev_err(dev, "unable to obtain phy device\n");
+ 		ret = -EINVAL;
+ 		goto err_phydev;
+ 	}
+ 	pdata->phy_pdev = phy_pdev;
+ 	pdata->phy_dev = &phy_pdev->dev;
+ 
+ 	if (pdev == phy_pdev) {
+ 		/* New style device tree or ACPI:
+ 		 *   The XGBE and PHY resources are grouped together with
+ 		 *   the PHY resources listed last
+ 		 */
+ 		phy_memnum = xgbe_resource_count(pdev, IORESOURCE_MEM) - 3;
+ 		phy_irqnum = xgbe_resource_count(pdev, IORESOURCE_IRQ) - 1;
+ 	} else {
+ 		/* Old style device tree:
+ 		 *   The XGBE and PHY resources are separate
+ 		 */
+ 		phy_memnum = 0;
+ 		phy_irqnum = 0;
+ 	}
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  
  	/* Set and validate the number of descriptors for a ring */
  	BUILD_BUG_ON_NOT_POWER_OF_2(XGBE_TX_DESC_CNT);
@@@ -290,18 -442,82 +510,94 @@@
  		ret = PTR_ERR(pdata->xpcs_regs);
  		goto err_io;
  	}
 -	if (netif_msg_probe(pdata))
 -		dev_dbg(dev, "xpcs_regs  = %p\n", pdata->xpcs_regs);
 +	DBGPR("  xpcs_regs  = %p\n", pdata->xpcs_regs);
 +
++<<<<<<< HEAD
 +	/* Set the DMA mask */
 +	if (!dev->dma_mask)
 +		dev->dma_mask = &dev->coherent_dma_mask;
 +	ret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(40));
 +	if (ret) {
 +		dev_err(dev, "dma_set_mask_and_coherent failed\n");
 +		goto err_io;
 +	}
  
 +	if (of_property_read_bool(dev->of_node, "dma-coherent")) {
++=======
+ 	res = platform_get_resource(phy_pdev, IORESOURCE_MEM, phy_memnum++);
+ 	pdata->rxtx_regs = devm_ioremap_resource(dev, res);
+ 	if (IS_ERR(pdata->rxtx_regs)) {
+ 		dev_err(dev, "rxtx ioremap failed\n");
+ 		ret = PTR_ERR(pdata->rxtx_regs);
+ 		goto err_io;
+ 	}
+ 	if (netif_msg_probe(pdata))
+ 		dev_dbg(dev, "rxtx_regs  = %p\n", pdata->rxtx_regs);
+ 
+ 	res = platform_get_resource(phy_pdev, IORESOURCE_MEM, phy_memnum++);
+ 	pdata->sir0_regs = devm_ioremap_resource(dev, res);
+ 	if (IS_ERR(pdata->sir0_regs)) {
+ 		dev_err(dev, "sir0 ioremap failed\n");
+ 		ret = PTR_ERR(pdata->sir0_regs);
+ 		goto err_io;
+ 	}
+ 	if (netif_msg_probe(pdata))
+ 		dev_dbg(dev, "sir0_regs  = %p\n", pdata->sir0_regs);
+ 
+ 	res = platform_get_resource(phy_pdev, IORESOURCE_MEM, phy_memnum++);
+ 	pdata->sir1_regs = devm_ioremap_resource(dev, res);
+ 	if (IS_ERR(pdata->sir1_regs)) {
+ 		dev_err(dev, "sir1 ioremap failed\n");
+ 		ret = PTR_ERR(pdata->sir1_regs);
+ 		goto err_io;
+ 	}
+ 	if (netif_msg_probe(pdata))
+ 		dev_dbg(dev, "sir1_regs  = %p\n", pdata->sir1_regs);
+ 
+ 	/* Retrieve the MAC address */
+ 	ret = device_property_read_u8_array(dev, XGBE_MAC_ADDR_PROPERTY,
+ 					    pdata->mac_addr,
+ 					    sizeof(pdata->mac_addr));
+ 	if (ret || !is_valid_ether_addr(pdata->mac_addr)) {
+ 		dev_err(dev, "invalid %s property\n", XGBE_MAC_ADDR_PROPERTY);
+ 		if (!ret)
+ 			ret = -EINVAL;
+ 		goto err_io;
+ 	}
+ 
+ 	/* Retrieve the PHY mode - it must be "xgmii" */
+ 	ret = device_property_read_string(dev, XGBE_PHY_MODE_PROPERTY,
+ 					  &phy_mode);
+ 	if (ret || strcmp(phy_mode, phy_modes(PHY_INTERFACE_MODE_XGMII))) {
+ 		dev_err(dev, "invalid %s property\n", XGBE_PHY_MODE_PROPERTY);
+ 		if (!ret)
+ 			ret = -EINVAL;
+ 		goto err_io;
+ 	}
+ 	pdata->phy_mode = PHY_INTERFACE_MODE_XGMII;
+ 
+ 	/* Check for per channel interrupt support */
+ 	if (device_property_present(dev, XGBE_DMA_IRQS_PROPERTY))
+ 		pdata->per_channel_irq = 1;
+ 
+ 	/* Obtain device settings unique to ACPI/OF */
+ 	if (pdata->use_acpi)
+ 		ret = xgbe_acpi_support(pdata);
+ 	else
+ 		ret = xgbe_of_support(pdata);
+ 	if (ret)
+ 		goto err_io;
+ 
+ 	/* Set the DMA coherency values */
+ 	attr = device_get_dma_attr(dev);
+ 	if (attr == DEV_DMA_NOT_SUPPORTED) {
+ 		dev_err(dev, "DMA is not supported");
+ 		ret = -ENODEV;
+ 		goto err_io;
+ 	}
+ 	pdata->coherent = (attr == DEV_DMA_COHERENT);
+ 	if (pdata->coherent) {
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  		pdata->axdomain = XGBE_DMA_OS_AXDOMAIN;
  		pdata->arcache = XGBE_DMA_OS_ARCACHE;
  		pdata->awcache = XGBE_DMA_OS_AWCACHE;
@@@ -368,28 -593,28 +664,41 @@@
  		goto err_io;
  	}
  
 -	/* Initialize RSS hash key and lookup table */
 -	netdev_rss_key_fill(pdata->rss_key, sizeof(pdata->rss_key));
 +	/* Allocate the rings for the DMA channels */
 +	pdata->channel = xgbe_alloc_rings(pdata);
 +	if (!pdata->channel) {
 +		dev_err(dev, "ring allocation failed\n");
 +		ret = -ENOMEM;
 +		goto err_io;
 +	}
  
 -	for (i = 0; i < XGBE_RSS_MAX_TABLE_SIZE; i++)
 -		XGMAC_SET_BITS(pdata->rss_table[i], MAC_RSSDR, DMCH,
 -			       i % pdata->rx_ring_count);
 +	/* Prepare to regsiter with MDIO */
 +	pdata->mii_bus_id = kasprintf(GFP_KERNEL, "%s", pdev->name);
 +	if (!pdata->mii_bus_id) {
 +		dev_err(dev, "failed to allocate mii bus id\n");
 +		ret = -ENOMEM;
 +		goto err_io;
 +	}
 +	ret = xgbe_mdio_register(pdata);
 +	if (ret)
 +		goto err_bus_id;
  
++<<<<<<< HEAD
 +	/* Set network and ethtool operations */
++=======
+ 	XGMAC_SET_BITS(pdata->rss_options, MAC_RSSCR, IP2TE, 1);
+ 	XGMAC_SET_BITS(pdata->rss_options, MAC_RSSCR, TCP4TE, 1);
+ 	XGMAC_SET_BITS(pdata->rss_options, MAC_RSSCR, UDP4TE, 1);
+ 
+ 	/* Call MDIO/PHY initialization routine */
+ 	ret = pdata->phy_if.phy_init(pdata);
+ 	if (ret)
+ 		goto err_io;
+ 
+ 	/* Set device operations */
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  	netdev->netdev_ops = xgbe_get_netdev_ops();
  	netdev->ethtool_ops = xgbe_get_ethtool_ops();
 -#ifdef CONFIG_AMD_XGBE_DCB
 -	netdev->dcbnl_ops = xgbe_get_dcbnl_ops();
 -#endif
  
  	/* Set device features */
  	netdev->hw_features = NETIF_F_SG |
@@@ -453,11 -715,19 +762,27 @@@ static int xgbe_remove(struct platform_
  
  	xgbe_debugfs_exit(pdata);
  
++<<<<<<< HEAD
 +	unregister_netdev(netdev);
 +
 +	xgbe_mdio_unregister(pdata);
 +
 +	kfree(pdata->mii_bus_id);
++=======
+ 	xgbe_ptp_unregister(pdata);
+ 
+ 	pdata->phy_if.phy_exit(pdata);
+ 
+ 	flush_workqueue(pdata->an_workqueue);
+ 	destroy_workqueue(pdata->an_workqueue);
+ 
+ 	flush_workqueue(pdata->dev_workqueue);
+ 	destroy_workqueue(pdata->dev_workqueue);
+ 
+ 	unregister_netdev(netdev);
+ 
+ 	platform_device_put(pdata->phy_pdev);
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  
  	free_netdev(netdev);
  
@@@ -506,8 -783,24 +831,27 @@@ static int xgbe_resume(struct device *d
  }
  #endif /* CONFIG_PM */
  
++<<<<<<< HEAD
++=======
+ static const struct xgbe_version_data xgbe_v1 = {
+ 	.init_function_ptrs_phy_impl	= xgbe_init_function_ptrs_phy_v1,
+ };
+ 
+ #ifdef CONFIG_ACPI
+ static const struct acpi_device_id xgbe_acpi_match[] = {
+ 	{ .id = "AMDI8001",
+ 	  .driver_data = (kernel_ulong_t)&xgbe_v1 },
+ 	{},
+ };
+ 
+ MODULE_DEVICE_TABLE(acpi, xgbe_acpi_match);
+ #endif
+ 
+ #ifdef CONFIG_OF
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  static const struct of_device_id xgbe_of_match[] = {
- 	{ .compatible = "amd,xgbe-seattle-v1a", },
+ 	{ .compatible = "amd,xgbe-seattle-v1a",
+ 	  .data = &xgbe_v1 },
  	{},
  };
  
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
index 8514b5841ecd,35c302f7889c..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
@@@ -124,73 -125,579 +124,612 @@@
  #include "xgbe.h"
  #include "xgbe-common.h"
  
 -static void xgbe_an_enable_kr_training(struct xgbe_prv_data *pdata)
 +
 +static int xgbe_mdio_read(struct mii_bus *mii, int prtad, int mmd_reg)
  {
 -	unsigned int reg;
 +	struct xgbe_prv_data *pdata = mii->priv;
 +	struct xgbe_hw_if *hw_if = &pdata->hw_if;
 +	int mmd_data;
  
 -	reg = XMDIO_READ(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_PMD_CTRL);
 +	DBGPR_MDIO("-->xgbe_mdio_read: prtad=%#x mmd_reg=%#x\n",
 +		   prtad, mmd_reg);
 +
 +	mmd_data = hw_if->read_mmd_regs(pdata, prtad, mmd_reg);
  
 -	reg |= XGBE_KR_TRAINING_ENABLE;
 -	XMDIO_WRITE(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_PMD_CTRL, reg);
 +	DBGPR_MDIO("<--xgbe_mdio_read: mmd_data=%#x\n", mmd_data);
 +
 +	return mmd_data;
  }
  
 -static void xgbe_an_disable_kr_training(struct xgbe_prv_data *pdata)
 +static int xgbe_mdio_write(struct mii_bus *mii, int prtad, int mmd_reg,
 +			   u16 mmd_val)
  {
 -	unsigned int reg;
 +	struct xgbe_prv_data *pdata = mii->priv;
 +	struct xgbe_hw_if *hw_if = &pdata->hw_if;
 +	int mmd_data = mmd_val;
  
 -	reg = XMDIO_READ(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_PMD_CTRL);
 +	DBGPR_MDIO("-->xgbe_mdio_write: prtad=%#x mmd_reg=%#x mmd_data=%#x\n",
 +		   prtad, mmd_reg, mmd_data);
 +
 +	hw_if->write_mmd_regs(pdata, prtad, mmd_reg, mmd_data);
  
 -	reg &= ~XGBE_KR_TRAINING_ENABLE;
 -	XMDIO_WRITE(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_PMD_CTRL, reg);
 +	DBGPR_MDIO("<--xgbe_mdio_write\n");
 +
 +	return 0;
  }
  
++<<<<<<< HEAD
 +static void xgbe_adjust_link(struct net_device *netdev)
++=======
+ static void xgbe_kr_mode(struct xgbe_prv_data *pdata)
+ {
+ 	/* Enable KR training */
+ 	xgbe_an_enable_kr_training(pdata);
+ 
+ 	/* Set MAC to 10G speed */
+ 	pdata->hw_if.set_speed(pdata, SPEED_10000);
+ 
+ 	/* Call PHY implementation support to complete rate change */
+ 	pdata->phy_if.phy_impl.set_mode(pdata, XGBE_MODE_KR);
+ }
+ 
+ static void xgbe_kx_2500_mode(struct xgbe_prv_data *pdata)
+ {
+ 	/* Disable KR training */
+ 	xgbe_an_disable_kr_training(pdata);
+ 
+ 	/* Set MAC to 2.5G speed */
+ 	pdata->hw_if.set_speed(pdata, SPEED_2500);
+ 
+ 	/* Call PHY implementation support to complete rate change */
+ 	pdata->phy_if.phy_impl.set_mode(pdata, XGBE_MODE_KX_2500);
+ }
+ 
+ static void xgbe_kx_1000_mode(struct xgbe_prv_data *pdata)
+ {
+ 	/* Disable KR training */
+ 	xgbe_an_disable_kr_training(pdata);
+ 
+ 	/* Set MAC to 1G speed */
+ 	pdata->hw_if.set_speed(pdata, SPEED_1000);
+ 
+ 	/* Call PHY implementation support to complete rate change */
+ 	pdata->phy_if.phy_impl.set_mode(pdata, XGBE_MODE_KX_1000);
+ }
+ 
+ static enum xgbe_mode xgbe_cur_mode(struct xgbe_prv_data *pdata)
+ {
+ 	return pdata->phy_if.phy_impl.cur_mode(pdata);
+ }
+ 
+ static bool xgbe_in_kr_mode(struct xgbe_prv_data *pdata)
+ {
+ 	return (xgbe_cur_mode(pdata) == XGBE_MODE_KR);
+ }
+ 
+ static void xgbe_change_mode(struct xgbe_prv_data *pdata,
+ 			     enum xgbe_mode mode)
+ {
+ 	switch (mode) {
+ 	case XGBE_MODE_KX_1000:
+ 		xgbe_kx_1000_mode(pdata);
+ 		break;
+ 	case XGBE_MODE_KX_2500:
+ 		xgbe_kx_2500_mode(pdata);
+ 		break;
+ 	case XGBE_MODE_KR:
+ 		xgbe_kr_mode(pdata);
+ 		break;
+ 	case XGBE_MODE_UNKNOWN:
+ 		break;
+ 	default:
+ 		netif_dbg(pdata, link, pdata->netdev,
+ 			  "invalid operation mode requested (%u)\n", mode);
+ 	}
+ }
+ 
+ static void xgbe_switch_mode(struct xgbe_prv_data *pdata)
+ {
+ 	xgbe_change_mode(pdata, pdata->phy_if.phy_impl.switch_mode(pdata));
+ }
+ 
+ static void xgbe_set_mode(struct xgbe_prv_data *pdata,
+ 			  enum xgbe_mode mode)
+ {
+ 	if (mode == xgbe_cur_mode(pdata))
+ 		return;
+ 
+ 	xgbe_change_mode(pdata, mode);
+ }
+ 
+ static bool xgbe_use_mode(struct xgbe_prv_data *pdata,
+ 			  enum xgbe_mode mode)
+ {
+ 	return pdata->phy_if.phy_impl.use_mode(pdata, mode);
+ }
+ 
+ static void xgbe_set_an(struct xgbe_prv_data *pdata, bool enable, bool restart)
+ {
+ 	unsigned int reg;
+ 
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_CTRL1);
+ 	reg &= ~MDIO_AN_CTRL1_ENABLE;
+ 
+ 	if (enable)
+ 		reg |= MDIO_AN_CTRL1_ENABLE;
+ 
+ 	if (restart)
+ 		reg |= MDIO_AN_CTRL1_RESTART;
+ 
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_CTRL1, reg);
+ }
+ 
+ static void xgbe_restart_an(struct xgbe_prv_data *pdata)
+ {
+ 	xgbe_set_an(pdata, true, true);
+ 
+ 	netif_dbg(pdata, link, pdata->netdev, "AN enabled/restarted\n");
+ }
+ 
+ static void xgbe_disable_an(struct xgbe_prv_data *pdata)
+ {
+ 	xgbe_set_an(pdata, false, false);
+ 
+ 	netif_dbg(pdata, link, pdata->netdev, "AN disabled\n");
+ }
+ 
+ static enum xgbe_an xgbe_an_tx_training(struct xgbe_prv_data *pdata,
+ 					enum xgbe_rx *state)
+ {
+ 	unsigned int ad_reg, lp_reg, reg;
+ 
+ 	*state = XGBE_RX_COMPLETE;
+ 
+ 	/* If we're not in KR mode then we're done */
+ 	if (!xgbe_in_kr_mode(pdata))
+ 		return XGBE_AN_PAGE_RECEIVED;
+ 
+ 	/* Enable/Disable FEC */
+ 	ad_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 2);
+ 	lp_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPA + 2);
+ 
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_FECCTRL);
+ 	reg &= ~(MDIO_PMA_10GBR_FECABLE_ABLE | MDIO_PMA_10GBR_FECABLE_ERRABLE);
+ 	if ((ad_reg & 0xc000) && (lp_reg & 0xc000))
+ 		reg |= pdata->fec_ability;
+ 
+ 	XMDIO_WRITE(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_FECCTRL, reg);
+ 
+ 	/* Start KR training */
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_PMD_CTRL);
+ 	if (reg & XGBE_KR_TRAINING_ENABLE) {
+ 		if (pdata->phy_if.phy_impl.kr_training_pre)
+ 			pdata->phy_if.phy_impl.kr_training_pre(pdata);
+ 
+ 		reg |= XGBE_KR_TRAINING_START;
+ 		XMDIO_WRITE(pdata, MDIO_MMD_PMAPMD, MDIO_PMA_10GBR_PMD_CTRL,
+ 			    reg);
+ 
+ 		if (pdata->phy_if.phy_impl.kr_training_post)
+ 			pdata->phy_if.phy_impl.kr_training_post(pdata);
+ 
+ 		netif_dbg(pdata, link, pdata->netdev,
+ 			  "KR training initiated\n");
+ 	}
+ 
+ 	return XGBE_AN_PAGE_RECEIVED;
+ }
+ 
+ static enum xgbe_an xgbe_an_tx_xnp(struct xgbe_prv_data *pdata,
+ 				   enum xgbe_rx *state)
+ {
+ 	u16 msg;
+ 
+ 	*state = XGBE_RX_XNP;
+ 
+ 	msg = XGBE_XNP_MCF_NULL_MESSAGE;
+ 	msg |= XGBE_XNP_MP_FORMATTED;
+ 
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_XNP + 2, 0);
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_XNP + 1, 0);
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_XNP, msg);
+ 
+ 	return XGBE_AN_PAGE_RECEIVED;
+ }
+ 
+ static enum xgbe_an xgbe_an_rx_bpa(struct xgbe_prv_data *pdata,
+ 				   enum xgbe_rx *state)
+ {
+ 	unsigned int link_support;
+ 	unsigned int reg, ad_reg, lp_reg;
+ 
+ 	/* Read Base Ability register 2 first */
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPA + 1);
+ 
+ 	/* Check for a supported mode, otherwise restart in a different one */
+ 	link_support = xgbe_in_kr_mode(pdata) ? 0x80 : 0x20;
+ 	if (!(reg & link_support))
+ 		return XGBE_AN_INCOMPAT_LINK;
+ 
+ 	/* Check Extended Next Page support */
+ 	ad_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE);
+ 	lp_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPA);
+ 
+ 	return ((ad_reg & XGBE_XNP_NP_EXCHANGE) ||
+ 		(lp_reg & XGBE_XNP_NP_EXCHANGE))
+ 	       ? xgbe_an_tx_xnp(pdata, state)
+ 	       : xgbe_an_tx_training(pdata, state);
+ }
+ 
+ static enum xgbe_an xgbe_an_rx_xnp(struct xgbe_prv_data *pdata,
+ 				   enum xgbe_rx *state)
+ {
+ 	unsigned int ad_reg, lp_reg;
+ 
+ 	/* Check Extended Next Page support */
+ 	ad_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_XNP);
+ 	lp_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPX);
+ 
+ 	return ((ad_reg & XGBE_XNP_NP_EXCHANGE) ||
+ 		(lp_reg & XGBE_XNP_NP_EXCHANGE))
+ 	       ? xgbe_an_tx_xnp(pdata, state)
+ 	       : xgbe_an_tx_training(pdata, state);
+ }
+ 
+ static enum xgbe_an xgbe_an_page_received(struct xgbe_prv_data *pdata)
+ {
+ 	enum xgbe_rx *state;
+ 	unsigned long an_timeout;
+ 	enum xgbe_an ret;
+ 
+ 	if (!pdata->an_start) {
+ 		pdata->an_start = jiffies;
+ 	} else {
+ 		an_timeout = pdata->an_start +
+ 			     msecs_to_jiffies(XGBE_AN_MS_TIMEOUT);
+ 		if (time_after(jiffies, an_timeout)) {
+ 			/* Auto-negotiation timed out, reset state */
+ 			pdata->kr_state = XGBE_RX_BPA;
+ 			pdata->kx_state = XGBE_RX_BPA;
+ 
+ 			pdata->an_start = jiffies;
+ 
+ 			netif_dbg(pdata, link, pdata->netdev,
+ 				  "AN timed out, resetting state\n");
+ 		}
+ 	}
+ 
+ 	state = xgbe_in_kr_mode(pdata) ? &pdata->kr_state
+ 				       : &pdata->kx_state;
+ 
+ 	switch (*state) {
+ 	case XGBE_RX_BPA:
+ 		ret = xgbe_an_rx_bpa(pdata, state);
+ 		break;
+ 
+ 	case XGBE_RX_XNP:
+ 		ret = xgbe_an_rx_xnp(pdata, state);
+ 		break;
+ 
+ 	default:
+ 		ret = XGBE_AN_ERROR;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static enum xgbe_an xgbe_an_incompat_link(struct xgbe_prv_data *pdata)
+ {
+ 	/* Be sure we aren't looping trying to negotiate */
+ 	if (xgbe_in_kr_mode(pdata)) {
+ 		pdata->kr_state = XGBE_RX_ERROR;
+ 
+ 		if (!(pdata->phy.advertising & ADVERTISED_1000baseKX_Full) &&
+ 		    !(pdata->phy.advertising & ADVERTISED_2500baseX_Full))
+ 			return XGBE_AN_NO_LINK;
+ 
+ 		if (pdata->kx_state != XGBE_RX_BPA)
+ 			return XGBE_AN_NO_LINK;
+ 	} else {
+ 		pdata->kx_state = XGBE_RX_ERROR;
+ 
+ 		if (!(pdata->phy.advertising & ADVERTISED_10000baseKR_Full))
+ 			return XGBE_AN_NO_LINK;
+ 
+ 		if (pdata->kr_state != XGBE_RX_BPA)
+ 			return XGBE_AN_NO_LINK;
+ 	}
+ 
+ 	xgbe_disable_an(pdata);
+ 
+ 	xgbe_switch_mode(pdata);
+ 
+ 	xgbe_restart_an(pdata);
+ 
+ 	return XGBE_AN_INCOMPAT_LINK;
+ }
+ 
+ static irqreturn_t xgbe_an_isr(int irq, void *data)
+ {
+ 	struct xgbe_prv_data *pdata = (struct xgbe_prv_data *)data;
+ 
+ 	netif_dbg(pdata, intr, pdata->netdev, "AN interrupt received\n");
+ 
+ 	/* Disable AN interrupts */
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK, 0);
+ 
+ 	/* Save the interrupt(s) that fired */
+ 	pdata->an_int = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_INT);
+ 
+ 	if (pdata->an_int) {
+ 		/* Clear the interrupt(s) that fired and process them */
+ 		XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INT, ~pdata->an_int);
+ 
+ 		queue_work(pdata->an_workqueue, &pdata->an_irq_work);
+ 	} else {
+ 		/* Enable AN interrupts */
+ 		XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK,
+ 			    XGBE_AN_INT_MASK);
+ 	}
+ 
+ 	return IRQ_HANDLED;
+ }
+ 
+ static void xgbe_an_irq_work(struct work_struct *work)
+ {
+ 	struct xgbe_prv_data *pdata = container_of(work,
+ 						   struct xgbe_prv_data,
+ 						   an_irq_work);
+ 
+ 	/* Avoid a race between enabling the IRQ and exiting the work by
+ 	 * waiting for the work to finish and then queueing it
+ 	 */
+ 	flush_work(&pdata->an_work);
+ 	queue_work(pdata->an_workqueue, &pdata->an_work);
+ }
+ 
+ static const char *xgbe_state_as_string(enum xgbe_an state)
+ {
+ 	switch (state) {
+ 	case XGBE_AN_READY:
+ 		return "Ready";
+ 	case XGBE_AN_PAGE_RECEIVED:
+ 		return "Page-Received";
+ 	case XGBE_AN_INCOMPAT_LINK:
+ 		return "Incompatible-Link";
+ 	case XGBE_AN_COMPLETE:
+ 		return "Complete";
+ 	case XGBE_AN_NO_LINK:
+ 		return "No-Link";
+ 	case XGBE_AN_ERROR:
+ 		return "Error";
+ 	default:
+ 		return "Undefined";
+ 	}
+ }
+ 
+ static void xgbe_an_state_machine(struct work_struct *work)
+ {
+ 	struct xgbe_prv_data *pdata = container_of(work,
+ 						   struct xgbe_prv_data,
+ 						   an_work);
+ 	enum xgbe_an cur_state = pdata->an_state;
+ 
+ 	mutex_lock(&pdata->an_mutex);
+ 
+ 	if (!pdata->an_int)
+ 		goto out;
+ 
+ next_int:
+ 	if (pdata->an_int & XGBE_AN_PG_RCV) {
+ 		pdata->an_state = XGBE_AN_PAGE_RECEIVED;
+ 		pdata->an_int &= ~XGBE_AN_PG_RCV;
+ 	} else if (pdata->an_int & XGBE_AN_INC_LINK) {
+ 		pdata->an_state = XGBE_AN_INCOMPAT_LINK;
+ 		pdata->an_int &= ~XGBE_AN_INC_LINK;
+ 	} else if (pdata->an_int & XGBE_AN_INT_CMPLT) {
+ 		pdata->an_state = XGBE_AN_COMPLETE;
+ 		pdata->an_int &= ~XGBE_AN_INT_CMPLT;
+ 	} else {
+ 		pdata->an_state = XGBE_AN_ERROR;
+ 	}
+ 
+ 	pdata->an_result = pdata->an_state;
+ 
+ again:
+ 	netif_dbg(pdata, link, pdata->netdev, "AN %s\n",
+ 		  xgbe_state_as_string(pdata->an_state));
+ 
+ 	cur_state = pdata->an_state;
+ 
+ 	switch (pdata->an_state) {
+ 	case XGBE_AN_READY:
+ 		pdata->an_supported = 0;
+ 		break;
+ 
+ 	case XGBE_AN_PAGE_RECEIVED:
+ 		pdata->an_state = xgbe_an_page_received(pdata);
+ 		pdata->an_supported++;
+ 		break;
+ 
+ 	case XGBE_AN_INCOMPAT_LINK:
+ 		pdata->an_supported = 0;
+ 		pdata->parallel_detect = 0;
+ 		pdata->an_state = xgbe_an_incompat_link(pdata);
+ 		break;
+ 
+ 	case XGBE_AN_COMPLETE:
+ 		pdata->parallel_detect = pdata->an_supported ? 0 : 1;
+ 		netif_dbg(pdata, link, pdata->netdev, "%s successful\n",
+ 			  pdata->an_supported ? "Auto negotiation"
+ 					      : "Parallel detection");
+ 		break;
+ 
+ 	case XGBE_AN_NO_LINK:
+ 		break;
+ 
+ 	default:
+ 		pdata->an_state = XGBE_AN_ERROR;
+ 	}
+ 
+ 	if (pdata->an_state == XGBE_AN_NO_LINK) {
+ 		pdata->an_int = 0;
+ 		XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INT, 0);
+ 	} else if (pdata->an_state == XGBE_AN_ERROR) {
+ 		netdev_err(pdata->netdev,
+ 			   "error during auto-negotiation, state=%u\n",
+ 			   cur_state);
+ 
+ 		pdata->an_int = 0;
+ 		XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INT, 0);
+ 	}
+ 
+ 	if (pdata->an_state >= XGBE_AN_COMPLETE) {
+ 		pdata->an_result = pdata->an_state;
+ 		pdata->an_state = XGBE_AN_READY;
+ 		pdata->kr_state = XGBE_RX_BPA;
+ 		pdata->kx_state = XGBE_RX_BPA;
+ 		pdata->an_start = 0;
+ 
+ 		netif_dbg(pdata, link, pdata->netdev, "AN result: %s\n",
+ 			  xgbe_state_as_string(pdata->an_result));
+ 	}
+ 
+ 	if (cur_state != pdata->an_state)
+ 		goto again;
+ 
+ 	if (pdata->an_int)
+ 		goto next_int;
+ 
+ out:
+ 	/* Enable AN interrupts on the way out */
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK, XGBE_AN_INT_MASK);
+ 
+ 	mutex_unlock(&pdata->an_mutex);
+ }
+ 
+ static void xgbe_an_init(struct xgbe_prv_data *pdata)
+ {
+ 	unsigned int reg;
+ 
+ 	/* Set up Advertisement register 3 first */
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 2);
+ 	if (pdata->phy.advertising & ADVERTISED_10000baseR_FEC)
+ 		reg |= 0xc000;
+ 	else
+ 		reg &= ~0xc000;
+ 
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 2, reg);
+ 
+ 	/* Set up Advertisement register 2 next */
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 1);
+ 	if (pdata->phy.advertising & ADVERTISED_10000baseKR_Full)
+ 		reg |= 0x80;
+ 	else
+ 		reg &= ~0x80;
+ 
+ 	if ((pdata->phy.advertising & ADVERTISED_1000baseKX_Full) ||
+ 	    (pdata->phy.advertising & ADVERTISED_2500baseX_Full))
+ 		reg |= 0x20;
+ 	else
+ 		reg &= ~0x20;
+ 
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 1, reg);
+ 
+ 	/* Set up Advertisement register 1 last */
+ 	reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE);
+ 	if (pdata->phy.advertising & ADVERTISED_Pause)
+ 		reg |= 0x400;
+ 	else
+ 		reg &= ~0x400;
+ 
+ 	if (pdata->phy.advertising & ADVERTISED_Asym_Pause)
+ 		reg |= 0x800;
+ 	else
+ 		reg &= ~0x800;
+ 
+ 	/* We don't intend to perform XNP */
+ 	reg &= ~XGBE_XNP_NP_EXCHANGE;
+ 
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE, reg);
+ 
+ 	netif_dbg(pdata, link, pdata->netdev, "AN initialized\n");
+ }
+ 
+ static const char *xgbe_phy_fc_string(struct xgbe_prv_data *pdata)
+ {
+ 	if (pdata->tx_pause && pdata->rx_pause)
+ 		return "rx/tx";
+ 	else if (pdata->rx_pause)
+ 		return "rx";
+ 	else if (pdata->tx_pause)
+ 		return "tx";
+ 	else
+ 		return "off";
+ }
+ 
+ static const char *xgbe_phy_speed_string(int speed)
+ {
+ 	switch (speed) {
+ 	case SPEED_1000:
+ 		return "1Gbps";
+ 	case SPEED_2500:
+ 		return "2.5Gbps";
+ 	case SPEED_10000:
+ 		return "10Gbps";
+ 	case SPEED_UNKNOWN:
+ 		return "Unknown";
+ 	default:
+ 		return "Unsupported";
+ 	}
+ }
+ 
+ static void xgbe_phy_print_status(struct xgbe_prv_data *pdata)
+ {
+ 	if (pdata->phy.link)
+ 		netdev_info(pdata->netdev,
+ 			    "Link is Up - %s/%s - flow control %s\n",
+ 			    xgbe_phy_speed_string(pdata->phy.speed),
+ 			    pdata->phy.duplex == DUPLEX_FULL ? "Full" : "Half",
+ 			    xgbe_phy_fc_string(pdata));
+ 	else
+ 		netdev_info(pdata->netdev, "Link is Down\n");
+ }
+ 
+ static void xgbe_phy_adjust_link(struct xgbe_prv_data *pdata)
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  {
 +	struct xgbe_prv_data *pdata = netdev_priv(netdev);
 +	struct xgbe_hw_if *hw_if = &pdata->hw_if;
 +	struct phy_device *phydev = pdata->phydev;
  	int new_state = 0;
  
 -	if (pdata->phy.link) {
 +	if (phydev == NULL)
 +		return;
 +
 +	DBGPR_MDIO("-->xgbe_adjust_link: address=%d, newlink=%d, curlink=%d\n",
 +		   phydev->addr, phydev->link, pdata->phy_link);
 +
 +	if (phydev->link) {
  		/* Flow control support */
 -		pdata->pause_autoneg = pdata->phy.pause_autoneg;
 +		if (pdata->pause_autoneg) {
 +			if (phydev->pause || phydev->asym_pause) {
 +				pdata->tx_pause = 1;
 +				pdata->rx_pause = 1;
 +			} else {
 +				pdata->tx_pause = 0;
 +				pdata->rx_pause = 0;
 +			}
 +		}
  
 -		if (pdata->tx_pause != pdata->phy.tx_pause) {
 -			new_state = 1;
 -			pdata->hw_if.config_tx_flow_control(pdata);
 -			pdata->tx_pause = pdata->phy.tx_pause;
 +		if (pdata->tx_pause != pdata->phy_tx_pause) {
 +			hw_if->config_tx_flow_control(pdata);
 +			pdata->phy_tx_pause = pdata->tx_pause;
  		}
  
 -		if (pdata->rx_pause != pdata->phy.rx_pause) {
 -			new_state = 1;
 -			pdata->hw_if.config_rx_flow_control(pdata);
 -			pdata->rx_pause = pdata->phy.rx_pause;
 +		if (pdata->rx_pause != pdata->phy_rx_pause) {
 +			hw_if->config_rx_flow_control(pdata);
 +			pdata->phy_rx_pause = pdata->rx_pause;
  		}
  
  		/* Speed support */
@@@ -223,206 -716,427 +762,588 @@@
  		pdata->phy_speed = SPEED_UNKNOWN;
  	}
  
 -	if (new_state && netif_msg_link(pdata))
 -		xgbe_phy_print_status(pdata);
 +	if (new_state)
 +		phy_print_status(phydev);
 +
 +	DBGPR_MDIO("<--xgbe_adjust_link\n");
  }
  
++<<<<<<< HEAD
 +void xgbe_dump_phy_registers(struct xgbe_prv_data *pdata)
++=======
+ static bool xgbe_phy_valid_speed(struct xgbe_prv_data *pdata, int speed)
+ {
+ 	return pdata->phy_if.phy_impl.valid_speed(pdata, speed);
+ }
+ 
+ static int xgbe_phy_config_fixed(struct xgbe_prv_data *pdata)
+ {
+ 	enum xgbe_mode mode;
+ 
+ 	netif_dbg(pdata, link, pdata->netdev, "fixed PHY configuration\n");
+ 
+ 	/* Disable auto-negotiation */
+ 	xgbe_disable_an(pdata);
+ 
+ 	/* Set specified mode for specified speed */
+ 	mode = pdata->phy_if.phy_impl.get_mode(pdata, pdata->phy.speed);
+ 	switch (mode) {
+ 	case XGBE_MODE_KX_1000:
+ 	case XGBE_MODE_KX_2500:
+ 	case XGBE_MODE_KR:
+ 		break;
+ 	case XGBE_MODE_UNKNOWN:
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* Validate duplex mode */
+ 	if (pdata->phy.duplex != DUPLEX_FULL)
+ 		return -EINVAL;
+ 
+ 	xgbe_set_mode(pdata, mode);
+ 
+ 	return 0;
+ }
+ 
+ static int __xgbe_phy_config_aneg(struct xgbe_prv_data *pdata)
+ {
+ 	set_bit(XGBE_LINK_INIT, &pdata->dev_state);
+ 	pdata->link_check = jiffies;
+ 
+ 	if (pdata->phy.autoneg != AUTONEG_ENABLE)
+ 		return xgbe_phy_config_fixed(pdata);
+ 
+ 	netif_dbg(pdata, link, pdata->netdev, "AN PHY configuration\n");
+ 
+ 	/* Disable auto-negotiation interrupt */
+ 	disable_irq(pdata->an_irq);
+ 
+ 	/* Start auto-negotiation in a supported mode */
+ 	if (xgbe_use_mode(pdata, XGBE_MODE_KR)) {
+ 		xgbe_set_mode(pdata, XGBE_MODE_KR);
+ 	} else if (xgbe_use_mode(pdata, XGBE_MODE_KX_2500)) {
+ 		xgbe_set_mode(pdata, XGBE_MODE_KX_2500);
+ 	} else if (xgbe_use_mode(pdata, XGBE_MODE_KX_1000)) {
+ 		xgbe_set_mode(pdata, XGBE_MODE_KX_1000);
+ 	} else {
+ 		enable_irq(pdata->an_irq);
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* Disable and stop any in progress auto-negotiation */
+ 	xgbe_disable_an(pdata);
+ 
+ 	/* Clear any auto-negotitation interrupts */
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INT, 0);
+ 
+ 	pdata->an_result = XGBE_AN_READY;
+ 	pdata->an_state = XGBE_AN_READY;
+ 	pdata->kr_state = XGBE_RX_BPA;
+ 	pdata->kx_state = XGBE_RX_BPA;
+ 
+ 	/* Re-enable auto-negotiation interrupt */
+ 	enable_irq(pdata->an_irq);
+ 
+ 	/* Set up advertisement registers based on current settings */
+ 	xgbe_an_init(pdata);
+ 
+ 	/* Enable and start auto-negotiation */
+ 	xgbe_restart_an(pdata);
+ 
+ 	return 0;
+ }
+ 
+ static int xgbe_phy_config_aneg(struct xgbe_prv_data *pdata)
+ {
+ 	int ret;
+ 
+ 	mutex_lock(&pdata->an_mutex);
+ 
+ 	ret = __xgbe_phy_config_aneg(pdata);
+ 	if (ret)
+ 		set_bit(XGBE_LINK_ERR, &pdata->dev_state);
+ 	else
+ 		clear_bit(XGBE_LINK_ERR, &pdata->dev_state);
+ 
+ 	mutex_unlock(&pdata->an_mutex);
+ 
+ 	return ret;
+ }
+ 
+ static bool xgbe_phy_aneg_done(struct xgbe_prv_data *pdata)
+ {
+ 	return (pdata->an_result == XGBE_AN_COMPLETE);
+ }
+ 
+ static void xgbe_check_link_timeout(struct xgbe_prv_data *pdata)
+ {
+ 	unsigned long link_timeout;
+ 
+ 	link_timeout = pdata->link_check + (XGBE_LINK_TIMEOUT * HZ);
+ 	if (time_after(jiffies, link_timeout)) {
+ 		netif_dbg(pdata, link, pdata->netdev, "AN link timeout\n");
+ 		xgbe_phy_config_aneg(pdata);
+ 	}
+ }
+ 
+ static enum xgbe_mode xgbe_phy_status_aneg(struct xgbe_prv_data *pdata)
+ {
+ 	return pdata->phy_if.phy_impl.an_outcome(pdata);
+ }
+ 
+ static void xgbe_phy_status_result(struct xgbe_prv_data *pdata)
+ {
+ 	enum xgbe_mode mode;
+ 
+ 	pdata->phy.lp_advertising = 0;
+ 
+ 	if ((pdata->phy.autoneg != AUTONEG_ENABLE) || pdata->parallel_detect)
+ 		mode = xgbe_cur_mode(pdata);
+ 	else
+ 		mode = xgbe_phy_status_aneg(pdata);
+ 
+ 	switch (mode) {
+ 	case XGBE_MODE_KX_1000:
+ 		pdata->phy.speed = SPEED_1000;
+ 		break;
+ 	case XGBE_MODE_KX_2500:
+ 		pdata->phy.speed = SPEED_2500;
+ 		break;
+ 	case XGBE_MODE_KR:
+ 		pdata->phy.speed = SPEED_10000;
+ 		break;
+ 	case XGBE_MODE_UNKNOWN:
+ 	default:
+ 		pdata->phy.speed = SPEED_UNKNOWN;
+ 	}
+ 
+ 	pdata->phy.duplex = DUPLEX_FULL;
+ 
+ 	xgbe_set_mode(pdata, mode);
+ }
+ 
+ static void xgbe_phy_status(struct xgbe_prv_data *pdata)
+ {
+ 	unsigned int link_aneg;
+ 
+ 	if (test_bit(XGBE_LINK_ERR, &pdata->dev_state)) {
+ 		netif_carrier_off(pdata->netdev);
+ 
+ 		pdata->phy.link = 0;
+ 		goto adjust_link;
+ 	}
+ 
+ 	link_aneg = (pdata->phy.autoneg == AUTONEG_ENABLE);
+ 
+ 	pdata->phy.link = pdata->phy_if.phy_impl.link_status(pdata);
+ 	if (pdata->phy.link) {
+ 		if (link_aneg && !xgbe_phy_aneg_done(pdata)) {
+ 			xgbe_check_link_timeout(pdata);
+ 			return;
+ 		}
+ 
+ 		xgbe_phy_status_result(pdata);
+ 
+ 		if (test_bit(XGBE_LINK_INIT, &pdata->dev_state))
+ 			clear_bit(XGBE_LINK_INIT, &pdata->dev_state);
+ 
+ 		netif_carrier_on(pdata->netdev);
+ 	} else {
+ 		if (test_bit(XGBE_LINK_INIT, &pdata->dev_state)) {
+ 			xgbe_check_link_timeout(pdata);
+ 
+ 			if (link_aneg)
+ 				return;
+ 		}
+ 
+ 		xgbe_phy_status_result(pdata);
+ 
+ 		netif_carrier_off(pdata->netdev);
+ 	}
+ 
+ adjust_link:
+ 	xgbe_phy_adjust_link(pdata);
+ }
+ 
+ static void xgbe_phy_stop(struct xgbe_prv_data *pdata)
+ {
+ 	netif_dbg(pdata, link, pdata->netdev, "stopping PHY\n");
+ 
+ 	if (!pdata->phy_started)
+ 		return;
+ 
+ 	/* Indicate the PHY is down */
+ 	pdata->phy_started = 0;
+ 
+ 	/* Disable auto-negotiation */
+ 	xgbe_disable_an(pdata);
+ 
+ 	/* Disable auto-negotiation interrupts */
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK, 0);
+ 
+ 	devm_free_irq(pdata->dev, pdata->an_irq, pdata);
+ 
+ 	pdata->phy_if.phy_impl.stop(pdata);
+ 
+ 	pdata->phy.link = 0;
+ 	netif_carrier_off(pdata->netdev);
+ 
+ 	xgbe_phy_adjust_link(pdata);
+ }
+ 
+ static int xgbe_phy_start(struct xgbe_prv_data *pdata)
+ {
+ 	struct net_device *netdev = pdata->netdev;
+ 	int ret;
+ 
+ 	netif_dbg(pdata, link, pdata->netdev, "starting PHY\n");
+ 
+ 	ret = pdata->phy_if.phy_impl.start(pdata);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = devm_request_irq(pdata->dev, pdata->an_irq,
+ 			       xgbe_an_isr, 0, pdata->an_name,
+ 			       pdata);
+ 	if (ret) {
+ 		netdev_err(netdev, "phy irq request failed\n");
+ 		goto err_stop;
+ 	}
+ 
+ 	/* Set initial mode - call the mode setting routines
+ 	 * directly to insure we are properly configured
+ 	 */
+ 	if (xgbe_use_mode(pdata, XGBE_MODE_KR)) {
+ 		xgbe_kr_mode(pdata);
+ 	} else if (xgbe_use_mode(pdata, XGBE_MODE_KX_2500)) {
+ 		xgbe_kx_2500_mode(pdata);
+ 	} else if (xgbe_use_mode(pdata, XGBE_MODE_KX_1000)) {
+ 		xgbe_kx_1000_mode(pdata);
+ 	} else {
+ 		ret = -EINVAL;
+ 		goto err_irq;
+ 	}
+ 
+ 	/* Indicate the PHY is up and running */
+ 	pdata->phy_started = 1;
+ 
+ 	/* Set up advertisement registers based on current settings */
+ 	xgbe_an_init(pdata);
+ 
+ 	/* Enable auto-negotiation interrupts */
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK, 0x07);
+ 
+ 	return xgbe_phy_config_aneg(pdata);
+ 
+ err_irq:
+ 	devm_free_irq(pdata->dev, pdata->an_irq, pdata);
+ 
+ err_stop:
+ 	pdata->phy_if.phy_impl.stop(pdata);
+ 
+ 	return ret;
+ }
+ 
+ static int xgbe_phy_reset(struct xgbe_prv_data *pdata)
+ {
+ 	int ret;
+ 
+ 	ret = pdata->phy_if.phy_impl.reset(pdata);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* Disable auto-negotiation for now */
+ 	xgbe_disable_an(pdata);
+ 
+ 	/* Clear auto-negotiation interrupts */
+ 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INT, 0);
+ 
+ 	return 0;
+ }
+ 
+ static void xgbe_dump_phy_registers(struct xgbe_prv_data *pdata)
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  {
  	struct device *dev = pdata->dev;
 -
 -	dev_dbg(dev, "\n************* PHY Reg dump **********************\n");
 -
 -	dev_dbg(dev, "PCS Control Reg (%#06x) = %#06x\n", MDIO_CTRL1,
 -		XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1));
 -	dev_dbg(dev, "PCS Status Reg (%#06x) = %#06x\n", MDIO_STAT1,
 -		XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_STAT1));
 -	dev_dbg(dev, "Phy Id (PHYS ID 1 %#06x)= %#06x\n", MDIO_DEVID1,
 -		XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVID1));
 -	dev_dbg(dev, "Phy Id (PHYS ID 2 %#06x)= %#06x\n", MDIO_DEVID2,
 -		XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVID2));
 -	dev_dbg(dev, "Devices in Package (%#06x)= %#06x\n", MDIO_DEVS1,
 -		XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVS1));
 -	dev_dbg(dev, "Devices in Package (%#06x)= %#06x\n", MDIO_DEVS2,
 -		XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVS2));
 -
 -	dev_dbg(dev, "Auto-Neg Control Reg (%#06x) = %#06x\n", MDIO_CTRL1,
 -		XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_CTRL1));
 -	dev_dbg(dev, "Auto-Neg Status Reg (%#06x) = %#06x\n", MDIO_STAT1,
 -		XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_STAT1));
 -	dev_dbg(dev, "Auto-Neg Ad Reg 1 (%#06x) = %#06x\n",
 -		MDIO_AN_ADVERTISE,
 -		XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE));
 -	dev_dbg(dev, "Auto-Neg Ad Reg 2 (%#06x) = %#06x\n",
 -		MDIO_AN_ADVERTISE + 1,
 -		XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 1));
 -	dev_dbg(dev, "Auto-Neg Ad Reg 3 (%#06x) = %#06x\n",
 -		MDIO_AN_ADVERTISE + 2,
 -		XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 2));
 -	dev_dbg(dev, "Auto-Neg Completion Reg (%#06x) = %#06x\n",
 -		MDIO_AN_COMP_STAT,
 -		XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_COMP_STAT));
 -
 -	dev_dbg(dev, "\n*************************************************\n");
 +	struct phy_device *phydev = pdata->mii->phy_map[XGBE_PRTAD];
 +	int i;
 +
 +	dev_alert(dev, "\n************* PHY Reg dump **********************\n");
 +
 +	dev_alert(dev, "PCS Control Reg (%#04x) = %#04x\n", MDIO_CTRL1,
 +		  XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1));
 +	dev_alert(dev, "PCS Status Reg (%#04x) = %#04x\n", MDIO_STAT1,
 +		  XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_STAT1));
 +	dev_alert(dev, "Phy Id (PHYS ID 1 %#04x)= %#04x\n", MDIO_DEVID1,
 +		  XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVID1));
 +	dev_alert(dev, "Phy Id (PHYS ID 2 %#04x)= %#04x\n", MDIO_DEVID2,
 +		  XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVID2));
 +	dev_alert(dev, "Devices in Package (%#04x)= %#04x\n", MDIO_DEVS1,
 +		  XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVS1));
 +	dev_alert(dev, "Devices in Package (%#04x)= %#04x\n", MDIO_DEVS2,
 +		  XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_DEVS2));
 +
 +	dev_alert(dev, "Auto-Neg Control Reg (%#04x) = %#04x\n", MDIO_CTRL1,
 +		  XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_CTRL1));
 +	dev_alert(dev, "Auto-Neg Status Reg (%#04x) = %#04x\n", MDIO_STAT1,
 +		  XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_STAT1));
 +	dev_alert(dev, "Auto-Neg Ad Reg 1 (%#04x) = %#04x\n",
 +		  MDIO_AN_ADVERTISE,
 +		  XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE));
 +	dev_alert(dev, "Auto-Neg Ad Reg 2 (%#04x) = %#04x\n",
 +		  MDIO_AN_ADVERTISE + 1,
 +		  XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 1));
 +	dev_alert(dev, "Auto-Neg Ad Reg 3 (%#04x) = %#04x\n",
 +		  MDIO_AN_ADVERTISE + 2,
 +		  XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 2));
 +	dev_alert(dev, "Auto-Neg Completion Reg (%#04x) = %#04x\n",
 +		  MDIO_AN_COMP_STAT,
 +		  XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_COMP_STAT));
 +
 +	dev_alert(dev, "MMD Device Mask = %#x\n",
 +		  phydev->c45_ids.devices_in_package);
 +	for (i = 0; i < ARRAY_SIZE(phydev->c45_ids.device_ids); i++)
 +		dev_alert(dev, "  MMD %d: ID = %#08x\n", i,
 +			  phydev->c45_ids.device_ids[i]);
 +
 +	dev_alert(dev, "\n*************************************************\n");
  }
  
++<<<<<<< HEAD
 +int xgbe_mdio_register(struct xgbe_prv_data *pdata)
 +{
 +	struct net_device *netdev = pdata->netdev;
 +	struct device_node *phy_node;
 +	struct mii_bus *mii;
 +	struct phy_device *phydev;
 +	int ret = 0;
 +
 +	DBGPR("-->xgbe_mdio_register\n");
 +
 +	/* Retrieve the phy-handle */
 +	phy_node = of_parse_phandle(pdata->dev->of_node, "phy-handle", 0);
 +	if (!phy_node) {
 +		dev_err(pdata->dev, "unable to parse phy-handle\n");
 +		return -EINVAL;
 +	}
 +
 +	/* Register with the MDIO bus */
 +	mii = mdiobus_alloc();
 +	if (mii == NULL) {
 +		dev_err(pdata->dev, "mdiobus_alloc failed\n");
 +		ret = -ENOMEM;
 +		goto err_node_get;
 +	}
 +
 +	/* Register on the MDIO bus (don't probe any PHYs) */
 +	mii->name = XGBE_PHY_NAME;
 +	mii->read = xgbe_mdio_read;
 +	mii->write = xgbe_mdio_write;
 +	snprintf(mii->id, sizeof(mii->id), "%s", pdata->mii_bus_id);
 +	mii->priv = pdata;
 +	mii->phy_mask = ~0;
 +	mii->parent = pdata->dev;
 +	ret = mdiobus_register(mii);
 +	if (ret) {
 +		dev_err(pdata->dev, "mdiobus_register failed\n");
 +		goto err_mdiobus_alloc;
 +	}
 +	DBGPR("  mdiobus_register succeeded for %s\n", pdata->mii_bus_id);
 +
 +	/* Probe the PCS using Clause 45 */
 +	phydev = get_phy_device(mii, XGBE_PRTAD, true);
 +	if (IS_ERR(phydev) || !phydev ||
 +	    !phydev->c45_ids.device_ids[MDIO_MMD_PCS]) {
 +		dev_err(pdata->dev, "get_phy_device failed\n");
 +		ret = phydev ? PTR_ERR(phydev) : -ENOLINK;
 +		goto err_mdiobus_register;
 +	}
 +	request_module(MDIO_MODULE_PREFIX MDIO_ID_FMT,
 +		       MDIO_ID_ARGS(phydev->c45_ids.device_ids[MDIO_MMD_PCS]));
 +
 +	of_node_get(phy_node);
 +	phydev->dev.of_node = phy_node;
 +	ret = phy_device_register(phydev);
 +	if (ret) {
 +		dev_err(pdata->dev, "phy_device_register failed\n");
 +		of_node_put(phy_node);
 +		goto err_phy_device;
 +	}
 +	if (!phydev->dev.driver) {
 +		dev_err(pdata->dev, "phy driver probe failed\n");
 +		ret = -EIO;
 +		goto err_phy_device;
 +	}
 +
 +	/* Add a reference to the PHY driver so it can't be unloaded */
 +	pdata->phy_module = phydev->dev.driver->owner;
 +	if (!try_module_get(pdata->phy_module)) {
 +		dev_err(pdata->dev, "try_module_get failed\n");
 +		ret = -EIO;
 +		goto err_phy_device;
 +	}
 +
 +	pdata->mii = mii;
 +	pdata->mdio_mmd = MDIO_MMD_PCS;
 +
 +	pdata->phy_link = -1;
 +	pdata->phy_speed = SPEED_UNKNOWN;
 +	pdata->phy_tx_pause = pdata->tx_pause;
 +	pdata->phy_rx_pause = pdata->rx_pause;
 +
 +	ret = phy_connect_direct(netdev, phydev, &xgbe_adjust_link,
 +				 pdata->phy_mode);
 +	if (ret) {
 +		netdev_err(netdev, "phy_connect_direct failed\n");
 +		goto err_phy_device;
 +	}
 +
 +	if (!phydev->drv || (phydev->drv->phy_id == 0)) {
 +		netdev_err(netdev, "phy_id not valid\n");
 +		ret = -ENODEV;
 +		goto err_phy_connect;
 +	}
 +	DBGPR("  phy_connect_direct succeeded for PHY %s, link=%d\n",
 +	      dev_name(&phydev->dev), phydev->link);
 +
 +	phydev->autoneg = pdata->default_autoneg;
 +	if (phydev->autoneg == AUTONEG_DISABLE) {
 +		phydev->speed = pdata->default_speed;
 +		phydev->duplex = DUPLEX_FULL;
 +
 +		phydev->advertising &= ~ADVERTISED_Autoneg;
++=======
+ static int xgbe_phy_best_advertised_speed(struct xgbe_prv_data *pdata)
+ {
+ 	if (pdata->phy.advertising & ADVERTISED_10000baseKR_Full)
+ 		return SPEED_10000;
+ 	else if (pdata->phy.advertising & ADVERTISED_2500baseX_Full)
+ 		return SPEED_2500;
+ 	else if (pdata->phy.advertising & ADVERTISED_1000baseKX_Full)
+ 		return SPEED_1000;
+ 
+ 	return SPEED_UNKNOWN;
+ }
+ 
+ static void xgbe_phy_exit(struct xgbe_prv_data *pdata)
+ {
+ 	xgbe_phy_stop(pdata);
+ 
+ 	pdata->phy_if.phy_impl.exit(pdata);
+ }
+ 
+ static int xgbe_phy_init(struct xgbe_prv_data *pdata)
+ {
+ 	int ret;
+ 
+ 	mutex_init(&pdata->an_mutex);
+ 	INIT_WORK(&pdata->an_irq_work, xgbe_an_irq_work);
+ 	INIT_WORK(&pdata->an_work, xgbe_an_state_machine);
+ 	pdata->mdio_mmd = MDIO_MMD_PCS;
+ 
+ 	/* Check for FEC support */
+ 	pdata->fec_ability = XMDIO_READ(pdata, MDIO_MMD_PMAPMD,
+ 					MDIO_PMA_10GBR_FECABLE);
+ 	pdata->fec_ability &= (MDIO_PMA_10GBR_FECABLE_ABLE |
+ 			       MDIO_PMA_10GBR_FECABLE_ERRABLE);
+ 
+ 	/* Setup the phy (including supported features) */
+ 	ret = pdata->phy_if.phy_impl.init(pdata);
+ 	if (ret)
+ 		return ret;
+ 	pdata->phy.advertising = pdata->phy.supported;
+ 
+ 	pdata->phy.address = 0;
+ 
+ 	if (pdata->phy.advertising & ADVERTISED_Autoneg) {
+ 		pdata->phy.autoneg = AUTONEG_ENABLE;
+ 		pdata->phy.speed = SPEED_UNKNOWN;
+ 		pdata->phy.duplex = DUPLEX_UNKNOWN;
+ 	} else {
+ 		pdata->phy.autoneg = AUTONEG_DISABLE;
+ 		pdata->phy.speed = xgbe_phy_best_advertised_speed(pdata);
+ 		pdata->phy.duplex = DUPLEX_FULL;
+ 	}
+ 
+ 	pdata->phy.link = 0;
+ 
+ 	pdata->phy.pause_autoneg = pdata->pause_autoneg;
+ 	pdata->phy.tx_pause = pdata->tx_pause;
+ 	pdata->phy.rx_pause = pdata->rx_pause;
+ 
+ 	/* Fix up Flow Control advertising */
+ 	pdata->phy.advertising &= ~ADVERTISED_Pause;
+ 	pdata->phy.advertising &= ~ADVERTISED_Asym_Pause;
+ 
+ 	if (pdata->rx_pause) {
+ 		pdata->phy.advertising |= ADVERTISED_Pause;
+ 		pdata->phy.advertising |= ADVERTISED_Asym_Pause;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  	}
  
 -	if (pdata->tx_pause)
 -		pdata->phy.advertising ^= ADVERTISED_Asym_Pause;
 +	pdata->phydev = phydev;
 +
++<<<<<<< HEAD
 +	of_node_put(phy_node);
 +
 +	DBGPHY_REGS(pdata);
 +
 +	DBGPR("<--xgbe_mdio_register\n");
 +
 +	return 0;
 +
 +err_phy_connect:
 +	phy_disconnect(phydev);
  
 +err_phy_device:
 +	phy_device_free(phydev);
 +
 +err_mdiobus_register:
 +	mdiobus_unregister(mii);
 +
 +err_mdiobus_alloc:
 +	mdiobus_free(mii);
 +
 +err_node_get:
 +	of_node_put(phy_node);
 +
 +	return ret;
++=======
+ 	if (netif_msg_drv(pdata))
+ 		xgbe_dump_phy_registers(pdata);
+ 
+ 	return 0;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  }
  
 -void xgbe_init_function_ptrs_phy(struct xgbe_phy_if *phy_if)
 +void xgbe_mdio_unregister(struct xgbe_prv_data *pdata)
  {
++<<<<<<< HEAD
 +	DBGPR("-->xgbe_mdio_unregister\n");
++=======
+ 	phy_if->phy_init        = xgbe_phy_init;
+ 	phy_if->phy_exit        = xgbe_phy_exit;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
 +
 +	phy_disconnect(pdata->phydev);
 +	pdata->phydev = NULL;
 +
++<<<<<<< HEAD
 +	module_put(pdata->phy_module);
 +	pdata->phy_module = NULL;
 +
 +	mdiobus_unregister(pdata->mii);
 +	pdata->mii->priv = NULL;
  
 -	phy_if->phy_reset       = xgbe_phy_reset;
 -	phy_if->phy_start       = xgbe_phy_start;
 -	phy_if->phy_stop        = xgbe_phy_stop;
 +	mdiobus_free(pdata->mii);
 +	pdata->mii = NULL;
  
 +	DBGPR("<--xgbe_mdio_unregister\n");
++=======
+ 	phy_if->phy_status      = xgbe_phy_status;
+ 	phy_if->phy_config_aneg = xgbe_phy_config_aneg;
+ 
+ 	phy_if->phy_valid_speed = xgbe_phy_valid_speed;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  }
diff --cc drivers/net/ethernet/amd/xgbe/xgbe.h
index 1903f878545a,0d33aef36b71..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe.h
@@@ -121,10 -121,15 +121,14 @@@
  #include <linux/netdevice.h>
  #include <linux/workqueue.h>
  #include <linux/phy.h>
 -#include <linux/if_vlan.h>
 -#include <linux/bitops.h>
 -#include <linux/ptp_clock_kernel.h>
 -#include <linux/timecounter.h>
 -#include <linux/net_tstamp.h>
 -#include <net/dcbnl.h>
 +
  
  #define XGBE_DRV_NAME		"amd-xgbe"
++<<<<<<< HEAD
 +#define XGBE_DRV_VERSION	"1.0.0-a"
++=======
+ #define XGBE_DRV_VERSION	"1.0.3"
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  #define XGBE_DRV_DESC		"AMD 10 Gigabit Ethernet Driver"
  
  /* Descriptor related defines */
@@@ -157,10 -178,33 +161,38 @@@
  #define XGMAC_MAX_STD_PACKET	1518
  #define XGMAC_JUMBO_PACKET_MTU	9000
  #define XGMAC_MAX_JUMBO_PACKET	9018
 -#define XGMAC_ETH_PREAMBLE	(12 + 8)	/* Inter-frame gap + preamble */
  
++<<<<<<< HEAD
 +/* MDIO bus phy name */
 +#define XGBE_PHY_NAME		"amd_xgbe_phy"
 +#define XGBE_PRTAD		0
++=======
+ #define XGMAC_PFC_DATA_LEN	46
+ #define XGMAC_PFC_DELAYS	14000
+ 
+ #define XGMAC_PRIO_QUEUES(_cnt)					\
+ 	min_t(unsigned int, IEEE_8021QAZ_MAX_TCS, (_cnt))
+ 
+ /* Common property names */
+ #define XGBE_MAC_ADDR_PROPERTY	"mac-address"
+ #define XGBE_PHY_MODE_PROPERTY	"phy-mode"
+ #define XGBE_DMA_IRQS_PROPERTY	"amd,per-channel-interrupt"
+ #define XGBE_SPEEDSET_PROPERTY	"amd,speed-set"
+ 
+ /* Device-tree clock names */
+ #define XGBE_DMA_CLOCK		"dma_clk"
+ #define XGBE_PTP_CLOCK		"ptp_clk"
+ 
+ /* ACPI property names */
+ #define XGBE_ACPI_DMA_FREQ	"amd,dma-freq"
+ #define XGBE_ACPI_PTP_FREQ	"amd,ptp-freq"
+ 
+ /* Timestamp support - values based on 50MHz PTP clock
+  *   50MHz => 20 nsec
+  */
+ #define XGBE_TSTAMP_SSINC	20
+ #define XGBE_TSTAMP_SNSINC	0
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  
  /* Driver PMT macros */
  #define XGMAC_DRIVER_CONTEXT	1
@@@ -194,6 -242,31 +226,34 @@@
  /* Flow control queue count */
  #define XGMAC_MAX_FLOW_CONTROL_QUEUES	8
  
++<<<<<<< HEAD
++=======
+ /* Flow control threshold units */
+ #define XGMAC_FLOW_CONTROL_UNIT		512
+ #define XGMAC_FLOW_CONTROL_ALIGN(_x)				\
+ 	(((_x) + XGMAC_FLOW_CONTROL_UNIT - 1) & ~(XGMAC_FLOW_CONTROL_UNIT - 1))
+ #define XGMAC_FLOW_CONTROL_VALUE(_x)				\
+ 	(((_x) < 1024) ? 0 : ((_x) / XGMAC_FLOW_CONTROL_UNIT) - 2)
+ #define XGMAC_FLOW_CONTROL_MAX		33280
+ 
+ /* Maximum MAC address hash table size (256 bits = 8 bytes) */
+ #define XGBE_MAC_HASH_TABLE_SIZE	8
+ 
+ /* Receive Side Scaling */
+ #define XGBE_RSS_HASH_KEY_SIZE		40
+ #define XGBE_RSS_MAX_TABLE_SIZE		256
+ #define XGBE_RSS_LOOKUP_TABLE_TYPE	0
+ #define XGBE_RSS_HASH_KEY_TYPE		1
+ 
+ /* Auto-negotiation */
+ #define XGBE_AN_MS_TIMEOUT		500
+ #define XGBE_LINK_TIMEOUT		10
+ 
+ #define XGBE_AN_INT_CMPLT		0x01
+ #define XGBE_AN_INC_LINK		0x02
+ #define XGBE_AN_PG_RCV			0x04
+ #define XGBE_AN_INT_MASK		0x07
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  
  struct xgbe_prv_data;
  
@@@ -324,18 -463,57 +384,72 @@@ enum xgbe_int_state 
  	XGMAC_INT_STATE_RESTORE,
  };
  
++<<<<<<< HEAD
 +enum xgbe_mtl_fifo_size {
 +	XGMAC_MTL_FIFO_SIZE_256  = 0x00,
 +	XGMAC_MTL_FIFO_SIZE_512  = 0x01,
 +	XGMAC_MTL_FIFO_SIZE_1K   = 0x03,
 +	XGMAC_MTL_FIFO_SIZE_2K   = 0x07,
 +	XGMAC_MTL_FIFO_SIZE_4K   = 0x0f,
 +	XGMAC_MTL_FIFO_SIZE_8K   = 0x1f,
 +	XGMAC_MTL_FIFO_SIZE_16K  = 0x3f,
 +	XGMAC_MTL_FIFO_SIZE_32K  = 0x7f,
 +	XGMAC_MTL_FIFO_SIZE_64K  = 0xff,
 +	XGMAC_MTL_FIFO_SIZE_128K = 0x1ff,
 +	XGMAC_MTL_FIFO_SIZE_256K = 0x3ff,
++=======
+ enum xgbe_speed {
+ 	XGBE_SPEED_1000 = 0,
+ 	XGBE_SPEED_2500,
+ 	XGBE_SPEED_10000,
+ 	XGBE_SPEEDS,
+ };
+ 
+ enum xgbe_an {
+ 	XGBE_AN_READY = 0,
+ 	XGBE_AN_PAGE_RECEIVED,
+ 	XGBE_AN_INCOMPAT_LINK,
+ 	XGBE_AN_COMPLETE,
+ 	XGBE_AN_NO_LINK,
+ 	XGBE_AN_ERROR,
+ };
+ 
+ enum xgbe_rx {
+ 	XGBE_RX_BPA = 0,
+ 	XGBE_RX_XNP,
+ 	XGBE_RX_COMPLETE,
+ 	XGBE_RX_ERROR,
+ };
+ 
+ enum xgbe_mode {
+ 	XGBE_MODE_KX_1000 = 0,
+ 	XGBE_MODE_KX_2500,
+ 	XGBE_MODE_KR,
+ 	XGBE_MODE_UNKNOWN,
+ };
+ 
+ enum xgbe_speedset {
+ 	XGBE_SPEEDSET_1000_10000 = 0,
+ 	XGBE_SPEEDSET_2500_10000,
+ };
+ 
+ struct xgbe_phy {
+ 	u32 supported;
+ 	u32 advertising;
+ 	u32 lp_advertising;
+ 
+ 	int address;
+ 
+ 	int autoneg;
+ 	int speed;
+ 	int duplex;
+ 
+ 	int link;
+ 
+ 	int pause_autoneg;
+ 	int tx_pause;
+ 	int rx_pause;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  };
  
  struct xgbe_mmc_stats {
@@@ -461,6 -646,86 +573,89 @@@ struct xgbe_hw_if 
  	void (*rx_mmc_int)(struct xgbe_prv_data *);
  	void (*tx_mmc_int)(struct xgbe_prv_data *);
  	void (*read_mmc_stats)(struct xgbe_prv_data *);
++<<<<<<< HEAD
++=======
+ 
+ 	/* For Timestamp config */
+ 	int (*config_tstamp)(struct xgbe_prv_data *, unsigned int);
+ 	void (*update_tstamp_addend)(struct xgbe_prv_data *, unsigned int);
+ 	void (*set_tstamp_time)(struct xgbe_prv_data *, unsigned int sec,
+ 				unsigned int nsec);
+ 	u64 (*get_tstamp_time)(struct xgbe_prv_data *);
+ 	u64 (*get_tx_tstamp)(struct xgbe_prv_data *);
+ 
+ 	/* For Data Center Bridging config */
+ 	void (*config_tc)(struct xgbe_prv_data *);
+ 	void (*config_dcb_tc)(struct xgbe_prv_data *);
+ 	void (*config_dcb_pfc)(struct xgbe_prv_data *);
+ 
+ 	/* For Receive Side Scaling */
+ 	int (*enable_rss)(struct xgbe_prv_data *);
+ 	int (*disable_rss)(struct xgbe_prv_data *);
+ 	int (*set_rss_hash_key)(struct xgbe_prv_data *, const u8 *);
+ 	int (*set_rss_lookup_table)(struct xgbe_prv_data *, const u32 *);
+ };
+ 
+ /* This structure represents implementation specific routines for an
+  * implementation of a PHY. All routines are required unless noted below.
+  *   Optional routines:
+  *     kr_training_pre, kr_training_post
+  */
+ struct xgbe_phy_impl_if {
+ 	/* Perform Setup/teardown actions */
+ 	int (*init)(struct xgbe_prv_data *);
+ 	void (*exit)(struct xgbe_prv_data *);
+ 
+ 	/* Perform start/stop specific actions */
+ 	int (*reset)(struct xgbe_prv_data *);
+ 	int (*start)(struct xgbe_prv_data *);
+ 	void (*stop)(struct xgbe_prv_data *);
+ 
+ 	/* Return the link status */
+ 	int (*link_status)(struct xgbe_prv_data *);
+ 
+ 	/* Indicate if a particular speed is valid */
+ 	bool (*valid_speed)(struct xgbe_prv_data *, int);
+ 
+ 	/* Check if the specified mode can/should be used */
+ 	bool (*use_mode)(struct xgbe_prv_data *, enum xgbe_mode);
+ 	/* Switch the PHY into various modes */
+ 	void (*set_mode)(struct xgbe_prv_data *, enum xgbe_mode);
+ 	/* Retrieve mode needed for a specific speed */
+ 	enum xgbe_mode (*get_mode)(struct xgbe_prv_data *, int);
+ 	/* Retrieve new/next mode when trying to auto-negotiate */
+ 	enum xgbe_mode (*switch_mode)(struct xgbe_prv_data *);
+ 	/* Retrieve current mode */
+ 	enum xgbe_mode (*cur_mode)(struct xgbe_prv_data *);
+ 
+ 	/* Process results of auto-negotiation */
+ 	enum xgbe_mode (*an_outcome)(struct xgbe_prv_data *);
+ 
+ 	/* Pre/Post KR training enablement support */
+ 	void (*kr_training_pre)(struct xgbe_prv_data *);
+ 	void (*kr_training_post)(struct xgbe_prv_data *);
+ };
+ 
+ struct xgbe_phy_if {
+ 	/* For PHY setup/teardown */
+ 	int (*phy_init)(struct xgbe_prv_data *);
+ 	void (*phy_exit)(struct xgbe_prv_data *);
+ 
+ 	/* For PHY support when setting device up/down */
+ 	int (*phy_reset)(struct xgbe_prv_data *);
+ 	int (*phy_start)(struct xgbe_prv_data *);
+ 	void (*phy_stop)(struct xgbe_prv_data *);
+ 
+ 	/* For PHY support while device is up */
+ 	void (*phy_status)(struct xgbe_prv_data *);
+ 	int (*phy_config_aneg)(struct xgbe_prv_data *);
+ 
+ 	/* For PHY settings validation */
+ 	bool (*phy_valid_speed)(struct xgbe_prv_data *, int);
+ 
+ 	/* PHY implementation specific services */
+ 	struct xgbe_phy_impl_if phy_impl;
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  };
  
  struct xgbe_desc_if {
@@@ -517,8 -792,17 +716,13 @@@ struct xgbe_version_data 
  struct xgbe_prv_data {
  	struct net_device *netdev;
  	struct platform_device *pdev;
 -	struct acpi_device *adev;
  	struct device *dev;
+ 	struct platform_device *phy_pdev;
+ 	struct device *phy_dev;
+ 
+ 	/* Version related data */
+ 	struct xgbe_version_data *vdata;
  
 -	/* ACPI or DT flag */
 -	unsigned int use_acpi;
 -
  	/* XGMAC/XPCS related mmio registers */
  	void __iomem *xgmac_regs;	/* XGMAC CSRs */
  	void __iomem *xpcs_regs;	/* XPCS MMD registers */
@@@ -611,6 -935,42 +815,45 @@@
  	/* Keeps track of power mode */
  	unsigned int power_down;
  
++<<<<<<< HEAD
++=======
+ 	/* Network interface message level setting */
+ 	u32 msg_enable;
+ 
+ 	/* Current PHY settings */
+ 	phy_interface_t phy_mode;
+ 	int phy_link;
+ 	int phy_speed;
+ 
+ 	/* MDIO/PHY related settings */
+ 	unsigned int phy_started;
+ 	void *phy_data;
+ 	struct xgbe_phy phy;
+ 	int mdio_mmd;
+ 	unsigned long link_check;
+ 
+ 	char an_name[IFNAMSIZ + 32];
+ 	struct workqueue_struct *an_workqueue;
+ 
+ 	int an_irq;
+ 	struct work_struct an_irq_work;
+ 
+ 	/* Auto-negotiation state machine support */
+ 	unsigned int an_int;
+ 	struct mutex an_mutex;
+ 	enum xgbe_an an_result;
+ 	enum xgbe_an an_state;
+ 	enum xgbe_rx kr_state;
+ 	enum xgbe_rx kx_state;
+ 	struct work_struct an_work;
+ 	unsigned int an_supported;
+ 	unsigned int parallel_detect;
+ 	unsigned int fec_ability;
+ 	unsigned long an_start;
+ 
+ 	unsigned int lpm_ctrl;		/* CTRL1 for resume */
+ 
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  #ifdef CONFIG_DEBUG_FS
  	struct dentry *xgbe_debugfs;
  
@@@ -624,16 -984,21 +867,21 @@@
  /* Function prototypes*/
  
  void xgbe_init_function_ptrs_dev(struct xgbe_hw_if *);
++<<<<<<< HEAD
++=======
+ void xgbe_init_function_ptrs_phy(struct xgbe_phy_if *);
+ void xgbe_init_function_ptrs_phy_v1(struct xgbe_phy_if *);
++>>>>>>> e57f7a3feaef (amd-xgbe: Prepare for working with more than one type of phy)
  void xgbe_init_function_ptrs_desc(struct xgbe_desc_if *);
 -const struct net_device_ops *xgbe_get_netdev_ops(void);
 -const struct ethtool_ops *xgbe_get_ethtool_ops(void);
 -
 -#ifdef CONFIG_AMD_XGBE_DCB
 -const struct dcbnl_rtnl_ops *xgbe_get_dcbnl_ops(void);
 -#endif
 +struct net_device_ops *xgbe_get_netdev_ops(void);
 +struct ethtool_ops *xgbe_get_ethtool_ops(void);
  
 -void xgbe_ptp_register(struct xgbe_prv_data *);
 -void xgbe_ptp_unregister(struct xgbe_prv_data *);
 -void xgbe_dump_tx_desc(struct xgbe_prv_data *, struct xgbe_ring *,
 -		       unsigned int, unsigned int, unsigned int);
 -void xgbe_dump_rx_desc(struct xgbe_prv_data *, struct xgbe_ring *,
 +int xgbe_mdio_register(struct xgbe_prv_data *);
 +void xgbe_mdio_unregister(struct xgbe_prv_data *);
 +void xgbe_dump_phy_registers(struct xgbe_prv_data *);
 +void xgbe_dump_tx_desc(struct xgbe_ring *, unsigned int, unsigned int,
 +		       unsigned int);
 +void xgbe_dump_rx_desc(struct xgbe_ring *, struct xgbe_ring_desc *,
  		       unsigned int);
  void xgbe_print_pkt(struct net_device *, struct sk_buff *, bool);
  void xgbe_get_all_hw_features(struct xgbe_prv_data *);
* Unmerged path drivers/net/ethernet/amd/xgbe/Makefile
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
index a748fd8a1c58..7629bc6567e6 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
@@ -499,32 +499,26 @@ static void xgbe_enable_mac_interrupts(struct xgbe_prv_data *pdata)
 	XGMAC_IOWRITE_BITS(pdata, MMC_TIER, ALL_INTERRUPTS, 0xffffffff);
 }
 
-static int xgbe_set_gmii_speed(struct xgbe_prv_data *pdata)
+static int xgbe_set_speed(struct xgbe_prv_data *pdata, int speed)
 {
-	if (XGMAC_IOREAD_BITS(pdata, MAC_TCR, SS) == 0x3)
-		return 0;
-
-	XGMAC_IOWRITE_BITS(pdata, MAC_TCR, SS, 0x3);
-
-	return 0;
-}
-
-static int xgbe_set_gmii_2500_speed(struct xgbe_prv_data *pdata)
-{
-	if (XGMAC_IOREAD_BITS(pdata, MAC_TCR, SS) == 0x2)
-		return 0;
+	unsigned int ss;
 
-	XGMAC_IOWRITE_BITS(pdata, MAC_TCR, SS, 0x2);
-
-	return 0;
-}
-
-static int xgbe_set_xgmii_speed(struct xgbe_prv_data *pdata)
-{
-	if (XGMAC_IOREAD_BITS(pdata, MAC_TCR, SS) == 0)
-		return 0;
+	switch (speed) {
+	case SPEED_1000:
+		ss = 0x03;
+		break;
+	case SPEED_2500:
+		ss = 0x02;
+		break;
+	case SPEED_10000:
+		ss = 0x00;
+		break;
+	default:
+		return -EINVAL;
+	}
 
-	XGMAC_IOWRITE_BITS(pdata, MAC_TCR, SS, 0);
+	if (XGMAC_IOREAD_BITS(pdata, MAC_TCR, SS) != ss)
+		XGMAC_IOWRITE_BITS(pdata, MAC_TCR, SS, ss);
 
 	return 0;
 }
@@ -1565,19 +1559,7 @@ static void xgbe_config_jumbo_enable(struct xgbe_prv_data *pdata)
 
 static void xgbe_config_mac_speed(struct xgbe_prv_data *pdata)
 {
-	switch (pdata->phy_speed) {
-	case SPEED_10000:
-		xgbe_set_xgmii_speed(pdata);
-		break;
-
-	case SPEED_2500:
-		xgbe_set_gmii_2500_speed(pdata);
-		break;
-
-	case SPEED_1000:
-		xgbe_set_gmii_speed(pdata);
-		break;
-	}
+	xgbe_set_speed(pdata, pdata->phy_speed);
 }
 
 static void xgbe_config_checksum_offload(struct xgbe_prv_data *pdata)
@@ -2196,9 +2178,7 @@ void xgbe_init_function_ptrs_dev(struct xgbe_hw_if *hw_if)
 	hw_if->read_mmd_regs = xgbe_read_mmd_regs;
 	hw_if->write_mmd_regs = xgbe_write_mmd_regs;
 
-	hw_if->set_gmii_speed = xgbe_set_gmii_speed;
-	hw_if->set_gmii_2500_speed = xgbe_set_gmii_2500_speed;
-	hw_if->set_xgmii_speed = xgbe_set_xgmii_speed;
+	hw_if->set_speed = xgbe_set_speed;
 
 	hw_if->enable_tx = xgbe_enable_tx;
 	hw_if->disable_tx = xgbe_disable_tx;
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-drv.c
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-ethtool.c
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-main.c
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c b/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c
new file mode 100644
index 000000000000..20ccb99bbe88
--- /dev/null
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-phy-v1.c
@@ -0,0 +1,821 @@
+/*
+ * AMD 10Gb Ethernet driver
+ *
+ * This file is available to you under your choice of the following two
+ * licenses:
+ *
+ * License 1: GPLv2
+ *
+ * Copyright (c) 2016 Advanced Micro Devices, Inc.
+ *
+ * This file is free software; you may copy, redistribute and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or (at
+ * your option) any later version.
+ *
+ * This file is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * This file incorporates work covered by the following copyright and
+ * permission notice:
+ *     The Synopsys DWC ETHER XGMAC Software Driver and documentation
+ *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,
+ *     Inc. unless otherwise expressly agreed to in writing between Synopsys
+ *     and you.
+ *
+ *     The Software IS NOT an item of Licensed Software or Licensed Product
+ *     under any End User Software License Agreement or Agreement for Licensed
+ *     Product with Synopsys or any supplement thereto.  Permission is hereby
+ *     granted, free of charge, to any person obtaining a copy of this software
+ *     annotated with this license and the Software, to deal in the Software
+ *     without restriction, including without limitation the rights to use,
+ *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+ *     of the Software, and to permit persons to whom the Software is furnished
+ *     to do so, subject to the following conditions:
+ *
+ *     The above copyright notice and this permission notice shall be included
+ *     in all copies or substantial portions of the Software.
+ *
+ *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"
+ *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS
+ *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ *     THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *
+ * License 2: Modified BSD
+ *
+ * Copyright (c) 2016 Advanced Micro Devices, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of Advanced Micro Devices, Inc. nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * This file incorporates work covered by the following copyright and
+ * permission notice:
+ *     The Synopsys DWC ETHER XGMAC Software Driver and documentation
+ *     (hereinafter "Software") is an unsupported proprietary work of Synopsys,
+ *     Inc. unless otherwise expressly agreed to in writing between Synopsys
+ *     and you.
+ *
+ *     The Software IS NOT an item of Licensed Software or Licensed Product
+ *     under any End User Software License Agreement or Agreement for Licensed
+ *     Product with Synopsys or any supplement thereto.  Permission is hereby
+ *     granted, free of charge, to any person obtaining a copy of this software
+ *     annotated with this license and the Software, to deal in the Software
+ *     without restriction, including without limitation the rights to use,
+ *     copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+ *     of the Software, and to permit persons to whom the Software is furnished
+ *     to do so, subject to the following conditions:
+ *
+ *     The above copyright notice and this permission notice shall be included
+ *     in all copies or substantial portions of the Software.
+ *
+ *     THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS"
+ *     BASIS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ *     PARTICULAR PURPOSE ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS
+ *     BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ *     THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <linux/module.h>
+#include <linux/kmod.h>
+#include <linux/device.h>
+#include <linux/property.h>
+#include <linux/mdio.h>
+#include <linux/phy.h>
+
+#include "xgbe.h"
+#include "xgbe-common.h"
+
+#define XGBE_BLWC_PROPERTY		"amd,serdes-blwc"
+#define XGBE_CDR_RATE_PROPERTY		"amd,serdes-cdr-rate"
+#define XGBE_PQ_SKEW_PROPERTY		"amd,serdes-pq-skew"
+#define XGBE_TX_AMP_PROPERTY		"amd,serdes-tx-amp"
+#define XGBE_DFE_CFG_PROPERTY		"amd,serdes-dfe-tap-config"
+#define XGBE_DFE_ENA_PROPERTY		"amd,serdes-dfe-tap-enable"
+
+/* Default SerDes settings */
+#define XGBE_SPEED_1000_BLWC		1
+#define XGBE_SPEED_1000_CDR		0x2
+#define XGBE_SPEED_1000_PLL		0x0
+#define XGBE_SPEED_1000_PQ		0xa
+#define XGBE_SPEED_1000_RATE		0x3
+#define XGBE_SPEED_1000_TXAMP		0xf
+#define XGBE_SPEED_1000_WORD		0x1
+#define XGBE_SPEED_1000_DFE_TAP_CONFIG	0x3
+#define XGBE_SPEED_1000_DFE_TAP_ENABLE	0x0
+
+#define XGBE_SPEED_2500_BLWC		1
+#define XGBE_SPEED_2500_CDR		0x2
+#define XGBE_SPEED_2500_PLL		0x0
+#define XGBE_SPEED_2500_PQ		0xa
+#define XGBE_SPEED_2500_RATE		0x1
+#define XGBE_SPEED_2500_TXAMP		0xf
+#define XGBE_SPEED_2500_WORD		0x1
+#define XGBE_SPEED_2500_DFE_TAP_CONFIG	0x3
+#define XGBE_SPEED_2500_DFE_TAP_ENABLE	0x0
+
+#define XGBE_SPEED_10000_BLWC		0
+#define XGBE_SPEED_10000_CDR		0x7
+#define XGBE_SPEED_10000_PLL		0x1
+#define XGBE_SPEED_10000_PQ		0x12
+#define XGBE_SPEED_10000_RATE		0x0
+#define XGBE_SPEED_10000_TXAMP		0xa
+#define XGBE_SPEED_10000_WORD		0x7
+#define XGBE_SPEED_10000_DFE_TAP_CONFIG	0x1
+#define XGBE_SPEED_10000_DFE_TAP_ENABLE	0x7f
+
+/* Rate-change complete wait/retry count */
+#define XGBE_RATECHANGE_COUNT		500
+
+static const u32 xgbe_phy_blwc[] = {
+	XGBE_SPEED_1000_BLWC,
+	XGBE_SPEED_2500_BLWC,
+	XGBE_SPEED_10000_BLWC,
+};
+
+static const u32 xgbe_phy_cdr_rate[] = {
+	XGBE_SPEED_1000_CDR,
+	XGBE_SPEED_2500_CDR,
+	XGBE_SPEED_10000_CDR,
+};
+
+static const u32 xgbe_phy_pq_skew[] = {
+	XGBE_SPEED_1000_PQ,
+	XGBE_SPEED_2500_PQ,
+	XGBE_SPEED_10000_PQ,
+};
+
+static const u32 xgbe_phy_tx_amp[] = {
+	XGBE_SPEED_1000_TXAMP,
+	XGBE_SPEED_2500_TXAMP,
+	XGBE_SPEED_10000_TXAMP,
+};
+
+static const u32 xgbe_phy_dfe_tap_cfg[] = {
+	XGBE_SPEED_1000_DFE_TAP_CONFIG,
+	XGBE_SPEED_2500_DFE_TAP_CONFIG,
+	XGBE_SPEED_10000_DFE_TAP_CONFIG,
+};
+
+static const u32 xgbe_phy_dfe_tap_ena[] = {
+	XGBE_SPEED_1000_DFE_TAP_ENABLE,
+	XGBE_SPEED_2500_DFE_TAP_ENABLE,
+	XGBE_SPEED_10000_DFE_TAP_ENABLE,
+};
+
+struct xgbe_phy_data {
+	/* 1000/10000 vs 2500/10000 indicator */
+	unsigned int speed_set;
+
+	/* SerDes UEFI configurable settings.
+	 *   Switching between modes/speeds requires new values for some
+	 *   SerDes settings.  The values can be supplied as device
+	 *   properties in array format.  The first array entry is for
+	 *   1GbE, second for 2.5GbE and third for 10GbE
+	 */
+	u32 blwc[XGBE_SPEEDS];
+	u32 cdr_rate[XGBE_SPEEDS];
+	u32 pq_skew[XGBE_SPEEDS];
+	u32 tx_amp[XGBE_SPEEDS];
+	u32 dfe_tap_cfg[XGBE_SPEEDS];
+	u32 dfe_tap_ena[XGBE_SPEEDS];
+};
+
+static void xgbe_phy_kr_training_pre(struct xgbe_prv_data *pdata)
+{
+		XSIR0_IOWRITE_BITS(pdata, SIR0_KR_RT_1, RESET, 1);
+}
+
+static void xgbe_phy_kr_training_post(struct xgbe_prv_data *pdata)
+{
+		XSIR0_IOWRITE_BITS(pdata, SIR0_KR_RT_1, RESET, 0);
+}
+
+static enum xgbe_mode xgbe_phy_an_outcome(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+	enum xgbe_mode mode;
+	unsigned int ad_reg, lp_reg;
+
+	pdata->phy.lp_advertising |= ADVERTISED_Autoneg;
+	pdata->phy.lp_advertising |= ADVERTISED_Backplane;
+
+	/* Compare Advertisement and Link Partner register 1 */
+	ad_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE);
+	lp_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPA);
+	if (lp_reg & 0x400)
+		pdata->phy.lp_advertising |= ADVERTISED_Pause;
+	if (lp_reg & 0x800)
+		pdata->phy.lp_advertising |= ADVERTISED_Asym_Pause;
+
+	if (pdata->phy.pause_autoneg) {
+		/* Set flow control based on auto-negotiation result */
+		pdata->phy.tx_pause = 0;
+		pdata->phy.rx_pause = 0;
+
+		if (ad_reg & lp_reg & 0x400) {
+			pdata->phy.tx_pause = 1;
+			pdata->phy.rx_pause = 1;
+		} else if (ad_reg & lp_reg & 0x800) {
+			if (ad_reg & 0x400)
+				pdata->phy.rx_pause = 1;
+			else if (lp_reg & 0x400)
+				pdata->phy.tx_pause = 1;
+		}
+	}
+
+	/* Compare Advertisement and Link Partner register 2 */
+	ad_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 1);
+	lp_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPA + 1);
+	if (lp_reg & 0x80)
+		pdata->phy.lp_advertising |= ADVERTISED_10000baseKR_Full;
+	if (lp_reg & 0x20) {
+		if (phy_data->speed_set == XGBE_SPEEDSET_2500_10000)
+			pdata->phy.lp_advertising |= ADVERTISED_2500baseX_Full;
+		else
+			pdata->phy.lp_advertising |= ADVERTISED_1000baseKX_Full;
+	}
+
+	ad_reg &= lp_reg;
+	if (ad_reg & 0x80) {
+		mode = XGBE_MODE_KR;
+	} else if (ad_reg & 0x20) {
+		if (phy_data->speed_set == XGBE_SPEEDSET_2500_10000)
+			mode = XGBE_MODE_KX_2500;
+		else
+			mode = XGBE_MODE_KX_1000;
+	} else {
+		mode = XGBE_MODE_UNKNOWN;
+	}
+
+	/* Compare Advertisement and Link Partner register 3 */
+	ad_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_ADVERTISE + 2);
+	lp_reg = XMDIO_READ(pdata, MDIO_MMD_AN, MDIO_AN_LPA + 2);
+	if (lp_reg & 0xc000)
+		pdata->phy.lp_advertising |= ADVERTISED_10000baseR_FEC;
+
+	return mode;
+}
+
+static void xgbe_phy_pcs_power_cycle(struct xgbe_prv_data *pdata)
+{
+	unsigned int reg;
+
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1);
+
+	reg |= MDIO_CTRL1_LPOWER;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL1, reg);
+
+	usleep_range(75, 100);
+
+	reg &= ~MDIO_CTRL1_LPOWER;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL1, reg);
+}
+
+static void xgbe_phy_start_ratechange(struct xgbe_prv_data *pdata)
+{
+	/* Assert Rx and Tx ratechange */
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, RATECHANGE, 1);
+}
+
+static void xgbe_phy_complete_ratechange(struct xgbe_prv_data *pdata)
+{
+	unsigned int wait;
+	u16 status;
+
+	/* Release Rx and Tx ratechange */
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, RATECHANGE, 0);
+
+	/* Wait for Rx and Tx ready */
+	wait = XGBE_RATECHANGE_COUNT;
+	while (wait--) {
+		usleep_range(50, 75);
+
+		status = XSIR0_IOREAD(pdata, SIR0_STATUS);
+		if (XSIR_GET_BITS(status, SIR0_STATUS, RX_READY) &&
+		    XSIR_GET_BITS(status, SIR0_STATUS, TX_READY))
+			goto rx_reset;
+	}
+
+	netif_dbg(pdata, link, pdata->netdev, "SerDes rx/tx not ready (%#hx)\n",
+		  status);
+
+rx_reset:
+	/* Perform Rx reset for the DFE changes */
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG6, RESETB_RXD, 0);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG6, RESETB_RXD, 1);
+}
+
+static void xgbe_phy_kr_mode(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+	unsigned int reg;
+
+	/* Set PCS to KR/10G speed */
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL2);
+	reg &= ~MDIO_PCS_CTRL2_TYPE;
+	reg |= MDIO_PCS_CTRL2_10GBR;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL2, reg);
+
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1);
+	reg &= ~MDIO_CTRL1_SPEEDSEL;
+	reg |= MDIO_CTRL1_SPEED10G;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL1, reg);
+
+	xgbe_phy_pcs_power_cycle(pdata);
+
+	/* Set SerDes to 10G speed */
+	xgbe_phy_start_ratechange(pdata);
+
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, DATARATE, XGBE_SPEED_10000_RATE);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, WORDMODE, XGBE_SPEED_10000_WORD);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, PLLSEL, XGBE_SPEED_10000_PLL);
+
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, CDR_RATE,
+			   phy_data->cdr_rate[XGBE_SPEED_10000]);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, TXAMP,
+			   phy_data->tx_amp[XGBE_SPEED_10000]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG20, BLWC_ENA,
+			   phy_data->blwc[XGBE_SPEED_10000]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG114, PQ_REG,
+			   phy_data->pq_skew[XGBE_SPEED_10000]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG129, RXDFE_CONFIG,
+			   phy_data->dfe_tap_cfg[XGBE_SPEED_10000]);
+	XRXTX_IOWRITE(pdata, RXTX_REG22,
+		      phy_data->dfe_tap_ena[XGBE_SPEED_10000]);
+
+	xgbe_phy_complete_ratechange(pdata);
+
+	netif_dbg(pdata, link, pdata->netdev, "10GbE KR mode set\n");
+}
+
+static void xgbe_phy_kx_2500_mode(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+	unsigned int reg;
+
+	/* Set PCS to KX/1G speed */
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL2);
+	reg &= ~MDIO_PCS_CTRL2_TYPE;
+	reg |= MDIO_PCS_CTRL2_10GBX;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL2, reg);
+
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1);
+	reg &= ~MDIO_CTRL1_SPEEDSEL;
+	reg |= MDIO_CTRL1_SPEED1G;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL1, reg);
+
+	xgbe_phy_pcs_power_cycle(pdata);
+
+	/* Set SerDes to 2.5G speed */
+	xgbe_phy_start_ratechange(pdata);
+
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, DATARATE, XGBE_SPEED_2500_RATE);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, WORDMODE, XGBE_SPEED_2500_WORD);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, PLLSEL, XGBE_SPEED_2500_PLL);
+
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, CDR_RATE,
+			   phy_data->cdr_rate[XGBE_SPEED_2500]);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, TXAMP,
+			   phy_data->tx_amp[XGBE_SPEED_2500]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG20, BLWC_ENA,
+			   phy_data->blwc[XGBE_SPEED_2500]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG114, PQ_REG,
+			   phy_data->pq_skew[XGBE_SPEED_2500]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG129, RXDFE_CONFIG,
+			   phy_data->dfe_tap_cfg[XGBE_SPEED_2500]);
+	XRXTX_IOWRITE(pdata, RXTX_REG22,
+		      phy_data->dfe_tap_ena[XGBE_SPEED_2500]);
+
+	xgbe_phy_complete_ratechange(pdata);
+
+	netif_dbg(pdata, link, pdata->netdev, "2.5GbE KX mode set\n");
+}
+
+static void xgbe_phy_kx_1000_mode(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+	unsigned int reg;
+
+	/* Set PCS to KX/1G speed */
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL2);
+	reg &= ~MDIO_PCS_CTRL2_TYPE;
+	reg |= MDIO_PCS_CTRL2_10GBX;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL2, reg);
+
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1);
+	reg &= ~MDIO_CTRL1_SPEEDSEL;
+	reg |= MDIO_CTRL1_SPEED1G;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL1, reg);
+
+	xgbe_phy_pcs_power_cycle(pdata);
+
+	/* Set SerDes to 1G speed */
+	xgbe_phy_start_ratechange(pdata);
+
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, DATARATE, XGBE_SPEED_1000_RATE);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, WORDMODE, XGBE_SPEED_1000_WORD);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, PLLSEL, XGBE_SPEED_1000_PLL);
+
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, CDR_RATE,
+			   phy_data->cdr_rate[XGBE_SPEED_1000]);
+	XSIR1_IOWRITE_BITS(pdata, SIR1_SPEED, TXAMP,
+			   phy_data->tx_amp[XGBE_SPEED_1000]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG20, BLWC_ENA,
+			   phy_data->blwc[XGBE_SPEED_1000]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG114, PQ_REG,
+			   phy_data->pq_skew[XGBE_SPEED_1000]);
+	XRXTX_IOWRITE_BITS(pdata, RXTX_REG129, RXDFE_CONFIG,
+			   phy_data->dfe_tap_cfg[XGBE_SPEED_1000]);
+	XRXTX_IOWRITE(pdata, RXTX_REG22,
+		      phy_data->dfe_tap_ena[XGBE_SPEED_1000]);
+
+	xgbe_phy_complete_ratechange(pdata);
+
+	netif_dbg(pdata, link, pdata->netdev, "1GbE KX mode set\n");
+}
+
+static enum xgbe_mode xgbe_phy_cur_mode(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+	enum xgbe_mode mode;
+	unsigned int reg;
+
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL2);
+	reg &= MDIO_PCS_CTRL2_TYPE;
+
+	if (reg == MDIO_PCS_CTRL2_10GBR) {
+		mode = XGBE_MODE_KR;
+	} else {
+		if (phy_data->speed_set == XGBE_SPEEDSET_2500_10000)
+			mode = XGBE_MODE_KX_2500;
+		else
+			mode = XGBE_MODE_KX_1000;
+	}
+
+	return mode;
+}
+
+static enum xgbe_mode xgbe_phy_switch_mode(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+	enum xgbe_mode mode;
+
+	/* If we are in KR switch to KX, and vice-versa */
+	if (xgbe_phy_cur_mode(pdata) == XGBE_MODE_KR) {
+		if (phy_data->speed_set == XGBE_SPEEDSET_2500_10000)
+			mode = XGBE_MODE_KX_2500;
+		else
+			mode = XGBE_MODE_KX_1000;
+	} else {
+		mode = XGBE_MODE_KR;
+	}
+
+	return mode;
+}
+
+static enum xgbe_mode xgbe_phy_get_mode(struct xgbe_prv_data *pdata,
+					int speed)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+
+	switch (speed) {
+	case SPEED_1000:
+		return (phy_data->speed_set == XGBE_SPEEDSET_1000_10000)
+			? XGBE_MODE_KX_1000 : XGBE_MODE_UNKNOWN;
+	case SPEED_2500:
+		return (phy_data->speed_set == XGBE_SPEEDSET_2500_10000)
+			? XGBE_MODE_KX_2500 : XGBE_MODE_UNKNOWN;
+	case SPEED_10000:
+		return XGBE_MODE_KR;
+	default:
+		return XGBE_MODE_UNKNOWN;
+	}
+}
+
+static void xgbe_phy_set_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
+{
+	switch (mode) {
+	case XGBE_MODE_KX_1000:
+		xgbe_phy_kx_1000_mode(pdata);
+		break;
+	case XGBE_MODE_KX_2500:
+		xgbe_phy_kx_2500_mode(pdata);
+		break;
+	case XGBE_MODE_KR:
+		xgbe_phy_kr_mode(pdata);
+		break;
+	default:
+		break;
+	}
+}
+
+static bool xgbe_phy_check_mode(struct xgbe_prv_data *pdata,
+				enum xgbe_mode mode, u32 advert)
+{
+	if (pdata->phy.autoneg == AUTONEG_ENABLE) {
+		if (pdata->phy.advertising & advert)
+			return true;
+	} else {
+		enum xgbe_mode cur_mode;
+
+		cur_mode = xgbe_phy_get_mode(pdata, pdata->phy.speed);
+		if (cur_mode == mode)
+			return true;
+	}
+
+	return false;
+}
+
+static bool xgbe_phy_use_mode(struct xgbe_prv_data *pdata, enum xgbe_mode mode)
+{
+	switch (mode) {
+	case XGBE_MODE_KX_1000:
+		return xgbe_phy_check_mode(pdata, mode,
+					   ADVERTISED_1000baseKX_Full);
+	case XGBE_MODE_KX_2500:
+		return xgbe_phy_check_mode(pdata, mode,
+					   ADVERTISED_2500baseX_Full);
+	case XGBE_MODE_KR:
+		return xgbe_phy_check_mode(pdata, mode,
+					   ADVERTISED_10000baseKR_Full);
+	default:
+		return false;
+	}
+}
+
+static bool xgbe_phy_valid_speed(struct xgbe_prv_data *pdata, int speed)
+{
+	struct xgbe_phy_data *phy_data = pdata->phy_data;
+
+	switch (speed) {
+	case SPEED_1000:
+		if (phy_data->speed_set != XGBE_SPEEDSET_1000_10000)
+			return false;
+		return true;
+	case SPEED_2500:
+		if (phy_data->speed_set != XGBE_SPEEDSET_2500_10000)
+			return false;
+		return true;
+	case SPEED_10000:
+		return true;
+	default:
+		return false;
+	}
+}
+
+static int xgbe_phy_link_status(struct xgbe_prv_data *pdata)
+{
+	unsigned int reg;
+
+	/* Link status is latched low, so read once to clear
+	 * and then read again to get current state
+	 */
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_STAT1);
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_STAT1);
+
+	return (reg & MDIO_STAT1_LSTATUS) ? 1 : 0;
+}
+
+static void xgbe_phy_stop(struct xgbe_prv_data *pdata)
+{
+	/* Nothing uniquely required for stop */
+}
+
+static int xgbe_phy_start(struct xgbe_prv_data *pdata)
+{
+	/* Nothing uniquely required for start */
+	return 0;
+}
+
+static int xgbe_phy_reset(struct xgbe_prv_data *pdata)
+{
+	unsigned int reg, count;
+
+	/* Perform a software reset of the PCS */
+	reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1);
+	reg |= MDIO_CTRL1_RESET;
+	XMDIO_WRITE(pdata, MDIO_MMD_PCS, MDIO_CTRL1, reg);
+
+	count = 50;
+	do {
+		msleep(20);
+		reg = XMDIO_READ(pdata, MDIO_MMD_PCS, MDIO_CTRL1);
+	} while ((reg & MDIO_CTRL1_RESET) && --count);
+
+	if (reg & MDIO_CTRL1_RESET)
+		return -ETIMEDOUT;
+
+	return 0;
+}
+
+static void xgbe_phy_exit(struct xgbe_prv_data *pdata)
+{
+	/* Nothing uniquely required for exit */
+}
+
+static int xgbe_phy_init(struct xgbe_prv_data *pdata)
+{
+	struct xgbe_phy_data *phy_data;
+	int ret;
+
+	phy_data = devm_kzalloc(pdata->dev, sizeof(*phy_data), GFP_KERNEL);
+	if (!phy_data)
+		return -ENOMEM;
+
+	/* Retrieve the PHY speedset */
+	ret = device_property_read_u32(pdata->phy_dev, XGBE_SPEEDSET_PROPERTY,
+				       &phy_data->speed_set);
+	if (ret) {
+		dev_err(pdata->dev, "invalid %s property\n",
+			XGBE_SPEEDSET_PROPERTY);
+		return ret;
+	}
+
+	switch (phy_data->speed_set) {
+	case XGBE_SPEEDSET_1000_10000:
+	case XGBE_SPEEDSET_2500_10000:
+		break;
+	default:
+		dev_err(pdata->dev, "invalid %s property\n",
+			XGBE_SPEEDSET_PROPERTY);
+		return -EINVAL;
+	}
+
+	/* Retrieve the PHY configuration properties */
+	if (device_property_present(pdata->phy_dev, XGBE_BLWC_PROPERTY)) {
+		ret = device_property_read_u32_array(pdata->phy_dev,
+						     XGBE_BLWC_PROPERTY,
+						     phy_data->blwc,
+						     XGBE_SPEEDS);
+		if (ret) {
+			dev_err(pdata->dev, "invalid %s property\n",
+				XGBE_BLWC_PROPERTY);
+			return ret;
+		}
+	} else {
+		memcpy(phy_data->blwc, xgbe_phy_blwc,
+		       sizeof(phy_data->blwc));
+	}
+
+	if (device_property_present(pdata->phy_dev, XGBE_CDR_RATE_PROPERTY)) {
+		ret = device_property_read_u32_array(pdata->phy_dev,
+						     XGBE_CDR_RATE_PROPERTY,
+						     phy_data->cdr_rate,
+						     XGBE_SPEEDS);
+		if (ret) {
+			dev_err(pdata->dev, "invalid %s property\n",
+				XGBE_CDR_RATE_PROPERTY);
+			return ret;
+		}
+	} else {
+		memcpy(phy_data->cdr_rate, xgbe_phy_cdr_rate,
+		       sizeof(phy_data->cdr_rate));
+	}
+
+	if (device_property_present(pdata->phy_dev, XGBE_PQ_SKEW_PROPERTY)) {
+		ret = device_property_read_u32_array(pdata->phy_dev,
+						     XGBE_PQ_SKEW_PROPERTY,
+						     phy_data->pq_skew,
+						     XGBE_SPEEDS);
+		if (ret) {
+			dev_err(pdata->dev, "invalid %s property\n",
+				XGBE_PQ_SKEW_PROPERTY);
+			return ret;
+		}
+	} else {
+		memcpy(phy_data->pq_skew, xgbe_phy_pq_skew,
+		       sizeof(phy_data->pq_skew));
+	}
+
+	if (device_property_present(pdata->phy_dev, XGBE_TX_AMP_PROPERTY)) {
+		ret = device_property_read_u32_array(pdata->phy_dev,
+						     XGBE_TX_AMP_PROPERTY,
+						     phy_data->tx_amp,
+						     XGBE_SPEEDS);
+		if (ret) {
+			dev_err(pdata->dev, "invalid %s property\n",
+				XGBE_TX_AMP_PROPERTY);
+			return ret;
+		}
+	} else {
+		memcpy(phy_data->tx_amp, xgbe_phy_tx_amp,
+		       sizeof(phy_data->tx_amp));
+	}
+
+	if (device_property_present(pdata->phy_dev, XGBE_DFE_CFG_PROPERTY)) {
+		ret = device_property_read_u32_array(pdata->phy_dev,
+						     XGBE_DFE_CFG_PROPERTY,
+						     phy_data->dfe_tap_cfg,
+						     XGBE_SPEEDS);
+		if (ret) {
+			dev_err(pdata->dev, "invalid %s property\n",
+				XGBE_DFE_CFG_PROPERTY);
+			return ret;
+		}
+	} else {
+		memcpy(phy_data->dfe_tap_cfg, xgbe_phy_dfe_tap_cfg,
+		       sizeof(phy_data->dfe_tap_cfg));
+	}
+
+	if (device_property_present(pdata->phy_dev, XGBE_DFE_ENA_PROPERTY)) {
+		ret = device_property_read_u32_array(pdata->phy_dev,
+						     XGBE_DFE_ENA_PROPERTY,
+						     phy_data->dfe_tap_ena,
+						     XGBE_SPEEDS);
+		if (ret) {
+			dev_err(pdata->dev, "invalid %s property\n",
+				XGBE_DFE_ENA_PROPERTY);
+			return ret;
+		}
+	} else {
+		memcpy(phy_data->dfe_tap_ena, xgbe_phy_dfe_tap_ena,
+		       sizeof(phy_data->dfe_tap_ena));
+	}
+
+	/* Initialize supported features */
+	pdata->phy.supported = SUPPORTED_Autoneg;
+	pdata->phy.supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
+	pdata->phy.supported |= SUPPORTED_Backplane;
+	pdata->phy.supported |= SUPPORTED_10000baseKR_Full;
+	switch (phy_data->speed_set) {
+	case XGBE_SPEEDSET_1000_10000:
+		pdata->phy.supported |= SUPPORTED_1000baseKX_Full;
+		break;
+	case XGBE_SPEEDSET_2500_10000:
+		pdata->phy.supported |= SUPPORTED_2500baseX_Full;
+		break;
+	}
+
+	if (pdata->fec_ability & MDIO_PMA_10GBR_FECABLE_ABLE)
+		pdata->phy.supported |= SUPPORTED_10000baseR_FEC;
+
+	pdata->phy_data = phy_data;
+
+	return 0;
+}
+
+void xgbe_init_function_ptrs_phy_v1(struct xgbe_phy_if *phy_if)
+{
+	struct xgbe_phy_impl_if *phy_impl = &phy_if->phy_impl;
+
+	phy_impl->init			= xgbe_phy_init;
+	phy_impl->exit			= xgbe_phy_exit;
+
+	phy_impl->reset			= xgbe_phy_reset;
+	phy_impl->start			= xgbe_phy_start;
+	phy_impl->stop			= xgbe_phy_stop;
+
+	phy_impl->link_status		= xgbe_phy_link_status;
+
+	phy_impl->valid_speed		= xgbe_phy_valid_speed;
+
+	phy_impl->use_mode		= xgbe_phy_use_mode;
+	phy_impl->set_mode		= xgbe_phy_set_mode;
+	phy_impl->get_mode		= xgbe_phy_get_mode;
+	phy_impl->switch_mode		= xgbe_phy_switch_mode;
+	phy_impl->cur_mode		= xgbe_phy_cur_mode;
+
+	phy_impl->an_outcome		= xgbe_phy_an_outcome;
+
+	phy_impl->kr_training_pre	= xgbe_phy_kr_training_pre;
+	phy_impl->kr_training_post	= xgbe_phy_kr_training_post;
+}
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe.h
