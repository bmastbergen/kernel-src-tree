hv_netvsc: refactor completion function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Stephen Hemminger <sthemmin@microsoft.com>
commit bc304dd3b4444b84082c483534a8dcac7a22cb9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bc304dd3.failed

Break the different cases, code is cleaner if broken up

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bc304dd3b4444b84082c483534a8dcac7a22cb9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 1b6a1e1be49f,830aae2d9510..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -644,46 -757,18 +679,50 @@@ static void netvsc_send_completion(stru
  		memcpy(&net_device->channel_init_pkt, nvsp_packet,
  		       sizeof(struct nvsp_message));
  		complete(&net_device->channel_init_wait);
- 	} else if (nvsp_packet->hdr.msg_type ==
- 		   NVSP_MSG1_TYPE_SEND_RNDIS_PKT_COMPLETE) {
- 		int num_outstanding_sends;
- 		u16 q_idx = 0;
- 		struct vmbus_channel *channel = device->channel;
- 		int queue_sends;
+ 		break;
  
- 		/* Get the send context */
- 		skb = (struct sk_buff *)(unsigned long)packet->trans_id;
+ 	case NVSP_MSG1_TYPE_SEND_RNDIS_PKT_COMPLETE:
+ 		netvsc_send_tx_complete(net_device, incoming_channel,
+ 					device, packet);
+ 		break;
  
++<<<<<<< HEAD
 +		/* Notify the layer above us */
 +		if (skb) {
 +			nvsc_packet = (struct hv_netvsc_packet *) skb->cb;
 +			send_index = nvsc_packet->send_buf_index;
 +			if (send_index != NETVSC_INVALID_INDEX)
 +				netvsc_free_send_slot(net_device, send_index);
 +			q_idx = nvsc_packet->q_idx;
 +			channel = incoming_channel;
 +			dev_kfree_skb_any(skb);
 +		}
 +
 +		num_outstanding_sends =
 +			atomic_dec_return(&net_device->num_outstanding_sends);
 +		queue_sends = atomic_dec_return(&net_device->
 +						queue_sends[q_idx]);
 +
 +		if (net_device->destroy && num_outstanding_sends == 0)
 +			wake_up(&net_device->wait_drain);
 +
 +		if (netif_tx_queue_stopped(netdev_get_tx_queue(ndev, q_idx)) &&
 +		    !net_device_ctx->start_remove &&
 +		    (hv_ringbuf_avail_percent(&channel->outbound) >
 +		     RING_AVAIL_PERCENT_HIWATER || queue_sends < 1))
 +				netif_tx_wake_queue(netdev_get_tx_queue(
 +						    ndev, q_idx));
 +	} else {
 +		netdev_err(ndev, "Unknown send completion packet type- "
 +			   "%d received!!\n", nvsp_packet->hdr.msg_type);
++=======
+ 	default:
+ 		netdev_err(ndev,
+ 			   "Unknown send completion type %d received!!\n",
+ 			   nvsp_packet->hdr.msg_type);
++>>>>>>> bc304dd3b444 (hv_netvsc: refactor completion function)
  	}
 +
  }
  
  static u32 netvsc_get_next_send_section(struct netvsc_device *net_device)
* Unmerged path drivers/net/hyperv/netvsc.c
