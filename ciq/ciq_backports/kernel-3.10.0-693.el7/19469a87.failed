flow_dissector: Use IPv6 flow label in flow_dissector

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tom Herbert <therbert@google.com>
commit 19469a873bafd4e65daef3597db2bd724c1b03c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/19469a87.failed

This patch implements the receive side to support RFC 6438 which is to
use the flow label as an ECMP hash. If an IPv6 flow label is set
in a packet we can use this as input for computing an L4-hash. There
should be no need to parse any transport headers in this case.

	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 19469a873bafd4e65daef3597db2bd724c1b03c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/flow_dissector.c
diff --cc net/core/flow_dissector.c
index 6806ddbdf2b9,c5f3912dad4c..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -101,11 -77,13 +101,13 @@@ ip
  		iph_to_flow_copy_addrs(flow, iph);
  		break;
  	}
 -	case htons(ETH_P_IPV6): {
 +	case __constant_htons(ETH_P_IPV6): {
  		const struct ipv6hdr *iph;
  		struct ipv6hdr _iph;
+ 		__be32 flow_label;
+ 
  ipv6:
 -		iph = skb_header_pointer(skb, nhoff, sizeof(_iph), &_iph);
 +		iph = __skb_header_pointer(skb, nhoff, sizeof(_iph), data, hlen, &_iph);
  		if (!iph)
  			return false;
  
@@@ -114,12 -92,19 +116,28 @@@
  		flow->dst = (__force __be32)ipv6_addr_hash(&iph->daddr);
  		nhoff += sizeof(struct ipv6hdr);
  
++<<<<<<< HEAD
 +		/* skip the flow label processing if skb is NULL.  The
 +		 * assumption here is that if there is no skb we are not
 +		 * looking for flow info as much as we are length.
 +		 */
 +		if (!skb)
 +			break;
++=======
+ 		flow_label = ip6_flowlabel(iph);
+ 		if (flow_label) {
+ 			/* Awesome, IPv6 packet has a flow label so we can
+ 			 * use that to represent the ports without any
+ 			 * further dissection.
+ 			 */
+ 			flow->n_proto = proto;
+ 			flow->ip_proto = ip_proto;
+ 			flow->ports = flow_label;
+ 			flow->thoff = (u16)nhoff;
+ 
+ 			return true;
+ 		}
++>>>>>>> 19469a873baf (flow_dissector: Use IPv6 flow label in flow_dissector)
  
  		break;
  	}
* Unmerged path net/core/flow_dissector.c
