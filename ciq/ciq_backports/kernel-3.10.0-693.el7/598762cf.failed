perf test: Disable breakpoint signal tests for powerpc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@redhat.com>
commit 598762cf91532e6e86dd21199b5e7f803df73f49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/598762cf.failed

The following tests are failing on powerpc:

  # perf test break
  18: Breakpoint overflow signal handler  : FAILED!
  19: Breakpoint overflow sampling        : FAILED!

The powerpc kenel so far does not have support to even create
instruction breakpoints using the perf event interface, so those tests
fail early in the config phase.

I added a '->is_supported()' callback to test struct to be able to
disable specific tests. It seems better than putting ifdefs directly to
the test array.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/20170601205450.GA398@krava
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 598762cf91532e6e86dd21199b5e7f803df73f49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/tests.h
diff --cc tools/perf/tests/tests.h
index cda0d2d339ef,577363809c9b..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -27,6 -29,12 +27,15 @@@ enum 
  struct test {
  	const char *desc;
  	int (*func)(int subtest);
++<<<<<<< HEAD
++=======
+ 	struct {
+ 		bool skip_if_fail;
+ 		int (*get_nr)(void);
+ 		const char *(*get_desc)(int subtest);
+ 	} subtest;
+ 	bool (*is_supported)(void);
++>>>>>>> 598762cf9153 (perf test: Disable breakpoint signal tests for powerpc)
  };
  
  /* Tests */
@@@ -75,7 -91,17 +84,9 @@@ int test__event_update(int subtest)
  int test__event_times(int subtest);
  int test__backward_ring_buffer(int subtest);
  int test__cpu_map_print(int subtest);
 -int test__sdt_event(int subtest);
 -int test__is_printable_array(int subtest);
 -int test__bitmap_print(int subtest);
 -int test__perf_hooks(int subtest);
 -int test__clang(int subtest);
 -const char *test__clang_subtest_get_desc(int subtest);
 -int test__clang_subtest_get_nr(void);
 -int test__unit_number__scnprint(int subtest);
  
+ bool test__bp_signal_is_supported(void);
+ 
  #if defined(__arm__) || defined(__aarch64__)
  #ifdef HAVE_DWARF_UNWIND_SUPPORT
  struct thread;
diff --git a/tools/perf/tests/bp_signal.c b/tools/perf/tests/bp_signal.c
index e7664fe3bd33..8ba2c4618fe9 100644
--- a/tools/perf/tests/bp_signal.c
+++ b/tools/perf/tests/bp_signal.c
@@ -288,3 +288,17 @@ int test__bp_signal(int subtest __maybe_unused)
 	return count1 == 1 && overflows == 3 && count2 == 3 && overflows_2 == 3 && count3 == 2 ?
 		TEST_OK : TEST_FAIL;
 }
+
+bool test__bp_signal_is_supported(void)
+{
+/*
+ * The powerpc so far does not have support to even create
+ * instruction breakpoint using the perf event interface.
+ * Once it's there we can release this.
+ */
+#ifdef __powerpc__
+	return false;
+#else
+	return true;
+#endif
+}
diff --git a/tools/perf/tests/builtin-test.c b/tools/perf/tests/builtin-test.c
index da4eec430844..25973272d324 100644
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@ -90,10 +90,12 @@ static struct test generic_tests[] = {
 	{
 		.desc = "Test breakpoint overflow signal handler",
 		.func = test__bp_signal,
+		.is_supported = test__bp_signal_is_supported,
 	},
 	{
 		.desc = "Test breakpoint overflow sampling",
 		.func = test__bp_signal_overflow,
+		.is_supported = test__bp_signal_is_supported,
 	},
 	{
 		.desc = "Test number of exit event of a simple workload",
@@ -309,6 +311,11 @@ static int __cmd_test(int argc, const char *argv[], struct intlist *skiplist)
 		if (!perf_test__matches(t, curr, argc, argv))
 			continue;
 
+		if (t->is_supported && !t->is_supported()) {
+			pr_debug("%2d: %-*s: Disabled\n", i, width, t->desc);
+			continue;
+		}
+
 		pr_info("%2d: %-*s:", i, width, t->desc);
 
 		if (intlist__find(skiplist, i)) {
* Unmerged path tools/perf/tests/tests.h
