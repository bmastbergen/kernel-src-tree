hung_task: allow hung_task_panic when hung_task_warnings is 0

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author John Siddle <jsiddle@redhat.com>
commit 48a6d64edadbd40fa5185a890023e9b331d64a48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/48a6d64e.failed

Previously hung_task_panic would not be respected if enabled after
hung_task_warnings had already been decremented to 0.

Permit the kernel to panic if hung_task_panic is enabled after
hung_task_warnings has already been decremented to 0 and another task
hangs for hung_task_timeout_secs seconds.

Check if hung_task_panic is enabled so we don't return prematurely, and
check if hung_task_warnings is non-zero so we don't print the warning
unnecessarily.

[akpm@linux-foundation.org: fix off-by-one]
Link: http://lkml.kernel.org/r/1473450214-4049-1-git-send-email-jsiddle@redhat.com
	Signed-off-by: John Siddle <jsiddle@redhat.com>
	Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 48a6d64edadbd40fa5185a890023e9b331d64a48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/hung_task.c
diff --cc kernel/hung_task.c
index 7630a4bd2bcf,2b59c82cc3e1..000000000000
--- a/kernel/hung_task.c
+++ b/kernel/hung_task.c
@@@ -95,20 -98,26 +95,39 @@@ static void check_hung_task(struct task
  
  	trace_sched_process_hang(t);
  
- 	if (!sysctl_hung_task_warnings)
+ 	if (!sysctl_hung_task_warnings && !sysctl_hung_task_panic)
  		return;
++<<<<<<< HEAD
 +	sysctl_hung_task_warnings--;
++=======
++>>>>>>> 48a6d64edadb (hung_task: allow hung_task_panic when hung_task_warnings is 0)
  
  	/*
  	 * Ok, the task did not get scheduled for more than 2 minutes,
  	 * complain:
  	 */
++<<<<<<< HEAD
 +	printk(KERN_ERR "INFO: task %s:%d blocked for more than "
 +			"%ld seconds.\n", t->comm, t->pid, timeout);
 +	printk(KERN_ERR "\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\""
 +			" disables this message.\n");
 +	sched_show_task(t);
 +	debug_show_held_locks(t);
++=======
+ 	if (sysctl_hung_task_warnings) {
+ 		sysctl_hung_task_warnings--;
+ 		pr_err("INFO: task %s:%d blocked for more than %ld seconds.\n",
+ 			t->comm, t->pid, timeout);
+ 		pr_err("      %s %s %.*s\n",
+ 			print_tainted(), init_utsname()->release,
+ 			(int)strcspn(init_utsname()->version, " "),
+ 			init_utsname()->version);
+ 		pr_err("\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\""
+ 			" disables this message.\n");
+ 		sched_show_task(t);
+ 		debug_show_all_locks();
+ 	}
++>>>>>>> 48a6d64edadb (hung_task: allow hung_task_panic when hung_task_warnings is 0)
  
  	touch_nmi_watchdog();
  
* Unmerged path kernel/hung_task.c
