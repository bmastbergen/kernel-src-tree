RDS: add t_mp_capable bit to be set by MP capable transports

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sowmini Varadhan <sowmini.varadhan@oracle.com>
commit 7e8f4413d7861efcb332ebce8d9b000a17eaa0e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7e8f4413.failed

The t_mp_capable bit will be used in the core rds module
to support multipathing logic when the transport supports it.

	Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7e8f4413d7861efcb332ebce8d9b000a17eaa0e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/rds.h
diff --cc net/rds/rds.h
index 14cbd8c88729,28f001cbc893..000000000000
--- a/net/rds/rds.h
+++ b/net/rds/rds.h
@@@ -654,25 -668,53 +655,63 @@@ void __rds_conn_error(struct rds_connec
  static inline int
  rds_conn_transition(struct rds_connection *conn, int old, int new)
  {
++<<<<<<< HEAD
 +	return atomic_cmpxchg(&conn->c_state, old, new) == old;
++=======
+ 	WARN_ON(conn->c_trans->t_mp_capable);
+ 	return rds_conn_path_transition(&conn->c_path[0], old, new);
+ }
+ 
+ static inline int
+ rds_conn_path_state(struct rds_conn_path *cp)
+ {
+ 	return atomic_read(&cp->cp_state);
++>>>>>>> 7e8f4413d786 (RDS: add t_mp_capable bit to be set by MP capable transports)
  }
  
  static inline int
  rds_conn_state(struct rds_connection *conn)
  {
++<<<<<<< HEAD
 +	return atomic_read(&conn->c_state);
++=======
+ 	WARN_ON(conn->c_trans->t_mp_capable);
+ 	return rds_conn_path_state(&conn->c_path[0]);
+ }
+ 
+ static inline int
+ rds_conn_path_up(struct rds_conn_path *cp)
+ {
+ 	return atomic_read(&cp->cp_state) == RDS_CONN_UP;
++>>>>>>> 7e8f4413d786 (RDS: add t_mp_capable bit to be set by MP capable transports)
  }
  
  static inline int
  rds_conn_up(struct rds_connection *conn)
  {
++<<<<<<< HEAD
 +	return atomic_read(&conn->c_state) == RDS_CONN_UP;
++=======
+ 	WARN_ON(conn->c_trans->t_mp_capable);
+ 	return rds_conn_path_up(&conn->c_path[0]);
+ }
+ 
+ static inline int
+ rds_conn_path_connecting(struct rds_conn_path *cp)
+ {
+ 	return atomic_read(&cp->cp_state) == RDS_CONN_CONNECTING;
++>>>>>>> 7e8f4413d786 (RDS: add t_mp_capable bit to be set by MP capable transports)
  }
  
  static inline int
  rds_conn_connecting(struct rds_connection *conn)
  {
++<<<<<<< HEAD
 +	return atomic_read(&conn->c_state) == RDS_CONN_CONNECTING;
++=======
+ 	WARN_ON(conn->c_trans->t_mp_capable);
+ 	return rds_conn_path_connecting(&conn->c_path[0]);
++>>>>>>> 7e8f4413d786 (RDS: add t_mp_capable bit to be set by MP capable transports)
  }
  
  /* message.c */
* Unmerged path net/rds/rds.h
