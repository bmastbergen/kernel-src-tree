HID: wacom: untie leds from inputs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: untie leds from inputs (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 92.06%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 85d2c77b78acf6c30d6d4f7263fb5d30fec1f5c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/85d2c77b.failed

Like remotes, LEDs should be handled by themself, not magically behind
the inputs as they have a complete different life.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 85d2c77b78acf6c30d6d4f7263fb5d30fec1f5c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index e75b5002a526,af2801df14ed..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1095,74 -1056,439 +1095,189 @@@ static int wacom_battery_get_property(s
  	return ret;
  }
  
 -static int wacom_ac_get_property(struct power_supply *psy,
 -				enum power_supply_property psp,
 -				union power_supply_propval *val)
 -{
 -	struct wacom *wacom = power_supply_get_drvdata(psy);
 -	int ret = 0;
 -
 -	switch (psp) {
 -	case POWER_SUPPLY_PROP_PRESENT:
 -		/* fall through */
 -	case POWER_SUPPLY_PROP_ONLINE:
 -		val->intval = wacom->wacom_wac.ps_connected;
 -		break;
 -	case POWER_SUPPLY_PROP_SCOPE:
 -		val->intval = POWER_SUPPLY_SCOPE_DEVICE;
 -		break;
 -	default:
 -		ret = -EINVAL;
 -		break;
 -	}
 -	return ret;
 -}
 -
  static int wacom_initialize_battery(struct wacom *wacom)
 -{
 -	static atomic_t battery_no = ATOMIC_INIT(0);
 -	struct power_supply_config psy_cfg = { .drv_data = wacom, };
 -	unsigned long n;
 -
 -	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) {
 -		struct power_supply_desc *bat_desc = &wacom->battery_desc;
 -		struct power_supply_desc *ac_desc = &wacom->ac_desc;
 -		n = atomic_inc_return(&battery_no) - 1;
 -
 -		bat_desc->properties = wacom_battery_props;
 -		bat_desc->num_properties = ARRAY_SIZE(wacom_battery_props);
 -		bat_desc->get_property = wacom_battery_get_property;
 -		sprintf(wacom->wacom_wac.bat_name, "wacom_battery_%ld", n);
 -		bat_desc->name = wacom->wacom_wac.bat_name;
 -		bat_desc->type = POWER_SUPPLY_TYPE_BATTERY;
 -		bat_desc->use_for_apm = 0;
 -
 -		ac_desc->properties = wacom_ac_props;
 -		ac_desc->num_properties = ARRAY_SIZE(wacom_ac_props);
 -		ac_desc->get_property = wacom_ac_get_property;
 -		sprintf(wacom->wacom_wac.ac_name, "wacom_ac_%ld", n);
 -		ac_desc->name = wacom->wacom_wac.ac_name;
 -		ac_desc->type = POWER_SUPPLY_TYPE_MAINS;
 -		ac_desc->use_for_apm = 0;
 -
 -		wacom->battery = power_supply_register(&wacom->hdev->dev,
 -					      &wacom->battery_desc, &psy_cfg);
 -		if (IS_ERR(wacom->battery))
 -			return PTR_ERR(wacom->battery);
 -
 -		power_supply_powers(wacom->battery, &wacom->hdev->dev);
 -
 -		wacom->ac = power_supply_register(&wacom->hdev->dev,
 -						  &wacom->ac_desc,
 -						  &psy_cfg);
 -		if (IS_ERR(wacom->ac)) {
 -			power_supply_unregister(wacom->battery);
 -			return PTR_ERR(wacom->ac);
 -		}
 -
 -		power_supply_powers(wacom->ac, &wacom->hdev->dev);
 -	}
 -
 -	return 0;
 -}
 -
 -static void wacom_destroy_battery(struct wacom *wacom)
 -{
 -	if (wacom->battery) {
 -		power_supply_unregister(wacom->battery);
 -		wacom->battery = NULL;
 -		power_supply_unregister(wacom->ac);
 -		wacom->ac = NULL;
 -	}
 -}
 -
 -static ssize_t wacom_show_speed(struct device *dev,
 -				struct device_attribute
 -				*attr, char *buf)
 -{
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -
 -	return snprintf(buf, PAGE_SIZE, "%i\n", wacom->wacom_wac.bt_high_speed);
 -}
 -
 -static ssize_t wacom_store_speed(struct device *dev,
 -				struct device_attribute *attr,
 -				const char *buf, size_t count)
 -{
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	u8 new_speed;
 -
 -	if (kstrtou8(buf, 0, &new_speed))
 -		return -EINVAL;
 -
 -	if (new_speed != 0 && new_speed != 1)
 -		return -EINVAL;
 -
 -	wacom_bt_query_tablet_data(hdev, new_speed, &wacom->wacom_wac.features);
 -
 -	return count;
 -}
 -
 -static DEVICE_ATTR(speed, DEV_ATTR_RW_PERM,
 -		wacom_show_speed, wacom_store_speed);
 -
 -
 -static ssize_t wacom_show_remote_mode(struct kobject *kobj,
 -				      struct kobj_attribute *kattr,
 -				      char *buf, int index)
 -{
 -	struct device *dev = kobj_to_dev(kobj->parent);
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	u8 mode;
 -
 -	mode = wacom->led.select[index];
 -	if (mode >= 0 && mode < 3)
 -		return snprintf(buf, PAGE_SIZE, "%d\n", mode);
 -	else
 -		return snprintf(buf, PAGE_SIZE, "%d\n", -1);
 -}
 -
 -#define DEVICE_EKR_ATTR_GROUP(SET_ID)					\
 -static ssize_t wacom_show_remote##SET_ID##_mode(struct kobject *kobj,	\
 -			       struct kobj_attribute *kattr, char *buf)	\
 -{									\
 -	return wacom_show_remote_mode(kobj, kattr, buf, SET_ID);	\
 -}									\
 -static struct kobj_attribute remote##SET_ID##_mode_attr = {		\
 -	.attr = {.name = "remote_mode",					\
 -		.mode = DEV_ATTR_RO_PERM},				\
 -	.show = wacom_show_remote##SET_ID##_mode,			\
 -};									\
 -static struct attribute *remote##SET_ID##_serial_attrs[] = {		\
 -	&remote##SET_ID##_mode_attr.attr,				\
 -	NULL								\
 -};									\
 -static struct attribute_group remote##SET_ID##_serial_group = {		\
 -	.name = NULL,							\
 -	.attrs = remote##SET_ID##_serial_attrs,				\
 -}
 -
 -DEVICE_EKR_ATTR_GROUP(0);
 -DEVICE_EKR_ATTR_GROUP(1);
 -DEVICE_EKR_ATTR_GROUP(2);
 -DEVICE_EKR_ATTR_GROUP(3);
 -DEVICE_EKR_ATTR_GROUP(4);
 -
 -int wacom_remote_create_attr_group(struct wacom *wacom, __u32 serial, int index)
  {
  	int error = 0;
 -	char *buf;
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -
 -	wacom_wac->serial[index] = serial;
  
 -	buf = kzalloc(WAC_REMOTE_SERIAL_MAX_STRLEN, GFP_KERNEL);
 -	if (!buf)
 -		return -ENOMEM;
 -	snprintf(buf, WAC_REMOTE_SERIAL_MAX_STRLEN, "%d", serial);
 -	wacom->remote_group[index].name = buf;
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR) {
 +		wacom->battery.properties = wacom_battery_props;
 +		wacom->battery.num_properties = ARRAY_SIZE(wacom_battery_props);
 +		wacom->battery.get_property = wacom_battery_get_property;
 +		wacom->battery.name = "wacom_battery";
 +		wacom->battery.type = POWER_SUPPLY_TYPE_BATTERY;
 +		wacom->battery.use_for_apm = 0;
  
 -	error = sysfs_create_group(wacom->remote_dir,
 -				   &wacom->remote_group[index]);
 -	if (error) {
 -		hid_err(wacom->hdev,
 -			"cannot create sysfs group err: %d\n", error);
 -		kobject_put(wacom->remote_dir);
 -		return error;
 -	}
 +		error = power_supply_register(&wacom->usbdev->dev,
 +					      &wacom->battery);
  
 -	return 0;
 -}
 -
 -void wacom_remote_destroy_attr_group(struct wacom *wacom, __u32 serial)
 -{
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	int i;
 -
 -	if (!serial)
 -		return;
 -
 -	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
 -		if (wacom_wac->serial[i] == serial) {
 -			wacom_wac->serial[i] = 0;
 -			wacom->led.select[i] = WACOM_STATUS_UNKNOWN;
 -			if (wacom->remote_group[i].name) {
 -				sysfs_remove_group(wacom->remote_dir,
 -						   &wacom->remote_group[i]);
 -				kfree(wacom->remote_group[i].name);
 -				wacom->remote_group[i].name = NULL;
 -			}
 -		}
 +		if (!error)
 +			power_supply_powers(&wacom->battery,
 +					    &wacom->usbdev->dev);
  	}
 -}
 -
 -static int wacom_cmd_unpair_remote(struct wacom *wacom, unsigned char selector)
 -{
 -	const size_t buf_size = 2;
 -	unsigned char *buf;
 -	int retval;
 -
 -	buf = kzalloc(buf_size, GFP_KERNEL);
 -	if (!buf)
 -		return -ENOMEM;
  
 -	buf[0] = WAC_CMD_DELETE_PAIRING;
 -	buf[1] = selector;
 -
 -	retval = wacom_set_report(wacom->hdev, HID_OUTPUT_REPORT, buf,
 -				  buf_size, WAC_CMD_RETRIES);
 -	kfree(buf);
 -
 -	return retval;
 -}
 -
 -static ssize_t wacom_store_unpair_remote(struct kobject *kobj,
 -					 struct kobj_attribute *attr,
 -					 const char *buf, size_t count)
 -{
 -	unsigned char selector = 0;
 -	struct device *dev = kobj_to_dev(kobj->parent);
 -	struct hid_device *hdev = to_hid_device(dev);
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	int err;
 -
 -	if (!strncmp(buf, "*\n", 2)) {
 -		selector = WAC_CMD_UNPAIR_ALL;
 -	} else {
 -		hid_info(wacom->hdev, "remote: unrecognized unpair code: %s\n",
 -			 buf);
 -		return -1;
 -	}
 -
 -	mutex_lock(&wacom->lock);
 -
 -	err = wacom_cmd_unpair_remote(wacom, selector);
 -	mutex_unlock(&wacom->lock);
 -
 -	return err < 0 ? err : count;
 +	return error;
  }
  
 -static struct kobj_attribute unpair_remote_attr = {
 -	.attr = {.name = "unpair_remote", .mode = 0200},
 -	.store = wacom_store_unpair_remote,
 -};
 -
 -static const struct attribute *remote_unpair_attrs[] = {
 -	&unpair_remote_attr.attr,
 -	NULL
 -};
 -
 -static int wacom_initialize_remote(struct wacom *wacom)
 +static void wacom_destroy_battery(struct wacom *wacom)
  {
 -	int error = 0;
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -	int i;
 -
 -	if (wacom->wacom_wac.features.type != REMOTE)
 -		return 0;
 -
 -	wacom->remote_group[0] = remote0_serial_group;
 -	wacom->remote_group[1] = remote1_serial_group;
 -	wacom->remote_group[2] = remote2_serial_group;
 -	wacom->remote_group[3] = remote3_serial_group;
 -	wacom->remote_group[4] = remote4_serial_group;
 -
 -	wacom->remote_dir = kobject_create_and_add("wacom_remote",
 -						   &wacom->hdev->dev.kobj);
 -	if (!wacom->remote_dir)
 -		return -ENOMEM;
 -
 -	error = sysfs_create_files(wacom->remote_dir, remote_unpair_attrs);
 -
 -	if (error) {
 -		hid_err(wacom->hdev,
 -			"cannot create sysfs group err: %d\n", error);
 -		return error;
 -	}
 -
 -	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
 -		wacom->led.select[i] = WACOM_STATUS_UNKNOWN;
 -		wacom_wac->serial[i] = 0;
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR &&
 +	    wacom->battery.dev) {
 +		power_supply_unregister(&wacom->battery);
 +		wacom->battery.dev = NULL;
  	}
 -
 -	return 0;
  }
  
 -static struct input_dev *wacom_allocate_input(struct wacom *wacom)
 +static int wacom_register_input(struct wacom *wacom)
  {
  	struct input_dev *input_dev;
 -	struct hid_device *hdev = wacom->hdev;
 +	struct usb_interface *intf = wacom->intf;
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 +	int error;
  
  	input_dev = input_allocate_device();
 -	if (!input_dev)
 -		return NULL;
 +	if (!input_dev) {
 +		error = -ENOMEM;
 +		goto fail1;
 +	}
  
 -	input_dev->name = wacom_wac->features.name;
 -	input_dev->phys = hdev->phys;
 -	input_dev->dev.parent = &hdev->dev;
 +	input_dev->name = wacom_wac->name;
 +	input_dev->dev.parent = &intf->dev;
  	input_dev->open = wacom_open;
  	input_dev->close = wacom_close;
 -	input_dev->uniq = hdev->uniq;
 -	input_dev->id.bustype = hdev->bus;
 -	input_dev->id.vendor  = hdev->vendor;
 -	input_dev->id.product = wacom_wac->pid ? wacom_wac->pid : hdev->product;
 -	input_dev->id.version = hdev->version;
 +	usb_to_input_id(dev, &input_dev->id);
  	input_set_drvdata(input_dev, wacom);
  
 -	return input_dev;
 -}
 +	wacom_wac->input = input_dev;
 +	error = wacom_setup_input_capabilities(input_dev, wacom_wac);
 +	if (error)
 +		goto fail1;
  
++<<<<<<< HEAD
 +	error = input_register_device(input_dev);
 +	if (error)
 +		goto fail2;
 +
 +	return 0;
 +
 +fail2:
 +	input_free_device(input_dev);
 +	wacom_wac->input = NULL;
 +fail1:
++=======
+ static void wacom_clean_inputs(struct wacom *wacom)
+ {
+ 	if (wacom->wacom_wac.pen_input) {
+ 		if (wacom->wacom_wac.pen_registered)
+ 			input_unregister_device(wacom->wacom_wac.pen_input);
+ 		else
+ 			input_free_device(wacom->wacom_wac.pen_input);
+ 	}
+ 	if (wacom->wacom_wac.touch_input) {
+ 		if (wacom->wacom_wac.touch_registered)
+ 			input_unregister_device(wacom->wacom_wac.touch_input);
+ 		else
+ 			input_free_device(wacom->wacom_wac.touch_input);
+ 	}
+ 	if (wacom->wacom_wac.pad_input) {
+ 		if (wacom->wacom_wac.pad_registered)
+ 			input_unregister_device(wacom->wacom_wac.pad_input);
+ 		else
+ 			input_free_device(wacom->wacom_wac.pad_input);
+ 	}
+ 	wacom->wacom_wac.pen_input = NULL;
+ 	wacom->wacom_wac.touch_input = NULL;
+ 	wacom->wacom_wac.pad_input = NULL;
+ 	wacom->wacom_wac.pen_registered = false;
+ 	wacom->wacom_wac.touch_registered = false;
+ 	wacom->wacom_wac.pad_registered = false;
+ }
+ 
+ static int wacom_allocate_inputs(struct wacom *wacom)
+ {
+ 	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
+ 
+ 	wacom_wac->pen_input = wacom_allocate_input(wacom);
+ 	wacom_wac->touch_input = wacom_allocate_input(wacom);
+ 	wacom_wac->pad_input = wacom_allocate_input(wacom);
+ 	if (!wacom_wac->pen_input || !wacom_wac->touch_input || !wacom_wac->pad_input) {
+ 		wacom_clean_inputs(wacom);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	wacom_wac->pen_input->name = wacom_wac->pen_name;
+ 	wacom_wac->touch_input->name = wacom_wac->touch_name;
+ 	wacom_wac->pad_input->name = wacom_wac->pad_name;
+ 
+ 	return 0;
+ }
+ 
+ static int wacom_register_inputs(struct wacom *wacom)
+ {
+ 	struct input_dev *pen_input_dev, *touch_input_dev, *pad_input_dev;
+ 	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
+ 	int error = 0;
+ 
+ 	pen_input_dev = wacom_wac->pen_input;
+ 	touch_input_dev = wacom_wac->touch_input;
+ 	pad_input_dev = wacom_wac->pad_input;
+ 
+ 	if (!pen_input_dev || !touch_input_dev || !pad_input_dev)
+ 		return -EINVAL;
+ 
+ 	error = wacom_setup_pen_input_capabilities(pen_input_dev, wacom_wac);
+ 	if (error) {
+ 		/* no pen in use on this interface */
+ 		input_free_device(pen_input_dev);
+ 		wacom_wac->pen_input = NULL;
+ 		pen_input_dev = NULL;
+ 	} else {
+ 		error = input_register_device(pen_input_dev);
+ 		if (error)
+ 			goto fail_register_pen_input;
+ 		wacom_wac->pen_registered = true;
+ 	}
+ 
+ 	error = wacom_setup_touch_input_capabilities(touch_input_dev, wacom_wac);
+ 	if (error) {
+ 		/* no touch in use on this interface */
+ 		input_free_device(touch_input_dev);
+ 		wacom_wac->touch_input = NULL;
+ 		touch_input_dev = NULL;
+ 	} else {
+ 		error = input_register_device(touch_input_dev);
+ 		if (error)
+ 			goto fail_register_touch_input;
+ 		wacom_wac->touch_registered = true;
+ 	}
+ 
+ 	error = wacom_setup_pad_input_capabilities(pad_input_dev, wacom_wac);
+ 	if (error) {
+ 		/* no pad in use on this interface */
+ 		input_free_device(pad_input_dev);
+ 		wacom_wac->pad_input = NULL;
+ 		pad_input_dev = NULL;
+ 	} else {
+ 		error = input_register_device(pad_input_dev);
+ 		if (error)
+ 			goto fail_register_pad_input;
+ 		wacom_wac->pad_registered = true;
+ 	}
+ 
+ 	return 0;
+ 
+ fail_register_pad_input:
+ 	if (touch_input_dev)
+ 		input_unregister_device(touch_input_dev);
+ 	wacom_wac->touch_input = NULL;
+ 	wacom_wac->touch_registered = false;
+ fail_register_touch_input:
+ 	if (pen_input_dev)
+ 		input_unregister_device(pen_input_dev);
+ 	wacom_wac->pen_input = NULL;
+ 	wacom_wac->pen_registered = false;
+ fail_register_pen_input:
++>>>>>>> 85d2c77b78ac (HID: wacom: untie leds from inputs)
  	return error;
  }
  
@@@ -1293,10 -1525,317 +1408,321 @@@ static void wacom_calculate_res(struct 
  						    features->unitExpo);
  }
  
 -void wacom_battery_work(struct work_struct *work)
 +static int wacom_probe(struct usb_interface *intf, const struct usb_device_id *id)
  {
++<<<<<<< HEAD
++=======
+ 	struct wacom *wacom = container_of(work, struct wacom, work);
+ 
+ 	if ((wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
+ 	     !wacom->battery) {
+ 		wacom_initialize_battery(wacom);
+ 	}
+ 	else if (!(wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
+ 		 wacom->battery) {
+ 		wacom_destroy_battery(wacom);
+ 	}
+ }
+ 
+ static size_t wacom_compute_pktlen(struct hid_device *hdev)
+ {
+ 	struct hid_report_enum *report_enum;
+ 	struct hid_report *report;
+ 	size_t size = 0;
+ 
+ 	report_enum = hdev->report_enum + HID_INPUT_REPORT;
+ 
+ 	list_for_each_entry(report, &report_enum->report_list, list) {
+ 		size_t report_size = hid_report_len(report);
+ 		if (report_size > size)
+ 			size = report_size;
+ 	}
+ 
+ 	return size;
+ }
+ 
+ static void wacom_update_name(struct wacom *wacom, const char *suffix)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	char name[WACOM_NAME_MAX];
+ 
+ 	/* Generic devices name unspecified */
+ 	if ((features->type == HID_GENERIC) && !strcmp("Wacom HID", features->name)) {
+ 		if (strstr(wacom->hdev->name, "Wacom") ||
+ 		    strstr(wacom->hdev->name, "wacom") ||
+ 		    strstr(wacom->hdev->name, "WACOM")) {
+ 			/* name is in HID descriptor, use it */
+ 			strlcpy(name, wacom->hdev->name, sizeof(name));
+ 
+ 			/* strip out excess whitespaces */
+ 			while (1) {
+ 				char *gap = strstr(name, "  ");
+ 				if (gap == NULL)
+ 					break;
+ 				/* shift everything including the terminator */
+ 				memmove(gap, gap+1, strlen(gap));
+ 			}
+ 			/* get rid of trailing whitespace */
+ 			if (name[strlen(name)-1] == ' ')
+ 				name[strlen(name)-1] = '\0';
+ 		} else {
+ 			/* no meaningful name retrieved. use product ID */
+ 			snprintf(name, sizeof(name),
+ 				 "%s %X", features->name, wacom->hdev->product);
+ 		}
+ 	} else {
+ 		strlcpy(name, features->name, sizeof(name));
+ 	}
+ 
+ 	/* Append the device type to the name */
+ 	snprintf(wacom_wac->pen_name, sizeof(wacom_wac->pen_name),
+ 		"%s%s Pen", name, suffix);
+ 	snprintf(wacom_wac->touch_name, sizeof(wacom_wac->touch_name),
+ 		"%s%s Finger", name, suffix);
+ 	snprintf(wacom_wac->pad_name, sizeof(wacom_wac->pad_name),
+ 		"%s%s Pad", name, suffix);
+ }
+ 
+ static int wacom_parse_and_register(struct wacom *wacom, bool wireless)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	struct hid_device *hdev = wacom->hdev;
+ 	int error;
+ 	unsigned int connect_mask = HID_CONNECT_HIDRAW;
+ 
+ 	features->pktlen = wacom_compute_pktlen(hdev);
+ 	if (features->pktlen > WACOM_PKGLEN_MAX)
+ 		return -EINVAL;
+ 
+ 	error = wacom_allocate_inputs(wacom);
+ 	if (error)
+ 		return error;
+ 
+ 	/*
+ 	 * Bamboo Pad has a generic hid handling for the Pen, and we switch it
+ 	 * into debug mode for the touch part.
+ 	 * We ignore the other interfaces.
+ 	 */
+ 	if (features->type == BAMBOO_PAD) {
+ 		if (features->pktlen == WACOM_PKGLEN_PENABLED) {
+ 			features->type = HID_GENERIC;
+ 		} else if ((features->pktlen != WACOM_PKGLEN_BPAD_TOUCH) &&
+ 			   (features->pktlen != WACOM_PKGLEN_BPAD_TOUCH_USB)) {
+ 			error = -ENODEV;
+ 			goto fail_allocate_inputs;
+ 		}
+ 	}
+ 
+ 	/* set the default size in case we do not get them from hid */
+ 	wacom_set_default_phy(features);
+ 
+ 	/* Retrieve the physical and logical size for touch devices */
+ 	wacom_retrieve_hid_descriptor(hdev, features);
+ 	wacom_setup_device_quirks(wacom);
+ 
+ 	if (features->device_type == WACOM_DEVICETYPE_NONE &&
+ 	    features->type != WIRELESS) {
+ 		error = features->type == HID_GENERIC ? -ENODEV : 0;
+ 
+ 		dev_warn(&hdev->dev, "Unknown device_type for '%s'. %s.",
+ 			 hdev->name,
+ 			 error ? "Ignoring" : "Assuming pen");
+ 
+ 		if (error)
+ 			goto fail_parsed;
+ 
+ 		features->device_type |= WACOM_DEVICETYPE_PEN;
+ 	}
+ 
+ 	wacom_calculate_res(features);
+ 
+ 	wacom_update_name(wacom, wireless ? " (WL)" : "");
+ 
+ 	error = wacom_add_shared_data(hdev);
+ 	if (error)
+ 		goto fail_shared_data;
+ 
+ 	if (!(features->device_type & WACOM_DEVICETYPE_WL_MONITOR) &&
+ 	     (features->quirks & WACOM_QUIRK_BATTERY)) {
+ 		error = wacom_initialize_battery(wacom);
+ 		if (error)
+ 			goto fail_battery;
+ 	}
+ 
+ 	error = wacom_register_inputs(wacom);
+ 	if (error)
+ 		goto fail_register_inputs;
+ 
+ 	if (wacom->wacom_wac.features.device_type & WACOM_DEVICETYPE_PAD) {
+ 		error = wacom_initialize_leds(wacom);
+ 		if (error)
+ 			goto fail_leds;
+ 
+ 		error = wacom_initialize_remote(wacom);
+ 		if (error)
+ 			goto fail_remote;
+ 	}
+ 
+ 	if (features->type == HID_GENERIC)
+ 		connect_mask |= HID_CONNECT_DRIVER;
+ 
+ 	/* Regular HID work starts now */
+ 	error = hid_hw_start(hdev, connect_mask);
+ 	if (error) {
+ 		hid_err(hdev, "hw start failed\n");
+ 		goto fail_hw_start;
+ 	}
+ 
+ 	if (!wireless) {
+ 		/* Note that if query fails it is not a hard failure */
+ 		wacom_query_tablet_data(hdev, features);
+ 	}
+ 
+ 	/* touch only Bamboo doesn't support pen */
+ 	if ((features->type == BAMBOO_TOUCH) &&
+ 	    (features->device_type & WACOM_DEVICETYPE_PEN)) {
+ 		error = -ENODEV;
+ 		goto fail_quirks;
+ 	}
+ 
+ 	/* pen only Bamboo neither support touch nor pad */
+ 	if ((features->type == BAMBOO_PEN) &&
+ 	    ((features->device_type & WACOM_DEVICETYPE_TOUCH) ||
+ 	    (features->device_type & WACOM_DEVICETYPE_PAD))) {
+ 		error = -ENODEV;
+ 		goto fail_quirks;
+ 	}
+ 
+ 	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
+ 		error = hid_hw_open(hdev);
+ 
+ 	if ((wacom_wac->features.type == INTUOSHT ||
+ 	     wacom_wac->features.type == INTUOSHT2) &&
+ 	    (wacom_wac->features.device_type & WACOM_DEVICETYPE_TOUCH)) {
+ 		wacom_wac->shared->type = wacom_wac->features.type;
+ 		wacom_wac->shared->touch_input = wacom_wac->touch_input;
+ 	}
+ 
+ 	return 0;
+ 
+ fail_quirks:
+ 	hid_hw_stop(hdev);
+ fail_hw_start:
+ 	kobject_put(wacom->remote_dir);
+ fail_remote:
+ 	wacom_destroy_leds(wacom);
+ fail_leds:
+ 	wacom_clean_inputs(wacom);
+ fail_register_inputs:
+ 	wacom_destroy_battery(wacom);
+ fail_battery:
+ 	wacom_remove_shared_data(wacom);
+ fail_shared_data:
+ fail_parsed:
+ fail_allocate_inputs:
+ 	wacom_clean_inputs(wacom);
+ 	return error;
+ }
+ 
+ static void wacom_wireless_work(struct work_struct *work)
+ {
+ 	struct wacom *wacom = container_of(work, struct wacom, work);
+ 	struct usb_device *usbdev = wacom->usbdev;
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct hid_device *hdev1, *hdev2;
+ 	struct wacom *wacom1, *wacom2;
+ 	struct wacom_wac *wacom_wac1, *wacom_wac2;
+ 	int error;
+ 
+ 	/*
+ 	 * Regardless if this is a disconnect or a new tablet,
+ 	 * remove any existing input and battery devices.
+ 	 */
+ 
+ 	wacom_destroy_battery(wacom);
+ 
+ 	/* Stylus interface */
+ 	hdev1 = usb_get_intfdata(usbdev->config->interface[1]);
+ 	wacom1 = hid_get_drvdata(hdev1);
+ 	wacom_wac1 = &(wacom1->wacom_wac);
+ 	wacom_destroy_leds(wacom1);
+ 	wacom_clean_inputs(wacom1);
+ 
+ 	/* Touch interface */
+ 	hdev2 = usb_get_intfdata(usbdev->config->interface[2]);
+ 	wacom2 = hid_get_drvdata(hdev2);
+ 	wacom_wac2 = &(wacom2->wacom_wac);
+ 	wacom_destroy_leds(wacom2);
+ 	wacom_clean_inputs(wacom2);
+ 
+ 	if (wacom_wac->pid == 0) {
+ 		hid_info(wacom->hdev, "wireless tablet disconnected\n");
+ 		wacom_wac1->shared->type = 0;
+ 	} else {
+ 		const struct hid_device_id *id = wacom_ids;
+ 
+ 		hid_info(wacom->hdev, "wireless tablet connected with PID %x\n",
+ 			 wacom_wac->pid);
+ 
+ 		while (id->bus) {
+ 			if (id->vendor == USB_VENDOR_ID_WACOM &&
+ 			    id->product == wacom_wac->pid)
+ 				break;
+ 			id++;
+ 		}
+ 
+ 		if (!id->bus) {
+ 			hid_info(wacom->hdev, "ignoring unknown PID.\n");
+ 			return;
+ 		}
+ 
+ 		/* Stylus interface */
+ 		wacom_wac1->features =
+ 			*((struct wacom_features *)id->driver_data);
+ 
+ 		wacom_wac1->pid = wacom_wac->pid;
+ 		hid_hw_stop(hdev1);
+ 		error = wacom_parse_and_register(wacom1, true);
+ 		if (error)
+ 			goto fail;
+ 
+ 		/* Touch interface */
+ 		if (wacom_wac1->features.touch_max ||
+ 		    (wacom_wac1->features.type >= INTUOSHT &&
+ 		    wacom_wac1->features.type <= BAMBOO_PT)) {
+ 			wacom_wac2->features =
+ 				*((struct wacom_features *)id->driver_data);
+ 			wacom_wac2->pid = wacom_wac->pid;
+ 			hid_hw_stop(hdev2);
+ 			error = wacom_parse_and_register(wacom2, true);
+ 			if (error)
+ 				goto fail;
+ 		}
+ 
+ 		error = wacom_initialize_battery(wacom);
+ 		if (error)
+ 			goto fail;
+ 	}
+ 
+ 	return;
+ 
+ fail:
+ 	wacom_destroy_leds(wacom1);
+ 	wacom_clean_inputs(wacom1);
+ 	wacom_destroy_leds(wacom2);
+ 	wacom_clean_inputs(wacom2);
+ 	return;
+ }
+ 
+ static int wacom_probe(struct hid_device *hdev,
+ 		const struct hid_device_id *id)
+ {
+ 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
++>>>>>>> 85d2c77b78ac (HID: wacom: untie leds from inputs)
  	struct usb_device *dev = interface_to_usbdev(intf);
 +	struct usb_endpoint_descriptor *endpoint;
  	struct wacom *wacom;
  	struct wacom_wac *wacom_wac;
  	struct wacom_features *features;
@@@ -1435,22 -1901,27 +1861,30 @@@
  	return error;
  }
  
 -static void wacom_remove(struct hid_device *hdev)
 +static void wacom_disconnect(struct usb_interface *intf)
  {
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	struct wacom_features *features = &wacom_wac->features;
 -
 -	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
 -		hid_hw_close(hdev);
 +	struct wacom *wacom = usb_get_intfdata(intf);
  
 -	hid_hw_stop(hdev);
 +	usb_set_intfdata(intf, NULL);
  
 +	usb_kill_urb(wacom->irq);
  	cancel_work_sync(&wacom->work);
++<<<<<<< HEAD
 +	if (wacom->wacom_wac.input)
 +		input_unregister_device(wacom->wacom_wac.input);
++=======
+ 	kobject_put(wacom->remote_dir);
+ 	wacom_destroy_leds(wacom);
+ 	wacom_clean_inputs(wacom);
+ 	if (hdev->bus == BUS_BLUETOOTH)
+ 		device_remove_file(&hdev->dev, &dev_attr_speed);
++>>>>>>> 85d2c77b78ac (HID: wacom: untie leds from inputs)
  	wacom_destroy_battery(wacom);
 -	wacom_remove_shared_data(wacom);
 -
 -	hid_set_drvdata(hdev, NULL);
 +	wacom_destroy_leds(wacom);
 +	usb_free_urb(wacom->irq);
 +	usb_free_coherent(interface_to_usbdev(intf), WACOM_PKGLEN_MAX,
 +			wacom->wacom_wac.data, wacom->data_dma);
 +	wacom_remove_shared_data(&wacom->wacom_wac);
  	kfree(wacom);
  }
  
* Unmerged path drivers/hid/wacom_sys.c
