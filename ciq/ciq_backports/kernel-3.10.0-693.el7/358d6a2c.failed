toshiba_acpi: Do not register vendor backlight when acpi_video bl is available

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Hans de Goede <hdegoede@redhat.com>
commit 358d6a2c3ecae2b22c7d7e61f9d5672557446dfb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/358d6a2c.failed

commit a39f46df33c6 ("toshiba_acpi: Fix regression caused by backlight extra
check code") causes the backlight to no longer work on the Toshiba Z30,
reverting that commit fixes this but restores the original issue fixed
by that commit.

Looking at the toshiba_acpi backlight code for a fix for this I noticed that
the toshiba code is the only code under platform/x86 which unconditionally
registers a vendor acpi backlight interface, without checking for acpi_video
backlight support first.

This commit adds the necessary checks bringing toshiba_acpi in line with the
other drivers, and fixing the Z30 regression without needing to revert the
commit causing it.

Chances are that there will be some Toshiba models which have a non working
acpi-video implementation while the toshiba vendor backlight interface does
work, this commit adds an empty dmi_id table where such systems can be added,
this is identical to how other drivers handle such systems.

BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1206036
BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=86521
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
Reviewed-and-tested-by: Azael Avalos <coproscefalo@gmail.com>
	Signed-off-by: Darren Hart <dvhart@linux.intel.com>
(cherry picked from commit 358d6a2c3ecae2b22c7d7e61f9d5672557446dfb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/Kconfig
#	drivers/platform/x86/toshiba_acpi.c
diff --cc drivers/platform/x86/Kconfig
index 8882b9d2c899,f9f205cb1f11..000000000000
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@@ -612,6 -613,8 +612,11 @@@ config ACPI_TOSHIB
  	depends on BACKLIGHT_CLASS_DEVICE
  	depends on INPUT
  	depends on RFKILL || RFKILL = n
++<<<<<<< HEAD
++=======
+ 	depends on SERIO_I8042 || SERIO_I8042 = n
+ 	depends on ACPI_VIDEO || ACPI_VIDEO = n
++>>>>>>> 358d6a2c3eca (toshiba_acpi: Do not register vendor backlight when acpi_video bl is available)
  	select INPUT_POLLDEV
  	select INPUT_SPARSEKMAP
  	---help---
diff --cc drivers/platform/x86/toshiba_acpi.c
index 94b323f42daa,9956b9902bb4..000000000000
--- a/drivers/platform/x86/toshiba_acpi.c
+++ b/drivers/platform/x86/toshiba_acpi.c
@@@ -54,10 -48,10 +54,17 @@@
  #include <linux/slab.h>
  #include <linux/workqueue.h>
  #include <linux/i8042.h>
++<<<<<<< HEAD
 +
 +#include <asm/uaccess.h>
 +
 +#include <acpi/acpi_drivers.h>
++=======
+ #include <linux/acpi.h>
+ #include <linux/dmi.h>
+ #include <linux/uaccess.h>
+ #include <acpi/video.h>
++>>>>>>> 358d6a2c3eca (toshiba_acpi: Do not register vendor backlight when acpi_video bl is available)
  
  MODULE_AUTHOR("John Belmonte");
  MODULE_DESCRIPTION("Toshiba Laptop ACPI Extras Driver");
@@@ -178,10 -251,33 +185,37 @@@ static const struct key_entry toshiba_a
  	{ KE_END, 0 },
  };
  
++<<<<<<< HEAD
 +/* utility
++=======
+ static const struct key_entry toshiba_acpi_alt_keymap[] = {
+ 	{ KE_KEY, 0x157, { KEY_MUTE } },
+ 	{ KE_KEY, 0x102, { KEY_ZOOMOUT } },
+ 	{ KE_KEY, 0x103, { KEY_ZOOMIN } },
+ 	{ KE_KEY, 0x12c, { KEY_KBDILLUMTOGGLE } },
+ 	{ KE_KEY, 0x139, { KEY_ZOOMRESET } },
+ 	{ KE_KEY, 0x13e, { KEY_SWITCHVIDEOMODE } },
+ 	{ KE_KEY, 0x13c, { KEY_BRIGHTNESSDOWN } },
+ 	{ KE_KEY, 0x13d, { KEY_BRIGHTNESSUP } },
+ 	{ KE_KEY, 0x158, { KEY_WLAN } },
+ 	{ KE_KEY, 0x13f, { KEY_TOUCHPAD_TOGGLE } },
+ 	{ KE_END, 0 },
+ };
+ 
+ /*
+  * List of models which have a broken acpi-video backlight interface and thus
+  * need to use the toshiba (vendor) interface instead.
+  */
+ static const struct dmi_system_id toshiba_vendor_backlight_dmi[] = {
+ 	{}
+ };
+ 
+ /*
+  * Utility
++>>>>>>> 358d6a2c3eca (toshiba_acpi: Do not register vendor backlight when acpi_video bl is available)
   */
  
 -static inline void _set_bit(u32 *word, u32 mask, int value)
 +static __inline__ void _set_bit(u32 * word, u32 mask, int value)
  {
  	*word = (*word & ~mask) | (mask * value);
  }
* Unmerged path drivers/platform/x86/Kconfig
* Unmerged path drivers/platform/x86/toshiba_acpi.c
