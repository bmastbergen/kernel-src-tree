bridge: implement rtnl_link_ops->changelink

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit 13323516172178ff8184855ee4bc66d46fd89619
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/13323516.failed

Allow rtnetlink users to set bridge master info via IFLA_INFO_DATA attr
This initial part implements forward_delay, hello_time, max_age options.

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 13323516172178ff8184855ee4bc66d46fd89619)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_netlink.c
diff --cc net/bridge/br_netlink.c
index f3eb671f2eb9,7c97a261afae..000000000000
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@@ -587,6 -447,79 +587,82 @@@ static int br_validate(struct nlattr *t
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int br_dev_newlink(struct net *src_net, struct net_device *dev,
+ 			  struct nlattr *tb[], struct nlattr *data[])
+ {
+ 	struct net_bridge *br = netdev_priv(dev);
+ 
+ 	if (tb[IFLA_ADDRESS]) {
+ 		spin_lock_bh(&br->lock);
+ 		br_stp_change_bridge_id(br, nla_data(tb[IFLA_ADDRESS]));
+ 		spin_unlock_bh(&br->lock);
+ 	}
+ 
+ 	return register_netdevice(dev);
+ }
+ 
+ static int br_port_slave_changelink(struct net_device *brdev,
+ 				    struct net_device *dev,
+ 				    struct nlattr *tb[],
+ 				    struct nlattr *data[])
+ {
+ 	if (!data)
+ 		return 0;
+ 	return br_setport(br_port_get_rtnl(dev), data);
+ }
+ 
+ static int br_port_fill_slave_info(struct sk_buff *skb,
+ 				   const struct net_device *brdev,
+ 				   const struct net_device *dev)
+ {
+ 	return br_port_fill_attrs(skb, br_port_get_rtnl(dev));
+ }
+ 
+ static size_t br_port_get_slave_size(const struct net_device *brdev,
+ 				     const struct net_device *dev)
+ {
+ 	return br_port_info_size();
+ }
+ 
+ static const struct nla_policy br_policy[IFLA_BR_MAX + 1] = {
+ 	[IFLA_BR_FORWARD_DELAY]	= { .type = NLA_U32 },
+ 	[IFLA_BR_HELLO_TIME]	= { .type = NLA_U32 },
+ 	[IFLA_BR_MAX_AGE]	= { .type = NLA_U32 },
+ };
+ 
+ static int br_changelink(struct net_device *brdev, struct nlattr *tb[],
+ 			 struct nlattr *data[])
+ {
+ 	struct net_bridge *br = netdev_priv(brdev);
+ 	int err;
+ 
+ 	if (!data)
+ 		return 0;
+ 
+ 	if (data[IFLA_BR_FORWARD_DELAY]) {
+ 		err = br_set_forward_delay(br, nla_get_u32(data[IFLA_BR_FORWARD_DELAY]));
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	if (data[IFLA_BR_HELLO_TIME]) {
+ 		err = br_set_hello_time(br, nla_get_u32(data[IFLA_BR_HELLO_TIME]));
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	if (data[IFLA_BR_MAX_AGE]) {
+ 		err = br_set_max_age(br, nla_get_u32(data[IFLA_BR_MAX_AGE]));
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 133235161721 (bridge: implement rtnl_link_ops->changelink)
  static size_t br_get_size(const struct net_device *brdev)
  {
  	return nla_total_size(sizeof(u32)) +	/* IFLA_BR_FORWARD_DELAY  */
@@@ -648,14 -567,23 +724,34 @@@ static struct rtnl_af_ops br_af_ops = 
  };
  
  struct rtnl_link_ops br_link_ops __read_mostly = {
++<<<<<<< HEAD
 +	.kind		= "bridge",
 +	.priv_size	= sizeof(struct net_bridge),
 +	.setup		= br_dev_setup,
 +	.validate	= br_validate,
 +	.newlink	= br_dev_newlink,
 +	.dellink	= br_dev_delete,
 +	.get_size	= br_get_size,
 +	.fill_info	= br_fill_info,
++=======
+ 	.kind			= "bridge",
+ 	.priv_size		= sizeof(struct net_bridge),
+ 	.setup			= br_dev_setup,
+ 	.maxtype		= IFLA_BRPORT_MAX,
+ 	.policy			= br_policy,
+ 	.validate		= br_validate,
+ 	.newlink		= br_dev_newlink,
+ 	.changelink		= br_changelink,
+ 	.dellink		= br_dev_delete,
+ 	.get_size		= br_get_size,
+ 	.fill_info		= br_fill_info,
+ 
+ 	.slave_maxtype		= IFLA_BRPORT_MAX,
+ 	.slave_policy		= br_port_policy,
+ 	.slave_changelink	= br_port_slave_changelink,
+ 	.get_slave_size		= br_port_get_slave_size,
+ 	.fill_slave_info	= br_port_fill_slave_info,
++>>>>>>> 133235161721 (bridge: implement rtnl_link_ops->changelink)
  };
  
  int __init br_netlink_init(void)
* Unmerged path net/bridge/br_netlink.c
