bridge: vlan: Use correct flag name in comment

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit ddd611d3fffb90b967e50f5aa6d45d55eb0e1d3f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ddd611d3.failed

The flag used to indicate if a VLAN should be used for filtering - as
opposed to context only - on the bridge itself (e.g. br0) is called
'brentry' and not 'brvlan'.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ddd611d3fffb90b967e50f5aa6d45d55eb0e1d3f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_vlan.c
diff --cc net/bridge/br_vlan.c
index 1122c9d717ea,dc1a2da55d09..000000000000
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@@ -20,45 -46,168 +20,113 @@@ static void __vlan_delete_pvid(struct n
  		return;
  
  	smp_wmb();
 -	vg->pvid = 0;
 +	v->pvid = 0;
  }
  
 -static void __vlan_add_flags(struct net_bridge_vlan *v, u16 flags)
 +static void __vlan_add_flags(struct net_port_vlans *v, u16 vid, u16 flags)
  {
 -	struct net_bridge_vlan_group *vg;
 -
 -	if (br_vlan_is_master(v))
 -		vg = br_vlan_group(v->br);
 -	else
 -		vg = nbp_vlan_group(v->port);
 -
  	if (flags & BRIDGE_VLAN_INFO_PVID)
 -		__vlan_add_pvid(vg, v->vid);
 +		__vlan_add_pvid(v, vid);
  	else
 -		__vlan_delete_pvid(vg, v->vid);
 +		__vlan_delete_pvid(v, vid);
  
  	if (flags & BRIDGE_VLAN_INFO_UNTAGGED)
 -		v->flags |= BRIDGE_VLAN_INFO_UNTAGGED;
 -	else
 -		v->flags &= ~BRIDGE_VLAN_INFO_UNTAGGED;
 -}
 -
 -static int __vlan_vid_add(struct net_device *dev, struct net_bridge *br,
 -			  u16 vid, u16 flags)
 -{
 -	struct switchdev_obj_port_vlan v = {
 -		.obj.id = SWITCHDEV_OBJ_ID_PORT_VLAN,
 -		.flags = flags,
 -		.vid_begin = vid,
 -		.vid_end = vid,
 -	};
 -	int err;
 -
 -	/* Try switchdev op first. In case it is not supported, fallback to
 -	 * 8021q add.
 -	 */
 -	err = switchdev_port_obj_add(dev, &v.obj);
 -	if (err == -EOPNOTSUPP)
 -		return vlan_vid_add(dev, br->vlan_proto, vid);
 -	return err;
 -}
 -
 -static void __vlan_add_list(struct net_bridge_vlan *v)
 -{
 -	struct net_bridge_vlan_group *vg;
 -	struct list_head *headp, *hpos;
 -	struct net_bridge_vlan *vent;
 -
 -	if (br_vlan_is_master(v))
 -		vg = br_vlan_group(v->br);
 +		set_bit(vid, v->untagged_bitmap);
  	else
 -		vg = nbp_vlan_group(v->port);
 -
 -	headp = &vg->vlan_list;
 -	list_for_each_prev(hpos, headp) {
 -		vent = list_entry(hpos, struct net_bridge_vlan, vlist);
 -		if (v->vid < vent->vid)
 -			continue;
 -		else
 -			break;
 -	}
 -	list_add_rcu(&v->vlist, hpos);
 -}
 -
 -static void __vlan_del_list(struct net_bridge_vlan *v)
 -{
 -	list_del_rcu(&v->vlist);
 +		clear_bit(vid, v->untagged_bitmap);
  }
  
 -static int __vlan_vid_del(struct net_device *dev, struct net_bridge *br,
 -			  u16 vid)
 +static int __vlan_add(struct net_port_vlans *v, u16 vid, u16 flags)
  {
 -	struct switchdev_obj_port_vlan v = {
 -		.obj.id = SWITCHDEV_OBJ_ID_PORT_VLAN,
 -		.vid_begin = vid,
 -		.vid_end = vid,
 -	};
 +	struct net_bridge_port *p = NULL;
 +	struct net_bridge *br;
 +	struct net_device *dev;
  	int err;
  
 -	/* Try switchdev op first. In case it is not supported, fallback to
 -	 * 8021q del.
 -	 */
 -	err = switchdev_port_obj_del(dev, &v.obj);
 -	if (err == -EOPNOTSUPP) {
 -		vlan_vid_del(dev, br->vlan_proto, vid);
 +	if (test_bit(vid, v->vlan_bitmap)) {
 +		__vlan_add_flags(v, vid, flags);
  		return 0;
  	}
 -	return err;
 -}
  
++<<<<<<< HEAD
 +	if (v->port_idx) {
 +		p = v->parent.port;
++=======
+ /* Returns a master vlan, if it didn't exist it gets created. In all cases a
+  * a reference is taken to the master vlan before returning.
+  */
+ static struct net_bridge_vlan *br_vlan_get_master(struct net_bridge *br, u16 vid)
+ {
+ 	struct net_bridge_vlan_group *vg;
+ 	struct net_bridge_vlan *masterv;
+ 
+ 	vg = br_vlan_group(br);
+ 	masterv = br_vlan_find(vg, vid);
+ 	if (!masterv) {
+ 		/* missing global ctx, create it now */
+ 		if (br_vlan_add(br, vid, 0))
+ 			return NULL;
+ 		masterv = br_vlan_find(vg, vid);
+ 		if (WARN_ON(!masterv))
+ 			return NULL;
+ 	}
+ 	atomic_inc(&masterv->refcnt);
+ 
+ 	return masterv;
+ }
+ 
+ static void br_vlan_put_master(struct net_bridge_vlan *masterv)
+ {
+ 	struct net_bridge_vlan_group *vg;
+ 
+ 	if (!br_vlan_is_master(masterv))
+ 		return;
+ 
+ 	vg = br_vlan_group(masterv->br);
+ 	if (atomic_dec_and_test(&masterv->refcnt)) {
+ 		rhashtable_remove_fast(&vg->vlan_hash,
+ 				       &masterv->vnode, br_vlan_rht_params);
+ 		__vlan_del_list(masterv);
+ 		kfree_rcu(masterv, rcu);
+ 	}
+ }
+ 
+ /* This is the shared VLAN add function which works for both ports and bridge
+  * devices. There are four possible calls to this function in terms of the
+  * vlan entry type:
+  * 1. vlan is being added on a port (no master flags, global entry exists)
+  * 2. vlan is being added on a bridge (both master and brentry flags)
+  * 3. vlan is being added on a port, but a global entry didn't exist which
+  *    is being created right now (master flag set, brentry flag unset), the
+  *    global entry is used for global per-vlan features, but not for filtering
+  * 4. same as 3 but with both master and brentry flags set so the entry
+  *    will be used for filtering in both the port and the bridge
+  */
+ static int __vlan_add(struct net_bridge_vlan *v, u16 flags)
+ {
+ 	struct net_bridge_vlan *masterv = NULL;
+ 	struct net_bridge_port *p = NULL;
+ 	struct net_bridge_vlan_group *vg;
+ 	struct net_device *dev;
+ 	struct net_bridge *br;
+ 	int err;
+ 
+ 	if (br_vlan_is_master(v)) {
+ 		br = v->br;
+ 		dev = br->dev;
+ 		vg = br_vlan_group(br);
+ 	} else {
+ 		p = v->port;
++>>>>>>> ddd611d3fffb (bridge: vlan: Use correct flag name in comment)
  		br = p->br;
  		dev = p->dev;
 -		vg = nbp_vlan_group(p);
 +	} else {
 +		br = v->parent.br;
 +		dev = br->dev;
  	}
  
 -	if (p) {
 +	/* Toggle HW filters when filtering is enabled */
 +	if (p && p->br->vlan_enabled) {
  		/* Add VLAN to the device filter if it is supported.
  		 * This ensures tagged traffic enters the bridge when
  		 * promiscuous mode is disabled by br_manage_promisc().
* Unmerged path net/bridge/br_vlan.c
