ipmi: remove trydefaults parameter and default init

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tony Camuso <tcamuso@redhat.com>
commit b07b58a3e435a3d18004815e8364ec26c4236721
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b07b58a3.failed

Parameter trydefaults=1 causes the ipmi_init to initialize ipmi through
the legacy port io space that was designated for ipmi. Architectures
that do not map legacy port io can panic when trydefaults=1.

Rather than implement build-time conditional exceptions for each
architecture that does not map legacy port io, we have removed legacy
port io from the driver.

Parameter 'trydefaults' has been removed. Attempts to use it hereafter
will evoke the "Unknown symbol in module, or unknown parameter" message.

The patch was built against a number of architectures and tested for
regressions and functionality on x86_64 and ARM64.

	Signed-off-by: Tony Camuso <tcamuso@redhat.com>

Removed the config entry and the address source entry for default,
since neither were used any more.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
(cherry picked from commit b07b58a3e435a3d18004815e8364ec26c4236721)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/ipmi/ipmi_si_intf.c
diff --cc drivers/char/ipmi/ipmi_si_intf.c
index b9e7df418e5b,a112c0146012..000000000000
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@@ -3852,6 -3780,11 +3791,14 @@@ static int init_ipmi_si(void
  		spmi_find_bmc();
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_PARISC
+ 	register_parisc_driver(&ipmi_parisc_driver);
+ 	parisc_registered = true;
+ #endif
+ 
++>>>>>>> b07b58a3e435 (ipmi: remove trydefaults parameter and default init)
  	/* We prefer devices with interrupts, but in the case of a machine
  	   with multiple BMCs we assume that there will be several instances
  	   of a given type so if we succeed in registering a type then also
diff --git a/drivers/char/ipmi/Kconfig b/drivers/char/ipmi/Kconfig
index bd1242082e6f..65fd8279c621 100644
--- a/drivers/char/ipmi/Kconfig
+++ b/drivers/char/ipmi/Kconfig
@@ -50,18 +50,6 @@ config IPMI_SI
 	 Currently, only KCS and SMIC are supported.  If
 	 you are using IPMI, you should probably say "y" here.
 
-config IPMI_SI_PROBE_DEFAULTS
-       bool 'Probe for all possible IPMI system interfaces by default'
-       default n
-       depends on IPMI_SI
-       help
-	 Modern systems will usually expose IPMI interfaces via a discoverable
-	 firmware mechanism such as ACPI or DMI. Older systems do not, and so
-	 the driver is forced to probe hardware manually. This may cause boot
-	 delays. Say "n" here to disable this manual probing. IPMI will then
-	 only be available on older systems if the "ipmi_si_intf.trydefaults=1"
-	 boot argument is passed.
-
 config IPMI_SSIF
        tristate 'IPMI SMBus handler (SSIF)'
        select I2C
diff --git a/drivers/char/ipmi/ipmi_msghandler.c b/drivers/char/ipmi/ipmi_msghandler.c
index 1112aad82361..fe492e224445 100644
--- a/drivers/char/ipmi/ipmi_msghandler.c
+++ b/drivers/char/ipmi/ipmi_msghandler.c
@@ -488,12 +488,12 @@ static DEFINE_MUTEX(smi_watchers_mutex);
 
 static const char * const addr_src_to_str[] = {
 	"invalid", "hotmod", "hardcoded", "SPMI", "ACPI", "SMBIOS", "PCI",
-	"device-tree", "default"
+	"device-tree"
 };
 
 const char *ipmi_addr_src_to_str(enum ipmi_addr_src src)
 {
-	if (src > SI_DEFAULT)
+	if (src >= SI_LAST)
 		src = 0; /* Invalid */
 	return addr_src_to_str[src];
 }
* Unmerged path drivers/char/ipmi/ipmi_si_intf.c
diff --git a/include/linux/ipmi.h b/include/linux/ipmi.h
index f6d2dcba75f0..0f4297bcac50 100644
--- a/include/linux/ipmi.h
+++ b/include/linux/ipmi.h
@@ -276,7 +276,7 @@ int ipmi_validate_addr(struct ipmi_addr *addr, int len);
  */
 enum ipmi_addr_src {
 	SI_INVALID = 0, SI_HOTMOD, SI_HARDCODED, SI_SPMI, SI_ACPI, SI_SMBIOS,
-	SI_PCI,	SI_DEVICETREE, SI_DEFAULT
+	SI_PCI,	SI_DEVICETREE, SI_LAST
 };
 const char *ipmi_addr_src_to_str(enum ipmi_addr_src src);
 
