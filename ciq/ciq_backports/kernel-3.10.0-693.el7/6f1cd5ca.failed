nfp: add port layer to debugfs directories

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 6f1cd5ca359276508a2c55e638a4a2cc28f8e4ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6f1cd5ca.failed

PF driver will support multiple ports per PCI device, add port
number to DebugFS paths.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6f1cd5ca359276508a2c55e638a4a2cc28f8e4ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
index f7c9a5bc4aa3,6e9372a18375..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
@@@ -185,10 -202,10 +185,15 @@@ static const struct file_operations nfp
  	.llseek = seq_lseek
  };
  
- void nfp_net_debugfs_adapter_add(struct nfp_net *nn)
+ void nfp_net_debugfs_port_add(struct nfp_net *nn, struct dentry *ddir, int id)
  {
++<<<<<<< HEAD
 +	struct dentry *queues, *tx, *rx;
 +	char int_name[16];
++=======
+ 	struct dentry *queues, *tx, *rx, *xdp;
+ 	char name[20];
++>>>>>>> 6f1cd5ca3592 (nfp: add port layer to debugfs directories)
  	int i;
  
  	if (IS_ERR_OR_NULL(nfp_dir))
@@@ -205,18 -223,21 +211,32 @@@
  
  	rx = debugfs_create_dir("rx", queues);
  	tx = debugfs_create_dir("tx", queues);
 -	xdp = debugfs_create_dir("xdp", queues);
 -	if (IS_ERR_OR_NULL(rx) || IS_ERR_OR_NULL(tx) || IS_ERR_OR_NULL(xdp))
 +	if (IS_ERR_OR_NULL(rx) || IS_ERR_OR_NULL(tx))
  		return;
  
++<<<<<<< HEAD
 +	for (i = 0; i < nn->num_rx_rings; i++) {
 +		sprintf(int_name, "%d", i);
 +		debugfs_create_file(int_name, S_IRUSR, rx,
 +				    &nn->r_vecs[i], &nfp_rx_q_fops);
 +	}
 +
 +	for (i = 0; i < nn->num_tx_rings; i++) {
 +		sprintf(int_name, "%d", i);
 +		debugfs_create_file(int_name, S_IRUSR, tx,
++=======
+ 	for (i = 0; i < min(nn->max_rx_rings, nn->max_r_vecs); i++) {
+ 		sprintf(name, "%d", i);
+ 		debugfs_create_file(name, S_IRUSR, rx,
+ 				    &nn->r_vecs[i], &nfp_rx_q_fops);
+ 		debugfs_create_file(name, S_IRUSR, xdp,
+ 				    &nn->r_vecs[i], &nfp_xdp_q_fops);
+ 	}
+ 
+ 	for (i = 0; i < min(nn->max_tx_rings, nn->max_r_vecs); i++) {
+ 		sprintf(name, "%d", i);
+ 		debugfs_create_file(name, S_IRUSR, tx,
++>>>>>>> 6f1cd5ca3592 (nfp: add port layer to debugfs directories)
  				    &nn->r_vecs[i], &nfp_tx_q_fops);
  	}
  }
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net.h b/drivers/net/ethernet/netronome/nfp/nfp_net.h
index aecadca0b473..805fbc6081dd 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@ -739,8 +739,9 @@ int nfp_net_set_ring_size(struct nfp_net *nn, u32 rxd_cnt, u32 txd_cnt);
 #ifdef CONFIG_NFP_NET_DEBUG
 void nfp_net_debugfs_create(void);
 void nfp_net_debugfs_destroy(void);
-void nfp_net_debugfs_adapter_add(struct nfp_net *nn);
-void nfp_net_debugfs_adapter_del(struct nfp_net *nn);
+struct dentry *nfp_net_debugfs_device_add(struct pci_dev *pdev);
+void nfp_net_debugfs_port_add(struct nfp_net *nn, struct dentry *ddir, int id);
+void nfp_net_debugfs_dir_clean(struct dentry **dir);
 #else
 static inline void nfp_net_debugfs_create(void)
 {
@@ -750,11 +751,17 @@ static inline void nfp_net_debugfs_destroy(void)
 {
 }
 
-static inline void nfp_net_debugfs_adapter_add(struct nfp_net *nn)
+static inline struct dentry *nfp_net_debugfs_device_add(struct pci_dev *pdev)
 {
+	return NULL;
 }
 
-static inline void nfp_net_debugfs_adapter_del(struct nfp_net *nn)
+static inline void
+nfp_net_debugfs_port_add(struct nfp_net *nn, struct dentry *ddir, int id)
+{
+}
+
+static inline void nfp_net_debugfs_dir_clean(struct dentry **dir)
 {
 }
 #endif /* CONFIG_NFP_NET_DEBUG */
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c b/drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
index f7062cb648e1..a69c388514c1 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
@@ -85,6 +85,7 @@ static int nfp_netvf_pci_probe(struct pci_dev *pdev,
 	u32 tx_bar_sz, rx_bar_sz;
 	int tx_bar_no, rx_bar_no;
 	u8 __iomem *ctrl_bar;
+	struct dentry *ddir;
 	struct nfp_net *nn;
 	int is_nfp3200;
 	u32 startq;
@@ -289,7 +290,9 @@ static int nfp_netvf_pci_probe(struct pci_dev *pdev,
 	pci_set_drvdata(pdev, nn);
 
 	nfp_net_info(nn);
-	nfp_net_debugfs_adapter_add(nn);
+	ddir = nfp_net_debugfs_device_add(pdev);
+	nfp_net_debugfs_port_add(nn, ddir, 0);
+	nn->debugfs_dir = ddir;
 
 	return 0;
 
@@ -322,7 +325,7 @@ static void nfp_netvf_pci_remove(struct pci_dev *pdev)
 	/* Note, the order is slightly different from above as we need
 	 * to keep the nn pointer around till we have freed everything.
 	 */
-	nfp_net_debugfs_adapter_del(nn);
+	nfp_net_debugfs_dir_clean(&nn->debugfs_dir);
 
 	nfp_net_netdev_clean(nn->netdev);
 
