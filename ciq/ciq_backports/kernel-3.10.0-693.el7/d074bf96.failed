vxlan: correctly handle ipv6.disable module parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Benc <jbenc@redhat.com>
commit d074bf9600443403aa24fbc12c1f18eadc90f5aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d074bf96.failed

When IPv6 is compiled but disabled at runtime, __vxlan_sock_add returns
-EAFNOSUPPORT. For metadata based tunnels, this causes failure of the whole
operation of bringing up the tunnel.

Ignore failure of IPv6 socket creation for metadata based tunnels caused by
IPv6 not being available.

Fixes: b1be00a6c39f ("vxlan: support both IPv4 and IPv6 sockets in a single vxlan device")
	Signed-off-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d074bf9600443403aa24fbc12c1f18eadc90f5aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/vxlan.c
diff --cc drivers/net/vxlan.c
index 3b2c9ff3617e,84a86cbb31b9..000000000000
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@@ -2765,17 -2822,21 +2765,26 @@@ static int __vxlan_sock_add(struct vxla
  
  static int vxlan_sock_add(struct vxlan_dev *vxlan)
  {
- 	bool ipv6 = vxlan->flags & VXLAN_F_IPV6;
  	bool metadata = vxlan->flags & VXLAN_F_COLLECT_METADATA;
+ 	bool ipv6 = vxlan->flags & VXLAN_F_IPV6 || metadata;
+ 	bool ipv4 = !ipv6 || metadata;
  	int ret = 0;
  
 -	RCU_INIT_POINTER(vxlan->vn4_sock, NULL);
 +	vxlan->vn4_sock = NULL;
  #if IS_ENABLED(CONFIG_IPV6)
++<<<<<<< HEAD
 +	vxlan->vn6_sock = NULL;
 +	if (ipv6 || metadata)
++=======
+ 	RCU_INIT_POINTER(vxlan->vn6_sock, NULL);
+ 	if (ipv6) {
++>>>>>>> d074bf960044 (vxlan: correctly handle ipv6.disable module parameter)
  		ret = __vxlan_sock_add(vxlan, true);
+ 		if (ret < 0 && ret != -EAFNOSUPPORT)
+ 			ipv4 = false;
+ 	}
  #endif
- 	if (!ret && (!ipv6 || metadata))
+ 	if (ipv4)
  		ret = __vxlan_sock_add(vxlan, false);
  	if (ret < 0)
  		vxlan_sock_release(vxlan);
* Unmerged path drivers/net/vxlan.c
