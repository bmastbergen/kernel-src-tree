mm: optimize copy_page_to/from_iter_iovec

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [mm] filemap: optimize copy_page_to/from_iter_iovec (Mikulas Patocka) [1362715]
Rebuild_FUZZ: 91.95%
commit-author Mikulas Patocka <mpatocka@redhat.com>
commit 3fa6c507319c897598512da91c010a4ad2ed682c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3fa6c507.failed

copy_page_to_iter_iovec() and copy_page_from_iter_iovec() copy some data
to userspace or from userspace.  These functions have a fast path where
they map a page using kmap_atomic and a slow path where they use kmap.

kmap is slower than kmap_atomic, so the fast path is preferred.

However, on kernels without highmem support, kmap just calls
page_address, so there is no need to avoid kmap.  On kernels without
highmem support, the fast path just increases code size (and cache
footprint) and it doesn't improve copy performance in any way.

This patch enables the fast path only if CONFIG_HIGHMEM is defined.

Code size reduced by this patch:
  x86 (without highmem)	  928
  x86-64		  960
  sparc64		  848
  alpha			 1136
  pa-risc		 1200

[akpm@linux-foundation.org: use IS_ENABLED(), per Andi]
Link: http://lkml.kernel.org/r/alpine.LRH.2.02.1607221711410.4818@file01.intranet.prod.int.rdu2.redhat.com
	Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Andi Kleen <andi@firstfloor.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 3fa6c507319c897598512da91c010a4ad2ed682c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/iov_iter.c
* Unmerged path lib/iov_iter.c
* Unmerged path lib/iov_iter.c
