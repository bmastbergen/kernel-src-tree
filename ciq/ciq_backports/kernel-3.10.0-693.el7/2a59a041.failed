pNFS: Fix pnfs_set_layout_stateid() to clear NFS_LAYOUT_INVALID_STID

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 2a59a0411671ef9daf17ba21da57809c696f4119
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2a59a041.failed

If the layout was marked as invalid, we want to ensure to initialise
the layout header fields correctly.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 2a59a0411671ef9daf17ba21da57809c696f4119)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/pnfs.c
diff --cc fs/nfs/pnfs.c
index a16b5b780136,cd8b5fca33f6..000000000000
--- a/fs/nfs/pnfs.c
+++ b/fs/nfs/pnfs.c
@@@ -733,13 -768,12 +733,22 @@@ pnfs_destroy_all_layouts(struct nfs_cli
  	pnfs_destroy_layouts_byclid(clp, false);
  }
  
++<<<<<<< HEAD
 +/*
 + * Compare 2 layout stateid sequence ids, to see which is newer,
 + * taking into account wraparound issues.
 + */
 +static bool pnfs_seqid_is_newer(u32 s1, u32 s2)
 +{
 +	return (s32)(s1 - s2) > 0;
++=======
+ static void
+ pnfs_clear_layoutreturn_info(struct pnfs_layout_hdr *lo)
+ {
+ 	lo->plh_return_iomode = 0;
+ 	lo->plh_return_seq = 0;
+ 	clear_bit(NFS_LAYOUT_RETURN_REQUESTED, &lo->plh_flags);
++>>>>>>> 2a59a0411671 (pNFS: Fix pnfs_set_layout_stateid() to clear NFS_LAYOUT_INVALID_STID)
  }
  
  /* update lo->plh_stateid with new if is more recent */
@@@ -1726,16 -1806,14 +1742,19 @@@ pnfs_layout_process(struct nfs4_layoutg
  		 * inode invalid, and don't bother validating the stateid
  		 * sequence number.
  		 */
 -		pnfs_mark_layout_stateid_invalid(lo, &free_me);
 +		pnfs_mark_matching_lsegs_invalid(lo, &free_me, NULL);
  
- 		nfs4_stateid_copy(&lo->plh_stateid, &res->stateid);
- 		lo->plh_barrier = be32_to_cpu(res->stateid.seqid);
+ 		pnfs_set_layout_stateid(lo, &res->stateid, true);
  	}
  
 +	clear_bit(NFS_LAYOUT_INVALID_STID, &lo->plh_flags);
 +
  	pnfs_get_lseg(lseg);
  	pnfs_layout_insert_lseg(lo, lseg, &free_me);
++<<<<<<< HEAD
++=======
+ 
++>>>>>>> 2a59a0411671 (pNFS: Fix pnfs_set_layout_stateid() to clear NFS_LAYOUT_INVALID_STID)
  
  	if (res->return_on_close)
  		set_bit(NFS_LSEG_ROC, &lseg->pls_flags);
* Unmerged path fs/nfs/pnfs.c
