netfilter: nf_tables: simplify the basic expressions' init routine

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Liping Zhang <zlpnobody@gmail.com>
commit 4e24877e61e8507c0843e4bddbc6ecccbfd2e87d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4e24877e.failed

Some basic expressions are built into nf_tables.ko, such as nft_cmp,
nft_lookup, nft_range and so on. But these basic expressions' init
routine is a little ugly, too many goto errX labels, and we forget
to call nft_range_module_exit in the exit routine, although it is
harmless.

Acctually, the init and exit routines of these basic expressions
are same, i.e. do nft_register_expr in the init routine and do
nft_unregister_expr in the exit routine.

So it's better to arrange them into an array and deal with them
together.

	Signed-off-by: Liping Zhang <zlpnobody@gmail.com>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 4e24877e61e8507c0843e4bddbc6ecccbfd2e87d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/nf_tables_core.h
#	net/netfilter/nf_tables_core.c
#	net/netfilter/nft_range.c
diff --cc include/net/netfilter/nf_tables_core.h
index e2f02f51c15b,862373d4ea9d..000000000000
--- a/include/net/netfilter/nf_tables_core.h
+++ b/include/net/netfilter/nf_tables_core.h
@@@ -25,21 -31,6 +31,24 @@@ static inline u32 nft_cmp_fast_mask(uns
  
  extern const struct nft_expr_ops nft_cmp_fast_ops;
  
++<<<<<<< HEAD
 +int nft_cmp_module_init(void);
 +void nft_cmp_module_exit(void);
 +
 +int nft_lookup_module_init(void);
 +void nft_lookup_module_exit(void);
 +
 +int nft_dynset_module_init(void);
 +void nft_dynset_module_exit(void);
 +
 +int nft_bitwise_module_init(void);
 +void nft_bitwise_module_exit(void);
 +
 +int nft_byteorder_module_init(void);
 +void nft_byteorder_module_exit(void);
 +
++=======
++>>>>>>> 4e24877e61e8 (netfilter: nf_tables: simplify the basic expressions' init routine)
  struct nft_payload {
  	enum nft_payload_bases	base:8;
  	u8			offset;
@@@ -57,9 -48,6 +66,6 @@@ struct nft_payload_set 
  };
  
  extern const struct nft_expr_ops nft_payload_fast_ops;
 -extern struct static_key_false nft_trace_enabled;
 +extern struct static_key nft_trace_enabled;
  
- int nft_payload_module_init(void);
- void nft_payload_module_exit(void);
- 
  #endif /* _NET_NF_TABLES_CORE_H */
diff --cc net/netfilter/nf_tables_core.c
index 2f710a8e9568,65dbeadcb118..000000000000
--- a/net/netfilter/nf_tables_core.c
+++ b/net/netfilter/nf_tables_core.c
@@@ -232,54 -232,32 +232,79 @@@ next_rule
  }
  EXPORT_SYMBOL_GPL(nft_do_chain);
  
+ static struct nft_expr_type *nft_basic_types[] = {
+ 	&nft_imm_type,
+ 	&nft_cmp_type,
+ 	&nft_lookup_type,
+ 	&nft_bitwise_type,
+ 	&nft_byteorder_type,
+ 	&nft_payload_type,
+ 	&nft_dynset_type,
+ 	&nft_range_type,
+ };
+ 
  int __init nf_tables_core_module_init(void)
  {
- 	int err;
+ 	int err, i;
  
++<<<<<<< HEAD
 +	err = nft_immediate_module_init();
 +	if (err < 0)
 +		goto err1;
 +
 +	err = nft_cmp_module_init();
 +	if (err < 0)
 +		goto err2;
 +
 +	err = nft_lookup_module_init();
 +	if (err < 0)
 +		goto err3;
 +
 +	err = nft_bitwise_module_init();
 +	if (err < 0)
 +		goto err4;
 +
 +	err = nft_byteorder_module_init();
 +	if (err < 0)
 +		goto err5;
 +
 +	err = nft_payload_module_init();
 +	if (err < 0)
 +		goto err6;
 +
 +	err = nft_dynset_module_init();
 +	if (err < 0)
 +		goto err7;
 +
 +	mark_tech_preview("nf_tables", THIS_MODULE);
 +	return 0;
 +
 +err7:
 +	nft_payload_module_exit();
 +err6:
 +	nft_byteorder_module_exit();
 +err5:
 +	nft_bitwise_module_exit();
 +err4:
 +	nft_lookup_module_exit();
 +err3:
 +	nft_cmp_module_exit();
 +err2:
 +	nft_immediate_module_exit();
 +err1:
++=======
+ 	for (i = 0; i < ARRAY_SIZE(nft_basic_types); i++) {
+ 		err = nft_register_expr(nft_basic_types[i]);
+ 		if (err)
+ 			goto err;
+ 	}
+ 
+ 	return 0;
+ 
+ err:
+ 	while (i-- > 0)
+ 		nft_unregister_expr(nft_basic_types[i]);
++>>>>>>> 4e24877e61e8 (netfilter: nf_tables: simplify the basic expressions' init routine)
  	return err;
  }
  
* Unmerged path net/netfilter/nft_range.c
* Unmerged path include/net/netfilter/nf_tables_core.h
* Unmerged path net/netfilter/nf_tables_core.c
diff --git a/net/netfilter/nft_bitwise.c b/net/netfilter/nft_bitwise.c
index 31c15ed2e5fc..877d9acd91ef 100644
--- a/net/netfilter/nft_bitwise.c
+++ b/net/netfilter/nft_bitwise.c
@@ -121,7 +121,6 @@ nla_put_failure:
 	return -1;
 }
 
-static struct nft_expr_type nft_bitwise_type;
 static const struct nft_expr_ops nft_bitwise_ops = {
 	.type		= &nft_bitwise_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_bitwise)),
@@ -130,20 +129,10 @@ static const struct nft_expr_ops nft_bitwise_ops = {
 	.dump		= nft_bitwise_dump,
 };
 
-static struct nft_expr_type nft_bitwise_type __read_mostly = {
+struct nft_expr_type nft_bitwise_type __read_mostly = {
 	.name		= "bitwise",
 	.ops		= &nft_bitwise_ops,
 	.policy		= nft_bitwise_policy,
 	.maxattr	= NFTA_BITWISE_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_bitwise_module_init(void)
-{
-	return nft_register_expr(&nft_bitwise_type);
-}
-
-void nft_bitwise_module_exit(void)
-{
-	nft_unregister_expr(&nft_bitwise_type);
-}
diff --git a/net/netfilter/nft_byteorder.c b/net/netfilter/nft_byteorder.c
index ee63d981268d..13d4e421a6b3 100644
--- a/net/netfilter/nft_byteorder.c
+++ b/net/netfilter/nft_byteorder.c
@@ -169,7 +169,6 @@ nla_put_failure:
 	return -1;
 }
 
-static struct nft_expr_type nft_byteorder_type;
 static const struct nft_expr_ops nft_byteorder_ops = {
 	.type		= &nft_byteorder_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_byteorder)),
@@ -178,20 +177,10 @@ static const struct nft_expr_ops nft_byteorder_ops = {
 	.dump		= nft_byteorder_dump,
 };
 
-static struct nft_expr_type nft_byteorder_type __read_mostly = {
+struct nft_expr_type nft_byteorder_type __read_mostly = {
 	.name		= "byteorder",
 	.ops		= &nft_byteorder_ops,
 	.policy		= nft_byteorder_policy,
 	.maxattr	= NFTA_BYTEORDER_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_byteorder_module_init(void)
-{
-	return nft_register_expr(&nft_byteorder_type);
-}
-
-void nft_byteorder_module_exit(void)
-{
-	nft_unregister_expr(&nft_byteorder_type);
-}
diff --git a/net/netfilter/nft_cmp.c b/net/netfilter/nft_cmp.c
index e25b35d70e4d..2b96effeadc1 100644
--- a/net/netfilter/nft_cmp.c
+++ b/net/netfilter/nft_cmp.c
@@ -107,7 +107,6 @@ nla_put_failure:
 	return -1;
 }
 
-static struct nft_expr_type nft_cmp_type;
 static const struct nft_expr_ops nft_cmp_ops = {
 	.type		= &nft_cmp_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_cmp_expr)),
@@ -208,20 +207,10 @@ nft_cmp_select_ops(const struct nft_ctx *ctx, const struct nlattr * const tb[])
 		return &nft_cmp_ops;
 }
 
-static struct nft_expr_type nft_cmp_type __read_mostly = {
+struct nft_expr_type nft_cmp_type __read_mostly = {
 	.name		= "cmp",
 	.select_ops	= nft_cmp_select_ops,
 	.policy		= nft_cmp_policy,
 	.maxattr	= NFTA_CMP_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_cmp_module_init(void)
-{
-	return nft_register_expr(&nft_cmp_type);
-}
-
-void nft_cmp_module_exit(void)
-{
-	nft_unregister_expr(&nft_cmp_type);
-}
diff --git a/net/netfilter/nft_dynset.c b/net/netfilter/nft_dynset.c
index 9dec3bd1b63c..c4b841bc97b4 100644
--- a/net/netfilter/nft_dynset.c
+++ b/net/netfilter/nft_dynset.c
@@ -237,7 +237,6 @@ nla_put_failure:
 	return -1;
 }
 
-static struct nft_expr_type nft_dynset_type;
 static const struct nft_expr_ops nft_dynset_ops = {
 	.type		= &nft_dynset_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_dynset)),
@@ -247,20 +246,10 @@ static const struct nft_expr_ops nft_dynset_ops = {
 	.dump		= nft_dynset_dump,
 };
 
-static struct nft_expr_type nft_dynset_type __read_mostly = {
+struct nft_expr_type nft_dynset_type __read_mostly = {
 	.name		= "dynset",
 	.ops		= &nft_dynset_ops,
 	.policy		= nft_dynset_policy,
 	.maxattr	= NFTA_DYNSET_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_dynset_module_init(void)
-{
-	return nft_register_expr(&nft_dynset_type);
-}
-
-void nft_dynset_module_exit(void)
-{
-	nft_unregister_expr(&nft_dynset_type);
-}
diff --git a/net/netfilter/nft_immediate.c b/net/netfilter/nft_immediate.c
index 4528adea7ede..728baf88295a 100644
--- a/net/netfilter/nft_immediate.c
+++ b/net/netfilter/nft_immediate.c
@@ -102,7 +102,6 @@ static int nft_immediate_validate(const struct nft_ctx *ctx,
 	return 0;
 }
 
-static struct nft_expr_type nft_imm_type;
 static const struct nft_expr_ops nft_imm_ops = {
 	.type		= &nft_imm_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_immediate_expr)),
@@ -113,20 +112,10 @@ static const struct nft_expr_ops nft_imm_ops = {
 	.validate	= nft_immediate_validate,
 };
 
-static struct nft_expr_type nft_imm_type __read_mostly = {
+struct nft_expr_type nft_imm_type __read_mostly = {
 	.name		= "immediate",
 	.ops		= &nft_imm_ops,
 	.policy		= nft_immediate_policy,
 	.maxattr	= NFTA_IMMEDIATE_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_immediate_module_init(void)
-{
-	return nft_register_expr(&nft_imm_type);
-}
-
-void nft_immediate_module_exit(void)
-{
-	nft_unregister_expr(&nft_imm_type);
-}
diff --git a/net/netfilter/nft_lookup.c b/net/netfilter/nft_lookup.c
index b3c31ef8015d..9d71b81a2d91 100644
--- a/net/netfilter/nft_lookup.c
+++ b/net/netfilter/nft_lookup.c
@@ -126,7 +126,6 @@ nla_put_failure:
 	return -1;
 }
 
-static struct nft_expr_type nft_lookup_type;
 static const struct nft_expr_ops nft_lookup_ops = {
 	.type		= &nft_lookup_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_lookup)),
@@ -136,20 +135,10 @@ static const struct nft_expr_ops nft_lookup_ops = {
 	.dump		= nft_lookup_dump,
 };
 
-static struct nft_expr_type nft_lookup_type __read_mostly = {
+struct nft_expr_type nft_lookup_type __read_mostly = {
 	.name		= "lookup",
 	.ops		= &nft_lookup_ops,
 	.policy		= nft_lookup_policy,
 	.maxattr	= NFTA_LOOKUP_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_lookup_module_init(void)
-{
-	return nft_register_expr(&nft_lookup_type);
-}
-
-void nft_lookup_module_exit(void)
-{
-	nft_unregister_expr(&nft_lookup_type);
-}
diff --git a/net/netfilter/nft_payload.c b/net/netfilter/nft_payload.c
index 12cd4bf16d17..f8f5037e2423 100644
--- a/net/netfilter/nft_payload.c
+++ b/net/netfilter/nft_payload.c
@@ -146,7 +146,6 @@ nla_put_failure:
 	return -1;
 }
 
-static struct nft_expr_type nft_payload_type;
 static const struct nft_expr_ops nft_payload_ops = {
 	.type		= &nft_payload_type,
 	.size		= NFT_EXPR_SIZE(sizeof(struct nft_payload)),
@@ -316,20 +315,10 @@ nft_payload_select_ops(const struct nft_ctx *ctx,
 		return &nft_payload_ops;
 }
 
-static struct nft_expr_type nft_payload_type __read_mostly = {
+struct nft_expr_type nft_payload_type __read_mostly = {
 	.name		= "payload",
 	.select_ops	= nft_payload_select_ops,
 	.policy		= nft_payload_policy,
 	.maxattr	= NFTA_PAYLOAD_MAX,
 	.owner		= THIS_MODULE,
 };
-
-int __init nft_payload_module_init(void)
-{
-	return nft_register_expr(&nft_payload_type);
-}
-
-void nft_payload_module_exit(void)
-{
-	nft_unregister_expr(&nft_payload_type);
-}
* Unmerged path net/netfilter/nft_range.c
