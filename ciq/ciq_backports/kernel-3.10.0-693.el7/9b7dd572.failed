blk-mq: Remove blk_mq_cancel_requeue_work()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Bart Van Assche <bart.vanassche@sandisk.com>
commit 9b7dd572cc439fa92e120290eb74d0295567c5a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9b7dd572.failed

Since blk_mq_requeue_work() no longer restarts stopped queues
canceling requeue work is no longer needed to prevent that a
stopped queue would be restarted. Hence remove this function.

	Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Cc: Mike Snitzer <snitzer@redhat.com>
	Cc: Keith Busch <keith.busch@intel.com>
	Cc: Hannes Reinecke <hare@suse.com>
	Cc: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 9b7dd572cc439fa92e120290eb74d0295567c5a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 1fb8b36f35c6,a461823644fb..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -511,17 -526,19 +511,20 @@@ void blk_mq_add_to_requeue_list(struct 
  }
  EXPORT_SYMBOL(blk_mq_add_to_requeue_list);
  
 -void blk_mq_kick_requeue_list(struct request_queue *q)
++<<<<<<< HEAD
 +void blk_mq_cancel_requeue_work(struct request_queue *q)
  {
 -	kblockd_schedule_delayed_work(&q->requeue_work, 0);
 +	cancel_work_sync(&q->requeue_work);
  }
 -EXPORT_SYMBOL(blk_mq_kick_requeue_list);
 +EXPORT_SYMBOL_GPL(blk_mq_cancel_requeue_work);
  
 -void blk_mq_delay_kick_requeue_list(struct request_queue *q,
 -				    unsigned long msecs)
++=======
++>>>>>>> 9b7dd572cc43 (blk-mq: Remove blk_mq_cancel_requeue_work())
 +void blk_mq_kick_requeue_list(struct request_queue *q)
  {
 -	kblockd_schedule_delayed_work(&q->requeue_work,
 -				      msecs_to_jiffies(msecs));
 +	kblockd_schedule_work(&q->requeue_work);
  }
 -EXPORT_SYMBOL(blk_mq_delay_kick_requeue_list);
 +EXPORT_SYMBOL(blk_mq_kick_requeue_list);
  
  void blk_mq_abort_requeue_list(struct request_queue *q)
  {
* Unmerged path block/blk-mq.c
diff --git a/drivers/md/dm-rq.c b/drivers/md/dm-rq.c
index 63a5735de609..aedba33419b6 100644
--- a/drivers/md/dm-rq.c
+++ b/drivers/md/dm-rq.c
@@ -116,8 +116,6 @@ static void dm_mq_stop_queue(struct request_queue *q)
 	queue_flag_set(QUEUE_FLAG_STOPPED, q);
 	spin_unlock_irqrestore(q->queue_lock, flags);
 
-	/* Avoid that requeuing could restart the queue. */
-	blk_mq_cancel_requeue_work(q);
 	blk_mq_stop_hw_queues(q);
 }
 
diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index b10275d9cb61..13551b8a327e 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -1530,7 +1530,6 @@ void nvme_stop_queues(struct nvme_ctrl *ctrl)
 		queue_flag_set(QUEUE_FLAG_STOPPED, ns->queue);
 		spin_unlock_irq(ns->queue->queue_lock);
 
-		blk_mq_cancel_requeue_work(ns->queue);
 		blk_mq_stop_hw_queues(ns->queue);
 	}
 	rcu_read_unlock();
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 0e7b0244ac77..fdbfecbe44ca 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -253,7 +253,6 @@ void __blk_mq_end_request(struct request *rq, int error);
 
 void blk_mq_requeue_request(struct request *rq);
 void blk_mq_add_to_requeue_list(struct request *rq, bool at_head);
-void blk_mq_cancel_requeue_work(struct request_queue *q);
 void blk_mq_kick_requeue_list(struct request_queue *q);
 void blk_mq_abort_requeue_list(struct request_queue *q);
 void blk_mq_complete_request(struct request *rq, int error);
