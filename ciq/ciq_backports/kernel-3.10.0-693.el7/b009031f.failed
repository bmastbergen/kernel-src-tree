KVM: PPC: Book3S HV: Take out virtual core piggybacking code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Paul Mackerras <paulus@ozlabs.org>
commit b009031f74da1c71f306bbe410da78bd9d848669
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b009031f.failed

This takes out the code that arranges to run two (or more) virtual
cores on a single subcore when possible, that is, when both vcores
are from the same VM, the VM is configured with one CPU thread per
virtual core, and all the per-subcore registers have the same value
in each vcore.  Since the VTB (virtual timebase) is a per-subcore
register, and will almost always differ between vcores, this code
is disabled on POWER8 machines, meaning that it is only usable on
POWER7 machines (which don't have VTB).  Given the tiny number of
POWER7 machines which have firmware that allows them to run HV KVM,
the benefit of simplifying the code outweighs the loss of this
feature on POWER7 machines.

	Tested-by: Thomas Huth <thuth@redhat.com>
	Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
(cherry picked from commit b009031f74da1c71f306bbe410da78bd9d848669)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kvm/book3s_hv.c
diff --cc arch/powerpc/kvm/book3s_hv.c
index 9a307d3552bf,3686471be32b..000000000000
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@@ -2123,43 -2129,6 +2049,46 @@@ static bool can_dynamic_split(struct kv
  	return true;
  }
  
++<<<<<<< HEAD
 +static bool can_piggyback_subcore(struct kvmppc_vcore *pvc,
 +				  struct core_info *cip, int sub)
 +{
 +	struct kvmppc_vcore *vc;
 +	int n_thr;
 +
 +	vc = list_first_entry(&cip->vcs[sub], struct kvmppc_vcore,
 +			      preempt_list);
 +
 +	/* require same VM and same per-core reg values */
 +	if (pvc->kvm != vc->kvm ||
 +	    pvc->tb_offset != vc->tb_offset ||
 +	    pvc->pcr != vc->pcr ||
 +	    pvc->lpcr != vc->lpcr)
 +		return false;
 +
 +	/* P8 guest with > 1 thread per core would see wrong TIR value */
 +	if (cpu_has_feature(CPU_FTR_ARCH_207S) &&
 +	    (vc->num_threads > 1 || pvc->num_threads > 1))
 +		return false;
 +
 +	n_thr = cip->subcore_threads[sub] + pvc->num_threads;
 +	if (n_thr > cip->max_subcore_threads) {
 +		if (!subcore_config_ok(cip->n_subcores, n_thr))
 +			return false;
 +		cip->max_subcore_threads = n_thr;
 +	}
 +
 +	cip->total_threads += pvc->num_threads;
 +	cip->subcore_threads[sub] = n_thr;
 +	pvc->master_vcore = vc;
 +	list_del(&pvc->preempt_list);
 +	list_add_tail(&pvc->preempt_list, &cip->vcs[sub]);
 +
 +	return true;
 +}
 +
++=======
++>>>>>>> b009031f74da (KVM: PPC: Book3S HV: Take out virtual core piggybacking code)
  /*
   * Work out whether it is possible to piggyback the execution of
   * vcore *pvc onto the execution of the other vcores described in *cip.
* Unmerged path arch/powerpc/kvm/book3s_hv.c
