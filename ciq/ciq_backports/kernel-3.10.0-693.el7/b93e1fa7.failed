ipv4: fix value of ->nlmsg_flags reported in RTM_NEWROUTE events

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Guillaume Nault <g.nault@alphalink.fr>
commit b93e1fa7106582e3a81cc818b719e0341585ff1b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b93e1fa7.failed

fib_table_insert() inconsistently fills the nlmsg_flags field in its
notification messages.

Since commit b8f558313506 ("[RTNETLINK]: Fix sending netlink message
when replace route."), the netlink message has its nlmsg_flags set to
NLM_F_REPLACE if the route replaced a preexisting one.

Then commit a2bb6d7d6f42 ("ipv4: include NLM_F_APPEND flag in append
route notifications") started setting nlmsg_flags to NLM_F_APPEND if
the route matched a preexisting one but was appended.

In other cases (exclusive creation or prepend), nlmsg_flags is 0.

This patch sets ->nlmsg_flags in all situations, preserving the
semantic of the NLM_F_* bits:

  * NLM_F_CREATE: a new fib entry has been created for this route.
  * NLM_F_EXCL: no other fib entry existed for this route.
  * NLM_F_REPLACE: this route has overwritten a preexisting fib entry.
  * NLM_F_APPEND: the new fib entry was added after other entries for
    the same route.

As a result, the possible flag combination can now be reported
(iproute2's terminology into parentheses):

  * NLM_F_CREATE | NLM_F_EXCL: route didn't exist, exclusive creation
    ("add").
  * NLM_F_CREATE | NLM_F_APPEND: route did already exist, new route
    added after preexisting ones ("append").
  * NLM_F_CREATE: route did already exist, new route added before
    preexisting ones ("prepend").
  * NLM_F_REPLACE: route did already exist, new route replaced the
    first preexisting one ("change").

	Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b93e1fa7106582e3a81cc818b719e0341585ff1b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/fib_trie.c
diff --cc net/ipv4/fib_trie.c
index a731822edc22,241f27bbd7ad..000000000000
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@@ -1070,6 -1081,7 +1070,10 @@@ int fib_table_insert(struct fib_table *
  	struct trie *t = (struct trie *)tb->tb_data;
  	struct fib_alias *fa, *new_fa;
  	struct key_vector *l, *tp;
++<<<<<<< HEAD
++=======
+ 	u16 nlflags = NLM_F_EXCL;
++>>>>>>> b93e1fa71065 (ipv4: fix value of ->nlmsg_flags reported in RTM_NEWROUTE events)
  	struct fib_info *fi;
  	u8 plen = cfg->fc_dst_len;
  	u8 slen = KEYLENGTH - plen;
@@@ -1173,16 -1205,19 +1180,23 @@@
  		if (fa_match)
  			goto out;
  
++<<<<<<< HEAD
 +		if (!(cfg->fc_nlflags & NLM_F_APPEND))
++=======
+ 		if (cfg->fc_nlflags & NLM_F_APPEND)
+ 			nlflags |= NLM_F_APPEND;
+ 		else
++>>>>>>> b93e1fa71065 (ipv4: fix value of ->nlmsg_flags reported in RTM_NEWROUTE events)
  			fa = fa_first;
  	}
  	err = -ENOENT;
  	if (!(cfg->fc_nlflags & NLM_F_CREATE))
  		goto out;
  
+ 	nlflags |= NLM_F_CREATE;
  	err = -ENOBUFS;
  	new_fa = kmem_cache_alloc(fn_alias_kmem, GFP_KERNEL);
 -	if (!new_fa)
 +	if (new_fa == NULL)
  		goto out;
  
  	new_fa->fa_info = fi;
* Unmerged path net/ipv4/fib_trie.c
