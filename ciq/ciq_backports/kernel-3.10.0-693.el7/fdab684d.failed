allow attaching fs_pin to a group not associated with some superblock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit fdab684d7202774bfd8762d4a656a553b787c8ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/fdab684d.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit fdab684d7202774bfd8762d4a656a553b787c8ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fs_pin.c
#	fs/internal.h
#	fs/super.c
#	include/linux/fs_pin.h
diff --cc fs/internal.h
index 3b41f3e8a80a,a6efd2f09ba3..000000000000
--- a/fs/internal.h
+++ b/fs/internal.h
@@@ -135,3 -141,14 +135,17 @@@ extern ssize_t __kernel_write(struct fi
   * pipe.c
   */
  extern const struct file_operations pipefifo_fops;
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * fs_pin.c
+  */
+ extern void group_pin_kill(struct hlist_head *p);
+ extern void mnt_pin_kill(struct mount *m);
+ 
+ /*
+  * fs/nsfs.c
+  */
+ extern struct dentry_operations ns_dentry_operations;
++>>>>>>> fdab684d7202 (allow attaching fs_pin to a group not associated with some superblock)
diff --cc fs/super.c
index 2255fd76fd29,2d822459bc3d..000000000000
--- a/fs/super.c
+++ b/fs/super.c
@@@ -666,12 -703,21 +666,29 @@@ int do_remount_sb(struct super_block *s
  		return -EACCES;
  #endif
  
++<<<<<<< HEAD
 +	if (flags & MS_RDONLY)
 +		acct_auto_close(sb);
++=======
+ 	remount_ro = (flags & MS_RDONLY) && !(sb->s_flags & MS_RDONLY);
+ 
+ 	if (remount_ro) {
+ 		if (!hlist_empty(&sb->s_pins)) {
+ 			up_write(&sb->s_umount);
+ 			group_pin_kill(&sb->s_pins);
+ 			down_write(&sb->s_umount);
+ 			if (!sb->s_root)
+ 				return 0;
+ 			if (sb->s_writers.frozen != SB_UNFROZEN)
+ 				return -EBUSY;
+ 			remount_ro = (flags & MS_RDONLY) && !(sb->s_flags & MS_RDONLY);
+ 		}
+ 	}
++>>>>>>> fdab684d7202 (allow attaching fs_pin to a group not associated with some superblock)
  	shrink_dcache_sb(sb);
 +	sync_filesystem(sb);
 +
 +	remount_ro = (flags & MS_RDONLY) && !(sb->s_flags & MS_RDONLY);
  
  	/* If we are remounting RDONLY and current sb is read/write,
  	   make sure there are no rw files opened */
* Unmerged path fs/fs_pin.c
* Unmerged path include/linux/fs_pin.h
* Unmerged path fs/fs_pin.c
* Unmerged path fs/internal.h
* Unmerged path fs/super.c
* Unmerged path include/linux/fs_pin.h
