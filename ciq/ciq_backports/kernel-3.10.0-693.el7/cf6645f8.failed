bnxt_en: Add function for VF driver to query default VLAN.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Add function for VF driver to query default VLAN (Jonathan Toppins) [1382378]
Rebuild_FUZZ: 99.13%
commit-author Michael Chan <michael.chan@broadcom.com>
commit cf6645f8ebc69775a857b7c51928f3ad9e37aa66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/cf6645f8.failed

The PF can setup a default VLAN for a VF.  The default VLAN tag is
automatically inserted and stripped without the knowledge of the
stack running on the VF.  The VF driver needs to know that default
VLAN is enabled as VLAN acceleration on the RX side is no longer
supported.  Call netdev_update_features() to fix up the VLAN features
as necessary.  Also, VLAN strip mode must be enabled to strip out
the default VLAN tag.

Only allow VF default VLAN to be set if the firmware spec is >= 1.2.1.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cf6645f8ebc69775a857b7c51928f3ad9e37aa66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 64c14d5c2459,67608d57c5f0..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -3994,7 -3844,6 +3999,10 @@@ static int bnxt_hwrm_stat_ctx_alloc(str
  static int bnxt_hwrm_func_qcfg(struct bnxt *bp)
  {
  	struct hwrm_func_qcfg_input req = {0};
++<<<<<<< HEAD
 +	struct hwrm_func_qcfg_output *resp = bp->hwrm_cmd_resp_addr;
++=======
++>>>>>>> cf6645f8ebc6 (bnxt_en: Add function for VF driver to query default VLAN.)
  	int rc;
  
  	bnxt_hwrm_cmd_hdr_init(bp, &req, HWRM_FUNC_QCFG, -1, -1);
@@@ -4006,18 -3855,12 +4014,25 @@@
  
  #ifdef CONFIG_BNXT_SRIOV
  	if (BNXT_VF(bp)) {
++<<<<<<< HEAD
++=======
+ 		struct hwrm_func_qcfg_output *resp = bp->hwrm_cmd_resp_addr;
++>>>>>>> cf6645f8ebc6 (bnxt_en: Add function for VF driver to query default VLAN.)
  		struct bnxt_vf_info *vf = &bp->vf;
  
  		vf->vlan = le16_to_cpu(resp->vlan) & VLAN_VID_MASK;
  	}
  #endif
++<<<<<<< HEAD
 +	switch (resp->port_partition_type) {
 +	case FUNC_QCFG_RESP_PORT_PARTITION_TYPE_NPAR1_0:
 +	case FUNC_QCFG_RESP_PORT_PARTITION_TYPE_NPAR1_5:
 +	case FUNC_QCFG_RESP_PORT_PARTITION_TYPE_NPAR2_0:
 +		bp->port_partition_type = resp->port_partition_type;
 +		break;
 +	}
++=======
++>>>>>>> cf6645f8ebc6 (bnxt_en: Add function for VF driver to query default VLAN.)
  
  func_qcfg_exit:
  	mutex_unlock(&bp->hwrm_cmd_lock);
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c b/drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c
index 363884dd9e8a..50d2007a2640 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_sriov.c
@@ -143,6 +143,9 @@ int bnxt_set_vf_vlan(struct net_device *dev, int vf_id, u16 vlan_id, u8 qos)
 	u16 vlan_tag;
 	int rc;
 
+	if (bp->hwrm_spec_code < 0x10201)
+		return -ENOTSUPP;
+
 	rc = bnxt_vf_ndo_prep(bp, vf_id);
 	if (rc)
 		return rc;
