xfs: rename variables in xfs_iflush_cluster for clarity

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 194293631d009254348f43710a7673bbb84a4172
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/19429363.failed

The cluster inode variable uses unconventional naming - iq - which
makes it hard to distinguish it between the inode passed into the
function - ip - and that is a vector for mistakes to be made.
Rename all the cluster inode variables to use a more conventional
prefixes to reduce potential future confusion (cilist, cilist_size,
cip).

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 194293631d009254348f43710a7673bbb84a4172)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_inode.c
diff --cc fs/xfs/xfs_inode.c
index 634985fc3aa9,54cc7b05708f..000000000000
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@@ -3239,18 -3236,31 +3239,34 @@@ xfs_iflush_cluster
  		 * then this inode cannot be flushed and is skipped.
  		 */
  
- 		if (!xfs_ilock_nowait(iq, XFS_ILOCK_SHARED))
+ 		if (!xfs_ilock_nowait(cip, XFS_ILOCK_SHARED))
  			continue;
- 		if (!xfs_iflock_nowait(iq)) {
- 			xfs_iunlock(iq, XFS_ILOCK_SHARED);
+ 		if (!xfs_iflock_nowait(cip)) {
+ 			xfs_iunlock(cip, XFS_ILOCK_SHARED);
+ 			continue;
+ 		}
+ 		if (xfs_ipincount(cip)) {
+ 			xfs_ifunlock(cip);
+ 			xfs_iunlock(cip, XFS_ILOCK_SHARED);
  			continue;
  		}
- 		if (xfs_ipincount(iq)) {
- 			xfs_ifunlock(iq);
- 			xfs_iunlock(iq, XFS_ILOCK_SHARED);
+ 
++<<<<<<< HEAD
++=======
+ 
+ 		/*
+ 		 * Check the inode number again, just to be certain we are not
+ 		 * racing with freeing in xfs_reclaim_inode(). See the comments
+ 		 * in that function for more information as to why the initial
+ 		 * check is not sufficient.
+ 		 */
+ 		if (!cip->i_ino) {
+ 			xfs_ifunlock(cip);
+ 			xfs_iunlock(cip, XFS_ILOCK_SHARED);
  			continue;
  		}
  
++>>>>>>> 194293631d00 (xfs: rename variables in xfs_iflush_cluster for clarity)
  		/*
  		 * arriving here means that this inode can be flushed.  First
  		 * re-check that it's dirty before flushing.
* Unmerged path fs/xfs/xfs_inode.c
