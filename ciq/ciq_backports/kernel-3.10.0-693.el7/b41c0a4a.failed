scsi: megaraid_sas: set pd_after_lb from MR_BuildRaidContext and initialize pDevHandle to MR_DEVHANDLE_INVALID

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: set pd_after_lb from MR_BuildRaidContext and initialize pDevHandle to MR_DEVHANDLE_INVALID (Tomas Henzl) [1417038]
Rebuild_FUZZ: 97.20%
commit-author Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
commit b41c0a4aa7c0fc1f98648c020358598498d48f06
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b41c0a4a.failed

Issue is limited for Syncro firmware where pd_after_lb is not set but is
accidentally used.  Not a functional issue, but results in low
performance due to improper load balancing between two LUNs.

	Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b41c0a4aa7c0fc1f98648c020358598498d48f06)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_fp.c
diff --cc drivers/scsi/megaraid/megaraid_sas_fp.c
index 53238db53032,a5517e72ad2f..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_fp.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fp.c
@@@ -789,7 -987,6 +790,10 @@@ static u8 mr_spanset_get_phy_params(str
  				MR_PdDevHandleGet(r1_alt_pd, map);
  		}
  	} else {
++<<<<<<< HEAD
 +		*pDevHandle = cpu_to_le16(MR_PD_INVALID);
++=======
++>>>>>>> b41c0a4aa7c0 (scsi: megaraid_sas: set pd_after_lb from MR_BuildRaidContext and initialize pDevHandle to MR_DEVHANDLE_INVALID)
  		if ((raid->level >= 5) &&
  			((fusion->adapter_type == THUNDERBOLT_SERIES)  ||
  			((fusion->adapter_type == INVADER_SERIES) &&
@@@ -804,9 -1003,17 +808,23 @@@
  	}
  
  	*pdBlock += stripRef + le64_to_cpu(MR_LdSpanPtrGet(ld, span, map)->startBlk);
++<<<<<<< HEAD
 +	pRAID_Context->spanArm = (span << RAID_CTX_SPANARM_SPAN_SHIFT) |
 +					physArm;
 +	io_info->span_arm = pRAID_Context->spanArm;
++=======
+ 	if (instance->is_ventura) {
+ 		((struct RAID_CONTEXT_G35 *) pRAID_Context)->span_arm =
+ 			(span << RAID_CTX_SPANARM_SPAN_SHIFT) | physArm;
+ 		io_info->span_arm =
+ 			(span << RAID_CTX_SPANARM_SPAN_SHIFT) | physArm;
+ 	} else {
+ 		pRAID_Context->span_arm =
+ 			(span << RAID_CTX_SPANARM_SPAN_SHIFT) | physArm;
+ 		io_info->span_arm = pRAID_Context->span_arm;
+ 	}
+ 	io_info->pd_after_lb = pd;
++>>>>>>> b41c0a4aa7c0 (scsi: megaraid_sas: set pd_after_lb from MR_BuildRaidContext and initialize pDevHandle to MR_DEVHANDLE_INVALID)
  	return retval;
  }
  
@@@ -889,11 -1100,9 +907,14 @@@ u8 MR_GetPhyParams(struct megasas_insta
  			r1_alt_pd = MR_ArPdGet(arRef, physArm + 1, map);
  			if (r1_alt_pd != MR_PD_INVALID)
  				io_info->r1_alt_dev_handle =
 -					MR_PdDevHandleGet(r1_alt_pd, map);
 +				MR_PdDevHandleGet(r1_alt_pd, map);
  		}
  	} else {
++<<<<<<< HEAD
 +		/* set dev handle as invalid. */
 +		*pDevHandle = cpu_to_le16(MR_PD_INVALID);
++=======
++>>>>>>> b41c0a4aa7c0 (scsi: megaraid_sas: set pd_after_lb from MR_BuildRaidContext and initialize pDevHandle to MR_DEVHANDLE_INVALID)
  		if ((raid->level >= 5) &&
  			((fusion->adapter_type == THUNDERBOLT_SERIES)  ||
  			((fusion->adapter_type == INVADER_SERIES) &&
@@@ -910,9 -1121,17 +931,23 @@@
  	}
  
  	*pdBlock += stripRef + le64_to_cpu(MR_LdSpanPtrGet(ld, span, map)->startBlk);
++<<<<<<< HEAD
 +	pRAID_Context->spanArm = (span << RAID_CTX_SPANARM_SPAN_SHIFT) |
 +		physArm;
 +	io_info->span_arm = pRAID_Context->spanArm;
++=======
+ 	if (instance->is_ventura) {
+ 		((struct RAID_CONTEXT_G35 *) pRAID_Context)->span_arm =
+ 				(span << RAID_CTX_SPANARM_SPAN_SHIFT) | physArm;
+ 		io_info->span_arm =
+ 				(span << RAID_CTX_SPANARM_SPAN_SHIFT) | physArm;
+ 	} else {
+ 		pRAID_Context->span_arm =
+ 			(span << RAID_CTX_SPANARM_SPAN_SHIFT) | physArm;
+ 		io_info->span_arm = pRAID_Context->span_arm;
+ 	}
+ 	io_info->pd_after_lb = pd;
++>>>>>>> b41c0a4aa7c0 (scsi: megaraid_sas: set pd_after_lb from MR_BuildRaidContext and initialize pDevHandle to MR_DEVHANDLE_INVALID)
  	return retval;
  }
  
* Unmerged path drivers/scsi/megaraid/megaraid_sas_fp.c
