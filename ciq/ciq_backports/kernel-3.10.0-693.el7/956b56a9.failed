vfio/pci: Fix ordering of eventfd vs virqfd shutdown

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [vfio] pci: Fix ordering of eventfd vs virqfd shutdown (Alex Williamson) [1322026]
Rebuild_FUZZ: 94.95%
commit-author Alex Williamson <alex.williamson@redhat.com>
commit 956b56a984ddf10aa69b25318dc04430101beed6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/956b56a9.failed

Both the INTx and MSI/X disable paths do an eventfd_ctx_put() for the
trigger eventfd before calling vfio_virqfd_disable() any potential
mask and unmask eventfds.  This opens a use-after-free race where an
inopportune irqfd can reference the freed signalling eventfd.  Reorder
to avoid this possibility.

	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit 956b56a984ddf10aa69b25318dc04430101beed6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/pci/vfio_pci_intrs.c
diff --cc drivers/vfio/pci/vfio_pci_intrs.c
index 0c61db2573f4,15ecfc9c5f6c..000000000000
--- a/drivers/vfio/pci/vfio_pci_intrs.c
+++ b/drivers/vfio/pci/vfio_pci_intrs.c
@@@ -439,9 -228,9 +439,15 @@@ static int vfio_intx_set_signal(struct 
  
  static void vfio_intx_disable(struct vfio_pci_device *vdev)
  {
++<<<<<<< HEAD
 +	vfio_intx_set_signal(vdev, -1);
 +	virqfd_disable(vdev, &vdev->ctx[0].unmask);
 +	virqfd_disable(vdev, &vdev->ctx[0].mask);
++=======
+ 	vfio_virqfd_disable(&vdev->ctx[0].unmask);
+ 	vfio_virqfd_disable(&vdev->ctx[0].mask);
+ 	vfio_intx_set_signal(vdev, -1);
++>>>>>>> 956b56a984dd (vfio/pci: Fix ordering of eventfd vs virqfd shutdown)
  	vdev->irq_type = VFIO_PCI_NUM_IRQS;
  	vdev->num_ctx = 0;
  	kfree(vdev->ctx);
@@@ -612,13 -401,13 +618,13 @@@ static void vfio_msi_disable(struct vfi
  	struct pci_dev *pdev = vdev->pdev;
  	int i;
  
- 	vfio_msi_set_block(vdev, 0, vdev->num_ctx, NULL, msix);
- 
  	for (i = 0; i < vdev->num_ctx; i++) {
 -		vfio_virqfd_disable(&vdev->ctx[i].unmask);
 -		vfio_virqfd_disable(&vdev->ctx[i].mask);
 +		virqfd_disable(vdev, &vdev->ctx[i].unmask);
 +		virqfd_disable(vdev, &vdev->ctx[i].mask);
  	}
  
+ 	vfio_msi_set_block(vdev, 0, vdev->num_ctx, NULL, msix);
+ 
  	if (msix) {
  		pci_disable_msix(vdev->pdev);
  		kfree(vdev->msix);
* Unmerged path drivers/vfio/pci/vfio_pci_intrs.c
