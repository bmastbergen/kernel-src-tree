scsi: Avoid that SCSI queues get stuck

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] Avoid that SCSI queues get stuck (Ming Lei) [1441114]
Rebuild_FUZZ: 91.43%
commit-author Bart Van Assche <bart.vanassche@sandisk.com>
commit 36e3cf273977da34a760d513e1bef8431a9abaa0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/36e3cf27.failed

If a .queue_rq() function returns BLK_MQ_RQ_QUEUE_BUSY then the block
driver that implements that function is responsible for rerunning the
hardware queue once requests can be queued again successfully.

commit 52d7f1b5c2f3 ("blk-mq: Avoid that requeueing starts stopped
queues") removed the blk_mq_stop_hw_queue() call from scsi_queue_rq()
for the BLK_MQ_RQ_QUEUE_BUSY case. Hence change all calls to functions
that are intended to rerun a busy queue such that these examine all
hardware queues instead of only stopped queues.

Since no other functions than scsi_internal_device_block() and
scsi_internal_device_unblock() should ever stop or restart a SCSI
queue, change the blk_mq_delay_queue() call into a
blk_mq_delay_run_hw_queue() call.

Fixes: commit 52d7f1b5c2f3 ("blk-mq: Avoid that requeueing starts stopped queues")
Fixes: commit 7e79dadce222 ("blk-mq: stop hardware queue in blk_mq_delay_queue()")
	Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Cc: Martin K. Petersen <martin.petersen@oracle.com>
	Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Hannes Reinecke <hare@suse.de>
	Cc: Sagi Grimberg <sagi@grimberg.me>
	Cc: Long Li <longli@microsoft.com>
	Cc: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 36e3cf273977da34a760d513e1bef8431a9abaa0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_lib.c
diff --cc drivers/scsi/scsi_lib.c
index 53aabdc3d236,e5a2d590a104..000000000000
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@@ -733,9 -667,7 +733,13 @@@ static bool scsi_end_request(struct req
  		    !list_empty(&sdev->host->starved_list))
  			kblockd_schedule_work(&sdev->requeue_work);
  		else
++<<<<<<< HEAD
 +			blk_mq_start_stopped_hw_queues(q, true);
 +
 +		put_device(&sdev->sdev_gendev);
++=======
+ 			blk_mq_run_hw_queues(q, true);
++>>>>>>> 36e3cf273977 (scsi: Avoid that SCSI queues get stuck)
  	} else {
  		unsigned long flags;
  
@@@ -1959,10 -1972,9 +1963,10 @@@ out_put_device
  out:
  	switch (ret) {
  	case BLK_MQ_RQ_QUEUE_BUSY:
 +		blk_mq_stop_hw_queue(hctx);
  		if (atomic_read(&sdev->device_busy) == 0 &&
  		    !scsi_device_blocked(sdev))
- 			blk_mq_delay_queue(hctx, SCSI_QUEUE_DELAY);
+ 			blk_mq_delay_run_hw_queue(hctx, SCSI_QUEUE_DELAY);
  		break;
  	case BLK_MQ_RQ_QUEUE_ERROR:
  		/*
* Unmerged path drivers/scsi/scsi_lib.c
