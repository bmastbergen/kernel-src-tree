SUNRPC: Fix reconnection timeouts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 02910177aede34d6f49e2dc14b1c5c6cd468d94f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/02910177.failed

When the connect attempt fails and backs off, we should start the clock
at the last connection attempt, not time at which we queue up the
reconnect job.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 02910177aede34d6f49e2dc14b1c5c6cd468d94f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtsock.c
diff --cc net/sunrpc/xprtsock.c
index 90ddaee8ee0a,04b0c4190dd7..000000000000
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@@ -2389,19 -2425,19 +2402,31 @@@ static void xs_connect(struct rpc_xprt 
  		/* Start by resetting any existing state */
  		xs_reset_transport(transport);
  
++<<<<<<< HEAD
 +		queue_delayed_work(rpciod_workqueue,
 +				   &transport->connect_worker,
 +				   xprt->reestablish_timeout);
++=======
+ 		delay = xs_reconnect_delay(xprt);
+ 
++>>>>>>> 02910177aede (SUNRPC: Fix reconnection timeouts)
  		xprt->reestablish_timeout <<= 1;
  		if (xprt->reestablish_timeout < XS_TCP_INIT_REEST_TO)
  			xprt->reestablish_timeout = XS_TCP_INIT_REEST_TO;
  		if (xprt->reestablish_timeout > XS_TCP_MAX_REEST_TO)
  			xprt->reestablish_timeout = XS_TCP_MAX_REEST_TO;
- 	} else {
+ 	} else
  		dprintk("RPC:       xs_connect scheduled xprt %p\n", xprt);
++<<<<<<< HEAD
 +		queue_delayed_work(rpciod_workqueue,
 +				   &transport->connect_worker, 0);
 +	}
++=======
+ 
+ 	queue_delayed_work(xprtiod_workqueue,
+ 			&transport->connect_worker,
+ 			delay);
++>>>>>>> 02910177aede (SUNRPC: Fix reconnection timeouts)
  }
  
  /**
* Unmerged path net/sunrpc/xprtsock.c
