qedr: Add GSI support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Ram Amrani <Ram.Amrani@cavium.com>
commit 048867793046e6bd665869816f4702fc49cc9a18
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/04886779.failed

Add support for GSI over light L2.

	Signed-off-by: Rajesh Borundia <rajesh.borundia@cavium.com>
	Signed-off-by: Ram Amrani <Ram.Amrani@cavium.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 048867793046e6bd665869816f4702fc49cc9a18)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/infiniband/hw/ipath/qedr_cm.c
#	drivers/infiniband/hw/qedr/Makefile
#	drivers/infiniband/hw/qedr/main.c
#	drivers/infiniband/hw/qedr/qedr.h
#	drivers/infiniband/hw/qedr/verbs.c
#	drivers/infiniband/hw/qedr/verbs.h
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,9ba6e15cd93f..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -29,34 -29,33 +29,63 @@@
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
 -#ifndef LINUX_QEDR_CM_H_
 -#define LINUX_QEDR_CM_H_
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
 +
 +#include "ipath_kernel.h"
 +
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
++=======
+ #define QEDR_GSI_MAX_RECV_WR	(4096)
+ #define QEDR_GSI_MAX_SEND_WR	(4096)
+ 
+ #define QEDR_GSI_MAX_RECV_SGE	(1)	/* LL2 FW limitation */
+ 
+ #define ETH_P_ROCE		(0x8915)
+ #define QEDR_ROCE_V2_UDP_SPORT	(0000)
+ 
+ static inline u32 qedr_get_ipv4_from_gid(u8 *gid)
++>>>>>>> 048867793046 (qedr: Add GSI support):drivers/infiniband/hw/qedr/qedr_cm.h
  {
 -	return *(u32 *)(void *)&gid[12];
 +	return 0;
  }
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
 +}
++=======
+ /* RDMA CM */
+ int qedr_gsi_poll_cq(struct ib_cq *ibcq, int num_entries, struct ib_wc *wc);
+ int qedr_gsi_post_recv(struct ib_qp *ibqp, struct ib_recv_wr *wr,
+ 		       struct ib_recv_wr **bad_wr);
+ int qedr_gsi_post_send(struct ib_qp *ibqp, struct ib_send_wr *wr,
+ 		       struct ib_send_wr **bad_wr);
+ struct ib_qp *qedr_create_gsi_qp(struct qedr_dev *dev,
+ 				 struct ib_qp_init_attr *attrs,
+ 				 struct qedr_qp *qp);
+ void qedr_store_gsi_qp_cq(struct qedr_dev *dev,
+ 			  struct qedr_qp *qp, struct ib_qp_init_attr *attrs);
+ int qedr_destroy_gsi_qp(struct qedr_dev *dev);
+ void qedr_inc_sw_gsi_cons(struct qedr_qp_hwq_info *info);
+ #endif
++>>>>>>> 048867793046 (qedr: Add GSI support):drivers/infiniband/hw/qedr/qedr_cm.h
* Unmerged path drivers/infiniband/hw/ipath/qedr_cm.c
* Unmerged path drivers/infiniband/hw/qedr/Makefile
* Unmerged path drivers/infiniband/hw/qedr/main.c
* Unmerged path drivers/infiniband/hw/qedr/qedr.h
* Unmerged path drivers/infiniband/hw/qedr/verbs.c
* Unmerged path drivers/infiniband/hw/qedr/verbs.h
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
* Unmerged path drivers/infiniband/hw/ipath/qedr_cm.c
* Unmerged path drivers/infiniband/hw/qedr/Makefile
* Unmerged path drivers/infiniband/hw/qedr/main.c
* Unmerged path drivers/infiniband/hw/qedr/qedr.h
* Unmerged path drivers/infiniband/hw/qedr/verbs.c
* Unmerged path drivers/infiniband/hw/qedr/verbs.h
