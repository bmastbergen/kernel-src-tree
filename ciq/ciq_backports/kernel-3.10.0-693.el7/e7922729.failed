crypto: chcr - Use SHASH_DESC_ON_STACK

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] chcr - Use SHASH_DESC_ON_STACK (Don Dutile) [1417286]
Rebuild_FUZZ: 88.24%
commit-author Harsh Jain <harsh@chelsio.com>
commit e7922729bef4474c5817fa2184154a1698757d48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e7922729.failed

Use SHASH_DESC_ON_STACK macro to allocate memory for ipad/opad
calculation.

	Signed-off-by: Harsh Jain <harsh@chelsio.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit e7922729bef4474c5817fa2184154a1698757d48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chcr_algo.c
diff --cc drivers/crypto/chelsio/chcr_algo.c
index 38f09ffb9e01,e19f7f40bd75..000000000000
--- a/drivers/crypto/chelsio/chcr_algo.c
+++ b/drivers/crypto/chelsio/chcr_algo.c
@@@ -176,10 -176,61 +176,65 @@@ static inline unsigned int calc_tx_flit
  	return flits + sgl_len(cnt);
  }
  
++<<<<<<< HEAD
 +static struct shash_desc *chcr_alloc_shash(unsigned int ds)
++=======
+ static inline void get_aes_decrypt_key(unsigned char *dec_key,
+ 				       const unsigned char *key,
+ 				       unsigned int keylength)
+ {
+ 	u32 temp;
+ 	u32 w_ring[MAX_NK];
+ 	int i, j, k;
+ 	u8  nr, nk;
+ 
+ 	switch (keylength) {
+ 	case AES_KEYLENGTH_128BIT:
+ 		nk = KEYLENGTH_4BYTES;
+ 		nr = NUMBER_OF_ROUNDS_10;
+ 		break;
+ 	case AES_KEYLENGTH_192BIT:
+ 		nk = KEYLENGTH_6BYTES;
+ 		nr = NUMBER_OF_ROUNDS_12;
+ 		break;
+ 	case AES_KEYLENGTH_256BIT:
+ 		nk = KEYLENGTH_8BYTES;
+ 		nr = NUMBER_OF_ROUNDS_14;
+ 		break;
+ 	default:
+ 		return;
+ 	}
+ 	for (i = 0; i < nk; i++)
+ 		w_ring[i] = be32_to_cpu(*(u32 *)&key[4 * i]);
+ 
+ 	i = 0;
+ 	temp = w_ring[nk - 1];
+ 	while (i + nk < (nr + 1) * 4) {
+ 		if (!(i % nk)) {
+ 			/* RotWord(temp) */
+ 			temp = (temp << 8) | (temp >> 24);
+ 			temp = aes_ks_subword(temp);
+ 			temp ^= round_constant[i / nk];
+ 		} else if (nk == 8 && (i % 4 == 0)) {
+ 			temp = aes_ks_subword(temp);
+ 		}
+ 		w_ring[i % nk] ^= temp;
+ 		temp = w_ring[i % nk];
+ 		i++;
+ 	}
+ 	i--;
+ 	for (k = 0, j = i % nk; k < nk; k++) {
+ 		*((u32 *)dec_key + k) = htonl(w_ring[j]);
+ 		j--;
+ 		if (j < 0)
+ 			j += nk;
+ 	}
+ }
+ 
+ static struct crypto_shash *chcr_alloc_shash(unsigned int ds)
++>>>>>>> e7922729bef4 (crypto: chcr - Use SHASH_DESC_ON_STACK)
  {
  	struct crypto_shash *base_hash = NULL;
- 	struct shash_desc *desc;
  
  	switch (ds) {
  	case SHA1_DIGEST_SIZE:
* Unmerged path drivers/crypto/chelsio/chcr_algo.c
diff --git a/drivers/crypto/chelsio/chcr_crypto.h b/drivers/crypto/chelsio/chcr_crypto.h
index 7ed6d2b72320..977d20520f53 100644
--- a/drivers/crypto/chelsio/chcr_crypto.h
+++ b/drivers/crypto/chelsio/chcr_crypto.h
@@ -132,7 +132,7 @@ struct ablk_ctx {
 };
 
 struct hmac_ctx {
-	struct shash_desc *desc;
+	struct crypto_shash *base_hash;
 	u8 ipad[CHCR_HASH_MAX_BLOCK_SIZE_128];
 	u8 opad[CHCR_HASH_MAX_BLOCK_SIZE_128];
 };
