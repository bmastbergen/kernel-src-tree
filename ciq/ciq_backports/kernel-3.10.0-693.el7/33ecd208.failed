locking/spinlocks/mcs: Micro-optimize osq_unlock()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jason Low <jason.low2@hp.com>
commit 33ecd2083a9560fbc1ef1b1279ef3ecb4c012a4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/33ecd208.failed

In the unlock function of the cancellable MCS spinlock, the first
thing we do is to retrive the current CPU's osq node. However, due to
the changes made in the previous patch, in the common case where the
lock is not contended, we wouldn't need to access the current CPU's
osq node anymore.

This patch optimizes this by only retriving this CPU's osq node
after we attempt the initial cmpxchg to unlock the osq and found
that its contended.

	Signed-off-by: Jason Low <jason.low2@hp.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Scott Norton <scott.norton@hp.com>
	Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Waiman Long <waiman.long@hp.com>
	Cc: Davidlohr Bueso <davidlohr@hp.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Tim Chen <tim.c.chen@linux.intel.com>
	Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Cc: Aswin Chandramouleeswaran <aswin@hp.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1405358872-3732-5-git-send-email-jason.low2@hp.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 33ecd2083a9560fbc1ef1b1279ef3ecb4c012a4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/mcs_spinlock.c
diff --cc kernel/mcs_spinlock.c
index 13c1bbdbe694,be9ee1559fca..000000000000
--- a/kernel/mcs_spinlock.c
+++ b/kernel/mcs_spinlock.c
@@@ -149,10 -180,10 +149,15 @@@ unqueue
  	return false;
  }
  
 -void osq_unlock(struct optimistic_spin_queue *lock)
 +void osq_unlock(struct optimistic_spin_queue **lock)
  {
++<<<<<<< HEAD:kernel/mcs_spinlock.c
 +	struct optimistic_spin_queue *node = this_cpu_ptr(&osq_node);
 +	struct optimistic_spin_queue *next;
++=======
+ 	struct optimistic_spin_node *node, *next;
+ 	int curr = encode_cpu(smp_processor_id());
++>>>>>>> 33ecd2083a95 (locking/spinlocks/mcs: Micro-optimize osq_unlock()):kernel/locking/mcs_spinlock.c
  
  	/*
  	 * Fast path for the uncontended case.
* Unmerged path kernel/mcs_spinlock.c
