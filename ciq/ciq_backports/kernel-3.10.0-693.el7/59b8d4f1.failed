random: use for_each_online_node() to iterate over NUMA nodes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit 59b8d4f1f5d26e4ca92172ff6dcd1492cdb39613
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/59b8d4f1.failed

This fixes a crash on s390 with fake NUMA enabled.

	Reported-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Fixes: 1e7f583af67b ("random: make /dev/urandom scalable for silly userspace programs")
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 59b8d4f1f5d26e4ca92172ff6dcd1492cdb39613)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
diff --cc drivers/char/random.c
index 6d0f2f6f23ab,7f0622426b97..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -1287,9 -1654,30 +1287,27 @@@ static void init_std_data(struct entrop
   */
  static int rand_initialize(void)
  {
 -#ifdef CONFIG_NUMA
 -	int i;
 -	int num_nodes = num_possible_nodes();
 -	struct crng_state *crng;
 -	struct crng_state **pool;
 -#endif
 -
  	init_std_data(&input_pool);
  	init_std_data(&blocking_pool);
++<<<<<<< HEAD
 +	init_std_data(&nonblocking_pool);
++=======
+ 	crng_initialize(&primary_crng);
+ 
+ #ifdef CONFIG_NUMA
+ 	pool = kmalloc(num_nodes * sizeof(void *),
+ 		       GFP_KERNEL|__GFP_NOFAIL|__GFP_ZERO);
+ 	for_each_online_node(i) {
+ 		crng = kmalloc_node(sizeof(struct crng_state),
+ 				    GFP_KERNEL | __GFP_NOFAIL, i);
+ 		spin_lock_init(&crng->lock);
+ 		crng_initialize(crng);
+ 		pool[i] = crng;
+ 	}
+ 	mb();
+ 	crng_node_pool = pool;
+ #endif
++>>>>>>> 59b8d4f1f5d2 (random: use for_each_online_node() to iterate over NUMA nodes)
  	return 0;
  }
  early_initcall(rand_initialize);
* Unmerged path drivers/char/random.c
