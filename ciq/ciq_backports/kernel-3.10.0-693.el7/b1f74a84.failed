IB/mlx5: Enable WQ creation and modification with cvlan offload

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Noa Osherovich <noaos@mellanox.com>
commit b1f74a8437a38d1c0139175f2ad469d2517a7882
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b1f74a84.failed

Allow creating a WQ with cvlan stripping considering device's
capabilities. The default value was fixed to disable vlan stripping
till was asked explicitly.

In addition, allow modification of a WQ to turn on/off this property.

	Signed-off-by: Noa Osherovich <noaos@mellanox.com>
	Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit b1f74a8437a38d1c0139175f2ad469d2517a7882)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 38f8861fb81d,59bbe246c92d..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -4801,8 -4921,33 +4812,36 @@@ int mlx5_ib_modify_wq(struct ib_wq *wq
  	MLX5_SET(modify_rq_in, in, rq_state, curr_wq_state);
  	MLX5_SET(rqc, rqc, state, wq_state);
  
++<<<<<<< HEAD
++=======
+ 	if (wq_attr_mask & IB_WQ_FLAGS) {
+ 		if (wq_attr->flags_mask & IB_WQ_FLAGS_CVLAN_STRIPPING) {
+ 			if (!(MLX5_CAP_GEN(dev->mdev, eth_net_offloads) &&
+ 			      MLX5_CAP_ETH(dev->mdev, vlan_cap))) {
+ 				mlx5_ib_dbg(dev, "VLAN offloads are not "
+ 					    "supported\n");
+ 				err = -EOPNOTSUPP;
+ 				goto out;
+ 			}
+ 			MLX5_SET64(modify_rq_in, in, modify_bitmask,
+ 				   MLX5_MODIFY_RQ_IN_MODIFY_BITMASK_VSD);
+ 			MLX5_SET(rqc, rqc, vsd,
+ 				 (wq_attr->flags & IB_WQ_FLAGS_CVLAN_STRIPPING) ? 0 : 1);
+ 		}
+ 	}
+ 
+ 	if (curr_wq_state == IB_WQS_RESET && wq_state == IB_WQS_RDY) {
+ 		if (MLX5_CAP_GEN(dev->mdev, modify_rq_counter_set_id)) {
+ 			MLX5_SET64(modify_rq_in, in, modify_bitmask,
+ 				   MLX5_MODIFY_RQ_IN_MODIFY_BITMASK_RQ_COUNTER_SET_ID);
+ 			MLX5_SET(rqc, rqc, counter_set_id, dev->port->q_cnts.set_id);
+ 		} else
+ 			pr_info_once("%s: Receive WQ counters are not supported on current FW\n",
+ 				     dev->ib_dev.name);
+ 	}
+ 
++>>>>>>> b1f74a8437a3 (IB/mlx5: Enable WQ creation and modification with cvlan offload)
  	err = mlx5_core_modify_rq(dev->mdev, rwq->core_qp.qpn, in, inlen);
- 	kvfree(in);
  	if (!err)
  		rwq->ibwq.state = (wq_state == MLX5_RQC_STATE_ERR) ? IB_WQS_ERR : wq_state;
  
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
