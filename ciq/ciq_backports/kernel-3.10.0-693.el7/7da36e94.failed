perf evsel: Fix write_backwards fallback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@kernel.org>
commit 7da36e94e7fad768ca8640b61ed1f49b284e1dc5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7da36e94.failed

Commit b90dc17a5d14 "perf evsel: Add overwrite attribute and check
write_backward" misunderstood the 'order' should be obeyed in
__perf_evsel__open.

But the way this was done for attr.write_backwards was buggy, as we need
to check features in the inverse order of their introduction to the
kernel, so that a newer tool checks first the newest perf_event_attr
fields, detecting that the older kernel doesn't have support for them.

Also, we can avoid calling sys_perf_event_open() if we have already
detected the missing of write_backward.

	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Fixes: b90dc17a5d14 ("perf evsel: Add overwrite attribute and check write_backward")
Link: http://lkml.kernel.org/r/1466419645-75551-2-git-send-email-wangnan0@huawei.com
Link: http://lkml.kernel.org/r/20160616214724.GI13337@kernel.org
	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7da36e94e7fad768ca8640b61ed1f49b284e1dc5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.c
diff --cc tools/perf/util/evsel.c
index a2fb1faf209f,1d8f2bbd38a7..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1351,6 -1389,11 +1351,14 @@@ fallback_missing_features
  	if (perf_missing_features.lbr_flags)
  		evsel->attr.branch_sample_type &= ~(PERF_SAMPLE_BRANCH_NO_FLAGS |
  				     PERF_SAMPLE_BRANCH_NO_CYCLES);
++<<<<<<< HEAD
++=======
+ 	if (perf_missing_features.write_backward) {
+ 		if (evsel->overwrite)
+ 			return -EINVAL;
+ 		evsel->attr.write_backward = false;
+ 	}
++>>>>>>> 7da36e94e7fa (perf evsel: Fix write_backwards fallback)
  retry_sample_id:
  	if (perf_missing_features.sample_id_all)
  		evsel->attr.sample_id_all = 0;
@@@ -1385,7 -1428,34 +1393,21 @@@ retry_open
  					  err);
  				goto try_fallback;
  			}
 -
 -			if (evsel->bpf_fd >= 0) {
 -				int evt_fd = FD(evsel, cpu, thread);
 -				int bpf_fd = evsel->bpf_fd;
 -
 -				err = ioctl(evt_fd,
 -					    PERF_EVENT_IOC_SET_BPF,
 -					    bpf_fd);
 -				if (err && errno != EEXIST) {
 -					pr_err("failed to attach bpf fd %d: %s\n",
 -					       bpf_fd, strerror(errno));
 -					err = -EINVAL;
 -					goto out_close;
 -				}
 -			}
 -
  			set_rlimit = NO_CHANGE;
++<<<<<<< HEAD
++=======
+ 
+ 			/*
+ 			 * If we succeeded but had to kill clockid, fail and
+ 			 * have perf_evsel__open_strerror() print us a nice
+ 			 * error.
+ 			 */
+ 			if (perf_missing_features.clockid ||
+ 			    perf_missing_features.clockid_wrong) {
+ 				err = -EINVAL;
+ 				goto out_close;
+ 			}
++>>>>>>> 7da36e94e7fa (perf evsel: Fix write_backwards fallback)
  		}
  	}
  
@@@ -1419,7 -1489,20 +1441,24 @@@ try_fallback
  	if (err != -EINVAL || cpu > 0 || thread > 0)
  		goto out_close;
  
++<<<<<<< HEAD
 +	if (!perf_missing_features.cloexec && (flags & PERF_FLAG_FD_CLOEXEC)) {
++=======
+ 	/*
+ 	 * Must probe features in the order they were added to the
+ 	 * perf_event_attr interface.
+ 	 */
+ 	if (!perf_missing_features.write_backward && evsel->attr.write_backward) {
+ 		perf_missing_features.write_backward = true;
+ 		goto fallback_missing_features;
+ 	} else if (!perf_missing_features.clockid_wrong && evsel->attr.use_clockid) {
+ 		perf_missing_features.clockid_wrong = true;
+ 		goto fallback_missing_features;
+ 	} else if (!perf_missing_features.clockid && evsel->attr.use_clockid) {
+ 		perf_missing_features.clockid = true;
+ 		goto fallback_missing_features;
+ 	} else if (!perf_missing_features.cloexec && (flags & PERF_FLAG_FD_CLOEXEC)) {
++>>>>>>> 7da36e94e7fa (perf evsel: Fix write_backwards fallback)
  		perf_missing_features.cloexec = true;
  		goto fallback_missing_features;
  	} else if (!perf_missing_features.mmap2 && evsel->attr.mmap2) {
@@@ -2405,6 -2403,14 +2443,17 @@@ int perf_evsel__open_strerror(struct pe
  	"The PMU counters are busy/taken by another profiler.\n"
  	"We found oprofile daemon running, please stop it and try again.");
  		break;
++<<<<<<< HEAD
++=======
+ 	case EINVAL:
+ 		if (evsel->overwrite && perf_missing_features.write_backward)
+ 			return scnprintf(msg, size, "Reading from overwrite event is not supported by this kernel.");
+ 		if (perf_missing_features.clockid)
+ 			return scnprintf(msg, size, "clockid feature not supported.");
+ 		if (perf_missing_features.clockid_wrong)
+ 			return scnprintf(msg, size, "wrong clockid (%d).", clockid);
+ 		break;
++>>>>>>> 7da36e94e7fa (perf evsel: Fix write_backwards fallback)
  	default:
  		break;
  	}
* Unmerged path tools/perf/util/evsel.c
