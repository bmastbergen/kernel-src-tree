net: add dev arg to ndo_neigh_construct/destroy

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] add dev arg to ndo_neigh_construct/destroy (Ivan Vecera) [1382040]
Rebuild_FUZZ: 94.38%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 503eebc265dcf5c512454fd5a6b6673ea4f1d7f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/503eebc2.failed

As the following patch will allow upper devices to follow the call down
lower devices, we need to add dev here and not rely on n->dev.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 503eebc265dcf5c512454fd5a6b6673ea4f1d7f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/rocker/rocker_main.c
#	net/ieee802154/6lowpan/core.c
diff --cc net/ieee802154/6lowpan/core.c
index 307f5f9dec5c,935ab932e841..000000000000
--- a/net/ieee802154/6lowpan/core.c
+++ b/net/ieee802154/6lowpan/core.c
@@@ -92,6 -81,15 +92,18 @@@ static int lowpan_stop(struct net_devic
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int lowpan_neigh_construct(struct net_device *dev, struct neighbour *n)
+ {
+ 	struct lowpan_802154_neigh *neigh = lowpan_802154_neigh(neighbour_priv(n));
+ 
+ 	/* default no short_addr is available for a neighbour */
+ 	neigh->short_addr = cpu_to_le16(IEEE802154_ADDR_SHORT_UNSPEC);
+ 	return 0;
+ }
+ 
++>>>>>>> 503eebc265dc (net: add dev arg to ndo_neigh_construct/destroy)
  static const struct net_device_ops lowpan_netdev_ops = {
  	.ndo_init		= lowpan_dev_init,
  	.ndo_start_xmit		= lowpan_xmit,
* Unmerged path drivers/net/ethernet/rocker/rocker_main.c
* Unmerged path drivers/net/ethernet/rocker/rocker_main.c
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 0c457a76a538..c9a50ff10883 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1230,8 +1230,10 @@ struct net_device_ops {
 						    netdev_features_t features);
 	int			(*ndo_set_features)(struct net_device *dev,
 						    netdev_features_t features);
-	int			(*ndo_neigh_construct)(struct neighbour *n);
-	void			(*ndo_neigh_destroy)(struct neighbour *n);
+	int			(*ndo_neigh_construct)(struct net_device *dev,
+						       struct neighbour *n);
+	void			(*ndo_neigh_destroy)(struct net_device *dev,
+						     struct neighbour *n);
 
 	RH_KABI_RENAME(int	(*ndo_fdb_add),
 		       int	(*ndo_fdb_add_rh72))(struct ndmsg *ndm,
diff --git a/net/atm/clip.c b/net/atm/clip.c
index c1ede0a4a124..d577dee06a8b 100644
--- a/net/atm/clip.c
+++ b/net/atm/clip.c
@@ -286,7 +286,7 @@ static const struct neigh_ops clip_neigh_ops = {
 	.connected_output =	neigh_direct_output,
 };
 
-static int clip_constructor(struct neighbour *neigh)
+static int clip_constructor(struct net_device *dev, struct neighbour *neigh)
 {
 	struct atmarp_entry *entry = neighbour_priv(neigh);
 
diff --git a/net/core/neighbour.c b/net/core/neighbour.c
index 56a92b44a767..2c5ee891670d 100644
--- a/net/core/neighbour.c
+++ b/net/core/neighbour.c
@@ -485,7 +485,7 @@ struct neighbour *__neigh_create(struct neigh_table *tbl, const void *pkey,
 	}
 
 	if (dev->netdev_ops->ndo_neigh_construct) {
-		error = dev->netdev_ops->ndo_neigh_construct(n);
+		error = dev->netdev_ops->ndo_neigh_construct(dev, n);
 		if (error < 0) {
 			rc = ERR_PTR(error);
 			goto out_neigh_release;
@@ -713,7 +713,7 @@ void neigh_destroy(struct neighbour *neigh)
 	neigh->arp_queue_len_bytes = 0;
 
 	if (dev->netdev_ops->ndo_neigh_destroy)
-		dev->netdev_ops->ndo_neigh_destroy(neigh);
+		dev->netdev_ops->ndo_neigh_destroy(dev, neigh);
 
 	dev_put(dev);
 	neigh_parms_put(neigh->parms);
* Unmerged path net/ieee802154/6lowpan/core.c
