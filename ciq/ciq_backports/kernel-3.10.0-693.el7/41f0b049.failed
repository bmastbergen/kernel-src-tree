bonding: fill-up LAG changeupper info struct and pass it along

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Pirko <jiri@mellanox.com>
commit 41f0b0496466d6e0e8245f94a79889234cde5e3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/41f0b049.failed

Initialize netdev_lag_upper_info structure by TX type according to
current bonding mode and pass it along via netdev_master_upper_dev_link.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 41f0b0496466d6e0e8245f94a79889234cde5e3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_main.c
index ce8e9750aae0,e94e79ad757c..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -1196,16 -1198,35 +1196,42 @@@ static rx_handler_result_t bond_handle_
  	return ret;
  }
  
- static int bond_master_upper_dev_link(struct net_device *bond_dev,
- 				      struct net_device *slave_dev,
- 				      struct slave *slave)
+ static enum netdev_lag_tx_type bond_lag_tx_type(struct bonding *bond)
  {
+ 	switch (BOND_MODE(bond)) {
+ 	case BOND_MODE_ROUNDROBIN:
+ 		return NETDEV_LAG_TX_TYPE_ROUNDROBIN;
+ 	case BOND_MODE_ACTIVEBACKUP:
+ 		return NETDEV_LAG_TX_TYPE_ACTIVEBACKUP;
+ 	case BOND_MODE_BROADCAST:
+ 		return NETDEV_LAG_TX_TYPE_BROADCAST;
+ 	case BOND_MODE_XOR:
+ 	case BOND_MODE_8023AD:
+ 		return NETDEV_LAG_TX_TYPE_HASH;
+ 	default:
+ 		return NETDEV_LAG_TX_TYPE_UNKNOWN;
+ 	}
+ }
+ 
+ static int bond_master_upper_dev_link(struct bonding *bond, struct slave *slave)
+ {
+ 	struct netdev_lag_upper_info lag_upper_info;
  	int err;
  
++<<<<<<< HEAD
 +	err = netdev_master_upper_dev_link_private(slave_dev, bond_dev, slave);
 +	if (err)
 +		return err;
 +	rtmsg_ifinfo(RTM_NEWLINK, slave_dev, IFF_SLAVE, GFP_KERNEL);
++=======
+ 	lag_upper_info.tx_type = bond_lag_tx_type(bond);
+ 	err = netdev_master_upper_dev_link(slave->dev, bond->dev, slave,
+ 					   &lag_upper_info);
+ 	if (err)
+ 		return err;
+ 	slave->dev->flags |= IFF_SLAVE;
+ 	rtmsg_ifinfo(RTM_NEWLINK, slave->dev, IFF_SLAVE, GFP_KERNEL);
++>>>>>>> 41f0b0496466 (bonding: fill-up LAG changeupper info struct and pass it along)
  	return 0;
  }
  
* Unmerged path drivers/net/bonding/bond_main.c
