autofs: take more care to not update last_used on path walk

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Ian Kent <raven@themaw.net>
commit 092a53452bb7a6ca436b2d3859e7b1f1ec45479f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/092a5345.failed

GUI environments seem to be becoming more agressive at scanning
filesystems, to the point where autofs cannot expire mounts at all.

This is one key reason the update of the autofs dentry info last_used
field is done in the expire system when the dentry is seen to be in use.

But somewhere along the way instances of the update has crept back into
the autofs path walk functions which, with the more aggressive file
access patterns, is preventing expiration.

Changing the update in the path walk functions allows autofs to at least
make progress in spite of frequent immediate re-mounts from file
accesses.

Link: http://lkml.kernel.org/r/148577167169.9801.1377050092212016834.stgit@pluto.themaw.net
	Signed-off-by: Ian Kent <raven@themaw.net>
	Cc: Tomohiro Kusumi <tkusumi@tuxera.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 092a53452bb7a6ca436b2d3859e7b1f1ec45479f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/autofs4/root.c
diff --cc fs/autofs4/root.c
index 964ece519dda,d79ced925861..000000000000
--- a/fs/autofs4/root.c
+++ b/fs/autofs4/root.c
@@@ -279,12 -278,11 +279,18 @@@ static int autofs4_mount_wait(struct de
  	if (ino->flags & AUTOFS_INF_PENDING) {
  		if (rcu_walk)
  			return -ECHILD;
++<<<<<<< HEAD
 +		DPRINTK("waiting for mount name=%.*s",
 +			dentry->d_name.len, dentry->d_name.name);
 +		status = autofs4_wait(sbi, dentry, NFY_MOUNT);
 +		DPRINTK("mount wait done status=%d", status);
++=======
+ 		pr_debug("waiting for mount name=%pd\n", path->dentry);
+ 		status = autofs4_wait(sbi, path, NFY_MOUNT);
+ 		pr_debug("mount wait done status=%d\n", status);
+ 		ino->last_used = jiffies;
++>>>>>>> 092a53452bb7 (autofs: take more care to not update last_used on path walk)
  	}
- 	ino->last_used = jiffies;
  	return status;
  }
  
@@@ -321,14 -321,21 +327,26 @@@ static struct dentry *autofs4_mountpoin
  	 */
  	if (autofs_type_indirect(sbi->type) && d_unhashed(dentry)) {
  		struct dentry *parent = dentry->d_parent;
++<<<<<<< HEAD
 +		struct autofs_info *ino;
 +		struct dentry *new = d_lookup(parent, &dentry->d_name);
++=======
+ 		struct dentry *new;
+ 
+ 		new = d_lookup(parent, &dentry->d_name);
++>>>>>>> 092a53452bb7 (autofs: take more care to not update last_used on path walk)
  		if (!new)
  			return NULL;
- 		ino = autofs4_dentry_ino(new);
- 		ino->last_used = jiffies;
- 		dput(path->dentry);
- 		path->dentry = new;
+ 		if (new == dentry)
+ 			dput(new);
+ 		else {
+ 			struct autofs_info *ino;
+ 
+ 			ino = autofs4_dentry_ino(new);
+ 			ino->last_used = jiffies;
+ 			dput(path->dentry);
+ 			path->dentry = new;
+ 		}
  	}
  	return path->dentry;
  }
* Unmerged path fs/autofs4/root.c
