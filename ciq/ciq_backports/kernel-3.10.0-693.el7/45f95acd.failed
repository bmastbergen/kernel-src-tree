IB/mlx5: Rename RoCE related helpers to reflect being Eth ones

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit 45f95acd63222dd1dc752fa904536327b10f1082
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/45f95acd.failed

This is a pre-step towards having mlx5 IB device also over Eth ports where
RoCE is not supported. We change the roce enable/disable and roce_lag
init/fini function names to have _eth instead of _roce.

This patch doesn't change any functionality.

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 45f95acd63222dd1dc752fa904536327b10f1082)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index 37c188b28ba8,b5b7459e9af0..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -2641,7 -2802,70 +2641,74 @@@ static void get_dev_fw_str(struct ib_de
  		       fw_rev_min(dev->mdev), fw_rev_sub(dev->mdev));
  }
  
++<<<<<<< HEAD
 +static int mlx5_enable_roce(struct mlx5_ib_dev *dev)
++=======
+ static int mlx5_eth_lag_init(struct mlx5_ib_dev *dev)
+ {
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 	struct mlx5_flow_namespace *ns = mlx5_get_flow_namespace(mdev,
+ 								 MLX5_FLOW_NAMESPACE_LAG);
+ 	struct mlx5_flow_table *ft;
+ 	int err;
+ 
+ 	if (!ns || !mlx5_lag_is_active(mdev))
+ 		return 0;
+ 
+ 	err = mlx5_cmd_create_vport_lag(mdev);
+ 	if (err)
+ 		return err;
+ 
+ 	ft = mlx5_create_lag_demux_flow_table(ns, 0, 0);
+ 	if (IS_ERR(ft)) {
+ 		err = PTR_ERR(ft);
+ 		goto err_destroy_vport_lag;
+ 	}
+ 
+ 	dev->flow_db.lag_demux_ft = ft;
+ 	return 0;
+ 
+ err_destroy_vport_lag:
+ 	mlx5_cmd_destroy_vport_lag(mdev);
+ 	return err;
+ }
+ 
+ static void mlx5_eth_lag_cleanup(struct mlx5_ib_dev *dev)
+ {
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 
+ 	if (dev->flow_db.lag_demux_ft) {
+ 		mlx5_destroy_flow_table(dev->flow_db.lag_demux_ft);
+ 		dev->flow_db.lag_demux_ft = NULL;
+ 
+ 		mlx5_cmd_destroy_vport_lag(mdev);
+ 	}
+ }
+ 
+ static int mlx5_add_netdev_notifier(struct mlx5_ib_dev *dev)
+ {
+ 	int err;
+ 
+ 	dev->roce.nb.notifier_call = mlx5_netdev_event;
+ 	err = register_netdevice_notifier(&dev->roce.nb);
+ 	if (err) {
+ 		dev->roce.nb.notifier_call = NULL;
+ 		return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void mlx5_remove_netdev_notifier(struct mlx5_ib_dev *dev)
+ {
+ 	if (dev->roce.nb.notifier_call) {
+ 		unregister_netdevice_notifier(&dev->roce.nb);
+ 		dev->roce.nb.notifier_call = NULL;
+ 	}
+ }
+ 
+ static int mlx5_enable_eth(struct mlx5_ib_dev *dev)
++>>>>>>> 45f95acd6322 (IB/mlx5: Rename RoCE related helpers to reflect being Eth ones)
  {
  	int err;
  
@@@ -2654,17 -2877,59 +2721,28 @@@
  	if (err)
  		goto err_unregister_netdevice_notifier;
  
++<<<<<<< HEAD
++=======
+ 	err = mlx5_eth_lag_init(dev);
+ 	if (err)
+ 		goto err_disable_roce;
+ 
++>>>>>>> 45f95acd6322 (IB/mlx5: Rename RoCE related helpers to reflect being Eth ones)
  	return 0;
  
 -err_disable_roce:
 -	mlx5_nic_vport_disable_roce(dev->mdev);
 -
  err_unregister_netdevice_notifier:
 -	mlx5_remove_netdev_notifier(dev);
 +	unregister_netdevice_notifier_rh(&dev->roce.nb);
  	return err;
  }
  
- static void mlx5_disable_roce(struct mlx5_ib_dev *dev)
+ static void mlx5_disable_eth(struct mlx5_ib_dev *dev)
  {
++<<<<<<< HEAD
++=======
+ 	mlx5_eth_lag_cleanup(dev);
++>>>>>>> 45f95acd6322 (IB/mlx5: Rename RoCE related helpers to reflect being Eth ones)
  	mlx5_nic_vport_disable_roce(dev->mdev);
 -}
 -
 -static void mlx5_ib_dealloc_q_counters(struct mlx5_ib_dev *dev)
 -{
 -	unsigned int i;
 -
 -	for (i = 0; i < dev->num_ports; i++)
 -		mlx5_core_dealloc_q_counter(dev->mdev,
 -					    dev->port[i].q_cnt_id);
 -}
 -
 -static int mlx5_ib_alloc_q_counters(struct mlx5_ib_dev *dev)
 -{
 -	int i;
 -	int ret;
 -
 -	for (i = 0; i < dev->num_ports; i++) {
 -		ret = mlx5_core_alloc_q_counter(dev->mdev,
 -						&dev->port[i].q_cnt_id);
 -		if (ret) {
 -			mlx5_ib_warn(dev,
 -				     "couldn't allocate queue counter for port %d, err %d\n",
 -				     i + 1, ret);
 -			goto dealloc_counters;
 -		}
 -	}
 -
 -	return 0;
 -
 -dealloc_counters:
 -	while (--i >= 0)
 -		mlx5_core_dealloc_q_counter(dev->mdev,
 -					    dev->port[i].q_cnt_id);
 -
 -	return ret;
 +	unregister_netdevice_notifier_rh(&dev->roce.nb);
  }
  
  static const char * const names[] = {
@@@ -2954,11 -3195,13 +3032,11 @@@ static void *mlx5_ib_add(struct mlx5_co
  
  	mutex_init(&dev->flow_db.lock);
  	mutex_init(&dev->cap_mask_mutex);
 -	INIT_LIST_HEAD(&dev->qp_list);
 -	spin_lock_init(&dev->reset_flow_resource_lock);
  
  	if (ll == IB_LINK_LAYER_ETHERNET) {
- 		err = mlx5_enable_roce(dev);
+ 		err = mlx5_enable_eth(dev);
  		if (err)
 -			goto err_dealloc;
 +			goto err_free_port;
  	}
  
  	err = create_dev_resources(&dev->devr);
@@@ -3007,9 -3250,11 +3085,17 @@@ err_odp
  err_rsrc:
  	destroy_dev_resources(&dev->devr);
  
++<<<<<<< HEAD
 +err_disable_roce:
 +	if (ll == IB_LINK_LAYER_ETHERNET)
 +		mlx5_disable_roce(dev);
++=======
+ err_disable_eth:
+ 	if (ll == IB_LINK_LAYER_ETHERNET) {
+ 		mlx5_disable_eth(dev);
+ 		mlx5_remove_netdev_notifier(dev);
+ 	}
++>>>>>>> 45f95acd6322 (IB/mlx5: Rename RoCE related helpers to reflect being Eth ones)
  
  err_free_port:
  	kfree(dev->port);
* Unmerged path drivers/infiniband/hw/mlx5/main.c
