HID: wacom: break out wacom_intuos_get_tool_type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: break out wacom_intuos_get_tool_type (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 94.51%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 7e129783b02081a866a7264473bc784cdfe69265
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7e129783.failed

Allow to reuse the code in a later series and simplifies
the reading of wacom_intuos_inout().

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 7e129783b02081a866a7264473bc784cdfe69265)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index 98c7d65145c2,bd198bbd4df0..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -308,6 -436,230 +308,233 @@@ exit
  	return retval;
  }
  
++<<<<<<< HEAD
++=======
+ static void wacom_intuos_schedule_prox_event(struct wacom_wac *wacom_wac)
+ {
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	struct hid_report *r;
+ 	struct hid_report_enum *re;
+ 
+ 	re = &(wacom->hdev->report_enum[HID_FEATURE_REPORT]);
+ 	if (features->type == INTUOSHT2)
+ 		r = re->report_id_hash[WACOM_REPORT_INTUOSHT2_ID];
+ 	else
+ 		r = re->report_id_hash[WACOM_REPORT_INTUOS_ID1];
+ 	if (r) {
+ 		hid_hw_request(wacom->hdev, r, HID_REQ_GET_REPORT);
+ 	}
+ }
+ 
+ static int wacom_intuos_pad(struct wacom_wac *wacom)
+ {
+ 	struct wacom_features *features = &wacom->features;
+ 	unsigned char *data = wacom->data;
+ 	struct input_dev *input = wacom->pad_input;
+ 	int i;
+ 	int buttons = 0, nbuttons = features->numbered_buttons;
+ 	int keys = 0, nkeys = 0;
+ 	int ring1 = 0, ring2 = 0;
+ 	int strip1 = 0, strip2 = 0;
+ 	bool prox = false;
+ 
+ 	/* pad packets. Works as a second tool and is always in prox */
+ 	if (!(data[0] == WACOM_REPORT_INTUOSPAD || data[0] == WACOM_REPORT_INTUOS5PAD ||
+ 	      data[0] == WACOM_REPORT_CINTIQPAD))
+ 		return 0;
+ 
+ 	if (features->type >= INTUOS4S && features->type <= INTUOS4L) {
+ 		buttons = (data[3] << 1) | (data[2] & 0x01);
+ 		ring1 = data[1];
+ 	} else if (features->type == DTK) {
+ 		buttons = data[6];
+ 	} else if (features->type == WACOM_13HD) {
+ 		buttons = (data[4] << 1) | (data[3] & 0x01);
+ 	} else if (features->type == WACOM_24HD) {
+ 		buttons = (data[8] << 8) | data[6];
+ 		ring1 = data[1];
+ 		ring2 = data[2];
+ 
+ 		/*
+ 		 * Three "buttons" are available on the 24HD which are
+ 		 * physically implemented as a touchstrip. Each button
+ 		 * is approximately 3 bits wide with a 2 bit spacing.
+ 		 * The raw touchstrip bits are stored at:
+ 		 *    ((data[3] & 0x1f) << 8) | data[4])
+ 		 */
+ 		nkeys = 3;
+ 		keys = ((data[3] & 0x1C) ? 1<<2 : 0) |
+ 		       ((data[4] & 0xE0) ? 1<<1 : 0) |
+ 		       ((data[4] & 0x07) ? 1<<0 : 0);
+ 	} else if (features->type == WACOM_27QHD) {
+ 		nkeys = 3;
+ 		keys = data[2] & 0x07;
+ 
+ 		input_report_abs(input, ABS_X, be16_to_cpup((__be16 *)&data[4]));
+ 		input_report_abs(input, ABS_Y, be16_to_cpup((__be16 *)&data[6]));
+ 		input_report_abs(input, ABS_Z, be16_to_cpup((__be16 *)&data[8]));
+ 	} else if (features->type == CINTIQ_HYBRID) {
+ 		/*
+ 		 * Do not send hardware buttons under Android. They
+ 		 * are already sent to the system through GPIO (and
+ 		 * have different meaning).
+ 		 *
+ 		 * d-pad right  -> data[4] & 0x10
+ 		 * d-pad up     -> data[4] & 0x20
+ 		 * d-pad left   -> data[4] & 0x40
+ 		 * d-pad down   -> data[4] & 0x80
+ 		 * d-pad center -> data[3] & 0x01
+ 		 */
+ 		buttons = (data[4] << 1) | (data[3] & 0x01);
+ 	} else if (features->type == CINTIQ_COMPANION_2) {
+ 		/* d-pad right  -> data[4] & 0x10
+ 		 * d-pad up     -> data[4] & 0x20
+ 		 * d-pad left   -> data[4] & 0x40
+ 		 * d-pad down   -> data[4] & 0x80
+ 		 * d-pad center -> data[3] & 0x01
+ 		 */
+ 		buttons = ((data[2] >> 4) << 7) |
+ 		          ((data[1] & 0x04) << 6) |
+ 		          ((data[2] & 0x0F) << 2) |
+ 		          (data[1] & 0x03);
+ 	} else if (features->type >= INTUOS5S && features->type <= INTUOSPL) {
+ 		/*
+ 		 * ExpressKeys on Intuos5/Intuos Pro have a capacitive sensor in
+ 		 * addition to the mechanical switch. Switch data is
+ 		 * stored in data[4], capacitive data in data[5].
+ 		 *
+ 		 * Touch ring mode switch (data[3]) has no capacitive sensor
+ 		 */
+ 		buttons = (data[4] << 1) | (data[3] & 0x01);
+ 		ring1 = data[2];
+ 	} else {
+ 		if (features->type == WACOM_21UX2 || features->type == WACOM_22HD) {
+ 			buttons = (data[8] << 10) | ((data[7] & 0x01) << 9) |
+ 			          (data[6] << 1) | (data[5] & 0x01);
+ 
+ 			if (features->type == WACOM_22HD) {
+ 				nkeys = 3;
+ 				keys = data[9] & 0x07;
+ 			}
+ 		} else {
+ 			buttons = ((data[6] & 0x10) << 10) |
+ 			          ((data[5] & 0x10) << 9)  |
+ 			          ((data[6] & 0x0F) << 4)  |
+ 			          (data[5] & 0x0F);
+ 		}
+ 		strip1 = ((data[1] & 0x1f) << 8) | data[2];
+ 		strip2 = ((data[3] & 0x1f) << 8) | data[4];
+ 	}
+ 
+ 	prox = (buttons & ~(~0 << nbuttons)) | (keys & ~(~0 << nkeys)) |
+ 	       (ring1 & 0x80) | (ring2 & 0x80) | strip1 | strip2;
+ 
+ 	wacom_report_numbered_buttons(input, nbuttons, buttons);
+ 
+ 	for (i = 0; i < nkeys; i++)
+ 		input_report_key(input, KEY_PROG1 + i, keys & (1 << i));
+ 
+ 	input_report_abs(input, ABS_RX, strip1);
+ 	input_report_abs(input, ABS_RY, strip2);
+ 
+ 	input_report_abs(input, ABS_WHEEL,    (ring1 & 0x80) ? (ring1 & 0x7f) : 0);
+ 	input_report_abs(input, ABS_THROTTLE, (ring2 & 0x80) ? (ring2 & 0x7f) : 0);
+ 
+ 	input_report_key(input, wacom->tool[1], prox ? 1 : 0);
+ 	input_report_abs(input, ABS_MISC, prox ? PAD_DEVICE_ID : 0);
+ 
+ 	input_event(input, EV_MSC, MSC_SERIAL, 0xffffffff);
+ 
+ 	return 1;
+ }
+ 
+ static int wacom_intuos_get_tool_type(int tool_id)
+ {
+ 	int tool_type;
+ 
+ 	switch (tool_id) {
+ 	case 0x812: /* Inking pen */
+ 	case 0x801: /* Intuos3 Inking pen */
+ 	case 0x120802: /* Intuos4/5 Inking Pen */
+ 	case 0x012:
+ 		tool_type = BTN_TOOL_PENCIL;
+ 		break;
+ 
+ 	case 0x822: /* Pen */
+ 	case 0x842:
+ 	case 0x852:
+ 	case 0x823: /* Intuos3 Grip Pen */
+ 	case 0x813: /* Intuos3 Classic Pen */
+ 	case 0x885: /* Intuos3 Marker Pen */
+ 	case 0x802: /* Intuos4/5 13HD/24HD General Pen */
+ 	case 0x804: /* Intuos4/5 13HD/24HD Marker Pen */
+ 	case 0x8e2: /* IntuosHT2 pen */
+ 	case 0x022:
+ 	case 0x100804: /* Intuos4/5 13HD/24HD Art Pen */
+ 	case 0x140802: /* Intuos4/5 13HD/24HD Classic Pen */
+ 	case 0x160802: /* Cintiq 13HD Pro Pen */
+ 	case 0x180802: /* DTH2242 Pen */
+ 	case 0x100802: /* Intuos4/5 13HD/24HD General Pen */
+ 		tool_type = BTN_TOOL_PEN;
+ 		break;
+ 
+ 	case 0x832: /* Stroke pen */
+ 	case 0x032:
+ 		tool_type = BTN_TOOL_BRUSH;
+ 		break;
+ 
+ 	case 0x007: /* Mouse 4D and 2D */
+ 	case 0x09c:
+ 	case 0x094:
+ 	case 0x017: /* Intuos3 2D Mouse */
+ 	case 0x806: /* Intuos4 Mouse */
+ 		tool_type = BTN_TOOL_MOUSE;
+ 		break;
+ 
+ 	case 0x096: /* Lens cursor */
+ 	case 0x097: /* Intuos3 Lens cursor */
+ 	case 0x006: /* Intuos4 Lens cursor */
+ 		tool_type = BTN_TOOL_LENS;
+ 		break;
+ 
+ 	case 0x82a: /* Eraser */
+ 	case 0x85a:
+ 	case 0x91a:
+ 	case 0xd1a:
+ 	case 0x0fa:
+ 	case 0x82b: /* Intuos3 Grip Pen Eraser */
+ 	case 0x81b: /* Intuos3 Classic Pen Eraser */
+ 	case 0x91b: /* Intuos3 Airbrush Eraser */
+ 	case 0x80c: /* Intuos4/5 13HD/24HD Marker Pen Eraser */
+ 	case 0x80a: /* Intuos4/5 13HD/24HD General Pen Eraser */
+ 	case 0x90a: /* Intuos4/5 13HD/24HD Airbrush Eraser */
+ 	case 0x14080a: /* Intuos4/5 13HD/24HD Classic Pen Eraser */
+ 	case 0x10090a: /* Intuos4/5 13HD/24HD Airbrush Eraser */
+ 	case 0x10080c: /* Intuos4/5 13HD/24HD Art Pen Eraser */
+ 	case 0x16080a: /* Cintiq 13HD Pro Pen Eraser */
+ 	case 0x18080a: /* DTH2242 Eraser */
+ 	case 0x10080a: /* Intuos4/5 13HD/24HD General Pen Eraser */
+ 		tool_type = BTN_TOOL_RUBBER;
+ 		break;
+ 
+ 	case 0xd12:
+ 	case 0x912:
+ 	case 0x112:
+ 	case 0x913: /* Intuos3 Airbrush */
+ 	case 0x902: /* Intuos4/5 13HD/24HD Airbrush */
+ 	case 0x100902: /* Intuos4/5 13HD/24HD Airbrush */
+ 		tool_type = BTN_TOOL_AIRBRUSH;
+ 		break;
+ 
+ 	default: /* Unknown tool */
+ 		tool_type = BTN_TOOL_PEN;
+ 		break;
+ 	}
+ 	return tool_type;
+ }
+ 
++>>>>>>> 7e129783b020 (HID: wacom: break out wacom_intuos_get_tool_type)
  static int wacom_intuos_inout(struct wacom_wac *wacom)
  {
  	struct wacom_features *features = &wacom->features;
@@@ -332,83 -682,8 +559,80 @@@
  		wacom->id[idx] = (data[2] << 4) | (data[3] >> 4) |
  			((data[7] & 0x0f) << 20) | ((data[8] & 0xf0) << 12);
  
- 		switch (wacom->id[idx]) {
- 		case 0x812: /* Inking pen */
- 		case 0x801: /* Intuos3 Inking pen */
- 		case 0x120802: /* Intuos4/5 Inking Pen */
- 		case 0x012:
- 			wacom->tool[idx] = BTN_TOOL_PENCIL;
- 			break;
+ 		wacom->tool[idx] = wacom_intuos_get_tool_type(wacom->id[idx]);
  
++<<<<<<< HEAD
 +		case 0x822: /* Pen */
 +		case 0x842:
 +		case 0x852:
 +		case 0x823: /* Intuos3 Grip Pen */
 +		case 0x813: /* Intuos3 Classic Pen */
 +		case 0x885: /* Intuos3 Marker Pen */
 +		case 0x802: /* Intuos4/5 13HD/24HD General Pen */
 +		case 0x804: /* Intuos4/5 13HD/24HD Marker Pen */
 +		case 0x022:
 +		case 0x100804: /* Intuos4/5 13HD/24HD Art Pen */
 +		case 0x140802: /* Intuos4/5 13HD/24HD Classic Pen */
 +		case 0x160802: /* Cintiq 13HD Pro Pen */
 +		case 0x180802: /* DTH2242 Pen */
 +		case 0x100802: /* Intuos4/5 13HD/24HD General Pen */
 +			wacom->tool[idx] = BTN_TOOL_PEN;
 +			break;
 +
 +		case 0x832: /* Stroke pen */
 +		case 0x032:
 +			wacom->tool[idx] = BTN_TOOL_BRUSH;
 +			break;
 +
 +		case 0x007: /* Mouse 4D and 2D */
 +		case 0x09c:
 +		case 0x094:
 +		case 0x017: /* Intuos3 2D Mouse */
 +		case 0x806: /* Intuos4 Mouse */
 +			wacom->tool[idx] = BTN_TOOL_MOUSE;
 +			break;
 +
 +		case 0x096: /* Lens cursor */
 +		case 0x097: /* Intuos3 Lens cursor */
 +		case 0x006: /* Intuos4 Lens cursor */
 +			wacom->tool[idx] = BTN_TOOL_LENS;
 +			break;
 +
 +		case 0x82a: /* Eraser */
 +		case 0x85a:
 +		case 0x91a:
 +		case 0xd1a:
 +		case 0x0fa:
 +		case 0x82b: /* Intuos3 Grip Pen Eraser */
 +		case 0x81b: /* Intuos3 Classic Pen Eraser */
 +		case 0x91b: /* Intuos3 Airbrush Eraser */
 +		case 0x80c: /* Intuos4/5 13HD/24HD Marker Pen Eraser */
 +		case 0x80a: /* Intuos4/5 13HD/24HD General Pen Eraser */
 +		case 0x90a: /* Intuos4/5 13HD/24HD Airbrush Eraser */
 +		case 0x14080a: /* Intuos4/5 13HD/24HD Classic Pen Eraser */
 +		case 0x10090a: /* Intuos4/5 13HD/24HD Airbrush Eraser */
 +		case 0x10080c: /* Intuos4/5 13HD/24HD Art Pen Eraser */
 +		case 0x16080a: /* Cintiq 13HD Pro Pen Eraser */
 +		case 0x18080a: /* DTH2242 Eraser */
 +		case 0x10080a: /* Intuos4/5 13HD/24HD General Pen Eraser */
 +			wacom->tool[idx] = BTN_TOOL_RUBBER;
 +			break;
 +
 +		case 0xd12:
 +		case 0x912:
 +		case 0x112:
 +		case 0x913: /* Intuos3 Airbrush */
 +		case 0x902: /* Intuos4/5 13HD/24HD Airbrush */
 +		case 0x100902: /* Intuos4/5 13HD/24HD Airbrush */
 +			wacom->tool[idx] = BTN_TOOL_AIRBRUSH;
 +			break;
 +
 +		default: /* Unknown tool */
 +			wacom->tool[idx] = BTN_TOOL_PEN;
 +			break;
 +		}
++=======
++>>>>>>> 7e129783b020 (HID: wacom: break out wacom_intuos_get_tool_type)
  		return 1;
  	}
  
* Unmerged path drivers/hid/wacom_wac.c
