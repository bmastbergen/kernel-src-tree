net: dev: Fix non-RCU based lower dev walker

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] dev: Fix non-RCU based lower dev walker (Ivan Vecera) [1382040]
Rebuild_FUZZ: 93.98%
commit-author David Ahern <dsa@cumulusnetworks.com>
commit 46b5ab1a7cfef72cc15e9de135650851619bc406
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/46b5ab1a.failed

netdev_walk_all_lower_dev is not properly walking the lower device
list.  Commit 1a3f060c1a47 made netdev_walk_all_lower_dev similar
to netdev_walk_all_upper_dev_rcu and netdev_walk_all_lower_dev_rcu
but failed to update its netdev_next_lower_dev iterator. This patch
fixes that.

Fixes: 1a3f060c1a47 ("net: Introduce new api for walking upper and
                     lower devices")
	Reported-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David Ahern <dsa@cumulusnetworks.com>
	Tested-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 46b5ab1a7cfef72cc15e9de135650851619bc406)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 48cb2232de86,6aa43cd8cbb5..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -5155,6 -5389,64 +5155,67 @@@ void *netdev_lower_get_next(struct net_
  	if (&lower->list == &dev->adj_list.lower)
  		return NULL;
  
++<<<<<<< HEAD
++=======
+ 	*iter = lower->list.next;
+ 
+ 	return lower->dev;
+ }
+ EXPORT_SYMBOL(netdev_lower_get_next);
+ 
+ static struct net_device *netdev_next_lower_dev(struct net_device *dev,
+ 						struct list_head **iter)
+ {
+ 	struct netdev_adjacent *lower;
+ 
+ 	lower = list_entry((*iter)->next, struct netdev_adjacent, list);
+ 
+ 	if (&lower->list == &dev->adj_list.lower)
+ 		return NULL;
+ 
+ 	*iter = &lower->list;
+ 
+ 	return lower->dev;
+ }
+ 
+ int netdev_walk_all_lower_dev(struct net_device *dev,
+ 			      int (*fn)(struct net_device *dev,
+ 					void *data),
+ 			      void *data)
+ {
+ 	struct net_device *ldev;
+ 	struct list_head *iter;
+ 	int ret;
+ 
+ 	for (iter = &dev->adj_list.lower,
+ 	     ldev = netdev_next_lower_dev(dev, &iter);
+ 	     ldev;
+ 	     ldev = netdev_next_lower_dev(dev, &iter)) {
+ 		/* first is the lower device itself */
+ 		ret = fn(ldev, data);
+ 		if (ret)
+ 			return ret;
+ 
+ 		/* then look at all of its lower devices */
+ 		ret = netdev_walk_all_lower_dev(ldev, fn, data);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(netdev_walk_all_lower_dev);
+ 
+ static struct net_device *netdev_next_lower_dev_rcu(struct net_device *dev,
+ 						    struct list_head **iter)
+ {
+ 	struct netdev_adjacent *lower;
+ 
+ 	lower = list_entry_rcu((*iter)->next, struct netdev_adjacent, list);
+ 	if (&lower->list == &dev->adj_list.lower)
+ 		return NULL;
+ 
++>>>>>>> 46b5ab1a7cfe (net: dev: Fix non-RCU based lower dev walker)
  	*iter = &lower->list;
  
  	return lower->dev;
* Unmerged path net/core/dev.c
