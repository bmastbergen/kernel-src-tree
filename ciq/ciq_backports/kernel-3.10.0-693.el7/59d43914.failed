vfs: make guard_bh_eod() more generic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Akinobu Mita <akinobu.mita@gmail.com>
commit 59d43914ed7b96255271ad6b7b735344beffa3c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/59d43914.failed

This patchset implements readpages() operation for block device by using
mpage_readpages() which can create multipage BIOs instead of BIOs for each
page and reduce system CPU time consumption.

This patch (of 3):

guard_bh_eod() is used in submit_bh() to allow us to do IO even on the odd
last sectors of a device, even if the block size is some multiple of the
physical sector size.  This makes guard_bh_eod() more generic and renames
it guard_bio_eod() so that we can use it without struct buffer_head
argument.

The reason for this change is that using mpage_readpages() for block
device requires to add this guard check in mpage code.

	Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
	Cc: Jens Axboe <axboe@kernel.dk>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Jeff Moyer <jmoyer@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 59d43914ed7b96255271ad6b7b735344beffa3c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/buffer.c
diff --cc fs/buffer.c
index ace86fe2bca8,e442a26e80f7..000000000000
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@@ -2955,20 -2981,19 +2956,30 @@@ static void guard_bio_eod(int rw, struc
  	 * let it through, and the IO layer will turn it into
  	 * an EIO.
  	 */
 -	if (unlikely(bio->bi_iter.bi_sector >= maxsector))
 +	if (unlikely(bio->bi_sector >= maxsector))
  		return;
  
++<<<<<<< HEAD
 +	maxsector -= bio->bi_sector;
 +	bytes = bio->bi_size;
 +	if (likely((bytes >> 9) <= maxsector))
++=======
+ 	maxsector -= bio->bi_iter.bi_sector;
+ 	if (likely((bio->bi_iter.bi_size >> 9) <= maxsector))
++>>>>>>> 59d43914ed7b (vfs: make guard_bh_eod() more generic)
  		return;
  
- 	/* Uhhuh. We've got a bh that straddles the device size! */
- 	bytes = maxsector << 9;
+ 	/* Uhhuh. We've got a bio that straddles the device size! */
+ 	truncated_bytes = bio->bi_iter.bi_size - (maxsector << 9);
  
  	/* Truncate the bio.. */
++<<<<<<< HEAD
 +	bio->bi_size = bytes;
 +	bio->bi_io_vec[0].bv_len = bytes;
++=======
+ 	bio->bi_iter.bi_size -= truncated_bytes;
+ 	bvec->bv_len -= truncated_bytes;
++>>>>>>> 59d43914ed7b (vfs: make guard_bh_eod() more generic)
  
  	/* ..and clear the end of the buffer for reads */
  	if ((rw & RW_MASK) == READ) {
* Unmerged path fs/buffer.c
