libnl: nla_put_net64(): align on a 64-bit area

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Nicolas Dichtel <nicolas.dichtel@6wind.com>
commit e9bbe898cbe89b17ad3993c136aa13d0431cd537
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e9bbe898.failed

nla_data() is now aligned on a 64-bit area.

The temporary function nla_put_be64_32bit() is removed in this patch.

	Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e9bbe898cbe89b17ad3993c136aa13d0431cd537)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netfilter/ipset/ip_set.h
#	include/net/netlink.h
#	include/uapi/linux/netfilter/ipset/ip_set.h
diff --cc include/linux/netfilter/ipset/ip_set.h
index 18086be8278a,83b9a2e0d8d4..000000000000
--- a/include/linux/netfilter/ipset/ip_set.h
+++ b/include/linux/netfilter/ipset/ip_set.h
@@@ -228,6 -334,43 +228,46 @@@ ip_set_update_counter(struct ip_set_cou
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static inline void
+ ip_set_get_skbinfo(struct ip_set_skbinfo *skbinfo,
+ 		      const struct ip_set_ext *ext,
+ 		      struct ip_set_ext *mext, u32 flags)
+ {
+ 		mext->skbmark = skbinfo->skbmark;
+ 		mext->skbmarkmask = skbinfo->skbmarkmask;
+ 		mext->skbprio = skbinfo->skbprio;
+ 		mext->skbqueue = skbinfo->skbqueue;
+ }
+ static inline bool
+ ip_set_put_skbinfo(struct sk_buff *skb, struct ip_set_skbinfo *skbinfo)
+ {
+ 	/* Send nonzero parameters only */
+ 	return ((skbinfo->skbmark || skbinfo->skbmarkmask) &&
+ 		nla_put_net64(skb, IPSET_ATTR_SKBMARK,
+ 			      cpu_to_be64((u64)skbinfo->skbmark << 32 |
+ 					  skbinfo->skbmarkmask),
+ 			      IPSET_ATTR_PAD)) ||
+ 	       (skbinfo->skbprio &&
+ 		nla_put_net32(skb, IPSET_ATTR_SKBPRIO,
+ 			      cpu_to_be32(skbinfo->skbprio))) ||
+ 	       (skbinfo->skbqueue &&
+ 		nla_put_net16(skb, IPSET_ATTR_SKBQUEUE,
+ 			     cpu_to_be16(skbinfo->skbqueue)));
+ }
+ 
+ static inline void
+ ip_set_init_skbinfo(struct ip_set_skbinfo *skbinfo,
+ 		    const struct ip_set_ext *ext)
+ {
+ 	skbinfo->skbmark = ext->skbmark;
+ 	skbinfo->skbmarkmask = ext->skbmarkmask;
+ 	skbinfo->skbprio = ext->skbprio;
+ 	skbinfo->skbqueue = ext->skbqueue;
+ }
+ 
++>>>>>>> e9bbe898cbe8 (libnl: nla_put_net64(): align on a 64-bit area)
  static inline bool
  ip_set_put_counter(struct sk_buff *skb, struct ip_set_counter *counter)
  {
diff --cc include/net/netlink.h
index 404e1b85fed0,066a921e7cbe..000000000000
--- a/include/net/netlink.h
+++ b/include/net/netlink.h
@@@ -850,10 -860,12 +850,17 @@@ static inline int nla_put_u64(struct sk
   * @skb: socket buffer to add attribute to
   * @attrtype: attribute type
   * @value: numeric value
 - * @padattr: attribute type for the padding
   */
++<<<<<<< HEAD
 +static inline int nla_put_be64(struct sk_buff *skb, int attrtype, __be64 value)
 +{
 +	return nla_put(skb, attrtype, sizeof(__be64), &value);
++=======
+ static inline int nla_put_be64(struct sk_buff *skb, int attrtype, __be64 value,
+ 			       int padattr)
+ {
+ 	return nla_put_64bit(skb, attrtype, sizeof(__be64), &value, padattr);
++>>>>>>> e9bbe898cbe8 (libnl: nla_put_net64(): align on a 64-bit area)
  }
  
  /**
@@@ -861,10 -873,13 +868,17 @@@
   * @skb: socket buffer to add attribute to
   * @attrtype: attribute type
   * @value: numeric value
+  * @padattr: attribute type for the padding
   */
- static inline int nla_put_net64(struct sk_buff *skb, int attrtype, __be64 value)
+ static inline int nla_put_net64(struct sk_buff *skb, int attrtype, __be64 value,
+ 				int padattr)
  {
++<<<<<<< HEAD
 +	return nla_put_be64(skb, attrtype | NLA_F_NET_BYTEORDER, value);
++=======
+ 	return nla_put_be64(skb, attrtype | NLA_F_NET_BYTEORDER, value,
+ 			    padattr);
++>>>>>>> e9bbe898cbe8 (libnl: nla_put_net64(): align on a 64-bit area)
  }
  
  /**
diff --cc include/uapi/linux/netfilter/ipset/ip_set.h
index 8024cdf13b70,ebb5154976de..000000000000
--- a/include/uapi/linux/netfilter/ipset/ip_set.h
+++ b/include/uapi/linux/netfilter/ipset/ip_set.h
@@@ -110,6 -114,11 +110,14 @@@ enum 
  	IPSET_ATTR_IFACE,
  	IPSET_ATTR_BYTES,
  	IPSET_ATTR_PACKETS,
++<<<<<<< HEAD
++=======
+ 	IPSET_ATTR_COMMENT,
+ 	IPSET_ATTR_SKBMARK,
+ 	IPSET_ATTR_SKBPRIO,
+ 	IPSET_ATTR_SKBQUEUE,
+ 	IPSET_ATTR_PAD,
++>>>>>>> e9bbe898cbe8 (libnl: nla_put_net64(): align on a 64-bit area)
  	__IPSET_ATTR_ADT_MAX,
  };
  #define IPSET_ATTR_ADT_MAX	(__IPSET_ATTR_ADT_MAX - 1)
* Unmerged path include/linux/netfilter/ipset/ip_set.h
* Unmerged path include/net/netlink.h
* Unmerged path include/uapi/linux/netfilter/ipset/ip_set.h
