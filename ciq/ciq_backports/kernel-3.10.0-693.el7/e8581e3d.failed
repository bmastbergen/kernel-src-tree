x86/KASLR: Drop CONFIG_RANDOMIZE_BASE_MAX_OFFSET

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] kaslr: Drop CONFIG_RANDOMIZE_BASE_MAX_OFFSET (Baoquan He) [1290840]
Rebuild_FUZZ: 95.65%
commit-author Baoquan He <bhe@redhat.com>
commit e8581e3d67788b6b29d055fa42c6cb5b258fee64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e8581e3d.failed

Currently CONFIG_RANDOMIZE_BASE_MAX_OFFSET is used to limit the maximum
offset for kernel randomization. This limit doesn't need to be a CONFIG
since it is tied completely to KERNEL_IMAGE_SIZE, and will make no sense
once physical and virtual offsets are randomized separately. This patch
removes CONFIG_RANDOMIZE_BASE_MAX_OFFSET and consolidates the Kconfig
help text.

[kees: rewrote changelog, dropped KERNEL_IMAGE_SIZE_DEFAULT, rewrote help]
	Signed-off-by: Baoquan He <bhe@redhat.com>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: H.J. Lu <hjl.tools@gmail.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Yinghai Lu <yinghai@kernel.org>
Link: http://lkml.kernel.org/r/1461185746-8017-3-git-send-email-keescook@chromium.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e8581e3d67788b6b29d055fa42c6cb5b258fee64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/boot/compressed/kaslr.c
#	arch/x86/include/asm/page_64_types.h
diff --cc arch/x86/Kconfig
index 5162fc083bed,5892d549596d..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1789,12 -1929,46 +1789,50 @@@ config RELOCATABL
  
  	  Note: If CONFIG_RELOCATABLE=y, then the kernel runs from the address
  	  it has been loaded at and the compile time physical address
 -	  (CONFIG_PHYSICAL_START) is used as the minimum location.
 +	  (CONFIG_PHYSICAL_START) is ignored.
  
++<<<<<<< HEAD
 +# Relocation on x86-32 needs some additional build support
++=======
+ config RANDOMIZE_BASE
+ 	bool "Randomize the address of the kernel image (KASLR)"
+ 	depends on RELOCATABLE
+ 	default n
+ 	---help---
+ 	  In support of Kernel Address Space Layout Randomization (KASLR),
+ 	  this randomizes the physical address at which the kernel image
+ 	  is decompressed and the virtual address where the kernel
+ 	  image is mapped, as a security feature that deters exploit
+ 	  attempts relying on knowledge of the location of kernel
+ 	  code internals.
+ 
+ 	  The kernel physical and virtual address can be randomized
+ 	  from 16MB up to 1GB on 64-bit and 512MB on 32-bit. (Note that
+ 	  using RANDOMIZE_BASE reduces the memory space available to
+ 	  kernel modules from 1.5GB to 1GB.)
+ 
+ 	  Entropy is generated using the RDRAND instruction if it is
+ 	  supported. If RDTSC is supported, its value is mixed into
+ 	  the entropy pool as well. If neither RDRAND nor RDTSC are
+ 	  supported, then entropy is read from the i8254 timer.
+ 
+ 	  Since the kernel is built using 2GB addressing, and
+ 	  PHYSICAL_ALIGN must be at a minimum of 2MB, only 10 bits of
+ 	  entropy is theoretically possible. Currently, with the
+ 	  default value for PHYSICAL_ALIGN and due to page table
+ 	  layouts, 64-bit uses 9 bits of entropy and 32-bit uses 8 bits.
+ 
+ 	  If CONFIG_HIBERNATE is also enabled, KASLR is disabled at boot
+ 	  time. To enable it, boot with "kaslr" on the kernel command
+ 	  line (which will also disable hibernation).
+ 
+ 	  If unsure, say N.
+ 
+ # Relocation on x86 needs some additional build support
++>>>>>>> e8581e3d6778 (x86/KASLR: Drop CONFIG_RANDOMIZE_BASE_MAX_OFFSET)
  config X86_NEED_RELOCS
  	def_bool y
 -	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
 +	depends on X86_32 && RELOCATABLE
  
  config PHYSICAL_ALIGN
  	hex "Alignment value to which kernel should be aligned"
diff --cc arch/x86/include/asm/page_64_types.h
index 94f1cf6df981,d5c2f8b40faa..000000000000
--- a/arch/x86/include/asm/page_64_types.h
+++ b/arch/x86/include/asm/page_64_types.h
@@@ -38,9 -41,16 +38,17 @@@
  #define __VIRTUAL_MASK_SHIFT	47
  
  /*
 - * Kernel image size is limited to 1GiB due to the fixmap living in the
 - * next 1GiB (see level2_kernel_pgt in arch/x86/kernel/head_64.S). Use
 - * 512MiB by default, leaving 1.5GiB for modules once the page tables
 - * are fully set up. If kernel ASLR is configured, it can extend the
 - * kernel page table mapping, reducing the size of the modules area.
 + * Kernel image size is limited to 512 MB (see level2_kernel_pgt in
 + * arch/x86/kernel/head_64.S), and it is mapped here:
   */
++<<<<<<< HEAD
 +#define KERNEL_IMAGE_SIZE	(512 * 1024 * 1024)
++=======
+ #if defined(CONFIG_RANDOMIZE_BASE)
+ #define KERNEL_IMAGE_SIZE	(1024 * 1024 * 1024)
+ #else
+ #define KERNEL_IMAGE_SIZE	(512 * 1024 * 1024)
+ #endif
++>>>>>>> e8581e3d6778 (x86/KASLR: Drop CONFIG_RANDOMIZE_BASE_MAX_OFFSET)
  
  #endif /* _ASM_X86_PAGE_64_DEFS_H */
* Unmerged path arch/x86/boot/compressed/kaslr.c
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/boot/compressed/kaslr.c
* Unmerged path arch/x86/include/asm/page_64_types.h
