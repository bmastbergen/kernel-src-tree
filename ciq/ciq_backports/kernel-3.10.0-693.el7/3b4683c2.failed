xfs: drop iolock from reclaim context to appease lockdep

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Brian Foster <bfoster@redhat.com>
commit 3b4683c294095b5f777c03307ef8c60f47320e12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3b4683c2.failed

Lockdep complains about use of the iolock in inode reclaim context
because it doesn't understand that reclaim has the last reference to
the inode, and thus an iolock->reclaim->iolock deadlock is not
possible.

The iolock is technically not necessary in xfs_inactive() and was
only added to appease an assert in xfs_free_eofblocks(), which can
be called from other non-reclaim contexts. Therefore, just kill the
assert and drop the use of the iolock from reclaim context to quiet
lockdep.

	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 3b4683c294095b5f777c03307ef8c60f47320e12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_bmap_util.c
#	fs/xfs/xfs_inode.c
diff --cc fs/xfs/xfs_bmap_util.c
index 935fc7ad67c0,de94798f1c1b..000000000000
--- a/fs/xfs/xfs_bmap_util.c
+++ b/fs/xfs/xfs_bmap_util.c
@@@ -858,17 -909,16 +858,28 @@@ xfs_can_free_eofblocks(struct xfs_inod
   */
  int
  xfs_free_eofblocks(
 -	struct xfs_inode	*ip)
 +	xfs_mount_t	*mp,
 +	xfs_inode_t	*ip,
 +	bool		need_iolock)
  {
++<<<<<<< HEAD
 +	xfs_trans_t	*tp;
 +	int		error;
 +	xfs_fileoff_t	end_fsb;
 +	xfs_fileoff_t	last_fsb;
 +	xfs_filblks_t	map_len;
 +	int		nimaps;
 +	xfs_bmbt_irec_t	imap;
++=======
+ 	struct xfs_trans	*tp;
+ 	int			error;
+ 	xfs_fileoff_t		end_fsb;
+ 	xfs_fileoff_t		last_fsb;
+ 	xfs_filblks_t		map_len;
+ 	int			nimaps;
+ 	struct xfs_bmbt_irec	imap;
+ 	struct xfs_mount	*mp = ip->i_mount;
++>>>>>>> 3b4683c29409 (xfs: drop iolock from reclaim context to appease lockdep)
  
  	/*
  	 * Figure out if there are any blocks beyond the end
diff --cc fs/xfs/xfs_inode.c
index 634985fc3aa9,ec9826c56500..000000000000
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@@ -1881,9 -1906,13 +1881,17 @@@ xfs_inactive
  		 * force is true because we are evicting an inode from the
  		 * cache. Post-eof blocks must be freed, lest we end up with
  		 * broken free space accounting.
+ 		 *
+ 		 * Note: don't bother with iolock here since lockdep complains
+ 		 * about acquiring it in reclaim context. We have the only
+ 		 * reference to the inode at this point anyways.
  		 */
  		if (xfs_can_free_eofblocks(ip, true))
++<<<<<<< HEAD
 +			xfs_free_eofblocks(mp, ip, false);
++=======
+ 			xfs_free_eofblocks(ip);
++>>>>>>> 3b4683c29409 (xfs: drop iolock from reclaim context to appease lockdep)
  
  		return;
  	}
* Unmerged path fs/xfs/xfs_bmap_util.c
* Unmerged path fs/xfs/xfs_inode.c
