ACPICA: OSL: Add configurability for generic external functions.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [acpi] acpica: osl: Add configurability for generic external functions (Prarit Bhargava) [1383823 1432953]
Rebuild_FUZZ: 99.21%
commit-author Lv Zheng <lv.zheng@intel.com>
commit 8b9c1152a018883f6f0b841e12e17671f2c64c32
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/8b9c1152.failed

OSPMs like Linux trend to include all header files but leave empty inline
stub functions for a feature that is not configured during build.
This patch adds wrappers mechanism to be used around ACPICA external
interfaces to facilitate OSPM with such configurability.

This patch doesn't include code for Linux to use this new mechanism, thus
no functional change.  Lv Zheng.

	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8b9c1152a018883f6f0b841e12e17671f2c64c32)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/acpi/acpixf.h
diff --cc include/acpi/acpixf.h
index 4f88d18b72e7,ac04985017c5..000000000000
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@@ -56,32 -56,189 +56,213 @@@
  extern u8 acpi_gbl_permanent_mmap;
  
  /*
++<<<<<<< HEAD
++=======
+  * Ensure that the globals are actually defined and initialized only once.
+  *
+  * The use of these macros allows a single list of globals (here) in order
+  * to simplify maintenance of the code.
+  */
+ #ifdef DEFINE_ACPI_GLOBALS
+ #define ACPI_GLOBAL(type,name) \
+ 	extern type name; \
+ 	type name
+ 
+ #define ACPI_INIT_GLOBAL(type,name,value) \
+ 	type name=value
+ 
+ #else
+ #ifndef ACPI_GLOBAL
+ #define ACPI_GLOBAL(type,name) \
+ 	extern type name
+ #endif
+ 
+ #ifndef ACPI_INIT_GLOBAL
+ #define ACPI_INIT_GLOBAL(type,name,value) \
+ 	extern type name
+ #endif
+ #endif
+ 
+ /* ACPICA prototypes */
+ 
+ #ifndef ACPI_EXTERNAL_RETURN_STATUS
+ #define ACPI_EXTERNAL_RETURN_STATUS(prototype) \
+ 	prototype;
+ #endif
+ 
+ #ifndef ACPI_EXTERNAL_RETURN_OK
+ #define ACPI_EXTERNAL_RETURN_OK(prototype) \
+ 	prototype;
+ #endif
+ 
+ #ifndef ACPI_EXTERNAL_RETURN_VOID
+ #define ACPI_EXTERNAL_RETURN_VOID(prototype) \
+ 	prototype;
+ #endif
+ 
+ #ifndef ACPI_EXTERNAL_RETURN_UINT32
+ #define ACPI_EXTERNAL_RETURN_UINT32(prototype) \
+ 	prototype;
+ #endif
+ 
+ #ifndef ACPI_EXTERNAL_RETURN_PTR
+ #define ACPI_EXTERNAL_RETURN_PTR(prototype) \
+ 	prototype;
+ #endif
+ 
+ /* Public globals, available from outside ACPICA subsystem */
+ 
+ /*****************************************************************************
+  *
+  * Runtime configuration (static defaults that can be overriden at runtime)
+  *
+  ****************************************************************************/
+ 
+ /*
+  * Enable "slack" in the AML interpreter?  Default is FALSE, and the
+  * interpreter strictly follows the ACPI specification. Setting to TRUE
+  * allows the interpreter to ignore certain errors and/or bad AML constructs.
+  *
+  * Currently, these features are enabled by this flag:
+  *
+  * 1) Allow "implicit return" of last value in a control method
+  * 2) Allow access beyond the end of an operation region
+  * 3) Allow access to uninitialized locals/args (auto-init to integer 0)
+  * 4) Allow ANY object type to be a source operand for the Store() operator
+  * 5) Allow unresolved references (invalid target name) in package objects
+  * 6) Enable warning messages for behavior that is not ACPI spec compliant
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_enable_interpreter_slack, FALSE);
+ 
+ /*
+  * Automatically serialize all methods that create named objects? Default
+  * is TRUE, meaning that all non_serialized methods are scanned once at
+  * table load time to determine those that create named objects. Methods
+  * that create named objects are marked Serialized in order to prevent
+  * possible run-time problems if they are entered by more than one thread.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_auto_serialize_methods, TRUE);
+ 
+ /*
+  * Create the predefined _OSI method in the namespace? Default is TRUE
+  * because ACPICA is fully compatible with other ACPI implementations.
+  * Changing this will revert ACPICA (and machine ASL) to pre-OSI behavior.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_create_osi_method, TRUE);
+ 
+ /*
+  * Optionally use default values for the ACPI register widths. Set this to
+  * TRUE to use the defaults, if an FADT contains incorrect widths/lengths.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_use_default_register_widths, TRUE);
+ 
+ /*
+  * Optionally enable output from the AML Debug Object.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_enable_aml_debug_object, FALSE);
+ 
+ /*
+  * Optionally copy the entire DSDT to local memory (instead of simply
+  * mapping it.) There are some BIOSs that corrupt or replace the original
+  * DSDT, creating the need for this option. Default is FALSE, do not copy
+  * the DSDT.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_copy_dsdt_locally, FALSE);
+ 
+ /*
+  * Optionally ignore an XSDT if present and use the RSDT instead.
+  * Although the ACPI specification requires that an XSDT be used instead
+  * of the RSDT, the XSDT has been found to be corrupt or ill-formed on
+  * some machines. Default behavior is to use the XSDT if present.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_do_not_use_xsdt, FALSE);
+ 
+ /*
+  * Optionally use 32-bit FADT addresses if and when there is a conflict
+  * (address mismatch) between the 32-bit and 64-bit versions of the
+  * address. Although ACPICA adheres to the ACPI specification which
+  * requires the use of the corresponding 64-bit address if it is non-zero,
+  * some machines have been found to have a corrupted non-zero 64-bit
+  * address. Default is FALSE, do not favor the 32-bit addresses.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_use32_bit_fadt_addresses, FALSE);
+ 
+ /*
+  * Optionally truncate I/O addresses to 16 bits. Provides compatibility
+  * with other ACPI implementations. NOTE: During ACPICA initialization,
+  * this value is set to TRUE if any Windows OSI strings have been
+  * requested by the BIOS.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_truncate_io_addresses, FALSE);
+ 
+ /*
+  * Disable runtime checking and repair of values returned by control methods.
+  * Use only if the repair is causing a problem on a particular machine.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_disable_auto_repair, FALSE);
+ 
+ /*
+  * Optionally do not install any SSDTs from the RSDT/XSDT during initialization.
+  * This can be useful for debugging ACPI problems on some machines.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_disable_ssdt_table_install, FALSE);
+ 
+ /*
+  * We keep track of the latest version of Windows that has been requested by
+  * the BIOS.  ACPI 5.0.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_osi_data, 0);
+ 
+ /*
+  * ACPI 5.0 introduces the concept of a "reduced hardware platform", meaning
+  * that the ACPI hardware is no longer required. A flag in the FADT indicates
+  * a reduced HW machine, and that flag is duplicated here for convenience.
+  */
+ ACPI_INIT_GLOBAL(u8, acpi_gbl_reduced_hardware, FALSE);
+ 
+ /*
+  * This mechanism is used to trace a specified AML method. The method is
+  * traced each time it is executed.
+  */
+ ACPI_INIT_GLOBAL(u32, acpi_gbl_trace_flags, 0);
+ ACPI_INIT_GLOBAL(acpi_name, acpi_gbl_trace_method_name, 0);
+ 
+ /*
+  * Runtime configuration of debug output control masks. We want the debug
+  * switches statically initialized so they are already set when the debugger
+  * is entered.
+  */
+ ACPI_INIT_GLOBAL(u32, acpi_dbg_level, ACPI_DEBUG_DEFAULT);
+ ACPI_INIT_GLOBAL(u32, acpi_dbg_layer, 0);
+ 
+ /*
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
   * Globals that are publically available
   */
 -ACPI_GLOBAL(u32, acpi_current_gpe_count);
 -ACPI_GLOBAL(struct acpi_table_fadt, acpi_gbl_FADT);
 -ACPI_GLOBAL(u8, acpi_gbl_system_awake_and_running);
 +extern u32 acpi_current_gpe_count;
 +extern struct acpi_table_fadt acpi_gbl_FADT;
 +extern u8 acpi_gbl_system_awake_and_running;
 +extern u8 acpi_gbl_reduced_hardware;	/* ACPI 5.0 */
 +extern u8 acpi_gbl_osi_data;
 +
 +/* Runtime configuration of debug print levels */
 +
 +extern u32 acpi_dbg_level;
 +extern u32 acpi_dbg_layer;
 +
 +/* ACPICA runtime options */
 +
 +extern u8 acpi_gbl_enable_interpreter_slack;
 +extern u8 acpi_gbl_all_methods_serialized;
 +extern u8 acpi_gbl_create_osi_method;
 +extern u8 acpi_gbl_use_default_register_widths;
 +extern acpi_name acpi_gbl_trace_method_name;
 +extern u32 acpi_gbl_trace_flags;
 +extern bool acpi_gbl_enable_aml_debug_object;
 +extern u8 acpi_gbl_copy_dsdt_locally;
 +extern u8 acpi_gbl_truncate_io_addresses;
 +extern u8 acpi_gbl_disable_auto_repair;
 +extern u8 acpi_gbl_disable_ssdt_table_load;
  
  /*
   * Hardware-reduced prototypes. All interfaces that use these macros will
@@@ -114,17 -300,18 +295,32 @@@ extern u32 acpi_rsdt_forced
  /*
   * Initialization
   */
++<<<<<<< HEAD
 +acpi_status
 +acpi_initialize_tables(struct acpi_table_desc *initial_storage,
 +		       u32 initial_table_count, u8 allow_resize);
- 
- acpi_status __init acpi_initialize_subsystem(void);
- 
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init
+ 			    acpi_initialize_tables(struct acpi_table_desc
+ 						   *initial_storage,
+ 						   u32 initial_table_count,
+ 						   u8 allow_resize))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init acpi_initialize_subsystem(void))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init acpi_enable_subsystem(u32 flags))
+ 
++<<<<<<< HEAD
 +acpi_status acpi_enable_subsystem(u32 flags);
 +
 +acpi_status acpi_initialize_objects(u32 flags);
 +
 +acpi_status acpi_terminate(void);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init
+ 			    acpi_initialize_objects(u32 flags))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init acpi_terminate(void))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
  /*
   * Miscellaneous global interfaces
@@@ -136,146 -323,173 +332,287 @@@ ACPI_EXTERNAL_RETURN_STATUS(acpi_statu
  #endif
  
  #ifdef ACPI_FUTURE_USAGE
- acpi_status acpi_get_system_info(struct acpi_buffer *ret_buffer);
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_get_system_info(struct acpi_buffer
+ 						 *ret_buffer))
  #endif
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_statistics(struct acpi_statistics *stats))
+ ACPI_EXTERNAL_RETURN_PTR(const char
+ 			  *acpi_format_exception(acpi_status exception))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status acpi_purge_cached_objects(void))
  
++<<<<<<< HEAD
 +const char *acpi_format_exception(acpi_status exception);
 +
 +acpi_status acpi_purge_cached_objects(void);
 +
 +acpi_status acpi_install_interface(acpi_string interface_name);
 +
 +acpi_status acpi_remove_interface(acpi_string interface_name);
 +
 +u32
 +acpi_check_address_range(acpi_adr_space_type space_id,
 +			 acpi_physical_address address,
 +			 acpi_size length, u8 warn);
 +
 +acpi_status
 +acpi_decode_pld_buffer(u8 *in_buffer,
 +		       acpi_size length, struct acpi_pld_info **return_buffer);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_install_interface(acpi_string interface_name))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_remove_interface(acpi_string interface_name))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status acpi_update_interfaces(u8 action))
+ 
+ ACPI_EXTERNAL_RETURN_UINT32(u32
+ 			    acpi_check_address_range(acpi_adr_space_type
+ 						     space_id,
+ 						     acpi_physical_address
+ 						     address, acpi_size length,
+ 						     u8 warn))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_decode_pld_buffer(u8 *in_buffer,
+ 						    acpi_size length,
+ 						    struct acpi_pld_info
+ 						    **return_buffer))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
  /*
   * ACPI table load/unload interfaces
   */
++<<<<<<< HEAD
 +acpi_status acpi_load_table(struct acpi_table_header *table);
 +
 +acpi_status acpi_unload_parent_table(acpi_handle object);
 +
 +acpi_status acpi_load_tables(void);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init
+ 			    acpi_install_table(acpi_physical_address address,
+ 					       u8 physical))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_load_table(struct acpi_table_header *table))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_unload_parent_table(acpi_handle object))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init acpi_load_tables(void))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
  /*
   * ACPI table manipulation interfaces
   */
++<<<<<<< HEAD
 +acpi_status acpi_reallocate_root_table(void);
 +
 +acpi_status acpi_find_root_pointer(acpi_size *rsdp_address);
 +
 +acpi_status acpi_unload_table_id(acpi_owner_id id);
 +
 +acpi_status
 +acpi_get_table_header(acpi_string signature,
 +		      u32 instance, struct acpi_table_header *out_table_header);
 +
 +acpi_status
 +acpi_get_table_with_size(acpi_string signature,
 +	       u32 instance, struct acpi_table_header **out_table,
 +	       acpi_size *tbl_size);
 +acpi_status
 +acpi_get_table(acpi_string signature,
 +	       u32 instance, struct acpi_table_header **out_table);
 +
 +acpi_status
 +acpi_get_table_by_index(u32 table_index, struct acpi_table_header **out_table);
 +
 +acpi_status
 +acpi_install_table_handler(acpi_table_handler handler, void *context);
 +
 +acpi_status acpi_remove_table_handler(acpi_table_handler handler);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init acpi_reallocate_root_table(void))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status __init
+ 			    acpi_find_root_pointer(acpi_size * rsdp_address))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_get_table_header(acpi_string signature,
+ 						  u32 instance,
+ 						  struct acpi_table_header
+ 						  *out_table_header))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_table(acpi_string signature, u32 instance,
+ 					    struct acpi_table_header
+ 					    **out_table))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_table_by_index(u32 table_index,
+ 						     struct acpi_table_header
+ 						     **out_table))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_install_table_handler(acpi_table_handler
+ 							handler, void *context))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_remove_table_handler(acpi_table_handler
+ 						       handler))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
  /*
   * Namespace and name interfaces
   */
++<<<<<<< HEAD
 +acpi_status
 +acpi_walk_namespace(acpi_object_type type,
 +		    acpi_handle start_object,
 +		    u32 max_depth,
 +		    acpi_walk_callback pre_order_visit,
 +		    acpi_walk_callback post_order_visit,
 +		    void *context, void **return_value);
 +
 +acpi_status
 +acpi_get_devices(const char *HID,
 +		 acpi_walk_callback user_function,
 +		 void *context, void **return_value);
 +
 +acpi_status
 +acpi_get_name(acpi_handle object,
 +	      u32 name_type, struct acpi_buffer *ret_path_ptr);
 +
 +acpi_status
 +acpi_get_handle(acpi_handle parent,
 +		acpi_string pathname, acpi_handle * ret_handle);
 +
 +acpi_status
 +acpi_attach_data(acpi_handle object, acpi_object_handler handler, void *data);
 +
 +acpi_status acpi_detach_data(acpi_handle object, acpi_object_handler handler);
 +
 +acpi_status
 +acpi_get_data_full(acpi_handle object, acpi_object_handler handler, void **data,
 +		   void (*callback)(void *));
 +
 +acpi_status
 +acpi_get_data(acpi_handle object, acpi_object_handler handler, void **data);
 +
 +acpi_status
 +acpi_debug_trace(char *name, u32 debug_level, u32 debug_layer, u32 flags);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_walk_namespace(acpi_object_type type,
+ 						acpi_handle start_object,
+ 						u32 max_depth,
+ 						acpi_walk_callback
+ 						descending_callback,
+ 						acpi_walk_callback
+ 						ascending_callback,
+ 						void *context,
+ 						void **return_value))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_devices(const char *HID,
+ 					      acpi_walk_callback user_function,
+ 					      void *context,
+ 					      void **return_value))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_name(acpi_handle object, u32 name_type,
+ 					   struct acpi_buffer *ret_path_ptr))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_handle(acpi_handle parent,
+ 					     acpi_string pathname,
+ 					     acpi_handle * ret_handle))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_attach_data(acpi_handle object,
+ 					      acpi_object_handler handler,
+ 					      void *data))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_detach_data(acpi_handle object,
+ 					      acpi_object_handler handler))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_data(acpi_handle object,
+ 					   acpi_object_handler handler,
+ 					   void **data))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_debug_trace(char *name, u32 debug_level,
+ 					      u32 debug_layer, u32 flags))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
  /*
   * Object manipulation and enumeration
   */
- acpi_status
- acpi_evaluate_object(acpi_handle object,
- 		     acpi_string pathname,
- 		     struct acpi_object_list *parameter_objects,
- 		     struct acpi_buffer *return_object_buffer);
- 
- acpi_status
- acpi_evaluate_object_typed(acpi_handle object,
- 			   acpi_string pathname,
- 			   struct acpi_object_list *external_params,
- 			   struct acpi_buffer *return_buffer,
- 			   acpi_object_type return_type);
- 
- acpi_status
- acpi_get_object_info(acpi_handle object,
- 		     struct acpi_device_info **return_buffer);
- 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_evaluate_object(acpi_handle object,
+ 						 acpi_string pathname,
+ 						 struct acpi_object_list
+ 						 *parameter_objects,
+ 						 struct acpi_buffer
+ 						 *return_object_buffer))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_evaluate_object_typed(acpi_handle object,
+ 							acpi_string pathname,
+ 							struct acpi_object_list
+ 							*external_params,
+ 							struct acpi_buffer
+ 							*return_buffer,
+ 							acpi_object_type
+ 							return_type))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_get_object_info(acpi_handle object,
+ 						  struct acpi_device_info
+ 						  **return_buffer))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status acpi_install_method(u8 *buffer))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_get_next_object(acpi_object_type type,
+ 						 acpi_handle parent,
+ 						 acpi_handle child,
+ 						 acpi_handle * out_handle))
+ 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_get_type(acpi_handle object,
+ 					  acpi_object_type * out_type))
+ 
++<<<<<<< HEAD
 +acpi_status acpi_install_method(u8 *buffer);
 +
 +acpi_status
 +acpi_get_next_object(acpi_object_type type,
 +		     acpi_handle parent,
 +		     acpi_handle child, acpi_handle * out_handle);
 +
 +acpi_status acpi_get_type(acpi_handle object, acpi_object_type * out_type);
 +
 +acpi_status acpi_get_id(acpi_handle object, acpi_owner_id * out_type);
 +
 +acpi_status acpi_get_parent(acpi_handle object, acpi_handle * out_handle);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_get_parent(acpi_handle object,
+ 					    acpi_handle * out_handle))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
  /*
   * Handler interfaces
   */
- acpi_status
- acpi_install_initialization_handler(acpi_init_handler handler, u32 function);
- 
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_install_initialization_handler
+ 			    (acpi_init_handler handler, u32 function))
  ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_status
++<<<<<<< HEAD
 +				acpi_install_global_event_handler
 +				(acpi_gbl_event_handler handler, void *context))
 +
++=======
+ 				 acpi_install_sci_handler(acpi_sci_handler
+ 							  address,
+ 							  void *context))
+ ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_status
+ 				 acpi_remove_sci_handler(acpi_sci_handler
+ 							 address))
+ ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_status
+ 				 acpi_install_global_event_handler
+ 				 (acpi_gbl_event_handler handler,
+ 				  void *context))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_status
  				 acpi_install_fixed_event_handler(u32
  								  acpi_event,
@@@ -300,30 -514,42 +637,64 @@@ ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_st
  							 u32 gpe_number,
  							 acpi_gpe_handler
  							 address))
++<<<<<<< HEAD
 +acpi_status acpi_install_notify_handler(acpi_handle device, u32 handler_type,
 +					acpi_notify_handler handler,
 +					void *context);
 +
 +acpi_status
 +acpi_remove_notify_handler(acpi_handle device,
 +			   u32 handler_type, acpi_notify_handler handler);
 +
 +acpi_status
 +acpi_install_address_space_handler(acpi_handle device,
 +				   acpi_adr_space_type space_id,
 +				   acpi_adr_space_handler handler,
 +				   acpi_adr_space_setup setup, void *context);
 +
 +acpi_status
 +acpi_remove_address_space_handler(acpi_handle device,
 +				  acpi_adr_space_type space_id,
 +				  acpi_adr_space_handler handler);
 +
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_install_notify_handler(acpi_handle device,
+ 							 u32 handler_type,
+ 							 acpi_notify_handler
+ 							 handler,
+ 							 void *context))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_remove_notify_handler(acpi_handle device,
+ 							u32 handler_type,
+ 							acpi_notify_handler
+ 							handler))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_install_address_space_handler(acpi_handle
+ 								device,
+ 								acpi_adr_space_type
+ 								space_id,
+ 								acpi_adr_space_handler
+ 								handler,
+ 								acpi_adr_space_setup
+ 								setup,
+ 								void *context))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_remove_address_space_handler(acpi_handle
+ 							       device,
+ 							       acpi_adr_space_type
+ 							       space_id,
+ 							       acpi_adr_space_handler
+ 							       handler))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  #ifdef ACPI_FUTURE_USAGE
- acpi_status acpi_install_exception_handler(acpi_exception_handler handler);
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_install_exception_handler
+ 			     (acpi_exception_handler handler))
  #endif
- 
- acpi_status acpi_install_interface_handler(acpi_interface_handler handler);
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			     acpi_install_interface_handler
+ 			     (acpi_interface_handler handler))
  
  /*
   * Global Lock interfaces
@@@ -485,12 -726,14 +872,19 @@@ ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_st
  /*
   * Sleep/Wake interfaces
   */
++<<<<<<< HEAD
 +acpi_status
 +acpi_get_sleep_type_data(u8 sleep_state, u8 * slp_typ_a, u8 * slp_typ_b);
++=======
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_get_sleep_type_data(u8 sleep_state,
+ 						     u8 *slp_typ_a,
+ 						     u8 *slp_typ_b))
++>>>>>>> 8b9c1152a018 (ACPICA: OSL: Add configurability for generic external functions.)
  
- acpi_status acpi_enter_sleep_state_prep(u8 sleep_state);
- 
- acpi_status acpi_enter_sleep_state(u8 sleep_state);
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status
+ 			    acpi_enter_sleep_state_prep(u8 sleep_state))
+ ACPI_EXTERNAL_RETURN_STATUS(acpi_status acpi_enter_sleep_state(u8 sleep_state))
  
  ACPI_HW_DEPENDENT_RETURN_STATUS(acpi_status acpi_enter_sleep_state_s4bios(void))
  
* Unmerged path include/acpi/acpixf.h
