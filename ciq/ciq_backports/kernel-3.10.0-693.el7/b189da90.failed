HID: wacom: switch battery to devres

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: switch battery to devres (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 92.54%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit b189da901536cf7e9c95c17dd159cfbaddcc0384
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b189da90.failed

Simplifying the error code paths.
We need to keep wacom_destroy_battery() around for now as the wireless
module and the remotes are using it to dynamically remove the battery
supply on disconnect.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit b189da901536cf7e9c95c17dd159cfbaddcc0384)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index e75b5002a526,61dcb87e3236..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1095,35 -1056,96 +1095,95 @@@ static int wacom_battery_get_property(s
  	return ret;
  }
  
 -static int wacom_ac_get_property(struct power_supply *psy,
 -				enum power_supply_property psp,
 -				union power_supply_propval *val)
 -{
 -	struct wacom *wacom = power_supply_get_drvdata(psy);
 -	int ret = 0;
 -
 -	switch (psp) {
 -	case POWER_SUPPLY_PROP_PRESENT:
 -		/* fall through */
 -	case POWER_SUPPLY_PROP_ONLINE:
 -		val->intval = wacom->wacom_wac.ps_connected;
 -		break;
 -	case POWER_SUPPLY_PROP_SCOPE:
 -		val->intval = POWER_SUPPLY_SCOPE_DEVICE;
 -		break;
 -	default:
 -		ret = -EINVAL;
 -		break;
 -	}
 -	return ret;
 -}
 -
  static int wacom_initialize_battery(struct wacom *wacom)
  {
++<<<<<<< HEAD
 +	int error = 0;
 +
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR) {
 +		wacom->battery.properties = wacom_battery_props;
 +		wacom->battery.num_properties = ARRAY_SIZE(wacom_battery_props);
 +		wacom->battery.get_property = wacom_battery_get_property;
 +		wacom->battery.name = "wacom_battery";
 +		wacom->battery.type = POWER_SUPPLY_TYPE_BATTERY;
 +		wacom->battery.use_for_apm = 0;
++=======
+ 	static atomic_t battery_no = ATOMIC_INIT(0);
+ 	struct device *dev = &wacom->hdev->dev;
+ 	struct power_supply_config psy_cfg = { .drv_data = wacom, };
+ 	struct power_supply_desc *bat_desc = &wacom->battery_desc;
+ 	unsigned long n;
+ 	int error;
+ 
+ 	if (!devres_open_group(dev, bat_desc, GFP_KERNEL))
+ 		return -ENOMEM;
+ 
+ 	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) {
+ 		struct power_supply_desc *ac_desc = &wacom->ac_desc;
+ 		n = atomic_inc_return(&battery_no) - 1;
++>>>>>>> b189da901536 (HID: wacom: switch battery to devres)
  
 -		bat_desc->properties = wacom_battery_props;
 -		bat_desc->num_properties = ARRAY_SIZE(wacom_battery_props);
 -		bat_desc->get_property = wacom_battery_get_property;
 -		sprintf(wacom->wacom_wac.bat_name, "wacom_battery_%ld", n);
 -		bat_desc->name = wacom->wacom_wac.bat_name;
 -		bat_desc->type = POWER_SUPPLY_TYPE_BATTERY;
 -		bat_desc->use_for_apm = 0;
 +		error = power_supply_register(&wacom->usbdev->dev,
 +					      &wacom->battery);
  
++<<<<<<< HEAD
 +		if (!error)
 +			power_supply_powers(&wacom->battery,
 +					    &wacom->usbdev->dev);
 +	}
 +
++=======
+ 		ac_desc->properties = wacom_ac_props;
+ 		ac_desc->num_properties = ARRAY_SIZE(wacom_ac_props);
+ 		ac_desc->get_property = wacom_ac_get_property;
+ 		sprintf(wacom->wacom_wac.ac_name, "wacom_ac_%ld", n);
+ 		ac_desc->name = wacom->wacom_wac.ac_name;
+ 		ac_desc->type = POWER_SUPPLY_TYPE_MAINS;
+ 		ac_desc->use_for_apm = 0;
+ 
+ 		wacom->battery = devm_power_supply_register(dev,
+ 							   &wacom->battery_desc,
+ 							   &psy_cfg);
+ 		if (IS_ERR(wacom->battery)) {
+ 			error = PTR_ERR(wacom->battery);
+ 			goto err;
+ 		}
+ 
+ 		power_supply_powers(wacom->battery, &wacom->hdev->dev);
+ 
+ 		wacom->ac = devm_power_supply_register(dev,
+ 						       &wacom->ac_desc,
+ 						       &psy_cfg);
+ 		if (IS_ERR(wacom->ac)) {
+ 			error = PTR_ERR(wacom->ac);
+ 			goto err;
+ 		}
+ 
+ 		power_supply_powers(wacom->ac, &wacom->hdev->dev);
+ 	}
+ 
+ 	devres_close_group(dev, bat_desc);
+ 	return 0;
+ 
+ err:
+ 	devres_release_group(dev, bat_desc);
++>>>>>>> b189da901536 (HID: wacom: switch battery to devres)
  	return error;
  }
  
  static void wacom_destroy_battery(struct wacom *wacom)
  {
++<<<<<<< HEAD
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR &&
 +	    wacom->battery.dev) {
 +		power_supply_unregister(&wacom->battery);
 +		wacom->battery.dev = NULL;
++=======
+ 	if (wacom->battery) {
+ 		devres_release_group(&wacom->hdev->dev, &wacom->battery_desc);
+ 		wacom->battery = NULL;
+ 		wacom->ac = NULL;
++>>>>>>> b189da901536 (HID: wacom: switch battery to devres)
  	}
  }
  
@@@ -1293,10 -1537,316 +1353,320 @@@ static void wacom_calculate_res(struct 
  						    features->unitExpo);
  }
  
 -void wacom_battery_work(struct work_struct *work)
 +static int wacom_probe(struct usb_interface *intf, const struct usb_device_id *id)
  {
++<<<<<<< HEAD
++=======
+ 	struct wacom *wacom = container_of(work, struct wacom, battery_work);
+ 
+ 	if ((wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
+ 	     !wacom->battery) {
+ 		wacom_initialize_battery(wacom);
+ 	}
+ 	else if (!(wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
+ 		 wacom->battery) {
+ 		wacom_destroy_battery(wacom);
+ 	}
+ }
+ 
+ static size_t wacom_compute_pktlen(struct hid_device *hdev)
+ {
+ 	struct hid_report_enum *report_enum;
+ 	struct hid_report *report;
+ 	size_t size = 0;
+ 
+ 	report_enum = hdev->report_enum + HID_INPUT_REPORT;
+ 
+ 	list_for_each_entry(report, &report_enum->report_list, list) {
+ 		size_t report_size = hid_report_len(report);
+ 		if (report_size > size)
+ 			size = report_size;
+ 	}
+ 
+ 	return size;
+ }
+ 
+ static void wacom_update_name(struct wacom *wacom, const char *suffix)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	char name[WACOM_NAME_MAX];
+ 
+ 	/* Generic devices name unspecified */
+ 	if ((features->type == HID_GENERIC) && !strcmp("Wacom HID", features->name)) {
+ 		if (strstr(wacom->hdev->name, "Wacom") ||
+ 		    strstr(wacom->hdev->name, "wacom") ||
+ 		    strstr(wacom->hdev->name, "WACOM")) {
+ 			/* name is in HID descriptor, use it */
+ 			strlcpy(name, wacom->hdev->name, sizeof(name));
+ 
+ 			/* strip out excess whitespaces */
+ 			while (1) {
+ 				char *gap = strstr(name, "  ");
+ 				if (gap == NULL)
+ 					break;
+ 				/* shift everything including the terminator */
+ 				memmove(gap, gap+1, strlen(gap));
+ 			}
+ 			/* get rid of trailing whitespace */
+ 			if (name[strlen(name)-1] == ' ')
+ 				name[strlen(name)-1] = '\0';
+ 		} else {
+ 			/* no meaningful name retrieved. use product ID */
+ 			snprintf(name, sizeof(name),
+ 				 "%s %X", features->name, wacom->hdev->product);
+ 		}
+ 	} else {
+ 		strlcpy(name, features->name, sizeof(name));
+ 	}
+ 
+ 	/* Append the device type to the name */
+ 	snprintf(wacom_wac->pen_name, sizeof(wacom_wac->pen_name),
+ 		"%s%s Pen", name, suffix);
+ 	snprintf(wacom_wac->touch_name, sizeof(wacom_wac->touch_name),
+ 		"%s%s Finger", name, suffix);
+ 	snprintf(wacom_wac->pad_name, sizeof(wacom_wac->pad_name),
+ 		"%s%s Pad", name, suffix);
+ }
+ 
+ static int wacom_parse_and_register(struct wacom *wacom, bool wireless)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	struct hid_device *hdev = wacom->hdev;
+ 	int error;
+ 	unsigned int connect_mask = HID_CONNECT_HIDRAW;
+ 
+ 	features->pktlen = wacom_compute_pktlen(hdev);
+ 	if (features->pktlen > WACOM_PKGLEN_MAX)
+ 		return -EINVAL;
+ 
+ 	error = wacom_allocate_inputs(wacom);
+ 	if (error)
+ 		return error;
+ 
+ 	/*
+ 	 * Bamboo Pad has a generic hid handling for the Pen, and we switch it
+ 	 * into debug mode for the touch part.
+ 	 * We ignore the other interfaces.
+ 	 */
+ 	if (features->type == BAMBOO_PAD) {
+ 		if (features->pktlen == WACOM_PKGLEN_PENABLED) {
+ 			features->type = HID_GENERIC;
+ 		} else if ((features->pktlen != WACOM_PKGLEN_BPAD_TOUCH) &&
+ 			   (features->pktlen != WACOM_PKGLEN_BPAD_TOUCH_USB)) {
+ 			error = -ENODEV;
+ 			goto fail_allocate_inputs;
+ 		}
+ 	}
+ 
+ 	/* set the default size in case we do not get them from hid */
+ 	wacom_set_default_phy(features);
+ 
+ 	/* Retrieve the physical and logical size for touch devices */
+ 	wacom_retrieve_hid_descriptor(hdev, features);
+ 	wacom_setup_device_quirks(wacom);
+ 
+ 	if (features->device_type == WACOM_DEVICETYPE_NONE &&
+ 	    features->type != WIRELESS) {
+ 		error = features->type == HID_GENERIC ? -ENODEV : 0;
+ 
+ 		dev_warn(&hdev->dev, "Unknown device_type for '%s'. %s.",
+ 			 hdev->name,
+ 			 error ? "Ignoring" : "Assuming pen");
+ 
+ 		if (error)
+ 			goto fail_parsed;
+ 
+ 		features->device_type |= WACOM_DEVICETYPE_PEN;
+ 	}
+ 
+ 	wacom_calculate_res(features);
+ 
+ 	wacom_update_name(wacom, wireless ? " (WL)" : "");
+ 
+ 	error = wacom_add_shared_data(hdev);
+ 	if (error)
+ 		goto fail_shared_data;
+ 
+ 	if (!(features->device_type & WACOM_DEVICETYPE_WL_MONITOR) &&
+ 	     (features->quirks & WACOM_QUIRK_BATTERY)) {
+ 		error = wacom_initialize_battery(wacom);
+ 		if (error)
+ 			goto fail_battery;
+ 	}
+ 
+ 	error = wacom_register_inputs(wacom);
+ 	if (error)
+ 		goto fail_register_inputs;
+ 
+ 	if (wacom->wacom_wac.features.device_type & WACOM_DEVICETYPE_PAD) {
+ 		error = wacom_initialize_leds(wacom);
+ 		if (error)
+ 			goto fail_leds;
+ 
+ 		error = wacom_initialize_remote(wacom);
+ 		if (error)
+ 			goto fail_remote;
+ 	}
+ 
+ 	if (features->type == HID_GENERIC)
+ 		connect_mask |= HID_CONNECT_DRIVER;
+ 
+ 	/* Regular HID work starts now */
+ 	error = hid_hw_start(hdev, connect_mask);
+ 	if (error) {
+ 		hid_err(hdev, "hw start failed\n");
+ 		goto fail_hw_start;
+ 	}
+ 
+ 	if (!wireless) {
+ 		/* Note that if query fails it is not a hard failure */
+ 		wacom_query_tablet_data(hdev, features);
+ 	}
+ 
+ 	/* touch only Bamboo doesn't support pen */
+ 	if ((features->type == BAMBOO_TOUCH) &&
+ 	    (features->device_type & WACOM_DEVICETYPE_PEN)) {
+ 		error = -ENODEV;
+ 		goto fail_quirks;
+ 	}
+ 
+ 	/* pen only Bamboo neither support touch nor pad */
+ 	if ((features->type == BAMBOO_PEN) &&
+ 	    ((features->device_type & WACOM_DEVICETYPE_TOUCH) ||
+ 	    (features->device_type & WACOM_DEVICETYPE_PAD))) {
+ 		error = -ENODEV;
+ 		goto fail_quirks;
+ 	}
+ 
+ 	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
+ 		error = hid_hw_open(hdev);
+ 
+ 	if ((wacom_wac->features.type == INTUOSHT ||
+ 	     wacom_wac->features.type == INTUOSHT2) &&
+ 	    (wacom_wac->features.device_type & WACOM_DEVICETYPE_TOUCH)) {
+ 		wacom_wac->shared->type = wacom_wac->features.type;
+ 		wacom_wac->shared->touch_input = wacom_wac->touch_input;
+ 	}
+ 
+ 	return 0;
+ 
+ fail_quirks:
+ 	hid_hw_stop(hdev);
+ fail_hw_start:
+ 	kobject_put(wacom->remote_dir);
+ fail_remote:
+ 	wacom_destroy_leds(wacom);
+ fail_leds:
+ 	wacom_clean_inputs(wacom);
+ fail_register_inputs:
+ fail_battery:
+ 	wacom_remove_shared_data(wacom);
+ fail_shared_data:
+ fail_parsed:
+ fail_allocate_inputs:
+ 	wacom_clean_inputs(wacom);
+ 	return error;
+ }
+ 
+ static void wacom_wireless_work(struct work_struct *work)
+ {
+ 	struct wacom *wacom = container_of(work, struct wacom, wireless_work);
+ 	struct usb_device *usbdev = wacom->usbdev;
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct hid_device *hdev1, *hdev2;
+ 	struct wacom *wacom1, *wacom2;
+ 	struct wacom_wac *wacom_wac1, *wacom_wac2;
+ 	int error;
+ 
+ 	/*
+ 	 * Regardless if this is a disconnect or a new tablet,
+ 	 * remove any existing input and battery devices.
+ 	 */
+ 
+ 	wacom_destroy_battery(wacom);
+ 
+ 	/* Stylus interface */
+ 	hdev1 = usb_get_intfdata(usbdev->config->interface[1]);
+ 	wacom1 = hid_get_drvdata(hdev1);
+ 	wacom_wac1 = &(wacom1->wacom_wac);
+ 	wacom_destroy_leds(wacom1);
+ 	wacom_clean_inputs(wacom1);
+ 
+ 	/* Touch interface */
+ 	hdev2 = usb_get_intfdata(usbdev->config->interface[2]);
+ 	wacom2 = hid_get_drvdata(hdev2);
+ 	wacom_wac2 = &(wacom2->wacom_wac);
+ 	wacom_destroy_leds(wacom2);
+ 	wacom_clean_inputs(wacom2);
+ 
+ 	if (wacom_wac->pid == 0) {
+ 		hid_info(wacom->hdev, "wireless tablet disconnected\n");
+ 		wacom_wac1->shared->type = 0;
+ 	} else {
+ 		const struct hid_device_id *id = wacom_ids;
+ 
+ 		hid_info(wacom->hdev, "wireless tablet connected with PID %x\n",
+ 			 wacom_wac->pid);
+ 
+ 		while (id->bus) {
+ 			if (id->vendor == USB_VENDOR_ID_WACOM &&
+ 			    id->product == wacom_wac->pid)
+ 				break;
+ 			id++;
+ 		}
+ 
+ 		if (!id->bus) {
+ 			hid_info(wacom->hdev, "ignoring unknown PID.\n");
+ 			return;
+ 		}
+ 
+ 		/* Stylus interface */
+ 		wacom_wac1->features =
+ 			*((struct wacom_features *)id->driver_data);
+ 
+ 		wacom_wac1->pid = wacom_wac->pid;
+ 		hid_hw_stop(hdev1);
+ 		error = wacom_parse_and_register(wacom1, true);
+ 		if (error)
+ 			goto fail;
+ 
+ 		/* Touch interface */
+ 		if (wacom_wac1->features.touch_max ||
+ 		    (wacom_wac1->features.type >= INTUOSHT &&
+ 		    wacom_wac1->features.type <= BAMBOO_PT)) {
+ 			wacom_wac2->features =
+ 				*((struct wacom_features *)id->driver_data);
+ 			wacom_wac2->pid = wacom_wac->pid;
+ 			hid_hw_stop(hdev2);
+ 			error = wacom_parse_and_register(wacom2, true);
+ 			if (error)
+ 				goto fail;
+ 		}
+ 
+ 		error = wacom_initialize_battery(wacom);
+ 		if (error)
+ 			goto fail;
+ 	}
+ 
+ 	return;
+ 
+ fail:
+ 	wacom_destroy_leds(wacom1);
+ 	wacom_clean_inputs(wacom1);
+ 	wacom_destroy_leds(wacom2);
+ 	wacom_clean_inputs(wacom2);
+ 	return;
+ }
+ 
+ static int wacom_probe(struct hid_device *hdev,
+ 		const struct hid_device_id *id)
+ {
+ 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
++>>>>>>> b189da901536 (HID: wacom: switch battery to devres)
  	struct usb_device *dev = interface_to_usbdev(intf);
 +	struct usb_endpoint_descriptor *endpoint;
  	struct wacom *wacom;
  	struct wacom_wac *wacom_wac;
  	struct wacom_features *features;
@@@ -1435,22 -1913,27 +1805,37 @@@
  	return error;
  }
  
 -static void wacom_remove(struct hid_device *hdev)
 +static void wacom_disconnect(struct usb_interface *intf)
  {
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	struct wacom_features *features = &wacom_wac->features;
 +	struct wacom *wacom = usb_get_intfdata(intf);
  
 -	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
 -		hid_hw_close(hdev);
 +	usb_set_intfdata(intf, NULL);
  
++<<<<<<< HEAD
 +	usb_kill_urb(wacom->irq);
 +	cancel_work_sync(&wacom->work);
 +	if (wacom->wacom_wac.input)
 +		input_unregister_device(wacom->wacom_wac.input);
 +	wacom_destroy_battery(wacom);
 +	wacom_destroy_leds(wacom);
 +	usb_free_urb(wacom->irq);
 +	usb_free_coherent(interface_to_usbdev(intf), WACOM_PKGLEN_MAX,
 +			wacom->wacom_wac.data, wacom->data_dma);
 +	wacom_remove_shared_data(&wacom->wacom_wac);
++=======
+ 	hid_hw_stop(hdev);
+ 
+ 	cancel_work_sync(&wacom->wireless_work);
+ 	cancel_work_sync(&wacom->battery_work);
+ 	kobject_put(wacom->remote_dir);
+ 	wacom_destroy_leds(wacom);
+ 	wacom_clean_inputs(wacom);
+ 	if (hdev->bus == BUS_BLUETOOTH)
+ 		device_remove_file(&hdev->dev, &dev_attr_speed);
+ 	wacom_remove_shared_data(wacom);
+ 
+ 	hid_set_drvdata(hdev, NULL);
++>>>>>>> b189da901536 (HID: wacom: switch battery to devres)
  	kfree(wacom);
  }
  
* Unmerged path drivers/hid/wacom_sys.c
