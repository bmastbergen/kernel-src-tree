HID: wacom - request tool info only when we get general events

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom - request tool info only when we get general events (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 95.80%
commit-author Ping Cheng <pinglinux@gmail.com>
commit 599b082095432f083da89ff53d95b4a878e1fca1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/599b0820.failed

Move wacom_intuos_schedule_prox_event inside wacom_intuos_general
so we don't call it when general event data isn't ready.

	Signed-off-by: Ping Cheng <pingc@wacom.com>
	Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 599b082095432f083da89ff53d95b4a878e1fca1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index 98c7d65145c2,d5dc59af5bbf..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -481,10 -750,130 +481,13 @@@ static int wacom_intuos_inout(struct wa
  		return 2;
  	}
  
 -	return 0;
 -}
 -
 -static int wacom_remote_irq(struct wacom_wac *wacom_wac, size_t len)
 -{
 -	unsigned char *data = wacom_wac->data;
 -	struct input_dev *input = wacom_wac->pad_input;
 -	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
 -	struct wacom_features *features = &wacom_wac->features;
 -	int bat_charging, bat_percent, touch_ring_mode;
 -	__u32 serial;
 -	int i;
 -
 -	if (data[0] != WACOM_REPORT_REMOTE) {
 -		dev_dbg(input->dev.parent,
 -			"%s: received unknown report #%d", __func__, data[0]);
 -		return 0;
 -	}
 -
 -	serial = data[3] + (data[4] << 8) + (data[5] << 16);
 -	wacom_wac->id[0] = PAD_DEVICE_ID;
 -
 -	input_report_key(input, BTN_0, (data[9] & 0x01));
 -	input_report_key(input, BTN_1, (data[9] & 0x02));
 -	input_report_key(input, BTN_2, (data[9] & 0x04));
 -	input_report_key(input, BTN_3, (data[9] & 0x08));
 -	input_report_key(input, BTN_4, (data[9] & 0x10));
 -	input_report_key(input, BTN_5, (data[9] & 0x20));
 -	input_report_key(input, BTN_6, (data[9] & 0x40));
 -	input_report_key(input, BTN_7, (data[9] & 0x80));
 -
 -	input_report_key(input, BTN_8, (data[10] & 0x01));
 -	input_report_key(input, BTN_9, (data[10] & 0x02));
 -	input_report_key(input, BTN_A, (data[10] & 0x04));
 -	input_report_key(input, BTN_B, (data[10] & 0x08));
 -	input_report_key(input, BTN_C, (data[10] & 0x10));
 -	input_report_key(input, BTN_X, (data[10] & 0x20));
 -	input_report_key(input, BTN_Y, (data[10] & 0x40));
 -	input_report_key(input, BTN_Z, (data[10] & 0x80));
 -
 -	input_report_key(input, BTN_BASE, (data[11] & 0x01));
 -	input_report_key(input, BTN_BASE2, (data[11] & 0x02));
 -
 -	if (data[12] & 0x80)
 -		input_report_abs(input, ABS_WHEEL, (data[12] & 0x7f));
 -	else
 -		input_report_abs(input, ABS_WHEEL, 0);
 -
 -	bat_percent = data[7] & 0x7f;
 -	bat_charging = !!(data[7] & 0x80);
 -
 -	if (data[9] | data[10] | (data[11] & 0x03) | data[12])
 -		input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 -	else
 -		input_report_abs(input, ABS_MISC, 0);
 -
 -	input_event(input, EV_MSC, MSC_SERIAL, serial);
 -
 -	/*Which mode select (LED light) is currently on?*/
 -	touch_ring_mode = (data[11] & 0xC0) >> 6;
 -
 -	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
 -		if (wacom_wac->serial[i] == serial)
 -			wacom->led.select[i] = touch_ring_mode;
 -	}
 -
 -	if (!wacom->battery &&
 -	    !(features->quirks & WACOM_QUIRK_BATTERY)) {
 -		features->quirks |= WACOM_QUIRK_BATTERY;
 -		INIT_WORK(&wacom->work, wacom_battery_work);
 -		wacom_schedule_work(wacom_wac);
 -	}
 -
 -	wacom_notify_battery(wacom_wac, bat_percent, bat_charging, 1,
 -			     bat_charging);
 -
 -	return 1;
 -}
 -
 -static int wacom_remote_status_irq(struct wacom_wac *wacom_wac, size_t len)
 -{
 -	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
 -	unsigned char *data = wacom_wac->data;
 -	int i;
 -
 -	if (data[0] != WACOM_REPORT_DEVICE_LIST)
 -		return 0;
 -
 -	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
 -		int j = i * 6;
 -		int serial = (data[j+6] << 16) + (data[j+5] << 8) + data[j+4];
 -		bool connected = data[j+2];
 -
 -		if (connected) {
 -			int k;
 -
 -			if (wacom_wac->serial[i] == serial)
 -				continue;
 -
 -			if (wacom_wac->serial[i]) {
 -				wacom_remote_destroy_attr_group(wacom,
 -							wacom_wac->serial[i]);
 -			}
 -
 -			/* A remote can pair more than once with an EKR,
 -			 * check to make sure this serial isn't already paired.
 -			 */
 -			for (k = 0; k < WACOM_MAX_REMOTES; k++) {
 -				if (wacom_wac->serial[k] == serial)
 -					break;
 -			}
 -
 -			if (k < WACOM_MAX_REMOTES) {
 -				wacom_wac->serial[i] = serial;
 -				continue;
 -			}
 -			wacom_remote_create_attr_group(wacom, serial, i);
 -
 -		} else if (wacom_wac->serial[i]) {
 -			wacom_remote_destroy_attr_group(wacom,
 -							wacom_wac->serial[i]);
 -		}
 -	}
++<<<<<<< HEAD
 +	/* don't report other events if we don't know the ID */
 +	if (!wacom->id[idx])
 +		return 1;
  
++=======
++>>>>>>> 599b08209543 (HID: wacom - request tool info only when we get general events)
  	return 0;
  }
  
@@@ -492,19 -881,49 +495,59 @@@ static void wacom_intuos_general(struc
  {
  	struct wacom_features *features = &wacom->features;
  	unsigned char *data = wacom->data;
 -	struct input_dev *input = wacom->pen_input;
 -	int idx = (features->type == INTUOS) ? (data[1] & 0x01) : 0;
 -	unsigned char type = (data[1] >> 1) & 0x0F;
 -	unsigned int x, y, distance, t;
 +	struct input_dev *input = wacom->input;
 +	unsigned int t;
  
++<<<<<<< HEAD
 +	/* general pen packet */
 +	if ((data[1] & 0xb8) == 0xa0) {
 +		t = (data[6] << 2) | ((data[7] >> 6) & 3);
 +		if (features->type >= INTUOS4S && features->type <= WACOM_24HD) {
 +			t = (t << 1) | (data[1] & 1);
++=======
+ 	if (data[0] != WACOM_REPORT_PENABLED && data[0] != WACOM_REPORT_CINTIQ &&
+ 		data[0] != WACOM_REPORT_INTUOS_PEN)
+ 		return 0;
+ 
+ 	/* don't report events if we don't know the tool ID */
+ 	if (!wacom->id[idx]) {
+ 		/* but reschedule a read of the current tool */
+ 		wacom_intuos_schedule_prox_event(wacom);
+ 		return 1;
+ 	}
+ 
+ 	x = (be16_to_cpup((__be16 *)&data[2]) << 1) | ((data[9] >> 1) & 1);
+ 	y = (be16_to_cpup((__be16 *)&data[4]) << 1) | (data[9] & 1);
+ 	distance = data[9] >> 2;
+ 	if (features->type < INTUOS3S) {
+ 		x >>= 1;
+ 		y >>= 1;
+ 		distance >>= 1;
+ 	}
+ 	input_report_abs(input, ABS_X, x);
+ 	input_report_abs(input, ABS_Y, y);
+ 	input_report_abs(input, ABS_DISTANCE, distance);
+ 
+ 	switch (type) {
+ 	case 0x00:
+ 	case 0x01:
+ 	case 0x02:
+ 	case 0x03:
+ 		/* general pen packet */
+ 		t = (data[6] << 3) | ((data[7] & 0xC0) >> 5) | (data[1] & 1);
+ 		if (features->pressure_max < 2047)
+ 			t >>= 1;
+ 		input_report_abs(input, ABS_PRESSURE, t);
+ 		if (features->type != INTUOSHT2) {
+ 		    input_report_abs(input, ABS_TILT_X,
+ 				 (((data[7] << 1) & 0x7e) | (data[8] >> 7)) - 64);
+ 		    input_report_abs(input, ABS_TILT_Y, (data[8] & 0x7f) - 64);
++>>>>>>> 599b08209543 (HID: wacom - request tool info only when we get general events)
  		}
 +		input_report_abs(input, ABS_PRESSURE, t);
 +		input_report_abs(input, ABS_TILT_X,
 +				 (((data[7] << 1) & 0x7e) | (data[8] >> 7)) - 64);
 +		input_report_abs(input, ABS_TILT_Y, (data[8] & 0x7f) - 64);
  		input_report_key(input, BTN_STYLUS, data[1] & 2);
  		input_report_key(input, BTN_STYLUS2, data[1] & 4);
  		input_report_key(input, BTN_TOUCH, t > 10);
* Unmerged path drivers/hid/wacom_wac.c
