rtnetlink: fix rtnl_vfinfo_size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit 7e75f74a171a8146cc3ee92d5562878b40c25fb5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7e75f74a.failed

The size reported by rtnl_vfinfo_size doesn't match the space used by
rtnl_fill_vfinfo.

rtnl_vfinfo_size currently doesn't account for the nest attributes
used by statistics (added in commit 3b766cd83232), nor for struct
ifla_vf_tx_rate (since commit ed616689a3d9, which added ifla_vf_rate
to the dump without removing ifla_vf_tx_rate, but replaced
ifla_vf_tx_rate with ifla_vf_rate in the size computation).

Fixes: 3b766cd83232 ("net/core: Add reading VF statistics through the PF netdevice")
Fixes: ed616689a3d9 ("net-next:v4: Add support to configure SR-IOV VF minimum and maximum Tx rate through ip tool")
	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7e75f74a171a8146cc3ee92d5562878b40c25fb5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/rtnetlink.c
diff --cc net/core/rtnetlink.c
index 38cedad711a1,96f4bf274e30..000000000000
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@@ -838,27 -840,32 +838,37 @@@ static inline int rtnl_vfinfo_size(cons
  	if (dev->dev.parent && dev_is_pci(dev->dev.parent) &&
  	    (ext_filter_mask & RTEXT_FILTER_VF)) {
  		int num_vfs = dev_num_vf(dev->dev.parent);
- 		size_t size = nla_total_size(sizeof(struct nlattr));
- 		size += nla_total_size(num_vfs * sizeof(struct nlattr));
+ 		size_t size = nla_total_size(0);
  		size += num_vfs *
++<<<<<<< HEAD
 +			(nla_total_size(sizeof(struct ifla_vf_mac)) +
 +			 nla_total_size(sizeof(struct ifla_vf_vlan)) +
++=======
+ 			(nla_total_size(0) +
+ 			 nla_total_size(sizeof(struct ifla_vf_mac)) +
+ 			 nla_total_size(sizeof(struct ifla_vf_vlan)) +
+ 			 nla_total_size(0) + /* nest IFLA_VF_VLAN_LIST */
+ 			 nla_total_size(MAX_VLAN_LIST_LEN *
+ 					sizeof(struct ifla_vf_vlan_info)) +
++>>>>>>> 7e75f74a171a (rtnetlink: fix rtnl_vfinfo_size)
  			 nla_total_size(sizeof(struct ifla_vf_spoofchk)) +
+ 			 nla_total_size(sizeof(struct ifla_vf_tx_rate)) +
  			 nla_total_size(sizeof(struct ifla_vf_rate)) +
  			 nla_total_size(sizeof(struct ifla_vf_link_state)) +
  			 nla_total_size(sizeof(struct ifla_vf_rss_query_en)) +
+ 			 nla_total_size(0) + /* nest IFLA_VF_STATS */
  			 /* IFLA_VF_STATS_RX_PACKETS */
 -			 nla_total_size_64bit(sizeof(__u64)) +
 +			 nla_total_size(sizeof(__u64)) +
  			 /* IFLA_VF_STATS_TX_PACKETS */
 -			 nla_total_size_64bit(sizeof(__u64)) +
 +			 nla_total_size(sizeof(__u64)) +
  			 /* IFLA_VF_STATS_RX_BYTES */
 -			 nla_total_size_64bit(sizeof(__u64)) +
 +			 nla_total_size(sizeof(__u64)) +
  			 /* IFLA_VF_STATS_TX_BYTES */
 -			 nla_total_size_64bit(sizeof(__u64)) +
 +			 nla_total_size(sizeof(__u64)) +
  			 /* IFLA_VF_STATS_BROADCAST */
 -			 nla_total_size_64bit(sizeof(__u64)) +
 +			 nla_total_size(sizeof(__u64)) +
  			 /* IFLA_VF_STATS_MULTICAST */
 -			 nla_total_size_64bit(sizeof(__u64)) +
 +			 nla_total_size(sizeof(__u64)) +
  			 nla_total_size(sizeof(struct ifla_vf_trust)));
  		return size;
  	} else
* Unmerged path net/core/rtnetlink.c
