RDS: Pass rds_conn_path to rds_send_xmit()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sowmini Varadhan <sowmini.varadhan@oracle.com>
commit 1f9ecd7eacfd9ee52a114b87292bfe885aafdb1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1f9ecd7e.failed

Pass a struct rds_conn_path to rds_send_xmit so that MP capable
transports can transmit packets on something other than c_path[0].
The eventual goal for MP capable transports is to hash the rds
socket to a path based on the bound local address/port, and use
this path as the argument to rds_send_xmit()

	Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1f9ecd7eacfd9ee52a114b87292bfe885aafdb1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/send.c
#	net/rds/threads.c
diff --cc net/rds/send.c
index 462a87405f73,966311d135af..000000000000
--- a/net/rds/send.c
+++ b/net/rds/send.c
@@@ -106,15 -107,15 +106,20 @@@ void rds_send_reset(struct rds_connecti
  }
  EXPORT_SYMBOL_GPL(rds_send_reset);
  
- static int acquire_in_xmit(struct rds_connection *conn)
+ static int acquire_in_xmit(struct rds_conn_path *cp)
  {
- 	return test_and_set_bit(RDS_IN_XMIT, &conn->c_flags) == 0;
+ 	return test_and_set_bit(RDS_IN_XMIT, &cp->cp_flags) == 0;
  }
  
- static void release_in_xmit(struct rds_connection *conn)
+ static void release_in_xmit(struct rds_conn_path *cp)
  {
++<<<<<<< HEAD
 +	clear_bit(RDS_IN_XMIT, &conn->c_flags);
 +	smp_mb__after_clear_bit();
++=======
+ 	clear_bit(RDS_IN_XMIT, &cp->cp_flags);
+ 	smp_mb__after_atomic();
++>>>>>>> 1f9ecd7eacfd (RDS: Pass rds_conn_path to rds_send_xmit())
  	/*
  	 * We don't use wait_on_bit()/wake_up_bit() because our waking is in a
  	 * hot path and finding waiters is very rare.  We don't want to walk
diff --cc net/rds/threads.c
index 4a323045719b,50d26576dee7..000000000000
--- a/net/rds/threads.c
+++ b/net/rds/threads.c
@@@ -164,14 -170,16 +164,20 @@@ void rds_connect_worker(struct work_str
  
  void rds_send_worker(struct work_struct *work)
  {
 -	struct rds_conn_path *cp = container_of(work,
 -						struct rds_conn_path,
 -						cp_send_w.work);
 +	struct rds_connection *conn = container_of(work, struct rds_connection, c_send_w.work);
  	int ret;
  
++<<<<<<< HEAD
 +	if (rds_conn_state(conn) == RDS_CONN_UP) {
 +		clear_bit(RDS_LL_SEND_FULL, &conn->c_flags);
 +		ret = rds_send_xmit(conn);
++=======
+ 	if (rds_conn_path_state(cp) == RDS_CONN_UP) {
+ 		clear_bit(RDS_LL_SEND_FULL, &cp->cp_flags);
+ 		ret = rds_send_xmit(cp);
++>>>>>>> 1f9ecd7eacfd (RDS: Pass rds_conn_path to rds_send_xmit())
  		cond_resched();
 -		rdsdebug("conn %p ret %d\n", cp->cp_conn, ret);
 +		rdsdebug("conn %p ret %d\n", conn, ret);
  		switch (ret) {
  		case -EAGAIN:
  			rds_stats_inc(s_send_immediate_retry);
diff --git a/net/rds/ib_cm.c b/net/rds/ib_cm.c
index 121ebb33e60b..8f9dcb45fba1 100644
--- a/net/rds/ib_cm.c
+++ b/net/rds/ib_cm.c
@@ -264,7 +264,7 @@ static void rds_ib_tasklet_fn_send(unsigned long data)
 	if (rds_conn_up(conn) &&
 	    (!test_bit(RDS_LL_SEND_FULL, &conn->c_flags) ||
 	    test_bit(0, &conn->c_map_queued)))
-		rds_send_xmit(ic->conn);
+		rds_send_xmit(&ic->conn->c_path[0]);
 }
 
 static void poll_rcq(struct rds_ib_connection *ic, struct ib_cq *cq,
diff --git a/net/rds/rds.h b/net/rds/rds.h
index e8bf5278a75d..38dec3adfc13 100644
--- a/net/rds/rds.h
+++ b/net/rds/rds.h
@@ -443,7 +443,9 @@ struct rds_transport {
 	int (*conn_connect)(struct rds_connection *conn);
 	void (*conn_shutdown)(struct rds_connection *conn);
 	void (*xmit_prepare)(struct rds_connection *conn);
+	void (*xmit_path_prepare)(struct rds_conn_path *cp);
 	void (*xmit_complete)(struct rds_connection *conn);
+	void (*xmit_path_complete)(struct rds_conn_path *cp);
 	int (*xmit)(struct rds_connection *conn, struct rds_message *rm,
 		    unsigned int hdr_off, unsigned int sg, unsigned int off);
 	int (*xmit_rdma)(struct rds_connection *conn, struct rm_rdma_op *op);
@@ -741,7 +743,7 @@ void rds_inc_info_copy(struct rds_incoming *inc,
 int rds_sendmsg(struct kiocb *iocb, struct socket *sock, struct msghdr *msg,
 		size_t payload_len);
 void rds_send_reset(struct rds_connection *conn);
-int rds_send_xmit(struct rds_connection *conn);
+int rds_send_xmit(struct rds_conn_path *cp);
 struct sockaddr_in;
 void rds_send_drop_to(struct rds_sock *rs, struct sockaddr_in *dest);
 typedef int (*is_acked_func)(struct rds_message *rm, uint64_t ack);
* Unmerged path net/rds/send.c
* Unmerged path net/rds/threads.c
