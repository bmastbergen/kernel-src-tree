HID: wacom: close the wireless receiver on remove()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: close the wireless receiver on remove() (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 94.85%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit f6205161782fa325152340c8fe47c1b90105cfbc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f6205161.failed

rmmod/insmod the wacom.ko module does not work for the receiver because
it was not previously closed. Now, we can hack with the wireless receiver
without having to unplug/replug it.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit f6205161782fa325152340c8fe47c1b90105cfbc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,68a560957871..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1433,22 -1850,25 +1433,31 @@@ static int wacom_probe(struct usb_inter
  	return error;
  }
  
 -static void wacom_remove(struct hid_device *hdev)
 +static void wacom_disconnect(struct usb_interface *intf)
  {
++<<<<<<< HEAD
 +	struct wacom *wacom = usb_get_intfdata(intf);
++=======
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 
+ 	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
+ 		hid_hw_close(hdev);
++>>>>>>> f6205161782f (HID: wacom: close the wireless receiver on remove())
  
 -	hid_hw_stop(hdev);
 +	usb_set_intfdata(intf, NULL);
  
 +	usb_kill_urb(wacom->irq);
  	cancel_work_sync(&wacom->work);
 -	wacom_clean_inputs(wacom);
 -	if (hdev->bus == BUS_BLUETOOTH)
 -		device_remove_file(&hdev->dev, &dev_attr_speed);
 +	if (wacom->wacom_wac.input)
 +		input_unregister_device(wacom->wacom_wac.input);
  	wacom_destroy_battery(wacom);
 -	wacom_remove_shared_data(wacom);
 -
 -	hid_set_drvdata(hdev, NULL);
 +	wacom_destroy_leds(wacom);
 +	usb_free_urb(wacom->irq);
 +	usb_free_coherent(interface_to_usbdev(intf), WACOM_PKGLEN_MAX,
 +			wacom->wacom_wac.data, wacom->data_dma);
 +	wacom_remove_shared_data(&wacom->wacom_wac);
  	kfree(wacom);
  }
  
* Unmerged path drivers/hid/wacom_sys.c
