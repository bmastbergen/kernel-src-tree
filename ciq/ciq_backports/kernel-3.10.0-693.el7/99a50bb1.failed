netvsc: Use the new in-place consumption APIs in the rx path

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author K. Y. Srinivasan <kys@microsoft.com>
commit 99a50bb11cad44cd1d478256d2388e7afce982ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/99a50bb1.failed

Use the new APIs for eliminating a copy on the receive path. These new APIs also
help in minimizing the number of memory barriers we end up issuing (in the
ringbuffer code) since we can better control when we want to expose the ring
state to the host.

The patch is being resent to address earlier email issues.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 99a50bb11cad44cd1d478256d2388e7afce982ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 3cb68789a26e,20e09174ff62..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -1136,8 -1173,7 +1169,12 @@@ void netvsc_channel_cb(void *context
  	unsigned char *buffer;
  	int bufferlen = NETVSC_PACKET_SIZE;
  	struct net_device *ndev;
++<<<<<<< HEAD
 +	struct nvsp_message *nvmsg;
 +	struct net_device_context *net_device_ctx;
++=======
+ 	bool need_to_commit = false;
++>>>>>>> 99a50bb11cad (netvsc: Use the new in-place consumption APIs in the rx path)
  
  	if (channel->primary_channel != NULL)
  		device = channel->primary_channel->device_obj;
@@@ -1157,34 -1210,13 +1212,35 @@@
  		if (ret == 0) {
  			if (bytes_recvd > 0) {
  				desc = (struct vmpacket_descriptor *)buffer;
- 				nvmsg = (struct nvsp_message *)((unsigned long)
- 					 desc + (desc->offset8 << 3));
- 				switch (desc->type) {
- 				case VM_PKT_COMP:
- 					netvsc_send_completion(net_device,
- 								channel,
- 								device, desc);
- 					break;
- 
+ 				netvsc_process_raw_pkt(device,
+ 						       channel,
+ 						       net_device,
+ 						       ndev,
+ 						       request_id,
+ 						       desc);
+ 
++<<<<<<< HEAD
 +				case VM_PKT_DATA_USING_XFER_PAGES:
 +					netvsc_receive(net_device, channel,
 +						       device, desc);
 +					break;
 +
 +				case VM_PKT_DATA_INBAND:
 +					netvsc_receive_inband(device,
 +							      net_device_ctx,
 +							      nvmsg);
 +					break;
 +
 +				default:
 +					netdev_err(ndev,
 +						   "unhandled packet type %d, "
 +						   "tid %llx len %d\n",
 +						   desc->type, request_id,
 +						   bytes_recvd);
 +					break;
 +				}
++=======
++>>>>>>> 99a50bb11cad (netvsc: Use the new in-place consumption APIs in the rx path)
  
  			} else {
  				/*
* Unmerged path drivers/net/hyperv/netvsc.c
