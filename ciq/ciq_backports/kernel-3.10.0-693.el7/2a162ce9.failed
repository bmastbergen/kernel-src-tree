Btrfs: Improve FL_KEEP_SIZE handling in fallocate

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Davide Italiano <dccitaliano@gmail.com>
commit 2a162ce93232eb78124601996744f8eafec845ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2a162ce9.failed

- We call inode_size_ok() only if FL_KEEP_SIZE isn't specified.
- As an optimisation we can skip the call if (off + len)
  isn't greater than the current size of the file. This operation
  is called under the lock so the less work we do, the better.
- If we call inode_size_ok() pass to it the correct value rather
  than a more conservative estimation.

	Signed-off-by: Davide Italiano <dccitaliano@gmail.com>
	Reviewed-by: Liu Bo <bo.li.liu@oracle.com>
	Reviewed-by: David Sterba <dsterba@suse.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit 2a162ce93232eb78124601996744f8eafec845ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/file.c
diff --cc fs/btrfs/file.c
index 0e9a34222e9b,7af1abda68d0..000000000000
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@@ -2703,10 -2681,13 +2703,20 @@@ static long btrfs_fallocate(struct fil
  	if (ret < 0)
  		return ret;
  
++<<<<<<< HEAD
 +	mutex_lock(&inode->i_mutex);
 +	ret = inode_newsize_ok(inode, alloc_end);
 +	if (ret)
 +		goto out;
++=======
+ 	inode_lock(inode);
+ 
+ 	if (!(mode & FALLOC_FL_KEEP_SIZE) && offset + len > inode->i_size) {
+ 		ret = inode_newsize_ok(inode, offset + len);
+ 		if (ret)
+ 			goto out;
+ 	}
++>>>>>>> 2a162ce93232 (Btrfs: Improve FL_KEEP_SIZE handling in fallocate)
  
  	/*
  	 * TODO: Move these two operations after we have checked
* Unmerged path fs/btrfs/file.c
