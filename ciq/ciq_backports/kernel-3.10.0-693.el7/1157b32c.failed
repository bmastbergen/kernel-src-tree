xfs: remove XBF_ASYNC flag wrapper macros

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 1157b32c732cbab75320e429559c0ec9f5d382e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1157b32c.failed

They only set/clear/check a flag, no need for obfuscating this
with a macro.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 1157b32c732cbab75320e429559c0ec9f5d382e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_buf.h
#	fs/xfs/xfs_buf_item.c
#	fs/xfs/xfs_log_recover.c
diff --cc fs/xfs/xfs_buf.h
index 648b20e00240,2a28d1ccbfb9..000000000000
--- a/fs/xfs/xfs_buf.h
+++ b/fs/xfs/xfs_buf.h
@@@ -346,14 -321,6 +346,17 @@@ void xfs_buf_stale(struct xfs_buf *bp)
  #define XFS_BUF_UNSTALE(bp)	((bp)->b_flags &= ~XBF_STALE)
  #define XFS_BUF_ISSTALE(bp)	((bp)->b_flags & XBF_STALE)
  
++<<<<<<< HEAD
 +#define XFS_BUF_DONE(bp)	((bp)->b_flags |= XBF_DONE)
 +#define XFS_BUF_UNDONE(bp)	((bp)->b_flags &= ~XBF_DONE)
 +#define XFS_BUF_ISDONE(bp)	((bp)->b_flags & XBF_DONE)
 +
 +#define XFS_BUF_ASYNC(bp)	((bp)->b_flags |= XBF_ASYNC)
 +#define XFS_BUF_UNASYNC(bp)	((bp)->b_flags &= ~XBF_ASYNC)
 +#define XFS_BUF_ISASYNC(bp)	((bp)->b_flags & XBF_ASYNC)
 +
++=======
++>>>>>>> 1157b32c732c (xfs: remove XBF_ASYNC flag wrapper macros)
  #define XFS_BUF_READ(bp)	((bp)->b_flags |= XBF_READ)
  #define XFS_BUF_UNREAD(bp)	((bp)->b_flags &= ~XBF_READ)
  #define XFS_BUF_ISREAD(bp)	((bp)->b_flags & XBF_READ)
diff --cc fs/xfs/xfs_buf_item.c
index ebabf8d5e3f3,838df068fad4..000000000000
--- a/fs/xfs/xfs_buf_item.c
+++ b/fs/xfs/xfs_buf_item.c
@@@ -1074,93 -1079,45 +1074,98 @@@ xfs_buf_iodone_callback_error
  	}
  	lasttarg = bp->b_target;
  
 +	/* synchronous writes will have callers process the error */
 +	if (!(bp->b_flags & XBF_ASYNC))
 +		goto out_stale;
 +
 +	trace_xfs_buf_item_iodone_async(bp, _RET_IP_);
 +	ASSERT(bp->b_iodone != NULL);
 +
 +	cfg = xfs_error_get_cfg(mp, XFS_ERR_METADATA, bp->b_error);
 +
  	/*
  	 * If the write was asynchronous then no one will be looking for the
 -	 * error.  Clear the error state and write the buffer out again.
 -	 *
 -	 * XXX: This helps against transient write errors, but we need to find
 -	 * a way to shut the filesystem down if the writes keep failing.
 -	 *
 -	 * In practice we'll shut the filesystem down soon as non-transient
 -	 * errors tend to affect the whole device and a failing log write
 -	 * will make us give up.  But we really ought to do better here.
 +	 * error.  If this is the first failure of this type, clear the error
 +	 * state and write the buffer out again. This means we always retry an
 +	 * async write failure at least once, but we also need to set the buffer
 +	 * up to behave correctly now for repeated failures.
  	 */
++<<<<<<< HEAD
 +	if (!(bp->b_flags & (XBF_STALE | XBF_WRITE_FAIL)) ||
 +	     bp->b_last_error != bp->b_error) {
 +		bp->b_flags |= (XBF_WRITE | XBF_DONE | XBF_WRITE_FAIL);
 +		bp->b_last_error = bp->b_error;
 +		if (cfg->retry_timeout && !bp->b_first_retry_time)
 +			bp->b_first_retry_time = jiffies;
++=======
+ 	if (bp->b_flags & XBF_ASYNC) {
+ 		ASSERT(bp->b_iodone != NULL);
++>>>>>>> 1157b32c732c (xfs: remove XBF_ASYNC flag wrapper macros)
  
 -		trace_xfs_buf_item_iodone_async(bp, _RET_IP_);
 +		xfs_buf_ioerror(bp, 0);
 +		xfs_buf_submit(bp);
 +		return true;
 +	}
 +
 +	/*
 +	 * Repeated failure on an async write. Take action according to the
 +	 * error configuration we have been set up to use.
 +	 */
  
 -		xfs_buf_ioerror(bp, 0); /* errno of 0 unsets the flag */
 +	if (cfg->max_retries != XFS_ERR_RETRY_FOREVER &&
 +	    ++bp->b_retries > cfg->max_retries)
 +			goto permanent_error;
 +	if (cfg->retry_timeout &&
 +	    time_after(jiffies, cfg->retry_timeout + bp->b_first_retry_time))
 +			goto permanent_error;
  
 -		if (!(bp->b_flags & (XBF_STALE|XBF_WRITE_FAIL))) {
 -			bp->b_flags |= XBF_WRITE | XBF_ASYNC |
 -				       XBF_DONE | XBF_WRITE_FAIL;
 -			xfs_buf_submit(bp);
 -		} else {
 -			xfs_buf_relse(bp);
 -		}
 +	/* At unmount we may treat errors differently */
 +	if ((mp->m_flags & XFS_MOUNT_UNMOUNTING) && mp->m_fail_unmount)
 +		goto permanent_error;
  
 -		return;
 -	}
 +	/* still a transient error, higher layers will retry */
 +	xfs_buf_ioerror(bp, 0);
 +	xfs_buf_relse(bp);
 +	return true;
  
  	/*
 -	 * If the write of the buffer was synchronous, we want to make
 -	 * sure to return the error to the caller of xfs_bwrite().
 +	 * Permanent error - we need to trigger a shutdown if we haven't already
 +	 * to indicate that inconsistency will result from this action.
  	 */
 +permanent_error:
 +	xfs_force_shutdown(mp, SHUTDOWN_META_IO_ERROR);
 +out_stale:
  	xfs_buf_stale(bp);
 -	bp->b_flags |= XBF_DONE;
 -
 +	XFS_BUF_DONE(bp);
  	trace_xfs_buf_error_relse(bp, _RET_IP_);
 +	return false;
 +}
 +
 +/*
 + * This is the iodone() function for buffers which have had callbacks attached
 + * to them by xfs_buf_attach_iodone(). We need to iterate the items on the
 + * callback list, mark the buffer as having no more callbacks and then push the
 + * buffer through IO completion processing.
 + */
 +void
 +xfs_buf_iodone_callbacks(
 +	struct xfs_buf		*bp)
 +{
 +	/*
 +	 * If there is an error, process it. Some errors require us
 +	 * to run callbacks after failure processing is done so we
 +	 * detect that and take appropriate action.
 +	 */
 +	if (bp->b_error && xfs_buf_iodone_callback_error(bp))
 +		return;
 +
 +	/*
 +	 * Successful IO or permanent error. Either way, we can clear the
 +	 * retry state here in preparation for the next error that may occur.
 +	 */
 +	bp->b_last_error = 0;
 +	bp->b_retries = 0;
  
 -do_callbacks:
  	xfs_buf_do_callbacks(bp);
  	bp->b_fspriv = NULL;
  	bp->b_iodone = NULL;
diff --cc fs/xfs/xfs_log_recover.c
index 67ded68898f9,f00cce9bf830..000000000000
--- a/fs/xfs/xfs_log_recover.c
+++ b/fs/xfs/xfs_log_recover.c
@@@ -5077,10 -4926,9 +5077,13 @@@ xlog_do_recover
  	 * updates, re-read in the superblock and reverify it.
  	 */
  	bp = xfs_getsb(log->l_mp, 0);
++<<<<<<< HEAD
 +	XFS_BUF_UNDONE(bp);
++=======
+ 	bp->b_flags &= ~(XBF_DONE | XBF_ASYNC);
++>>>>>>> 1157b32c732c (xfs: remove XBF_ASYNC flag wrapper macros)
  	ASSERT(!(XFS_BUF_ISWRITE(bp)));
  	XFS_BUF_READ(bp);
- 	XFS_BUF_UNASYNC(bp);
  	bp->b_ops = &xfs_sb_buf_ops;
  
  	error = xfs_buf_submit_wait(bp);
* Unmerged path fs/xfs/xfs_buf.h
* Unmerged path fs/xfs/xfs_buf_item.c
diff --git a/fs/xfs/xfs_log.c b/fs/xfs/xfs_log.c
index 747a315eb12b..4d5cf798118e 100644
--- a/fs/xfs/xfs_log.c
+++ b/fs/xfs/xfs_log.c
@@ -1212,7 +1212,7 @@ xlog_iodone(xfs_buf_t *bp)
 	}
 
 	/* log I/O is always issued ASYNC */
-	ASSERT(XFS_BUF_ISASYNC(bp));
+	ASSERT(bp->b_flags & XBF_ASYNC);
 	xlog_state_done_syncing(iclog, aborted);
 
 	/*
@@ -1866,8 +1866,7 @@ xlog_sync(
 	bp->b_io_length = BTOBB(count);
 	bp->b_fspriv = iclog;
 	XFS_BUF_ZEROFLAGS(bp);
-	XFS_BUF_ASYNC(bp);
-	bp->b_flags |= XBF_SYNCIO;
+	bp->b_flags |= (XBF_ASYNC | XBF_SYNCIO);
 
 	if (log->l_mp->m_flags & XFS_MOUNT_BARRIER) {
 		bp->b_flags |= XBF_FUA;
@@ -1912,8 +1911,7 @@ xlog_sync(
 				(char *)&iclog->ic_header + count, split);
 		bp->b_fspriv = iclog;
 		XFS_BUF_ZEROFLAGS(bp);
-		XFS_BUF_ASYNC(bp);
-		bp->b_flags |= XBF_SYNCIO;
+		bp->b_flags |= (XBF_ASYNC | XBF_SYNCIO);
 		if (log->l_mp->m_flags & XFS_MOUNT_BARRIER)
 			bp->b_flags |= XBF_FUA;
 
* Unmerged path fs/xfs/xfs_log_recover.c
