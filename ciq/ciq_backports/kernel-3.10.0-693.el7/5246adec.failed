powerpc/pseries: Use H_CLEAR_HPT to clear MMU hash table during kexec

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [powerpc] pseries: Use H_CLEAR_HPT to clear MMU hash table during kexec (Steve Best) [1423396]
Rebuild_FUZZ: 93.85%
commit-author Anton Blanchard <anton@samba.org>
commit 5246adec59458b5d325b8e1462ea9ef3ead7f6ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5246adec.failed

An hcall was recently added that does exactly what we need during kexec
- it clears the entire MMU hash table, ignoring any VRMA mappings.

Try it and fall back to the old method if we get a failure.

On a POWER8 box with 5TB of memory, this reduces the time it takes to
kexec a new kernel from from 4 minutes to 1 minute.

	Signed-off-by: Anton Blanchard <anton@samba.org>
	Tested-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
[mpe: Split into separate functions and tweak function naming]
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 5246adec59458b5d325b8e1462ea9ef3ead7f6ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/lpar.c
diff --cc arch/powerpc/platforms/pseries/lpar.c
index e53d396f4601,24ad43afbb46..000000000000
--- a/arch/powerpc/platforms/pseries/lpar.c
+++ b/arch/powerpc/platforms/pseries/lpar.c
@@@ -591,17 -609,17 +611,29 @@@ static int __init disable_bulk_remove(c
  
  __setup("bulk_remove=", disable_bulk_remove);
  
 -void __init hpte_init_pseries(void)
 +void __init hpte_init_lpar(void)
  {
++<<<<<<< HEAD
 +	ppc_md.hpte_invalidate	= pSeries_lpar_hpte_invalidate;
 +	ppc_md.hpte_updatepp	= pSeries_lpar_hpte_updatepp;
 +	ppc_md.hpte_updateboltedpp = pSeries_lpar_hpte_updateboltedpp;
 +	ppc_md.hpte_insert	= pSeries_lpar_hpte_insert;
 +	ppc_md.hpte_remove	= pSeries_lpar_hpte_remove;
 +	ppc_md.hpte_removebolted = pSeries_lpar_hpte_removebolted;
 +	ppc_md.flush_hash_range	= pSeries_lpar_flush_hash_range;
 +	ppc_md.hpte_clear_all   = pSeries_lpar_hptab_clear;
 +	ppc_md.hugepage_invalidate = pSeries_lpar_hugepage_invalidate;
++=======
+ 	mmu_hash_ops.hpte_invalidate	 = pSeries_lpar_hpte_invalidate;
+ 	mmu_hash_ops.hpte_updatepp	 = pSeries_lpar_hpte_updatepp;
+ 	mmu_hash_ops.hpte_updateboltedpp = pSeries_lpar_hpte_updateboltedpp;
+ 	mmu_hash_ops.hpte_insert	 = pSeries_lpar_hpte_insert;
+ 	mmu_hash_ops.hpte_remove	 = pSeries_lpar_hpte_remove;
+ 	mmu_hash_ops.hpte_removebolted   = pSeries_lpar_hpte_removebolted;
+ 	mmu_hash_ops.flush_hash_range	 = pSeries_lpar_flush_hash_range;
+ 	mmu_hash_ops.hpte_clear_all      = pseries_hpte_clear_all;
+ 	mmu_hash_ops.hugepage_invalidate = pSeries_lpar_hugepage_invalidate;
++>>>>>>> 5246adec5945 (powerpc/pseries: Use H_CLEAR_HPT to clear MMU hash table during kexec)
  }
  
  #ifdef CONFIG_PPC_SMLPAR
diff --git a/arch/powerpc/include/asm/hvcall.h b/arch/powerpc/include/asm/hvcall.h
index 0bc9c284aa10..06856ab76ff2 100644
--- a/arch/powerpc/include/asm/hvcall.h
+++ b/arch/powerpc/include/asm/hvcall.h
@@ -275,7 +275,8 @@
 #define H_COP			0x304
 #define H_GET_MPP_X		0x314
 #define H_SET_MODE		0x31C
-#define MAX_HCALL_OPCODE	H_SET_MODE
+#define H_CLEAR_HPT		0x358
+#define MAX_HCALL_OPCODE	H_CLEAR_HPT
 
 /* H_VIOCTL functions */
 #define H_GET_VIOA_DUMP_SIZE	0x01
* Unmerged path arch/powerpc/platforms/pseries/lpar.c
