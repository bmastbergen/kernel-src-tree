block: add offset in blk_add_request_payload()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [block] add offset in blk_add_request_payload() (David Milburn) [1384066]
Rebuild_FUZZ: 91.76%
commit-author Ming Lin <ming.l@ssi.samsung.com>
commit 37e58237a16b94fcd2c2d1b7e9c6e1ca661c231b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/37e58237.failed

We could kmalloc() the payload, so need the offset in page.

	Signed-off-by: Ming Lin <ming.l@ssi.samsung.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 37e58237a16b94fcd2c2d1b7e9c6e1ca661c231b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/skd_main.c
#	drivers/scsi/sd.c
diff --cc drivers/scsi/sd.c
index 433634aa2867,69b0a4a7a15f..000000000000
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@@ -764,9 -779,8 +764,14 @@@ static int sd_setup_discard_cmnd(struc
  	 * discarded on disk. This allows us to report completion on the full
  	 * amount of blocks described by the request.
  	 */
++<<<<<<< HEAD
 +	blk_add_request_payload(rq, page, len);
 +	ret = scsi_init_io(cmd, GFP_ATOMIC);
 +	rq->buffer = page_address(page);
++=======
+ 	blk_add_request_payload(rq, page, 0, len);
+ 	ret = scsi_init_io(cmd);
++>>>>>>> 37e58237a16b (block: add offset in blk_add_request_payload())
  	rq->__data_len = nr_bytes;
  
  out:
* Unmerged path drivers/block/skd_main.c
diff --git a/block/blk-core.c b/block/blk-core.c
index defb77328143..de290bc578a1 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1483,6 +1483,7 @@ EXPORT_SYMBOL(blk_put_request);
  * blk_add_request_payload - add a payload to a request
  * @rq: request to update
  * @page: page backing the payload
+ * @offset: offset in page
  * @len: length of the payload.
  *
  * This allows to later add a payload to an already submitted request by
@@ -1493,12 +1494,12 @@ EXPORT_SYMBOL(blk_put_request);
  * discard requests should ever use it.
  */
 void blk_add_request_payload(struct request *rq, struct page *page,
-		unsigned int len)
+		int offset, unsigned int len)
 {
 	struct bio *bio = rq->bio;
 
 	bio->bi_io_vec->bv_page = page;
-	bio->bi_io_vec->bv_offset = 0;
+	bio->bi_io_vec->bv_offset = offset;
 	bio->bi_io_vec->bv_len = len;
 
 	bio->bi_size = len;
* Unmerged path drivers/block/skd_main.c
* Unmerged path drivers/scsi/sd.c
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 04d39eb837bf..7909ec940bbb 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -857,7 +857,7 @@ extern struct request *blk_make_request(struct request_queue *, struct bio *,
 extern void blk_rq_set_block_pc(struct request *);
 extern void blk_requeue_request(struct request_queue *, struct request *);
 extern void blk_add_request_payload(struct request *rq, struct page *page,
-		unsigned int len);
+		int offset, unsigned int len);
 extern int blk_lld_busy(struct request_queue *q);
 extern int blk_rq_prep_clone(struct request *rq, struct request *rq_src,
 			     struct bio_set *bs, gfp_t gfp_mask,
