vlan: Propagate MAC address to VLANs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Mike Manning <mmanning@brocade.com>
commit 308453aa9156a3b8ee382c0949befb507a32b0c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/308453aa.failed

The MAC address of the physical interface is only copied to the VLAN
when it is first created, resulting in an inconsistency after MAC
address changes of only newly created VLANs having an up-to-date MAC.

The VLANs should continue inheriting the MAC address of the physical
interface until the VLAN MAC address is explicitly set to any value.
This allows IPv6 EUI64 addresses for the VLAN to reflect any changes
to the MAC of the physical interface and thus for DAD to behave as
expected.

	Signed-off-by: Mike Manning <mmanning@brocade.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 308453aa9156a3b8ee382c0949befb507a32b0c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/8021q/vlan.c
#	net/8021q/vlan_dev.c
diff --cc net/8021q/vlan.c
index e007133a54fc,82a116ba590e..000000000000
--- a/net/8021q/vlan.c
+++ b/net/8021q/vlan.c
@@@ -301,7 -306,8 +305,12 @@@ static void vlan_sync_address(struct ne
  	    !ether_addr_equal(vlandev->dev_addr, dev->dev_addr))
  		dev_uc_add(dev, vlandev->dev_addr);
  
++<<<<<<< HEAD
 +	memcpy(vlan->real_dev_addr, dev->dev_addr, ETH_ALEN);
++=======
+ out:
+ 	ether_addr_copy(vlan->real_dev_addr, dev->dev_addr);
++>>>>>>> 308453aa9156 (vlan: Propagate MAC address to VLANs)
  }
  
  static void vlan_transfer_features(struct net_device *dev,
diff --cc net/8021q/vlan_dev.c
index b2c1a187691c,86ae75b77390..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -582,8 -572,10 +594,15 @@@ static int vlan_dev_init(struct net_dev
  	/* ipv6 shared card related stuff */
  	dev->dev_id = real_dev->dev_id;
  
++<<<<<<< HEAD
 +	if (is_zero_ether_addr(dev->dev_addr))
 +		memcpy(dev->dev_addr, real_dev->dev_addr, dev->addr_len);
++=======
+ 	if (is_zero_ether_addr(dev->dev_addr)) {
+ 		ether_addr_copy(dev->dev_addr, real_dev->dev_addr);
+ 		dev->addr_assign_type = NET_ADDR_STOLEN;
+ 	}
++>>>>>>> 308453aa9156 (vlan: Propagate MAC address to VLANs)
  	if (is_zero_ether_addr(dev->broadcast))
  		memcpy(dev->broadcast, real_dev->broadcast, dev->addr_len);
  
* Unmerged path net/8021q/vlan.c
diff --git a/net/8021q/vlan.h b/net/8021q/vlan.h
index 5704ed9c3a23..2475d5e5c2ea 100644
--- a/net/8021q/vlan.h
+++ b/net/8021q/vlan.h
@@ -109,6 +109,8 @@ int vlan_check_real_dev(struct net_device *real_dev,
 void vlan_setup(struct net_device *dev);
 int register_vlan_dev(struct net_device *dev);
 void unregister_vlan_dev(struct net_device *dev, struct list_head *head);
+bool vlan_dev_inherit_address(struct net_device *dev,
+			      struct net_device *real_dev);
 
 static inline u32 vlan_get_ingress_priority(struct net_device *dev,
 					    u16 vlan_tci)
* Unmerged path net/8021q/vlan_dev.c
