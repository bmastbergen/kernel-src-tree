sched, time: Fix build error with 64 bit cputime_t on 32 bit systems

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Rik van Riel <riel@redhat.com>
commit 347abad981c1ef815ea5ba861adba6a8c6aa1580
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/347abad9.failed

On 32 bit systems cmpxchg cannot handle 64 bit values, so
some additional magic is required to allow a 32 bit system
with CONFIG_VIRT_CPU_ACCOUNTING_GEN=y enabled to build.

Make sure the correct cmpxchg function is used when doing
an atomic swap of a cputime_t.

	Reported-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Rik van Riel <riel@redhat.com>
	Acked-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: umgwanakikbuti@gmail.com
	Cc: fweisbec@gmail.com
	Cc: srao@redhat.com
	Cc: lwoodman@redhat.com
	Cc: atheurer@redhat.com
	Cc: oleg@redhat.com
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: linux390@de.ibm.com
	Cc: linux-arch@vger.kernel.org
	Cc: linuxppc-dev@lists.ozlabs.org
	Cc: linux-s390@vger.kernel.org
Link: http://lkml.kernel.org/r/20140930155947.070cdb1f@annuminas.surriel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 347abad981c1ef815ea5ba861adba6a8c6aa1580)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/cputime.c
diff --cc kernel/sched/cputime.c
index 95f2dc3b9e67,8394b1ee600c..000000000000
--- a/kernel/sched/cputime.c
+++ b/kernel/sched/cputime.c
@@@ -599,16 -616,8 +616,21 @@@ static void cputime_adjust(struct task_
  		utime = rtime - stime;
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * If the tick based count grows faster than the scheduler one,
 +	 * the result of the scaling may go backward.
 +	 * Let's enforce monotonicity.
 +	 * Atomic exchange protects against concurrent cputime_adjust.
 +	 */
 +	while (stime > (rtime = ACCESS_ONCE(prev->stime)))
 +		cmpxchg(&prev->stime, rtime, stime);
 +	while (utime > (rtime = ACCESS_ONCE(prev->utime)))
 +		cmpxchg(&prev->utime, rtime, utime);
++=======
+ 	cputime_advance(&prev->stime, stime);
+ 	cputime_advance(&prev->utime, utime);
++>>>>>>> 347abad981c1 (sched, time: Fix build error with 64 bit cputime_t on 32 bit systems)
  
  out:
  	*ut = prev->utime;
diff --git a/arch/powerpc/include/asm/cputime.h b/arch/powerpc/include/asm/cputime.h
index 607559ab271f..6c840ceab820 100644
--- a/arch/powerpc/include/asm/cputime.h
+++ b/arch/powerpc/include/asm/cputime.h
@@ -32,6 +32,8 @@ static inline void setup_cputime_one_jiffy(void) { }
 typedef u64 __nocast cputime_t;
 typedef u64 __nocast cputime64_t;
 
+#define cmpxchg_cputime(ptr, old, new) cmpxchg(ptr, old, new)
+
 #ifdef __KERNEL__
 
 /*
diff --git a/arch/s390/include/asm/cputime.h b/arch/s390/include/asm/cputime.h
index f65bd3634519..3001887f94b7 100644
--- a/arch/s390/include/asm/cputime.h
+++ b/arch/s390/include/asm/cputime.h
@@ -18,6 +18,8 @@
 typedef unsigned long long __nocast cputime_t;
 typedef unsigned long long __nocast cputime64_t;
 
+#define cmpxchg_cputime(ptr, old, new) cmpxchg64(ptr, old, new)
+
 static inline unsigned long __div(unsigned long long n, unsigned long base)
 {
 #ifndef CONFIG_64BIT
diff --git a/include/asm-generic/cputime_jiffies.h b/include/asm-generic/cputime_jiffies.h
index d5cb78f53986..fe386fc6e85e 100644
--- a/include/asm-generic/cputime_jiffies.h
+++ b/include/asm-generic/cputime_jiffies.h
@@ -3,6 +3,8 @@
 
 typedef unsigned long __nocast cputime_t;
 
+#define cmpxchg_cputime(ptr, old, new) cmpxchg(ptr, old, new)
+
 #define cputime_one_jiffy		jiffies_to_cputime(1)
 #define cputime_to_jiffies(__ct)	(__force unsigned long)(__ct)
 #define cputime_to_scaled(__ct)		(__ct)
diff --git a/include/asm-generic/cputime_nsecs.h b/include/asm-generic/cputime_nsecs.h
index bf97df314b26..5496565aee45 100644
--- a/include/asm-generic/cputime_nsecs.h
+++ b/include/asm-generic/cputime_nsecs.h
@@ -21,6 +21,8 @@
 typedef u64 __nocast cputime_t;
 typedef u64 __nocast cputime64_t;
 
+#define cmpxchg_cputime(ptr, old, new) cmpxchg64(ptr, old, new)
+
 #define cputime_one_jiffy		jiffies_to_cputime(1)
 
 #define cputime_div(__ct, divisor)  div_u64((__force u64)__ct, divisor)
* Unmerged path kernel/sched/cputime.c
