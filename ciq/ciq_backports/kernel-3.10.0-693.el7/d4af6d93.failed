nohz: Fix spurious warning when hrtimer and clockevent get out of sync

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Frederic Weisbecker <fweisbec@gmail.com>
commit d4af6d933ccffd24286528f04d5c39e702c8580f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d4af6d93.failed

The sanity check ensuring that the tick expiry cache (ts->next_tick)
is actually in sync with the hardware clock (dev->next_event) makes the
wrong assumption that the clock can't be programmed later than the
hrtimer deadline.

In fact the clock hardware can be programmed later on some conditions
such as:

    * The hrtimer deadline is already in the past.
    * The hrtimer deadline is earlier than the minimum delay supported
      by the hardware.

Such conditions can be met when we program the tick, for example if the
last jiffies update hasn't been seen by the current CPU yet, we may
program the hrtimer to a deadline that is earlier than ktime_get()
because last_jiffies_update is our timestamp base to compute the next
tick.

As a result, we can randomly observe such warning:

	WARNING: CPU: 5 PID: 0 at kernel/time/tick-sched.c:794 tick_nohz_stop_sched_tick kernel/time/tick-sched.c:791 [inline]
	Call Trace:
	 tick_nohz_irq_exit
	 tick_irq_exit
	 irq_exit
	 exiting_irq
	 smp_call_function_interrupt
	 smp_call_function_single_interrupt
	 call_function_single_interrupt

Therefore, let's rather make sure that the tick expiry cache is sync'ed
with the tick hrtimer deadline, against which it is not supposed to
drift away. The clock hardware instead has its own will and can't be
used as a reliable comparison point.

Reported-and-tested-by: Sasha Levin <alexander.levin@verizon.com>
Reported-and-tested-by: Abdul Haleem <abdhalee@linux.vnet.ibm.com>
	Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: James Hartsock <hartsjc@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tim Wright <tim@binbash.co.uk>
Link: http://lkml.kernel.org/r/1497326654-14122-1-git-send-email-fweisbec@gmail.com
[ Minor readability edit. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d4af6d933ccffd24286528f04d5c39e702c8580f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/tick-sched.c
diff --cc kernel/time/tick-sched.c
index fdd2f0bbaf27,204600986e0d..000000000000
--- a/kernel/time/tick-sched.c
+++ b/kernel/time/tick-sched.c
@@@ -636,11 -763,19 +636,24 @@@ static ktime_t tick_nohz_stop_sched_tic
  		expires = KTIME_MAX;
  
  	expires = min_t(u64, expires, next_tick);
 -	tick = expires;
 +	tick.tv64 = expires;
  
  	/* Skip reprogram of event if its not changed */
++<<<<<<< HEAD
 +	if (ts->tick_stopped && (expires == dev->next_event.tv64))
 +		goto out;
++=======
+ 	if (ts->tick_stopped && (expires == ts->next_tick)) {
+ 		/* Sanity check: make sure clockevent is actually programmed */
+ 		if (tick == KTIME_MAX || ts->next_tick == hrtimer_get_expires(&ts->sched_timer))
+ 			goto out;
+ 
+ 		WARN_ON_ONCE(1);
+ 		printk_once("basemono: %llu ts->next_tick: %llu dev->next_event: %llu timer->active: %d timer->expires: %llu\n",
+ 			    basemono, ts->next_tick, dev->next_event,
+ 			    hrtimer_active(&ts->sched_timer), hrtimer_get_expires(&ts->sched_timer));
+ 	}
++>>>>>>> d4af6d933ccf (nohz: Fix spurious warning when hrtimer and clockevent get out of sync)
  
  	/*
  	 * nohz_stop_sched_tick can be called several times before
* Unmerged path kernel/time/tick-sched.c
