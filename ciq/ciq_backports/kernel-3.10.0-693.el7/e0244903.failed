fm10k: set netdev features in one location

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit e0244903d4a6a27f9f1e8b46b89afa4130aa9164
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e0244903.failed

Don't change netdev hw_features later in fm10k_probe, instead set all
values inside fm10k_alloc_netdev. To do so, we need to know the MAC type
(whether it is PF or VF) in order to determine what to do. This helps
ensure that all logic regarding features is co-located.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Bruce Allan <bruce.w.allan@intel.com>
	Tested-by: Krishneil Singh <krishneil.k.singh@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit e0244903d4a6a27f9f1e8b46b89afa4130aa9164)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
diff --cc drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
index d95485133ec5,79f6b7dd2362..000000000000
--- a/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
@@@ -1418,15 -1416,24 +1419,31 @@@ struct net_device *fm10k_alloc_netdev(c
  			 NETIF_F_RXHASH |
  			 NETIF_F_RXCSUM;
  
+ 	/* Only the PF can support VXLAN and NVGRE tunnel offloads */
+ 	if (info->mac == fm10k_mac_pf) {
+ 		dev->hw_enc_features = NETIF_F_IP_CSUM |
+ 				       NETIF_F_TSO |
+ 				       NETIF_F_TSO6 |
+ 				       NETIF_F_TSO_ECN |
+ 				       NETIF_F_GSO_UDP_TUNNEL |
+ 				       NETIF_F_IPV6_CSUM |
+ 				       NETIF_F_SG;
+ 
+ 		dev->features |= NETIF_F_GSO_UDP_TUNNEL;
+ 	}
+ 
  	/* all features defined to this point should be changeable */
- 	dev->hw_features |= dev->features;
+ 	hw_features = dev->features;
  
  	/* allow user to enable L2 forwarding acceleration */
++<<<<<<< HEAD
 +#if 0
 +	/* NOT IN RHEL7 */
 +	dev->hw_features |= NETIF_F_HW_L2FW_DOFFLOAD;
 +#endif
++=======
+ 	hw_features |= NETIF_F_HW_L2FW_DOFFLOAD;
++>>>>>>> e0244903d4a6 (fm10k: set netdev features in one location)
  
  	/* configure VLAN features */
  	dev->vlan_features |= dev->features;
diff --git a/drivers/net/ethernet/intel/fm10k/fm10k.h b/drivers/net/ethernet/intel/fm10k/fm10k.h
index 73a0596a2086..38b3e921a899 100644
--- a/drivers/net/ethernet/intel/fm10k/fm10k.h
+++ b/drivers/net/ethernet/intel/fm10k/fm10k.h
@@ -483,7 +483,7 @@ void fm10k_netpoll(struct net_device *netdev);
 #endif
 
 /* Netdev */
-struct net_device *fm10k_alloc_netdev(void);
+struct net_device *fm10k_alloc_netdev(const struct fm10k_info *info);
 int fm10k_setup_rx_resources(struct fm10k_ring *);
 int fm10k_setup_tx_resources(struct fm10k_ring *);
 void fm10k_free_rx_resources(struct fm10k_ring *);
* Unmerged path drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
diff --git a/drivers/net/ethernet/intel/fm10k/fm10k_pci.c b/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
index 8d2c77a00059..644dbfc4e025 100644
--- a/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
@@ -1727,13 +1727,6 @@ static int fm10k_sw_init(struct fm10k_intfc *interface,
 					     pci_resource_len(pdev, 4));
 	hw->sw_addr = interface->sw_addr;
 
-	/* Only the PF can support VXLAN and NVGRE offloads */
-	if (hw->mac.type != fm10k_mac_pf) {
-		netdev->hw_enc_features = 0;
-		netdev->features &= ~NETIF_F_GSO_UDP_TUNNEL;
-		netdev->hw_features &= ~NETIF_F_GSO_UDP_TUNNEL;
-	}
-
 	/* initialize DCBNL interface */
 	fm10k_dcbnl_set_ops(netdev);
 
@@ -1899,7 +1892,7 @@ static int fm10k_probe(struct pci_dev *pdev,
 	pci_set_master(pdev);
 	pci_save_state(pdev);
 
-	netdev = fm10k_alloc_netdev();
+	netdev = fm10k_alloc_netdev(fm10k_info_tbl[ent->driver_data]);
 	if (!netdev) {
 		err = -ENOMEM;
 		goto err_alloc_netdev;
