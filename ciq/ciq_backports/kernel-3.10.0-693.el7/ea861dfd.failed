security: Make inode argument of inode_getsecurity non-const

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [security] Make inode argument of inode_getsecurity non-const (Andreas Grunbacher) [437984]
Rebuild_FUZZ: 90.91%
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit ea861dfd9e0e7e044a6e65fa02a14b9159b568da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ea861dfd.failed

Make the inode argument of the inode_getsecurity hook non-const so that
we can use it to revalidate invalid security labels.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Acked-by:  Stephen Smalley <sds@tycho.nsa.gov>
	Signed-off-by: Paul Moore <pmoore@redhat.com>
(cherry picked from commit ea861dfd9e0e7e044a6e65fa02a14b9159b568da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/lsm_hooks.h
* Unmerged path include/linux/lsm_hooks.h
* Unmerged path include/linux/lsm_hooks.h
diff --git a/include/linux/security.h b/include/linux/security.h
index 0dea8b51ab59..595c8532dcc1 100644
--- a/include/linux/security.h
+++ b/include/linux/security.h
@@ -1798,7 +1798,7 @@ int security_inode_listxattr(struct dentry *dentry);
 int security_inode_removexattr(struct dentry *dentry, const char *name);
 int security_inode_need_killpriv(struct dentry *dentry);
 int security_inode_killpriv(struct dentry *dentry);
-int security_inode_getsecurity(const struct inode *inode, const char *name, void **buffer, bool alloc);
+int security_inode_getsecurity(struct inode *inode, const char *name, void **buffer, bool alloc);
 int security_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags);
 int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size);
 void security_inode_getsecid(const struct inode *inode, u32 *secid);
@@ -2222,7 +2222,7 @@ static inline int security_inode_killpriv(struct dentry *dentry)
 	return cap_inode_killpriv(dentry);
 }
 
-static inline int security_inode_getsecurity(const struct inode *inode, const char *name, void **buffer, bool alloc)
+static inline int security_inode_getsecurity(struct inode *inode, const char *name, void **buffer, bool alloc)
 {
 	return -EOPNOTSUPP;
 }
diff --git a/security/security.c b/security/security.c
index 2031746a708e..55afa4b40dc8 100644
--- a/security/security.c
+++ b/security/security.c
@@ -658,7 +658,7 @@ int security_inode_killpriv(struct dentry *dentry)
 	return security_ops->inode_killpriv(dentry);
 }
 
-int security_inode_getsecurity(const struct inode *inode, const char *name, void **buffer, bool alloc)
+int security_inode_getsecurity(struct inode *inode, const char *name, void **buffer, bool alloc)
 {
 	if (unlikely(IS_PRIVATE(inode)))
 		return -EOPNOTSUPP;
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index 47406b6a55bb..937eeb09e988 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -3033,7 +3033,7 @@ static int selinux_inode_removexattr(struct dentry *dentry, const char *name)
  *
  * Permission check is handled by selinux_inode_getxattr hook.
  */
-static int selinux_inode_getsecurity(const struct inode *inode, const char *name, void **buffer, bool alloc)
+static int selinux_inode_getsecurity(struct inode *inode, const char *name, void **buffer, bool alloc)
 {
 	u32 size;
 	int error;
diff --git a/security/smack/smack_lsm.c b/security/smack/smack_lsm.c
index 3af62fbedea0..4b6a39c6176b 100644
--- a/security/smack/smack_lsm.c
+++ b/security/smack/smack_lsm.c
@@ -955,7 +955,7 @@ static int smack_inode_removexattr(struct dentry *dentry, const char *name)
  *
  * Returns the size of the attribute or an error code
  */
-static int smack_inode_getsecurity(const struct inode *inode,
+static int smack_inode_getsecurity(struct inode *inode,
 				   const char *name, void **buffer,
 				   bool alloc)
 {
