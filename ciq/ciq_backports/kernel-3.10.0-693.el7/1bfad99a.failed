hugetlbfs: hugetlb_vmtruncate_list() needs to take a range to delete

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Mike Kravetz <mike.kravetz@oracle.com>
commit 1bfad99ab42569807d0ca1698449cae5e8c0334a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1bfad99a.failed

fallocate hole punch will want to unmap a specific range of pages.
Modify the existing hugetlb_vmtruncate_list() routine to take a
start/end range.  If end is 0, this indicates all pages after start
should be unmapped.  This is the same as the existing truncate
functionality.  Modify existing callers to add 0 as end of range.

Since the routine will be used in hole punch as well as truncate
operations, it is more appropriately renamed to hugetlb_vmdelete_list().

	Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
	Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Acked-by: Hillf Danton <hillf.zj@alibaba-inc.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Davidlohr Bueso <dave@stgolabs.net>
	Cc: Aneesh Kumar <aneesh.kumar@linux.vnet.ibm.com>
	Cc: Christoph Hellwig <hch@infradead.org>
	Cc: Michal Hocko <mhocko@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1bfad99ab42569807d0ca1698449cae5e8c0334a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/hugetlbfs/inode.c
diff --cc fs/hugetlbfs/inode.c
index c145954da828,b1e197d38abb..000000000000
--- a/fs/hugetlbfs/inode.c
+++ b/fs/hugetlbfs/inode.c
@@@ -412,10 -393,10 +423,15 @@@ static int hugetlb_vmtruncate(struct in
  	pgoff = offset >> PAGE_SHIFT;
  
  	i_size_write(inode, offset);
 -	i_mmap_lock_write(mapping);
 +	mutex_lock(&mapping->i_mmap_mutex);
  	if (!RB_EMPTY_ROOT(&mapping->i_mmap))
++<<<<<<< HEAD
 +		hugetlb_vmtruncate_list(&mapping->i_mmap, pgoff);
 +	mutex_unlock(&mapping->i_mmap_mutex);
++=======
+ 		hugetlb_vmdelete_list(&mapping->i_mmap, pgoff, 0);
+ 	i_mmap_unlock_write(mapping);
++>>>>>>> 1bfad99ab425 (hugetlbfs: hugetlb_vmtruncate_list() needs to take a range to delete)
  	truncate_hugepages(inode, offset);
  	return 0;
  }
* Unmerged path fs/hugetlbfs/inode.c
