utsns: Add a limit on the number of uts namespaces

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit f7af3d1c03136275b876f58644599b120cf4ffdd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f7af3d1c.failed

	Acked-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit f7af3d1c03136275b876f58644599b120cf4ffdd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/user_namespace.h
#	include/linux/utsname.h
#	kernel/ucount.c
#	kernel/utsname.c
diff --cc include/linux/user_namespace.h
index 9b176275291d,f9df7dd2609a..000000000000
--- a/include/linux/user_namespace.h
+++ b/include/linux/user_namespace.h
@@@ -22,6 -22,15 +22,18 @@@ struct uid_gid_map {	/* 64 bytes -- 1 c
  
  #define USERNS_INIT_FLAGS USERNS_SETGROUPS_ALLOWED
  
++<<<<<<< HEAD
++=======
+ struct ucounts;
+ 
+ enum ucount_type {
+ 	UCOUNT_USER_NAMESPACES,
+ 	UCOUNT_PID_NAMESPACES,
+ 	UCOUNT_UTS_NAMESPACES,
+ 	UCOUNT_COUNTS,
+ };
+ 
++>>>>>>> f7af3d1c0313 (utsns: Add a limit on the number of uts namespaces)
  struct user_namespace {
  	struct uid_gid_map	uid_map;
  	struct uid_gid_map	gid_map;
diff --cc include/linux/utsname.h
index 239e27733d6c,60f0bb83b313..000000000000
--- a/include/linux/utsname.h
+++ b/include/linux/utsname.h
@@@ -23,7 -24,8 +23,12 @@@ struct uts_namespace 
  	struct kref kref;
  	struct new_utsname name;
  	struct user_namespace *user_ns;
++<<<<<<< HEAD
 +	unsigned int proc_inum;
++=======
+ 	struct ucounts *ucounts;
+ 	struct ns_common ns;
++>>>>>>> f7af3d1c0313 (utsns: Add a limit on the number of uts namespaces)
  };
  extern struct uts_namespace init_uts_ns;
  
diff --cc kernel/utsname.c
index 883aaaa7de8a,f3b0bb4ac3ba..000000000000
--- a/kernel/utsname.c
+++ b/kernel/utsname.c
@@@ -36,18 -46,26 +46,35 @@@ static struct uts_namespace *clone_uts_
  					  struct uts_namespace *old_ns)
  {
  	struct uts_namespace *ns;
+ 	struct ucounts *ucounts;
  	int err;
  
+ 	err = -ENFILE;
+ 	ucounts = inc_uts_namespaces(user_ns);
+ 	if (!ucounts)
+ 		goto fail;
+ 
+ 	err = -ENOMEM;
  	ns = create_uts_ns();
  	if (!ns)
- 		return ERR_PTR(-ENOMEM);
+ 		goto fail_dec;
  
++<<<<<<< HEAD
 +	err = proc_alloc_inum(&ns->proc_inum);
 +	if (err) {
 +		kfree(ns);
 +		return ERR_PTR(err);
 +	}
 +
++=======
+ 	err = ns_alloc_inum(&ns->ns);
+ 	if (err)
+ 		goto fail_free;
+ 
+ 	ns->ucounts = ucounts;
+ 	ns->ns.ops = &utsns_operations;
+ 
++>>>>>>> f7af3d1c0313 (utsns: Add a limit on the number of uts namespaces)
  	down_read(&uts_sem);
  	memcpy(&ns->name, &old_ns->name, sizeof(ns->name));
  	ns->user_ns = get_user_ns(user_ns);
@@@ -83,8 -108,9 +117,9 @@@ void free_uts_ns(struct kref *kref
  	struct uts_namespace *ns;
  
  	ns = container_of(kref, struct uts_namespace, kref);
+ 	dec_uts_namespaces(ns->ucounts);
  	put_user_ns(ns->user_ns);
 -	ns_free_inum(&ns->ns);
 +	proc_free_inum(ns->proc_inum);
  	kfree(ns);
  }
  
* Unmerged path kernel/ucount.c
* Unmerged path include/linux/user_namespace.h
* Unmerged path include/linux/utsname.h
* Unmerged path kernel/ucount.c
* Unmerged path kernel/utsname.c
