proc/maps: replace proc_maps_private->pid with "struct inode *inode"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Oleg Nesterov <oleg@redhat.com>
commit 2c03376d2db005869b1d4449097d51c96196529e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2c03376d.failed

m_start() can use get_proc_task() instead, and "struct inode *"
provides more potentially useful info, see the next changes.

	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Cyrill Gorcunov <gorcunov@openvz.org>
	Cc: "Eric W. Biederman" <ebiederm@xmission.com>
	Cc: Greg Ungerer <gerg@uclinux.org>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2c03376d2db005869b1d4449097d51c96196529e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/task_nommu.c
diff --cc fs/proc/task_nommu.c
index 56123a6f462e,f36e213835cc..000000000000
--- a/fs/proc/task_nommu.c
+++ b/fs/proc/task_nommu.c
@@@ -276,20 -271,33 +276,34 @@@ static int maps_open(struct inode *inod
  		     const struct seq_operations *ops)
  {
  	struct proc_maps_private *priv;
 -
 +	int ret = -ENOMEM;
 +
++<<<<<<< HEAD
 +	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 +	if (priv) {
 +		priv->pid = proc_pid(inode);
 +		ret = seq_open(file, ops);
 +		if (!ret) {
 +			struct seq_file *m = file->private_data;
 +			m->private = priv;
 +		} else {
 +			kfree(priv);
 +		}
++=======
+ 	priv = __seq_open_private(file, ops, sizeof(*priv));
+ 	if (!priv)
+ 		return -ENOMEM;
+ 
+ 	priv->inode = inode;
+ 	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ);
+ 	if (IS_ERR(priv->mm)) {
+ 		int err = PTR_ERR(priv->mm);
+ 
+ 		seq_release_private(inode, file);
+ 		return err;
++>>>>>>> 2c03376d2db0 (proc/maps: replace proc_maps_private->pid with "struct inode *inode")
  	}
 -
 -	return 0;
 -}
 -
 -
 -static int map_release(struct inode *inode, struct file *file)
 -{
 -	struct seq_file *seq = file->private_data;
 -	struct proc_maps_private *priv = seq->private;
 -
 -	if (priv->mm)
 -		mmdrop(priv->mm);
 -
 -	return seq_release_private(inode, file);
 +	return ret;
  }
  
  static int pid_maps_open(struct inode *inode, struct file *file)
diff --git a/fs/proc/internal.h b/fs/proc/internal.h
index c8966a40142e..b3afe6cc8f18 100644
--- a/fs/proc/internal.h
+++ b/fs/proc/internal.h
@@ -291,7 +291,7 @@ extern int proc_remount(struct super_block *, int *, char *);
  * task_[no]mmu.c
  */
 struct proc_maps_private {
-	struct pid *pid;
+	struct inode *inode;
 	struct task_struct *task;
 	struct mm_struct *mm;
 #ifdef CONFIG_MMU
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 09ca18a42ac3..99a9cf2a51ac 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -174,7 +174,7 @@ static void *m_start(struct seq_file *m, loff_t *pos)
 	if (last_addr == -1UL)
 		return NULL;
 
-	priv->task = get_pid_task(priv->pid, PIDTYPE_PID);
+	priv->task = get_proc_task(priv->inode);
 	if (!priv->task)
 		return ERR_PTR(-ESRCH);
 
@@ -256,7 +256,7 @@ static int proc_maps_open(struct inode *inode, struct file *file,
 	if (!priv)
 		return -ENOMEM;
 
-	priv->pid = proc_pid(inode);
+	priv->inode = inode;
 	priv->mm = proc_mem_open(inode, PTRACE_MODE_READ);
 	if (IS_ERR(priv->mm)) {
 		int err = PTR_ERR(priv->mm);
* Unmerged path fs/proc/task_nommu.c
