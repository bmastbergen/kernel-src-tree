tools/power turbostat: make fewer systems calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: make fewer systems calls (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 93.18%
commit-author Len Brown <len.brown@intel.com>
commit 36229897ba966bb0dc9e060222ff17b198252367
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/36229897.failed

skip the open(2)/close(2) on each msr read
by keeping the /dev/cpu/*/msr files open.

The remaining read(2) is generally far fewer cycles
than the removed open(2) system call.

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 36229897ba966bb0dc9e060222ff17b198252367)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index b938c3391c64,2e47c2bc3e27..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -44,6 -44,8 +44,11 @@@
  #include <errno.h>
  
  char *proc_stat = "/proc/stat";
++<<<<<<< HEAD
++=======
+ FILE *outf;
+ int *fd_percpu;
++>>>>>>> 36229897ba96 (tools/power turbostat: make fewer systems calls)
  struct timespec interval_ts = {5, 0};
  unsigned int debug;
  unsigned int rapl_joules;
@@@ -1404,42 -1436,53 +1420,60 @@@ dump_config_tdp(void
  	unsigned long long msr;
  
  	get_msr(base_cpu, MSR_CONFIG_TDP_NOMINAL, &msr);
 -	fprintf(outf, "cpu%d: MSR_CONFIG_TDP_NOMINAL: 0x%08llx", base_cpu, msr);
 -	fprintf(outf, " (base_ratio=%d)\n", (unsigned int)msr & 0xEF);
 +	fprintf(stderr, "cpu%d: MSR_CONFIG_TDP_NOMINAL: 0x%08llx", base_cpu, msr);
 +	fprintf(stderr, " (base_ratio=%d)\n", (unsigned int)msr & 0xEF);
  
  	get_msr(base_cpu, MSR_CONFIG_TDP_LEVEL_1, &msr);
 -	fprintf(outf, "cpu%d: MSR_CONFIG_TDP_LEVEL_1: 0x%08llx (", base_cpu, msr);
 +	fprintf(stderr, "cpu%d: MSR_CONFIG_TDP_LEVEL_1: 0x%08llx (", base_cpu, msr);
  	if (msr) {
 -		fprintf(outf, "PKG_MIN_PWR_LVL1=%d ", (unsigned int)(msr >> 48) & 0xEFFF);
 -		fprintf(outf, "PKG_MAX_PWR_LVL1=%d ", (unsigned int)(msr >> 32) & 0xEFFF);
 -		fprintf(outf, "LVL1_RATIO=%d ", (unsigned int)(msr >> 16) & 0xEF);
 -		fprintf(outf, "PKG_TDP_LVL1=%d", (unsigned int)(msr) & 0xEFFF);
 +		fprintf(stderr, "PKG_MIN_PWR_LVL1=%d ", (unsigned int)(msr >> 48) & 0xEFFF);
 +		fprintf(stderr, "PKG_MAX_PWR_LVL1=%d ", (unsigned int)(msr >> 32) & 0xEFFF);
 +		fprintf(stderr, "LVL1_RATIO=%d ", (unsigned int)(msr >> 16) & 0xEF);
 +		fprintf(stderr, "PKG_TDP_LVL1=%d", (unsigned int)(msr) & 0xEFFF);
  	}
 -	fprintf(outf, ")\n");
 +	fprintf(stderr, ")\n");
  
  	get_msr(base_cpu, MSR_CONFIG_TDP_LEVEL_2, &msr);
 -	fprintf(outf, "cpu%d: MSR_CONFIG_TDP_LEVEL_2: 0x%08llx (", base_cpu, msr);
 +	fprintf(stderr, "cpu%d: MSR_CONFIG_TDP_LEVEL_2: 0x%08llx (", base_cpu, msr);
  	if (msr) {
 -		fprintf(outf, "PKG_MIN_PWR_LVL2=%d ", (unsigned int)(msr >> 48) & 0xEFFF);
 -		fprintf(outf, "PKG_MAX_PWR_LVL2=%d ", (unsigned int)(msr >> 32) & 0xEFFF);
 -		fprintf(outf, "LVL2_RATIO=%d ", (unsigned int)(msr >> 16) & 0xEF);
 -		fprintf(outf, "PKG_TDP_LVL2=%d", (unsigned int)(msr) & 0xEFFF);
 +		fprintf(stderr, "PKG_MIN_PWR_LVL2=%d ", (unsigned int)(msr >> 48) & 0xEFFF);
 +		fprintf(stderr, "PKG_MAX_PWR_LVL2=%d ", (unsigned int)(msr >> 32) & 0xEFFF);
 +		fprintf(stderr, "LVL2_RATIO=%d ", (unsigned int)(msr >> 16) & 0xEF);
 +		fprintf(stderr, "PKG_TDP_LVL2=%d", (unsigned int)(msr) & 0xEFFF);
  	}
 -	fprintf(outf, ")\n");
 +	fprintf(stderr, ")\n");
  
  	get_msr(base_cpu, MSR_CONFIG_TDP_CONTROL, &msr);
 -	fprintf(outf, "cpu%d: MSR_CONFIG_TDP_CONTROL: 0x%08llx (", base_cpu, msr);
 +	fprintf(stderr, "cpu%d: MSR_CONFIG_TDP_CONTROL: 0x%08llx (", base_cpu, msr);
  	if ((msr) & 0x3)
++<<<<<<< HEAD
 +		fprintf(stderr, "TDP_LEVEL=%d ", (unsigned int)(msr) & 0x3);
 +	fprintf(stderr, " lock=%d", (unsigned int)(msr >> 31) & 1);
 +	fprintf(stderr, ")\n");
 +	
++=======
+ 		fprintf(outf, "TDP_LEVEL=%d ", (unsigned int)(msr) & 0x3);
+ 	fprintf(outf, " lock=%d", (unsigned int)(msr >> 31) & 1);
+ 	fprintf(outf, ")\n");
+ 
++>>>>>>> 36229897ba96 (tools/power turbostat: make fewer systems calls)
  	get_msr(base_cpu, MSR_TURBO_ACTIVATION_RATIO, &msr);
 -	fprintf(outf, "cpu%d: MSR_TURBO_ACTIVATION_RATIO: 0x%08llx (", base_cpu, msr);
 -	fprintf(outf, "MAX_NON_TURBO_RATIO=%d", (unsigned int)(msr) & 0x7F);
 -	fprintf(outf, " lock=%d", (unsigned int)(msr >> 31) & 1);
 -	fprintf(outf, ")\n");
 +	fprintf(stderr, "cpu%d: MSR_TURBO_ACTIVATION_RATIO: 0x%08llx (", base_cpu, msr);
 +	fprintf(stderr, "MAX_NON_TURBO_RATIO=%d", (unsigned int)(msr) & 0x7F);
 +	fprintf(stderr, " lock=%d", (unsigned int)(msr >> 31) & 1);
 +	fprintf(stderr, ")\n");
  }
+ void free_fd_percpu(void)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < topo.max_cpu_num; ++i) {
+ 		if (fd_percpu[i] != 0)
+ 			close(fd_percpu[i]);
+ 	}
+ 
+ 	free(fd_percpu);
+ }
  
  void free_all_buffers(void)
  {
@@@ -2357,10 -2474,10 +2393,10 @@@ int print_thermal(struct thread_data *t
  
  	return 0;
  }
- 	
+ 
  void print_power_limit_msr(int cpu, unsigned long long msr, char *label)
  {
 -	fprintf(outf, "cpu%d: %s: %sabled (%f Watts, %f sec, clamp %sabled)\n",
 +	fprintf(stderr, "cpu%d: %s: %sabled (%f Watts, %f sec, clamp %sabled)\n",
  		cpu, label,
  		((msr >> 15) & 1) ? "EN" : "DIS",
  		((msr >> 0) & 0x7FFF) * rapl_power_units,
* Unmerged path tools/power/x86/turbostat/turbostat.c
