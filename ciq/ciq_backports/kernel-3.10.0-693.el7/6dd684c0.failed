bridge: mdb: Common function for mdb entry translation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Elad Raz <eladr@mellanox.com>
commit 6dd684c0feb207f30180570bad24264b922d9476
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6dd684c0.failed

There is duplicate code that translates br_mdb_entry to br_ip let's wrap it
in a common function.

	Signed-off-by: Elad Raz <eladr@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6dd684c0feb207f30180570bad24264b922d9476)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_mdb.c
diff --cc net/bridge/br_mdb.c
index 96ac1d431f38,b258120e1145..000000000000
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@@ -41,6 -53,27 +41,30 @@@ fail
  	return -EMSGSIZE;
  }
  
++<<<<<<< HEAD
++=======
+ static void __mdb_entry_fill_flags(struct br_mdb_entry *e, unsigned char flags)
+ {
+ 	e->state = flags & MDB_PG_FLAGS_PERMANENT;
+ 	e->flags = 0;
+ 	if (flags & MDB_PG_FLAGS_OFFLOAD)
+ 		e->flags |= MDB_FLAGS_OFFLOAD;
+ }
+ 
+ static void __mdb_entry_to_br_ip(struct br_mdb_entry *entry, struct br_ip *ip)
+ {
+ 	memset(ip, 0, sizeof(struct br_ip));
+ 	ip->vid = entry->vid;
+ 	ip->proto = entry->addr.proto;
+ 	if (ip->proto == htons(ETH_P_IP))
+ 		ip->u.ip4 = entry->addr.u.ip4;
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	else
+ 		ip->u.ip6 = entry->addr.u.ip6;
+ #endif
+ }
+ 
++>>>>>>> 6dd684c0feb2 (bridge: mdb: Common function for mdb entry translation)
  static int br_mdb_fill_info(struct sk_buff *skb, struct netlink_callback *cb,
  			    struct net_device *dev)
  {
@@@ -395,17 -522,10 +419,21 @@@ static int __br_mdb_add(struct net *net
  	if (!p || p->br != br || p->state == BR_STATE_DISABLED)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	memset(&ip, 0, sizeof(ip));
 +	ip.proto = entry->addr.proto;
 +	if (ip.proto == htons(ETH_P_IP))
 +		ip.u.ip4 = entry->addr.u.ip4;
 +#if IS_ENABLED(CONFIG_IPV6)
 +	else
 +		ip.u.ip6 = entry->addr.u.ip6;
 +#endif
++=======
+ 	__mdb_entry_to_br_ip(entry, &ip);
++>>>>>>> 6dd684c0feb2 (bridge: mdb: Common function for mdb entry translation)
  
  	spin_lock_bh(&br->multicast_lock);
 -	ret = br_mdb_add_group(br, p, &ip, entry->state, pg);
 +	ret = br_mdb_add_group(br, p, &ip, entry->state);
  	spin_unlock_bh(&br->multicast_lock);
  	return ret;
  }
@@@ -468,14 -589,7 +496,18 @@@ static int __br_mdb_del(struct net_brid
  	if (!netif_running(br->dev) || br->multicast_disabled)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	memset(&ip, 0, sizeof(ip));
 +	ip.proto = entry->addr.proto;
 +	if (ip.proto == htons(ETH_P_IP))
 +		ip.u.ip4 = entry->addr.u.ip4;
 +#if IS_ENABLED(CONFIG_IPV6)
 +	else
 +		ip.u.ip6 = entry->addr.u.ip6;
 +#endif
++=======
+ 	__mdb_entry_to_br_ip(entry, &ip);
++>>>>>>> 6dd684c0feb2 (bridge: mdb: Common function for mdb entry translation)
  
  	spin_lock_bh(&br->multicast_lock);
  	mdb = mlock_dereference(br->mdb, br);
* Unmerged path net/bridge/br_mdb.c
