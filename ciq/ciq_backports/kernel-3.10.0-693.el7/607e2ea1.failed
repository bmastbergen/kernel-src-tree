tracing: Set up infrastructure to allow tracers for instances

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Steven Rostedt (Red Hat) <rostedt@goodmis.org>
commit 607e2ea167e56db84387f3ab97e59a862e101cab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/607e2ea1.failed

Currently the tracers (function, function_graph, irqsoff, etc) can only
be used by the top level tracing directory (not for instances).

This sets up the infrastructure to allow instances to be able to
run a separate tracer apart from the what the top level tracing is
doing.

As tracers need to adapt for being used by instances, the tracers
must flag if they can be used by instances or not. Currently only the
'nop' tracer can be used by all instances.

	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit 607e2ea167e56db84387f3ab97e59a862e101cab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace.c
diff --cc kernel/trace/trace.c
index d31b92ef362d,944cd021aabf..000000000000
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@@ -6287,6 -6235,15 +6329,18 @@@ init_tracer_debugfs(struct trace_array 
  {
  	int cpu;
  
++<<<<<<< HEAD
++=======
+ 	trace_create_file("available_tracers", 0444, d_tracer,
+ 			tr, &show_traces_fops);
+ 
+ 	trace_create_file("current_tracer", 0644, d_tracer,
+ 			tr, &set_tracer_fops);
+ 
+ 	trace_create_file("tracing_cpumask", 0644, d_tracer,
+ 			  tr, &tracing_cpumask_fops);
+ 
++>>>>>>> 607e2ea167e5 (tracing: Set up infrastructure to allow tracers for instances)
  	trace_create_file("trace_options", 0644, d_tracer,
  			  tr, &tracing_iter_fops);
  
@@@ -6336,15 -6293,6 +6390,18 @@@ static __init int tracer_init_debugfs(v
  
  	init_tracer_debugfs(&global_trace, d_tracer);
  
++<<<<<<< HEAD
 +	trace_create_file("tracing_cpumask", 0644, d_tracer,
 +			&global_trace, &tracing_cpumask_fops);
 +
 +	trace_create_file("available_tracers", 0444, d_tracer,
 +			&global_trace, &show_traces_fops);
 +
 +	trace_create_file("current_tracer", 0644, d_tracer,
 +			&global_trace, &set_tracer_fops);
 +
++=======
++>>>>>>> 607e2ea167e5 (tracing: Set up infrastructure to allow tracers for instances)
  #ifdef CONFIG_TRACER_MAX_TRACE
  	trace_create_file("tracing_max_latency", 0644, d_tracer,
  			&tracing_max_latency, &tracing_max_lat_fops);
* Unmerged path kernel/trace/trace.c
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index 6be1e47b4081..0681971d9040 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -370,6 +370,7 @@ struct tracer {
 	struct tracer_flags	*flags;
 	bool			print_max;
 	bool			enabled;
+	bool			allow_instances;
 #ifdef CONFIG_TRACER_MAX_TRACE
 	bool			use_max_tr;
 #endif
diff --git a/kernel/trace/trace_nop.c b/kernel/trace/trace_nop.c
index f3984098c0d7..69a5cc94c01a 100644
--- a/kernel/trace/trace_nop.c
+++ b/kernel/trace/trace_nop.c
@@ -96,6 +96,7 @@ struct tracer nop_trace __read_mostly =
 	.selftest	= trace_selftest_startup_nop,
 #endif
 	.flags		= &nop_flags,
-	.set_flag	= nop_set_flag
+	.set_flag	= nop_set_flag,
+	.allow_instances = true,
 };
 
