x86/cpu: Add detection of AMD RAS Capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] cpu: Add detection of AMD RAS Capabilities (David Arcari) [1389383]
Rebuild_FUZZ: 95.45%
commit-author Yazen Ghannam <Yazen.Ghannam@amd.com>
commit 71faad43060d3d2040583635fbf7d1bdb3d04118
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/71faad43.failed

Add a new CPUID leaf to hold the contents of CPUID 0x80000007_EBX (RasCap).

Define bits that are currently in use:

 Bit 0: McaOverflowRecov
 Bit 1: SUCCOR
 Bit 3: ScalableMca

	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
[ Shorten comment. ]
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: linux-edac <linux-edac@vger.kernel.org>
Link: http://lkml.kernel.org/r/1462971509-3856-5-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 71faad43060d3d2040583635fbf7d1bdb3d04118)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/include/asm/cpufeature.h
index 9d2d987cf6d5,53ac9bbf2064..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -273,8 -8,43 +273,34 @@@
  #include <asm/asm.h>
  #include <linux/bitops.h>
  
++<<<<<<< HEAD
++=======
+ enum cpuid_leafs
+ {
+ 	CPUID_1_EDX		= 0,
+ 	CPUID_8000_0001_EDX,
+ 	CPUID_8086_0001_EDX,
+ 	CPUID_LNX_1,
+ 	CPUID_1_ECX,
+ 	CPUID_C000_0001_EDX,
+ 	CPUID_8000_0001_ECX,
+ 	CPUID_LNX_2,
+ 	CPUID_LNX_3,
+ 	CPUID_7_0_EBX,
+ 	CPUID_D_1_EAX,
+ 	CPUID_F_0_EDX,
+ 	CPUID_F_1_EDX,
+ 	CPUID_8000_0008_EBX,
+ 	CPUID_6_EAX,
+ 	CPUID_8000_000A_EDX,
+ 	CPUID_7_ECX,
+ 	CPUID_8000_0007_EBX,
+ };
+ 
+ #ifdef CONFIG_X86_FEATURE_NAMES
++>>>>>>> 71faad43060d (x86/cpu: Add detection of AMD RAS Capabilities)
  extern const char * const x86_cap_flags[NCAPINTS*32];
  extern const char * const x86_power_flags[32];
 -#define X86_CAP_FMT "%s"
 -#define x86_cap_flag(flag) x86_cap_flags[flag]
 -#else
 -#define X86_CAP_FMT "%d:%d"
 -#define x86_cap_flag(flag) ((flag) >> 5), ((flag) & 31)
 -#endif
 -
 -/*
 - * In order to save room, we index into this array by doing
 - * X86_BUG_<name> - NCAPINTS*32.
 - */
 -extern const char * const x86_bug_flags[NBUGINTS*32];
  
  #define test_cpu_cap(c, bit)						\
  	 test_bit(bit, (unsigned long *)((c)->x86_capability))
diff --cc arch/x86/kernel/cpu/common.c
index d805b498a12b,dbc6f066e231..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -709,8 -717,15 +709,15 @@@ void get_cpu_cap(struct cpuinfo_x86 *c
  		}
  	}
  
+ 	if (c->extended_cpuid_level >= 0x80000007) {
+ 		cpuid(0x80000007, &eax, &ebx, &ecx, &edx);
+ 
+ 		c->x86_capability[CPUID_8000_0007_EBX] = ebx;
+ 		c->x86_power = edx;
+ 	}
+ 
  	if (c->extended_cpuid_level >= 0x80000008) {
 -		cpuid(0x80000008, &eax, &ebx, &ecx, &edx);
 +		u32 eax = cpuid_eax(0x80000008);
  
  		c->x86_virt_bits = (eax >> 8) & 0xff;
  		c->x86_phys_bits = eax & 0xff;
@@@ -720,8 -736,8 +727,13 @@@
  		c->x86_phys_bits = 36;
  #endif
  
++<<<<<<< HEAD
 +	if (c->extended_cpuid_level >= 0x80000007)
 +		c->x86_power = cpuid_edx(0x80000007);
++=======
+ 	if (c->extended_cpuid_level >= 0x8000000a)
+ 		c->x86_capability[CPUID_8000_000A_EDX] = cpuid_edx(0x8000000a);
++>>>>>>> 71faad43060d (x86/cpu: Add detection of AMD RAS Capabilities)
  
  	init_scattered_cpuid_features(c);
  }
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/include/asm/cpufeature.h
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/kernel/cpu/common.c
