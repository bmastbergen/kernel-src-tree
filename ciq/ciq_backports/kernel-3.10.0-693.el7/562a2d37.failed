tools/power turbostat: show IRQs per CPU

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: show IRQs per CPU (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 91.89%
commit-author Len Brown <len.brown@intel.com>
commit 562a2d377bb9882c49debc9e1be7127a1717e242
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/562a2d37.failed

The new IRQ column shows how many interrupts have occurred on each CPU
during the measurement inteval.  This information comes from
the difference between /proc/interrupts shapshots made before
and after the measurement interval.

The first row, the system summary, shows the sum of the IRQS
for all CPUs during that interval.

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 562a2d377bb9882c49debc9e1be7127a1717e242)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index b938c3391c64,c6793268d81f..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -290,8 -311,8 +295,13 @@@ int get_msr(int cpu, off_t offset, unsi
  /*
   * Example Format w/ field column widths:
   *
++<<<<<<< HEAD
 + *  Package    Core     CPU Avg_MHz Bzy_MHz TSC_MHz     SMI   %Busy CPU_%c1 CPU_%c3 CPU_%c6 CPU_%c7 CoreTmp  PkgTmp Pkg%pc2 Pkg%pc3 Pkg%pc6 Pkg%pc7 PkgWatt CorWatt GFXWatt
 + * 123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
++=======
+  *  Package    Core     CPU Avg_MHz Bzy_MHz TSC_MHz     IRQ   SMI   Busy% CPU_%c1 CPU_%c3 CPU_%c6 CPU_%c7 CoreTmp  PkgTmp Pkg%pc2 Pkg%pc3 Pkg%pc6 Pkg%pc7 PkgWatt CorWatt GFXWatt
+  * 12345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
++>>>>>>> 562a2d377bb9 (tools/power turbostat: show IRQs per CPU)
   */
  
  void print_header(void)
@@@ -319,6 -340,11 +329,14 @@@
  	if (extra_msr_offset64)
  		outp += sprintf(outp, "           MSR 0x%03X", extra_msr_offset64);
  
++<<<<<<< HEAD
++=======
+ 	if (!debug)
+ 		goto done;
+ 
+ 	if (do_irq)
+ 		outp += sprintf(outp, "     IRQ");
++>>>>>>> 562a2d377bb9 (tools/power turbostat: show IRQs per CPU)
  	if (do_smi)
  		outp += sprintf(outp, "     SMI");
  
@@@ -539,6 -568,13 +559,16 @@@ int format_counters(struct thread_data 
  	if (extra_msr_offset64)
  		outp += sprintf(outp, "  0x%016llx", t->extra_msr64);
  
++<<<<<<< HEAD
++=======
+ 	if (!debug)
+ 		goto done;
+ 
+ 	/* IRQ */
+ 	if (do_irq)
+ 		outp += sprintf(outp, "%8d", t->irq_count);
+ 
++>>>>>>> 562a2d377bb9 (tools/power turbostat: show IRQs per CPU)
  	/* SMI */
  	if (do_smi)
  		outp += sprintf(outp, "%8d", t->smi_count);
@@@ -1470,6 -1535,11 +1509,14 @@@ void free_all_buffers(void
  	free(output_buffer);
  	output_buffer = NULL;
  	outp = NULL;
++<<<<<<< HEAD
++=======
+ 
+ 	free_fd_percpu();
+ 
+ 	free(irq_column_2_cpu);
+ 	free(irqs_per_cpu);
++>>>>>>> 562a2d377bb9 (tools/power turbostat: show IRQs per CPU)
  }
  
  /*
@@@ -1731,8 -1881,10 +1858,10 @@@ restart
  		for_all_cpus_2(delta_cpu, ODD_COUNTERS, EVEN_COUNTERS);
  		compute_average(EVEN_COUNTERS);
  		format_all_counters(EVEN_COUNTERS);
 -		flush_output_stdout();
 +		flush_stdout();
  		nanosleep(&interval_ts, NULL);
+ 		if (snapshot_proc_sysfs_files())
+ 			goto restart;
  		retval = for_all_cpus(get_counters, EVEN_COUNTERS);
  		if (retval < -1) {
  			exit(retval);
@@@ -3078,10 -3334,27 +3207,34 @@@ void allocate_output_buffer(
  	if (outp == NULL)
  		err(-1, "calloc output buffer");
  }
++<<<<<<< HEAD
 +
 +void setup_all_buffers(void)
 +{
 +	topology_probe();
++=======
+ void allocate_fd_percpu(void)
+ {
+ 	fd_percpu = calloc(topo.max_cpu_num, sizeof(int));
+ 	if (fd_percpu == NULL)
+ 		err(-1, "calloc fd_percpu");
+ }
+ void allocate_irq_buffers(void)
+ {
+ 	irq_column_2_cpu = calloc(topo.num_cpus, sizeof(int));
+ 	if (irq_column_2_cpu == NULL)
+ 		err(-1, "calloc %d", topo.num_cpus);
+ 
+ 	irqs_per_cpu = calloc(topo.max_cpu_num, sizeof(int));
+ 	if (irqs_per_cpu == NULL)
+ 		err(-1, "calloc %d", topo.max_cpu_num);
+ }
+ void setup_all_buffers(void)
+ {
+ 	topology_probe();
+ 	allocate_irq_buffers();
+ 	allocate_fd_percpu();
++>>>>>>> 562a2d377bb9 (tools/power turbostat: show IRQs per CPU)
  	allocate_counters(&thread_even, &core_even, &package_even);
  	allocate_counters(&thread_odd, &core_odd, &package_odd);
  	allocate_output_buffer();
* Unmerged path tools/power/x86/turbostat/turbostat.c
