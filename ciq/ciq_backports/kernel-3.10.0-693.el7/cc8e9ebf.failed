net/mlx5e: Fix ethtool -g/G rx ring parameter report with striding RQ

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Fix ethtool -g/G rx ring parameter report with striding RQ (Don Dutile) [1417284]
Rebuild_FUZZ: 97.01%
commit-author Eran Ben Elisha <eranbe@mellanox.com>
commit cc8e9ebf952699cb6870f1366a4920d05b036e31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/cc8e9ebf.failed

The driver RQ has two possible configurations: striding RQ and
non-striding RQ.  Until this patch, the driver always reported the
number of hardware WQEs (ring descriptors). For non striding RQ
configuration, this was OK since we have one WQE per pending packet
For striding RQ, multiple packets can fit into one WQE. For better
user experience we normalize the rx_pending parameter (size of wqe/mtu)
as the average ring size in case of striding RQ.

Fixes: 461017cb006a ('net/mlx5e: Support RX multi-packet WQE ...')
	Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cc8e9ebf952699cb6870f1366a4920d05b036e31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 99f91ff56ecb,d0cf8fa22659..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -385,18 -435,36 +434,39 @@@ static int mlx5e_set_ringparam(struct n
  			    __func__);
  		return -EINVAL;
  	}
- 	if (param->rx_pending < (1 << mlx5_min_log_rq_size(rq_wq_type))) {
+ 
+ 	min_rq_size = mlx5e_rx_wqes_to_packets(priv, rq_wq_type,
+ 					       1 << mlx5_min_log_rq_size(rq_wq_type));
+ 	max_rq_size = mlx5e_rx_wqes_to_packets(priv, rq_wq_type,
+ 					       1 << mlx5_max_log_rq_size(rq_wq_type));
+ 	rx_pending_wqes = mlx5e_packets_to_rx_wqes(priv, rq_wq_type,
+ 						   param->rx_pending);
+ 
+ 	if (param->rx_pending < min_rq_size) {
  		netdev_info(dev, "%s: rx_pending (%d) < min (%d)\n",
  			    __func__, param->rx_pending,
- 			    1 << mlx5_min_log_rq_size(rq_wq_type));
+ 			    min_rq_size);
  		return -EINVAL;
  	}
- 	if (param->rx_pending > (1 << mlx5_max_log_rq_size(rq_wq_type))) {
+ 	if (param->rx_pending > max_rq_size) {
  		netdev_info(dev, "%s: rx_pending (%d) > max (%d)\n",
  			    __func__, param->rx_pending,
- 			    1 << mlx5_max_log_rq_size(rq_wq_type));
+ 			    max_rq_size);
+ 		return -EINVAL;
+ 	}
++<<<<<<< HEAD
++=======
+ 
+ 	num_mtts = MLX5E_REQUIRED_MTTS(priv->params.num_channels,
+ 				       rx_pending_wqes);
+ 	if (priv->params.rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ &&
+ 	    !MLX5E_VALID_NUM_MTTS(num_mtts)) {
+ 		netdev_info(dev, "%s: rx_pending (%d) request can't be satisfied, try to reduce.\n",
+ 			    __func__, param->rx_pending);
  		return -EINVAL;
  	}
+ 
++>>>>>>> cc8e9ebf9526 (net/mlx5e: Fix ethtool -g/G rx ring parameter report with striding RQ)
  	if (param->tx_pending < (1 << MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE)) {
  		netdev_info(dev, "%s: tx_pending (%d) < min (%d)\n",
  			    __func__, param->tx_pending,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
