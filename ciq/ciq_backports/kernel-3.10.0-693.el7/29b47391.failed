Input: wacom - switch from an USB driver to a HID driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 29b4739134c73a2873adec93346f09bb76d6a794
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/29b47391.failed

All USB Wacom tablets are actually HID devices.
For historical reasons, they are handled as plain USB devices.
The current code makes more and more reference to the HID subsystem
like implementing its own HID report descriptor parser to handle new
devices.

From the user point of view, we can transparently switch from this state
to a driver handled in the HID subsystem and clean up a lot of USB specific
code in the wacom.ko driver.

The other benefit once the USB dependecies have been removed is that we can
use a tool like uhid to make regression tests and allow further cleanup or
new implementations without risking breaking current behaviors.

To match the current handling of devices in wacom_wac.c, we rely on the
hid_type set by usbhid. usbhid sets the hid_type to HID_TYPE_USBMOUSE when
it sees a USB boot mouse protocol declared and HID_TYPE_USBNONE when the
device is plain HID. There is thus a one to one matching between the list
of supported devices before and after the switch from USB to HID.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Reviewed-by: Jason Gerecke <killertofu@gmail.com>
	Tested-by: Jason Gerecke <killertofu@gmail.com>
	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit 29b4739134c73a2873adec93346f09bb76d6a794)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-core.c
#	drivers/input/tablet/wacom_sys.c
#	drivers/input/tablet/wacom_wac.c
#	drivers/input/tablet/wacom_wac.h
diff --cc drivers/hid/hid-core.c
index 41a4a456d195,1ce751db5a7a..000000000000
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@@ -2385,7 -2343,11 +2394,15 @@@ static const struct hid_device_id hid_i
  	{ HID_USB_DEVICE(USB_VENDOR_ID_SYNAPTICS, USB_DEVICE_ID_SYNAPTICS_WTP) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_SYNAPTICS, USB_DEVICE_ID_SYNAPTICS_DPAD) },
  #endif
++<<<<<<< HEAD
 +	{ HID_USB_DEVICE(USB_VENDOR_ID_WACOM, HID_ANY_ID) },
++=======
+ 	{ HID_USB_DEVICE(USB_VENDOR_ID_VERNIER, USB_DEVICE_ID_VERNIER_LABPRO) },
+ 	{ HID_USB_DEVICE(USB_VENDOR_ID_VERNIER, USB_DEVICE_ID_VERNIER_GOTEMP) },
+ 	{ HID_USB_DEVICE(USB_VENDOR_ID_VERNIER, USB_DEVICE_ID_VERNIER_SKIP) },
+ 	{ HID_USB_DEVICE(USB_VENDOR_ID_VERNIER, USB_DEVICE_ID_VERNIER_CYCLOPS) },
+ 	{ HID_USB_DEVICE(USB_VENDOR_ID_VERNIER, USB_DEVICE_ID_VERNIER_LCSPEC) },
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WISEGROUP, USB_DEVICE_ID_4_PHIDGETSERVO_20) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WISEGROUP, USB_DEVICE_ID_1_PHIDGETSERVO_20) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WISEGROUP, USB_DEVICE_ID_8_8_4_IF_KIT) },
diff --cc drivers/input/tablet/wacom_sys.c
index e1d7b0ab6eef,5ceeab6e95f1..000000000000
--- a/drivers/input/tablet/wacom_sys.c
+++ b/drivers/input/tablet/wacom_sys.c
@@@ -133,42 -101,22 +115,41 @@@ static int wacom_raw_event(struct hid_d
  static int wacom_open(struct input_dev *dev)
  {
  	struct wacom *wacom = input_get_drvdata(dev);
- 	int retval = 0;
- 
- 	if (usb_autopm_get_interface(wacom->intf) < 0)
- 		return -EIO;
+ 	int retval;
  
  	mutex_lock(&wacom->lock);
++<<<<<<< HEAD
 +
 +	if (usb_submit_urb(wacom->irq, GFP_KERNEL)) {
 +		retval = -EIO;
 +		goto out;
 +	}
 +
 +	wacom->open = true;
 +	wacom->intf->needs_remote_wakeup = 1;
 +
 +out:
++=======
+ 	retval = hid_hw_open(wacom->hdev);
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	mutex_unlock(&wacom->lock);
- 	usb_autopm_put_interface(wacom->intf);
+ 
  	return retval;
  }
  
  static void wacom_close(struct input_dev *dev)
  {
  	struct wacom *wacom = input_get_drvdata(dev);
- 	int autopm_error;
- 
- 	autopm_error = usb_autopm_get_interface(wacom->intf);
  
  	mutex_lock(&wacom->lock);
++<<<<<<< HEAD
 +	usb_kill_urb(wacom->irq);
 +	wacom->open = false;
 +	wacom->intf->needs_remote_wakeup = 0;
++=======
+ 	hid_hw_close(wacom->hdev);
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	mutex_unlock(&wacom->lock);
- 
- 	if (!autopm_error)
- 		usb_autopm_put_interface(wacom->intf);
  }
  
  /*
@@@ -1177,18 -1172,16 +1163,20 @@@ static void wacom_wireless_work(struct 
  	wacom_destroy_battery(wacom);
  
  	/* Stylus interface */
- 	wacom1 = usb_get_intfdata(usbdev->config->interface[1]);
+ 	hdev1 = usb_get_intfdata(usbdev->config->interface[1]);
+ 	wacom1 = hid_get_drvdata(hdev1);
  	wacom_wac1 = &(wacom1->wacom_wac);
 -	wacom_unregister_inputs(wacom1);
 +	if (wacom_wac1->input)
 +		input_unregister_device(wacom_wac1->input);
 +	wacom_wac1->input = NULL;
  
  	/* Touch interface */
- 	wacom2 = usb_get_intfdata(usbdev->config->interface[2]);
+ 	hdev2 = usb_get_intfdata(usbdev->config->interface[2]);
+ 	wacom2 = hid_get_drvdata(hdev2);
  	wacom_wac2 = &(wacom2->wacom_wac);
 -	wacom_unregister_inputs(wacom2);
 +	if (wacom_wac2->input)
 +		input_unregister_device(wacom_wac2->input);
 +	wacom_wac2->input = NULL;
  
  	if (wacom_wac->pid == 0) {
  		dev_info(&wacom->intf->dev, "wireless tablet disconnected\n");
@@@ -1223,9 -1220,10 +1211,9 @@@
  			goto fail;
  
  		/* Touch interface */
 -		if (wacom_wac1->features.touch_max ||
 -		    wacom_wac1->features.type == INTUOSHT) {
 +		if (wacom_wac1->features.touch_max) {
  			wacom_wac2->features =
- 				*((struct wacom_features *)id->driver_info);
+ 				*((struct wacom_features *)id->driver_data);
  			wacom_wac2->features.pktlen = WACOM_PKGLEN_BBTOUCH3;
  			wacom_wac2->features.device_type = BTN_TOOL_FINGER;
  			wacom_wac2->features.x_max = wacom_wac2->features.y_max = 4096;
@@@ -1385,83 -1381,73 +1370,77 @@@ static int wacom_probe(struct hid_devic
  			other_dev = dev;
  		error = wacom_add_shared_data(wacom_wac, other_dev);
  		if (error)
- 			goto fail3;
+ 			goto fail1;
  	}
  
- 	usb_fill_int_urb(wacom->irq, dev,
- 			 usb_rcvintpipe(dev, endpoint->bEndpointAddress),
- 			 wacom_wac->data, features->pktlen,
- 			 wacom_sys_irq, wacom, endpoint->bInterval);
- 	wacom->irq->transfer_dma = wacom->data_dma;
- 	wacom->irq->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;
- 
  	error = wacom_initialize_leds(wacom);
  	if (error)
- 		goto fail4;
+ 		goto fail2;
  
  	if (!(features->quirks & WACOM_QUIRK_NO_INPUT)) {
 -		error = wacom_register_inputs(wacom);
 +		error = wacom_register_input(wacom);
  		if (error)
- 			goto fail5;
+ 			goto fail3;
  	}
  
  	/* Note that if query fails it is not a hard failure */
  	wacom_query_tablet_data(intf, features);
  
- 	usb_set_intfdata(intf, wacom);
+ 	/* Regular HID work starts now */
+ 	error = hid_parse(hdev);
+ 	if (error) {
+ 		hid_err(hdev, "parse failed\n");
+ 		goto fail4;
+ 	}
  
- 	if (features->quirks & WACOM_QUIRK_MONITOR) {
- 		if (usb_submit_urb(wacom->irq, GFP_KERNEL)) {
- 			error = -EIO;
- 			goto fail5;
- 		}
++<<<<<<< HEAD
++=======
+ 	error = hid_hw_start(hdev, HID_CONNECT_HIDRAW);
+ 	if (error) {
+ 		hid_err(hdev, "hw start failed\n");
+ 		goto fail4;
  	}
  
+ 	if (features->quirks & WACOM_QUIRK_MONITOR)
+ 		error = hid_hw_open(hdev);
+ 
+ 	if (wacom_wac->features.type == INTUOSHT && wacom_wac->features.touch_max) {
+ 		if (wacom_wac->features.device_type == BTN_TOOL_FINGER)
+ 			wacom_wac->shared->touch_input = wacom_wac->input;
+ 	}
+ 
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	return 0;
  
-  fail5: wacom_destroy_leds(wacom);
-  fail4:	wacom_remove_shared_data(wacom_wac);
-  fail3:	usb_free_urb(wacom->irq);
-  fail2:	usb_free_coherent(dev, WACOM_PKGLEN_MAX, wacom_wac->data, wacom->data_dma);
+  fail4:	wacom_unregister_inputs(wacom);
+  fail3:	wacom_destroy_leds(wacom);
+  fail2:	wacom_remove_shared_data(wacom_wac);
   fail1:	kfree(wacom);
+ 	hid_set_drvdata(hdev, NULL);
  	return error;
  }
  
- static void wacom_disconnect(struct usb_interface *intf)
+ static void wacom_remove(struct hid_device *hdev)
  {
- 	struct wacom *wacom = usb_get_intfdata(intf);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
  
- 	usb_set_intfdata(intf, NULL);
+ 	hid_hw_stop(hdev);
  
- 	usb_kill_urb(wacom->irq);
  	cancel_work_sync(&wacom->work);
 -	wacom_unregister_inputs(wacom);
 +	if (wacom->wacom_wac.input)
 +		input_unregister_device(wacom->wacom_wac.input);
  	wacom_destroy_battery(wacom);
  	wacom_destroy_leds(wacom);
- 	usb_free_urb(wacom->irq);
- 	usb_free_coherent(interface_to_usbdev(intf), WACOM_PKGLEN_MAX,
- 			wacom->wacom_wac.data, wacom->data_dma);
  	wacom_remove_shared_data(&wacom->wacom_wac);
- 	kfree(wacom);
- }
  
- static int wacom_suspend(struct usb_interface *intf, pm_message_t message)
- {
- 	struct wacom *wacom = usb_get_intfdata(intf);
- 
- 	mutex_lock(&wacom->lock);
- 	usb_kill_urb(wacom->irq);
- 	mutex_unlock(&wacom->lock);
- 
- 	return 0;
+ 	hid_set_drvdata(hdev, NULL);
+ 	kfree(wacom);
  }
  
- static int wacom_resume(struct usb_interface *intf)
+ static int wacom_resume(struct hid_device *hdev)
  {
- 	struct wacom *wacom = usb_get_intfdata(intf);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
  	struct wacom_features *features = &wacom->wacom_wac.features;
- 	int rv = 0;
  
  	mutex_lock(&wacom->lock);
  
diff --cc drivers/input/tablet/wacom_wac.c
index 01ec753fea53,1c95ce78d749..000000000000
--- a/drivers/input/tablet/wacom_wac.c
+++ b/drivers/input/tablet/wacom_wac.c
@@@ -2037,32 -2207,19 +2039,38 @@@ static const struct wacom_features waco
  static const struct wacom_features wacom_features_0x317 =
  	{ "Wacom Intuos Pro L", WACOM_PKGLEN_INTUOS,  65024, 40640, 2047,
  	  63, INTUOSPL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
- 	  .touch_max = 16 };
+ 	  .touch_max = 16,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
  static const struct wacom_features wacom_features_0xF4 =
  	{ "Wacom Cintiq 24HD",       WACOM_PKGLEN_INTUOS,   104280, 65400, 2047,
 -	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200 };
 +	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
  static const struct wacom_features wacom_features_0xF8 =
  	{ "Wacom Cintiq 24HD touch", WACOM_PKGLEN_INTUOS,   104280, 65400, 2047, /* Pen */
 -	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200,
 +	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf6 };
  static const struct wacom_features wacom_features_0xF6 =
  	{ "Wacom Cintiq 24HD touch", .type = WACOM_24HDT, /* Touch */
++<<<<<<< HEAD
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf8, .touch_max = 10 };
 +static const struct wacom_features wacom_features_0x32A =
 +	{ "Wacom Cintiq 27QHD", WACOM_PKGLEN_INTUOS, 119740, 67520, 2047, 63,
 +	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0x32B =
 +	{ "Wacom Cintiq 27QHD touch", WACOM_PKGLEN_INTUOS, 119740, 67520, 2047, 63,
 +	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32C };
 +static const struct wacom_features wacom_features_0x32C =
 +	{ "Wacom Cintiq 27QHD touch", .type = WACOM_27QHDT,
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32B, .touch_max = 10,
 +	  .pktlen = WACOM_PKGLEN_INTUOS };
++=======
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf8, .touch_max = 10,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  static const struct wacom_features wacom_features_0x3F =
  	{ "Wacom Cintiq 21UX",    WACOM_PKGLEN_INTUOS,    87200, 65600, 1023,
  	  63, CINTIQ, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
@@@ -2096,19 -2254,17 +2105,20 @@@ static const struct wacom_features waco
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5D };
  static const struct wacom_features wacom_features_0x5D = /* Touch */
  	{ "Wacom DTH2242",       .type = WACOM_24HDT,
- 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x59, .touch_max = 10 };
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x59, .touch_max = 10,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
  static const struct wacom_features wacom_features_0xCC =
  	{ "Wacom Cintiq 21UX2",   WACOM_PKGLEN_INTUOS,    87000, 65400, 2047,
 -	  63, WACOM_21UX2, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200 };
 +	  63, WACOM_21UX2, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
  static const struct wacom_features wacom_features_0xFA =
  	{ "Wacom Cintiq 22HD",    WACOM_PKGLEN_INTUOS,    95640, 54060, 2047,
 -	  63, WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200 };
 +	  63, WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
  static const struct wacom_features wacom_features_0x5B =
  	{ "Wacom Cintiq 22HDT", WACOM_PKGLEN_INTUOS,      95640, 54060, 2047,
 -	  63, WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200,
 +	  63, WACOM_22HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5e };
  static const struct wacom_features wacom_features_0x5E =
  	{ "Wacom Cintiq 22HDT", .type = WACOM_24HDT,
@@@ -2223,24 -2398,47 +2234,53 @@@ static const struct wacom_features waco
          { "Wacom Bamboo 16FG 6x8", WACOM_PKGLEN_BBPEN,    21648, 13700, 1023,
  	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
  	  .touch_max = 16 };
++<<<<<<< HEAD
 +static const struct wacom_features wacom_features_0x6004 =
 +	{ "ISD-V4",               WACOM_PKGLEN_GRAPHIRE,  12800,  8000,  255,
 +	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
- 
- #define USB_DEVICE_WACOM(prod)					\
- 	USB_DEVICE(USB_VENDOR_ID_WACOM, prod),			\
- 	.driver_info = (kernel_ulong_t)&wacom_features_##prod
- 
- #define USB_DEVICE_DETAILED(prod, class, sub, proto)			\
- 	USB_DEVICE_AND_INTERFACE_INFO(USB_VENDOR_ID_WACOM, prod, class,	\
- 				      sub, proto),			\
- 	.driver_info = (kernel_ulong_t)&wacom_features_##prod
++=======
+ static const struct wacom_features wacom_features_0x300 =
+ 	{ "Wacom Bamboo One S",    WACOM_PKGLEN_BBPEN,    14720,  9225, 1023,
+ 	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
+ static const struct wacom_features wacom_features_0x301 =
+ 	{ "Wacom Bamboo One M",    WACOM_PKGLEN_BBPEN,    21648, 13530, 1023,
+ 	  31, BAMBOO_PT, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
+ static const struct wacom_features wacom_features_0x302 =
+ 	{ "Wacom Intuos PT S",     WACOM_PKGLEN_BBPEN,    15200,  9500, 1023,
+ 	  31, INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
+ 	  .touch_max = 16,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x303 =
+ 	{ "Wacom Intuos PT M",     WACOM_PKGLEN_BBPEN,    21600, 13500, 1023,
+ 	  31, INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
+ 	  .touch_max = 16,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x30E =
+ 	{ "Wacom Intuos S",        WACOM_PKGLEN_BBPEN,    15200,  9500, 1023,
+ 	  31, INTUOSHT, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
+ static const struct wacom_features wacom_features_0x6004 =
+ 	{ "ISD-V4",               WACOM_PKGLEN_GRAPHIRE,  12800,  8000,  255,
+ 	  0, TABLETPC, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
+ static const struct wacom_features wacom_features_0x0307 =
+ 	{ "Wacom ISDv5 307", WACOM_PKGLEN_INTUOS,  59352,  33648, 2047,
+ 	  63, CINTIQ_HYBRID, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200,
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x309 };
+ static const struct wacom_features wacom_features_0x0309 =
+ 	{ "Wacom ISDv5 309", .type = WACOM_24HDT, /* Touch */
+ 	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x0307, .touch_max = 10,
+ 	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
+ 
+ #define USB_DEVICE_WACOM(prod)						\
+ 	HID_DEVICE(BUS_USB, HID_GROUP_WACOM, USB_VENDOR_ID_WACOM, prod),\
+ 	.driver_data = (kernel_ulong_t)&wacom_features_##prod
  
  #define USB_DEVICE_LENOVO(prod)					\
- 	USB_DEVICE(USB_VENDOR_ID_LENOVO, prod),			\
- 	.driver_info = (kernel_ulong_t)&wacom_features_##prod
+ 	HID_USB_DEVICE(USB_VENDOR_ID_LENOVO, prod),			\
+ 	.driver_data = (kernel_ulong_t)&wacom_features_##prod
  
- const struct usb_device_id wacom_ids[] = {
+ const struct hid_device_id wacom_ids[] = {
  	{ USB_DEVICE_WACOM(0x00) },
  	{ USB_DEVICE_WACOM(0x10) },
  	{ USB_DEVICE_WACOM(0x11) },
@@@ -2349,19 -2541,30 +2383,40 @@@
  	{ USB_DEVICE_WACOM(0x100) },
  	{ USB_DEVICE_WACOM(0x101) },
  	{ USB_DEVICE_WACOM(0x10D) },
++<<<<<<< HEAD
 +	{ USB_DEVICE_WACOM(0x304) },
 +	{ USB_DEVICE_DETAILED(0x314, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_DETAILED(0x315, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_DETAILED(0x317, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_WACOM(0x32A) },
 +	{ USB_DEVICE_WACOM(0x32B) },
 +	{ USB_DEVICE_WACOM(0x32C) },
++=======
+ 	{ USB_DEVICE_WACOM(0x10E) },
+ 	{ USB_DEVICE_WACOM(0x10F) },
+ 	{ USB_DEVICE_WACOM(0x116) },
+ 	{ USB_DEVICE_WACOM(0x300) },
+ 	{ USB_DEVICE_WACOM(0x301) },
+ 	{ USB_DEVICE_WACOM(0x302) },
+ 	{ USB_DEVICE_WACOM(0x303) },
+ 	{ USB_DEVICE_WACOM(0x30E) },
+ 	{ USB_DEVICE_WACOM(0x304) },
+ 	{ USB_DEVICE_WACOM(0x314) },
+ 	{ USB_DEVICE_WACOM(0x315) },
+ 	{ USB_DEVICE_WACOM(0x317) },
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	{ USB_DEVICE_WACOM(0x4001) },
 -	{ USB_DEVICE_WACOM(0x4004) },
 -	{ USB_DEVICE_WACOM(0x5000) },
 -	{ USB_DEVICE_WACOM(0x5002) },
  	{ USB_DEVICE_WACOM(0x47) },
  	{ USB_DEVICE_WACOM(0xF4) },
  	{ USB_DEVICE_WACOM(0xF8) },
- 	{ USB_DEVICE_DETAILED(0xF6, USB_CLASS_HID, 0, 0) },
+ 	{ USB_DEVICE_WACOM(0xF6) },
  	{ USB_DEVICE_WACOM(0xFA) },
++<<<<<<< HEAD
++=======
+ 	{ USB_DEVICE_WACOM(0xFB) },
+ 	{ USB_DEVICE_WACOM(0x0307) },
+ 	{ USB_DEVICE_WACOM(0x0309) },
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	{ USB_DEVICE_LENOVO(0x6004) },
  	{ }
  };
diff --cc drivers/input/tablet/wacom_wac.h
index d220d069f329,8821a518abf6..000000000000
--- a/drivers/input/tablet/wacom_wac.h
+++ b/drivers/input/tablet/wacom_wac.h
@@@ -139,7 -152,8 +141,12 @@@ struct wacom_shared 
  
  struct wacom_wac {
  	char name[WACOM_NAME_MAX];
++<<<<<<< HEAD
 +	unsigned char *data;
++=======
+ 	char pad_name[WACOM_NAME_MAX];
+ 	unsigned char data[WACOM_PKGLEN_MAX];
++>>>>>>> 29b4739134c7 (Input: wacom - switch from an USB driver to a HID driver)
  	int tool[2];
  	int id[2];
  	__u32 serial[2];
* Unmerged path drivers/hid/hid-core.c
diff --git a/drivers/hid/hid-wacom.c b/drivers/hid/hid-wacom.c
index 4acd5090ece7..fc5d629ca049 100644
--- a/drivers/hid/hid-wacom.c
+++ b/drivers/hid/hid-wacom.c
@@ -948,7 +948,7 @@ static const struct hid_device_id wacom_devices[] = {
 MODULE_DEVICE_TABLE(hid, wacom_devices);
 
 static struct hid_driver wacom_driver = {
-	.name = "wacom",
+	.name = "hid-wacom",
 	.id_table = wacom_devices,
 	.probe = wacom_probe,
 	.remove = wacom_remove,
diff --git a/drivers/input/tablet/wacom.h b/drivers/input/tablet/wacom.h
index b79d45198d82..882a8f8c5666 100644
--- a/drivers/input/tablet/wacom.h
+++ b/drivers/input/tablet/wacom.h
@@ -107,14 +107,12 @@ MODULE_LICENSE(DRIVER_LICENSE);
 #define USB_VENDOR_ID_LENOVO	0x17ef
 
 struct wacom {
-	dma_addr_t data_dma;
 	struct usb_device *usbdev;
 	struct usb_interface *intf;
-	struct urb *irq;
 	struct wacom_wac wacom_wac;
+	struct hid_device *hdev;
 	struct mutex lock;
 	struct work_struct work;
-	bool open;
 	char phys[32];
 	struct wacom_led {
 		u8 select[2]; /* status led selector (0..3) */
@@ -131,7 +129,7 @@ static inline void wacom_schedule_work(struct wacom_wac *wacom_wac)
 	schedule_work(&wacom->work);
 }
 
-extern const struct usb_device_id wacom_ids[];
+extern const struct hid_device_id wacom_ids[];
 
 void wacom_wac_irq(struct wacom_wac *wacom_wac, size_t len);
 void wacom_setup_device_quirks(struct wacom_features *features);
* Unmerged path drivers/input/tablet/wacom_sys.c
* Unmerged path drivers/input/tablet/wacom_wac.c
* Unmerged path drivers/input/tablet/wacom_wac.h
diff --git a/include/linux/hid.h b/include/linux/hid.h
index 2277fc55debd..8c5e3c467efa 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -310,6 +310,11 @@ struct hid_item {
  */
 #define HID_GROUP_RMI				0x0100
 
+/*
+ * Vendor specific HID device groups
+ */
+#define HID_GROUP_WACOM				0x0101
+
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and
