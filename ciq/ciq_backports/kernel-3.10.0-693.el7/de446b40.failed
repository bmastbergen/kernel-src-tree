perf evsel: Remove symbol_conf usage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit de446b40d5ddb2c3f1fe453ac405543663f9ac5d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/de446b40.failed

  # perf test -v python
  16: Try 'import perf' in python, checking link problems      :
  --- start ---
  test child forked, pid 672
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  ImportError: /tmp/build/perf/python/perf.so: undefined symbol:
  symbol_conf
  test child finished with -1
  ---- end ----
  Try 'import perf' in python, checking link problems: FAILED!
  #

To fix it just pass a parameter to perf_evsel__fprintf_sym telling if
callchains should be printed.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-comrsr20bsnr8bg0n6rfwv12@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit de446b40d5ddb2c3f1fe453ac405543663f9ac5d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-script.c
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
diff --cc tools/perf/builtin-script.c
index bea425037a92,717ba0215234..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -572,13 -574,14 +572,19 @@@ static void print_sample_bts(struct per
  			printf("\n");
  		} else {
  			printf(" ");
 -			if (print_opts & EVSEL__PRINT_SRCLINE) {
 +			if (print_opts & PRINT_IP_OPT_SRCLINE) {
  				print_srcline_last = true;
 -				print_opts &= ~EVSEL__PRINT_SRCLINE;
 +				print_opts &= ~PRINT_IP_OPT_SRCLINE;
  			}
  		}
++<<<<<<< HEAD
 +		perf_evsel__print_ip(evsel, sample, al, 0, print_opts,
 +				     scripting_max_stack, stdout);
++=======
+ 		perf_evsel__fprintf_sym(evsel, sample, al, 0, print_opts,
+ 					symbol_conf.use_callchain,
+ 					scripting_max_stack, stdout);
++>>>>>>> de446b40d5dd (perf evsel: Remove symbol_conf usage)
  	}
  
  	/* print branch_to information */
@@@ -708,9 -789,10 +714,16 @@@ static void process_event(struct perf_s
  		else
  			printf("\n");
  
++<<<<<<< HEAD
 +		perf_evsel__print_ip(evsel, sample, al, 0,
 +				     output[attr->type].print_ip_opts,
 +				     scripting_max_stack, stdout);
++=======
+ 		perf_evsel__fprintf_sym(evsel, sample, al, 0,
+ 					output[attr->type].print_ip_opts,
+ 					symbol_conf.use_callchain,
+ 					scripting_max_stack, stdout);
++>>>>>>> de446b40d5dd (perf evsel: Remove symbol_conf usage)
  	}
  
  	if (PRINT_FIELD(IREGS))
diff --cc tools/perf/util/evsel.c
index e0478f1149c9,60bba67e6959..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -2281,6 -2343,138 +2281,141 @@@ out
  	return ++printed;
  }
  
++<<<<<<< HEAD
++=======
+ int perf_evsel__fprintf_callchain(struct perf_evsel *evsel, struct perf_sample *sample,
+ 				  struct addr_location *al, int left_alignment,
+ 				  unsigned int print_opts, unsigned int stack_depth,
+ 				  FILE *fp)
+ {
+ 	int printed = 0;
+ 	struct callchain_cursor cursor;
+ 	struct callchain_cursor_node *node;
+ 	int print_ip = print_opts & EVSEL__PRINT_IP;
+ 	int print_sym = print_opts & EVSEL__PRINT_SYM;
+ 	int print_dso = print_opts & EVSEL__PRINT_DSO;
+ 	int print_symoffset = print_opts & EVSEL__PRINT_SYMOFFSET;
+ 	int print_oneline = print_opts & EVSEL__PRINT_ONELINE;
+ 	int print_srcline = print_opts & EVSEL__PRINT_SRCLINE;
+ 	int print_unknown_as_addr = print_opts & EVSEL__PRINT_UNKNOWN_AS_ADDR;
+ 	char s = print_oneline ? ' ' : '\t';
+ 
+ 	if (sample->callchain) {
+ 		struct addr_location node_al;
+ 
+ 		if (thread__resolve_callchain(al->thread, &cursor, evsel,
+ 					      sample, NULL, NULL,
+ 					      stack_depth) != 0) {
+ 			if (verbose)
+ 				error("Failed to resolve callchain. Skipping\n");
+ 			return printed;
+ 		}
+ 		callchain_cursor_commit(&cursor);
+ 
+ 		if (print_symoffset)
+ 			node_al = *al;
+ 
+ 		while (stack_depth) {
+ 			u64 addr = 0;
+ 
+ 			node = callchain_cursor_current(&cursor);
+ 			if (!node)
+ 				break;
+ 
+ 			if (node->sym && node->sym->ignore)
+ 				goto next;
+ 
+ 			printed += fprintf(fp, "%-*.*s", left_alignment, left_alignment, " ");
+ 
+ 			if (print_ip)
+ 				printed += fprintf(fp, "%c%16" PRIx64, s, node->ip);
+ 
+ 			if (node->map)
+ 				addr = node->map->map_ip(node->map, node->ip);
+ 
+ 			if (print_sym) {
+ 				printed += fprintf(fp, " ");
+ 				node_al.addr = addr;
+ 				node_al.map  = node->map;
+ 
+ 				if (print_symoffset) {
+ 					printed += __symbol__fprintf_symname_offs(node->sym, &node_al,
+ 										  print_unknown_as_addr, fp);
+ 				} else {
+ 					printed += __symbol__fprintf_symname(node->sym, &node_al,
+ 									     print_unknown_as_addr, fp);
+ 				}
+ 			}
+ 
+ 			if (print_dso) {
+ 				printed += fprintf(fp, " (");
+ 				printed += map__fprintf_dsoname(node->map, fp);
+ 				printed += fprintf(fp, ")");
+ 			}
+ 
+ 			if (print_srcline)
+ 				printed += map__fprintf_srcline(node->map, addr, "\n  ", fp);
+ 
+ 			if (!print_oneline)
+ 				printed += fprintf(fp, "\n");
+ 
+ 			stack_depth--;
+ next:
+ 			callchain_cursor_advance(&cursor);
+ 		}
+ 	}
+ 
+ 	return printed;
+ }
+ 
+ int perf_evsel__fprintf_sym(struct perf_evsel *evsel, struct perf_sample *sample,
+ 			    struct addr_location *al, int left_alignment,
+ 			    unsigned int print_opts, bool print_callchain,
+ 			    unsigned int stack_depth, FILE *fp)
+ {
+ 	int printed = 0;
+ 	int print_ip = print_opts & EVSEL__PRINT_IP;
+ 	int print_sym = print_opts & EVSEL__PRINT_SYM;
+ 	int print_dso = print_opts & EVSEL__PRINT_DSO;
+ 	int print_symoffset = print_opts & EVSEL__PRINT_SYMOFFSET;
+ 	int print_srcline = print_opts & EVSEL__PRINT_SRCLINE;
+ 	int print_unknown_as_addr = print_opts & EVSEL__PRINT_UNKNOWN_AS_ADDR;
+ 
+ 	if (print_callchain && sample->callchain) {
+ 		printed += perf_evsel__fprintf_callchain(evsel, sample, al, left_alignment,
+ 							 print_opts, stack_depth, fp);
+ 	} else if (!(al->sym && al->sym->ignore)) {
+ 		printed += fprintf(fp, "%-*.*s", left_alignment, left_alignment, " ");
+ 
+ 		if (print_ip)
+ 			printed += fprintf(fp, "%16" PRIx64, sample->ip);
+ 
+ 		if (print_sym) {
+ 			printed += fprintf(fp, " ");
+ 			if (print_symoffset) {
+ 				printed += __symbol__fprintf_symname_offs(al->sym, al,
+ 									  print_unknown_as_addr, fp);
+ 			} else {
+ 				printed += __symbol__fprintf_symname(al->sym, al,
+ 								     print_unknown_as_addr, fp);
+ 			}
+ 		}
+ 
+ 		if (print_dso) {
+ 			printed += fprintf(fp, " (");
+ 			printed += map__fprintf_dsoname(al->map, fp);
+ 			printed += fprintf(fp, ")");
+ 		}
+ 
+ 		if (print_srcline)
+ 			printed += map__fprintf_srcline(al->map, al->addr, "\n  ", fp);
+ 	}
+ 
+ 	return printed;
+ }
+ 
+ 
++>>>>>>> de446b40d5dd (perf evsel: Remove symbol_conf usage)
  bool perf_evsel__fallback(struct perf_evsel *evsel, int err,
  			  char *msg, size_t msgsize)
  {
diff --cc tools/perf/util/evsel.h
index 8b108cb05d6f,013f3615730b..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -372,6 -387,25 +372,28 @@@ struct perf_attr_details 
  int perf_evsel__fprintf(struct perf_evsel *evsel,
  			struct perf_attr_details *details, FILE *fp);
  
++<<<<<<< HEAD
++=======
+ #define EVSEL__PRINT_IP			(1<<0)
+ #define EVSEL__PRINT_SYM		(1<<1)
+ #define EVSEL__PRINT_DSO		(1<<2)
+ #define EVSEL__PRINT_SYMOFFSET		(1<<3)
+ #define EVSEL__PRINT_ONELINE		(1<<4)
+ #define EVSEL__PRINT_SRCLINE		(1<<5)
+ #define EVSEL__PRINT_UNKNOWN_AS_ADDR	(1<<6)
+ 
+ int perf_evsel__fprintf_callchain(struct perf_evsel *evsel,
+ 				  struct perf_sample *sample,
+ 				  struct addr_location *al, int left_alignment,
+ 				  unsigned int print_opts,
+ 				  unsigned int stack_depth, FILE *fp);
+ 
+ int perf_evsel__fprintf_sym(struct perf_evsel *evsel, struct perf_sample *sample,
+ 			    struct addr_location *al, int left_alignment,
+ 			    unsigned int print_opts, bool print_callchain,
+ 			    unsigned int stack_depth, FILE *fp);
+ 
++>>>>>>> de446b40d5dd (perf evsel: Remove symbol_conf usage)
  bool perf_evsel__fallback(struct perf_evsel *evsel, int err,
  			  char *msg, size_t msgsize);
  int perf_evsel__open_strerror(struct perf_evsel *evsel, struct target *target,
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
