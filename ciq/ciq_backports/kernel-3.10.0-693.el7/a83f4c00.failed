perf/x86/amd/uncore: Rename 'L2' to 'LLC'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
commit a83f4c00dd6a646ac3c7604ee255d732fc5e0e0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a83f4c00.failed

This patch renames L2 counters to LLC counters. In AMD Family17h
processors, L3 cache counter is supported.

Since older families have at most L2 counters, last level cache (LLC)
indicates L2/L3 based on the family.

	Signed-off-by: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
Link: http://lkml.kernel.org/r/5d8cd8736d8d578354597a548e64ff16210c319b.1484598705.git.Janakarajan.Natarajan@amd.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a83f4c00dd6a646ac3c7604ee255d732fc5e0e0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/amd/uncore.c
diff --cc arch/x86/events/amd/uncore.c
index 7ed45bf690a2,a53bfbe02c7c..000000000000
--- a/arch/x86/events/amd/uncore.c
+++ b/arch/x86/events/amd/uncore.c
@@@ -387,9 -385,11 +387,9 @@@ static void amd_uncore_cpu_starting(uns
  		nshared = ((eax >> 14) & 0xfff) + 1;
  		uncore->id = apicid - (apicid % nshared);
  
- 		uncore = amd_uncore_find_online_sibling(uncore, amd_uncore_l2);
- 		*per_cpu_ptr(amd_uncore_l2, cpu) = uncore;
+ 		uncore = amd_uncore_find_online_sibling(uncore, amd_uncore_llc);
+ 		*per_cpu_ptr(amd_uncore_llc, cpu) = uncore;
  	}
 -
 -	return 0;
  }
  
  static void uncore_clean_online(void)
@@@ -419,8 -419,10 +419,15 @@@ static void amd_uncore_cpu_online(unsig
  	if (amd_uncore_nb)
  		uncore_online(cpu, amd_uncore_nb);
  
++<<<<<<< HEAD
 +	if (amd_uncore_l2)
 +		uncore_online(cpu, amd_uncore_l2);
++=======
+ 	if (amd_uncore_llc)
+ 		uncore_online(cpu, amd_uncore_llc);
+ 
+ 	return 0;
++>>>>>>> a83f4c00dd6a (perf/x86/amd/uncore: Rename 'L2' to 'LLC')
  }
  
  static void uncore_down_prepare(unsigned int cpu,
@@@ -454,8 -456,10 +461,15 @@@ static void amd_uncore_cpu_down_prepare
  	if (amd_uncore_nb)
  		uncore_down_prepare(cpu, amd_uncore_nb);
  
++<<<<<<< HEAD
 +	if (amd_uncore_l2)
 +		uncore_down_prepare(cpu, amd_uncore_l2);
++=======
+ 	if (amd_uncore_llc)
+ 		uncore_down_prepare(cpu, amd_uncore_llc);
+ 
+ 	return 0;
++>>>>>>> a83f4c00dd6a (perf/x86/amd/uncore: Rename 'L2' to 'LLC')
  }
  
  static void uncore_dead(unsigned int cpu, struct amd_uncore * __percpu *uncores)
@@@ -475,64 -479,10 +489,69 @@@ static void amd_uncore_cpu_dead(unsigne
  	if (amd_uncore_nb)
  		uncore_dead(cpu, amd_uncore_nb);
  
++<<<<<<< HEAD
 +	if (amd_uncore_l2)
 +		uncore_dead(cpu, amd_uncore_l2);
 +}
++=======
+ 	if (amd_uncore_llc)
+ 		uncore_dead(cpu, amd_uncore_llc);
++>>>>>>> a83f4c00dd6a (perf/x86/amd/uncore: Rename 'L2' to 'LLC')
  
 -	return 0;
 +static int
 +amd_uncore_cpu_notifier(struct notifier_block *self, unsigned long action,
 +			void *hcpu)
 +{
 +	unsigned int cpu = (long)hcpu;
 +
 +	switch (action & ~CPU_TASKS_FROZEN) {
 +	case CPU_UP_PREPARE:
 +		if (amd_uncore_cpu_up_prepare(cpu))
 +			return notifier_from_errno(-ENOMEM);
 +		break;
 +
 +	case CPU_STARTING:
 +		amd_uncore_cpu_starting(cpu);
 +		break;
 +
 +	case CPU_ONLINE:
 +		amd_uncore_cpu_online(cpu);
 +		break;
 +
 +	case CPU_DOWN_PREPARE:
 +		amd_uncore_cpu_down_prepare(cpu);
 +		break;
 +
 +	case CPU_UP_CANCELED:
 +	case CPU_DEAD:
 +		amd_uncore_cpu_dead(cpu);
 +		break;
 +
 +	default:
 +		break;
 +	}
 +
 +	return NOTIFY_OK;
 +}
 +
 +static struct notifier_block amd_uncore_cpu_notifier_block = {
 +	.notifier_call	= amd_uncore_cpu_notifier,
 +	.priority	= CPU_PRI_PERF + 1,
 +};
 +
 +static void __init init_cpu_already_online(void *dummy)
 +{
 +	unsigned int cpu = smp_processor_id();
 +
 +	amd_uncore_cpu_starting(cpu);
 +	amd_uncore_cpu_online(cpu);
 +}
 +
 +static void cleanup_cpu_online(void *dummy)
 +{
 +	unsigned int cpu = smp_processor_id();
 +
 +	amd_uncore_cpu_dead(cpu);
  }
  
  static int __init amd_uncore_init(void)
@@@ -560,56 -509,48 +579,85 @@@
  		ret = 0;
  	}
  
++<<<<<<< HEAD
 +	if (cpu_has_perfctr_l2) {
 +		amd_uncore_l2 = alloc_percpu(struct amd_uncore *);
 +		if (!amd_uncore_l2) {
++=======
+ 	if (boot_cpu_has(X86_FEATURE_PERFCTR_L2)) {
+ 		amd_uncore_llc = alloc_percpu(struct amd_uncore *);
+ 		if (!amd_uncore_llc) {
++>>>>>>> a83f4c00dd6a (perf/x86/amd/uncore: Rename 'L2' to 'LLC')
  			ret = -ENOMEM;
- 			goto fail_l2;
+ 			goto fail_llc;
  		}
- 		ret = perf_pmu_register(&amd_l2_pmu, amd_l2_pmu.name, -1);
+ 		ret = perf_pmu_register(&amd_llc_pmu, amd_llc_pmu.name, -1);
  		if (ret)
- 			goto fail_l2;
+ 			goto fail_llc;
  
++<<<<<<< HEAD
 +		printk(KERN_INFO "perf: AMD L2I counters detected\n");
 +		ret = 0;
 +	}
 +
 +	if (ret)
 +		goto fail_nodev;
 +
 +	cpu_notifier_register_begin();
 +
 +	/* init cpus already online before registering for hotplug notifier */
 +	for_each_online_cpu(cpu) {
 +		ret = amd_uncore_cpu_up_prepare(cpu);
 +		if (ret)
 +			goto fail_online;
 +		smp_call_function_single(cpu, init_cpu_already_online, NULL, 1);
 +	}
 +
 +	__register_cpu_notifier(&amd_uncore_cpu_notifier_block);
 +	cpu_notifier_register_done();
++=======
+ 		pr_info("perf: AMD LLC counters detected\n");
+ 		ret = 0;
+ 	}
+ 
+ 	/*
+ 	 * Install callbacks. Core will call them for each online cpu.
+ 	 */
+ 	if (cpuhp_setup_state(CPUHP_PERF_X86_AMD_UNCORE_PREP,
+ 			      "perf/x86/amd/uncore:prepare",
+ 			      amd_uncore_cpu_up_prepare, amd_uncore_cpu_dead))
+ 		goto fail_llc;
++>>>>>>> a83f4c00dd6a (perf/x86/amd/uncore: Rename 'L2' to 'LLC')
  
 -	if (cpuhp_setup_state(CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 -			      "perf/x86/amd/uncore:starting",
 -			      amd_uncore_cpu_starting, NULL))
 -		goto fail_prep;
 -	if (cpuhp_setup_state(CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 -			      "perf/x86/amd/uncore:online",
 -			      amd_uncore_cpu_online,
 -			      amd_uncore_cpu_down_prepare))
 -		goto fail_start;
  	return 0;
  
++<<<<<<< HEAD
 +
 +fail_online:
 +	for_each_online_cpu(cpu2) {
 +		if (cpu2 == cpu)
 +			break;
 +		smp_call_function_single(cpu, cleanup_cpu_online, NULL, 1);
 +	}
 +	cpu_notifier_register_done();
 +
 +	/* amd_uncore_nb/l2 should have been freed by cleanup_cpu_online */
 +	amd_uncore_nb = amd_uncore_l2 = NULL;
 +	if (cpu_has_perfctr_l2)
 +		perf_pmu_unregister(&amd_l2_pmu);
 +fail_l2:
 +	if (cpu_has_perfctr_nb)
++=======
+ fail_start:
+ 	cpuhp_remove_state(CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING);
+ fail_prep:
+ 	cpuhp_remove_state(CPUHP_PERF_X86_AMD_UNCORE_PREP);
+ fail_llc:
+ 	if (boot_cpu_has(X86_FEATURE_PERFCTR_NB))
++>>>>>>> a83f4c00dd6a (perf/x86/amd/uncore: Rename 'L2' to 'LLC')
  		perf_pmu_unregister(&amd_nb_pmu);
- 	if (amd_uncore_l2)
- 		free_percpu(amd_uncore_l2);
+ 	if (amd_uncore_llc)
+ 		free_percpu(amd_uncore_llc);
  fail_nb:
  	if (amd_uncore_nb)
  		free_percpu(amd_uncore_nb);
* Unmerged path arch/x86/events/amd/uncore.c
