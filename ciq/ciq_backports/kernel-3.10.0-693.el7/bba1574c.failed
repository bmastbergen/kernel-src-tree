net/mlx5: Always Query HCA caps after setting them

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Always Query HCA caps after setting them (Don Dutile) [1385330 1417285]
Rebuild_FUZZ: 95.83%
commit-author Daniel Jurgens <danielj@mellanox.com>
commit bba1574c2f11d674bf343f3cf307b33d19f73d9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bba1574c.failed

Always query the HCA caps after setting them to update the capablities
data structures. Not doing so results in incorrect capabilities being
reported including max_dc, max_qp and several others.

Fixes: 59211bd3b632 ("net/mlx5: Split the load/unload flow into hardware
and software flows")
	Signed-off-by: Daniel Jurgens <danielj@mellanox.com>

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bba1574c2f11d674bf343f3cf307b33d19f73d9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index e782d0fde09e,8a63910bfccf..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -994,8 -839,96 +994,101 @@@ static void mlx5_pci_close(struct mlx5_
  	debugfs_remove(priv->dbg_root);
  }
  
++<<<<<<< HEAD
 +#define MLX5_IB_MOD "mlx5_ib"
 +static int mlx5_load_one(struct mlx5_core_dev *dev, struct mlx5_priv *priv)
++=======
+ static int mlx5_init_once(struct mlx5_core_dev *dev, struct mlx5_priv *priv)
+ {
+ 	struct pci_dev *pdev = dev->pdev;
+ 	int err;
+ 
+ 	err = mlx5_query_board_id(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "query board id failed\n");
+ 		goto out;
+ 	}
+ 
+ 	err = mlx5_eq_init(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "failed to initialize eq\n");
+ 		goto out;
+ 	}
+ 
+ 	MLX5_INIT_DOORBELL_LOCK(&priv->cq_uar_lock);
+ 
+ 	err = mlx5_init_cq_table(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "failed to initialize cq table\n");
+ 		goto err_eq_cleanup;
+ 	}
+ 
+ 	mlx5_init_qp_table(dev);
+ 
+ 	mlx5_init_srq_table(dev);
+ 
+ 	mlx5_init_mkey_table(dev);
+ 
+ 	err = mlx5_init_rl_table(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "Failed to init rate limiting\n");
+ 		goto err_tables_cleanup;
+ 	}
+ 
+ #ifdef CONFIG_MLX5_CORE_EN
+ 	err = mlx5_eswitch_init(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "Failed to init eswitch %d\n", err);
+ 		goto err_rl_cleanup;
+ 	}
+ #endif
+ 
+ 	err = mlx5_sriov_init(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "Failed to init sriov %d\n", err);
+ 		goto err_eswitch_cleanup;
+ 	}
+ 
+ 	return 0;
+ 
+ err_eswitch_cleanup:
+ #ifdef CONFIG_MLX5_CORE_EN
+ 	mlx5_eswitch_cleanup(dev->priv.eswitch);
+ 
+ err_rl_cleanup:
+ #endif
+ 	mlx5_cleanup_rl_table(dev);
+ 
+ err_tables_cleanup:
+ 	mlx5_cleanup_mkey_table(dev);
+ 	mlx5_cleanup_srq_table(dev);
+ 	mlx5_cleanup_qp_table(dev);
+ 	mlx5_cleanup_cq_table(dev);
+ 
+ err_eq_cleanup:
+ 	mlx5_eq_cleanup(dev);
+ 
+ out:
+ 	return err;
+ }
+ 
+ static void mlx5_cleanup_once(struct mlx5_core_dev *dev)
+ {
+ 	mlx5_sriov_cleanup(dev);
+ #ifdef CONFIG_MLX5_CORE_EN
+ 	mlx5_eswitch_cleanup(dev->priv.eswitch);
+ #endif
+ 	mlx5_cleanup_rl_table(dev);
+ 	mlx5_cleanup_mkey_table(dev);
+ 	mlx5_cleanup_srq_table(dev);
+ 	mlx5_cleanup_qp_table(dev);
+ 	mlx5_cleanup_cq_table(dev);
+ 	mlx5_eq_cleanup(dev);
+ }
+ 
+ static int mlx5_load_one(struct mlx5_core_dev *dev, struct mlx5_priv *priv,
+ 			 bool boot)
++>>>>>>> bba1574c2f11 (net/mlx5: Always Query HCA caps after setting them)
  {
  	struct pci_dev *pdev = dev->pdev;
  	int err;
@@@ -1092,9 -1023,8 +1185,14 @@@
  		goto err_stop_poll;
  	}
  
++<<<<<<< HEAD
 +	err = mlx5_query_board_id(dev);
 +	if (err) {
 +		dev_err(&pdev->dev, "query board id failed\n");
++=======
+ 	if (boot && mlx5_init_once(dev, priv)) {
+ 		dev_err(&pdev->dev, "sw objs init failed\n");
++>>>>>>> bba1574c2f11 (net/mlx5: Always Query HCA caps after setting them)
  		goto err_stop_poll;
  	}
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
