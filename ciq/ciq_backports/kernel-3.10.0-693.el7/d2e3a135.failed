ASoC: Fix binding and probing of auxiliary components

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [sound] alsa: asoc: Fix binding and probing of auxiliary components (Jaroslav Kysela) [1399503]
Rebuild_FUZZ: 94.64%
commit-author Sylwester Nawrocki <s.nawrocki@samsung.com>
commit d2e3a1358c37cd82eef92b5e908b4f0472194481
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d2e3a135.failed

Currently binding of auxiliary devices doesn't work as in
soc_bind_aux_dev() function a bound component is not being added
to any list and in soc_probe_aux_devices() we are trying to walk
the component_dev_list list to probe auxiliary components but
at that time this list doesn't contain any auxiliary components
since they are being added to the card only in soc_probe_component().

This patch adds a list to the card where are stored bound but not
probed auxiliary devices, so that all aux devices can be probed.

Fixes: 1a653aa44725 "ASoC: core: replace aux_comp_list to component_dev_list"
	Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit d2e3a1358c37cd82eef92b5e908b4f0472194481)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/soc.h
#	sound/soc/soc-core.c
diff --cc include/sound/soc.h
index ef25e86d51ee,b86168a21d56..000000000000
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@@ -796,9 -809,12 +796,14 @@@ struct snd_soc_component 
  
  	unsigned int ignore_pmdown_time:1; /* pmdown_time is ignored at stop */
  	unsigned int registered_as_component:1;
 -	unsigned int auxiliary:1; /* for auxiliary component of the card */
 -	unsigned int suspended:1; /* is in suspend PM state */
  
  	struct list_head list;
++<<<<<<< HEAD
 +	struct list_head list_aux; /* for auxiliary component of the card */
++=======
+ 	struct list_head card_aux_list; /* for auxiliary bound components */
+ 	struct list_head card_list;
++>>>>>>> d2e3a1358c37 (ASoC: Fix binding and probing of auxiliary components)
  
  	struct snd_soc_dai_driver *dai_drv;
  	int num_dai;
@@@ -1554,6 -1550,7 +1559,10 @@@ static inline void snd_soc_initialize_c
  	INIT_LIST_HEAD(&card->paths);
  	INIT_LIST_HEAD(&card->dapm_list);
  	INIT_LIST_HEAD(&card->aux_comp_list);
++<<<<<<< HEAD
++=======
+ 	INIT_LIST_HEAD(&card->component_dev_list);
++>>>>>>> d2e3a1358c37 (ASoC: Fix binding and probing of auxiliary components)
  }
  
  static inline bool snd_soc_volsw_is_stereo(struct soc_mixer_control *mc)
diff --cc sound/soc/soc-core.c
index d2e62b159610,baa1afa41e3d..000000000000
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@@ -1694,7 -1747,9 +1694,13 @@@ static int soc_bind_aux_dev(struct snd_
  	}
  
  	component->init = aux_dev->init;
++<<<<<<< HEAD
 +	list_add(&component->list_aux, &card->aux_comp_list);
++=======
+ 	component->auxiliary = 1;
+ 	list_add(&component->card_aux_list, &card->aux_comp_list);
+ 
++>>>>>>> d2e3a1358c37 (ASoC: Fix binding and probing of auxiliary components)
  	return 0;
  
  err_defer:
@@@ -1710,7 -1765,8 +1716,12 @@@ static int soc_probe_aux_devices(struc
  
  	for (order = SND_SOC_COMP_ORDER_FIRST; order <= SND_SOC_COMP_ORDER_LAST;
  		order++) {
++<<<<<<< HEAD
 +		list_for_each_entry(comp, &card->aux_comp_list, list_aux) {
++=======
+ 		list_for_each_entry_safe(comp, tmp, &card->aux_comp_list,
+ 					 card_aux_list) {
++>>>>>>> d2e3a1358c37 (ASoC: Fix binding and probing of auxiliary components)
  			if (comp->driver->probe_order == order) {
  				ret = soc_probe_component(card,	comp);
  				if (ret < 0) {
* Unmerged path include/sound/soc.h
* Unmerged path sound/soc/soc-core.c
