dm mpath: add m->hw_handler_name NULL pointer check in parse_hw_handler()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author tang.junhui <tang.junhui@zte.com.cn>
commit f97dc421280e16b8eb0c8f685610ba007ec11b79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f97dc421.failed

Avoids false positive of no hardware handler being specified (which is
implied by a NULL m->hw_handler_name).

	Signed-off-by: tang.junhui <tang.junhui@zte.com.cn>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit f97dc421280e16b8eb0c8f685610ba007ec11b79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-mpath.c
diff --cc drivers/md/dm-mpath.c
index 18be29ec3a10,d234b6c33646..000000000000
--- a/drivers/md/dm-mpath.c
+++ b/drivers/md/dm-mpath.c
@@@ -814,13 -995,15 +814,18 @@@ static int parse_hw_handler(struct dm_a
  	if (!hw_argc)
  		return 0;
  
 -	if (m->queue_mode == DM_TYPE_BIO_BASED) {
 -		dm_consume_args(as, hw_argc);
 -		DMERR("bio-based multipath doesn't allow hardware handler args");
 -		return 0;
 -	}
 -
  	m->hw_handler_name = kstrdup(dm_shift_arg(as), GFP_KERNEL);
++<<<<<<< HEAD
 +	if (!try_then_request_module(scsi_dh_handler_exist(m->hw_handler_name),
 +				     "scsi_dh_%s", m->hw_handler_name)) {
 +		ti->error = "unknown hardware handler type";
 +		ret = -EINVAL;
 +		goto fail;
 +	}
++=======
+ 	if (!m->hw_handler_name)
+ 		return -EINVAL;
++>>>>>>> f97dc421280e (dm mpath: add m->hw_handler_name NULL pointer check in parse_hw_handler())
  
  	if (hw_argc > 1) {
  		char *p;
* Unmerged path drivers/md/dm-mpath.c
