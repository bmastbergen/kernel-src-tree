crypto: ccp - Enable use of the additional CCP

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] ccp - Enable use of the additional CCP (Suravee Suthikulpanit) [1390820]
Rebuild_FUZZ: 90.48%
commit-author Gary R Hook <gary.hook@amd.com>
commit e14e7d126765ce0156ab5e3b250b1270998c207d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e14e7d12.failed

A second CCP is available, identical to the first, with
its ownn PCI ID. Make it available for use by the crypto
subsystem, as well as for DMA activity and random
number generation.

This device is not pre-configured at at boot time. The
driver must configure it (during the probe) for use.

	Signed-off-by: Gary R Hook <gary.hook@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit e14e7d126765ce0156ab5e3b250b1270998c207d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/ccp-dev-v5.c
#	drivers/crypto/ccp/ccp-dev.h
#	drivers/crypto/ccp/ccp-pci.c
diff --cc drivers/crypto/ccp/ccp-dev.h
index 72bf1536b653,ebc93652833b..000000000000
--- a/drivers/crypto/ccp/ccp-dev.h
+++ b/drivers/crypto/ccp/ccp-dev.h
@@@ -48,13 -55,75 +48,79 @@@
  #define CMD_Q_INT_STATUS_BASE		0x214
  #define CMD_Q_STATUS_INCR		0x20
  
 -#define CMD_Q_CACHE_BASE		0x228
 +#define CMD_Q_CACHE			0x228
  #define CMD_Q_CACHE_INC			0x20
  
 -#define CMD_Q_ERROR(__qs)		((__qs) & 0x0000003f)
 -#define CMD_Q_DEPTH(__qs)		(((__qs) >> 12) & 0x0000000f)
 +#define CMD_Q_ERROR(__qs)		((__qs) & 0x0000003f);
 +#define CMD_Q_DEPTH(__qs)		(((__qs) >> 12) & 0x0000000f);
  
++<<<<<<< HEAD
 +/****** REQ0 Related Values ******/
++=======
+ /* ------------------------ CCP Version 5 Specifics ------------------------ */
+ #define CMD5_QUEUE_MASK_OFFSET		0x00
+ #define	CMD5_QUEUE_PRIO_OFFSET		0x04
+ #define CMD5_REQID_CONFIG_OFFSET	0x08
+ #define	CMD5_CMD_TIMEOUT_OFFSET		0x10
+ #define LSB_PUBLIC_MASK_LO_OFFSET	0x18
+ #define LSB_PUBLIC_MASK_HI_OFFSET	0x1C
+ #define LSB_PRIVATE_MASK_LO_OFFSET	0x20
+ #define LSB_PRIVATE_MASK_HI_OFFSET	0x24
+ 
+ #define CMD5_Q_CONTROL_BASE		0x0000
+ #define CMD5_Q_TAIL_LO_BASE		0x0004
+ #define CMD5_Q_HEAD_LO_BASE		0x0008
+ #define CMD5_Q_INT_ENABLE_BASE		0x000C
+ #define CMD5_Q_INTERRUPT_STATUS_BASE	0x0010
+ 
+ #define CMD5_Q_STATUS_BASE		0x0100
+ #define CMD5_Q_INT_STATUS_BASE		0x0104
+ #define CMD5_Q_DMA_STATUS_BASE		0x0108
+ #define CMD5_Q_DMA_READ_STATUS_BASE	0x010C
+ #define CMD5_Q_DMA_WRITE_STATUS_BASE	0x0110
+ #define CMD5_Q_ABORT_BASE		0x0114
+ #define CMD5_Q_AX_CACHE_BASE		0x0118
+ 
+ #define	CMD5_CONFIG_0_OFFSET		0x6000
+ #define	CMD5_TRNG_CTL_OFFSET		0x6008
+ #define	CMD5_AES_MASK_OFFSET		0x6010
+ #define	CMD5_CLK_GATE_CTL_OFFSET	0x603C
+ 
+ /* Address offset between two virtual queue registers */
+ #define CMD5_Q_STATUS_INCR		0x1000
+ 
+ /* Bit masks */
+ #define CMD5_Q_RUN			0x1
+ #define CMD5_Q_HALT			0x2
+ #define CMD5_Q_MEM_LOCATION		0x4
+ #define CMD5_Q_SIZE			0x1F
+ #define CMD5_Q_SHIFT			3
+ #define COMMANDS_PER_QUEUE		16
+ #define QUEUE_SIZE_VAL			((ffs(COMMANDS_PER_QUEUE) - 2) & \
+ 					  CMD5_Q_SIZE)
+ #define Q_PTR_MASK			(2 << (QUEUE_SIZE_VAL + 5) - 1)
+ #define Q_DESC_SIZE			sizeof(struct ccp5_desc)
+ #define Q_SIZE(n)			(COMMANDS_PER_QUEUE*(n))
+ 
+ #define INT_COMPLETION			0x1
+ #define INT_ERROR			0x2
+ #define INT_QUEUE_STOPPED		0x4
+ #define ALL_INTERRUPTS			(INT_COMPLETION| \
+ 					 INT_ERROR| \
+ 					 INT_QUEUE_STOPPED)
+ 
+ #define LSB_REGION_WIDTH		5
+ #define MAX_LSB_CNT			8
+ 
+ #define LSB_SIZE			16
+ #define LSB_ITEM_SIZE			32
+ #define PLSB_MAP_SIZE			(LSB_SIZE)
+ #define SLSB_MAP_SIZE			(MAX_LSB_CNT * LSB_SIZE)
+ 
+ #define LSB_ENTRY_NUMBER(LSB_ADDR)	(LSB_ADDR / LSB_ITEM_SIZE)
+ 
+ /* ------------------------ CCP Version 3 Specifics ------------------------ */
++>>>>>>> e14e7d126765 (crypto: ccp - Enable use of the additional CCP)
  #define REQ0_WAIT_FOR_WRITE		0x00000004
  #define REQ0_INT_ON_COMPLETE		0x00000002
  #define REQ0_STOP_ON_COMPLETE		0x00000001
@@@ -268,4 -608,39 +334,42 @@@ irqreturn_t ccp_irq_handler(int irq, vo
  
  int ccp_run_cmd(struct ccp_cmd_queue *cmd_q, struct ccp_cmd *cmd);
  
++<<<<<<< HEAD
++=======
+ int ccp_register_rng(struct ccp_device *ccp);
+ void ccp_unregister_rng(struct ccp_device *ccp);
+ int ccp_dmaengine_register(struct ccp_device *ccp);
+ void ccp_dmaengine_unregister(struct ccp_device *ccp);
+ 
+ /* Structure for computation functions that are device-specific */
+ struct ccp_actions {
+ 	int (*aes)(struct ccp_op *);
+ 	int (*xts_aes)(struct ccp_op *);
+ 	int (*sha)(struct ccp_op *);
+ 	int (*rsa)(struct ccp_op *);
+ 	int (*passthru)(struct ccp_op *);
+ 	int (*ecc)(struct ccp_op *);
+ 	u32 (*sballoc)(struct ccp_cmd_queue *, unsigned int);
+ 	void (*sbfree)(struct ccp_cmd_queue *, unsigned int,
+ 			       unsigned int);
+ 	unsigned int (*get_free_slots)(struct ccp_cmd_queue *);
+ 	int (*init)(struct ccp_device *);
+ 	void (*destroy)(struct ccp_device *);
+ 	irqreturn_t (*irqhandler)(int, void *);
+ };
+ 
+ /* Structure to hold CCP version-specific values */
+ struct ccp_vdata {
+ 	const unsigned int version;
+ 	void (*setup)(struct ccp_device *);
+ 	const struct ccp_actions *perform;
+ 	const unsigned int bar;
+ 	const unsigned int offset;
+ };
+ 
+ extern	struct ccp_vdata ccpv3;
+ extern	struct ccp_vdata ccpv5;
+ extern	struct ccp_vdata ccpv5other;
+ 
++>>>>>>> e14e7d126765 (crypto: ccp - Enable use of the additional CCP)
  #endif
diff --cc drivers/crypto/ccp/ccp-pci.c
index 15741de944bc,239cbf2630bf..000000000000
--- a/drivers/crypto/ccp/ccp-pci.c
+++ b/drivers/crypto/ccp/ccp-pci.c
@@@ -223,7 -230,10 +223,14 @@@ static int ccp_pci_probe(struct pci_de
  
  	dev_set_drvdata(dev, ccp);
  
++<<<<<<< HEAD
 +	ret = ccp_init(ccp);
++=======
+ 	if (ccp->vdata->setup)
+ 		ccp->vdata->setup(ccp);
+ 
+ 	ret = ccp->vdata->perform->init(ccp);
++>>>>>>> e14e7d126765 (crypto: ccp - Enable use of the additional CCP)
  	if (ret)
  		goto e_iomap;
  
@@@ -323,8 -323,10 +330,15 @@@ static int ccp_pci_resume(struct pci_de
  }
  #endif
  
++<<<<<<< HEAD
 +static DEFINE_PCI_DEVICE_TABLE(ccp_pci_table) = {
 +	{ PCI_VDEVICE(AMD, 0x1537), },
++=======
+ static const struct pci_device_id ccp_pci_table[] = {
+ 	{ PCI_VDEVICE(AMD, 0x1537), (kernel_ulong_t)&ccpv3 },
+ 	{ PCI_VDEVICE(AMD, 0x1456), (kernel_ulong_t)&ccpv5 },
+ 	{ PCI_VDEVICE(AMD, 0x1468), (kernel_ulong_t)&ccpv5other },
++>>>>>>> e14e7d126765 (crypto: ccp - Enable use of the additional CCP)
  	/* Last entry must be zero */
  	{ 0, }
  };
* Unmerged path drivers/crypto/ccp/ccp-dev-v5.c
* Unmerged path drivers/crypto/ccp/ccp-dev-v5.c
* Unmerged path drivers/crypto/ccp/ccp-dev.h
* Unmerged path drivers/crypto/ccp/ccp-pci.c
