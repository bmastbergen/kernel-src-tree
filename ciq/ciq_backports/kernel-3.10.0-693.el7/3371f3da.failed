random: initialize the non-blocking pool via add_hwgenerator_randomness()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit 3371f3da08cff4b75c1f2dce742d460539d6566d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3371f3da.failed

If we have a hardware RNG and are using the in-kernel rngd, we should
use this to initialize the non-blocking pool so that getrandom(2)
doesn't block unnecessarily.

	Cc: stable@kernel.org
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 3371f3da08cff4b75c1f2dce742d460539d6566d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
diff --cc drivers/char/random.c
index 8703daefb37b,4e2627a8d226..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -1777,13 -1849,19 +1777,29 @@@ void add_hwgenerator_randomness(const c
  {
  	struct entropy_store *poolp = &input_pool;
  
++<<<<<<< HEAD
 +	/* Suspend writing if we're above the trickle threshold.
 +	 * We'll be woken up again once below random_write_wakeup_thresh,
 +	 * or when the calling thread is about to terminate.
 +	 */
 +	wait_event_interruptible(random_write_wait, kthread_should_stop() ||
 +			input_pool.entropy_count <= random_write_wakeup_thresh);
 +	mix_pool_bytes(poolp, buffer, count, NULL);
++=======
+ 	if (unlikely(nonblocking_pool.initialized == 0))
+ 		poolp = &nonblocking_pool;
+ 	else {
+ 		/* Suspend writing if we're above the trickle
+ 		 * threshold.  We'll be woken up again once below
+ 		 * random_write_wakeup_thresh, or when the calling
+ 		 * thread is about to terminate.
+ 		 */
+ 		wait_event_interruptible(random_write_wait,
+ 					 kthread_should_stop() ||
+ 			ENTROPY_BITS(&input_pool) <= random_write_wakeup_bits);
+ 	}
+ 	mix_pool_bytes(poolp, buffer, count);
++>>>>>>> 3371f3da08cf (random: initialize the non-blocking pool via add_hwgenerator_randomness())
  	credit_entropy_bits(poolp, entropy);
  }
  EXPORT_SYMBOL_GPL(add_hwgenerator_randomness);
* Unmerged path drivers/char/random.c
