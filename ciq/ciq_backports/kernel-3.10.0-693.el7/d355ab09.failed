net: sched: rcu'ify cls_bpf

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: rcu'ify cls_bpf (Ivan Vecera) [1420506]
Rebuild_FUZZ: 89.80%
commit-author John Fastabend <john.fastabend@gmail.com>
commit d355ab09594118b8dfb3d78dbda72fff634a934b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d355ab09.failed

This patch makes the cls_bpf classifier RCU safe. The tcf_lock
was being used to protect a list of cls_bpf_prog now this list
is RCU safe and updates occur with rcu_replace.

	Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d355ab09594118b8dfb3d78dbda72fff634a934b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_bpf.c
diff --cc net/sched/cls_bpf.c
index 05dcfa2963bb,6a7386e6e5a8..000000000000
--- a/net/sched/cls_bpf.c
+++ b/net/sched/cls_bpf.c
@@@ -53,8 -56,8 +56,13 @@@ static int cls_bpf_classify(struct sk_b
  	struct cls_bpf_prog *prog;
  	int ret;
  
++<<<<<<< HEAD
 +	list_for_each_entry(prog, &head->plist, link) {
 +		int filter_res = SK_RUN_FILTER(prog->filter, skb);
++=======
+ 	list_for_each_entry_rcu(prog, &head->plist, link) {
+ 		int filter_res = BPF_PROG_RUN(prog->filter, skb);
++>>>>>>> d355ab095941 (net: sched: rcu'ify cls_bpf)
  
  		if (filter_res == 0)
  			continue;
@@@ -158,10 -166,10 +171,15 @@@ static int cls_bpf_modify_existing(stru
  				   unsigned long base, struct nlattr **tb,
  				   struct nlattr *est, bool ovr)
  {
- 	struct sock_filter *bpf_ops, *bpf_old;
+ 	struct sock_filter *bpf_ops;
  	struct tcf_exts exts;
++<<<<<<< HEAD
 +	struct sock_fprog tmp;
 +	struct sk_filter *fp, *fp_old;
++=======
+ 	struct sock_fprog_kern tmp;
+ 	struct bpf_prog *fp;
++>>>>>>> d355ab095941 (net: sched: rcu'ify cls_bpf)
  	u16 bpf_size, bpf_len;
  	u32 classid;
  	int ret;
@@@ -210,13 -213,7 +223,15 @@@
  	tcf_bind_filter(tp, &prog->res, base);
  	tcf_exts_change(tp, &prog->exts, &exts);
  
++<<<<<<< HEAD
 +	if (fp_old)
 +		sk_unattached_filter_destroy(fp_old);
 +	if (bpf_old)
 +		kfree(bpf_old);
 +
++=======
++>>>>>>> d355ab095941 (net: sched: rcu'ify cls_bpf)
  	return 0;
- 
  errout_free:
  	kfree(bpf_ops);
  errout:
* Unmerged path net/sched/cls_bpf.c
