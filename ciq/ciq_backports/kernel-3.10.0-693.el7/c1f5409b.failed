HID: wacom: use devm_kasprintf for allocating the name of the remote

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: use devm_kasprintf for allocating the name of the remote (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 96.18%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit c1f5409b74c14ac021ef847e034356c904bc7882
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c1f5409b.failed

The sysfs group was indeed removed by kobject_put(wacom->remote_dir) in
wacom_remove(), but the name of the group was never freed.

Also remove the misplaced kobject_put(wacom->remote_dir) in the error
path of wacom_remote_create_attr_group().

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit c1f5409b74c14ac021ef847e034356c904bc7882)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index e75b5002a526,ec088c1a4868..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -58,12 -20,19 +58,17 @@@ struct hid_descriptor 
  #define WAC_CMD_LED_CONTROL	0x20
  #define WAC_CMD_ICON_START	0x21
  #define WAC_CMD_ICON_XFER	0x23
 -#define WAC_CMD_ICON_BT_XFER	0x26
  #define WAC_CMD_RETRIES		10
++<<<<<<< HEAD
++=======
+ #define WAC_CMD_DELETE_PAIRING	0x20
+ #define WAC_CMD_UNPAIR_ALL	0xFF
++>>>>>>> c1f5409b74c1 (HID: wacom: use devm_kasprintf for allocating the name of the remote)
  
 -#define DEV_ATTR_RW_PERM (S_IRUGO | S_IWUSR | S_IWGRP)
 -#define DEV_ATTR_WO_PERM (S_IWUSR | S_IWGRP)
 -#define DEV_ATTR_RO_PERM (S_IRUSR | S_IRGRP)
 -
 -static int wacom_get_report(struct hid_device *hdev, u8 type, u8 *buf,
 -			    size_t size, unsigned int retries)
 +static int wacom_get_report(struct usb_interface *intf, u8 type, u8 id,
 +			    void *buf, size_t size, unsigned int retries)
  {
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	int retval;
  
  	do {
@@@ -1127,35 -1154,572 +1132,253 @@@ static void wacom_destroy_battery(struc
  	}
  }
  
++<<<<<<< HEAD
 +static int wacom_register_input(struct wacom *wacom)
++=======
+ static ssize_t wacom_show_speed(struct device *dev,
+ 				struct device_attribute
+ 				*attr, char *buf)
+ {
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 
+ 	return snprintf(buf, PAGE_SIZE, "%i\n", wacom->wacom_wac.bt_high_speed);
+ }
+ 
+ static ssize_t wacom_store_speed(struct device *dev,
+ 				struct device_attribute *attr,
+ 				const char *buf, size_t count)
+ {
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	u8 new_speed;
+ 
+ 	if (kstrtou8(buf, 0, &new_speed))
+ 		return -EINVAL;
+ 
+ 	if (new_speed != 0 && new_speed != 1)
+ 		return -EINVAL;
+ 
+ 	wacom_bt_query_tablet_data(hdev, new_speed, &wacom->wacom_wac.features);
+ 
+ 	return count;
+ }
+ 
+ static DEVICE_ATTR(speed, DEV_ATTR_RW_PERM,
+ 		wacom_show_speed, wacom_store_speed);
+ 
+ 
+ static ssize_t wacom_show_remote_mode(struct kobject *kobj,
+ 				      struct kobj_attribute *kattr,
+ 				      char *buf, int index)
+ {
+ 	struct device *dev = kobj_to_dev(kobj->parent);
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	u8 mode;
+ 
+ 	mode = wacom->led.select[index];
+ 	if (mode >= 0 && mode < 3)
+ 		return snprintf(buf, PAGE_SIZE, "%d\n", mode);
+ 	else
+ 		return snprintf(buf, PAGE_SIZE, "%d\n", -1);
+ }
+ 
+ #define DEVICE_EKR_ATTR_GROUP(SET_ID)					\
+ static ssize_t wacom_show_remote##SET_ID##_mode(struct kobject *kobj,	\
+ 			       struct kobj_attribute *kattr, char *buf)	\
+ {									\
+ 	return wacom_show_remote_mode(kobj, kattr, buf, SET_ID);	\
+ }									\
+ static struct kobj_attribute remote##SET_ID##_mode_attr = {		\
+ 	.attr = {.name = "remote_mode",					\
+ 		.mode = DEV_ATTR_RO_PERM},				\
+ 	.show = wacom_show_remote##SET_ID##_mode,			\
+ };									\
+ static struct attribute *remote##SET_ID##_serial_attrs[] = {		\
+ 	&remote##SET_ID##_mode_attr.attr,				\
+ 	NULL								\
+ };									\
+ static struct attribute_group remote##SET_ID##_serial_group = {		\
+ 	.name = NULL,							\
+ 	.attrs = remote##SET_ID##_serial_attrs,				\
+ }
+ 
+ DEVICE_EKR_ATTR_GROUP(0);
+ DEVICE_EKR_ATTR_GROUP(1);
+ DEVICE_EKR_ATTR_GROUP(2);
+ DEVICE_EKR_ATTR_GROUP(3);
+ DEVICE_EKR_ATTR_GROUP(4);
+ 
+ int wacom_remote_create_attr_group(struct wacom *wacom, __u32 serial, int index)
+ {
+ 	int error = 0;
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 
+ 	wacom_wac->serial[index] = serial;
+ 
+ 	wacom->remote_group[index].name = devm_kasprintf(&wacom->hdev->dev,
+ 							 GFP_KERNEL,
+ 							 "%d", serial);
+ 	if (!wacom->remote_group[index].name)
+ 		return -ENOMEM;
+ 
+ 	error = sysfs_create_group(wacom->remote_dir,
+ 				   &wacom->remote_group[index]);
+ 	if (error) {
+ 		hid_err(wacom->hdev,
+ 			"cannot create sysfs group err: %d\n", error);
+ 		return error;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ void wacom_remote_destroy_attr_group(struct wacom *wacom, __u32 serial)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	int i;
+ 
+ 	if (!serial)
+ 		return;
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		if (wacom_wac->serial[i] == serial) {
+ 			wacom_wac->serial[i] = 0;
+ 			wacom->led.select[i] = WACOM_STATUS_UNKNOWN;
+ 			if (wacom->remote_group[i].name) {
+ 				sysfs_remove_group(wacom->remote_dir,
+ 						   &wacom->remote_group[i]);
+ 				devm_kfree(&wacom->hdev->dev,
+ 					   (char *)wacom->remote_group[i].name);
+ 				wacom->remote_group[i].name = NULL;
+ 			}
+ 		}
+ 	}
+ }
+ 
+ static int wacom_cmd_unpair_remote(struct wacom *wacom, unsigned char selector)
+ {
+ 	const size_t buf_size = 2;
+ 	unsigned char *buf;
+ 	int retval;
+ 
+ 	buf = kzalloc(buf_size, GFP_KERNEL);
+ 	if (!buf)
+ 		return -ENOMEM;
+ 
+ 	buf[0] = WAC_CMD_DELETE_PAIRING;
+ 	buf[1] = selector;
+ 
+ 	retval = wacom_set_report(wacom->hdev, HID_OUTPUT_REPORT, buf,
+ 				  buf_size, WAC_CMD_RETRIES);
+ 	kfree(buf);
+ 
+ 	return retval;
+ }
+ 
+ static ssize_t wacom_store_unpair_remote(struct kobject *kobj,
+ 					 struct kobj_attribute *attr,
+ 					 const char *buf, size_t count)
+ {
+ 	unsigned char selector = 0;
+ 	struct device *dev = kobj_to_dev(kobj->parent);
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	int err;
+ 
+ 	if (!strncmp(buf, "*\n", 2)) {
+ 		selector = WAC_CMD_UNPAIR_ALL;
+ 	} else {
+ 		hid_info(wacom->hdev, "remote: unrecognized unpair code: %s\n",
+ 			 buf);
+ 		return -1;
+ 	}
+ 
+ 	mutex_lock(&wacom->lock);
+ 
+ 	err = wacom_cmd_unpair_remote(wacom, selector);
+ 	mutex_unlock(&wacom->lock);
+ 
+ 	return err < 0 ? err : count;
+ }
+ 
+ static struct kobj_attribute unpair_remote_attr = {
+ 	.attr = {.name = "unpair_remote", .mode = 0200},
+ 	.store = wacom_store_unpair_remote,
+ };
+ 
+ static const struct attribute *remote_unpair_attrs[] = {
+ 	&unpair_remote_attr.attr,
+ 	NULL
+ };
+ 
+ static int wacom_initialize_remote(struct wacom *wacom)
+ {
+ 	int error = 0;
+ 	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
+ 	int i;
+ 
+ 	if (wacom->wacom_wac.features.type != REMOTE)
+ 		return 0;
+ 
+ 	wacom->remote_group[0] = remote0_serial_group;
+ 	wacom->remote_group[1] = remote1_serial_group;
+ 	wacom->remote_group[2] = remote2_serial_group;
+ 	wacom->remote_group[3] = remote3_serial_group;
+ 	wacom->remote_group[4] = remote4_serial_group;
+ 
+ 	wacom->remote_dir = kobject_create_and_add("wacom_remote",
+ 						   &wacom->hdev->dev.kobj);
+ 	if (!wacom->remote_dir)
+ 		return -ENOMEM;
+ 
+ 	error = sysfs_create_files(wacom->remote_dir, remote_unpair_attrs);
+ 
+ 	if (error) {
+ 		hid_err(wacom->hdev,
+ 			"cannot create sysfs group err: %d\n", error);
+ 		return error;
+ 	}
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		wacom->led.select[i] = WACOM_STATUS_UNKNOWN;
+ 		wacom_wac->serial[i] = 0;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static struct input_dev *wacom_allocate_input(struct wacom *wacom)
++>>>>>>> c1f5409b74c1 (HID: wacom: use devm_kasprintf for allocating the name of the remote)
  {
  	struct input_dev *input_dev;
 -	struct hid_device *hdev = wacom->hdev;
 +	struct usb_interface *intf = wacom->intf;
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 +	int error;
  
 -	input_dev = devm_input_allocate_device(&hdev->dev);
 -	if (!input_dev)
 -		return NULL;
 +	input_dev = input_allocate_device();
 +	if (!input_dev) {
 +		error = -ENOMEM;
 +		goto fail1;
 +	}
  
 -	input_dev->name = wacom_wac->features.name;
 -	input_dev->phys = hdev->phys;
 -	input_dev->dev.parent = &hdev->dev;
 +	input_dev->name = wacom_wac->name;
 +	input_dev->dev.parent = &intf->dev;
  	input_dev->open = wacom_open;
  	input_dev->close = wacom_close;
 -	input_dev->uniq = hdev->uniq;
 -	input_dev->id.bustype = hdev->bus;
 -	input_dev->id.vendor  = hdev->vendor;
 -	input_dev->id.product = wacom_wac->pid ? wacom_wac->pid : hdev->product;
 -	input_dev->id.version = hdev->version;
 +	usb_to_input_id(dev, &input_dev->id);
  	input_set_drvdata(input_dev, wacom);
  
 -	return input_dev;
 -}
 -
 -static int wacom_allocate_inputs(struct wacom *wacom)
 -{
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -
 -	wacom_wac->pen_input = wacom_allocate_input(wacom);
 -	wacom_wac->touch_input = wacom_allocate_input(wacom);
 -	wacom_wac->pad_input = wacom_allocate_input(wacom);
 -	if (!wacom_wac->pen_input ||
 -	    !wacom_wac->touch_input ||
 -	    !wacom_wac->pad_input)
 -		return -ENOMEM;
 -
 -	wacom_wac->pen_input->name = wacom_wac->pen_name;
 -	wacom_wac->touch_input->name = wacom_wac->touch_name;
 -	wacom_wac->pad_input->name = wacom_wac->pad_name;
 -
 -	return 0;
 -}
 -
 -static int wacom_register_inputs(struct wacom *wacom)
 -{
 -	struct input_dev *pen_input_dev, *touch_input_dev, *pad_input_dev;
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -	int error = 0;
 -
 -	pen_input_dev = wacom_wac->pen_input;
 -	touch_input_dev = wacom_wac->touch_input;
 -	pad_input_dev = wacom_wac->pad_input;
 -
 -	if (!pen_input_dev || !touch_input_dev || !pad_input_dev)
 -		return -EINVAL;
 -
 -	error = wacom_setup_pen_input_capabilities(pen_input_dev, wacom_wac);
 -	if (error) {
 -		/* no pen in use on this interface */
 -		input_free_device(pen_input_dev);
 -		wacom_wac->pen_input = NULL;
 -		pen_input_dev = NULL;
 -	} else {
 -		error = input_register_device(pen_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 -
 -	error = wacom_setup_touch_input_capabilities(touch_input_dev, wacom_wac);
 -	if (error) {
 -		/* no touch in use on this interface */
 -		input_free_device(touch_input_dev);
 -		wacom_wac->touch_input = NULL;
 -		touch_input_dev = NULL;
 -	} else {
 -		error = input_register_device(touch_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 -
 -	error = wacom_setup_pad_input_capabilities(pad_input_dev, wacom_wac);
 -	if (error) {
 -		/* no pad in use on this interface */
 -		input_free_device(pad_input_dev);
 -		wacom_wac->pad_input = NULL;
 -		pad_input_dev = NULL;
 -	} else {
 -		error = input_register_device(pad_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 -
 -	return 0;
 -
 -fail:
 -	wacom_wac->pad_input = NULL;
 -	wacom_wac->touch_input = NULL;
 -	wacom_wac->pen_input = NULL;
 -	return error;
 -}
 -
 -/*
 - * Not all devices report physical dimensions from HID.
 - * Compute the default from hardcoded logical dimension
 - * and resolution before driver overwrites them.
 - */
 -static void wacom_set_default_phy(struct wacom_features *features)
 -{
 -	if (features->x_resolution) {
 -		features->x_phy = (features->x_max * 100) /
 -					features->x_resolution;
 -		features->y_phy = (features->y_max * 100) /
 -					features->y_resolution;
 -	}
 -}
 -
 -static void wacom_calculate_res(struct wacom_features *features)
 -{
 -	/* set unit to "100th of a mm" for devices not reported by HID */
 -	if (!features->unit) {
 -		features->unit = 0x11;
 -		features->unitExpo = -3;
 -	}
 -
 -	features->x_resolution = wacom_calc_hid_res(features->x_max,
 -						    features->x_phy,
 -						    features->unit,
 -						    features->unitExpo);
 -	features->y_resolution = wacom_calc_hid_res(features->y_max,
 -						    features->y_phy,
 -						    features->unit,
 -						    features->unitExpo);
 -}
 -
 -void wacom_battery_work(struct work_struct *work)
 -{
 -	struct wacom *wacom = container_of(work, struct wacom, battery_work);
 -
 -	if ((wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
 -	     !wacom->battery) {
 -		wacom_initialize_battery(wacom);
 -	}
 -	else if (!(wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
 -		 wacom->battery) {
 -		wacom_destroy_battery(wacom);
 -	}
 -}
 -
 -static size_t wacom_compute_pktlen(struct hid_device *hdev)
 -{
 -	struct hid_report_enum *report_enum;
 -	struct hid_report *report;
 -	size_t size = 0;
 -
 -	report_enum = hdev->report_enum + HID_INPUT_REPORT;
 -
 -	list_for_each_entry(report, &report_enum->report_list, list) {
 -		size_t report_size = hid_report_len(report);
 -		if (report_size > size)
 -			size = report_size;
 -	}
 -
 -	return size;
 -}
 -
 -static void wacom_update_name(struct wacom *wacom, const char *suffix)
 -{
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	struct wacom_features *features = &wacom_wac->features;
 -	char name[WACOM_NAME_MAX];
 -
 -	/* Generic devices name unspecified */
 -	if ((features->type == HID_GENERIC) && !strcmp("Wacom HID", features->name)) {
 -		if (strstr(wacom->hdev->name, "Wacom") ||
 -		    strstr(wacom->hdev->name, "wacom") ||
 -		    strstr(wacom->hdev->name, "WACOM")) {
 -			/* name is in HID descriptor, use it */
 -			strlcpy(name, wacom->hdev->name, sizeof(name));
 -
 -			/* strip out excess whitespaces */
 -			while (1) {
 -				char *gap = strstr(name, "  ");
 -				if (gap == NULL)
 -					break;
 -				/* shift everything including the terminator */
 -				memmove(gap, gap+1, strlen(gap));
 -			}
 -			/* get rid of trailing whitespace */
 -			if (name[strlen(name)-1] == ' ')
 -				name[strlen(name)-1] = '\0';
 -		} else {
 -			/* no meaningful name retrieved. use product ID */
 -			snprintf(name, sizeof(name),
 -				 "%s %X", features->name, wacom->hdev->product);
 -		}
 -	} else {
 -		strlcpy(name, features->name, sizeof(name));
 -	}
 -
 -	/* Append the device type to the name */
 -	snprintf(wacom_wac->pen_name, sizeof(wacom_wac->pen_name),
 -		"%s%s Pen", name, suffix);
 -	snprintf(wacom_wac->touch_name, sizeof(wacom_wac->touch_name),
 -		"%s%s Finger", name, suffix);
 -	snprintf(wacom_wac->pad_name, sizeof(wacom_wac->pad_name),
 -		"%s%s Pad", name, suffix);
 -}
 -
 -static void wacom_release_resources(struct wacom *wacom)
 -{
 -	struct hid_device *hdev = wacom->hdev;
 -
 -	if (!wacom->resources)
 -		return;
 -
 -	devres_release_group(&hdev->dev, wacom);
 -
 -	wacom->resources = false;
 -
 -	wacom->wacom_wac.pen_input = NULL;
 -	wacom->wacom_wac.touch_input = NULL;
 -	wacom->wacom_wac.pad_input = NULL;
 -}
 -
 -static int wacom_parse_and_register(struct wacom *wacom, bool wireless)
 -{
 -	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 -	struct wacom_features *features = &wacom_wac->features;
 -	struct hid_device *hdev = wacom->hdev;
 -	int error;
 -	unsigned int connect_mask = HID_CONNECT_HIDRAW;
 -
 -	features->pktlen = wacom_compute_pktlen(hdev);
 -	if (features->pktlen > WACOM_PKGLEN_MAX)
 -		return -EINVAL;
 -
 -	if (!devres_open_group(&hdev->dev, wacom, GFP_KERNEL))
 -		return -ENOMEM;
 -
 -	wacom->resources = true;
 -
 -	error = wacom_allocate_inputs(wacom);
 -	if (error)
 -		goto fail_open_group;
 -
 -	/*
 -	 * Bamboo Pad has a generic hid handling for the Pen, and we switch it
 -	 * into debug mode for the touch part.
 -	 * We ignore the other interfaces.
 -	 */
 -	if (features->type == BAMBOO_PAD) {
 -		if (features->pktlen == WACOM_PKGLEN_PENABLED) {
 -			features->type = HID_GENERIC;
 -		} else if ((features->pktlen != WACOM_PKGLEN_BPAD_TOUCH) &&
 -			   (features->pktlen != WACOM_PKGLEN_BPAD_TOUCH_USB)) {
 -			error = -ENODEV;
 -			goto fail_allocate_inputs;
 -		}
 -	}
 -
 -	/* set the default size in case we do not get them from hid */
 -	wacom_set_default_phy(features);
 -
 -	/* Retrieve the physical and logical size for touch devices */
 -	wacom_retrieve_hid_descriptor(hdev, features);
 -	wacom_setup_device_quirks(wacom);
 -
 -	if (features->device_type == WACOM_DEVICETYPE_NONE &&
 -	    features->type != WIRELESS) {
 -		error = features->type == HID_GENERIC ? -ENODEV : 0;
 -
 -		dev_warn(&hdev->dev, "Unknown device_type for '%s'. %s.",
 -			 hdev->name,
 -			 error ? "Ignoring" : "Assuming pen");
 -
 -		if (error)
 -			goto fail_parsed;
 -
 -		features->device_type |= WACOM_DEVICETYPE_PEN;
 -	}
 -
 -	wacom_calculate_res(features);
 -
 -	wacom_update_name(wacom, wireless ? " (WL)" : "");
 -
 -	error = wacom_add_shared_data(hdev);
 +	wacom_wac->input = input_dev;
 +	error = wacom_setup_input_capabilities(input_dev, wacom_wac);
  	if (error)
 -		goto fail_shared_data;
 -
 -	if (!(features->device_type & WACOM_DEVICETYPE_WL_MONITOR) &&
 -	     (features->quirks & WACOM_QUIRK_BATTERY)) {
 -		error = wacom_initialize_battery(wacom);
 -		if (error)
 -			goto fail_battery;
 -	}
 +		goto fail1;
  
 -	error = wacom_register_inputs(wacom);
 +	error = input_register_device(input_dev);
  	if (error)
 -		goto fail_register_inputs;
 -
 -	if (wacom->wacom_wac.features.device_type & WACOM_DEVICETYPE_PAD) {
 -		error = wacom_initialize_leds(wacom);
 -		if (error)
 -			goto fail_leds;
 -
 -		error = wacom_initialize_remote(wacom);
 -		if (error)
 -			goto fail_remote;
 -	}
 -
 -	if (features->type == HID_GENERIC)
 -		connect_mask |= HID_CONNECT_DRIVER;
 -
 -	/* Regular HID work starts now */
 -	error = hid_hw_start(hdev, connect_mask);
 -	if (error) {
 -		hid_err(hdev, "hw start failed\n");
 -		goto fail_hw_start;
 -	}
 -
 -	if (!wireless) {
 -		/* Note that if query fails it is not a hard failure */
 -		wacom_query_tablet_data(hdev, features);
 -	}
 -
 -	/* touch only Bamboo doesn't support pen */
 -	if ((features->type == BAMBOO_TOUCH) &&
 -	    (features->device_type & WACOM_DEVICETYPE_PEN)) {
 -		error = -ENODEV;
 -		goto fail_quirks;
 -	}
 -
 -	/* pen only Bamboo neither support touch nor pad */
 -	if ((features->type == BAMBOO_PEN) &&
 -	    ((features->device_type & WACOM_DEVICETYPE_TOUCH) ||
 -	    (features->device_type & WACOM_DEVICETYPE_PAD))) {
 -		error = -ENODEV;
 -		goto fail_quirks;
 -	}
 -
 -	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
 -		error = hid_hw_open(hdev);
 -
 -	if ((wacom_wac->features.type == INTUOSHT ||
 -	     wacom_wac->features.type == INTUOSHT2) &&
 -	    (wacom_wac->features.device_type & WACOM_DEVICETYPE_TOUCH)) {
 -		wacom_wac->shared->type = wacom_wac->features.type;
 -		wacom_wac->shared->touch_input = wacom_wac->touch_input;
 -	}
 -
 -	devres_close_group(&hdev->dev, wacom);
 +		goto fail2;
  
  	return 0;
  
* Unmerged path drivers/hid/wacom_sys.c
