scsi: lpfc: code cleanups in NVME initiator discovery

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] revert "lpfc: code cleanups in NVME initiator discovery" (Ewan Milne) [1444045]
Rebuild_FUZZ: 88.07%
commit-author James Smart <jsmart2021@gmail.com>
commit b5ccc7d61c76006f839b41c6f15876342b46cb02
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b5ccc7d6.failed

This patch addresses the smatch issues identified by Dan Carpenter
in http://www.spinics.net/lists/linux-scsi/msg105665.html

The issues are:

drivers/scsi/lpfc/lpfc_ct.c:943 lpfc_cmpl_ct_cmd_gft_id()
error: we previously assumed 'ndlp' could be null (see line 928)

Action: moved under if check

drivers/scsi/lpfc/lpfc_nvmet.c:1694 lpfc_nvmet_unsol_issue_abort()
error: we previously assumed 'ndlp' could be null (see line 1690)

Action: conditionalized arg in printf stmt

drivers/scsi/lpfc/lpfc_nvmet.c:1792 lpfc_nvmet_sol_fcp_issue_abort()
error: we previously assumed 'ndlp' could be null (see line 1788)

Action: conditionalized arg in printf stmt

	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b5ccc7d61c76006f839b41c6f15876342b46cb02)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_ct.c
#	drivers/scsi/lpfc/lpfc_nvmet.c
diff --cc drivers/scsi/lpfc/lpfc_ct.c
index 63e48d4277b0,d3e9af983015..000000000000
--- a/drivers/scsi/lpfc/lpfc_ct.c
+++ b/drivers/scsi/lpfc/lpfc_ct.c
@@@ -881,6 -895,60 +881,63 @@@ out
  	return;
  }
  
++<<<<<<< HEAD
++=======
+ static void
+ lpfc_cmpl_ct_cmd_gft_id(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
+ 				struct lpfc_iocbq *rspiocb)
+ {
+ 	struct lpfc_vport *vport = cmdiocb->vport;
+ 	IOCB_t *irsp = &rspiocb->iocb;
+ 	struct lpfc_dmabuf *inp = (struct lpfc_dmabuf *)cmdiocb->context1;
+ 	struct lpfc_dmabuf *outp = (struct lpfc_dmabuf *)cmdiocb->context2;
+ 	struct lpfc_sli_ct_request *CTrsp;
+ 	int did;
+ 	struct lpfc_nodelist *ndlp;
+ 	uint32_t fc4_data_0, fc4_data_1;
+ 
+ 	did = ((struct lpfc_sli_ct_request *)inp->virt)->un.gft.PortId;
+ 	did = be32_to_cpu(did);
+ 
+ 	lpfc_debugfs_disc_trc(vport, LPFC_DISC_TRC_CT,
+ 			      "GFT_ID cmpl: status:x%x/x%x did:x%x",
+ 			      irsp->ulpStatus, irsp->un.ulpWord[4], did);
+ 
+ 	if (irsp->ulpStatus == IOSTAT_SUCCESS) {
+ 		/* Good status, continue checking */
+ 		CTrsp = (struct lpfc_sli_ct_request *)outp->virt;
+ 		fc4_data_0 = be32_to_cpu(CTrsp->un.gft_acc.fc4_types[0]);
+ 		fc4_data_1 = be32_to_cpu(CTrsp->un.gft_acc.fc4_types[1]);
+ 		lpfc_printf_vlog(vport, KERN_ERR, LOG_DISCOVERY,
+ 				 "3062 DID x%06x GFT Wd0 x%08x Wd1 x%08x\n",
+ 				 did, fc4_data_0, fc4_data_1);
+ 
+ 		ndlp = lpfc_findnode_did(vport, did);
+ 		if (ndlp) {
+ 			/* The bitmask value for FCP and NVME FCP types is
+ 			 * the same because they are 32 bits distant from
+ 			 * each other in word0 and word0.
+ 			 */
+ 			if (fc4_data_0 & LPFC_FC4_TYPE_BITMASK)
+ 				ndlp->nlp_fc4_type |= NLP_FC4_FCP;
+ 			if (fc4_data_1 &  LPFC_FC4_TYPE_BITMASK)
+ 				ndlp->nlp_fc4_type |= NLP_FC4_NVME;
+ 			lpfc_printf_vlog(vport, KERN_ERR, LOG_DISCOVERY,
+ 					 "3064 Setting ndlp %p, DID x%06x with "
+ 					 "FC4 x%08x, Data: x%08x x%08x\n",
+ 					 ndlp, did, ndlp->nlp_fc4_type,
+ 					 FC_TYPE_FCP, FC_TYPE_NVME);
+ 			ndlp->nlp_prev_state = NLP_STE_REG_LOGIN_ISSUE;
+ 		}
+ 		lpfc_nlp_set_state(vport, ndlp, NLP_STE_PRLI_ISSUE);
+ 		lpfc_issue_els_prli(vport, ndlp, 0);
+ 	} else
+ 		lpfc_printf_vlog(vport, KERN_ERR, LOG_DISCOVERY,
+ 				 "3065 GFT_ID failed x%08x\n", irsp->ulpStatus);
+ 
+ 	lpfc_ct_free_iocb(phba, cmdiocb);
+ }
++>>>>>>> b5ccc7d61c76 (scsi: lpfc: code cleanups in NVME initiator discovery)
  
  static void
  lpfc_cmpl_ct(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
* Unmerged path drivers/scsi/lpfc/lpfc_nvmet.c
* Unmerged path drivers/scsi/lpfc/lpfc_ct.c
* Unmerged path drivers/scsi/lpfc/lpfc_nvmet.c
