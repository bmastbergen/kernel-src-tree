perf llvm: Use realpath to canonicalize paths

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 78478269d2c9be315164d15c14e6e222a06d2f40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/78478269.failed

To kill the last user of make_nonrelative_path(), that gets ditched,
one more panicking function killed.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-3hu56rvyh4q5gxogovb6ko8a@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 78478269d2c9be315164d15c14e6e222a06d2f40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/llvm-utils.c
diff --cc tools/perf/util/llvm-utils.c
index 5887bb8c1243,aab855f491ca..000000000000
--- a/tools/perf/util/llvm-utils.c
+++ b/tools/perf/util/llvm-utils.c
@@@ -3,18 -3,19 +3,22 @@@
   * Copyright (C) 2015, Huawei Inc.
   */
  
+ #include <limits.h>
  #include <stdio.h>
++<<<<<<< HEAD
 +#include <sys/utsname.h>
 +#include "util.h"
++=======
+ #include <stdlib.h>
++>>>>>>> 78478269d2c9 (perf llvm: Use realpath to canonicalize paths)
  #include "debug.h"
  #include "llvm-utils.h"
- #include "cache.h"
  
  #define CLANG_BPF_CMD_DEFAULT_TEMPLATE				\
 -		"$CLANG_EXEC -D__KERNEL__ -D__NR_CPUS__=$NR_CPUS "\
 -		"-DLINUX_VERSION_CODE=$LINUX_VERSION_CODE "	\
 -		"$CLANG_OPTIONS $KERNEL_INC_OPTIONS "		\
 -		"-Wno-unused-value -Wno-pointer-sign "		\
 -		"-working-directory $WORKING_DIR "		\
 -		"-c \"$CLANG_SOURCE\" -target bpf -O2 -o -"
 +		"$CLANG_EXEC -D__KERNEL__ $CLANG_OPTIONS "	\
 +		"$KERNEL_INC_OPTIONS -Wno-unused-value "	\
 +		"-Wno-pointer-sign -working-directory "		\
 +		"$WORKING_DIR -c \"$CLANG_SOURCE\" -target bpf -O2 -o -"
  
  struct llvm_param llvm_param = {
  	.clang_path = "clang",
@@@ -324,14 -328,24 +328,27 @@@ get_kbuild_opts(char **kbuild_dir, cha
  int llvm__compile_bpf(const char *path, void **p_obj_buf,
  		      size_t *p_obj_buf_sz)
  {
 -	size_t obj_buf_sz;
 -	void *obj_buf = NULL;
 -	int err, nr_cpus_avail;
 -	unsigned int kernel_version;
 -	char linux_version_code_str[64];
 +	int err;
 +	char clang_path[PATH_MAX];
  	const char *clang_opt = llvm_param.clang_opt;
++<<<<<<< HEAD
++=======
+ 	char clang_path[PATH_MAX], abspath[PATH_MAX], nr_cpus_avail_str[64];
+ 	char serr[STRERR_BUFSIZE];
+ 	char *kbuild_dir = NULL, *kbuild_include_opts = NULL;
++>>>>>>> 78478269d2c9 (perf llvm: Use realpath to canonicalize paths)
  	const char *template = llvm_param.clang_bpf_cmd_template;
 +	char *kbuild_dir = NULL, *kbuild_include_opts = NULL;
 +	void *obj_buf = NULL;
 +	size_t obj_buf_sz;
  
+ 	if (path[0] != '-' && realpath(path, abspath) == NULL) {
+ 		err = errno;
+ 		pr_err("ERROR: problems with path %s: %s\n",
+ 		       path, strerror_r(err, serr, sizeof(serr)));
+ 		return -err;
+ 	}
+ 
  	if (!template)
  		template = CLANG_BPF_CMD_DEFAULT_TEMPLATE;
  
diff --git a/tools/perf/util/Build b/tools/perf/util/Build
index d2916db4930b..0a9c40c73ee4 100644
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@ -1,4 +1,3 @@
-libperf-y += abspath.o
 libperf-y += alias.o
 libperf-y += annotate.o
 libperf-y += build-id.o
diff --git a/tools/perf/util/abspath.c b/tools/perf/util/abspath.c
deleted file mode 100644
index 0e76affe9c36..000000000000
--- a/tools/perf/util/abspath.c
+++ /dev/null
@@ -1,37 +0,0 @@
-#include "cache.h"
-
-static const char *get_pwd_cwd(void)
-{
-	static char cwd[PATH_MAX + 1];
-	char *pwd;
-	struct stat cwd_stat, pwd_stat;
-	if (getcwd(cwd, PATH_MAX) == NULL)
-		return NULL;
-	pwd = getenv("PWD");
-	if (pwd && strcmp(pwd, cwd)) {
-		stat(cwd, &cwd_stat);
-		if (!stat(pwd, &pwd_stat) &&
-		    pwd_stat.st_dev == cwd_stat.st_dev &&
-		    pwd_stat.st_ino == cwd_stat.st_ino) {
-			strlcpy(cwd, pwd, PATH_MAX);
-		}
-	}
-	return cwd;
-}
-
-const char *make_nonrelative_path(const char *path)
-{
-	static char buf[PATH_MAX + 1];
-
-	if (is_absolute_path(path)) {
-		if (strlcpy(buf, path, PATH_MAX) >= PATH_MAX)
-			die("Too long path: %.*s", 60, path);
-	} else {
-		const char *cwd = get_pwd_cwd();
-		if (!cwd)
-			die("Cannot determine the current working directory");
-		if (snprintf(buf, PATH_MAX, "%s/%s", cwd, path) >= PATH_MAX)
-			die("Too long path: %.*s", 60, path);
-	}
-	return buf;
-}
diff --git a/tools/perf/util/cache.h b/tools/perf/util/cache.h
index 0a3814d0511b..012bbb58c357 100644
--- a/tools/perf/util/cache.h
+++ b/tools/perf/util/cache.h
@@ -40,7 +40,6 @@ static inline int is_absolute_path(const char *path)
 	return path[0] == '/';
 }
 
-const char *make_nonrelative_path(const char *path);
 char *strip_path_suffix(const char *path, const char *suffix);
 
 char *mkpath(const char *fmt, ...) __attribute__((format (printf, 1, 2)));
* Unmerged path tools/perf/util/llvm-utils.c
