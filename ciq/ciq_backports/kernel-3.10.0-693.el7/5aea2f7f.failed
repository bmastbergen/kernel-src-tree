tools/power turbostat: call __cpuid() instead of __get_cpuid()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: call __cpuid() instead of __get_cpuid() (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 94.92%
commit-author Len Brown <len.brown@intel.com>
commit 5aea2f7f645b27635b856311dee5b775d277c686
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5aea2f7f.failed

turbostat already checks whether calling each cpuid leavf is legal,
and it doesn't look at the function return value,
so call the simpler gcc intrinsic __cpuid() instead of __get_cpuid().

syntax only, no functional change

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 5aea2f7f645b27635b856311dee5b775d277c686)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index b938c3391c64,b34241c3c92e..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -2723,10 -3109,10 +2723,10 @@@ void process_cpuid(
  		genuine_intel = 1;
  
  	if (debug)
 -		fprintf(outf, "CPUID(0): %.4s%.4s%.4s ",
 +		fprintf(stderr, "CPUID(0): %.4s%.4s%.4s ",
  			(char *)&ebx, (char *)&edx, (char *)&ecx);
  
- 	__get_cpuid(1, &fms, &ebx, &ecx, &edx);
+ 	__cpuid(1, fms, ebx, ecx, edx);
  	family = (fms >> 8) & 0xf;
  	model = (fms >> 4) & 0xf;
  	stepping = fms & 0xf;
@@@ -2756,9 -3143,9 +2756,13 @@@
  	 * This check is valid for both Intel and AMD.
  	 */
  	ebx = ecx = edx = 0;
++<<<<<<< HEAD
 +	__get_cpuid(0x80000000, &max_level, &ebx, &ecx, &edx);
++=======
+ 	__cpuid(0x80000000, max_extended_level, ebx, ecx, edx);
++>>>>>>> 5aea2f7f645b (tools/power turbostat: call __cpuid() instead of __get_cpuid())
  
 -	if (max_extended_level >= 0x80000007) {
 +	if (max_level >= 0x80000007) {
  
  		/*
  		 * Non-Stop TSC is advertised by CPUID.EAX=0x80000007: EDX.bit8
@@@ -2832,6 -3235,19 +2836,22 @@@
  			}
  		}
  	}
++<<<<<<< HEAD
++=======
+ 	if (max_level >= 0x16) {
+ 		unsigned int base_mhz, max_mhz, bus_mhz, edx;
+ 
+ 		/*
+ 		 * CPUID 16H Base MHz, Max MHz, Bus MHz
+ 		 */
+ 		base_mhz = max_mhz = bus_mhz = edx = 0;
+ 
+ 		__cpuid(0x16, base_mhz, max_mhz, bus_mhz, edx);
+ 		if (debug)
+ 			fprintf(outf, "CPUID(0x16): base_mhz: %d max_mhz: %d bus_mhz: %d\n",
+ 				base_mhz, max_mhz, bus_mhz);
+ 	}
++>>>>>>> 5aea2f7f645b (tools/power turbostat: call __cpuid() instead of __get_cpuid())
  
  	if (has_aperf)
  		aperf_mperf_multiplier = get_aperf_mperf_multiplier(family, model);
* Unmerged path tools/power/x86/turbostat/turbostat.c
