HID: wacom: Centralize updating of wacom_wac battery status

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: Centralize updating of wacom_wac battery status (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 95.58%
commit-author Jason Gerecke <killertofu@gmail.com>
commit 953f2c5f716305a5c2ebea935f410ee7aa439159
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/953f2c5f.failed

Has the 'wacom_notify_battery' function take on the job of detecting if
updating the power supply is necessary to remove multiple
nearly-identical 'if' blocks.

	Signed-off-by: Jason Gerecke <killertofu@gmail.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 953f2c5f716305a5c2ebea935f410ee7aa439159)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom.h
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom.h
index 87d2c48e3adc,b8344b140760..000000000000
--- a/drivers/hid/wacom.h
+++ b/drivers/hid/wacom.h
@@@ -135,7 -129,7 +135,11 @@@ static inline void wacom_schedule_work(
  	schedule_work(&wacom->work);
  }
  
++<<<<<<< HEAD
 +extern const struct usb_device_id wacom_ids[];
++=======
+ extern const struct hid_device_id wacom_ids[];
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  
  void wacom_wac_irq(struct wacom_wac *wacom_wac, size_t len);
  void wacom_setup_device_quirks(struct wacom_features *features);
diff --cc drivers/hid/wacom_wac.c
index d83376be6444,5d57fec177a8..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -34,6 -34,35 +34,38 @@@
   */
  #define WACOM_CONTACT_AREA_SCALE 2607
  
++<<<<<<< HEAD
++=======
+ /*
+  * Percent of battery capacity for Graphire.
+  * 8th value means AC online and show 100% capacity.
+  */
+ static unsigned short batcap_gr[8] = { 1, 15, 25, 35, 50, 70, 100, 100 };
+ 
+ /*
+  * Percent of battery capacity for Intuos4 WL, AC has a separate bit.
+  */
+ static unsigned short batcap_i4[8] = { 1, 15, 30, 45, 60, 70, 85, 100 };
+ 
+ static void wacom_notify_battery(struct wacom_wac *wacom_wac,
+ 	int bat_capacity, bool bat_charging, bool ps_connected)
+ {
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 	bool changed = wacom_wac->battery_capacity != bat_capacity  ||
+ 		       wacom_wac->bat_charging     != bat_charging  ||
+ 		       wacom_wac->ps_connected     != ps_connected;
+ 
+ 	if (changed) {
+ 		wacom_wac->battery_capacity = bat_capacity;
+ 		wacom_wac->bat_charging = bat_charging;
+ 		wacom_wac->ps_connected = ps_connected;
+ 
+ 		if (wacom->battery.dev)
+ 			power_supply_changed(&wacom->battery);
+ 	}
+ }
+ 
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  static int wacom_penpartner_irq(struct wacom_wac *wacom)
  {
  	unsigned char *data = wacom->data;
@@@ -317,6 -418,27 +349,30 @@@ static int wacom_graphire_irq(struct wa
  			retval = 1;
  		}
  		break;
++<<<<<<< HEAD
++=======
+ 	case GRAPHIRE_BT:
+ 		prox = data[7] & 0x03;
+ 		if (prox || wacom->id[1]) {
+ 			wacom->id[1] = PAD_DEVICE_ID;
+ 			input_report_key(pad_input, BTN_0, (data[7] & 0x02));
+ 			input_report_key(pad_input, BTN_1, (data[7] & 0x01));
+ 			if (!prox)
+ 				wacom->id[1] = 0;
+ 			input_report_abs(pad_input, ABS_MISC, wacom->id[1]);
+ 			retval = 1;
+ 		}
+ 		break;
+ 	}
+ 
+ 	/* Store current battery capacity and power supply state */
+ 	if (features->type == GRAPHIRE_BT) {
+ 		rw = (data[7] >> 2 & 0x07);
+ 		battery_capacity = batcap_gr[rw];
+ 		ps_connected = rw == 7;
+ 		wacom_notify_battery(wacom, battery_capacity, ps_connected,
+ 				     ps_connected);
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  	}
  exit:
  	return retval;
@@@ -853,6 -995,51 +909,54 @@@ static int int_dist(int x1, int y1, in
  	return int_sqrt(x*x + y*y);
  }
  
++<<<<<<< HEAD
++=======
+ static void wacom_intuos_bt_process_data(struct wacom_wac *wacom,
+ 		unsigned char *data)
+ {
+ 	memcpy(wacom->data, data, 10);
+ 	wacom_intuos_irq(wacom);
+ 
+ 	input_sync(wacom->input);
+ 	if (wacom->pad_input)
+ 		input_sync(wacom->pad_input);
+ }
+ 
+ static int wacom_intuos_bt_irq(struct wacom_wac *wacom, size_t len)
+ {
+ 	unsigned char data[WACOM_PKGLEN_MAX];
+ 	int i = 1;
+ 	unsigned power_raw, battery_capacity, bat_charging, ps_connected;
+ 
+ 	memcpy(data, wacom->data, len);
+ 
+ 	switch (data[0]) {
+ 	case 0x04:
+ 		wacom_intuos_bt_process_data(wacom, data + i);
+ 		i += 10;
+ 		/* fall through */
+ 	case 0x03:
+ 		wacom_intuos_bt_process_data(wacom, data + i);
+ 		i += 10;
+ 		wacom_intuos_bt_process_data(wacom, data + i);
+ 		i += 10;
+ 		power_raw = data[i];
+ 		bat_charging = (power_raw & 0x08) ? 1 : 0;
+ 		ps_connected = (power_raw & 0x10) ? 1 : 0;
+ 		battery_capacity = batcap_i4[power_raw & 0x07];
+ 		wacom_notify_battery(wacom, battery_capacity, bat_charging,
+ 				     ps_connected);
+ 		break;
+ 	default:
+ 		dev_dbg(wacom->input->dev.parent,
+ 				"Unknown report: %d,%d size:%zu\n",
+ 				data[0], data[1], len);
+ 		return 0;
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  static int wacom_24hdt_irq(struct wacom_wac *wacom)
  {
  	struct input_dev *input = wacom->input;
@@@ -1324,20 -1917,34 +1428,49 @@@ static int wacom_wireless_irq(struct wa
  
  	connected = data[1] & 0x01;
  	if (connected) {
++<<<<<<< HEAD
 +		int pid, battery;
 +
 +		pid = get_unaligned_be16(&data[6]);
 +		battery = data[5] & 0x3f;
++=======
+ 		int pid, battery, ps_connected, charging;
+ 
+ 		if ((wacom->shared->type == INTUOSHT) &&
+ 		    wacom->shared->touch_input &&
+ 		    wacom->shared->touch_max) {
+ 			input_report_switch(wacom->shared->touch_input,
+ 					SW_MUTE_DEVICE, data[5] & 0x40);
+ 			input_sync(wacom->shared->touch_input);
+ 		}
+ 
+ 		pid = get_unaligned_be16(&data[6]);
+ 		battery = (data[5] & 0x3f) * 100 / 31;
+ 		ps_connected = !!(data[5] & 0x80);
+ 		charging = ps_connected && wacom->battery_capacity < 100;
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  		if (wacom->pid != pid) {
  			wacom->pid = pid;
  			wacom_schedule_work(wacom);
  		}
++<<<<<<< HEAD
 +		wacom->battery_capacity = battery;
++=======
+ 
+ 		if (wacom->shared->type)
+ 			wacom_notify_battery(wacom, battery, charging,
+ 					     ps_connected);
+ 
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  	} else if (wacom->pid != 0) {
  		/* disconnected while previously connected */
  		wacom->pid = 0;
  		wacom_schedule_work(wacom);
++<<<<<<< HEAD
 +		wacom->battery_capacity = 0;
++=======
+ 		wacom_notify_battery(wacom, 0, 0, 0);
++>>>>>>> 953f2c5f7163 (HID: wacom: Centralize updating of wacom_wac battery status)
  	}
  
  	return 0;
* Unmerged path drivers/hid/wacom.h
* Unmerged path drivers/hid/wacom_wac.c
