get rid of {lock,unlock}_rcu_walk()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [fs] get rid of {lock, unlock}_rcu_walk() ("Eric W. Biederman") [1247935]
Rebuild_FUZZ: 98.59%
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 8b61e74ffc6310e1d35a9b51c8463093851f8bcf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/8b61e74f.failed

those have become aliases for rcu_read_{lock,unlock}()

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 8b61e74ffc6310e1d35a9b51c8463093851f8bcf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/namei.c
diff --cc fs/namei.c
index 7b532e964b05,e5c0118ba9f8..000000000000
--- a/fs/namei.c
+++ b/fs/namei.c
@@@ -520,18 -482,6 +520,21 @@@ static bool path_connected(const struc
   * to restart the path walk from the beginning in ref-walk mode.
   */
  
++<<<<<<< HEAD
 +static inline void lock_rcu_walk(void)
 +{
 +	br_read_lock(&vfsmount_lock);
 +	rcu_read_lock();
 +}
 +
 +static inline void unlock_rcu_walk(void)
 +{
 +	rcu_read_unlock();
 +	br_read_unlock(&vfsmount_lock);
 +}
 +
++=======
++>>>>>>> 8b61e74ffc63 (get rid of {lock,unlock}_rcu_walk())
  /**
   * unlazy_walk - try to switch to ref-walk mode.
   * @nd: nameidata pathwalk data
@@@ -550,25 -500,22 +553,33 @@@ static int unlazy_walk(struct nameidat
  	BUG_ON(!(nd->flags & LOOKUP_RCU));
  
  	/*
 -	 * After legitimizing the bastards, terminate_walk()
 -	 * will do the right thing for non-RCU mode, and all our
 -	 * subsequent exit cases should rcu_read_unlock()
 -	 * before returning.  Do vfsmount first; if dentry
 -	 * can't be legitimized, just set nd->path.dentry to NULL
 -	 * and rely on dput(NULL) being a no-op.
 +	 * Get a reference to the parent first: we're
 +	 * going to make "path_put(nd->path)" valid in
 +	 * non-RCU context for "terminate_walk()".
 +	 *
 +	 * If this doesn't work, return immediately with
 +	 * RCU walking still active (and then we will do
 +	 * the RCU walk cleanup in terminate_walk()).
  	 */
 -	if (!legitimize_mnt(nd->path.mnt, nd->m_seq))
 +	if (!lockref_get_not_dead(&parent->d_lockref))
  		return -ECHILD;
 -	nd->flags &= ~LOOKUP_RCU;
  
++<<<<<<< HEAD
 +	/*
 +	 * After the mntget(), we terminate_walk() will do
 +	 * the right thing for non-RCU mode, and all our
 +	 * subsequent exit cases should unlock_rcu_walk()
 +	 * before returning.
 +	 */
 +	mntget(nd->path.mnt);
 +	nd->flags &= ~LOOKUP_RCU;
++=======
+ 	if (!lockref_get_not_dead(&parent->d_lockref)) {
+ 		nd->path.dentry = NULL;	
+ 		rcu_read_unlock();
+ 		return -ECHILD;
+ 	}
++>>>>>>> 8b61e74ffc63 (get rid of {lock,unlock}_rcu_walk())
  
  	/*
  	 * For a negative lookup, the lookup sequence point is the parents
@@@ -646,17 -593,22 +657,31 @@@ static int complete_walk(struct nameida
  		if (!(nd->flags & LOOKUP_ROOT))
  			nd->root.mnt = NULL;
  
++<<<<<<< HEAD
 +		if (unlikely(!lockref_get_not_dead(&dentry->d_lockref))) {
 +			unlock_rcu_walk();
++=======
+ 		if (!legitimize_mnt(nd->path.mnt, nd->m_seq)) {
+ 			rcu_read_unlock();
+ 			return -ECHILD;
+ 		}
+ 		if (unlikely(!lockref_get_not_dead(&dentry->d_lockref))) {
+ 			rcu_read_unlock();
+ 			mntput(nd->path.mnt);
++>>>>>>> 8b61e74ffc63 (get rid of {lock,unlock}_rcu_walk())
  			return -ECHILD;
  		}
  		if (read_seqcount_retry(&dentry->d_seq, nd->seq)) {
- 			unlock_rcu_walk();
+ 			rcu_read_unlock();
  			dput(dentry);
 -			mntput(nd->path.mnt);
  			return -ECHILD;
  		}
++<<<<<<< HEAD
 +		mntget(nd->path.mnt);
 +		unlock_rcu_walk();
++=======
+ 		rcu_read_unlock();
++>>>>>>> 8b61e74ffc63 (get rid of {lock,unlock}_rcu_walk())
  	}
  
  	if (likely(!(nd->flags & LOOKUP_JUMPED)))
@@@ -1889,8 -1852,9 +1914,8 @@@ static int path_init(int dfd, const cha
  		nd->path = nd->root;
  		nd->inode = inode;
  		if (flags & LOOKUP_RCU) {
- 			lock_rcu_walk();
+ 			rcu_read_lock();
  			nd->seq = __read_seqcount_begin(&nd->path.dentry->d_seq);
 -			nd->m_seq = read_seqbegin(&mount_lock);
  		} else {
  			path_get(&nd->path);
  		}
@@@ -1899,9 -1863,10 +1924,9 @@@
  
  	nd->root.mnt = NULL;
  
 -	nd->m_seq = read_seqbegin(&mount_lock);
  	if (*name=='/') {
  		if (flags & LOOKUP_RCU) {
- 			lock_rcu_walk();
+ 			rcu_read_lock();
  			set_root_rcu(nd);
  		} else {
  			set_root(nd);
@@@ -1942,10 -1907,10 +1967,10 @@@
  
  		nd->path = f.file->f_path;
  		if (flags & LOOKUP_RCU) {
 -			if (f.need_put)
 +			if (f.flags & FDPUT_FPUT)
  				*fp = f.file;
  			nd->seq = __read_seqcount_begin(&nd->path.dentry->d_seq);
- 			lock_rcu_walk();
+ 			rcu_read_lock();
  		} else {
  			path_get(&nd->path);
  			fdput(f);
* Unmerged path fs/namei.c
