net_sched: act: move idx_gen into struct tcf_hashinfo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: act: move idx_gen into struct tcf_hashinfo (Ivan Vecera) [1428588]
Rebuild_FUZZ: 96.08%
commit-author WANG Cong <xiyou.wangcong@gmail.com>
commit ddafd34f419546f1eb7c343178685f059c3cf127
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ddafd34f.failed

There is no need to store the index separatedly
since tcf_hashinfo is allocated statically too.

	Cc: Jamal Hadi Salim <jhs@mojatatu.com>
	Cc: David S. Miller <davem@davemloft.net>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ddafd34f419546f1eb7c343178685f059c3cf127)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/act_api.h
#	net/sched/act_api.c
#	net/sched/act_csum.c
#	net/sched/act_gact.c
#	net/sched/act_ipt.c
#	net/sched/act_mirred.c
#	net/sched/act_nat.c
#	net/sched/act_pedit.c
#	net/sched/act_police.c
#	net/sched/act_simple.c
#	net/sched/act_skbedit.c
diff --cc include/net/act_api.h
index 76c87ec832a3,268f9e6babd7..000000000000
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@@ -36,9 -36,10 +36,14 @@@ struct tcf_common 
  #define tcf_rcu		common.tcfc_rcu
  
  struct tcf_hashinfo {
 -	struct hlist_head	*htab;
 +	struct tcf_common	**htab;
  	unsigned int		hmask;
++<<<<<<< HEAD
 +	rwlock_t		*lock;
++=======
+ 	spinlock_t		lock;
+ 	u32			index;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  };
  
  static inline unsigned int tcf_hash(u32 index, unsigned int hmask)
@@@ -46,6 -47,27 +51,30 @@@
  	return index & hmask;
  }
  
++<<<<<<< HEAD
++=======
+ static inline int tcf_hashinfo_init(struct tcf_hashinfo *hf, unsigned int mask)
+ {
+ 	int i;
+ 
+ 	spin_lock_init(&hf->lock);
+ 	hf->index = 0;
+ 	hf->hmask = mask;
+ 	hf->htab = kzalloc((mask + 1) * sizeof(struct hlist_head),
+ 			   GFP_KERNEL);
+ 	if (!hf->htab)
+ 		return -ENOMEM;
+ 	for (i = 0; i < mask + 1; i++)
+ 		INIT_HLIST_HEAD(&hf->htab[i]);
+ 	return 0;
+ }
+ 
+ static inline void tcf_hashinfo_destroy(struct tcf_hashinfo *hf)
+ {
+ 	kfree(hf->htab);
+ }
+ 
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  #ifdef CONFIG_NET_CLS_ACT
  
  #define ACT_P_CREATED 1
diff --cc net/sched/act_api.c
index 564ec61575eb,74ae3ff05747..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -234,7 -226,8 +234,12 @@@ struct tcf_common *tcf_hash_create(u32 
  		p->tcfc_bindcnt = 1;
  
  	spin_lock_init(&p->tcfc_lock);
++<<<<<<< HEAD
 +	p->tcfc_index = index ? index : tcf_hash_new_index(idx_gen, hinfo);
++=======
+ 	INIT_HLIST_NODE(&p->tcfc_head);
+ 	p->tcfc_index = index ? index : tcf_hash_new_index(hinfo);
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  	p->tcfc_tm.install = jiffies;
  	p->tcfc_tm.lastuse = jiffies;
  	if (est) {
diff --cc net/sched/act_csum.c
index 11fe1a416433,ee28e1ccbbd5..000000000000
--- a/net/sched/act_csum.c
+++ b/net/sched/act_csum.c
@@@ -37,15 -37,7 +37,19 @@@
  #include <net/tc_act/tc_csum.h>
  
  #define CSUM_TAB_MASK 15
++<<<<<<< HEAD
 +static struct tcf_common *tcf_csum_ht[CSUM_TAB_MASK + 1];
 +static u32 csum_idx_gen;
 +static DEFINE_RWLOCK(csum_lock);
 +
 +static struct tcf_hashinfo csum_hash_info = {
 +	.htab	= tcf_csum_ht,
 +	.hmask	= CSUM_TAB_MASK,
 +	.lock	= &csum_lock,
 +};
++=======
+ static struct tcf_hashinfo csum_hash_info;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  
  static const struct nla_policy csum_policy[TCA_CSUM_MAX + 1] = {
  	[TCA_CSUM_PARMS] = { .len = sizeof(struct tc_csum), },
diff --cc net/sched/act_gact.c
index eb9ba60ebab4,f26e6b890cc7..000000000000
--- a/net/sched/act_gact.c
+++ b/net/sched/act_gact.c
@@@ -24,15 -24,7 +24,19 @@@
  #include <net/tc_act/tc_gact.h>
  
  #define GACT_TAB_MASK	15
++<<<<<<< HEAD
 +static struct tcf_common *tcf_gact_ht[GACT_TAB_MASK + 1];
 +static u32 gact_idx_gen;
 +static DEFINE_RWLOCK(gact_lock);
 +
 +static struct tcf_hashinfo gact_hash_info = {
 +	.htab	=	tcf_gact_ht,
 +	.hmask	=	GACT_TAB_MASK,
 +	.lock	=	&gact_lock,
 +};
++=======
+ static struct tcf_hashinfo gact_hash_info;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  
  #ifdef CONFIG_GACT_PROB
  static int gact_net_rand(struct tcf_gact *gact)
diff --cc net/sched/act_ipt.c
index 90a973aacc76,484bd19601e3..000000000000
--- a/net/sched/act_ipt.c
+++ b/net/sched/act_ipt.c
@@@ -29,15 -29,7 +29,19 @@@
  
  
  #define IPT_TAB_MASK     15
++<<<<<<< HEAD
 +static struct tcf_common *tcf_ipt_ht[IPT_TAB_MASK + 1];
 +static u32 ipt_idx_gen;
 +static DEFINE_RWLOCK(ipt_lock);
 +
 +static struct tcf_hashinfo ipt_hash_info = {
 +	.htab	=	tcf_ipt_ht,
 +	.hmask	=	IPT_TAB_MASK,
 +	.lock	=	&ipt_lock,
 +};
++=======
+ static struct tcf_hashinfo ipt_hash_info;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  
  static int ipt_init_target(struct xt_entry_target *t, char *table, unsigned int hook)
  {
diff --cc net/sched/act_mirred.c
index 3ff85aed0e67,5d05b573a622..000000000000
--- a/net/sched/act_mirred.c
+++ b/net/sched/act_mirred.c
@@@ -30,16 -30,8 +30,19 @@@
  #include <linux/if_arp.h>
  
  #define MIRRED_TAB_MASK     7
++<<<<<<< HEAD
 +static struct tcf_common *tcf_mirred_ht[MIRRED_TAB_MASK + 1];
 +static u32 mirred_idx_gen;
 +static DEFINE_RWLOCK(mirred_lock);
++=======
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  static LIST_HEAD(mirred_list);
 -static struct tcf_hashinfo mirred_hash_info;
 +
 +static struct tcf_hashinfo mirred_hash_info = {
 +	.htab	=	tcf_mirred_ht,
 +	.hmask	=	MIRRED_TAB_MASK,
 +	.lock	=	&mirred_lock,
 +};
  
  static int tcf_mirred_release(struct tcf_mirred *m, int bind)
  {
diff --cc net/sched/act_nat.c
index 76869538d028,a49fa23b49dd..000000000000
--- a/net/sched/act_nat.c
+++ b/net/sched/act_nat.c
@@@ -30,15 -30,8 +30,18 @@@
  
  
  #define NAT_TAB_MASK	15
 -
 -static struct tcf_hashinfo nat_hash_info;
++<<<<<<< HEAD
 +static struct tcf_common *tcf_nat_ht[NAT_TAB_MASK + 1];
 +static u32 nat_idx_gen;
 +static DEFINE_RWLOCK(nat_lock);
++=======
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
 +
 +static struct tcf_hashinfo nat_hash_info = {
 +	.htab	=	tcf_nat_ht,
 +	.hmask	=	NAT_TAB_MASK,
 +	.lock	=	&nat_lock,
 +};
  
  static const struct nla_policy nat_policy[TCA_NAT_MAX + 1] = {
  	[TCA_NAT_PARMS]	= { .len = sizeof(struct tc_nat) },
diff --cc net/sched/act_pedit.c
index 7aa2dcd989f8,f361e4e3c314..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -24,15 -24,8 +24,18 @@@
  #include <net/tc_act/tc_pedit.h>
  
  #define PEDIT_TAB_MASK	15
 -
 -static struct tcf_hashinfo pedit_hash_info;
++<<<<<<< HEAD
 +static struct tcf_common *tcf_pedit_ht[PEDIT_TAB_MASK + 1];
 +static u32 pedit_idx_gen;
 +static DEFINE_RWLOCK(pedit_lock);
++=======
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
 +
 +static struct tcf_hashinfo pedit_hash_info = {
 +	.htab	=	tcf_pedit_ht,
 +	.hmask	=	PEDIT_TAB_MASK,
 +	.lock	=	&pedit_lock,
 +};
  
  static const struct nla_policy pedit_policy[TCA_PEDIT_MAX + 1] = {
  	[TCA_PEDIT_PARMS]	= { .len = sizeof(struct tc_pedit) },
diff --cc net/sched/act_police.c
index 376c02554325,a719fdff575e..000000000000
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@@ -41,15 -41,7 +41,19 @@@ struct tcf_police 
  	container_of(pc, struct tcf_police, common)
  
  #define POL_TAB_MASK     15
++<<<<<<< HEAD
 +static struct tcf_common *tcf_police_ht[POL_TAB_MASK + 1];
 +static u32 police_idx_gen;
 +static DEFINE_RWLOCK(police_lock);
 +
 +static struct tcf_hashinfo police_hash_info = {
 +	.htab	=	tcf_police_ht,
 +	.hmask	=	POL_TAB_MASK,
 +	.lock	=	&police_lock,
 +};
++=======
+ static struct tcf_hashinfo police_hash_info;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  
  /* old policer structure from before tc actions */
  struct tc_police_compat {
@@@ -264,14 -248,13 +268,14 @@@ override
  	if (ret != ACT_P_CREATED)
  		return ret;
  
 -	police->tcfp_t_c = ktime_to_ns(ktime_get());
 +	police->tcfp_t_c = ktime_get_ns();
  	police->tcf_index = parm->index ? parm->index :
- 		tcf_hash_new_index(&police_idx_gen, &police_hash_info);
+ 		tcf_hash_new_index(&police_hash_info);
  	h = tcf_hash(police->tcf_index, POL_TAB_MASK);
 -	spin_lock_bh(&police_hash_info.lock);
 -	hlist_add_head(&police->tcf_head, &police_hash_info.htab[h]);
 -	spin_unlock_bh(&police_hash_info.lock);
 +	write_lock_bh(&police_lock);
 +	police->tcf_next = tcf_police_ht[h];
 +	tcf_police_ht[h] = &police->common;
 +	write_unlock_bh(&police_lock);
  
  	a->priv = police;
  	return ret;
diff --cc net/sched/act_simple.c
index f7b45ab85388,f7d5406c1fe2..000000000000
--- a/net/sched/act_simple.c
+++ b/net/sched/act_simple.c
@@@ -25,15 -25,7 +25,19 @@@
  #include <net/tc_act/tc_defact.h>
  
  #define SIMP_TAB_MASK     7
++<<<<<<< HEAD
 +static struct tcf_common *tcf_simp_ht[SIMP_TAB_MASK + 1];
 +static u32 simp_idx_gen;
 +static DEFINE_RWLOCK(simp_lock);
 +
 +static struct tcf_hashinfo simp_hash_info = {
 +	.htab	=	tcf_simp_ht,
 +	.hmask	=	SIMP_TAB_MASK,
 +	.lock	=	&simp_lock,
 +};
++=======
+ static struct tcf_hashinfo simp_hash_info;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  
  #define SIMP_MAX_DATA	32
  static int tcf_simp(struct sk_buff *skb, const struct tc_action *a,
diff --cc net/sched/act_skbedit.c
index 8fe9d25c3008,74af46127060..000000000000
--- a/net/sched/act_skbedit.c
+++ b/net/sched/act_skbedit.c
@@@ -29,15 -28,7 +29,19 @@@
  #include <net/tc_act/tc_skbedit.h>
  
  #define SKBEDIT_TAB_MASK     15
++<<<<<<< HEAD
 +static struct tcf_common *tcf_skbedit_ht[SKBEDIT_TAB_MASK + 1];
 +static u32 skbedit_idx_gen;
 +static DEFINE_RWLOCK(skbedit_lock);
 +
 +static struct tcf_hashinfo skbedit_hash_info = {
 +	.htab	=	tcf_skbedit_ht,
 +	.hmask	=	SKBEDIT_TAB_MASK,
 +	.lock	=	&skbedit_lock,
 +};
++=======
+ static struct tcf_hashinfo skbedit_hash_info;
++>>>>>>> ddafd34f4195 (net_sched: act: move idx_gen into struct tcf_hashinfo)
  
  static int tcf_skbedit(struct sk_buff *skb, const struct tc_action *a,
  		       struct tcf_result *res)
* Unmerged path include/net/act_api.h
* Unmerged path net/sched/act_api.c
* Unmerged path net/sched/act_csum.c
* Unmerged path net/sched/act_gact.c
* Unmerged path net/sched/act_ipt.c
* Unmerged path net/sched/act_mirred.c
* Unmerged path net/sched/act_nat.c
* Unmerged path net/sched/act_pedit.c
* Unmerged path net/sched/act_police.c
* Unmerged path net/sched/act_simple.c
* Unmerged path net/sched/act_skbedit.c
