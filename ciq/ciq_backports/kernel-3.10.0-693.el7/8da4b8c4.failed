lib/uuid.c: move generate_random_uuid() to uuid.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [lib] uuid.c: move generate_random_uuid() to uuid.c (Tarun Gupta) [1116064]
Rebuild_FUZZ: 95.74%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 8da4b8c48e7b43cb16d05e1dbb34ad9f73ab7efd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/8da4b8c4.failed

Let's gather the UUID related functions under one hood.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>
	Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
	Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: "Theodore Ts'o" <tytso@mit.edu>
	Cc: Al Viro <viro@zeniv.linux.org.uk>
	Cc: Jens Axboe <axboe@kernel.dk>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 8da4b8c48e7b43cb16d05e1dbb34ad9f73ab7efd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
#	fs/ext4/ioctl.c
#	fs/f2fs/file.c
diff --cc drivers/char/random.c
index d734fecb0f95,0158d3bff7e5..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -256,10 -256,11 +256,18 @@@
  #include <linux/fips.h>
  #include <linux/ptrace.h>
  #include <linux/kmemcheck.h>
++<<<<<<< HEAD
 +
 +#ifdef CONFIG_GENERIC_HARDIRQS
 +# include <linux/irq.h>
 +#endif
++=======
+ #include <linux/workqueue.h>
+ #include <linux/irq.h>
+ #include <linux/syscalls.h>
+ #include <linux/completion.h>
+ #include <linux/uuid.h>
++>>>>>>> 8da4b8c48e7b (lib/uuid.c: move generate_random_uuid() to uuid.c)
  
  #include <asm/processor.h>
  #include <asm/uaccess.h>
@@@ -1415,25 -1599,28 +1423,50 @@@ const struct file_operations urandom_fo
  	.llseek = noop_llseek,
  };
  
++<<<<<<< HEAD
 +/***************************************************************
 + * Random UUID interface
 + *
 + * Used here for a Boot ID, but can be useful for other kernel
 + * drivers.
 + ***************************************************************/
 +
 +/*
 + * Generate random UUID
 + */
 +void generate_random_uuid(unsigned char uuid_out[16])
 +{
 +	get_random_bytes(uuid_out, 16);
 +	/* Set UUID version to 4 --- truly random generation */
 +	uuid_out[6] = (uuid_out[6] & 0x0F) | 0x40;
 +	/* Set the UUID variant to DCE */
 +	uuid_out[8] = (uuid_out[8] & 0x3F) | 0x80;
 +}
 +EXPORT_SYMBOL(generate_random_uuid);
++=======
+ SYSCALL_DEFINE3(getrandom, char __user *, buf, size_t, count,
+ 		unsigned int, flags)
+ {
+ 	if (flags & ~(GRND_NONBLOCK|GRND_RANDOM))
+ 		return -EINVAL;
+ 
+ 	if (count > INT_MAX)
+ 		count = INT_MAX;
+ 
+ 	if (flags & GRND_RANDOM)
+ 		return _random_read(flags & GRND_NONBLOCK, buf, count);
+ 
+ 	if (unlikely(nonblocking_pool.initialized == 0)) {
+ 		if (flags & GRND_NONBLOCK)
+ 			return -EAGAIN;
+ 		wait_event_interruptible(urandom_init_wait,
+ 					 nonblocking_pool.initialized);
+ 		if (signal_pending(current))
+ 			return -ERESTARTSYS;
+ 	}
+ 	return urandom_read(NULL, buf, count, NULL);
+ }
++>>>>>>> 8da4b8c48e7b (lib/uuid.c: move generate_random_uuid() to uuid.c)
  
  /********************************************************************
   *
diff --cc fs/ext4/ioctl.c
index 70c66d3c5bee,7497f50cb293..000000000000
--- a/fs/ext4/ioctl.c
+++ b/fs/ext4/ioctl.c
@@@ -14,6 -13,8 +14,11 @@@
  #include <linux/compat.h>
  #include <linux/mount.h>
  #include <linux/file.h>
++<<<<<<< HEAD
++=======
+ #include <linux/quotaops.h>
+ #include <linux/uuid.h>
++>>>>>>> 8da4b8c48e7b (lib/uuid.c: move generate_random_uuid() to uuid.c)
  #include <asm/uaccess.h>
  #include "ext4_jbd2.h"
  #include "ext4.h"
diff --cc fs/f2fs/file.c
index 1cae864f8dfc,c6b14951bef3..000000000000
--- a/fs/f2fs/file.c
+++ b/fs/f2fs/file.c
@@@ -19,6 -19,8 +19,11 @@@
  #include <linux/compat.h>
  #include <linux/uaccess.h>
  #include <linux/mount.h>
++<<<<<<< HEAD
++=======
+ #include <linux/pagevec.h>
+ #include <linux/uuid.h>
++>>>>>>> 8da4b8c48e7b (lib/uuid.c: move generate_random_uuid() to uuid.c)
  
  #include "f2fs.h"
  #include "node.h"
* Unmerged path drivers/char/random.c
diff --git a/fs/btrfs/volumes.c b/fs/btrfs/volumes.c
index a85624a8d07e..e0b1607d00e8 100644
--- a/fs/btrfs/volumes.c
+++ b/fs/btrfs/volumes.c
@@ -20,13 +20,13 @@
 #include <linux/slab.h>
 #include <linux/buffer_head.h>
 #include <linux/blkdev.h>
-#include <linux/random.h>
 #include <linux/iocontext.h>
 #include <linux/capability.h>
 #include <linux/ratelimit.h>
 #include <linux/kthread.h>
 #include <linux/raid/pq.h>
 #include <linux/semaphore.h>
+#include <linux/uuid.h>
 #include <asm/div64.h>
 #include "ctree.h"
 #include "extent_map.h"
* Unmerged path fs/ext4/ioctl.c
* Unmerged path fs/f2fs/file.c
diff --git a/fs/reiserfs/objectid.c b/fs/reiserfs/objectid.c
index f732d6a5251d..8d3ee2adb420 100644
--- a/fs/reiserfs/objectid.c
+++ b/fs/reiserfs/objectid.c
@@ -3,8 +3,8 @@
  */
 
 #include <linux/string.h>
-#include <linux/random.h>
 #include <linux/time.h>
+#include <linux/uuid.h>
 #include "reiserfs.h"
 
 // find where objectid map starts
diff --git a/fs/ubifs/sb.c b/fs/ubifs/sb.c
index 4c37607a958e..5011da6b3c50 100644
--- a/fs/ubifs/sb.c
+++ b/fs/ubifs/sb.c
@@ -28,8 +28,8 @@
 
 #include "ubifs.h"
 #include <linux/slab.h>
-#include <linux/random.h>
 #include <linux/math64.h>
+#include <linux/uuid.h>
 
 /*
  * Default journal size in logical eraseblocks as a percent of total
diff --git a/include/linux/random.h b/include/linux/random.h
index 1cfce0e24dbd..4aa4324684c4 100644
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@ -15,7 +15,6 @@ extern void add_interrupt_randomness(int irq, int irq_flags);
 
 extern void get_random_bytes(void *buf, int nbytes);
 extern void get_random_bytes_arch(void *buf, int nbytes);
-void generate_random_uuid(unsigned char uuid_out[16]);
 extern int random_int_secret_init(void);
 
 #ifndef MODULE
diff --git a/include/linux/uuid.h b/include/linux/uuid.h
index 6df2509033d7..91c2b6d9cbb7 100644
--- a/include/linux/uuid.h
+++ b/include/linux/uuid.h
@@ -33,6 +33,8 @@ static inline int uuid_be_cmp(const uuid_be u1, const uuid_be u2)
 	return memcmp(&u1, &u2, sizeof(uuid_be));
 }
 
+void generate_random_uuid(unsigned char uuid[16]);
+
 extern void uuid_le_gen(uuid_le *u);
 extern void uuid_be_gen(uuid_be *u);
 
diff --git a/lib/uuid.c b/lib/uuid.c
index 398821e4dce1..6c81c0b0467e 100644
--- a/lib/uuid.c
+++ b/lib/uuid.c
@@ -23,6 +23,26 @@
 #include <linux/uuid.h>
 #include <linux/random.h>
 
+/***************************************************************
+ * Random UUID interface
+ *
+ * Used here for a Boot ID, but can be useful for other kernel
+ * drivers.
+ ***************************************************************/
+
+/*
+ * Generate random UUID
+ */
+void generate_random_uuid(unsigned char uuid[16])
+{
+	get_random_bytes(uuid, 16);
+	/* Set UUID version to 4 --- truly random generation */
+	uuid[6] = (uuid[6] & 0x0F) | 0x40;
+	/* Set the UUID variant to DCE */
+	uuid[8] = (uuid[8] & 0x3F) | 0x80;
+}
+EXPORT_SYMBOL(generate_random_uuid);
+
 static void __uuid_gen_common(__u8 b[16])
 {
 	prandom_bytes(b, 16);
