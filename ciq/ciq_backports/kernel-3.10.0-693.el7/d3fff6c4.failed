net: add netdev_lockdep_set_classes() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] add netdev_lockdep_set_classes() helper (Ivan Vecera) [1382040]
Rebuild_FUZZ: 93.98%
commit-author Eric Dumazet <edumazet@google.com>
commit d3fff6c443fe8f8a5ef2bdcea45e2ff39db948c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d3fff6c4.failed

It is time to add netdev_lockdep_set_classes() helper
so that lockdep annotations per device type are easier to manage.

This removes a lot of copies and missing annotations.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d3fff6c443fe8f8a5ef2bdcea45e2ff39db948c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/ppp/ppp_generic.c
#	drivers/net/team/team.c
#	net/bluetooth/6lowpan.c
#	net/ieee802154/6lowpan/core.c
#	net/l2tp/l2tp_eth.c
diff --cc drivers/net/bonding/bond_main.c
index ce8e9750aae0,90157e20357e..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -4549,26 -4607,6 +4549,29 @@@ static int bond_check_params(struct bon
  	return 0;
  }
  
++<<<<<<< HEAD
 +static struct lock_class_key bonding_netdev_xmit_lock_key;
 +static struct lock_class_key bonding_netdev_addr_lock_key;
 +static struct lock_class_key bonding_tx_busylock_key;
 +
 +static void bond_set_lockdep_class_one(struct net_device *dev,
 +				       struct netdev_queue *txq,
 +				       void *_unused)
 +{
 +	lockdep_set_class(&txq->_xmit_lock,
 +			  &bonding_netdev_xmit_lock_key);
 +}
 +
 +static void bond_set_lockdep_class(struct net_device *dev)
 +{
 +	lockdep_set_class(&dev->addr_list_lock,
 +			  &bonding_netdev_addr_lock_key);
 +	netdev_for_each_tx_queue(dev, bond_set_lockdep_class_one, NULL);
 +	dev->qdisc_tx_busylock = &bonding_tx_busylock_key;
 +}
 +
++=======
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  /* Called from registration process */
  static int bond_init(struct net_device *bond_dev)
  {
diff --cc drivers/net/ppp/ppp_generic.c
index 8b962d74ffd6,17953ab15000..000000000000
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@@ -1058,10 -1312,9 +1058,16 @@@ ppp_get_stats64(struct net_device *dev
  	return stats64;
  }
  
++<<<<<<< HEAD
 +static struct lock_class_key ppp_tx_busylock;
 +static int ppp_dev_init(struct net_device *dev)
 +{
 +	dev->qdisc_tx_busylock = &ppp_tx_busylock;
++=======
+ static int ppp_dev_init(struct net_device *dev)
+ {
+ 	netdev_lockdep_set_classes(dev);
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  	return 0;
  }
  
diff --cc drivers/net/team/team.c
index 677631ed24ab,0a1bb8387d96..000000000000
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@@ -1576,23 -1574,6 +1576,26 @@@ static const struct team_option team_op
  	},
  };
  
++<<<<<<< HEAD
 +static struct lock_class_key team_netdev_xmit_lock_key;
 +static struct lock_class_key team_netdev_addr_lock_key;
 +static struct lock_class_key team_tx_busylock_key;
 +
 +static void team_set_lockdep_class_one(struct net_device *dev,
 +				       struct netdev_queue *txq,
 +				       void *unused)
 +{
 +	lockdep_set_class(&txq->_xmit_lock, &team_netdev_xmit_lock_key);
 +}
 +
 +static void team_set_lockdep_class(struct net_device *dev)
 +{
 +	lockdep_set_class(&dev->addr_list_lock, &team_netdev_addr_lock_key);
 +	netdev_for_each_tx_queue(dev, team_set_lockdep_class_one, NULL);
 +	dev->qdisc_tx_busylock = &team_tx_busylock_key;
 +}
++=======
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  
  static int team_init(struct net_device *dev)
  {
diff --cc net/bluetooth/6lowpan.c
index 952bb59fc6cb,d020299baba4..000000000000
--- a/net/bluetooth/6lowpan.c
+++ b/net/bluetooth/6lowpan.c
@@@ -624,20 -627,9 +624,26 @@@ static netdev_tx_t bt_xmit(struct sk_bu
  	return err < 0 ? NET_XMIT_DROP : err;
  }
  
++<<<<<<< HEAD
 +static struct lock_class_key bt_tx_busylock;
 +static struct lock_class_key bt_netdev_xmit_lock_key;
 +
 +static void bt_set_lockdep_class_one(struct net_device *dev,
 +				     struct netdev_queue *txq,
 +				     void *_unused)
 +{
 +	lockdep_set_class(&txq->_xmit_lock, &bt_netdev_xmit_lock_key);
 +}
 +
 +static int bt_dev_init(struct net_device *dev)
 +{
 +	netdev_for_each_tx_queue(dev, bt_set_lockdep_class_one, NULL);
 +	dev->qdisc_tx_busylock = &bt_tx_busylock;
++=======
+ static int bt_dev_init(struct net_device *dev)
+ {
+ 	netdev_lockdep_set_classes(dev);
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  
  	return 0;
  }
diff --cc net/ieee802154/6lowpan/core.c
index 307f5f9dec5c,4e2b30894224..000000000000
--- a/net/ieee802154/6lowpan/core.c
+++ b/net/ieee802154/6lowpan/core.c
@@@ -58,21 -58,10 +58,28 @@@ static struct header_ops lowpan_header_
  	.create	= lowpan_header_create,
  };
  
++<<<<<<< HEAD
 +static struct lock_class_key lowpan_tx_busylock;
 +static struct lock_class_key lowpan_netdev_xmit_lock_key;
 +
 +static void lowpan_set_lockdep_class_one(struct net_device *ldev,
 +					 struct netdev_queue *txq,
 +					 void *_unused)
 +{
 +	lockdep_set_class(&txq->_xmit_lock,
 +			  &lowpan_netdev_xmit_lock_key);
 +}
 +
 +static int lowpan_dev_init(struct net_device *ldev)
 +{
 +	netdev_for_each_tx_queue(ldev, lowpan_set_lockdep_class_one, NULL);
 +	ldev->qdisc_tx_busylock = &lowpan_tx_busylock;
++=======
+ static int lowpan_dev_init(struct net_device *ldev)
+ {
+ 	netdev_lockdep_set_classes(ldev);
+ 
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  	return 0;
  }
  
diff --cc net/l2tp/l2tp_eth.c
index 76125c57ee6d,57fc5a46ce06..000000000000
--- a/net/l2tp/l2tp_eth.c
+++ b/net/l2tp/l2tp_eth.c
@@@ -67,15 -67,15 +67,24 @@@ static inline struct l2tp_eth_net *l2tp
  	return net_generic(net, l2tp_eth_net_id);
  }
  
++<<<<<<< HEAD
 +static struct lock_class_key l2tp_eth_tx_busylock;
++=======
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  static int l2tp_eth_dev_init(struct net_device *dev)
  {
  	struct l2tp_eth *priv = netdev_priv(dev);
  
  	priv->dev = dev;
  	eth_hw_addr_random(dev);
++<<<<<<< HEAD
 +	memset(&dev->broadcast[0], 0xff, 6);
 +	dev->qdisc_tx_busylock = &l2tp_eth_tx_busylock;
++=======
+ 	eth_broadcast_addr(dev->broadcast);
+ 	netdev_lockdep_set_classes(dev);
+ 
++>>>>>>> d3fff6c443fe (net: add netdev_lockdep_set_classes() helper)
  	return 0;
  }
  
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/ppp/ppp_generic.c
* Unmerged path drivers/net/team/team.c
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 0c457a76a538..ec2f4cb87543 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1890,6 +1890,23 @@ static inline void netdev_for_each_tx_queue(struct net_device *dev,
 		f(dev, &dev->_tx[i], arg);
 }
 
+#define netdev_lockdep_set_classes(dev)				\
+{								\
+	static struct lock_class_key qdisc_tx_busylock_key;	\
+	static struct lock_class_key qdisc_running_key;		\
+	static struct lock_class_key qdisc_xmit_lock_key;	\
+	static struct lock_class_key dev_addr_list_lock_key;	\
+	unsigned int i;						\
+								\
+	(dev)->qdisc_tx_busylock = &qdisc_tx_busylock_key;	\
+	(dev)->qdisc_running_key = &qdisc_running_key;		\
+	lockdep_set_class(&(dev)->addr_list_lock,		\
+			  &dev_addr_list_lock_key); 		\
+	for (i = 0; i < (dev)->num_tx_queues; i++)		\
+		lockdep_set_class(&(dev)->_tx[i]._xmit_lock,	\
+				  &qdisc_xmit_lock_key);	\
+}
+
 struct netdev_queue *netdev_pick_tx(struct net_device *dev,
 				    struct sk_buff *skb,
 				    void *accel_priv);
* Unmerged path net/bluetooth/6lowpan.c
* Unmerged path net/ieee802154/6lowpan/core.c
* Unmerged path net/l2tp/l2tp_eth.c
