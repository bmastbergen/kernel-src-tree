sched/core: Panic on scheduling while atomic bugs if kernel.panic_on_warn is set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Daniel Bristot de Oliveira <bristot@redhat.com>
commit 748c7201e622d1c24abb4f85072d2e74d12f295f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/748c7201.failed

Currently, a schedule while atomic error prints the stack trace to the
kernel log and the system continue running.

Although it is possible to collect the kernel log messages and analyze
it, often more information are needed. Furthermore, keep the system
running is not always the best choice. For example, when the preempt
count underflows the system will not stop to complain about scheduling
while atomic, so the kernel log can wrap around overwriting the first
stack trace, tuning the analysis even more challenging.

This patch uses the kernel.panic_on_warn sysctl to help out on these
more complex situations.

When kernel.panic_on_warn is set to 1, the kernel will panic() in the
schedule while atomic detection.

The default value of the sysctl is 0, maintaining the current behavior.

	Signed-off-by: Daniel Bristot de Oliveira <bristot@redhat.com>
	Reviewed-by: Luis Claudio R. Goncalves <lgoncalv@redhat.com>
	Cc: Christian Borntraeger <borntraeger@de.ibm.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Luis Claudio R. Goncalves <lgoncalv@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/e8f7b80f353aa22c63bd8557208163989af8493d.1464983675.git.bristot@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 748c7201e622d1c24abb4f85072d2e74d12f295f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 98e40872a037,4e9617a7e7d9..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -3288,6 -3161,16 +3288,19 @@@ static noinline void __schedule_bug(str
  	print_modules();
  	if (irqs_disabled())
  		print_irqtrace_events(prev);
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_DEBUG_PREEMPT
+ 	if (in_atomic_preempt_off()) {
+ 		pr_err("Preemption disabled at:");
+ 		print_ip_sym(current->preempt_disable_ip);
+ 		pr_cont("\n");
+ 	}
+ #endif
+ 	if (panic_on_warn)
+ 		panic("scheduling while atomic\n");
+ 
++>>>>>>> 748c7201e622 (sched/core: Panic on scheduling while atomic bugs if kernel.panic_on_warn is set)
  	dump_stack();
  	add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
  }
* Unmerged path kernel/sched/core.c
