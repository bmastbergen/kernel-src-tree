HID: wacom: EKR: have one array of struct remotes instead of many arrays

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: ekr: have one array of struct remotes instead of many arrays (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 96.40%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit e7749f6e5f9d33da189f7bc7d757349ad4716f00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e7749f6e.failed

No functional changes, just a prep patch for the one after.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit e7749f6e5f9d33da189f7bc7d757349ad4716f00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom.h
#	drivers/hid/wacom_sys.c
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom.h
index 87d2c48e3adc,6b8df67b3653..000000000000
--- a/drivers/hid/wacom.h
+++ b/drivers/hid/wacom.h
@@@ -109,18 -106,38 +109,41 @@@ MODULE_LICENSE(DRIVER_LICENSE)
  #define USB_VENDOR_ID_WACOM	0x056a
  #define USB_VENDOR_ID_LENOVO	0x17ef
  
++<<<<<<< HEAD
++=======
+ enum wacom_worker {
+ 	WACOM_WORKER_WIRELESS,
+ 	WACOM_WORKER_BATTERY,
+ 	WACOM_WORKER_REMOTE,
+ };
+ 
+ struct wacom_group_leds {
+ 	u8 select; /* status led selector (0..3) */
+ };
+ 
+ struct wacom_remote {
+ 	spinlock_t remote_lock;
+ 	struct kfifo remote_fifo;
+ 	struct kobject *remote_dir;
+ 	struct {
+ 		struct attribute_group group;
+ 		u32 serial;
+ 	} remotes[WACOM_MAX_REMOTES];
+ };
+ 
++>>>>>>> e7749f6e5f9d (HID: wacom: EKR: have one array of struct remotes instead of many arrays)
  struct wacom {
 +	dma_addr_t data_dma;
  	struct usb_device *usbdev;
  	struct usb_interface *intf;
 +	struct urb *irq;
  	struct wacom_wac wacom_wac;
 -	struct hid_device *hdev;
  	struct mutex lock;
 -	struct work_struct wireless_work;
 -	struct work_struct battery_work;
 -	struct work_struct remote_work;
 -	struct wacom_remote *remote;
 -	struct wacom_leds {
 -		struct wacom_group_leds *groups;
 +	struct work_struct work;
 +	bool open;
 +	char phys[32];
 +	struct wacom_led {
 +		u8 select[2]; /* status led selector (0..3) */
  		u8 llv;       /* status led brightness no button (1..127) */
  		u8 hlv;       /* status led brightness button pressed (1..127) */
  		u8 img_lum;   /* OLED matrix display brightness */
diff --cc drivers/hid/wacom_sys.c
index e75b5002a526,c3b269237af5..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1127,126 -1227,321 +1127,356 @@@ static void wacom_destroy_battery(struc
  	}
  }
  
++<<<<<<< HEAD
 +static int wacom_register_input(struct wacom *wacom)
++=======
+ static ssize_t wacom_show_speed(struct device *dev,
+ 				struct device_attribute
+ 				*attr, char *buf)
+ {
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 
+ 	return snprintf(buf, PAGE_SIZE, "%i\n", wacom->wacom_wac.bt_high_speed);
+ }
+ 
+ static ssize_t wacom_store_speed(struct device *dev,
+ 				struct device_attribute *attr,
+ 				const char *buf, size_t count)
+ {
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	u8 new_speed;
+ 
+ 	if (kstrtou8(buf, 0, &new_speed))
+ 		return -EINVAL;
+ 
+ 	if (new_speed != 0 && new_speed != 1)
+ 		return -EINVAL;
+ 
+ 	wacom_bt_query_tablet_data(hdev, new_speed, &wacom->wacom_wac.features);
+ 
+ 	return count;
+ }
+ 
+ static DEVICE_ATTR(speed, DEV_ATTR_RW_PERM,
+ 		wacom_show_speed, wacom_store_speed);
+ 
+ 
+ static ssize_t wacom_show_remote_mode(struct kobject *kobj,
+ 				      struct kobj_attribute *kattr,
+ 				      char *buf, int index)
+ {
+ 	struct device *dev = kobj_to_dev(kobj->parent);
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	u8 mode;
+ 
+ 	mode = wacom->led.groups[index].select;
+ 	if (mode >= 0 && mode < 3)
+ 		return snprintf(buf, PAGE_SIZE, "%d\n", mode);
+ 	else
+ 		return snprintf(buf, PAGE_SIZE, "%d\n", -1);
+ }
+ 
+ #define DEVICE_EKR_ATTR_GROUP(SET_ID)					\
+ static ssize_t wacom_show_remote##SET_ID##_mode(struct kobject *kobj,	\
+ 			       struct kobj_attribute *kattr, char *buf)	\
+ {									\
+ 	return wacom_show_remote_mode(kobj, kattr, buf, SET_ID);	\
+ }									\
+ static struct kobj_attribute remote##SET_ID##_mode_attr = {		\
+ 	.attr = {.name = "remote_mode",					\
+ 		.mode = DEV_ATTR_RO_PERM},				\
+ 	.show = wacom_show_remote##SET_ID##_mode,			\
+ };									\
+ static struct attribute *remote##SET_ID##_serial_attrs[] = {		\
+ 	&remote##SET_ID##_mode_attr.attr,				\
+ 	NULL								\
+ };									\
+ static struct attribute_group remote##SET_ID##_serial_group = {		\
+ 	.name = NULL,							\
+ 	.attrs = remote##SET_ID##_serial_attrs,				\
+ }
+ 
+ DEVICE_EKR_ATTR_GROUP(0);
+ DEVICE_EKR_ATTR_GROUP(1);
+ DEVICE_EKR_ATTR_GROUP(2);
+ DEVICE_EKR_ATTR_GROUP(3);
+ DEVICE_EKR_ATTR_GROUP(4);
+ 
+ static int wacom_remote_create_attr_group(struct wacom *wacom, __u32 serial,
+ 					  int index)
+ {
+ 	int error = 0;
+ 	struct wacom_remote *remote = wacom->remote;
+ 
+ 	remote->remotes[index].group.name = devm_kasprintf(&wacom->hdev->dev,
+ 							  GFP_KERNEL,
+ 							  "%d", serial);
+ 	if (!remote->remotes[index].group.name)
+ 		return -ENOMEM;
+ 
+ 	error = __wacom_devm_sysfs_create_group(wacom, remote->remote_dir,
+ 						&remote->remotes[index].group);
+ 	if (error) {
+ 		remote->remotes[index].group.name = NULL;
+ 		hid_err(wacom->hdev,
+ 			"cannot create sysfs group err: %d\n", error);
+ 		return error;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int wacom_cmd_unpair_remote(struct wacom *wacom, unsigned char selector)
+ {
+ 	const size_t buf_size = 2;
+ 	unsigned char *buf;
+ 	int retval;
+ 
+ 	buf = kzalloc(buf_size, GFP_KERNEL);
+ 	if (!buf)
+ 		return -ENOMEM;
+ 
+ 	buf[0] = WAC_CMD_DELETE_PAIRING;
+ 	buf[1] = selector;
+ 
+ 	retval = wacom_set_report(wacom->hdev, HID_OUTPUT_REPORT, buf,
+ 				  buf_size, WAC_CMD_RETRIES);
+ 	kfree(buf);
+ 
+ 	return retval;
+ }
+ 
+ static ssize_t wacom_store_unpair_remote(struct kobject *kobj,
+ 					 struct kobj_attribute *attr,
+ 					 const char *buf, size_t count)
+ {
+ 	unsigned char selector = 0;
+ 	struct device *dev = kobj_to_dev(kobj->parent);
+ 	struct hid_device *hdev = to_hid_device(dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	int err;
+ 
+ 	if (!strncmp(buf, "*\n", 2)) {
+ 		selector = WAC_CMD_UNPAIR_ALL;
+ 	} else {
+ 		hid_info(wacom->hdev, "remote: unrecognized unpair code: %s\n",
+ 			 buf);
+ 		return -1;
+ 	}
+ 
+ 	mutex_lock(&wacom->lock);
+ 
+ 	err = wacom_cmd_unpair_remote(wacom, selector);
+ 	mutex_unlock(&wacom->lock);
+ 
+ 	return err < 0 ? err : count;
+ }
+ 
+ static struct kobj_attribute unpair_remote_attr = {
+ 	.attr = {.name = "unpair_remote", .mode = 0200},
+ 	.store = wacom_store_unpair_remote,
+ };
+ 
+ static const struct attribute *remote_unpair_attrs[] = {
+ 	&unpair_remote_attr.attr,
+ 	NULL
+ };
+ 
+ static void wacom_remotes_destroy(void *data)
+ {
+ 	struct wacom *wacom = data;
+ 	struct wacom_remote *remote = wacom->remote;
+ 
+ 	if (!remote)
+ 		return;
+ 
+ 	kobject_put(remote->remote_dir);
+ 	kfifo_free(&remote->remote_fifo);
+ 	wacom->remote = NULL;
+ }
+ 
+ static int wacom_initialize_remotes(struct wacom *wacom)
+ {
+ 	int error = 0;
+ 	struct wacom_remote *remote;
+ 	int i;
+ 
+ 	if (wacom->wacom_wac.features.type != REMOTE)
+ 		return 0;
+ 
+ 	remote = devm_kzalloc(&wacom->hdev->dev, sizeof(*wacom->remote),
+ 			      GFP_KERNEL);
+ 	if (!remote)
+ 		return -ENOMEM;
+ 
+ 	wacom->remote = remote;
+ 
+ 	spin_lock_init(&remote->remote_lock);
+ 
+ 	error = kfifo_alloc(&remote->remote_fifo,
+ 			5 * sizeof(struct wacom_remote_data),
+ 			GFP_KERNEL);
+ 	if (error) {
+ 		hid_err(wacom->hdev, "failed allocating remote_fifo\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	remote->remotes[0].group = remote0_serial_group;
+ 	remote->remotes[1].group = remote1_serial_group;
+ 	remote->remotes[2].group = remote2_serial_group;
+ 	remote->remotes[3].group = remote3_serial_group;
+ 	remote->remotes[4].group = remote4_serial_group;
+ 
+ 	remote->remote_dir = kobject_create_and_add("wacom_remote",
+ 						    &wacom->hdev->dev.kobj);
+ 	if (!remote->remote_dir)
+ 		return -ENOMEM;
+ 
+ 	error = sysfs_create_files(remote->remote_dir, remote_unpair_attrs);
+ 
+ 	if (error) {
+ 		hid_err(wacom->hdev,
+ 			"cannot create sysfs group err: %d\n", error);
+ 		return error;
+ 	}
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		wacom->led.groups[i].select = WACOM_STATUS_UNKNOWN;
+ 		remote->remotes[i].serial = 0;
+ 	}
+ 
+ 	error = devm_add_action_or_reset(&wacom->hdev->dev,
+ 					 wacom_remotes_destroy, wacom);
+ 	if (error)
+ 		return error;
+ 
+ 	return 0;
+ }
+ 
+ static struct input_dev *wacom_allocate_input(struct wacom *wacom)
++>>>>>>> e7749f6e5f9d (HID: wacom: EKR: have one array of struct remotes instead of many arrays)
  {
  	struct input_dev *input_dev;
 -	struct hid_device *hdev = wacom->hdev;
 +	struct usb_interface *intf = wacom->intf;
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 +	int error;
  
 -	input_dev = devm_input_allocate_device(&hdev->dev);
 -	if (!input_dev)
 -		return NULL;
 +	input_dev = input_allocate_device();
 +	if (!input_dev) {
 +		error = -ENOMEM;
 +		goto fail1;
 +	}
  
 -	input_dev->name = wacom_wac->features.name;
 -	input_dev->phys = hdev->phys;
 -	input_dev->dev.parent = &hdev->dev;
 +	input_dev->name = wacom_wac->name;
 +	input_dev->dev.parent = &intf->dev;
  	input_dev->open = wacom_open;
  	input_dev->close = wacom_close;
 -	input_dev->uniq = hdev->uniq;
 -	input_dev->id.bustype = hdev->bus;
 -	input_dev->id.vendor  = hdev->vendor;
 -	input_dev->id.product = wacom_wac->pid ? wacom_wac->pid : hdev->product;
 -	input_dev->id.version = hdev->version;
 +	usb_to_input_id(dev, &input_dev->id);
  	input_set_drvdata(input_dev, wacom);
  
 -	return input_dev;
 -}
 -
 -static int wacom_allocate_inputs(struct wacom *wacom)
 -{
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -
 -	wacom_wac->pen_input = wacom_allocate_input(wacom);
 -	wacom_wac->touch_input = wacom_allocate_input(wacom);
 -	wacom_wac->pad_input = wacom_allocate_input(wacom);
 -	if (!wacom_wac->pen_input ||
 -	    !wacom_wac->touch_input ||
 -	    !wacom_wac->pad_input)
 -		return -ENOMEM;
 +	wacom_wac->input = input_dev;
 +	error = wacom_setup_input_capabilities(input_dev, wacom_wac);
 +	if (error)
 +		goto fail1;
  
 -	wacom_wac->pen_input->name = wacom_wac->pen_name;
 -	wacom_wac->touch_input->name = wacom_wac->touch_name;
 -	wacom_wac->pad_input->name = wacom_wac->pad_name;
 +	error = input_register_device(input_dev);
 +	if (error)
 +		goto fail2;
  
  	return 0;
 +
 +fail2:
 +	input_free_device(input_dev);
 +	wacom_wac->input = NULL;
 +fail1:
 +	return error;
  }
  
 -static int wacom_register_inputs(struct wacom *wacom)
 +static void wacom_wireless_work(struct work_struct *work)
  {
 -	struct input_dev *pen_input_dev, *touch_input_dev, *pad_input_dev;
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -	int error = 0;
 +	struct wacom *wacom = container_of(work, struct wacom, work);
 +	struct usb_device *usbdev = wacom->usbdev;
 +	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
 +	struct wacom *wacom1, *wacom2;
 +	struct wacom_wac *wacom_wac1, *wacom_wac2;
 +	int error;
  
 -	pen_input_dev = wacom_wac->pen_input;
 -	touch_input_dev = wacom_wac->touch_input;
 -	pad_input_dev = wacom_wac->pad_input;
 +	/*
 +	 * Regardless if this is a disconnect or a new tablet,
 +	 * remove any existing input and battery devices.
 +	 */
  
 -	if (!pen_input_dev || !touch_input_dev || !pad_input_dev)
 -		return -EINVAL;
 +	wacom_destroy_battery(wacom);
  
 -	error = wacom_setup_pen_input_capabilities(pen_input_dev, wacom_wac);
 -	if (error) {
 -		/* no pen in use on this interface */
 -		input_free_device(pen_input_dev);
 -		wacom_wac->pen_input = NULL;
 -		pen_input_dev = NULL;
 -	} else {
 -		error = input_register_device(pen_input_dev);
 -		if (error)
 -			goto fail;
 -	}
 +	/* Stylus interface */
 +	wacom1 = usb_get_intfdata(usbdev->config->interface[1]);
 +	wacom_wac1 = &(wacom1->wacom_wac);
 +	if (wacom_wac1->input)
 +		input_unregister_device(wacom_wac1->input);
 +	wacom_wac1->input = NULL;
  
 -	error = wacom_setup_touch_input_capabilities(touch_input_dev, wacom_wac);
 -	if (error) {
 -		/* no touch in use on this interface */
 -		input_free_device(touch_input_dev);
 -		wacom_wac->touch_input = NULL;
 -		touch_input_dev = NULL;
 +	/* Touch interface */
 +	wacom2 = usb_get_intfdata(usbdev->config->interface[2]);
 +	wacom_wac2 = &(wacom2->wacom_wac);
 +	if (wacom_wac2->input)
 +		input_unregister_device(wacom_wac2->input);
 +	wacom_wac2->input = NULL;
 +
 +	if (wacom_wac->pid == 0) {
 +		dev_info(&wacom->intf->dev, "wireless tablet disconnected\n");
  	} else {
 -		error = input_register_device(touch_input_dev);
 +		const struct usb_device_id *id = wacom_ids;
 +
 +		dev_info(&wacom->intf->dev,
 +			 "wireless tablet connected with PID %x\n",
 +			 wacom_wac->pid);
 +
 +		while (id->match_flags) {
 +			if (id->idVendor == USB_VENDOR_ID_WACOM &&
 +			    id->idProduct == wacom_wac->pid)
 +				break;
 +			id++;
 +		}
 +
 +		if (!id->match_flags) {
 +			dev_info(&wacom->intf->dev,
 +				 "ignoring unknown PID.\n");
 +			return;
 +		}
 +
 +		/* Stylus interface */
 +		wacom_wac1->features =
 +			*((struct wacom_features *)id->driver_info);
 +		wacom_wac1->features.device_type = BTN_TOOL_PEN;
 +		snprintf(wacom_wac1->name, WACOM_NAME_MAX, "%s (WL) Pen",
 +			 wacom_wac1->features.name);
 +		error = wacom_register_input(wacom1);
  		if (error)
  			goto fail;
 -	}
  
 -	error = wacom_setup_pad_input_capabilities(pad_input_dev, wacom_wac);
 -	if (error) {
 -		/* no pad in use on this interface */
 -		input_free_device(pad_input_dev);
 -		wacom_wac->pad_input = NULL;
 -		pad_input_dev = NULL;
 -	} else {
 -		error = input_register_device(pad_input_dev);
 +		/* Touch interface */
 +		if (wacom_wac1->features.touch_max) {
 +			wacom_wac2->features =
 +				*((struct wacom_features *)id->driver_info);
 +			wacom_wac2->features.pktlen = WACOM_PKGLEN_BBTOUCH3;
 +			wacom_wac2->features.device_type = BTN_TOOL_FINGER;
 +			wacom_wac2->features.x_max = wacom_wac2->features.y_max = 4096;
 +			if (wacom_wac2->features.touch_max)
 +				snprintf(wacom_wac2->name, WACOM_NAME_MAX,
 +					 "%s (WL) Finger",wacom_wac2->features.name);
 +			else
 +				snprintf(wacom_wac2->name, WACOM_NAME_MAX,
 +					 "%s (WL) Pad",wacom_wac2->features.name);
 +			error = wacom_register_input(wacom2);
 +			if (error)
 +				goto fail;
 +		}
 +
 +		error = wacom_initialize_battery(wacom);
  		if (error)
  			goto fail;
  	}
@@@ -1293,10 -1588,424 +1523,428 @@@ static void wacom_calculate_res(struct 
  						    features->unitExpo);
  }
  
 -void wacom_battery_work(struct work_struct *work)
 +static int wacom_probe(struct usb_interface *intf, const struct usb_device_id *id)
  {
++<<<<<<< HEAD
++=======
+ 	struct wacom *wacom = container_of(work, struct wacom, battery_work);
+ 
+ 	if ((wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
+ 	     !wacom->battery) {
+ 		wacom_initialize_battery(wacom);
+ 	}
+ 	else if (!(wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
+ 		 wacom->battery) {
+ 		wacom_destroy_battery(wacom);
+ 	}
+ }
+ 
+ static size_t wacom_compute_pktlen(struct hid_device *hdev)
+ {
+ 	struct hid_report_enum *report_enum;
+ 	struct hid_report *report;
+ 	size_t size = 0;
+ 
+ 	report_enum = hdev->report_enum + HID_INPUT_REPORT;
+ 
+ 	list_for_each_entry(report, &report_enum->report_list, list) {
+ 		size_t report_size = hid_report_len(report);
+ 		if (report_size > size)
+ 			size = report_size;
+ 	}
+ 
+ 	return size;
+ }
+ 
+ static void wacom_update_name(struct wacom *wacom, const char *suffix)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	char name[WACOM_NAME_MAX];
+ 
+ 	/* Generic devices name unspecified */
+ 	if ((features->type == HID_GENERIC) && !strcmp("Wacom HID", features->name)) {
+ 		if (strstr(wacom->hdev->name, "Wacom") ||
+ 		    strstr(wacom->hdev->name, "wacom") ||
+ 		    strstr(wacom->hdev->name, "WACOM")) {
+ 			/* name is in HID descriptor, use it */
+ 			strlcpy(name, wacom->hdev->name, sizeof(name));
+ 
+ 			/* strip out excess whitespaces */
+ 			while (1) {
+ 				char *gap = strstr(name, "  ");
+ 				if (gap == NULL)
+ 					break;
+ 				/* shift everything including the terminator */
+ 				memmove(gap, gap+1, strlen(gap));
+ 			}
+ 			/* get rid of trailing whitespace */
+ 			if (name[strlen(name)-1] == ' ')
+ 				name[strlen(name)-1] = '\0';
+ 		} else {
+ 			/* no meaningful name retrieved. use product ID */
+ 			snprintf(name, sizeof(name),
+ 				 "%s %X", features->name, wacom->hdev->product);
+ 		}
+ 	} else {
+ 		strlcpy(name, features->name, sizeof(name));
+ 	}
+ 
+ 	/* Append the device type to the name */
+ 	snprintf(wacom_wac->pen_name, sizeof(wacom_wac->pen_name),
+ 		"%s%s Pen", name, suffix);
+ 	snprintf(wacom_wac->touch_name, sizeof(wacom_wac->touch_name),
+ 		"%s%s Finger", name, suffix);
+ 	snprintf(wacom_wac->pad_name, sizeof(wacom_wac->pad_name),
+ 		"%s%s Pad", name, suffix);
+ }
+ 
+ static void wacom_release_resources(struct wacom *wacom)
+ {
+ 	struct hid_device *hdev = wacom->hdev;
+ 
+ 	if (!wacom->resources)
+ 		return;
+ 
+ 	devres_release_group(&hdev->dev, wacom);
+ 
+ 	wacom->resources = false;
+ 
+ 	wacom->wacom_wac.pen_input = NULL;
+ 	wacom->wacom_wac.touch_input = NULL;
+ 	wacom->wacom_wac.pad_input = NULL;
+ }
+ 
+ static int wacom_parse_and_register(struct wacom *wacom, bool wireless)
+ {
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	struct hid_device *hdev = wacom->hdev;
+ 	int error;
+ 	unsigned int connect_mask = HID_CONNECT_HIDRAW;
+ 
+ 	features->pktlen = wacom_compute_pktlen(hdev);
+ 	if (features->pktlen > WACOM_PKGLEN_MAX)
+ 		return -EINVAL;
+ 
+ 	if (!devres_open_group(&hdev->dev, wacom, GFP_KERNEL))
+ 		return -ENOMEM;
+ 
+ 	wacom->resources = true;
+ 
+ 	error = wacom_allocate_inputs(wacom);
+ 	if (error)
+ 		goto fail;
+ 
+ 	/*
+ 	 * Bamboo Pad has a generic hid handling for the Pen, and we switch it
+ 	 * into debug mode for the touch part.
+ 	 * We ignore the other interfaces.
+ 	 */
+ 	if (features->type == BAMBOO_PAD) {
+ 		if (features->pktlen == WACOM_PKGLEN_PENABLED) {
+ 			features->type = HID_GENERIC;
+ 		} else if ((features->pktlen != WACOM_PKGLEN_BPAD_TOUCH) &&
+ 			   (features->pktlen != WACOM_PKGLEN_BPAD_TOUCH_USB)) {
+ 			error = -ENODEV;
+ 			goto fail;
+ 		}
+ 	}
+ 
+ 	/* set the default size in case we do not get them from hid */
+ 	wacom_set_default_phy(features);
+ 
+ 	/* Retrieve the physical and logical size for touch devices */
+ 	wacom_retrieve_hid_descriptor(hdev, features);
+ 	wacom_setup_device_quirks(wacom);
+ 
+ 	if (features->device_type == WACOM_DEVICETYPE_NONE &&
+ 	    features->type != WIRELESS) {
+ 		error = features->type == HID_GENERIC ? -ENODEV : 0;
+ 
+ 		dev_warn(&hdev->dev, "Unknown device_type for '%s'. %s.",
+ 			 hdev->name,
+ 			 error ? "Ignoring" : "Assuming pen");
+ 
+ 		if (error)
+ 			goto fail;
+ 
+ 		features->device_type |= WACOM_DEVICETYPE_PEN;
+ 	}
+ 
+ 	wacom_calculate_res(features);
+ 
+ 	wacom_update_name(wacom, wireless ? " (WL)" : "");
+ 
+ 	error = wacom_add_shared_data(hdev);
+ 	if (error)
+ 		goto fail;
+ 
+ 	if (!(features->device_type & WACOM_DEVICETYPE_WL_MONITOR) &&
+ 	     (features->quirks & WACOM_QUIRK_BATTERY)) {
+ 		error = wacom_initialize_battery(wacom);
+ 		if (error)
+ 			goto fail;
+ 	}
+ 
+ 	error = wacom_register_inputs(wacom);
+ 	if (error)
+ 		goto fail;
+ 
+ 	if (wacom->wacom_wac.features.device_type & WACOM_DEVICETYPE_PAD) {
+ 		error = wacom_initialize_leds(wacom);
+ 		if (error)
+ 			goto fail;
+ 
+ 		error = wacom_initialize_remotes(wacom);
+ 		if (error)
+ 			goto fail;
+ 	}
+ 
+ 	if (features->type == HID_GENERIC)
+ 		connect_mask |= HID_CONNECT_DRIVER;
+ 
+ 	/* Regular HID work starts now */
+ 	error = hid_hw_start(hdev, connect_mask);
+ 	if (error) {
+ 		hid_err(hdev, "hw start failed\n");
+ 		goto fail;
+ 	}
+ 
+ 	if (!wireless) {
+ 		/* Note that if query fails it is not a hard failure */
+ 		wacom_query_tablet_data(hdev, features);
+ 	}
+ 
+ 	/* touch only Bamboo doesn't support pen */
+ 	if ((features->type == BAMBOO_TOUCH) &&
+ 	    (features->device_type & WACOM_DEVICETYPE_PEN)) {
+ 		error = -ENODEV;
+ 		goto fail_quirks;
+ 	}
+ 
+ 	/* pen only Bamboo neither support touch nor pad */
+ 	if ((features->type == BAMBOO_PEN) &&
+ 	    ((features->device_type & WACOM_DEVICETYPE_TOUCH) ||
+ 	    (features->device_type & WACOM_DEVICETYPE_PAD))) {
+ 		error = -ENODEV;
+ 		goto fail_quirks;
+ 	}
+ 
+ 	if (features->device_type & WACOM_DEVICETYPE_WL_MONITOR)
+ 		error = hid_hw_open(hdev);
+ 
+ 	if ((wacom_wac->features.type == INTUOSHT ||
+ 	     wacom_wac->features.type == INTUOSHT2) &&
+ 	    (wacom_wac->features.device_type & WACOM_DEVICETYPE_TOUCH)) {
+ 		wacom_wac->shared->type = wacom_wac->features.type;
+ 		wacom_wac->shared->touch_input = wacom_wac->touch_input;
+ 	}
+ 
+ 	devres_close_group(&hdev->dev, wacom);
+ 
+ 	return 0;
+ 
+ fail_quirks:
+ 	hid_hw_stop(hdev);
+ fail:
+ 	wacom_release_resources(wacom);
+ 	return error;
+ }
+ 
+ static void wacom_wireless_work(struct work_struct *work)
+ {
+ 	struct wacom *wacom = container_of(work, struct wacom, wireless_work);
+ 	struct usb_device *usbdev = wacom->usbdev;
+ 	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
+ 	struct hid_device *hdev1, *hdev2;
+ 	struct wacom *wacom1, *wacom2;
+ 	struct wacom_wac *wacom_wac1, *wacom_wac2;
+ 	int error;
+ 
+ 	/*
+ 	 * Regardless if this is a disconnect or a new tablet,
+ 	 * remove any existing input and battery devices.
+ 	 */
+ 
+ 	wacom_destroy_battery(wacom);
+ 
+ 	/* Stylus interface */
+ 	hdev1 = usb_get_intfdata(usbdev->config->interface[1]);
+ 	wacom1 = hid_get_drvdata(hdev1);
+ 	wacom_wac1 = &(wacom1->wacom_wac);
+ 	wacom_release_resources(wacom1);
+ 
+ 	/* Touch interface */
+ 	hdev2 = usb_get_intfdata(usbdev->config->interface[2]);
+ 	wacom2 = hid_get_drvdata(hdev2);
+ 	wacom_wac2 = &(wacom2->wacom_wac);
+ 	wacom_release_resources(wacom2);
+ 
+ 	if (wacom_wac->pid == 0) {
+ 		hid_info(wacom->hdev, "wireless tablet disconnected\n");
+ 	} else {
+ 		const struct hid_device_id *id = wacom_ids;
+ 
+ 		hid_info(wacom->hdev, "wireless tablet connected with PID %x\n",
+ 			 wacom_wac->pid);
+ 
+ 		while (id->bus) {
+ 			if (id->vendor == USB_VENDOR_ID_WACOM &&
+ 			    id->product == wacom_wac->pid)
+ 				break;
+ 			id++;
+ 		}
+ 
+ 		if (!id->bus) {
+ 			hid_info(wacom->hdev, "ignoring unknown PID.\n");
+ 			return;
+ 		}
+ 
+ 		/* Stylus interface */
+ 		wacom_wac1->features =
+ 			*((struct wacom_features *)id->driver_data);
+ 
+ 		wacom_wac1->pid = wacom_wac->pid;
+ 		hid_hw_stop(hdev1);
+ 		error = wacom_parse_and_register(wacom1, true);
+ 		if (error)
+ 			goto fail;
+ 
+ 		/* Touch interface */
+ 		if (wacom_wac1->features.touch_max ||
+ 		    (wacom_wac1->features.type >= INTUOSHT &&
+ 		    wacom_wac1->features.type <= BAMBOO_PT)) {
+ 			wacom_wac2->features =
+ 				*((struct wacom_features *)id->driver_data);
+ 			wacom_wac2->pid = wacom_wac->pid;
+ 			hid_hw_stop(hdev2);
+ 			error = wacom_parse_and_register(wacom2, true);
+ 			if (error)
+ 				goto fail;
+ 		}
+ 
+ 		error = wacom_initialize_battery(wacom);
+ 		if (error)
+ 			goto fail;
+ 	}
+ 
+ 	return;
+ 
+ fail:
+ 	wacom_release_resources(wacom1);
+ 	wacom_release_resources(wacom2);
+ 	return;
+ }
+ 
+ static void wacom_remote_destroy_one(struct wacom *wacom, unsigned int index)
+ {
+ 	struct wacom_remote *remote = wacom->remote;
+ 	u32 serial = remote->remotes[index].serial;
+ 	int i;
+ 
+ 	if (remote->remotes[index].group.name)
+ 		devres_release_group(&wacom->hdev->dev,
+ 				     &remote->remotes[index]);
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		if (remote->remotes[i].serial == serial) {
+ 			remote->remotes[i].serial = 0;
+ 			remote->remotes[i].group.name = NULL;
+ 			wacom->led.groups[i].select = WACOM_STATUS_UNKNOWN;
+ 		}
+ 	}
+ }
+ 
+ static int wacom_remote_create_one(struct wacom *wacom, u32 serial,
+ 				   unsigned int index)
+ {
+ 	struct wacom_remote *remote = wacom->remote;
+ 	struct device *dev = &wacom->hdev->dev;
+ 	int error, k;
+ 
+ 	/* A remote can pair more than once with an EKR,
+ 	 * check to make sure this serial isn't already paired.
+ 	 */
+ 	for (k = 0; k < WACOM_MAX_REMOTES; k++) {
+ 		if (remote->remotes[k].serial == serial)
+ 			break;
+ 	}
+ 
+ 	if (k < WACOM_MAX_REMOTES) {
+ 		remote->remotes[index].serial = serial;
+ 		return 0;
+ 	}
+ 
+ 	if (!devres_open_group(dev, &remote->remotes[index], GFP_KERNEL))
+ 		return -ENOMEM;
+ 
+ 	error = wacom_remote_create_attr_group(wacom, serial, index);
+ 	if (error)
+ 		goto fail;
+ 
+ 	remote->remotes[index].serial = serial;
+ 
+ 	devres_close_group(dev, &remote->remotes[index]);
+ 	return 0;
+ 
+ fail:
+ 	devres_release_group(dev, &remote->remotes[index]);
+ 	remote->remotes[index].serial = 0;
+ 	return error;
+ }
+ 
+ static void wacom_remote_work(struct work_struct *work)
+ {
+ 	struct wacom *wacom = container_of(work, struct wacom, remote_work);
+ 	struct wacom_remote *remote = wacom->remote;
+ 	struct wacom_remote_data data;
+ 	unsigned long flags;
+ 	unsigned int count;
+ 	u32 serial;
+ 	int i;
+ 
+ 	spin_lock_irqsave(&remote->remote_lock, flags);
+ 
+ 	count = kfifo_out(&remote->remote_fifo, &data, sizeof(data));
+ 
+ 	if (count != sizeof(data)) {
+ 		hid_err(wacom->hdev,
+ 			"workitem triggered without status available\n");
+ 		spin_unlock_irqrestore(&remote->remote_lock, flags);
+ 		return;
+ 	}
+ 
+ 	if (!kfifo_is_empty(&remote->remote_fifo))
+ 		wacom_schedule_work(&wacom->wacom_wac, WACOM_WORKER_REMOTE);
+ 
+ 	spin_unlock_irqrestore(&remote->remote_lock, flags);
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		serial = data.remote[i].serial;
+ 		if (data.remote[i].connected) {
+ 
+ 			if (remote->remotes[i].serial == serial)
+ 				continue;
+ 
+ 			if (remote->remotes[i].serial)
+ 				wacom_remote_destroy_one(wacom, i);
+ 
+ 			wacom_remote_create_one(wacom, serial, i);
+ 
+ 		} else if (remote->remotes[i].serial) {
+ 			wacom_remote_destroy_one(wacom, i);
+ 		}
+ 	}
+ }
+ 
+ static int wacom_probe(struct hid_device *hdev,
+ 		const struct hid_device_id *id)
+ {
+ 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
++>>>>>>> e7749f6e5f9d (HID: wacom: EKR: have one array of struct remotes instead of many arrays)
  	struct usb_device *dev = interface_to_usbdev(intf);
 +	struct usb_endpoint_descriptor *endpoint;
  	struct wacom *wacom;
  	struct wacom_wac *wacom_wac;
  	struct wacom_features *features;
diff --cc drivers/hid/wacom_wac.c
index 98c7d65145c2,aee07613040d..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -488,7 -748,120 +488,124 @@@ static int wacom_intuos_inout(struct wa
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void wacom_intuos_general(struct wacom_wac *wacom)
++=======
+ static int wacom_remote_irq(struct wacom_wac *wacom_wac, size_t len)
+ {
+ 	unsigned char *data = wacom_wac->data;
+ 	struct input_dev *input = wacom_wac->pad_input;
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 	struct wacom_remote *remote = wacom->remote;
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	int bat_charging, bat_percent, touch_ring_mode;
+ 	__u32 serial;
+ 	int i;
+ 
+ 	if (data[0] != WACOM_REPORT_REMOTE) {
+ 		dev_dbg(input->dev.parent,
+ 			"%s: received unknown report #%d", __func__, data[0]);
+ 		return 0;
+ 	}
+ 
+ 	serial = data[3] + (data[4] << 8) + (data[5] << 16);
+ 	wacom_wac->id[0] = PAD_DEVICE_ID;
+ 
+ 	input_report_key(input, BTN_0, (data[9] & 0x01));
+ 	input_report_key(input, BTN_1, (data[9] & 0x02));
+ 	input_report_key(input, BTN_2, (data[9] & 0x04));
+ 	input_report_key(input, BTN_3, (data[9] & 0x08));
+ 	input_report_key(input, BTN_4, (data[9] & 0x10));
+ 	input_report_key(input, BTN_5, (data[9] & 0x20));
+ 	input_report_key(input, BTN_6, (data[9] & 0x40));
+ 	input_report_key(input, BTN_7, (data[9] & 0x80));
+ 
+ 	input_report_key(input, BTN_8, (data[10] & 0x01));
+ 	input_report_key(input, BTN_9, (data[10] & 0x02));
+ 	input_report_key(input, BTN_A, (data[10] & 0x04));
+ 	input_report_key(input, BTN_B, (data[10] & 0x08));
+ 	input_report_key(input, BTN_C, (data[10] & 0x10));
+ 	input_report_key(input, BTN_X, (data[10] & 0x20));
+ 	input_report_key(input, BTN_Y, (data[10] & 0x40));
+ 	input_report_key(input, BTN_Z, (data[10] & 0x80));
+ 
+ 	input_report_key(input, BTN_BASE, (data[11] & 0x01));
+ 	input_report_key(input, BTN_BASE2, (data[11] & 0x02));
+ 
+ 	if (data[12] & 0x80)
+ 		input_report_abs(input, ABS_WHEEL, (data[12] & 0x7f));
+ 	else
+ 		input_report_abs(input, ABS_WHEEL, 0);
+ 
+ 	bat_percent = data[7] & 0x7f;
+ 	bat_charging = !!(data[7] & 0x80);
+ 
+ 	if (data[9] | data[10] | (data[11] & 0x03) | data[12])
+ 		input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
+ 	else
+ 		input_report_abs(input, ABS_MISC, 0);
+ 
+ 	input_event(input, EV_MSC, MSC_SERIAL, serial);
+ 
+ 	/*Which mode select (LED light) is currently on?*/
+ 	touch_ring_mode = (data[11] & 0xC0) >> 6;
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		if (remote->remotes[i].serial == serial)
+ 			wacom->led.groups[i].select = touch_ring_mode;
+ 	}
+ 
+ 	if (!wacom->battery &&
+ 	    !(features->quirks & WACOM_QUIRK_BATTERY)) {
+ 		features->quirks |= WACOM_QUIRK_BATTERY;
+ 		wacom_schedule_work(wacom_wac, WACOM_WORKER_BATTERY);
+ 	}
+ 
+ 	wacom_notify_battery(wacom_wac, bat_percent, bat_charging, 1,
+ 			     bat_charging);
+ 
+ 	return 1;
+ }
+ 
+ static void wacom_remote_status_irq(struct wacom_wac *wacom_wac, size_t len)
+ {
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 	unsigned char *data = wacom_wac->data;
+ 	struct wacom_remote *remote = wacom->remote;
+ 	struct wacom_remote_data remote_data;
+ 	unsigned long flags;
+ 	int i, ret;
+ 
+ 	if (data[0] != WACOM_REPORT_DEVICE_LIST)
+ 		return;
+ 
+ 	memset(&remote_data, 0, sizeof(struct wacom_remote_data));
+ 
+ 	for (i = 0; i < WACOM_MAX_REMOTES; i++) {
+ 		int j = i * 6;
+ 		int serial = (data[j+6] << 16) + (data[j+5] << 8) + data[j+4];
+ 		bool connected = data[j+2];
+ 
+ 		remote_data.remote[i].serial = serial;
+ 		remote_data.remote[i].connected = connected;
+ 	}
+ 
+ 	spin_lock_irqsave(&remote->remote_lock, flags);
+ 
+ 	ret = kfifo_in(&remote->remote_fifo, &remote_data, sizeof(remote_data));
+ 	if (ret != sizeof(remote_data)) {
+ 		spin_unlock_irqrestore(&remote->remote_lock, flags);
+ 		hid_err(wacom->hdev, "Can't queue Remote status event.\n");
+ 		return;
+ 	}
+ 
+ 	spin_unlock_irqrestore(&remote->remote_lock, flags);
+ 
+ 	wacom_schedule_work(wacom_wac, WACOM_WORKER_REMOTE);
+ }
+ 
+ static int wacom_intuos_general(struct wacom_wac *wacom)
++>>>>>>> e7749f6e5f9d (HID: wacom: EKR: have one array of struct remotes instead of many arrays)
  {
  	struct wacom_features *features = &wacom->features;
  	unsigned char *data = wacom->data;
* Unmerged path drivers/hid/wacom.h
* Unmerged path drivers/hid/wacom_sys.c
* Unmerged path drivers/hid/wacom_wac.c
