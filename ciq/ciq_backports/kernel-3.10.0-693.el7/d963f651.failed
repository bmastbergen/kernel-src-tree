PCI: Power on bridges before scanning new devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [pci] Power on bridges before scanning new devices (Myron Stowe) [1418060]
Rebuild_FUZZ: 94.62%
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit d963f6512e15fb2c0a9e9770078e2206f55c2f7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d963f651.failed

When a PCI device is removed through sysfs interface, the upstream bridge
(PCIe port) can be runtime suspended if it was the last device on that bus.
Now, if the bridge is in D3 we cannot find devices below the bridge
anymore.  For example following fails to find the removed device again:

  # echo 1 > /sys/bus/pci/devices/0000:00:01.0/0000:01:00.0/remove
  # echo 1 > /sys/bus/pci/devices/0000:00:01.0/rescan

Where 0000:00:01.0 is the bridge device.

In order to be able to rescan devices below the bridge add
pm_runtime_get_sync()/pm_runtime_put() calls to pci_scan_bridge().  This
should keep bridges powered on while their children devices are being
scanned.

	Reported-by: Peter Wu <peter@lekensteyn.nl>
	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit d963f6512e15fb2c0a9e9770078e2206f55c2f7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/probe.c
diff --cc drivers/pci/probe.c
index c13647539682,11a802daf242..000000000000
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@@ -14,7 -14,9 +14,13 @@@
  #include <linux/cpumask.h>
  #include <linux/pci-aspm.h>
  #include <linux/aer.h>
++<<<<<<< HEAD
 +#include <asm-generic/pci-bridge.h>
++=======
+ #include <linux/acpi.h>
+ #include <linux/irqdomain.h>
+ #include <linux/pm_runtime.h>
++>>>>>>> d963f6512e15 (PCI: Power on bridges before scanning new devices)
  #include "pci.h"
  
  #define CARDBUS_LATENCY_TIMER	176	/* secondary latency timer */
* Unmerged path drivers/pci/probe.c
