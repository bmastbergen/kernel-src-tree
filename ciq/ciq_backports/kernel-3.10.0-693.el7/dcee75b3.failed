perf/x86/intel/rapl: Support Skylake RAPL domains

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit dcee75b3b7f025cc6765e6c92ba0a4e59a4d25f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/dcee75b3.failed

Add Skylake client support for RAPL domains. In addition to RAPL domains
in Broadwell clients, it has support for platform domain (aka PSys). The
PSys domain controls the entire SoC instead of just a CPU package. Unlike
package domain, PSys support requires more than just processor level
implementation. The other parts in the system need additional HW level
signaling, which OEMs need to support. When not supported, the energy
counter register in PSys domain returns 0.

Also corrected error in comment for GPU counter, which previously was
DRAM counter.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com
[ Cnverted to model_match stuff. ]
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Cc: bp@alien8.de
	Cc: hpa@zytor.com
	Cc: jacob.jun.pan@linux.intel.com
	Cc: rjw@rjwysocki.net
Link: http://lkml.kernel.org/r/1460930581-29748-2-git-send-email-srinivas.pandruvada@linux.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>

	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit dcee75b3b7f025cc6765e6c92ba0a4e59a4d25f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/rapl.c
diff --cc arch/x86/events/intel/rapl.c
index a14d9d5f94a3,26c7d7d8a657..000000000000
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@@ -701,52 -740,86 +743,116 @@@ static int __init init_rapl_pmus(void
  	return 0;
  }
  
++<<<<<<< HEAD
 +static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
 +	[0] = { .vendor = X86_VENDOR_INTEL, .family = 6 },
 +	[1] = {},
++=======
+ #define X86_RAPL_MODEL_MATCH(model, init)	\
+ 	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (unsigned long)&init }
+ 
+ struct intel_rapl_init_fun {
+ 	bool apply_quirk;
+ 	int cntr_mask;
+ 	struct attribute **attrs;
+ };
+ 
+ static const struct intel_rapl_init_fun snb_rapl_init __initconst = {
+ 	.apply_quirk = false,
+ 	.cntr_mask = RAPL_IDX_CLN,
+ 	.attrs = rapl_events_cln_attr,
+ };
+ 
+ static const struct intel_rapl_init_fun hsx_rapl_init __initconst = {
+ 	.apply_quirk = true,
+ 	.cntr_mask = RAPL_IDX_SRV,
+ 	.attrs = rapl_events_srv_attr,
+ };
+ 
+ static const struct intel_rapl_init_fun hsw_rapl_init __initconst = {
+ 	.apply_quirk = false,
+ 	.cntr_mask = RAPL_IDX_HSW,
+ 	.attrs = rapl_events_hsw_attr,
+ };
+ 
+ static const struct intel_rapl_init_fun snbep_rapl_init __initconst = {
+ 	.apply_quirk = false,
+ 	.cntr_mask = RAPL_IDX_SRV,
+ 	.attrs = rapl_events_srv_attr,
+ };
+ 
+ static const struct intel_rapl_init_fun knl_rapl_init __initconst = {
+ 	.apply_quirk = true,
+ 	.cntr_mask = RAPL_IDX_KNL,
+ 	.attrs = rapl_events_knl_attr,
+ };
+ 
+ static const struct intel_rapl_init_fun skl_rapl_init __initconst = {
+ 	.apply_quirk = false,
+ 	.cntr_mask = RAPL_IDX_SKL_CLN,
+ 	.attrs = rapl_events_skl_attr,
+ };
+ 
+ static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
+ 	X86_RAPL_MODEL_MATCH(42, snb_rapl_init),	/* Sandy Bridge */
+ 	X86_RAPL_MODEL_MATCH(58, snb_rapl_init),	/* Ivy Bridge */
+ 	X86_RAPL_MODEL_MATCH(63, hsx_rapl_init),	/* Haswell-Server */
+ 	X86_RAPL_MODEL_MATCH(79, hsx_rapl_init),	/* Broadwell-Server */
+ 	X86_RAPL_MODEL_MATCH(60, hsw_rapl_init),	/* Haswell */
+ 	X86_RAPL_MODEL_MATCH(69, hsw_rapl_init),	/* Haswell-Celeron */
+ 	X86_RAPL_MODEL_MATCH(70, hsw_rapl_init),	/* Haswell GT3e */
+ 	X86_RAPL_MODEL_MATCH(61, hsw_rapl_init),	/* Broadwell */
+ 	X86_RAPL_MODEL_MATCH(71, hsw_rapl_init),	/* Broadwell-H */
+ 	X86_RAPL_MODEL_MATCH(45, snbep_rapl_init),	/* Sandy Bridge-EP */
+ 	X86_RAPL_MODEL_MATCH(62, snbep_rapl_init),	/* IvyTown */
+ 	X86_RAPL_MODEL_MATCH(87, knl_rapl_init),	/* Knights Landing */
+ 	X86_RAPL_MODEL_MATCH(78, skl_rapl_init),	/* Skylake */
+ 	X86_RAPL_MODEL_MATCH(94, skl_rapl_init),	/* Skylake H/S */
+ 	{},
++>>>>>>> dcee75b3b7f0 (perf/x86/intel/rapl: Support Skylake RAPL domains)
  };
  
 -MODULE_DEVICE_TABLE(x86cpu, rapl_cpu_match);
 -
  static int __init rapl_pmu_init(void)
  {
 -	const struct x86_cpu_id *id;
 -	struct intel_rapl_init_fun *rapl_init;
 -	bool apply_quirk;
 +	bool apply_quirk = false;
  	int ret;
  
 -	id = x86_match_cpu(rapl_cpu_match);
 -	if (!id)
 +	if (!x86_match_cpu(rapl_cpu_match))
  		return -ENODEV;
  
 -	rapl_init = (struct intel_rapl_init_fun *)id->driver_data;
 -	apply_quirk = rapl_init->apply_quirk;
 -	rapl_cntr_mask = rapl_init->cntr_mask;
 -	rapl_pmu_events_group.attrs = rapl_init->attrs;
 +	switch (boot_cpu_data.x86_model) {
 +	case 42: /* Sandy Bridge */
 +	case 58: /* Ivy Bridge */
 +		rapl_cntr_mask = RAPL_IDX_CLN;
 +		rapl_pmu_events_group.attrs = rapl_events_cln_attr;
 +		break;
 +	case 63: /* Haswell-Server */
 +	case 79: /* Broadwell-Server */
 +		apply_quirk = true;
 +		rapl_cntr_mask = RAPL_IDX_SRV;
 +		rapl_pmu_events_group.attrs = rapl_events_srv_attr;
 +		break;
 +	case 60: /* Haswell */
 +	case 69: /* Haswell-Celeron */
 +	case 70: /* Haswell GT3e */
 +	case 61: /* Broadwell */
 +	case 71: /* Broadwell-H */
 +		rapl_cntr_mask = RAPL_IDX_HSW;
 +		rapl_pmu_events_group.attrs = rapl_events_hsw_attr;
 +		break;
 +	case 45: /* Sandy Bridge-EP */
 +	case 62: /* IvyTown */
 +		rapl_cntr_mask = RAPL_IDX_SRV;
 +		rapl_pmu_events_group.attrs = rapl_events_srv_attr;
 +		break;
 +	case 87: /* Knights Landing */
 +		apply_quirk = true;
 +		rapl_cntr_mask = RAPL_IDX_KNL;
 +		rapl_pmu_events_group.attrs = rapl_events_knl_attr;
 +		break;
 +	default:
 +		return -ENODEV;
 +	}
  
  	ret = rapl_check_hw_unit(apply_quirk);
  	if (ret)
* Unmerged path arch/x86/events/intel/rapl.c
diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index f26b785ad48b..31f408bdc752 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -181,6 +181,8 @@
 #define MSR_CONFIG_TDP_CONTROL		0x0000064B
 #define MSR_TURBO_ACTIVATION_RATIO	0x0000064C
 
+#define MSR_PLATFORM_ENERGY_STATUS	0x0000064D
+
 #define MSR_PKG_WEIGHTED_CORE_C0_RES	0x00000658
 #define MSR_PKG_ANY_CORE_C0_RES		0x00000659
 #define MSR_PKG_ANY_GFXE_C0_RES		0x0000065A
