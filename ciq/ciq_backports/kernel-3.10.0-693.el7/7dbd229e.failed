Input: wacom - register an ac power supply for wireless devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 7dbd229e10603b3759f366007df2068dc2acfe46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7dbd229e.failed

This is used by HID Bluetooth devices but also add some more information
to the USB Wireless Receiver.
We are just porting the bits from hid-wacom.c to the common driver here.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Przemo Firszt <przemo@firszt.eu>
	Acked-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit 7dbd229e10603b3759f366007df2068dc2acfe46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
#	drivers/hid/wacom_wac.h
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,37888c3f39ba..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1095,11 -812,38 +1101,44 @@@ static int wacom_battery_get_property(s
  	return ret;
  }
  
+ static int wacom_ac_get_property(struct power_supply *psy,
+ 				enum power_supply_property psp,
+ 				union power_supply_propval *val)
+ {
+ 	struct wacom *wacom = container_of(psy, struct wacom, ac);
+ 	int ret = 0;
+ 
+ 	switch (psp) {
+ 	case POWER_SUPPLY_PROP_PRESENT:
+ 		/* fall through */
+ 	case POWER_SUPPLY_PROP_ONLINE:
+ 		val->intval = wacom->wacom_wac.ps_connected;
+ 		break;
+ 	case POWER_SUPPLY_PROP_SCOPE:
+ 		val->intval = POWER_SUPPLY_SCOPE_DEVICE;
+ 		break;
+ 	default:
+ 		ret = -EINVAL;
+ 		break;
+ 	}
+ 	return ret;
+ }
+ 
  static int wacom_initialize_battery(struct wacom *wacom)
  {
++<<<<<<< HEAD
 +	int error = 0;
 +
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR) {
++=======
+ 	static atomic_t battery_no = ATOMIC_INIT(0);
+ 	int error;
+ 	unsigned long n;
+ 
+ 	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) {
+ 		n = atomic_inc_return(&battery_no) - 1;
+ 
++>>>>>>> 7dbd229e1060 (Input: wacom - register an ac power supply for wireless devices)
  		wacom->battery.properties = wacom_battery_props;
  		wacom->battery.num_properties = ARRAY_SIZE(wacom_battery_props);
  		wacom->battery.get_property = wacom_battery_get_property;
@@@ -1107,23 -852,41 +1146,51 @@@
  		wacom->battery.type = POWER_SUPPLY_TYPE_BATTERY;
  		wacom->battery.use_for_apm = 0;
  
++<<<<<<< HEAD
 +		error = power_supply_register(&wacom->usbdev->dev,
++=======
+ 		wacom->ac.properties = wacom_ac_props;
+ 		wacom->ac.num_properties = ARRAY_SIZE(wacom_ac_props);
+ 		wacom->ac.get_property = wacom_ac_get_property;
+ 		sprintf(wacom->wacom_wac.ac_name, "wacom_ac_%ld", n);
+ 		wacom->ac.name = wacom->wacom_wac.ac_name;
+ 		wacom->ac.type = POWER_SUPPLY_TYPE_MAINS;
+ 		wacom->ac.use_for_apm = 0;
+ 
+ 		error = power_supply_register(&wacom->hdev->dev,
++>>>>>>> 7dbd229e1060 (Input: wacom - register an ac power supply for wireless devices)
  					      &wacom->battery);
+ 		if (error)
+ 			return error;
  
++<<<<<<< HEAD
 +		if (!error)
 +			power_supply_powers(&wacom->battery,
 +					    &wacom->usbdev->dev);
++=======
+ 		power_supply_powers(&wacom->battery, &wacom->hdev->dev);
+ 
+ 		error = power_supply_register(&wacom->hdev->dev, &wacom->ac);
+ 		if (error) {
+ 			power_supply_unregister(&wacom->battery);
+ 			return error;
+ 		}
+ 
+ 		power_supply_powers(&wacom->ac, &wacom->hdev->dev);
++>>>>>>> 7dbd229e1060 (Input: wacom - register an ac power supply for wireless devices)
  	}
  
- 	return error;
+ 	return 0;
  }
  
  static void wacom_destroy_battery(struct wacom *wacom)
  {
 -	if ((wacom->wacom_wac.features.quirks & WACOM_QUIRK_BATTERY) &&
 -	     wacom->battery.dev) {
 +	if (wacom->wacom_wac.features.quirks & WACOM_QUIRK_MONITOR &&
 +	    wacom->battery.dev) {
  		power_supply_unregister(&wacom->battery);
  		wacom->battery.dev = NULL;
+ 		power_supply_unregister(&wacom->ac);
+ 		wacom->ac.dev = NULL;
  	}
  }
  
diff --cc drivers/hid/wacom_wac.h
index d220d069f329,3433a0e28bb4..000000000000
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@@ -139,7 -153,10 +139,14 @@@ struct wacom_shared 
  
  struct wacom_wac {
  	char name[WACOM_NAME_MAX];
++<<<<<<< HEAD
 +	unsigned char *data;
++=======
+ 	char pad_name[WACOM_NAME_MAX];
+ 	char bat_name[WACOM_NAME_MAX];
+ 	char ac_name[WACOM_NAME_MAX];
+ 	unsigned char data[WACOM_PKGLEN_MAX];
++>>>>>>> 7dbd229e1060 (Input: wacom - register an ac power supply for wireless devices)
  	int tool[2];
  	int id[2];
  	__u32 serial[2];
diff --git a/drivers/hid/wacom.h b/drivers/hid/wacom.h
index c75e9e6ebe30..92730f84e1b4 100644
--- a/drivers/hid/wacom.h
+++ b/drivers/hid/wacom.h
@@ -124,6 +124,7 @@ struct wacom {
 	} led;
 	bool led_initialized;
 	struct power_supply battery;
+	struct power_supply ac;
 };
 
 static inline void wacom_schedule_work(struct wacom_wac *wacom_wac)
* Unmerged path drivers/hid/wacom_sys.c
* Unmerged path drivers/hid/wacom_wac.h
