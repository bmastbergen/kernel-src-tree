bnxt_en: Call bnxt_dcb_init() after getting firmware DCBX configuration.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Call bnxt_dcb_init() after getting firmware DCBX configuration (Jonathan Toppins) [1451915]
Rebuild_FUZZ: 99.30%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 87fe603274aa9889c05cca3c3e45675e1997cb13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/87fe6032.failed

In the current code, bnxt_dcb_init() is called too early before we
determine if the firmware DCBX agent is running or not.  As a result,
we are not setting the DCB_CAP_DCBX_HOST and DCB_CAP_DCBX_LLD_MANAGED
flags properly to report to DCBNL.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 87fe603274aa9889c05cca3c3e45675e1997cb13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index b35a8683a547,03f55daecb20..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -7013,6 -7626,10 +7013,13 @@@ static int bnxt_init_one(struct pci_de
  	dev->features |= dev->hw_features | NETIF_F_HIGHDMA;
  	dev->priv_flags |= IFF_UNICAST_FLT;
  
++<<<<<<< HEAD
++=======
+ 	/* MTU range: 60 - 9500 */
+ 	dev->min_mtu = ETH_ZLEN;
+ 	dev->max_mtu = BNXT_MAX_MTU;
+ 
++>>>>>>> 87fe603274aa (bnxt_en: Call bnxt_dcb_init() after getting firmware DCBX configuration.)
  #ifdef CONFIG_BNXT_SRIOV
  	init_waitqueue_head(&bp->sriov_cfg_wait);
  #endif
@@@ -7047,16 -7666,19 +7054,21 @@@
  
  	bnxt_hwrm_func_qcfg(bp);
  	bnxt_hwrm_port_led_qcaps(bp);
++<<<<<<< HEAD
++=======
+ 	bnxt_ethtool_init(bp);
+ 	bnxt_dcb_init(bp);
++>>>>>>> 87fe603274aa (bnxt_en: Call bnxt_dcb_init() after getting firmware DCBX configuration.)
  
 -	bnxt_set_rx_skb_mode(bp, false);
  	bnxt_set_tpa_flags(bp);
  	bnxt_set_ring_params(bp);
 -	bnxt_set_max_func_irqs(bp, max_irqs);
 -	rc = bnxt_set_dflt_rings(bp);
 -	if (rc) {
 -		netdev_err(bp->dev, "Not enough rings available.\n");
 -		rc = -ENOMEM;
 -		goto init_err_pci_clean;
 -	}
 +	if (BNXT_PF(bp))
 +		bp->pf.max_irqs = max_irqs;
 +#if defined(CONFIG_BNXT_SRIOV)
 +	else
 +		bp->vf.max_irqs = max_irqs;
 +#endif
 +	bnxt_set_dflt_rings(bp);
  
  	/* Default RSS hash cfg. */
  	bp->rss_hash_cfg = VNIC_RSS_CFG_REQ_HASH_TYPE_IPV4 |
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
