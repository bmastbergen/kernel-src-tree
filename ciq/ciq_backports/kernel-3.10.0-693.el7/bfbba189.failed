perf symbols: Move fprintf routines to separate object file

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit bfbba189b681c86b9ae380358e5f50ce1e33d240
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bfbba189.failed

To disentangle symbol printing from all the code related to symbol
tables, resolution of addresses to symbols, etc.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-eik9g3hbtdc7ddv57f1d4v3p@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit bfbba189b681c86b9ae380358e5f50ce1e33d240)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/symbol.c
diff --cc tools/perf/util/symbol.c
index e7588dc91518,a36823c3b7c0..000000000000
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@@ -255,40 -255,6 +255,43 @@@ void symbol__delete(struct symbol *sym
  	free(((void *)sym) - symbol_conf.priv_size);
  }
  
++<<<<<<< HEAD
 +size_t symbol__fprintf(struct symbol *sym, FILE *fp)
 +{
 +	return fprintf(fp, " %" PRIx64 "-%" PRIx64 " %c %s\n",
 +		       sym->start, sym->end,
 +		       sym->binding == STB_GLOBAL ? 'g' :
 +		       sym->binding == STB_LOCAL  ? 'l' : 'w',
 +		       sym->name);
 +}
 +
 +size_t symbol__fprintf_symname_offs(const struct symbol *sym,
 +				    const struct addr_location *al, FILE *fp)
 +{
 +	unsigned long offset;
 +	size_t length;
 +
 +	if (sym && sym->name) {
 +		length = fprintf(fp, "%s", sym->name);
 +		if (al) {
 +			if (al->addr < sym->end)
 +				offset = al->addr - sym->start;
 +			else
 +				offset = al->addr - al->map->start - sym->start;
 +			length += fprintf(fp, "+0x%lx", offset);
 +		}
 +		return length;
 +	} else
 +		return fprintf(fp, "[unknown]");
 +}
 +
 +size_t symbol__fprintf_symname(const struct symbol *sym, FILE *fp)
 +{
 +	return symbol__fprintf_symname_offs(sym, NULL, fp);
 +}
 +
++=======
++>>>>>>> bfbba189b681 (perf symbols: Move fprintf routines to separate object file)
  void symbols__delete(struct rb_root *symbols)
  {
  	struct symbol *pos;
diff --git a/tools/perf/util/Build b/tools/perf/util/Build
index b67f9deb9c06..2d31c41f67a0 100644
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@ -30,6 +30,7 @@ libperf-y += usage.o
 libperf-y += wrapper.o
 libperf-y += dso.o
 libperf-y += symbol.o
+libperf-y += symbol_fprintf.o
 libperf-y += color.o
 libperf-y += header.o
 libperf-y += callchain.o
diff --git a/tools/perf/util/python-ext-sources b/tools/perf/util/python-ext-sources
index 8162ba0e2e57..36c6862119e3 100644
--- a/tools/perf/util/python-ext-sources
+++ b/tools/perf/util/python-ext-sources
@@ -23,3 +23,4 @@ util/strlist.c
 util/trace-event.c
 ../lib/rbtree.c
 util/string.c
+util/symbol_fprintf.c
* Unmerged path tools/perf/util/symbol.c
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index c8b7544d9267..333ad19086b5 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -140,6 +140,11 @@ struct symbol_conf {
 
 extern struct symbol_conf symbol_conf;
 
+struct symbol_name_rb_node {
+	struct rb_node	rb_node;
+	struct symbol	sym;
+};
+
 static inline int __symbol__join_symfs(char *bf, size_t size, const char *path)
 {
 	return path__join(bf, size, symbol_conf.symfs, path);
diff --git a/tools/perf/util/symbol_fprintf.c b/tools/perf/util/symbol_fprintf.c
new file mode 100644
index 000000000000..a680bdaa65dc
--- /dev/null
+++ b/tools/perf/util/symbol_fprintf.c
@@ -0,0 +1,71 @@
+#include <elf.h>
+#include <inttypes.h>
+#include <stdio.h>
+
+#include "symbol.h"
+
+size_t symbol__fprintf(struct symbol *sym, FILE *fp)
+{
+	return fprintf(fp, " %" PRIx64 "-%" PRIx64 " %c %s\n",
+		       sym->start, sym->end,
+		       sym->binding == STB_GLOBAL ? 'g' :
+		       sym->binding == STB_LOCAL  ? 'l' : 'w',
+		       sym->name);
+}
+
+size_t __symbol__fprintf_symname_offs(const struct symbol *sym,
+				      const struct addr_location *al,
+				      bool unknown_as_addr, FILE *fp)
+{
+	unsigned long offset;
+	size_t length;
+
+	if (sym && sym->name) {
+		length = fprintf(fp, "%s", sym->name);
+		if (al) {
+			if (al->addr < sym->end)
+				offset = al->addr - sym->start;
+			else
+				offset = al->addr - al->map->start - sym->start;
+			length += fprintf(fp, "+0x%lx", offset);
+		}
+		return length;
+	} else if (al && unknown_as_addr)
+		return fprintf(fp, "[%#" PRIx64 "]", al->addr);
+	else
+		return fprintf(fp, "[unknown]");
+}
+
+size_t symbol__fprintf_symname_offs(const struct symbol *sym,
+				    const struct addr_location *al,
+				    FILE *fp)
+{
+	return __symbol__fprintf_symname_offs(sym, al, false, fp);
+}
+
+size_t __symbol__fprintf_symname(const struct symbol *sym,
+				 const struct addr_location *al,
+				 bool unknown_as_addr, FILE *fp)
+{
+	return __symbol__fprintf_symname_offs(sym, al, unknown_as_addr, fp);
+}
+
+size_t symbol__fprintf_symname(const struct symbol *sym, FILE *fp)
+{
+	return __symbol__fprintf_symname_offs(sym, NULL, false, fp);
+}
+
+size_t dso__fprintf_symbols_by_name(struct dso *dso,
+				    enum map_type type, FILE *fp)
+{
+	size_t ret = 0;
+	struct rb_node *nd;
+	struct symbol_name_rb_node *pos;
+
+	for (nd = rb_first(&dso->symbol_names[type]); nd; nd = rb_next(nd)) {
+		pos = rb_entry(nd, struct symbol_name_rb_node, rb_node);
+		fprintf(fp, "%s\n", pos->sym.name);
+	}
+
+	return ret;
+}
