mdio_bus: fix devm_mdiobus_alloc_size export

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnd Bergmann <arnd@arndb.de>
commit 93dccc59165ad1b4db94528dfdf88bff92c09cef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/93dccc59.failed

commit 6d48f44b7b2 "mdio_bus: implement devm_mdiobus_alloc/devm_mdiobus_free"
introduced a new function devm_mdiobus_alloc_size() but added an export
for a different function devm_mdiobus_alloc(), which was obviously
a simple mistake that leads to  build error whenever this function is
used from a loadable module:

ERROR: "devm_mdiobus_alloc_size" [drivers/net/ethernet/ti/davinci_mdio.ko] undefined!

	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Cc: Grygorii Strashko <grygorii.strashko@ti.com>
	Cc: Florian Fainelli <f.fainelli@gmail.com>
	Cc: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
	Cc: Lad, Prabhakar <prabhakar.csengg@gmail.com>
	Cc: David S. Miller <davem@davemloft.net>
	Cc: netdev@vger.kernel.org
	Acked-by: Lad, Prabhakar <prabhakar.csengg@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 93dccc59165ad1b4db94528dfdf88bff92c09cef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/mdio_bus.c
diff --cc drivers/net/phy/mdio_bus.c
index dc920974204e,a6284964b711..000000000000
--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@@ -72,6 -69,73 +72,76 @@@ struct mii_bus *mdiobus_alloc_size(size
  }
  EXPORT_SYMBOL(mdiobus_alloc_size);
  
++<<<<<<< HEAD
++=======
+ static void _devm_mdiobus_free(struct device *dev, void *res)
+ {
+ 	mdiobus_free(*(struct mii_bus **)res);
+ }
+ 
+ static int devm_mdiobus_match(struct device *dev, void *res, void *data)
+ {
+ 	struct mii_bus **r = res;
+ 
+ 	if (WARN_ON(!r || !*r))
+ 		return 0;
+ 
+ 	return *r == data;
+ }
+ 
+ /**
+  * devm_mdiobus_alloc_size - Resource-managed mdiobus_alloc_size()
+  * @dev:		Device to allocate mii_bus for
+  * @sizeof_priv:	Space to allocate for private structure.
+  *
+  * Managed mdiobus_alloc_size. mii_bus allocated with this function is
+  * automatically freed on driver detach.
+  *
+  * If an mii_bus allocated with this function needs to be freed separately,
+  * devm_mdiobus_free() must be used.
+  *
+  * RETURNS:
+  * Pointer to allocated mii_bus on success, NULL on failure.
+  */
+ struct mii_bus *devm_mdiobus_alloc_size(struct device *dev, int sizeof_priv)
+ {
+ 	struct mii_bus **ptr, *bus;
+ 
+ 	ptr = devres_alloc(_devm_mdiobus_free, sizeof(*ptr), GFP_KERNEL);
+ 	if (!ptr)
+ 		return NULL;
+ 
+ 	/* use raw alloc_dr for kmalloc caller tracing */
+ 	bus = mdiobus_alloc_size(sizeof_priv);
+ 	if (bus) {
+ 		*ptr = bus;
+ 		devres_add(dev, ptr);
+ 	} else {
+ 		devres_free(ptr);
+ 	}
+ 
+ 	return bus;
+ }
+ EXPORT_SYMBOL_GPL(devm_mdiobus_alloc_size);
+ 
+ /**
+  * devm_mdiobus_free - Resource-managed mdiobus_free()
+  * @dev:		Device this mii_bus belongs to
+  * @bus:		the mii_bus associated with the device
+  *
+  * Free mii_bus allocated with devm_mdiobus_alloc_size().
+  */
+ void devm_mdiobus_free(struct device *dev, struct mii_bus *bus)
+ {
+ 	int rc;
+ 
+ 	rc = devres_release(dev, _devm_mdiobus_free,
+ 			    devm_mdiobus_match, bus);
+ 	WARN_ON(rc);
+ }
+ EXPORT_SYMBOL_GPL(devm_mdiobus_free);
+ 
++>>>>>>> 93dccc59165a (mdio_bus: fix devm_mdiobus_alloc_size export)
  /**
   * mdiobus_release - mii_bus device release callback
   * @d: the target struct device that contains the mii_bus
* Unmerged path drivers/net/phy/mdio_bus.c
