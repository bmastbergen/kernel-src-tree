x86/apic, doc: Justification for disabling IO APIC before Local APIC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] apic, doc: Justification for disabling IO APIC before Local APIC (Prarit Bhargava) [1384277]
Rebuild_FUZZ: 96.97%
commit-author Fenghua Yu <fenghua.yu@intel.com>
commit 2885432aaf15c1b7e65c787bfe7c5fec428296f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2885432a.failed

Since erratum AVR31 in "Intel Atom Processor C2000 Product Family
Specification Update" is now published, I added a justification
comment for disabling IO APIC before Local APIC, as changed in commit:

522e66464467 x86/apic: Disable I/O APIC before shutdown of the local APIC

	Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
Link: http://lkml.kernel.org/r/1386202069-51515-1-git-send-email-fenghua.yu@intel.com
	Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
(cherry picked from commit 2885432aaf15c1b7e65c787bfe7c5fec428296f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/reboot.c
diff --cc arch/x86/kernel/reboot.c
index ad3f233d74c1,c752cb43e52f..000000000000
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@@ -638,27 -557,26 +638,45 @@@ static void native_machine_emergency_re
  void native_machine_shutdown(void)
  {
  	/* Stop the cpus and apics */
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_X86_IO_APIC
+ 	/*
+ 	 * Disabling IO APIC before local APIC is a workaround for
+ 	 * erratum AVR31 in "Intel Atom Processor C2000 Product Family
+ 	 * Specification Update". In this situation, interrupts that target
+ 	 * a Logical Processor whose Local APIC is either in the process of
+ 	 * being hardware disabled or software disabled are neither delivered
+ 	 * nor discarded. When this erratum occurs, the processor may hang.
+ 	 *
+ 	 * Even without the erratum, it still makes sense to quiet IO APIC
+ 	 * before disabling Local APIC.
+ 	 */
+ 	disable_IO_APIC();
+ #endif
+ 
++>>>>>>> 2885432aaf15 (x86/apic, doc: Justification for disabling IO APIC before Local APIC)
  #ifdef CONFIG_SMP
 +
 +	/* The boot cpu is always logical cpu 0 */
 +	int reboot_cpu_id = 0;
 +
 +	/* See if there has been given a command line override */
 +	if ((reboot_cpu != -1) && (reboot_cpu < nr_cpu_ids) &&
 +		cpu_online(reboot_cpu))
 +		reboot_cpu_id = reboot_cpu;
 +
 +	/* Make certain the cpu I'm about to reboot on is online */
 +	if (!cpu_online(reboot_cpu_id))
 +		reboot_cpu_id = smp_processor_id();
 +
 +	/* Make certain I only run on the appropriate processor */
 +	set_cpus_allowed_ptr(current, cpumask_of(reboot_cpu_id));
 +
  	/*
 -	 * Stop all of the others. Also disable the local irq to
 -	 * not receive the per-cpu timer interrupt which may trigger
 -	 * scheduler's load balance.
 +	 * O.K Now that I'm on the appropriate processor, stop all of the
 +	 * others. Also disable the local irq to not receive the per-cpu
 +	 * timer interrupt which may trigger scheduler's load balance.
  	 */
  	local_irq_disable();
  	stop_other_cpus();
* Unmerged path arch/x86/kernel/reboot.c
