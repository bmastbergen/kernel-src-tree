Input: wacom - fix compiler warning if !CONFIG_PM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Geert Uytterhoeven <geert@linux-m68k.org>
commit 41a7458147a435e082ceccd3a7d46f3390ea90f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/41a74581.failed

If CONFIG_PM is not set:

drivers/hid/wacom_sys.c:1436: warning: ‘wacom_reset_resume’ defined but
not used

Protect the unused functions by #ifdef CONFIG_PM to fix this.

	Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit 41a7458147a435e082ceccd3a7d46f3390ea90f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,f0db7eca9023..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1452,44 -1414,32 +1452,50 @@@ static void wacom_disconnect(struct usb
  	kfree(wacom);
  }
  
++<<<<<<< HEAD
 +static int wacom_suspend(struct usb_interface *intf, pm_message_t message)
++=======
+ #ifdef CONFIG_PM
+ static int wacom_resume(struct hid_device *hdev)
++>>>>>>> 41a7458147a4 (Input: wacom - fix compiler warning if !CONFIG_PM)
  {
 -	struct wacom *wacom = hid_get_drvdata(hdev);
 +	struct wacom *wacom = usb_get_intfdata(intf);
 +
 +	mutex_lock(&wacom->lock);
 +	usb_kill_urb(wacom->irq);
 +	mutex_unlock(&wacom->lock);
 +
 +	return 0;
 +}
 +
 +static int wacom_resume(struct usb_interface *intf)
 +{
 +	struct wacom *wacom = usb_get_intfdata(intf);
  	struct wacom_features *features = &wacom->wacom_wac.features;
 +	int rv = 0;
  
  	mutex_lock(&wacom->lock);
  
  	/* switch to wacom mode first */
 -	wacom_query_tablet_data(hdev, features);
 +	wacom_query_tablet_data(intf, features);
  	wacom_led_control(wacom);
  
 +	if ((wacom->open || (features->quirks & WACOM_QUIRK_MONITOR)) &&
 +	    usb_submit_urb(wacom->irq, GFP_NOIO) < 0)
 +		rv = -EIO;
 +
  	mutex_unlock(&wacom->lock);
  
 -	return 0;
 +	return rv;
  }
++#endif /* CONFIG_PM */
  
 -static int wacom_reset_resume(struct hid_device *hdev)
 +static int wacom_reset_resume(struct usb_interface *intf)
  {
 -	return wacom_resume(hdev);
 +	return wacom_resume(intf);
  }
 -#endif /* CONFIG_PM */
  
 -static struct hid_driver wacom_driver = {
 +static struct usb_driver wacom_driver = {
  	.name =		"wacom",
  	.id_table =	wacom_ids,
  	.probe =	wacom_probe,
* Unmerged path drivers/hid/wacom_sys.c
