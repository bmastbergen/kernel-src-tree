net/mlx5e: Expose PCIe statistics to ethtool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Expose PCIe statistics to ethtool (Don Dutile) [1385330 1417286]
Rebuild_FUZZ: 95.24%
commit-author Gal Pressman <galp@mellanox.com>
commit 9c7262399ba12825f3ca4b00a76d8d5e77c720f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9c726239.failed

This patch exposes two groups of PCIe counters:
- Performance counters.
- Timers and states counters.
Queried with ethtool -S <devname>.

	Signed-off-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9c7262399ba12825f3ca4b00a76d8d5e77c720f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 942369d80444,9ea7b37f87f8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -170,7 -170,8 +170,12 @@@ static int mlx5e_get_sset_count(struct 
  	case ETH_SS_STATS:
  		return NUM_SW_COUNTERS +
  		       MLX5E_NUM_Q_CNTRS(priv) +
++<<<<<<< HEAD
 +		       NUM_VPORT_COUNTERS + NUM_PPORT_COUNTERS(priv) +
++=======
+ 		       NUM_VPORT_COUNTERS + NUM_PPORT_COUNTERS +
+ 		       NUM_PCIE_COUNTERS +
++>>>>>>> 9c7262399ba1 (net/mlx5e: Expose PCIe statistics to ethtool)
  		       MLX5E_NUM_RQ_STATS(priv) +
  		       MLX5E_NUM_SQ_STATS(priv) +
  		       MLX5E_NUM_PFC_COUNTERS(priv) +
@@@ -216,9 -217,13 +221,19 @@@ static void mlx5e_fill_stats_strings(st
  		strcpy(data + (idx++) * ETH_GSTRING_LEN,
  		       pport_2819_stats_desc[i].format);
  
++<<<<<<< HEAD
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_phy_statistical_stats_desc[i].format);
++=======
+ 	for (i = 0; i < NUM_PCIE_PERF_COUNTERS; i++)
+ 		strcpy(data + (idx++) * ETH_GSTRING_LEN,
+ 		       pcie_perf_stats_desc[i].format);
+ 
+ 	for (i = 0; i < NUM_PCIE_TAS_COUNTERS; i++)
+ 		strcpy(data + (idx++) * ETH_GSTRING_LEN,
+ 		       pcie_tas_stats_desc[i].format);
++>>>>>>> 9c7262399ba1 (net/mlx5e: Expose PCIe statistics to ethtool)
  
  	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
  		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
@@@ -329,9 -334,13 +344,19 @@@ static void mlx5e_get_ethtool_stats(str
  		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2819_counters,
  						  pport_2819_stats_desc, i);
  
++<<<<<<< HEAD
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.phy_statistical_counters,
 +						  pport_phy_statistical_stats_desc, i);
++=======
+ 	for (i = 0; i < NUM_PCIE_PERF_COUNTERS; i++)
+ 		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
+ 						  pcie_perf_stats_desc, i);
+ 
+ 	for (i = 0; i < NUM_PCIE_TAS_COUNTERS; i++)
+ 		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_tas_counters,
+ 						  pcie_tas_stats_desc, i);
++>>>>>>> 9c7262399ba1 (net/mlx5e: Expose PCIe statistics to ethtool)
  
  	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
  		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index fe1433b95149,5da6a1c0de14..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -348,19 -386,18 +374,25 @@@ static const struct counter_desc sq_sta
  #define NUM_PPORT_802_3_COUNTERS	ARRAY_SIZE(pport_802_3_stats_desc)
  #define NUM_PPORT_2863_COUNTERS		ARRAY_SIZE(pport_2863_stats_desc)
  #define NUM_PPORT_2819_COUNTERS		ARRAY_SIZE(pport_2819_stats_desc)
++<<<<<<< HEAD
 +#define NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_phy_statistical_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, ppcnt_statistical_group))
++=======
+ #define NUM_PCIE_PERF_COUNTERS		ARRAY_SIZE(pcie_perf_stats_desc)
+ #define NUM_PCIE_TAS_COUNTERS		ARRAY_SIZE(pcie_tas_stats_desc)
++>>>>>>> 9c7262399ba1 (net/mlx5e: Expose PCIe statistics to ethtool)
  #define NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS \
  	ARRAY_SIZE(pport_per_prio_traffic_stats_desc)
  #define NUM_PPORT_PER_PRIO_PFC_COUNTERS \
  	ARRAY_SIZE(pport_per_prio_pfc_stats_desc)
 -#define NUM_PPORT_COUNTERS		(NUM_PPORT_802_3_COUNTERS + \
 +#define NUM_PPORT_COUNTERS(priv)	(NUM_PPORT_802_3_COUNTERS + \
  					 NUM_PPORT_2863_COUNTERS  + \
  					 NUM_PPORT_2819_COUNTERS  + \
 +					 NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) + \
  					 NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS * \
  					 NUM_PPORT_PRIO)
+ #define NUM_PCIE_COUNTERS		(NUM_PCIE_PERF_COUNTERS + NUM_PCIE_TAS_COUNTERS)
  #define NUM_RQ_STATS			ARRAY_SIZE(rq_stats_desc)
  #define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index ae009c7fda21..955dc90e6d19 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -231,12 +231,36 @@ static void mlx5e_update_q_counter(struct mlx5e_priv *priv)
 				      &qcnt->rx_out_of_buffer);
 }
 
+static void mlx5e_update_pcie_counters(struct mlx5e_priv *priv)
+{
+	struct mlx5e_pcie_stats *pcie_stats = &priv->stats.pcie;
+	struct mlx5_core_dev *mdev = priv->mdev;
+	int sz = MLX5_ST_SZ_BYTES(mpcnt_reg);
+	void *out;
+	u32 *in;
+
+	in = mlx5_vzalloc(sz);
+	if (!in)
+		return;
+
+	out = pcie_stats->pcie_perf_counters;
+	MLX5_SET(mpcnt_reg, in, grp, MLX5_PCIE_PERFORMANCE_COUNTERS_GROUP);
+	mlx5_core_access_reg(mdev, in, sz, out, sz, MLX5_REG_MPCNT, 0, 0);
+
+	out = pcie_stats->pcie_tas_counters;
+	MLX5_SET(mpcnt_reg, in, grp, MLX5_PCIE_TIMERS_AND_STATES_COUNTERS_GROUP);
+	mlx5_core_access_reg(mdev, in, sz, out, sz, MLX5_REG_MPCNT, 0, 0);
+
+	kvfree(in);
+}
+
 void mlx5e_update_stats(struct mlx5e_priv *priv)
 {
 	mlx5e_update_q_counter(priv);
 	mlx5e_update_vport_counters(priv);
 	mlx5e_update_pport_counters(priv);
 	mlx5e_update_sw_counters(priv);
+	mlx5e_update_pcie_counters(priv);
 }
 
 static void mlx5e_update_stats_work(struct work_struct *work)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
