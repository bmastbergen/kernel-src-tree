nvme: update and rename nvme_cancel_io to nvme_cancel_request

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [nvme] update and rename nvme_cancel_io to nvme_cancel_request (David Milburn) [1384526 1389755 1366753 1374291 1383834]
Rebuild_FUZZ: 94.83%
commit-author Ming Lin <ming.l@samsung.com>
commit e1958e6534a2d4ebb2dfcd0b3f16ff8e277a5b0c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e1958e65.failed

nvme_cancel_io is a bit confusing (given the distinction of io/admin),
so rename it to nvme_cancel_request.

And update it a bit to pass in struct nvme_ctrl, so it can be used
by Fabrics driver also.

	Signed-off-by: Ming Lin <ming.l@samsung.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Suggested-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Keith Busch <keith.bsuch@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit e1958e6534a2d4ebb2dfcd0b3f16ff8e277a5b0c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 6cf19a97b3a4,4af61c909353..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -917,16 -919,15 +917,25 @@@ static enum blk_eh_timer_return nvme_ti
  	return BLK_EH_RESET_TIMER;
  }
  
++<<<<<<< HEAD
 +static void nvme_cancel_queue_ios(struct request *req, void *data, bool reserved)
++=======
+ static void nvme_cancel_request(struct request *req, void *data, bool reserved)
++>>>>>>> e1958e6534a2 (nvme: update and rename nvme_cancel_io to nvme_cancel_request)
  {
 +	struct nvme_queue *nvmeq = data;
  	int status;
  
  	if (!blk_mq_request_started(req))
  		return;
  
++<<<<<<< HEAD
 +	dev_dbg_ratelimited(nvmeq->q_dmadev,
 +		 "Cancelling I/O %d QID %d\n", req->tag, nvmeq->qid);
++=======
+ 	dev_dbg_ratelimited(((struct nvme_ctrl *) data)->device,
+ 				"Cancelling I/O %d", req->tag);
++>>>>>>> e1958e6534a2 (nvme: update and rename nvme_cancel_io to nvme_cancel_request)
  
  	status = NVME_SC_ABORT_REQ;
  	if (blk_queue_dying(req->q))
@@@ -1733,8 -1722,8 +1742,13 @@@ static void nvme_dev_disable(struct nvm
  	}
  	nvme_pci_disable(dev);
  
++<<<<<<< HEAD
 +	for (i = dev->queue_count - 1; i >= 0; i--)
 +		nvme_clear_queue(dev->queues[i]);
++=======
+ 	blk_mq_tagset_busy_iter(&dev->tagset, nvme_cancel_request, &dev->ctrl);
+ 	blk_mq_tagset_busy_iter(&dev->admin_tagset, nvme_cancel_request, &dev->ctrl);
++>>>>>>> e1958e6534a2 (nvme: update and rename nvme_cancel_io to nvme_cancel_request)
  	mutex_unlock(&dev->shutdown_lock);
  }
  
* Unmerged path drivers/nvme/host/pci.c
