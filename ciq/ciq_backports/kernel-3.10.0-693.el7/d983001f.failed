i40e: no need to check is_vsi_in_vlan before calling i40e_del_mac_all_vlan

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit d983001f044cf823490af7dcfcde39cfb42be0db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d983001f.failed

This function won't be appreciably slower when in VLAN mode, so there is
no real reason to not just call it directly. In either case, we still
must search the full table for a MAC/VLAN pair. We do get to stop
searching a tiny bit early in the case of knowing we are not in VLAN
mode, but this is a minor savings and we can avoid the code complexity
by not having to worry about the check.

Change-ID: I533412195b3a42f51cf629e3675dd5145aea8625
	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit d983001f044cf823490af7dcfcde39cfb42be0db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 2f00e31ef630,ab0a04bb6a32..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -1631,6 -1748,43 +1631,46 @@@ static void i40e_vsi_setup_queue_map(st
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * i40e_addr_sync - Callback for dev_(mc|uc)_sync to add address
+  * @netdev: the netdevice
+  * @addr: address to add
+  *
+  * Called by __dev_(mc|uc)_sync when an address needs to be added. We call
+  * __dev_(uc|mc)_sync from .set_rx_mode and guarantee to hold the hash lock.
+  */
+ static int i40e_addr_sync(struct net_device *netdev, const u8 *addr)
+ {
+ 	struct i40e_netdev_priv *np = netdev_priv(netdev);
+ 	struct i40e_vsi *vsi = np->vsi;
+ 
+ 	if (i40e_put_mac_in_vlan(vsi, addr))
+ 		return 0;
+ 	else
+ 		return -ENOMEM;
+ }
+ 
+ /**
+  * i40e_addr_unsync - Callback for dev_(mc|uc)_sync to remove address
+  * @netdev: the netdevice
+  * @addr: address to add
+  *
+  * Called by __dev_(mc|uc)_sync when an address needs to be removed. We call
+  * __dev_(uc|mc)_sync from .set_rx_mode and guarantee to hold the hash lock.
+  */
+ static int i40e_addr_unsync(struct net_device *netdev, const u8 *addr)
+ {
+ 	struct i40e_netdev_priv *np = netdev_priv(netdev);
+ 	struct i40e_vsi *vsi = np->vsi;
+ 
+ 	i40e_del_mac_all_vlan(vsi, addr);
+ 
+ 	return 0;
+ }
+ 
+ /**
++>>>>>>> d983001f044c (i40e: no need to check is_vsi_in_vlan before calling i40e_del_mac_all_vlan)
   * i40e_set_rx_mode - NDO callback to set the netdev filters
   * @netdev: network interface device structure
   **/
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
