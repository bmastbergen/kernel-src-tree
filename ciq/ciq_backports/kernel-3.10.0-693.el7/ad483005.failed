x86/platform/uv: Fix calculation of Global Physical Address

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] platform/uv: Fix calculation of Global Physical Address (Frank Ramsay) [1434837]
Rebuild_FUZZ: 96.49%
commit-author Mike Travis <mike.travis@hpe.com>
commit ad4830051aac0b967add82ac168f49edf11f01a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ad483005.failed

The calculation of the global physical address (GPA) on UV4 is
incorrect.  The gnode_extra/upper global offset should only be
applied for fixed address space systems (UV1..3).

	Tested-by: John Estabrook <john.estabrook@hpe.com>
	Signed-off-by: Mike Travis <mike.travis@hpe.com>
	Cc: Dimitri Sivanich <dimitri.sivanich@hpe.com>
	Cc: John Estabrook <estabrook@sgi.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Russ Anderson <russ.anderson@hpe.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20170321231646.667689538@asylum.americas.sgi.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit ad4830051aac0b967add82ac168f49edf11f01a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/apic/x2apic_uv_x.c
diff --cc arch/x86/kernel/apic/x2apic_uv_x.c
index bdcca5ada7d6,86f20cc0a65e..000000000000
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@@ -1108,49 -1088,47 +1108,57 @@@ void __init uv_init_hub_info(struct uv_
  		(1UL << (mn.m_val + mn.n_val)) - 1 :
  		(1UL << uv_cpuid.gpa_shift) - 1;
  
 -	hi->m_val		= mn.m_val;
 -	hi->n_val		= mn.n_val;
 -	hi->m_shift		= mn.m_shift;
 -	hi->n_lshift		= mn.n_lshift ? mn.n_lshift : 0;
 -	hi->hub_revision	= uv_hub_info->hub_revision;
 -	hi->pnode_mask		= uv_cpuid.pnode_mask;
 -	hi->min_pnode		= _min_pnode;
 -	hi->min_socket		= _min_socket;
 -	hi->pnode_to_socket	= _pnode_to_socket;
 -	hi->socket_to_node	= _socket_to_node;
 -	hi->socket_to_pnode	= _socket_to_pnode;
 -	hi->gr_table_len	= _gr_table_len;
 -	hi->gr_table		= _gr_table;
 +	node_id.v = uv_read_local_mmr(UVH_NODE_ID);
 +	uv_cpuid.gnode_shift = max_t(unsigned int,
 +					uv_cpuid.gnode_shift, mn.n_val);
 +	hub_info->gnode_extra =
 +		(node_id.s.node_id & ~((1 << uv_cpuid.gnode_shift) - 1)) >> 1;
  
++<<<<<<< HEAD
 +	hub_info->gnode_upper =
 +		((unsigned long)hub_info->gnode_extra << mn.m_val);
++=======
+ 	node_id.v		= uv_read_local_mmr(UVH_NODE_ID);
+ 	uv_cpuid.gnode_shift	= max_t(unsigned int, uv_cpuid.gnode_shift, mn.n_val);
+ 	hi->gnode_extra		= (node_id.s.node_id & ~((1 << uv_cpuid.gnode_shift) - 1)) >> 1;
+ 	if (mn.m_val)
+ 		hi->gnode_upper	= (u64)hi->gnode_extra << mn.m_val;
++>>>>>>> ad4830051aac (x86/platform/uv: Fix calculation of Global Physical Address)
  
  	if (uv_gp_table) {
 -		hi->global_mmr_base	= uv_gp_table->mmr_base;
 -		hi->global_mmr_shift	= uv_gp_table->mmr_shift;
 -		hi->global_gru_base	= uv_gp_table->gru_base;
 -		hi->global_gru_shift	= uv_gp_table->gru_shift;
 -		hi->gpa_shift		= uv_gp_table->gpa_shift;
 -		hi->gpa_mask		= (1UL << hi->gpa_shift) - 1;
 +		hub_info->global_mmr_base = uv_gp_table->mmr_base;
 +		hub_info->global_mmr_shift = uv_gp_table->mmr_shift;
 +		hub_info->global_gru_base = uv_gp_table->gru_base;
 +		hub_info->global_gru_shift = uv_gp_table->gru_shift;
 +		hub_info->gpa_shift = uv_gp_table->gpa_shift;
 +		hub_info->gpa_mask = (1UL << hub_info->gpa_shift) - 1;
  	} else {
 -		hi->global_mmr_base	= uv_read_local_mmr(UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR) & ~UV_MMR_ENABLE;
 -		hi->global_mmr_shift	= _UV_GLOBAL_MMR64_PNODE_SHIFT;
 +		hub_info->global_mmr_base =
 +			uv_read_local_mmr(UVH_RH_GAM_MMR_OVERLAY_CONFIG_MMR) &
 +					~UV_MMR_ENABLE;
 +		hub_info->global_mmr_shift = _UV_GLOBAL_MMR64_PNODE_SHIFT;
  	}
  
 -	get_lowmem_redirect(&hi->lowmem_remap_base, &hi->lowmem_remap_top);
 +	get_lowmem_redirect(
 +		&hub_info->lowmem_remap_base, &hub_info->lowmem_remap_top);
 +
 +	hub_info->apic_pnode_shift = uv_cpuid.socketid_shift;
  
 -	hi->apic_pnode_shift = uv_cpuid.socketid_shift;
 +	/* show system specific info */
 +	pr_info("UV: N:%d M:%d m_shift:%d n_lshift:%d\n",
 +		hub_info->n_val, hub_info->m_val,
 +		hub_info->m_shift, hub_info->n_lshift);
  
 -	/* Show system specific info: */
 -	pr_info("UV: N:%d M:%d m_shift:%d n_lshift:%d\n", hi->n_val, hi->m_val, hi->m_shift, hi->n_lshift);
 -	pr_info("UV: gpa_mask/shift:0x%lx/%d pnode_mask:0x%x apic_pns:%d\n", hi->gpa_mask, hi->gpa_shift, hi->pnode_mask, hi->apic_pnode_shift);
 -	pr_info("UV: mmr_base/shift:0x%lx/%ld gru_base/shift:0x%lx/%ld\n", hi->global_mmr_base, hi->global_mmr_shift, hi->global_gru_base, hi->global_gru_shift);
 -	pr_info("UV: gnode_upper:0x%lx gnode_extra:0x%x\n", hi->gnode_upper, hi->gnode_extra);
 +	pr_info("UV: gpa_mask/shift:0x%lx/%d pnode_mask:0x%x apic_pns:%d\n",
 +		hub_info->gpa_mask, hub_info->gpa_shift,
 +		hub_info->pnode_mask, hub_info->apic_pnode_shift);
 +
 +	pr_info("UV: mmr_base/shift:0x%lx/%ld gru_base/shift:0x%lx/%ld\n",
 +		hub_info->global_mmr_base, hub_info->global_mmr_shift,
 +		hub_info->global_gru_base, hub_info->global_gru_shift);
 +
 +	pr_info("UV: gnode_upper:0x%lx gnode_extra:0x%x\n",
 +		hub_info->gnode_upper, hub_info->gnode_extra);
  }
  
  static void __init decode_gam_params(unsigned long ptr)
diff --git a/arch/x86/include/asm/uv/uv_hub.h b/arch/x86/include/asm/uv/uv_hub.h
index 0193cbe21d32..6645ef9db787 100644
--- a/arch/x86/include/asm/uv/uv_hub.h
+++ b/arch/x86/include/asm/uv/uv_hub.h
@@ -485,15 +485,17 @@ static inline unsigned long uv_soc_phys_ram_to_gpa(unsigned long paddr)
 
 	if (paddr < uv_hub_info->lowmem_remap_top)
 		paddr |= uv_hub_info->lowmem_remap_base;
-	paddr |= uv_hub_info->gnode_upper;
-	if (m_val)
+
+	if (m_val) {
+		paddr |= uv_hub_info->gnode_upper;
 		paddr = ((paddr << uv_hub_info->m_shift)
 						>> uv_hub_info->m_shift) |
 			((paddr >> uv_hub_info->m_val)
 						<< uv_hub_info->n_lshift);
-	else
+	} else {
 		paddr |= uv_soc_phys_ram_to_nasid(paddr)
 						<< uv_hub_info->gpa_shift;
+	}
 	return paddr;
 }
 
* Unmerged path arch/x86/kernel/apic/x2apic_uv_x.c
