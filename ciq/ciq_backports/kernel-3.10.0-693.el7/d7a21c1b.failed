xprtrdma: Reset MRs in frwr_op_unmap_sync()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Chuck Lever <chuck.lever@oracle.com>
commit d7a21c1bed54adcf96e1713019a6ad87e90fbbc3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d7a21c1b.failed

frwr_op_unmap_sync() is now invoked in a workqueue context, the same
as __frwr_queue_recovery(). There's no need to defer MR reset if
posting LOCAL_INV MRs fails.

This means that even when ib_post_send() fails (which should occur
very rarely) the invalidation and DMA unmapping steps are still done
in the correct order.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Tested-by: Steve Wise <swise@opengridcomputing.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit d7a21c1bed54adcf96e1713019a6ad87e90fbbc3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtrdma/frwr_ops.c
diff --cc net/sunrpc/xprtrdma/frwr_ops.c
index ee5e390519e0,ce245dc4acab..000000000000
--- a/net/sunrpc/xprtrdma/frwr_ops.c
+++ b/net/sunrpc/xprtrdma/frwr_ops.c
@@@ -490,24 -507,6 +507,27 @@@ __frwr_prepare_linv_wr(struct rpcrdma_m
  	return invalidate_wr;
  }
  
++<<<<<<< HEAD
 +static void
 +__frwr_dma_unmap(struct rpcrdma_xprt *r_xprt, struct rpcrdma_mr_seg *seg,
 +		 int rc)
 +{
 +	struct ib_device *device = r_xprt->rx_ia.ri_device;
 +	struct rpcrdma_mw *mw = seg->rl_mw;
 +	struct rpcrdma_frmr *f = &mw->frmr;
 +
 +	seg->rl_mw = NULL;
 +
 +	ib_dma_unmap_sg(device, f->sg, f->sg_nents, seg->mr_dir);
 +
 +	if (!rc)
 +		rpcrdma_put_mw(r_xprt, mw);
 +	else
 +		__frwr_queue_recovery(mw);
 +}
 +
++=======
++>>>>>>> d7a21c1bed54 (xprtrdma: Reset MRs in frwr_op_unmap_sync())
  /* Invalidate all memory regions that were registered for "req".
   *
   * Sleeps until it is safe for the host CPU to access the
* Unmerged path net/sunrpc/xprtrdma/frwr_ops.c
