drm/i915/dp: DP audio API changes for MST

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Pandiyan, Dhinakaran <dhinakaran.pandiyan@intel.com>
commit f931894194b9395313d1c34f95ceb8d91f49790d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f9318941.failed

DP MST provides the capability to send multiple video and audio streams
through a single port. This requires the API's between i915 and audio
drivers to distinguish between multiple audio capable displays that can be
connected to a port. Currently only the port identity is shared in the
APIs. This patch adds support for MST with an additional parameter
'int pipe'. The existing parameter 'port' does not change it's meaning.

pipe =
	MST	: display pipe that the stream originates from
	Non-MST	: -1

Affected APIs:
struct i915_audio_component_ops
-       int (*sync_audio_rate)(struct device *, int port, int rate);
+	int (*sync_audio_rate)(struct device *, int port, int pipe,
+	     int rate);

-       int (*get_eld)(struct device *, int port, bool *enabled,
-                       unsigned char *buf, int max_bytes);
+       int (*get_eld)(struct device *, int port, int pipe,
+		       bool *enabled, unsigned char *buf, int max_bytes);

struct i915_audio_component_audio_ops
-       void (*pin_eld_notify)(void *audio_ptr, int port);
+       void (*pin_eld_notify)(void *audio_ptr, int port, int pipe);

This patch makes dummy changes in the audio drivers (thanks Libin) for
build to succeed. The audio side drivers will send the right 'pipe' values
for MST in patches that will follow.

v2:
Renamed the new API parameter from 'dev_id' to 'pipe'. (Jim, Ville)
Included Asoc driver API compatibility changes from Jeeja.
Added WARN_ON() for invalid pipe in get_saved_encoder(). (Takashi)
Added comment for av_enc_map[] definition. (Takashi)

v3:
Fixed logic error introduced while renaming 'dev_id' as 'pipe' (Ville)
Renamed get_saved_encoder() to get_saved_enc() to reduce line length

v4:
Rebased.
Parameter check for pipe < -1 values in get_saved_enc() (Ville)
Switched to for_each_pipe() in get_saved_enc() (Ville)
Renamed 'pipe' to 'dev_id' in audio side code (Takashi)

v5:
Included a comment for the dev_id arg. (Libin)

	Signed-off-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
	Reviewed-by: Takashi Iwai <tiwai@suse.de>
	Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1474488168-2343-1-git-send-email-dhinakaran.pandiyan@intel.com
(cherry picked from commit f931894194b9395313d1c34f95ceb8d91f49790d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_audio.c
diff --cc drivers/gpu/drm/i915/intel_audio.c
index 7d281b40064a,1f168e27af10..000000000000
--- a/drivers/gpu/drm/i915/intel_audio.c
+++ b/drivers/gpu/drm/i915/intel_audio.c
@@@ -495,11 -488,10 +495,16 @@@ void intel_audio_codec_enable(struct in
  	struct intel_crtc *crtc = to_intel_crtc(encoder->crtc);
  	const struct drm_display_mode *adjusted_mode = &crtc->config->base.adjusted_mode;
  	struct drm_connector *connector;
 -	struct drm_i915_private *dev_priv = to_i915(encoder->dev);
 +	struct drm_device *dev = encoder->dev;
 +	struct drm_i915_private *dev_priv = dev->dev_private;
  	struct i915_audio_component *acomp = dev_priv->audio_component;
++<<<<<<< HEAD
 +	struct intel_digital_port *intel_dig_port = enc_to_dig_port(encoder);
 +	enum port port = intel_dig_port->port;
++=======
+ 	enum port port = intel_encoder->port;
+ 	enum pipe pipe = crtc->pipe;
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  
  	connector = drm_select_eld(encoder);
  	if (!connector)
@@@ -523,13 -515,19 +528,23 @@@
  						     adjusted_mode);
  
  	mutex_lock(&dev_priv->av_mutex);
++<<<<<<< HEAD
 +	intel_dig_port->audio_connector = connector;
++=======
+ 	intel_encoder->audio_connector = connector;
+ 
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  	/* referred in audio callbacks */
- 	dev_priv->dig_port_map[port] = intel_encoder;
+ 	dev_priv->av_enc_map[pipe] = intel_encoder;
  	mutex_unlock(&dev_priv->av_mutex);
  
+ 	/* audio drivers expect pipe = -1 to indicate Non-MST cases */
+ 	if (intel_encoder->type != INTEL_OUTPUT_DP_MST)
+ 		pipe = -1;
+ 
  	if (acomp && acomp->audio_ops && acomp->audio_ops->pin_eld_notify)
- 		acomp->audio_ops->pin_eld_notify(acomp->audio_ops->audio_ptr, (int) port);
+ 		acomp->audio_ops->pin_eld_notify(acomp->audio_ops->audio_ptr,
+ 						 (int) port, (int) pipe);
  }
  
  /**
@@@ -542,22 -540,27 +557,38 @@@
  void intel_audio_codec_disable(struct intel_encoder *intel_encoder)
  {
  	struct drm_encoder *encoder = &intel_encoder->base;
 -	struct drm_i915_private *dev_priv = to_i915(encoder->dev);
 +	struct drm_device *dev = encoder->dev;
 +	struct drm_i915_private *dev_priv = dev->dev_private;
  	struct i915_audio_component *acomp = dev_priv->audio_component;
++<<<<<<< HEAD
 +	struct intel_digital_port *intel_dig_port = enc_to_dig_port(encoder);
 +	enum port port = intel_dig_port->port;
++=======
+ 	enum port port = intel_encoder->port;
+ 	struct intel_crtc *crtc = to_intel_crtc(encoder->crtc);
+ 	enum pipe pipe = crtc->pipe;
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  
  	if (dev_priv->display.audio_codec_disable)
  		dev_priv->display.audio_codec_disable(intel_encoder);
  
  	mutex_lock(&dev_priv->av_mutex);
++<<<<<<< HEAD
 +	intel_dig_port->audio_connector = NULL;
 +	dev_priv->dig_port_map[port] = NULL;
++=======
+ 	intel_encoder->audio_connector = NULL;
+ 	dev_priv->av_enc_map[pipe] = NULL;
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  	mutex_unlock(&dev_priv->av_mutex);
  
+ 	/* audio drivers expect pipe = -1 to indicate Non-MST cases */
+ 	if (intel_encoder->type != INTEL_OUTPUT_DP_MST)
+ 		pipe = -1;
+ 
  	if (acomp && acomp->audio_ops && acomp->audio_ops->pin_eld_notify)
- 		acomp->audio_ops->pin_eld_notify(acomp->audio_ops->audio_ptr, (int) port);
+ 		acomp->audio_ops->pin_eld_notify(acomp->audio_ops->audio_ptr,
+ 						 (int) port, (int) pipe);
  }
  
  /**
@@@ -628,18 -632,39 +659,49 @@@ static int i915_audio_component_get_cdc
  	if (WARN_ON_ONCE(!HAS_DDI(dev_priv)))
  		return -ENODEV;
  
 -	return dev_priv->cdclk_freq;
 +	intel_display_power_get(dev_priv, POWER_DOMAIN_AUDIO);
 +	ret = dev_priv->display.get_display_clock_speed(dev_priv->dev);
 +
 +	intel_display_power_put(dev_priv, POWER_DOMAIN_AUDIO);
 +
 +	return ret;
  }
  
++<<<<<<< HEAD
 +static int i915_audio_component_sync_audio_rate(struct device *dev,
 +						int port, int rate)
++=======
+ static struct intel_encoder *get_saved_enc(struct drm_i915_private *dev_priv,
+ 					       int port, int pipe)
+ {
+ 
+ 	if (WARN_ON(pipe >= I915_MAX_PIPES))
+ 		return NULL;
+ 
+ 	/* MST */
+ 	if (pipe >= 0)
+ 		return dev_priv->av_enc_map[pipe];
+ 
+ 	/* Non-MST */
+ 	for_each_pipe(dev_priv, pipe) {
+ 		struct intel_encoder *encoder;
+ 
+ 		encoder = dev_priv->av_enc_map[pipe];
+ 		if (encoder == NULL)
+ 			continue;
+ 
+ 		if (port == encoder->port)
+ 			return encoder;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ static int i915_audio_component_sync_audio_rate(struct device *kdev, int port,
+ 						int pipe, int rate)
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  {
 -	struct drm_i915_private *dev_priv = kdev_to_i915(kdev);
 +	struct drm_i915_private *dev_priv = dev_to_i915(dev);
  	struct intel_encoder *intel_encoder;
  	struct intel_crtc *crtc;
  	struct drm_display_mode *mode;
@@@ -656,13 -680,14 +717,13 @@@
  	    !IS_HASWELL(dev_priv))
  		return 0;
  
 -	i915_audio_component_get_power(kdev);
  	mutex_lock(&dev_priv->av_mutex);
+ 
  	/* 1. get the pipe */
- 	intel_encoder = dev_priv->dig_port_map[port];
- 	/* intel_encoder might be NULL for DP MST */
+ 	intel_encoder = get_saved_enc(dev_priv, port, pipe);
  	if (!intel_encoder || !intel_encoder->base.crtc ||
  	    intel_encoder->type != INTEL_OUTPUT_HDMI) {
- 		DRM_DEBUG_KMS("no valid port %c\n", port_name(port));
+ 		DRM_DEBUG_KMS("Not valid for port %c\n", port_name(port));
  		err = -ENODEV;
  		goto unlock;
  	}
@@@ -709,28 -729,31 +765,50 @@@
  	return err;
  }
  
++<<<<<<< HEAD
 +static int i915_audio_component_get_eld(struct device *dev, int port,
 +					bool *enabled,
++=======
+ static int i915_audio_component_get_eld(struct device *kdev, int port,
+ 					int pipe, bool *enabled,
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  					unsigned char *buf, int max_bytes)
  {
 -	struct drm_i915_private *dev_priv = kdev_to_i915(kdev);
 +	struct drm_i915_private *dev_priv = dev_to_i915(dev);
  	struct intel_encoder *intel_encoder;
 +	struct intel_digital_port *intel_dig_port;
  	const u8 *eld;
  	int ret = -EINVAL;
  
  	mutex_lock(&dev_priv->av_mutex);
++<<<<<<< HEAD
 +	intel_encoder = dev_priv->dig_port_map[port];
 +	/* intel_encoder might be NULL for DP MST */
 +	if (intel_encoder) {
 +		ret = 0;
 +		intel_dig_port = enc_to_dig_port(&intel_encoder->base);
 +		*enabled = intel_dig_port->audio_connector != NULL;
 +		if (*enabled) {
 +			eld = intel_dig_port->audio_connector->eld;
 +			ret = drm_eld_size(eld);
 +			memcpy(buf, eld, min(max_bytes, ret));
 +		}
++=======
+ 
+ 	intel_encoder = get_saved_enc(dev_priv, port, pipe);
+ 	if (!intel_encoder) {
+ 		DRM_DEBUG_KMS("Not valid for port %c\n", port_name(port));
+ 		mutex_unlock(&dev_priv->av_mutex);
+ 		return ret;
+ 	}
+ 
+ 	ret = 0;
+ 	*enabled = intel_encoder->audio_connector != NULL;
+ 	if (*enabled) {
+ 		eld = intel_encoder->audio_connector->eld;
+ 		ret = drm_eld_size(eld);
+ 		memcpy(buf, eld, min(max_bytes, ret));
++>>>>>>> f931894194b9 (drm/i915/dp: DP audio API changes for MST)
  	}
  
  	mutex_unlock(&dev_priv->av_mutex);
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 98315945fb50..2a7f98437f24 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -2029,7 +2029,8 @@ struct drm_i915_private {
 	/* perform PHY state sanity checks? */
 	bool chv_phy_assert[2];
 
-	struct intel_encoder *dig_port_map[I915_MAX_PORTS];
+	/* Used to save the pipe-to-encoder mapping for audio */
+	struct intel_encoder *av_enc_map[I915_MAX_PIPES];
 
 	/*
 	 * NOTE: This is the dri1/ums dungeon, don't add stuff here. Your patch
* Unmerged path drivers/gpu/drm/i915/intel_audio.c
diff --git a/include/drm/i915_component.h b/include/drm/i915_component.h
index b46fa0ef3005..545c6e0fea7d 100644
--- a/include/drm/i915_component.h
+++ b/include/drm/i915_component.h
@@ -64,7 +64,7 @@ struct i915_audio_component_ops {
 	 * Called from audio driver. After audio driver sets the
 	 * sample rate, it will call this function to set n/cts
 	 */
-	int (*sync_audio_rate)(struct device *, int port, int rate);
+	int (*sync_audio_rate)(struct device *, int port, int pipe, int rate);
 	/**
 	 * @get_eld: fill the audio state and ELD bytes for the given port
 	 *
@@ -77,7 +77,7 @@ struct i915_audio_component_ops {
 	 * Note that the returned size may be over @max_bytes.  Then it
 	 * implies that only a part of ELD has been copied to the buffer.
 	 */
-	int (*get_eld)(struct device *, int port, bool *enabled,
+	int (*get_eld)(struct device *, int port, int pipe, bool *enabled,
 		       unsigned char *buf, int max_bytes);
 };
 
@@ -97,7 +97,7 @@ struct i915_audio_component_audio_ops {
 	 * status accordingly (even when the HDA controller is in power save
 	 * mode).
 	 */
-	void (*pin_eld_notify)(void *audio_ptr, int port);
+	void (*pin_eld_notify)(void *audio_ptr, int port, int pipe);
 };
 
 /**
diff --git a/include/sound/hda_i915.h b/include/sound/hda_i915.h
index 53c6ef54fe1b..c4368bd51aed 100644
--- a/include/sound/hda_i915.h
+++ b/include/sound/hda_i915.h
@@ -10,8 +10,9 @@
 int snd_hdac_set_codec_wakeup(struct hdac_bus *bus, bool enable);
 int snd_hdac_display_power(struct hdac_bus *bus, bool enable);
 void snd_hdac_i915_set_bclk(struct hdac_bus *bus);
-int snd_hdac_sync_audio_rate(struct hdac_device *codec, hda_nid_t nid, int rate);
-int snd_hdac_acomp_get_eld(struct hdac_device *codec, hda_nid_t nid,
+int snd_hdac_sync_audio_rate(struct hdac_device *codec, hda_nid_t nid,
+			     int dev_id, int rate);
+int snd_hdac_acomp_get_eld(struct hdac_device *codec, hda_nid_t nid, int dev_id,
 			   bool *audio_enabled, char *buffer, int max_bytes);
 int snd_hdac_i915_init(struct hdac_bus *bus);
 int snd_hdac_i915_exit(struct hdac_bus *bus);
@@ -29,13 +30,13 @@ static inline void snd_hdac_i915_set_bclk(struct hdac_bus *bus)
 {
 }
 static inline int snd_hdac_sync_audio_rate(struct hdac_device *codec,
-					   hda_nid_t nid, int rate)
+					   hda_nid_t nid, int dev_id, int rate)
 {
 	return 0;
 }
 static inline int snd_hdac_acomp_get_eld(struct hdac_device *codec, hda_nid_t nid,
-					 bool *audio_enabled, char *buffer,
-					 int max_bytes)
+					 int dev_id, bool *audio_enabled,
+					 char *buffer, int max_bytes)
 {
 	return -ENODEV;
 }
diff --git a/sound/hda/hdac_i915.c b/sound/hda/hdac_i915.c
index dad439614cfa..f7db72275531 100644
--- a/sound/hda/hdac_i915.c
+++ b/sound/hda/hdac_i915.c
@@ -193,6 +193,7 @@ static int pin2port(struct hdac_device *codec, hda_nid_t pin_nid)
  * snd_hdac_sync_audio_rate - Set N/CTS based on the sample rate
  * @codec: HDA codec
  * @nid: the pin widget NID
+ * @dev_id: device identifier
  * @rate: the sample rate to set
  *
  * This function is supposed to be used only by a HD-audio controller
@@ -201,18 +202,20 @@ static int pin2port(struct hdac_device *codec, hda_nid_t pin_nid)
  * This function sets N/CTS value based on the given sample rate.
  * Returns zero for success, or a negative error code.
  */
-int snd_hdac_sync_audio_rate(struct hdac_device *codec, hda_nid_t nid, int rate)
+int snd_hdac_sync_audio_rate(struct hdac_device *codec, hda_nid_t nid,
+			     int dev_id, int rate)
 {
 	struct hdac_bus *bus = codec->bus;
 	struct i915_audio_component *acomp = bus->audio_component;
-	int port;
+	int port, pipe;
 
 	if (!acomp || !acomp->ops || !acomp->ops->sync_audio_rate)
 		return -ENODEV;
 	port = pin2port(codec, nid);
 	if (port < 0)
 		return -EINVAL;
-	return acomp->ops->sync_audio_rate(acomp->dev, port, rate);
+	pipe = dev_id;
+	return acomp->ops->sync_audio_rate(acomp->dev, port, pipe, rate);
 }
 EXPORT_SYMBOL_GPL(snd_hdac_sync_audio_rate);
 
@@ -220,6 +223,7 @@ EXPORT_SYMBOL_GPL(snd_hdac_sync_audio_rate);
  * snd_hdac_acomp_get_eld - Get the audio state and ELD via component
  * @codec: HDA codec
  * @nid: the pin widget NID
+ * @dev_id: device identifier
  * @audio_enabled: the pointer to store the current audio state
  * @buffer: the buffer pointer to store ELD bytes
  * @max_bytes: the max bytes to be stored on @buffer
@@ -236,12 +240,12 @@ EXPORT_SYMBOL_GPL(snd_hdac_sync_audio_rate);
  * thus it may be over @max_bytes.  If it's over @max_bytes, it implies
  * that only a part of ELD bytes have been fetched.
  */
-int snd_hdac_acomp_get_eld(struct hdac_device *codec, hda_nid_t nid,
+int snd_hdac_acomp_get_eld(struct hdac_device *codec, hda_nid_t nid, int dev_id,
 			   bool *audio_enabled, char *buffer, int max_bytes)
 {
 	struct hdac_bus *bus = codec->bus;
 	struct i915_audio_component *acomp = bus->audio_component;
-	int port;
+	int port, pipe;
 
 	if (!acomp || !acomp->ops || !acomp->ops->get_eld)
 		return -ENODEV;
@@ -249,7 +253,9 @@ int snd_hdac_acomp_get_eld(struct hdac_device *codec, hda_nid_t nid,
 	port = pin2port(codec, nid);
 	if (port < 0)
 		return -EINVAL;
-	return acomp->ops->get_eld(acomp->dev, port, audio_enabled,
+
+	pipe = dev_id;
+	return acomp->ops->get_eld(acomp->dev, port, pipe, audio_enabled,
 				   buffer, max_bytes);
 }
 EXPORT_SYMBOL_GPL(snd_hdac_acomp_get_eld);
diff --git a/sound/pci/hda/patch_hdmi.c b/sound/pci/hda/patch_hdmi.c
index 4bf48336b0fc..3fc201c3b95a 100644
--- a/sound/pci/hda/patch_hdmi.c
+++ b/sound/pci/hda/patch_hdmi.c
@@ -1485,7 +1485,7 @@ static void sync_eld_via_acomp(struct hda_codec *codec,
 
 	mutex_lock(&per_pin->lock);
 	eld->monitor_present = false;
-	size = snd_hdac_acomp_get_eld(&codec->core, per_pin->pin_nid,
+	size = snd_hdac_acomp_get_eld(&codec->core, per_pin->pin_nid, -1,
 				      &eld->monitor_present, eld->eld_buffer,
 				      ELD_MAX_SIZE);
 	if (size > 0) {
@@ -1744,7 +1744,8 @@ static int generic_hdmi_playback_pcm_prepare(struct hda_pcm_stream *hinfo,
 	/* Call sync_audio_rate to set the N/CTS/M manually if necessary */
 	/* Todo: add DP1.2 MST audio support later */
 	if (codec_has_acomp(codec))
-		snd_hdac_sync_audio_rate(&codec->core, pin_nid, runtime->rate);
+		snd_hdac_sync_audio_rate(&codec->core, pin_nid, -1,
+					 runtime->rate);
 
 	non_pcm = check_non_pcm_per_cvt(codec, cvt_nid);
 	mutex_lock(&per_pin->lock);
@@ -2290,7 +2291,7 @@ static void haswell_set_power_state(struct hda_codec *codec, hda_nid_t fg,
 	snd_hda_codec_set_power_to_all(codec, fg, power_state);
 }
 
-static void intel_pin_eld_notify(void *audio_ptr, int port)
+static void intel_pin_eld_notify(void *audio_ptr, int port, int pipe)
 {
 	struct hda_codec *codec = audio_ptr;
 	int pin_nid;
diff --git a/sound/soc/codecs/hdac_hdmi.c b/sound/soc/codecs/hdac_hdmi.c
index c602c4960924..0c6228a0bf95 100644
--- a/sound/soc/codecs/hdac_hdmi.c
+++ b/sound/soc/codecs/hdac_hdmi.c
@@ -1368,7 +1368,7 @@ static int hdac_hdmi_parse_and_map_nid(struct hdac_ext_device *edev,
 	return hdac_hdmi_init_dai_map(edev);
 }
 
-static void hdac_hdmi_eld_notify_cb(void *aptr, int port)
+static void hdac_hdmi_eld_notify_cb(void *aptr, int port, int pipe)
 {
 	struct hdac_ext_device *edev = aptr;
 	struct hdac_hdmi_priv *hdmi = edev->private_data;
