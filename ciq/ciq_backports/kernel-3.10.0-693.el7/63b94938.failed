net: sctp: implement rfc6458, 5.3.4. SCTP_SNDINFO cmsg support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sctp: implement rfc6458, 5.3.4. SCTP_SNDINFO cmsg support (Xin Long) [1339791]
Rebuild_FUZZ: 95.80%
commit-author Geir Ola Vaagland <geirola@gmail.com>
commit 63b949382c5f263746b1c177f6ff84de2201ae9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/63b94938.failed

This patch implements section 5.3.4. of RFC6458, that is, support
for 'SCTP Send Information Structure' (SCTP_SNDINFO) which can be
placed into ancillary data cmsghdr structure for sendmsg() calls.

The sctp_sndinfo structure is defined as per RFC as below ...

  struct sctp_sndinfo {
    uint16_t snd_sid;
    uint16_t snd_flags;
    uint32_t snd_ppid;
    uint32_t snd_context;
    sctp_assoc_t snd_assoc_id;
  };

... and supplied under cmsg_level IPPROTO_SCTP, cmsg_type
SCTP_SNDINFO, while cmsg_data[] contains struct sctp_sndinfo.
An sctp_sndinfo item always corresponds to the data in msg_iov.

Joint work with Daniel Borkmann.

	Signed-off-by: Geir Ola Vaagland <geirola@gmail.com>
	Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 63b949382c5f263746b1c177f6ff84de2201ae9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/socket.c
diff --cc net/sctp/socket.c
index 3865a48c7d38,d61729e99856..000000000000
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@@ -1612,13 -1602,13 +1612,19 @@@ static int sctp_sendmsg(struct kiocb *i
  	struct sctp_initmsg *sinit;
  	sctp_assoc_t associd = 0;
  	sctp_cmsgs_t cmsgs = { NULL };
- 	int err;
  	sctp_scope_t scope;
++<<<<<<< HEAD
 +	bool wait_connect = false;
 +	long timeo;
 +	__u16 sinfo_flags = 0;
++=======
+ 	bool fill_sinfo_ttl = false;
++>>>>>>> 63b949382c5f (net: sctp: implement rfc6458, 5.3.4. SCTP_SNDINFO cmsg support)
  	struct sctp_datamsg *datamsg;
  	int msg_flags = msg->msg_flags;
+ 	__u16 sinfo_flags = 0;
+ 	long timeo;
+ 	int err;
  
  	err = 0;
  	sp = sctp_sk(sk);
@@@ -6909,20 -6451,39 +6931,43 @@@ static int sctp_msghdr_parse(const stru
  			 * ------------  ------------   ----------------------
  			 * IPPROTO_SCTP  SCTP_SNDRCV    struct sctp_sndrcvinfo
  			 */
- 			if (cmsg->cmsg_len !=
- 			    CMSG_LEN(sizeof(struct sctp_sndrcvinfo)))
+ 			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct sctp_sndrcvinfo)))
  				return -EINVAL;
  
- 			cmsgs->info =
- 				(struct sctp_sndrcvinfo *)CMSG_DATA(cmsg);
+ 			cmsgs->srinfo = CMSG_DATA(cmsg);
  
- 			/* Minimally, validate the sinfo_flags. */
- 			if (cmsgs->info->sinfo_flags &
+ 			if (cmsgs->srinfo->sinfo_flags &
  			    ~(SCTP_UNORDERED | SCTP_ADDR_OVER |
 +			      SCTP_SACK_IMMEDIATELY | SCTP_PR_SCTP_MASK |
  			      SCTP_ABORT | SCTP_EOF))
  				return -EINVAL;
  			break;
++<<<<<<< HEAD
++=======
+ 
+ 		case SCTP_SNDINFO:
+ 			/* SCTP Socket API Extension
+ 			 * 5.3.4 SCTP Send Information Structure (SCTP_SNDINFO)
+ 			 *
+ 			 * This cmsghdr structure specifies SCTP options for
+ 			 * sendmsg(). This structure and SCTP_RCVINFO replaces
+ 			 * SCTP_SNDRCV which has been deprecated.
+ 			 *
+ 			 * cmsg_level    cmsg_type      cmsg_data[]
+ 			 * ------------  ------------   ---------------------
+ 			 * IPPROTO_SCTP  SCTP_SNDINFO    struct sctp_sndinfo
+ 			 */
+ 			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct sctp_sndinfo)))
+ 				return -EINVAL;
+ 
+ 			cmsgs->sinfo = CMSG_DATA(cmsg);
+ 
+ 			if (cmsgs->sinfo->snd_flags &
+ 			    ~(SCTP_UNORDERED | SCTP_ADDR_OVER |
+ 			      SCTP_ABORT | SCTP_EOF))
+ 				return -EINVAL;
+ 			break;
++>>>>>>> 63b949382c5f (net: sctp: implement rfc6458, 5.3.4. SCTP_SNDINFO cmsg support)
  		default:
  			return -EINVAL;
  		}
diff --git a/include/net/sctp/structs.h b/include/net/sctp/structs.h
index 4f9d7015fcef..5004c90ed8f4 100644
--- a/include/net/sctp/structs.h
+++ b/include/net/sctp/structs.h
@@ -1984,7 +1984,8 @@ struct sctp_chunk *sctp_get_ecne_prepend(struct sctp_association *asoc);
 /* A convenience structure to parse out SCTP specific CMSGs. */
 typedef struct sctp_cmsgs {
 	struct sctp_initmsg *init;
-	struct sctp_sndrcvinfo *info;
+	struct sctp_sndrcvinfo *srinfo;
+	struct sctp_sndinfo *sinfo;
 } sctp_cmsgs_t;
 
 /* Structure for tracking memory objects */
diff --git a/include/uapi/linux/sctp.h b/include/uapi/linux/sctp.h
index f99df6a81072..18ce043bd579 100644
--- a/include/uapi/linux/sctp.h
+++ b/include/uapi/linux/sctp.h
@@ -180,6 +180,22 @@ struct sctp_sndrcvinfo {
 	sctp_assoc_t sinfo_assoc_id;
 };
 
+/* 5.3.4 SCTP Send Information Structure (SCTP_SNDINFO)
+ *
+ *   This cmsghdr structure specifies SCTP options for sendmsg().
+ *
+ *   cmsg_level    cmsg_type      cmsg_data[]
+ *   ------------  ------------   -------------------
+ *   IPPROTO_SCTP  SCTP_SNDINFO   struct sctp_sndinfo
+ */
+struct sctp_sndinfo {
+	__u16 snd_sid;
+	__u16 snd_flags;
+	__u32 snd_ppid;
+	__u32 snd_context;
+	sctp_assoc_t snd_assoc_id;
+};
+
 /*
  *  sinfo_flags: 16 bits (unsigned integer)
  *
@@ -203,10 +219,12 @@ typedef union {
 
 /* These are cmsg_types.  */
 typedef enum sctp_cmsg_type {
-	SCTP_INIT,              /* 5.2.1 SCTP Initiation Structure */
+	SCTP_INIT,		/* 5.2.1 SCTP Initiation Structure */
 #define SCTP_INIT	SCTP_INIT
-	SCTP_SNDRCV,            /* 5.2.2 SCTP Header Information Structure */
+	SCTP_SNDRCV,		/* 5.2.2 SCTP Header Information Structure */
 #define SCTP_SNDRCV	SCTP_SNDRCV
+	SCTP_SNDINFO,		/* 5.3.4 SCTP Send Information Structure */
+#define SCTP_SNDINFO	SCTP_SNDINFO
 } sctp_cmsg_t;
 
 /*
* Unmerged path net/sctp/socket.c
