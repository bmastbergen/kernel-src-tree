ntb_transport: Check the number of spads the hardware supports

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Logan Gunthorpe <logang@deltatee.com>
commit 19645a077120c6417e9dc5ad469c45194cf78a82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/19645a07.failed

I'm working on hardware that currently has a limited number of
scratchpad registers and ntb_ndev fails with no clue as to why. I
feel it is better to fail early and provide a reasonable error message
then to fail later on.

The same is done to ntb_perf, but it doesn't currently require enough
spads to actually fail. I've also removed the unused SPAD_MSG and
SPAD_ACK enums so that MAX_SPAD accurately reflects the number of
spads used.

	Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
	Acked-by: Dave Jiang <dave.jiang@intel.com>
	Signed-off-by: Jon Mason <jdmason@kudzu.us>
(cherry picked from commit 19645a077120c6417e9dc5ad469c45194cf78a82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ntb/ntb_transport.c
#	drivers/ntb/test/ntb_perf.c
diff --cc drivers/ntb/ntb_transport.c
index cc39efa77597,d5c5894f252e..000000000000
--- a/drivers/ntb/ntb_transport.c
+++ b/drivers/ntb/ntb_transport.c
@@@ -921,18 -1048,46 +921,49 @@@ static int ntb_transport_init_queue(str
  	return 0;
  }
  
 -static int ntb_transport_probe(struct ntb_client *self, struct ntb_dev *ndev)
 +int ntb_transport_init(struct pci_dev *pdev)
  {
 -	struct ntb_transport_ctx *nt;
 -	struct ntb_transport_mw *mw;
 -	unsigned int mw_count, qp_count;
 -	u64 qp_bitmap;
 -	int node;
 +	struct ntb_transport *nt;
  	int rc, i;
  
++<<<<<<< HEAD
 +	nt = kzalloc(sizeof(struct ntb_transport), GFP_KERNEL);
 +	if (!nt)
 +		return -ENOMEM;
 +
 +	nt->ndev = ntb_register_transport(pdev, nt);
 +	if (!nt->ndev) {
 +		rc = -EIO;
++=======
+ 	mw_count = ntb_mw_count(ndev);
+ 	if (ntb_spad_count(ndev) < (NUM_MWS + 1 + mw_count * 2)) {
+ 		dev_err(&ndev->dev, "Not enough scratch pad registers for %s",
+ 			NTB_TRANSPORT_NAME);
+ 		return -EIO;
+ 	}
+ 
+ 	if (ntb_db_is_unsafe(ndev))
+ 		dev_dbg(&ndev->dev,
+ 			"doorbell is unsafe, proceed anyway...\n");
+ 	if (ntb_spad_is_unsafe(ndev))
+ 		dev_dbg(&ndev->dev,
+ 			"scratchpad is unsafe, proceed anyway...\n");
+ 
+ 	node = dev_to_node(&ndev->dev);
+ 
+ 	nt = kzalloc_node(sizeof(*nt), GFP_KERNEL, node);
+ 	if (!nt)
+ 		return -ENOMEM;
+ 
+ 	nt->ndev = ndev;
+ 
+ 	nt->mw_count = mw_count;
+ 
+ 	nt->mw_vec = kzalloc_node(mw_count * sizeof(*nt->mw_vec),
+ 				  GFP_KERNEL, node);
+ 	if (!nt->mw_vec) {
+ 		rc = -ENOMEM;
++>>>>>>> 19645a077120 (ntb_transport: Check the number of spads the hardware supports)
  		goto err;
  	}
  
* Unmerged path drivers/ntb/test/ntb_perf.c
* Unmerged path drivers/ntb/ntb_transport.c
* Unmerged path drivers/ntb/test/ntb_perf.c
