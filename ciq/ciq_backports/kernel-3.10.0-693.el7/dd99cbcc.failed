ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit dd99cbcca4fea59ec5e93cf160cb4b939306f5c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/dd99cbcc.failed

ACPICA commit 189429fb7d06cdb89043ae32d615faf553467f1d

This patch follows new ACPICA design, eliminates old portable OSLs, and
implements fopen/fread/fwrite/fclose/fseek/ftell for GNU EFI
environment. This patch also eliminates acpi_log_error(), convering them
into fprintf(stderr)/perror(). Lv Zheng.

Link: https://github.com/acpica/acpica/commit/189429fb
Link: https://bugs.acpica.org/show_bug.cgi?id=1302
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit dd99cbcca4fea59ec5e93cf160cb4b939306f5c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpica/utdebug.c
#	drivers/acpi/acpica/utprint.c
#	include/acpi/acpiosxf.h
#	include/acpi/acpixf.h
#	include/acpi/actypes.h
#	tools/power/acpi/common/cmfsize.c
#	tools/power/acpi/common/getopt.c
#	tools/power/acpi/os_specific/service_layers/oslibcfs.c
#	tools/power/acpi/tools/acpidump/Makefile
#	tools/power/acpi/tools/acpidump/apdump.c
#	tools/power/acpi/tools/acpidump/apfiles.c
#	tools/power/acpi/tools/acpidump/apmain.c
diff --cc drivers/acpi/acpica/utdebug.c
index bcfe3233f0d4,044df9b0356e..000000000000
--- a/drivers/acpi/acpica/utdebug.c
+++ b/drivers/acpi/acpica/utdebug.c
@@@ -536,11 -551,80 +536,81 @@@ acpi_ut_ptr_exit(u32 line_number
  	if (ACPI_IS_DEBUG_ENABLED(ACPI_LV_FUNCTIONS, component_id)) {
  		acpi_debug_print(ACPI_LV_FUNCTIONS,
  				 line_number, function_name, module_name,
 -				 component_id, "%s %p\n",
 -				 acpi_gbl_function_exit_prefix, ptr);
 +				 component_id, "%s %p\n", acpi_gbl_fn_exit_str,
 +				 ptr);
  	}
  
 -	if (acpi_gbl_nesting_level) {
 -		acpi_gbl_nesting_level--;
 -	}
 +	acpi_gbl_nesting_level--;
  }
  
++<<<<<<< HEAD
++=======
+ /*******************************************************************************
+  *
+  * FUNCTION:    acpi_ut_str_exit
+  *
+  * PARAMETERS:  line_number         - Caller's line number
+  *              function_name       - Caller's procedure name
+  *              module_name         - Caller's module name
+  *              component_id        - Caller's component ID
+  *              string              - String to display
+  *
+  * RETURN:      None
+  *
+  * DESCRIPTION: Function exit trace. Prints only if TRACE_FUNCTIONS bit is
+  *              set in debug_level. Prints exit value also.
+  *
+  ******************************************************************************/
+ 
+ void
+ acpi_ut_str_exit(u32 line_number,
+ 		 const char *function_name,
+ 		 const char *module_name, u32 component_id, const char *string)
+ {
+ 
+ 	/* Check if enabled up-front for performance */
+ 
+ 	if (ACPI_IS_DEBUG_ENABLED(ACPI_LV_FUNCTIONS, component_id)) {
+ 		acpi_debug_print(ACPI_LV_FUNCTIONS,
+ 				 line_number, function_name, module_name,
+ 				 component_id, "%s %s\n",
+ 				 acpi_gbl_function_exit_prefix, string);
+ 	}
+ 
+ 	if (acpi_gbl_nesting_level) {
+ 		acpi_gbl_nesting_level--;
+ 	}
+ }
+ 
+ /*******************************************************************************
+  *
+  * FUNCTION:    acpi_trace_point
+  *
+  * PARAMETERS:  type                - Trace event type
+  *              begin               - TRUE if before execution
+  *              aml                 - Executed AML address
+  *              pathname            - Object path
+  *              pointer             - Pointer to the related object
+  *
+  * RETURN:      None
+  *
+  * DESCRIPTION: Interpreter execution trace.
+  *
+  ******************************************************************************/
+ 
+ void
+ acpi_trace_point(acpi_trace_event_type type, u8 begin, u8 *aml, char *pathname)
+ {
+ 
+ 	ACPI_FUNCTION_ENTRY();
+ 
+ 	acpi_ex_trace_point(type, begin, aml, pathname);
+ 
+ #ifdef ACPI_USE_SYSTEM_TRACER
+ 	acpi_os_trace_point(type, begin, aml, pathname);
+ #endif
+ }
+ 
+ ACPI_EXPORT_SYMBOL(acpi_trace_point)
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  #endif
diff --cc include/acpi/acpiosxf.h
index 96eeb3c4b600,f3414c83abb1..000000000000
--- a/include/acpi/acpiosxf.h
+++ b/include/acpi/acpiosxf.h
@@@ -247,17 -336,69 +247,68 @@@ acpi_status acpi_os_signal(u32 function
  /*
   * Debug print routines
   */
 -#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_printf
  void ACPI_INTERNAL_VAR_XFACE acpi_os_printf(const char *format, ...);
 -#endif
  
 -#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_vprintf
  void acpi_os_vprintf(const char *format, va_list args);
 -#endif
  
 -#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_redirect_output
  void acpi_os_redirect_output(void *destination);
 -#endif
  
 +#ifdef ACPI_FUTURE_USAGE
  /*
 - * Debug IO
 + * Debug input
   */
++<<<<<<< HEAD
 +u32 acpi_os_get_line(char *buffer);
++=======
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_line
+ acpi_status acpi_os_get_line(char *buffer, u32 buffer_length, u32 *bytes_read);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_initialize_command_signals
+ acpi_status acpi_os_initialize_command_signals(void);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_terminate_command_signals
+ void acpi_os_terminate_command_signals(void);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_wait_command_ready
+ acpi_status acpi_os_wait_command_ready(void);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_notify_command_complete
+ acpi_status acpi_os_notify_command_complete(void);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_trace_point
+ void
+ acpi_os_trace_point(acpi_trace_event_type type,
+ 		    u8 begin, u8 *aml, char *pathname);
+ #endif
+ 
+ /*
+  * Obtain ACPI table(s)
+  */
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_table_by_name
+ acpi_status
+ acpi_os_get_table_by_name(char *signature,
+ 			  u32 instance,
+ 			  struct acpi_table_header **table,
+ 			  acpi_physical_address *address);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_table_by_index
+ acpi_status
+ acpi_os_get_table_by_index(u32 index,
+ 			   struct acpi_table_header **table,
+ 			   u32 *instance, acpi_physical_address *address);
+ #endif
+ 
+ #ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_table_by_address
+ acpi_status
+ acpi_os_get_table_by_address(acpi_physical_address address,
+ 			     struct acpi_table_header **table);
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  #endif
  
  /*
@@@ -271,39 -414,12 +322,42 @@@ void *acpi_os_open_directory(char *path
  #define REQUEST_FILE_ONLY                   0
  #define REQUEST_DIR_ONLY                    1
  
 -#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_next_filename
  char *acpi_os_get_next_filename(void *dir_handle);
 -#endif
  
 -#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_close_directory
  void acpi_os_close_directory(void *dir_handle);
 +
++<<<<<<< HEAD
 +/*
 + * File I/O and related support
 + */
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_open_file
 +ACPI_FILE acpi_os_open_file(const char *path, u8 modes);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_close_file
 +void acpi_os_close_file(ACPI_FILE file);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_read_file
 +int
 +acpi_os_read_file(ACPI_FILE file,
 +		  void *buffer, acpi_size size, acpi_size count);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_write_file
 +int
 +acpi_os_write_file(ACPI_FILE file,
 +		   void *buffer, acpi_size size, acpi_size count);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_file_offset
 +long acpi_os_get_file_offset(ACPI_FILE file);
 +#endif
 +
 +#ifndef ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_set_file_offset
 +acpi_status acpi_os_set_file_offset(ACPI_FILE file, long offset, u8 from);
  #endif
  
++=======
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  #endif				/* __ACPIOSXF_H__ */
diff --cc include/acpi/acpixf.h
index 4f88d18b72e7,d94e5c0eefe6..000000000000
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@@ -553,22 -922,52 +553,29 @@@ acpi_bios_warning(const char *module_na
  /*
   * Debug output
   */
 -ACPI_DBG_DEPENDENT_RETURN_VOID(ACPI_PRINTF_LIKE(6)
 -			       void ACPI_INTERNAL_VAR_XFACE
 -			       acpi_debug_print(u32 requested_debug_level,
 -						u32 line_number,
 -						const char *function_name,
 -						const char *module_name,
 -						u32 component_id,
 -						const char *format, ...))
 -ACPI_DBG_DEPENDENT_RETURN_VOID(ACPI_PRINTF_LIKE(6)
 -				void ACPI_INTERNAL_VAR_XFACE
 -				acpi_debug_print_raw(u32 requested_debug_level,
 -						     u32 line_number,
 -						     const char *function_name,
 -						     const char *module_name,
 -						     u32 component_id,
 -						     const char *format, ...))
 +#ifdef ACPI_DEBUG_OUTPUT
  
++<<<<<<< HEAD
 +void ACPI_INTERNAL_VAR_XFACE
 +acpi_debug_print(u32 requested_debug_level,
 +		 u32 line_number,
 +		 const char *function_name,
 +		 const char *module_name,
 +		 u32 component_id, const char *format, ...) ACPI_PRINTF_LIKE(6);
++=======
+ ACPI_DBG_DEPENDENT_RETURN_VOID(void
+ 			       acpi_trace_point(acpi_trace_event_type type,
+ 						u8 begin,
+ 						u8 *aml, char *pathname))
 -
 -acpi_status acpi_initialize_debugger(void);
 -
 -void acpi_terminate_debugger(void);
 -
 -/*
 - * Divergences
 - */
 -ACPI_GLOBAL(u8, acpi_gbl_permanent_mmap);
 -
 -ACPI_EXTERNAL_RETURN_STATUS(acpi_status
 -			    acpi_get_table_with_size(acpi_string signature,
 -						     u32 instance,
 -						     struct acpi_table_header
 -						     **out_table,
 -						     acpi_size *tbl_size))
 -
 -ACPI_EXTERNAL_RETURN_STATUS(acpi_status
 -			    acpi_get_data_full(acpi_handle object,
 -					       acpi_object_handler handler,
 -					       void **data,
 -					       void (*callback)(void *)))
 -
 -void acpi_run_debugger(char *batch_buffer);
 -
 -void acpi_set_debugger_thread_id(acpi_thread_id thread_id);
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
 +
 +void ACPI_INTERNAL_VAR_XFACE
 +acpi_debug_print_raw(u32 requested_debug_level,
 +		     u32 line_number,
 +		     const char *function_name,
 +		     const char *module_name,
 +		     u32 component_id,
 +		     const char *format, ...) ACPI_PRINTF_LIKE(6);
 +#endif
  
  #endif				/* __ACXFACE_H__ */
diff --cc include/acpi/actypes.h
index 90953bd39053,e96907b2dcbf..000000000000
--- a/include/acpi/actypes.h
+++ b/include/acpi/actypes.h
@@@ -1195,13 -1288,8 +1195,19 @@@ struct acpi_memory_list 
  #define ACPI_OSI_WIN_8                  0x0C
  #define ACPI_OSI_WIN_10                 0x0D
  
++<<<<<<< HEAD
 +/* Definitions of file IO */
 +
 +#define ACPI_FILE_READING               0x01
 +#define ACPI_FILE_WRITING               0x02
 +#define ACPI_FILE_BINARY                0x04
 +
 +#define ACPI_FILE_BEGIN                 0x01
 +#define ACPI_FILE_END                   0x02
++=======
+ /* Definitions of getopt */
+ 
+ #define ACPI_OPT_END                    -1
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  
  #endif				/* __ACTYPES_H__ */
diff --cc tools/power/acpi/common/cmfsize.c
index 5140e5edae1f,bc82596d7354..000000000000
--- a/tools/power/acpi/common/cmfsize.c
+++ b/tools/power/acpi/common/cmfsize.c
@@@ -74,7 -73,8 +74,12 @@@ u32 cm_get_file_size(FILE * file
  		goto offset_error;
  	}
  
++<<<<<<< HEAD
 +	if (fseek(file, 0, SEEK_END)) {
++=======
+ 	status = fseek(file, 0, SEEK_END);
+ 	if (ACPI_FAILURE(status)) {
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  		goto seek_error;
  	}
  
@@@ -85,17 -85,18 +90,30 @@@
  
  	/* Restore original file pointer */
  
++<<<<<<< HEAD
 +	if (fseek(file, current_offset, SEEK_SET)) {
++=======
+ 	status = fseek(file, current_offset, SEEK_SET);
+ 	if (ACPI_FAILURE(status)) {
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  		goto seek_error;
  	}
  
  	return ((u32)file_size);
  
  offset_error:
++<<<<<<< HEAD
 +	perror("Could not get file offset");
 +	return (ACPI_UINT32_MAX);
 +
 +seek_error:
 +	perror("Could not seek file");
++=======
+ 	fprintf(stderr, "Could not get file offset\n");
+ 	return (ACPI_UINT32_MAX);
+ 
+ seek_error:
+ 	fprintf(stderr, "Could not set file offset\n");
++>>>>>>> dd99cbcca4fe (ACPICA: Clib: Eliminate acpi_os_XXXFile()/acpi_log_error and link clibrary fxxx()/errno/perror() instead)
  	return (ACPI_UINT32_MAX);
  }
* Unmerged path drivers/acpi/acpica/utprint.c
* Unmerged path tools/power/acpi/common/getopt.c
* Unmerged path tools/power/acpi/os_specific/service_layers/oslibcfs.c
* Unmerged path tools/power/acpi/tools/acpidump/Makefile
* Unmerged path tools/power/acpi/tools/acpidump/apdump.c
* Unmerged path tools/power/acpi/tools/acpidump/apfiles.c
* Unmerged path tools/power/acpi/tools/acpidump/apmain.c
* Unmerged path drivers/acpi/acpica/utdebug.c
* Unmerged path drivers/acpi/acpica/utprint.c
* Unmerged path include/acpi/acpiosxf.h
* Unmerged path include/acpi/acpixf.h
* Unmerged path include/acpi/actypes.h
* Unmerged path tools/power/acpi/common/cmfsize.c
* Unmerged path tools/power/acpi/common/getopt.c
* Unmerged path tools/power/acpi/os_specific/service_layers/oslibcfs.c
* Unmerged path tools/power/acpi/tools/acpidump/Makefile
* Unmerged path tools/power/acpi/tools/acpidump/apdump.c
* Unmerged path tools/power/acpi/tools/acpidump/apfiles.c
* Unmerged path tools/power/acpi/tools/acpidump/apmain.c
