HID: wacom - Cleanup touch arbitration logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom - Cleanup touch arbitration logic (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 93.98%
commit-author Ping Cheng <pinglinux@gmail.com>
commit c1b03f5511d6aeab3c141c133b492ea492207e64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c1b03f55.failed

stylus_in_proximity was introduced to support touch arbitration
before in range was supported. With in range event, the logic
changed. stylus_in_proximity should be set for both in prox and
in range events.

To finish a clean touch arbitration logic, we should send touch
up (if it was down) before posting any general pen events.

	Signed-off-by: Ping Cheng <pingc@wacom.com>
	Reviewed-by: Jason Gerecke <jason.gerecke@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit c1b03f5511d6aeab3c141c133b492ea492207e64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index 98c7d65145c2,28f6a9e2ad6f..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -412,31 -678,18 +413,46 @@@ static int wacom_intuos_inout(struct wa
  		return 1;
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * don't report events for invalid data
 +	 */
 +	/* older I4 styli don't work with new Cintiqs */
 +	if ((!((wacom->id[idx] >> 20) & 0x01) &&
 +			(features->type == WACOM_21UX2)) ||
 +	    /* Only large Intuos support Lense Cursor */
 +	    (wacom->tool[idx] == BTN_TOOL_LENS &&
 +		(features->type == INTUOS3 ||
 +		 features->type == INTUOS3S ||
 +		 features->type == INTUOS4 ||
 +		 features->type == INTUOS4S ||
 +		 features->type == INTUOS5 ||
 +		 features->type == INTUOS5S ||
 +		 features->type == INTUOSPM ||
 +		 features->type == INTUOSPS)) ||
 +	   /* Cintiq doesn't send data when RDY bit isn't set */
 +	   (features->type == CINTIQ && !(data[1] & 0x40)))
 +		return 1;
 +
 +	/* Range Report */
 +	if ((data[1] & 0xfe) == 0x20) {
 +		input_report_key(input, BTN_TOUCH, 0);
 +		input_report_abs(input, ABS_PRESSURE, 0);
 +		input_report_abs(input, ABS_DISTANCE, wacom->features.distance_max);
++=======
+ 	/* in Range */
+ 	if ((data[1] & 0xfe) == 0x20) {
+ 		wacom->shared->stylus_in_proximity = true;
+ 
+ 		/* in Range while exiting */
+ 		if (wacom->reporting_data) {
+ 			input_report_key(input, BTN_TOUCH, 0);
+ 			input_report_abs(input, ABS_PRESSURE, 0);
+ 			input_report_abs(input, ABS_DISTANCE, wacom->features.distance_max);
+ 			return 2;
+ 		}
+ 		return 1;
++>>>>>>> c1b03f5511d6 (HID: wacom - Cleanup touch arbitration logic)
  	}
  
  	/* Exit report */
@@@ -492,19 -865,72 +508,82 @@@ static void wacom_intuos_general(struc
  {
  	struct wacom_features *features = &wacom->features;
  	unsigned char *data = wacom->data;
 -	struct input_dev *input = wacom->pen_input;
 -	int idx = (features->type == INTUOS) ? (data[1] & 0x01) : 0;
 -	unsigned char type = (data[1] >> 1) & 0x0F;
 -	unsigned int x, y, distance, t;
 +	struct input_dev *input = wacom->input;
 +	unsigned int t;
  
++<<<<<<< HEAD
 +	/* general pen packet */
 +	if ((data[1] & 0xb8) == 0xa0) {
 +		t = (data[6] << 2) | ((data[7] >> 6) & 3);
 +		if (features->type >= INTUOS4S && features->type <= WACOM_24HD) {
 +			t = (t << 1) | (data[1] & 1);
++=======
+ 	if (data[0] != WACOM_REPORT_PENABLED && data[0] != WACOM_REPORT_CINTIQ &&
+ 		data[0] != WACOM_REPORT_INTUOS_PEN)
+ 		return 0;
+ 
+ 	if (wacom->shared->touch_down)
+ 		return 1;
+ 
+ 	/* don't report events if we don't know the tool ID */
+ 	if (!wacom->id[idx]) {
+ 		/* but reschedule a read of the current tool */
+ 		wacom_intuos_schedule_prox_event(wacom);
+ 		return 1;
+ 	}
+ 
+ 	/*
+ 	 * don't report events for invalid data
+ 	 */
+ 	/* older I4 styli don't work with new Cintiqs */
+ 	if ((!((wacom->id[idx] >> 20) & 0x01) &&
+ 			(features->type == WACOM_21UX2)) ||
+ 	    /* Only large Intuos support Lense Cursor */
+ 	    (wacom->tool[idx] == BTN_TOOL_LENS &&
+ 		(features->type == INTUOS3 ||
+ 		 features->type == INTUOS3S ||
+ 		 features->type == INTUOS4 ||
+ 		 features->type == INTUOS4S ||
+ 		 features->type == INTUOS5 ||
+ 		 features->type == INTUOS5S ||
+ 		 features->type == INTUOSPM ||
+ 		 features->type == INTUOSPS)) ||
+ 	   /* Cintiq doesn't send data when RDY bit isn't set */
+ 	   (features->type == CINTIQ && !(data[1] & 0x40)))
+ 		return 1;
+ 
+ 	x = (be16_to_cpup((__be16 *)&data[2]) << 1) | ((data[9] >> 1) & 1);
+ 	y = (be16_to_cpup((__be16 *)&data[4]) << 1) | (data[9] & 1);
+ 	distance = data[9] >> 2;
+ 	if (features->type < INTUOS3S) {
+ 		x >>= 1;
+ 		y >>= 1;
+ 		distance >>= 1;
+ 	}
+ 	input_report_abs(input, ABS_X, x);
+ 	input_report_abs(input, ABS_Y, y);
+ 	input_report_abs(input, ABS_DISTANCE, distance);
+ 
+ 	switch (type) {
+ 	case 0x00:
+ 	case 0x01:
+ 	case 0x02:
+ 	case 0x03:
+ 		/* general pen packet */
+ 		t = (data[6] << 3) | ((data[7] & 0xC0) >> 5) | (data[1] & 1);
+ 		if (features->pressure_max < 2047)
+ 			t >>= 1;
+ 		input_report_abs(input, ABS_PRESSURE, t);
+ 		if (features->type != INTUOSHT2) {
+ 		    input_report_abs(input, ABS_TILT_X,
+ 				 (((data[7] << 1) & 0x7e) | (data[8] >> 7)) - 64);
+ 		    input_report_abs(input, ABS_TILT_Y, (data[8] & 0x7f) - 64);
++>>>>>>> c1b03f5511d6 (HID: wacom - Cleanup touch arbitration logic)
  		}
 +		input_report_abs(input, ABS_PRESSURE, t);
 +		input_report_abs(input, ABS_TILT_X,
 +				 (((data[7] << 1) & 0x7e) | (data[8] >> 7)) - 64);
 +		input_report_abs(input, ABS_TILT_Y, (data[8] & 0x7f) - 64);
  		input_report_key(input, BTN_STYLUS, data[1] & 2);
  		input_report_key(input, BTN_STYLUS2, data[1] & 4);
  		input_report_key(input, BTN_TOUCH, t > 10);
* Unmerged path drivers/hid/wacom_wac.c
