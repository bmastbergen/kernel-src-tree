switchdev: rename vlan vid_start to vid_begin

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Scott Feldman <sfeldma@gmail.com>
commit 3e3a78b49508e58f798cf519876bbb9ca0f931af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3e3a78b4.failed

Use vid_begin/end to be consistent with BRIDGE_VLAN_INFO_RANGE_BEGIN/END.

	Signed-off-by: Scott Feldman <sfeldma@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3e3a78b49508e58f798cf519876bbb9ca0f931af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/rocker/rocker.c
#	include/net/switchdev.h
#	net/bridge/br_vlan.c
#	net/switchdev/switchdev.c
diff --cc net/bridge/br_vlan.c
index 234e9acde00a,574feea6a8cc..000000000000
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@@ -36,6 -37,36 +36,39 @@@ static void __vlan_add_flags(struct net
  		clear_bit(vid, v->untagged_bitmap);
  }
  
++<<<<<<< HEAD
++=======
+ static int __vlan_vid_add(struct net_device *dev, struct net_bridge *br,
+ 			  u16 vid, u16 flags)
+ {
+ 	const struct net_device_ops *ops = dev->netdev_ops;
+ 	int err;
+ 
+ 	/* If driver uses VLAN ndo ops, use 8021q to install vid
+ 	 * on device, otherwise try switchdev ops to install vid.
+ 	 */
+ 
+ 	if (ops->ndo_vlan_rx_add_vid) {
+ 		err = vlan_vid_add(dev, br->vlan_proto, vid);
+ 	} else {
+ 		struct switchdev_obj vlan_obj = {
+ 			.id = SWITCHDEV_OBJ_PORT_VLAN,
+ 			.u.vlan = {
+ 				.flags = flags,
+ 				.vid_begin = vid,
+ 				.vid_end = vid,
+ 			},
+ 		};
+ 
+ 		err = switchdev_port_obj_add(dev, &vlan_obj);
+ 		if (err == -EOPNOTSUPP)
+ 			err = 0;
+ 	}
+ 
+ 	return err;
+ }
+ 
++>>>>>>> 3e3a78b49508 (switchdev: rename vlan vid_start to vid_begin)
  static int __vlan_add(struct net_port_vlans *v, u16 vid, u16 flags)
  {
  	struct net_bridge_port *p = NULL;
@@@ -87,6 -117,30 +120,33 @@@ out_filt
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static void __vlan_vid_del(struct net_device *dev, struct net_bridge *br,
+ 			   u16 vid)
+ {
+ 	const struct net_device_ops *ops = dev->netdev_ops;
+ 
+ 	/* If driver uses VLAN ndo ops, use 8021q to delete vid
+ 	 * on device, otherwise try switchdev ops to delete vid.
+ 	 */
+ 
+ 	if (ops->ndo_vlan_rx_kill_vid) {
+ 		vlan_vid_del(dev, br->vlan_proto, vid);
+ 	} else {
+ 		struct switchdev_obj vlan_obj = {
+ 			.id = SWITCHDEV_OBJ_PORT_VLAN,
+ 			.u.vlan = {
+ 				.vid_begin = vid,
+ 				.vid_end = vid,
+ 			},
+ 		};
+ 
+ 		switchdev_port_obj_del(dev, &vlan_obj);
+ 	}
+ }
+ 
++>>>>>>> 3e3a78b49508 (switchdev: rename vlan vid_start to vid_begin)
  static int __vlan_del(struct net_port_vlans *v, u16 vid)
  {
  	if (!test_bit(vid, v->vlan_bitmap))
* Unmerged path drivers/net/ethernet/rocker/rocker.c
* Unmerged path include/net/switchdev.h
* Unmerged path net/switchdev/switchdev.c
* Unmerged path drivers/net/ethernet/rocker/rocker.c
* Unmerged path include/net/switchdev.h
* Unmerged path net/bridge/br_vlan.c
* Unmerged path net/switchdev/switchdev.c
