dm crypt: fix free of bad values after tfm allocation failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Eric Biggers <ebiggers@google.com>
commit 5d0be84ec0cacfc7a6d6ea548afdd07d481324cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5d0be84e.failed

If crypt_alloc_tfms() had to allocate multiple tfms and it failed before
the last allocation, then it would call crypt_free_tfms() and could free
pointers from uninitialized memory -- due to the crypt_free_tfms() check
for non-zero cc->tfms[i].  Fix by allocating zeroed memory.

	Signed-off-by: Eric Biggers <ebiggers@google.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
	Cc: stable@vger.kernel.org
(cherry picked from commit 5d0be84ec0cacfc7a6d6ea548afdd07d481324cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-crypt.c
diff --cc drivers/md/dm-crypt.c
index 0c85dd95293c,874295757caa..000000000000
--- a/drivers/md/dm-crypt.c
+++ b/drivers/md/dm-crypt.c
@@@ -1450,7 -1453,7 +1450,11 @@@ static int crypt_alloc_tfms(struct cryp
  	unsigned i;
  	int err;
  
++<<<<<<< HEAD
 +	cc->tfms = kmalloc(cc->tfms_count * sizeof(struct crypto_ablkcipher *),
++=======
+ 	cc->tfms = kzalloc(cc->tfms_count * sizeof(struct crypto_skcipher *),
++>>>>>>> 5d0be84ec0ca (dm crypt: fix free of bad values after tfm allocation failure)
  			   GFP_KERNEL);
  	if (!cc->tfms)
  		return -ENOMEM;
* Unmerged path drivers/md/dm-crypt.c
