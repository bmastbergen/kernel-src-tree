bridge: mdb: add vlan support for user entries

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
commit 74fe61f17e999a458d5f64ca2aa9a0282ca32198
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/74fe61f1.failed

Until now all user mdb entries were added in vlan 0, this patch adds
support to allow the user to specify the vlan for the entry.
About the uapi change a hole in struct br_mdb_entry is used so the size
and offsets are kept the same (verified with pahole and tested with older
iproute2).

Example:
$ bridge mdb
dev br0 port eth1 grp 239.0.0.1 permanent vlan 2000
dev br0 port eth1 grp 239.0.0.1 permanent vlan 200
dev br0 port eth1 grp 239.0.0.1 permanent

	Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 74fe61f17e999a458d5f64ca2aa9a0282ca32198)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_mdb.c
diff --cc net/bridge/br_mdb.c
index 6809915e67a5,a8d0e93d43f2..000000000000
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@@ -240,6 -242,8 +241,11 @@@ void br_mdb_notify(struct net_device *d
  #if IS_ENABLED(CONFIG_IPV6)
  	entry.addr.u.ip6 = group->u.ip6;
  #endif
++<<<<<<< HEAD
++=======
+ 	entry.state = state;
+ 	entry.vid = group->vid;
++>>>>>>> 74fe61f17e99 (bridge: mdb: add vlan support for user entries)
  	__br_mdb_notify(dev, &entry, type);
  }
  
@@@ -372,7 -376,7 +380,11 @@@ static int __br_mdb_add(struct net *net
  	if (!p || p->br != br || p->state == BR_STATE_DISABLED)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	memset(&ip, 0, sizeof(ip));
++=======
+ 	ip.vid = entry->vid;
++>>>>>>> 74fe61f17e99 (bridge: mdb: add vlan support for user entries)
  	ip.proto = entry->addr.proto;
  	if (ip.proto == htons(ETH_P_IP))
  		ip.u.ip4 = entry->addr.u.ip4;
@@@ -419,7 -423,7 +431,11 @@@ static int __br_mdb_del(struct net_brid
  	if (!netif_running(br->dev) || br->multicast_disabled)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	memset(&ip, 0, sizeof(ip));
++=======
+ 	ip.vid = entry->vid;
++>>>>>>> 74fe61f17e99 (bridge: mdb: add vlan support for user entries)
  	ip.proto = entry->addr.proto;
  	if (ip.proto == htons(ETH_P_IP)) {
  		if (timer_pending(&br->ip4_other_query.timer))
diff --git a/include/uapi/linux/if_bridge.h b/include/uapi/linux/if_bridge.h
index 8218dc361221..b35ad4af523d 100644
--- a/include/uapi/linux/if_bridge.h
+++ b/include/uapi/linux/if_bridge.h
@@ -181,6 +181,7 @@ struct br_mdb_entry {
 #define MDB_TEMPORARY 0
 #define MDB_PERMANENT 1
 	__u8 state;
+	__u16 vid;
 	struct {
 		union {
 			__be32	ip4;
* Unmerged path net/bridge/br_mdb.c
