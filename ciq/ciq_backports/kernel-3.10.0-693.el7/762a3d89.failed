bridge: fix rcu check warning in multicast port group

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 762a3d89ebf5873f71b3839449ac6562049ef1ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/762a3d89.failed

Use of RCU here with out marked pointer and function doesn't match prototype
with sparse.

	Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 762a3d89ebf5873f71b3839449ac6562049ef1ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_private.h
diff --cc net/bridge/br_private.h
index c68aaa28dd0e,d41283c57952..000000000000
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@@ -441,41 -435,43 +441,81 @@@ int br_ioctl_deviceless_stub(struct ne
  /* br_multicast.c */
  #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
  extern unsigned int br_mdb_rehash_seq;
++<<<<<<< HEAD
 +int br_multicast_rcv(struct net_bridge *br, struct net_bridge_port *port,
 +		     struct sk_buff *skb, u16 vid);
 +struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge *br,
 +				        struct sk_buff *skb, u16 vid);
 +void br_multicast_add_port(struct net_bridge_port *port);
 +void br_multicast_del_port(struct net_bridge_port *port);
 +void br_multicast_enable_port(struct net_bridge_port *port);
 +void br_multicast_disable_port(struct net_bridge_port *port);
 +void br_multicast_init(struct net_bridge *br);
 +void br_multicast_open(struct net_bridge *br);
 +void br_multicast_stop(struct net_bridge *br);
 +void br_multicast_dev_del(struct net_bridge *br);
 +void br_multicast_deliver(struct net_bridge_mdb_entry *mdst,
 +			  struct sk_buff *skb);
 +void br_multicast_forward(struct net_bridge_mdb_entry *mdst,
 +			 struct sk_buff *skb, struct sk_buff *skb2);
 +int br_multicast_set_router(struct net_bridge *br, unsigned long val);
 +int br_multicast_set_port_router(struct net_bridge_port *p, unsigned long val);
 +int br_multicast_toggle(struct net_bridge *br, unsigned long val);
 +int br_multicast_set_querier(struct net_bridge *br, unsigned long val);
 +int br_multicast_set_hash_max(struct net_bridge *br, unsigned long val);
 +struct net_bridge_mdb_entry *
 +br_mdb_ip_get(struct net_bridge_mdb_htable *mdb, struct br_ip *dst);
 +struct net_bridge_mdb_entry *
 +br_multicast_new_group(struct net_bridge *br, struct net_bridge_port *port,
 +		       struct br_ip *group);
 +void br_multicast_free_pg(struct rcu_head *head);
 +struct net_bridge_port_group *
 +br_multicast_new_port_group(struct net_bridge_port *port, struct br_ip *group,
 +			    struct net_bridge_port_group *next,
 +			    unsigned char state);
 +void br_mdb_init(void);
 +void br_mdb_uninit(void);
 +void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
 +		   struct br_ip *group, int type);
++=======
+ extern int br_multicast_rcv(struct net_bridge *br,
+ 			    struct net_bridge_port *port,
+ 			    struct sk_buff *skb);
+ extern struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge *br,
+ 					       struct sk_buff *skb, u16 vid);
+ extern void br_multicast_add_port(struct net_bridge_port *port);
+ extern void br_multicast_del_port(struct net_bridge_port *port);
+ extern void br_multicast_enable_port(struct net_bridge_port *port);
+ extern void br_multicast_disable_port(struct net_bridge_port *port);
+ extern void br_multicast_init(struct net_bridge *br);
+ extern void br_multicast_open(struct net_bridge *br);
+ extern void br_multicast_stop(struct net_bridge *br);
+ extern void br_multicast_deliver(struct net_bridge_mdb_entry *mdst,
+ 				 struct sk_buff *skb);
+ extern void br_multicast_forward(struct net_bridge_mdb_entry *mdst,
+ 				 struct sk_buff *skb, struct sk_buff *skb2);
+ extern int br_multicast_set_router(struct net_bridge *br, unsigned long val);
+ extern int br_multicast_set_port_router(struct net_bridge_port *p,
+ 					unsigned long val);
+ extern int br_multicast_toggle(struct net_bridge *br, unsigned long val);
+ extern int br_multicast_set_querier(struct net_bridge *br, unsigned long val);
+ extern int br_multicast_set_hash_max(struct net_bridge *br, unsigned long val);
+ extern struct net_bridge_mdb_entry *br_mdb_ip_get(
+ 				struct net_bridge_mdb_htable *mdb,
+ 				struct br_ip *dst);
+ extern struct net_bridge_mdb_entry *br_multicast_new_group(struct net_bridge *br,
+ 				struct net_bridge_port *port, struct br_ip *group);
+ extern void br_multicast_free_pg(struct rcu_head *head);
+ extern struct net_bridge_port_group *br_multicast_new_port_group(
+ 				struct net_bridge_port *port,
+ 				struct br_ip *group,
+ 				struct net_bridge_port_group __rcu *next,
+ 				unsigned char state);
+ extern void br_mdb_init(void);
+ extern void br_mdb_uninit(void);
+ extern void br_mdb_notify(struct net_device *dev, struct net_bridge_port *port,
+ 			  struct br_ip *group, int type);
++>>>>>>> 762a3d89ebf5 (bridge: fix rcu check warning in multicast port group)
  
  #define mlock_dereference(X, br) \
  	rcu_dereference_protected(X, lockdep_is_held(&br->multicast_lock))
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 6e187e8f4545..30dfe67d4cd0 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -63,7 +63,8 @@ static int br_mdb_fill_info(struct sk_buff *skb, struct netlink_callback *cb,
 
 	for (i = 0; i < mdb->max; i++) {
 		struct net_bridge_mdb_entry *mp;
-		struct net_bridge_port_group *p, **pp;
+		struct net_bridge_port_group *p;
+		struct net_bridge_port_group __rcu **pp;
 		struct net_bridge_port *port;
 
 		hlist_for_each_entry_rcu(mp, &mdb->mhash[i], hlist[mdb->ver]) {
* Unmerged path net/bridge/br_private.h
