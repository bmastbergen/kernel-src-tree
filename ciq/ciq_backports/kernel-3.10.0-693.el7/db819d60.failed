x86/mce: Add support for new MCA_SYND register

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Yazen Ghannam <Yazen.Ghannam@amd.com>
commit db819d60f6720080150a365080ff656cf239f88f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/db819d60.failed

Syndrome information is no longer contained in MCA_STATUS for SMCA
systems but in a new register - MCA_SYND.

Add a synd field to struct mce to hold MCA_SYND register value. Add it
to the end of struct mce to maintain compatibility with old versions of
mcelog. Also, add it to the respective tracepoint.

	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: http://lkml.kernel.org/r/1467633035-32080-1-git-send-email-Yazen.Ghannam@amd.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit db819d60f6720080150a365080ff656cf239f88f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/mce.h
#	arch/x86/kernel/cpu/mcheck/mce.c
diff --cc arch/x86/include/asm/mce.h
index cb08d9d92582,21bc5a3a4c89..000000000000
--- a/arch/x86/include/asm/mce.h
+++ b/arch/x86/include/asm/mce.h
@@@ -40,8 -40,21 +40,24 @@@
  #define MCI_STATUS_AR	 (1ULL<<55)  /* Action required */
  
  /* AMD-specific bits */
+ #define MCI_STATUS_TCC		(1ULL<<55)  /* Task context corrupt */
+ #define MCI_STATUS_SYNDV	(1ULL<<53)  /* synd reg. valid */
  #define MCI_STATUS_DEFERRED	(1ULL<<44)  /* uncorrected error, deferred exception */
  #define MCI_STATUS_POISON	(1ULL<<43)  /* access poisonous data */
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * McaX field if set indicates a given bank supports MCA extensions:
+  *  - Deferred error interrupt type is specifiable by bank.
+  *  - MCx_MISC0[BlkPtr] field indicates presence of extended MISC registers,
+  *    But should not be used to determine MSR numbers.
+  *  - TCC bit is present in MCx_STATUS.
+  */
+ #define MCI_CONFIG_MCAX		0x1
+ #define MCI_IPID_MCATYPE	0xFFFF0000
+ #define MCI_IPID_HWID		0xFFF
++>>>>>>> db819d60f672 (x86/mce: Add support for new MCA_SYND register)
  
  /*
   * Note that the full MCACOD field of IA32_MCi_STATUS MSR is
@@@ -92,8 -105,26 +108,26 @@@
  #define MCE_LOG_SIGNATURE	"MACHINECHECK"
  
  /* AMD Scalable MCA */
 -#define MSR_AMD64_SMCA_MC0_CTL		0xc0002000
 -#define MSR_AMD64_SMCA_MC0_STATUS	0xc0002001
 -#define MSR_AMD64_SMCA_MC0_ADDR		0xc0002002
 -#define MSR_AMD64_SMCA_MC0_MISC0	0xc0002003
  #define MSR_AMD64_SMCA_MC0_CONFIG	0xc0002004
++<<<<<<< HEAD
++#define MSR_AMD64_SMCA_MCx_CONFIG(x)	(MSR_AMD64_SMCA_MC0_CONFIG + 0x10*(x))
++=======
+ #define MSR_AMD64_SMCA_MC0_IPID		0xc0002005
+ #define MSR_AMD64_SMCA_MC0_SYND		0xc0002006
+ #define MSR_AMD64_SMCA_MC0_DESTAT	0xc0002008
+ #define MSR_AMD64_SMCA_MC0_DEADDR	0xc0002009
+ #define MSR_AMD64_SMCA_MC0_MISC1	0xc000200a
+ #define MSR_AMD64_SMCA_MCx_CTL(x)	(MSR_AMD64_SMCA_MC0_CTL + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_STATUS(x)	(MSR_AMD64_SMCA_MC0_STATUS + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_ADDR(x)	(MSR_AMD64_SMCA_MC0_ADDR + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_MISC(x)	(MSR_AMD64_SMCA_MC0_MISC0 + 0x10*(x))
  #define MSR_AMD64_SMCA_MCx_CONFIG(x)	(MSR_AMD64_SMCA_MC0_CONFIG + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_IPID(x)	(MSR_AMD64_SMCA_MC0_IPID + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_SYND(x)	(MSR_AMD64_SMCA_MC0_SYND + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_DESTAT(x)	(MSR_AMD64_SMCA_MC0_DESTAT + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_DEADDR(x)	(MSR_AMD64_SMCA_MC0_DEADDR + 0x10*(x))
+ #define MSR_AMD64_SMCA_MCx_MISCy(x, y)	((MSR_AMD64_SMCA_MC0_MISC1 + y) + (0x10*(x)))
++>>>>>>> db819d60f672 (x86/mce: Add support for new MCA_SYND register)
  
  /*
   * This structure contains all data related to the MCE log.  Also
diff --cc arch/x86/kernel/cpu/mcheck/mce.c
index 1bfa973429e1,91a179b95fd0..000000000000
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@@ -521,9 -568,10 +521,14 @@@ static struct notifier_block mce_srao_n
  static void mce_read_aux(struct mce *m, int i)
  {
  	if (m->status & MCI_STATUS_MISCV)
++<<<<<<< HEAD
 +		m->misc = mce_rdmsrl(MSR_IA32_MCx_MISC(i));
++=======
+ 		m->misc = mce_rdmsrl(msr_ops.misc(i));
+ 
++>>>>>>> db819d60f672 (x86/mce: Add support for new MCA_SYND register)
  	if (m->status & MCI_STATUS_ADDRV) {
 -		m->addr = mce_rdmsrl(msr_ops.addr(i));
 +		m->addr = mce_rdmsrl(MSR_IA32_MCx_ADDR(i));
  
  		/*
  		 * Mask the reported address by the reported granularity.
* Unmerged path arch/x86/include/asm/mce.h
diff --git a/arch/x86/include/uapi/asm/mce.h b/arch/x86/include/uapi/asm/mce.h
index c250700ab6b2..e88b5647b212 100644
--- a/arch/x86/include/uapi/asm/mce.h
+++ b/arch/x86/include/uapi/asm/mce.h
@@ -26,6 +26,7 @@ struct mce {
 	__u32 socketid;	/* CPU socket ID */
 	__u32 apicid;	/* CPU initial apic ID */
 	__u64 mcgcap;	/* MCGCAP MSR: machine check capabilities of CPU */
+	__u64 synd;	/* MCA_SYND MSR: only valid on SMCA systems */
 };
 
 #define MCE_GET_RECORD_LEN   _IOR('M', 1, int)
* Unmerged path arch/x86/kernel/cpu/mcheck/mce.c
diff --git a/arch/x86/kernel/cpu/mcheck/mce_amd.c b/arch/x86/kernel/cpu/mcheck/mce_amd.c
index 40045b269893..ea3a25897c69 100644
--- a/arch/x86/kernel/cpu/mcheck/mce_amd.c
+++ b/arch/x86/kernel/cpu/mcheck/mce_amd.c
@@ -401,6 +401,9 @@ static void __log_error(unsigned int bank, bool threshold_err, u64 misc)
 	if (m.status & MCI_STATUS_ADDRV)
 		rdmsrl(MSR_IA32_MCx_ADDR(bank), m.addr);
 
+	if (mce_flags.smca && (m.status & MCI_STATUS_SYNDV))
+		rdmsrl(MSR_AMD64_SMCA_MCx_SYND(bank), m.synd);
+
 	mce_log(&m);
 	wrmsrl(MSR_IA32_MCx_STATUS(bank), 0);
 }
diff --git a/include/trace/events/mce.h b/include/trace/events/mce.h
index 4cbbcef6baa8..8be5268caf28 100644
--- a/include/trace/events/mce.h
+++ b/include/trace/events/mce.h
@@ -20,6 +20,7 @@ TRACE_EVENT(mce_record,
 		__field(	u64,		status		)
 		__field(	u64,		addr		)
 		__field(	u64,		misc		)
+		__field(	u64,		synd		)
 		__field(	u64,		ip		)
 		__field(	u64,		tsc		)
 		__field(	u64,		walltime	)
@@ -38,6 +39,7 @@ TRACE_EVENT(mce_record,
 		__entry->status		= m->status;
 		__entry->addr		= m->addr;
 		__entry->misc		= m->misc;
+		__entry->synd		= m->synd;
 		__entry->ip		= m->ip;
 		__entry->tsc		= m->tsc;
 		__entry->walltime	= m->time;
@@ -50,11 +52,11 @@ TRACE_EVENT(mce_record,
 		__entry->cpuvendor	= m->cpuvendor;
 	),
 
-	TP_printk("CPU: %d, MCGc/s: %llx/%llx, MC%d: %016Lx, ADDR/MISC: %016Lx/%016Lx, RIP: %02x:<%016Lx>, TSC: %llx, PROCESSOR: %u:%x, TIME: %llu, SOCKET: %u, APIC: %x",
+	TP_printk("CPU: %d, MCGc/s: %llx/%llx, MC%d: %016Lx, ADDR/MISC/SYND: %016Lx/%016Lx/%016Lx, RIP: %02x:<%016Lx>, TSC: %llx, PROCESSOR: %u:%x, TIME: %llu, SOCKET: %u, APIC: %x",
 		__entry->cpu,
 		__entry->mcgcap, __entry->mcgstatus,
 		__entry->bank, __entry->status,
-		__entry->addr, __entry->misc,
+		__entry->addr, __entry->misc, __entry->synd,
 		__entry->cs, __entry->ip,
 		__entry->tsc,
 		__entry->cpuvendor, __entry->cpuid,
