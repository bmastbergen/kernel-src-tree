NFS: Be more targeted about readdirplus use when doing lookup/revalidation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 63519fbc67d0d9912c13185b7c1e8c2fcb218cc0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/63519fbc.failed

There is little point in setting NFS_INO_ADVISE_RDPLUS in nfs_lookup and
nfs_lookup_revalidate() unless a process is actually doing readdir on the
parent directory.
Furthermore, there is little point in using readdirplus if we're trying
to revalidate a negative dentry.

	Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
	Tested-by: Benjamin Coddington <bcodding@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 63519fbc67d0d9912c13185b7c1e8c2fcb218cc0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/dir.c
diff --cc fs/nfs/dir.c
index 770fe7b74079,22835150579a..000000000000
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@@ -460,9 -479,12 +464,18 @@@ void nfs_advise_use_readdirplus(struct 
   */
  void nfs_force_use_readdirplus(struct inode *dir)
  {
++<<<<<<< HEAD
 +	if (!list_empty(&NFS_I(dir)->open_files)) {
 +		nfs_advise_use_readdirplus(dir);
 +		nfs_zap_mapping(dir, dir->i_mapping);
++=======
+ 	struct nfs_inode *nfsi = NFS_I(dir);
+ 
+ 	if (nfs_server_capable(dir, NFS_CAP_READDIRPLUS) &&
+ 	    !list_empty(&nfsi->open_files)) {
+ 		set_bit(NFS_INO_ADVISE_RDPLUS, &nfsi->flags);
+ 		invalidate_mapping_pages(dir->i_mapping, 0, -1);
++>>>>>>> 63519fbc67d0 (NFS: Be more targeted about readdirplus use when doing lookup/revalidation)
  	}
  }
  
@@@ -1405,16 -1419,16 +1419,16 @@@ struct dentry *nfs_lookup(struct inode 
  	inode = nfs_fhget(dentry->d_sb, fhandle, fattr, label);
  	res = ERR_CAST(inode);
  	if (IS_ERR(res))
 -		goto out_label;
 +		goto out_unblock_sillyrename;
  
- 	/* Success: notify readdir to use READDIRPLUS */
- 	nfs_advise_use_readdirplus(dir);
+ 	/* Notify readdir to use READDIRPLUS */
+ 	nfs_force_use_readdirplus(dir);
  
  no_entry:
 -	res = d_splice_alias(inode, dentry);
 +	res = d_materialise_unique(dentry, inode);
  	if (res != NULL) {
  		if (IS_ERR(res))
 -			goto out_label;
 +			goto out_unblock_sillyrename;
  		dentry = res;
  	}
  	nfs_set_verifier(dentry, nfs_save_change_attribute(dir));
* Unmerged path fs/nfs/dir.c
