IB/mlx5: Refactor raw packet QP modify function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alex Vesker <valex@mellanox.com>
commit 0680efa21478f7b3e775bf4253c615538cef2ebf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0680efa2.failed

Added a struct for modifying raw QP, this will allow modifying
multiple parameters in raw packet QP RQ and can also be used for
SQ in the future.

	Signed-off-by: Alex Vesker <valex@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 0680efa21478f7b3e775bf4253c615538cef2ebf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 0f82de09f2d9,7686ee89189b..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -77,6 -77,14 +77,17 @@@ struct mlx5_wqe_eth_pad 
  	u8 rsvd0[16];
  };
  
++<<<<<<< HEAD
++=======
+ struct mlx5_modify_raw_qp_param {
+ 	u16 operation;
+ };
+ 
+ static void get_cqs(enum ib_qp_type qp_type,
+ 		    struct ib_cq *ib_send_cq, struct ib_cq *ib_recv_cq,
+ 		    struct mlx5_ib_cq **send_cq, struct mlx5_ib_cq **recv_cq);
+ 
++>>>>>>> 0680efa21478 (IB/mlx5: Refactor raw packet QP modify function)
  static int is_qp0(enum ib_qp_type qp_type)
  {
  	return qp_type == IB_QPT_SMI;
@@@ -1851,11 -1888,14 +1862,14 @@@ static void destroy_qp_common(struct ml
  		if (qp->ibqp.qp_type != IB_QPT_RAW_PACKET) {
  			mlx5_ib_qp_disable_pagefaults(qp);
  			err = mlx5_core_qp_modify(dev->mdev,
 -						  MLX5_CMD_OP_2RST_QP, 0,
 -						  NULL, &base->mqp);
 +						  MLX5_CMD_OP_2RST_QP, in, 0,
 +						  &base->mqp);
  		} else {
- 			err = modify_raw_packet_qp(dev, qp,
- 						   MLX5_CMD_OP_2RST_QP);
+ 			struct mlx5_modify_raw_qp_param raw_qp_param = {
+ 				.operation = MLX5_CMD_OP_2RST_QP
+ 			};
+ 
+ 			err = modify_raw_packet_qp(dev, qp, &raw_qp_param);
  		}
  		if (err)
  			mlx5_ib_warn(dev, "mlx5_ib: modify QP 0x%06x to RESET failed\n",
@@@ -2647,13 -2695,17 +2661,25 @@@ static int __mlx5_ib_modify_qp(struct i
  	op = optab[mlx5_cur][mlx5_new];
  	optpar = ib_mask_to_mlx5_opt(attr_mask);
  	optpar &= opt_mask[mlx5_cur][mlx5_new][mlx5_st];
 +	in->optparam = cpu_to_be32(optpar);
  
++<<<<<<< HEAD
 +	if (qp->ibqp.qp_type == IB_QPT_RAW_PACKET)
 +		err = modify_raw_packet_qp(dev, qp, op);
 +	else
 +		err = mlx5_core_qp_modify(dev->mdev, op, in, sqd_event,
++=======
+ 	if (qp->ibqp.qp_type == IB_QPT_RAW_PACKET) {
+ 		struct mlx5_modify_raw_qp_param raw_qp_param = {};
+ 
+ 		raw_qp_param.operation = op;
+ 		err = modify_raw_packet_qp(dev, qp, &raw_qp_param);
+ 	} else {
+ 		err = mlx5_core_qp_modify(dev->mdev, op, optpar, context,
++>>>>>>> 0680efa21478 (IB/mlx5: Refactor raw packet QP modify function)
  					  &base->mqp);
+ 	}
+ 
  	if (err)
  		goto out;
  
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
