PCI: Remove unnecessary space before function pointer arguments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [usb] Remove unnecessary space before function pointer arguments (Torez Smith) [1383823]
Rebuild_FUZZ: 95.87%
commit-author Benjamin Young <youngcdev@gmail.com>
commit 7cb3026411cf2b64797eb6b1caacfba6ca4258d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7cb30264.failed

Make spacing more consistent in the code for function pointer declarations
based on checkpatch.pl.

	Signed-off-by: Benjamin Young <youngcdev@gmail.com>
[bhelgaas: make similar changes in include/linux/pci.h]
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 7cb3026411cf2b64797eb6b1caacfba6ca4258d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pcie/portdrv.h
#	include/linux/pci.h
diff --cc drivers/pci/pcie/portdrv.h
index 463b60975194,fbbf00b0992e..000000000000
--- a/drivers/pci/pcie/portdrv.h
+++ b/drivers/pci/pcie/portdrv.h
@@@ -11,14 -11,99 +11,91 @@@
  
  #include <linux/compiler.h>
  
 -/* Service Type */
 -#define PCIE_PORT_SERVICE_PME_SHIFT	0	/* Power Management Event */
 -#define PCIE_PORT_SERVICE_PME		(1 << PCIE_PORT_SERVICE_PME_SHIFT)
 -#define PCIE_PORT_SERVICE_AER_SHIFT	1	/* Advanced Error Reporting */
 -#define PCIE_PORT_SERVICE_AER		(1 << PCIE_PORT_SERVICE_AER_SHIFT)
 -#define PCIE_PORT_SERVICE_HP_SHIFT	2	/* Native Hotplug */
 -#define PCIE_PORT_SERVICE_HP		(1 << PCIE_PORT_SERVICE_HP_SHIFT)
 -#define PCIE_PORT_SERVICE_DPC_SHIFT	3	/* Downstream Port Containment */
 -#define PCIE_PORT_SERVICE_DPC		(1 << PCIE_PORT_SERVICE_DPC_SHIFT)
 -
  #define PCIE_PORT_DEVICE_MAXSERVICES   4
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_PCIEAER
+ int pcie_aer_init(void);
+ #else
+ static inline int pcie_aer_init(void) { return 0; }
+ #endif
+ 
+ #ifdef CONFIG_HOTPLUG_PCI_PCIE
+ int pcie_hp_init(void);
+ #else
+ static inline int pcie_hp_init(void) { return 0; }
+ #endif
+ 
+ #ifdef CONFIG_PCIE_PME
+ int pcie_pme_init(void);
+ #else
+ static inline int pcie_pme_init(void) { return 0; }
+ #endif
+ 
+ #ifdef CONFIG_PCIE_DPC
+ int pcie_dpc_init(void);
+ #else
+ static inline int pcie_dpc_init(void) { return 0; }
+ #endif
+ 
+ /* Port Type */
+ #define PCIE_ANY_PORT			(~0)
+ 
+ struct pcie_device {
+ 	int		irq;	    /* Service IRQ/MSI/MSI-X Vector */
+ 	struct pci_dev *port;	    /* Root/Upstream/Downstream Port */
+ 	u32		service;    /* Port service this device represents */
+ 	void		*priv_data; /* Service Private Data */
+ 	struct device	device;     /* Generic Device Interface */
+ };
+ #define to_pcie_device(d) container_of(d, struct pcie_device, device)
+ 
+ static inline void set_service_data(struct pcie_device *dev, void *data)
+ {
+ 	dev->priv_data = data;
+ }
+ 
+ static inline void *get_service_data(struct pcie_device *dev)
+ {
+ 	return dev->priv_data;
+ }
+ 
+ struct pcie_port_service_driver {
+ 	const char *name;
+ 	int (*probe)(struct pcie_device *dev);
+ 	void (*remove)(struct pcie_device *dev);
+ 	int (*suspend)(struct pcie_device *dev);
+ 	int (*resume_noirq)(struct pcie_device *dev);
+ 	int (*resume)(struct pcie_device *dev);
+ 	int (*runtime_suspend)(struct pcie_device *dev);
+ 	int (*runtime_resume)(struct pcie_device *dev);
+ 
+ 	/* Device driver may resume normal operations */
+ 	void (*error_resume)(struct pci_dev *dev);
+ 
+ 	/* Link Reset Capability - AER service driver specific */
+ 	pci_ers_result_t (*reset_link)(struct pci_dev *dev);
+ 
+ 	int port_type;  /* Type of the port this driver can handle */
+ 	u32 service;    /* Port service this device represents */
+ 
+ 	struct device_driver driver;
+ };
+ #define to_service_driver(d) \
+ 	container_of(d, struct pcie_port_service_driver, driver)
+ 
+ int pcie_port_service_register(struct pcie_port_service_driver *new);
+ void pcie_port_service_unregister(struct pcie_port_service_driver *new);
+ 
++>>>>>>> 7cb3026411cf (PCI: Remove unnecessary space before function pointer arguments)
  /*
 - * The PCIe Capability Interrupt Message Number (PCIe r3.1, sec 7.8.2) must
 - * be one of the first 32 MSI-X entries.  Per PCI r3.0, sec 6.8.3.1, MSI
 - * supports a maximum of 32 vectors per function.
 + * According to the PCI Express Base Specification 2.0, the indices of
 + * the MSI-X table entries used by port services must not exceed 31
   */
 -#define PCIE_PORT_MAX_MSI_ENTRIES	32
 +#define PCIE_PORT_MAX_MSIX_ENTRIES	32
  
 -#define get_descriptor_id(type, service) (((type - 4) << 8) | service)
 +#define get_descriptor_id(type, service) (((type - 4) << 4) | service)
  
  extern struct bus_type pcie_port_bus_type;
  int pcie_port_device_register(struct pci_dev *dev);
diff --cc include/linux/pci.h
index 8762c0f4063d,a6cd567c3fc1..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -689,52 -756,23 +689,66 @@@ struct pci_error_handlers 
  
  struct module;
  struct pci_driver {
++<<<<<<< HEAD
 +	struct list_head node;
 +	const char *name;
 +	const struct pci_device_id *id_table;	/* must be non-NULL for probe to be called */
 +	int  (*probe)  (struct pci_dev *dev, const struct pci_device_id *id);	/* New device inserted */
 +	void (*remove) (struct pci_dev *dev);	/* Device removed (NULL if not a hot-plug capable driver) */
 +	int  (*suspend) (struct pci_dev *dev, pm_message_t state);	/* Device suspended */
 +	int  (*suspend_late) (struct pci_dev *dev, pm_message_t state);
 +	int  (*resume_early) (struct pci_dev *dev);
 +	int  (*resume) (struct pci_dev *dev);	                /* Device woken up */
 +	void (*shutdown) (struct pci_dev *dev);
 +	int (*sriov_configure) (struct pci_dev *dev, int num_vfs); /* PF pdev */
++=======
+ 	struct list_head	node;
+ 	const char		*name;
+ 	const struct pci_device_id *id_table;	/* Must be non-NULL for probe to be called */
+ 	int  (*probe)(struct pci_dev *dev, const struct pci_device_id *id);	/* New device inserted */
+ 	void (*remove)(struct pci_dev *dev);	/* Device removed (NULL if not a hot-plug capable driver) */
+ 	int  (*suspend)(struct pci_dev *dev, pm_message_t state);	/* Device suspended */
+ 	int  (*suspend_late)(struct pci_dev *dev, pm_message_t state);
+ 	int  (*resume_early)(struct pci_dev *dev);
+ 	int  (*resume)(struct pci_dev *dev);	/* Device woken up */
+ 	void (*shutdown)(struct pci_dev *dev);
+ 	int  (*sriov_configure)(struct pci_dev *dev, int num_vfs); /* On PF */
++>>>>>>> 7cb3026411cf (PCI: Remove unnecessary space before function pointer arguments)
  	const struct pci_error_handlers *err_handler;
 -	const struct attribute_group **groups;
  	struct device_driver	driver;
 -	struct pci_dynids	dynids;
 +	struct pci_dynids dynids;
 +
 +	/* Extension to accomodate future upstream changes to this structure
 +	 * yet maintain RHEL7 KABI.  For Red Hat internal use only!
 +	 */
 +	struct pci_driver_rh	*pci_driver_rh;
  };
  
 +/*
 + * RHEL7 specific 'struct pci_driver' shadow structure to help maintain KABI
 + * going forward.  This structure will never be under KABI restrictions.
 + *
 + * When a new member is added to this shadow structure the driver should
 + * define this struct in the driver, like is done with struct pci_driver,
 + * and have pci_driver->pci_driver_rh point to it.
 + *
 + * The driver _must_ initialize the size member via a call to
 + *   set_pci_driver_rh_size(pci_driver_rh);
 + * or some equivalent so that the memcpy in __pci_register_driver() works as
 + * expected.
 + */
 +struct pci_driver_rh {
 +	unsigned int  size;	/* Note: always outside of __GENKSYMS__ check */
 +#ifndef __GENKSYMS__
 +	/* PCI function reset prepare or completed */
 +	void (*reset_notify)(struct pci_dev *dev, bool prepare);
 +#endif
 +};
 +
 +/* Helper to set pci_driver_rh->size */
 +#define set_pci_driver_rh_size(ptr) \
 +	ptr.size = sizeof(struct pci_driver_rh)
 +
  #define	to_pci_driver(drv) container_of(drv, struct pci_driver, driver)
  
  /**
* Unmerged path drivers/pci/pcie/portdrv.h
* Unmerged path include/linux/pci.h
