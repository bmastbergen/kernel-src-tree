scsi: megaraid_sas: 128 MSIX Support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: 128 MSIX Support (Tomas Henzl) [1356672]
Rebuild_FUZZ: 90.91%
commit-author Sasikumar Chandrasekaran <sasikumar.pc@broadcom.com>
commit 2493c67e518c772a573c3b1ad02e7ced5b53f6ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2493c67e.failed

SAS3.5 Generic Megaraid based Controllers will have the support for 128 MSI-X vectors,
resulting in the need to support 128 reply queues

	Signed-off-by: Sasikumar Chandrasekaran <sasikumar.pc@broadcom.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 2493c67e518c772a573c3b1ad02e7ced5b53f6ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_base.c
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index 656b68bb8eb3,6801a449d236..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -5163,6 -5128,23 +5160,26 @@@ static int megasas_init_fw(struct megas
  		else
  			instance->msix_vectors = 0;
  	}
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * MSI-X host index 0 is common for all adapter.
+ 	 * It is used for all MPT based Adapters.
+ 	 */
+ 	if (instance->msix_combined) {
+ 		instance->reply_post_host_index_addr[0] =
+ 				(u32 *)((u8 *)instance->reg_set +
+ 				MPI2_SUP_REPLY_POST_HOST_INDEX_OFFSET);
+ 	} else {
+ 		instance->reply_post_host_index_addr[0] =
+ 			(u32 *)((u8 *)instance->reg_set +
+ 			MPI2_REPLY_POST_HOST_INDEX_OFFSET);
+ 	}
+ 
+ 	i = pci_alloc_irq_vectors(instance->pdev, 1, 1, PCI_IRQ_LEGACY);
+ 	if (i < 0)
+ 		goto fail_setup_irqs;
++>>>>>>> 2493c67e518c (scsi: megaraid_sas: 128 MSIX Support)
  
  	dev_info(&instance->pdev->dev,
  		"firmware supports msix\t: (%d)", fw_msix_count);
diff --git a/drivers/scsi/megaraid/megaraid_sas.h b/drivers/scsi/megaraid/megaraid_sas.h
index e5ac6b1e5468..ccef47bac9d7 100644
--- a/drivers/scsi/megaraid/megaraid_sas.h
+++ b/drivers/scsi/megaraid/megaraid_sas.h
@@ -2149,6 +2149,7 @@ struct megasas_instance {
 	bool dev_handle;
 	bool fw_sync_cache_support;
 	bool is_ventura;
+	bool msix_combined;
 };
 struct MR_LD_VF_MAP {
 	u32 size;
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
diff --git a/drivers/scsi/megaraid/megaraid_sas_fusion.c b/drivers/scsi/megaraid/megaraid_sas_fusion.c
index 1d5bc8b1412e..3d81bf5cd8bd 100644
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@ -2391,7 +2391,7 @@ complete_cmd_fusion(struct megasas_instance *instance, u32 MSIxIndex)
 		 * pending to be completed
 		 */
 		if (threshold_reply_count >= THRESHOLD_REPLY_COUNT) {
-			if (fusion->adapter_type == INVADER_SERIES)
+			if (instance->msix_combined)
 				writel(((MSIxIndex & 0x7) << 24) |
 					fusion->last_reply_idx[MSIxIndex],
 					instance->reply_post_host_index_addr[MSIxIndex/8]);
@@ -2407,7 +2407,7 @@ complete_cmd_fusion(struct megasas_instance *instance, u32 MSIxIndex)
 		return IRQ_NONE;
 
 	wmb();
-	if (fusion->adapter_type == INVADER_SERIES)
+	if (instance->msix_combined)
 		writel(((MSIxIndex & 0x7) << 24) |
 			fusion->last_reply_idx[MSIxIndex],
 			instance->reply_post_host_index_addr[MSIxIndex/8]);
