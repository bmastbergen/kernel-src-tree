gre6: Cleanup GREv6 transmit path, call common GRE functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tom Herbert <tom@herbertland.com>
commit b05229f442288210f2b1f5b4b2a9d71836e90686
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b05229f4.failed

Changes in GREv6 transmit path:
  - Call gre_checksum, remove gre6_checksum
  - Rename ip6gre_xmit2 to __gre6_xmit
  - Call gre_build_header utility function
  - Call ip6_tnl_xmit common function
  - Call ip6_tnl_change_mtu, eliminate ip6gre_tunnel_change_mtu

	Signed-off-by: Tom Herbert <tom@herbertland.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b05229f442288210f2b1f5b4b2a9d71836e90686)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_gre.c
diff --cc net/ipv6/ip6_gre.c
index 82f2effbdc75,10127741a60d..000000000000
--- a/net/ipv6/ip6_gre.c
+++ b/net/ipv6/ip6_gre.c
@@@ -538,148 -506,22 +506,141 @@@ static netdev_tx_t __gre6_xmit(struct s
  	if (dev->type == ARPHRD_ETHER)
  		IPCB(skb)->flags = 0;
  
- 	if (dev->header_ops && dev->type == ARPHRD_IP6GRE) {
- 		gre_hlen = 0;
- 		ipv6h = (struct ipv6hdr *)skb->data;
- 		fl6->daddr = ipv6h->daddr;
- 	} else {
- 		gre_hlen = tunnel->hlen;
+ 	if (dev->header_ops && dev->type == ARPHRD_IP6GRE)
+ 		fl6->daddr = ((struct ipv6hdr *)skb->data)->daddr;
+ 	else
  		fl6->daddr = tunnel->parms.raddr;
- 	}
  
- 	if (!fl6->flowi6_mark)
- 		dst = dst_cache_get(&tunnel->dst_cache);
+ 	if (tunnel->parms.o_flags & TUNNEL_SEQ)
+ 		tunnel->o_seqno++;
  
- 	if (!dst) {
- 		dst = ip6_route_output(net, NULL, fl6);
+ 	/* Push GRE header. */
+ 	gre_build_header(skb, tunnel->tun_hlen, tunnel->parms.o_flags,
+ 			 protocol, tunnel->parms.o_key, htonl(tunnel->o_seqno));
  
- 		if (dst->error)
- 			goto tx_err_link_failure;
- 		dst = xfrm_lookup(net, dst, flowi6_to_flowi(fl6), NULL, 0);
- 		if (IS_ERR(dst)) {
- 			err = PTR_ERR(dst);
- 			dst = NULL;
- 			goto tx_err_link_failure;
- 		}
- 		ndst = dst;
- 	}
+ 	skb_set_inner_protocol(skb, proto);
  
++<<<<<<< HEAD
 +	tdev = dst->dev;
 +
 +	if (tdev == dev) {
 +		stats->collisions++;
 +		net_warn_ratelimited("%s: Local routing loop detected!\n",
 +				     tunnel->parms.name);
 +		goto tx_err_dst_release;
 +	}
 +
 +	mtu = dst_mtu(dst) - sizeof(*ipv6h);
 +	if (encap_limit >= 0) {
 +		min_headroom += 8;
 +		mtu -= 8;
 +	}
 +	if (mtu < IPV6_MIN_MTU)
 +		mtu = IPV6_MIN_MTU;
 +	if (skb_dst(skb))
 +		skb_dst(skb)->ops->update_pmtu(skb_dst(skb), NULL, skb, mtu);
 +	if (skb->len > mtu && !skb_is_gso(skb)) {
 +		*pmtu = mtu;
 +		err = -EMSGSIZE;
 +		goto tx_err_dst_release;
 +	}
 +
 +	if (tunnel->err_count > 0) {
 +		if (time_before(jiffies,
 +				tunnel->err_time + IP6TUNNEL_ERR_TIMEO)) {
 +			tunnel->err_count--;
 +
 +			dst_link_failure(skb);
 +		} else
 +			tunnel->err_count = 0;
 +	}
 +
 +	skb_scrub_packet(skb, !net_eq(tunnel->net, dev_net(dev)));
 +
 +	min_headroom += LL_RESERVED_SPACE(tdev) + gre_hlen + dst->header_len;
 +
 +	if (skb_headroom(skb) < min_headroom || skb_header_cloned(skb)) {
 +		int head_delta = SKB_DATA_ALIGN(min_headroom -
 +						skb_headroom(skb) +
 +						16);
 +
 +		err = pskb_expand_head(skb, max_t(int, head_delta, 0),
 +				       0, GFP_ATOMIC);
 +		if (min_headroom > dev->needed_headroom)
 +			dev->needed_headroom = min_headroom;
 +		if (unlikely(err))
 +			goto tx_err_dst_release;
 +	}
 +
 +	if (!fl6->flowi6_mark && ndst)
 +		dst_cache_set_ip6(&tunnel->dst_cache, ndst, &fl6->saddr);
 +	skb_dst_set(skb, dst);
 +
 +	proto = NEXTHDR_GRE;
 +	if (encap_limit >= 0) {
 +		init_tel_txopt(&opt, encap_limit);
 +		ipv6_push_nfrag_opts(skb, &opt.ops, &proto, NULL);
 +	}
 +
 +	err = iptunnel_handle_offloads(skb,
 +				       (tunnel->parms.o_flags & GRE_CSUM) ?
 +				       SKB_GSO_GRE_CSUM : SKB_GSO_GRE);
 +	if (err)
 +		goto tx_err_dst_release;
 +
 +	skb_push(skb, gre_hlen);
 +	skb_reset_network_header(skb);
 +	skb_set_transport_header(skb, sizeof(*ipv6h));
 +
 +	/*
 +	 *	Push down and install the IP header.
 +	 */
 +	ipv6h = ipv6_hdr(skb);
 +	ip6_flow_hdr(ipv6h, INET_ECN_encapsulate(0, dsfield), fl6->flowlabel);
 +	ipv6h->hop_limit = tunnel->parms.hop_limit;
 +	ipv6h->nexthdr = proto;
 +	ipv6h->saddr = fl6->saddr;
 +	ipv6h->daddr = fl6->daddr;
 +
 +	((__be16 *)(ipv6h + 1))[0] = tunnel->parms.o_flags;
 +	protocol = (dev->type == ARPHRD_ETHER) ?
 +		    htons(ETH_P_TEB) : skb->protocol;
 +	((__be16 *)(ipv6h + 1))[1] = protocol;
 +
 +	if (tunnel->parms.o_flags&(GRE_KEY|GRE_CSUM|GRE_SEQ)) {
 +		__be32 *ptr = (__be32 *)(((u8 *)ipv6h) + tunnel->hlen - 4);
 +
 +		if (tunnel->parms.o_flags&GRE_SEQ) {
 +			++tunnel->o_seqno;
 +			*ptr = htonl(tunnel->o_seqno);
 +			ptr--;
 +		}
 +		if (tunnel->parms.o_flags&GRE_KEY) {
 +			*ptr = tunnel->parms.o_key;
 +			ptr--;
 +		}
 +		if ((tunnel->parms.o_flags & GRE_CSUM) &&
 +		    !(skb_shinfo(skb)->gso_type &
 +		      (SKB_GSO_GRE | SKB_GSO_GRE_CSUM))) {
 +			*ptr = 0;
 +			*(__sum16 *)ptr = gre6_checksum(skb);
 +		}
 +	}
 +
 +	skb_set_inner_protocol(skb, protocol);
 +
 +	ip6tunnel_xmit(NULL, skb, dev);
 +	return 0;
 +tx_err_link_failure:
 +	stats->tx_carrier_errors++;
 +	dst_link_failure(skb);
 +tx_err_dst_release:
 +	dst_release(dst);
 +	return err;
++=======
+ 	return ip6_tnl_xmit(skb, dev, dsfield, fl6, encap_limit, pmtu,
+ 			    NEXTHDR_GRE);
++>>>>>>> b05229f44228 (gre6: Cleanup GREv6 transmit path, call common GRE functions)
  }
  
  static inline int ip6gre_xmit_ipv4(struct sk_buff *skb, struct net_device *dev)
* Unmerged path net/ipv6/ip6_gre.c
