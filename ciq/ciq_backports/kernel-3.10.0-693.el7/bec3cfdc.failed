net: skb_segment() provides list head and tail

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] skb_segment() provides list head and tail (Ivan Vecera) [1382040]
Rebuild_FUZZ: 94.25%
commit-author Eric Dumazet <edumazet@google.com>
commit bec3cfdca36bf43cfa3751ad7b56db1a307e0760
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bec3cfdc.failed

Its unfortunate we have to walk again skb list to find the tail
after segmentation, even if data is probably hot in cpu caches.

skb_segment() can store the tail of the list into segs->prev,
and validate_xmit_skb_list() can immediately get the tail.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bec3cfdca36bf43cfa3751ad7b56db1a307e0760)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 0198b4df7270,7d5691cc1f47..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -2788,7 -2719,33 +2788,37 @@@ out_kfree_skb
  out_null:
  	return NULL;
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL_GPL(dev_hard_start_xmit);
++=======
+ 
+ struct sk_buff *validate_xmit_skb_list(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	struct sk_buff *next, *head = NULL, *tail;
+ 
+ 	for (; skb != NULL; skb = next) {
+ 		next = skb->next;
+ 		skb->next = NULL;
+ 
+ 		/* in case skb wont be segmented, point to itself */
+ 		skb->prev = skb;
+ 
+ 		skb = validate_xmit_skb(skb, dev);
+ 		if (!skb)
+ 			continue;
+ 
+ 		if (!head)
+ 			head = skb;
+ 		else
+ 			tail->next = skb;
+ 		/* If skb was segmented, skb->prev points to
+ 		 * the last segment. If not, it still contains skb.
+ 		 */
+ 		tail = skb->prev;
+ 	}
+ 	return head;
+ }
++>>>>>>> bec3cfdca36b (net: skb_segment() provides list head and tail)
  
  static void qdisc_pkt_len_init(struct sk_buff *skb)
  {
* Unmerged path net/core/dev.c
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index c7043c783fdb..66fb09a62c1d 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3299,6 +3299,11 @@ perform_csum_check:
 		}
 	} while ((offset += len) < head_skb->len);
 
+	/* Some callers want to get the end of the list.
+	 * Put it in segs->prev to avoid walking the list.
+	 * (see validate_xmit_skb_list() for example)
+	 */
+	segs->prev = tail;
 	return segs;
 
 err:
