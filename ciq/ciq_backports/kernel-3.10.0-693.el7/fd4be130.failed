perf evsel: Allow unresolved symbol names to be printed as addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit fd4be13067ef65bf33b965a18c717889305d5fea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/fd4be130.failed

The fprintf_sym() and fprintf_callchain() methods now allow users to
change the existing behaviour of showing "[unknown]" as the name of
unresolved symbols to instead show "[0x123456]", i.e. its address.

The current patch doesn't change tools to use this facility, the results
from 'perf trace' and 'perf script' cotinue like:

70.109 ( 0.001 ms): qemu-system-x8/10153 poll(ufds: 0x7f2d93ffe870, nfds: 1) = 0 Timeout
                                   [unknown] (/usr/lib64/libc-2.22.so)
                                   [unknown] (/usr/lib64/libspice-server.so.1.10.0)
                                   [unknown] (/usr/lib64/libspice-server.so.1.10.0)
                                   [unknown] (/usr/lib64/libspice-server.so.1.10.0)
                                   start_thread+0xca (/usr/lib64/libpthread-2.22.so)
                                   __clone+0x6d (/usr/lib64/libc-2.22.so)

The next patch will make 'perf trace' use the new formatting.

	Suggested-by: Milian Wolff <milian.wolff@kdab.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-fja1ods5vqpg42mdz09xcz3r@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit fd4be13067ef65bf33b965a18c717889305d5fea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/session.c
diff --cc tools/perf/util/session.c
index 62b6d4051b99,0516d06a2741..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -1965,9 -1966,10 +1965,10 @@@ void perf_evsel__print_ip(struct perf_e
  	int print_symoffset = print_opts & PRINT_IP_OPT_SYMOFFSET;
  	int print_oneline = print_opts & PRINT_IP_OPT_ONELINE;
  	int print_srcline = print_opts & PRINT_IP_OPT_SRCLINE;
+ 	int print_unknown_as_addr = print_opts & PRINT_IP_OPT_UNKNOWN_AS_ADDR;
  	char s = print_oneline ? ' ' : '\t';
  
 -	if (sample->callchain) {
 +	if (symbol_conf.use_callchain && sample->callchain) {
  		struct addr_location node_al;
  
  		if (thread__resolve_callchain(al->thread, evsel,
@@@ -2001,15 -2003,17 +2002,29 @@@
  				addr = node->map->map_ip(node->map, node->ip);
  
  			if (print_sym) {
++<<<<<<< HEAD
 +				fprintf(fp, " ");
 +				if (print_symoffset) {
 +					node_al.addr = addr;
 +					node_al.map  = node->map;
 +					symbol__fprintf_symname_offs(node->sym,
 +								     &node_al,
 +								     fp);
 +				} else
 +					symbol__fprintf_symname(node->sym, fp);
++=======
+ 				printed += fprintf(fp, " ");
+ 				node_al.addr = addr;
+ 				node_al.map  = node->map;
+ 
+ 				if (print_symoffset) {
+ 					printed += __symbol__fprintf_symname_offs(node->sym, &node_al,
+ 										  print_unknown_as_addr, fp);
+ 				} else {
+ 					printed += __symbol__fprintf_symname(node->sym, &node_al,
+ 									     print_unknown_as_addr, fp);
+ 				}
++>>>>>>> fd4be13067ef (perf evsel: Allow unresolved symbol names to be printed as addresses)
  			}
  
  			if (print_dso) {
@@@ -2029,23 -2032,42 +2044,55 @@@
  next:
  			callchain_cursor_advance(&callchain_cursor);
  		}
 -	}
  
 -	return printed;
 -}
 +	} else {
 +		if (al->sym && al->sym->ignore)
 +			return;
  
++<<<<<<< HEAD
 +		fprintf(fp, "%-*.*s", left_alignment, left_alignment, " ");
++=======
+ int perf_evsel__fprintf_sym(struct perf_evsel *evsel, struct perf_sample *sample,
+ 			    struct addr_location *al, int left_alignment,
+ 			    unsigned int print_opts, unsigned int stack_depth,
+ 			    FILE *fp)
+ {
+ 	int printed = 0;
+ 	int print_ip = print_opts & PRINT_IP_OPT_IP;
+ 	int print_sym = print_opts & PRINT_IP_OPT_SYM;
+ 	int print_dso = print_opts & PRINT_IP_OPT_DSO;
+ 	int print_symoffset = print_opts & PRINT_IP_OPT_SYMOFFSET;
+ 	int print_srcline = print_opts & PRINT_IP_OPT_SRCLINE;
+ 	int print_unknown_as_addr = print_opts & PRINT_IP_OPT_UNKNOWN_AS_ADDR;
+ 
+ 	if (symbol_conf.use_callchain && sample->callchain) {
+ 		printed += perf_evsel__fprintf_callchain(evsel, sample, al, left_alignment,
+ 							 print_opts, stack_depth, fp);
+ 	} else if (!(al->sym && al->sym->ignore)) {
+ 		printed += fprintf(fp, "%-*.*s", left_alignment, left_alignment, " ");
++>>>>>>> fd4be13067ef (perf evsel: Allow unresolved symbol names to be printed as addresses)
  
  		if (print_ip)
 -			printed += fprintf(fp, "%16" PRIx64, sample->ip);
 +			fprintf(fp, "%16" PRIx64, sample->ip);
  
  		if (print_sym) {
++<<<<<<< HEAD
 +			fprintf(fp, " ");
 +			if (print_symoffset)
 +				symbol__fprintf_symname_offs(al->sym, al,
 +							     fp);
 +			else
 +				symbol__fprintf_symname(al->sym, fp);
++=======
+ 			printed += fprintf(fp, " ");
+ 			if (print_symoffset) {
+ 				printed += __symbol__fprintf_symname_offs(al->sym, al,
+ 									  print_unknown_as_addr, fp);
+ 			} else {
+ 				printed += __symbol__fprintf_symname(al->sym, al,
+ 								     print_unknown_as_addr, fp);
+ 			}
++>>>>>>> fd4be13067ef (perf evsel: Allow unresolved symbol names to be printed as addresses)
  		}
  
  		if (print_dso) {
* Unmerged path tools/perf/util/session.c
diff --git a/tools/perf/util/session.h b/tools/perf/util/session.h
index a6bc4ddbae3e..ec487aab54ae 100644
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@ -42,6 +42,7 @@ struct perf_session {
 #define PRINT_IP_OPT_SYMOFFSET	(1<<3)
 #define PRINT_IP_OPT_ONELINE	(1<<4)
 #define PRINT_IP_OPT_SRCLINE	(1<<5)
+#define PRINT_IP_OPT_UNKNOWN_AS_ADDR (1<<6)
 
 struct perf_tool;
 
diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index e7588dc91518..bb162ee433c6 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -264,8 +264,9 @@ size_t symbol__fprintf(struct symbol *sym, FILE *fp)
 		       sym->name);
 }
 
-size_t symbol__fprintf_symname_offs(const struct symbol *sym,
-				    const struct addr_location *al, FILE *fp)
+size_t __symbol__fprintf_symname_offs(const struct symbol *sym,
+				      const struct addr_location *al,
+				      bool unknown_as_addr, FILE *fp)
 {
 	unsigned long offset;
 	size_t length;
@@ -280,13 +281,29 @@ size_t symbol__fprintf_symname_offs(const struct symbol *sym,
 			length += fprintf(fp, "+0x%lx", offset);
 		}
 		return length;
-	} else
+	} else if (al && unknown_as_addr)
+		return fprintf(fp, "[%#" PRIx64 "]", al->addr);
+	else
 		return fprintf(fp, "[unknown]");
 }
 
+size_t symbol__fprintf_symname_offs(const struct symbol *sym,
+				    const struct addr_location *al,
+				    FILE *fp)
+{
+	return __symbol__fprintf_symname_offs(sym, al, false, fp);
+}
+
+size_t __symbol__fprintf_symname(const struct symbol *sym,
+				 const struct addr_location *al,
+				 bool unknown_as_addr, FILE *fp)
+{
+	return __symbol__fprintf_symname_offs(sym, al, unknown_as_addr, fp);
+}
+
 size_t symbol__fprintf_symname(const struct symbol *sym, FILE *fp)
 {
-	return symbol__fprintf_symname_offs(sym, NULL, fp);
+	return __symbol__fprintf_symname_offs(sym, NULL, false, fp);
 }
 
 void symbols__delete(struct rb_root *symbols)
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index c8b7544d9267..e2562568418d 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -262,8 +262,14 @@ int symbol__init(struct perf_env *env);
 void symbol__exit(void);
 void symbol__elf_init(void);
 struct symbol *symbol__new(u64 start, u64 len, u8 binding, const char *name);
+size_t __symbol__fprintf_symname_offs(const struct symbol *sym,
+				      const struct addr_location *al,
+				      bool unknown_as_addr, FILE *fp);
 size_t symbol__fprintf_symname_offs(const struct symbol *sym,
 				    const struct addr_location *al, FILE *fp);
+size_t __symbol__fprintf_symname(const struct symbol *sym,
+				 const struct addr_location *al,
+				 bool unknown_as_addr, FILE *fp);
 size_t symbol__fprintf_symname(const struct symbol *sym, FILE *fp);
 size_t symbol__fprintf(struct symbol *sym, FILE *fp);
 bool symbol_type__is_a(char symbol_type, enum map_type map_type);
