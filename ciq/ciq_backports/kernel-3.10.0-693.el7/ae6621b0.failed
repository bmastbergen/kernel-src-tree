sysfs, kernfs: move internal decls to fs/kernfs/kernfs-internal.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tejun Heo <tj@kernel.org>
commit ae6621b0716852146e4655fef7f74a181faa6c81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ae6621b0.failed

Move data structure, constant and basic accessor declarations from
fs/sysfs/sysfs.h to fs/kernfs/kernfs-internal.h.  The two files
currently include each other.  Once kernfs / sysfs separation is
complete, the cross inclusions will be removed.  Inclusion protectors
are added to fs/sysfs/sysfs.h to allow cross-inclusion.

This patch doesn't introduce any functional changes.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit ae6621b0716852146e4655fef7f74a181faa6c81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/sysfs.h
diff --cc fs/sysfs/sysfs.h
index d1e4043eb0c3,f8c936f31b37..000000000000
--- a/fs/sysfs/sysfs.h
+++ b/fs/sysfs/sysfs.h
@@@ -8,133 -8,11 +8,136 @@@
   * This file is released under the GPLv2.
   */
  
- #include <linux/lockdep.h>
- #include <linux/kobject_ns.h>
- #include <linux/fs.h>
- #include <linux/rbtree.h>
+ #ifndef __SYSFS_INTERNAL_H
+ #define __SYSFS_INTERNAL_H
  
++<<<<<<< HEAD
 +struct sysfs_open_dirent;
 +
 +/* type-specific structures for sysfs_dirent->s_* union members */
 +struct sysfs_elem_dir {
 +	struct kobject		*kobj;
 +
 +	unsigned long		subdirs;
 +	/* children rbtree starts here and goes through sd->s_rb */
 +	struct rb_root		children;
 +};
 +
 +struct sysfs_elem_symlink {
 +	struct sysfs_dirent	*target_sd;
 +};
 +
 +struct sysfs_elem_attr {
 +	struct attribute	*attr;
 +	struct sysfs_open_dirent *open;
 +};
 +
 +struct sysfs_elem_bin_attr {
 +	struct bin_attribute	*bin_attr;
 +	struct hlist_head	buffers;
 +};
 +
 +struct sysfs_inode_attrs {
 +	struct iattr	ia_iattr;
 +	void		*ia_secdata;
 +	u32		ia_secdata_len;
 +};
 +
 +/*
 + * sysfs_dirent - the building block of sysfs hierarchy.  Each and
 + * every sysfs node is represented by single sysfs_dirent.
 + *
 + * As long as s_count reference is held, the sysfs_dirent itself is
 + * accessible.  Dereferencing s_elem or any other outer entity
 + * requires s_active reference.
 + */
 +struct sysfs_dirent {
 +	atomic_t		s_count;
 +	atomic_t		s_active;
 +#ifdef CONFIG_DEBUG_LOCK_ALLOC
 +	struct lockdep_map	dep_map;
 +#endif
 +	struct sysfs_dirent	*s_parent;
 +	const char		*s_name;
 +
 +	struct rb_node		s_rb;
 +
 +	union {
 +		struct completion	*completion;
 +		struct sysfs_dirent	*removed_list;
 +	} u;
 +
 +	const void		*s_ns; /* namespace tag */
 +	unsigned int		s_hash; /* ns + name hash */
 +	union {
 +		struct sysfs_elem_dir		s_dir;
 +		struct sysfs_elem_symlink	s_symlink;
 +		struct sysfs_elem_attr		s_attr;
 +		struct sysfs_elem_bin_attr	s_bin_attr;
 +	};
 +
 +	unsigned short		s_flags;
 +	umode_t 		s_mode;
 +	unsigned int		s_ino;
 +	struct sysfs_inode_attrs *s_iattr;
 +};
 +
 +#define SD_DEACTIVATED_BIAS		INT_MIN
 +
 +#define SYSFS_TYPE_MASK			0x00ff
 +#define SYSFS_DIR			0x0001
 +#define SYSFS_KOBJ_ATTR			0x0002
 +#define SYSFS_KOBJ_BIN_ATTR		0x0004
 +#define SYSFS_KOBJ_LINK			0x0008
 +#define SYSFS_COPY_NAME			(SYSFS_DIR | SYSFS_KOBJ_LINK)
 +#define SYSFS_ACTIVE_REF		(SYSFS_KOBJ_ATTR | SYSFS_KOBJ_BIN_ATTR)
 +
 +/* identify any namespace tag on sysfs_dirents */
 +#define SYSFS_NS_TYPE_MASK		0xf00
 +#define SYSFS_NS_TYPE_SHIFT		8
 +
 +#define SYSFS_FLAG_MASK			~(SYSFS_NS_TYPE_MASK|SYSFS_TYPE_MASK)
 +#define SYSFS_FLAG_REMOVED		0x02000
 +
 +static inline unsigned int sysfs_type(struct sysfs_dirent *sd)
 +{
 +	return sd->s_flags & SYSFS_TYPE_MASK;
 +}
 +
 +/*
 + * Return any namespace tags on this dirent.
 + * enum kobj_ns_type is defined in linux/kobject.h
 + */
 +static inline enum kobj_ns_type sysfs_ns_type(struct sysfs_dirent *sd)
 +{
 +	return (sd->s_flags & SYSFS_NS_TYPE_MASK) >> SYSFS_NS_TYPE_SHIFT;
 +}
 +
 +#ifdef CONFIG_DEBUG_LOCK_ALLOC
 +#define sysfs_dirent_init_lockdep(sd)				\
 +do {								\
 +	struct attribute *attr = sd->s_attr.attr;		\
 +	struct lock_class_key *key = attr->key;			\
 +	if (!key)						\
 +		key = &attr->skey;				\
 +								\
 +	lockdep_init_map(&sd->dep_map, "s_active", key, 0);	\
 +} while(0)
 +#else
 +#define sysfs_dirent_init_lockdep(sd) do {} while(0)
 +#endif
 +
 +/*
 + * Context structure to be used while adding/removing nodes.
 + */
 +struct sysfs_addrm_cxt {
 +	struct sysfs_dirent	*parent_sd;
 +	struct sysfs_dirent	*removed;
 +};
++=======
+ #include "../kernfs/kernfs-internal.h"
+ #include <linux/sysfs.h>
++>>>>>>> ae6621b07168 (sysfs, kernfs: move internal decls to fs/kernfs/kernfs-internal.h)
  
  /*
   * mount.c
diff --git a/fs/kernfs/kernfs-internal.h b/fs/kernfs/kernfs-internal.h
new file mode 100644
index 000000000000..5a2c3a17d7cb
--- /dev/null
+++ b/fs/kernfs/kernfs-internal.h
@@ -0,0 +1,115 @@
+/*
+ * fs/kernfs/kernfs-internal.h - kernfs internal header file
+ *
+ * Copyright (c) 2001-3 Patrick Mochel
+ * Copyright (c) 2007 SUSE Linux Products GmbH
+ * Copyright (c) 2007, 2013 Tejun Heo <teheo@suse.de>
+ *
+ * This file is released under the GPLv2.
+ */
+
+#ifndef __KERNFS_INTERNAL_H
+#define __KERNFS_INTERNAL_H
+
+#include <linux/lockdep.h>
+#include <linux/fs.h>
+#include <linux/rbtree.h>
+
+#include <linux/kernfs.h>
+
+struct sysfs_open_dirent;
+
+/* type-specific structures for sysfs_dirent->s_* union members */
+struct sysfs_elem_dir {
+	unsigned long		subdirs;
+	/* children rbtree starts here and goes through sd->s_rb */
+	struct rb_root		children;
+};
+
+struct sysfs_elem_symlink {
+	struct sysfs_dirent	*target_sd;
+};
+
+struct sysfs_elem_attr {
+	const struct kernfs_ops	*ops;
+	struct sysfs_open_dirent *open;
+	loff_t			size;
+};
+
+struct sysfs_inode_attrs {
+	struct iattr	ia_iattr;
+	void		*ia_secdata;
+	u32		ia_secdata_len;
+};
+
+/*
+ * sysfs_dirent - the building block of sysfs hierarchy.  Each and
+ * every sysfs node is represented by single sysfs_dirent.
+ *
+ * As long as s_count reference is held, the sysfs_dirent itself is
+ * accessible.  Dereferencing s_elem or any other outer entity
+ * requires s_active reference.
+ */
+struct sysfs_dirent {
+	atomic_t		s_count;
+	atomic_t		s_active;
+#ifdef CONFIG_DEBUG_LOCK_ALLOC
+	struct lockdep_map	dep_map;
+#endif
+	struct sysfs_dirent	*s_parent;
+	const char		*s_name;
+
+	struct rb_node		s_rb;
+
+	union {
+		struct completion	*completion;
+		struct sysfs_dirent	*removed_list;
+	} u;
+
+	const void		*s_ns; /* namespace tag */
+	unsigned int		s_hash; /* ns + name hash */
+	union {
+		struct sysfs_elem_dir		s_dir;
+		struct sysfs_elem_symlink	s_symlink;
+		struct sysfs_elem_attr		s_attr;
+	};
+
+	void			*priv;
+
+	unsigned short		s_flags;
+	umode_t			s_mode;
+	unsigned int		s_ino;
+	struct sysfs_inode_attrs *s_iattr;
+};
+
+#define SD_DEACTIVATED_BIAS		INT_MIN
+
+#define SYSFS_TYPE_MASK			0x000f
+#define SYSFS_DIR			0x0001
+#define SYSFS_KOBJ_ATTR			0x0002
+#define SYSFS_KOBJ_LINK			0x0004
+#define SYSFS_COPY_NAME			(SYSFS_DIR | SYSFS_KOBJ_LINK)
+#define SYSFS_ACTIVE_REF		SYSFS_KOBJ_ATTR
+
+#define SYSFS_FLAG_MASK			~SYSFS_TYPE_MASK
+#define SYSFS_FLAG_REMOVED		0x0010
+#define SYSFS_FLAG_NS			0x0020
+#define SYSFS_FLAG_HAS_SEQ_SHOW		0x0040
+#define SYSFS_FLAG_HAS_MMAP		0x0080
+#define SYSFS_FLAG_LOCKDEP		0x0100
+
+static inline unsigned int sysfs_type(struct sysfs_dirent *sd)
+{
+	return sd->s_flags & SYSFS_TYPE_MASK;
+}
+
+/*
+ * Context structure to be used while adding/removing nodes.
+ */
+struct sysfs_addrm_cxt {
+	struct sysfs_dirent	*removed;
+};
+
+#include "../sysfs/sysfs.h"
+
+#endif	/* __KERNFS_INTERNAL_H */
* Unmerged path fs/sysfs/sysfs.h
