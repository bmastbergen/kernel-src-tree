enic: add support for set/get rss hash key

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Govindarajulu Varadarajan <_govind@gmx.com>
commit 4f675eb2a736dfb65d68a00ff38e9342252eeabc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4f675eb2.failed

This patch adds support for setting/getting rss hash key using ethtool.

v2:
respin patch to support RSS hash function changes.

	Signed-off-by: Govindarajulu Varadarajan <_govind@gmx.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4f675eb2a736dfb65d68a00ff38e9342252eeabc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cisco/enic/enic.h
#	drivers/net/ethernet/cisco/enic/enic_ethtool.c
diff --cc drivers/net/ethernet/cisco/enic/enic.h
index 4800b6e36473,25c4d88853d8..000000000000
--- a/drivers/net/ethernet/cisco/enic/enic.h
+++ b/drivers/net/ethernet/cisco/enic/enic.h
@@@ -190,32 -187,9 +190,36 @@@ struct enic 
  	unsigned int cq_count;
  	struct enic_rfs_flw_tbl rfs_h;
  	u32 rx_copybreak;
++<<<<<<< HEAD
 +	struct vnic_gen_stats gen_stats;
++=======
+ 	u8 rss_key[ENIC_RSS_LEN];
++>>>>>>> 4f675eb2a736 (enic: add support for set/get rss hash key)
  };
  
 +static inline struct net_device *vnic_get_netdev(struct vnic_dev *vdev)
 +{
 +	struct enic *enic = vdev->priv;
 +
 +	return enic->netdev;
 +}
 +
 +/* wrappers function for kernel log
 + */
 +#define vdev_err(vdev, fmt, ...)					\
 +	dev_err(&(vdev)->pdev->dev, fmt, ##__VA_ARGS__)
 +#define vdev_warn(vdev, fmt, ...)					\
 +	dev_warn(&(vdev)->pdev->dev, fmt, ##__VA_ARGS__)
 +#define vdev_info(vdev, fmt, ...)					\
 +	dev_info(&(vdev)->pdev->dev, fmt, ##__VA_ARGS__)
 +
 +#define vdev_neterr(vdev, fmt, ...)					\
 +	netdev_err(vnic_get_netdev(vdev), fmt, ##__VA_ARGS__)
 +#define vdev_netwarn(vdev, fmt, ...)					\
 +	netdev_warn(vnic_get_netdev(vdev), fmt, ##__VA_ARGS__)
 +#define vdev_netinfo(vdev, fmt, ...)					\
 +	netdev_info(vnic_get_netdev(vdev), fmt, ##__VA_ARGS__)
 +
  static inline struct device *enic_get_dev(struct enic *enic)
  {
  	return &(enic->pdev->dev);
diff --cc drivers/net/ethernet/cisco/enic/enic_ethtool.c
index e7557a372ed3,eba1eb846d34..000000000000
--- a/drivers/net/ethernet/cisco/enic/enic_ethtool.c
+++ b/drivers/net/ethernet/cisco/enic/enic_ethtool.c
@@@ -23,7 -23,7 +23,11 @@@
  #include "enic.h"
  #include "enic_dev.h"
  #include "enic_clsf.h"
++<<<<<<< HEAD
 +#include "vnic_stats.h"
++=======
+ #include "vnic_rss.h"
++>>>>>>> 4f675eb2a736 (enic: add support for set/get rss hash key)
  
  struct enic_stat {
  	char name[ETH_GSTRING_LEN];
* Unmerged path drivers/net/ethernet/cisco/enic/enic.h
* Unmerged path drivers/net/ethernet/cisco/enic/enic_ethtool.c
diff --git a/drivers/net/ethernet/cisco/enic/enic_main.c b/drivers/net/ethernet/cisco/enic/enic_main.c
index 6a2b6024a655..f15560a06718 100644
--- a/drivers/net/ethernet/cisco/enic/enic_main.c
+++ b/drivers/net/ethernet/cisco/enic/enic_main.c
@@ -2024,11 +2024,10 @@ static int enic_dev_hang_reset(struct enic *enic)
 	return err;
 }
 
-static int enic_set_rsskey(struct enic *enic)
+int __enic_set_rsskey(struct enic *enic)
 {
 	union vnic_rss_key *rss_key_buf_va;
 	dma_addr_t rss_key_buf_pa;
-	u8 rss_key[ENIC_RSS_LEN];
 	int i, kidx, bidx, err;
 
 	rss_key_buf_va = pci_zalloc_consistent(enic->pdev,
@@ -2037,11 +2036,10 @@ static int enic_set_rsskey(struct enic *enic)
 	if (!rss_key_buf_va)
 		return -ENOMEM;
 
-	netdev_rss_key_fill(rss_key, ENIC_RSS_LEN);
 	for (i = 0; i < ENIC_RSS_LEN; i++) {
 		kidx = i / ENIC_RSS_BYTES_PER_KEY;
 		bidx = i % ENIC_RSS_BYTES_PER_KEY;
-		rss_key_buf_va->key[kidx].b[bidx] = rss_key[i];
+		rss_key_buf_va->key[kidx].b[bidx] = enic->rss_key[i];
 	}
 	spin_lock_bh(&enic->devcmd_lock);
 	err = enic_set_rss_key(enic,
@@ -2055,6 +2053,13 @@ static int enic_set_rsskey(struct enic *enic)
 	return err;
 }
 
+static int enic_set_rsskey(struct enic *enic)
+{
+	netdev_rss_key_fill(enic->rss_key, ENIC_RSS_LEN);
+
+	return __enic_set_rsskey(enic);
+}
+
 static int enic_set_rsscpu(struct enic *enic, u8 rss_hash_bits)
 {
 	dma_addr_t rss_cpu_buf_pa;
