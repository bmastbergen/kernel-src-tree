x86/cpufeature: Move some of the scattered feature bits to x86_capability

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] cpufeature: Move some of the scattered feature bits to x86_capability (Jiri Olsa) [1288964]
Rebuild_FUZZ: 97.18%
commit-author Borislav Petkov <bp@suse.de>
commit 2ccd71f1b278d450a6f8c8c737c7fe237ca06dc6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2ccd71f1.failed

Turn the CPUID leafs which are proper CPUID feature bit leafs into
separate ->x86_capability words.

	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: http://lkml.kernel.org/r/1449481182-27541-2-git-send-email-bp@alien8.de
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 2ccd71f1b278d450a6f8c8c737c7fe237ca06dc6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
#	arch/x86/kernel/cpu/scattered.c
diff --cc arch/x86/include/asm/cpufeature.h
index 9d2d987cf6d5,13d78e0e6ae0..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -12,8 -12,8 +12,13 @@@
  #include <asm/disabled-features.h>
  #endif
  
++<<<<<<< HEAD
 +#define NCAPINTS	20	/* N 32-bit words worth of info */
 +#define NBUGINTS	10	/* N 32-bit bug flags */
++=======
+ #define NCAPINTS	16	/* N 32-bit words worth of info */
+ #define NBUGINTS	1	/* N 32-bit bug flags */
++>>>>>>> 2ccd71f1b278 (x86/cpufeature: Move some of the scattered feature bits to x86_capability)
  
  /*
   * Note: If the comment begins with a quoted string, that string is used
@@@ -180,40 -181,27 +185,62 @@@
  
  /*
   * Auxiliary flags: Linux defined - For features scattered in various
-  * CPUID levels like 0x6, 0xA etc, word 7
+  * CPUID levels like 0x6, 0xA etc, word 7.
+  *
+  * Reuse free bits when adding new feature flags!
   */
++<<<<<<< HEAD
 +#define X86_FEATURE_IDA		(7*32+ 0) /* Intel Dynamic Acceleration */
 +#define X86_FEATURE_ARAT	(7*32+ 1) /* Always Running APIC Timer */
 +#define X86_FEATURE_CPB		(7*32+ 2) /* AMD Core Performance Boost */
 +#define X86_FEATURE_EPB		(7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
 +#define X86_FEATURE_PLN		(7*32+ 5) /* Intel Power Limit Notification */
 +#define X86_FEATURE_PTS		(7*32+ 6) /* Intel Package Thermal Status */
 +#define X86_FEATURE_DTHERM	(7*32+ 7) /* Digital Thermal Sensor */
 +#define X86_FEATURE_HW_PSTATE	(7*32+ 8) /* AMD HW-PState */
 +#define X86_FEATURE_PROC_FEEDBACK (7*32+ 9) /* AMD ProcFeedbackInterface */
 +#define X86_FEATURE_HWP		( 7*32+ 10) /* "hwp" Intel HWP */
 +#define X86_FEATURE_HWP_NOITFY	( 7*32+ 11) /* Intel HWP_NOTIFY */
 +#define X86_FEATURE_HWP_ACT_WINDOW ( 7*32+ 12) /* Intel HWP_ACT_WINDOW */
 +#define X86_FEATURE_HWP_EPP	( 7*32+13) /* Intel HWP_EPP */
 +#define X86_FEATURE_HWP_PKG_REQ ( 7*32+14) /* Intel HWP_PKG_REQ */
 +#define X86_FEATURE_INTEL_PT	( 7*32+15) /* Intel Processor Trace */
 +
 +/* Virtualization flags: Linux defined, word 8 */
 +#define X86_FEATURE_TPR_SHADOW  (8*32+ 0) /* Intel TPR Shadow */
 +#define X86_FEATURE_VNMI        (8*32+ 1) /* Intel Virtual NMI */
 +#define X86_FEATURE_FLEXPRIORITY (8*32+ 2) /* Intel FlexPriority */
 +#define X86_FEATURE_EPT         (8*32+ 3) /* Intel Extended Page Table */
 +#define X86_FEATURE_VPID        (8*32+ 4) /* Intel Virtual Processor ID */
 +#define X86_FEATURE_NPT		(8*32+ 5) /* AMD Nested Page Table support */
 +#define X86_FEATURE_LBRV	(8*32+ 6) /* AMD LBR Virtualization support */
 +#define X86_FEATURE_SVML	(8*32+ 7) /* "svm_lock" AMD SVM locking MSR */
 +#define X86_FEATURE_NRIPS	(8*32+ 8) /* "nrip_save" AMD SVM next_rip save */
 +#define X86_FEATURE_TSCRATEMSR  (8*32+ 9) /* "tsc_scale" AMD TSC scaling support */
 +#define X86_FEATURE_VMCBCLEAN   (8*32+10) /* "vmcb_clean" AMD VMCB clean bits support */
 +#define X86_FEATURE_FLUSHBYASID (8*32+11) /* AMD flush-by-ASID support */
 +#define X86_FEATURE_DECODEASSISTS (8*32+12) /* AMD Decode Assists support */
 +#define X86_FEATURE_PAUSEFILTER (8*32+13) /* AMD filtered pause intercept */
 +#define X86_FEATURE_PFTHRESHOLD (8*32+14) /* AMD pause filter threshold */
++=======
+ 
+ #define X86_FEATURE_CPB		( 7*32+ 2) /* AMD Core Performance Boost */
+ #define X86_FEATURE_EPB		( 7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
+ 
+ #define X86_FEATURE_HW_PSTATE	( 7*32+ 8) /* AMD HW-PState */
+ #define X86_FEATURE_PROC_FEEDBACK ( 7*32+ 9) /* AMD ProcFeedbackInterface */
+ 
+ #define X86_FEATURE_INTEL_PT	( 7*32+15) /* Intel Processor Trace */
+ 
+ /* Virtualization flags: Linux defined, word 8 */
+ #define X86_FEATURE_TPR_SHADOW  ( 8*32+ 0) /* Intel TPR Shadow */
+ #define X86_FEATURE_VNMI        ( 8*32+ 1) /* Intel Virtual NMI */
+ #define X86_FEATURE_FLEXPRIORITY ( 8*32+ 2) /* Intel FlexPriority */
+ #define X86_FEATURE_EPT         ( 8*32+ 3) /* Intel Extended Page Table */
+ #define X86_FEATURE_VPID        ( 8*32+ 4) /* Intel Virtual Processor ID */
+ 
+ #define X86_FEATURE_VMMCALL     ( 8*32+15) /* Prefer vmmcall to vmcall */
++>>>>>>> 2ccd71f1b278 (x86/cpufeature: Move some of the scattered feature bits to x86_capability)
  
  
  /* Intel-defined CPU features, CPUID level 0x00000007:0 (ebx), word 9 */
@@@ -254,9 -240,34 +281,33 @@@
  
  /* Intel-defined CPU QoS Sub-leaf, CPUID level 0x0000000F:1 (edx), word 12 */
  #define X86_FEATURE_CQM_OCCUP_LLC (12*32+ 0) /* LLC occupancy monitoring if 1 */
 -
 -/* AMD-defined CPU features, CPUID level 0x80000008 (ebx), word 13 */
 -#define X86_FEATURE_CLZERO	(13*32+0) /* CLZERO instruction */
 +#define X86_FEATURE_CQM_MBM_TOTAL (12*32+ 1) /* LLC Total MBM monitoring */
 +#define X86_FEATURE_CQM_MBM_LOCAL (12*32+ 2) /* LLC Local MBM monitoring */
  
+ /* Thermal and Power Management Leaf, CPUID level 0x00000006 (eax), word 14 */
+ #define X86_FEATURE_DTHERM	(14*32+ 0) /* Digital Thermal Sensor */
+ #define X86_FEATURE_IDA		(14*32+ 1) /* Intel Dynamic Acceleration */
+ #define X86_FEATURE_ARAT	(14*32+ 2) /* Always Running APIC Timer */
+ #define X86_FEATURE_PLN		(14*32+ 4) /* Intel Power Limit Notification */
+ #define X86_FEATURE_PTS		(14*32+ 6) /* Intel Package Thermal Status */
+ #define X86_FEATURE_HWP		(14*32+ 7) /* Intel Hardware P-states */
+ #define X86_FEATURE_HWP_NOTIFY	(14*32+ 8) /* HWP Notification */
+ #define X86_FEATURE_HWP_ACT_WINDOW (14*32+ 9) /* HWP Activity Window */
+ #define X86_FEATURE_HWP_EPP	(14*32+10) /* HWP Energy Perf. Preference */
+ #define X86_FEATURE_HWP_PKG_REQ (14*32+11) /* HWP Package Level Request */
+ 
+ /* AMD SVM Feature Identification, CPUID level 0x8000000a (edx), word 15 */
+ #define X86_FEATURE_NPT		(15*32+ 0) /* Nested Page Table support */
+ #define X86_FEATURE_LBRV	(15*32+ 1) /* LBR Virtualization support */
+ #define X86_FEATURE_SVML	(15*32+ 2) /* "svm_lock" SVM locking MSR */
+ #define X86_FEATURE_NRIPS	(15*32+ 3) /* "nrip_save" SVM next_rip save */
+ #define X86_FEATURE_TSCRATEMSR  (15*32+ 4) /* "tsc_scale" TSC scaling support */
+ #define X86_FEATURE_VMCBCLEAN   (15*32+ 5) /* "vmcb_clean" VMCB clean bits support */
+ #define X86_FEATURE_FLUSHBYASID (15*32+ 6) /* flush-by-ASID support */
+ #define X86_FEATURE_DECODEASSISTS (15*32+ 7) /* Decode Assists support */
+ #define X86_FEATURE_PAUSEFILTER (15*32+10) /* filtered pause intercept */
+ #define X86_FEATURE_PFTHRESHOLD (15*32+12) /* pause filter threshold */
+ 
  /*
   * BUG word(s)
   */
diff --cc arch/x86/kernel/cpu/scattered.c
index 21e9c42c84be,8cb57df9398d..000000000000
--- a/arch/x86/kernel/cpu/scattered.c
+++ b/arch/x86/kernel/cpu/scattered.c
@@@ -31,16 -31,6 +31,19 @@@ void init_scattered_cpuid_features(stru
  	const struct cpuid_bit *cb;
  
  	static const struct cpuid_bit cpuid_bits[] = {
++<<<<<<< HEAD
 +		{ X86_FEATURE_DTHERM,		CR_EAX, 0, 0x00000006, 0 },
 +		{ X86_FEATURE_IDA,		CR_EAX, 1, 0x00000006, 0 },
 +		{ X86_FEATURE_ARAT,		CR_EAX, 2, 0x00000006, 0 },
 +		{ X86_FEATURE_PLN,		CR_EAX, 4, 0x00000006, 0 },
 +		{ X86_FEATURE_PTS,		CR_EAX, 6, 0x00000006, 0 },
 +		{ X86_FEATURE_HWP,		CR_EAX, 7, 0x00000006, 0 },
 +		{ X86_FEATURE_HWP_NOITFY,	CR_EAX, 8, 0x00000006, 0 },
 +		{ X86_FEATURE_HWP_ACT_WINDOW,	CR_EAX, 9, 0x00000006, 0 },
 +		{ X86_FEATURE_HWP_EPP,		CR_EAX,10, 0x00000006, 0 },
 +		{ X86_FEATURE_HWP_PKG_REQ,	CR_EAX,11, 0x00000006, 0 },
++=======
++>>>>>>> 2ccd71f1b278 (x86/cpufeature: Move some of the scattered feature bits to x86_capability)
  		{ X86_FEATURE_INTEL_PT,		CR_EBX,25, 0x00000007, 0 },
  		{ X86_FEATURE_APERFMPERF,	CR_ECX, 0, 0x00000006, 0 },
  		{ X86_FEATURE_EPB,		CR_ECX, 3, 0x00000006, 0 },
* Unmerged path arch/x86/include/asm/cpufeature.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index d805b498a12b..e57539bfd83e 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -658,6 +658,8 @@ void get_cpu_cap(struct cpuinfo_x86 *c)
 		cpuid_count(0x00000007, 0, &eax, &ebx, &ecx, &edx);
 
 		c->x86_capability[9] = ebx;
+
+		c->x86_capability[14] = cpuid_eax(0x00000006);
 	}
 
 	/* Extended state features: level 0x0000000d */
@@ -723,6 +725,9 @@ void get_cpu_cap(struct cpuinfo_x86 *c)
 	if (c->extended_cpuid_level >= 0x80000007)
 		c->x86_power = cpuid_edx(0x80000007);
 
+	if (c->extended_cpuid_level >= 0x8000000a)
+		c->x86_capability[15] = cpuid_edx(0x8000000a);
+
 	init_scattered_cpuid_features(c);
 }
 
* Unmerged path arch/x86/kernel/cpu/scattered.c
