RDS: TCP: Reduce code duplication in rds_tcp_reset_callbacks()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sowmini Varadhan <sowmini.varadhan@oracle.com>
commit ac3615e7f3cffe2a1a6b25172dfd09e138593d82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ac3615e7.failed

Some code duplication in rds_tcp_reset_callbacks() can be avoided
by having the function call rds_tcp_restore_callbacks() and
rds_tcp_set_callbacks().

	Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
	Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ac3615e7f3cffe2a1a6b25172dfd09e138593d82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/tcp.c
diff --cc net/rds/tcp.c
index 47047d2fa425,0a683cfc4f23..000000000000
--- a/net/rds/tcp.c
+++ b/net/rds/tcp.c
@@@ -163,10 -164,12 +163,12 @@@ void rds_tcp_reset_callbacks(struct soc
  	 * RDS_CONN_RESETTTING, to ensure that rds_tcp_state_change
  	 * cannot mark rds_conn_path_up() in the window before lock_sock()
  	 */
 -	atomic_set(&cp->cp_state, RDS_CONN_RESETTING);
 -	wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));
 +	atomic_set(&conn->c_state, RDS_CONN_RESETTING);
 +	wait_event(conn->c_waitq, !test_bit(RDS_IN_XMIT, &conn->c_flags));
  	lock_sock(osock->sk);
  	/* reset receive side state for rds_tcp_data_recv() for osock  */
+ 	cancel_delayed_work_sync(&cp->cp_send_w);
+ 	cancel_delayed_work_sync(&cp->cp_recv_w);
  	if (tc->t_tinc) {
  		rds_inc_put(&tc->t_tinc->ti_inc);
  		tc->t_tinc = NULL;
@@@ -185,16 -180,9 +179,20 @@@
  	release_sock(osock->sk);
  	sock_release(osock);
  newsock:
 -	rds_send_path_reset(cp);
 +	rds_send_reset(conn);
  	lock_sock(sock->sk);
++<<<<<<< HEAD
 +	write_lock_bh(&sock->sk->sk_callback_lock);
 +	tc->t_sock = sock;
 +	sock->sk->sk_user_data = conn;
 +	sock->sk->sk_data_ready = rds_tcp_data_ready;
 +	sock->sk->sk_write_space = rds_tcp_write_space;
 +	sock->sk->sk_state_change = rds_tcp_state_change;
 +
 +	write_unlock_bh(&sock->sk->sk_callback_lock);
++=======
+ 	rds_tcp_set_callbacks(sock, cp);
++>>>>>>> ac3615e7f3cf (RDS: TCP: Reduce code duplication in rds_tcp_reset_callbacks())
  	release_sock(sock->sk);
  }
  
* Unmerged path net/rds/tcp.c
