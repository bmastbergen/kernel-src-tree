net: phy: Avoid polling PHY with PHY_IGNORE_INTERRUPTS

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] phy: Avoid polling PHY with PHY_IGNORE_INTERRUPTS (Ivan Vecera) [1382040]
Rebuild_FUZZ: 95.15%
commit-author Florian Fainelli <f.fainelli@gmail.com>
commit d5c3d84657db57bd23ecd58b97f1c99dd42a7b80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d5c3d846.failed

Commit 2c7b49212a86 ("phy: fix the use of PHY_IGNORE_INTERRUPT") changed
a hunk in phy_state_machine() in the PHY_RUNNING case which was not
needed. The change essentially makes the PHY library treat PHY devices
with PHY_IGNORE_INTERRUPT to keep polling for the PHY device, even
though the intent is not to do it.

Fix this by reverting that specific hunk, which makes the PHY state
machine wait for state changes, and stay in the PHY_RUNNING state for as
long as needed.

Fixes: 2c7b49212a86 ("phy: fix the use of PHY_IGNORE_INTERRUPT")
	Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d5c3d84657db57bd23ecd58b97f1c99dd42a7b80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy.c
diff --cc drivers/net/phy/phy.c
index 7f5b33a8c415,42b4c1eb7a90..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -892,8 -996,17 +892,22 @@@ void phy_state_machine(struct work_stru
  	if (err < 0)
  		phy_error(phydev);
  
++<<<<<<< HEAD
 +	queue_delayed_work(system_power_efficient_wq, &phydev->state_queue,
 +			   PHY_STATE_TIME * HZ);
++=======
+ 	phydev_dbg(phydev, "PHY state change %s -> %s\n",
+ 		   phy_state_to_str(old_state),
+ 		   phy_state_to_str(phydev->state));
+ 
+ 	/* Only re-schedule a PHY state machine change if we are polling the
+ 	 * PHY, if PHY_IGNORE_INTERRUPT is set, then we will be moving
+ 	 * between states from phy_mac_interrupt()
+ 	 */
+ 	if (phydev->irq == PHY_POLL)
+ 		queue_delayed_work(system_power_efficient_wq, &phydev->state_queue,
+ 				   PHY_STATE_TIME * HZ);
++>>>>>>> d5c3d84657db (net: phy: Avoid polling PHY with PHY_IGNORE_INTERRUPTS)
  }
  
  void phy_mac_interrupt(struct phy_device *phydev, int new_link)
* Unmerged path drivers/net/phy/phy.c
