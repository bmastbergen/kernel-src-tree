mm: fold arch_randomize_brk into ARCH_HAS_ELF_RANDOMIZE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Kees Cook <keescook@chromium.org>
commit 204db6ed17743000691d930368a5abd6ea541c58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/204db6ed.failed

The arch_randomize_brk() function is used on several architectures,
even those that don't support ET_DYN ASLR. To avoid bulky extern/#define
tricks, consolidate the support under CONFIG_ARCH_HAS_ELF_RANDOMIZE for
the architectures that support it, while still handling CONFIG_COMPAT_BRK.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Cc: Hector Marco-Gisbert <hecmargi@upv.es>
	Cc: Russell King <linux@arm.linux.org.uk>
	Reviewed-by: Ingo Molnar <mingo@kernel.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: "David A. Long" <dave.long@linaro.org>
	Cc: Andrey Ryabinin <a.ryabinin@samsung.com>
	Cc: Arun Chandran <achandran@mvista.com>
	Cc: Yann Droneaud <ydroneaud@opteya.com>
	Cc: Min-Hua Chen <orca.chen@gmail.com>
	Cc: Paul Burton <paul.burton@imgtec.com>
	Cc: Alex Smith <alex@alex-smith.me.uk>
	Cc: Markos Chandras <markos.chandras@imgtec.com>
	Cc: Vineeth Vijayan <vvijayan@mvista.com>
	Cc: Jeff Bailey <jeffbailey@google.com>
	Cc: Michael Holzheu <holzheu@linux.vnet.ibm.com>
	Cc: Ben Hutchings <ben@decadent.org.uk>
	Cc: Behan Webster <behanw@converseincode.com>
	Cc: Ismael Ripoll <iripoll@upv.es>
	Cc: Jan-Simon Mller <dl9pf@gmx.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 204db6ed17743000691d930368a5abd6ea541c58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/Kconfig
#	arch/mips/include/asm/elf.h
#	include/linux/elf-randomize.h
diff --cc arch/Kconfig
index b5a4cb176d36,e1068987bad1..000000000000
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@@ -460,11 -477,27 +460,32 @@@ config HAVE_UNDERSCORE_SYMBOL_PREFI
  	  Some architectures generate an _ in front of C symbols; things like
  	  module loading and assembly files need to know about this.
  
 -config HAVE_IRQ_EXIT_ON_IRQ_STACK
 +config HAVE_STACK_VALIDATION
  	bool
  	help
++<<<<<<< HEAD
 +	  Architecture supports the 'objtool check' host tool command, which
 +	  performs compile-time stack metadata validation.
++=======
+ 	  Architecture doesn't only execute the irq handler on the irq stack
+ 	  but also irq_exit(). This way we can process softirqs on this irq
+ 	  stack instead of switching to a new one when we call __do_softirq()
+ 	  in the end of an hardirq.
+ 	  This spares a stack switch and improves cache usage on softirq
+ 	  processing.
+ 
+ config PGTABLE_LEVELS
+ 	int
+ 	default 2
+ 
+ config ARCH_HAS_ELF_RANDOMIZE
+ 	bool
+ 	help
+ 	  An architecture supports choosing randomized locations for
+ 	  stack, mmap, brk, and ET_DYN. Defined functions:
+ 	  - arch_mmap_rnd()
+ 	  - arch_randomize_brk()
++>>>>>>> 204db6ed1774 (mm: fold arch_randomize_brk into ARCH_HAS_ELF_RANDOMIZE)
  
  #
  # ABI hall of shame
diff --cc arch/mips/include/asm/elf.h
index cf3ae2480b1d,31d747d46a23..000000000000
--- a/arch/mips/include/asm/elf.h
+++ b/arch/mips/include/asm/elf.h
@@@ -377,8 -410,26 +377,32 @@@ struct linux_binprm
  extern int arch_setup_additional_pages(struct linux_binprm *bprm,
  				       int uses_interp);
  
++<<<<<<< HEAD
 +struct mm_struct;
 +extern unsigned long arch_randomize_brk(struct mm_struct *mm);
 +#define arch_randomize_brk arch_randomize_brk
++=======
+ struct arch_elf_state {
+ 	int fp_abi;
+ 	int interp_fp_abi;
+ 	int overall_fp_mode;
+ };
+ 
+ #define MIPS_ABI_FP_UNKNOWN	(-1)	/* Unknown FP ABI (kernel internal) */
+ 
+ #define INIT_ARCH_ELF_STATE {			\
+ 	.fp_abi = MIPS_ABI_FP_UNKNOWN,		\
+ 	.interp_fp_abi = MIPS_ABI_FP_UNKNOWN,	\
+ 	.overall_fp_mode = -1,			\
+ }
+ 
+ extern int arch_elf_pt_proc(void *ehdr, void *phdr, struct file *elf,
+ 			    bool is_interp, struct arch_elf_state *state);
+ 
+ extern int arch_check_elf(void *ehdr, bool has_interpreter,
+ 			  struct arch_elf_state *state);
+ 
+ extern void mips_set_personality_fp(struct arch_elf_state *state);
++>>>>>>> 204db6ed1774 (mm: fold arch_randomize_brk into ARCH_HAS_ELF_RANDOMIZE)
  
  #endif /* _ASM_ELF_H */
* Unmerged path include/linux/elf-randomize.h
* Unmerged path arch/Kconfig
diff --git a/arch/arm/include/asm/elf.h b/arch/arm/include/asm/elf.h
index 56211f2084ef..ce1d586e0a4a 100644
--- a/arch/arm/include/asm/elf.h
+++ b/arch/arm/include/asm/elf.h
@@ -126,10 +126,6 @@ int dump_task_regs(struct task_struct *t, elf_gregset_t *elfregs);
 extern void elf_set_personality(const struct elf32_hdr *);
 #define SET_PERSONALITY(ex)	elf_set_personality(&(ex))
 
-struct mm_struct;
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 #ifdef CONFIG_MMU
 #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
 struct linux_binprm;
diff --git a/arch/arm64/include/asm/elf.h b/arch/arm64/include/asm/elf.h
index fe32c0e4ac01..8959bebdab90 100644
--- a/arch/arm64/include/asm/elf.h
+++ b/arch/arm64/include/asm/elf.h
@@ -146,10 +146,6 @@ extern int arch_setup_additional_pages(struct linux_binprm *bprm,
 #define STACK_RND_MASK			(0x3ffff >> (PAGE_SHIFT - 12))
 #endif
 
-struct mm_struct;
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 #ifdef CONFIG_COMPAT
 #define EM_ARM				40
 #define COMPAT_ELF_PLATFORM		("v8l")
* Unmerged path arch/mips/include/asm/elf.h
diff --git a/arch/powerpc/include/asm/elf.h b/arch/powerpc/include/asm/elf.h
index 888d8f3f2524..111164d3125c 100644
--- a/arch/powerpc/include/asm/elf.h
+++ b/arch/powerpc/include/asm/elf.h
@@ -129,10 +129,6 @@ extern int arch_setup_additional_pages(struct linux_binprm *bprm,
 	(0x7ff >> (PAGE_SHIFT - 12)) : \
 	(0x3ffff >> (PAGE_SHIFT - 12)))
 
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
-
 #ifdef CONFIG_SPU_BASE
 /* Notes used in ET_CORE. Note name is "SPU/<fd>/<filename>". */
 #define NT_SPU		1
diff --git a/arch/s390/include/asm/elf.h b/arch/s390/include/asm/elf.h
index 0745df3fe60b..50353018f805 100644
--- a/arch/s390/include/asm/elf.h
+++ b/arch/s390/include/asm/elf.h
@@ -232,9 +232,6 @@ struct linux_binprm;
 #define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
 int arch_setup_additional_pages(struct linux_binprm *, int);
 
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 void *fill_cpu_elf_notes(void *ptr, struct save_area *sa, __vector128 *vxrs);
 
 #endif
diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h
index 5518cbccef59..09cb4f0ec257 100644
--- a/arch/x86/include/asm/elf.h
+++ b/arch/x86/include/asm/elf.h
@@ -336,9 +336,6 @@ extern int x32_setup_additional_pages(struct linux_binprm *bprm,
 extern int syscall32_setup_pages(struct linux_binprm *, int exstack);
 #define compat_arch_setup_additional_pages	syscall32_setup_pages
 
-extern unsigned long arch_randomize_brk(struct mm_struct *mm);
-#define arch_randomize_brk arch_randomize_brk
-
 /*
  * True on X86_32 or when emulating IA32 on X86_64
  */
diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index e98af17ebbb2..3b460e3c9588 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -963,15 +963,13 @@ static int load_elf_binary(struct linux_binprm *bprm)
 	current->mm->end_data = end_data;
 	current->mm->start_stack = bprm->p;
 
-#ifdef arch_randomize_brk
 	if ((current->flags & PF_RANDOMIZE) && (randomize_va_space > 1)) {
 		current->mm->brk = current->mm->start_brk =
 			arch_randomize_brk(current->mm);
-#ifdef CONFIG_COMPAT_BRK
+#ifdef compat_brk_randomized
 		current->brk_randomized = 1;
 #endif
 	}
-#endif
 
 	if (current->personality & MMAP_PAGE_ZERO) {
 		/* Why this, you ask???  Well SVr4 maps page 0 as read-only,
* Unmerged path include/linux/elf-randomize.h
