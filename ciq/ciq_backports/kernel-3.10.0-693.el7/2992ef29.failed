livepatch/module: make TAINT_LIVEPATCH module-specific

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 2992ef29ae01af998399d55ed7c692a2505fb8af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2992ef29.failed

There's no reliable way to determine which module tainted the kernel
with TAINT_LIVEPATCH.  For example, /sys/module/<klp module>/taint
doesn't report it.  Neither does the "mod -t" command in the crash tool.

Make it crystal clear who the guilty party is by associating
TAINT_LIVEPATCH with any module which sets the "livepatch" modinfo
attribute.  The flag will still get set in the kernel like before, but
now it also sets the same flag in mod->taint.

Note that now the taint flag gets set when the module is loaded rather
than when it's enabled.

I also renamed find_livepatch_modinfo() to check_modinfo_livepatch() to
better reflect its purpose: it's basically a livepatch-specific
sub-function of check_modinfo().

	Reported-by: Chunyu Hu <chuhu@redhat.com>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Acked-by: Miroslav Benes <mbenes@suse.cz>
	Acked-by: Jessica Yu <jeyu@redhat.com>
	Acked-by: Rusty Russell <rusty@rustcorp.com.au>
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 2992ef29ae01af998399d55ed7c692a2505fb8af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/livepatch/core.c
#	kernel/module.c
diff --cc kernel/module.c
index 82f01d69a669,f57dd63186e6..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -1118,11 -1149,11 +1118,16 @@@ static size_t module_flags_taint(struc
  		buf[l++] = 'C';
  	if (mod->taints & (1 << TAINT_UNSIGNED_MODULE))
  		buf[l++] = 'E';
++<<<<<<< HEAD
 +	if (mod->taints & (1 << TAINT_TECH_PREVIEW))
 +		buf[l++] = 'T';
++=======
+ 	if (mod->taints & (1 << TAINT_LIVEPATCH))
+ 		buf[l++] = 'K';
++>>>>>>> 2992ef29ae01 (livepatch/module: make TAINT_LIVEPATCH module-specific)
  	/*
  	 * TAINT_FORCED_RMMOD: could be added.
 -	 * TAINT_CPU_OUT_OF_SPEC, TAINT_MACHINE_CHECK, TAINT_BAD_PAGE don't
 +	 * TAINT_UNSAFE_SMP, TAINT_MACHINE_CHECK, TAINT_BAD_PAGE don't
  	 * apply to modules.
  	 */
  	return l;
@@@ -2596,6 -2776,46 +2601,49 @@@ static int elf_header_check(struct load
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ #define COPY_CHUNK_SIZE (16*PAGE_SIZE)
+ 
+ static int copy_chunked_from_user(void *dst, const void __user *usrc, unsigned long len)
+ {
+ 	do {
+ 		unsigned long n = min(len, COPY_CHUNK_SIZE);
+ 
+ 		if (copy_from_user(dst, usrc, n) != 0)
+ 			return -EFAULT;
+ 		cond_resched();
+ 		dst += n;
+ 		usrc += n;
+ 		len -= n;
+ 	} while (len);
+ 	return 0;
+ }
+ 
+ #ifdef CONFIG_LIVEPATCH
+ static int check_modinfo_livepatch(struct module *mod, struct load_info *info)
+ {
+ 	if (get_modinfo(info, "livepatch")) {
+ 		mod->klp = true;
+ 		add_taint_module(mod, TAINT_LIVEPATCH, LOCKDEP_STILL_OK);
+ 	}
+ 
+ 	return 0;
+ }
+ #else /* !CONFIG_LIVEPATCH */
+ static int check_modinfo_livepatch(struct module *mod, struct load_info *info)
+ {
+ 	if (get_modinfo(info, "livepatch")) {
+ 		pr_err("%s: module is marked as livepatch module, but livepatch support is disabled",
+ 		       mod->name);
+ 		return -ENOEXEC;
+ 	}
+ 
+ 	return 0;
+ }
+ #endif /* CONFIG_LIVEPATCH */
+ 
++>>>>>>> 2992ef29ae01 (livepatch/module: make TAINT_LIVEPATCH module-specific)
  /* Sets info->hdr and info->len. */
  static int copy_module_from_user(const void __user *umod, unsigned long len,
  				  struct load_info *info)
@@@ -2809,11 -2970,14 +2857,18 @@@ static int check_modinfo(struct module 
  
  	if (get_modinfo(info, "staging")) {
  		add_taint_module(mod, TAINT_CRAP, LOCKDEP_STILL_OK);
 -		pr_warn("%s: module is from the staging directory, the quality "
 -			"is unknown, you have been warned.\n", mod->name);
 +		printk(KERN_WARNING "%s: module is from the staging directory,"
 +		       " the quality is unknown, you have been warned.\n",
 +		       mod->name);
  	}
  
++<<<<<<< HEAD
++=======
+ 	err = check_modinfo_livepatch(mod, info);
+ 	if (err)
+ 		return err;
+ 
++>>>>>>> 2992ef29ae01 (livepatch/module: make TAINT_LIVEPATCH module-specific)
  	/* Set up license info based on the info section */
  	set_license(mod, get_modinfo(info, "license"));
  
* Unmerged path kernel/livepatch/core.c
* Unmerged path kernel/livepatch/core.c
* Unmerged path kernel/module.c
