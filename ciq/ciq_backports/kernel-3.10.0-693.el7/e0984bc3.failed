HID: wacom - Add default permission defines for sysfs attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom - Add default permission defines for sysfs attributes (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 95.93%
commit-author Ping Cheng <pinglinux@gmail.com>
commit e0984bc376d84190d631d0a4f81215e48fa3a902
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e0984bc3.failed

RW : ug=rw,o=r
WO : ug=w

And enabled reading relavent sysfs attributes.

	Signed-off-by: Paul A. Tessier <phernost@gmail.com>
Signed-Off-by: Ping Cheng <pingc@wacom.com>
	Tested-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit e0984bc376d84190d631d0a4f81215e48fa3a902)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,779fd32c05d2..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -58,12 -20,15 +58,19 @@@ struct hid_descriptor 
  #define WAC_CMD_LED_CONTROL	0x20
  #define WAC_CMD_ICON_START	0x21
  #define WAC_CMD_ICON_XFER	0x23
 -#define WAC_CMD_ICON_BT_XFER	0x26
  #define WAC_CMD_RETRIES		10
  
++<<<<<<< HEAD
 +static int wacom_get_report(struct usb_interface *intf, u8 type, u8 id,
++=======
+ #define DEV_ATTR_RW_PERM (S_IRUGO | S_IWUSR | S_IWGRP)
+ #define DEV_ATTR_WO_PERM (S_IWUSR | S_IWGRP)
+ 
+ static int wacom_get_report(struct hid_device *hdev, u8 type, u8 id,
++>>>>>>> e0984bc376d8 (HID: wacom - Add default permission defines for sysfs attributes)
  			    void *buf, size_t size, unsigned int retries)
  {
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	int retval;
  
  	do {
@@@ -848,10 -603,11 +855,10 @@@ static ssize_t wacom_led##SET_ID##_sele
  static ssize_t wacom_led##SET_ID##_select_show(struct device *dev,	\
  	struct device_attribute *attr, char *buf)			\
  {									\
 -	struct hid_device *hdev = container_of(dev, struct hid_device, dev);\
 -	struct wacom *wacom = hid_get_drvdata(hdev);			\
 +	struct wacom *wacom = dev_get_drvdata(dev);			\
  	return snprintf(buf, 2, "%d\n", wacom->led.select[SET_ID]);	\
  }									\
- static DEVICE_ATTR(status_led##SET_ID##_select, S_IWUSR | S_IRUSR,	\
+ static DEVICE_ATTR(status_led##SET_ID##_select, DEV_ATTR_RW_PERM,	\
  		    wacom_led##SET_ID##_select_show,			\
  		    wacom_led##SET_ID##_select_store)
  
@@@ -1127,31 -961,95 +1134,67 @@@ static void wacom_destroy_battery(struc
  	}
  }
  
++<<<<<<< HEAD
 +static int wacom_register_input(struct wacom *wacom)
++=======
+ static ssize_t wacom_show_speed(struct device *dev,
+ 				struct device_attribute
+ 				*attr, char *buf)
+ {
+ 	struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 
+ 	return snprintf(buf, PAGE_SIZE, "%i\n", wacom->wacom_wac.bt_high_speed);
+ }
+ 
+ static ssize_t wacom_store_speed(struct device *dev,
+ 				struct device_attribute *attr,
+ 				const char *buf, size_t count)
+ {
+ 	struct hid_device *hdev = container_of(dev, struct hid_device, dev);
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	u8 new_speed;
+ 
+ 	if (kstrtou8(buf, 0, &new_speed))
+ 		return -EINVAL;
+ 
+ 	if (new_speed != 0 && new_speed != 1)
+ 		return -EINVAL;
+ 
+ 	wacom_bt_query_tablet_data(hdev, new_speed, &wacom->wacom_wac.features);
+ 
+ 	return count;
+ }
+ 
+ static DEVICE_ATTR(speed, DEV_ATTR_RW_PERM,
+ 		wacom_show_speed, wacom_store_speed);
+ 
+ static struct input_dev *wacom_allocate_input(struct wacom *wacom)
++>>>>>>> e0984bc376d8 (HID: wacom - Add default permission defines for sysfs attributes)
  {
  	struct input_dev *input_dev;
 -	struct hid_device *hdev = wacom->hdev;
 +	struct usb_interface *intf = wacom->intf;
 +	struct usb_device *dev = interface_to_usbdev(intf);
  	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 +	int error;
  
  	input_dev = input_allocate_device();
 -	if (!input_dev)
 -		return NULL;
 +	if (!input_dev) {
 +		error = -ENOMEM;
 +		goto fail1;
 +	}
  
  	input_dev->name = wacom_wac->name;
 -	input_dev->phys = hdev->phys;
 -	input_dev->dev.parent = &hdev->dev;
 +	input_dev->dev.parent = &intf->dev;
  	input_dev->open = wacom_open;
  	input_dev->close = wacom_close;
 -	input_dev->uniq = hdev->uniq;
 -	input_dev->id.bustype = hdev->bus;
 -	input_dev->id.vendor  = hdev->vendor;
 -	input_dev->id.product = hdev->product;
 -	input_dev->id.version = hdev->version;
 +	usb_to_input_id(dev, &input_dev->id);
  	input_set_drvdata(input_dev, wacom);
  
 -	return input_dev;
 -}
 -
 -static void wacom_unregister_inputs(struct wacom *wacom)
 -{
 -	if (wacom->wacom_wac.input)
 -		input_unregister_device(wacom->wacom_wac.input);
 -	if (wacom->wacom_wac.pad_input)
 -		input_unregister_device(wacom->wacom_wac.pad_input);
 -	wacom->wacom_wac.input = NULL;
 -	wacom->wacom_wac.pad_input = NULL;
 -}
 -
 -static int wacom_register_inputs(struct wacom *wacom)
 -{
 -	struct input_dev *input_dev, *pad_input_dev;
 -	struct wacom_wac *wacom_wac = &(wacom->wacom_wac);
 -	int error;
 -
 -	input_dev = wacom_allocate_input(wacom);
 -	pad_input_dev = wacom_allocate_input(wacom);
 -	if (!input_dev || !pad_input_dev) {
 -		error = -ENOMEM;
 -		goto fail1;
 -	}
 -
  	wacom_wac->input = input_dev;
 -	wacom_wac->pad_input = pad_input_dev;
 -	wacom_wac->pad_input->name = wacom_wac->pad_name;
 -
  	error = wacom_setup_input_capabilities(input_dev, wacom_wac);
  	if (error)
 -		goto fail2;
 +		goto fail1;
  
  	error = input_register_device(input_dev);
  	if (error)
* Unmerged path drivers/hid/wacom_sys.c
