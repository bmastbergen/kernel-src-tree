net: Add netdev all_adj_list refcnt propagation to fix panic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] Add netdev all_adj_list refcnt propagation to fix panic (Adrian Reber) [1425010]
Rebuild_FUZZ: 95.65%
commit-author Andrew Collins <acollins@cradlepoint.com>
commit 93409033ae653f1c9a949202fb537ab095b2092f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/93409033.failed

This is a respin of a patch to fix a relatively easily reproducible kernel
panic related to the all_adj_list handling for netdevs in recent kernels.

The following sequence of commands will reproduce the issue:

ip link add link eth0 name eth0.100 type vlan id 100
ip link add link eth0 name eth0.200 type vlan id 200
ip link add name testbr type bridge
ip link set eth0.100 master testbr
ip link set eth0.200 master testbr
ip link add link testbr mac0 type macvlan
ip link delete dev testbr

This creates an upper/lower tree of (excuse the poor ASCII art):

            /---eth0.100-eth0
mac0-testbr-
            \---eth0.200-eth0

When testbr is deleted, the all_adj_lists are walked, and eth0 is deleted twice from
the mac0 list. Unfortunately, during setup in __netdev_upper_dev_link, only one
reference to eth0 is added, so this results in a panic.

This change adds reference count propagation so things are handled properly.

Matthias Schiffer reported a similar crash in batman-adv:

https://github.com/freifunk-gluon/gluon/issues/680
https://www.open-mesh.org/issues/247

which this patch also seems to resolve.

	Signed-off-by: Andrew Collins <acollins@cradlepoint.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 93409033ae653f1c9a949202fb537ab095b2092f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 48cb2232de86,f1fe26f66458..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -5233,10 -5596,10 +5234,10 @@@ static int __netdev_adjacent_dev_insert
  	struct netdev_adjacent *adj;
  	int ret;
  
 -	adj = __netdev_find_adj(adj_dev, dev_list);
 +	adj = __netdev_find_adj(dev, adj_dev, dev_list);
  
  	if (adj) {
- 		adj->ref_nr++;
+ 		adj->ref_nr += ref_nr;
  		return 0;
  	}
  
@@@ -5282,9 -5646,10 +5283,16 @@@ free_adj
  	return ret;
  }
  
++<<<<<<< HEAD
 +void __netdev_adjacent_dev_remove(struct net_device *dev,
 +				  struct net_device *adj_dev,
 +				  struct list_head *dev_list)
++=======
+ static void __netdev_adjacent_dev_remove(struct net_device *dev,
+ 					 struct net_device *adj_dev,
+ 					 u16 ref_nr,
+ 					 struct list_head *dev_list)
++>>>>>>> 93409033ae65 (net: Add netdev all_adj_list refcnt propagation to fix panic)
  {
  	struct netdev_adjacent *adj;
  
@@@ -5316,11 -5681,12 +5324,20 @@@
  	kfree_rcu(adj, rcu);
  }
  
++<<<<<<< HEAD
 +int __netdev_adjacent_dev_link_lists(struct net_device *dev,
 +				     struct net_device *upper_dev,
 +				     struct list_head *up_list,
 +				     struct list_head *down_list,
 +				     void *private, bool master)
++=======
+ static int __netdev_adjacent_dev_link_lists(struct net_device *dev,
+ 					    struct net_device *upper_dev,
+ 					    u16 ref_nr,
+ 					    struct list_head *up_list,
+ 					    struct list_head *down_list,
+ 					    void *private, bool master)
++>>>>>>> 93409033ae65 (net: Add netdev all_adj_list refcnt propagation to fix panic)
  {
  	int ret;
  
@@@ -5339,37 -5705,40 +5356,65 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int __netdev_adjacent_dev_link(struct net_device *dev,
 +			       struct net_device *upper_dev)
 +{
 +	return __netdev_adjacent_dev_link_lists(dev, upper_dev,
 +						&dev->upper_dev_list,
 +						&upper_dev->lower_dev_list,
 +						NULL, false);
 +}
 +
 +void __netdev_adjacent_dev_unlink_lists(struct net_device *dev,
 +					struct net_device *upper_dev,
 +					struct list_head *up_list,
 +					struct list_head *down_list)
++=======
+ static int __netdev_adjacent_dev_link(struct net_device *dev,
+ 				      struct net_device *upper_dev,
+ 				      u16 ref_nr)
+ {
+ 	return __netdev_adjacent_dev_link_lists(dev, upper_dev, ref_nr,
+ 						&dev->all_adj_list.upper,
+ 						&upper_dev->all_adj_list.lower,
+ 						NULL, false);
+ }
+ 
+ static void __netdev_adjacent_dev_unlink_lists(struct net_device *dev,
+ 					       struct net_device *upper_dev,
+ 					       u16 ref_nr,
+ 					       struct list_head *up_list,
+ 					       struct list_head *down_list)
++>>>>>>> 93409033ae65 (net: Add netdev all_adj_list refcnt propagation to fix panic)
  {
- 	__netdev_adjacent_dev_remove(dev, upper_dev, up_list);
- 	__netdev_adjacent_dev_remove(upper_dev, dev, down_list);
+ 	__netdev_adjacent_dev_remove(dev, upper_dev, ref_nr, up_list);
+ 	__netdev_adjacent_dev_remove(upper_dev, dev, ref_nr, down_list);
  }
  
++<<<<<<< HEAD
 +void __netdev_adjacent_dev_unlink(struct net_device *dev,
 +				  struct net_device *upper_dev)
 +{
 +	__netdev_adjacent_dev_unlink_lists(dev, upper_dev,
 +					   &dev->upper_dev_list,
 +					   &upper_dev->lower_dev_list);
++=======
+ static void __netdev_adjacent_dev_unlink(struct net_device *dev,
+ 					 struct net_device *upper_dev,
+ 					 u16 ref_nr)
+ {
+ 	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, ref_nr,
+ 					   &dev->all_adj_list.upper,
+ 					   &upper_dev->all_adj_list.lower);
++>>>>>>> 93409033ae65 (net: Add netdev all_adj_list refcnt propagation to fix panic)
  }
  
 -static int __netdev_adjacent_dev_link_neighbour(struct net_device *dev,
 -						struct net_device *upper_dev,
 -						void *private, bool master)
 +int __netdev_adjacent_dev_link_neighbour(struct net_device *dev,
 +					 struct net_device *upper_dev,
 +					 void *private, bool master)
  {
- 	int ret = __netdev_adjacent_dev_link(dev, upper_dev);
+ 	int ret = __netdev_adjacent_dev_link(dev, upper_dev, 1);
  
  	if (ret)
  		return ret;
@@@ -5386,11 -5755,11 +5431,11 @@@
  	return 0;
  }
  
 -static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
 -						   struct net_device *upper_dev)
 +void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
 +					    struct net_device *upper_dev)
  {
- 	__netdev_adjacent_dev_unlink(dev, upper_dev);
- 	__netdev_adjacent_dev_unlink_lists(dev, upper_dev,
+ 	__netdev_adjacent_dev_unlink(dev, upper_dev, 1);
+ 	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, 1,
  					   &dev->adj_list.upper,
  					   &upper_dev->adj_list.lower);
  }
@@@ -5432,30 -5808,30 +5477,30 @@@ static int __netdev_upper_dev_link(stru
  	 * versa, and don't forget the devices itself. All of these
  	 * links are non-neighbours.
  	 */
 -	list_for_each_entry(i, &dev->all_adj_list.lower, list) {
 -		list_for_each_entry(j, &upper_dev->all_adj_list.upper, list) {
 +	list_for_each_entry(i, &dev->lower_dev_list, list) {
 +		list_for_each_entry(j, &upper_dev->upper_dev_list, list) {
  			pr_debug("Interlinking %s with %s, non-neighbour\n",
  				 i->dev->name, j->dev->name);
- 			ret = __netdev_adjacent_dev_link(i->dev, j->dev);
+ 			ret = __netdev_adjacent_dev_link(i->dev, j->dev, i->ref_nr);
  			if (ret)
  				goto rollback_mesh;
  		}
  	}
  
  	/* add dev to every upper_dev's upper device */
 -	list_for_each_entry(i, &upper_dev->all_adj_list.upper, list) {
 +	list_for_each_entry(i, &upper_dev->upper_dev_list, list) {
  		pr_debug("linking %s's upper device %s with %s\n",
  			 upper_dev->name, i->dev->name, dev->name);
- 		ret = __netdev_adjacent_dev_link(dev, i->dev);
+ 		ret = __netdev_adjacent_dev_link(dev, i->dev, i->ref_nr);
  		if (ret)
  			goto rollback_upper_mesh;
  	}
  
  	/* add upper_dev to every dev's lower device */
 -	list_for_each_entry(i, &dev->all_adj_list.lower, list) {
 +	list_for_each_entry(i, &dev->lower_dev_list, list) {
  		pr_debug("linking %s's lower device %s with %s\n", dev->name,
  			 i->dev->name, upper_dev->name);
- 		ret = __netdev_adjacent_dev_link(i->dev, upper_dev);
+ 		ret = __netdev_adjacent_dev_link(i->dev, upper_dev, i->ref_nr);
  		if (ret)
  			goto rollback_lower_mesh;
  	}
@@@ -5470,20 -5846,20 +5515,20 @@@
  
  rollback_lower_mesh:
  	to_i = i;
 -	list_for_each_entry(i, &dev->all_adj_list.lower, list) {
 +	list_for_each_entry(i, &dev->lower_dev_list, list) {
  		if (i == to_i)
  			break;
- 		__netdev_adjacent_dev_unlink(i->dev, upper_dev);
+ 		__netdev_adjacent_dev_unlink(i->dev, upper_dev, i->ref_nr);
  	}
  
  	i = NULL;
  
  rollback_upper_mesh:
  	to_i = i;
 -	list_for_each_entry(i, &upper_dev->all_adj_list.upper, list) {
 +	list_for_each_entry(i, &upper_dev->upper_dev_list, list) {
  		if (i == to_i)
  			break;
- 		__netdev_adjacent_dev_unlink(dev, i->dev);
+ 		__netdev_adjacent_dev_unlink(dev, i->dev, i->ref_nr);
  	}
  
  	i = j = NULL;
@@@ -5491,11 -5867,11 +5536,11 @@@
  rollback_mesh:
  	to_i = i;
  	to_j = j;
 -	list_for_each_entry(i, &dev->all_adj_list.lower, list) {
 -		list_for_each_entry(j, &upper_dev->all_adj_list.upper, list) {
 +	list_for_each_entry(i, &dev->lower_dev_list, list) {
 +		list_for_each_entry(j, &upper_dev->upper_dev_list, list) {
  			if (i == to_i && j == to_j)
  				break;
- 			__netdev_adjacent_dev_unlink(i->dev, j->dev);
+ 			__netdev_adjacent_dev_unlink(i->dev, j->dev, i->ref_nr);
  		}
  		if (i == to_i)
  			break;
@@@ -5574,18 -5949,18 +5619,32 @@@ void netdev_upper_dev_unlink(struct net
  	 * devices from all upper_dev's upper devices and vice
  	 * versa, to maintain the graph relationship.
  	 */
++<<<<<<< HEAD
 +	list_for_each_entry(i, &dev->lower_dev_list, list)
 +		list_for_each_entry(j, &upper_dev->upper_dev_list, list)
 +			__netdev_adjacent_dev_unlink(i->dev, j->dev);
++=======
+ 	list_for_each_entry(i, &dev->all_adj_list.lower, list)
+ 		list_for_each_entry(j, &upper_dev->all_adj_list.upper, list)
+ 			__netdev_adjacent_dev_unlink(i->dev, j->dev, i->ref_nr);
++>>>>>>> 93409033ae65 (net: Add netdev all_adj_list refcnt propagation to fix panic)
  
  	/* remove also the devices itself from lower/upper device
  	 * list
  	 */
++<<<<<<< HEAD
 +	list_for_each_entry(i, &dev->lower_dev_list, list)
 +		__netdev_adjacent_dev_unlink(i->dev, upper_dev);
 +
 +	list_for_each_entry(i, &upper_dev->upper_dev_list, list)
 +		__netdev_adjacent_dev_unlink(dev, i->dev);
++=======
+ 	list_for_each_entry(i, &dev->all_adj_list.lower, list)
+ 		__netdev_adjacent_dev_unlink(i->dev, upper_dev, i->ref_nr);
+ 
+ 	list_for_each_entry(i, &upper_dev->all_adj_list.upper, list)
+ 		__netdev_adjacent_dev_unlink(dev, i->dev, i->ref_nr);
++>>>>>>> 93409033ae65 (net: Add netdev all_adj_list refcnt propagation to fix panic)
  
  	call_netdevice_notifiers_info(NETDEV_CHANGEUPPER, dev,
  				      &changeupper_info.info);
* Unmerged path net/core/dev.c
