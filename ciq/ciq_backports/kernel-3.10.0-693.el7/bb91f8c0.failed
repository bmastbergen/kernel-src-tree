x86/mce: Carve out writes to MCx_STATUS and MCx_CTL

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] mce: Carve out writes to MCx_STATUS and MCx_CTL (Suravee Suthikulpanit) [1303712]
Rebuild_FUZZ: 95.92%
commit-author Aravind Gopalakrishnan <Aravind.Gopalakrishnan@amd.com>
commit bb91f8c0176b072aeb6b84cfd7e04084025121e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bb91f8c0.failed

We need to do this after __mcheck_cpu_init_vendor() as for
ScalableMCA processors, there are going to be new MSR write handlers
if the feature is detected using CPUID bit (which happens in
__mcheck_cpu_init_vendor()).

No functional change is introduced here.

	Signed-off-by: Aravind Gopalakrishnan <Aravind.Gopalakrishnan@amd.com>
	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Aravind Gopalakrishnan <aravindksg.lkml@gmail.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: linux-edac <linux-edac@vger.kernel.org>
Link: http://lkml.kernel.org/r/1462019637-16474-4-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit bb91f8c0176b072aeb6b84cfd7e04084025121e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mcheck/mce.c
diff --cc arch/x86/kernel/cpu/mcheck/mce.c
index 1bfa973429e1,6bffb26e05e0..000000000000
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@@ -2097,7 -2125,8 +2102,12 @@@ static void mce_syscore_shutdown(void
  static void mce_syscore_resume(void)
  {
  	__mcheck_cpu_init_generic();
++<<<<<<< HEAD
 +	__mcheck_cpu_init_vendor(__this_cpu_ptr(&cpu_info));
++=======
+ 	__mcheck_cpu_init_vendor(raw_cpu_ptr(&cpu_info));
+ 	__mcheck_cpu_init_clear_banks();
++>>>>>>> bb91f8c0176b (x86/mce: Carve out writes to MCx_STATUS and MCx_CTL)
  }
  
  static struct syscore_ops mce_syscore_ops = {
@@@ -2112,9 -2141,10 +2122,10 @@@
  
  static void mce_cpu_restart(void *data)
  {
 -	if (!mce_available(raw_cpu_ptr(&cpu_info)))
 +	if (!mce_available(__this_cpu_ptr(&cpu_info)))
  		return;
  	__mcheck_cpu_init_generic();
+ 	__mcheck_cpu_init_clear_banks();
  	__mcheck_cpu_init_timer();
  }
  
* Unmerged path arch/x86/kernel/cpu/mcheck/mce.c
