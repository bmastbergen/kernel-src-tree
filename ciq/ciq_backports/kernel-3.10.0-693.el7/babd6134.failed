net/mlx5: Fix flow counter bulk command out mailbox allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Fix flow counter bulk command out mailbox allocation (Don Dutile) [1385330 1417284]
Rebuild_FUZZ: 96.67%
commit-author Roi Dayan <roid@mellanox.com>
commit babd6134a54d70efe875fa5661a20eaecb63f278
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/babd6134.failed

The FW command output length should be only the length of struct
mlx5_cmd_fc_bulk out field. Failing to do so will cause the memcpy
call which is invoked later in the driver to write over wrong memory
address and corrupt kernel memory which results in random crashes.

This bug was found using the kernel address sanitizer (kasan).

Fixes: a351a1b03bf1 ('net/mlx5: Introduce bulk reading of flow counters')
	Signed-off-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit babd6134a54d70efe875fa5661a20eaecb63f278)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
index 9255fb6f5d9d,287ade151ec8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
@@@ -356,3 -413,70 +356,73 @@@ int mlx5_cmd_fc_query(struct mlx5_core_
  
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ struct mlx5_cmd_fc_bulk {
+ 	u16 id;
+ 	int num;
+ 	int outlen;
+ 	u32 out[0];
+ };
+ 
+ struct mlx5_cmd_fc_bulk *
+ mlx5_cmd_fc_bulk_alloc(struct mlx5_core_dev *dev, u16 id, int num)
+ {
+ 	struct mlx5_cmd_fc_bulk *b;
+ 	int outlen =
+ 		MLX5_ST_SZ_BYTES(query_flow_counter_out) +
+ 		MLX5_ST_SZ_BYTES(traffic_counter) * num;
+ 
+ 	b = kzalloc(sizeof(*b) + outlen, GFP_KERNEL);
+ 	if (!b)
+ 		return NULL;
+ 
+ 	b->id = id;
+ 	b->num = num;
+ 	b->outlen = outlen;
+ 
+ 	return b;
+ }
+ 
+ void mlx5_cmd_fc_bulk_free(struct mlx5_cmd_fc_bulk *b)
+ {
+ 	kfree(b);
+ }
+ 
+ int
+ mlx5_cmd_fc_bulk_query(struct mlx5_core_dev *dev, struct mlx5_cmd_fc_bulk *b)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(query_flow_counter_in)];
+ 
+ 	memset(in, 0, sizeof(in));
+ 
+ 	MLX5_SET(query_flow_counter_in, in, opcode,
+ 		 MLX5_CMD_OP_QUERY_FLOW_COUNTER);
+ 	MLX5_SET(query_flow_counter_in, in, op_mod, 0);
+ 	MLX5_SET(query_flow_counter_in, in, flow_counter_id, b->id);
+ 	MLX5_SET(query_flow_counter_in, in, num_of_counters, b->num);
+ 
+ 	return mlx5_cmd_exec_check_status(dev, in, sizeof(in),
+ 					  b->out, b->outlen);
+ }
+ 
+ void mlx5_cmd_fc_bulk_get(struct mlx5_core_dev *dev,
+ 			  struct mlx5_cmd_fc_bulk *b, u16 id,
+ 			  u64 *packets, u64 *bytes)
+ {
+ 	int index = id - b->id;
+ 	void *stats;
+ 
+ 	if (index < 0 || index >= b->num) {
+ 		mlx5_core_warn(dev, "Flow counter id (0x%x) out of range (0x%x..0x%x). Counter ignored.\n",
+ 			       id, b->id, b->id + b->num - 1);
+ 		return;
+ 	}
+ 
+ 	stats = MLX5_ADDR_OF(query_flow_counter_out, b->out,
+ 			     flow_statistics[index]);
+ 	*packets = MLX5_GET64(traffic_counter, stats, packets);
+ 	*bytes = MLX5_GET64(traffic_counter, stats, octets);
+ }
++>>>>>>> babd6134a54d (net/mlx5: Fix flow counter bulk command out mailbox allocation)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
