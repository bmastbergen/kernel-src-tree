KVM: Add kvm_arch_vcpu_{un}blocking callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Christoffer Dall <christoffer.dall@linaro.org>
commit 3217f7c25bca66eed9b07f0b8bfd1937169b0736
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3217f7c2.failed

Some times it is useful for architecture implementations of KVM to know
when the VCPU thread is about to block or when it comes back from
blocking (arm/arm64 needs to know this to properly implement timers, for
example).

Therefore provide a generic architecture callback function in line with
what we do elsewhere for KVM generic-arch interactions.

	Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
	Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>
(cherry picked from commit 3217f7c25bca66eed9b07f0b8bfd1937169b0736)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/include/asm/kvm_host.h
#	arch/arm64/include/asm/kvm_host.h
#	arch/mips/include/asm/kvm_host.h
#	arch/powerpc/include/asm/kvm_host.h
#	arch/s390/include/asm/kvm_host.h
#	arch/x86/include/asm/kvm_host.h
diff --cc arch/arm/include/asm/kvm_host.h
index 1467904f8fc2,84da97901f1f..000000000000
--- a/arch/arm/include/asm/kvm_host.h
+++ b/arch/arm/include/asm/kvm_host.h
@@@ -228,4 -219,22 +228,25 @@@ static inline int kvm_arch_dev_ioctl_ch
  int kvm_perf_init(void);
  int kvm_perf_teardown(void);
  
++<<<<<<< HEAD
++=======
+ void kvm_mmu_wp_memory_region(struct kvm *kvm, int slot);
+ 
+ struct kvm_vcpu *kvm_mpidr_to_vcpu(struct kvm *kvm, unsigned long mpidr);
+ 
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_hardware_unsetup(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ 
+ static inline void kvm_arm_init_debug(void) {}
+ static inline void kvm_arm_setup_debug(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arm_clear_debug(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arm_reset_debug_ptr(struct kvm_vcpu *vcpu) {}
+ 
+ static inline void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
+ 
++>>>>>>> 3217f7c25bca (KVM: Add kvm_arch_vcpu_{un}blocking callbacks)
  #endif /* __ARM_KVM_HOST_H__ */
diff --cc arch/mips/include/asm/kvm_host.h
index 07768128ec0e,6ded8d347af9..000000000000
--- a/arch/mips/include/asm/kvm_host.h
+++ b/arch/mips/include/asm/kvm_host.h
@@@ -652,9 -833,21 +652,25 @@@ extern int kvm_mips_trans_mtc0(uint32_
  			       struct kvm_vcpu *vcpu);
  
  /* Misc */
 -extern void kvm_mips_dump_stats(struct kvm_vcpu *vcpu);
 +extern void mips32_SyncICache(unsigned long addr, unsigned long size);
 +extern int kvm_mips_dump_stats(struct kvm_vcpu *vcpu);
  extern unsigned long kvm_mips_get_ramsize(struct kvm *kvm);
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_hardware_unsetup(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_free_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *free, struct kvm_memory_slot *dont) {}
+ static inline void kvm_arch_memslots_updated(struct kvm *kvm, struct kvm_memslots *slots) {}
+ static inline void kvm_arch_flush_shadow_all(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *slot) {}
+ static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ static inline void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
++>>>>>>> 3217f7c25bca (KVM: Add kvm_arch_vcpu_{un}blocking callbacks)
  
  #endif /* __MIPS_KVM_HOST_H__ */
diff --cc arch/powerpc/include/asm/kvm_host.h
index 8841a038084f,c9f122d00920..000000000000
--- a/arch/powerpc/include/asm/kvm_host.h
+++ b/arch/powerpc/include/asm/kvm_host.h
@@@ -724,4 -711,14 +724,17 @@@ struct kvm_vcpu_arch 
  #define __KVM_HAVE_ARCH_WQP
  #define __KVM_HAVE_CREATE_DEVICE
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_hardware_unsetup(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_memslots_updated(struct kvm *kvm, struct kvm_memslots *slots) {}
+ static inline void kvm_arch_flush_shadow_all(struct kvm *kvm) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ static inline void kvm_arch_exit(void) {}
+ static inline void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
+ 
++>>>>>>> 3217f7c25bca (KVM: Add kvm_arch_vcpu_{un}blocking callbacks)
  #endif /* __POWERPC_KVM_HOST_H__ */
diff --cc arch/s390/include/asm/kvm_host.h
index 297b2c318280,72a614c68ed8..000000000000
--- a/arch/s390/include/asm/kvm_host.h
+++ b/arch/s390/include/asm/kvm_host.h
@@@ -287,6 -614,37 +287,24 @@@ static inline bool kvm_is_error_hva(uns
  	return IS_ERR_VALUE(addr);
  }
  
 -#define ASYNC_PF_PER_VCPU	64
 -struct kvm_arch_async_pf {
 -	unsigned long pfault_token;
 -};
 -
 -bool kvm_arch_can_inject_async_page_present(struct kvm_vcpu *vcpu);
 -
 -void kvm_arch_async_page_ready(struct kvm_vcpu *vcpu,
 -			       struct kvm_async_pf *work);
 -
 -void kvm_arch_async_page_not_present(struct kvm_vcpu *vcpu,
 -				     struct kvm_async_pf *work);
 -
 -void kvm_arch_async_page_present(struct kvm_vcpu *vcpu,
 -				 struct kvm_async_pf *work);
 -
  extern int sie64a(struct kvm_s390_sie_block *, u64 *);
  extern char sie_exit;
++<<<<<<< HEAD
++=======
+ 
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_check_processor_compat(void *rtn) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ static inline void kvm_arch_free_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *free, struct kvm_memory_slot *dont) {}
+ static inline void kvm_arch_memslots_updated(struct kvm *kvm, struct kvm_memslots *slots) {}
+ static inline void kvm_arch_flush_shadow_all(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *slot) {}
+ static inline void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
+ 
++>>>>>>> 3217f7c25bca (KVM: Add kvm_arch_vcpu_{un}blocking callbacks)
  #endif
diff --cc arch/x86/include/asm/kvm_host.h
index e9b71b8ce24b,b28f0f142ecb..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -1234,9 -1233,7 +1234,15 @@@ int x86_set_memory_region(struct kvm *k
  bool kvm_vcpu_is_reset_bsp(struct kvm_vcpu *vcpu);
  bool kvm_vcpu_is_bsp(struct kvm_vcpu *vcpu);
  
++<<<<<<< HEAD
 +bool kvm_intr_is_single_vcpu(struct kvm *kvm, struct kvm_lapic_irq *irq,
 +			     struct kvm_vcpu **dest_vcpu);
 +
 +void kvm_set_msi_irq(struct kvm *kvm, struct kvm_kernel_irq_routing_entry *e,
 +		     struct kvm_lapic_irq *irq);
++=======
+ static inline void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu) {}
+ 
++>>>>>>> 3217f7c25bca (KVM: Add kvm_arch_vcpu_{un}blocking callbacks)
  #endif /* _ASM_X86_KVM_HOST_H */
* Unmerged path arch/arm64/include/asm/kvm_host.h
* Unmerged path arch/arm/include/asm/kvm_host.h
* Unmerged path arch/arm64/include/asm/kvm_host.h
* Unmerged path arch/mips/include/asm/kvm_host.h
* Unmerged path arch/powerpc/include/asm/kvm_host.h
* Unmerged path arch/s390/include/asm/kvm_host.h
* Unmerged path arch/x86/include/asm/kvm_host.h
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index b42a4bf67232..05de009419a3 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -642,6 +642,8 @@ int kvm_vcpu_write_guest(struct kvm_vcpu *vcpu, gpa_t gpa, const void *data,
 void kvm_vcpu_mark_page_dirty(struct kvm_vcpu *vcpu, gfn_t gfn);
 
 void kvm_vcpu_block(struct kvm_vcpu *vcpu);
+void kvm_arch_vcpu_blocking(struct kvm_vcpu *vcpu);
+void kvm_arch_vcpu_unblocking(struct kvm_vcpu *vcpu);
 void kvm_vcpu_kick(struct kvm_vcpu *vcpu);
 int kvm_vcpu_yield_to(struct kvm_vcpu *target);
 void kvm_vcpu_on_spin(struct kvm_vcpu *vcpu);
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 72de0bcb7df9..5537ce49d990 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -2050,6 +2050,8 @@ void kvm_vcpu_block(struct kvm_vcpu *vcpu)
 		} while (single_task_running() && (ktime_compare(cur, stop) < 0));
 	}
 
+	kvm_arch_vcpu_blocking(vcpu);
+
 	for (;;) {
 		prepare_to_wait(&vcpu->wq, &wait, TASK_INTERRUPTIBLE);
 
@@ -2063,6 +2065,7 @@ void kvm_vcpu_block(struct kvm_vcpu *vcpu)
 	finish_wait(&vcpu->wq, &wait);
 	cur = ktime_get();
 
+	kvm_arch_vcpu_unblocking(vcpu);
 out:
 	block_ns = ktime_to_ns(cur) - ktime_to_ns(start);
 
