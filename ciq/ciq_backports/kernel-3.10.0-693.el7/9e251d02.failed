kill pin_put()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 9e251d02041432487d89cb340e72490c4bbc198a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9e251d02.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 9e251d02041432487d89cb340e72490c4bbc198a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fs_pin.c
#	include/linux/fs_pin.h
#	kernel/acct.c
diff --cc kernel/acct.c
index 7ffb48430dba,7bb9e659a7da..000000000000
--- a/kernel/acct.c
+++ b/kernel/acct.c
@@@ -147,9 -120,39 +147,44 @@@ static int check_free_space(struct bsd_
  	}
  
  	acct->needcheck = jiffies + ACCT_TIMEOUT*HZ;
 +	res = acct->active;
  out:
++<<<<<<< HEAD
 +	spin_unlock(&acct_lock);
++=======
+ 	return acct->active;
+ }
+ 
+ static void acct_put(struct bsd_acct_struct *p)
+ {
+ 	if (atomic_long_dec_and_test(&p->pin.count))
+ 		kfree_rcu(p, pin.rcu);
+ }
+ 
+ static struct bsd_acct_struct *acct_get(struct pid_namespace *ns)
+ {
+ 	struct bsd_acct_struct *res;
+ again:
+ 	smp_rmb();
+ 	rcu_read_lock();
+ 	res = ACCESS_ONCE(ns->bacct);
+ 	if (!res) {
+ 		rcu_read_unlock();
+ 		return NULL;
+ 	}
+ 	if (!atomic_long_inc_not_zero(&res->pin.count)) {
+ 		rcu_read_unlock();
+ 		cpu_relax();
+ 		goto again;
+ 	}
+ 	rcu_read_unlock();
+ 	mutex_lock(&res->lock);
+ 	if (!res->ns) {
+ 		mutex_unlock(&res->lock);
+ 		acct_put(res);
+ 		goto again;
+ 	}
++>>>>>>> 9e251d020414 (kill pin_put())
  	return res;
  }
  
@@@ -187,28 -170,34 +222,48 @@@ static void acct_kill(struct bsd_acct_s
  		      struct bsd_acct_struct *new)
  {
  	if (acct) {
 +		struct file *file = acct->file;
  		struct pid_namespace *ns = acct->ns;
 +		spin_lock(&acct_lock);
 +		list_del(&acct->list);
 +		mnt_unpin(file->f_path.mnt);
 +		spin_unlock(&acct_lock);
  		do_acct_process(acct);
 -		INIT_WORK(&acct->work, close_work);
 -		init_completion(&acct->done);
 -		schedule_work(&acct->work);
 -		wait_for_completion(&acct->done);
 -		pin_remove(&acct->pin);
 +		filp_close(file, NULL);
 +		spin_lock(&acct_lock);
  		ns->bacct = new;
 +		if (new) {
 +			mnt_pin(new->file->f_path.mnt);
 +			list_add(&new->list, &acct_list);
 +		}
  		acct->ns = NULL;
 -		atomic_long_dec(&acct->pin.count);
  		mutex_unlock(&acct->lock);
++<<<<<<< HEAD
 +		if (!(acct->count -= 2))
 +			kfree(acct);
 +		spin_unlock(&acct_lock);
 +	}
 +}
 +
++=======
+ 		acct_put(acct);
+ 	}
+ }
+ 
+ static void acct_pin_kill(struct fs_pin *pin)
+ {
+ 	struct bsd_acct_struct *acct;
+ 	acct = container_of(pin, struct bsd_acct_struct, pin);
+ 	mutex_lock(&acct->lock);
+ 	if (!acct->ns) {
+ 		mutex_unlock(&acct->lock);
+ 		acct_put(acct);
+ 		acct = NULL;
+ 	}
+ 	acct_kill(acct, NULL);
+ }
+ 
++>>>>>>> 9e251d020414 (kill pin_put())
  static int acct_on(struct filename *pathname)
  {
  	struct file *file;
* Unmerged path fs/fs_pin.c
* Unmerged path include/linux/fs_pin.h
* Unmerged path fs/fs_pin.c
* Unmerged path include/linux/fs_pin.h
* Unmerged path kernel/acct.c
