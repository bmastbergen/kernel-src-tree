net/mlx5e: Add accelerated RFS support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add accelerated RFS support (Don Dutile) [1383273 1417284]
Rebuild_FUZZ: 94.44%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit 18c908e477dcc94ede69323a6b876b5d8cfb40ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/18c908e4.failed

Implement ndo_rx_flow_steer ndo.
A new flow steering rule will be composed from the
skb 4-tuple and added to the hardware aRFS flow table.

Each rule is stored in an internal hash table, if such
skb 4-tuple rule already exists we update the corresponding
hardware steering rule with the new destination.

For garbage collection rps_may_expire_flow will be
invoked for a limited amount of old rules upon any
ndo_rx_flow_steer invocation.

	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 18c908e477dcc94ede69323a6b876b5d8cfb40ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 0d8462a92334,21c38419ad89..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -420,21 -430,64 +420,64 @@@ struct mlx5e_vlan_db 
  	bool          filter_disabled;
  };
  
 -struct mlx5e_l2_table {
 -	struct mlx5e_flow_table    ft;
 -	struct hlist_head          netdev_uc[MLX5E_L2_ADDR_HASH_SIZE];
 -	struct hlist_head          netdev_mc[MLX5E_L2_ADDR_HASH_SIZE];
 -	struct mlx5e_l2_rule	   broadcast;
 -	struct mlx5e_l2_rule	   allmulti;
 -	struct mlx5e_l2_rule	   promisc;
 -	bool                       broadcast_enabled;
 -	bool                       allmulti_enabled;
 -	bool                       promisc_enabled;
 +struct mlx5e_vxlan_db {
 +	spinlock_t			lock; /* protect vxlan table */
 +	struct radix_tree_root		tree;
  };
  
 -/* L3/L4 traffic type classifier */
 -struct mlx5e_ttc_table {
 -	struct mlx5e_flow_table  ft;
 -	struct mlx5_flow_rule	 *rules[MLX5E_NUM_TT];
 +struct mlx5e_flow_table {
 +	int num_groups;
 +	struct mlx5_flow_table		*t;
 +	struct mlx5_flow_group		**g;
  };
  
++<<<<<<< HEAD
 +struct mlx5e_flow_tables {
 +	struct mlx5_flow_namespace	*ns;
 +	struct mlx5e_flow_table		vlan;
 +	struct mlx5e_flow_table		main;
++=======
+ #define ARFS_HASH_SHIFT BITS_PER_BYTE
+ #define ARFS_HASH_SIZE BIT(BITS_PER_BYTE)
+ struct arfs_table {
+ 	struct mlx5e_flow_table  ft;
+ 	struct mlx5_flow_rule    *default_rule;
+ 	struct hlist_head	 rules_hash[ARFS_HASH_SIZE];
+ };
+ 
+ enum  arfs_type {
+ 	ARFS_IPV4_TCP,
+ 	ARFS_IPV6_TCP,
+ 	ARFS_IPV4_UDP,
+ 	ARFS_IPV6_UDP,
+ 	ARFS_NUM_TYPES,
+ };
+ 
+ struct mlx5e_arfs_tables {
+ 	struct arfs_table arfs_tables[ARFS_NUM_TYPES];
+ 	/* Protect aRFS rules list */
+ 	spinlock_t                     arfs_lock;
+ 	struct list_head               rules;
+ 	int                            last_filter_id;
+ 	struct workqueue_struct        *wq;
+ };
+ 
+ /* NIC prio FTS */
+ enum {
+ 	MLX5E_VLAN_FT_LEVEL = 0,
+ 	MLX5E_L2_FT_LEVEL,
+ 	MLX5E_TTC_FT_LEVEL,
+ 	MLX5E_ARFS_FT_LEVEL
+ };
+ 
+ struct mlx5e_flow_steering {
+ 	struct mlx5_flow_namespace      *ns;
+ 	struct mlx5e_tc_table           tc;
+ 	struct mlx5e_vlan_table         vlan;
+ 	struct mlx5e_l2_table           l2;
+ 	struct mlx5e_ttc_table          ttc;
+ 	struct mlx5e_arfs_tables        arfs;
++>>>>>>> 18c908e477dc (net/mlx5e: Add accelerated RFS support)
  };
  
  struct mlx5e_direct_tir {
@@@ -629,6 -683,20 +672,23 @@@ extern const struct dcbnl_rtnl_ops mlx5
  int mlx5e_dcbnl_ieee_setets_core(struct mlx5e_priv *priv, struct ieee_ets *ets);
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifndef CONFIG_RFS_ACCEL
+ static inline int mlx5e_arfs_create_tables(struct mlx5e_priv *priv)
+ {
+ 	return 0;
+ }
+ 
+ static inline void mlx5e_arfs_destroy_tables(struct mlx5e_priv *priv) {}
+ #else
+ int mlx5e_arfs_create_tables(struct mlx5e_priv *priv);
+ void mlx5e_arfs_destroy_tables(struct mlx5e_priv *priv);
+ int mlx5e_rx_flow_steer(struct net_device *dev, const struct sk_buff *skb,
+ 			u16 rxq_index, u32 flow_id);
+ #endif
+ 
++>>>>>>> 18c908e477dc (net/mlx5e: Add accelerated RFS support)
  u16 mlx5e_get_max_inline_cap(struct mlx5_core_dev *mdev);
  
  #endif /* __MLX5_EN_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
