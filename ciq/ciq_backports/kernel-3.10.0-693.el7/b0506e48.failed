userfaultfd: shmem: introduce vma_is_shmem

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Mike Rapoport <rppt@linux.vnet.ibm.com>
commit b0506e488da5cf2f07f3a4f6d7acaa8f459ad714
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b0506e48.failed

Currently userfault relies on vma_is_anonymous and vma_is_hugetlb to
ensure compatibility of a VMA with userfault.  Introduction of
vma_is_shmem allows detection if tmpfs backed VMAs, so that they may be
used with userfaultfd.  Current implementation presumes usage of
vma_is_shmem only by slow path routines in userfaultfd, therefore the
vma_is_shmem is not made inline to leave the few remaining free bits in
vm_flags.

Link: http://lkml.kernel.org/r/20161216144821.5183-30-aarcange@redhat.com
	Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
	Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
	Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
	Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
	Cc: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Pavel Emelyanov <xemul@parallels.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b0506e488da5cf2f07f3a4f6d7acaa8f459ad714)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mm.h
diff --cc include/linux/mm.h
index f440959dd698,bb997493e15d..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -1301,6 -1378,21 +1301,24 @@@ static inline int vma_growsdown(struct 
  	return vma && (vma->vm_end == addr) && (vma->vm_flags & VM_GROWSDOWN);
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool vma_is_anonymous(struct vm_area_struct *vma)
+ {
+ 	return !vma->vm_ops;
+ }
+ 
+ #ifdef CONFIG_SHMEM
+ /*
+  * The vma_is_shmem is not inline because it is used only by slow
+  * paths in userfault.
+  */
+ bool vma_is_shmem(struct vm_area_struct *vma);
+ #else
+ static inline bool vma_is_shmem(struct vm_area_struct *vma) { return false; }
+ #endif
+ 
++>>>>>>> b0506e488da5 (userfaultfd: shmem: introduce vma_is_shmem)
  static inline int stack_guard_page_start(struct vm_area_struct *vma,
  					     unsigned long addr)
  {
* Unmerged path include/linux/mm.h
diff --git a/mm/shmem.c b/mm/shmem.c
index 021ba8dffccb..01db98d93668 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -183,6 +183,11 @@ static struct backing_dev_info shmem_backing_dev_info  __read_mostly = {
 	.capabilities	= BDI_CAP_NO_ACCT_AND_WRITEBACK | BDI_CAP_SWAP_BACKED,
 };
 
+bool vma_is_shmem(struct vm_area_struct *vma)
+{
+	return vma->vm_ops == &shmem_vm_ops;
+}
+
 static LIST_HEAD(shmem_swaplist);
 static DEFINE_MUTEX(shmem_swaplist_mutex);
 
