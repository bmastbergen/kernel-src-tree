btrfs: sink gfp parameter to set_extent_delalloc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author David Sterba <dsterba@suse.com>
commit 7cd8c7527cb3ad3b397fecfa1bdc8eec9fa33dd8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7cd8c752.failed

Callers pass GFP_NOFS and tests pass GFP_KERNEL, but using NOFS there
does not hurt. No need to pass the flags around.

	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit 7cd8c7527cb3ad3b397fecfa1bdc8eec9fa33dd8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/tests/extent-io-tests.c
diff --cc fs/btrfs/tests/extent-io-tests.c
index 71ab575e7633,c190d2a520d1..000000000000
--- a/fs/btrfs/tests/extent-io-tests.c
+++ b/fs/btrfs/tests/extent-io-tests.c
@@@ -112,7 -113,7 +112,11 @@@ static int test_find_delalloc(void
  	 * |--- delalloc ---|
  	 * |---  search  ---|
  	 */
++<<<<<<< HEAD
 +	set_extent_delalloc(&tmp, 0, 4095, NULL, GFP_NOFS);
++=======
+ 	set_extent_delalloc(&tmp, 0, 4095, NULL);
++>>>>>>> 7cd8c7527cb3 (btrfs: sink gfp parameter to set_extent_delalloc)
  	start = 0;
  	end = 0;
  	found = find_lock_delalloc_range(inode, &tmp, locked_page, &start,
@@@ -143,7 -144,7 +147,11 @@@
  		test_msg("Couldn't find the locked page\n");
  		goto out_bits;
  	}
++<<<<<<< HEAD
 +	set_extent_delalloc(&tmp, 4096, max_bytes - 1, NULL, GFP_NOFS);
++=======
+ 	set_extent_delalloc(&tmp, 4096, max_bytes - 1, NULL);
++>>>>>>> 7cd8c7527cb3 (btrfs: sink gfp parameter to set_extent_delalloc)
  	start = test_start;
  	end = 0;
  	found = find_lock_delalloc_range(inode, &tmp, locked_page, &start,
@@@ -198,7 -199,7 +206,11 @@@
  	 *
  	 * We are re-using our test_start from above since it works out well.
  	 */
++<<<<<<< HEAD
 +	set_extent_delalloc(&tmp, max_bytes, total_dirty - 1, NULL, GFP_NOFS);
++=======
+ 	set_extent_delalloc(&tmp, max_bytes, total_dirty - 1, NULL);
++>>>>>>> 7cd8c7527cb3 (btrfs: sink gfp parameter to set_extent_delalloc)
  	start = test_start;
  	end = 0;
  	found = find_lock_delalloc_range(inode, &tmp, locked_page, &start,
diff --git a/fs/btrfs/extent_io.h b/fs/btrfs/extent_io.h
index 4b42bf8fbc5c..45234ba503cc 100644
--- a/fs/btrfs/extent_io.h
+++ b/fs/btrfs/extent_io.h
@@ -290,11 +290,11 @@ int convert_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,
 		       struct extent_state **cached_state, gfp_t mask);
 
 static inline int set_extent_delalloc(struct extent_io_tree *tree, u64 start,
-		u64 end, struct extent_state **cached_state, gfp_t mask)
+		u64 end, struct extent_state **cached_state)
 {
 	return set_extent_bit(tree, start, end,
 			      EXTENT_DELALLOC | EXTENT_UPTODATE,
-			      NULL, cached_state, mask);
+			      NULL, cached_state, GFP_NOFS);
 }
 
 static inline int set_extent_defrag(struct extent_io_tree *tree, u64 start,
diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 5aeb3dd1733e..d3a6188a60ac 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -1952,7 +1952,7 @@ int btrfs_set_extent_delalloc(struct inode *inode, u64 start, u64 end,
 {
 	WARN_ON((end & (PAGE_CACHE_SIZE - 1)) == 0);
 	return set_extent_delalloc(&BTRFS_I(inode)->io_tree, start, end,
-				   cached_state, GFP_NOFS);
+				   cached_state);
 }
 
 /* see btrfs_writepage_start_hook for details on why this is required */
* Unmerged path fs/btrfs/tests/extent-io-tests.c
