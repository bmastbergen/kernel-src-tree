mempolicy: remove the "task" arg of vma_policy_mof() and simplify it

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Oleg Nesterov <oleg@redhat.com>
commit 6b6482bbf64ef6f6dbc8b52f7a7cf88a0498bd51
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6b6482bb.failed

1. vma_policy_mof(task) is simply not safe unless task == current,
   it can race with do_exit()->mpol_put(). Remove this arg and update
   its single caller.

2. vma can not be NULL, remove this check and simplify the code.

	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Cyrill Gorcunov <gorcunov@openvz.org>
	Cc: "Eric W. Biederman" <ebiederm@xmission.com>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6b6482bbf64ef6f6dbc8b52f7a7cf88a0498bd51)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index ebdc56d82405,82088b29704e..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -1921,10 -1946,8 +1921,14 @@@ void task_numa_work(struct callback_hea
  		vma = mm->mmap;
  	}
  	for (; vma; vma = vma->vm_next) {
++<<<<<<< HEAD
 +		if (!vma_migratable(vma) || !vma_policy_mof(p, vma) ||
 +			is_vm_hugetlb_page(vma)) {
++=======
+ 		if (!vma_migratable(vma) || !vma_policy_mof(vma))
++>>>>>>> 6b6482bbf64e (mempolicy: remove the "task" arg of vma_policy_mof() and simplify it)
  			continue;
 +		}
  
  		/*
  		 * Shared library pages mapped by multiple processes are not
diff --git a/include/linux/mempolicy.h b/include/linux/mempolicy.h
index bce64776ad11..7cf8fbce3183 100644
--- a/include/linux/mempolicy.h
+++ b/include/linux/mempolicy.h
@@ -136,7 +136,7 @@ struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *sp,
 
 struct mempolicy *get_vma_policy(struct task_struct *tsk,
 		struct vm_area_struct *vma, unsigned long addr);
-bool vma_policy_mof(struct task_struct *task, struct vm_area_struct *vma);
+bool vma_policy_mof(struct vm_area_struct *vma);
 
 extern void numa_default_policy(void);
 extern void numa_policy_init(void);
* Unmerged path kernel/sched/fair.c
diff --git a/mm/mempolicy.c b/mm/mempolicy.c
index e0fc8d582ae5..e85a0fd4c3f3 100644
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@ -1676,27 +1676,24 @@ struct mempolicy *get_vma_policy(struct task_struct *task,
 	return pol;
 }
 
-bool vma_policy_mof(struct task_struct *task, struct vm_area_struct *vma)
+bool vma_policy_mof(struct vm_area_struct *vma)
 {
-	struct mempolicy *pol = NULL;
-
-	if (vma) {
-		if (vma->vm_ops && vma->vm_ops->get_policy) {
-			bool ret = false;
+	struct mempolicy *pol;
 
-			pol = vma->vm_ops->get_policy(vma, vma->vm_start);
-			if (pol && (pol->flags & MPOL_F_MOF))
-				ret = true;
-			mpol_cond_put(pol);
+	if (vma->vm_ops && vma->vm_ops->get_policy) {
+		bool ret = false;
 
-			return ret;
-		}
+		pol = vma->vm_ops->get_policy(vma, vma->vm_start);
+		if (pol && (pol->flags & MPOL_F_MOF))
+			ret = true;
+		mpol_cond_put(pol);
 
-		pol = vma->vm_policy;
+		return ret;
 	}
 
+	pol = vma->vm_policy;
 	if (!pol)
-		pol = get_task_policy(task);
+		pol = get_task_policy(current);
 
 	return pol->flags & MPOL_F_MOF;
 }
