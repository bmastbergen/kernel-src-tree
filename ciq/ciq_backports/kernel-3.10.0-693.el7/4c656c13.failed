bridge: allow zero ageing time

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Stephen Hemminger <shemming@brocade.com>
commit 4c656c13b254d598e83e586b7b4d36a2043dad85
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4c656c13.failed

This fixes a regression in the bridge ageing time caused by:
commit c62987bbd8a1 ("bridge: push bridge setting ageing_time down to switchdev")

There are users of Linux bridge which use the feature that if ageing time
is set to 0 it causes entries to never expire. See:
  https://www.linuxfoundation.org/collaborate/workgroups/networking/bridge

For a pure software bridge, it is unnecessary for the code to have
arbitrary restrictions on what values are allowable.

	Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4c656c13b254d598e83e586b7b4d36a2043dad85)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_stp.c
diff --cc net/bridge/br_stp.c
index 48a6519f8bc7,e23449094188..000000000000
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@@ -550,6 -562,35 +550,38 @@@ int br_set_max_age(struct net_bridge *b
  
  }
  
++<<<<<<< HEAD
++=======
+ /* Set time interval that dynamic forwarding entries live
+  * For pure software bridge, allow values outside the 802.1
+  * standard specification for special cases:
+  *  0 - entry never ages (all permanant)
+  *  1 - entry disappears (no persistance)
+  *
+  * Offloaded switch entries maybe more restrictive
+  */
+ int br_set_ageing_time(struct net_bridge *br, u32 ageing_time)
+ {
+ 	struct switchdev_attr attr = {
+ 		.orig_dev = br->dev,
+ 		.id = SWITCHDEV_ATTR_ID_BRIDGE_AGEING_TIME,
+ 		.flags = SWITCHDEV_F_SKIP_EOPNOTSUPP,
+ 		.u.ageing_time = ageing_time,
+ 	};
+ 	unsigned long t = clock_t_to_jiffies(ageing_time);
+ 	int err;
+ 
+ 	err = switchdev_port_attr_set(br->dev, &attr);
+ 	if (err)
+ 		return err;
+ 
+ 	br->ageing_time = t;
+ 	mod_timer(&br->gc_timer, jiffies);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 4c656c13b254 (bridge: allow zero ageing time)
  void __br_set_forward_delay(struct net_bridge *br, unsigned long t)
  {
  	br->bridge_forward_delay = t;
diff --git a/include/linux/if_bridge.h b/include/linux/if_bridge.h
index d66e75e57470..171d6fe83a8a 100644
--- a/include/linux/if_bridge.h
+++ b/include/linux/if_bridge.h
@@ -45,10 +45,6 @@ struct br_ip_list {
 #define BR_PROXYARP		BIT(8)
 #define BR_LEARNING_SYNC	BIT(9)
 
-/* values as per ieee8021QBridgeFdbAgingTime */
-#define BR_MIN_AGEING_TIME	(10 * HZ)
-#define BR_MAX_AGEING_TIME	(1000000 * HZ)
-
 #define BR_DEFAULT_AGEING_TIME	(300 * HZ)
 
 extern void brioctl_set(int (*ioctl_hook)(struct net *, unsigned int, void __user *));
* Unmerged path net/bridge/br_stp.c
