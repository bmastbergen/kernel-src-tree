net: sched: cls_fw: add missing tcf_exts_init call in fw_change()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: cls_fw: add missing tcf_exts_init call in fw_change() (Ivan Vecera) [1420506]
Rebuild_FUZZ: 96.00%
commit-author John Fastabend <john.fastabend@gmail.com>
commit e1f93eb06c3a13b29b1980f27dada960503cd49e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e1f93eb0.failed

When allocating a new structure we also need to call tcf_exts_init
to initialize exts.

A follow up patch might be in order to remove some of this code
and do tcf_exts_assign(). With this we could remove the
tcf_exts_init/tcf_exts_change pattern for some of the classifiers.
As part of the future tcf_actions RCU series this will need to be
done. For now fix the call here.

Fixes e35a8ee5993ba81fd6c0 ("net: sched: fw use RCU")
	Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
	Acked-by: Cong Wang <cwang@twopensource.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e1f93eb06c3a13b29b1980f27dada960503cd49e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_fw.c
diff --cc net/sched/cls_fw.c
index 861b03ccfed0,2650285620ee..000000000000
--- a/net/sched/cls_fw.c
+++ b/net/sched/cls_fw.c
@@@ -233,10 -246,44 +233,45 @@@ static int fw_change(struct net *net, s
  	if (err < 0)
  		return err;
  
 -	if (f) {
 -		struct fw_filter *pfp, *fnew;
 -		struct fw_filter __rcu **fp;
 -
 +	if (f != NULL) {
  		if (f->id != handle && handle)
  			return -EINVAL;
++<<<<<<< HEAD
 +		return fw_change_attrs(net, tp, f, tb, tca, base, ovr);
++=======
+ 
+ 		fnew = kzalloc(sizeof(struct fw_filter), GFP_KERNEL);
+ 		if (!fnew)
+ 			return -ENOBUFS;
+ 
+ 		fnew->id = f->id;
+ 		fnew->res = f->res;
+ #ifdef CONFIG_NET_CLS_IND
+ 		fnew->ifindex = f->ifindex;
+ #endif /* CONFIG_NET_CLS_IND */
+ 		fnew->tp = f->tp;
+ 
+ 		tcf_exts_init(&fnew->exts, TCA_FW_ACT, TCA_FW_POLICE);
+ 
+ 		err = fw_change_attrs(net, tp, fnew, tb, tca, base, ovr);
+ 		if (err < 0) {
+ 			kfree(fnew);
+ 			return err;
+ 		}
+ 
+ 		fp = &head->ht[fw_hash(fnew->id)];
+ 		for (pfp = rtnl_dereference(*fp); pfp;
+ 		     fp = &pfp->next, pfp = rtnl_dereference(*fp))
+ 			if (pfp == f)
+ 				break;
+ 
+ 		RCU_INIT_POINTER(fnew->next, rtnl_dereference(pfp->next));
+ 		rcu_assign_pointer(*fp, fnew);
+ 		call_rcu(&f->rcu, fw_delete_filter);
+ 
+ 		*arg = (unsigned long)fnew;
+ 		return err;
++>>>>>>> e1f93eb06c3a (net: sched: cls_fw: add missing tcf_exts_init call in fw_change())
  	}
  
  	if (!handle)
* Unmerged path net/sched/cls_fw.c
