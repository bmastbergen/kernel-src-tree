x86, kaslr: Clarify RANDOMIZE_BASE_MAX_OFFSET

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] kaslr: Clarify RANDOMIZE_BASE_MAX_OFFSET (Baoquan He) [1290840]
Rebuild_FUZZ: 94.12%
commit-author Kees Cook <keescook@chromium.org>
commit da2b6fb990cf782b18952f534ec7323453bc4fc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/da2b6fb9.failed

The help text for RANDOMIZE_BASE_MAX_OFFSET was confusing. This has been
clarified, and updated to be an export-only tunable.

	Signed-off-by: Kees Cook <keescook@chromium.org>
Link: http://lkml.kernel.org/r/20131210202745.GA2961@www.outflux.net
	Acked-by: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
(cherry picked from commit da2b6fb990cf782b18952f534ec7323453bc4fc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
diff --cc arch/x86/Kconfig
index 5162fc083bed,5c9e19dccf2f..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1789,12 -1722,63 +1789,67 @@@ config RELOCATABL
  
  	  Note: If CONFIG_RELOCATABLE=y, then the kernel runs from the address
  	  it has been loaded at and the compile time physical address
 -	  (CONFIG_PHYSICAL_START) is used as the minimum location.
 +	  (CONFIG_PHYSICAL_START) is ignored.
  
++<<<<<<< HEAD
 +# Relocation on x86-32 needs some additional build support
++=======
+ config RANDOMIZE_BASE
+ 	bool "Randomize the address of the kernel image"
+ 	depends on RELOCATABLE
+ 	depends on !HIBERNATION
+ 	default n
+ 	---help---
+ 	   Randomizes the physical and virtual address at which the
+ 	   kernel image is decompressed, as a security feature that
+ 	   deters exploit attempts relying on knowledge of the location
+ 	   of kernel internals.
+ 
+ 	   Entropy is generated using the RDRAND instruction if it is
+ 	   supported. If RDTSC is supported, it is used as well. If
+ 	   neither RDRAND nor RDTSC are supported, then randomness is
+ 	   read from the i8254 timer.
+ 
+ 	   The kernel will be offset by up to RANDOMIZE_BASE_MAX_OFFSET,
+ 	   and aligned according to PHYSICAL_ALIGN. Since the kernel is
+ 	   built using 2GiB addressing, and PHYSICAL_ALGIN must be at a
+ 	   minimum of 2MiB, only 10 bits of entropy is theoretically
+ 	   possible. At best, due to page table layouts, 64-bit can use
+ 	   9 bits of entropy and 32-bit uses 8 bits.
+ 
+ 	   If unsure, say N.
+ 
+ config RANDOMIZE_BASE_MAX_OFFSET
+ 	hex "Maximum kASLR offset allowed" if EXPERT
+ 	depends on RANDOMIZE_BASE
+ 	range 0x0 0x20000000 if X86_32
+ 	default "0x20000000" if X86_32
+ 	range 0x0 0x40000000 if X86_64
+ 	default "0x40000000" if X86_64
+ 	---help---
+ 	  The lesser of RANDOMIZE_BASE_MAX_OFFSET and available physical
+ 	  memory is used to determine the maximal offset in bytes that will
+ 	  be applied to the kernel when kernel Address Space Layout
+ 	  Randomization (kASLR) is active. This must be a multiple of
+ 	  PHYSICAL_ALIGN.
+ 
+ 	  On 32-bit this is limited to 512MiB by page table layouts. The
+ 	  default is 512MiB.
+ 
+ 	  On 64-bit this is limited by how the kernel fixmap page table is
+ 	  positioned, so this cannot be larger than 1GiB currently. Without
+ 	  RANDOMIZE_BASE, there is a 512MiB to 1.5GiB split between kernel
+ 	  and modules. When RANDOMIZE_BASE_MAX_OFFSET is above 512MiB, the
+ 	  modules area will shrink to compensate, up to the current maximum
+ 	  1GiB to 1GiB split. The default is 1GiB.
+ 
+ 	  If unsure, leave at the default value.
+ 
+ # Relocation on x86 needs some additional build support
++>>>>>>> da2b6fb990cf (x86, kaslr: Clarify RANDOMIZE_BASE_MAX_OFFSET)
  config X86_NEED_RELOCS
  	def_bool y
 -	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
 +	depends on X86_32 && RELOCATABLE
  
  config PHYSICAL_ALIGN
  	hex "Alignment value to which kernel should be aligned"
* Unmerged path arch/x86/Kconfig
