crypto: ccp - Remove check for x86 family and model

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] ccp - Remove check for x86 family and model (Suravee Suthikulpanit) [1390820]
Rebuild_FUZZ: 91.49%
commit-author Gary R Hook <gary.hook@amd.com>
commit 3f19ce2054541a6c663c8a5fcf52e7baa1c6c5f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3f19ce20.failed

Each x86 SoC will make use of a unique PCI ID for the CCP
device so it is not necessary to check for the CPU family
and model.

	Signed-off-by: Gary R Hook <gary.hook@amd.com>
	Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 3f19ce2054541a6c663c8a5fcf52e7baa1c6c5f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/ccp-dev.c
diff --cc drivers/crypto/ccp/ccp-dev.c
index 2777dc97b570,725c59016a36..000000000000
--- a/drivers/crypto/ccp/ccp-dev.c
+++ b/drivers/crypto/ccp/ccp-dev.c
@@@ -558,51 -577,52 +558,96 @@@ bool ccp_queues_suspended(struct ccp_de
  }
  #endif
  
++<<<<<<< HEAD
 +static const struct x86_cpu_id ccp_support[] = {
 +	{ X86_VENDOR_AMD, 22, },
 +	{ },
 +};
 +
 +static int __init ccp_mod_init(void)
 +{
 +	struct cpuinfo_x86 *cpuinfo = &boot_cpu_data;
++=======
+ static int __init ccp_mod_init(void)
+ {
+ #ifdef CONFIG_X86
++>>>>>>> 3f19ce205454 (crypto: ccp - Remove check for x86 family and model)
  	int ret;
  
- 	if (!x86_match_cpu(ccp_support))
+ 	ret = ccp_pci_init();
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* Don't leave the driver loaded if init failed */
+ 	if (!ccp_get_device()) {
+ 		ccp_pci_exit();
  		return -ENODEV;
++<<<<<<< HEAD
 +
 +	switch (cpuinfo->x86) {
 +	case 22:
 +		if ((cpuinfo->x86_model < 48) || (cpuinfo->x86_model > 63))
 +			return -ENODEV;
 +
 +		ret = ccp_pci_init();
 +		if (ret)
 +			return ret;
 +
 +		/* Don't leave the driver loaded if init failed */
 +		if (!ccp_get_device()) {
 +			ccp_pci_exit();
 +			return -ENODEV;
 +		}
 +
 +		return 0;
 +
 +		break;
 +	};
++=======
+ 	}
+ 
+ 	return 0;
+ #endif
+ 
+ #ifdef CONFIG_ARM64
+ 	int ret;
+ 
+ 	ret = ccp_platform_init();
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* Don't leave the driver loaded if init failed */
+ 	if (!ccp_get_device()) {
+ 		ccp_platform_exit();
+ 		return -ENODEV;
+ 	}
+ 
+ 	return 0;
+ #endif
++>>>>>>> 3f19ce205454 (crypto: ccp - Remove check for x86 family and model)
  
  	return -ENODEV;
  }
  
  static void __exit ccp_mod_exit(void)
  {
++<<<<<<< HEAD
 +	struct cpuinfo_x86 *cpuinfo = &boot_cpu_data;
 +
 +	switch (cpuinfo->x86) {
 +	case 22:
 +		ccp_pci_exit();
 +		break;
 +	};
++=======
+ #ifdef CONFIG_X86
+ 	ccp_pci_exit();
+ #endif
+ 
+ #ifdef CONFIG_ARM64
+ 	ccp_platform_exit();
+ #endif
++>>>>>>> 3f19ce205454 (crypto: ccp - Remove check for x86 family and model)
  }
  
  module_init(ccp_mod_init);
* Unmerged path drivers/crypto/ccp/ccp-dev.c
