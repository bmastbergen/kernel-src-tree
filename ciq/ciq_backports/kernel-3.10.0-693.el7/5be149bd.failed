mei: bus: add module_mei_cl_driver helper macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 5be149bdd36c8765c9e785f70b888d028ada40af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5be149bd.failed

Add module_mei_cl_driver helper macro for eliminating the boilerplate
code from mei_cl drivers registration. The macro is intended for
drivers which in their init/exit sections does only register/unregister
of a mei_cl driver.

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 5be149bdd36c8765c9e785f70b888d028ada40af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mei_cl_bus.h
diff --cc include/linux/mei_cl_bus.h
index 2c6cf843cbb6,e6fbd98ea90e..000000000000
--- a/include/linux/mei_cl_bus.h
+++ b/include/linux/mei_cl_bus.h
@@@ -74,12 -74,25 +74,30 @@@ int __mei_cldev_driver_register(struct 
  
  void mei_cldev_driver_unregister(struct mei_cl_driver *cldrv);
  
++<<<<<<< HEAD
 +ssize_t mei_cldrv_send(struct mei_cl_device *cldev, u8 *buf, size_t length);
 +ssize_t  mei_cldrv_recv(struct mei_cl_device *cldev, u8 *buf, size_t length);
++=======
+ /**
+  * module_mei_cl_driver - Helper macro for registering mei cl driver
+  *
+  * @__mei_cldrv mei_cl_driver structure
+  *
+  *  Helper macro for mei cl drivers which do not do anything special in module
+  *  init/exit, for eliminating a boilerplate code.
+  */
+ #define module_mei_cl_driver(__mei_cldrv) \
+ 	module_driver(__mei_cldrv, \
+ 		      mei_cldev_driver_register,\
+ 		      mei_cldev_driver_unregister)
+ 
+ ssize_t mei_cldev_send(struct mei_cl_device *cldev, u8 *buf, size_t length);
+ ssize_t  mei_cldev_recv(struct mei_cl_device *cldev, u8 *buf, size_t length);
++>>>>>>> 5be149bdd36c (mei: bus: add module_mei_cl_driver helper macro)
  
 -int mei_cldev_register_event_cb(struct mei_cl_device *cldev,
 -				unsigned long event_mask,
 -				mei_cldev_event_cb_t read_cb, void *context);
 +int mei_cldrv_register_event_cb(struct mei_cl_device *cldev,
 +			  unsigned long event_mask,
 +			  mei_cldev_event_cb_t read_cb, void *context);
  
  #define MEI_CL_EVENT_RX 0
  #define MEI_CL_EVENT_TX 1
* Unmerged path include/linux/mei_cl_bus.h
