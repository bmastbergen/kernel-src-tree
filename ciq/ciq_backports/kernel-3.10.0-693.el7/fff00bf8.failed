HID: wacom: Add support for DTU-1031X

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: Add support for DTU-1031X (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 92.75%
commit-author Ping Cheng <pinglinux@gmail.com>
commit fff00bf8cc8d98aa3b84d9c7daea0af418b6aa69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/fff00bf8.failed

	Signed-off-by: Ping Cheng <pingc@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit fff00bf8cc8d98aa3b84d9c7daea0af418b6aa69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
#	drivers/hid/wacom_wac.h
diff --cc drivers/hid/wacom_wac.c
index 334849232c4c,b65e0d7cd7e5..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -1368,6 -1846,11 +1368,14 @@@ void wacom_wac_irq(struct wacom_wac *wa
  		sync = wacom_dtu_irq(wacom_wac);
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case DTUS:
+ 	case DTUSX:
+ 		sync = wacom_dtus_irq(wacom_wac);
+ 		break;
+ 
++>>>>>>> fff00bf8cc8d (HID: wacom: Add support for DTU-1031X)
  	case INTUOS:
  	case INTUOS3S:
  	case INTUOS3:
@@@ -1587,6 -2079,255 +1595,258 @@@ int wacom_setup_input_capabilities(stru
  		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case GRAPHIRE_BT:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 		input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 					      features->distance_max,
+ 					      0, 0);
+ 
+ 		input_set_capability(input_dev, EV_REL, REL_WHEEL);
+ 
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		__set_bit(BTN_MIDDLE, input_dev->keybit);
+ 
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_MOUSE, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case WACOM_24HD:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		input_set_abs_params(input_dev, ABS_THROTTLE, 0, 71, 0, 0);
+ 		/* fall through */
+ 
+ 	case DTK:
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case WACOM_22HD:
+ 	case WACOM_21UX2:
+ 	case WACOM_BEE:
+ 	case CINTIQ:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case WACOM_13HD:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case INTUOS3:
+ 	case INTUOS3L:
+ 	case INTUOS3S:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		/* fall through */
+ 
+ 	case INTUOS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		wacom_setup_intuos(wacom_wac);
+ 		break;
+ 
+ 	case INTUOS5:
+ 	case INTUOS5L:
+ 	case INTUOSPM:
+ 	case INTUOSPL:
+ 	case INTUOS5S:
+ 	case INTUOSPS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		if (features->device_type == BTN_TOOL_PEN) {
+ 			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 					      features->distance_max,
+ 					      0, 0);
+ 
+ 			input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 			input_abs_set_res(input_dev, ABS_Z, 287);
+ 
+ 			wacom_setup_intuos(wacom_wac);
+ 		} else if (features->device_type == BTN_TOOL_FINGER) {
+ 			__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR,
+ 			                     0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_TOUCH_MINOR,
+ 			                     0, features->y_max, 0, 0);
+ 			input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
+ 		}
+ 		break;
+ 
+ 	case INTUOS4:
+ 	case INTUOS4WL:
+ 	case INTUOS4L:
+ 	case INTUOS4S:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		wacom_setup_intuos(wacom_wac);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case WACOM_24HDT:
+ 		if (features->device_type == BTN_TOOL_FINGER) {
+ 			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, 0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_WIDTH_MINOR, 0, features->y_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_ORIENTATION, 0, 1, 0, 0);
+ 		}
+ 		/* fall through */
+ 
+ 	case MTSCREEN:
+ 	case MTTPC:
+ 	case MTTPC_B:
+ 	case TABLETPC2FG:
+ 		if (features->device_type == BTN_TOOL_FINGER && features->touch_max > 1)
+ 			input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_DIRECT);
+ 		/* fall through */
+ 
+ 	case TABLETPC:
+ 	case TABLETPCE:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		if (features->device_type != BTN_TOOL_PEN)
+ 			break;  /* no need to process stylus stuff */
+ 
+ 		/* fall through */
+ 
+ 	case DTUS:
+ 	case DTUSX:
+ 	case PL:
+ 	case DTU:
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		break;
+ 
+ 	case PTU:
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 		/* fall through */
+ 
+ 	case PENPARTNER:
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case INTUOSHT:
+ 		if (features->touch_max &&
+ 		    features->device_type == BTN_TOOL_FINGER) {
+ 			input_dev->evbit[0] |= BIT_MASK(EV_SW);
+ 			__set_bit(SW_MUTE_DEVICE, input_dev->swbit);
+ 		}
+ 		/* fall through */
+ 
+ 	case BAMBOO_PT:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 		if (features->device_type == BTN_TOOL_FINGER) {
+ 
+ 			if (features->touch_max) {
+ 				if (features->pktlen == WACOM_PKGLEN_BBTOUCH3) {
+ 					input_set_abs_params(input_dev,
+ 						     ABS_MT_TOUCH_MAJOR,
+ 						     0, features->x_max, 0, 0);
+ 					input_set_abs_params(input_dev,
+ 						     ABS_MT_TOUCH_MINOR,
+ 						     0, features->y_max, 0, 0);
+ 				}
+ 				input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
+ 			} else {
+ 				/* buttons/keys only interface */
+ 				__clear_bit(ABS_X, input_dev->absbit);
+ 				__clear_bit(ABS_Y, input_dev->absbit);
+ 				__clear_bit(BTN_TOUCH, input_dev->keybit);
+ 
+ 				/* PAD is setup by wacom_setup_pad_input_capabilities later */
+ 				return 1;
+ 			}
+ 		} else if (features->device_type == BTN_TOOL_PEN) {
+ 			__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 			__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 			__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 			__set_bit(BTN_STYLUS, input_dev->keybit);
+ 			__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 					      features->distance_max,
+ 					      0, 0);
+ 		}
+ 		break;
+ 
+ 	case CINTIQ_HYBRID:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_abs_set_res(input_dev, ABS_Z, 287);
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 	}
+ 	return 0;
+ }
+ 
+ int wacom_setup_pad_input_capabilities(struct input_dev *input_dev,
+ 				   struct wacom_wac *wacom_wac)
+ {
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	int i;
+ 
+ 	input_dev->evbit[0] |= BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+ 
+ 	/* kept for making legacy xf86-input-wacom working with the wheels */
+ 	__set_bit(ABS_MISC, input_dev->absbit);
+ 
+ 	/* kept for making legacy xf86-input-wacom accepting the pad */
+ 	input_set_abs_params(input_dev, ABS_X, 0, 1, 0, 0);
+ 	input_set_abs_params(input_dev, ABS_Y, 0, 1, 0, 0);
+ 
+ 	/* kept for making udev and libwacom accepting the pad */
+ 	__set_bit(BTN_STYLUS, input_dev->keybit);
+ 
+ 	switch (features->type) {
+ 	case GRAPHIRE_BT:
+ 		__set_bit(BTN_0, input_dev->keybit);
+ 		__set_bit(BTN_1, input_dev->keybit);
+ 		break;
+ 
+ 	case WACOM_MO:
+ 		__set_bit(BTN_BACK, input_dev->keybit);
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_FORWARD, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
+ 		break;
+ 
+ 	case WACOM_G4:
+ 		__set_bit(BTN_BACK, input_dev->keybit);
+ 		__set_bit(BTN_FORWARD, input_dev->keybit);
+ 		input_set_capability(input_dev, EV_REL, REL_WHEEL);
+ 		break;
+ 
++>>>>>>> fff00bf8cc8d (HID: wacom: Add support for DTU-1031X)
  	case WACOM_24HD:
  		__set_bit(BTN_A, input_dev->keybit);
  		__set_bit(BTN_B, input_dev->keybit);
@@@ -2049,49 -2695,46 +2309,62 @@@ static const struct wacom_features waco
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf6 };
  static const struct wacom_features wacom_features_0xF6 =
  	{ "Wacom Cintiq 24HD touch", .type = WACOM_24HDT, /* Touch */
 -	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf8, .touch_max = 10,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf8, .touch_max = 10 };
 +static const struct wacom_features wacom_features_0x32A =
 +	{ "Wacom Cintiq 27QHD", WACOM_PKGLEN_INTUOS, 119740, 67520, 2047, 63,
 +	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
 +static const struct wacom_features wacom_features_0x32B =
 +	{ "Wacom Cintiq 27QHD touch", WACOM_PKGLEN_INTUOS, 119740, 67520, 2047, 63,
 +	  WACOM_27QHD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32C };
 +static const struct wacom_features wacom_features_0x32C =
 +	{ "Wacom Cintiq 27QHD touch", .type = WACOM_27QHDT,
 +	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x32B, .touch_max = 10,
 +	  .pktlen = WACOM_PKGLEN_INTUOS };
  static const struct wacom_features wacom_features_0x3F =
 -	{ "Wacom Cintiq 21UX", 87200, 65600, 1023, 63,
 -	  CINTIQ, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Cintiq 21UX",    WACOM_PKGLEN_INTUOS,    87200, 65600, 1023,
 +	  63, CINTIQ, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xC5 =
 -	{ "Wacom Cintiq 20WSX", 86680, 54180, 1023, 63,
 -	  WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Cintiq 20WSX",   WACOM_PKGLEN_INTUOS,    86680, 54180, 1023,
 +	  63, WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xC6 =
 -	{ "Wacom Cintiq 12WX", 53020, 33440, 1023, 63,
 -	  WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Cintiq 12WX",    WACOM_PKGLEN_INTUOS,    53020, 33440, 1023,
 +	  63, WACOM_BEE, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0x304 =
 -	{ "Wacom Cintiq 13HD", 59352, 33648, 1023, 63,
 -	  WACOM_13HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	{ "Wacom Cintiq 13HD",    WACOM_PKGLEN_INTUOS,    59352, 33648, 1023,
 +	  63, WACOM_13HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
  static const struct wacom_features wacom_features_0xC7 =
 -	{ "Wacom DTU1931", 37832, 30305, 511, 0,
 -	  PL, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom DTU1931",        WACOM_PKGLEN_GRAPHIRE,  37832, 30305,  511,
 +	  0, PL, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xCE =
 -	{ "Wacom DTU2231", 47864, 27011, 511, 0,
 -	  DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBMOUSE };
 +	{ "Wacom DTU2231",        WACOM_PKGLEN_GRAPHIRE,  47864, 27011,  511,
 +	  0, DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xF0 =
++<<<<<<< HEAD
 +	{ "Wacom DTU1631",        WACOM_PKGLEN_GRAPHIRE,  34623, 19553,  511,
 +	  0, DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
++=======
+ 	{ "Wacom DTU1631", 34623, 19553, 511, 0,
+ 	  DTU, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
+ static const struct wacom_features wacom_features_0xFB =
+ 	{ "Wacom DTU1031", 22096, 13960, 511, 0,
+ 	  DTUS, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
+ 	  WACOM_DTU_OFFSET, WACOM_DTU_OFFSET };
+ static const struct wacom_features wacom_features_0x32F =
+ 	{ "Wacom DTU1031X", 22472, 12728, 511, 0,
+ 	  DTUSX, WACOM_INTUOS_RES, WACOM_INTUOS_RES,
+ 	  WACOM_DTU_OFFSET, WACOM_DTU_OFFSET };
++>>>>>>> fff00bf8cc8d (HID: wacom: Add support for DTU-1031X)
  static const struct wacom_features wacom_features_0x57 =
 -	{ "Wacom DTK2241", 95640, 54060, 2047, 63,
 -	  DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	{ "Wacom DTK2241",        WACOM_PKGLEN_INTUOS,    95640, 54060, 2047,
 +	  63, DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
  static const struct wacom_features wacom_features_0x59 = /* Pen */
 -	{ "Wacom DTH2242", 95640, 54060, 2047, 63,
 -	  DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	{ "Wacom DTH2242",        WACOM_PKGLEN_INTUOS,    95640, 54060, 2047,
 +	  63, DTK, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
  	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0x5D };
  static const struct wacom_features wacom_features_0x5D = /* Touch */
@@@ -2349,20 -3039,37 +2622,33 @@@ const struct usb_device_id wacom_ids[] 
  	{ USB_DEVICE_WACOM(0x100) },
  	{ USB_DEVICE_WACOM(0x101) },
  	{ USB_DEVICE_WACOM(0x10D) },
 -	{ USB_DEVICE_WACOM(0x10E) },
 -	{ USB_DEVICE_WACOM(0x10F) },
 -	{ USB_DEVICE_WACOM(0x116) },
 -	{ USB_DEVICE_WACOM(0x12C) },
 -	{ USB_DEVICE_WACOM(0x300) },
 -	{ USB_DEVICE_WACOM(0x301) },
 -	{ USB_DEVICE_WACOM(0x302) },
 -	{ USB_DEVICE_WACOM(0x303) },
  	{ USB_DEVICE_WACOM(0x304) },
++<<<<<<< HEAD
 +	{ USB_DEVICE_DETAILED(0x314, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_DETAILED(0x315, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_DETAILED(0x317, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_WACOM(0x32A) },
 +	{ USB_DEVICE_WACOM(0x32B) },
 +	{ USB_DEVICE_WACOM(0x32C) },
++=======
+ 	{ USB_DEVICE_WACOM(0x307) },
+ 	{ USB_DEVICE_WACOM(0x309) },
+ 	{ USB_DEVICE_WACOM(0x30A) },
+ 	{ USB_DEVICE_WACOM(0x30C) },
+ 	{ USB_DEVICE_WACOM(0x30E) },
+ 	{ USB_DEVICE_WACOM(0x314) },
+ 	{ USB_DEVICE_WACOM(0x315) },
+ 	{ USB_DEVICE_WACOM(0x317) },
+ 	{ USB_DEVICE_WACOM(0x323) },
+ 	{ USB_DEVICE_WACOM(0x32F) },
++>>>>>>> fff00bf8cc8d (HID: wacom: Add support for DTU-1031X)
  	{ USB_DEVICE_WACOM(0x4001) },
 -	{ USB_DEVICE_WACOM(0x4004) },
 -	{ USB_DEVICE_WACOM(0x5000) },
 -	{ USB_DEVICE_WACOM(0x5002) },
 -
 -	{ USB_DEVICE_WACOM(HID_ANY_ID) },
 +	{ USB_DEVICE_WACOM(0x47) },
 +	{ USB_DEVICE_WACOM(0xF4) },
 +	{ USB_DEVICE_WACOM(0xF8) },
 +	{ USB_DEVICE_DETAILED(0xF6, USB_CLASS_HID, 0, 0) },
 +	{ USB_DEVICE_WACOM(0xFA) },
 +	{ USB_DEVICE_LENOVO(0x6004) },
  	{ }
  };
 -MODULE_DEVICE_TABLE(hid, wacom_ids);
 +MODULE_DEVICE_TABLE(usb, wacom_ids);
diff --cc drivers/hid/wacom_wac.h
index d220d069f329,5384043778fc..000000000000
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@@ -71,6 -79,8 +71,11 @@@ enum 
  	PTU,
  	PL,
  	DTU,
++<<<<<<< HEAD
++=======
+ 	DTUS,
+ 	DTUSX,
++>>>>>>> fff00bf8cc8d (HID: wacom: Add support for DTU-1031X)
  	INTUOS,
  	INTUOS3S,
  	INTUOS3,
* Unmerged path drivers/hid/wacom_wac.c
* Unmerged path drivers/hid/wacom_wac.h
