btrfs: tests, use BTRFS_FS_STATE_DUMMY_FS_INFO instead of dummy root

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jeff Mahoney <jeffm@suse.com>
commit f5ee5c9ac56cd328fcc915582f81226affebd81c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f5ee5c9a.failed

Now that we have a dummy fs_info associated with each test that
uses a root, we don't need the DUMMY_ROOT bit anymore.  This lets
us make choices without needing an actual root like in e.g.
btrfs_find_create_tree_block.

	Signed-off-by: Jeff Mahoney <jeffm@suse.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit f5ee5c9ac56cd328fcc915582f81226affebd81c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/disk-io.c
#	fs/btrfs/extent-tree.c
diff --cc fs/btrfs/disk-io.c
index f1b6251aa1de,ff2362dca91a..000000000000
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@@ -1138,8 -1146,9 +1138,14 @@@ struct extent_buffer *btrfs_find_tree_b
  struct extent_buffer *btrfs_find_create_tree_block(struct btrfs_root *root,
  						 u64 bytenr)
  {
++<<<<<<< HEAD
 +	if (btrfs_test_is_dummy_root(root))
 +		return alloc_test_extent_buffer(root->fs_info, bytenr);
++=======
+ 	if (btrfs_is_testing(root->fs_info))
+ 		return alloc_test_extent_buffer(root->fs_info, bytenr,
+ 				root->nodesize);
++>>>>>>> f5ee5c9ac56c (btrfs: tests, use BTRFS_FS_STATE_DUMMY_FS_INFO instead of dummy root)
  	return alloc_extent_buffer(root->fs_info, bytenr);
  }
  
@@@ -1310,11 -1321,15 +1316,17 @@@ struct btrfs_root *btrfs_alloc_dummy_ro
  {
  	struct btrfs_root *root;
  
 -	if (!fs_info)
 -		return ERR_PTR(-EINVAL);
 -
 -	root = btrfs_alloc_root(fs_info, GFP_KERNEL);
 +	root = btrfs_alloc_root(NULL, GFP_KERNEL);
  	if (!root)
  		return ERR_PTR(-ENOMEM);
++<<<<<<< HEAD
 +	__setup_root(4096, 4096, 4096, root, NULL, 1);
 +	set_bit(BTRFS_ROOT_DUMMY_ROOT, &root->state);
++=======
+ 	/* We don't use the stripesize in selftest, set it as sectorsize */
+ 	__setup_root(nodesize, sectorsize, sectorsize, root, fs_info,
+ 			BTRFS_ROOT_TREE_OBJECTID);
++>>>>>>> f5ee5c9ac56c (btrfs: tests, use BTRFS_FS_STATE_DUMMY_FS_INFO instead of dummy root)
  	root->alloc_bytenr = 0;
  
  	return root;
diff --cc fs/btrfs/extent-tree.c
index 51360de1f70c,c4487e177234..000000000000
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@@ -7979,7 -8355,8 +7979,12 @@@ struct extent_buffer *btrfs_alloc_tree_
  	bool skinny_metadata = btrfs_fs_incompat(root->fs_info,
  						 SKINNY_METADATA);
  
++<<<<<<< HEAD
 +	if (btrfs_test_is_dummy_root(root)) {
++=======
+ #ifdef CONFIG_BTRFS_FS_RUN_SANITY_TESTS
+ 	if (btrfs_is_testing(root->fs_info)) {
++>>>>>>> f5ee5c9ac56c (btrfs: tests, use BTRFS_FS_STATE_DUMMY_FS_INFO instead of dummy root)
  		buf = btrfs_init_new_buffer(trans, root, root->alloc_bytenr,
  					    level);
  		if (!IS_ERR(buf))
diff --git a/fs/btrfs/backref.c b/fs/btrfs/backref.c
index be75e4cc523c..c914a796347f 100644
--- a/fs/btrfs/backref.c
+++ b/fs/btrfs/backref.c
@@ -361,7 +361,7 @@ static int __resolve_indirect_ref(struct btrfs_fs_info *fs_info,
 		goto out;
 	}
 
-	if (btrfs_test_is_dummy_root(root)) {
+	if (btrfs_is_testing(fs_info)) {
 		srcu_read_unlock(&fs_info->subvol_srcu, index);
 		ret = -ENOENT;
 		goto out;
diff --git a/fs/btrfs/ctree.c b/fs/btrfs/ctree.c
index b9bc5fdfb9fe..cc82ccab490f 100644
--- a/fs/btrfs/ctree.c
+++ b/fs/btrfs/ctree.c
@@ -1503,7 +1503,7 @@ static inline int should_cow_block(struct btrfs_trans_handle *trans,
 				   struct btrfs_root *root,
 				   struct extent_buffer *buf)
 {
-	if (btrfs_test_is_dummy_root(root))
+	if (btrfs_is_testing(root->fs_info))
 		return 0;
 
 	/* ensure we can see the force_cow */
diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index eaff9105e433..ed4894d7c44a 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -1081,12 +1081,11 @@ struct btrfs_subvolume_writers {
 #define BTRFS_ROOT_REF_COWS		1
 #define BTRFS_ROOT_TRACK_DIRTY		2
 #define BTRFS_ROOT_IN_RADIX		3
-#define BTRFS_ROOT_DUMMY_ROOT		4
-#define BTRFS_ROOT_ORPHAN_ITEM_INSERTED	5
-#define BTRFS_ROOT_DEFRAG_RUNNING	6
-#define BTRFS_ROOT_FORCE_COW		7
-#define BTRFS_ROOT_MULTI_LOG_TASKS	8
-#define BTRFS_ROOT_DIRTY		9
+#define BTRFS_ROOT_ORPHAN_ITEM_INSERTED	4
+#define BTRFS_ROOT_DEFRAG_RUNNING	5
+#define BTRFS_ROOT_FORCE_COW		6
+#define BTRFS_ROOT_MULTI_LOG_TASKS	7
+#define BTRFS_ROOT_DIRTY		8
 
 /*
  * in ram representation of the tree.  extent_root is used for all allocations
@@ -3554,13 +3553,13 @@ static inline int btrfs_defrag_cancelled(struct btrfs_fs_info *fs_info)
 void btrfs_test_destroy_inode(struct inode *inode);
 #endif
 
-static inline int btrfs_test_is_dummy_root(struct btrfs_root *root)
+static inline int btrfs_is_testing(struct btrfs_fs_info *fs_info)
 {
 #ifdef CONFIG_BTRFS_FS_RUN_SANITY_TESTS
-	if (unlikely(test_bit(BTRFS_ROOT_DUMMY_ROOT, &root->state)))
+	if (unlikely(test_bit(BTRFS_FS_STATE_DUMMY_FS_INFO,
+			      &fs_info->fs_state)))
 		return 1;
 #endif
 	return 0;
 }
-
 #endif
* Unmerged path fs/btrfs/disk-io.c
* Unmerged path fs/btrfs/extent-tree.c
diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index e6496b484d20..8f161eb29183 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -1722,7 +1722,7 @@ static void btrfs_set_bit_hook(struct inode *inode,
 		}
 
 		/* For sanity tests */
-		if (btrfs_test_is_dummy_root(root))
+		if (btrfs_is_testing(root->fs_info))
 			return;
 
 		__percpu_counter_add(&root->fs_info->delalloc_bytes, len,
@@ -1781,7 +1781,7 @@ static void btrfs_clear_bit_hook(struct inode *inode,
 			btrfs_delalloc_release_metadata(inode, len);
 
 		/* For sanity tests. */
-		if (btrfs_test_is_dummy_root(root))
+		if (btrfs_is_testing(root->fs_info))
 			return;
 
 		if (root->root_key.objectid != BTRFS_DATA_RELOC_TREE_OBJECTID
diff --git a/fs/btrfs/qgroup.c b/fs/btrfs/qgroup.c
index 34af959b4e0f..1aa16f106f25 100644
--- a/fs/btrfs/qgroup.c
+++ b/fs/btrfs/qgroup.c
@@ -571,7 +571,7 @@ static int add_qgroup_item(struct btrfs_trans_handle *trans,
 	struct extent_buffer *leaf;
 	struct btrfs_key key;
 
-	if (btrfs_test_is_dummy_root(quota_root))
+	if (btrfs_is_testing(quota_root->fs_info))
 		return 0;
 
 	path = btrfs_alloc_path();
@@ -728,7 +728,7 @@ static int update_qgroup_info_item(struct btrfs_trans_handle *trans,
 	int ret;
 	int slot;
 
-	if (btrfs_test_is_dummy_root(root))
+	if (btrfs_is_testing(root->fs_info))
 		return 0;
 
 	key.objectid = 0;
