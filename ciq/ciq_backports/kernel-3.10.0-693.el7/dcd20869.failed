nfsd: fix supported attributes for acl & labels

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author J. Bruce Fields <bfields@redhat.com>
commit dcd208697707b12adeaa45643bab239c5e90ef9b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/dcd20869.failed

Oops--in 916d2d844afd I moved some constants into an array for
convenience, but here I'm accidentally writing to that array.

The effect is that if you ever encounter a filesystem lacking support
for ACLs or security labels, then all queries of supported attributes
will report that attribute as unsupported from then on.

Fixes: 916d2d844afd "nfsd: clean up supported attribute handling"
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit dcd208697707b12adeaa45643bab239c5e90ef9b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4xdr.c
diff --cc fs/nfsd/nfs4xdr.c
index 8e3154825b61,8fae53ce21d1..000000000000
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@@ -2416,15 -2440,15 +2416,21 @@@ nfsd4_encode_fattr(struct xdr_stream *x
  	p++;                /* to be backfilled later */
  
  	if (bmval0 & FATTR4_WORD0_SUPPORTED_ATTRS) {
++<<<<<<< HEAD
 +		u32 word0 = nfsd_suppattrs0(minorversion);
 +		u32 word1 = nfsd_suppattrs1(minorversion);
 +		u32 word2 = nfsd_suppattrs2(minorversion);
++=======
+ 		u32 supp[3];
+ 
+ 		memcpy(supp, nfsd_suppattrs[minorversion], sizeof(supp));
++>>>>>>> dcd208697707 (nfsd: fix supported attributes for acl & labels)
  
  		if (!IS_POSIXACL(dentry->d_inode))
 -			supp[0] &= ~FATTR4_WORD0_ACL;
 +			word0 &= ~FATTR4_WORD0_ACL;
  		if (!contextsupport)
 -			supp[2] &= ~FATTR4_WORD2_SECURITY_LABEL;
 -		if (!supp[2]) {
 +			word2 &= ~FATTR4_WORD2_SECURITY_LABEL;
 +		if (!word2) {
  			p = xdr_reserve_space(xdr, 12);
  			if (!p)
  				goto out_resource;
* Unmerged path fs/nfsd/nfs4xdr.c
