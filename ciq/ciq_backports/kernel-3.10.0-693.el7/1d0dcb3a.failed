futex: Implement lockless wakeups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Davidlohr Bueso <dave@stgolabs.net>
commit 1d0dcb3ad9d336e6d6ee020a750a7f8d907e28de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1d0dcb3a.failed

Given the overall futex architecture, any chance of reducing
hb->lock contention is welcome. In this particular case, using
wake-queues to enable lockless wakeups addresses very much real
world performance concerns, even cases of soft-lockups in cases
of large amounts of blocked tasks (which is not hard to find in
large boxes, using but just a handful of futex).

At the lowest level, this patch can reduce latency of a single thread
attempting to acquire hb->lock in highly contended scenarios by a
up to 2x. At lower counts of nr_wake there are no regressions,
confirming, of course, that the wake_q handling overhead is practically
non existent. For instance, while a fair amount of variation,
the extended pef-bench wakeup benchmark shows for a 20 core machine
the following avg per-thread time to wakeup its share of tasks:

	nr_thr	ms-before	ms-after
	16 	0.0590		0.0215
	32 	0.0396		0.0220
	48 	0.0417		0.0182
	64 	0.0536		0.0236
	80 	0.0414		0.0097
	96 	0.0672		0.0152

Naturally, this can cause spurious wakeups. However there is no core code
that cannot handle them afaict, and furthermore tglx does have the point
that other events can already trigger them anyway.

	Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Chris Mason <clm@fb.com>
	Cc: Davidlohr Bueso <dave@stgolabs.net>
	Cc: George Spelvin <linux@horizon.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Manfred Spraul <manfred@colorfullife.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Cc: Steven Rostedt <rostedt@goodmis.org>
Link: http://lkml.kernel.org/r/1430494072-30283-3-git-send-email-dave@stgolabs.net
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 1d0dcb3ad9d336e6d6ee020a750a7f8d907e28de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/futex.c
diff --cc kernel/futex.c
index 6def74bb1608,f9984c363e9a..000000000000
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@@ -1512,7 -1502,7 +1511,11 @@@ static int futex_requeue(u32 __user *ua
  	struct futex_pi_state *pi_state = NULL;
  	struct futex_hash_bucket *hb1, *hb2;
  	struct futex_q *this, *next;
++<<<<<<< HEAD
 +	u32 curval2;
++=======
+ 	WAKE_Q(wake_q);
++>>>>>>> 1d0dcb3ad9d3 (futex: Implement lockless wakeups)
  
  	if (requeue_pi) {
  		/*
@@@ -1718,7 -1717,9 +1721,8 @@@ retry_private
  	}
  
  out_unlock:
 -	free_pi_state(pi_state);
  	double_unlock_hb(hb1, hb2);
+ 	wake_up_q(&wake_q);
  	hb_waiters_dec(hb2);
  
  	/*
* Unmerged path kernel/futex.c
