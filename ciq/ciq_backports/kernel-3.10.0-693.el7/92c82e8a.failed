audit: add feature audit_lost reset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Richard Guy Briggs <rgb@redhat.com>
commit 92c82e8a322b32a6cabe7d8800dc10401157a623
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/92c82e8a.failed

Add a method to reset the audit_lost value.

An AUDIT_SET message with the AUDIT_STATUS_LOST flag set by itself
will return a positive value repesenting the current audit_lost value
and reset the counter to zero.  If AUDIT_STATUS_LOST is not the
only flag set, the reset command will be ignored.  The value sent with
the command is ignored.  The return value will be the +ve lost value at
reset time.

An AUDIT_CONFIG_CHANGE message will be queued to the listening audit
daemon.  The message will be a standard CONFIG_CHANGE message with the
fields "lost=0" and "old=" with the latter containing the value of
audit_lost at reset time.

See: https://github.com/linux-audit/audit-kernel/issues/3

	Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
	Acked-by: Steve Grubb <sgrubb@redhat.com>
	Signed-off-by: Paul Moore <paul@paul-moore.com>
(cherry picked from commit 92c82e8a322b32a6cabe7d8800dc10401157a623)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/audit.h
#	kernel/audit.c
diff --cc include/uapi/linux/audit.h
index 28459be2d594,3f24110ae63c..000000000000
--- a/include/uapi/linux/audit.h
+++ b/include/uapi/linux/audit.h
@@@ -321,11 -325,20 +321,27 @@@ enum 
  #define AUDIT_STATUS_PID		0x0004
  #define AUDIT_STATUS_RATE_LIMIT		0x0008
  #define AUDIT_STATUS_BACKLOG_LIMIT	0x0010
++<<<<<<< HEAD
++=======
+ #define AUDIT_STATUS_BACKLOG_WAIT_TIME	0x0020
+ #define AUDIT_STATUS_LOST		0x0040
++>>>>>>> 92c82e8a322b (audit: add feature audit_lost reset)
  
  #define AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT	0x00000001
 -#define AUDIT_FEATURE_BITMAP_BACKLOG_WAIT_TIME	0x00000002
  #define AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH	0x00000004
++<<<<<<< HEAD
 +#define AUDIT_FEATURE_BITMAP_ALL (AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT | \
 +				  AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH)
++=======
+ #define AUDIT_FEATURE_BITMAP_SESSIONID_FILTER	0x00000010
+ #define AUDIT_FEATURE_BITMAP_LOST_RESET		0x00000020
+ 
+ #define AUDIT_FEATURE_BITMAP_ALL (AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT | \
+ 				  AUDIT_FEATURE_BITMAP_BACKLOG_WAIT_TIME | \
+ 				  AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH | \
+ 				  AUDIT_FEATURE_BITMAP_SESSIONID_FILTER | \
+ 				  AUDIT_FEATURE_BITMAP_LOST_RESET)
++>>>>>>> 92c82e8a322b (audit: add feature audit_lost reset)
  
  /* deprecated: AUDIT_VERSION_* */
  #define AUDIT_VERSION_LATEST 		AUDIT_FEATURE_BITMAP_ALL
diff --cc kernel/audit.c
index f8c357ee5f37,25dd70a588b2..000000000000
--- a/kernel/audit.c
+++ b/kernel/audit.c
@@@ -861,8 -1038,26 +861,29 @@@ static int audit_receive_msg(struct sk_
  			if (err < 0)
  				return err;
  		}
 -		if (s.mask & AUDIT_STATUS_BACKLOG_LIMIT) {
 +		if (s.mask & AUDIT_STATUS_BACKLOG_LIMIT)
  			err = audit_set_backlog_limit(s.backlog_limit);
++<<<<<<< HEAD
++=======
+ 			if (err < 0)
+ 				return err;
+ 		}
+ 		if (s.mask & AUDIT_STATUS_BACKLOG_WAIT_TIME) {
+ 			if (sizeof(s) > (size_t)nlh->nlmsg_len)
+ 				return -EINVAL;
+ 			if (s.backlog_wait_time > 10*AUDIT_BACKLOG_WAIT_TIME)
+ 				return -EINVAL;
+ 			err = audit_set_backlog_wait_time(s.backlog_wait_time);
+ 			if (err < 0)
+ 				return err;
+ 		}
+ 		if (s.mask == AUDIT_STATUS_LOST) {
+ 			u32 lost = atomic_xchg(&audit_lost, 0);
+ 
+ 			audit_log_config_change("lost", 0, lost, 1);
+ 			return lost;
+ 		}
++>>>>>>> 92c82e8a322b (audit: add feature audit_lost reset)
  		break;
  	}
  	case AUDIT_GET_FEATURE:
* Unmerged path include/uapi/linux/audit.h
* Unmerged path kernel/audit.c
