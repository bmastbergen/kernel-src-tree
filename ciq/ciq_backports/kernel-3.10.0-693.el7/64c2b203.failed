userfaultfd: shmem: handle coredumping in handle_userfault()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Andrea Arcangeli <aarcange@redhat.com>
commit 64c2b20301f62c697352c8028c569b1b2bdd8e82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/64c2b203.failed

Anon and hugetlbfs handle FOLL_DUMP set by get_dump_page() internally to
__get_user_pages().

shmem as opposed has no special FOLL_DUMP handling there so
handle_mm_fault() is invoked without mmap_sem and ends up calling
handle_userfault() that isn't expecting to be invoked without mmap_sem
held.

This makes handle_userfault() fail immediately if invoked through
shmem_vm_ops->fault during coredumping and solves the problem.

The side effect is a BUG_ON with no lock held triggered by the
coredumping process which exits.  Only 4.11 is affected, pre-4.11 anon
memory holes are skipped in __get_user_pages by checking FOLL_DUMP
explicitly against empty pagetables (mm/gup.c:no_page_table()).

It's zero cost as we already had a check for current->flags to prevent
futex to trigger userfaults during exit (PF_EXITING).

Link: http://lkml.kernel.org/r/20170615214838.27429-1-aarcange@redhat.com
	Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
	Reported-by: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
	Cc: <stable@vger.kernel.org>	[4.11+]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 64c2b20301f62c697352c8028c569b1b2bdd8e82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/userfaultfd.c
diff --cc fs/userfaultfd.c
index 4d12cdb30822,1d622f276e3a..000000000000
--- a/fs/userfaultfd.c
+++ b/fs/userfaultfd.c
@@@ -280,10 -340,29 +280,33 @@@ int handle_userfault(struct vm_area_str
  	bool must_wait, return_to_userland;
  	long blocking_state;
  
- 	BUG_ON(!rwsem_is_locked(&mm->mmap_sem));
- 
  	ret = VM_FAULT_SIGBUS;
++<<<<<<< HEAD
 +	ctx = vma->vm_userfaultfd_ctx.ctx;
++=======
+ 
+ 	/*
+ 	 * We don't do userfault handling for the final child pid update.
+ 	 *
+ 	 * We also don't do userfault handling during
+ 	 * coredumping. hugetlbfs has the special
+ 	 * follow_hugetlb_page() to skip missing pages in the
+ 	 * FOLL_DUMP case, anon memory also checks for FOLL_DUMP with
+ 	 * the no_page_table() helper in follow_page_mask(), but the
+ 	 * shmem_vm_ops->fault method is invoked even during
+ 	 * coredumping without mmap_sem and it ends up here.
+ 	 */
+ 	if (current->flags & (PF_EXITING|PF_DUMPCORE))
+ 		goto out;
+ 
+ 	/*
+ 	 * Coredumping runs without mmap_sem so we can only check that
+ 	 * the mmap_sem is held, if PF_DUMPCORE was not set.
+ 	 */
+ 	WARN_ON_ONCE(!rwsem_is_locked(&mm->mmap_sem));
+ 
+ 	ctx = vmf->vma->vm_userfaultfd_ctx.ctx;
++>>>>>>> 64c2b20301f6 (userfaultfd: shmem: handle coredumping in handle_userfault())
  	if (!ctx)
  		goto out;
  
* Unmerged path fs/userfaultfd.c
