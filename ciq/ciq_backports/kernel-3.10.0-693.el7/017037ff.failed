perf trace: Allow specifying list of syscalls and events in -e/--expr/--event

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 017037ff3d0b11842012878a546fe2df47822259
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/017037ff.failed

Makes it easier to specify both events and syscalls (to be formatter
strace-like), i.e. previously one would have to do:

  # perf trace -e nanosleep --event sched:sched_switch usleep 1

Now it is possible to do:

  # perf trace -e nanosleep,sched:sched_switch usleep 1
     0.000 ( 0.021 ms): usleep/17962 nanosleep(rqtp: 0x7ffdedd61ec0) ...
     0.021 (         ): sched:sched_switch:usleep:17962 [120] S ==> swapper/1:0 [120])
     0.000 ( 0.066 ms): usleep/17962  ... [continued]: nanosleep()) = 0
  #

The old style --expr and using both -e and --event continues to work.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Milian Wolff <milian.wolff@kdab.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-ieg6bakub4657l9e6afn85r4@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 017037ff3d0b11842012878a546fe2df47822259)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-trace.txt
#	tools/perf/builtin-trace.c
diff --cc tools/perf/Documentation/perf-trace.txt
index 3c876d97e172,afd728672b6f..000000000000
--- a/tools/perf/Documentation/perf-trace.txt
+++ b/tools/perf/Documentation/perf-trace.txt
@@@ -122,8 -125,38 +125,43 @@@ the thread executes on the designated C
  --syscalls::
  	Trace system calls. This options is enabled by default.
  
++<<<<<<< HEAD
 +--event::
 +	Trace other events, see 'perf list' for a complete list.
++=======
+ --call-graph [mode,type,min[,limit],order[,key][,branch]]::
+         Setup and enable call-graph (stack chain/backtrace) recording.
+         See `--call-graph` section in perf-record and perf-report
+         man pages for details. The ones that are most useful in 'perf trace'
+         are 'dwarf' and 'lbr', where available, try: 'perf trace --call-graph dwarf'.
+ 
+         Using this will, for the root user, bump the value of --mmap-pages to 4
+         times the maximum for non-root users, based on the kernel.perf_event_mlock_kb
+         sysctl. This is done only if the user doesn't specify a --mmap-pages value.
+ 
+ --kernel-syscall-graph::
+ 	 Show the kernel callchains on the syscall exit path.
+ 
+ --max-stack::
+         Set the stack depth limit when parsing the callchain, anything
+         beyond the specified depth will be ignored. Note that at this point
+         this is just about the presentation part, i.e. the kernel is still
+         not limiting, the overhead of callchains needs to be set via the
+         knobs in --call-graph dwarf.
+ 
+         Implies '--call-graph dwarf' when --call-graph not present on the
+         command line, on systems where DWARF unwinding was built in.
+ 
+         Default: /proc/sys/kernel/perf_event_max_stack when present for
+                  live sessions (without --input/-i), 127 otherwise.
+ 
+ --min-stack::
+         Set the stack depth limit when parsing the callchain, anything
+         below the specified depth will be ignored. Disabled by default.
+ 
+         Implies '--call-graph dwarf' when --call-graph not present on the
+         command line, on systems where DWARF unwinding was built in.
++>>>>>>> 017037ff3d0b (perf trace: Allow specifying list of syscalls and events in -e/--expr/--event)
  
  --proc-map-timeout::
  	When processing pre-existing threads /proc/XXX/mmap, it may take a long time,
diff --cc tools/perf/builtin-trace.c
index 19d1edc51bc9,40ef9b293d1b..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -33,10 -33,14 +33,14 @@@
  #include "util/stat.h"
  #include "trace-event.h"
  #include "util/parse-events.h"
 -#include "util/bpf-loader.h"
 -#include "callchain.h"
 -#include "syscalltbl.h"
 -#include "rb_resort.h"
  
 -#include <libaudit.h> /* FIXME: Still needed for audit_errno_to_name */
 +#include <libaudit.h>
  #include <stdlib.h>
++<<<<<<< HEAD
 +#include <linux/futex.h>
++=======
+ #include <string.h>
++>>>>>>> 017037ff3d0b (perf trace: Allow specifying list of syscalls and events in -e/--expr/--event)
  #include <linux/err.h>
  #include <linux/filter.h>
  #include <linux/audit.h>
@@@ -2623,13 -2812,14 +2712,12 @@@ int cmd_trace(int argc, const char **ar
  		.output = stderr,
  		.show_comm = true,
  		.trace_syscalls = true,
 -		.kernel_syscallchains = false,
 -		.max_stack = UINT_MAX,
  	};
  	const char *output_name = NULL;
- 	const char *ev_qualifier_str = NULL;
  	const struct option trace_options[] = {
- 	OPT_CALLBACK(0, "event", &trace.evlist, "event",
- 		     "event selector. use 'perf list' to list available events",
- 		     parse_events_option),
+ 	OPT_CALLBACK('e', "event", &trace, "event",
+ 		     "event/syscall selector. use 'perf list' to list available events",
+ 		     trace__parse_events_option),
  	OPT_BOOLEAN(0, "comm", &trace.show_comm,
  		    "show the thread COMM next to its id"),
  	OPT_BOOLEAN(0, "tool_stats", &trace.show_tool_stats, "show tool stats"),
@@@ -2714,6 -2949,11 +2803,14 @@@
  		return -1;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (!trace.trace_syscalls && trace.ev_qualifier) {
+ 		pr_err("The -e option can't be used with --no-syscalls.\n");
+ 		goto out;
+ 	}
+ 
++>>>>>>> 017037ff3d0b (perf trace: Allow specifying list of syscalls and events in -e/--expr/--event)
  	if (output_name != NULL) {
  		err = trace__open_output(&trace, output_name);
  		if (err < 0) {
@@@ -2722,27 -2962,7 +2819,31 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	if (ev_qualifier_str != NULL) {
 +		const char *s = ev_qualifier_str;
 +		struct strlist_config slist_config = {
 +			.dirname = system_path(STRACE_GROUPS_DIR),
 +		};
 +
 +		trace.not_ev_qualifier = *s == '!';
 +		if (trace.not_ev_qualifier)
 +			++s;
 +		trace.ev_qualifier = strlist__new(s, &slist_config);
 +		if (trace.ev_qualifier == NULL) {
 +			fputs("Not enough memory to parse event qualifier",
 +			      trace.output);
 +			err = -ENOMEM;
 +			goto out_close;
 +		}
 +
 +		err = trace__validate_ev_qualifier(&trace);
 +		if (err)
 +			goto out_close;
 +	}
++=======
+ 	trace.open_id = syscalltbl__id(trace.sctbl, "open");
++>>>>>>> 017037ff3d0b (perf trace: Allow specifying list of syscalls and events in -e/--expr/--event)
  
  	err = target__validate(&trace.opts.target);
  	if (err) {
* Unmerged path tools/perf/Documentation/perf-trace.txt
* Unmerged path tools/perf/builtin-trace.c
