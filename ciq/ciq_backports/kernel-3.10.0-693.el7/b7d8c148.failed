tools/power turbostat: add --out option for saving output in a file

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: add --out option for saving output in a file (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 95.31%
commit-author Len Brown <len.brown@intel.com>
commit b7d8c1483bbf6ec9d2dd76d6a1c91a38c3f6ac35
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b7d8c148.failed

By default...

Turbostat --debug gconfiguration info goes to stderr.

In FORK mode, turbostat statistics go to stderr.

In PERIODIC mode, turbostat statistics go to stdout.

These defaults do not change, but an option "--out file"
will send all output above only to the specified file.

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit b7d8c1483bbf6ec9d2dd76d6a1c91a38c3f6ac35)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.8
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.8
index a7cc18d34bc1,89a55d5e32f3..000000000000
--- a/tools/power/x86/turbostat/turbostat.8
+++ b/tools/power/x86/turbostat/turbostat.8
@@@ -83,10 -86,27 +86,32 @@@ Note that multiple CPUs per core indica
  \fBRAM_%\fP percent of the interval that RAPL throttling was active on DRAM.
  .fi
  .PP
- .SH EXAMPLE
+ .SH PERIODIC EXAMPLE
  Without any parameters, turbostat displays statistics ever 5 seconds.
++<<<<<<< HEAD
 +(override interval with "-i sec" option, or specify a command
 +for turbostat to fork).
++=======
+ Periodic output goes to stdout, by default, unless --out is used to specify an output file.
+ The 5-second interval can be changed with th "-i sec" option.
+ Or a command may be specified as in "FORK EXAMPLE" below.
+ .nf
+ [root@hsw]# ./turbostat
+      CPU Avg_MHz   Busy% Bzy_MHz TSC_MHz
+        -     488   12.51    3898    3498
+        0       0    0.01    3885    3498
+        4    3897   99.99    3898    3498
+        1       0    0.00    3861    3498
+        5       0    0.00    3882    3498
+        2       1    0.02    3894    3498
+        6       2    0.06    3898    3498
+        3       0    0.00    3849    3498
+        7       0    0.00    3877    3498
+ 
+ .fi
+ .SH DEBUG EXAMPLE
+ The "--debug" option prints additional system information before measurements:
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  
  The first row of statistics is a summary for the entire system.
  For residency % columns, the summary is a weighted average.
diff --cc tools/power/x86/turbostat/turbostat.c
index b938c3391c64,5f9f41a3bf91..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -1327,9 -1347,9 +1338,9 @@@ dump_knl_turbo_ratio_limits(void
  	unsigned int cores[buckets_no];
  	unsigned int ratio[buckets_no];
  
 -	get_msr(base_cpu, MSR_NHM_TURBO_RATIO_LIMIT, &msr);
 +	get_msr(0, MSR_NHM_TURBO_RATIO_LIMIT, &msr);
  
- 	fprintf(stderr, "cpu%d: MSR_TURBO_RATIO_LIMIT: 0x%08llx\n",
+ 	fprintf(outf, "cpu%d: MSR_TURBO_RATIO_LIMIT: 0x%08llx\n",
  		base_cpu, msr);
  
  	/**
@@@ -2044,10 -2054,101 +2055,104 @@@ int print_epb(struct thread_data *t, st
  		epb_string = "custom";
  		break;
  	}
- 	fprintf(stderr, "cpu%d: MSR_IA32_ENERGY_PERF_BIAS: 0x%08llx (%s)\n", cpu, msr, epb_string);
+ 	fprintf(outf, "cpu%d: MSR_IA32_ENERGY_PERF_BIAS: 0x%08llx (%s)\n", cpu, msr, epb_string);
+ 
+ 	return 0;
+ }
++<<<<<<< HEAD
++=======
+ /*
+  * print_hwp()
+  * Decode the MSR_HWP_CAPABILITIES
+  */
+ int print_hwp(struct thread_data *t, struct core_data *c, struct pkg_data *p)
+ {
+ 	unsigned long long msr;
+ 	int cpu;
+ 
+ 	if (!has_hwp)
+ 		return 0;
+ 
+ 	cpu = t->cpu_id;
+ 
+ 	/* MSR_HWP_CAPABILITIES is per-package */
+ 	if (!(t->flags & CPU_IS_FIRST_THREAD_IN_CORE) || !(t->flags & CPU_IS_FIRST_CORE_IN_PACKAGE))
+ 		return 0;
+ 
+ 	if (cpu_migrate(cpu)) {
+ 		fprintf(outf, "Could not migrate to CPU %d\n", cpu);
+ 		return -1;
+ 	}
+ 
+ 	if (get_msr(cpu, MSR_PM_ENABLE, &msr))
+ 		return 0;
+ 
+ 	fprintf(outf, "cpu%d: MSR_PM_ENABLE: 0x%08llx (%sHWP)\n",
+ 		cpu, msr, (msr & (1 << 0)) ? "" : "No-");
+ 
+ 	/* MSR_PM_ENABLE[1] == 1 if HWP is enabled and MSRs visible */
+ 	if ((msr & (1 << 0)) == 0)
+ 		return 0;
+ 
+ 	if (get_msr(cpu, MSR_HWP_CAPABILITIES, &msr))
+ 		return 0;
+ 
+ 	fprintf(outf, "cpu%d: MSR_HWP_CAPABILITIES: 0x%08llx "
+ 			"(high 0x%x guar 0x%x eff 0x%x low 0x%x)\n",
+ 			cpu, msr,
+ 			(unsigned int)HWP_HIGHEST_PERF(msr),
+ 			(unsigned int)HWP_GUARANTEED_PERF(msr),
+ 			(unsigned int)HWP_MOSTEFFICIENT_PERF(msr),
+ 			(unsigned int)HWP_LOWEST_PERF(msr));
+ 
+ 	if (get_msr(cpu, MSR_HWP_REQUEST, &msr))
+ 		return 0;
+ 
+ 	fprintf(outf, "cpu%d: MSR_HWP_REQUEST: 0x%08llx "
+ 			"(min 0x%x max 0x%x des 0x%x epp 0x%x window 0x%x pkg 0x%x)\n",
+ 			cpu, msr,
+ 			(unsigned int)(((msr) >> 0) & 0xff),
+ 			(unsigned int)(((msr) >> 8) & 0xff),
+ 			(unsigned int)(((msr) >> 16) & 0xff),
+ 			(unsigned int)(((msr) >> 24) & 0xff),
+ 			(unsigned int)(((msr) >> 32) & 0xff3),
+ 			(unsigned int)(((msr) >> 42) & 0x1));
+ 
+ 	if (has_hwp_pkg) {
+ 		if (get_msr(cpu, MSR_HWP_REQUEST_PKG, &msr))
+ 			return 0;
+ 
+ 		fprintf(outf, "cpu%d: MSR_HWP_REQUEST_PKG: 0x%08llx "
+ 			"(min 0x%x max 0x%x des 0x%x epp 0x%x window 0x%x)\n",
+ 			cpu, msr,
+ 			(unsigned int)(((msr) >> 0) & 0xff),
+ 			(unsigned int)(((msr) >> 8) & 0xff),
+ 			(unsigned int)(((msr) >> 16) & 0xff),
+ 			(unsigned int)(((msr) >> 24) & 0xff),
+ 			(unsigned int)(((msr) >> 32) & 0xff3));
+ 	}
+ 	if (has_hwp_notify) {
+ 		if (get_msr(cpu, MSR_HWP_INTERRUPT, &msr))
+ 			return 0;
+ 
+ 		fprintf(outf, "cpu%d: MSR_HWP_INTERRUPT: 0x%08llx "
+ 			"(%s_Guaranteed_Perf_Change, %s_Excursion_Min)\n",
+ 			cpu, msr,
+ 			((msr) & 0x1) ? "EN" : "Dis",
+ 			((msr) & 0x2) ? "EN" : "Dis");
+ 	}
+ 	if (get_msr(cpu, MSR_HWP_STATUS, &msr))
+ 		return 0;
+ 
+ 	fprintf(outf, "cpu%d: MSR_HWP_STATUS: 0x%08llx "
+ 			"(%sGuaranteed_Perf_Change, %sExcursion_Min)\n",
+ 			cpu, msr,
+ 			((msr) & 0x1) ? "" : "No-",
+ 			((msr) & 0x2) ? "" : "No-");
  
  	return 0;
  }
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  
  /*
   * print_perf_limit()
@@@ -2451,14 -2543,15 +2556,14 @@@ int print_rapl(struct thread_data *t, s
  			if (get_msr(cpu, MSR_PP0_POLICY, &msr))
  				return -7;
  
- 			fprintf(stderr, "cpu%d: MSR_PP0_POLICY: %lld\n", cpu, msr & 0xF);
+ 			fprintf(outf, "cpu%d: MSR_PP0_POLICY: %lld\n", cpu, msr & 0xF);
  		}
  	}
 -	if (do_rapl & RAPL_CORES) {
 +	if (do_rapl & RAPL_CORES_POWER_LIMIT) {
  		if (debug) {
 -
  			if (get_msr(cpu, MSR_PP0_POWER_LIMIT, &msr))
  				return -9;
- 			fprintf(stderr, "cpu%d: MSR_PP0_POWER_LIMIT: 0x%08llx (%slocked)\n",
+ 			fprintf(outf, "cpu%d: MSR_PP0_POWER_LIMIT: 0x%08llx (%slocked)\n",
  					cpu, msr, (msr >> 31) & 1 ? "": "UN");
  			print_power_limit_msr(cpu, msr, "Cores Limit");
  		}
@@@ -2710,9 -2794,30 +2815,33 @@@ void decode_misc_enable_msr(void
  			msr & (1 << 18) ? "MONITOR" : "");
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Decode MSR_MISC_PWR_MGMT
+  *
+  * Decode the bits according to the Nehalem documentation
+  * bit[0] seems to continue to have same meaning going forward
+  * bit[1] less so...
+  */
+ void decode_misc_pwr_mgmt_msr(void)
+ {
+ 	unsigned long long msr;
+ 
+ 	if (!do_nhm_platform_info)
+ 		return;
+ 
+ 	if (!get_msr(base_cpu, MSR_MISC_PWR_MGMT, &msr))
+ 		fprintf(outf, "cpu%d: MSR_MISC_PWR_MGMT: 0x%08llx (%sable-EIST_Coordination %sable-EPB)\n",
+ 			base_cpu, msr,
+ 			msr & (1 << 0) ? "DIS" : "EN",
+ 			msr & (1 << 1) ? "EN" : "DIS");
+ }
+ 
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  void process_cpuid()
  {
 -	unsigned int eax, ebx, ecx, edx, max_level, max_extended_level;
 +	unsigned int eax, ebx, ecx, edx, max_level;
  	unsigned int fms, family, model, stepping;
  
  	eax = ebx = ecx = edx = 0;
@@@ -2780,11 -2885,22 +2909,25 @@@
  	has_epb = ecx & (1 << 3);
  
  	if (debug)
++<<<<<<< HEAD
 +		fprintf(stderr, "CPUID(6): %sAPERF, %sDTS, %sPTM, %sEPB\n",
 +			has_aperf ? "" : "No ",
 +			do_dts ? "" : "No ",
 +			do_ptm ? "" : "No ",
 +			has_epb ? "" : "No ");
++=======
+ 		fprintf(outf, "CPUID(6): %sAPERF, %sDTS, %sPTM, %sHWP, "
+ 			"%sHWPnotify, %sHWPwindow, %sHWPepp, %sHWPpkg, %sEPB\n",
+ 			has_aperf ? "" : "No-",
+ 			do_dts ? "" : "No-",
+ 			do_ptm ? "" : "No-",
+ 			has_hwp ? "" : "No-",
+ 			has_hwp_notify ? "" : "No-",
+ 			has_hwp_activity_window ? "" : "No-",
+ 			has_hwp_epp ? "" : "No-",
+ 			has_hwp_pkg ? "" : "No-",
+ 			has_epb ? "" : "No-");
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  
  	if (debug)
  		decode_misc_enable_msr();
@@@ -2832,6 -2939,19 +2975,22 @@@
  			}
  		}
  	}
++<<<<<<< HEAD
++=======
+ 	if (max_level >= 0x16) {
+ 		unsigned int base_mhz, max_mhz, bus_mhz, edx;
+ 
+ 		/*
+ 		 * CPUID 16H Base MHz, Max MHz, Bus MHz
+ 		 */
+ 		base_mhz = max_mhz = bus_mhz = edx = 0;
+ 
+ 		__get_cpuid(0x16, &base_mhz, &max_mhz, &bus_mhz, &edx);
+ 		if (debug)
+ 			fprintf(outf, "CPUID(0x16): base_mhz: %d max_mhz: %d bus_mhz: %d\n",
+ 				base_mhz, max_mhz, bus_mhz);
+ 	}
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  
  	if (has_aperf)
  		aperf_mperf_multiplier = get_aperf_mperf_multiplier(family, model);
@@@ -3184,7 -3312,7 +3345,11 @@@ int get_and_dump_counters(void
  }
  
  void print_version() {
++<<<<<<< HEAD
 +	fprintf(stderr, "turbostat version 4.12 5 Apr 2016"
++=======
+ 	fprintf(outf, "turbostat version 4.10 10 Dec, 2015"
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  		" - Len Brown <lenb@kernel.org>\n");
  }
  
@@@ -3213,7 -3341,7 +3379,11 @@@ void cmdline(int argc, char **argv
  
  	progname = argv[0];
  
++<<<<<<< HEAD
 +	while ((opt = getopt_long_only(argc, argv, "+C:c:Ddvhi:JM:m:PpST:V",
++=======
+ 	while ((opt = getopt_long_only(argc, argv, "+C:c:Ddhi:JM:m:o:PpST:v",
++>>>>>>> b7d8c1483bbf (tools/power turbostat: add --out option for saving output in a file)
  				long_options, &option_index)) != -1) {
  		switch (opt) {
  		case 'C':
* Unmerged path tools/power/x86/turbostat/turbostat.8
* Unmerged path tools/power/x86/turbostat/turbostat.c
