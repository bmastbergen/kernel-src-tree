net_sched: act: fetch hinfo from a->ops->hinfo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: act: fetch hinfo from a->ops->hinfo (Ivan Vecera) [1428588]
Rebuild_FUZZ: 95.45%
commit-author WANG Cong <xiyou.wangcong@gmail.com>
commit c779f7af99f73abb7270dcaa4c29178ab5ef7472
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c779f7af.failed

Every action ops has a pointer to hash info, so we don't need to
hard-code it in each module.

	Cc: Jamal Hadi Salim <jhs@mojatatu.com>
	Cc: David S. Miller <davem@davemloft.net>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c779f7af99f73abb7270dcaa4c29178ab5ef7472)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/act_api.h
#	net/sched/act_api.c
#	net/sched/act_csum.c
#	net/sched/act_gact.c
#	net/sched/act_ipt.c
#	net/sched/act_mirred.c
#	net/sched/act_nat.c
#	net/sched/act_pedit.c
#	net/sched/act_police.c
#	net/sched/act_simple.c
#	net/sched/act_skbedit.c
diff --cc include/net/act_api.h
index 11aac9abd0ca,152316b3f59a..000000000000
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@@ -81,13 -101,12 +81,17 @@@ struct tcf_common *tcf_hash_lookup(u32 
  void tcf_hash_destroy(struct tcf_common *p, struct tcf_hashinfo *hinfo);
  int tcf_hash_release(struct tcf_common *p, int bind,
  		     struct tcf_hashinfo *hinfo);
 -u32 tcf_hash_new_index(struct tcf_hashinfo *hinfo);
 +u32 tcf_hash_new_index(u32 *idx_gen, struct tcf_hashinfo *hinfo);
  struct tcf_common *tcf_hash_check(u32 index, struct tc_action *a,
- 				  int bind, struct tcf_hashinfo *hinfo);
+ 				  int bind);
  struct tcf_common *tcf_hash_create(u32 index, struct nlattr *est,
  				   struct tc_action *a, int size,
++<<<<<<< HEAD
 +				   int bind, u32 *idx_gen,
 +				   struct tcf_hashinfo *hinfo);
++=======
+ 				   int bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  void tcf_hash_insert(struct tcf_common *p, struct tcf_hashinfo *hinfo);
  
  int tcf_register_action(struct tc_action_ops *a);
diff --cc net/sched/act_api.c
index 34e255487d7a,b94825322d4d..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -71,8 -62,10 +71,13 @@@ int tcf_hash_release(struct tcf_common 
  EXPORT_SYMBOL(tcf_hash_release);
  
  static int tcf_dump_walker(struct sk_buff *skb, struct netlink_callback *cb,
- 			   struct tc_action *a, struct tcf_hashinfo *hinfo)
+ 			   struct tc_action *a)
  {
++<<<<<<< HEAD
++=======
+ 	struct tcf_hashinfo *hinfo = a->ops->hinfo;
+ 	struct hlist_head *head;
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  	struct tcf_common *p;
  	int err = 0, index = -1, i = 0, s_i = 0, n_i = 0;
  	struct nlattr *nest;
@@@ -117,10 -110,12 +122,16 @@@ nla_put_failure
  	goto done;
  }
  
- static int tcf_del_walker(struct sk_buff *skb, struct tc_action *a,
- 			  struct tcf_hashinfo *hinfo)
+ static int tcf_del_walker(struct sk_buff *skb, struct tc_action *a)
  {
++<<<<<<< HEAD
 +	struct tcf_common *p, *s_p;
++=======
+ 	struct tcf_hashinfo *hinfo = a->ops->hinfo;
+ 	struct hlist_head *head;
+ 	struct hlist_node *n;
+ 	struct tcf_common *p;
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  	struct nlattr *nest;
  	int i = 0, n_i = 0;
  
@@@ -222,9 -213,9 +231,14 @@@ struct tcf_common *tcf_hash_check(u32 i
  EXPORT_SYMBOL(tcf_hash_check);
  
  struct tcf_common *tcf_hash_create(u32 index, struct nlattr *est,
++<<<<<<< HEAD
 +				   struct tc_action *a, int size, int bind,
 +				   u32 *idx_gen, struct tcf_hashinfo *hinfo)
++=======
+ 				   struct tc_action *a, int size, int bind)
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  {
+ 	struct tcf_hashinfo *hinfo = a->ops->hinfo;
  	struct tcf_common *p = kzalloc(size, GFP_KERNEL);
  
  	if (unlikely(!p))
diff --cc net/sched/act_csum.c
index 11fe1a416433,2210187c45c2..000000000000
--- a/net/sched/act_csum.c
+++ b/net/sched/act_csum.c
@@@ -71,10 -63,9 +71,14 @@@ static int tcf_csum_init(struct net *n
  		return -EINVAL;
  	parm = nla_data(tb[TCA_CSUM_PARMS]);
  
- 	pc = tcf_hash_check(parm->index, a, bind, &csum_hash_info);
+ 	pc = tcf_hash_check(parm->index, a, bind);
  	if (!pc) {
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*p), bind,
 +				     &csum_idx_gen, &csum_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*p), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  		ret = ACT_P_CREATED;
diff --cc net/sched/act_gact.c
index eb9ba60ebab4,a0eed30d5811..000000000000
--- a/net/sched/act_gact.c
+++ b/net/sched/act_gact.c
@@@ -94,10 -86,9 +94,14 @@@ static int tcf_gact_init(struct net *ne
  	}
  #endif
  
- 	pc = tcf_hash_check(parm->index, a, bind, &gact_hash_info);
+ 	pc = tcf_hash_check(parm->index, a, bind);
  	if (!pc) {
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*gact),
 +				     bind, &gact_idx_gen, &gact_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*gact), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  		ret = ACT_P_CREATED;
diff --cc net/sched/act_ipt.c
index 90a973aacc76,0a6d62174027..000000000000
--- a/net/sched/act_ipt.c
+++ b/net/sched/act_ipt.c
@@@ -134,10 -125,9 +134,14 @@@ static int tcf_ipt_init(struct net *net
  	if (tb[TCA_IPT_INDEX] != NULL)
  		index = nla_get_u32(tb[TCA_IPT_INDEX]);
  
- 	pc = tcf_hash_check(index, a, bind, &ipt_hash_info);
+ 	pc = tcf_hash_check(index, a, bind);
  	if (!pc) {
++<<<<<<< HEAD
 +		pc = tcf_hash_create(index, est, a, sizeof(*ipt), bind,
 +				     &ipt_idx_gen, &ipt_hash_info);
++=======
+ 		pc = tcf_hash_create(index, est, a, sizeof(*ipt), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  		ret = ACT_P_CREATED;
diff --cc net/sched/act_mirred.c
index 3ff85aed0e67,0b2c6d39d396..000000000000
--- a/net/sched/act_mirred.c
+++ b/net/sched/act_mirred.c
@@@ -113,8 -105,7 +113,12 @@@ static int tcf_mirred_init(struct net *
  	if (!pc) {
  		if (dev == NULL)
  			return -EINVAL;
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*m), bind,
 +				     &mirred_idx_gen, &mirred_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*m), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  		ret = ACT_P_CREATED;
diff --cc net/sched/act_nat.c
index 76869538d028,81f0404bb335..000000000000
--- a/net/sched/act_nat.c
+++ b/net/sched/act_nat.c
@@@ -64,10 -57,9 +64,14 @@@ static int tcf_nat_init(struct net *net
  		return -EINVAL;
  	parm = nla_data(tb[TCA_NAT_PARMS]);
  
- 	pc = tcf_hash_check(parm->index, a, bind, &nat_hash_info);
+ 	pc = tcf_hash_check(parm->index, a, bind);
  	if (!pc) {
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*p), bind,
 +				     &nat_idx_gen, &nat_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*p), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  		ret = ACT_P_CREATED;
diff --cc net/sched/act_pedit.c
index 7aa2dcd989f8,be3f0f6875bb..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -68,8 -61,7 +68,12 @@@ static int tcf_pedit_init(struct net *n
  	if (!pc) {
  		if (!parm->nkeys)
  			return -EINVAL;
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*p), bind,
 +				     &pedit_idx_gen, &pedit_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*p), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  		p = to_pedit(pc);
diff --cc net/sched/act_police.c
index 376c02554325,c7093896cf14..000000000000
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@@ -67,18 -59,20 +67,31 @@@ struct tc_police_compat 
  static int tcf_act_police_walker(struct sk_buff *skb, struct netlink_callback *cb,
  			      int type, struct tc_action *a)
  {
++<<<<<<< HEAD
++=======
+ 	struct tcf_hashinfo *hinfo = a->ops->hinfo;
+ 	struct hlist_head *head;
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  	struct tcf_common *p;
  	int err = 0, index = -1, i = 0, s_i = 0, n_i = 0;
  	struct nlattr *nest;
  
++<<<<<<< HEAD
 +	read_lock_bh(&police_lock);
++=======
+ 	spin_lock_bh(&hinfo->lock);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  
  	s_i = cb->args[0];
  
  	for (i = 0; i < (POL_TAB_MASK + 1); i++) {
++<<<<<<< HEAD
 +		p = tcf_police_ht[tcf_hash(i, POL_TAB_MASK)];
++=======
+ 		head = &hinfo->htab[tcf_hash(i, POL_TAB_MASK)];
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  
 -		hlist_for_each_entry_rcu(p, head, tcfc_head) {
 +		for (; p; p = p->tcfc_next) {
  			index++;
  			if (index < s_i)
  				continue;
@@@ -101,7 -95,7 +114,11 @@@
  		}
  	}
  done:
++<<<<<<< HEAD
 +	read_unlock_bh(&police_lock);
++=======
+ 	spin_unlock_bh(&hinfo->lock);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  	if (n_i)
  		cb->args[0] += n_i;
  	return n_i;
@@@ -264,14 -236,13 +282,22 @@@ override
  	if (ret != ACT_P_CREATED)
  		return ret;
  
 -	police->tcfp_t_c = ktime_to_ns(ktime_get());
 +	police->tcfp_t_c = ktime_get_ns();
  	police->tcf_index = parm->index ? parm->index :
++<<<<<<< HEAD
 +		tcf_hash_new_index(&police_idx_gen, &police_hash_info);
 +	h = tcf_hash(police->tcf_index, POL_TAB_MASK);
 +	write_lock_bh(&police_lock);
 +	police->tcf_next = tcf_police_ht[h];
 +	tcf_police_ht[h] = &police->common;
 +	write_unlock_bh(&police_lock);
++=======
+ 		tcf_hash_new_index(a->ops->hinfo);
+ 	h = tcf_hash(police->tcf_index, POL_TAB_MASK);
+ 	spin_lock_bh(&hinfo->lock);
+ 	hlist_add_head(&police->tcf_head, &hinfo->htab[h]);
+ 	spin_unlock_bh(&hinfo->lock);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  
  	a->priv = police;
  	return ret;
diff --cc net/sched/act_simple.c
index f7b45ab85388,8ef2f1fcbfba..000000000000
--- a/net/sched/act_simple.c
+++ b/net/sched/act_simple.c
@@@ -122,10 -114,9 +122,14 @@@ static int tcf_simp_init(struct net *ne
  	parm = nla_data(tb[TCA_DEF_PARMS]);
  	defdata = nla_data(tb[TCA_DEF_DATA]);
  
- 	pc = tcf_hash_check(parm->index, a, bind, &simp_hash_info);
+ 	pc = tcf_hash_check(parm->index, a, bind);
  	if (!pc) {
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*d), bind,
 +				     &simp_idx_gen, &simp_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*d), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  
diff --cc net/sched/act_skbedit.c
index 8fe9d25c3008,98725080b5aa..000000000000
--- a/net/sched/act_skbedit.c
+++ b/net/sched/act_skbedit.c
@@@ -109,10 -100,9 +109,14 @@@ static int tcf_skbedit_init(struct net 
  
  	parm = nla_data(tb[TCA_SKBEDIT_PARMS]);
  
- 	pc = tcf_hash_check(parm->index, a, bind, &skbedit_hash_info);
+ 	pc = tcf_hash_check(parm->index, a, bind);
  	if (!pc) {
++<<<<<<< HEAD
 +		pc = tcf_hash_create(parm->index, est, a, sizeof(*d), bind,
 +				     &skbedit_idx_gen, &skbedit_hash_info);
++=======
+ 		pc = tcf_hash_create(parm->index, est, a, sizeof(*d), bind);
++>>>>>>> c779f7af99f7 (net_sched: act: fetch hinfo from a->ops->hinfo)
  		if (IS_ERR(pc))
  			return PTR_ERR(pc);
  
* Unmerged path include/net/act_api.h
* Unmerged path net/sched/act_api.c
* Unmerged path net/sched/act_csum.c
* Unmerged path net/sched/act_gact.c
* Unmerged path net/sched/act_ipt.c
* Unmerged path net/sched/act_mirred.c
* Unmerged path net/sched/act_nat.c
* Unmerged path net/sched/act_pedit.c
* Unmerged path net/sched/act_police.c
* Unmerged path net/sched/act_simple.c
* Unmerged path net/sched/act_skbedit.c
