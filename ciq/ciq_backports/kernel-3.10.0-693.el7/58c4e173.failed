btrfs: scrub: use GFP_KERNEL on the submission path

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author David Sterba <dsterba@suse.com>
commit 58c4e173847af8e63537e11be6c1c3fd4b6153fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/58c4e173.failed

Scrub is not on the critical writeback path we don't need to use
GFP_NOFS for all allocations. The failures are handled and stats passed
back to userspace.

Let's use GFP_KERNEL on the paths where everything is ok, ie. setup the
global structures and the IO submission paths.

Functions that do the repair and fixups still use GFP_NOFS as we might
want to skip any other filesystem activity if we encounter an error.
This could turn out to be unnecessary, but requires more review compared
to the easy cases in this patch.

	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit 58c4e173847af8e63537e11be6c1c3fd4b6153fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/scrub.c
diff --cc fs/btrfs/scrub.c
index 28af6aa8a6c2,2de7817d0e1b..000000000000
--- a/fs/btrfs/scrub.c
+++ b/fs/btrfs/scrub.c
@@@ -459,22 -459,9 +459,26 @@@ struct scrub_ctx *scrub_setup_ctx(struc
  	struct scrub_ctx *sctx;
  	int		i;
  	struct btrfs_fs_info *fs_info = dev->dev_root->fs_info;
 +	int pages_per_rd_bio;
  	int ret;
  
++<<<<<<< HEAD
 +	/*
 +	 * the setting of pages_per_rd_bio is correct for scrub but might
 +	 * be wrong for the dev_replace code where we might read from
 +	 * different devices in the initial huge bios. However, that
 +	 * code is able to correctly handle the case when adding a page
 +	 * to a bio fails.
 +	 */
 +	if (dev->bdev)
 +		pages_per_rd_bio = min_t(int, SCRUB_PAGES_PER_RD_BIO,
 +					 bio_get_nr_vecs(dev->bdev));
 +	else
 +		pages_per_rd_bio = SCRUB_PAGES_PER_RD_BIO;
 +	sctx = kzalloc(sizeof(*sctx), GFP_NOFS);
++=======
+ 	sctx = kzalloc(sizeof(*sctx), GFP_KERNEL);
++>>>>>>> 58c4e173847a (btrfs: scrub: use GFP_KERNEL on the submission path)
  	if (!sctx)
  		goto nomem;
  	atomic_set(&sctx->refs, 1);
diff --git a/fs/btrfs/dev-replace.c b/fs/btrfs/dev-replace.c
index b48913491d57..bc964ef2d024 100644
--- a/fs/btrfs/dev-replace.c
+++ b/fs/btrfs/dev-replace.c
@@ -802,7 +802,7 @@ static int btrfs_dev_replace_kthread(void *data)
 	struct btrfs_ioctl_dev_replace_args *status_args;
 	u64 progress;
 
-	status_args = kzalloc(sizeof(*status_args), GFP_NOFS);
+	status_args = kzalloc(sizeof(*status_args), GFP_KERNEL);
 	if (status_args) {
 		btrfs_dev_replace_status(fs_info, status_args);
 		progress = status_args->status.progress_1000;
* Unmerged path fs/btrfs/scrub.c
