drm/vmwgfx: Work around drm removal of control nodes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Thomas Hellstrom <thellstrom@vmware.com>
commit 31788ca803a0c89078f9e604e64286fbd9077926
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/31788ca8.failed

vmware tools has a daemon that gets layout information from the GUI and
forwards it to DRM so that the modesetting code can set preferred connector
locations and modes. This daemon was using control nodes but since control
nodes were just removed, make it possible for the daemon to use render- or
primary nodes instead. This is a bit ugly but will allow drm to proceed with
removal of the mostly unused control-node code and allow vmware to proceed
with fixing up automatic layout settings for gnome-shell/wayland.

We bump minor to inform user-space about the api change.

	Cc: <stable@vger.kernel.org>
	Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
	Reviewed-by: Sinclair Yeh <syeh@vmware.com>
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Link: http://patchwork.freedesktop.org/patch/msgid/20170221104227.2854-1-thellstrom@vmware.com
(cherry picked from commit 31788ca803a0c89078f9e604e64286fbd9077926)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/vmwgfx/vmwgfx_drv.h
diff --cc drivers/gpu/drm/vmwgfx/vmwgfx_drv.h
index cab0c54b46ae,59ff4197173a..000000000000
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.h
@@@ -40,9 -41,9 +40,13 @@@
  #include <drm/ttm/ttm_module.h>
  #include "vmwgfx_fence.h"
  
- #define VMWGFX_DRIVER_DATE "20160210"
+ #define VMWGFX_DRIVER_DATE "20170221"
  #define VMWGFX_DRIVER_MAJOR 2
++<<<<<<< HEAD
 +#define VMWGFX_DRIVER_MINOR 10
++=======
+ #define VMWGFX_DRIVER_MINOR 12
++>>>>>>> 31788ca803a0 (drm/vmwgfx: Work around drm removal of control nodes)
  #define VMWGFX_DRIVER_PATCHLEVEL 0
  #define VMWGFX_FILE_PAGE_OFFSET 0x00100000
  #define VMWGFX_FIFO_STATIC_SIZE (1024*1024)
diff --git a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
index 2a505464c50f..d0e63f0927c4 100644
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
@@ -193,9 +193,14 @@ static const struct drm_ioctl_desc vmw_ioctls[] = {
 	VMW_IOCTL_DEF(VMW_PRESENT_READBACK,
 		      vmw_present_readback_ioctl,
 		      DRM_MASTER | DRM_AUTH),
+	/*
+	 * The permissions of the below ioctl are overridden in
+	 * vmw_generic_ioctl(). We require either
+	 * DRM_MASTER or capable(CAP_SYS_ADMIN).
+	 */
 	VMW_IOCTL_DEF(VMW_UPDATE_LAYOUT,
 		      vmw_kms_update_layout_ioctl,
-		      DRM_MASTER | DRM_CONTROL_ALLOW),
+		      DRM_RENDER_ALLOW),
 	VMW_IOCTL_DEF(VMW_CREATE_SHADER,
 		      vmw_shader_define_ioctl,
 		      DRM_AUTH | DRM_RENDER_ALLOW),
@@ -1109,6 +1114,10 @@ static long vmw_generic_ioctl(struct file *filp, unsigned int cmd,
 
 			return (long) vmw_execbuf_ioctl(dev, arg, file_priv,
 							_IOC_SIZE(cmd));
+		} else if (nr == DRM_COMMAND_BASE + DRM_VMW_UPDATE_LAYOUT) {
+			if (!drm_is_current_master(file_priv) &&
+			    !capable(CAP_SYS_ADMIN))
+				return -EACCES;
 		}
 
 		if (unlikely(ioctl->cmd != cmd))
* Unmerged path drivers/gpu/drm/vmwgfx/vmwgfx_drv.h
