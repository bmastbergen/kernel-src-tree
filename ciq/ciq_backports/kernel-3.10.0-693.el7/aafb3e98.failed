netdev: introduce new NETIF_F_HW_SWITCH_OFFLOAD feature flag for switch device offloads

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Roopa Prabhu <roopa@cumulusnetworks.com>
commit aafb3e98b27977148c8c86499684f8f5c3decfbb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/aafb3e98.failed

This is a high level feature flag for all switch asic offloads

switch drivers set this flag on switch ports. Logical devices like
bridge, bonds, vxlans can inherit this flag from their slaves/ports.

The patch also adds the flag to NETIF_F_ONE_FOR_ALL, so that it gets
propagated to the upperdevices (bridges and bonds).

	Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit aafb3e98b27977148c8c86499684f8f5c3decfbb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdev_features.h
diff --cc include/linux/netdev_features.h
index 733a4fde7215,7d59dc6ab789..000000000000
--- a/include/linux/netdev_features.h
+++ b/include/linux/netdev_features.h
@@@ -62,36 -64,9 +62,40 @@@ enum 
  	NETIF_F_HW_VLAN_STAG_TX_BIT,	/* Transmit VLAN STAG HW acceleration */
  	NETIF_F_HW_VLAN_STAG_RX_BIT,	/* Receive VLAN STAG HW acceleration */
  	NETIF_F_HW_VLAN_STAG_FILTER_BIT,/* Receive filtering on VLAN STAGs */
 -	NETIF_F_HW_L2FW_DOFFLOAD_BIT,	/* Allow L2 Forwarding in Hardware */
  	NETIF_F_BUSY_POLL_BIT,		/* Busy poll */
++<<<<<<< HEAD
 +	NETIF_F_GSO_GRE_CSUM_BIT,	/* ... GRE with csum with TSO */
 +	NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT,/* ... UDP TUNNEL with TSO & CSUM */
 +	NETIF_F_GSO_TUNNEL_REMCSUM_BIT, /* ... TUNNEL with TSO & REMCSUM */
 +	NETIF_F_GSO_SCTP_BIT,		/* ... SCTP fragmentation */
 +
 +	/*
 +	 * RHEL only: Make sure to leave space to allow adding new GSO bits
 +	 * to this second arena of GSO bits so as not having to add another,
 +	 * third, GSO arena. Please add new GSO bits upwards starting
 +	 * at __NETIF_F_GSO2_PLACEHOLDER_1.
 +	 *
 +	 * !!! Make sure to add accompanying SKB flags to SKB_GSO2_MASK !!!
 +	 *
 +	 * Add non-GSO bits right before NETDEV_FEATURE_COUNT, as long as
 +	 * there's space left.  Otherwise add further non-GSO bits starting
 +	 * at __NETIF_F_GSO2_PLACEHOLDER_8 downwards.  If we ever need more
 +	 * than 64 bits here it requires an upstream change anyway.
 +	 */
 +	__NETIF_F_GSO2_PLACEHOLDER_1,
 +	__NETIF_F_GSO2_PLACEHOLDER_2,
 +	__NETIF_F_GSO2_PLACEHOLDER_3,
 +	__NETIF_F_GSO2_PLACEHOLDER_4,
 +	__NETIF_F_GSO2_PLACEHOLDER_5,
 +	__NETIF_F_GSO2_PLACEHOLDER_6,
 +	__NETIF_F_GSO2_PLACEHOLDER_7,
 +
 +	NETIF_F_HW_L2FW_DOFFLOAD_BIT,	/* Allow L2 Forwarding in Hardware */
 +
 +	NETIF_F_HW_TC_BIT,		/* Offload TC infrastructure */
++=======
+ 	NETIF_F_HW_SWITCH_OFFLOAD_BIT,  /* HW switch offload */
++>>>>>>> aafb3e98b279 (netdev: introduce new NETIF_F_HW_SWITCH_OFFLOAD feature flag for switch device offloads)
  
  	/*
  	 * Add your fresh new feature above and remember to update
@@@ -152,10 -125,7 +156,14 @@@
  #define NETIF_F_HW_VLAN_STAG_TX	__NETIF_F(HW_VLAN_STAG_TX)
  #define NETIF_F_HW_L2FW_DOFFLOAD	__NETIF_F(HW_L2FW_DOFFLOAD)
  #define NETIF_F_BUSY_POLL	__NETIF_F(BUSY_POLL)
++<<<<<<< HEAD
 +#define NETIF_F_HW_TC		__NETIF_F(HW_TC)
 +
 +#define for_each_netdev_feature(mask_addr, bit)	\
 +	for_each_set_bit(bit, (unsigned long *)mask_addr, NETDEV_FEATURE_COUNT)
++=======
+ #define NETIF_F_HW_SWITCH_OFFLOAD	__NETIF_F(HW_SWITCH_OFFLOAD)
++>>>>>>> aafb3e98b279 (netdev: introduce new NETIF_F_HW_SWITCH_OFFLOAD feature flag for switch device offloads)
  
  /* Features valid for ethtool to change */
  /* = all defined minus driver/device-class-related */
* Unmerged path include/linux/netdev_features.h
