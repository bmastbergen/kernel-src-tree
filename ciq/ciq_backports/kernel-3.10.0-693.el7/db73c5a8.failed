x86/intel_idle: Use Intel family macros for intel_idle

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit db73c5a8c80decbb6ddf208e58f3865b4df5384d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/db73c5a8.failed

Use the new INTEL_FAM6_* macros for intel_idle.c.  Also fix up
some of the macros to be consistent with how some of the
intel_idle code refers to the model.

There's on oddity here: model 0x1F is uniquely referred to here
and nowhere else that I could find.  0x1E/0x1F are just spelled
out as "Intel Core i7 and i5 Processors" in the SDM or as "Intel
processors based on the Nehalem, Westmere microarchitectures" in
the RDPMC section.  Comments between tables 19-19 and 19-20 in
the SDM seem to point to 0x1F being some kind of Westmere, so
let's call it "WESTMERE2".

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Len Brown <lenb@kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: jacob.jun.pan@intel.com
	Cc: linux-pm@vger.kernel.org
Link: http://lkml.kernel.org/r/20160603001932.EE978EB9@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit db73c5a8c80decbb6ddf208e58f3865b4df5384d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index aa5ff1e38ccb,b5dd41d13d3d..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -851,38 -1020,39 +852,74 @@@ static const struct idle_cpu idle_cpu_d
  #define ICPU(model, cpu) \
  	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_MWAIT, (unsigned long)&cpu }
  
++<<<<<<< HEAD
 +static const struct x86_cpu_id intel_idle_ids[] = {
 +	ICPU(0x1a, idle_cpu_nehalem),
 +	ICPU(0x1e, idle_cpu_nehalem),
 +	ICPU(0x1f, idle_cpu_nehalem),
 +	ICPU(0x25, idle_cpu_nehalem),
 +	ICPU(0x2c, idle_cpu_nehalem),
 +	ICPU(0x2e, idle_cpu_nehalem),
 +	ICPU(0x1c, idle_cpu_atom),
 +	ICPU(0x26, idle_cpu_lincroft),
 +	ICPU(0x2f, idle_cpu_nehalem),
 +	ICPU(0x2a, idle_cpu_snb),
 +	ICPU(0x2d, idle_cpu_snb),
 +	ICPU(0x36, idle_cpu_atom),
 +	ICPU(0x37, idle_cpu_byt),
 +	ICPU(0x3a, idle_cpu_ivb),
 +	ICPU(0x3e, idle_cpu_ivt),
 +	ICPU(0x3c, idle_cpu_hsw),
 +	ICPU(0x3f, idle_cpu_hsw),
 +	ICPU(0x45, idle_cpu_hsw),
 +	ICPU(0x46, idle_cpu_hsw),
 +	ICPU(0x4d, idle_cpu_avn),
 +	ICPU(0x3d, idle_cpu_bdw),
 +	ICPU(0x47, idle_cpu_bdw),
 +	ICPU(0x4f, idle_cpu_bdw),
 +	ICPU(0x56, idle_cpu_bdw),
 +	ICPU(0x4e, idle_cpu_skl),
 +	ICPU(0x5e, idle_cpu_skl),
 +	ICPU(0x8e, idle_cpu_skl),
 +	ICPU(0x9e, idle_cpu_skl),
 +	ICPU(0x55, idle_cpu_skx),
 +	ICPU(0x57, idle_cpu_knl),
 +	ICPU(0x5f, idle_cpu_dnv),
++=======
+ static const struct x86_cpu_id intel_idle_ids[] __initconst = {
+ 	ICPU(INTEL_FAM6_NEHALEM_EP,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_NEHALEM,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_WESTMERE2,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_WESTMERE,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_WESTMERE_EP,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_NEHALEM_EX,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_ATOM_PINEVIEW,		idle_cpu_atom),
+ 	ICPU(INTEL_FAM6_ATOM_LINCROFT,		idle_cpu_lincroft),
+ 	ICPU(INTEL_FAM6_WESTMERE_EX,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_SANDYBRIDGE,		idle_cpu_snb),
+ 	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		idle_cpu_snb),
+ 	ICPU(INTEL_FAM6_ATOM_CEDARVIEW,		idle_cpu_atom),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	idle_cpu_byt),
+ 	ICPU(INTEL_FAM6_ATOM_AIRMONT,		idle_cpu_cht),
+ 	ICPU(INTEL_FAM6_IVYBRIDGE,		idle_cpu_ivb),
+ 	ICPU(INTEL_FAM6_IVYBRIDGE_X,		idle_cpu_ivt),
+ 	ICPU(INTEL_FAM6_HASWELL_CORE,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_HASWELL_X,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_HASWELL_ULT,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_HASWELL_GT3E,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT2,	idle_cpu_avn),
+ 	ICPU(INTEL_FAM6_BROADWELL_CORE,		idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_BROADWELL_GT3E,		idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_BROADWELL_X,		idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_KABYLAKE_MOBILE,	idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_KABYLAKE_DESKTOP,	idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_SKYLAKE_X,		idle_cpu_skx),
+ 	ICPU(INTEL_FAM6_XEON_PHI_KNL,		idle_cpu_knl),
+ 	ICPU(INTEL_FAM6_ATOM_GOLDMONT,		idle_cpu_bxt),
++>>>>>>> db73c5a8c80d (x86/intel_idle: Use Intel family macros for intel_idle)
  	{}
  };
  MODULE_DEVICE_TABLE(x86cpu, intel_idle_ids);
@@@ -1025,10 -1262,13 +1062,17 @@@ static void intel_idle_state_table_upda
  {
  	switch (boot_cpu_data.x86_model) {
  
- 	case 0x3e: /* IVT */
+ 	case INTEL_FAM6_IVYBRIDGE_X:
  		ivt_idle_state_table_update();
  		break;
++<<<<<<< HEAD
 +	case 0x5e: /* SKL-H */
++=======
+ 	case INTEL_FAM6_ATOM_GOLDMONT:
+ 		bxt_idle_state_table_update();
+ 		break;
+ 	case INTEL_FAM6_SKYLAKE_DESKTOP:
++>>>>>>> db73c5a8c80d (x86/intel_idle: Use Intel family macros for intel_idle)
  		sklh_idle_state_table_update();
  		break;
  	}
* Unmerged path drivers/idle/intel_idle.c
