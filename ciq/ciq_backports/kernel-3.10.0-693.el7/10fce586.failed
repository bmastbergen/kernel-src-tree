IB/srpt: Simplify srpt_queue_response()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Bart Van Assche <bart.vanassche@sandisk.com>
commit 10fce586b20ba27013f0a6ac73b3ac87c95cf8b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/10fce586.failed

Initialize first_wr to &send_wr. This allows to remove a ternary
operator and an else branch. This patch does not change the behavior
of srpt_queue_response().

	Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Tested-by: Steve Wise <swise@opengridcomputing.com>
	Tested-by: Laurence Oberman <loberman@redhat.com>
	Cc: Parav Pandit <pandit.parav@gmail.com>
	Cc: Nicholas Bellinger <nab@linux-iscsi.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 10fce586b20ba27013f0a6ac73b3ac87c95cf8b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/srpt/ib_srpt.c
diff --cc drivers/infiniband/ulp/srpt/ib_srpt.c
index 316f3bbb1b05,dfa23b075a88..000000000000
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@@ -2565,17 -2258,17 +2565,26 @@@ static u8 tcm_to_srp_tsk_mgmt_status(co
   */
  static void srpt_queue_response(struct se_cmd *cmd)
  {
++<<<<<<< HEAD
 +	struct srpt_rdma_ch *ch;
 +	struct srpt_send_ioctx *ioctx;
++=======
+ 	struct srpt_send_ioctx *ioctx =
+ 		container_of(cmd, struct srpt_send_ioctx, cmd);
+ 	struct srpt_rdma_ch *ch = ioctx->ch;
+ 	struct srpt_device *sdev = ch->sport->sdev;
+ 	struct ib_send_wr send_wr, *first_wr = &send_wr, *bad_wr;
+ 	struct ib_sge sge;
++>>>>>>> 10fce586b20b (IB/srpt: Simplify srpt_queue_response())
  	enum srpt_command_state state;
  	unsigned long flags;
 -	int resp_len, ret, i;
 +	int ret;
 +	enum dma_data_direction dir;
 +	int resp_len;
  	u8 srp_tm_status;
  
 +	ioctx = container_of(cmd, struct srpt_send_ioctx, cmd);
 +	ch = ioctx->ch;
  	BUG_ON(!ch);
  
  	spin_lock_irqsave(&ioctx->spinlock, flags);
@@@ -2602,16 -2295,15 +2611,21 @@@
  		return;
  	}
  
 +	dir = ioctx->cmd.data_direction;
 +
++<<<<<<< HEAD
  	/* For read commands, transfer the data to the initiator. */
 -	if (ioctx->cmd.data_direction == DMA_FROM_DEVICE &&
 -	    ioctx->cmd.data_length &&
 +	if (dir == DMA_FROM_DEVICE && ioctx->cmd.data_length &&
  	    !ioctx->queue_status_only) {
 -		for (i = ioctx->n_rw_ctx - 1; i >= 0; i--) {
 -			struct srpt_rw_ctx *ctx = &ioctx->rw_ctxs[i];
 -
 +		ret = srpt_xfer_data(ch, ioctx);
 +		if (ret) {
 +			pr_err("xfer_data failed for tag %llu\n",
 +			       ioctx->tag);
 +			return;
++=======
+ 			first_wr = rdma_rw_ctx_wrs(&ctx->rw, ch->qp,
+ 					ch->sport->port, NULL, first_wr);
++>>>>>>> 10fce586b20b (IB/srpt: Simplify srpt_queue_response())
  		}
  	}
  
* Unmerged path drivers/infiniband/ulp/srpt/ib_srpt.c
