l2tp: fix address test in __l2tp_ip6_bind_lookup()

jira LE-1907
cve CVE-2016-10200
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Guillaume Nault <g.nault@alphalink.fr>
commit 31e2f21fb35bfaa5bdbe1a4860dc99e6b10d8dcd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/31e2f21f.failed

The '!(addr && ipv6_addr_equal(addr, laddr))' part of the conditional
matches if addr is NULL or if addr != laddr.
But the intend of __l2tp_ip6_bind_lookup() is to find a sockets with
the same address, so the ipv6_addr_equal() condition needs to be
inverted.

For better clarity and consistency with the rest of the expression, the
(!X || X == Y) notation is used instead of !(X && X != Y).

	Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 31e2f21fb35bfaa5bdbe1a4860dc99e6b10d8dcd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/l2tp/l2tp_ip6.c
diff --cc net/l2tp/l2tp_ip6.c
index b296fd192ac0,aa821cb639e5..000000000000
--- a/net/l2tp/l2tp_ip6.c
+++ b/net/l2tp/l2tp_ip6.c
@@@ -71,8 -72,9 +71,14 @@@ static struct sock *__l2tp_ip6_bind_loo
  
  		if ((l2tp->conn_id == tunnel_id) &&
  		    net_eq(sock_net(sk), net) &&
++<<<<<<< HEAD
 +		    !(addr && ipv6_addr_equal(addr, laddr)) &&
 +		    !(sk->sk_bound_dev_if && sk->sk_bound_dev_if != dif))
++=======
+ 		    (!addr || ipv6_addr_equal(addr, laddr)) &&
+ 		    (!sk->sk_bound_dev_if || !dif ||
+ 		     sk->sk_bound_dev_if == dif))
++>>>>>>> 31e2f21fb35b (l2tp: fix address test in __l2tp_ip6_bind_lookup())
  			goto found;
  	}
  
* Unmerged path net/l2tp/l2tp_ip6.c
