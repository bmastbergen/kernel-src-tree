dell-wmi: Clean up hotkey table size check

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Andy Lutomirski <luto@kernel.org>
commit b13de7019c1b67f0c1b987fc9fe82fcc371ba1d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b13de701.failed

Checking the table for a minimum size of 7 bytes makes no sense: any valid
hotkey table has a size that's a multiple of 4.

Clean this up: replace the hardcoded header length with a sizeof and
change the check to ignore an empty hotkey table.  The only behavior
change is that a 7-byte table (which is nonsensical) will now be
treated as absent instead of as valid but empty.

	Reported-by: Jean Delvare <jdelvare@suse.de>
	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Acked-by: Pali Roh√°r <pali.rohar@gmail.com>
	Signed-off-by: Darren Hart <dvhart@linux.intel.com>
(cherry picked from commit b13de7019c1b67f0c1b987fc9fe82fcc371ba1d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/dell-wmi.c
diff --cc drivers/platform/x86/dell-wmi.c
index 29c8dbd4c921,32808a463325..000000000000
--- a/drivers/platform/x86/dell-wmi.c
+++ b/drivers/platform/x86/dell-wmi.c
@@@ -337,16 -340,41 +337,45 @@@ static void dell_wmi_notify(u32 value, 
  	kfree(obj);
  }
  
 -static void __init handle_dmi_entry(const struct dmi_header *dm,
 -				    void *opaque)
 +static const struct key_entry * __init dell_wmi_prepare_new_keymap(void)
  {
++<<<<<<< HEAD
 +	int hotkey_num = (dell_bios_hotkey_table->header.length - 4) /
 +				sizeof(struct dell_bios_keymap_entry);
 +	struct key_entry *keymap;
 +	int i;
++=======
+ 	struct dell_dmi_results *results = opaque;
+ 	struct dell_bios_hotkey_table *table;
+ 	struct key_entry *keymap;
+ 	int hotkey_num, i;
+ 
+ 	if (results->err || results->keymap)
+ 		return;		/* We already found the hotkey table. */
+ 
+ 	if (dm->type != 0xb2)
+ 		return;
+ 
+ 	table = container_of(dm, struct dell_bios_hotkey_table, header);
+ 
+ 	hotkey_num = (table->header.length -
+ 		      sizeof(struct dell_bios_hotkey_table)) /
+ 				sizeof(struct dell_bios_keymap_entry);
+ 	if (hotkey_num < 1) {
+ 		/*
+ 		 * Historically, dell-wmi would ignore a DMI entry of
+ 		 * fewer than 7 bytes.  Sizes between 4 and 8 bytes are
+ 		 * nonsensical (both the header and all entries are 4
+ 		 * bytes), so we approximate the old behavior by
+ 		 * ignoring tables with fewer than one entry.
+ 		 */
+ 		return;
+ 	}
++>>>>>>> b13de7019c1b (dell-wmi: Clean up hotkey table size check)
  
  	keymap = kcalloc(hotkey_num + 1, sizeof(struct key_entry), GFP_KERNEL);
 -	if (!keymap) {
 -		results->err = -ENOMEM;
 -		return;
 -	}
 +	if (!keymap)
 +		return NULL;
  
  	for (i = 0; i < hotkey_num; i++) {
  		const struct dell_bios_keymap_entry *bios_entry =
* Unmerged path drivers/platform/x86/dell-wmi.c
