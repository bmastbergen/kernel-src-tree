tracing: #ifdef out uses of max trace when CONFIG_TRACER_MAX_TRACE is not set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Chen Gang <gang.chen.5i5j@gmail.com>
commit e428abbbf616cd8fdd1162e4a624ad1d47b47544
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/e428abbb.failed

tracing_max_lat_fops is used only when TRACER_MAX_TRACE enabled, so also
swith the related code. The related warning with defconfig under x86_64:

    CC      kernel/trace/trace.o
  kernel/trace/trace.c:5466:37: warning: ‘tracing_max_lat_fops’ defined but not used [-Wunused-const-variable]
   static const struct file_operations tracing_max_lat_fops = {

	Signed-off-by: Chen Gang <gang.chen.5i5j@gmail.com>
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit e428abbbf616cd8fdd1162e4a624ad1d47b47544)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace.c
diff --cc kernel/trace/trace.c
index d31b92ef362d,87fb9801bd9e..000000000000
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@@ -4084,6 -4516,56 +4084,59 @@@ tracing_max_lat_write(struct file *filp
  	return cnt;
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t
+ tracing_thresh_read(struct file *filp, char __user *ubuf,
+ 		    size_t cnt, loff_t *ppos)
+ {
+ 	return tracing_nsecs_read(&tracing_thresh, ubuf, cnt, ppos);
+ }
+ 
+ static ssize_t
+ tracing_thresh_write(struct file *filp, const char __user *ubuf,
+ 		     size_t cnt, loff_t *ppos)
+ {
+ 	struct trace_array *tr = filp->private_data;
+ 	int ret;
+ 
+ 	mutex_lock(&trace_types_lock);
+ 	ret = tracing_nsecs_write(&tracing_thresh, ubuf, cnt, ppos);
+ 	if (ret < 0)
+ 		goto out;
+ 
+ 	if (tr->current_trace->update_thresh) {
+ 		ret = tr->current_trace->update_thresh(tr);
+ 		if (ret < 0)
+ 			goto out;
+ 	}
+ 
+ 	ret = cnt;
+ out:
+ 	mutex_unlock(&trace_types_lock);
+ 
+ 	return ret;
+ }
+ 
+ #ifdef CONFIG_TRACER_MAX_TRACE
+ 
+ static ssize_t
+ tracing_max_lat_read(struct file *filp, char __user *ubuf,
+ 		     size_t cnt, loff_t *ppos)
+ {
+ 	return tracing_nsecs_read(filp->private_data, ubuf, cnt, ppos);
+ }
+ 
+ static ssize_t
+ tracing_max_lat_write(struct file *filp, const char __user *ubuf,
+ 		      size_t cnt, loff_t *ppos)
+ {
+ 	return tracing_nsecs_write(filp->private_data, ubuf, cnt, ppos);
+ }
+ 
+ #endif
+ 
++>>>>>>> e428abbbf616 (tracing: #ifdef out uses of max trace when CONFIG_TRACER_MAX_TRACE is not set)
  static int tracing_open_pipe(struct inode *inode, struct file *filp)
  {
  	struct trace_array *tr = inode->i_private;
@@@ -5002,6 -5460,14 +5055,17 @@@ static int snapshot_raw_open(struct ino
  #endif /* CONFIG_TRACER_SNAPSHOT */
  
  
++<<<<<<< HEAD
++=======
+ static const struct file_operations tracing_thresh_fops = {
+ 	.open		= tracing_open_generic,
+ 	.read		= tracing_thresh_read,
+ 	.write		= tracing_thresh_write,
+ 	.llseek		= generic_file_llseek,
+ };
+ 
+ #ifdef CONFIG_TRACER_MAX_TRACE
++>>>>>>> e428abbbf616 (tracing: #ifdef out uses of max trace when CONFIG_TRACER_MAX_TRACE is not set)
  static const struct file_operations tracing_max_lat_fops = {
  	.open		= tracing_open_generic,
  	.read		= tracing_max_lat_read,
* Unmerged path kernel/trace/trace.c
