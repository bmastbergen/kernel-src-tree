ACPICA: Utilities: Introduce acpi_log_error() to improve portability

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit 2e70da4c51eb18a4d229aa48763c15f5dbc5b43d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2e70da4c.failed

Invocations like fprintf(stderr) and perror() are not portable, this patch
introduces acpi_log_error() as a replacement, it is implemented using new
portable API - acpi_ut_file_vprintf().

Note that though acpi_os_initialize() need to be invoked prior than using
this new API, since no users are introduced in this patch, such invocations
are not added for applications that link utprint.c in this patch. Futher
patches that introduce users of acpi_log_error() should take care of this.

This patch is only useful for ACPICA applications, most of which are not
shipped in the Linux kernel.

Note that follow-up commits will update acpidump to use this new API to
improve portability. Lv Zheng.

	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 2e70da4c51eb18a4d229aa48763c15f5dbc5b43d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/acpi/acpixf.h
diff --cc include/acpi/acpixf.h
index 4f88d18b72e7,9858551fc84a..000000000000
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@@ -110,7 -301,63 +110,67 @@@ extern u8 acpi_gbl_disable_ssdt_table_l
  
  #endif				/* !ACPI_REDUCED_HARDWARE */
  
++<<<<<<< HEAD
 +extern u32 acpi_rsdt_forced;
++=======
+ /*
+  * Error message prototypes (default: error messages enabled).
+  *
+  * All interfaces related to error and warning messages
+  * will be configured out of the ACPICA build if the
+  * ACPI_NO_ERROR_MESSAGE flag is defined.
+  */
+ #ifndef ACPI_NO_ERROR_MESSAGES
+ #define ACPI_MSG_DEPENDENT_RETURN_VOID(prototype) \
+ 	prototype;
+ 
+ #else
+ #define ACPI_MSG_DEPENDENT_RETURN_VOID(prototype) \
+ 	static ACPI_INLINE prototype {return;}
+ 
+ #endif				/* ACPI_NO_ERROR_MESSAGES */
+ 
+ /*
+  * Debugging output prototypes (default: no debug output).
+  *
+  * All interfaces related to debug output messages
+  * will be configured out of the ACPICA build unless the
+  * ACPI_DEBUG_OUTPUT flag is defined.
+  */
+ #ifdef ACPI_DEBUG_OUTPUT
+ #define ACPI_DBG_DEPENDENT_RETURN_VOID(prototype) \
+ 	prototype;
+ 
+ #else
+ #define ACPI_DBG_DEPENDENT_RETURN_VOID(prototype) \
+ 	static ACPI_INLINE prototype {return;}
+ 
+ #endif				/* ACPI_DEBUG_OUTPUT */
+ 
+ /*
+  * Application prototypes
+  *
+  * All interfaces used by application will be configured
+  * out of the ACPICA build unless the ACPI_APPLICATION
+  * flag is defined.
+  */
+ #ifdef ACPI_APPLICATION
+ #define ACPI_APP_DEPENDENT_RETURN_VOID(prototype) \
+ 	prototype;
+ 
+ #else
+ #define ACPI_APP_DEPENDENT_RETURN_VOID(prototype) \
+ 	static ACPI_INLINE prototype {return;}
+ 
+ #endif				/* ACPI_APPLICATION */
+ 
+ /*****************************************************************************
+  *
+  * ACPICA public interface prototypes
+  *
+  ****************************************************************************/
+ 
++>>>>>>> 2e70da4c51eb (ACPICA: Utilities: Introduce acpi_log_error() to improve portability)
  /*
   * Initialization
   */
@@@ -553,22 -862,40 +613,44 @@@ acpi_bios_warning(const char *module_na
  /*
   * Debug output
   */
++<<<<<<< HEAD
 +#ifdef ACPI_DEBUG_OUTPUT
++=======
+ ACPI_DBG_DEPENDENT_RETURN_VOID(ACPI_PRINTF_LIKE(6)
+ 			       void ACPI_INTERNAL_VAR_XFACE
+ 			       acpi_debug_print(u32 requested_debug_level,
+ 						u32 line_number,
+ 						const char *function_name,
+ 						const char *module_name,
+ 						u32 component_id,
+ 						const char *format, ...))
+ ACPI_DBG_DEPENDENT_RETURN_VOID(ACPI_PRINTF_LIKE(6)
+ 				void ACPI_INTERNAL_VAR_XFACE
+ 				acpi_debug_print_raw(u32 requested_debug_level,
+ 						     u32 line_number,
+ 						     const char *function_name,
+ 						     const char *module_name,
+ 						     u32 component_id,
+ 						     const char *format, ...))
+ ACPI_APP_DEPENDENT_RETURN_VOID(ACPI_PRINTF_LIKE(1)
+ 				void ACPI_INTERNAL_VAR_XFACE
+ 				acpi_log_error(const char *format, ...))
 -
 -/*
 - * Divergences
 - */
 -acpi_status acpi_get_id(acpi_handle object, acpi_owner_id * out_type);
 -
 -acpi_status acpi_unload_table_id(acpi_owner_id id);
 -
 -acpi_status
 -acpi_get_table_with_size(acpi_string signature,
 -	       u32 instance, struct acpi_table_header **out_table,
 -	       acpi_size *tbl_size);
 -
 -acpi_status
 -acpi_get_data_full(acpi_handle object, acpi_object_handler handler, void **data,
 -		   void (*callback)(void *));
++>>>>>>> 2e70da4c51eb (ACPICA: Utilities: Introduce acpi_log_error() to improve portability)
 +
 +void ACPI_INTERNAL_VAR_XFACE
 +acpi_debug_print(u32 requested_debug_level,
 +		 u32 line_number,
 +		 const char *function_name,
 +		 const char *module_name,
 +		 u32 component_id, const char *format, ...) ACPI_PRINTF_LIKE(6);
 +
 +void ACPI_INTERNAL_VAR_XFACE
 +acpi_debug_print_raw(u32 requested_debug_level,
 +		     u32 line_number,
 +		     const char *function_name,
 +		     const char *module_name,
 +		     u32 component_id,
 +		     const char *format, ...) ACPI_PRINTF_LIKE(6);
 +#endif
  
  #endif				/* __ACXFACE_H__ */
diff --git a/drivers/acpi/acpica/utdebug.c b/drivers/acpi/acpica/utdebug.c
index bcfe3233f0d4..a1a3f28ef51c 100644
--- a/drivers/acpi/acpica/utdebug.c
+++ b/drivers/acpi/acpica/utdebug.c
@@ -544,3 +544,29 @@ acpi_ut_ptr_exit(u32 line_number,
 }
 
 #endif
+
+#ifdef ACPI_APPLICATION
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_log_error
+ *
+ * PARAMETERS:  format              - Printf format field
+ *              ...                 - Optional printf arguments
+ *
+ * RETURN:      None
+ *
+ * DESCRIPTION: Print error message to the console, used by applications.
+ *
+ ******************************************************************************/
+
+void ACPI_INTERNAL_VAR_XFACE acpi_log_error(const char *format, ...)
+{
+	va_list args;
+
+	va_start(args, format);
+	(void)acpi_ut_file_vprintf(ACPI_FILE_ERR, format, args);
+	va_end(args);
+}
+
+ACPI_EXPORT_SYMBOL(acpi_log_error)
+#endif
* Unmerged path include/acpi/acpixf.h
diff --git a/include/acpi/platform/acenv.h b/include/acpi/platform/acenv.h
index 5211e9663d36..85fb34748e65 100644
--- a/include/acpi/platform/acenv.h
+++ b/include/acpi/platform/acenv.h
@@ -395,8 +395,12 @@ typedef char *va_list;
 #ifdef ACPI_APPLICATION
 #include <stdio.h>
 #define ACPI_FILE              FILE *
+#define ACPI_FILE_OUT          stdout
+#define ACPI_FILE_ERR          stderr
 #else
 #define ACPI_FILE              void *
+#define ACPI_FILE_OUT          NULL
+#define ACPI_FILE_ERR          NULL
 #endif				/* ACPI_APPLICATION */
 #endif				/* ACPI_FILE */
 
