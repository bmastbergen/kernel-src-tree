IB/hfi1: Remove definition of unused hfi1_affinity struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tadeusz Struk <tadeusz.struk@intel.com>
commit 6e40b59cfa99710fcbf849439783e8fc98d183bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6e40b59c.failed

The struct hfi1_affinity is not used anymore.
We use the struct hfi1_affinity_node and hfi1_affinity_node_list
instead.

	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
	Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 6e40b59cfa99710fcbf849439783e8fc98d183bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/hfi1/affinity.h
diff --cc drivers/infiniband/hw/hfi1/affinity.h
index 20f52fe74091,ef4ebc358619..000000000000
--- a/drivers/infiniband/hw/hfi1/affinity.h
+++ b/drivers/infiniband/hw/hfi1/affinity.h
@@@ -70,15 -70,6 +70,18 @@@ struct cpu_mask_set 
  	uint gen;
  };
  
++<<<<<<< HEAD
 +struct hfi1_affinity {
 +	struct cpu_mask_set def_intr;
 +	struct cpu_mask_set rcv_intr;
 +	struct cpu_mask_set proc;
 +	struct cpumask real_cpu_mask;
 +	/* spin lock to protect affinity struct */
 +	spinlock_t lock;
 +};
 +
++=======
++>>>>>>> 6e40b59cfa99 (IB/hfi1: Remove definition of unused hfi1_affinity struct)
  struct hfi1_msix_entry;
  
  /* Initialize non-HT cpu cores mask */
* Unmerged path drivers/infiniband/hw/hfi1/affinity.h
diff --git a/drivers/infiniband/hw/hfi1/hfi.h b/drivers/infiniband/hw/hfi1/hfi.h
index a897ba1a49ab..cee5dceac244 100644
--- a/drivers/infiniband/hw/hfi1/hfi.h
+++ b/drivers/infiniband/hw/hfi1/hfi.h
@@ -1164,7 +1164,6 @@ struct hfi1_devdata {
 	/* Used to wait for outstanding user space clients before dev removal */
 	struct completion user_comp;
 
-	struct hfi1_affinity *affinity;
 	bool eprom_available;	/* true if EPROM is available for this device */
 	bool aspm_supported;	/* Does HW support ASPM */
 	bool aspm_enabled;	/* ASPM state: enabled/disabled */
