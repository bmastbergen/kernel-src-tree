tools/power turbostat: detect and work around syscall jitter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: detect and work around syscall jitter (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 94.74%
commit-author Len Brown <len.brown@intel.com>
commit 0102b06747c7d24e334d2b27c4b43eed693676f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0102b067.failed

The accuracy of Bzy_Mhz and Busy% depend on reading
the TSC, APERF, and MPERF close together in time.

When there is a very short measurement interval,
or a large system is profoundly idle, the changes
in APERF and MPERF may be very small.
They can be small enough that an expensive interrupt
between reading APERF and MPERF can cause the APERF/MPERF
ratio to become inaccurate, resulting in invalid
calculation and display of Bzy_MHz.

A dummy APERF read of APERF makes this problem
much more rare.  Apparently this 1st systemn call
after exiting a long stretch of idle is when we
typically see expensive timer interrupts that cause
large jitter.

For the cases that dummy APERF read fails to prevent,
we compare the latency of the APERF and MPERF reads.
If they differ by more than 2x, we re-issue them.

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 0102b06747c7d24e334d2b27c4b43eed693676f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index b938c3391c64,43a6dda434ef..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -977,9 -1059,10 +977,10 @@@ int get_counters(struct thread_data *t
  {
  	int cpu = t->cpu_id;
  	unsigned long long msr;
+ 	int aperf_mperf_retry_count = 0;
  
  	if (cpu_migrate(cpu)) {
 -		fprintf(outf, "Could not migrate to CPU %d\n", cpu);
 +		fprintf(stderr, "Could not migrate to CPU %d\n", cpu);
  		return -1;
  	}
  
@@@ -3184,7 -3603,7 +3233,11 @@@ int get_and_dump_counters(void
  }
  
  void print_version() {
++<<<<<<< HEAD
 +	fprintf(stderr, "turbostat version 4.12 5 Apr 2016"
++=======
+ 	fprintf(outf, "turbostat version 4.11 27 Feb 2016"
++>>>>>>> 0102b06747c7 (tools/power turbostat: detect and work around syscall jitter)
  		" - Len Brown <lenb@kernel.org>\n");
  }
  
* Unmerged path tools/power/x86/turbostat/turbostat.c
