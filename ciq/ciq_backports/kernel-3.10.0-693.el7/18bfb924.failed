net: introduce default neigh_construct/destroy ndo calls for L2 upper devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] introduce default neigh_construct/destroy ndo calls for L2 upper devices (Ivan Vecera) [1382040]
Rebuild_FUZZ: 96.64%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 18bfb924f0005a728caadd90ba755b2a660bf441
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/18bfb924.failed

L2 upper device needs to propagate neigh_construct/destroy calls down to
lower devices. Do this by defining default ndo functions and use them in
team, bond, bridge and vlan.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 18bfb924f0005a728caadd90ba755b2a660bf441)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	include/linux/netdevice.h
#	net/8021q/vlan_dev.c
#	net/core/dev.c
diff --cc drivers/net/bonding/bond_main.c
index ce8e9750aae0,480d73ac7d1b..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -4085,6 -4137,14 +4085,17 @@@ static const struct net_device_ops bond
  	.ndo_add_slave		= bond_enslave,
  	.ndo_del_slave		= bond_release,
  	.ndo_fix_features	= bond_fix_features,
++<<<<<<< HEAD
++=======
+ 	.ndo_neigh_construct	= netdev_default_l2upper_neigh_construct,
+ 	.ndo_neigh_destroy	= netdev_default_l2upper_neigh_destroy,
+ 	.ndo_bridge_setlink	= switchdev_port_bridge_setlink,
+ 	.ndo_bridge_getlink	= switchdev_port_bridge_getlink,
+ 	.ndo_bridge_dellink	= switchdev_port_bridge_dellink,
+ 	.ndo_fdb_add		= switchdev_port_fdb_add,
+ 	.ndo_fdb_del		= switchdev_port_fdb_del,
+ 	.ndo_fdb_dump		= switchdev_port_fdb_dump,
++>>>>>>> 18bfb924f000 (net: introduce default neigh_construct/destroy ndo calls for L2 upper devices)
  	.ndo_features_check	= passthru_features_check,
  };
  
diff --cc include/linux/netdevice.h
index 0c457a76a538,49736a31acaa..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -3723,12 -3841,14 +3723,21 @@@ int netdev_master_upper_dev_link_privat
  void netdev_upper_dev_unlink(struct net_device *dev,
  			     struct net_device *upper_dev);
  void netdev_adjacent_rename_links(struct net_device *dev, char *oldname);
 +void *netdev_lower_dev_get_private_rcu(struct net_device *dev,
 +				       struct net_device *lower_dev);
  void *netdev_lower_dev_get_private(struct net_device *dev,
  				   struct net_device *lower_dev);
++<<<<<<< HEAD
 +int dev_get_nest_level(struct net_device *dev,
 +		       bool (*type_check)(struct net_device *dev));
++=======
+ void netdev_lower_state_changed(struct net_device *lower_dev,
+ 				void *lower_state_info);
+ int netdev_default_l2upper_neigh_construct(struct net_device *dev,
+ 					   struct neighbour *n);
+ void netdev_default_l2upper_neigh_destroy(struct net_device *dev,
+ 					  struct neighbour *n);
++>>>>>>> 18bfb924f000 (net: introduce default neigh_construct/destroy ndo calls for L2 upper devices)
  
  /* RSS keys are 40 or 52 bytes long */
  #define NETDEV_RSS_KEY_LEN 52
diff --cc net/8021q/vlan_dev.c
index 9af4f47df140,c8f422c90856..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -787,6 -790,15 +787,18 @@@ static const struct net_device_ops vlan
  	.ndo_netpoll_cleanup	= vlan_dev_netpoll_cleanup,
  #endif
  	.ndo_fix_features	= vlan_dev_fix_features,
++<<<<<<< HEAD
++=======
+ 	.ndo_neigh_construct	= netdev_default_l2upper_neigh_construct,
+ 	.ndo_neigh_destroy	= netdev_default_l2upper_neigh_destroy,
+ 	.ndo_fdb_add		= switchdev_port_fdb_add,
+ 	.ndo_fdb_del		= switchdev_port_fdb_del,
+ 	.ndo_fdb_dump		= switchdev_port_fdb_dump,
+ 	.ndo_bridge_setlink	= switchdev_port_bridge_setlink,
+ 	.ndo_bridge_getlink	= switchdev_port_bridge_getlink,
+ 	.ndo_bridge_dellink	= switchdev_port_bridge_dellink,
+ 	.ndo_get_lock_subclass  = vlan_dev_get_lock_subclass,
++>>>>>>> 18bfb924f000 (net: introduce default neigh_construct/destroy ndo calls for L2 upper devices)
  	.ndo_get_iflink		= vlan_dev_get_iflink,
  };
  
diff --cc net/core/dev.c
index 0198b4df7270,b92d63bfde7a..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -5638,6 -6067,70 +5638,73 @@@ int dev_get_nest_level(struct net_devic
  }
  EXPORT_SYMBOL(dev_get_nest_level);
  
++<<<<<<< HEAD
++=======
+ /**
+  * netdev_lower_change - Dispatch event about lower device state change
+  * @lower_dev: device
+  * @lower_state_info: state to dispatch
+  *
+  * Send NETDEV_CHANGELOWERSTATE to netdev notifiers with info.
+  * The caller must hold the RTNL lock.
+  */
+ void netdev_lower_state_changed(struct net_device *lower_dev,
+ 				void *lower_state_info)
+ {
+ 	struct netdev_notifier_changelowerstate_info changelowerstate_info;
+ 
+ 	ASSERT_RTNL();
+ 	changelowerstate_info.lower_state_info = lower_state_info;
+ 	call_netdevice_notifiers_info(NETDEV_CHANGELOWERSTATE, lower_dev,
+ 				      &changelowerstate_info.info);
+ }
+ EXPORT_SYMBOL(netdev_lower_state_changed);
+ 
+ int netdev_default_l2upper_neigh_construct(struct net_device *dev,
+ 					   struct neighbour *n)
+ {
+ 	struct net_device *lower_dev, *stop_dev;
+ 	struct list_head *iter;
+ 	int err;
+ 
+ 	netdev_for_each_lower_dev(dev, lower_dev, iter) {
+ 		if (!lower_dev->netdev_ops->ndo_neigh_construct)
+ 			continue;
+ 		err = lower_dev->netdev_ops->ndo_neigh_construct(lower_dev, n);
+ 		if (err) {
+ 			stop_dev = lower_dev;
+ 			goto rollback;
+ 		}
+ 	}
+ 	return 0;
+ 
+ rollback:
+ 	netdev_for_each_lower_dev(dev, lower_dev, iter) {
+ 		if (lower_dev == stop_dev)
+ 			break;
+ 		if (!lower_dev->netdev_ops->ndo_neigh_destroy)
+ 			continue;
+ 		lower_dev->netdev_ops->ndo_neigh_destroy(lower_dev, n);
+ 	}
+ 	return err;
+ }
+ EXPORT_SYMBOL_GPL(netdev_default_l2upper_neigh_construct);
+ 
+ void netdev_default_l2upper_neigh_destroy(struct net_device *dev,
+ 					  struct neighbour *n)
+ {
+ 	struct net_device *lower_dev;
+ 	struct list_head *iter;
+ 
+ 	netdev_for_each_lower_dev(dev, lower_dev, iter) {
+ 		if (!lower_dev->netdev_ops->ndo_neigh_destroy)
+ 			continue;
+ 		lower_dev->netdev_ops->ndo_neigh_destroy(lower_dev, n);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(netdev_default_l2upper_neigh_destroy);
+ 
++>>>>>>> 18bfb924f000 (net: introduce default neigh_construct/destroy ndo calls for L2 upper devices)
  static void dev_change_rx_flags(struct net_device *dev, int flags)
  {
  	const struct net_device_ops *ops = dev->netdev_ops;
* Unmerged path drivers/net/bonding/bond_main.c
diff --git a/drivers/net/team/team.c b/drivers/net/team/team.c
index 677631ed24ab..5eabaa22931b 100644
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@ -2019,6 +2019,8 @@ static const struct net_device_ops team_netdev_ops = {
 	.ndo_add_slave		= team_add_slave,
 	.ndo_del_slave		= team_del_slave,
 	.ndo_fix_features	= team_fix_features,
+	.ndo_neigh_construct	= netdev_default_l2upper_neigh_construct,
+	.ndo_neigh_destroy	= netdev_default_l2upper_neigh_destroy,
 	.ndo_change_carrier     = team_change_carrier,
 	.ndo_features_check	= passthru_features_check,
 };
* Unmerged path include/linux/netdevice.h
* Unmerged path net/8021q/vlan_dev.c
diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index 7dc9f6cf9be3..6b54ef678b2f 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -338,6 +338,8 @@ static const struct net_device_ops br_netdev_ops = {
 	.ndo_add_slave		 = br_add_slave,
 	.ndo_del_slave		 = br_del_slave,
 	.ndo_fix_features        = br_fix_features,
+	.ndo_neigh_construct	 = netdev_default_l2upper_neigh_construct,
+	.ndo_neigh_destroy	 = netdev_default_l2upper_neigh_destroy,
 	.ndo_fdb_add		 = br_fdb_add,
 	.ndo_fdb_del		 = br_fdb_delete,
 	.extended.ndo_fdb_dump	 = br_fdb_dump,
* Unmerged path net/core/dev.c
