btrfs: fix error handling when run_delayed_extent_op fails

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jeff Mahoney <jeffm@suse.com>
commit aa7c8da35d1905d80e840d075f07d26ec90144b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/aa7c8da3.failed

In __btrfs_run_delayed_refs, the error path when run_delayed_extent_op
fails sets locked_ref->processing = 0 but doesn't re-increment
delayed_refs->num_heads_ready.  As a result, we end up triggering
the WARN_ON in btrfs_select_ref_head.

Fixes: d7df2c796d7 (Btrfs: attach delayed ref updates to delayed ref heads)
	Reported-by: Jon Nelson <jnelson-suse@jamponi.net>
	Signed-off-by: Jeff Mahoney <jeffm@suse.com>
	Reviewed-by: Liu Bo <bo.li.liu@oracle.com>
	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit aa7c8da35d1905d80e840d075f07d26ec90144b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/extent-tree.c
diff --cc fs/btrfs/extent-tree.c
index 2eaf901c5f5a,5366e50c84c6..000000000000
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@@ -2576,8 -2572,13 +2576,17 @@@ static noinline int __btrfs_run_delayed
  					 */
  					if (must_insert_reserved)
  						locked_ref->must_insert_reserved = 1;
+ 					spin_lock(&delayed_refs->lock);
  					locked_ref->processing = 0;
++<<<<<<< HEAD
 +					btrfs_debug(fs_info, "run_delayed_extent_op returned %d", ret);
++=======
+ 					delayed_refs->num_heads_ready++;
+ 					spin_unlock(&delayed_refs->lock);
+ 					btrfs_debug(fs_info,
+ 						    "run_delayed_extent_op returned %d",
+ 						    ret);
++>>>>>>> aa7c8da35d19 (btrfs: fix error handling when run_delayed_extent_op fails)
  					btrfs_delayed_ref_unlock(locked_ref);
  					return ret;
  				}
* Unmerged path fs/btrfs/extent-tree.c
