crypto: testmgr - add aead cbc des, des3_ede tests

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] testmgr - add aead cbc des, des3_ede tests (Herbert Xu) [1459191]
Rebuild_FUZZ: 91.30%
commit-author Nitesh Lal <NiteshNarayanLal@freescale.com>
commit 5208ed2ca16526cdbec25abe594a3cc3aea210f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5208ed2c.failed

Test vectors were taken from existing test for
CBC(DES3_EDE). Associated data has been added to test vectors.
HMAC computed with Crypto++ has been used. Following algos have
been covered.

        (a) "authenc(hmac(sha1),cbc(des))"
        (b) "authenc(hmac(sha1),cbc(des3_ede))"
        (c) "authenc(hmac(sha224),cbc(des))"
        (d) "authenc(hmac(sha224),cbc(des3_ede))"
        (e) "authenc(hmac(sha256),cbc(des))"
        (f) "authenc(hmac(sha256),cbc(des3_ede))"
        (g) "authenc(hmac(sha384),cbc(des))"
        (h) "authenc(hmac(sha384),cbc(des3_ede))"
        (i) "authenc(hmac(sha512),cbc(des))"
        (j) "authenc(hmac(sha512),cbc(des3_ede))"

	Signed-off-by: Vakul Garg <vakul@freescale.com>
[NiteshNarayanLal@freescale.com: added hooks for the missing algorithms test and tested the patch]
	Signed-off-by: Nitesh Lal <NiteshNarayanLal@freescale.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 5208ed2ca16526cdbec25abe594a3cc3aea210f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/tcrypt.c
#	crypto/testmgr.c
#	crypto/testmgr.h
diff --cc crypto/tcrypt.c
index 41684883a4b3,ba247cf30858..000000000000
--- a/crypto/tcrypt.c
+++ b/crypto/tcrypt.c
@@@ -1516,6 -1508,47 +1516,50 @@@ static int do_test(int m
  		ret += tcrypt_test("cmac(des3_ede)");
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case 155:
+ 		ret += tcrypt_test("authenc(hmac(sha1),cbc(aes))");
+ 		break;
+ 
+ 	case 156:
+ 		ret += tcrypt_test("authenc(hmac(md5),ecb(cipher_null))");
+ 		break;
+ 
+ 	case 157:
+ 		ret += tcrypt_test("authenc(hmac(sha1),ecb(cipher_null))");
+ 		break;
+ 	case 181:
+ 		ret += tcrypt_test("authenc(hmac(sha1),cbc(des))");
+ 		break;
+ 	case 182:
+ 		ret += tcrypt_test("authenc(hmac(sha1),cbc(des3_ede))");
+ 		break;
+ 	case 183:
+ 		ret += tcrypt_test("authenc(hmac(sha224),cbc(des))");
+ 		break;
+ 	case 184:
+ 		ret += tcrypt_test("authenc(hmac(sha224),cbc(des3_ede))");
+ 		break;
+ 	case 185:
+ 		ret += tcrypt_test("authenc(hmac(sha256),cbc(des))");
+ 		break;
+ 	case 186:
+ 		ret += tcrypt_test("authenc(hmac(sha256),cbc(des3_ede))");
+ 		break;
+ 	case 187:
+ 		ret += tcrypt_test("authenc(hmac(sha384),cbc(des))");
+ 		break;
+ 	case 188:
+ 		ret += tcrypt_test("authenc(hmac(sha384),cbc(des3_ede))");
+ 		break;
+ 	case 189:
+ 		ret += tcrypt_test("authenc(hmac(sha512),cbc(des))");
+ 		break;
+ 	case 190:
+ 		ret += tcrypt_test("authenc(hmac(sha512),cbc(des3_ede))");
+ 		break;
++>>>>>>> 5208ed2ca165 (crypto: testmgr - add aead cbc des, des3_ede tests)
  	case 200:
  		test_cipher_speed("ecb(aes)", ENCRYPT, sec, NULL, 0,
  				speed_template_16_24_32);
diff --cc crypto/testmgr.c
index 0d552d3beee3,498649ac1953..000000000000
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@@ -1997,6 -1842,82 +1999,85 @@@ static const struct alg_test_desc alg_t
  			}
  		}
  	}, {
+ 		.alg = "authenc(hmac(sha1),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha1),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_DES3_EDE_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
++<<<<<<< HEAD
++=======
+ 		.alg = "authenc(hmac(sha1),ecb(cipher_null))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_ecb_cipher_null_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_ECB_CIPHER_NULL_ENC_TEST_VEC
+ 				},
+ 				.dec = {
+ 					.vecs =
+ 					hmac_sha1_ecb_cipher_null_dec_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_ECB_CIPHER_NULL_DEC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha224),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha224_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA224_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha224),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha224_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA224_DES3_EDE_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
++>>>>>>> 5208ed2ca165 (crypto: testmgr - add aead cbc des, des3_ede tests)
  		.alg = "authenc(hmac(sha256),cbc(aes))",
  		.test = alg_test_aead,
  		.fips_allowed = 1,
diff --cc crypto/testmgr.h
index d0d747df26bf,69d0dd8ef27e..000000000000
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@@ -13041,9 -13554,13 +13041,19 @@@ static struct cipher_testvec cast6_xts_
  #define AES_DEC_TEST_VECTORS 4
  #define AES_CBC_ENC_TEST_VECTORS 5
  #define AES_CBC_DEC_TEST_VECTORS 5
++<<<<<<< HEAD
 +#define HMAC_SHA1_AES_CBC_ENC_TEST_VECTORS 7
 +#define HMAC_SHA256_AES_CBC_ENC_TEST_VECTORS 7
 +#define HMAC_SHA512_AES_CBC_ENC_TEST_VECTORS 7
++=======
+ #define HMAC_MD5_ECB_CIPHER_NULL_ENC_TEST_VECTORS 2
+ #define HMAC_MD5_ECB_CIPHER_NULL_DEC_TEST_VECTORS 2
+ #define HMAC_SHA1_ECB_CIPHER_NULL_ENC_TEST_VEC 2
+ #define HMAC_SHA1_ECB_CIPHER_NULL_DEC_TEST_VEC 2
+ #define HMAC_SHA1_AES_CBC_ENC_TEST_VEC 7
+ #define HMAC_SHA256_AES_CBC_ENC_TEST_VEC 7
+ #define HMAC_SHA512_AES_CBC_ENC_TEST_VEC 7
++>>>>>>> 5208ed2ca165 (crypto: testmgr - add aead cbc des, des3_ede tests)
  #define AES_LRW_ENC_TEST_VECTORS 8
  #define AES_LRW_DEC_TEST_VECTORS 8
  #define AES_XTS_ENC_TEST_VECTORS 5
@@@ -13847,7 -14364,91 +13857,95 @@@ static struct cipher_testvec aes_cbc_de
  	},
  };
  
++<<<<<<< HEAD
 +static struct aead_testvec hmac_sha1_aes_cbc_enc_tv_template[] = {
++=======
+ static struct aead_testvec hmac_md5_ecb_cipher_null_enc_tv_template[] = {
+ 	{ /* Input data from RFC 2410 Case 1 */
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00",
+ 		.klen   = 8 + 16 + 0,
+ 		.iv     = "",
+ 		.input  = "\x01\x23\x45\x67\x89\xab\xcd\xef",
+ 		.ilen   = 8,
+ 		.result = "\x01\x23\x45\x67\x89\xab\xcd\xef"
+ 			  "\xaa\x42\xfe\x43\x8d\xea\xa3\x5a"
+ 			  "\xb9\x3d\x9f\xb1\xa3\x8e\x9b\xae",
+ 		.rlen   = 8 + 16,
+ 	}, { /* Input data from RFC 2410 Case 2 */
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00",
+ 		.klen   = 8 + 16 + 0,
+ 		.iv     = "",
+ 		.input  = "Network Security People Have A Strange Sense Of Humor",
+ 		.ilen   = 53,
+ 		.result = "Network Security People Have A Strange Sense Of Humor"
+ 			  "\x73\xa5\x3e\x1c\x08\x0e\x8a\x8a"
+ 			  "\x8e\xb5\x5f\x90\x8e\xfe\x13\x23",
+ 		.rlen   = 53 + 16,
+ 	},
+ };
+ 
+ static struct aead_testvec hmac_md5_ecb_cipher_null_dec_tv_template[] = {
+ 	{
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00",
+ 		.klen   = 8 + 16 + 0,
+ 		.iv     = "",
+ 		.input  = "\x01\x23\x45\x67\x89\xab\xcd\xef"
+ 			  "\xaa\x42\xfe\x43\x8d\xea\xa3\x5a"
+ 			  "\xb9\x3d\x9f\xb1\xa3\x8e\x9b\xae",
+ 		.ilen   = 8 + 16,
+ 		.result = "\x01\x23\x45\x67\x89\xab\xcd\xef",
+ 		.rlen   = 8,
+ 	}, {
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00",
+ 		.klen   = 8 + 16 + 0,
+ 		.iv     = "",
+ 		.input  = "Network Security People Have A Strange Sense Of Humor"
+ 			  "\x73\xa5\x3e\x1c\x08\x0e\x8a\x8a"
+ 			  "\x8e\xb5\x5f\x90\x8e\xfe\x13\x23",
+ 		.ilen   = 53 + 16,
+ 		.result = "Network Security People Have A Strange Sense Of Humor",
+ 		.rlen   = 53,
+ 	},
+ };
+ 
+ static struct aead_testvec hmac_sha1_aes_cbc_enc_tv_temp[] = {
++>>>>>>> 5208ed2ca165 (crypto: testmgr - add aead cbc des, des3_ede tests)
  	{ /* RFC 3602 Case 1 */
  #ifdef __LITTLE_ENDIAN
  		.key    = "\x08\x00"		/* rta length */
@@@ -14096,7 -14697,99 +14194,103 @@@
  	},
  };
  
++<<<<<<< HEAD
 +static struct aead_testvec hmac_sha256_aes_cbc_enc_tv_template[] = {
++=======
+ static struct aead_testvec hmac_sha1_ecb_cipher_null_enc_tv_temp[] = {
+ 	{ /* Input data from RFC 2410 Case 1 */
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00",
+ 		.klen   = 8 + 20 + 0,
+ 		.iv     = "",
+ 		.input  = "\x01\x23\x45\x67\x89\xab\xcd\xef",
+ 		.ilen   = 8,
+ 		.result = "\x01\x23\x45\x67\x89\xab\xcd\xef"
+ 			  "\x40\xc3\x0a\xa1\xc9\xa0\x28\xab"
+ 			  "\x99\x5e\x19\x04\xd1\x72\xef\xb8"
+ 			  "\x8c\x5e\xe4\x08",
+ 		.rlen   = 8 + 20,
+ 	}, { /* Input data from RFC 2410 Case 2 */
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00",
+ 		.klen   = 8 + 20 + 0,
+ 		.iv     = "",
+ 		.input  = "Network Security People Have A Strange Sense Of Humor",
+ 		.ilen   = 53,
+ 		.result = "Network Security People Have A Strange Sense Of Humor"
+ 			  "\x75\x6f\x42\x1e\xf8\x50\x21\xd2"
+ 			  "\x65\x47\xee\x8e\x1a\xef\x16\xf6"
+ 			  "\x91\x56\xe4\xd6",
+ 		.rlen   = 53 + 20,
+ 	},
+ };
+ 
+ static struct aead_testvec hmac_sha1_ecb_cipher_null_dec_tv_temp[] = {
+ 	{
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00",
+ 		.klen   = 8 + 20 + 0,
+ 		.iv     = "",
+ 		.input  = "\x01\x23\x45\x67\x89\xab\xcd\xef"
+ 			  "\x40\xc3\x0a\xa1\xc9\xa0\x28\xab"
+ 			  "\x99\x5e\x19\x04\xd1\x72\xef\xb8"
+ 			  "\x8c\x5e\xe4\x08",
+ 		.ilen   = 8 + 20,
+ 		.result = "\x01\x23\x45\x67\x89\xab\xcd\xef",
+ 		.rlen   = 8,
+ 	}, {
+ #ifdef __LITTLE_ENDIAN
+ 		.key    = "\x08\x00"		/* rta length */
+ 			  "\x01\x00"		/* rta type */
+ #else
+ 		.key    = "\x00\x08"		/* rta length */
+ 			  "\x00\x01"		/* rta type */
+ #endif
+ 			  "\x00\x00\x00\x00"	/* enc key length */
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00\x00\x00\x00\x00"
+ 			  "\x00\x00\x00\x00",
+ 		.klen   = 8 + 20 + 0,
+ 		.iv     = "",
+ 		.input  = "Network Security People Have A Strange Sense Of Humor"
+ 			  "\x75\x6f\x42\x1e\xf8\x50\x21\xd2"
+ 			  "\x65\x47\xee\x8e\x1a\xef\x16\xf6"
+ 			  "\x91\x56\xe4\xd6",
+ 		.ilen   = 53 + 20,
+ 		.result = "Network Security People Have A Strange Sense Of Humor",
+ 		.rlen   = 53,
+ 	},
+ };
+ 
+ static struct aead_testvec hmac_sha256_aes_cbc_enc_tv_temp[] = {
++>>>>>>> 5208ed2ca165 (crypto: testmgr - add aead cbc des, des3_ede tests)
  	{ /* RFC 3602 Case 1 */
  #ifdef __LITTLE_ENDIAN
  		.key    = "\x08\x00"		/* rta length */
* Unmerged path crypto/tcrypt.c
* Unmerged path crypto/testmgr.c
* Unmerged path crypto/testmgr.h
