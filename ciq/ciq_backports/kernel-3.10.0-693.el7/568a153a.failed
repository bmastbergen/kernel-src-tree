net_sched: fix a regression in tc actions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: fix a regression in tc actions (Ivan Vecera) [1420506]
Rebuild_FUZZ: 94.87%
commit-author WANG Cong <xiyou.wangcong@gmail.com>
commit 568a153a22d8f338a5ebda70e6bd139f6d8bb2c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/568a153a.failed

This patch fixes:
1) pass mask rather than size to tcf_hashinfo_init()
2) the cleanup should be in reversed order in mirred_cleanup_module()

	Reported-by: Eric Dumazet <eric.dumazet@gmail.com>
Fixes: 369ba56787d7469c0afd ("net_sched: init struct tcf_hashinfo at register time")
	Cc: Eric Dumazet <eric.dumazet@gmail.com>
	Cc: David S. Miller <davem@davemloft.net>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 568a153a22d8f338a5ebda70e6bd139f6d8bb2c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_csum.c
#	net/sched/act_gact.c
#	net/sched/act_ipt.c
#	net/sched/act_mirred.c
#	net/sched/act_nat.c
#	net/sched/act_pedit.c
#	net/sched/act_police.c
#	net/sched/act_simple.c
#	net/sched/act_skbedit.c
diff --cc net/sched/act_csum.c
index 5c5edf56adbd,9cc6717c5f19..000000000000
--- a/net/sched/act_csum.c
+++ b/net/sched/act_csum.c
@@@ -593,6 -586,10 +593,13 @@@ MODULE_LICENSE("GPL")
  
  static int __init csum_init_module(void)
  {
++<<<<<<< HEAD
++=======
+ 	int err = tcf_hashinfo_init(&csum_hash_info, CSUM_TAB_MASK);
+ 	if (err)
+ 		return err;
+ 
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	return tcf_register_action(&act_csum_ops);
  }
  
diff --cc net/sched/act_gact.c
index 5645a4d32abd,dea927343bf4..000000000000
--- a/net/sched/act_gact.c
+++ b/net/sched/act_gact.c
@@@ -215,6 -208,9 +215,12 @@@ MODULE_LICENSE("GPL")
  
  static int __init gact_init_module(void)
  {
++<<<<<<< HEAD
++=======
+ 	int err = tcf_hashinfo_init(&gact_hash_info, GACT_TAB_MASK);
+ 	if (err)
+ 		return err;
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  #ifdef CONFIG_GACT_PROB
  	pr_info("GACT probability on\n");
  #else
diff --cc net/sched/act_ipt.c
index a1c9f5281c09,e13ecbbfe8c4..000000000000
--- a/net/sched/act_ipt.c
+++ b/net/sched/act_ipt.c
@@@ -322,7 -313,11 +322,15 @@@ MODULE_ALIAS("act_xt")
  
  static int __init ipt_init_module(void)
  {
++<<<<<<< HEAD
 +	int ret1, ret2;
++=======
+ 	int ret1, ret2, err;
+ 	err = tcf_hashinfo_init(&ipt_hash_info, IPT_TAB_MASK);
+ 	if (err)
+ 		return err;
+ 
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	ret1 = tcf_register_action(&act_xt_ops);
  	if (ret1 < 0)
  		printk("Failed to load xt action\n");
diff --cc net/sched/act_mirred.c
index 3ff85aed0e67,9dbb8cd64cb0..000000000000
--- a/net/sched/act_mirred.c
+++ b/net/sched/act_mirred.c
@@@ -284,14 -276,20 +284,27 @@@ static int __init mirred_init_module(vo
  	if (err)
  		return err;
  
++<<<<<<< HEAD
++=======
+ 	err = tcf_hashinfo_init(&mirred_hash_info, MIRRED_TAB_MASK);
+ 	if (err) {
+ 		unregister_netdevice_notifier(&mirred_device_notifier);
+ 		return err;
+ 	}
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	pr_info("Mirror/redirect action on\n");
  	return tcf_register_action(&act_mirred_ops);
  }
  
  static void __exit mirred_cleanup_module(void)
  {
++<<<<<<< HEAD
 +	unregister_netdevice_notifier_rh(&mirred_device_notifier);
++=======
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	tcf_unregister_action(&act_mirred_ops);
+ 	tcf_hashinfo_destroy(&mirred_hash_info);
+ 	unregister_netdevice_notifier(&mirred_device_notifier);
  }
  
  module_init(mirred_init_module);
diff --cc net/sched/act_nat.c
index 6a15ace00241,921fea43fca2..000000000000
--- a/net/sched/act_nat.c
+++ b/net/sched/act_nat.c
@@@ -316,6 -310,9 +316,12 @@@ MODULE_LICENSE("GPL")
  
  static int __init nat_init_module(void)
  {
++<<<<<<< HEAD
++=======
+ 	int err = tcf_hashinfo_init(&nat_hash_info, NAT_TAB_MASK);
+ 	if (err)
+ 		return err;
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	return tcf_register_action(&act_nat_ops);
  }
  
diff --cc net/sched/act_pedit.c
index 03b67674169c,e2520e90a10d..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -252,6 -246,9 +252,12 @@@ MODULE_LICENSE("GPL")
  
  static int __init pedit_init_module(void)
  {
++<<<<<<< HEAD
++=======
+ 	int err = tcf_hashinfo_init(&pedit_hash_info, PEDIT_TAB_MASK);
+ 	if (err)
+ 		return err;
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	return tcf_register_action(&act_pedit_ops);
  }
  
diff --cc net/sched/act_police.c
index 16a62c36928a,819a9a4d1987..000000000000
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@@ -414,7 -396,13 +414,17 @@@ static struct tc_action_ops act_police_
  static int __init
  police_init_module(void)
  {
++<<<<<<< HEAD
 +	return tcf_register_action(&act_police_ops);
++=======
+ 	int err = tcf_hashinfo_init(&police_hash_info, POL_TAB_MASK);
+ 	if (err)
+ 		return err;
+ 	err = tcf_register_action(&act_police_ops);
+ 	if (err)
+ 		tcf_hashinfo_destroy(&police_hash_info);
+ 	return err;
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  }
  
  static void __exit
diff --cc net/sched/act_simple.c
index 31157d3e729c,81aebc162e5c..000000000000
--- a/net/sched/act_simple.c
+++ b/net/sched/act_simple.c
@@@ -209,9 -202,17 +209,18 @@@ MODULE_LICENSE("GPL")
  
  static int __init simp_init_module(void)
  {
++<<<<<<< HEAD
 +	int ret = tcf_register_action(&act_simp_ops);
++=======
+ 	int err, ret;
+ 	err = tcf_hashinfo_init(&simp_hash_info, SIMP_TAB_MASK);
+ 	if (err)
+ 		return err;
+ 
+ 	ret = tcf_register_action(&act_simp_ops);
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	if (!ret)
  		pr_info("Simple TC action Loaded\n");
 -	else
 -		tcf_hashinfo_destroy(&simp_hash_info);
 -
  	return ret;
  }
  
diff --cc net/sched/act_skbedit.c
index 35ea643b4325,aa0a4c056f31..000000000000
--- a/net/sched/act_skbedit.c
+++ b/net/sched/act_skbedit.c
@@@ -211,6 -203,9 +211,12 @@@ MODULE_LICENSE("GPL")
  
  static int __init skbedit_init_module(void)
  {
++<<<<<<< HEAD
++=======
+ 	int err = tcf_hashinfo_init(&skbedit_hash_info, SKBEDIT_TAB_MASK);
+ 	if (err)
+ 		return err;
++>>>>>>> 568a153a22d8 (net_sched: fix a regression in tc actions)
  	return tcf_register_action(&act_skbedit_ops);
  }
  
* Unmerged path net/sched/act_csum.c
* Unmerged path net/sched/act_gact.c
* Unmerged path net/sched/act_ipt.c
* Unmerged path net/sched/act_mirred.c
* Unmerged path net/sched/act_nat.c
* Unmerged path net/sched/act_pedit.c
* Unmerged path net/sched/act_police.c
* Unmerged path net/sched/act_simple.c
* Unmerged path net/sched/act_skbedit.c
