scsi: aacraid: Remove duplicate irq management code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] aacraid: Remove duplicate irq management code (Scott Benesh) [1384213]
Rebuild_FUZZ: 93.75%
commit-author Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
commit d3e19175004583c65361e96da424175b99c3e715
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d3e19175.failed

Removed duplicate code that for acquiring and releasing irqs

	Signed-off-by: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
	Signed-off-by: Dave Carroll <David.Carroll@microsemi.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit d3e19175004583c65361e96da424175b99c3e715)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/aacraid/linit.c
diff --cc drivers/scsi/aacraid/linit.c
index ea65fb69bca6,fd26a2d95239..000000000000
--- a/drivers/scsi/aacraid/linit.c
+++ b/drivers/scsi/aacraid/linit.c
@@@ -1433,28 -1327,8 +1433,30 @@@ static int aac_probe_one(struct pci_de
  
  static void aac_release_resources(struct aac_dev *aac)
  {
- 	int i;
- 
  	aac_adapter_disable_int(aac);
++<<<<<<< HEAD
 +	if (aac->pdev->device == PMC_DEVICE_S6 ||
 +	    aac->pdev->device == PMC_DEVICE_S7 ||
 +	    aac->pdev->device == PMC_DEVICE_S8 ||
 +	    aac->pdev->device == PMC_DEVICE_S9) {
 +		if (aac->max_msix > 1) {
 +			for (i = 0; i < aac->max_msix; i++)
 +				free_irq(aac->msixentry[i].vector,
 +					&(aac->aac_msix[i]));
 +		} else {
 +			free_irq(aac->pdev->irq, &(aac->aac_msix[0]));
 +		}
 +	} else {
 +		free_irq(aac->pdev->irq, aac);
 +	}
 +	if (aac->msi)
 +		pci_disable_msi(aac->pdev);
 +	else if (aac->max_msix > 1)
 +		pci_disable_msix(aac->pdev);
 +
++=======
+ 	aac_free_irq(aac);
++>>>>>>> d3e191750045 (scsi: aacraid: Remove duplicate irq management code)
  }
  
  static int aac_acquire_resources(struct aac_dev *dev)
@@@ -1483,37 -1354,8 +1482,42 @@@
  	if (dev->msi_enabled)
  		aac_src_access_devreg(dev, AAC_ENABLE_MSIX);
  
++<<<<<<< HEAD
 +	if (!dev->sync_mode && dev->msi_enabled && dev->max_msix > 1) {
 +		for (i = 0; i < dev->max_msix; i++) {
 +			dev->aac_msix[i].vector_no = i;
 +			dev->aac_msix[i].dev = dev;
 +
 +			if (request_irq(dev->msixentry[i].vector,
 +					dev->a_ops.adapter_intr,
 +					0, "aacraid", &(dev->aac_msix[i]))) {
 +				printk(KERN_ERR "%s%d: Failed to register IRQ for vector %d.\n",
 +						name, instance, i);
 +				for (j = 0 ; j < i ; j++)
 +					free_irq(dev->msixentry[j].vector,
 +						 &(dev->aac_msix[j]));
 +				pci_disable_msix(dev->pdev);
 +				goto error_iounmap;
 +			}
 +		}
 +	} else {
 +		dev->aac_msix[0].vector_no = 0;
 +		dev->aac_msix[0].dev = dev;
 +
 +		if (request_irq(dev->pdev->irq, dev->a_ops.adapter_intr,
 +			IRQF_SHARED, "aacraid",
 +			&(dev->aac_msix[0])) < 0) {
 +			if (dev->msi)
 +				pci_disable_msi(dev->pdev);
 +			printk(KERN_ERR "%s%d: Interrupt unavailable.\n",
 +					name, instance);
 +			goto error_iounmap;
 +		}
 +	}
++=======
+ 	if (aac_acquire_irq(dev))
+ 		goto error_iounmap;
++>>>>>>> d3e191750045 (scsi: aacraid: Remove duplicate irq management code)
  
  	aac_adapter_enable_int(dev);
  
* Unmerged path drivers/scsi/aacraid/linit.c
