btrfs: make extent_range_clear_dirty_for_io return void

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author David Sterba <dsterba@suse.com>
commit bd1fa4f0b0ddbed05ef98c28048d00db727c4b0e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bd1fa4f0.failed

Does not return any errors, nor anything from the callgraph. There's a
BUG_ON but it's a sanity check and not an error condition we could
recover from.

	Signed-off-by: David Sterba <dsterba@suse.com>
(cherry picked from commit bd1fa4f0b0ddbed05ef98c28048d00db727c4b0e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/extent_io.c
diff --cc fs/btrfs/extent_io.c
index 71e58a8468eb,e55a728408bb..000000000000
--- a/fs/btrfs/extent_io.c
+++ b/fs/btrfs/extent_io.c
@@@ -1363,7 -1438,20 +1363,24 @@@ int try_lock_extent(struct extent_io_tr
  	return 1;
  }
  
++<<<<<<< HEAD
 +int extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end)
++=======
+ int unlock_extent_cached(struct extent_io_tree *tree, u64 start, u64 end,
+ 			 struct extent_state **cached, gfp_t mask)
+ {
+ 	return clear_extent_bit(tree, start, end, EXTENT_LOCKED, 1, 0, cached,
+ 				mask);
+ }
+ 
+ int unlock_extent(struct extent_io_tree *tree, u64 start, u64 end)
+ {
+ 	return clear_extent_bit(tree, start, end, EXTENT_LOCKED, 1, 0, NULL,
+ 				GFP_NOFS);
+ }
+ 
+ void extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end)
++>>>>>>> bd1fa4f0b0dd (btrfs: make extent_range_clear_dirty_for_io return void)
  {
  	unsigned long index = start >> PAGE_CACHE_SHIFT;
  	unsigned long end_index = end >> PAGE_CACHE_SHIFT;
* Unmerged path fs/btrfs/extent_io.c
diff --git a/fs/btrfs/extent_io.h b/fs/btrfs/extent_io.h
index 7f79e9b25809..78af35bbb191 100644
--- a/fs/btrfs/extent_io.h
+++ b/fs/btrfs/extent_io.h
@@ -406,7 +406,7 @@ int map_private_extent_buffer(struct extent_buffer *eb, unsigned long offset,
 		      unsigned long min_len, char **map,
 		      unsigned long *map_start,
 		      unsigned long *map_len);
-int extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end);
+void extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end);
 int extent_range_redirty_for_io(struct inode *inode, u64 start, u64 end);
 void extent_clear_unlock_delalloc(struct inode *inode, u64 start, u64 end,
 				 struct page *locked_page,
