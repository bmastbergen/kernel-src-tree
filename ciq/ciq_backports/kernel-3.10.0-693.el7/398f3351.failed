net/mlx5e: Mark enabled RQTs instances explicitly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Mark enabled RQTs instances explicitly (Don Dutile) [1383788 1417284]
Rebuild_FUZZ: 95.74%
commit-author Hadar Hen Zion <hadarh@mellanox.com>
commit 398f33511e97aad7f259e864a1596fc8ef559dc1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/398f3351.failed

In the current driver implementation two types of receive queue
tables (RQTs) are in use - direct and indirect.

Change the driver to mark each new created RQT (direct or indirect)
as "enabled". This behaviour is needed for introducing new mlx5e
instances which serve to represent SRIOV VFs.

The VF representors will have only one type of RQTs (direct).

An "enabled" flag is added to each RQT to allow better handling
and code sharing between the representors and the nic netdevices.

This patch doesn't add any new functionality.

	Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 398f33511e97aad7f259e864a1596fc8ef559dc1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 5eea7e35421a,91c6bbeca656..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -455,26 -492,80 +455,77 @@@ struct mlx5e_vlan_db 
  	bool          filter_disabled;
  };
  
 -struct mlx5e_l2_table {
 -	struct mlx5e_flow_table    ft;
 -	struct hlist_head          netdev_uc[MLX5E_L2_ADDR_HASH_SIZE];
 -	struct hlist_head          netdev_mc[MLX5E_L2_ADDR_HASH_SIZE];
 -	struct mlx5e_l2_rule	   broadcast;
 -	struct mlx5e_l2_rule	   allmulti;
 -	struct mlx5e_l2_rule	   promisc;
 -	bool                       broadcast_enabled;
 -	bool                       allmulti_enabled;
 -	bool                       promisc_enabled;
 +struct mlx5e_vxlan_db {
 +	spinlock_t			lock; /* protect vxlan table */
 +	struct radix_tree_root		tree;
  };
  
 -/* L3/L4 traffic type classifier */
 -struct mlx5e_ttc_table {
 -	struct mlx5e_flow_table  ft;
 -	struct mlx5_flow_rule	 *rules[MLX5E_NUM_TT];
 +struct mlx5e_flow_table {
 +	int num_groups;
 +	struct mlx5_flow_table		*t;
 +	struct mlx5_flow_group		**g;
  };
  
 -#define ARFS_HASH_SHIFT BITS_PER_BYTE
 -#define ARFS_HASH_SIZE BIT(BITS_PER_BYTE)
 -struct arfs_table {
 -	struct mlx5e_flow_table  ft;
 -	struct mlx5_flow_rule    *default_rule;
 -	struct hlist_head	 rules_hash[ARFS_HASH_SIZE];
 +struct mlx5e_flow_tables {
 +	struct mlx5_flow_namespace	*ns;
 +	struct mlx5e_flow_table		vlan;
 +	struct mlx5e_flow_table		main;
  };
  
++<<<<<<< HEAD
 +struct mlx5e_direct_tir {
 +	u32              tirn;
 +	u32              rqtn;
++=======
+ enum  arfs_type {
+ 	ARFS_IPV4_TCP,
+ 	ARFS_IPV6_TCP,
+ 	ARFS_IPV4_UDP,
+ 	ARFS_IPV6_UDP,
+ 	ARFS_NUM_TYPES,
+ };
+ 
+ struct mlx5e_arfs_tables {
+ 	struct arfs_table arfs_tables[ARFS_NUM_TYPES];
+ 	/* Protect aRFS rules list */
+ 	spinlock_t                     arfs_lock;
+ 	struct list_head               rules;
+ 	int                            last_filter_id;
+ 	struct workqueue_struct        *wq;
+ };
+ 
+ /* NIC prio FTS */
+ enum {
+ 	MLX5E_VLAN_FT_LEVEL = 0,
+ 	MLX5E_L2_FT_LEVEL,
+ 	MLX5E_TTC_FT_LEVEL,
+ 	MLX5E_ARFS_FT_LEVEL
+ };
+ 
+ struct mlx5e_flow_steering {
+ 	struct mlx5_flow_namespace      *ns;
+ 	struct mlx5e_tc_table           tc;
+ 	struct mlx5e_vlan_table         vlan;
+ 	struct mlx5e_l2_table           l2;
+ 	struct mlx5e_ttc_table          ttc;
+ 	struct mlx5e_arfs_tables        arfs;
+ };
+ 
+ struct mlx5e_rqt {
+ 	u32              rqtn;
+ 	bool		 enabled;
+ };
+ 
+ struct mlx5e_tir {
+ 	u32		  tirn;
+ 	struct mlx5e_rqt  rqt;
+ 	struct list_head  list;
+ };
+ 
+ enum {
+ 	MLX5E_TC_PRIO = 0,
+ 	MLX5E_NIC_PRIO
++>>>>>>> 398f33511e97 (net/mlx5e: Mark enabled RQTs instances explicitly)
  };
  
  struct mlx5e_priv {
@@@ -494,16 -581,13 +545,23 @@@
  
  	struct mlx5e_channel     **channel;
  	u32                        tisn[MLX5E_MAX_NUM_TC];
++<<<<<<< HEAD
 +	u32                        indir_rqtn;
 +	u32                        indir_tirn[MLX5E_NUM_INDIR_TIRS];
 +	struct mlx5e_direct_tir    direct_tir[MLX5E_MAX_NUM_CHANNELS];
++=======
+ 	struct mlx5e_rqt           indir_rqt;
+ 	struct mlx5e_tir           indir_tir[MLX5E_NUM_INDIR_TIRS];
+ 	struct mlx5e_tir           direct_tir[MLX5E_MAX_NUM_CHANNELS];
+ 	u32                        tx_rates[MLX5E_MAX_NUM_SQS];
++>>>>>>> 398f33511e97 (net/mlx5e: Mark enabled RQTs instances explicitly)
  
 -	struct mlx5e_flow_steering fs;
 +	struct mlx5e_flow_tables   fts;
 +	struct mlx5e_eth_addr_db   eth_addr;
 +	struct mlx5e_vlan_db       vlan;
 +#ifdef CONFIG_MLX5_CORE_EN_VXLAN
  	struct mlx5e_vxlan_db      vxlan;
 +#endif
  
  	struct mlx5e_params        params;
  	struct workqueue_struct    *wq;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 0c9d38242297,7f1f1ec24475..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2107,11 -2150,11 +2116,16 @@@ static int mlx5e_create_tirs(struct mlx
  	/* direct tirs */
  	for (ix = 0; ix < nch; ix++) {
  		memset(in, 0, inlen);
 -		tir = &priv->direct_tir[ix];
 +		tirn = &priv->direct_tir[ix].tirn;
  		tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
  		mlx5e_build_direct_tir_ctx(priv, tirc,
++<<<<<<< HEAD
 +					   priv->direct_tir[ix].rqtn);
 +		err = mlx5_core_create_tir(priv->mdev, in, inlen, tirn);
++=======
+ 					   priv->direct_tir[ix].rqt.rqtn);
+ 		err = mlx5e_create_tir(priv->mdev, tir, in, inlen);
++>>>>>>> 398f33511e97 (net/mlx5e: Mark enabled RQTs instances explicitly)
  		if (err)
  			goto err_destroy_ch_tirs;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 4470bb494e73..d9cf5e3a40f5 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -869,7 +869,7 @@ static int mlx5e_set_rxfh(struct net_device *dev, const u32 *indir,
 	mutex_lock(&priv->state_lock);
 
 	if (indir) {
-		u32 rqtn = priv->indir_rqtn;
+		u32 rqtn = priv->indir_rqt.rqtn;
 
 		memcpy(priv->params.indirection_rqt, indir,
 		       sizeof(priv->params.indirection_rqt));
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
