vfio: Fix handling of error returned by 'vfio_group_get_from_dev()'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [vfio] Fix handling of error returned by 'vfio_group_get_from_dev()' (Tarun Gupta) [1116064]
Rebuild_FUZZ: 95.31%
commit-author Christophe JAILLET <christophe.jaillet@wanadoo.fr>
commit d256459fae4dba66d50850f2d948306503818913
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d256459f.failed

'vfio_group_get_from_dev()' seems to return only NULL on error, not an
error pointer.

Fixes: 2169037dc322 ("vfio iommu: Added pin and unpin callback functions to vfio_iommu_driver_ops")
Fixes: c086de818dd8 ("vfio iommu: Add blocking notifier to notify DMA_UNMAP")
	Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit d256459fae4dba66d50850f2d948306503818913)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/vfio.c
diff --cc drivers/vfio/vfio.c
index 4ed340b370b6,7b39313abf0d..000000000000
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@@ -2015,6 -2008,79 +2015,82 @@@ err_unpin_pages
  }
  EXPORT_SYMBOL(vfio_unpin_pages);
  
++<<<<<<< HEAD
++=======
+ int vfio_register_notifier(struct device *dev, struct notifier_block *nb)
+ {
+ 	struct vfio_container *container;
+ 	struct vfio_group *group;
+ 	struct vfio_iommu_driver *driver;
+ 	int ret;
+ 
+ 	if (!dev || !nb)
+ 		return -EINVAL;
+ 
+ 	group = vfio_group_get_from_dev(dev);
+ 	if (!group)
+ 		return -ENODEV;
+ 
+ 	ret = vfio_group_add_container_user(group);
+ 	if (ret)
+ 		goto err_register_nb;
+ 
+ 	container = group->container;
+ 	down_read(&container->group_lock);
+ 
+ 	driver = container->iommu_driver;
+ 	if (likely(driver && driver->ops->register_notifier))
+ 		ret = driver->ops->register_notifier(container->iommu_data, nb);
+ 	else
+ 		ret = -ENOTTY;
+ 
+ 	up_read(&container->group_lock);
+ 	vfio_group_try_dissolve_container(group);
+ 
+ err_register_nb:
+ 	vfio_group_put(group);
+ 	return ret;
+ }
+ EXPORT_SYMBOL(vfio_register_notifier);
+ 
+ int vfio_unregister_notifier(struct device *dev, struct notifier_block *nb)
+ {
+ 	struct vfio_container *container;
+ 	struct vfio_group *group;
+ 	struct vfio_iommu_driver *driver;
+ 	int ret;
+ 
+ 	if (!dev || !nb)
+ 		return -EINVAL;
+ 
+ 	group = vfio_group_get_from_dev(dev);
+ 	if (!group)
+ 		return -ENODEV;
+ 
+ 	ret = vfio_group_add_container_user(group);
+ 	if (ret)
+ 		goto err_unregister_nb;
+ 
+ 	container = group->container;
+ 	down_read(&container->group_lock);
+ 
+ 	driver = container->iommu_driver;
+ 	if (likely(driver && driver->ops->unregister_notifier))
+ 		ret = driver->ops->unregister_notifier(container->iommu_data,
+ 						       nb);
+ 	else
+ 		ret = -ENOTTY;
+ 
+ 	up_read(&container->group_lock);
+ 	vfio_group_try_dissolve_container(group);
+ 
+ err_unregister_nb:
+ 	vfio_group_put(group);
+ 	return ret;
+ }
+ EXPORT_SYMBOL(vfio_unregister_notifier);
+ 
++>>>>>>> d256459fae4d (vfio: Fix handling of error returned by 'vfio_group_get_from_dev()')
  /**
   * Module/class support
   */
* Unmerged path drivers/vfio/vfio.c
