net/mlx5: Add LAG flow steering namespace

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [kernel] mlx5: Add LAG flow steering namespace (Don Dutile) [1385219 1385330 1417285]
Rebuild_FUZZ: 94.87%
commit-author Aviv Heller <avivh@mellanox.com>
commit 3e75d4ebaae7aac5ba82fc7a6e0e6fb56dac1916
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3e75d4eb.failed

This namespace is used for LAG demux flowtable.

The idea is to position the LAG demux ft between
bypass and kernel flowtables, allowing raw-eth
traffic from both ports to be received by the PF0
IB device.

	Signed-off-by: Aviv Heller <avivh@mellanox.com>
	Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
(cherry picked from commit 3e75d4ebaae7aac5ba82fc7a6e0e6fb56dac1916)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index 3b6147aebe10,ac414b7f366e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -102,18 -115,22 +106,26 @@@ static struct init_tree_node 
  	int num_levels;
  } root_fs = {
  	.type = FS_TYPE_NAMESPACE,
++<<<<<<< HEAD
 +	.ar_size = 5,
++=======
+ 	.ar_size = 7,
++>>>>>>> 3e75d4ebaae7 (net/mlx5: Add LAG flow steering namespace)
  	.children = (struct init_tree_node[]) {
  		ADD_PRIO(0, BY_PASS_MIN_LEVEL, 0,
 -			 FS_CHAINING_CAPS,
 +			 FS_REQUIRED_CAPS(FS_CAP(flow_table_properties_nic_receive.flow_modify_en),
 +					  FS_CAP(flow_table_properties_nic_receive.modify_root),
 +					  FS_CAP(flow_table_properties_nic_receive.identified_miss_table_mode),
 +					  FS_CAP(flow_table_properties_nic_receive.flow_table_modify)),
  			 ADD_NS(ADD_MULTIPLE_PRIO(MLX5_BY_PASS_NUM_PRIOS,
  						  BY_PASS_PRIO_NUM_LEVELS))),
+ 		ADD_PRIO(0, LAG_MIN_LEVEL, 0,
+ 			 FS_CHAINING_CAPS,
+ 			 ADD_NS(ADD_MULTIPLE_PRIO(LAG_NUM_PRIOS,
+ 						  LAG_PRIO_NUM_LEVELS))),
  		ADD_PRIO(0, OFFLOADS_MIN_LEVEL, 0, {},
  			 ADD_NS(ADD_MULTIPLE_PRIO(OFFLOADS_NUM_PRIOS, OFFLOADS_MAX_FT))),
 -		ADD_PRIO(0, ETHTOOL_MIN_LEVEL, 0,
 -			 FS_CHAINING_CAPS,
 -			 ADD_NS(ADD_MULTIPLE_PRIO(ETHTOOL_NUM_PRIOS,
 -						  ETHTOOL_PRIO_NUM_LEVELS))),
 +
  		ADD_PRIO(0, KERNEL_MIN_LEVEL, 0, {},
  			 ADD_NS(ADD_MULTIPLE_PRIO(1, 1),
  				ADD_MULTIPLE_PRIO(KERNEL_NIC_NUM_PRIOS,
@@@ -1297,7 -1404,9 +1309,8 @@@ struct mlx5_flow_namespace *mlx5_get_fl
  
  	switch (type) {
  	case MLX5_FLOW_NAMESPACE_BYPASS:
+ 	case MLX5_FLOW_NAMESPACE_LAG:
  	case MLX5_FLOW_NAMESPACE_OFFLOADS:
 -	case MLX5_FLOW_NAMESPACE_ETHTOOL:
  	case MLX5_FLOW_NAMESPACE_KERNEL:
  	case MLX5_FLOW_NAMESPACE_LEFTOVERS:
  	case MLX5_FLOW_NAMESPACE_ANCHOR:
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --git a/include/linux/mlx5/fs.h b/include/linux/mlx5/fs.h
index 3f3444d24756..695f44d45c9a 100644
--- a/include/linux/mlx5/fs.h
+++ b/include/linux/mlx5/fs.h
@@ -54,6 +54,7 @@ static inline void build_leftovers_ft_param(int *priority,
 
 enum mlx5_flow_namespace_type {
 	MLX5_FLOW_NAMESPACE_BYPASS,
+	MLX5_FLOW_NAMESPACE_LAG,
 	MLX5_FLOW_NAMESPACE_OFFLOADS,
 	MLX5_FLOW_NAMESPACE_KERNEL,
 	MLX5_FLOW_NAMESPACE_LEFTOVERS,
