scsi: virtio_scsi: Always try to read VPD pages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [scsi] virtio_scsi: Always try to read VPD pages (David Gibson) [1436675]
Rebuild_FUZZ: 93.18%
commit-author David Gibson <david@gibson.dropbear.id.au>
commit 25d1d50e23275e141e3a3fe06c25a99f4c4bf4e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/25d1d50e.failed

Passed through SCSI targets may have transfer limits which come from the
host SCSI controller or something on the host side other than the target
itself.

To make this work properly, the hypervisor can adjust the target's VPD
information to advertise these limits.  But for that to work, the guest
has to look at the VPD pages, which we won't do by default if it is an
SPC-2 device, even if it does actually support it.

This adds a workaround to address this, forcing devices attached to a
virtio-scsi controller to always check the VPD pages.  This is modelled
on a similar workaround for the storvsc (Hyper-V) SCSI controller,
although that exists for slightly different reasons.

A specific case which causes this is a volume from IBM's IPR RAID
controller (which presents as an SPC-2 device, although it does support
VPD) passed through with qemu's 'scsi-block' device.

[mkp: fixed typo]

	Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
	Acked-by: Paolo Bonzini <pbonzini@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 25d1d50e23275e141e3a3fe06c25a99f4c4bf4e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/virtio_scsi.c
diff --cc drivers/scsi/virtio_scsi.c
index 573574bc20f0,a29d068b7696..000000000000
--- a/drivers/scsi/virtio_scsi.c
+++ b/drivers/scsi/virtio_scsi.c
@@@ -26,6 -27,11 +26,13 @@@
  #include <scsi/scsi_host.h>
  #include <scsi/scsi_device.h>
  #include <scsi/scsi_cmnd.h>
++<<<<<<< HEAD
++=======
+ #include <scsi/scsi_tcq.h>
+ #include <scsi/scsi_devinfo.h>
+ #include <linux/seqlock.h>
+ #include <linux/blk-mq-virtio.h>
++>>>>>>> 25d1d50e2327 (scsi: virtio_scsi: Always try to read VPD pages)
  
  #define VIRTIO_SCSI_MEMPOOL_SZ 64
  #define VIRTIO_SCSI_EVENT_LEN 8
@@@ -661,6 -706,41 +668,44 @@@ static int virtscsi_device_reset(struc
  	return virtscsi_tmf(vscsi, cmd);
  }
  
++<<<<<<< HEAD
++=======
+ static int virtscsi_device_alloc(struct scsi_device *sdevice)
+ {
+ 	/*
+ 	 * Passed through SCSI targets (e.g. with qemu's 'scsi-block')
+ 	 * may have transfer limits which come from the host SCSI
+ 	 * controller or something on the host side other than the
+ 	 * target itself.
+ 	 *
+ 	 * To make this work properly, the hypervisor can adjust the
+ 	 * target's VPD information to advertise these limits.  But
+ 	 * for that to work, the guest has to look at the VPD pages,
+ 	 * which we won't do by default if it is an SPC-2 device, even
+ 	 * if it does actually support it.
+ 	 *
+ 	 * So, set the blist to always try to read the VPD pages.
+ 	 */
+ 	sdevice->sdev_bflags = BLIST_TRY_VPD_PAGES;
+ 
+ 	return 0;
+ }
+ 
+ 
+ /**
+  * virtscsi_change_queue_depth() - Change a virtscsi target's queue depth
+  * @sdev:	Virtscsi target whose queue depth to change
+  * @qdepth:	New queue depth
+  */
+ static int virtscsi_change_queue_depth(struct scsi_device *sdev, int qdepth)
+ {
+ 	struct Scsi_Host *shost = sdev->host;
+ 	int max_depth = shost->cmd_per_lun;
+ 
+ 	return scsi_change_queue_depth(sdev, min(max_depth, qdepth));
+ }
+ 
++>>>>>>> 25d1d50e2327 (scsi: virtio_scsi: Always try to read VPD pages)
  static int virtscsi_abort(struct scsi_cmnd *sc)
  {
  	struct virtio_scsi *vscsi = shost_priv(sc->device->host);
@@@ -711,9 -801,12 +756,10 @@@ static struct scsi_host_template virtsc
  	.name = "Virtio SCSI HBA",
  	.proc_name = "virtio_scsi",
  	.this_id = -1,
 -	.cmd_size = sizeof(struct virtio_scsi_cmd),
  	.queuecommand = virtscsi_queuecommand_single,
 -	.change_queue_depth = virtscsi_change_queue_depth,
  	.eh_abort_handler = virtscsi_abort,
  	.eh_device_reset_handler = virtscsi_device_reset,
+ 	.slave_alloc = virtscsi_device_alloc,
  
  	.can_queue = 1024,
  	.dma_boundary = UINT_MAX,
* Unmerged path drivers/scsi/virtio_scsi.c
