net/sched: act_mirred: Add new tc_action_ops get_dev()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: act_mirred: Add new tc_action_ops get_dev() (Jonathan Toppins) [1393375]
Rebuild_FUZZ: 96.15%
commit-author Hadar Hen Zion <hadarh@mellanox.com>
commit 255cb30425c0ced57d6d85f3e7cddb99b9576046
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/255cb304.failed

Adding support to a new tc_action_ops.
get_dev is a general option which allows to get the underline
device when trying to offload a tc rule.

In case of mirred action the returned device is the mirred (egress)
device.

	Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
	Reviewed-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 255cb30425c0ced57d6d85f3e7cddb99b9576046)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/act_api.h
#	net/sched/act_mirred.c
diff --cc include/net/act_api.h
index 11aac9abd0ca,9dddf77a69cc..000000000000
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@@ -51,50 -102,83 +51,58 @@@ static inline unsigned int tcf_hash(u3
  #define ACT_P_CREATED 1
  #define ACT_P_DELETED 1
  
 +struct tc_action {
 +	void			*priv;
 +	const struct tc_action_ops	*ops;
 +	__u32			type; /* for backward compat(TCA_OLD_COMPAT) */
 +	__u32			order;
 +	struct list_head	list;
 +};
 +
 +#define TCA_CAP_NONE 0
  struct tc_action_ops {
  	struct list_head head;
 +	struct tcf_hashinfo *hinfo;
  	char    kind[IFNAMSIZ];
  	__u32   type; /* TBD to match kind */
 -	size_t	size;
 +	__u32 	capab;  /* capabilities includes 4 bit version */
  	struct module		*owner;
 -	int     (*act)(struct sk_buff *, const struct tc_action *,
 -		       struct tcf_result *);
 +	int     (*act)(struct sk_buff *, const struct tc_action *, struct tcf_result *);
  	int     (*dump)(struct sk_buff *, struct tc_action *, int, int);
 -	void	(*cleanup)(struct tc_action *, int bind);
 -	int     (*lookup)(struct net *, struct tc_action **, u32);
 +	int     (*cleanup)(struct tc_action *, int bind);
 +	int     (*lookup)(struct tc_action *, u32);
  	int     (*init)(struct net *net, struct nlattr *nla,
 -			struct nlattr *est, struct tc_action **act, int ovr,
 +			struct nlattr *est, struct tc_action *act, int ovr,
  			int bind);
++<<<<<<< HEAD
 +	int     (*walk)(struct sk_buff *, struct netlink_callback *, int, struct tc_action *);
++=======
+ 	int     (*walk)(struct net *, struct sk_buff *,
+ 			struct netlink_callback *, int, const struct tc_action_ops *);
+ 	void	(*stats_update)(struct tc_action *, u64, u32, u64);
+ 	int	(*get_dev)(const struct tc_action *a, struct net *net,
+ 			   struct net_device **mirred_dev);
++>>>>>>> 255cb30425c0 (net/sched: act_mirred: Add new tc_action_ops get_dev())
  };
  
 -struct tc_action_net {
 -	struct tcf_hashinfo *hinfo;
 -	const struct tc_action_ops *ops;
 -};
 -
 -static inline
 -int tc_action_net_init(struct tc_action_net *tn,
 -		       const struct tc_action_ops *ops, unsigned int mask)
 -{
 -	int err = 0;
 -
 -	tn->hinfo = kmalloc(sizeof(*tn->hinfo), GFP_KERNEL);
 -	if (!tn->hinfo)
 -		return -ENOMEM;
 -	tn->ops = ops;
 -	err = tcf_hashinfo_init(tn->hinfo, mask);
 -	if (err)
 -		kfree(tn->hinfo);
 -	return err;
 -}
 -
 -void tcf_hashinfo_destroy(const struct tc_action_ops *ops,
 -			  struct tcf_hashinfo *hinfo);
 -
 -static inline void tc_action_net_exit(struct tc_action_net *tn)
 -{
 -	tcf_hashinfo_destroy(tn->ops, tn->hinfo);
 -	kfree(tn->hinfo);
 -}
 -
 -int tcf_generic_walker(struct tc_action_net *tn, struct sk_buff *skb,
 -		       struct netlink_callback *cb, int type,
 -		       const struct tc_action_ops *ops);
 -int tcf_hash_search(struct tc_action_net *tn, struct tc_action **a, u32 index);
 -u32 tcf_hash_new_index(struct tc_action_net *tn);
 -bool tcf_hash_check(struct tc_action_net *tn, u32 index, struct tc_action **a,
 -		    int bind);
 -int tcf_hash_create(struct tc_action_net *tn, u32 index, struct nlattr *est,
 -		    struct tc_action **a, const struct tc_action_ops *ops, int bind,
 -		    bool cpustats);
 -void tcf_hash_cleanup(struct tc_action *a, struct nlattr *est);
 -void tcf_hash_insert(struct tc_action_net *tn, struct tc_action *a);
 -
 -int __tcf_hash_release(struct tc_action *a, bool bind, bool strict);
 -
 -static inline int tcf_hash_release(struct tc_action *a, bool bind)
 -{
 -	return __tcf_hash_release(a, bind, false);
 -}
 -
 -int tcf_register_action(struct tc_action_ops *a, struct pernet_operations *ops);
 -int tcf_unregister_action(struct tc_action_ops *a,
 -			  struct pernet_operations *ops);
 -int tcf_action_destroy(struct list_head *actions, int bind);
 -int tcf_action_exec(struct sk_buff *skb, struct tc_action **actions,
 -		    int nr_actions, struct tcf_result *res);
 +struct tcf_common *tcf_hash_lookup(u32 index, struct tcf_hashinfo *hinfo);
 +void tcf_hash_destroy(struct tcf_common *p, struct tcf_hashinfo *hinfo);
 +int tcf_hash_release(struct tcf_common *p, int bind,
 +		     struct tcf_hashinfo *hinfo);
 +u32 tcf_hash_new_index(u32 *idx_gen, struct tcf_hashinfo *hinfo);
 +struct tcf_common *tcf_hash_check(u32 index, struct tc_action *a,
 +				  int bind, struct tcf_hashinfo *hinfo);
 +struct tcf_common *tcf_hash_create(u32 index, struct nlattr *est,
 +				   struct tc_action *a, int size,
 +				   int bind, u32 *idx_gen,
 +				   struct tcf_hashinfo *hinfo);
 +void tcf_hash_insert(struct tcf_common *p, struct tcf_hashinfo *hinfo);
 +
 +int tcf_register_action(struct tc_action_ops *a);
 +int tcf_unregister_action(struct tc_action_ops *a);
 +void tcf_action_destroy(struct list_head *actions, int bind);
 +int tcf_action_exec(struct sk_buff *skb, const struct list_head *actions,
 +		    struct tcf_result *res);
  int tcf_action_init(struct net *net, struct nlattr *nla,
  				  struct nlattr *est, char *n, int ovr,
  				  int bind, struct list_head *);
diff --cc net/sched/act_mirred.c
index 4b6188539f6c,bb09ba3ca5c2..000000000000
--- a/net/sched/act_mirred.c
+++ b/net/sched/act_mirred.c
@@@ -263,17 -315,51 +263,58 @@@ static struct notifier_block mirred_dev
  	.notifier_call = mirred_device_event,
  };
  
++<<<<<<< HEAD
++=======
+ static int tcf_mirred_device(const struct tc_action *a, struct net *net,
+ 			     struct net_device **mirred_dev)
+ {
+ 	int ifindex = tcf_mirred_ifindex(a);
+ 
+ 	*mirred_dev = __dev_get_by_index(net, ifindex);
+ 	if (!mirred_dev)
+ 		return -EINVAL;
+ 	return 0;
+ }
++>>>>>>> 255cb30425c0 (net/sched: act_mirred: Add new tc_action_ops get_dev())
  
  static struct tc_action_ops act_mirred_ops = {
  	.kind		=	"mirred",
 +	.hinfo		=	&mirred_hash_info,
  	.type		=	TCA_ACT_MIRRED,
 +	.capab		=	TCA_CAP_NONE,
  	.owner		=	THIS_MODULE,
  	.act		=	tcf_mirred,
 -	.stats_update	=	tcf_stats_update,
  	.dump		=	tcf_mirred_dump,
 -	.cleanup	=	tcf_mirred_release,
 +	.cleanup	=	tcf_mirred_cleanup,
  	.init		=	tcf_mirred_init,
++<<<<<<< HEAD
++=======
+ 	.walk		=	tcf_mirred_walker,
+ 	.lookup		=	tcf_mirred_search,
+ 	.size		=	sizeof(struct tcf_mirred),
+ 	.get_dev	=	tcf_mirred_device,
+ };
+ 
+ static __net_init int mirred_init_net(struct net *net)
+ {
+ 	struct tc_action_net *tn = net_generic(net, mirred_net_id);
+ 
+ 	return tc_action_net_init(tn, &act_mirred_ops, MIRRED_TAB_MASK);
+ }
+ 
+ static void __net_exit mirred_exit_net(struct net *net)
+ {
+ 	struct tc_action_net *tn = net_generic(net, mirred_net_id);
+ 
+ 	tc_action_net_exit(tn);
+ }
+ 
+ static struct pernet_operations mirred_net_ops = {
+ 	.init = mirred_init_net,
+ 	.exit = mirred_exit_net,
+ 	.id   = &mirred_net_id,
+ 	.size = sizeof(struct tc_action_net),
++>>>>>>> 255cb30425c0 (net/sched: act_mirred: Add new tc_action_ops get_dev())
  };
  
  MODULE_AUTHOR("Jamal Hadi Salim(2002)");
* Unmerged path include/net/act_api.h
* Unmerged path net/sched/act_mirred.c
