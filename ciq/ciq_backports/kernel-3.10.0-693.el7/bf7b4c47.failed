locking/rwsem: Improve reader wakeup code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Waiman Long <Waiman.Long@hpe.com>
commit bf7b4c472db44413251bcef79ca1f6bf1ec81475
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bf7b4c47.failed

In __rwsem_do_wake(), the reader wakeup code will assume a writer
has stolen the lock if the active reader/writer count is not 0.
However, this is not as reliable an indicator as the original
"< RWSEM_WAITING_BIAS" check. If another reader is present, the code
will still break out and exit even if the writer is gone. This patch
changes it to check the same "< RWSEM_WAITING_BIAS" condition to
reduce the chance of false positive.

	Signed-off-by: Waiman Long <Waiman.Long@hpe.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Davidlohr Bueso <dave@stgolabs.net>
	Cc: Douglas Hatch <doug.hatch@hpe.com>
	Cc: Jason Low <jason.low2@hp.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Scott J Norton <scott.norton@hpe.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1463534783-38814-5-git-send-email-Waiman.Long@hpe.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit bf7b4c472db44413251bcef79ca1f6bf1ec81475)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/rwsem.c
diff --cc lib/rwsem.c
index 09d8c2da4ff3,4f1daf5a472d..000000000000
--- a/lib/rwsem.c
+++ b/lib/rwsem.c
@@@ -145,11 -153,17 +145,22 @@@ __rwsem_do_wake(struct rw_semaphore *se
  	if (wake_type != RWSEM_WAKE_READ_OWNED) {
  		adjustment = RWSEM_ACTIVE_READ_BIAS;
   try_reader_grant:
 -		oldcount = atomic_long_add_return(adjustment, &sem->count) - adjustment;
 -
 +		oldcount = rwsem_atomic_update(adjustment, sem) - adjustment;
  		if (unlikely(oldcount < RWSEM_WAITING_BIAS)) {
++<<<<<<< HEAD:lib/rwsem.c
 +			/* A writer stole the lock. Undo our reader grant. */
 +			if (rwsem_atomic_update(-adjustment, sem) &
 +						RWSEM_ACTIVE_MASK)
++=======
+ 			/*
+ 			 * If the count is still less than RWSEM_WAITING_BIAS
+ 			 * after removing the adjustment, it is assumed that
+ 			 * a writer has stolen the lock. We have to undo our
+ 			 * reader grant.
+ 			 */
+ 			if (atomic_long_add_return(-adjustment, &sem->count) <
+ 			    RWSEM_WAITING_BIAS)
++>>>>>>> bf7b4c472db4 (locking/rwsem: Improve reader wakeup code):kernel/locking/rwsem-xadd.c
  				goto out;
  			/* Last active locker left. Retry waking readers. */
  			goto try_reader_grant;
* Unmerged path lib/rwsem.c
