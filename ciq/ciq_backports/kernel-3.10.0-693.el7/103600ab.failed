crypto: ccp - Clean up the LSB slot allocation code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] ccp - Clean up the LSB slot allocation code (Suravee Suthikulpanit) [1390820]
Rebuild_FUZZ: 91.49%
commit-author Gary R Hook <gary.hook@amd.com>
commit 103600ab966a2f02d8986bbfdf87b762b1c6a06d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/103600ab.failed

Fix a few problems revealed by testing: verify consistent
units, especially in public slot allocation. Percolate
some common initialization code up to a common routine.
Add some comments.

	Signed-off-by: Gary R Hook <gary.hook@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 103600ab966a2f02d8986bbfdf87b762b1c6a06d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/ccp-dev-v3.c
#	drivers/crypto/ccp/ccp-dev-v5.c
#	drivers/crypto/ccp/ccp-dev.c
diff --cc drivers/crypto/ccp/ccp-dev.c
index 2777dc97b570,511ab042b5e7..000000000000
--- a/drivers/crypto/ccp/ccp-dev.c
+++ b/drivers/crypto/ccp/ccp-dev.c
@@@ -242,7 -455,41 +242,45 @@@ static int ccp_cmd_queue_thread(void *d
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int ccp_trng_read(struct hwrng *rng, void *data, size_t max, bool wait)
++=======
+ /**
+  * ccp_alloc_struct - allocate and initialize the ccp_device struct
+  *
+  * @dev: device struct of the CCP
+  */
+ struct ccp_device *ccp_alloc_struct(struct device *dev)
+ {
+ 	struct ccp_device *ccp;
+ 
+ 	ccp = devm_kzalloc(dev, sizeof(*ccp), GFP_KERNEL);
+ 	if (!ccp)
+ 		return NULL;
+ 	ccp->dev = dev;
+ 
+ 	INIT_LIST_HEAD(&ccp->cmd);
+ 	INIT_LIST_HEAD(&ccp->backlog);
+ 
+ 	spin_lock_init(&ccp->cmd_lock);
+ 	mutex_init(&ccp->req_mutex);
+ 	mutex_init(&ccp->sb_mutex);
+ 	ccp->sb_count = KSB_COUNT;
+ 	ccp->sb_start = 0;
+ 
+ 	/* Initialize the wait queues */
+ 	init_waitqueue_head(&ccp->sb_queue);
+ 	init_waitqueue_head(&ccp->suspend_queue);
+ 
+ 	ccp->ord = ccp_increment_unit_ordinal();
+ 	snprintf(ccp->name, MAX_CCP_NAME_LEN, "ccp-%u", ccp->ord);
+ 	snprintf(ccp->rngname, MAX_CCP_NAME_LEN, "ccp-%u-rng", ccp->ord);
+ 
+ 	return ccp;
+ }
+ 
+ int ccp_trng_read(struct hwrng *rng, void *data, size_t max, bool wait)
++>>>>>>> 103600ab966a (crypto: ccp - Clean up the LSB slot allocation code)
  {
  	struct ccp_device *ccp = container_of(rng, struct ccp_device, hwrng);
  	u32 trng_value;
* Unmerged path drivers/crypto/ccp/ccp-dev-v3.c
* Unmerged path drivers/crypto/ccp/ccp-dev-v5.c
* Unmerged path drivers/crypto/ccp/ccp-dev-v3.c
* Unmerged path drivers/crypto/ccp/ccp-dev-v5.c
* Unmerged path drivers/crypto/ccp/ccp-dev.c
