crypto: drbg - remove FIPS 140-2 continuous test

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] drbg - remove FIPS 140-2 continuous test (Herbert Xu) [1459191]
Rebuild_FUZZ: 90.91%
commit-author Stephan Mueller <sm@eperm.de>
commit b3614763059b82c26bdd02ffcb1c016c1132aad0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b3614763.failed

The newly released FIPS 140-2 IG 9.8 specifies that for SP800-90A
compliant DRBGs, the FIPS 140-2 continuous random number generator test
is not required any more.

This patch removes the test and all associated data structures.

	Signed-off-by: Stephan Mueller <smueller@chronox.de>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit b3614763059b82c26bdd02ffcb1c016c1132aad0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/drbg.c
#	include/crypto/drbg.h
diff --cc crypto/drbg.c
index a5113bed0737,1b86310db7b1..000000000000
--- a/crypto/drbg.c
+++ b/crypto/drbg.c
@@@ -217,48 -220,6 +217,51 @@@ static inline unsigned short drbg_sec_s
  }
  
  /*
++<<<<<<< HEAD
 + * FIPS 140-2 continuous self test
 + * The test is performed on the result of one round of the output
 + * function. Thus, the function implicitly knows the size of the
 + * buffer.
 + *
 + * @drbg DRBG handle
 + * @buf output buffer of random data to be checked
 + *
 + * return:
 + *	true on success
 + *	false on error
 + */
 +static bool drbg_fips_continuous_test(struct drbg_state *drbg,
 +				      const unsigned char *buf)
 +{
 +#ifdef CONFIG_CRYPTO_FIPS
 +	int ret = 0;
 +	/* skip test if we test the overall system */
 +	if (drbg->test_data)
 +		return true;
 +	/* only perform test in FIPS mode */
 +	if (0 == fips_enabled)
 +		return true;
 +	if (!drbg->fips_primed) {
 +		/* Priming of FIPS test */
 +		memcpy(drbg->prev, buf, drbg_blocklen(drbg));
 +		drbg->fips_primed = true;
 +		/* return false due to priming, i.e. another round is needed */
 +		return false;
 +	}
 +	ret = memcmp(drbg->prev, buf, drbg_blocklen(drbg));
 +	if (!ret)
 +		panic("DRBG continuous self test failed\n");
 +	memcpy(drbg->prev, buf, drbg_blocklen(drbg));
 +	/* the test shall pass when the two compared values are not equal */
 +	return ret != 0;
 +#else
 +	return true;
 +#endif /* CONFIG_CRYPTO_FIPS */
 +}
 +
 +/*
++=======
++>>>>>>> b3614763059b (crypto: drbg - remove FIPS 140-2 continuous test)
   * Convert an integer into a byte representation of this integer.
   * The byte representation is big-endian
   *
@@@ -635,11 -561,6 +638,14 @@@ static int drbg_ctr_generate(struct drb
  		}
  		outlen = (drbg_blocklen(drbg) < (buflen - len)) ?
  			  drbg_blocklen(drbg) : (buflen - len);
++<<<<<<< HEAD
 +		if (!drbg_fips_continuous_test(drbg, drbg->scratchpad)) {
 +			/* 10.2.1.5.2 step 6 */
 +			drbg_add_buf(drbg->V, drbg_blocklen(drbg), &prefix, 1);
 +			continue;
 +		}
++=======
++>>>>>>> b3614763059b (crypto: drbg - remove FIPS 140-2 continuous test)
  		/* 10.2.1.5.2 step 4.3 */
  		memcpy(buf + len, drbg->scratchpad, outlen);
  		len += outlen;
@@@ -958,10 -914,6 +962,13 @@@ static int drbg_hash_hashgen(struct drb
  		}
  		outlen = (drbg_blocklen(drbg) < (buflen - len)) ?
  			  drbg_blocklen(drbg) : (buflen - len);
++<<<<<<< HEAD
 +		if (!drbg_fips_continuous_test(drbg, dst)) {
 +			drbg_add_buf(src, drbg_statelen(drbg), &prefix, 1);
 +			continue;
 +		}
++=======
++>>>>>>> b3614763059b (crypto: drbg - remove FIPS 140-2 continuous test)
  		/* 10.1.1.4 step hashgen 4.2 */
  		memcpy(buf + len, dst, outlen);
  		len += outlen;
@@@ -1121,22 -1139,15 +1128,27 @@@ static inline void drbg_dealloc_state(s
  {
  	if (!drbg)
  		return;
 -	kzfree(drbg->V);
 +	if (drbg->V)
 +		kzfree(drbg->V);
  	drbg->V = NULL;
 -	kzfree(drbg->C);
 +	if (drbg->C)
 +		kzfree(drbg->C);
  	drbg->C = NULL;
 -	kzfree(drbg->scratchpad);
 +	if (drbg->scratchpad)
 +		kzfree(drbg->scratchpad);
  	drbg->scratchpad = NULL;
  	drbg->reseed_ctr = 0;
++<<<<<<< HEAD
 +#ifdef CONFIG_CRYPTO_FIPS
 +	if (drbg->prev)
 +		kzfree(drbg->prev);
 +	drbg->prev = NULL;
 +	drbg->fips_primed = false;
 +#endif
++=======
+ 	drbg->d_ops = NULL;
+ 	drbg->core = NULL;
++>>>>>>> b3614763059b (crypto: drbg - remove FIPS 140-2 continuous test)
  }
  
  /*
@@@ -1148,21 -1159,33 +1160,24 @@@ static inline int drbg_alloc_state(stru
  	int ret = -ENOMEM;
  	unsigned int sb_size = 0;
  
 -	switch (drbg->core->flags & DRBG_TYPE_MASK) {
 -#ifdef CONFIG_CRYPTO_DRBG_HMAC
 -	case DRBG_HMAC:
 -		drbg->d_ops = &drbg_hmac_ops;
 -		break;
 -#endif /* CONFIG_CRYPTO_DRBG_HMAC */
 -#ifdef CONFIG_CRYPTO_DRBG_HASH
 -	case DRBG_HASH:
 -		drbg->d_ops = &drbg_hash_ops;
 -		break;
 -#endif /* CONFIG_CRYPTO_DRBG_HASH */
 -#ifdef CONFIG_CRYPTO_DRBG_CTR
 -	case DRBG_CTR:
 -		drbg->d_ops = &drbg_ctr_ops;
 -		break;
 -#endif /* CONFIG_CRYPTO_DRBG_CTR */
 -	default:
 -		ret = -EOPNOTSUPP;
 -		goto err;
 -	}
 +	if (!drbg)
 +		return -EINVAL;
  
 -	drbg->V = kmalloc(drbg_statelen(drbg), GFP_KERNEL);
 +	drbg->V = kzalloc(drbg_statelen(drbg), GFP_KERNEL);
  	if (!drbg->V)
  		goto err;
 -	drbg->C = kmalloc(drbg_statelen(drbg), GFP_KERNEL);
 +	drbg->C = kzalloc(drbg_statelen(drbg), GFP_KERNEL);
  	if (!drbg->C)
  		goto err;
++<<<<<<< HEAD
 +#ifdef CONFIG_CRYPTO_FIPS
 +	drbg->prev = kzalloc(drbg_blocklen(drbg), GFP_KERNEL);
 +	if (!drbg->prev)
 +		goto err;
 +	drbg->fips_primed = false;
 +#endif
++=======
++>>>>>>> b3614763059b (crypto: drbg - remove FIPS 140-2 continuous test)
  	/* scratchpad is only generated for CTR and Hash */
  	if (drbg->core->flags & DRBG_HMAC)
  		sb_size = 0;
diff --cc include/crypto/drbg.h
index 2c4e001de2c5,d961b2b16f55..000000000000
--- a/include/crypto/drbg.h
+++ b/include/crypto/drbg.h
@@@ -116,13 -117,12 +116,18 @@@ struct drbg_state 
  	void *priv_data;	/* Cipher handle */
  	bool seeded;		/* DRBG fully seeded? */
  	bool pr;		/* Prediction resistance enabled? */
++<<<<<<< HEAD
 +#ifdef CONFIG_CRYPTO_FIPS
 +	bool fips_primed;	/* Continuous test primed? */
 +	unsigned char *prev;	/* FIPS 140-2 continuous test value */
 +#endif
++=======
+ 	struct work_struct seed_work;	/* asynchronous seeding support */
+ 	struct crypto_rng *jent;
++>>>>>>> b3614763059b (crypto: drbg - remove FIPS 140-2 continuous test)
  	const struct drbg_state_ops *d_ops;
  	const struct drbg_core *core;
 -	struct drbg_string test_data;
 -	struct random_ready_callback random_ready;
 +	struct drbg_test_data *test_data;
  };
  
  static inline __u8 drbg_statelen(struct drbg_state *drbg)
* Unmerged path crypto/drbg.c
* Unmerged path include/crypto/drbg.h
