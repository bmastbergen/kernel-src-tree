dm raid: bump the target version

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Mike Snitzer <snitzer@redhat.com>
commit 2664f3c94abc7181171b7c05b2aaa76ea7d9d613
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2664f3c9.failed

This version bump reflects that the reshape corruption fix (commit
92a39f6cc "dm raid: fix data corruption on reshape request") is
present.

Done as a separate fix because the above referenced commit is marked for
stable and target version bumps in a stable@ fix are a recipe for the
fix to never get backported to stable@ kernels (because of target
version number conflicts).

Also, move RESUME_STAY_FROZEN_FLAGS up with the reset the the _FLAGS
definitions now that we don't need to worry about stable@ conflicts as a
result of missing context.

	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 2664f3c94abc7181171b7c05b2aaa76ea7d9d613)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-raid.c
diff --cc drivers/md/dm-raid.c
index 8c0e46544ce4,f8564d63982f..000000000000
--- a/drivers/md/dm-raid.c
+++ b/drivers/md/dm-raid.c
@@@ -91,7 -99,10 +91,9 @@@ struct raid_dev 
  #define CTR_FLAG_DELTA_DISKS		(1 << __CTR_FLAG_DELTA_DISKS)
  #define CTR_FLAG_DATA_OFFSET		(1 << __CTR_FLAG_DATA_OFFSET)
  #define CTR_FLAG_RAID10_USE_NEAR_SETS	(1 << __CTR_FLAG_RAID10_USE_NEAR_SETS)
 -#define CTR_FLAG_JOURNAL_DEV		(1 << __CTR_FLAG_JOURNAL_DEV)
  
+ #define RESUME_STAY_FROZEN_FLAGS (CTR_FLAG_DELTA_DISKS | CTR_FLAG_DATA_OFFSET)
+ 
  /*
   * Definitions of various constructor flags to
   * be used in checks of valid / invalid flags
@@@ -3668,27 -3789,9 +3668,31 @@@ static void raid_resume(struct dm_targe
  		mddev_resume(mddev);
  }
  
 +static int raid_merge(struct dm_target *ti, struct bvec_merge_data *bvm,
 +		      struct bio_vec *biovec, int max_size)
 +{
 +	struct raid_set *rs = ti->private;
 +	struct md_personality *pers = rs->md.pers;
 +
 +	if (pers && pers->mergeable_bvec)
 +		return min(max_size, pers->mergeable_bvec(&rs->md, bvm, biovec));
 +
 +	/*
 +	 * In case we can't request the personality because
 +	 * the raid set is not running yet
 +	 *
 +	 * -> return safe minimum
 +	 */
 +	return rs->md.chunk_sectors;
 +}
 +
  static struct target_type raid_target = {
  	.name = "raid",
++<<<<<<< HEAD
 +	.version = {1, 9, 2},
++=======
+ 	.version = {1, 10, 1},
++>>>>>>> 2664f3c94abc (dm raid: bump the target version)
  	.module = THIS_MODULE,
  	.ctr = raid_ctr,
  	.dtr = raid_dtr,
* Unmerged path drivers/md/dm-raid.c
