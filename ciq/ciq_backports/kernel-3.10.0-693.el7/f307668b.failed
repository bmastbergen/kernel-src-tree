bonding: split bond_set_slave_link_state into two parts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Mahesh Bandewar <maheshb@google.com>
commit f307668bfcb7e83b6f62bda6a703e09613a00bd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f307668b.failed

Split the function into two (a) propose (b) commit phase without
changing the semantics for the original API.

	Signed-off-by: Mahesh Bandewar <maheshb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f307668bfcb7e83b6f62bda6a703e09613a00bd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bonding.h
diff --cc include/net/bonding.h
index 161e85e90411,fb2dd97857c4..000000000000
--- a/include/net/bonding.h
+++ b/include/net/bonding.h
@@@ -537,10 -505,48 +538,55 @@@ static inline bool bond_is_slave_inacti
  	return slave->inactive;
  }
  
++<<<<<<< HEAD
 +static inline void bond_set_slave_link_state(struct slave *slave, int state)
 +{
 +	slave->link = state;
 +	bond_queue_slave_event(slave);
++=======
+ static inline void bond_propose_link_state(struct slave *slave, int state)
+ {
+ 	slave->link_new_state = state;
+ }
+ 
+ static inline void bond_commit_link_state(struct slave *slave, bool notify)
+ {
+ 	if (slave->link == slave->link_new_state)
+ 		return;
+ 
+ 	slave->link = slave->link_new_state;
+ 	if (notify) {
+ 		bond_queue_slave_event(slave);
+ 		bond_lower_state_changed(slave);
+ 		slave->should_notify_link = 0;
+ 	} else {
+ 		if (slave->should_notify_link)
+ 			slave->should_notify_link = 0;
+ 		else
+ 			slave->should_notify_link = 1;
+ 	}
+ }
+ 
+ static inline void bond_set_slave_link_state(struct slave *slave, int state,
+ 					     bool notify)
+ {
+ 	bond_propose_link_state(slave, state);
+ 	bond_commit_link_state(slave, notify);
+ }
+ 
+ static inline void bond_slave_link_notify(struct bonding *bond)
+ {
+ 	struct list_head *iter;
+ 	struct slave *tmp;
+ 
+ 	bond_for_each_slave(bond, tmp, iter) {
+ 		if (tmp->should_notify_link) {
+ 			bond_queue_slave_event(tmp);
+ 			bond_lower_state_changed(tmp);
+ 			tmp->should_notify_link = 0;
+ 		}
+ 	}
++>>>>>>> f307668bfcb7 (bonding: split bond_set_slave_link_state into two parts)
  }
  
  static inline __be32 bond_confirm_addr(struct net_device *dev, __be32 dst, __be32 local)
* Unmerged path include/net/bonding.h
