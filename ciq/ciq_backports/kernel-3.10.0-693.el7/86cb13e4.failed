mlxsw: spectrum: Fix compilation error when CLS_ACT isn't set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit 86cb13e4ec5060d94069a8418fd4f3ccb38edee2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/86cb13e4.failed

When CONFIG_NET_CLS_ACT isn't set 'struct tcf_exts' has no member named
'actions' and we therefore must not access it. Otherwise compilation
fails.

Fix this by introducing a new macro similar to tc_no_actions(), which
always returns 'false' if CONFIG_NET_CLS_ACT isn't set.

Fixes: 763b4b70afcd ("mlxsw: spectrum: Add support in matchall mirror TC offloading")
	Reported-by: kbuild test robot <fengguang.wu@intel.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 86cb13e4ec5060d94069a8418fd4f3ccb38edee2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/act_api.h
diff --cc include/net/act_api.h
index 11aac9abd0ca,0bb210635e5f..000000000000
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@@ -105,5 -185,31 +105,34 @@@ int tcf_action_dump(struct sk_buff *skb
  int tcf_action_dump_old(struct sk_buff *skb, struct tc_action *a, int, int);
  int tcf_action_dump_1(struct sk_buff *skb, struct tc_action *a, int, int);
  int tcf_action_copy_stats(struct sk_buff *, struct tc_action *, int);
++<<<<<<< HEAD
++=======
+ 
+ #define tc_no_actions(_exts) \
+ 	(list_empty(&(_exts)->actions))
+ 
+ #define tc_for_each_action(_a, _exts) \
+ 	list_for_each_entry(a, &(_exts)->actions, list)
+ 
+ #define tc_single_action(_exts) \
+ 	(list_is_singular(&(_exts)->actions))
+ 
+ static inline void tcf_action_stats_update(struct tc_action *a, u64 bytes,
+ 					   u64 packets, u64 lastuse)
+ {
+ 	if (!a->ops->stats_update)
+ 		return;
+ 
+ 	a->ops->stats_update(a, bytes, packets, lastuse);
+ }
+ 
+ #else /* CONFIG_NET_CLS_ACT */
+ 
+ #define tc_no_actions(_exts) true
+ #define tc_for_each_action(_a, _exts) while ((void)(_a), 0)
+ #define tc_single_action(_exts) false
+ #define tcf_action_stats_update(a, bytes, packets, lastuse)
+ 
++>>>>>>> 86cb13e4ec50 (mlxsw: spectrum: Fix compilation error when CLS_ACT isn't set)
  #endif /* CONFIG_NET_CLS_ACT */
  #endif
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index 552636b73416..c3e61500819d 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@ -1148,23 +1148,22 @@ static int mlxsw_sp_port_add_cls_matchall(struct mlxsw_sp_port *mlxsw_sp_port,
 					  struct tc_cls_matchall_offload *cls,
 					  bool ingress)
 {
-	struct tcf_exts *exts = cls->exts;
 	const struct tc_action *a;
 	int err;
 
-	if (!list_is_singular(&exts->actions)) {
+	if (!tc_single_action(cls->exts)) {
 		netdev_err(mlxsw_sp_port->dev, "only singular actions are supported\n");
 		return -ENOTSUPP;
 	}
 
-	a = list_first_entry(&exts->actions, struct tc_action, list);
-	if (is_tcf_mirred_mirror(a) && protocol == htons(ETH_P_ALL)) {
+	tc_for_each_action(a, cls->exts) {
+		if (!is_tcf_mirred_mirror(a) || protocol != htons(ETH_P_ALL))
+			return -ENOTSUPP;
+
 		err = mlxsw_sp_port_add_cls_matchall_mirror(mlxsw_sp_port, cls,
 							    a, ingress);
 		if (err)
 			return err;
-	} else {
-		return -ENOTSUPP;
 	}
 
 	return 0;
* Unmerged path include/net/act_api.h
