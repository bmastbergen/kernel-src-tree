kexec: use core_param for crash_kexec_post_notifiers boot option

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
commit b26e27ddfd2a986dc53e259aba572f3aac182eb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b26e27dd.failed

crash_kexec_post_notifiers ia a boot option which controls whether the
1st kernel calls panic notifiers or not before booting the 2nd kernel.
However, there is no need to limit it to being modifiable only at boot
time.  So, use core_param instead of early_param.

Link: http://lkml.kernel.org/r/20160705113327.5864.43139.stgit@softrs
	Signed-off-by: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Vivek Goyal <vgoyal@redhat.com>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Borislav Petkov <bp@suse.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b26e27ddfd2a986dc53e259aba572f3aac182eb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/panic.c
diff --cc kernel/panic.c
index f3d560562c0c,ca8cea1ef673..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -156,7 -161,10 +157,14 @@@ void panic(const char *fmt, ...
  	 *
  	 * Bypass the panic_cpu check and call __crash_kexec directly.
  	 */
++<<<<<<< HEAD
 +	__crash_kexec(NULL);
++=======
+ 	if (!_crash_kexec_post_notifiers) {
+ 		printk_nmi_flush_on_panic();
+ 		__crash_kexec(NULL);
+ 	}
++>>>>>>> b26e27ddfd2a (kexec: use core_param for crash_kexec_post_notifiers boot option)
  
  	/*
  	 * Note smp_send_stop is the usual smp shutdown function, which
@@@ -171,10 -179,35 +179,25 @@@
  	 */
  	atomic_notifier_call_chain(&panic_notifier_list, 0, buf);
  
 -	/* Call flush even twice. It tries harder with a single online CPU */
 -	printk_nmi_flush_on_panic();
  	kmsg_dump(KMSG_DUMP_PANIC);
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * If you doubt kdump always works fine in any situation,
+ 	 * "crash_kexec_post_notifiers" offers you a chance to run
+ 	 * panic_notifiers and dumping kmsg before kdump.
+ 	 * Note: since some panic_notifiers can make crashed kernel
+ 	 * more unstable, it can increase risks of the kdump failure too.
+ 	 *
+ 	 * Bypass the panic_cpu check and call __crash_kexec directly.
+ 	 */
+ 	if (_crash_kexec_post_notifiers)
+ 		__crash_kexec(NULL);
+ 
++>>>>>>> b26e27ddfd2a (kexec: use core_param for crash_kexec_post_notifiers boot option)
  	bust_spinlocks(0);
  
 -	/*
 -	 * We may have ended up stopping the CPU holding the lock (in
 -	 * smp_send_stop()) while still having some valuable data in the console
 -	 * buffer.  Try to acquire the lock then release it regardless of the
 -	 * result.  The release will also print the buffers out.  Locks debug
 -	 * should be disabled to avoid reporting bad unlock balance when
 -	 * panic() is not being callled from OOPS.
 -	 */
 -	debug_locks_off();
 -	console_flush_on_panic();
 -
  	if (!panic_blink)
  		panic_blink = no_blink;
  
@@@ -544,6 -572,7 +567,10 @@@ EXPORT_SYMBOL(__stack_chk_fail)
  core_param(panic, panic_timeout, int, 0644);
  core_param(pause_on_oops, pause_on_oops, int, 0644);
  core_param(panic_on_warn, panic_on_warn, int, 0644);
++<<<<<<< HEAD
++=======
+ core_param(crash_kexec_post_notifiers, crash_kexec_post_notifiers, bool, 0644);
++>>>>>>> b26e27ddfd2a (kexec: use core_param for crash_kexec_post_notifiers boot option)
  
  static int __init oops_setup(char *s)
  {
* Unmerged path kernel/panic.c
