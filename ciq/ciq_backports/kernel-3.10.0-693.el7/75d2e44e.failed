tools/power turbostat: re-name "%Busy" field to "Busy%"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: re-name "Busy" field to "Busy" (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 92.16%
commit-author Len Brown <len.brown@intel.com>
commit 75d2e44e60490ba1fee076a5f4dcfbdc8598e8c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/75d2e44e.failed

some tools processing turbostat output
have difficulty with items that begin with %...

	Reported-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 75d2e44e60490ba1fee076a5f4dcfbdc8598e8c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.8
diff --cc tools/power/x86/turbostat/turbostat.8
index a7cc18d34bc1,7771eea3cdec..000000000000
--- a/tools/power/x86/turbostat/turbostat.8
+++ b/tools/power/x86/turbostat/turbostat.8
@@@ -87,6 -87,22 +87,25 @@@ Note that multiple CPUs per core indica
  Without any parameters, turbostat displays statistics ever 5 seconds.
  (override interval with "-i sec" option, or specify a command
  for turbostat to fork).
++<<<<<<< HEAD
++=======
+ .nf
+ [root@hsw]# ./turbostat
+      CPU Avg_MHz   Busy% Bzy_MHz TSC_MHz
+        -     488   12.51    3898    3498
+        0       0    0.01    3885    3498
+        4    3897   99.99    3898    3498
+        1       0    0.00    3861    3498
+        5       0    0.00    3882    3498
+        2       1    0.02    3894    3498
+        6       2    0.06    3898    3498
+        3       0    0.00    3849    3498
+        7       0    0.00    3877    3498
+ 
+ .fi
+ .SH DEBUG EXAMPLE
+ The "--debug" option prints additional system information before measurements:
++>>>>>>> 75d2e44e6049 (tools/power turbostat: re-name "%Busy" field to "Busy%")
  
  The first row of statistics is a summary for the entire system.
  For residency % columns, the summary is a weighted average.
@@@ -177,32 -176,28 +196,50 @@@ eg. Here a cycle soaker is run on 1 CP
  until ^C while the other CPUs are mostly idle:
  
  .nf
 -root@hsw: turbostat cat /dev/zero > /dev/null
 +root@ivy: turbostat cat /dev/zero > /dev/null
  ^C
++<<<<<<< HEAD
 +    Core     CPU Avg_MHz   %Busy Bzy_MHz TSC_MHz     SMI  CPU%c1  CPU%c3  CPU%c6  CPU%c7 CoreTmp  PkgTmp Pkg%pc2 Pkg%pc3 Pkg%pc6 Pkg%pc7 PkgWatt CorWatt GFXWatt 
 +       -       -     496   12.75    3886    3492       0   13.16    0.04   74.04    0.00      36      36    0.00    0.00    0.00    0.00   23.15   17.65    0.00
 +       0       0      22    0.57    3830    3492       0    0.83    0.02   98.59    0.00      27      36    0.00    0.00    0.00    0.00   23.15   17.65    0.00
 +       0       4       9    0.24    3829    3492       0    1.15
 +       1       1       4    0.09    3783    3492       0   99.91    0.00    0.00    0.00      36
 +       1       5    3880   99.82    3888    3492       0    0.18
 +       2       2      17    0.44    3813    3492       0    0.77    0.04   98.75    0.00      28
 +       2       6      12    0.32    3823    3492       0    0.89
 +       3       3      16    0.43    3844    3492       0    0.63    0.11   98.84    0.00      30
 +       3       7       4    0.11    3827    3492       0    0.94
 +30.372243 sec
 +
 +.fi
 +Above the cycle soaker drives cpu5 up its 3.8 GHz turbo limit
 +while the other processors are generally in various states of idle.
 +
 +Note that cpu1 and cpu5 are HT siblings within core1.
 +As cpu5 is very busy, it prevents its sibling, cpu1,
 +from entering a c-state deeper than c1.
++=======
+      CPU Avg_MHz   Busy% Bzy_MHz TSC_MHz
+        -     482   12.51    3854    3498
+        0       0    0.01    1960    3498
+        4       0    0.00    2128    3498
+        1       0    0.00    3003    3498
+        5    3854   99.98    3855    3498
+        2       0    0.01    3504    3498
+        6       3    0.08    3884    3498
+        3       0    0.00    2553    3498
+        7       0    0.00    2126    3498
+ 10.783983 sec
+ 
+ .fi
+ Above the cycle soaker drives cpu5 up its 3.9 GHz turbo limit.
+ The first row shows the average MHz and Busy% across all the processors in the system.
++>>>>>>> 75d2e44e6049 (tools/power turbostat: re-name "%Busy" field to "Busy%")
  
  Note that the Avg_MHz column reflects the total number of cycles executed
- divided by the measurement interval.  If the %Busy column is 100%,
+ divided by the measurement interval.  If the Busy% column is 100%,
  then the processor was running at that speed the entire interval.
- The Avg_MHz multiplied by the %Busy results in the Bzy_MHz --
+ The Avg_MHz multiplied by the Busy% results in the Bzy_MHz --
  which is the average frequency while the processor was executing --
  not including any non-busy idle time.
  
* Unmerged path tools/power/x86/turbostat/turbostat.8
diff --git a/tools/power/x86/turbostat/turbostat.c b/tools/power/x86/turbostat/turbostat.c
index b938c3391c64..209e9b16748a 100644
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@ -290,7 +290,7 @@ int get_msr(int cpu, off_t offset, unsigned long long *msr)
 /*
  * Example Format w/ field column widths:
  *
- *  Package    Core     CPU Avg_MHz Bzy_MHz TSC_MHz     SMI   %Busy CPU_%c1 CPU_%c3 CPU_%c6 CPU_%c7 CoreTmp  PkgTmp Pkg%pc2 Pkg%pc3 Pkg%pc6 Pkg%pc7 PkgWatt CorWatt GFXWatt
+ *  Package    Core     CPU Avg_MHz Bzy_MHz TSC_MHz     SMI   Busy% CPU_%c1 CPU_%c3 CPU_%c6 CPU_%c7 CoreTmp  PkgTmp Pkg%pc2 Pkg%pc3 Pkg%pc6 Pkg%pc7 PkgWatt CorWatt GFXWatt
  * 123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678
  */
 
@@ -305,7 +305,7 @@ void print_header(void)
 	if (has_aperf)
 		outp += sprintf(outp, " Avg_MHz");
 	if (has_aperf)
-		outp += sprintf(outp, "   %%Busy");
+		outp += sprintf(outp, "   Busy%%");
 	if (has_aperf)
 		outp += sprintf(outp, " Bzy_MHz");
 	outp += sprintf(outp, " TSC_MHz");
@@ -504,7 +504,7 @@ int format_counters(struct thread_data *t, struct core_data *c,
 		outp += sprintf(outp, "%8.0f",
 			1.0 / units * t->aperf / interval_float);
 
-	/* %Busy */
+	/* Busy% */
 	if (has_aperf) {
 		if (!skip_c0)
 			outp += sprintf(outp, "%8.2f", 100.0 * t->mperf/t->tsc/tsc_tweak);
