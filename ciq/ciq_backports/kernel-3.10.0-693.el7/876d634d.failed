net/mlx5: Fix flow steering NIC capabilities check

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Fix flow steering NIC capabilities check (Don Dutile) [1385330 1417284]
Rebuild_FUZZ: 95.83%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit 876d634d19e41603aab91455f2c52a78a28372d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/876d634d.failed

Flow steering infrastructure is currently used only on link layer
ethernet, therefore the driver should initialize the flow steering
when the device link layer is ethernet.

In addition, add missing capability check before initializing the
namespace of NIC RX flow tables.

Fixes: 2530236303d9 ('net/mlx5_core: Flow steering tree initialization')
	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 876d634d19e41603aab91455f2c52a78a28372d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index 0998d9172756,c1efa5517d17..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -1676,8 -1767,14 +1676,11 @@@ static void cleanup_root_ns(struct mlx5
  
  void mlx5_cleanup_fs(struct mlx5_core_dev *dev)
  {
+ 	if (MLX5_CAP_GEN(dev, port_type) != MLX5_CAP_PORT_TYPE_ETH)
+ 		return;
+ 
  	cleanup_root_ns(dev);
  	cleanup_single_prio_root_ns(dev, dev->priv.fdb_root_ns);
 -	cleanup_single_prio_root_ns(dev, dev->priv.esw_egress_root_ns);
 -	cleanup_single_prio_root_ns(dev, dev->priv.esw_ingress_root_ns);
 -	mlx5_cleanup_fc_stats(dev);
  }
  
  static int init_fdb_root_ns(struct mlx5_core_dev *dev)
@@@ -1702,11 -1831,20 +1705,24 @@@ int mlx5_init_fs(struct mlx5_core_dev *
  {
  	int err = 0;
  
++<<<<<<< HEAD
 +	if (MLX5_CAP_GEN(dev, nic_flow_table)) {
++=======
+ 	if (MLX5_CAP_GEN(dev, port_type) != MLX5_CAP_PORT_TYPE_ETH)
+ 		return 0;
+ 
+ 	err = mlx5_init_fc_stats(dev);
+ 	if (err)
+ 		return err;
+ 
+ 	if (MLX5_CAP_GEN(dev, nic_flow_table) &&
+ 	    MLX5_CAP_FLOWTABLE_NIC_RX(dev, ft_support)) {
++>>>>>>> 876d634d19e4 (net/mlx5: Fix flow steering NIC capabilities check)
  		err = init_root_ns(dev);
  		if (err)
 -			goto err;
 +			return err;
  	}
+ 
  	if (MLX5_CAP_GEN(dev, eswitch_flow_table)) {
  		err = init_fdb_root_ns(dev);
  		if (err)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --git a/include/linux/mlx5/device.h b/include/linux/mlx5/device.h
index 59390a5769e3..f15e0e55a2f1 100644
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@ -1367,6 +1367,12 @@ enum mlx5_cap_type {
 #define MLX5_CAP_FLOWTABLE_MAX(mdev, cap) \
 	MLX5_GET(flow_table_nic_cap, mdev->hca_caps_max[MLX5_CAP_FLOW_TABLE], cap)
 
+#define MLX5_CAP_FLOWTABLE_NIC_RX(mdev, cap) \
+	MLX5_CAP_FLOWTABLE(mdev, flow_table_properties_nic_receive.cap)
+
+#define MLX5_CAP_FLOWTABLE_NIC_RX_MAX(mdev, cap) \
+	MLX5_CAP_FLOWTABLE_MAX(mdev, flow_table_properties_nic_receive.cap)
+
 #define MLX5_CAP_ESW_FLOWTABLE(mdev, cap) \
 	MLX5_GET(flow_table_eswitch_cap, \
 		 mdev->hca_caps_cur[MLX5_CAP_ESWITCH_FLOW_TABLE], cap)
