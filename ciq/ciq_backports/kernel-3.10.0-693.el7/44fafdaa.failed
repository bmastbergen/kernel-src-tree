net/mlx5: Use PTR_ERR_OR_ZERO() to simplify the code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Use PTR_ERR_OR_ZERO() to simplify the code (Don Dutile) [1385330 1417284]
Rebuild_FUZZ: 96.00%
commit-author Wei Yongjun <yongjun_wei@trendmicro.com.cn>
commit 44fafdaa757cf251aade6c071f772ddb4e8a9885
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/44fafdaa.failed

Use PTR_ERR_OR_ZERO rather than if(IS_ERR(...)) + PTR_ERR.

Generated by: scripts/coccinelle/api/ptr_ret.cocci

	Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
	Acked-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 44fafdaa757cf251aade6c071f772ddb4e8a9885)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index 3b6147aebe10,75bb8c864557..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -1693,18 -1708,53 +1693,64 @@@ static int init_fdb_root_ns(struct mlx5
  {
  	struct fs_prio *prio;
  
 -	steering->fdb_root_ns = create_root_ns(steering, FS_FT_FDB);
 -	if (!steering->fdb_root_ns)
 +	dev->priv.fdb_root_ns = create_root_ns(dev, FS_FT_FDB);
 +	if (!dev->priv.fdb_root_ns)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	/* Create single prio */
 +	prio = fs_create_prio(&dev->priv.fdb_root_ns->ns, 0, 1);
 +	if (IS_ERR(prio)) {
 +		cleanup_single_prio_root_ns(dev, dev->priv.fdb_root_ns);
 +		return PTR_ERR(prio);
 +	} else {
 +		return 0;
 +	}
++=======
+ 	prio = fs_create_prio(&steering->fdb_root_ns->ns, 0, 1);
+ 	if (IS_ERR(prio))
+ 		goto out_err;
+ 
+ 	prio = fs_create_prio(&steering->fdb_root_ns->ns, 1, 1);
+ 	if (IS_ERR(prio))
+ 		goto out_err;
+ 
+ 	set_prio_attrs(steering->fdb_root_ns);
+ 	return 0;
+ 
+ out_err:
+ 	cleanup_root_ns(steering->fdb_root_ns);
+ 	steering->fdb_root_ns = NULL;
+ 	return PTR_ERR(prio);
+ }
+ 
+ static int init_ingress_acl_root_ns(struct mlx5_flow_steering *steering)
+ {
+ 	struct fs_prio *prio;
+ 
+ 	steering->esw_egress_root_ns = create_root_ns(steering, FS_FT_ESW_EGRESS_ACL);
+ 	if (!steering->esw_egress_root_ns)
+ 		return -ENOMEM;
+ 
+ 	/* create 1 prio*/
+ 	prio = fs_create_prio(&steering->esw_egress_root_ns->ns, 0,
+ 			      MLX5_TOTAL_VPORTS(steering->dev));
+ 	return PTR_ERR_OR_ZERO(prio);
+ }
+ 
+ static int init_egress_acl_root_ns(struct mlx5_flow_steering *steering)
+ {
+ 	struct fs_prio *prio;
+ 
+ 	steering->esw_ingress_root_ns = create_root_ns(steering, FS_FT_ESW_INGRESS_ACL);
+ 	if (!steering->esw_ingress_root_ns)
+ 		return -ENOMEM;
+ 
+ 	/* create 1 prio*/
+ 	prio = fs_create_prio(&steering->esw_ingress_root_ns->ns, 0,
+ 			      MLX5_TOTAL_VPORTS(steering->dev));
+ 	return PTR_ERR_OR_ZERO(prio);
++>>>>>>> 44fafdaa757c (net/mlx5: Use PTR_ERR_OR_ZERO() to simplify the code)
  }
  
  int mlx5_init_fs(struct mlx5_core_dev *dev)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
