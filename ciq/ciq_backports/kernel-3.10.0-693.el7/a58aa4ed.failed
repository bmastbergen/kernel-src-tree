random: forget lock in lockless accounting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Greg Price <price@MIT.EDU>
commit a58aa4edc6d2e779894b1fa95a2f4de157ff3b3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a58aa4ed.failed

The only mutable data accessed here is ->entropy_count, but since
10b3a32d2 ("random: fix accounting race condition") we use cmpxchg to
protect our accesses to ->entropy_count here.  Drop the use of the
lock.

	Cc: Jiri Kosina <jkosina@suse.cz>
	Signed-off-by: Greg Price <price@mit.edu>
	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
(cherry picked from commit a58aa4edc6d2e779894b1fa95a2f4de157ff3b3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
diff --cc drivers/char/random.c
index 21979db2343d,694510af4fcd..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -937,12 -970,7 +937,9 @@@ static size_t account(struct entropy_st
  	int entropy_count, orig;
  	size_t ibytes;
  
- 	/* Hold lock while accounting */
- 	spin_lock_irqsave(&r->lock, flags);
- 
  	BUG_ON(r->entropy_count > r->poolinfo->poolfracbits);
 +	DEBUG_ENT("trying to extract %zu bits from %s\n",
 +		  nbytes * 8, r->name);
  
  	/* Can we pull enough? */
  retry:
@@@ -964,12 -992,8 +961,15 @@@
  		    < random_write_wakeup_thresh)
  			wakeup_write = 1;
  	}
++<<<<<<< HEAD
 +
 +	DEBUG_ENT("debiting %zu entropy credits from %s%s\n",
 +		  ibytes * 8, r->name, r->limit ? "" : " (unlimited)");
 +
 +	spin_unlock_irqrestore(&r->lock, flags);
++=======
++>>>>>>> a58aa4edc6d2 (random: forget lock in lockless accounting)
  
 -	trace_debit_entropy(r->name, 8 * ibytes);
  	if (wakeup_write) {
  		wake_up_interruptible(&random_write_wait);
  		kill_fasync(&fasync, SIGIO, POLL_OUT);
* Unmerged path drivers/char/random.c
