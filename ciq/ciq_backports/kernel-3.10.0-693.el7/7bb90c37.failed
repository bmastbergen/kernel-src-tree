bridge: Fix problems around fdb entries pointing to the bridge device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
commit 7bb90c3715a496c650b2e879225030f9dd9cfafb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7bb90c37.failed

Adding fdb entries pointing to the bridge device uses fdb_insert(),
which lacks various checks and does not respect added_by_user flag.

As a result, some inconsistent behavior can happen:
* Adding temporary entries succeeds but results in permanent entries.
* Same goes for "dynamic" and "use".
* Changing mac address of the bridge device causes deletion of
  user-added entries.
* Replacing existing entries looks successful from userspace but actually
  not, regardless of NLM_F_EXCL flag.

Use the same logic as other entries and fix them.

Fixes: 3741873b4f73 ("bridge: allow adding of fdb entries pointing to the bridge device")
	Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
	Acked-by: Roopa Prabhu <roopa@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7bb90c3715a496c650b2e879225030f9dd9cfafb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_fdb.c
diff --cc net/bridge/br_fdb.c
index 4ff7e19b7cae,cd620fab41b0..000000000000
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@@ -252,15 -278,13 +252,23 @@@ void br_fdb_change_mac_address(struct n
  	 * bridge.  This function runs under RTNL so the bitmap will not
  	 * change from under us.
  	 */
++<<<<<<< HEAD
 +	pv = br_get_vlan_info(br);
 +	if (!pv)
 +		goto out;
 +
 +	for_each_set_bit_from(vid, pv->vlan_bitmap, VLAN_N_VID) {
 +		f = __br_fdb_get(br, br->dev->dev_addr, vid);
 +		if (f && f->is_local && !f->dst)
++=======
+ 	list_for_each_entry(v, &vg->vlan_list, vlist) {
+ 		if (!br_vlan_should_use(v))
+ 			continue;
+ 		f = __br_fdb_get(br, br->dev->dev_addr, v->vid);
+ 		if (f && f->is_local && !f->dst && !f->added_by_user)
++>>>>>>> 7bb90c3715a4 (bridge: Fix problems around fdb entries pointing to the bridge device)
  			fdb_delete_local(br, NULL, f);
 -		fdb_insert(br, NULL, newaddr, v->vid);
 +		fdb_insert(br, NULL, newaddr, vid);
  	}
  out:
  	spin_unlock_bh(&br->hash_lock);
@@@ -831,34 -885,42 +850,63 @@@ int br_fdb_add(struct ndmsg *ndm, struc
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	p = br_port_get_rtnl(dev);
 +	if (p == NULL) {
 +		pr_info("bridge: RTM_NEWNEIGH %s not a bridge port\n",
 +			dev->name);
 +		return -EINVAL;
++=======
+ 	if (dev->priv_flags & IFF_EBRIDGE) {
+ 		br = netdev_priv(dev);
+ 		vg = br_vlan_group(br);
+ 	} else {
+ 		p = br_port_get_rtnl(dev);
+ 		if (!p) {
+ 			pr_info("bridge: RTM_NEWNEIGH %s not a bridge port\n",
+ 				dev->name);
+ 			return -EINVAL;
+ 		}
+ 		br = p->br;
+ 		vg = nbp_vlan_group(p);
++>>>>>>> 7bb90c3715a4 (bridge: Fix problems around fdb entries pointing to the bridge device)
  	}
  
 +	pv = nbp_get_vlan_info(p);
  	if (vid) {
 -		v = br_vlan_find(vg, vid);
 -		if (!v || !br_vlan_should_use(v)) {
 -			pr_info("bridge: RTM_NEWNEIGH with unconfigured vlan %d on %s\n", vid, dev->name);
 +		if (!pv || !test_bit(vid, pv->vlan_bitmap)) {
 +			pr_info("bridge: RTM_NEWNEIGH with unconfigured "
 +				"vlan %d on port %s\n", vid, dev->name);
  			return -EINVAL;
  		}
  
  		/* VID was specified, so use it. */
++<<<<<<< HEAD
 +		err = __br_fdb_add(ndm, p, addr, nlh_flags, vid);
 +	} else {
 +		err = __br_fdb_add(ndm, p, addr, nlh_flags, 0);
 +		if (err || !pv)
++=======
+ 		err = __br_fdb_add(ndm, br, p, addr, nlh_flags, vid);
+ 	} else {
+ 		err = __br_fdb_add(ndm, br, p, addr, nlh_flags, 0);
+ 		if (err || !vg || !vg->num_vlans)
++>>>>>>> 7bb90c3715a4 (bridge: Fix problems around fdb entries pointing to the bridge device)
  			goto out;
  
  		/* We have vlans configured on this port and user didn't
  		 * specify a VLAN.  To be nice, add/update entry for every
  		 * vlan on this port.
  		 */
++<<<<<<< HEAD
 +		for_each_set_bit(vid, pv->vlan_bitmap, VLAN_N_VID) {
 +			err = __br_fdb_add(ndm, p, addr, nlh_flags, vid);
++=======
+ 		list_for_each_entry(v, &vg->vlan_list, vlist) {
+ 			if (!br_vlan_should_use(v))
+ 				continue;
+ 			err = __br_fdb_add(ndm, br, p, addr, nlh_flags, v->vid);
++>>>>>>> 7bb90c3715a4 (bridge: Fix problems around fdb entries pointing to the bridge device)
  			if (err)
  				goto out;
  		}
* Unmerged path net/bridge/br_fdb.c
