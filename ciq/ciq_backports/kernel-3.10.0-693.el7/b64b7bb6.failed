nfp: add separate buffer allocation function for napi

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit b64b7bb6d492ef1bbe9aa9ed7eeb18f7148ece3d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b64b7bb6.failed

Introduce a separate buffer allocation function to be called
from NAPI.  We can make assumptions about the context and
buffer size.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b64b7bb6d492ef1bbe9aa9ed7eeb18f7148ece3d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 8344e8e82257,b43d2dbae368..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -1090,9 -1095,29 +1090,29 @@@ nfp_net_rx_alloc_one(struct nfp_net_rx_
  		return NULL;
  	}
  
 -	return frag;
 +	return skb;
  }
  
+ static void *nfp_net_napi_alloc_one(struct nfp_net *nn, dma_addr_t *dma_addr)
+ {
+ 	void *frag;
+ 
+ 	frag = napi_alloc_frag(nn->fl_bufsz);
+ 	if (!frag) {
+ 		nn_warn_ratelimit(nn, "Failed to alloc receive page frag\n");
+ 		return NULL;
+ 	}
+ 
+ 	*dma_addr = nfp_net_dma_map_rx(nn, frag, nn->fl_bufsz, DMA_FROM_DEVICE);
+ 	if (dma_mapping_error(&nn->pdev->dev, *dma_addr)) {
+ 		skb_free_frag(frag);
+ 		nn_warn_ratelimit(nn, "Failed to map DMA RX buffer\n");
+ 		return NULL;
+ 	}
+ 
+ 	return frag;
+ }
+ 
  /**
   * nfp_net_rx_give_one() - Put mapped skb on the software and hardware rings
   * @rx_ring:	RX ring structure
@@@ -1383,18 -1426,16 +1403,30 @@@ static int nfp_net_rx(struct nfp_net_rx
  
  		rx_ring->rd_p++;
  		pkts_polled++;
 -
 +		avail--;
 +
++<<<<<<< HEAD
 +		skb = rx_ring->rxbufs[idx].skb;
 +
 +		new_skb = nfp_net_rx_alloc_one(rx_ring, &new_dma_addr,
 +					       nn->fl_bufsz);
 +		if (!new_skb) {
 +			nfp_net_rx_give_one(rx_ring, rx_ring->rxbufs[idx].skb,
 +					    rx_ring->rxbufs[idx].dma_addr);
 +			u64_stats_update_begin(&r_vec->rx_sync);
 +			r_vec->rx_drops++;
 +			u64_stats_update_end(&r_vec->rx_sync);
++=======
+ 		rxbuf =	&rx_ring->rxbufs[idx];
+ 		skb = build_skb(rxbuf->frag, nn->fl_bufsz);
+ 		if (unlikely(!skb)) {
+ 			nfp_net_rx_drop(r_vec, rx_ring, rxbuf, NULL);
+ 			continue;
+ 		}
+ 		new_frag = nfp_net_napi_alloc_one(nn, &new_dma_addr);
+ 		if (unlikely(!new_frag)) {
+ 			nfp_net_rx_drop(r_vec, rx_ring, rxbuf, skb);
++>>>>>>> b64b7bb6d492 (nfp: add separate buffer allocation function for napi)
  			continue;
  		}
  
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
