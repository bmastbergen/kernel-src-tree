net: introduce NETDEV_CHANGE_TX_QUEUE_LEN

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] introduce NETDEV_CHANGE_TX_QUEUE_LEN (Wei Xu) [1352741]
Rebuild_FUZZ: 93.51%
commit-author Jason Wang <jasowang@redhat.com>
commit 08294a26e15d7baf1e14ee569e9f2bc82a7ae768
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/08294a26.failed

This patch introduces a new event - NETDEV_CHANGE_TX_QUEUE_LEN, this
will be triggered when tx_queue_len. It could be used by net device
who want to do some processing at that time. An example is tun who may
want to resize tx array when tx_queue_len is changed.

	Cc: John Fastabend <john.r.fastabend@intel.com>
	Signed-off-by: Jason Wang <jasowang@redhat.com>
	Acked-by: John Fastabend <john.r.fastabend@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 08294a26e15d7baf1e14ee569e9f2bc82a7ae768)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/net-sysfs.c
diff --cc include/linux/netdevice.h
index 6d99d7a5ae01,7dc2ec74122a..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2228,12 -2234,11 +2228,19 @@@ struct netdev_lag_lower_state_info 
  #define NETDEV_PRECHANGEMTU	0x0017 /* notify before mtu change happened */
  #define NETDEV_CHANGEINFODATA	0x0018
  #define NETDEV_BONDING_INFO	0x0019
++<<<<<<< HEAD
 +#define NETDEV_OFFLOAD_PUSH_VXLAN	0x001C
 +#define NETDEV_OFFLOAD_PUSH_GENEVE	0x001D
++=======
+ #define NETDEV_PRECHANGEUPPER	0x001A
+ #define NETDEV_CHANGELOWERSTATE	0x001B
+ #define NETDEV_UDP_TUNNEL_PUSH_INFO	0x001C
+ #define NETDEV_CHANGE_TX_QUEUE_LEN	0x001E
++>>>>>>> 08294a26e15d (net: introduce NETDEV_CHANGE_TX_QUEUE_LEN)
  
 +/* (Un)registration functions for the notifiers that takes
 + * 'struct net_device *' as parameter
 + */
  int register_netdevice_notifier(struct notifier_block *nb);
  int unregister_netdevice_notifier(struct notifier_block *nb);
  
diff --cc net/core/net-sysfs.c
index 6070e93098be,6e4f34721080..000000000000
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@@ -298,9 -320,22 +298,26 @@@ static ssize_t flags_store(struct devic
  }
  NETDEVICE_SHOW_RW(flags, fmt_hex);
  
 -static int change_tx_queue_len(struct net_device *dev, unsigned long new_len)
 +static int change_tx_queue_len(struct net_device *net, unsigned long new_len)
  {
++<<<<<<< HEAD
 +	net->tx_queue_len = new_len;
++=======
+ 	int res, orig_len = dev->tx_queue_len;
+ 
+ 	if (new_len != orig_len) {
+ 		dev->tx_queue_len = new_len;
+ 		res = call_netdevice_notifiers(NETDEV_CHANGE_TX_QUEUE_LEN, dev);
+ 		res = notifier_to_errno(res);
+ 		if (res) {
+ 			netdev_err(dev,
+ 				   "refused to change device tx_queue_len\n");
+ 			dev->tx_queue_len = orig_len;
+ 			return -EFAULT;
+ 		}
+ 	}
+ 
++>>>>>>> 08294a26e15d (net: introduce NETDEV_CHANGE_TX_QUEUE_LEN)
  	return 0;
  }
  
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/net-sysfs.c
diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 1adee1ef78d1..257a450fea1e 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -1789,11 +1789,19 @@ static int do_setlink(const struct sk_buff *skb,
 
 	if (tb[IFLA_TXQLEN]) {
 		unsigned long value = nla_get_u32(tb[IFLA_TXQLEN]);
-
-		if (dev->tx_queue_len ^ value)
+		unsigned long orig_len = dev->tx_queue_len;
+
+		if (dev->tx_queue_len ^ value) {
+			dev->tx_queue_len = value;
+			err = call_netdevice_notifiers(
+			      NETDEV_CHANGE_TX_QUEUE_LEN, dev);
+			err = notifier_to_errno(err);
+			if (err) {
+				dev->tx_queue_len = orig_len;
+				goto errout;
+			}
 			status |= DO_SETLINK_NOTIFY;
-
-		dev->tx_queue_len = value;
+		}
 	}
 
 	if (tb[IFLA_OPERSTATE])
