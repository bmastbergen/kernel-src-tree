md/bitmap: call bitmap_file_unmap once bitmap_storage_alloc returns -ENOMEM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [md] bitmap: call bitmap_file_unmap once bitmap_storage_alloc returns -ENOMEM (Jes Sorensen) [1380016]
Rebuild_FUZZ: 97.96%
commit-author Guoqing Jiang <gqjiang@suse.com>
commit cbb387323610295be9d36c51287b668c1140704f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/cbb38732.failed

It is possible that bitmap_storage_alloc could return -ENOMEM,
and some member inside store could be allocated such as filemap.

To avoid memory leak, we need to call bitmap_file_unmap to free
those members in the bitmap_resize.

	Reviewed-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit cbb387323610295be9d36c51287b668c1140704f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/bitmap.c
diff --cc drivers/md/bitmap.c
index 5d638c495205,cd3a0659cc07..000000000000
--- a/drivers/md/bitmap.c
+++ b/drivers/md/bitmap.c
@@@ -1839,9 -2026,13 +1839,18 @@@ int bitmap_resize(struct bitmap *bitmap
  	memset(&store, 0, sizeof(store));
  	if (bitmap->mddev->bitmap_info.offset || bitmap->mddev->bitmap_info.file)
  		ret = bitmap_storage_alloc(&store, chunks,
++<<<<<<< HEAD
 +					   !bitmap->mddev->bitmap_info.external);
 +	if (ret)
++=======
+ 					   !bitmap->mddev->bitmap_info.external,
+ 					   mddev_is_clustered(bitmap->mddev)
+ 					   ? bitmap->cluster_slot : 0);
+ 	if (ret) {
+ 		bitmap_file_unmap(&store);
++>>>>>>> cbb387323610 (md/bitmap: call bitmap_file_unmap once bitmap_storage_alloc returns -ENOMEM)
  		goto err;
+ 	}
  
  	pages = DIV_ROUND_UP(chunks, PAGE_COUNTER_RATIO);
  
* Unmerged path drivers/md/bitmap.c
