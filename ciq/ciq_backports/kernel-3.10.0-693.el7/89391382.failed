mei: bus: complete variable rename of type struct mei_cl_device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 893913822e829f7a37824f6041ff964076374191
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/89391382.failed

In the
commit 5c079ae11921 ("mei: bus: fix drivers and devices names confusion")
we set the variables of type struct mei_cl_device to 'cldev'
but few places were left out, namely mei_cl_bus.h header
and the mei nfc drivers.

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 893913822e829f7a37824f6041ff964076374191)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nfc/mei_phy.c
#	drivers/nfc/microread/mei.c
#	drivers/nfc/pn544/mei.c
#	include/linux/mei_cl_bus.h
diff --cc drivers/nfc/mei_phy.c
index b2b37bbc784b,ecd2a0dce797..000000000000
--- a/drivers/nfc/mei_phy.c
+++ b/drivers/nfc/mei_phy.c
@@@ -114,11 -113,12 +114,16 @@@ static int mei_nfc_if_version(struct nf
  	pr_info("%s\n", __func__);
  
  	memset(&cmd, 0, sizeof(struct mei_nfc_cmd));
 -	cmd.hdr.cmd = MEI_NFC_CMD_MAINTENANCE;
 -	cmd.hdr.data_size = 1;
 +	cmd.command = MEI_NFC_CMD_MAINTENANCE;
 +	cmd.data_size = 1;
  	cmd.sub_command = MEI_NFC_SUBCMD_IF_VERSION;
  
++<<<<<<< HEAD
 +	r = mei_cldev_send(phy->device, (u8 *)&cmd, sizeof(struct mei_nfc_cmd));
++=======
+ 	MEI_DUMP_NFC_HDR("version", &cmd.hdr);
+ 	r = mei_cl_send(phy->cldev, (u8 *)&cmd, sizeof(struct mei_nfc_cmd));
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (r < 0) {
  		pr_err("Could not send IF version cmd\n");
  		return r;
@@@ -131,7 -132,7 +136,11 @@@
  	if (!reply)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	bytes_recv = mei_cldev_recv(phy->device, (u8 *)reply, if_version_length);
++=======
+ 	bytes_recv = mei_cl_recv(phy->cldev, (u8 *)reply, if_version_length);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (bytes_recv < 0 || bytes_recv < sizeof(struct mei_nfc_reply)) {
  		pr_err("Could not read IF version\n");
  		r = -EIO;
@@@ -184,14 -185,14 +193,23 @@@ static int mei_nfc_connect(struct nfc_m
  	connect->fw_ivn = phy->fw_ivn;
  	connect->vendor_id = phy->vendor_id;
  
++<<<<<<< HEAD
 +	r = mei_cldev_send(phy->device, (u8 *)cmd, connect_length);
++=======
+ 	MEI_DUMP_NFC_HDR("connect request", &cmd->hdr);
+ 	r = mei_cl_send(phy->cldev, (u8 *)cmd, connect_length);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (r < 0) {
  		pr_err("Could not send connect cmd %d\n", r);
  		goto err;
  	}
  
++<<<<<<< HEAD
 +	bytes_recv = mei_cldev_recv(phy->device, (u8 *)reply,
 +				    connect_resp_length);
++=======
+ 	bytes_recv = mei_cl_recv(phy->cldev, (u8 *)reply, connect_resp_length);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (bytes_recv < 0) {
  		r = bytes_recv;
  		pr_err("Could not read connect response %d\n", r);
@@@ -232,8 -235,10 +250,12 @@@ static int mei_nfc_send(struct nfc_mei_
  	hdr->reserved = 0;
  	hdr->data_size = length;
  
 -	MEI_DUMP_NFC_HDR("send", hdr);
 -
  	memcpy(mei_buf + MEI_NFC_HEADER_SIZE, buf, length);
++<<<<<<< HEAD
 +	err = mei_cldev_send(phy->device, mei_buf, length + MEI_NFC_HEADER_SIZE);
++=======
+ 	err = mei_cl_send(phy->cldev, mei_buf, length + MEI_NFC_HEADER_SIZE);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (err < 0)
  		goto out;
  
@@@ -270,10 -275,10 +292,14 @@@ static int nfc_mei_phy_write(void *phy_
  
  static int mei_nfc_recv(struct nfc_mei_phy *phy, u8 *buf, size_t length)
  {
 -	struct mei_nfc_hdr *hdr;
 +	struct mei_nfc_hci_hdr *hci_hdr;
  	int received_length;
  
++<<<<<<< HEAD
 +	received_length = mei_cldev_recv(phy->device, buf, length);
++=======
+ 	received_length = mei_cl_recv(phy->cldev, buf, length);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (received_length < 0)
  		return received_length;
  
@@@ -331,7 -337,7 +357,11 @@@ static int nfc_mei_phy_enable(void *phy
  	if (phy->powered == 1)
  		return 0;
  
++<<<<<<< HEAD
 +	r = mei_cldev_enable(phy->device);
++=======
+ 	r = mei_cl_enable_device(phy->cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	if (r < 0) {
  		pr_err("Could not enable device %d\n", r);
  		return r;
@@@ -349,7 -355,7 +379,11 @@@
  		goto err;
  	}
  
++<<<<<<< HEAD
 +	r = mei_cldev_register_event_cb(phy->device, BIT(MEI_CL_EVENT_RX),
++=======
+ 	r = mei_cl_register_event_cb(phy->cldev, BIT(MEI_CL_EVENT_RX),
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  				     nfc_mei_event_cb, phy);
  	if (r) {
  		pr_err("Event cb registration failed %d\n", r);
@@@ -362,7 -368,7 +396,11 @@@
  
  err:
  	phy->powered = 0;
++<<<<<<< HEAD
 +	mei_cldev_disable(phy->device);
++=======
+ 	mei_cl_disable_device(phy->cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	return r;
  }
  
@@@ -372,7 -378,7 +410,11 @@@ static void nfc_mei_phy_disable(void *p
  
  	pr_info("%s\n", __func__);
  
++<<<<<<< HEAD
 +	mei_cldev_disable(phy->device);
++=======
+ 	mei_cl_disable_device(phy->cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  
  	phy->powered = 0;
  }
@@@ -392,9 -398,9 +434,13 @@@ struct nfc_mei_phy *nfc_mei_phy_alloc(s
  	if (!phy)
  		return NULL;
  
- 	phy->device = device;
+ 	phy->cldev = cldev;
  	init_waitqueue_head(&phy->send_wq);
++<<<<<<< HEAD
 +	mei_cldev_set_drvdata(device, phy);
++=======
+ 	mei_cl_set_drvdata(cldev, phy);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  
  	return phy;
  }
@@@ -402,7 -408,7 +448,11 @@@ EXPORT_SYMBOL_GPL(nfc_mei_phy_alloc)
  
  void nfc_mei_phy_free(struct nfc_mei_phy *phy)
  {
++<<<<<<< HEAD
 +	mei_cldev_disable(phy->device);
++=======
+ 	mei_cl_disable_device(phy->cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  	kfree(phy);
  }
  EXPORT_SYMBOL_GPL(nfc_mei_phy_free);
diff --cc drivers/nfc/microread/mei.c
index c0847e5ae2b9,994871c02b7b..000000000000
--- a/drivers/nfc/microread/mei.c
+++ b/drivers/nfc/microread/mei.c
@@@ -55,11 -55,9 +55,15 @@@ static int microread_mei_probe(struct m
  	return 0;
  }
  
- static int microread_mei_remove(struct mei_cl_device *device)
+ static int microread_mei_remove(struct mei_cl_device *cldev)
  {
++<<<<<<< HEAD
 +	struct nfc_mei_phy *phy = mei_cldev_get_drvdata(device);
 +
 +	pr_info("Removing microread\n");
++=======
+ 	struct nfc_mei_phy *phy = mei_cl_get_drvdata(cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  
  	microread_remove(phy->hdev);
  
diff --cc drivers/nfc/pn544/mei.c
index 0f151ca12b28,2a2c9304e64c..000000000000
--- a/drivers/nfc/pn544/mei.c
+++ b/drivers/nfc/pn544/mei.c
@@@ -55,9 -53,9 +55,13 @@@ static int pn544_mei_probe(struct mei_c
  	return 0;
  }
  
- static int pn544_mei_remove(struct mei_cl_device *device)
+ static int pn544_mei_remove(struct mei_cl_device *cldev)
  {
++<<<<<<< HEAD
 +	struct nfc_mei_phy *phy = mei_cldev_get_drvdata(device);
++=======
+ 	struct nfc_mei_phy *phy = mei_cl_get_drvdata(cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  
  	pr_info("Removing pn544\n");
  
diff --cc include/linux/mei_cl_bus.h
index 2c6cf843cbb6,c364df750405..000000000000
--- a/include/linux/mei_cl_bus.h
+++ b/include/linux/mei_cl_bus.h
@@@ -8,7 -8,7 +8,11 @@@
  struct mei_cl_device;
  struct mei_device;
  
++<<<<<<< HEAD
 +typedef void (*mei_cldev_event_cb_t)(struct mei_cl_device *device,
++=======
+ typedef void (*mei_cl_event_cb_t)(struct mei_cl_device *cldev,
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  			       u32 events, void *context);
  
  /**
@@@ -62,24 -62,23 +66,37 @@@ struct mei_cl_driver 
  
  	const struct mei_cl_device_id *id_table;
  
- 	int (*probe)(struct mei_cl_device *dev,
+ 	int (*probe)(struct mei_cl_device *cldev,
  		     const struct mei_cl_device_id *id);
- 	int (*remove)(struct mei_cl_device *dev);
+ 	int (*remove)(struct mei_cl_device *cldev);
  };
  
++<<<<<<< HEAD
 +int __mei_cldev_driver_register(struct mei_cl_driver *cldrv,
 +				struct module *owner);
 +#define mei_cldev_driver_register(cldrv)	\
 +	__mei_cldev_driver_register(cldrv, THIS_MODULE)
 +
 +void mei_cldev_driver_unregister(struct mei_cl_driver *cldrv);
 +
 +ssize_t mei_cldrv_send(struct mei_cl_device *cldev, u8 *buf, size_t length);
 +ssize_t  mei_cldrv_recv(struct mei_cl_device *cldev, u8 *buf, size_t length);
 +
 +int mei_cldrv_register_event_cb(struct mei_cl_device *cldev,
++=======
+ int __mei_cl_driver_register(struct mei_cl_driver *cldrv, struct module *owner);
+ #define mei_cl_driver_register(cldrv)             \
+ 	__mei_cl_driver_register(cldrv, THIS_MODULE)
+ 
+ void mei_cl_driver_unregister(struct mei_cl_driver *cldrv);
+ 
+ ssize_t mei_cl_send(struct mei_cl_device *cldev, u8 *buf, size_t length);
+ ssize_t  mei_cl_recv(struct mei_cl_device *cldev, u8 *buf, size_t length);
+ 
+ int mei_cl_register_event_cb(struct mei_cl_device *cldev,
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  			  unsigned long event_mask,
 -			  mei_cl_event_cb_t read_cb, void *context);
 +			  mei_cldev_event_cb_t read_cb, void *context);
  
  #define MEI_CL_EVENT_RX 0
  #define MEI_CL_EVENT_TX 1
@@@ -88,11 -87,11 +105,19 @@@
  const uuid_le *mei_cldev_uuid(const struct mei_cl_device *cldev);
  u8 mei_cldev_ver(const struct mei_cl_device *cldev);
  
++<<<<<<< HEAD
 +void *mei_cldev_get_drvdata(const struct mei_cl_device *cldev);
 +void mei_cldev_set_drvdata(struct mei_cl_device *cldev, void *data);
 +
 +int mei_cldev_enable_device(struct mei_cl_device *cldev);
 +int mei_cldev_disable_device(struct mei_cl_device *cldev);
++=======
+ void *mei_cl_get_drvdata(const struct mei_cl_device *cldev);
+ void mei_cl_set_drvdata(struct mei_cl_device *cldev, void *data);
+ 
+ int mei_cl_enable_device(struct mei_cl_device *cldev);
+ int mei_cl_disable_device(struct mei_cl_device *cldev);
++>>>>>>> 893913822e82 (mei: bus: complete variable rename of type struct mei_cl_device)
  bool mei_cldev_enabled(struct mei_cl_device *cldev);
  
  #endif /* _LINUX_MEI_CL_BUS_H */
* Unmerged path drivers/nfc/mei_phy.c
diff --git a/drivers/nfc/mei_phy.h b/drivers/nfc/mei_phy.h
index fbfa3e61738f..acd3a1fc69e6 100644
--- a/drivers/nfc/mei_phy.h
+++ b/drivers/nfc/mei_phy.h
@@ -13,7 +13,7 @@
 /**
  * struct nfc_mei_phy
  *
- * @device: mei device
+ * @cldev: mei client device
  * @hdev:   nfc hci device
 
  * @send_wq: send completion wait queue
@@ -28,7 +28,7 @@
  *    and prevents normal operation.
  */
 struct nfc_mei_phy {
-	struct mei_cl_device *device;
+	struct mei_cl_device *cldev;
 	struct nfc_hci_dev *hdev;
 
 	wait_queue_head_t send_wq;
* Unmerged path drivers/nfc/microread/mei.c
* Unmerged path drivers/nfc/pn544/mei.c
* Unmerged path include/linux/mei_cl_bus.h
