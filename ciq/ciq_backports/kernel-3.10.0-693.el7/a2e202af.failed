md/linear: replace printk() with pr_*()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [md] linear: replace printk() with pr_*() (Jes Sorensen) [1380016]
Rebuild_FUZZ: 96.00%
commit-author NeilBrown <neilb@suse.com>
commit a2e202afa6aecd0ca0f7863deca4267bf1346e3d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a2e202af.failed

	Signed-off-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit a2e202afa6aecd0ca0f7863deca4267bf1346e3d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/linear.c
diff --cc drivers/md/linear.c
index 3310b59450b4,9c7d4f5483ea..000000000000
--- a/drivers/md/linear.c
+++ b/drivers/md/linear.c
@@@ -266,52 -226,49 +266,63 @@@ static void linear_make_request(struct 
  		return;
  	}
  
 -	do {
 -		tmp_dev = which_dev(mddev, bio->bi_iter.bi_sector);
 -		start_sector = tmp_dev->end_sector - tmp_dev->rdev->sectors;
 -		end_sector = tmp_dev->end_sector;
 -		data_offset = tmp_dev->rdev->data_offset;
 -		bio->bi_bdev = tmp_dev->rdev->bdev;
 -
 -		if (unlikely(bio->bi_iter.bi_sector >= end_sector ||
 -			     bio->bi_iter.bi_sector < start_sector))
 -			goto out_of_bounds;
 -
 -		if (unlikely(bio_end_sector(bio) > end_sector)) {
 -			/* This bio crosses a device boundary, so we have to
 -			 * split it.
 -			 */
 -			split = bio_split(bio, end_sector -
 -					  bio->bi_iter.bi_sector,
 -					  GFP_NOIO, fs_bio_set);
 -			bio_chain(split, bio);
 -		} else {
 -			split = bio;
 -		}
 +	tmp_dev = which_dev(mddev, bio->bi_sector);
 +	start_sector = tmp_dev->end_sector - tmp_dev->rdev->sectors;
 +
  
 -		split->bi_iter.bi_sector = split->bi_iter.bi_sector -
 -			start_sector + data_offset;
 +	if (unlikely(bio->bi_sector >= (tmp_dev->end_sector)
 +		     || (bio->bi_sector < start_sector))) {
 +		char b[BDEVNAME_SIZE];
  
 -		if (unlikely((bio_op(split) == REQ_OP_DISCARD) &&
 -			 !blk_queue_discard(bdev_get_queue(split->bi_bdev)))) {
 -			/* Just ignore it */
 -			bio_endio(split);
 -		} else
 -			generic_make_request(split);
 -	} while (split != bio);
 -	return;
 +		printk(KERN_ERR
 +		       "md/linear:%s: make_request: Sector %llu out of bounds on "
 +		       "dev %s: %llu sectors, offset %llu\n",
 +		       mdname(mddev),
 +		       (unsigned long long)bio->bi_sector,
 +		       bdevname(tmp_dev->rdev->bdev, b),
 +		       (unsigned long long)tmp_dev->rdev->sectors,
 +		       (unsigned long long)start_sector);
 +		bio_io_error(bio);
 +		return;
 +	}
 +	if (unlikely(bio_end_sector(bio) > tmp_dev->end_sector)) {
 +		/* This bio crosses a device boundary, so we have to
 +		 * split it.
 +		 */
 +		struct bio_pair *bp;
 +		sector_t end_sector = tmp_dev->end_sector;
 +
 +		bp = bio_split(bio, end_sector - bio->bi_sector);
 +
++<<<<<<< HEAD
 +		linear_make_request(mddev, &bp->bio1);
 +		linear_make_request(mddev, &bp->bio2);
 +		bio_pair_release(bp);
 +		return;
 +	}
 +		    
 +	bio->bi_bdev = tmp_dev->rdev->bdev;
 +	bio->bi_sector = bio->bi_sector - start_sector
 +		+ tmp_dev->rdev->data_offset;
 +
 +	if (unlikely((bio->bi_rw & REQ_DISCARD) &&
 +		     !blk_queue_discard(bdev_get_queue(bio->bi_bdev)))) {
 +		/* Just ignore it */
 +		bio_endio(bio, 0);
 +		return;
 +	}
  
 +	generic_make_request(bio);
++=======
+ out_of_bounds:
+ 	pr_err("md/linear:%s: make_request: Sector %llu out of bounds on dev %s: %llu sectors, offset %llu\n",
+ 	       mdname(mddev),
+ 	       (unsigned long long)bio->bi_iter.bi_sector,
+ 	       bdevname(tmp_dev->rdev->bdev, b),
+ 	       (unsigned long long)tmp_dev->rdev->sectors,
+ 	       (unsigned long long)start_sector);
+ 	bio_io_error(bio);
++>>>>>>> a2e202afa6ae (md/linear: replace printk() with pr_*())
  }
  
  static void linear_status (struct seq_file *seq, struct mddev *mddev)
* Unmerged path drivers/md/linear.c
