net: introduce change lower state notifier

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] introduce change lower state notifier (Ivan Vecera) [1275772 1297841 1331748]
Rebuild_FUZZ: 93.67%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 04d482660a07039fc4e9a42bb3517db236d98f96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/04d48266.failed

When lower device like bonding slave, team/bridge port, etc changes its
state, it is useful for others to notice this change. Currently this is
implemented specificly for bonding as NETDEV_BONDING_INFO notifier. This
patch aims to replace this specific usage and make this more generic to
be used for all upper-lower devices.

Introduce NETDEV_CHANGELOWERSTATE netdev notifier type and
netdev_lower_state_changed() helper.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 04d482660a07039fc4e9a42bb3517db236d98f96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index a24f678bb704,ad69f237aa78..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2220,12 -2157,9 +2220,17 @@@ struct netdev_lag_upper_info 
  #define NETDEV_PRECHANGEMTU	0x0017 /* notify before mtu change happened */
  #define NETDEV_CHANGEINFODATA	0x0018
  #define NETDEV_BONDING_INFO	0x0019
++<<<<<<< HEAD
 +#define NETDEV_OFFLOAD_PUSH_VXLAN	0x001C
 +#define NETDEV_OFFLOAD_PUSH_GENEVE	0x001D
++=======
+ #define NETDEV_PRECHANGEUPPER	0x001A
+ #define NETDEV_CHANGELOWERSTATE	0x001B
++>>>>>>> 04d482660a07 (net: introduce change lower state notifier)
  
 +/* (Un)registration functions for the notifiers that takes
 + * 'struct net_device *' as parameter
 + */
  int register_netdevice_notifier(struct notifier_block *nb);
  int unregister_netdevice_notifier(struct notifier_block *nb);
  
@@@ -2249,8 -2177,14 +2254,13 @@@ struct netdev_notifier_changeupper_inf
  	struct net_device *upper_dev; /* new upper dev */
  	bool master; /* is upper dev master */
  	bool linking; /* is the nofication for link or unlink */
 -	void *upper_info; /* upper dev info */
  };
  
+ struct netdev_notifier_changelowerstate_info {
+ 	struct netdev_notifier_info info; /* must be first */
+ 	void *lower_state_info; /* is lower dev state */
+ };
+ 
  static inline void netdev_notifier_info_init(struct netdev_notifier_info *info,
  					     struct net_device *dev)
  {
@@@ -3718,12 -3644,10 +3728,17 @@@ int netdev_master_upper_dev_link_privat
  void netdev_upper_dev_unlink(struct net_device *dev,
  			     struct net_device *upper_dev);
  void netdev_adjacent_rename_links(struct net_device *dev, char *oldname);
 +void *netdev_lower_dev_get_private_rcu(struct net_device *dev,
 +				       struct net_device *lower_dev);
  void *netdev_lower_dev_get_private(struct net_device *dev,
  				   struct net_device *lower_dev);
++<<<<<<< HEAD
 +int dev_get_nest_level(struct net_device *dev,
 +		       bool (*type_check)(struct net_device *dev));
++=======
+ void netdev_lower_state_changed(struct net_device *lower_dev,
+ 				void *lower_state_info);
++>>>>>>> 04d482660a07 (net: introduce change lower state notifier)
  
  /* RSS keys are 40 or 52 bytes long */
  #define NETDEV_RSS_KEY_LEN 52
* Unmerged path include/linux/netdevice.h
diff --git a/net/core/dev.c b/net/core/dev.c
index e2ceb23207bd..584cc9da80f5 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -5638,6 +5638,26 @@ int dev_get_nest_level(struct net_device *dev,
 }
 EXPORT_SYMBOL(dev_get_nest_level);
 
+/**
+ * netdev_lower_change - Dispatch event about lower device state change
+ * @lower_dev: device
+ * @lower_state_info: state to dispatch
+ *
+ * Send NETDEV_CHANGELOWERSTATE to netdev notifiers with info.
+ * The caller must hold the RTNL lock.
+ */
+void netdev_lower_state_changed(struct net_device *lower_dev,
+				void *lower_state_info)
+{
+	struct netdev_notifier_changelowerstate_info changelowerstate_info;
+
+	ASSERT_RTNL();
+	changelowerstate_info.lower_state_info = lower_state_info;
+	call_netdevice_notifiers_info(NETDEV_CHANGELOWERSTATE, lower_dev,
+				      &changelowerstate_info.info);
+}
+EXPORT_SYMBOL(netdev_lower_state_changed);
+
 static void dev_change_rx_flags(struct net_device *dev, int flags)
 {
 	const struct net_device_ops *ops = dev->netdev_ops;
