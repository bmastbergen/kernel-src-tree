crypto: testmgr - mark authenticated ctr(aes) also as FIPS able

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] testmgr - mark authenticated ctr(aes) also as FIPS able (Herbert Xu) [1459191]
Rebuild_FUZZ: 93.22%
commit-author Marcus Meissner <meissner@suse.de>
commit fb16abc2e9deedf075cfe2a01584b092ab5440e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/fb16abc2.failed

(2nd try that adds missing , to build.)

	Signed-off-by: Marcus Meissner <meissner@suse.de>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit fb16abc2e9deedf075cfe2a01584b092ab5440e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/testmgr.c
diff --cc crypto/testmgr.c
index ecb6e805d2bb,6e41a938786e..000000000000
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@@ -1991,8 -2062,60 +1991,65 @@@ static const struct alg_test_desc alg_t
  		.suite = {
  			.aead = {
  				.enc = {
++<<<<<<< HEAD
 +					.vecs = hmac_sha1_aes_cbc_enc_tv_template,
 +					.count = HMAC_SHA1_AES_CBC_ENC_TEST_VECTORS
++=======
+ 					.vecs =
+ 					hmac_sha1_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_DES3_EDE_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha1),ctr(aes))",
+ 		.test = alg_test_null,
+ 		.fips_allowed = 1,
+ 	}, {
+ 		.alg = "authenc(hmac(sha1),ecb(cipher_null))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha1_ecb_cipher_null_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_ECB_CIPHER_NULL_ENC_TEST_VEC
+ 				},
+ 				.dec = {
+ 					.vecs =
+ 					hmac_sha1_ecb_cipher_null_dec_tv_temp,
+ 					.count =
+ 					HMAC_SHA1_ECB_CIPHER_NULL_DEC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha224),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha224_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA224_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha224),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha224_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA224_DES3_EDE_CBC_ENC_TEST_VEC
++>>>>>>> fb16abc2e9de (crypto: testmgr - mark authenticated ctr(aes) also as FIPS able)
  				}
  			}
  		}
@@@ -2003,13 -2126,104 +2060,82 @@@
  		.suite = {
  			.aead = {
  				.enc = {
++<<<<<<< HEAD
 +					.vecs = hmac_sha256_aes_cbc_enc_tv_template,
 +					.count = HMAC_SHA256_AES_CBC_ENC_TEST_VECTORS
++=======
+ 					.vecs =
+ 					hmac_sha256_aes_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA256_AES_CBC_ENC_TEST_VEC
  				}
  			}
  		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha256),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha256_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA256_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha256),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha256_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA256_DES3_EDE_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha256),ctr(aes))",
+ 		.test = alg_test_null,
+ 		.fips_allowed = 1,
+ 	}, {
+ 		.alg = "authenc(hmac(sha384),cbc(des))",
+ 		.test = alg_test_aead,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha384_des_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA384_DES_CBC_ENC_TEST_VEC
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha384),cbc(des3_ede))",
+ 		.test = alg_test_aead,
+ 		.fips_allowed = 1,
+ 		.suite = {
+ 			.aead = {
+ 				.enc = {
+ 					.vecs =
+ 					hmac_sha384_des3_ede_cbc_enc_tv_temp,
+ 					.count =
+ 					HMAC_SHA384_DES3_EDE_CBC_ENC_TEST_VEC
++>>>>>>> fb16abc2e9de (crypto: testmgr - mark authenticated ctr(aes) also as FIPS able)
+ 				}
+ 			}
+ 		}
+ 	}, {
+ 		.alg = "authenc(hmac(sha384),ctr(aes))",
+ 		.test = alg_test_null,
+ 		.fips_allowed = 1,
  	}, {
  		.alg = "authenc(hmac(sha512),cbc(aes))",
 -		.fips_allowed = 1,
 -		.test = alg_test_aead,
 -		.suite = {
 -			.aead = {
 -				.enc = {
 -					.vecs =
 -					hmac_sha512_aes_cbc_enc_tv_temp,
 -					.count =
 -					HMAC_SHA512_AES_CBC_ENC_TEST_VEC
 -				}
 -			}
 -		}
 -	}, {
 -		.alg = "authenc(hmac(sha512),cbc(des))",
 -		.test = alg_test_aead,
 -		.suite = {
 -			.aead = {
 -				.enc = {
 -					.vecs =
 -					hmac_sha512_des_cbc_enc_tv_temp,
 -					.count =
 -					HMAC_SHA512_DES_CBC_ENC_TEST_VEC
 -				}
 -			}
 -		}
 -	}, {
 -		.alg = "authenc(hmac(sha512),cbc(des3_ede))",
  		.test = alg_test_aead,
  		.fips_allowed = 1,
  		.suite = {
* Unmerged path crypto/testmgr.c
