NFS: Fix a performance regression in readdir

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 79f687a3de9e3ba2518b4ea33f38ca6cbe9133eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/79f687a3.failed

Ben Coddington reports that commit 311324ad1713, by adding the function
nfs_dir_mapping_need_revalidate() that checks page cache validity on
each call to nfs_readdir() causes a performance regression when
the directory is being modified.

If the directory is changing while we're iterating through the directory,
POSIX does not require us to invalidate the page cache unless the user
calls rewinddir(). However, we still do want to ensure that we use
readdirplus in order to avoid a load of stat() calls when the user
is doing an 'ls -l' workload.

The fix should be to invalidate the page cache immediately when we're
setting the NFS_INO_ADVISE_RDPLUS bit.

	Reported-by: Benjamin Coddington <bcodding@redhat.com>
Fixes: 311324ad1713 ("NFS: Be more aggressive in using readdirplus...")
	Reviewed-by: Benjamin Coddington <bcodding@redhat.com>
	Tested-by: Benjamin Coddington <bcodding@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 79f687a3de9e3ba2518b4ea33f38ca6cbe9133eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/dir.c
diff --cc fs/nfs/dir.c
index 770fe7b74079,9220bc7b9cd7..000000000000
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@@ -887,14 -911,14 +876,19 @@@ static int nfs_readdir(struct file *fil
  	 */
  	memset(desc, 0, sizeof(*desc));
  
 -	desc->file = file;
 -	desc->ctx = ctx;
 +	desc->file = filp;
  	desc->dir_cookie = &dir_ctx->dir_cookie;
  	desc->decode = NFS_PROTO(inode)->decode_dirent;
 -	desc->plus = nfs_use_readdirplus(inode, ctx) ? 1 : 0;
 +	desc->plus = nfs_use_readdirplus(inode, filp) ? 1 : 0;
  
++<<<<<<< HEAD
 +	nfs_block_sillyrename(dentry);
 +	if (filp->f_pos == 0 || nfs_dir_mapping_need_revalidate(inode))
 +		res = nfs_revalidate_mapping(inode, filp->f_mapping);
++=======
+ 	if (ctx->pos == 0 || nfs_attribute_cache_expired(inode))
+ 		res = nfs_revalidate_mapping(inode, file->f_mapping);
++>>>>>>> 79f687a3de9e (NFS: Fix a performance regression in readdir)
  	if (res < 0)
  		goto out;
  
* Unmerged path fs/nfs/dir.c
