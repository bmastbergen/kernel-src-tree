net: bridge: check __vlan_vid_del for error

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] bridge: check __vlan_vid_del for error (Ivan Vecera) [1275772 1297841 1331748]
Rebuild_FUZZ: 93.83%
commit-author Vivien Didelot <vivien.didelot@savoirfairelinux.com>
commit bf361ad38165939049a2649b1a0078f3268d4bd1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bf361ad3.failed

Since __vlan_del can return an error code, change its inner function
__vlan_vid_del to return an eventual error from switchdev_port_obj_del.

	Signed-off-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
	Acked-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bf361ad38165939049a2649b1a0078f3268d4bd1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_vlan.c
diff --cc net/bridge/br_vlan.c
index 1122c9d717ea,5f5a02b49a99..000000000000
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@@ -87,6 -117,35 +87,38 @@@ out_filt
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static int __vlan_vid_del(struct net_device *dev, struct net_bridge *br,
+ 			  u16 vid)
+ {
+ 	const struct net_device_ops *ops = dev->netdev_ops;
+ 	int err = 0;
+ 
+ 	/* If driver uses VLAN ndo ops, use 8021q to delete vid
+ 	 * on device, otherwise try switchdev ops to delete vid.
+ 	 */
+ 
+ 	if (ops->ndo_vlan_rx_kill_vid) {
+ 		vlan_vid_del(dev, br->vlan_proto, vid);
+ 	} else {
+ 		struct switchdev_obj vlan_obj = {
+ 			.id = SWITCHDEV_OBJ_PORT_VLAN,
+ 			.u.vlan = {
+ 				.vid_begin = vid,
+ 				.vid_end = vid,
+ 			},
+ 		};
+ 
+ 		err = switchdev_port_obj_del(dev, &vlan_obj);
+ 		if (err == -EOPNOTSUPP)
+ 			err = 0;
+ 	}
+ 
+ 	return err;
+ }
+ 
++>>>>>>> bf361ad38165 (net: bridge: check __vlan_vid_del for error)
  static int __vlan_del(struct net_port_vlans *v, u16 vid)
  {
  	if (!test_bit(vid, v->vlan_bitmap))
@@@ -97,10 -156,11 +129,18 @@@
  
  	if (v->port_idx) {
  		struct net_bridge_port *p = v->parent.port;
++<<<<<<< HEAD
 +
 +		/* Toggle HW filters when filtering is enabled */
 +		if (p->br->vlan_enabled)
 +			vlan_vid_del(p->dev, p->br->vlan_proto, vid);
++=======
+ 		int err;
+ 
+ 		err = __vlan_vid_del(p->dev, p->br, vid);
+ 		if (err)
+ 			return err;
++>>>>>>> bf361ad38165 (net: bridge: check __vlan_vid_del for error)
  	}
  
  	clear_bit(vid, v->vlan_bitmap);
* Unmerged path net/bridge/br_vlan.c
