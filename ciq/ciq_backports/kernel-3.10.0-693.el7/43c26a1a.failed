net: more accurate checksumming in validate_xmit_skb()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] more accurate checksumming in validate_xmit_skb() (Davide Caratti) [1072503]
Rebuild_FUZZ: 95.15%
commit-author Davide Caratti <dcaratti@redhat.com>
commit 43c26a1a45938624fb9301e8bf7dfabbed293619
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/43c26a1a.failed

skb_csum_hwoffload_help() uses netdev features and skb->csum_not_inet to
determine if skb needs software computation of Internet Checksum or crc32c
(or nothing, if this computation can be done by the hardware). Use it in
place of skb_checksum_help() in validate_xmit_skb() to avoid corruption
of non-GSO SCTP packets having skb->ip_summed equal to CHECKSUM_PARTIAL.

While at it, remove references to skb_csum_off_chk* functions, since they
are not present anymore in Linux  _ see commit cf53b1da73bd ("Revert
 "net: Add driver helper functions to determine checksum offloadability"").

	Signed-off-by: Davide Caratti <dcaratti@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 43c26a1a45938624fb9301e8bf7dfabbed293619)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/checksum-offloads.txt
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index 6d99d7a5ae01,f8f7cd52a0a0..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -3747,7 -3927,12 +3747,14 @@@ int dev_get_nest_level(struct net_devic
  extern u8 netdev_rss_key[NETDEV_RSS_KEY_LEN] __read_mostly;
  void netdev_rss_key_fill(void *buffer, size_t len);
  
 -int dev_get_nest_level(struct net_device *dev);
  int skb_checksum_help(struct sk_buff *skb);
++<<<<<<< HEAD
++=======
+ int skb_crc32c_csum_help(struct sk_buff *skb);
+ int skb_csum_hwoffload_help(struct sk_buff *skb,
+ 			    const netdev_features_t features);
+ 
++>>>>>>> 43c26a1a4593 (net: more accurate checksumming in validate_xmit_skb())
  struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
  				  netdev_features_t features, bool tx_path);
  struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
diff --cc net/core/dev.c
index a6aab03373f7,bb136f726890..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -2784,7 -2996,18 +2784,22 @@@ static struct sk_buff *validate_xmit_vl
  	return skb;
  }
  
++<<<<<<< HEAD
 +struct sk_buff *validate_xmit_skb(struct sk_buff *skb, struct net_device *dev)
++=======
+ int skb_csum_hwoffload_help(struct sk_buff *skb,
+ 			    const netdev_features_t features)
+ {
+ 	if (unlikely(skb->csum_not_inet))
+ 		return !!(features & NETIF_F_SCTP_CRC) ? 0 :
+ 			skb_crc32c_csum_help(skb);
+ 
+ 	return !!(features & NETIF_F_CSUM_MASK) ? 0 : skb_checksum_help(skb);
+ }
+ EXPORT_SYMBOL(skb_csum_hwoffload_help);
+ 
+ static struct sk_buff *validate_xmit_skb(struct sk_buff *skb, struct net_device *dev)
++>>>>>>> 43c26a1a4593 (net: more accurate checksumming in validate_xmit_skb())
  {
  	netdev_features_t features;
  
* Unmerged path Documentation/networking/checksum-offloads.txt
* Unmerged path Documentation/networking/checksum-offloads.txt
* Unmerged path include/linux/netdevice.h
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 3d397b324356..71683c73c360 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -159,14 +159,11 @@
  *
  *   NETIF_F_IP_CSUM and NETIF_F_IPV6_CSUM are being deprecated in favor of
  *   NETIF_F_HW_CSUM. New devices should use NETIF_F_HW_CSUM to indicate
- *   checksum offload capability. If a	device has limited checksum capabilities
- *   (for instance can only perform NETIF_F_IP_CSUM or NETIF_F_IPV6_CSUM as
- *   described above) a helper function can be called to resolve
- *   CHECKSUM_PARTIAL. The helper functions are skb_csum_off_chk*. The helper
- *   function takes a spec argument that describes the protocol layer that is
- *   supported for checksum offload and can be called for each packet. If a
- *   packet does not match the specification for offload, skb_checksum_help
- *   is called to resolve the checksum.
+ *   checksum offload capability.
+ *   skb_csum_hwoffload_help() can be called to resolve CHECKSUM_PARTIAL based
+ *   on network device checksumming capabilities: if a packet does not match
+ *   them, skb_checksum_help or skb_crc32c_help (depending on the value of
+ *   csum_not_inet, see item D.) is called to resolve the checksum.
  *
  * CHECKSUM_NONE:
  *
* Unmerged path net/core/dev.c
