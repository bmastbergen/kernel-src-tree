x86, kaslr: Mix entropy sources together as needed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [x86] kaslr: Mix entropy sources together as needed (Baoquan He) [1290840]
Rebuild_FUZZ: 94.74%
commit-author Kees Cook <keescook@chromium.org>
commit a653f3563c51c7bb7de63d607bef09d3baddaeb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a653f356.failed

Depending on availability, mix the RDRAND and RDTSC entropy together with
XOR. Only when neither is available should the i8254 be used. Update
the Kconfig documentation to reflect this. Additionally, since bits
used for entropy is masked elsewhere, drop the needless masking in
the get_random_long(). Similarly, use the entire TSC, not just the low
32 bits.

Finally, to improve the starting entropy, do a simple hashing of a
build-time versions string and the boot-time boot_params structure for
some additional level of unpredictability.

	Signed-off-by: Kees Cook <keescook@chromium.org>
Link: http://lkml.kernel.org/r/20131111222839.GA28616@www.outflux.net
	Signed-off-by: H. Peter Anvin <hpa@zytor.com>
(cherry picked from commit a653f3563c51c7bb7de63d607bef09d3baddaeb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/boot/compressed/aslr.c
diff --cc arch/x86/Kconfig
index 5162fc083bed,596cd9edeb9c..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1789,12 -1722,56 +1789,60 @@@ config RELOCATABL
  
  	  Note: If CONFIG_RELOCATABLE=y, then the kernel runs from the address
  	  it has been loaded at and the compile time physical address
 -	  (CONFIG_PHYSICAL_START) is used as the minimum location.
 +	  (CONFIG_PHYSICAL_START) is ignored.
  
++<<<<<<< HEAD
 +# Relocation on x86-32 needs some additional build support
++=======
+ config RANDOMIZE_BASE
+ 	bool "Randomize the address of the kernel image"
+ 	depends on RELOCATABLE
+ 	depends on !HIBERNATION
+ 	default n
+ 	---help---
+ 	   Randomizes the physical and virtual address at which the
+ 	   kernel image is decompressed, as a security feature that
+ 	   deters exploit attempts relying on knowledge of the location
+ 	   of kernel internals.
+ 
+ 	   Entropy is generated using the RDRAND instruction if it is
+ 	   supported. If RDTSC is supported, it is used as well. If
+ 	   neither RDRAND nor RDTSC are supported, then randomness is
+ 	   read from the i8254 timer.
+ 
+ 	   The kernel will be offset by up to RANDOMIZE_BASE_MAX_OFFSET,
+ 	   and aligned according to PHYSICAL_ALIGN. Since the kernel is
+ 	   built using 2GiB addressing, and PHYSICAL_ALGIN must be at a
+ 	   minimum of 2MiB, only 10 bits of entropy is theoretically
+ 	   possible. At best, due to page table layouts, 64-bit can use
+ 	   9 bits of entropy and 32-bit uses 8 bits.
+ 
+ config RANDOMIZE_BASE_MAX_OFFSET
+ 	hex "Maximum ASLR offset allowed"
+ 	depends on RANDOMIZE_BASE
+ 	range 0x0 0x20000000 if X86_32
+ 	default "0x20000000" if X86_32
+ 	range 0x0 0x40000000 if X86_64
+ 	default "0x40000000" if X86_64
+ 	---help---
+ 	 Determines the maximal offset in bytes that will be applied to the
+ 	 kernel when Address Space Layout Randomization (ASLR) is active.
+ 	 Must be less than or equal to the actual physical memory on the
+ 	 system. This must be a multiple of CONFIG_PHYSICAL_ALIGN.
+ 
+ 	 On 32-bit this is limited to 512MiB.
+ 
+ 	 On 64-bit this is limited by how the kernel fixmap page table is
+ 	 positioned, so this cannot be larger that 1GiB currently. Normally
+ 	 there is a 512MiB to 1.5GiB split between kernel and modules. When
+ 	 this is raised above the 512MiB default, the modules area will
+ 	 shrink to compensate, up to the current maximum 1GiB to 1GiB split.
+ 
+ # Relocation on x86 needs some additional build support
++>>>>>>> a653f3563c51 (x86, kaslr: Mix entropy sources together as needed)
  config X86_NEED_RELOCS
  	def_bool y
 -	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
 +	depends on X86_32 && RELOCATABLE
  
  config PHYSICAL_ALIGN
  	hex "Alignment value to which kernel should be aligned"
* Unmerged path arch/x86/boot/compressed/aslr.c
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/boot/compressed/aslr.c
