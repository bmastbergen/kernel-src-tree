ASoC: intel: Replace kthread with work

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [sound] alsa: asoc: intel: Replace kthread with work (Jaroslav Kysela) [1399503]
Rebuild_FUZZ: 92.68%
commit-author Takashi Iwai <tiwai@suse.de>
commit 786e1c37194e8e822eb72a0aed5fa850e07071a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/786e1c37.failed

The usage pattern of kthread worker in Intel SST drivers can be
replaced gracefully with the normal workqueue, which is more light-
weight and easier to manage in general.  Let's do it.

While in the replacement, move the schedule_work() call inside the
spinlock for excluding the race, too.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
	Acked-by: Vinod Koul <vinod.koul@intel.com>
	Tested-by: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 786e1c37194e8e822eb72a0aed5fa850e07071a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/baytrail/sst-baytrail-ipc.c
#	sound/soc/intel/common/sst-ipc.c
#	sound/soc/intel/haswell/sst-haswell-ipc.c
#	sound/soc/intel/skylake/skl-sst-ipc.c
diff --cc sound/soc/intel/baytrail/sst-baytrail-ipc.c
index c8455b47388b,260447da32b8..000000000000
--- a/sound/soc/intel/baytrail/sst-baytrail-ipc.c
+++ b/sound/soc/intel/baytrail/sst-baytrail-ipc.c
@@@ -338,7 -337,7 +337,11 @@@ static irqreturn_t sst_byt_irq_thread(i
  	spin_unlock_irqrestore(&sst->spinlock, flags);
  
  	/* continue to send any remaining messages... */
++<<<<<<< HEAD
 +	queue_kthread_work(&ipc->kworker, &ipc->kwork);
++=======
+ 	schedule_work(&ipc->kwork);
++>>>>>>> 786e1c37194e (ASoC: intel: Replace kthread with work)
  
  	return IRQ_HANDLED;
  }
diff --cc sound/soc/intel/common/sst-ipc.c
index 1c9919d8b70a,62f3a8e0ec87..000000000000
--- a/sound/soc/intel/common/sst-ipc.c
+++ b/sound/soc/intel/common/sst-ipc.c
@@@ -109,10 -108,9 +108,14 @@@ static int ipc_tx_message(struct sst_ge
  		ipc->ops.tx_data_copy(msg, tx_data, tx_bytes);
  
  	list_add_tail(&msg->list, &ipc->tx_list);
+ 	schedule_work(&ipc->kwork);
  	spin_unlock_irqrestore(&ipc->dsp->spinlock, flags);
  
++<<<<<<< HEAD
 +	queue_kthread_work(&ipc->kworker, &ipc->kwork);
 +
++=======
++>>>>>>> 786e1c37194e (ASoC: intel: Replace kthread with work)
  	if (wait)
  		return tx_wait_done(ipc, msg, rx_data);
  	else
@@@ -305,19 -300,7 +305,23 @@@ int sst_ipc_init(struct sst_generic_ip
  	if (ret < 0)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	/* start the IPC message thread */
 +	init_kthread_worker(&ipc->kworker);
 +	ipc->tx_thread = kthread_run(kthread_worker_fn,
 +					&ipc->kworker, "%s",
 +					dev_name(ipc->dev));
 +	if (IS_ERR(ipc->tx_thread)) {
 +		dev_err(ipc->dev, "error: failed to create message TX task\n");
 +		ret = PTR_ERR(ipc->tx_thread);
 +		kfree(ipc->msg);
 +		return ret;
 +	}
 +
 +	init_kthread_work(&ipc->kwork, ipc_tx_msgs);
++=======
+ 	INIT_WORK(&ipc->kwork, ipc_tx_msgs);
++>>>>>>> 786e1c37194e (ASoC: intel: Replace kthread with work)
  	return 0;
  }
  EXPORT_SYMBOL_GPL(sst_ipc_init);
diff --cc sound/soc/intel/haswell/sst-haswell-ipc.c
index 91565229d074,a3459d1682a6..000000000000
--- a/sound/soc/intel/haswell/sst-haswell-ipc.c
+++ b/sound/soc/intel/haswell/sst-haswell-ipc.c
@@@ -818,7 -817,7 +817,11 @@@ static irqreturn_t hsw_irq_thread(int i
  	spin_unlock_irqrestore(&sst->spinlock, flags);
  
  	/* continue to send any remaining messages... */
++<<<<<<< HEAD
 +	queue_kthread_work(&ipc->kworker, &ipc->kwork);
++=======
+ 	schedule_work(&ipc->kwork);
++>>>>>>> 786e1c37194e (ASoC: intel: Replace kthread with work)
  
  	return IRQ_HANDLED;
  }
diff --cc sound/soc/intel/skylake/skl-sst-ipc.c
index 3646e7b6ff4c,e1391dfbc9e9..000000000000
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@@ -498,7 -498,7 +498,11 @@@ irqreturn_t skl_dsp_irq_thread_handler(
  	skl_ipc_int_enable(dsp);
  
  	/* continue to send any remaining messages... */
++<<<<<<< HEAD
 +	queue_kthread_work(&ipc->kworker, &ipc->kwork);
++=======
+ 	schedule_work(&ipc->kwork);
++>>>>>>> 786e1c37194e (ASoC: intel: Replace kthread with work)
  
  	return IRQ_HANDLED;
  }
* Unmerged path sound/soc/intel/baytrail/sst-baytrail-ipc.c
* Unmerged path sound/soc/intel/common/sst-ipc.c
diff --git a/sound/soc/intel/common/sst-ipc.h b/sound/soc/intel/common/sst-ipc.h
index f4aab1b3789a..7ed42a640ad6 100644
--- a/sound/soc/intel/common/sst-ipc.h
+++ b/sound/soc/intel/common/sst-ipc.h
@@ -23,7 +23,6 @@
 #include <linux/list.h>
 #include <linux/workqueue.h>
 #include <linux/sched.h>
-#include <linux/kthread.h>
 
 #define IPC_MAX_MAILBOX_BYTES	256
 
@@ -66,8 +65,7 @@ struct sst_generic_ipc {
 	struct list_head empty_list;
 	wait_queue_head_t wait_txq;
 	struct task_struct *tx_thread;
-	struct kthread_worker kworker;
-	struct kthread_work kwork;
+	struct work_struct kwork;
 	bool pending;
 	struct ipc_message *msg;
 	int tx_data_max_size;
* Unmerged path sound/soc/intel/haswell/sst-haswell-ipc.c
diff --git a/sound/soc/intel/skylake/skl-sst-cldma.c b/sound/soc/intel/skylake/skl-sst-cldma.c
index efa2532114ba..c9f6d87381db 100644
--- a/sound/soc/intel/skylake/skl-sst-cldma.c
+++ b/sound/soc/intel/skylake/skl-sst-cldma.c
@@ -17,7 +17,6 @@
 
 #include <linux/device.h>
 #include <linux/mm.h>
-#include <linux/kthread.h>
 #include <linux/delay.h>
 #include "../common/sst-dsp.h"
 #include "../common/sst-dsp-priv.h"
* Unmerged path sound/soc/intel/skylake/skl-sst-ipc.c
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.h b/sound/soc/intel/skylake/skl-sst-ipc.h
index 0568f2e8fc57..cc40341233fa 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.h
+++ b/sound/soc/intel/skylake/skl-sst-ipc.h
@@ -16,7 +16,6 @@
 #ifndef __SKL_IPC_H
 #define __SKL_IPC_H
 
-#include <linux/kthread.h>
 #include <linux/irqreturn.h>
 #include "../common/sst-ipc.h"
 
