taint/module: Fix problems when out-of-kernel driver defines true or false

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Larry Finger <Larry.Finger@lwfinger.net>
commit 5eb7c0d04f04a667c049fe090a95494a8de2955c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5eb7c0d0.failed

Commit 7fd8329ba502 ("taint/module: Clean up global and module taint
flags handling") used the key words true and false as character members
of a new struct. These names cause problems when out-of-kernel modules
such as VirtualBox include their own definitions of true and false.

Fixes: 7fd8329ba502 ("taint/module: Clean up global and module taint flags handling")
	Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
	Cc: Petr Mladek <pmladek@suse.com>
	Cc: Jessica Yu <jeyu@redhat.com>
	Cc: Rusty Russell <rusty@rustcorp.com.au>
	Reported-by: Valdis Kletnieks <Valdis.Kletnieks@vt.edu>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Acked-by: Rusty Russell <rusty@rustcorp.com.au>
	Signed-off-by: Jessica Yu <jeyu@redhat.com>
(cherry picked from commit 5eb7c0d04f04a667c049fe090a95494a8de2955c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kernel.h
#	kernel/module.c
#	kernel/panic.c
diff --cc include/linux/kernel.h
index 4ee809347a72,cb09238f6d32..000000000000
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@@ -498,26 -511,15 +498,34 @@@ extern enum system_states 
  #define TAINT_UNSIGNED_MODULE		13
  #define TAINT_SOFTLOCKUP		14
  #define TAINT_LIVEPATCH			15
 -#define TAINT_FLAGS_COUNT		16
 -
 +#define TAINT_16			16
 +#define TAINT_17			17
 +#define TAINT_18			18
 +#define TAINT_19			19
 +#define TAINT_20			20
 +#define TAINT_21			21
 +#define TAINT_22			22
 +#define TAINT_23			23
 +#define TAINT_24			24
 +#define TAINT_25			25
 +#define TAINT_26			26
 +#define TAINT_27			27
 +/* Reserving bits for vendor specific uses */
 +#define TAINT_HARDWARE_UNSUPPORTED	28
 +#define TAINT_TECH_PREVIEW		29
 +/* Bits 30 - 31 are reserved for Red Hat use only */
 +#define TAINT_RESERVED30		30
 +#define TAINT_RESERVED31		31
 +
++<<<<<<< HEAD
++=======
+ struct taint_flag {
+ 	char c_true;	/* character printed when tainted */
+ 	char c_false;	/* character printed when not tainted */
+ 	bool module;	/* also show as a per-module taint flag */
+ };
++>>>>>>> 5eb7c0d04f04 (taint/module: Fix problems when out-of-kernel driver defines true or false)
  
 -extern const struct taint_flag taint_flags[TAINT_FLAGS_COUNT];
  
  extern const char hex_asc[];
  #define hex_asc_lo(x)	hex_asc[((x) & 0x0f)]
diff --cc kernel/module.c
index 82f01d69a669,38d4270925d4..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -1107,24 -1141,13 +1107,33 @@@ static inline int module_unload_init(st
  static size_t module_flags_taint(struct module *mod, char *buf)
  {
  	size_t l = 0;
++<<<<<<< HEAD
++=======
+ 	int i;
+ 
+ 	for (i = 0; i < TAINT_FLAGS_COUNT; i++) {
+ 		if (taint_flags[i].module && test_bit(i, &mod->taints))
+ 			buf[l++] = taint_flags[i].c_true;
+ 	}
 -
++>>>>>>> 5eb7c0d04f04 (taint/module: Fix problems when out-of-kernel driver defines true or false)
 +
 +	if (mod->taints & (1 << TAINT_PROPRIETARY_MODULE))
 +		buf[l++] = 'P';
 +	if (mod->taints & (1 << TAINT_OOT_MODULE))
 +		buf[l++] = 'O';
 +	if (mod->taints & (1 << TAINT_FORCED_MODULE))
 +		buf[l++] = 'F';
 +	if (mod->taints & (1 << TAINT_CRAP))
 +		buf[l++] = 'C';
 +	if (mod->taints & (1 << TAINT_UNSIGNED_MODULE))
 +		buf[l++] = 'E';
 +	if (mod->taints & (1 << TAINT_TECH_PREVIEW))
 +		buf[l++] = 'T';
 +	/*
 +	 * TAINT_FORCED_RMMOD: could be added.
 +	 * TAINT_UNSAFE_SMP, TAINT_MACHINE_CHECK, TAINT_BAD_PAGE don't
 +	 * apply to modules.
 +	 */
  	return l;
  }
  
diff --cc kernel/panic.c
index 3011cd3cc5e3,901c4fb46002..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -303,10 -352,10 +303,17 @@@ const char *print_tainted(void
  		int i;
  
  		s = buf + sprintf(buf, "Tainted: ");
++<<<<<<< HEAD
 +		for (i = 0; i < ARRAY_SIZE(tnts); i++) {
 +			const struct tnt *t = &tnts[i];
 +			*s++ = test_bit(t->bit, &tainted_mask) ?
 +					t->true : t->false;
++=======
+ 		for (i = 0; i < TAINT_FLAGS_COUNT; i++) {
+ 			const struct taint_flag *t = &taint_flags[i];
+ 			*s++ = test_bit(i, &tainted_mask) ?
+ 					t->c_true : t->c_false;
++>>>>>>> 5eb7c0d04f04 (taint/module: Fix problems when out-of-kernel driver defines true or false)
  		}
  		*s = 0;
  	} else
* Unmerged path include/linux/kernel.h
* Unmerged path kernel/module.c
* Unmerged path kernel/panic.c
