autofs: remove possibly misleading /* #define DEBUG */

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tomohiro Kusumi <kusumi.tomohiro@gmail.com>
commit 962ca7cfbdc4d072350c94b2d52894b39f41be4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/962ca7cf.failed

Having this in autofs_i.h gives illusion that uncommenting this enables
pr_debug(), but it doesn't enable all the pr_debug() in autofs because
inclusion order matters.

XFS has the same DEBUG macro in its core header fs/xfs/xfs.h, however XFS
seems to have a rule to include this prior to other XFS headers as well as
kernel headers.  This is not the case with autofs, and DEBUG could be
enabled via Makefile, so autofs should just get rid of this comment to
make the code less confusing.  It's a comment, so there is literally no
functional difference.

Link: http://lkml.kernel.org/r/20160831033409.9910.77067.stgit@pluto.themaw.net
	Signed-off-by: Tomohiro Kusumi <kusumi.tomohiro@gmail.com>
	Signed-off-by: Ian Kent <raven@themaw.net>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 962ca7cfbdc4d072350c94b2d52894b39f41be4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/autofs4/autofs_i.h
diff --cc fs/autofs4/autofs_i.h
index 636b7eaa65bb,a1fba4285277..000000000000
--- a/fs/autofs4/autofs_i.h
+++ b/fs/autofs4/autofs_i.h
@@@ -36,28 -32,21 +36,35 @@@
  #include <linux/mount.h>
  #include <linux/namei.h>
  #include <asm/current.h>
 -#include <linux/uaccess.h>
 +#include <asm/uaccess.h>
 +
++<<<<<<< HEAD
 +/* #define DEBUG */
  
 +#define DPRINTK(fmt, ...)				\
 +	pr_debug(KBUILD_MODNAME ":pid:%d:%s: " fmt "\n",\
 +		current->pid, __func__, ##__VA_ARGS__)
++=======
+ #ifdef pr_fmt
+ #undef pr_fmt
+ #endif
+ #define pr_fmt(fmt) KBUILD_MODNAME ":pid:%d:%s: " fmt, current->pid, __func__
 -
 -/*
 - * Unified info structure.  This is pointed to by both the dentry and
 - * inode structures.  Each file in the filesystem has an instance of this
 - * structure.  It holds a reference to the dentry, so dentries are never
 - * flushed while the file exists.  All name lookups are dealt with at the
 - * dentry level, although the filesystem can interfere in the validation
 - * process.  Readdir is implemented by traversing the dentry lists.
 - */
++>>>>>>> 962ca7cfbdc4 (autofs: remove possibly misleading /* #define DEBUG */)
 +
 +#define AUTOFS_WARN(fmt, ...)				\
 +	pr_warn(KBUILD_MODNAME ":pid:%d:%s: " fmt "\n",	\
 +		current->pid, __func__, ##__VA_ARGS__)
 +
 +#define AUTOFS_ERROR(fmt, ...)				\
 +	pr_err(KBUILD_MODNAME ":pid:%d:%s: " fmt "\n",	\
 +		current->pid, __func__, ##__VA_ARGS__)
 +
 +/* Unified info structure.  This is pointed to by both the dentry and
 +   inode structures.  Each file in the filesystem has an instance of this
 +   structure.  It holds a reference to the dentry, so dentries are never
 +   flushed while the file exists.  All name lookups are dealt with at the
 +   dentry level, although the filesystem can interfere in the validation
 +   process.  Readdir is implemented by traversing the dentry lists. */
  struct autofs_info {
  	struct dentry	*dentry;
  	struct inode	*inode;
* Unmerged path fs/autofs4/autofs_i.h
