crytpo: ccp - CCP device driver build files

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit f114766088f352a47f57307ff927b815e0239644
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f1147660.failed

These files provide the ability to configure and build the
AMD CCP device driver and crypto API support.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit f114766088f352a47f57307ff927b815e0239644)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/Kconfig
#	drivers/crypto/Makefile
diff --cc drivers/crypto/Kconfig
index 20527bb8586f,4954d7579c5b..000000000000
--- a/drivers/crypto/Kconfig
+++ b/drivers/crypto/Kconfig
@@@ -378,14 -399,16 +378,28 @@@ config CRYPTO_DEV_ATMEL_SH
  	  To compile this driver as a module, choose M here: the module
  	  will be called atmel-sha.
  
++<<<<<<< HEAD
 +source "drivers/crypto/qat/Kconfig"
 +
 +config CRYPTO_DEV_VMX
 +	bool "Support for VMX cryptographic acceleration instructions"
 +	depends on PPC64
 +	help
 +	  Support for VMX cryptographic acceleration instructions.
 +
 +source "drivers/crypto/vmx/Kconfig"
++=======
+ config CRYPTO_DEV_CCP
+ 	bool "Support for AMD Cryptographic Coprocessor"
+ 	depends on X86
+ 	default n
+ 	help
+ 	  The AMD Cryptographic Coprocessor provides hardware support
+ 	  for encryption, hashing and related operations.
+ 
+ if CRYPTO_DEV_CCP
+ 	source "drivers/crypto/ccp/Kconfig"
+ endif
++>>>>>>> f114766088f3 (crytpo: ccp - CCP device driver build files)
  
  endif # CRYPTO_HW
diff --cc drivers/crypto/Makefile
index 70bff2195f9c,8a6c86a2e2c9..000000000000
--- a/drivers/crypto/Makefile
+++ b/drivers/crypto/Makefile
@@@ -1,25 -1,25 +1,34 @@@
 -obj-$(CONFIG_CRYPTO_DEV_PADLOCK_AES) += padlock-aes.o
 -obj-$(CONFIG_CRYPTO_DEV_PADLOCK_SHA) += padlock-sha.o
 +obj-$(CONFIG_CRYPTO_DEV_ATMEL_AES) += atmel-aes.o
 +obj-$(CONFIG_CRYPTO_DEV_ATMEL_SHA) += atmel-sha.o
 +obj-$(CONFIG_CRYPTO_DEV_ATMEL_TDES) += atmel-tdes.o
 +obj-$(CONFIG_CRYPTO_DEV_BFIN_CRC) += bfin_crc.o
 +obj-$(CONFIG_CRYPTO_DEV_FSL_CAAM) += caam/
  obj-$(CONFIG_CRYPTO_DEV_GEODE) += geode-aes.o
 -obj-$(CONFIG_CRYPTO_DEV_NIAGARA2) += n2_crypto.o
 -n2_crypto-y := n2_core.o n2_asm.o
  obj-$(CONFIG_CRYPTO_DEV_HIFN_795X) += hifn_795x.o
 -obj-$(CONFIG_CRYPTO_DEV_MV_CESA) += mv_cesa.o
 -obj-$(CONFIG_CRYPTO_DEV_TALITOS) += talitos.o
 -obj-$(CONFIG_CRYPTO_DEV_FSL_CAAM) += caam/
  obj-$(CONFIG_CRYPTO_DEV_IXP4XX) += ixp4xx_crypto.o
 -obj-$(CONFIG_CRYPTO_DEV_PPC4XX) += amcc/
 -obj-$(CONFIG_CRYPTO_DEV_OMAP_SHAM) += omap-sham.o
 +obj-$(CONFIG_CRYPTO_DEV_MV_CESA) += mv_cesa.o
 +obj-$(CONFIG_CRYPTO_DEV_NIAGARA2) += n2_crypto.o
 +n2_crypto-y := n2_core.o n2_asm.o
 +obj-$(CONFIG_CRYPTO_DEV_NX) += nx/
  obj-$(CONFIG_CRYPTO_DEV_OMAP_AES) += omap-aes.o
 +obj-$(CONFIG_CRYPTO_DEV_OMAP_SHAM) += omap-sham.o
 +obj-$(CONFIG_CRYPTO_DEV_PADLOCK_AES) += padlock-aes.o
 +obj-$(CONFIG_CRYPTO_DEV_PADLOCK_SHA) += padlock-sha.o
  obj-$(CONFIG_CRYPTO_DEV_PICOXCELL) += picoxcell_crypto.o
 -obj-$(CONFIG_CRYPTO_DEV_SAHARA) += sahara.o
 -obj-$(CONFIG_CRYPTO_DEV_DCP) += dcp.o
 +obj-$(CONFIG_CRYPTO_DEV_PPC4XX) += amcc/
  obj-$(CONFIG_CRYPTO_DEV_S5P) += s5p-sss.o
 +obj-$(CONFIG_CRYPTO_DEV_SAHARA) += sahara.o
 +obj-$(CONFIG_CRYPTO_DEV_TALITOS) += talitos.o
  obj-$(CONFIG_CRYPTO_DEV_TEGRA_AES) += tegra-aes.o
  obj-$(CONFIG_CRYPTO_DEV_UX500) += ux500/
++<<<<<<< HEAD
 +obj-$(CONFIG_CRYPTO_DEV_QAT) += qat/
 +obj-$(CONFIG_CRYPTO_DEV_VMX) += vmx/
++=======
+ obj-$(CONFIG_CRYPTO_DEV_BFIN_CRC) += bfin_crc.o
+ obj-$(CONFIG_CRYPTO_DEV_NX) += nx/
+ obj-$(CONFIG_CRYPTO_DEV_ATMEL_AES) += atmel-aes.o
+ obj-$(CONFIG_CRYPTO_DEV_ATMEL_TDES) += atmel-tdes.o
+ obj-$(CONFIG_CRYPTO_DEV_ATMEL_SHA) += atmel-sha.o
+ obj-$(CONFIG_CRYPTO_DEV_CCP) += ccp/
++>>>>>>> f114766088f3 (crytpo: ccp - CCP device driver build files)
* Unmerged path drivers/crypto/Kconfig
* Unmerged path drivers/crypto/Makefile
diff --git a/drivers/crypto/ccp/Kconfig b/drivers/crypto/ccp/Kconfig
new file mode 100644
index 000000000000..335ed5cac7a0
--- /dev/null
+++ b/drivers/crypto/ccp/Kconfig
@@ -0,0 +1,23 @@
+config CRYPTO_DEV_CCP_DD
+	tristate "Cryptographic Coprocessor device driver"
+	depends on CRYPTO_DEV_CCP
+	default m
+	help
+	  Provides the interface to use the AMD Cryptographic Coprocessor
+	  which can be used to accelerate or offload encryption operations
+	  such as SHA, AES and more. If you choose 'M' here, this module
+	  will be called ccp.
+
+config CRYPTO_DEV_CCP_CRYPTO
+	tristate "Encryption and hashing acceleration support"
+	depends on CRYPTO_DEV_CCP_DD
+	default m
+	select CRYPTO_ALGAPI
+	select CRYPTO_HASH
+	select CRYPTO_BLKCIPHER
+	select CRYPTO_AUTHENC
+	help
+	  Support for using the cryptographic API with the AMD Cryptographic
+	  Coprocessor. This module supports acceleration and offload of SHA
+	  and AES algorithms.  If you choose 'M' here, this module will be
+	  called ccp_crypto.
diff --git a/drivers/crypto/ccp/Makefile b/drivers/crypto/ccp/Makefile
new file mode 100644
index 000000000000..d3505a018720
--- /dev/null
+++ b/drivers/crypto/ccp/Makefile
@@ -0,0 +1,10 @@
+obj-$(CONFIG_CRYPTO_DEV_CCP_DD) += ccp.o
+ccp-objs := ccp-dev.o ccp-ops.o
+ccp-objs += ccp-pci.o
+
+obj-$(CONFIG_CRYPTO_DEV_CCP_CRYPTO) += ccp-crypto.o
+ccp-crypto-objs := ccp-crypto-main.o \
+		   ccp-crypto-aes.o \
+		   ccp-crypto-aes-cmac.o \
+		   ccp-crypto-aes-xts.o \
+		   ccp-crypto-sha.o
