HID: wacom: Replace magic masks and comparisons with switch cases

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: Replace magic masks and comparisons with switch cases (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 96.00%
commit-author Jason Gerecke <killertofu@gmail.com>
commit a8a09c8597bd301437c30ce0a4b2f511349a90aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a8a09c85.failed

Reasoning through the conditions under which a particular block of code
in 'wacom_intuos_general' will be reached is not at all easy due to the
sheer number of magic masks and comparisons. Remove these and replace
them with a switch statement over the various 'types' of packets that
will be encountered.

	Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit a8a09c8597bd301437c30ce0a4b2f511349a90aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index bdf17efa93aa,a426cb2a1834..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -492,13 -884,33 +492,41 @@@ static void wacom_intuos_general(struc
  {
  	struct wacom_features *features = &wacom->features;
  	unsigned char *data = wacom->data;
++<<<<<<< HEAD
 +	struct input_dev *input = wacom->input;
 +	unsigned int t;
 +
 +	/* general pen packet */
 +	if ((data[1] & 0xb8) == 0xa0) {
++=======
+ 	struct input_dev *input = wacom->pen_input;
+ 	int idx = (features->type == INTUOS) ? (data[1] & 0x01) : 0;
+ 	unsigned char type = (data[1] >> 1) & 0x0F;
+ 	unsigned int t;
+ 
+ 	if (data[0] != WACOM_REPORT_PENABLED && data[0] != WACOM_REPORT_CINTIQ &&
+ 		data[0] != WACOM_REPORT_INTUOS_PEN)
+ 		return 0;
+ 
+ 	if (features->type >= INTUOS3S) {
+ 		input_report_abs(input, ABS_X, (data[2] << 9) | (data[3] << 1) | ((data[9] >> 1) & 1));
+ 		input_report_abs(input, ABS_Y, (data[4] << 9) | (data[5] << 1) | (data[9] & 1));
+ 		input_report_abs(input, ABS_DISTANCE, ((data[9] >> 2) & 0x3f));
+ 	} else {
+ 		input_report_abs(input, ABS_X, be16_to_cpup((__be16 *)&data[2]));
+ 		input_report_abs(input, ABS_Y, be16_to_cpup((__be16 *)&data[4]));
+ 		input_report_abs(input, ABS_DISTANCE, ((data[9] >> 3) & 0x1f));
+ 	}
+ 
+ 	switch (type) {
+ 	case 0x00:
+ 	case 0x01:
+ 	case 0x02:
+ 	case 0x03:
+ 		/* general pen packet */
++>>>>>>> a8a09c8597bd (HID: wacom: Replace magic masks and comparisons with switch cases)
  		t = (data[6] << 2) | ((data[7] >> 6) & 3);
 -		if (features->pressure_max == 2047) {
 +		if (features->type >= INTUOS4S && features->type <= WACOM_24HD) {
  			t = (t << 1) | (data[1] & 1);
  		}
  		input_report_abs(input, ABS_PRESSURE, t);
@@@ -517,263 -932,30 +546,270 @@@
  		input_report_abs(input, ABS_TILT_X,
  				 (((data[7] << 1) & 0x7e) | (data[8] >> 7)) - 64);
  		input_report_abs(input, ABS_TILT_Y, (data[8] & 0x7f) - 64);
++<<<<<<< HEAD
 +	}
 +}
 +
 +static int wacom_intuos_irq(struct wacom_wac *wacom)
 +{
 +	struct wacom_features *features = &wacom->features;
 +	unsigned char *data = wacom->data;
 +	struct input_dev *input = wacom->input;
 +	unsigned int t;
 +	int idx = 0, result;
 +
 +	if (data[0] != WACOM_REPORT_PENABLED &&
 +	    data[0] != WACOM_REPORT_INTUOSREAD &&
 +	    data[0] != WACOM_REPORT_INTUOSWRITE &&
 +	    data[0] != WACOM_REPORT_INTUOSPAD &&
 +	    data[0] != WACOM_REPORT_CINTIQ &&
 +	    data[0] != WACOM_REPORT_CINTIQPAD &&
 +	    data[0] != WACOM_REPORT_INTUOS5PAD) {
 +		dev_dbg(input->dev.parent,
 +			"%s: received unknown report #%d\n", __func__, data[0]);
 +                return 0;
 +	}
 +
 +	/* tool number */
 +	if (features->type == INTUOS)
 +		idx = data[1] & 0x01;
 +
 +	/* pad packets. Works as a second tool and is always in prox */
 +	if (data[0] == WACOM_REPORT_INTUOSPAD || data[0] == WACOM_REPORT_INTUOS5PAD ||
 +	    data[0] == WACOM_REPORT_CINTIQPAD) {
 +		if (features->type >= INTUOS4S && features->type <= INTUOS4L) {
 +			input_report_key(input, BTN_0, (data[2] & 0x01));
 +			input_report_key(input, BTN_1, (data[3] & 0x01));
 +			input_report_key(input, BTN_2, (data[3] & 0x02));
 +			input_report_key(input, BTN_3, (data[3] & 0x04));
 +			input_report_key(input, BTN_4, (data[3] & 0x08));
 +			input_report_key(input, BTN_5, (data[3] & 0x10));
 +			input_report_key(input, BTN_6, (data[3] & 0x20));
 +			if (data[1] & 0x80) {
 +				input_report_abs(input, ABS_WHEEL, (data[1] & 0x7f));
 +			} else {
 +				/* Out of proximity, clear wheel value. */
 +				input_report_abs(input, ABS_WHEEL, 0);
 +			}
 +			if (features->type != INTUOS4S) {
 +				input_report_key(input, BTN_7, (data[3] & 0x40));
 +				input_report_key(input, BTN_8, (data[3] & 0x80));
 +			}
 +			if (data[1] | (data[2] & 0x01) | data[3]) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		} else if (features->type == DTK) {
 +			input_report_key(input, BTN_0, (data[6] & 0x01));
 +			input_report_key(input, BTN_1, (data[6] & 0x02));
 +			input_report_key(input, BTN_2, (data[6] & 0x04));
 +			input_report_key(input, BTN_3, (data[6] & 0x08));
 +			input_report_key(input, BTN_4, (data[6] & 0x10));
 +			input_report_key(input, BTN_5, (data[6] & 0x20));
 +			if (data[6] & 0x3f) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		} else if (features->type == WACOM_13HD) {
 +			input_report_key(input, BTN_0, (data[3] & 0x01));
 +			input_report_key(input, BTN_1, (data[4] & 0x01));
 +			input_report_key(input, BTN_2, (data[4] & 0x02));
 +			input_report_key(input, BTN_3, (data[4] & 0x04));
 +			input_report_key(input, BTN_4, (data[4] & 0x08));
 +			input_report_key(input, BTN_5, (data[4] & 0x10));
 +			input_report_key(input, BTN_6, (data[4] & 0x20));
 +			input_report_key(input, BTN_7, (data[4] & 0x40));
 +			input_report_key(input, BTN_8, (data[4] & 0x80));
 +			if ((data[3] & 0x01) | data[4]) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		} else if (features->type == WACOM_24HD) {
 +			input_report_key(input, BTN_0, (data[6] & 0x01));
 +			input_report_key(input, BTN_1, (data[6] & 0x02));
 +			input_report_key(input, BTN_2, (data[6] & 0x04));
 +			input_report_key(input, BTN_3, (data[6] & 0x08));
 +			input_report_key(input, BTN_4, (data[6] & 0x10));
 +			input_report_key(input, BTN_5, (data[6] & 0x20));
 +			input_report_key(input, BTN_6, (data[6] & 0x40));
 +			input_report_key(input, BTN_7, (data[6] & 0x80));
 +			input_report_key(input, BTN_8, (data[8] & 0x01));
 +			input_report_key(input, BTN_9, (data[8] & 0x02));
 +			input_report_key(input, BTN_A, (data[8] & 0x04));
 +			input_report_key(input, BTN_B, (data[8] & 0x08));
 +			input_report_key(input, BTN_C, (data[8] & 0x10));
 +			input_report_key(input, BTN_X, (data[8] & 0x20));
 +			input_report_key(input, BTN_Y, (data[8] & 0x40));
 +			input_report_key(input, BTN_Z, (data[8] & 0x80));
 +
 +			/*
 +			 * Three "buttons" are available on the 24HD which are
 +			 * physically implemented as a touchstrip. Each button
 +			 * is approximately 3 bits wide with a 2 bit spacing.
 +			 * The raw touchstrip bits are stored at:
 +			 *    ((data[3] & 0x1f) << 8) | data[4])
 +			 */
 +			input_report_key(input, KEY_PROG1, data[4] & 0x07);
 +			input_report_key(input, KEY_PROG2, data[4] & 0xE0);
 +			input_report_key(input, KEY_PROG3, data[3] & 0x1C);
 +
 +			if (data[1] & 0x80) {
 +				input_report_abs(input, ABS_WHEEL, (data[1] & 0x7f));
 +			} else {
 +				/* Out of proximity, clear wheel value. */
 +				input_report_abs(input, ABS_WHEEL, 0);
 +			}
 +
 +			if (data[2] & 0x80) {
 +				input_report_abs(input, ABS_THROTTLE, (data[2] & 0x7f));
 +			} else {
 +				/* Out of proximity, clear second wheel value. */
 +				input_report_abs(input, ABS_THROTTLE, 0);
 +			}
 +
 +			if (data[1] | data[2] | (data[3] & 0x1f) | data[4] | data[6] | data[8]) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		} else if (features->type == WACOM_27QHD) {
 +			input_report_key(input, KEY_PROG1, data[2] & 0x01);
 +			input_report_key(input, KEY_PROG2, data[2] & 0x02);
 +			input_report_key(input, KEY_PROG3, data[2] & 0x04);
 +
 +			input_report_abs(input, ABS_X, be16_to_cpup((__be16 *)&data[4]));
 +			input_report_abs(input, ABS_Y, be16_to_cpup((__be16 *)&data[6]));
 +			input_report_abs(input, ABS_Z, be16_to_cpup((__be16 *)&data[8]));
 +			if ((data[2] & 0x07) | data[4] | data[5] | data[6] | data[7] | data[8] | data[9]) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		} else if (features->type >= INTUOS5S && features->type <= INTUOSPL) {
 +			int i;
 +
 +			/* Touch ring mode switch has no capacitive sensor */
 +			input_report_key(input, BTN_0, (data[3] & 0x01));
 +
 +			/*
 +			 * ExpressKeys on Intuos5/Intuos Pro have a capacitive sensor in
 +			 * addition to the mechanical switch. Switch data is
 +			 * stored in data[4], capacitive data in data[5].
 +			 */
 +			for (i = 0; i < 8; i++)
 +				input_report_key(input, BTN_1 + i, data[4] & (1 << i));
 +
 +			if (data[2] & 0x80) {
 +				input_report_abs(input, ABS_WHEEL, (data[2] & 0x7f));
 +			} else {
 +				/* Out of proximity, clear wheel value. */
 +				input_report_abs(input, ABS_WHEEL, 0);
 +			}
 +
 +			if (data[2] | (data[3] & 0x01) | data[4] | data[5]) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		} else {
 +			if (features->type == WACOM_21UX2 || features->type == WACOM_22HD) {
 +				input_report_key(input, BTN_0, (data[5] & 0x01));
 +				input_report_key(input, BTN_1, (data[6] & 0x01));
 +				input_report_key(input, BTN_2, (data[6] & 0x02));
 +				input_report_key(input, BTN_3, (data[6] & 0x04));
 +				input_report_key(input, BTN_4, (data[6] & 0x08));
 +				input_report_key(input, BTN_5, (data[6] & 0x10));
 +				input_report_key(input, BTN_6, (data[6] & 0x20));
 +				input_report_key(input, BTN_7, (data[6] & 0x40));
 +				input_report_key(input, BTN_8, (data[6] & 0x80));
 +				input_report_key(input, BTN_9, (data[7] & 0x01));
 +				input_report_key(input, BTN_A, (data[8] & 0x01));
 +				input_report_key(input, BTN_B, (data[8] & 0x02));
 +				input_report_key(input, BTN_C, (data[8] & 0x04));
 +				input_report_key(input, BTN_X, (data[8] & 0x08));
 +				input_report_key(input, BTN_Y, (data[8] & 0x10));
 +				input_report_key(input, BTN_Z, (data[8] & 0x20));
 +				input_report_key(input, BTN_BASE, (data[8] & 0x40));
 +				input_report_key(input, BTN_BASE2, (data[8] & 0x80));
 +
 +				if (features->type == WACOM_22HD) {
 +					input_report_key(input, KEY_PROG1, data[9] & 0x01);
 +					input_report_key(input, KEY_PROG2, data[9] & 0x02);
 +					input_report_key(input, KEY_PROG3, data[9] & 0x04);
 +				}
 +			} else {
 +				input_report_key(input, BTN_0, (data[5] & 0x01));
 +				input_report_key(input, BTN_1, (data[5] & 0x02));
 +				input_report_key(input, BTN_2, (data[5] & 0x04));
 +				input_report_key(input, BTN_3, (data[5] & 0x08));
 +				input_report_key(input, BTN_4, (data[6] & 0x01));
 +				input_report_key(input, BTN_5, (data[6] & 0x02));
 +				input_report_key(input, BTN_6, (data[6] & 0x04));
 +				input_report_key(input, BTN_7, (data[6] & 0x08));
 +				input_report_key(input, BTN_8, (data[5] & 0x10));
 +				input_report_key(input, BTN_9, (data[6] & 0x10));
 +			}
 +			input_report_abs(input, ABS_RX, ((data[1] & 0x1f) << 8) | data[2]);
 +			input_report_abs(input, ABS_RY, ((data[3] & 0x1f) << 8) | data[4]);
 +
 +			if ((data[5] & 0x1f) | data[6] | (data[1] & 0x1f) |
 +				data[2] | (data[3] & 0x1f) | data[4] | data[8] |
 +				(data[7] & 0x01)) {
 +				input_report_abs(input, ABS_MISC, PAD_DEVICE_ID);
 +			} else {
 +				input_report_abs(input, ABS_MISC, 0);
 +			}
 +		}
 +		input_event(input, EV_MSC, MSC_SERIAL, 0xffffffff);
 +                return 1;
 +	}
 +
 +	/* process in/out prox events */
 +	result = wacom_intuos_inout(wacom);
 +	if (result)
 +                return result - 1;
 +
 +	if (features->type >= INTUOS3S) {
 +		input_report_abs(input, ABS_X, (data[2] << 9) | (data[3] << 1) | ((data[9] >> 1) & 1));
 +		input_report_abs(input, ABS_Y, (data[4] << 9) | (data[5] << 1) | (data[9] & 1));
 +		input_report_abs(input, ABS_DISTANCE, ((data[9] >> 2) & 0x3f));
 +	} else {
 +		input_report_abs(input, ABS_X, be16_to_cpup((__be16 *)&data[2]));
 +		input_report_abs(input, ABS_Y, be16_to_cpup((__be16 *)&data[4]));
 +		input_report_abs(input, ABS_DISTANCE, ((data[9] >> 3) & 0x1f));
 +	}
 +
 +	/* process general packets */
 +	wacom_intuos_general(wacom);
++=======
+ 		break;
  
- 	/* 4D mouse, 2D mouse, marker pen rotation, tilt mouse, or Lens cursor packets */
- 	if ((data[1] & 0xbc) == 0xa8 || (data[1] & 0xbe) == 0xb0 || (data[1] & 0xbc) == 0xac) {
- 
- 		if (data[1] & 0x02) {
- 			/* Rotation packet */
- 			if (features->type >= INTUOS3S) {
- 				/* I3 marker pen rotation */
- 				t = (data[6] << 3) | ((data[7] >> 5) & 7);
- 				t = (data[7] & 0x20) ? ((t > 900) ? ((t-1) / 2 - 1350) :
- 					((t-1) / 2 + 450)) : (450 - t / 2) ;
- 				input_report_abs(input, ABS_Z, t);
- 			} else {
- 				/* 4D mouse rotation packet */
- 				t = (data[6] << 3) | ((data[7] >> 5) & 7);
- 				input_report_abs(input, ABS_RZ, (data[7] & 0x20) ?
- 					((t - 1) / 2) : -t / 2);
- 			}
+ 	case 0x05:
+ 	case 0x07:
+ 		/* Rotation packet */
+ 		if (features->type >= INTUOS3S) {
+ 			/* I3 marker pen rotation */
+ 			t = (data[6] << 3) | ((data[7] >> 5) & 7);
+ 			t = (data[7] & 0x20) ? ((t > 900) ? ((t-1) / 2 - 1350) :
+ 				((t-1) / 2 + 450)) : (450 - t / 2) ;
+ 			input_report_abs(input, ABS_Z, t);
+ 		} else {
+ 			/* 4D mouse rotation packet */
+ 			t = (data[6] << 3) | ((data[7] >> 5) & 7);
+ 			input_report_abs(input, ABS_RZ, (data[7] & 0x20) ?
+ 				((t - 1) / 2) : -t / 2);
+ 		}
+ 		break;
++>>>>>>> a8a09c8597bd (HID: wacom: Replace magic masks and comparisons with switch cases)
  
- 		} else if (!(data[1] & 0x10) && features->type < INTUOS3S) {
+ 	/* 4D mouse, 2D mouse, marker pen rotation, tilt mouse, or Lens cursor packets */
+ 	case 0x04:
+ 	case 0x06:
+ 	case 0x08:
+ 		if (features->type < INTUOS3S && type != 0x08) {
  			/* 4D mouse packet */
  			input_report_key(input, BTN_LEFT,   data[8] & 0x01);
  			input_report_key(input, BTN_MIDDLE, data[8] & 0x02);
* Unmerged path drivers/hid/wacom_wac.c
