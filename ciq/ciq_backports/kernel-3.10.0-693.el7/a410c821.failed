i40e: fix disable overflow promiscuous mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alan Brady <alan.brady@intel.com>
commit a410c821c0cf50bc0b73a91435852cd04b2c7acd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a410c821.failed

There exists a bug in which the driver is unable to exit overflow
promiscuous mode after having added "too many" mac filters.  It is
expected that after triggering overflow promiscuous, removing the
failed/extra filters should then disable overflow promiscuous mode.

The bug exists because we were intentionally skipping the sync_vsi_filter
path in cases where we were removing failed filters since they shouldn't
have been added to the firmware in the first place, however we still
need to go through the sync_vsi_filter code path to determine whether or
not it is ok to exit overflow promiscuous mode.  This patch fixes the
bug by making sure we go through the sync_vsi_filter path in cases of
failed filters.

Change-ID: I634d249ca3e5fa50729553137c295e73e7722143
	Signed-off-by: Alan Brady <alan.brady@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit a410c821c0cf50bc0b73a91435852cd04b2c7acd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index e910f71bdc92,fb8a52dd94cd..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -1360,14 -1428,48 +1360,54 @@@ add_filter_out
  }
  
  /**
++<<<<<<< HEAD
 + * i40e_del_filter - Remove a mac/vlan filter from the VSI
++=======
+  * __i40e_del_filter - Remove a specific filter from the VSI
+  * @vsi: VSI to remove from
+  * @f: the filter to remove from the list
+  *
+  * This function should be called instead of i40e_del_filter only if you know
+  * the exact filter you will remove already, such as via i40e_find_filter or
+  * i40e_find_mac.
+  *
+  * NOTE: This function is expected to be called with mac_filter_hash_lock
+  * being held.
+  * ANOTHER NOTE: This function MUST be called from within the context of
+  * the "safe" variants of any list iterators, e.g. list_for_each_entry_safe()
+  * instead of list_for_each_entry().
+  **/
+ void __i40e_del_filter(struct i40e_vsi *vsi, struct i40e_mac_filter *f)
+ {
+ 	if (!f)
+ 		return;
+ 
+ 	/* If the filter was never added to firmware then we can just delete it
+ 	 * directly and we don't want to set the status to remove or else an
+ 	 * admin queue command will unnecessarily fire.
+ 	 */
+ 	if ((f->state == I40E_FILTER_FAILED) ||
+ 	    (f->state == I40E_FILTER_NEW)) {
+ 		hash_del(&f->hlist);
+ 		kfree(f);
+ 	} else {
+ 		f->state = I40E_FILTER_REMOVE;
+ 	}
+ 
+ 	vsi->flags |= I40E_VSI_FLAG_FILTER_CHANGED;
+ 	vsi->back->flags |= I40E_FLAG_FILTER_SYNC;
+ }
+ 
+ /**
+  * i40e_del_filter - Remove a MAC/VLAN filter from the VSI
++>>>>>>> a410c821c0cf (i40e: fix disable overflow promiscuous mode)
   * @vsi: the VSI to be searched
   * @macaddr: the MAC address
 - * @vlan: the VLAN
 + * @vlan: the vlan
 + * @is_vf: make sure it's a VF filter, else doesn't matter
 + * @is_netdev: make sure it's a netdev filter, else doesn't matter
   *
 - * NOTE: This function is expected to be called with mac_filter_hash_lock
 + * NOTE: This function is expected to be called with mac_filter_list_lock
   * being held.
   * ANOTHER NOTE: This function MUST be called from within the context of
   * the "safe" variants of any list iterators, e.g. list_for_each_entry_safe()
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
