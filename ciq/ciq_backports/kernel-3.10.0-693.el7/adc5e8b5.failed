kernfs: drop s_ prefix from kernfs_node members

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tejun Heo <tj@kernel.org>
commit adc5e8b58f4886d45f79f4ff41a09001a76a6b12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/adc5e8b5.failed

kernfs has just been separated out from sysfs and we're already in
full conflict mode.  Nothing can make the situation any worse.  Let's
take the chance to name things properly.

s_ prefix for kernfs members is used inconsistently and a misnomer
now.  It's not like kernfs_node is used widely across the kernel
making the ability to grep for the members particularly useful.  Let's
just drop the prefix.

This patch is strictly rename only and doesn't introduce any
functional difference.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit adc5e8b58f4886d45f79f4ff41a09001a76a6b12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/kernfs/dir.c
#	fs/kernfs/file.c
#	fs/kernfs/inode.c
#	fs/kernfs/kernfs-internal.h
#	fs/kernfs/symlink.c
#	fs/sysfs/dir.c
#	fs/sysfs/file.c
#	fs/sysfs/symlink.c
#	include/linux/kernfs.h
diff --cc fs/kernfs/dir.c
index 1061602ce81a,51fff9d2b334..000000000000
--- a/fs/kernfs/dir.c
+++ b/fs/kernfs/dir.c
@@@ -7,3 -7,1010 +7,1013 @@@
   *
   * This file is released under the GPLv2.
   */
++<<<<<<< HEAD
++=======
+ 
+ #include <linux/fs.h>
+ #include <linux/namei.h>
+ #include <linux/idr.h>
+ #include <linux/slab.h>
+ #include <linux/security.h>
+ #include <linux/hash.h>
+ 
+ #include "kernfs-internal.h"
+ 
+ DEFINE_MUTEX(sysfs_mutex);
+ 
+ #define rb_to_kn(X) rb_entry((X), struct kernfs_node, rb)
+ 
+ /**
+  *	sysfs_name_hash
+  *	@name: Null terminated string to hash
+  *	@ns:   Namespace tag to hash
+  *
+  *	Returns 31 bit hash of ns + name (so it fits in an off_t )
+  */
+ static unsigned int sysfs_name_hash(const char *name, const void *ns)
+ {
+ 	unsigned long hash = init_name_hash();
+ 	unsigned int len = strlen(name);
+ 	while (len--)
+ 		hash = partial_name_hash(*name++, hash);
+ 	hash = (end_name_hash(hash) ^ hash_ptr((void *)ns, 31));
+ 	hash &= 0x7fffffffU;
+ 	/* Reserve hash numbers 0, 1 and INT_MAX for magic directory entries */
+ 	if (hash < 1)
+ 		hash += 2;
+ 	if (hash >= INT_MAX)
+ 		hash = INT_MAX - 1;
+ 	return hash;
+ }
+ 
+ static int sysfs_name_compare(unsigned int hash, const char *name,
+ 			      const void *ns, const struct kernfs_node *kn)
+ {
+ 	if (hash != kn->hash)
+ 		return hash - kn->hash;
+ 	if (ns != kn->ns)
+ 		return ns - kn->ns;
+ 	return strcmp(name, kn->name);
+ }
+ 
+ static int sysfs_sd_compare(const struct kernfs_node *left,
+ 			    const struct kernfs_node *right)
+ {
+ 	return sysfs_name_compare(left->hash, left->name, left->ns, right);
+ }
+ 
+ /**
+  *	sysfs_link_sibling - link kernfs_node into sibling rbtree
+  *	@kn: kernfs_node of interest
+  *
+  *	Link @kn into its sibling rbtree which starts from
+  *	@kn->parent->dir.children.
+  *
+  *	Locking:
+  *	mutex_lock(sysfs_mutex)
+  *
+  *	RETURNS:
+  *	0 on susccess -EEXIST on failure.
+  */
+ static int sysfs_link_sibling(struct kernfs_node *kn)
+ {
+ 	struct rb_node **node = &kn->parent->dir.children.rb_node;
+ 	struct rb_node *parent = NULL;
+ 
+ 	if (sysfs_type(kn) == SYSFS_DIR)
+ 		kn->parent->dir.subdirs++;
+ 
+ 	while (*node) {
+ 		struct kernfs_node *pos;
+ 		int result;
+ 
+ 		pos = rb_to_kn(*node);
+ 		parent = *node;
+ 		result = sysfs_sd_compare(kn, pos);
+ 		if (result < 0)
+ 			node = &pos->rb.rb_left;
+ 		else if (result > 0)
+ 			node = &pos->rb.rb_right;
+ 		else
+ 			return -EEXIST;
+ 	}
+ 	/* add new node and rebalance the tree */
+ 	rb_link_node(&kn->rb, parent, node);
+ 	rb_insert_color(&kn->rb, &kn->parent->dir.children);
+ 	return 0;
+ }
+ 
+ /**
+  *	sysfs_unlink_sibling - unlink kernfs_node from sibling rbtree
+  *	@kn: kernfs_node of interest
+  *
+  *	Unlink @kn from its sibling rbtree which starts from
+  *	kn->parent->dir.children.
+  *
+  *	Locking:
+  *	mutex_lock(sysfs_mutex)
+  */
+ static void sysfs_unlink_sibling(struct kernfs_node *kn)
+ {
+ 	if (sysfs_type(kn) == SYSFS_DIR)
+ 		kn->parent->dir.subdirs--;
+ 
+ 	rb_erase(&kn->rb, &kn->parent->dir.children);
+ }
+ 
+ /**
+  *	sysfs_get_active - get an active reference to kernfs_node
+  *	@kn: kernfs_node to get an active reference to
+  *
+  *	Get an active reference of @kn.  This function is noop if @kn
+  *	is NULL.
+  *
+  *	RETURNS:
+  *	Pointer to @kn on success, NULL on failure.
+  */
+ struct kernfs_node *sysfs_get_active(struct kernfs_node *kn)
+ {
+ 	if (unlikely(!kn))
+ 		return NULL;
+ 
+ 	if (!atomic_inc_unless_negative(&kn->active))
+ 		return NULL;
+ 
+ 	if (kn->flags & SYSFS_FLAG_LOCKDEP)
+ 		rwsem_acquire_read(&kn->dep_map, 0, 1, _RET_IP_);
+ 	return kn;
+ }
+ 
+ /**
+  *	sysfs_put_active - put an active reference to kernfs_node
+  *	@kn: kernfs_node to put an active reference to
+  *
+  *	Put an active reference to @kn.  This function is noop if @kn
+  *	is NULL.
+  */
+ void sysfs_put_active(struct kernfs_node *kn)
+ {
+ 	int v;
+ 
+ 	if (unlikely(!kn))
+ 		return;
+ 
+ 	if (kn->flags & SYSFS_FLAG_LOCKDEP)
+ 		rwsem_release(&kn->dep_map, 1, _RET_IP_);
+ 	v = atomic_dec_return(&kn->active);
+ 	if (likely(v != SD_DEACTIVATED_BIAS))
+ 		return;
+ 
+ 	/*
+ 	 * atomic_dec_return() is a mb(), we'll always see the updated
+ 	 * kn->u.completion.
+ 	 */
+ 	complete(kn->u.completion);
+ }
+ 
+ /**
+  *	sysfs_deactivate - deactivate kernfs_node
+  *	@kn: kernfs_node to deactivate
+  *
+  *	Deny new active references and drain existing ones.
+  */
+ static void sysfs_deactivate(struct kernfs_node *kn)
+ {
+ 	DECLARE_COMPLETION_ONSTACK(wait);
+ 	int v;
+ 
+ 	BUG_ON(!(kn->flags & SYSFS_FLAG_REMOVED));
+ 
+ 	if (!(sysfs_type(kn) & SYSFS_ACTIVE_REF))
+ 		return;
+ 
+ 	kn->u.completion = (void *)&wait;
+ 
+ 	rwsem_acquire(&kn->dep_map, 0, 0, _RET_IP_);
+ 	/* atomic_add_return() is a mb(), put_active() will always see
+ 	 * the updated kn->u.completion.
+ 	 */
+ 	v = atomic_add_return(SD_DEACTIVATED_BIAS, &kn->active);
+ 
+ 	if (v != SD_DEACTIVATED_BIAS) {
+ 		lock_contended(&kn->dep_map, _RET_IP_);
+ 		wait_for_completion(&wait);
+ 	}
+ 
+ 	lock_acquired(&kn->dep_map, _RET_IP_);
+ 	rwsem_release(&kn->dep_map, 1, _RET_IP_);
+ }
+ 
+ /**
+  * kernfs_get - get a reference count on a kernfs_node
+  * @kn: the target kernfs_node
+  */
+ void kernfs_get(struct kernfs_node *kn)
+ {
+ 	if (kn) {
+ 		WARN_ON(!atomic_read(&kn->count));
+ 		atomic_inc(&kn->count);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(kernfs_get);
+ 
+ /**
+  * kernfs_put - put a reference count on a kernfs_node
+  * @kn: the target kernfs_node
+  *
+  * Put a reference count of @kn and destroy it if it reached zero.
+  */
+ void kernfs_put(struct kernfs_node *kn)
+ {
+ 	struct kernfs_node *parent;
+ 	struct kernfs_root *root;
+ 
+ 	if (!kn || !atomic_dec_and_test(&kn->count))
+ 		return;
+ 	root = kernfs_root(kn);
+  repeat:
+ 	/* Moving/renaming is always done while holding reference.
+ 	 * kn->parent won't change beneath us.
+ 	 */
+ 	parent = kn->parent;
+ 
+ 	WARN(!(kn->flags & SYSFS_FLAG_REMOVED),
+ 		"sysfs: free using entry: %s/%s\n",
+ 		parent ? parent->name : "", kn->name);
+ 
+ 	if (sysfs_type(kn) == SYSFS_KOBJ_LINK)
+ 		kernfs_put(kn->symlink.target_kn);
+ 	if (sysfs_type(kn) & SYSFS_COPY_NAME)
+ 		kfree(kn->name);
+ 	if (kn->iattr) {
+ 		if (kn->iattr->ia_secdata)
+ 			security_release_secctx(kn->iattr->ia_secdata,
+ 						kn->iattr->ia_secdata_len);
+ 		simple_xattrs_free(&kn->iattr->xattrs);
+ 	}
+ 	kfree(kn->iattr);
+ 	ida_simple_remove(&root->ino_ida, kn->ino);
+ 	kmem_cache_free(sysfs_dir_cachep, kn);
+ 
+ 	kn = parent;
+ 	if (kn) {
+ 		if (atomic_dec_and_test(&kn->count))
+ 			goto repeat;
+ 	} else {
+ 		/* just released the root kn, free @root too */
+ 		ida_destroy(&root->ino_ida);
+ 		kfree(root);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(kernfs_put);
+ 
+ static int sysfs_dentry_delete(const struct dentry *dentry)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	return !(kn && !(kn->flags & SYSFS_FLAG_REMOVED));
+ }
+ 
+ static int sysfs_dentry_revalidate(struct dentry *dentry, unsigned int flags)
+ {
+ 	struct kernfs_node *kn;
+ 
+ 	if (flags & LOOKUP_RCU)
+ 		return -ECHILD;
+ 
+ 	kn = dentry->d_fsdata;
+ 	mutex_lock(&sysfs_mutex);
+ 
+ 	/* The sysfs dirent has been deleted */
+ 	if (kn->flags & SYSFS_FLAG_REMOVED)
+ 		goto out_bad;
+ 
+ 	/* The sysfs dirent has been moved? */
+ 	if (dentry->d_parent->d_fsdata != kn->parent)
+ 		goto out_bad;
+ 
+ 	/* The sysfs dirent has been renamed */
+ 	if (strcmp(dentry->d_name.name, kn->name) != 0)
+ 		goto out_bad;
+ 
+ 	/* The sysfs dirent has been moved to a different namespace */
+ 	if (kn->parent && kernfs_ns_enabled(kn->parent) &&
+ 	    sysfs_info(dentry->d_sb)->ns != kn->ns)
+ 		goto out_bad;
+ 
+ 	mutex_unlock(&sysfs_mutex);
+ out_valid:
+ 	return 1;
+ out_bad:
+ 	/* Remove the dentry from the dcache hashes.
+ 	 * If this is a deleted dentry we use d_drop instead of d_delete
+ 	 * so sysfs doesn't need to cope with negative dentries.
+ 	 *
+ 	 * If this is a dentry that has simply been renamed we
+ 	 * use d_drop to remove it from the dcache lookup on its
+ 	 * old parent.  If this dentry persists later when a lookup
+ 	 * is performed at its new name the dentry will be readded
+ 	 * to the dcache hashes.
+ 	 */
+ 	mutex_unlock(&sysfs_mutex);
+ 
+ 	/* If we have submounts we must allow the vfs caches
+ 	 * to lie about the state of the filesystem to prevent
+ 	 * leaks and other nasty things.
+ 	 */
+ 	if (check_submounts_and_drop(dentry) != 0)
+ 		goto out_valid;
+ 
+ 	return 0;
+ }
+ 
+ static void sysfs_dentry_release(struct dentry *dentry)
+ {
+ 	kernfs_put(dentry->d_fsdata);
+ }
+ 
+ const struct dentry_operations sysfs_dentry_ops = {
+ 	.d_revalidate	= sysfs_dentry_revalidate,
+ 	.d_delete	= sysfs_dentry_delete,
+ 	.d_release	= sysfs_dentry_release,
+ };
+ 
+ struct kernfs_node *sysfs_new_dirent(struct kernfs_root *root,
+ 				     const char *name, umode_t mode, int type)
+ {
+ 	char *dup_name = NULL;
+ 	struct kernfs_node *kn;
+ 	int ret;
+ 
+ 	if (type & SYSFS_COPY_NAME) {
+ 		name = dup_name = kstrdup(name, GFP_KERNEL);
+ 		if (!name)
+ 			return NULL;
+ 	}
+ 
+ 	kn = kmem_cache_zalloc(sysfs_dir_cachep, GFP_KERNEL);
+ 	if (!kn)
+ 		goto err_out1;
+ 
+ 	ret = ida_simple_get(&root->ino_ida, 1, 0, GFP_KERNEL);
+ 	if (ret < 0)
+ 		goto err_out2;
+ 	kn->ino = ret;
+ 
+ 	atomic_set(&kn->count, 1);
+ 	atomic_set(&kn->active, 0);
+ 
+ 	kn->name = name;
+ 	kn->mode = mode;
+ 	kn->flags = type | SYSFS_FLAG_REMOVED;
+ 
+ 	return kn;
+ 
+  err_out2:
+ 	kmem_cache_free(sysfs_dir_cachep, kn);
+  err_out1:
+ 	kfree(dup_name);
+ 	return NULL;
+ }
+ 
+ /**
+  *	sysfs_addrm_start - prepare for kernfs_node add/remove
+  *	@acxt: pointer to sysfs_addrm_cxt to be used
+  *
+  *	This function is called when the caller is about to add or remove
+  *	kernfs_node.  This function acquires sysfs_mutex.  @acxt is used to
+  *	keep and pass context to other addrm functions.
+  *
+  *	LOCKING:
+  *	Kernel thread context (may sleep).  sysfs_mutex is locked on
+  *	return.
+  */
+ void sysfs_addrm_start(struct sysfs_addrm_cxt *acxt)
+ 	__acquires(sysfs_mutex)
+ {
+ 	memset(acxt, 0, sizeof(*acxt));
+ 
+ 	mutex_lock(&sysfs_mutex);
+ }
+ 
+ /**
+  *	sysfs_add_one - add kernfs_node to parent without warning
+  *	@acxt: addrm context to use
+  *	@kn: kernfs_node to be added
+  *	@parent: the parent kernfs_node to add @kn to
+  *
+  *	Get @parent and set @kn->parent to it and increment nlink of the
+  *	parent inode if @kn is a directory and link into the children list
+  *	of the parent.
+  *
+  *	This function should be called between calls to
+  *	sysfs_addrm_start() and sysfs_addrm_finish() and should be
+  *	passed the same @acxt as passed to sysfs_addrm_start().
+  *
+  *	LOCKING:
+  *	Determined by sysfs_addrm_start().
+  *
+  *	RETURNS:
+  *	0 on success, -EEXIST if entry with the given name already
+  *	exists.
+  */
+ int sysfs_add_one(struct sysfs_addrm_cxt *acxt, struct kernfs_node *kn,
+ 		  struct kernfs_node *parent)
+ {
+ 	bool has_ns = kernfs_ns_enabled(parent);
+ 	struct sysfs_inode_attrs *ps_iattr;
+ 	int ret;
+ 
+ 	if (has_ns != (bool)kn->ns) {
+ 		WARN(1, KERN_WARNING "sysfs: ns %s in '%s' for '%s'\n",
+ 		     has_ns ? "required" : "invalid", parent->name, kn->name);
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (sysfs_type(parent) != SYSFS_DIR)
+ 		return -EINVAL;
+ 
+ 	kn->hash = sysfs_name_hash(kn->name, kn->ns);
+ 	kn->parent = parent;
+ 	kernfs_get(parent);
+ 
+ 	ret = sysfs_link_sibling(kn);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* Update timestamps on the parent */
+ 	ps_iattr = parent->iattr;
+ 	if (ps_iattr) {
+ 		struct iattr *ps_iattrs = &ps_iattr->ia_iattr;
+ 		ps_iattrs->ia_ctime = ps_iattrs->ia_mtime = CURRENT_TIME;
+ 	}
+ 
+ 	/* Mark the entry added into directory tree */
+ 	kn->flags &= ~SYSFS_FLAG_REMOVED;
+ 
+ 	return 0;
+ }
+ 
+ /**
+  *	sysfs_remove_one - remove kernfs_node from parent
+  *	@acxt: addrm context to use
+  *	@kn: kernfs_node to be removed
+  *
+  *	Mark @kn removed and drop nlink of parent inode if @kn is a
+  *	directory.  @kn is unlinked from the children list.
+  *
+  *	This function should be called between calls to
+  *	sysfs_addrm_start() and sysfs_addrm_finish() and should be
+  *	passed the same @acxt as passed to sysfs_addrm_start().
+  *
+  *	LOCKING:
+  *	Determined by sysfs_addrm_start().
+  */
+ static void sysfs_remove_one(struct sysfs_addrm_cxt *acxt,
+ 			     struct kernfs_node *kn)
+ {
+ 	struct sysfs_inode_attrs *ps_iattr;
+ 
+ 	/*
+ 	 * Removal can be called multiple times on the same node.  Only the
+ 	 * first invocation is effective and puts the base ref.
+ 	 */
+ 	if (kn->flags & SYSFS_FLAG_REMOVED)
+ 		return;
+ 
+ 	if (kn->parent) {
+ 		sysfs_unlink_sibling(kn);
+ 
+ 		/* Update timestamps on the parent */
+ 		ps_iattr = kn->parent->iattr;
+ 		if (ps_iattr) {
+ 			ps_iattr->ia_iattr.ia_ctime = CURRENT_TIME;
+ 			ps_iattr->ia_iattr.ia_mtime = CURRENT_TIME;
+ 		}
+ 	}
+ 
+ 	kn->flags |= SYSFS_FLAG_REMOVED;
+ 	kn->u.removed_list = acxt->removed;
+ 	acxt->removed = kn;
+ }
+ 
+ /**
+  *	sysfs_addrm_finish - finish up kernfs_node add/remove
+  *	@acxt: addrm context to finish up
+  *
+  *	Finish up kernfs_node add/remove.  Resources acquired by
+  *	sysfs_addrm_start() are released and removed kernfs_nodes are
+  *	cleaned up.
+  *
+  *	LOCKING:
+  *	sysfs_mutex is released.
+  */
+ void sysfs_addrm_finish(struct sysfs_addrm_cxt *acxt)
+ 	__releases(sysfs_mutex)
+ {
+ 	/* release resources acquired by sysfs_addrm_start() */
+ 	mutex_unlock(&sysfs_mutex);
+ 
+ 	/* kill removed kernfs_nodes */
+ 	while (acxt->removed) {
+ 		struct kernfs_node *kn = acxt->removed;
+ 
+ 		acxt->removed = kn->u.removed_list;
+ 
+ 		sysfs_deactivate(kn);
+ 		sysfs_unmap_bin_file(kn);
+ 		kernfs_put(kn);
+ 	}
+ }
+ 
+ /**
+  * kernfs_find_ns - find kernfs_node with the given name
+  * @parent: kernfs_node to search under
+  * @name: name to look for
+  * @ns: the namespace tag to use
+  *
+  * Look for kernfs_node with name @name under @parent.  Returns pointer to
+  * the found kernfs_node on success, %NULL on failure.
+  */
+ static struct kernfs_node *kernfs_find_ns(struct kernfs_node *parent,
+ 					  const unsigned char *name,
+ 					  const void *ns)
+ {
+ 	struct rb_node *node = parent->dir.children.rb_node;
+ 	bool has_ns = kernfs_ns_enabled(parent);
+ 	unsigned int hash;
+ 
+ 	lockdep_assert_held(&sysfs_mutex);
+ 
+ 	if (has_ns != (bool)ns) {
+ 		WARN(1, KERN_WARNING "sysfs: ns %s in '%s' for '%s'\n",
+ 		     has_ns ? "required" : "invalid", parent->name, name);
+ 		return NULL;
+ 	}
+ 
+ 	hash = sysfs_name_hash(name, ns);
+ 	while (node) {
+ 		struct kernfs_node *kn;
+ 		int result;
+ 
+ 		kn = rb_to_kn(node);
+ 		result = sysfs_name_compare(hash, name, ns, kn);
+ 		if (result < 0)
+ 			node = node->rb_left;
+ 		else if (result > 0)
+ 			node = node->rb_right;
+ 		else
+ 			return kn;
+ 	}
+ 	return NULL;
+ }
+ 
+ /**
+  * kernfs_find_and_get_ns - find and get kernfs_node with the given name
+  * @parent: kernfs_node to search under
+  * @name: name to look for
+  * @ns: the namespace tag to use
+  *
+  * Look for kernfs_node with name @name under @parent and get a reference
+  * if found.  This function may sleep and returns pointer to the found
+  * kernfs_node on success, %NULL on failure.
+  */
+ struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
+ 					   const char *name, const void *ns)
+ {
+ 	struct kernfs_node *kn;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 	kn = kernfs_find_ns(parent, name, ns);
+ 	kernfs_get(kn);
+ 	mutex_unlock(&sysfs_mutex);
+ 
+ 	return kn;
+ }
+ EXPORT_SYMBOL_GPL(kernfs_find_and_get_ns);
+ 
+ /**
+  * kernfs_create_root - create a new kernfs hierarchy
+  * @priv: opaque data associated with the new directory
+  *
+  * Returns the root of the new hierarchy on success, ERR_PTR() value on
+  * failure.
+  */
+ struct kernfs_root *kernfs_create_root(void *priv)
+ {
+ 	struct kernfs_root *root;
+ 	struct kernfs_node *kn;
+ 
+ 	root = kzalloc(sizeof(*root), GFP_KERNEL);
+ 	if (!root)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	ida_init(&root->ino_ida);
+ 
+ 	kn = sysfs_new_dirent(root, "", S_IFDIR | S_IRUGO | S_IXUGO, SYSFS_DIR);
+ 	if (!kn) {
+ 		ida_destroy(&root->ino_ida);
+ 		kfree(root);
+ 		return ERR_PTR(-ENOMEM);
+ 	}
+ 
+ 	kn->flags &= ~SYSFS_FLAG_REMOVED;
+ 	kn->priv = priv;
+ 	kn->dir.root = root;
+ 
+ 	root->kn = kn;
+ 
+ 	return root;
+ }
+ 
+ /**
+  * kernfs_destroy_root - destroy a kernfs hierarchy
+  * @root: root of the hierarchy to destroy
+  *
+  * Destroy the hierarchy anchored at @root by removing all existing
+  * directories and destroying @root.
+  */
+ void kernfs_destroy_root(struct kernfs_root *root)
+ {
+ 	kernfs_remove(root->kn);	/* will also free @root */
+ }
+ 
+ /**
+  * kernfs_create_dir_ns - create a directory
+  * @parent: parent in which to create a new directory
+  * @name: name of the new directory
+  * @priv: opaque data associated with the new directory
+  * @ns: optional namespace tag of the directory
+  *
+  * Returns the created node on success, ERR_PTR() value on failure.
+  */
+ struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
+ 					 const char *name, void *priv,
+ 					 const void *ns)
+ {
+ 	umode_t mode = S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO;
+ 	struct sysfs_addrm_cxt acxt;
+ 	struct kernfs_node *kn;
+ 	int rc;
+ 
+ 	/* allocate */
+ 	kn = sysfs_new_dirent(kernfs_root(parent), name, mode, SYSFS_DIR);
+ 	if (!kn)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	kn->dir.root = parent->dir.root;
+ 	kn->ns = ns;
+ 	kn->priv = priv;
+ 
+ 	/* link in */
+ 	sysfs_addrm_start(&acxt);
+ 	rc = sysfs_add_one(&acxt, kn, parent);
+ 	sysfs_addrm_finish(&acxt);
+ 
+ 	if (!rc)
+ 		return kn;
+ 
+ 	kernfs_put(kn);
+ 	return ERR_PTR(rc);
+ }
+ 
+ static struct dentry *sysfs_lookup(struct inode *dir, struct dentry *dentry,
+ 				   unsigned int flags)
+ {
+ 	struct dentry *ret = NULL;
+ 	struct kernfs_node *parent = dentry->d_parent->d_fsdata;
+ 	struct kernfs_node *kn;
+ 	struct inode *inode;
+ 	const void *ns = NULL;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 
+ 	if (kernfs_ns_enabled(parent))
+ 		ns = sysfs_info(dir->i_sb)->ns;
+ 
+ 	kn = kernfs_find_ns(parent, dentry->d_name.name, ns);
+ 
+ 	/* no such entry */
+ 	if (!kn) {
+ 		ret = ERR_PTR(-ENOENT);
+ 		goto out_unlock;
+ 	}
+ 	kernfs_get(kn);
+ 	dentry->d_fsdata = kn;
+ 
+ 	/* attach dentry and inode */
+ 	inode = sysfs_get_inode(dir->i_sb, kn);
+ 	if (!inode) {
+ 		ret = ERR_PTR(-ENOMEM);
+ 		goto out_unlock;
+ 	}
+ 
+ 	/* instantiate and hash dentry */
+ 	ret = d_materialise_unique(dentry, inode);
+  out_unlock:
+ 	mutex_unlock(&sysfs_mutex);
+ 	return ret;
+ }
+ 
+ const struct inode_operations sysfs_dir_inode_operations = {
+ 	.lookup		= sysfs_lookup,
+ 	.permission	= sysfs_permission,
+ 	.setattr	= sysfs_setattr,
+ 	.getattr	= sysfs_getattr,
+ 	.setxattr	= sysfs_setxattr,
+ 	.removexattr	= sysfs_removexattr,
+ 	.getxattr	= sysfs_getxattr,
+ 	.listxattr	= sysfs_listxattr,
+ };
+ 
+ static struct kernfs_node *sysfs_leftmost_descendant(struct kernfs_node *pos)
+ {
+ 	struct kernfs_node *last;
+ 
+ 	while (true) {
+ 		struct rb_node *rbn;
+ 
+ 		last = pos;
+ 
+ 		if (sysfs_type(pos) != SYSFS_DIR)
+ 			break;
+ 
+ 		rbn = rb_first(&pos->dir.children);
+ 		if (!rbn)
+ 			break;
+ 
+ 		pos = rb_to_kn(rbn);
+ 	}
+ 
+ 	return last;
+ }
+ 
+ /**
+  * sysfs_next_descendant_post - find the next descendant for post-order walk
+  * @pos: the current position (%NULL to initiate traversal)
+  * @root: kernfs_node whose descendants to walk
+  *
+  * Find the next descendant to visit for post-order traversal of @root's
+  * descendants.  @root is included in the iteration and the last node to be
+  * visited.
+  */
+ static struct kernfs_node *sysfs_next_descendant_post(struct kernfs_node *pos,
+ 						      struct kernfs_node *root)
+ {
+ 	struct rb_node *rbn;
+ 
+ 	lockdep_assert_held(&sysfs_mutex);
+ 
+ 	/* if first iteration, visit leftmost descendant which may be root */
+ 	if (!pos)
+ 		return sysfs_leftmost_descendant(root);
+ 
+ 	/* if we visited @root, we're done */
+ 	if (pos == root)
+ 		return NULL;
+ 
+ 	/* if there's an unvisited sibling, visit its leftmost descendant */
+ 	rbn = rb_next(&pos->rb);
+ 	if (rbn)
+ 		return sysfs_leftmost_descendant(rb_to_kn(rbn));
+ 
+ 	/* no sibling left, visit parent */
+ 	return pos->parent;
+ }
+ 
+ static void __kernfs_remove(struct sysfs_addrm_cxt *acxt,
+ 			    struct kernfs_node *kn)
+ {
+ 	struct kernfs_node *pos, *next;
+ 
+ 	if (!kn)
+ 		return;
+ 
+ 	pr_debug("sysfs %s: removing\n", kn->name);
+ 
+ 	next = NULL;
+ 	do {
+ 		pos = next;
+ 		next = sysfs_next_descendant_post(pos, kn);
+ 		if (pos)
+ 			sysfs_remove_one(acxt, pos);
+ 	} while (next);
+ }
+ 
+ /**
+  * kernfs_remove - remove a kernfs_node recursively
+  * @kn: the kernfs_node to remove
+  *
+  * Remove @kn along with all its subdirectories and files.
+  */
+ void kernfs_remove(struct kernfs_node *kn)
+ {
+ 	struct sysfs_addrm_cxt acxt;
+ 
+ 	sysfs_addrm_start(&acxt);
+ 	__kernfs_remove(&acxt, kn);
+ 	sysfs_addrm_finish(&acxt);
+ }
+ 
+ /**
+  * kernfs_remove_by_name_ns - find a kernfs_node by name and remove it
+  * @parent: parent of the target
+  * @name: name of the kernfs_node to remove
+  * @ns: namespace tag of the kernfs_node to remove
+  *
+  * Look for the kernfs_node with @name and @ns under @parent and remove it.
+  * Returns 0 on success, -ENOENT if such entry doesn't exist.
+  */
+ int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
+ 			     const void *ns)
+ {
+ 	struct sysfs_addrm_cxt acxt;
+ 	struct kernfs_node *kn;
+ 
+ 	if (!parent) {
+ 		WARN(1, KERN_WARNING "sysfs: can not remove '%s', no directory\n",
+ 			name);
+ 		return -ENOENT;
+ 	}
+ 
+ 	sysfs_addrm_start(&acxt);
+ 
+ 	kn = kernfs_find_ns(parent, name, ns);
+ 	if (kn)
+ 		__kernfs_remove(&acxt, kn);
+ 
+ 	sysfs_addrm_finish(&acxt);
+ 
+ 	if (kn)
+ 		return 0;
+ 	else
+ 		return -ENOENT;
+ }
+ 
+ /**
+  * kernfs_rename_ns - move and rename a kernfs_node
+  * @kn: target node
+  * @new_parent: new parent to put @sd under
+  * @new_name: new name
+  * @new_ns: new namespace tag
+  */
+ int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
+ 		     const char *new_name, const void *new_ns)
+ {
+ 	int error;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 
+ 	error = 0;
+ 	if ((kn->parent == new_parent) && (kn->ns == new_ns) &&
+ 	    (strcmp(kn->name, new_name) == 0))
+ 		goto out;	/* nothing to rename */
+ 
+ 	error = -EEXIST;
+ 	if (kernfs_find_ns(new_parent, new_name, new_ns))
+ 		goto out;
+ 
+ 	/* rename kernfs_node */
+ 	if (strcmp(kn->name, new_name) != 0) {
+ 		error = -ENOMEM;
+ 		new_name = kstrdup(new_name, GFP_KERNEL);
+ 		if (!new_name)
+ 			goto out;
+ 
+ 		kfree(kn->name);
+ 		kn->name = new_name;
+ 	}
+ 
+ 	/*
+ 	 * Move to the appropriate place in the appropriate directories rbtree.
+ 	 */
+ 	sysfs_unlink_sibling(kn);
+ 	kernfs_get(new_parent);
+ 	kernfs_put(kn->parent);
+ 	kn->ns = new_ns;
+ 	kn->hash = sysfs_name_hash(kn->name, kn->ns);
+ 	kn->parent = new_parent;
+ 	sysfs_link_sibling(kn);
+ 
+ 	error = 0;
+  out:
+ 	mutex_unlock(&sysfs_mutex);
+ 	return error;
+ }
+ 
+ /* Relationship between s_mode and the DT_xxx types */
+ static inline unsigned char dt_type(struct kernfs_node *kn)
+ {
+ 	return (kn->mode >> 12) & 15;
+ }
+ 
+ static int sysfs_dir_release(struct inode *inode, struct file *filp)
+ {
+ 	kernfs_put(filp->private_data);
+ 	return 0;
+ }
+ 
+ static struct kernfs_node *sysfs_dir_pos(const void *ns,
+ 	struct kernfs_node *parent, loff_t hash, struct kernfs_node *pos)
+ {
+ 	if (pos) {
+ 		int valid = !(pos->flags & SYSFS_FLAG_REMOVED) &&
+ 			pos->parent == parent && hash == pos->hash;
+ 		kernfs_put(pos);
+ 		if (!valid)
+ 			pos = NULL;
+ 	}
+ 	if (!pos && (hash > 1) && (hash < INT_MAX)) {
+ 		struct rb_node *node = parent->dir.children.rb_node;
+ 		while (node) {
+ 			pos = rb_to_kn(node);
+ 
+ 			if (hash < pos->hash)
+ 				node = node->rb_left;
+ 			else if (hash > pos->hash)
+ 				node = node->rb_right;
+ 			else
+ 				break;
+ 		}
+ 	}
+ 	/* Skip over entries in the wrong namespace */
+ 	while (pos && pos->ns != ns) {
+ 		struct rb_node *node = rb_next(&pos->rb);
+ 		if (!node)
+ 			pos = NULL;
+ 		else
+ 			pos = rb_to_kn(node);
+ 	}
+ 	return pos;
+ }
+ 
+ static struct kernfs_node *sysfs_dir_next_pos(const void *ns,
+ 	struct kernfs_node *parent, ino_t ino, struct kernfs_node *pos)
+ {
+ 	pos = sysfs_dir_pos(ns, parent, ino, pos);
+ 	if (pos)
+ 		do {
+ 			struct rb_node *node = rb_next(&pos->rb);
+ 			if (!node)
+ 				pos = NULL;
+ 			else
+ 				pos = rb_to_kn(node);
+ 		} while (pos && pos->ns != ns);
+ 	return pos;
+ }
+ 
+ static int sysfs_readdir(struct file *file, struct dir_context *ctx)
+ {
+ 	struct dentry *dentry = file->f_path.dentry;
+ 	struct kernfs_node *parent = dentry->d_fsdata;
+ 	struct kernfs_node *pos = file->private_data;
+ 	const void *ns = NULL;
+ 
+ 	if (!dir_emit_dots(file, ctx))
+ 		return 0;
+ 	mutex_lock(&sysfs_mutex);
+ 
+ 	if (kernfs_ns_enabled(parent))
+ 		ns = sysfs_info(dentry->d_sb)->ns;
+ 
+ 	for (pos = sysfs_dir_pos(ns, parent, ctx->pos, pos);
+ 	     pos;
+ 	     pos = sysfs_dir_next_pos(ns, parent, ctx->pos, pos)) {
+ 		const char *name = pos->name;
+ 		unsigned int type = dt_type(pos);
+ 		int len = strlen(name);
+ 		ino_t ino = pos->ino;
+ 
+ 		ctx->pos = pos->hash;
+ 		file->private_data = pos;
+ 		kernfs_get(pos);
+ 
+ 		mutex_unlock(&sysfs_mutex);
+ 		if (!dir_emit(ctx, name, len, ino, type))
+ 			return 0;
+ 		mutex_lock(&sysfs_mutex);
+ 	}
+ 	mutex_unlock(&sysfs_mutex);
+ 	file->private_data = NULL;
+ 	ctx->pos = INT_MAX;
+ 	return 0;
+ }
+ 
+ static loff_t sysfs_dir_llseek(struct file *file, loff_t offset, int whence)
+ {
+ 	struct inode *inode = file_inode(file);
+ 	loff_t ret;
+ 
+ 	mutex_lock(&inode->i_mutex);
+ 	ret = generic_file_llseek(file, offset, whence);
+ 	mutex_unlock(&inode->i_mutex);
+ 
+ 	return ret;
+ }
+ 
+ const struct file_operations sysfs_dir_operations = {
+ 	.read		= generic_read_dir,
+ 	.iterate	= sysfs_readdir,
+ 	.release	= sysfs_dir_release,
+ 	.llseek		= sysfs_dir_llseek,
+ };
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
diff --cc fs/kernfs/file.c
index 90b1e88dad44,5277021196a7..000000000000
--- a/fs/kernfs/file.c
+++ b/fs/kernfs/file.c
@@@ -7,3 -7,817 +7,820 @@@
   *
   * This file is released under the GPLv2.
   */
++<<<<<<< HEAD
++=======
+ 
+ #include <linux/fs.h>
+ #include <linux/seq_file.h>
+ #include <linux/slab.h>
+ #include <linux/poll.h>
+ #include <linux/pagemap.h>
+ #include <linux/sched.h>
+ 
+ #include "kernfs-internal.h"
+ 
+ /*
+  * There's one sysfs_open_file for each open file and one sysfs_open_dirent
+  * for each kernfs_node with one or more open files.
+  *
+  * kernfs_node->attr.open points to sysfs_open_dirent.  attr.open is
+  * protected by sysfs_open_dirent_lock.
+  *
+  * filp->private_data points to seq_file whose ->private points to
+  * sysfs_open_file.  sysfs_open_files are chained at
+  * sysfs_open_dirent->files, which is protected by sysfs_open_file_mutex.
+  */
+ static DEFINE_SPINLOCK(sysfs_open_dirent_lock);
+ static DEFINE_MUTEX(sysfs_open_file_mutex);
+ 
+ struct sysfs_open_dirent {
+ 	atomic_t		refcnt;
+ 	atomic_t		event;
+ 	wait_queue_head_t	poll;
+ 	struct list_head	files; /* goes through sysfs_open_file.list */
+ };
+ 
+ static struct sysfs_open_file *sysfs_of(struct file *file)
+ {
+ 	return ((struct seq_file *)file->private_data)->private;
+ }
+ 
+ /*
+  * Determine the kernfs_ops for the given kernfs_node.  This function must
+  * be called while holding an active reference.
+  */
+ static const struct kernfs_ops *kernfs_ops(struct kernfs_node *kn)
+ {
+ 	if (kn->flags & SYSFS_FLAG_LOCKDEP)
+ 		lockdep_assert_held(kn);
+ 	return kn->attr.ops;
+ }
+ 
+ static void *kernfs_seq_start(struct seq_file *sf, loff_t *ppos)
+ {
+ 	struct sysfs_open_file *of = sf->private;
+ 	const struct kernfs_ops *ops;
+ 
+ 	/*
+ 	 * @of->mutex nests outside active ref and is just to ensure that
+ 	 * the ops aren't called concurrently for the same open file.
+ 	 */
+ 	mutex_lock(&of->mutex);
+ 	if (!sysfs_get_active(of->kn))
+ 		return ERR_PTR(-ENODEV);
+ 
+ 	ops = kernfs_ops(of->kn);
+ 	if (ops->seq_start) {
+ 		return ops->seq_start(sf, ppos);
+ 	} else {
+ 		/*
+ 		 * The same behavior and code as single_open().  Returns
+ 		 * !NULL if pos is at the beginning; otherwise, NULL.
+ 		 */
+ 		return NULL + !*ppos;
+ 	}
+ }
+ 
+ static void *kernfs_seq_next(struct seq_file *sf, void *v, loff_t *ppos)
+ {
+ 	struct sysfs_open_file *of = sf->private;
+ 	const struct kernfs_ops *ops = kernfs_ops(of->kn);
+ 
+ 	if (ops->seq_next) {
+ 		return ops->seq_next(sf, v, ppos);
+ 	} else {
+ 		/*
+ 		 * The same behavior and code as single_open(), always
+ 		 * terminate after the initial read.
+ 		 */
+ 		++*ppos;
+ 		return NULL;
+ 	}
+ }
+ 
+ static void kernfs_seq_stop(struct seq_file *sf, void *v)
+ {
+ 	struct sysfs_open_file *of = sf->private;
+ 	const struct kernfs_ops *ops = kernfs_ops(of->kn);
+ 
+ 	if (ops->seq_stop)
+ 		ops->seq_stop(sf, v);
+ 
+ 	sysfs_put_active(of->kn);
+ 	mutex_unlock(&of->mutex);
+ }
+ 
+ static int kernfs_seq_show(struct seq_file *sf, void *v)
+ {
+ 	struct sysfs_open_file *of = sf->private;
+ 
+ 	of->event = atomic_read(&of->kn->attr.open->event);
+ 
+ 	return of->kn->attr.ops->seq_show(sf, v);
+ }
+ 
+ static const struct seq_operations kernfs_seq_ops = {
+ 	.start = kernfs_seq_start,
+ 	.next = kernfs_seq_next,
+ 	.stop = kernfs_seq_stop,
+ 	.show = kernfs_seq_show,
+ };
+ 
+ /*
+  * As reading a bin file can have side-effects, the exact offset and bytes
+  * specified in read(2) call should be passed to the read callback making
+  * it difficult to use seq_file.  Implement simplistic custom buffering for
+  * bin files.
+  */
+ static ssize_t kernfs_file_direct_read(struct sysfs_open_file *of,
+ 				       char __user *user_buf, size_t count,
+ 				       loff_t *ppos)
+ {
+ 	ssize_t len = min_t(size_t, count, PAGE_SIZE);
+ 	const struct kernfs_ops *ops;
+ 	char *buf;
+ 
+ 	buf = kmalloc(len, GFP_KERNEL);
+ 	if (!buf)
+ 		return -ENOMEM;
+ 
+ 	/*
+ 	 * @of->mutex nests outside active ref and is just to ensure that
+ 	 * the ops aren't called concurrently for the same open file.
+ 	 */
+ 	mutex_lock(&of->mutex);
+ 	if (!sysfs_get_active(of->kn)) {
+ 		len = -ENODEV;
+ 		mutex_unlock(&of->mutex);
+ 		goto out_free;
+ 	}
+ 
+ 	ops = kernfs_ops(of->kn);
+ 	if (ops->read)
+ 		len = ops->read(of, buf, len, *ppos);
+ 	else
+ 		len = -EINVAL;
+ 
+ 	sysfs_put_active(of->kn);
+ 	mutex_unlock(&of->mutex);
+ 
+ 	if (len < 0)
+ 		goto out_free;
+ 
+ 	if (copy_to_user(user_buf, buf, len)) {
+ 		len = -EFAULT;
+ 		goto out_free;
+ 	}
+ 
+ 	*ppos += len;
+ 
+  out_free:
+ 	kfree(buf);
+ 	return len;
+ }
+ 
+ /**
+  * kernfs_file_read - kernfs vfs read callback
+  * @file: file pointer
+  * @user_buf: data to write
+  * @count: number of bytes
+  * @ppos: starting offset
+  */
+ static ssize_t kernfs_file_read(struct file *file, char __user *user_buf,
+ 				size_t count, loff_t *ppos)
+ {
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 
+ 	if (of->kn->flags & SYSFS_FLAG_HAS_SEQ_SHOW)
+ 		return seq_read(file, user_buf, count, ppos);
+ 	else
+ 		return kernfs_file_direct_read(of, user_buf, count, ppos);
+ }
+ 
+ /**
+  * kernfs_file_write - kernfs vfs write callback
+  * @file: file pointer
+  * @user_buf: data to write
+  * @count: number of bytes
+  * @ppos: starting offset
+  *
+  * Copy data in from userland and pass it to the matching kernfs write
+  * operation.
+  *
+  * There is no easy way for us to know if userspace is only doing a partial
+  * write, so we don't support them. We expect the entire buffer to come on
+  * the first write.  Hint: if you're writing a value, first read the file,
+  * modify only the the value you're changing, then write entire buffer
+  * back.
+  */
+ static ssize_t kernfs_file_write(struct file *file, const char __user *user_buf,
+ 				 size_t count, loff_t *ppos)
+ {
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	ssize_t len = min_t(size_t, count, PAGE_SIZE);
+ 	const struct kernfs_ops *ops;
+ 	char *buf;
+ 
+ 	buf = kmalloc(len + 1, GFP_KERNEL);
+ 	if (!buf)
+ 		return -ENOMEM;
+ 
+ 	if (copy_from_user(buf, user_buf, len)) {
+ 		len = -EFAULT;
+ 		goto out_free;
+ 	}
+ 	buf[len] = '\0';	/* guarantee string termination */
+ 
+ 	/*
+ 	 * @of->mutex nests outside active ref and is just to ensure that
+ 	 * the ops aren't called concurrently for the same open file.
+ 	 */
+ 	mutex_lock(&of->mutex);
+ 	if (!sysfs_get_active(of->kn)) {
+ 		mutex_unlock(&of->mutex);
+ 		len = -ENODEV;
+ 		goto out_free;
+ 	}
+ 
+ 	ops = kernfs_ops(of->kn);
+ 	if (ops->write)
+ 		len = ops->write(of, buf, len, *ppos);
+ 	else
+ 		len = -EINVAL;
+ 
+ 	sysfs_put_active(of->kn);
+ 	mutex_unlock(&of->mutex);
+ 
+ 	if (len > 0)
+ 		*ppos += len;
+ out_free:
+ 	kfree(buf);
+ 	return len;
+ }
+ 
+ static void kernfs_vma_open(struct vm_area_struct *vma)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 
+ 	if (!of->vm_ops)
+ 		return;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return;
+ 
+ 	if (of->vm_ops->open)
+ 		of->vm_ops->open(vma);
+ 
+ 	sysfs_put_active(of->kn);
+ }
+ 
+ static int kernfs_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	int ret;
+ 
+ 	if (!of->vm_ops)
+ 		return VM_FAULT_SIGBUS;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return VM_FAULT_SIGBUS;
+ 
+ 	ret = VM_FAULT_SIGBUS;
+ 	if (of->vm_ops->fault)
+ 		ret = of->vm_ops->fault(vma, vmf);
+ 
+ 	sysfs_put_active(of->kn);
+ 	return ret;
+ }
+ 
+ static int kernfs_vma_page_mkwrite(struct vm_area_struct *vma,
+ 				   struct vm_fault *vmf)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	int ret;
+ 
+ 	if (!of->vm_ops)
+ 		return VM_FAULT_SIGBUS;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return VM_FAULT_SIGBUS;
+ 
+ 	ret = 0;
+ 	if (of->vm_ops->page_mkwrite)
+ 		ret = of->vm_ops->page_mkwrite(vma, vmf);
+ 	else
+ 		file_update_time(file);
+ 
+ 	sysfs_put_active(of->kn);
+ 	return ret;
+ }
+ 
+ static int kernfs_vma_access(struct vm_area_struct *vma, unsigned long addr,
+ 			     void *buf, int len, int write)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	int ret;
+ 
+ 	if (!of->vm_ops)
+ 		return -EINVAL;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return -EINVAL;
+ 
+ 	ret = -EINVAL;
+ 	if (of->vm_ops->access)
+ 		ret = of->vm_ops->access(vma, addr, buf, len, write);
+ 
+ 	sysfs_put_active(of->kn);
+ 	return ret;
+ }
+ 
+ #ifdef CONFIG_NUMA
+ static int kernfs_vma_set_policy(struct vm_area_struct *vma,
+ 				 struct mempolicy *new)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	int ret;
+ 
+ 	if (!of->vm_ops)
+ 		return 0;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return -EINVAL;
+ 
+ 	ret = 0;
+ 	if (of->vm_ops->set_policy)
+ 		ret = of->vm_ops->set_policy(vma, new);
+ 
+ 	sysfs_put_active(of->kn);
+ 	return ret;
+ }
+ 
+ static struct mempolicy *kernfs_vma_get_policy(struct vm_area_struct *vma,
+ 					       unsigned long addr)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	struct mempolicy *pol;
+ 
+ 	if (!of->vm_ops)
+ 		return vma->vm_policy;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return vma->vm_policy;
+ 
+ 	pol = vma->vm_policy;
+ 	if (of->vm_ops->get_policy)
+ 		pol = of->vm_ops->get_policy(vma, addr);
+ 
+ 	sysfs_put_active(of->kn);
+ 	return pol;
+ }
+ 
+ static int kernfs_vma_migrate(struct vm_area_struct *vma,
+ 			      const nodemask_t *from, const nodemask_t *to,
+ 			      unsigned long flags)
+ {
+ 	struct file *file = vma->vm_file;
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	int ret;
+ 
+ 	if (!of->vm_ops)
+ 		return 0;
+ 
+ 	if (!sysfs_get_active(of->kn))
+ 		return 0;
+ 
+ 	ret = 0;
+ 	if (of->vm_ops->migrate)
+ 		ret = of->vm_ops->migrate(vma, from, to, flags);
+ 
+ 	sysfs_put_active(of->kn);
+ 	return ret;
+ }
+ #endif
+ 
+ static const struct vm_operations_struct kernfs_vm_ops = {
+ 	.open		= kernfs_vma_open,
+ 	.fault		= kernfs_vma_fault,
+ 	.page_mkwrite	= kernfs_vma_page_mkwrite,
+ 	.access		= kernfs_vma_access,
+ #ifdef CONFIG_NUMA
+ 	.set_policy	= kernfs_vma_set_policy,
+ 	.get_policy	= kernfs_vma_get_policy,
+ 	.migrate	= kernfs_vma_migrate,
+ #endif
+ };
+ 
+ static int kernfs_file_mmap(struct file *file, struct vm_area_struct *vma)
+ {
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	const struct kernfs_ops *ops;
+ 	int rc;
+ 
+ 	/*
+ 	 * mmap path and of->mutex are prone to triggering spurious lockdep
+ 	 * warnings and we don't want to add spurious locking dependency
+ 	 * between the two.  Check whether mmap is actually implemented
+ 	 * without grabbing @of->mutex by testing HAS_MMAP flag.  See the
+ 	 * comment in kernfs_file_open() for more details.
+ 	 */
+ 	if (!(of->kn->flags & SYSFS_FLAG_HAS_MMAP))
+ 		return -ENODEV;
+ 
+ 	mutex_lock(&of->mutex);
+ 
+ 	rc = -ENODEV;
+ 	if (!sysfs_get_active(of->kn))
+ 		goto out_unlock;
+ 
+ 	ops = kernfs_ops(of->kn);
+ 	rc = ops->mmap(of, vma);
+ 
+ 	/*
+ 	 * PowerPC's pci_mmap of legacy_mem uses shmem_zero_setup()
+ 	 * to satisfy versions of X which crash if the mmap fails: that
+ 	 * substitutes a new vm_file, and we don't then want bin_vm_ops.
+ 	 */
+ 	if (vma->vm_file != file)
+ 		goto out_put;
+ 
+ 	rc = -EINVAL;
+ 	if (of->mmapped && of->vm_ops != vma->vm_ops)
+ 		goto out_put;
+ 
+ 	/*
+ 	 * It is not possible to successfully wrap close.
+ 	 * So error if someone is trying to use close.
+ 	 */
+ 	rc = -EINVAL;
+ 	if (vma->vm_ops && vma->vm_ops->close)
+ 		goto out_put;
+ 
+ 	rc = 0;
+ 	of->mmapped = 1;
+ 	of->vm_ops = vma->vm_ops;
+ 	vma->vm_ops = &kernfs_vm_ops;
+ out_put:
+ 	sysfs_put_active(of->kn);
+ out_unlock:
+ 	mutex_unlock(&of->mutex);
+ 
+ 	return rc;
+ }
+ 
+ /**
+  *	sysfs_get_open_dirent - get or create sysfs_open_dirent
+  *	@kn: target kernfs_node
+  *	@of: sysfs_open_file for this instance of open
+  *
+  *	If @kn->attr.open exists, increment its reference count; otherwise,
+  *	create one.  @of is chained to the files list.
+  *
+  *	LOCKING:
+  *	Kernel thread context (may sleep).
+  *
+  *	RETURNS:
+  *	0 on success, -errno on failure.
+  */
+ static int sysfs_get_open_dirent(struct kernfs_node *kn,
+ 				 struct sysfs_open_file *of)
+ {
+ 	struct sysfs_open_dirent *od, *new_od = NULL;
+ 
+  retry:
+ 	mutex_lock(&sysfs_open_file_mutex);
+ 	spin_lock_irq(&sysfs_open_dirent_lock);
+ 
+ 	if (!kn->attr.open && new_od) {
+ 		kn->attr.open = new_od;
+ 		new_od = NULL;
+ 	}
+ 
+ 	od = kn->attr.open;
+ 	if (od) {
+ 		atomic_inc(&od->refcnt);
+ 		list_add_tail(&of->list, &od->files);
+ 	}
+ 
+ 	spin_unlock_irq(&sysfs_open_dirent_lock);
+ 	mutex_unlock(&sysfs_open_file_mutex);
+ 
+ 	if (od) {
+ 		kfree(new_od);
+ 		return 0;
+ 	}
+ 
+ 	/* not there, initialize a new one and retry */
+ 	new_od = kmalloc(sizeof(*new_od), GFP_KERNEL);
+ 	if (!new_od)
+ 		return -ENOMEM;
+ 
+ 	atomic_set(&new_od->refcnt, 0);
+ 	atomic_set(&new_od->event, 1);
+ 	init_waitqueue_head(&new_od->poll);
+ 	INIT_LIST_HEAD(&new_od->files);
+ 	goto retry;
+ }
+ 
+ /**
+  *	sysfs_put_open_dirent - put sysfs_open_dirent
+  *	@kn: target kernfs_nodet
+  *	@of: associated sysfs_open_file
+  *
+  *	Put @kn->attr.open and unlink @of from the files list.  If
+  *	reference count reaches zero, disassociate and free it.
+  *
+  *	LOCKING:
+  *	None.
+  */
+ static void sysfs_put_open_dirent(struct kernfs_node *kn,
+ 				  struct sysfs_open_file *of)
+ {
+ 	struct sysfs_open_dirent *od = kn->attr.open;
+ 	unsigned long flags;
+ 
+ 	mutex_lock(&sysfs_open_file_mutex);
+ 	spin_lock_irqsave(&sysfs_open_dirent_lock, flags);
+ 
+ 	if (of)
+ 		list_del(&of->list);
+ 
+ 	if (atomic_dec_and_test(&od->refcnt))
+ 		kn->attr.open = NULL;
+ 	else
+ 		od = NULL;
+ 
+ 	spin_unlock_irqrestore(&sysfs_open_dirent_lock, flags);
+ 	mutex_unlock(&sysfs_open_file_mutex);
+ 
+ 	kfree(od);
+ }
+ 
+ static int kernfs_file_open(struct inode *inode, struct file *file)
+ {
+ 	struct kernfs_node *kn = file->f_path.dentry->d_fsdata;
+ 	const struct kernfs_ops *ops;
+ 	struct sysfs_open_file *of;
+ 	bool has_read, has_write, has_mmap;
+ 	int error = -EACCES;
+ 
+ 	if (!sysfs_get_active(kn))
+ 		return -ENODEV;
+ 
+ 	ops = kernfs_ops(kn);
+ 
+ 	has_read = ops->seq_show || ops->read || ops->mmap;
+ 	has_write = ops->write || ops->mmap;
+ 	has_mmap = ops->mmap;
+ 
+ 	/* check perms and supported operations */
+ 	if ((file->f_mode & FMODE_WRITE) &&
+ 	    (!(inode->i_mode & S_IWUGO) || !has_write))
+ 		goto err_out;
+ 
+ 	if ((file->f_mode & FMODE_READ) &&
+ 	    (!(inode->i_mode & S_IRUGO) || !has_read))
+ 		goto err_out;
+ 
+ 	/* allocate a sysfs_open_file for the file */
+ 	error = -ENOMEM;
+ 	of = kzalloc(sizeof(struct sysfs_open_file), GFP_KERNEL);
+ 	if (!of)
+ 		goto err_out;
+ 
+ 	/*
+ 	 * The following is done to give a different lockdep key to
+ 	 * @of->mutex for files which implement mmap.  This is a rather
+ 	 * crude way to avoid false positive lockdep warning around
+ 	 * mm->mmap_sem - mmap nests @of->mutex under mm->mmap_sem and
+ 	 * reading /sys/block/sda/trace/act_mask grabs sr_mutex, under
+ 	 * which mm->mmap_sem nests, while holding @of->mutex.  As each
+ 	 * open file has a separate mutex, it's okay as long as those don't
+ 	 * happen on the same file.  At this point, we can't easily give
+ 	 * each file a separate locking class.  Let's differentiate on
+ 	 * whether the file has mmap or not for now.
+ 	 *
+ 	 * Both paths of the branch look the same.  They're supposed to
+ 	 * look that way and give @of->mutex different static lockdep keys.
+ 	 */
+ 	if (has_mmap)
+ 		mutex_init(&of->mutex);
+ 	else
+ 		mutex_init(&of->mutex);
+ 
+ 	of->kn = kn;
+ 	of->file = file;
+ 
+ 	/*
+ 	 * Always instantiate seq_file even if read access doesn't use
+ 	 * seq_file or is not requested.  This unifies private data access
+ 	 * and readable regular files are the vast majority anyway.
+ 	 */
+ 	if (ops->seq_show)
+ 		error = seq_open(file, &kernfs_seq_ops);
+ 	else
+ 		error = seq_open(file, NULL);
+ 	if (error)
+ 		goto err_free;
+ 
+ 	((struct seq_file *)file->private_data)->private = of;
+ 
+ 	/* seq_file clears PWRITE unconditionally, restore it if WRITE */
+ 	if (file->f_mode & FMODE_WRITE)
+ 		file->f_mode |= FMODE_PWRITE;
+ 
+ 	/* make sure we have open dirent struct */
+ 	error = sysfs_get_open_dirent(kn, of);
+ 	if (error)
+ 		goto err_close;
+ 
+ 	/* open succeeded, put active references */
+ 	sysfs_put_active(kn);
+ 	return 0;
+ 
+ err_close:
+ 	seq_release(inode, file);
+ err_free:
+ 	kfree(of);
+ err_out:
+ 	sysfs_put_active(kn);
+ 	return error;
+ }
+ 
+ static int kernfs_file_release(struct inode *inode, struct file *filp)
+ {
+ 	struct kernfs_node *kn = filp->f_path.dentry->d_fsdata;
+ 	struct sysfs_open_file *of = sysfs_of(filp);
+ 
+ 	sysfs_put_open_dirent(kn, of);
+ 	seq_release(inode, filp);
+ 	kfree(of);
+ 
+ 	return 0;
+ }
+ 
+ void sysfs_unmap_bin_file(struct kernfs_node *kn)
+ {
+ 	struct sysfs_open_dirent *od;
+ 	struct sysfs_open_file *of;
+ 
+ 	if (!(kn->flags & SYSFS_FLAG_HAS_MMAP))
+ 		return;
+ 
+ 	spin_lock_irq(&sysfs_open_dirent_lock);
+ 	od = kn->attr.open;
+ 	if (od)
+ 		atomic_inc(&od->refcnt);
+ 	spin_unlock_irq(&sysfs_open_dirent_lock);
+ 	if (!od)
+ 		return;
+ 
+ 	mutex_lock(&sysfs_open_file_mutex);
+ 	list_for_each_entry(of, &od->files, list) {
+ 		struct inode *inode = file_inode(of->file);
+ 		unmap_mapping_range(inode->i_mapping, 0, 0, 1);
+ 	}
+ 	mutex_unlock(&sysfs_open_file_mutex);
+ 
+ 	sysfs_put_open_dirent(kn, NULL);
+ }
+ 
+ /* Sysfs attribute files are pollable.  The idea is that you read
+  * the content and then you use 'poll' or 'select' to wait for
+  * the content to change.  When the content changes (assuming the
+  * manager for the kobject supports notification), poll will
+  * return POLLERR|POLLPRI, and select will return the fd whether
+  * it is waiting for read, write, or exceptions.
+  * Once poll/select indicates that the value has changed, you
+  * need to close and re-open the file, or seek to 0 and read again.
+  * Reminder: this only works for attributes which actively support
+  * it, and it is not possible to test an attribute from userspace
+  * to see if it supports poll (Neither 'poll' nor 'select' return
+  * an appropriate error code).  When in doubt, set a suitable timeout value.
+  */
+ static unsigned int kernfs_file_poll(struct file *filp, poll_table *wait)
+ {
+ 	struct sysfs_open_file *of = sysfs_of(filp);
+ 	struct kernfs_node *kn = filp->f_path.dentry->d_fsdata;
+ 	struct sysfs_open_dirent *od = kn->attr.open;
+ 
+ 	/* need parent for the kobj, grab both */
+ 	if (!sysfs_get_active(kn))
+ 		goto trigger;
+ 
+ 	poll_wait(filp, &od->poll, wait);
+ 
+ 	sysfs_put_active(kn);
+ 
+ 	if (of->event != atomic_read(&od->event))
+ 		goto trigger;
+ 
+ 	return DEFAULT_POLLMASK;
+ 
+  trigger:
+ 	return DEFAULT_POLLMASK|POLLERR|POLLPRI;
+ }
+ 
+ /**
+  * kernfs_notify - notify a kernfs file
+  * @kn: file to notify
+  *
+  * Notify @kn such that poll(2) on @kn wakes up.
+  */
+ void kernfs_notify(struct kernfs_node *kn)
+ {
+ 	struct sysfs_open_dirent *od;
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&sysfs_open_dirent_lock, flags);
+ 
+ 	if (!WARN_ON(sysfs_type(kn) != SYSFS_KOBJ_ATTR)) {
+ 		od = kn->attr.open;
+ 		if (od) {
+ 			atomic_inc(&od->event);
+ 			wake_up_interruptible(&od->poll);
+ 		}
+ 	}
+ 
+ 	spin_unlock_irqrestore(&sysfs_open_dirent_lock, flags);
+ }
+ EXPORT_SYMBOL_GPL(kernfs_notify);
+ 
+ const struct file_operations kernfs_file_operations = {
+ 	.read		= kernfs_file_read,
+ 	.write		= kernfs_file_write,
+ 	.llseek		= generic_file_llseek,
+ 	.mmap		= kernfs_file_mmap,
+ 	.open		= kernfs_file_open,
+ 	.release	= kernfs_file_release,
+ 	.poll		= kernfs_file_poll,
+ };
+ 
+ /**
+  * kernfs_create_file_ns_key - create a file
+  * @parent: directory to create the file in
+  * @name: name of the file
+  * @mode: mode of the file
+  * @size: size of the file
+  * @ops: kernfs operations for the file
+  * @priv: private data for the file
+  * @ns: optional namespace tag of the file
+  * @key: lockdep key for the file's active_ref, %NULL to disable lockdep
+  *
+  * Returns the created node on success, ERR_PTR() value on error.
+  */
+ struct kernfs_node *kernfs_create_file_ns_key(struct kernfs_node *parent,
+ 					      const char *name,
+ 					      umode_t mode, loff_t size,
+ 					      const struct kernfs_ops *ops,
+ 					      void *priv, const void *ns,
+ 					      struct lock_class_key *key)
+ {
+ 	struct sysfs_addrm_cxt acxt;
+ 	struct kernfs_node *kn;
+ 	int rc;
+ 
+ 	kn = sysfs_new_dirent(kernfs_root(parent), name,
+ 			      (mode & S_IALLUGO) | S_IFREG, SYSFS_KOBJ_ATTR);
+ 	if (!kn)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	kn->attr.ops = ops;
+ 	kn->attr.size = size;
+ 	kn->ns = ns;
+ 	kn->priv = priv;
+ 
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	if (key) {
+ 		lockdep_init_map(&kn->dep_map, "s_active", key, 0);
+ 		kn->flags |= SYSFS_FLAG_LOCKDEP;
+ 	}
+ #endif
+ 
+ 	/*
+ 	 * kn->attr.ops is accesible only while holding active ref.  We
+ 	 * need to know whether some ops are implemented outside active
+ 	 * ref.  Cache their existence in flags.
+ 	 */
+ 	if (ops->seq_show)
+ 		kn->flags |= SYSFS_FLAG_HAS_SEQ_SHOW;
+ 	if (ops->mmap)
+ 		kn->flags |= SYSFS_FLAG_HAS_MMAP;
+ 
+ 	sysfs_addrm_start(&acxt);
+ 	rc = sysfs_add_one(&acxt, kn, parent);
+ 	sysfs_addrm_finish(&acxt);
+ 
+ 	if (rc) {
+ 		kernfs_put(kn);
+ 		return ERR_PTR(rc);
+ 	}
+ 	return kn;
+ }
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
diff --cc fs/kernfs/inode.c
index 86bfeea07de2,f6c0aae3dd5c..000000000000
--- a/fs/kernfs/inode.c
+++ b/fs/kernfs/inode.c
@@@ -7,3 -7,371 +7,374 @@@
   *
   * This file is released under the GPLv2.
   */
++<<<<<<< HEAD
++=======
+ 
+ #include <linux/pagemap.h>
+ #include <linux/backing-dev.h>
+ #include <linux/capability.h>
+ #include <linux/errno.h>
+ #include <linux/slab.h>
+ #include <linux/xattr.h>
+ #include <linux/security.h>
+ 
+ #include "kernfs-internal.h"
+ 
+ static const struct address_space_operations sysfs_aops = {
+ 	.readpage	= simple_readpage,
+ 	.write_begin	= simple_write_begin,
+ 	.write_end	= simple_write_end,
+ };
+ 
+ static struct backing_dev_info sysfs_backing_dev_info = {
+ 	.name		= "sysfs",
+ 	.ra_pages	= 0,	/* No readahead */
+ 	.capabilities	= BDI_CAP_NO_ACCT_AND_WRITEBACK,
+ };
+ 
+ static const struct inode_operations sysfs_inode_operations = {
+ 	.permission	= sysfs_permission,
+ 	.setattr	= sysfs_setattr,
+ 	.getattr	= sysfs_getattr,
+ 	.setxattr	= sysfs_setxattr,
+ 	.removexattr	= sysfs_removexattr,
+ 	.getxattr	= sysfs_getxattr,
+ 	.listxattr	= sysfs_listxattr,
+ };
+ 
+ void __init sysfs_inode_init(void)
+ {
+ 	if (bdi_init(&sysfs_backing_dev_info))
+ 		panic("failed to init sysfs_backing_dev_info");
+ }
+ 
+ static struct sysfs_inode_attrs *sysfs_inode_attrs(struct kernfs_node *kn)
+ {
+ 	struct iattr *iattrs;
+ 
+ 	if (kn->iattr)
+ 		return kn->iattr;
+ 
+ 	kn->iattr = kzalloc(sizeof(struct sysfs_inode_attrs), GFP_KERNEL);
+ 	if (!kn->iattr)
+ 		return NULL;
+ 	iattrs = &kn->iattr->ia_iattr;
+ 
+ 	/* assign default attributes */
+ 	iattrs->ia_mode = kn->mode;
+ 	iattrs->ia_uid = GLOBAL_ROOT_UID;
+ 	iattrs->ia_gid = GLOBAL_ROOT_GID;
+ 	iattrs->ia_atime = iattrs->ia_mtime = iattrs->ia_ctime = CURRENT_TIME;
+ 
+ 	simple_xattrs_init(&kn->iattr->xattrs);
+ 
+ 	return kn->iattr;
+ }
+ 
+ static int __kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr)
+ {
+ 	struct sysfs_inode_attrs *attrs;
+ 	struct iattr *iattrs;
+ 	unsigned int ia_valid = iattr->ia_valid;
+ 
+ 	attrs = sysfs_inode_attrs(kn);
+ 	if (!attrs)
+ 		return -ENOMEM;
+ 
+ 	iattrs = &attrs->ia_iattr;
+ 
+ 	if (ia_valid & ATTR_UID)
+ 		iattrs->ia_uid = iattr->ia_uid;
+ 	if (ia_valid & ATTR_GID)
+ 		iattrs->ia_gid = iattr->ia_gid;
+ 	if (ia_valid & ATTR_ATIME)
+ 		iattrs->ia_atime = iattr->ia_atime;
+ 	if (ia_valid & ATTR_MTIME)
+ 		iattrs->ia_mtime = iattr->ia_mtime;
+ 	if (ia_valid & ATTR_CTIME)
+ 		iattrs->ia_ctime = iattr->ia_ctime;
+ 	if (ia_valid & ATTR_MODE) {
+ 		umode_t mode = iattr->ia_mode;
+ 		iattrs->ia_mode = kn->mode = mode;
+ 	}
+ 	return 0;
+ }
+ 
+ /**
+  * kernfs_setattr - set iattr on a node
+  * @kn: target node
+  * @iattr: iattr to set
+  *
+  * Returns 0 on success, -errno on failure.
+  */
+ int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr)
+ {
+ 	int ret;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 	ret = __kernfs_setattr(kn, iattr);
+ 	mutex_unlock(&sysfs_mutex);
+ 	return ret;
+ }
+ 
+ int sysfs_setattr(struct dentry *dentry, struct iattr *iattr)
+ {
+ 	struct inode *inode = dentry->d_inode;
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	int error;
+ 
+ 	if (!kn)
+ 		return -EINVAL;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 	error = inode_change_ok(inode, iattr);
+ 	if (error)
+ 		goto out;
+ 
+ 	error = __kernfs_setattr(kn, iattr);
+ 	if (error)
+ 		goto out;
+ 
+ 	/* this ignores size changes */
+ 	setattr_copy(inode, iattr);
+ 
+ out:
+ 	mutex_unlock(&sysfs_mutex);
+ 	return error;
+ }
+ 
+ static int sysfs_sd_setsecdata(struct kernfs_node *kn, void **secdata,
+ 			       u32 *secdata_len)
+ {
+ 	struct sysfs_inode_attrs *attrs;
+ 	void *old_secdata;
+ 	size_t old_secdata_len;
+ 
+ 	attrs = sysfs_inode_attrs(kn);
+ 	if (!attrs)
+ 		return -ENOMEM;
+ 
+ 	old_secdata = attrs->ia_secdata;
+ 	old_secdata_len = attrs->ia_secdata_len;
+ 
+ 	attrs->ia_secdata = *secdata;
+ 	attrs->ia_secdata_len = *secdata_len;
+ 
+ 	*secdata = old_secdata;
+ 	*secdata_len = old_secdata_len;
+ 	return 0;
+ }
+ 
+ int sysfs_setxattr(struct dentry *dentry, const char *name, const void *value,
+ 		size_t size, int flags)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	struct sysfs_inode_attrs *attrs;
+ 	void *secdata;
+ 	int error;
+ 	u32 secdata_len = 0;
+ 
+ 	attrs = sysfs_inode_attrs(kn);
+ 	if (!attrs)
+ 		return -ENOMEM;
+ 
+ 	if (!strncmp(name, XATTR_SECURITY_PREFIX, XATTR_SECURITY_PREFIX_LEN)) {
+ 		const char *suffix = name + XATTR_SECURITY_PREFIX_LEN;
+ 		error = security_inode_setsecurity(dentry->d_inode, suffix,
+ 						value, size, flags);
+ 		if (error)
+ 			return error;
+ 		error = security_inode_getsecctx(dentry->d_inode,
+ 						&secdata, &secdata_len);
+ 		if (error)
+ 			return error;
+ 
+ 		mutex_lock(&sysfs_mutex);
+ 		error = sysfs_sd_setsecdata(kn, &secdata, &secdata_len);
+ 		mutex_unlock(&sysfs_mutex);
+ 
+ 		if (secdata)
+ 			security_release_secctx(secdata, secdata_len);
+ 		return error;
+ 	} else if (!strncmp(name, XATTR_TRUSTED_PREFIX, XATTR_TRUSTED_PREFIX_LEN)) {
+ 		return simple_xattr_set(&attrs->xattrs, name, value, size,
+ 					flags);
+ 	}
+ 
+ 	return -EINVAL;
+ }
+ 
+ int sysfs_removexattr(struct dentry *dentry, const char *name)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	struct sysfs_inode_attrs *attrs;
+ 
+ 	attrs = sysfs_inode_attrs(kn);
+ 	if (!attrs)
+ 		return -ENOMEM;
+ 
+ 	return simple_xattr_remove(&attrs->xattrs, name);
+ }
+ 
+ ssize_t sysfs_getxattr(struct dentry *dentry, const char *name, void *buf,
+ 		       size_t size)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	struct sysfs_inode_attrs *attrs;
+ 
+ 	attrs = sysfs_inode_attrs(kn);
+ 	if (!attrs)
+ 		return -ENOMEM;
+ 
+ 	return simple_xattr_get(&attrs->xattrs, name, buf, size);
+ }
+ 
+ ssize_t sysfs_listxattr(struct dentry *dentry, char *buf, size_t size)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	struct sysfs_inode_attrs *attrs;
+ 
+ 	attrs = sysfs_inode_attrs(kn);
+ 	if (!attrs)
+ 		return -ENOMEM;
+ 
+ 	return simple_xattr_list(&attrs->xattrs, buf, size);
+ }
+ 
+ static inline void set_default_inode_attr(struct inode *inode, umode_t mode)
+ {
+ 	inode->i_mode = mode;
+ 	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;
+ }
+ 
+ static inline void set_inode_attr(struct inode *inode, struct iattr *iattr)
+ {
+ 	inode->i_uid = iattr->ia_uid;
+ 	inode->i_gid = iattr->ia_gid;
+ 	inode->i_atime = iattr->ia_atime;
+ 	inode->i_mtime = iattr->ia_mtime;
+ 	inode->i_ctime = iattr->ia_ctime;
+ }
+ 
+ static void sysfs_refresh_inode(struct kernfs_node *kn, struct inode *inode)
+ {
+ 	struct sysfs_inode_attrs *attrs = kn->iattr;
+ 
+ 	inode->i_mode = kn->mode;
+ 	if (attrs) {
+ 		/*
+ 		 * kernfs_node has non-default attributes get them from
+ 		 * persistent copy in kernfs_node.
+ 		 */
+ 		set_inode_attr(inode, &attrs->ia_iattr);
+ 		security_inode_notifysecctx(inode, attrs->ia_secdata,
+ 					    attrs->ia_secdata_len);
+ 	}
+ 
+ 	if (sysfs_type(kn) == SYSFS_DIR)
+ 		set_nlink(inode, kn->dir.subdirs + 2);
+ }
+ 
+ int sysfs_getattr(struct vfsmount *mnt, struct dentry *dentry,
+ 		  struct kstat *stat)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	struct inode *inode = dentry->d_inode;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 	sysfs_refresh_inode(kn, inode);
+ 	mutex_unlock(&sysfs_mutex);
+ 
+ 	generic_fillattr(inode, stat);
+ 	return 0;
+ }
+ 
+ static void sysfs_init_inode(struct kernfs_node *kn, struct inode *inode)
+ {
+ 	kernfs_get(kn);
+ 	inode->i_private = kn;
+ 	inode->i_mapping->a_ops = &sysfs_aops;
+ 	inode->i_mapping->backing_dev_info = &sysfs_backing_dev_info;
+ 	inode->i_op = &sysfs_inode_operations;
+ 
+ 	set_default_inode_attr(inode, kn->mode);
+ 	sysfs_refresh_inode(kn, inode);
+ 
+ 	/* initialize inode according to type */
+ 	switch (sysfs_type(kn)) {
+ 	case SYSFS_DIR:
+ 		inode->i_op = &sysfs_dir_inode_operations;
+ 		inode->i_fop = &sysfs_dir_operations;
+ 		break;
+ 	case SYSFS_KOBJ_ATTR:
+ 		inode->i_size = kn->attr.size;
+ 		inode->i_fop = &kernfs_file_operations;
+ 		break;
+ 	case SYSFS_KOBJ_LINK:
+ 		inode->i_op = &sysfs_symlink_inode_operations;
+ 		break;
+ 	default:
+ 		BUG();
+ 	}
+ 
+ 	unlock_new_inode(inode);
+ }
+ 
+ /**
+  *	sysfs_get_inode - get inode for kernfs_node
+  *	@sb: super block
+  *	@kn: kernfs_node to allocate inode for
+  *
+  *	Get inode for @kn.  If such inode doesn't exist, a new inode is
+  *	allocated and basics are initialized.  New inode is returned
+  *	locked.
+  *
+  *	LOCKING:
+  *	Kernel thread context (may sleep).
+  *
+  *	RETURNS:
+  *	Pointer to allocated inode on success, NULL on failure.
+  */
+ struct inode *sysfs_get_inode(struct super_block *sb, struct kernfs_node *kn)
+ {
+ 	struct inode *inode;
+ 
+ 	inode = iget_locked(sb, kn->ino);
+ 	if (inode && (inode->i_state & I_NEW))
+ 		sysfs_init_inode(kn, inode);
+ 
+ 	return inode;
+ }
+ 
+ /*
+  * The kernfs_node serves as both an inode and a directory entry for sysfs.
+  * To prevent the sysfs inode numbers from being freed prematurely we take
+  * a reference to kernfs_node from the sysfs inode.  A
+  * super_operations.evict_inode() implementation is needed to drop that
+  * reference upon inode destruction.
+  */
+ void sysfs_evict_inode(struct inode *inode)
+ {
+ 	struct kernfs_node *kn = inode->i_private;
+ 
+ 	truncate_inode_pages(&inode->i_data, 0);
+ 	clear_inode(inode);
+ 	kernfs_put(kn);
+ }
+ 
+ int sysfs_permission(struct inode *inode, int mask)
+ {
+ 	struct kernfs_node *kn;
+ 
+ 	if (mask & MAY_NOT_BLOCK)
+ 		return -ECHILD;
+ 
+ 	kn = inode->i_private;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 	sysfs_refresh_inode(kn, inode);
+ 	mutex_unlock(&sysfs_mutex);
+ 
+ 	return generic_permission(inode, mask);
+ }
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
diff --cc fs/kernfs/symlink.c
index 2578715baf0e,5ac1a57c3807..000000000000
--- a/fs/kernfs/symlink.c
+++ b/fs/kernfs/symlink.c
@@@ -7,3 -7,146 +7,149 @@@
   *
   * This file is released under the GPLv2.
   */
++<<<<<<< HEAD
++=======
+ 
+ #include <linux/fs.h>
+ #include <linux/gfp.h>
+ #include <linux/namei.h>
+ 
+ #include "kernfs-internal.h"
+ 
+ /**
+  * kernfs_create_link - create a symlink
+  * @parent: directory to create the symlink in
+  * @name: name of the symlink
+  * @target: target node for the symlink to point to
+  *
+  * Returns the created node on success, ERR_PTR() value on error.
+  */
+ struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
+ 				       const char *name,
+ 				       struct kernfs_node *target)
+ {
+ 	struct kernfs_node *kn;
+ 	struct sysfs_addrm_cxt acxt;
+ 	int error;
+ 
+ 	kn = sysfs_new_dirent(kernfs_root(parent), name, S_IFLNK|S_IRWXUGO,
+ 			      SYSFS_KOBJ_LINK);
+ 	if (!kn)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	if (kernfs_ns_enabled(parent))
+ 		kn->ns = target->ns;
+ 	kn->symlink.target_kn = target;
+ 	kernfs_get(target);	/* ref owned by symlink */
+ 
+ 	sysfs_addrm_start(&acxt);
+ 	error = sysfs_add_one(&acxt, kn, parent);
+ 	sysfs_addrm_finish(&acxt);
+ 
+ 	if (!error)
+ 		return kn;
+ 
+ 	kernfs_put(kn);
+ 	return ERR_PTR(error);
+ }
+ 
+ static int sysfs_get_target_path(struct kernfs_node *parent,
+ 				 struct kernfs_node *target, char *path)
+ {
+ 	struct kernfs_node *base, *kn;
+ 	char *s = path;
+ 	int len = 0;
+ 
+ 	/* go up to the root, stop at the base */
+ 	base = parent;
+ 	while (base->parent) {
+ 		kn = target->parent;
+ 		while (kn->parent && base != kn)
+ 			kn = kn->parent;
+ 
+ 		if (base == kn)
+ 			break;
+ 
+ 		strcpy(s, "../");
+ 		s += 3;
+ 		base = base->parent;
+ 	}
+ 
+ 	/* determine end of target string for reverse fillup */
+ 	kn = target;
+ 	while (kn->parent && kn != base) {
+ 		len += strlen(kn->name) + 1;
+ 		kn = kn->parent;
+ 	}
+ 
+ 	/* check limits */
+ 	if (len < 2)
+ 		return -EINVAL;
+ 	len--;
+ 	if ((s - path) + len > PATH_MAX)
+ 		return -ENAMETOOLONG;
+ 
+ 	/* reverse fillup of target string from target to base */
+ 	kn = target;
+ 	while (kn->parent && kn != base) {
+ 		int slen = strlen(kn->name);
+ 
+ 		len -= slen;
+ 		strncpy(s + len, kn->name, slen);
+ 		if (len)
+ 			s[--len] = '/';
+ 
+ 		kn = kn->parent;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int sysfs_getlink(struct dentry *dentry, char *path)
+ {
+ 	struct kernfs_node *kn = dentry->d_fsdata;
+ 	struct kernfs_node *parent = kn->parent;
+ 	struct kernfs_node *target = kn->symlink.target_kn;
+ 	int error;
+ 
+ 	mutex_lock(&sysfs_mutex);
+ 	error = sysfs_get_target_path(parent, target, path);
+ 	mutex_unlock(&sysfs_mutex);
+ 
+ 	return error;
+ }
+ 
+ static void *sysfs_follow_link(struct dentry *dentry, struct nameidata *nd)
+ {
+ 	int error = -ENOMEM;
+ 	unsigned long page = get_zeroed_page(GFP_KERNEL);
+ 	if (page) {
+ 		error = sysfs_getlink(dentry, (char *) page);
+ 		if (error < 0)
+ 			free_page((unsigned long)page);
+ 	}
+ 	nd_set_link(nd, error ? ERR_PTR(error) : (char *)page);
+ 	return NULL;
+ }
+ 
+ static void sysfs_put_link(struct dentry *dentry, struct nameidata *nd,
+ 			   void *cookie)
+ {
+ 	char *page = nd_get_link(nd);
+ 	if (!IS_ERR(page))
+ 		free_page((unsigned long)page);
+ }
+ 
+ const struct inode_operations sysfs_symlink_inode_operations = {
+ 	.setxattr	= sysfs_setxattr,
+ 	.removexattr	= sysfs_removexattr,
+ 	.getxattr	= sysfs_getxattr,
+ 	.listxattr	= sysfs_listxattr,
+ 	.readlink	= generic_readlink,
+ 	.follow_link	= sysfs_follow_link,
+ 	.put_link	= sysfs_put_link,
+ 	.setattr	= sysfs_setattr,
+ 	.getattr	= sysfs_getattr,
+ 	.permission	= sysfs_permission,
+ };
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
diff --cc fs/sysfs/dir.c
index 3f68344137e5,4a800017558d..000000000000
--- a/fs/sysfs/dir.c
+++ b/fs/sysfs/dir.c
@@@ -480,13 -27,13 +480,21 @@@ int __sysfs_add_one(struct sysfs_addrm_
   *	Gives the name "/" to the sysfs_root entry; any path returned
   *	is relative to wherever sysfs is mounted.
   */
 -static char *sysfs_pathname(struct kernfs_node *kn, char *path)
 +static char *sysfs_pathname(struct sysfs_dirent *sd, char *path)
  {
++<<<<<<< HEAD
 +	if (sd->s_parent) {
 +		sysfs_pathname(sd->s_parent, path);
 +		strlcat(path, "/", PATH_MAX);
 +	}
 +	strlcat(path, sd->s_name, PATH_MAX);
++=======
+ 	if (kn->parent) {
+ 		sysfs_pathname(kn->parent, path);
+ 		strlcat(path, "/", PATH_MAX);
+ 	}
+ 	strlcat(path, kn->name, PATH_MAX);
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  	return path;
  }
  
@@@ -857,228 -92,49 +865,240 @@@ static void __sysfs_remove_dir(struct s
   *	the directory before we remove the directory, and we've inlined
   *	what used to be sysfs_rmdir() below, instead of calling separately.
   */
 -void sysfs_remove_dir(struct kobject *kobj)
 +
 +void sysfs_remove_dir(struct kobject * kobj)
  {
 -	struct kernfs_node *kn = kobj->sd;
 +	struct sysfs_dirent *sd = kobj->sd;
  
 -	/*
 -	 * In general, kboject owner is responsible for ensuring removal
 -	 * doesn't race with other operations and sysfs doesn't provide any
 -	 * protection; however, when @kobj is used as a symlink target, the
 -	 * symlinking entity usually doesn't own @kobj and thus has no
 -	 * control over removal.  @kobj->sd may be removed anytime
 -	 * and symlink code may end up dereferencing an already freed node.
 -	 *
 -	 * sysfs_symlink_target_lock synchronizes @kobj->sd
 -	 * disassociation against symlink operations so that symlink code
 -	 * can safely dereference @kobj->sd.
 -	 */
 -	spin_lock(&sysfs_symlink_target_lock);
 +	spin_lock(&sysfs_assoc_lock);
  	kobj->sd = NULL;
 -	spin_unlock(&sysfs_symlink_target_lock);
 +	spin_unlock(&sysfs_assoc_lock);
  
 -	if (kn) {
 -		WARN_ON_ONCE(sysfs_type(kn) != SYSFS_DIR);
 -		kernfs_remove(kn);
 +	__sysfs_remove_dir(sd);
 +}
 +
 +int sysfs_rename(struct sysfs_dirent *sd,
 +	struct sysfs_dirent *new_parent_sd, const void *new_ns,
 +	const char *new_name)
 +{
 +	int error;
 +
 +	mutex_lock(&sysfs_mutex);
 +
 +	error = 0;
 +	if ((sd->s_parent == new_parent_sd) && (sd->s_ns == new_ns) &&
 +	    (strcmp(sd->s_name, new_name) == 0))
 +		goto out;	/* nothing to rename */
 +
 +	error = -EEXIST;
 +	if (sysfs_find_dirent(new_parent_sd, new_ns, new_name))
 +		goto out;
 +
 +	/* rename sysfs_dirent */
 +	if (strcmp(sd->s_name, new_name) != 0) {
 +		error = -ENOMEM;
 +		new_name = kstrdup(new_name, GFP_KERNEL);
 +		if (!new_name)
 +			goto out;
 +
 +		kfree(sd->s_name);
 +		sd->s_name = new_name;
  	}
 +
 +	/* Move to the appropriate place in the appropriate directories rbtree. */
 +	sysfs_unlink_sibling(sd);
 +	sysfs_get(new_parent_sd);
 +	sysfs_put(sd->s_parent);
 +	sd->s_ns = new_ns;
 +	sd->s_hash = sysfs_name_hash(sd->s_ns, sd->s_name);
 +	sd->s_parent = new_parent_sd;
 +	sysfs_link_sibling(sd);
 +
 +	error = 0;
 + out:
 +	mutex_unlock(&sysfs_mutex);
 +	return error;
  }
  
 -int sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
 -			const void *new_ns)
 +int sysfs_rename_dir(struct kobject *kobj, const char *new_name)
  {
++<<<<<<< HEAD
 +	struct sysfs_dirent *parent_sd = kobj->sd->s_parent;
 +	const void *new_ns = NULL;
++=======
+ 	struct kernfs_node *parent = kobj->sd->parent;
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  
 -	return kernfs_rename_ns(kobj->sd, parent, new_name, new_ns);
 +	if (sysfs_ns_type(parent_sd))
 +		new_ns = kobj->ktype->namespace(kobj);
 +
 +	return sysfs_rename(kobj->sd, parent_sd, new_ns, new_name);
  }
  
 -int sysfs_move_dir_ns(struct kobject *kobj, struct kobject *new_parent_kobj,
 -		      const void *new_ns)
 +int sysfs_move_dir(struct kobject *kobj, struct kobject *new_parent_kobj)
  {
 -	struct kernfs_node *kn = kobj->sd;
 -	struct kernfs_node *new_parent;
 +	struct sysfs_dirent *sd = kobj->sd;
 +	struct sysfs_dirent *new_parent_sd;
 +	const void *new_ns = NULL;
 +
++<<<<<<< HEAD
 +	BUG_ON(!sd->s_parent);
 +	if (sysfs_ns_type(sd->s_parent))
 +		new_ns = kobj->ktype->namespace(kobj);
 +	new_parent_sd = new_parent_kobj && new_parent_kobj->sd ?
 +		new_parent_kobj->sd : &sysfs_root;
  
 +	return sysfs_rename(sd, new_parent_sd, new_ns, sd->s_name);
++=======
+ 	BUG_ON(!kn->parent);
+ 	new_parent = new_parent_kobj && new_parent_kobj->sd ?
+ 		new_parent_kobj->sd : sysfs_root_kn;
+ 
+ 	return kernfs_rename_ns(kn, new_parent, kn->name, new_ns);
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
 +}
 +
 +/* Relationship between s_mode and the DT_xxx types */
 +static inline unsigned char dt_type(struct sysfs_dirent *sd)
 +{
 +	return (sd->s_mode >> 12) & 15;
 +}
 +
 +static int sysfs_dir_release(struct inode *inode, struct file *filp)
 +{
 +	sysfs_put(filp->private_data);
 +	return 0;
 +}
 +
 +static struct sysfs_dirent *sysfs_dir_pos(const void *ns,
 +	struct sysfs_dirent *parent_sd,	loff_t hash, struct sysfs_dirent *pos)
 +{
 +	if (pos) {
 +		int valid = !(pos->s_flags & SYSFS_FLAG_REMOVED) &&
 +			pos->s_parent == parent_sd &&
 +			hash == pos->s_hash;
 +		sysfs_put(pos);
 +		if (!valid)
 +			pos = NULL;
 +	}
 +	if (!pos && (hash > 1) && (hash < INT_MAX)) {
 +		struct rb_node *node = parent_sd->s_dir.children.rb_node;
 +		while (node) {
 +			pos = to_sysfs_dirent(node);
 +
 +			if (hash < pos->s_hash)
 +				node = node->rb_left;
 +			else if (hash > pos->s_hash)
 +				node = node->rb_right;
 +			else
 +				break;
 +		}
 +	}
 +	/* Skip over entries in the wrong namespace */
 +	while (pos && pos->s_ns != ns) {
 +		struct rb_node *node = rb_next(&pos->s_rb);
 +		if (!node)
 +			pos = NULL;
 +		else
 +			pos = to_sysfs_dirent(node);
 +	}
 +	return pos;
  }
 +
 +static struct sysfs_dirent *sysfs_dir_next_pos(const void *ns,
 +	struct sysfs_dirent *parent_sd,	ino_t ino, struct sysfs_dirent *pos)
 +{
 +	pos = sysfs_dir_pos(ns, parent_sd, ino, pos);
 +	if (pos) do {
 +		struct rb_node *node = rb_next(&pos->s_rb);
 +		if (!node)
 +			pos = NULL;
 +		else
 +			pos = to_sysfs_dirent(node);
 +	} while (pos && pos->s_ns != ns);
 +	return pos;
 +}
 +
 +static int sysfs_readdir(struct file * filp, void * dirent, filldir_t filldir)
 +{
 +	struct dentry *dentry = filp->f_path.dentry;
 +	struct sysfs_dirent * parent_sd = dentry->d_fsdata;
 +	struct sysfs_dirent *pos = filp->private_data;
 +	enum kobj_ns_type type;
 +	const void *ns;
 +	ino_t ino;
 +	loff_t off;
 +
 +	type = sysfs_ns_type(parent_sd);
 +	ns = sysfs_info(dentry->d_sb)->ns[type];
 +
 +	if (filp->f_pos == 0) {
 +		ino = parent_sd->s_ino;
 +		if (filldir(dirent, ".", 1, filp->f_pos, ino, DT_DIR) == 0)
 +			filp->f_pos++;
 +		else
 +			return 0;
 +	}
 +	if (filp->f_pos == 1) {
 +		if (parent_sd->s_parent)
 +			ino = parent_sd->s_parent->s_ino;
 +		else
 +			ino = parent_sd->s_ino;
 +		if (filldir(dirent, "..", 2, filp->f_pos, ino, DT_DIR) == 0)
 +			filp->f_pos++;
 +		else
 +			return 0;
 +	}
 +	mutex_lock(&sysfs_mutex);
 +	off = filp->f_pos;
 +	for (pos = sysfs_dir_pos(ns, parent_sd, filp->f_pos, pos);
 +	     pos;
 +	     pos = sysfs_dir_next_pos(ns, parent_sd, filp->f_pos, pos)) {
 +		const char * name;
 +		unsigned int type;
 +		int len, ret;
 +
 +		name = pos->s_name;
 +		len = strlen(name);
 +		ino = pos->s_ino;
 +		type = dt_type(pos);
 +		off = filp->f_pos = pos->s_hash;
 +		filp->private_data = sysfs_get(pos);
 +
 +		mutex_unlock(&sysfs_mutex);
 +		ret = filldir(dirent, name, len, off, ino, type);
 +		mutex_lock(&sysfs_mutex);
 +		if (ret < 0)
 +			break;
 +	}
 +	mutex_unlock(&sysfs_mutex);
 +
 +	/* don't reference last entry if its refcount is dropped */
 +	if (!pos) {
 +		filp->private_data = NULL;
 +
 +		/* EOF and not changed as 0 or 1 in read/write path */
 +		if (off == filp->f_pos && off > 1)
 +			filp->f_pos = INT_MAX;
 +	}
 +	return 0;
 +}
 +
 +static loff_t sysfs_dir_llseek(struct file *file, loff_t offset, int whence)
 +{
 +	struct inode *inode = file_inode(file);
 +	loff_t ret;
 +
 +	mutex_lock(&inode->i_mutex);
 +	ret = generic_file_llseek(file, offset, whence);
 +	mutex_unlock(&inode->i_mutex);
 +
 +	return ret;
 +}
 +
 +const struct file_operations sysfs_dir_operations = {
 +	.read		= generic_read_dir,
 +	.readdir	= sysfs_readdir,
 +	.release	= sysfs_dir_release,
 +	.llseek		= sysfs_dir_llseek,
 +};
diff --cc fs/sysfs/file.c
index 602f56db0442,887703a79065..000000000000
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@@ -14,77 -14,55 +14,94 @@@
  #include <linux/kobject.h>
  #include <linux/kallsyms.h>
  #include <linux/slab.h>
 +#include <linux/fsnotify.h>
 +#include <linux/namei.h>
 +#include <linux/poll.h>
  #include <linux/list.h>
  #include <linux/mutex.h>
 -#include <linux/seq_file.h>
 +#include <linux/limits.h>
 +#include <asm/uaccess.h>
  
  #include "sysfs.h"
 -#include "../kernfs/kernfs-internal.h"
  
  /*
 - * Determine ktype->sysfs_ops for the given kernfs_node.  This function
 - * must be called while holding an active reference.
 + * There's one sysfs_buffer for each open file and one
 + * sysfs_open_dirent for each sysfs_dirent with one or more open
 + * files.
 + *
 + * filp->private_data points to sysfs_buffer and
 + * sysfs_dirent->s_attr.open points to sysfs_open_dirent.  s_attr.open
 + * is protected by sysfs_open_dirent_lock.
   */
++<<<<<<< HEAD
 +static DEFINE_SPINLOCK(sysfs_open_dirent_lock);
 +
 +struct sysfs_open_dirent {
 +	atomic_t		refcnt;
 +	atomic_t		event;
 +	wait_queue_head_t	poll;
 +	struct list_head	buffers; /* goes through sysfs_buffer.list */
 +};
++=======
+ static const struct sysfs_ops *sysfs_file_ops(struct kernfs_node *kn)
+ {
+ 	struct kobject *kobj = kn->parent->priv;
+ 
+ 	if (kn->flags & SYSFS_FLAG_LOCKDEP)
+ 		lockdep_assert_held(kn);
+ 	return kobj->ktype ? kobj->ktype->sysfs_ops : NULL;
+ }
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
 +
 +struct sysfs_buffer {
 +	size_t			count;
 +	loff_t			pos;
 +	char			* page;
 +	const struct sysfs_ops	* ops;
 +	struct mutex		mutex;
 +	int			needs_read_fill;
 +	int			event;
 +	struct list_head	list;
 +};
  
 -/*
 - * Reads on sysfs are handled through seq_file, which takes care of hairy
 - * details like buffering and seeking.  The following function pipes
 - * sysfs_ops->show() result through seq_file.
 +/**
 + *	fill_read_buffer - allocate and fill buffer from object.
 + *	@dentry:	dentry pointer.
 + *	@buffer:	data buffer for file.
 + *
 + *	Allocate @buffer->page, if it hasn't been already, then call the
 + *	kobject's show() method to fill the buffer with this attribute's 
 + *	data. 
 + *	This is called only once, on the file's first read unless an error
 + *	is returned.
   */
 -static int sysfs_kf_seq_show(struct seq_file *sf, void *v)
 +static int fill_read_buffer(struct dentry * dentry, struct sysfs_buffer * buffer)
  {
++<<<<<<< HEAD
 +	struct sysfs_dirent *attr_sd = dentry->d_fsdata;
 +	struct kobject *kobj = attr_sd->s_parent->s_dir.kobj;
 +	const struct sysfs_ops * ops = buffer->ops;
 +	int ret = 0;
++=======
+ 	struct sysfs_open_file *of = sf->private;
+ 	struct kobject *kobj = of->kn->parent->priv;
+ 	const struct sysfs_ops *ops = sysfs_file_ops(of->kn);
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  	ssize_t count;
 -	char *buf;
  
 -	/* acquire buffer and ensure that it's >= PAGE_SIZE */
 -	count = seq_get_buf(sf, &buf);
 -	if (count < PAGE_SIZE) {
 -		seq_commit(sf, -1);
 -		return 0;
 -	}
 +	if (!buffer->page)
 +		buffer->page = (char *) get_zeroed_page(GFP_KERNEL);
 +	if (!buffer->page)
 +		return -ENOMEM;
  
 -	/*
 -	 * Invoke show().  Control may reach here via seq file lseek even
 -	 * if @ops->show() isn't implemented.
 -	 */
 -	if (ops->show) {
 -		count = ops->show(kobj, of->kn->priv, buf);
 -		if (count < 0)
 -			return count;
 -	}
 +	/* need attr_sd for attr and ops, its parent for kobj */
 +	if (!sysfs_get_active(attr_sd))
 +		return -ENODEV;
 +
 +	buffer->event = atomic_read(&attr_sd->s_attr.open->event);
 +	count = ops->show(kobj, attr_sd->s_attr.attr, buffer->page);
 +
 +	sysfs_put_active(attr_sd);
  
  	/*
  	 * The code works fine with PAGE_SIZE return but it's likely to
@@@ -96,312 -74,191 +113,472 @@@
  		/* Try to struggle along */
  		count = PAGE_SIZE - 1;
  	}
++<<<<<<< HEAD
 +	if (count >= 0) {
 +		buffer->needs_read_fill = 0;
 +		buffer->count = count;
++=======
+ 	seq_commit(sf, count);
+ 	return 0;
+ }
+ 
+ static ssize_t sysfs_kf_bin_read(struct sysfs_open_file *of, char *buf,
+ 				 size_t count, loff_t pos)
+ {
+ 	struct bin_attribute *battr = of->kn->priv;
+ 	struct kobject *kobj = of->kn->parent->priv;
+ 	loff_t size = file_inode(of->file)->i_size;
+ 
+ 	if (!count)
+ 		return 0;
+ 
+ 	if (size) {
+ 		if (pos > size)
+ 			return 0;
+ 		if (pos + count > size)
+ 			count = size - pos;
+ 	}
+ 
+ 	if (!battr->read)
+ 		return -EIO;
+ 
+ 	return battr->read(of->file, kobj, battr, buf, pos, count);
+ }
+ 
+ /* kernfs write callback for regular sysfs files */
+ static ssize_t sysfs_kf_write(struct sysfs_open_file *of, char *buf,
+ 			      size_t count, loff_t pos)
+ {
+ 	const struct sysfs_ops *ops = sysfs_file_ops(of->kn);
+ 	struct kobject *kobj = of->kn->parent->priv;
+ 
+ 	if (!count)
+ 		return 0;
+ 
+ 	return ops->store(kobj, of->kn->priv, buf, count);
+ }
+ 
+ /* kernfs write callback for bin sysfs files */
+ static ssize_t sysfs_kf_bin_write(struct sysfs_open_file *of, char *buf,
+ 				  size_t count, loff_t pos)
+ {
+ 	struct bin_attribute *battr = of->kn->priv;
+ 	struct kobject *kobj = of->kn->parent->priv;
+ 	loff_t size = file_inode(of->file)->i_size;
+ 
+ 	if (size) {
+ 		if (size <= pos)
+ 			return 0;
+ 		count = min_t(ssize_t, count, size - pos);
+ 	}
+ 	if (!count)
+ 		return 0;
+ 
+ 	if (!battr->write)
+ 		return -EIO;
+ 
+ 	return battr->write(of->file, kobj, battr, buf, pos, count);
+ }
+ 
+ static int sysfs_kf_bin_mmap(struct sysfs_open_file *of,
+ 			     struct vm_area_struct *vma)
+ {
+ 	struct bin_attribute *battr = of->kn->priv;
+ 	struct kobject *kobj = of->kn->parent->priv;
+ 
+ 	return battr->mmap(of->file, kobj, battr, vma);
+ }
+ 
+ void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr)
+ {
+ 	struct kernfs_node *kn = kobj->sd, *tmp;
+ 
+ 	if (kn && dir)
+ 		kn = kernfs_find_and_get(kn, dir);
+ 	else
+ 		kernfs_get(kn);
+ 
+ 	if (kn && attr) {
+ 		tmp = kernfs_find_and_get(kn, attr);
+ 		kernfs_put(kn);
+ 		kn = tmp;
+ 	}
+ 
+ 	if (kn) {
+ 		kernfs_notify(kn);
+ 		kernfs_put(kn);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(sysfs_notify);
+ 
+ static const struct kernfs_ops sysfs_file_kfops_empty = {
+ };
+ 
+ static const struct kernfs_ops sysfs_file_kfops_ro = {
+ 	.seq_show	= sysfs_kf_seq_show,
+ };
+ 
+ static const struct kernfs_ops sysfs_file_kfops_wo = {
+ 	.write		= sysfs_kf_write,
+ };
+ 
+ static const struct kernfs_ops sysfs_file_kfops_rw = {
+ 	.seq_show	= sysfs_kf_seq_show,
+ 	.write		= sysfs_kf_write,
+ };
+ 
+ static const struct kernfs_ops sysfs_bin_kfops_ro = {
+ 	.read		= sysfs_kf_bin_read,
+ };
+ 
+ static const struct kernfs_ops sysfs_bin_kfops_wo = {
+ 	.write		= sysfs_kf_bin_write,
+ };
+ 
+ static const struct kernfs_ops sysfs_bin_kfops_rw = {
+ 	.read		= sysfs_kf_bin_read,
+ 	.write		= sysfs_kf_bin_write,
+ };
+ 
+ static const struct kernfs_ops sysfs_bin_kfops_mmap = {
+ 	.read		= sysfs_kf_bin_read,
+ 	.write		= sysfs_kf_bin_write,
+ 	.mmap		= sysfs_kf_bin_mmap,
+ };
+ 
+ int sysfs_add_file_mode_ns(struct kernfs_node *parent,
+ 			   const struct attribute *attr, bool is_bin,
+ 			   umode_t mode, const void *ns)
+ {
+ 	struct lock_class_key *key = NULL;
+ 	const struct kernfs_ops *ops;
+ 	struct kernfs_node *kn;
+ 	loff_t size;
+ 
+ 	if (!is_bin) {
+ 		struct kobject *kobj = parent->priv;
+ 		const struct sysfs_ops *sysfs_ops = kobj->ktype->sysfs_ops;
+ 
+ 		/* every kobject with an attribute needs a ktype assigned */
+ 		if (WARN(!sysfs_ops, KERN_ERR
+ 			 "missing sysfs attribute operations for kobject: %s\n",
+ 			 kobject_name(kobj)))
+ 			return -EINVAL;
+ 
+ 		if (sysfs_ops->show && sysfs_ops->store)
+ 			ops = &sysfs_file_kfops_rw;
+ 		else if (sysfs_ops->show)
+ 			ops = &sysfs_file_kfops_ro;
+ 		else if (sysfs_ops->store)
+ 			ops = &sysfs_file_kfops_wo;
+ 		else
+ 			ops = &sysfs_file_kfops_empty;
+ 
+ 		size = PAGE_SIZE;
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  	} else {
 -		struct bin_attribute *battr = (void *)attr;
 -
 -		if (battr->mmap)
 -			ops = &sysfs_bin_kfops_mmap;
 -		else if (battr->read && battr->write)
 -			ops = &sysfs_bin_kfops_rw;
 -		else if (battr->read)
 -			ops = &sysfs_bin_kfops_ro;
 -		else if (battr->write)
 -			ops = &sysfs_bin_kfops_wo;
 -		else
 -			ops = &sysfs_file_kfops_empty;
 +		ret = count;
 +	}
 +	return ret;
 +}
 +
 +/**
 + *	sysfs_read_file - read an attribute. 
 + *	@file:	file pointer.
 + *	@buf:	buffer to fill.
 + *	@count:	number of bytes to read.
 + *	@ppos:	starting offset in file.
 + *
 + *	Userspace wants to read an attribute file. The attribute descriptor
 + *	is in the file's ->d_fsdata. The target object is in the directory's
 + *	->d_fsdata.
 + *
 + *	We call fill_read_buffer() to allocate and fill the buffer from the
 + *	object's show() method exactly once (if the read is happening from
 + *	the beginning of the file). That should fill the entire buffer with
 + *	all the data the object has to offer for that attribute.
 + *	We then call flush_read_buffer() to copy the buffer to userspace
 + *	in the increments specified.
 + */
 +
 +static ssize_t
 +sysfs_read_file(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 +{
 +	struct sysfs_buffer * buffer = file->private_data;
 +	ssize_t retval = 0;
 +
 +	mutex_lock(&buffer->mutex);
 +	if (buffer->needs_read_fill || *ppos == 0) {
 +		retval = fill_read_buffer(file->f_path.dentry,buffer);
 +		if (retval)
 +			goto out;
 +	}
 +	pr_debug("%s: count = %zd, ppos = %lld, buf = %s\n",
 +		 __func__, count, *ppos, buffer->page);
 +	retval = simple_read_from_buffer(buf, count, ppos, buffer->page,
 +					 buffer->count);
 +out:
 +	mutex_unlock(&buffer->mutex);
 +	return retval;
 +}
 +
 +/**
 + *	fill_write_buffer - copy buffer from userspace.
 + *	@buffer:	data buffer for file.
 + *	@buf:		data from user.
 + *	@count:		number of bytes in @userbuf.
 + *
 + *	Allocate @buffer->page if it hasn't been already, then
 + *	copy the user-supplied buffer into it.
 + */
 +
 +static int 
 +fill_write_buffer(struct sysfs_buffer * buffer, const char __user * buf, size_t count)
 +{
 +	int error;
 +
 +	if (!buffer->page)
 +		buffer->page = (char *)get_zeroed_page(GFP_KERNEL);
 +	if (!buffer->page)
 +		return -ENOMEM;
 +
 +	if (count >= PAGE_SIZE)
 +		count = PAGE_SIZE - 1;
 +	error = copy_from_user(buffer->page,buf,count);
 +	buffer->needs_read_fill = 1;
 +	/* if buf is assumed to contain a string, terminate it by \0,
 +	   so e.g. sscanf() can scan the string easily */
 +	buffer->page[count] = 0;
 +	return error ? -EFAULT : count;
 +}
 +
 +
 +/**
 + *	flush_write_buffer - push buffer to kobject.
 + *	@dentry:	dentry to the attribute
 + *	@buffer:	data buffer for file.
 + *	@count:		number of bytes
 + *
 + *	Get the correct pointers for the kobject and the attribute we're
 + *	dealing with, then call the store() method for the attribute, 
 + *	passing the buffer that we acquired in fill_write_buffer().
 + */
 +
 +static int
 +flush_write_buffer(struct dentry * dentry, struct sysfs_buffer * buffer, size_t count)
 +{
 +	struct sysfs_dirent *attr_sd = dentry->d_fsdata;
 +	struct kobject *kobj = attr_sd->s_parent->s_dir.kobj;
 +	const struct sysfs_ops * ops = buffer->ops;
 +	int rc;
 +
 +	/* need attr_sd for attr and ops, its parent for kobj */
 +	if (!sysfs_get_active(attr_sd))
 +		return -ENODEV;
  
 -		size = battr->size;
 +	rc = ops->store(kobj, attr_sd->s_attr.attr, buffer->page, count);
 +
 +	sysfs_put_active(attr_sd);
 +
 +	return rc;
 +}
 +
 +
 +/**
 + *	sysfs_write_file - write an attribute.
 + *	@file:	file pointer
 + *	@buf:	data to write
 + *	@count:	number of bytes
 + *	@ppos:	starting offset
 + *
 + *	Similar to sysfs_read_file(), though working in the opposite direction.
 + *	We allocate and fill the data from the user in fill_write_buffer(),
 + *	then push it to the kobject in flush_write_buffer().
 + *	There is no easy way for us to know if userspace is only doing a partial
 + *	write, so we don't support them. We expect the entire buffer to come
 + *	on the first write. 
 + *	Hint: if you're writing a value, first read the file, modify only the
 + *	the value you're changing, then write entire buffer back. 
 + */
 +
 +static ssize_t
 +sysfs_write_file(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 +{
 +	struct sysfs_buffer * buffer = file->private_data;
 +	ssize_t len;
 +
 +	mutex_lock(&buffer->mutex);
 +	len = fill_write_buffer(buffer, buf, count);
 +	if (len > 0)
 +		len = flush_write_buffer(file->f_path.dentry, buffer, len);
 +	if (len > 0)
 +		*ppos += len;
 +	mutex_unlock(&buffer->mutex);
 +	return len;
 +}
 +
 +/**
 + *	sysfs_get_open_dirent - get or create sysfs_open_dirent
 + *	@sd: target sysfs_dirent
 + *	@buffer: sysfs_buffer for this instance of open
 + *
 + *	If @sd->s_attr.open exists, increment its reference count;
 + *	otherwise, create one.  @buffer is chained to the buffers
 + *	list.
 + *
 + *	LOCKING:
 + *	Kernel thread context (may sleep).
 + *
 + *	RETURNS:
 + *	0 on success, -errno on failure.
 + */
 +static int sysfs_get_open_dirent(struct sysfs_dirent *sd,
 +				 struct sysfs_buffer *buffer)
 +{
 +	struct sysfs_open_dirent *od, *new_od = NULL;
 +
 + retry:
 +	spin_lock_irq(&sysfs_open_dirent_lock);
 +
 +	if (!sd->s_attr.open && new_od) {
 +		sd->s_attr.open = new_od;
 +		new_od = NULL;
 +	}
 +
 +	od = sd->s_attr.open;
 +	if (od) {
 +		atomic_inc(&od->refcnt);
 +		list_add_tail(&buffer->list, &od->buffers);
 +	}
 +
 +	spin_unlock_irq(&sysfs_open_dirent_lock);
 +
 +	if (od) {
 +		kfree(new_od);
 +		return 0;
  	}
  
 -#ifdef CONFIG_DEBUG_LOCK_ALLOC
 -	if (!attr->ignore_lockdep)
 -		key = attr->key ?: (struct lock_class_key *)&attr->skey;
 -#endif
 -	kn = kernfs_create_file_ns_key(parent, attr->name, mode, size,
 -				       ops, (void *)attr, ns, key);
 -	if (IS_ERR(kn)) {
 -		if (PTR_ERR(kn) == -EEXIST)
 -			sysfs_warn_dup(parent, attr->name);
 -		return PTR_ERR(kn);
 +	/* not there, initialize a new one and retry */
 +	new_od = kmalloc(sizeof(*new_od), GFP_KERNEL);
 +	if (!new_od)
 +		return -ENOMEM;
 +
 +	atomic_set(&new_od->refcnt, 0);
 +	atomic_set(&new_od->event, 1);
 +	init_waitqueue_head(&new_od->poll);
 +	INIT_LIST_HEAD(&new_od->buffers);
 +	goto retry;
 +}
 +
 +/**
 + *	sysfs_put_open_dirent - put sysfs_open_dirent
 + *	@sd: target sysfs_dirent
 + *	@buffer: associated sysfs_buffer
 + *
 + *	Put @sd->s_attr.open and unlink @buffer from the buffers list.
 + *	If reference count reaches zero, disassociate and free it.
 + *
 + *	LOCKING:
 + *	None.
 + */
 +static void sysfs_put_open_dirent(struct sysfs_dirent *sd,
 +				  struct sysfs_buffer *buffer)
 +{
 +	struct sysfs_open_dirent *od = sd->s_attr.open;
 +	unsigned long flags;
 +
 +	spin_lock_irqsave(&sysfs_open_dirent_lock, flags);
 +
 +	list_del(&buffer->list);
 +	if (atomic_dec_and_test(&od->refcnt))
 +		sd->s_attr.open = NULL;
 +	else
 +		od = NULL;
 +
 +	spin_unlock_irqrestore(&sysfs_open_dirent_lock, flags);
 +
 +	kfree(od);
 +}
 +
 +static int sysfs_open_file(struct inode *inode, struct file *file)
 +{
 +	struct sysfs_dirent *attr_sd = file->f_path.dentry->d_fsdata;
 +	struct kobject *kobj = attr_sd->s_parent->s_dir.kobj;
 +	struct sysfs_buffer *buffer;
 +	const struct sysfs_ops *ops;
 +	int error = -EACCES;
 +
 +	/* need attr_sd for attr and ops, its parent for kobj */
 +	if (!sysfs_get_active(attr_sd))
 +		return -ENODEV;
 +
 +	/* every kobject with an attribute needs a ktype assigned */
 +	if (kobj->ktype && kobj->ktype->sysfs_ops)
 +		ops = kobj->ktype->sysfs_ops;
 +	else {
 +		WARN(1, KERN_ERR "missing sysfs attribute operations for "
 +		       "kobject: %s\n", kobject_name(kobj));
 +		goto err_out;
 +	}
 +
 +	/* File needs write support.
 +	 * The inode's perms must say it's ok, 
 +	 * and we must have a store method.
 +	 */
 +	if (file->f_mode & FMODE_WRITE) {
 +		if (!(inode->i_mode & S_IWUGO) || !ops->store)
 +			goto err_out;
  	}
 +
 +	/* File needs read support.
 +	 * The inode's perms must say it's ok, and we there
 +	 * must be a show method for it.
 +	 */
 +	if (file->f_mode & FMODE_READ) {
 +		if (!(inode->i_mode & S_IRUGO) || !ops->show)
 +			goto err_out;
 +	}
 +
 +	/* No error? Great, allocate a buffer for the file, and store it
 +	 * it in file->private_data for easy access.
 +	 */
 +	error = -ENOMEM;
 +	buffer = kzalloc(sizeof(struct sysfs_buffer), GFP_KERNEL);
 +	if (!buffer)
 +		goto err_out;
 +
 +	mutex_init(&buffer->mutex);
 +	buffer->needs_read_fill = 1;
 +	buffer->ops = ops;
 +	file->private_data = buffer;
 +
 +	/* make sure we have open dirent struct */
 +	error = sysfs_get_open_dirent(attr_sd, buffer);
 +	if (error)
 +		goto err_free;
 +
 +	/* open succeeded, put active references */
 +	sysfs_put_active(attr_sd);
 +	return 0;
 +
 + err_free:
 +	kfree(buffer);
 + err_out:
 +	sysfs_put_active(attr_sd);
 +	return error;
 +}
 +
 +static int sysfs_release(struct inode *inode, struct file *filp)
 +{
 +	struct sysfs_dirent *sd = filp->f_path.dentry->d_fsdata;
 +	struct sysfs_buffer *buffer = filp->private_data;
 +
 +	sysfs_put_open_dirent(sd, buffer);
 +
 +	if (buffer->page)
 +		free_page((unsigned long)buffer->page);
 +	kfree(buffer);
 +
  	return 0;
  }
  
@@@ -626,28 -337,20 +803,32 @@@ EXPORT_SYMBOL_GPL(sysfs_add_file_to_gro
  int sysfs_chmod_file(struct kobject *kobj, const struct attribute *attr,
  		     umode_t mode)
  {
 -	struct kernfs_node *kn;
 +	struct sysfs_dirent *sd;
  	struct iattr newattrs;
 +	const void *ns;
  	int rc;
  
 -	kn = kernfs_find_and_get(kobj->sd, attr->name);
 -	if (!kn)
 -		return -ENOENT;
 +	rc = sysfs_attr_ns(kobj, attr, &ns);
 +	if (rc)
 +		return rc;
  
++<<<<<<< HEAD
 +	mutex_lock(&sysfs_mutex);
 +
 +	rc = -ENOENT;
 +	sd = sysfs_find_dirent(kobj->sd, ns, attr->name);
 +	if (!sd)
 +		goto out;
 +
 +	newattrs.ia_mode = (mode & S_IALLUGO) | (sd->s_mode & ~S_IALLUGO);
++=======
+ 	newattrs.ia_mode = (mode & S_IALLUGO) | (kn->mode & ~S_IALLUGO);
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  	newattrs.ia_valid = ATTR_MODE;
 +	rc = sysfs_sd_setattr(sd, &newattrs);
  
 -	rc = kernfs_setattr(kn, &newattrs);
 -
 -	kernfs_put(kn);
 + out:
 +	mutex_unlock(&sysfs_mutex);
  	return rc;
  }
  EXPORT_SYMBOL_GPL(sysfs_chmod_file);
diff --cc fs/sysfs/symlink.c
index 8c940df97a52,0d48ea911508..000000000000
--- a/fs/sysfs/symlink.c
+++ b/fs/sysfs/symlink.c
@@@ -154,11 -121,17 +154,25 @@@ void sysfs_delete_link(struct kobject *
  			const char *name)
  {
  	const void *ns = NULL;
++<<<<<<< HEAD
 +	spin_lock(&sysfs_assoc_lock);
 +	if (targ->sd && sysfs_ns_type(kobj->sd))
 +		ns = targ->sd->s_ns;
 +	spin_unlock(&sysfs_assoc_lock);
 +	sysfs_hash_and_remove(kobj->sd, ns, name);
++=======
+ 
+ 	/*
+ 	 * We don't own @target and it may be removed at any time.
+ 	 * Synchronize using sysfs_symlink_target_lock.  See
+ 	 * sysfs_remove_dir() for details.
+ 	 */
+ 	spin_lock(&sysfs_symlink_target_lock);
+ 	if (targ->sd && kernfs_ns_enabled(kobj->sd))
+ 		ns = targ->sd->ns;
+ 	spin_unlock(&sysfs_symlink_target_lock);
+ 	kernfs_remove_by_name_ns(kobj->sd, name, ns);
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  }
  
  /**
@@@ -196,131 -170,28 +210,135 @@@ int sysfs_rename_link(struct kobject *k
  	int result;
  
  	if (!kobj)
 -		parent = sysfs_root_kn;
 +		parent_sd = &sysfs_root;
  	else
 -		parent = kobj->sd;
 +		parent_sd = kobj->sd;
  
  	if (targ->sd)
- 		old_ns = targ->sd->s_ns;
+ 		old_ns = targ->sd->ns;
  
  	result = -ENOENT;
 -	kn = kernfs_find_and_get_ns(parent, old, old_ns);
 -	if (!kn)
 +	sd = sysfs_get_dirent(parent_sd, old_ns, old);
 +	if (!sd)
  		goto out;
  
  	result = -EINVAL;
 -	if (sysfs_type(kn) != SYSFS_KOBJ_LINK)
 +	if (sysfs_type(sd) != SYSFS_KOBJ_LINK)
  		goto out;
++<<<<<<< HEAD
 +	if (sd->s_symlink.target_sd->s_dir.kobj != targ)
++=======
+ 	if (kn->symlink.target_kn->priv != targ)
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  		goto out;
  
 -	result = kernfs_rename_ns(kn, parent, new, new_ns);
 +	if (sysfs_ns_type(parent_sd))
 +		new_ns = targ->ktype->namespace(targ);
 +
 +	result = sysfs_rename(sd, parent_sd, new_ns, new);
  
  out:
 -	kernfs_put(kn);
 +	sysfs_put(sd);
  	return result;
  }
 -EXPORT_SYMBOL_GPL(sysfs_rename_link_ns);
 +
 +static int sysfs_get_target_path(struct sysfs_dirent *parent_sd,
 +				 struct sysfs_dirent *target_sd, char *path)
 +{
 +	struct sysfs_dirent *base, *sd;
 +	char *s = path;
 +	int len = 0;
 +
 +	/* go up to the root, stop at the base */
 +	base = parent_sd;
 +	while (base->s_parent) {
 +		sd = target_sd->s_parent;
 +		while (sd->s_parent && base != sd)
 +			sd = sd->s_parent;
 +
 +		if (base == sd)
 +			break;
 +
 +		strcpy(s, "../");
 +		s += 3;
 +		base = base->s_parent;
 +	}
 +
 +	/* determine end of target string for reverse fillup */
 +	sd = target_sd;
 +	while (sd->s_parent && sd != base) {
 +		len += strlen(sd->s_name) + 1;
 +		sd = sd->s_parent;
 +	}
 +
 +	/* check limits */
 +	if (len < 2)
 +		return -EINVAL;
 +	len--;
 +	if ((s - path) + len > PATH_MAX)
 +		return -ENAMETOOLONG;
 +
 +	/* reverse fillup of target string from target to base */
 +	sd = target_sd;
 +	while (sd->s_parent && sd != base) {
 +		int slen = strlen(sd->s_name);
 +
 +		len -= slen;
 +		strncpy(s + len, sd->s_name, slen);
 +		if (len)
 +			s[--len] = '/';
 +
 +		sd = sd->s_parent;
 +	}
 +
 +	return 0;
 +}
 +
 +static int sysfs_getlink(struct dentry *dentry, char * path)
 +{
 +	struct sysfs_dirent *sd = dentry->d_fsdata;
 +	struct sysfs_dirent *parent_sd = sd->s_parent;
 +	struct sysfs_dirent *target_sd = sd->s_symlink.target_sd;
 +	int error;
 +
 +	mutex_lock(&sysfs_mutex);
 +	error = sysfs_get_target_path(parent_sd, target_sd, path);
 +	mutex_unlock(&sysfs_mutex);
 +
 +	return error;
 +}
 +
 +static void *sysfs_follow_link(struct dentry *dentry, struct nameidata *nd)
 +{
 +	int error = -ENOMEM;
 +	unsigned long page = get_zeroed_page(GFP_KERNEL);
 +	if (page) {
 +		error = sysfs_getlink(dentry, (char *) page); 
 +		if (error < 0)
 +			free_page((unsigned long)page);
 +	}
 +	nd_set_link(nd, error ? ERR_PTR(error) : (char *)page);
 +	return NULL;
 +}
 +
 +static void sysfs_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)
 +{
 +	char *page = nd_get_link(nd);
 +	if (!IS_ERR(page))
 +		free_page((unsigned long)page);
 +}
 +
 +const struct inode_operations sysfs_symlink_inode_operations = {
 +	.setxattr	= sysfs_setxattr,
 +	.readlink	= generic_readlink,
 +	.follow_link	= sysfs_follow_link,
 +	.put_link	= sysfs_put_link,
 +	.setattr	= sysfs_setattr,
 +	.getattr	= sysfs_getattr,
 +	.permission	= sysfs_permission,
 +};
 +
 +
 +EXPORT_SYMBOL_GPL(sysfs_create_link);
 +EXPORT_SYMBOL_GPL(sysfs_remove_link);
 +EXPORT_SYMBOL_GPL(sysfs_rename_link);
diff --cc include/linux/kernfs.h
index 254b9e872b09,092469f60e3e..000000000000
--- a/include/linux/kernfs.h
+++ b/include/linux/kernfs.h
@@@ -7,6 -7,350 +7,354 @@@
  #ifndef __LINUX_KERNFS_H
  #define __LINUX_KERNFS_H
  
++<<<<<<< HEAD
 +struct sysfs_dirent;
++=======
+ #include <linux/kernel.h>
+ #include <linux/err.h>
+ #include <linux/list.h>
+ #include <linux/mutex.h>
+ #include <linux/idr.h>
+ #include <linux/lockdep.h>
+ #include <linux/rbtree.h>
+ #include <linux/atomic.h>
+ #include <linux/completion.h>
+ 
+ struct file;
+ struct iattr;
+ struct seq_file;
+ struct vm_area_struct;
+ struct super_block;
+ struct file_system_type;
+ 
+ struct sysfs_open_dirent;
+ struct sysfs_inode_attrs;
+ 
+ enum kernfs_node_type {
+ 	SYSFS_DIR		= 0x0001,
+ 	SYSFS_KOBJ_ATTR		= 0x0002,
+ 	SYSFS_KOBJ_LINK		= 0x0004,
+ };
+ 
+ #define SYSFS_TYPE_MASK		0x000f
+ #define SYSFS_COPY_NAME		(SYSFS_DIR | SYSFS_KOBJ_LINK)
+ #define SYSFS_ACTIVE_REF	SYSFS_KOBJ_ATTR
+ #define SYSFS_FLAG_MASK		~SYSFS_TYPE_MASK
+ 
+ enum kernfs_node_flag {
+ 	SYSFS_FLAG_REMOVED	= 0x0010,
+ 	SYSFS_FLAG_NS		= 0x0020,
+ 	SYSFS_FLAG_HAS_SEQ_SHOW	= 0x0040,
+ 	SYSFS_FLAG_HAS_MMAP	= 0x0080,
+ 	SYSFS_FLAG_LOCKDEP	= 0x0100,
+ };
+ 
+ /* type-specific structures for kernfs_node union members */
+ struct kernfs_elem_dir {
+ 	unsigned long		subdirs;
+ 	/* children rbtree starts here and goes through kn->rb */
+ 	struct rb_root		children;
+ 
+ 	/*
+ 	 * The kernfs hierarchy this directory belongs to.  This fits
+ 	 * better directly in kernfs_node but is here to save space.
+ 	 */
+ 	struct kernfs_root	*root;
+ };
+ 
+ struct kernfs_elem_symlink {
+ 	struct kernfs_node	*target_kn;
+ };
+ 
+ struct kernfs_elem_attr {
+ 	const struct kernfs_ops	*ops;
+ 	struct sysfs_open_dirent *open;
+ 	loff_t			size;
+ };
+ 
+ /*
+  * kernfs_node - the building block of kernfs hierarchy.  Each and every
+  * kernfs node is represented by single kernfs_node.  Most fields are
+  * private to kernfs and shouldn't be accessed directly by kernfs users.
+  *
+  * As long as s_count reference is held, the kernfs_node itself is
+  * accessible.  Dereferencing elem or any other outer entity requires
+  * active reference.
+  */
+ struct kernfs_node {
+ 	atomic_t		count;
+ 	atomic_t		active;
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	struct lockdep_map	dep_map;
+ #endif
+ 	/* the following two fields are published */
+ 	struct kernfs_node	*parent;
+ 	const char		*name;
+ 
+ 	struct rb_node		rb;
+ 
+ 	union {
+ 		struct completion	*completion;
+ 		struct kernfs_node	*removed_list;
+ 	} u;
+ 
+ 	const void		*ns;	/* namespace tag */
+ 	unsigned int		hash;	/* ns + name hash */
+ 	union {
+ 		struct kernfs_elem_dir		dir;
+ 		struct kernfs_elem_symlink	symlink;
+ 		struct kernfs_elem_attr		attr;
+ 	};
+ 
+ 	void			*priv;
+ 
+ 	unsigned short		flags;
+ 	umode_t			mode;
+ 	unsigned int		ino;
+ 	struct sysfs_inode_attrs *iattr;
+ };
+ 
+ struct kernfs_root {
+ 	/* published fields */
+ 	struct kernfs_node	*kn;
+ 
+ 	/* private fields, do not use outside kernfs proper */
+ 	struct ida		ino_ida;
+ };
+ 
+ struct sysfs_open_file {
+ 	/* published fields */
+ 	struct kernfs_node	*kn;
+ 	struct file		*file;
+ 
+ 	/* private fields, do not use outside kernfs proper */
+ 	struct mutex		mutex;
+ 	int			event;
+ 	struct list_head	list;
+ 
+ 	bool			mmapped;
+ 	const struct vm_operations_struct *vm_ops;
+ };
+ 
+ struct kernfs_ops {
+ 	/*
+ 	 * Read is handled by either seq_file or raw_read().
+ 	 *
+ 	 * If seq_show() is present, seq_file path is active.  Other seq
+ 	 * operations are optional and if not implemented, the behavior is
+ 	 * equivalent to single_open().  @sf->private points to the
+ 	 * associated sysfs_open_file.
+ 	 *
+ 	 * read() is bounced through kernel buffer and a read larger than
+ 	 * PAGE_SIZE results in partial operation of PAGE_SIZE.
+ 	 */
+ 	int (*seq_show)(struct seq_file *sf, void *v);
+ 
+ 	void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
+ 	void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
+ 	void (*seq_stop)(struct seq_file *sf, void *v);
+ 
+ 	ssize_t (*read)(struct sysfs_open_file *of, char *buf, size_t bytes,
+ 			loff_t off);
+ 
+ 	/*
+ 	 * write() is bounced through kernel buffer and a write larger than
+ 	 * PAGE_SIZE results in partial operation of PAGE_SIZE.
+ 	 */
+ 	ssize_t (*write)(struct sysfs_open_file *of, char *buf, size_t bytes,
+ 			 loff_t off);
+ 
+ 	int (*mmap)(struct sysfs_open_file *of, struct vm_area_struct *vma);
+ 
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	struct lock_class_key	lockdep_key;
+ #endif
+ };
+ 
+ #ifdef CONFIG_SYSFS
+ 
+ static inline enum kernfs_node_type sysfs_type(struct kernfs_node *kn)
+ {
+ 	return kn->flags & SYSFS_TYPE_MASK;
+ }
+ 
+ /**
+  * kernfs_enable_ns - enable namespace under a directory
+  * @kn: directory of interest, should be empty
+  *
+  * This is to be called right after @kn is created to enable namespace
+  * under it.  All children of @kn must have non-NULL namespace tags and
+  * only the ones which match the super_block's tag will be visible.
+  */
+ static inline void kernfs_enable_ns(struct kernfs_node *kn)
+ {
+ 	WARN_ON_ONCE(sysfs_type(kn) != SYSFS_DIR);
+ 	WARN_ON_ONCE(!RB_EMPTY_ROOT(&kn->dir.children));
+ 	kn->flags |= SYSFS_FLAG_NS;
+ }
+ 
+ /**
+  * kernfs_ns_enabled - test whether namespace is enabled
+  * @kn: the node to test
+  *
+  * Test whether namespace filtering is enabled for the children of @ns.
+  */
+ static inline bool kernfs_ns_enabled(struct kernfs_node *kn)
+ {
+ 	return kn->flags & SYSFS_FLAG_NS;
+ }
+ 
+ struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
+ 					   const char *name, const void *ns);
+ void kernfs_get(struct kernfs_node *kn);
+ void kernfs_put(struct kernfs_node *kn);
+ 
+ struct kernfs_root *kernfs_create_root(void *priv);
+ void kernfs_destroy_root(struct kernfs_root *root);
+ 
+ struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
+ 					 const char *name, void *priv,
+ 					 const void *ns);
+ struct kernfs_node *kernfs_create_file_ns_key(struct kernfs_node *parent,
+ 					      const char *name,
+ 					      umode_t mode, loff_t size,
+ 					      const struct kernfs_ops *ops,
+ 					      void *priv, const void *ns,
+ 					      struct lock_class_key *key);
+ struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
+ 				       const char *name,
+ 				       struct kernfs_node *target);
+ void kernfs_remove(struct kernfs_node *kn);
+ int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
+ 			     const void *ns);
+ int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
+ 		     const char *new_name, const void *new_ns);
+ int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
+ void kernfs_notify(struct kernfs_node *kn);
+ 
+ const void *kernfs_super_ns(struct super_block *sb);
+ struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
+ 			       struct kernfs_root *root, const void *ns);
+ void kernfs_kill_sb(struct super_block *sb);
+ 
+ void kernfs_init(void);
+ 
+ #else	/* CONFIG_SYSFS */
+ 
+ static inline enum kernfs_node_type sysfs_type(struct kernfs_node *kn)
+ { return 0; }	/* whatever */
+ 
+ static inline void kernfs_enable_ns(struct kernfs_node *kn) { }
+ 
+ static inline bool kernfs_ns_enabled(struct kernfs_node *kn)
+ { return false; }
+ 
+ static inline struct kernfs_node *
+ kernfs_find_and_get_ns(struct kernfs_node *parent, const char *name,
+ 		       const void *ns)
+ { return NULL; }
+ 
+ static inline void kernfs_get(struct kernfs_node *kn) { }
+ static inline void kernfs_put(struct kernfs_node *kn) { }
+ 
+ static inline struct kernfs_root *kernfs_create_root(void *priv)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_destroy_root(struct kernfs_root *root) { }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_dir_ns(struct kernfs_node *parent, const char *name, void *priv,
+ 		     const void *ns)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_file_ns_key(struct kernfs_node *parent, const char *name,
+ 			  umode_t mode, loff_t size,
+ 			  const struct kernfs_ops *ops, void *priv,
+ 			  const void *ns, struct lock_class_key *key)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_link(struct kernfs_node *parent, const char *name,
+ 		   struct kernfs_node *target)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_remove(struct kernfs_node *kn) { }
+ 
+ static inline int kernfs_remove_by_name_ns(struct kernfs_node *kn,
+ 					   const char *name, const void *ns)
+ { return -ENOSYS; }
+ 
+ static inline int kernfs_rename_ns(struct kernfs_node *kn,
+ 				   struct kernfs_node *new_parent,
+ 				   const char *new_name, const void *new_ns)
+ { return -ENOSYS; }
+ 
+ static inline int kernfs_setattr(struct kernfs_node *kn,
+ 				 const struct iattr *iattr)
+ { return -ENOSYS; }
+ 
+ static inline void kernfs_notify(struct kernfs_node *kn) { }
+ 
+ static inline const void *kernfs_super_ns(struct super_block *sb)
+ { return NULL; }
+ 
+ static inline struct dentry *
+ kernfs_mount_ns(struct file_system_type *fs_type, int flags,
+ 		struct kernfs_root *root, const void *ns)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_kill_sb(struct super_block *sb) { }
+ 
+ static inline void kernfs_init(void) { }
+ 
+ #endif	/* CONFIG_SYSFS */
+ 
+ static inline struct kernfs_node *
+ kernfs_find_and_get(struct kernfs_node *kn, const char *name)
+ {
+ 	return kernfs_find_and_get_ns(kn, name, NULL);
+ }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_dir(struct kernfs_node *parent, const char *name, void *priv)
+ {
+ 	return kernfs_create_dir_ns(parent, name, priv, NULL);
+ }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
+ 		      umode_t mode, loff_t size, const struct kernfs_ops *ops,
+ 		      void *priv, const void *ns)
+ {
+ 	struct lock_class_key *key = NULL;
+ 
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	key = (struct lock_class_key *)&ops->lockdep_key;
+ #endif
+ 	return kernfs_create_file_ns_key(parent, name, mode, size, ops, priv,
+ 					 ns, key);
+ }
+ 
+ static inline struct kernfs_node *
+ kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
+ 		   loff_t size, const struct kernfs_ops *ops, void *priv)
+ {
+ 	return kernfs_create_file_ns(parent, name, mode, size, ops, priv, NULL);
+ }
+ 
+ static inline int kernfs_remove_by_name(struct kernfs_node *parent,
+ 					const char *name)
+ {
+ 	return kernfs_remove_by_name_ns(parent, name, NULL);
+ }
+ 
+ static inline struct dentry *
+ kernfs_mount(struct file_system_type *fs_type, int flags,
+ 	     struct kernfs_root *root)
+ {
+ 	return kernfs_mount_ns(fs_type, flags, root, NULL);
+ }
++>>>>>>> adc5e8b58f48 (kernfs: drop s_ prefix from kernfs_node members)
  
  #endif	/* __LINUX_KERNFS_H */
* Unmerged path fs/kernfs/kernfs-internal.h
* Unmerged path fs/kernfs/dir.c
* Unmerged path fs/kernfs/file.c
* Unmerged path fs/kernfs/inode.c
* Unmerged path fs/kernfs/kernfs-internal.h
* Unmerged path fs/kernfs/symlink.c
* Unmerged path fs/sysfs/dir.c
* Unmerged path fs/sysfs/file.c
* Unmerged path fs/sysfs/symlink.c
* Unmerged path include/linux/kernfs.h
