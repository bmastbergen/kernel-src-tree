sunrpc: svc_age_temp_xprts_now should not call setsockopt non-tcp transports

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [fs] sunrpc: svc_age_temp_xprts_now should not call setsockopt on non-tcp transports (Scott Mayhew) [1372444]
Rebuild_FUZZ: 98.06%
commit-author Scott Mayhew <smayhew@redhat.com>
commit ea08e39230e898844d9de5b60cdbb30067cebfe7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ea08e392.failed

This fixes the following panic that can occur with NFSoRDMA.

general protection fault: 0000 [#1] SMP
Modules linked in: rpcrdma ib_isert iscsi_target_mod ib_iser libiscsi
scsi_transport_iscsi ib_srpt target_core_mod ib_srp scsi_transport_srp
scsi_tgt ib_ipoib rdma_ucm ib_ucm ib_uverbs ib_umad rdma_cm ib_cm iw_cm
mlx5_ib ib_core intel_powerclamp coretemp kvm_intel kvm sg ioatdma
ipmi_devintf ipmi_ssif dcdbas iTCO_wdt iTCO_vendor_support pcspkr
irqbypass sb_edac shpchp dca crc32_pclmul ghash_clmulni_intel edac_core
lpc_ich aesni_intel lrw gf128mul glue_helper ablk_helper mei_me mei
ipmi_si cryptd wmi ipmi_msghandler acpi_pad acpi_power_meter nfsd
auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs libcrc32c sd_mod
crc_t10dif crct10dif_generic mgag200 i2c_algo_bit drm_kms_helper
syscopyarea sysfillrect sysimgblt ahci fb_sys_fops ttm libahci mlx5_core
tg3 crct10dif_pclmul drm crct10dif_common
ptp i2c_core libata crc32c_intel pps_core fjes dm_mirror dm_region_hash
dm_log dm_mod
CPU: 1 PID: 120 Comm: kworker/1:1 Not tainted 3.10.0-514.el7.x86_64 #1
Hardware name: Dell Inc. PowerEdge R320/0KM5PX, BIOS 2.4.2 01/29/2015
Workqueue: events check_lifetime
task: ffff88031f506dd0 ti: ffff88031f584000 task.ti: ffff88031f584000
RIP: 0010:[<ffffffff8168d847>]  [<ffffffff8168d847>]
_raw_spin_lock_bh+0x17/0x50
RSP: 0018:ffff88031f587ba8  EFLAGS: 00010206
RAX: 0000000000020000 RBX: 20041fac02080072 RCX: ffff88031f587fd8
RDX: 0000000000000000 RSI: 0000000000000000 RDI: 20041fac02080072
RBP: ffff88031f587bb0 R08: 0000000000000008 R09: ffffffff8155be77
R10: ffff880322a59b00 R11: ffffea000bf39f00 R12: 20041fac02080072
R13: 000000000000000d R14: ffff8800c4fbd800 R15: 0000000000000001
FS:  0000000000000000(0000) GS:ffff880322a40000(0000)
knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 00007f3c52d4547e CR3: 00000000019ba000 CR4: 00000000001407e0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
Stack:
20041fac02080002 ffff88031f587bd0 ffffffff81557830 20041fac02080002
ffff88031f587c78 ffff88031f587c40 ffffffff8155ae08 000000010157df32
0000000800000001 ffff88031f587c20 ffffffff81096acb ffffffff81aa37d0
Call Trace:
[<ffffffff81557830>] lock_sock_nested+0x20/0x50
[<ffffffff8155ae08>] sock_setsockopt+0x78/0x940
[<ffffffff81096acb>] ? lock_timer_base.isra.33+0x2b/0x50
[<ffffffff8155397d>] kernel_setsockopt+0x4d/0x50
[<ffffffffa0386284>] svc_age_temp_xprts_now+0x174/0x1e0 [sunrpc]
[<ffffffffa03b681d>] nfsd_inetaddr_event+0x9d/0xd0 [nfsd]
[<ffffffff81691ebc>] notifier_call_chain+0x4c/0x70
[<ffffffff810b687d>] __blocking_notifier_call_chain+0x4d/0x70
[<ffffffff810b68b6>] blocking_notifier_call_chain+0x16/0x20
[<ffffffff815e8538>] __inet_del_ifa+0x168/0x2d0
[<ffffffff815e8cef>] check_lifetime+0x25f/0x270
[<ffffffff810a7f3b>] process_one_work+0x17b/0x470
[<ffffffff810a8d76>] worker_thread+0x126/0x410
[<ffffffff810a8c50>] ? rescuer_thread+0x460/0x460
[<ffffffff810b052f>] kthread+0xcf/0xe0
[<ffffffff810b0460>] ? kthread_create_on_node+0x140/0x140
[<ffffffff81696418>] ret_from_fork+0x58/0x90
[<ffffffff810b0460>] ? kthread_create_on_node+0x140/0x140
Code: ca 75 f1 5d c3 0f 1f 80 00 00 00 00 eb d9 66 0f 1f 44 00 00 0f 1f
44 00 00 55 48 89 e5 53 48 89 fb e8 7e 04 a0 ff b8 00 00 02 00 <f0> 0f
c1 03 89 c2 c1 ea 10 66 39 c2 75 03 5b 5d c3 83 e2 fe 0f
RIP  [<ffffffff8168d847>] _raw_spin_lock_bh+0x17/0x50
RSP <ffff88031f587ba8>

	Signed-off-by: Scott Mayhew <smayhew@redhat.com>
Fixes: c3d4879e ("sunrpc: Add a function to close temporary transports immediately")
	Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit ea08e39230e898844d9de5b60cdbb30067cebfe7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/svc_xprt.h
#	net/sunrpc/svcsock.c
#	net/sunrpc/xprtrdma/svc_rdma_transport.c
diff --cc include/linux/sunrpc/svc_xprt.h
index b7dabc4baafd,e5d193440374..000000000000
--- a/include/linux/sunrpc/svc_xprt.h
+++ b/include/linux/sunrpc/svc_xprt.h
@@@ -25,7 -25,7 +25,11 @@@ struct svc_xprt_ops 
  	void		(*xpo_detach)(struct svc_xprt *);
  	void		(*xpo_free)(struct svc_xprt *);
  	int		(*xpo_secure_port)(struct svc_rqst *);
++<<<<<<< HEAD
 +	void		(*xpo_adjust_wspace)(struct svc_xprt *);
++=======
+ 	void		(*xpo_kill_temp_xprt)(struct svc_xprt *);
++>>>>>>> ea08e39230e8 (sunrpc: svc_age_temp_xprts_now should not call setsockopt non-tcp transports)
  };
  
  struct svc_xprt_class {
diff --cc net/sunrpc/svcsock.c
index f48122e91bfb,a4bc98265d88..000000000000
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@@ -472,35 -435,24 +472,50 @@@ static int svc_tcp_has_wspace(struct sv
  
  	if (test_bit(XPT_LISTENER, &xprt->xpt_flags))
  		return 1;
 -	return !test_bit(SOCK_NOSPACE, &svsk->sk_sock->flags);
 +	required = atomic_read(&xprt->xpt_reserved) + serv->sv_max_mesg;
 +	if (sk_stream_wspace(svsk->sk_sk) >= required ||
 +	    (sk_stream_min_wspace(svsk->sk_sk) == 0 &&
 +	     atomic_read(&xprt->xpt_reserved) == 0))
 +		return 1;
 +	set_bit(SOCK_NOSPACE, &svsk->sk_sock->flags);
 +	return 0;
 +}
 +
 +static void svc_tcp_write_space(struct sock *sk)
 +{
 +	struct svc_sock *svsk = (struct svc_sock *)(sk->sk_user_data);
 +	struct socket *sock = sk->sk_socket;
 +
 +	if (!sk_stream_is_writeable(sk) || !sock)
 +		return;
 +	if (!svsk || svc_tcp_has_wspace(&svsk->sk_xprt))
 +		clear_bit(SOCK_NOSPACE, &sock->flags);
 +	svc_write_space(sk);
 +}
 +
 +static void svc_tcp_adjust_wspace(struct svc_xprt *xprt)
 +{
 +	struct svc_sock *svsk = container_of(xprt, struct svc_sock, sk_xprt);
 +
 +	if (svc_tcp_has_wspace(xprt))
 +		clear_bit(SOCK_NOSPACE, &svsk->sk_sock->flags);
  }
  
+ static void svc_tcp_kill_temp_xprt(struct svc_xprt *xprt)
+ {
+ 	struct svc_sock *svsk;
+ 	struct socket *sock;
+ 	struct linger no_linger = {
+ 		.l_onoff = 1,
+ 		.l_linger = 0,
+ 	};
+ 
+ 	svsk = container_of(xprt, struct svc_sock, sk_xprt);
+ 	sock = svsk->sk_sock;
+ 	kernel_setsockopt(sock, SOL_SOCKET, SO_LINGER,
+ 			  (char *)&no_linger, sizeof(no_linger));
+ }
+ 
  /*
   * See net/ipv6/ip_sockglue.c : ip_cmsg_recv_pktinfo
   */
@@@ -1319,7 -1262,7 +1339,11 @@@ static struct svc_xprt_ops svc_tcp_ops 
  	.xpo_has_wspace = svc_tcp_has_wspace,
  	.xpo_accept = svc_tcp_accept,
  	.xpo_secure_port = svc_sock_secure_port,
++<<<<<<< HEAD
 +	.xpo_adjust_wspace = svc_tcp_adjust_wspace,
++=======
+ 	.xpo_kill_temp_xprt = svc_tcp_kill_temp_xprt,
++>>>>>>> ea08e39230e8 (sunrpc: svc_age_temp_xprts_now should not call setsockopt non-tcp transports)
  };
  
  static struct svc_xprt_class svc_tcp_class = {
diff --cc net/sunrpc/xprtrdma/svc_rdma_transport.c
index 15c8fa3ee794,1334de2715c2..000000000000
--- a/net/sunrpc/xprtrdma/svc_rdma_transport.c
+++ b/net/sunrpc/xprtrdma/svc_rdma_transport.c
@@@ -68,12 -67,7 +68,16 @@@ static void svc_rdma_detach(struct svc_
  static void svc_rdma_free(struct svc_xprt *xprt);
  static int svc_rdma_has_wspace(struct svc_xprt *xprt);
  static int svc_rdma_secure_port(struct svc_rqst *);
++<<<<<<< HEAD
 +static void rq_cq_reap(struct svcxprt_rdma *xprt);
 +static void sq_cq_reap(struct svcxprt_rdma *xprt);
 +
 +static DECLARE_TASKLET(dto_tasklet, dto_tasklet_func, 0UL);
 +static DEFINE_SPINLOCK(dto_lock);
 +static LIST_HEAD(dto_xprt_q);
++=======
+ static void svc_rdma_kill_temp_xprt(struct svc_xprt *);
++>>>>>>> ea08e39230e8 (sunrpc: svc_age_temp_xprts_now should not call setsockopt non-tcp transports)
  
  static struct svc_xprt_ops svc_rdma_ops = {
  	.xpo_create = svc_rdma_create,
* Unmerged path include/linux/sunrpc/svc_xprt.h
diff --git a/net/sunrpc/svc_xprt.c b/net/sunrpc/svc_xprt.c
index f5572e31d518..d5a59a18209a 100644
--- a/net/sunrpc/svc_xprt.c
+++ b/net/sunrpc/svc_xprt.c
@@ -964,14 +964,8 @@ static void svc_age_temp_xprts(unsigned long closure)
 void svc_age_temp_xprts_now(struct svc_serv *serv, struct sockaddr *server_addr)
 {
 	struct svc_xprt *xprt;
-	struct svc_sock *svsk;
-	struct socket *sock;
 	struct list_head *le, *next;
 	LIST_HEAD(to_be_closed);
-	struct linger no_linger = {
-		.l_onoff = 1,
-		.l_linger = 0,
-	};
 
 	spin_lock_bh(&serv->sv_lock);
 	list_for_each_safe(le, next, &serv->sv_tempsocks) {
@@ -989,10 +983,7 @@ void svc_age_temp_xprts_now(struct svc_serv *serv, struct sockaddr *server_addr)
 		list_del_init(le);
 		xprt = list_entry(le, struct svc_xprt, xpt_list);
 		dprintk("svc_age_temp_xprts_now: closing %p\n", xprt);
-		svsk = container_of(xprt, struct svc_sock, sk_xprt);
-		sock = svsk->sk_sock;
-		kernel_setsockopt(sock, SOL_SOCKET, SO_LINGER,
-				  (char *)&no_linger, sizeof(no_linger));
+		xprt->xpt_ops->xpo_kill_temp_xprt(xprt);
 		svc_close_xprt(xprt);
 	}
 }
* Unmerged path net/sunrpc/svcsock.c
* Unmerged path net/sunrpc/xprtrdma/svc_rdma_transport.c
