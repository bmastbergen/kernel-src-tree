net/mlx5e: Support l3/l4 flow type specs in ethtool flow steering

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Support l3/l4 flow type specs in ethtool flow steering (Don Dutile) [1383601 1417284]
Rebuild_FUZZ: 96.83%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit 1174fce8d1410d13b665cb7693250cc789637b9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1174fce8.failed

Add support to add flow steering rules with ethtool
of L3/L4 flow types (ip4/tcp4/udp4).
Those rules will be in higher priority than l2 flow rules, in order
to prefer more specific rules.

Mask is not supported for l3/l4 flow types.

	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1174fce8d1410d13b665cb7693250cc789637b9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 5eea7e35421a,9842594f5980..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -455,26 -493,112 +455,80 @@@ struct mlx5e_vlan_db 
  	bool          filter_disabled;
  };
  
 -struct mlx5e_l2_table {
 -	struct mlx5e_flow_table    ft;
 -	struct hlist_head          netdev_uc[MLX5E_L2_ADDR_HASH_SIZE];
 -	struct hlist_head          netdev_mc[MLX5E_L2_ADDR_HASH_SIZE];
 -	struct mlx5e_l2_rule	   broadcast;
 -	struct mlx5e_l2_rule	   allmulti;
 -	struct mlx5e_l2_rule	   promisc;
 -	bool                       broadcast_enabled;
 -	bool                       allmulti_enabled;
 -	bool                       promisc_enabled;
 +struct mlx5e_vxlan_db {
 +	spinlock_t			lock; /* protect vxlan table */
 +	struct radix_tree_root		tree;
  };
  
 -/* L3/L4 traffic type classifier */
 -struct mlx5e_ttc_table {
 -	struct mlx5e_flow_table  ft;
 -	struct mlx5_flow_rule	 *rules[MLX5E_NUM_TT];
 +struct mlx5e_flow_table {
 +	int num_groups;
 +	struct mlx5_flow_table		*t;
 +	struct mlx5_flow_group		**g;
  };
  
 -#define ARFS_HASH_SHIFT BITS_PER_BYTE
 -#define ARFS_HASH_SIZE BIT(BITS_PER_BYTE)
 -struct arfs_table {
 -	struct mlx5e_flow_table  ft;
 -	struct mlx5_flow_rule    *default_rule;
 -	struct hlist_head	 rules_hash[ARFS_HASH_SIZE];
 +struct mlx5e_flow_tables {
 +	struct mlx5_flow_namespace	*ns;
 +	struct mlx5e_flow_table		vlan;
 +	struct mlx5e_flow_table		main;
  };
  
++<<<<<<< HEAD
 +struct mlx5e_direct_tir {
 +	u32              tirn;
++=======
+ enum  arfs_type {
+ 	ARFS_IPV4_TCP,
+ 	ARFS_IPV6_TCP,
+ 	ARFS_IPV4_UDP,
+ 	ARFS_IPV6_UDP,
+ 	ARFS_NUM_TYPES,
+ };
+ 
+ struct mlx5e_arfs_tables {
+ 	struct arfs_table arfs_tables[ARFS_NUM_TYPES];
+ 	/* Protect aRFS rules list */
+ 	spinlock_t                     arfs_lock;
+ 	struct list_head               rules;
+ 	int                            last_filter_id;
+ 	struct workqueue_struct        *wq;
+ };
+ 
+ /* NIC prio FTS */
+ enum {
+ 	MLX5E_VLAN_FT_LEVEL = 0,
+ 	MLX5E_L2_FT_LEVEL,
+ 	MLX5E_TTC_FT_LEVEL,
+ 	MLX5E_ARFS_FT_LEVEL
+ };
+ 
+ struct mlx5e_ethtool_table {
+ 	struct mlx5_flow_table *ft;
+ 	int                    num_rules;
+ };
+ 
+ #define ETHTOOL_NUM_L3_L4_FTS 7
+ #define ETHTOOL_NUM_L2_FTS 4
+ 
+ struct mlx5e_ethtool_steering {
+ 	struct mlx5e_ethtool_table      l3_l4_ft[ETHTOOL_NUM_L3_L4_FTS];
+ 	struct mlx5e_ethtool_table      l2_ft[ETHTOOL_NUM_L2_FTS];
+ 	struct list_head                rules;
+ 	int                             tot_num_rules;
+ };
+ 
+ struct mlx5e_flow_steering {
+ 	struct mlx5_flow_namespace      *ns;
+ 	struct mlx5e_ethtool_steering   ethtool;
+ 	struct mlx5e_tc_table           tc;
+ 	struct mlx5e_vlan_table         vlan;
+ 	struct mlx5e_l2_table           l2;
+ 	struct mlx5e_ttc_table          ttc;
+ 	struct mlx5e_arfs_tables        arfs;
+ };
+ 
+ struct mlx5e_rqt {
++>>>>>>> 1174fce8d141 (net/mlx5e: Support l3/l4 flow type specs in ethtool flow steering)
  	u32              rqtn;
 -	bool		 enabled;
 -};
 -
 -struct mlx5e_tir {
 -	u32		  tirn;
 -	struct mlx5e_rqt  rqt;
 -	struct list_head  list;
 -};
 -
 -enum {
 -	MLX5E_TC_PRIO = 0,
 -	MLX5E_NIC_PRIO
 -};
 -
 -struct mlx5e_profile {
 -	void	(*init)(struct mlx5_core_dev *mdev,
 -			struct net_device *netdev,
 -			const struct mlx5e_profile *profile, void *ppriv);
 -	void	(*cleanup)(struct mlx5e_priv *priv);
 -	int	(*init_rx)(struct mlx5e_priv *priv);
 -	void	(*cleanup_rx)(struct mlx5e_priv *priv);
 -	int	(*init_tx)(struct mlx5e_priv *priv);
 -	void	(*cleanup_tx)(struct mlx5e_priv *priv);
 -	void	(*enable)(struct mlx5e_priv *priv);
 -	void	(*disable)(struct mlx5e_priv *priv);
 -	void	(*update_stats)(struct mlx5e_priv *priv);
 -	int	(*max_nch)(struct mlx5_core_dev *mdev);
 -	int	max_tc;
  };
  
  struct mlx5e_priv {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index 3b6147aebe10,b0a130479085..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -71,10 -76,14 +71,18 @@@
  #define LEFTOVERS_NUM_PRIOS 1
  
  #define BY_PASS_PRIO_NUM_LEVELS 1
 -#define BY_PASS_MIN_LEVEL (ETHTOOL_MIN_LEVEL + MLX5_BY_PASS_NUM_PRIOS +\
 +#define BY_PASS_MIN_LEVEL (KERNEL_MIN_LEVEL + MLX5_BY_PASS_NUM_PRIOS +\
  			   LEFTOVERS_NUM_PRIOS)
  
++<<<<<<< HEAD
 +#define KERNEL_NIC_PRIO_NUM_LEVELS 2
++=======
+ #define ETHTOOL_PRIO_NUM_LEVELS 1
+ #define ETHTOOL_NUM_PRIOS 10
+ #define ETHTOOL_MIN_LEVEL (KERNEL_MIN_LEVEL + ETHTOOL_NUM_PRIOS)
+ /* Vlan, mac, ttc, aRFS */
+ #define KERNEL_NIC_PRIO_NUM_LEVELS 4
++>>>>>>> 1174fce8d141 (net/mlx5e: Support l3/l4 flow type specs in ethtool flow steering)
  #define KERNEL_NIC_NUM_PRIOS 1
  /* One more level for tc */
  #define KERNEL_MIN_LEVEL (KERNEL_NIC_PRIO_NUM_LEVELS + 1)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs_ethtool.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
