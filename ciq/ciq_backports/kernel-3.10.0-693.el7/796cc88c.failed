hv_netvsc: style cleanups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Stephen Hemminger <sthemmin@microsoft.com>
commit 796cc88c32c1bd1f833d596448ac785a8736e57c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/796cc88c.failed

Fix most of the complaints about the style of the code.
Things like extra blank lines and return statements.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 796cc88c32c1bd1f833d596448ac785a8736e57c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index a9d677181306,fe83de33895d..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -1230,6 -1221,39 +1221,42 @@@ static inline void netvsc_receive_inban
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void netvsc_process_raw_pkt(struct hv_device *device,
+ 				   struct vmbus_channel *channel,
+ 				   struct netvsc_device *net_device,
+ 				   struct net_device *ndev,
+ 				   u64 request_id,
+ 				   struct vmpacket_descriptor *desc)
+ {
+ 	struct nvsp_message *nvmsg;
+ 	struct net_device_context *net_device_ctx = netdev_priv(ndev);
+ 
+ 	nvmsg = (struct nvsp_message *)((unsigned long)
+ 		desc + (desc->offset8 << 3));
+ 
+ 	switch (desc->type) {
+ 	case VM_PKT_COMP:
+ 		netvsc_send_completion(net_device, channel, device, desc);
+ 		break;
+ 
+ 	case VM_PKT_DATA_USING_XFER_PAGES:
+ 		netvsc_receive(net_device, channel, device, desc);
+ 		break;
+ 
+ 	case VM_PKT_DATA_INBAND:
+ 		netvsc_receive_inband(device, net_device_ctx, nvmsg);
+ 		break;
+ 
+ 	default:
+ 		netdev_err(ndev, "unhandled packet type %d, tid %llx\n",
+ 			   desc->type, request_id);
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 796cc88c32c1 (hv_netvsc: style cleanups)
  void netvsc_channel_cb(void *context)
  {
  	int ret;
@@@ -1264,35 -1304,12 +1291,44 @@@
  		if (ret == 0) {
  			if (bytes_recvd > 0) {
  				desc = (struct vmpacket_descriptor *)buffer;
++<<<<<<< HEAD
 +				nvmsg = (struct nvsp_message *)((unsigned long)
 +					 desc + (desc->offset8 << 3));
 +				switch (desc->type) {
 +				case VM_PKT_COMP:
 +					netvsc_send_completion(net_device,
 +								channel,
 +								device, desc);
 +					break;
 +
 +				case VM_PKT_DATA_USING_XFER_PAGES:
 +					netvsc_receive(net_device, channel,
 +						       device, desc);
 +					break;
 +
 +				case VM_PKT_DATA_INBAND:
 +					netvsc_receive_inband(device,
 +							      net_device_ctx,
 +							      nvmsg);
 +					break;
 +
 +				default:
 +					netdev_err(ndev,
 +						   "unhandled packet type %d, "
 +						   "tid %llx len %d\n",
 +						   desc->type, request_id,
 +						   bytes_recvd);
 +					break;
 +				}
 +
++=======
+ 				netvsc_process_raw_pkt(device,
+ 						       channel,
+ 						       net_device,
+ 						       ndev,
+ 						       request_id,
+ 						       desc);
++>>>>>>> 796cc88c32c1 (hv_netvsc: style cleanups)
  			} else {
  				/*
  				 * We are done for this pass.
* Unmerged path drivers/net/hyperv/netvsc.c
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index b5812f064c23..9e057eb5f47d 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -41,7 +41,6 @@
 
 #include "hyperv_net.h"
 
-
 #define RING_SIZE_MIN 64
 #define LINKCHANGE_INT (2 * HZ)
 #define NETVSC_HW_FEATURES	(NETIF_F_RXCSUM | \
@@ -408,7 +407,6 @@ static int netvsc_start_xmit(struct sk_buff *skb, struct net_device *net)
 			FIELD_SIZEOF(struct sk_buff, cb));
 	packet = (struct hv_netvsc_packet *)skb->cb;
 
-
 	packet->q_idx = skb_get_queue_mapping(skb);
 
 	packet->total_data_buflen = skb->len;
@@ -595,7 +593,6 @@ void netvsc_linkstatus_callback(struct hv_device *device_obj,
 	schedule_delayed_work(&ndev_ctx->dwork, 0);
 }
 
-
 static struct sk_buff *netvsc_alloc_recv_skb(struct net_device *net,
 				struct hv_netvsc_packet *packet,
 				struct ndis_tcp_ip_checksum_info *csum_info,
@@ -1300,7 +1297,6 @@ static int netvsc_vf_up(struct net_device *vf_netdev)
 	return NOTIFY_OK;
 }
 
-
 static int netvsc_vf_down(struct net_device *vf_netdev)
 {
 	struct net_device *ndev;
@@ -1334,7 +1330,6 @@ static int netvsc_vf_down(struct net_device *vf_netdev)
 	return NOTIFY_OK;
 }
 
-
 static int netvsc_unregister_vf(struct net_device *vf_netdev)
 {
 	struct net_device *ndev;
@@ -1463,7 +1458,6 @@ static int netvsc_remove(struct hv_device *dev)
 		return 0;
 	}
 
-
 	ndev_ctx = netdev_priv(net);
 	net_device = ndev_ctx->nvdev;
 
@@ -1510,7 +1504,6 @@ static struct  hv_driver netvsc_drv = {
 	.remove = netvsc_remove,
 };
 
-
 /*
  * On Hyper-V, every VF interface is matched with a corresponding
  * synthetic interface. The synthetic interface is presented first
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index 6d52071918a8..45080b42d476 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -721,7 +721,6 @@ static int rndis_filter_set_rss_param(struct rndis_device *rdev, int num_queue)
 	for (i = 0; i < HASH_KEYLEN; i++)
 		keyp[i] = netvsc_hash_key[i];
 
-
 	ret = rndis_filter_send_request(rdev, request);
 	if (ret != 0)
 		goto cleanup;
@@ -739,7 +738,6 @@ cleanup:
 	return ret;
 }
 
-
 static int rndis_filter_query_device_link_status(struct rndis_device *dev)
 {
 	u32 size = sizeof(u32);
@@ -815,7 +813,6 @@ cleanup:
 	return ret;
 }
 
-
 static int rndis_filter_init_device(struct rndis_device *dev)
 {
 	struct rndis_request *request;
@@ -903,7 +900,6 @@ cleanup:
 
 	if (request)
 		put_rndis_request(dev, request);
-	return;
 }
 
 static int rndis_filter_open_device(struct rndis_device *dev)
@@ -973,7 +969,7 @@ static void netvsc_sc_open(struct vmbus_channel *new_sc)
 }
 
 int rndis_filter_device_add(struct hv_device *dev,
-				  void *additional_info)
+			    void *additional_info)
 {
 	int ret;
 	struct net_device *net = hv_get_drvdata(dev);
@@ -1055,7 +1051,6 @@ int rndis_filter_device_add(struct hv_device *dev,
 	offloads.udp_ip_v6_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 	offloads.lso_v2_ipv4 = NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED;
 
-
 	ret = rndis_filter_set_offload_params(net, &offloads);
 	if (ret)
 		goto err_dev_remv;
@@ -1181,7 +1176,6 @@ void rndis_filter_device_remove(struct hv_device *dev)
 	netvsc_device_remove(dev);
 }
 
-
 int rndis_filter_open(struct netvsc_device *nvdev)
 {
 	if (!nvdev)
