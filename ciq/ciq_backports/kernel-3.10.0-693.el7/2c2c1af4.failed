cpufreq: intel_pstate: Fix code ordering in intel_pstate_set_policy()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Fix code ordering in intel_pstate_set_policy() (Prarit Bhargava) [1398072]
Rebuild_FUZZ: 93.02%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit 2c2c1af4497514da1be2b571066859701dd79231
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2c2c1af4.failed

The limits->max_perf is rounded_up but immediately overwritten by
another assignment to limits->max_perf.

Move that operation to the correct location.

While here also added a pr_debug() call in ->set_policy to aid in
debugging.

Fixes: 785ee2788141 (cpufreq: intel_pstate: Fix limits->max_perf rounding error)
	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
[ rjw : Subject & changelog ]
	Cc: 4.4+ <stable@vger.kernel.org> # 4.4+
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 2c2c1af4497514da1be2b571066859701dd79231)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index f7f1d8d36a06,724b9056aa6b..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1082,17 -1456,33 +1082,34 @@@ static int intel_pstate_set_policy(stru
  	if (!policy->cpuinfo.max_freq)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	if (policy->policy == CPUFREQ_POLICY_PERFORMANCE &&
 +	    policy->max >= policy->cpuinfo.max_freq) {
 +		pr_debug("intel_pstate: set performance\n");
++=======
+ 	intel_pstate_clear_update_util_hook(policy->cpu);
+ 
+ 	pr_debug("set_policy cpuinfo.max %u policy->max %u\n",
+ 		 policy->cpuinfo.max_freq, policy->max);
+ 
+ 	cpu = all_cpu_data[0];
+ 	if (cpu->pstate.max_pstate_physical > cpu->pstate.max_pstate &&
+ 	    policy->max < policy->cpuinfo.max_freq &&
+ 	    policy->max > cpu->pstate.max_pstate * cpu->pstate.scaling) {
+ 		pr_debug("policy->max > max non turbo frequency\n");
+ 		policy->max = policy->cpuinfo.max_freq;
+ 	}
+ 
+ 	if (policy->policy == CPUFREQ_POLICY_PERFORMANCE) {
++>>>>>>> 2c2c1af44975 (cpufreq: intel_pstate: Fix code ordering in intel_pstate_set_policy())
  		limits = &performance_limits;
 -		if (policy->max >= policy->cpuinfo.max_freq) {
 -			pr_debug("set performance\n");
 -			intel_pstate_set_performance_limits(limits);
 -			goto out;
 -		}
 -	} else {
 -		pr_debug("set powersave\n");
 -		limits = &powersave_limits;
 +		if (hwp_active)
 +			intel_pstate_hwp_set(policy->cpus);
 +		return 0;
  	}
  
 +	pr_debug("intel_pstate: set powersave\n");
 +	limits = &powersave_limits;
  	limits->min_policy_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
  	limits->min_policy_pct = clamp_t(int, limits->min_policy_pct, 0 , 100);
  	limits->max_policy_pct = DIV_ROUND_UP(policy->max * 100,
@@@ -1113,13 -1502,14 +1129,19 @@@
  	/* Make sure min_perf_pct <= max_perf_pct */
  	limits->min_perf_pct = min(limits->max_perf_pct, limits->min_perf_pct);
  
++<<<<<<< HEAD
 +	limits->min_perf = div_fp(int_tofp(limits->min_perf_pct),
 +				  int_tofp(100));
 +	limits->max_perf = div_fp(int_tofp(limits->max_perf_pct),
 +				  int_tofp(100));
++=======
+ 	limits->min_perf = div_fp(limits->min_perf_pct, 100);
+ 	limits->max_perf = div_fp(limits->max_perf_pct, 100);
+ 	limits->max_perf = round_up(limits->max_perf, FRAC_BITS);
++>>>>>>> 2c2c1af44975 (cpufreq: intel_pstate: Fix code ordering in intel_pstate_set_policy())
  
 - out:
 -	intel_pstate_set_update_util_hook(policy->cpu);
 -
 -	intel_pstate_hwp_set_policy(policy);
 +	if (hwp_active)
 +		intel_pstate_hwp_set(policy->cpus);
  
  	return 0;
  }
* Unmerged path drivers/cpufreq/intel_pstate.c
