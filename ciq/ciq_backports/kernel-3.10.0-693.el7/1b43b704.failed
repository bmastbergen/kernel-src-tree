perf record: Add struct switch_output

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 1b43b70484a9617de5fe2c12e64bea006010ac1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1b43b704.failed

Next patches will add more --switch-output option arguments,
so preparing the data holder.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Acked-by: Wang Nan <wangnan0@huawei.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1483955520-29063-3-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1b43b70484a9617de5fe2c12e64bea006010ac1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
diff --cc tools/perf/builtin-record.c
index 6cb1cbb83a86,f7e805b30527..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -57,6 -66,7 +61,10 @@@ struct record 
  	bool			no_buildid_cache_set;
  	bool			buildid_all;
  	bool			timestamp_filename;
++<<<<<<< HEAD
++=======
+ 	struct switch_output	switch_output;
++>>>>>>> 1b43b70484a9 (perf record: Add struct switch_output)
  	unsigned long long	samples;
  };
  
@@@ -811,10 -844,14 +819,19 @@@ static int __cmd_record(struct record *
  	signal(SIGCHLD, sig_handler);
  	signal(SIGINT, sig_handler);
  	signal(SIGTERM, sig_handler);
 -	signal(SIGSEGV, sigsegv_handler);
  
++<<<<<<< HEAD
 +	if (rec->opts.auxtrace_snapshot_mode) {
 +		signal(SIGUSR2, snapshot_sig_handler);
 +		auxtrace_snapshot_on();
++=======
+ 	if (rec->opts.auxtrace_snapshot_mode || rec->switch_output.signal) {
+ 		signal(SIGUSR2, snapshot_sig_handler);
+ 		if (rec->opts.auxtrace_snapshot_mode)
+ 			trigger_on(&auxtrace_snapshot_trigger);
+ 		if (rec->switch_output.signal)
+ 			trigger_on(&switch_output_trigger);
++>>>>>>> 1b43b70484a9 (perf record: Add struct switch_output)
  	} else {
  		signal(SIGUSR2, SIG_IGN);
  	}
@@@ -1319,6 -1523,10 +1336,13 @@@ static struct option __record_options[
  		    "Record build-id of all DSOs regardless of hits"),
  	OPT_BOOLEAN(0, "timestamp-filename", &record.timestamp_filename,
  		    "append timestamp to output filename"),
++<<<<<<< HEAD
++=======
+ 	OPT_BOOLEAN(0, "switch-output", &record.switch_output.signal,
+ 		    "Switch output when receive SIGUSR2"),
+ 	OPT_BOOLEAN(0, "dry-run", &dry_run,
+ 		    "Parse options then exit"),
++>>>>>>> 1b43b70484a9 (perf record: Add struct switch_output)
  	OPT_END()
  };
  
@@@ -1360,6 -1582,9 +1384,12 @@@ int cmd_record(int argc, const char **a
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (rec->switch_output.signal)
+ 		rec->timestamp_filename = true;
+ 
++>>>>>>> 1b43b70484a9 (perf record: Add struct switch_output)
  	if (!rec->itr) {
  		rec->itr = auxtrace_record__init(rec->evlist, &err);
  		if (err)
@@@ -1385,8 -1631,39 +1415,42 @@@
  "If some relocation was applied (e.g. kexec) symbols may be misresolved\n"
  "even with a suitable vmlinux or kallsyms file.\n\n");
  
 -	if (rec->no_buildid_cache || rec->no_buildid) {
 +	if (rec->no_buildid_cache || rec->no_buildid)
  		disable_buildid_cache();
++<<<<<<< HEAD
++=======
+ 	} else if (rec->switch_output.signal) {
+ 		/*
+ 		 * In 'perf record --switch-output', disable buildid
+ 		 * generation by default to reduce data file switching
+ 		 * overhead. Still generate buildid if they are required
+ 		 * explicitly using
+ 		 *
+ 		 *  perf record --switch-output --no-no-buildid \
+ 		 *              --no-no-buildid-cache
+ 		 *
+ 		 * Following code equals to:
+ 		 *
+ 		 * if ((rec->no_buildid || !rec->no_buildid_set) &&
+ 		 *     (rec->no_buildid_cache || !rec->no_buildid_cache_set))
+ 		 *         disable_buildid_cache();
+ 		 */
+ 		bool disable = true;
+ 
+ 		if (rec->no_buildid_set && !rec->no_buildid)
+ 			disable = false;
+ 		if (rec->no_buildid_cache_set && !rec->no_buildid_cache)
+ 			disable = false;
+ 		if (disable) {
+ 			rec->no_buildid = true;
+ 			rec->no_buildid_cache = true;
+ 			disable_buildid_cache();
+ 		}
+ 	}
+ 
+ 	if (record.opts.overwrite)
+ 		record.opts.tail_synthesize = true;
++>>>>>>> 1b43b70484a9 (perf record: Add struct switch_output)
  
  	if (rec->evlist->nr_entries == 0 &&
  	    perf_evlist__add_default(rec->evlist) < 0) {
* Unmerged path tools/perf/builtin-record.c
