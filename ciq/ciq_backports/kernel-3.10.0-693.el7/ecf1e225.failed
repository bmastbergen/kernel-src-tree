perf trace: Use the syscall raw_syscalls:sys_enter timestamp

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ecf1e2253ea79c6204f4d6a5e756e8fb4aed5a7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ecf1e225.failed

Instead of the one when another syscall takes place while another is being
processed (in another CPU, but we show it serialized, so need to "interrupt"
the other), and also when finally showing the sys_enter + sys_exit + duration,
where we were showing the sample->time for the sys_exit, duh.

Before:

  # perf trace sleep 1
  <SNIP>
     0.373 (   0.001 ms): close(fd: 3                   ) = 0
  1000.626 (1000.211 ms): nanosleep(rqtp: 0x7ffd6ddddfb0) = 0
  1000.653 (   0.003 ms): close(fd: 1                   ) = 0
  1000.657 (   0.002 ms): close(fd: 2                   ) = 0
  1000.667 (   0.000 ms): exit_group(                   )
  #

After:

  # perf trace sleep 1
  <SNIP>
     0.336 (   0.001 ms): close(fd: 3                   ) = 0
     0.373 (1000.086 ms): nanosleep(rqtp: 0x7ffe303e9550) = 0
  1000.481 (   0.002 ms): close(fd: 1                   ) = 0
  1000.485 (   0.001 ms): close(fd: 2                   ) = 0
  1000.494 (   0.000 ms): exit_group(                   )
[root@jouet linux]#

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-ecbzgmu2ni6glc6zkw8p1zmx@git.kernel.org
Fixes: 752fde44fd1c ("perf trace: Support interrupted syscalls")
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ecf1e2253ea79c6204f4d6a5e756e8fb4aed5a7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
diff --cc tools/perf/builtin-trace.c
index faab8a297b30,5f45166c892d..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -1556,8 -1497,8 +1556,13 @@@ static int trace__sys_enter(struct trac
  					   args, trace, thread);
  
  	if (sc->is_exit) {
++<<<<<<< HEAD
 +		if (!trace->duration_filter && !trace->summary_only) {
 +			trace__fprintf_entry_head(trace, thread, 1, sample->time, trace->output);
++=======
+ 		if (!(trace->duration_filter || trace->summary_only || trace->min_stack)) {
+ 			trace__fprintf_entry_head(trace, thread, 1, ttrace->entry_time, trace->output);
++>>>>>>> ecf1e2253ea7 (perf trace: Use the syscall raw_syscalls:sys_enter timestamp)
  			fprintf(trace->output, "%-70s)\n", ttrace->entry_str);
  		}
  	} else {
* Unmerged path tools/perf/builtin-trace.c
