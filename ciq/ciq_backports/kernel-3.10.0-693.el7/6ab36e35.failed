net/mlx5: E-Switch, Add operational mode to the SRIOV e-Switch

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: E-Switch, Add operational mode to the SRIOV e-Switch (Don Dutile) [1383792 1417284]
Rebuild_FUZZ: 96.67%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit 6ab36e35f11244b469cdf3c976c185363f1ce61c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6ab36e35.failed

Define three modes for the SRIOV e-switch operation, none (SRIOV_NONE,
none of the VF vports are enabled), legacy (SRIOV_LEGACY, the current mode)
and sriov offloads (SRIOV_OFFLOADS). Currently, when in SRIOV, only the
legacy mode is supported, where steering rules are of the form:

        destination mac --> VF vport

This patch does not change any functionality.

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6ab36e35f11244b469cdf3c976c185363f1ce61c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index b153747c6dc3,8068dde172e7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@@ -383,10 -401,34 +383,10 @@@ esw_fdb_set_vport_rule(struct mlx5_eswi
  	u8 mac_c[ETH_ALEN];
  
  	eth_broadcast_addr(mac_c);
 -	return __esw_fdb_set_vport_rule(esw, vport, false, mac_c, mac);
 -}
 -
 -static struct mlx5_flow_rule *
 -esw_fdb_set_vport_allmulti_rule(struct mlx5_eswitch *esw, u32 vport)
 -{
 -	u8 mac_c[ETH_ALEN];
 -	u8 mac_v[ETH_ALEN];
 -
 -	eth_zero_addr(mac_c);
 -	eth_zero_addr(mac_v);
 -	mac_c[0] = 0x01;
 -	mac_v[0] = 0x01;
 -	return __esw_fdb_set_vport_rule(esw, vport, false, mac_c, mac_v);
 -}
 -
 -static struct mlx5_flow_rule *
 -esw_fdb_set_vport_promisc_rule(struct mlx5_eswitch *esw, u32 vport)
 -{
 -	u8 mac_c[ETH_ALEN];
 -	u8 mac_v[ETH_ALEN];
 -
 -	eth_zero_addr(mac_c);
 -	eth_zero_addr(mac_v);
 -	return __esw_fdb_set_vport_rule(esw, vport, true, mac_c, mac_v);
 +	return __esw_fdb_set_vport_rule(esw, vport, mac_c, mac);
  }
  
- static int esw_create_fdb_table(struct mlx5_eswitch *esw, int nvports)
+ static int esw_create_legacy_fdb_table(struct mlx5_eswitch *esw, int nvports)
  {
  	int inlen = MLX5_ST_SZ_BYTES(create_flow_group_in);
  	struct mlx5_core_dev *dev = esw->dev;
@@@ -1289,14 -1593,20 +1292,22 @@@ void mlx5_eswitch_disable_sriov(struct 
  	    MLX5_CAP_GEN(esw->dev, port_type) != MLX5_CAP_PORT_TYPE_ETH)
  		return;
  
- 	esw_info(esw->dev, "disable SRIOV: active vports(%d)\n",
- 		 esw->enabled_vports);
+ 	esw_info(esw->dev, "disable SRIOV: active vports(%d) mode(%d)\n",
+ 		 esw->enabled_vports, esw->mode);
  
 -	mc_promisc = esw->mc_promisc;
 -
  	for (i = 0; i < esw->total_vports; i++)
  		esw_disable_vport(esw, i);
  
++<<<<<<< HEAD
 +	esw_destroy_fdb_table(esw);
++=======
+ 	if (mc_promisc && mc_promisc->uplink_rule)
+ 		mlx5_del_flow_rule(mc_promisc->uplink_rule);
+ 
+ 	esw_destroy_legacy_fdb_table(esw);
++>>>>>>> 6ab36e35f112 (net/mlx5: E-Switch, Add operational mode to the SRIOV e-Switch)
  
+ 	esw->mode = SRIOV_NONE;
  	/* VPORT 0 (PF) must be enabled back with non-sriov configuration */
  	esw_enable_vport(esw, 0, UC_ADDR_CHANGE);
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index 6f9da7b7d506,544fbfe8bcbd..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@@ -148,6 -162,8 +158,11 @@@ struct mlx5_eswitch 
  	 * and async SRIOV admin state changes
  	 */
  	struct mutex            state_lock;
++<<<<<<< HEAD
++=======
+ 	struct esw_mc_addr      *mc_promisc;
+ 	int                     mode;
++>>>>>>> 6ab36e35f112 (net/mlx5: E-Switch, Add operational mode to the SRIOV e-Switch)
  };
  
  /* E-Switch API */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/sriov.c b/drivers/net/ethernet/mellanox/mlx5/core/sriov.c
index d6a3f412ba9f..b380a6bc1f85 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/sriov.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/sriov.c
@@ -167,7 +167,7 @@ int mlx5_core_sriov_configure(struct pci_dev *pdev, int num_vfs)
 
 	mlx5_core_init_vfs(dev, num_vfs);
 #ifdef CONFIG_MLX5_CORE_EN
-	mlx5_eswitch_enable_sriov(dev->priv.eswitch, num_vfs);
+	mlx5_eswitch_enable_sriov(dev->priv.eswitch, num_vfs, SRIOV_LEGACY);
 #endif
 
 	return num_vfs;
@@ -209,7 +209,8 @@ int mlx5_sriov_init(struct mlx5_core_dev *dev)
 	mlx5_core_init_vfs(dev, cur_vfs);
 #ifdef CONFIG_MLX5_CORE_EN
 	if (cur_vfs)
-		mlx5_eswitch_enable_sriov(dev->priv.eswitch, cur_vfs);
+		mlx5_eswitch_enable_sriov(dev->priv.eswitch, cur_vfs,
+					  SRIOV_LEGACY);
 #endif
 
 	enable_vfs(dev, cur_vfs);
