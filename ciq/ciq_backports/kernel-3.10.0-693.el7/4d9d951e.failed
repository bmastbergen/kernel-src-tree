locking/spinlocks/mcs: Introduce and use init macro and function for osq locks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jason Low <jason.low2@hp.com>
commit 4d9d951e6b5df85ccfca2c5bd8b4f5c71d256b65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4d9d951e.failed

Currently, we initialize the osq lock by directly setting the lock's values. It
would be preferable if we use an init macro to do the initialization like we do
with other locks.

This patch introduces and uses a macro and function for initializing the osq lock.

	Signed-off-by: Jason Low <jason.low2@hp.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Scott Norton <scott.norton@hp.com>
	Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Waiman Long <waiman.long@hp.com>
	Cc: Davidlohr Bueso <davidlohr@hp.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Tim Chen <tim.c.chen@linux.intel.com>
	Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Cc: Aswin Chandramouleeswaran <aswin@hp.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Chris Mason <clm@fb.com>
	Cc: Josef Bacik <jbacik@fusionio.com>
Link: http://lkml.kernel.org/r/1405358872-3732-4-git-send-email-jason.low2@hp.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 4d9d951e6b5df85ccfca2c5bd8b4f5c71d256b65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/osq_lock.h
#	include/linux/rwsem.h
#	kernel/mutex.c
#	lib/rwsem.c
diff --cc include/linux/rwsem.h
index 8d79708146aa,25cd9aa2f3d7..000000000000
--- a/include/linux/rwsem.h
+++ b/include/linux/rwsem.h
@@@ -70,7 -69,7 +70,11 @@@ static inline int rwsem_is_locked(struc
  	  __RAW_SPIN_LOCK_UNLOCKED(name.wait_lock),	\
  	  LIST_HEAD_INIT((name).wait_list),		\
  	  NULL, /* owner */				\
++<<<<<<< HEAD
 +	  NULL /* mcs lock */                           \
++=======
+ 	  OSQ_LOCK_UNLOCKED /* osq */			\
++>>>>>>> 4d9d951e6b5d (locking/spinlocks/mcs: Introduce and use init macro and function for osq locks)
  	  __RWSEM_DEP_MAP_INIT(name) }
  #else
  #define __RWSEM_INITIALIZER(name)			\
diff --cc kernel/mutex.c
index d8af8cf9c6e9,acca2c1a3c5e..000000000000
--- a/kernel/mutex.c
+++ b/kernel/mutex.c
@@@ -60,7 -60,7 +60,11 @@@ __mutex_init(struct mutex *lock, const 
  	INIT_LIST_HEAD(&lock->wait_list);
  	mutex_clear_owner(lock);
  #ifdef CONFIG_MUTEX_SPIN_ON_OWNER
++<<<<<<< HEAD:kernel/mutex.c
 +	lock->osq = NULL;
++=======
+ 	osq_lock_init(&lock->osq);
++>>>>>>> 4d9d951e6b5d (locking/spinlocks/mcs: Introduce and use init macro and function for osq locks):kernel/locking/mutex.c
  #endif
  
  	debug_mutex_init(lock, name, key);
diff --cc lib/rwsem.c
index c40c7d28661d,7190592c2645..000000000000
--- a/lib/rwsem.c
+++ b/lib/rwsem.c
@@@ -84,7 -84,7 +84,11 @@@ void __init_rwsem(struct rw_semaphore *
  	INIT_LIST_HEAD(&sem->wait_list);
  #ifdef CONFIG_SMP
  	sem->owner = NULL;
++<<<<<<< HEAD:lib/rwsem.c
 +	sem->osq = NULL;
++=======
+ 	osq_lock_init(&sem->osq);
++>>>>>>> 4d9d951e6b5d (locking/spinlocks/mcs: Introduce and use init macro and function for osq locks):kernel/locking/rwsem-xadd.c
  #endif
  }
  
* Unmerged path include/linux/osq_lock.h
* Unmerged path include/linux/osq_lock.h
* Unmerged path include/linux/rwsem.h
* Unmerged path kernel/mutex.c
* Unmerged path lib/rwsem.c
