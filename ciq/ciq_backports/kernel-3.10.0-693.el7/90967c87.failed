autofs4: change log print macros to not insert newline

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Ian Kent <ikent@redhat.com>
commit 90967c87e3383c6b8400803ed8e28f2903e279ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/90967c87.failed

Common kernel coding practice is to include the newline of log prints
within the log text rather than hidden away in a macro.

To avoid introducing inconsistencies as changes are made change the log
macros to not include the newline.

	Signed-off-by: Ian Kent <raven@themaw.net>
	Cc: Joe Perches <joe@perches.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 90967c87e3383c6b8400803ed8e28f2903e279ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/autofs4/expire.c
#	fs/autofs4/inode.c
#	fs/autofs4/root.c
#	fs/autofs4/waitq.c
diff --cc fs/autofs4/expire.c
index 683a5b9ce22a,107a38f2a9ec..000000000000
--- a/fs/autofs4/expire.c
+++ b/fs/autofs4/expire.c
@@@ -41,8 -37,7 +41,12 @@@ static int autofs4_mount_busy(struct vf
  	struct path path = {.mnt = mnt, .dentry = dentry};
  	int status = 1;
  
++<<<<<<< HEAD
 +	DPRINTK("dentry %p %.*s",
 +		dentry, (int)dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("dentry %p %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	path_get(&path);
  
@@@ -188,12 -185,11 +192,16 @@@ again
   * autofs submounts.
   */
  static int autofs4_direct_busy(struct vfsmount *mnt,
 -			       struct dentry *top,
 -			       unsigned long timeout,
 -			       int do_now)
 +				struct dentry *top,
 +				unsigned long timeout,
 +				int do_now)
  {
++<<<<<<< HEAD
 +	DPRINTK("top %p %.*s",
 +		top, (int) top->d_name.len, top->d_name.name);
++=======
+ 	DPRINTK("top %p %pd\n", top, top);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	/* If it's busy update the expiry counters */
  	if (!may_umount_tree(mnt)) {
@@@ -221,8 -220,7 +229,12 @@@ static int autofs4_tree_busy(struct vfs
  	struct autofs_info *top_ino = autofs4_dentry_ino(top);
  	struct dentry *p;
  
++<<<<<<< HEAD
 +	DPRINTK("top %p %.*s",
 +		top, (int)top->d_name.len, top->d_name.name);
++=======
+ 	DPRINTK("top %p %pd\n", top, top);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	/* Negative dentry - give up */
  	if (!simple_positive(top))
@@@ -230,8 -228,7 +242,12 @@@
  
  	p = NULL;
  	while ((p = get_next_positive_dentry(p, top))) {
++<<<<<<< HEAD
 +		DPRINTK("dentry %p %.*s",
 +			p, (int) p->d_name.len, p->d_name.name);
++=======
+ 		DPRINTK("dentry %p %pd\n", p, p);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  		/*
  		 * Is someone visiting anywhere in the subtree ?
@@@ -277,13 -274,11 +293,21 @@@ static struct dentry *autofs4_check_lea
  {
  	struct dentry *p;
  
++<<<<<<< HEAD
 +	DPRINTK("parent %p %.*s",
 +		parent, (int)parent->d_name.len, parent->d_name.name);
 +
 +	p = NULL;
 +	while ((p = get_next_positive_dentry(p, parent))) {
 +		DPRINTK("dentry %p %.*s",
 +			p, (int) p->d_name.len, p->d_name.name);
++=======
+ 	DPRINTK("parent %p %pd\n", parent, parent);
+ 
+ 	p = NULL;
+ 	while ((p = get_next_positive_dentry(p, parent))) {
+ 		DPRINTK("dentry %p %pd\n", p, p);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  		if (d_mountpoint(p)) {
  			/* Can we umount this guy */
@@@ -368,8 -363,7 +392,12 @@@ static struct dentry *should_expire(str
  	 *	   offset (autofs-5.0+).
  	 */
  	if (d_mountpoint(dentry)) {
++<<<<<<< HEAD
 +		DPRINTK("checking mountpoint %p %.*s",
 +			dentry, (int)dentry->d_name.len, dentry->d_name.name);
++=======
+ 		DPRINTK("checking mountpoint %p %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  		/* Can we umount this guy */
  		if (autofs4_mount_busy(mnt, dentry))
@@@ -381,9 -375,8 +409,14 @@@
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	if (dentry->d_inode && S_ISLNK(dentry->d_inode->i_mode)) {
 +		DPRINTK("checking symlink %p %.*s",
 +			dentry, (int)dentry->d_name.len, dentry->d_name.name);
++=======
+ 	if (d_really_is_positive(dentry) && d_is_symlink(dentry)) {
+ 		DPRINTK("checking symlink %p %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  		/*
  		 * A symlink can't be "busy" in the usual sense so
  		 * just check last used for expire timeout.
@@@ -479,8 -473,7 +512,12 @@@ struct dentry *autofs4_expire_indirect(
  	return NULL;
  
  found:
++<<<<<<< HEAD
 +	DPRINTK("returning %p %.*s",
 +		expired, (int)expired->d_name.len, expired->d_name.name);
++=======
+ 	DPRINTK("returning %p %pd\n", expired, expired);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  	ino->flags |= AUTOFS_INF_EXPIRING;
  	smp_mb();
  	ino->flags &= ~AUTOFS_INF_NO_RCU;
@@@ -512,8 -505,7 +549,12 @@@ int autofs4_expire_wait(struct dentry *
  	if (ino->flags & AUTOFS_INF_EXPIRING) {
  		spin_unlock(&sbi->fs_lock);
  
++<<<<<<< HEAD
 +		DPRINTK("waiting for expire %p name=%.*s",
 +			 dentry, dentry->d_name.len, dentry->d_name.name);
++=======
+ 		DPRINTK("waiting for expire %p name=%pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  		status = autofs4_wait(sbi, dentry, NFY_NONE);
  		wait_for_completion(&ino->expire_complete);
diff --cc fs/autofs4/inode.c
index 396178847bf6,75f6ef43b73b..000000000000
--- a/fs/autofs4/inode.c
+++ b/fs/autofs4/inode.c
@@@ -222,7 -221,7 +222,11 @@@ int autofs4_fill_super(struct super_blo
  	sbi = kzalloc(sizeof(*sbi), GFP_KERNEL);
  	if (!sbi)
  		return -ENOMEM;
++<<<<<<< HEAD
 +	DPRINTK("starting up, sbi = %p",sbi);
++=======
+ 	DPRINTK("starting up, sbi = %p\n", sbi);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	s->s_fs_info = sbi;
  	sbi->magic = AUTOFS_SBI_MAGIC;
diff --cc fs/autofs4/root.c
index c8ae501dec34,a71bcf82bcec..000000000000
--- a/fs/autofs4/root.c
+++ b/fs/autofs4/root.c
@@@ -108,8 -108,7 +108,12 @@@ static int autofs4_dir_open(struct inod
  	struct dentry *dentry = file->f_path.dentry;
  	struct autofs_sb_info *sbi = autofs4_sbi(dentry->d_sb);
  
++<<<<<<< HEAD
 +	DPRINTK("file=%p dentry=%p %.*s",
 +		file, dentry, dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("file=%p dentry=%p %pd\n", file, dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	if (autofs4_oz_mode(sbi))
  		goto out;
@@@ -279,10 -278,9 +283,14 @@@ static int autofs4_mount_wait(struct de
  	if (ino->flags & AUTOFS_INF_PENDING) {
  		if (rcu_walk)
  			return -ECHILD;
++<<<<<<< HEAD
 +		DPRINTK("waiting for mount name=%.*s",
 +			dentry->d_name.len, dentry->d_name.name);
++=======
+ 		DPRINTK("waiting for mount name=%pd\n", dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  		status = autofs4_wait(sbi, dentry, NFY_MOUNT);
- 		DPRINTK("mount wait done status=%d", status);
+ 		DPRINTK("mount wait done status=%d\n", status);
  	}
  	ino->last_used = jiffies;
  	return status;
@@@ -340,8 -340,7 +348,12 @@@ static struct vfsmount *autofs4_d_autom
  	struct autofs_info *ino = autofs4_dentry_ino(dentry);
  	int status;
  
++<<<<<<< HEAD
 +	DPRINTK("dentry=%p %.*s",
 +		dentry, dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("dentry=%p %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	/* The daemon never triggers a mount. */
  	if (autofs4_oz_mode(sbi))
@@@ -428,8 -427,7 +440,12 @@@ static int autofs4_d_manage(struct dent
  	struct autofs_info *ino = autofs4_dentry_ino(dentry);
  	int status;
  
++<<<<<<< HEAD
 +	DPRINTK("dentry=%p %.*s",
 +		dentry, dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("dentry=%p %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	/* The daemon never waits. */
  	if (autofs4_oz_mode(sbi)) {
@@@ -504,7 -504,7 +520,11 @@@ static struct dentry *autofs4_lookup(st
  	struct autofs_info *ino;
  	struct dentry *active;
  
++<<<<<<< HEAD
 +	DPRINTK("name = %.*s", dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("name = %pd\n", dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	/* File name too long to exist */
  	if (dentry->d_name.len > NAME_MAX)
@@@ -556,8 -559,7 +576,12 @@@ static int autofs4_dir_symlink(struct i
  	size_t size = strlen(symname);
  	char *cp;
  
++<<<<<<< HEAD
 +	DPRINTK("%s <- %.*s", symname,
 +		dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("%s <- %pd\n", symname, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	if (!autofs4_oz_mode(sbi))
  		return -EACCES;
@@@ -698,9 -698,8 +722,14 @@@ static int autofs4_dir_rmdir(struct ino
  	struct autofs_sb_info *sbi = autofs4_sbi(dir->i_sb);
  	struct autofs_info *ino = autofs4_dentry_ino(dentry);
  	struct autofs_info *p_ino;
++<<<<<<< HEAD
 +	
 +	DPRINTK("dentry %p, removing %.*s",
 +		dentry, dentry->d_name.len, dentry->d_name.name);
++=======
+ 
+ 	DPRINTK("dentry %p, removing %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	if (!autofs4_oz_mode(sbi))
  		return -EACCES;
@@@ -742,8 -742,7 +771,12 @@@ static int autofs4_dir_mkdir(struct ino
  	if (!autofs4_oz_mode(sbi))
  		return -EACCES;
  
++<<<<<<< HEAD
 +	DPRINTK("dentry %p, creating %.*s",
 +		dentry, dentry->d_name.len, dentry->d_name.name);
++=======
+ 	DPRINTK("dentry %p, creating %pd\n", dentry, dentry);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	BUG_ON(!ino);
  
@@@ -871,8 -872,8 +904,13 @@@ static int autofs4_root_ioctl_unlocked(
  	struct autofs_sb_info *sbi = autofs4_sbi(inode->i_sb);
  	void __user *p = (void __user *)arg;
  
++<<<<<<< HEAD
 +	DPRINTK("cmd = 0x%08x, arg = 0x%08lx, sbi = %p, pgrp = %u",
 +		cmd,arg,sbi,task_pgrp_nr(current));
++=======
+ 	DPRINTK("cmd = 0x%08x, arg = 0x%08lx, sbi = %p, pgrp = %u\n",
+ 		cmd, arg, sbi, task_pgrp_nr(current));
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
  	if (_IOC_TYPE(cmd) != _IOC_TYPE(AUTOFS_IOC_FIRST) ||
  	     _IOC_NR(cmd) - _IOC_NR(AUTOFS_IOC_FIRST) >= AUTOFS_IOC_COUNT)
diff --cc fs/autofs4/waitq.c
index 71b3baf9aaca,169ba871b86c..000000000000
--- a/fs/autofs4/waitq.c
+++ b/fs/autofs4/waitq.c
@@@ -102,10 -101,11 +102,16 @@@ static void autofs4_notify_daemon(struc
  	struct file *pipe = NULL;
  	size_t pktsz;
  
++<<<<<<< HEAD
 +	DPRINTK("wait id = 0x%08lx, name = %.*s, type=%d",
 +		(unsigned long) wq->wait_queue_token, wq->name.len, wq->name.name, type);
++=======
+ 	DPRINTK("wait id = 0x%08lx, name = %.*s, type=%d\n",
+ 		(unsigned long) wq->wait_queue_token,
+ 		wq->name.len, wq->name.name, type);
++>>>>>>> 90967c87e338 (autofs4: change log print macros to not insert newline)
  
 -	memset(&pkt, 0, sizeof(pkt)); /* For security reasons */
 +	memset(&pkt,0,sizeof pkt); /* For security reasons */
  
  	pkt.hdr.proto_version = sbi->version;
  	pkt.hdr.type = type;
diff --git a/fs/autofs4/autofs_i.h b/fs/autofs4/autofs_i.h
index 463026a80dfa..3a1513766782 100644
--- a/fs/autofs4/autofs_i.h
+++ b/fs/autofs4/autofs_i.h
@@ -40,15 +40,15 @@
 /* #define DEBUG */
 
 #define DPRINTK(fmt, ...)				\
-	pr_debug(KBUILD_MODNAME ":pid:%d:%s: " fmt "\n",\
+	pr_debug(KBUILD_MODNAME ":pid:%d:%s: " fmt,	\
 		current->pid, __func__, ##__VA_ARGS__)
 
 #define AUTOFS_WARN(fmt, ...)				\
-	pr_warn(KBUILD_MODNAME ":pid:%d:%s: " fmt "\n",	\
+	pr_warn(KBUILD_MODNAME ":pid:%d:%s: " fmt,	\
 		current->pid, __func__, ##__VA_ARGS__)
 
 #define AUTOFS_ERROR(fmt, ...)				\
-	pr_err(KBUILD_MODNAME ":pid:%d:%s: " fmt "\n",	\
+	pr_err(KBUILD_MODNAME ":pid:%d:%s: " fmt,	\
 		current->pid, __func__, ##__VA_ARGS__)
 
 /* Unified info structure.  This is pointed to by both the dentry and
diff --git a/fs/autofs4/dev-ioctl.c b/fs/autofs4/dev-ioctl.c
index 9b97001098b9..308a1bf1282d 100644
--- a/fs/autofs4/dev-ioctl.c
+++ b/fs/autofs4/dev-ioctl.c
@@ -75,7 +75,7 @@ static int check_dev_ioctl_version(int cmd, struct autofs_dev_ioctl *param)
 	if ((AUTOFS_DEV_IOCTL_VERSION_MAJOR != param->ver_major) ||
 	    (AUTOFS_DEV_IOCTL_VERSION_MINOR < param->ver_minor)) {
 		AUTOFS_WARN("ioctl control interface version mismatch: "
-		     "kernel(%u.%u), user(%u.%u), cmd(%d)",
+		     "kernel(%u.%u), user(%u.%u), cmd(%d)\n",
 		     AUTOFS_DEV_IOCTL_VERSION_MAJOR,
 		     AUTOFS_DEV_IOCTL_VERSION_MINOR,
 		     param->ver_major, param->ver_minor, cmd);
@@ -130,7 +130,7 @@ static int validate_dev_ioctl(int cmd, struct autofs_dev_ioctl *param)
 	err = check_dev_ioctl_version(cmd, param);
 	if (err) {
 		AUTOFS_WARN("invalid device control module version "
-		     "supplied for cmd(0x%08x)", cmd);
+		     "supplied for cmd(0x%08x)\n", cmd);
 		goto out;
 	}
 
@@ -138,14 +138,14 @@ static int validate_dev_ioctl(int cmd, struct autofs_dev_ioctl *param)
 		err = invalid_str(param->path, param->size - sizeof(*param));
 		if (err) {
 			AUTOFS_WARN(
-			  "path string terminator missing for cmd(0x%08x)",
+			  "path string terminator missing for cmd(0x%08x)\n",
 			  cmd);
 			goto out;
 		}
 
 		err = check_name(param->path);
 		if (err) {
-			AUTOFS_WARN("invalid path supplied for cmd(0x%08x)",
+			AUTOFS_WARN("invalid path supplied for cmd(0x%08x)\n",
 				    cmd);
 			goto out;
 		}
@@ -370,7 +370,7 @@ static int autofs_dev_ioctl_setpipefd(struct file *fp,
 		new_pid = get_task_pid(current, PIDTYPE_PGID);
 
 		if (ns_of_pid(new_pid) != ns_of_pid(sbi->oz_pgrp)) {
-			AUTOFS_WARN("not allowed to change PID namespace");
+			AUTOFS_WARN("not allowed to change PID namespace\n");
 			err = -EINVAL;
 			goto out;
 		}
@@ -655,7 +655,7 @@ static int _autofs_dev_ioctl(unsigned int command, struct autofs_dev_ioctl __use
 
 	fn = lookup_dev_ioctl(cmd);
 	if (!fn) {
-		AUTOFS_WARN("unknown command 0x%08x", command);
+		AUTOFS_WARN("unknown command 0x%08x\n", command);
 		return -ENOTTY;
 	}
 
@@ -753,7 +753,7 @@ int __init autofs_dev_ioctl_init(void)
 
 	r = misc_register(&_autofs_dev_ioctl_misc);
 	if (r) {
-		AUTOFS_ERROR("misc_register failed for control device");
+		AUTOFS_ERROR("misc_register failed for control device\n");
 		return r;
 	}
 
* Unmerged path fs/autofs4/expire.c
* Unmerged path fs/autofs4/inode.c
* Unmerged path fs/autofs4/root.c
* Unmerged path fs/autofs4/waitq.c
