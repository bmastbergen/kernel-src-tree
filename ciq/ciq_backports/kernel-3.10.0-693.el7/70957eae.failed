macvlan: Fix performance issues with vlan tagged packets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Vlad Yasevich <vyasevich@gmail.com>
commit 70957eaecc2e43308e403c80293bec3d59632412
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/70957eae.failed

Macvlan always turns on offload features that have sofware
fallback (NETIF_GSO_SOFTWARE).  This allows much higher guest-guest
communications over macvtap.

However, macvtap does not turn on these features for vlan tagged traffic.
As a result, depending on the HW that mactap is configured on, the
performance of guest-guest communication over a vlan is very
inconsistent.  If the HW supports TSO/UFO over vlans, then the
performance will be fine.  If not, the the performance will suffer
greatly since the VM may continue using TSO/UFO, and will force the host
segment the traffic and possibly overlow the macvtap queue.

This patch adds the always on offloads to vlan_features.  This
makes sure that any vlan tagged traffic between 2 guest will not
be segmented needlessly.

	Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 70957eaecc2e43308e403c80293bec3d59632412)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/macvlan.c
diff --cc drivers/net/macvlan.c
index bf1001ad5d6c,346ad2ff3998..000000000000
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@@ -571,15 -787,17 +571,23 @@@ static int macvlan_change_mtu(struct ne
   * "super class" of normal network devices; split their locks off into a
   * separate class since they always nest.
   */
 +static struct lock_class_key macvlan_netdev_xmit_lock_key;
  static struct lock_class_key macvlan_netdev_addr_lock_key;
  
++<<<<<<< HEAD
 +#define ALWAYS_ON_FEATURES \
 +	(NETIF_F_SG | NETIF_F_HW_CSUM | NETIF_F_GSO_SOFTWARE | NETIF_F_LLTX)
++=======
+ #define ALWAYS_ON_OFFLOADS \
+ 	(NETIF_F_SG | NETIF_F_HW_CSUM | NETIF_F_GSO_SOFTWARE | \
+ 	 NETIF_F_GSO_ROBUST)
++>>>>>>> 70957eaecc2e (macvlan: Fix performance issues with vlan tagged packets)
+ 
+ #define ALWAYS_ON_FEATURES (ALWAYS_ON_OFFLOADS | NETIF_F_LLTX)
  
  #define MACVLAN_FEATURES \
 -	(NETIF_F_SG | NETIF_F_HW_CSUM | NETIF_F_HIGHDMA | NETIF_F_FRAGLIST | \
 -	 NETIF_F_GSO | NETIF_F_TSO | NETIF_F_UFO | NETIF_F_LRO | \
 +	(NETIF_F_SG | NETIF_F_CSUM_MASK | NETIF_F_HIGHDMA | NETIF_F_FRAGLIST | \
 +	 NETIF_F_GSO | NETIF_F_TSO | NETIF_F_UFO | NETIF_F_GSO_ROBUST | \
  	 NETIF_F_TSO_ECN | NETIF_F_TSO6 | NETIF_F_GRO | NETIF_F_RXCSUM | \
  	 NETIF_F_HW_VLAN_CTAG_FILTER | NETIF_F_HW_VLAN_STAG_FILTER)
  
@@@ -610,8 -827,11 +618,9 @@@ static int macvlan_init(struct net_devi
  				  (lowerdev->state & MACVLAN_STATE_MASK);
  	dev->features 		= lowerdev->features & MACVLAN_FEATURES;
  	dev->features		|= ALWAYS_ON_FEATURES;
 -	dev->hw_features	|= NETIF_F_LRO;
  	dev->vlan_features	= lowerdev->vlan_features & MACVLAN_FEATURES;
+ 	dev->vlan_features	|= ALWAYS_ON_OFFLOADS;
  	dev->gso_max_size	= lowerdev->gso_max_size;
 -	dev->gso_max_segs	= lowerdev->gso_max_segs;
  	dev->hard_header_len	= lowerdev->hard_header_len;
  
  	macvlan_set_lockdep_class(dev);
* Unmerged path drivers/net/macvlan.c
