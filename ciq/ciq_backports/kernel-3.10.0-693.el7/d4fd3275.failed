flow_dissector: fix doc for __skb_get_hash and remove couple of empty lines

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit d4fd32757176d1b03533770ef75aa2b781fa5667
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d4fd3275.failed

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d4fd32757176d1b03533770ef75aa2b781fa5667)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/flow_dissector.c
diff --cc net/core/flow_dissector.c
index 4e48f508edbd,0d9bc3a586ba..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -275,8 -301,47 +275,52 @@@ u32 flow_hash_from_keys(struct flow_key
  }
  EXPORT_SYMBOL(flow_hash_from_keys);
  
++<<<<<<< HEAD
 +/*
 + * __skb_get_hash: calculate a flow hash based on src/dst addresses
++=======
+ static inline u32 ___skb_get_hash(const struct sk_buff *skb,
+ 				  struct flow_keys *keys, u32 keyval)
+ {
+ 	if (!skb_flow_dissect(skb, keys))
+ 		return 0;
+ 
+ 	return __flow_hash_from_keys(keys, keyval);
+ }
+ 
+ struct _flow_keys_digest_data {
+ 	__be16	n_proto;
+ 	u8	ip_proto;
+ 	u8	padding;
+ 	__be32	ports;
+ 	__be32	src;
+ 	__be32	dst;
+ };
+ 
+ void make_flow_keys_digest(struct flow_keys_digest *digest,
+ 			   const struct flow_keys *flow)
+ {
+ 	struct _flow_keys_digest_data *data =
+ 	    (struct _flow_keys_digest_data *)digest;
+ 
+ 	BUILD_BUG_ON(sizeof(*data) > sizeof(*digest));
+ 
+ 	memset(digest, 0, sizeof(*digest));
+ 
+ 	data->n_proto = flow->n_proto;
+ 	data->ip_proto = flow->ip_proto;
+ 	data->ports = flow->ports;
+ 	data->src = flow->src;
+ 	data->dst = flow->dst;
+ }
+ EXPORT_SYMBOL(make_flow_keys_digest);
+ 
+ /**
+  * __skb_get_hash: calculate a flow hash
+  * @skb: sk_buff to calculate flow hash from
+  *
+  * This function calculates a flow hash based on src/dst addresses
++>>>>>>> d4fd32757176 (flow_dissector: fix doc for __skb_get_hash and remove couple of empty lines)
   * and src/dst port numbers.  Sets hash in skb to non-zero hash value
   * on success, zero indicates no valid hash.  Also, sets l4_hash in skb
   * if hash is a canonical 4-tuple hash over transport ports.
@@@ -284,14 -349,17 +328,18 @@@
  void __skb_get_hash(struct sk_buff *skb)
  {
  	struct flow_keys keys;
 -	u32 hash;
  
 -	__flow_hash_secret_init();
 -
 -	hash = ___skb_get_hash(skb, &keys, hashrnd);
 -	if (!hash)
 +	if (!skb_flow_dissect(skb, &keys))
  		return;
- 
  	if (keys.ports)
  		skb->l4_hash = 1;
++<<<<<<< HEAD
 +
 +	skb->hash = __flow_hash_from_keys(&keys);
++=======
+ 	skb->sw_hash = 1;
+ 	skb->hash = hash;
++>>>>>>> d4fd32757176 (flow_dissector: fix doc for __skb_get_hash and remove couple of empty lines)
  }
  EXPORT_SYMBOL(__skb_get_hash);
  
* Unmerged path net/core/flow_dissector.c
