perf hists: Move sort__has_socket into struct perf_hpp_list

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 35a634f76c02b98d31397a589544022b478c0e12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/35a634f7.failed

Now we have sort dimensions private for struct hists, we need to make
dimension booleans hists specific as well.

Moving sort__has_socket into struct perf_hpp_list.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1462276488-26683-6-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 35a634f76c02b98d31397a589544022b478c0e12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.h
#	tools/perf/util/sort.c
#	tools/perf/util/sort.h
diff --cc tools/perf/util/hist.h
index ec76e6bef916,66f313936faf..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -242,6 -242,10 +242,13 @@@ struct perf_hpp_list 
  	struct list_head sorts;
  
  	int need_collapse;
++<<<<<<< HEAD
++=======
+ 	int parent;
+ 	int sym;
+ 	int dso;
+ 	int socket;
++>>>>>>> 35a634f76c02 (perf hists: Move sort__has_socket into struct perf_hpp_list)
  };
  
  extern struct perf_hpp_list perf_hpp_list;
diff --cc tools/perf/util/sort.c
index 331b7cc8c0d0,712a71ad76a6..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -21,10 -21,6 +21,13 @@@ const char	*sort_order
  const char	*field_order;
  regex_t		ignore_callees_regex;
  int		have_ignore_callees = 0;
++<<<<<<< HEAD
 +int		sort__has_parent = 0;
 +int		sort__has_sym = 0;
 +int		sort__has_dso = 0;
 +int		sort__has_socket = 0;
++=======
++>>>>>>> 35a634f76c02 (perf hists: Move sort__has_socket into struct perf_hpp_list)
  int		sort__has_thread = 0;
  int		sort__has_comm = 0;
  enum sort_mode	sort__mode = SORT_MODE__NORMAL;
@@@ -2257,9 -2253,9 +2260,9 @@@ static int sort_dimension__add(struct p
  				sd->entry->se_collapse = sort__sym_sort;
  
  		} else if (sd->entry == &sort_dso) {
 -			list->dso = 1;
 +			sort__has_dso = 1;
  		} else if (sd->entry == &sort_socket) {
- 			sort__has_socket = 1;
+ 			list->socket = 1;
  		} else if (sd->entry == &sort_thread) {
  			sort__has_thread = 1;
  		} else if (sd->entry == &sort_comm) {
diff --cc tools/perf/util/sort.h
index 2e1d27326954,85424a608074..000000000000
--- a/tools/perf/util/sort.h
+++ b/tools/perf/util/sort.h
@@@ -31,10 -31,6 +31,13 @@@ extern const char *parent_pattern
  extern const char default_sort_order[];
  extern regex_t ignore_callees_regex;
  extern int have_ignore_callees;
++<<<<<<< HEAD
 +extern int sort__has_dso;
 +extern int sort__has_parent;
 +extern int sort__has_sym;
 +extern int sort__has_socket;
++=======
++>>>>>>> 35a634f76c02 (perf hists: Move sort__has_socket into struct perf_hpp_list)
  extern int sort__has_thread;
  extern int sort__has_comm;
  extern enum sort_mode sort__mode;
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 362b7663a562..341f77d1a4d1 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -962,7 +962,7 @@ static int __cmd_top(struct perf_top *top)
 	machine__synthesize_threads(&top->session->machines.host, &opts->target,
 				    top->evlist->threads, false, opts->proc_map_timeout);
 
-	if (sort__has_socket) {
+	if (perf_hpp_list.socket) {
 		ret = perf_env__read_cpu_topology_map(&perf_env);
 		if (ret < 0)
 			goto out_err_cpu_topo;
diff --git a/tools/perf/ui/browsers/hists.c b/tools/perf/ui/browsers/hists.c
index 6a4681932ba5..bda7a301fc7d 100644
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@ -2534,7 +2534,7 @@ add_exit_opt(struct hist_browser *browser __maybe_unused,
 static int
 do_zoom_socket(struct hist_browser *browser, struct popup_action *act)
 {
-	if (!sort__has_socket || act->socket < 0)
+	if (!hists__has(browser->hists, socket) || act->socket < 0)
 		return 0;
 
 	if (browser->hists->socket_filter > -1) {
@@ -2556,7 +2556,7 @@ static int
 add_socket_opt(struct hist_browser *browser, struct popup_action *act,
 	       char **optstr, int socket_id)
 {
-	if (!sort__has_socket || socket_id < 0)
+	if (!hists__has(browser->hists, socket) || socket_id < 0)
 		return 0;
 
 	if (asprintf(optstr, "Zoom %s Processor Socket %d",
* Unmerged path tools/perf/util/hist.h
* Unmerged path tools/perf/util/sort.c
* Unmerged path tools/perf/util/sort.h
