HID: wacom: Add battery presence indicator to wireless tablets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom: Add battery presence indicator to wireless tablets (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 95.80%
commit-author Jason Gerecke <killertofu@gmail.com>
commit 71fa641ebbfd2402bdb76d3c6ba7e4a2d1eb2dfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/71fa641e.failed

Declare the POWER_SUPPLY_PROP_PRESENT property to provide userspace
with a way to determine if the battery on a wireless tablet is plugged
in. Although current wireless tablets do not explicitly report this
information, it can be inferred from other state information. In
particular, a battery is assumed to be present if any of the following
are true: a non-zero battery level reported, the battery is reported as
charging, or the tablet is operating wirelessly.

Note: The last condition above may not strictly hold for the Graphire
Wireless (it charges from a DC barrel jack instead of a USB port), but I
do not know what is reported in the no-battery condition.

	Signed-off-by: Jason Gerecke <killertofu@gmail.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 71fa641ebbfd2402bdb76d3c6ba7e4a2d1eb2dfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_sys.c
#	drivers/hid/wacom_wac.c
#	drivers/hid/wacom_wac.h
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,ab7bf84c1ca7..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -1072,6 -945,9 +1072,12 @@@ static void wacom_destroy_leds(struct w
  }
  
  static enum power_supply_property wacom_battery_props[] = {
++<<<<<<< HEAD
++=======
+ 	POWER_SUPPLY_PROP_PRESENT,
+ 	POWER_SUPPLY_PROP_STATUS,
+ 	POWER_SUPPLY_PROP_SCOPE,
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  	POWER_SUPPLY_PROP_CAPACITY
  };
  
@@@ -1083,9 -965,26 +1089,18 @@@ static int wacom_battery_get_property(s
  	int ret = 0;
  
  	switch (psp) {
++<<<<<<< HEAD
++=======
+ 		case POWER_SUPPLY_PROP_PRESENT:
+ 			val->intval = wacom->wacom_wac.bat_connected;
+ 			break;
+ 		case POWER_SUPPLY_PROP_SCOPE:
+ 			val->intval = POWER_SUPPLY_SCOPE_DEVICE;
+ 			break;
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  		case POWER_SUPPLY_PROP_CAPACITY:
  			val->intval =
 -				wacom->wacom_wac.battery_capacity;
 -			break;
 -		case POWER_SUPPLY_PROP_STATUS:
 -			if (wacom->wacom_wac.bat_charging)
 -				val->intval = POWER_SUPPLY_STATUS_CHARGING;
 -			else if (wacom->wacom_wac.battery_capacity == 100 &&
 -				    wacom->wacom_wac.ps_connected)
 -				val->intval = POWER_SUPPLY_STATUS_FULL;
 -			else if (wacom->wacom_wac.ps_connected)
 -				val->intval = POWER_SUPPLY_STATUS_NOT_CHARGING;
 -			else
 -				val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
 +				wacom->wacom_wac.battery_capacity * 100 / 31;
  			break;
  		default:
  			ret = -EINVAL;
diff --cc drivers/hid/wacom_wac.c
index 27dda3639500,92626228d7b5..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -34,6 -34,38 +34,41 @@@
   */
  #define WACOM_CONTACT_AREA_SCALE 2607
  
++<<<<<<< HEAD
++=======
+ /*
+  * Percent of battery capacity for Graphire.
+  * 8th value means AC online and show 100% capacity.
+  */
+ static unsigned short batcap_gr[8] = { 1, 15, 25, 35, 50, 70, 100, 100 };
+ 
+ /*
+  * Percent of battery capacity for Intuos4 WL, AC has a separate bit.
+  */
+ static unsigned short batcap_i4[8] = { 1, 15, 30, 45, 60, 70, 85, 100 };
+ 
+ static void wacom_notify_battery(struct wacom_wac *wacom_wac,
+ 	int bat_capacity, bool bat_charging, bool bat_connected,
+ 	bool ps_connected)
+ {
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 	bool changed = wacom_wac->battery_capacity != bat_capacity  ||
+ 		       wacom_wac->bat_charging     != bat_charging  ||
+ 		       wacom_wac->bat_connected    != bat_connected ||
+ 		       wacom_wac->ps_connected     != ps_connected;
+ 
+ 	if (changed) {
+ 		wacom_wac->battery_capacity = bat_capacity;
+ 		wacom_wac->bat_charging = bat_charging;
+ 		wacom_wac->bat_connected = bat_connected;
+ 		wacom_wac->ps_connected = ps_connected;
+ 
+ 		if (wacom->battery.dev)
+ 			power_supply_changed(&wacom->battery);
+ 	}
+ }
+ 
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  static int wacom_penpartner_irq(struct wacom_wac *wacom)
  {
  	unsigned char *data = wacom->data;
@@@ -317,6 -421,27 +352,30 @@@ static int wacom_graphire_irq(struct wa
  			retval = 1;
  		}
  		break;
++<<<<<<< HEAD
++=======
+ 	case GRAPHIRE_BT:
+ 		prox = data[7] & 0x03;
+ 		if (prox || wacom->id[1]) {
+ 			wacom->id[1] = PAD_DEVICE_ID;
+ 			input_report_key(pad_input, BTN_0, (data[7] & 0x02));
+ 			input_report_key(pad_input, BTN_1, (data[7] & 0x01));
+ 			if (!prox)
+ 				wacom->id[1] = 0;
+ 			input_report_abs(pad_input, ABS_MISC, wacom->id[1]);
+ 			retval = 1;
+ 		}
+ 		break;
+ 	}
+ 
+ 	/* Store current battery capacity and power supply state */
+ 	if (features->type == GRAPHIRE_BT) {
+ 		rw = (data[7] >> 2 & 0x07);
+ 		battery_capacity = batcap_gr[rw];
+ 		ps_connected = rw == 7;
+ 		wacom_notify_battery(wacom, battery_capacity, ps_connected,
+ 				     1, ps_connected);
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  	}
  exit:
  	return retval;
@@@ -853,6 -998,52 +912,55 @@@ static int int_dist(int x1, int y1, in
  	return int_sqrt(x*x + y*y);
  }
  
++<<<<<<< HEAD
++=======
+ static void wacom_intuos_bt_process_data(struct wacom_wac *wacom,
+ 		unsigned char *data)
+ {
+ 	memcpy(wacom->data, data, 10);
+ 	wacom_intuos_irq(wacom);
+ 
+ 	input_sync(wacom->input);
+ 	if (wacom->pad_input)
+ 		input_sync(wacom->pad_input);
+ }
+ 
+ static int wacom_intuos_bt_irq(struct wacom_wac *wacom, size_t len)
+ {
+ 	unsigned char data[WACOM_PKGLEN_MAX];
+ 	int i = 1;
+ 	unsigned power_raw, battery_capacity, bat_charging, ps_connected;
+ 
+ 	memcpy(data, wacom->data, len);
+ 
+ 	switch (data[0]) {
+ 	case 0x04:
+ 		wacom_intuos_bt_process_data(wacom, data + i);
+ 		i += 10;
+ 		/* fall through */
+ 	case 0x03:
+ 		wacom_intuos_bt_process_data(wacom, data + i);
+ 		i += 10;
+ 		wacom_intuos_bt_process_data(wacom, data + i);
+ 		i += 10;
+ 		power_raw = data[i];
+ 		bat_charging = (power_raw & 0x08) ? 1 : 0;
+ 		ps_connected = (power_raw & 0x10) ? 1 : 0;
+ 		battery_capacity = batcap_i4[power_raw & 0x07];
+ 		wacom_notify_battery(wacom, battery_capacity, bat_charging,
+ 				     battery_capacity || bat_charging,
+ 				     ps_connected);
+ 		break;
+ 	default:
+ 		dev_dbg(wacom->input->dev.parent,
+ 				"Unknown report: %d,%d size:%zu\n",
+ 				data[0], data[1], len);
+ 		return 0;
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  static int wacom_24hdt_irq(struct wacom_wac *wacom)
  {
  	struct input_dev *input = wacom->input;
@@@ -1332,17 -1938,61 +1440,72 @@@ static int wacom_wireless_irq(struct wa
  			wacom->pid = pid;
  			wacom_schedule_work(wacom);
  		}
++<<<<<<< HEAD
 +		wacom->battery_capacity = battery;
++=======
+ 
+ 		if (wacom->shared->type)
+ 			wacom_notify_battery(wacom, battery, charging, 1, 0);
+ 
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  	} else if (wacom->pid != 0) {
  		/* disconnected while previously connected */
  		wacom->pid = 0;
  		wacom_schedule_work(wacom);
++<<<<<<< HEAD
 +		wacom->battery_capacity = 0;
++=======
+ 		wacom_notify_battery(wacom, 0, 0, 0, 0);
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  	}
  
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int wacom_status_irq(struct wacom_wac *wacom_wac, size_t len)
+ {
+ 	struct wacom *wacom = container_of(wacom_wac, struct wacom, wacom_wac);
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	unsigned char *data = wacom_wac->data;
+ 
+ 	if (data[0] != WACOM_REPORT_USB)
+ 		return 0;
+ 
+ 	if (features->type == INTUOSHT &&
+ 	    wacom_wac->shared->touch_input &&
+ 	    features->touch_max) {
+ 		input_report_switch(wacom_wac->shared->touch_input,
+ 				    SW_MUTE_DEVICE, data[8] & 0x40);
+ 		input_sync(wacom_wac->shared->touch_input);
+ 	}
+ 
+ 	if (data[9] & 0x02) { /* wireless module is attached */
+ 		int battery = (data[8] & 0x3f) * 100 / 31;
+ 		bool charging = !!(data[8] & 0x80);
+ 
+ 		wacom_notify_battery(wacom_wac, battery, charging,
+ 				     battery || charging, 1);
+ 
+ 		if (!wacom->battery.dev &&
+ 		    !(features->quirks & WACOM_QUIRK_BATTERY)) {
+ 			features->quirks |= WACOM_QUIRK_BATTERY;
+ 			INIT_WORK(&wacom->work, wacom_battery_work);
+ 			wacom_schedule_work(wacom_wac);
+ 		}
+ 	}
+ 	else if ((features->quirks & WACOM_QUIRK_BATTERY) &&
+ 		 wacom->battery.dev) {
+ 		features->quirks &= ~WACOM_QUIRK_BATTERY;
+ 		INIT_WORK(&wacom->work, wacom_battery_work);
+ 		wacom_schedule_work(wacom_wac);
+ 		wacom_notify_battery(wacom_wac, 0, 0, 0, 0);
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  void wacom_wac_irq(struct wacom_wac *wacom_wac, size_t len)
  {
  	bool sync;
diff --cc drivers/hid/wacom_wac.h
index d220d069f329,1c7d8931f1fa..000000000000
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@@ -149,6 -208,15 +149,15 @@@ struct wacom_wac 
  	int pid;
  	int battery_capacity;
  	int num_contacts_left;
++<<<<<<< HEAD
++=======
+ 	int bat_charging;
+ 	int bat_connected;
+ 	int ps_connected;
+ 	u8 bt_features;
+ 	u8 bt_high_speed;
+ 	struct hid_data hid_data;
++>>>>>>> 71fa641ebbfd (HID: wacom: Add battery presence indicator to wireless tablets)
  };
  
  #endif
* Unmerged path drivers/hid/wacom_sys.c
* Unmerged path drivers/hid/wacom_wac.c
* Unmerged path drivers/hid/wacom_wac.h
