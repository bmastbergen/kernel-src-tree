net/xen-netfront: only napi_synchronize() if running

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] xen-netfront: only napi_synchronize() if running (Vitaly Kuznetsov) [1102638]
Rebuild_FUZZ: 96.00%
commit-author Chas Williams <3chas3@gmail.com>
commit 274b045509175db0405c784be85e8cce116e6f7d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/274b0455.failed

If an interface isn't running napi_synchronize() will hang forever.

[  392.248403] rmmod           R  running task        0   359    343 0x00000000
[  392.257671]  ffff88003760fc88 ffff880037193b40 ffff880037193160 ffff88003760fc88
[  392.267644]  ffff880037610000 ffff88003760fcd8 0000000100014c22 ffffffff81f75c40
[  392.277524]  0000000000bc7010 ffff88003760fca8 ffffffff81796927 ffffffff81f75c40
[  392.287323] Call Trace:
[  392.291599]  [<ffffffff81796927>] schedule+0x37/0x90
[  392.298553]  [<ffffffff8179985b>] schedule_timeout+0x14b/0x280
[  392.306421]  [<ffffffff810f91b9>] ? irq_free_descs+0x69/0x80
[  392.314006]  [<ffffffff811084d0>] ? internal_add_timer+0xb0/0xb0
[  392.322125]  [<ffffffff81109d07>] msleep+0x37/0x50
[  392.329037]  [<ffffffffa00ec79a>] xennet_disconnect_backend.isra.24+0xda/0x390 [xen_netfront]
[  392.339658]  [<ffffffffa00ecadc>] xennet_remove+0x2c/0x80 [xen_netfront]
[  392.348516]  [<ffffffff81481c69>] xenbus_dev_remove+0x59/0xc0
[  392.356257]  [<ffffffff814e7217>] __device_release_driver+0x87/0x120
[  392.364645]  [<ffffffff814e7cf8>] driver_detach+0xb8/0xc0
[  392.371989]  [<ffffffff814e6e69>] bus_remove_driver+0x59/0xe0
[  392.379883]  [<ffffffff814e84f0>] driver_unregister+0x30/0x70
[  392.387495]  [<ffffffff814814b2>] xenbus_unregister_driver+0x12/0x20
[  392.395908]  [<ffffffffa00ed89b>] netif_exit+0x10/0x775 [xen_netfront]
[  392.404877]  [<ffffffff81124e08>] SyS_delete_module+0x1d8/0x230
[  392.412804]  [<ffffffff8179a8ee>] system_call_fastpath+0x12/0x71

	Signed-off-by: Chas Williams <3chas3@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 274b045509175db0405c784be85e8cce116e6f7d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/xen-netfront.c
diff --cc drivers/net/xen-netfront.c
index 8896052a2ee0,e27e6d2ea6d2..000000000000
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@@ -1415,30 -1331,40 +1415,61 @@@ static void xennet_end_access(int ref, 
  
  static void xennet_disconnect_backend(struct netfront_info *info)
  {
 -	unsigned int i = 0;
 -	unsigned int num_queues = info->netdev->real_num_tx_queues;
 -
 +	/* Stop old i/f to prevent errors whilst we rebuild the state. */
 +	spin_lock_bh(&info->rx_lock);
 +	spin_lock_irq(&info->tx_lock);
  	netif_carrier_off(info->netdev);
 -
 +	spin_unlock_irq(&info->tx_lock);
 +	spin_unlock_bh(&info->rx_lock);
 +
++<<<<<<< HEAD
 +	if (info->tx_irq && (info->tx_irq == info->rx_irq))
 +		unbind_from_irqhandler(info->tx_irq, info);
 +	if (info->tx_irq && (info->tx_irq != info->rx_irq)) {
 +		unbind_from_irqhandler(info->tx_irq, info);
 +		unbind_from_irqhandler(info->rx_irq, info);
++=======
+ 	for (i = 0; i < num_queues && info->queues; ++i) {
+ 		struct netfront_queue *queue = &info->queues[i];
+ 
+ 		if (queue->tx_irq && (queue->tx_irq == queue->rx_irq))
+ 			unbind_from_irqhandler(queue->tx_irq, queue);
+ 		if (queue->tx_irq && (queue->tx_irq != queue->rx_irq)) {
+ 			unbind_from_irqhandler(queue->tx_irq, queue);
+ 			unbind_from_irqhandler(queue->rx_irq, queue);
+ 		}
+ 		queue->tx_evtchn = queue->rx_evtchn = 0;
+ 		queue->tx_irq = queue->rx_irq = 0;
+ 
+ 		if (netif_running(info->netdev))
+ 			napi_synchronize(&queue->napi);
+ 
+ 		xennet_release_tx_bufs(queue);
+ 		xennet_release_rx_bufs(queue);
+ 		gnttab_free_grant_references(queue->gref_tx_head);
+ 		gnttab_free_grant_references(queue->gref_rx_head);
+ 
+ 		/* End access and free the pages */
+ 		xennet_end_access(queue->tx_ring_ref, queue->tx.sring);
+ 		xennet_end_access(queue->rx_ring_ref, queue->rx.sring);
+ 
+ 		queue->tx_ring_ref = GRANT_INVALID_REF;
+ 		queue->rx_ring_ref = GRANT_INVALID_REF;
+ 		queue->tx.sring = NULL;
+ 		queue->rx.sring = NULL;
++>>>>>>> 274b04550917 (net/xen-netfront: only napi_synchronize() if running)
  	}
 +	info->tx_evtchn = info->rx_evtchn = 0;
 +	info->tx_irq = info->rx_irq = 0;
 +
 +	/* End access and free the pages */
 +	xennet_end_access(info->tx_ring_ref, info->tx.sring);
 +	xennet_end_access(info->rx_ring_ref, info->rx.sring);
 +
 +	info->tx_ring_ref = GRANT_INVALID_REF;
 +	info->rx_ring_ref = GRANT_INVALID_REF;
 +	info->tx.sring = NULL;
 +	info->rx.sring = NULL;
  }
  
  /**
* Unmerged path drivers/net/xen-netfront.c
