kernel/panic.c: add "crash_kexec_post_notifiers" option for kdump after panic_notifers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [kernel] panic: add "crash_kexec_post_notifiers" option for kdump after panic_notifers (Xunlei Pang) [1182375 726846]
Rebuild_FUZZ: 94.48%
commit-author Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
commit f06e5153f4ae2e2f3b0300f0e260e40cb7fefd45
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f06e5153.failed

Add a "crash_kexec_post_notifiers" boot option to run kdump after
running panic_notifiers and dump kmsg.  This can help rare situations
where kdump fails because of unstable crashed kernel or hardware failure
(memory corruption on critical data/code), or the 2nd kernel is already
broken by the 1st kernel (it's a broken behavior, but who can guarantee
that the "crashed" kernel works correctly?).

Usage: add "crash_kexec_post_notifiers" to kernel boot option.

Note that this actually increases risks of the failure of kdump.  This
option should be set only if you worry about the rare case of kdump
failure rather than increasing the chance of success.

	Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Acked-by: Motohiro Kosaki <Motohiro.Kosaki@us.fujitsu.com>
	Acked-by: Vivek Goyal <vgoyal@redhat.com>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
	Cc: Satoru MORIYA <satoru.moriya.br@hitachi.com>
	Cc: Tomoki Sekiyama <tomoki.sekiyama@hds.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f06e5153f4ae2e2f3b0300f0e260e40cb7fefd45)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/kernel-parameters.txt
#	kernel/panic.c
diff --cc Documentation/kernel-parameters.txt
index 9e68cd5687f9,b9f67781c577..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -2331,8 -2361,13 +2331,18 @@@ bytes respectively. Such letter suffixe
  			timeout < 0: reboot immediately
  			Format: <timeout>
  
++<<<<<<< HEAD
 +	panic_on_warn	panic() instead of WARN().  Useful to cause kdump
 +			on a WARN().
++=======
+ 	crash_kexec_post_notifiers
+ 			Run kdump after running panic-notifiers and dumping
+ 			kmsg. This only for the users who doubt kdump always
+ 			succeeds in any situation.
+ 			Note that this also increases risks of kdump failure,
+ 			because some panic notifiers can make the crashed
+ 			kernel more unstable.
++>>>>>>> f06e5153f4ae (kernel/panic.c: add "crash_kexec_post_notifiers" option for kdump after panic_notifers)
  
  	parkbd.port=	[HW] Parallel port number the keyboard adapter is
  			connected to, default is 0.
diff --cc kernel/panic.c
index f3d560562c0c,62e16cef9cc2..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -32,7 -32,7 +32,11 @@@ static unsigned long tainted_mask
  static int pause_on_oops;
  static int pause_on_oops_flag;
  static DEFINE_SPINLOCK(pause_on_oops_lock);
++<<<<<<< HEAD
 +int panic_on_warn __read_mostly;
++=======
+ static bool crash_kexec_post_notifiers;
++>>>>>>> f06e5153f4ae (kernel/panic.c: add "crash_kexec_post_notifiers" option for kdump after panic_notifers)
  
  int panic_timeout = CONFIG_PANIC_TIMEOUT;
  EXPORT_SYMBOL_GPL(panic_timeout);
@@@ -152,11 -113,11 +156,19 @@@ void panic(const char *fmt, ...
  	/*
  	 * If we have crashed and we have a crash kernel loaded let it handle
  	 * everything else.
++<<<<<<< HEAD
 +	 * Do we want to call this before we try to display a message?
 +	 *
 +	 * Bypass the panic_cpu check and call __crash_kexec directly.
 +	 */
 +	__crash_kexec(NULL);
++=======
+ 	 * If we want to run this after calling panic_notifiers, pass
+ 	 * the "crash_kexec_post_notifiers" option to the kernel.
+ 	 */
+ 	if (!crash_kexec_post_notifiers)
+ 		crash_kexec(NULL);
++>>>>>>> f06e5153f4ae (kernel/panic.c: add "crash_kexec_post_notifiers" option for kdump after panic_notifers)
  
  	/*
  	 * Note smp_send_stop is the usual smp shutdown function, which
@@@ -543,8 -483,14 +564,15 @@@ EXPORT_SYMBOL(__stack_chk_fail)
  
  core_param(panic, panic_timeout, int, 0644);
  core_param(pause_on_oops, pause_on_oops, int, 0644);
 +core_param(panic_on_warn, panic_on_warn, int, 0644);
  
+ static int __init setup_crash_kexec_post_notifiers(char *s)
+ {
+ 	crash_kexec_post_notifiers = true;
+ 	return 0;
+ }
+ early_param("crash_kexec_post_notifiers", setup_crash_kexec_post_notifiers);
+ 
  static int __init oops_setup(char *s)
  {
  	if (!s)
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path kernel/panic.c
