mei: drop wr_msg from the mei_dev structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alexander Usyskin <alexander.usyskin@intel.com>
commit c0ff9019ee64101fda8f19338da799fda8217e14
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c0ff9019.failed

The control messages are usually small, around 8 bytes, and can be
allocated on the stack.
Using on stack allocation allows us to drop 'wr_msg' a rather large
buffer reserved in the mei_dev structure and relax contention
of this device global buffer.

	Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit c0ff9019ee64101fda8f19338da799fda8217e14)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/hbm.c
diff --cc drivers/misc/mei/hbm.c
index 780a8d702c64,085f3aafe6fa..000000000000
--- a/drivers/misc/mei/hbm.c
+++ b/drivers/misc/mei/hbm.c
@@@ -294,14 -294,16 +294,23 @@@ static int mei_hbm_enum_clients_req(str
  	int ret;
  
  	/* enumerate clients */
- 	mei_hbm_hdr(mei_hdr, len);
+ 	mei_hbm_hdr(&mei_hdr, len);
  
++<<<<<<< HEAD
 +	enum_req = (struct hbm_host_enum_request *)dev->wr_msg.data;
 +	memset(enum_req, 0, len);
 +	enum_req->hbm_cmd = HOST_ENUM_REQ_CMD;
 +	enum_req->allow_add = dev->hbm_f_dc_supported;
- 
- 	ret = mei_write_message(dev, mei_hdr, dev->wr_msg.data);
++=======
+ 	memset(&enum_req, 0, len);
+ 	enum_req.hbm_cmd = HOST_ENUM_REQ_CMD;
+ 	enum_req.flags |= dev->hbm_f_dc_supported ?
+ 			  MEI_HBM_ENUM_F_ALLOW_ADD : 0;
+ 	enum_req.flags |= dev->hbm_f_ie_supported ?
+ 			  MEI_HBM_ENUM_F_IMMEDIATE_ENUM : 0;
++>>>>>>> c0ff9019ee64 (mei: drop wr_msg from the mei_dev structure)
+ 
+ 	ret = mei_write_message(dev, &mei_hdr, &enum_req);
  	if (ret) {
  		dev_err(dev->dev, "enumeration request write failed: ret = %d.\n",
  			ret);
* Unmerged path drivers/misc/mei/hbm.c
diff --git a/drivers/misc/mei/mei_dev.h b/drivers/misc/mei/mei_dev.h
index 26db6b3d3b61..b9c0bb9ab7d8 100644
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@ -418,7 +418,6 @@ const char *mei_pg_state_str(enum mei_pg_state state);
  *
  * @hbuf_depth  : depth of hardware host/write buffer is slots
  * @hbuf_is_ready : query if the host host/write buffer is ready
- * @wr_msg      : the buffer for hbm control messages
  *
  * @version     : HBM protocol version in use
  * @hbm_f_pg_supported  : hbm feature pgi protocol
@@ -508,12 +507,6 @@ struct mei_device {
 	u8 hbuf_depth;
 	bool hbuf_is_ready;
 
-	/* used for control messages */
-	struct {
-		struct mei_msg_hdr hdr;
-		unsigned char data[128];
-	} wr_msg;
-
 	struct hbm_version version;
 	unsigned int hbm_f_pg_supported:1;
 	unsigned int hbm_f_dc_supported:1;
@@ -731,8 +724,7 @@ static inline size_t mei_hbuf_max_len(const struct mei_device *dev)
 }
 
 static inline int mei_write_message(struct mei_device *dev,
-			struct mei_msg_hdr *hdr,
-			unsigned char *buf)
+			struct mei_msg_hdr *hdr, void *buf)
 {
 	return dev->ops->write(dev, hdr, buf);
 }
