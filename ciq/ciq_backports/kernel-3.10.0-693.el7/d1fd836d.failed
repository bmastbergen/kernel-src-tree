mm: split ET_DYN ASLR from mmap ASLR

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Kees Cook <keescook@chromium.org>
commit d1fd836dcf00d2028c700c7e44d2c23404062c90
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d1fd836d.failed

This fixes the "offset2lib" weakness in ASLR for arm, arm64, mips,
powerpc, and x86.  The problem is that if there is a leak of ASLR from
the executable (ET_DYN), it means a leak of shared library offset as
well (mmap), and vice versa.  Further details and a PoC of this attack
is available here:

  http://cybersecurity.upv.es/attacks/offset2lib/offset2lib.html

With this patch, a PIE linked executable (ET_DYN) has its own ASLR
region:

  $ ./show_mmaps_pie
  54859ccd6000-54859ccd7000 r-xp  ...  /tmp/show_mmaps_pie
  54859ced6000-54859ced7000 r--p  ...  /tmp/show_mmaps_pie
  54859ced7000-54859ced8000 rw-p  ...  /tmp/show_mmaps_pie
  7f75be764000-7f75be91f000 r-xp  ...  /lib/x86_64-linux-gnu/libc.so.6
  7f75be91f000-7f75beb1f000 ---p  ...  /lib/x86_64-linux-gnu/libc.so.6
  7f75beb1f000-7f75beb23000 r--p  ...  /lib/x86_64-linux-gnu/libc.so.6
  7f75beb23000-7f75beb25000 rw-p  ...  /lib/x86_64-linux-gnu/libc.so.6
  7f75beb25000-7f75beb2a000 rw-p  ...
  7f75beb2a000-7f75beb4d000 r-xp  ...  /lib64/ld-linux-x86-64.so.2
  7f75bed45000-7f75bed46000 rw-p  ...
  7f75bed46000-7f75bed47000 r-xp  ...
  7f75bed47000-7f75bed4c000 rw-p  ...
  7f75bed4c000-7f75bed4d000 r--p  ...  /lib64/ld-linux-x86-64.so.2
  7f75bed4d000-7f75bed4e000 rw-p  ...  /lib64/ld-linux-x86-64.so.2
  7f75bed4e000-7f75bed4f000 rw-p  ...
  7fffb3741000-7fffb3762000 rw-p  ...  [stack]
  7fffb377b000-7fffb377d000 r--p  ...  [vvar]
  7fffb377d000-7fffb377f000 r-xp  ...  [vdso]

The change is to add a call the newly created arch_mmap_rnd() into the
ELF loader for handling ET_DYN ASLR in a separate region from mmap ASLR,
as was already done on s390.  Removes CONFIG_BINFMT_ELF_RANDOMIZE_PIE,
which is no longer needed.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Reported-by: Hector Marco-Gisbert <hecmargi@upv.es>
	Cc: Russell King <linux@arm.linux.org.uk>
	Reviewed-by: Ingo Molnar <mingo@kernel.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: "David A. Long" <dave.long@linaro.org>
	Cc: Andrey Ryabinin <a.ryabinin@samsung.com>
	Cc: Arun Chandran <achandran@mvista.com>
	Cc: Yann Droneaud <ydroneaud@opteya.com>
	Cc: Min-Hua Chen <orca.chen@gmail.com>
	Cc: Paul Burton <paul.burton@imgtec.com>
	Cc: Alex Smith <alex@alex-smith.me.uk>
	Cc: Markos Chandras <markos.chandras@imgtec.com>
	Cc: Vineeth Vijayan <vvijayan@mvista.com>
	Cc: Jeff Bailey <jeffbailey@google.com>
	Cc: Michael Holzheu <holzheu@linux.vnet.ibm.com>
	Cc: Ben Hutchings <ben@decadent.org.uk>
	Cc: Behan Webster <behanw@converseincode.com>
	Cc: Ismael Ripoll <iripoll@upv.es>
	Cc: Jan-Simon Mller <dl9pf@gmx.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d1fd836dcf00d2028c700c7e44d2c23404062c90)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/mips/Kconfig
#	arch/powerpc/Kconfig
#	arch/s390/include/asm/elf.h
#	arch/s390/mm/mmap.c
#	arch/x86/Kconfig
#	fs/Kconfig.binfmt
diff --cc arch/mips/Kconfig
index e53e2b40d695,a326c4cb8cf0..000000000000
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@@ -17,7 -22,8 +17,12 @@@ config MIP
  	select HAVE_KPROBES
  	select HAVE_KRETPROBES
  	select HAVE_DEBUG_KMEMLEAK
++<<<<<<< HEAD
 +	select ARCH_BINFMT_ELF_RANDOMIZE_PIE
++=======
+ 	select HAVE_SYSCALL_TRACEPOINTS
+ 	select ARCH_HAS_ELF_RANDOMIZE
++>>>>>>> d1fd836dcf00 (mm: split ET_DYN ASLR from mmap ASLR)
  	select HAVE_ARCH_TRANSPARENT_HUGEPAGE if CPU_SUPPORTS_HUGEPAGES && 64BIT
  	select RTC_LIB if !MACH_LOONGSON
  	select GENERIC_ATOMIC64 if !64BIT
diff --cc arch/powerpc/Kconfig
index e42024f8779d,e99014adf017..000000000000
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@@ -89,9 -86,12 +89,13 @@@ config PP
  	bool
  	default y
  	select ARCH_MIGHT_HAVE_PC_PARPORT
 -	select ARCH_MIGHT_HAVE_PC_SERIO
  	select BINFMT_ELF
++<<<<<<< HEAD
++=======
+ 	select ARCH_HAS_ELF_RANDOMIZE
++>>>>>>> d1fd836dcf00 (mm: split ET_DYN ASLR from mmap ASLR)
  	select OF
  	select OF_EARLY_FLATTREE
 -	select OF_RESERVED_MEM
  	select HAVE_FTRACE_MCOUNT_RECORD
  	select HAVE_DYNAMIC_FTRACE
  	select HAVE_FUNCTION_TRACER
diff --cc arch/s390/include/asm/elf.h
index 0745df3fe60b,ff662155b2c4..000000000000
--- a/arch/s390/include/asm/elf.h
+++ b/arch/s390/include/asm/elf.h
@@@ -164,10 -161,11 +164,18 @@@ extern unsigned int vdso_enabled
  /* This is the location that an ET_DYN program is loaded if exec'ed.  Typical
     use of this is to invoke "./ld.so someprog" to test out a new version of
     the loader.  We need to make sure that it is out of the way of the program
++<<<<<<< HEAD
 +   that it will "exec", and that there is sufficient room for the brk.  */
 +
 +extern unsigned long randomize_et_dyn(void);
 +#define ELF_ET_DYN_BASE		randomize_et_dyn()
++=======
+    that it will "exec", and that there is sufficient room for the brk. 64-bit
+    tasks are aligned to 4GB. */
+ #define ELF_ET_DYN_BASE (is_32bit_task() ? \
+ 				(STACK_TOP / 3 * 2) : \
+ 				(STACK_TOP / 3 * 2) & ~((1UL << 32) - 1))
++>>>>>>> d1fd836dcf00 (mm: split ET_DYN ASLR from mmap ASLR)
  
  /* This yields a mask that user programs can use to figure out what
     instruction set this CPU supports. */
diff --cc arch/s390/mm/mmap.c
index 26158ac9a689,bb3367c5cb0b..000000000000
--- a/arch/s390/mm/mmap.c
+++ b/arch/s390/mm/mmap.c
@@@ -179,17 -177,6 +179,20 @@@ arch_get_unmapped_area_topdown(struct f
  	return addr;
  }
  
++<<<<<<< HEAD
 +unsigned long randomize_et_dyn(void)
 +{
 +	unsigned long base;
 +
 +	base = STACK_TOP / 3 * 2;
 +	if (!is_32bit_task())
 +		/* Align to 4GB */
 +		base &= ~((1UL << 32) - 1);
 +	return base + mmap_rnd();
 +}
 +
++=======
++>>>>>>> d1fd836dcf00 (mm: split ET_DYN ASLR from mmap ASLR)
  #ifndef CONFIG_64BIT
  
  /*
diff --cc arch/x86/Kconfig
index 5162fc083bed,1f7f185934a5..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -82,11 -85,10 +82,15 @@@ config X8
  	select HAVE_CMPXCHG_LOCAL
  	select HAVE_CMPXCHG_DOUBLE
  	select HAVE_ARCH_KMEMCHECK
 -	select HAVE_ARCH_KASAN if X86_64 && SPARSEMEM_VMEMMAP
  	select HAVE_USER_RETURN_NOTIFIER
++<<<<<<< HEAD
 +	select ARCH_BINFMT_ELF_RANDOMIZE_PIE
++=======
+ 	select ARCH_HAS_ELF_RANDOMIZE
++>>>>>>> d1fd836dcf00 (mm: split ET_DYN ASLR from mmap ASLR)
  	select HAVE_ARCH_JUMP_LABEL
 +	select HAVE_TEXT_POKE_SMP
 +	select HAVE_GENERIC_HARDIRQS
  	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
  	select SPARSE_IRQ
  	select GENERIC_FIND_FIRST_BIT
diff --cc fs/Kconfig.binfmt
index 370b24cee4d8,2d0cbbd14cfc..000000000000
--- a/fs/Kconfig.binfmt
+++ b/fs/Kconfig.binfmt
@@@ -27,7 -27,7 +27,11 @@@ config COMPAT_BINFMT_EL
  	bool
  	depends on COMPAT && BINFMT_ELF
  
++<<<<<<< HEAD
 +config ARCH_BINFMT_ELF_RANDOMIZE_PIE
++=======
+ config ARCH_BINFMT_ELF_STATE
++>>>>>>> d1fd836dcf00 (mm: split ET_DYN ASLR from mmap ASLR)
  	bool
  
  config BINFMT_ELF_FDPIC
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index d1387fc4470a..88ec618a914f 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1,7 +1,6 @@
 config ARM
 	bool
 	default y
-	select ARCH_BINFMT_ELF_RANDOMIZE_PIE
 	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
 	select ARCH_HAVE_CUSTOM_GPIO_H
 	select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST
* Unmerged path arch/mips/Kconfig
* Unmerged path arch/powerpc/Kconfig
* Unmerged path arch/s390/include/asm/elf.h
* Unmerged path arch/s390/mm/mmap.c
* Unmerged path arch/x86/Kconfig
* Unmerged path fs/Kconfig.binfmt
diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index e98af17ebbb2..c1c9b66a669b 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -31,6 +31,7 @@
 #include <linux/security.h>
 #include <linux/random.h>
 #include <linux/elf.h>
+#include <linux/elf-randomize.h>
 #include <linux/utsname.h>
 #include <linux/coredump.h>
 #include <linux/sched.h>
@@ -803,21 +804,10 @@ static int load_elf_binary(struct linux_binprm *bprm)
 			 * default mmap base, as well as whatever program they
 			 * might try to exec.  This is because the brk will
 			 * follow the loader, and is not movable.  */
-#ifdef CONFIG_ARCH_BINFMT_ELF_RANDOMIZE_PIE
-			/* Memory randomization might have been switched off
-			 * in runtime via sysctl or explicit setting of
-			 * personality flags.
-			 * If that is the case, retain the original non-zero
-			 * load_bias value in order to establish proper
-			 * non-randomized mappings.
-			 */
+			load_bias = ELF_ET_DYN_BASE - vaddr;
 			if (current->flags & PF_RANDOMIZE)
-				load_bias = 0;
-			else
-				load_bias = ELF_PAGESTART(ELF_ET_DYN_BASE - vaddr);
-#else
-			load_bias = ELF_PAGESTART(ELF_ET_DYN_BASE - vaddr);
-#endif
+				load_bias += arch_mmap_rnd();
+			load_bias = ELF_PAGESTART(load_bias);
 			total_size = total_mapping_size(elf_phdata,
 							loc->elf_ex.e_phnum);
 			if (!total_size) {
