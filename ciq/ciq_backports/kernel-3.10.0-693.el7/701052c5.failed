net/mlx5: Move cached hca caps to designated caps struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Move cached hca caps to designated caps struct (Kamal Heib) [1409101]
Rebuild_FUZZ: 96.30%
commit-author Gal Pressman <galp@mellanox.com>
commit 701052c578195e6e02a22647fa6fd1c90c31dafd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/701052c5.failed

The caps structure consists of hca caps and port/management caps,
all under one roof.

	Signed-off-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 701052c578195e6e02a22647fa6fd1c90c31dafd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mlx5/device.h
#	include/linux/mlx5/driver.h
diff --cc include/linux/mlx5/device.h
index bbf2631a896b,7b6cd67a263f..000000000000
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@@ -1158,12 -970,28 +1158,12 @@@ enum mlx5_cap_type 
  	MLX5_CAP_NUM
  };
  
 -enum mlx5_pcam_reg_groups {
 -	MLX5_PCAM_REGS_5000_TO_507F                 = 0x0,
 -};
 -
 -enum mlx5_pcam_feature_groups {
 -	MLX5_PCAM_FEATURE_ENHANCED_FEATURES         = 0x0,
 -};
 -
 -enum mlx5_mcam_reg_groups {
 -	MLX5_MCAM_REGS_FIRST_128                    = 0x0,
 -};
 -
 -enum mlx5_mcam_feature_groups {
 -	MLX5_MCAM_FEATURE_ENHANCED_FEATURES         = 0x0,
 -};
 -
  /* GET Dev Caps macros */
  #define MLX5_CAP_GEN(mdev, cap) \
- 	MLX5_GET(cmd_hca_cap, mdev->hca_caps_cur[MLX5_CAP_GENERAL], cap)
+ 	MLX5_GET(cmd_hca_cap, mdev->caps.hca_cur[MLX5_CAP_GENERAL], cap)
  
  #define MLX5_CAP_GEN_MAX(mdev, cap) \
- 	MLX5_GET(cmd_hca_cap, mdev->hca_caps_max[MLX5_CAP_GENERAL], cap)
+ 	MLX5_GET(cmd_hca_cap, mdev->caps.hca_max[MLX5_CAP_GENERAL], cap)
  
  #define MLX5_CAP_ETH(mdev, cap) \
  	MLX5_GET(per_protocol_networking_offload_caps,\
@@@ -1171,29 -999,47 +1171,29 @@@
  
  #define MLX5_CAP_ETH_MAX(mdev, cap) \
  	MLX5_GET(per_protocol_networking_offload_caps,\
- 		 mdev->hca_caps_max[MLX5_CAP_ETHERNET_OFFLOADS], cap)
+ 		 mdev->caps.hca_max[MLX5_CAP_ETHERNET_OFFLOADS], cap)
  
  #define MLX5_CAP_ROCE(mdev, cap) \
- 	MLX5_GET(roce_cap, mdev->hca_caps_cur[MLX5_CAP_ROCE], cap)
+ 	MLX5_GET(roce_cap, mdev->caps.hca_cur[MLX5_CAP_ROCE], cap)
  
  #define MLX5_CAP_ROCE_MAX(mdev, cap) \
- 	MLX5_GET(roce_cap, mdev->hca_caps_max[MLX5_CAP_ROCE], cap)
+ 	MLX5_GET(roce_cap, mdev->caps.hca_max[MLX5_CAP_ROCE], cap)
  
  #define MLX5_CAP_ATOMIC(mdev, cap) \
- 	MLX5_GET(atomic_caps, mdev->hca_caps_cur[MLX5_CAP_ATOMIC], cap)
+ 	MLX5_GET(atomic_caps, mdev->caps.hca_cur[MLX5_CAP_ATOMIC], cap)
  
  #define MLX5_CAP_ATOMIC_MAX(mdev, cap) \
- 	MLX5_GET(atomic_caps, mdev->hca_caps_max[MLX5_CAP_ATOMIC], cap)
+ 	MLX5_GET(atomic_caps, mdev->caps.hca_max[MLX5_CAP_ATOMIC], cap)
  
  #define MLX5_CAP_FLOWTABLE(mdev, cap) \
- 	MLX5_GET(flow_table_nic_cap, mdev->hca_caps_cur[MLX5_CAP_FLOW_TABLE], cap)
+ 	MLX5_GET(flow_table_nic_cap, mdev->caps.hca_cur[MLX5_CAP_FLOW_TABLE], cap)
  
  #define MLX5_CAP_FLOWTABLE_MAX(mdev, cap) \
- 	MLX5_GET(flow_table_nic_cap, mdev->hca_caps_max[MLX5_CAP_FLOW_TABLE], cap)
+ 	MLX5_GET(flow_table_nic_cap, mdev->caps.hca_max[MLX5_CAP_FLOW_TABLE], cap)
  
 -#define MLX5_CAP_FLOWTABLE_NIC_RX(mdev, cap) \
 -	MLX5_CAP_FLOWTABLE(mdev, flow_table_properties_nic_receive.cap)
 -
 -#define MLX5_CAP_FLOWTABLE_NIC_RX_MAX(mdev, cap) \
 -	MLX5_CAP_FLOWTABLE_MAX(mdev, flow_table_properties_nic_receive.cap)
 -
 -#define MLX5_CAP_FLOWTABLE_SNIFFER_RX(mdev, cap) \
 -	MLX5_CAP_FLOWTABLE(mdev, flow_table_properties_nic_receive_sniffer.cap)
 -
 -#define MLX5_CAP_FLOWTABLE_SNIFFER_RX_MAX(mdev, cap) \
 -	MLX5_CAP_FLOWTABLE_MAX(mdev, flow_table_properties_nic_receive_sniffer.cap)
 -
 -#define MLX5_CAP_FLOWTABLE_SNIFFER_TX(mdev, cap) \
 -	MLX5_CAP_FLOWTABLE(mdev, flow_table_properties_nic_transmit_sniffer.cap)
 -
 -#define MLX5_CAP_FLOWTABLE_SNIFFER_TX_MAX(mdev, cap) \
 -	MLX5_CAP_FLOWTABLE_MAX(mdev, flow_table_properties_nic_transmit_sniffer.cap)
 -
  #define MLX5_CAP_ESW_FLOWTABLE(mdev, cap) \
  	MLX5_GET(flow_table_eswitch_cap, \
- 		 mdev->hca_caps_cur[MLX5_CAP_ESWITCH_FLOW_TABLE], cap)
+ 		 mdev->caps.hca_cur[MLX5_CAP_ESWITCH_FLOW_TABLE], cap)
  
  #define MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, cap) \
  	MLX5_GET(flow_table_eswitch_cap, \
@@@ -1205,9 -1051,21 +1205,9 @@@
  #define MLX5_CAP_ESW_FLOWTABLE_FDB_MAX(mdev, cap) \
  	MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, flow_table_properties_nic_esw_fdb.cap)
  
 -#define MLX5_CAP_ESW_EGRESS_ACL(mdev, cap) \
 -	MLX5_CAP_ESW_FLOWTABLE(mdev, flow_table_properties_esw_acl_egress.cap)
 -
 -#define MLX5_CAP_ESW_EGRESS_ACL_MAX(mdev, cap) \
 -	MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, flow_table_properties_esw_acl_egress.cap)
 -
 -#define MLX5_CAP_ESW_INGRESS_ACL(mdev, cap) \
 -	MLX5_CAP_ESW_FLOWTABLE(mdev, flow_table_properties_esw_acl_ingress.cap)
 -
 -#define MLX5_CAP_ESW_INGRESS_ACL_MAX(mdev, cap) \
 -	MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, flow_table_properties_esw_acl_ingress.cap)
 -
  #define MLX5_CAP_ESW(mdev, cap) \
  	MLX5_GET(e_switch_cap, \
- 		 mdev->hca_caps_cur[MLX5_CAP_ESWITCH], cap)
+ 		 mdev->caps.hca_cur[MLX5_CAP_ESWITCH], cap)
  
  #define MLX5_CAP_ESW_MAX(mdev, cap) \
  	MLX5_GET(e_switch_cap, \
@@@ -1218,8 -1076,17 +1218,20 @@@
  
  #define MLX5_CAP_VECTOR_CALC(mdev, cap) \
  	MLX5_GET(vector_calc_cap, \
- 		 mdev->hca_caps_cur[MLX5_CAP_VECTOR_CALC], cap)
+ 		 mdev->caps.hca_cur[MLX5_CAP_VECTOR_CALC], cap)
  
++<<<<<<< HEAD
++=======
+ #define MLX5_CAP_QOS(mdev, cap)\
+ 	MLX5_GET(qos_cap, mdev->caps.hca_cur[MLX5_CAP_QOS], cap)
+ 
+ #define MLX5_CAP_PCAM_FEATURE(mdev, fld) \
+ 	MLX5_GET(pcam_reg, (mdev)->caps.pcam, feature_cap_mask.enhanced_features.fld)
+ 
+ #define MLX5_CAP_MCAM_FEATURE(mdev, fld) \
+ 	MLX5_GET(mcam_reg, (mdev)->caps.mcam, mng_feature_cap_mask.enhanced_features.fld)
+ 
++>>>>>>> 701052c57819 (net/mlx5: Move cached hca caps to designated caps struct)
  enum {
  	MLX5_CMD_STAT_OK			= 0x0,
  	MLX5_CMD_STAT_INT_ERR			= 0x1,
diff --cc include/linux/mlx5/driver.h
index 2ad7fbd29d14,1bc4641734da..000000000000
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@@ -567,8 -738,12 +567,17 @@@ struct mlx5_core_dev 
  	char			board_id[MLX5_BOARD_ID_LEN];
  	struct mlx5_cmd		cmd;
  	struct mlx5_port_caps	port_caps[MLX5_MAX_PORTS];
++<<<<<<< HEAD
 +	u32 hca_caps_cur[MLX5_CAP_NUM][MLX5_UN_SZ_DW(hca_cap_union)];
 +	u32 hca_caps_max[MLX5_CAP_NUM][MLX5_UN_SZ_DW(hca_cap_union)];
++=======
+ 	struct {
+ 		u32 hca_cur[MLX5_CAP_NUM][MLX5_UN_SZ_DW(hca_cap_union)];
+ 		u32 hca_max[MLX5_CAP_NUM][MLX5_UN_SZ_DW(hca_cap_union)];
+ 		u32 pcam[MLX5_ST_SZ_DW(pcam_reg)];
+ 		u32 mcam[MLX5_ST_SZ_DW(mcam_reg)];
+ 	} caps;
++>>>>>>> 701052c57819 (net/mlx5: Move cached hca caps to designated caps struct)
  	phys_addr_t		iseg_base;
  	struct mlx5_init_seg __iomem *iseg;
  	enum mlx5_device_state	state;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index b32d85f4e0ff..4ee51edf7698 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@ -1409,7 +1409,7 @@ static int create_leaf_prios(struct mlx5_flow_namespace *ns, int prio,
 
 #define FLOW_TABLE_BIT_SZ 1
 #define GET_FLOW_TABLE_CAP(dev, offset) \
-	((be32_to_cpu(*((__be32 *)(dev->hca_caps_cur[MLX5_CAP_FLOW_TABLE]) +	\
+	((be32_to_cpu(*((__be32 *)(dev->caps.hca_cur[MLX5_CAP_FLOW_TABLE]) +	\
 			offset / 32)) >>					\
 	  (32 - FLOW_TABLE_BIT_SZ - (offset & 0x1f))) & FLOW_TABLE_BIT_SZ)
 static bool has_required_caps(struct mlx5_core_dev *dev, struct node_caps *caps)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/main.c b/drivers/net/ethernet/mellanox/mlx5/core/main.c
index 6ca5c910701a..d110c91dfc64 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -411,11 +411,11 @@ static int mlx5_core_get_caps_mode(struct mlx5_core_dev *dev,
 
 	switch (cap_mode) {
 	case HCA_CAP_OPMOD_GET_MAX:
-		memcpy(dev->hca_caps_max[cap_type], hca_caps,
+		memcpy(dev->caps.hca_max[cap_type], hca_caps,
 		       MLX5_UN_SZ_BYTES(hca_cap_union));
 		break;
 	case HCA_CAP_OPMOD_GET_CUR:
-		memcpy(dev->hca_caps_cur[cap_type], hca_caps,
+		memcpy(dev->caps.hca_cur[cap_type], hca_caps,
 		       MLX5_UN_SZ_BYTES(hca_cap_union));
 		break;
 	default:
@@ -515,7 +515,7 @@ static int handle_hca_cap(struct mlx5_core_dev *dev)
 
 	set_hca_cap = MLX5_ADDR_OF(set_hca_cap_in, set_ctx,
 				   capability);
-	memcpy(set_hca_cap, dev->hca_caps_cur[MLX5_CAP_GENERAL],
+	memcpy(set_hca_cap, dev->caps.hca_cur[MLX5_CAP_GENERAL],
 	       MLX5_ST_SZ_BYTES(cmd_hca_cap));
 
 	mlx5_core_dbg(dev, "Current Pkey table size %d Setting new size %d\n",
* Unmerged path include/linux/mlx5/device.h
* Unmerged path include/linux/mlx5/driver.h
