Input: wacom - handle Intuos 4 BT in wacom.ko

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 81af7e61a774e687ed4a7f37992ef75da57c5ddf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/81af7e61.failed

A good point of this change is that now, the Intuos4 bluetooth can handle
the different tools (artpen, airbrush, mice), and we get a common interface
between USB and BT for accessing the LEDs/OLEDs.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Reviewed-by: Ping Cheng <pingc@wacom.com>
	Tested-by: Przemo Firszt <przemo@firszt.eu>
	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit 81af7e61a774e687ed4a7f37992ef75da57c5ddf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-core.c
#	drivers/hid/hid-wacom.c
#	drivers/hid/wacom_sys.c
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/hid-core.c
index 41a4a456d195,b3181ea8f860..000000000000
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@@ -1990,8 -1942,6 +1990,11 @@@ static const struct hid_device_id hid_h
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WISEGROUP_LTD, USB_DEVICE_ID_SUPER_JOY_BOX_3_PRO) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WISEGROUP_LTD, USB_DEVICE_ID_SUPER_DUAL_BOX_PRO) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WISEGROUP_LTD, USB_DEVICE_ID_SUPER_JOY_BOX_5_PRO) },
++<<<<<<< HEAD
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_WACOM, USB_DEVICE_ID_WACOM_GRAPHIRE_BLUETOOTH) },
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_WACOM, USB_DEVICE_ID_WACOM_INTUOS4_BLUETOOTH) },
++=======
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WALTOP, USB_DEVICE_ID_WALTOP_SLIM_TABLET_5_8_INCH) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WALTOP, USB_DEVICE_ID_WALTOP_SLIM_TABLET_12_1_INCH) },
  	{ HID_USB_DEVICE(USB_VENDOR_ID_WALTOP, USB_DEVICE_ID_WALTOP_Q_PAD) },
diff --cc drivers/hid/hid-wacom.c
index 4acd5090ece7,db2d07da4b4e..000000000000
--- a/drivers/hid/hid-wacom.c
+++ b/drivers/hid/hid-wacom.c
@@@ -940,8 -952,6 +940,11 @@@ static void wacom_remove(struct hid_dev
  }
  
  static const struct hid_device_id wacom_devices[] = {
++<<<<<<< HEAD
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_WACOM, USB_DEVICE_ID_WACOM_GRAPHIRE_BLUETOOTH) },
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_WACOM, USB_DEVICE_ID_WACOM_INTUOS4_BLUETOOTH) },
++=======
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  
  	{ }
  };
diff --cc drivers/hid/wacom_sys.c
index 527bf559d1db,f5c9c56c0975..000000000000
--- a/drivers/hid/wacom_sys.c
+++ b/drivers/hid/wacom_sys.c
@@@ -556,6 -262,59 +556,62 @@@ static int wacom_set_device_mode(struc
  	return error < 0 ? error : 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int wacom_bt_query_tablet_data(struct hid_device *hdev, u8 speed,
+ 		struct wacom_features *features)
+ {
+ 	struct wacom *wacom = hid_get_drvdata(hdev);
+ 	int ret;
+ 	u8 rep_data[2];
+ 
+ 	switch (features->type) {
+ 	case GRAPHIRE_BT:
+ 		rep_data[0] = 0x03;
+ 		rep_data[1] = 0x00;
+ 		ret = wacom_set_report(hdev, HID_FEATURE_REPORT,
+ 					rep_data[0], rep_data, 2, 3);
+ 
+ 		if (ret >= 0) {
+ 			rep_data[0] = speed == 0 ? 0x05 : 0x06;
+ 			rep_data[1] = 0x00;
+ 
+ 			ret = wacom_set_report(hdev, HID_FEATURE_REPORT,
+ 						rep_data[0], rep_data, 2, 3);
+ 
+ 			if (ret >= 0) {
+ 				wacom->wacom_wac.bt_high_speed = speed;
+ 				return 0;
+ 			}
+ 		}
+ 
+ 		/*
+ 		 * Note that if the raw queries fail, it's not a hard failure
+ 		 * and it is safe to continue
+ 		 */
+ 		hid_warn(hdev, "failed to poke device, command %d, err %d\n",
+ 			 rep_data[0], ret);
+ 		break;
+ 	case INTUOS4WL:
+ 		if (speed == 1)
+ 			wacom->wacom_wac.bt_features &= ~0x20;
+ 		else
+ 			wacom->wacom_wac.bt_features |= 0x20;
+ 
+ 		rep_data[0] = 0x03;
+ 		rep_data[1] = wacom->wacom_wac.bt_features;
+ 
+ 		ret = wacom_set_report(hdev, HID_FEATURE_REPORT,
+ 					rep_data[0], rep_data, 2, 1);
+ 		if (ret >= 0)
+ 			wacom->wacom_wac.bt_high_speed = speed;
+ 		break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  /*
   * Switch the tablet into its most-capable mode. Wacom tablets are
   * typically configured to power-up in a mode which sends mouse-like
@@@ -1047,8 -801,9 +1104,9 @@@ static void wacom_destroy_leds(struct w
  	switch (wacom->wacom_wac.features.type) {
  	case INTUOS4S:
  	case INTUOS4:
+ 	case INTUOS4WL:
  	case INTUOS4L:
 -		sysfs_remove_group(&wacom->hdev->dev.kobj,
 +		sysfs_remove_group(&wacom->intf->dev.kobj,
  				   &intuos4_led_attr_group);
  		break;
  
diff --cc drivers/hid/wacom_wac.c
index 01ec753fea53,d4a2d533a444..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -34,6 -31,17 +34,20 @@@
   */
  #define WACOM_CONTACT_AREA_SCALE 2607
  
++<<<<<<< HEAD
++=======
+ /*
+  * Percent of battery capacity for Graphire.
+  * 8th value means AC online and show 100% capacity.
+  */
+ static unsigned short batcap_gr[8] = { 1, 15, 25, 35, 50, 70, 100, 100 };
+ 
+ /*
+  * Percent of battery capacity for Intuos4 WL, AC has a separate bit.
+  */
+ static unsigned short batcap_i4[8] = { 1, 15, 30, 45, 60, 70, 85, 100 };
+ 
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  static int wacom_penpartner_irq(struct wacom_wac *wacom)
  {
  	unsigned char *data = wacom->data;
@@@ -1386,8 -1568,12 +1452,12 @@@ void wacom_wac_irq(struct wacom_wac *wa
  		sync = wacom_intuos_irq(wacom_wac);
  		break;
  
+ 	case INTUOS4WL:
+ 		sync = wacom_intuos_bt_irq(wacom_wac, len);
+ 		break;
+ 
  	case WACOM_24HDT:
 +	case WACOM_27QHDT:
  		sync = wacom_24hdt_irq(wacom_wac);
  		break;
  
@@@ -1587,6 -1775,257 +1657,260 @@@ int wacom_setup_input_capabilities(stru
  		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case GRAPHIRE_BT:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 		input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 					      features->distance_max,
+ 					      0, 0);
+ 
+ 		input_set_capability(input_dev, EV_REL, REL_WHEEL);
+ 
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		__set_bit(BTN_MIDDLE, input_dev->keybit);
+ 
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_MOUSE, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case WACOM_24HD:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		input_set_abs_params(input_dev, ABS_THROTTLE, 0, 71, 0, 0);
+ 		/* fall through */
+ 
+ 	case DTK:
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case WACOM_22HD:
+ 	case WACOM_21UX2:
+ 	case WACOM_BEE:
+ 	case CINTIQ:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case WACOM_13HD:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 
+ 	case INTUOS3:
+ 	case INTUOS3L:
+ 	case INTUOS3S:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		/* fall through */
+ 
+ 	case INTUOS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		wacom_setup_intuos(wacom_wac);
+ 		break;
+ 
+ 	case INTUOS5:
+ 	case INTUOS5L:
+ 	case INTUOSPM:
+ 	case INTUOSPL:
+ 	case INTUOS5S:
+ 	case INTUOSPS:
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 
+ 		if (features->device_type == BTN_TOOL_PEN) {
+ 			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 					      features->distance_max,
+ 					      0, 0);
+ 
+ 			input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 
+ 			wacom_setup_intuos(wacom_wac);
+ 		} else if (features->device_type == BTN_TOOL_FINGER) {
+ 			__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR,
+ 			                     0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_TOUCH_MINOR,
+ 			                     0, features->y_max, 0, 0);
+ 			input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
+ 		}
+ 		break;
+ 
+ 	case INTUOS4:
+ 	case INTUOS4WL:
+ 	case INTUOS4L:
+ 	case INTUOS4S:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		wacom_setup_intuos(wacom_wac);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case WACOM_24HDT:
+ 		if (features->device_type == BTN_TOOL_FINGER) {
+ 			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, 0, features->x_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_WIDTH_MINOR, 0, features->y_max, 0, 0);
+ 			input_set_abs_params(input_dev, ABS_MT_ORIENTATION, 0, 1, 0, 0);
+ 		}
+ 		/* fall through */
+ 
+ 	case MTSCREEN:
+ 	case MTTPC:
+ 	case MTTPC_B:
+ 	case TABLETPC2FG:
+ 		if (features->device_type == BTN_TOOL_FINGER) {
+ 			unsigned int flags = INPUT_MT_DIRECT;
+ 
+ 			if (wacom_wac->features.type == TABLETPC2FG)
+ 				flags = 0;
+ 
+ 			input_mt_init_slots(input_dev, features->touch_max, flags);
+ 		}
+ 		/* fall through */
+ 
+ 	case TABLETPC:
+ 	case TABLETPCE:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		if (features->device_type != BTN_TOOL_PEN)
+ 			break;  /* no need to process stylus stuff */
+ 
+ 		/* fall through */
+ 
+ 	case DTUS:
+ 	case PL:
+ 	case DTU:
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 		break;
+ 
+ 	case PTU:
+ 		__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 		/* fall through */
+ 
+ 	case PENPARTNER:
+ 		__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 		__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 
+ 		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 		break;
+ 
+ 	case INTUOSHT:
+ 		if (features->touch_max &&
+ 		    features->device_type == BTN_TOOL_FINGER) {
+ 			input_dev->evbit[0] |= BIT_MASK(EV_SW);
+ 			__set_bit(SW_MUTE_DEVICE, input_dev->swbit);
+ 		}
+ 		/* fall through */
+ 
+ 	case BAMBOO_PT:
+ 		__clear_bit(ABS_MISC, input_dev->absbit);
+ 
+ 		if (features->device_type == BTN_TOOL_FINGER) {
+ 
+ 			if (features->touch_max) {
+ 				/* touch interface */
+ 				unsigned int flags = INPUT_MT_POINTER;
+ 
+ 				__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 				if (features->pktlen == WACOM_PKGLEN_BBTOUCH3) {
+ 					input_set_abs_params(input_dev,
+ 						     ABS_MT_TOUCH_MAJOR,
+ 						     0, features->x_max, 0, 0);
+ 					input_set_abs_params(input_dev,
+ 						     ABS_MT_TOUCH_MINOR,
+ 						     0, features->y_max, 0, 0);
+ 				} else {
+ 					__set_bit(BTN_TOOL_FINGER, input_dev->keybit);
+ 					__set_bit(BTN_TOOL_DOUBLETAP, input_dev->keybit);
+ 					flags = 0;
+ 				}
+ 				input_mt_init_slots(input_dev, features->touch_max, flags);
+ 			} else {
+ 				/* buttons/keys only interface */
+ 				__clear_bit(ABS_X, input_dev->absbit);
+ 				__clear_bit(ABS_Y, input_dev->absbit);
+ 				__clear_bit(BTN_TOUCH, input_dev->keybit);
+ 			}
+ 		} else if (features->device_type == BTN_TOOL_PEN) {
+ 			__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
+ 			__set_bit(BTN_TOOL_RUBBER, input_dev->keybit);
+ 			__set_bit(BTN_TOOL_PEN, input_dev->keybit);
+ 			__set_bit(BTN_STYLUS, input_dev->keybit);
+ 			__set_bit(BTN_STYLUS2, input_dev->keybit);
+ 			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
+ 					      features->distance_max,
+ 					      0, 0);
+ 		}
+ 		break;
+ 
+ 	case CINTIQ_HYBRID:
+ 		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
+ 		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+ 
+ 		wacom_setup_cintiq(wacom_wac);
+ 		break;
+ 	}
+ 	return 0;
+ }
+ 
+ int wacom_setup_pad_input_capabilities(struct input_dev *input_dev,
+ 				   struct wacom_wac *wacom_wac)
+ {
+ 	struct wacom_features *features = &wacom_wac->features;
+ 	int i;
+ 
+ 	input_dev->evbit[0] |= BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+ 
+ 	/* kept for making legacy xf86-input-wacom working with the wheels */
+ 	__set_bit(ABS_MISC, input_dev->absbit);
+ 
+ 	/* kept for making legacy xf86-input-wacom accepting the pad */
+ 	input_set_abs_params(input_dev, ABS_X, 0, 1, 0, 0);
+ 	input_set_abs_params(input_dev, ABS_Y, 0, 1, 0, 0);
+ 
+ 	switch (features->type) {
+ 	case GRAPHIRE_BT:
+ 		__set_bit(BTN_0, input_dev->keybit);
+ 		__set_bit(BTN_1, input_dev->keybit);
+ 		break;
+ 
+ 	case WACOM_MO:
+ 		__set_bit(BTN_BACK, input_dev->keybit);
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_FORWARD, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
+ 		break;
+ 
+ 	case WACOM_G4:
+ 		__set_bit(BTN_BACK, input_dev->keybit);
+ 		__set_bit(BTN_LEFT, input_dev->keybit);
+ 		__set_bit(BTN_FORWARD, input_dev->keybit);
+ 		__set_bit(BTN_RIGHT, input_dev->keybit);
+ 		input_set_capability(input_dev, EV_REL, REL_WHEEL);
+ 		break;
+ 
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  	case WACOM_24HD:
  		__set_bit(BTN_A, input_dev->keybit);
  		__set_bit(BTN_B, input_dev->keybit);
@@@ -1708,30 -2117,25 +2032,39 @@@
  
  	case INTUOS5S:
  	case INTUOSPS:
 -		/* touch interface does not have the pad device */
 -		if (features->device_type != BTN_TOOL_PEN)
 -			return 1;
 +		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
  
 -		for (i = 0; i < 7; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 +		if (features->device_type == BTN_TOOL_PEN) {
 +			for (i = 0; i < 7; i++)
 +				__set_bit(BTN_0 + i, input_dev->keybit);
  
 -		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
 +			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
 +					      features->distance_max,
 +					      0, 0);
 +
 +			input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 +
 +			wacom_setup_intuos(wacom_wac);
 +		} else if (features->device_type == BTN_TOOL_FINGER) {
 +			__clear_bit(ABS_MISC, input_dev->absbit);
 +
 +			input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR,
 +			                     0, features->x_max, 0, 0);
 +			input_set_abs_params(input_dev, ABS_MT_TOUCH_MINOR,
 +			                     0, features->y_max, 0, 0);
 +			input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_POINTER);
 +		}
  		break;
  
+ 	case INTUOS4WL:
+ 		/*
+ 		 * For Bluetooth devices, the udev rule does not work correctly
+ 		 * for pads unless we add a stylus capability, which forces
+ 		 * ID_INPUT_TABLET to be set.
+ 		 */
+ 		__set_bit(BTN_STYLUS, input_dev->keybit);
+ 		/* fall through */
+ 
  	case INTUOS4:
  	case INTUOS4L:
  		__set_bit(BTN_7, input_dev->keybit);
@@@ -1844,208 -2183,209 +2177,216 @@@
  }
  
  static const struct wacom_features wacom_features_0x00 =
 -	{ "Wacom Penpartner", 5040, 3780, 255, 0,
 -	  PENPARTNER, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
 +	{ "Wacom Penpartner",     WACOM_PKGLEN_PENPRTN,    5040,  3780,  255,
 +	  0, PENPARTNER, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
  static const struct wacom_features wacom_features_0x10 =
 -	{ "Wacom Graphire", 10206, 7422, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 -static const struct wacom_features wacom_features_0x81 =
 -	{ "Wacom Graphire BT", 16704, 12064, 511, 32,
 -	  GRAPHIRE_BT, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire",       WACOM_PKGLEN_GRAPHIRE,  10206,  7422,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x11 =
 -	{ "Wacom Graphire2 4x5", 10206, 7422, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire2 4x5",  WACOM_PKGLEN_GRAPHIRE,  10206,  7422,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x12 =
 -	{ "Wacom Graphire2 5x7", 13918, 10206, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire2 5x7",  WACOM_PKGLEN_GRAPHIRE,  13918, 10206,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x13 =
 -	{ "Wacom Graphire3", 10208, 7424, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire3",      WACOM_PKGLEN_GRAPHIRE,  10208,  7424,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x14 =
 -	{ "Wacom Graphire3 6x8", 16704, 12064, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire3 6x8",  WACOM_PKGLEN_GRAPHIRE,  16704, 12064,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x15 =
 -	{ "Wacom Graphire4 4x5", 10208, 7424, 511, 63,
 -	  WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire4 4x5",  WACOM_PKGLEN_GRAPHIRE,  10208,  7424,  511,
 +	  63, WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x16 =
 -	{ "Wacom Graphire4 6x8", 16704, 12064, 511, 63,
 -	  WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Graphire4 6x8",  WACOM_PKGLEN_GRAPHIRE,  16704, 12064,  511,
 +	  63, WACOM_G4, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x17 =
 -	{ "Wacom BambooFun 4x5", 14760, 9225, 511, 63,
 -	  WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom BambooFun 4x5",  WACOM_PKGLEN_BBFUN,     14760,  9225,  511,
 +	  63, WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x18 =
 -	{ "Wacom BambooFun 6x8", 21648, 13530, 511, 63,
 -	  WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom BambooFun 6x8",  WACOM_PKGLEN_BBFUN,     21648, 13530,  511,
 +	  63, WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x19 =
 -	{ "Wacom Bamboo1 Medium", 16704, 12064, 511, 63,
 -	  GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
 +	{ "Wacom Bamboo1 Medium", WACOM_PKGLEN_GRAPHIRE,  16704, 12064,  511,
 +	  63, GRAPHIRE, WACOM_GRAPHIRE_RES, WACOM_GRAPHIRE_RES };
  static const struct wacom_features wacom_features_0x60 =
 -	{ "Wacom Volito", 5104, 3712, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom Volito",         WACOM_PKGLEN_GRAPHIRE,   5104,  3712,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x61 =
 -	{ "Wacom PenStation2", 3250, 2320, 255, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom PenStation2",    WACOM_PKGLEN_GRAPHIRE,   3250,  2320,  255,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x62 =
 -	{ "Wacom Volito2 4x5", 5104, 3712, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom Volito2 4x5",    WACOM_PKGLEN_GRAPHIRE,   5104,  3712,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x63 =
 -	{ "Wacom Volito2 2x3", 3248, 2320, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom Volito2 2x3",    WACOM_PKGLEN_GRAPHIRE,   3248,  2320,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x64 =
 -	{ "Wacom PenPartner2", 3250, 2320, 511, 63,
 -	  GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
 +	{ "Wacom PenPartner2",    WACOM_PKGLEN_GRAPHIRE,   3250,  2320,  511,
 +	  63, GRAPHIRE, WACOM_VOLITO_RES, WACOM_VOLITO_RES };
  static const struct wacom_features wacom_features_0x65 =
 -	{ "Wacom Bamboo", 14760, 9225, 511, 63,
 -	  WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo",         WACOM_PKGLEN_BBFUN,     14760,  9225,  511,
 +	  63, WACOM_MO, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x69 =
 -	{ "Wacom Bamboo1", 5104, 3712, 511, 63,
 -	  GRAPHIRE, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
 +	{ "Wacom Bamboo1",        WACOM_PKGLEN_GRAPHIRE,   5104,  3712,  511,
 +	  63, GRAPHIRE, WACOM_PENPRTN_RES, WACOM_PENPRTN_RES };
  static const struct wacom_features wacom_features_0x6A =
 -	{ "Wacom Bamboo1 4x6", 14760, 9225, 1023, 63,
 -	  GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo1 4x6",    WACOM_PKGLEN_GRAPHIRE,  14760,  9225, 1023,
 +	  63, GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x6B =
 -	{ "Wacom Bamboo1 5x8", 21648, 13530, 1023, 63,
 -	  GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Bamboo1 5x8",    WACOM_PKGLEN_GRAPHIRE,  21648, 13530, 1023,
 +	  63, GRAPHIRE, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x20 =
 -	{ "Wacom Intuos 4x5", 12700, 10600, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 4x5",     WACOM_PKGLEN_INTUOS,    12700, 10600, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x21 =
 -	{ "Wacom Intuos 6x8", 20320, 16240, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 6x8",     WACOM_PKGLEN_INTUOS,    20320, 16240, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x22 =
 -	{ "Wacom Intuos 9x12", 30480, 24060, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 9x12",    WACOM_PKGLEN_INTUOS,    30480, 24060, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x23 =
 -	{ "Wacom Intuos 12x12", 30480, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 12x12",   WACOM_PKGLEN_INTUOS,    30480, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x24 =
 -	{ "Wacom Intuos 12x18", 45720, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos 12x18",   WACOM_PKGLEN_INTUOS,    45720, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x30 =
 -	{ "Wacom PL400", 5408, 4056, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL400",          WACOM_PKGLEN_GRAPHIRE,   5408,  4056,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x31 =
 -	{ "Wacom PL500", 6144, 4608, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL500",          WACOM_PKGLEN_GRAPHIRE,   6144,  4608,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x32 =
 -	{ "Wacom PL600", 6126, 4604, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL600",          WACOM_PKGLEN_GRAPHIRE,   6126,  4604,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x33 =
 -	{ "Wacom PL600SX", 6260, 5016, 255, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL600SX",        WACOM_PKGLEN_GRAPHIRE,   6260,  5016,  255,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x34 =
 -	{ "Wacom PL550", 6144, 4608, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL550",          WACOM_PKGLEN_GRAPHIRE,   6144,  4608,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x35 =
 -	{ "Wacom PL800", 7220, 5780, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL800",          WACOM_PKGLEN_GRAPHIRE,   7220,  5780,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x37 =
 -	{ "Wacom PL700", 6758, 5406, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL700",          WACOM_PKGLEN_GRAPHIRE,   6758,  5406,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x38 =
 -	{ "Wacom PL510", 6282, 4762, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom PL510",          WACOM_PKGLEN_GRAPHIRE,   6282,  4762,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x39 =
 -	{ "Wacom DTU710", 34080, 27660, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTU710",         WACOM_PKGLEN_GRAPHIRE,  34080, 27660,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0xC4 =
 -	{ "Wacom DTF521", 6282, 4762, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTF521",         WACOM_PKGLEN_GRAPHIRE,   6282,  4762,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0xC0 =
 -	{ "Wacom DTF720", 6858, 5506, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTF720",         WACOM_PKGLEN_GRAPHIRE,   6858,  5506,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0xC2 =
 -	{ "Wacom DTF720a", 6858, 5506, 511, 0,
 -	  PL, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom DTF720a",        WACOM_PKGLEN_GRAPHIRE,   6858,  5506,  511,
 +	  0, PL, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x03 =
 -	{ "Wacom Cintiq Partner", 20480, 15360, 511, 0,
 -	  PTU, WACOM_PL_RES, WACOM_PL_RES };
 +	{ "Wacom Cintiq Partner", WACOM_PKGLEN_GRAPHIRE,  20480, 15360,  511,
 +	  0, PTU, WACOM_PL_RES, WACOM_PL_RES };
  static const struct wacom_features wacom_features_0x41 =
 -	{ "Wacom Intuos2 4x5", 12700, 10600, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 4x5",    WACOM_PKGLEN_INTUOS,    12700, 10600, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x42 =
 -	{ "Wacom Intuos2 6x8", 20320, 16240, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 6x8",    WACOM_PKGLEN_INTUOS,    20320, 16240, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x43 =
 -	{ "Wacom Intuos2 9x12", 30480, 24060, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 9x12",   WACOM_PKGLEN_INTUOS,    30480, 24060, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x44 =
 -	{ "Wacom Intuos2 12x12", 30480, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 12x12",  WACOM_PKGLEN_INTUOS,    30480, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0x45 =
 -	{ "Wacom Intuos2 12x18", 45720, 31680, 1023, 31,
 -	  INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
 +	{ "Wacom Intuos2 12x18",  WACOM_PKGLEN_INTUOS,    45720, 31680, 1023,
 +	  31, INTUOS, WACOM_INTUOS_RES, WACOM_INTUOS_RES };
  static const struct wacom_features wacom_features_0xB0 =
 -	{ "Wacom Intuos3 4x5", 25400, 20320, 1023, 63,
 -	  INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 4x5",    WACOM_PKGLEN_INTUOS,    25400, 20320, 1023,
 +	  63, INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB1 =
 -	{ "Wacom Intuos3 6x8", 40640, 30480, 1023, 63,
 -	  INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 6x8",    WACOM_PKGLEN_INTUOS,    40640, 30480, 1023,
 +	  63, INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB2 =
 -	{ "Wacom Intuos3 9x12", 60960, 45720, 1023, 63,
 -	  INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 9x12",   WACOM_PKGLEN_INTUOS,    60960, 45720, 1023,
 +	  63, INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB3 =
 -	{ "Wacom Intuos3 12x12", 60960, 60960, 1023, 63,
 -	  INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 12x12",  WACOM_PKGLEN_INTUOS,    60960, 60960, 1023,
 +	  63, INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB4 =
 -	{ "Wacom Intuos3 12x19", 97536, 60960, 1023, 63,
 -	  INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 12x19",  WACOM_PKGLEN_INTUOS,    97536, 60960, 1023,
 +	  63, INTUOS3L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB5 =
 -	{ "Wacom Intuos3 6x11", 54204, 31750, 1023, 63,
 -	  INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 6x11",   WACOM_PKGLEN_INTUOS,    54204, 31750, 1023,
 +	  63, INTUOS3, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB7 =
 -	{ "Wacom Intuos3 4x6", 31496, 19685, 1023, 63,
 -	  INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos3 4x6",    WACOM_PKGLEN_INTUOS,    31496, 19685, 1023,
 +	  63, INTUOS3S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB8 =
 -	{ "Wacom Intuos4 4x6", 31496, 19685, 2047, 63,
 -	  INTUOS4S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos4 4x6",    WACOM_PKGLEN_INTUOS,    31496, 19685, 2047,
 +	  63, INTUOS4S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xB9 =
 -	{ "Wacom Intuos4 6x9", 44704, 27940, 2047, 63,
 -	  INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos4 6x9",    WACOM_PKGLEN_INTUOS,    44704, 27940, 2047,
 +	  63, INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xBA =
 -	{ "Wacom Intuos4 8x13", 65024, 40640, 2047, 63,
 -	  INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos4 8x13",   WACOM_PKGLEN_INTUOS,    65024, 40640, 2047,
 +	  63, INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xBB =
 -	{ "Wacom Intuos4 12x19", 97536, 60960, 2047, 63,
 -	  INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos4 12x19",  WACOM_PKGLEN_INTUOS,    97536, 60960, 2047,
 +	  63, INTUOS4L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0xBC =
++<<<<<<< HEAD
 +	{ "Wacom Intuos4 WL",     WACOM_PKGLEN_INTUOS,    40640, 25400, 2047,
 +	  63, INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
++=======
+ 	{ "Wacom Intuos4 WL", 40640, 25400, 2047, 63,
+ 	  INTUOS4, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
+ static const struct wacom_features wacom_features_0xBD =
+ 	{ "Wacom Intuos4 WL", 40640, 25400, 2047, 63,
+ 	  INTUOS4WL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  static const struct wacom_features wacom_features_0x26 =
 -	{ "Wacom Intuos5 touch S", 31496, 19685, 2047, 63,
 -	  INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, .touch_max = 16 };
 +	{ "Wacom Intuos5 touch S", WACOM_PKGLEN_INTUOS,  31496, 19685, 2047,
 +	  63, INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0x27 =
 -	{ "Wacom Intuos5 touch M", 44704, 27940, 2047, 63,
 -	  INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, .touch_max = 16 };
 +	{ "Wacom Intuos5 touch M", WACOM_PKGLEN_INTUOS,  44704, 27940, 2047,
 +	  63, INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0x28 =
 -	{ "Wacom Intuos5 touch L", 65024, 40640, 2047, 63,
 -	  INTUOS5L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, .touch_max = 16 };
 +	{ "Wacom Intuos5 touch L", WACOM_PKGLEN_INTUOS, 65024, 40640, 2047,
 +	  63, INTUOS5L, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0x29 =
 -	{ "Wacom Intuos5 S", 31496, 19685, 2047, 63,
 -	  INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos5 S", WACOM_PKGLEN_INTUOS,  31496, 19685, 2047,
 +	  63, INTUOS5S, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0x2A =
 -	{ "Wacom Intuos5 M", 44704, 27940, 2047, 63,
 -	  INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
 +	{ "Wacom Intuos5 M", WACOM_PKGLEN_INTUOS,  44704, 27940, 2047,
 +	  63, INTUOS5, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES };
  static const struct wacom_features wacom_features_0x314 =
 -	{ "Wacom Intuos Pro S", 31496, 19685, 2047, 63,
 -	  INTUOSPS, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, .touch_max = 16,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	{ "Wacom Intuos Pro S", WACOM_PKGLEN_INTUOS,  31496, 19685, 2047,
 +	  63, INTUOSPS, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0x315 =
 -	{ "Wacom Intuos Pro M", 44704, 27940, 2047, 63,
 -	  INTUOSPM, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, .touch_max = 16,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	{ "Wacom Intuos Pro M", WACOM_PKGLEN_INTUOS,  44704, 27940, 2047,
 +	  63, INTUOSPM, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0x317 =
 -	{ "Wacom Intuos Pro L", 65024, 40640, 2047, 63,
 -	  INTUOSPL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, .touch_max = 16,
 -	  .check_for_hid_type = true, .hid_type = HID_TYPE_USBNONE };
 +	{ "Wacom Intuos Pro L", WACOM_PKGLEN_INTUOS,  65024, 40640, 2047,
 +	  63, INTUOSPL, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  .touch_max = 16 };
  static const struct wacom_features wacom_features_0xF4 =
 -	{ "Wacom Cintiq 24HD", 104280, 65400, 2047, 63,
 -	  WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200 };
 +	{ "Wacom Cintiq 24HD",       WACOM_PKGLEN_INTUOS,   104280, 65400, 2047,
 +	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET };
  static const struct wacom_features wacom_features_0xF8 =
 -	{ "Wacom Cintiq 24HD touch", 104280, 65400, 2047, 63, /* Pen */
 -	  WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES, 200, 200,
 +	{ "Wacom Cintiq 24HD touch", WACOM_PKGLEN_INTUOS,   104280, 65400, 2047, /* Pen */
 +	  63, WACOM_24HD, WACOM_INTUOS3_RES, WACOM_INTUOS3_RES,
 +	  WACOM_CINTIQ_OFFSET, WACOM_CINTIQ_OFFSET,
  	  .oVid = USB_VENDOR_ID_WACOM, .oPid = 0xf6 };
  static const struct wacom_features wacom_features_0xF6 =
  	{ "Wacom Cintiq 24HD touch", .type = WACOM_24HDT, /* Touch */
@@@ -2301,12 -2672,10 +2642,19 @@@ const struct usb_device_id wacom_ids[] 
  	{ USB_DEVICE_WACOM(0xBA) },
  	{ USB_DEVICE_WACOM(0xBB) },
  	{ USB_DEVICE_WACOM(0xBC) },
++<<<<<<< HEAD
 +	{ USB_DEVICE_WACOM(0x26) },
 +	{ USB_DEVICE_WACOM(0x27) },
 +	{ USB_DEVICE_WACOM(0x28) },
 +	{ USB_DEVICE_WACOM(0x29) },
 +	{ USB_DEVICE_WACOM(0x2A) },
 +	{ USB_DEVICE_WACOM(0x3F) },
++=======
+ 	{ BT_DEVICE_WACOM(0xBD) },
+ 	{ USB_DEVICE_WACOM(0xC0) },
+ 	{ USB_DEVICE_WACOM(0xC2) },
+ 	{ USB_DEVICE_WACOM(0xC4) },
++>>>>>>> 81af7e61a774 (Input: wacom - handle Intuos 4 BT in wacom.ko)
  	{ USB_DEVICE_WACOM(0xC5) },
  	{ USB_DEVICE_WACOM(0xC6) },
  	{ USB_DEVICE_WACOM(0xC7) },
* Unmerged path drivers/hid/hid-core.c
* Unmerged path drivers/hid/hid-wacom.c
* Unmerged path drivers/hid/wacom_sys.c
* Unmerged path drivers/hid/wacom_wac.c
diff --git a/drivers/hid/wacom_wac.h b/drivers/hid/wacom_wac.h
index d220d069f329..95359a2c3f6d 100644
--- a/drivers/hid/wacom_wac.h
+++ b/drivers/hid/wacom_wac.h
@@ -77,6 +77,7 @@ enum {
 	INTUOS3L,
 	INTUOS4S,
 	INTUOS4,
+	INTUOS4WL,
 	INTUOS4L,
 	INTUOS5S,
 	INTUOS5,
