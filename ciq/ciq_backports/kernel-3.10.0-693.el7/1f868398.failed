switchdev: rename SWITCHDEV_ATTR_* enum values to SWITCHDEV_ATTR_ID_*

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Pirko <jiri@mellanox.com>
commit 1f86839874a50c9ee2009567d2f312b1e1949e24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/1f868398.failed

To be aligned with obj.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Acked-by: Scott Feldman <sfeldma@gmail.com>
	Reviewed-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1f86839874a50c9ee2009567d2f312b1e1949e24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/switchdev.txt
#	drivers/net/ethernet/rocker/rocker.c
#	include/net/switchdev.h
#	net/bridge/br_stp.c
#	net/core/net-sysfs.c
#	net/core/rtnetlink.c
#	net/dsa/slave.c
#	net/switchdev/switchdev.c
diff --cc net/bridge/br_stp.c
index 48a6519f8bc7,3a982c02599a..000000000000
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@@ -38,7 -39,17 +38,16 @@@ void br_log_state(const struct net_brid
  
  void br_set_state(struct net_bridge_port *p, unsigned int state)
  {
++<<<<<<< HEAD
++=======
+ 	struct switchdev_attr attr = {
+ 		.id = SWITCHDEV_ATTR_ID_PORT_STP_STATE,
+ 		.u.stp_state = state,
+ 	};
+ 	int err;
+ 
++>>>>>>> 1f86839874a5 (switchdev: rename SWITCHDEV_ATTR_* enum values to SWITCHDEV_ATTR_ID_*)
  	p->state = state;
 -	err = switchdev_port_attr_set(p->dev, &attr);
 -	if (err && err != -EOPNOTSUPP)
 -		br_warn(p->br, "error setting offload STP state on port %u(%s)\n",
 -				(unsigned int) p->port_no, p->dev->name);
  }
  
  /* called under bridge lock */
diff --cc net/core/net-sysfs.c
index c7c996a3d5f5,f88a62ab019d..000000000000
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@@ -416,11 -470,15 +416,18 @@@ static ssize_t phys_switch_id_show(stru
  		return restart_syscall();
  
  	if (dev_isalive(netdev)) {
++<<<<<<< HEAD
 +		struct netdev_phys_item_id ppid;
++=======
+ 		struct switchdev_attr attr = {
+ 			.id = SWITCHDEV_ATTR_ID_PORT_PARENT_ID,
+ 			.flags = SWITCHDEV_F_NO_RECURSE,
+ 		};
++>>>>>>> 1f86839874a5 (switchdev: rename SWITCHDEV_ATTR_* enum values to SWITCHDEV_ATTR_ID_*)
  
 -		ret = switchdev_port_attr_get(netdev, &attr);
 +		ret = netdev_switch_parent_id_get(netdev, &ppid);
  		if (!ret)
 -			ret = sprintf(buf, "%*phN\n", attr.u.ppid.id_len,
 -				      attr.u.ppid.id);
 +			ret = sprintf(buf, "%*phN\n", ppid.id_len, ppid.id);
  	}
  	rtnl_unlock();
  
diff --cc net/core/rtnetlink.c
index 38cedad711a1,b2258a36d894..000000000000
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@@ -1022,6 -1003,46 +1022,49 @@@ static int rtnl_phys_port_id_fill(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int rtnl_phys_port_name_fill(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	char name[IFNAMSIZ];
+ 	int err;
+ 
+ 	err = dev_get_phys_port_name(dev, name, sizeof(name));
+ 	if (err) {
+ 		if (err == -EOPNOTSUPP)
+ 			return 0;
+ 		return err;
+ 	}
+ 
+ 	if (nla_put(skb, IFLA_PHYS_PORT_NAME, strlen(name), name))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
+ static int rtnl_phys_switch_id_fill(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	int err;
+ 	struct switchdev_attr attr = {
+ 		.id = SWITCHDEV_ATTR_ID_PORT_PARENT_ID,
+ 		.flags = SWITCHDEV_F_NO_RECURSE,
+ 	};
+ 
+ 	err = switchdev_port_attr_get(dev, &attr);
+ 	if (err) {
+ 		if (err == -EOPNOTSUPP)
+ 			return 0;
+ 		return err;
+ 	}
+ 
+ 	if (nla_put(skb, IFLA_PHYS_SWITCH_ID, attr.u.ppid.id_len,
+ 		    attr.u.ppid.id))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 1f86839874a5 (switchdev: rename SWITCHDEV_ATTR_* enum values to SWITCHDEV_ATTR_ID_*)
  static int rtnl_fill_ifinfo(struct sk_buff *skb, struct net_device *dev,
  			    int type, u32 pid, u32 seq, u32 change,
  			    unsigned int flags, u32 ext_filter_mask)
diff --cc net/dsa/slave.c
index 6ebd8fbd9285,8992568f5c0e..000000000000
--- a/net/dsa/slave.c
+++ b/net/dsa/slave.c
@@@ -171,6 -412,236 +171,239 @@@ static int dsa_slave_ioctl(struct net_d
  	return -EOPNOTSUPP;
  }
  
++<<<<<<< HEAD
++=======
+ /* Return a bitmask of all ports being currently bridged within a given bridge
+  * device. Note that on leave, the mask will still return the bitmask of ports
+  * currently bridged, prior to port removal, and this is exactly what we want.
+  */
+ static u32 dsa_slave_br_port_mask(struct dsa_switch *ds,
+ 				  struct net_device *bridge)
+ {
+ 	struct dsa_slave_priv *p;
+ 	unsigned int port;
+ 	u32 mask = 0;
+ 
+ 	for (port = 0; port < DSA_MAX_PORTS; port++) {
+ 		if (!dsa_is_port_initialized(ds, port))
+ 			continue;
+ 
+ 		p = netdev_priv(ds->ports[port]);
+ 
+ 		if (ds->ports[port]->priv_flags & IFF_BRIDGE_PORT &&
+ 		    p->bridge_dev == bridge)
+ 			mask |= 1 << port;
+ 	}
+ 
+ 	return mask;
+ }
+ 
+ static int dsa_slave_stp_update(struct net_device *dev, u8 state)
+ {
+ 	struct dsa_slave_priv *p = netdev_priv(dev);
+ 	struct dsa_switch *ds = p->parent;
+ 	int ret = -EOPNOTSUPP;
+ 
+ 	if (ds->drv->port_stp_update)
+ 		ret = ds->drv->port_stp_update(ds, p->port, state);
+ 
+ 	return ret;
+ }
+ 
+ static int dsa_slave_port_attr_set(struct net_device *dev,
+ 				   struct switchdev_attr *attr,
+ 				   struct switchdev_trans *trans)
+ {
+ 	struct dsa_slave_priv *p = netdev_priv(dev);
+ 	struct dsa_switch *ds = p->parent;
+ 	int ret;
+ 
+ 	switch (attr->id) {
+ 	case SWITCHDEV_ATTR_ID_PORT_STP_STATE:
+ 		if (switchdev_trans_ph_prepare(trans))
+ 			ret = ds->drv->port_stp_update ? 0 : -EOPNOTSUPP;
+ 		else
+ 			ret = ds->drv->port_stp_update(ds, p->port,
+ 						       attr->u.stp_state);
+ 		break;
+ 	default:
+ 		ret = -EOPNOTSUPP;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int dsa_slave_port_obj_add(struct net_device *dev,
+ 				  enum switchdev_obj_id id, const void *obj,
+ 				  struct switchdev_trans *trans)
+ {
+ 	int err;
+ 
+ 	/* For the prepare phase, ensure the full set of changes is feasable in
+ 	 * one go in order to signal a failure properly. If an operation is not
+ 	 * supported, return -EOPNOTSUPP.
+ 	 */
+ 
+ 	switch (id) {
+ 	case SWITCHDEV_OBJ_ID_PORT_FDB:
+ 		err = dsa_slave_port_fdb_add(dev, obj, trans);
+ 		break;
+ 	case SWITCHDEV_OBJ_ID_PORT_VLAN:
+ 		err = dsa_slave_port_vlan_add(dev, obj, trans);
+ 		break;
+ 	default:
+ 		err = -EOPNOTSUPP;
+ 		break;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int dsa_slave_port_obj_del(struct net_device *dev,
+ 				  enum switchdev_obj_id id, const void *obj)
+ {
+ 	int err;
+ 
+ 	switch (id) {
+ 	case SWITCHDEV_OBJ_ID_PORT_FDB:
+ 		err = dsa_slave_port_fdb_del(dev, obj);
+ 		break;
+ 	case SWITCHDEV_OBJ_ID_PORT_VLAN:
+ 		err = dsa_slave_port_vlan_del(dev, obj);
+ 		break;
+ 	default:
+ 		err = -EOPNOTSUPP;
+ 		break;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int dsa_slave_port_obj_dump(struct net_device *dev,
+ 				   enum switchdev_obj_id id, void *obj,
+ 				   int (*cb)(void *obj))
+ {
+ 	int err;
+ 
+ 	switch (id) {
+ 	case SWITCHDEV_OBJ_ID_PORT_FDB:
+ 		err = dsa_slave_port_fdb_dump(dev, obj, cb);
+ 		break;
+ 	case SWITCHDEV_OBJ_ID_PORT_VLAN:
+ 		err = dsa_slave_port_vlan_dump(dev, obj, cb);
+ 		break;
+ 	default:
+ 		err = -EOPNOTSUPP;
+ 		break;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int dsa_slave_bridge_port_join(struct net_device *dev,
+ 				      struct net_device *br)
+ {
+ 	struct dsa_slave_priv *p = netdev_priv(dev);
+ 	struct dsa_switch *ds = p->parent;
+ 	int ret = -EOPNOTSUPP;
+ 
+ 	p->bridge_dev = br;
+ 
+ 	if (ds->drv->port_join_bridge)
+ 		ret = ds->drv->port_join_bridge(ds, p->port,
+ 						dsa_slave_br_port_mask(ds, br));
+ 
+ 	return ret;
+ }
+ 
+ static int dsa_slave_bridge_port_leave(struct net_device *dev)
+ {
+ 	struct dsa_slave_priv *p = netdev_priv(dev);
+ 	struct dsa_switch *ds = p->parent;
+ 	int ret = -EOPNOTSUPP;
+ 
+ 
+ 	if (ds->drv->port_leave_bridge)
+ 		ret = ds->drv->port_leave_bridge(ds, p->port,
+ 						 dsa_slave_br_port_mask(ds, p->bridge_dev));
+ 
+ 	p->bridge_dev = NULL;
+ 
+ 	/* Port left the bridge, put in BR_STATE_DISABLED by the bridge layer,
+ 	 * so allow it to be in BR_STATE_FORWARDING to be kept functional
+ 	 */
+ 	dsa_slave_stp_update(dev, BR_STATE_FORWARDING);
+ 
+ 	return ret;
+ }
+ 
+ static int dsa_slave_port_attr_get(struct net_device *dev,
+ 				   struct switchdev_attr *attr)
+ {
+ 	struct dsa_slave_priv *p = netdev_priv(dev);
+ 	struct dsa_switch *ds = p->parent;
+ 
+ 	switch (attr->id) {
+ 	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
+ 		attr->u.ppid.id_len = sizeof(ds->index);
+ 		memcpy(&attr->u.ppid.id, &ds->index, attr->u.ppid.id_len);
+ 		break;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static inline netdev_tx_t dsa_netpoll_send_skb(struct dsa_slave_priv *p,
+ 					       struct sk_buff *skb)
+ {
+ #ifdef CONFIG_NET_POLL_CONTROLLER
+ 	if (p->netpoll)
+ 		netpoll_send_skb(p->netpoll, skb);
+ #else
+ 	BUG();
+ #endif
+ 	return NETDEV_TX_OK;
+ }
+ 
+ static netdev_tx_t dsa_slave_xmit(struct sk_buff *skb, struct net_device *dev)
+ {
+ 	struct dsa_slave_priv *p = netdev_priv(dev);
+ 	struct sk_buff *nskb;
+ 
+ 	dev->stats.tx_packets++;
+ 	dev->stats.tx_bytes += skb->len;
+ 
+ 	/* Transmit function may have to reallocate the original SKB */
+ 	nskb = p->xmit(skb, dev);
+ 	if (!nskb)
+ 		return NETDEV_TX_OK;
+ 
+ 	/* SKB for netpoll still need to be mangled with the protocol-specific
+ 	 * tag to be successfully transmitted
+ 	 */
+ 	if (unlikely(netpoll_tx_running(dev)))
+ 		return dsa_netpoll_send_skb(p, nskb);
+ 
+ 	/* Queue the SKB for transmission on the parent interface, but
+ 	 * do not modify its EtherType
+ 	 */
+ 	nskb->dev = p->parent->dst->master_netdev;
+ 	dev_queue_xmit(nskb);
+ 
+ 	return NETDEV_TX_OK;
+ }
+ 
+ static struct sk_buff *dsa_slave_notag_xmit(struct sk_buff *skb,
+ 					    struct net_device *dev)
+ {
+ 	/* Just return the original SKB */
+ 	return skb;
+ }
+ 
++>>>>>>> 1f86839874a5 (switchdev: rename SWITCHDEV_ATTR_* enum values to SWITCHDEV_ATTR_ID_*)
  
  /* ethtool operations *******************************************************/
  static int
* Unmerged path Documentation/networking/switchdev.txt
* Unmerged path drivers/net/ethernet/rocker/rocker.c
* Unmerged path include/net/switchdev.h
* Unmerged path net/switchdev/switchdev.c
* Unmerged path Documentation/networking/switchdev.txt
diff --git a/drivers/net/ethernet/mellanox/mlxsw/switchx2.c b/drivers/net/ethernet/mellanox/mlxsw/switchx2.c
index 3e52ee93438c..d448431bbc83 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/switchx2.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/switchx2.c
@@ -868,7 +868,7 @@ static int mlxsw_sx_port_attr_get(struct net_device *dev,
 	struct mlxsw_sx *mlxsw_sx = mlxsw_sx_port->mlxsw_sx;
 
 	switch (attr->id) {
-	case SWITCHDEV_ATTR_PORT_PARENT_ID:
+	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
 		attr->u.ppid.id_len = sizeof(mlxsw_sx->hw_id);
 		memcpy(&attr->u.ppid.id, &mlxsw_sx->hw_id, attr->u.ppid.id_len);
 		break;
* Unmerged path drivers/net/ethernet/rocker/rocker.c
* Unmerged path include/net/switchdev.h
* Unmerged path net/bridge/br_stp.c
* Unmerged path net/core/net-sysfs.c
* Unmerged path net/core/rtnetlink.c
* Unmerged path net/dsa/slave.c
* Unmerged path net/switchdev/switchdev.c
