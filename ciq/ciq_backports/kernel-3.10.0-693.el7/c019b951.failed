EDAC/mce_amd: Add missing SMCA error descriptions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [edac] mce_amd: Add missing SMCA error descriptions (David Arcari) [1389383]
Rebuild_FUZZ: 94.62%
commit-author Yazen Ghannam <Yazen.Ghannam@amd.com>
commit c019b951e1f9f1de0c5b0726032e3adf34c523a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c019b951.failed

Add missing SMCA error descriptions to the error descriptions arrays.

	Signed-off-by: Yazen Ghannam <Yazen.Ghannam@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: http://lkml.kernel.org/r/1472673994-12235-3-git-send-email-Yazen.Ghannam@amd.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit c019b951e1f9f1de0c5b0726032e3adf34c523a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/mce_amd.c
diff --cc drivers/edac/mce_amd.c
index 896ecd88aae5,455cd49d6253..000000000000
--- a/drivers/edac/mce_amd.c
+++ b/drivers/edac/mce_amd.c
@@@ -138,6 -138,151 +138,154 @@@ static const char * const mc5_mce_desc[
  	"Retire status queue"
  };
  
++<<<<<<< HEAD
++=======
+ static const char * const mc6_mce_desc[] = {
+ 	"Hardware Assertion",
+ 	"Free List",
+ 	"Physical Register File",
+ 	"Retire Queue",
+ 	"Scheduler table",
+ 	"Status Register File",
+ };
+ 
+ /* Scalable MCA error strings */
+ static const char * const f17h_ls_mce_desc[] = {
+ 	"Load queue parity",
+ 	"Store queue parity",
+ 	"Miss address buffer payload parity",
+ 	"L1 TLB parity",
+ 	"",						/* reserved */
+ 	"DC tag error type 6",
+ 	"DC tag error type 1",
+ 	"Internal error type 1",
+ 	"Internal error type 2",
+ 	"Sys Read data error thread 0",
+ 	"Sys read data error thread 1",
+ 	"DC tag error type 2",
+ 	"DC data error type 1 (poison comsumption)",
+ 	"DC data error type 2",
+ 	"DC data error type 3",
+ 	"DC tag error type 4",
+ 	"L2 TLB parity",
+ 	"PDC parity error",
+ 	"DC tag error type 3",
+ 	"DC tag error type 5",
+ 	"L2 fill data error",
+ };
+ 
+ static const char * const f17h_if_mce_desc[] = {
+ 	"microtag probe port parity error",
+ 	"IC microtag or full tag multi-hit error",
+ 	"IC full tag parity",
+ 	"IC data array parity",
+ 	"Decoupling queue phys addr parity error",
+ 	"L0 ITLB parity error",
+ 	"L1 ITLB parity error",
+ 	"L2 ITLB parity error",
+ 	"BPQ snoop parity on Thread 0",
+ 	"BPQ snoop parity on Thread 1",
+ 	"L1 BTB multi-match error",
+ 	"L2 BTB multi-match error",
+ 	"L2 Cache Response Poison error",
+ 	"System Read Data error",
+ };
+ 
+ static const char * const f17h_l2_mce_desc[] = {
+ 	"L2M tag multi-way-hit error",
+ 	"L2M tag ECC error",
+ 	"L2M data ECC error",
+ 	"HW assert",
+ };
+ 
+ static const char * const f17h_de_mce_desc[] = {
+ 	"uop cache tag parity error",
+ 	"uop cache data parity error",
+ 	"Insn buffer parity error",
+ 	"uop queue parity error",
+ 	"Insn dispatch queue parity error",
+ 	"Fetch address FIFO parity",
+ 	"Patch RAM data parity",
+ 	"Patch RAM sequencer parity",
+ 	"uop buffer parity"
+ };
+ 
+ static const char * const f17h_ex_mce_desc[] = {
+ 	"Watchdog timeout error",
+ 	"Phy register file parity",
+ 	"Flag register file parity",
+ 	"Immediate displacement register file parity",
+ 	"Address generator payload parity",
+ 	"EX payload parity",
+ 	"Checkpoint queue parity",
+ 	"Retire dispatch queue parity",
+ 	"Retire status queue parity error",
+ 	"Scheduling queue parity error",
+ 	"Branch buffer queue parity error",
+ };
+ 
+ static const char * const f17h_fp_mce_desc[] = {
+ 	"Physical register file parity",
+ 	"Freelist parity error",
+ 	"Schedule queue parity",
+ 	"NSQ parity error",
+ 	"Retire queue parity",
+ 	"Status register file parity",
+ 	"Hardware assertion",
+ };
+ 
+ static const char * const f17h_l3_mce_desc[] = {
+ 	"Shadow tag macro ECC error",
+ 	"Shadow tag macro multi-way-hit error",
+ 	"L3M tag ECC error",
+ 	"L3M tag multi-way-hit error",
+ 	"L3M data ECC error",
+ 	"XI parity, L3 fill done channel error",
+ 	"L3 victim queue parity",
+ 	"L3 HW assert",
+ };
+ 
+ static const char * const f17h_cs_mce_desc[] = {
+ 	"Illegal request from transport layer",
+ 	"Address violation",
+ 	"Security violation",
+ 	"Illegal response from transport layer",
+ 	"Unexpected response",
+ 	"Parity error on incoming request or probe response data",
+ 	"Parity error on incoming read response data",
+ 	"Atomic request parity",
+ 	"ECC error on probe filter access",
+ };
+ 
+ static const char * const f17h_pie_mce_desc[] = {
+ 	"HW assert",
+ 	"Internal PIE register security violation",
+ 	"Error on GMI link",
+ 	"Poison data written to internal PIE register",
+ };
+ 
+ static const char * const f17h_umc_mce_desc[] = {
+ 	"DRAM ECC error",
+ 	"Data poison error on DRAM",
+ 	"SDP parity error",
+ 	"Advanced peripheral bus error",
+ 	"Command/address parity error",
+ 	"Write data CRC error",
+ };
+ 
+ static const char * const f17h_pb_mce_desc[] = {
+ 	"Parameter Block RAM ECC error",
+ };
+ 
+ static const char * const f17h_psp_mce_desc[] = {
+ 	"PSP RAM ECC or parity error",
+ };
+ 
+ static const char * const f17h_smu_mce_desc[] = {
+ 	"SMU RAM ECC or parity error",
+ };
+ 
++>>>>>>> c019b951e1f9 (EDAC/mce_amd: Add missing SMCA error descriptions)
  static bool f12h_mc0_mce(u16 ec, u8 xec)
  {
  	bool ret = false;
* Unmerged path drivers/edac/mce_amd.c
