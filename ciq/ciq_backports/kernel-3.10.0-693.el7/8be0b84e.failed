crypto: rsa - Store rest of the private key components

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] rsa - Store rest of the private key components (Neil Horman) [1382849]
Rebuild_FUZZ: 92.00%
commit-author Salvatore Benedetto <salvatore.benedetto@intel.com>
commit 8be0b84e58a9b07c314f920792926c5c5a53d3da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/8be0b84e.failed

When parsing a private key, store all non-optional fields. These
are required for enabling CRT mode for decrypt and verify

	Signed-off-by: Salvatore Benedetto <salvatore.benedetto@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 8be0b84e58a9b07c314f920792926c5c5a53d3da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/rsa_helper.c
#	include/crypto/internal/rsa.h
diff --cc crypto/rsa_helper.c
index e8fccd3be61a,4df6451e7543..000000000000
--- a/crypto/rsa_helper.c
+++ b/crypto/rsa_helper.c
@@@ -73,14 -78,79 +73,90 @@@ int rsa_get_d(void *context, size_t hdr
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void free_mpis(struct rsa_key *key)
 +{
 +	mpi_free(key->n);
 +	mpi_free(key->e);
 +	mpi_free(key->d);
 +	key->n = NULL;
 +	key->e = NULL;
 +	key->d = NULL;
++=======
+ int rsa_get_p(void *context, size_t hdrlen, unsigned char tag,
+ 	      const void *value, size_t vlen)
+ {
+ 	struct rsa_key *key = context;
+ 
+ 	/* invalid key provided */
+ 	if (!value || !vlen || vlen > key->n_sz)
+ 		return -EINVAL;
+ 
+ 	key->p = value;
+ 	key->p_sz = vlen;
+ 
+ 	return 0;
+ }
+ 
+ int rsa_get_q(void *context, size_t hdrlen, unsigned char tag,
+ 	      const void *value, size_t vlen)
+ {
+ 	struct rsa_key *key = context;
+ 
+ 	/* invalid key provided */
+ 	if (!value || !vlen || vlen > key->n_sz)
+ 		return -EINVAL;
+ 
+ 	key->q = value;
+ 	key->q_sz = vlen;
+ 
+ 	return 0;
+ }
+ 
+ int rsa_get_dp(void *context, size_t hdrlen, unsigned char tag,
+ 	       const void *value, size_t vlen)
+ {
+ 	struct rsa_key *key = context;
+ 
+ 	/* invalid key provided */
+ 	if (!value || !vlen || vlen > key->n_sz)
+ 		return -EINVAL;
+ 
+ 	key->dp = value;
+ 	key->dp_sz = vlen;
+ 
+ 	return 0;
+ }
+ 
+ int rsa_get_dq(void *context, size_t hdrlen, unsigned char tag,
+ 	       const void *value, size_t vlen)
+ {
+ 	struct rsa_key *key = context;
+ 
+ 	/* invalid key provided */
+ 	if (!value || !vlen || vlen > key->n_sz)
+ 		return -EINVAL;
+ 
+ 	key->dq = value;
+ 	key->dq_sz = vlen;
+ 
+ 	return 0;
+ }
+ 
+ int rsa_get_qinv(void *context, size_t hdrlen, unsigned char tag,
+ 		 const void *value, size_t vlen)
+ {
+ 	struct rsa_key *key = context;
+ 
+ 	/* invalid key provided */
+ 	if (!value || !vlen || vlen > key->n_sz)
+ 		return -EINVAL;
+ 
+ 	key->qinv = value;
+ 	key->qinv_sz = vlen;
+ 
+ 	return 0;
++>>>>>>> 8be0b84e58a9 (crypto: rsa - Store rest of the private key components)
  }
  
  /**
diff --cc include/crypto/internal/rsa.h
index c7585bdecbc2,9e8f1590de98..000000000000
--- a/include/crypto/internal/rsa.h
+++ b/include/crypto/internal/rsa.h
@@@ -12,12 -12,44 +12,51 @@@
   */
  #ifndef _RSA_HELPER_
  #define _RSA_HELPER_
 -#include <linux/types.h>
 +#include <linux/mpi.h>
  
++<<<<<<< HEAD
 +struct rsa_key {
 +	MPI n;
 +	MPI e;
 +	MPI d;
++=======
+ /**
+  * rsa_key - RSA key structure
+  * @n           : RSA modulus raw byte stream
+  * @e           : RSA public exponent raw byte stream
+  * @d           : RSA private exponent raw byte stream
+  * @p           : RSA prime factor p of n raw byte stream
+  * @q           : RSA prime factor q of n raw byte stream
+  * @dp          : RSA exponent d mod (p - 1) raw byte stream
+  * @dq          : RSA exponent d mod (q - 1) raw byte stream
+  * @qinv        : RSA CRT coefficient q^(-1) mod p raw byte stream
+  * @n_sz        : length in bytes of RSA modulus n
+  * @e_sz        : length in bytes of RSA public exponent
+  * @d_sz        : length in bytes of RSA private exponent
+  * @p_sz        : length in bytes of p field
+  * @q_sz        : length in bytes of q field
+  * @dp_sz       : length in bytes of dp field
+  * @dq_sz       : length in bytes of dq field
+  * @qinv_sz     : length in bytes of qinv field
+  */
+ struct rsa_key {
+ 	const u8 *n;
+ 	const u8 *e;
+ 	const u8 *d;
+ 	const u8 *p;
+ 	const u8 *q;
+ 	const u8 *dp;
+ 	const u8 *dq;
+ 	const u8 *qinv;
+ 	size_t n_sz;
+ 	size_t e_sz;
+ 	size_t d_sz;
+ 	size_t p_sz;
+ 	size_t q_sz;
+ 	size_t dp_sz;
+ 	size_t dq_sz;
+ 	size_t qinv_sz;
++>>>>>>> 8be0b84e58a9 (crypto: rsa - Store rest of the private key components)
  };
  
  int rsa_parse_pub_key(struct rsa_key *rsa_key, const void *key,
* Unmerged path crypto/rsa_helper.c
diff --git a/crypto/rsaprivkey.asn1 b/crypto/rsaprivkey.asn1
index 731aea5edb0c..4ce06758e8af 100644
--- a/crypto/rsaprivkey.asn1
+++ b/crypto/rsaprivkey.asn1
@@ -3,9 +3,9 @@ RsaPrivKey ::= SEQUENCE {
 	n		INTEGER ({ rsa_get_n }),
 	e		INTEGER ({ rsa_get_e }),
 	d		INTEGER ({ rsa_get_d }),
-	prime1		INTEGER,
-	prime2		INTEGER,
-	exponent1	INTEGER,
-	exponent2	INTEGER,
-	coefficient	INTEGER
+	prime1		INTEGER ({ rsa_get_p }),
+	prime2		INTEGER ({ rsa_get_q }),
+	exponent1	INTEGER ({ rsa_get_dp }),
+	exponent2	INTEGER ({ rsa_get_dq }),
+	coefficient	INTEGER ({ rsa_get_qinv })
 }
* Unmerged path include/crypto/internal/rsa.h
