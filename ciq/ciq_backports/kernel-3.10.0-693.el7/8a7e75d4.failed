KVM: Add provisioning for ulong vm stats and u64 vcpu stats

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Suraj Jitindar Singh <sjitindarsingh@gmail.com>
commit 8a7e75d47b68193339f8727cf4503271d0a0b1d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/8a7e75d4.failed

vms and vcpus have statistics associated with them which can be viewed
within the debugfs. Currently it is assumed within the vcpu_stat_get() and
vm_stat_get() functions that all of these statistics are represented as
u32s, however the next patch adds some u64 vcpu statistics.

Change all vcpu statistics to u64 and modify vcpu_stat_get() accordingly.
Since vcpu statistics are per vcpu, they will only be updated by a single
vcpu at a time so this shouldn't present a problem on 32-bit machines
which can't atomically increment 64-bit numbers. However vm statistics
could potentially be updated by multiple vcpus from that vm at a time.
To avoid the overhead of atomics make all vm statistics ulong such that
they are 64-bit on 64-bit systems where they can be atomically incremented
and are 32-bit on 32-bit systems which may not be able to atomically
increment 64-bit numbers. Modify vm_stat_get() to expect ulongs.

	Signed-off-by: Suraj Jitindar Singh <sjitindarsingh@gmail.com>
	Reviewed-by: David Matlack <dmatlack@google.com>
	Acked-by: Christian Borntraeger <borntraeger@de.ibm.com>
	Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
(cherry picked from commit 8a7e75d47b68193339f8727cf4503271d0a0b1d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/include/asm/kvm_host.h
#	arch/arm64/include/asm/kvm_host.h
#	arch/mips/include/asm/kvm_host.h
#	arch/powerpc/include/asm/kvm_host.h
#	arch/s390/include/asm/kvm_host.h
#	arch/x86/include/asm/kvm_host.h
diff --cc arch/arm/include/asm/kvm_host.h
index 1467904f8fc2,6ad21f04a922..000000000000
--- a/arch/arm/include/asm/kvm_host.h
+++ b/arch/arm/include/asm/kvm_host.h
@@@ -144,13 -187,21 +144,26 @@@ struct kvm_vm_stat 
  };
  
  struct kvm_vcpu_stat {
++<<<<<<< HEAD
 +	u32 halt_successful_poll;
 +	u32 halt_attempted_poll;
 +	u32 halt_wakeup;
++=======
+ 	u64 halt_successful_poll;
+ 	u64 halt_attempted_poll;
+ 	u64 halt_poll_invalid;
+ 	u64 halt_wakeup;
+ 	u64 hvc_exit_stat;
+ 	u64 wfe_exit_stat;
+ 	u64 wfi_exit_stat;
+ 	u64 mmio_exit_user;
+ 	u64 mmio_exit_kernel;
+ 	u64 exits;
++>>>>>>> 8a7e75d47b68 (KVM: Add provisioning for ulong vm stats and u64 vcpu stats)
  };
  
 -#define vcpu_cp15(v,r)	(v)->arch.ctxt.cp15[r]
 -
 -int kvm_vcpu_preferred_target(struct kvm_vcpu_init *init);
 +int kvm_vcpu_set_target(struct kvm_vcpu *vcpu,
 +			const struct kvm_vcpu_init *init);
  unsigned long kvm_arm_num_regs(struct kvm_vcpu *vcpu);
  int kvm_arm_copy_reg_indices(struct kvm_vcpu *vcpu, u64 __user *indices);
  int kvm_arm_get_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg);
diff --cc arch/mips/include/asm/kvm_host.h
index 07768128ec0e,5f488dc8a7d5..000000000000
--- a/arch/mips/include/asm/kvm_host.h
+++ b/arch/mips/include/asm/kvm_host.h
@@@ -59,63 -103,39 +59,88 @@@
  #define KVM_GUEST_KSEG1ADDR(a)		(KVM_GUEST_CPHYSADDR(a) | KVM_GUEST_KSEG1)
  #define KVM_GUEST_KSEG23ADDR(a)		(KVM_GUEST_CPHYSADDR(a) | KVM_GUEST_KSEG23)
  
 -#define KVM_INVALID_PAGE		0xdeadbeef
 -#define KVM_INVALID_INST		0xdeadbeef
 -#define KVM_INVALID_ADDR		0xdeadbeef
 +#define KVM_INVALID_PAGE            0xdeadbeef
 +#define KVM_INVALID_INST            0xdeadbeef
 +#define KVM_INVALID_ADDR            0xdeadbeef
 +
 +#define KVM_MALTA_GUEST_RTC_ADDR    0xb8000070UL
 +
 +#define GUEST_TICKS_PER_JIFFY (40000000/HZ)
 +#define MS_TO_NS(x) (x * 1E6L)
 +
 +#define CAUSEB_DC       27
 +#define CAUSEF_DC       (_ULCAST_(1)   << 27)
  
  extern atomic_t kvm_mips_instance;
 +extern kvm_pfn_t(*kvm_mips_gfn_to_pfn) (struct kvm *kvm, gfn_t gfn);
 +extern void (*kvm_mips_release_pfn_clean) (kvm_pfn_t pfn);
 +extern bool(*kvm_mips_is_error_pfn) (kvm_pfn_t pfn);
  
  struct kvm_vm_stat {
- 	u32 remote_tlb_flush;
+ 	ulong remote_tlb_flush;
  };
  
  struct kvm_vcpu_stat {
++<<<<<<< HEAD
 +	u32 wait_exits;
 +	u32 cache_exits;
 +	u32 signal_exits;
 +	u32 int_exits;
 +	u32 cop_unusable_exits;
 +	u32 tlbmod_exits;
 +	u32 tlbmiss_ld_exits;
 +	u32 tlbmiss_st_exits;
 +	u32 addrerr_st_exits;
 +	u32 addrerr_ld_exits;
 +	u32 syscall_exits;
 +	u32 resvd_inst_exits;
 +	u32 break_inst_exits;
 +	u32 flush_dcache_exits;
 +	u32 halt_successful_poll;
 +	u32 halt_attempted_poll;
 +	u32 halt_wakeup;
++=======
+ 	u64 wait_exits;
+ 	u64 cache_exits;
+ 	u64 signal_exits;
+ 	u64 int_exits;
+ 	u64 cop_unusable_exits;
+ 	u64 tlbmod_exits;
+ 	u64 tlbmiss_ld_exits;
+ 	u64 tlbmiss_st_exits;
+ 	u64 addrerr_st_exits;
+ 	u64 addrerr_ld_exits;
+ 	u64 syscall_exits;
+ 	u64 resvd_inst_exits;
+ 	u64 break_inst_exits;
+ 	u64 trap_inst_exits;
+ 	u64 msa_fpe_exits;
+ 	u64 fpe_exits;
+ 	u64 msa_disabled_exits;
+ 	u64 flush_dcache_exits;
+ 	u64 halt_successful_poll;
+ 	u64 halt_attempted_poll;
+ 	u64 halt_poll_invalid;
+ 	u64 halt_wakeup;
++>>>>>>> 8a7e75d47b68 (KVM: Add provisioning for ulong vm stats and u64 vcpu stats)
 +};
 +
 +enum kvm_mips_exit_types {
 +	WAIT_EXITS,
 +	CACHE_EXITS,
 +	SIGNAL_EXITS,
 +	INT_EXITS,
 +	COP_UNUSABLE_EXITS,
 +	TLBMOD_EXITS,
 +	TLBMISS_LD_EXITS,
 +	TLBMISS_ST_EXITS,
 +	ADDRERR_ST_EXITS,
 +	ADDRERR_LD_EXITS,
 +	SYSCALL_EXITS,
 +	RESVD_INST_EXITS,
 +	BREAK_INST_EXITS,
 +	FLUSH_DCACHE_EXITS,
 +	MAX_KVM_MIPS_EXIT_TYPES
  };
  
  struct kvm_arch_memory_slot {
diff --cc arch/powerpc/include/asm/kvm_host.h
index 8841a038084f,5ec1dcf300f6..000000000000
--- a/arch/powerpc/include/asm/kvm_host.h
+++ b/arch/powerpc/include/asm/kvm_host.h
@@@ -96,37 -101,37 +96,63 @@@ struct kvm_vm_stat 
  };
  
  struct kvm_vcpu_stat {
++<<<<<<< HEAD
 +	u32 sum_exits;
 +	u32 mmio_exits;
 +	u32 dcr_exits;
 +	u32 signal_exits;
 +	u32 light_exits;
 +	/* Account for special types of light exits: */
 +	u32 itlb_real_miss_exits;
 +	u32 itlb_virt_miss_exits;
 +	u32 dtlb_real_miss_exits;
 +	u32 dtlb_virt_miss_exits;
 +	u32 syscall_exits;
 +	u32 isi_exits;
 +	u32 dsi_exits;
 +	u32 emulated_inst_exits;
 +	u32 dec_exits;
 +	u32 ext_intr_exits;
 +	u32 halt_successful_poll;
 +	u32 halt_attempted_poll;
 +	u32 halt_wakeup;
 +	u32 dbell_exits;
 +	u32 gdbell_exits;
 +	u32 ld;
 +	u32 st;
++=======
+ 	u64 sum_exits;
+ 	u64 mmio_exits;
+ 	u64 signal_exits;
+ 	u64 light_exits;
+ 	/* Account for special types of light exits: */
+ 	u64 itlb_real_miss_exits;
+ 	u64 itlb_virt_miss_exits;
+ 	u64 dtlb_real_miss_exits;
+ 	u64 dtlb_virt_miss_exits;
+ 	u64 syscall_exits;
+ 	u64 isi_exits;
+ 	u64 dsi_exits;
+ 	u64 emulated_inst_exits;
+ 	u64 dec_exits;
+ 	u64 ext_intr_exits;
+ 	u64 halt_successful_poll;
+ 	u64 halt_attempted_poll;
+ 	u64 halt_poll_invalid;
+ 	u64 halt_wakeup;
+ 	u64 dbell_exits;
+ 	u64 gdbell_exits;
+ 	u64 ld;
+ 	u64 st;
++>>>>>>> 8a7e75d47b68 (KVM: Add provisioning for ulong vm stats and u64 vcpu stats)
  #ifdef CONFIG_PPC_BOOK3S
- 	u32 pf_storage;
- 	u32 pf_instruc;
- 	u32 sp_storage;
- 	u32 sp_instruc;
- 	u32 queue_intr;
- 	u32 ld_slow;
- 	u32 st_slow;
+ 	u64 pf_storage;
+ 	u64 pf_instruc;
+ 	u64 sp_storage;
+ 	u64 sp_instruc;
+ 	u64 queue_intr;
+ 	u64 ld_slow;
+ 	u64 st_slow;
  #endif
  };
  
diff --cc arch/s390/include/asm/kvm_host.h
index 297b2c318280,2bbe675c96b9..000000000000
--- a/arch/s390/include/asm/kvm_host.h
+++ b/arch/s390/include/asm/kvm_host.h
@@@ -116,97 -221,229 +116,166 @@@ struct kvm_s390_sie_block 
  	__u64	gbea;			/* 0x0180 */
  	__u8	reserved188[24];	/* 0x0188 */
  	__u32	fac;			/* 0x01a0 */
 -	__u8	reserved1a4[20];	/* 0x01a4 */
 -	__u64	cbrlo;			/* 0x01b8 */
 -	__u8	reserved1c0[8];		/* 0x01c0 */
 -	__u32	ecd;			/* 0x01c8 */
 -	__u8	reserved1cc[18];	/* 0x01cc */
 -	__u64	pp;			/* 0x01de */
 -	__u8	reserved1e6[2];		/* 0x01e6 */
 -	__u64	itdba;			/* 0x01e8 */
 -	__u64   riccbd;			/* 0x01f0 */
 -	__u64	gvrd;			/* 0x01f8 */
 +	__u8	reserved1a4[92];	/* 0x01a4 */
  } __attribute__((packed));
  
 -struct kvm_s390_itdb {
 -	__u8	data[256];
 -} __packed;
 -
 -struct sie_page {
 -	struct kvm_s390_sie_block sie_block;
 -	__u8 reserved200[1024];		/* 0x0200 */
 -	struct kvm_s390_itdb itdb;	/* 0x0600 */
 -	__u8 reserved700[2304];		/* 0x0700 */
 -} __packed;
 -
  struct kvm_vcpu_stat {
++<<<<<<< HEAD
 +	u32 exit_userspace;
 +	u32 exit_null;
 +	u32 exit_external_request;
 +	u32 exit_external_interrupt;
 +	u32 exit_stop_request;
 +	u32 exit_validity;
 +	u32 exit_instruction;
 +	u32 halt_successful_poll;
 +	u32 halt_attempted_poll;
 +	u32 instruction_lctl;
 +	u32 instruction_lctlg;
 +	u32 exit_program_interruption;
 +	u32 exit_instr_and_program;
 +	u32 deliver_external_call;
 +	u32 deliver_emergency_signal;
 +	u32 deliver_service_signal;
 +	u32 deliver_virtio_interrupt;
 +	u32 deliver_stop_signal;
 +	u32 deliver_prefix_signal;
 +	u32 deliver_restart_signal;
 +	u32 deliver_program_int;
 +	u32 deliver_io_int;
 +	u32 exit_wait_state;
 +	u32 instruction_pfmf;
 +	u32 instruction_stidp;
 +	u32 instruction_spx;
 +	u32 instruction_stpx;
 +	u32 instruction_stap;
 +	u32 instruction_storage_key;
 +	u32 instruction_stsch;
 +	u32 instruction_chsc;
 +	u32 instruction_stsi;
 +	u32 instruction_stfl;
 +	u32 instruction_tprot;
 +	u32 instruction_sigp_sense;
 +	u32 instruction_sigp_sense_running;
 +	u32 instruction_sigp_external_call;
 +	u32 instruction_sigp_emergency;
 +	u32 instruction_sigp_stop;
 +	u32 instruction_sigp_arch;
 +	u32 instruction_sigp_prefix;
 +	u32 instruction_sigp_restart;
 +	u32 diagnose_10;
 +	u32 diagnose_44;
 +	u32 diagnose_9c;
++=======
+ 	u64 exit_userspace;
+ 	u64 exit_null;
+ 	u64 exit_external_request;
+ 	u64 exit_external_interrupt;
+ 	u64 exit_stop_request;
+ 	u64 exit_validity;
+ 	u64 exit_instruction;
+ 	u64 exit_pei;
+ 	u64 halt_successful_poll;
+ 	u64 halt_attempted_poll;
+ 	u64 halt_poll_invalid;
+ 	u64 halt_wakeup;
+ 	u64 instruction_lctl;
+ 	u64 instruction_lctlg;
+ 	u64 instruction_stctl;
+ 	u64 instruction_stctg;
+ 	u64 exit_program_interruption;
+ 	u64 exit_instr_and_program;
+ 	u64 exit_operation_exception;
+ 	u64 deliver_external_call;
+ 	u64 deliver_emergency_signal;
+ 	u64 deliver_service_signal;
+ 	u64 deliver_virtio_interrupt;
+ 	u64 deliver_stop_signal;
+ 	u64 deliver_prefix_signal;
+ 	u64 deliver_restart_signal;
+ 	u64 deliver_program_int;
+ 	u64 deliver_io_int;
+ 	u64 exit_wait_state;
+ 	u64 instruction_pfmf;
+ 	u64 instruction_stidp;
+ 	u64 instruction_spx;
+ 	u64 instruction_stpx;
+ 	u64 instruction_stap;
+ 	u64 instruction_storage_key;
+ 	u64 instruction_ipte_interlock;
+ 	u64 instruction_stsch;
+ 	u64 instruction_chsc;
+ 	u64 instruction_stsi;
+ 	u64 instruction_stfl;
+ 	u64 instruction_tprot;
+ 	u64 instruction_sie;
+ 	u64 instruction_essa;
+ 	u64 instruction_sthyi;
+ 	u64 instruction_sigp_sense;
+ 	u64 instruction_sigp_sense_running;
+ 	u64 instruction_sigp_external_call;
+ 	u64 instruction_sigp_emergency;
+ 	u64 instruction_sigp_cond_emergency;
+ 	u64 instruction_sigp_start;
+ 	u64 instruction_sigp_stop;
+ 	u64 instruction_sigp_stop_store_status;
+ 	u64 instruction_sigp_store_status;
+ 	u64 instruction_sigp_store_adtl_status;
+ 	u64 instruction_sigp_arch;
+ 	u64 instruction_sigp_prefix;
+ 	u64 instruction_sigp_restart;
+ 	u64 instruction_sigp_init_cpu_reset;
+ 	u64 instruction_sigp_cpu_reset;
+ 	u64 instruction_sigp_unknown;
+ 	u64 diagnose_10;
+ 	u64 diagnose_44;
+ 	u64 diagnose_9c;
+ 	u64 diagnose_258;
+ 	u64 diagnose_308;
+ 	u64 diagnose_500;
++>>>>>>> 8a7e75d47b68 (KVM: Add provisioning for ulong vm stats and u64 vcpu stats)
  };
  
 -#define PGM_OPERATION			0x01
 -#define PGM_PRIVILEGED_OP		0x02
 -#define PGM_EXECUTE			0x03
 -#define PGM_PROTECTION			0x04
 -#define PGM_ADDRESSING			0x05
 -#define PGM_SPECIFICATION		0x06
 -#define PGM_DATA			0x07
 -#define PGM_FIXED_POINT_OVERFLOW	0x08
 -#define PGM_FIXED_POINT_DIVIDE		0x09
 -#define PGM_DECIMAL_OVERFLOW		0x0a
 -#define PGM_DECIMAL_DIVIDE		0x0b
 -#define PGM_HFP_EXPONENT_OVERFLOW	0x0c
 -#define PGM_HFP_EXPONENT_UNDERFLOW	0x0d
 -#define PGM_HFP_SIGNIFICANCE		0x0e
 -#define PGM_HFP_DIVIDE			0x0f
 -#define PGM_SEGMENT_TRANSLATION		0x10
 -#define PGM_PAGE_TRANSLATION		0x11
 -#define PGM_TRANSLATION_SPEC		0x12
 -#define PGM_SPECIAL_OPERATION		0x13
 -#define PGM_OPERAND			0x15
 -#define PGM_TRACE_TABEL			0x16
 -#define PGM_VECTOR_PROCESSING		0x1b
 -#define PGM_SPACE_SWITCH		0x1c
 -#define PGM_HFP_SQUARE_ROOT		0x1d
 -#define PGM_PC_TRANSLATION_SPEC		0x1f
 -#define PGM_AFX_TRANSLATION		0x20
 -#define PGM_ASX_TRANSLATION		0x21
 -#define PGM_LX_TRANSLATION		0x22
 -#define PGM_EX_TRANSLATION		0x23
 -#define PGM_PRIMARY_AUTHORITY		0x24
 -#define PGM_SECONDARY_AUTHORITY		0x25
 -#define PGM_LFX_TRANSLATION		0x26
 -#define PGM_LSX_TRANSLATION		0x27
 -#define PGM_ALET_SPECIFICATION		0x28
 -#define PGM_ALEN_TRANSLATION		0x29
 -#define PGM_ALE_SEQUENCE		0x2a
 -#define PGM_ASTE_VALIDITY		0x2b
 -#define PGM_ASTE_SEQUENCE		0x2c
 -#define PGM_EXTENDED_AUTHORITY		0x2d
 -#define PGM_LSTE_SEQUENCE		0x2e
 -#define PGM_ASTE_INSTANCE		0x2f
 -#define PGM_STACK_FULL			0x30
 -#define PGM_STACK_EMPTY			0x31
 -#define PGM_STACK_SPECIFICATION		0x32
 -#define PGM_STACK_TYPE			0x33
 -#define PGM_STACK_OPERATION		0x34
 -#define PGM_ASCE_TYPE			0x38
 -#define PGM_REGION_FIRST_TRANS		0x39
 -#define PGM_REGION_SECOND_TRANS		0x3a
 -#define PGM_REGION_THIRD_TRANS		0x3b
 -#define PGM_MONITOR			0x40
 -#define PGM_PER				0x80
 -#define PGM_CRYPTO_OPERATION		0x119
 +struct kvm_s390_io_info {
 +	__u16        subchannel_id;            /* 0x0b8 */
 +	__u16        subchannel_nr;            /* 0x0ba */
 +	__u32        io_int_parm;              /* 0x0bc */
 +	__u32        io_int_word;              /* 0x0c0 */
 +};
  
 -/* irq types in order of priority */
 -enum irq_types {
 -	IRQ_PEND_MCHK_EX = 0,
 -	IRQ_PEND_SVC,
 -	IRQ_PEND_PROG,
 -	IRQ_PEND_MCHK_REP,
 -	IRQ_PEND_EXT_IRQ_KEY,
 -	IRQ_PEND_EXT_MALFUNC,
 -	IRQ_PEND_EXT_EMERGENCY,
 -	IRQ_PEND_EXT_EXTERNAL,
 -	IRQ_PEND_EXT_CLOCK_COMP,
 -	IRQ_PEND_EXT_CPU_TIMER,
 -	IRQ_PEND_EXT_TIMING,
 -	IRQ_PEND_EXT_SERVICE,
 -	IRQ_PEND_EXT_HOST,
 -	IRQ_PEND_PFAULT_INIT,
 -	IRQ_PEND_PFAULT_DONE,
 -	IRQ_PEND_VIRTIO,
 -	IRQ_PEND_IO_ISC_0,
 -	IRQ_PEND_IO_ISC_1,
 -	IRQ_PEND_IO_ISC_2,
 -	IRQ_PEND_IO_ISC_3,
 -	IRQ_PEND_IO_ISC_4,
 -	IRQ_PEND_IO_ISC_5,
 -	IRQ_PEND_IO_ISC_6,
 -	IRQ_PEND_IO_ISC_7,
 -	IRQ_PEND_SIGP_STOP,
 -	IRQ_PEND_RESTART,
 -	IRQ_PEND_SET_PREFIX,
 -	IRQ_PEND_COUNT
 +struct kvm_s390_ext_info {
 +	__u32 ext_params;
 +	__u64 ext_params2;
  };
  
 -/* We have 2M for virtio device descriptor pages. Smallest amount of
 - * memory per page is 24 bytes (1 queue), so (2048*1024) / 24 = 87381
 - */
 -#define KVM_S390_MAX_VIRTIO_IRQS 87381
 +#define PGM_OPERATION            0x01
 +#define PGM_PRIVILEGED_OP	 0x02
 +#define PGM_EXECUTE              0x03
 +#define PGM_PROTECTION           0x04
 +#define PGM_ADDRESSING           0x05
 +#define PGM_SPECIFICATION        0x06
 +#define PGM_DATA                 0x07
  
 -/*
 - * Repressible (non-floating) machine check interrupts
 - * subclass bits in MCIC
 - */
 -#define MCHK_EXTD_BIT 58
 -#define MCHK_DEGR_BIT 56
 -#define MCHK_WARN_BIT 55
 -#define MCHK_REP_MASK ((1UL << MCHK_DEGR_BIT) | \
 -		       (1UL << MCHK_EXTD_BIT) | \
 -		       (1UL << MCHK_WARN_BIT))
 +struct kvm_s390_pgm_info {
 +	__u16 code;
 +};
  
 -/* Exigent machine check interrupts subclass bits in MCIC */
 -#define MCHK_SD_BIT 63
 -#define MCHK_PD_BIT 62
 -#define MCHK_EX_MASK ((1UL << MCHK_SD_BIT) | (1UL << MCHK_PD_BIT))
 +struct kvm_s390_prefix_info {
 +	__u32 address;
 +};
  
 -#define IRQ_PEND_EXT_MASK ((1UL << IRQ_PEND_EXT_IRQ_KEY)    | \
 -			   (1UL << IRQ_PEND_EXT_CLOCK_COMP) | \
 -			   (1UL << IRQ_PEND_EXT_CPU_TIMER)  | \
 -			   (1UL << IRQ_PEND_EXT_MALFUNC)    | \
 -			   (1UL << IRQ_PEND_EXT_EMERGENCY)  | \
 -			   (1UL << IRQ_PEND_EXT_EXTERNAL)   | \
 -			   (1UL << IRQ_PEND_EXT_TIMING)     | \
 -			   (1UL << IRQ_PEND_EXT_HOST)       | \
 -			   (1UL << IRQ_PEND_EXT_SERVICE)    | \
 -			   (1UL << IRQ_PEND_VIRTIO)         | \
 -			   (1UL << IRQ_PEND_PFAULT_INIT)    | \
 -			   (1UL << IRQ_PEND_PFAULT_DONE))
 +struct kvm_s390_extcall_info {
 +	__u16 code;
 +};
  
 -#define IRQ_PEND_IO_MASK ((1UL << IRQ_PEND_IO_ISC_0) | \
 -			  (1UL << IRQ_PEND_IO_ISC_1) | \
 -			  (1UL << IRQ_PEND_IO_ISC_2) | \
 -			  (1UL << IRQ_PEND_IO_ISC_3) | \
 -			  (1UL << IRQ_PEND_IO_ISC_4) | \
 -			  (1UL << IRQ_PEND_IO_ISC_5) | \
 -			  (1UL << IRQ_PEND_IO_ISC_6) | \
 -			  (1UL << IRQ_PEND_IO_ISC_7))
 +struct kvm_s390_emerg_info {
 +	__u16 code;
 +};
  
 -#define IRQ_PEND_MCHK_MASK ((1UL << IRQ_PEND_MCHK_REP) | \
 -			    (1UL << IRQ_PEND_MCHK_EX))
 +struct kvm_s390_mchk_info {
 +	__u64 cr14;
 +	__u64 mcic;
 +};
  
  struct kvm_s390_interrupt_info {
  	struct list_head list;
diff --cc arch/x86/include/asm/kvm_host.h
index e9b71b8ce24b,67c8f5268af5..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -695,31 -803,32 +695,55 @@@ struct kvm_vm_stat 
  };
  
  struct kvm_vcpu_stat {
- 	u32 pf_fixed;
- 	u32 pf_guest;
- 	u32 tlb_flush;
- 	u32 invlpg;
+ 	u64 pf_fixed;
+ 	u64 pf_guest;
+ 	u64 tlb_flush;
+ 	u64 invlpg;
  
++<<<<<<< HEAD
 +	u32 exits;
 +	u32 io_exits;
 +	u32 mmio_exits;
 +	u32 signal_exits;
 +	u32 irq_window_exits;
 +	u32 nmi_window_exits;
 +	u32 halt_exits;
 +	u32 halt_successful_poll;
 +	u32 halt_attempted_poll;
 +	u32 halt_wakeup;
 +	u32 request_irq_exits;
 +	u32 irq_exits;
 +	u32 host_state_reload;
 +	u32 efer_reload;
 +	u32 fpu_reload;
 +	u32 insn_emulation;
 +	u32 insn_emulation_fail;
 +	u32 hypercalls;
 +	u32 irq_injections;
 +	u32 nmi_injections;
++=======
+ 	u64 exits;
+ 	u64 io_exits;
+ 	u64 mmio_exits;
+ 	u64 signal_exits;
+ 	u64 irq_window_exits;
+ 	u64 nmi_window_exits;
+ 	u64 halt_exits;
+ 	u64 halt_successful_poll;
+ 	u64 halt_attempted_poll;
+ 	u64 halt_poll_invalid;
+ 	u64 halt_wakeup;
+ 	u64 request_irq_exits;
+ 	u64 irq_exits;
+ 	u64 host_state_reload;
+ 	u64 efer_reload;
+ 	u64 fpu_reload;
+ 	u64 insn_emulation;
+ 	u64 insn_emulation_fail;
+ 	u64 hypercalls;
+ 	u64 irq_injections;
+ 	u64 nmi_injections;
++>>>>>>> 8a7e75d47b68 (KVM: Add provisioning for ulong vm stats and u64 vcpu stats)
  };
  
  struct x86_instruction_info;
* Unmerged path arch/arm64/include/asm/kvm_host.h
* Unmerged path arch/arm/include/asm/kvm_host.h
* Unmerged path arch/arm64/include/asm/kvm_host.h
* Unmerged path arch/mips/include/asm/kvm_host.h
* Unmerged path arch/powerpc/include/asm/kvm_host.h
* Unmerged path arch/s390/include/asm/kvm_host.h
* Unmerged path arch/x86/include/asm/kvm_host.h
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 72de0bcb7df9..76153de7fb2e 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -3532,7 +3532,7 @@ static int vm_stat_get_per_vm(void *data, u64 *val)
 {
 	struct kvm_stat_data *stat_data = (struct kvm_stat_data *)data;
 
-	*val = *(u32 *)((void *)stat_data->kvm + stat_data->offset);
+	*val = *(ulong *)((void *)stat_data->kvm + stat_data->offset);
 
 	return 0;
 }
@@ -3562,7 +3562,7 @@ static int vcpu_stat_get_per_vm(void *data, u64 *val)
 	*val = 0;
 
 	kvm_for_each_vcpu(i, vcpu, stat_data->kvm)
-		*val += *(u32 *)((void *)vcpu + stat_data->offset);
+		*val += *(u64 *)((void *)vcpu + stat_data->offset);
 
 	return 0;
 }
