mlx4_en: Replace ndo_add/del_vxlan_port with ndo_add/del_udp_enc_port

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit a831274a1346913c145797ddee6f39e30e061318
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a831274a.failed

This change replaces the network device operations for adding or removing a
VXLAN port with operations that are more generically defined to be used for
any UDP offload port but provide a type.  As such by just adding a line to
verify that the offload type is VXLAN we can maintain the same
functionality.

In addition I updated the socket address family check so that instead of
excluding IPv6 we instead abort of type is not IPv4.  This makes much more
sense as we should only be supporting IPv4 outer addresses on this
hardware.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a831274a1346913c145797ddee6f39e30e061318)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_netdev.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 5e3b15bcd2e7,8e318d21321f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@@ -2600,12 -2511,10 +2605,15 @@@ static const struct net_device_ops mlx4
  	.ndo_rx_flow_steer	= mlx4_en_filter_rfs,
  #endif
  	.ndo_get_phys_port_id	= mlx4_en_get_phys_port_id,
- #ifdef CONFIG_MLX4_EN_VXLAN
- 	.ndo_add_vxlan_port	= mlx4_en_add_vxlan_port,
- 	.ndo_del_vxlan_port	= mlx4_en_del_vxlan_port,
+ 	.ndo_udp_tunnel_add	= mlx4_en_add_vxlan_port,
+ 	.ndo_udp_tunnel_del	= mlx4_en_del_vxlan_port,
  	.ndo_features_check	= mlx4_en_features_check,
++<<<<<<< HEAD
 +#endif
 +	.extended.ndo_set_tx_maxrate	= mlx4_en_set_tx_maxrate,
++=======
+ 	.ndo_set_tx_maxrate	= mlx4_en_set_tx_maxrate,
++>>>>>>> a831274a1346 (mlx4_en: Replace ndo_add/del_vxlan_port with ndo_add/del_udp_enc_port)
  };
  
  static const struct net_device_ops mlx4_netdev_ops_master = {
@@@ -2639,95 -2547,12 +2647,98 @@@
  	.ndo_rx_flow_steer	= mlx4_en_filter_rfs,
  #endif
  	.ndo_get_phys_port_id	= mlx4_en_get_phys_port_id,
- #ifdef CONFIG_MLX4_EN_VXLAN
- 	.ndo_add_vxlan_port	= mlx4_en_add_vxlan_port,
- 	.ndo_del_vxlan_port	= mlx4_en_del_vxlan_port,
+ 	.ndo_udp_tunnel_add	= mlx4_en_add_vxlan_port,
+ 	.ndo_udp_tunnel_del	= mlx4_en_del_vxlan_port,
  	.ndo_features_check	= mlx4_en_features_check,
++<<<<<<< HEAD
 +#endif
 +	.extended.ndo_set_tx_maxrate	= mlx4_en_set_tx_maxrate,
++=======
+ 	.ndo_set_tx_maxrate	= mlx4_en_set_tx_maxrate,
++>>>>>>> a831274a1346 (mlx4_en: Replace ndo_add/del_vxlan_port with ndo_add/del_udp_enc_port)
  };
  
 +void mlx4_en_update_pfc_stats_bitmap(struct mlx4_dev *dev,
 +				     struct mlx4_en_stats_bitmap *stats_bitmap,
 +				     u8 rx_ppp, u8 rx_pause,
 +				     u8 tx_ppp, u8 tx_pause)
 +{
 +	int last_i = NUM_MAIN_STATS + NUM_PORT_STATS + NUM_PF_STATS;
 +
 +	if (!mlx4_is_slave(dev) &&
 +	    (dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_FLOWSTATS_EN)) {
 +		mutex_lock(&stats_bitmap->mutex);
 +		bitmap_clear(stats_bitmap->bitmap, last_i, NUM_FLOW_STATS);
 +
 +		if (rx_ppp)
 +			bitmap_set(stats_bitmap->bitmap, last_i,
 +				   NUM_FLOW_PRIORITY_STATS_RX);
 +		last_i += NUM_FLOW_PRIORITY_STATS_RX;
 +
 +		if (rx_pause && !(rx_ppp))
 +			bitmap_set(stats_bitmap->bitmap, last_i,
 +				   NUM_FLOW_STATS_RX);
 +		last_i += NUM_FLOW_STATS_RX;
 +
 +		if (tx_ppp)
 +			bitmap_set(stats_bitmap->bitmap, last_i,
 +				   NUM_FLOW_PRIORITY_STATS_TX);
 +		last_i += NUM_FLOW_PRIORITY_STATS_TX;
 +
 +		if (tx_pause && !(tx_ppp))
 +			bitmap_set(stats_bitmap->bitmap, last_i,
 +				   NUM_FLOW_STATS_TX);
 +		last_i += NUM_FLOW_STATS_TX;
 +
 +		mutex_unlock(&stats_bitmap->mutex);
 +	}
 +}
 +
 +void mlx4_en_set_stats_bitmap(struct mlx4_dev *dev,
 +			      struct mlx4_en_stats_bitmap *stats_bitmap,
 +			      u8 rx_ppp, u8 rx_pause,
 +			      u8 tx_ppp, u8 tx_pause)
 +{
 +	int last_i = 0;
 +
 +	mutex_init(&stats_bitmap->mutex);
 +	bitmap_zero(stats_bitmap->bitmap, NUM_ALL_STATS);
 +
 +	if (mlx4_is_slave(dev)) {
 +		bitmap_set(stats_bitmap->bitmap, last_i +
 +					 MLX4_FIND_NETDEV_STAT(rx_packets), 1);
 +		bitmap_set(stats_bitmap->bitmap, last_i +
 +					 MLX4_FIND_NETDEV_STAT(tx_packets), 1);
 +		bitmap_set(stats_bitmap->bitmap, last_i +
 +					 MLX4_FIND_NETDEV_STAT(rx_bytes), 1);
 +		bitmap_set(stats_bitmap->bitmap, last_i +
 +					 MLX4_FIND_NETDEV_STAT(tx_bytes), 1);
 +		bitmap_set(stats_bitmap->bitmap, last_i +
 +					 MLX4_FIND_NETDEV_STAT(rx_dropped), 1);
 +		bitmap_set(stats_bitmap->bitmap, last_i +
 +					 MLX4_FIND_NETDEV_STAT(tx_dropped), 1);
 +	} else {
 +		bitmap_set(stats_bitmap->bitmap, last_i, NUM_MAIN_STATS);
 +	}
 +	last_i += NUM_MAIN_STATS;
 +
 +	bitmap_set(stats_bitmap->bitmap, last_i, NUM_PORT_STATS);
 +	last_i += NUM_PORT_STATS;
 +
 +	if (mlx4_is_master(dev))
 +		bitmap_set(stats_bitmap->bitmap, last_i,
 +			   NUM_PF_STATS);
 +	last_i += NUM_PF_STATS;
 +
 +	mlx4_en_update_pfc_stats_bitmap(dev, stats_bitmap,
 +					rx_ppp, rx_pause,
 +					tx_ppp, tx_pause);
 +	last_i += NUM_FLOW_STATS;
 +
 +	if (!mlx4_is_slave(dev))
 +		bitmap_set(stats_bitmap->bitmap, last_i, NUM_PKT_STATS);
 +}
 +
  struct mlx4_en_bond {
  	struct work_struct work;
  	struct mlx4_en_priv *priv;
diff --git a/drivers/net/ethernet/mellanox/mlx4/Kconfig b/drivers/net/ethernet/mellanox/mlx4/Kconfig
index 1486ce902a56..1a6e1887a171 100644
--- a/drivers/net/ethernet/mellanox/mlx4/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx4/Kconfig
@@ -23,13 +23,6 @@ config MLX4_EN_DCB
 
 	  If unsure, set to Y
 
-config MLX4_EN_VXLAN
-	bool "VXLAN offloads Support"
-	default y
-	depends on MLX4_EN && VXLAN && !(MLX4_EN=y && VXLAN=m)
-	---help---
-	  Say Y here if you want to use VXLAN offloads in the driver.
-
 config MLX4_CORE
 	tristate
 	depends on PCI
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_netdev.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index 54b1e1a61da0..1a6ef4e002d3 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -555,10 +555,8 @@ struct mlx4_en_priv {
 	struct work_struct linkstate_task;
 	struct delayed_work stats_task;
 	struct delayed_work service_task;
-#ifdef CONFIG_MLX4_EN_VXLAN
 	struct work_struct vxlan_add_task;
 	struct work_struct vxlan_del_task;
-#endif
 	struct mlx4_en_perf_stats pstats;
 	struct mlx4_en_pkt_stats pkstats;
 	struct mlx4_en_counter_stats pf_stats;
