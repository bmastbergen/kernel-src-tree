pmem: reduce kmap_atomic sections to the memcpys only

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Vishal Verma <vishal.l.verma@intel.com>
commit bd697a80c329072b991475fa6608bb0e665b3d90
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bd697a80.failed

pmem_do_bvec used to kmap_atomic at the begin, and only unmap at the
end. Things like nvdimm_clear_poison may want to do nvdimm subsystem
bookkeeping operations that may involve taking locks or doing memory
allocations, and we can't do that from the atomic context. Reduce the
atomic context to just what needs it - the memcpy to/from pmem.

	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit bd697a80c329072b991475fa6608bb0e665b3d90)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/pmem.c
diff --cc drivers/nvdimm/pmem.c
index c66d94ebde57,42b3a8217073..000000000000
--- a/drivers/nvdimm/pmem.c
+++ b/drivers/nvdimm/pmem.c
@@@ -66,8 -66,28 +66,28 @@@ static void pmem_clear_poison(struct pm
  	invalidate_pmem(pmem->virt_addr + offset, len);
  }
  
+ static void write_pmem(void *pmem_addr, struct page *page,
+ 		unsigned int off, unsigned int len)
+ {
+ 	void *mem = kmap_atomic(page);
+ 
+ 	memcpy_to_pmem(pmem_addr, mem + off, len);
+ 	kunmap_atomic(mem);
+ }
+ 
+ static int read_pmem(struct page *page, unsigned int off,
+ 		void *pmem_addr, unsigned int len)
+ {
+ 	int rc;
+ 	void *mem = kmap_atomic(page);
+ 
+ 	rc = memcpy_from_pmem(mem + off, pmem_addr, len);
+ 	kunmap_atomic(mem);
+ 	return rc;
+ }
+ 
  static int pmem_do_bvec(struct pmem_device *pmem, struct page *page,
 -			unsigned int len, unsigned int off, bool is_write,
 +			unsigned int len, unsigned int off, int rw,
  			sector_t sector)
  {
  	int rc = 0;
@@@ -83,7 -102,7 +102,11 @@@
  		if (unlikely(bad_pmem))
  			rc = -EIO;
  		else {
++<<<<<<< HEAD
 +			memcpy_from_pmem(mem + off, pmem_addr, len);
++=======
+ 			rc = read_pmem(page, off, pmem_addr, len);
++>>>>>>> bd697a80c329 (pmem: reduce kmap_atomic sections to the memcpys only)
  			flush_dcache_page(page);
  		}
  	} else {
* Unmerged path drivers/nvdimm/pmem.c
