GFS2: Made logd daemon take into account log demand

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Bob Peterson <rpeterso@redhat.com>
commit f07b352021483a3a38f081dc284928400a9c1d2c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f07b3520.failed

Before this patch, the logd daemon only tried to flush things when
the log blocks pinned exceeded a certain threshold. But when we're
deleting very large files, it may require a huge number of journal
blocks, and that, in turn, may exceed the threshold. This patch
factors that into account.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit f07b352021483a3a38f081dc284928400a9c1d2c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/log.c
diff --cc fs/gfs2/log.c
index 67ed790519f8,4df349c7f022..000000000000
--- a/fs/gfs2/log.c
+++ b/fs/gfs2/log.c
@@@ -340,9 -364,14 +341,14 @@@ retry
  		} while(free_blocks <= wanted);
  		finish_wait(&sdp->sd_log_waitq, &wait);
  	}
 -	atomic_inc(&sdp->sd_reserving_log);
  	if (atomic_cmpxchg(&sdp->sd_log_blks_free, free_blocks,
 -				free_blocks - blks) != free_blocks) {
 -		if (atomic_dec_and_test(&sdp->sd_reserving_log))
 -			wake_up(&sdp->sd_reserving_log_wait);
 +				free_blocks - blks) != free_blocks)
  		goto retry;
++<<<<<<< HEAD
++=======
+ 	}
+ 	atomic_sub(blks, &sdp->sd_log_blks_needed);
++>>>>>>> f07b35202148 (GFS2: Made logd daemon take into account log demand)
  	trace_gfs2_log_blocks(sdp, -blks);
  
  	/*
diff --git a/fs/gfs2/incore.h b/fs/gfs2/incore.h
index 435f6cce6f7a..f0e81e698e90 100644
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@ -778,6 +778,7 @@ struct gfs2_sbd {
 	atomic_t sd_log_thresh1;
 	atomic_t sd_log_thresh2;
 	atomic_t sd_log_blks_free;
+	atomic_t sd_log_blks_needed;
 	wait_queue_head_t sd_log_waitq;
 	wait_queue_head_t sd_logd_waitq;
 
* Unmerged path fs/gfs2/log.c
diff --git a/fs/gfs2/ops_fstype.c b/fs/gfs2/ops_fstype.c
index 0f0d292647f0..b966e7e1e39e 100644
--- a/fs/gfs2/ops_fstype.c
+++ b/fs/gfs2/ops_fstype.c
@@ -727,6 +727,7 @@ static int init_journal(struct gfs2_sbd *sdp, int undo)
 		goto fail_jindex;
 	}
 
+	atomic_set(&sdp->sd_log_blks_needed, 0);
 	if (sdp->sd_args.ar_spectator) {
 		sdp->sd_jdesc = gfs2_jdesc_find(sdp, 0);
 		atomic_set(&sdp->sd_log_blks_free, sdp->sd_jdesc->jd_blocks);
