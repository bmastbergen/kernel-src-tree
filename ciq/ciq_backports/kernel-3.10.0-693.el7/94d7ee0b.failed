l2tp: hold tunnel socket when handling control frames in l2tp_ip and l2tp_ip6

jira LE-1907
cve CVE-2016-10200
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Guillaume Nault <g.nault@alphalink.fr>
commit 94d7ee0baa8b764cf64ad91ed69464c1a6a0066b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/94d7ee0b.failed

The code following l2tp_tunnel_find() expects that a new reference is
held on sk. Either sk_receive_skb() or the discard_put error path will
drop a reference from the tunnel's socket.

This issue exists in both l2tp_ip and l2tp_ip6.

Fixes: a3c18422a4b4 ("l2tp: hold socket before dropping lock in l2tp_ip{, 6}_recv()")
	Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 94d7ee0baa8b764cf64ad91ed69464c1a6a0066b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/l2tp/l2tp_ip6.c
diff --cc net/l2tp/l2tp_ip6.c
index b296fd192ac0,516d7ce24ba7..000000000000
--- a/net/l2tp/l2tp_ip6.c
+++ b/net/l2tp/l2tp_ip6.c
@@@ -185,10 -190,11 +185,16 @@@ pass_up
  		goto discard;
  
  	tunnel_id = ntohl(*(__be32 *) &skb->data[4]);
++<<<<<<< HEAD
 +	tunnel = l2tp_tunnel_find(&init_net, tunnel_id);
 +	if (tunnel != NULL)
++=======
+ 	tunnel = l2tp_tunnel_find(net, tunnel_id);
+ 	if (tunnel) {
++>>>>>>> 94d7ee0baa8b (l2tp: hold tunnel socket when handling control frames in l2tp_ip and l2tp_ip6)
  		sk = tunnel->sock;
- 	else {
+ 		sock_hold(sk);
+ 	} else {
  		struct ipv6hdr *iph = ipv6_hdr(skb);
  
  		read_lock_bh(&l2tp_ip6_lock);
diff --git a/net/l2tp/l2tp_ip.c b/net/l2tp/l2tp_ip.c
index 3d97ef7ec584..ef9d36d40dfd 100644
--- a/net/l2tp/l2tp_ip.c
+++ b/net/l2tp/l2tp_ip.c
@@ -174,9 +174,10 @@ pass_up:
 
 	tunnel_id = ntohl(*(__be32 *) &skb->data[4]);
 	tunnel = l2tp_tunnel_find(net, tunnel_id);
-	if (tunnel != NULL)
+	if (tunnel) {
 		sk = tunnel->sock;
-	else {
+		sock_hold(sk);
+	} else {
 		struct iphdr *iph = (struct iphdr *) skb_network_header(skb);
 
 		read_lock_bh(&l2tp_ip_lock);
* Unmerged path net/l2tp/l2tp_ip6.c
