perf/x86/uncore: Use Intel family name macros for uncore

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit a07301ab3dabd1e31696c1bf1775aba24eb7573d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/a07301ab.failed

Another straightforward replacement of magic numbers

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Cc: jacob.jun.pan@intel.com
Link: http://lkml.kernel.org/r/20160603001942.537570B6@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a07301ab3dabd1e31696c1bf1775aba24eb7573d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/uncore.c
diff --cc arch/x86/events/intel/uncore.c
index 53ff22fa4cd0,4e70d2721249..000000000000
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@@ -1,4 -1,5 +1,9 @@@
++<<<<<<< HEAD
 +#include <linux/crash_dump.h>
++=======
+ #include <asm/cpu_device_id.h>
+ #include <asm/intel-family.h>
++>>>>>>> a07301ab3dab (perf/x86/uncore: Use Intel family name macros for uncore)
  #include "uncore.h"
  
  static struct intel_uncore_type *empty_uncore[] = { NULL, };
@@@ -1398,23 -1317,123 +1403,117 @@@ static int __init uncore_cpumask_init(b
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ #define X86_UNCORE_MODEL_MATCH(model, init)	\
+ 	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (unsigned long)&init }
+ 
+ struct intel_uncore_init_fun {
+ 	void	(*cpu_init)(void);
+ 	int	(*pci_init)(void);
+ };
+ 
+ static const struct intel_uncore_init_fun nhm_uncore_init __initconst = {
+ 	.cpu_init = nhm_uncore_cpu_init,
+ };
+ 
+ static const struct intel_uncore_init_fun snb_uncore_init __initconst = {
+ 	.cpu_init = snb_uncore_cpu_init,
+ 	.pci_init = snb_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun ivb_uncore_init __initconst = {
+ 	.cpu_init = snb_uncore_cpu_init,
+ 	.pci_init = ivb_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun hsw_uncore_init __initconst = {
+ 	.cpu_init = snb_uncore_cpu_init,
+ 	.pci_init = hsw_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun bdw_uncore_init __initconst = {
+ 	.cpu_init = snb_uncore_cpu_init,
+ 	.pci_init = bdw_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun snbep_uncore_init __initconst = {
+ 	.cpu_init = snbep_uncore_cpu_init,
+ 	.pci_init = snbep_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun nhmex_uncore_init __initconst = {
+ 	.cpu_init = nhmex_uncore_cpu_init,
+ };
+ 
+ static const struct intel_uncore_init_fun ivbep_uncore_init __initconst = {
+ 	.cpu_init = ivbep_uncore_cpu_init,
+ 	.pci_init = ivbep_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun hswep_uncore_init __initconst = {
+ 	.cpu_init = hswep_uncore_cpu_init,
+ 	.pci_init = hswep_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun bdx_uncore_init __initconst = {
+ 	.cpu_init = bdx_uncore_cpu_init,
+ 	.pci_init = bdx_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun knl_uncore_init __initconst = {
+ 	.cpu_init = knl_uncore_cpu_init,
+ 	.pci_init = knl_uncore_pci_init,
+ };
+ 
+ static const struct intel_uncore_init_fun skl_uncore_init __initconst = {
+ 	.pci_init = skl_uncore_pci_init,
+ };
+ 
+ static const struct x86_cpu_id intel_uncore_match[] __initconst = {
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_NEHALEM_EP,	  nhm_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_NEHALEM,	  nhm_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_WESTMERE,	  nhm_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_WESTMERE_EP,	  nhm_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,	  snb_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,	  ivb_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_CORE,	  hsw_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_ULT,	  hsw_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_GT3E,	  hsw_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_CORE, bdw_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_GT3E, bdw_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X,  snbep_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_NEHALEM_EX,	  nhmex_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_WESTMERE_EX,	  nhmex_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X,	  ivbep_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_X,	  hswep_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,	  bdx_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D, bdx_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL,	  knl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_DESKTOP,skl_uncore_init),
+ 	{},
+ };
+ 
+ MODULE_DEVICE_TABLE(x86cpu, intel_uncore_match);
+ 
++>>>>>>> a07301ab3dab (perf/x86/uncore: Use Intel family name macros for uncore)
  static int __init intel_uncore_init(void)
  {
 -	const struct x86_cpu_id *id;
 -	struct intel_uncore_init_fun *uncore_init;
 -	int pret = 0, cret = 0, ret;
 +	int pret, cret, ret;
  
 -	id = x86_match_cpu(intel_uncore_match);
 -	if (!id)
 +	if (boot_cpu_data.x86_vendor != X86_VENDOR_INTEL)
  		return -ENODEV;
  
 -	if (boot_cpu_has(X86_FEATURE_HYPERVISOR))
 +	if (cpu_has_hypervisor)
  		return -ENODEV;
  
 -	max_packages = topology_max_packages();
 +	if (is_kdump_kernel())
 +		return -ENODEV;
  
 -	uncore_init = (struct intel_uncore_init_fun *)id->driver_data;
 -	if (uncore_init->pci_init) {
 -		pret = uncore_init->pci_init();
 -		if (!pret)
 -			pret = uncore_pci_init();
 -	}
 +	max_packages = topology_max_packages();
  
 -	if (uncore_init->cpu_init) {
 -		uncore_init->cpu_init();
 -		cret = uncore_cpu_init();
 -	}
 +	pret = uncore_pci_init();
 +	cret = uncore_cpu_init();
  
  	if (cret && pret)
  		return -ENODEV;
* Unmerged path arch/x86/events/intel/uncore.c
