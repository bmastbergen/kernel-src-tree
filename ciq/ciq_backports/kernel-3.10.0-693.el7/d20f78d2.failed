x86, random: Enable the RDSEED instruction

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author H. Peter Anvin <hpa@linux.intel.com>
commit d20f78d252778e0fae8f8256e602bd682eb2185c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d20f78d2.failed

Upcoming Intel silicon adds a new RDSEED instruction, which is similar
to RDRAND but provides a stronger guarantee: unlike RDRAND, RDSEED
will always reseed the PRNG from the true random number source between
each read.  Thus, the output of RDSEED is guaranteed to be 100%
entropic, unlike RDRAND which is only architecturally guaranteed to be
1/512 entropic (although in practice is much more.)

The RDSEED instruction takes the same time to execute as RDRAND, but
RDSEED unlike RDRAND can legitimately return failure (CF=0) due to
entropy exhaustion if too many threads on too many cores are hammering
the RDSEED instruction at the same time.  Therefore, we have to be
more conservative and only use it in places where we can tolerate
failures.

This patch introduces the primitives arch_get_random_seed_{int,long}()
but does not use it yet.

	Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
	Reviewed-by: Ingo Molnar <mingo@kernel.org>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Michael Ellerman <michael@ellerman.id.au>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit d20f78d252778e0fae8f8256e602bd682eb2185c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/archrandom.h
diff --cc arch/x86/include/asm/archrandom.h
index 0d9ec770f2f8,6ad7f6d3f97f..000000000000
--- a/arch/x86/include/asm/archrandom.h
+++ b/arch/x86/include/asm/archrandom.h
@@@ -39,6 -42,30 +42,33 @@@
  
  #ifdef CONFIG_ARCH_RANDOM
  
++<<<<<<< HEAD
++=======
+ /* Instead of arch_get_random_long() when alternatives haven't run. */
+ static inline int rdrand_long(unsigned long *v)
+ {
+ 	int ok;
+ 	asm volatile("1: " RDRAND_LONG "\n\t"
+ 		     "jc 2f\n\t"
+ 		     "decl %0\n\t"
+ 		     "jnz 1b\n\t"
+ 		     "2:"
+ 		     : "=r" (ok), "=a" (*v)
+ 		     : "0" (RDRAND_RETRY_LOOPS));
+ 	return ok;
+ }
+ 
+ /* A single attempt at RDSEED */
+ static inline bool rdseed_long(unsigned long *v)
+ {
+ 	unsigned char ok;
+ 	asm volatile(RDSEED_LONG "\n\t"
+ 		     "setc %0"
+ 		     : "=qm" (ok), "=a" (*v));
+ 	return ok;
+ }
+ 
++>>>>>>> d20f78d25277 (x86, random: Enable the RDSEED instruction)
  #define GET_RANDOM(name, type, rdrand, nop)			\
  static inline int name(type *v)					\
  {								\
@@@ -66,8 -109,23 +112,26 @@@ GET_SEED(arch_get_random_seed_int, unsi
  GET_RANDOM(arch_get_random_long, unsigned long, RDRAND_LONG, ASM_NOP3);
  GET_RANDOM(arch_get_random_int, unsigned int, RDRAND_INT, ASM_NOP3);
  
+ GET_SEED(arch_get_random_seed_long, unsigned long, RDSEED_LONG, ASM_NOP4);
+ GET_SEED(arch_get_random_seed_int, unsigned int, RDSEED_INT, ASM_NOP4);
+ 
  #endif /* CONFIG_X86_64 */
  
++<<<<<<< HEAD
++=======
+ #else
+ 
+ static inline int rdrand_long(unsigned long *v)
+ {
+ 	return 0;
+ }
+ 
+ static inline bool rdseed_long(unsigned long *v)
+ {
+ 	return 0;
+ }
+ 
++>>>>>>> d20f78d25277 (x86, random: Enable the RDSEED instruction)
  #endif  /* CONFIG_ARCH_RANDOM */
  
  extern void x86_init_rdrand(struct cpuinfo_x86 *c);
diff --git a/arch/powerpc/include/asm/archrandom.h b/arch/powerpc/include/asm/archrandom.h
index d853d163ba47..801beba4e64b 100644
--- a/arch/powerpc/include/asm/archrandom.h
+++ b/arch/powerpc/include/asm/archrandom.h
@@ -27,6 +27,15 @@ static inline int arch_get_random_int(unsigned int *v)
 
 int powernv_get_random_long(unsigned long *v);
 
+static inline int arch_get_random_seed_long(unsigned long *v)
+{
+	return 0;
+}
+static inline int arch_get_random_seed_int(unsigned int *v)
+{
+	return 0;
+}
+
 #endif /* CONFIG_ARCH_RANDOM */
 
 #endif /* _ASM_POWERPC_ARCHRANDOM_H */
* Unmerged path arch/x86/include/asm/archrandom.h
diff --git a/include/linux/random.h b/include/linux/random.h
index 2214c3046110..0258dbc2251a 100644
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@ -90,6 +90,14 @@ static inline int arch_get_random_int(unsigned int *v)
 {
 	return 0;
 }
+static inline int arch_get_random_seed_long(unsigned long *v)
+{
+	return 0;
+}
+static inline int arch_get_random_seed_int(unsigned int *v)
+{
+	return 0;
+}
 #endif
 
 /* Pseudo random number generator from numerical recipes. */
