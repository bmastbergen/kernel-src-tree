mmc: core: fix multi-bit bus width without high-speed mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [mmc] core: fix multi-bit bus width without high-speed mode (Don Zickus) [1430497]
Rebuild_FUZZ: 95.50%
commit-author Anssi Hannula <anssi.hannula@bitwise.fi>
commit 3d4ef329757cfd5e0b23cce97cdeca7e2df89c99
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3d4ef329.failed

Commit 577fb13199b1 ("mmc: rework selection of bus speed mode")
refactored bus width selection code to mmc_select_bus_width().

However, it also altered the behavior to not call the selection code in
non-high-speed modes anymore.

This causes 1-bit mode to always be used when the high-speed mode is not
enabled, even though 4-bit and 8-bit bus are valid bus widths in the
backwards-compatibility (legacy) mode as well (see e.g. 5.3.2 Bus Speed
Modes in JEDEC 84-B50). This results in a significant regression in
transfer speeds.

Fix the code to allow 4-bit and 8-bit widths even without high-speed
mode, as before.

Tested with a Zynq-7000 PicoZed 7020 board.

Fixes: 577fb13199b1 ("mmc: rework selection of bus speed mode")
	Signed-off-by: Anssi Hannula <anssi.hannula@bitwise.fi>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 3d4ef329757cfd5e0b23cce97cdeca7e2df89c99)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/mmc.c
diff --cc drivers/mmc/core/mmc.c
index cf527a963114,0fccca075e29..000000000000
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@@ -1706,10 -1706,10 +1706,14 @@@ static int mmc_init_card(struct mmc_hos
  		err = mmc_select_hs400(card);
  		if (err)
  			goto free_card;
- 	} else if (mmc_card_hs(card)) {
+ 	} else {
  		/* Select the desired bus width optionally */
  		err = mmc_select_bus_width(card);
++<<<<<<< HEAD
 +		if (!IS_ERR_VALUE(err)) {
++=======
+ 		if (err > 0 && mmc_card_hs(card)) {
++>>>>>>> 3d4ef329757c (mmc: core: fix multi-bit bus width without high-speed mode)
  			err = mmc_select_hs_ddr(card);
  			if (err)
  				goto free_card;
* Unmerged path drivers/mmc/core/mmc.c
