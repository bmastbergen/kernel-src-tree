random: fix BUG_ON caused by accounting simplification

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit f9c6d4987b23e0a514464bae6771933a48e4cd01
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f9c6d498.failed

Commit ee1de406ba6eb1 ("random: simplify accounting logic") simplified
things too much, in that it allows the following to trigger an
overflow that results in a BUG_ON crash:

dd if=/dev/urandom of=/dev/zero bs=67108707 count=1

Thanks to Peter Zihlstra for discovering the crash, and Hannes
Frederic for analyizing the root cause.

	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
	Reported-by: Peter Zijlstra <peterz@infradead.org>
	Reported-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Cc: Greg Price <price@mit.edu>
(cherry picked from commit f9c6d4987b23e0a514464bae6771933a48e4cd01)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
diff --cc drivers/char/random.c
index e014a74135d7,102c50d38902..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -964,28 -990,22 +964,38 @@@ retry
  	entropy_count = orig = ACCESS_ONCE(r->entropy_count);
  	have_bytes = entropy_count >> (ENTROPY_SHIFT + 3);
  	ibytes = nbytes;
 -	/* If limited, never pull more than available */
 -	if (r->limit)
 -		ibytes = min_t(size_t, ibytes, have_bytes - reserved);
 -	if (ibytes < min)
 +	if (have_bytes < min + reserved) {
  		ibytes = 0;
++<<<<<<< HEAD
 +	} else {
 +		/* If limited, never pull more than available */
 +		if (r->limit)
 +			ibytes = min_t(size_t, ibytes, have_bytes - reserved);
 +		entropy_count = max_t(int, 0,
 +			    entropy_count - (ibytes << (ENTROPY_SHIFT + 3)));
 +		if (cmpxchg(&r->entropy_count, orig, entropy_count) != orig)
 +			goto retry;
++=======
+ 	if (have_bytes >= ibytes + reserved)
+ 		entropy_count -= ibytes << (ENTROPY_SHIFT + 3);
+ 	else
+ 		entropy_count = reserved << (ENTROPY_SHIFT + 3);
+ 
+ 	if (cmpxchg(&r->entropy_count, orig, entropy_count) != orig)
+ 		goto retry;
++>>>>>>> f9c6d4987b23 (random: fix BUG_ON caused by accounting simplification)
 +
 +		if ((r->entropy_count >> ENTROPY_SHIFT)
 +		    < random_write_wakeup_thresh)
 +			wakeup_write = 1;
 +	}
 +
 +	DEBUG_ENT("debiting %zu entropy credits from %s%s\n",
 +		  ibytes * 8, r->name, r->limit ? "" : " (unlimited)");
  
 -	trace_debit_entropy(r->name, 8 * ibytes);
 -	if (ibytes &&
 -	    (r->entropy_count >> ENTROPY_SHIFT) < random_write_wakeup_bits) {
 +	spin_unlock_irqrestore(&r->lock, flags);
 +
 +	if (wakeup_write) {
  		wake_up_interruptible(&random_write_wait);
  		kill_fasync(&fasync, SIGIO, POLL_OUT);
  	}
* Unmerged path drivers/char/random.c
