random: push extra entropy to the output pools

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit 6265e169cd313d6f3aad3c33d0a5b0d9624f69f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6265e169.failed

As the input pool gets filled, start transfering entropy to the output
pools until they get filled.  This allows us to use the output pools
to store more system entropy.  Waste not, want not....

	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
(cherry picked from commit 6265e169cd313d6f3aad3c33d0a5b0d9624f69f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
diff --cc drivers/char/random.c
index 8af0249a0366,84c576ec20e9..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -656,12 -662,11 +663,19 @@@ retry
  	if (cmpxchg(&r->entropy_count, orig, entropy_count) != orig)
  		goto retry;
  
+ 	r->entropy_total += nbits;
  	if (!r->initialized && nbits > 0) {
++<<<<<<< HEAD
 +		r->entropy_total += nbits;
 +		if (r->entropy_total > 128) {
 +			r->initialized = 1;
 +			if (r == &nonblocking_pool)
 +				prandom_reseed_late();
++=======
+ 		if (r->entropy_total > 128) {
+ 			r->initialized = 1;
+ 			r->entropy_total = 0;
++>>>>>>> 6265e169cd31 (random: push extra entropy to the output pools)
  		}
  	}
  
* Unmerged path drivers/char/random.c
diff --git a/include/trace/events/random.h b/include/trace/events/random.h
index 2ffcaec5860a..527b5dc1b416 100644
--- a/include/trace/events/random.h
+++ b/include/trace/events/random.h
@@ -87,6 +87,28 @@ TRACE_EVENT(credit_entropy_bits,
 		  (void *)__entry->IP)
 );
 
+TRACE_EVENT(push_to_pool,
+	TP_PROTO(const char *pool_name, int pool_bits, int input_bits),
+
+	TP_ARGS(pool_name, pool_bits, input_bits),
+
+	TP_STRUCT__entry(
+		__field( const char *,	pool_name		)
+		__field(	  int,	pool_bits		)
+		__field(	  int,	input_bits		)
+	),
+
+	TP_fast_assign(
+		__entry->pool_name	= pool_name;
+		__entry->pool_bits	= pool_bits;
+		__entry->input_bits	= input_bits;
+	),
+
+	TP_printk("%s: pool_bits %d input_pool_bits %d",
+		  __entry->pool_name, __entry->pool_bits,
+		  __entry->input_bits)
+);
+
 DECLARE_EVENT_CLASS(random__get_random_bytes,
 	TP_PROTO(int nbytes, unsigned long IP),
 
