NTB: Fix issue where we may be accessing NULL ptr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [ntb] Fix issue where we may be accessing NULL ptr (Suravee Suthikulpanit) [1303727]
Rebuild_FUZZ: 94.62%
commit-author Dave Jiang <dave.jiang@intel.com>
commit 04afde45e096201f8fd74c1db848a5d85d1aa57d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/04afde45.failed

smatch detected an issue in the function ntb_transport_max_size() where
we could be dereferencing a dma channel pointer when it is NULL.

	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Dave Jiang <dave.jiang@intel.com>
	Signed-off-by: Jon Mason <jdmason@kudzu.us>
(cherry picked from commit 04afde45e096201f8fd74c1db848a5d85d1aa57d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ntb/ntb_transport.c
diff --cc drivers/ntb/ntb_transport.c
index 0d5e96e60628,3903dfc39975..000000000000
--- a/drivers/ntb/ntb_transport.c
+++ b/drivers/ntb/ntb_transport.c
@@@ -1772,18 -1996,100 +1772,36 @@@ EXPORT_SYMBOL_GPL(ntb_transport_qp_num)
   */
  unsigned int ntb_transport_max_size(struct ntb_transport_qp *qp)
  {
++<<<<<<< HEAD
 +	unsigned int max;
++=======
+ 	unsigned int max_size;
+ 	unsigned int copy_align;
+ 	struct dma_chan *rx_chan, *tx_chan;
++>>>>>>> 04afde45e096 (NTB: Fix issue where we may be accessing NULL ptr)
  
  	if (!qp)
  		return 0;
  
++<<<<<<< HEAD
 +	if (!qp->dma_chan)
 +		return qp->tx_max_frame - sizeof(struct ntb_payload_header);
 +
 +	/* If DMA engine usage is possible, try to find the max size for that */
 +	max = qp->tx_max_frame - sizeof(struct ntb_payload_header);
 +	max -= max % (1 << qp->dma_chan->device->copy_align);
++=======
+ 	rx_chan = qp->rx_dma_chan;
+ 	tx_chan = qp->tx_dma_chan;
  
- 	return max;
+ 	copy_align = max(rx_chan ? rx_chan->device->copy_align : 0,
+ 			 tx_chan ? tx_chan->device->copy_align : 0);
+ 
+ 	/* If DMA engine usage is possible, try to find the max size for that */
+ 	max_size = qp->tx_max_frame - sizeof(struct ntb_payload_header);
+ 	max_size = round_down(max_size, 1 << copy_align);
++>>>>>>> 04afde45e096 (NTB: Fix issue where we may be accessing NULL ptr)
+ 
+ 	return max_size;
  }
  EXPORT_SYMBOL_GPL(ntb_transport_max_size);
 -
 -unsigned int ntb_transport_tx_free_entry(struct ntb_transport_qp *qp)
 -{
 -	unsigned int head = qp->tx_index;
 -	unsigned int tail = qp->remote_rx_info->entry;
 -
 -	return tail > head ? tail - head : qp->tx_max_entry + tail - head;
 -}
 -EXPORT_SYMBOL_GPL(ntb_transport_tx_free_entry);
 -
 -static void ntb_transport_doorbell_callback(void *data, int vector)
 -{
 -	struct ntb_transport_ctx *nt = data;
 -	struct ntb_transport_qp *qp;
 -	u64 db_bits;
 -	unsigned int qp_num;
 -
 -	db_bits = (nt->qp_bitmap & ~nt->qp_bitmap_free &
 -		   ntb_db_vector_mask(nt->ndev, vector));
 -
 -	while (db_bits) {
 -		qp_num = __ffs(db_bits);
 -		qp = &nt->qp_vec[qp_num];
 -
 -		tasklet_schedule(&qp->rxc_db_work);
 -
 -		db_bits &= ~BIT_ULL(qp_num);
 -	}
 -}
 -
 -static const struct ntb_ctx_ops ntb_transport_ops = {
 -	.link_event = ntb_transport_event_callback,
 -	.db_event = ntb_transport_doorbell_callback,
 -};
 -
 -static struct ntb_client ntb_transport_client = {
 -	.ops = {
 -		.probe = ntb_transport_probe,
 -		.remove = ntb_transport_free,
 -	},
 -};
 -
 -static int __init ntb_transport_init(void)
 -{
 -	int rc;
 -
 -	pr_info("%s, version %s\n", NTB_TRANSPORT_DESC, NTB_TRANSPORT_VER);
 -
 -	if (debugfs_initialized())
 -		nt_debugfs_dir = debugfs_create_dir(KBUILD_MODNAME, NULL);
 -
 -	rc = bus_register(&ntb_transport_bus);
 -	if (rc)
 -		goto err_bus;
 -
 -	rc = ntb_register_client(&ntb_transport_client);
 -	if (rc)
 -		goto err_client;
 -
 -	return 0;
 -
 -err_client:
 -	bus_unregister(&ntb_transport_bus);
 -err_bus:
 -	debugfs_remove_recursive(nt_debugfs_dir);
 -	return rc;
 -}
 -module_init(ntb_transport_init);
 -
 -static void __exit ntb_transport_exit(void)
 -{
 -	debugfs_remove_recursive(nt_debugfs_dir);
 -
 -	ntb_unregister_client(&ntb_transport_client);
 -	bus_unregister(&ntb_transport_bus);
 -}
 -module_exit(ntb_transport_exit);
* Unmerged path drivers/ntb/ntb_transport.c
