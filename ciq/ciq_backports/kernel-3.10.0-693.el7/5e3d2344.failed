PCI: Shuffle pci-acpi.c functions to group them logically

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [pci] Shuffle pci-acpi.c functions to group them logically (Myron Stowe) [1418060]
Rebuild_FUZZ: 95.41%
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit 5e3d234456e25f664e0755c23689173588f4ca9b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5e3d2344.failed

Move code around to put all the ACPI power management stuff together and
all the pieces related to ACPI methods (_CBA, _HPP, _HPX) together.

No functional change.

	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 5e3d234456e25f664e0755c23689173588f4ca9b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-acpi.c
diff --cc drivers/pci/pci-acpi.c
index 6c6805d13f1f,6ebf8edc5f3c..000000000000
--- a/drivers/pci/pci-acpi.c
+++ b/drivers/pci/pci-acpi.c
@@@ -21,101 -18,6 +21,104 @@@
  #include <linux/pm_qos.h>
  #include "pci.h"
  
++<<<<<<< HEAD
 +/*
 + * The UUID is defined in the PCI Firmware Specification available here:
 + * https://www.pcisig.com/members/downloads/pcifw_r3_1_13Dec10.pdf
 + */
 +const u8 pci_acpi_dsm_uuid[] = {
 +	0xd0, 0x37, 0xc9, 0xe5, 0x53, 0x35, 0x7a, 0x4d,
 +	0x91, 0x17, 0xea, 0x4d, 0x19, 0xc3, 0x43, 0x4d
 +};
 +
 +/**
 + * pci_acpi_wake_bus - Wake-up notification handler for root buses.
 + * @handle: ACPI handle of a device the notification is for.
 + * @event: Type of the signaled event.
 + * @context: PCI root bus to wake up devices on.
 + */
 +static void pci_acpi_wake_bus(acpi_handle handle, u32 event, void *context)
 +{
 +	struct pci_bus *pci_bus = context;
 +
 +	if (event == ACPI_NOTIFY_DEVICE_WAKE && pci_bus)
 +		pci_pme_wakeup_bus(pci_bus);
 +}
 +
 +/**
 + * pci_acpi_wake_dev - Wake-up notification handler for PCI devices.
 + * @handle: ACPI handle of a device the notification is for.
 + * @event: Type of the signaled event.
 + * @context: PCI device object to wake up.
 + */
 +static void pci_acpi_wake_dev(acpi_handle handle, u32 event, void *context)
 +{
 +	struct pci_dev *pci_dev = context;
 +
 +	if (event != ACPI_NOTIFY_DEVICE_WAKE || !pci_dev)
 +		return;
 +
 +	if (pci_dev->pme_poll)
 +		pci_dev->pme_poll = false;
 +
 +	if (pci_dev->current_state == PCI_D3cold) {
 +		pci_wakeup_event(pci_dev);
 +		pm_runtime_resume(&pci_dev->dev);
 +		return;
 +	}
 +
 +	/* Clear PME Status if set. */
 +	if (pci_dev->pme_support)
 +		pci_check_pme_status(pci_dev);
 +
 +	pci_wakeup_event(pci_dev);
 +	pm_runtime_resume(&pci_dev->dev);
 +
 +	pci_pme_wakeup_bus(pci_dev->subordinate);
 +}
 +
 +/**
 + * pci_acpi_add_bus_pm_notifier - Register PM notifier for given PCI bus.
 + * @dev: ACPI device to add the notifier for.
 + * @pci_bus: PCI bus to walk checking for PME status if an event is signaled.
 + */
 +acpi_status pci_acpi_add_bus_pm_notifier(struct acpi_device *dev,
 +					 struct pci_bus *pci_bus)
 +{
 +	return acpi_add_pm_notifier(dev, pci_acpi_wake_bus, pci_bus);
 +}
 +
 +/**
 + * pci_acpi_remove_bus_pm_notifier - Unregister PCI bus PM notifier.
 + * @dev: ACPI device to remove the notifier from.
 + */
 +acpi_status pci_acpi_remove_bus_pm_notifier(struct acpi_device *dev)
 +{
 +	return acpi_remove_pm_notifier(dev, pci_acpi_wake_bus);
 +}
 +
 +/**
 + * pci_acpi_add_pm_notifier - Register PM notifier for given PCI device.
 + * @dev: ACPI device to add the notifier for.
 + * @pci_dev: PCI device to check for the PME status if an event is signaled.
 + */
 +acpi_status pci_acpi_add_pm_notifier(struct acpi_device *dev,
 +				     struct pci_dev *pci_dev)
 +{
 +	return acpi_add_pm_notifier(dev, pci_acpi_wake_dev, pci_dev);
 +}
 +
 +/**
 + * pci_acpi_remove_pm_notifier - Unregister PCI device PM notifier.
 + * @dev: ACPI device to remove the notifier from.
 + */
 +acpi_status pci_acpi_remove_pm_notifier(struct acpi_device *dev)
 +{
 +	return acpi_remove_pm_notifier(dev, pci_acpi_wake_dev);
 +}
 +
++=======
++>>>>>>> 5e3d234456e2 (PCI: Shuffle pci-acpi.c functions to group them logically)
  phys_addr_t acpi_pci_root_get_mcfg_addr(acpi_handle handle)
  {
  	acpi_status status = AE_NOT_EXIST;
* Unmerged path drivers/pci/pci-acpi.c
