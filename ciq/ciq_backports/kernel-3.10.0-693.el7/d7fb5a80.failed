gso: Do not perform partial GSO if number of partial segments is 1 or less

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit d7fb5a80492169cd737d51042f4ee03b09be0ef6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d7fb5a80.failed

In the event that the number of partial segments is equal to 1 we don't
really need to perform partial segmentation offload.  As such we should
skip multiplying the MSS and instead just clear the partial_segs value
since it will not provide any gain to advertise the frame as being GSO when
it is a single frame.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d7fb5a80492169cd737d51042f4ee03b09be0ef6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skbuff.c
diff --cc net/core/skbuff.c
index c7043c783fdb,b8dd2d2e2256..000000000000
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@@ -3114,6 -3095,18 +3114,21 @@@ struct sk_buff *skb_segment(struct sk_b
  
  	csum = !!can_checksum_protocol(features, proto);
  
++<<<<<<< HEAD
++=======
+ 	/* GSO partial only requires that we trim off any excess that
+ 	 * doesn't fit into an MSS sized block, so take care of that
+ 	 * now.
+ 	 */
+ 	if (features & NETIF_F_GSO_PARTIAL) {
+ 		partial_segs = len / mss;
+ 		if (partial_segs > 1)
+ 			mss *= partial_segs;
+ 		else
+ 			partial_segs = 0;
+ 	}
+ 
++>>>>>>> d7fb5a804921 (gso: Do not perform partial GSO if number of partial segments is 1 or less)
  	headroom = skb_headroom(head_skb);
  	pos = skb_headlen(head_skb);
  
* Unmerged path net/core/skbuff.c
