net/mlx5e: Add CQE compression user control

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add CQE compression user control (Don Dutile) [1385330 1417286]
Rebuild_FUZZ: 95.12%
commit-author Shaker Daibes <shakerd@mellanox.com>
commit 9bcc86064bb5006257e3367fc4439f4072d82442
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9bcc8606.failed

The user can now override the automatic driver decision using the
rx_cqe_compress flag, which is the preference for CQE compression.
The flag is initialized with the automatic driver decision.

	Signed-off-by: Shaker Daibes <shakerd@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9bcc86064bb5006257e3367fc4439f4072d82442)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index cc20a22c48b8,6b492ca17d7e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -71,6 -71,49 +71,52 @@@ struct mlx5e_channel_param 
  	struct mlx5e_cq_param      icosq_cq;
  };
  
++<<<<<<< HEAD
++=======
+ static bool mlx5e_check_fragmented_striding_rq_cap(struct mlx5_core_dev *mdev)
+ {
+ 	return MLX5_CAP_GEN(mdev, striding_rq) &&
+ 		MLX5_CAP_GEN(mdev, umr_ptr_rlky) &&
+ 		MLX5_CAP_ETH(mdev, reg_umr_sq);
+ }
+ 
+ static void mlx5e_set_rq_type_params(struct mlx5e_priv *priv, u8 rq_type)
+ {
+ 	priv->params.rq_wq_type = rq_type;
+ 	switch (priv->params.rq_wq_type) {
+ 	case MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ:
+ 		priv->params.log_rq_size = MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE_MPW;
+ 		priv->params.mpwqe_log_stride_sz =
+ 			MLX5E_GET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS) ?
+ 			MLX5_MPWRQ_LOG_STRIDE_SIZE_CQE_COMPRESS :
+ 			MLX5_MPWRQ_LOG_STRIDE_SIZE;
+ 		priv->params.mpwqe_log_num_strides = MLX5_MPWRQ_LOG_WQE_SZ -
+ 			priv->params.mpwqe_log_stride_sz;
+ 		break;
+ 	default: /* MLX5_WQ_TYPE_LINKED_LIST */
+ 		priv->params.log_rq_size = MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE;
+ 	}
+ 	priv->params.min_rx_wqes = mlx5_min_rx_wqes(priv->params.rq_wq_type,
+ 					       BIT(priv->params.log_rq_size));
+ 
+ 	mlx5_core_info(priv->mdev,
+ 		       "MLX5E: StrdRq(%d) RqSz(%ld) StrdSz(%ld) RxCqeCmprss(%d)\n",
+ 		       priv->params.rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ,
+ 		       BIT(priv->params.log_rq_size),
+ 		       BIT(priv->params.mpwqe_log_stride_sz),
+ 		       MLX5E_GET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS));
+ }
+ 
+ static void mlx5e_set_rq_priv_params(struct mlx5e_priv *priv)
+ {
+ 	u8 rq_type = mlx5e_check_fragmented_striding_rq_cap(priv->mdev) &&
+ 		    !priv->xdp_prog ?
+ 		    MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ :
+ 		    MLX5_WQ_TYPE_LINKED_LIST;
+ 	mlx5e_set_rq_type_params(priv, rq_type);
+ }
+ 
++>>>>>>> 9bcc86064bb5 (net/mlx5e: Add CQE compression user control)
  static void mlx5e_update_carrier(struct mlx5e_priv *priv)
  {
  	struct mlx5_core_dev *mdev = priv->mdev;
@@@ -2750,54 -3432,39 +2796,57 @@@ static void mlx5e_build_netdev_priv(str
  	struct mlx5e_priv *priv = netdev_priv(netdev);
  	u32 link_speed = 0;
  	u32 pci_bw = 0;
 -	u8 cq_period_mode = MLX5_CAP_GEN(mdev, cq_period_start_from_cqe) ?
 -					 MLX5_CQ_PERIOD_MODE_START_FROM_CQE :
 -					 MLX5_CQ_PERIOD_MODE_START_FROM_EQE;
  
 -	priv->mdev                         = mdev;
 -	priv->netdev                       = netdev;
 -	priv->params.num_channels          = profile->max_nch(mdev);
 -	priv->profile                      = profile;
 -	priv->ppriv                        = ppriv;
 -
 -	priv->params.lro_timeout =
 -		mlx5e_choose_lro_timeout(mdev, MLX5E_DEFAULT_LRO_TIMEOUT);
 -
 -	priv->params.log_sq_size = MLX5E_PARAMS_DEFAULT_LOG_SQ_SIZE;
 +	priv->params.log_sq_size           =
 +		MLX5E_PARAMS_DEFAULT_LOG_SQ_SIZE;
 +	priv->params.rq_wq_type = mlx5e_check_fragmented_striding_rq_cap(mdev) ?
 +		MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ :
 +		MLX5_WQ_TYPE_LINKED_LIST;
  
  	/* set CQE compression */
- 	priv->params.rx_cqe_compress_admin = false;
+ 	priv->params.rx_cqe_compress_def = false;
  	if (MLX5_CAP_GEN(mdev, cqe_compression) &&
  	    MLX5_CAP_GEN(mdev, vport_group_manager)) {
  		mlx5e_get_max_linkspeed(mdev, &link_speed);
  		mlx5e_get_pci_bw(mdev, &pci_bw);
  		mlx5_core_dbg(mdev, "Max link speed = %d, PCI BW = %d\n",
  			      link_speed, pci_bw);
- 		priv->params.rx_cqe_compress_admin =
+ 		priv->params.rx_cqe_compress_def =
  			cqe_compress_heuristic(link_speed, pci_bw);
  	}
++<<<<<<< HEAD
  
 -	mlx5e_set_rq_priv_params(priv);
 -	if (priv->params.rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ)
 +	priv->params.rx_cqe_compress = priv->params.rx_cqe_compress_admin;
++=======
++>>>>>>> 9bcc86064bb5 (net/mlx5e: Add CQE compression user control)
 +
 +	switch (priv->params.rq_wq_type) {
 +	case MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ:
 +		priv->params.log_rq_size = MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE_MPW;
 +		priv->params.mpwqe_log_stride_sz =
 +			priv->params.rx_cqe_compress ?
 +			MLX5_MPWRQ_LOG_STRIDE_SIZE_CQE_COMPRESS :
 +			MLX5_MPWRQ_LOG_STRIDE_SIZE;
 +		priv->params.mpwqe_log_num_strides = MLX5_MPWRQ_LOG_WQE_SZ -
 +			priv->params.mpwqe_log_stride_sz;
  		priv->params.lro_en = true;
 +		break;
 +	default: /* MLX5_WQ_TYPE_LINKED_LIST */
 +		priv->params.log_rq_size = MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE;
 +	}
  
 -	priv->params.rx_am_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
 -	mlx5e_set_rx_cq_mode_params(&priv->params, cq_period_mode);
 +	mlx5_core_info(mdev,
 +		       "MLX5E: StrdRq(%d) RqSz(%ld) StrdSz(%ld) RxCqeCmprss(%d)\n",
 +		       priv->params.rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ,
 +		       BIT(priv->params.log_rq_size),
 +		       BIT(priv->params.mpwqe_log_stride_sz),
 +		       priv->params.rx_cqe_compress_admin);
 +
 +	priv->params.min_rx_wqes = mlx5_min_rx_wqes(priv->params.rq_wq_type,
 +					    BIT(priv->params.log_rq_size));
 +
 +	mlx5e_set_rx_cq_mode_params(&priv->params,
 +				    MLX5_CQ_PERIOD_MODE_START_FROM_EQE);
  
  	priv->params.tx_cq_moderation.usec =
  		MLX5E_PARAMS_DEFAULT_TX_CQ_MODERATION_USEC;
@@@ -2820,16 -3488,9 +2869,22 @@@
  		SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
  
  	/* Initialize pflags */
++<<<<<<< HEAD
 +	MLX5E_SET_PRIV_FLAG(priv, MLX5E_PFLAG_RX_CQE_BASED_MODER,
 +			    priv->params.rx_cq_period_mode == MLX5_CQ_PERIOD_MODE_START_FROM_CQE);
 +
 +	priv->mdev                         = mdev;
 +	priv->netdev                       = netdev;
 +	priv->params.num_channels          = num_channels;
 +
 +#ifdef CONFIG_MLX5_CORE_EN_DCB
 +	mlx5e_ets_init(priv);
 +#endif
++=======
+ 	MLX5E_SET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_BASED_MODER,
+ 			priv->params.rx_cq_period_mode == MLX5_CQ_PERIOD_MODE_START_FROM_CQE);
+ 	MLX5E_SET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS, priv->params.rx_cqe_compress_def);
++>>>>>>> 9bcc86064bb5 (net/mlx5e: Add CQE compression user control)
  
  	mutex_init(&priv->state_lock);
  
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index b01f5bb32ed7..8d6003b2342a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -143,10 +143,12 @@ struct mlx5e_umr_wqe {
 
 static const char mlx5e_priv_flags[][ETH_GSTRING_LEN] = {
 	"rx_cqe_moder",
+	"rx_cqe_compress",
 };
 
 enum mlx5e_priv_flag {
 	MLX5E_PFLAG_RX_CQE_BASED_MODER = (1 << 0),
+	MLX5E_PFLAG_RX_CQE_COMPRESS = (1 << 1),
 };
 
 #define MLX5E_SET_PRIV_FLAG(priv, pflag, enable)    \
@@ -175,8 +177,7 @@ struct mlx5e_params {
 	u16 num_channels;
 	u8  num_tc;
 	u8  rx_cq_period_mode;
-	bool rx_cqe_compress_admin;
-	bool rx_cqe_compress;
+	bool rx_cqe_compress_def;
 	struct mlx5e_cq_moder rx_cq_moderation;
 	struct mlx5e_cq_moder tx_cq_moderation;
 	u16 min_rx_wqes;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c b/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c
index 13dc388667b6..2cd8e56a573b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c
@@ -94,7 +94,7 @@ int mlx5e_hwstamp_set(struct net_device *dev, struct ifreq *ifr)
 	switch (config.rx_filter) {
 	case HWTSTAMP_FILTER_NONE:
 		/* Reset CQE compression to Admin default */
-		mlx5e_modify_rx_cqe_compression(priv, priv->params.rx_cqe_compress_admin);
+		mlx5e_modify_rx_cqe_compression(priv, priv->params.rx_cqe_compress_def);
 		break;
 	case HWTSTAMP_FILTER_ALL:
 	case HWTSTAMP_FILTER_SOME:
@@ -111,6 +111,7 @@ int mlx5e_hwstamp_set(struct net_device *dev, struct ifreq *ifr)
 	case HWTSTAMP_FILTER_PTP_V2_SYNC:
 	case HWTSTAMP_FILTER_PTP_V2_DELAY_REQ:
 		/* Disable CQE compression */
+		netdev_warn(dev, "Disabling cqe compression");
 		mlx5e_modify_rx_cqe_compression(priv, false);
 		config.rx_filter = HWTSTAMP_FILTER_ALL;
 		break;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index fa6e9bbc23fb..fea8c7aede9c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -1345,6 +1345,35 @@ static int set_pflag_rx_cqe_based_moder(struct net_device *netdev, bool enable)
 	return err;
 }
 
+static int set_pflag_rx_cqe_compress(struct net_device *netdev,
+				     bool enable)
+{
+	struct mlx5e_priv *priv = netdev_priv(netdev);
+	struct mlx5_core_dev *mdev = priv->mdev;
+	int err = 0;
+	bool reset;
+
+	if (!MLX5_CAP_GEN(mdev, cqe_compression))
+		return -ENOTSUPP;
+
+	if (enable && priv->tstamp.hwtstamp_config.rx_filter != HWTSTAMP_FILTER_NONE) {
+		netdev_err(netdev, "Can't enable cqe compression while timestamping is enabled.\n");
+		return -EINVAL;
+	}
+
+	reset = test_bit(MLX5E_STATE_OPENED, &priv->state);
+
+	if (reset)
+		mlx5e_close_locked(netdev);
+
+	MLX5E_SET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS, enable);
+	priv->params.rx_cqe_compress_def = enable;
+
+	if (reset)
+		err = mlx5e_open_locked(netdev);
+	return err;
+}
+
 static int mlx5e_handle_pflag(struct net_device *netdev,
 			      u32 wanted_flags,
 			      enum mlx5e_priv_flag flag,
@@ -1375,13 +1404,19 @@ static int mlx5e_set_priv_flags(struct net_device *netdev, u32 pflags)
 	int err;
 
 	mutex_lock(&priv->state_lock);
-
 	err = mlx5e_handle_pflag(netdev, pflags,
 				 MLX5E_PFLAG_RX_CQE_BASED_MODER,
 				 set_pflag_rx_cqe_based_moder);
+	if (err)
+		goto out;
 
+	err = mlx5e_handle_pflag(netdev, pflags,
+				 MLX5E_PFLAG_RX_CQE_COMPRESS,
+				 set_pflag_rx_cqe_compress);
+
+out:
 	mutex_unlock(&priv->state_lock);
-	return err ? -EINVAL : 0;
+	return err;
 }
 
 static u32 mlx5e_get_priv_flags(struct net_device *netdev)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index d795e95774bc..a1909109d6a0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -163,14 +163,14 @@ void mlx5e_modify_rx_cqe_compression(struct mlx5e_priv *priv, bool val)
 
 	mutex_lock(&priv->state_lock);
 
-	if (priv->params.rx_cqe_compress == val)
+	if (MLX5E_GET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS) == val)
 		goto unlock;
 
 	was_opened = test_bit(MLX5E_STATE_OPENED, &priv->state);
 	if (was_opened)
 		mlx5e_close_locked(priv->netdev);
 
-	priv->params.rx_cqe_compress = val;
+	MLX5E_SET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS, val);
 
 	if (was_opened)
 		mlx5e_open_locked(priv->netdev);
