net: add common accessor for setting dropcount on packets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] add common accessor for setting dropcount on packets (Paolo Abeni) [1388467]
Rebuild_FUZZ: 95.41%
commit-author Eyal Birger <eyal.birger@gmail.com>
commit 3bc3b96f3b455bd14a8ccd83ffffc85625aba641
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/3bc3b96f.failed

As part of an effort to move skb->dropcount to skb->cb[], use
a common function in order to set dropcount in struct sk_buff.

	Signed-off-by: Eyal Birger <eyal.birger@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3bc3b96f3b455bd14a8ccd83ffffc85625aba641)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sock.h
diff --cc include/net/sock.h
index 58c7b9c999a7,0996fe451e5f..000000000000
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@@ -2227,10 -2078,19 +2227,26 @@@ static inline int sock_intr_errno(long 
  	return timeo == MAX_SCHEDULE_TIMEOUT ? -ERESTARTSYS : -EINTR;
  }
  
++<<<<<<< HEAD
 +extern void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
 +	struct sk_buff *skb);
 +extern void __sock_recv_wifi_status(struct msghdr *msg, struct sock *sk,
 +	struct sk_buff *skb);
++=======
+ #define sock_skb_cb_check_size(size) \
+ 	BUILD_BUG_ON((size) > FIELD_SIZEOF(struct sk_buff, cb))
+ 
+ static inline void
+ sock_skb_set_dropcount(const struct sock *sk, struct sk_buff *skb)
+ {
+ 	skb->dropcount = atomic_read(&sk->sk_drops);
+ }
+ 
+ void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
+ 			   struct sk_buff *skb);
+ void __sock_recv_wifi_status(struct msghdr *msg, struct sock *sk,
+ 			     struct sk_buff *skb);
++>>>>>>> 3bc3b96f3b45 (net: add common accessor for setting dropcount on packets)
  
  static inline void
  sock_recv_timestamp(struct msghdr *msg, struct sock *sk, struct sk_buff *skb)
* Unmerged path include/net/sock.h
diff --git a/net/core/sock.c b/net/core/sock.c
index 960b698f3aa7..03746b1c8c7e 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -432,7 +432,7 @@ int sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
 	skb_dst_force(skb);
 
 	spin_lock_irqsave(&list->lock, flags);
-	skb->dropcount = atomic_read(&sk->sk_drops);
+	sock_skb_set_dropcount(sk, skb);
 	__skb_queue_tail(list, skb);
 	spin_unlock_irqrestore(&list->lock, flags);
 
diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 4839c0b7b9bc..4c4cae432630 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -1772,7 +1772,7 @@ static int packet_rcv(struct sk_buff *skb, struct net_device *dev,
 
 	spin_lock(&sk->sk_receive_queue.lock);
 	po->stats.stats1.tp_packets++;
-	skb->dropcount = atomic_read(&sk->sk_drops);
+	sock_skb_set_dropcount(sk, skb);
 	__skb_queue_tail(&sk->sk_receive_queue, skb);
 	spin_unlock(&sk->sk_receive_queue.lock);
 	sk->sk_data_ready(sk, skb->len);
