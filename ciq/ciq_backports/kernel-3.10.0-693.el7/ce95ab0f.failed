dax: make 'wait_table' global variable static

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit ce95ab0fa669698805ff8841a756733a7702b5c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ce95ab0f.failed

The global 'wait_table' variable is only used within fs/dax.c, and
generates the following sparse warning:

fs/dax.c:39:19: warning: symbol 'wait_table' was not declared. Should it be static?

Make it static so it has scope local to fs/dax.c, and to make sparse happy.

	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit ce95ab0fa669698805ff8841a756733a7702b5c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
diff --cc fs/dax.c
index 3ad95e9ec809,e52e7543c351..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -32,6 -31,46 +32,49 @@@
  #include <linux/vmstat.h>
  #include <linux/pfn_t.h>
  #include <linux/sizes.h>
++<<<<<<< HEAD
++=======
+ #include <linux/iomap.h>
+ #include "internal.h"
+ 
+ /*
+  * We use lowest available bit in exceptional entry for locking, other two
+  * bits to determine entry type. In total 3 special bits.
+  */
+ #define RADIX_DAX_SHIFT	(RADIX_TREE_EXCEPTIONAL_SHIFT + 3)
+ #define RADIX_DAX_PTE (1 << (RADIX_TREE_EXCEPTIONAL_SHIFT + 1))
+ #define RADIX_DAX_PMD (1 << (RADIX_TREE_EXCEPTIONAL_SHIFT + 2))
+ #define RADIX_DAX_TYPE_MASK (RADIX_DAX_PTE | RADIX_DAX_PMD)
+ #define RADIX_DAX_TYPE(entry) ((unsigned long)entry & RADIX_DAX_TYPE_MASK)
+ #define RADIX_DAX_SECTOR(entry) (((unsigned long)entry >> RADIX_DAX_SHIFT))
+ #define RADIX_DAX_ENTRY(sector, pmd) ((void *)((unsigned long)sector << \
+ 		RADIX_DAX_SHIFT | (pmd ? RADIX_DAX_PMD : RADIX_DAX_PTE) | \
+ 		RADIX_TREE_EXCEPTIONAL_ENTRY))
+ 
+ /* We choose 4096 entries - same as per-zone page wait tables */
+ #define DAX_WAIT_TABLE_BITS 12
+ #define DAX_WAIT_TABLE_ENTRIES (1 << DAX_WAIT_TABLE_BITS)
+ 
+ static wait_queue_head_t wait_table[DAX_WAIT_TABLE_ENTRIES];
+ 
+ static int __init init_dax_wait_table(void)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < DAX_WAIT_TABLE_ENTRIES; i++)
+ 		init_waitqueue_head(wait_table + i);
+ 	return 0;
+ }
+ fs_initcall(init_dax_wait_table);
+ 
+ static wait_queue_head_t *dax_entry_waitqueue(struct address_space *mapping,
+ 					      pgoff_t index)
+ {
+ 	unsigned long hash = hash_long((unsigned long)mapping ^ index,
+ 				       DAX_WAIT_TABLE_BITS);
+ 	return wait_table + hash;
+ }
++>>>>>>> ce95ab0fa669 (dax: make 'wait_table' global variable static)
  
  static long dax_map_atomic(struct block_device *bdev, struct blk_dax_ctl *dax)
  {
* Unmerged path fs/dax.c
