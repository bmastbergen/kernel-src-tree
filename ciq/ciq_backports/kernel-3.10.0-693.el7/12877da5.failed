xfs: remove XFS_BUF_ZEROFLAGS macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 12877da58429affc988403817b88d901fe01f8c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/12877da5.failed

The places where we use this macro already clear unnecessary IO
flags (e.g. through xfs_bwrite()) or never have unexpected IO flags
set on them in the first place (e.g. iclog buffers). Remove the
macro from these locations, and where necessary clear only the
specific flags that are conditional in the current buffer context.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 12877da58429affc988403817b88d901fe01f8c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_buf.h
#	fs/xfs/xfs_log.c
diff --cc fs/xfs/xfs_buf.h
index 0251a411c00f,4eb89bd4ee73..000000000000
--- a/fs/xfs/xfs_buf.h
+++ b/fs/xfs/xfs_buf.h
@@@ -338,28 -313,6 +338,31 @@@ extern int xfs_buf_delwri_submit_nowait
  extern int xfs_buf_init(void);
  extern void xfs_buf_terminate(void);
  
++<<<<<<< HEAD
 +#define XFS_BUF_ZEROFLAGS(bp) \
 +	((bp)->b_flags &= ~(XBF_READ|XBF_WRITE|XBF_ASYNC| \
 +			    XBF_SYNCIO|XBF_FUA|XBF_FLUSH| \
 +			    XBF_WRITE_FAIL))
 +
 +
 +#define XFS_BUF_DONE(bp)	((bp)->b_flags |= XBF_DONE)
 +#define XFS_BUF_UNDONE(bp)	((bp)->b_flags &= ~XBF_DONE)
 +#define XFS_BUF_ISDONE(bp)	((bp)->b_flags & XBF_DONE)
 +
 +#define XFS_BUF_ASYNC(bp)	((bp)->b_flags |= XBF_ASYNC)
 +#define XFS_BUF_UNASYNC(bp)	((bp)->b_flags &= ~XBF_ASYNC)
 +#define XFS_BUF_ISASYNC(bp)	((bp)->b_flags & XBF_ASYNC)
 +
 +#define XFS_BUF_READ(bp)	((bp)->b_flags |= XBF_READ)
 +#define XFS_BUF_UNREAD(bp)	((bp)->b_flags &= ~XBF_READ)
 +#define XFS_BUF_ISREAD(bp)	((bp)->b_flags & XBF_READ)
 +
 +#define XFS_BUF_WRITE(bp)	((bp)->b_flags |= XBF_WRITE)
 +#define XFS_BUF_UNWRITE(bp)	((bp)->b_flags &= ~XBF_WRITE)
 +#define XFS_BUF_ISWRITE(bp)	((bp)->b_flags & XBF_WRITE)
 +
++=======
++>>>>>>> 12877da58429 (xfs: remove XFS_BUF_ZEROFLAGS macro)
  /*
   * These macros use the IO block map rather than b_bn. b_bn is now really
   * just for the buffer cache index for cached buffers. As IO does not use b_bn
diff --cc fs/xfs/xfs_log.c
index 747a315eb12b,40b700d3f426..000000000000
--- a/fs/xfs/xfs_log.c
+++ b/fs/xfs/xfs_log.c
@@@ -1865,9 -1864,8 +1865,14 @@@ xlog_sync
  
  	bp->b_io_length = BTOBB(count);
  	bp->b_fspriv = iclog;
++<<<<<<< HEAD
 +	XFS_BUF_ZEROFLAGS(bp);
 +	XFS_BUF_ASYNC(bp);
 +	bp->b_flags |= XBF_SYNCIO;
++=======
+ 	bp->b_flags &= ~(XBF_FUA | XBF_FLUSH);
+ 	bp->b_flags |= (XBF_ASYNC | XBF_SYNCIO | XBF_WRITE);
++>>>>>>> 12877da58429 (xfs: remove XFS_BUF_ZEROFLAGS macro)
  
  	if (log->l_mp->m_flags & XFS_MOUNT_BARRIER) {
  		bp->b_flags |= XBF_FUA;
@@@ -1911,9 -1908,8 +1916,14 @@@
  		xfs_buf_associate_memory(bp,
  				(char *)&iclog->ic_header + count, split);
  		bp->b_fspriv = iclog;
++<<<<<<< HEAD
 +		XFS_BUF_ZEROFLAGS(bp);
 +		XFS_BUF_ASYNC(bp);
 +		bp->b_flags |= XBF_SYNCIO;
++=======
+ 		bp->b_flags &= ~(XBF_FUA | XBF_FLUSH);
+ 		bp->b_flags |= (XBF_ASYNC | XBF_SYNCIO | XBF_WRITE);
++>>>>>>> 12877da58429 (xfs: remove XFS_BUF_ZEROFLAGS macro)
  		if (log->l_mp->m_flags & XFS_MOUNT_BARRIER)
  			bp->b_flags |= XBF_FUA;
  
* Unmerged path fs/xfs/xfs_buf.h
* Unmerged path fs/xfs/xfs_log.c
diff --git a/fs/xfs/xfs_log_recover.c b/fs/xfs/xfs_log_recover.c
index 67ded68898f9..3944347bdc8d 100644
--- a/fs/xfs/xfs_log_recover.c
+++ b/fs/xfs/xfs_log_recover.c
@@ -276,7 +276,6 @@ xlog_bwrite(
 	ASSERT(nbblks <= bp->b_length);
 
 	XFS_BUF_SET_ADDR(bp, log->l_logBBstart + blk_no);
-	XFS_BUF_ZEROFLAGS(bp);
 	xfs_buf_hold(bp);
 	xfs_buf_lock(bp);
 	bp->b_io_length = nbblks;
