tools/power turbostat: remove obsolete -M, -m, -C, -c options

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [tools] power turbostat: remove obsolete -M, -m, -C, -c options (Prarit Bhargava) [1422076]
Rebuild_FUZZ: 94.83%
commit-author Len Brown <len.brown@intel.com>
commit 6886fee4d7a3afaf905a8e0bec62dc8fdc39878d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6886fee4.failed

The new --add option has replaced the -M, -m, -C, -c options
Eg.

-M 0x10 is now --add msr0x10,raw
-m 0x10 is now --add msr0x10,raw,u32
-C 0x10 is now --add msr0x10,delta
-c 0x10 is now --add msr0x10,delta,u32

The --add option can be repeated to add any number of counters,
while the previous options were limited to adding one of each type.

In addition, the --add option can accept a column label,
and can also display a counter as a percentage of elapsed cycles.

Eg. --add msr0x3fe,core,percent,MY_CC3

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 6886fee4d7a3afaf905a8e0bec62dc8fdc39878d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.8
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.8
index a7cc18d34bc1,03cb639b292e..000000000000
--- a/tools/power/x86/turbostat/turbostat.8
+++ b/tools/power/x86/turbostat/turbostat.8
@@@ -25,9 -25,27 +25,33 @@@ Some information is not available on ol
  .SS Options
  Options can be specified with a single or double '-', and only as much of the option
  name as necessary to disambiguate it from others is necessary.  Note that options are case-sensitive.
++<<<<<<< HEAD
 +\fB--Counter MSR#\fP shows the delta of the specified 64-bit MSR counter.
 +.PP
 +\fB--counter MSR#\fP shows the delta of the specified 32-bit MSR counter.
++=======
+ .PP
+ \fB--add attributes\fP add column with counter having specified 'attributes'.  The 'location' attribute is required, all others are optional.
+ .nf
+ 	location: {\fBmsrDDD\fP | \fBmsr0xXXX\fP}
+ 		msrDDD is a decimal offset, eg. msr16
+ 		msr0xXXX is a hex offset, eg. msr0x10
+ 
+ 	scope: {\fBcpu\fP | \fBcore\fP | \fBpackage\fP}
+ 		sample and print the counter for every cpu, core, or package.
+ 		default: cpu
+ 
+ 	size: {\fBu32\fP | \fBu64\fP }
+ 		MSRs are read as 64-bits, u32 truncates the displayed value to 32-bits.
+ 		default: u64
+ 
+ 	format: {\fBraw\fP | \fBdelta\fP | \fBpercent\fP}
+ 		'raw' shows the MSR contents in hex.
+ 		'delta' shows the difference in values during the measurement interval.
+ 		'percent' shows the delta as a percentage of the cycles elapsed.
+ 		default: delta
+ .fi
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  .PP
  \fB--Dump\fP displays the raw counter values.
  .PP
diff --cc tools/power/x86/turbostat/turbostat.c
index 92e6f5e6c99d,f13f61b065c6..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -68,11 -71,8 +68,7 @@@ unsigned int units = 1000000;	/* MHz et
  unsigned int genuine_intel;
  unsigned int has_invariant_tsc;
  unsigned int do_nhm_platform_info;
- unsigned int extra_msr_offset32;
- unsigned int extra_msr_offset64;
- unsigned int extra_delta_offset32;
- unsigned int extra_delta_offset64;
  unsigned int aperf_mperf_multiplier = 1;
 -int do_irq = 1;
  int do_smi;
  double bclk;
  double base_hz;
@@@ -145,10 -160,7 +141,14 @@@ struct thread_data 
  	unsigned long long aperf;
  	unsigned long long mperf;
  	unsigned long long c1;
++<<<<<<< HEAD
 +	unsigned long long extra_msr64;
 +	unsigned long long extra_delta64;
 +	unsigned long long extra_msr32;
 +	unsigned long long extra_delta32;
++=======
+ 	unsigned int irq_count;
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  	unsigned int smi_count;
  	unsigned int cpu_id;
  	unsigned int flags;
@@@ -296,51 -348,78 +296,59 @@@ int get_msr(int cpu, off_t offset, unsi
  
  void print_header(void)
  {
 -	struct msr_counter *mp;
 -
  	if (show_pkg)
 -		outp += sprintf(outp, "\tPackage");
 +		outp += sprintf(outp, " Package");
  	if (show_core)
 -		outp += sprintf(outp, "\tCore");
 +		outp += sprintf(outp, "    Core");
  	if (show_cpu)
 -		outp += sprintf(outp, "\tCPU");
 +		outp += sprintf(outp, "     CPU");
  	if (has_aperf)
 -		outp += sprintf(outp, "\tAvg_MHz");
 +		outp += sprintf(outp, " Avg_MHz");
  	if (has_aperf)
 -		outp += sprintf(outp, "\tBusy%%");
 +		outp += sprintf(outp, "   %%Busy");
  	if (has_aperf)
 -		outp += sprintf(outp, "\tBzy_MHz");
 -	outp += sprintf(outp, "\tTSC_MHz");
 -
 +		outp += sprintf(outp, " Bzy_MHz");
 +	outp += sprintf(outp, " TSC_MHz");
 +
++<<<<<<< HEAD
 +	if (extra_delta_offset32)
 +		outp += sprintf(outp, "  count 0x%03X", extra_delta_offset32);
 +	if (extra_delta_offset64)
 +		outp += sprintf(outp, "  COUNT 0x%03X", extra_delta_offset64);
 +	if (extra_msr_offset32)
 +		outp += sprintf(outp, "   MSR 0x%03X", extra_msr_offset32);
 +	if (extra_msr_offset64)
 +		outp += sprintf(outp, "           MSR 0x%03X", extra_msr_offset64);
 +
++=======
+ 	if (!debug)
+ 		goto done;
+ 
+ 	if (do_irq)
+ 		outp += sprintf(outp, "\tIRQ");
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  	if (do_smi)
 -		outp += sprintf(outp, "\tSMI");
 +		outp += sprintf(outp, "     SMI");
  
  	if (do_nhm_cstates)
 -		outp += sprintf(outp, "\tCPU%%c1");
 +		outp += sprintf(outp, "  CPU%%c1");
  	if (do_nhm_cstates && !do_slm_cstates && !do_knl_cstates)
 -		outp += sprintf(outp, "\tCPU%%c3");
 +		outp += sprintf(outp, "  CPU%%c3");
  	if (do_nhm_cstates)
 -		outp += sprintf(outp, "\tCPU%%c6");
 +		outp += sprintf(outp, "  CPU%%c6");
  	if (do_snb_cstates)
 -		outp += sprintf(outp, "\tCPU%%c7");
 -
 -	for (mp = sys.tp; mp; mp = mp->next) {
 -		if (mp->format == FORMAT_RAW) {
 -			if (mp->width == 64)
 -				outp += sprintf(outp, "\t%18.18s", mp->name);
 -			else
 -				outp += sprintf(outp, "\t%10.10s", mp->name);
 -		} else {
 -			outp += sprintf(outp, "\t%-7.7s", mp->name);
 -		}
 -	}
 +		outp += sprintf(outp, "  CPU%%c7");
  
  	if (do_dts)
 -		outp += sprintf(outp, "\tCoreTmp");
 -
 -	for (mp = sys.cp; mp; mp = mp->next) {
 -		if (mp->format == FORMAT_RAW) {
 -			if (mp->width == 64)
 -				outp += sprintf(outp, "\t%18.18s", mp->name);
 -			else
 -				outp += sprintf(outp, "\t%10.10s", mp->name);
 -		} else {
 -			outp += sprintf(outp, "\t%-7.7s", mp->name);
 -		}
 -	}
 -
 +		outp += sprintf(outp, " CoreTmp");
  	if (do_ptm)
 -		outp += sprintf(outp, "\tPkgTmp");
 -
 -	if (do_gfx_rc6_ms)
 -		outp += sprintf(outp, "\tGFX%%rc6");
 -
 -	if (do_gfx_mhz)
 -		outp += sprintf(outp, "\tGFXMHz");
 +		outp += sprintf(outp, "  PkgTmp");
  
  	if (do_skl_residency) {
 -		outp += sprintf(outp, "\tTotl%%C0");
 -		outp += sprintf(outp, "\tAny%%C0");
 -		outp += sprintf(outp, "\tGFX%%C0");
 -		outp += sprintf(outp, "\tCPUGFX%%");
 +		outp += sprintf(outp, " Totl%%C0");
 +		outp += sprintf(outp, "  Any%%C0");
 +		outp += sprintf(outp, "  GFX%%C0");
 +		outp += sprintf(outp, " CPUGFX%%");
  	}
  
  	if (do_pc2)
@@@ -399,16 -493,16 +407,22 @@@ int dump_counters(struct thread_data *t
  		outp += sprintf(outp, "aperf: %016llX\n", t->aperf);
  		outp += sprintf(outp, "mperf: %016llX\n", t->mperf);
  		outp += sprintf(outp, "c1: %016llX\n", t->c1);
++<<<<<<< HEAD
 +		outp += sprintf(outp, "msr0x%x: %08llX\n",
 +			extra_delta_offset32, t->extra_delta32);
 +		outp += sprintf(outp, "msr0x%x: %016llX\n",
 +			extra_delta_offset64, t->extra_delta64);
 +		outp += sprintf(outp, "msr0x%x: %08llX\n",
 +			extra_msr_offset32, t->extra_msr32);
 +		outp += sprintf(outp, "msr0x%x: %016llX\n",
 +			extra_msr_offset64, t->extra_msr64);
++=======
+ 
+ 		if (do_irq)
+ 			outp += sprintf(outp, "IRQ: %08X\n", t->irq_count);
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  		if (do_smi)
  			outp += sprintf(outp, "SMI: %08X\n", t->smi_count);
 -
 -		for (i = 0, mp = sys.tp; mp; i++, mp = mp->next) {
 -			outp += sprintf(outp, "tADDED [%d] msr0x%x: %08llX\n",
 -				i, mp->msr_num, t->counter[i]);
 -		}
  	}
  
  	if (c) {
@@@ -520,22 -622,14 +534,31 @@@ int format_counters(struct thread_data 
  	}
  
  	/* TSC_MHz */
 -	outp += sprintf(outp, "\t%.0f", 1.0 * t->tsc/units/interval_float);
 -
 +	outp += sprintf(outp, "%8.0f", 1.0 * t->tsc/units/interval_float);
 +
++<<<<<<< HEAD
 +	/* delta */
 +	if (extra_delta_offset32)
 +		outp += sprintf(outp, "  %11llu", t->extra_delta32);
 +
 +	/* DELTA */
 +	if (extra_delta_offset64)
 +		outp += sprintf(outp, "  %11llu", t->extra_delta64);
 +	/* msr */
 +	if (extra_msr_offset32)
 +		outp += sprintf(outp, "  0x%08llx", t->extra_msr32);
 +
 +	/* MSR */
 +	if (extra_msr_offset64)
 +		outp += sprintf(outp, "  0x%016llx", t->extra_msr64);
++=======
+ 	if (!debug)
+ 		goto done;
+ 
+ 	/* IRQ */
+ 	if (do_irq)
+ 		outp += sprintf(outp, "\t%d", t->irq_count);
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  
  	/* SMI */
  	if (do_smi)
@@@ -779,16 -952,8 +802,21 @@@ delta_thread(struct thread_data *new, s
  		old->mperf = 1;	/* divide by 0 protection */
  	}
  
++<<<<<<< HEAD
 +	old->extra_delta32 = new->extra_delta32 - old->extra_delta32;
 +	old->extra_delta32 &= 0xFFFFFFFF;
 +
 +	old->extra_delta64 = new->extra_delta64 - old->extra_delta64;
 +
 +	/*
 +	 * Extra MSR is just a snapshot, simply copy latest w/o subtracting
 +	 */
 +	old->extra_msr32 = new->extra_msr32;
 +	old->extra_msr64 = new->extra_msr64;
++=======
+ 	if (do_irq)
+ 		old->irq_count = new->irq_count - old->irq_count;
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  
  	if (do_smi)
  		old->smi_count = new->smi_count - old->smi_count;
@@@ -819,9 -999,8 +847,14 @@@ void clear_counters(struct thread_data 
  	t->mperf = 0;
  	t->c1 = 0;
  
++<<<<<<< HEAD
 +	t->smi_count = 0;
 +	t->extra_delta32 = 0;
 +	t->extra_delta64 = 0;
++=======
+ 	t->irq_count = 0;
+ 	t->smi_count = 0;
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  
  	/* tells format_counters to dump all fields from this set */
  	t->flags = CPU_IS_FIRST_THREAD_IN_CORE | CPU_IS_FIRST_CORE_IN_PACKAGE;
@@@ -863,8 -1057,14 +896,19 @@@ int sum_counters(struct thread_data *t
  	average.threads.mperf += t->mperf;
  	average.threads.c1 += t->c1;
  
++<<<<<<< HEAD
 +	average.threads.extra_delta32 += t->extra_delta32;
 +	average.threads.extra_delta64 += t->extra_delta64;
++=======
+ 	average.threads.irq_count += t->irq_count;
+ 	average.threads.smi_count += t->smi_count;
+ 
+ 	for (i = 0, mp = sys.tp; mp; i++, mp = mp->next) {
+ 		if (mp->format == FORMAT_RAW)
+ 			continue;
+ 		average.threads.counter[i] += t->counter[i];
+ 	}
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  
  	/* sum per-core values only for 1st thread in core */
  	if (!(t->flags & CPU_IS_FIRST_THREAD_IN_CORE))
@@@ -2867,10 -3537,9 +2887,14 @@@ void help(
  	"--debug	run in \"debug\" mode\n"
  	"--interval sec	Override default 5-second measurement interval\n"
  	"--help		print this help message\n"
++<<<<<<< HEAD
 +	"--counter msr	print 32-bit counter at address \"msr\"\n"
 +	"--Counter msr	print 64-bit Counter at address \"msr\"\n"
 +	"--msr msr	print 32-bit value at address \"msr\"\n"
 +	"--MSR msr	print 64-bit Value at address \"msr\"\n"
++=======
+ 	"--out file	create or truncate \"file\" for all output\n"
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  	"--version	print version information\n"
  	"\n"
  	"For more help, run \"man turbostat\"\n");
@@@ -3180,7 -3876,7 +3204,11 @@@ int get_and_dump_counters(void
  }
  
  void print_version() {
++<<<<<<< HEAD
 +	fprintf(stderr, "turbostat version 4.12 5 Apr 2016"
++=======
+ 	fprintf(outf, "turbostat version 4.16 24 Dec 2016"
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  		" - Len Brown <lenb@kernel.org>\n");
  }
  
@@@ -3189,16 -4034,13 +3217,24 @@@ void cmdline(int argc, char **argv
  	int opt;
  	int option_index = 0;
  	static struct option long_options[] = {
++<<<<<<< HEAD
 +		{"Counter",	required_argument,	0, 'C'},
 +		{"counter",	required_argument,	0, 'c'},
++=======
+ 		{"add",		required_argument,	0, 'a'},
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  		{"Dump",	no_argument,		0, 'D'},
  		{"debug",	no_argument,		0, 'd'},
 +		{"verbose",	no_argument,		0, 'v'},
  		{"interval",	required_argument,	0, 'i'},
  		{"help",	no_argument,		0, 'h'},
  		{"Joules",	no_argument,		0, 'J'},
++<<<<<<< HEAD
 +		{"MSR",		required_argument,	0, 'M'},
 +		{"msr",		required_argument,	0, 'm'},
++=======
+ 		{"out",		required_argument,	0, 'o'},
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  		{"Package",	no_argument,		0, 'p'},
  		{"processor",	no_argument,		0, 'p'},
  		{"Summary",	no_argument,		0, 'S'},
@@@ -3209,14 -4051,11 +3245,19 @@@
  
  	progname = argv[0];
  
 -	while ((opt = getopt_long_only(argc, argv, "+C:c:Ddhi:JM:m:o:PpST:v",
 +	while ((opt = getopt_long_only(argc, argv, "+C:c:Ddvhi:JM:m:PpST:V",
  				long_options, &option_index)) != -1) {
  		switch (opt) {
++<<<<<<< HEAD
 +		case 'C':
 +			sscanf(optarg, "%x", &extra_delta_offset64);
 +			break;
 +		case 'c':
 +			sscanf(optarg, "%x", &extra_delta_offset32);
++=======
+ 		case 'a':
+ 			parse_add_command(optarg);
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  			break;
  		case 'D':
  			dump_only++;
@@@ -3246,11 -4084,8 +3287,16 @@@
  		case 'J':
  			rapl_joules++;
  			break;
++<<<<<<< HEAD
 +		case 'M':
 +			sscanf(optarg, "%x", &extra_msr_offset64);
 +			break;
 +		case 'm':
 +			sscanf(optarg, "%x", &extra_msr_offset32);
++=======
+ 		case 'o':
+ 			outf = fopen_or_die(optarg, "w");
++>>>>>>> 6886fee4d7a3 (tools/power turbostat: remove obsolete -M, -m, -C, -c options)
  			break;
  		case 'P':
  			show_pkg_only++;
* Unmerged path tools/power/x86/turbostat/turbostat.8
* Unmerged path tools/power/x86/turbostat/turbostat.c
