raid5-ppl: runtime PPL enabling or disabling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Artur Paszkiewicz <artur.paszkiewicz@intel.com>
commit ba903a3ea465bd2f2bb9316054b295e79a7a518e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ba903a3e.failed

Allow writing to 'consistency_policy' attribute when the array is
active. Add a new function 'change_consistency_policy' to the
md_personality operations structure to handle the change in the
personality code. Values "ppl" and "resync" are accepted and
turn PPL on and off respectively.

When enabling PPL its location and size should first be set using
'ppl_sector' and 'ppl_size' attributes and a valid PPL header should be
written at this location on each member device.

Enabling or disabling PPL is performed under a suspended array.  The
raid5_reset_stripe_cache function frees the stripe cache and allocates
it again in order to allocate or free the ppl_pages for the stripes in
the stripe cache.

	Signed-off-by: Artur Paszkiewicz <artur.paszkiewicz@intel.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit ba903a3ea465bd2f2bb9316054b295e79a7a518e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
#	drivers/md/md.h
#	drivers/md/raid5-ppl.c
#	drivers/md/raid5.c
diff --cc drivers/md/md.c
index efc1b3243366,af9118711228..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -4789,6 -4970,52 +4789,55 @@@ static struct md_sysfs_entry md_array_s
  __ATTR(array_size, S_IRUGO|S_IWUSR, array_size_show,
         array_size_store);
  
++<<<<<<< HEAD
++=======
+ static ssize_t
+ consistency_policy_show(struct mddev *mddev, char *page)
+ {
+ 	int ret;
+ 
+ 	if (test_bit(MD_HAS_JOURNAL, &mddev->flags)) {
+ 		ret = sprintf(page, "journal\n");
+ 	} else if (test_bit(MD_HAS_PPL, &mddev->flags)) {
+ 		ret = sprintf(page, "ppl\n");
+ 	} else if (mddev->bitmap) {
+ 		ret = sprintf(page, "bitmap\n");
+ 	} else if (mddev->pers) {
+ 		if (mddev->pers->sync_request)
+ 			ret = sprintf(page, "resync\n");
+ 		else
+ 			ret = sprintf(page, "none\n");
+ 	} else {
+ 		ret = sprintf(page, "unknown\n");
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static ssize_t
+ consistency_policy_store(struct mddev *mddev, const char *buf, size_t len)
+ {
+ 	int err = 0;
+ 
+ 	if (mddev->pers) {
+ 		if (mddev->pers->change_consistency_policy)
+ 			err = mddev->pers->change_consistency_policy(mddev, buf);
+ 		else
+ 			err = -EBUSY;
+ 	} else if (mddev->external && strncmp(buf, "ppl", 3) == 0) {
+ 		set_bit(MD_HAS_PPL, &mddev->flags);
+ 	} else {
+ 		err = -EINVAL;
+ 	}
+ 
+ 	return err ? err : len;
+ }
+ 
+ static struct md_sysfs_entry md_consistency_policy =
+ __ATTR(consistency_policy, S_IRUGO | S_IWUSR, consistency_policy_show,
+        consistency_policy_store);
+ 
++>>>>>>> ba903a3ea465 (raid5-ppl: runtime PPL enabling or disabling)
  static struct attribute *md_default_attrs[] = {
  	&md_level.attr,
  	&md_layout.attr,
diff --cc drivers/md/md.h
index 07747899ac17,e0940064c3ec..000000000000
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@@ -501,10 -545,8 +501,15 @@@ struct md_personalit
  	/* congested implements bdi.congested_fn().
  	 * Will not be called while array is 'suspended' */
  	int (*congested)(struct mddev *mddev, int bits);
++<<<<<<< HEAD
 +	/* mergeable_bvec is use to implement ->merge_bvec_fn */
 +	int (*mergeable_bvec)(struct mddev *mddev,
 +			      struct bvec_merge_data *bvm,
 +			      struct bio_vec *biovec);
++=======
+ 	/* Changes the consistency policy of an active array. */
+ 	int (*change_consistency_policy)(struct mddev *mddev, const char *buf);
++>>>>>>> ba903a3ea465 (raid5-ppl: runtime PPL enabling or disabling)
  };
  
  struct md_sysfs_entry {
diff --cc drivers/md/raid5.c
index 896a84d8eff0,88cc8981bd49..000000000000
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@@ -7992,7 -8431,7 +8044,11 @@@ static struct md_personality raid5_pers
  	.quiesce	= raid5_quiesce,
  	.takeover	= raid5_takeover,
  	.congested	= raid5_congested,
++<<<<<<< HEAD
 +	.mergeable_bvec	= raid5_mergeable_bvec,
++=======
+ 	.change_consistency_policy = raid5_change_consistency_policy,
++>>>>>>> ba903a3ea465 (raid5-ppl: runtime PPL enabling or disabling)
  };
  
  static struct md_personality raid4_personality =
* Unmerged path drivers/md/raid5-ppl.c
* Unmerged path drivers/md/md.c
* Unmerged path drivers/md/md.h
* Unmerged path drivers/md/raid5-ppl.c
* Unmerged path drivers/md/raid5.c
