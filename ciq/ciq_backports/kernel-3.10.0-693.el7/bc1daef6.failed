perf/x86/amd/uncore: Update the number of uncore counters

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
commit bc1daef6b5da574bca0a2ec7f9b4d0c5fe0c7d11
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/bc1daef6.failed

This patch updates the AMD uncore driver to support AMD Family17h
processors. In Family17h, there are two extra last level cache counters.

The maximum available counters is increased and the number of counters
for each uncore type is now based on the family.

	Signed-off-by: Janakarajan Natarajan <Janakarajan.Natarajan@amd.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
Link: http://lkml.kernel.org/r/799f9c5be8963cc209d9169a08f4a2643b748dc7.1484598705.git.Janakarajan.Natarajan@amd.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit bc1daef6b5da574bca0a2ec7f9b4d0c5fe0c7d11)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/amd/uncore.c
diff --cc arch/x86/events/amd/uncore.c
index 7ed45bf690a2,e6a2eb54c4a4..000000000000
--- a/arch/x86/events/amd/uncore.c
+++ b/arch/x86/events/amd/uncore.c
@@@ -22,10 -22,11 +22,11 @@@
  
  #define NUM_COUNTERS_NB		4
  #define NUM_COUNTERS_L2		4
- #define MAX_COUNTERS		NUM_COUNTERS_NB
+ #define NUM_COUNTERS_L3		6
+ #define MAX_COUNTERS		6
  
  #define RDPMC_BASE_NB		6
 -#define RDPMC_BASE_LLC		10
 +#define RDPMC_BASE_L2		10
  
  #define COUNTER_SHIFT		16
  
@@@ -316,18 -316,18 +320,29 @@@ static int amd_uncore_cpu_up_prepare(un
  		*per_cpu_ptr(amd_uncore_nb, cpu) = uncore_nb;
  	}
  
 -	if (amd_uncore_llc) {
 -		uncore_llc = amd_uncore_alloc(cpu);
 -		if (!uncore_llc)
 +	if (amd_uncore_l2) {
 +		uncore_l2 = amd_uncore_alloc(cpu);
 +		if (!uncore_l2)
  			goto fail;
++<<<<<<< HEAD
 +		uncore_l2->cpu = cpu;
 +		uncore_l2->num_counters = NUM_COUNTERS_L2;
 +		uncore_l2->rdpmc_base = RDPMC_BASE_L2;
 +		uncore_l2->msr_base = MSR_F16H_L2I_PERF_CTL;
 +		uncore_l2->active_mask = &amd_l2_active_mask;
 +		uncore_l2->pmu = &amd_l2_pmu;
 +		uncore_l2->id = -1;
 +		*per_cpu_ptr(amd_uncore_l2, cpu) = uncore_l2;
++=======
+ 		uncore_llc->cpu = cpu;
+ 		uncore_llc->num_counters = num_counters_llc;
+ 		uncore_llc->rdpmc_base = RDPMC_BASE_LLC;
+ 		uncore_llc->msr_base = MSR_F16H_L2I_PERF_CTL;
+ 		uncore_llc->active_mask = &amd_llc_active_mask;
+ 		uncore_llc->pmu = &amd_llc_pmu;
+ 		uncore_llc->id = -1;
+ 		*per_cpu_ptr(amd_uncore_llc, cpu) = uncore_llc;
++>>>>>>> bc1daef6b5da (perf/x86/amd/uncore: Update the number of uncore counters)
  	}
  
  	return 0;
@@@ -543,10 -496,31 +558,35 @@@ static int __init amd_uncore_init(void
  	if (boot_cpu_data.x86_vendor != X86_VENDOR_AMD)
  		goto fail_nodev;
  
++<<<<<<< HEAD
 +	if (!cpu_has_topoext)
++=======
+ 	switch(boot_cpu_data.x86) {
+ 		case 23:
+ 			/* Family 17h: */
+ 			num_counters_nb = NUM_COUNTERS_NB;
+ 			num_counters_llc = NUM_COUNTERS_L3;
+ 			break;
+ 		case 22:
+ 			/* Family 16h - may change: */
+ 			num_counters_nb = NUM_COUNTERS_NB;
+ 			num_counters_llc = NUM_COUNTERS_L2;
+ 			break;
+ 		default:
+ 			/*
+ 			 * All prior families have the same number of
+ 			 * NorthBridge and Last Level Cache counters
+ 			 */
+ 			num_counters_nb = NUM_COUNTERS_NB;
+ 			num_counters_llc = NUM_COUNTERS_L2;
+ 			break;
+ 	}
+ 
+ 	if (!boot_cpu_has(X86_FEATURE_TOPOEXT))
++>>>>>>> bc1daef6b5da (perf/x86/amd/uncore: Update the number of uncore counters)
  		goto fail_nodev;
  
 -	if (boot_cpu_has(X86_FEATURE_PERFCTR_NB)) {
 +	if (cpu_has_perfctr_nb) {
  		amd_uncore_nb = alloc_percpu(struct amd_uncore *);
  		if (!amd_uncore_nb) {
  			ret = -ENOMEM;
* Unmerged path arch/x86/events/amd/uncore.c
