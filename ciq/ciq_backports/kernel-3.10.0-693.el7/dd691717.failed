SUNRPC rpc_clnt_xprt_switch_add_xprt

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Andy Adamson <andros@netapp.com>
commit dd69171769cf4649a7ff3755e91cbd242a833727
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/dd691717.failed

Give the NFS layer access to the rpc_xprt_switch_add_xprt function

	Signed-off-by: Andy Adamson <andros@netapp.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit dd69171769cf4649a7ff3755e91cbd242a833727)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/clnt.h
#	net/sunrpc/clnt.c
diff --cc include/linux/sunrpc/clnt.h
index 9a7ddbaf116e,b069d6e2c3d6..000000000000
--- a/include/linux/sunrpc/clnt.h
+++ b/include/linux/sunrpc/clnt.h
@@@ -196,7 -195,12 +196,13 @@@ int		rpc_clnt_add_xprt(struct rpc_clnt 
  				struct rpc_xprt *,
  				void *),
  			void *data);
 -void		rpc_cap_max_reconnect_timeout(struct rpc_clnt *clnt,
 -			unsigned long timeo);
  
  const char *rpc_proc_name(const struct rpc_task *task);
++<<<<<<< HEAD
++=======
+ 
+ void rpc_clnt_xprt_switch_put(struct rpc_clnt *);
+ void rpc_clnt_xprt_switch_add_xprt(struct rpc_clnt *, struct rpc_xprt *);
++>>>>>>> dd69171769cf (SUNRPC rpc_clnt_xprt_switch_add_xprt)
  #endif /* __KERNEL__ */
  #endif /* _LINUX_SUNRPC_CLNT_H */
diff --cc net/sunrpc/clnt.c
index cfcbe92be38e,43ec46547dc9..000000000000
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@@ -2635,6 -2674,40 +2635,43 @@@ out_put_switch
  }
  EXPORT_SYMBOL_GPL(rpc_clnt_add_xprt);
  
++<<<<<<< HEAD
++=======
+ static int
+ rpc_xprt_cap_max_reconnect_timeout(struct rpc_clnt *clnt,
+ 		struct rpc_xprt *xprt,
+ 		void *data)
+ {
+ 	unsigned long timeout = *((unsigned long *)data);
+ 
+ 	if (timeout < xprt->max_reconnect_timeout)
+ 		xprt->max_reconnect_timeout = timeout;
+ 	return 0;
+ }
+ 
+ void
+ rpc_cap_max_reconnect_timeout(struct rpc_clnt *clnt, unsigned long timeo)
+ {
+ 	rpc_clnt_iterate_for_each_xprt(clnt,
+ 			rpc_xprt_cap_max_reconnect_timeout,
+ 			&timeo);
+ }
+ EXPORT_SYMBOL_GPL(rpc_cap_max_reconnect_timeout);
+ 
+ void rpc_clnt_xprt_switch_put(struct rpc_clnt *clnt)
+ {
+ 	xprt_switch_put(rcu_dereference(clnt->cl_xpi.xpi_xpswitch));
+ }
+ EXPORT_SYMBOL_GPL(rpc_clnt_xprt_switch_put);
+ 
+ void rpc_clnt_xprt_switch_add_xprt(struct rpc_clnt *clnt, struct rpc_xprt *xprt)
+ {
+ 	rpc_xprt_switch_add_xprt(rcu_dereference(clnt->cl_xpi.xpi_xpswitch),
+ 				 xprt);
+ }
+ EXPORT_SYMBOL_GPL(rpc_clnt_xprt_switch_add_xprt);
+ 
++>>>>>>> dd69171769cf (SUNRPC rpc_clnt_xprt_switch_add_xprt)
  #if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
  static void rpc_show_header(void)
  {
* Unmerged path include/linux/sunrpc/clnt.h
* Unmerged path net/sunrpc/clnt.c
