net_sched: move tc offload macros to pkt_cls.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] sched: move tc offload macros to pkt_cls.h (Jonathan Toppins) [1393375]
Rebuild_FUZZ: 95.45%
commit-author WANG Cong <xiyou.wangcong@gmail.com>
commit 2734437ef3c2943090d0914bf91caa6b30451615
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2734437e.failed

struct tcf_exts belongs to filters, should not be visible
to plain tc actions.

	Cc: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2734437ef3c2943090d0914bf91caa6b30451615)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/act_api.h
diff --cc include/net/act_api.h
index 11aac9abd0ca,870332ff61eb..000000000000
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@@ -105,5 -188,18 +105,22 @@@ int tcf_action_dump(struct sk_buff *skb
  int tcf_action_dump_old(struct sk_buff *skb, struct tc_action *a, int, int);
  int tcf_action_dump_1(struct sk_buff *skb, struct tc_action *a, int, int);
  int tcf_action_copy_stats(struct sk_buff *, struct tc_action *, int);
++<<<<<<< HEAD
 +#endif /* CONFIG_NET_CLS_ACT */
++=======
+ 
+ #endif /* CONFIG_NET_CLS_ACT */
+ 
+ static inline void tcf_action_stats_update(struct tc_action *a, u64 bytes,
+ 					   u64 packets, u64 lastuse)
+ {
+ #ifdef CONFIG_NET_CLS_ACT
+ 	if (!a->ops->stats_update)
+ 		return;
+ 
+ 	a->ops->stats_update(a, bytes, packets, lastuse);
+ #endif
+ }
+ 
++>>>>>>> 2734437ef3c2 (net_sched: move tc offload macros to pkt_cls.h)
  #endif
* Unmerged path include/net/act_api.h
diff --git a/include/net/pkt_cls.h b/include/net/pkt_cls.h
index b606c03c3836..ccaf99d7404d 100644
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@ -130,6 +130,25 @@ tcf_exts_exec(struct sk_buff *skb, struct tcf_exts *exts,
 	return 0;
 }
 
+#ifdef CONFIG_NET_CLS_ACT
+
+#define tc_no_actions(_exts) \
+	(list_empty(&(_exts)->actions))
+
+#define tc_for_each_action(_a, _exts) \
+	list_for_each_entry(_a, &(_exts)->actions, list)
+
+#define tc_single_action(_exts) \
+	(list_is_singular(&(_exts)->actions))
+
+#else /* CONFIG_NET_CLS_ACT */
+
+#define tc_no_actions(_exts) true
+#define tc_for_each_action(_a, _exts) while ((void)(_a), 0)
+#define tc_single_action(_exts) false
+
+#endif /* CONFIG_NET_CLS_ACT */
+
 int tcf_exts_validate(struct net *net, struct tcf_proto *tp,
 		      struct nlattr **tb, struct nlattr *rate_tlv,
 		      struct tcf_exts *exts, bool ovr);
