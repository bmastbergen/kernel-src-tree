ping: implement proper locking

jira LE-1907
cve CVE-2017-2671
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 43a6684519ab0a6c52024b5e25322476cabad893
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/43a66845.failed

We got a report of yet another bug in ping

http://www.openwall.com/lists/oss-security/2017/03/24/6

->disconnect() is not called with socket lock held.

Fix this by acquiring ping rwlock earlier.

Thanks to Daniel, Alexander and Andrey for letting us know this problem.

Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Daniel Jiang <danieljiang0415@gmail.com>
	Reported-by: Solar Designer <solar@openwall.com>
	Reported-by: Andrey Konovalov <andreyknvl@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 43a6684519ab0a6c52024b5e25322476cabad893)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/ping.c
diff --cc net/ipv4/ping.c
index 291ac786a807,ccfbce13a633..000000000000
--- a/net/ipv4/ping.c
+++ b/net/ipv4/ping.c
@@@ -125,31 -143,35 +125,36 @@@ fail
  	write_unlock_bh(&ping_table.lock);
  	return 1;
  }
 -EXPORT_SYMBOL_GPL(ping_get_port);
  
 -int ping_hash(struct sock *sk)
 +static void ping_v4_hash(struct sock *sk)
  {
 -	pr_debug("ping_hash(sk->port=%u)\n", inet_sk(sk)->inet_num);
 +	pr_debug("ping_v4_hash(sk->port=%u)\n", inet_sk(sk)->inet_num);
  	BUG(); /* "Please do not press this button again." */
 -
 -	return 0;
  }
  
 -void ping_unhash(struct sock *sk)
 +static void ping_v4_unhash(struct sock *sk)
  {
  	struct inet_sock *isk = inet_sk(sk);
++<<<<<<< HEAD
 +	pr_debug("ping_v4_unhash(isk=%p,isk->num=%u)\n", isk, isk->inet_num);
++=======
+ 
+ 	pr_debug("ping_unhash(isk=%p,isk->num=%u)\n", isk, isk->inet_num);
+ 	write_lock_bh(&ping_table.lock);
++>>>>>>> 43a6684519ab (ping: implement proper locking)
  	if (sk_hashed(sk)) {
- 		write_lock_bh(&ping_table.lock);
  		hlist_nulls_del(&sk->sk_nulls_node);
  		sk_nulls_node_init(&sk->sk_nulls_node);
  		sock_put(sk);
  		isk->inet_num = 0;
  		isk->inet_sport = 0;
  		sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
- 		write_unlock_bh(&ping_table.lock);
  	}
+ 	write_unlock_bh(&ping_table.lock);
  }
 -EXPORT_SYMBOL_GPL(ping_unhash);
  
 -static struct sock *ping_lookup(struct net *net, struct sk_buff *skb, u16 ident)
 +static struct sock *ping_v4_lookup(struct net *net, __be32 saddr, __be32 daddr,
 +				   u16 ident, int dif)
  {
  	struct hlist_nulls_head *hslot = ping_hashslot(&ping_table, net, ident);
  	struct sock *sk = NULL;
* Unmerged path net/ipv4/ping.c
