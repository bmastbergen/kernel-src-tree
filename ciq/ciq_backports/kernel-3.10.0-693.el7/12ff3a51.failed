random: simplify loop in random_read

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Greg Price <price@MIT.EDU>
commit 12ff3a517ab92b5496c731a3c354caa1f16c569f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/12ff3a51.failed

The loop condition never changes until just before a break, so we
might as well write it as a constant.  Also since a996996dd75a
("random: drop weird m_time/a_time manipulation") we don't do anything
after the loop finishes, so the 'break's might as well return
directly.  Some other simplifications.

There should be no change in behavior introduced by this commit.

	Signed-off-by: Greg Price <price@mit.edu>
	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
(cherry picked from commit 12ff3a517ab92b5496c731a3c354caa1f16c569f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/random.c
diff --cc drivers/char/random.c
index 2bc59ac5b6d2,fcc2bff8f887..000000000000
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@@ -1262,53 -1290,27 +1262,70 @@@ random_read(struct file *file, char __u
  	if (nbytes == 0)
  		return 0;
  
++<<<<<<< HEAD
 +	while (nbytes > 0) {
 +		n = nbytes;
 +		if (n > SEC_XFER_SIZE)
 +			n = SEC_XFER_SIZE;
 +
 +		DEBUG_ENT("reading %zu bits\n", n*8);
 +
 +		n = extract_entropy_user(&blocking_pool, buf, n);
 +
 +		if (n < 0) {
 +			retval = n;
 +			break;
 +		}
 +
 +		DEBUG_ENT("read got %zd bits (%zd still needed)\n",
 +			  n*8, (nbytes-n)*8);
- 
- 		if (n == 0) {
- 			if (file->f_flags & O_NONBLOCK) {
- 				retval = -EAGAIN;
- 				break;
- 			}
- 
++=======
+ 	nbytes = min_t(size_t, nbytes, SEC_XFER_SIZE);
+ 	while (1) {
+ 		n = extract_entropy_user(&blocking_pool, buf, nbytes);
+ 		if (n < 0)
+ 			return n;
+ 		trace_random_read(n*8, (nbytes-n)*8,
+ 				  ENTROPY_BITS(&blocking_pool),
+ 				  ENTROPY_BITS(&input_pool));
+ 		if (n > 0)
+ 			return n;
+ 		/* Pool is (near) empty.  Maybe wait and retry. */
++>>>>>>> 12ff3a517ab9 (random: simplify loop in random_read)
+ 
+ 		if (file->f_flags & O_NONBLOCK)
+ 			return -EAGAIN;
+ 
++<<<<<<< HEAD
 +			DEBUG_ENT("sleeping?\n");
 +
 +			wait_event_interruptible(random_read_wait,
 +				ENTROPY_BITS(&input_pool) >=
 +				random_read_wakeup_thresh);
 +
 +			DEBUG_ENT("awake\n");
 +
 +			if (signal_pending(current)) {
 +				retval = -ERESTARTSYS;
 +				break;
 +			}
 +
 +			continue;
 +		}
 +
 +		count += n;
 +		buf += n;
 +		nbytes -= n;
 +		break;		/* This break makes the device work */
 +				/* like a named pipe */
++=======
+ 		wait_event_interruptible(random_read_wait,
+ 			ENTROPY_BITS(&input_pool) >=
+ 			random_read_wakeup_thresh);
+ 		if (signal_pending(current))
+ 			return -ERESTARTSYS;
++>>>>>>> 12ff3a517ab9 (random: simplify loop in random_read)
  	}
- 
- 	return (count ? count : retval);
  }
  
  static ssize_t
* Unmerged path drivers/char/random.c
