lib/uuid.c: introduce a few more generic helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [lib] uuid.c: introduce a few more generic helpers (Tarun Gupta) [1116064]
Rebuild_FUZZ: 95.65%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 2b1b0d66704a8cafe83be7114ec4c15ab3a314ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/2b1b0d66.failed

There are new helpers in this patch:

  uuid_is_valid		checks if a UUID is valid
  uuid_be_to_bin	converts from string to binary (big endian)
  uuid_le_to_bin	converts from string to binary (little endian)

They will be used in future, i.e. in the following patches in the series.

This also moves the indices arrays to lib/uuid.c to be shared accross
modules.

[andriy.shevchenko@linux.intel.com: fix typo]
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>
	Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
	Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: "Theodore Ts'o" <tytso@mit.edu>
	Cc: Al Viro <viro@zeniv.linux.org.uk>
	Cc: Jens Axboe <axboe@kernel.dk>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2b1b0d66704a8cafe83be7114ec4c15ab3a314ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/uuid.c
diff --cc lib/uuid.c
index 398821e4dce1,82787f652fbc..000000000000
--- a/lib/uuid.c
+++ b/lib/uuid.c
@@@ -23,6 -25,31 +25,34 @@@
  #include <linux/uuid.h>
  #include <linux/random.h>
  
++<<<<<<< HEAD
++=======
+ const u8 uuid_le_index[16] = {3,2,1,0,5,4,7,6,8,9,10,11,12,13,14,15};
+ EXPORT_SYMBOL(uuid_le_index);
+ const u8 uuid_be_index[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
+ EXPORT_SYMBOL(uuid_be_index);
+ 
+ /***************************************************************
+  * Random UUID interface
+  *
+  * Used here for a Boot ID, but can be useful for other kernel
+  * drivers.
+  ***************************************************************/
+ 
+ /*
+  * Generate random UUID
+  */
+ void generate_random_uuid(unsigned char uuid[16])
+ {
+ 	get_random_bytes(uuid, 16);
+ 	/* Set UUID version to 4 --- truly random generation */
+ 	uuid[6] = (uuid[6] & 0x0F) | 0x40;
+ 	/* Set the UUID variant to DCE */
+ 	uuid[8] = (uuid[8] & 0x3F) | 0x80;
+ }
+ EXPORT_SYMBOL(generate_random_uuid);
+ 
++>>>>>>> 2b1b0d66704a (lib/uuid.c: introduce a few more generic helpers)
  static void __uuid_gen_common(__u8 b[16])
  {
  	prandom_bytes(b, 16);
diff --git a/include/linux/uuid.h b/include/linux/uuid.h
index 6df2509033d7..9975fc2c802b 100644
--- a/include/linux/uuid.h
+++ b/include/linux/uuid.h
@@ -22,6 +22,11 @@
 
 #include <uapi/linux/uuid.h>
 
+/*
+ * The length of a UUID string ("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
+ * not including trailing NUL.
+ */
+#define	UUID_STRING_LEN		36
 
 static inline int uuid_le_cmp(const uuid_le u1, const uuid_le u2)
 {
@@ -36,4 +41,12 @@ static inline int uuid_be_cmp(const uuid_be u1, const uuid_be u2)
 extern void uuid_le_gen(uuid_le *u);
 extern void uuid_be_gen(uuid_be *u);
 
+bool __must_check uuid_is_valid(const char *uuid);
+
+extern const u8 uuid_le_index[16];
+extern const u8 uuid_be_index[16];
+
+int uuid_le_to_bin(const char *uuid, uuid_le *u);
+int uuid_be_to_bin(const char *uuid, uuid_be *u);
+
 #endif
* Unmerged path lib/uuid.c
diff --git a/lib/vsprintf.c b/lib/vsprintf.c
index 71f6c91a3450..bff09a6fe9b8 100644
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@ -29,6 +29,7 @@
 #include <linux/cpumask.h>
 #include <linux/dcache.h>
 #include <linux/cred.h>
+#include <linux/uuid.h>
 #include <net/addrconf.h>
 
 #include <asm/page.h>		/* for PAGE_SIZE */
@@ -1195,19 +1196,17 @@ static noinline_for_stack
 char *uuid_string(char *buf, char *end, const u8 *addr,
 		  struct printf_spec spec, const char *fmt)
 {
-	char uuid[sizeof("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")];
+	char uuid[UUID_STRING_LEN + 1];
 	char *p = uuid;
 	int i;
-	static const u8 be[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-	static const u8 le[16] = {3,2,1,0,5,4,7,6,8,9,10,11,12,13,14,15};
-	const u8 *index = be;
+	const u8 *index = uuid_be_index;
 	bool uc = false;
 
 	switch (*(++fmt)) {
 	case 'L':
 		uc = true;		/* fall-through */
 	case 'l':
-		index = le;
+		index = uuid_le_index;
 		break;
 	case 'B':
 		uc = true;
