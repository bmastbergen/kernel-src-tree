ACPICA: Clib: Fix wrong mini C library usage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit da24f31d33dd18c622bb4f21791565ab9b6421db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/da24f31d.failed

ACPICA commit 4aab18466b56f3660f27cffd3c0160900737f844

When mini C library is used, we should have the following macros undefined.
The only user should be the EFI applications:
  ACPI_USE_SYSTEM_CLIBRARY=n
  ACPI_USE_STANDARD_HEADERS=n
All other applications uses the compiler specific library:
  ACPI_USE_SYSTEM_CLIBRARY=y
  ACPI_USE_STANDARD_HEADERS=y
Linux/BSD kernels are the kind of hosts providing C library but does not
provide the standard headers:
  ACPI_USE_SYSTEM_CLIBRARY=y
  ACPI_USE_STANDARD_HEADERS=n
But the above logic hasn't been synchronized between the header files.

This patch synchronizes all header files to correct C library usages for
different platforms. This patch moves all ACPI_USE_SYSTEM_CLIRARY and
ACPI_USE_STANDARD_HEADERS to the top most lines of a platform specific
header.

After synchronization, ACPI_USE_SYSTEM_CLIRARY definition can be removed
for ACPI_APPLICATION. Lv Zheng.

Link: https://github.com/acpica/acpica/commit/4aab1846
Link: https://bugs.acpica.org/show_bug.cgi?id=1299
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit da24f31d33dd18c622bb4f21791565ab9b6421db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/acpi/platform/acenv.h
#	include/acpi/platform/aclinux.h
diff --cc include/acpi/platform/acenv.h
index 5211e9663d36,ee5c0b98e53a..000000000000
--- a/include/acpi/platform/acenv.h
+++ b/include/acpi/platform/acenv.h
@@@ -288,10 -325,11 +287,11 @@@
   * ACPI_USE_SYSTEM_CLIBRARY - Define this if linking to an actual C library.
   *      Otherwise, local versions of string/memory functions will be used.
   * ACPI_USE_STANDARD_HEADERS - Define this if linking to a C library and
-  *      the standard header files may be used.
+  *      the standard header files may be used. Defining this implies that
+  *      ACPI_USE_SYSTEM_CLIBRARY has been defined.
   *
 - * The ACPICA subsystem only uses low level C library functions that do not
 - * call operating system services and may therefore be inlined in the code.
 + * The ACPICA subsystem only uses low level C library functions that do not call
 + * operating system services and may therefore be inlined in the code.
   *
   * It may be necessary to tailor these include files to the target
   * generation environment.
@@@ -311,86 -347,6 +310,89 @@@
  
  #endif				/* ACPI_USE_STANDARD_HEADERS */
  
++<<<<<<< HEAD
 +/* We will be linking to the standard Clib functions */
 +
 +#define ACPI_STRSTR(s1,s2)      strstr((s1), (s2))
 +#define ACPI_STRCHR(s1,c)       strchr((s1), (c))
 +#define ACPI_STRLEN(s)          (acpi_size) strlen((s))
 +#define ACPI_STRCPY(d,s)        (void) strcpy((d), (s))
 +#define ACPI_STRNCPY(d,s,n)     (void) strncpy((d), (s), (acpi_size)(n))
 +#define ACPI_STRNCMP(d,s,n)     strncmp((d), (s), (acpi_size)(n))
 +#define ACPI_STRCMP(d,s)        strcmp((d), (s))
 +#define ACPI_STRCAT(d,s)        (void) strcat((d), (s))
 +#define ACPI_STRNCAT(d,s,n)     strncat((d), (s), (acpi_size)(n))
 +#define ACPI_STRTOUL(d,s,n)     strtoul((d), (s), (acpi_size)(n))
 +#define ACPI_MEMCMP(s1,s2,n)    memcmp((const char *)(s1), (const char *)(s2), (acpi_size)(n))
 +#define ACPI_MEMCPY(d,s,n)      (void) memcpy((d), (s), (acpi_size)(n))
 +#define ACPI_MEMSET(d,s,n)      (void) memset((d), (s), (acpi_size)(n))
 +
 +#define ACPI_TOUPPER(i)         toupper((int) (i))
 +#define ACPI_TOLOWER(i)         tolower((int) (i))
 +#define ACPI_IS_XDIGIT(i)       isxdigit((int) (i))
 +#define ACPI_IS_DIGIT(i)        isdigit((int) (i))
 +#define ACPI_IS_SPACE(i)        isspace((int) (i))
 +#define ACPI_IS_UPPER(i)        isupper((int) (i))
 +#define ACPI_IS_PRINT(i)        isprint((int) (i))
 +#define ACPI_IS_ALPHA(i)        isalpha((int) (i))
 +
 +#else
 +
 +/******************************************************************************
 + *
 + * Not using native C library, use local implementations
 + *
 + *****************************************************************************/
 +
 +/*
 + * Use local definitions of C library macros and functions. These function
 + * implementations may not be as efficient as an inline or assembly code
 + * implementation provided by a native C library, but they are functionally
 + * equivalent.
 + */
 +#ifndef va_arg
 +
 +#ifndef _VALIST
 +#define _VALIST
 +typedef char *va_list;
 +#endif				/* _VALIST */
 +
 +/* Storage alignment properties */
 +
 +#define  _AUPBND                (sizeof (acpi_native_int) - 1)
 +#define  _ADNBND                (sizeof (acpi_native_int) - 1)
 +
 +/* Variable argument list macro definitions */
 +
 +#define _bnd(X, bnd)            (((sizeof (X)) + (bnd)) & (~(bnd)))
 +#define va_arg(ap, T)           (*(T *)(((ap) += (_bnd (T, _AUPBND))) - (_bnd (T,_ADNBND))))
 +#define va_end(ap)              (ap = (va_list) NULL)
 +#define va_start(ap, A)         (void) ((ap) = (((char *) &(A)) + (_bnd (A,_AUPBND))))
 +
 +#endif				/* va_arg */
 +
 +/* Use the local (ACPICA) definitions of the clib functions */
 +
 +#define ACPI_STRSTR(s1,s2)      acpi_ut_strstr ((s1), (s2))
 +#define ACPI_STRCHR(s1,c)       acpi_ut_strchr ((s1), (c))
 +#define ACPI_STRLEN(s)          (acpi_size) acpi_ut_strlen ((s))
 +#define ACPI_STRCPY(d,s)        (void) acpi_ut_strcpy ((d), (s))
 +#define ACPI_STRNCPY(d,s,n)     (void) acpi_ut_strncpy ((d), (s), (acpi_size)(n))
 +#define ACPI_STRNCMP(d,s,n)     acpi_ut_strncmp ((d), (s), (acpi_size)(n))
 +#define ACPI_STRCMP(d,s)        acpi_ut_strcmp ((d), (s))
 +#define ACPI_STRCAT(d,s)        (void) acpi_ut_strcat ((d), (s))
 +#define ACPI_STRNCAT(d,s,n)     acpi_ut_strncat ((d), (s), (acpi_size)(n))
 +#define ACPI_STRTOUL(d,s,n)     acpi_ut_strtoul ((d), (s), (acpi_size)(n))
 +#define ACPI_MEMCMP(s1,s2,n)    acpi_ut_memcmp((const char *)(s1), (const char *)(s2), (acpi_size)(n))
 +#define ACPI_MEMCPY(d,s,n)      (void) acpi_ut_memcpy ((d), (s), (acpi_size)(n))
 +#define ACPI_MEMSET(d,v,n)      (void) acpi_ut_memset ((d), (v), (acpi_size)(n))
 +#define ACPI_TOUPPER(c)         acpi_ut_to_upper ((int) (c))
 +#define ACPI_TOLOWER(c)         acpi_ut_to_lower ((int) (c))
 +
 +#endif				/* ACPI_USE_SYSTEM_CLIBRARY */
 +
++=======
++>>>>>>> da24f31d33dd (ACPICA: Clib: Fix wrong mini C library usage)
  #ifndef ACPI_FILE
  #ifdef ACPI_APPLICATION
  #include <stdio.h>
diff --cc include/acpi/platform/aclinux.h
index 7bfab5771886,1380ec7035f8..000000000000
--- a/include/acpi/platform/aclinux.h
+++ b/include/acpi/platform/aclinux.h
@@@ -76,15 -135,58 +76,22 @@@
  #define acpi_spinlock                       spinlock_t *
  #define acpi_cpu_flags                      unsigned long
  
 -/* Use native linux version of acpi_os_allocate_zeroed */
 -
 -#define USE_NATIVE_ALLOCATE_ZEROED
 -
 -/*
 - * Overrides for in-kernel ACPICA
 - */
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_initialize
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_terminate
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_allocate
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_allocate_zeroed
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_free
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_acquire_object
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_thread_id
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_create_lock
 -
 -/*
 - * OSL interfaces used by debugger/disassembler
 - */
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_readable
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_writable
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_initialize_command_signals
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_terminate_command_signals
 -
 -/*
 - * OSL interfaces used by utilities
 - */
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_redirect_output
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_table_by_name
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_table_by_index
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_table_by_address
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_open_directory
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_get_next_filename
 -#define ACPI_USE_ALTERNATE_PROTOTYPE_acpi_os_close_directory
 -
 -#define ACPI_MSG_ERROR          KERN_ERR "ACPI Error: "
 -#define ACPI_MSG_EXCEPTION      KERN_ERR "ACPI Exception: "
 -#define ACPI_MSG_WARNING        KERN_WARNING "ACPI Warning: "
 -#define ACPI_MSG_INFO           KERN_INFO "ACPI: "
 -
 -#define ACPI_MSG_BIOS_ERROR     KERN_ERR "ACPI BIOS Error (bug): "
 -#define ACPI_MSG_BIOS_WARNING   KERN_WARNING "ACPI BIOS Warning (bug): "
 -
  #else				/* !__KERNEL__ */
  
++<<<<<<< HEAD
 +#include <stdarg.h>
 +#include <string.h>
 +#include <stdlib.h>
 +#include <ctype.h>
++=======
+ #define ACPI_USE_STANDARD_HEADERS
+ 
+ #ifdef ACPI_USE_STANDARD_HEADERS
++>>>>>>> da24f31d33dd (ACPICA: Clib: Fix wrong mini C library usage)
  #include <unistd.h>
+ #endif
  
 -/* Define/disable kernel-specific declarators */
 +/* Disable kernel specific declarators */
  
  #ifndef __init
  #define __init
* Unmerged path include/acpi/platform/acenv.h
* Unmerged path include/acpi/platform/aclinux.h
