fix bogus path_put() of nd->root after some unlazy_walk() failures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit d870b4a191a389c661cd40aacb06981c26b5e504
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/d870b4a1.failed

Failure to grab reference to parent dentry should go through the
same cleanup as nd->seq mismatch.  As it is, we might end up with
caller thinking it needs to path_put() nd->root, with obvious
nasty results once we'd hit that bug enough times to drive the
refcount of root dentry all the way to zero...

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit d870b4a191a389c661cd40aacb06981c26b5e504)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/namei.c
diff --cc fs/namei.c
index 7b532e964b05,c53d3a9547f9..000000000000
--- a/fs/namei.c
+++ b/fs/namei.c
@@@ -550,25 -500,21 +550,32 @@@ static int unlazy_walk(struct nameidat
  	BUG_ON(!(nd->flags & LOOKUP_RCU));
  
  	/*
 -	 * After legitimizing the bastards, terminate_walk()
 -	 * will do the right thing for non-RCU mode, and all our
 -	 * subsequent exit cases should rcu_read_unlock()
 -	 * before returning.  Do vfsmount first; if dentry
 -	 * can't be legitimized, just set nd->path.dentry to NULL
 -	 * and rely on dput(NULL) being a no-op.
 +	 * Get a reference to the parent first: we're
 +	 * going to make "path_put(nd->path)" valid in
 +	 * non-RCU context for "terminate_walk()".
 +	 *
 +	 * If this doesn't work, return immediately with
 +	 * RCU walking still active (and then we will do
 +	 * the RCU walk cleanup in terminate_walk()).
  	 */
 -	if (!legitimize_mnt(nd->path.mnt, nd->m_seq))
 +	if (!lockref_get_not_dead(&parent->d_lockref))
  		return -ECHILD;
 -	nd->flags &= ~LOOKUP_RCU;
  
++<<<<<<< HEAD
 +	/*
 +	 * After the mntget(), we terminate_walk() will do
 +	 * the right thing for non-RCU mode, and all our
 +	 * subsequent exit cases should unlock_rcu_walk()
 +	 * before returning.
 +	 */
 +	mntget(nd->path.mnt);
 +	nd->flags &= ~LOOKUP_RCU;
++=======
+ 	if (!lockref_get_not_dead(&parent->d_lockref)) {
+ 		nd->path.dentry = NULL;	
+ 		goto out;
+ 	}
++>>>>>>> d870b4a191a3 (fix bogus path_put() of nd->root after some unlazy_walk() failures)
  
  	/*
  	 * For a negative lookup, the lookup sequence point is the parents
* Unmerged path fs/namei.c
