nvme: move the workaround for I/O queue-less controllers from PCIe to core

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [nvme] move the workaround for I/O queue-less controllers from PCIe to core (David Milburn) [1384526 1389755 1366753 1374291 1383834]
Rebuild_FUZZ: 95.77%
commit-author Christoph Hellwig <hch@lst.de>
commit f5fa90dc0a5b0bcfa3fa851dbee9e3ab6381076b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f5fa90dc.failed

We want to apply this to Fabrics drivers as well, so move it to common
code.

	Reviewed-by: Jay Freyensee <james.p.freyensee@intel.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Tested-by: Ming Lin <ming.l@ssi.samsung.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit f5fa90dc0a5b0bcfa3fa851dbee9e3ab6381076b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 6cf19a97b3a4,dc39924362a3..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -1407,15 -1383,8 +1407,18 @@@ static int nvme_setup_io_queues(struct 
  	if (result < 0)
  		return result;
  
++<<<<<<< HEAD
 +	/*
 +	 * Degraded controllers might return an error when setting the queue
 +	 * count.  We still want to be able to bring them online and offer
 +	 * access to the admin queue, as that might be only way to fix them up.
 +	 */
 +	if (result > 0) {
 +		dev_err(dev->dev, "Could not set queue count (%d)\n", result);
++=======
+ 	if (nr_io_queues == 0)
++>>>>>>> f5fa90dc0a5b (nvme: move the workaround for I/O queue-less controllers from PCIe to core)
  		return 0;
- 	}
  
  	if (dev->cmb && NVME_CMB_SQS(dev->cmbsz)) {
  		result = nvme_cmb_qdepth(dev, nr_io_queues,
diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index 63f6b5f40b5c..cda92b845a5d 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -373,11 +373,22 @@ int nvme_set_queue_count(struct nvme_ctrl *ctrl, int *count)
 
 	status = nvme_set_features(ctrl, NVME_FEAT_NUM_QUEUES, q_count, 0,
 			&result);
-	if (status)
+	if (status < 0)
 		return status;
 
-	nr_io_queues = min(result & 0xffff, result >> 16) + 1;
-	*count = min(*count, nr_io_queues);
+	/*
+	 * Degraded controllers might return an error when setting the queue
+	 * count.  We still want to be able to bring them online and offer
+	 * access to the admin queue, as that might be only way to fix them up.
+	 */
+	if (status > 0) {
+		dev_err(ctrl->dev, "Could not set queue count (%d)\n", status);
+		*count = 0;
+	} else {
+		nr_io_queues = min(result & 0xffff, result >> 16) + 1;
+		*count = min(*count, nr_io_queues);
+	}
+
 	return 0;
 }
 
* Unmerged path drivers/nvme/host/pci.c
