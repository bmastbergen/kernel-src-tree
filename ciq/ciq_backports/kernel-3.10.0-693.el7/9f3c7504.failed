ixgbe: ixgbe_atr() compute l4_proto only if non-paged data has network/transport headers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sowmini Varadhan <sowmini.varadhan@oracle.com>
commit 9f3c7504fa005e2aab5ba9e1f2d8b4f4fcc6c077
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9f3c7504.failed

For some Tx paths (e.g., tpacket_snd()), ixgbe_atr may be
passed down an sk_buff that has the network and transport
header in the paged data, so it needs to make sure these
headers are available in the headlen bytes to calculate the
l4_proto.

This patch expect that network and transport headers are
already available in the non-paged header dat.  The assumption
is that the caller has set this up if l4_proto based Tx
steering is desired.

	Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Reviewed-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Tested-by: Krishneil Singh <krishneil.k.singh@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 9f3c7504fa005e2aab5ba9e1f2d8b4f4fcc6c077)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index f27e505f27d9,2436984481cc..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@@ -50,6 -50,10 +50,13 @@@
  #include <linux/if_bridge.h>
  #include <linux/prefetch.h>
  #include <scsi/fc/fc_fcoe.h>
++<<<<<<< HEAD
++=======
+ #include <net/udp_tunnel.h>
+ #include <net/pkt_cls.h>
+ #include <net/tc_act/tc_gact.h>
+ #include <net/tc_act/tc_mirred.h>
++>>>>>>> 9f3c7504fa00 (ixgbe: ixgbe_atr() compute l4_proto only if non-paged data has network/transport headers)
  #include <net/vxlan.h>
  
  #include "ixgbe.h"
@@@ -7665,7 -7661,8 +7672,12 @@@ static void ixgbe_atr(struct ixgbe_rin
  	/* snag network header to get L4 type and address */
  	skb = first->skb;
  	hdr.network = skb_network_header(skb);
++<<<<<<< HEAD
 +#ifdef CONFIG_IXGBE_VXLAN
++=======
+ 	if (unlikely(hdr.network <= skb->data))
+ 		return;
++>>>>>>> 9f3c7504fa00 (ixgbe: ixgbe_atr() compute l4_proto only if non-paged data has network/transport headers)
  	if (skb->encapsulation &&
  	    first->protocol == htons(ETH_P_IP) &&
  	    hdr.ipv4->protocol == IPPROTO_UDP) {
@@@ -7675,9 -7676,18 +7691,15 @@@
  		if (adapter->vxlan_port &&
  		    udp_hdr(skb)->dest == adapter->vxlan_port)
  			hdr.network = skb_inner_network_header(skb);
 -
 -		if (adapter->geneve_port &&
 -		    udp_hdr(skb)->dest == adapter->geneve_port)
 -			hdr.network = skb_inner_network_header(skb);
  	}
 +#endif /* CONFIG_IXGBE_VXLAN */
  
+ 	/* Make sure we have at least [minimum IPv4 header + TCP]
+ 	 * or [IPv6 header] bytes
+ 	 */
+ 	if (unlikely(skb_tail_pointer(skb) < hdr.network + 40))
+ 		return;
+ 
  	/* Currently only IPv4/IPv6 with TCP is supported */
  	switch (hdr.ipv4->version) {
  	case IPVERSION:
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
