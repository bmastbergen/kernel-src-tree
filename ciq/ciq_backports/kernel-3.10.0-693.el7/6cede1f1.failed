cxgb4: add support for per queue tx scheduling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
commit 6cede1f17f51333ecf9cd4c9fca5565842f1bf55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/6cede1f1.failed

Add support to bind/unbind specified tx queues to/from scheduling
classes.  If a queue is already bound to a scheduling class, it is
unbound first and then bound to a new specified class.

	Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6cede1f17f51333ecf9cd4c9fca5565842f1bf55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/amso1100/c2_user.h
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
#	drivers/net/ethernet/chelsio/cxgb4/sched.c
diff --cc drivers/infiniband/hw/amso1100/c2_user.h
index 7e9e7ad65467,ac415eb24ac7..000000000000
--- a/drivers/infiniband/hw/amso1100/c2_user.h
+++ b/drivers/infiniband/hw/amso1100/c2_user.h
@@@ -30,53 -30,78 +30,109 @@@
   * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
 + *
   */
  
 -#ifndef __CXGB4_SCHED_H
 -#define __CXGB4_SCHED_H
 +#ifndef C2_USER_H
 +#define C2_USER_H
  
 -#include <linux/spinlock.h>
 -#include <linux/atomic.h>
 +#include <linux/types.h>
  
 -#define SCHED_CLS_NONE 0xff
 +/*
 + * Make sure that all structs defined in this file remain laid out so
 + * that they pack the same way on 32-bit and 64-bit architectures (to
 + * avoid incompatibility between 32-bit userspace and 64-bit kernels).
 + * In particular do not use pointer types -- pass pointers in __u64
 + * instead.
 + */
  
++<<<<<<< HEAD:drivers/infiniband/hw/amso1100/c2_user.h
 +struct c2_alloc_ucontext_resp {
 +	__u32 qp_tab_size;
 +	__u32 uarc_size;
++=======
+ #define FW_SCHED_CLS_NONE 0xffffffff
+ 
+ enum {
+ 	SCHED_STATE_ACTIVE,
+ 	SCHED_STATE_UNUSED,
++>>>>>>> 6cede1f17f51 (cxgb4: add support for per queue tx scheduling):drivers/net/ethernet/chelsio/cxgb4/sched.h
  };
  
 -enum sched_fw_ops {
 -	SCHED_FW_OP_ADD,
 +struct c2_alloc_pd_resp {
 +	__u32 pdn;
 +	__u32 reserved;
  };
  
++<<<<<<< HEAD:drivers/infiniband/hw/amso1100/c2_user.h
 +struct c2_create_cq {
 +	__u32 lkey;
 +	__u32 pdn;
 +	__u64 arm_db_page;
 +	__u64 set_db_page;
 +	__u32 arm_db_index;
 +	__u32 set_db_index;
++=======
+ enum sched_bind_type {
+ 	SCHED_QUEUE,
+ };
+ 
+ struct sched_queue_entry {
+ 	struct list_head list;
+ 	unsigned int cntxt_id;
+ 	struct ch_sched_queue param;
+ };
+ 
+ struct sched_class {
+ 	u8 state;
+ 	u8 idx;
+ 	struct ch_sched_params info;
+ 	struct list_head queue_list;
+ 	spinlock_t lock; /* Per class lock */
+ 	atomic_t refcnt;
++>>>>>>> 6cede1f17f51 (cxgb4: add support for per queue tx scheduling):drivers/net/ethernet/chelsio/cxgb4/sched.h
  };
  
 -struct sched_table {      /* per port scheduling table */
 -	u8 sched_size;
 -	rwlock_t rw_lock; /* Table lock */
 -	struct sched_class tab[0];
 +struct c2_create_cq_resp {
 +	__u32 cqn;
 +	__u32 reserved;
  };
  
 -static inline bool can_sched(struct net_device *dev)
 -{
 -	struct port_info *pi = netdev2pinfo(dev);
 +struct c2_create_qp {
 +	__u32 lkey;
 +	__u32 reserved;
 +	__u64 sq_db_page;
 +	__u64 rq_db_page;
 +	__u32 sq_db_index;
 +	__u32 rq_db_index;
 +};
  
++<<<<<<< HEAD:drivers/infiniband/hw/amso1100/c2_user.h
 +#endif				/* C2_USER_H */
++=======
+ 	return !pi->sched_tbl ? false : true;
+ }
+ 
+ static inline bool valid_class_id(struct net_device *dev, u8 class_id)
+ {
+ 	struct port_info *pi = netdev2pinfo(dev);
+ 
+ 	if ((class_id > pi->sched_tbl->sched_size - 1) &&
+ 	    (class_id != SCHED_CLS_NONE))
+ 		return false;
+ 
+ 	return true;
+ }
+ 
+ int cxgb4_sched_class_bind(struct net_device *dev, void *arg,
+ 			   enum sched_bind_type type);
+ int cxgb4_sched_class_unbind(struct net_device *dev, void *arg,
+ 			     enum sched_bind_type type);
+ 
+ struct sched_class *cxgb4_sched_class_alloc(struct net_device *dev,
+ 					    struct ch_sched_params *p);
+ 
+ struct sched_table *t4_init_sched(unsigned int size);
+ void t4_cleanup_sched(struct adapter *adap);
+ #endif  /* __CXGB4_SCHED_H */
++>>>>>>> 6cede1f17f51 (cxgb4: add support for per queue tx scheduling):drivers/net/ethernet/chelsio/cxgb4/sched.h
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
index 70d5542c0f8b,eb30612c5372..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
@@@ -818,6 -860,35 +818,38 @@@ struct adapter 
  	spinlock_t win0_lock ____cacheline_aligned_in_smp;
  };
  
++<<<<<<< HEAD
++=======
+ /* Support for "sched-class" command to allow a TX Scheduling Class to be
+  * programmed with various parameters.
+  */
+ struct ch_sched_params {
+ 	s8   type;                     /* packet or flow */
+ 	union {
+ 		struct {
+ 			s8   level;    /* scheduler hierarchy level */
+ 			s8   mode;     /* per-class or per-flow */
+ 			s8   rateunit; /* bit or packet rate */
+ 			s8   ratemode; /* %port relative or kbps absolute */
+ 			s8   channel;  /* scheduler channel [0..N] */
+ 			s8   class;    /* scheduler class [0..N] */
+ 			s32  minrate;  /* minimum rate */
+ 			s32  maxrate;  /* maximum rate */
+ 			s16  weight;   /* percent weight */
+ 			s16  pktsize;  /* average packet size */
+ 		} params;
+ 	} u;
+ };
+ 
+ /* Support for "sched_queue" command to allow one or more NIC TX Queues
+  * to be bound to a TX Scheduling Class.
+  */
+ struct ch_sched_queue {
+ 	s8   queue;    /* queue index */
+ 	s8   class;    /* class index */
+ };
+ 
++>>>>>>> 6cede1f17f51 (cxgb4: add support for per queue tx scheduling)
  /* Defined bit width of user definable filter tuples
   */
  #define ETHTYPE_BITWIDTH 16
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sched.c
* Unmerged path drivers/infiniband/hw/amso1100/c2_user.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sched.c
