md/multipath: replace printk() with pr_*()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [md] multipath: replace printk() with pr_*() (Jes Sorensen) [1380016]
Rebuild_FUZZ: 96.30%
commit-author NeilBrown <neilb@suse.com>
commit 7279694da4af9e99e7ed85ed8883c740efff348b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7279694d.failed

Also remove all messages about memory allocation failure.
page_alloc() reports those.

	Signed-off-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit 7279694da4af9e99e7ed85ed8883c740efff348b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/multipath.c
diff --cc drivers/md/multipath.c
index 2469a87c423b,589b80775d3f..000000000000
--- a/drivers/md/multipath.c
+++ b/drivers/md/multipath.c
@@@ -96,12 -97,12 +96,18 @@@ static void multipath_end_request(struc
  		 */
  		char b[BDEVNAME_SIZE];
  		md_error (mp_bh->mddev, rdev);
++<<<<<<< HEAD
 +		printk(KERN_ERR "multipath: %s: rescheduling sector %llu\n",
 +		       bdevname(rdev->bdev,b),
 +		       (unsigned long long)bio->bi_sector);
++=======
+ 		pr_info("multipath: %s: rescheduling sector %llu\n",
+ 			bdevname(rdev->bdev,b),
+ 			(unsigned long long)bio->bi_iter.bi_sector);
++>>>>>>> 7279694da4af (md/multipath: replace printk() with pr_*())
  		multipath_reschedule_retry(mp_bh);
  	} else
 -		multipath_end_bh_io(mp_bh, bio->bi_error);
 +		multipath_end_bh_io(mp_bh, error);
  	rdev_dec_pending(rdev, conf->mddev);
  }
  
@@@ -350,23 -339,22 +352,34 @@@ static void multipathd(struct md_threa
  		spin_unlock_irqrestore(&conf->device_lock, flags);
  
  		bio = &mp_bh->bio;
 -		bio->bi_iter.bi_sector = mp_bh->master_bio->bi_iter.bi_sector;
 +		bio->bi_sector = mp_bh->master_bio->bi_sector;
  
  		if ((mp_bh->path = multipath_map (conf))<0) {
++<<<<<<< HEAD
 +			printk(KERN_ALERT "multipath: %s: unrecoverable IO read"
 +				" error for block %llu\n",
 +				bdevname(bio->bi_bdev,b),
 +				(unsigned long long)bio->bi_sector);
 +			multipath_end_bh_io(mp_bh, -EIO);
 +		} else {
 +			printk(KERN_ERR "multipath: %s: redirecting sector %llu"
 +				" to another IO path\n",
 +				bdevname(bio->bi_bdev,b),
 +				(unsigned long long)bio->bi_sector);
++=======
+ 			pr_err("multipath: %s: unrecoverable IO read error for block %llu\n",
+ 			       bdevname(bio->bi_bdev,b),
+ 			       (unsigned long long)bio->bi_iter.bi_sector);
+ 			multipath_end_bh_io(mp_bh, -EIO);
+ 		} else {
+ 			pr_err("multipath: %s: redirecting sector %llu to another IO path\n",
+ 			       bdevname(bio->bi_bdev,b),
+ 			       (unsigned long long)bio->bi_iter.bi_sector);
++>>>>>>> 7279694da4af (md/multipath: replace printk() with pr_*())
  			*bio = *(mp_bh->master_bio);
 -			bio->bi_iter.bi_sector +=
 -				conf->multipaths[mp_bh->path].rdev->data_offset;
 +			bio->bi_sector += conf->multipaths[mp_bh->path].rdev->data_offset;
  			bio->bi_bdev = conf->multipaths[mp_bh->path].rdev->bdev;
 -			bio->bi_opf |= REQ_FAILFAST_TRANSPORT;
 +			bio->bi_rw |= REQ_FAILFAST_TRANSPORT;
  			bio->bi_end_io = multipath_end_request;
  			bio->bi_private = mp_bh;
  			generic_make_request(bio);
* Unmerged path drivers/md/multipath.c
