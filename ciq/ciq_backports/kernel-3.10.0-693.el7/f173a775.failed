ACPICA: Clib: Add -nostdinc support for EFI layer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit f173a7750eb188fd7d888d5950d58454bcfbd09b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f173a775.failed

ACPICA commit d261d40ea168f8e4c4e3986de720b8651c4aba1c

This patch adds sprintf()/snprintf()/vsnprintf()/printf()/vfprintf()
support for OSPMs that have ACPI_USE_SYSTEM_CLIBRARY defined but do not
have ACPI_USE_STANDARD_HEADERS defined.

-iwithprefix include is required to include <stdarg.h> which contains
compiler specific implementation of vargs when -nostdinc is specified.
-fno-builtin is required for GCC to avoid optimization performed printf().
This optimization cannot be automatically disabled by specifying -nostdlib.
Please refer to the first link below for the details. However, the build
option changes do not affect Linux kernel builds and are not included.
Lv Zheng.

Link: http://www.ciselant.de/projects/gcc_printf/gcc_printf.html
Link: https://github.com/acpica/acpica/commit/d261d40e
Link: https://bugs.acpica.org/show_bug.cgi?id=1302
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit f173a7750eb188fd7d888d5950d58454bcfbd09b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpica/acutils.h
#	drivers/acpi/acpica/utbuffer.c
#	drivers/acpi/acpica/utdebug.c
#	drivers/acpi/acpica/utprint.c
#	tools/power/acpi/tools/acpidump/apdump.c
#	tools/power/acpi/tools/acpidump/apfiles.c
diff --cc drivers/acpi/acpica/acutils.h
index 7125ee1826be,d899296eeb47..000000000000
--- a/drivers/acpi/acpica/acutils.h
+++ b/drivers/acpi/acpica/acutils.h
@@@ -730,4 -721,13 +730,16 @@@ const struct ah_predefined_name *acpi_a
  
  const struct ah_device_id *acpi_ah_match_hardware_id(char *hid);
  
++<<<<<<< HEAD
++=======
+ const char *acpi_ah_match_uuid(u8 *data);
+ 
+ /*
+  * utuuid -- UUID support functions
+  */
+ #if (defined ACPI_ASL_COMPILER || defined ACPI_EXEC_APP || defined ACPI_HELP_APP)
+ void acpi_ut_convert_string_to_uuid(char *in_string, u8 *uuid_buffer);
+ #endif
+ 
++>>>>>>> f173a7750eb1 (ACPICA: Clib: Add -nostdinc support for EFI layer)
  #endif				/* _ACUTILS_H */
diff --cc drivers/acpi/acpica/utbuffer.c
index 11fde93be120,ff2981275b9a..000000000000
--- a/drivers/acpi/acpica/utbuffer.c
+++ b/drivers/acpi/acpica/utbuffer.c
@@@ -199,3 -207,129 +199,132 @@@ acpi_ut_debug_dump_buffer(u8 *buffer, u
  
  	acpi_ut_dump_buffer(buffer, count, display, 0);
  }
++<<<<<<< HEAD
++=======
+ 
+ #ifdef ACPI_APPLICATION
+ /*******************************************************************************
+  *
+  * FUNCTION:    acpi_ut_dump_buffer_to_file
+  *
+  * PARAMETERS:  file                - File descriptor
+  *              buffer              - Buffer to dump
+  *              count               - Amount to dump, in bytes
+  *              display             - BYTE, WORD, DWORD, or QWORD display:
+  *                                      DB_BYTE_DISPLAY
+  *                                      DB_WORD_DISPLAY
+  *                                      DB_DWORD_DISPLAY
+  *                                      DB_QWORD_DISPLAY
+  *              base_offset         - Beginning buffer offset (display only)
+  *
+  * RETURN:      None
+  *
+  * DESCRIPTION: Generic dump buffer in both hex and ascii to a file.
+  *
+  ******************************************************************************/
+ 
+ void
+ acpi_ut_dump_buffer_to_file(ACPI_FILE file,
+ 			    u8 *buffer, u32 count, u32 display, u32 base_offset)
+ {
+ 	u32 i = 0;
+ 	u32 j;
+ 	u32 temp32;
+ 	u8 buf_char;
+ 
+ 	if (!buffer) {
+ 		fprintf(file, "Null Buffer Pointer in DumpBuffer!\n");
+ 		return;
+ 	}
+ 
+ 	if ((count < 4) || (count & 0x01)) {
+ 		display = DB_BYTE_DISPLAY;
+ 	}
+ 
+ 	/* Nasty little dump buffer routine! */
+ 
+ 	while (i < count) {
+ 
+ 		/* Print current offset */
+ 
+ 		fprintf(file, "%6.4X: ", (base_offset + i));
+ 
+ 		/* Print 16 hex chars */
+ 
+ 		for (j = 0; j < 16;) {
+ 			if (i + j >= count) {
+ 
+ 				/* Dump fill spaces */
+ 
+ 				fprintf(file, "%*s", ((display * 2) + 1), " ");
+ 				j += display;
+ 				continue;
+ 			}
+ 
+ 			switch (display) {
+ 			case DB_BYTE_DISPLAY:
+ 			default:	/* Default is BYTE display */
+ 
+ 				fprintf(file, "%02X ",
+ 					buffer[(acpi_size)i + j]);
+ 				break;
+ 
+ 			case DB_WORD_DISPLAY:
+ 
+ 				ACPI_MOVE_16_TO_32(&temp32,
+ 						   &buffer[(acpi_size)i + j]);
+ 				fprintf(file, "%04X ", temp32);
+ 				break;
+ 
+ 			case DB_DWORD_DISPLAY:
+ 
+ 				ACPI_MOVE_32_TO_32(&temp32,
+ 						   &buffer[(acpi_size)i + j]);
+ 				fprintf(file, "%08X ", temp32);
+ 				break;
+ 
+ 			case DB_QWORD_DISPLAY:
+ 
+ 				ACPI_MOVE_32_TO_32(&temp32,
+ 						   &buffer[(acpi_size)i + j]);
+ 				fprintf(file, "%08X", temp32);
+ 
+ 				ACPI_MOVE_32_TO_32(&temp32,
+ 						   &buffer[(acpi_size)i + j +
+ 							   4]);
+ 				fprintf(file, "%08X ", temp32);
+ 				break;
+ 			}
+ 
+ 			j += display;
+ 		}
+ 
+ 		/*
+ 		 * Print the ASCII equivalent characters but watch out for the bad
+ 		 * unprintable ones (printable chars are 0x20 through 0x7E)
+ 		 */
+ 		fprintf(file, " ");
+ 		for (j = 0; j < 16; j++) {
+ 			if (i + j >= count) {
+ 				fprintf(file, "\n");
+ 				return;
+ 			}
+ 
+ 			buf_char = buffer[(acpi_size)i + j];
+ 			if (isprint(buf_char)) {
+ 				fprintf(file, "%c", buf_char);
+ 			} else {
+ 				fprintf(file, ".");
+ 			}
+ 		}
+ 
+ 		/* Done with that line. */
+ 
+ 		fprintf(file, "\n");
+ 		i += 16;
+ 	}
+ 
+ 	return;
+ }
+ #endif
++>>>>>>> f173a7750eb1 (ACPICA: Clib: Add -nostdinc support for EFI layer)
diff --cc drivers/acpi/acpica/utdebug.c
index bcfe3233f0d4,005a4a2125a5..000000000000
--- a/drivers/acpi/acpica/utdebug.c
+++ b/drivers/acpi/acpica/utdebug.c
@@@ -536,11 -551,104 +536,105 @@@ acpi_ut_ptr_exit(u32 line_number
  	if (ACPI_IS_DEBUG_ENABLED(ACPI_LV_FUNCTIONS, component_id)) {
  		acpi_debug_print(ACPI_LV_FUNCTIONS,
  				 line_number, function_name, module_name,
 -				 component_id, "%s %p\n",
 -				 acpi_gbl_function_exit_prefix, ptr);
 +				 component_id, "%s %p\n", acpi_gbl_fn_exit_str,
 +				 ptr);
  	}
  
 -	if (acpi_gbl_nesting_level) {
 -		acpi_gbl_nesting_level--;
 -	}
 +	acpi_gbl_nesting_level--;
  }
  
++<<<<<<< HEAD
++=======
+ /*******************************************************************************
+  *
+  * FUNCTION:    acpi_ut_str_exit
+  *
+  * PARAMETERS:  line_number         - Caller's line number
+  *              function_name       - Caller's procedure name
+  *              module_name         - Caller's module name
+  *              component_id        - Caller's component ID
+  *              string              - String to display
+  *
+  * RETURN:      None
+  *
+  * DESCRIPTION: Function exit trace. Prints only if TRACE_FUNCTIONS bit is
+  *              set in debug_level. Prints exit value also.
+  *
+  ******************************************************************************/
+ 
+ void
+ acpi_ut_str_exit(u32 line_number,
+ 		 const char *function_name,
+ 		 const char *module_name, u32 component_id, const char *string)
+ {
+ 
+ 	/* Check if enabled up-front for performance */
+ 
+ 	if (ACPI_IS_DEBUG_ENABLED(ACPI_LV_FUNCTIONS, component_id)) {
+ 		acpi_debug_print(ACPI_LV_FUNCTIONS,
+ 				 line_number, function_name, module_name,
+ 				 component_id, "%s %s\n",
+ 				 acpi_gbl_function_exit_prefix, string);
+ 	}
+ 
+ 	if (acpi_gbl_nesting_level) {
+ 		acpi_gbl_nesting_level--;
+ 	}
+ }
+ 
+ /*******************************************************************************
+  *
+  * FUNCTION:    acpi_trace_point
+  *
+  * PARAMETERS:  type                - Trace event type
+  *              begin               - TRUE if before execution
+  *              aml                 - Executed AML address
+  *              pathname            - Object path
+  *              pointer             - Pointer to the related object
+  *
+  * RETURN:      None
+  *
+  * DESCRIPTION: Interpreter execution trace.
+  *
+  ******************************************************************************/
+ 
+ void
+ acpi_trace_point(acpi_trace_event_type type, u8 begin, u8 *aml, char *pathname)
+ {
+ 
+ 	ACPI_FUNCTION_ENTRY();
+ 
+ 	acpi_ex_trace_point(type, begin, aml, pathname);
+ 
+ #ifdef ACPI_USE_SYSTEM_TRACER
+ 	acpi_os_trace_point(type, begin, aml, pathname);
+ #endif
+ }
+ 
+ ACPI_EXPORT_SYMBOL(acpi_trace_point)
+ #endif
+ #ifdef ACPI_APPLICATION
+ /*******************************************************************************
+  *
+  * FUNCTION:    acpi_log_error
+  *
+  * PARAMETERS:  format              - Printf format field
+  *              ...                 - Optional printf arguments
+  *
+  * RETURN:      None
+  *
+  * DESCRIPTION: Print error message to the console, used by applications.
+  *
+  ******************************************************************************/
+ void ACPI_INTERNAL_VAR_XFACE acpi_log_error(const char *format, ...)
+ {
+ 	va_list args;
+ 
+ 	va_start(args, format);
+ 	(void)vfprintf(ACPI_FILE_ERR, format, args);
+ 	va_end(args);
+ }
+ 
+ ACPI_EXPORT_SYMBOL(acpi_log_error)
++>>>>>>> f173a7750eb1 (ACPICA: Clib: Add -nostdinc support for EFI layer)
  #endif
* Unmerged path drivers/acpi/acpica/utprint.c
* Unmerged path tools/power/acpi/tools/acpidump/apdump.c
* Unmerged path tools/power/acpi/tools/acpidump/apfiles.c
* Unmerged path drivers/acpi/acpica/acutils.h
* Unmerged path drivers/acpi/acpica/utbuffer.c
* Unmerged path drivers/acpi/acpica/utdebug.c
* Unmerged path drivers/acpi/acpica/utprint.c
* Unmerged path tools/power/acpi/tools/acpidump/apdump.c
* Unmerged path tools/power/acpi/tools/acpidump/apfiles.c
