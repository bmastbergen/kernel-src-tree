hung_task: Display every hung task warning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Aaron Tomlin <atomlin@redhat.com>
commit 270750dbc18a71b23d660df110e433ff9616a2d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/270750db.failed

When khungtaskd detects hung tasks, it prints out
backtraces from a number of those tasks.

Limiting the number of backtraces being printed
out can result in the user not seeing the information
necessary to debug the issue. The hung_task_warnings
sysctl controls this feature.

This patch makes it possible for hung_task_warnings
to accept a special value to print an unlimited
number of backtraces when khungtaskd detects hung
tasks.

The special value is -1. To use this value it is
necessary to change types from ulong to int.

	Signed-off-by: Aaron Tomlin <atomlin@redhat.com>
	Reviewed-by: Rik van Riel <riel@redhat.com>
	Acked-by: David Rientjes <rientjes@google.com>
	Cc: oleg@redhat.com
Link: http://lkml.kernel.org/r/1390239253-24030-3-git-send-email-atomlin@redhat.com
[ Build warning fix. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 270750dbc18a71b23d660df110e433ff9616a2d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/sysctl/kernel.txt
#	kernel/sysctl.c
diff --cc Documentation/sysctl/kernel.txt
index a0237c1a0a62,4205f3c05cbe..000000000000
--- a/Documentation/sysctl/kernel.txt
+++ b/Documentation/sysctl/kernel.txt
@@@ -33,8 -33,10 +33,15 @@@ show up in /proc/sys/kernel
  - domainname
  - hostname
  - hotplug
++<<<<<<< HEAD
 +- hardlockup_all_cpu_backtrace
 +- kexec_load_disabled
++=======
+ - hung_task_panic
+ - hung_task_check_count
+ - hung_task_timeout_secs
+ - hung_task_warnings
++>>>>>>> 270750dbc18a (hung_task: Display every hung task warning)
  - kptr_restrict
  - kstack_depth_to_print       [ X86 only ]
  - l2cr                        [ PPC only ]
@@@ -309,15 -291,41 +316,53 @@@ Default value is "/sbin/hotplug"
  
  ==============================================================
  
++<<<<<<< HEAD
 +kexec_load_disabled:
 +
 +A toggle indicating if the kexec_load syscall has been disabled. This
 +value defaults to 0 (false: kexec_load enabled), but can be set to 1
 +(true: kexec_load disabled). Once true, kexec can no longer be used, and
 +the toggle cannot be set back to false. This allows a kexec image to be
 +loaded before disabling the syscall, allowing a system to set up (and
 +later use) an image without it being altered. Generally used together
 +with the "modules_disabled" sysctl.
++=======
+ hung_task_panic:
+ 
+ Controls the kernel's behavior when a hung task is detected.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ 0: continue operation. This is the default behavior.
+ 
+ 1: panic immediately.
+ 
+ ==============================================================
+ 
+ hung_task_check_count:
+ 
+ The upper bound on the number of tasks that are checked.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ ==============================================================
+ 
+ hung_task_timeout_secs:
+ 
+ Check interval. When a task in D state did not get scheduled
+ for more than this value report a warning.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ 0: means infinite timeout - no checking done.
+ 
+ ==============================================================
+ 
+ hung_task_warning:
+ 
+ The maximum number of warnings to report. During a check interval
+ When this value is reached, no more the warnings will be reported.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ -1: report an infinite number of warnings.
++>>>>>>> 270750dbc18a (hung_task: Display every hung task warning)
  
  ==============================================================
  
diff --cc kernel/sysctl.c
index 0acfbc51c2f2,dd5b4496637e..000000000000
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@@ -118,6 -122,8 +118,11 @@@ extern int sysctl_nr_trim_pages
  static int sixty = 60;
  #endif
  
++<<<<<<< HEAD
++=======
+ static int __maybe_unused neg_one = -1;
+ 
++>>>>>>> 270750dbc18a (hung_task: Display every hung task warning)
  static int zero;
  static int __maybe_unused one = 1;
  static int __maybe_unused two = 2;
* Unmerged path Documentation/sysctl/kernel.txt
diff --git a/include/linux/sched/sysctl.h b/include/linux/sched/sysctl.h
index 83bb1a04896b..48954842f052 100644
--- a/include/linux/sched/sysctl.h
+++ b/include/linux/sched/sysctl.h
@@ -5,7 +5,7 @@
 extern unsigned int  sysctl_hung_task_panic;
 extern unsigned long sysctl_hung_task_check_count;
 extern unsigned long sysctl_hung_task_timeout_secs;
-extern unsigned long sysctl_hung_task_warnings;
+extern int sysctl_hung_task_warnings;
 extern int proc_dohung_task_timeout_secs(struct ctl_table *table, int write,
 					 void __user *buffer,
 					 size_t *lenp, loff_t *ppos);
diff --git a/kernel/hung_task.c b/kernel/hung_task.c
index 7630a4bd2bcf..98f2a222250b 100644
--- a/kernel/hung_task.c
+++ b/kernel/hung_task.c
@@ -36,7 +36,7 @@ unsigned long __read_mostly sysctl_hung_task_check_count = PID_MAX_LIMIT;
  */
 unsigned long __read_mostly sysctl_hung_task_timeout_secs = CONFIG_DEFAULT_HUNG_TASK_TIMEOUT;
 
-unsigned long __read_mostly sysctl_hung_task_warnings = 10;
+int __read_mostly sysctl_hung_task_warnings = 10;
 
 static int __read_mostly did_panic;
 
@@ -97,7 +97,9 @@ static void check_hung_task(struct task_struct *t, unsigned long timeout)
 
 	if (!sysctl_hung_task_warnings)
 		return;
-	sysctl_hung_task_warnings--;
+
+	if (sysctl_hung_task_warnings > 0)
+		sysctl_hung_task_warnings--;
 
 	/*
 	 * Ok, the task did not get scheduled for more than 2 minutes,
* Unmerged path kernel/sysctl.c
