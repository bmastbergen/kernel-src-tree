crypto: ccp - Convert calls to their devm_ counterparts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [crypto] ccp - Convert calls to their devm_ counterparts (Suravee Suthikulpanit) [1390820]
Rebuild_FUZZ: 92.16%
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit be03a3a0961eba0bc695fa91ac87efe5f4b8f40c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/be03a3a0.failed

Where applicable, convert calls to their devm_ counterparts, e.g. kzalloc
to devm_kzalloc.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit be03a3a0961eba0bc695fa91ac87efe5f4b8f40c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/ccp-dev.c
#	drivers/crypto/ccp/ccp-platform.c
diff --cc drivers/crypto/ccp/ccp-dev.c
index 2777dc97b570,861bacc1bb94..000000000000
--- a/drivers/crypto/ccp/ccp-dev.c
+++ b/drivers/crypto/ccp/ccp-dev.c
@@@ -280,11 -295,9 +280,16 @@@ struct ccp_device *ccp_alloc_struct(str
  {
  	struct ccp_device *ccp;
  
++<<<<<<< HEAD
 +	ccp = kzalloc(sizeof(*ccp), GFP_KERNEL);
 +	if (ccp == NULL) {
 +		dev_err(dev, "unable to allocate device struct\n");
++=======
+ 	ccp = devm_kzalloc(dev, sizeof(*ccp), GFP_KERNEL);
+ 	if (!ccp)
++>>>>>>> be03a3a0961e (crypto: ccp - Convert calls to their devm_ counterparts)
  		return NULL;
 +	}
  	ccp->dev = dev;
  
  	INIT_LIST_HEAD(&ccp->cmd);
* Unmerged path drivers/crypto/ccp/ccp-platform.c
* Unmerged path drivers/crypto/ccp/ccp-dev.c
diff --git a/drivers/crypto/ccp/ccp-pci.c b/drivers/crypto/ccp/ccp-pci.c
index 15741de944bc..4aed2abecd01 100644
--- a/drivers/crypto/ccp/ccp-pci.c
+++ b/drivers/crypto/ccp/ccp-pci.c
@@ -175,11 +175,10 @@ static int ccp_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (!ccp)
 		goto e_err;
 
-	ccp_pci = kzalloc(sizeof(*ccp_pci), GFP_KERNEL);
-	if (!ccp_pci) {
-		ret = -ENOMEM;
-		goto e_free1;
-	}
+	ccp_pci = devm_kzalloc(dev, sizeof(*ccp_pci), GFP_KERNEL);
+	if (!ccp_pci)
+		goto e_err;
+
 	ccp->dev_specific = ccp_pci;
 	ccp->get_irq = ccp_get_irqs;
 	ccp->free_irq = ccp_free_irqs;
@@ -187,7 +186,7 @@ static int ccp_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	ret = pci_request_regions(pdev, "ccp");
 	if (ret) {
 		dev_err(dev, "pci_request_regions failed (%d)\n", ret);
-		goto e_free2;
+		goto e_err;
 	}
 
 	ret = pci_enable_device(pdev);
@@ -241,12 +240,6 @@ e_device:
 e_regions:
 	pci_release_regions(pdev);
 
-e_free2:
-	kfree(ccp_pci);
-
-e_free1:
-	kfree(ccp);
-
 e_err:
 	dev_notice(dev, "initialization failed\n");
 	return ret;
@@ -269,8 +262,6 @@ static void ccp_pci_remove(struct pci_dev *pdev)
 
 	pci_release_regions(pdev);
 
-	kfree(ccp);
-
 	dev_notice(dev, "disabled\n");
 }
 
* Unmerged path drivers/crypto/ccp/ccp-platform.c
