net/mlx5: Fix query ISSI flow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Fix query ISSI flow (Don Dutile) [1238192 1385330 1417285]
Rebuild_FUZZ: 92.59%
commit-author Kamal Heib <kamalh@mellanox.com>
commit f9c14e46748be9a2adafdb7d216f6cdeb435aadc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f9c14e46.failed

In old FWs query ISSI command is not supported and for some of those FWs
it might fail with status other than "MLX5_CMD_STAT_BAD_OP_ERR".

In such case instead of failing the driver load, we will treat any FW
status other than 0 for Query ISSI FW command as ISSI not supported and
assume ISSI=0 (most basic driver/FW interface).

In case of driver syndrom (query ISSI failure by driver) we will fail
driver load.

Fixes: f62b8bb8f2d3 ('net/mlx5: Extend mlx5_core to support ConnectX-4
Ethernet functionality')
	Signed-off-by: Kamal Heib <kamalh@mellanox.com>

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f9c14e46748be9a2adafdb7d216f6cdeb435aadc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
#	drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index 4a5d317bf909,ada24e103b02..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -756,29 -719,28 +756,42 @@@ clean
  
  static int mlx5_core_set_issi(struct mlx5_core_dev *dev)
  {
 -	u32 query_in[MLX5_ST_SZ_DW(query_issi_in)]   = {0};
 -	u32 query_out[MLX5_ST_SZ_DW(query_issi_out)] = {0};
 -	u32 sup_issi;
 +	u32 query_in[MLX5_ST_SZ_DW(query_issi_in)];
 +	u32 query_out[MLX5_ST_SZ_DW(query_issi_out)];
 +	u32 set_in[MLX5_ST_SZ_DW(set_issi_in)];
 +	u32 set_out[MLX5_ST_SZ_DW(set_issi_out)];
  	int err;
 +	u32 sup_issi;
 +
 +	memset(query_in, 0, sizeof(query_in));
 +	memset(query_out, 0, sizeof(query_out));
  
  	MLX5_SET(query_issi_in, query_in, opcode, MLX5_CMD_OP_QUERY_ISSI);
 -	err = mlx5_cmd_exec(dev, query_in, sizeof(query_in),
 -			    query_out, sizeof(query_out));
 +
++<<<<<<< HEAD
 +	err = mlx5_cmd_exec_check_status(dev, query_in, sizeof(query_in),
 +					 query_out, sizeof(query_out));
  	if (err) {
 -		u32 syndrome;
 -		u8 status;
 +		if (((struct mlx5_outbox_hdr *)query_out)->status ==
 +		    MLX5_CMD_STAT_BAD_OP_ERR) {
 +			pr_debug("Only ISSI 0 is supported\n");
 +			return 0;
 +		}
  
 +		pr_err("failed to query ISSI\n");
 +		return err;
++=======
+ 		mlx5_cmd_mbox_status(query_out, &status, &syndrome);
+ 		if (!status || syndrome == MLX5_DRIVER_SYND) {
+ 			mlx5_core_err(dev, "Failed to query ISSI err(%d) status(%d) synd(%d)\n",
+ 				      err, status, syndrome);
+ 			return err;
+ 		}
+ 
+ 		mlx5_core_warn(dev, "Query ISSI is not supported by FW, ISSI is 0\n");
+ 		dev->issi = 0;
+ 		return 0;
++>>>>>>> f9c14e46748b (net/mlx5: Fix query ISSI flow)
  	}
  
  	sup_issi = MLX5_GET(query_issi_out, query_out, supported_issi_dw0);
@@@ -789,11 -751,11 +802,16 @@@
  
  		MLX5_SET(set_issi_in, set_in, opcode, MLX5_CMD_OP_SET_ISSI);
  		MLX5_SET(set_issi_in, set_in, current_issi, 1);
 -		err = mlx5_cmd_exec(dev, set_in, sizeof(set_in),
 -				    set_out, sizeof(set_out));
 +
 +		err = mlx5_cmd_exec_check_status(dev, set_in, sizeof(set_in),
 +						 set_out, sizeof(set_out));
  		if (err) {
++<<<<<<< HEAD
 +			pr_err("failed to set ISSI=1\n");
++=======
+ 			mlx5_core_err(dev, "Failed to set ISSI to 1 err(%d)\n",
+ 				      err);
++>>>>>>> f9c14e46748b (net/mlx5: Fix query ISSI flow)
  			return err;
  		}
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
index 1f3289b370d9,63b9a0dba885..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
@@@ -73,18 -75,10 +73,25 @@@ enum 
  	MLX5_CMD_TIME, /* print command execution time */
  };
  
++<<<<<<< HEAD
 +static inline int mlx5_cmd_exec_check_status(struct mlx5_core_dev *dev, u32 *in,
 +					     int in_size, u32 *out,
 +					     int out_size)
 +{
 +	int err;
 +
 +	err = mlx5_cmd_exec(dev, in, in_size, out, out_size);
 +	if (err)
 +		return err;
 +
 +	return mlx5_cmd_status_to_err((struct mlx5_outbox_hdr *)out);
 +}
++=======
+ enum {
+ 	MLX5_DRIVER_STATUS_ABORTED = 0xfe,
+ 	MLX5_DRIVER_SYND = 0xbadd00de,
+ };
++>>>>>>> f9c14e46748b (net/mlx5: Fix query ISSI flow)
  
  int mlx5_query_hca_caps(struct mlx5_core_dev *dev);
  int mlx5_query_board_id(struct mlx5_core_dev *dev);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
index a324920c5131..b5e3ad8c2345 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
@@ -269,11 +269,6 @@ static void dump_buf(void *buf, int size, int data_only, int offset)
 		pr_debug("\n");
 }
 
-enum {
-	MLX5_DRIVER_STATUS_ABORTED = 0xfe,
-	MLX5_DRIVER_SYND = 0xbadd00de,
-};
-
 static int mlx5_internal_err_ret_value(struct mlx5_core_dev *dev, u16 op,
 				       u32 *synd, u8 *status)
 {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
