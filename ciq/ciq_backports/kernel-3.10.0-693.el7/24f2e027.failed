x86, kaslr: boot-time selectable with hibernation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Kees Cook <keescook@chromium.org>
commit 24f2e0273f80ec262a772059e140a0adef35296d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/24f2e027.failed

Changes kASLR from being compile-time selectable (blocked by
CONFIG_HIBERNATION), to being boot-time selectable (with hibernation
available by default) via the "kaslr" kernel command line.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Acked-by: Pavel Machek <pavel@ucw.cz>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 24f2e0273f80ec262a772059e140a0adef35296d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/boot/compressed/aslr.c
#	kernel/power/hibernate.c
diff --cc arch/x86/Kconfig
index 5162fc083bed,a8f749ef0fdc..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1789,12 -1667,62 +1789,66 @@@ config RELOCATABL
  
  	  Note: If CONFIG_RELOCATABLE=y, then the kernel runs from the address
  	  it has been loaded at and the compile time physical address
 -	  (CONFIG_PHYSICAL_START) is used as the minimum location.
 +	  (CONFIG_PHYSICAL_START) is ignored.
  
++<<<<<<< HEAD
 +# Relocation on x86-32 needs some additional build support
++=======
+ config RANDOMIZE_BASE
+ 	bool "Randomize the address of the kernel image"
+ 	depends on RELOCATABLE
+ 	default n
+ 	---help---
+ 	   Randomizes the physical and virtual address at which the
+ 	   kernel image is decompressed, as a security feature that
+ 	   deters exploit attempts relying on knowledge of the location
+ 	   of kernel internals.
+ 
+ 	   Entropy is generated using the RDRAND instruction if it is
+ 	   supported. If RDTSC is supported, it is used as well. If
+ 	   neither RDRAND nor RDTSC are supported, then randomness is
+ 	   read from the i8254 timer.
+ 
+ 	   The kernel will be offset by up to RANDOMIZE_BASE_MAX_OFFSET,
+ 	   and aligned according to PHYSICAL_ALIGN. Since the kernel is
+ 	   built using 2GiB addressing, and PHYSICAL_ALGIN must be at a
+ 	   minimum of 2MiB, only 10 bits of entropy is theoretically
+ 	   possible. At best, due to page table layouts, 64-bit can use
+ 	   9 bits of entropy and 32-bit uses 8 bits.
+ 
+ 	   If unsure, say N.
+ 
+ config RANDOMIZE_BASE_MAX_OFFSET
+ 	hex "Maximum kASLR offset allowed" if EXPERT
+ 	depends on RANDOMIZE_BASE
+ 	range 0x0 0x20000000 if X86_32
+ 	default "0x20000000" if X86_32
+ 	range 0x0 0x40000000 if X86_64
+ 	default "0x40000000" if X86_64
+ 	---help---
+ 	  The lesser of RANDOMIZE_BASE_MAX_OFFSET and available physical
+ 	  memory is used to determine the maximal offset in bytes that will
+ 	  be applied to the kernel when kernel Address Space Layout
+ 	  Randomization (kASLR) is active. This must be a multiple of
+ 	  PHYSICAL_ALIGN.
+ 
+ 	  On 32-bit this is limited to 512MiB by page table layouts. The
+ 	  default is 512MiB.
+ 
+ 	  On 64-bit this is limited by how the kernel fixmap page table is
+ 	  positioned, so this cannot be larger than 1GiB currently. Without
+ 	  RANDOMIZE_BASE, there is a 512MiB to 1.5GiB split between kernel
+ 	  and modules. When RANDOMIZE_BASE_MAX_OFFSET is above 512MiB, the
+ 	  modules area will shrink to compensate, up to the current maximum
+ 	  1GiB to 1GiB split. The default is 1GiB.
+ 
+ 	  If unsure, leave at the default value.
+ 
+ # Relocation on x86 needs some additional build support
++>>>>>>> 24f2e0273f80 (x86, kaslr: boot-time selectable with hibernation)
  config X86_NEED_RELOCS
  	def_bool y
 -	depends on RANDOMIZE_BASE || (X86_32 && RELOCATABLE)
 +	depends on X86_32 && RELOCATABLE
  
  config PHYSICAL_ALIGN
  	hex "Alignment value to which kernel should be aligned"
diff --cc kernel/power/hibernate.c
index 2c7dfcb630a4,fcc2611d3f14..000000000000
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@@ -1128,3 -1164,5 +1133,8 @@@ __setup("resume=", resume_setup)
  __setup("hibernate=", hibernate_setup);
  __setup("resumewait", resumewait_setup);
  __setup("resumedelay=", resumedelay_setup);
++<<<<<<< HEAD
++=======
+ __setup("nohibernate", nohibernate_setup);
+ __setup("kaslr", kaslr_nohibernate_setup);
++>>>>>>> 24f2e0273f80 (x86, kaslr: boot-time selectable with hibernation)
* Unmerged path arch/x86/boot/compressed/aslr.c
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index ef522ccf479f..c68ca5d1baa0 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1397,6 +1397,13 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 	js=		[HW,JOY] Analog joystick
 			See Documentation/input/joystick.txt.
 
+	kaslr/nokaslr	[X86]
+			Enable/disable kernel and module base offset ASLR
+			(Address Space Layout Randomization) if built into
+			the kernel. When CONFIG_HIBERNATION is selected,
+			kASLR is disabled by default. When kASLR is enabled,
+			hibernation will be disabled.
+
 	keepinitrd	[HW,ARM]
 
 	kernelcore=	[KNL,X86,IA-64,PPC]
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/boot/compressed/aslr.c
* Unmerged path kernel/power/hibernate.c
