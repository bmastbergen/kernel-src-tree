sysfs, kernfs: introduce kernfs_setattr()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Tejun Heo <tj@kernel.org>
commit 5d60418e54751c856f5aecc308620fde9572e481
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5d60418e.failed

Introduce kernfs setattr interface - kernfs_setattr().

sysfs_sd_setattr() is renamed to __kernfs_setattr() and
kernfs_setattr() is a simple wrapper around it with sysfs_mutex
locking.  sysfs_chmod_file() is updated to get an explicit ref on
kobj->sd and then invoke kernfs_setattr() so that it doesn't have to
use internal interface.

This patch doesn't introduce any behavior differences.

v2: Dummy implementation for !CONFIG_SYSFS updated to return -ENOSYS.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 5d60418e54751c856f5aecc308620fde9572e481)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/file.c
#	fs/sysfs/inode.c
#	include/linux/kernfs.h
diff --cc fs/sysfs/file.c
index 602f56db0442,564abd201afb..000000000000
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@@ -628,19 -920,11 +628,23 @@@ int sysfs_chmod_file(struct kobject *ko
  {
  	struct sysfs_dirent *sd;
  	struct iattr newattrs;
 +	const void *ns;
  	int rc;
  
++<<<<<<< HEAD
 +	rc = sysfs_attr_ns(kobj, attr, &ns);
 +	if (rc)
 +		return rc;
 +
 +	mutex_lock(&sysfs_mutex);
 +
 +	rc = -ENOENT;
 +	sd = sysfs_find_dirent(kobj->sd, ns, attr->name);
++=======
+ 	sd = sysfs_get_dirent(kobj->sd, attr->name);
++>>>>>>> 5d60418e5475 (sysfs, kernfs: introduce kernfs_setattr())
  	if (!sd)
- 		goto out;
+ 		return -ENOENT;
  
  	newattrs.ia_mode = (mode & S_IALLUGO) | (sd->s_mode & ~S_IALLUGO);
  	newattrs.ia_valid = ATTR_MODE;
diff --cc fs/sysfs/inode.c
index 270a1324c133,5f7e2afb3457..000000000000
--- a/fs/sysfs/inode.c
+++ b/fs/sysfs/inode.c
@@@ -69,7 -67,7 +69,11 @@@ static struct sysfs_inode_attrs *sysfs_
  	return attrs;
  }
  
++<<<<<<< HEAD
 +int sysfs_sd_setattr(struct sysfs_dirent *sd, struct iattr * iattr)
++=======
+ static int __kernfs_setattr(struct sysfs_dirent *sd, const struct iattr *iattr)
++>>>>>>> 5d60418e5475 (sysfs, kernfs: introduce kernfs_setattr())
  {
  	struct sysfs_inode_attrs *sd_attrs;
  	struct iattr *iattrs;
diff --cc include/linux/kernfs.h
index 254b9e872b09,8cb673875715..000000000000
--- a/include/linux/kernfs.h
+++ b/include/linux/kernfs.h
@@@ -7,6 -7,54 +7,59 @@@
  #ifndef __LINUX_KERNFS_H
  #define __LINUX_KERNFS_H
  
++<<<<<<< HEAD
 +struct sysfs_dirent;
 +
++=======
+ #include <linux/kernel.h>
+ #include <linux/err.h>
+ 
+ struct file;
+ struct iattr;
+ 
+ struct sysfs_dirent;
+ 
+ #ifdef CONFIG_SYSFS
+ 
+ struct sysfs_dirent *kernfs_create_link(struct sysfs_dirent *parent,
+ 					const char *name,
+ 					struct sysfs_dirent *target);
+ void kernfs_remove(struct sysfs_dirent *sd);
+ int kernfs_remove_by_name_ns(struct sysfs_dirent *parent, const char *name,
+ 			     const void *ns);
+ int kernfs_rename_ns(struct sysfs_dirent *sd, struct sysfs_dirent *new_parent,
+ 		     const char *new_name, const void *new_ns);
+ int kernfs_setattr(struct sysfs_dirent *sd, const struct iattr *iattr);
+ 
+ #else	/* CONFIG_SYSFS */
+ 
+ static inline struct sysfs_dirent *
+ kernfs_create_link(struct sysfs_dirent *parent, const char *name,
+ 		   struct sysfs_dirent *target)
+ { return ERR_PTR(-ENOSYS); }
+ 
+ static inline void kernfs_remove(struct sysfs_dirent *sd) { }
+ 
+ static inline int kernfs_remove_by_name_ns(struct sysfs_dirent *parent,
+ 					   const char *name, const void *ns)
+ { return -ENOSYS; }
+ 
+ static inline int kernfs_rename_ns(struct sysfs_dirent *sd,
+ 				   struct sysfs_dirent *new_parent,
+ 				   const char *new_name, const void *new_ns)
+ { return -ENOSYS; }
+ 
+ static inline int kernfs_setattr(struct sysfs_dirent *sd,
+ 				 const struct iattr *iattr)
+ { return -ENOSYS; }
+ 
+ #endif	/* CONFIG_SYSFS */
+ 
+ static inline int kernfs_remove_by_name(struct sysfs_dirent *parent,
+ 					const char *name)
+ {
+ 	return kernfs_remove_by_name_ns(parent, name, NULL);
+ }
+ 
++>>>>>>> 5d60418e5475 (sysfs, kernfs: introduce kernfs_setattr())
  #endif	/* __LINUX_KERNFS_H */
* Unmerged path fs/sysfs/file.c
* Unmerged path fs/sysfs/inode.c
diff --git a/fs/sysfs/sysfs.h b/fs/sysfs/sysfs.h
index d1e4043eb0c3..3d1575571aa9 100644
--- a/fs/sysfs/sysfs.h
+++ b/fs/sysfs/sysfs.h
@@ -211,7 +211,6 @@ static inline void __sysfs_put(struct sysfs_dirent *sd)
  */
 struct inode *sysfs_get_inode(struct super_block *sb, struct sysfs_dirent *sd);
 void sysfs_evict_inode(struct inode *inode);
-int sysfs_sd_setattr(struct sysfs_dirent *sd, struct iattr *iattr);
 int sysfs_permission(struct inode *inode, int mask);
 int sysfs_setattr(struct dentry *dentry, struct iattr *iattr);
 int sysfs_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat);
* Unmerged path include/linux/kernfs.h
