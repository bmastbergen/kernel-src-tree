HID: wacom - return ENODEV for failed wacom_setup_pad_input_capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [hid] wacom - return ENODEV for failed wacom_setup_pad_input_capabilities (Aristeu Rozanski) [1346348 1388646 1385026]
Rebuild_FUZZ: 96.40%
commit-author Ping Cheng <pinglinux@gmail.com>
commit b3c8e93f99a7f9453be54549ae362b603c42188c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/b3c8e93f.failed

ENODEV indicates no device is added. Hence, the associated pad input device
is simply freed.

	Signed-off-by: Ping Cheng <pingc@wacom.com>
	Reviewed-by:  Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit b3c8e93f99a7f9453be54549ae362b603c42188c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index 01ec753fea53,63821c0e8207..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -1700,20 -2137,11 +1700,26 @@@ int wacom_setup_input_capabilities(stru
  	case INTUOS5L:
  	case INTUOSPM:
  	case INTUOSPL:
 +		if (features->device_type == BTN_TOOL_PEN) {
 +			__set_bit(BTN_7, input_dev->keybit);
 +			__set_bit(BTN_8, input_dev->keybit);
 +		}
 +		/* fall through */
 +
  	case INTUOS5S:
  	case INTUOSPS:
++<<<<<<< HEAD
  		__set_bit(INPUT_PROP_POINTER, input_dev->propbit);
++=======
++		/* touch interface does not have the pad device */
++		if (features->device_type != BTN_TOOL_PEN)
++			return -ENODEV;
++>>>>>>> b3c8e93f99a7 (HID: wacom - return ENODEV for failed wacom_setup_pad_input_capabilities)
  
  		if (features->device_type == BTN_TOOL_PEN) {
 +			for (i = 0; i < 7; i++)
 +				__set_bit(BTN_0 + i, input_dev->keybit);
 +
  			input_set_abs_params(input_dev, ABS_DISTANCE, 0,
  					      features->distance_max,
  					      0, 0);
@@@ -1759,16 -2181,11 +1765,24 @@@
  
  	case MTSCREEN:
  	case MTTPC:
 -	case MTTPC_B:
  	case TABLETPC2FG:
 -		if (features->device_type == BTN_TOOL_FINGER && features->touch_max > 1)
 -			input_mt_init_slots(input_dev, features->touch_max, INPUT_MT_DIRECT);
 +		if (features->device_type == BTN_TOOL_FINGER) {
 +			unsigned int flags = INPUT_MT_DIRECT;
 +
 +			if (wacom_wac->features.type == TABLETPC2FG)
 +				flags = 0;
 +
++<<<<<<< HEAD
 +			input_mt_init_slots(input_dev, features->touch_max, flags);
 +		}
  		/* fall through */
++=======
++	case INTUOSHT:
++	case BAMBOO_PT:
++		/* pad device is on the touch interface */
++		if (features->device_type != BTN_TOOL_FINGER)
++			return -ENODEV;
++>>>>>>> b3c8e93f99a7 (HID: wacom - return ENODEV for failed wacom_setup_pad_input_capabilities)
  
  	case TABLETPC:
  	case TABLETPCE:
@@@ -1791,6 -2209,6 +1805,7 @@@
  		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
  		break;
  
++<<<<<<< HEAD
  	case PTU:
  		__set_bit(BTN_STYLUS2, input_dev->keybit);
  		/* fall through */
@@@ -1839,6 -2261,209 +1854,11 @@@
  					      0, 0);
  		}
  		break;
 -
 -	case CINTIQ_HYBRID:
 -		input_set_abs_params(input_dev, ABS_Z, -900, 899, 0, 0);
 -		__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 -
 -		wacom_setup_cintiq(wacom_wac);
 -		break;
 -	}
 -	return 0;
 -}
 -
 -int wacom_setup_pad_input_capabilities(struct input_dev *input_dev,
 -				   struct wacom_wac *wacom_wac)
 -{
 -	struct wacom_features *features = &wacom_wac->features;
 -	int i;
 -
 -	input_dev->evbit[0] |= BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
 -
 -	/* kept for making legacy xf86-input-wacom working with the wheels */
 -	__set_bit(ABS_MISC, input_dev->absbit);
 -
 -	/* kept for making legacy xf86-input-wacom accepting the pad */
 -	input_set_abs_params(input_dev, ABS_X, 0, 1, 0, 0);
 -	input_set_abs_params(input_dev, ABS_Y, 0, 1, 0, 0);
 -
 -	/* kept for making udev and libwacom accepting the pad */
 -	__set_bit(BTN_STYLUS, input_dev->keybit);
 -
 -	switch (features->type) {
 -	case GRAPHIRE_BT:
 -		__set_bit(BTN_0, input_dev->keybit);
 -		__set_bit(BTN_1, input_dev->keybit);
 -		break;
 -
 -	case WACOM_MO:
 -		__set_bit(BTN_BACK, input_dev->keybit);
 -		__set_bit(BTN_LEFT, input_dev->keybit);
 -		__set_bit(BTN_FORWARD, input_dev->keybit);
 -		__set_bit(BTN_RIGHT, input_dev->keybit);
 -		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
 -		break;
 -
 -	case WACOM_G4:
 -		__set_bit(BTN_BACK, input_dev->keybit);
 -		__set_bit(BTN_LEFT, input_dev->keybit);
 -		__set_bit(BTN_FORWARD, input_dev->keybit);
 -		__set_bit(BTN_RIGHT, input_dev->keybit);
 -		input_set_capability(input_dev, EV_REL, REL_WHEEL);
 -		break;
 -
 -	case WACOM_24HD:
 -		__set_bit(BTN_A, input_dev->keybit);
 -		__set_bit(BTN_B, input_dev->keybit);
 -		__set_bit(BTN_C, input_dev->keybit);
 -		__set_bit(BTN_X, input_dev->keybit);
 -		__set_bit(BTN_Y, input_dev->keybit);
 -		__set_bit(BTN_Z, input_dev->keybit);
 -
 -		for (i = 0; i < 10; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		__set_bit(KEY_PROG1, input_dev->keybit);
 -		__set_bit(KEY_PROG2, input_dev->keybit);
 -		__set_bit(KEY_PROG3, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
 -		input_set_abs_params(input_dev, ABS_THROTTLE, 0, 71, 0, 0);
 -		break;
 -
 -	case DTK:
 -		for (i = 0; i < 6; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		break;
 -
 -	case WACOM_22HD:
 -		__set_bit(KEY_PROG1, input_dev->keybit);
 -		__set_bit(KEY_PROG2, input_dev->keybit);
 -		__set_bit(KEY_PROG3, input_dev->keybit);
 -		/* fall through */
 -
 -	case WACOM_21UX2:
 -		__set_bit(BTN_A, input_dev->keybit);
 -		__set_bit(BTN_B, input_dev->keybit);
 -		__set_bit(BTN_C, input_dev->keybit);
 -		__set_bit(BTN_X, input_dev->keybit);
 -		__set_bit(BTN_Y, input_dev->keybit);
 -		__set_bit(BTN_Z, input_dev->keybit);
 -		__set_bit(BTN_BASE, input_dev->keybit);
 -		__set_bit(BTN_BASE2, input_dev->keybit);
 -		/* fall through */
 -
 -	case WACOM_BEE:
 -		__set_bit(BTN_8, input_dev->keybit);
 -		__set_bit(BTN_9, input_dev->keybit);
 -		/* fall through */
 -
 -	case CINTIQ:
 -		for (i = 0; i < 8; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_RX, 0, 4096, 0, 0);
 -		input_set_abs_params(input_dev, ABS_RY, 0, 4096, 0, 0);
 -		break;
 -
 -	case WACOM_13HD:
 -		for (i = 0; i < 9; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
 -		break;
 -
 -	case INTUOS3:
 -	case INTUOS3L:
 -		__set_bit(BTN_4, input_dev->keybit);
 -		__set_bit(BTN_5, input_dev->keybit);
 -		__set_bit(BTN_6, input_dev->keybit);
 -		__set_bit(BTN_7, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_RY, 0, 4096, 0, 0);
 -		/* fall through */
 -
 -	case INTUOS3S:
 -		__set_bit(BTN_0, input_dev->keybit);
 -		__set_bit(BTN_1, input_dev->keybit);
 -		__set_bit(BTN_2, input_dev->keybit);
 -		__set_bit(BTN_3, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_RX, 0, 4096, 0, 0);
 -		break;
 -
 -	case INTUOS5:
 -	case INTUOS5L:
 -	case INTUOSPM:
 -	case INTUOSPL:
 -		__set_bit(BTN_7, input_dev->keybit);
 -		__set_bit(BTN_8, input_dev->keybit);
 -		/* fall through */
 -
 -	case INTUOS5S:
 -	case INTUOSPS:
 -		/* touch interface does not have the pad device */
 -		if (features->device_type != BTN_TOOL_PEN)
 -			return -ENODEV;
 -
 -		for (i = 0; i < 7; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
 -		break;
 -
 -	case INTUOS4WL:
 -		/*
 -		 * For Bluetooth devices, the udev rule does not work correctly
 -		 * for pads unless we add a stylus capability, which forces
 -		 * ID_INPUT_TABLET to be set.
 -		 */
 -		__set_bit(BTN_STYLUS, input_dev->keybit);
 -		/* fall through */
 -
 -	case INTUOS4:
 -	case INTUOS4L:
 -		__set_bit(BTN_7, input_dev->keybit);
 -		__set_bit(BTN_8, input_dev->keybit);
 -		/* fall through */
 -
 -	case INTUOS4S:
 -		for (i = 0; i < 7; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		input_set_abs_params(input_dev, ABS_WHEEL, 0, 71, 0, 0);
 -		break;
 -
 -	case CINTIQ_HYBRID:
 -		for (i = 0; i < 9; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -
 -		break;
 -
 -	case DTUS:
 -		for (i = 0; i < 4; i++)
 -			__set_bit(BTN_0 + i, input_dev->keybit);
 -		break;
 -
 -	case INTUOSHT:
 -	case BAMBOO_PT:
 -		/* pad device is on the touch interface */
 -		if (features->device_type != BTN_TOOL_FINGER)
 -			return -ENODEV;
 -
 -		__clear_bit(ABS_MISC, input_dev->absbit);
 -
 -		__set_bit(BTN_LEFT, input_dev->keybit);
 -		__set_bit(BTN_FORWARD, input_dev->keybit);
 -		__set_bit(BTN_BACK, input_dev->keybit);
 -		__set_bit(BTN_RIGHT, input_dev->keybit);
 -
 -		break;
 -
++=======
+ 	default:
+ 		/* no pad supported */
+ 		return -ENODEV;
++>>>>>>> b3c8e93f99a7 (HID: wacom - return ENODEV for failed wacom_setup_pad_input_capabilities)
  	}
  	return 0;
  }
* Unmerged path drivers/hid/wacom_wac.c
