fm10k: use common flow for suspend and resume

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 7756c08b871ac637562bebfbe896a57e804b59bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7756c08b.failed

Continuing the effort to commonize the similar suspend/resume flows,
finish up by using the new fm10k_handle_suspand and fm10k_handle_resume
functions for the standard suspend/resume flow.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Krishneil Singh <Krishneil.k.singh@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 7756c08b871ac637562bebfbe896a57e804b59bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/fm10k/fm10k_pci.c
diff --cc drivers/net/ethernet/intel/fm10k/fm10k_pci.c
index 02075e9a7886,b02361c42705..000000000000
--- a/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
@@@ -2300,51 -2186,9 +2300,52 @@@ static int fm10k_resume(struct pci_dev 
  	/* refresh hw_addr in case it was dropped */
  	hw->hw_addr = interface->uc_addr;
  
- 	/* reset hardware to known state */
- 	err = hw->mac.ops.init_hw(&interface->hw);
- 	if (err) {
- 		dev_err(&pdev->dev, "init_hw failed: %d\n", err);
+ 	err = fm10k_handle_resume(interface);
+ 	if (err)
  		return err;
++<<<<<<< HEAD
 +	}
 +
 +	/* reset statistics starting values */
 +	hw->mac.ops.rebind_hw_stats(hw, &interface->stats);
 +
 +	/* reset clock */
 +	fm10k_ts_reset(interface);
 +
 +	rtnl_lock();
 +
 +	err = fm10k_init_queueing_scheme(interface);
 +	if (err)
 +		goto err_queueing_scheme;
 +
 +	err = fm10k_mbx_request_irq(interface);
 +	if (err)
 +		goto err_mbx_irq;
 +
 +	err = fm10k_hw_ready(interface);
 +	if (err)
 +		goto err_open;
 +
 +	err = netif_running(netdev) ? fm10k_open(netdev) : 0;
 +	if (err)
 +		goto err_open;
 +
 +	rtnl_unlock();
 +
 +	/* assume host is not ready, to prevent race with watchdog in case we
 +	 * actually don't have connection to the switch
 +	 */
 +	interface->host_ready = false;
 +	fm10k_watchdog_host_not_ready(interface);
 +
 +	/* clear the service task disable bit to allow service task to start */
 +	clear_bit(__FM10K_SERVICE_DISABLE, &interface->state);
 +	fm10k_service_event_schedule(interface);
 +
 +	/* restore SR-IOV interface */
 +	fm10k_iov_resume(pdev);
++=======
++>>>>>>> 7756c08b871a (fm10k: use common flow for suspend and resume)
  
  	netif_device_attach(netdev);
  
* Unmerged path drivers/net/ethernet/intel/fm10k/fm10k_pci.c
