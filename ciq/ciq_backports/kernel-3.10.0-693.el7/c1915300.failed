igb: use new API ethtool_{get|set}_link_ksettings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] bna: use new api ethtool_{get|set}_link_ksettings (Jonathan Toppins) [1386007]
Rebuild_FUZZ: 95.92%
commit-author Philippe Reynes <tremyfr@gmail.com>
commit c19153008ba0f7b86234820e8a87d58806707a15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/c1915300.failed

The ethtool API {get|set}_settings is deprecated.
We move this driver to new API {get|set}_link_ksettings.

As I don't have the hardware, I'd be very pleased if
someone may test this patch.

	Signed-off-by: Philippe Reynes <tremyfr@gmail.com>
	Tested-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit c19153008ba0f7b86234820e8a87d58806707a15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igb/igb_ethtool.c
diff --cc drivers/net/ethernet/intel/igb/igb_ethtool.c
index 737b664d004c,0efb62db6efd..000000000000
--- a/drivers/net/ethernet/intel/igb/igb_ethtool.c
+++ b/drivers/net/ethernet/intel/igb/igb_ethtool.c
@@@ -144,7 -144,15 +144,19 @@@ static const char igb_gstrings_test[][E
  };
  #define IGB_TEST_LEN (sizeof(igb_gstrings_test) / ETH_GSTRING_LEN)
  
++<<<<<<< HEAD
 +static int igb_get_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
++=======
+ static const char igb_priv_flags_strings[][ETH_GSTRING_LEN] = {
+ #define IGB_PRIV_FLAGS_LEGACY_RX	BIT(0)
+ 	"legacy-rx",
+ };
+ 
+ #define IGB_PRIV_FLAGS_STR_LEN ARRAY_SIZE(igb_priv_flags_strings)
+ 
+ static int igb_get_link_ksettings(struct net_device *netdev,
+ 				  struct ethtool_link_ksettings *cmd)
++>>>>>>> c19153008ba0 (igb: use new API ethtool_{get|set}_link_ksettings)
  {
  	struct igb_adapter *adapter = netdev_priv(netdev);
  	struct e1000_hw *hw = &adapter->hw;
@@@ -3388,9 -3420,38 +3407,7 @@@ static int igb_set_channels(struct net_
  	return 0;
  }
  
 -static u32 igb_get_priv_flags(struct net_device *netdev)
 -{
 -	struct igb_adapter *adapter = netdev_priv(netdev);
 -	u32 priv_flags = 0;
 -
 -	if (adapter->flags & IGB_FLAG_RX_LEGACY)
 -		priv_flags |= IGB_PRIV_FLAGS_LEGACY_RX;
 -
 -	return priv_flags;
 -}
 -
 -static int igb_set_priv_flags(struct net_device *netdev, u32 priv_flags)
 -{
 -	struct igb_adapter *adapter = netdev_priv(netdev);
 -	unsigned int flags = adapter->flags;
 -
 -	flags &= ~IGB_FLAG_RX_LEGACY;
 -	if (priv_flags & IGB_PRIV_FLAGS_LEGACY_RX)
 -		flags |= IGB_FLAG_RX_LEGACY;
 -
 -	if (flags != adapter->flags) {
 -		adapter->flags = flags;
 -
 -		/* reset interface to repopulate queues */
 -		if (netif_running(netdev))
 -			igb_reinit_locked(adapter);
 -	}
 -
 -	return 0;
 -}
 -
  static const struct ethtool_ops igb_ethtool_ops = {
- 	.get_settings		= igb_get_settings,
- 	.set_settings		= igb_set_settings,
  	.get_drvinfo		= igb_get_drvinfo,
  	.get_regs_len		= igb_get_regs_len,
  	.get_regs		= igb_get_regs,
@@@ -3426,8 -3487,12 +3443,10 @@@
  	.set_rxfh		= igb_set_rxfh,
  	.get_channels		= igb_get_channels,
  	.set_channels		= igb_set_channels,
 -	.get_priv_flags		= igb_get_priv_flags,
 -	.set_priv_flags		= igb_set_priv_flags,
  	.begin			= igb_ethtool_begin,
  	.complete		= igb_ethtool_complete,
+ 	.get_link_ksettings	= igb_get_link_ksettings,
+ 	.set_link_ksettings	= igb_set_link_ksettings,
  };
  
  void igb_set_ethtool_ops(struct net_device *netdev)
* Unmerged path drivers/net/ethernet/intel/igb/igb_ethtool.c
