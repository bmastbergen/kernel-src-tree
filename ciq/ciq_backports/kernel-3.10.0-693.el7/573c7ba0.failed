net: introduce pre-change upper device notifier

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [net] introduce pre-change upper device notifier (Ivan Vecera) [1275772 1297841 1331748]
Rebuild_FUZZ: 94.38%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 573c7ba006edbecff0714db651dd3602b9d0a6a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/573c7ba0.failed

This newly introduced netdevice notifier is called before actual change
upper happens. That provides a possibility for notifier handlers to
know upper change will happen and react to it, including possibility to
forbid the change. That is valuable for drivers which can check if the
upper device linkage is supported and forbid that in case it is not.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 573c7ba006edbecff0714db651dd3602b9d0a6a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index b6150f910ad9,69fdd427c8cb..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2207,12 -2106,8 +2207,16 @@@ struct pcpu_sw_netstats 
  #define NETDEV_PRECHANGEMTU	0x0017 /* notify before mtu change happened */
  #define NETDEV_CHANGEINFODATA	0x0018
  #define NETDEV_BONDING_INFO	0x0019
++<<<<<<< HEAD
 +#define NETDEV_OFFLOAD_PUSH_VXLAN	0x001C
 +#define NETDEV_OFFLOAD_PUSH_GENEVE	0x001D
++=======
+ #define NETDEV_PRECHANGEUPPER	0x001A
++>>>>>>> 573c7ba006ed (net: introduce pre-change upper device notifier)
  
 +/* (Un)registration functions for the notifiers that takes
 + * 'struct net_device *' as parameter
 + */
  int register_netdevice_notifier(struct notifier_block *nb);
  int unregister_netdevice_notifier(struct notifier_block *nb);
  
* Unmerged path include/linux/netdevice.h
diff --git a/net/core/dev.c b/net/core/dev.c
index e2ceb23207bd..4bd290b11e30 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -5375,6 +5375,12 @@ static int __netdev_upper_dev_link(struct net_device *dev,
 	changeupper_info.master = master;
 	changeupper_info.linking = true;
 
+	ret = call_netdevice_notifiers_info(NETDEV_PRECHANGEUPPER, dev,
+					    &changeupper_info.info);
+	ret = notifier_to_errno(ret);
+	if (ret)
+		return ret;
+
 	ret = __netdev_adjacent_dev_link_neighbour(dev, upper_dev, private,
 						   master);
 	if (ret)
@@ -5521,6 +5527,9 @@ void netdev_upper_dev_unlink(struct net_device *dev,
 	changeupper_info.master = netdev_master_upper_dev_get(dev) == upper_dev;
 	changeupper_info.linking = false;
 
+	call_netdevice_notifiers_info(NETDEV_PRECHANGEUPPER, dev,
+				      &changeupper_info.info);
+
 	__netdev_adjacent_dev_unlink_neighbour(dev, upper_dev);
 
 	/* Here is the tricky part. We must remove all dev's lower
