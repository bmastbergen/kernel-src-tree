perf tests: Add is_printable_array test

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 988dd774dcbd9151c2a643fc7284c5c3c4d0adb7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/988dd774.failed

Add automated test for is_printable_array function.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Pirko <jiri@mellanox.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Steven Rostedt <rostedt@goodmis.org>
Link: http://lkml.kernel.org/r/1468685480-18951-4-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 988dd774dcbd9151c2a643fc7284c5c3c4d0adb7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/Build
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/tests.h
diff --cc tools/perf/tests/Build
index 49981027b770,cb20ae1c0d35..000000000000
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@@ -37,6 -39,36 +37,39 @@@ perf-y += stat.
  perf-y += event_update.o
  perf-y += event-times.o
  perf-y += backward-ring-buffer.o
++<<<<<<< HEAD
++=======
+ perf-y += sdt.o
+ perf-y += is_printable_array.o
+ 
+ $(OUTPUT)tests/llvm-src-base.c: tests/bpf-script-example.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_base_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-kbuild.c: tests/bpf-script-test-kbuild.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_kbuild_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-prologue.c: tests/bpf-script-test-prologue.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_prologue_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-relocation.c: tests/bpf-script-test-relocation.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_relocation[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
++>>>>>>> 988dd774dcbd (perf tests: Add is_printable_array test)
  
  ifeq ($(ARCH),$(filter $(ARCH),x86 arm arm64))
  perf-$(CONFIG_DWARF_UNWIND) += dwarf-unwind.o
diff --cc tools/perf/tests/builtin-test.c
index da4eec430844,10eb30686c9c..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -200,6 -218,14 +200,17 @@@ static struct test generic_tests[] = 
  		.func = test__cpu_map_print,
  	},
  	{
++<<<<<<< HEAD
++=======
+ 		.desc = "Test SDT event probing",
+ 		.func = test__sdt_event,
+ 	},
+ 	{
+ 		.desc = "Test is_printable_array function",
+ 		.func = test__is_printable_array,
+ 	},
+ 	{
++>>>>>>> 988dd774dcbd (perf tests: Add is_printable_array test)
  		.func = NULL,
  	},
  };
diff --cc tools/perf/tests/tests.h
index cda0d2d339ef,9bfc0e06c61a..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -75,6 -88,8 +75,11 @@@ int test__event_update(int subtest)
  int test__event_times(int subtest);
  int test__backward_ring_buffer(int subtest);
  int test__cpu_map_print(int subtest);
++<<<<<<< HEAD
++=======
+ int test__sdt_event(int subtest);
+ int test__is_printable_array(int subtest);
++>>>>>>> 988dd774dcbd (perf tests: Add is_printable_array test)
  
  #if defined(__arm__) || defined(__aarch64__)
  #ifdef HAVE_DWARF_UNWIND_SUPPORT
* Unmerged path tools/perf/tests/Build
* Unmerged path tools/perf/tests/builtin-test.c
diff --git a/tools/perf/tests/is_printable_array.c b/tools/perf/tests/is_printable_array.c
new file mode 100644
index 000000000000..42e13393e502
--- /dev/null
+++ b/tools/perf/tests/is_printable_array.c
@@ -0,0 +1,36 @@
+#include <linux/compiler.h>
+#include "tests.h"
+#include "debug.h"
+#include "util.h"
+
+int test__is_printable_array(int subtest __maybe_unused)
+{
+	char buf1[] = { 'k', 'r', 4, 'v', 'a', 0 };
+	char buf2[] = { 'k', 'r', 'a', 'v', 4, 0 };
+	struct {
+		char		*buf;
+		unsigned int	 len;
+		int		 ret;
+	} t[] = {
+		{ (char *) "krava",	sizeof("krava"),	1 },
+		{ (char *) "krava",	sizeof("krava") - 1,	0 },
+		{ (char *) "",		sizeof(""),		1 },
+		{ (char *) "",		0,			0 },
+		{ NULL,			0,			0 },
+		{ buf1,			sizeof(buf1),		0 },
+		{ buf2,			sizeof(buf2),		0 },
+	};
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(t); i++) {
+		int ret;
+
+		ret = is_printable_array((char *) t[i].buf, t[i].len);
+		if (ret != t[i].ret) {
+			pr_err("failed: test %u\n", i);
+			return TEST_FAIL;
+		}
+	}
+
+	return TEST_OK;
+}
* Unmerged path tools/perf/tests/tests.h
