s390/pci: add some new arch specific pci attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [s390] pci: add some new arch specific pci attributes (Hendrik Brueckner) [1380776]
Rebuild_FUZZ: 94.85%
commit-author Sebastian Ott <sebott@linux.vnet.ibm.com>
commit ac4995b9d5705f10a69ea74d440e3943db41f2ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/ac4995b9.failed

Add a bunch of s390 specific pci attributes to help
identifying pci functions.

	Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit ac4995b9d5705f10a69ea74d440e3943db41f2ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/pci/pci_sysfs.c
diff --cc arch/s390/pci/pci_sysfs.c
index 9c2d96ab3de1,9190214b8702..000000000000
--- a/arch/s390/pci/pci_sysfs.c
+++ b/arch/s390/pci/pci_sysfs.c
@@@ -12,43 -12,30 +12,57 @@@
  #include <linux/stat.h>
  #include <linux/pci.h>
  
 -#define zpci_attr(name, fmt, member)					\
 -static ssize_t name##_show(struct device *dev,				\
 -			   struct device_attribute *attr, char *buf)	\
 -{									\
 -	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));		\
 -									\
 -	return sprintf(buf, fmt, zdev->member);				\
 -}									\
 -static DEVICE_ATTR_RO(name)
 +static ssize_t show_fid(struct device *dev, struct device_attribute *attr,
 +			char *buf)
 +{
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
  
++<<<<<<< HEAD
 +	return sprintf(buf, "0x%08x\n", zdev->fid);
 +}
 +static DEVICE_ATTR(function_id, S_IRUGO, show_fid, NULL);
++=======
+ zpci_attr(function_id, "0x%08x\n", fid);
+ zpci_attr(function_handle, "0x%08x\n", fh);
+ zpci_attr(pchid, "0x%04x\n", pchid);
+ zpci_attr(pfgid, "0x%02x\n", pfgid);
+ zpci_attr(vfn, "0x%04x\n", vfn);
+ zpci_attr(pft, "0x%02x\n", pft);
+ zpci_attr(uid, "0x%x\n", uid);
+ zpci_attr(segment0, "0x%02x\n", pfip[0]);
+ zpci_attr(segment1, "0x%02x\n", pfip[1]);
+ zpci_attr(segment2, "0x%02x\n", pfip[2]);
+ zpci_attr(segment3, "0x%02x\n", pfip[3]);
++>>>>>>> ac4995b9d570 (s390/pci: add some new arch specific pci attributes)
  
 -static ssize_t recover_store(struct device *dev, struct device_attribute *attr,
 -			     const char *buf, size_t count)
 +static ssize_t show_fh(struct device *dev, struct device_attribute *attr,
 +		       char *buf)
 +{
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
 +
 +	return sprintf(buf, "0x%08x\n", zdev->fh);
 +}
 +static DEVICE_ATTR(function_handle, S_IRUGO, show_fh, NULL);
 +
 +static ssize_t show_pchid(struct device *dev, struct device_attribute *attr,
 +			  char *buf)
 +{
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
 +
 +	return sprintf(buf, "0x%04x\n", zdev->pchid);
 +}
 +static DEVICE_ATTR(pchid, S_IRUGO, show_pchid, NULL);
 +
 +static ssize_t show_pfgid(struct device *dev, struct device_attribute *attr,
 +			  char *buf)
 +{
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
 +
 +	return sprintf(buf, "0x%02x\n", zdev->pfgid);
 +}
 +static DEVICE_ATTR(pfgid, S_IRUGO, show_pfgid, NULL);
 +
 +static void recover_callback(struct device *dev)
  {
  	struct pci_dev *pdev = to_pci_dev(dev);
  	struct zpci_dev *zdev = get_zdev(pdev);
@@@ -62,21 -51,30 +76,38 @@@
  
  	ret = zpci_enable_device(zdev);
  	if (ret)
 -		return ret;
 +		goto error;
  
  	pci_rescan_bus(zdev->bus);
 -	return count;
 +error:
 +	pci_unlock_rescan_remove();
 +}
 +
 +static ssize_t store_recover(struct device *dev, struct device_attribute *attr,
 +			     const char *buf, size_t count)
 +{
 +	int rc = device_schedule_callback(dev, recover_callback);
 +	return rc ? rc : count;
  }
 -static DEVICE_ATTR_WO(recover);
 +static DEVICE_ATTR(recover, S_IWUSR, NULL, store_recover);
  
+ static ssize_t util_string_read(struct file *filp, struct kobject *kobj,
+ 				struct bin_attribute *attr, char *buf,
+ 				loff_t off, size_t count)
+ {
+ 	struct device *dev = kobj_to_dev(kobj);
+ 	struct pci_dev *pdev = to_pci_dev(dev);
+ 	struct zpci_dev *zdev = get_zdev(pdev);
+ 
+ 	return memory_read_from_buffer(buf, count, &off, zdev->util_str,
+ 				       sizeof(zdev->util_str));
+ }
+ static BIN_ATTR_RO(util_string, CLP_UTIL_STR_LEN);
+ static struct bin_attribute *zpci_bin_attrs[] = {
+ 	&bin_attr_util_string,
+ 	NULL,
+ };
+ 
  static struct attribute *zpci_dev_attrs[] = {
  	&dev_attr_function_id.attr,
  	&dev_attr_function_handle.attr,
diff --git a/arch/s390/include/asm/pci.h b/arch/s390/include/asm/pci.h
index 83fd0499b35b..f01dd5532b60 100644
--- a/arch/s390/include/asm/pci.h
+++ b/arch/s390/include/asm/pci.h
@@ -80,10 +80,16 @@ struct zpci_dev {
 	enum zpci_state state;
 	u32		fid;		/* function ID, used by sclp */
 	u32		fh;		/* function handle, used by insn's */
+	u16		vfn;		/* virtual function number */
 	u16		pchid;		/* physical channel ID */
 	u8		pfgid;		/* function group ID */
+	u8		pft;		/* pci function type */
 	u16		domain;
 
+	u8 pfip[CLP_PFIP_NR_SEGMENTS];	/* pci function internal path */
+	u32 uid;			/* user defined id */
+	u8 util_str[CLP_UTIL_STR_LEN];	/* utility string */
+
 	/* IRQ stuff */
 	u64		msi_addr;	/* MSI address */
 	struct zdev_irq_map *irq_map;
diff --git a/arch/s390/include/asm/pci_clp.h b/arch/s390/include/asm/pci_clp.h
index d31d739f8689..dd78f92f1cce 100644
--- a/arch/s390/include/asm/pci_clp.h
+++ b/arch/s390/include/asm/pci_clp.h
@@ -44,6 +44,7 @@ struct clp_fh_list_entry {
 #define CLP_SET_DISABLE_PCI_FN	1	/* Yes, 1 disables it */
 
 #define CLP_UTIL_STR_LEN	64
+#define CLP_PFIP_NR_SEGMENTS	4
 
 /* List PCI functions request */
 struct clp_req_list_pci {
@@ -85,7 +86,7 @@ struct clp_rsp_query_pci {
 	struct clp_rsp_hdr hdr;
 	u32 fmt			:  4;	/* cmd request block format */
 	u32			: 28;
-	u64 reserved1;
+	u64			: 64;
 	u16 vfn;			/* virtual fn number */
 	u16			:  7;
 	u16 util_str_avail	:  1;	/* utility string available? */
@@ -94,10 +95,13 @@ struct clp_rsp_query_pci {
 	u8 bar_size[PCI_BAR_COUNT];
 	u16 pchid;
 	u32 bar[PCI_BAR_COUNT];
-	u64 reserved2;
+	u8 pfip[CLP_PFIP_NR_SEGMENTS];	/* pci function internal path */
+	u32			: 24;
+	u8 pft;				/* pci function type */
 	u64 sdma;			/* start dma as */
 	u64 edma;			/* end dma as */
-	u64 reserved3[6];
+	u32 reserved[11];
+	u32 uid;			/* user defined id */
 	u8 util_str[CLP_UTIL_STR_LEN];	/* utility string */
 } __packed;
 
diff --git a/arch/s390/pci/pci_clp.c b/arch/s390/pci/pci_clp.c
index c747394029ee..96545d7659fd 100644
--- a/arch/s390/pci/pci_clp.c
+++ b/arch/s390/pci/pci_clp.c
@@ -114,6 +114,16 @@ static int clp_store_query_pci_fn(struct zpci_dev *zdev,
 	zdev->end_dma = response->edma;
 	zdev->pchid = response->pchid;
 	zdev->pfgid = response->pfgid;
+	zdev->pft = response->pft;
+	zdev->vfn = response->vfn;
+	zdev->uid = response->uid;
+
+	memcpy(zdev->pfip, response->pfip, sizeof(zdev->pfip));
+	if (response->util_str_avail) {
+		memcpy(zdev->util_str, response->util_str,
+		       sizeof(zdev->util_str));
+	}
+
 	return 0;
 }
 
* Unmerged path arch/s390/pci/pci_sysfs.c
