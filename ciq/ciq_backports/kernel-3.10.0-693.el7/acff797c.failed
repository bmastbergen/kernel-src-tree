net/mlx5e: Refactor mlx5e flow steering structs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Refactor mlx5e flow steering structs (Don Dutile) [1383273 1417284]
Rebuild_FUZZ: 95.56%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit acff797cd187402d73cf9f290531a41250613294
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/acff797c.failed

Slightly refactor and re-order the flow steering structs,
tables and data-bases for better self-containment and
flexibility to add more future steering phases
(tables/rules/data bases) e.g: aRFS.

Changes:
1. Move the vlan DB and address DB into their table structs.
2. Rename steering table structs to unique format: mlx5e_*_table,
e.g: mlx5e_vlan_table.

	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit acff797cd187402d73cf9f290531a41250613294)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,a4f17b974d62..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -30,33 -30,22 +30,37 @@@
   * SOFTWARE.
   */
  
 -#ifndef __MLX5_EN_TC_H__
 -#define __MLX5_EN_TC_H__
 -
 -#define MLX5E_TC_FLOW_ID_MASK 0x0000ffff
 -
 -int mlx5e_tc_init(struct mlx5e_priv *priv);
 -void mlx5e_tc_cleanup(struct mlx5e_priv *priv);
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
  
 -int mlx5e_configure_flower(struct mlx5e_priv *priv, __be16 protocol,
 -			   struct tc_cls_flower_offload *f);
 -int mlx5e_delete_flower(struct mlx5e_priv *priv,
 -			struct tc_cls_flower_offload *f);
 +#include "ipath_kernel.h"
  
 -static inline int mlx5e_tc_num_filters(struct mlx5e_priv *priv)
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
  {
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +	return 0;
++=======
+ 	return atomic_read(&priv->fs.tc.ht.nelems);
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs):drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
  }
  
 -#endif /* __MLX5_EN_TC_H__ */
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
 +}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index f49539a1ae6e,02b964402156..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -443,13 -425,15 +461,22 @@@ struct mlx5e_main_table 
  	bool                       promisc_enabled;
  };
  
++<<<<<<< HEAD
 +enum {
 +	MLX5E_STATE_ASYNC_EVENTS_ENABLED,
 +	MLX5E_STATE_OPENED,
 +	MLX5E_STATE_DESTROYING,
++=======
+ struct mlx5e_tc_table {
+ 	struct mlx5_flow_table		*t;
+ 
+ 	struct rhashtable_params        ht_params;
+ 	struct rhashtable               ht;
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  };
  
- struct mlx5e_vlan_db {
+ struct mlx5e_vlan_table {
+ 	struct mlx5e_flow_table		ft;
  	unsigned long active_vlans[BITS_TO_LONGS(VLAN_N_VID)];
  	struct mlx5_flow_rule	*active_vlans_rule[VLAN_N_VID];
  	struct mlx5_flow_rule	*untagged_rule;
@@@ -457,21 -441,11 +484,29 @@@
  	bool          filter_disabled;
  };
  
++<<<<<<< HEAD
 +struct mlx5e_vxlan_db {
 +	spinlock_t			lock; /* protect vxlan table */
 +	struct radix_tree_root		tree;
 +};
 +
 +struct mlx5e_flow_table {
 +	int num_groups;
 +	struct mlx5_flow_table		*t;
 +	struct mlx5_flow_group		**g;
 +};
 +
 +struct mlx5e_flow_tables {
 +	struct mlx5_flow_namespace	*ns;
 +	struct mlx5e_flow_table		vlan;
 +	struct mlx5e_flow_table		main;
++=======
+ struct mlx5e_flow_steering {
+ 	struct mlx5_flow_namespace      *ns;
+ 	struct mlx5e_tc_table           tc;
+ 	struct mlx5e_vlan_table         vlan;
+ 	struct mlx5e_main_table         main;
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  };
  
  struct mlx5e_direct_tir {
@@@ -500,15 -479,10 +540,19 @@@ struct mlx5e_priv 
  	u32                        indir_tirn[MLX5E_NUM_INDIR_TIRS];
  	struct mlx5e_direct_tir    direct_tir[MLX5E_MAX_NUM_CHANNELS];
  
++<<<<<<< HEAD
 +	struct mlx5e_flow_tables   fts;
 +	struct mlx5e_eth_addr_db   eth_addr;
 +	struct mlx5e_vlan_db       vlan;
 +#ifdef CONFIG_MLX5_CORE_EN_VXLAN
++=======
+ 	struct mlx5e_flow_steering fs;
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  	struct mlx5e_vxlan_db      vxlan;
 +#endif
  
  	struct mlx5e_params        params;
 +	struct workqueue_struct    *wq;
  	struct work_struct         update_carrier_work;
  	struct work_struct         set_rx_mode_work;
  	struct delayed_work        update_stats_work;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 4df49e660587,3ee35b094c82..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@@ -1041,7 -1046,8 +1041,12 @@@ static int mlx5e_create_main_table(stru
  	int err;
  
  	ft->num_groups = 0;
++<<<<<<< HEAD
 +	ft->t = mlx5_create_flow_table(priv->fts.ns, 1, MLX5E_MAIN_TABLE_SIZE);
++=======
+ 	ft->t = mlx5_create_flow_table(priv->fs.ns, MLX5E_NIC_PRIO,
+ 				       MLX5E_MAIN_TABLE_SIZE, MLX5E_MAIN_FT_LEVEL);
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  
  	if (IS_ERR(ft->t)) {
  		err = PTR_ERR(ft->t);
@@@ -1150,7 -1156,8 +1155,12 @@@ static int mlx5e_create_vlan_table(stru
  	int err;
  
  	ft->num_groups = 0;
++<<<<<<< HEAD
 +	ft->t = mlx5_create_flow_table(priv->fts.ns, 1, MLX5E_VLAN_TABLE_SIZE);
++=======
+ 	ft->t = mlx5_create_flow_table(priv->fs.ns, MLX5E_NIC_PRIO,
+ 				       MLX5E_VLAN_TABLE_SIZE, MLX5E_VLAN_FT_LEVEL);
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  
  	if (IS_ERR(ft->t)) {
  		err = PTR_ERR(ft->t);
@@@ -1167,12 -1174,17 +1177,16 @@@
  	if (err)
  		goto err_free_g;
  
 -	err = mlx5e_add_vlan_rule(priv, MLX5E_VLAN_RULE_TYPE_UNTAGGED, 0);
 -	if (err)
 -		goto err_destroy_vlan_flow_groups;
 -
  	return 0;
  
 -err_destroy_vlan_flow_groups:
 -	mlx5e_destroy_groups(ft);
  err_free_g:
  	kfree(ft->g);
++<<<<<<< HEAD
 +
 +err_destroy_vlan_flow_table:
++=======
+ err_destroy_vlan_table:
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  	mlx5_destroy_flow_table(ft->t);
  	ft->t = NULL;
  
@@@ -1188,37 -1200,31 +1202,55 @@@ int mlx5e_create_flow_steering(struct m
  {
  	int err;
  
- 	priv->fts.ns = mlx5_get_flow_namespace(priv->mdev,
+ 	priv->fs.ns = mlx5_get_flow_namespace(priv->mdev,
  					       MLX5_FLOW_NAMESPACE_KERNEL);
  
- 	if (!priv->fts.ns)
+ 	if (!priv->fs.ns)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	err = mlx5e_create_vlan_flow_table(priv);
 +	if (err)
 +		return err;
 +
 +	err = mlx5e_create_main_flow_table(priv);
 +	if (err)
 +		goto err_destroy_vlan_flow_table;
 +
 +	err = mlx5e_add_vlan_rule(priv, MLX5E_VLAN_RULE_TYPE_UNTAGGED, 0);
++=======
+ 	err = mlx5e_create_main_table(priv);
+ 	if (err)
+ 		return err;
+ 
+ 	err = mlx5e_create_vlan_table(priv);
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  	if (err)
- 		goto err_destroy_main_flow_table;
+ 		goto err_destroy_main_table;
  
  	return 0;
  
++<<<<<<< HEAD
 +err_destroy_main_flow_table:
 +	mlx5e_destroy_main_flow_table(priv);
 +err_destroy_vlan_flow_table:
 +	mlx5e_destroy_vlan_flow_table(priv);
++=======
+ err_destroy_main_table:
+ 	mlx5e_destroy_main_table(priv);
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  
  	return err;
  }
  
- void mlx5e_destroy_flow_tables(struct mlx5e_priv *priv)
+ void mlx5e_destroy_flow_steering(struct mlx5e_priv *priv)
  {
  	mlx5e_del_vlan_rule(priv, MLX5E_VLAN_RULE_TYPE_UNTAGGED, 0);
++<<<<<<< HEAD
 +	mlx5e_destroy_main_flow_table(priv);
 +	mlx5e_destroy_vlan_flow_table(priv);
++=======
+ 	mlx5e_destroy_vlan_table(priv);
+ 	mlx5e_destroy_main_table(priv);
++>>>>>>> acff797cd187 (net/mlx5e: Refactor mlx5e flow steering structs)
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index ae009c7fda21..d660e38fca48 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -3102,9 +3102,9 @@ static void *mlx5e_create_netdev(struct mlx5_core_dev *mdev)
 		goto err_destroy_rqts;
 	}
 
-	err = mlx5e_create_flow_tables(priv);
+	err = mlx5e_create_flow_steering(priv);
 	if (err) {
-		mlx5_core_warn(mdev, "create flow tables failed, %d\n", err);
+		mlx5_core_warn(mdev, "create flow steering failed, %d\n", err);
 		goto err_destroy_tirs;
 	}
 
@@ -3140,7 +3140,7 @@ static void *mlx5e_create_netdev(struct mlx5_core_dev *mdev)
 
 err_dealloc_q_counters:
 	mlx5e_destroy_q_counter(priv);
-	mlx5e_destroy_flow_tables(priv);
+	mlx5e_destroy_flow_steering(priv);
 
 err_destroy_tirs:
 	mlx5e_destroy_tirs(priv);
@@ -3197,7 +3197,7 @@ static void mlx5e_destroy_netdev(struct mlx5_core_dev *mdev, void *vpriv)
 
 	mlx5e_vxlan_cleanup(priv);
 	mlx5e_destroy_q_counter(priv);
-	mlx5e_destroy_flow_tables(priv);
+	mlx5e_destroy_flow_steering(priv);
 	mlx5e_destroy_tirs(priv);
 	mlx5e_destroy_rqts(priv);
 	mlx5e_close_drop_rq(priv);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
