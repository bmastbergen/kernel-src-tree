md/raid5: change printk() to pr_*()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [md] raid5: change printk() to pr_*() (Jes Sorensen) [1380016]
Rebuild_FUZZ: 95.52%
commit-author NeilBrown <neilb@suse.com>
commit cc6167b4f3b3caabe973ca12612ac7d60aae0cfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/cc6167b4.failed

	Signed-off-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit cc6167b4f3b3caabe973ca12612ac7d60aae0cfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid5.c
diff --cc drivers/md/raid5.c
index e4353594a601,df88656d8798..000000000000
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@@ -2533,15 -2522,14 +2524,26 @@@ static void raid5_error(struct mddev *m
  
  	set_bit(Blocked, &rdev->flags);
  	set_bit(Faulty, &rdev->flags);
++<<<<<<< HEAD
 +	set_bit(MD_CHANGE_DEVS, &mddev->flags);
 +	set_bit(MD_CHANGE_PENDING, &mddev->flags);
 +	printk(KERN_ALERT
 +	       "md/raid:%s: Disk failure on %s, disabling device.\n"
 +	       "md/raid:%s: Operation continuing on %d devices.\n",
 +	       mdname(mddev),
 +	       bdevname(rdev->bdev, b),
 +	       mdname(mddev),
 +	       conf->raid_disks - mddev->degraded);
++=======
+ 	set_mask_bits(&mddev->flags, 0,
+ 		      BIT(MD_CHANGE_DEVS) | BIT(MD_CHANGE_PENDING));
+ 	pr_crit("md/raid:%s: Disk failure on %s, disabling device.\n"
+ 		"md/raid:%s: Operation continuing on %d devices.\n",
+ 		mdname(mddev),
+ 		bdevname(rdev->bdev, b),
+ 		mdname(mddev),
+ 		conf->raid_disks - mddev->degraded);
++>>>>>>> cc6167b4f3b3 (md/raid5: change printk() to pr_*())
  }
  
  /*
@@@ -6400,35 -6369,18 +6402,42 @@@ static void free_conf(struct r5conf *co
  	kfree(conf);
  }
  
 -static int raid456_cpu_up_prepare(unsigned int cpu, struct hlist_node *node)
 +#ifdef CONFIG_HOTPLUG_CPU
 +static int raid456_cpu_notify(struct notifier_block *nfb, unsigned long action,
 +			      void *hcpu)
  {
 -	struct r5conf *conf = hlist_entry_safe(node, struct r5conf, node);
 +	struct r5conf *conf = container_of(nfb, struct r5conf, cpu_notify);
 +	long cpu = (long)hcpu;
  	struct raid5_percpu *percpu = per_cpu_ptr(conf->percpu, cpu);
  
++<<<<<<< HEAD
 +	switch (action) {
 +	case CPU_UP_PREPARE:
 +	case CPU_UP_PREPARE_FROZEN:
 +		if (alloc_scratch_buffer(conf, percpu)) {
 +			pr_err("%s: failed memory allocation for cpu%ld\n",
 +			       __func__, cpu);
 +			return notifier_from_errno(-ENOMEM);
 +		}
 +		break;
 +	case CPU_DEAD:
 +	case CPU_DEAD_FROZEN:
 +	case CPU_UP_CANCELED:
 +	case CPU_UP_CANCELED_FROZEN:
 +		free_scratch_buffer(conf, per_cpu_ptr(conf->percpu, cpu));
 +		break;
 +	default:
 +		break;
++=======
+ 	if (alloc_scratch_buffer(conf, percpu)) {
+ 		pr_warn("%s: failed memory allocation for cpu%u\n",
+ 			__func__, cpu);
+ 		return -ENOMEM;
++>>>>>>> cc6167b4f3b3 (md/raid5: change printk() to pr_*())
  	}
 -	return 0;
 +	return NOTIFY_OK;
  }
 +#endif
  
  static int raid5_alloc_percpu(struct r5conf *conf)
  {
@@@ -6691,9 -6612,15 +6696,18 @@@ static struct r5conf *setup_conf(struc
  	 * So set it rather large, scaled by number of devices.
  	 */
  	conf->shrinker.seeks = DEFAULT_SEEKS * conf->raid_disks * 4;
 -	conf->shrinker.scan_objects = raid5_cache_scan;
 -	conf->shrinker.count_objects = raid5_cache_count;
 +	conf->shrinker.shrink = raid5_cache_shrink;
  	conf->shrinker.batch = 128;
++<<<<<<< HEAD
 +	register_shrinker(&conf->shrinker);
++=======
+ 	conf->shrinker.flags = 0;
+ 	if (register_shrinker(&conf->shrinker)) {
+ 		pr_warn("md/raid:%s: couldn't register shrinker.\n",
+ 			mdname(mddev));
+ 		goto abort;
+ 	}
++>>>>>>> cc6167b4f3b3 (md/raid5: change printk() to pr_*())
  
  	sprintf(pers_name, "raid%d", mddev->new_level);
  	conf->thread = md_register_thread(raid5d, mddev, pers_name);
* Unmerged path drivers/md/raid5.c
