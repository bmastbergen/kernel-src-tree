amd-xgbe: Add BQL support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Lendacky, Thomas <Thomas.Lendacky@amd.com>
commit 5fb4b86a66363e275add87b441bf80b24144a0c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5fb4b86a.failed

Call the appropriate BQL functions to track the number of bytes queued
during Tx processing and to track the number of packets and bytes
that have been transmitted during Tx complete processing.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5fb4b86a66363e275add87b441bf80b24144a0c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amd/xgbe/xgbe-drv.c
#	drivers/net/ethernet/amd/xgbe/xgbe.h
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index f42678309ce8,f9635281c7df..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@@ -898,8 -1468,13 +921,16 @@@ static int xgbe_xmit(struct sk_buff *sk
  		goto tx_netdev_return;
  	}
  
++<<<<<<< HEAD
++=======
+ 	xgbe_prep_tx_tstamp(pdata, skb, packet);
+ 
+ 	/* Report on the actual number of bytes (to be) sent */
+ 	netdev_tx_sent_queue(txq, packet->tx_bytes);
+ 
++>>>>>>> 5fb4b86a6636 (amd-xgbe: Add BQL support)
  	/* Configure required descriptor fields for transmission */
 -	hw_if->dev_xmit(channel);
 +	hw_if->pre_xmit(channel);
  
  #ifdef XGMAC_ENABLE_TX_PKT_DUMP
  	xgbe_print_pkt(netdev, skb, true);
@@@ -1134,8 -1829,13 +1169,13 @@@ static int xgbe_tx_poll(struct xgbe_cha
  		xgbe_dump_tx_desc(ring, ring->dirty, 1, 0);
  #endif
  
+ 		if (hw_if->is_last_desc(rdesc)) {
+ 			tx_packets += rdata->tx.packets;
+ 			tx_bytes += rdata->tx.bytes;
+ 		}
+ 
  		/* Free the SKB and reset the descriptor for re-use */
 -		desc_if->unmap_rdata(pdata, rdata);
 +		desc_if->unmap_skb(pdata, rdata);
  		hw_if->tx_desc_reset(rdata);
  
  		processed++;
diff --cc drivers/net/ethernet/amd/xgbe/xgbe.h
index 1d8899bca25d,98504f1469ed..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe.h
@@@ -211,6 -238,14 +211,17 @@@ struct xgbe_packet_data 
  	unsigned short mss;
  
  	unsigned short vlan_ctag;
++<<<<<<< HEAD
++=======
+ 
+ 	u64 rx_tstamp;
+ 
+ 	u32 rss_hash;
+ 	enum pkt_hash_types rss_hash_type;
+ 
+ 	unsigned int tx_packets;
+ 	unsigned int tx_bytes;
++>>>>>>> 5fb4b86a6636 (amd-xgbe: Add BQL support)
  };
  
  /* Common Rx and Tx descriptor mapping */
@@@ -221,6 -256,40 +232,43 @@@ struct xgbe_ring_desc 
  	__le32 desc3;
  };
  
++<<<<<<< HEAD
++=======
+ /* Page allocation related values */
+ struct xgbe_page_alloc {
+ 	struct page *pages;
+ 	unsigned int pages_len;
+ 	unsigned int pages_offset;
+ 
+ 	dma_addr_t pages_dma;
+ };
+ 
+ /* Ring entry buffer data */
+ struct xgbe_buffer_data {
+ 	struct xgbe_page_alloc pa;
+ 	struct xgbe_page_alloc pa_unmap;
+ 
+ 	dma_addr_t dma;
+ 	unsigned int dma_len;
+ };
+ 
+ /* Tx-related ring data */
+ struct xgbe_tx_ring_data {
+ 	unsigned int tso_header;	/* TSO header indicator */
+ 	unsigned int packets;		/* BQL packet count */
+ 	unsigned int bytes;		/* BQL byte count */
+ };
+ 
+ /* Rx-related ring data */
+ struct xgbe_rx_ring_data {
+ 	struct xgbe_buffer_data hdr;	/* Header locations */
+ 	struct xgbe_buffer_data buf;	/* Payload locations */
+ 
+ 	unsigned short hdr_len;		/* Length of received header */
+ 	unsigned short len;		/* Length of received packet */
+ };
+ 
++>>>>>>> 5fb4b86a6636 (amd-xgbe: Add BQL support)
  /* Structure used to hold information related to the descriptor
   * and the packet associated with the descriptor (always use
   * use the XGBE_GET_DESC_DATA macro to access this data from the ring)
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
index 81bd491c7d02..a81cb196799d 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
@@ -1067,6 +1067,10 @@ static void xgbe_pre_xmit(struct xgbe_channel *channel)
 	/* Set LAST bit for the last descriptor */
 	XGMAC_SET_BITS_LE(rdesc->desc3, TX_NORMAL_DESC3, LD, 1);
 
+	/* Save the Tx info to report back during cleanup */
+	rdata->tx.packets = packet->tx_packets;
+	rdata->tx.bytes = packet->tx_bytes;
+
 	/* In case the Tx DMA engine is running, make sure everything
 	 * is written to the descriptor(s) before setting the OWN bit
 	 * for the first descriptor
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-drv.c
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe.h
