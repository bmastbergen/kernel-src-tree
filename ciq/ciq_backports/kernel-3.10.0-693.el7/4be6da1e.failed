IB/mlx5: Support creation of a WQ with scatter FCS offload

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Noa Osherovich <noaos@mellanox.com>
commit 4be6da1e5b8dde8b163c540fca5745644a6a9e00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/4be6da1e.failed

Add support for creation of a WQ with scatter FCS capability, if
this capability is supported by the hardware.

	Signed-off-by: Noa Osherovich <noaos@mellanox.com>
	Reviewed-by: Majd Dibbiny <majd@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 4be6da1e5b8dde8b163c540fca5745644a6a9e00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index d9c6ce6376a5,fbfff1269816..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -4526,6 -4636,24 +4527,27 @@@ static int  create_rq(struct mlx5_ib_rw
  	MLX5_SET(wq, wq, log_wq_pg_sz, rwq->log_page_size);
  	MLX5_SET(wq, wq, wq_signature, rwq->wq_sig);
  	MLX5_SET64(wq, wq, dbr_addr, rwq->db.dma);
++<<<<<<< HEAD
++=======
+ 	has_net_offloads = MLX5_CAP_GEN(dev->mdev, eth_net_offloads);
+ 	if (init_attr->create_flags & IB_WQ_FLAGS_CVLAN_STRIPPING) {
+ 		if (!(has_net_offloads && MLX5_CAP_ETH(dev->mdev, vlan_cap))) {
+ 			mlx5_ib_dbg(dev, "VLAN offloads are not supported\n");
+ 			err = -EOPNOTSUPP;
+ 			goto out;
+ 		}
+ 	} else {
+ 		MLX5_SET(rqc, rqc, vsd, 1);
+ 	}
+ 	if (init_attr->create_flags & IB_WQ_FLAGS_SCATTER_FCS) {
+ 		if (!(has_net_offloads && MLX5_CAP_ETH(dev->mdev, scatter_fcs))) {
+ 			mlx5_ib_dbg(dev, "Scatter FCS is not supported\n");
+ 			err = -EOPNOTSUPP;
+ 			goto out;
+ 		}
+ 		MLX5_SET(rqc, rqc, scatter_fcs, 1);
+ 	}
++>>>>>>> 4be6da1e5b8d (IB/mlx5: Support creation of a WQ with scatter FCS offload)
  	rq_pas0 = (__be64 *)MLX5_ADDR_OF(wq, wq, pas);
  	mlx5_ib_populate_pas(dev, rwq->umem, rwq->page_shift, rq_pas0, 0);
  	err = mlx5_core_create_rq_tracked(dev->mdev, in, inlen, &rwq->core_qp);
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
