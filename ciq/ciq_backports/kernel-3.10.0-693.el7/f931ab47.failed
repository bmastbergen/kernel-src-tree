mm: fix devm_memremap_pages crash, use mem_hotplug_{begin, done}

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [mm] fix devm_memremap_pages crash, use mem_hotplug_{begin, done} (Jeff Moyer) [1438579]
Rebuild_FUZZ: 96.77%
commit-author Dan Williams <dan.j.williams@intel.com>
commit f931ab479dd24cf7a2c6e2df19778406892591fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/f931ab47.failed

Both arch_add_memory() and arch_remove_memory() expect a single threaded
context.

For example, arch/x86/mm/init_64.c::kernel_physical_mapping_init() does
not hold any locks over this check and branch:

    if (pgd_val(*pgd)) {
    	pud = (pud_t *)pgd_page_vaddr(*pgd);
    	paddr_last = phys_pud_init(pud, __pa(vaddr),
    				   __pa(vaddr_end),
    				   page_size_mask);
    	continue;
    }

    pud = alloc_low_page();
    paddr_last = phys_pud_init(pud, __pa(vaddr), __pa(vaddr_end),
    			   page_size_mask);

The result is that two threads calling devm_memremap_pages()
simultaneously can end up colliding on pgd initialization.  This leads
to crash signatures like the following where the loser of the race
initializes the wrong pgd entry:

    BUG: unable to handle kernel paging request at ffff888ebfff0000
    IP: memcpy_erms+0x6/0x10
    PGD 2f8e8fc067 PUD 0 /* <---- Invalid PUD */
    Oops: 0000 [#1] SMP DEBUG_PAGEALLOC
    CPU: 54 PID: 3818 Comm: systemd-udevd Not tainted 4.6.7+ #13
    task: ffff882fac290040 ti: ffff882f887a4000 task.ti: ffff882f887a4000
    RIP: memcpy_erms+0x6/0x10
    [..]
    Call Trace:
      ? pmem_do_bvec+0x205/0x370 [nd_pmem]
      ? blk_queue_enter+0x3a/0x280
      pmem_rw_page+0x38/0x80 [nd_pmem]
      bdev_read_page+0x84/0xb0

Hold the standard memory hotplug mutex over calls to
arch_{add,remove}_memory().

Fixes: 41e94a851304 ("add devm_memremap_pages")
Link: http://lkml.kernel.org/r/148357647831.9498.12606007370121652979.stgit@dwillia2-desk3.amr.corp.intel.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f931ab479dd24cf7a2c6e2df19778406892591fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/memremap.c
diff --cc kernel/memremap.c
index 8e338960b262,9ecedc28b928..000000000000
--- a/kernel/memremap.c
+++ b/kernel/memremap.c
@@@ -229,7 -246,10 +229,13 @@@ static void devm_memremap_pages_release
  	/* pages are dead and unused, undo the arch mapping */
  	align_start = res->start & ~(SECTION_SIZE - 1);
  	align_size = ALIGN(resource_size(res), SECTION_SIZE);
+ 	mem_hotplug_begin();
  	arch_remove_memory(align_start, align_size);
++<<<<<<< HEAD
++=======
+ 	mem_hotplug_done();
+ 	untrack_pfn(NULL, PHYS_PFN(align_start), align_size);
++>>>>>>> f931ab479dd2 (mm: fix devm_memremap_pages crash, use mem_hotplug_{begin, done})
  	pgmap_radix_release(res);
  	dev_WARN_ONCE(dev, pgmap->altmap && pgmap->altmap->alloc,
  			"%s: failed to free all reserved pages\n", __func__);
@@@ -339,7 -355,14 +345,17 @@@ void *devm_memremap_pages(struct devic
  	if (nid < 0)
  		nid = numa_mem_id();
  
++<<<<<<< HEAD
++=======
+ 	error = track_pfn_remap(NULL, &pgprot, PHYS_PFN(align_start), 0,
+ 			align_size);
+ 	if (error)
+ 		goto err_pfn_remap;
+ 
+ 	mem_hotplug_begin();
++>>>>>>> f931ab479dd2 (mm: fix devm_memremap_pages crash, use mem_hotplug_{begin, done})
  	error = arch_add_memory(nid, align_start, align_size, true);
+ 	mem_hotplug_done();
  	if (error)
  		goto err_add_memory;
  
* Unmerged path kernel/memremap.c
