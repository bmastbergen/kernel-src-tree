net/mlx5: Introduce attach/detach to interface API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [kernel] mlx5: Introduce attach/detach to interface API (Don Dutile) [1385214 1385330 1417285]
Rebuild_FUZZ: 95.83%
commit-author Mohamad Haj Yahia <mohamad@mellanox.com>
commit 737a234bb6384800a5b632be85c6b0ad6221d137
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/737a234b.failed

Add attach/detach callbacks to interface API.
This is crucial for implementing seamless reset flow which releases the
hardware and it's resources upon detach while keeping software
structures and state (e.g netdev) then reset and reallocate the hardware
needed resources upon attach.

	Signed-off-by: Mohamad Haj Yahia <mohamad@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 737a234bb6384800a5b632be85c6b0ad6221d137)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index e782d0fde09e,108d8f2e73e1..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -813,7 -789,10 +819,14 @@@ static void mlx5_add_device(struct mlx5
  	struct mlx5_device_context *dev_ctx;
  	struct mlx5_core_dev *dev = container_of(priv, struct mlx5_core_dev, priv);
  
++<<<<<<< HEAD
 +	dev_ctx = kmalloc(sizeof(*dev_ctx), GFP_KERNEL);
++=======
+ 	if (!mlx5_lag_intf_add(intf, priv))
+ 		return;
+ 
+ 	dev_ctx = kzalloc(sizeof(*dev_ctx), GFP_KERNEL);
++>>>>>>> 737a234bb638 (net/mlx5: Introduce attach/detach to interface API)
  	if (!dev_ctx)
  		return;
  
@@@ -1248,11 -1348,15 +1357,23 @@@ static int mlx5_unload_one(struct mlx5_
  			 __func__);
  		goto out;
  	}
++<<<<<<< HEAD
 +	mlx5_unregister_device(dev);
 +#ifdef CONFIG_MLX5_CORE_EN
 +	mlx5_eswitch_cleanup(dev->priv.eswitch);
 +#endif
 +
++=======
+ 
+ 	if (mlx5_device_registered(dev))
+ 		mlx5_detach_device(dev);
+ 
+ 	mlx5_sriov_cleanup(dev);
+ #ifdef CONFIG_MLX5_CORE_EN
+ 	mlx5_eswitch_cleanup(dev->priv.eswitch);
+ #endif
+ 	mlx5_cleanup_rl_table(dev);
++>>>>>>> 737a234bb638 (net/mlx5: Introduce attach/detach to interface API)
  	mlx5_cleanup_fs(dev);
  	mlx5_cleanup_mkey_table(dev);
  	mlx5_cleanup_srq_table(dev);
@@@ -1353,9 -1467,18 +1474,12 @@@ static int init_one(struct pci_dev *pde
  		dev_err(&pdev->dev, "mlx5_load_one failed with error code %d\n", err);
  		goto clean_health;
  	}
+ 	err = request_module_nowait(MLX5_IB_MOD);
+ 	if (err)
+ 		pr_info("failed request module on %s\n", MLX5_IB_MOD);
  
 -	err = devlink_register(devlink, &pdev->dev);
 -	if (err)
 -		goto clean_load;
 -
  	return 0;
  
 -clean_load:
 -	mlx5_unload_one(dev, priv);
  clean_health:
  	mlx5_health_cleanup(dev);
  close_pci:
@@@ -1370,8 -1493,12 +1494,14 @@@ clean_dev
  static void remove_one(struct pci_dev *pdev)
  {
  	struct mlx5_core_dev *dev  = pci_get_drvdata(pdev);
 -	struct devlink *devlink = priv_to_devlink(dev);
  	struct mlx5_priv *priv = &dev->priv;
  
++<<<<<<< HEAD
++=======
+ 	devlink_unregister(devlink);
+ 	mlx5_unregister_device(dev);
+ 
++>>>>>>> 737a234bb638 (net/mlx5: Introduce attach/detach to interface API)
  	if (mlx5_unload_one(dev, priv)) {
  		dev_err(&dev->pdev->dev, "mlx5_unload_one failed\n");
  		mlx5_health_cleanup(dev);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --git a/include/linux/mlx5/driver.h b/include/linux/mlx5/driver.h
index f24904979fc5..cf315d832b19 100644
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@ -879,6 +879,8 @@ enum {
 struct mlx5_interface {
 	void *			(*add)(struct mlx5_core_dev *dev);
 	void			(*remove)(struct mlx5_core_dev *dev, void *context);
+	int			(*attach)(struct mlx5_core_dev *dev, void *context);
+	void			(*detach)(struct mlx5_core_dev *dev, void *context);
 	void			(*event)(struct mlx5_core_dev *dev, void *context,
 					 enum mlx5_dev_event event, unsigned long param);
 	void *                  (*get_dev)(void *context);
