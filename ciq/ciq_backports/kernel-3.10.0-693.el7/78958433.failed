NTB: Enable Snoop on Primary Side

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
Rebuild_CHGLOG: - [ntb] Enable Snoop on Primary Side (Suravee Suthikulpanit) [1303727]
Rebuild_FUZZ: 91.80%
commit-author Jon Mason <jon.mason@intel.com>
commit 78958433db077b339f3a039890148561086574e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/78958433.failed

Enable Snoop from Primary to Secondary side on BAR23 and BAR45 on all
TLPs.  Previously, Snoop was only enabled from Secondary to Primary
side.  This can have a performance improvement on some workloads.

Also, make the code more obvious about how the link is being enabled.

	Signed-off-by: Jon Mason <jon.mason@intel.com>
(cherry picked from commit 78958433db077b339f3a039890148561086574e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ntb/ntb_hw.c
#	drivers/ntb/ntb_regs.h
diff --cc drivers/ntb/ntb_hw.c
index 5ff2ae362045,80505aeecf9e..000000000000
--- a/drivers/ntb/ntb_hw.c
+++ b/drivers/ntb/ntb_hw.c
@@@ -1114,6 -1312,39 +1114,42 @@@ static void ntb_free_debugfs(struct ntb
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void ntb_hw_link_up(struct ntb_device *ndev)
+ {
+ 	if (ndev->conn_type == NTB_CONN_TRANSPARENT)
+ 		ntb_link_event(ndev, NTB_LINK_UP);
+ 	else {
+ 		u32 ntb_cntl;
+ 
+ 		/* Let's bring the NTB link up */
+ 		ntb_cntl = readl(ndev->reg_ofs.lnk_cntl);
+ 		ntb_cntl &= ~(NTB_CNTL_LINK_DISABLE | NTB_CNTL_CFG_LOCK);
+ 		ntb_cntl |= NTB_CNTL_P2S_BAR23_SNOOP | NTB_CNTL_S2P_BAR23_SNOOP;
+ 		ntb_cntl |= NTB_CNTL_P2S_BAR45_SNOOP | NTB_CNTL_S2P_BAR45_SNOOP;
+ 		writel(ntb_cntl, ndev->reg_ofs.lnk_cntl);
+ 	}
+ }
+ 
+ static void ntb_hw_link_down(struct ntb_device *ndev)
+ {
+ 	u32 ntb_cntl;
+ 
+ 	if (ndev->conn_type == NTB_CONN_TRANSPARENT) {
+ 		ntb_link_event(ndev, NTB_LINK_DOWN);
+ 		return;
+ 	}
+ 
+ 	/* Bring NTB link down */
+ 	ntb_cntl = readl(ndev->reg_ofs.lnk_cntl);
+ 	ntb_cntl &= ~(NTB_CNTL_P2S_BAR23_SNOOP | NTB_CNTL_S2P_BAR23_SNOOP);
+ 	ntb_cntl &= ~(NTB_CNTL_P2S_BAR45_SNOOP | NTB_CNTL_S2P_BAR45_SNOOP);
+ 	ntb_cntl |= NTB_CNTL_LINK_DISABLE | NTB_CNTL_CFG_LOCK;
+ 	writel(ntb_cntl, ndev->reg_ofs.lnk_cntl);
+ }
+ 
++>>>>>>> 78958433db07 (NTB: Enable Snoop on Primary Side)
  static int ntb_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
  {
  	struct ntb_device *ndev;
diff --cc drivers/ntb/ntb_regs.h
index 7d846ec07c2e,9774506419d7..000000000000
--- a/drivers/ntb/ntb_regs.h
+++ b/drivers/ntb/ntb_regs.h
@@@ -131,9 -129,27 +131,33 @@@
  #define BWD_B2B_SPADSEMA_OFFSET	0x80c0
  #define BWD_B2B_STKYSPAD_OFFSET	0x80c4
  
++<<<<<<< HEAD
 +#define NTB_CNTL_BAR23_SNOOP	(1 << 2)
 +#define NTB_CNTL_BAR45_SNOOP	(1 << 6)
 +#define BWD_CNTL_LINK_DOWN	(1 << 16)
++=======
+ #define BWD_MODPHY_PCSREG4	0x1c004
+ #define BWD_MODPHY_PCSREG6	0x1c006
+ 
+ #define BWD_IP_BASE		0xC000
+ #define BWD_DESKEWSTS_OFFSET	(BWD_IP_BASE + 0x3024)
+ #define BWD_LTSSMERRSTS0_OFFSET (BWD_IP_BASE + 0x3180)
+ #define BWD_LTSSMSTATEJMP_OFFSET	(BWD_IP_BASE + 0x3040)
+ #define BWD_IBSTERRRCRVSTS0_OFFSET	(BWD_IP_BASE + 0x3324)
+ 
+ #define BWD_DESKEWSTS_DBERR	(1 << 15)
+ #define BWD_LTSSMERRSTS0_UNEXPECTEDEI	(1 << 20)
+ #define BWD_LTSSMSTATEJMP_FORCEDETECT	(1 << 2)
+ #define BWD_IBIST_ERR_OFLOW	0x7FFF7FFF
+ 
+ #define NTB_CNTL_CFG_LOCK		(1 << 0)
+ #define NTB_CNTL_LINK_DISABLE		(1 << 1)
+ #define NTB_CNTL_S2P_BAR23_SNOOP	(1 << 2)
+ #define NTB_CNTL_P2S_BAR23_SNOOP	(1 << 4)
+ #define NTB_CNTL_S2P_BAR45_SNOOP	(1 << 6)
+ #define NTB_CNTL_P2S_BAR45_SNOOP	(1 << 8)
+ #define BWD_CNTL_LINK_DOWN		(1 << 16)
++>>>>>>> 78958433db07 (NTB: Enable Snoop on Primary Side)
  
  #define NTB_PPD_OFFSET		0x00D4
  #define SNB_PPD_CONN_TYPE	0x0003
* Unmerged path drivers/ntb/ntb_hw.c
* Unmerged path drivers/ntb/ntb_regs.h
