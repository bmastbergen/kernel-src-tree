xfs: remove put_value from attr ->put_listent context

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit 7af5ad28a603f2d1ef4c579b8ab0a9d4767a348e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/7af5ad28.failed

The put_value context member is never set; remove it
and the conditional test in xfs_attr3_leaf_list_int().

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 7af5ad28a603f2d1ef4c579b8ab0a9d4767a348e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_attr_list.c
diff --cc fs/xfs/xfs_attr_list.c
index 4fa14820e2e2,cbf4f5d072f6..000000000000
--- a/fs/xfs/xfs_attr_list.c
+++ b/fs/xfs/xfs_attr_list.c
@@@ -432,49 -428,21 +432,63 @@@ xfs_attr3_leaf_list_int
  						entry->flags,
  						name_loc->nameval,
  						(int)name_loc->namelen,
++<<<<<<< HEAD
 +						be16_to_cpu(name_loc->valuelen),
 +						&name_loc->nameval[name_loc->namelen]);
 +			if (retval)
 +				return retval;
++=======
+ 						be16_to_cpu(name_loc->valuelen));
++>>>>>>> 7af5ad28a603 (xfs: remove put_value from attr ->put_listent context)
  		} else {
  			xfs_attr_leaf_name_remote_t *name_rmt =
  				xfs_attr3_leaf_name_remote(leaf, i);
  
  			int valuelen = be32_to_cpu(name_rmt->valuelen);
  
++<<<<<<< HEAD
 +			if (context->put_value) {
 +				xfs_da_args_t args;
 +
 +				memset((char *)&args, 0, sizeof(args));
 +				args.geo = context->dp->i_mount->m_attr_geo;
 +				args.dp = context->dp;
 +				args.whichfork = XFS_ATTR_FORK;
 +				args.valuelen = valuelen;
 +				args.rmtvaluelen = valuelen;
 +				args.value = kmem_alloc(valuelen, KM_SLEEP | KM_NOFS);
 +				args.rmtblkno = be32_to_cpu(name_rmt->valueblk);
 +				args.rmtblkcnt = xfs_attr3_rmt_blocks(
 +							args.dp->i_mount, valuelen);
 +				retval = xfs_attr_rmtval_get(&args);
 +				if (!retval)
 +					retval = context->put_listent(context,
 +							entry->flags,
 +							name_rmt->name,
 +							(int)name_rmt->namelen,
 +							valuelen,
 +							args.value);
 +				kmem_free(args.value);
 +			} else {
 +				retval = context->put_listent(context,
 +						entry->flags,
 +						name_rmt->name,
 +						(int)name_rmt->namelen,
 +						valuelen,
 +						NULL);
 +			}
 +			if (retval)
 +				return retval;
++=======
+ 			retval = context->put_listent(context,
+ 						entry->flags,
+ 						name_rmt->name,
+ 						(int)name_rmt->namelen,
+ 						valuelen);
++>>>>>>> 7af5ad28a603 (xfs: remove put_value from attr ->put_listent context)
  		}
+ 		if (retval)
+ 			break;
  		if (context->seen_enough)
  			break;
  		cursor->offset++;
diff --git a/fs/xfs/xfs_attr.h b/fs/xfs/xfs_attr.h
index dd4824589470..dceabdcff40e 100644
--- a/fs/xfs/xfs_attr.h
+++ b/fs/xfs/xfs_attr.h
@@ -126,7 +126,6 @@ typedef struct xfs_attr_list_context {
 	int				firstu;		/* first used byte in buffer */
 	int				flags;		/* from VOP call */
 	int				resynch;	/* T/F: resynch with cursor */
-	int				put_value;	/* T/F: need value for listent */
 	put_listent_func_t		put_listent;	/* list output fmt function */
 	int				index;		/* index into output buffer */
 } xfs_attr_list_context_t;
* Unmerged path fs/xfs/xfs_attr_list.c
