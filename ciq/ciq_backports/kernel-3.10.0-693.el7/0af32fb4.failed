xfs: fix bogus space reservation in xfs_iomap_write_allocate

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 0af32fb468b4a4434dd759d68611763658650b59
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/0af32fb4.failed

The space reservations was without an explaination in commit

    "Add error reporting calls in error paths that return EFSCORRUPTED"

back in 2003.  There is no reason to reserve disk blocks in the
transaction when allocating blocks for delalloc space as we already
reserved the space when creating the delalloc extent.

With this fix we stop running out of the reserved pool in
generic/229, which has happened for long time with small blocksize
file systems, and has increased in severity with the new buffered
write path.

[ dchinner: we still need to pass the block reservation into
  xfs_bmapi_write() to ensure we don't deadlock during AG selection.
  See commit dbd5c8c ("xfs: pass total block res. as total
  xfs_bmapi_write() parameter") for more details on why this is
  necessary. ]

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 0af32fb468b4a4434dd759d68611763658650b59)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_iomap.c
diff --cc fs/xfs/xfs_iomap.c
index d81bdc080370,4398932a7d1b..000000000000
--- a/fs/xfs/xfs_iomap.c
+++ b/fs/xfs/xfs_iomap.c
@@@ -723,18 -715,20 +723,29 @@@ xfs_iomap_write_allocate
  		 * is in the delayed allocation extent on which we sit
  		 * but before our buffer starts.
  		 */
- 
  		nimaps = 0;
  		while (nimaps == 0) {
 +			tp = xfs_trans_alloc(mp, XFS_TRANS_STRAT_WRITE);
 +			tp->t_flags |= XFS_TRANS_RESERVE;
  			nres = XFS_EXTENTADD_SPACE_RES(mp, XFS_DATA_FORK);
++<<<<<<< HEAD
 +			error = xfs_trans_reserve(tp, &M_RES(mp)->tr_write,
 +						  nres, 0);
 +			if (error) {
 +				xfs_trans_cancel(tp);
++=======
+ 			/*
+ 			 * We have already reserved space for the extent and any
+ 			 * indirect blocks when creating the delalloc extent,
+ 			 * there is no need to reserve space in this transaction
+ 			 * again.
+ 			 */
+ 			error = xfs_trans_alloc(mp, &M_RES(mp)->tr_write, 0,
+ 					0, XFS_TRANS_RESERVE, &tp);
+ 			if (error)
++>>>>>>> 0af32fb468b4 (xfs: fix bogus space reservation in xfs_iomap_write_allocate)
  				return error;
 -
 +			}
  			xfs_ilock(ip, XFS_ILOCK_EXCL);
  			xfs_trans_ijoin(tp, ip, 0);
  
* Unmerged path fs/xfs/xfs_iomap.c
