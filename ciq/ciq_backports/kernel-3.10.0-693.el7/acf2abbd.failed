perf evsel: Add missign class prefix to has_branch_stack method

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit acf2abbd0b7fcc6325e9690a8a32ee924c827f70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/acf2abbd.failed

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Milian Wolff <milian.wolff@kdab.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-5i07ivw1yjsweb7gztr255jd@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit acf2abbd0b7fcc6325e9690a8a32ee924c827f70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/machine.c
diff --cc tools/perf/util/machine.c
index 80b9b6a87990,52b51e004fe8..000000000000
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@@ -1803,10 -1806,10 +1803,15 @@@ static int thread__resolve_callchain_sa
  	int skip_idx = -1;
  	int first_call = 0;
  
 -	callchain_cursor_reset(cursor);
 +	callchain_cursor_reset(&callchain_cursor);
  
++<<<<<<< HEAD
 +	if (has_branch_callstack(evsel)) {
 +		err = resolve_lbr_callchain_sample(thread, sample, parent,
++=======
+ 	if (perf_evsel__has_branch_callstack(evsel)) {
+ 		err = resolve_lbr_callchain_sample(thread, cursor, sample, parent,
++>>>>>>> acf2abbd0b7f (perf evsel: Add missign class prefix to has_branch_stack method)
  						   root_al, max_stack);
  		if (err)
  			return (err < 0) ? err : 0;
diff --git a/tools/perf/util/evsel.h b/tools/perf/util/evsel.h
index 8b108cb05d6f..03f92b1924b9 100644
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@ -387,7 +387,7 @@ for ((_evsel) = list_entry((_leader)->node.next, struct perf_evsel, node); 	\
      (_evsel) && (_evsel)->leader == (_leader);					\
      (_evsel) = list_entry((_evsel)->node.next, struct perf_evsel, node))
 
-static inline bool has_branch_callstack(struct perf_evsel *evsel)
+static inline bool perf_evsel__has_branch_callstack(const struct perf_evsel *evsel)
 {
 	return evsel->attr.branch_sample_type & PERF_SAMPLE_BRANCH_CALL_STACK;
 }
* Unmerged path tools/perf/util/machine.c
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index 6f5a8e3e3ff9..2e751040268d 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -907,7 +907,7 @@ static void callchain__printf(struct perf_evsel *evsel,
 	unsigned int i;
 	struct ip_callchain *callchain = sample->callchain;
 
-	if (has_branch_callstack(evsel))
+	if (perf_evsel__has_branch_callstack(evsel))
 		callchain__lbr_callstack_printf(sample);
 
 	printf("... FP chain: nr:%" PRIu64 "\n", callchain->nr);
@@ -1081,7 +1081,7 @@ static void dump_sample(struct perf_evsel *evsel, union perf_event *event,
 	if (sample_type & PERF_SAMPLE_CALLCHAIN)
 		callchain__printf(evsel, sample);
 
-	if ((sample_type & PERF_SAMPLE_BRANCH_STACK) && !has_branch_callstack(evsel))
+	if ((sample_type & PERF_SAMPLE_BRANCH_STACK) && !perf_evsel__has_branch_callstack(evsel))
 		branch_stack__printf(sample);
 
 	if (sample_type & PERF_SAMPLE_REGS_USER)
