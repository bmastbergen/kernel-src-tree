netfilter: conntrack: built-in support for UDPlite

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Davide Caratti <dcaratti@redhat.com>
commit 9b91c96c5d1f9da79438292f8c82f65cbf078645
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/9b91c96c.failed

CONFIG_NF_CT_PROTO_UDPLITE is no more a tristate. When set to y,
connection tracking support for UDPlite protocol is built-in into
nf_conntrack.ko.

footprint test:
$ ls -l net/netfilter/nf_conntrack{_proto_udplite,}.ko \
        net/ipv4/netfilter/nf_conntrack_ipv4.ko \
        net/ipv6/netfilter/nf_conntrack_ipv6.ko

(builtin)|| udplite|  ipv4  |  ipv6  |nf_conntrack
---------++--------+--------+--------+--------------
none     || 432538 | 828755 | 828676 | 6141434
UDPlite  ||   -    | 829649 | 829362 | 6498204

	Signed-off-by: Davide Caratti <dcaratti@redhat.com>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 9b91c96c5d1f9da79438292f8c82f65cbf078645)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/ipv4/nf_conntrack_ipv4.h
#	include/net/netfilter/ipv6/nf_conntrack_ipv6.h
#	include/net/netns/conntrack.h
#	net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
#	net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
#	net/netfilter/Makefile
#	net/netfilter/nf_conntrack_proto_udplite.c
diff --cc include/net/netfilter/ipv4/nf_conntrack_ipv4.h
index 6c3d12e2949f,919e4e8af327..000000000000
--- a/include/net/netfilter/ipv4/nf_conntrack_ipv4.h
+++ b/include/net/netfilter/ipv4/nf_conntrack_ipv4.h
@@@ -15,6 -15,15 +15,18 @@@ extern struct nf_conntrack_l3proto nf_c
  extern struct nf_conntrack_l4proto nf_conntrack_l4proto_tcp4;
  extern struct nf_conntrack_l4proto nf_conntrack_l4proto_udp4;
  extern struct nf_conntrack_l4proto nf_conntrack_l4proto_icmp;
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NF_CT_PROTO_DCCP
+ extern struct nf_conntrack_l4proto nf_conntrack_l4proto_dccp4;
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_SCTP
+ extern struct nf_conntrack_l4proto nf_conntrack_l4proto_sctp4;
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ extern struct nf_conntrack_l4proto nf_conntrack_l4proto_udplite4;
+ #endif
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  
  int nf_conntrack_ipv4_compat_init(void);
  void nf_conntrack_ipv4_compat_fini(void);
diff --cc include/net/netfilter/ipv6/nf_conntrack_ipv6.h
index a4c993685795,eaea968f8657..000000000000
--- a/include/net/netfilter/ipv6/nf_conntrack_ipv6.h
+++ b/include/net/netfilter/ipv6/nf_conntrack_ipv6.h
@@@ -6,6 -6,15 +6,18 @@@ extern struct nf_conntrack_l3proto nf_c
  extern struct nf_conntrack_l4proto nf_conntrack_l4proto_tcp6;
  extern struct nf_conntrack_l4proto nf_conntrack_l4proto_udp6;
  extern struct nf_conntrack_l4proto nf_conntrack_l4proto_icmpv6;
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NF_CT_PROTO_DCCP
+ extern struct nf_conntrack_l4proto nf_conntrack_l4proto_dccp6;
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_SCTP
+ extern struct nf_conntrack_l4proto nf_conntrack_l4proto_sctp6;
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ extern struct nf_conntrack_l4proto nf_conntrack_l4proto_udplite6;
+ #endif
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  
  #include <linux/sysctl.h>
  extern struct ctl_table nf_ct_ipv6_sysctl_table[];
diff --cc include/net/netns/conntrack.h
index 4303c98010df,cf799fc3fdec..000000000000
--- a/include/net/netns/conntrack.h
+++ b/include/net/netns/conntrack.h
@@@ -51,19 -54,51 +51,53 @@@ struct nf_icmp_net 
  	unsigned int timeout;
  };
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NF_CT_PROTO_DCCP
+ struct nf_dccp_net {
+ 	struct nf_proto_net pn;
+ 	int dccp_loose;
+ 	unsigned int dccp_timeout[CT_DCCP_MAX + 1];
+ };
+ #endif
+ 
+ #ifdef CONFIG_NF_CT_PROTO_SCTP
+ struct nf_sctp_net {
+ 	struct nf_proto_net pn;
+ 	unsigned int timeouts[SCTP_CONNTRACK_MAX];
+ };
+ #endif
+ 
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ enum udplite_conntrack {
+ 	UDPLITE_CT_UNREPLIED,
+ 	UDPLITE_CT_REPLIED,
+ 	UDPLITE_CT_MAX
+ };
+ 
+ struct nf_udplite_net {
+ 	struct nf_proto_net pn;
+ 	unsigned int timeouts[UDPLITE_CT_MAX];
+ };
+ #endif
+ 
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  struct nf_ip_net {
  	struct nf_generic_net   generic;
  	struct nf_tcp_net	tcp;
  	struct nf_udp_net	udp;
  	struct nf_icmp_net	icmp;
  	struct nf_icmp_net	icmpv6;
 -#ifdef CONFIG_NF_CT_PROTO_DCCP
 -	struct nf_dccp_net	dccp;
 -#endif
 -#ifdef CONFIG_NF_CT_PROTO_SCTP
 -	struct nf_sctp_net	sctp;
 +#if defined(CONFIG_SYSCTL) && defined(CONFIG_NF_CONNTRACK_PROC_COMPAT)
 +	struct ctl_table_header *ctl_table_header;
 +	struct ctl_table	*ctl_table;
  #endif
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ 	struct nf_udplite_net	udplite;
+ #endif
  };
  
 +#ifndef __GENKSYMS__
  struct ct_pcpu {
  	spinlock_t		lock;
  	struct hlist_nulls_head unconfirmed;
diff --cc net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
index 311c90294dd4,22fce4fcece4..000000000000
--- a/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
+++ b/net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
@@@ -408,6 -336,21 +408,24 @@@ MODULE_ALIAS("nf_conntrack-" __stringif
  MODULE_ALIAS("ip_conntrack");
  MODULE_LICENSE("GPL");
  
++<<<<<<< HEAD
++=======
+ static struct nf_conntrack_l4proto *builtin_l4proto4[] = {
+ 	&nf_conntrack_l4proto_tcp4,
+ 	&nf_conntrack_l4proto_udp4,
+ 	&nf_conntrack_l4proto_icmp,
+ #ifdef CONFIG_NF_CT_PROTO_DCCP
+ 	&nf_conntrack_l4proto_dccp4,
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_SCTP
+ 	&nf_conntrack_l4proto_sctp4,
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ 	&nf_conntrack_l4proto_udplite4,
+ #endif
+ };
+ 
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  static int ipv4_net_init(struct net *net)
  {
  	int ret = 0;
diff --cc net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
index 8f8c8ed94a2f,389f712854f2..000000000000
--- a/net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
+++ b/net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
@@@ -350,6 -336,21 +350,24 @@@ static struct nf_sockopt_ops so_getorig
  	.owner		= THIS_MODULE,
  };
  
++<<<<<<< HEAD
++=======
+ static struct nf_conntrack_l4proto *builtin_l4proto6[] = {
+ 	&nf_conntrack_l4proto_tcp6,
+ 	&nf_conntrack_l4proto_udp6,
+ 	&nf_conntrack_l4proto_icmpv6,
+ #ifdef CONFIG_NF_CT_PROTO_DCCP
+ 	&nf_conntrack_l4proto_dccp6,
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_SCTP
+ 	&nf_conntrack_l4proto_sctp6,
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ 	&nf_conntrack_l4proto_udplite6,
+ #endif
+ };
+ 
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  static int ipv6_net_init(struct net *net)
  {
  	int ret = 0;
diff --cc net/netfilter/Makefile
index 2a3dcb487568,e4c8c1d7aaed..000000000000
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@@ -5,6 -5,9 +5,12 @@@ nf_conntrack-$(CONFIG_NF_CONNTRACK_TIME
  nf_conntrack-$(CONFIG_NF_CONNTRACK_TIMESTAMP) += nf_conntrack_timestamp.o
  nf_conntrack-$(CONFIG_NF_CONNTRACK_EVENTS) += nf_conntrack_ecache.o
  nf_conntrack-$(CONFIG_NF_CONNTRACK_LABELS) += nf_conntrack_labels.o
++<<<<<<< HEAD
++=======
+ nf_conntrack-$(CONFIG_NF_CT_PROTO_DCCP) += nf_conntrack_proto_dccp.o
+ nf_conntrack-$(CONFIG_NF_CT_PROTO_SCTP) += nf_conntrack_proto_sctp.o
+ nf_conntrack-$(CONFIG_NF_CT_PROTO_UDPLITE) += nf_conntrack_proto_udplite.o
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  
  obj-$(CONFIG_NETFILTER) = netfilter.o
  
@@@ -18,11 -19,7 +24,14 @@@ obj-$(CONFIG_NETFILTER_NETLINK_LOG) += 
  # connection tracking
  obj-$(CONFIG_NF_CONNTRACK) += nf_conntrack.o
  
 +# SCTP protocol connection tracking
 +obj-$(CONFIG_NF_CT_PROTO_DCCP) += nf_conntrack_proto_dccp.o
  obj-$(CONFIG_NF_CT_PROTO_GRE) += nf_conntrack_proto_gre.o
++<<<<<<< HEAD
 +obj-$(CONFIG_NF_CT_PROTO_SCTP) += nf_conntrack_proto_sctp.o
 +obj-$(CONFIG_NF_CT_PROTO_UDPLITE) += nf_conntrack_proto_udplite.o
++=======
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  
  # netlink interface for nf_conntrack
  obj-$(CONFIG_NF_CT_NETLINK) += nf_conntrack_netlink.o
diff --cc net/netfilter/nf_conntrack_proto_udplite.c
index 2750e6c69f82,c35f7bf05d8c..000000000000
--- a/net/netfilter/nf_conntrack_proto_udplite.c
+++ b/net/netfilter/nf_conntrack_proto_udplite.c
@@@ -35,15 -28,9 +28,19 @@@ static unsigned int udplite_timeouts[UD
  	[UDPLITE_CT_REPLIED]	= 180*HZ,
  };
  
++<<<<<<< HEAD
 +static int udplite_net_id __read_mostly;
 +struct udplite_net {
 +	struct nf_proto_net pn;
 +	unsigned int timeouts[UDPLITE_CT_MAX];
 +};
 +
 +static inline struct udplite_net *udplite_pernet(struct net *net)
++=======
+ static inline struct nf_udplite_net *udplite_pernet(struct net *net)
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
  {
- 	return net_generic(net, udplite_net_id);
+ 	return &net->ct.nf_ct_proto.udplite;
  }
  
  static bool udplite_pkt_to_tuple(const struct sk_buff *skb,
@@@ -328,78 -319,6 +325,81 @@@ struct nf_conntrack_l4proto nf_conntrac
  		.nla_policy	= udplite_timeout_nla_policy,
  	},
  #endif /* CONFIG_NF_CT_NETLINK_TIMEOUT */
- 	.net_id			= &udplite_net_id,
  	.init_net		= udplite_init_net,
  };
++<<<<<<< HEAD
 +
 +static int udplite_net_init(struct net *net)
 +{
 +	int ret = 0;
 +
 +	ret = nf_ct_l4proto_pernet_register(net, &nf_conntrack_l4proto_udplite4);
 +	if (ret < 0) {
 +		pr_err("nf_conntrack_udplite4: pernet registration failed.\n");
 +		goto out;
 +	}
 +	ret = nf_ct_l4proto_pernet_register(net, &nf_conntrack_l4proto_udplite6);
 +	if (ret < 0) {
 +		pr_err("nf_conntrack_udplite6: pernet registration failed.\n");
 +		goto cleanup_udplite4;
 +	}
 +	return 0;
 +
 +cleanup_udplite4:
 +	nf_ct_l4proto_pernet_unregister(net, &nf_conntrack_l4proto_udplite4);
 +out:
 +	return ret;
 +}
 +
 +static void udplite_net_exit(struct net *net)
 +{
 +	nf_ct_l4proto_pernet_unregister(net, &nf_conntrack_l4proto_udplite6);
 +	nf_ct_l4proto_pernet_unregister(net, &nf_conntrack_l4proto_udplite4);
 +}
 +
 +static struct pernet_operations udplite_net_ops = {
 +	.init = udplite_net_init,
 +	.exit = udplite_net_exit,
 +	.id   = &udplite_net_id,
 +	.size = sizeof(struct udplite_net),
 +};
 +
 +static int __init nf_conntrack_proto_udplite_init(void)
 +{
 +	int ret;
 +
 +	ret = register_pernet_subsys(&udplite_net_ops);
 +	if (ret < 0)
 +		goto out_pernet;
 +
 +	ret = nf_ct_l4proto_register(&nf_conntrack_l4proto_udplite4);
 +	if (ret < 0)
 +		goto out_udplite4;
 +
 +	ret = nf_ct_l4proto_register(&nf_conntrack_l4proto_udplite6);
 +	if (ret < 0)
 +		goto out_udplite6;
 +
 +	return 0;
 +out_udplite6:
 +	nf_ct_l4proto_unregister(&nf_conntrack_l4proto_udplite4);
 +out_udplite4:
 +	unregister_pernet_subsys(&udplite_net_ops);
 +out_pernet:
 +	return ret;
 +}
 +
 +static void __exit nf_conntrack_proto_udplite_exit(void)
 +{
 +	nf_ct_l4proto_unregister(&nf_conntrack_l4proto_udplite6);
 +	nf_ct_l4proto_unregister(&nf_conntrack_l4proto_udplite4);
 +	unregister_pernet_subsys(&udplite_net_ops);
 +}
 +
 +module_init(nf_conntrack_proto_udplite_init);
 +module_exit(nf_conntrack_proto_udplite_exit);
 +
 +MODULE_LICENSE("GPL");
++=======
+ EXPORT_SYMBOL_GPL(nf_conntrack_l4proto_udplite6);
++>>>>>>> 9b91c96c5d1f (netfilter: conntrack: built-in support for UDPlite)
* Unmerged path include/net/netfilter/ipv4/nf_conntrack_ipv4.h
* Unmerged path include/net/netfilter/ipv6/nf_conntrack_ipv6.h
* Unmerged path include/net/netns/conntrack.h
* Unmerged path net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c
* Unmerged path net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index a7265625168d..3190e1a67978 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -158,14 +158,15 @@ config NF_CT_PROTO_SCTP
 	  <file:Documentation/kbuild/modules.txt>.  If unsure, say `N'.
 
 config NF_CT_PROTO_UDPLITE
-	tristate 'UDP-Lite protocol connection tracking support'
+	bool 'UDP-Lite protocol connection tracking support'
 	depends on NETFILTER_ADVANCED
+	default y
 	help
 	  With this option enabled, the layer 3 independent connection
 	  tracking code will be able to do state tracking on UDP-Lite
 	  connections.
 
-	  To compile it as a module, choose M here.  If unsure, say N.
+	  If unsure, say Y.
 
 config NF_CONNTRACK_AMANDA
 	tristate "Amanda backup protocol support"
* Unmerged path net/netfilter/Makefile
* Unmerged path net/netfilter/nf_conntrack_proto_udplite.c
