cxgb4: Increase max number of tc u32 links

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Arjun V <arjun@chelsio.com>
commit 45da1ca2e20fb5b13c1abc8e65185dda08c88030
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/45da1ca2.failed

Make max number of supported tc u32 links equal to max number of filters
supported by hardware.

	Signed-off-by: Arjun V <arjun@chelsio.com>
	Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
	Signed-off-by: Casey Leedom <leedom@chelsio.com>
	Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 45da1ca2e20fb5b13c1abc8e65185dda08c88030)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_u32.c
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,021261a41c13..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -30,33 -32,23 +30,48 @@@
   * SOFTWARE.
   */
  
 -#ifndef __CXGB4_TC_U32_H
 -#define __CXGB4_TC_U32_H
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
  
 -#include <net/pkt_cls.h>
 +#include "ipath_kernel.h"
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
++=======
+ static inline bool can_tc_u32_offload(struct net_device *dev)
++>>>>>>> 45da1ca2e20f (cxgb4: Increase max number of tc u32 links):drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_u32.h
  {
 -	struct adapter *adap = netdev2adap(dev);
 -
 -	return (dev->features & NETIF_F_HW_TC) && adap->tc_u32 ? true : false;
 +	return 0;
  }
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
 +}
++=======
+ int cxgb4_config_knode(struct net_device *dev, __be16 protocol,
+ 		       struct tc_cls_u32_offload *cls);
+ int cxgb4_delete_knode(struct net_device *dev, __be16 protocol,
+ 		       struct tc_cls_u32_offload *cls);
+ 
+ void cxgb4_cleanup_tc_u32(struct adapter *adapter);
+ struct cxgb4_tc_u32_table *cxgb4_init_tc_u32(struct adapter *adap);
+ #endif /* __CXGB4_TC_U32_H */
++>>>>>>> 45da1ca2e20f (cxgb4: Increase max number of tc u32 links):drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_u32.h
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index b8553c425ce5,afb0967d2ce6..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@@ -5225,6 -4906,11 +5225,14 @@@ static int init_one(struct pci_dev *pde
  		dev_warn(&pdev->dev, "could not allocate TID table, "
  			 "continuing\n");
  		adapter->params.offload = 0;
++<<<<<<< HEAD
++=======
+ 	} else {
+ 		adapter->tc_u32 = cxgb4_init_tc_u32(adapter);
+ 		if (!adapter->tc_u32)
+ 			dev_warn(&pdev->dev,
+ 				 "could not offload tc u32, continuing\n");
++>>>>>>> 45da1ca2e20f (cxgb4: Increase max number of tc u32 links)
  	}
  
  	if (is_offload(adapter)) {
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_u32.c
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_tc_u32.c
