i40e: delete filter after adding its replacement when converting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 756970255a58c0f5ff9f9c5bba6fb47c70804077
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/75697025.failed

Fix a subtle issue with the code for converting VID=-1 filters into VID=0
filters when adding a new VLAN. Previously the code deleted the VID=-1
filter, and then added a new VID=0 filter. In the rare case that the
addition fails due to -ENOMEM, we end up completely deleting the filter
which prevents recovery if memory pressure subsides. While it is not
strictly an issue because it is likely that memory issues would result
in many other problems, we shouldn't delete the filter until after the
addition succeeds.

Change-ID: Icba07ddd04ecc6a3b27c2e29f2c1c8673d266826
	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 756970255a58c0f5ff9f9c5bba6fb47c70804077)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 2f00e31ef630,f9e9c90bb151..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -2357,26 -2519,31 +2357,39 @@@ int i40e_vsi_add_vlan(struct i40e_vsi *
  		}
  	}
  
 -	/* When we add a new VLAN filter, we need to make sure that all existing
 -	 * filters which are marked as vid=-1 (I40E_VLAN_ANY) are converted to
 -	 * vid=0. The simplest way is just search for all filters marked as
 -	 * vid=-1 and replace them with vid=0. This converts all filters that
 -	 * were marked to receive all traffic (tagged or untagged) into
 -	 * filters to receive only untagged traffic, so that we don't receive
 -	 * tagged traffic for VLANs which we have not configured.
 +	/* Now if we add a vlan tag, make sure to check if it is the first
 +	 * tag (i.e. a "tag" -1 does exist) and if so replace the -1 "tag"
 +	 * with 0, so we now accept untagged and specified tagged traffic
 +	 * (and not all tags along with untagged)
  	 */
++<<<<<<< HEAD
 +	if (vid > 0) {
 +		if (is_netdev && i40e_find_filter(vsi, vsi->netdev->dev_addr,
 +						  I40E_VLAN_ANY,
 +						  is_vf, is_netdev)) {
 +			i40e_del_filter(vsi, vsi->netdev->dev_addr,
 +					I40E_VLAN_ANY, is_vf, is_netdev);
 +			add_f = i40e_add_filter(vsi, vsi->netdev->dev_addr, 0,
 +						is_vf, is_netdev);
++=======
+ 	if (vid > 0 && !vsi->info.pvid) {
+ 		hash_for_each_safe(vsi->mac_filter_hash, bkt, h, f, hlist) {
+ 			if (f->state == I40E_FILTER_REMOVE)
+ 				continue;
+ 			del_f = i40e_find_filter(vsi, f->macaddr,
+ 						 I40E_VLAN_ANY);
+ 			if (!del_f)
+ 				continue;
+ 			add_f = i40e_add_filter(vsi, f->macaddr, 0);
++>>>>>>> 756970255a58 (i40e: delete filter after adding its replacement when converting)
  			if (!add_f) {
  				dev_info(&vsi->back->pdev->dev,
  					 "Could not add filter 0 for %pM\n",
 -					f->macaddr);
 -				spin_unlock_bh(&vsi->mac_filter_hash_lock);
 +					 vsi->netdev->dev_addr);
 +				spin_unlock_bh(&vsi->mac_filter_list_lock);
  				return -ENOMEM;
  			}
+ 			__i40e_del_filter(vsi, del_f);
  		}
  	}
  
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
