cpumask: factor out show_cpumap into separate helper function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-693.el7
commit-author Sudeep Holla <sudeep.holla@arm.com>
commit 5aaba36318e5995e8c95d077a46d9a4d00fcc1cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-693.el7/5aaba363.failed

Many sysfs *_show function use cpu{list,mask}_scnprintf to copy cpumap
to the buffer aligned to PAGE_SIZE, append '\n' and '\0' to return null
terminated buffer with newline.

This patch creates a new helper function cpumap_print_to_pagebuf in
cpumask.h using newly added bitmap_print_to_pagebuf and consolidates
most of those sysfs functions using the new helper function.

	Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
	Suggested-by: Stephen Boyd <sboyd@codeaurora.org>
	Tested-by: Stephen Boyd <sboyd@codeaurora.org>
	Acked-by: "Rafael J. Wysocki" <rjw@rjwysocki.net>
	Acked-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: x86@kernel.org
	Cc: linux-acpi@vger.kernel.org
	Cc: linux-pci@vger.kernel.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 5aaba36318e5995e8c95d077a46d9a4d00fcc1cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_amd_iommu.c
#	drivers/base/topology.c
#	include/linux/bitmap.h
#	lib/bitmap.c
diff --cc drivers/base/topology.c
index e8b42a606100,f7c353843ddf..000000000000
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@@ -40,47 -39,9 +40,50 @@@
  static ssize_t show_##name(struct device *dev,			\
  		struct device_attribute *attr, char *buf)	\
  {								\
 -	return sprintf(buf, "%d\n", topology_##name(dev->id));	\
 +	unsigned int cpu = dev->id;				\
 +	return sprintf(buf, "%d\n", topology_##name(cpu));	\
  }
  
++<<<<<<< HEAD
 +#if defined(topology_thread_cpumask) || defined(topology_core_cpumask) || \
 +    defined(topology_book_cpumask)
 +static ssize_t show_cpumap(int type, const struct cpumask *mask, char *buf)
 +{
 +	ptrdiff_t len = PTR_ALIGN(buf + PAGE_SIZE - 1, PAGE_SIZE) - buf;
 +	int n = 0;
 +
 +	if (len > 1) {
 +		n = type?
 +			cpulist_scnprintf(buf, len-2, mask) :
 +			cpumask_scnprintf(buf, len-2, mask);
 +		buf[n++] = '\n';
 +		buf[n] = '\0';
 +	}
 +	return n;
 +}
 +#endif
 +
 +#ifdef arch_provides_topology_pointers
 +#define define_siblings_show_map(name)					\
 +static ssize_t show_##name(struct device *dev,				\
 +			   struct device_attribute *attr, char *buf)	\
 +{									\
 +	unsigned int cpu = dev->id;					\
 +	return show_cpumap(0, topology_##name(cpu), buf);		\
 +}
 +
 +#define define_siblings_show_list(name)					\
 +static ssize_t show_##name##_list(struct device *dev,			\
 +				  struct device_attribute *attr,	\
 +				  char *buf)				\
 +{									\
 +	unsigned int cpu = dev->id;					\
 +	return show_cpumap(1, topology_##name(cpu), buf);		\
 +}
 +
 +#else
++=======
++>>>>>>> 5aaba36318e5 (cpumask: factor out show_cpumap into separate helper function)
  #define define_siblings_show_map(name)					\
  static ssize_t show_##name(struct device *dev,				\
  			   struct device_attribute *attr, char *buf)	\
@@@ -93,9 -54,8 +96,9 @@@ static ssize_t show_##name##_list(struc
  				  struct device_attribute *attr,	\
  				  char *buf)				\
  {									\
- 	return show_cpumap(1, topology_##name(dev->id), buf);		\
+ 	return cpumap_print_to_pagebuf(true, buf, topology_##name(dev->id));\
  }
 +#endif
  
  #define define_siblings_show_func(name)		\
  	define_siblings_show_map(name); define_siblings_show_list(name)
diff --cc include/linux/bitmap.h
index 88ed12f23b0f,9d5c3224a1e2..000000000000
--- a/include/linux/bitmap.h
+++ b/include/linux/bitmap.h
@@@ -60,8 -60,7 +60,12 @@@
   * bitmap_find_free_region(bitmap, bits, order)	Find and allocate bit region
   * bitmap_release_region(bitmap, pos, order)	Free specified bit region
   * bitmap_allocate_region(bitmap, pos, order)	Allocate specified bit region
++<<<<<<< HEAD
 + * bitmap_from_u32array(dst, nbits, buf, nwords) *dst = *buf (nwords 32b words)
 + * bitmap_to_u32array(buf, nwords, src, nbits)	*buf = *dst (nwords 32b words)
++=======
+  * bitmap_print_to_pagebuf(list, buf, mask, nbits) Print bitmap src as list/hex
++>>>>>>> 5aaba36318e5 (cpumask: factor out show_cpumap into separate helper function)
   */
  
  /*
@@@ -142,19 -141,13 +146,21 @@@ extern void bitmap_onto(unsigned long *
  		const unsigned long *relmap, int bits);
  extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  		int sz, int bits);
 -extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
 -extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
 -extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);
 +extern int bitmap_find_free_region(unsigned long *bitmap, int bits, int order);
 +extern void bitmap_release_region(unsigned long *bitmap, int pos, int order);
 +extern int bitmap_allocate_region(unsigned long *bitmap, int pos, int order);
 +extern unsigned int bitmap_from_u32array(unsigned long *bitmap,
 +					 unsigned int nbits,
 +					 const u32 *buf,
 +					 unsigned int nwords);
 +extern unsigned int bitmap_to_u32array(u32 *buf,
 +				       unsigned int nwords,
 +				       const unsigned long *bitmap,
 +				       unsigned int nbits);
  extern void bitmap_copy_le(void *dst, const unsigned long *src, int nbits);
  extern int bitmap_ord_to_pos(const unsigned long *bitmap, int n, int bits);
+ extern int bitmap_print_to_pagebuf(bool list, char *buf,
+ 				   const unsigned long *maskp, int nmaskbits);
  
  #define BITMAP_FIRST_WORD_MASK(start) (~0UL << ((start) % BITS_PER_LONG))
  #define BITMAP_LAST_WORD_MASK(nbits)					\
diff --cc lib/bitmap.c
index 96d1edc79cde,5bc7a1128fe8..000000000000
--- a/lib/bitmap.c
+++ b/lib/bitmap.c
@@@ -12,9 -12,8 +12,14 @@@
  #include <linux/bitmap.h>
  #include <linux/bitops.h>
  #include <linux/bug.h>
++<<<<<<< HEAD
 +#include <linux/kernel.h>
 +#include <linux/string.h>
 +
++=======
+ 
+ #include <asm/page.h>
++>>>>>>> 5aaba36318e5 (cpumask: factor out show_cpumap into separate helper function)
  #include <asm/uaccess.h>
  
  /*
* Unmerged path arch/x86/kernel/cpu/perf_event_amd_iommu.c
diff --git a/arch/x86/events/amd/uncore.c b/arch/x86/events/amd/uncore.c
index 7ed45bf690a2..74975cdce2e8 100644
--- a/arch/x86/events/amd/uncore.c
+++ b/arch/x86/events/amd/uncore.c
@@ -221,7 +221,6 @@ static ssize_t amd_uncore_attr_show_cpumask(struct device *dev,
 					    struct device_attribute *attr,
 					    char *buf)
 {
-	int n;
 	cpumask_t *active_mask;
 	struct pmu *pmu = dev_get_drvdata(dev);
 
@@ -232,10 +231,7 @@ static ssize_t amd_uncore_attr_show_cpumask(struct device *dev,
 	else
 		return 0;
 
-	n = cpulist_scnprintf(buf, PAGE_SIZE - 2, active_mask);
-	buf[n++] = '\n';
-	buf[n] = '\0';
-	return n;
+	return cpumap_print_to_pagebuf(true, buf, active_mask);
 }
 static DEVICE_ATTR(cpumask, S_IRUGO, amd_uncore_attr_show_cpumask, NULL);
 
diff --git a/arch/x86/events/intel/rapl.c b/arch/x86/events/intel/rapl.c
index a14d9d5f94a3..287a5e9f9f6c 100644
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@ -402,11 +402,7 @@ static void rapl_pmu_event_read(struct perf_event *event)
 static ssize_t rapl_get_attr_cpumask(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
-	int n = cpulist_scnprintf(buf, PAGE_SIZE - 2, &rapl_cpu_mask);
-
-	buf[n++] = '\n';
-	buf[n] = '\0';
-	return n;
+	return cpumap_print_to_pagebuf(true, buf, &rapl_cpu_mask);
 }
 
 static DEVICE_ATTR(cpumask, S_IRUGO, rapl_get_attr_cpumask, NULL);
diff --git a/arch/x86/events/intel/uncore.c b/arch/x86/events/intel/uncore.c
index af13893823fc..28de92dae970 100644
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@ -697,11 +697,7 @@ static int uncore_pmu_event_init(struct perf_event *event)
 static ssize_t uncore_get_attr_cpumask(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
-	int n = cpulist_scnprintf(buf, PAGE_SIZE - 2, &uncore_cpu_mask);
-
-	buf[n++] = '\n';
-	buf[n] = '\0';
-	return n;
+	return cpumap_print_to_pagebuf(true, buf, &uncore_cpu_mask);
 }
 
 static DEVICE_ATTR(cpumask, S_IRUGO, uncore_get_attr_cpumask, NULL);
* Unmerged path arch/x86/kernel/cpu/perf_event_amd_iommu.c
diff --git a/drivers/acpi/acpi_pad.c b/drivers/acpi/acpi_pad.c
index 54c0c178d2da..2b3e3ddf72bd 100644
--- a/drivers/acpi/acpi_pad.c
+++ b/drivers/acpi/acpi_pad.c
@@ -347,12 +347,10 @@ static ssize_t acpi_pad_idlecpus_store(struct device *dev,
 static ssize_t acpi_pad_idlecpus_show(struct device *dev,
 	struct device_attribute *attr, char *buf)
 {
-	int n = 0;
-	n = cpumask_scnprintf(buf, PAGE_SIZE-2, to_cpumask(pad_busy_cpus_bits));
-	buf[n++] = '\n';
-	buf[n] = '\0';
-	return n;
+	return cpumap_print_to_pagebuf(false, buf,
+				       to_cpumask(pad_busy_cpus_bits));
 }
+
 static DEVICE_ATTR(idlecpus, S_IRUGO|S_IWUSR,
 	acpi_pad_idlecpus_show,
 	acpi_pad_idlecpus_store);
diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
index dfc78709efb5..6374edbeb27f 100644
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@ -183,11 +183,8 @@ static ssize_t show_cpus_attr(struct device *dev,
 			      char *buf)
 {
 	struct cpu_attr *ca = container_of(attr, struct cpu_attr, attr);
-	int n = cpulist_scnprintf(buf, PAGE_SIZE-2, *(ca->map));
 
-	buf[n++] = '\n';
-	buf[n] = '\0';
-	return n;
+	return cpumap_print_to_pagebuf(true, buf, *ca->map);
 }
 
 #define _CPU_ATTR(name, map) \
diff --git a/drivers/base/node.c b/drivers/base/node.c
index e53bd8a17b27..e1c5b5f5feff 100644
--- a/drivers/base/node.c
+++ b/drivers/base/node.c
@@ -25,32 +25,26 @@ static struct bus_type node_subsys = {
 };
 
 
-static ssize_t node_read_cpumap(struct device *dev, int type, char *buf)
+static ssize_t node_read_cpumap(struct device *dev, bool list, char *buf)
 {
 	struct node *node_dev = to_node(dev);
 	const struct cpumask *mask = cpumask_of_node(node_dev->dev.id);
-	int len;
 
 	/* 2008/04/07: buf currently PAGE_SIZE, need 9 chars per 32 bits. */
 	BUILD_BUG_ON((NR_CPUS/32 * 9) > (PAGE_SIZE-1));
 
-	len = type?
-		cpulist_scnprintf(buf, PAGE_SIZE-2, mask) :
-		cpumask_scnprintf(buf, PAGE_SIZE-2, mask);
- 	buf[len++] = '\n';
- 	buf[len] = '\0';
-	return len;
+	return cpumap_print_to_pagebuf(list, buf, mask);
 }
 
 static inline ssize_t node_read_cpumask(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
-	return node_read_cpumap(dev, 0, buf);
+	return node_read_cpumap(dev, false, buf);
 }
 static inline ssize_t node_read_cpulist(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
-	return node_read_cpumap(dev, 1, buf);
+	return node_read_cpumap(dev, true, buf);
 }
 
 static DEVICE_ATTR(cpumap,  S_IRUGO, node_read_cpumask, NULL);
* Unmerged path drivers/base/topology.c
diff --git a/drivers/pci/pci-sysfs.c b/drivers/pci/pci-sysfs.c
index 09c0e838fc09..fc27fdb66eb5 100644
--- a/drivers/pci/pci-sysfs.c
+++ b/drivers/pci/pci-sysfs.c
@@ -77,11 +77,10 @@ static ssize_t broken_parity_status_store(struct device *dev,
 }
 static DEVICE_ATTR_RW(broken_parity_status);
 
-static ssize_t pci_dev_show_local_cpu(struct device *dev, int type,
+static ssize_t pci_dev_show_local_cpu(struct device *dev, bool list,
 				      struct device_attribute *attr, char *buf)
 {
 	const struct cpumask *mask;
-	int len;
 
 #ifdef CONFIG_NUMA
 	mask = (dev_to_node(dev) == -1) ? cpu_online_mask :
@@ -89,59 +88,41 @@ static ssize_t pci_dev_show_local_cpu(struct device *dev, int type,
 #else
 	mask = cpumask_of_pcibus(to_pci_dev(dev)->bus);
 #endif
-	len = type ?
-		cpumask_scnprintf(buf, PAGE_SIZE-2, mask) :
-		cpulist_scnprintf(buf, PAGE_SIZE-2, mask);
-
-	buf[len++] = '\n';
-	buf[len] = '\0';
-	return len;
+	return cpumap_print_to_pagebuf(list, buf, mask);
 }
 
 static ssize_t local_cpus_show(struct device *dev,
 			       struct device_attribute *attr, char *buf)
 {
-	return pci_dev_show_local_cpu(dev, 1, attr, buf);
+	return pci_dev_show_local_cpu(dev, false, attr, buf);
 }
 static DEVICE_ATTR_RO(local_cpus);
 
 static ssize_t local_cpulist_show(struct device *dev,
 				  struct device_attribute *attr, char *buf)
 {
-	return pci_dev_show_local_cpu(dev, 0, attr, buf);
+	return pci_dev_show_local_cpu(dev, true, attr, buf);
 }
 static DEVICE_ATTR_RO(local_cpulist);
 
 /*
  * PCI Bus Class Devices
  */
-static ssize_t pci_bus_show_cpuaffinity(struct device *dev, int type,
-					struct device_attribute *attr,
-					char *buf)
-{
-	int ret;
-	const struct cpumask *cpumask;
-
-	cpumask = cpumask_of_pcibus(to_pci_bus(dev));
-	ret = type ?
-		cpulist_scnprintf(buf, PAGE_SIZE-2, cpumask) :
-		cpumask_scnprintf(buf, PAGE_SIZE-2, cpumask);
-	buf[ret++] = '\n';
-	buf[ret] = '\0';
-	return ret;
-}
-
 static ssize_t cpuaffinity_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
-	return pci_bus_show_cpuaffinity(dev, 0, attr, buf);
+	const struct cpumask *cpumask = cpumask_of_pcibus(to_pci_bus(dev));
+
+	return cpumap_print_to_pagebuf(false, buf, cpumask);
 }
 static DEVICE_ATTR_RO(cpuaffinity);
 
 static ssize_t cpulistaffinity_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
-	return pci_bus_show_cpuaffinity(dev, 1, attr, buf);
+	const struct cpumask *cpumask = cpumask_of_pcibus(to_pci_bus(dev));
+
+	return cpumap_print_to_pagebuf(true, buf, cpumask);
 }
 static DEVICE_ATTR_RO(cpulistaffinity);
 
* Unmerged path include/linux/bitmap.h
diff --git a/include/linux/cpumask.h b/include/linux/cpumask.h
index a99fc609e946..ed8a7e2e2981 100644
--- a/include/linux/cpumask.h
+++ b/include/linux/cpumask.h
@@ -798,6 +798,23 @@ static inline const struct cpumask *get_cpu_mask(unsigned int cpu)
 }
 #endif /* NR_CPUS > BITS_PER_LONG */
 
+/**
+ * cpumap_print_to_pagebuf  - copies the cpumask into the buffer either
+ *	as comma-separated list of cpus or hex values of cpumask
+ * @list: indicates whether the cpumap must be list
+ * @mask: the cpumask to copy
+ * @buf: the buffer to copy into
+ *
+ * Returns the length of the (null-terminated) @buf string, zero if
+ * nothing is copied.
+ */
+static inline ssize_t
+cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
+{
+	return bitmap_print_to_pagebuf(list, buf, cpumask_bits(mask),
+				      nr_cpumask_bits);
+}
+
 /*
  *
  * From here down, all obsolete.  Use cpumask_ variants!
* Unmerged path lib/bitmap.c
