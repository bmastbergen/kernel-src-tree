selinux: do not report error on connect(AF_UNSPEC)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.11.1.el7
commit-author Paolo Abeni <pabeni@redhat.com>
commit c7e0d6cca86581092cbbf2cd868b3601495554cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.11.1.el7/c7e0d6cc.failed

calling connect(AF_UNSPEC) on an already connected TCP socket is an
established way to disconnect() such socket. After commit 68741a8adab9
("selinux: Fix ltp test connect-syscall failure") it no longer works
and, in the above scenario connect() fails with EAFNOSUPPORT.

Fix the above falling back to the generic/old code when the address family
is not AF_INET{4,6}, but leave the SCTP code path untouched, as it has
specific constraints.

Fixes: 68741a8adab9 ("selinux: Fix ltp test connect-syscall failure")
	Reported-by: Tom Deseyn <tdeseyn@redhat.com>
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c7e0d6cca86581092cbbf2cd868b3601495554cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/selinux/hooks.c
diff --cc security/selinux/hooks.c
index ebedbe48165f,d82b87c16b0a..000000000000
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@@ -4403,10 -4649,18 +4403,10 @@@ static int selinux_socket_connect(struc
  		struct lsm_network_audit net = {0,};
  		struct sockaddr_in *addr4 = NULL;
  		struct sockaddr_in6 *addr6 = NULL;
- 		unsigned short snum;
+ 		unsigned short snum = 0;
  		u32 sid, perm;
  
 -		/* sctp_connectx(3) calls via selinux_sctp_bind_connect()
 -		 * that validates multiple connect addresses. Because of this
 -		 * need to check address->sa_family as it is possible to have
 -		 * sk->sk_family = PF_INET6 with addr->sa_family = AF_INET.
 -		 */
 -		if (addrlen < offsetofend(struct sockaddr, sa_family))
 -			return -EINVAL;
 -		switch (address->sa_family) {
 -		case AF_INET:
 +		if (sk->sk_family == PF_INET) {
  			addr4 = (struct sockaddr_in *)address;
  			if (addrlen < sizeof(struct sockaddr_in))
  				return -EINVAL;
@@@ -4416,6 -4671,15 +4416,18 @@@
  			if (addrlen < SIN6_LEN_RFC2133)
  				return -EINVAL;
  			snum = ntohs(addr6->sin6_port);
++<<<<<<< HEAD
++=======
+ 			break;
+ 		default:
+ 			/* Note that SCTP services expect -EINVAL, whereas
+ 			 * others must handle this at the protocol level:
+ 			 * connect(AF_UNSPEC) on a connected socket is
+ 			 * a documented way disconnect the socket.
+ 			 */
+ 			if (sksec->sclass == SECCLASS_SCTP_SOCKET)
+ 				return -EINVAL;
++>>>>>>> c7e0d6cca865 (selinux: do not report error on connect(AF_UNSPEC))
  		}
  
  		err = sel_netport_sid(sk->sk_protocol, snum, &sid);
* Unmerged path security/selinux/hooks.c
