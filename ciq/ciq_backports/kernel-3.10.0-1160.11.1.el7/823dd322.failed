signals: avoid random wakeups in sigsuspend()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.11.1.el7
commit-author Sasha Levin <sasha.levin@oracle.com>
commit 823dd3224a07f618d652a7743c9603222d019de3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.11.1.el7/823dd322.failed

A random wakeup can get us out of sigsuspend() without TIF_SIGPENDING
being set.

Avoid that by making sure we were signaled, like sys_pause() does.

	Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
	Acked-by: Oleg Nesterov <oleg@redhat.com>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 823dd3224a07f618d652a7743c9603222d019de3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/signal.c
diff --cc kernel/signal.c
index 96b7b334c4c2,0508544c8ced..000000000000
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@@ -3584,8 -3508,10 +3584,15 @@@ int sigsuspend(sigset_t *set
  	current->saved_sigmask = current->blocked;
  	set_current_blocked(set);
  
++<<<<<<< HEAD
 +	current->state = TASK_INTERRUPTIBLE;
 +	schedule();
++=======
+ 	while (!signal_pending(current)) {
+ 		__set_current_state(TASK_INTERRUPTIBLE);
+ 		schedule();
+ 	}
++>>>>>>> 823dd3224a07 (signals: avoid random wakeups in sigsuspend())
  	set_restore_sigmask();
  	return -ERESTARTNOHAND;
  }
* Unmerged path kernel/signal.c
