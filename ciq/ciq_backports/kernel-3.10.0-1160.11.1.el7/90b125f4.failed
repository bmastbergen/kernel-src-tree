hv_utils: return error if host timesysnc update is stale

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.11.1.el7
commit-author Vineeth Pillai <viremana@linux.microsoft.com>
commit 90b125f4cd2697f949f5877df723a0b710693dd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.11.1.el7/90b125f4.failed

If for any reason, host timesync messages were not processed by
the guest, hv_ptp_gettime() returns a stale value and the
caller (clock_gettime, PTP ioctl etc) has no means to know this
now. Return an error so that the caller knows about this.

	Signed-off-by: Vineeth Pillai <viremana@linux.microsoft.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
Link: https://lore.kernel.org/r/20200821152523.99364-1-viremana@linux.microsoft.com
	Signed-off-by: Wei Liu <wei.liu@kernel.org>
(cherry picked from commit 90b125f4cd2697f949f5877df723a0b710693dd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/hv_util.c
diff --cc drivers/hv/hv_util.c
index 1594361268b7,1f86e8d9b018..000000000000
--- a/drivers/hv/hv_util.c
+++ b/drivers/hv/hv_util.c
@@@ -215,26 -282,52 +215,64 @@@ static struct 
  	spinlock_t			lock;
  } host_ts;
  
- static struct timespec64 hv_get_adj_host_time(void)
+ static inline u64 reftime_to_ns(u64 reftime)
  {
- 	struct timespec64 ts;
- 	u64 newtime, reftime;
+ 	return (reftime - WLTIMEDELTA) * 100;
+ }
+ 
+ /*
+  * Hard coded threshold for host timesync delay: 600 seconds
+  */
+ static const u64 HOST_TIMESYNC_DELAY_THRESH = 600 * (u64)NSEC_PER_SEC;
+ 
+ static int hv_get_adj_host_time(struct timespec64 *ts)
+ {
+ 	u64 newtime, reftime, timediff_adj;
  	unsigned long flags;
+ 	int ret = 0;
  
  	spin_lock_irqsave(&host_ts.lock, flags);
++<<<<<<< HEAD
 +	reftime = hyperv_cs->read(hyperv_cs);
 +	newtime = host_ts.host_time + (reftime - host_ts.ref_time);
 +	ts = ns_to_timespec64((newtime - WLTIMEDELTA) * 100);
++=======
+ 	reftime = hv_read_reference_counter();
+ 
+ 	/*
+ 	 * We need to let the caller know that last update from host
+ 	 * is older than the max allowable threshold. clock_gettime()
+ 	 * and PTP ioctl do not have a documented error that we could
+ 	 * return for this specific case. Use ESTALE to report this.
+ 	 */
+ 	timediff_adj = reftime - host_ts.ref_time;
+ 	if (timediff_adj * 100 > HOST_TIMESYNC_DELAY_THRESH) {
+ 		pr_warn_once("TIMESYNC IC: Stale time stamp, %llu nsecs old\n",
+ 			     (timediff_adj * 100));
+ 		ret = -ESTALE;
+ 	}
+ 
+ 	newtime = host_ts.host_time + timediff_adj;
+ 	*ts = ns_to_timespec64(reftime_to_ns(newtime));
++>>>>>>> 90b125f4cd26 (hv_utils: return error if host timesysnc update is stale)
  	spin_unlock_irqrestore(&host_ts.lock, flags);
  
- 	return ts;
+ 	return ret;
  }
  
  static void hv_set_host_time(struct work_struct *work)
  {
++<<<<<<< HEAD
 +	struct timespec ts = timespec64_to_timespec(hv_get_adj_host_time());
 +
 +	do_settimeofday(&ts);
++=======
+ 
+ 	struct timespec64 ts;
+ 
+ 	if (!hv_get_adj_host_time(&ts))
+ 		do_settimeofday64(&ts);
++>>>>>>> 90b125f4cd26 (hv_utils: return error if host timesysnc update is stale)
  }
  
  /*
* Unmerged path drivers/hv/hv_util.c
