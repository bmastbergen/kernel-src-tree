x86/cpu: Re-apply forced caps every time CPU caps are re-read

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.11.1.el7
Rebuild_CHGLOG: - [x86] cpu: Re-apply forced caps every time CPU caps are re-read (Herbert Xu) [1886792]
Rebuild_FUZZ: 96.61%
commit-author Andy Lutomirski <luto@kernel.org>
commit 60d3450167433f2d099ce2869dc52dd9e7dc9b29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.11.1.el7/60d34501.failed

Calling get_cpu_cap() will reset a bunch of CPU features.  This will
cause the system to lose track of force-set and force-cleared
features in the words that are reset until the end of CPU
initialization.  This can cause X86_FEATURE_FPU, for example, to
change back and forth during boot and potentially confuse CPU setup.

To minimize the chance of confusion, re-apply forced caps every time
get_cpu_cap() is called.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Fenghua Yu <fenghua.yu@intel.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Matthew Whitehead <tedheadster@gmail.com>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: One Thousand Gnomes <gnomes@lxorguk.ukuu.org.uk>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Yu-cheng Yu <yu-cheng.yu@intel.com>
Link: http://lkml.kernel.org/r/c817eb373d2c67c2c81413a70fc9b845fa34a37e.1484705016.git.luto@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 60d3450167433f2d099ce2869dc52dd9e7dc9b29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/kernel/cpu/common.c
index 1970e49705e0,d09b5eefaddf..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -866,13 -753,18 +866,23 @@@ void get_cpu_cap(struct cpuinfo_x86 *c
  	else if (cpu_has(c, X86_FEATURE_PAE) || cpu_has(c, X86_FEATURE_PSE36))
  		c->x86_phys_bits = 36;
  #endif
 +	c->x86_cache_bits = c->x86_phys_bits;
  
  	if (c->extended_cpuid_level >= 0x8000000a)
 -		c->x86_capability[CPUID_8000_000A_EDX] = cpuid_edx(0x8000000a);
 +		c->x86_capability[15] = cpuid_edx(0x8000000a);
  
  	init_scattered_cpuid_features(c);
++<<<<<<< HEAD
 +	init_speculation_control(c);
++=======
+ 
+ 	/*
+ 	 * Clear/Set all flags overridden by options, after probe.
+ 	 * This needs to happen each time we re-probe, which may happen
+ 	 * several times during CPU initialization.
+ 	 */
+ 	apply_forced_caps(c);
++>>>>>>> 60d345016743 (x86/cpu: Re-apply forced caps every time CPU caps are re-read)
  }
  
  static void identify_cpu_without_cpuid(struct cpuinfo_x86 *c)
* Unmerged path arch/x86/kernel/cpu/common.c
