cfg80211: Add airtime statistics and settings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Toke Høiland-Jørgensen <toke@toke.dk>
commit 36647055b37ec78e9068f470f14e7cd75c001c22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/36647055.failed

This adds TX airtime statistics to the cfg80211 station dump (to go along
with the RX info already present), and adds a new parameter to set the
airtime weight of each station. The latter allows userspace to implement
policies for different stations by varying their weights.

	Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
[rmanohar@codeaurora.org: fixed checkpatch warnings]
	Signed-off-by: Rajkumar Manoharan <rmanohar@codeaurora.org>
[move airtime weight != 0 check into policy]
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 36647055b37ec78e9068f470f14e7cd75c001c22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/cfg80211.h
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/net/cfg80211.h
index 9ad648f1a4c8,1691f52fcc80..000000000000
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@@ -1065,7 -1034,6 +1065,10 @@@ struct station_parameters 
  	const struct ieee80211_he_cap_elem *he_capa;
  	u8 he_capa_len;
  	u16 airtime_weight;
++<<<<<<< HEAD
 +	struct sta_txpwr txpwr;
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
  };
  
  /**
diff --cc include/uapi/linux/nl80211.h
index 8610fabba005,ebe79e12c82e..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2332,15 -2302,6 +2332,18 @@@ enum nl80211_commands 
   * @NL80211_ATTR_AIRTIME_WEIGHT: Station's weight when scheduled by the airtime
   *	scheduler.
   *
++<<<<<<< HEAD
 + * @NL80211_ATTR_STA_TX_POWER_SETTING: Transmit power setting type (u8) for
 + *	station associated with the AP. See &enum nl80211_tx_power_setting for
 + *	possible values.
 + * @NL80211_ATTR_STA_TX_POWER: Transmit power level (s16) in dBm units. This
 + *	allows to set Tx power for a station. If this attribute is not included,
 + *	the default per-interface tx power setting will be overriding. Driver
 + *	should be picking up the lowest tx power, either tx power per-interface
 + *	or per-station.
 + *
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -2791,8 -2752,6 +2794,11 @@@ enum nl80211_attrs 
  	NL80211_ATTR_PEER_MEASUREMENTS,
  
  	NL80211_ATTR_AIRTIME_WEIGHT,
++<<<<<<< HEAD
 +	NL80211_ATTR_STA_TX_POWER_SETTING,
 +	NL80211_ATTR_STA_TX_POWER,
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
  
  	/* add attributes here, update the policy in nl80211.c */
  
@@@ -3174,7 -3133,6 +3180,10 @@@ enum nl80211_sta_bss_param 
   * @NL80211_STA_INFO_TX_DURATION: aggregate PPDU duration for all frames
   *	sent to the station (u64, usec)
   * @NL80211_STA_INFO_AIRTIME_WEIGHT: current airtime weight for station (u16)
++<<<<<<< HEAD
 + * @NL80211_STA_INFO_AIRTIME_LINK_METRIC: airtime link metric for mesh station
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
   * @__NL80211_STA_INFO_AFTER_LAST: internal
   * @NL80211_STA_INFO_MAX: highest possible station info attribute
   */
@@@ -3220,7 -3178,6 +3229,10 @@@ enum nl80211_sta_info 
  	NL80211_STA_INFO_CONNECTED_TO_GATE,
  	NL80211_STA_INFO_TX_DURATION,
  	NL80211_STA_INFO_AIRTIME_WEIGHT,
++<<<<<<< HEAD
 +	NL80211_STA_INFO_AIRTIME_LINK_METRIC,
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
  
  	/* keep last */
  	__NL80211_STA_INFO_AFTER_LAST,
@@@ -5386,15 -5330,6 +5398,18 @@@ enum nl80211_feature_flags 
   *	fairness for transmitted packets and has enabled airtime fairness
   *	scheduling.
   *
++<<<<<<< HEAD
 + * @NL80211_EXT_FEATURE_AP_PMKSA_CACHING: Driver/device supports PMKSA caching
 + *	(set/del PMKSA operations) in AP mode.
 + *
 + * @NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD: Driver supports
 + *	filtering of sched scan results using band specific RSSI thresholds.
 + *
 + * @NL80211_EXT_FEATURE_STA_TX_PWR: This driver supports controlling tx power
 + *	to a station.
 + *
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
   * @NUM_NL80211_EXT_FEATURES: number of extended features.
   * @MAX_NL80211_EXT_FEATURES: highest extended feature index.
   */
@@@ -5435,9 -5370,6 +5450,12 @@@ enum nl80211_ext_feature_index 
  	NL80211_EXT_FEATURE_CAN_REPLACE_PTK0,
  	NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER,
  	NL80211_EXT_FEATURE_AIRTIME_FAIRNESS,
++<<<<<<< HEAD
 +	NL80211_EXT_FEATURE_AP_PMKSA_CACHING,
 +	NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD,
 +	NL80211_EXT_FEATURE_STA_TX_PWR,
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
  
  	/* add new features before the definition below */
  	NUM_NL80211_EXT_FEATURES,
diff --cc net/wireless/nl80211.c
index 36e2c57647f1,a89688929b16..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -508,9 -555,9 +508,15 @@@ const struct nla_policy nl80211_policy[
  	},
  	[NL80211_ATTR_TIMEOUT] = NLA_POLICY_MIN(NLA_U32, 1),
  	[NL80211_ATTR_PEER_MEASUREMENTS] =
++<<<<<<< HEAD
 +		NLA_POLICY_NESTED(nl80211_pmsr_attr_policy),
 +	[NL80211_ATTR_AIRTIME_WEIGHT] = NLA_POLICY_MIN(NLA_U16, 1),
 +#endif /* Not in RHEL */
++=======
+ 		NLA_POLICY_NESTED(NL80211_PMSR_FTM_REQ_ATTR_MAX,
+ 				  nl80211_pmsr_attr_policy),
+ 	[NL80211_ATTR_AIRTIME_WEIGHT] = NLA_POLICY_MIN(NLA_U16, 1),
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
  };
  
  /* policy for the key attributes */
@@@ -5604,10 -5485,6 +5610,13 @@@ static int nl80211_set_station(struct s
  				     NL80211_EXT_FEATURE_AIRTIME_FAIRNESS))
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	err = nl80211_parse_sta_txpower_setting(info, &params);
 +	if (err)
 +		return err;
 +
++=======
++>>>>>>> 36647055b37e (cfg80211: Add airtime statistics and settings)
  	/* Include parameters for TDLS peer (will check later) */
  	err = nl80211_set_station_tdls(info, &params);
  	if (err)
@@@ -5739,26 -5609,19 +5748,35 @@@ static int nl80211_new_station(struct s
  			nla_get_u8(info->attrs[NL80211_ATTR_OPMODE_NOTIF]);
  	}
  
 -	if (info->attrs[NL80211_ATTR_STA_PLINK_ACTION])
 +	if (info->attrs[NL80211_ATTR_STA_PLINK_ACTION]) {
  		params.plink_action =
  			nla_get_u8(info->attrs[NL80211_ATTR_STA_PLINK_ACTION]);
 +		if (params.plink_action >= NUM_NL80211_PLINK_ACTIONS)
 +			return -EINVAL;
 +	}
 +
 +	if (info->attrs[NL80211_ATTR_AIRTIME_WEIGHT])
 +		params.airtime_weight =
 +			nla_get_u16(info->attrs[NL80211_ATTR_AIRTIME_WEIGHT]);
 +
 +	if (params.airtime_weight &&
 +	    !wiphy_ext_feature_isset(&rdev->wiphy,
 +				     NL80211_EXT_FEATURE_AIRTIME_FAIRNESS))
 +		return -EOPNOTSUPP;
 +
 +	err = nl80211_parse_sta_txpower_setting(info, &params);
 +	if (err)
 +		return err;
  
+ 	if (info->attrs[NL80211_ATTR_AIRTIME_WEIGHT])
+ 		params.airtime_weight =
+ 			nla_get_u16(info->attrs[NL80211_ATTR_AIRTIME_WEIGHT]);
+ 
+ 	if (params.airtime_weight &&
+ 	    !wiphy_ext_feature_isset(&rdev->wiphy,
+ 				     NL80211_EXT_FEATURE_AIRTIME_FAIRNESS))
+ 		return -EOPNOTSUPP;
+ 
  	err = nl80211_parse_sta_channel_info(info, &params);
  	if (err)
  		return err;
* Unmerged path include/net/cfg80211.h
* Unmerged path include/uapi/linux/nl80211.h
* Unmerged path net/wireless/nl80211.c
