dax: Remove optimisation from dax_lock_mapping_entry

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Matthew Wilcox <willy@infradead.org>
commit 6d7cd8c1373746a93dc868ee9d38a82df78b38aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/6d7cd8c1.failed

Skipping some of the revalidation after we sleep can lead to returning
a mapping which has already been freed.  Just drop this optimisation.

	Reported-by: Dan Williams <dan.j.williams@intel.com>
Fixes: 9f32d221301c ("dax: Convert dax_lock_mapping_entry to XArray")
	Signed-off-by: Matthew Wilcox <willy@infradead.org>
(cherry picked from commit 6d7cd8c1373746a93dc868ee9d38a82df78b38aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
diff --cc fs/dax.c
index 29113658577c,529ac9d7c10a..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -523,37 -370,26 +523,45 @@@ bool dax_lock_mapping_entry(struct pag
  		 * otherwise we would not have a valid pfn_to_page()
  		 * translation.
  		 */
 -		if (S_ISCHR(mapping->host->i_mode))
 -			return true;
 +		inode = mapping->host;
 +		if (S_ISCHR(inode->i_mode)) {
 +			did_lock = true;
 +			break;
 +		}
  
 -		xas.xa = &mapping->i_pages;
 -		xas_lock_irq(&xas);
 +		xa_lock_irq(&mapping->i_pages);
  		if (mapping != page->mapping) {
 -			xas_unlock_irq(&xas);
 +			xa_unlock_irq(&mapping->i_pages);
  			continue;
  		}
++<<<<<<< HEAD
 +		index = page->index;
 +
 +		entry = __get_unlocked_mapping_entry(mapping, index, &slot,
 +				entry_wait_revalidate);
 +		if (!entry) {
 +			xa_unlock_irq(&mapping->i_pages);
 +			break;
 +		} else if (IS_ERR(entry)) {
 +			xa_unlock_irq(&mapping->i_pages);
 +			WARN_ON_ONCE(PTR_ERR(entry) != -EAGAIN);
++=======
+ 		xas_set(&xas, page->index);
+ 		entry = xas_load(&xas);
+ 		if (dax_is_locked(entry)) {
+ 			entry = get_unlocked_entry(&xas);
+ 			xas_unlock_irq(&xas);
++>>>>>>> 6d7cd8c13737 (dax: Remove optimisation from dax_lock_mapping_entry)
  			continue;
  		}
 -		dax_lock_entry(&xas, entry);
 -		xas_unlock_irq(&xas);
 -		return true;
 +		lock_slot(mapping, slot);
 +		did_lock = true;
 +		xa_unlock_irq(&mapping->i_pages);
 +		break;
  	}
 +	rcu_read_unlock();
 +
 +	return did_lock;
  }
  
  void dax_unlock_mapping_entry(struct page *page)
* Unmerged path fs/dax.c
