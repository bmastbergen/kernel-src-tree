cpuidle: teo: Avoid using "early hits" incorrectly

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [cpuidle] teo: Avoid using "early hits" incorrectly (Al Stone) [1725618]
Rebuild_FUZZ: 90.11%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 63f202e5edf161c2ccffa286a9a701e995427b15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/63f202e5.failed

If the current state with the maximum "early hits" metric in
teo_select() is also the one "matching" the expected idle duration,
it will be used as the candidate one for selection even if its
"misses" metric is greater than its "hits" metric, which is not
correct.

In that case, the candidate state should be shallower than the
current one and its "early hits" metric should be the maximum
among the idle states shallower than the current one.

To make that happen, modify teo_select() to save the index of
the state whose "early hits" metric is the maximum for the
range of states below the current one and go back to that state
if it turns out that the current one should be rejected.

Fixes: 159e48560f51 ("cpuidle: teo: Fix "early hits" handling for disabled idle states")
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 63f202e5edf161c2ccffa286a9a701e995427b15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpuidle/governors/teo.c
diff --cc drivers/cpuidle/governors/teo.c
index b9b9156618e6,f5dfeed77f0a..000000000000
--- a/drivers/cpuidle/governors/teo.c
+++ b/drivers/cpuidle/governors/teo.c
@@@ -232,9 -236,10 +232,16 @@@ static int teo_select(struct cpuidle_dr
  		      bool *stop_tick)
  {
  	struct teo_cpu *cpu_data = per_cpu_ptr(&teo_cpus, dev->cpu);
++<<<<<<< HEAD
 +	int latency_req = cpuidle_governor_latency_req(dev->cpu);
 +	unsigned int duration_us, hits, misses, early_hits;
 +	int max_early_idx, constraint_idx, idx, i;
++=======
+ 	s64 latency_req = cpuidle_governor_latency_req(dev->cpu);
+ 	u64 duration_ns;
+ 	unsigned int hits, misses, early_hits;
+ 	int max_early_idx, prev_max_early_idx, constraint_idx, idx, i;
++>>>>>>> 63f202e5edf1 (cpuidle: teo: Avoid using "early hits" incorrectly)
  	ktime_t delta_tick;
  
  	if (dev->last_state_idx >= 0) {
@@@ -302,7 -307,8 +310,12 @@@
  			 * shallow for that role.
  			 */
  			if (!(tick_nohz_tick_stopped() &&
++<<<<<<< HEAD
 +			      drv->states[idx].target_residency < TICK_USEC)) {
++=======
+ 			      drv->states[idx].target_residency_ns < TICK_NSEC)) {
+ 				prev_max_early_idx = max_early_idx;
++>>>>>>> 63f202e5edf1 (cpuidle: teo: Avoid using "early hits" incorrectly)
  				early_hits = cpu_data->states[i].early_hits;
  				max_early_idx = idx;
  			}
@@@ -328,7 -334,8 +341,12 @@@
  
  		if (early_hits < cpu_data->states[i].early_hits &&
  		    !(tick_nohz_tick_stopped() &&
++<<<<<<< HEAD
 +		      drv->states[i].target_residency < TICK_USEC)) {
++=======
+ 		      drv->states[i].target_residency_ns < TICK_NSEC)) {
+ 			prev_max_early_idx = max_early_idx;
++>>>>>>> 63f202e5edf1 (cpuidle: teo: Avoid using "early hits" incorrectly)
  			early_hits = cpu_data->states[i].early_hits;
  			max_early_idx = i;
  		}
@@@ -342,9 -349,19 +360,25 @@@
  	 * "early hits" metric, but if that cannot be determined, just use the
  	 * state selected so far.
  	 */
++<<<<<<< HEAD
 +	if (hits <= misses && max_early_idx >= 0) {
 +		idx = max_early_idx;
 +		duration_us = drv->states[idx].target_residency;
++=======
+ 	if (hits <= misses) {
+ 		/*
+ 		 * The current candidate state is not suitable, so take the one
+ 		 * whose "early hits" metric is the maximum for the range of
+ 		 * shallower states.
+ 		 */
+ 		if (idx == max_early_idx)
+ 			max_early_idx = prev_max_early_idx;
+ 
+ 		if (max_early_idx >= 0) {
+ 			idx = max_early_idx;
+ 			duration_ns = drv->states[idx].target_residency_ns;
+ 		}
++>>>>>>> 63f202e5edf1 (cpuidle: teo: Avoid using "early hits" incorrectly)
  	}
  
  	/*
* Unmerged path drivers/cpuidle/governors/teo.c
