iommu/vt-d: Setup context and enable RID2PASID support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [iommu] vt-d: Setup context and enable RID2PASID support (Jerry Snitselaar) [1742234]
Rebuild_FUZZ: 94.12%
commit-author Lu Baolu <baolu.lu@linux.intel.com>
commit 7373a8cc381978cfafa4b0285cdd935682f1b2d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7373a8cc.failed

This patch enables the translation for requests without PASID in
the scalable mode by setting up the root and context entries.

	Cc: Ashok Raj <ashok.raj@intel.com>
	Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Cc: Kevin Tian <kevin.tian@intel.com>
	Signed-off-by: Sanjay Kumar <sanjay.k.kumar@intel.com>
	Signed-off-by: Liu Yi L <yi.l.liu@intel.com>
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
	Reviewed-by: Ashok Raj <ashok.raj@intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 7373a8cc381978cfafa4b0285cdd935682f1b2d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel-iommu.c
#	drivers/iommu/intel-pasid.h
diff --cc drivers/iommu/intel-iommu.c
index 123eb1289ade,21a6853290cc..000000000000
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@@ -5263,23 -5257,16 +5340,27 @@@ static void intel_iommu_put_resv_region
  }
  
  #ifdef CONFIG_INTEL_IOMMU_SVM
++<<<<<<< HEAD
 +#define MAX_NR_PASID_BITS (20)
 +static inline unsigned long intel_iommu_get_pts(struct intel_iommu *iommu)
++=======
+ static inline unsigned long intel_iommu_get_pts(struct device *dev)
++>>>>>>> 7373a8cc3819 (iommu/vt-d: Setup context and enable RID2PASID support)
  {
 -	int pts, max_pasid;
 -
 -	max_pasid = intel_pasid_get_dev_max_id(dev);
 -	pts = find_first_bit((unsigned long *)&max_pasid, MAX_NR_PASID_BITS);
 -	if (pts < 5)
 +	/*
 +	 * Convert ecap_pss to extend context entry pts encoding, also
 +	 * respect the soft pasid_max value set by the iommu.
 +	 * - number of PASID bits = ecap_pss + 1
 +	 * - number of PASID table entries = 2^(pts + 5)
 +	 * Therefore, pts = ecap_pss - 4
 +	 * e.g. KBL ecap_pss = 0x13, PASID has 20 bits, pts = 15
 +	 */
 +	if (ecap_pss(iommu->ecap) < 5)
  		return 0;
  
 -	return pts - 5;
 +	/* pasid_max is encoded as actual number of entries not the bits */
 +	return find_first_bit((unsigned long *)&iommu->pasid_max,
 +			MAX_NR_PASID_BITS) - 5;
  }
  
  int intel_iommu_enable_pasid(struct intel_iommu *iommu, struct intel_svm_dev *sdev)
diff --cc drivers/iommu/intel-pasid.h
index 7aa7e4a635a7,55bb8715329d..000000000000
--- a/drivers/iommu/intel-pasid.h
+++ b/drivers/iommu/intel-pasid.h
@@@ -12,10 -12,25 +12,29 @@@
  
  #define PASID_RID2PASID			0x0
  #define PASID_MIN			0x1
++<<<<<<< HEAD
 +#define PASID_MAX			0x20000
++=======
+ #define PASID_MAX			0x100000
+ #define PASID_PTE_MASK			0x3F
+ #define PASID_PTE_PRESENT		1
+ #define PDE_PFN_MASK			PAGE_MASK
+ #define PASID_PDE_SHIFT			6
+ #define MAX_NR_PASID_BITS		20
+ 
+ /*
+  * Domain ID reserved for pasid entries programmed for first-level
+  * only and pass-through transfer modes.
+  */
+ #define FLPT_DEFAULT_DID		1
+ 
+ struct pasid_dir_entry {
+ 	u64 val;
+ };
++>>>>>>> 7373a8cc3819 (iommu/vt-d: Setup context and enable RID2PASID support)
  
  struct pasid_entry {
 -	u64 val[8];
 +	u64 val;
  };
  
  /* The representative of a PASID table */
* Unmerged path drivers/iommu/intel-iommu.c
* Unmerged path drivers/iommu/intel-pasid.h
diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h
index d83908420a83..0bff03309822 100644
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@ -232,6 +232,7 @@
 
 /* DMA_RTADDR_REG */
 #define DMA_RTADDR_RTT (((u64)1) << 11)
+#define DMA_RTADDR_SMT (((u64)1) << 10)
 
 /* CCMD_REG */
 #define DMA_CCMD_ICC (((u64)1) << 63)
