bpf: verifier: avoid fall-through warnings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Gustavo A. R. Silva <gustavo@embeddedor.com>
commit ed4ed4043a127c5ca9a35339bb614693be9037a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ed4ed404.failed

In preparation to enabling -Wimplicit-fallthrough, this patch silences
the following warning:

kernel/bpf/verifier.c: In function ‘check_return_code’:
kernel/bpf/verifier.c:6106:6: warning: this statement may fall through [-Wimplicit-fallthrough=]
   if (env->prog->expected_attach_type == BPF_CGROUP_UDP4_RECVMSG ||
      ^
kernel/bpf/verifier.c:6109:2: note: here
  case BPF_PROG_TYPE_CGROUP_SKB:
  ^~~~

Warning level 3 was used: -Wimplicit-fallthrough=3

Notice that is much clearer to explicitly add breaks in each case
statement (that actually contains some code), rather than letting
the code to fall through.

This patch is part of the ongoing efforts to enable
-Wimplicit-fallthrough.

	Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit ed4ed4043a127c5ca9a35339bb614693be9037a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index ad85dde4d9de,5900cbb966b1..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -6017,15 -6099,22 +6017,24 @@@ static int check_return_code(struct bpf
  	struct tnum range = tnum_range(0, 1);
  
  	switch (env->prog->type) {
++<<<<<<< HEAD
++=======
+ 	case BPF_PROG_TYPE_CGROUP_SOCK_ADDR:
+ 		if (env->prog->expected_attach_type == BPF_CGROUP_UDP4_RECVMSG ||
+ 		    env->prog->expected_attach_type == BPF_CGROUP_UDP6_RECVMSG)
+ 			range = tnum_range(1, 1);
+ 		break;
++>>>>>>> ed4ed4043a12 (bpf: verifier: avoid fall-through warnings)
  	case BPF_PROG_TYPE_CGROUP_SKB:
  		if (env->prog->expected_attach_type == BPF_CGROUP_INET_EGRESS) {
  			range = tnum_range(0, 3);
  			enforce_attach_type_range = tnum_range(2, 3);
  		}
+ 		break;
  	case BPF_PROG_TYPE_CGROUP_SOCK:
 +	case BPF_PROG_TYPE_CGROUP_SOCK_ADDR:
  	case BPF_PROG_TYPE_SOCK_OPS:
  	case BPF_PROG_TYPE_CGROUP_DEVICE:
 -	case BPF_PROG_TYPE_CGROUP_SYSCTL:
 -	case BPF_PROG_TYPE_CGROUP_SOCKOPT:
  		break;
  	default:
  		return 0;
* Unmerged path kernel/bpf/verifier.c
