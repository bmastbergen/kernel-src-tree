ceph: don't try to handle hashed dentries in non-O_CREAT atomic_open

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jeff Layton <jlayton@kernel.org>
commit 5bb5e6ee6f5c557dcd19822eccd7bcced1e1a410
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5bb5e6ee.failed

If ceph_atomic_open is handed a !d_in_lookup dentry, then that means
that it already passed d_revalidate so we *know* that it's negative (or
at least was very recently). Just return -ENOENT in that case.

This also addresses a subtle bug in dentry handling. Non-O_CREAT opens
call atomic_open with the parent's i_rwsem shared, but calling
d_splice_alias on a hashed dentry requires the exclusive lock.

If ceph_atomic_open receives a hashed, negative dentry on a non-O_CREAT
open, and another client were to race in and create the file before we
issue our OPEN, ceph_fill_trace could end up calling d_splice_alias on
the dentry with the new inode with insufficient locks.

	Cc: stable@vger.kernel.org
	Reported-by: Al Viro <viro@zeniv.linux.org.uk>
	Signed-off-by: Jeff Layton <jlayton@kernel.org>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 5bb5e6ee6f5c557dcd19822eccd7bcced1e1a410)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/file.c
diff --cc fs/ceph/file.c
index 83531d0ace3a,d2854cd2f4f5..000000000000
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@@ -453,9 -456,15 +453,18 @@@ int ceph_atomic_open(struct inode *dir
  	if (flags & O_CREAT) {
  		if (ceph_quota_is_max_files_exceeded(dir))
  			return -EDQUOT;
 -		err = ceph_pre_init_acls(dir, &mode, &as_ctx);
 +		err = ceph_pre_init_acls(dir, &mode, &acls);
  		if (err < 0)
  			return err;
++<<<<<<< HEAD
++=======
+ 		err = ceph_security_init_secctx(dentry, mode, &as_ctx);
+ 		if (err < 0)
+ 			goto out_ctx;
+ 	} else if (!d_in_lookup(dentry)) {
+ 		/* If it's not being looked up, it's negative */
+ 		return -ENOENT;
++>>>>>>> 5bb5e6ee6f5c (ceph: don't try to handle hashed dentries in non-O_CREAT atomic_open)
  	}
  
  	/* do the open */
* Unmerged path fs/ceph/file.c
