net: cls_bpf: fix NULL deref on offload filter removal

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] cls_bpf: fix NULL deref on offload filter removal (Ivan Vecera) [1739606]
Rebuild_FUZZ: 95.15%
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 41aa29a58b5f7f7be43f35372ef411f304a87a0d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/41aa29a5.failed

Commit 401192113730 ("net: sched: refactor block offloads counter
usage") missed the fact that either new prog or old prog may be
NULL.

Fixes: 401192113730 ("net: sched: refactor block offloads counter usage")
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 41aa29a58b5f7f7be43f35372ef411f304a87a0d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_bpf.c
diff --cc net/sched/cls_bpf.c
index ff1deece0104,8229ed4a67be..000000000000
--- a/net/sched/cls_bpf.c
+++ b/net/sched/cls_bpf.c
@@@ -168,18 -162,24 +168,35 @@@ static int cls_bpf_offload_cmd(struct t
  	cls_bpf.name = obj->bpf_name;
  	cls_bpf.exts_integrated = obj->exts_integrated;
  
++<<<<<<< HEAD
 +	if (oldprog)
 +		tcf_block_offload_dec(block, &oldprog->gen_flags);
++=======
+ 	if (oldprog && prog)
+ 		err = tc_setup_cb_replace(block, tp, TC_SETUP_CLSBPF, &cls_bpf,
+ 					  skip_sw, &oldprog->gen_flags,
+ 					  &oldprog->in_hw_count,
+ 					  &prog->gen_flags, &prog->in_hw_count,
+ 					  true);
+ 	else if (prog)
+ 		err = tc_setup_cb_add(block, tp, TC_SETUP_CLSBPF, &cls_bpf,
+ 				      skip_sw, &prog->gen_flags,
+ 				      &prog->in_hw_count, true);
+ 	else
+ 		err = tc_setup_cb_destroy(block, tp, TC_SETUP_CLSBPF, &cls_bpf,
+ 					  skip_sw, &oldprog->gen_flags,
+ 					  &oldprog->in_hw_count, true);
++>>>>>>> 41aa29a58b5f (net: cls_bpf: fix NULL deref on offload filter removal)
  
 -	if (prog && err) {
 -		cls_bpf_offload_cmd(tp, oldprog, prog, extack);
 -		return err;
 +	err = tc_setup_cb_call(block, TC_SETUP_CLSBPF, &cls_bpf, skip_sw);
 +	if (prog) {
 +		if (err < 0) {
 +			cls_bpf_offload_cmd(tp, oldprog, prog, extack);
 +			return err;
 +		} else if (err > 0) {
 +			prog->in_hw_count = err;
 +			tcf_block_offload_inc(block, &prog->gen_flags);
 +		}
  	}
  
  	if (prog && skip_sw && !(prog->gen_flags & TCA_CLS_FLAGS_IN_HW))
* Unmerged path net/sched/cls_bpf.c
