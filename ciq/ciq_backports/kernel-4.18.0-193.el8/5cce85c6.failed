bpf: sync bpf.h to tools and update bpf_helpers.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author brakmo <brakmo@fb.com>
commit 5cce85c640ccc9d9aab8b05c77d7d076a44d4db2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5cce85c6.failed

This patch syncs the uapi bpf.h to tools/ and also updates
bpf_herlpers.h in tools/

	Signed-off-by: Lawrence Brakmo <brakmo@fb.com>
	Acked-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 5cce85c640ccc9d9aab8b05c77d7d076a44d4db2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/include/uapi/linux/bpf.h
#	tools/testing/selftests/bpf/bpf_helpers.h
diff --cc tools/include/uapi/linux/bpf.h
index 272bb7c2d37e,3c38ac9a92a7..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -2342,6 -2342,30 +2342,33 @@@ union bpf_attr 
   *		"**y**".
   *	Return
   *		0
++<<<<<<< HEAD
++=======
+  *
+  * struct bpf_sock *bpf_sk_fullsock(struct bpf_sock *sk)
+  *	Description
+  *		This helper gets a **struct bpf_sock** pointer such
+  *		that all the fields in bpf_sock can be accessed.
+  *	Return
+  *		A **struct bpf_sock** pointer on success, or NULL in
+  *		case of failure.
+  *
+  * struct bpf_tcp_sock *bpf_tcp_sock(struct bpf_sock *sk)
+  *	Description
+  *		This helper gets a **struct bpf_tcp_sock** pointer from a
+  *		**struct bpf_sock** pointer.
+  *
+  *	Return
+  *		A **struct bpf_tcp_sock** pointer on success, or NULL in
+  *		case of failure.
+  *
+  * int bpf_skb_ecn_set_ce(struct sk_buf *skb)
+  *     Description
+  *             Sets ECN of IP header to ce (congestion encountered) if
+  *             current value is ect (ECN capable). Works with IPv6 and IPv4.
+  *     Return
+  *             1 if set, 0 if not set.
++>>>>>>> 5cce85c640cc (bpf: sync bpf.h to tools and update bpf_helpers.h)
   */
  #define __BPF_FUNC_MAPPER(FN)		\
  	FN(unspec),			\
@@@ -2438,7 -2462,10 +2465,14 @@@
  	FN(msg_pop_data),		\
  	FN(rc_pointer_rel),		\
  	FN(spin_lock),			\
++<<<<<<< HEAD
 +	FN(spin_unlock),
++=======
+ 	FN(spin_unlock),		\
+ 	FN(sk_fullsock),		\
+ 	FN(tcp_sock),			\
+ 	FN(skb_ecn_set_ce),
++>>>>>>> 5cce85c640cc (bpf: sync bpf.h to tools and update bpf_helpers.h)
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
   * function eBPF program intends to call
diff --cc tools/testing/selftests/bpf/bpf_helpers.h
index d52237a22612,c9433a496d54..000000000000
--- a/tools/testing/selftests/bpf/bpf_helpers.h
+++ b/tools/testing/selftests/bpf/bpf_helpers.h
@@@ -172,6 -172,16 +172,19 @@@ static int (*bpf_skb_vlan_pop)(void *ct
  	(void *) BPF_FUNC_skb_vlan_pop;
  static int (*bpf_rc_pointer_rel)(void *ctx, int rel_x, int rel_y) =
  	(void *) BPF_FUNC_rc_pointer_rel;
++<<<<<<< HEAD
++=======
+ static void (*bpf_spin_lock)(struct bpf_spin_lock *lock) =
+ 	(void *) BPF_FUNC_spin_lock;
+ static void (*bpf_spin_unlock)(struct bpf_spin_lock *lock) =
+ 	(void *) BPF_FUNC_spin_unlock;
+ static struct bpf_sock *(*bpf_sk_fullsock)(struct bpf_sock *sk) =
+ 	(void *) BPF_FUNC_sk_fullsock;
+ static struct bpf_tcp_sock *(*bpf_tcp_sock)(struct bpf_sock *sk) =
+ 	(void *) BPF_FUNC_tcp_sock;
+ static int (*bpf_skb_ecn_set_ce)(void *ctx) =
+ 	(void *) BPF_FUNC_skb_ecn_set_ce;
++>>>>>>> 5cce85c640cc (bpf: sync bpf.h to tools and update bpf_helpers.h)
  
  /* llvm builtin functions that eBPF C program may use to
   * emit BPF_LD_ABS and BPF_LD_IND instructions
* Unmerged path tools/include/uapi/linux/bpf.h
* Unmerged path tools/testing/selftests/bpf/bpf_helpers.h
