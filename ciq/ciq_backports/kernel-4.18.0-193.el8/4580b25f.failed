libbpf: Store map pin path and status in struct bpf_map

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit 4580b25fcee5347327aaffcec31c615ec28a889a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4580b25f.failed

Support storing and setting a pin path in struct bpf_map, which can be used
for automatic pinning. Also store the pin status so we can avoid attempts
to re-pin a map that has already been pinned (or reused from a previous
pinning).

The behaviour of bpf_object__{un,}pin_maps() is changed so that if it is
called with a NULL path argument (which was previously illegal), it will
(un)pin only those maps that have a pin_path set.

	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/157269297876.394725.14782206533681896279.stgit@toke.dk
(cherry picked from commit 4580b25fcee5347327aaffcec31c615ec28a889a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/libbpf.c
index d91bdfbf910b,22f6dd18de6f..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -3061,36 -4038,64 +3063,71 @@@ int bpf_map__pin(struct bpf_map *map, c
  	char *cp, errmsg[STRERR_BUFSIZE];
  	int err;
  
- 	err = check_path(path);
- 	if (err)
- 		return err;
- 
  	if (map == NULL) {
 -		pr_warn("invalid map pointer\n");
 +		pr_warning("invalid map pointer\n");
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	if (bpf_obj_pin(map->fd, path)) {
 +		cp = libbpf_strerror_r(errno, errmsg, sizeof(errmsg));
 +		pr_warning("failed to pin map: %s\n", cp);
 +		return -errno;
++=======
+ 	if (map->pin_path) {
+ 		if (path && strcmp(path, map->pin_path)) {
+ 			pr_warn("map '%s' already has pin path '%s' different from '%s'\n",
+ 				bpf_map__name(map), map->pin_path, path);
+ 			return -EINVAL;
+ 		} else if (map->pinned) {
+ 			pr_debug("map '%s' already pinned at '%s'; not re-pinning\n",
+ 				 bpf_map__name(map), map->pin_path);
+ 			return 0;
+ 		}
+ 	} else {
+ 		if (!path) {
+ 			pr_warn("missing a path to pin map '%s' at\n",
+ 				bpf_map__name(map));
+ 			return -EINVAL;
+ 		} else if (map->pinned) {
+ 			pr_warn("map '%s' already pinned\n", bpf_map__name(map));
+ 			return -EEXIST;
+ 		}
+ 
+ 		map->pin_path = strdup(path);
+ 		if (!map->pin_path) {
+ 			err = -errno;
+ 			goto out_err;
+ 		}
++>>>>>>> 4580b25fcee5 (libbpf: Store map pin path and status in struct bpf_map)
+ 	}
+ 
+ 	err = check_path(map->pin_path);
+ 	if (err)
+ 		return err;
+ 
+ 	if (bpf_obj_pin(map->fd, map->pin_path)) {
+ 		err = -errno;
+ 		goto out_err;
  	}
  
- 	pr_debug("pinned map '%s'\n", path);
+ 	map->pinned = true;
+ 	pr_debug("pinned map '%s'\n", map->pin_path);
  
  	return 0;
+ 
+ out_err:
+ 	cp = libbpf_strerror_r(-err, errmsg, sizeof(errmsg));
+ 	pr_warn("failed to pin map: %s\n", cp);
+ 	return err;
  }
  
  int bpf_map__unpin(struct bpf_map *map, const char *path)
  {
  	int err;
  
- 	err = check_path(path);
- 	if (err)
- 		return err;
- 
  	if (map == NULL) {
 -		pr_warn("invalid map pointer\n");
 +		pr_warning("invalid map pointer\n");
  		return -EINVAL;
  	}
  
diff --cc tools/lib/bpf/libbpf.map
index 4e72df8e98ba,86173cbb159d..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -186,4 -186,20 +186,20 @@@ LIBBPF_0.0.4 
  } LIBBPF_0.0.3;
  
  LIBBPF_0.0.5 {
 -	global:
 -		bpf_btf_get_next_id;
  } LIBBPF_0.0.4;
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.6 {
+ 	global:
+ 		bpf_map__get_pin_path;
+ 		bpf_map__is_pinned;
+ 		bpf_map__set_pin_path;
+ 		bpf_object__open_file;
+ 		bpf_object__open_mem;
+ 		bpf_program__get_expected_attach_type;
+ 		bpf_program__get_type;
+ 		bpf_program__is_tracing;
+ 		bpf_program__set_tracing;
+ } LIBBPF_0.0.5;
++>>>>>>> 4580b25fcee5 (libbpf: Store map pin path and status in struct bpf_map)
* Unmerged path tools/lib/bpf/libbpf.c
diff --git a/tools/lib/bpf/libbpf.h b/tools/lib/bpf/libbpf.h
index 5cbf459ece0b..0178bdd1958c 100644
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -79,6 +79,11 @@ int bpf_object__section_size(const struct bpf_object *obj, const char *name,
 			     __u32 *size);
 int bpf_object__variable_offset(const struct bpf_object *obj, const char *name,
 				__u32 *off);
+
+/* pin_maps and unpin_maps can both be called with a NULL path, in which case
+ * they will use the pin_path attribute of each map (and ignore all maps that
+ * don't have a pin_path set).
+ */
 LIBBPF_API int bpf_object__pin_maps(struct bpf_object *obj, const char *path);
 LIBBPF_API int bpf_object__unpin_maps(struct bpf_object *obj,
 				      const char *path);
@@ -334,6 +339,9 @@ LIBBPF_API int bpf_map__resize(struct bpf_map *map, __u32 max_entries);
 LIBBPF_API bool bpf_map__is_offload_neutral(const struct bpf_map *map);
 LIBBPF_API bool bpf_map__is_internal(const struct bpf_map *map);
 LIBBPF_API void bpf_map__set_ifindex(struct bpf_map *map, __u32 ifindex);
+LIBBPF_API int bpf_map__set_pin_path(struct bpf_map *map, const char *path);
+LIBBPF_API const char *bpf_map__get_pin_path(const struct bpf_map *map);
+LIBBPF_API bool bpf_map__is_pinned(const struct bpf_map *map);
 LIBBPF_API int bpf_map__pin(struct bpf_map *map, const char *path);
 LIBBPF_API int bpf_map__unpin(struct bpf_map *map, const char *path);
 
* Unmerged path tools/lib/bpf/libbpf.map
