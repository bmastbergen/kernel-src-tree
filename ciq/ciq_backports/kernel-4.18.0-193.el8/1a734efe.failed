libbpf: Add getter for program size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit 1a734efe06948c17122808f74f0c8cc550c10cf5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1a734efe.failed

This adds a new getter for the BPF program size (in bytes). This is useful
for a caller that is trying to predict how much memory will be locked by
loading a BPF object into the kernel.

	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: David S. Miller <davem@davemloft.net>
	Acked-by: Song Liu <songliubraving@fb.com>
Link: https://lore.kernel.org/bpf/157333185272.88376.10996937115395724683.stgit@toke.dk
(cherry picked from commit 1a734efe06948c17122808f74f0c8cc550c10cf5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/libbpf.map
index 4e72df8e98ba,9f39ee06b2d4..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -186,4 -186,22 +186,22 @@@ LIBBPF_0.0.4 
  } LIBBPF_0.0.3;
  
  LIBBPF_0.0.5 {
 -	global:
 -		bpf_btf_get_next_id;
  } LIBBPF_0.0.4;
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.6 {
+ 	global:
+ 		bpf_get_link_xdp_info;
+ 		bpf_map__get_pin_path;
+ 		bpf_map__is_pinned;
+ 		bpf_map__set_pin_path;
+ 		bpf_object__open_file;
+ 		bpf_object__open_mem;
+ 		bpf_program__get_expected_attach_type;
+ 		bpf_program__get_type;
+ 		bpf_program__is_tracing;
+ 		bpf_program__set_tracing;
+ 		bpf_program__size;
+ } LIBBPF_0.0.5;
++>>>>>>> 1a734efe0694 (libbpf: Add getter for program size)
diff --git a/tools/lib/bpf/libbpf.c b/tools/lib/bpf/libbpf.c
index 2d4880aa5a1a..5c2ca4a50ded 100644
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@ -3466,6 +3466,11 @@ int bpf_program__fd(const struct bpf_program *prog)
 	return bpf_program__nth_fd(prog, 0);
 }
 
+size_t bpf_program__size(const struct bpf_program *prog)
+{
+	return prog->insns_cnt * sizeof(struct bpf_insn);
+}
+
 int bpf_program__set_prep(struct bpf_program *prog, int nr_instances,
 			  bpf_program_prep_t prep)
 {
diff --git a/tools/lib/bpf/libbpf.h b/tools/lib/bpf/libbpf.h
index 5cbf459ece0b..c62268803836 100644
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -152,6 +152,9 @@ LIBBPF_API void bpf_program__set_ifindex(struct bpf_program *prog,
 LIBBPF_API const char *bpf_program__title(const struct bpf_program *prog,
 					  bool needs_copy);
 
+/* returns program size in bytes */
+LIBBPF_API size_t bpf_program__size(const struct bpf_program *prog);
+
 LIBBPF_API int bpf_program__load(struct bpf_program *prog, char *license,
 				 __u32 kern_version);
 LIBBPF_API int bpf_program__fd(const struct bpf_program *prog);
* Unmerged path tools/lib/bpf/libbpf.map
