drm/i915: Force DPCD backlight mode for some Dell CML 2020 panels

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Lyude Paul <lyude@redhat.com>
commit ba518bbd3f3c265419fa8c3702940cb7c642c6a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ba518bbd.failed

According to Dell, trying to match their panels via OUI is not reliable
enough and we've been told that we should check against the EDID
instead. As well, Dell seems to have some panels that are actually
intended to switch between using PWM for backlight controls and DPCD for
backlight controls depending on whether or not the panel is in HDR or
SDR mode. Yikes.

Regardless, we need to add quirks for these so that DPCD backlight
controls get enabled by default, since without additional driver support
that's the only form of brightness control that will work. Hopefully in
the future we can remove these quirks once we have a better way of
probing for this.

Changes since v1:
* Add one more EDID per Dell's request
* Remove model number (which is possibly wrong) and replace with Dell
  CML 2020 systems

	Signed-off-by: Lyude Paul <lyude@redhat.com>
	Cc: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200211183358.157448-4-lyude@redhat.com
	Reviewed-by: Adam Jackson <ajax@redhat.com>
(cherry picked from commit ba518bbd3f3c265419fa8c3702940cb7c642c6a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_dp_helper.c
diff --cc drivers/gpu/drm/drm_dp_helper.c
index 54a6414c5d96,620d78ff2706..000000000000
--- a/drivers/gpu/drm/drm_dp_helper.c
+++ b/drivers/gpu/drm/drm_dp_helper.c
@@@ -1321,6 -1221,85 +1321,88 @@@ drm_dp_get_quirks(const struct drm_dp_d
  #undef DEVICE_ID_ANY
  #undef DEVICE_ID
  
++<<<<<<< HEAD
++=======
+ struct edid_quirk {
+ 	u8 mfg_id[2];
+ 	u8 prod_id[2];
+ 	u32 quirks;
+ };
+ 
+ #define MFG(first, second) { (first), (second) }
+ #define PROD_ID(first, second) { (first), (second) }
+ 
+ /*
+  * Some devices have unreliable OUIDs where they don't set the device ID
+  * correctly, and as a result we need to use the EDID for finding additional
+  * DP quirks in such cases.
+  */
+ static const struct edid_quirk edid_quirk_list[] = {
+ 	/* Optional 4K AMOLED panel in the ThinkPad X1 Extreme 2nd Generation
+ 	 * only supports DPCD backlight controls
+ 	 */
+ 	{ MFG(0x4c, 0x83), PROD_ID(0x41, 0x41), BIT(DP_QUIRK_FORCE_DPCD_BACKLIGHT) },
+ 	/*
+ 	 * Some Dell CML 2020 systems have panels support both AUX and PWM
+ 	 * backlight control, and some only support AUX backlight control. All
+ 	 * said panels start up in AUX mode by default, and we don't have any
+ 	 * support for disabling HDR mode on these panels which would be
+ 	 * required to switch to PWM backlight control mode (plus, I'm not
+ 	 * even sure we want PWM backlight controls over DPCD backlight
+ 	 * controls anyway...). Until we have a better way of detecting these,
+ 	 * force DPCD backlight mode on all of them.
+ 	 */
+ 	{ MFG(0x06, 0xaf), PROD_ID(0x9b, 0x32), BIT(DP_QUIRK_FORCE_DPCD_BACKLIGHT) },
+ 	{ MFG(0x06, 0xaf), PROD_ID(0xeb, 0x41), BIT(DP_QUIRK_FORCE_DPCD_BACKLIGHT) },
+ 	{ MFG(0x4d, 0x10), PROD_ID(0xc7, 0x14), BIT(DP_QUIRK_FORCE_DPCD_BACKLIGHT) },
+ 	{ MFG(0x4d, 0x10), PROD_ID(0xe6, 0x14), BIT(DP_QUIRK_FORCE_DPCD_BACKLIGHT) },
+ };
+ 
+ #undef MFG
+ #undef PROD_ID
+ 
+ /**
+  * drm_dp_get_edid_quirks() - Check the EDID of a DP device to find additional
+  * DP-specific quirks
+  * @edid: The EDID to check
+  *
+  * While OUIDs are meant to be used to recognize a DisplayPort device, a lot
+  * of manufacturers don't seem to like following standards and neglect to fill
+  * the dev-ID in, making it impossible to only use OUIDs for determining
+  * quirks in some cases. This function can be used to check the EDID and look
+  * up any additional DP quirks. The bits returned by this function correspond
+  * to the quirk bits in &drm_dp_quirk.
+  *
+  * Returns: a bitmask of quirks, if any. The driver can check this using
+  * drm_dp_has_quirk().
+  */
+ u32 drm_dp_get_edid_quirks(const struct edid *edid)
+ {
+ 	const struct edid_quirk *quirk;
+ 	u32 quirks = 0;
+ 	int i;
+ 
+ 	if (!edid)
+ 		return 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(edid_quirk_list); i++) {
+ 		quirk = &edid_quirk_list[i];
+ 		if (memcmp(quirk->mfg_id, edid->mfg_id,
+ 			   sizeof(edid->mfg_id)) == 0 &&
+ 		    memcmp(quirk->prod_id, edid->prod_code,
+ 			   sizeof(edid->prod_code)) == 0)
+ 			quirks |= quirk->quirks;
+ 	}
+ 
+ 	DRM_DEBUG_KMS("DP sink: EDID mfg %*phD prod-ID %*phD quirks: 0x%04x\n",
+ 		      (int)sizeof(edid->mfg_id), edid->mfg_id,
+ 		      (int)sizeof(edid->prod_code), edid->prod_code, quirks);
+ 
+ 	return quirks;
+ }
+ EXPORT_SYMBOL(drm_dp_get_edid_quirks);
+ 
++>>>>>>> ba518bbd3f3c (drm/i915: Force DPCD backlight mode for some Dell CML 2020 panels)
  /**
   * drm_dp_read_desc - read sink/branch descriptor from DPCD
   * @aux: DisplayPort AUX channel
* Unmerged path drivers/gpu/drm/drm_dp_helper.c
