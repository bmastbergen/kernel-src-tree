SUNRPC: Ignore queue transmission errors on successful transmission

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit a7b1a4839ff979b4dd4fb6c1ccd31af11de9ca87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a7b1a483.failed

If a request transmission fails due to write space or slot unavailability
errors, but the queued task then gets transmitted before it has time to
process the error in call_transmit_status() or call_bc_transmit_status(),
we need to suppress the transmission error code to prevent it from leaking
out of the RPC layer.

	Reported-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
	Tested-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit a7b1a4839ff979b4dd4fb6c1ccd31af11de9ca87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/clnt.c
diff --cc net/sunrpc/clnt.c
index 2b272ab9272e,8ff11dc98d7f..000000000000
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@@ -2001,8 -2080,9 +2001,14 @@@ call_transmit_status(struct rpc_task *t
  	 * Common case: success.  Force the compiler to put this
  	 * test first.
  	 */
++<<<<<<< HEAD
 +	if (task->tk_status == 0) {
 +		xprt_end_transmit(task);
++=======
+ 	if (rpc_task_transmitted(task)) {
+ 		task->tk_status = 0;
+ 		xprt_request_wait_receive(task);
++>>>>>>> a7b1a4839ff9 (SUNRPC: Ignore queue transmission errors on successful transmission)
  		return;
  	}
  
@@@ -2064,24 -2154,24 +2070,31 @@@ call_bc_transmit(struct rpc_task *task
  {
  	struct rpc_rqst *req = task->tk_rqstp;
  
++<<<<<<< HEAD
 +	if (!xprt_prepare_transmit(task))
 +		goto out_retry;
++=======
+ 	if (rpc_task_transmitted(task))
+ 		task->tk_status = 0;
+ 
+ 	dprint_status(task);
++>>>>>>> a7b1a4839ff9 (SUNRPC: Ignore queue transmission errors on successful transmission)
  
 +	if (task->tk_status < 0) {
 +		printk(KERN_NOTICE "RPC: Could not send backchannel reply "
 +			"error: %d\n", task->tk_status);
 +		goto out_done;
 +	}
 +	if (req->rq_connect_cookie != req->rq_xprt->connect_cookie)
 +		req->rq_bytes_sent = 0;
 +
 +	xprt_transmit(task);
 +
 +	if (task->tk_status == -EAGAIN)
 +		goto out_nospace;
 +
 +	xprt_end_transmit(task);
 +	dprint_status(task);
  	switch (task->tk_status) {
  	case 0:
  		/* Success */
* Unmerged path net/sunrpc/clnt.c
