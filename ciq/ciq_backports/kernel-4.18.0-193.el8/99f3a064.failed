bpf: net: Add SO_DETACH_REUSEPORT_BPF

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 99f3a064bc2e4bd5fe50218646c5be342f2ad18c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/99f3a064.failed

There is SO_ATTACH_REUSEPORT_[CE]BPF but there is no DETACH.
This patch adds SO_DETACH_REUSEPORT_BPF sockopt.  The same
sockopt can be used to undo both SO_ATTACH_REUSEPORT_[CE]BPF.

reseport_detach_prog() is added and it is mostly a mirror
of the existing reuseport_attach_prog().  The differences are,
it does not call reuseport_alloc() and returns -ENOENT when
there is no old prog.

	Cc: Craig Gallek <kraig@google.com>
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Reviewed-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 99f3a064bc2e4bd5fe50218646c5be342f2ad18c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/include/uapi/asm/socket.h
#	arch/mips/include/uapi/asm/socket.h
#	arch/parisc/include/uapi/asm/socket.h
#	arch/sparc/include/uapi/asm/socket.h
#	include/uapi/asm-generic/socket.h
diff --cc arch/alpha/include/uapi/asm/socket.h
index 065fb372e355,de6c4df61082..000000000000
--- a/arch/alpha/include/uapi/asm/socket.h
+++ b/arch/alpha/include/uapi/asm/socket.h
@@@ -115,4 -109,43 +115,46 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING         SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 99f3a064bc2e (bpf: net: Add SO_DETACH_REUSEPORT_BPF)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/mips/include/uapi/asm/socket.h
index 71370fb3ceef,d0a9ed2ca2d6..000000000000
--- a/arch/mips/include/uapi/asm/socket.h
+++ b/arch/mips/include/uapi/asm/socket.h
@@@ -126,4 -120,43 +126,46 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO             SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO             SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 99f3a064bc2e (bpf: net: Add SO_DETACH_REUSEPORT_BPF)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/parisc/include/uapi/asm/socket.h
index 061b9cf2a779,10173c32195e..000000000000
--- a/arch/parisc/include/uapi/asm/socket.h
+++ b/arch/parisc/include/uapi/asm/socket.h
@@@ -107,4 -101,42 +107,45 @@@
  #define SO_TXTIME		0x4036
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	0x4037
+ 
+ #define SO_TIMESTAMP_OLD        0x4012
+ #define SO_TIMESTAMPNS_OLD      0x4013
+ #define SO_TIMESTAMPING_OLD     0x4020
+ 
+ #define SO_TIMESTAMP_NEW        0x4038
+ #define SO_TIMESTAMPNS_NEW      0x4039
+ #define SO_TIMESTAMPING_NEW     0x403A
+ 
+ #define SO_RCVTIMEO_NEW         0x4040
+ #define SO_SNDTIMEO_NEW         0x4041
+ 
+ #define SO_DETACH_REUSEPORT_BPF 0x4042
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING         SO_TIMESTAMPING_OLD
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 99f3a064bc2e (bpf: net: Add SO_DETACH_REUSEPORT_BPF)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/sparc/include/uapi/asm/socket.h
index 7ea35e5601b6,8029b681fc7c..000000000000
--- a/arch/sparc/include/uapi/asm/socket.h
+++ b/arch/sparc/include/uapi/asm/socket.h
@@@ -109,4 -104,42 +109,45 @@@
  #define SO_SECURITY_ENCRYPTION_TRANSPORT	0x5002
  #define SO_SECURITY_ENCRYPTION_NETWORK		0x5004
  
++<<<<<<< HEAD
++=======
+ #define SO_TIMESTAMP_OLD         0x001d
+ #define SO_TIMESTAMPNS_OLD       0x0021
+ #define SO_TIMESTAMPING_OLD      0x0023
+ 
+ #define SO_TIMESTAMP_NEW         0x0046
+ #define SO_TIMESTAMPNS_NEW       0x0042
+ #define SO_TIMESTAMPING_NEW      0x0043
+ 
+ #define SO_RCVTIMEO_NEW          0x0044
+ #define SO_SNDTIMEO_NEW          0x0045
+ 
+ #define SO_DETACH_REUSEPORT_BPF  0x0047
+ 
+ #if !defined(__KERNEL__)
+ 
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP          SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS        SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING       SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 99f3a064bc2e (bpf: net: Add SO_DETACH_REUSEPORT_BPF)
  #endif /* _ASM_SOCKET_H */
diff --cc include/uapi/asm-generic/socket.h
index a12692e5f7a8,77f7c1638eb1..000000000000
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@@ -110,4 -104,44 +110,47 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64 || (defined(__x86_64__) && defined(__ILP32__))
+ /* on 64-bit and x32, avoid the ?: operator */
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 99f3a064bc2e (bpf: net: Add SO_DETACH_REUSEPORT_BPF)
  #endif /* __ASM_GENERIC_SOCKET_H */
* Unmerged path arch/alpha/include/uapi/asm/socket.h
* Unmerged path arch/mips/include/uapi/asm/socket.h
* Unmerged path arch/parisc/include/uapi/asm/socket.h
* Unmerged path arch/sparc/include/uapi/asm/socket.h
diff --git a/include/net/sock_reuseport.h b/include/net/sock_reuseport.h
index b0ff88240049..2a72d34b830c 100644
--- a/include/net/sock_reuseport.h
+++ b/include/net/sock_reuseport.h
@@ -31,6 +31,8 @@ extern struct sock *reuseport_select_sock(struct sock *sk,
 					  struct sk_buff *skb,
 					  int hdr_len);
 extern int reuseport_attach_prog(struct sock *sk, struct bpf_prog *prog);
+extern int reuseport_detach_prog(struct sock *sk);
+
 int reuseport_get_id(struct sock_reuseport *reuse);
 
 #endif  /* _SOCK_REUSEPORT_H */
* Unmerged path include/uapi/asm-generic/socket.h
diff --git a/net/core/sock.c b/net/core/sock.c
index fd57471fb423..6f76bfae59de 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -998,6 +998,10 @@ int sock_setsockopt(struct socket *sock, int level, int optname,
 		}
 		break;
 
+	case SO_DETACH_REUSEPORT_BPF:
+		ret = reuseport_detach_prog(sk);
+		break;
+
 	case SO_DETACH_FILTER:
 		ret = sk_detach_filter(sk);
 		break;
diff --git a/net/core/sock_reuseport.c b/net/core/sock_reuseport.c
index 14feb61fcdff..0f6818d3ba59 100644
--- a/net/core/sock_reuseport.c
+++ b/net/core/sock_reuseport.c
@@ -331,3 +331,27 @@ int reuseport_attach_prog(struct sock *sk, struct bpf_prog *prog)
 	return 0;
 }
 EXPORT_SYMBOL(reuseport_attach_prog);
+
+int reuseport_detach_prog(struct sock *sk)
+{
+	struct sock_reuseport *reuse;
+	struct bpf_prog *old_prog;
+
+	if (!rcu_access_pointer(sk->sk_reuseport_cb))
+		return sk->sk_reuseport ? -ENOENT : -EINVAL;
+
+	old_prog = NULL;
+	spin_lock_bh(&reuseport_lock);
+	reuse = rcu_dereference_protected(sk->sk_reuseport_cb,
+					  lockdep_is_held(&reuseport_lock));
+	rcu_swap_protected(reuse->prog, old_prog,
+			   lockdep_is_held(&reuseport_lock));
+	spin_unlock_bh(&reuseport_lock);
+
+	if (!old_prog)
+		return -ENOENT;
+
+	sk_reuseport_prog_free(old_prog);
+	return 0;
+}
+EXPORT_SYMBOL(reuseport_detach_prog);
