mm/memory_hotplug: remove memory block devices before arch_remove_memory()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author David Hildenbrand <david@redhat.com>
commit 4c4b7f9ba9486c565aead99a198ceeef73ae81f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4c4b7f9b.failed

Let's factor out removing of memory block devices, which is only
necessary for memory added via add_memory() and friends that created
memory block devices.  Remove the devices before calling
arch_remove_memory().

This finishes factoring out memory block device handling from
arch_add_memory() and arch_remove_memory().

Link: http://lkml.kernel.org/r/20190527111152.16324-10-david@redhat.com
	Signed-off-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: "Rafael J. Wysocki" <rafael@kernel.org>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: "mike.travis@hpe.com" <mike.travis@hpe.com>
	Cc: Andrew Banman <andrew.banman@hpe.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Alex Deucher <alexander.deucher@amd.com>
	Cc: "David S. Miller" <davem@davemloft.net>
	Cc: Mark Brown <broonie@kernel.org>
	Cc: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Oscar Salvador <osalvador@suse.de>
	Cc: Jonathan Cameron <Jonathan.Cameron@huawei.com>
	Cc: Arun KS <arunks@codeaurora.org>
	Cc: Mathieu Malaterre <malat@debian.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Anshuman Khandual <anshuman.khandual@arm.com>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Chintan Pandya <cpandya@codeaurora.org>
	Cc: Christophe Leroy <christophe.leroy@c-s.fr>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Fenghua Yu <fenghua.yu@intel.com>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Jun Yao <yaojun8558363@gmail.com>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: Logan Gunthorpe <logang@deltatee.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Cc: Nicholas Piggin <npiggin@gmail.com>
	Cc: Oscar Salvador <osalvador@suse.com>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Qian Cai <cai@lca.pw>
	Cc: Rich Felker <dalias@libc.org>
	Cc: Rob Herring <robh@kernel.org>
	Cc: Robin Murphy <robin.murphy@arm.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Wei Yang <richard.weiyang@gmail.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
	Cc: Yu Zhao <yuzhao@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 4c4b7f9ba9486c565aead99a198ceeef73ae81f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/memory.c
#	include/linux/memory.h
diff --cc drivers/base/memory.c
index b031eaa5b09d,826dd76f662e..000000000000
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@@ -740,35 -722,70 +740,75 @@@ unregister_memory(struct memory_block *
  	device_unregister(&memory->dev);
  }
  
++<<<<<<< HEAD
 +void unregister_memory_section(struct mem_section *section)
++=======
+ /*
+  * Create memory block devices for the given memory area. Start and size
+  * have to be aligned to memory block granularity. Memory block devices
+  * will be initialized as offline.
+  */
+ int create_memory_block_devices(unsigned long start, unsigned long size)
  {
+ 	const int start_block_id = pfn_to_block_id(PFN_DOWN(start));
+ 	int end_block_id = pfn_to_block_id(PFN_DOWN(start + size));
  	struct memory_block *mem;
+ 	unsigned long block_id;
+ 	int ret = 0;
  
- 	if (WARN_ON_ONCE(!present_section(section)))
- 		return;
+ 	if (WARN_ON_ONCE(!IS_ALIGNED(start, memory_block_size_bytes()) ||
+ 			 !IS_ALIGNED(size, memory_block_size_bytes())))
+ 		return -EINVAL;
  
  	mutex_lock(&mem_sysfs_mutex);
+ 	for (block_id = start_block_id; block_id != end_block_id; block_id++) {
+ 		ret = init_memory_block(&mem, block_id, MEM_OFFLINE);
+ 		if (ret)
+ 			break;
+ 		mem->section_count = sections_per_block;
+ 	}
+ 	if (ret) {
+ 		end_block_id = block_id;
+ 		for (block_id = start_block_id; block_id != end_block_id;
+ 		     block_id++) {
+ 			mem = find_memory_block_by_id(block_id, NULL);
+ 			mem->section_count = 0;
+ 			unregister_memory(mem);
+ 		}
+ 	}
+ 	mutex_unlock(&mem_sysfs_mutex);
+ 	return ret;
+ }
  
- 	/*
- 	 * Some users of the memory hotplug do not want/need memblock to
- 	 * track all sections. Skip over those.
- 	 */
- 	mem = find_memory_block(section);
- 	if (!mem)
- 		goto out_unlock;
+ /*
+  * Remove memory block devices for the given memory area. Start and size
+  * have to be aligned to memory block granularity. Memory block devices
+  * have to be offline.
+  */
+ void remove_memory_block_devices(unsigned long start, unsigned long size)
++>>>>>>> 4c4b7f9ba948 (mm/memory_hotplug: remove memory block devices before arch_remove_memory())
+ {
+ 	const int start_block_id = pfn_to_block_id(PFN_DOWN(start));
+ 	const int end_block_id = pfn_to_block_id(PFN_DOWN(start + size));
+ 	struct memory_block *mem;
+ 	int block_id;
  
- 	unregister_mem_sect_under_nodes(mem, __section_nr(section));
+ 	if (WARN_ON_ONCE(!IS_ALIGNED(start, memory_block_size_bytes()) ||
+ 			 !IS_ALIGNED(size, memory_block_size_bytes())))
+ 		return;
  
- 	mem->section_count--;
- 	if (mem->section_count == 0)
+ 	mutex_lock(&mem_sysfs_mutex);
+ 	for (block_id = start_block_id; block_id != end_block_id; block_id++) {
+ 		mem = find_memory_block_by_id(block_id, NULL);
+ 		if (WARN_ON_ONCE(!mem))
+ 			continue;
+ 		mem->section_count = 0;
+ 		unregister_memory_block_under_nodes(mem);
  		unregister_memory(mem);
- 	else
- 		put_device(&mem->dev);
- 
- out_unlock:
+ 	}
  	mutex_unlock(&mem_sysfs_mutex);
  }
 +#endif /* CONFIG_MEMORY_HOTREMOVE */
  
  /* return true if the memory block is offlined, otherwise, return false */
  bool is_memblock_offlined(struct memory_block *mem)
diff --cc include/linux/memory.h
index e1dc1bb2b787,f26a5417ec5d..000000000000
--- a/include/linux/memory.h
+++ b/include/linux/memory.h
@@@ -111,10 -111,8 +111,15 @@@ extern int register_memory_notifier(str
  extern void unregister_memory_notifier(struct notifier_block *nb);
  extern int register_memory_isolate_notifier(struct notifier_block *nb);
  extern void unregister_memory_isolate_notifier(struct notifier_block *nb);
++<<<<<<< HEAD
 +int hotplug_memory_register(int nid, struct mem_section *section);
 +#ifdef CONFIG_MEMORY_HOTREMOVE
 +extern void unregister_memory_section(struct mem_section *);
 +#endif
++=======
+ int create_memory_block_devices(unsigned long start, unsigned long size);
+ void remove_memory_block_devices(unsigned long start, unsigned long size);
++>>>>>>> 4c4b7f9ba948 (mm/memory_hotplug: remove memory block devices before arch_remove_memory())
  extern int memory_dev_init(void);
  extern int memory_notify(unsigned long val, void *v);
  extern int memory_isolate_notify(unsigned long val, void *v);
* Unmerged path drivers/base/memory.c
diff --git a/drivers/base/node.c b/drivers/base/node.c
index 8598fcbd2a17..04fdfa99b8bc 100644
--- a/drivers/base/node.c
+++ b/drivers/base/node.c
@@ -801,9 +801,10 @@ int register_mem_sect_under_node(struct memory_block *mem_blk, void *arg)
 	return 0;
 }
 
-/* unregister memory section under all nodes that it spans */
-int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,
-				    unsigned long phys_index)
+/*
+ * Unregister memory block device under all nodes that it spans.
+ */
+int unregister_memory_block_under_nodes(struct memory_block *mem_blk)
 {
 	NODEMASK_ALLOC(nodemask_t, unlinked_nodes, GFP_KERNEL);
 	unsigned long pfn, sect_start_pfn, sect_end_pfn;
@@ -816,8 +817,8 @@ int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,
 		return -ENOMEM;
 	nodes_clear(*unlinked_nodes);
 
-	sect_start_pfn = section_nr_to_pfn(phys_index);
-	sect_end_pfn = sect_start_pfn + PAGES_PER_SECTION - 1;
+	sect_start_pfn = section_nr_to_pfn(mem_blk->start_section_nr);
+	sect_end_pfn = section_nr_to_pfn(mem_blk->end_section_nr);
 	for (pfn = sect_start_pfn; pfn <= sect_end_pfn; pfn++) {
 		int nid;
 
* Unmerged path include/linux/memory.h
diff --git a/include/linux/node.h b/include/linux/node.h
index 1a557c589ecb..02a29e71b175 100644
--- a/include/linux/node.h
+++ b/include/linux/node.h
@@ -139,8 +139,7 @@ extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
 extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
 extern int register_mem_sect_under_node(struct memory_block *mem_blk,
 						void *arg);
-extern int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,
-					   unsigned long phys_index);
+extern int unregister_memory_block_under_nodes(struct memory_block *mem_blk);
 
 extern int register_memory_node_under_compute_node(unsigned int mem_nid,
 						   unsigned int cpu_nid,
@@ -176,8 +175,7 @@ static inline int register_mem_sect_under_node(struct memory_block *mem_blk,
 {
 	return 0;
 }
-static inline int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,
-						  unsigned long phys_index)
+static inline int unregister_memory_block_under_nodes(struct memory_block *mem_blk)
 {
 	return 0;
 }
diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c
index 20f1bc790834..7ad092fdf616 100644
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@ -531,8 +531,6 @@ static void __remove_section(struct zone *zone, struct mem_section *ms,
 	if (WARN_ON_ONCE(!valid_section(ms)))
 		return;
 
-	unregister_memory_section(ms);
-
 	scn_nr = __section_nr(ms);
 	start_pfn = section_nr_to_pfn((unsigned long)scn_nr);
 	__remove_zone(zone, start_pfn);
@@ -1938,6 +1936,9 @@ void __ref __remove_memory(int nid, u64 start, u64 size)
 	memblock_free(start, size);
 	memblock_remove(start, size);
 
+	/* remove memory block devices before removing memory */
+	remove_memory_block_devices(start, size);
+
 	arch_remove_memory(nid, start, size, NULL);
 	__release_memory_resource(start, size);
 
