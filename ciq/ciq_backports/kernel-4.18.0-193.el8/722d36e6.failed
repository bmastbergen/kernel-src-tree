net: sched: remove tcf block API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] sched: remove tcf block API (Ivan Vecera) [1737890]
Rebuild_FUZZ: 91.53%
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 722d36e6e29e50c640c9f5ce186b8d8709cae1a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/722d36e6.failed

Unused, now replaced by flow block API.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 722d36e6e29e50c640c9f5ce186b8d8709cae1a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/pkt_cls.h
diff --cc include/net/pkt_cls.h
index 835bbad70a4b,17c388090c3c..000000000000
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@@ -71,26 -66,6 +71,29 @@@ static inline struct Qdisc *tcf_block_q
  	return block->q;
  }
  
++<<<<<<< HEAD
 +void *tcf_block_cb_priv(struct tcf_block_cb *block_cb);
 +struct tcf_block_cb *tcf_block_cb_lookup(struct tcf_block *block,
 +					 tc_setup_cb_t *cb, void *cb_ident);
 +void tcf_block_cb_incref(struct tcf_block_cb *block_cb);
 +unsigned int tcf_block_cb_decref(struct tcf_block_cb *block_cb);
 +struct tcf_block_cb *__tcf_block_cb_register(struct tcf_block *block,
 +					     tc_setup_cb_t *cb, void *cb_ident,
 +					     void *cb_priv,
 +					     struct netlink_ext_ack *extack);
 +/* RHEL: Increase the version of tcf_block_cb_register() kABI when TC subsystem
 + * is changed in a kABI incompatible way. This includes changes to ndo_setup_tc,
 + * inline function changes and TC struct changes. */
 +RH_KABI_FORCE_CHANGE(1)
 +int tcf_block_cb_register(struct tcf_block *block,
 +			  tc_setup_cb_t *cb, void *cb_ident,
 +			  void *cb_priv, struct netlink_ext_ack *extack);
 +void __tcf_block_cb_unregister(struct tcf_block *block,
 +			       struct tcf_block_cb *block_cb);
 +void tcf_block_cb_unregister(struct tcf_block *block,
 +			     tc_setup_cb_t *cb, void *cb_ident);
++=======
++>>>>>>> 722d36e6e29e (net: sched: remove tcf block API)
  int __tc_indr_block_cb_register(struct net_device *dev, void *cb_priv,
  				tc_indr_block_bind_cb_t *cb, void *cb_ident);
  int tc_indr_block_cb_register(struct net_device *dev, void *cb_priv,
* Unmerged path include/net/pkt_cls.h
diff --git a/net/sched/cls_api.c b/net/sched/cls_api.c
index 51cea3b125f9..2fc2f39fc10c 100644
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@ -1514,43 +1514,6 @@ void tcf_block_put(struct tcf_block *block)
 
 EXPORT_SYMBOL(tcf_block_put);
 
-struct tcf_block_cb {
-	struct list_head list;
-	tc_setup_cb_t *cb;
-	void *cb_ident;
-	void *cb_priv;
-	unsigned int refcnt;
-};
-
-void *tcf_block_cb_priv(struct tcf_block_cb *block_cb)
-{
-	return block_cb->cb_priv;
-}
-EXPORT_SYMBOL(tcf_block_cb_priv);
-
-struct tcf_block_cb *tcf_block_cb_lookup(struct tcf_block *block,
-					 tc_setup_cb_t *cb, void *cb_ident)
-{	struct tcf_block_cb *block_cb;
-
-	list_for_each_entry(block_cb, &block->cb_list, list)
-		if (block_cb->cb == cb && block_cb->cb_ident == cb_ident)
-			return block_cb;
-	return NULL;
-}
-EXPORT_SYMBOL(tcf_block_cb_lookup);
-
-void tcf_block_cb_incref(struct tcf_block_cb *block_cb)
-{
-	block_cb->refcnt++;
-}
-EXPORT_SYMBOL(tcf_block_cb_incref);
-
-unsigned int tcf_block_cb_decref(struct tcf_block_cb *block_cb)
-{
-	return --block_cb->refcnt;
-}
-EXPORT_SYMBOL(tcf_block_cb_decref);
-
 static int
 tcf_block_playback_offloads(struct tcf_block *block, tc_setup_cb_t *cb,
 			    void *cb_priv, bool add, bool offload_in_use,
@@ -1592,67 +1555,6 @@ tcf_block_playback_offloads(struct tcf_block *block, tc_setup_cb_t *cb,
 	return err;
 }
 
-struct tcf_block_cb *__tcf_block_cb_register(struct tcf_block *block,
-					     tc_setup_cb_t *cb, void *cb_ident,
-					     void *cb_priv,
-					     struct netlink_ext_ack *extack)
-{
-	struct tcf_block_cb *block_cb;
-	int err;
-
-	/* Replay any already present rules */
-	err = tcf_block_playback_offloads(block, cb, cb_priv, true,
-					  tcf_block_offload_in_use(block),
-					  extack);
-	if (err)
-		return ERR_PTR(err);
-
-	block_cb = kzalloc(sizeof(*block_cb), GFP_KERNEL);
-	if (!block_cb)
-		return ERR_PTR(-ENOMEM);
-	block_cb->cb = cb;
-	block_cb->cb_ident = cb_ident;
-	block_cb->cb_priv = cb_priv;
-	list_add(&block_cb->list, &block->cb_list);
-	return block_cb;
-}
-EXPORT_SYMBOL(__tcf_block_cb_register);
-
-int tcf_block_cb_register(struct tcf_block *block,
-			  tc_setup_cb_t *cb, void *cb_ident,
-			  void *cb_priv, struct netlink_ext_ack *extack)
-{
-	struct tcf_block_cb *block_cb;
-
-	block_cb = __tcf_block_cb_register(block, cb, cb_ident, cb_priv,
-					   extack);
-	return PTR_ERR_OR_ZERO(block_cb);
-}
-EXPORT_SYMBOL(tcf_block_cb_register);
-
-void __tcf_block_cb_unregister(struct tcf_block *block,
-			       struct tcf_block_cb *block_cb)
-{
-	tcf_block_playback_offloads(block, block_cb->cb, block_cb->cb_priv,
-				    false, tcf_block_offload_in_use(block),
-				    NULL);
-	list_del(&block_cb->list);
-	kfree(block_cb);
-}
-EXPORT_SYMBOL(__tcf_block_cb_unregister);
-
-void tcf_block_cb_unregister(struct tcf_block *block,
-			     tc_setup_cb_t *cb, void *cb_ident)
-{
-	struct tcf_block_cb *block_cb;
-
-	block_cb = tcf_block_cb_lookup(block, cb, cb_ident);
-	if (!block_cb)
-		return;
-	__tcf_block_cb_unregister(block, block_cb);
-}
-EXPORT_SYMBOL(tcf_block_cb_unregister);
-
 static int tcf_block_bind(struct tcf_block *block,
 			  struct flow_block_offload *bo)
 {
