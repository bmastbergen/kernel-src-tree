fuse: export fuse_send_init_request()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Vivek Goyal <vgoyal@redhat.com>
commit 95a84cdb11c26315a6d34664846f82c438c961a1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/95a84cdb.failed

This will be used by virtio-fs to send init request to fuse server after
initialization of virt queues.

	Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 95a84cdb11c26315a6d34664846f82c438c961a1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fuse/inode.c
diff --cc fs/fuse/inode.c
index 523a1f18c557,5d455f4d6195..000000000000
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@@ -964,14 -972,17 +964,18 @@@ static void process_init_reply(struct f
  	wake_up_all(&fc->blocked_waitq);
  }
  
++<<<<<<< HEAD
 +static void fuse_send_init(struct fuse_conn *fc, struct fuse_req *req)
++=======
+ void fuse_send_init(struct fuse_conn *fc)
++>>>>>>> 95a84cdb11c2 (fuse: export fuse_send_init_request())
  {
 -	struct fuse_init_args *ia;
 -
 -	ia = kzalloc(sizeof(*ia), GFP_KERNEL | __GFP_NOFAIL);
 +	struct fuse_init_in *arg = &req->misc.init_in;
  
 -	ia->in.major = FUSE_KERNEL_VERSION;
 -	ia->in.minor = FUSE_KERNEL_MINOR_VERSION;
 -	ia->in.max_readahead = fc->sb->s_bdi->ra_pages * PAGE_SIZE;
 -	ia->in.flags |=
 -		FUSE_ASYNC_READ | FUSE_POSIX_LOCKS | FUSE_ATOMIC_O_TRUNC |
 +	arg->major = FUSE_KERNEL_VERSION;
 +	arg->minor = FUSE_KERNEL_MINOR_VERSION;
 +	arg->max_readahead = fc->sb->s_bdi->ra_pages * PAGE_SIZE;
 +	arg->flags |= FUSE_ASYNC_READ | FUSE_POSIX_LOCKS | FUSE_ATOMIC_O_TRUNC |
  		FUSE_EXPORT_SUPPORT | FUSE_BIG_WRITES | FUSE_DONT_MASK |
  		FUSE_SPLICE_WRITE | FUSE_SPLICE_MOVE | FUSE_SPLICE_READ |
  		FUSE_FLOCK_LOCKS | FUSE_HAS_IOCTL_DIR | FUSE_AUTO_INVAL_DATA |
@@@ -988,12 -999,17 +992,13 @@@
  	/* Variable length argument used for backward compatibility
  	   with interface version < 7.5.  Rest of init_out is zeroed
  	   by do_get_request(), so a short reply is not a problem */
 -	ia->args.out_argvar = 1;
 -	ia->args.out_args[0].size = sizeof(ia->out);
 -	ia->args.out_args[0].value = &ia->out;
 -	ia->args.force = true;
 -	ia->args.nocreds = true;
 -	ia->args.end = process_init_reply;
 -
 -	if (fuse_simple_background(fc, &ia->args, GFP_KERNEL) != 0)
 -		process_init_reply(fc, &ia->args, -ENOTCONN);
 +	req->out.argvar = 1;
 +	req->out.args[0].size = sizeof(struct fuse_init_out);
 +	req->out.args[0].value = &req->misc.init_out;
 +	req->end = process_init_reply;
 +	fuse_request_send_background(fc, req);
  }
+ EXPORT_SYMBOL_GPL(fuse_send_init);
  
  static void fuse_free_conn(struct fuse_conn *fc)
  {
diff --git a/fs/fuse/fuse_i.h b/fs/fuse/fuse_i.h
index d61dfba89ab0..01979c89c058 100644
--- a/fs/fuse/fuse_i.h
+++ b/fs/fuse/fuse_i.h
@@ -899,6 +899,7 @@ void fuse_conn_put(struct fuse_conn *fc);
 
 struct fuse_dev *fuse_dev_alloc(struct fuse_conn *fc);
 void fuse_dev_free(struct fuse_dev *fud);
+void fuse_send_init(struct fuse_conn *fc);
 
 /**
  * Add connection to control filesystem
* Unmerged path fs/fuse/inode.c
