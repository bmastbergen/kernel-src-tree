x86/ftrace: Set trampoline pages as executable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - x86/ftrace: Set trampoline pages as executa (Yauheni Kaliuta) [1762214]
Rebuild_FUZZ: 96.63%
commit-author Nadav Amit <namit@vmware.com>
commit 3c0dab44e22782359a0a706cbce72de99a22aa75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/3c0dab44.failed

Since alloc_module() will not set the pages as executable soon, set
ftrace trampoline pages as executable after they are allocated.

For the time being, do not change ftrace to use the text_poke()
interface. As a result, ftrace still breaks W^X.

	Signed-off-by: Nadav Amit <namit@vmware.com>
	Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Cc: <akpm@linux-foundation.org>
	Cc: <ard.biesheuvel@linaro.org>
	Cc: <deneen.t.dock@intel.com>
	Cc: <kernel-hardening@lists.openwall.com>
	Cc: <kristen@linux.intel.com>
	Cc: <linux_dti@icloud.com>
	Cc: <will.deacon@arm.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20190426001143.4983-10-namit@vmware.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 3c0dab44e22782359a0a706cbce72de99a22aa75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/ftrace.c
diff --cc arch/x86/kernel/ftrace.c
index d39185440d08,53ba1aa3a01f..000000000000
--- a/arch/x86/kernel/ftrace.c
+++ b/arch/x86/kernel/ftrace.c
@@@ -746,10 -730,12 +746,11 @@@ create_trampoline(struct ftrace_ops *op
  	unsigned long end_offset;
  	unsigned long op_offset;
  	unsigned long offset;
+ 	unsigned long npages;
  	unsigned long size;
 -	unsigned long retq;
 +	unsigned long ip;
  	unsigned long *ptr;
  	void *trampoline;
 -	void *ip;
  	/* 48 8b 15 <offset> is movq <offset>(%rip), %rdx */
  	unsigned const char op_ref[] = { 0x48, 0x8b, 0x15 };
  	union ftrace_op_code_union op_ptr;
@@@ -776,7 -762,8 +777,12 @@@
  	if (!trampoline)
  		return 0;
  
++<<<<<<< HEAD
 +	*tramp_size = size + MCOUNT_INSN_SIZE + sizeof(void *);
++=======
+ 	*tramp_size = size + RET_SIZE + sizeof(void *);
+ 	npages = DIV_ROUND_UP(*tramp_size, PAGE_SIZE);
++>>>>>>> 3c0dab44e227 (x86/ftrace: Set trampoline pages as executable)
  
  	/* Copy ftrace_caller onto the trampoline memory */
  	ret = probe_kernel_read(trampoline, (void *)start_offset, size);
@@@ -823,7 -808,16 +829,13 @@@
  	/* ALLOC_TRAMP flags lets us know we created it */
  	ops->flags |= FTRACE_OPS_FL_ALLOC_TRAMP;
  
+ 	/*
+ 	 * Module allocation needs to be completed by making the page
+ 	 * executable. The page is still writable, which is a security hazard,
+ 	 * but anyhow ftrace breaks W^X completely.
+ 	 */
+ 	set_memory_x((unsigned long)trampoline, npages);
  	return (unsigned long)trampoline;
 -fail:
 -	tramp_free(trampoline, *tramp_size);
 -	return 0;
  }
  
  static unsigned long calc_trampoline_call_offset(bool save_regs)
* Unmerged path arch/x86/kernel/ftrace.c
