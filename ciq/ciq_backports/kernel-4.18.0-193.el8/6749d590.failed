net: sched: include mpls actions in hardware intermediate representation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] sched: include mpls actions in hardware intermediate representation (Ivan Vecera) [1737820]
Rebuild_FUZZ: 96.40%
commit-author John Hurley <john.hurley@netronome.com>
commit 6749d59016981bca6d7000e40bdb08eed78dfa6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/6749d590.failed

A recent addition to TC actions is the ability to manipulate the MPLS
headers on packets.

In preparation to offload such actions to hardware, update the IR code to
accept and prepare the new actions.

Note that no driver currently impliments the MPLS dec_ttl action so this
is not included.

	Signed-off-by: John Hurley <john.hurley@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6749d59016981bca6d7000e40bdb08eed78dfa6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/flow_offload.h
#	include/net/tc_act/tc_mpls.h
#	net/sched/cls_api.c
diff --cc include/net/flow_offload.h
index 1f9db8aa6acb,00b9aab5fdc1..000000000000
--- a/include/net/flow_offload.h
+++ b/include/net/flow_offload.h
@@@ -128,6 -130,10 +128,13 @@@ enum flow_action_id 
  	FLOW_ACTION_QUEUE,
  	FLOW_ACTION_SAMPLE,
  	FLOW_ACTION_POLICE,
++<<<<<<< HEAD
++=======
+ 	FLOW_ACTION_CT,
+ 	FLOW_ACTION_MPLS_PUSH,
+ 	FLOW_ACTION_MPLS_POP,
+ 	FLOW_ACTION_MPLS_MANGLE,
++>>>>>>> 6749d5901698 (net: sched: include mpls actions in hardware intermediate representation)
  };
  
  /* This is mirroring enum pedit_header_type definition for easy mapping between
@@@ -177,6 -183,26 +184,29 @@@ struct flow_action_entry 
  			s64			burst;
  			u64			rate_bytes_ps;
  		} police;
++<<<<<<< HEAD
++=======
+ 		struct {				/* FLOW_ACTION_CT */
+ 			int action;
+ 			u16 zone;
+ 		} ct;
+ 		struct {				/* FLOW_ACTION_MPLS_PUSH */
+ 			u32		label;
+ 			__be16		proto;
+ 			u8		tc;
+ 			u8		bos;
+ 			u8		ttl;
+ 		} mpls_push;
+ 		struct {				/* FLOW_ACTION_MPLS_POP */
+ 			__be16		proto;
+ 		} mpls_pop;
+ 		struct {				/* FLOW_ACTION_MPLS_MANGLE */
+ 			u32		label;
+ 			u8		tc;
+ 			u8		bos;
+ 			u8		ttl;
+ 		} mpls_mangle;
++>>>>>>> 6749d5901698 (net: sched: include mpls actions in hardware intermediate representation)
  	};
  };
  
diff --cc net/sched/cls_api.c
index a2bdef3274d4,3565d9aa09aa..000000000000
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@@ -40,6 -35,8 +40,11 @@@
  #include <net/tc_act/tc_police.h>
  #include <net/tc_act/tc_sample.h>
  #include <net/tc_act/tc_skbedit.h>
++<<<<<<< HEAD
++=======
+ #include <net/tc_act/tc_ct.h>
+ #include <net/tc_act/tc_mpls.h>
++>>>>>>> 6749d5901698 (net: sched: include mpls actions in hardware intermediate representation)
  
  extern const struct nla_policy rtm_tca_policy[TCA_MAX + 1];
  
@@@ -3267,6 -3266,34 +3272,37 @@@ int tc_setup_flow_action(struct flow_ac
  			entry->police.burst = tcf_police_tcfp_burst(act);
  			entry->police.rate_bytes_ps =
  				tcf_police_rate_bytes_ps(act);
++<<<<<<< HEAD
++=======
+ 		} else if (is_tcf_ct(act)) {
+ 			entry->id = FLOW_ACTION_CT;
+ 			entry->ct.action = tcf_ct_action(act);
+ 			entry->ct.zone = tcf_ct_zone(act);
+ 		} else if (is_tcf_mpls(act)) {
+ 			switch (tcf_mpls_action(act)) {
+ 			case TCA_MPLS_ACT_PUSH:
+ 				entry->id = FLOW_ACTION_MPLS_PUSH;
+ 				entry->mpls_push.proto = tcf_mpls_proto(act);
+ 				entry->mpls_push.label = tcf_mpls_label(act);
+ 				entry->mpls_push.tc = tcf_mpls_tc(act);
+ 				entry->mpls_push.bos = tcf_mpls_bos(act);
+ 				entry->mpls_push.ttl = tcf_mpls_ttl(act);
+ 				break;
+ 			case TCA_MPLS_ACT_POP:
+ 				entry->id = FLOW_ACTION_MPLS_POP;
+ 				entry->mpls_pop.proto = tcf_mpls_proto(act);
+ 				break;
+ 			case TCA_MPLS_ACT_MODIFY:
+ 				entry->id = FLOW_ACTION_MPLS_MANGLE;
+ 				entry->mpls_mangle.label = tcf_mpls_label(act);
+ 				entry->mpls_mangle.tc = tcf_mpls_tc(act);
+ 				entry->mpls_mangle.bos = tcf_mpls_bos(act);
+ 				entry->mpls_mangle.ttl = tcf_mpls_ttl(act);
+ 				break;
+ 			default:
+ 				goto err_out;
+ 			}
++>>>>>>> 6749d5901698 (net: sched: include mpls actions in hardware intermediate representation)
  		} else {
  			goto err_out;
  		}
* Unmerged path include/net/tc_act/tc_mpls.h
* Unmerged path include/net/flow_offload.h
* Unmerged path include/net/tc_act/tc_mpls.h
* Unmerged path net/sched/cls_api.c
