powerpc/fadump: make use of memblock's bottom up allocation mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Hari Bathini <hbathini@linux.ibm.com>
commit 579ca1a27675485a99da50cd7fedc14232f817c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/579ca1a2.failed

Earlier, memblock_find_in_range() was not used to find the memory to
be reserved for FADump as bottom up allocation mode was not supported.
But since commit 79442ed189acb8b ("mm/memblock.c: introduce bottom-up
allocation mode") bottom up allocation mode is supported for memblock.
So, use it to find the memory to be reserved for FADump.

	Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/156821364211.5656.14336025460336135194.stgit@hbathini.in.ibm.com
(cherry picked from commit 579ca1a27675485a99da50cd7fedc14232f817c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/fadump.c
diff --cc arch/powerpc/kernel/fadump.c
index 56526469b148,da751402c649..000000000000
--- a/arch/powerpc/kernel/fadump.c
+++ b/arch/powerpc/kernel/fadump.c
@@@ -453,7 -342,9 +453,13 @@@ static void __init fadump_reserve_crash
  
  int __init fadump_reserve_mem(void)
  {
++<<<<<<< HEAD
 +	unsigned long base, size, memory_boundary;
++=======
+ 	bool is_memblock_bottom_up = memblock_bottom_up();
+ 	u64 base, size, mem_boundary, align = PAGE_SIZE;
+ 	int ret = 1;
++>>>>>>> 579ca1a27675 (powerpc/fadump: make use of memblock's bottom up allocation mode)
  
  	if (!fw_dump.fadump_enabled)
  		return 0;
@@@ -469,15 -359,15 +475,16 @@@
  	 * If dump is active then we have already calculated the size during
  	 * first kernel.
  	 */
 -	if (!fw_dump.dump_active) {
 -		fw_dump.boot_memory_size =
 -			PAGE_ALIGN(fadump_calculate_reserve_size());
 +	if (fdm_active)
 +		fw_dump.boot_memory_size = be64_to_cpu(fdm_active->rmr_region.source_len);
 +	else {
 +		fw_dump.boot_memory_size = fadump_calculate_reserve_size();
  #ifdef CONFIG_CMA
- 		if (!fw_dump.nocma)
+ 		if (!fw_dump.nocma) {
+ 			align = FADUMP_CMA_ALIGNMENT;
  			fw_dump.boot_memory_size =
- 				ALIGN(fw_dump.boot_memory_size,
- 							FADUMP_CMA_ALIGNMENT);
+ 				ALIGN(fw_dump.boot_memory_size, align);
+ 		}
  #endif
  	}
  
@@@ -539,33 -421,43 +546,44 @@@
  	} else {
  		/*
  		 * Reserve memory at an offset closer to bottom of the RAM to
- 		 * minimize the impact of memory hot-remove operation. We can't
- 		 * use memblock_find_in_range() here since it doesn't allocate
- 		 * from bottom to top.
+ 		 * minimize the impact of memory hot-remove operation.
  		 */
++<<<<<<< HEAD
 +		for (base = fw_dump.boot_memory_size;
 +		     base <= (memory_boundary - size);
 +		     base += size) {
 +			if (memblock_is_region_memory(base, size) &&
 +			    !memblock_is_region_reserved(base, size))
 +				break;
 +		}
 +		if ((base > (memory_boundary - size)) ||
 +		    memblock_reserve(base, size)) {
 +			pr_err("Failed to reserve memory\n");
 +			return 0;
 +		}
 +
 +		pr_info("Reserved %ldMB of memory at %ldMB for firmware-"
 +			"assisted dump (System RAM: %ldMB)\n",
 +			(unsigned long)(size >> 20),
 +			(unsigned long)(base >> 20),
 +			(unsigned long)(memblock_phys_mem_size() >> 20));
 +
++=======
+ 		memblock_set_bottom_up(true);
+ 		base = memblock_find_in_range(base, mem_boundary, size, align);
+ 
+ 		/* Restore the previous allocation mode */
+ 		memblock_set_bottom_up(is_memblock_bottom_up);
+ 
+ 		if (!base) {
+ 			pr_err("Failed to find memory chunk for reservation!\n");
+ 			goto error_out;
+ 		}
++>>>>>>> 579ca1a27675 (powerpc/fadump: make use of memblock's bottom up allocation mode)
  		fw_dump.reserve_dump_area_start = base;
 -
 -		/*
 -		 * Calculate the kernel metadata address and register it with
 -		 * f/w if the platform supports.
 -		 */
 -		if (fw_dump.ops->fadump_setup_metadata &&
 -		    (fw_dump.ops->fadump_setup_metadata(&fw_dump) < 0))
 -			goto error_out;
 -
 -		if (memblock_reserve(base, size)) {
 -			pr_err("Failed to reserve memory!\n");
 -			goto error_out;
 -		}
 -
 -		pr_info("Reserved %lldMB of memory at %#016llx (System RAM: %lldMB)\n",
 -			(size >> 20), base, (memblock_phys_mem_size() >> 20));
 -
 -		ret = fadump_cma_init();
 +		return fadump_cma_init();
  	}
 -
 -	return ret;
 -error_out:
 -	fw_dump.fadump_enabled = 0;
 -	return 0;
 +	return 1;
  }
  
  unsigned long __init arch_reserved_kernel_pages(void)
* Unmerged path arch/powerpc/kernel/fadump.c
