iommu/vt-d: Cleanup after delegating DMA domain to generic iommu

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [iommu] vt-d: Cleanup after delegating DMA domain to generic iommu (Jerry Snitselaar) [1742234]
Rebuild_FUZZ: 95.08%
commit-author Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
commit 16c9e29e12e8edbdf437001f46cf3f557aca80e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/16c9e29e.failed

[No functional changes]

1. Starting with commit df4f3c603aeb ("iommu/vt-d: Remove static identity
map code") there are no callers for iommu_prepare_rmrr_dev() but the
implementation of the function still exists, so remove it. Also, as a
ripple effect remove get_domain_for_dev() and iommu_prepare_identity_map()
because they aren't being used either.

2. Remove extra new line in couple of places.

	Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 16c9e29e12e8edbdf437001f46cf3f557aca80e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel-iommu.c
diff --cc drivers/iommu/intel-iommu.c
index a19e4e8d8112,8c6ed39dec01..000000000000
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@@ -2691,58 -2724,6 +2664,61 @@@ static int domain_prepare_identity_map(
  	return iommu_domain_identity_map(domain, start, end);
  }
  
++<<<<<<< HEAD
 +static int iommu_prepare_identity_map(struct device *dev,
 +				      unsigned long long start,
 +				      unsigned long long end)
 +{
 +	struct dmar_domain *domain;
 +	int ret;
 +
 +	domain = get_domain_for_dev(dev, DEFAULT_DOMAIN_ADDRESS_WIDTH);
 +	if (!domain)
 +		return -ENOMEM;
 +
 +	ret = domain_prepare_identity_map(dev, domain, start, end);
 +	if (ret)
 +		domain_exit(domain);
 +
 +	return ret;
 +}
 +
 +static inline int iommu_prepare_rmrr_dev(struct dmar_rmrr_unit *rmrr,
 +					 struct device *dev)
 +{
 +	if (dev->archdata.iommu == DUMMY_DEVICE_DOMAIN_INFO)
 +		return 0;
 +	return iommu_prepare_identity_map(dev, rmrr->base_address,
 +					  rmrr->end_address);
 +}
 +
 +#ifdef CONFIG_INTEL_IOMMU_FLOPPY_WA
 +static inline void iommu_prepare_isa(void)
 +{
 +	struct pci_dev *pdev;
 +	int ret;
 +
 +	pdev = pci_get_class(PCI_CLASS_BRIDGE_ISA << 8, NULL);
 +	if (!pdev)
 +		return;
 +
 +	pr_info("Prepare 0-16MiB unity mapping for LPC\n");
 +	ret = iommu_prepare_identity_map(&pdev->dev, 0, 16*1024*1024 - 1);
 +
 +	if (ret)
 +		pr_err("Failed to create 0-16MiB identity map - floppy might not work\n");
 +
 +	pci_dev_put(pdev);
 +}
 +#else
 +static inline void iommu_prepare_isa(void)
 +{
 +	return;
 +}
 +#endif /* !CONFIG_INTEL_IOMMU_FLPY_WA */
 +
++=======
++>>>>>>> 16c9e29e12e8 (iommu/vt-d: Cleanup after delegating DMA domain to generic iommu)
  static int md_domain_init(struct dmar_domain *domain, int guest_width);
  
  static int __init si_domain_init(int hw)
* Unmerged path drivers/iommu/intel-iommu.c
