x86/tsc: Initialize cyc2ns when tsc frequency is determined

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [x86] tsc: Initialize cyc2ns when tsc frequency is determined (Al Stone) [1739729 1725581]
Rebuild_FUZZ: 96.49%
commit-author Pavel Tatashin <pasha.tatashin@oracle.com>
commit e2a9ca29b5edc89da2fddeae30e1070b272395c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/e2a9ca29.failed

cyc2ns converts tsc to nanoseconds, and it is handled in a per-cpu data
structure.

Currently, the setup code for c2ns data for every possible CPU goes through
the same sequence of calculations as for the boot CPU, but is based on the
same tsc frequency as the boot CPU, and thus this is not necessary.

Initialize the boot cpu when tsc frequency is determined. Copy the
calculated data from the boot CPU to the other CPUs in tsc_init().

In addition do the following:

 - Remove unnecessary zeroing of c2ns data by removing cyc2ns_data_init()

 - Split set_cyc2ns_scale() into two functions, so set_cyc2ns_scale() can be
   called when system is up, and wraps around __set_cyc2ns_scale() that can
   be called directly when system is booting but avoids saving restoring
   IRQs and going and waking up from idle.

	Suggested-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Pavel Tatashin <pasha.tatashin@oracle.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: steven.sistare@oracle.com
	Cc: daniel.m.jordan@oracle.com
	Cc: linux@armlinux.org.uk
	Cc: schwidefsky@de.ibm.com
	Cc: heiko.carstens@de.ibm.com
	Cc: john.stultz@linaro.org
	Cc: sboyd@codeaurora.org
	Cc: hpa@zytor.com
	Cc: douly.fnst@cn.fujitsu.com
	Cc: peterz@infradead.org
	Cc: prarit@redhat.com
	Cc: feng.tang@intel.com
	Cc: pmladek@suse.com
	Cc: gnomes@lxorguk.ukuu.org.uk
	Cc: linux-s390@vger.kernel.org
	Cc: boris.ostrovsky@oracle.com
	Cc: jgross@suse.com
	Cc: pbonzini@redhat.com
Link: https://lkml.kernel.org/r/20180719205545.16512-21-pasha.tatashin@oracle.com

(cherry picked from commit e2a9ca29b5edc89da2fddeae30e1070b272395c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/tsc.c
diff --cc arch/x86/kernel/tsc.c
index d8de174f9493,7ea0718a4c75..000000000000
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@@ -103,24 -103,7 +103,28 @@@ void __always_inline cyc2ns_read_end(vo
   *                      -johnstul@us.ibm.com "math is hard, lets go shopping!"
   */
  
++<<<<<<< HEAD
 +static void cyc2ns_data_init(struct cyc2ns_data *data)
 +{
 +	data->cyc2ns_mul = 0;
 +	data->cyc2ns_shift = 0;
 +	data->cyc2ns_offset = 0;
 +}
 +
 +static void __init cyc2ns_init(int cpu)
 +{
 +	struct cyc2ns *c2n = &per_cpu(cyc2ns, cpu);
 +
 +	cyc2ns_data_init(&c2n->data[0]);
 +	cyc2ns_data_init(&c2n->data[1]);
 +
 +	seqcount_init(&c2n->seq);
 +}
 +
 +static __always_inline unsigned long long cycles_2_ns(unsigned long long cyc)
++=======
+ static inline unsigned long long cycles_2_ns(unsigned long long cyc)
++>>>>>>> e2a9ca29b5ed (x86/tsc: Initialize cyc2ns when tsc frequency is determined)
  {
  	struct cyc2ns_data data;
  	unsigned long long ns;
* Unmerged path arch/x86/kernel/tsc.c
