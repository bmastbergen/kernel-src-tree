PCI/PM: Use pci_power_up() in pci_set_power_state()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit adfac8f6b7396b408fa9a8f40ea41112bebb980f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/adfac8f6.failed

Make it explicitly clear that the code to put devices into D0 in
pci_set_power_state() and in pci_pm_default_resume_early() is the
same by making the latter use pci_power_up() for transitions into D0.

Code rearrangement, no intentional functional impact.

Link: https://lore.kernel.org/r/2520019.OZ1nXS5aSj@kreacher
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
(cherry picked from commit adfac8f6b7396b408fa9a8f40ea41112bebb980f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci.c
diff --cc drivers/pci/pci.c
index 371c0cd17730,9f0977d0ac5a..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -1110,10 -1127,13 +1120,20 @@@ int pci_set_power_state(struct pci_dev 
  	if (dev->current_state == state)
  		return 0;
  
++<<<<<<< HEAD
 +	__pci_start_power_transition(dev, state);
 +
 +	/* This device is quirked not to be put into D3, so
 +	   don't put it in D3 */
++=======
+ 	if (state == PCI_D0)
+ 		return pci_power_up(dev);
+ 
+ 	/*
+ 	 * This device is quirked not to be put into D3, so don't put it in
+ 	 * D3
+ 	 */
++>>>>>>> adfac8f6b739 (PCI/PM: Use pci_power_up() in pci_set_power_state())
  	if (state >= PCI_D3hot && (dev->dev_flags & PCI_DEV_FLAGS_NO_D3))
  		return 0;
  
* Unmerged path drivers/pci/pci.c
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index af1ee66b6d1f..60188ba421aa 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -80,7 +80,7 @@ struct pci_platform_pm_ops {
 int pci_set_platform_pm(const struct pci_platform_pm_ops *ops);
 void pci_update_current_state(struct pci_dev *dev, pci_power_t state);
 void pci_refresh_power_state(struct pci_dev *dev);
-void pci_power_up(struct pci_dev *dev);
+int pci_power_up(struct pci_dev *dev);
 void pci_disable_enabled_device(struct pci_dev *dev);
 int pci_finish_runtime_suspend(struct pci_dev *dev);
 void pcie_clear_root_pme_status(struct pci_dev *dev);
