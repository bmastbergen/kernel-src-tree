perf tools: Introduce rlimit__bump_memlock() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 4975223b8156c14f0537dcde1554f050fb4d29bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4975223b.failed

Just like the BPF guys did when faced with failures with map creation,
etc, i.e. their solution is:

  tools/testing/selftests/bpf/bpf_rlimit.h

For perf use this function in 'perf test' and in 'perf trace'.

Make it bump to 4 times the current value, if it fails twice the current
value and if it still fails, warn that things like BPF map creation may
fail, to help in diagnosing the problem.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-muvqef2i7n6pzqbmu7tn2d2y@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 4975223b8156c14f0537dcde1554f050fb4d29bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/Build
diff --cc tools/perf/util/Build
index 32eb2e011c5d,14f812bb07a7..000000000000
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@@ -1,125 -1,131 +1,228 @@@
++<<<<<<< HEAD
 +libperf-y += annotate.o
 +libperf-y += block-range.o
 +libperf-y += build-id.o
 +libperf-y += config.o
 +libperf-y += ctype.o
 +libperf-y += db-export.o
 +libperf-y += env.o
 +libperf-y += event.o
 +libperf-y += evlist.o
 +libperf-y += evsel.o
 +libperf-y += evsel_fprintf.o
 +libperf-y += find_bit.o
 +libperf-y += kallsyms.o
 +libperf-y += levenshtein.o
 +libperf-y += llvm-utils.o
 +libperf-y += mmap.o
 +libperf-y += memswap.o
 +libperf-y += parse-events.o
 +libperf-y += perf_regs.o
 +libperf-y += path.o
 +libperf-y += print_binary.o
 +libperf-y += rbtree.o
 +libperf-y += libstring.o
 +libperf-y += bitmap.o
 +libperf-y += hweight.o
 +libperf-y += smt.o
 +libperf-y += strbuf.o
 +libperf-y += string.o
 +libperf-y += strlist.o
 +libperf-y += strfilter.o
 +libperf-y += top.o
 +libperf-y += usage.o
 +libperf-y += dso.o
 +libperf-y += symbol.o
 +libperf-y += symbol_fprintf.o
 +libperf-y += color.o
 +libperf-y += color_config.o
 +libperf-y += metricgroup.o
 +libperf-y += header.o
 +libperf-y += callchain.o
 +libperf-y += values.o
 +libperf-y += debug.o
 +libperf-y += machine.o
 +libperf-y += map.o
 +libperf-y += pstack.o
 +libperf-y += session.o
 +libperf-y += sample-raw.o
 +libperf-y += s390-sample-raw.o
 +libperf-$(CONFIG_TRACE) += syscalltbl.o
 +libperf-y += ordered-events.o
 +libperf-y += namespaces.o
 +libperf-y += comm.o
 +libperf-y += thread.o
 +libperf-y += thread_map.o
 +libperf-y += trace-event-parse.o
 +libperf-y += parse-events-flex.o
 +libperf-y += parse-events-bison.o
 +libperf-y += pmu.o
 +libperf-y += pmu-flex.o
 +libperf-y += pmu-bison.o
 +libperf-y += trace-event-read.o
 +libperf-y += trace-event-info.o
 +libperf-y += trace-event-scripting.o
 +libperf-y += trace-event.o
 +libperf-y += svghelper.o
 +libperf-y += sort.o
 +libperf-y += hist.o
 +libperf-y += util.o
 +libperf-y += xyarray.o
 +libperf-y += cpumap.o
 +libperf-y += cgroup.o
 +libperf-y += target.o
 +libperf-y += rblist.o
 +libperf-y += intlist.o
 +libperf-y += vdso.o
 +libperf-y += counts.o
 +libperf-y += stat.o
 +libperf-y += stat-shadow.o
 +libperf-y += stat-display.o
 +libperf-y += record.o
 +libperf-y += srcline.o
 +libperf-y += srccode.o
 +libperf-y += data.o
 +libperf-y += tsc.o
 +libperf-y += cloexec.o
 +libperf-y += call-path.o
 +libperf-y += rwsem.o
 +libperf-y += thread-stack.o
 +libperf-$(CONFIG_AUXTRACE) += auxtrace.o
 +libperf-$(CONFIG_AUXTRACE) += intel-pt-decoder/
 +libperf-$(CONFIG_AUXTRACE) += intel-pt.o
 +libperf-$(CONFIG_AUXTRACE) += intel-bts.o
 +libperf-$(CONFIG_AUXTRACE) += arm-spe.o
 +libperf-$(CONFIG_AUXTRACE) += arm-spe-pkt-decoder.o
 +libperf-$(CONFIG_AUXTRACE) += s390-cpumsf.o
++=======
+ perf-y += annotate.o
+ perf-y += block-range.o
+ perf-y += build-id.o
+ perf-y += config.o
+ perf-y += ctype.o
+ perf-y += db-export.o
+ perf-y += env.o
+ perf-y += event.o
+ perf-y += evlist.o
+ perf-y += evsel.o
+ perf-y += evsel_fprintf.o
+ perf-y += find_bit.o
+ perf-y += get_current_dir_name.o
+ perf-y += kallsyms.o
+ perf-y += levenshtein.o
+ perf-y += llvm-utils.o
+ perf-y += mmap.o
+ perf-y += memswap.o
+ perf-y += parse-events.o
+ perf-y += perf_regs.o
+ perf-y += path.o
+ perf-y += print_binary.o
+ perf-y += rlimit.o
+ perf-y += argv_split.o
+ perf-y += rbtree.o
+ perf-y += libstring.o
+ perf-y += bitmap.o
+ perf-y += hweight.o
+ perf-y += zalloc.o
+ perf-y += smt.o
+ perf-y += strbuf.o
+ perf-y += string.o
+ perf-y += strlist.o
+ perf-y += strfilter.o
+ perf-y += top.o
+ perf-y += usage.o
+ perf-y += dso.o
+ perf-y += symbol.o
+ perf-y += symbol_fprintf.o
+ perf-y += color.o
+ perf-y += color_config.o
+ perf-y += metricgroup.o
+ perf-y += header.o
+ perf-y += callchain.o
+ perf-y += values.o
+ perf-y += debug.o
+ perf-y += machine.o
+ perf-y += map.o
+ perf-y += pstack.o
+ perf-y += session.o
+ perf-y += sample-raw.o
+ perf-y += s390-sample-raw.o
+ perf-$(CONFIG_TRACE) += syscalltbl.o
+ perf-y += ordered-events.o
+ perf-y += namespaces.o
+ perf-y += comm.o
+ perf-y += thread.o
+ perf-y += thread_map.o
+ perf-y += trace-event-parse.o
+ perf-y += parse-events-flex.o
+ perf-y += parse-events-bison.o
+ perf-y += pmu.o
+ perf-y += pmu-flex.o
+ perf-y += pmu-bison.o
+ perf-y += trace-event-read.o
+ perf-y += trace-event-info.o
+ perf-y += trace-event-scripting.o
+ perf-y += trace-event.o
+ perf-y += svghelper.o
+ perf-y += sort.o
+ perf-y += hist.o
+ perf-y += util.o
+ perf-y += xyarray.o
+ perf-y += cpumap.o
+ perf-y += cputopo.o
+ perf-y += cgroup.o
+ perf-y += target.o
+ perf-y += rblist.o
+ perf-y += intlist.o
+ perf-y += vdso.o
+ perf-y += counts.o
+ perf-y += stat.o
+ perf-y += stat-shadow.o
+ perf-y += stat-display.o
+ perf-y += record.o
+ perf-y += srcline.o
+ perf-y += srccode.o
+ perf-y += data.o
+ perf-y += tsc.o
+ perf-y += cloexec.o
+ perf-y += call-path.o
+ perf-y += rwsem.o
+ perf-y += thread-stack.o
+ perf-$(CONFIG_AUXTRACE) += auxtrace.o
+ perf-$(CONFIG_AUXTRACE) += intel-pt-decoder/
+ perf-$(CONFIG_AUXTRACE) += intel-pt.o
+ perf-$(CONFIG_AUXTRACE) += intel-bts.o
+ perf-$(CONFIG_AUXTRACE) += arm-spe.o
+ perf-$(CONFIG_AUXTRACE) += arm-spe-pkt-decoder.o
+ perf-$(CONFIG_AUXTRACE) += s390-cpumsf.o
++>>>>>>> 4975223b8156 (perf tools: Introduce rlimit__bump_memlock() helper)
  
  ifdef CONFIG_LIBOPENCSD
 -perf-$(CONFIG_AUXTRACE) += cs-etm.o
 -perf-$(CONFIG_AUXTRACE) += cs-etm-decoder/
 +libperf-$(CONFIG_AUXTRACE) += cs-etm.o
 +libperf-$(CONFIG_AUXTRACE) += cs-etm-decoder/
  endif
  
 -perf-y += parse-branch-options.o
 -perf-y += dump-insn.o
 -perf-y += parse-regs-options.o
 -perf-y += term.o
 -perf-y += help-unknown-cmd.o
 -perf-y += mem-events.o
 -perf-y += vsprintf.o
 -perf-y += units.o
 -perf-y += time-utils.o
 -perf-y += expr-bison.o
 -perf-y += branch.o
 -perf-y += mem2node.o
 -
 -perf-$(CONFIG_LIBBPF) += bpf-loader.o
 -perf-$(CONFIG_LIBBPF) += bpf_map.o
 -perf-$(CONFIG_BPF_PROLOGUE) += bpf-prologue.o
 -perf-$(CONFIG_LIBELF) += symbol-elf.o
 -perf-$(CONFIG_LIBELF) += probe-file.o
 -perf-$(CONFIG_LIBELF) += probe-event.o
 +libperf-y += parse-branch-options.o
 +libperf-y += dump-insn.o
 +libperf-y += parse-regs-options.o
 +libperf-y += term.o
 +libperf-y += help-unknown-cmd.o
 +libperf-y += mem-events.o
 +libperf-y += vsprintf.o
 +libperf-y += units.o
 +libperf-y += time-utils.o
 +libperf-y += expr-bison.o
 +libperf-y += branch.o
 +libperf-y += mem2node.o
 +
 +libperf-$(CONFIG_LIBBPF) += bpf-loader.o
 +libperf-$(CONFIG_BPF_PROLOGUE) += bpf-prologue.o
 +libperf-$(CONFIG_LIBELF) += symbol-elf.o
 +libperf-$(CONFIG_LIBELF) += probe-file.o
 +libperf-$(CONFIG_LIBELF) += probe-event.o
  
  ifndef CONFIG_LIBELF
 -perf-y += symbol-minimal.o
 +libperf-y += symbol-minimal.o
  endif
  
  ifndef CONFIG_SETNS
* Unmerged path tools/perf/util/Build
diff --git a/tools/perf/util/rlimit.c b/tools/perf/util/rlimit.c
new file mode 100644
index 000000000000..13521d392a22
--- /dev/null
+++ b/tools/perf/util/rlimit.c
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: LGPL-2.1 */
+
+#include "util/debug.h"
+#include "util/rlimit.h"
+#include <sys/time.h>
+#include <sys/resource.h>
+
+/*
+ * Bump the memlock so that we can get bpf maps of a reasonable size,
+ * like the ones used with 'perf trace' and with 'perf test bpf',
+ * improve this to some specific request if needed.
+ */
+void rlimit__bump_memlock(void)
+{
+	struct rlimit rlim;
+
+	if (getrlimit(RLIMIT_MEMLOCK, &rlim) == 0) {
+		rlim.rlim_cur *= 4;
+		rlim.rlim_max *= 4;
+
+		if (setrlimit(RLIMIT_MEMLOCK, &rlim) < 0) {
+			rlim.rlim_cur /= 2;
+			rlim.rlim_max /= 2;
+
+			if (setrlimit(RLIMIT_MEMLOCK, &rlim) < 0)
+				pr_debug("Couldn't bump rlimit(MEMLOCK), failures may take place when creating BPF maps, etc\n");
+		}
+	}
+}
diff --git a/tools/perf/util/rlimit.h b/tools/perf/util/rlimit.h
new file mode 100644
index 000000000000..9f59d8e710a3
--- /dev/null
+++ b/tools/perf/util/rlimit.h
@@ -0,0 +1,6 @@
+#ifndef __PERF_RLIMIT_H_
+#define __PERF_RLIMIT_H_
+/* SPDX-License-Identifier: LGPL-2.1 */
+
+void rlimit__bump_memlock(void);
+#endif // __PERF_RLIMIT_H_
