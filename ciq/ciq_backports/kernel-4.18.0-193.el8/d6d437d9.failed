drm/mgag200: Store flags from PCI driver data in device structure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Thomas Zimmermann <tzimmermann@suse.de>
commit d6d437d97d54c85a1a93967b2745e31dff03365a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d6d437d9.failed

The flags field in struct mga_device has been unused so far. We now
use it to store flag bits from the PCI driver.

	Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
	Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Fixes: 81da87f63a1e ("drm: Replace drm_gem_vram_push_to_system() with kunmap + unpin")
	Cc: John Donnelly <john.p.donnelly@oracle.com>
	Cc: Gerd Hoffmann <kraxel@redhat.com>
	Cc: Dave Airlie <airlied@redhat.com>
	Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
	Cc: Maxime Ripard <mripard@kernel.org>
	Cc: David Airlie <airlied@linux.ie>
	Cc: Sam Ravnborg <sam@ravnborg.org>
	Cc: "Y.C. Chen" <yc_chen@aspeedtech.com>
	Cc: Neil Armstrong <narmstrong@baylibre.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: "Jos√© Roberto de Souza" <jose.souza@intel.com>
	Cc: Andrzej Pietrasiewicz <andrzej.p@collabora.com>
	Cc: dri-devel@lists.freedesktop.org
	Cc: <stable@vger.kernel.org> # v5.3+
Link: https://patchwork.freedesktop.org/patch/msgid/20191126101529.20356-3-tzimmermann@suse.de
(cherry picked from commit d6d437d97d54c85a1a93967b2745e31dff03365a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/mgag200/mgag200_drv.h
#	drivers/gpu/drm/mgag200/mgag200_main.c
diff --cc drivers/gpu/drm/mgag200/mgag200_drv.h
index 0aaedc554879,4b4f9ce74a84..000000000000
--- a/drivers/gpu/drm/mgag200/mgag200_drv.h
+++ b/drivers/gpu/drm/mgag200/mgag200_drv.h
@@@ -185,6 -150,9 +185,12 @@@ enum mga_type 
  	G200_EW3,
  };
  
++<<<<<<< HEAD
++=======
+ #define MGAG200_TYPE_MASK	(0x000000ff)
+ #define MGAG200_FLAG_MASK	(0x00ffff00)
+ 
++>>>>>>> d6d437d97d54 (drm/mgag200: Store flags from PCI driver data in device structure)
  #define IS_G200_SE(mdev) (mdev->type == G200_SE_A || mdev->type == G200_SE_B)
  
  struct mga_device {
@@@ -219,23 -184,18 +225,32 @@@
  	u32 unique_rev_id;
  };
  
 -static inline enum mga_type
 -mgag200_type_from_driver_data(kernel_ulong_t driver_data)
 +
 +struct mgag200_bo {
 +	struct ttm_buffer_object bo;
 +	struct ttm_placement placement;
 +	struct ttm_bo_kmap_obj kmap;
 +	struct drm_gem_object gem;
 +	struct ttm_place placements[3];
 +	int pin_count;
 +};
 +#define gem_to_mga_bo(gobj) container_of((gobj), struct mgag200_bo, gem)
 +
 +static inline struct mgag200_bo *
 +mgag200_bo(struct ttm_buffer_object *bo)
  {
 -	return (enum mga_type)(driver_data & MGAG200_TYPE_MASK);
 +	return container_of(bo, struct mgag200_bo, bo);
  }
  
++<<<<<<< HEAD
++=======
+ static inline unsigned long
+ mgag200_flags_from_driver_data(kernel_ulong_t driver_data)
+ {
+ 	return driver_data & MGAG200_FLAG_MASK;
+ }
+ 
++>>>>>>> d6d437d97d54 (drm/mgag200: Store flags from PCI driver data in device structure)
  				/* mgag200_mode.c */
  int mgag200_modeset_init(struct mga_device *mdev);
  void mgag200_modeset_fini(struct mga_device *mdev);
diff --cc drivers/gpu/drm/mgag200/mgag200_main.c
index 163255099779,e1bc5b0aa774..000000000000
--- a/drivers/gpu/drm/mgag200/mgag200_main.c
+++ b/drivers/gpu/drm/mgag200/mgag200_main.c
@@@ -152,7 -94,8 +152,12 @@@ static int mgag200_device_init(struct d
  	struct mga_device *mdev = dev->dev_private;
  	int ret, option;
  
++<<<<<<< HEAD
 +	mdev->type = flags;
++=======
+ 	mdev->flags = mgag200_flags_from_driver_data(flags);
+ 	mdev->type = mgag200_type_from_driver_data(flags);
++>>>>>>> d6d437d97d54 (drm/mgag200: Store flags from PCI driver data in device structure)
  
  	/* Hardcode the number of CRTCs to 1 */
  	mdev->num_crtc = 1;
* Unmerged path drivers/gpu/drm/mgag200/mgag200_drv.h
* Unmerged path drivers/gpu/drm/mgag200/mgag200_main.c
