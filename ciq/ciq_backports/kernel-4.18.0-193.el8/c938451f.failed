net/mlx5e: Use vhca_id in generating representor port_index

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5e: Use vhca_id in generating representor port_index (Alaa Hleihel) [1663231 1724336]
Rebuild_FUZZ: 96.49%
commit-author Parav Pandit <parav@mellanox.com>
commit c938451f6b9ccbf25eceb27fe1d1c24fd98af923
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/c938451f.failed

It is desired to use unique port indices when multiple pci devices'
devlink instance have the same switch-id.

Make use of vhca-id to generate such unique devlink port indices.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit c938451f6b9ccbf25eceb27fe1d1c24fd98af923)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 1ddcc10576ec,7ce5cb6e527e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -1753,8 -1734,67 +1753,69 @@@ static const struct mlx5e_profile mlx5e
  	.rx_handlers.handle_rx_cqe       = mlx5e_handle_rx_cqe_rep,
  	.rx_handlers.handle_rx_cqe_mpwqe = mlx5e_handle_rx_cqe_mpwrq,
  	.max_tc			= MLX5E_MAX_NUM_TC,
 -	.rq_groups		= MLX5E_NUM_RQ_GROUPS(REGULAR),
  };
  
++<<<<<<< HEAD
++=======
+ static bool
+ is_devlink_port_supported(const struct mlx5_core_dev *dev,
+ 			  const struct mlx5e_rep_priv *rpriv)
+ {
+ 	return rpriv->rep->vport == MLX5_VPORT_UPLINK ||
+ 	       rpriv->rep->vport == MLX5_VPORT_PF ||
+ 	       mlx5_eswitch_is_vf_vport(dev->priv.eswitch, rpriv->rep->vport);
+ }
+ 
+ static unsigned int
+ vport_to_devlink_port_index(const struct mlx5_core_dev *dev, u16 vport_num)
+ {
+ 	return (MLX5_CAP_GEN(dev, vhca_id) << 16) | vport_num;
+ }
+ 
+ static int register_devlink_port(struct mlx5_core_dev *dev,
+ 				 struct mlx5e_rep_priv *rpriv)
+ {
+ 	struct devlink *devlink = priv_to_devlink(dev);
+ 	struct mlx5_eswitch_rep *rep = rpriv->rep;
+ 	struct netdev_phys_item_id ppid = {};
+ 	unsigned int dl_port_index = 0;
+ 
+ 	if (!is_devlink_port_supported(dev, rpriv))
+ 		return 0;
+ 
+ 	mlx5e_rep_get_port_parent_id(rpriv->netdev, &ppid);
+ 
+ 	if (rep->vport == MLX5_VPORT_UPLINK) {
+ 		devlink_port_attrs_set(&rpriv->dl_port,
+ 				       DEVLINK_PORT_FLAVOUR_PHYSICAL,
+ 				       PCI_FUNC(dev->pdev->devfn), false, 0,
+ 				       &ppid.id[0], ppid.id_len);
+ 		dl_port_index = vport_to_devlink_port_index(dev, rep->vport);
+ 	} else if (rep->vport == MLX5_VPORT_PF) {
+ 		devlink_port_attrs_pci_pf_set(&rpriv->dl_port,
+ 					      &ppid.id[0], ppid.id_len,
+ 					      dev->pdev->devfn);
+ 		dl_port_index = rep->vport;
+ 	} else if (mlx5_eswitch_is_vf_vport(dev->priv.eswitch,
+ 					    rpriv->rep->vport)) {
+ 		devlink_port_attrs_pci_vf_set(&rpriv->dl_port,
+ 					      &ppid.id[0], ppid.id_len,
+ 					      dev->pdev->devfn,
+ 					      rep->vport - 1);
+ 		dl_port_index = vport_to_devlink_port_index(dev, rep->vport);
+ 	}
+ 
+ 	return devlink_port_register(devlink, &rpriv->dl_port, dl_port_index);
+ }
+ 
+ static void unregister_devlink_port(struct mlx5_core_dev *dev,
+ 				    struct mlx5e_rep_priv *rpriv)
+ {
+ 	if (is_devlink_port_supported(dev, rpriv))
+ 		devlink_port_unregister(&rpriv->dl_port);
+ }
+ 
++>>>>>>> c938451f6b9c (net/mlx5e: Use vhca_id in generating representor port_index)
  /* e-Switch vport representors */
  static int
  mlx5e_vport_rep_load(struct mlx5_core_dev *dev, struct mlx5_eswitch_rep *rep)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
