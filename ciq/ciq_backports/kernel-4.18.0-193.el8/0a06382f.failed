net/mlx5e: Encapsulate open/close queues into a function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5e: Encapsulate open/close queues into a function (Alaa Hleihel) [1724336]
Rebuild_FUZZ: 96.30%
commit-author Maxim Mikityanskiy <maximmi@mellanox.com>
commit 0a06382fa40601e750a9477e9cccffcb6cb4206c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/0a06382f.failed

Create new functions mlx5e_{open,close}_queues to encapsulate opening
and closing RQs and SQs, and call the new functions from
mlx5e_{open,close}_channel. It simplifies the existing functions a bit
and prepares them for the upcoming AF_XDP changes.

	Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Acked-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 0a06382fa40601e750a9477e9cccffcb6cb4206c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index c389378c3be2,c099f5a6124e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -1766,45 -1768,12 +1766,43 @@@ static void mlx5e_free_xps_cpumask(stru
  	free_cpumask_var(c->xps_cpumask);
  }
  
- static int mlx5e_open_channel(struct mlx5e_priv *priv, int ix,
- 			      struct mlx5e_params *params,
- 			      struct mlx5e_channel_param *cparam,
- 			      struct mlx5e_channel **cp)
+ static int mlx5e_open_queues(struct mlx5e_channel *c,
+ 			     struct mlx5e_params *params,
+ 			     struct mlx5e_channel_param *cparam)
  {
- 	int cpu = cpumask_first(mlx5_comp_irq_get_affinity_mask(priv->mdev, ix));
  	struct net_dim_cq_moder icocq_moder = {0, 0};
- 	struct net_device *netdev = priv->netdev;
- 	struct mlx5e_channel *c;
- 	unsigned int irq;
  	int err;
++<<<<<<< HEAD
 +	int eqn;
 +
 +	err = mlx5_vector2eqn(priv->mdev, ix, &eqn, &irq);
 +	if (err)
 +		return err;
 +
 +	c = kvzalloc_node(sizeof(*c), GFP_KERNEL, cpu_to_node(cpu));
 +	if (!c)
 +		return -ENOMEM;
 +
 +	c->priv     = priv;
 +	c->mdev     = priv->mdev;
 +	c->tstamp   = &priv->tstamp;
 +	c->ix       = ix;
 +	c->cpu      = cpu;
 +	c->pdev     = &priv->mdev->pdev->dev;
 +	c->netdev   = priv->netdev;
 +	c->mkey_be  = cpu_to_be32(priv->mdev->mlx5e_res.mkey.key);
 +	c->num_tc   = params->num_tc;
 +	c->xdp      = !!params->xdp_prog;
 +	c->stats    = &priv->channel_stats[ix].ch;
 +	c->irq_desc = irq_to_desc(irq);
 +
 +	err = mlx5e_alloc_xps_cpumask(c, params);
 +	if (err)
 +		goto err_free_channel;
 +
 +	netif_napi_add(netdev, &c->napi, mlx5e_napi_poll, 64);
++=======
++>>>>>>> 0a06382fa406 (net/mlx5e: Encapsulate open/close queues into a function)
  
  	err = mlx5e_open_cq(c, icocq_moder, &cparam->icosq_cq, &c->icosq.cq);
  	if (err)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
