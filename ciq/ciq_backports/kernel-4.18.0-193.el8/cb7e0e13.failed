RDMA/core: Add interface to read device namespace sharing mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Parav Pandit <parav@mellanox.com>
commit cb7e0e130503cb8e5ee6a7e8983bf71ed408516f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/cb7e0e13.failed

Add an interface via netlink command to query whether rdma devices are
shared among multiple net namespaces or not. When using RDMAtool, it can
be queried as,

$rdma system show netns
netns shared

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit cb7e0e130503cb8e5ee6a7e8983bf71ed408516f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/core_priv.h
#	drivers/infiniband/core/device.c
#	drivers/infiniband/core/nldev.c
#	include/uapi/rdma/rdma_netlink.h
diff --cc drivers/infiniband/core/core_priv.h
index 9d1d4bce8f87,30c7d4a46b76..000000000000
--- a/drivers/infiniband/core/core_priv.h
+++ b/drivers/infiniband/core/core_priv.h
@@@ -54,6 -54,9 +54,12 @@@ struct pkey_index_qp_list 
  	struct list_head    qp_list;
  };
  
++<<<<<<< HEAD
++=======
+ extern const struct attribute_group ib_dev_attr_group;
+ extern bool ib_devices_shared_netns;
+ 
++>>>>>>> cb7e0e130503 (RDMA/core: Add interface to read device namespace sharing mode)
  int ib_device_register_sysfs(struct ib_device *device);
  void ib_device_unregister_sysfs(struct ib_device *device);
  int ib_device_rename(struct ib_device *ibdev, const char *name);
diff --cc drivers/infiniband/core/device.c
index 3aa933cc02d9,0605208a73d3..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -72,21 -96,102 +72,61 @@@ static LIST_HEAD(device_list)
  static LIST_HEAD(client_list);
  #define CLIENT_REGISTERED XA_MARK_1
  static DEFINE_XARRAY_FLAGS(clients, XA_FLAGS_ALLOC);
 -static DECLARE_RWSEM(clients_rwsem);
  
  /*
++<<<<<<< HEAD
 + * device_mutex and lists_rwsem protect access to both device_list and
 + * clients.  device_mutex protects writer access by device and client
 + * registration / de-registration.  lists_rwsem protects reader access to
 + * these lists.  Iterators of these lists must lock it for read, while updates
 + * to the lists must be done with a write lock. A special case is when the
 + * device_mutex is locked. In this case locking the lists for read access is
 + * not necessary as the device_mutex implies it.
++=======
+  * If client_data is registered then the corresponding client must also still
+  * be registered.
+  */
+ #define CLIENT_DATA_REGISTERED XA_MARK_1
+ 
+ /**
+  * struct rdma_dev_net - rdma net namespace metadata for a net
+  * @net:	Pointer to owner net namespace
+  * @id:		xarray id to identify the net namespace.
+  */
+ struct rdma_dev_net {
+ 	possible_net_t net;
+ 	u32 id;
+ };
+ 
+ static unsigned int rdma_dev_net_id;
+ 
+ /*
+  * A list of net namespaces is maintained in an xarray. This is necessary
+  * because we can't get the locking right using the existing net ns list. We
+  * would require a init_net callback after the list is updated.
+  */
+ static DEFINE_XARRAY_FLAGS(rdma_nets, XA_FLAGS_ALLOC);
+ /*
+  * rwsem to protect accessing the rdma_nets xarray entries.
+  */
+ static DECLARE_RWSEM(rdma_nets_rwsem);
+ 
+ bool ib_devices_shared_netns = true;
+ module_param_named(netns_mode, ib_devices_shared_netns, bool, 0444);
+ MODULE_PARM_DESC(netns_mode,
+ 		 "Share device among net namespaces; default=1 (shared)");
+ /**
+  * rdma_dev_access_netns() - Return whether a rdma device can be accessed
+  *			     from a specified net namespace or not.
+  * @device:	Pointer to rdma device which needs to be checked
+  * @net:	Pointer to net namesapce for which access to be checked
++>>>>>>> cb7e0e130503 (RDMA/core: Add interface to read device namespace sharing mode)
   *
 - * rdma_dev_access_netns() - Return whether a rdma device can be accessed
 - *			     from a specified net namespace or not. When
 - *			     rdma device is in shared mode, it ignores the
 - *			     net namespace. When rdma device is exclusive
 - *			     to a net namespace, rdma device net namespace is
 - *			     checked against the specified one.
 + * lists_rwsem also protects access to the client data list.
   */
 -bool rdma_dev_access_netns(const struct ib_device *dev, const struct net *net)
 -{
 -	return (ib_devices_shared_netns ||
 -		net_eq(read_pnet(&dev->coredev.rdma_net), net));
 -}
 -EXPORT_SYMBOL(rdma_dev_access_netns);
 +static DEFINE_MUTEX(device_mutex);
 +static DECLARE_RWSEM(lists_rwsem);
  
 -/*
 - * xarray has this behavior where it won't iterate over NULL values stored in
 - * allocated arrays.  So we need our own iterator to see all values stored in
 - * the array. This does the same thing as xa_for_each except that it also
 - * returns NULL valued entries if the array is allocating. Simplified to only
 - * work on simple xarrays.
 - */
 -static void *xan_find_marked(struct xarray *xa, unsigned long *indexp,
 -			     xa_mark_t filter)
 -{
 -	XA_STATE(xas, xa, *indexp);
 -	void *entry;
 -
 -	rcu_read_lock();
 -	do {
 -		entry = xas_find_marked(&xas, ULONG_MAX, filter);
 -		if (xa_is_zero(entry))
 -			break;
 -	} while (xas_retry(&xas, entry));
 -	rcu_read_unlock();
 -
 -	if (entry) {
 -		*indexp = xas.xa_index;
 -		if (xa_is_zero(entry))
 -			return NULL;
 -		return entry;
 -	}
 -	return XA_ERROR(-ENOENT);
 -}
 -#define xan_for_each_marked(xa, index, entry, filter)                          \
 -	for (index = 0, entry = xan_find_marked(xa, &(index), filter);         \
 -	     !xa_is_err(entry);                                                \
 -	     (index)++, entry = xan_find_marked(xa, &(index), filter))
 -
 -/* RCU hash table mapping netdevice pointers to struct ib_port_data */
 -static DEFINE_SPINLOCK(ndev_hash_lock);
 -static DECLARE_HASHTABLE(ndev_hash, 5);
 -
 -static void free_netdevs(struct ib_device *ib_dev);
 -static void ib_unregister_work(struct work_struct *work);
 -static void __ib_unregister_device(struct ib_device *device);
  static int ib_security_change(struct notifier_block *nb, unsigned long event,
  			      void *lsm_data);
  static void ib_policy_change_task(struct work_struct *work);
diff --cc drivers/infiniband/core/nldev.c
index efccd8e0fb77,49c048738f94..000000000000
--- a/drivers/infiniband/core/nldev.c
+++ b/drivers/infiniband/core/nldev.c
@@@ -107,6 -109,14 +107,17 @@@ static const struct nla_policy nldev_po
  	[RDMA_NLDEV_ATTR_DRIVER_U32]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_DRIVER_S64]		= { .type = NLA_S64 },
  	[RDMA_NLDEV_ATTR_DRIVER_U64]		= { .type = NLA_U64 },
++<<<<<<< HEAD
++=======
+ 	[RDMA_NLDEV_ATTR_RES_PDN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_CQN]               = { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_MRN]               = { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_CM_IDN]            = { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_CTXN]              = { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_LINK_TYPE]		= { .type = NLA_NUL_STRING,
+ 				    .len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
+ 	[RDMA_NLDEV_SYS_ATTR_NETNS_MODE]	= { .type = NLA_U8 },
++>>>>>>> cb7e0e130503 (RDMA/core: Add interface to read device namespace sharing mode)
  };
  
  static int put_driver_name_print_type(struct sk_buff *msg, const char *name,
@@@ -1090,6 -1204,143 +1101,146 @@@ RES_GET_FUNCS(cq, RDMA_RESTRACK_CQ)
  RES_GET_FUNCS(pd, RDMA_RESTRACK_PD);
  RES_GET_FUNCS(mr, RDMA_RESTRACK_MR);
  
++<<<<<<< HEAD
++=======
+ static LIST_HEAD(link_ops);
+ static DECLARE_RWSEM(link_ops_rwsem);
+ 
+ static const struct rdma_link_ops *link_ops_get(const char *type)
+ {
+ 	const struct rdma_link_ops *ops;
+ 
+ 	list_for_each_entry(ops, &link_ops, list) {
+ 		if (!strcmp(ops->type, type))
+ 			goto out;
+ 	}
+ 	ops = NULL;
+ out:
+ 	return ops;
+ }
+ 
+ void rdma_link_register(struct rdma_link_ops *ops)
+ {
+ 	down_write(&link_ops_rwsem);
+ 	if (WARN_ON_ONCE(link_ops_get(ops->type)))
+ 		goto out;
+ 	list_add(&ops->list, &link_ops);
+ out:
+ 	up_write(&link_ops_rwsem);
+ }
+ EXPORT_SYMBOL(rdma_link_register);
+ 
+ void rdma_link_unregister(struct rdma_link_ops *ops)
+ {
+ 	down_write(&link_ops_rwsem);
+ 	list_del(&ops->list);
+ 	up_write(&link_ops_rwsem);
+ }
+ EXPORT_SYMBOL(rdma_link_unregister);
+ 
+ static int nldev_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	char ibdev_name[IB_DEVICE_NAME_MAX];
+ 	const struct rdma_link_ops *ops;
+ 	char ndev_name[IFNAMSIZ];
+ 	struct net_device *ndev;
+ 	char type[IFNAMSIZ];
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_NAME] ||
+ 	    !tb[RDMA_NLDEV_ATTR_LINK_TYPE] || !tb[RDMA_NLDEV_ATTR_NDEV_NAME])
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(ibdev_name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
+ 		    sizeof(ibdev_name));
+ 	if (strchr(ibdev_name, '%'))
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(type, tb[RDMA_NLDEV_ATTR_LINK_TYPE], sizeof(type));
+ 	nla_strlcpy(ndev_name, tb[RDMA_NLDEV_ATTR_NDEV_NAME],
+ 		    sizeof(ndev_name));
+ 
+ 	ndev = dev_get_by_name(&init_net, ndev_name);
+ 	if (!ndev)
+ 		return -ENODEV;
+ 
+ 	down_read(&link_ops_rwsem);
+ 	ops = link_ops_get(type);
+ #ifdef CONFIG_MODULES
+ 	if (!ops) {
+ 		up_read(&link_ops_rwsem);
+ 		request_module("rdma-link-%s", type);
+ 		down_read(&link_ops_rwsem);
+ 		ops = link_ops_get(type);
+ 	}
+ #endif
+ 	err = ops ? ops->newlink(ibdev_name, ndev) : -EINVAL;
+ 	up_read(&link_ops_rwsem);
+ 	dev_put(ndev);
+ 
+ 	return err;
+ }
+ 
+ static int nldev_dellink(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	struct ib_device *device;
+ 	u32 index;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_INDEX])
+ 		return -EINVAL;
+ 
+ 	index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
+ 	device = ib_device_get_by_index(sock_net(skb->sk), index);
+ 	if (!device)
+ 		return -EINVAL;
+ 
+ 	if (!(device->attrs.device_cap_flags & IB_DEVICE_ALLOW_USER_UNREG)) {
+ 		ib_device_put(device);
+ 		return -EINVAL;
+ 	}
+ 
+ 	ib_unregister_device_and_put(device);
+ 	return 0;
+ }
+ 
+ static int nldev_get_sys_get_dumpit(struct sk_buff *skb,
+ 				    struct netlink_callback *cb)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	struct nlmsghdr *nlh;
+ 	int err;
+ 
+ 	err = nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	nlh = nlmsg_put(skb, NETLINK_CB(cb->skb).portid, cb->nlh->nlmsg_seq,
+ 			RDMA_NL_GET_TYPE(RDMA_NL_NLDEV,
+ 					 RDMA_NLDEV_CMD_SYS_GET),
+ 			0, 0);
+ 
+ 	err = nla_put_u8(skb, RDMA_NLDEV_SYS_ATTR_NETNS_MODE,
+ 			 (u8)ib_devices_shared_netns);
+ 	if (err) {
+ 		nlmsg_cancel(skb, nlh);
+ 		return err;
+ 	}
+ 
+ 	nlmsg_end(skb, nlh);
+ 	return skb->len;
+ }
+ 
++>>>>>>> cb7e0e130503 (RDMA/core: Add interface to read device namespace sharing mode)
  static const struct rdma_nl_cbs nldev_cb_table[RDMA_NLDEV_NUM_OPS] = {
  	[RDMA_NLDEV_CMD_GET] = {
  		.doit = nldev_get_doit,
@@@ -1130,8 -1382,13 +1281,11 @@@
  		.dump = nldev_res_get_mr_dumpit,
  	},
  	[RDMA_NLDEV_CMD_RES_PD_GET] = {
 -		.doit = nldev_res_get_pd_doit,
  		.dump = nldev_res_get_pd_dumpit,
  	},
+ 	[RDMA_NLDEV_CMD_SYS_GET] = {
+ 		.dump = nldev_get_sys_get_dumpit,
+ 	},
  };
  
  void __init nldev_init(void)
diff --cc include/uapi/rdma/rdma_netlink.h
index 3a9e681e4257,6af88c736073..000000000000
--- a/include/uapi/rdma/rdma_netlink.h
+++ b/include/uapi/rdma/rdma_netlink.h
@@@ -255,11 -255,14 +255,12 @@@ enum rdma_nldev_command 
  	RDMA_NLDEV_CMD_GET, /* can dump */
  	RDMA_NLDEV_CMD_SET,
  
 -	RDMA_NLDEV_CMD_NEWLINK,
 +	/* 3 - 4 are free to use */
  
 -	RDMA_NLDEV_CMD_DELLINK,
 -
 -	RDMA_NLDEV_CMD_PORT_GET, /* can dump */
 +	RDMA_NLDEV_CMD_PORT_GET = 5, /* can dump */
  
- 	/* 6 - 8 are free to use */
+ 	RDMA_NLDEV_CMD_SYS_GET, /* can dump */
+ 	/* 7 - 8 are free to use */
  
  	RDMA_NLDEV_CMD_RES_GET = 9, /* can dump */
  
@@@ -457,6 -460,26 +458,29 @@@ enum rdma_nldev_attr 
  	RDMA_NLDEV_ATTR_DRIVER_U64,		/* u64 */
  
  	/*
++<<<<<<< HEAD
++=======
+ 	 * Indexes to get/set secific entry,
+ 	 * for QP use RDMA_NLDEV_ATTR_RES_LQPN
+ 	 */
+ 	RDMA_NLDEV_ATTR_RES_PDN,               /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_CQN,               /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_MRN,               /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_CM_IDN,            /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_CTXN,	       /* u32 */
+ 	/*
+ 	 * Identifies the rdma driver. eg: "rxe" or "siw"
+ 	 */
+ 	RDMA_NLDEV_ATTR_LINK_TYPE,		/* string */
+ 
+ 	/*
+ 	 * net namespace mode for rdma subsystem:
+ 	 * either shared or exclusive among multiple net namespaces.
+ 	 */
+ 	RDMA_NLDEV_SYS_ATTR_NETNS_MODE,		/* u8 */
+ 
+ 	/*
++>>>>>>> cb7e0e130503 (RDMA/core: Add interface to read device namespace sharing mode)
  	 * Always the end
  	 */
  	RDMA_NLDEV_ATTR_MAX
* Unmerged path drivers/infiniband/core/core_priv.h
* Unmerged path drivers/infiniband/core/device.c
* Unmerged path drivers/infiniband/core/nldev.c
* Unmerged path include/uapi/rdma/rdma_netlink.h
