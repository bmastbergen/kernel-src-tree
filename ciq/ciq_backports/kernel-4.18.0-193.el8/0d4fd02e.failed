net: flow_offload: add flow_block_cb_is_busy() and use it

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] flow_offload: add flow_block_cb_is_busy() and use it (Ivan Vecera) [1737890]
Rebuild_FUZZ: 95.41%
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 0d4fd02e7199fbf57c0d175dd1890c82cd4a6f4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/0d4fd02e.failed

This patch adds a function to check if flow block callback is already in
use.  Call this new function from flow_block_cb_setup_simple() and from
drivers.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0d4fd02e7199fbf57c0d175dd1890c82cd4a6f4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
#	drivers/net/ethernet/mscc/ocelot_tc.c
#	drivers/net/ethernet/netronome/nfp/flower/offload.c
#	include/net/flow_offload.h
#	net/core/flow_offload.c
#	net/dsa/slave.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index e43d1c130eea,35adc174f277..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -1617,24 -1694,36 +1617,38 @@@ static int mlxsw_sp_setup_tc_block(stru
  		return -EOPNOTSUPP;
  	}
  
 -	f->driver_block_list = &mlxsw_sp_block_cb_list;
 -
  	switch (f->command) {
++<<<<<<< HEAD
 +	case TC_BLOCK_BIND:
 +		err = tcf_block_cb_register(f->block, cb, mlxsw_sp_port,
 +					    mlxsw_sp_port, f->extack);
 +		if (err)
 +			return err;
 +		err = mlxsw_sp_setup_tc_block_flower_bind(mlxsw_sp_port,
 +							  f->block, ingress,
 +							  f->extack);
++=======
+ 	case FLOW_BLOCK_BIND:
+ 		if (flow_block_cb_is_busy(cb, mlxsw_sp_port,
+ 					  &mlxsw_sp_block_cb_list))
+ 			return -EBUSY;
+ 
+ 		block_cb = flow_block_cb_alloc(f->net, cb, mlxsw_sp_port,
+ 					       mlxsw_sp_port, NULL);
+ 		if (IS_ERR(block_cb))
+ 			return PTR_ERR(block_cb);
+ 		err = mlxsw_sp_setup_tc_block_flower_bind(mlxsw_sp_port, f,
+ 							  ingress);
++>>>>>>> 0d4fd02e7199 (net: flow_offload: add flow_block_cb_is_busy() and use it)
  		if (err) {
 -			flow_block_cb_free(block_cb);
 +			tcf_block_cb_unregister(f->block, cb, mlxsw_sp_port);
  			return err;
  		}
 -		flow_block_cb_add(block_cb, f);
 -		list_add_tail(&block_cb->driver_list, &mlxsw_sp_block_cb_list);
  		return 0;
 -	case FLOW_BLOCK_UNBIND:
 +	case TC_BLOCK_UNBIND:
  		mlxsw_sp_setup_tc_block_flower_unbind(mlxsw_sp_port,
 -						      f, ingress);
 -		block_cb = flow_block_cb_lookup(f, cb, mlxsw_sp_port);
 -		if (!block_cb)
 -			return -ENOENT;
 -
 -		flow_block_cb_remove(block_cb, f);
 -		list_del(&block_cb->driver_list);
 +						      f->block, ingress);
 +		tcf_block_cb_unregister(f->block, cb, mlxsw_sp_port);
  		return 0;
  	default:
  		return -EOPNOTSUPP;
diff --cc drivers/net/ethernet/netronome/nfp/flower/offload.c
index bdd551f36cb7,1b38cfeb646c..000000000000
--- a/drivers/net/ethernet/netronome/nfp/flower/offload.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/offload.c
@@@ -599,23 -1302,45 +599,48 @@@ static int nfp_flower_setup_tc_block_cb
  	}
  }
  
 -static LIST_HEAD(nfp_block_cb_list);
 -
  static int nfp_flower_setup_tc_block(struct net_device *netdev,
 -				     struct flow_block_offload *f)
 +				     struct tc_block_offload *f)
  {
  	struct nfp_repr *repr = netdev_priv(netdev);
 -	struct nfp_flower_repr_priv *repr_priv;
 -	struct flow_block_cb *block_cb;
  
 -	if (f->binder_type != FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS)
 +	if (f->binder_type != TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS)
  		return -EOPNOTSUPP;
  
 -	repr_priv = repr->app_priv;
 -	repr_priv->block_shared = f->block_shared;
 -	f->driver_block_list = &nfp_block_cb_list;
 -
  	switch (f->command) {
++<<<<<<< HEAD
 +	case TC_BLOCK_BIND:
 +		return tcf_block_cb_register(f->block,
 +					     nfp_flower_setup_tc_block_cb,
 +					     repr, repr, f->extack);
 +	case TC_BLOCK_UNBIND:
 +		tcf_block_cb_unregister(f->block,
 +					nfp_flower_setup_tc_block_cb,
 +					repr);
++=======
+ 	case FLOW_BLOCK_BIND:
+ 		if (flow_block_cb_is_busy(nfp_flower_setup_tc_block_cb, repr,
+ 					  &nfp_block_cb_list))
+ 			return -EBUSY;
+ 
+ 		block_cb = flow_block_cb_alloc(f->net,
+ 					       nfp_flower_setup_tc_block_cb,
+ 					       repr, repr, NULL);
+ 		if (IS_ERR(block_cb))
+ 			return PTR_ERR(block_cb);
+ 
+ 		flow_block_cb_add(block_cb, f);
+ 		list_add_tail(&block_cb->driver_list, &nfp_block_cb_list);
+ 		return 0;
+ 	case FLOW_BLOCK_UNBIND:
+ 		block_cb = flow_block_cb_lookup(f, nfp_flower_setup_tc_block_cb,
+ 						repr);
+ 		if (!block_cb)
+ 			return -ENOENT;
+ 
+ 		flow_block_cb_remove(block_cb, f);
+ 		list_del(&block_cb->driver_list);
++>>>>>>> 0d4fd02e7199 (net: flow_offload: add flow_block_cb_is_busy() and use it)
  		return 0;
  	default:
  		return -EOPNOTSUPP;
diff --cc include/net/flow_offload.h
index 1f9db8aa6acb,42a36a346003..000000000000
--- a/include/net/flow_offload.h
+++ b/include/net/flow_offload.h
@@@ -231,4 -238,69 +231,72 @@@ static inline void flow_stats_update(st
  	flow_stats->lastused	= max_t(u64, flow_stats->lastused, lastused);
  }
  
++<<<<<<< HEAD
++=======
+ enum flow_block_command {
+ 	FLOW_BLOCK_BIND,
+ 	FLOW_BLOCK_UNBIND,
+ };
+ 
+ enum flow_block_binder_type {
+ 	FLOW_BLOCK_BINDER_TYPE_UNSPEC,
+ 	FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS,
+ 	FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS,
+ };
+ 
+ struct netlink_ext_ack;
+ 
+ struct flow_block_offload {
+ 	enum flow_block_command command;
+ 	enum flow_block_binder_type binder_type;
+ 	bool block_shared;
+ 	struct net *net;
+ 	struct list_head cb_list;
+ 	struct list_head *driver_block_list;
+ 	struct netlink_ext_ack *extack;
+ };
+ 
+ struct flow_block_cb {
+ 	struct list_head	driver_list;
+ 	struct list_head	list;
+ 	struct net		*net;
+ 	tc_setup_cb_t		*cb;
+ 	void			*cb_ident;
+ 	void			*cb_priv;
+ 	void			(*release)(void *cb_priv);
+ 	unsigned int		refcnt;
+ };
+ 
+ struct flow_block_cb *flow_block_cb_alloc(struct net *net, tc_setup_cb_t *cb,
+ 					  void *cb_ident, void *cb_priv,
+ 					  void (*release)(void *cb_priv));
+ void flow_block_cb_free(struct flow_block_cb *block_cb);
+ 
+ struct flow_block_cb *flow_block_cb_lookup(struct flow_block_offload *offload,
+ 					   tc_setup_cb_t *cb, void *cb_ident);
+ 
+ void *flow_block_cb_priv(struct flow_block_cb *block_cb);
+ void flow_block_cb_incref(struct flow_block_cb *block_cb);
+ unsigned int flow_block_cb_decref(struct flow_block_cb *block_cb);
+ 
+ static inline void flow_block_cb_add(struct flow_block_cb *block_cb,
+ 				     struct flow_block_offload *offload)
+ {
+ 	list_add_tail(&block_cb->list, &offload->cb_list);
+ }
+ 
+ static inline void flow_block_cb_remove(struct flow_block_cb *block_cb,
+ 					struct flow_block_offload *offload)
+ {
+ 	list_move(&block_cb->list, &offload->cb_list);
+ }
+ 
+ bool flow_block_cb_is_busy(tc_setup_cb_t *cb, void *cb_ident,
+ 			   struct list_head *driver_block_list);
+ 
+ int flow_block_cb_setup_simple(struct flow_block_offload *f,
+ 			       struct list_head *driver_list, tc_setup_cb_t *cb,
+ 			       void *cb_ident, void *cb_priv, bool ingress_only);
+ 
++>>>>>>> 0d4fd02e7199 (net: flow_offload: add flow_block_cb_is_busy() and use it)
  #endif /* _NET_FLOW_OFFLOAD_H */
diff --cc net/core/flow_offload.c
index fd722fcdcd91,76f8db3841d7..000000000000
--- a/net/core/flow_offload.c
+++ b/net/core/flow_offload.c
@@@ -165,3 -164,121 +165,124 @@@ void flow_rule_match_enc_opts(const str
  	FLOW_DISSECTOR_MATCH(rule, FLOW_DISSECTOR_KEY_ENC_OPTS, out);
  }
  EXPORT_SYMBOL(flow_rule_match_enc_opts);
++<<<<<<< HEAD
++=======
+ 
+ struct flow_block_cb *flow_block_cb_alloc(struct net *net, tc_setup_cb_t *cb,
+ 					  void *cb_ident, void *cb_priv,
+ 					  void (*release)(void *cb_priv))
+ {
+ 	struct flow_block_cb *block_cb;
+ 
+ 	block_cb = kzalloc(sizeof(*block_cb), GFP_KERNEL);
+ 	if (!block_cb)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	block_cb->net = net;
+ 	block_cb->cb = cb;
+ 	block_cb->cb_ident = cb_ident;
+ 	block_cb->cb_priv = cb_priv;
+ 	block_cb->release = release;
+ 
+ 	return block_cb;
+ }
+ EXPORT_SYMBOL(flow_block_cb_alloc);
+ 
+ void flow_block_cb_free(struct flow_block_cb *block_cb)
+ {
+ 	if (block_cb->release)
+ 		block_cb->release(block_cb->cb_priv);
+ 
+ 	kfree(block_cb);
+ }
+ EXPORT_SYMBOL(flow_block_cb_free);
+ 
+ struct flow_block_cb *flow_block_cb_lookup(struct flow_block_offload *f,
+ 					   tc_setup_cb_t *cb, void *cb_ident)
+ {
+ 	struct flow_block_cb *block_cb;
+ 
+ 	list_for_each_entry(block_cb, f->driver_block_list, driver_list) {
+ 		if (block_cb->net == f->net &&
+ 		    block_cb->cb == cb &&
+ 		    block_cb->cb_ident == cb_ident)
+ 			return block_cb;
+ 	}
+ 
+ 	return NULL;
+ }
+ EXPORT_SYMBOL(flow_block_cb_lookup);
+ 
+ void *flow_block_cb_priv(struct flow_block_cb *block_cb)
+ {
+ 	return block_cb->cb_priv;
+ }
+ EXPORT_SYMBOL(flow_block_cb_priv);
+ 
+ void flow_block_cb_incref(struct flow_block_cb *block_cb)
+ {
+ 	block_cb->refcnt++;
+ }
+ EXPORT_SYMBOL(flow_block_cb_incref);
+ 
+ unsigned int flow_block_cb_decref(struct flow_block_cb *block_cb)
+ {
+ 	return --block_cb->refcnt;
+ }
+ EXPORT_SYMBOL(flow_block_cb_decref);
+ 
+ bool flow_block_cb_is_busy(tc_setup_cb_t *cb, void *cb_ident,
+ 			   struct list_head *driver_block_list)
+ {
+ 	struct flow_block_cb *block_cb;
+ 
+ 	list_for_each_entry(block_cb, driver_block_list, driver_list) {
+ 		if (block_cb->cb == cb &&
+ 		    block_cb->cb_ident == cb_ident)
+ 			return true;
+ 	}
+ 
+ 	return false;
+ }
+ EXPORT_SYMBOL(flow_block_cb_is_busy);
+ 
+ int flow_block_cb_setup_simple(struct flow_block_offload *f,
+ 			       struct list_head *driver_block_list,
+ 			       tc_setup_cb_t *cb, void *cb_ident, void *cb_priv,
+ 			       bool ingress_only)
+ {
+ 	struct flow_block_cb *block_cb;
+ 
+ 	if (ingress_only &&
+ 	    f->binder_type != FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS)
+ 		return -EOPNOTSUPP;
+ 
+ 	f->driver_block_list = driver_block_list;
+ 
+ 	switch (f->command) {
+ 	case FLOW_BLOCK_BIND:
+ 		if (flow_block_cb_is_busy(cb, cb_ident, driver_block_list))
+ 			return -EBUSY;
+ 
+ 		block_cb = flow_block_cb_alloc(f->net, cb, cb_ident,
+ 					       cb_priv, NULL);
+ 		if (IS_ERR(block_cb))
+ 			return PTR_ERR(block_cb);
+ 
+ 		flow_block_cb_add(block_cb, f);
+ 		list_add_tail(&block_cb->driver_list, driver_block_list);
+ 		return 0;
+ 	case FLOW_BLOCK_UNBIND:
+ 		block_cb = flow_block_cb_lookup(f, cb, cb_ident);
+ 		if (!block_cb)
+ 			return -ENOENT;
+ 
+ 		flow_block_cb_remove(block_cb, f);
+ 		list_del(&block_cb->driver_list);
+ 		return 0;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ EXPORT_SYMBOL(flow_block_cb_setup_simple);
++>>>>>>> 0d4fd02e7199 (net: flow_offload: add flow_block_cb_is_busy() and use it)
diff --cc net/dsa/slave.c
index 5e192d3878a2,9bcb598fc840..000000000000
--- a/net/dsa/slave.c
+++ b/net/dsa/slave.c
@@@ -894,11 -957,27 +894,32 @@@ static int dsa_slave_setup_tc_block(str
  	else
  		return -EOPNOTSUPP;
  
 -	f->driver_block_list = &dsa_slave_block_cb_list;
 -
  	switch (f->command) {
++<<<<<<< HEAD
 +	case TC_BLOCK_BIND:
 +		return tcf_block_cb_register(f->block, cb, dev, dev, f->extack);
 +	case TC_BLOCK_UNBIND:
 +		tcf_block_cb_unregister(f->block, cb, dev);
++=======
+ 	case FLOW_BLOCK_BIND:
+ 		if (flow_block_cb_is_busy(cb, dev, &dsa_slave_block_cb_list))
+ 			return -EBUSY;
+ 
+ 		block_cb = flow_block_cb_alloc(f->net, cb, dev, dev, NULL);
+ 		if (IS_ERR(block_cb))
+ 			return PTR_ERR(block_cb);
+ 
+ 		flow_block_cb_add(block_cb, f);
+ 		list_add_tail(&block_cb->driver_list, &dsa_slave_block_cb_list);
+ 		return 0;
+ 	case FLOW_BLOCK_UNBIND:
+ 		block_cb = flow_block_cb_lookup(f, cb, dev);
+ 		if (!block_cb)
+ 			return -ENOENT;
+ 
+ 		flow_block_cb_remove(block_cb, f);
+ 		list_del(&block_cb->driver_list);
++>>>>>>> 0d4fd02e7199 (net: flow_offload: add flow_block_cb_is_busy() and use it)
  		return 0;
  	default:
  		return -EOPNOTSUPP;
* Unmerged path drivers/net/ethernet/mscc/ocelot_tc.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index d4d2e9fb17fa..a2f21fdd4333 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -731,6 +731,10 @@ mlx5e_rep_indr_setup_tc_block(struct net_device *netdev,
 		if (indr_priv)
 			return -EEXIST;
 
+		if (flow_block_cb_is_busy(mlx5e_rep_indr_setup_block_cb,
+					  indr_priv, &mlx5e_block_cb_list))
+			return -EBUSY;
+
 		indr_priv = kmalloc(sizeof(*indr_priv), GFP_KERNEL);
 		if (!indr_priv)
 			return -ENOMEM;
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_tc.c
* Unmerged path drivers/net/ethernet/netronome/nfp/flower/offload.c
* Unmerged path include/net/flow_offload.h
* Unmerged path net/core/flow_offload.c
* Unmerged path net/dsa/slave.c
