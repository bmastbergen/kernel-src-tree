SUNRPC: Make AUTH_SYS and AUTH_NULL set au_verfsize

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit a00275baa68e1ee226cc659f54dc3a571f3ad600
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a00275ba.failed

au_verfsize will be needed for a non-flavor-specific computation
in a subsequent patch.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit a00275baa68e1ee226cc659f54dc3a571f3ad600)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/auth_unix.c
diff --cc net/sunrpc/auth_unix.c
index fc8a59134640,a93c56442487..000000000000
--- a/net/sunrpc/auth_unix.c
+++ b/net/sunrpc/auth_unix.c
@@@ -142,29 -160,34 +142,41 @@@ unx_refresh(struct rpc_task *task
  	return 0;
  }
  
 -static int
 -unx_validate(struct rpc_task *task, struct xdr_stream *xdr)
 +static __be32 *
 +unx_validate(struct rpc_task *task, __be32 *p)
  {
++<<<<<<< HEAD
 +	rpc_authflavor_t	flavor;
 +	u32			size;
++=======
+ 	struct rpc_auth *auth = task->tk_rqstp->rq_cred->cr_auth;
+ 	__be32 *p;
+ 	u32 size;
++>>>>>>> a00275baa68e (SUNRPC: Make AUTH_SYS and AUTH_NULL set au_verfsize)
 +
 +	flavor = ntohl(*p++);
 +	if (flavor != RPC_AUTH_NULL &&
 +	    flavor != RPC_AUTH_UNIX &&
 +	    flavor != RPC_AUTH_SHORT) {
 +		printk("RPC: bad verf flavor: %u\n", flavor);
 +		return ERR_PTR(-EIO);
 +	}
  
 -	p = xdr_inline_decode(xdr, 2 * sizeof(*p));
 -	if (!p)
 -		return -EIO;
 -	switch (*p++) {
 -	case rpc_auth_null:
 -	case rpc_auth_unix:
 -	case rpc_auth_short:
 -		break;
 -	default:
 -		return -EIO;
++<<<<<<< HEAD
 +	size = ntohl(*p++);
 +	if (size > RPC_MAX_AUTH_SIZE) {
 +		printk("RPC: giant verf size: %u\n", size);
 +		return ERR_PTR(-EIO);
  	}
 -	size = be32_to_cpup(p);
 -	if (size > RPC_MAX_AUTH_SIZE)
 -		return -EIO;
 -	p = xdr_inline_decode(xdr, size);
 -	if (!p)
 -		return -EIO;
 +	task->tk_rqstp->rq_cred->cr_auth->au_rslack = (size >> 2) + 2;
 +	p += (size >> 2);
  
 +	return p;
++=======
+ 	auth->au_verfsize = XDR_QUADLEN(size) + 2;
+ 	auth->au_rslack = XDR_QUADLEN(size) + 2;
+ 	return 0;
++>>>>>>> a00275baa68e (SUNRPC: Make AUTH_SYS and AUTH_NULL set au_verfsize)
  }
  
  int __init rpc_init_authunix(void)
diff --git a/include/linux/sunrpc/auth.h b/include/linux/sunrpc/auth.h
index bca2741a3eb0..0998f2f711f8 100644
--- a/include/linux/sunrpc/auth.h
+++ b/include/linux/sunrpc/auth.h
@@ -77,8 +77,7 @@ struct rpc_auth {
 				/* guess at number of u32's auth adds before
 				 * reply data; normally the verifier size: */
 	unsigned int		au_rslack;
-				/* for gss, used to calculate au_rslack: */
-	unsigned int		au_verfsize;
+	unsigned int		au_verfsize;	/* size of reply verifier */
 
 	unsigned int		au_flags;	/* various flags */
 	const struct rpc_authops *au_ops;		/* operations */
diff --git a/net/sunrpc/auth_gss/auth_gss.c b/net/sunrpc/auth_gss/auth_gss.c
index 6e951620fbcd..9c03ecbb2fcb 100644
--- a/net/sunrpc/auth_gss/auth_gss.c
+++ b/net/sunrpc/auth_gss/auth_gss.c
@@ -1053,6 +1053,7 @@ gss_create_new(const struct rpc_auth_create_args *args, struct rpc_clnt *clnt)
 	auth = &gss_auth->rpc_auth;
 	auth->au_cslack = GSS_CRED_SLACK >> 2;
 	auth->au_rslack = GSS_VERF_SLACK >> 2;
+	auth->au_verfsize = GSS_VERF_SLACK >> 2;
 	auth->au_flags = 0;
 	auth->au_ops = &authgss_ops;
 	auth->au_flavor = flavor;
diff --git a/net/sunrpc/auth_null.c b/net/sunrpc/auth_null.c
index d0ceac57c06e..9b0143310ee3 100644
--- a/net/sunrpc/auth_null.c
+++ b/net/sunrpc/auth_null.c
@@ -114,6 +114,7 @@ static
 struct rpc_auth null_auth = {
 	.au_cslack	= NUL_CALLSLACK,
 	.au_rslack	= NUL_REPLYSLACK,
+	.au_verfsize	= NUL_REPLYSLACK,
 	.au_ops		= &authnull_ops,
 	.au_flavor	= RPC_AUTH_NULL,
 	.au_count	= REFCOUNT_INIT(1),
* Unmerged path net/sunrpc/auth_unix.c
