drm/i915: Disable Secure Batches for gen6+

jira LE-1907
cve CVE-2019-0155
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jon Bloomfield <jon.bloomfield@intel.com>
commit 44157641d448cbc0c4b73c5231d2b911f0cb0427
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/44157641.failed

Retroactively stop reporting support for secure batches
through the api for gen6+ so that older binaries trigger
the fallback path instead.

Older binaries use secure batches pre gen6 to access resources
that are not available to normal usermode processes. However,
all known userspace explicitly checks for HAS_SECURE_BATCHES
before relying on the secure batch feature.

Since there are no known binaries relying on this for newer gens
we can kill secure batches from gen6, via I915_PARAM_HAS_SECURE_BATCHES.

v2: rebase (Mika)
v3: rebase (Mika)

	Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Dave Airlie <airlied@redhat.com>
	Cc: Takashi Iwai <tiwai@suse.de>
	Cc: Tyler Hicks <tyhicks@canonical.com>
	Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
	Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
(cherry picked from commit 44157641d448cbc0c4b73c5231d2b911f0cb0427)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_drv.h
#	drivers/gpu/drm/i915/i915_getparam.c
diff --cc drivers/gpu/drm/i915/i915_drv.h
index 90f84572b2a7,68974df69f2f..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -2463,7 -2077,8 +2463,12 @@@ static inline unsigned int i915_sg_segm
  
  #define HAS_LLC(dev_priv)	(INTEL_INFO(dev_priv)->has_llc)
  #define HAS_SNOOP(dev_priv)	(INTEL_INFO(dev_priv)->has_snoop)
++<<<<<<< HEAD
 +#define HAS_EDRAM(dev_priv)	(!!((dev_priv)->edram_cap & EDRAM_ENABLED))
++=======
+ #define HAS_EDRAM(dev_priv)	((dev_priv)->edram_size_mb)
+ #define HAS_SECURE_BATCHES(dev_priv) (INTEL_GEN(dev_priv) < 6)
++>>>>>>> 44157641d448 (drm/i915: Disable Secure Batches for gen6+)
  #define HAS_WT(dev_priv)	((IS_HASWELL(dev_priv) || \
  				 IS_BROADWELL(dev_priv)) && HAS_EDRAM(dev_priv))
  
* Unmerged path drivers/gpu/drm/i915/i915_getparam.c
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 02adcaf6ebea..92d1a01e3ee5 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -2273,6 +2273,7 @@ i915_gem_do_execbuffer(struct drm_device *dev,
 		       struct drm_i915_gem_exec_object2 *exec,
 		       struct drm_syncobj **fences)
 {
+	struct drm_i915_private *i915 = to_i915(dev);
 	struct i915_execbuffer eb;
 	struct dma_fence *in_fence = NULL;
 	struct sync_file *out_fence = NULL;
@@ -2284,7 +2285,7 @@ i915_gem_do_execbuffer(struct drm_device *dev,
 	BUILD_BUG_ON(__EXEC_OBJECT_INTERNAL_FLAGS &
 		     ~__EXEC_OBJECT_UNKNOWN_FLAGS);
 
-	eb.i915 = to_i915(dev);
+	eb.i915 = i915;
 	eb.file = file;
 	eb.args = args;
 	if (DBG_FORCE_RELOC || !(args->flags & I915_EXEC_NO_RELOC))
@@ -2304,8 +2305,15 @@ i915_gem_do_execbuffer(struct drm_device *dev,
 
 	eb.batch_flags = 0;
 	if (args->flags & I915_EXEC_SECURE) {
+		if (INTEL_GEN(i915) >= 11)
+			return -ENODEV;
+
+		/* Return -EPERM to trigger fallback code on old binaries. */
+		if (!HAS_SECURE_BATCHES(i915))
+			return -EPERM;
+
 		if (!drm_is_current_master(file) || !capable(CAP_SYS_ADMIN))
-		    return -EPERM;
+			return -EPERM;
 
 		eb.batch_flags |= I915_DISPATCH_SECURE;
 	}
* Unmerged path drivers/gpu/drm/i915/i915_getparam.c
