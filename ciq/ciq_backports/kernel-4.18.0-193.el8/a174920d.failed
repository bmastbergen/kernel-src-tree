PM / Domains: Drop unused in-parameter to some genpd functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ulf Hansson <ulf.hansson@linaro.org>
commit a174920d69db9be80332f535db4a8ca2e3bccf24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a174920d.failed

Both genpd_alloc_dev_data() and genpd_add_device(), that are internal
genpd functions, allow a struct gpd_timing_data *td to be passed as an
in-parameter. However, as NULL is always passed, let's just drop the
in-parameter altogether.

	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a174920d69db9be80332f535db4a8ca2e3bccf24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/power/domain.c
diff --cc drivers/base/power/domain.c
index ae411ec1ee12,93298b7db408..000000000000
--- a/drivers/base/power/domain.c
+++ b/drivers/base/power/domain.c
@@@ -1452,8 -1450,57 +1448,62 @@@ static void genpd_free_dev_data(struct 
  	dev_pm_put_subsys_data(dev);
  }
  
++<<<<<<< HEAD
 +static int genpd_add_device(struct generic_pm_domain *genpd, struct device *dev,
 +			    struct gpd_timing_data *td)
++=======
+ static void __genpd_update_cpumask(struct generic_pm_domain *genpd,
+ 				   int cpu, bool set, unsigned int depth)
+ {
+ 	struct gpd_link *link;
+ 
+ 	if (!genpd_is_cpu_domain(genpd))
+ 		return;
+ 
+ 	list_for_each_entry(link, &genpd->slave_links, slave_node) {
+ 		struct generic_pm_domain *master = link->master;
+ 
+ 		genpd_lock_nested(master, depth + 1);
+ 		__genpd_update_cpumask(master, cpu, set, depth + 1);
+ 		genpd_unlock(master);
+ 	}
+ 
+ 	if (set)
+ 		cpumask_set_cpu(cpu, genpd->cpus);
+ 	else
+ 		cpumask_clear_cpu(cpu, genpd->cpus);
+ }
+ 
+ static void genpd_update_cpumask(struct generic_pm_domain *genpd,
+ 				 struct device *dev, bool set)
+ {
+ 	int cpu;
+ 
+ 	if (!genpd_is_cpu_domain(genpd))
+ 		return;
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		if (get_cpu_device(cpu) == dev) {
+ 			__genpd_update_cpumask(genpd, cpu, set, 0);
+ 			return;
+ 		}
+ 	}
+ }
+ 
+ static void genpd_set_cpumask(struct generic_pm_domain *genpd,
+ 			      struct device *dev)
+ {
+ 	genpd_update_cpumask(genpd, dev, true);
+ }
+ 
+ static void genpd_clear_cpumask(struct generic_pm_domain *genpd,
+ 				struct device *dev)
+ {
+ 	genpd_update_cpumask(genpd, dev, false);
+ }
+ 
+ static int genpd_add_device(struct generic_pm_domain *genpd, struct device *dev)
++>>>>>>> a174920d69db (PM / Domains: Drop unused in-parameter to some genpd functions)
  {
  	struct generic_pm_domain_data *gpd_data;
  	int ret;
* Unmerged path drivers/base/power/domain.c
