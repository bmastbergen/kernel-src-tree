RDMA: Handle ucontext allocations by IB/core

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit a2a074ef396f8738d9ee08ceefa8811381a4fe4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a2a074ef.failed

Following the PD conversion patch, do the same for ucontext allocations.

	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit a2a074ef396f8738d9ee08ceefa8811381a4fe4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/device.c
#	drivers/infiniband/hw/bnxt_re/main.c
#	drivers/infiniband/hw/cxgb3/iwch_provider.c
#	drivers/infiniband/hw/cxgb4/provider.c
#	drivers/infiniband/hw/hns/hns_roce_main.c
#	drivers/infiniband/hw/i40iw/i40iw_verbs.c
#	drivers/infiniband/hw/mlx4/main.c
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/mthca/mthca_provider.c
#	drivers/infiniband/hw/nes/nes_verbs.c
#	drivers/infiniband/hw/ocrdma/ocrdma_main.c
#	drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
#	drivers/infiniband/hw/qedr/main.c
#	drivers/infiniband/hw/usnic/usnic_ib_main.c
#	drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
#	drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
#	drivers/infiniband/sw/rdmavt/vt.c
#	drivers/infiniband/sw/rxe/rxe_verbs.c
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/core/device.c
index 8641d8bca5aa,a9f29156e486..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -1347,6 -1830,9 +1347,12 @@@ void ib_set_device_ops(struct ib_devic
  	SET_DEVICE_OP(dev_ops, set_vf_guid);
  	SET_DEVICE_OP(dev_ops, set_vf_link_state);
  	SET_DEVICE_OP(dev_ops, unmap_fmr);
++<<<<<<< HEAD
++=======
+ 
+ 	SET_OBJ_SIZE(dev_ops, ib_pd);
+ 	SET_OBJ_SIZE(dev_ops, ib_ucontext);
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  }
  EXPORT_SYMBOL(ib_set_device_ops);
  
diff --cc drivers/infiniband/hw/bnxt_re/main.c
index 0d40a930c192,2bd24ac45ee4..000000000000
--- a/drivers/infiniband/hw/bnxt_re/main.c
+++ b/drivers/infiniband/hw/bnxt_re/main.c
@@@ -637,6 -637,8 +637,11 @@@ static const struct ib_device_ops bnxt_
  	.query_srq = bnxt_re_query_srq,
  	.reg_user_mr = bnxt_re_reg_user_mr,
  	.req_notify_cq = bnxt_re_req_notify_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, bnxt_re_pd, ib_pd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, bnxt_re_ucontext, ib_uctx),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static int bnxt_re_register_ib(struct bnxt_re_dev *rdev)
diff --cc drivers/infiniband/hw/cxgb3/iwch_provider.c
index b9bb151437dc,4accf7b3dcf2..000000000000
--- a/drivers/infiniband/hw/cxgb3/iwch_provider.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_provider.c
@@@ -1350,6 -1337,8 +1346,11 @@@ static const struct ib_device_ops iwch_
  	.reg_user_mr = iwch_reg_user_mr,
  	.req_notify_cq = iwch_arm_cq,
  	.resize_cq = iwch_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, iwch_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, iwch_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  int iwch_register_device(struct iwch_dev *dev)
diff --cc drivers/infiniband/hw/cxgb4/provider.c
index adda8df00ce5,507c54572cc9..000000000000
--- a/drivers/infiniband/hw/cxgb4/provider.c
+++ b/drivers/infiniband/hw/cxgb4/provider.c
@@@ -558,6 -545,8 +549,11 @@@ static const struct ib_device_ops c4iw_
  	.query_qp = c4iw_ib_query_qp,
  	.reg_user_mr = c4iw_reg_user_mr,
  	.req_notify_cq = c4iw_arm_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, c4iw_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, c4iw_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  void c4iw_register_device(struct work_struct *work)
diff --cc drivers/infiniband/hw/hns/hns_roce_main.c
index 171e4cf3e9d6,c929125da84b..000000000000
--- a/drivers/infiniband/hw/hns/hns_roce_main.c
+++ b/drivers/infiniband/hw/hns/hns_roce_main.c
@@@ -372,55 -375,8 +366,52 @@@ static void hns_roce_dealloc_ucontext(s
  	struct hns_roce_ucontext *context = to_hr_ucontext(ibcontext);
  
  	hns_roce_uar_free(to_hr_dev(ibcontext->device), &context->uar);
- 	kfree(context);
- 
- 	return 0;
  }
  
 +static void hns_roce_vma_open(struct vm_area_struct *vma)
 +{
 +	vma->vm_ops = NULL;
 +}
 +
 +static void hns_roce_vma_close(struct vm_area_struct *vma)
 +{
 +	struct hns_roce_vma_data *vma_data;
 +
 +	vma_data = (struct hns_roce_vma_data *)vma->vm_private_data;
 +	vma_data->vma = NULL;
 +	mutex_lock(vma_data->vma_list_mutex);
 +	list_del(&vma_data->list);
 +	mutex_unlock(vma_data->vma_list_mutex);
 +	kfree(vma_data);
 +}
 +
 +static const struct vm_operations_struct hns_roce_vm_ops = {
 +	.open = hns_roce_vma_open,
 +	.close = hns_roce_vma_close,
 +};
 +
 +static int hns_roce_set_vma_data(struct vm_area_struct *vma,
 +				 struct hns_roce_ucontext *context)
 +{
 +	struct list_head *vma_head = &context->vma_list;
 +	struct hns_roce_vma_data *vma_data;
 +
 +	vma_data = kzalloc(sizeof(*vma_data), GFP_KERNEL);
 +	if (!vma_data)
 +		return -ENOMEM;
 +
 +	vma_data->vma = vma;
 +	vma_data->vma_list_mutex = &context->vma_list_mutex;
 +	vma->vm_private_data = vma_data;
 +	vma->vm_ops = &hns_roce_vm_ops;
 +
 +	mutex_lock(&context->vma_list_mutex);
 +	list_add(&vma_data->list, vma_head);
 +	mutex_unlock(&context->vma_list_mutex);
 +
 +	return 0;
 +}
 +
  static int hns_roce_mmap(struct ib_ucontext *context,
  			 struct vm_area_struct *vma)
  {
@@@ -525,6 -468,8 +516,11 @@@ static const struct ib_device_ops hns_r
  	.query_pkey = hns_roce_query_pkey,
  	.query_port = hns_roce_query_port,
  	.reg_user_mr = hns_roce_reg_user_mr,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, hns_roce_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, hns_roce_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static const struct ib_device_ops hns_roce_dev_mr_ops = {
diff --cc drivers/infiniband/hw/i40iw/i40iw_verbs.c
index 524f42b9e564,a8352e3ca23d..000000000000
--- a/drivers/infiniband/hw/i40iw/i40iw_verbs.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
@@@ -2750,6 -2716,8 +2727,11 @@@ static const struct ib_device_ops i40iw
  	.query_qp = i40iw_query_qp,
  	.reg_user_mr = i40iw_reg_user_mr,
  	.req_notify_cq = i40iw_req_notify_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, i40iw_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, i40iw_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  /**
diff --cc drivers/infiniband/hw/mlx4/main.c
index d66002a31000,733f7bbd5901..000000000000
--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@@ -2580,6 -2560,8 +2571,11 @@@ static const struct ib_device_ops mlx4_
  	.req_notify_cq = mlx4_ib_arm_cq,
  	.rereg_user_mr = mlx4_ib_rereg_user_mr,
  	.resize_cq = mlx4_ib_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, mlx4_ib_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, mlx4_ib_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static const struct ib_device_ops mlx4_ib_dev_wq_ops = {
diff --cc drivers/infiniband/hw/mlx5/main.c
index 2e9e8914ac78,994c19d01211..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -5948,6 -5975,8 +5940,11 @@@ static const struct ib_device_ops mlx5_
  	.req_notify_cq = mlx5_ib_arm_cq,
  	.rereg_user_mr = mlx5_ib_rereg_user_mr,
  	.resize_cq = mlx5_ib_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, mlx5_ib_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, mlx5_ib_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static const struct ib_device_ops mlx5_ib_dev_flow_ipsec_ops = {
diff --cc drivers/infiniband/hw/mthca/mthca_provider.c
index 774c7d6fdea2,d063d7a37762..000000000000
--- a/drivers/infiniband/hw/mthca/mthca_provider.c
+++ b/drivers/infiniband/hw/mthca/mthca_provider.c
@@@ -1224,6 -1200,8 +1212,11 @@@ static const struct ib_device_ops mthca
  	.query_qp = mthca_query_qp,
  	.reg_user_mr = mthca_reg_user_mr,
  	.resize_cq = mthca_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, mthca_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, mthca_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static const struct ib_device_ops mthca_dev_arbel_srq_ops = {
diff --cc drivers/infiniband/hw/nes/nes_verbs.c
index cd4fa4729089,828e4af3f951..000000000000
--- a/drivers/infiniband/hw/nes/nes_verbs.c
+++ b/drivers/infiniband/hw/nes/nes_verbs.c
@@@ -3609,6 -3587,8 +3598,11 @@@ static const struct ib_device_ops nes_d
  	.query_qp = nes_query_qp,
  	.reg_user_mr = nes_reg_user_mr,
  	.req_notify_cq = nes_req_notify_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, nes_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, nes_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  /**
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_main.c
index 88970a6bb555,b9e10d55a58e..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_main.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_main.c
@@@ -179,6 -179,8 +179,11 @@@ static const struct ib_device_ops ocrdm
  	.reg_user_mr = ocrdma_reg_user_mr,
  	.req_notify_cq = ocrdma_arm_cq,
  	.resize_cq = ocrdma_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, ocrdma_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, ocrdma_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static const struct ib_device_ops ocrdma_dev_srq_ops = {
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
index 27249892f0d1,b4e1777c2c97..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
@@@ -460,9 -449,9 +460,8 @@@ static void ocrdma_dealloc_ucontext_pd(
  		pr_err("%s(%d) Freeing in use pdid=0x%x.\n",
  		       __func__, dev->id, pd->id);
  	}
 -	kfree(uctx->cntxt_pd);
  	uctx->cntxt_pd = NULL;
- 	(void)_ocrdma_dealloc_pd(dev, pd);
- 	return 0;
+ 	_ocrdma_dealloc_pd(dev, pd);
  }
  
  static struct ocrdma_pd *ocrdma_get_ucontext_pd(struct ocrdma_ucontext *uctx)
@@@ -504,15 -490,13 +500,22 @@@ int ocrdma_alloc_ucontext(struct ib_uco
  	INIT_LIST_HEAD(&ctx->mm_head);
  	mutex_init(&ctx->mm_list_lock);
  
++<<<<<<< HEAD
 +	ctx->ah_tbl.va = dma_zalloc_coherent(&pdev->dev, map_len,
 +					     &ctx->ah_tbl.pa, GFP_KERNEL);
 +	if (!ctx->ah_tbl.va) {
 +		kfree(ctx);
 +		return ERR_PTR(-ENOMEM);
 +	}
++=======
+ 	ctx->ah_tbl.va = dma_alloc_coherent(&pdev->dev, map_len,
+ 					    &ctx->ah_tbl.pa, GFP_KERNEL);
+ 	if (!ctx->ah_tbl.va)
+ 		return -ENOMEM;
+ 
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  	ctx->ah_tbl.len = map_len;
  
- 	memset(&resp, 0, sizeof(resp));
  	resp.ah_tbl_len = ctx->ah_tbl.len;
  	resp.ah_tbl_page = virt_to_phys(ctx->ah_tbl.va);
  
@@@ -534,9 -518,10 +537,9 @@@
  	status = ib_copy_to_udata(udata, &resp, sizeof(resp));
  	if (status)
  		goto cpy_err;
- 	return &ctx->ibucontext;
+ 	return 0;
  
  cpy_err:
 -	ocrdma_dealloc_ucontext_pd(ctx);
  pd_err:
  	ocrdma_del_mmap(ctx, ctx->ah_tbl.pa, ctx->ah_tbl.len);
  map_err:
diff --cc drivers/infiniband/hw/qedr/main.c
index 878e9e23652b,996d9ecd93e0..000000000000
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@@ -239,6 -239,8 +239,11 @@@ static const struct ib_device_ops qedr_
  	.reg_user_mr = qedr_reg_user_mr,
  	.req_notify_cq = qedr_arm_cq,
  	.resize_cq = qedr_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, qedr_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, qedr_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static int qedr_register_device(struct qedr_dev *dev)
diff --cc drivers/infiniband/hw/usnic/usnic_ib_main.c
index 6b56f4f2222a,d88d9f8a7f9a..000000000000
--- a/drivers/infiniband/hw/usnic/usnic_ib_main.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_main.c
@@@ -343,7 -349,8 +343,12 @@@ static const struct ib_device_ops usnic
  	.query_port = usnic_ib_query_port,
  	.query_qp = usnic_ib_query_qp,
  	.reg_user_mr = usnic_ib_reg_mr,
++<<<<<<< HEAD
 +	.req_notify_cq = usnic_ib_req_notify_cq,
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, usnic_ib_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, usnic_ib_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  /* Start of PF discovery section */
diff --cc drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
index 7e3160341a20,6d8b3e0de57a..000000000000
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
@@@ -195,6 -195,8 +195,11 @@@ static const struct ib_device_ops pvrdm
  	.query_qp = pvrdma_query_qp,
  	.reg_user_mr = pvrdma_reg_user_mr,
  	.req_notify_cq = pvrdma_req_notify_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, pvrdma_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, pvrdma_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static const struct ib_device_ops pvrdma_dev_srq_ops = {
diff --cc drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
index f7f758d60110,607aa131d67c..000000000000
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
@@@ -396,13 -396,11 +396,21 @@@ int pvrdma_modify_device(struct ib_devi
  int pvrdma_modify_port(struct ib_device *ibdev, u8 port,
  		       int mask, struct ib_port_modify *props);
  int pvrdma_mmap(struct ib_ucontext *context, struct vm_area_struct *vma);
++<<<<<<< HEAD
 +struct ib_ucontext *pvrdma_alloc_ucontext(struct ib_device *ibdev,
 +					  struct ib_udata *udata);
 +int pvrdma_dealloc_ucontext(struct ib_ucontext *context);
 +struct ib_pd *pvrdma_alloc_pd(struct ib_device *ibdev,
 +			      struct ib_ucontext *context,
 +			      struct ib_udata *udata);
 +int pvrdma_dealloc_pd(struct ib_pd *ibpd);
++=======
+ int pvrdma_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata);
+ void pvrdma_dealloc_ucontext(struct ib_ucontext *context);
+ int pvrdma_alloc_pd(struct ib_pd *pd, struct ib_ucontext *context,
+ 		    struct ib_udata *udata);
+ void pvrdma_dealloc_pd(struct ib_pd *ibpd);
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  struct ib_mr *pvrdma_get_dma_mr(struct ib_pd *pd, int acc);
  struct ib_mr *pvrdma_reg_user_mr(struct ib_pd *pd, u64 start, u64 length,
  				 u64 virt_addr, int access_flags,
diff --cc drivers/infiniband/sw/rdmavt/vt.c
index b3f0c5578925,42c9d35f832d..000000000000
--- a/drivers/infiniband/sw/rdmavt/vt.c
+++ b/drivers/infiniband/sw/rdmavt/vt.c
@@@ -436,6 -425,8 +429,11 @@@ static const struct ib_device_ops rvt_d
  	.req_notify_cq = rvt_req_notify_cq,
  	.resize_cq = rvt_resize_cq,
  	.unmap_fmr = rvt_unmap_fmr,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, rvt_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, rvt_ucontext, ibucontext),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
  static noinline int check_support(struct rvt_dev_info *rdi, int verb)
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.c
index f3188f269481,6ecf28570ff0..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@@ -1169,9 -1176,11 +1166,14 @@@ static const struct ib_device_ops rxe_d
  	.reg_user_mr = rxe_reg_user_mr,
  	.req_notify_cq = rxe_req_notify_cq,
  	.resize_cq = rxe_resize_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, rxe_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, rxe_ucontext, ibuc),
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
 -int rxe_register_device(struct rxe_dev *rxe, const char *ibdev_name)
 +int rxe_register_device(struct rxe_dev *rxe)
  {
  	int err;
  	struct ib_device *dev = &rxe->ib_dev;
diff --cc include/rdma/ib_verbs.h
index 2ff74f11eec0,9b9e17bcc201..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -2380,15 -2389,14 +2380,15 @@@ struct ib_device_ops 
  	int (*del_gid)(const struct ib_gid_attr *attr, void **context);
  	int (*query_pkey)(struct ib_device *device, u8 port_num, u16 index,
  			  u16 *pkey);
- 	struct ib_ucontext *(*alloc_ucontext)(struct ib_device *device,
- 					      struct ib_udata *udata);
- 	int (*dealloc_ucontext)(struct ib_ucontext *context);
+ 	int (*alloc_ucontext)(struct ib_ucontext *context,
+ 			      struct ib_udata *udata);
+ 	void (*dealloc_ucontext)(struct ib_ucontext *context);
  	int (*mmap)(struct ib_ucontext *context, struct vm_area_struct *vma);
  	void (*disassociate_ucontext)(struct ib_ucontext *ibcontext);
 -	int (*alloc_pd)(struct ib_pd *pd, struct ib_ucontext *context,
 -			struct ib_udata *udata);
 -	void (*dealloc_pd)(struct ib_pd *pd);
 +	struct ib_pd *(*alloc_pd)(struct ib_device *device,
 +				  struct ib_ucontext *context,
 +				  struct ib_udata *udata);
 +	int (*dealloc_pd)(struct ib_pd *pd);
  	struct ib_ah *(*create_ah)(struct ib_pd *pd,
  				   struct rdma_ah_attr *ah_attr, u32 flags,
  				   struct ib_udata *udata);
@@@ -2525,8 -2533,29 +2525,30 @@@
  	 */
  	int (*init_port)(struct ib_device *device, u8 port_num,
  			 struct kobject *port_sysfs);
++<<<<<<< HEAD
++=======
+ 	/**
+ 	 * Allows rdma drivers to add their own restrack attributes.
+ 	 */
+ 	int (*fill_res_entry)(struct sk_buff *msg,
+ 			      struct rdma_restrack_entry *entry);
+ 
+ 	/* Device lifecycle callbacks */
+ 	/*
+ 	 * Called after the device becomes registered, before clients are
+ 	 * attached
+ 	 */
+ 	int (*enable_driver)(struct ib_device *dev);
+ 	/*
+ 	 * This is called as part of ib_dealloc_device().
+ 	 */
+ 	void (*dealloc_driver)(struct ib_device *dev);
+ 
+ 	DECLARE_RDMA_OBJ_SIZE(ib_pd);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_ucontext);
++>>>>>>> a2a074ef396f (RDMA: Handle ucontext allocations by IB/core)
  };
  
 -struct rdma_restrack_root;
 -
  struct ib_device {
  	/* Do not access @dma_device directly from ULP nor from HW drivers. */
  	struct device                *dma_device;
* Unmerged path drivers/infiniband/core/device.c
diff --git a/drivers/infiniband/core/rdma_core.c b/drivers/infiniband/core/rdma_core.c
index 9b1c4e9e0ae5..b81eddab6d37 100644
--- a/drivers/infiniband/core/rdma_core.c
+++ b/drivers/infiniband/core/rdma_core.c
@@ -812,7 +812,6 @@ static void ufile_destroy_ucontext(struct ib_uverbs_file *ufile,
 {
 	struct ib_ucontext *ucontext = ufile->ucontext;
 	struct ib_device *ib_dev = ucontext->device;
-	int ret;
 
 	/*
 	 * If we are closing the FD then the user mmap VMAs must have
@@ -830,12 +829,8 @@ static void ufile_destroy_ucontext(struct ib_uverbs_file *ufile,
 
 	rdma_restrack_del(&ucontext->res);
 
-	/*
-	 * FIXME: Drivers are not permitted to fail dealloc_ucontext, remove
-	 * the error return.
-	 */
-	ret = ib_dev->ops.dealloc_ucontext(ucontext);
-	WARN_ON(ret);
+	ib_dev->ops.dealloc_ucontext(ucontext);
+	kfree(ucontext);
 
 	ufile->ucontext = NULL;
 }
diff --git a/drivers/infiniband/core/uverbs_cmd.c b/drivers/infiniband/core/uverbs_cmd.c
index ca3d5e44af12..6e31c80f8030 100644
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -224,12 +224,13 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 	if (ret)
 		goto err;
 
-	ucontext = ib_dev->ops.alloc_ucontext(ib_dev, &attrs->driver_udata);
-	if (IS_ERR(ucontext)) {
-		ret = PTR_ERR(ucontext);
+	ucontext = rdma_zalloc_drv_obj(ib_dev, ib_ucontext);
+	if (!ucontext) {
+		ret = -ENOMEM;
 		goto err_alloc;
 	}
 
+	ucontext->res.type = RDMA_RESTRACK_CTX;
 	ucontext->device = ib_dev;
 	ucontext->cg_obj = cg_obj;
 	/* ufile is required when some objects are released */
@@ -240,10 +241,6 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 
 	mutex_init(&ucontext->per_mm_list_lock);
 	INIT_LIST_HEAD(&ucontext->per_mm_list);
-	if (!(ib_dev->attrs.device_cap_flags & IB_DEVICE_ON_DEMAND_PAGING))
-		ucontext->invalidate_range = NULL;
-
-	resp.num_comp_vectors = file->device->num_comp_vectors;
 
 	ret = get_unused_fd_flags(O_CLOEXEC);
 	if (ret < 0)
@@ -256,15 +253,22 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 		goto err_fd;
 	}
 
+	resp.num_comp_vectors = file->device->num_comp_vectors;
+
 	ret = uverbs_response(attrs, &resp, sizeof(resp));
 	if (ret)
 		goto err_file;
 
-	fd_install(resp.async_fd, filp);
+	ret = ib_dev->ops.alloc_ucontext(ucontext, &attrs->driver_udata);
+	if (ret)
+		goto err_file;
+	if (!(ib_dev->attrs.device_cap_flags & IB_DEVICE_ON_DEMAND_PAGING))
+		ucontext->invalidate_range = NULL;
 
-	ucontext->res.type = RDMA_RESTRACK_CTX;
 	rdma_restrack_uadd(&ucontext->res);
 
+	fd_install(resp.async_fd, filp);
+
 	/*
 	 * Make sure that ib_uverbs_get_ucontext() sees the pointer update
 	 * only after all writes to setup the ucontext have completed
@@ -283,7 +287,7 @@ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs)
 	put_unused_fd(resp.async_fd);
 
 err_free:
-	ib_dev->ops.dealloc_ucontext(ucontext);
+	kfree(ucontext);
 
 err_alloc:
 	ib_rdmacg_uncharge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
diff --git a/drivers/infiniband/hw/bnxt_re/ib_verbs.c b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
index bfcab22666c5..91975b8a6b91 100644
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.c
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
@@ -3691,13 +3691,14 @@ struct ib_mr *bnxt_re_reg_user_mr(struct ib_pd *ib_pd, u64 start, u64 length,
 	return ERR_PTR(rc);
 }
 
-struct ib_ucontext *bnxt_re_alloc_ucontext(struct ib_device *ibdev,
-					   struct ib_udata *udata)
+int bnxt_re_alloc_ucontext(struct ib_ucontext *ctx, struct ib_udata *udata)
 {
+	struct ib_device *ibdev = ctx->device;
+	struct bnxt_re_ucontext *uctx =
+		container_of(ctx, struct bnxt_re_ucontext, ib_uctx);
 	struct bnxt_re_dev *rdev = to_bnxt_re_dev(ibdev, ibdev);
 	struct bnxt_qplib_dev_attr *dev_attr = &rdev->dev_attr;
 	struct bnxt_re_uctx_resp resp;
-	struct bnxt_re_ucontext *uctx;
 	u32 chip_met_rev_num = 0;
 	int rc;
 
@@ -3707,13 +3708,9 @@ struct ib_ucontext *bnxt_re_alloc_ucontext(struct ib_device *ibdev,
 	if (ibdev->uverbs_abi_ver != BNXT_RE_ABI_VERSION) {
 		dev_dbg(rdev_to_dev(rdev), " is different from the device %d ",
 			BNXT_RE_ABI_VERSION);
-		return ERR_PTR(-EPERM);
+		return -EPERM;
 	}
 
-	uctx = kzalloc(sizeof(*uctx), GFP_KERNEL);
-	if (!uctx)
-		return ERR_PTR(-ENOMEM);
-
 	uctx->rdev = rdev;
 
 	uctx->shpg = (void *)__get_free_page(GFP_KERNEL);
@@ -3747,23 +3744,21 @@ struct ib_ucontext *bnxt_re_alloc_ucontext(struct ib_device *ibdev,
 		goto cfail;
 	}
 
-	return &uctx->ib_uctx;
+	return 0;
 cfail:
 	free_page((unsigned long)uctx->shpg);
 	uctx->shpg = NULL;
 fail:
-	kfree(uctx);
-	return ERR_PTR(rc);
+	return rc;
 }
 
-int bnxt_re_dealloc_ucontext(struct ib_ucontext *ib_uctx)
+void bnxt_re_dealloc_ucontext(struct ib_ucontext *ib_uctx)
 {
 	struct bnxt_re_ucontext *uctx = container_of(ib_uctx,
 						   struct bnxt_re_ucontext,
 						   ib_uctx);
 
 	struct bnxt_re_dev *rdev = uctx->rdev;
-	int rc = 0;
 
 	if (uctx->shpg)
 		free_page((unsigned long)uctx->shpg);
@@ -3772,17 +3767,10 @@ int bnxt_re_dealloc_ucontext(struct ib_ucontext *ib_uctx)
 		/* Free DPI only if this is the first PD allocated by the
 		 * application and mark the context dpi as NULL
 		 */
-		rc = bnxt_qplib_dealloc_dpi(&rdev->qplib_res,
-					    &rdev->qplib_res.dpi_tbl,
-					    &uctx->dpi);
-		if (rc)
-			dev_err(rdev_to_dev(rdev), "Deallocate HW DPI failed!");
-			/* Don't fail, continue*/
+		bnxt_qplib_dealloc_dpi(&rdev->qplib_res,
+				       &rdev->qplib_res.dpi_tbl, &uctx->dpi);
 		uctx->dpi.dbr = NULL;
 	}
-
-	kfree(uctx);
-	return 0;
 }
 
 /* Helper function to mmap the virtual memory from user app */
diff --git a/drivers/infiniband/hw/bnxt_re/ib_verbs.h b/drivers/infiniband/hw/bnxt_re/ib_verbs.h
index c4af72604b4f..86bf2a9f62c7 100644
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.h
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.h
@@ -135,8 +135,8 @@ struct bnxt_re_mw {
 };
 
 struct bnxt_re_ucontext {
+	struct ib_ucontext      ib_uctx;
 	struct bnxt_re_dev	*rdev;
-	struct ib_ucontext	ib_uctx;
 	struct bnxt_qplib_dpi	dpi;
 	void			*shpg;
 	spinlock_t		sh_lock;	/* protect shpg */
@@ -216,9 +216,8 @@ int bnxt_re_dealloc_mw(struct ib_mw *mw);
 struct ib_mr *bnxt_re_reg_user_mr(struct ib_pd *pd, u64 start, u64 length,
 				  u64 virt_addr, int mr_access_flags,
 				  struct ib_udata *udata);
-struct ib_ucontext *bnxt_re_alloc_ucontext(struct ib_device *ibdev,
-					   struct ib_udata *udata);
-int bnxt_re_dealloc_ucontext(struct ib_ucontext *context);
+int bnxt_re_alloc_ucontext(struct ib_ucontext *ctx, struct ib_udata *udata);
+void bnxt_re_dealloc_ucontext(struct ib_ucontext *context);
 int bnxt_re_mmap(struct ib_ucontext *context, struct vm_area_struct *vma);
 
 unsigned long bnxt_re_lock_cqs(struct bnxt_re_qp *qp);
* Unmerged path drivers/infiniband/hw/bnxt_re/main.c
* Unmerged path drivers/infiniband/hw/cxgb3/iwch_provider.c
* Unmerged path drivers/infiniband/hw/cxgb4/provider.c
* Unmerged path drivers/infiniband/hw/hns/hns_roce_main.c
* Unmerged path drivers/infiniband/hw/i40iw/i40iw_verbs.c
* Unmerged path drivers/infiniband/hw/mlx4/main.c
* Unmerged path drivers/infiniband/hw/mlx5/main.c
* Unmerged path drivers/infiniband/hw/mthca/mthca_provider.c
* Unmerged path drivers/infiniband/hw/nes/nes_verbs.c
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_main.c
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
index b69cfdce7970..7c002120dfcb 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
@@ -64,9 +64,8 @@ void ocrdma_get_guid(struct ocrdma_dev *, u8 *guid);
 struct net_device *ocrdma_get_netdev(struct ib_device *device, u8 port_num);
 int ocrdma_query_pkey(struct ib_device *, u8 port, u16 index, u16 *pkey);
 
-struct ib_ucontext *ocrdma_alloc_ucontext(struct ib_device *,
-					  struct ib_udata *);
-int ocrdma_dealloc_ucontext(struct ib_ucontext *);
+int ocrdma_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata);
+void ocrdma_dealloc_ucontext(struct ib_ucontext *uctx);
 
 int ocrdma_mmap(struct ib_ucontext *, struct vm_area_struct *vma);
 
* Unmerged path drivers/infiniband/hw/qedr/main.c
diff --git a/drivers/infiniband/hw/qedr/verbs.c b/drivers/infiniband/hw/qedr/verbs.c
index 9cb7820beb81..466ff4bdad29 100644
--- a/drivers/infiniband/hw/qedr/verbs.c
+++ b/drivers/infiniband/hw/qedr/verbs.c
@@ -309,28 +309,24 @@ static bool qedr_search_mmap(struct qedr_ucontext *uctx, u64 phy_addr,
 	return found;
 }
 
-struct ib_ucontext *qedr_alloc_ucontext(struct ib_device *ibdev,
-					struct ib_udata *udata)
+int qedr_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata)
 {
+	struct ib_device *ibdev = uctx->device;
 	int rc;
-	struct qedr_ucontext *ctx;
-	struct qedr_alloc_ucontext_resp uresp;
+	struct qedr_ucontext *ctx = get_qedr_ucontext(uctx);
+	struct qedr_alloc_ucontext_resp uresp = {};
 	struct qedr_dev *dev = get_qedr_dev(ibdev);
 	struct qed_rdma_add_user_out_params oparams;
 
 	if (!udata)
-		return ERR_PTR(-EFAULT);
-
-	ctx = kzalloc(sizeof(*ctx), GFP_KERNEL);
-	if (!ctx)
-		return ERR_PTR(-ENOMEM);
+		return -EFAULT;
 
 	rc = dev->ops->rdma_add_user(dev->rdma_ctx, &oparams);
 	if (rc) {
 		DP_ERR(dev,
 		       "failed to allocate a DPI for a new RoCE application, rc=%d. To overcome this consider to increase the number of DPIs, increase the doorbell BAR size or just close unnecessary RoCE applications. In order to increase the number of DPIs consult the qedr readme\n",
 		       rc);
-		goto err;
+		return rc;
 	}
 
 	ctx->dpi = oparams.dpi;
@@ -340,8 +336,6 @@ struct ib_ucontext *qedr_alloc_ucontext(struct ib_device *ibdev,
 	INIT_LIST_HEAD(&ctx->mm_head);
 	mutex_init(&ctx->mm_list_lock);
 
-	memset(&uresp, 0, sizeof(uresp));
-
 	uresp.dpm_enabled = dev->user_dpm_enabled;
 	uresp.wids_enabled = 1;
 	uresp.wid_count = oparams.wid_count;
@@ -357,28 +351,23 @@ struct ib_ucontext *qedr_alloc_ucontext(struct ib_device *ibdev,
 
 	rc = qedr_ib_copy_to_udata(udata, &uresp, sizeof(uresp));
 	if (rc)
-		goto err;
+		return rc;
 
 	ctx->dev = dev;
 
 	rc = qedr_add_mmap(ctx, ctx->dpi_phys_addr, ctx->dpi_size);
 	if (rc)
-		goto err;
+		return rc;
 
 	DP_DEBUG(dev, QEDR_MSG_INIT, "Allocating user context %p\n",
 		 &ctx->ibucontext);
-	return &ctx->ibucontext;
-
-err:
-	kfree(ctx);
-	return ERR_PTR(rc);
+	return 0;
 }
 
-int qedr_dealloc_ucontext(struct ib_ucontext *ibctx)
+void qedr_dealloc_ucontext(struct ib_ucontext *ibctx)
 {
 	struct qedr_ucontext *uctx = get_qedr_ucontext(ibctx);
 	struct qedr_mm *mm, *tmp;
-	int status = 0;
 
 	DP_DEBUG(uctx->dev, QEDR_MSG_INIT, "Deallocating user context %p\n",
 		 uctx);
@@ -391,9 +380,6 @@ int qedr_dealloc_ucontext(struct ib_ucontext *ibctx)
 		list_del(&mm->entry);
 		kfree(mm);
 	}
-
-	kfree(uctx);
-	return status;
 }
 
 int qedr_mmap(struct ib_ucontext *context, struct vm_area_struct *vma)
diff --git a/drivers/infiniband/hw/qedr/verbs.h b/drivers/infiniband/hw/qedr/verbs.h
index 0e5fb4e82418..425a3a2413d2 100644
--- a/drivers/infiniband/hw/qedr/verbs.h
+++ b/drivers/infiniband/hw/qedr/verbs.h
@@ -43,8 +43,8 @@ int qedr_iw_query_gid(struct ib_device *ibdev, u8 port,
 
 int qedr_query_pkey(struct ib_device *, u8 port, u16 index, u16 *pkey);
 
-struct ib_ucontext *qedr_alloc_ucontext(struct ib_device *, struct ib_udata *);
-int qedr_dealloc_ucontext(struct ib_ucontext *);
+int qedr_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata);
+void qedr_dealloc_ucontext(struct ib_ucontext *uctx);
 
 int qedr_mmap(struct ib_ucontext *, struct vm_area_struct *vma);
 struct ib_pd *qedr_alloc_pd(struct ib_device *,
* Unmerged path drivers/infiniband/hw/usnic/usnic_ib_main.c
diff --git a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
index 432e6f6599fa..03bc806237ac 100644
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
@@ -676,37 +676,31 @@ int usnic_ib_dereg_mr(struct ib_mr *ibmr)
 	return 0;
 }
 
-struct ib_ucontext *usnic_ib_alloc_ucontext(struct ib_device *ibdev,
-							struct ib_udata *udata)
+int usnic_ib_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata)
 {
-	struct usnic_ib_ucontext *context;
+	struct ib_device *ibdev = uctx->device;
+	struct usnic_ib_ucontext *context = to_ucontext(uctx);
 	struct usnic_ib_dev *us_ibdev = to_usdev(ibdev);
 	usnic_dbg("\n");
 
-	context = kzalloc(sizeof(*context), GFP_KERNEL);
-	if (!context)
-		return ERR_PTR(-ENOMEM);
-
 	INIT_LIST_HEAD(&context->qp_grp_list);
 	mutex_lock(&us_ibdev->usdev_lock);
 	list_add_tail(&context->link, &us_ibdev->ctx_list);
 	mutex_unlock(&us_ibdev->usdev_lock);
 
-	return &context->ibucontext;
+	return 0;
 }
 
-int usnic_ib_dealloc_ucontext(struct ib_ucontext *ibcontext)
+void usnic_ib_dealloc_ucontext(struct ib_ucontext *ibcontext)
 {
 	struct usnic_ib_ucontext *context = to_uucontext(ibcontext);
 	struct usnic_ib_dev *us_ibdev = to_usdev(ibcontext->device);
 	usnic_dbg("\n");
 
 	mutex_lock(&us_ibdev->usdev_lock);
-	BUG_ON(!list_empty(&context->qp_grp_list));
+	WARN_ON_ONCE(!list_empty(&context->qp_grp_list));
 	list_del(&context->link);
 	mutex_unlock(&us_ibdev->usdev_lock);
-	kfree(context);
-	return 0;
 }
 
 int usnic_ib_mmap(struct ib_ucontext *context,
diff --git a/drivers/infiniband/hw/usnic/usnic_ib_verbs.h b/drivers/infiniband/hw/usnic/usnic_ib_verbs.h
index e33144261b9a..d2921980f03b 100644
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.h
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.h
@@ -70,9 +70,8 @@ struct ib_mr *usnic_ib_reg_mr(struct ib_pd *pd, u64 start, u64 length,
 				u64 virt_addr, int access_flags,
 				struct ib_udata *udata);
 int usnic_ib_dereg_mr(struct ib_mr *ibmr);
-struct ib_ucontext *usnic_ib_alloc_ucontext(struct ib_device *ibdev,
-						struct ib_udata *udata);
-int usnic_ib_dealloc_ucontext(struct ib_ucontext *ibcontext);
+int usnic_ib_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata);
+void usnic_ib_dealloc_ucontext(struct ib_ucontext *ibcontext);
 int usnic_ib_mmap(struct ib_ucontext *context,
 			struct vm_area_struct *vma);
 struct ib_ah *usnic_ib_create_ah(struct ib_pd *pd,
* Unmerged path drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
diff --git a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.c b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.c
index fafb2add3b44..ace4d62980c8 100644
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.c
@@ -306,41 +306,32 @@ int pvrdma_modify_port(struct ib_device *ibdev, u8 port, int mask,
 
 /**
  * pvrdma_alloc_ucontext - allocate ucontext
- * @ibdev: the IB device
+ * @uctx: the uverbs countext
  * @udata: user data
  *
- * @return: the ib_ucontext pointer on success, otherwise errno.
+ * @return:  zero on success, otherwise errno.
  */
-struct ib_ucontext *pvrdma_alloc_ucontext(struct ib_device *ibdev,
-					  struct ib_udata *udata)
+int pvrdma_alloc_ucontext(struct ib_ucontext *uctx, struct ib_udata *udata)
 {
+	struct ib_device *ibdev = uctx->device;
 	struct pvrdma_dev *vdev = to_vdev(ibdev);
-	struct pvrdma_ucontext *context;
-	union pvrdma_cmd_req req;
-	union pvrdma_cmd_resp rsp;
+	struct pvrdma_ucontext *context = to_vucontext(uctx);
+	union pvrdma_cmd_req req = {};
+	union pvrdma_cmd_resp rsp = {};
 	struct pvrdma_cmd_create_uc *cmd = &req.create_uc;
 	struct pvrdma_cmd_create_uc_resp *resp = &rsp.create_uc_resp;
-	struct pvrdma_alloc_ucontext_resp uresp = {0};
+	struct pvrdma_alloc_ucontext_resp uresp = {};
 	int ret;
-	void *ptr;
 
 	if (!vdev->ib_active)
-		return ERR_PTR(-EAGAIN);
-
-	context = kzalloc(sizeof(*context), GFP_KERNEL);
-	if (!context)
-		return ERR_PTR(-ENOMEM);
+		return -EAGAIN;
 
 	context->dev = vdev;
 	ret = pvrdma_uar_alloc(vdev, &context->uar);
-	if (ret) {
-		kfree(context);
-		return ERR_PTR(-ENOMEM);
-	}
+	if (ret)
+		return -ENOMEM;
 
 	/* get ctx_handle from host */
-	memset(cmd, 0, sizeof(*cmd));
-
 	if (vdev->dsr_version < PVRDMA_PPN64_VERSION)
 		cmd->pfn = context->uar.pfn;
 	else
@@ -351,7 +342,6 @@ struct ib_ucontext *pvrdma_alloc_ucontext(struct ib_device *ibdev,
 	if (ret < 0) {
 		dev_warn(&vdev->pdev->dev,
 			 "could not create ucontext, error: %d\n", ret);
-		ptr = ERR_PTR(ret);
 		goto err;
 	}
 
@@ -362,33 +352,28 @@ struct ib_ucontext *pvrdma_alloc_ucontext(struct ib_device *ibdev,
 	ret = ib_copy_to_udata(udata, &uresp, sizeof(uresp));
 	if (ret) {
 		pvrdma_uar_free(vdev, &context->uar);
-		context->ibucontext.device = ibdev;
 		pvrdma_dealloc_ucontext(&context->ibucontext);
-		return ERR_PTR(-EFAULT);
+		return -EFAULT;
 	}
 
-	return &context->ibucontext;
+	return 0;
 
 err:
 	pvrdma_uar_free(vdev, &context->uar);
-	kfree(context);
-	return ptr;
+	return ret;
 }
 
 /**
  * pvrdma_dealloc_ucontext - deallocate ucontext
  * @ibcontext: the ucontext
- *
- * @return: 0 on success, otherwise errno.
  */
-int pvrdma_dealloc_ucontext(struct ib_ucontext *ibcontext)
+void pvrdma_dealloc_ucontext(struct ib_ucontext *ibcontext)
 {
 	struct pvrdma_ucontext *context = to_vucontext(ibcontext);
-	union pvrdma_cmd_req req;
+	union pvrdma_cmd_req req = {};
 	struct pvrdma_cmd_destroy_uc *cmd = &req.destroy_uc;
 	int ret;
 
-	memset(cmd, 0, sizeof(*cmd));
 	cmd->hdr.cmd = PVRDMA_CMD_DESTROY_UC;
 	cmd->ctx_handle = context->ctx_handle;
 
@@ -399,9 +384,6 @@ int pvrdma_dealloc_ucontext(struct ib_ucontext *ibcontext)
 
 	/* Free the UAR even if the device command failed */
 	pvrdma_uar_free(to_vdev(ibcontext->device), &context->uar);
-	kfree(context);
-
-	return ret;
 }
 
 /**
* Unmerged path drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
* Unmerged path drivers/infiniband/sw/rdmavt/vt.c
diff --git a/drivers/infiniband/sw/rxe/rxe_pool.c b/drivers/infiniband/sw/rxe/rxe_pool.c
index b5c91df22047..581538598d77 100644
--- a/drivers/infiniband/sw/rxe/rxe_pool.c
+++ b/drivers/infiniband/sw/rxe/rxe_pool.c
@@ -42,6 +42,7 @@ struct rxe_type_info rxe_type_info[RXE_NUM_TYPES] = {
 	[RXE_TYPE_UC] = {
 		.name		= "rxe-uc",
 		.size		= sizeof(struct rxe_ucontext),
+		.flags          = RXE_POOL_NO_ALLOC,
 	},
 	[RXE_TYPE_PD] = {
 		.name		= "rxe-pd",
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.c
diff --git a/drivers/infiniband/sw/rxe/rxe_verbs.h b/drivers/infiniband/sw/rxe/rxe_verbs.h
index 74e04801d34d..dec2c03bd5b3 100644
--- a/drivers/infiniband/sw/rxe/rxe_verbs.h
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.h
@@ -61,8 +61,8 @@ static inline int psn_compare(u32 psn_a, u32 psn_b)
 }
 
 struct rxe_ucontext {
+	struct ib_ucontext ibuc;
 	struct rxe_pool_entry	pelem;
-	struct ib_ucontext	ibuc;
 };
 
 struct rxe_pd {
* Unmerged path include/rdma/ib_verbs.h
