IB/mlx5: Add DEVX support for CQ events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit ef1659ade3590e4a29a999c6f0cb2272857638a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ef1659ad.failed

Add DEVX support for CQ events by creating and destroying the CQ via
mlx5_core and set an handler to manage its completions.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit ef1659ade3590e4a29a999c6f0cb2272857638a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/devx.c
diff --cc drivers/infiniband/hw/mlx5/devx.c
index b9841ad6052e,b6cae4ea7a37..000000000000
--- a/drivers/infiniband/hw/mlx5/devx.c
+++ b/drivers/infiniband/hw/mlx5/devx.c
@@@ -20,8 -24,71 +22,9 @@@ static void dispatch_event_fd(struct li
  enum devx_obj_flags {
  	DEVX_OBJ_FLAGS_INDIRECT_MKEY = 1 << 0,
  	DEVX_OBJ_FLAGS_DCT = 1 << 1,
+ 	DEVX_OBJ_FLAGS_CQ = 1 << 2,
  };
  
 -struct devx_async_data {
 -	struct mlx5_ib_dev *mdev;
 -	struct list_head list;
 -	struct ib_uobject *fd_uobj;
 -	struct mlx5_async_work cb_work;
 -	u16 cmd_out_len;
 -	/* must be last field in this structure */
 -	struct mlx5_ib_uapi_devx_async_cmd_hdr hdr;
 -};
 -
 -struct devx_async_event_data {
 -	struct list_head list; /* headed in ev_file->event_list */
 -	struct mlx5_ib_uapi_devx_async_event_hdr hdr;
 -};
 -
 -/* first level XA value data structure */
 -struct devx_event {
 -	struct xarray object_ids; /* second XA level, Key = object id */
 -	struct list_head unaffiliated_list;
 -};
 -
 -/* second level XA value data structure */
 -struct devx_obj_event {
 -	struct rcu_head rcu;
 -	struct list_head obj_sub_list;
 -};
 -
 -struct devx_event_subscription {
 -	struct list_head file_list; /* headed in ev_file->
 -				     * subscribed_events_list
 -				     */
 -	struct list_head xa_list; /* headed in devx_event->unaffiliated_list or
 -				   * devx_obj_event->obj_sub_list
 -				   */
 -	struct list_head obj_list; /* headed in devx_object */
 -	struct list_head event_list; /* headed in ev_file->event_list or in
 -				      * temp list via subscription
 -				      */
 -
 -	u8 is_cleaned:1;
 -	u32 xa_key_level1;
 -	u32 xa_key_level2;
 -	struct rcu_head	rcu;
 -	u64 cookie;
 -	struct devx_async_event_file *ev_file;
 -	struct file *filp; /* Upon hot unplug we need a direct access to */
 -	struct eventfd_ctx *eventfd;
 -};
 -
 -struct devx_async_event_file {
 -	struct ib_uobject uobj;
 -	/* Head of events that are subscribed to this FD */
 -	struct list_head subscribed_events_list;
 -	spinlock_t lock;
 -	wait_queue_head_t poll_wait;
 -	struct list_head event_list;
 -	struct mlx5_ib_dev *dev;
 -	u8 omit_data:1;
 -	u8 is_overflow_err:1;
 -	u8 is_destroyed:1;
 -};
 -
  #define MLX5_MAX_DESTROY_INBOX_SIZE_DW MLX5_ST_SZ_DW(delete_fte_in)
  struct devx_obj {
  	struct mlx5_core_dev	*mdev;
@@@ -32,7 -100,9 +36,8 @@@
  	union {
  		struct mlx5_ib_devx_mr	devx_mr;
  		struct mlx5_core_dct	core_dct;
+ 		struct mlx5_core_cq	core_cq;
  	};
 -	struct list_head event_sub; /* holds devx_event_subscription entries */
  };
  
  struct devx_umem {
@@@ -1194,6 -1457,8 +1230,11 @@@ static int UVERBS_HANDLER(MLX5_IB_METHO
  
  	uobj->object = obj;
  	obj->mdev = dev->mdev;
++<<<<<<< HEAD
++=======
+ 	INIT_LIST_HEAD(&obj->event_sub);
+ 	obj->ib_dev = dev;
++>>>>>>> ef1659ade359 (IB/mlx5: Add DEVX support for CQ events)
  	devx_obj_build_destroy_cmd(cmd_in, cmd_out, obj->dinbox, &obj->dinlen,
  				   &obj_id);
  	WARN_ON(obj->dinlen > MLX5_MAX_DESTROY_INBOX_SIZE_DW * sizeof(u32));
* Unmerged path drivers/infiniband/hw/mlx5/devx.c
