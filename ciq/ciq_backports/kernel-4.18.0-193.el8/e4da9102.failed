cls_api: add flow_indr_block_call function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author wenxu <wenxu@ucloud.cn>
commit e4da91021153b78b9f2972212610bc71263925f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/e4da9102.failed

This patch make indr_block_call don't access struct tc_indr_block_cb
and tc_indr_block_dev directly

	Signed-off-by: wenxu <wenxu@ucloud.cn>
	Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e4da91021153b78b9f2972212610bc71263925f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_api.c
diff --cc net/sched/cls_api.c
index 081ac3d0fb50,7c34fc6851c3..000000000000
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@@ -767,31 -773,38 +767,55 @@@ void tc_indr_block_cb_unregister(struc
  }
  EXPORT_SYMBOL_GPL(tc_indr_block_cb_unregister);
  
+ static void flow_indr_block_call(struct net_device *dev,
+ 				 struct flow_block_offload *bo,
+ 				 enum flow_block_command command)
+ {
+ 	struct tc_indr_block_cb *indr_block_cb;
+ 	struct tc_indr_block_dev *indr_dev;
+ 
+ 	indr_dev = tc_indr_block_dev_lookup(dev);
+ 	if (!indr_dev)
+ 		return;
+ 
+ 	list_for_each_entry(indr_block_cb, &indr_dev->cb_list, list)
+ 		indr_block_cb->cb(dev, indr_block_cb->cb_priv, TC_SETUP_BLOCK,
+ 				  bo);
+ }
+ 
  static void tc_indr_block_call(struct tcf_block *block, struct net_device *dev,
  			       struct tcf_block_ext_info *ei,
 -			       enum flow_block_command command,
 +			       enum tc_block_command command,
  			       struct netlink_ext_ack *extack)
  {
++<<<<<<< HEAD
 +	struct tc_indr_block_cb *indr_block_cb;
 +	struct tc_indr_block_dev *indr_dev;
 +	struct tc_block_offload bo = {
++=======
+ 	struct flow_block_offload bo = {
++>>>>>>> e4da91021153 (cls_api: add flow_indr_block_call function)
  		.command	= command,
  		.binder_type	= ei->binder_type,
 -		.net		= dev_net(dev),
 -		.block		= &block->flow_block,
 -		.block_shared	= tcf_block_shared(block),
 +		.block		= block,
  		.extack		= extack,
  	};
  	INIT_LIST_HEAD(&bo.cb_list);
  
++<<<<<<< HEAD
 +	indr_dev = tc_indr_block_dev_lookup(dev);
 +	if (!indr_dev)
 +		return;
 +
 +	indr_dev->block = command == TC_BLOCK_BIND ? block : NULL;
 +
 +	list_for_each_entry(indr_block_cb, &indr_dev->cb_list, list)
 +		indr_block_cb->cb(dev, indr_block_cb->cb_priv, TC_SETUP_BLOCK,
 +				  &bo);
 +
++=======
+ 	flow_indr_block_call(dev, &bo, command);
++>>>>>>> e4da91021153 (cls_api: add flow_indr_block_call function)
  	tcf_block_setup(block, &bo);
  }
  
* Unmerged path net/sched/cls_api.c
