RDMA/restrack: Introduce statistic counter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Mark Zhang <markz@mellanox.com>
commit 7ade1ff96c7aa7e10445688a433d7ae39a13c6c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7ade1ff9.failed

Introduce statistic counter as a new resource. It allows a user to monitor
specific objects (e.g., QPs) by binding to a counter.

In some cases a user counter resource is created with task other then
"current", because its creation is done as part of rdmatool call.

	Signed-off-by: Mark Zhang <markz@mellanox.com>
	Reviewed-by: Majd Dibbiny <majd@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 7ade1ff96c7aa7e10445688a433d7ae39a13c6c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/restrack.c
diff --cc drivers/infiniband/core/restrack.c
index bfd36820ee66,95573f292aae..000000000000
--- a/drivers/infiniband/core/restrack.c
+++ b/drivers/infiniband/core/restrack.c
@@@ -177,13 -203,30 +181,36 @@@ static void rdma_restrack_add(struct rd
  	if (!dev)
  		return;
  
 -	rt = &dev->res[res->type];
 -
  	kref_init(&res->kref);
  	init_completion(&res->comp);
++<<<<<<< HEAD
 +	res->valid = true;
 +
 +	down_write(&dev->res.rwsem);
 +	hash_add(dev->res.hash, &res->node, res->type);
 +	up_write(&dev->res.rwsem);
++=======
+ 	if (res->type == RDMA_RESTRACK_QP) {
+ 		/* Special case to ensure that LQPN points to right QP */
+ 		struct ib_qp *qp = container_of(res, struct ib_qp, res);
+ 
+ 		ret = xa_insert(&rt->xa, qp->qp_num, res, GFP_KERNEL);
+ 		res->id = ret ? 0 : qp->qp_num;
+ 	} else if (res->type == RDMA_RESTRACK_COUNTER) {
+ 		/* Special case to ensure that cntn points to right counter */
+ 		struct rdma_counter *counter;
+ 
+ 		counter = container_of(res, struct rdma_counter, res);
+ 		ret = xa_insert(&rt->xa, counter->id, res, GFP_KERNEL);
+ 		res->id = ret ? 0 : counter->id;
+ 	} else {
+ 		ret = xa_alloc_cyclic(&rt->xa, &res->id, res, xa_limit_32b,
+ 				      &rt->next_id, GFP_KERNEL);
+ 	}
+ 
+ 	if (!ret)
+ 		res->valid = true;
++>>>>>>> 7ade1ff96c7a (RDMA/restrack: Introduce statistic counter)
  }
  
  /**
* Unmerged path drivers/infiniband/core/restrack.c
diff --git a/include/rdma/rdma_counter.h b/include/rdma/rdma_counter.h
new file mode 100644
index 000000000000..283ac1a0cdb7
--- /dev/null
+++ b/include/rdma/rdma_counter.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
+/*
+ * Copyright (c) 2019 Mellanox Technologies. All rights reserved.
+ */
+
+#ifndef _RDMA_COUNTER_H_
+#define _RDMA_COUNTER_H_
+
+#include <rdma/ib_verbs.h>
+#include <rdma/restrack.h>
+
+struct rdma_counter {
+	struct rdma_restrack_entry	res;
+	struct ib_device		*device;
+	uint32_t			id;
+	u8				port;
+};
+#endif /* _RDMA_COUNTER_H_ */
diff --git a/include/rdma/restrack.h b/include/rdma/restrack.h
index 7e9d9a881f70..a5d8dbf4878e 100644
--- a/include/rdma/restrack.h
+++ b/include/rdma/restrack.h
@@ -42,6 +42,10 @@ enum rdma_restrack_type {
 	 * @RDMA_RESTRACK_CTX: Verbs contexts (CTX)
 	 */
 	RDMA_RESTRACK_CTX,
+	/**
+	 * @RDMA_RESTRACK_COUNTER: Statistic Counter
+	 */
+	RDMA_RESTRACK_COUNTER,
 	/**
 	 * @RDMA_RESTRACK_MAX: Last entry, used for array dclarations
 	 */
