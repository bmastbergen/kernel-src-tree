powerpc/fadump: add fadump support on powernv

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Hari Bathini <hbathini@linux.ibm.com>
commit 41df5928721ff4b5f83767cd5e8b77862fc62bb3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/41df5928.failed

Add basic callback functions for FADump on PowerNV platform.

	Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/156821342072.5656.4346362203141486452.stgit@hbathini.in.ibm.com
(cherry picked from commit 41df5928721ff4b5f83767cd5e8b77862fc62bb3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/fadump-internal.h
#	arch/powerpc/kernel/fadump.c
diff --cc arch/powerpc/include/asm/fadump-internal.h
index f8097510e03f,8046fe0b742e..000000000000
--- a/arch/powerpc/include/asm/fadump-internal.h
+++ b/arch/powerpc/include/asm/fadump-internal.h
@@@ -109,4 -128,18 +109,21 @@@ void fadump_update_elfcore_header(char 
  bool is_fadump_boot_mem_contiguous(void);
  bool is_fadump_reserved_mem_contiguous(void);
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_PPC_PSERIES
+ extern void rtas_fadump_dt_scan(struct fw_dump *fadump_conf, u64 node);
+ #else
+ static inline void
+ rtas_fadump_dt_scan(struct fw_dump *fadump_conf, u64 node) { }
+ #endif
+ 
+ #ifdef CONFIG_PPC_POWERNV
+ extern void opal_fadump_dt_scan(struct fw_dump *fadump_conf, u64 node);
+ #else
+ static inline void
+ opal_fadump_dt_scan(struct fw_dump *fadump_conf, u64 node) { }
+ #endif
+ 
++>>>>>>> 41df5928721f (powerpc/fadump: add fadump support on powernv)
  #endif /* _ASM_POWERPC_FADUMP_INTERNAL_H */
diff --cc arch/powerpc/kernel/fadump.c
index 56526469b148,b17673d8d50b..000000000000
--- a/arch/powerpc/kernel/fadump.c
+++ b/arch/powerpc/kernel/fadump.c
@@@ -121,66 -104,23 +121,83 @@@ static int __init fadump_cma_init(void
  #endif /* CONFIG_CMA */
  
  /* Scan the Firmware Assisted dump configuration details. */
 -int __init early_init_dt_scan_fw_dump(unsigned long node, const char *uname,
 -				      int depth, void *data)
 +int __init early_init_dt_scan_fw_dump(unsigned long node,
 +			const char *uname, int depth, void *data)
  {
++<<<<<<< HEAD
 +	const __be32 *sections;
 +	int i, num_sections;
 +	int size;
 +	const __be32 *token;
 +
 +	if (depth != 1 || strcmp(uname, "rtas") != 0)
 +		return 0;
 +
 +	/*
 +	 * Check if Firmware Assisted dump is supported. if yes, check
 +	 * if dump has been initiated on last reboot.
 +	 */
 +	token = of_get_flat_dt_prop(node, "ibm,configure-kernel-dump", NULL);
 +	if (!token)
 +		return 1;
 +
 +	fw_dump.fadump_supported = 1;
 +	fw_dump.ibm_configure_kernel_dump = be32_to_cpu(*token);
 +
 +	/*
 +	 * The 'ibm,kernel-dump' rtas node is present only if there is
 +	 * dump data waiting for us.
 +	 */
 +	fdm_active = of_get_flat_dt_prop(node, "ibm,kernel-dump", NULL);
 +	if (fdm_active)
 +		fw_dump.dump_active = 1;
 +
 +	/* Get the sizes required to store dump data for the firmware provided
 +	 * dump sections.
 +	 * For each dump section type supported, a 32bit cell which defines
 +	 * the ID of a supported section followed by two 32 bit cells which
 +	 * gives teh size of the section in bytes.
 +	 */
 +	sections = of_get_flat_dt_prop(node, "ibm,configure-kernel-dump-sizes",
 +					&size);
 +
 +	if (!sections)
 +		return 1;
 +
 +	num_sections = size / (3 * sizeof(u32));
 +
 +	for (i = 0; i < num_sections; i++, sections += 3) {
 +		u32 type = (u32)of_read_number(sections, 1);
 +
 +		switch (type) {
 +		case RTAS_FADUMP_CPU_STATE_DATA:
 +			fw_dump.cpu_state_data_size =
 +					of_read_ulong(&sections[1], 2);
 +			break;
 +		case RTAS_FADUMP_HPTE_REGION:
 +			fw_dump.hpte_region_size =
 +					of_read_ulong(&sections[1], 2);
 +			break;
 +		}
 +	}
 +
 +	return 1;
++=======
+ 	if (depth != 1)
+ 		return 0;
+ 
+ 	if (strcmp(uname, "rtas") == 0) {
+ 		rtas_fadump_dt_scan(&fw_dump, node);
+ 		return 1;
+ 	}
+ 
+ 	if (strcmp(uname, "ibm,opal") == 0) {
+ 		opal_fadump_dt_scan(&fw_dump, node);
+ 		return 1;
+ 	}
+ 
+ 	return 0;
++>>>>>>> 41df5928721f (powerpc/fadump: add fadump support on powernv)
  }
  
  /*
diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 40466f86cda5..aeadc4992cba 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -582,7 +582,7 @@ config CRASH_DUMP
 
 config FA_DUMP
 	bool "Firmware-assisted dump"
-	depends on PPC64 && PPC_RTAS
+	depends on PPC64 && (PPC_RTAS || PPC_POWERNV)
 	select CRASH_CORE
 	select CRASH_DUMP
 	help
@@ -593,7 +593,8 @@ config FA_DUMP
 	  is meant to be a kdump replacement offering robustness and
 	  speed not possible without system firmware assistance.
 
-	  If unsure, say "N"
+	  If unsure, say "y". Only special kernels like petitboot may
+	  need to say "N" here.
 
 config IRQ_ALL_CPUS
 	bool "Distribute interrupts on all CPUs by default"
* Unmerged path arch/powerpc/include/asm/fadump-internal.h
* Unmerged path arch/powerpc/kernel/fadump.c
diff --git a/arch/powerpc/platforms/powernv/Makefile b/arch/powerpc/platforms/powernv/Makefile
index da2e99efbd04..43a6e1c56730 100644
--- a/arch/powerpc/platforms/powernv/Makefile
+++ b/arch/powerpc/platforms/powernv/Makefile
@@ -6,6 +6,7 @@ obj-y			+= opal-msglog.o opal-hmi.o opal-power.o opal-irqchip.o
 obj-y			+= opal-kmsg.o opal-powercap.o opal-psr.o opal-sensor-groups.o
 
 obj-$(CONFIG_SMP)	+= smp.o subcore.o subcore-asm.o
+obj-$(CONFIG_FA_DUMP)	+= opal-fadump.o
 obj-$(CONFIG_PCI)	+= pci.o pci-ioda.o npu-dma.o pci-ioda-tce.o
 obj-$(CONFIG_CXL_BASE)	+= pci-cxl.o
 obj-$(CONFIG_EEH)	+= eeh-powernv.o
diff --git a/arch/powerpc/platforms/powernv/opal-fadump.c b/arch/powerpc/platforms/powernv/opal-fadump.c
new file mode 100644
index 000000000000..bbc5356bdc77
--- /dev/null
+++ b/arch/powerpc/platforms/powernv/opal-fadump.c
@@ -0,0 +1,92 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Firmware-Assisted Dump support on POWER platform (OPAL).
+ *
+ * Copyright 2019, Hari Bathini, IBM Corporation.
+ */
+
+#define pr_fmt(fmt) "opal fadump: " fmt
+
+#include <linux/string.h>
+#include <linux/seq_file.h>
+#include <linux/of_fdt.h>
+#include <linux/libfdt.h>
+
+#include <asm/opal.h>
+#include <asm/fadump-internal.h>
+
+static u64 opal_fadump_init_mem_struct(struct fw_dump *fadump_conf)
+{
+	return fadump_conf->reserve_dump_area_start;
+}
+
+static int opal_fadump_register(struct fw_dump *fadump_conf)
+{
+	return -EIO;
+}
+
+static int opal_fadump_unregister(struct fw_dump *fadump_conf)
+{
+	return -EIO;
+}
+
+static int opal_fadump_invalidate(struct fw_dump *fadump_conf)
+{
+	return -EIO;
+}
+
+static int __init opal_fadump_process(struct fw_dump *fadump_conf)
+{
+	return -EINVAL;
+}
+
+static void opal_fadump_region_show(struct fw_dump *fadump_conf,
+				    struct seq_file *m)
+{
+}
+
+static void opal_fadump_trigger(struct fadump_crash_info_header *fdh,
+				const char *msg)
+{
+	int rc;
+
+	rc = opal_cec_reboot2(OPAL_REBOOT_MPIPL, msg);
+	if (rc == OPAL_UNSUPPORTED) {
+		pr_emerg("Reboot type %d not supported.\n",
+			 OPAL_REBOOT_MPIPL);
+	} else if (rc == OPAL_HARDWARE)
+		pr_emerg("No backend support for MPIPL!\n");
+}
+
+static struct fadump_ops opal_fadump_ops = {
+	.fadump_init_mem_struct		= opal_fadump_init_mem_struct,
+	.fadump_register		= opal_fadump_register,
+	.fadump_unregister		= opal_fadump_unregister,
+	.fadump_invalidate		= opal_fadump_invalidate,
+	.fadump_process			= opal_fadump_process,
+	.fadump_region_show		= opal_fadump_region_show,
+	.fadump_trigger			= opal_fadump_trigger,
+};
+
+void __init opal_fadump_dt_scan(struct fw_dump *fadump_conf, u64 node)
+{
+	unsigned long dn;
+
+	/*
+	 * Check if Firmware-Assisted Dump is supported. if yes, check
+	 * if dump has been initiated on last reboot.
+	 */
+	dn = of_get_flat_dt_subnode_by_name(node, "dump");
+	if (dn == -FDT_ERR_NOTFOUND) {
+		pr_debug("FADump support is missing!\n");
+		return;
+	}
+
+	if (!of_flat_dt_is_compatible(dn, "ibm,opal-dump")) {
+		pr_err("Support missing for this f/w version!\n");
+		return;
+	}
+
+	fadump_conf->ops		= &opal_fadump_ops;
+	fadump_conf->fadump_supported	= 1;
+}
