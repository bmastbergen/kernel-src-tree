ALSA: firewire-digi00x: code refactoring for DOT data block processing layer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit bb473966774a79ae9a826f721059496d9b393acc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/bb473966.failed

This is code refactoring for DOT data block processing layer so that
it can receive list of packet descriptor.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit bb473966774a79ae9a826f721059496d9b393acc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/firewire/digi00x/amdtp-dot.c
diff --cc sound/firewire/digi00x/amdtp-dot.c
index 45ff73d16074,cef5caf97236..000000000000
--- a/sound/firewire/digi00x/amdtp-dot.c
+++ b/sound/firewire/digi00x/amdtp-dot.c
@@@ -330,44 -342,38 +342,66 @@@ void amdtp_dot_midi_trigger(struct amdt
  }
  
  static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
 -					   const struct pkt_desc *desc,
 -					   struct snd_pcm_substream *pcm)
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
  {
++<<<<<<< HEAD
 +	struct snd_pcm_substream *pcm;
 +	unsigned int pcm_frames;
++=======
+ 	unsigned int pcm_frames = 0;
++>>>>>>> bb473966774a (ALSA: firewire-digi00x: code refactoring for DOT data block processing layer)
  
 +	pcm = READ_ONCE(s->pcm);
  	if (pcm) {
++<<<<<<< HEAD
 +		read_pcm_s32(s, pcm, buffer, data_blocks);
 +		pcm_frames = data_blocks;
 +	} else {
 +		pcm_frames = 0;
++=======
+ 		read_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks,
+ 			     pcm_frames);
+ 		pcm_frames = desc->data_blocks;
++>>>>>>> bb473966774a (ALSA: firewire-digi00x: code refactoring for DOT data block processing layer)
  	}
  
 -	read_midi_messages(s, desc->ctx_payload, desc->data_blocks);
 +	read_midi_messages(s, buffer, data_blocks);
  
  	return pcm_frames;
  }
  
  static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
 -					   const struct pkt_desc *desc,
 -					   struct snd_pcm_substream *pcm)
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
  {
++<<<<<<< HEAD
 +	struct snd_pcm_substream *pcm;
 +	unsigned int pcm_frames;
++=======
+ 	unsigned int pcm_frames = 0;
++>>>>>>> bb473966774a (ALSA: firewire-digi00x: code refactoring for DOT data block processing layer)
  
 +	pcm = READ_ONCE(s->pcm);
  	if (pcm) {
++<<<<<<< HEAD
 +		write_pcm_s32(s, pcm, buffer, data_blocks);
 +		pcm_frames = data_blocks;
 +	} else {
 +		write_pcm_silence(s, buffer, data_blocks);
 +		pcm_frames = 0;
++=======
+ 		write_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks,
+ 			      pcm_frames);
+ 		pcm_frames = desc->data_blocks;
+ 	} else {
+ 		write_pcm_silence(s, desc->ctx_payload, desc->data_blocks);
++>>>>>>> bb473966774a (ALSA: firewire-digi00x: code refactoring for DOT data block processing layer)
  	}
  
 -	write_midi_messages(s, desc->ctx_payload, desc->data_blocks,
 -			    desc->data_block_counter);
 +	write_midi_messages(s, buffer, data_blocks);
  
  	return pcm_frames;
  }
* Unmerged path sound/firewire/digi00x/amdtp-dot.c
