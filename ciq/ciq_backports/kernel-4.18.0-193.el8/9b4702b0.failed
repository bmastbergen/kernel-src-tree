ALSA: firewire-lib: add a kernel API to start AMDTP streams in AMDTP domain

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit 9b4702b06c0e25abc612e6f02f3e25a51c684a01
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9b4702b0.failed

This commit adds a kernel API to start a couple of isochronous contexts
for some AMDTP streams.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 9b4702b06c0e25abc612e6f02f3e25a51c684a01)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/firewire/amdtp-stream.c
#	sound/firewire/amdtp-stream.h
diff --cc sound/firewire/amdtp-stream.c
index 49eaae157b64,158d210caea7..000000000000
--- a/sound/firewire/amdtp-stream.c
+++ b/sound/firewire/amdtp-stream.c
@@@ -1109,3 -1158,69 +1109,72 @@@ void amdtp_domain_destroy(struct amdtp_
  	WARN_ON(!list_empty(&d->streams));
  }
  EXPORT_SYMBOL_GPL(amdtp_domain_destroy);
++<<<<<<< HEAD
++=======
+ 
+ /**
+  * amdtp_domain_add_stream - register isoc context into the domain.
+  * @d: the AMDTP domain.
+  * @s: the AMDTP stream.
+  * @channel: the isochronous channel on the bus.
+  * @speed: firewire speed code.
+  */
+ int amdtp_domain_add_stream(struct amdtp_domain *d, struct amdtp_stream *s,
+ 			    int channel, int speed)
+ {
+ 	struct amdtp_stream *tmp;
+ 
+ 	list_for_each_entry(tmp, &d->streams, list) {
+ 		if (s == tmp)
+ 			return -EBUSY;
+ 	}
+ 
+ 	list_add(&s->list, &d->streams);
+ 
+ 	s->channel = channel;
+ 	s->speed = speed;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(amdtp_domain_add_stream);
+ 
+ /**
+  * amdtp_domain_start - start sending packets for isoc context in the domain.
+  * @d: the AMDTP domain.
+  */
+ int amdtp_domain_start(struct amdtp_domain *d)
+ {
+ 	struct amdtp_stream *s;
+ 	int err = 0;
+ 
+ 	list_for_each_entry(s, &d->streams, list) {
+ 		err = amdtp_stream_start(s, s->channel, s->speed);
+ 		if (err < 0)
+ 			break;
+ 	}
+ 
+ 	if (err < 0) {
+ 		list_for_each_entry(s, &d->streams, list)
+ 			amdtp_stream_stop(s);
+ 	}
+ 
+ 	return err;
+ }
+ EXPORT_SYMBOL_GPL(amdtp_domain_start);
+ 
+ /**
+  * amdtp_domain_stop - stop sending packets for isoc context in the same domain.
+  * @d: the AMDTP domain to which the isoc contexts belong.
+  */
+ void amdtp_domain_stop(struct amdtp_domain *d)
+ {
+ 	struct amdtp_stream *s, *next;
+ 
+ 	list_for_each_entry_safe(s, next, &d->streams, list) {
+ 		list_del(&s->list);
+ 
+ 		amdtp_stream_stop(s);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(amdtp_domain_stop);
++>>>>>>> 9b4702b06c0e (ALSA: firewire-lib: add a kernel API to start AMDTP streams in AMDTP domain)
diff --cc sound/firewire/amdtp-stream.h
index a739889ba7ac,15d471660a43..000000000000
--- a/sound/firewire/amdtp-stream.h
+++ b/sound/firewire/amdtp-stream.h
@@@ -272,4 -279,10 +272,13 @@@ struct amdtp_domain 
  int amdtp_domain_init(struct amdtp_domain *d);
  void amdtp_domain_destroy(struct amdtp_domain *d);
  
++<<<<<<< HEAD
++=======
+ int amdtp_domain_add_stream(struct amdtp_domain *d, struct amdtp_stream *s,
+ 			    int channel, int speed);
+ 
+ int amdtp_domain_start(struct amdtp_domain *d);
+ void amdtp_domain_stop(struct amdtp_domain *d);
+ 
++>>>>>>> 9b4702b06c0e (ALSA: firewire-lib: add a kernel API to start AMDTP streams in AMDTP domain)
  #endif
* Unmerged path sound/firewire/amdtp-stream.c
* Unmerged path sound/firewire/amdtp-stream.h
