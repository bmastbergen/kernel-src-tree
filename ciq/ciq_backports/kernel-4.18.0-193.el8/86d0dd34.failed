arm64: cpufeature: add feature for CRC32 instructions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ard Biesheuvel <ard.biesheuvel@linaro.org>
commit 86d0dd34eafffbc76a81aba6ae2d71927d3835a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/86d0dd34.failed

Add a CRC32 feature bit and wire it up to the CPU id register so we
will be able to use alternatives patching for CRC32 operations.

	Acked-by: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 86d0dd34eafffbc76a81aba6ae2d71927d3835a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/cpucaps.h
#	arch/arm64/kernel/cpufeature.c
diff --cc arch/arm64/include/asm/cpucaps.h
index 1a8df16d556c,9932aca9704b..000000000000
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@@ -51,11 -51,8 +51,17 @@@
  #define ARM64_SSBD				30
  #define ARM64_MISMATCHED_CACHE_TYPE		31
  #define ARM64_HAS_STAGE2_FWB			32
++<<<<<<< HEAD
 +#define ARM64_WORKAROUND_1188873		33
 +#define ARM64_SSBS				34
 +#define ARM64_WORKAROUND_1165522		35
 +#define ARM64_HAS_SB				36
 +
 +#define ARM64_NCAPS				37
++=======
+ #define ARM64_HAS_CRC32				33
+ 
+ #define ARM64_NCAPS				34
++>>>>>>> 86d0dd34eaff (arm64: cpufeature: add feature for CRC32 instructions)
  
  #endif /* __ASM_CPUCAPS_H */
diff --cc arch/arm64/kernel/cpufeature.c
index 3630d32ce316,7626b80128f5..000000000000
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@@ -1349,41 -1223,14 +1349,52 @@@ static const struct arm64_cpu_capabilit
  	},
  #endif
  	{
++<<<<<<< HEAD
 +		.desc = "Speculation barrier (SB)",
 +		.capability = ARM64_HAS_SB,
 +		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
 +		.matches = has_cpuid_feature,
 +		.sys_reg = SYS_ID_AA64ISAR1_EL1,
 +		.field_pos = ID_AA64ISAR1_SB_SHIFT,
 +		.sign = FTR_UNSIGNED,
 +		.min_field_value = 1,
 +	},
 +#ifdef CONFIG_ARM64_CNP
 +	{
 +		.desc = "Common not Private translations",
 +		.capability = ARM64_HAS_CNP,
 +		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
 +		.matches = has_useable_cnp,
 +		.sys_reg = SYS_ID_AA64MMFR2_EL1,
 +		.sign = FTR_UNSIGNED,
 +		.field_pos = ID_AA64MMFR2_CNP_SHIFT,
 +		.min_field_value = 1,
 +		.cpu_enable = cpu_enable_cnp,
 +	},
 +#endif
 +#ifdef CONFIG_ARM64_SSBD
 +	{
 +		.desc = "Speculative Store Bypassing Safe (SSBS)",
 +		.capability = ARM64_SSBS,
 +		.type = ARM64_CPUCAP_WEAK_LOCAL_CPU_FEATURE,
 +		.matches = has_cpuid_feature,
 +		.sys_reg = SYS_ID_AA64PFR1_EL1,
 +		.field_pos = ID_AA64PFR1_SSBS_SHIFT,
 +		.sign = FTR_UNSIGNED,
 +		.min_field_value = ID_AA64PFR1_SSBS_PSTATE_ONLY,
 +		.cpu_enable = cpu_enable_ssbs,
 +	},
 +#endif
++=======
+ 		.desc = "CRC32 instructions",
+ 		.capability = ARM64_HAS_CRC32,
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.matches = has_cpuid_feature,
+ 		.sys_reg = SYS_ID_AA64ISAR0_EL1,
+ 		.field_pos = ID_AA64ISAR0_CRC32_SHIFT,
+ 		.min_field_value = 1,
+ 	},
++>>>>>>> 86d0dd34eaff (arm64: cpufeature: add feature for CRC32 instructions)
  	{},
  };
  
* Unmerged path arch/arm64/include/asm/cpucaps.h
* Unmerged path arch/arm64/kernel/cpufeature.c
