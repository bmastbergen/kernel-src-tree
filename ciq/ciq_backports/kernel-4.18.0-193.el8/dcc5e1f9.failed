selftests: tc: add ingress device matching support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit dcc5e1f9cad0e31198c4a4254981928299b49054
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/dcc5e1f9.failed

Extend tc_flower to test plain ingress device matching and also
tc_shblock to test ingress device matching on shared block.
Add new tc_flower_router.sh where ingress device matching on egress
(after routing) is done.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dcc5e1f9cad0e31198c4a4254981928299b49054)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/net/forwarding/tc_flower.sh
diff --cc tools/testing/selftests/net/forwarding/tc_flower.sh
index 20d1077e5a3d,058c746ee300..000000000000
--- a/tools/testing/selftests/net/forwarding/tc_flower.sh
+++ b/tools/testing/selftests/net/forwarding/tc_flower.sh
@@@ -2,7 -2,8 +2,12 @@@
  # SPDX-License-Identifier: GPL-2.0
  
  ALL_TESTS="match_dst_mac_test match_src_mac_test match_dst_ip_test \
++<<<<<<< HEAD
 +	match_src_ip_test match_ip_flags_test"
++=======
+ 	match_src_ip_test match_ip_flags_test match_pcp_test match_vlan_test \
+ 	match_ip_tos_test match_indev_test"
++>>>>>>> dcc5e1f9cad0 (selftests: tc: add ingress device matching support)
  NUM_NETIFS=2
  source tc_common.sh
  source lib.sh
@@@ -219,6 -220,120 +224,123 @@@ match_ip_flags_test(
  	log_test "ip_flags match ($tcflags)"
  }
  
++<<<<<<< HEAD
++=======
+ match_pcp_test()
+ {
+ 	RET=0
+ 
+ 	vlan_create $h2 85 v$h2 192.0.2.11/24
+ 
+ 	tc filter add dev $h2 ingress protocol 802.1q pref 1 handle 101 \
+ 		flower vlan_prio 6 $tcflags dst_mac $h2mac action drop
+ 	tc filter add dev $h2 ingress protocol 802.1q pref 2 handle 102 \
+ 		flower vlan_prio 7 $tcflags dst_mac $h2mac action drop
+ 
+ 	$MZ $h1 -c 1 -p 64 -a $h1mac -b $h2mac -B 192.0.2.11 -Q 7:85 -t ip -q
+ 	$MZ $h1 -c 1 -p 64 -a $h1mac -b $h2mac -B 192.0.2.11 -Q 0:85 -t ip -q
+ 
+ 	tc_check_packets "dev $h2 ingress" 101 0
+ 	check_err $? "Matched on specified PCP when should not"
+ 
+ 	tc_check_packets "dev $h2 ingress" 102 1
+ 	check_err $? "Did not match on specified PCP"
+ 
+ 	tc filter del dev $h2 ingress protocol 802.1q pref 2 handle 102 flower
+ 	tc filter del dev $h2 ingress protocol 802.1q pref 1 handle 101 flower
+ 
+ 	vlan_destroy $h2 85
+ 
+ 	log_test "PCP match ($tcflags)"
+ }
+ 
+ match_vlan_test()
+ {
+ 	RET=0
+ 
+ 	vlan_create $h2 85 v$h2 192.0.2.11/24
+ 	vlan_create $h2 75 v$h2 192.0.2.10/24
+ 
+ 	tc filter add dev $h2 ingress protocol 802.1q pref 1 handle 101 \
+ 		flower vlan_id 75 $tcflags action drop
+ 	tc filter add dev $h2 ingress protocol 802.1q pref 2 handle 102 \
+ 		flower vlan_id 85 $tcflags action drop
+ 
+ 	$MZ $h1 -c 1 -p 64 -a $h1mac -b $h2mac -B 192.0.2.11 -Q 0:85 -t ip -q
+ 
+ 	tc_check_packets "dev $h2 ingress" 101 0
+ 	check_err $? "Matched on specified VLAN when should not"
+ 
+ 	tc_check_packets "dev $h2 ingress" 102 1
+ 	check_err $? "Did not match on specified VLAN"
+ 
+ 	tc filter del dev $h2 ingress protocol 802.1q pref 2 handle 102 flower
+ 	tc filter del dev $h2 ingress protocol 802.1q pref 1 handle 101 flower
+ 
+ 	vlan_destroy $h2 75
+ 	vlan_destroy $h2 85
+ 
+ 	log_test "VLAN match ($tcflags)"
+ }
+ 
+ match_ip_tos_test()
+ {
+ 	RET=0
+ 
+ 	tc filter add dev $h2 ingress protocol ip pref 1 handle 101 flower \
+ 		$tcflags dst_ip 192.0.2.2 ip_tos 0x20 action drop
+ 	tc filter add dev $h2 ingress protocol ip pref 2 handle 102 flower \
+ 		$tcflags dst_ip 192.0.2.2 ip_tos 0x18 action drop
+ 
+ 	$MZ $h1 -c 1 -p 64 -a $h1mac -b $h2mac -A 192.0.2.1 -B 192.0.2.2 \
+ 		-t ip tos=18 -q
+ 
+ 	tc_check_packets "dev $h2 ingress" 101 1
+ 	check_fail $? "Matched on a wrong filter (0x18)"
+ 
+ 	tc_check_packets "dev $h2 ingress" 102 1
+ 	check_err $? "Did not match on correct filter (0x18)"
+ 
+ 	$MZ $h1 -c 1 -p 64 -a $h1mac -b $h2mac -A 192.0.2.1 -B 192.0.2.2 \
+ 		-t ip tos=20 -q
+ 
+ 	tc_check_packets "dev $h2 ingress" 102 2
+ 	check_fail $? "Matched on a wrong filter (0x20)"
+ 
+ 	tc_check_packets "dev $h2 ingress" 101 1
+ 	check_err $? "Did not match on correct filter (0x20)"
+ 
+ 	tc filter del dev $h2 ingress protocol ip pref 2 handle 102 flower
+ 	tc filter del dev $h2 ingress protocol ip pref 1 handle 101 flower
+ 
+ 	log_test "ip_tos match ($tcflags)"
+ }
+ 
+ match_indev_test()
+ {
+ 	RET=0
+ 
+ 	tc filter add dev $h2 ingress protocol ip pref 1 handle 101 flower \
+ 		$tcflags indev $h1 dst_mac $h2mac action drop
+ 	tc filter add dev $h2 ingress protocol ip pref 2 handle 102 flower \
+ 		$tcflags indev $h2 dst_mac $h2mac action drop
+ 
+ 	$MZ $h1 -c 1 -p 64 -a $h1mac -b $h2mac -A 192.0.2.1 -B 192.0.2.2 \
+ 		-t ip -q
+ 
+ 	tc_check_packets "dev $h2 ingress" 101 1
+ 	check_fail $? "Matched on a wrong filter"
+ 
+ 	tc_check_packets "dev $h2 ingress" 102 1
+ 	check_err $? "Did not match on correct filter"
+ 
+ 	tc filter del dev $h2 ingress protocol ip pref 2 handle 102 flower
+ 	tc filter del dev $h2 ingress protocol ip pref 1 handle 101 flower
+ 
+ 	log_test "indev match ($tcflags)"
+ }
+ 
++>>>>>>> dcc5e1f9cad0 (selftests: tc: add ingress device matching support)
  setup_prepare()
  {
  	h1=${NETIFS[p1]}
* Unmerged path tools/testing/selftests/net/forwarding/tc_flower.sh
diff --git a/tools/testing/selftests/net/forwarding/tc_flower_router.sh b/tools/testing/selftests/net/forwarding/tc_flower_router.sh
new file mode 100755
index 000000000000..4aee9c9e69f6
--- /dev/null
+++ b/tools/testing/selftests/net/forwarding/tc_flower_router.sh
@@ -0,0 +1,172 @@
+#!/bin/bash
+# SPDX-License-Identifier: GPL-2.0
+
+ALL_TESTS="match_indev_egress_test"
+NUM_NETIFS=6
+source tc_common.sh
+source lib.sh
+
+h1_create()
+{
+	simple_if_init $h1 192.0.1.1/24
+
+	ip route add 192.0.2.0/24 vrf v$h1 nexthop via 192.0.1.2
+	ip route add 192.0.3.0/24 vrf v$h1 nexthop via 192.0.1.2
+}
+
+h1_destroy()
+{
+	ip route del 192.0.3.0/24 vrf v$h1
+	ip route del 192.0.2.0/24 vrf v$h1
+
+	simple_if_fini $h1 192.0.1.1/24
+}
+
+h2_create()
+{
+	simple_if_init $h2 192.0.2.1/24
+
+	ip route add 192.0.1.0/24 vrf v$h2 nexthop via 192.0.2.2
+	ip route add 192.0.3.0/24 vrf v$h2 nexthop via 192.0.2.2
+}
+
+h2_destroy()
+{
+	ip route del 192.0.3.0/24 vrf v$h2
+	ip route del 192.0.1.0/24 vrf v$h2
+
+	simple_if_fini $h2 192.0.2.1/24
+}
+
+h3_create()
+{
+	simple_if_init $h3 192.0.3.1/24
+
+	ip route add 192.0.1.0/24 vrf v$h3 nexthop via 192.0.3.2
+	ip route add 192.0.2.0/24 vrf v$h3 nexthop via 192.0.3.2
+}
+
+h3_destroy()
+{
+	ip route del 192.0.2.0/24 vrf v$h3
+	ip route del 192.0.1.0/24 vrf v$h3
+
+	simple_if_fini $h3 192.0.3.1/24
+}
+
+
+router_create()
+{
+	ip link set dev $rp1 up
+	ip link set dev $rp2 up
+	ip link set dev $rp3 up
+
+	tc qdisc add dev $rp3 clsact
+
+	ip address add 192.0.1.2/24 dev $rp1
+	ip address add 192.0.2.2/24 dev $rp2
+	ip address add 192.0.3.2/24 dev $rp3
+}
+
+router_destroy()
+{
+	ip address del 192.0.3.2/24 dev $rp3
+	ip address del 192.0.2.2/24 dev $rp2
+	ip address del 192.0.1.2/24 dev $rp1
+
+	tc qdisc del dev $rp3 clsact
+
+	ip link set dev $rp3 down
+	ip link set dev $rp2 down
+	ip link set dev $rp1 down
+}
+
+match_indev_egress_test()
+{
+	RET=0
+
+	tc filter add dev $rp3 egress protocol ip pref 1 handle 101 flower \
+		$tcflags indev $rp1 dst_ip 192.0.3.1 action drop
+	tc filter add dev $rp3 egress protocol ip pref 2 handle 102 flower \
+		$tcflags indev $rp2 dst_ip 192.0.3.1 action drop
+
+	$MZ $h1 -c 1 -p 64 -a $h1mac -b $rp1mac -A 192.0.1.1 -B 192.0.3.1 \
+		-t ip -q
+
+	tc_check_packets "dev $rp3 egress" 102 1
+	check_fail $? "Matched on a wrong filter"
+
+	tc_check_packets "dev $rp3 egress" 101 1
+	check_err $? "Did not match on correct filter"
+
+	$MZ $h2 -c 1 -p 64 -a $h2mac -b $rp2mac -A 192.0.2.1 -B 192.0.3.1 \
+		-t ip -q
+
+	tc_check_packets "dev $rp3 egress" 101 2
+	check_fail $? "Matched on a wrong filter"
+
+	tc_check_packets "dev $rp3 egress" 102 1
+	check_err $? "Did not match on correct filter"
+
+	tc filter del dev $rp3 egress protocol ip pref 2 handle 102 flower
+	tc filter del dev $rp3 egress protocol ip pref 1 handle 101 flower
+
+	log_test "indev egress match ($tcflags)"
+}
+
+setup_prepare()
+{
+	h1=${NETIFS[p1]}
+	rp1=${NETIFS[p2]}
+
+	h2=${NETIFS[p3]}
+	rp2=${NETIFS[p4]}
+
+	h3=${NETIFS[p5]}
+	rp3=${NETIFS[p6]}
+
+	h1mac=$(mac_get $h1)
+	rp1mac=$(mac_get $rp1)
+	h2mac=$(mac_get $h2)
+	rp2mac=$(mac_get $rp2)
+
+	vrf_prepare
+
+	h1_create
+	h2_create
+	h3_create
+
+	router_create
+
+	forwarding_enable
+}
+
+cleanup()
+{
+	pre_cleanup
+
+	forwarding_restore
+
+	router_destroy
+
+	h3_destroy
+	h2_destroy
+	h1_destroy
+
+	vrf_cleanup
+}
+
+trap cleanup EXIT
+
+setup_prepare
+setup_wait
+
+tc_offload_check
+if [[ $? -ne 0 ]]; then
+	log_info "Could not test offloaded functionality"
+else
+	tcflags="skip_sw"
+	tests_run
+fi
+
+exit $EXIT_STATUS
diff --git a/tools/testing/selftests/net/forwarding/tc_shblocks.sh b/tools/testing/selftests/net/forwarding/tc_shblocks.sh
index 9826a446e2c0..772e00ac3230 100755
--- a/tools/testing/selftests/net/forwarding/tc_shblocks.sh
+++ b/tools/testing/selftests/net/forwarding/tc_shblocks.sh
@@ -1,7 +1,7 @@
 #!/bin/bash
 # SPDX-License-Identifier: GPL-2.0
 
-ALL_TESTS="shared_block_test"
+ALL_TESTS="shared_block_test match_indev_test"
 NUM_NETIFS=4
 source tc_common.sh
 source lib.sh
@@ -70,6 +70,33 @@ shared_block_test()
 	log_test "shared block ($tcflags)"
 }
 
+match_indev_test()
+{
+	RET=0
+
+	tc filter add block 22 protocol ip pref 1 handle 101 flower \
+		$tcflags indev $swp1 dst_mac $swmac action drop
+	tc filter add block 22 protocol ip pref 2 handle 102 flower \
+		$tcflags indev $swp2 dst_mac $swmac action drop
+
+	$MZ $h1 -c 1 -p 64 -a $h1mac -b $swmac -A 192.0.2.1 -B 192.0.2.2 \
+		-t ip -q
+
+	tc_check_packets "block 22" 101 1
+	check_err $? "Did not match first incoming packet on a block"
+
+	$MZ $h2 -c 1 -p 64 -a $h2mac -b $swmac -A 192.0.2.1 -B 192.0.2.2 \
+		-t ip -q
+
+	tc_check_packets "block 22" 102 1
+	check_err $? "Did not match second incoming packet on a block"
+
+	tc filter del block 22 protocol ip pref 1 handle 101 flower
+	tc filter del block 22 protocol ip pref 2 handle 102 flower
+
+	log_test "indev match ($tcflags)"
+}
+
 setup_prepare()
 {
 	h1=${NETIFS[p1]}
