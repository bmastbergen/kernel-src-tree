net: sched: flower: use correct ht function to prevent duplicates

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] sched: flower: use correct ht function to prevent duplicates (Ivan Vecera) [1751856]
Rebuild_FUZZ: 96.00%
commit-author Vlad Buslov <vladbu@mellanox.com>
commit 9e35552ae1eafd666e7388a1a94a321665d2f911
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9e35552a.failed

Implementation of function rhashtable_insert_fast() check if its internal
helper function __rhashtable_insert_fast() returns non-NULL pointer and
seemingly return -EEXIST in such case. However, since
__rhashtable_insert_fast() is called with NULL key pointer, it never
actually checks for duplicates, which means that -EEXIST is never returned
to the user. Use rhashtable_lookup_insert_fast() hash table API instead. In
order to verify that it works as expected and prevent the problem from
happening in future, extend tc-tests with new test that verifies that no
new filters with existing key can be inserted to flower classifier.

Fixes: 1f17f7742eeb ("net: sched: flower: insert filter to ht before offloading it to hw")
	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9e35552ae1eafd666e7388a1a94a321665d2f911)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_flower.c
diff --cc net/sched/cls_flower.c
index bf30bf04d4ea,9cd8122a5c38..000000000000
--- a/net/sched/cls_flower.c
+++ b/net/sched/cls_flower.c
@@@ -1356,6 -1459,28 +1356,31 @@@ static int fl_set_parms(struct net *net
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int fl_ht_insert_unique(struct cls_fl_filter *fnew,
+ 			       struct cls_fl_filter *fold,
+ 			       bool *in_ht)
+ {
+ 	struct fl_flow_mask *mask = fnew->mask;
+ 	int err;
+ 
+ 	err = rhashtable_lookup_insert_fast(&mask->ht,
+ 					    &fnew->ht_node,
+ 					    mask->filter_ht_params);
+ 	if (err) {
+ 		*in_ht = false;
+ 		/* It is okay if filter with same key exists when
+ 		 * overwriting.
+ 		 */
+ 		return fold && err == -EEXIST ? 0 : err;
+ 	}
+ 
+ 	*in_ht = true;
+ 	return 0;
+ }
+ 
++>>>>>>> 9e35552ae1ea (net: sched: flower: use correct ht function to prevent duplicates)
  static int fl_change(struct net *net, struct sk_buff *in_skb,
  		     struct tcf_proto *tp, unsigned long base,
  		     u32 handle, struct nlattr **tca,
* Unmerged path net/sched/cls_flower.c
diff --git a/tools/testing/selftests/tc-testing/tc-tests/filters/tests.json b/tools/testing/selftests/tc-testing/tc-tests/filters/tests.json
index 2d096b2abf2c..e2f92cefb8d5 100644
--- a/tools/testing/selftests/tc-testing/tc-tests/filters/tests.json
+++ b/tools/testing/selftests/tc-testing/tc-tests/filters/tests.json
@@ -58,5 +58,25 @@
             "$TC qdisc del dev $DEV2 ingress",
             "/bin/rm $BATCH_FILE"
         ]
+    },
+    {
+        "id": "4cbd",
+        "name": "Try to add filter with duplicate key",
+        "category": [
+            "filter",
+            "flower"
+        ],
+        "setup": [
+            "$TC qdisc add dev $DEV2 ingress",
+            "$TC filter add dev $DEV2 protocol ip prio 1 parent ffff: flower dst_mac e4:11:22:11:4a:51 src_mac e4:11:22:11:4a:50 ip_proto tcp src_ip 1.1.1.1 dst_ip 2.2.2.2 action drop"
+        ],
+        "cmdUnderTest": "$TC filter add dev $DEV2 protocol ip prio 1 parent ffff: flower dst_mac e4:11:22:11:4a:51 src_mac e4:11:22:11:4a:50 ip_proto tcp src_ip 1.1.1.1 dst_ip 2.2.2.2 action drop",
+        "expExitCode": "2",
+        "verifyCmd": "$TC -s filter show dev $DEV2 ingress",
+        "matchPattern": "filter protocol ip pref 1 flower chain 0 handle",
+        "matchCount": "1",
+        "teardown": [
+            "$TC qdisc del dev $DEV2 ingress"
+        ]
     }
 ]
