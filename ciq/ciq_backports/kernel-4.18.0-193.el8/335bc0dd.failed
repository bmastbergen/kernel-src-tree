nfp: register devlink port before netdev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit 335bc0dde0120b9e46a726309cf6010e39d56c82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/335bc0dd.failed

Change the init/fini flow and register devlink port instance before
netdev. Now it is needed for correct behavior of phys_port_name
generation, but in general it makes sense to register devlink port
first.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 335bc0dde0120b9e46a726309cf6010e39d56c82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_main.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index 08f5fdbd8e41,986464d4a206..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@@ -153,15 -153,18 +153,22 @@@ nfp_net_pf_init_vnic(struct nfp_pf *pf
  	if (nn->port) {
  		err = nfp_devlink_port_register(pf->app, nn->port);
  		if (err)
++<<<<<<< HEAD
 +			goto err_dfs_clean;
++=======
+ 			return err;
++>>>>>>> 335bc0dde012 (nfp: register devlink port before netdev)
  	}
  
+ 	err = nfp_net_init(nn);
+ 	if (err)
+ 		goto err_devlink_port_clean;
+ 
+ 	nfp_net_debugfs_vnic_add(nn, pf->ddir);
+ 
+ 	if (nn->port)
+ 		nfp_devlink_port_type_eth_set(nn->port);
+ 
  	nfp_net_info(nn);
  
  	if (nfp_net_is_data_vnic(nn)) {
@@@ -172,12 -175,14 +179,21 @@@
  
  	return 0;
  
++<<<<<<< HEAD
 +err_devlink_port_clean:
 +	if (nn->port)
 +		nfp_devlink_port_unregister(nn->port);
 +err_dfs_clean:
++=======
+ err_devlink_port_type_clean:
+ 	if (nn->port)
+ 		nfp_devlink_port_type_clear(nn->port);
++>>>>>>> 335bc0dde012 (nfp: register devlink port before netdev)
  	nfp_net_debugfs_dir_clean(&nn->debugfs_dir);
  	nfp_net_clean(nn);
+ err_devlink_port_clean:
+ 	if (nn->port)
+ 		nfp_devlink_port_unregister(nn->port);
  	return err;
  }
  
@@@ -221,9 -226,11 +237,15 @@@ static void nfp_net_pf_clean_vnic(struc
  	if (nfp_net_is_data_vnic(nn))
  		nfp_app_vnic_clean(pf->app, nn);
  	if (nn->port)
++<<<<<<< HEAD
 +		nfp_devlink_port_unregister(nn->port);
++=======
+ 		nfp_devlink_port_type_clear(nn->port);
++>>>>>>> 335bc0dde012 (nfp: register devlink port before netdev)
  	nfp_net_debugfs_dir_clean(&nn->debugfs_dir);
  	nfp_net_clean(nn);
+ 	if (nn->port)
+ 		nfp_devlink_port_unregister(nn->port);
  }
  
  static int nfp_net_pf_alloc_irqs(struct nfp_pf *pf)
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_main.c
