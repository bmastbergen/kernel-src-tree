nvme-multipath: fix possible I/O hang when paths are updated

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Anton Eidelman <anton@lightbitslabs.com>
commit 504db087aaccdb32af61539916409f7dca31ceb5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/504db087.failed

nvme_state_set_live() making a path available triggers requeue_work
in order to resubmit requests that ended up on requeue_list when no
paths were available.

This requeue_work may race with concurrent nvme_ns_head_make_request()
that do not observe the live path yet.
Such concurrent requests may by made by either:
- New IO submission.
- Requeue_work triggered by nvme_failover_req() or another ana_work.

A race may cause requeue_work capture the state of requeue_list before
more requests get onto the list. These requests will stay on the list
forever unless requeue_work is triggered again.

In order to prevent such race, nvme_state_set_live() should
synchronize_srcu(&head->srcu) before triggering the requeue_work and
prevent nvme_ns_head_make_request referencing an old snapshot of the
path list.

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 504db087aaccdb32af61539916409f7dca31ceb5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/multipath.c
diff --cc drivers/nvme/host/multipath.c
index 8c9979899b81,af831d3d15d0..000000000000
--- a/drivers/nvme/host/multipath.c
+++ b/drivers/nvme/host/multipath.c
@@@ -430,15 -428,7 +430,19 @@@ static void nvme_mpath_set_live(struct 
  		srcu_read_unlock(&head->srcu, srcu_idx);
  	}
  
++<<<<<<< HEAD
 +	if (nvme_path_is_optimized(ns)) {
 +		int node, srcu_idx;
 +
 +		srcu_idx = srcu_read_lock(&head->srcu);
 +		for_each_node(node)
 +			__nvme_find_path(head, node);
 +		srcu_read_unlock(&head->srcu, srcu_idx);
 +	}
 +
++=======
+ 	synchronize_srcu(&ns->head->srcu);
++>>>>>>> 504db087aacc (nvme-multipath: fix possible I/O hang when paths are updated)
  	kblockd_schedule_work(&ns->head->requeue_work);
  }
  
* Unmerged path drivers/nvme/host/multipath.c
