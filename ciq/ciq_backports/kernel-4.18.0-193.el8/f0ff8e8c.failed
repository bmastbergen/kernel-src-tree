net/mlx5e: Convert stats groups array to array of group pointers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit f0ff8e8c7206886a5360eee7d3f664480ed473c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f0ff8e8c.failed

Convert stats groups array to array of "stats group" pointers to allow
sharing and individual selection of groups per profile as illustrated in
the next patches.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
(cherry picked from commit f0ff8e8c7206886a5360eee7d3f664480ed473c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 1599dd95552b,220ef9f06f84..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -804,8 -889,11 +804,13 @@@ struct mlx5e_profile 
  	void	(*cleanup_tx)(struct mlx5e_priv *priv);
  	void	(*enable)(struct mlx5e_priv *priv);
  	void	(*disable)(struct mlx5e_priv *priv);
 -	int	(*update_rx)(struct mlx5e_priv *priv);
  	void	(*update_stats)(struct mlx5e_priv *priv);
  	void	(*update_carrier)(struct mlx5e_priv *priv);
++<<<<<<< HEAD
++=======
+ 	unsigned int (*stats_grps_num)(struct mlx5e_priv *priv);
+ 	mlx5e_stats_grp_t *stats_grps;
++>>>>>>> f0ff8e8c7206 (net/mlx5e: Convert stats groups array to array of group pointers)
  	struct {
  		mlx5e_fp_handle_rx_cqe handle_rx_cqe;
  		mlx5e_fp_handle_rx_cqe handle_rx_cqe_mpwqe;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index a71021978d58,f3600ae4b0a1..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -181,10 -163,10 +181,17 @@@ void mlx5e_update_ndo_stats(struct mlx5
  {
  	int i;
  
++<<<<<<< HEAD
 +	for (i = mlx5e_num_stats_grps - 1; i >= 0; i--)
 +		if (mlx5e_stats_grps[i].update_stats_mask &
 +		    MLX5E_NDO_UPDATE_STATS)
 +			mlx5e_stats_grps[i].update_stats(priv);
++=======
+ 	for (i = mlx5e_nic_stats_grps_num(priv) - 1; i >= 0; i--)
+ 		if (mlx5e_nic_stats_grps[i]->update_stats_mask &
+ 		    MLX5E_NDO_UPDATE_STATS)
+ 			mlx5e_nic_stats_grps[i]->update_stats(priv);
++>>>>>>> f0ff8e8c7206 (net/mlx5e: Convert stats groups array to array of group pointers)
  }
  
  static void mlx5e_update_stats_work(struct work_struct *work)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index f68b345df892,85730a8899c1..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -35,6 -35,58 +35,61 @@@
  #include "en_accel/ipsec.h"
  #include "en_accel/tls.h"
  
++<<<<<<< HEAD
++=======
+ static unsigned int stats_grps_num(struct mlx5e_priv *priv)
+ {
+ 	return !priv->profile->stats_grps_num ? 0 :
+ 		priv->profile->stats_grps_num(priv);
+ }
+ 
+ unsigned int mlx5e_stats_total_num(struct mlx5e_priv *priv)
+ {
+ 	mlx5e_stats_grp_t *stats_grps = priv->profile->stats_grps;
+ 	const unsigned int num_stats_grps = stats_grps_num(priv);
+ 	unsigned int total = 0;
+ 	int i;
+ 
+ 	for (i = 0; i < num_stats_grps; i++)
+ 		total += stats_grps[i]->get_num_stats(priv);
+ 
+ 	return total;
+ }
+ 
+ void mlx5e_stats_update(struct mlx5e_priv *priv)
+ {
+ 	mlx5e_stats_grp_t *stats_grps = priv->profile->stats_grps;
+ 	const unsigned int num_stats_grps = stats_grps_num(priv);
+ 	int i;
+ 
+ 	for (i = num_stats_grps - 1; i >= 0; i--)
+ 		if (stats_grps[i]->update_stats)
+ 			stats_grps[i]->update_stats(priv);
+ }
+ 
+ void mlx5e_stats_fill(struct mlx5e_priv *priv, u64 *data, int idx)
+ {
+ 	mlx5e_stats_grp_t *stats_grps = priv->profile->stats_grps;
+ 	const unsigned int num_stats_grps = stats_grps_num(priv);
+ 	int i;
+ 
+ 	for (i = 0; i < num_stats_grps; i++)
+ 		idx = stats_grps[i]->fill_stats(priv, data, idx);
+ }
+ 
+ void mlx5e_stats_fill_strings(struct mlx5e_priv *priv, u8 *data)
+ {
+ 	mlx5e_stats_grp_t *stats_grps = priv->profile->stats_grps;
+ 	const unsigned int num_stats_grps = stats_grps_num(priv);
+ 	int i, idx = 0;
+ 
+ 	for (i = 0; i < num_stats_grps; i++)
+ 		idx = stats_grps[i]->fill_strings(priv, data, idx);
+ }
+ 
+ /* Concrete NIC Stats */
+ 
++>>>>>>> f0ff8e8c7206 (net/mlx5e: Convert stats groups array to array of group pointers)
  static const struct counter_desc sw_stats_desc[] = {
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_packets) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_bytes) },
@@@ -1519,104 -1698,46 +1574,144 @@@ static int mlx5e_grp_channels_fill_stat
  	return idx;
  }
  
++<<<<<<< HEAD
 +/* The stats groups order is opposite to the update_stats() order calls */
 +const struct mlx5e_stats_grp mlx5e_stats_grps[] = {
 +	{
 +		.get_num_stats = mlx5e_grp_sw_get_num_stats,
 +		.fill_strings = mlx5e_grp_sw_fill_strings,
 +		.fill_stats = mlx5e_grp_sw_fill_stats,
 +		.update_stats = mlx5e_grp_sw_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_q_get_num_stats,
 +		.fill_strings = mlx5e_grp_q_fill_strings,
 +		.fill_stats = mlx5e_grp_q_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_q_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_vnic_env_get_num_stats,
 +		.fill_strings = mlx5e_grp_vnic_env_fill_strings,
 +		.fill_stats = mlx5e_grp_vnic_env_fill_stats,
 +		.update_stats = mlx5e_grp_vnic_env_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_vport_get_num_stats,
 +		.fill_strings = mlx5e_grp_vport_fill_strings,
 +		.fill_stats = mlx5e_grp_vport_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_vport_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_802_3_get_num_stats,
 +		.fill_strings = mlx5e_grp_802_3_fill_strings,
 +		.fill_stats = mlx5e_grp_802_3_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_802_3_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_2863_get_num_stats,
 +		.fill_strings = mlx5e_grp_2863_fill_strings,
 +		.fill_stats = mlx5e_grp_2863_fill_stats,
 +		.update_stats = mlx5e_grp_2863_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_2819_get_num_stats,
 +		.fill_strings = mlx5e_grp_2819_fill_strings,
 +		.fill_stats = mlx5e_grp_2819_fill_stats,
 +		.update_stats = mlx5e_grp_2819_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_phy_get_num_stats,
 +		.fill_strings = mlx5e_grp_phy_fill_strings,
 +		.fill_stats = mlx5e_grp_phy_fill_stats,
 +		.update_stats = mlx5e_grp_phy_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_eth_ext_get_num_stats,
 +		.fill_strings = mlx5e_grp_eth_ext_fill_strings,
 +		.fill_stats = mlx5e_grp_eth_ext_fill_stats,
 +		.update_stats = mlx5e_grp_eth_ext_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_pcie_get_num_stats,
 +		.fill_strings = mlx5e_grp_pcie_fill_strings,
 +		.fill_stats = mlx5e_grp_pcie_fill_stats,
 +		.update_stats = mlx5e_grp_pcie_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_per_prio_get_num_stats,
 +		.fill_strings = mlx5e_grp_per_prio_fill_strings,
 +		.fill_stats = mlx5e_grp_per_prio_fill_stats,
 +		.update_stats = mlx5e_grp_per_prio_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_pme_get_num_stats,
 +		.fill_strings = mlx5e_grp_pme_fill_strings,
 +		.fill_stats = mlx5e_grp_pme_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_ipsec_get_num_stats,
 +		.fill_strings = mlx5e_grp_ipsec_fill_strings,
 +		.fill_stats = mlx5e_grp_ipsec_fill_stats,
 +		.update_stats = mlx5e_grp_ipsec_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_tls_get_num_stats,
 +		.fill_strings = mlx5e_grp_tls_fill_strings,
 +		.fill_stats = mlx5e_grp_tls_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_channels_get_num_stats,
 +		.fill_strings = mlx5e_grp_channels_fill_strings,
 +		.fill_stats = mlx5e_grp_channels_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_per_port_buffer_congest_get_num_stats,
 +		.fill_strings = mlx5e_grp_per_port_buffer_congest_fill_strings,
 +		.fill_stats = mlx5e_grp_per_port_buffer_congest_fill_stats,
 +		.update_stats = mlx5e_grp_per_port_buffer_congest_update_stats,
 +	},
++=======
+ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(channels) { return; }
+ 
+ static MLX5E_DEFINE_STATS_GRP(sw, 0);
+ static MLX5E_DEFINE_STATS_GRP(qcnt, MLX5E_NDO_UPDATE_STATS);
+ static MLX5E_DEFINE_STATS_GRP(vnic_env, 0);
+ static MLX5E_DEFINE_STATS_GRP(vport, MLX5E_NDO_UPDATE_STATS);
+ static MLX5E_DEFINE_STATS_GRP(802_3, MLX5E_NDO_UPDATE_STATS);
+ static MLX5E_DEFINE_STATS_GRP(2863, 0);
+ static MLX5E_DEFINE_STATS_GRP(2819, 0);
+ static MLX5E_DEFINE_STATS_GRP(phy, 0);
+ static MLX5E_DEFINE_STATS_GRP(pcie, 0);
+ static MLX5E_DEFINE_STATS_GRP(per_prio, 0);
+ static MLX5E_DEFINE_STATS_GRP(pme, 0);
+ static MLX5E_DEFINE_STATS_GRP(channels, 0);
+ static MLX5E_DEFINE_STATS_GRP(per_port_buff_congest, 0);
+ static MLX5E_DEFINE_STATS_GRP(eth_ext, 0);
+ static MLX5E_DEFINE_STATS_GRP(ipsec, 0);
+ static MLX5E_DEFINE_STATS_GRP(tls, 0);
+ 
+ /* The stats groups order is opposite to the update_stats() order calls */
+ mlx5e_stats_grp_t mlx5e_nic_stats_grps[] = {
+ 	&MLX5E_STATS_GRP(sw),
+ 	&MLX5E_STATS_GRP(qcnt),
+ 	&MLX5E_STATS_GRP(vnic_env),
+ 	&MLX5E_STATS_GRP(vport),
+ 	&MLX5E_STATS_GRP(802_3),
+ 	&MLX5E_STATS_GRP(2863),
+ 	&MLX5E_STATS_GRP(2819),
+ 	&MLX5E_STATS_GRP(phy),
+ 	&MLX5E_STATS_GRP(eth_ext),
+ 	&MLX5E_STATS_GRP(pcie),
+ 	&MLX5E_STATS_GRP(per_prio),
+ 	&MLX5E_STATS_GRP(pme),
+ 	&MLX5E_STATS_GRP(ipsec),
+ 	&MLX5E_STATS_GRP(tls),
+ 	&MLX5E_STATS_GRP(channels),
+ 	&MLX5E_STATS_GRP(per_port_buff_congest),
++>>>>>>> f0ff8e8c7206 (net/mlx5e: Convert stats groups array to array of group pointers)
  };
  
 -unsigned int mlx5e_nic_stats_grps_num(struct mlx5e_priv *priv)
 -{
 -	return ARRAY_SIZE(mlx5e_nic_stats_grps);
 -}
 +const int mlx5e_num_stats_grps = ARRAY_SIZE(mlx5e_stats_grps);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 1e151c97c07b,29ad89f66bf7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -53,6 -56,56 +53,59 @@@ struct counter_desc 
  	size_t		offset; /* Byte offset */
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	MLX5E_NDO_UPDATE_STATS = BIT(0x1),
+ };
+ 
+ struct mlx5e_priv;
+ struct mlx5e_stats_grp {
+ 	u16 update_stats_mask;
+ 	int (*get_num_stats)(struct mlx5e_priv *priv);
+ 	int (*fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx);
+ 	int (*fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx);
+ 	void (*update_stats)(struct mlx5e_priv *priv);
+ };
+ 
+ typedef const struct mlx5e_stats_grp *const mlx5e_stats_grp_t;
+ 
+ #define MLX5E_STATS_GRP_OP(grp, name) mlx5e_stats_grp_ ## grp ## _ ## name
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_NUM_STATS(grp) \
+ 	int MLX5E_STATS_GRP_OP(grp, num_stats)(struct mlx5e_priv *priv)
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(grp) \
+ 	void MLX5E_STATS_GRP_OP(grp, update_stats)(struct mlx5e_priv *priv)
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(grp) \
+ 	int MLX5E_STATS_GRP_OP(grp, fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx)
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(grp) \
+ 	int MLX5E_STATS_GRP_OP(grp, fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx)
+ 
+ #define MLX5E_STATS_GRP(grp) mlx5e_stats_grp_ ## grp
+ 
+ #define MLX5E_DECLARE_STATS_GRP(grp) \
+ 	const struct mlx5e_stats_grp MLX5E_STATS_GRP(grp)
+ 
+ #define MLX5E_DEFINE_STATS_GRP(grp, mask) \
+ MLX5E_DECLARE_STATS_GRP(grp) = { \
+ 	.get_num_stats = MLX5E_STATS_GRP_OP(grp, num_stats), \
+ 	.fill_stats    = MLX5E_STATS_GRP_OP(grp, fill_stats), \
+ 	.fill_strings  = MLX5E_STATS_GRP_OP(grp, fill_strings), \
+ 	.update_stats  = MLX5E_STATS_GRP_OP(grp, update_stats), \
+ 	.update_stats_mask = mask, \
+ }
+ 
+ unsigned int mlx5e_stats_total_num(struct mlx5e_priv *priv);
+ void mlx5e_stats_update(struct mlx5e_priv *priv);
+ void mlx5e_stats_fill(struct mlx5e_priv *priv, u64 *data, int idx);
+ void mlx5e_stats_fill_strings(struct mlx5e_priv *priv, u8 *data);
+ 
+ /* Concrete NIC Stats */
+ 
++>>>>>>> f0ff8e8c7206 (net/mlx5e: Convert stats groups array to array of group pointers)
  struct mlx5e_sw_stats {
  	u64 rx_packets;
  	u64 rx_bytes;
@@@ -271,22 -373,9 +324,27 @@@ struct mlx5e_stats 
  	struct mlx5e_pcie_stats pcie;
  };
  
++<<<<<<< HEAD
 +enum {
 +	MLX5E_NDO_UPDATE_STATS = BIT(0x1),
 +};
++=======
+ extern mlx5e_stats_grp_t mlx5e_nic_stats_grps[];
+ unsigned int mlx5e_nic_stats_grps_num(struct mlx5e_priv *priv);
++>>>>>>> f0ff8e8c7206 (net/mlx5e: Convert stats groups array to array of group pointers)
 +
 +struct mlx5e_priv;
 +struct mlx5e_stats_grp {
 +	u16 update_stats_mask;
 +	int (*get_num_stats)(struct mlx5e_priv *priv);
 +	int (*fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx);
 +	int (*fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx);
 +	void (*update_stats)(struct mlx5e_priv *priv);
 +};
 +
 +extern const struct mlx5e_stats_grp mlx5e_stats_grps[];
 +extern const int mlx5e_num_stats_grps;
  
 -MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(802_3);
 +void mlx5e_grp_802_3_update_stats(struct mlx5e_priv *priv);
  
  #endif /* __MLX5_EN_STATS_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
