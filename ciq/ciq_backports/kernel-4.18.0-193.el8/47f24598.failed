mm/hmm: Hold on to the mmget for the lifetime of the range

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [mm] hmm: Hold on to the mmget for the lifetime of the range (Jerome Glisse) [1498655 1597758]
Rebuild_FUZZ: 97.35%
commit-author Jason Gunthorpe <jgg@ziepe.ca>
commit 47f245985a4f3e270b1e4f28aa49f4c939527981
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/47f24598.failed

Range functions like hmm_range_snapshot() and hmm_range_fault() call
find_vma, which requires hodling the mmget() and the mmap_sem for the mm.

Make this simpler for the callers by holding the mmget() inside the range
for the lifetime of the range. Other functions that accept a range should
only be called if the range is registered.

This has the side effect of directly preventing hmm_release() from
happening while a range is registered. That means range->dead cannot be
false during the lifetime of the range, so remove dead and
hmm_mirror_mm_is_alive() entirely.

	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Reviewed-by: John Hubbard <jhubbard@nvidia.com>
	Reviewed-by: Ralph Campbell <rcampbell@nvidia.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Tested-by: Philip Yang <Philip.Yang@amd.com>
(cherry picked from commit 47f245985a4f3e270b1e4f28aa49f4c939527981)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/hmm.h
#	mm/hmm.c
diff --cc include/linux/hmm.h
index 2f68a486cc0d,bf013e965257..000000000000
--- a/include/linux/hmm.h
+++ b/include/linux/hmm.h
@@@ -76,8 -68,33 +76,36 @@@
  #include <linux/migrate.h>
  #include <linux/memremap.h>
  #include <linux/completion.h>
 -#include <linux/mmu_notifier.h>
  
++<<<<<<< HEAD
 +struct hmm;
++=======
+ 
+ /*
+  * struct hmm - HMM per mm struct
+  *
+  * @mm: mm struct this HMM struct is bound to
+  * @lock: lock protecting ranges list
+  * @ranges: list of range being snapshotted
+  * @mirrors: list of mirrors for this mm
+  * @mmu_notifier: mmu notifier to track updates to CPU page table
+  * @mirrors_sem: read/write semaphore protecting the mirrors list
+  * @wq: wait queue for user waiting on a range invalidation
+  * @notifiers: count of active mmu notifiers
+  */
+ struct hmm {
+ 	struct mm_struct	*mm;
+ 	struct kref		kref;
+ 	struct mutex		lock;
+ 	struct list_head	ranges;
+ 	struct list_head	mirrors;
+ 	struct mmu_notifier	mmu_notifier;
+ 	struct rw_semaphore	mirrors_sem;
+ 	wait_queue_head_t	wq;
+ 	struct rcu_head		rcu;
+ 	long			notifiers;
+ };
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  
  /*
   * hmm_pfn_flag_e - HMM flag enums
@@@ -353,70 -458,90 +381,92 @@@ int hmm_mirror_register(struct hmm_mirr
  void hmm_mirror_unregister(struct hmm_mirror *mirror);
  
  /*
++<<<<<<< HEAD
 + * hmm_mirror_mm_is_alive() - test if mm is still alive
 + * @mirror: the HMM mm mirror for which we want to lock the mmap_sem
 + * Returns: false if the mm is dead, true otherwise
 + *
 + * This is an optimization it will not accurately always return -EINVAL if the
 + * mm is dead ie there can be false negative (process is being kill but HMM is
 + * not yet inform of that). It is only intented to be use to optimize out case
 + * where driver is about to do something time consuming and it would be better
 + * to skip it if the mm is dead.
 + */
 +static inline bool hmm_mirror_mm_is_alive(struct hmm_mirror *mirror)
 +{
 +	struct mm_struct *mm;
 +
 +	if (!mirror || !mirror->hmm)
 +		return false;
 +	mm = READ_ONCE(mirror->hmm->mm);
 +	if (mirror->hmm->dead || !mm)
 +		return false;
 +
 +	return true;
 +}
 +
++=======
+  * Please see Documentation/vm/hmm.rst for how to use the range API.
+  */
+ int hmm_range_register(struct hmm_range *range,
+ 		       struct hmm_mirror *mirror,
+ 		       unsigned long start,
+ 		       unsigned long end,
+ 		       unsigned page_shift);
+ void hmm_range_unregister(struct hmm_range *range);
+ long hmm_range_snapshot(struct hmm_range *range);
+ long hmm_range_fault(struct hmm_range *range, bool block);
+ long hmm_range_dma_map(struct hmm_range *range,
+ 		       struct device *device,
+ 		       dma_addr_t *daddrs,
+ 		       bool block);
+ long hmm_range_dma_unmap(struct hmm_range *range,
+ 			 struct vm_area_struct *vma,
+ 			 struct device *device,
+ 			 dma_addr_t *daddrs,
+ 			 bool dirty);
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  
  /*
 - * HMM_RANGE_DEFAULT_TIMEOUT - default timeout (ms) when waiting for a range
 + * To snapshot the CPU page table, call hmm_vma_get_pfns(), then take a device
 + * driver lock that serializes device page table updates, then call
 + * hmm_vma_range_done(), to check if the snapshot is still valid. The same
 + * device driver page table update lock must also be used in the
 + * hmm_mirror_ops.sync_cpu_device_pagetables() callback, so that CPU page
 + * table invalidation serializes on it.
   *
 - * When waiting for mmu notifiers we need some kind of time out otherwise we
 - * could potentialy wait for ever, 1000ms ie 1s sounds like a long time to
 - * wait already.
 + * YOU MUST CALL hmm_vma_range_done() ONCE AND ONLY ONCE EACH TIME YOU CALL
 + * hmm_vma_get_pfns() WITHOUT ERROR !
 + *
 + * IF YOU DO NOT FOLLOW THE ABOVE RULE THE SNAPSHOT CONTENT MIGHT BE INVALID !
   */
 -#define HMM_RANGE_DEFAULT_TIMEOUT 1000
 -
 -/* This is a temporary helper to avoid merge conflict between trees. */
 -static inline bool hmm_vma_range_done(struct hmm_range *range)
 -{
 -	bool ret = hmm_range_valid(range);
 -
 -	hmm_range_unregister(range);
 -	return ret;
 -}
 +int hmm_vma_get_pfns(struct hmm_range *range);
 +bool hmm_vma_range_done(struct hmm_range *range);
  
 -/* This is a temporary helper to avoid merge conflict between trees. */
 -static inline int hmm_vma_fault(struct hmm_mirror *mirror,
 -				struct hmm_range *range, bool block)
 -{
 -	long ret;
  
 -	/*
 -	 * With the old API the driver must set each individual entries with
 -	 * the requested flags (valid, write, ...). So here we set the mask to
 -	 * keep intact the entries provided by the driver and zero out the
 -	 * default_flags.
 -	 */
 -	range->default_flags = 0;
 -	range->pfn_flags_mask = -1UL;
 -
 -	ret = hmm_range_register(range, mirror,
 -				 range->start, range->end,
 -				 PAGE_SHIFT);
 -	if (ret)
 -		return (int)ret;
 -
 -	if (!hmm_range_wait_until_valid(range, HMM_RANGE_DEFAULT_TIMEOUT)) {
 -		/*
 -		 * The mmap_sem was taken by driver we release it here and
 -		 * returns -EAGAIN which correspond to mmap_sem have been
 -		 * drop in the old API.
 -		 */
 -		up_read(&range->vma->vm_mm->mmap_sem);
 -		return -EAGAIN;
 -	}
 -
 -	ret = hmm_range_fault(range, block);
 -	if (ret <= 0) {
 -		if (ret == -EBUSY || !ret) {
 -			/* Same as above, drop mmap_sem to match old API. */
 -			up_read(&range->vma->vm_mm->mmap_sem);
 -			ret = -EBUSY;
 -		} else if (ret == -EAGAIN)
 -			ret = -EBUSY;
 -		hmm_range_unregister(range);
 -		return ret;
 -	}
 -	return 0;
 -}
 +/*
 + * Fault memory on behalf of device driver. Unlike handle_mm_fault(), this will
 + * not migrate any device memory back to system memory. The HMM pfn array will
 + * be updated with the fault result and current snapshot of the CPU page table
 + * for the range.
 + *
 + * The mmap_sem must be taken in read mode before entering and it might be
 + * dropped by the function if the block argument is false. In that case, the
 + * function returns -EAGAIN.
 + *
 + * Return value does not reflect if the fault was successful for every single
 + * address or not. Therefore, the caller must to inspect the HMM pfn array to
 + * determine fault status for each address.
 + *
 + * Trying to fault inside an invalid vma will result in -EINVAL.
 + *
 + * See the function description in mm/hmm.c for further documentation.
 + */
 +int hmm_vma_fault(struct hmm_range *range, bool block);
  
  /* Below are for HMM internal use only! Not to be used by device driver! */
 +void hmm_mm_destroy(struct mm_struct *mm);
 +
  static inline void hmm_mm_init(struct mm_struct *mm)
  {
  	mm->hmm = NULL;
diff --cc mm/hmm.c
index bc98da945c75,1eddda45cefa..000000000000
--- a/mm/hmm.c
+++ b/mm/hmm.c
@@@ -83,83 -59,76 +83,102 @@@ static struct hmm *hmm_register(struct 
  	hmm = kmalloc(sizeof(*hmm), GFP_KERNEL);
  	if (!hmm)
  		return NULL;
 -	init_waitqueue_head(&hmm->wq);
  	INIT_LIST_HEAD(&hmm->mirrors);
  	init_rwsem(&hmm->mirrors_sem);
 +	atomic_set(&hmm->sequence, 0);
  	hmm->mmu_notifier.ops = NULL;
  	INIT_LIST_HEAD(&hmm->ranges);
++<<<<<<< HEAD
 +	spin_lock_init(&hmm->lock);
++=======
+ 	mutex_init(&hmm->lock);
+ 	kref_init(&hmm->kref);
+ 	hmm->notifiers = 0;
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  	hmm->mm = mm;
  
 -	hmm->mmu_notifier.ops = &hmm_mmu_notifier_ops;
 -	if (__mmu_notifier_register(&hmm->mmu_notifier, mm)) {
 -		kfree(hmm);
 -		return NULL;
 -	}
 +	spin_lock(&mm->page_table_lock);
 +	if (!mm->hmm)
 +		mm->hmm = hmm;
 +	else
 +		cleanup = true;
 +	spin_unlock(&mm->page_table_lock);
  
 -	mmgrab(hmm->mm);
 +	if (cleanup)
 +		goto error;
  
  	/*
 -	 * We hold the exclusive mmap_sem here so we know that mm->hmm is
 -	 * still NULL or 0 kref, and is safe to update.
 +	 * We should only get here if hold the mmap_sem in write mode ie on
 +	 * registration of first mirror through hmm_mirror_register()
  	 */
 -	spin_lock(&mm->page_table_lock);
 -	mm->hmm = hmm;
 +	hmm->mmu_notifier.ops = &hmm_mmu_notifier_ops;
 +	if (__mmu_notifier_register(&hmm->mmu_notifier, mm))
 +		goto error_mm;
  
 -out_unlock:
 +	return mm->hmm;
 +
 +error_mm:
 +	spin_lock(&mm->page_table_lock);
 +	if (mm->hmm == hmm)
 +		mm->hmm = NULL;
  	spin_unlock(&mm->page_table_lock);
 -	return hmm;
 +error:
 +	kfree(hmm);
 +	return NULL;
  }
  
 -static void hmm_free_rcu(struct rcu_head *rcu)
 +void hmm_mm_destroy(struct mm_struct *mm)
  {
 -	struct hmm *hmm = container_of(rcu, struct hmm, rcu);
 -
 -	mmdrop(hmm->mm);
 -	kfree(hmm);
 +	kfree(mm->hmm);
  }
  
 -static void hmm_free(struct kref *kref)
 +static int hmm_invalidate_range(struct hmm *hmm,
 +				const struct hmm_update *update)
  {
 -	struct hmm *hmm = container_of(kref, struct hmm, kref);
 +	struct hmm_mirror *mirror;
 +	struct hmm_range *range;
  
 -	spin_lock(&hmm->mm->page_table_lock);
 -	if (hmm->mm->hmm == hmm)
 -		hmm->mm->hmm = NULL;
 -	spin_unlock(&hmm->mm->page_table_lock);
 +	spin_lock(&hmm->lock);
 +	list_for_each_entry(range, &hmm->ranges, list) {
 +		if (update->end < range->start || update->start >= range->end)
 +			continue;
  
 -	mmu_notifier_unregister_no_release(&hmm->mmu_notifier, hmm->mm);
 -	mmu_notifier_call_srcu(&hmm->rcu, hmm_free_rcu);
 -}
 +		range->valid = false;
 +	}
 +	spin_unlock(&hmm->lock);
  
 -static inline void hmm_put(struct hmm *hmm)
 -{
 -	kref_put(&hmm->kref, hmm_free);
 +	down_read(&hmm->mirrors_sem);
 +	list_for_each_entry(mirror, &hmm->mirrors, list) {
 +		int ret;
 +
 +		ret = mirror->ops->sync_cpu_device_pagetables(mirror, update);
 +		if (!update->blockable && ret == -EAGAIN) {
 +			up_read(&hmm->mirrors_sem);
 +			return -EAGAIN;
 +		}
 +	}
 +	up_read(&hmm->mirrors_sem);
 +
 +	return 0;
  }
  
  static void hmm_release(struct mmu_notifier *mn, struct mm_struct *mm)
  {
 -	struct hmm *hmm = container_of(mn, struct hmm, mmu_notifier);
  	struct hmm_mirror *mirror;
++<<<<<<< HEAD
 +	struct hmm *hmm = mm->hmm;
++=======
+ 
+ 	/* Bail out if hmm is in the process of being freed */
+ 	if (!kref_get_unless_zero(&hmm->kref))
+ 		return;
+ 
+ 	/*
+ 	 * Since hmm_range_register() holds the mmget() lock hmm_release() is
+ 	 * prevented as long as a range exists.
+ 	 */
+ 	WARN_ON(!list_empty_careful(&hmm->ranges));
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  
  	down_write(&hmm->mirrors_sem);
  	mirror = list_first_entry_or_null(&hmm->mirrors, struct hmm_mirror,
@@@ -669,279 -865,431 +688,363 @@@ static void hmm_pfns_clear(struct hmm_r
  		*pfns = range->values[HMM_PFN_NONE];
  }
  
 -/*
 - * hmm_range_register() - start tracking change to CPU page table over a range
 - * @range: range
 - * @mm: the mm struct for the range of virtual address
 - * @start: start virtual address (inclusive)
 - * @end: end virtual address (exclusive)
 - * @page_shift: expect page shift for the range
 - * Returns 0 on success, -EFAULT if the address space is no longer valid
 - *
 - * Track updates to the CPU page table see include/linux/hmm.h
 - */
 -int hmm_range_register(struct hmm_range *range,
 -		       struct hmm_mirror *mirror,
 -		       unsigned long start,
 -		       unsigned long end,
 -		       unsigned page_shift)
 +static void hmm_pfns_special(struct hmm_range *range)
  {
 -	unsigned long mask = ((1UL << page_shift) - 1UL);
 -	struct hmm *hmm = mirror->hmm;
 +	unsigned long addr = range->start, i = 0;
  
++<<<<<<< HEAD
 +	for (; addr < range->end; addr += PAGE_SIZE, i++)
 +		range->pfns[i] = range->values[HMM_PFN_SPECIAL];
++=======
+ 	range->valid = false;
+ 	range->hmm = NULL;
+ 
+ 	if ((start & mask) || (end & mask))
+ 		return -EINVAL;
+ 	if (start >= end)
+ 		return -EINVAL;
+ 
+ 	range->page_shift = page_shift;
+ 	range->start = start;
+ 	range->end = end;
+ 
+ 	/* Prevent hmm_release() from running while the range is valid */
+ 	if (!mmget_not_zero(hmm->mm))
+ 		return -EFAULT;
+ 
+ 	/* Initialize range to track CPU page table updates. */
+ 	mutex_lock(&hmm->lock);
+ 
+ 	range->hmm = hmm;
+ 	kref_get(&hmm->kref);
+ 	list_add(&range->list, &hmm->ranges);
+ 
+ 	/*
+ 	 * If there are any concurrent notifiers we have to wait for them for
+ 	 * the range to be valid (see hmm_range_wait_until_valid()).
+ 	 */
+ 	if (!hmm->notifiers)
+ 		range->valid = true;
+ 	mutex_unlock(&hmm->lock);
+ 
+ 	return 0;
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  }
 -EXPORT_SYMBOL(hmm_range_register);
  
  /*
++<<<<<<< HEAD
 + * hmm_vma_get_pfns() - snapshot CPU page table for a range of virtual addresses
 + * @range: range being snapshotted
 + * Returns: -EINVAL if invalid argument, -ENOMEM out of memory, -EPERM invalid
 + *          vma permission, 0 success
++=======
+  * hmm_range_unregister() - stop tracking change to CPU page table over a range
+  * @range: range
+  *
+  * Range struct is used to track updates to the CPU page table after a call to
+  * hmm_range_register(). See include/linux/hmm.h for how to use it.
+  */
+ void hmm_range_unregister(struct hmm_range *range)
+ {
+ 	struct hmm *hmm = range->hmm;
+ 
+ 	/* Sanity check this really should not happen. */
+ 	if (hmm == NULL || range->end <= range->start)
+ 		return;
+ 
+ 	mutex_lock(&hmm->lock);
+ 	list_del_init(&range->list);
+ 	mutex_unlock(&hmm->lock);
+ 
+ 	/* Drop reference taken by hmm_range_register() */
+ 	range->valid = false;
+ 	mmput(hmm->mm);
+ 	hmm_put(hmm);
+ 	range->hmm = NULL;
+ }
+ EXPORT_SYMBOL(hmm_range_unregister);
+ 
+ /*
+  * hmm_range_snapshot() - snapshot CPU page table for a range
+  * @range: range
+  * Return: -EINVAL if invalid argument, -ENOMEM out of memory, -EPERM invalid
+  *          permission (for instance asking for write and range is read only),
+  *          -EAGAIN if you need to retry, -EFAULT invalid (ie either no valid
+  *          vma or it is illegal to access that range), number of valid pages
+  *          in range->pfns[] (from range start address).
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
   *
   * This snapshots the CPU page table for a range of virtual addresses. Snapshot
 - * validity is tracked by range struct. See in include/linux/hmm.h for example
 - * on how to use.
 + * validity is tracked by range struct. See hmm_vma_range_done() for further
 + * information.
 + *
 + * The range struct is initialized here. It tracks the CPU page table, but only
 + * if the function returns success (0), in which case the caller must then call
 + * hmm_vma_range_done() to stop CPU page table update tracking on this range.
 + *
 + * NOT CALLING hmm_vma_range_done() IF FUNCTION RETURNS 0 WILL LEAD TO SERIOUS
 + * MEMORY CORRUPTION ! YOU HAVE BEEN WARNED !
   */
 -long hmm_range_snapshot(struct hmm_range *range)
 +int hmm_vma_get_pfns(struct hmm_range *range)
  {
 -	const unsigned long device_vma = VM_IO | VM_PFNMAP | VM_MIXEDMAP;
 -	unsigned long start = range->start, end;
 +	struct vm_area_struct *vma = range->vma;
  	struct hmm_vma_walk hmm_vma_walk;
 -	struct hmm *hmm = range->hmm;
 -	struct vm_area_struct *vma;
  	struct mm_walk mm_walk;
 +	struct hmm *hmm;
 +
++<<<<<<< HEAD
 +	/* Sanity check, this really should not happen ! */
 +	if (range->start < vma->vm_start || range->start >= vma->vm_end)
 +		return -EINVAL;
 +	if (range->end < vma->vm_start || range->end > vma->vm_end)
 +		return -EINVAL;
  
 +	hmm = hmm_register(vma->vm_mm);
 +	if (!hmm)
 +		return -ENOMEM;
 +	/* Caller must have registered a mirror, via hmm_mirror_register() ! */
 +	if (!hmm->mmu_notifier.ops)
 +		return -EINVAL;
++=======
+ 	lockdep_assert_held(&hmm->mm->mmap_sem);
+ 	do {
+ 		/* If range is no longer valid force retry. */
+ 		if (!range->valid)
+ 			return -EAGAIN;
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  
 -		vma = find_vma(hmm->mm, start);
 -		if (vma == NULL || (vma->vm_flags & device_vma))
 -			return -EFAULT;
 -
 -		if (is_vm_hugetlb_page(vma)) {
 -			if (huge_page_shift(hstate_vma(vma)) !=
 -				    range->page_shift &&
 -			    range->page_shift != PAGE_SHIFT)
 -				return -EINVAL;
 -		} else {
 -			if (range->page_shift != PAGE_SHIFT)
 -				return -EINVAL;
 -		}
 +	/* FIXME support hugetlb fs */
 +	if (is_vm_hugetlb_page(vma) || (vma->vm_flags & VM_SPECIAL) ||
 +			vma_is_dax(vma)) {
 +		hmm_pfns_special(range);
 +		return -EINVAL;
 +	}
  
 -		if (!(vma->vm_flags & VM_READ)) {
 -			/*
 -			 * If vma do not allow read access, then assume that it
 -			 * does not allow write access, either. HMM does not
 -			 * support architecture that allow write without read.
 -			 */
 -			hmm_pfns_clear(range, range->pfns,
 -				range->start, range->end);
 -			return -EPERM;
 -		}
 +	if (!(vma->vm_flags & VM_READ)) {
 +		/*
 +		 * If vma do not allow read access, then assume that it does
 +		 * not allow write access, either. Architecture that allow
 +		 * write without read access are not supported by HMM, because
 +		 * operations such has atomic access would not work.
 +		 */
 +		hmm_pfns_clear(range, range->pfns, range->start, range->end);
 +		return -EPERM;
 +	}
  
 -		range->vma = vma;
 -		hmm_vma_walk.pgmap = NULL;
 -		hmm_vma_walk.last = start;
 -		hmm_vma_walk.fault = false;
 -		hmm_vma_walk.range = range;
 -		mm_walk.private = &hmm_vma_walk;
 -		end = min(range->end, vma->vm_end);
 -
 -		mm_walk.vma = vma;
 -		mm_walk.mm = vma->vm_mm;
 -		mm_walk.pte_entry = NULL;
 -		mm_walk.test_walk = NULL;
 -		mm_walk.hugetlb_entry = NULL;
 -		mm_walk.pud_entry = hmm_vma_walk_pud;
 -		mm_walk.pmd_entry = hmm_vma_walk_pmd;
 -		mm_walk.pte_hole = hmm_vma_walk_hole;
 -		mm_walk.hugetlb_entry = hmm_vma_walk_hugetlb_entry;
 -
 -		walk_page_range(start, end, &mm_walk);
 -		start = end;
 -	} while (start < range->end);
 -
 -	return (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
 +	/* Initialize range to track CPU page table update */
 +	spin_lock(&hmm->lock);
 +	range->valid = true;
 +	list_add_rcu(&range->list, &hmm->ranges);
 +	spin_unlock(&hmm->lock);
 +
 +	hmm_vma_walk.fault = false;
 +	hmm_vma_walk.range = range;
 +	mm_walk.private = &hmm_vma_walk;
 +
 +	mm_walk.vma = vma;
 +	mm_walk.mm = vma->vm_mm;
 +	mm_walk.pte_entry = NULL;
 +	mm_walk.test_walk = NULL;
 +	mm_walk.hugetlb_entry = NULL;
 +	mm_walk.pmd_entry = hmm_vma_walk_pmd;
 +	mm_walk.pte_hole = hmm_vma_walk_hole;
 +
 +	walk_page_range(range->start, range->end, &mm_walk);
 +	return 0;
  }
 -EXPORT_SYMBOL(hmm_range_snapshot);
 +EXPORT_SYMBOL(hmm_vma_get_pfns);
  
  /*
 - * hmm_range_fault() - try to fault some address in a virtual address range
 - * @range: range being faulted
 - * @block: allow blocking on fault (if true it sleeps and do not drop mmap_sem)
 - * Return: number of valid pages in range->pfns[] (from range start
 - *          address). This may be zero. If the return value is negative,
 - *          then one of the following values may be returned:
 + * hmm_vma_range_done() - stop tracking change to CPU page table over a range
 + * @range: range being tracked
 + * Returns: false if range data has been invalidated, true otherwise
   *
 - *           -EINVAL  invalid arguments or mm or virtual address are in an
 - *                    invalid vma (for instance device file vma).
 - *           -ENOMEM: Out of memory.
 - *           -EPERM:  Invalid permission (for instance asking for write and
 - *                    range is read only).
 - *           -EAGAIN: If you need to retry and mmap_sem was drop. This can only
 - *                    happens if block argument is false.
 - *           -EBUSY:  If the the range is being invalidated and you should wait
 - *                    for invalidation to finish.
 - *           -EFAULT: Invalid (ie either no valid vma or it is illegal to access
 - *                    that range), number of valid pages in range->pfns[] (from
 - *                    range start address).
 + * Range struct is used to track updates to the CPU page table after a call to
 + * either hmm_vma_get_pfns() or hmm_vma_fault(). Once the device driver is done
 + * using the data,  or wants to lock updates to the data it got from those
 + * functions, it must call the hmm_vma_range_done() function, which will then
 + * stop tracking CPU page table updates.
   *
 - * This is similar to a regular CPU page fault except that it will not trigger
 - * any memory migration if the memory being faulted is not accessible by CPUs
 - * and caller does not ask for migration.
 + * Note that device driver must still implement general CPU page table update
 + * tracking either by using hmm_mirror (see hmm_mirror_register()) or by using
 + * the mmu_notifier API directly.
   *
 - * On error, for one virtual address in the range, the function will mark the
 - * corresponding HMM pfn entry with an error flag.
 + * CPU page table update tracking done through hmm_range is only temporary and
 + * to be used while trying to duplicate CPU page table contents for a range of
 + * virtual addresses.
 + *
 + * There are two ways to use this :
 + * again:
 + *   hmm_vma_get_pfns(range); or hmm_vma_fault(...);
 + *   trans = device_build_page_table_update_transaction(pfns);
 + *   device_page_table_lock();
 + *   if (!hmm_vma_range_done(range)) {
 + *     device_page_table_unlock();
 + *     goto again;
 + *   }
 + *   device_commit_transaction(trans);
 + *   device_page_table_unlock();
 + *
 + * Or:
 + *   hmm_vma_get_pfns(range); or hmm_vma_fault(...);
 + *   device_page_table_lock();
 + *   hmm_vma_range_done(range);
 + *   device_update_page_table(range->pfns);
 + *   device_page_table_unlock();
   */
 -long hmm_range_fault(struct hmm_range *range, bool block)
 +bool hmm_vma_range_done(struct hmm_range *range)
  {
 -	const unsigned long device_vma = VM_IO | VM_PFNMAP | VM_MIXEDMAP;
 -	unsigned long start = range->start, end;
 -	struct hmm_vma_walk hmm_vma_walk;
 -	struct hmm *hmm = range->hmm;
 -	struct vm_area_struct *vma;
 -	struct mm_walk mm_walk;
 -	int ret;
 -
 -	lockdep_assert_held(&hmm->mm->mmap_sem);
 -
 -	do {
 -		/* If range is no longer valid force retry. */
 -		if (!range->valid) {
 -			up_read(&hmm->mm->mmap_sem);
 -			return -EAGAIN;
 -		}
 -
 -		vma = find_vma(hmm->mm, start);
 -		if (vma == NULL || (vma->vm_flags & device_vma))
 -			return -EFAULT;
 -
 -		if (is_vm_hugetlb_page(vma)) {
 -			if (huge_page_shift(hstate_vma(vma)) !=
 -			    range->page_shift &&
 -			    range->page_shift != PAGE_SHIFT)
 -				return -EINVAL;
 -		} else {
 -			if (range->page_shift != PAGE_SHIFT)
 -				return -EINVAL;
 -		}
 +	unsigned long npages = (range->end - range->start) >> PAGE_SHIFT;
 +	struct hmm *hmm;
  
 -		if (!(vma->vm_flags & VM_READ)) {
 -			/*
 -			 * If vma do not allow read access, then assume that it
 -			 * does not allow write access, either. HMM does not
 -			 * support architecture that allow write without read.
 -			 */
 -			hmm_pfns_clear(range, range->pfns,
 -				range->start, range->end);
 -			return -EPERM;
 -		}
 +	if (range->end <= range->start) {
 +		BUG();
 +		return false;
 +	}
  
 -		range->vma = vma;
 -		hmm_vma_walk.pgmap = NULL;
 -		hmm_vma_walk.last = start;
 -		hmm_vma_walk.fault = true;
 -		hmm_vma_walk.block = block;
 -		hmm_vma_walk.range = range;
 -		mm_walk.private = &hmm_vma_walk;
 -		end = min(range->end, vma->vm_end);
 -
 -		mm_walk.vma = vma;
 -		mm_walk.mm = vma->vm_mm;
 -		mm_walk.pte_entry = NULL;
 -		mm_walk.test_walk = NULL;
 -		mm_walk.hugetlb_entry = NULL;
 -		mm_walk.pud_entry = hmm_vma_walk_pud;
 -		mm_walk.pmd_entry = hmm_vma_walk_pmd;
 -		mm_walk.pte_hole = hmm_vma_walk_hole;
 -		mm_walk.hugetlb_entry = hmm_vma_walk_hugetlb_entry;
 -
 -		do {
 -			ret = walk_page_range(start, end, &mm_walk);
 -			start = hmm_vma_walk.last;
 -
 -			/* Keep trying while the range is valid. */
 -		} while (ret == -EBUSY && range->valid);
 -
 -		if (ret) {
 -			unsigned long i;
 -
 -			i = (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
 -			hmm_pfns_clear(range, &range->pfns[i],
 -				hmm_vma_walk.last, range->end);
 -			return ret;
 -		}
 -		start = end;
 +	hmm = hmm_register(range->vma->vm_mm);
 +	if (!hmm) {
 +		memset(range->pfns, 0, sizeof(*range->pfns) * npages);
 +		return false;
 +	}
  
 -	} while (start < range->end);
 +	spin_lock(&hmm->lock);
 +	list_del_rcu(&range->list);
 +	spin_unlock(&hmm->lock);
  
 -	return (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
 +	return range->valid;
  }
 -EXPORT_SYMBOL(hmm_range_fault);
 +EXPORT_SYMBOL(hmm_vma_range_done);
  
 -/**
 - * hmm_range_dma_map() - hmm_range_fault() and dma map page all in one.
 +/*
 + * hmm_vma_fault() - try to fault some address in a virtual address range
   * @range: range being faulted
 - * @device: device against to dma map page to
 - * @daddrs: dma address of mapped pages
   * @block: allow blocking on fault (if true it sleeps and do not drop mmap_sem)
 - * Return: number of pages mapped on success, -EAGAIN if mmap_sem have been
 - *          drop and you need to try again, some other error value otherwise
 + * Returns: 0 success, error otherwise (-EAGAIN means mmap_sem have been drop)
 + *
 + * This is similar to a regular CPU page fault except that it will not trigger
 + * any memory migration if the memory being faulted is not accessible by CPUs.
 + *
 + * On error, for one virtual address in the range, the function will mark the
 + * corresponding HMM pfn entry with an error flag.
 + *
 + * Expected use pattern:
 + * retry:
 + *   down_read(&mm->mmap_sem);
 + *   // Find vma and address device wants to fault, initialize hmm_pfn_t
 + *   // array accordingly
 + *   ret = hmm_vma_fault(range, write, block);
 + *   switch (ret) {
 + *   case -EAGAIN:
 + *     hmm_vma_range_done(range);
 + *     // You might want to rate limit or yield to play nicely, you may
 + *     // also commit any valid pfn in the array assuming that you are
 + *     // getting true from hmm_vma_range_monitor_end()
 + *     goto retry;
 + *   case 0:
 + *     break;
 + *   case -ENOMEM:
 + *   case -EINVAL:
 + *   case -EPERM:
 + *   default:
 + *     // Handle error !
 + *     up_read(&mm->mmap_sem)
 + *     return;
 + *   }
 + *   // Take device driver lock that serialize device page table update
 + *   driver_lock_device_page_table_update();
 + *   hmm_vma_range_done(range);
 + *   // Commit pfns we got from hmm_vma_fault()
 + *   driver_unlock_device_page_table_update();
 + *   up_read(&mm->mmap_sem)
   *
 - * Note same usage pattern as hmm_range_fault().
 + * YOU MUST CALL hmm_vma_range_done() AFTER THIS FUNCTION RETURN SUCCESS (0)
 + * BEFORE FREEING THE range struct OR YOU WILL HAVE SERIOUS MEMORY CORRUPTION !
 + *
 + * YOU HAVE BEEN WARNED !
   */
 -long hmm_range_dma_map(struct hmm_range *range,
 -		       struct device *device,
 -		       dma_addr_t *daddrs,
 -		       bool block)
 +int hmm_vma_fault(struct hmm_range *range, bool block)
  {
 -	unsigned long i, npages, mapped;
 -	long ret;
 +	struct vm_area_struct *vma = range->vma;
 +	unsigned long start = range->start;
 +	struct hmm_vma_walk hmm_vma_walk;
 +	struct mm_walk mm_walk;
 +	struct hmm *hmm;
 +	int ret;
 +
++<<<<<<< HEAD
 +	/* Sanity check, this really should not happen ! */
 +	if (range->start < vma->vm_start || range->start >= vma->vm_end)
 +		return -EINVAL;
 +	if (range->end < vma->vm_start || range->end > vma->vm_end)
 +		return -EINVAL;
  
 -	ret = hmm_range_fault(range, block);
 -	if (ret <= 0)
 -		return ret ? ret : -EBUSY;
 +	hmm = hmm_register(vma->vm_mm);
 +	if (!hmm) {
 +		hmm_pfns_clear(range, range->pfns, range->start, range->end);
 +		return -ENOMEM;
 +	}
 +	/* Caller must have registered a mirror using hmm_mirror_register() */
 +	if (!hmm->mmu_notifier.ops)
 +		return -EINVAL;
  
 -	npages = (range->end - range->start) >> PAGE_SHIFT;
 -	for (i = 0, mapped = 0; i < npages; ++i) {
 -		enum dma_data_direction dir = DMA_TO_DEVICE;
 -		struct page *page;
 +	/* FIXME support hugetlb fs */
 +	if (is_vm_hugetlb_page(vma) || (vma->vm_flags & VM_SPECIAL) ||
 +			vma_is_dax(vma)) {
 +		hmm_pfns_special(range);
 +		return -EINVAL;
 +	}
  
 +	if (!(vma->vm_flags & VM_READ)) {
  		/*
 -		 * FIXME need to update DMA API to provide invalid DMA address
 -		 * value instead of a function to test dma address value. This
 -		 * would remove lot of dumb code duplicated accross many arch.
 -		 *
 -		 * For now setting it to 0 here is good enough as the pfns[]
 -		 * value is what is use to check what is valid and what isn't.
 +		 * If vma do not allow read access, then assume that it does
 +		 * not allow write access, either. Architecture that allow
 +		 * write without read access are not supported by HMM, because
 +		 * operations such has atomic access would not work.
  		 */
 -		daddrs[i] = 0;
 -
 -		page = hmm_device_entry_to_page(range, range->pfns[i]);
 -		if (page == NULL)
 -			continue;
 -
 -		/* Check if range is being invalidated */
 -		if (!range->valid) {
 -			ret = -EBUSY;
 -			goto unmap;
 -		}
 -
 -		/* If it is read and write than map bi-directional. */
 -		if (range->pfns[i] & range->flags[HMM_PFN_WRITE])
 -			dir = DMA_BIDIRECTIONAL;
 -
 -		daddrs[i] = dma_map_page(device, page, 0, PAGE_SIZE, dir);
 -		if (dma_mapping_error(device, daddrs[i])) {
 -			ret = -EFAULT;
 -			goto unmap;
 -		}
 -
 -		mapped++;
 +		hmm_pfns_clear(range, range->pfns, range->start, range->end);
 +		return -EPERM;
  	}
  
 -	return mapped;
 -
 -unmap:
 -	for (npages = i, i = 0; (i < npages) && mapped; ++i) {
 -		enum dma_data_direction dir = DMA_TO_DEVICE;
 -		struct page *page;
 -
 -		page = hmm_device_entry_to_page(range, range->pfns[i]);
 -		if (page == NULL)
 -			continue;
 +	/* Initialize range to track CPU page table update */
 +	spin_lock(&hmm->lock);
 +	range->valid = true;
 +	list_add_rcu(&range->list, &hmm->ranges);
 +	spin_unlock(&hmm->lock);
 +
 +	hmm_vma_walk.fault = true;
 +	hmm_vma_walk.block = block;
 +	hmm_vma_walk.range = range;
 +	mm_walk.private = &hmm_vma_walk;
 +	hmm_vma_walk.last = range->start;
 +
 +	mm_walk.vma = vma;
 +	mm_walk.mm = vma->vm_mm;
 +	mm_walk.pte_entry = NULL;
 +	mm_walk.test_walk = NULL;
 +	mm_walk.hugetlb_entry = NULL;
 +	mm_walk.pmd_entry = hmm_vma_walk_pmd;
 +	mm_walk.pte_hole = hmm_vma_walk_hole;
++=======
++	lockdep_assert_held(&hmm->mm->mmap_sem);
++>>>>>>> 47f245985a4f (mm/hmm: Hold on to the mmget for the lifetime of the range)
  
 -		if (dma_mapping_error(device, daddrs[i]))
 -			continue;
 +	do {
 +		ret = walk_page_range(start, range->end, &mm_walk);
 +		start = hmm_vma_walk.last;
 +	} while (ret == -EAGAIN);
  
 -		/* If it is read and write than map bi-directional. */
 -		if (range->pfns[i] & range->flags[HMM_PFN_WRITE])
 -			dir = DMA_BIDIRECTIONAL;
 +	if (ret) {
 +		unsigned long i;
  
 -		dma_unmap_page(device, daddrs[i], PAGE_SIZE, dir);
 -		mapped--;
 +		i = (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
 +		hmm_pfns_clear(range, &range->pfns[i], hmm_vma_walk.last,
 +			       range->end);
 +		hmm_vma_range_done(range);
  	}
 -
  	return ret;
  }
 -EXPORT_SYMBOL(hmm_range_dma_map);
 -
 -/**
 - * hmm_range_dma_unmap() - unmap range of that was map with hmm_range_dma_map()
 - * @range: range being unmapped
 - * @vma: the vma against which the range (optional)
 - * @device: device against which dma map was done
 - * @daddrs: dma address of mapped pages
 - * @dirty: dirty page if it had the write flag set
 - * Return: number of page unmapped on success, -EINVAL otherwise
 - *
 - * Note that caller MUST abide by mmu notifier or use HMM mirror and abide
 - * to the sync_cpu_device_pagetables() callback so that it is safe here to
 - * call set_page_dirty(). Caller must also take appropriate locks to avoid
 - * concurrent mmu notifier or sync_cpu_device_pagetables() to make progress.
 - */
 -long hmm_range_dma_unmap(struct hmm_range *range,
 -			 struct vm_area_struct *vma,
 -			 struct device *device,
 -			 dma_addr_t *daddrs,
 -			 bool dirty)
 -{
 -	unsigned long i, npages;
 -	long cpages = 0;
 -
 -	/* Sanity check. */
 -	if (range->end <= range->start)
 -		return -EINVAL;
 -	if (!daddrs)
 -		return -EINVAL;
 -	if (!range->pfns)
 -		return -EINVAL;
 -
 -	npages = (range->end - range->start) >> PAGE_SHIFT;
 -	for (i = 0; i < npages; ++i) {
 -		enum dma_data_direction dir = DMA_TO_DEVICE;
 -		struct page *page;
 -
 -		page = hmm_device_entry_to_page(range, range->pfns[i]);
 -		if (page == NULL)
 -			continue;
 -
 -		/* If it is read and write than map bi-directional. */
 -		if (range->pfns[i] & range->flags[HMM_PFN_WRITE]) {
 -			dir = DMA_BIDIRECTIONAL;
 -
 -			/*
 -			 * See comments in function description on why it is
 -			 * safe here to call set_page_dirty()
 -			 */
 -			if (dirty)
 -				set_page_dirty(page);
 -		}
 -
 -		/* Unmap and clear pfns/dma address */
 -		dma_unmap_page(device, daddrs[i], PAGE_SIZE, dir);
 -		range->pfns[i] = range->values[HMM_PFN_NONE];
 -		/* FIXME see comments in hmm_vma_dma_map() */
 -		daddrs[i] = 0;
 -		cpages++;
 -	}
 -
 -	return cpages;
 -}
 -EXPORT_SYMBOL(hmm_range_dma_unmap);
 +EXPORT_SYMBOL(hmm_vma_fault);
  #endif /* IS_ENABLED(CONFIG_HMM_MIRROR) */
  
  
* Unmerged path include/linux/hmm.h
* Unmerged path mm/hmm.c
