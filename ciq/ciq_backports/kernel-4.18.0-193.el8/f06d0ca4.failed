linux/dim: Fix overflow in dim calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Yamin Friedman <yaminf@mellanox.com>
commit f06d0ca45827a5790d7508de4759aed976933d4d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f06d0ca4.failed

While using net_dim, a dim_sample was used without ever initializing the
comps value. Added use of DIV_ROUND_DOWN_ULL() to prevent potential
overflow, it should not be a problem to save the final result in an int
because after the division by epms the value should not be larger than a
few thousand.

[ 1040.127124] UBSAN: Undefined behaviour in lib/dim/dim.c:78:23
[ 1040.130118] signed integer overflow:
[ 1040.131643] 134718714 * 100 cannot be represented in type 'int'

Fixes: 398c2b05bbee ("linux/dim: Add completions count to dim_sample")
	Signed-off-by: Yamin Friedman <yaminf@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Acked-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f06d0ca45827a5790d7508de4759aed976933d4d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bcmsysport.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/genet/bcmgenet.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
#	lib/dim/dim.c
diff --cc drivers/net/ethernet/broadcom/bcmsysport.c
index 8fbc97d16fcb,9483553ce444..000000000000
--- a/drivers/net/ethernet/broadcom/bcmsysport.c
+++ b/drivers/net/ethernet/broadcom/bcmsysport.c
@@@ -1009,7 -992,7 +1009,11 @@@ static int bcm_sysport_poll(struct napi
  {
  	struct bcm_sysport_priv *priv =
  		container_of(napi, struct bcm_sysport_priv, napi);
++<<<<<<< HEAD
 +	struct net_dim_sample dim_sample;
++=======
+ 	struct dim_sample dim_sample = {};
++>>>>>>> f06d0ca45827 (linux/dim: Fix overflow in dim calculation)
  	unsigned int work_done = 0;
  
  	work_done = bcm_sysport_desc_rx(priv, budget);
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 3c1f5296f02c,7070349915bc..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -2132,15 -2136,14 +2132,19 @@@ static int bnxt_poll(struct napi_struc
  		}
  	}
  	if (bp->flags & BNXT_FLAG_DIM) {
++<<<<<<< HEAD
 +		struct net_dim_sample dim_sample;
++=======
+ 		struct dim_sample dim_sample = {};
++>>>>>>> f06d0ca45827 (linux/dim: Fix overflow in dim calculation)
  
 -		dim_update_sample(cpr->event_ctr,
 -				  cpr->rx_packets,
 -				  cpr->rx_bytes,
 -				  &dim_sample);
 +		net_dim_update_sample(cpr->event_ctr,
 +				      cpr->rx_packets,
 +				      cpr->rx_bytes,
 +				      &dim_sample);
  		net_dim(&cpr->dim, dim_sample);
  	}
 +	mmiowb();
  	return work_done;
  }
  
diff --cc drivers/net/ethernet/broadcom/genet/bcmgenet.c
index 2ce3ebc65893,d3a0b614dbfa..000000000000
--- a/drivers/net/ethernet/broadcom/genet/bcmgenet.c
+++ b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
@@@ -1898,7 -1895,7 +1898,11 @@@ static int bcmgenet_rx_poll(struct napi
  {
  	struct bcmgenet_rx_ring *ring = container_of(napi,
  			struct bcmgenet_rx_ring, napi);
++<<<<<<< HEAD
 +	struct net_dim_sample dim_sample;
++=======
+ 	struct dim_sample dim_sample = {};
++>>>>>>> f06d0ca45827 (linux/dim: Fix overflow in dim calculation)
  	unsigned int work_done;
  
  	work_done = bcmgenet_desc_rx(ring, budget);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
index 0441b930196c,49b06b256c92..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
@@@ -48,7 -49,7 +48,11 @@@ static inline bool mlx5e_channel_no_aff
  static void mlx5e_handle_tx_dim(struct mlx5e_txqsq *sq)
  {
  	struct mlx5e_sq_stats *stats = sq->stats;
++<<<<<<< HEAD
 +	struct net_dim_sample dim_sample;
++=======
+ 	struct dim_sample dim_sample = {};
++>>>>>>> f06d0ca45827 (linux/dim: Fix overflow in dim calculation)
  
  	if (unlikely(!test_bit(MLX5E_SQ_STATE_AM, &sq->state)))
  		return;
@@@ -60,7 -61,7 +64,11 @@@
  static void mlx5e_handle_rx_dim(struct mlx5e_rq *rq)
  {
  	struct mlx5e_rq_stats *stats = rq->stats;
++<<<<<<< HEAD
 +	struct net_dim_sample dim_sample;
++=======
+ 	struct dim_sample dim_sample = {};
++>>>>>>> f06d0ca45827 (linux/dim: Fix overflow in dim calculation)
  
  	if (unlikely(!test_bit(MLX5E_RQ_STATE_AM, &rq->state)))
  		return;
* Unmerged path lib/dim/dim.c
* Unmerged path drivers/net/ethernet/broadcom/bcmsysport.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/genet/bcmgenet.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
* Unmerged path lib/dim/dim.c
