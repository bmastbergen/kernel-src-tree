ASoC: soc-core: add soc_unbind_aux_dev()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-core: add soc_unbind_aux_dev() (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 93.02%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 4893a2eb34a9722501915a0b75844aa11956c10d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4893a2eb.failed

It is easy to read code if it is cleanly using paired function/naming,
like start <-> stop, register <-> unregister, etc, etc.
But, current ALSA SoC code is very random, unbalance, not paired, etc.
It is easy to create bug at the such code, and it will be difficult to
debug.

soc-core.c has soc_bind_aux_dev(), but, there is no its paired
soc_unbind_aux_dev().
This patch adds soc_unbind_aux_dev().

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87sgpcor14.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 4893a2eb34a9722501915a0b75844aa11956c10d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-core.c
diff --cc sound/soc/soc-core.c
index 3dc6cd6fb4b0,2960070e68bc..000000000000
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@@ -1673,74 -1535,53 +1673,84 @@@ static int soc_link_init(struct snd_soc
  			num = rtd->dai_link->id;
  	}
  
 -	/* create compress_device if possible */
 -	ret = snd_soc_dai_compress_new(cpu_dai, rtd, num);
 -	if (ret != -ENOTSUPP) {
 -		if (ret < 0)
 +	if (cpu_dai->driver->compress_new) {
 +		/* create compress_device" */
 +		ret = cpu_dai->driver->compress_new(rtd, num);
 +		if (ret < 0) {
  			dev_err(card->dev, "ASoC: can't create compress %s\n",
  					 dai_link->stream_name);
 -		return ret;
 +			return ret;
 +		}
 +	} else if (!dai_link->params) {
 +		/* create the pcm */
 +		ret = soc_new_pcm(rtd, num);
 +		if (ret < 0) {
 +			dev_err(card->dev, "ASoC: can't create pcm %s :%d\n",
 +				dai_link->stream_name, ret);
 +			return ret;
 +		}
 +		ret = soc_link_dai_pcm_new(&cpu_dai, 1, rtd);
 +		if (ret < 0)
 +			return ret;
 +		ret = soc_link_dai_pcm_new(rtd->codec_dais,
 +					   rtd->num_codecs, rtd);
 +		if (ret < 0)
 +			return ret;
 +	} else {
 +		INIT_DELAYED_WORK(&rtd->delayed_work,
 +				  codec2codec_close_delayed_work);
  	}
  
 -	/* create the pcm */
 -	ret = soc_new_pcm(rtd, num);
 -	if (ret < 0) {
 -		dev_err(card->dev, "ASoC: can't create pcm %s :%d\n",
 -			dai_link->stream_name, ret);
 -		return ret;
 -	}
 -	ret = soc_link_dai_pcm_new(&cpu_dai, 1, rtd);
 -	if (ret < 0)
 -		return ret;
 -	ret = soc_link_dai_pcm_new(rtd->codec_dais,
 -				   rtd->num_codecs, rtd);
 -	return ret;
 +	return 0;
  }
  
++<<<<<<< HEAD
 +static int soc_bind_aux_dev(struct snd_soc_card *card,
 +			    struct snd_soc_aux_dev *aux_dev)
++=======
+ static void soc_unbind_aux_dev(struct snd_soc_component *component)
+ {
+ 	component->init = NULL;
+ 	list_del(&component->card_aux_list);
+ }
+ 
+ static int soc_bind_aux_dev(struct snd_soc_card *card)
++>>>>>>> 4893a2eb34a9 (ASoC: soc-core: add soc_unbind_aux_dev())
  {
  	struct snd_soc_component *component;
 -	struct snd_soc_aux_dev *aux;
 -	int i;
 +	const char *name;
 +	struct device_node *codec_of_node;
  
 -	for_each_card_pre_auxs(card, i, aux) {
 +	if (aux_dev->codec_of_node || aux_dev->codec_name) {
  		/* codecs, usually analog devices */
 -		component = soc_find_component(&aux->dlc);
 +		name = aux_dev->codec_name;
 +		codec_of_node = aux_dev->codec_of_node;
 +		component = soc_find_component(codec_of_node, name);
 +		if (!component) {
 +			if (codec_of_node)
 +				name = of_node_full_name(codec_of_node);
 +			goto err_defer;
 +		}
 +	} else if (aux_dev->name) {
 +		/* generic components */
 +		name = aux_dev->name;
 +		component = soc_find_component(NULL, name);
  		if (!component)
 -			return -EPROBE_DEFER;
 -
 -		component->init = aux->init;
 -		/* see for_each_card_auxs */
 -		list_add(&component->card_aux_list, &card->aux_comp_list);
 +			goto err_defer;
 +	} else {
 +		dev_err(card->dev, "ASoC: Invalid auxiliary device\n");
 +		return -EINVAL;
  	}
 +
 +	component->init = aux_dev->init;
 +	/* see for_each_card_auxs */
 +	list_add(&component->card_aux_list, &card->aux_comp_list);
 +
  	return 0;
 +
 +err_defer:
 +	dev_err(card->dev, "ASoC: %s not registered\n", name);
 +	return -EPROBE_DEFER;
  }
  
  static int soc_probe_aux_devices(struct snd_soc_card *card)
* Unmerged path sound/soc/soc-core.c
