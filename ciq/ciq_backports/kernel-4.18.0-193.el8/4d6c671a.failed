SUNRPC: Take the transport send lock before binding+connecting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit 4d6c671ace569d4b0d3f8d92ab3aef18a5d166bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4d6c671a.failed

Before trying to bind a port, ensure we grab the send lock to
ensure that we don't change the port while another task is busy
transmitting requests.
The connect code already takes the send lock in xprt_connect(),
but it is harmless to take it before that.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 4d6c671ace569d4b0d3f8d92ab3aef18a5d166bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/clnt.c
diff --cc net/sunrpc/clnt.c
index 6bd26eab15c9,4216fe33204a..000000000000
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@@ -1770,14 -1853,25 +1770,23 @@@ call_bind(struct rpc_task *task
  {
  	struct rpc_xprt *xprt = task->tk_rqstp->rq_xprt;
  
 -	if (rpc_task_transmitted(task)) {
 -		rpc_task_handle_transmitted(task);
 -		return;
 -	}
 -
 -	if (xprt_bound(xprt)) {
 -		task->tk_action = call_connect;
 -		call_connect(task);
 -		return;
 -	}
 -
  	dprint_status(task);
  
++<<<<<<< HEAD
 +	task->tk_action = call_connect;
 +	if (!xprt_bound(xprt)) {
 +		task->tk_action = call_bind_status;
 +		task->tk_timeout = xprt->bind_timeout;
 +		xprt->ops->rpcbind(task);
 +	}
++=======
+ 	task->tk_action = call_bind_status;
+ 	if (!xprt_prepare_transmit(task))
+ 		return;
+ 
+ 	task->tk_timeout = xprt->bind_timeout;
+ 	xprt->ops->rpcbind(task);
++>>>>>>> 4d6c671ace56 (SUNRPC: Take the transport send lock before binding+connecting)
  }
  
  /*
@@@ -1855,7 -1957,8 +1866,12 @@@ call_bind_status(struct rpc_task *task
  
  retry_timeout:
  	task->tk_status = 0;
++<<<<<<< HEAD
 +	task->tk_action = call_timeout;
++=======
+ 	task->tk_action = call_bind;
+ 	rpc_check_timeout(task);
++>>>>>>> 4d6c671ace56 (SUNRPC: Take the transport send lock before binding+connecting)
  }
  
  /*
@@@ -1870,17 -1984,16 +1886,23 @@@ call_connect(struct rpc_task *task
  			task->tk_pid, xprt,
  			(xprt_connected(xprt) ? "is" : "is not"));
  
 -	task->tk_action = call_connect_status;
 -	if (task->tk_status < 0)
 -		return;
 -	if (task->tk_flags & RPC_TASK_NOCONNECT) {
 -		rpc_exit(task, -ENOTCONN);
 -		return;
 +	task->tk_action = call_transmit;
 +	if (!xprt_connected(xprt)) {
 +		task->tk_action = call_connect_status;
 +		if (task->tk_status < 0)
 +			return;
 +		if (task->tk_flags & RPC_TASK_NOCONNECT) {
 +			rpc_exit(task, -ENOTCONN);
 +			return;
 +		}
 +		xprt_connect(task);
  	}
++<<<<<<< HEAD
++=======
+ 	if (!xprt_prepare_transmit(task))
+ 		return;
+ 	xprt_connect(task);
++>>>>>>> 4d6c671ace56 (SUNRPC: Take the transport send lock before binding+connecting)
  }
  
  /*
* Unmerged path net/sunrpc/clnt.c
