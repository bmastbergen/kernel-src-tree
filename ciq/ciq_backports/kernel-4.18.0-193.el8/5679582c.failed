iommu/vt-d: Allow DMA domain attaching to rmrr locked device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [iommu] vt-d: Allow DMA domain attaching to rmrr locked device (Jerry Snitselaar) [1742234]
Rebuild_FUZZ: 94.74%
commit-author Lu Baolu <baolu.lu@linux.intel.com>
commit 5679582c2fad11733ba65c12d127f9d703390e55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5679582c.failed

We don't allow a device to be assigned to user level when it is locked
by any RMRR's. Hence, intel_iommu_attach_device() will return error if
a domain of type IOMMU_DOMAIN_UNMANAGED is about to attach to a device
locked by rmrr. But this doesn't apply to a domain of type other than
IOMMU_DOMAIN_UNMANAGED. This adds a check to fix this.

Fixes: fa954e6831789 ("iommu/vt-d: Delegate the dma domain to upper layer")
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
Reported-and-tested-by: Qian Cai <cai@lca.pw>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 5679582c2fad11733ba65c12d127f9d703390e55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel-iommu.c
diff --cc drivers/iommu/intel-iommu.c
index 03748b6872bd,c31fbe5790c7..000000000000
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@@ -5165,7 -5159,52 +5165,56 @@@ static int intel_iommu_attach_device(st
  		dmar_domain->agaw--;
  	}
  
++<<<<<<< HEAD
 +	return domain_add_dev_info(dmar_domain, dev);
++=======
+ 	return 0;
+ }
+ 
+ static int intel_iommu_attach_device(struct iommu_domain *domain,
+ 				     struct device *dev)
+ {
+ 	int ret;
+ 
+ 	if (domain->type == IOMMU_DOMAIN_UNMANAGED &&
+ 	    device_is_rmrr_locked(dev)) {
+ 		dev_warn(dev, "Device is ineligible for IOMMU domain attach due to platform RMRR requirement.  Contact your platform vendor.\n");
+ 		return -EPERM;
+ 	}
+ 
+ 	if (is_aux_domain(dev, domain))
+ 		return -EPERM;
+ 
+ 	/* normally dev is not mapped */
+ 	if (unlikely(domain_context_mapped(dev))) {
+ 		struct dmar_domain *old_domain;
+ 
+ 		old_domain = find_domain(dev);
+ 		if (old_domain)
+ 			dmar_remove_one_dev_info(dev);
+ 	}
+ 
+ 	ret = prepare_domain_attach_device(domain, dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return domain_add_dev_info(to_dmar_domain(domain), dev);
+ }
+ 
+ static int intel_iommu_aux_attach_device(struct iommu_domain *domain,
+ 					 struct device *dev)
+ {
+ 	int ret;
+ 
+ 	if (!is_aux_domain(dev, domain))
+ 		return -EPERM;
+ 
+ 	ret = prepare_domain_attach_device(domain, dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return aux_domain_add_dev(to_dmar_domain(domain), dev);
++>>>>>>> 5679582c2fad (iommu/vt-d: Allow DMA domain attaching to rmrr locked device)
  }
  
  static void intel_iommu_detach_device(struct iommu_domain *domain,
* Unmerged path drivers/iommu/intel-iommu.c
