selftests/bpf: fix test_btf_dump with O=

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ilya Leoshkevich <iii@linux.ibm.com>
commit e91dcb536ae263ecff07118e36bf820c229a6ecd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/e91dcb53.failed

test_btf_dump fails when run with O=, because it needs to access source
files and assumes they live in ./progs/, which is not the case in this
scenario.

Fix by instructing kselftest to copy btf_dump_test_case_*.c files to the
test directory. Since kselftest does not preserve directory structure,
adjust the test to look in ./progs/ and then in ./.

	Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit e91dcb536ae263ecff07118e36bf820c229a6ecd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/Makefile
#	tools/testing/selftests/bpf/test_btf_dump.c
diff --cc tools/testing/selftests/bpf/Makefile
index 9bfa8b025d92,69b98d8d3b5b..000000000000
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@@ -22,24 -25,27 +22,42 @@@ $(TEST_CUSTOM_PROGS): $(OUTPUT)/%: %.
  # Order correspond to 'make run_tests' order
  TEST_GEN_PROGS = test_verifier test_tag test_maps test_lru_map test_lpm_map test_progs \
  	test_align test_verifier_log test_dev_cgroup test_tcpbpf_user \
 -	test_sock test_btf test_sockmap get_cgroup_id_user test_socket_cookie \
 -	test_cgroup_storage test_select_reuseport test_section_names \
 -	test_netcnt test_tcpnotify_user test_sock_fields test_sysctl test_hashmap \
 -	test_btf_dump test_cgroup_attach xdping test_sockopt test_sockopt_sk \
 -	test_sockopt_multi test_tcp_rtt
 -
 +	test_sock test_btf test_sockmap test_lirc_mode2_user get_cgroup_id_user \
 +	test_socket_cookie test_cgroup_storage test_select_reuseport test_section_names \
 +	test_netcnt test_tcpnotify_user
 +
++<<<<<<< HEAD
 +TEST_GEN_FILES = test_pkt_access.o test_xdp.o test_l4lb.o test_tcp_estats.o test_obj_id.o \
 +	test_pkt_md_access.o test_xdp_redirect.o test_xdp_meta.o sockmap_parse_prog.o     \
 +	sockmap_verdict_prog.o dev_cgroup.o sample_ret0.o test_tracepoint.o \
 +	test_l4lb_noinline.o test_xdp_noinline.o test_stacktrace_map.o \
 +	test_tcpnotify_kern.o \
 +	sample_map_ret0.o test_tcpbpf_kern.o test_stacktrace_build_id.o \
 +	sockmap_tcp_msg_prog.o connect4_prog.o connect6_prog.o test_adjust_tail.o \
 +	test_btf_haskv.o test_btf_nokv.o test_sockmap_kern.o test_tunnel_kern.o \
 +	test_get_stack_rawtp.o test_sockmap_kern.o test_sockhash_kern.o \
 +	test_lwt_seg6local.o sendmsg4_prog.o sendmsg6_prog.o test_lirc_mode2_kern.o \
 +	get_cgroup_id_kern.o socket_cookie_prog.o test_select_reuseport_kern.o \
 +	test_skb_cgroup_id_kern.o bpf_flow.o netcnt_prog.o \
 +	test_sk_lookup_kern.o test_xdp_vlan.o test_queue_map.o test_stack_map.o \
 +	xdp_dummy.o test_map_in_map.o
++=======
+ BPF_OBJ_FILES = $(patsubst %.c,%.o, $(notdir $(wildcard progs/*.c)))
+ TEST_GEN_FILES = $(BPF_OBJ_FILES)
+ 
+ BTF_C_FILES = $(wildcard progs/btf_dump_test_case_*.c)
+ TEST_FILES = $(BTF_C_FILES)
+ 
+ # Also test sub-register code-gen if LLVM has eBPF v3 processor support which
+ # contains both ALU32 and JMP32 instructions.
+ SUBREG_CODEGEN := $(shell echo "int cal(int a) { return a > 0; }" | \
+ 			$(CLANG) -target bpf -O2 -emit-llvm -S -x c - -o - | \
+ 			$(LLC) -mattr=+alu32 -mcpu=v3 2>&1 | \
+ 			grep 'if w')
+ ifneq ($(SUBREG_CODEGEN),)
+ TEST_GEN_FILES += $(patsubst %.o,alu32/%.o, $(BPF_OBJ_FILES))
+ endif
++>>>>>>> e91dcb536ae2 (selftests/bpf: fix test_btf_dump with O=)
  
  # Order correspond to 'make run_tests' order
  TEST_PROGS := test_kmod.sh \
* Unmerged path tools/testing/selftests/bpf/test_btf_dump.c
* Unmerged path tools/testing/selftests/bpf/Makefile
* Unmerged path tools/testing/selftests/bpf/test_btf_dump.c
