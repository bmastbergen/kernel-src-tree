RDMA: Clean destroy CQ in drivers do not return errors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit a52c8e2469c30cf7ac453d624aed9c168b23d1af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a52c8e24.failed

Like all other destroy commands, .destroy_cq() call is not supposed
to fail. In all flows, the attempt to return earlier caused to memory
leaks.

This patch converts .destroy_cq() to do not return any errors.

	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Acked-by: Gal Pressman <galpress@amazon.com>
	Acked-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit a52c8e2469c30cf7ac453d624aed9c168b23d1af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cq.c
#	drivers/infiniband/core/verbs.c
#	drivers/infiniband/hw/bnxt_re/ib_verbs.c
#	drivers/infiniband/hw/bnxt_re/ib_verbs.h
#	drivers/infiniband/hw/cxgb3/cxio_hal.h
#	drivers/infiniband/hw/cxgb3/iwch_provider.c
#	drivers/infiniband/hw/cxgb4/cq.c
#	drivers/infiniband/hw/cxgb4/iw_cxgb4.h
#	drivers/infiniband/hw/hns/hns_roce_cq.c
#	drivers/infiniband/hw/hns/hns_roce_device.h
#	drivers/infiniband/hw/hns/hns_roce_hw_v1.c
#	drivers/infiniband/hw/i40iw/i40iw_verbs.c
#	drivers/infiniband/hw/mlx4/cq.c
#	drivers/infiniband/hw/mlx4/mlx4_ib.h
#	drivers/infiniband/hw/mlx5/cq.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/infiniband/hw/mthca/mthca_provider.c
#	drivers/infiniband/hw/nes/nes_verbs.c
#	drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
#	drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
#	drivers/infiniband/hw/qedr/verbs.c
#	drivers/infiniband/hw/qedr/verbs.h
#	drivers/infiniband/hw/usnic/usnic_ib_verbs.c
#	drivers/infiniband/hw/usnic/usnic_ib_verbs.h
#	drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
#	drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
#	drivers/infiniband/sw/rdmavt/cq.c
#	drivers/infiniband/sw/rdmavt/cq.h
#	drivers/infiniband/sw/rxe/rxe_verbs.c
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/core/cq.c
index d0ebdb43d295,6ee62600a812..000000000000
--- a/drivers/infiniband/core/cq.c
+++ b/drivers/infiniband/core/cq.c
@@@ -201,11 -203,10 +201,9 @@@ EXPORT_SYMBOL(__ib_alloc_cq)
  /**
   * ib_free_cq_user - free a completion queue
   * @cq:		completion queue to free.
 - * @udata:	User data or NULL for kernel object
   */
 -void ib_free_cq_user(struct ib_cq *cq, struct ib_udata *udata)
 +void ib_free_cq(struct ib_cq *cq)
  {
- 	int ret;
- 
  	if (WARN_ON_ONCE(atomic_read(&cq->usecnt)))
  		return;
  
@@@ -225,7 -226,6 +223,11 @@@
  
  	kfree(cq->wc);
  	rdma_restrack_del(&cq->res);
++<<<<<<< HEAD
 +	ret = cq->device->ops.destroy_cq(cq);
 +	WARN_ON_ONCE(ret);
++=======
+ 	cq->device->ops.destroy_cq(cq, udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  }
 -EXPORT_SYMBOL(ib_free_cq_user);
 +EXPORT_SYMBOL(ib_free_cq);
diff --cc drivers/infiniband/core/verbs.c
index 8ef3c69dc3da,933bc35701ad..000000000000
--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@@ -1938,9 -1949,10 +1938,14 @@@ int ib_destroy_cq(struct ib_cq *cq
  		return -EBUSY;
  
  	rdma_restrack_del(&cq->res);
++<<<<<<< HEAD
 +	return cq->device->ops.destroy_cq(cq);
++=======
+ 	cq->device->ops.destroy_cq(cq, udata);
+ 	return 0;
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  }
 -EXPORT_SYMBOL(ib_destroy_cq_user);
 +EXPORT_SYMBOL(ib_destroy_cq);
  
  int ib_resize_cq(struct ib_cq *cq, int cqe)
  {
diff --cc drivers/infiniband/hw/bnxt_re/ib_verbs.c
index 9361cce3c120,0127af45dcd1..000000000000
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.c
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
@@@ -2557,9 -2517,8 +2557,12 @@@ int bnxt_re_post_recv(struct ib_qp *ib_
  }
  
  /* Completion Queues */
++<<<<<<< HEAD
 +int bnxt_re_destroy_cq(struct ib_cq *ib_cq)
++=======
+ void bnxt_re_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
- 	int rc;
  	struct bnxt_re_cq *cq;
  	struct bnxt_qplib_nq *nq;
  	struct bnxt_re_dev *rdev;
diff --cc drivers/infiniband/hw/bnxt_re/ib_verbs.h
index fb4998da40ee,828403ee0104..000000000000
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.h
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.h
@@@ -196,9 -192,8 +196,13 @@@ int bnxt_re_post_recv(struct ib_qp *qp
  		      const struct ib_recv_wr **bad_recv_wr);
  struct ib_cq *bnxt_re_create_cq(struct ib_device *ibdev,
  				const struct ib_cq_init_attr *attr,
 +				struct ib_ucontext *context,
  				struct ib_udata *udata);
++<<<<<<< HEAD
 +int bnxt_re_destroy_cq(struct ib_cq *cq);
++=======
+ void bnxt_re_destroy_cq(struct ib_cq *cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  int bnxt_re_poll_cq(struct ib_cq *cq, int num_entries, struct ib_wc *wc);
  int bnxt_re_req_notify_cq(struct ib_cq *cq, enum ib_cq_notify_flags flags);
  struct ib_mr *bnxt_re_get_dma_mr(struct ib_pd *pd, int mr_access_flags);
diff --cc drivers/infiniband/hw/cxgb3/cxio_hal.h
index c64e50b5a548,40c029ffa425..000000000000
--- a/drivers/infiniband/hw/cxgb3/cxio_hal.h
+++ b/drivers/infiniband/hw/cxgb3/cxio_hal.h
@@@ -158,8 -158,7 +158,12 @@@ void cxio_rdev_close(struct cxio_rdev *
  int cxio_hal_cq_op(struct cxio_rdev *rdev, struct t3_cq *cq,
  		   enum t3_cq_opcode op, u32 credit);
  int cxio_create_cq(struct cxio_rdev *rdev, struct t3_cq *cq, int kernel);
++<<<<<<< HEAD
 +int cxio_destroy_cq(struct cxio_rdev *rdev, struct t3_cq *cq);
 +int cxio_resize_cq(struct cxio_rdev *rdev, struct t3_cq *cq);
++=======
+ void cxio_destroy_cq(struct cxio_rdev *rdev, struct t3_cq *cq);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  void cxio_release_ucontext(struct cxio_rdev *rdev, struct cxio_ucontext *uctx);
  void cxio_init_ucontext(struct cxio_rdev *rdev, struct cxio_ucontext *uctx);
  int cxio_create_qp(struct cxio_rdev *rdev, u32 kernel_domain, struct t3_wq *wq,
diff --cc drivers/infiniband/hw/cxgb3/iwch_provider.c
index b9bb151437dc,5bde4ae93681..000000000000
--- a/drivers/infiniband/hw/cxgb3/iwch_provider.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_provider.c
@@@ -71,14 -72,13 +71,15 @@@ static int iwch_dealloc_ucontext(struc
  	list_for_each_entry_safe(mm, tmp, &ucontext->mmaps, entry)
  		kfree(mm);
  	cxio_release_ucontext(&rhp->rdev, &ucontext->uctx);
 +	kfree(ucontext);
 +	return 0;
  }
  
 -static int iwch_alloc_ucontext(struct ib_ucontext *ucontext,
 -			       struct ib_udata *udata)
++<<<<<<< HEAD
 +static struct ib_ucontext *iwch_alloc_ucontext(struct ib_device *ibdev,
 +					struct ib_udata *udata)
  {
 -	struct ib_device *ibdev = ucontext->device;
 -	struct iwch_ucontext *context = to_iwch_ucontext(ucontext);
 +	struct iwch_ucontext *context;
  	struct iwch_dev *rhp = to_iwch_dev(ibdev);
  
  	pr_debug("%s ibdev %p\n", __func__, ibdev);
@@@ -88,10 -85,10 +89,13 @@@
  	cxio_init_ucontext(&rhp->rdev, &context->uctx);
  	INIT_LIST_HEAD(&context->mmaps);
  	spin_lock_init(&context->mmap_lock);
 -	return 0;
 +	return &context->ibucontext;
  }
  
 +static int iwch_destroy_cq(struct ib_cq *ib_cq)
++=======
+ static void iwch_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct iwch_cq *chp;
  
diff --cc drivers/infiniband/hw/cxgb4/cq.c
index 1fa5f6445be3,f49e6d271c42..000000000000
--- a/drivers/infiniband/hw/cxgb4/cq.c
+++ b/drivers/infiniband/hw/cxgb4/cq.c
@@@ -30,18 -30,19 +30,17 @@@
   * SOFTWARE.
   */
  
 -#include <rdma/uverbs_ioctl.h>
 -
  #include "iw_cxgb4.h"
  
- static int destroy_cq(struct c4iw_rdev *rdev, struct t4_cq *cq,
- 		      struct c4iw_dev_ucontext *uctx, struct sk_buff *skb,
- 		      struct c4iw_wr_wait *wr_waitp)
+ static void destroy_cq(struct c4iw_rdev *rdev, struct t4_cq *cq,
+ 		       struct c4iw_dev_ucontext *uctx, struct sk_buff *skb,
+ 		       struct c4iw_wr_wait *wr_waitp)
  {
  	struct fw_ri_res_wr *res_wr;
  	struct fw_ri_res *res;
  	int wr_len;
- 	int ret;
  
 -	wr_len = sizeof(*res_wr) + sizeof(*res);
 +	wr_len = sizeof *res_wr + sizeof *res;
  	set_wr_txq(skb, CPL_PRIORITY_CONTROL, 0);
  
  	res_wr = __skb_put_zero(skb, wr_len);
@@@ -968,7 -968,7 +966,11 @@@ int c4iw_poll_cq(struct ib_cq *ibcq, in
  	return !err || err == -ENODATA ? npolled : err;
  }
  
++<<<<<<< HEAD
 +int c4iw_destroy_cq(struct ib_cq *ib_cq)
++=======
+ void c4iw_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct c4iw_cq *chp;
  	struct c4iw_ucontext *ucontext;
diff --cc drivers/infiniband/hw/cxgb4/iw_cxgb4.h
index 7dffb68092fc,45e720288f0f..000000000000
--- a/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
+++ b/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
@@@ -1047,11 -991,10 +1047,16 @@@ struct ib_mr *c4iw_reg_user_mr(struct i
  					   u64 length, u64 virt, int acc,
  					   struct ib_udata *udata);
  struct ib_mr *c4iw_get_dma_mr(struct ib_pd *pd, int acc);
++<<<<<<< HEAD
 +int c4iw_dereg_mr(struct ib_mr *ib_mr);
 +int c4iw_destroy_cq(struct ib_cq *ib_cq);
++=======
+ int c4iw_dereg_mr(struct ib_mr *ib_mr, struct ib_udata *udata);
+ void c4iw_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  struct ib_cq *c4iw_create_cq(struct ib_device *ibdev,
  			     const struct ib_cq_init_attr *attr,
 +			     struct ib_ucontext *ib_context,
  			     struct ib_udata *udata);
  int c4iw_arm_cq(struct ib_cq *ibcq, enum ib_cq_notify_flags flags);
  int c4iw_modify_srq(struct ib_srq *ib_srq, struct ib_srq_attr *attr,
diff --cc drivers/infiniband/hw/hns/hns_roce_cq.c
index 3a485f50fede,0eb7c16c007b..000000000000
--- a/drivers/infiniband/hw/hns/hns_roce_cq.c
+++ b/drivers/infiniband/hw/hns/hns_roce_cq.c
@@@ -451,37 -443,36 +451,64 @@@ err_cq
  }
  EXPORT_SYMBOL_GPL(hns_roce_ib_create_cq);
  
++<<<<<<< HEAD
 +int hns_roce_ib_destroy_cq(struct ib_cq *ib_cq)
++=======
+ void hns_roce_ib_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct hns_roce_dev *hr_dev = to_hr_dev(ib_cq->device);
  	struct hns_roce_cq *hr_cq = to_hr_cq(ib_cq);
- 	int ret = 0;
  
  	if (hr_dev->hw->destroy_cq) {
++<<<<<<< HEAD
 +		ret = hr_dev->hw->destroy_cq(ib_cq);
 +	} else {
 +		hns_roce_free_cq(hr_dev, hr_cq);
 +		hns_roce_mtt_cleanup(hr_dev, &hr_cq->hr_buf.hr_mtt);
 +
 +		if (ib_cq->uobject) {
 +			ib_umem_release(hr_cq->umem);
 +
 +			if (hr_cq->db_en == 1)
 +				hns_roce_db_unmap_user(
 +					to_hr_ucontext(ib_cq->uobject->context),
 +					&hr_cq->db);
 +		} else {
 +			/* Free the buff of stored cq */
 +			hns_roce_ib_free_cq_buf(hr_dev, &hr_cq->hr_buf,
 +						ib_cq->cqe);
 +			if (hr_dev->caps.flags & HNS_ROCE_CAP_FLAG_RECORD_DB)
 +				hns_roce_free_db(hr_dev, &hr_cq->db);
 +		}
 +
 +		kfree(hr_cq);
++=======
+ 		hr_dev->hw->destroy_cq(ib_cq, udata);
+ 		return;
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  	}
  
- 	return ret;
+ 	hns_roce_free_cq(hr_dev, hr_cq);
+ 	hns_roce_mtt_cleanup(hr_dev, &hr_cq->hr_buf.hr_mtt);
+ 
+ 	if (udata) {
+ 		ib_umem_release(hr_cq->umem);
+ 
+ 		if (hr_cq->db_en == 1)
+ 			hns_roce_db_unmap_user(rdma_udata_to_drv_context(
+ 						       udata,
+ 						       struct hns_roce_ucontext,
+ 						       ibucontext),
+ 					       &hr_cq->db);
+ 	} else {
+ 		/* Free the buff of stored cq */
+ 		hns_roce_ib_free_cq_buf(hr_dev, &hr_cq->hr_buf, ib_cq->cqe);
+ 		if (hr_dev->caps.flags & HNS_ROCE_CAP_FLAG_RECORD_DB)
+ 			hns_roce_free_db(hr_dev, &hr_cq->db);
+ 	}
+ 
+ 	kfree(hr_cq);
  }
  EXPORT_SYMBOL_GPL(hns_roce_ib_destroy_cq);
  
diff --cc drivers/infiniband/hw/hns/hns_roce_device.h
index 46aeda06cfd9,2f7d9644fd24..000000000000
--- a/drivers/infiniband/hw/hns/hns_roce_device.h
+++ b/drivers/infiniband/hw/hns/hns_roce_device.h
@@@ -789,8 -936,9 +789,14 @@@ struct hns_roce_hw 
  			 const struct ib_recv_wr **bad_recv_wr);
  	int (*req_notify_cq)(struct ib_cq *ibcq, enum ib_cq_notify_flags flags);
  	int (*poll_cq)(struct ib_cq *ibcq, int num_entries, struct ib_wc *wc);
++<<<<<<< HEAD
 +	int (*dereg_mr)(struct hns_roce_dev *hr_dev, struct hns_roce_mr *mr);
 +	int (*destroy_cq)(struct ib_cq *ibcq);
++=======
+ 	int (*dereg_mr)(struct hns_roce_dev *hr_dev, struct hns_roce_mr *mr,
+ 			struct ib_udata *udata);
+ 	void (*destroy_cq)(struct ib_cq *ibcq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  	int (*modify_cq)(struct ib_cq *cq, u16 cq_count, u16 cq_period);
  	int (*init_eq)(struct hns_roce_dev *hr_dev);
  	void (*cleanup_eq)(struct hns_roce_dev *hr_dev);
@@@ -1014,13 -1207,13 +1020,17 @@@ int to_hr_qp_type(int qp_type)
  
  struct ib_cq *hns_roce_ib_create_cq(struct ib_device *ib_dev,
  				    const struct ib_cq_init_attr *attr,
 +				    struct ib_ucontext *context,
  				    struct ib_udata *udata);
  
++<<<<<<< HEAD
 +int hns_roce_ib_destroy_cq(struct ib_cq *ib_cq);
++=======
+ void hns_roce_ib_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  void hns_roce_free_cq(struct hns_roce_dev *hr_dev, struct hns_roce_cq *hr_cq);
  
 -int hns_roce_db_map_user(struct hns_roce_ucontext *context,
 -			 struct ib_udata *udata, unsigned long virt,
 +int hns_roce_db_map_user(struct hns_roce_ucontext *context, unsigned long virt,
  			 struct hns_roce_db *db);
  void hns_roce_db_unmap_user(struct hns_roce_ucontext *context,
  			    struct hns_roce_db *db);
diff --cc drivers/infiniband/hw/hns/hns_roce_hw_v1.c
index 2b5be3df27d6,aa7b67d283af..000000000000
--- a/drivers/infiniband/hw/hns/hns_roce_hw_v1.c
+++ b/drivers/infiniband/hw/hns/hns_roce_hw_v1.c
@@@ -853,14 -859,15 +853,21 @@@ create_lp_qp_failed
  			dev_err(dev, "Destroy qp %d for mr free failed!\n", i);
  	}
  
 -	hns_roce_dealloc_pd(pd, NULL);
 +	if (hns_roce_dealloc_pd(pd))
 +		dev_err(dev, "Destroy pd for create_lp_qp failed!\n");
  
  alloc_pd_failed:
++<<<<<<< HEAD
 +	if (hns_roce_ib_destroy_cq(cq))
 +		dev_err(dev, "Destroy cq for create_lp_qp failed!\n");
++=======
+ 	kfree(pd);
+ 
+ alloc_mem_failed:
+ 	hns_roce_ib_destroy_cq(cq, NULL);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  
 -	return ret;
 +	return -EINVAL;
  }
  
  static void hns_roce_v1_release_lp_qp(struct hns_roce_dev *hr_dev)
@@@ -886,13 -893,8 +893,18 @@@
  				i, ret);
  	}
  
++<<<<<<< HEAD
 +	ret = hns_roce_ib_destroy_cq(&free_mr->mr_free_cq->ib_cq);
 +	if (ret)
 +		dev_err(dev, "Destroy cq for mr_free failed(%d)!\n", ret);
 +
 +	ret = hns_roce_dealloc_pd(&free_mr->mr_free_pd->ibpd);
 +	if (ret)
 +		dev_err(dev, "Destroy pd for mr_free failed(%d)!\n", ret);
++=======
+ 	hns_roce_ib_destroy_cq(&free_mr->mr_free_cq->ib_cq, NULL);
+ 	hns_roce_dealloc_pd(&free_mr->mr_free_pd->ibpd, NULL);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  }
  
  static int hns_roce_db_init(struct hns_roce_dev *hr_dev)
@@@ -3993,7 -3650,7 +4005,11 @@@ int hns_roce_v1_destroy_qp(struct ib_q
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int hns_roce_v1_destroy_cq(struct ib_cq *ibcq)
++=======
+ static void hns_roce_v1_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct hns_roce_dev *hr_dev = to_hr_dev(ibcq->device);
  	struct hns_roce_cq *hr_cq = to_hr_cq(ibcq);
diff --cc drivers/infiniband/hw/i40iw/i40iw_verbs.c
index fab854e906ed,205053cb5f97..000000000000
--- a/drivers/infiniband/hw/i40iw/i40iw_verbs.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
@@@ -1094,8 -1062,9 +1094,12 @@@ void i40iw_cq_wq_destroy(struct i40iw_d
  /**
   * i40iw_destroy_cq - destroy cq
   * @ib_cq: cq pointer
 - * @udata: user data or NULL for kernel object
   */
++<<<<<<< HEAD
 +static int i40iw_destroy_cq(struct ib_cq *ib_cq)
++=======
+ static void i40iw_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct i40iw_cq *iwcq;
  	struct i40iw_device *iwdev;
diff --cc drivers/infiniband/hw/mlx4/cq.c
index 43512347b4f0,8eb7490dabb8..000000000000
--- a/drivers/infiniband/hw/mlx4/cq.c
+++ b/drivers/infiniband/hw/mlx4/cq.c
@@@ -486,7 -486,7 +486,11 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
 +int mlx4_ib_destroy_cq(struct ib_cq *cq)
++=======
+ void mlx4_ib_destroy_cq(struct ib_cq *cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct mlx4_ib_dev *dev = to_mdev(cq->device);
  	struct mlx4_ib_cq *mcq = to_mcq(cq);
diff --cc drivers/infiniband/hw/mlx4/mlx4_ib.h
index 4c774304cc63,af5ee45a9f19..000000000000
--- a/drivers/infiniband/hw/mlx4/mlx4_ib.h
+++ b/drivers/infiniband/hw/mlx4/mlx4_ib.h
@@@ -746,9 -745,8 +746,13 @@@ int mlx4_ib_modify_cq(struct ib_cq *cq
  int mlx4_ib_resize_cq(struct ib_cq *ibcq, int entries, struct ib_udata *udata);
  struct ib_cq *mlx4_ib_create_cq(struct ib_device *ibdev,
  				const struct ib_cq_init_attr *attr,
 +				struct ib_ucontext *context,
  				struct ib_udata *udata);
++<<<<<<< HEAD
 +int mlx4_ib_destroy_cq(struct ib_cq *cq);
++=======
+ void mlx4_ib_destroy_cq(struct ib_cq *cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  int mlx4_ib_poll_cq(struct ib_cq *ibcq, int num_entries, struct ib_wc *wc);
  int mlx4_ib_arm_cq(struct ib_cq *cq, enum ib_cq_notify_flags flags);
  void __mlx4_ib_cq_clean(struct mlx4_ib_cq *cq, u32 qpn, struct mlx4_ib_srq *srq);
diff --cc drivers/infiniband/hw/mlx5/cq.c
index 6bfa574fa013,ebd01bd7f8f6..000000000000
--- a/drivers/infiniband/hw/mlx5/cq.c
+++ b/drivers/infiniband/hw/mlx5/cq.c
@@@ -996,8 -998,7 +996,12 @@@ err_create
  	return ERR_PTR(err);
  }
  
++<<<<<<< HEAD
 +
 +int mlx5_ib_destroy_cq(struct ib_cq *cq)
++=======
+ void mlx5_ib_destroy_cq(struct ib_cq *cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct mlx5_ib_dev *dev = to_mdev(cq->device);
  	struct mlx5_ib_cq *mcq = to_mcq(cq);
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index 1b44b1ade284,bf697c5b3e79..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -1080,14 -1109,16 +1080,18 @@@ int mlx5_ib_post_send(struct ib_qp *ibq
  		      const struct ib_send_wr **bad_wr);
  int mlx5_ib_post_recv(struct ib_qp *ibqp, const struct ib_recv_wr *wr,
  		      const struct ib_recv_wr **bad_wr);
 -int mlx5_ib_read_user_wqe_sq(struct mlx5_ib_qp *qp, int wqe_index, void *buffer,
 -			     int buflen, size_t *bc);
 -int mlx5_ib_read_user_wqe_rq(struct mlx5_ib_qp *qp, int wqe_index, void *buffer,
 -			     int buflen, size_t *bc);
 -int mlx5_ib_read_user_wqe_srq(struct mlx5_ib_srq *srq, int wqe_index,
 -			      void *buffer, int buflen, size_t *bc);
 +int mlx5_ib_read_user_wqe(struct mlx5_ib_qp *qp, int send, int wqe_index,
 +			  void *buffer, u32 length,
 +			  struct mlx5_ib_qp_base *base);
  struct ib_cq *mlx5_ib_create_cq(struct ib_device *ibdev,
  				const struct ib_cq_init_attr *attr,
 +				struct ib_ucontext *context,
  				struct ib_udata *udata);
++<<<<<<< HEAD
 +int mlx5_ib_destroy_cq(struct ib_cq *cq);
++=======
+ void mlx5_ib_destroy_cq(struct ib_cq *cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  int mlx5_ib_poll_cq(struct ib_cq *ibcq, int num_entries, struct ib_wc *wc);
  int mlx5_ib_arm_cq(struct ib_cq *ibcq, enum ib_cq_notify_flags flags);
  int mlx5_ib_modify_cq(struct ib_cq *cq, u16 cq_count, u16 cq_period);
diff --cc drivers/infiniband/hw/mthca/mthca_provider.c
index ae6b236e4756,81fc04e1c142..000000000000
--- a/drivers/infiniband/hw/mthca/mthca_provider.c
+++ b/drivers/infiniband/hw/mthca/mthca_provider.c
@@@ -853,16 -804,22 +853,20 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int mthca_destroy_cq(struct ib_cq *cq)
++=======
+ static void mthca_destroy_cq(struct ib_cq *cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
 -	if (udata) {
 -		struct mthca_ucontext *context =
 -			rdma_udata_to_drv_context(
 -				udata,
 -				struct mthca_ucontext,
 -				ibucontext);
 -
 +	if (cq->uobject) {
  		mthca_unmap_user_db(to_mdev(cq->device),
 -				    &context->uar,
 -				    context->db_tab,
 +				    &to_mucontext(cq->uobject->context)->uar,
 +				    to_mucontext(cq->uobject->context)->db_tab,
  				    to_mcq(cq)->arm_db_index);
  		mthca_unmap_user_db(to_mdev(cq->device),
 -				    &context->uar,
 -				    context->db_tab,
 +				    &to_mucontext(cq->uobject->context)->uar,
 +				    to_mucontext(cq->uobject->context)->db_tab,
  				    to_mcq(cq)->set_ci_db_index);
  	}
  	mthca_free_cq(to_mdev(cq->device), to_mcq(cq));
diff --cc drivers/infiniband/hw/nes/nes_verbs.c
index fc87bfde3c68,cac3fa624c4d..000000000000
--- a/drivers/infiniband/hw/nes/nes_verbs.c
+++ b/drivers/infiniband/hw/nes/nes_verbs.c
@@@ -1653,7 -1634,7 +1653,11 @@@ static struct ib_cq *nes_create_cq(stru
  /**
   * nes_destroy_cq
   */
++<<<<<<< HEAD
 +static int nes_destroy_cq(struct ib_cq *ib_cq)
++=======
+ static void nes_destroy_cq(struct ib_cq *ib_cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct nes_cq *nescq;
  	struct nes_device *nesdev;
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
index 9c19475e0282,94e4f7f9b1f7..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
@@@ -1082,7 -1070,7 +1082,11 @@@ static void ocrdma_flush_cq(struct ocrd
  	spin_unlock_irqrestore(&cq->cq_lock, flags);
  }
  
++<<<<<<< HEAD
 +int ocrdma_destroy_cq(struct ib_cq *ibcq)
++=======
+ void ocrdma_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct ocrdma_cq *cq = get_ocrdma_cq(ibcq);
  	struct ocrdma_eq *eq = NULL;
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
index 0421f3e3c922,89cebe05669e..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
@@@ -75,10 -73,9 +75,14 @@@ int ocrdma_dealloc_pd(struct ib_pd *pd)
  
  struct ib_cq *ocrdma_create_cq(struct ib_device *ibdev,
  			       const struct ib_cq_init_attr *attr,
 +			       struct ib_ucontext *ib_ctx,
  			       struct ib_udata *udata);
  int ocrdma_resize_cq(struct ib_cq *, int cqe, struct ib_udata *);
++<<<<<<< HEAD
 +int ocrdma_destroy_cq(struct ib_cq *);
++=======
+ void ocrdma_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  
  struct ib_qp *ocrdma_create_qp(struct ib_pd *,
  			       struct ib_qp_init_attr *attrs,
diff --cc drivers/infiniband/hw/qedr/verbs.c
index 26243f439c76,be29bbbc4b14..000000000000
--- a/drivers/infiniband/hw/qedr/verbs.c
+++ b/drivers/infiniband/hw/qedr/verbs.c
@@@ -986,7 -955,7 +986,11 @@@ int qedr_resize_cq(struct ib_cq *ibcq, 
  #define QEDR_DESTROY_CQ_MAX_ITERATIONS		(10)
  #define QEDR_DESTROY_CQ_ITER_DURATION		(10)
  
++<<<<<<< HEAD
 +int qedr_destroy_cq(struct ib_cq *ibcq)
++=======
+ void qedr_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct qedr_dev *dev = get_qedr_dev(ibcq->device);
  	struct qed_rdma_destroy_cq_out_params oparams;
@@@ -1004,13 -972,10 +1007,10 @@@
  		goto done;
  
  	iparams.icid = cq->icid;
- 	rc = dev->ops->rdma_destroy_cq(dev->rdma_ctx, &iparams, &oparams);
- 	if (rc)
- 		return rc;
- 
+ 	dev->ops->rdma_destroy_cq(dev->rdma_ctx, &iparams, &oparams);
  	dev->ops->common->chain_free(dev->cdev, &cq->pbl);
  
 -	if (udata) {
 +	if (ibcq->uobject && ibcq->uobject->context) {
  		qedr_free_pbl(dev, &cq->q.pbl_info, cq->q.pbl_tbl);
  		ib_umem_release(cq->q.umem);
  	}
diff --cc drivers/infiniband/hw/qedr/verbs.h
index 0e5fb4e82418,32d7ce77e339..000000000000
--- a/drivers/infiniband/hw/qedr/verbs.h
+++ b/drivers/infiniband/hw/qedr/verbs.h
@@@ -53,10 -52,9 +53,14 @@@ int qedr_dealloc_pd(struct ib_pd *pd)
  
  struct ib_cq *qedr_create_cq(struct ib_device *ibdev,
  			     const struct ib_cq_init_attr *attr,
 +			     struct ib_ucontext *ib_ctx,
  			     struct ib_udata *udata);
  int qedr_resize_cq(struct ib_cq *, int cqe, struct ib_udata *);
++<<<<<<< HEAD
 +int qedr_destroy_cq(struct ib_cq *);
++=======
+ void qedr_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  int qedr_arm_cq(struct ib_cq *ibcq, enum ib_cq_notify_flags flags);
  struct ib_qp *qedr_create_qp(struct ib_pd *, struct ib_qp_init_attr *attrs,
  			     struct ib_udata *);
diff --cc drivers/infiniband/hw/usnic/usnic_ib_verbs.c
index 432e6f6599fa,5686d14b86fe..000000000000
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
@@@ -629,11 -604,9 +629,13 @@@ struct ib_cq *usnic_ib_create_cq(struc
  	return cq;
  }
  
++<<<<<<< HEAD
 +int usnic_ib_destroy_cq(struct ib_cq *cq)
++=======
+ void usnic_ib_destroy_cq(struct ib_cq *cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
- 	usnic_dbg("\n");
  	kfree(cq);
- 	return 0;
  }
  
  struct ib_mr *usnic_ib_reg_mr(struct ib_pd *pd, u64 start, u64 length,
diff --cc drivers/infiniband/hw/usnic/usnic_ib_verbs.h
index e33144261b9a,0b9d993433a7..000000000000
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.h
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.h
@@@ -63,9 -60,8 +63,13 @@@ int usnic_ib_modify_qp(struct ib_qp *ib
  				int attr_mask, struct ib_udata *udata);
  struct ib_cq *usnic_ib_create_cq(struct ib_device *ibdev,
  				 const struct ib_cq_init_attr *attr,
 +				 struct ib_ucontext *context,
  				 struct ib_udata *udata);
++<<<<<<< HEAD
 +int usnic_ib_destroy_cq(struct ib_cq *cq);
++=======
+ void usnic_ib_destroy_cq(struct ib_cq *cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  struct ib_mr *usnic_ib_reg_mr(struct ib_pd *pd, u64 start, u64 length,
  				u64 virt_addr, int access_flags,
  				struct ib_udata *udata);
diff --cc drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
index 0f004c737620,0682781f6555..000000000000
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
@@@ -245,10 -245,9 +245,16 @@@ static void pvrdma_free_cq(struct pvrdm
  /**
   * pvrdma_destroy_cq - destroy completion queue
   * @cq: the completion queue to destroy.
++<<<<<<< HEAD
 + *
 + * @return: 0 for success.
 + */
 +int pvrdma_destroy_cq(struct ib_cq *cq)
++=======
+  * @udata: user data or null for kernel object
+  */
+ void pvrdma_destroy_cq(struct ib_cq *cq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct pvrdma_cq *vcq = to_vcq(cq);
  	union pvrdma_cmd_req req;
diff --cc drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
index f7f758d60110,f0dd6e4d058b..000000000000
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
@@@ -414,18 -411,16 +414,22 @@@ int pvrdma_map_mr_sg(struct ib_mr *ibmr
  		     int sg_nents, unsigned int *sg_offset);
  struct ib_cq *pvrdma_create_cq(struct ib_device *ibdev,
  			       const struct ib_cq_init_attr *attr,
 +			       struct ib_ucontext *context,
  			       struct ib_udata *udata);
++<<<<<<< HEAD
 +int pvrdma_destroy_cq(struct ib_cq *cq);
++=======
+ void pvrdma_destroy_cq(struct ib_cq *cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  int pvrdma_poll_cq(struct ib_cq *ibcq, int num_entries, struct ib_wc *wc);
  int pvrdma_req_notify_cq(struct ib_cq *cq, enum ib_cq_notify_flags flags);
 -int pvrdma_create_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr, u32 flags,
 -		     struct ib_udata *udata);
 -void pvrdma_destroy_ah(struct ib_ah *ah, u32 flags);
 +struct ib_ah *pvrdma_create_ah(struct ib_pd *pd, struct rdma_ah_attr *ah_attr,
 +			       u32 flags, struct ib_udata *udata);
 +int pvrdma_destroy_ah(struct ib_ah *ah, u32 flags);
  
 -int pvrdma_create_srq(struct ib_srq *srq, struct ib_srq_init_attr *init_attr,
 -		      struct ib_udata *udata);
 +struct ib_srq *pvrdma_create_srq(struct ib_pd *pd,
 +				 struct ib_srq_init_attr *init_attr,
 +				 struct ib_udata *udata);
  int pvrdma_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
  		      enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
  int pvrdma_query_srq(struct ib_srq *srq, struct ib_srq_attr *srq_attr);
diff --cc drivers/infiniband/sw/rdmavt/cq.c
index 4f1544ad4aff,8e76036fad4a..000000000000
--- a/drivers/infiniband/sw/rdmavt/cq.c
+++ b/drivers/infiniband/sw/rdmavt/cq.c
@@@ -299,12 -297,11 +299,14 @@@ done
  /**
   * rvt_destroy_cq - destroy a completion queue
   * @ibcq: the completion queue to destroy.
 - * @udata: user data or NULL for kernel object
   *
   * Called by ib_destroy_cq() in the generic verbs code.
-  *
-  * Return: always 0
   */
++<<<<<<< HEAD
 +int rvt_destroy_cq(struct ib_cq *ibcq)
++=======
+ void rvt_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct rvt_cq *cq = ibcq_to_rvtcq(ibcq);
  	struct rvt_dev_info *rdi = cq->rdi;
diff --cc drivers/infiniband/sw/rdmavt/cq.h
index 72184b1c176b,495d8c3e6580..000000000000
--- a/drivers/infiniband/sw/rdmavt/cq.h
+++ b/drivers/infiniband/sw/rdmavt/cq.h
@@@ -53,9 -53,8 +53,13 @@@
  
  struct ib_cq *rvt_create_cq(struct ib_device *ibdev,
  			    const struct ib_cq_init_attr *attr,
 +			    struct ib_ucontext *context,
  			    struct ib_udata *udata);
++<<<<<<< HEAD
 +int rvt_destroy_cq(struct ib_cq *ibcq);
++=======
+ void rvt_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  int rvt_req_notify_cq(struct ib_cq *ibcq, enum ib_cq_notify_flags notify_flags);
  int rvt_resize_cq(struct ib_cq *ibcq, int cqe, struct ib_udata *udata);
  int rvt_poll_cq(struct ib_cq *ibcq, int num_entries, struct ib_wc *entry);
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.c
index f3188f269481,b14881decbee..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@@ -843,7 -819,7 +843,11 @@@ err1
  	return ERR_PTR(err);
  }
  
++<<<<<<< HEAD
 +static int rxe_destroy_cq(struct ib_cq *ibcq)
++=======
+ static void rxe_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  {
  	struct rxe_cq *cq = to_rcq(ibcq);
  
diff --cc include/rdma/ib_verbs.h
index 714b9b5e3733,bc1d94c9c9ba..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -2417,13 -2457,12 +2417,17 @@@ struct ib_device_ops 
  			 int qp_attr_mask, struct ib_udata *udata);
  	int (*query_qp)(struct ib_qp *qp, struct ib_qp_attr *qp_attr,
  			int qp_attr_mask, struct ib_qp_init_attr *qp_init_attr);
 -	int (*destroy_qp)(struct ib_qp *qp, struct ib_udata *udata);
 +	int (*destroy_qp)(struct ib_qp *qp);
  	struct ib_cq *(*create_cq)(struct ib_device *device,
  				   const struct ib_cq_init_attr *attr,
 +				   struct ib_ucontext *context,
  				   struct ib_udata *udata);
  	int (*modify_cq)(struct ib_cq *cq, u16 cq_count, u16 cq_period);
++<<<<<<< HEAD
 +	int (*destroy_cq)(struct ib_cq *cq);
++=======
+ 	void (*destroy_cq)(struct ib_cq *cq, struct ib_udata *udata);
++>>>>>>> a52c8e2469c3 (RDMA: Clean destroy CQ in drivers do not return errors)
  	int (*resize_cq)(struct ib_cq *cq, int cqe, struct ib_udata *udata);
  	struct ib_mr *(*get_dma_mr)(struct ib_pd *pd, int mr_access_flags);
  	struct ib_mr *(*reg_user_mr)(struct ib_pd *pd, u64 start, u64 length,
* Unmerged path drivers/infiniband/core/cq.c
* Unmerged path drivers/infiniband/core/verbs.c
* Unmerged path drivers/infiniband/hw/bnxt_re/ib_verbs.c
* Unmerged path drivers/infiniband/hw/bnxt_re/ib_verbs.h
diff --git a/drivers/infiniband/hw/cxgb3/cxio_hal.c b/drivers/infiniband/hw/cxgb3/cxio_hal.c
index dcb4bba522ba..7f61573090ca 100644
--- a/drivers/infiniband/hw/cxgb3/cxio_hal.c
+++ b/drivers/infiniband/hw/cxgb3/cxio_hal.c
@@ -318,17 +318,15 @@ int cxio_create_qp(struct cxio_rdev *rdev_p, u32 kernel_domain,
 	return -ENOMEM;
 }
 
-int cxio_destroy_cq(struct cxio_rdev *rdev_p, struct t3_cq *cq)
+void cxio_destroy_cq(struct cxio_rdev *rdev_p, struct t3_cq *cq)
 {
-	int err;
-	err = cxio_hal_clear_cq_ctx(rdev_p, cq->cqid);
+	cxio_hal_clear_cq_ctx(rdev_p, cq->cqid);
 	kfree(cq->sw_queue);
 	dma_free_coherent(&(rdev_p->rnic_info.pdev->dev),
 			  (1UL << (cq->size_log2))
 			  * sizeof(struct t3_cqe) + 1, cq->queue,
 			  dma_unmap_addr(cq, mapping));
 	cxio_hal_put_cqid(rdev_p->rscp, cq->cqid);
-	return err;
 }
 
 int cxio_destroy_qp(struct cxio_rdev *rdev_p, struct t3_wq *wq,
* Unmerged path drivers/infiniband/hw/cxgb3/cxio_hal.h
* Unmerged path drivers/infiniband/hw/cxgb3/iwch_provider.c
* Unmerged path drivers/infiniband/hw/cxgb4/cq.c
* Unmerged path drivers/infiniband/hw/cxgb4/iw_cxgb4.h
diff --git a/drivers/infiniband/hw/efa/efa.h b/drivers/infiniband/hw/efa/efa.h
index 14a36546985b..52d894f0ad3e 100644
--- a/drivers/infiniband/hw/efa/efa.h
+++ b/drivers/infiniband/hw/efa/efa.h
@@ -134,7 +134,7 @@ int efa_destroy_qp(struct ib_qp *ibqp, struct ib_udata *udata);
 struct ib_qp *efa_create_qp(struct ib_pd *ibpd,
 			    struct ib_qp_init_attr *init_attr,
 			    struct ib_udata *udata);
-int efa_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata);
+void efa_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata);
 struct ib_cq *efa_create_cq(struct ib_device *ibdev,
 			    const struct ib_cq_init_attr *attr,
 			    struct ib_udata *udata);
diff --git a/drivers/infiniband/hw/efa/efa_verbs.c b/drivers/infiniband/hw/efa/efa_verbs.c
index 2187063e7c29..7343276fb95a 100644
--- a/drivers/infiniband/hw/efa/efa_verbs.c
+++ b/drivers/infiniband/hw/efa/efa_verbs.c
@@ -858,25 +858,20 @@ static int efa_destroy_cq_idx(struct efa_dev *dev, int cq_idx)
 	return efa_com_destroy_cq(&dev->edev, &params);
 }
 
-int efa_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
+void efa_destroy_cq(struct ib_cq *ibcq, struct ib_udata *udata)
 {
 	struct efa_dev *dev = to_edev(ibcq->device);
 	struct efa_cq *cq = to_ecq(ibcq);
-	int err;
 
 	ibdev_dbg(&dev->ibdev,
 		  "Destroy cq[%d] virt[0x%p] freed: size[%lu], dma[%pad]\n",
 		  cq->cq_idx, cq->cpu_addr, cq->size, &cq->dma_addr);
 
-	err = efa_destroy_cq_idx(dev, cq->cq_idx);
-	if (err)
-		return err;
-
+	efa_destroy_cq_idx(dev, cq->cq_idx);
 	dma_unmap_single(&dev->pdev->dev, cq->dma_addr, cq->size,
 			 DMA_FROM_DEVICE);
 
 	kfree(cq);
-	return 0;
 }
 
 static int cq_mmap_entries_setup(struct efa_dev *dev, struct efa_cq *cq,
* Unmerged path drivers/infiniband/hw/hns/hns_roce_cq.c
* Unmerged path drivers/infiniband/hw/hns/hns_roce_device.h
* Unmerged path drivers/infiniband/hw/hns/hns_roce_hw_v1.c
* Unmerged path drivers/infiniband/hw/i40iw/i40iw_verbs.c
* Unmerged path drivers/infiniband/hw/mlx4/cq.c
* Unmerged path drivers/infiniband/hw/mlx4/mlx4_ib.h
* Unmerged path drivers/infiniband/hw/mlx5/cq.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/infiniband/hw/mthca/mthca_provider.c
diff --git a/drivers/infiniband/hw/nes/nes_utils.c b/drivers/infiniband/hw/nes/nes_utils.c
index 90f28890246d..e976292fc6c0 100644
--- a/drivers/infiniband/hw/nes/nes_utils.c
+++ b/drivers/infiniband/hw/nes/nes_utils.c
@@ -588,9 +588,7 @@ struct nes_cqp_request *nes_get_cqp_request(struct nes_device *nesdev)
 		cqp_request->callback = 0;
 		nes_debug(NES_DBG_CQP, "Got cqp request %p from the available list \n",
 				cqp_request);
-	} else
-		printk(KERN_ERR PFX "%s: Could not allocated a CQP request.\n",
-			   __func__);
+	}
 
 	return cqp_request;
 }
* Unmerged path drivers/infiniband/hw/nes/nes_verbs.c
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_hw.c b/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
index 69526a9758ad..d3c291c925ea 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
@@ -1887,14 +1887,13 @@ int ocrdma_mbx_create_cq(struct ocrdma_dev *dev, struct ocrdma_cq *cq,
 	return status;
 }
 
-int ocrdma_mbx_destroy_cq(struct ocrdma_dev *dev, struct ocrdma_cq *cq)
+void ocrdma_mbx_destroy_cq(struct ocrdma_dev *dev, struct ocrdma_cq *cq)
 {
-	int status = -ENOMEM;
 	struct ocrdma_destroy_cq *cmd;
 
 	cmd = ocrdma_init_emb_mqe(OCRDMA_CMD_DELETE_CQ, sizeof(*cmd));
 	if (!cmd)
-		return status;
+		return;
 	ocrdma_init_mch(&cmd->req, OCRDMA_CMD_DELETE_CQ,
 			OCRDMA_SUBSYS_COMMON, sizeof(*cmd));
 
@@ -1902,11 +1901,10 @@ int ocrdma_mbx_destroy_cq(struct ocrdma_dev *dev, struct ocrdma_cq *cq)
 	    (cq->id << OCRDMA_DESTROY_CQ_QID_SHIFT) &
 	    OCRDMA_DESTROY_CQ_QID_MASK;
 
-	status = ocrdma_mbx_cmd(dev, (struct ocrdma_mqe *)cmd);
+	ocrdma_mbx_cmd(dev, (struct ocrdma_mqe *)cmd);
 	ocrdma_unbind_eq(dev, cq->eqn);
 	dma_free_coherent(&dev->nic_info.pdev->dev, cq->len, cq->va, cq->pa);
 	kfree(cmd);
-	return status;
 }
 
 int ocrdma_mbx_alloc_lkey(struct ocrdma_dev *dev, struct ocrdma_hw_mr *hwmr,
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_hw.h b/drivers/infiniband/hw/ocrdma/ocrdma_hw.h
index ebc1f442aec3..e3f6d7e59998 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_hw.h
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_hw.h
@@ -122,7 +122,7 @@ int ocrdma_reg_mr(struct ocrdma_dev *, struct ocrdma_hw_mr *hwmr,
 			u32 pd_id, int acc);
 int ocrdma_mbx_create_cq(struct ocrdma_dev *, struct ocrdma_cq *,
 				int entries, int dpp_cq, u16 pd_id);
-int ocrdma_mbx_destroy_cq(struct ocrdma_dev *, struct ocrdma_cq *);
+void ocrdma_mbx_destroy_cq(struct ocrdma_dev *dev, struct ocrdma_cq *cq);
 
 int ocrdma_mbx_create_qp(struct ocrdma_qp *, struct ib_qp_init_attr *attrs,
 			 u8 enable_dpp_cq, u16 dpp_cq_id, u16 *dpp_offset,
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
* Unmerged path drivers/infiniband/hw/qedr/verbs.c
* Unmerged path drivers/infiniband/hw/qedr/verbs.h
* Unmerged path drivers/infiniband/hw/usnic/usnic_ib_verbs.c
* Unmerged path drivers/infiniband/hw/usnic/usnic_ib_verbs.h
* Unmerged path drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
* Unmerged path drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
* Unmerged path drivers/infiniband/sw/rdmavt/cq.c
* Unmerged path drivers/infiniband/sw/rdmavt/cq.h
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.c
* Unmerged path include/rdma/ib_verbs.h
