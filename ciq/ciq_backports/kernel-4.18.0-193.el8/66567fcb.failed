sched/fair: Don't push cfs_bandwith slack timers forward

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author bsegall@google.com <bsegall@google.com>
commit 66567fcbaecac455caa1b13643155d686b51ce63
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/66567fcb.failed

When a cfs_rq sleeps and returns its quota, we delay for 5ms before
waking any throttled cfs_rqs to coalesce with other cfs_rqs going to
sleep, as this has to be done outside of the rq lock we hold.

The current code waits for 5ms without any sleeps, instead of waiting
for 5ms from the first sleep, which can delay the unthrottle more than
we want. Switch this around so that we can't push this forward forever.

This requires an extra flag rather than using hrtimer_active, since we
need to start a new timer if the current one is in the process of
finishing.

	Signed-off-by: Ben Segall <bsegall@google.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Xunlei Pang <xlpang@linux.alibaba.com>
	Acked-by: Phil Auld <pauld@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/xm26a7euy6iq.fsf_-_@bsegall-linux.svl.corp.google.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 66567fcbaecac455caa1b13643155d686b51ce63)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 304e6f44708c,3c11dcdedcbc..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -4770,9 -4785,11 +4775,14 @@@ static void do_sched_cfs_slack_timer(st
  	u64 expires;
  
  	/* confirm we're still not at a refresh boundary */
++<<<<<<< HEAD
 +	raw_spin_lock(&cfs_b->lock);
++=======
+ 	raw_spin_lock_irqsave(&cfs_b->lock, flags);
+ 	cfs_b->slack_started = false;
++>>>>>>> 66567fcbaeca (sched/fair: Don't push cfs_bandwith slack timers forward)
  	if (cfs_b->distribute_running) {
 -		raw_spin_unlock_irqrestore(&cfs_b->lock, flags);
 +		raw_spin_unlock(&cfs_b->lock);
  		return;
  	}
  
* Unmerged path kernel/sched/fair.c
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 04ad2fa044a2..5026ac64337d 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -334,8 +334,10 @@ struct cfs_bandwidth {
 	u64			runtime_expires;
 	int			expires_seq;
 
-	short			idle;
-	short			period_active;
+	u8			idle;
+	u8			period_active;
+	u8			distribute_running;
+	u8			slack_started;
 	struct hrtimer		period_timer;
 	struct hrtimer		slack_timer;
 	struct list_head	throttled_cfs_rq;
@@ -344,8 +346,6 @@ struct cfs_bandwidth {
 	int			nr_periods;
 	int			nr_throttled;
 	u64			throttled_time;
-
-	bool                    distribute_running;
 #endif
 };
 
