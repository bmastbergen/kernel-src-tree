RDMA/core: Change system parameters callback from dumpit to doit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Parav Pandit <parav@mellanox.com>
commit 4d7ba8ce0fec6d5f364dc15786453d26fc0ccb65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4d7ba8ce.failed

.dumpit() callback is used for returning same type of data in the loop,
e.g. loop over ports, resources, devices.

However system parameters are general and standalone for whole
subsystem. It means that getting system parameters should be doit
callback.

Fixes: cb7e0e130503 ("RDMA/core: Add interface to read device namespace sharing mode")
	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 4d7ba8ce0fec6d5f364dc15786453d26fc0ccb65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/nldev.c
#	include/uapi/rdma/rdma_netlink.h
diff --cc drivers/infiniband/core/nldev.c
index efccd8e0fb77,cbd712f5f8b2..000000000000
--- a/drivers/infiniband/core/nldev.c
+++ b/drivers/infiniband/core/nldev.c
@@@ -1090,6 -1237,167 +1090,170 @@@ RES_GET_FUNCS(cq, RDMA_RESTRACK_CQ)
  RES_GET_FUNCS(pd, RDMA_RESTRACK_PD);
  RES_GET_FUNCS(mr, RDMA_RESTRACK_MR);
  
++<<<<<<< HEAD
++=======
+ static LIST_HEAD(link_ops);
+ static DECLARE_RWSEM(link_ops_rwsem);
+ 
+ static const struct rdma_link_ops *link_ops_get(const char *type)
+ {
+ 	const struct rdma_link_ops *ops;
+ 
+ 	list_for_each_entry(ops, &link_ops, list) {
+ 		if (!strcmp(ops->type, type))
+ 			goto out;
+ 	}
+ 	ops = NULL;
+ out:
+ 	return ops;
+ }
+ 
+ void rdma_link_register(struct rdma_link_ops *ops)
+ {
+ 	down_write(&link_ops_rwsem);
+ 	if (WARN_ON_ONCE(link_ops_get(ops->type)))
+ 		goto out;
+ 	list_add(&ops->list, &link_ops);
+ out:
+ 	up_write(&link_ops_rwsem);
+ }
+ EXPORT_SYMBOL(rdma_link_register);
+ 
+ void rdma_link_unregister(struct rdma_link_ops *ops)
+ {
+ 	down_write(&link_ops_rwsem);
+ 	list_del(&ops->list);
+ 	up_write(&link_ops_rwsem);
+ }
+ EXPORT_SYMBOL(rdma_link_unregister);
+ 
+ static int nldev_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	char ibdev_name[IB_DEVICE_NAME_MAX];
+ 	const struct rdma_link_ops *ops;
+ 	char ndev_name[IFNAMSIZ];
+ 	struct net_device *ndev;
+ 	char type[IFNAMSIZ];
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_NAME] ||
+ 	    !tb[RDMA_NLDEV_ATTR_LINK_TYPE] || !tb[RDMA_NLDEV_ATTR_NDEV_NAME])
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(ibdev_name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
+ 		    sizeof(ibdev_name));
+ 	if (strchr(ibdev_name, '%'))
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(type, tb[RDMA_NLDEV_ATTR_LINK_TYPE], sizeof(type));
+ 	nla_strlcpy(ndev_name, tb[RDMA_NLDEV_ATTR_NDEV_NAME],
+ 		    sizeof(ndev_name));
+ 
+ 	ndev = dev_get_by_name(&init_net, ndev_name);
+ 	if (!ndev)
+ 		return -ENODEV;
+ 
+ 	down_read(&link_ops_rwsem);
+ 	ops = link_ops_get(type);
+ #ifdef CONFIG_MODULES
+ 	if (!ops) {
+ 		up_read(&link_ops_rwsem);
+ 		request_module("rdma-link-%s", type);
+ 		down_read(&link_ops_rwsem);
+ 		ops = link_ops_get(type);
+ 	}
+ #endif
+ 	err = ops ? ops->newlink(ibdev_name, ndev) : -EINVAL;
+ 	up_read(&link_ops_rwsem);
+ 	dev_put(ndev);
+ 
+ 	return err;
+ }
+ 
+ static int nldev_dellink(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	struct ib_device *device;
+ 	u32 index;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_INDEX])
+ 		return -EINVAL;
+ 
+ 	index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
+ 	device = ib_device_get_by_index(sock_net(skb->sk), index);
+ 	if (!device)
+ 		return -EINVAL;
+ 
+ 	if (!(device->attrs.device_cap_flags & IB_DEVICE_ALLOW_USER_UNREG)) {
+ 		ib_device_put(device);
+ 		return -EINVAL;
+ 	}
+ 
+ 	ib_unregister_device_and_put(device);
+ 	return 0;
+ }
+ 
+ static int nldev_sys_get_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			      struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	struct sk_buff *msg;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err)
+ 		return err;
+ 
+ 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+ 	if (!msg)
+ 		return -ENOMEM;
+ 
+ 	nlh = nlmsg_put(msg, NETLINK_CB(skb).portid, nlh->nlmsg_seq,
+ 			RDMA_NL_GET_TYPE(RDMA_NL_NLDEV,
+ 					 RDMA_NLDEV_CMD_SYS_GET),
+ 			0, 0);
+ 
+ 	err = nla_put_u8(msg, RDMA_NLDEV_SYS_ATTR_NETNS_MODE,
+ 			 (u8)ib_devices_shared_netns);
+ 	if (err) {
+ 		nlmsg_free(msg);
+ 		return err;
+ 	}
+ 	nlmsg_end(msg, nlh);
+ 	return rdma_nl_unicast(msg, NETLINK_CB(skb).portid);
+ }
+ 
+ static int nldev_set_sys_set_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 				  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	u8 enable;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_SYS_ATTR_NETNS_MODE])
+ 		return -EINVAL;
+ 
+ 	enable = nla_get_u8(tb[RDMA_NLDEV_SYS_ATTR_NETNS_MODE]);
+ 	/* Only 0 and 1 are supported */
+ 	if (enable > 1)
+ 		return -EINVAL;
+ 
+ 	err = rdma_compatdev_set(enable);
+ 	return err;
+ }
+ 
++>>>>>>> 4d7ba8ce0fec (RDMA/core: Change system parameters callback from dumpit to doit)
  static const struct rdma_nl_cbs nldev_cb_table[RDMA_NLDEV_NUM_OPS] = {
  	[RDMA_NLDEV_CMD_GET] = {
  		.doit = nldev_get_doit,
@@@ -1130,8 -1439,17 +1294,18 @@@
  		.dump = nldev_res_get_mr_dumpit,
  	},
  	[RDMA_NLDEV_CMD_RES_PD_GET] = {
 -		.doit = nldev_res_get_pd_doit,
  		.dump = nldev_res_get_pd_dumpit,
  	},
++<<<<<<< HEAD
++=======
+ 	[RDMA_NLDEV_CMD_SYS_GET] = {
+ 		.doit = nldev_sys_get_doit,
+ 	},
+ 	[RDMA_NLDEV_CMD_SYS_SET] = {
+ 		.doit = nldev_set_sys_set_doit,
+ 		.flags = RDMA_NL_ADMIN_PERM,
+ 	},
++>>>>>>> 4d7ba8ce0fec (RDMA/core: Change system parameters callback from dumpit to doit)
  };
  
  void __init nldev_init(void)
diff --cc include/uapi/rdma/rdma_netlink.h
index a9d93ece538f,41db51367efa..000000000000
--- a/include/uapi/rdma/rdma_netlink.h
+++ b/include/uapi/rdma/rdma_netlink.h
@@@ -244,11 -244,16 +244,20 @@@ enum rdma_nldev_command 
  	RDMA_NLDEV_CMD_GET, /* can dump */
  	RDMA_NLDEV_CMD_SET,
  
 -	RDMA_NLDEV_CMD_NEWLINK,
 +	/* 3 - 4 are free to use */
  
 -	RDMA_NLDEV_CMD_DELLINK,
 +	RDMA_NLDEV_CMD_PORT_GET = 5, /* can dump */
  
++<<<<<<< HEAD
 +	/* 6 - 8 are free to use */
++=======
+ 	RDMA_NLDEV_CMD_PORT_GET, /* can dump */
+ 
+ 	RDMA_NLDEV_CMD_SYS_GET,
+ 	RDMA_NLDEV_CMD_SYS_SET,
+ 
+ 	/* 8 is free to use */
++>>>>>>> 4d7ba8ce0fec (RDMA/core: Change system parameters callback from dumpit to doit)
  
  	RDMA_NLDEV_CMD_RES_GET = 9, /* can dump */
  
* Unmerged path drivers/infiniband/core/nldev.c
* Unmerged path include/uapi/rdma/rdma_netlink.h
