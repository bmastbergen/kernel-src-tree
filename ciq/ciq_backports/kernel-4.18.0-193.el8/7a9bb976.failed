bpf: Add verifier tests for the bpf_sk_storage

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 7a9bb9762d3302bb407c7bdb0b5f754e5aa595a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7a9bb976.failed

This patch adds verifier tests for the bpf_sk_storage:
1. ARG_PTR_TO_MAP_VALUE_OR_NULL
2. Map and helper compatibility (e.g. disallow bpf_map_loookup_elem)

It also takes this chance to remove the unused struct btf_raw_data
and uses the BTF encoding macros from "test_btf.h".

	Acked-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 7a9bb9762d3302bb407c7bdb0b5f754e5aa595a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_verifier.c
#	tools/testing/selftests/bpf/verifier/sock.c
diff --cc tools/testing/selftests/bpf/test_verifier.c
index b0399688af21,ccd896b98cac..000000000000
--- a/tools/testing/selftests/bpf/test_verifier.c
+++ b/tools/testing/selftests/bpf/test_verifier.c
@@@ -50,8 -51,9 +51,12 @@@
  #include "../../../include/linux/filter.h"
  
  #define MAX_INSNS	BPF_MAXINSNS
 -#define MAX_TEST_INSNS	1000000
  #define MAX_FIXUPS	8
++<<<<<<< HEAD
 +#define MAX_NR_MAPS	14
++=======
+ #define MAX_NR_MAPS	18
++>>>>>>> 7a9bb9762d33 (bpf: Add verifier tests for the bpf_sk_storage)
  #define MAX_TEST_RUNS	8
  #define POINTER_VALUE	0xcafe4all
  #define TEST_DATA_LEN	64
@@@ -80,6 -83,10 +85,13 @@@ struct bpf_test 
  	int fixup_cgroup_storage[MAX_FIXUPS];
  	int fixup_percpu_cgroup_storage[MAX_FIXUPS];
  	int fixup_map_spin_lock[MAX_FIXUPS];
++<<<<<<< HEAD
++=======
+ 	int fixup_map_array_ro[MAX_FIXUPS];
+ 	int fixup_map_array_wo[MAX_FIXUPS];
+ 	int fixup_map_array_small[MAX_FIXUPS];
+ 	int fixup_sk_storage_map[MAX_FIXUPS];
++>>>>>>> 7a9bb9762d33 (bpf: Add verifier tests for the bpf_sk_storage)
  	const char *errstr;
  	const char *errstr_unpriv;
  	uint32_t retval, retval_unpriv, insn_processed;
@@@ -16896,9 -617,15 +16915,16 @@@ static void do_test_fixup(struct bpf_te
  	int *fixup_cgroup_storage = test->fixup_cgroup_storage;
  	int *fixup_percpu_cgroup_storage = test->fixup_percpu_cgroup_storage;
  	int *fixup_map_spin_lock = test->fixup_map_spin_lock;
++<<<<<<< HEAD
++=======
+ 	int *fixup_map_array_ro = test->fixup_map_array_ro;
+ 	int *fixup_map_array_wo = test->fixup_map_array_wo;
+ 	int *fixup_map_array_small = test->fixup_map_array_small;
+ 	int *fixup_sk_storage_map = test->fixup_sk_storage_map;
++>>>>>>> 7a9bb9762d33 (bpf: Add verifier tests for the bpf_sk_storage)
  
 -	if (test->fill_helper) {
 -		test->fill_insns = calloc(MAX_TEST_INSNS, sizeof(struct bpf_insn));
 +	if (test->fill_helper)
  		test->fill_helper(test);
 -	}
  
  	/* Allocating HTs with 1 elem is fine here, since we only test
  	 * for verifier and not do a runtime lookup, so the only thing
@@@ -17019,6 -746,42 +17045,45 @@@
  			fixup_map_spin_lock++;
  		} while (*fixup_map_spin_lock);
  	}
++<<<<<<< HEAD
++=======
+ 	if (*fixup_map_array_ro) {
+ 		map_fds[14] = __create_map(BPF_MAP_TYPE_ARRAY, sizeof(int),
+ 					   sizeof(struct test_val), 1,
+ 					   BPF_F_RDONLY_PROG);
+ 		update_map(map_fds[14], 0);
+ 		do {
+ 			prog[*fixup_map_array_ro].imm = map_fds[14];
+ 			fixup_map_array_ro++;
+ 		} while (*fixup_map_array_ro);
+ 	}
+ 	if (*fixup_map_array_wo) {
+ 		map_fds[15] = __create_map(BPF_MAP_TYPE_ARRAY, sizeof(int),
+ 					   sizeof(struct test_val), 1,
+ 					   BPF_F_WRONLY_PROG);
+ 		update_map(map_fds[15], 0);
+ 		do {
+ 			prog[*fixup_map_array_wo].imm = map_fds[15];
+ 			fixup_map_array_wo++;
+ 		} while (*fixup_map_array_wo);
+ 	}
+ 	if (*fixup_map_array_small) {
+ 		map_fds[16] = __create_map(BPF_MAP_TYPE_ARRAY, sizeof(int),
+ 					   1, 1, 0);
+ 		update_map(map_fds[16], 0);
+ 		do {
+ 			prog[*fixup_map_array_small].imm = map_fds[16];
+ 			fixup_map_array_small++;
+ 		} while (*fixup_map_array_small);
+ 	}
+ 	if (*fixup_sk_storage_map) {
+ 		map_fds[17] = create_sk_storage_map();
+ 		do {
+ 			prog[*fixup_sk_storage_map].imm = map_fds[17];
+ 			fixup_sk_storage_map++;
+ 		} while (*fixup_sk_storage_map);
+ 	}
++>>>>>>> 7a9bb9762d33 (bpf: Add verifier tests for the bpf_sk_storage)
  }
  
  static int set_admin(bool admin)
* Unmerged path tools/testing/selftests/bpf/verifier/sock.c
* Unmerged path tools/testing/selftests/bpf/test_verifier.c
* Unmerged path tools/testing/selftests/bpf/verifier/sock.c
