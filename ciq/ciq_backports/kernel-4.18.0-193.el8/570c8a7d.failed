net: phy: aquantia: check for supported interface modes in config_init

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] phy: aquantia: check for supported interface modes in config_init (Petr Oros) [1772010]
Rebuild_FUZZ: 96.30%
commit-author Andrew Lunn <andrew@lunn.ch>
commit 570c8a7d53032b1773ecfc6d317402450ada6de4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/570c8a7d.failed

Let config_init check for unsupported interface modes on AQR107/AQCS109.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>
[hkallweit1@gmail.com: adjusted for AQR107/AQCS109 specifics]
	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 570c8a7d53032b1773ecfc6d317402450ada6de4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/aquantia_main.c
diff --cc drivers/net/phy/aquantia_main.c
index ce43883caa6d,74c16b85d32d..000000000000
--- a/drivers/net/phy/aquantia_main.c
+++ b/drivers/net/phy/aquantia_main.c
@@@ -176,6 -178,31 +176,34 @@@ static int aqr_read_status(struct phy_d
  	return genphy_c45_read_status(phydev);
  }
  
++<<<<<<< HEAD
++=======
+ static int aqr107_config_init(struct phy_device *phydev)
+ {
+ 	/* Check that the PHY interface type is compatible */
+ 	if (phydev->interface != PHY_INTERFACE_MODE_SGMII &&
+ 	    phydev->interface != PHY_INTERFACE_MODE_2500BASEX &&
+ 	    phydev->interface != PHY_INTERFACE_MODE_10GKR)
+ 		return -ENODEV;
+ 
+ 	return 0;
+ }
+ 
+ static int aqcs109_config_init(struct phy_device *phydev)
+ {
+ 	/* Check that the PHY interface type is compatible */
+ 	if (phydev->interface != PHY_INTERFACE_MODE_SGMII &&
+ 	    phydev->interface != PHY_INTERFACE_MODE_2500BASEX)
+ 		return -ENODEV;
+ 
+ 	/* AQCS109 belongs to a chip family partially supporting 10G and 5G.
+ 	 * PMA speed ability bits are the same for all members of the family,
+ 	 * AQCS109 however supports speeds up to 2.5G only.
+ 	 */
+ 	return phy_set_max_speed(phydev, SPEED_2500);
+ }
+ 
++>>>>>>> 570c8a7d5303 (net: phy: aquantia: check for supported interface modes in config_init)
  static struct phy_driver aqr_driver[] = {
  {
  	PHY_ID_MATCH_MODEL(PHY_ID_AQ1202),
@@@ -224,9 -247,10 +252,15 @@@
  {
  	PHY_ID_MATCH_MODEL(PHY_ID_AQR107),
  	.name		= "Aquantia AQR107",
 +	.features	= PHY_10GBIT_FULL_FEATURES,
 +	.flags		= PHY_HAS_INTERRUPT,
  	.aneg_done	= genphy_c45_aneg_done,
++<<<<<<< HEAD
++=======
+ 	.get_features	= genphy_c45_pma_read_abilities,
+ 	.probe		= aqr_hwmon_probe,
+ 	.config_init	= aqr107_config_init,
++>>>>>>> 570c8a7d5303 (net: phy: aquantia: check for supported interface modes in config_init)
  	.config_aneg    = aqr_config_aneg,
  	.config_intr	= aqr_config_intr,
  	.ack_interrupt	= aqr_ack_interrupt,
* Unmerged path drivers/net/phy/aquantia_main.c
