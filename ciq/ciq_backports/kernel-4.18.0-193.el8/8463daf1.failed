net/mlx5: Add support to use SMFS in switchdev mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Add support to use SMFS in switchdev mode (Alaa Hleihel) [1760284 1724327 1724336]
Rebuild_FUZZ: 95.92%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit 8463daf17e800c11d0f837aed2e2813391593916
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/8463daf1.failed

In case that flow steering mode of the driver is SMFS (Software Managed
Flow Steering), then use the DR (SW steering) API to create the steering
objects.

In addition, add a call to the set peer namespace when switchdev gets
devcom pair event. It is required to support VF LAG in SMFS.

	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Reviewed-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 8463daf17e800c11d0f837aed2e2813391593916)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 2a02050a09e7,afa623b15a38..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -1332,9 -1675,16 +1373,20 @@@ static int mlx5_esw_offloads_devcom_eve
  
  	switch (event) {
  	case ESW_OFFLOADS_DEVCOM_PAIR:
++<<<<<<< HEAD
 +		err = mlx5_esw_offloads_pair(esw, peer_esw);
++=======
+ 		if (mlx5_eswitch_vport_match_metadata_enabled(esw) !=
+ 		    mlx5_eswitch_vport_match_metadata_enabled(peer_esw))
+ 			break;
+ 
+ 		err = mlx5_esw_offloads_set_ns_peer(esw, peer_esw, true);
++>>>>>>> 8463daf17e80 (net/mlx5: Add support to use SMFS in switchdev mode)
  		if (err)
  			goto err_out;
+ 		err = mlx5_esw_offloads_pair(esw, peer_esw);
+ 		if (err)
+ 			goto err_peer;
  
  		err = mlx5_esw_offloads_pair(peer_esw, esw);
  		if (err)
@@@ -1607,21 -2155,39 +1661,33 @@@ int esw_offloads_init(struct mlx5_eswit
  {
  	int err;
  
 -	if (MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, reformat) &&
 -	    MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, decap))
 -		esw->offloads.encap = DEVLINK_ESWITCH_ENCAP_MODE_BASIC;
 -	else
 -		esw->offloads.encap = DEVLINK_ESWITCH_ENCAP_MODE_NONE;
 +	mutex_init(&esw->fdb_table.offloads.fdb_prio_lock);
  
++<<<<<<< HEAD
 +	err = esw_offloads_steering_init(esw, nvports);
++=======
+ 	mlx5_rdma_enable_roce(esw->dev);
+ 	err = esw_offloads_steering_init(esw);
++>>>>>>> 8463daf17e80 (net/mlx5: Add support to use SMFS in switchdev mode)
  	if (err)
- 		return err;
+ 		goto err_steering_init;
  
 -	err = esw_set_passing_vport_metadata(esw, true);
 -	if (err)
 -		goto err_vport_metadata;
 -
 -	mlx5_eswitch_enable_pf_vf_vports(esw, MLX5_VPORT_UC_ADDR_CHANGE);
 -
 -	err = esw_offloads_load_all_reps(esw);
 +	err = esw_offloads_load_reps(esw, nvports);
  	if (err)
  		goto err_reps;
  
  	esw_offloads_devcom_init(esw);
++<<<<<<< HEAD
++=======
+ 	mutex_init(&esw->offloads.termtbl_mutex);
+ 
++>>>>>>> 8463daf17e80 (net/mlx5: Add support to use SMFS in switchdev mode)
  	return 0;
  
  err_reps:
 -	mlx5_eswitch_disable_pf_vf_vports(esw);
 -	esw_set_passing_vport_metadata(esw, false);
 -err_vport_metadata:
  	esw_offloads_steering_cleanup(esw);
+ err_steering_init:
+ 	mlx5_rdma_disable_roce(esw->dev);
  	return err;
  }
  
@@@ -1644,11 -2210,15 +1710,16 @@@ static int esw_offloads_stop(struct mlx
  	return err;
  }
  
 -void esw_offloads_disable(struct mlx5_eswitch *esw)
 +void esw_offloads_cleanup(struct mlx5_eswitch *esw, int nvports)
  {
  	esw_offloads_devcom_cleanup(esw);
 -	esw_offloads_unload_all_reps(esw);
 -	mlx5_eswitch_disable_pf_vf_vports(esw);
 -	esw_set_passing_vport_metadata(esw, false);
 +	esw_offloads_unload_reps(esw, nvports);
  	esw_offloads_steering_cleanup(esw);
++<<<<<<< HEAD
++=======
+ 	mlx5_rdma_disable_roce(esw->dev);
+ 	esw->offloads.encap = DEVLINK_ESWITCH_ENCAP_MODE_NONE;
++>>>>>>> 8463daf17e80 (net/mlx5: Add support to use SMFS in switchdev mode)
  }
  
  static int esw_mode_from_devlink(u16 mode, u16 *mlx5_mode)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index af9a875f1cf1..e64f83299683 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -144,6 +144,7 @@ struct mlx5_eswitch_fdb {
 		} legacy;
 
 		struct offloads_fdb {
+			struct mlx5_flow_namespace *ns;
 			struct mlx5_flow_table *slow_fdb;
 			struct mlx5_flow_group *send_to_vport_grp;
 			struct mlx5_flow_group *peer_miss_grp;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
