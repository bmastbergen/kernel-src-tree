arm64: Add workaround for Cortex-A76 erratum 1286807

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Catalin Marinas <catalin.marinas@arm.com>
commit ce8c80c536dac9f325a051b30bf7730ee505eddc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ce8c80c5.failed

On the affected Cortex-A76 cores (r0p0 to r3p0), if a virtual address
for a cacheable mapping of a location is being accessed by a core while
another core is remapping the virtual address to a new physical page
using the recommended break-before-make sequence, then under very rare
circumstances TLBI+DSB completes before a read using the translation
being invalidated has been observed by other observers. The workaround
repeats the TLBI+DSB operation and is shared with the Qualcomm Falkor
erratum 1009

	Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit ce8c80c536dac9f325a051b30bf7730ee505eddc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/arm64/silicon-errata.txt
#	arch/arm64/Kconfig
#	arch/arm64/kernel/cpu_errata.c
diff --cc Documentation/arm64/silicon-errata.txt
index e311dab9df6a,8f9577621144..000000000000
--- a/Documentation/arm64/silicon-errata.txt
+++ b/Documentation/arm64/silicon-errata.txt
@@@ -57,7 -57,7 +57,11 @@@ stable kernels
  | ARM            | Cortex-A73      | #858921         | ARM64_ERRATUM_858921        |
  | ARM            | Cortex-A55      | #1024718        | ARM64_ERRATUM_1024718       |
  | ARM            | Cortex-A76      | #1188873        | ARM64_ERRATUM_1188873       |
++<<<<<<< HEAD
 +| ARM            | Cortex-A76      | #1165522        | ARM64_ERRATUM_1165522       |
++=======
+ | ARM            | Cortex-A76      | #1286807        | ARM64_ERRATUM_1286807       |
++>>>>>>> ce8c80c536da (arm64: Add workaround for Cortex-A76 erratum 1286807)
  | ARM            | MMU-500         | #841119,#826419 | N/A                         |
  |                |                 |                 |                             |
  | Cavium         | ThunderX ITS    | #22375, #24313  | CAVIUM_ERRATUM_22375        |
diff --cc arch/arm64/Kconfig
index 5a5a5d3c38fc,ea2ab0330e3a..000000000000
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -511,15 -497,21 +511,33 @@@ config ARM64_ERRATUM_118887
  
  	  If unsure, say Y.
  
++<<<<<<< HEAD
 +config ARM64_ERRATUM_1165522
 +	bool "Cortex-A76: Speculative AT instruction using out-of-context translation regime could cause subsequent request to generate an incorrect translation"
 +	default y
 +	help
 +	  This option adds work arounds for ARM Cortex-A76 erratum 1165522
 +
 +	  Affected Cortex-A76 cores (r0p0, r1p0, r2p0) could end-up with
 +	  corrupted TLBs by speculating an AT instruction during a guest
 +	  context switch.
++=======
+ config ARM64_ERRATUM_1286807
+ 	bool "Cortex-A76: Modification of the translation table for a virtual address might lead to read-after-read ordering violation"
+ 	default y
+ 	select ARM64_WORKAROUND_REPEAT_TLBI
+ 	help
+ 	  This option adds workaround for ARM Cortex-A76 erratum 1286807
+ 
+ 	  On the affected Cortex-A76 cores (r0p0 to r3p0), if a virtual
+ 	  address for a cacheable mapping of a location is being
+ 	  accessed by a core while another core is remapping the virtual
+ 	  address to a new physical page using the recommended
+ 	  break-before-make sequence, then under very rare circumstances
+ 	  TLBI+DSB completes before a read using the translation being
+ 	  invalidated has been observed by other observers. The
+ 	  workaround repeats the TLBI+DSB operation.
++>>>>>>> ce8c80c536da (arm64: Add workaround for Cortex-A76 erratum 1286807)
  
  	  If unsure, say Y.
  
diff --cc arch/arm64/kernel/cpu_errata.c
index feeb8962a8d8,6ad715d67df8..000000000000
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@@ -643,43 -560,31 +643,61 @@@ static const struct midr_range arm64_ha
  
  #endif
  
 -#ifdef CONFIG_HARDEN_EL2_VECTORS
++<<<<<<< HEAD
 +#ifdef CONFIG_CAVIUM_ERRATUM_27456
 +const struct midr_range cavium_erratum_27456_cpus[] = {
 +	/* Cavium ThunderX, T88 pass 1.x - 2.1 */
 +	MIDR_RANGE(MIDR_THUNDERX, 0, 0, 1, 1),
 +	/* Cavium ThunderX, T81 pass 1.0 */
 +	MIDR_REV(MIDR_THUNDERX_81XX, 0, 0),
 +	{},
 +};
 +#endif
  
 -static const struct midr_range arm64_harden_el2_vectors[] = {
 -	MIDR_ALL_VERSIONS(MIDR_CORTEX_A57),
 -	MIDR_ALL_VERSIONS(MIDR_CORTEX_A72),
 +#ifdef CONFIG_CAVIUM_ERRATUM_30115
 +static const struct midr_range cavium_erratum_30115_cpus[] = {
 +	/* Cavium ThunderX, T88 pass 1.x - 2.2 */
 +	MIDR_RANGE(MIDR_THUNDERX, 0, 0, 1, 2),
 +	/* Cavium ThunderX, T81 pass 1.0 - 1.2 */
 +	MIDR_REV_RANGE(MIDR_THUNDERX_81XX, 0, 0, 2),
 +	/* Cavium ThunderX, T83 pass 1.0 */
 +	MIDR_REV(MIDR_THUNDERX_83XX, 0, 0),
  	{},
  };
 +#endif
  
 +#ifdef CONFIG_QCOM_FALKOR_ERRATUM_1003
 +static const struct arm64_cpu_capabilities qcom_erratum_1003_list[] = {
 +	{
 +		ERRATA_MIDR_REV(MIDR_QCOM_FALKOR_V1, 0, 0),
 +	},
 +	{
 +		.midr_range.model = MIDR_QCOM_KRYO,
 +		.matches = is_kryo_midr,
 +	},
 +	{},
 +};
  #endif
  
 +#ifdef CONFIG_ARM64_WORKAROUND_CLEAN_CACHE
 +static const struct midr_range workaround_clean_cache[] = {
++=======
+ #ifdef CONFIG_ARM64_WORKAROUND_REPEAT_TLBI
+ 
+ static const struct midr_range arm64_repeat_tlbi_cpus[] = {
+ #ifdef CONFIG_QCOM_FALKOR_ERRATUM_1009
+ 	MIDR_RANGE(MIDR_QCOM_FALKOR_V1, 0, 0, 0, 0),
+ #endif
+ #ifdef CONFIG_ARM64_ERRATUM_1286807
+ 	MIDR_RANGE(MIDR_CORTEX_A76, 0, 0, 3, 0),
+ #endif
+ 	{},
+ };
+ 
+ #endif
+ 
+ const struct arm64_cpu_capabilities arm64_errata[] = {
++>>>>>>> ce8c80c536da (arm64: Add workaround for Cortex-A76 erratum 1286807)
  #if	defined(CONFIG_ARM64_ERRATUM_826319) || \
  	defined(CONFIG_ARM64_ERRATUM_827319) || \
  	defined(CONFIG_ARM64_ERRATUM_824069)
@@@ -771,17 -697,23 +789,17 @@@ const struct arm64_cpu_capabilities arm
  	},
  #ifdef CONFIG_QCOM_FALKOR_ERRATUM_1003
  	{
 -		.desc = "Qualcomm Technologies Falkor erratum 1003",
 +		.desc = "Qualcomm Technologies Falkor/Kryo erratum 1003",
  		.capability = ARM64_WORKAROUND_QCOM_FALKOR_E1003,
 -		ERRATA_MIDR_REV(MIDR_QCOM_FALKOR_V1, 0, 0),
 -	},
 -	{
 -		.desc = "Qualcomm Technologies Kryo erratum 1003",
 -		.capability = ARM64_WORKAROUND_QCOM_FALKOR_E1003,
 -		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
 -		.midr_range.model = MIDR_QCOM_KRYO,
 -		.matches = is_kryo_midr,
 +		.matches = multi_entry_cap_matches,
 +		.match_list = qcom_erratum_1003_list,
  	},
  #endif
- #ifdef CONFIG_QCOM_FALKOR_ERRATUM_1009
+ #ifdef CONFIG_ARM64_WORKAROUND_REPEAT_TLBI
  	{
- 		.desc = "Qualcomm Technologies Falkor erratum 1009",
+ 		.desc = "Qualcomm erratum 1009, ARM erratum 1286807",
  		.capability = ARM64_WORKAROUND_REPEAT_TLBI,
- 		ERRATA_MIDR_REV(MIDR_QCOM_FALKOR_V1, 0, 0),
+ 		ERRATA_MIDR_RANGE_LIST(arm64_repeat_tlbi_cpus),
  	},
  #endif
  #ifdef CONFIG_ARM64_ERRATUM_858921
* Unmerged path Documentation/arm64/silicon-errata.txt
* Unmerged path arch/arm64/Kconfig
diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h
index 8a072e13d509..aebd86565a88 100644
--- a/arch/arm64/include/asm/tlbflush.h
+++ b/arch/arm64/include/asm/tlbflush.h
@@ -42,14 +42,14 @@
 		   ALTERNATIVE("nop\n			nop",		       \
 			       "dsb ish\n		tlbi " #op,	       \
 			       ARM64_WORKAROUND_REPEAT_TLBI,		       \
-			       CONFIG_QCOM_FALKOR_ERRATUM_1009)		       \
+			       CONFIG_ARM64_WORKAROUND_REPEAT_TLBI)	       \
 			    : : )
 
 #define __TLBI_1(op, arg) asm ("tlbi " #op ", %0\n"			       \
 		   ALTERNATIVE("nop\n			nop",		       \
 			       "dsb ish\n		tlbi " #op ", %0",     \
 			       ARM64_WORKAROUND_REPEAT_TLBI,		       \
-			       CONFIG_QCOM_FALKOR_ERRATUM_1009)		       \
+			       CONFIG_ARM64_WORKAROUND_REPEAT_TLBI)	       \
 			    : : "r" (arg))
 
 #define __TLBI_N(op, arg, n, ...) __TLBI_##n(op, arg)
* Unmerged path arch/arm64/kernel/cpu_errata.c
