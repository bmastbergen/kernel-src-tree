fuse: fix request limit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit f22f812d5ce75a18b56073a7a63862e6ea764070
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f22f812d.failed

The size of struct fuse_req was reduced from 392B to 144B on a non-debug
config, thus the sanitize_global_limit() helper was setting a larger
default limit.  This doesn't really reflect reduction in the memory used by
requests, since the fields removed from fuse_req were added to fuse_args
derived structs; e.g. sizeof(struct fuse_writepages_args) is 248B, thus
resulting in slightly more memory being used for writepage requests
overalll (due to using 256B slabs).

Make the calculatation ignore the size of fuse_req and use the old 392B
value.

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit f22f812d5ce75a18b56073a7a63862e6ea764070)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fuse/inode.c
diff --cc fs/fuse/inode.c
index 523a1f18c557,4404d21649ff..000000000000
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@@ -831,9 -826,12 +831,17 @@@ static const struct super_operations fu
  
  static void sanitize_global_limit(unsigned *limit)
  {
+ 	/*
+ 	 * The default maximum number of async requests is calculated to consume
+ 	 * 1/2^13 of the total memory, assuming 392 bytes per request.
+ 	 */
  	if (*limit == 0)
++<<<<<<< HEAD
 +		*limit = ((totalram_pages << PAGE_SHIFT) >> 13) /
 +			 sizeof(struct fuse_req);
++=======
+ 		*limit = ((totalram_pages() << PAGE_SHIFT) >> 13) / 392;
++>>>>>>> f22f812d5ce7 (fuse: fix request limit)
  
  	if (*limit >= 1 << 16)
  		*limit = (1 << 16) - 1;
* Unmerged path fs/fuse/inode.c
