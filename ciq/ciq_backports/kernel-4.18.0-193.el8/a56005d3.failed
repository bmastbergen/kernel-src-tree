arm64: cpufeature: Reduce number of pointer auth CPU caps from 6 to 4

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [arm64] cpufeature: Reduce number of pointer auth CPU caps from 6 to 4 (Mark Salter) [1756103]
Rebuild_FUZZ: 94.66%
commit-author Will Deacon <will.deacon@arm.com>
commit a56005d3210500f8a166fcb83cbb5ac5d0f909e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a56005d3.failed

We can easily avoid defining the two meta-capabilities for the address
and generic keys, so remove them and instead just check both of the
architected and impdef capabilities when determining the level of system
support.

	Reviewed-by: Suzuki Poulose <suzuki.poulose@arm.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit a56005d3210500f8a166fcb83cbb5ac5d0f909e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/cpucaps.h
#	arch/arm64/include/asm/cpufeature.h
#	arch/arm64/kernel/cpufeature.c
diff --cc arch/arm64/include/asm/cpucaps.h
index 1a8df16d556c,82e9099834ae..000000000000
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@@ -51,11 -51,16 +51,21 @@@
  #define ARM64_SSBD				30
  #define ARM64_MISMATCHED_CACHE_TYPE		31
  #define ARM64_HAS_STAGE2_FWB			32
 -#define ARM64_HAS_CRC32				33
 +#define ARM64_WORKAROUND_1188873		33
  #define ARM64_SSBS				34
 -#define ARM64_WORKAROUND_1188873		35
 +#define ARM64_WORKAROUND_1165522		35
  #define ARM64_HAS_SB				36
++<<<<<<< HEAD
 +
 +#define ARM64_NCAPS				37
++=======
+ #define ARM64_WORKAROUND_1165522		37
+ #define ARM64_HAS_ADDRESS_AUTH_ARCH		38
+ #define ARM64_HAS_ADDRESS_AUTH_IMP_DEF		39
+ #define ARM64_HAS_GENERIC_AUTH_ARCH		40
+ #define ARM64_HAS_GENERIC_AUTH_IMP_DEF		41
+ 
+ #define ARM64_NCAPS				42
++>>>>>>> a56005d32105 (arm64: cpufeature: Reduce number of pointer auth CPU caps from 6 to 4)
  
  #endif /* __ASM_CPUCAPS_H */
diff --cc arch/arm64/include/asm/cpufeature.h
index 7c0459c391c4,1e7fcd12b1c1..000000000000
--- a/arch/arm64/include/asm/cpufeature.h
+++ b/arch/arm64/include/asm/cpufeature.h
@@@ -562,6 -565,20 +562,23 @@@ static inline bool system_supports_cnp(
  		cpus_have_const_cap(ARM64_HAS_CNP);
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool system_supports_address_auth(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_PTR_AUTH) &&
+ 		(cpus_have_const_cap(ARM64_HAS_ADDRESS_AUTH_ARCH) ||
+ 		 cpus_have_const_cap(ARM64_HAS_ADDRESS_AUTH_IMP_DEF));
+ }
+ 
+ static inline bool system_supports_generic_auth(void)
+ {
+ 	return IS_ENABLED(CONFIG_ARM64_PTR_AUTH) &&
+ 		(cpus_have_const_cap(ARM64_HAS_GENERIC_AUTH_ARCH) ||
+ 		 cpus_have_const_cap(ARM64_HAS_GENERIC_AUTH_IMP_DEF));
+ }
+ 
++>>>>>>> a56005d32105 (arm64: cpufeature: Reduce number of pointer auth CPU caps from 6 to 4)
  #define ARM64_SSBD_UNKNOWN		-1
  #define ARM64_SSBD_FORCE_DISABLE	0
  #define ARM64_SSBD_KERNEL		1
diff --cc arch/arm64/kernel/cpufeature.c
index ea14666781d7,e0c76622f630..000000000000
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@@ -1371,19 -1449,60 +1371,66 @@@ static const struct arm64_cpu_capabilit
  		.cpu_enable = cpu_enable_cnp,
  	},
  #endif
 +#ifdef CONFIG_ARM64_SSBD
  	{
 -		.desc = "Speculation barrier (SB)",
 -		.capability = ARM64_HAS_SB,
 -		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
 +		.desc = "Speculative Store Bypassing Safe (SSBS)",
 +		.capability = ARM64_SSBS,
 +		.type = ARM64_CPUCAP_WEAK_LOCAL_CPU_FEATURE,
  		.matches = has_cpuid_feature,
 -		.sys_reg = SYS_ID_AA64ISAR1_EL1,
 -		.field_pos = ID_AA64ISAR1_SB_SHIFT,
 +		.sys_reg = SYS_ID_AA64PFR1_EL1,
 +		.field_pos = ID_AA64PFR1_SSBS_SHIFT,
  		.sign = FTR_UNSIGNED,
 -		.min_field_value = 1,
 +		.min_field_value = ID_AA64PFR1_SSBS_PSTATE_ONLY,
 +		.cpu_enable = cpu_enable_ssbs,
  	},
++<<<<<<< HEAD
 +#endif
++=======
+ #ifdef CONFIG_ARM64_PTR_AUTH
+ 	{
+ 		.desc = "Address authentication (architected algorithm)",
+ 		.capability = ARM64_HAS_ADDRESS_AUTH_ARCH,
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.sys_reg = SYS_ID_AA64ISAR1_EL1,
+ 		.sign = FTR_UNSIGNED,
+ 		.field_pos = ID_AA64ISAR1_APA_SHIFT,
+ 		.min_field_value = ID_AA64ISAR1_APA_ARCHITECTED,
+ 		.matches = has_cpuid_feature,
+ 		.cpu_enable = cpu_enable_address_auth,
+ 	},
+ 	{
+ 		.desc = "Address authentication (IMP DEF algorithm)",
+ 		.capability = ARM64_HAS_ADDRESS_AUTH_IMP_DEF,
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.sys_reg = SYS_ID_AA64ISAR1_EL1,
+ 		.sign = FTR_UNSIGNED,
+ 		.field_pos = ID_AA64ISAR1_API_SHIFT,
+ 		.min_field_value = ID_AA64ISAR1_API_IMP_DEF,
+ 		.matches = has_cpuid_feature,
+ 		.cpu_enable = cpu_enable_address_auth,
+ 	},
+ 	{
+ 		.desc = "Generic authentication (architected algorithm)",
+ 		.capability = ARM64_HAS_GENERIC_AUTH_ARCH,
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.sys_reg = SYS_ID_AA64ISAR1_EL1,
+ 		.sign = FTR_UNSIGNED,
+ 		.field_pos = ID_AA64ISAR1_GPA_SHIFT,
+ 		.min_field_value = ID_AA64ISAR1_GPA_ARCHITECTED,
+ 		.matches = has_cpuid_feature,
+ 	},
+ 	{
+ 		.desc = "Generic authentication (IMP DEF algorithm)",
+ 		.capability = ARM64_HAS_GENERIC_AUTH_IMP_DEF,
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.sys_reg = SYS_ID_AA64ISAR1_EL1,
+ 		.sign = FTR_UNSIGNED,
+ 		.field_pos = ID_AA64ISAR1_GPI_SHIFT,
+ 		.min_field_value = ID_AA64ISAR1_GPI_IMP_DEF,
+ 		.matches = has_cpuid_feature,
+ 	},
+ #endif /* CONFIG_ARM64_PTR_AUTH */
++>>>>>>> a56005d32105 (arm64: cpufeature: Reduce number of pointer auth CPU caps from 6 to 4)
  	{},
  };
  
* Unmerged path arch/arm64/include/asm/cpucaps.h
* Unmerged path arch/arm64/include/asm/cpufeature.h
* Unmerged path arch/arm64/kernel/cpufeature.c
