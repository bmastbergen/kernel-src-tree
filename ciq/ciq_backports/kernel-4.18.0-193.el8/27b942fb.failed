net/mlx5: Get rid of storing copy of device name

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Get rid of storing copy of device name (Alaa Hleihel) [1724335]
Rebuild_FUZZ: 95.65%
commit-author Parav Pandit <parav@mellanox.com>
commit 27b942fbbd3107d4e969ece133925cd646239ef4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/27b942fb.failed

Currently mlx5 core stores copy of the PCI device name in a
mlx5_priv structure and uses pr_warn, pr_err helpers.

Get rid of the copy of this name; instead store the parent device
pointer that contains name as well as dma specific parameters.
This also allows to use kernel's well defined dev_warn, dev_err, dev_dbg
device specific print routines.

This is also a preparation patch to access non PCI parent device in
future.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 27b942fbbd3107d4e969ece133925cd646239ef4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index 4b92d3cc86db,bedf809737b5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -716,50 -735,15 +716,55 @@@ static int mlx5_core_set_issi(struct ml
  	return -EOPNOTSUPP;
  }
  
 -static int mlx5_pci_init(struct mlx5_core_dev *dev, struct pci_dev *pdev,
 -			 const struct pci_device_id *id)
 +/* PCI table of mlx5 devices that are tech preview in RHEL */
 +static const struct pci_device_id mlx5_core_hw_unsupp_pci_table[] = {
 +	{ PCI_VDEVICE(MELLANOX, 0x101d) },			/* ConnectX-6 Dx */
 +	{ PCI_VDEVICE(MELLANOX, 0x101e), MLX5_PCI_DEV_IS_VF},	/* ConnectX Family mlx5Gen Virtual Function */
 +	{ 0, }
 +};
 +
 +static char mlx5_pci_id[32]; /* more than enough space */
 +/*
 + * Function to check if an mlx5 device is tech-preview.
 + * If so, print out message and mark accordingly.
 + *
 + * most of it stolen from pci_match_device() in drivers/pci/pci-drivers.c
 + *
 + */
 +static void mlx5_check_hw_unsupp_status(struct pci_dev *pdev)
  {
 -	struct mlx5_priv *priv = &dev->priv;
 +	const struct pci_device_id *found_id = NULL;
 +
 +	found_id = pci_match_id(mlx5_core_hw_unsupp_pci_table, pdev);
 +
 +	if (found_id) {
 +		sprintf(mlx5_pci_id, "%s: %04x:%02x:%02x.%01x\n", "pci-device",
 +				pci_domain_nr(pdev->bus), pdev->bus->number,
 +				PCI_SLOT(pdev->devfn), PCI_FUNC(pdev->devfn));
 +		/* mark-hw-unsupported doesn't taint kernel; just prints warning */
 +		mark_hardware_unsupported(mlx5_pci_id);
 +	}
 +}
 +
 +static int mlx5_pci_init(struct mlx5_core_dev *dev, struct mlx5_priv *priv)
 +{
 +	struct pci_dev *pdev = dev->pdev;
  	int err = 0;
  
++<<<<<<< HEAD
++=======
+ 	priv->pci_dev_data = id->driver_data;
+ 
++>>>>>>> 27b942fbbd31 (net/mlx5: Get rid of storing copy of device name)
  	pci_set_drvdata(dev->pdev, dev);
 +	strncpy(priv->name, dev_name(&pdev->dev), MLX5_MAX_NAME_LEN);
 +	priv->name[MLX5_MAX_NAME_LEN - 1] = 0;
 +
 +	mutex_init(&priv->pgdir_mutex);
 +	INIT_LIST_HEAD(&priv->pgdir_list);
 +	spin_lock_init(&priv->mkey_lock);
 +
 +	mutex_init(&priv->alloc_mutex);
  
  	dev->bar_addr = pci_resource_start(pdev, 0);
  	priv->numa_node = dev_to_node(&dev->pdev->dev);
@@@ -1250,29 -1241,12 +1255,37 @@@ static const struct devlink_ops mlx5_de
  #endif
  };
  
++<<<<<<< HEAD
 +#define MLX5_IB_MOD "mlx5_ib"
 +static int init_one(struct pci_dev *pdev,
 +		    const struct pci_device_id *id)
++=======
+ static int mlx5_mdev_init(struct mlx5_core_dev *dev, int profile_idx)
++>>>>>>> 27b942fbbd31 (net/mlx5: Get rid of storing copy of device name)
  {
 -	struct mlx5_priv *priv = &dev->priv;
 +	struct mlx5_core_dev *dev;
 +	struct devlink *devlink;
 +	struct mlx5_priv *priv;
  	int err;
  
++<<<<<<< HEAD
 +	devlink = devlink_alloc(&mlx5_devlink_ops, sizeof(*dev));
 +	if (!devlink) {
 +		dev_err(&pdev->dev, "kzalloc failed\n");
 +		return -ENOMEM;
 +	}
 +
 +	dev = devlink_priv(devlink);
 +	priv = &dev->priv;
 +	priv->pci_dev_data = id->driver_data;
 +
 +	pci_set_drvdata(pdev, dev);
 +
 +	dev->pdev = pdev;
 +	dev->profile = &profile[prof_sel];
++=======
+ 	dev->profile = &profile[profile_idx];
++>>>>>>> 27b942fbbd31 (net/mlx5: Get rid of storing copy of device name)
  
  	INIT_LIST_HEAD(&priv->ctx_list);
  	spin_lock_init(&priv->ctx_lock);
@@@ -1284,10 -1258,16 +1297,23 @@@
  	INIT_LIST_HEAD(&priv->bfregs.reg_head.list);
  	INIT_LIST_HEAD(&priv->bfregs.wc_head.list);
  
++<<<<<<< HEAD
 +	err = mlx5_pci_init(dev, priv);
 +	if (err) {
 +		dev_err(&pdev->dev, "mlx5_pci_init failed with error code %d\n", err);
 +		goto clean_dev;
++=======
+ 	mutex_init(&priv->alloc_mutex);
+ 	mutex_init(&priv->pgdir_mutex);
+ 	INIT_LIST_HEAD(&priv->pgdir_list);
+ 	spin_lock_init(&priv->mkey_lock);
+ 
+ 	priv->dbg_root = debugfs_create_dir(dev_name(dev->device),
+ 					    mlx5_debugfs_root);
+ 	if (!priv->dbg_root) {
+ 		dev_err(dev->device, "mlx5_core: error, Cannot create debugfs dir, aborting\n");
+ 		return -ENOMEM;
++>>>>>>> 27b942fbbd31 (net/mlx5: Get rid of storing copy of device name)
  	}
  
  	err = mlx5_health_init(dev);
@@@ -1300,9 -1278,55 +1326,51 @@@
  	if (err)
  		goto err_pagealloc_init;
  
++<<<<<<< HEAD
 +	err = mlx5_load_one(dev, priv, true);
++=======
+ 	return 0;
+ 
+ err_pagealloc_init:
+ 	mlx5_health_cleanup(dev);
+ err_health_init:
+ 	debugfs_remove(dev->priv.dbg_root);
+ 
+ 	return err;
+ }
+ 
+ static void mlx5_mdev_uninit(struct mlx5_core_dev *dev)
+ {
+ 	mlx5_pagealloc_cleanup(dev);
+ 	mlx5_health_cleanup(dev);
+ 	debugfs_remove_recursive(dev->priv.dbg_root);
+ }
+ 
+ #define MLX5_IB_MOD "mlx5_ib"
+ static int init_one(struct pci_dev *pdev, const struct pci_device_id *id)
+ {
+ 	struct mlx5_core_dev *dev;
+ 	struct devlink *devlink;
+ 	int err;
+ 
+ 	devlink = devlink_alloc(&mlx5_devlink_ops, sizeof(*dev));
+ 	if (!devlink) {
+ 		dev_err(&pdev->dev, "kzalloc failed\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	dev = devlink_priv(devlink);
+ 	dev->device = &pdev->dev;
+ 	dev->pdev = pdev;
+ 
+ 	err = mlx5_mdev_init(dev, prof_sel);
+ 	if (err)
+ 		goto mdev_init_err;
+ 
+ 	err = mlx5_pci_init(dev, pdev, id);
++>>>>>>> 27b942fbbd31 (net/mlx5: Get rid of storing copy of device name)
  	if (err) {
 -		mlx5_core_err(dev, "mlx5_pci_init failed with error code %d\n",
 -			      err);
 -		goto pci_init_err;
 -	}
 -
 -	err = mlx5_load_one(dev, true);
 -	if (err) {
 -		mlx5_core_err(dev, "mlx5_load_one failed with error code %d\n",
 -			      err);
 +		dev_err(&pdev->dev, "mlx5_load_one failed with error code %d\n", err);
  		goto err_load_one;
  	}
  
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
index 2e27bca11652..8f550b372a1c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
@@ -1347,7 +1347,7 @@ static void set_wqname(struct mlx5_core_dev *dev)
 	struct mlx5_cmd *cmd = &dev->cmd;
 
 	snprintf(cmd->wq_name, sizeof(cmd->wq_name), "mlx5_cmd_%s",
-		 dev->priv.name);
+		 dev_name(dev->device));
 }
 
 static void clean_debug_files(struct mlx5_core_dev *dev)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer_tracepoint.h b/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer_tracepoint.h
index 7b5901d42994..3038be575923 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer_tracepoint.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/diag/fw_tracer_tracepoint.h
@@ -47,7 +47,7 @@ TRACE_EVENT(mlx5_fw,
 	TP_ARGS(tracer, trace_timestamp, lost, event_id, msg),
 
 	TP_STRUCT__entry(
-		__string(dev_name, tracer->dev->priv.name)
+		__string(dev_name, dev_name(tracer->dev->device))
 		__field(u64, trace_timestamp)
 		__field(bool, lost)
 		__field(u8, event_id)
@@ -55,7 +55,8 @@ TRACE_EVENT(mlx5_fw,
 	),
 
 	TP_fast_assign(
-		__assign_str(dev_name, tracer->dev->priv.name);
+		__assign_str(dev_name,
+			     dev_name(tracer->dev->device));
 		__entry->trace_timestamp = trace_timestamp;
 		__entry->lost = lost;
 		__entry->event_id = event_id;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 72ee5c5daa3d..9edb36681367 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@ -665,7 +665,8 @@ static int mlx5e_hairpin_flow_add(struct mlx5e_priv *priv,
 	}
 
 	netdev_dbg(priv->netdev, "add hairpin: tirn %x rqn %x peer %s sqn %x prio %d (log) data %d packets %d\n",
-		   hp->tirn, hp->pair->rqn[0], hp->pair->peer_mdev->priv.name,
+		   hp->tirn, hp->pair->rqn[0],
+		   dev_name(hp->pair->peer_mdev->device),
 		   hp->pair->sqn[0], match_prio, params.log_data_size, params.log_num_packets);
 
 	hpe->hp = hp;
@@ -702,7 +703,7 @@ static void mlx5e_hairpin_flow_del(struct mlx5e_priv *priv,
 		hpe = list_entry(next, struct mlx5e_hairpin_entry, flows);
 
 		netdev_dbg(priv->netdev, "del hairpin: peer %s\n",
-			   hpe->hp->pair->peer_mdev->priv.name);
+			   dev_name(hpe->hp->pair->peer_mdev->device));
 
 		mlx5e_hairpin_destroy(hpe->hp);
 		hash_del(&hpe->hairpin_hlist);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index 87867f3629d6..e8426b7eedaf 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -364,11 +364,11 @@ bool mlx5_esw_multipath_prereq(struct mlx5_core_dev *dev0,
 
 #define MLX5_DEBUG_ESWITCH_MASK BIT(3)
 
-#define esw_info(dev, format, ...)				\
-	pr_info("(%s): E-Switch: " format, (dev)->priv.name, ##__VA_ARGS__)
+#define esw_info(__dev, format, ...)			\
+	dev_info((__dev)->device, "E-Switch: " format, ##__VA_ARGS__)
 
-#define esw_warn(dev, format, ...)				\
-	pr_warn("(%s): E-Switch: " format, (dev)->priv.name, ##__VA_ARGS__)
+#define esw_warn(__dev, format, ...)			\
+	dev_warn((__dev)->device, "E-Switch: " format, ##__VA_ARGS__)
 
 #define esw_debug(dev, format, ...)				\
 	mlx5_core_dbg_mask(dev, MLX5_DEBUG_ESWITCH_MASK, format, ##__VA_ARGS__)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/health.c b/drivers/net/ethernet/mellanox/mlx5/core/health.c
index bff749be0582..4a810f67ea32 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/health.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/health.c
@@ -370,7 +370,7 @@ int mlx5_health_init(struct mlx5_core_dev *dev)
 		return -ENOMEM;
 
 	strcpy(name, "mlx5_health");
-	strcat(name, dev->priv.name);
+	strcat(name, dev_name(dev->device));
 	health->wq = create_singlethread_workqueue(name);
 	kfree(name);
 	if (!health->wq)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h b/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
index 8213c994e205..22e69d4813e4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
@@ -41,6 +41,7 @@
 #include <linux/ptp_clock_kernel.h>
 #include <linux/mlx5/cq.h>
 #include <linux/mlx5/fs.h>
+#include <linux/mlx5/driver.h>
 
 #define DRIVER_NAME "mlx5_core"
 #define DRIVER_VERSION "5.0-0"
@@ -48,53 +49,57 @@
 extern uint mlx5_core_debug_mask;
 
 #define mlx5_core_dbg(__dev, format, ...)				\
-	pr_debug("%s:%s:%d:(pid %d): " format, (__dev)->priv.name,      \
+	dev_dbg((__dev)->device, "%s:%d:(pid %d): " format,		\
 		 __func__, __LINE__, current->pid,			\
 		 ##__VA_ARGS__)
 
-#define mlx5_core_dbg_once(__dev, format, ...)				\
-	pr_debug_once("%s:%s:%d:(pid %d): " format, (__dev)->priv.name, \
-		     __func__, __LINE__, current->pid,			\
+#define mlx5_core_dbg_once(__dev, format, ...)		\
+	dev_dbg_once((__dev)->device,		\
+		     "%s:%d:(pid %d): " format,		\
+		     __func__, __LINE__, current->pid,	\
 		     ##__VA_ARGS__)
 
-#define mlx5_core_dbg_mask(__dev, mask, format, ...)			\
-do {									\
-	if ((mask) & mlx5_core_debug_mask)				\
-		mlx5_core_dbg(__dev, format, ##__VA_ARGS__);		\
+#define mlx5_core_dbg_mask(__dev, mask, format, ...)		\
+do {								\
+	if ((mask) & mlx5_core_debug_mask)			\
+		mlx5_core_dbg(__dev, format, ##__VA_ARGS__);	\
 } while (0)
 
-#define mlx5_core_err(__dev, format, ...)				\
-	pr_err("%s:%s:%d:(pid %d): " format, (__dev)->priv.name,        \
-		__func__, __LINE__, current->pid,	\
+#define mlx5_core_err(__dev, format, ...)			\
+	dev_err((__dev)->device, "%s:%d:(pid %d): " format,	\
+		__func__, __LINE__, current->pid,		\
 	       ##__VA_ARGS__)
 
-#define mlx5_core_err_rl(__dev, format, ...)				     \
-	pr_err_ratelimited("%s:%s:%d:(pid %d): " format, (__dev)->priv.name, \
-			   __func__, __LINE__, current->pid,		     \
-			   ##__VA_ARGS__)
+#define mlx5_core_err_rl(__dev, format, ...)			\
+	dev_err_ratelimited((__dev)->device,			\
+			    "%s:%d:(pid %d): " format,		\
+			    __func__, __LINE__, current->pid,	\
+			    ##__VA_ARGS__)
 
-#define mlx5_core_warn(__dev, format, ...)				\
-	pr_warn("%s:%s:%d:(pid %d): " format, (__dev)->priv.name,       \
-		 __func__, __LINE__, current->pid,			\
-		##__VA_ARGS__)
+#define mlx5_core_warn(__dev, format, ...)			\
+	dev_warn((__dev)->device, "%s:%d:(pid %d): " format,	\
+		 __func__, __LINE__, current->pid,		\
+		 ##__VA_ARGS__)
 
 #define mlx5_core_warn_once(__dev, format, ...)				\
-	pr_warn_once("%s:%s:%d:(pid %d): " format, (__dev)->priv.name,  \
+	dev_warn_once((__dev)->device, "%s:%d:(pid %d): " format,	\
 		      __func__, __LINE__, current->pid,			\
 		      ##__VA_ARGS__)
 
-#define mlx5_core_warn_rl(__dev, format, ...)				      \
-	pr_warn_ratelimited("%s:%s:%d:(pid %d): " format, (__dev)->priv.name, \
-			   __func__, __LINE__, current->pid,		      \
-			   ##__VA_ARGS__)
+#define mlx5_core_warn_rl(__dev, format, ...)			\
+	dev_warn_ratelimited((__dev)->device,			\
+			     "%s:%d:(pid %d): " format,		\
+			     __func__, __LINE__, current->pid,	\
+			     ##__VA_ARGS__)
 
-#define mlx5_core_info(__dev, format, ...)				\
-	pr_info("%s " format, (__dev)->priv.name, ##__VA_ARGS__)
+#define mlx5_core_info(__dev, format, ...)		\
+	dev_info((__dev)->device, format, ##__VA_ARGS__)
 
-#define mlx5_core_info_rl(__dev, format, ...)				      \
-	pr_info_ratelimited("%s:%s:%d:(pid %d): " format, (__dev)->priv.name, \
-			   __func__, __LINE__, current->pid,		      \
-			   ##__VA_ARGS__)
+#define mlx5_core_info_rl(__dev, format, ...)			\
+	dev_info_ratelimited((__dev)->device,			\
+			     "%s:%d:(pid %d): " format,		\
+			     __func__, __LINE__, current->pid,	\
+			     ##__VA_ARGS__)
 
 enum {
 	MLX5_CMD_DATA, /* print command payload only */
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c b/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c
index 41025387ff2c..d87d42f4f6dd 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c
@@ -600,8 +600,7 @@ int mlx5_wait_for_pages(struct mlx5_core_dev *dev, int *pages)
 		return 0;
 	}
 
-	mlx5_core_dbg(dev, "Waiting for %d pages from %s\n", prev_pages,
-		      dev->priv.name);
+	mlx5_core_dbg(dev, "Waiting for %d pages\n", prev_pages);
 	while (*pages) {
 		if (time_after(jiffies, end)) {
 			mlx5_core_warn(dev, "aborting while there are %d pending pages\n", *pages);
@@ -614,6 +613,6 @@ int mlx5_wait_for_pages(struct mlx5_core_dev *dev, int *pages)
 		msleep(50);
 	}
 
-	mlx5_core_dbg(dev, "All pages received from %s\n", dev->priv.name);
+	mlx5_core_dbg(dev, "All pages received\n");
 	return 0;
 }
diff --git a/include/linux/mlx5/driver.h b/include/linux/mlx5/driver.h
index 81e63992c371..9b9aa47454b1 100644
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@ -56,7 +56,6 @@
 
 enum {
 	MLX5_BOARD_ID_LEN = 64,
-	MLX5_MAX_NAME_LEN = 16,
 };
 
 enum {
@@ -514,7 +513,6 @@ struct mlx5_rl_table {
 };
 
 struct mlx5_priv {
-	char			name[MLX5_MAX_NAME_LEN];
 	struct mlx5_eq_table	*eq_table;
 
 	/* pages stuff */
@@ -644,6 +642,7 @@ struct mlx5_vxlan;
 struct mlx5_fw_tracer;
 
 struct mlx5_core_dev {
+	struct device *device;
 	struct pci_dev	       *pdev;
 	/* sync pci state */
 	struct mutex		pci_status_mutex;
