iov_iter: fix iov_iter_type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit f5eb4d3b92a6a1096ef3480b54782a9409281300
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f5eb4d3b.failed

Commit 875f1d0769cd ("iov_iter: add ITER_BVEC_FLAG_NO_REF flag")
introduces one extra flag of ITER_BVEC_FLAG_NO_REF, and this flag
is stored into iter->type.

However, iov_iter_type() doesn't consider the new added flag, fix
it by masking this flag in iov_iter_type().

Fixes: 875f1d0769cd ("iov_iter: add ITER_BVEC_FLAG_NO_REF flag")
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f5eb4d3b92a6a1096ef3480b54782a9409281300)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/uio.h
diff --cc include/linux/uio.h
index bc2b9f6f90bf,2d0131ad4604..000000000000
--- a/include/linux/uio.h
+++ b/include/linux/uio.h
@@@ -50,6 -58,46 +50,49 @@@ struct iov_iter 
  	};
  };
  
++<<<<<<< HEAD
++=======
+ static inline enum iter_type iov_iter_type(const struct iov_iter *i)
+ {
+ 	return i->type & ~(READ | WRITE | ITER_BVEC_FLAG_NO_REF);
+ }
+ 
+ static inline bool iter_is_iovec(const struct iov_iter *i)
+ {
+ 	return iov_iter_type(i) == ITER_IOVEC;
+ }
+ 
+ static inline bool iov_iter_is_kvec(const struct iov_iter *i)
+ {
+ 	return iov_iter_type(i) == ITER_KVEC;
+ }
+ 
+ static inline bool iov_iter_is_bvec(const struct iov_iter *i)
+ {
+ 	return iov_iter_type(i) == ITER_BVEC;
+ }
+ 
+ static inline bool iov_iter_is_pipe(const struct iov_iter *i)
+ {
+ 	return iov_iter_type(i) == ITER_PIPE;
+ }
+ 
+ static inline bool iov_iter_is_discard(const struct iov_iter *i)
+ {
+ 	return iov_iter_type(i) == ITER_DISCARD;
+ }
+ 
+ static inline unsigned char iov_iter_rw(const struct iov_iter *i)
+ {
+ 	return i->type & (READ | WRITE);
+ }
+ 
+ static inline bool iov_iter_bvec_no_ref(const struct iov_iter *i)
+ {
+ 	return (i->type & ITER_BVEC_FLAG_NO_REF) != 0;
+ }
+ 
++>>>>>>> f5eb4d3b92a6 (iov_iter: fix iov_iter_type)
  /*
   * Total number of bytes covered by an iovec.
   *
* Unmerged path include/linux/uio.h
