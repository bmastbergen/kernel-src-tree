devlink: Introduce PCI PF port flavour and port attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Parav Pandit <parav@mellanox.com>
commit 98fd2d6563fe4a799934a2a74d632601cd089beb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/98fd2d65.failed

In an eswitch, PCI PF may have port which is normally represented
using a representor netdevice.
To have better visibility of eswitch port, its association with
PF and a representor netdevice, introduce a PCI PF port
flavour and port attriute.

When devlink port flavour is PCI PF, fill up PCI PF attributes of the
port.

Extend port name creation using PCI PF number on best effort basis.
So that vendor drivers can skip defining their own scheme.

$ devlink port show
pci/0000:05:00.0/0: type eth netdev eth0 flavour pcipf pfnum 0

	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 98fd2d6563fe4a799934a2a74d632601cd089beb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/devlink.h
#	net/core/devlink.c
diff --cc include/net/devlink.h
index b709c4086baa,97cef896e4d0..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -40,12 -38,28 +40,35 @@@ struct devlink 
  	char priv[0] __aligned(NETDEV_ALIGN);
  };
  
++<<<<<<< HEAD
++=======
+ struct devlink_port_phys_attrs {
+ 	u32 port_number; /* Same value as "split group".
+ 			  * A physical port which is visible to the user
+ 			  * for a given port flavour.
+ 			  */
+ 	u32 split_subport_number;
+ };
+ 
+ struct devlink_port_pci_pf_attrs {
+ 	u16 pf;	/* Associated PCI PF for this port. */
+ };
+ 
++>>>>>>> 98fd2d6563fe (devlink: Introduce PCI PF port flavour and port attribute)
  struct devlink_port_attrs {
  	u8 set:1,
 -	   split:1,
 -	   switch_port:1;
 +	   split:1;
  	enum devlink_port_flavour flavour;
++<<<<<<< HEAD
 +	u32 port_number; /* same value as "split group" */
 +	u32 split_subport_number;
++=======
+ 	struct netdev_phys_item_id switch_id;
+ 	union {
+ 		struct devlink_port_phys_attrs phys;
+ 		struct devlink_port_pci_pf_attrs pci_pf;
+ 	};
++>>>>>>> 98fd2d6563fe (devlink: Introduce PCI PF port flavour and port attribute)
  };
  
  struct devlink_port {
@@@ -567,9 -601,12 +590,18 @@@ void devlink_port_type_clear(struct dev
  void devlink_port_attrs_set(struct devlink_port *devlink_port,
  			    enum devlink_port_flavour flavour,
  			    u32 port_number, bool split,
++<<<<<<< HEAD
 +			    u32 split_subport_number);
 +int devlink_port_get_phys_port_name(struct devlink_port *devlink_port,
 +				    char *name, size_t len);
++=======
+ 			    u32 split_subport_number,
+ 			    const unsigned char *switch_id,
+ 			    unsigned char switch_id_len);
+ void devlink_port_attrs_pci_pf_set(struct devlink_port *devlink_port,
+ 				   const unsigned char *switch_id,
+ 				   unsigned char switch_id_len, u16 pf);
++>>>>>>> 98fd2d6563fe (devlink: Introduce PCI PF port flavour and port attribute)
  int devlink_sb_register(struct devlink *devlink, unsigned int sb_index,
  			u32 size, u16 ingress_pools_count,
  			u16 egress_pools_count, u16 ingress_tc_count,
diff --cc net/core/devlink.c
index d12ffdf1735e,d362652a5cc7..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -517,7 -515,17 +517,21 @@@ static int devlink_nl_port_attrs_put(st
  		return 0;
  	if (nla_put_u16(msg, DEVLINK_ATTR_PORT_FLAVOUR, attrs->flavour))
  		return -EMSGSIZE;
++<<<<<<< HEAD
 +	if (nla_put_u32(msg, DEVLINK_ATTR_PORT_NUMBER, attrs->port_number))
++=======
+ 	if (devlink_port->attrs.flavour == DEVLINK_PORT_FLAVOUR_PCI_PF) {
+ 		if (nla_put_u16(msg, DEVLINK_ATTR_PORT_PCI_PF_NUMBER,
+ 				attrs->pci_pf.pf))
+ 			return -EMSGSIZE;
+ 	}
+ 	if (devlink_port->attrs.flavour != DEVLINK_PORT_FLAVOUR_PHYSICAL &&
+ 	    devlink_port->attrs.flavour != DEVLINK_PORT_FLAVOUR_CPU &&
+ 	    devlink_port->attrs.flavour != DEVLINK_PORT_FLAVOUR_DSA)
+ 		return 0;
+ 	if (nla_put_u32(msg, DEVLINK_ATTR_PORT_NUMBER,
+ 			attrs->phys.port_number))
++>>>>>>> 98fd2d6563fe (devlink: Introduce PCI PF port flavour and port attribute)
  		return -EMSGSIZE;
  	if (!attrs->split)
  		return 0;
@@@ -5487,8 -5806,34 +5501,39 @@@ void devlink_port_attrs_set(struct devl
  }
  EXPORT_SYMBOL_GPL(devlink_port_attrs_set);
  
++<<<<<<< HEAD
 +int devlink_port_get_phys_port_name(struct devlink_port *devlink_port,
 +				    char *name, size_t len)
++=======
+ /**
+  *	devlink_port_attrs_pci_pf_set - Set PCI PF port attributes
+  *
+  *	@devlink_port: devlink port
+  *	@pf: associated PF for the devlink port instance
+  *	@switch_id: if the port is part of switch, this is buffer with ID,
+  *	            otherwise this is NULL
+  *	@switch_id_len: length of the switch_id buffer
+  */
+ void devlink_port_attrs_pci_pf_set(struct devlink_port *devlink_port,
+ 				   const unsigned char *switch_id,
+ 				   unsigned char switch_id_len, u16 pf)
+ {
+ 	struct devlink_port_attrs *attrs = &devlink_port->attrs;
+ 	int ret;
+ 
+ 	ret = __devlink_port_attrs_set(devlink_port,
+ 				       DEVLINK_PORT_FLAVOUR_PCI_PF,
+ 				       switch_id, switch_id_len);
+ 	if (ret)
+ 		return;
+ 
+ 	attrs->pci_pf.pf = pf;
+ }
+ EXPORT_SYMBOL_GPL(devlink_port_attrs_pci_pf_set);
+ 
+ static int __devlink_port_phys_port_name_get(struct devlink_port *devlink_port,
+ 					     char *name, size_t len)
++>>>>>>> 98fd2d6563fe (devlink: Introduce PCI PF port flavour and port attribute)
  {
  	struct devlink_port_attrs *attrs = &devlink_port->attrs;
  	int n = 0;
* Unmerged path include/net/devlink.h
diff --git a/include/uapi/linux/devlink.h b/include/uapi/linux/devlink.h
index 5bb4ea67d84f..a00accfef0d9 100644
--- a/include/uapi/linux/devlink.h
+++ b/include/uapi/linux/devlink.h
@@ -167,6 +167,10 @@ enum devlink_port_flavour {
 	DEVLINK_PORT_FLAVOUR_DSA, /* Distributed switch architecture
 				   * interconnect port.
 				   */
+	DEVLINK_PORT_FLAVOUR_PCI_PF, /* Represents eswitch port for
+				      * the PCI PF. It is an internal
+				      * port that faces the PCI PF.
+				      */
 };
 
 enum devlink_param_cmode {
@@ -332,6 +336,7 @@ enum devlink_attr {
 	DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME,	/* string */
 	DEVLINK_ATTR_FLASH_UPDATE_COMPONENT,	/* string */
 
+	DEVLINK_ATTR_PORT_PCI_PF_NUMBER,	/* u16 */
 	/* add new attributes above here, update the policy in devlink.c */
 
 	__DEVLINK_ATTR_MAX,
* Unmerged path net/core/devlink.c
