ASoC: soc-core: remove legacy style of aux_dev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-core: remove legacy style of aux_dev (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 93.88%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit a48b561d873d1d9fda55782d275eff94ec647863
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a48b561d.failed

Now all drivers are using snd_soc_dai_link_component for aux_dev.
Let's remove legacy style

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87h86s6w8x.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit a48b561d873d1d9fda55782d275eff94ec647863)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/soc.h
#	sound/soc/soc-core.c
diff --cc include/sound/soc.h
index 8387b011d9c9,2fc56e5963f3..000000000000
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@@ -1154,8 -967,7 +1152,12 @@@ struct snd_soc_aux_dev 
  	 * specify multi-codec either by device name, or by
  	 * DT/OF node, but not both.
  	 */
++<<<<<<< HEAD
 +	const char *codec_name;
 +	struct device_node *codec_of_node;
++=======
+ 	struct snd_soc_dai_link_component dlc;
++>>>>>>> a48b561d873d (ASoC: soc-core: remove legacy style of aux_dev)
  
  	/* codec/machine specific init - e.g. add machine controls */
  	int (*init)(struct snd_soc_component *component);
diff --cc sound/soc/soc-core.c
index c0c23b90247e,4af382d52675..000000000000
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@@ -1645,67 -1509,41 +1645,74 @@@ static int soc_probe_link_dais(struct s
  			num = rtd->dai_link->id;
  	}
  
 -	/* create compress_device if possible */
 -	ret = snd_soc_dai_compress_new(cpu_dai, rtd, num);
 -	if (ret != -ENOTSUPP) {
 -		if (ret < 0)
 +	if (cpu_dai->driver->compress_new) {
 +		/* create compress_device" */
 +		ret = cpu_dai->driver->compress_new(rtd, num);
 +		if (ret < 0) {
  			dev_err(card->dev, "ASoC: can't create compress %s\n",
  					 dai_link->stream_name);
 -		return ret;
 +			return ret;
 +		}
 +	} else if (!dai_link->params) {
 +		/* create the pcm */
 +		ret = soc_new_pcm(rtd, num);
 +		if (ret < 0) {
 +			dev_err(card->dev, "ASoC: can't create pcm %s :%d\n",
 +				dai_link->stream_name, ret);
 +			return ret;
 +		}
 +		ret = soc_link_dai_pcm_new(&cpu_dai, 1, rtd);
 +		if (ret < 0)
 +			return ret;
 +		ret = soc_link_dai_pcm_new(rtd->codec_dais,
 +					   rtd->num_codecs, rtd);
 +		if (ret < 0)
 +			return ret;
 +	} else {
 +		INIT_DELAYED_WORK(&rtd->delayed_work,
 +				  codec2codec_close_delayed_work);
  	}
  
 -	/* create the pcm */
 -	ret = soc_new_pcm(rtd, num);
 -	if (ret < 0) {
 -		dev_err(card->dev, "ASoC: can't create pcm %s :%d\n",
 -			dai_link->stream_name, ret);
 -		return ret;
 -	}
 -	ret = soc_link_dai_pcm_new(&cpu_dai, 1, rtd);
 -	if (ret < 0)
 -		return ret;
 -	ret = soc_link_dai_pcm_new(rtd->codec_dais,
 -				   rtd->num_codecs, rtd);
 -	return ret;
 +	return 0;
  }
  
 -static int soc_bind_aux_dev(struct snd_soc_card *card, int num)
 +static int soc_bind_aux_dev(struct snd_soc_card *card,
 +			    struct snd_soc_aux_dev *aux_dev)
  {
 -	struct snd_soc_aux_dev *aux_dev = &card->aux_dev[num];
  	struct snd_soc_component *component;
 -
 +	const char *name;
 +	struct device_node *codec_of_node;
 +
++<<<<<<< HEAD
 +	if (aux_dev->codec_of_node || aux_dev->codec_name) {
 +		/* codecs, usually analog devices */
 +		name = aux_dev->codec_name;
 +		codec_of_node = aux_dev->codec_of_node;
 +		component = soc_find_component(codec_of_node, name);
 +		if (!component) {
 +			if (codec_of_node)
 +				name = of_node_full_name(codec_of_node);
 +			goto err_defer;
 +		}
 +	} else if (aux_dev->name) {
 +		/* generic components */
 +		name = aux_dev->name;
 +		component = soc_find_component(NULL, name);
 +		if (!component)
 +			goto err_defer;
 +	} else {
 +		dev_err(card->dev, "ASoC: Invalid auxiliary device\n");
 +		return -EINVAL;
 +	}
++=======
+ 	/* codecs, usually analog devices */
+ 	component = soc_find_component(&aux_dev->dlc);
+ 	if (!component)
+ 		return -EPROBE_DEFER;
++>>>>>>> a48b561d873d (ASoC: soc-core: remove legacy style of aux_dev)
  
  	component->init = aux_dev->init;
 +	/* see for_each_card_auxs */
  	list_add(&component->card_aux_list, &card->aux_comp_list);
  
  	return 0;
* Unmerged path include/sound/soc.h
* Unmerged path sound/soc/soc-core.c
