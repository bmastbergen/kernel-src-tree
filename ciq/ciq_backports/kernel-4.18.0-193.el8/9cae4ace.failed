selftests/bpf: do not ignore clang failures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ilya Leoshkevich <iii@linux.ibm.com>
commit 9cae4ace80ef39005da106fbb89c952b27d7b89e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9cae4ace.failed

When compiling an eBPF prog fails, make still returns 0, because
failing clang command's output is piped to llc and therefore its
exit status is ignored.

When clang fails, pipe the string "clang failed" to llc. This will make
llc fail with an informative error message. This solution was chosen
over using pipefail, having separate targets or getting rid of llc
invocation due to its simplicity.

In addition, pull Kbuild.include in order to get .DELETE_ON_ERROR target,
which would cause partial .o files to be removed.

	Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 9cae4ace80ef39005da106fbb89c952b27d7b89e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/Makefile
diff --cc tools/testing/selftests/bpf/Makefile
index 9bfa8b025d92,8312db1ae7c2..000000000000
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@@ -154,19 -172,53 +155,67 @@@ endi
  endif
  endif
  
++<<<<<<< HEAD
 +# Have one program compiled without "-target bpf" to test whether libbpf loads
 +# it successfully
 +$(OUTPUT)/test_xdp.o: test_xdp.c
 +	$(CLANG) $(CLANG_FLAGS) \
 +		-O2 -emit-llvm -c $< -o - | \
++=======
+ TEST_PROGS_CFLAGS := -I. -I$(OUTPUT)
+ TEST_VERIFIER_CFLAGS := -I. -I$(OUTPUT) -Iverifier
+ 
+ ifneq ($(SUBREG_CODEGEN),)
+ ALU32_BUILD_DIR = $(OUTPUT)/alu32
+ TEST_CUSTOM_PROGS += $(ALU32_BUILD_DIR)/test_progs_32
+ $(ALU32_BUILD_DIR):
+ 	mkdir -p $@
+ 
+ $(ALU32_BUILD_DIR)/urandom_read: $(OUTPUT)/urandom_read
+ 	cp $< $@
+ 
+ $(ALU32_BUILD_DIR)/test_progs_32: test_progs.c $(OUTPUT)/libbpf.a\
+ 						$(ALU32_BUILD_DIR) \
+ 						$(ALU32_BUILD_DIR)/urandom_read
+ 	$(CC) $(TEST_PROGS_CFLAGS) $(CFLAGS) \
+ 		-o $(ALU32_BUILD_DIR)/test_progs_32 \
+ 		test_progs.c test_stub.c trace_helpers.c prog_tests/*.c \
+ 		$(OUTPUT)/libbpf.a $(LDLIBS)
+ 
+ $(ALU32_BUILD_DIR)/test_progs_32: $(PROG_TESTS_H)
+ $(ALU32_BUILD_DIR)/test_progs_32: prog_tests/*.c
+ 
+ $(ALU32_BUILD_DIR)/%.o: progs/%.c $(ALU32_BUILD_DIR) \
+ 					$(ALU32_BUILD_DIR)/test_progs_32
+ 	($(CLANG) $(CLANG_FLAGS) -O2 -target bpf -emit-llvm -c $< -o - || \
+ 		echo "clang failed") | \
+ 	$(LLC) -march=bpf -mattr=+alu32 -mcpu=$(CPU) $(LLC_FLAGS) \
+ 		-filetype=obj -o $@
+ ifeq ($(DWARF2BTF),y)
+ 	$(BTF_PAHOLE) -J $@
+ endif
+ endif
+ 
+ # Have one program compiled without "-target bpf" to test whether libbpf loads
+ # it successfully
+ $(OUTPUT)/test_xdp.o: progs/test_xdp.c
+ 	($(CLANG) $(CLANG_FLAGS) -O2 -emit-llvm -c $< -o - || \
+ 		echo "clang failed") | \
++>>>>>>> 9cae4ace80ef (selftests/bpf: do not ignore clang failures)
  	$(LLC) -march=bpf -mcpu=$(CPU) $(LLC_FLAGS) -filetype=obj -o $@
  ifeq ($(DWARF2BTF),y)
  	$(BTF_PAHOLE) -J $@
  endif
  
++<<<<<<< HEAD
 +$(OUTPUT)/%.o: %.c
 +	$(CLANG) $(CLANG_FLAGS) \
 +		 -O2 -target bpf -emit-llvm -c $< -o - |      \
++=======
+ $(OUTPUT)/%.o: progs/%.c
+ 	($(CLANG) $(CLANG_FLAGS) -O2 -target bpf -emit-llvm -c $< -o - || \
+ 		echo "clang failed") | \
++>>>>>>> 9cae4ace80ef (selftests/bpf: do not ignore clang failures)
  	$(LLC) -march=bpf -mcpu=$(CPU) $(LLC_FLAGS) -filetype=obj -o $@
  ifeq ($(DWARF2BTF),y)
  	$(BTF_PAHOLE) -J $@
* Unmerged path tools/testing/selftests/bpf/Makefile
