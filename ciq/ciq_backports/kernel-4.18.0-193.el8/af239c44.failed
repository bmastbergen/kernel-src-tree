x86/intel: Aggregate big core mobile naming

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit af239c44e3f976762e9bc052f0d5796b90ea530b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/af239c44.failed

Currently big core mobile chips have either:

 - _L
 - _ULT
 - _MOBILE

Make it uniformly: _L.

for i in `git grep -l "\(INTEL_FAM6_\|VULNWL_INTEL\|INTEL_CPU_FAM6\).*_\(MOBILE\|ULT\)"`
do
	sed -i -e 's/\(\(INTEL_FAM6_\|VULNWL_INTEL\|INTEL_CPU_FAM6\).*\)_\(MOBILE\|ULT\)/\1_L/g' ${i}
done

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Cc: x86@kernel.org
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20190827195122.568978530@infradead.org
(cherry picked from commit af239c44e3f976762e9bc052f0d5796b90ea530b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/core.c
#	arch/x86/events/intel/cstate.c
#	arch/x86/events/intel/rapl.c
#	arch/x86/events/intel/uncore.c
#	arch/x86/events/msr.c
#	arch/x86/include/asm/intel-family.h
#	arch/x86/kernel/apic/apic.c
#	arch/x86/kernel/cpu/bugs.c
#	arch/x86/kernel/cpu/intel.c
#	drivers/acpi/x86/utils.c
#	drivers/idle/intel_idle.c
#	drivers/platform/x86/intel_pmc_core.c
#	drivers/platform/x86/intel_pmc_core_pltdrv.c
#	drivers/powercap/intel_rapl.c
#	tools/power/x86/turbostat/turbostat.c
diff --cc arch/x86/events/intel/core.c
index 1e5c1e574c8f,22ef9ccaf45c..000000000000
--- a/arch/x86/events/intel/core.c
+++ b/arch/x86/events/intel/core.c
@@@ -3826,23 -3963,57 +3826,56 @@@ static __init void intel_clovertown_qui
  	x86_pmu.pebs_constraints = NULL;
  }
  
++<<<<<<< HEAD
 +static int intel_snb_pebs_broken(int cpu)
++=======
+ static const struct x86_cpu_desc isolation_ucodes[] = {
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL,		 3, 0x0000001f),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_L,		 1, 0x0000001e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_GT3E,		 1, 0x00000015),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_X,		 2, 0x00000037),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_X,		 4, 0x0000000a),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL,		 4, 0x00000023),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_GT3E,	 1, 0x00000014),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_XEON_D,	 2, 0x00000010),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_XEON_D,	 3, 0x07000009),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_XEON_D,	 4, 0x0f000009),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_XEON_D,	 5, 0x0e000002),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_X,		 2, 0x0b000014),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE_X,		 3, 0x00000021),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE_X,		 4, 0x00000000),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE_L,		 3, 0x0000007c),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE,		 3, 0x0000007c),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		 9, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		 9, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		10, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		11, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		12, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		10, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		11, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		12, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		13, 0x0000004e),
+ 	{}
+ };
+ 
+ static void intel_check_pebs_isolation(void)
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  {
 -	x86_pmu.pebs_no_isolation = !x86_cpu_has_min_microcode_rev(isolation_ucodes);
 -}
 +	u32 rev = UINT_MAX; /* default to broken for unknown models */
  
 -static __init void intel_pebs_isolation_quirk(void)
 -{
 -	WARN_ON_ONCE(x86_pmu.check_microcode);
 -	x86_pmu.check_microcode = intel_check_pebs_isolation;
 -	intel_check_pebs_isolation();
 -}
 +	switch (cpu_data(cpu).x86_model) {
 +	case INTEL_FAM6_SANDYBRIDGE:
 +		rev = 0x28;
 +		break;
  
 -static const struct x86_cpu_desc pebs_ucodes[] = {
 -	INTEL_CPU_DESC(INTEL_FAM6_SANDYBRIDGE,		7, 0x00000028),
 -	INTEL_CPU_DESC(INTEL_FAM6_SANDYBRIDGE_X,	6, 0x00000618),
 -	INTEL_CPU_DESC(INTEL_FAM6_SANDYBRIDGE_X,	7, 0x0000070c),
 -	{}
 -};
 +	case INTEL_FAM6_SANDYBRIDGE_X:
 +		switch (cpu_data(cpu).x86_stepping) {
 +		case 6: rev = 0x618; break;
 +		case 7: rev = 0x70c; break;
 +		}
 +	}
  
 -static bool intel_snb_pebs_broken(void)
 -{
 -	return !x86_cpu_has_min_microcode_rev(pebs_ucodes);
 +	return (cpu_data(cpu).microcode < rev);
  }
  
  static void intel_snb_check_microcode(void)
@@@ -4516,11 -4857,12 +4549,11 @@@ __init int intel_pmu_init(void
  		break;
  
  
 -	case INTEL_FAM6_HASWELL:
 +	case INTEL_FAM6_HASWELL_CORE:
  	case INTEL_FAM6_HASWELL_X:
- 	case INTEL_FAM6_HASWELL_ULT:
+ 	case INTEL_FAM6_HASWELL_L:
  	case INTEL_FAM6_HASWELL_GT3E:
  		x86_add_quirk(intel_ht_bug);
 -		x86_add_quirk(intel_pebs_isolation_quirk);
  		x86_pmu.late_ack = true;
  		memcpy(hw_cache_event_ids, hsw_hw_cache_event_ids, sizeof(hw_cache_event_ids));
  		memcpy(hw_cache_extra_regs, hsw_hw_cache_extra_regs, sizeof(hw_cache_extra_regs));
@@@ -4609,11 -4952,14 +4642,22 @@@
  		name = "knights-landing";
  		break;
  
++<<<<<<< HEAD
 +	case INTEL_FAM6_SKYLAKE_MOBILE:
 +	case INTEL_FAM6_SKYLAKE_DESKTOP:
 +	case INTEL_FAM6_SKYLAKE_X:
 +	case INTEL_FAM6_KABYLAKE_MOBILE:
 +	case INTEL_FAM6_KABYLAKE_DESKTOP:
++=======
+ 	case INTEL_FAM6_SKYLAKE_X:
+ 		pmem = true;
+ 		/* fall through */
+ 	case INTEL_FAM6_SKYLAKE_L:
+ 	case INTEL_FAM6_SKYLAKE:
+ 	case INTEL_FAM6_KABYLAKE_L:
+ 	case INTEL_FAM6_KABYLAKE:
+ 		x86_add_quirk(intel_pebs_isolation_quirk);
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  		x86_pmu.late_ack = true;
  		memcpy(hw_cache_event_ids, skl_hw_cache_event_ids, sizeof(hw_cache_event_ids));
  		memcpy(hw_cache_extra_regs, skl_hw_cache_extra_regs, sizeof(hw_cache_extra_regs));
@@@ -4658,6 -5001,40 +4702,43 @@@
  		name = "skylake";
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case INTEL_FAM6_ICELAKE_X:
+ 	case INTEL_FAM6_ICELAKE_XEON_D:
+ 		pmem = true;
+ 		/* fall through */
+ 	case INTEL_FAM6_ICELAKE_L:
+ 	case INTEL_FAM6_ICELAKE:
+ 		x86_pmu.late_ack = true;
+ 		memcpy(hw_cache_event_ids, skl_hw_cache_event_ids, sizeof(hw_cache_event_ids));
+ 		memcpy(hw_cache_extra_regs, skl_hw_cache_extra_regs, sizeof(hw_cache_extra_regs));
+ 		hw_cache_event_ids[C(ITLB)][C(OP_READ)][C(RESULT_ACCESS)] = -1;
+ 		intel_pmu_lbr_init_skl();
+ 
+ 		x86_pmu.event_constraints = intel_icl_event_constraints;
+ 		x86_pmu.pebs_constraints = intel_icl_pebs_event_constraints;
+ 		x86_pmu.extra_regs = intel_icl_extra_regs;
+ 		x86_pmu.pebs_aliases = NULL;
+ 		x86_pmu.pebs_prec_dist = true;
+ 		x86_pmu.flags |= PMU_FL_HAS_RSP_1;
+ 		x86_pmu.flags |= PMU_FL_NO_HT_SHARING;
+ 
+ 		x86_pmu.hw_config = hsw_hw_config;
+ 		x86_pmu.get_event_constraints = icl_get_event_constraints;
+ 		extra_attr = boot_cpu_has(X86_FEATURE_RTM) ?
+ 			hsw_format_attr : nhm_format_attr;
+ 		extra_skl_attr = skl_format_attr;
+ 		mem_attr = icl_events_attrs;
+ 		tsx_attr = icl_tsx_events_attrs;
+ 		x86_pmu.rtm_abort_event = X86_CONFIG(.event=0xca, .umask=0x02);
+ 		x86_pmu.lbr_pt_coexist = true;
+ 		intel_pmu_pebs_data_source_skl(pmem);
+ 		pr_cont("Icelake events, ");
+ 		name = "icelake";
+ 		break;
+ 
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	default:
  		switch (x86_pmu.version) {
  		case 1:
diff --cc arch/x86/events/intel/cstate.c
index 010caa7b475f,9b014e813626..000000000000
--- a/arch/x86/events/intel/cstate.c
+++ b/arch/x86/events/intel/cstate.c
@@@ -557,25 -597,25 +557,34 @@@ static const struct x86_cpu_id intel_cs
  	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_X,	   snb_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_GT3E, snb_cstates),
  
- 	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_ULT, hswult_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_L, hswult_cstates),
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT,   slm_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT, slm_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT_X, slm_cstates),
 -	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_AIRMONT,      slm_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_AIRMONT,     slm_cstates),
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL,        snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_CORE,   snb_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_XEON_D, snb_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_GT3E,   snb_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_X,      snb_cstates),
  
++<<<<<<< HEAD
 +	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_MOBILE,  snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_DESKTOP, snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_X, snb_cstates),
 +
 +	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE_MOBILE,  snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE_DESKTOP, snb_cstates),
++=======
+ 	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_L, snb_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE,   snb_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_X, snb_cstates),
+ 
+ 	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE_L, hswult_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE,   hswult_cstates),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  
- 	X86_CSTATES_MODEL(INTEL_FAM6_CANNONLAKE_MOBILE, cnl_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_CANNONLAKE_L, cnl_cstates),
  
  	X86_CSTATES_MODEL(INTEL_FAM6_XEON_PHI_KNL, knl_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_XEON_PHI_KNM, knl_cstates),
@@@ -584,6 -624,9 +593,12 @@@
  	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT_X, glm_cstates),
  
  	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT_PLUS, glm_cstates),
++<<<<<<< HEAD
++=======
+ 
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ICELAKE_L, snb_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ICELAKE,   snb_cstates),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	{ },
  };
  MODULE_DEVICE_TABLE(x86cpu, intel_cstates_match);
diff --cc arch/x86/events/intel/rapl.c
index 64447338b784,70dcfe9312b0..000000000000
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@@ -705,81 -671,76 +705,110 @@@ static int __init init_rapl_pmus(void
  #define X86_RAPL_MODEL_MATCH(model, init)	\
  	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (unsigned long)&init }
  
 -static struct rapl_model model_snb = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_PP1),
 -	.apply_quirk	= false,
 +struct intel_rapl_init_fun {
 +	bool apply_quirk;
 +	int cntr_mask;
 +	struct attribute **attrs;
  };
  
 -static struct rapl_model model_snbep = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM),
 -	.apply_quirk	= false,
 +static const struct intel_rapl_init_fun snb_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_CLN,
 +	.attrs = rapl_events_cln_attr,
  };
  
 -static struct rapl_model model_hsw = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM) |
 -			  BIT(PERF_RAPL_PP1),
 -	.apply_quirk	= false,
 +static const struct intel_rapl_init_fun hsx_rapl_init __initconst = {
 +	.apply_quirk = true,
 +	.cntr_mask = RAPL_IDX_SRV,
 +	.attrs = rapl_events_srv_attr,
  };
  
 -static struct rapl_model model_hsx = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM),
 -	.apply_quirk	= true,
 +static const struct intel_rapl_init_fun hsw_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_HSW,
 +	.attrs = rapl_events_hsw_attr,
  };
  
 -static struct rapl_model model_knl = {
 -	.events		= BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM),
 -	.apply_quirk	= true,
 +static const struct intel_rapl_init_fun snbep_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_SRV,
 +	.attrs = rapl_events_srv_attr,
  };
  
 -static struct rapl_model model_skl = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM) |
 -			  BIT(PERF_RAPL_PP1) |
 -			  BIT(PERF_RAPL_PSYS),
 -	.apply_quirk	= false,
 +static const struct intel_rapl_init_fun knl_rapl_init __initconst = {
 +	.apply_quirk = true,
 +	.cntr_mask = RAPL_IDX_KNL,
 +	.attrs = rapl_events_knl_attr,
  };
  
++<<<<<<< HEAD
 +static const struct intel_rapl_init_fun skl_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_SKL_CLN,
 +	.attrs = rapl_events_skl_attr,
 +};
 +
 +static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,   snb_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X, snbep_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,   snb_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X, snbep_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_CORE, hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_X,    hsx_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_ULT,  hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_GT3E, hsw_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_CORE,   hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_GT3E,   hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,	  hsx_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D, hsx_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL, knl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM, knl_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_MOBILE,  skl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_DESKTOP, skl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,	 hsx_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_MOBILE,  skl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_DESKTOP, skl_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_CANNONLAKE_MOBILE,  skl_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT, hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_X, hsw_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_PLUS, hsw_rapl_init),
++=======
+ static const struct x86_cpu_id rapl_model_match[] __initconst = {
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,		model_snb),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X,		model_snbep),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,		model_snb),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X,		model_snbep),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_X,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_L,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_GT3E,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_GT3E,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D,	model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL,		model_knl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM,		model_knl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_CANNONLAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_X,	model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_PLUS,	model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ICELAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ICELAKE,		model_skl),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	{},
  };
  
diff --cc arch/x86/events/intel/uncore.c
index 2dd9bdb6c7be,8428e28c9625..000000000000
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@@ -1382,10 -1451,10 +1382,15 @@@ static const struct x86_cpu_id intel_un
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_WESTMERE_EP,	  nhm_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,	  snb_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,	  ivb_uncore_init),
++<<<<<<< HEAD
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_CORE,	  hsw_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_ULT,	  hsw_uncore_init),
++=======
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL,	  hsw_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_L,	  hsw_uncore_init),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_GT3E,	  hsw_uncore_init),
 -	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL,	  bdw_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_CORE, bdw_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_GT3E, bdw_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X,  snbep_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_NEHALEM_EX,	  nhmex_uncore_init),
@@@ -1396,11 -1465,15 +1401,23 @@@
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D, bdx_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL,	  knl_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM,	  knl_uncore_init),
++<<<<<<< HEAD
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_DESKTOP,skl_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_MOBILE, skl_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,      skx_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE_MOBILE, skl_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE_DESKTOP, skl_uncore_init),
++=======
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE,	  skl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_L,	  skl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,      skx_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE_L,	  skl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE,	  skl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ICELAKE_L,	  icl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ICELAKE_NNPI,	  icl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ICELAKE,	  icl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ATOM_TREMONT_X, snr_uncore_init),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	{},
  };
  
diff --cc arch/x86/events/msr.c
index 1b9f85abf9bc,12265c14e60d..000000000000
--- a/arch/x86/events/msr.c
+++ b/arch/x86/events/msr.c
@@@ -59,12 -59,12 +59,12 @@@ static bool test_intel(int idx
  	case INTEL_FAM6_IVYBRIDGE:
  	case INTEL_FAM6_IVYBRIDGE_X:
  
 -	case INTEL_FAM6_HASWELL:
 +	case INTEL_FAM6_HASWELL_CORE:
  	case INTEL_FAM6_HASWELL_X:
- 	case INTEL_FAM6_HASWELL_ULT:
+ 	case INTEL_FAM6_HASWELL_L:
  	case INTEL_FAM6_HASWELL_GT3E:
  
 -	case INTEL_FAM6_BROADWELL:
 +	case INTEL_FAM6_BROADWELL_CORE:
  	case INTEL_FAM6_BROADWELL_XEON_D:
  	case INTEL_FAM6_BROADWELL_GT3E:
  	case INTEL_FAM6_BROADWELL_X:
@@@ -84,11 -84,12 +84,20 @@@
  			return true;
  		break;
  
++<<<<<<< HEAD
 +	case INTEL_FAM6_SKYLAKE_MOBILE:
 +	case INTEL_FAM6_SKYLAKE_DESKTOP:
 +	case INTEL_FAM6_SKYLAKE_X:
 +	case INTEL_FAM6_KABYLAKE_MOBILE:
 +	case INTEL_FAM6_KABYLAKE_DESKTOP:
++=======
+ 	case INTEL_FAM6_SKYLAKE_L:
+ 	case INTEL_FAM6_SKYLAKE:
+ 	case INTEL_FAM6_SKYLAKE_X:
+ 	case INTEL_FAM6_KABYLAKE_L:
+ 	case INTEL_FAM6_KABYLAKE:
+ 	case INTEL_FAM6_ICELAKE_L:
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  		if (idx == PERF_MSR_SMI || idx == PERF_MSR_PPERF)
  			return true;
  		break;
diff --cc arch/x86/include/asm/intel-family.h
index f60ddd655c78,25b71d4e9224..000000000000
--- a/arch/x86/include/asm/intel-family.h
+++ b/arch/x86/include/asm/intel-family.h
@@@ -34,28 -49,28 +34,41 @@@
  #define INTEL_FAM6_IVYBRIDGE		0x3A
  #define INTEL_FAM6_IVYBRIDGE_X		0x3E
  
 -#define INTEL_FAM6_HASWELL		0x3C
 +#define INTEL_FAM6_HASWELL_CORE		0x3C
  #define INTEL_FAM6_HASWELL_X		0x3F
- #define INTEL_FAM6_HASWELL_ULT		0x45
+ #define INTEL_FAM6_HASWELL_L		0x45
  #define INTEL_FAM6_HASWELL_GT3E		0x46
  
 -#define INTEL_FAM6_BROADWELL		0x3D
 +#define INTEL_FAM6_BROADWELL_CORE	0x3D
  #define INTEL_FAM6_BROADWELL_GT3E	0x47
  #define INTEL_FAM6_BROADWELL_X		0x4F
  #define INTEL_FAM6_BROADWELL_XEON_D	0x56
  
++<<<<<<< HEAD
 +#define INTEL_FAM6_SKYLAKE_MOBILE	0x4E
 +#define INTEL_FAM6_SKYLAKE_DESKTOP	0x5E
 +#define INTEL_FAM6_SKYLAKE_X		0x55
 +#define INTEL_FAM6_KABYLAKE_MOBILE	0x8E
 +#define INTEL_FAM6_KABYLAKE_DESKTOP	0x9E
++=======
+ #define INTEL_FAM6_SKYLAKE_L		0x4E
+ #define INTEL_FAM6_SKYLAKE		0x5E
+ #define INTEL_FAM6_SKYLAKE_X		0x55
+ #define INTEL_FAM6_KABYLAKE_L		0x8E
+ #define INTEL_FAM6_KABYLAKE		0x9E
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  
- #define INTEL_FAM6_CANNONLAKE_MOBILE	0x66
+ #define INTEL_FAM6_CANNONLAKE_L		0x66
  
  #define INTEL_FAM6_ICELAKE_X		0x6A
  #define INTEL_FAM6_ICELAKE_XEON_D	0x6C
++<<<<<<< HEAD
 +#define INTEL_FAM6_ICELAKE_DESKTOP	0x7D
 +#define INTEL_FAM6_ICELAKE_MOBILE	0x7E
++=======
+ #define INTEL_FAM6_ICELAKE		0x7D
+ #define INTEL_FAM6_ICELAKE_L		0x7E
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  #define INTEL_FAM6_ICELAKE_NNPI		0x9D
  
  /* "Small Core" Processors (Atom) */
diff --cc arch/x86/kernel/apic/apic.c
index 4c9f99e94d52,adf001d30b47..000000000000
--- a/arch/x86/kernel/apic/apic.c
+++ b/arch/x86/kernel/apic/apic.c
@@@ -586,18 -593,18 +586,31 @@@ static const struct x86_cpu_id deadline
  	DEADLINE_MODEL_MATCH_FUNC( INTEL_FAM6_BROADWELL_XEON_D,	bdx_deadline_rev),
  	DEADLINE_MODEL_MATCH_FUNC( INTEL_FAM6_SKYLAKE_X,	skx_deadline_rev),
  
++<<<<<<< HEAD
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_HASWELL_CORE,	0x22),
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_HASWELL_ULT,	0x20),
++=======
+ 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_HASWELL,		0x22),
+ 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_HASWELL_L,	0x20),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_HASWELL_GT3E,	0x17),
  
 -	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_BROADWELL,	0x25),
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_BROADWELL_CORE,	0x25),
  	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_BROADWELL_GT3E,	0x17),
  
++<<<<<<< HEAD
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_SKYLAKE_MOBILE,	0xb2),
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_SKYLAKE_DESKTOP,	0xb2),
 +
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_KABYLAKE_MOBILE,	0x52),
 +	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_KABYLAKE_DESKTOP,	0x52),
++=======
+ 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_SKYLAKE_L,	0xb2),
+ 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_SKYLAKE,		0xb2),
+ 
+ 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_KABYLAKE_L,	0x52),
+ 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_KABYLAKE,		0x52),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  
  	{},
  };
diff --cc arch/x86/kernel/cpu/bugs.c
index 12e99400de09,f435780fe45e..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -1221,15 -1184,15 +1221,27 @@@ static void override_cache_bits(struct 
  	case INTEL_FAM6_WESTMERE:
  	case INTEL_FAM6_SANDYBRIDGE:
  	case INTEL_FAM6_IVYBRIDGE:
++<<<<<<< HEAD
 +	case INTEL_FAM6_HASWELL_CORE:
 +	case INTEL_FAM6_HASWELL_ULT:
++=======
+ 	case INTEL_FAM6_HASWELL:
+ 	case INTEL_FAM6_HASWELL_L:
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	case INTEL_FAM6_HASWELL_GT3E:
 -	case INTEL_FAM6_BROADWELL:
 +	case INTEL_FAM6_BROADWELL_CORE:
  	case INTEL_FAM6_BROADWELL_GT3E:
++<<<<<<< HEAD
 +	case INTEL_FAM6_SKYLAKE_MOBILE:
 +	case INTEL_FAM6_SKYLAKE_DESKTOP:
 +	case INTEL_FAM6_KABYLAKE_MOBILE:
 +	case INTEL_FAM6_KABYLAKE_DESKTOP:
++=======
+ 	case INTEL_FAM6_SKYLAKE_L:
+ 	case INTEL_FAM6_SKYLAKE:
+ 	case INTEL_FAM6_KABYLAKE_L:
+ 	case INTEL_FAM6_KABYLAKE:
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  		if (c->x86_cache_bits < 44)
  			c->x86_cache_bits = 44;
  		break;
diff --cc arch/x86/kernel/cpu/intel.c
index 3f0abb62161b,bafa2735f541..000000000000
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@@ -116,21 -142,21 +116,29 @@@ struct sku_microcode 
  	u32 microcode;
  };
  static const struct sku_microcode spectre_bad_microcodes[] = {
++<<<<<<< HEAD
 +	{ INTEL_FAM6_KABYLAKE_DESKTOP,	0x0B,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_DESKTOP,	0x0A,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_DESKTOP,	0x09,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_MOBILE,	0x0A,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_MOBILE,	0x09,	0x80 },
++=======
+ 	{ INTEL_FAM6_KABYLAKE,		0x0B,	0x80 },
+ 	{ INTEL_FAM6_KABYLAKE,		0x0A,	0x80 },
+ 	{ INTEL_FAM6_KABYLAKE,		0x09,	0x80 },
+ 	{ INTEL_FAM6_KABYLAKE_L,	0x0A,	0x80 },
+ 	{ INTEL_FAM6_KABYLAKE_L,	0x09,	0x80 },
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	{ INTEL_FAM6_SKYLAKE_X,		0x03,	0x0100013e },
  	{ INTEL_FAM6_SKYLAKE_X,		0x04,	0x0200003c },
 -	{ INTEL_FAM6_BROADWELL,		0x04,	0x28 },
 +	{ INTEL_FAM6_BROADWELL_CORE,	0x04,	0x28 },
  	{ INTEL_FAM6_BROADWELL_GT3E,	0x01,	0x1b },
  	{ INTEL_FAM6_BROADWELL_XEON_D,	0x02,	0x14 },
  	{ INTEL_FAM6_BROADWELL_XEON_D,	0x03,	0x07000011 },
  	{ INTEL_FAM6_BROADWELL_X,	0x01,	0x0b000025 },
- 	{ INTEL_FAM6_HASWELL_ULT,	0x01,	0x21 },
+ 	{ INTEL_FAM6_HASWELL_L,		0x01,	0x21 },
  	{ INTEL_FAM6_HASWELL_GT3E,	0x01,	0x18 },
 -	{ INTEL_FAM6_HASWELL,		0x03,	0x23 },
 +	{ INTEL_FAM6_HASWELL_CORE,	0x03,	0x23 },
  	{ INTEL_FAM6_HASWELL_X,		0x02,	0x3b },
  	{ INTEL_FAM6_HASWELL_X,		0x04,	0x10 },
  	{ INTEL_FAM6_IVYBRIDGE_X,	0x04,	0x42a },
diff --cc drivers/acpi/x86/utils.c
index 27a22dc68d66,697a6b12d6b9..000000000000
--- a/drivers/acpi/x86/utils.c
+++ b/drivers/acpi/x86/utils.c
@@@ -62,14 -64,20 +62,22 @@@ static const struct always_present_id a
  	 */
  	ENTRY("INT0002", "1", ICPU(INTEL_FAM6_ATOM_AIRMONT), {}),
  	/*
 -	 * On the Dell Venue 11 Pro 7130 and 7139, the DSDT hides
 -	 * the touchscreen ACPI device until a certain time
 -	 * after _SB.PCI0.GFX0.LCD.LCD1._ON gets called has passed
 -	 * *and* _STA has been called at least 3 times since.
 +	 * On the Dell Venue 11 Pro 7130 the DSDT hides the touchscreen ACPI
 +	 * device until a certain time after _SB.PCI0.GFX0.LCD.LCD1._ON gets
 +	 * called has passed *and* _STA has been called at least 3 times since.
  	 */
- 	ENTRY("SYNA7500", "1", ICPU(INTEL_FAM6_HASWELL_ULT), {
+ 	ENTRY("SYNA7500", "1", ICPU(INTEL_FAM6_HASWELL_L), {
  		DMI_MATCH(DMI_SYS_VENDOR, "Dell Inc."),
  		DMI_MATCH(DMI_PRODUCT_NAME, "Venue 11 Pro 7130"),
  	      }),
++<<<<<<< HEAD
++=======
+ 	ENTRY("SYNA7500", "1", ICPU(INTEL_FAM6_HASWELL_L), {
+ 		DMI_MATCH(DMI_SYS_VENDOR, "Dell Inc."),
+ 		DMI_MATCH(DMI_PRODUCT_NAME, "Venue 11 Pro 7139"),
+ 	      }),
+ 
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	/*
  	 * The GPD win BIOS dated 20170221 has disabled the accelerometer, the
  	 * drivers sometimes cause crashes under Windows and this is how the
diff --cc drivers/idle/intel_idle.c
index 8b5d85c91e9d,d0e4f16b8f06..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -1084,19 -1072,19 +1084,26 @@@ static const struct x86_cpu_id intel_id
  	INTEL_CPU_FAM6(ATOM_AIRMONT,		idle_cpu_cht),
  	INTEL_CPU_FAM6(IVYBRIDGE,		idle_cpu_ivb),
  	INTEL_CPU_FAM6(IVYBRIDGE_X,		idle_cpu_ivt),
 -	INTEL_CPU_FAM6(HASWELL,			idle_cpu_hsw),
 +	INTEL_CPU_FAM6(HASWELL_CORE,		idle_cpu_hsw),
  	INTEL_CPU_FAM6(HASWELL_X,		idle_cpu_hsw),
- 	INTEL_CPU_FAM6(HASWELL_ULT,		idle_cpu_hsw),
+ 	INTEL_CPU_FAM6(HASWELL_L,		idle_cpu_hsw),
  	INTEL_CPU_FAM6(HASWELL_GT3E,		idle_cpu_hsw),
  	INTEL_CPU_FAM6(ATOM_SILVERMONT_X,	idle_cpu_avn),
 -	INTEL_CPU_FAM6(BROADWELL,		idle_cpu_bdw),
 +	INTEL_CPU_FAM6(BROADWELL_CORE,		idle_cpu_bdw),
  	INTEL_CPU_FAM6(BROADWELL_GT3E,		idle_cpu_bdw),
  	INTEL_CPU_FAM6(BROADWELL_X,		idle_cpu_bdw),
  	INTEL_CPU_FAM6(BROADWELL_XEON_D,	idle_cpu_bdw),
++<<<<<<< HEAD
 +	INTEL_CPU_FAM6(SKYLAKE_MOBILE,		idle_cpu_skl),
 +	INTEL_CPU_FAM6(SKYLAKE_DESKTOP,		idle_cpu_skl),
 +	INTEL_CPU_FAM6(KABYLAKE_MOBILE,		idle_cpu_skl),
 +	INTEL_CPU_FAM6(KABYLAKE_DESKTOP,	idle_cpu_skl),
++=======
+ 	INTEL_CPU_FAM6(SKYLAKE_L,		idle_cpu_skl),
+ 	INTEL_CPU_FAM6(SKYLAKE,			idle_cpu_skl),
+ 	INTEL_CPU_FAM6(KABYLAKE_L,		idle_cpu_skl),
+ 	INTEL_CPU_FAM6(KABYLAKE,		idle_cpu_skl),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	INTEL_CPU_FAM6(SKYLAKE_X,		idle_cpu_skx),
  	INTEL_CPU_FAM6(XEON_PHI_KNL,		idle_cpu_knl),
  	INTEL_CPU_FAM6(XEON_PHI_KNM,		idle_cpu_knl),
diff --cc drivers/platform/x86/intel_pmc_core.c
index f2c621b55f49,fd1bfd5d2689..000000000000
--- a/drivers/platform/x86/intel_pmc_core.c
+++ b/drivers/platform/x86/intel_pmc_core.c
@@@ -807,12 -806,13 +807,22 @@@ static inline void pmc_core_dbgfs_unreg
  #endif /* CONFIG_DEBUG_FS */
  
  static const struct x86_cpu_id intel_pmc_core_ids[] = {
++<<<<<<< HEAD
 +	INTEL_CPU_FAM6(SKYLAKE_MOBILE, spt_reg_map),
 +	INTEL_CPU_FAM6(SKYLAKE_DESKTOP, spt_reg_map),
 +	INTEL_CPU_FAM6(KABYLAKE_MOBILE, spt_reg_map),
 +	INTEL_CPU_FAM6(KABYLAKE_DESKTOP, spt_reg_map),
 +	INTEL_CPU_FAM6(CANNONLAKE_MOBILE, cnp_reg_map),
 +	INTEL_CPU_FAM6(ICELAKE_MOBILE, icl_reg_map),
++=======
+ 	INTEL_CPU_FAM6(SKYLAKE_L, spt_reg_map),
+ 	INTEL_CPU_FAM6(SKYLAKE, spt_reg_map),
+ 	INTEL_CPU_FAM6(KABYLAKE_L, spt_reg_map),
+ 	INTEL_CPU_FAM6(KABYLAKE, spt_reg_map),
+ 	INTEL_CPU_FAM6(CANNONLAKE_L, cnp_reg_map),
+ 	INTEL_CPU_FAM6(ICELAKE_L, icl_reg_map),
+ 	INTEL_CPU_FAM6(ICELAKE_NNPI, icl_reg_map),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	{}
  };
  
diff --cc drivers/powercap/intel_rapl.c
index ad78c1d08260,ac52a6ec4931..000000000000
--- a/drivers/powercap/intel_rapl.c
+++ b/drivers/powercap/intel_rapl.c
@@@ -1139,43 -951,48 +1139,64 @@@ static const struct rapl_defaults rapl_
  };
  
  static const struct x86_cpu_id rapl_ids[] __initconst = {
 -	INTEL_CPU_FAM6(SANDYBRIDGE, rapl_defaults_core),
 -	INTEL_CPU_FAM6(SANDYBRIDGE_X, rapl_defaults_core),
 -
 -	INTEL_CPU_FAM6(IVYBRIDGE, rapl_defaults_core),
 -	INTEL_CPU_FAM6(IVYBRIDGE_X, rapl_defaults_core),
 -
 +	INTEL_CPU_FAM6(SANDYBRIDGE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(SANDYBRIDGE_X,		rapl_defaults_core),
 +
 +	INTEL_CPU_FAM6(IVYBRIDGE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(IVYBRIDGE_X,		rapl_defaults_core),
 +
++<<<<<<< HEAD:drivers/powercap/intel_rapl.c
 +	INTEL_CPU_FAM6(HASWELL_CORE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(HASWELL_ULT,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(HASWELL_GT3E,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(HASWELL_X,		rapl_defaults_hsw_server),
++=======
+ 	INTEL_CPU_FAM6(HASWELL, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(HASWELL_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(HASWELL_GT3E, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(HASWELL_X, rapl_defaults_hsw_server),
 -
 -	INTEL_CPU_FAM6(BROADWELL, rapl_defaults_core),
 -	INTEL_CPU_FAM6(BROADWELL_GT3E, rapl_defaults_core),
 -	INTEL_CPU_FAM6(BROADWELL_XEON_D, rapl_defaults_core),
 -	INTEL_CPU_FAM6(BROADWELL_X, rapl_defaults_hsw_server),
 -
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming):drivers/powercap/intel_rapl_common.c
 +
 +	INTEL_CPU_FAM6(BROADWELL_CORE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(BROADWELL_GT3E,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(BROADWELL_XEON_D,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(BROADWELL_X,		rapl_defaults_hsw_server),
 +
++<<<<<<< HEAD:drivers/powercap/intel_rapl.c
 +	INTEL_CPU_FAM6(SKYLAKE_DESKTOP,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(SKYLAKE_MOBILE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(SKYLAKE_X,		rapl_defaults_hsw_server),
 +	INTEL_CPU_FAM6(KABYLAKE_MOBILE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(KABYLAKE_DESKTOP,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(CANNONLAKE_MOBILE,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(ICELAKE_MOBILE,		rapl_defaults_core),
++=======
+ 	INTEL_CPU_FAM6(SKYLAKE, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(SKYLAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(SKYLAKE_X, rapl_defaults_hsw_server),
+ 	INTEL_CPU_FAM6(KABYLAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(KABYLAKE, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(CANNONLAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE_NNPI, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE_X, rapl_defaults_hsw_server),
+ 	INTEL_CPU_FAM6(ICELAKE_XEON_D, rapl_defaults_hsw_server),
 -
 -	INTEL_CPU_FAM6(ATOM_SILVERMONT, rapl_defaults_byt),
 -	INTEL_CPU_FAM6(ATOM_AIRMONT, rapl_defaults_cht),
 -	INTEL_CPU_FAM6(ATOM_SILVERMONT_MID, rapl_defaults_tng),
 -	INTEL_CPU_FAM6(ATOM_AIRMONT_MID, rapl_defaults_ann),
 -	INTEL_CPU_FAM6(ATOM_GOLDMONT, rapl_defaults_core),
 -	INTEL_CPU_FAM6(ATOM_GOLDMONT_PLUS, rapl_defaults_core),
 -	INTEL_CPU_FAM6(ATOM_GOLDMONT_X, rapl_defaults_core),
 -	INTEL_CPU_FAM6(ATOM_TREMONT_X, rapl_defaults_core),
 -
 -	INTEL_CPU_FAM6(XEON_PHI_KNL, rapl_defaults_hsw_server),
 -	INTEL_CPU_FAM6(XEON_PHI_KNM, rapl_defaults_hsw_server),
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming):drivers/powercap/intel_rapl_common.c
 +
 +	INTEL_CPU_FAM6(ATOM_SILVERMONT,		rapl_defaults_byt),
 +	INTEL_CPU_FAM6(ATOM_AIRMONT,		rapl_defaults_cht),
 +	INTEL_CPU_FAM6(ATOM_SILVERMONT_MID,	rapl_defaults_tng),
 +	INTEL_CPU_FAM6(ATOM_AIRMONT_MID,	rapl_defaults_ann),
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT_PLUS,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT_X,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(ATOM_TREMONT_X,		rapl_defaults_core),
 +
 +	INTEL_CPU_FAM6(XEON_PHI_KNL,		rapl_defaults_hsw_server),
 +	INTEL_CPU_FAM6(XEON_PHI_KNM,		rapl_defaults_hsw_server),
  	{}
  };
 -
  MODULE_DEVICE_TABLE(x86cpu, rapl_ids);
  
  /* Read once for all raw primitive data for domains */
diff --cc tools/power/x86/turbostat/turbostat.c
index 33444b65755d,bb1bef6bf0b9..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -3246,15 -3207,14 +3246,15 @@@ int probe_nhm_msrs(unsigned int family
  		pkg_cstate_limits = snb_pkg_cstate_limits;
  		has_misc_feature_control = 1;
  		break;
 -	case INTEL_FAM6_HASWELL:	/* HSW */
 +	case INTEL_FAM6_HASWELL_CORE:	/* HSW */
  	case INTEL_FAM6_HASWELL_X:	/* HSX */
 +	case INTEL_FAM6_HASWELL_ULT:	/* HSW */
  	case INTEL_FAM6_HASWELL_GT3E:	/* HSW */
 -	case INTEL_FAM6_BROADWELL:	/* BDW */
 +	case INTEL_FAM6_BROADWELL_CORE:	/* BDW */
  	case INTEL_FAM6_BROADWELL_GT3E:	/* BDW */
  	case INTEL_FAM6_BROADWELL_X:	/* BDX */
- 	case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
- 	case INTEL_FAM6_CANNONLAKE_MOBILE:	/* CNL */
+ 	case INTEL_FAM6_SKYLAKE_L:	/* SKL */
+ 	case INTEL_FAM6_CANNONLAKE_L:	/* CNL */
  		pkg_cstate_limits = hsw_pkg_cstate_limits;
  		has_misc_feature_control = 1;
  		break;
@@@ -3443,15 -3403,14 +3443,15 @@@ int has_config_tdp(unsigned int family
  
  	switch (model) {
  	case INTEL_FAM6_IVYBRIDGE:	/* IVB */
 -	case INTEL_FAM6_HASWELL:	/* HSW */
 +	case INTEL_FAM6_HASWELL_CORE:	/* HSW */
  	case INTEL_FAM6_HASWELL_X:	/* HSX */
 +	case INTEL_FAM6_HASWELL_ULT:	/* HSW */
  	case INTEL_FAM6_HASWELL_GT3E:	/* HSW */
 -	case INTEL_FAM6_BROADWELL:	/* BDW */
 +	case INTEL_FAM6_BROADWELL_CORE:	/* BDW */
  	case INTEL_FAM6_BROADWELL_GT3E:	/* BDW */
  	case INTEL_FAM6_BROADWELL_X:	/* BDX */
- 	case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
- 	case INTEL_FAM6_CANNONLAKE_MOBILE:	/* CNL */
+ 	case INTEL_FAM6_SKYLAKE_L:	/* SKL */
+ 	case INTEL_FAM6_CANNONLAKE_L:	/* CNL */
  	case INTEL_FAM6_SKYLAKE_X:	/* SKX */
  
  	case INTEL_FAM6_XEON_PHI_KNL:	/* Knights Landing */
@@@ -4294,15 -4249,14 +4294,15 @@@ int has_snb_msrs(unsigned int family, u
  	case INTEL_FAM6_SANDYBRIDGE_X:
  	case INTEL_FAM6_IVYBRIDGE:	/* IVB */
  	case INTEL_FAM6_IVYBRIDGE_X:	/* IVB Xeon */
 -	case INTEL_FAM6_HASWELL:	/* HSW */
 +	case INTEL_FAM6_HASWELL_CORE:	/* HSW */
  	case INTEL_FAM6_HASWELL_X:	/* HSW */
 +	case INTEL_FAM6_HASWELL_ULT:	/* HSW */
  	case INTEL_FAM6_HASWELL_GT3E:	/* HSW */
 -	case INTEL_FAM6_BROADWELL:	/* BDW */
 +	case INTEL_FAM6_BROADWELL_CORE:	/* BDW */
  	case INTEL_FAM6_BROADWELL_GT3E:	/* BDW */
  	case INTEL_FAM6_BROADWELL_X:	/* BDX */
- 	case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
- 	case INTEL_FAM6_CANNONLAKE_MOBILE:	/* CNL */
+ 	case INTEL_FAM6_SKYLAKE_L:	/* SKL */
+ 	case INTEL_FAM6_CANNONLAKE_L:	/* CNL */
  	case INTEL_FAM6_SKYLAKE_X:	/* SKX */
  	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
  	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
@@@ -4330,10 -4284,10 +4330,17 @@@ int has_c8910_msrs(unsigned int family
  		return 0;
  
  	switch (model) {
++<<<<<<< HEAD
 +	case INTEL_FAM6_HASWELL_ULT:	/* HSW */
 +	case INTEL_FAM6_BROADWELL_CORE:	/* BDW */
 +	case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
 +	case INTEL_FAM6_CANNONLAKE_MOBILE:	/* CNL */
++=======
+ 	case INTEL_FAM6_HASWELL:
+ 	case INTEL_FAM6_BROADWELL:	/* BDW */
+ 	case INTEL_FAM6_SKYLAKE_L:	/* SKL */
+ 	case INTEL_FAM6_CANNONLAKE_L:	/* CNL */
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
  	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
  		return 1;
@@@ -4614,22 -4568,21 +4621,39 @@@ unsigned int intel_model_duplicates(uns
  	case INTEL_FAM6_XEON_PHI_KNM:
  		return INTEL_FAM6_XEON_PHI_KNL;
  
++<<<<<<< HEAD
++=======
+ 	case INTEL_FAM6_HASWELL_L:
+ 		return INTEL_FAM6_HASWELL;
+ 
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	case INTEL_FAM6_BROADWELL_X:
  	case INTEL_FAM6_BROADWELL_XEON_D:	/* BDX-DE */
  		return INTEL_FAM6_BROADWELL_X;
  
++<<<<<<< HEAD
 +	case INTEL_FAM6_SKYLAKE_MOBILE:
 +	case INTEL_FAM6_SKYLAKE_DESKTOP:
 +	case INTEL_FAM6_KABYLAKE_MOBILE:
 +	case INTEL_FAM6_KABYLAKE_DESKTOP:
 +		return INTEL_FAM6_SKYLAKE_MOBILE;
 +
 +	case INTEL_FAM6_ICELAKE_MOBILE:
 +	case INTEL_FAM6_ICELAKE_NNPI:
 +		return INTEL_FAM6_CANNONLAKE_MOBILE;
 +
 +	case INTEL_FAM6_ATOM_TREMONT_X:
 +		return INTEL_FAM6_ATOM_GOLDMONT_X;
++=======
+ 	case INTEL_FAM6_SKYLAKE_L:
+ 	case INTEL_FAM6_SKYLAKE:
+ 	case INTEL_FAM6_KABYLAKE_L:
+ 	case INTEL_FAM6_KABYLAKE:
+ 		return INTEL_FAM6_SKYLAKE_L;
+ 
+ 	case INTEL_FAM6_ICELAKE_L:
+ 		return INTEL_FAM6_CANNONLAKE_L;
++>>>>>>> af239c44e3f9 (x86/intel: Aggregate big core mobile naming)
  	}
  	return model;
  }
* Unmerged path drivers/platform/x86/intel_pmc_core_pltdrv.c
* Unmerged path arch/x86/events/intel/core.c
* Unmerged path arch/x86/events/intel/cstate.c
* Unmerged path arch/x86/events/intel/rapl.c
* Unmerged path arch/x86/events/intel/uncore.c
* Unmerged path arch/x86/events/msr.c
* Unmerged path arch/x86/include/asm/intel-family.h
* Unmerged path arch/x86/kernel/apic/apic.c
* Unmerged path arch/x86/kernel/cpu/bugs.c
* Unmerged path arch/x86/kernel/cpu/intel.c
* Unmerged path drivers/acpi/x86/utils.c
diff --git a/drivers/cpufreq/intel_pstate.c b/drivers/cpufreq/intel_pstate.c
index 9d4adde922e2..dfdfafdc52d7 100644
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@ -1828,11 +1828,11 @@ static const struct x86_cpu_id intel_pstate_cpu_ids[] = {
 	ICPU(INTEL_FAM6_BROADWELL_CORE,		core_funcs),
 	ICPU(INTEL_FAM6_IVYBRIDGE_X,		core_funcs),
 	ICPU(INTEL_FAM6_HASWELL_X,		core_funcs),
-	ICPU(INTEL_FAM6_HASWELL_ULT,		core_funcs),
+	ICPU(INTEL_FAM6_HASWELL_L,		core_funcs),
 	ICPU(INTEL_FAM6_HASWELL_GT3E,		core_funcs),
 	ICPU(INTEL_FAM6_BROADWELL_GT3E,		core_funcs),
 	ICPU(INTEL_FAM6_ATOM_AIRMONT,		airmont_funcs),
-	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		core_funcs),
+	ICPU(INTEL_FAM6_SKYLAKE_L,		core_funcs),
 	ICPU(INTEL_FAM6_BROADWELL_X,		core_funcs),
 	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	core_funcs),
 	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	core_funcs),
* Unmerged path drivers/idle/intel_idle.c
* Unmerged path drivers/platform/x86/intel_pmc_core.c
* Unmerged path drivers/platform/x86/intel_pmc_core_pltdrv.c
* Unmerged path drivers/powercap/intel_rapl.c
* Unmerged path tools/power/x86/turbostat/turbostat.c
