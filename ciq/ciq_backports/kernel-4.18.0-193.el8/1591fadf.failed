drm/mgag200: Add workaround for HW that does not support 'startadd'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Thomas Zimmermann <tzimmermann@suse.de>
commit 1591fadf857cdbaf2baa55e421af99a61354713c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1591fadf.failed

There's at least one system that does not interpret the value of
the device's 'startadd' field correctly, which leads to incorrectly
displayed scanout buffers. Always placing the active scanout buffer
at offset 0 works around the problem.

	Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
	Reported-by: John Donnelly <john.p.donnelly@oracle.com>
	Tested-by: John Donnelly <john.p.donnelly@oracle.com>
	Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Fixes: 81da87f63a1e ("drm: Replace drm_gem_vram_push_to_system() with kunmap + unpin")
	Cc: Gerd Hoffmann <kraxel@redhat.com>
	Cc: Dave Airlie <airlied@redhat.com>
	Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
	Cc: Maxime Ripard <mripard@kernel.org>
	Cc: David Airlie <airlied@linux.ie>
	Cc: Sam Ravnborg <sam@ravnborg.org>
	Cc: "Y.C. Chen" <yc_chen@aspeedtech.com>
	Cc: Neil Armstrong <narmstrong@baylibre.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: "Jos√© Roberto de Souza" <jose.souza@intel.com>
	Cc: Andrzej Pietrasiewicz <andrzej.p@collabora.com>
	Cc: dri-devel@lists.freedesktop.org
	Cc: <stable@vger.kernel.org> # v5.3+
Link: https://gitlab.freedesktop.org/drm/misc/issues/7
Link: https://patchwork.freedesktop.org/patch/msgid/20191126101529.20356-4-tzimmermann@suse.de
(cherry picked from commit 1591fadf857cdbaf2baa55e421af99a61354713c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/mgag200/mgag200_drv.c
#	drivers/gpu/drm/mgag200/mgag200_drv.h
diff --cc drivers/gpu/drm/mgag200/mgag200_drv.c
index ac6af4bd9df6,d43951caeea0..000000000000
--- a/drivers/gpu/drm/mgag200/mgag200_drv.c
+++ b/drivers/gpu/drm/mgag200/mgag200_drv.c
@@@ -57,17 -60,37 +59,46 @@@ static void mga_pci_remove(struct pci_d
  	drm_put_dev(dev);
  }
  
 -DEFINE_DRM_GEM_FOPS(mgag200_driver_fops);
 +static const struct file_operations mgag200_driver_fops = {
 +	.owner = THIS_MODULE,
 +	.open = drm_open,
 +	.release = drm_release,
 +	.unlocked_ioctl = drm_ioctl,
 +	.mmap = mgag200_mmap,
 +	.poll = drm_poll,
 +	.compat_ioctl = drm_compat_ioctl,
 +	.read = drm_read,
 +};
  
+ static bool mgag200_pin_bo_at_0(const struct mga_device *mdev)
+ {
+ 	return mdev->flags & MGAG200_FLAG_HW_BUG_NO_STARTADD;
+ }
+ 
+ int mgag200_driver_dumb_create(struct drm_file *file,
+ 			       struct drm_device *dev,
+ 			       struct drm_mode_create_dumb *args)
+ {
+ 	struct mga_device *mdev = dev->dev_private;
+ 	unsigned long pg_align;
+ 
+ 	if (WARN_ONCE(!dev->vram_mm, "VRAM MM not initialized"))
+ 		return -EINVAL;
+ 
+ 	pg_align = 0ul;
+ 
+ 	/*
+ 	 * Aligning scanout buffers to the size of the video ram forces
+ 	 * placement at offset 0. Works around a bug where HW does not
+ 	 * respect 'startadd' field.
+ 	 */
+ 	if (mgag200_pin_bo_at_0(mdev))
+ 		pg_align = PFN_UP(mdev->mc.vram_size);
+ 
+ 	return drm_gem_vram_fill_create_dumb(file, dev, &dev->vram_mm->bdev,
+ 					     pg_align, false, args);
+ }
+ 
  static struct drm_driver driver = {
  	.driver_features = DRIVER_GEM | DRIVER_MODESET,
  	.load = mgag200_driver_load,
@@@ -79,10 -102,10 +110,17 @@@
  	.major = DRIVER_MAJOR,
  	.minor = DRIVER_MINOR,
  	.patchlevel = DRIVER_PATCHLEVEL,
++<<<<<<< HEAD
 +
 +	.gem_free_object_unlocked = mgag200_gem_free_object,
 +	.dumb_create = mgag200_dumb_create,
 +	.dumb_map_offset = mgag200_dumb_mmap_offset,
++=======
+ 	.debugfs_init = drm_vram_mm_debugfs_init,
+ 	.dumb_create = mgag200_driver_dumb_create,
+ 	.dumb_map_offset = drm_gem_vram_driver_dumb_mmap_offset,
+ 	.gem_prime_mmap = drm_gem_prime_mmap,
++>>>>>>> 1591fadf857c (drm/mgag200: Add workaround for HW that does not support 'startadd')
  };
  
  static struct pci_driver mgag200_pci_driver = {
diff --cc drivers/gpu/drm/mgag200/mgag200_drv.h
index 0aaedc554879,aa32aad222c2..000000000000
--- a/drivers/gpu/drm/mgag200/mgag200_drv.h
+++ b/drivers/gpu/drm/mgag200/mgag200_drv.h
@@@ -185,6 -150,12 +185,15 @@@ enum mga_type 
  	G200_EW3,
  };
  
++<<<<<<< HEAD
++=======
+ /* HW does not handle 'startadd' field correct. */
+ #define MGAG200_FLAG_HW_BUG_NO_STARTADD	(1ul << 8)
+ 
+ #define MGAG200_TYPE_MASK	(0x000000ff)
+ #define MGAG200_FLAG_MASK	(0x00ffff00)
+ 
++>>>>>>> 1591fadf857c (drm/mgag200: Add workaround for HW that does not support 'startadd')
  #define IS_G200_SE(mdev) (mdev->type == G200_SE_A || mdev->type == G200_SE_B)
  
  struct mga_device {
* Unmerged path drivers/gpu/drm/mgag200/mgag200_drv.c
* Unmerged path drivers/gpu/drm/mgag200/mgag200_drv.h
