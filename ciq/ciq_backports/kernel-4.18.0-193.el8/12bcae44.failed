PCI/PM: Use pci_WARN() to include device information

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit 12bcae44bf48595c71898330076576075590e15b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/12bcae44.failed

Add and use pci_WARN() wrappers so warnings include device information.

Link: https://lore.kernel.org/r/20191017212851.54237-3-helgaas@kernel.org
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 12bcae44bf48595c71898330076576075590e15b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-driver.c
#	include/linux/pci.h
diff --cc drivers/pci/pci-driver.c
index e6614ab5ceca,5337cbbd69de..000000000000
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@@ -614,9 -585,9 +614,15 @@@ static int pci_legacy_suspend(struct de
  
  		if (!pci_dev->state_saved && pci_dev->current_state != PCI_D0
  		    && pci_dev->current_state != PCI_UNKNOWN) {
++<<<<<<< HEAD
 +			WARN_ONCE(pci_dev->current_state != prev,
 +				"PCI PM: Device state not saved by %pF\n",
 +				drv->suspend);
++=======
+ 			pci_WARN_ONCE(pci_dev, pci_dev->current_state != prev,
+ 				      "PCI PM: Device state not saved by %pS\n",
+ 				      drv->suspend);
++>>>>>>> 12bcae44bf48 (PCI/PM: Use pci_WARN() to include device information)
  		}
  	}
  
@@@ -641,9 -612,9 +647,15 @@@ static int pci_legacy_suspend_late(stru
  
  		if (!pci_dev->state_saved && pci_dev->current_state != PCI_D0
  		    && pci_dev->current_state != PCI_UNKNOWN) {
++<<<<<<< HEAD
 +			WARN_ONCE(pci_dev->current_state != prev,
 +				"PCI PM: Device state not saved by %pF\n",
 +				drv->suspend_late);
++=======
+ 			pci_WARN_ONCE(pci_dev, pci_dev->current_state != prev,
+ 				      "PCI PM: Device state not saved by %pS\n",
+ 				      drv->suspend_late);
++>>>>>>> 12bcae44bf48 (PCI/PM: Use pci_WARN() to include device information)
  			goto Fixup;
  		}
  	}
@@@ -823,9 -794,9 +835,15 @@@ static int pci_pm_suspend(struct devic
  
  		if (!pci_dev->state_saved && pci_dev->current_state != PCI_D0
  		    && pci_dev->current_state != PCI_UNKNOWN) {
++<<<<<<< HEAD
 +			WARN_ONCE(pci_dev->current_state != prev,
 +				"PCI PM: State of device not saved by %pF\n",
 +				pm->suspend);
++=======
+ 			pci_WARN_ONCE(pci_dev, pci_dev->current_state != prev,
+ 				      "PCI PM: State of device not saved by %pS\n",
+ 				      pm->suspend);
++>>>>>>> 12bcae44bf48 (PCI/PM: Use pci_WARN() to include device information)
  		}
  	}
  
@@@ -871,9 -842,9 +889,15 @@@ static int pci_pm_suspend_noirq(struct 
  
  		if (!pci_dev->state_saved && pci_dev->current_state != PCI_D0
  		    && pci_dev->current_state != PCI_UNKNOWN) {
++<<<<<<< HEAD
 +			WARN_ONCE(pci_dev->current_state != prev,
 +				"PCI PM: State of device not saved by %pF\n",
 +				pm->suspend_noirq);
++=======
+ 			pci_WARN_ONCE(pci_dev, pci_dev->current_state != prev,
+ 				      "PCI PM: State of device not saved by %pS\n",
+ 				      pm->suspend_noirq);
++>>>>>>> 12bcae44bf48 (PCI/PM: Use pci_WARN() to include device information)
  			goto Fixup;
  		}
  	}
@@@ -1320,9 -1311,9 +1344,15 @@@ static int pci_pm_runtime_suspend(struc
  	if (pm && pm->runtime_suspend
  	    && !pci_dev->state_saved && pci_dev->current_state != PCI_D0
  	    && pci_dev->current_state != PCI_UNKNOWN) {
++<<<<<<< HEAD
 +		WARN_ONCE(pci_dev->current_state != prev,
 +			"PCI PM: State of device not saved by %pF\n",
 +			pm->runtime_suspend);
++=======
+ 		pci_WARN_ONCE(pci_dev, pci_dev->current_state != prev,
+ 			      "PCI PM: State of device not saved by %pS\n",
+ 			      pm->runtime_suspend);
++>>>>>>> 12bcae44bf48 (PCI/PM: Use pci_WARN() to include device information)
  		return 0;
  	}
  
diff --cc include/linux/pci.h
index 906f59ad2896,4846306d521c..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -2393,4 -2394,18 +2393,21 @@@ void pci_uevent_ers(struct pci_dev *pde
  #define pci_info(pdev, fmt, arg...)	dev_info(&(pdev)->dev, fmt, ##arg)
  #define pci_dbg(pdev, fmt, arg...)	dev_dbg(&(pdev)->dev, fmt, ##arg)
  
++<<<<<<< HEAD
++=======
+ #define pci_notice_ratelimited(pdev, fmt, arg...) \
+ 	dev_notice_ratelimited(&(pdev)->dev, fmt, ##arg)
+ 
+ #define pci_info_ratelimited(pdev, fmt, arg...) \
+ 	dev_info_ratelimited(&(pdev)->dev, fmt, ##arg)
+ 
+ #define pci_WARN(pdev, condition, fmt, arg...) \
+ 	WARN(condition, "%s %s: " fmt, \
+ 	     dev_driver_string(&(pdev)->dev), pci_name(pdev), ##arg)
+ 
+ #define pci_WARN_ONCE(pdev, condition, fmt, arg...) \
+ 	WARN_ONCE(condition, "%s %s: " fmt, \
+ 		  dev_driver_string(&(pdev)->dev), pci_name(pdev), ##arg)
+ 
++>>>>>>> 12bcae44bf48 (PCI/PM: Use pci_WARN() to include device information)
  #endif /* LINUX_PCI_H */
* Unmerged path drivers/pci/pci-driver.c
* Unmerged path include/linux/pci.h
