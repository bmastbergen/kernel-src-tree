ASoC: soc-core: allow no Platform on dai_link

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-core: allow no Platform on dai_link (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 93.75%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 1d76898928783d79bfd7c465e891b6cf957c839a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1d768989.failed

dai_link is used to selecting Component (= CPU/Codec/Platform) and
DAI (= CPU/Codec). And selected CPU/Codec/Platform components are
*listed* on Card.

Many drivers don't need special Platform component, but was
mandatory at legacy style ALSA SoC.
Thus, there is this kind of settings on many drivers.

	dai_link->platform_of_node = dai_link->cpu_of_node;

In this case, soc_bind_dai_link() will pick-up "CPU component" as
"Platform component", and try to add it to snd_soc_pcm_runtime.
But it will be ignored, because it is already added when CPU bindings.

Historically, this kind of "CPU component" is used/selected as
"Platform" on many ALSA SoC drivers.
OTOH, Dummy Platform will be selected automatically by ALSA SoC if
driver doesn't have Platform settings.

These indicates that there are 2 type of Platforms exist at current
ALSA SoC if driver doesn't need special Platform.

	1) use Dummy Platform as Platform component
	2) use CPU component  as Platform component

ALSA SoC will call Dummy Platform callback function if it is using
Dummy Platform, but it is completely pointless. Because it is the
sound card which doesn't need special Platform.

Thus, the behavior we request to ALSA SoC is selecting 2) automatically
instead of 1) if sound card doesn't need special Platform.
And, 2) means "do nothing" as above explain.

These were needed at legacy style dai_link, but is no longer needed
at modern style dai_link anymore.

This patch allows "no Platform" settings on dai_link, and will do
nothing for it if there was no platform settings. This is same as 2).

By this patch, all drivers which is selecting "CPU component" as
"Platform" can remove such settings.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 1d76898928783d79bfd7c465e891b6cf957c839a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-core.c
diff --cc sound/soc/soc-core.c
index 49d2af2ba06a,4cd77cd6c864..000000000000
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@@ -1054,119 -1056,12 +1057,125 @@@ static void soc_remove_dai_links(struc
  	}
  }
  
++<<<<<<< HEAD
 +static int snd_soc_init_platform(struct snd_soc_card *card,
 +				 struct snd_soc_dai_link *dai_link)
 +{
 +	struct snd_soc_dai_link_component *platform = dai_link->platforms;
 +
 +	/*
 +	 * REMOVE ME
 +	 *
 +	 * This is glue code for Legacy vs Modern dai_link.
 +	 * This function will be removed if all derivers are switched to
 +	 * modern style dai_link.
 +	 * Driver shouldn't use both legacy and modern style in the same time.
 +	 * see
 +	 *	soc.h :: struct snd_soc_dai_link
 +	 */
 +	/* convert Legacy platform link */
 +	if (!platform) {
 +		platform = devm_kzalloc(card->dev,
 +				sizeof(struct snd_soc_dai_link_component),
 +				GFP_KERNEL);
 +		if (!platform)
 +			return -ENOMEM;
 +
 +		dai_link->platforms	  = platform;
 +		dai_link->num_platforms	  = 1;
 +		dai_link->legacy_platform = 1;
 +		platform->name		  = dai_link->platform_name;
 +		platform->of_node	  = dai_link->platform_of_node;
 +		platform->dai_name	  = NULL;
 +	}
 +
 +	/* if there's no platform we match on the empty platform */
 +	if (!platform->name &&
 +	    !platform->of_node)
 +		platform->name = "snd-soc-dummy";
 +
 +	return 0;
 +}
 +
 +static void soc_cleanup_platform(struct snd_soc_card *card)
 +{
 +	struct snd_soc_dai_link *link;
 +	int i;
 +	/*
 +	 * FIXME
 +	 *
 +	 * this function should be removed with snd_soc_init_platform
 +	 */
 +
 +	for_each_card_prelinks(card, i, link) {
 +		if (link->legacy_platform) {
 +			link->legacy_platform = 0;
 +			link->platforms       = NULL;
 +		}
 +	}
 +}
 +
 +static int snd_soc_init_multicodec(struct snd_soc_card *card,
 +				   struct snd_soc_dai_link *dai_link)
 +{
 +	/*
 +	 * REMOVE ME
 +	 *
 +	 * This is glue code for Legacy vs Modern dai_link.
 +	 * This function will be removed if all derivers are switched to
 +	 * modern style dai_link.
 +	 * Driver shouldn't use both legacy and modern style in the same time.
 +	 * see
 +	 *	soc.h :: struct snd_soc_dai_link
 +	 */
 +
 +	/* Legacy codec/codec_dai link is a single entry in multicodec */
 +	if (dai_link->codec_name || dai_link->codec_of_node ||
 +	    dai_link->codec_dai_name) {
 +		dai_link->num_codecs = 1;
 +
 +		dai_link->codecs = devm_kzalloc(card->dev,
 +				sizeof(struct snd_soc_dai_link_component),
 +				GFP_KERNEL);
 +		if (!dai_link->codecs)
 +			return -ENOMEM;
 +
 +		dai_link->codecs[0].name = dai_link->codec_name;
 +		dai_link->codecs[0].of_node = dai_link->codec_of_node;
 +		dai_link->codecs[0].dai_name = dai_link->codec_dai_name;
 +	}
 +
 +	if (!dai_link->codecs) {
 +		dev_err(card->dev, "ASoC: DAI link has no CODECs\n");
 +		return -EINVAL;
 +	}
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 1d7689892878 (ASoC: soc-core: allow no Platform on dai_link)
  static int soc_init_dai_link(struct snd_soc_card *card,
  			     struct snd_soc_dai_link *link)
  {
 -	int i;
 +	int i, ret;
  	struct snd_soc_dai_link_component *codec;
  
++<<<<<<< HEAD
 +	ret = snd_soc_init_platform(card, link);
 +	if (ret) {
 +		dev_err(card->dev, "ASoC: failed to init multiplatform\n");
 +		return ret;
 +	}
 +
 +	ret = snd_soc_init_multicodec(card, link);
 +	if (ret) {
 +		dev_err(card->dev, "ASoC: failed to init multicodec\n");
 +		return ret;
 +	}
 +
++=======
++>>>>>>> 1d7689892878 (ASoC: soc-core: allow no Platform on dai_link)
  	for_each_link_codecs(link, i, codec) {
  		/*
  		 * Codec must be specified by 1 of name or OF node,
@@@ -1186,33 -1081,48 +1195,40 @@@
  		}
  	}
  
- 	/* FIXME */
- 	if (link->num_platforms > 1) {
- 		dev_err(card->dev,
- 			"ASoC: multi platform is not yet supported %s\n",
- 			link->name);
- 		return -EINVAL;
- 	}
- 
  	/*
- 	 * Platform may be specified by either name or OF node, but
- 	 * can be left unspecified, and a dummy platform will be used.
+ 	 * Platform may be specified by either name or OF node,
+ 	 * or no Platform.
+ 	 *
+ 	 * FIXME
+ 	 *
+ 	 * We need multi-platform support
  	 */
- 	if (link->platforms->name && link->platforms->of_node) {
- 		dev_err(card->dev,
- 			"ASoC: Both platform name/of_node are set for %s\n",
- 			link->name);
- 		return -EINVAL;
- 	}
+ 	if (link->num_platforms > 0) {
  
- 	/*
- 	 * Defer card registartion if platform dai component is not added to
- 	 * component list.
- 	 */
- 	if ((link->platforms->of_node || link->platforms->name) &&
- 	    !soc_find_component(link->platforms->of_node, link->platforms->name))
- 		return -EPROBE_DEFER;
+ 		if (link->num_platforms > 1) {
+ 			dev_err(card->dev,
+ 				"ASoC: multi platform is not yet supported %s\n",
+ 				link->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		if (link->platforms->name && link->platforms->of_node) {
+ 			dev_err(card->dev,
+ 				"ASoC: Both platform name/of_node are set for %s\n",
+ 				link->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		/*
+ 		 * Defer card registartion if platform dai component is not
+ 		 * added to component list.
+ 		 */
+ 		if ((link->platforms->of_node || link->platforms->name) &&
+ 		    !soc_find_component(link->platforms->of_node,
+ 					link->platforms->name))
+ 			return -EPROBE_DEFER;
+ 	}
  
 -	/* FIXME */
 -	if (link->num_cpus > 1) {
 -		dev_err(card->dev,
 -			"ASoC: multi cpu is not yet supported %s\n",
 -			link->name);
 -		return -EINVAL;
 -	}
 -
  	/*
  	 * CPU device may be specified by either name or OF node, but
  	 * can be left unspecified, and will be matched based on DAI
diff --git a/include/sound/soc.h b/include/sound/soc.h
index 8387b011d9c9..2b1020b7be97 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -965,7 +965,7 @@ struct snd_soc_dai_link {
 	/*
 	 * You MAY specify the link's platform/PCM/DMA driver, either by
 	 * device name, or by DT/OF node, but not both. Some forms of link
-	 * do not need a platform.
+	 * do not need a platform. In such case, platforms are not mandatory.
 	 */
 	const char *platform_name;
 	struct device_node *platform_of_node;
* Unmerged path sound/soc/soc-core.c
