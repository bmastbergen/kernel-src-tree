kvm: x86: disable shattered huge page recovery for PREEMPT_RT.

jira LE-1907
cve CVE-2018-12207
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [x86] kvm: x86: disable shattered huge page recovery for PREEMPT_RT (Paolo Bonzini) [1690344] {CVE-2018-12207}
Rebuild_FUZZ: 99.19%
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit 13fb59276b47db556370bba53b5b55f3849dd8c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/13fb5927.failed

If a huge page is recovered (and becomes no executable) while another
thread is executing it, the resulting contention on mmu_lock can cause
latency spikes.  Disabling recovery for PREEMPT_RT kernels fixes this
issue.

	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 13fb59276b47db556370bba53b5b55f3849dd8c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu.c
diff --cc arch/x86/kvm/mmu.c
index 0afcce3fd133,cf718fa23dff..000000000000
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@@ -50,6 -48,35 +50,38 @@@
  #include <asm/kvm_page_track.h>
  #include "trace.h"
  
++<<<<<<< HEAD
++=======
+ extern bool itlb_multihit_kvm_mitigation;
+ 
+ static int __read_mostly nx_huge_pages = -1;
+ #ifdef CONFIG_PREEMPT_RT
+ /* Recovery can cause latency spikes, disable it for PREEMPT_RT.  */
+ static uint __read_mostly nx_huge_pages_recovery_ratio = 0;
+ #else
+ static uint __read_mostly nx_huge_pages_recovery_ratio = 60;
+ #endif
+ 
+ static int set_nx_huge_pages(const char *val, const struct kernel_param *kp);
+ static int set_nx_huge_pages_recovery_ratio(const char *val, const struct kernel_param *kp);
+ 
+ static struct kernel_param_ops nx_huge_pages_ops = {
+ 	.set = set_nx_huge_pages,
+ 	.get = param_get_bool,
+ };
+ 
+ static struct kernel_param_ops nx_huge_pages_recovery_ratio_ops = {
+ 	.set = set_nx_huge_pages_recovery_ratio,
+ 	.get = param_get_uint,
+ };
+ 
+ module_param_cb(nx_huge_pages, &nx_huge_pages_ops, &nx_huge_pages, 0644);
+ __MODULE_PARM_TYPE(nx_huge_pages, "bool");
+ module_param_cb(nx_huge_pages_recovery_ratio, &nx_huge_pages_recovery_ratio_ops,
+ 		&nx_huge_pages_recovery_ratio, 0644);
+ __MODULE_PARM_TYPE(nx_huge_pages_recovery_ratio, "uint");
+ 
++>>>>>>> 13fb59276b47 (kvm: x86: disable shattered huge page recovery for PREEMPT_RT.)
  /*
   * When setting this variable to true it enables Two-Dimensional-Paging
   * where the hardware walks 2 page tables:
* Unmerged path arch/x86/kvm/mmu.c
