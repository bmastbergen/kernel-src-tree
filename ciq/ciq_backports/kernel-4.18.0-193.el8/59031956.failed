PM / devfreq: add devfreq_suspend/resume() functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Lukasz Luba <l.luba@partner.samsung.com>
commit 5903195605287681f55094bbcdf8711ea109969b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/59031956.failed

This patch adds implementation for global suspend/resume for
devfreq framework. System suspend will next use these functions.

	Suggested-by: Tobias Jakobi <tjakobi@math.uni-bielefeld.de>
	Suggested-by: Chanwoo Choi <cw00.choi@samsung.com>
	Signed-off-by: Lukasz Luba <l.luba@partner.samsung.com>
	Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
	Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
(cherry picked from commit 5903195605287681f55094bbcdf8711ea109969b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/devfreq.h
diff --cc include/linux/devfreq.h
index 3aae5b3af87c,fbffa74bfc1b..000000000000
--- a/include/linux/devfreq.h
+++ b/include/linux/devfreq.h
@@@ -198,6 -205,17 +198,20 @@@ extern void devm_devfreq_remove_device(
  extern int devfreq_suspend_device(struct devfreq *devfreq);
  extern int devfreq_resume_device(struct devfreq *devfreq);
  
++<<<<<<< HEAD
++=======
+ extern void devfreq_suspend(void);
+ extern void devfreq_resume(void);
+ 
+ /**
+  * update_devfreq() - Reevaluate the device and configure frequency
+  * @devfreq:	the devfreq device
+  *
+  * Note: devfreq->lock must be held
+  */
+ extern int update_devfreq(struct devfreq *devfreq);
+ 
++>>>>>>> 590319560528 (PM / devfreq: add devfreq_suspend/resume() functions)
  /* Helper functions for devfreq user device driver with OPP. */
  extern struct dev_pm_opp *devfreq_recommended_opp(struct device *dev,
  					   unsigned long *freq, u32 flags);
diff --git a/drivers/devfreq/devfreq.c b/drivers/devfreq/devfreq.c
index 0b5b3abe054e..3bb83f33d758 100644
--- a/drivers/devfreq/devfreq.c
+++ b/drivers/devfreq/devfreq.c
@@ -847,6 +847,50 @@ int devfreq_resume_device(struct devfreq *devfreq)
 }
 EXPORT_SYMBOL(devfreq_resume_device);
 
+/**
+ * devfreq_suspend() - Suspend devfreq governors and devices
+ *
+ * Called during system wide Suspend/Hibernate cycles for suspending governors
+ * and devices preserving the state for resume. On some platforms the devfreq
+ * device must have precise state (frequency) after resume in order to provide
+ * fully operating setup.
+ */
+void devfreq_suspend(void)
+{
+	struct devfreq *devfreq;
+	int ret;
+
+	mutex_lock(&devfreq_list_lock);
+	list_for_each_entry(devfreq, &devfreq_list, node) {
+		ret = devfreq_suspend_device(devfreq);
+		if (ret)
+			dev_err(&devfreq->dev,
+				"failed to suspend devfreq device\n");
+	}
+	mutex_unlock(&devfreq_list_lock);
+}
+
+/**
+ * devfreq_resume() - Resume devfreq governors and devices
+ *
+ * Called during system wide Suspend/Hibernate cycle for resuming governors and
+ * devices that are suspended with devfreq_suspend().
+ */
+void devfreq_resume(void)
+{
+	struct devfreq *devfreq;
+	int ret;
+
+	mutex_lock(&devfreq_list_lock);
+	list_for_each_entry(devfreq, &devfreq_list, node) {
+		ret = devfreq_resume_device(devfreq);
+		if (ret)
+			dev_warn(&devfreq->dev,
+				 "failed to resume devfreq device\n");
+	}
+	mutex_unlock(&devfreq_list_lock);
+}
+
 /**
  * devfreq_add_governor() - Add devfreq governor
  * @governor:	the devfreq governor to be added
* Unmerged path include/linux/devfreq.h
