cls_api: modify the tc_indr_block_ing_cmd parameters.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author wenxu <wenxu@ucloud.cn>
commit 242453c227d14751fed0a8809a58f1bf3c7d837a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/242453c2.failed

This patch make tc_indr_block_ing_cmd can't access struct
tc_indr_block_dev and tc_indr_block_cb.

	Signed-off-by: wenxu <wenxu@ucloud.cn>
	Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 242453c227d14751fed0a8809a58f1bf3c7d837a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_api.c
diff --cc net/sched/cls_api.c
index 081ac3d0fb50,1dd210d353b7..000000000000
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@@ -680,23 -677,28 +680,45 @@@ static void tc_indr_block_cb_del(struc
  static int tcf_block_setup(struct tcf_block *block,
  			   struct flow_block_offload *bo);
  
++<<<<<<< HEAD
 +static void tc_indr_block_ing_cmd(struct tc_indr_block_dev *indr_dev,
 +				  struct tc_indr_block_cb *indr_block_cb,
 +				  enum tc_block_command command)
++=======
+ static void tc_indr_block_ing_cmd(struct net_device *dev,
+ 				  struct tcf_block *block,
+ 				  tc_indr_block_bind_cb_t *cb,
+ 				  void *cb_priv,
+ 				  enum flow_block_command command)
++>>>>>>> 242453c227d1 (cls_api: modify the tc_indr_block_ing_cmd parameters.)
  {
 -	struct flow_block_offload bo = {
 +	struct tc_block_offload bo = {
  		.command	= command,
++<<<<<<< HEAD
 +		.binder_type	= TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS,
 +		.block		= indr_dev->block,
++=======
+ 		.binder_type	= FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS,
+ 		.net		= dev_net(dev),
+ 		.block_shared	= tcf_block_non_null_shared(block),
++>>>>>>> 242453c227d1 (cls_api: modify the tc_indr_block_ing_cmd parameters.)
  	};
  	INIT_LIST_HEAD(&bo.cb_list);
  
- 	if (!indr_dev->block)
+ 	if (!block)
  		return;
  
++<<<<<<< HEAD
 +	indr_block_cb->cb(indr_dev->dev, indr_block_cb->cb_priv, TC_SETUP_BLOCK,
 +			  &bo);
 +	tcf_block_setup(indr_dev->block, &bo);
++=======
+ 	bo.block = &block->flow_block;
+ 
+ 	cb(dev, cb_priv, TC_SETUP_BLOCK, &bo);
+ 
+ 	tcf_block_setup(block, &bo);
++>>>>>>> 242453c227d1 (cls_api: modify the tc_indr_block_ing_cmd parameters.)
  }
  
  int __tc_indr_block_cb_register(struct net_device *dev, void *cb_priv,
@@@ -715,7 -717,8 +737,12 @@@
  	if (err)
  		goto err_dev_put;
  
++<<<<<<< HEAD
 +	tc_indr_block_ing_cmd(indr_dev, indr_block_cb, TC_BLOCK_BIND);
++=======
+ 	tc_indr_block_ing_cmd(dev, indr_dev->block, cb, cb_priv,
+ 			      FLOW_BLOCK_BIND);
++>>>>>>> 242453c227d1 (cls_api: modify the tc_indr_block_ing_cmd parameters.)
  	return 0;
  
  err_dev_put:
@@@ -752,7 -755,8 +779,12 @@@ void __tc_indr_block_cb_unregister(stru
  		return;
  
  	/* Send unbind message if required to free any block cbs. */
++<<<<<<< HEAD
 +	tc_indr_block_ing_cmd(indr_dev, indr_block_cb, TC_BLOCK_UNBIND);
++=======
+ 	tc_indr_block_ing_cmd(dev, indr_dev->block, cb, indr_block_cb->cb_priv,
+ 			      FLOW_BLOCK_UNBIND);
++>>>>>>> 242453c227d1 (cls_api: modify the tc_indr_block_ing_cmd parameters.)
  	tc_indr_block_cb_del(indr_block_cb);
  	tc_indr_block_dev_put(indr_dev);
  }
* Unmerged path net/sched/cls_api.c
