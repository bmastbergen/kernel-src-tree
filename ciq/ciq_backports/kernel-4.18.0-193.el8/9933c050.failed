scsi: qla2xxx: Make it explicit that ELS pass-through IOCBs use little endian

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 9933c050fe919ed42408a6e0198e3d7e7d3278a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9933c050.failed

According to the firmware documentation the firmware expects all ELS
pass-through IOCB parameters in little endian format. Make this explicit.

	Cc: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Tested-by: Himanshu Madhani <hmadhani@marvell.com>
	Reviewed-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 9933c050fe919ed42408a6e0198e3d7e7d3278a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_fw.h
#	drivers/scsi/qla2xxx/qla_iocb.c
diff --cc drivers/scsi/qla2xxx/qla_fw.h
index d53cd7875a85,732bb871c433..000000000000
--- a/drivers/scsi/qla2xxx/qla_fw.h
+++ b/drivers/scsi/qla2xxx/qla_fw.h
@@@ -764,13 -761,13 +764,20 @@@ struct els_entry_24xx 
  #define ECF_CLR_PASSTHRU_PEND	BIT_12
  #define ECF_INCL_FRAME_HDR	BIT_11
  
- 	uint32_t rx_byte_count;
- 	uint32_t tx_byte_count;
+ 	__le32	 rx_byte_count;
+ 	__le32	 tx_byte_count;
  
++<<<<<<< HEAD
 +	uint32_t tx_address[2];		/* Data segment 0 address. */
 +	uint32_t tx_len;		/* Data segment 0 length. */
 +	uint32_t rx_address[2];		/* Data segment 1 address. */
 +	uint32_t rx_len;		/* Data segment 1 length. */
++=======
+ 	__le64	 tx_address __packed;	/* Data segment 0 address. */
+ 	__le32	 tx_len;		/* Data segment 0 length. */
+ 	__le64	 rx_address __packed;	/* Data segment 1 address. */
+ 	__le32	 rx_len;		/* Data segment 1 length. */
++>>>>>>> 9933c050fe91 (scsi: qla2xxx: Make it explicit that ELS pass-through IOCBs use little endian)
  };
  
  struct els_sts_entry_24xx {
diff --cc drivers/scsi/qla2xxx/qla_iocb.c
index 5df8a0e7599c,c7b91827c1e7..000000000000
--- a/drivers/scsi/qla2xxx/qla_iocb.c
+++ b/drivers/scsi/qla2xxx/qla_iocb.c
@@@ -2726,30 -2704,24 +2726,48 @@@ qla24xx_els_logo_iocb(srb_t *sp, struc
  
  	if (elsio->u.els_logo.els_cmd == ELS_DCMD_PLOGI) {
  		els_iocb->tx_byte_count = els_iocb->tx_len =
++<<<<<<< HEAD
 +			sizeof(struct els_plogi_payload);
 +		els_iocb->tx_address[0] =
 +			cpu_to_le32(LSD(elsio->u.els_plogi.els_plogi_pyld_dma));
 +		els_iocb->tx_address[1] =
 +			cpu_to_le32(MSD(elsio->u.els_plogi.els_plogi_pyld_dma));
 +
 +		els_iocb->rx_dsd_count = 1;
 +		els_iocb->rx_byte_count = els_iocb->rx_len =
 +			sizeof(struct els_plogi_payload);
 +		els_iocb->rx_address[0] =
 +			cpu_to_le32(LSD(elsio->u.els_plogi.els_resp_pyld_dma));
 +		els_iocb->rx_address[1] =
 +			cpu_to_le32(MSD(elsio->u.els_plogi.els_resp_pyld_dma));
++=======
+ 			cpu_to_le32(sizeof(struct els_plogi_payload));
+ 		put_unaligned_le64(elsio->u.els_plogi.els_plogi_pyld_dma,
+ 				   &els_iocb->tx_address);
+ 		els_iocb->rx_dsd_count = 1;
+ 		els_iocb->rx_byte_count = els_iocb->rx_len =
+ 			cpu_to_le32(sizeof(struct els_plogi_payload));
+ 		put_unaligned_le64(elsio->u.els_plogi.els_resp_pyld_dma,
+ 				   &els_iocb->rx_address);
++>>>>>>> 9933c050fe91 (scsi: qla2xxx: Make it explicit that ELS pass-through IOCBs use little endian)
  
  		ql_dbg(ql_dbg_io + ql_dbg_buffer, vha, 0x3073,
  		    "PLOGI ELS IOCB:\n");
  		ql_dump_buffer(ql_log_info, vha, 0x0109,
  		    (uint8_t *)els_iocb, 0x70);
  	} else {
++<<<<<<< HEAD
 +		els_iocb->tx_byte_count = sizeof(struct els_logo_payload);
 +		els_iocb->tx_address[0] =
 +		    cpu_to_le32(LSD(elsio->u.els_logo.els_logo_pyld_dma));
 +		els_iocb->tx_address[1] =
 +		    cpu_to_le32(MSD(elsio->u.els_logo.els_logo_pyld_dma));
++=======
+ 		els_iocb->tx_byte_count =
+ 			cpu_to_le32(sizeof(struct els_logo_payload));
+ 		put_unaligned_le64(elsio->u.els_logo.els_logo_pyld_dma,
+ 				   &els_iocb->tx_address);
++>>>>>>> 9933c050fe91 (scsi: qla2xxx: Make it explicit that ELS pass-through IOCBs use little endian)
  		els_iocb->tx_len = cpu_to_le32(sizeof(struct els_logo_payload));
  
  		els_iocb->rx_byte_count = 0;
* Unmerged path drivers/scsi/qla2xxx/qla_fw.h
* Unmerged path drivers/scsi/qla2xxx/qla_iocb.c
