ASoC: soc-component: add snd_soc_pcm_component_mmap()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-component: add snd_soc_pcm_component_mmap() (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 94.64%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 205875e1a12ef9c61e939db9ded90fe3f6352e75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/205875e1.failed

Current ALSA SoC is directly using component->driver->ops->xxx,
thus, the code nested deeply, and it makes code difficult to read,
and is not good for encapsulation.

We want to implement component related function at soc-component.c,
but, some of them need to care whole snd_soc_pcm_runtime (= rtd)
connected component.

Let's call component related function which need to care with
for_each_rtdcom() loop as snd_soc_pcm_component_xxx().
This patch adds new snd_soc_pcm_component_mmap() and use it.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87muh14d02.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 205875e1a12ef9c61e939db9ded90fe3f6352e75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/soc-component.h
#	sound/soc/soc-component.c
#	sound/soc/soc-pcm.c
diff --cc sound/soc/soc-pcm.c
index ba3fa66914bd,7bbee0d71942..000000000000
--- a/sound/soc/soc-pcm.c
+++ b/sound/soc/soc-pcm.c
@@@ -2942,74 -2818,6 +2942,77 @@@ static void soc_pcm_private_free(struc
  	}
  }
  
++<<<<<<< HEAD
 +static int soc_rtdcom_copy_user(struct snd_pcm_substream *substream, int channel,
 +				unsigned long pos, void __user *buf,
 +				unsigned long bytes)
 +{
 +	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 +	struct snd_soc_rtdcom_list *rtdcom;
 +	struct snd_soc_component *component;
 +
 +	for_each_rtdcom(rtd, rtdcom) {
 +		component = rtdcom->component;
 +
 +		if (!component->driver->ops ||
 +		    !component->driver->ops->copy_user)
 +			continue;
 +
 +		/* FIXME. it returns 1st copy now */
 +		return component->driver->ops->copy_user(substream, channel,
 +							 pos, buf, bytes);
 +	}
 +
 +	return -EINVAL;
 +}
 +
 +static struct page *soc_rtdcom_page(struct snd_pcm_substream *substream,
 +				    unsigned long offset)
 +{
 +	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 +	struct snd_soc_rtdcom_list *rtdcom;
 +	struct snd_soc_component *component;
 +	struct page *page;
 +
 +	for_each_rtdcom(rtd, rtdcom) {
 +		component = rtdcom->component;
 +
 +		if (!component->driver->ops ||
 +		    !component->driver->ops->page)
 +			continue;
 +
 +		/* FIXME. it returns 1st page now */
 +		page = component->driver->ops->page(substream, offset);
 +		if (page)
 +			return page;
 +	}
 +
 +	return NULL;
 +}
 +
 +static int soc_rtdcom_mmap(struct snd_pcm_substream *substream,
 +			   struct vm_area_struct *vma)
 +{
 +	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 +	struct snd_soc_rtdcom_list *rtdcom;
 +	struct snd_soc_component *component;
 +
 +	for_each_rtdcom(rtd, rtdcom) {
 +		component = rtdcom->component;
 +
 +		if (!component->driver->ops ||
 +		    !component->driver->ops->mmap)
 +			continue;
 +
 +		/* FIXME. it returns 1st mmap now */
 +		return component->driver->ops->mmap(substream, vma);
 +	}
 +
 +	return -EINVAL;
 +}
 +
++=======
++>>>>>>> 205875e1a12e (ASoC: soc-component: add snd_soc_pcm_component_mmap())
  /* create a new pcm */
  int soc_new_pcm(struct snd_soc_pcm_runtime *rtd, int num)
  {
@@@ -3117,11 -2943,11 +3120,11 @@@
  			continue;
  
  		if (ops->copy_user)
 -			rtd->ops.copy_user	= snd_soc_pcm_component_copy_user;
 +			rtd->ops.copy_user	= soc_rtdcom_copy_user;
  		if (ops->page)
 -			rtd->ops.page		= snd_soc_pcm_component_page;
 +			rtd->ops.page		= soc_rtdcom_page;
  		if (ops->mmap)
- 			rtd->ops.mmap		= soc_rtdcom_mmap;
+ 			rtd->ops.mmap		= snd_soc_pcm_component_mmap;
  	}
  
  	if (playback)
* Unmerged path include/sound/soc-component.h
* Unmerged path sound/soc/soc-component.c
* Unmerged path include/sound/soc-component.h
* Unmerged path sound/soc/soc-component.c
* Unmerged path sound/soc/soc-pcm.c
