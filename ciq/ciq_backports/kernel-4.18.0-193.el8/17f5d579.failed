drm/i915: Force DPCD backlight mode on X1 Extreme 2nd Gen 4K AMOLED panel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Lyude Paul <lyude@redhat.com>
commit 17f5d57915be108b4967b7770c9ea87c493b30a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/17f5d579.failed

The X1 Extreme is one of the systems that lies about which backlight
interface that it uses in its VBIOS as PWM backlight controls don't work
at all on this machine. It's possible that this panel could be one of
the infamous ones that can switch between PWM mode and DPCD backlight
control mode, but we haven't gotten any more details on this from Lenovo
just yet. For the time being though, making sure the backlight 'just
works' is a bit more important.

So, add a quirk to force DPCD backlight controls on for these systems
based on EDID (since this panel doesn't appear to fill in the device ID).
Hopefully in the future we'll figure out a better way of probing this.

Changes since v2:
* The bugzilla URL is deprecated, bug reporting happens on gitlab now.
  Update the messages we print to reflect this
* Also, take the opportunity to move FDO_BUG_URL out of i915_utils.c and
  into i915_utils.h so that other places which print things that aren't
  traditional errors but are worth filing bugs about, can actually use
  it.

	Signed-off-by: Lyude Paul <lyude@redhat.com>
	Reviewed-by: Adam Jackson <ajax@redhat.com>
	Cc: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200303215320.93491-1-lyude@redhat.com
(cherry picked from commit 17f5d57915be108b4967b7770c9ea87c493b30a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_dp_helper.c
#	drivers/gpu/drm/i915/i915_utils.c
#	drivers/gpu/drm/i915/i915_utils.h
#	drivers/gpu/drm/i915/intel_dp_aux_backlight.c
#	include/drm/drm_dp_helper.h
diff --cc drivers/gpu/drm/drm_dp_helper.c
index 54a6414c5d96,a39c3cdacb20..000000000000
--- a/drivers/gpu/drm/drm_dp_helper.c
+++ b/drivers/gpu/drm/drm_dp_helper.c
@@@ -1321,6 -1221,71 +1321,74 @@@ drm_dp_get_quirks(const struct drm_dp_d
  #undef DEVICE_ID_ANY
  #undef DEVICE_ID
  
++<<<<<<< HEAD
++=======
+ struct edid_quirk {
+ 	u8 mfg_id[2];
+ 	u8 prod_id[2];
+ 	u32 quirks;
+ };
+ 
+ #define MFG(first, second) { (first), (second) }
+ #define PROD_ID(first, second) { (first), (second) }
+ 
+ /*
+  * Some devices have unreliable OUIDs where they don't set the device ID
+  * correctly, and as a result we need to use the EDID for finding additional
+  * DP quirks in such cases.
+  */
+ static const struct edid_quirk edid_quirk_list[] = {
+ 	/* Optional 4K AMOLED panel in the ThinkPad X1 Extreme 2nd Generation
+ 	 * only supports DPCD backlight controls
+ 	 */
+ 	{ MFG(0x4c, 0x83), PROD_ID(0x41, 0x41), BIT(DP_QUIRK_FORCE_DPCD_BACKLIGHT) },
+ };
+ 
+ #undef MFG
+ #undef PROD_ID
+ 
+ /**
+  * drm_dp_get_edid_quirks() - Check the EDID of a DP device to find additional
+  * DP-specific quirks
+  * @edid: The EDID to check
+  *
+  * While OUIDs are meant to be used to recognize a DisplayPort device, a lot
+  * of manufacturers don't seem to like following standards and neglect to fill
+  * the dev-ID in, making it impossible to only use OUIDs for determining
+  * quirks in some cases. This function can be used to check the EDID and look
+  * up any additional DP quirks. The bits returned by this function correspond
+  * to the quirk bits in &drm_dp_quirk.
+  *
+  * Returns: a bitmask of quirks, if any. The driver can check this using
+  * drm_dp_has_quirk().
+  */
+ u32 drm_dp_get_edid_quirks(const struct edid *edid)
+ {
+ 	const struct edid_quirk *quirk;
+ 	u32 quirks = 0;
+ 	int i;
+ 
+ 	if (!edid)
+ 		return 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(edid_quirk_list); i++) {
+ 		quirk = &edid_quirk_list[i];
+ 		if (memcmp(quirk->mfg_id, edid->mfg_id,
+ 			   sizeof(edid->mfg_id)) == 0 &&
+ 		    memcmp(quirk->prod_id, edid->prod_code,
+ 			   sizeof(edid->prod_code)) == 0)
+ 			quirks |= quirk->quirks;
+ 	}
+ 
+ 	DRM_DEBUG_KMS("DP sink: EDID mfg %*phD prod-ID %*phD quirks: 0x%04x\n",
+ 		      (int)sizeof(edid->mfg_id), edid->mfg_id,
+ 		      (int)sizeof(edid->prod_code), edid->prod_code, quirks);
+ 
+ 	return quirks;
+ }
+ EXPORT_SYMBOL(drm_dp_get_edid_quirks);
+ 
++>>>>>>> 17f5d57915be (drm/i915: Force DPCD backlight mode on X1 Extreme 2nd Gen 4K AMOLED panel)
  /**
   * drm_dp_read_desc - read sink/branch descriptor from DPCD
   * @aux: DisplayPort AUX channel
diff --cc drivers/gpu/drm/i915/i915_utils.h
index 540e20eb032c,cae0ae520398..000000000000
--- a/drivers/gpu/drm/i915/i915_utils.h
+++ b/drivers/gpu/drm/i915/i915_utils.h
@@@ -25,6 -25,17 +25,20 @@@
  #ifndef __I915_UTILS_H
  #define __I915_UTILS_H
  
++<<<<<<< HEAD
++=======
+ #include <linux/list.h>
+ #include <linux/overflow.h>
+ #include <linux/sched.h>
+ #include <linux/types.h>
+ #include <linux/workqueue.h>
+ 
+ struct drm_i915_private;
+ struct timer_list;
+ 
+ #define FDO_BUG_URL "https://gitlab.freedesktop.org/drm/intel/-/wikis/How-to-file-i915-bugs"
+ 
++>>>>>>> 17f5d57915be (drm/i915: Force DPCD backlight mode on X1 Extreme 2nd Gen 4K AMOLED panel)
  #undef WARN_ON
  /* Many gcc seem to no see through this and fall over :( */
  #if 0
diff --cc drivers/gpu/drm/i915/intel_dp_aux_backlight.c
index 5b5e57eba71e,3e706bb850a8..000000000000
--- a/drivers/gpu/drm/i915/intel_dp_aux_backlight.c
+++ b/drivers/gpu/drm/i915/intel_dp_aux_backlight.c
@@@ -281,12 -328,31 +281,36 @@@ intel_dp_aux_display_control_capable(st
  int intel_dp_aux_init_backlight_funcs(struct intel_connector *intel_connector)
  {
  	struct intel_panel *panel = &intel_connector->panel;
++<<<<<<< HEAD:drivers/gpu/drm/i915/intel_dp_aux_backlight.c
 +
 +	if (!i915_modparams.enable_dpcd_backlight)
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(intel_connector->encoder);
+ 	struct drm_device *dev = intel_connector->base.dev;
+ 	struct drm_i915_private *dev_priv = to_i915(dev);
+ 
+ 	if (i915_modparams.enable_dpcd_backlight == 0 ||
+ 	    !intel_dp_aux_display_control_capable(intel_connector))
++>>>>>>> 17f5d57915be (drm/i915: Force DPCD backlight mode on X1 Extreme 2nd Gen 4K AMOLED panel):drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
  		return -ENODEV;
  
- 	if (!intel_dp_aux_display_control_capable(intel_connector))
+ 	/*
+ 	 * There are a lot of machines that don't advertise the backlight
+ 	 * control interface to use properly in their VBIOS, :\
+ 	 */
+ 	if (dev_priv->vbt.backlight.type !=
+ 	    INTEL_BACKLIGHT_VESA_EDP_AUX_INTERFACE &&
+ 	    !drm_dp_has_quirk(&intel_dp->desc, intel_dp->edid_quirks,
+ 			      DP_QUIRK_FORCE_DPCD_BACKLIGHT)) {
+ 		DRM_DEV_INFO(dev->dev,
+ 			     "Panel advertises DPCD backlight support, but "
+ 			     "VBT disagrees. If your backlight controls "
+ 			     "don't work try booting with "
+ 			     "i915.enable_dpcd_backlight=1. If your machine "
+ 			     "needs this, please file a _new_ bug report on "
+ 			     "drm/i915, see " FDO_BUG_URL " for details.\n");
  		return -ENODEV;
+ 	}
  
  	panel->backlight.setup = intel_dp_aux_setup_backlight;
  	panel->backlight.enable = intel_dp_aux_enable_backlight;
diff --cc include/drm/drm_dp_helper.h
index 97ce790a5b5a,c5580e988826..000000000000
--- a/include/drm/drm_dp_helper.h
+++ b/include/drm/drm_dp_helper.h
@@@ -1401,6 -1521,30 +1401,33 @@@ enum drm_dp_quirk 
  	 * driver still need to implement proper handling for such device.
  	 */
  	DP_DPCD_QUIRK_NO_PSR,
++<<<<<<< HEAD
++=======
+ 	/**
+ 	 * @DP_DPCD_QUIRK_NO_SINK_COUNT:
+ 	 *
+ 	 * The device does not set SINK_COUNT to a non-zero value.
+ 	 * The driver should ignore SINK_COUNT during detection.
+ 	 */
+ 	DP_DPCD_QUIRK_NO_SINK_COUNT,
+ 	/**
+ 	 * @DP_DPCD_QUIRK_DSC_WITHOUT_VIRTUAL_DPCD:
+ 	 *
+ 	 * The device supports MST DSC despite not supporting Virtual DPCD.
+ 	 * The DSC caps can be read from the physical aux instead.
+ 	 */
+ 	DP_DPCD_QUIRK_DSC_WITHOUT_VIRTUAL_DPCD,
+ 	/**
+ 	 * @DP_QUIRK_FORCE_DPCD_BACKLIGHT:
+ 	 *
+ 	 * The device is telling the truth when it says that it uses DPCD
+ 	 * backlight controls, even if the system's firmware disagrees. This
+ 	 * quirk should be checked against both the ident and panel EDID.
+ 	 * When present, the driver should honor the DPCD backlight
+ 	 * capabilities advertised.
+ 	 */
+ 	DP_QUIRK_FORCE_DPCD_BACKLIGHT,
++>>>>>>> 17f5d57915be (drm/i915: Force DPCD backlight mode on X1 Extreme 2nd Gen 4K AMOLED panel)
  };
  
  /**
* Unmerged path drivers/gpu/drm/i915/i915_utils.c
* Unmerged path drivers/gpu/drm/drm_dp_helper.c
* Unmerged path drivers/gpu/drm/i915/i915_utils.c
* Unmerged path drivers/gpu/drm/i915/i915_utils.h
* Unmerged path drivers/gpu/drm/i915/intel_dp_aux_backlight.c
* Unmerged path include/drm/drm_dp_helper.h
