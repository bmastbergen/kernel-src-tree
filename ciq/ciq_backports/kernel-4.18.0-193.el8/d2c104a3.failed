ALSA: firewire-lib: pass packet descriptor to data block processing layer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit d2c104a3426be9991b35c65f0f260a107c4b2942
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d2c104a3.failed

This commit changes signature of callback function to call data block
processing layer with packet descriptor. At present, the layer is called
per packet.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit d2c104a3426be9991b35c65f0f260a107c4b2942)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/firewire/amdtp-am824.c
#	sound/firewire/amdtp-stream.c
#	sound/firewire/amdtp-stream.h
#	sound/firewire/digi00x/amdtp-dot.c
#	sound/firewire/fireface/amdtp-ff.c
#	sound/firewire/motu/amdtp-motu.c
#	sound/firewire/tascam/amdtp-tascam.c
diff --cc sound/firewire/amdtp-am824.c
index 99c99d5627ae,ff089ffa3374..000000000000
--- a/sound/firewire/amdtp-am824.c
+++ b/sound/firewire/amdtp-am824.c
@@@ -331,11 -335,11 +331,16 @@@ static void read_midi_messages(struct a
  	}
  }
  
++<<<<<<< HEAD
 +static unsigned int process_rx_data_blocks(struct amdtp_stream *s, __be32 *buffer,
 +					   unsigned int data_blocks, unsigned int *syt)
++=======
+ static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
  	struct amdtp_am824 *p = s->protocol;
- 	struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
  	unsigned int pcm_frames;
  
  	if (pcm) {
@@@ -346,17 -350,19 +351,29 @@@
  		pcm_frames = 0;
  	}
  
++<<<<<<< HEAD
 +	if (p->midi_ports)
 +		write_midi_messages(s, buffer, data_blocks);
++=======
+ 	if (p->midi_ports) {
+ 		write_midi_messages(s, desc->ctx_payload, desc->data_blocks,
+ 				    desc->data_block_counter);
+ 	}
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  
  	return pcm_frames;
  }
  
++<<<<<<< HEAD
 +static unsigned int process_tx_data_blocks(struct amdtp_stream *s, __be32 *buffer,
 +					   unsigned int data_blocks, unsigned int *syt)
++=======
+ static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
  	struct amdtp_am824 *p = s->protocol;
- 	struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
  	unsigned int pcm_frames;
  
  	if (pcm) {
@@@ -366,8 -372,10 +383,15 @@@
  		pcm_frames = 0;
  	}
  
++<<<<<<< HEAD
 +	if (p->midi_ports)
 +		read_midi_messages(s, buffer, data_blocks);
++=======
+ 	if (p->midi_ports) {
+ 		read_midi_messages(s, desc->ctx_payload, desc->data_blocks,
+ 				   desc->data_block_counter);
+ 	}
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  
  	return pcm_frames;
  }
diff --cc sound/firewire/amdtp-stream.c
index 51ab268a7513,db2feb68105c..000000000000
--- a/sound/firewire/amdtp-stream.c
+++ b/sound/firewire/amdtp-stream.c
@@@ -694,6 -760,24 +694,27 @@@ static inline void cancel_stream(struc
  	WRITE_ONCE(s->pcm_buffer_pointer, SNDRV_PCM_POS_XRUN);
  }
  
++<<<<<<< HEAD
++=======
+ static void process_ctx_payloads(struct amdtp_stream *s,
+ 				 const struct pkt_desc *descs,
+ 				 unsigned int packets)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < packets; ++i) {
+ 		const struct pkt_desc *desc = descs + i;
+ 		struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
+ 		unsigned int pcm_frames;
+ 
+ 		pcm_frames = s->process_data_blocks(s, desc, pcm);
+ 
+ 		if (pcm && pcm_frames > 0)
+ 			update_pcm_pointers(s, pcm, pcm_frames);
+ 	}
+ }
+ 
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  static void out_stream_callback(struct fw_iso_context *context, u32 tstamp,
  				size_t header_length, void *header,
  				void *private_data)
diff --cc sound/firewire/amdtp-stream.h
index eff408b4ee36,0e5b85100a04..000000000000
--- a/sound/firewire/amdtp-stream.h
+++ b/sound/firewire/amdtp-stream.h
@@@ -102,9 -105,8 +102,14 @@@ struct pkt_desc 
  struct amdtp_stream;
  typedef unsigned int (*amdtp_stream_process_data_blocks_t)(
  						struct amdtp_stream *s,
++<<<<<<< HEAD
 +						__be32 *buffer,
 +						unsigned int data_blocks,
 +						unsigned int *syt);
++=======
+ 						const struct pkt_desc *desc,
+ 						struct snd_pcm_substream *pcm);
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  struct amdtp_stream {
  	struct fw_unit *unit;
  	enum cip_flags flags;
diff --cc sound/firewire/digi00x/amdtp-dot.c
index 45ff73d16074,83ac4b37f26d..000000000000
--- a/sound/firewire/digi00x/amdtp-dot.c
+++ b/sound/firewire/digi00x/amdtp-dot.c
@@@ -330,17 -330,14 +330,20 @@@ void amdtp_dot_midi_trigger(struct amdt
  }
  
  static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
- 	struct snd_pcm_substream *pcm;
  	unsigned int pcm_frames;
  
- 	pcm = READ_ONCE(s->pcm);
  	if (pcm) {
- 		read_pcm_s32(s, pcm, buffer, data_blocks);
- 		pcm_frames = data_blocks;
+ 		read_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks);
+ 		pcm_frames = desc->data_blocks;
  	} else {
  		pcm_frames = 0;
  	}
@@@ -351,23 -348,21 +354,31 @@@
  }
  
  static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
- 	struct snd_pcm_substream *pcm;
  	unsigned int pcm_frames;
  
- 	pcm = READ_ONCE(s->pcm);
  	if (pcm) {
- 		write_pcm_s32(s, pcm, buffer, data_blocks);
- 		pcm_frames = data_blocks;
+ 		write_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks);
+ 		pcm_frames = desc->data_blocks;
  	} else {
- 		write_pcm_silence(s, buffer, data_blocks);
+ 		write_pcm_silence(s, desc->ctx_payload, desc->data_blocks);
  		pcm_frames = 0;
  	}
  
++<<<<<<< HEAD
 +	write_midi_messages(s, buffer, data_blocks);
++=======
+ 	write_midi_messages(s, desc->ctx_payload, desc->data_blocks,
+ 			    desc->data_block_counter);
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  
  	return pcm_frames;
  }
diff --cc sound/firewire/fireface/amdtp-ff.c
index 2938489740b4,c36232fc4d3e..000000000000
--- a/sound/firewire/fireface/amdtp-ff.c
+++ b/sound/firewire/fireface/amdtp-ff.c
@@@ -103,11 -103,9 +103,15 @@@ int amdtp_ff_add_pcm_hw_constraints(str
  }
  
  static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
- 	struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
  	unsigned int pcm_frames;
  
  	if (pcm) {
@@@ -122,11 -122,9 +128,15 @@@
  }
  
  static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
- 	struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
  	unsigned int pcm_frames;
  
  	if (pcm) {
diff --cc sound/firewire/motu/amdtp-motu.c
index 7973dedd31ef,36ee2c1dd667..000000000000
--- a/sound/firewire/motu/amdtp-motu.c
+++ b/sound/firewire/motu/amdtp-motu.c
@@@ -299,23 -299,27 +299,32 @@@ static void __maybe_unused copy_message
  }
  
  static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +				__be32 *buffer, unsigned int data_blocks,
 +				unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
  	struct amdtp_motu *p = s->protocol;
- 	struct snd_pcm_substream *pcm;
+ 	unsigned int pcm_frames;
  
- 	trace_data_block_sph(s, data_blocks, buffer);
- 	trace_data_block_message(s, data_blocks, buffer);
+ 	trace_data_block_sph(s, desc->data_blocks, desc->ctx_payload);
+ 	trace_data_block_message(s, desc->data_blocks, desc->ctx_payload);
  
  	if (p->midi_ports)
- 		read_midi_messages(s, buffer, data_blocks);
- 
- 	pcm = READ_ONCE(s->pcm);
- 	if (data_blocks > 0 && pcm)
- 		read_pcm_s32(s, pcm->runtime, buffer, data_blocks);
+ 		read_midi_messages(s, desc->ctx_payload, desc->data_blocks);
+ 
+ 	if (pcm) {
+ 		read_pcm_s32(s, pcm->runtime, desc->ctx_payload,
+ 			     desc->data_blocks);
+ 		pcm_frames = desc->data_blocks;
+ 	} else {
+ 		pcm_frames = 0;
+ 	}
  
- 	return data_blocks;
+ 	return pcm_frames;
  }
  
  static inline void compute_next_elapse_from_start(struct amdtp_motu *p)
@@@ -361,15 -365,12 +370,20 @@@ static void write_sph(struct amdtp_stre
  }
  
  static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +				__be32 *buffer, unsigned int data_blocks,
 +				unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
  	struct amdtp_motu *p = (struct amdtp_motu *)s->protocol;
- 	struct snd_pcm_substream *pcm;
+ 	unsigned int pcm_frames;
  
 +	/* Not used. */
 +	*syt = 0xffff;
 +
  	/* TODO: how to interact control messages between userspace? */
  
  	if (p->midi_ports)
diff --cc sound/firewire/tascam/amdtp-tascam.c
index 95fb10b7a737,970b1c4a8ea6..000000000000
--- a/sound/firewire/tascam/amdtp-tascam.c
+++ b/sound/firewire/tascam/amdtp-tascam.c
@@@ -166,38 -166,38 +166,61 @@@ static void read_status_messages(struc
  }
  
  static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
- 	struct snd_pcm_substream *pcm;
+ 	unsigned int pcm_frames;
  
- 	pcm = READ_ONCE(s->pcm);
- 	if (data_blocks > 0 && pcm)
- 		read_pcm_s32(s, pcm, buffer, data_blocks);
+ 	if (pcm) {
+ 		read_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks);
+ 		pcm_frames = desc->data_blocks;
+ 	} else {
+ 		pcm_frames = 0;
+ 	}
  
- 	read_status_messages(s, buffer, data_blocks);
+ 	read_status_messages(s, desc->ctx_payload, desc->data_blocks);
  
- 	return data_blocks;
+ 	return pcm_frames;
  }
  
  static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
++<<<<<<< HEAD
 +					   __be32 *buffer,
 +					   unsigned int data_blocks,
 +					   unsigned int *syt)
++=======
+ 					   const struct pkt_desc *desc,
+ 					   struct snd_pcm_substream *pcm)
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  {
- 	struct snd_pcm_substream *pcm;
+ 	unsigned int pcm_frames;
  
++<<<<<<< HEAD
 +	/* This field is not used. */
 +	*syt = 0x0000;
 +
 +	pcm = READ_ONCE(s->pcm);
 +	if (pcm)
 +		write_pcm_s32(s, pcm, buffer, data_blocks);
 +	else
 +		write_pcm_silence(s, buffer, data_blocks);
++=======
+ 	if (pcm) {
+ 		write_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks);
+ 		pcm_frames = desc->data_blocks;
+ 	} else {
+ 		write_pcm_silence(s, desc->ctx_payload, desc->data_blocks);
+ 		pcm_frames = 0;
+ 	}
++>>>>>>> d2c104a3426b (ALSA: firewire-lib: pass packet descriptor to data block processing layer)
  
- 	return data_blocks;
+ 	return pcm_frames;
  }
  
  int amdtp_tscm_init(struct amdtp_stream *s, struct fw_unit *unit,
* Unmerged path sound/firewire/amdtp-am824.c
* Unmerged path sound/firewire/amdtp-stream.c
* Unmerged path sound/firewire/amdtp-stream.h
* Unmerged path sound/firewire/digi00x/amdtp-dot.c
* Unmerged path sound/firewire/fireface/amdtp-ff.c
* Unmerged path sound/firewire/motu/amdtp-motu.c
* Unmerged path sound/firewire/tascam/amdtp-tascam.c
