net: replace ndo_get_devlink with ndo_get_devlink_port

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] replace ndo_get_devlink with ndo_get_devlink_port (Petr Oros) [1737527]
Rebuild_FUZZ: 95.15%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 5dc37bb9b03586e8fdeb47d25e8d2a0399984936
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5dc37bb9.failed

Follow-up patch is going to need a devlink port instance according to
a netdev. Devlink port instance should be always available when devlink
is used. So change the recently introduced ndo_get_devlink to
ndo_get_devlink_port. With that, adjust the wrapper for the only
user to get devlink pointer.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Michal Kubecek <mkubecek@suse.cz>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5dc37bb9b03586e8fdeb47d25e8d2a0399984936)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_devlink.c
#	include/linux/netdevice.h
#	include/net/devlink.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_devlink.c
index 3e2b3255d0e4,919da0d84fb4..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_devlink.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_devlink.c
@@@ -378,13 -376,23 +378,27 @@@ void nfp_devlink_port_unregister(struc
  	devlink_port_unregister(&port->dl_port);
  }
  
++<<<<<<< HEAD
 +struct devlink *nfp_devlink_get_devlink(struct net_device *netdev)
++=======
+ void nfp_devlink_port_type_eth_set(struct nfp_port *port)
  {
- 	struct nfp_app *app;
+ 	devlink_port_type_eth_set(&port->dl_port, port->netdev);
+ }
+ 
+ void nfp_devlink_port_type_clear(struct nfp_port *port)
+ {
+ 	devlink_port_type_clear(&port->dl_port);
+ }
+ 
+ struct devlink_port *nfp_devlink_get_devlink_port(struct net_device *netdev)
++>>>>>>> 5dc37bb9b035 (net: replace ndo_get_devlink with ndo_get_devlink_port)
+ {
+ 	struct nfp_port *port;
  
- 	app = nfp_app_from_netdev(netdev);
- 	if (!app)
+ 	port = nfp_port_from_netdev(netdev);
+ 	if (!port)
  		return NULL;
  
- 	return priv_to_devlink(app->pf);
+ 	return &port->dl_port;
  }
diff --cc include/linux/netdevice.h
index 4c743add611a,78f5ec4ebf64..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1307,6 -1250,10 +1307,13 @@@ struct net_device_ops_extended_rh 
   *	that got dropped are freed/returned via xdp_return_frame().
   *	Returns negative number, means general error invoking ndo, meaning
   *	no frames were xmit'ed and core-caller will free all frames.
++<<<<<<< HEAD
++=======
+  * struct devlink_port *(*ndo_get_devlink_port)(struct net_device *dev);
+  *	Get devlink port instance associated with a given netdev.
+  *	Called with a reference on the netdevice and devlink locks only,
+  *	rtnl_lock is not held.
++>>>>>>> 5dc37bb9b035 (net: replace ndo_get_devlink with ndo_get_devlink_port)
   */
  struct net_device_ops {
  	int			(*ndo_init)(struct net_device *dev);
@@@ -1500,63 -1444,14 +1507,70 @@@
  						       struct sk_buff *skb);
  	void			(*ndo_set_rx_headroom)(struct net_device *dev,
  						       int needed_headroom);
 -	int			(*ndo_bpf)(struct net_device *dev,
 -					   struct netdev_bpf *bpf);
 -	int			(*ndo_xdp_xmit)(struct net_device *dev, int n,
 +	RH_KABI_EXCLUDE(int	(*ndo_bpf)(struct net_device *dev,
 +					   struct netdev_bpf *bpf))
 +	RH_KABI_EXCLUDE(int	(*ndo_xdp_xmit)(struct net_device *dev, int n,
  						struct xdp_frame **xdp,
++<<<<<<< HEAD
 +						u32 flags))
 +	RH_KABI_EXCLUDE(int	(*ndo_xsk_async_xmit)(struct net_device *dev,
 +						      u32 queue_id))
 +
 +	RH_KABI_USE(1, int	(*ndo_get_port_parent_id)(struct net_device *dev,
 +							  struct netdev_phys_item_id *ppid))
 +	RH_KABI_RESERVE(2)
 +	RH_KABI_RESERVE(3)
 +	RH_KABI_RESERVE(4)
 +	RH_KABI_RESERVE(5)
 +	RH_KABI_RESERVE(6)
 +	RH_KABI_RESERVE(7)
 +	RH_KABI_RESERVE(8)
 +	RH_KABI_RESERVE(9)
 +	RH_KABI_RESERVE(10)
 +	RH_KABI_RESERVE(11)
 +	RH_KABI_RESERVE(12)
 +	RH_KABI_RESERVE(13)
 +	RH_KABI_RESERVE(14)
 +	RH_KABI_RESERVE(15)
 +	RH_KABI_RESERVE(16)
 +	RH_KABI_RESERVE(17)
 +	RH_KABI_RESERVE(18)
 +	RH_KABI_RESERVE(19)
 +	RH_KABI_RESERVE(20)
 +	RH_KABI_RESERVE(21)
 +	RH_KABI_RESERVE(22)
 +	RH_KABI_RESERVE(23)
 +	RH_KABI_RESERVE(24)
 +	RH_KABI_RESERVE(25)
 +	RH_KABI_RESERVE(26)
 +	RH_KABI_RESERVE(27)
 +	RH_KABI_RESERVE(28)
 +	RH_KABI_RESERVE(29)
 +	RH_KABI_RESERVE(30)
 +	RH_KABI_RESERVE(31)
 +	RH_KABI_RESERVE(32)
 +	RH_KABI_RESERVE(33)
 +	RH_KABI_RESERVE(34)
 +	RH_KABI_RESERVE(35)
 +	RH_KABI_RESERVE(36)
 +	RH_KABI_RESERVE(37)
 +	RH_KABI_RESERVE(38)
 +	RH_KABI_RESERVE(39)
 +	RH_KABI_RESERVE(40)
 +	RH_KABI_RESERVE(41)
 +	RH_KABI_RESERVE(42)
 +	RH_KABI_RESERVE(43)
 +	RH_KABI_RESERVE(44)
 +	RH_KABI_RESERVE(45)
 +	RH_KABI_RESERVE(46)
 +	RH_KABI_RESERVE(47)
 +	RH_KABI_SIZE_AND_EXTEND(net_device_ops_extended)
++=======
+ 						u32 flags);
+ 	int			(*ndo_xsk_async_xmit)(struct net_device *dev,
+ 						      u32 queue_id);
+ 	struct devlink_port *	(*ndo_get_devlink_port)(struct net_device *dev);
++>>>>>>> 5dc37bb9b035 (net: replace ndo_get_devlink with ndo_get_devlink_port)
  };
  
  /**
diff --cc include/net/devlink.h
index f8fe1084ed04,81b5ed04a341..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -551,10 -547,25 +551,30 @@@ static inline struct devlink *priv_to_d
  	return container_of(priv, struct devlink, priv);
  }
  
++<<<<<<< HEAD
++=======
+ static inline struct devlink_port *
+ netdev_to_devlink_port(struct net_device *dev)
+ {
+ 	if (dev->netdev_ops->ndo_get_devlink_port)
+ 		return dev->netdev_ops->ndo_get_devlink_port(dev);
+ 	return NULL;
+ }
+ 
+ static inline struct devlink *netdev_to_devlink(struct net_device *dev)
+ {
+ 	struct devlink_port *devlink_port = netdev_to_devlink_port(dev);
+ 
+ 	if (devlink_port)
+ 		return devlink_port->devlink;
+ 	return NULL;
+ }
+ 
++>>>>>>> 5dc37bb9b035 (net: replace ndo_get_devlink with ndo_get_devlink_port)
  struct ib_device;
  
 +#if IS_ENABLED(CONFIG_NET_DEVLINK)
 +
  struct devlink *devlink_alloc(const struct devlink_ops *ops, size_t priv_size);
  int devlink_register(struct devlink *devlink, struct device *dev);
  void devlink_unregister(struct devlink *devlink);
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_app.h b/drivers/net/ethernet/netronome/nfp/nfp_app.h
index f4e7513f980a..76d13af46a7a 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_app.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_app.h
@@ -436,6 +436,6 @@ int nfp_app_nic_vnic_alloc(struct nfp_app *app, struct nfp_net *nn,
 int nfp_app_nic_vnic_init_phy_port(struct nfp_pf *pf, struct nfp_app *app,
 				   struct nfp_net *nn, unsigned int id);
 
-struct devlink *nfp_devlink_get_devlink(struct net_device *netdev);
+struct devlink_port *nfp_devlink_get_devlink_port(struct net_device *netdev);
 
 #endif
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_devlink.c
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 3e328c1be49b..9554ab830e81 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@ -3541,7 +3541,7 @@ const struct net_device_ops nfp_net_netdev_ops = {
 	.ndo_udp_tunnel_del	= nfp_net_del_vxlan_port,
 	.ndo_bpf		= nfp_net_xdp,
 	.ndo_get_port_parent_id	= nfp_port_get_port_parent_id,
-	.ndo_get_devlink	= nfp_devlink_get_devlink,
+	.ndo_get_devlink_port	= nfp_devlink_get_devlink_port,
 };
 
 /**
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c b/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c
index 94d228c04496..0b44f851b276 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_repr.c
@@ -273,7 +273,7 @@ const struct net_device_ops nfp_repr_netdev_ops = {
 	.ndo_set_features	= nfp_port_set_features,
 	.ndo_set_mac_address    = eth_mac_addr,
 	.ndo_get_port_parent_id	= nfp_port_get_port_parent_id,
-	.ndo_get_devlink	= nfp_devlink_get_devlink,
+	.ndo_get_devlink_port	= nfp_devlink_get_devlink_port,
 };
 
 void
* Unmerged path include/linux/netdevice.h
* Unmerged path include/net/devlink.h
