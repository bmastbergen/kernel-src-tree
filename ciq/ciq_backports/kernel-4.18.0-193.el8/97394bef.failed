net: sched: change tcf block offload counter type to atomic_t

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] sched: change tcf block offload counter type to atomic_t (Ivan Vecera) [1739606]
Rebuild_FUZZ: 95.73%
commit-author Vlad Buslov <vladbu@mellanox.com>
commit 97394bef5622cb32fd1e5d152251090da6c238b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/97394bef.failed

As a preparation for running proto ops functions without rtnl lock, change
offload counter type to atomic. This is necessary to allow updating the
counter by multiple concurrent users when offloading filters to hardware
from unlocked classifiers.

	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 97394bef5622cb32fd1e5d152251090da6c238b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sch_generic.h
diff --cc include/net/sch_generic.h
index 13911b10ed82,d778c502decd..000000000000
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@@ -13,8 -13,11 +13,13 @@@
  #include <linux/refcount.h>
  #include <linux/workqueue.h>
  #include <linux/mutex.h>
++<<<<<<< HEAD
++=======
+ #include <linux/rwsem.h>
+ #include <linux/atomic.h>
++>>>>>>> 97394bef5622 (net: sched: change tcf block offload counter type to atomic_t)
  #include <net/gen_stats.h>
  #include <net/rtnetlink.h>
 -#include <net/flow_offload.h>
  
  struct Qdisc_ops;
  struct qdisc_walker;
@@@ -404,10 -398,11 +409,10 @@@ struct tcf_block 
  	refcount_t refcnt;
  	struct net *net;
  	struct Qdisc *q;
 -	struct rw_semaphore cb_lock; /* protects cb_list and offload counters */
 -	struct flow_block flow_block;
 +	struct list_head cb_list;
  	struct list_head owner_list;
  	bool keep_dst;
- 	unsigned int offloadcnt; /* Number of oddloaded filters */
+ 	atomic_t offloadcnt; /* Number of oddloaded filters */
  	unsigned int nooffloaddevcnt; /* Number of devs unable to do offload */
  	struct {
  		struct tcf_chain *chain;
* Unmerged path include/net/sch_generic.h
diff --git a/net/sched/cls_api.c b/net/sched/cls_api.c
index 081ac3d0fb50..94302b06712f 100644
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@ -797,7 +797,7 @@ static void tc_indr_block_call(struct tcf_block *block, struct net_device *dev,
 
 static bool tcf_block_offload_in_use(struct tcf_block *block)
 {
-	return block->offloadcnt;
+	return atomic_read(&block->offloadcnt);
 }
 
 static int tcf_block_offload_cmd(struct tcf_block *block,
