nl80211: fill all policy .type entries

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 1a28ed213696b379a64540ce1a879a07e36b44db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1a28ed21.failed

For old commands, it's fine to have .type = NLA_UNSPEC and it
behaves the same as NLA_MIN_LEN. However, for new commands with
strict validation this is no longer true, and for policy export
to userspace these are also ignored.

Fix up the remaining ones that don't have a type.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 1a28ed213696b379a64540ce1a879a07e36b44db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/wireless/nl80211.c
diff --cc net/wireless/nl80211.c
index 4e1c052bca2e,4892f307f51d..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -339,11 -359,15 +342,14 @@@ const struct nla_policy nl80211_policy[
  	[NL80211_ATTR_MESH_CONFIG] = { .type = NLA_NESTED },
  	[NL80211_ATTR_SUPPORT_MESH_AUTH] = { .type = NLA_FLAG },
  
- 	[NL80211_ATTR_HT_CAPABILITY] = { .len = NL80211_HT_CAPABILITY_LEN },
+ 	[NL80211_ATTR_HT_CAPABILITY] = {
+ 		.type = NLA_EXACT_LEN_WARN,
+ 		.len = NL80211_HT_CAPABILITY_LEN
+ 	},
  
  	[NL80211_ATTR_MGMT_SUBTYPE] = { .type = NLA_U8 },
 -	[NL80211_ATTR_IE] = NLA_POLICY_VALIDATE_FN(NLA_BINARY,
 -						   validate_ie_attr,
 -						   IEEE80211_MAX_DATA_LEN),
 +	[NL80211_ATTR_IE] = { .type = NLA_BINARY,
 +			      .len = IEEE80211_MAX_DATA_LEN },
  	[NL80211_ATTR_SCAN_FREQUENCIES] = { .type = NLA_NESTED },
  	[NL80211_ATTR_SCAN_SSIDS] = { .type = NLA_NESTED },
  
@@@ -418,11 -457,17 +427,14 @@@
  	[NL80211_ATTR_WDEV] = { .type = NLA_U64 },
  	[NL80211_ATTR_USER_REG_HINT_TYPE] = { .type = NLA_U32 },
  	[NL80211_ATTR_AUTH_DATA] = { .type = NLA_BINARY, },
- 	[NL80211_ATTR_VHT_CAPABILITY] = { .len = NL80211_VHT_CAPABILITY_LEN },
+ 	[NL80211_ATTR_VHT_CAPABILITY] = {
+ 		.type = NLA_EXACT_LEN_WARN,
+ 		.len = NL80211_VHT_CAPABILITY_LEN
+ 	},
  	[NL80211_ATTR_SCAN_FLAGS] = { .type = NLA_U32 },
 -	[NL80211_ATTR_P2P_CTWINDOW] = NLA_POLICY_MAX(NLA_U8, 127),
 -	[NL80211_ATTR_P2P_OPPPS] = NLA_POLICY_MAX(NLA_U8, 1),
 -	[NL80211_ATTR_LOCAL_MESH_POWER_MODE] =
 -		NLA_POLICY_RANGE(NLA_U32,
 -				 NL80211_MESH_POWER_UNKNOWN + 1,
 -				 NL80211_MESH_POWER_MAX),
 +	[NL80211_ATTR_P2P_CTWINDOW] = { .type = NLA_U8 },
 +	[NL80211_ATTR_P2P_OPPPS] = { .type = NLA_U8 },
 +	[NL80211_ATTR_LOCAL_MESH_POWER_MODE] = {. type = NLA_U32 },
  	[NL80211_ATTR_ACL_POLICY] = {. type = NLA_U32 },
  	[NL80211_ATTR_MAC_ADDRS] = { .type = NLA_NESTED },
  	[NL80211_ATTR_STA_CAPABILITY] = { .type = NLA_U16 },
@@@ -456,11 -505,15 +471,14 @@@
  	[NL80211_ATTR_SOCKET_OWNER] = { .type = NLA_FLAG },
  	[NL80211_ATTR_CSA_C_OFFSETS_TX] = { .type = NLA_BINARY },
  	[NL80211_ATTR_USE_RRM] = { .type = NLA_FLAG },
 -	[NL80211_ATTR_TSID] = NLA_POLICY_MAX(NLA_U8, IEEE80211_NUM_TIDS - 1),
 -	[NL80211_ATTR_USER_PRIO] =
 -		NLA_POLICY_MAX(NLA_U8, IEEE80211_NUM_UPS - 1),
 +	[NL80211_ATTR_TSID] = { .type = NLA_U8 },
 +	[NL80211_ATTR_USER_PRIO] = { .type = NLA_U8 },
  	[NL80211_ATTR_ADMITTED_TIME] = { .type = NLA_U16 },
  	[NL80211_ATTR_SMPS_MODE] = { .type = NLA_U8 },
- 	[NL80211_ATTR_MAC_MASK] = { .len = ETH_ALEN },
+ 	[NL80211_ATTR_MAC_MASK] = {
+ 		.type = NLA_EXACT_LEN_WARN,
+ 		.len = ETH_ALEN
+ 	},
  	[NL80211_ATTR_WIPHY_SELF_MANAGED_REG] = { .type = NLA_FLAG },
  	[NL80211_ATTR_NETNS_FD] = { .type = NLA_U32 },
  	[NL80211_ATTR_SCHED_SCAN_DELAY] = { .type = NLA_U32 },
@@@ -471,8 -525,11 +489,16 @@@
  	[NL80211_ATTR_MU_MIMO_GROUP_DATA] = {
  		.len = VHT_MUMIMO_GROUPS_DATA_LEN
  	},
++<<<<<<< HEAD
 +	[NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR] = { .len = ETH_ALEN },
 +	[NL80211_ATTR_NAN_MASTER_PREF] = { .type = NLA_U8 },
++=======
+ 	[NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR] = {
+ 		.type = NLA_EXACT_LEN_WARN,
+ 		.len = ETH_ALEN
+ 	},
+ 	[NL80211_ATTR_NAN_MASTER_PREF] = NLA_POLICY_MIN(NLA_U8, 1),
++>>>>>>> 1a28ed213696 (nl80211: fill all policy .type entries)
  	[NL80211_ATTR_BANDS] = { .type = NLA_U32 },
  	[NL80211_ATTR_NAN_FUNC] = { .type = NLA_NESTED },
  	[NL80211_ATTR_FILS_KEK] = { .type = NLA_BINARY,
@@@ -597,12 -665,13 +632,15 @@@ static const struct nla_polic
  nl80211_match_policy[NL80211_SCHED_SCAN_MATCH_ATTR_MAX + 1] = {
  	[NL80211_SCHED_SCAN_MATCH_ATTR_SSID] = { .type = NLA_BINARY,
  						 .len = IEEE80211_MAX_SSID_LEN },
- 	[NL80211_SCHED_SCAN_MATCH_ATTR_BSSID] = { .len = ETH_ALEN },
+ 	[NL80211_SCHED_SCAN_MATCH_ATTR_BSSID] = {
+ 		.type = NLA_EXACT_LEN_WARN,
+ 		.len = ETH_ALEN
+ 	},
  	[NL80211_SCHED_SCAN_MATCH_ATTR_RSSI] = { .type = NLA_U32 },
 +#if 0 /* Not in RHEL */
  	[NL80211_SCHED_SCAN_MATCH_PER_BAND_RSSI] =
  		NLA_POLICY_NESTED(nl80211_match_band_rssi_policy),
 +#endif
  };
  
  static const struct nla_policy
* Unmerged path net/wireless/nl80211.c
