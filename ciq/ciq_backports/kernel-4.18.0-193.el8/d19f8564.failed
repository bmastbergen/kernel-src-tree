perf bpf: Add bpf_map dumper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit d19f856479feef7c1383f02b87688563a0ef7a14
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d19f8564.failed

At some point I'll suggest moving this to libbpf, for now I'll
experiment with ways to dump BPF maps set by events in 'perf trace',
starting with a very basic dumper for the current very limited needs
of the augmented_raw_syscalls code: dumping booleans.

Having functions that apply to the map keys and values and do table
lookup in things like syscall id to string tables should come next.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Martin KaFai Lau <kafai@fb.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Yonghong Song <yhs@fb.com>
Link: https://lkml.kernel.org/n/tip-lz14w0esqyt1333aon05jpwc@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d19f856479feef7c1383f02b87688563a0ef7a14)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/Build
diff --cc tools/perf/util/Build
index c4cd5217b90e,8dd3102301ea..000000000000
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@@ -1,125 -1,128 +1,134 @@@
 -perf-y += annotate.o
 -perf-y += block-range.o
 -perf-y += build-id.o
 -perf-y += config.o
 -perf-y += ctype.o
 -perf-y += db-export.o
 -perf-y += env.o
 -perf-y += event.o
 -perf-y += evlist.o
 -perf-y += evsel.o
 -perf-y += evsel_fprintf.o
 -perf-y += find_bit.o
 -perf-y += get_current_dir_name.o
 -perf-y += kallsyms.o
 -perf-y += levenshtein.o
 -perf-y += llvm-utils.o
 -perf-y += mmap.o
 -perf-y += memswap.o
 -perf-y += parse-events.o
 -perf-y += perf_regs.o
 -perf-y += path.o
 -perf-y += print_binary.o
 -perf-y += rbtree.o
 -perf-y += libstring.o
 -perf-y += bitmap.o
 -perf-y += hweight.o
 -perf-y += smt.o
 -perf-y += strbuf.o
 -perf-y += string.o
 -perf-y += strlist.o
 -perf-y += strfilter.o
 -perf-y += top.o
 -perf-y += usage.o
 -perf-y += dso.o
 -perf-y += symbol.o
 -perf-y += symbol_fprintf.o
 -perf-y += color.o
 -perf-y += color_config.o
 -perf-y += metricgroup.o
 -perf-y += header.o
 -perf-y += callchain.o
 -perf-y += values.o
 -perf-y += debug.o
 -perf-y += machine.o
 -perf-y += map.o
 -perf-y += pstack.o
 -perf-y += session.o
 -perf-y += sample-raw.o
 -perf-y += s390-sample-raw.o
 -perf-$(CONFIG_TRACE) += syscalltbl.o
 -perf-y += ordered-events.o
 -perf-y += namespaces.o
 -perf-y += comm.o
 -perf-y += thread.o
 -perf-y += thread_map.o
 -perf-y += trace-event-parse.o
 -perf-y += parse-events-flex.o
 -perf-y += parse-events-bison.o
 -perf-y += pmu.o
 -perf-y += pmu-flex.o
 -perf-y += pmu-bison.o
 -perf-y += trace-event-read.o
 -perf-y += trace-event-info.o
 -perf-y += trace-event-scripting.o
 -perf-y += trace-event.o
 -perf-y += svghelper.o
 -perf-y += sort.o
 -perf-y += hist.o
 -perf-y += util.o
 -perf-y += xyarray.o
 -perf-y += cpumap.o
 -perf-y += cputopo.o
 -perf-y += cgroup.o
 -perf-y += target.o
 -perf-y += rblist.o
 -perf-y += intlist.o
 -perf-y += vdso.o
 -perf-y += counts.o
 -perf-y += stat.o
 -perf-y += stat-shadow.o
 -perf-y += stat-display.o
 -perf-y += record.o
 -perf-y += srcline.o
 -perf-y += srccode.o
 -perf-y += data.o
 -perf-y += tsc.o
 -perf-y += cloexec.o
 -perf-y += call-path.o
 -perf-y += rwsem.o
 -perf-y += thread-stack.o
 -perf-$(CONFIG_AUXTRACE) += auxtrace.o
 -perf-$(CONFIG_AUXTRACE) += intel-pt-decoder/
 -perf-$(CONFIG_AUXTRACE) += intel-pt.o
 -perf-$(CONFIG_AUXTRACE) += intel-bts.o
 -perf-$(CONFIG_AUXTRACE) += arm-spe.o
 -perf-$(CONFIG_AUXTRACE) += arm-spe-pkt-decoder.o
 -perf-$(CONFIG_AUXTRACE) += s390-cpumsf.o
 +libperf-y += annotate.o
 +libperf-y += block-range.o
 +libperf-y += build-id.o
 +libperf-y += config.o
 +libperf-y += ctype.o
 +libperf-y += db-export.o
 +libperf-y += env.o
 +libperf-y += event.o
 +libperf-y += evlist.o
 +libperf-y += evsel.o
 +libperf-y += evsel_fprintf.o
 +libperf-y += find_bit.o
 +libperf-y += kallsyms.o
 +libperf-y += levenshtein.o
 +libperf-y += llvm-utils.o
 +libperf-y += mmap.o
 +libperf-y += memswap.o
 +libperf-y += parse-events.o
 +libperf-y += perf_regs.o
 +libperf-y += path.o
 +libperf-y += print_binary.o
 +libperf-y += rbtree.o
 +libperf-y += libstring.o
 +libperf-y += bitmap.o
 +libperf-y += hweight.o
 +libperf-y += smt.o
 +libperf-y += strbuf.o
 +libperf-y += string.o
 +libperf-y += strlist.o
 +libperf-y += strfilter.o
 +libperf-y += top.o
 +libperf-y += usage.o
 +libperf-y += dso.o
 +libperf-y += symbol.o
 +libperf-y += symbol_fprintf.o
 +libperf-y += color.o
 +libperf-y += color_config.o
 +libperf-y += metricgroup.o
 +libperf-y += header.o
 +libperf-y += callchain.o
 +libperf-y += values.o
 +libperf-y += debug.o
 +libperf-y += machine.o
 +libperf-y += map.o
 +libperf-y += pstack.o
 +libperf-y += session.o
 +libperf-y += sample-raw.o
 +libperf-y += s390-sample-raw.o
 +libperf-$(CONFIG_TRACE) += syscalltbl.o
 +libperf-y += ordered-events.o
 +libperf-y += namespaces.o
 +libperf-y += comm.o
 +libperf-y += thread.o
 +libperf-y += thread_map.o
 +libperf-y += trace-event-parse.o
 +libperf-y += parse-events-flex.o
 +libperf-y += parse-events-bison.o
 +libperf-y += pmu.o
 +libperf-y += pmu-flex.o
 +libperf-y += pmu-bison.o
 +libperf-y += trace-event-read.o
 +libperf-y += trace-event-info.o
 +libperf-y += trace-event-scripting.o
 +libperf-y += trace-event.o
 +libperf-y += svghelper.o
 +libperf-y += sort.o
 +libperf-y += hist.o
 +libperf-y += util.o
 +libperf-y += xyarray.o
 +libperf-y += cpumap.o
 +libperf-y += cgroup.o
 +libperf-y += target.o
 +libperf-y += rblist.o
 +libperf-y += intlist.o
 +libperf-y += vdso.o
 +libperf-y += counts.o
 +libperf-y += stat.o
 +libperf-y += stat-shadow.o
 +libperf-y += stat-display.o
 +libperf-y += record.o
 +libperf-y += srcline.o
 +libperf-y += srccode.o
 +libperf-y += data.o
 +libperf-y += tsc.o
 +libperf-y += cloexec.o
 +libperf-y += call-path.o
 +libperf-y += rwsem.o
 +libperf-y += thread-stack.o
 +libperf-$(CONFIG_AUXTRACE) += auxtrace.o
 +libperf-$(CONFIG_AUXTRACE) += intel-pt-decoder/
 +libperf-$(CONFIG_AUXTRACE) += intel-pt.o
 +libperf-$(CONFIG_AUXTRACE) += intel-bts.o
 +libperf-$(CONFIG_AUXTRACE) += arm-spe.o
 +libperf-$(CONFIG_AUXTRACE) += arm-spe-pkt-decoder.o
 +libperf-$(CONFIG_AUXTRACE) += s390-cpumsf.o
  
  ifdef CONFIG_LIBOPENCSD
 -perf-$(CONFIG_AUXTRACE) += cs-etm.o
 -perf-$(CONFIG_AUXTRACE) += cs-etm-decoder/
 +libperf-$(CONFIG_AUXTRACE) += cs-etm.o
 +libperf-$(CONFIG_AUXTRACE) += cs-etm-decoder/
  endif
  
 -perf-y += parse-branch-options.o
 -perf-y += dump-insn.o
 -perf-y += parse-regs-options.o
 -perf-y += term.o
 -perf-y += help-unknown-cmd.o
 -perf-y += mem-events.o
 -perf-y += vsprintf.o
 -perf-y += units.o
 -perf-y += time-utils.o
 -perf-y += expr-bison.o
 -perf-y += branch.o
 -perf-y += mem2node.o
 -
 +libperf-y += parse-branch-options.o
 +libperf-y += dump-insn.o
 +libperf-y += parse-regs-options.o
 +libperf-y += term.o
 +libperf-y += help-unknown-cmd.o
 +libperf-y += mem-events.o
 +libperf-y += vsprintf.o
 +libperf-y += units.o
 +libperf-y += time-utils.o
 +libperf-y += expr-bison.o
 +libperf-y += branch.o
 +libperf-y += mem2node.o
 +
++<<<<<<< HEAD
 +libperf-$(CONFIG_LIBBPF) += bpf-loader.o
 +libperf-$(CONFIG_BPF_PROLOGUE) += bpf-prologue.o
 +libperf-$(CONFIG_LIBELF) += symbol-elf.o
 +libperf-$(CONFIG_LIBELF) += probe-file.o
 +libperf-$(CONFIG_LIBELF) += probe-event.o
++=======
+ perf-$(CONFIG_LIBBPF) += bpf-loader.o
+ perf-$(CONFIG_LIBBPF) += bpf_map.o
+ perf-$(CONFIG_BPF_PROLOGUE) += bpf-prologue.o
+ perf-$(CONFIG_LIBELF) += symbol-elf.o
+ perf-$(CONFIG_LIBELF) += probe-file.o
+ perf-$(CONFIG_LIBELF) += probe-event.o
++>>>>>>> d19f856479fe (perf bpf: Add bpf_map dumper)
  
  ifndef CONFIG_LIBELF
 -perf-y += symbol-minimal.o
 +libperf-y += symbol-minimal.o
  endif
  
  ifndef CONFIG_SETNS
* Unmerged path tools/perf/util/Build
diff --git a/tools/perf/util/bpf_map.c b/tools/perf/util/bpf_map.c
new file mode 100644
index 000000000000..eb853ca67cf4
--- /dev/null
+++ b/tools/perf/util/bpf_map.c
@@ -0,0 +1,72 @@
+// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
+
+#include "util/bpf_map.h"
+#include <bpf/bpf.h>
+#include <bpf/libbpf.h>
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <stdbool.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+static bool bpf_map_def__is_per_cpu(const struct bpf_map_def *def)
+{
+	return def->type == BPF_MAP_TYPE_PERCPU_HASH ||
+	       def->type == BPF_MAP_TYPE_PERCPU_ARRAY ||
+	       def->type == BPF_MAP_TYPE_LRU_PERCPU_HASH ||
+	       def->type == BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE;
+}
+
+static void *bpf_map_def__alloc_value(const struct bpf_map_def *def)
+{
+	if (bpf_map_def__is_per_cpu(def))
+		return malloc(round_up(def->value_size, 8) * sysconf(_SC_NPROCESSORS_CONF));
+
+	return malloc(def->value_size);
+}
+
+int bpf_map__fprintf(struct bpf_map *map, FILE *fp)
+{
+	const struct bpf_map_def *def = bpf_map__def(map);
+	void *prev_key = NULL, *key, *value;
+	int fd = bpf_map__fd(map), err;
+	int printed = 0;
+
+	if (fd < 0)
+		return fd;
+
+	if (IS_ERR(def))
+		return PTR_ERR(def);
+
+	err = -ENOMEM;
+	key = malloc(def->key_size);
+	if (key == NULL)
+		goto out;
+
+	value = bpf_map_def__alloc_value(def);
+	if (value == NULL)
+		goto out_free_key;
+
+	while ((err = bpf_map_get_next_key(fd, prev_key, key) == 0)) {
+		int intkey = *(int *)key;
+
+		if (!bpf_map_lookup_elem(fd, key, value)) {
+			bool boolval = *(bool *)value;
+			if (boolval)
+				printed += fprintf(fp, "[%d] = %d,\n", intkey, boolval);
+		} else {
+			printed += fprintf(fp, "[%d] = ERROR,\n", intkey);
+		}
+
+		prev_key = key;
+	}
+
+	if (err == ENOENT)
+		err = printed;
+
+	free(value);
+out_free_key:
+	free(key);
+out:
+	return err;
+}
diff --git a/tools/perf/util/bpf_map.h b/tools/perf/util/bpf_map.h
new file mode 100644
index 000000000000..d6abd5e47af8
--- /dev/null
+++ b/tools/perf/util/bpf_map.h
@@ -0,0 +1,22 @@
+// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
+#ifndef __PERF_BPF_MAP_H
+#define __PERF_BPF_MAP_H 1
+
+#include <stdio.h>
+#include <linux/compiler.h>
+struct bpf_map;
+
+#ifdef HAVE_LIBBPF_SUPPORT
+
+int bpf_map__fprintf(struct bpf_map *map, FILE *fp);
+
+#else
+
+static inline int bpf_map__fprintf(struct bpf_map *map __maybe_unused, FILE *fp __maybe_unused)
+{
+	return 0;
+}
+
+#endif // HAVE_LIBBPF_SUPPORT
+
+#endif // __PERF_BPF_MAP_H
