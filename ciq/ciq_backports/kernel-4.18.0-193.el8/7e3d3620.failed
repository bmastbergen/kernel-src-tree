SUNRPC: Fix up calculation of client message length

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Trond Myklebust <trondmy@gmail.com>
commit 7e3d3620974b743b91b1f9d0660061b1de20174c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7e3d3620.failed

In the case where a record marker was used, xs_sendpages() needs
to return the length of the payload + record marker so that we
operate correctly in the case of a partial transmission.
When the callers check return value, they therefore need to
take into account the record marker length.

Fixes: 06b5fc3ad94e ("Merge tag 'nfs-rdma-for-5.1-1'...")
	Cc: stable@vger.kernel.org # 5.1+
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit 7e3d3620974b743b91b1f9d0660061b1de20174c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtsock.c
diff --cc net/sunrpc/xprtsock.c
index 2984e705d710,36652352a38c..000000000000
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@@ -566,8 -966,7 +568,12 @@@ static int xs_local_send_request(struc
  
  	req->rq_xtime = ktime_get();
  	status = xs_sendpages(transport->sock, NULL, 0, xdr,
++<<<<<<< HEAD
 +			      transport->xmit.offset,
 +			      &sent);
++=======
+ 			      transport->xmit.offset, rm, &sent);
++>>>>>>> 7e3d3620974b (SUNRPC: Fix up calculation of client message length)
  	dprintk("RPC:       %s(%u) = %d\n",
  			__func__, xdr->len - transport->xmit.offset, status);
  
@@@ -577,9 -976,8 +583,9 @@@
  	if (likely(sent > 0) || status == 0) {
  		transport->xmit.offset += sent;
  		req->rq_bytes_sent = transport->xmit.offset;
- 		if (likely(req->rq_bytes_sent >= req->rq_slen)) {
+ 		if (likely(req->rq_bytes_sent >= msglen)) {
  			req->rq_xmit_bytes_sent += transport->xmit.offset;
 +			req->rq_bytes_sent = 0;
  			transport->xmit.offset = 0;
  			return 0;
  		}
@@@ -722,8 -1124,7 +730,12 @@@ static int xs_tcp_send_request(struct r
  	while (1) {
  		sent = 0;
  		status = xs_sendpages(transport->sock, NULL, 0, xdr,
++<<<<<<< HEAD
 +				      transport->xmit.offset,
 +				      &sent);
++=======
+ 				      transport->xmit.offset, rm, &sent);
++>>>>>>> 7e3d3620974b (SUNRPC: Fix up calculation of client message length)
  
  		dprintk("RPC:       xs_tcp_send_request(%u) = %d\n",
  				xdr->len - transport->xmit.offset, status);
@@@ -732,9 -1133,8 +744,9 @@@
  		 * reset the count of bytes sent. */
  		transport->xmit.offset += sent;
  		req->rq_bytes_sent = transport->xmit.offset;
- 		if (likely(req->rq_bytes_sent >= req->rq_slen)) {
+ 		if (likely(req->rq_bytes_sent >= msglen)) {
  			req->rq_xmit_bytes_sent += transport->xmit.offset;
 +			req->rq_bytes_sent = 0;
  			transport->xmit.offset = 0;
  			return 0;
  		}
* Unmerged path net/sunrpc/xprtsock.c
