x86/speculation: Fix incorrect MDS/TAA mitigation status

jira LE-1907
cve CVE-2019-11135
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [x86] speculation: Fix incorrect MDS/TAA mitigation status (Josh Poimboeuf) [1766551] {CVE-2019-11135}
Rebuild_FUZZ: 96.30%
commit-author Waiman Long <longman@redhat.com>
commit 64870ed1b12e235cfca3f6c6da75b542c973ff78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/64870ed1.failed

For MDS vulnerable processors with TSX support, enabling either MDS or
TAA mitigations will enable the use of VERW to flush internal processor
buffers at the right code path. IOW, they are either both mitigated
or both not. However, if the command line options are inconsistent,
the vulnerabilites sysfs files may not report the mitigation status
correctly.

For example, with only the "mds=off" option:

  vulnerabilities/mds:Vulnerable; SMT vulnerable
  vulnerabilities/tsx_async_abort:Mitigation: Clear CPU buffers; SMT vulnerable

The mds vulnerabilities file has wrong status in this case. Similarly,
the taa vulnerability file will be wrong with mds mitigation on, but
taa off.

Change taa_select_mitigation() to sync up the two mitigation status
and have them turned off if both "mds=off" and "tsx_async_abort=off"
are present.

Update documentation to emphasize the fact that both "mds=off" and
"tsx_async_abort=off" have to be specified together for processors that
are affected by both TAA and MDS to be effective.

 [ bp: Massage and add kernel-parameters.txt change too. ]

Fixes: 1b42f017415b ("x86/speculation/taa: Add mitigation for TSX Async Abort")
	Signed-off-by: Waiman Long <longman@redhat.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Jiri Kosina <jkosina@suse.cz>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: linux-doc@vger.kernel.org
	Cc: Mark Gross <mgross@linux.intel.com>
	Cc: <stable@vger.kernel.org>
	Cc: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tim Chen <tim.c.chen@linux.intel.com>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Tyler Hicks <tyhicks@canonical.com>
	Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/20191115161445.30809-2-longman@redhat.com
(cherry picked from commit 64870ed1b12e235cfca3f6c6da75b542c973ff78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/hw-vuln/tsx_async_abort.rst
#	Documentation/admin-guide/kernel-parameters.txt
diff --cc Documentation/admin-guide/kernel-parameters.txt
index abc80c27fc4d,9983ac73b66d..000000000000
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@@ -4739,6 -4881,76 +4745,79 @@@
  			interruptions from clocksource watchdog are not
  			acceptable).
  
++<<<<<<< HEAD
++=======
+ 	tsx=		[X86] Control Transactional Synchronization
+ 			Extensions (TSX) feature in Intel processors that
+ 			support TSX control.
+ 
+ 			This parameter controls the TSX feature. The options are:
+ 
+ 			on	- Enable TSX on the system. Although there are
+ 				mitigations for all known security vulnerabilities,
+ 				TSX has been known to be an accelerator for
+ 				several previous speculation-related CVEs, and
+ 				so there may be unknown	security risks associated
+ 				with leaving it enabled.
+ 
+ 			off	- Disable TSX on the system. (Note that this
+ 				option takes effect only on newer CPUs which are
+ 				not vulnerable to MDS, i.e., have
+ 				MSR_IA32_ARCH_CAPABILITIES.MDS_NO=1 and which get
+ 				the new IA32_TSX_CTRL MSR through a microcode
+ 				update. This new MSR allows for the reliable
+ 				deactivation of the TSX functionality.)
+ 
+ 			auto	- Disable TSX if X86_BUG_TAA is present,
+ 				  otherwise enable TSX on the system.
+ 
+ 			Not specifying this option is equivalent to tsx=off.
+ 
+ 			See Documentation/admin-guide/hw-vuln/tsx_async_abort.rst
+ 			for more details.
+ 
+ 	tsx_async_abort= [X86,INTEL] Control mitigation for the TSX Async
+ 			Abort (TAA) vulnerability.
+ 
+ 			Similar to Micro-architectural Data Sampling (MDS)
+ 			certain CPUs that support Transactional
+ 			Synchronization Extensions (TSX) are vulnerable to an
+ 			exploit against CPU internal buffers which can forward
+ 			information to a disclosure gadget under certain
+ 			conditions.
+ 
+ 			In vulnerable processors, the speculatively forwarded
+ 			data can be used in a cache side channel attack, to
+ 			access data to which the attacker does not have direct
+ 			access.
+ 
+ 			This parameter controls the TAA mitigation.  The
+ 			options are:
+ 
+ 			full       - Enable TAA mitigation on vulnerable CPUs
+ 				     if TSX is enabled.
+ 
+ 			full,nosmt - Enable TAA mitigation and disable SMT on
+ 				     vulnerable CPUs. If TSX is disabled, SMT
+ 				     is not disabled because CPU is not
+ 				     vulnerable to cross-thread TAA attacks.
+ 			off        - Unconditionally disable TAA mitigation
+ 
+ 			On MDS-affected machines, tsx_async_abort=off can be
+ 			prevented by an active MDS mitigation as both vulnerabilities
+ 			are mitigated with the same mechanism so in order to disable
+ 			this mitigation, you need to specify mds=off too.
+ 
+ 			Not specifying this option is equivalent to
+ 			tsx_async_abort=full.  On CPUs which are MDS affected
+ 			and deploy MDS mitigation, TAA mitigation is not
+ 			required and doesn't provide any additional
+ 			mitigation.
+ 
+ 			For details see:
+ 			Documentation/admin-guide/hw-vuln/tsx_async_abort.rst
+ 
++>>>>>>> 64870ed1b12e (x86/speculation: Fix incorrect MDS/TAA mitigation status)
  	turbografx.map[2|3]=	[HW,JOY]
  			TurboGraFX parallel port interface
  			Format:
* Unmerged path Documentation/admin-guide/hw-vuln/tsx_async_abort.rst
diff --git a/Documentation/admin-guide/hw-vuln/mds.rst b/Documentation/admin-guide/hw-vuln/mds.rst
index e3a796c0d3a2..2d19c9f4c1fe 100644
--- a/Documentation/admin-guide/hw-vuln/mds.rst
+++ b/Documentation/admin-guide/hw-vuln/mds.rst
@@ -265,8 +265,11 @@ time with the option "mds=". The valid arguments for this option are:
 
   ============  =============================================================
 
-Not specifying this option is equivalent to "mds=full".
-
+Not specifying this option is equivalent to "mds=full". For processors
+that are affected by both TAA (TSX Asynchronous Abort) and MDS,
+specifying just "mds=off" without an accompanying "tsx_async_abort=off"
+will have no effect as the same mitigation is used for both
+vulnerabilities.
 
 Mitigation selection guide
 --------------------------
* Unmerged path Documentation/admin-guide/hw-vuln/tsx_async_abort.rst
* Unmerged path Documentation/admin-guide/kernel-parameters.txt
diff --git a/arch/x86/kernel/cpu/bugs.c b/arch/x86/kernel/cpu/bugs.c
index d96c29c907c9..8d630b2c11a8 100644
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@ -307,8 +307,12 @@ static void __init taa_select_mitigation(void)
 		return;
 	}
 
-	/* TAA mitigation is turned off on the cmdline (tsx_async_abort=off) */
-	if (taa_mitigation == TAA_MITIGATION_OFF)
+	/*
+	 * TAA mitigation via VERW is turned off if both
+	 * tsx_async_abort=off and mds=off are specified.
+	 */
+	if (taa_mitigation == TAA_MITIGATION_OFF &&
+	    mds_mitigation == MDS_MITIGATION_OFF)
 		goto out;
 
 	if (boot_cpu_has(X86_FEATURE_MD_CLEAR))
@@ -342,6 +346,15 @@ static void __init taa_select_mitigation(void)
 	if (taa_nosmt || cpu_mitigations_auto_nosmt())
 		cpu_smt_disable(false);
 
+	/*
+	 * Update MDS mitigation, if necessary, as the mds_user_clear is
+	 * now enabled for TAA mitigation.
+	 */
+	if (mds_mitigation == MDS_MITIGATION_OFF &&
+	    boot_cpu_has_bug(X86_BUG_MDS)) {
+		mds_mitigation = MDS_MITIGATION_FULL;
+		mds_select_mitigation();
+	}
 out:
 	pr_info("%s\n", taa_strings[taa_mitigation]);
 }
