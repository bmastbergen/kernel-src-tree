cifs: smbd: Don't destroy transport on RDMA disconnect

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Long Li <longli@microsoft.com>
commit e8b3bfe9bc651acd0338b331fcee3aaafb27caeb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/e8b3bfe9.failed

Now upper layer is handling the transport shutdown and reconnect, remove
the code that handling transport shutdown on RDMA disconnect.

	Signed-off-by: Long Li <longli@microsoft.com>
	Signed-off-by: Steve French <stfrench@microsoft.com>
(cherry picked from commit e8b3bfe9bc651acd0338b331fcee3aaafb27caeb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/smbdirect.c
diff --cc fs/cifs/smbdirect.c
index 2a84907ca5c3,72594277f800..000000000000
--- a/fs/cifs/smbdirect.c
+++ b/fs/cifs/smbdirect.c
@@@ -2126,10 -2029,16 +2029,23 @@@ int smbd_recv(struct smbd_connection *i
  	unsigned int to_read, page_offset;
  	int rc;
  
++<<<<<<< HEAD
 +	info->smbd_recv_pending++;
 +
 +	switch (msg->msg_iter.type) {
 +	case READ | ITER_KVEC:
++=======
+ 	if (iov_iter_rw(&msg->msg_iter) == WRITE) {
+ 		/* It's a bug in upper layer to get there */
+ 		cifs_dbg(VFS, "CIFS: invalid msg iter dir %u\n",
+ 			 iov_iter_rw(&msg->msg_iter));
+ 		rc = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	switch (iov_iter_type(&msg->msg_iter)) {
+ 	case ITER_KVEC:
++>>>>>>> e8b3bfe9bc65 (cifs: smbd: Don't destroy transport on RDMA disconnect)
  		buf = msg->msg_iter.kvec->iov_base;
  		to_read = msg->msg_iter.kvec->iov_len;
  		rc = smbd_recv_buf(info, buf, to_read);
@@@ -2149,9 -2058,7 +2065,13 @@@
  		rc = -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	info->smbd_recv_pending--;
 +	wake_up(&info->wait_smbd_recv_pending);
 +
++=======
+ out:
++>>>>>>> e8b3bfe9bc65 (cifs: smbd: Don't destroy transport on RDMA disconnect)
  	/* SMBDirect will read it all or nothing */
  	if (rc > 0)
  		msg->msg_iter.count = 0;
@@@ -2177,10 -2083,7 +2097,9 @@@ int smbd_send(struct TCP_Server_Info *s
  		info->max_send_size - sizeof(struct smbd_data_transfer);
  	struct kvec *iov;
  	int rc;
 +	struct smb_rqst *rqst;
 +	int rqst_idx;
  
- 	info->smbd_send_pending++;
  	if (info->transport_status != SMBD_CONNECTED) {
  		rc = -ENODEV;
  		goto done;
diff --git a/fs/cifs/cifs_debug.c b/fs/cifs/cifs_debug.c
index b86d069603c3..d167fb1b7802 100644
--- a/fs/cifs/cifs_debug.c
+++ b/fs/cifs/cifs_debug.c
@@ -310,12 +310,10 @@ static int cifs_debug_data_proc_show(struct seq_file *m, void *v)
 			atomic_read(&server->smbd_conn->send_credits),
 			atomic_read(&server->smbd_conn->receive_credits),
 			server->smbd_conn->receive_credit_target);
-		seq_printf(m, "\nPending send_pending: %x send_payload_pending:"
-			" %x smbd_send_pending: %x smbd_recv_pending: %x",
+		seq_printf(m, "\nPending send_pending: %x "
+			"send_payload_pending: %x",
 			atomic_read(&server->smbd_conn->send_pending),
-			atomic_read(&server->smbd_conn->send_payload_pending),
-			server->smbd_conn->smbd_send_pending,
-			server->smbd_conn->smbd_recv_pending);
+			atomic_read(&server->smbd_conn->send_payload_pending));
 		seq_printf(m, "\nReceive buffers count_receive_queue: %x "
 			"count_empty_packet_queue: %x",
 			server->smbd_conn->count_receive_queue,
* Unmerged path fs/cifs/smbdirect.c
diff --git a/fs/cifs/smbdirect.h b/fs/cifs/smbdirect.h
index b0ca7df41454..f6241b8bce5f 100644
--- a/fs/cifs/smbdirect.h
+++ b/fs/cifs/smbdirect.h
@@ -70,13 +70,11 @@ struct smbd_connection {
 	int ri_rc;
 	struct completion ri_done;
 	wait_queue_head_t conn_wait;
-	wait_queue_head_t wait_destroy;
 	wait_queue_head_t disconn_wait;
 
 	struct completion negotiate_completion;
 	bool negotiate_done;
 
-	struct work_struct destroy_work;
 	struct work_struct disconnect_work;
 	struct work_struct recv_done_work;
 	struct work_struct post_send_credits_work;
@@ -124,13 +122,6 @@ struct smbd_connection {
 	wait_queue_head_t wait_for_mr_cleanup;
 
 	/* Activity accoutning */
-	/* Pending reqeusts issued from upper layer */
-	int smbd_send_pending;
-	wait_queue_head_t wait_smbd_send_pending;
-
-	int smbd_recv_pending;
-	wait_queue_head_t wait_smbd_recv_pending;
-
 	atomic_t send_pending;
 	wait_queue_head_t wait_send_pending;
 	atomic_t send_payload_pending;
