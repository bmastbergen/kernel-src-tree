net: Fixed updating of ethertype in skb_mpls_push()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] Fixed updating of ethertype in skb_mpls_push() (Ivan Vecera) [1789862]
Rebuild_FUZZ: 94.85%
commit-author Martin Varghese <martin.varghese@nokia.com>
commit d04ac224b1688f005a84f764cfe29844f8e9da08
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d04ac224.failed

The skb_mpls_push was not updating ethertype of an ethernet packet if
the packet was originally received from a non ARPHRD_ETHER device.

In the below OVS data path flow, since the device corresponding to
port 7 is an l3 device (ARPHRD_NONE) the skb_mpls_push function does
not update the ethertype of the packet even though the previous
push_eth action had added an ethernet header to the packet.

recirc_id(0),in_port(7),eth_type(0x0800),ipv4(tos=0/0xfc,ttl=64,frag=no),
actions:push_eth(src=00:00:00:00:00:00,dst=00:00:00:00:00:00),
push_mpls(label=13,tc=0,ttl=64,bos=1,eth_type=0x8847),4

Fixes: 8822e270d697 ("net: core: move push MPLS functionality from OvS to core helper")
	Signed-off-by: Martin Varghese <martin.varghese@nokia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d04ac224b1688f005a84f764cfe29844f8e9da08)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/skbuff.h
#	net/core/skbuff.c
#	net/openvswitch/actions.c
#	net/sched/act_mpls.c
diff --cc include/linux/skbuff.h
index e1d0fa223b89,e9133bcf0544..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -3436,7 -3528,12 +3436,16 @@@ int skb_ensure_writable(struct sk_buff 
  int __skb_vlan_pop(struct sk_buff *skb, u16 *vlan_tci);
  int skb_vlan_pop(struct sk_buff *skb);
  int skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci);
++<<<<<<< HEAD
 +int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto);
++=======
+ int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto,
+ 		  int mac_len, bool ethernet);
+ int skb_mpls_pop(struct sk_buff *skb, __be16 next_proto, int mac_len,
+ 		 bool ethernet);
+ int skb_mpls_update_lse(struct sk_buff *skb, __be32 mpls_lse);
+ int skb_mpls_dec_ttl(struct sk_buff *skb);
++>>>>>>> d04ac224b168 (net: Fixed updating of ethertype in skb_mpls_push())
  struct sk_buff *pskb_extract(struct sk_buff *skb, int off, int to_copy,
  			     gfp_t gfp);
  
diff --cc net/core/skbuff.c
index 083b4d0722c0,973a71f4bc89..000000000000
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@@ -5362,7 -5483,8 +5362,12 @@@ static void skb_mod_eth_type(struct sk_
   *
   * Returns 0 on success, -errno otherwise.
   */
++<<<<<<< HEAD
 +int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto)
++=======
+ int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto,
+ 		  int mac_len, bool ethernet)
++>>>>>>> d04ac224b168 (net: Fixed updating of ethertype in skb_mpls_push())
  {
  	struct mpls_shim_hdr *lse;
  	int err;
diff --cc net/openvswitch/actions.c
index c45ff6be42d0,4c8395462303..000000000000
--- a/net/openvswitch/actions.c
+++ b/net/openvswitch/actions.c
@@@ -186,7 -165,9 +186,13 @@@ static int push_mpls(struct sk_buff *sk
  {
  	int err;
  
++<<<<<<< HEAD
 +	err = skb_mpls_push(skb, mpls->mpls_lse, mpls->mpls_ethertype);
++=======
+ 	err = skb_mpls_push(skb, mpls->mpls_lse, mpls->mpls_ethertype,
+ 			    skb->mac_len,
+ 			    ovs_key_mac_proto(key) == MAC_PROTO_ETHERNET);
++>>>>>>> d04ac224b168 (net: Fixed updating of ethertype in skb_mpls_push())
  	if (err)
  		return err;
  
* Unmerged path net/sched/act_mpls.c
* Unmerged path include/linux/skbuff.h
* Unmerged path net/core/skbuff.c
* Unmerged path net/openvswitch/actions.c
* Unmerged path net/sched/act_mpls.c
