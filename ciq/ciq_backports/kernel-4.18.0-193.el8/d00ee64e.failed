netlink: Fix nlmsg_parse as a wrapper for strict message parsing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author David Ahern <dsahern@gmail.com>
commit d00ee64e1dcf09b3afefd1340f3e9eb637272714
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d00ee64e.failed

Eric reported a syzbot warning:

BUG: KMSAN: uninit-value in nh_valid_get_del_req+0x6f1/0x8c0 net/ipv4/nexthop.c:1510
CPU: 0 PID: 11812 Comm: syz-executor444 Not tainted 5.3.0-rc3+ #17
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 __dump_stack lib/dump_stack.c:77 [inline]
 dump_stack+0x191/0x1f0 lib/dump_stack.c:113
 kmsan_report+0x162/0x2d0 mm/kmsan/kmsan_report.c:109
 __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:294
 nh_valid_get_del_req+0x6f1/0x8c0 net/ipv4/nexthop.c:1510
 rtm_del_nexthop+0x1b1/0x610 net/ipv4/nexthop.c:1543
 rtnetlink_rcv_msg+0x115a/0x1580 net/core/rtnetlink.c:5223
 netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
 rtnetlink_rcv+0x50/0x60 net/core/rtnetlink.c:5241
 netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
 netlink_unicast+0xf6c/0x1050 net/netlink/af_netlink.c:1328
 netlink_sendmsg+0x110f/0x1330 net/netlink/af_netlink.c:1917
 sock_sendmsg_nosec net/socket.c:637 [inline]
 sock_sendmsg net/socket.c:657 [inline]
 ___sys_sendmsg+0x14ff/0x1590 net/socket.c:2311
 __sys_sendmmsg+0x53a/0xae0 net/socket.c:2413
 __do_sys_sendmmsg net/socket.c:2442 [inline]
 __se_sys_sendmmsg+0xbd/0xe0 net/socket.c:2439
 __x64_sys_sendmmsg+0x56/0x70 net/socket.c:2439
 do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:297
 entry_SYSCALL_64_after_hwframe+0x63/0xe7

The root cause is nlmsg_parse calling __nla_parse which means the
header struct size is not checked.

nlmsg_parse should be a wrapper around __nlmsg_parse with
NL_VALIDATE_STRICT for the validate argument very much like
nlmsg_parse_deprecated is for NL_VALIDATE_LIBERAL.

Fixes: 3de6440354465 ("netlink: re-add parse/validate functions in strict mode")
	Reported-by: Eric Dumazet <edumazet@google.com>
	Reported-by: syzbot <syzkaller@googlegroups.com>
	Signed-off-by: David Ahern <dsahern@gmail.com>
	Reviewed-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
(cherry picked from commit d00ee64e1dcf09b3afefd1340f3e9eb637272714)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netlink.h
diff --cc include/net/netlink.h
index 01d3e027e7e1,b140c8f1be22..000000000000
--- a/include/net/netlink.h
+++ b/include/net/netlink.h
@@@ -435,32 -652,79 +435,37 @@@ nlmsg_next(const struct nlmsghdr *nlh, 
   *
   * See nla_parse()
   */
 -static inline int __nlmsg_parse(const struct nlmsghdr *nlh, int hdrlen,
 -				struct nlattr *tb[], int maxtype,
 -				const struct nla_policy *policy,
 -				unsigned int validate,
 -				struct netlink_ext_ack *extack)
 +static inline int nlmsg_parse(const struct nlmsghdr *nlh, int hdrlen,
 +			      struct nlattr *tb[], int maxtype,
 +			      const struct nla_policy *policy,
 +			      struct netlink_ext_ack *extack)
  {
++<<<<<<< HEAD
  	if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen)) {
  		NL_SET_ERR_MSG(extack, "Invalid header length");
  		return -EINVAL;
  	}
  
 -	return __nla_parse(tb, maxtype, nlmsg_attrdata(nlh, hdrlen),
 -			   nlmsg_attrlen(nlh, hdrlen), policy, validate,
 -			   extack);
 -}
 -
 -/**
 - * nlmsg_parse - parse attributes of a netlink message
 - * @nlh: netlink message header
 - * @hdrlen: length of family specific header
 - * @tb: destination array with maxtype+1 elements
 - * @maxtype: maximum attribute type to be expected
 - * @validate: validation strictness
 - * @extack: extended ACK report struct
 - *
 - * See nla_parse()
 - */
 -static inline int nlmsg_parse(const struct nlmsghdr *nlh, int hdrlen,
 -			      struct nlattr *tb[], int maxtype,
 -			      const struct nla_policy *policy,
 -			      struct netlink_ext_ack *extack)
 -{
 +	return nla_parse(tb, maxtype, nlmsg_attrdata(nlh, hdrlen),
 +			 nlmsg_attrlen(nlh, hdrlen), policy, extack);
++=======
+ 	return __nlmsg_parse(nlh, hdrlen, tb, maxtype, policy,
+ 			     NL_VALIDATE_STRICT, extack);
++>>>>>>> d00ee64e1dcf (netlink: Fix nlmsg_parse as a wrapper for strict message parsing)
  }
  
 -/**
 - * nlmsg_parse_deprecated - parse attributes of a netlink message
 - * @nlh: netlink message header
 - * @hdrlen: length of family specific header
 - * @tb: destination array with maxtype+1 elements
 - * @maxtype: maximum attribute type to be expected
 - * @extack: extended ACK report struct
 - *
 - * See nla_parse_deprecated()
 - */
 -static inline int nlmsg_parse_deprecated(const struct nlmsghdr *nlh, int hdrlen,
 -					 struct nlattr *tb[], int maxtype,
 -					 const struct nla_policy *policy,
 -					 struct netlink_ext_ack *extack)
 +static inline int nlmsg_parse_strict(const struct nlmsghdr *nlh, int hdrlen,
 +				     struct nlattr *tb[], int maxtype,
 +				     const struct nla_policy *policy,
 +				     struct netlink_ext_ack *extack)
  {
 -	return __nlmsg_parse(nlh, hdrlen, tb, maxtype, policy,
 -			     NL_VALIDATE_LIBERAL, extack);
 -}
 +	if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen)) {
 +		NL_SET_ERR_MSG(extack, "Invalid header length");
 +		return -EINVAL;
 +	}
  
 -/**
 - * nlmsg_parse_deprecated_strict - parse attributes of a netlink message
 - * @nlh: netlink message header
 - * @hdrlen: length of family specific header
 - * @tb: destination array with maxtype+1 elements
 - * @maxtype: maximum attribute type to be expected
 - * @extack: extended ACK report struct
 - *
 - * See nla_parse_deprecated_strict()
 - */
 -static inline int
 -nlmsg_parse_deprecated_strict(const struct nlmsghdr *nlh, int hdrlen,
 -			      struct nlattr *tb[], int maxtype,
 -			      const struct nla_policy *policy,
 -			      struct netlink_ext_ack *extack)
 -{
 -	return __nlmsg_parse(nlh, hdrlen, tb, maxtype, policy,
 -			     NL_VALIDATE_DEPRECATED_STRICT, extack);
 +	return nla_parse_strict(tb, maxtype, nlmsg_attrdata(nlh, hdrlen),
 +				nlmsg_attrlen(nlh, hdrlen), policy, extack);
  }
  
  /**
* Unmerged path include/net/netlink.h
