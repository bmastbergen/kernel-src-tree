HID: logitech-hidpp: rework device validation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [hid] logitech-hidpp: rework device validation (Benjamin Tissoires) [1740778]
Rebuild_FUZZ: 94.12%
commit-author Andrey Smirnov <andrew.smirnov@gmail.com>
commit 905d754c53a522aacf806ea1d3e7c929148c1910
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/905d754c.failed

G920 device only advertises REPORT_ID_HIDPP_LONG and
REPORT_ID_HIDPP_VERY_LONG in its HID report descriptor, so querying
for REPORT_ID_HIDPP_SHORT with optional=false will always fail and
prevent G920 to be recognized as a valid HID++ device.

To fix this and improve some other aspects, modify
hidpp_validate_device() as follows:

  - Inline the code of hidpp_validate_report() to simplify
    distingushing between non-present and invalid report descriptors

  - Drop the check for id >= HID_MAX_IDS || id < 0 since all of our
    IDs are static and known to satisfy that at compile time

  - Change the algorithms to check all possible report
    types (including very long report) and deem the device as a valid
    HID++ device if it supports at least one

  - Treat invalid report length as a hard stop for the validation
    algorithm, meaning that if any of the supported reports has
    invalid length we assume the worst and treat the device as a
    generic HID device.

  - Fold initialization of hidpp->very_long_report_length into
    hidpp_validate_device() since it already fetches very long report
    length and validates its value

Fixes: fe3ee1ec007b ("HID: logitech-hidpp: allow non HID++ devices to be handled by this module")
Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=204191
	Reported-by: Sam Bazely <sambazley@fastmail.com>
	Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
	Cc: Jiri Kosina <jikos@kernel.org>
	Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Cc: Henrik Rydberg <rydberg@bitmath.org>
	Cc: Pierre-Loup A. Griffais <pgriffais@valvesoftware.com>
	Cc: Austin Palmer <austinp@valvesoftware.com>
	Cc: linux-input@vger.kernel.org
	Cc: linux-kernel@vger.kernel.org
	Cc: stable@vger.kernel.org # 5.2+
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
(cherry picked from commit 905d754c53a522aacf806ea1d3e7c929148c1910)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-logitech-hidpp.c
diff --cc drivers/hid/hid-logitech-hidpp.c
index 31cfa2c12192,6e669eb7dc69..000000000000
--- a/drivers/hid/hid-logitech-hidpp.c
+++ b/drivers/hid/hid-logitech-hidpp.c
@@@ -3174,6 -3485,71 +3174,74 @@@ static const struct attribute_group ps_
  	.attrs = sysfs_attrs
  };
  
++<<<<<<< HEAD
++=======
+ static int hidpp_get_report_length(struct hid_device *hdev, int id)
+ {
+ 	struct hid_report_enum *re;
+ 	struct hid_report *report;
+ 
+ 	re = &(hdev->report_enum[HID_OUTPUT_REPORT]);
+ 	report = re->report_id_hash[id];
+ 	if (!report)
+ 		return 0;
+ 
+ 	return report->field[0]->report_count + 1;
+ }
+ 
+ static bool hidpp_validate_device(struct hid_device *hdev)
+ {
+ 	struct hidpp_device *hidpp = hid_get_drvdata(hdev);
+ 	int id, report_length, supported_reports = 0;
+ 
+ 	id = REPORT_ID_HIDPP_SHORT;
+ 	report_length = hidpp_get_report_length(hdev, id);
+ 	if (report_length) {
+ 		if (report_length < HIDPP_REPORT_SHORT_LENGTH)
+ 			goto bad_device;
+ 
+ 		supported_reports++;
+ 	}
+ 
+ 	id = REPORT_ID_HIDPP_LONG;
+ 	report_length = hidpp_get_report_length(hdev, id);
+ 	if (report_length) {
+ 		if (report_length < HIDPP_REPORT_LONG_LENGTH)
+ 			goto bad_device;
+ 
+ 		supported_reports++;
+ 	}
+ 
+ 	id = REPORT_ID_HIDPP_VERY_LONG;
+ 	report_length = hidpp_get_report_length(hdev, id);
+ 	if (report_length) {
+ 		if (report_length < HIDPP_REPORT_LONG_LENGTH ||
+ 		    report_length > HIDPP_REPORT_VERY_LONG_MAX_LENGTH)
+ 			goto bad_device;
+ 
+ 		supported_reports++;
+ 		hidpp->very_long_report_length = report_length;
+ 	}
+ 
+ 	return supported_reports;
+ 
+ bad_device:
+ 	hid_warn(hdev, "not enough values in hidpp report %d\n", id);
+ 	return false;
+ }
+ 
+ static bool hidpp_application_equals(struct hid_device *hdev,
+ 				     unsigned int application)
+ {
+ 	struct list_head *report_list;
+ 	struct hid_report *report;
+ 
+ 	report_list = &hdev->report_enum[HID_INPUT_REPORT].report_list;
+ 	report = list_first_entry_or_null(report_list, struct hid_report, list);
+ 	return report && report->application == application;
+ }
+ 
++>>>>>>> 905d754c53a5 (HID: logitech-hidpp: rework device validation)
  static int hidpp_probe(struct hid_device *hdev, const struct hid_device_id *id)
  {
  	struct hidpp_device *hidpp;
@@@ -3188,9 -3565,23 +3256,26 @@@
  
  	hidpp->hid_dev = hdev;
  	hidpp->name = hdev->name;
 -	hidpp->quirks = id->driver_data;
  	hid_set_drvdata(hdev, hidpp);
  
++<<<<<<< HEAD
 +	hidpp->quirks = id->driver_data;
++=======
+ 	ret = hid_parse(hdev);
+ 	if (ret) {
+ 		hid_err(hdev, "%s:parse failed\n", __func__);
+ 		return ret;
+ 	}
+ 
+ 	/*
+ 	 * Make sure the device is HID++ capable, otherwise treat as generic HID
+ 	 */
+ 	if (!hidpp_validate_device(hdev)) {
+ 		hid_set_drvdata(hdev, NULL);
+ 		devm_kfree(&hdev->dev, hidpp);
+ 		return hid_hw_start(hdev, HID_CONNECT_DEFAULT);
+ 	}
++>>>>>>> 905d754c53a5 (HID: logitech-hidpp: rework device validation)
  
  	if (id->group == HID_GROUP_LOGITECH_DJ_DEVICE)
  		hidpp->quirks |= HIDPP_QUIRK_UNIFYING;
* Unmerged path drivers/hid/hid-logitech-hidpp.c
