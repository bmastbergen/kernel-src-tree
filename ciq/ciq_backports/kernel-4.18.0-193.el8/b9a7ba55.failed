net/mlx5: Use event mask based on device capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Use event mask based on device capabilities (Alaa Hleihel) [1724308 1724336]
Rebuild_FUZZ: 96.08%
commit-author Yishai Hadas <yishaih@mellanox.com>
commit b9a7ba5562074855e8a3f92ea7e1174b61a3e87d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/b9a7ba55.failed

Use the reported device capabilities for the supported user events (i.e.
affiliated and un-affiliated) to set the EQ mask.

As the event mask can be up to 256 defined by 4 entries of u64 change
the applicable code to work accordingly.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Acked-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit b9a7ba5562074855e8a3f92ea7e1174b61a3e87d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/odp.c
#	drivers/net/ethernet/mellanox/mlx5/core/eq.c
#	include/linux/mlx5/eq.h
diff --cc drivers/infiniband/hw/mlx5/odp.c
index 1b121572d183,831c450b271a..000000000000
--- a/drivers/infiniband/hw/mlx5/odp.c
+++ b/drivers/infiniband/hw/mlx5/odp.c
@@@ -1556,11 -1557,10 +1556,16 @@@ mlx5_ib_create_pf_eq(struct mlx5_ib_de
  
  	eq->irq_nb.notifier_call = mlx5_ib_eq_pf_int;
  	param = (struct mlx5_eq_param) {
++<<<<<<< HEAD
 +		.index = MLX5_EQ_PFAULT_IDX,
 +		.mask = 1 << MLX5_EVENT_TYPE_PAGE_FAULT,
++=======
+ 		.irq_index = 0,
++>>>>>>> b9a7ba556207 (net/mlx5: Use event mask based on device capabilities)
  		.nent = MLX5_IB_NUM_PF_EQE,
 +		.nb = &eq->irq_nb,
  	};
+ 	param.mask[0] = 1ull << MLX5_EVENT_TYPE_PAGE_FAULT;
  	eq->core = mlx5_eq_create_generic(dev->mdev, &param);
  	if (IS_ERR(eq->core)) {
  		err = PTR_ERR(eq->core);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eq.c
index caec78eff82e,33f78d4d3724..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@@ -609,10 -559,14 +628,13 @@@ static void gather_async_events_mask(st
  	if (MLX5_CAP_GEN(dev, max_num_of_monitor_counters))
  		async_event_mask |= (1ull << MLX5_EVENT_TYPE_MONITOR_COUNTER);
  
 -	if (mlx5_eswitch_is_funcs_handler(dev))
 -		async_event_mask |=
 -			(1ull << MLX5_EVENT_TYPE_ESW_FUNCTIONS_CHANGED);
 +	if (mlx5_core_is_ecpf_esw_manager(dev))
 +		async_event_mask |= (1ull << MLX5_EVENT_TYPE_HOST_PARAMS_CHANGE);
  
- 	return async_event_mask;
+ 	mask[0] = async_event_mask;
+ 
+ 	if (MLX5_CAP_GEN(dev, event_cap))
+ 		gather_user_async_events(dev, mask);
  }
  
  static int create_async_eqs(struct mlx5_core_dev *dev)
@@@ -626,11 -580,11 +648,17 @@@
  
  	table->cmd_eq.irq_nb.notifier_call = mlx5_eq_async_int;
  	param = (struct mlx5_eq_param) {
++<<<<<<< HEAD
 +		.index = MLX5_EQ_CMD_IDX,
 +		.mask = 1ull << MLX5_EVENT_TYPE_CMD,
++=======
+ 		.irq_index = 0,
++>>>>>>> b9a7ba556207 (net/mlx5: Use event mask based on device capabilities)
  		.nent = MLX5_NUM_CMD_EQE,
 +		.nb = &table->cmd_eq.irq_nb,
  	};
+ 
+ 	param.mask[0] = 1ull << MLX5_EVENT_TYPE_CMD;
  	err = create_async_eq(dev, &table->cmd_eq.core, &param);
  	if (err) {
  		mlx5_core_warn(dev, "failed to create cmd EQ %d\n", err);
@@@ -641,11 -599,11 +669,17 @@@
  
  	table->async_eq.irq_nb.notifier_call = mlx5_eq_async_int;
  	param = (struct mlx5_eq_param) {
++<<<<<<< HEAD
 +		.index = MLX5_EQ_ASYNC_IDX,
 +		.mask = gather_async_events_mask(dev),
++=======
+ 		.irq_index = 0,
++>>>>>>> b9a7ba556207 (net/mlx5: Use event mask based on device capabilities)
  		.nent = MLX5_NUM_ASYNC_EQE,
 +		.nb = &table->async_eq.irq_nb,
  	};
+ 
+ 	gather_async_events_mask(dev, param.mask);
  	err = create_async_eq(dev, &table->async_eq.core, &param);
  	if (err) {
  		mlx5_core_warn(dev, "failed to create async EQ %d\n", err);
@@@ -654,11 -618,11 +688,17 @@@
  
  	table->pages_eq.irq_nb.notifier_call = mlx5_eq_async_int;
  	param = (struct mlx5_eq_param) {
++<<<<<<< HEAD
 +		.index = MLX5_EQ_PAGEREQ_IDX,
 +		.mask =  1 << MLX5_EVENT_TYPE_PAGE_REQUEST,
++=======
+ 		.irq_index = 0,
++>>>>>>> b9a7ba556207 (net/mlx5: Use event mask based on device capabilities)
  		.nent = /* TODO: sriov max_vf + */ 1,
 +		.nb = &table->pages_eq.irq_nb,
  	};
+ 
+ 	param.mask[0] = 1ull << MLX5_EVENT_TYPE_PAGE_REQUEST;
  	err = create_async_eq(dev, &table->pages_eq.core, &param);
  	if (err) {
  		mlx5_core_warn(dev, "failed to create pages EQ %d\n", err);
@@@ -908,15 -811,10 +948,19 @@@ static int create_comp_eqs(struct mlx5_
  		tasklet_init(&eq->tasklet_ctx.task, mlx5_cq_tasklet_cb,
  			     (unsigned long)&eq->tasklet_ctx);
  
 +#ifdef CONFIG_RFS_ACCEL
 +		irq_cpu_rmap_add(table->rmap, pci_irq_vector(dev->pdev, vecidx));
 +#endif
  		eq->irq_nb.notifier_call = mlx5_eq_comp_int;
  		param = (struct mlx5_eq_param) {
++<<<<<<< HEAD
 +			.index = vecidx,
 +			.mask = 0,
++=======
+ 			.irq_index = vecidx,
++>>>>>>> b9a7ba556207 (net/mlx5: Use event mask based on device capabilities)
  			.nent = nent,
 +			.nb = &eq->irq_nb,
  		};
  		err = create_map_eq(dev, &eq->core, &param);
  		if (err) {
diff --cc include/linux/mlx5/eq.h
index 73ab658af764,e49d8c0d4f26..000000000000
--- a/include/linux/mlx5/eq.h
+++ b/include/linux/mlx5/eq.h
@@@ -23,10 -13,9 +23,14 @@@ struct mlx5_eq
  struct mlx5_core_dev;
  
  struct mlx5_eq_param {
 -	u8             irq_index;
 +	u8             index;
  	int            nent;
++<<<<<<< HEAD
 +	u64            mask;
 +	struct notifier_block *nb;
++=======
+ 	u64            mask[4];
++>>>>>>> b9a7ba556207 (net/mlx5: Use event mask based on device capabilities)
  };
  
  struct mlx5_eq *
* Unmerged path drivers/infiniband/hw/mlx5/odp.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eq.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fw.c b/drivers/net/ethernet/mellanox/mlx5/core/fw.c
index 1ab6f7e3bec6..05367f15c3a7 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fw.c
@@ -202,6 +202,12 @@ int mlx5_query_hca_caps(struct mlx5_core_dev *dev)
 			return err;
 	}
 
+	if (MLX5_CAP_GEN(dev, event_cap)) {
+		err = mlx5_core_get_caps(dev, MLX5_CAP_DEV_EVENT);
+		if (err)
+			return err;
+	}
+
 	return 0;
 }
 
diff --git a/include/linux/mlx5/device.h b/include/linux/mlx5/device.h
index fc2b6e807f06..373a1b650a01 100644
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@ -351,7 +351,7 @@ enum mlx5_event {
 
 	MLX5_EVENT_TYPE_DEVICE_TRACER      = 0x26,
 
-	MLX5_EVENT_TYPE_MAX                = MLX5_EVENT_TYPE_DEVICE_TRACER + 1,
+	MLX5_EVENT_TYPE_MAX                = 0x100,
 };
 
 enum {
@@ -1077,6 +1077,7 @@ enum mlx5_cap_type {
 	MLX5_CAP_DEBUG,
 	MLX5_CAP_RESERVED_14,
 	MLX5_CAP_DEV_MEM,
+	MLX5_CAP_DEV_EVENT = 0x14,
 	/* NUM OF CAP Types */
 	MLX5_CAP_NUM
 };
@@ -1255,6 +1256,9 @@ enum mlx5_qcam_feature_groups {
 #define MLX5_CAP64_DEV_MEM(mdev, cap)\
 	MLX5_GET64(device_mem_cap, mdev->caps.hca_cur[MLX5_CAP_DEV_MEM], cap)
 
+#define MLX5_CAP_DEV_EVENT(mdev, cap)\
+	MLX5_ADDR_OF(device_event_cap, (mdev)->caps.hca_cur[MLX5_CAP_DEV_EVENT], cap)
+
 enum {
 	MLX5_CMD_STAT_OK			= 0x0,
 	MLX5_CMD_STAT_INT_ERR			= 0x1,
* Unmerged path include/linux/mlx5/eq.h
diff --git a/include/linux/mlx5/mlx5_ifc.h b/include/linux/mlx5/mlx5_ifc.h
index ecb477572bac..79c19d8d4c56 100644
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@ -827,6 +827,12 @@ struct mlx5_ifc_device_mem_cap_bits {
 	u8         reserved_at_180[0x680];
 };
 
+struct mlx5_ifc_device_event_cap_bits {
+	u8         user_affiliated_events[4][0x40];
+
+	u8         user_unaffiliated_events[4][0x40];
+};
+
 enum {
 	MLX5_ATOMIC_CAPS_ATOMIC_SIZE_QP_1_BYTE     = 0x0,
 	MLX5_ATOMIC_CAPS_ATOMIC_SIZE_QP_2_BYTES    = 0x2,
@@ -984,7 +990,8 @@ struct mlx5_ifc_cmd_hca_cap_bits {
 
 	u8         log_max_srq_sz[0x8];
 	u8         log_max_qp_sz[0x8];
-	u8         reserved_at_90[0x8];
+	u8         event_cap[0x1];
+	u8         reserved_at_91[0x7];
 	u8         prio_tag_required[0x1];
 	u8         reserved_at_99[0x2];
 	u8         log_max_qp[0x5];
@@ -7377,9 +7384,9 @@ struct mlx5_ifc_create_eq_in_bits {
 
 	u8         reserved_at_280[0x40];
 
-	u8         event_bitmask[0x40];
+	u8         event_bitmask[4][0x40];
 
-	u8         reserved_at_300[0x580];
+	u8         reserved_at_3c0[0x4c0];
 
 	u8         pas[0][0x40];
 };
