s390/qeth: cache max number of available buffer elements

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Julian Wiedmann <jwi@linux.ibm.com>
commit 4e26c5fe552e5f0d9e3abcea48cd311af232bed9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4e26c5fe.failed

The QETH_MAX_BUFFER_ELEMENTS() macro effectively returns a constant
value. To avoid some redundant pointer chasing and computations in the
xmit hot path, cache this value in the queue struct.

Take this as opportunity to shrink some of the queue struct's fields to
their appropriate value range, slightly reducing its total size.

	Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4e26c5fe552e5f0d9e3abcea48cd311af232bed9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/net/qeth_core.h
#	drivers/s390/net/qeth_core_main.c
diff --cc drivers/s390/net/qeth_core.h
index e9aab93585dd,73afbb8b69e5..000000000000
--- a/drivers/s390/net/qeth_core.h
+++ b/drivers/s390/net/qeth_core.h
@@@ -465,14 -483,13 +465,17 @@@ struct qeth_qdio_out_q 
  	struct qdio_buffer *qdio_bufs[QDIO_MAX_BUFFERS_PER_Q];
  	struct qeth_qdio_out_buffer *bufs[QDIO_MAX_BUFFERS_PER_Q];
  	struct qdio_outbuf_state *bufstates; /* convenience pointer */
++<<<<<<< HEAD
 +	int queue_no;
++=======
+ 	struct qeth_out_q_stats stats;
+ 	u8 next_buf_to_fill;
+ 	u8 max_elements;
+ 	u8 queue_no;
+ 	u8 do_pack;
++>>>>>>> 4e26c5fe552e (s390/qeth: cache max number of available buffer elements)
  	struct qeth_card *card;
  	atomic_t state;
- 	int do_pack;
- 	/*
- 	 * index of buffer to be filled by driver; state EMPTY or PACKING
- 	 */
- 	int next_buf_to_fill;
  	/*
  	 * number of buffers that are currently filled (PRIMED)
  	 * -> these buffers are hardware-owned
diff --cc drivers/s390/net/qeth_core_main.c
index 6ca4665a0044,009f2c0ec504..000000000000
--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@@ -3716,12 -3700,13 +3716,16 @@@ EXPORT_SYMBOL_GPL(qeth_count_elements)
   * The number of needed buffer elements is returned in @elements.
   * Error to create the hdr is indicated by returning with < 0.
   */
 -static int qeth_add_hw_header(struct qeth_qdio_out_q *queue,
 -			      struct sk_buff *skb, struct qeth_hdr **hdr,
 -			      unsigned int hdr_len, unsigned int proto_len,
 -			      unsigned int *elements)
 -{
 +static int qeth_add_hw_header(struct qeth_card *card, struct sk_buff *skb,
 +			      struct qeth_hdr **hdr, unsigned int hdr_len,
 +			      unsigned int proto_len, unsigned int *elements)
 +{
++<<<<<<< HEAD
 +	const unsigned int max_elements = QETH_MAX_BUFFER_ELEMENTS(card);
++=======
++>>>>>>> 4e26c5fe552e (s390/qeth: cache max number of available buffer elements)
  	const unsigned int contiguous = proto_len ? proto_len : 1;
+ 	const unsigned int max_elements = queue->max_elements;
  	unsigned int __elements;
  	addr_t start, end;
  	bool push_ok;
@@@ -3891,12 -3875,11 +3895,17 @@@ static int qeth_fill_buffer(struct qeth
  		QETH_CARD_TEXT(queue->card, 6, "fillbfnp");
  	} else {
  		QETH_CARD_TEXT(queue->card, 6, "fillbfpa");
 +		if (queue->card->options.performance_stats)
 +			queue->card->perf_stats.skbs_sent_pack++;
  
 -		QETH_TXQ_STAT_INC(queue, skbs_pack);
  		/* If the buffer still has free elements, keep using it. */
++<<<<<<< HEAD
 +		if (buf->next_element_to_fill <
 +		    QETH_MAX_BUFFER_ELEMENTS(queue->card))
++=======
+ 		if (!flush &&
+ 		    buf->next_element_to_fill < queue->max_elements)
++>>>>>>> 4e26c5fe552e (s390/qeth: cache max number of available buffer elements)
  			return 0;
  	}
  
* Unmerged path drivers/s390/net/qeth_core.h
* Unmerged path drivers/s390/net/qeth_core_main.c
diff --git a/drivers/s390/net/qeth_l2_main.c b/drivers/s390/net/qeth_l2_main.c
index ec11b4223905..a68b8e95d2a2 100644
--- a/drivers/s390/net/qeth_l2_main.c
+++ b/drivers/s390/net/qeth_l2_main.c
@@ -587,7 +587,7 @@ static int qeth_l2_xmit_osn(struct qeth_card *card, struct sk_buff *skb,
 	}
 
 	elements += qeth_count_elements(skb, hd_len);
-	if (elements > QETH_MAX_BUFFER_ELEMENTS(card)) {
+	if (elements > queue->max_elements) {
 		rc = -E2BIG;
 		goto out;
 	}
