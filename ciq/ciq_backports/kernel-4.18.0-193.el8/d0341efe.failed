Revert "HID: logitech: fix a used uninitialized GCC warning"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit d0341efe7449860e1bbfdd282b3b7f0c34309222
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d0341efe.failed

This reverts commit 5fe2ccbef9d7aecf5c4402c753444f1a12096cfd.

It turns out the current API is not that compatible with
some Microsoft mice, so better start again from scratch.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Acked-by: Harry Cutts <hcutts@chromium.org>
	Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
	Acked-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit d0341efe7449860e1bbfdd282b3b7f0c34309222)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-logitech-hidpp.c
diff --cc drivers/hid/hid-logitech-hidpp.c
index 19cc980eebce,5f0c080059c6..000000000000
--- a/drivers/hid/hid-logitech-hidpp.c
+++ b/drivers/hid/hid-logitech-hidpp.c
@@@ -1137,6 -1167,101 +1137,104 @@@ static int hidpp_battery_get_property(s
  }
  
  /* -------------------------------------------------------------------------- */
++<<<<<<< HEAD
++=======
+ /* 0x2120: Hi-resolution scrolling                                            */
+ /* -------------------------------------------------------------------------- */
+ 
+ #define HIDPP_PAGE_HI_RESOLUTION_SCROLLING			0x2120
+ 
+ #define CMD_HI_RESOLUTION_SCROLLING_SET_HIGHRES_SCROLLING_MODE	0x10
+ 
+ static int hidpp_hrs_set_highres_scrolling_mode(struct hidpp_device *hidpp,
+ 	bool enabled, u8 *multiplier)
+ {
+ 	u8 feature_index;
+ 	u8 feature_type;
+ 	int ret;
+ 	u8 params[1];
+ 	struct hidpp_report response;
+ 
+ 	ret = hidpp_root_get_feature(hidpp,
+ 				     HIDPP_PAGE_HI_RESOLUTION_SCROLLING,
+ 				     &feature_index,
+ 				     &feature_type);
+ 	if (ret)
+ 		return ret;
+ 
+ 	params[0] = enabled ? BIT(0) : 0;
+ 	ret = hidpp_send_fap_command_sync(hidpp, feature_index,
+ 					  CMD_HI_RESOLUTION_SCROLLING_SET_HIGHRES_SCROLLING_MODE,
+ 					  params, sizeof(params), &response);
+ 	if (ret)
+ 		return ret;
+ 	*multiplier = response.fap.params[1];
+ 	return 0;
+ }
+ 
+ /* -------------------------------------------------------------------------- */
+ /* 0x2121: HiRes Wheel                                                        */
+ /* -------------------------------------------------------------------------- */
+ 
+ #define HIDPP_PAGE_HIRES_WHEEL		0x2121
+ 
+ #define CMD_HIRES_WHEEL_GET_WHEEL_CAPABILITY	0x00
+ #define CMD_HIRES_WHEEL_SET_WHEEL_MODE		0x20
+ 
+ static int hidpp_hrw_get_wheel_capability(struct hidpp_device *hidpp,
+ 	u8 *multiplier)
+ {
+ 	u8 feature_index;
+ 	u8 feature_type;
+ 	int ret;
+ 	struct hidpp_report response;
+ 
+ 	ret = hidpp_root_get_feature(hidpp, HIDPP_PAGE_HIRES_WHEEL,
+ 				     &feature_index, &feature_type);
+ 	if (ret)
+ 		goto return_default;
+ 
+ 	ret = hidpp_send_fap_command_sync(hidpp, feature_index,
+ 					  CMD_HIRES_WHEEL_GET_WHEEL_CAPABILITY,
+ 					  NULL, 0, &response);
+ 	if (ret)
+ 		goto return_default;
+ 
+ 	*multiplier = response.fap.params[0];
+ 	return 0;
+ return_default:
+ 	*multiplier = 8;
+ 	hid_warn(hidpp->hid_dev,
+ 		 "Couldn't get wheel multiplier (error %d), assuming %d.\n",
+ 		 ret, *multiplier);
+ 	return ret;
+ }
+ 
+ static int hidpp_hrw_set_wheel_mode(struct hidpp_device *hidpp, bool invert,
+ 	bool high_resolution, bool use_hidpp)
+ {
+ 	u8 feature_index;
+ 	u8 feature_type;
+ 	int ret;
+ 	u8 params[1];
+ 	struct hidpp_report response;
+ 
+ 	ret = hidpp_root_get_feature(hidpp, HIDPP_PAGE_HIRES_WHEEL,
+ 				     &feature_index, &feature_type);
+ 	if (ret)
+ 		return ret;
+ 
+ 	params[0] = (invert          ? BIT(2) : 0) |
+ 		    (high_resolution ? BIT(1) : 0) |
+ 		    (use_hidpp       ? BIT(0) : 0);
+ 
+ 	return hidpp_send_fap_command_sync(hidpp, feature_index,
+ 					   CMD_HIRES_WHEEL_SET_WHEEL_MODE,
+ 					   params, sizeof(params), &response);
+ }
+ 
+ /* -------------------------------------------------------------------------- */
++>>>>>>> d0341efe7449 (Revert "HID: logitech: fix a used uninitialized GCC warning")
  /* 0x4301: Solar Keyboard                                                     */
  /* -------------------------------------------------------------------------- */
  
@@@ -2528,6 -2654,73 +2626,76 @@@ static int g920_get_config(struct hidpp
  }
  
  /* -------------------------------------------------------------------------- */
++<<<<<<< HEAD
++=======
+ /* High-resolution scroll wheels                                              */
+ /* -------------------------------------------------------------------------- */
+ 
+ /**
+  * struct hi_res_scroll_info - Stores info on a device's high-res scroll wheel.
+  * @product_id: the HID product ID of the device being described.
+  * @microns_per_hi_res_unit: the distance moved by the user's finger for each
+  *                         high-resolution unit reported by the device, in
+  *                         256ths of a millimetre.
+  */
+ struct hi_res_scroll_info {
+ 	__u32 product_id;
+ 	int microns_per_hi_res_unit;
+ };
+ 
+ static struct hi_res_scroll_info hi_res_scroll_devices[] = {
+ 	{ /* Anywhere MX */
+ 	  .product_id = 0x1017, .microns_per_hi_res_unit = 445 },
+ 	{ /* Performance MX */
+ 	  .product_id = 0x101a, .microns_per_hi_res_unit = 406 },
+ 	{ /* M560 */
+ 	  .product_id = 0x402d, .microns_per_hi_res_unit = 435 },
+ 	{ /* MX Master 2S */
+ 	  .product_id = 0x4069, .microns_per_hi_res_unit = 406 },
+ };
+ 
+ static int hi_res_scroll_look_up_microns(__u32 product_id)
+ {
+ 	int i;
+ 	int num_devices = sizeof(hi_res_scroll_devices)
+ 			  / sizeof(hi_res_scroll_devices[0]);
+ 	for (i = 0; i < num_devices; i++) {
+ 		if (hi_res_scroll_devices[i].product_id == product_id)
+ 			return hi_res_scroll_devices[i].microns_per_hi_res_unit;
+ 	}
+ 	/* We don't have a value for this device, so use a sensible default. */
+ 	return 406;
+ }
+ 
+ static int hi_res_scroll_enable(struct hidpp_device *hidpp)
+ {
+ 	int ret;
+ 	u8 multiplier;
+ 
+ 	if (hidpp->quirks & HIDPP_QUIRK_HI_RES_SCROLL_X2121) {
+ 		ret = hidpp_hrw_set_wheel_mode(hidpp, false, true, false);
+ 		hidpp_hrw_get_wheel_capability(hidpp, &multiplier);
+ 	} else if (hidpp->quirks & HIDPP_QUIRK_HI_RES_SCROLL_X2120) {
+ 		ret = hidpp_hrs_set_highres_scrolling_mode(hidpp, true,
+ 							   &multiplier);
+ 	} else /* if (hidpp->quirks & HIDPP_QUIRK_HI_RES_SCROLL_1P0) */ {
+ 		ret = hidpp10_enable_scrolling_acceleration(hidpp);
+ 		multiplier = 8;
+ 	}
+ 	if (ret)
+ 		return ret;
+ 
+ 	hidpp->vertical_wheel_counter.resolution_multiplier = multiplier;
+ 	hidpp->vertical_wheel_counter.microns_per_hi_res_unit =
+ 		hi_res_scroll_look_up_microns(hidpp->hid_dev->product);
+ 	hid_info(hidpp->hid_dev, "multiplier = %d, microns = %d\n",
+ 		 multiplier,
+ 		 hidpp->vertical_wheel_counter.microns_per_hi_res_unit);
+ 	return 0;
+ }
+ 
+ /* -------------------------------------------------------------------------- */
++>>>>>>> d0341efe7449 (Revert "HID: logitech: fix a used uninitialized GCC warning")
  /* Generic HID++ devices                                                      */
  /* -------------------------------------------------------------------------- */
  
* Unmerged path drivers/hid/hid-logitech-hidpp.c
