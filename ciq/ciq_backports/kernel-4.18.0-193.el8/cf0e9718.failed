selftests/bpf: Undo GCC-specific bpf_helpers.h changes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit cf0e9718da214415195a28e5909bd297fb178583
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/cf0e9718.failed

Having GCC provide its own bpf-helper.h is not the right approach and is
going to be changed. Undo bpf_helpers.h change before moving
bpf_helpers.h into libbpf.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Song Liu <songliubraving@fb.com>
	Acked-by: Ilya Leoshkevich <iii@linux.ibm.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20191008175942.1769476-2-andriin@fb.com
(cherry picked from commit cf0e9718da214415195a28e5909bd297fb178583)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/bpf_helpers.h
diff --cc tools/testing/selftests/bpf/bpf_helpers.h
index 91537e9a7fbd,ffd4d8c9a087..000000000000
--- a/tools/testing/selftests/bpf/bpf_helpers.h
+++ b/tools/testing/selftests/bpf/bpf_helpers.h
@@@ -19,170 -15,11 +19,178 @@@
  			 ##__VA_ARGS__);		\
  })
  
++<<<<<<< HEAD
 +/* helper functions called from eBPF programs written in C */
 +static void *(*bpf_map_lookup_elem)(void *map, void *key) =
 +	(void *) BPF_FUNC_map_lookup_elem;
 +static int (*bpf_map_update_elem)(void *map, void *key, void *value,
 +				  unsigned long long flags) =
 +	(void *) BPF_FUNC_map_update_elem;
 +static int (*bpf_map_delete_elem)(void *map, void *key) =
 +	(void *) BPF_FUNC_map_delete_elem;
 +static int (*bpf_map_push_elem)(void *map, void *value,
 +				unsigned long long flags) =
 +	(void *) BPF_FUNC_map_push_elem;
 +static int (*bpf_map_pop_elem)(void *map, void *value) =
 +	(void *) BPF_FUNC_map_pop_elem;
 +static int (*bpf_map_peek_elem)(void *map, void *value) =
 +	(void *) BPF_FUNC_map_peek_elem;
 +static int (*bpf_probe_read)(void *dst, int size, const void *unsafe_ptr) =
 +	(void *) BPF_FUNC_probe_read;
 +static unsigned long long (*bpf_ktime_get_ns)(void) =
 +	(void *) BPF_FUNC_ktime_get_ns;
 +static int (*bpf_trace_printk)(const char *fmt, int fmt_size, ...) =
 +	(void *) BPF_FUNC_trace_printk;
 +static void (*bpf_tail_call)(void *ctx, void *map, int index) =
 +	(void *) BPF_FUNC_tail_call;
 +static unsigned long long (*bpf_get_smp_processor_id)(void) =
 +	(void *) BPF_FUNC_get_smp_processor_id;
 +static unsigned long long (*bpf_get_current_pid_tgid)(void) =
 +	(void *) BPF_FUNC_get_current_pid_tgid;
 +static unsigned long long (*bpf_get_current_uid_gid)(void) =
 +	(void *) BPF_FUNC_get_current_uid_gid;
 +static int (*bpf_get_current_comm)(void *buf, int buf_size) =
 +	(void *) BPF_FUNC_get_current_comm;
 +static unsigned long long (*bpf_perf_event_read)(void *map,
 +						 unsigned long long flags) =
 +	(void *) BPF_FUNC_perf_event_read;
 +static int (*bpf_clone_redirect)(void *ctx, int ifindex, int flags) =
 +	(void *) BPF_FUNC_clone_redirect;
 +static int (*bpf_redirect)(int ifindex, int flags) =
 +	(void *) BPF_FUNC_redirect;
 +static int (*bpf_redirect_map)(void *map, int key, int flags) =
 +	(void *) BPF_FUNC_redirect_map;
 +static int (*bpf_perf_event_output)(void *ctx, void *map,
 +				    unsigned long long flags, void *data,
 +				    int size) =
 +	(void *) BPF_FUNC_perf_event_output;
 +static int (*bpf_get_stackid)(void *ctx, void *map, int flags) =
 +	(void *) BPF_FUNC_get_stackid;
 +static int (*bpf_probe_write_user)(void *dst, const void *src, int size) =
 +	(void *) BPF_FUNC_probe_write_user;
 +static int (*bpf_current_task_under_cgroup)(void *map, int index) =
 +	(void *) BPF_FUNC_current_task_under_cgroup;
 +static int (*bpf_skb_get_tunnel_key)(void *ctx, void *key, int size, int flags) =
 +	(void *) BPF_FUNC_skb_get_tunnel_key;
 +static int (*bpf_skb_set_tunnel_key)(void *ctx, void *key, int size, int flags) =
 +	(void *) BPF_FUNC_skb_set_tunnel_key;
 +static int (*bpf_skb_get_tunnel_opt)(void *ctx, void *md, int size) =
 +	(void *) BPF_FUNC_skb_get_tunnel_opt;
 +static int (*bpf_skb_set_tunnel_opt)(void *ctx, void *md, int size) =
 +	(void *) BPF_FUNC_skb_set_tunnel_opt;
 +static unsigned long long (*bpf_get_prandom_u32)(void) =
 +	(void *) BPF_FUNC_get_prandom_u32;
 +static int (*bpf_xdp_adjust_head)(void *ctx, int offset) =
 +	(void *) BPF_FUNC_xdp_adjust_head;
 +static int (*bpf_xdp_adjust_meta)(void *ctx, int offset) =
 +	(void *) BPF_FUNC_xdp_adjust_meta;
 +static int (*bpf_get_socket_cookie)(void *ctx) =
 +	(void *) BPF_FUNC_get_socket_cookie;
 +static int (*bpf_setsockopt)(void *ctx, int level, int optname, void *optval,
 +			     int optlen) =
 +	(void *) BPF_FUNC_setsockopt;
 +static int (*bpf_getsockopt)(void *ctx, int level, int optname, void *optval,
 +			     int optlen) =
 +	(void *) BPF_FUNC_getsockopt;
 +static int (*bpf_sock_ops_cb_flags_set)(void *ctx, int flags) =
 +	(void *) BPF_FUNC_sock_ops_cb_flags_set;
 +static int (*bpf_sk_redirect_map)(void *ctx, void *map, int key, int flags) =
 +	(void *) BPF_FUNC_sk_redirect_map;
 +static int (*bpf_sk_redirect_hash)(void *ctx, void *map, void *key, int flags) =
 +	(void *) BPF_FUNC_sk_redirect_hash;
 +static int (*bpf_sock_map_update)(void *map, void *key, void *value,
 +				  unsigned long long flags) =
 +	(void *) BPF_FUNC_sock_map_update;
 +static int (*bpf_sock_hash_update)(void *map, void *key, void *value,
 +				   unsigned long long flags) =
 +	(void *) BPF_FUNC_sock_hash_update;
 +static int (*bpf_perf_event_read_value)(void *map, unsigned long long flags,
 +					void *buf, unsigned int buf_size) =
 +	(void *) BPF_FUNC_perf_event_read_value;
 +static int (*bpf_perf_prog_read_value)(void *ctx, void *buf,
 +				       unsigned int buf_size) =
 +	(void *) BPF_FUNC_perf_prog_read_value;
 +static int (*bpf_override_return)(void *ctx, unsigned long rc) =
 +	(void *) BPF_FUNC_override_return;
 +static int (*bpf_msg_redirect_map)(void *ctx, void *map, int key, int flags) =
 +	(void *) BPF_FUNC_msg_redirect_map;
 +static int (*bpf_msg_redirect_hash)(void *ctx,
 +				    void *map, void *key, int flags) =
 +	(void *) BPF_FUNC_msg_redirect_hash;
 +static int (*bpf_msg_apply_bytes)(void *ctx, int len) =
 +	(void *) BPF_FUNC_msg_apply_bytes;
 +static int (*bpf_msg_cork_bytes)(void *ctx, int len) =
 +	(void *) BPF_FUNC_msg_cork_bytes;
 +static int (*bpf_msg_pull_data)(void *ctx, int start, int end, int flags) =
 +	(void *) BPF_FUNC_msg_pull_data;
 +static int (*bpf_msg_push_data)(void *ctx, int start, int end, int flags) =
 +	(void *) BPF_FUNC_msg_push_data;
 +static int (*bpf_msg_pop_data)(void *ctx, int start, int cut, int flags) =
 +	(void *) BPF_FUNC_msg_pop_data;
 +static int (*bpf_bind)(void *ctx, void *addr, int addr_len) =
 +	(void *) BPF_FUNC_bind;
 +static int (*bpf_xdp_adjust_tail)(void *ctx, int offset) =
 +	(void *) BPF_FUNC_xdp_adjust_tail;
 +static int (*bpf_skb_get_xfrm_state)(void *ctx, int index, void *state,
 +				     int size, int flags) =
 +	(void *) BPF_FUNC_skb_get_xfrm_state;
 +static int (*bpf_sk_select_reuseport)(void *ctx, void *map, void *key, __u32 flags) =
 +	(void *) BPF_FUNC_sk_select_reuseport;
 +static int (*bpf_get_stack)(void *ctx, void *buf, int size, int flags) =
 +	(void *) BPF_FUNC_get_stack;
 +static int (*bpf_fib_lookup)(void *ctx, struct bpf_fib_lookup *params,
 +			     int plen, __u32 flags) =
 +	(void *) BPF_FUNC_fib_lookup;
 +static int (*bpf_lwt_push_encap)(void *ctx, unsigned int type, void *hdr,
 +				 unsigned int len) =
 +	(void *) BPF_FUNC_lwt_push_encap;
 +static int (*bpf_lwt_seg6_store_bytes)(void *ctx, unsigned int offset,
 +				       void *from, unsigned int len) =
 +	(void *) BPF_FUNC_lwt_seg6_store_bytes;
 +static int (*bpf_lwt_seg6_action)(void *ctx, unsigned int action, void *param,
 +				  unsigned int param_len) =
 +	(void *) BPF_FUNC_lwt_seg6_action;
 +static int (*bpf_lwt_seg6_adjust_srh)(void *ctx, unsigned int offset,
 +				      unsigned int len) =
 +	(void *) BPF_FUNC_lwt_seg6_adjust_srh;
 +static int (*bpf_rc_repeat)(void *ctx) =
 +	(void *) BPF_FUNC_rc_repeat;
 +static int (*bpf_rc_keydown)(void *ctx, unsigned int protocol,
 +			     unsigned long long scancode, unsigned int toggle) =
 +	(void *) BPF_FUNC_rc_keydown;
 +static unsigned long long (*bpf_get_current_cgroup_id)(void) =
 +	(void *) BPF_FUNC_get_current_cgroup_id;
 +static void *(*bpf_get_local_storage)(void *map, unsigned long long flags) =
 +	(void *) BPF_FUNC_get_local_storage;
 +static unsigned long long (*bpf_skb_cgroup_id)(void *ctx) =
 +	(void *) BPF_FUNC_skb_cgroup_id;
 +static unsigned long long (*bpf_skb_ancestor_cgroup_id)(void *ctx, int level) =
 +	(void *) BPF_FUNC_skb_ancestor_cgroup_id;
 +static struct bpf_sock *(*bpf_sk_lookup_tcp)(void *ctx,
 +					     struct bpf_sock_tuple *tuple,
 +					     int size, unsigned long long netns_id,
 +					     unsigned long long flags) =
 +	(void *) BPF_FUNC_sk_lookup_tcp;
 +static struct bpf_sock *(*bpf_sk_lookup_udp)(void *ctx,
 +					     struct bpf_sock_tuple *tuple,
 +					     int size, unsigned long long netns_id,
 +					     unsigned long long flags) =
 +	(void *) BPF_FUNC_sk_lookup_udp;
 +static int (*bpf_sk_release)(struct bpf_sock *sk) =
 +	(void *) BPF_FUNC_sk_release;
 +static int (*bpf_skb_vlan_push)(void *ctx, __be16 vlan_proto, __u16 vlan_tci) =
 +	(void *) BPF_FUNC_skb_vlan_push;
 +static int (*bpf_skb_vlan_pop)(void *ctx) =
 +	(void *) BPF_FUNC_skb_vlan_pop;
 +static int (*bpf_rc_pointer_rel)(void *ctx, int rel_x, int rel_y) =
 +	(void *) BPF_FUNC_rc_pointer_rel;
++=======
+ /* helper macro to place programs, maps, license in
+  * different sections in elf_bpf file. Section names
+  * are interpreted by elf_bpf loader
+  */
+ #define SEC(NAME) __attribute__((section(NAME), used))
++>>>>>>> cf0e9718da21 (selftests/bpf: Undo GCC-specific bpf_helpers.h changes)
  
  /* llvm builtin functions that eBPF C program may use to
   * emit BPF_LD_ABS and BPF_LD_IND instructions
* Unmerged path tools/testing/selftests/bpf/bpf_helpers.h
