mm/hmm: clean up some coding style and comments

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ralph Campbell <rcampbell@nvidia.com>
commit 085ea25064a9169eba5f2ed6484c111ab0f3ee79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/085ea250.failed

There are no functional changes, just some coding style clean ups and
minor comment changes.

	Cc: John Hubbard <jhubbard@nvidia.com>
	Cc: Ira Weiny <ira.weiny@intel.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Balbir Singh <bsingharora@gmail.com>
	Cc: Dan Carpenter <dan.carpenter@oracle.com>
	Cc: Matthew Wilcox <willy@infradead.org>
	Cc: Souptick Joarder <jrdr.linux@gmail.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Ralph Campbell <rcampbell@nvidia.com>
	Reviewed-by: Jérôme Glisse <jglisse@redhat.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 085ea25064a9169eba5f2ed6484c111ab0f3ee79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/hmm.h
#	mm/hmm.c
diff --cc include/linux/hmm.h
index 2f68a486cc0d,7007123842ba..000000000000
--- a/include/linux/hmm.h
+++ b/include/linux/hmm.h
@@@ -137,6 -157,9 +138,12 @@@ enum hmm_pfn_value_e 
   * @pfns: array of pfns (big enough for the range)
   * @flags: pfn flags to match device driver page table
   * @values: pfn value for some special case (none, special, error, ...)
++<<<<<<< HEAD
++=======
+  * @default_flags: default flags for the range (write, read, ... see hmm doc)
+  * @pfn_flags_mask: allows to mask pfn flags so that only default_flags matter
+  * @page_shift: device virtual address shift value (should be >= PAGE_SHIFT)
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   * @pfn_shifts: pfn shift value (should be <= PAGE_SHIFT)
   * @valid: pfns array did not change since it has been fill by an HMM function
   */
@@@ -153,36 -180,88 +160,102 @@@ struct hmm_range 
  };
  
  /*
++<<<<<<< HEAD
 + * hmm_pfn_to_page() - return struct page pointed to by a valid HMM pfn
 + * @range: range use to decode HMM pfn value
 + * @pfn: HMM pfn value to get corresponding struct page from
 + * Returns: struct page pointer if pfn is a valid HMM pfn, NULL otherwise
++=======
+  * hmm_range_page_shift() - return the page shift for the range
+  * @range: range being queried
+  * Return: page shift (page size = 1 << page shift) for the range
+  */
+ static inline unsigned hmm_range_page_shift(const struct hmm_range *range)
+ {
+ 	return range->page_shift;
+ }
+ 
+ /*
+  * hmm_range_page_size() - return the page size for the range
+  * @range: range being queried
+  * Return: page size for the range in bytes
+  */
+ static inline unsigned long hmm_range_page_size(const struct hmm_range *range)
+ {
+ 	return 1UL << hmm_range_page_shift(range);
+ }
+ 
+ /*
+  * hmm_range_wait_until_valid() - wait for range to be valid
+  * @range: range affected by invalidation to wait on
+  * @timeout: time out for wait in ms (ie abort wait after that period of time)
+  * Return: true if the range is valid, false otherwise.
+  */
+ static inline bool hmm_range_wait_until_valid(struct hmm_range *range,
+ 					      unsigned long timeout)
+ {
+ 	/* Check if mm is dead ? */
+ 	if (range->hmm == NULL || range->hmm->dead || range->hmm->mm == NULL) {
+ 		range->valid = false;
+ 		return false;
+ 	}
+ 	if (range->valid)
+ 		return true;
+ 	wait_event_timeout(range->hmm->wq, range->valid || range->hmm->dead,
+ 			   msecs_to_jiffies(timeout));
+ 	/* Return current valid status just in case we get lucky */
+ 	return range->valid;
+ }
+ 
+ /*
+  * hmm_range_valid() - test if a range is valid or not
+  * @range: range
+  * Return: true if the range is valid, false otherwise.
+  */
+ static inline bool hmm_range_valid(struct hmm_range *range)
+ {
+ 	return range->valid;
+ }
+ 
+ /*
+  * hmm_device_entry_to_page() - return struct page pointed to by a device entry
+  * @range: range use to decode device entry value
+  * @entry: device entry value to get corresponding struct page from
+  * Return: struct page pointer if entry is a valid, NULL otherwise
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   *
 - * If the device entry is valid (ie valid flag set) then return the struct page
 - * matching the entry value. Otherwise return NULL.
 + * If the HMM pfn is valid (ie valid flag set) then return the struct page
 + * matching the pfn value stored in the HMM pfn. Otherwise return NULL.
   */
 -static inline struct page *hmm_device_entry_to_page(const struct hmm_range *range,
 -						    uint64_t entry)
 +static inline struct page *hmm_pfn_to_page(const struct hmm_range *range,
 +					   uint64_t pfn)
  {
 -	if (entry == range->values[HMM_PFN_NONE])
 +	if (pfn == range->values[HMM_PFN_NONE])
  		return NULL;
 -	if (entry == range->values[HMM_PFN_ERROR])
 +	if (pfn == range->values[HMM_PFN_ERROR])
  		return NULL;
 -	if (entry == range->values[HMM_PFN_SPECIAL])
 +	if (pfn == range->values[HMM_PFN_SPECIAL])
  		return NULL;
 -	if (!(entry & range->flags[HMM_PFN_VALID]))
 +	if (!(pfn & range->flags[HMM_PFN_VALID]))
  		return NULL;
 -	return pfn_to_page(entry >> range->pfn_shift);
 +	return pfn_to_page(pfn >> range->pfn_shift);
  }
  
  /*
++<<<<<<< HEAD
 + * hmm_pfn_to_pfn() - return pfn value store in a HMM pfn
 + * @range: range use to decode HMM pfn value
 + * @pfn: HMM pfn value to extract pfn from
 + * Returns: pfn value if HMM pfn is valid, -1UL otherwise
++=======
+  * hmm_device_entry_to_pfn() - return pfn value store in a device entry
+  * @range: range use to decode device entry value
+  * @entry: device entry to extract pfn from
+  * Return: pfn value if device entry is valid, -1UL otherwise
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   */
 -static inline unsigned long
 -hmm_device_entry_to_pfn(const struct hmm_range *range, uint64_t pfn)
 +static inline unsigned long hmm_pfn_to_pfn(const struct hmm_range *range,
 +					   uint64_t pfn)
  {
  	if (pfn == range->values[HMM_PFN_NONE])
  		return -1UL;
@@@ -196,24 -275,59 +269,34 @@@
  }
  
  /*
 - * hmm_device_entry_from_page() - create a valid device entry for a page
 + * hmm_pfn_from_page() - create a valid HMM pfn value from struct page
   * @range: range use to encode HMM pfn value
++<<<<<<< HEAD
 + * @page: struct page pointer for which to create the HMM pfn
 + * Returns: valid HMM pfn for the page
++=======
+  * @page: page for which to create the device entry
+  * Return: valid device entry for the page
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   */
 -static inline uint64_t hmm_device_entry_from_page(const struct hmm_range *range,
 -						  struct page *page)
 +static inline uint64_t hmm_pfn_from_page(const struct hmm_range *range,
 +					 struct page *page)
  {
  	return (page_to_pfn(page) << range->pfn_shift) |
  		range->flags[HMM_PFN_VALID];
  }
  
  /*
 - * hmm_device_entry_from_pfn() - create a valid device entry value from pfn
 + * hmm_pfn_from_pfn() - create a valid HMM pfn value from pfn
   * @range: range use to encode HMM pfn value
++<<<<<<< HEAD
 + * @pfn: pfn value for which to create the HMM pfn
 + * Returns: valid HMM pfn for the pfn
++=======
+  * @pfn: pfn value for which to create the device entry
+  * Return: valid device entry for the pfn
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   */
 -static inline uint64_t hmm_device_entry_from_pfn(const struct hmm_range *range,
 -						 unsigned long pfn)
 -{
 -	return (pfn << range->pfn_shift) |
 -		range->flags[HMM_PFN_VALID];
 -}
 -
 -/*
 - * Old API:
 - * hmm_pfn_to_page()
 - * hmm_pfn_to_pfn()
 - * hmm_pfn_from_page()
 - * hmm_pfn_from_pfn()
 - *
 - * This are the OLD API please use new API, it is here to avoid cross-tree
 - * merge painfullness ie we convert things to new API in stages.
 - */
 -static inline struct page *hmm_pfn_to_page(const struct hmm_range *range,
 -					   uint64_t pfn)
 -{
 -	return hmm_device_entry_to_page(range, pfn);
 -}
 -
 -static inline unsigned long hmm_pfn_to_pfn(const struct hmm_range *range,
 -					   uint64_t pfn)
 -{
 -	return hmm_device_entry_to_pfn(range, pfn);
 -}
 -
 -static inline uint64_t hmm_pfn_from_page(const struct hmm_range *range,
 -					 struct page *page)
 -{
 -	return hmm_device_entry_from_page(range, page);
 -}
 -
  static inline uint64_t hmm_pfn_from_pfn(const struct hmm_range *range,
  					unsigned long pfn)
  {
@@@ -376,43 -491,88 +459,99 @@@ static inline bool hmm_mirror_mm_is_ali
  	return true;
  }
  
- 
  /*
 - * Please see Documentation/vm/hmm.rst for how to use the range API.
 + * To snapshot the CPU page table, call hmm_vma_get_pfns(), then take a device
 + * driver lock that serializes device page table updates, then call
 + * hmm_vma_range_done(), to check if the snapshot is still valid. The same
 + * device driver page table update lock must also be used in the
 + * hmm_mirror_ops.sync_cpu_device_pagetables() callback, so that CPU page
 + * table invalidation serializes on it.
 + *
 + * YOU MUST CALL hmm_vma_range_done() ONCE AND ONLY ONCE EACH TIME YOU CALL
 + * hmm_vma_get_pfns() WITHOUT ERROR !
 + *
 + * IF YOU DO NOT FOLLOW THE ABOVE RULE THE SNAPSHOT CONTENT MIGHT BE INVALID !
   */
 -int hmm_range_register(struct hmm_range *range,
 -		       struct mm_struct *mm,
 -		       unsigned long start,
 -		       unsigned long end,
 -		       unsigned page_shift);
 -void hmm_range_unregister(struct hmm_range *range);
 -long hmm_range_snapshot(struct hmm_range *range);
 -long hmm_range_fault(struct hmm_range *range, bool block);
 -long hmm_range_dma_map(struct hmm_range *range,
 -		       struct device *device,
 -		       dma_addr_t *daddrs,
 -		       bool block);
 -long hmm_range_dma_unmap(struct hmm_range *range,
 -			 struct vm_area_struct *vma,
 -			 struct device *device,
 -			 dma_addr_t *daddrs,
 -			 bool dirty);
 +int hmm_vma_get_pfns(struct hmm_range *range);
 +bool hmm_vma_range_done(struct hmm_range *range);
 +
  
  /*
 - * HMM_RANGE_DEFAULT_TIMEOUT - default timeout (ms) when waiting for a range
 + * Fault memory on behalf of device driver. Unlike handle_mm_fault(), this will
 + * not migrate any device memory back to system memory. The HMM pfn array will
 + * be updated with the fault result and current snapshot of the CPU page table
 + * for the range.
 + *
 + * The mmap_sem must be taken in read mode before entering and it might be
 + * dropped by the function if the block argument is false. In that case, the
 + * function returns -EAGAIN.
   *
 - * When waiting for mmu notifiers we need some kind of time out otherwise we
 - * could potentialy wait for ever, 1000ms ie 1s sounds like a long time to
 - * wait already.
 + * Return value does not reflect if the fault was successful for every single
 + * address or not. Therefore, the caller must to inspect the HMM pfn array to
 + * determine fault status for each address.
 + *
 + * Trying to fault inside an invalid vma will result in -EINVAL.
 + *
 + * See the function description in mm/hmm.c for further documentation.
   */
++<<<<<<< HEAD
 +int hmm_vma_fault(struct hmm_range *range, bool block);
++=======
+ #define HMM_RANGE_DEFAULT_TIMEOUT 1000
+ 
+ /* This is a temporary helper to avoid merge conflict between trees. */
+ static inline bool hmm_vma_range_done(struct hmm_range *range)
+ {
+ 	bool ret = hmm_range_valid(range);
+ 
+ 	hmm_range_unregister(range);
+ 	return ret;
+ }
+ 
+ /* This is a temporary helper to avoid merge conflict between trees. */
+ static inline int hmm_vma_fault(struct hmm_range *range, bool block)
+ {
+ 	long ret;
+ 
+ 	/*
+ 	 * With the old API the driver must set each individual entries with
+ 	 * the requested flags (valid, write, ...). So here we set the mask to
+ 	 * keep intact the entries provided by the driver and zero out the
+ 	 * default_flags.
+ 	 */
+ 	range->default_flags = 0;
+ 	range->pfn_flags_mask = -1UL;
+ 
+ 	ret = hmm_range_register(range, range->vma->vm_mm,
+ 				 range->start, range->end,
+ 				 PAGE_SHIFT);
+ 	if (ret)
+ 		return (int)ret;
+ 
+ 	if (!hmm_range_wait_until_valid(range, HMM_RANGE_DEFAULT_TIMEOUT)) {
+ 		/*
+ 		 * The mmap_sem was taken by driver we release it here and
+ 		 * returns -EAGAIN which correspond to mmap_sem have been
+ 		 * drop in the old API.
+ 		 */
+ 		up_read(&range->vma->vm_mm->mmap_sem);
+ 		return -EAGAIN;
+ 	}
+ 
+ 	ret = hmm_range_fault(range, block);
+ 	if (ret <= 0) {
+ 		if (ret == -EBUSY || !ret) {
+ 			/* Same as above, drop mmap_sem to match old API. */
+ 			up_read(&range->vma->vm_mm->mmap_sem);
+ 			ret = -EBUSY;
+ 		} else if (ret == -EAGAIN)
+ 			ret = -EBUSY;
+ 		hmm_range_unregister(range);
+ 		return ret;
+ 	}
+ 	return 0;
+ }
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
  
  /* Below are for HMM internal use only! Not to be used by device driver! */
  void hmm_mm_destroy(struct mm_struct *mm);
@@@ -510,8 -670,9 +649,8 @@@ struct hmm_devmem_ops 
   * @device: device to bind resource to
   * @ops: memory operations callback
   * @ref: per CPU refcount
 - * @page_fault: callback when CPU fault on an unaddressable device page
   *
-  * This an helper structure for device drivers that do not wish to implement
+  * This is a helper structure for device drivers that do not wish to implement
   * the gory details related to hotplugging new memoy and allocating struct
   * pages.
   *
diff --cc mm/hmm.c
index 4c052ccc4e21,4db5dcf110ba..000000000000
--- a/mm/hmm.c
+++ b/mm/hmm.c
@@@ -158,8 -144,19 +158,22 @@@ static int hmm_invalidate_range(struct 
  
  static void hmm_release(struct mmu_notifier *mn, struct mm_struct *mm)
  {
 -	struct hmm *hmm = mm_get_hmm(mm);
  	struct hmm_mirror *mirror;
++<<<<<<< HEAD
 +	struct hmm *hmm = mm->hmm;
++=======
+ 	struct hmm_range *range;
+ 
+ 	/* Report this HMM as dying. */
+ 	hmm->dead = true;
+ 
+ 	/* Wake-up everyone waiting on any range. */
+ 	mutex_lock(&hmm->lock);
+ 	list_for_each_entry(range, &hmm->ranges, list)
+ 		range->valid = false;
+ 	wake_up_all(&hmm->wq);
+ 	mutex_unlock(&hmm->lock);
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
  
  	down_write(&hmm->mirrors_sem);
  	mirror = list_first_entry_or_null(&hmm->mirrors, struct hmm_mirror,
@@@ -191,7 -193,44 +206,48 @@@ static void hmm_invalidate_range_start(
  
  	VM_BUG_ON(!hmm);
  
++<<<<<<< HEAD
 +	atomic_inc(&hmm->sequence);
++=======
+ 	update.start = nrange->start;
+ 	update.end = nrange->end;
+ 	update.event = HMM_UPDATE_INVALIDATE;
+ 	update.blockable = mmu_notifier_range_blockable(nrange);
+ 
+ 	if (mmu_notifier_range_blockable(nrange))
+ 		mutex_lock(&hmm->lock);
+ 	else if (!mutex_trylock(&hmm->lock)) {
+ 		ret = -EAGAIN;
+ 		goto out;
+ 	}
+ 	hmm->notifiers++;
+ 	list_for_each_entry(range, &hmm->ranges, list) {
+ 		if (update.end < range->start || update.start >= range->end)
+ 			continue;
+ 
+ 		range->valid = false;
+ 	}
+ 	mutex_unlock(&hmm->lock);
+ 
+ 	if (mmu_notifier_range_blockable(nrange))
+ 		down_read(&hmm->mirrors_sem);
+ 	else if (!down_read_trylock(&hmm->mirrors_sem)) {
+ 		ret = -EAGAIN;
+ 		goto out;
+ 	}
+ 	list_for_each_entry(mirror, &hmm->mirrors, list) {
+ 		int ret;
+ 
+ 		ret = mirror->ops->sync_cpu_device_pagetables(mirror, &update);
+ 		if (!update.blockable && ret == -EAGAIN)
+ 			break;
+ 	}
+ 	up_read(&hmm->mirrors_sem);
+ 
+ out:
+ 	hmm_put(hmm);
+ 	return ret;
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
  }
  
  static void hmm_invalidate_range_end(struct mmu_notifier *mn,
@@@ -348,7 -370,7 +405,11 @@@ static int hmm_pfns_bad(unsigned long a
   * @fault: should we fault or not ?
   * @write_fault: write fault ?
   * @walk: mm_walk structure
++<<<<<<< HEAD
 + * Returns: 0 on success, -EAGAIN after page fault, or page fault error
++=======
+  * Return: 0 on success, -EBUSY after page fault, or page fault error
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   *
   * This function will be called whenever pmd_none() or pte_none() returns true,
   * or whenever there is no page directory covering the virtual address range.
@@@ -669,279 -891,440 +730,554 @@@ static void hmm_pfns_clear(struct hmm_r
  		*pfns = range->values[HMM_PFN_NONE];
  }
  
 +static void hmm_pfns_special(struct hmm_range *range)
 +{
++<<<<<<< HEAD
 +	unsigned long addr = range->start, i = 0;
++=======
++	unsigned long mask = ((1UL << page_shift) - 1UL);
++	struct hmm *hmm;
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
 +
 +	for (; addr < range->end; addr += PAGE_SIZE, i++)
 +		range->pfns[i] = range->values[HMM_PFN_SPECIAL];
 +}
 +
  /*
 - * hmm_range_register() - start tracking change to CPU page table over a range
 - * @range: range
 - * @mm: the mm struct for the range of virtual address
 - * @start: start virtual address (inclusive)
 - * @end: end virtual address (exclusive)
 - * @page_shift: expect page shift for the range
 - * Returns 0 on success, -EFAULT if the address space is no longer valid
 + * hmm_vma_get_pfns() - snapshot CPU page table for a range of virtual addresses
 + * @range: range being snapshotted
 + * Returns: -EINVAL if invalid argument, -ENOMEM out of memory, -EPERM invalid
 + *          vma permission, 0 success
 + *
 + * This snapshots the CPU page table for a range of virtual addresses. Snapshot
 + * validity is tracked by range struct. See hmm_vma_range_done() for further
 + * information.
 + *
 + * The range struct is initialized here. It tracks the CPU page table, but only
 + * if the function returns success (0), in which case the caller must then call
 + * hmm_vma_range_done() to stop CPU page table update tracking on this range.
   *
 - * Track updates to the CPU page table see include/linux/hmm.h
 + * NOT CALLING hmm_vma_range_done() IF FUNCTION RETURNS 0 WILL LEAD TO SERIOUS
 + * MEMORY CORRUPTION ! YOU HAVE BEEN WARNED !
   */
 -int hmm_range_register(struct hmm_range *range,
 -		       struct mm_struct *mm,
 -		       unsigned long start,
 -		       unsigned long end,
 -		       unsigned page_shift)
 +int hmm_vma_get_pfns(struct hmm_range *range)
  {
 -	unsigned long mask = ((1UL << page_shift) - 1UL);
 +	struct vm_area_struct *vma = range->vma;
 +	struct hmm_vma_walk hmm_vma_walk;
 +	struct mm_walk mm_walk;
  	struct hmm *hmm;
  
 -	range->valid = false;
 -	range->hmm = NULL;
 +	/* Sanity check, this really should not happen ! */
 +	if (range->start < vma->vm_start || range->start >= vma->vm_end)
 +		return -EINVAL;
 +	if (range->end < vma->vm_start || range->end > vma->vm_end)
 +		return -EINVAL;
  
 -	if ((start & mask) || (end & mask))
 +	hmm = hmm_register(vma->vm_mm);
 +	if (!hmm)
 +		return -ENOMEM;
 +	/* Caller must have registered a mirror, via hmm_mirror_register() ! */
 +	if (!hmm->mmu_notifier.ops)
  		return -EINVAL;
 -	if (start >= end)
 +
++<<<<<<< HEAD
 +	/* FIXME support hugetlb fs */
 +	if (is_vm_hugetlb_page(vma) || (vma->vm_flags & VM_SPECIAL) ||
 +			vma_is_dax(vma)) {
 +		hmm_pfns_special(range);
  		return -EINVAL;
 +	}
  
 -	range->page_shift = page_shift;
 -	range->start = start;
 -	range->end = end;
 +	if (!(vma->vm_flags & VM_READ)) {
 +		/*
 +		 * If vma do not allow read access, then assume that it does
 +		 * not allow write access, either. Architecture that allow
 +		 * write without read access are not supported by HMM, because
 +		 * operations such has atomic access would not work.
 +		 */
 +		hmm_pfns_clear(range, range->pfns, range->start, range->end);
 +		return -EPERM;
 +	}
  
 +	/* Initialize range to track CPU page table update */
 +	spin_lock(&hmm->lock);
 +	range->valid = true;
 +	list_add_rcu(&range->list, &hmm->ranges);
 +	spin_unlock(&hmm->lock);
 +
 +	hmm_vma_walk.fault = false;
 +	hmm_vma_walk.range = range;
 +	mm_walk.private = &hmm_vma_walk;
 +
 +	mm_walk.vma = vma;
 +	mm_walk.mm = vma->vm_mm;
 +	mm_walk.pte_entry = NULL;
 +	mm_walk.test_walk = NULL;
 +	mm_walk.hugetlb_entry = NULL;
 +	mm_walk.pmd_entry = hmm_vma_walk_pmd;
 +	mm_walk.pte_hole = hmm_vma_walk_hole;
++=======
+ 	hmm = hmm_get_or_create(mm);
+ 	if (!hmm)
+ 		return -EFAULT;
+ 
+ 	/* Check if hmm_mm_destroy() was call. */
+ 	if (hmm->mm == NULL || hmm->dead) {
+ 		hmm_put(hmm);
+ 		return -EFAULT;
+ 	}
+ 
+ 	/* Initialize range to track CPU page table updates. */
+ 	mutex_lock(&hmm->lock);
+ 
+ 	range->hmm = hmm;
+ 	list_add_rcu(&range->list, &hmm->ranges);
+ 
+ 	/*
+ 	 * If there are any concurrent notifiers we have to wait for them for
+ 	 * the range to be valid (see hmm_range_wait_until_valid()).
+ 	 */
+ 	if (!hmm->notifiers)
+ 		range->valid = true;
+ 	mutex_unlock(&hmm->lock);
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
  
 +	walk_page_range(range->start, range->end, &mm_walk);
  	return 0;
  }
 -EXPORT_SYMBOL(hmm_range_register);
 +EXPORT_SYMBOL(hmm_vma_get_pfns);
  
  /*
 - * hmm_range_unregister() - stop tracking change to CPU page table over a range
 - * @range: range
 + * hmm_vma_range_done() - stop tracking change to CPU page table over a range
 + * @range: range being tracked
 + * Returns: false if range data has been invalidated, true otherwise
   *
   * Range struct is used to track updates to the CPU page table after a call to
++<<<<<<< HEAD
 + * either hmm_vma_get_pfns() or hmm_vma_fault(). Once the device driver is done
 + * using the data,  or wants to lock updates to the data it got from those
 + * functions, it must call the hmm_vma_range_done() function, which will then
 + * stop tracking CPU page table updates.
++=======
+  * hmm_range_register(). See include/linux/hmm.h for how to use it.
+  */
+ void hmm_range_unregister(struct hmm_range *range)
+ {
+ 	struct hmm *hmm = range->hmm;
+ 
+ 	/* Sanity check this really should not happen. */
+ 	if (hmm == NULL || range->end <= range->start)
+ 		return;
+ 
+ 	mutex_lock(&hmm->lock);
+ 	list_del_rcu(&range->list);
+ 	mutex_unlock(&hmm->lock);
+ 
+ 	/* Drop reference taken by hmm_range_register() */
+ 	range->valid = false;
+ 	hmm_put(hmm);
+ 	range->hmm = NULL;
+ }
+ EXPORT_SYMBOL(hmm_range_unregister);
+ 
+ /*
+  * hmm_range_snapshot() - snapshot CPU page table for a range
+  * @range: range
+  * Return: -EINVAL if invalid argument, -ENOMEM out of memory, -EPERM invalid
+  *          permission (for instance asking for write and range is read only),
+  *          -EAGAIN if you need to retry, -EFAULT invalid (ie either no valid
+  *          vma or it is illegal to access that range), number of valid pages
+  *          in range->pfns[] (from range start address).
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   *
 - * This snapshots the CPU page table for a range of virtual addresses. Snapshot
 - * validity is tracked by range struct. See in include/linux/hmm.h for example
 - * on how to use.
 + * Note that device driver must still implement general CPU page table update
 + * tracking either by using hmm_mirror (see hmm_mirror_register()) or by using
 + * the mmu_notifier API directly.
 + *
 + * CPU page table update tracking done through hmm_range is only temporary and
 + * to be used while trying to duplicate CPU page table contents for a range of
 + * virtual addresses.
 + *
 + * There are two ways to use this :
 + * again:
 + *   hmm_vma_get_pfns(range); or hmm_vma_fault(...);
 + *   trans = device_build_page_table_update_transaction(pfns);
 + *   device_page_table_lock();
 + *   if (!hmm_vma_range_done(range)) {
 + *     device_page_table_unlock();
 + *     goto again;
 + *   }
 + *   device_commit_transaction(trans);
 + *   device_page_table_unlock();
 + *
 + * Or:
 + *   hmm_vma_get_pfns(range); or hmm_vma_fault(...);
 + *   device_page_table_lock();
 + *   hmm_vma_range_done(range);
 + *   device_update_page_table(range->pfns);
 + *   device_page_table_unlock();
   */
 -long hmm_range_snapshot(struct hmm_range *range)
 +bool hmm_vma_range_done(struct hmm_range *range)
  {
 -	const unsigned long device_vma = VM_IO | VM_PFNMAP | VM_MIXEDMAP;
 -	unsigned long start = range->start, end;
 -	struct hmm_vma_walk hmm_vma_walk;
 -	struct hmm *hmm = range->hmm;
 -	struct vm_area_struct *vma;
 -	struct mm_walk mm_walk;
 -
 -	/* Check if hmm_mm_destroy() was call. */
 -	if (hmm->mm == NULL || hmm->dead)
 -		return -EFAULT;
 -
 -	do {
 -		/* If range is no longer valid force retry. */
 -		if (!range->valid)
 -			return -EAGAIN;
 -
 -		vma = find_vma(hmm->mm, start);
 -		if (vma == NULL || (vma->vm_flags & device_vma))
 -			return -EFAULT;
 -
 -		if (is_vm_hugetlb_page(vma)) {
 -			if (huge_page_shift(hstate_vma(vma)) !=
 -				    range->page_shift &&
 -			    range->page_shift != PAGE_SHIFT)
 -				return -EINVAL;
 -		} else {
 -			if (range->page_shift != PAGE_SHIFT)
 -				return -EINVAL;
 -		}
 -
 -		if (!(vma->vm_flags & VM_READ)) {
 -			/*
 -			 * If vma do not allow read access, then assume that it
 -			 * does not allow write access, either. HMM does not
 -			 * support architecture that allow write without read.
 -			 */
 -			hmm_pfns_clear(range, range->pfns,
 -				range->start, range->end);
 -			return -EPERM;
 -		}
 +	unsigned long npages = (range->end - range->start) >> PAGE_SHIFT;
 +	struct hmm *hmm;
  
 -		range->vma = vma;
 -		hmm_vma_walk.pgmap = NULL;
 -		hmm_vma_walk.last = start;
 -		hmm_vma_walk.fault = false;
 -		hmm_vma_walk.range = range;
 -		mm_walk.private = &hmm_vma_walk;
 -		end = min(range->end, vma->vm_end);
 +	if (range->end <= range->start) {
 +		BUG();
 +		return false;
 +	}
  
 -		mm_walk.vma = vma;
 -		mm_walk.mm = vma->vm_mm;
 -		mm_walk.pte_entry = NULL;
 -		mm_walk.test_walk = NULL;
 -		mm_walk.hugetlb_entry = NULL;
 -		mm_walk.pud_entry = hmm_vma_walk_pud;
 -		mm_walk.pmd_entry = hmm_vma_walk_pmd;
 -		mm_walk.pte_hole = hmm_vma_walk_hole;
 -		mm_walk.hugetlb_entry = hmm_vma_walk_hugetlb_entry;
 +	hmm = hmm_register(range->vma->vm_mm);
 +	if (!hmm) {
 +		memset(range->pfns, 0, sizeof(*range->pfns) * npages);
 +		return false;
 +	}
  
 -		walk_page_range(start, end, &mm_walk);
 -		start = end;
 -	} while (start < range->end);
 +	spin_lock(&hmm->lock);
 +	list_del_rcu(&range->list);
 +	spin_unlock(&hmm->lock);
  
 -	return (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
 +	return range->valid;
  }
 -EXPORT_SYMBOL(hmm_range_snapshot);
 +EXPORT_SYMBOL(hmm_vma_range_done);
  
  /*
 - * hmm_range_fault() - try to fault some address in a virtual address range
 + * hmm_vma_fault() - try to fault some address in a virtual address range
   * @range: range being faulted
   * @block: allow blocking on fault (if true it sleeps and do not drop mmap_sem)
++<<<<<<< HEAD
 + * Returns: 0 success, error otherwise (-EAGAIN means mmap_sem have been drop)
++=======
+  * Return: number of valid pages in range->pfns[] (from range start
+  *          address). This may be zero. If the return value is negative,
+  *          then one of the following values may be returned:
+  *
+  *           -EINVAL  invalid arguments or mm or virtual address are in an
+  *                    invalid vma (for instance device file vma).
+  *           -ENOMEM: Out of memory.
+  *           -EPERM:  Invalid permission (for instance asking for write and
+  *                    range is read only).
+  *           -EAGAIN: If you need to retry and mmap_sem was drop. This can only
+  *                    happens if block argument is false.
+  *           -EBUSY:  If the the range is being invalidated and you should wait
+  *                    for invalidation to finish.
+  *           -EFAULT: Invalid (ie either no valid vma or it is illegal to access
+  *                    that range), number of valid pages in range->pfns[] (from
+  *                    range start address).
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
   *
   * This is similar to a regular CPU page fault except that it will not trigger
 - * any memory migration if the memory being faulted is not accessible by CPUs
 - * and caller does not ask for migration.
 + * any memory migration if the memory being faulted is not accessible by CPUs.
   *
   * On error, for one virtual address in the range, the function will mark the
   * corresponding HMM pfn entry with an error flag.
 + *
 + * Expected use pattern:
 + * retry:
 + *   down_read(&mm->mmap_sem);
 + *   // Find vma and address device wants to fault, initialize hmm_pfn_t
 + *   // array accordingly
 + *   ret = hmm_vma_fault(range, write, block);
 + *   switch (ret) {
 + *   case -EAGAIN:
 + *     hmm_vma_range_done(range);
 + *     // You might want to rate limit or yield to play nicely, you may
 + *     // also commit any valid pfn in the array assuming that you are
 + *     // getting true from hmm_vma_range_monitor_end()
 + *     goto retry;
 + *   case 0:
 + *     break;
 + *   case -ENOMEM:
 + *   case -EINVAL:
 + *   case -EPERM:
 + *   default:
 + *     // Handle error !
 + *     up_read(&mm->mmap_sem)
 + *     return;
 + *   }
 + *   // Take device driver lock that serialize device page table update
 + *   driver_lock_device_page_table_update();
 + *   hmm_vma_range_done(range);
 + *   // Commit pfns we got from hmm_vma_fault()
 + *   driver_unlock_device_page_table_update();
 + *   up_read(&mm->mmap_sem)
 + *
 + * YOU MUST CALL hmm_vma_range_done() AFTER THIS FUNCTION RETURN SUCCESS (0)
 + * BEFORE FREEING THE range struct OR YOU WILL HAVE SERIOUS MEMORY CORRUPTION !
 + *
 + * YOU HAVE BEEN WARNED !
   */
 -long hmm_range_fault(struct hmm_range *range, bool block)
 +int hmm_vma_fault(struct hmm_range *range, bool block)
  {
 -	const unsigned long device_vma = VM_IO | VM_PFNMAP | VM_MIXEDMAP;
 -	unsigned long start = range->start, end;
 +	struct vm_area_struct *vma = range->vma;
 +	unsigned long start = range->start;
  	struct hmm_vma_walk hmm_vma_walk;
 -	struct hmm *hmm = range->hmm;
 -	struct vm_area_struct *vma;
  	struct mm_walk mm_walk;
 +	struct hmm *hmm;
  	int ret;
  
 -	/* Check if hmm_mm_destroy() was call. */
 -	if (hmm->mm == NULL || hmm->dead)
 -		return -EFAULT;
 +	/* Sanity check, this really should not happen ! */
 +	if (range->start < vma->vm_start || range->start >= vma->vm_end)
 +		return -EINVAL;
 +	if (range->end < vma->vm_start || range->end > vma->vm_end)
 +		return -EINVAL;
  
 -	do {
 -		/* If range is no longer valid force retry. */
 -		if (!range->valid) {
 -			up_read(&hmm->mm->mmap_sem);
 -			return -EAGAIN;
 -		}
 +	hmm = hmm_register(vma->vm_mm);
 +	if (!hmm) {
 +		hmm_pfns_clear(range, range->pfns, range->start, range->end);
 +		return -ENOMEM;
 +	}
 +	/* Caller must have registered a mirror using hmm_mirror_register() */
 +	if (!hmm->mmu_notifier.ops)
 +		return -EINVAL;
  
 -		vma = find_vma(hmm->mm, start);
 -		if (vma == NULL || (vma->vm_flags & device_vma))
 -			return -EFAULT;
 +	/* FIXME support hugetlb fs */
 +	if (is_vm_hugetlb_page(vma) || (vma->vm_flags & VM_SPECIAL) ||
 +			vma_is_dax(vma)) {
 +		hmm_pfns_special(range);
 +		return -EINVAL;
 +	}
  
 +	if (!(vma->vm_flags & VM_READ)) {
 +		/*
 +		 * If vma do not allow read access, then assume that it does
 +		 * not allow write access, either. Architecture that allow
 +		 * write without read access are not supported by HMM, because
 +		 * operations such has atomic access would not work.
 +		 */
 +		hmm_pfns_clear(range, range->pfns, range->start, range->end);
 +		return -EPERM;
 +	}
 +
 +	/* Initialize range to track CPU page table update */
 +	spin_lock(&hmm->lock);
 +	range->valid = true;
 +	list_add_rcu(&range->list, &hmm->ranges);
 +	spin_unlock(&hmm->lock);
 +
 +	hmm_vma_walk.fault = true;
 +	hmm_vma_walk.block = block;
 +	hmm_vma_walk.range = range;
 +	mm_walk.private = &hmm_vma_walk;
 +	hmm_vma_walk.last = range->start;
 +
 +	mm_walk.vma = vma;
 +	mm_walk.mm = vma->vm_mm;
 +	mm_walk.pte_entry = NULL;
 +	mm_walk.test_walk = NULL;
 +	mm_walk.hugetlb_entry = NULL;
 +	mm_walk.pmd_entry = hmm_vma_walk_pmd;
 +	mm_walk.pte_hole = hmm_vma_walk_hole;
 +
 +	do {
 +		ret = walk_page_range(start, range->end, &mm_walk);
 +		start = hmm_vma_walk.last;
 +	} while (ret == -EAGAIN);
 +
 +	if (ret) {
 +		unsigned long i;
 +
++<<<<<<< HEAD
 +		i = (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
 +		hmm_pfns_clear(range, &range->pfns[i], hmm_vma_walk.last,
 +			       range->end);
 +		hmm_vma_range_done(range);
++=======
+ 		if (is_vm_hugetlb_page(vma)) {
+ 			if (huge_page_shift(hstate_vma(vma)) !=
+ 			    range->page_shift &&
+ 			    range->page_shift != PAGE_SHIFT)
+ 				return -EINVAL;
+ 		} else {
+ 			if (range->page_shift != PAGE_SHIFT)
+ 				return -EINVAL;
+ 		}
+ 
+ 		if (!(vma->vm_flags & VM_READ)) {
+ 			/*
+ 			 * If vma do not allow read access, then assume that it
+ 			 * does not allow write access, either. HMM does not
+ 			 * support architecture that allow write without read.
+ 			 */
+ 			hmm_pfns_clear(range, range->pfns,
+ 				range->start, range->end);
+ 			return -EPERM;
+ 		}
+ 
+ 		range->vma = vma;
+ 		hmm_vma_walk.pgmap = NULL;
+ 		hmm_vma_walk.last = start;
+ 		hmm_vma_walk.fault = true;
+ 		hmm_vma_walk.block = block;
+ 		hmm_vma_walk.range = range;
+ 		mm_walk.private = &hmm_vma_walk;
+ 		end = min(range->end, vma->vm_end);
+ 
+ 		mm_walk.vma = vma;
+ 		mm_walk.mm = vma->vm_mm;
+ 		mm_walk.pte_entry = NULL;
+ 		mm_walk.test_walk = NULL;
+ 		mm_walk.hugetlb_entry = NULL;
+ 		mm_walk.pud_entry = hmm_vma_walk_pud;
+ 		mm_walk.pmd_entry = hmm_vma_walk_pmd;
+ 		mm_walk.pte_hole = hmm_vma_walk_hole;
+ 		mm_walk.hugetlb_entry = hmm_vma_walk_hugetlb_entry;
+ 
+ 		do {
+ 			ret = walk_page_range(start, end, &mm_walk);
+ 			start = hmm_vma_walk.last;
+ 
+ 			/* Keep trying while the range is valid. */
+ 		} while (ret == -EBUSY && range->valid);
+ 
+ 		if (ret) {
+ 			unsigned long i;
+ 
+ 			i = (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
+ 			hmm_pfns_clear(range, &range->pfns[i],
+ 				hmm_vma_walk.last, range->end);
+ 			return ret;
+ 		}
+ 		start = end;
+ 
+ 	} while (start < range->end);
+ 
+ 	return (hmm_vma_walk.last - range->start) >> PAGE_SHIFT;
+ }
+ EXPORT_SYMBOL(hmm_range_fault);
+ 
+ /**
+  * hmm_range_dma_map() - hmm_range_fault() and dma map page all in one.
+  * @range: range being faulted
+  * @device: device against to dma map page to
+  * @daddrs: dma address of mapped pages
+  * @block: allow blocking on fault (if true it sleeps and do not drop mmap_sem)
+  * Return: number of pages mapped on success, -EAGAIN if mmap_sem have been
+  *          drop and you need to try again, some other error value otherwise
+  *
+  * Note same usage pattern as hmm_range_fault().
+  */
+ long hmm_range_dma_map(struct hmm_range *range,
+ 		       struct device *device,
+ 		       dma_addr_t *daddrs,
+ 		       bool block)
+ {
+ 	unsigned long i, npages, mapped;
+ 	long ret;
+ 
+ 	ret = hmm_range_fault(range, block);
+ 	if (ret <= 0)
+ 		return ret ? ret : -EBUSY;
+ 
+ 	npages = (range->end - range->start) >> PAGE_SHIFT;
+ 	for (i = 0, mapped = 0; i < npages; ++i) {
+ 		enum dma_data_direction dir = DMA_TO_DEVICE;
+ 		struct page *page;
+ 
+ 		/*
+ 		 * FIXME need to update DMA API to provide invalid DMA address
+ 		 * value instead of a function to test dma address value. This
+ 		 * would remove lot of dumb code duplicated accross many arch.
+ 		 *
+ 		 * For now setting it to 0 here is good enough as the pfns[]
+ 		 * value is what is use to check what is valid and what isn't.
+ 		 */
+ 		daddrs[i] = 0;
+ 
+ 		page = hmm_device_entry_to_page(range, range->pfns[i]);
+ 		if (page == NULL)
+ 			continue;
+ 
+ 		/* Check if range is being invalidated */
+ 		if (!range->valid) {
+ 			ret = -EBUSY;
+ 			goto unmap;
+ 		}
+ 
+ 		/* If it is read and write than map bi-directional. */
+ 		if (range->pfns[i] & range->flags[HMM_PFN_WRITE])
+ 			dir = DMA_BIDIRECTIONAL;
+ 
+ 		daddrs[i] = dma_map_page(device, page, 0, PAGE_SIZE, dir);
+ 		if (dma_mapping_error(device, daddrs[i])) {
+ 			ret = -EFAULT;
+ 			goto unmap;
+ 		}
+ 
+ 		mapped++;
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
  	}
 -
 -	return mapped;
 -
 -unmap:
 -	for (npages = i, i = 0; (i < npages) && mapped; ++i) {
 -		enum dma_data_direction dir = DMA_TO_DEVICE;
 -		struct page *page;
 -
 -		page = hmm_device_entry_to_page(range, range->pfns[i]);
 -		if (page == NULL)
 -			continue;
 -
 -		if (dma_mapping_error(device, daddrs[i]))
 -			continue;
 -
 -		/* If it is read and write than map bi-directional. */
 -		if (range->pfns[i] & range->flags[HMM_PFN_WRITE])
 -			dir = DMA_BIDIRECTIONAL;
 -
 -		dma_unmap_page(device, daddrs[i], PAGE_SIZE, dir);
 -		mapped--;
 -	}
 -
  	return ret;
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL(hmm_vma_fault);
++=======
+ EXPORT_SYMBOL(hmm_range_dma_map);
+ 
+ /**
+  * hmm_range_dma_unmap() - unmap range of that was map with hmm_range_dma_map()
+  * @range: range being unmapped
+  * @vma: the vma against which the range (optional)
+  * @device: device against which dma map was done
+  * @daddrs: dma address of mapped pages
+  * @dirty: dirty page if it had the write flag set
+  * Return: number of page unmapped on success, -EINVAL otherwise
+  *
+  * Note that caller MUST abide by mmu notifier or use HMM mirror and abide
+  * to the sync_cpu_device_pagetables() callback so that it is safe here to
+  * call set_page_dirty(). Caller must also take appropriate locks to avoid
+  * concurrent mmu notifier or sync_cpu_device_pagetables() to make progress.
+  */
+ long hmm_range_dma_unmap(struct hmm_range *range,
+ 			 struct vm_area_struct *vma,
+ 			 struct device *device,
+ 			 dma_addr_t *daddrs,
+ 			 bool dirty)
+ {
+ 	unsigned long i, npages;
+ 	long cpages = 0;
+ 
+ 	/* Sanity check. */
+ 	if (range->end <= range->start)
+ 		return -EINVAL;
+ 	if (!daddrs)
+ 		return -EINVAL;
+ 	if (!range->pfns)
+ 		return -EINVAL;
+ 
+ 	npages = (range->end - range->start) >> PAGE_SHIFT;
+ 	for (i = 0; i < npages; ++i) {
+ 		enum dma_data_direction dir = DMA_TO_DEVICE;
+ 		struct page *page;
+ 
+ 		page = hmm_device_entry_to_page(range, range->pfns[i]);
+ 		if (page == NULL)
+ 			continue;
+ 
+ 		/* If it is read and write than map bi-directional. */
+ 		if (range->pfns[i] & range->flags[HMM_PFN_WRITE]) {
+ 			dir = DMA_BIDIRECTIONAL;
+ 
+ 			/*
+ 			 * See comments in function description on why it is
+ 			 * safe here to call set_page_dirty()
+ 			 */
+ 			if (dirty)
+ 				set_page_dirty(page);
+ 		}
+ 
+ 		/* Unmap and clear pfns/dma address */
+ 		dma_unmap_page(device, daddrs[i], PAGE_SIZE, dir);
+ 		range->pfns[i] = range->values[HMM_PFN_NONE];
+ 		/* FIXME see comments in hmm_vma_dma_map() */
+ 		daddrs[i] = 0;
+ 		cpages++;
+ 	}
+ 
+ 	return cpages;
+ }
+ EXPORT_SYMBOL(hmm_range_dma_unmap);
++>>>>>>> 085ea25064a9 (mm/hmm: clean up some coding style and comments)
  #endif /* IS_ENABLED(CONFIG_HMM_MIRROR) */
  
  
* Unmerged path include/linux/hmm.h
* Unmerged path mm/hmm.c
