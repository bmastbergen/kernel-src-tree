libceph: use MSG_SENDPAGE_NOTLAST with ceph_tcp_sendpage()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 433b0a12953bc1dfcb52febb186136395a65aad0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/433b0a12.failed

Prevent do_tcp_sendpages() from calling tcp_push() (at least) once per
page.  Instead, arrange for tcp_push() to be called (at least) once per
data payload.  This results in more MSS-sized packets and fewer packets
overall (5-10% reduction in my tests with typical OSD request sizes).
See commits 2f5338442425 ("tcp: allow splice() to build full TSO
packets"), 35f9c09fe9c7 ("tcp: tcp_sendpages() should call tcp_push()
once") and ae62ca7b0321 ("tcp: fix MSG_SENDPAGE_NOTLAST logic") for
details.

Here is an example of a packet size histogram for 128K OSD requests
(MSS = 1448, top 5):

Before:

     SIZE    COUNT
     1448   777700
      952   127915
     1200    39238
     1219     9806
       21     5675

After:

     SIZE    COUNT
     1448   897280
       21     6201
     1019     2797
      643     2739
      376     2479

We could do slightly better by explicitly corking the socket but it's
not clear it's worth it.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 433b0a12953bc1dfcb52febb186136395a65aad0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/messenger.c
diff --cc net/ceph/messenger.c
index 84b36e9bd1ee,649faa626b35..000000000000
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@@ -560,24 -560,15 +560,36 @@@ static int ceph_tcp_sendmsg(struct sock
  	return r;
  }
  
++<<<<<<< HEAD
 +static int __ceph_tcp_sendpage(struct socket *sock, struct page *page,
 +		     int offset, size_t size, bool more)
 +{
 +	int flags = MSG_DONTWAIT | MSG_NOSIGNAL | (more ? MSG_MORE : MSG_EOR);
 +	int ret;
 +
 +	ret = kernel_sendpage(sock, page, offset, size, flags);
 +	if (ret == -EAGAIN)
 +		ret = 0;
 +
 +	return ret;
 +}
 +
++=======
+ /*
+  * @more: either or both of MSG_MORE and MSG_SENDPAGE_NOTLAST
+  */
++>>>>>>> 433b0a12953b (libceph: use MSG_SENDPAGE_NOTLAST with ceph_tcp_sendpage())
  static int ceph_tcp_sendpage(struct socket *sock, struct page *page,
- 		     int offset, size_t size, bool more)
+ 			     int offset, size_t size, int more)
  {
++<<<<<<< HEAD
 +	struct msghdr msg = { .msg_flags = MSG_DONTWAIT | MSG_NOSIGNAL };
 +	struct bio_vec bvec;
++=======
+ 	ssize_t (*sendpage)(struct socket *sock, struct page *page,
+ 			    int offset, size_t size, int flags);
+ 	int flags = MSG_DONTWAIT | MSG_NOSIGNAL | more;
++>>>>>>> 433b0a12953b (libceph: use MSG_SENDPAGE_NOTLAST with ceph_tcp_sendpage())
  	int ret;
  
  	/*
* Unmerged path net/ceph/messenger.c
