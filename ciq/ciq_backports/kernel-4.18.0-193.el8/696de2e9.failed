RDMA/netlink: Resort policy array

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Doug Ledford <dledford@redhat.com>
commit 696de2e9ccec812eae8c85bd24c75bcb12104750
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/696de2e9.failed

Sort the netlink policy array by netlink attribute name.  This will make
it easier in the future to find the entry you are looking for when you
need to make changes, or to make sure you don't add the same entry
twice.

Fix the whitespace while we are there.

	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 696de2e9ccec812eae8c85bd24c75bcb12104750)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/nldev.c
diff --cc drivers/infiniband/core/nldev.c
index efccd8e0fb77,6006d23d0410..000000000000
--- a/drivers/infiniband/core/nldev.c
+++ b/drivers/infiniband/core/nldev.c
@@@ -39,74 -40,96 +39,121 @@@
  
  #include "core_priv.h"
  #include "cma_priv.h"
 -#include "restrack.h"
  
+ /*
+  * Sort array elements by the netlink attribute name
+  */
  static const struct nla_policy nldev_policy[RDMA_NLDEV_ATTR_MAX] = {
- 	[RDMA_NLDEV_ATTR_DEV_INDEX]     = { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_DEV_NAME]	= { .type = NLA_NUL_STRING,
- 					    .len = IB_DEVICE_NAME_MAX - 1},
- 	[RDMA_NLDEV_ATTR_PORT_INDEX]	= { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_FW_VERSION]	= { .type = NLA_NUL_STRING,
- 					    .len = IB_FW_VERSION_NAME_MAX - 1},
- 	[RDMA_NLDEV_ATTR_NODE_GUID]	= { .type = NLA_U64 },
- 	[RDMA_NLDEV_ATTR_SYS_IMAGE_GUID] = { .type = NLA_U64 },
- 	[RDMA_NLDEV_ATTR_SUBNET_PREFIX]	= { .type = NLA_U64 },
- 	[RDMA_NLDEV_ATTR_LID]		= { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_SM_LID]	= { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_LMC]		= { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_PORT_STATE]	= { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_PORT_PHYS_STATE] = { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_DEV_NODE_TYPE] = { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_RES_SUMMARY]	= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY]	= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME] = { .type = NLA_NUL_STRING,
- 					     .len = 16 },
- 	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR] = { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_CHARDEV]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_CHARDEV_ABI]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_CHARDEV_NAME]		= { .type = NLA_NUL_STRING,
+ 					.len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
+ 	[RDMA_NLDEV_ATTR_CHARDEV_TYPE]		= { .type = NLA_NUL_STRING,
+ 					.len = 128 },
+ 	[RDMA_NLDEV_ATTR_DEV_INDEX]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_DEV_NAME]		= { .type = NLA_NUL_STRING,
+ 					.len = IB_DEVICE_NAME_MAX - 1},
+ 	[RDMA_NLDEV_ATTR_DEV_NODE_TYPE]		= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_DEV_PROTOCOL]		= { .type = NLA_NUL_STRING,
+ 					.len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
+ 	[RDMA_NLDEV_ATTR_DRIVER]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_DRIVER_ENTRY]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_DRIVER_PRINT_TYPE]	= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_DRIVER_STRING]		= { .type = NLA_NUL_STRING,
+ 					.len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
+ 	[RDMA_NLDEV_ATTR_DRIVER_S32]		= { .type = NLA_S32 },
+ 	[RDMA_NLDEV_ATTR_DRIVER_S64]		= { .type = NLA_S64 },
+ 	[RDMA_NLDEV_ATTR_DRIVER_U32]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_DRIVER_U64]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_FW_VERSION]		= { .type = NLA_NUL_STRING,
+ 					.len = IB_FW_VERSION_NAME_MAX - 1},
+ 	[RDMA_NLDEV_ATTR_LID]			= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_LINK_TYPE]		= { .type = NLA_NUL_STRING,
+ 					.len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
+ 	[RDMA_NLDEV_ATTR_LMC]			= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_NDEV_INDEX]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_NDEV_NAME]		= { .type = NLA_NUL_STRING,
+ 					.len = IFNAMSIZ },
+ 	[RDMA_NLDEV_ATTR_NODE_GUID]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_PORT_INDEX]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_PORT_PHYS_STATE]	= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_PORT_STATE]		= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_RES_CM_ID]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_CM_IDN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_CM_ID_ENTRY]	= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_CQ]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_CQE]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_CQN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_CQ_ENTRY]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_CTXN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_DST_ADDR]		= {
+ 			.len = sizeof(struct __kernel_sockaddr_storage) },
+ 	[RDMA_NLDEV_ATTR_RES_IOVA]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_RES_KERN_NAME]		= { .type = NLA_NUL_STRING,
+ 					.len = TASK_COMM_LEN },
+ 	[RDMA_NLDEV_ATTR_RES_LKEY]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_LOCAL_DMA_LKEY]	= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_LQPN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_MR]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_MRLEN]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_RES_MRN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_MR_ENTRY]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_PATH_MIG_STATE]	= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_RES_PD]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_PDN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_PD_ENTRY]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_PID]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_POLL_CTX]		= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_RES_PS]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_QP]		= { .type = NLA_NESTED },
  	[RDMA_NLDEV_ATTR_RES_QP_ENTRY]		= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_LQPN]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_RKEY]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_RQPN]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_RQ_PSN]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_SQ_PSN]		= { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_RES_PATH_MIG_STATE] = { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_RES_TYPE]		= { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_RES_STATE]		= { .type = NLA_U8 },
- 	[RDMA_NLDEV_ATTR_RES_PID]		= { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_RES_KERN_NAME]		= { .type = NLA_NUL_STRING,
- 						    .len = TASK_COMM_LEN },
- 	[RDMA_NLDEV_ATTR_RES_CM_ID]		= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_CM_ID_ENTRY]	= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_PS]		= { .type = NLA_U32 },
- 	[RDMA_NLDEV_ATTR_RES_SRC_ADDR]	= {
- 			.len = sizeof(struct __kernel_sockaddr_storage) },
- 	[RDMA_NLDEV_ATTR_RES_DST_ADDR]	= {
+ 	[RDMA_NLDEV_ATTR_RES_SRC_ADDR]		= {
  			.len = sizeof(struct __kernel_sockaddr_storage) },
- 	[RDMA_NLDEV_ATTR_RES_CQ]		= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_CQ_ENTRY]		= { .type = NLA_NESTED },
- 	[RDMA_NLDEV_ATTR_RES_CQE]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_RES_STATE]		= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_RES_SUMMARY]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY]	= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR]= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME]= { .type = NLA_NUL_STRING,
+ 					.len = 16 },
+ 	[RDMA_NLDEV_ATTR_RES_TYPE]		= { .type = NLA_U8 },
+ 	[RDMA_NLDEV_ATTR_RES_UNSAFE_GLOBAL_RKEY]= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_USECNT]		= { .type = NLA_U64 },
++<<<<<<< HEAD
 +	[RDMA_NLDEV_ATTR_RES_POLL_CTX]		= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_RES_MR]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_MR_ENTRY]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_RKEY]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_LKEY]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_IOVA]		= { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_RES_MRLEN]		= { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_RES_PD]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_PD_ENTRY]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_LOCAL_DMA_LKEY]	= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_UNSAFE_GLOBAL_RKEY] = { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_NDEV_INDEX]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_NDEV_NAME]		= { .type = NLA_NUL_STRING,
 +						    .len = IFNAMSIZ },
 +	[RDMA_NLDEV_ATTR_DRIVER]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_DRIVER_ENTRY]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_DRIVER_STRING]		= { .type = NLA_NUL_STRING,
 +				    .len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
 +	[RDMA_NLDEV_ATTR_DRIVER_PRINT_TYPE]	= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_DRIVER_S32]		= { .type = NLA_S32 },
 +	[RDMA_NLDEV_ATTR_DRIVER_U32]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_DRIVER_S64]		= { .type = NLA_S64 },
 +	[RDMA_NLDEV_ATTR_DRIVER_U64]		= { .type = NLA_U64 },
++=======
+ 	[RDMA_NLDEV_ATTR_SM_LID]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_SUBNET_PREFIX]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_SYS_IMAGE_GUID]	= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_UVERBS_DRIVER_ID]	= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_NET_NS_FD]			= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_SYS_ATTR_NETNS_MODE]	= { .type = NLA_U8 },
++>>>>>>> 696de2e9ccec (RDMA/netlink: Resort policy array)
  };
  
  static int put_driver_name_print_type(struct sk_buff *msg, const char *name,
* Unmerged path drivers/infiniband/core/nldev.c
