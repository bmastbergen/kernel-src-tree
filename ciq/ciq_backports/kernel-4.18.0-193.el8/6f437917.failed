ASoC: Intel: Skylake: Release topology when we are done with it

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: Intel: Skylake: Release topology when we are done with it (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 95.45%
commit-author Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
commit 6f43791713c5bb1212ec8497034275dfdbba5cbd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/6f437917.failed

Currently topology is kept in memory while driver is running. It's
unnecessary, as it's only needed during parsing.

	Signed-off-by: Amadeusz Sławiński <amadeuszx.slawinski@linux.intel.com>
Link: https://lore.kernel.org/r/20190827141712.21015-6-amadeuszx.slawinski@linux.intel.com
	Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 6f43791713c5bb1212ec8497034275dfdbba5cbd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/skylake/skl-topology.c
diff --cc sound/soc/intel/skylake/skl-topology.c
index c1a64d6597c2,69cd7a81bf2a..000000000000
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@@ -3722,21 -3579,18 +3722,25 @@@ int skl_tplg_init(struct snd_soc_compon
  	 * The complete tplg for SKL is loaded as index 0, we don't use
  	 * any other index
  	 */
- 	ret = snd_soc_tplg_component_load(component,
- 					&skl_tplg_ops, fw, 0);
+ 	ret = snd_soc_tplg_component_load(component, &skl_tplg_ops, fw, 0);
  	if (ret < 0) {
  		dev_err(bus->dev, "tplg component load failed%d\n", ret);
- 		release_firmware(fw);
- 		return -EINVAL;
+ 		goto err;
  	}
  
++<<<<<<< HEAD
 +	skl->resource.max_mcps = SKL_MAX_MCPS;
 +	skl->resource.max_mem = SKL_FW_MAX_MEM;
 +
 +	skl->tplg = fw;
++=======
++>>>>>>> 6f43791713c5 (ASoC: Intel: Skylake: Release topology when we are done with it)
  	ret = skl_tplg_create_pipe_widget_list(component);
- 	if (ret < 0)
- 		return ret;
+ 	if (ret < 0) {
+ 		dev_err(bus->dev, "tplg create pipe widget list failed%d\n",
+ 				ret);
+ 		goto err;
+ 	}
  
  	list_for_each_entry(ppl, &skl->ppl_list, node)
  		skl_tplg_set_pipe_type(skl, ppl->pipe);
* Unmerged path sound/soc/intel/skylake/skl-topology.c
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 1418dc74dcbe..c75686926165 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -82,7 +82,6 @@ struct skl {
 	const char *fw_name;
 	char tplg_name[64];
 	unsigned short pci_id;
-	const struct firmware *tplg;
 
 	int supend_active;
 
