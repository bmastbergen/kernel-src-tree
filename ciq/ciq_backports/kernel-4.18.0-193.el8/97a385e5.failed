libceph: remove ceph_get_direct_page_vector()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 97a385e558292ba0851906783642239865670a5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/97a385e5.failed

This function is entirely unused.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 97a385e558292ba0851906783642239865670a5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/pagevec.c
diff --cc net/ceph/pagevec.c
index d3736f5bffec,64305e7056a1..000000000000
--- a/net/ceph/pagevec.c
+++ b/net/ceph/pagevec.c
@@@ -10,39 -10,6 +10,42 @@@
  
  #include <linux/ceph/libceph.h>
  
++<<<<<<< HEAD
 +/*
 + * build a vector of user pages
 + */
 +struct page **ceph_get_direct_page_vector(const void __user *data,
 +					  int num_pages, bool write_page)
 +{
 +	struct page **pages;
 +	int got = 0;
 +	int rc = 0;
 +
 +	pages = kmalloc_array(num_pages, sizeof(*pages), GFP_NOFS);
 +	if (!pages)
 +		return ERR_PTR(-ENOMEM);
 +
 +	while (got < num_pages) {
 +		rc = get_user_pages_fast(
 +		    (unsigned long)data + ((unsigned long)got * PAGE_SIZE),
 +		    num_pages - got, write_page, pages + got);
 +		if (rc < 0)
 +			break;
 +		BUG_ON(rc == 0);
 +		got += rc;
 +	}
 +	if (rc < 0)
 +		goto fail;
 +	return pages;
 +
 +fail:
 +	ceph_put_page_vector(pages, got, false);
 +	return ERR_PTR(rc);
 +}
 +EXPORT_SYMBOL(ceph_get_direct_page_vector);
 +
++=======
++>>>>>>> 97a385e55829 (libceph: remove ceph_get_direct_page_vector())
  void ceph_put_page_vector(struct page **pages, int num_pages, bool dirty)
  {
  	int i;
diff --git a/include/linux/ceph/libceph.h b/include/linux/ceph/libceph.h
index 337d5049ff93..a3cddf5f0e60 100644
--- a/include/linux/ceph/libceph.h
+++ b/include/linux/ceph/libceph.h
@@ -299,10 +299,6 @@ int ceph_wait_for_latest_osdmap(struct ceph_client *client,
 
 /* pagevec.c */
 extern void ceph_release_page_vector(struct page **pages, int num_pages);
-
-extern struct page **ceph_get_direct_page_vector(const void __user *data,
-						 int num_pages,
-						 bool write_page);
 extern void ceph_put_page_vector(struct page **pages, int num_pages,
 				 bool dirty);
 extern struct page **ceph_alloc_page_vector(int num_pages, gfp_t flags);
* Unmerged path net/ceph/pagevec.c
