mm/sparsemem: add helpers track active portions of a section at boot

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [mm] sparsemem: add helpers track active portions of a section at boot (Baoquan He) [1724969]
Rebuild_FUZZ: 97.74%
commit-author Dan Williams <dan.j.williams@intel.com>
commit f46edbd1b1516da1fb34c917775168d5df576f78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f46edbd1.failed

Prepare for hot{plug,remove} of sub-ranges of a section by tracking a
sub-section active bitmask, each bit representing a PMD_SIZE span of the
architecture's memory hotplug section size.

The implications of a partially populated section is that pfn_valid()
needs to go beyond a valid_section() check and either determine that the
section is an "early section", or read the sub-section active ranges
from the bitmask.  The expectation is that the bitmask (subsection_map)
fits in the same cacheline as the valid_section() / early_section()
data, so the incremental performance overhead to pfn_valid() should be
negligible.

The rationale for using early_section() to short-ciruit the
subsection_map check is that there are legacy code paths that use
pfn_valid() at section granularity before validating the pfn against
pgdat data.  So, the early_section() check allows those traditional
assumptions to persist while also permitting subsection_map to tell the
truth for purposes of populating the unused portions of early sections
with PMEM and other ZONE_DEVICE mappings.

Link: http://lkml.kernel.org/r/156092350874.979959.18185938451405518285.stgit@dwillia2-desk3.amr.corp.intel.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
	Reported-by: Qian Cai <cai@lca.pw>
	Tested-by: Jane Chu <jane.chu@oracle.com>
	Tested-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>	[ppc64]
	Reviewed-by: Oscar Salvador <osalvador@suse.de>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Logan Gunthorpe <logang@deltatee.com>
	Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Jeff Moyer <jmoyer@redhat.com>
	Cc: Jérôme Glisse <jglisse@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Mike Rapoport <rppt@linux.ibm.com>
	Cc: Toshi Kani <toshi.kani@hpe.com>
	Cc: Wei Yang <richardw.yang@linux.intel.com>
	Cc: Jason Gunthorpe <jgg@mellanox.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f46edbd1b1516da1fb34c917775168d5df576f78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mmzone.h
diff --cc include/linux/mmzone.h
index 34d200212014,7747ec9de588..000000000000
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@@ -1124,6 -1160,26 +1124,29 @@@ static inline unsigned long section_nr_
  #define SECTION_ALIGN_UP(pfn)	(((pfn) + PAGES_PER_SECTION - 1) & PAGE_SECTION_MASK)
  #define SECTION_ALIGN_DOWN(pfn)	((pfn) & PAGE_SECTION_MASK)
  
++<<<<<<< HEAD
++=======
+ #define SUBSECTION_SHIFT 21
+ 
+ #define PFN_SUBSECTION_SHIFT (SUBSECTION_SHIFT - PAGE_SHIFT)
+ #define PAGES_PER_SUBSECTION (1UL << PFN_SUBSECTION_SHIFT)
+ #define PAGE_SUBSECTION_MASK (~(PAGES_PER_SUBSECTION-1))
+ 
+ #if SUBSECTION_SHIFT > SECTION_SIZE_BITS
+ #error Subsection size exceeds section size
+ #else
+ #define SUBSECTIONS_PER_SECTION (1UL << (SECTION_SIZE_BITS - SUBSECTION_SHIFT))
+ #endif
+ 
+ struct mem_section_usage {
+ 	DECLARE_BITMAP(subsection_map, SUBSECTIONS_PER_SECTION);
+ 	/* See declaration of similar field in struct zone */
+ 	unsigned long pageblock_flags[0];
+ };
+ 
+ void subsection_map_init(unsigned long pfn, unsigned long nr_pages);
+ 
++>>>>>>> f46edbd1b151 (mm/sparsemem: add helpers track active portions of a section at boot)
  struct page;
  struct page_ext;
  struct mem_section {
@@@ -1293,6 -1387,8 +1344,11 @@@ void sparse_init(void)
  #else
  #define sparse_init()	do {} while (0)
  #define sparse_index_init(_sec, _nid)  do {} while (0)
++<<<<<<< HEAD
++=======
+ #define pfn_present pfn_valid
+ #define subsection_map_init(_pfn, _nr_pages) do {} while (0)
++>>>>>>> f46edbd1b151 (mm/sparsemem: add helpers track active portions of a section at boot)
  #endif /* CONFIG_SPARSEMEM */
  
  /*
* Unmerged path include/linux/mmzone.h
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 90f3a46ef509..6eae22d2e7c6 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -6978,12 +6978,18 @@ void __init free_area_init_nodes(unsigned long *max_zone_pfn)
 			       (u64)zone_movable_pfn[i] << PAGE_SHIFT);
 	}
 
-	/* Print out the early node map */
+	/*
+	 * Print out the early node map, and initialize the
+	 * subsection-map relative to active online memory ranges to
+	 * enable future "sub-section" extensions of the memory map.
+	 */
 	pr_info("Early memory node ranges\n");
-	for_each_mem_pfn_range(i, MAX_NUMNODES, &start_pfn, &end_pfn, &nid)
+	for_each_mem_pfn_range(i, MAX_NUMNODES, &start_pfn, &end_pfn, &nid) {
 		pr_info("  node %3d: [mem %#018Lx-%#018Lx]\n", nid,
 			(u64)start_pfn << PAGE_SHIFT,
 			((u64)end_pfn << PAGE_SHIFT) - 1);
+		subsection_map_init(start_pfn, end_pfn - start_pfn);
+	}
 
 	/* Initialise every node */
 	mminit_verify_pageflags_layout();
diff --git a/mm/sparse.c b/mm/sparse.c
index 02b5de3161a3..7a92c4e9ee38 100644
--- a/mm/sparse.c
+++ b/mm/sparse.c
@@ -205,6 +205,41 @@ static inline unsigned long first_present_section_nr(void)
 	return next_present_section_nr(-1);
 }
 
+void subsection_mask_set(unsigned long *map, unsigned long pfn,
+		unsigned long nr_pages)
+{
+	int idx = subsection_map_index(pfn);
+	int end = subsection_map_index(pfn + nr_pages - 1);
+
+	bitmap_set(map, idx, end - idx + 1);
+}
+
+void __init subsection_map_init(unsigned long pfn, unsigned long nr_pages)
+{
+	int end_sec = pfn_to_section_nr(pfn + nr_pages - 1);
+	int i, start_sec = pfn_to_section_nr(pfn);
+
+	if (!nr_pages)
+		return;
+
+	for (i = start_sec; i <= end_sec; i++) {
+		struct mem_section *ms;
+		unsigned long pfns;
+
+		pfns = min(nr_pages, PAGES_PER_SECTION
+				- (pfn & ~PAGE_SECTION_MASK));
+		ms = __nr_to_section(i);
+		subsection_mask_set(ms->usage->subsection_map, pfn, pfns);
+
+		pr_debug("%s: sec: %d pfns: %ld set(%d, %d)\n", __func__, i,
+				pfns, subsection_map_index(pfn),
+				subsection_map_index(pfn + pfns - 1));
+
+		pfn += pfns;
+		nr_pages -= pfns;
+	}
+}
+
 /* Record a memory area against a node. */
 void __init memory_present(int nid, unsigned long start, unsigned long end)
 {
