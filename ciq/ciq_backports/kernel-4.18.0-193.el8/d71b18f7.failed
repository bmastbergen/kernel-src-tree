HID: logitech-hidpp: do not hardcode very long report length

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [hid] logitech-hidpp: do not hardcode very long report length (Benjamin Tissoires) [1740778]
Rebuild_FUZZ: 95.65%
commit-author Hans de Goede <hdegoede@redhat.com>
commit d71b18f7c7999381a9b721d761b0aceffdcd65da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d71b18f7.failed

The HID++ spec says the following about the very long report length:
"n Bytes, depends on HID++ collection declaration".

Hardcoding this breaks talking to some HID++ devices over BlueTooth, since
they declare only 45 bytes data for the very long report, rather then the
hardcoded 63.

This commit fixes this by getting the actual report length from the
descriptors.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
(cherry picked from commit d71b18f7c7999381a9b721d761b0aceffdcd65da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-logitech-hidpp.c
diff --cc drivers/hid/hid-logitech-hidpp.c
index adbbeea06947,ecf1b1e22e1a..000000000000
--- a/drivers/hid/hid-logitech-hidpp.c
+++ b/drivers/hid/hid-logitech-hidpp.c
@@@ -3160,6 -3227,49 +3161,52 @@@ static const struct attribute_group ps_
  	.attrs = sysfs_attrs
  };
  
++<<<<<<< HEAD
++=======
+ static int hidpp_get_report_length(struct hid_device *hdev, int id)
+ {
+ 	struct hid_report_enum *re;
+ 	struct hid_report *report;
+ 
+ 	re = &(hdev->report_enum[HID_OUTPUT_REPORT]);
+ 	report = re->report_id_hash[id];
+ 	if (!report)
+ 		return 0;
+ 
+ 	return report->field[0]->report_count + 1;
+ }
+ 
+ static bool hidpp_validate_report(struct hid_device *hdev, int id,
+ 				  int expected_length, bool optional)
+ {
+ 	int report_length;
+ 
+ 	if (id >= HID_MAX_IDS || id < 0) {
+ 		hid_err(hdev, "invalid HID report id %u\n", id);
+ 		return false;
+ 	}
+ 
+ 	report_length = hidpp_get_report_length(hdev, id);
+ 	if (!report_length)
+ 		return optional;
+ 
+ 	if (report_length < expected_length) {
+ 		hid_warn(hdev, "not enough values in hidpp report %d\n", id);
+ 		return false;
+ 	}
+ 
+ 	return true;
+ }
+ 
+ static bool hidpp_validate_device(struct hid_device *hdev)
+ {
+ 	return hidpp_validate_report(hdev, REPORT_ID_HIDPP_SHORT,
+ 				     HIDPP_REPORT_SHORT_LENGTH, false) &&
+ 	       hidpp_validate_report(hdev, REPORT_ID_HIDPP_LONG,
+ 				     HIDPP_REPORT_LONG_LENGTH, true);
+ }
+ 
++>>>>>>> d71b18f7c799 (HID: logitech-hidpp: do not hardcode very long report length)
  static int hidpp_probe(struct hid_device *hdev, const struct hid_device_id *id)
  {
  	struct hidpp_device *hidpp;
* Unmerged path drivers/hid/hid-logitech-hidpp.c
