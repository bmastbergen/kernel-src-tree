RDMA: Handle SRQ allocations by IB/core

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 68e326dea1dba935f6a5299a24343a58b33eed10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/68e326de.failed

Convert SRQ allocation from drivers to be in the IB/core

	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 68e326dea1dba935f6a5299a24343a58b33eed10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/device.c
#	drivers/infiniband/core/verbs.c
#	drivers/infiniband/hw/bnxt_re/ib_verbs.c
#	drivers/infiniband/hw/bnxt_re/ib_verbs.h
#	drivers/infiniband/hw/bnxt_re/main.c
#	drivers/infiniband/hw/cxgb4/iw_cxgb4.h
#	drivers/infiniband/hw/cxgb4/provider.c
#	drivers/infiniband/hw/cxgb4/qp.c
#	drivers/infiniband/hw/hns/hns_roce_device.h
#	drivers/infiniband/hw/hns/hns_roce_main.c
#	drivers/infiniband/hw/hns/hns_roce_srq.c
#	drivers/infiniband/hw/mlx4/main.c
#	drivers/infiniband/hw/mlx4/mlx4_ib.h
#	drivers/infiniband/hw/mlx4/srq.c
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/infiniband/hw/mlx5/srq.c
#	drivers/infiniband/hw/mthca/mthca_provider.c
#	drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
#	drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
#	drivers/infiniband/hw/qedr/main.c
#	drivers/infiniband/hw/qedr/verbs.c
#	drivers/infiniband/hw/qedr/verbs.h
#	drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
#	drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
#	drivers/infiniband/sw/rdmavt/srq.c
#	drivers/infiniband/sw/rdmavt/srq.h
#	drivers/infiniband/sw/rdmavt/vt.c
#	drivers/infiniband/sw/rxe/rxe_verbs.c
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/core/device.c
index ec96a7b1c811,88c4238bbee1..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -1357,6 -2221,11 +1357,14 @@@ void ib_set_device_ops(struct ib_devic
  	SET_DEVICE_OP(dev_ops, set_vf_guid);
  	SET_DEVICE_OP(dev_ops, set_vf_link_state);
  	SET_DEVICE_OP(dev_ops, unmap_fmr);
++<<<<<<< HEAD
++=======
+ 
+ 	SET_OBJ_SIZE(dev_ops, ib_ah);
+ 	SET_OBJ_SIZE(dev_ops, ib_pd);
+ 	SET_OBJ_SIZE(dev_ops, ib_srq);
+ 	SET_OBJ_SIZE(dev_ops, ib_ucontext);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  }
  EXPORT_SYMBOL(ib_set_device_ops);
  
diff --cc drivers/infiniband/core/verbs.c
index 3220fb42ecce,7313edc9f091..000000000000
--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@@ -998,36 -1022,23 +1009,34 @@@ int ib_query_srq(struct ib_srq *srq
  }
  EXPORT_SYMBOL(ib_query_srq);
  
 -int ib_destroy_srq_user(struct ib_srq *srq, struct ib_udata *udata)
 +int ib_destroy_srq(struct ib_srq *srq)
  {
- 	struct ib_pd *pd;
- 	enum ib_srq_type srq_type;
- 	struct ib_xrcd *uninitialized_var(xrcd);
- 	struct ib_cq *uninitialized_var(cq);
- 	int ret;
- 
  	if (atomic_read(&srq->usecnt))
  		return -EBUSY;
  
- 	pd = srq->pd;
- 	srq_type = srq->srq_type;
- 	if (ib_srq_has_cq(srq_type))
- 		cq = srq->ext.cq;
- 	if (srq_type == IB_SRQT_XRC)
- 		xrcd = srq->ext.xrc.xrcd;
+ 	srq->device->ops.destroy_srq(srq, udata);
  
++<<<<<<< HEAD
 +	ret = srq->device->ops.destroy_srq(srq);
 +	if (!ret) {
 +		atomic_dec(&pd->usecnt);
 +		if (srq_type == IB_SRQT_XRC)
 +			atomic_dec(&xrcd->usecnt);
 +		if (ib_srq_has_cq(srq_type))
 +			atomic_dec(&cq->usecnt);
 +	}
++=======
+ 	atomic_dec(&srq->pd->usecnt);
+ 	if (srq->srq_type == IB_SRQT_XRC)
+ 		atomic_dec(&srq->ext.xrc.xrcd->usecnt);
+ 	if (ib_srq_has_cq(srq->srq_type))
+ 		atomic_dec(&srq->ext.cq->usecnt);
+ 	kfree(srq);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  
- 	return ret;
+ 	return 0;
  }
 -EXPORT_SYMBOL(ib_destroy_srq_user);
 +EXPORT_SYMBOL(ib_destroy_srq);
  
  /* Queue pairs */
  
diff --cc drivers/infiniband/hw/bnxt_re/ib_verbs.c
index bfcab22666c5,dc53604171a0..000000000000
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.c
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
@@@ -1338,7 -1305,7 +1338,11 @@@ static enum ib_mtu __to_ib_mtu(u32 mtu
  }
  
  /* Shared Receive Queues */
++<<<<<<< HEAD
 +int bnxt_re_destroy_srq(struct ib_srq *ib_srq)
++=======
+ void bnxt_re_destroy_srq(struct ib_srq *ib_srq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct bnxt_re_srq *srq = container_of(ib_srq, struct bnxt_re_srq,
  					       ib_srq);
diff --cc drivers/infiniband/hw/bnxt_re/ib_verbs.h
index c4af72604b4f,bd4fa22985eb..000000000000
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.h
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.h
@@@ -163,25 -163,21 +163,36 @@@ int bnxt_re_query_gid(struct ib_device 
  		      int index, union ib_gid *gid);
  enum rdma_link_layer bnxt_re_get_link_layer(struct ib_device *ibdev,
  					    u8 port_num);
 -int bnxt_re_alloc_pd(struct ib_pd *pd, struct ib_udata *udata);
 -void bnxt_re_dealloc_pd(struct ib_pd *pd, struct ib_udata *udata);
 -int bnxt_re_create_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr, u32 flags,
 -		      struct ib_udata *udata);
 +struct ib_pd *bnxt_re_alloc_pd(struct ib_device *ibdev,
 +			       struct ib_ucontext *context,
 +			       struct ib_udata *udata);
 +int bnxt_re_dealloc_pd(struct ib_pd *pd);
 +struct ib_ah *bnxt_re_create_ah(struct ib_pd *pd,
 +				struct rdma_ah_attr *ah_attr,
 +				u32 flags,
 +				struct ib_udata *udata);
  int bnxt_re_modify_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr);
  int bnxt_re_query_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr);
++<<<<<<< HEAD
 +int bnxt_re_destroy_ah(struct ib_ah *ah, u32 flags);
 +struct ib_srq *bnxt_re_create_srq(struct ib_pd *pd,
 +				  struct ib_srq_init_attr *srq_init_attr,
 +				  struct ib_udata *udata);
++=======
+ void bnxt_re_destroy_ah(struct ib_ah *ah, u32 flags);
+ int bnxt_re_create_srq(struct ib_srq *srq,
+ 		       struct ib_srq_init_attr *srq_init_attr,
+ 		       struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  int bnxt_re_modify_srq(struct ib_srq *srq, struct ib_srq_attr *srq_attr,
  		       enum ib_srq_attr_mask srq_attr_mask,
  		       struct ib_udata *udata);
  int bnxt_re_query_srq(struct ib_srq *srq, struct ib_srq_attr *srq_attr);
++<<<<<<< HEAD
 +int bnxt_re_destroy_srq(struct ib_srq *srq);
++=======
+ void bnxt_re_destroy_srq(struct ib_srq *srq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  int bnxt_re_post_srq_recv(struct ib_srq *srq, const struct ib_recv_wr *recv_wr,
  			  const struct ib_recv_wr **bad_recv_wr);
  struct ib_qp *bnxt_re_create_qp(struct ib_pd *pd,
diff --cc drivers/infiniband/hw/bnxt_re/main.c
index 0d40a930c192,bbdfbbf5e9a5..000000000000
--- a/drivers/infiniband/hw/bnxt_re/main.c
+++ b/drivers/infiniband/hw/bnxt_re/main.c
@@@ -637,6 -637,10 +637,13 @@@ static const struct ib_device_ops bnxt_
  	.query_srq = bnxt_re_query_srq,
  	.reg_user_mr = bnxt_re_reg_user_mr,
  	.req_notify_cq = bnxt_re_req_notify_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_ah, bnxt_re_ah, ib_ah),
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, bnxt_re_pd, ib_pd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, bnxt_re_srq, ib_srq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, bnxt_re_ucontext, ib_uctx),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
  static int bnxt_re_register_ib(struct bnxt_re_dev *rdev)
diff --cc drivers/infiniband/hw/cxgb4/iw_cxgb4.h
index 7dffb68092fc,916ef982172e..000000000000
--- a/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
+++ b/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
@@@ -1057,11 -1000,10 +1057,18 @@@ int c4iw_arm_cq(struct ib_cq *ibcq, enu
  int c4iw_modify_srq(struct ib_srq *ib_srq, struct ib_srq_attr *attr,
  		    enum ib_srq_attr_mask srq_attr_mask,
  		    struct ib_udata *udata);
++<<<<<<< HEAD
 +int c4iw_destroy_srq(struct ib_srq *ib_srq);
 +struct ib_srq *c4iw_create_srq(struct ib_pd *pd,
 +			       struct ib_srq_init_attr *attrs,
 +			       struct ib_udata *udata);
 +int c4iw_destroy_qp(struct ib_qp *ib_qp);
++=======
+ void c4iw_destroy_srq(struct ib_srq *ib_srq, struct ib_udata *udata);
+ int c4iw_create_srq(struct ib_srq *srq, struct ib_srq_init_attr *attrs,
+ 		    struct ib_udata *udata);
+ int c4iw_destroy_qp(struct ib_qp *ib_qp, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  struct ib_qp *c4iw_create_qp(struct ib_pd *pd,
  			     struct ib_qp_init_attr *attrs,
  			     struct ib_udata *udata);
diff --cc drivers/infiniband/hw/cxgb4/provider.c
index adda8df00ce5,74ffc24321cd..000000000000
--- a/drivers/infiniband/hw/cxgb4/provider.c
+++ b/drivers/infiniband/hw/cxgb4/provider.c
@@@ -558,6 -544,9 +558,12 @@@ static const struct ib_device_ops c4iw_
  	.query_qp = c4iw_ib_query_qp,
  	.reg_user_mr = c4iw_reg_user_mr,
  	.req_notify_cq = c4iw_arm_cq,
++<<<<<<< HEAD
++=======
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, c4iw_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, c4iw_srq, ibsrq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, c4iw_ucontext, ibucontext),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
  void c4iw_register_device(struct work_struct *work)
diff --cc drivers/infiniband/hw/cxgb4/qp.c
index 9d103dbeebc3,9c8962d7bf97..000000000000
--- a/drivers/infiniband/hw/cxgb4/qp.c
+++ b/drivers/infiniband/hw/cxgb4/qp.c
@@@ -2717,17 -2715,12 +2718,11 @@@ int c4iw_create_srq(struct ib_srq *ib_s
  	rqsize = attrs->attr.max_wr + 1;
  	rqsize = roundup_pow_of_two(max_t(u16, rqsize, 16));
  
 -	ucontext = rdma_udata_to_drv_context(udata, struct c4iw_ucontext,
 -					     ibucontext);
 +	ucontext = pd->uobject ? to_c4iw_ucontext(pd->uobject->context) : NULL;
  
- 	srq = kzalloc(sizeof(*srq), GFP_KERNEL);
- 	if (!srq)
- 		return ERR_PTR(-ENOMEM);
- 
  	srq->wr_waitp = c4iw_alloc_wr_wait(GFP_KERNEL);
- 	if (!srq->wr_waitp) {
- 		ret = -ENOMEM;
- 		goto err_free_srq;
- 	}
+ 	if (!srq->wr_waitp)
+ 		return -ENOMEM;
  
  	srq->idx = c4iw_alloc_srq_idx(&rhp->rdev);
  	if (srq->idx < 0) {
@@@ -2822,12 -2817,10 +2818,14 @@@ err_free_srq_idx
  	c4iw_free_srq_idx(&rhp->rdev, srq->idx);
  err_free_wr_wait:
  	c4iw_put_wr_wait(srq->wr_waitp);
- err_free_srq:
- 	kfree(srq);
- 	return ERR_PTR(ret);
+ 	return ret;
  }
  
++<<<<<<< HEAD
 +int c4iw_destroy_srq(struct ib_srq *ibsrq)
++=======
+ void c4iw_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct c4iw_dev *rhp;
  	struct c4iw_srq *srq;
diff --cc drivers/infiniband/hw/hns/hns_roce_device.h
index 5996c474cbe8,88a5a9ac7350..000000000000
--- a/drivers/infiniband/hw/hns/hns_roce_device.h
+++ b/drivers/infiniband/hw/hns/hns_roce_device.h
@@@ -989,6 -1142,14 +989,17 @@@ int hns_roce_buf_alloc(struct hns_roce_
  int hns_roce_ib_umem_write_mtt(struct hns_roce_dev *hr_dev,
  			       struct hns_roce_mtt *mtt, struct ib_umem *umem);
  
++<<<<<<< HEAD
++=======
+ int hns_roce_create_srq(struct ib_srq *srq,
+ 			struct ib_srq_init_attr *srq_init_attr,
+ 			struct ib_udata *udata);
+ int hns_roce_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *srq_attr,
+ 			enum ib_srq_attr_mask srq_attr_mask,
+ 			struct ib_udata *udata);
+ void hns_roce_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata);
+ 
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  struct ib_qp *hns_roce_create_qp(struct ib_pd *ib_pd,
  				 struct ib_qp_init_attr *init_attr,
  				 struct ib_udata *udata);
diff --cc drivers/infiniband/hw/hns/hns_roce_main.c
index 171e4cf3e9d6,e85b31a72eea..000000000000
--- a/drivers/infiniband/hw/hns/hns_roce_main.c
+++ b/drivers/infiniband/hw/hns/hns_roce_main.c
@@@ -531,6 -478,23 +531,26 @@@ static const struct ib_device_ops hns_r
  	.rereg_user_mr = hns_roce_rereg_user_mr,
  };
  
++<<<<<<< HEAD
++=======
+ static const struct ib_device_ops hns_roce_dev_mw_ops = {
+ 	.alloc_mw = hns_roce_alloc_mw,
+ 	.dealloc_mw = hns_roce_dealloc_mw,
+ };
+ 
+ static const struct ib_device_ops hns_roce_dev_frmr_ops = {
+ 	.alloc_mr = hns_roce_alloc_mr,
+ 	.map_mr_sg = hns_roce_map_mr_sg,
+ };
+ 
+ static const struct ib_device_ops hns_roce_dev_srq_ops = {
+ 	.create_srq = hns_roce_create_srq,
+ 	.destroy_srq = hns_roce_destroy_srq,
+ 
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, hns_roce_srq, ibsrq),
+ };
+ 
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  static int hns_roce_register_device(struct hns_roce_dev *hr_dev)
  {
  	int ret;
diff --cc drivers/infiniband/hw/mlx4/main.c
index d66002a31000,25d09d53b51c..000000000000
--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@@ -2580,6 -2558,11 +2580,14 @@@ static const struct ib_device_ops mlx4_
  	.req_notify_cq = mlx4_ib_arm_cq,
  	.rereg_user_mr = mlx4_ib_rereg_user_mr,
  	.resize_cq = mlx4_ib_resize_cq,
++<<<<<<< HEAD
++=======
+ 
+ 	INIT_RDMA_OBJ_SIZE(ib_ah, mlx4_ib_ah, ibah),
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, mlx4_ib_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, mlx4_ib_srq, ibsrq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, mlx4_ib_ucontext, ibucontext),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
  static const struct ib_device_ops mlx4_ib_dev_wq_ops = {
diff --cc drivers/infiniband/hw/mlx4/mlx4_ib.h
index e491f3eda6e7,26897102057d..000000000000
--- a/drivers/infiniband/hw/mlx4/mlx4_ib.h
+++ b/drivers/infiniband/hw/mlx4/mlx4_ib.h
@@@ -753,22 -752,19 +753,25 @@@ int mlx4_ib_arm_cq(struct ib_cq *cq, en
  void __mlx4_ib_cq_clean(struct mlx4_ib_cq *cq, u32 qpn, struct mlx4_ib_srq *srq);
  void mlx4_ib_cq_clean(struct mlx4_ib_cq *cq, u32 qpn, struct mlx4_ib_srq *srq);
  
 -int mlx4_ib_create_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr, u32 flags,
 -		      struct ib_udata *udata);
 -int mlx4_ib_create_ah_slave(struct ib_ah *ah, struct rdma_ah_attr *ah_attr,
 -			    int slave_sgid_index, u8 *s_mac, u16 vlan_tag);
 +struct ib_ah *mlx4_ib_create_ah(struct ib_pd *pd, struct rdma_ah_attr *ah_attr,
 +				u32 flags, struct ib_udata *udata);
 +struct ib_ah *mlx4_ib_create_ah_slave(struct ib_pd *pd,
 +				      struct rdma_ah_attr *ah_attr,
 +				      int slave_sgid_index, u8 *s_mac,
 +				      u16 vlan_tag);
  int mlx4_ib_query_ah(struct ib_ah *ibah, struct rdma_ah_attr *ah_attr);
 -void mlx4_ib_destroy_ah(struct ib_ah *ah, u32 flags);
 +int mlx4_ib_destroy_ah(struct ib_ah *ah, u32 flags);
  
- struct ib_srq *mlx4_ib_create_srq(struct ib_pd *pd,
- 				  struct ib_srq_init_attr *init_attr,
- 				  struct ib_udata *udata);
+ int mlx4_ib_create_srq(struct ib_srq *srq, struct ib_srq_init_attr *init_attr,
+ 		       struct ib_udata *udata);
  int mlx4_ib_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
  		       enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
  int mlx4_ib_query_srq(struct ib_srq *srq, struct ib_srq_attr *srq_attr);
++<<<<<<< HEAD
 +int mlx4_ib_destroy_srq(struct ib_srq *srq);
++=======
+ void mlx4_ib_destroy_srq(struct ib_srq *srq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  void mlx4_ib_free_srq_wqe(struct mlx4_ib_srq *srq, int wqe_index);
  int mlx4_ib_post_srq_recv(struct ib_srq *ibsrq, const struct ib_recv_wr *wr,
  			  const struct ib_recv_wr **bad_wr);
diff --cc drivers/infiniband/hw/mlx4/srq.c
index 4456f1b8921d,4bf2946b9759..000000000000
--- a/drivers/infiniband/hw/mlx4/srq.c
+++ b/drivers/infiniband/hw/mlx4/srq.c
@@@ -68,12 -69,14 +68,19 @@@ static void mlx4_ib_srq_event(struct ml
  	}
  }
  
- struct ib_srq *mlx4_ib_create_srq(struct ib_pd *pd,
- 				  struct ib_srq_init_attr *init_attr,
- 				  struct ib_udata *udata)
+ int mlx4_ib_create_srq(struct ib_srq *ib_srq,
+ 		       struct ib_srq_init_attr *init_attr,
+ 		       struct ib_udata *udata)
  {
++<<<<<<< HEAD
 +	struct mlx4_ib_dev *dev = to_mdev(pd->device);
 +	struct mlx4_ib_srq *srq;
++=======
+ 	struct mlx4_ib_dev *dev = to_mdev(ib_srq->device);
+ 	struct mlx4_ib_ucontext *ucontext = rdma_udata_to_drv_context(
+ 		udata, struct mlx4_ib_ucontext, ibucontext);
+ 	struct mlx4_ib_srq *srq = to_msrq(ib_srq);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	struct mlx4_wqe_srq_next_seg *next;
  	struct mlx4_wqe_data_seg *scatter;
  	u32 cqn;
@@@ -108,17 -107,12 +111,21 @@@
  	if (udata) {
  		struct mlx4_ib_create_srq ucmd;
  
- 		if (ib_copy_from_udata(&ucmd, udata, sizeof ucmd)) {
- 			err = -EFAULT;
- 			goto err_srq;
- 		}
+ 		if (ib_copy_from_udata(&ucmd, udata, sizeof(ucmd)))
+ 			return -EFAULT;
  
++<<<<<<< HEAD
 +		srq->umem = ib_umem_get(pd->uobject->context, ucmd.buf_addr,
 +					buf_size, 0, 0);
 +		if (IS_ERR(srq->umem)) {
 +			err = PTR_ERR(srq->umem);
 +			goto err_srq;
 +		}
++=======
+ 		srq->umem = ib_umem_get(udata, ucmd.buf_addr, buf_size, 0, 0);
+ 		if (IS_ERR(srq->umem))
+ 			return PTR_ERR(srq->umem);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  
  		err = mlx4_mtt_init(dev->dev, ib_umem_page_count(srq->umem),
  				    srq->umem->page_shift, &srq->mtt);
@@@ -270,7 -260,7 +274,11 @@@ int mlx4_ib_query_srq(struct ib_srq *ib
  	return 0;
  }
  
++<<<<<<< HEAD
 +int mlx4_ib_destroy_srq(struct ib_srq *srq)
++=======
+ void mlx4_ib_destroy_srq(struct ib_srq *srq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct mlx4_ib_dev *dev = to_mdev(srq->device);
  	struct mlx4_ib_srq *msrq = to_msrq(srq);
diff --cc drivers/infiniband/hw/mlx5/main.c
index 2e9e8914ac78,06578e8a9787..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -4802,17 -4845,22 +4807,25 @@@ static int create_dev_resources(struct 
  
  	return 0;
  
+ error6:
+ 	kfree(devr->s1);
  error5:
++<<<<<<< HEAD
 +	mlx5_ib_destroy_srq(devr->s0);
++=======
+ 	mlx5_ib_destroy_srq(devr->s0, NULL);
+ err_create:
+ 	kfree(devr->s0);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  error4:
 -	mlx5_ib_dealloc_xrcd(devr->x1, NULL);
 +	mlx5_ib_dealloc_xrcd(devr->x1);
  error3:
 -	mlx5_ib_dealloc_xrcd(devr->x0, NULL);
 +	mlx5_ib_dealloc_xrcd(devr->x0);
  error2:
 -	mlx5_ib_destroy_cq(devr->c0, NULL);
 +	mlx5_ib_destroy_cq(devr->c0);
  error1:
 -	mlx5_ib_dealloc_pd(devr->p0, NULL);
 +	mlx5_ib_dealloc_pd(devr->p0);
  error0:
 -	kfree(devr->p0);
  	return ret;
  }
  
@@@ -4822,12 -4870,15 +4835,24 @@@ static void destroy_dev_resources(struc
  		container_of(devr, struct mlx5_ib_dev, devr);
  	int port;
  
++<<<<<<< HEAD
 +	mlx5_ib_destroy_srq(devr->s1);
 +	mlx5_ib_destroy_srq(devr->s0);
 +	mlx5_ib_dealloc_xrcd(devr->x0);
 +	mlx5_ib_dealloc_xrcd(devr->x1);
 +	mlx5_ib_destroy_cq(devr->c0);
 +	mlx5_ib_dealloc_pd(devr->p0);
++=======
+ 	mlx5_ib_destroy_srq(devr->s1, NULL);
+ 	kfree(devr->s1);
+ 	mlx5_ib_destroy_srq(devr->s0, NULL);
+ 	kfree(devr->s0);
+ 	mlx5_ib_dealloc_xrcd(devr->x0, NULL);
+ 	mlx5_ib_dealloc_xrcd(devr->x1, NULL);
+ 	mlx5_ib_destroy_cq(devr->c0, NULL);
+ 	mlx5_ib_dealloc_pd(devr->p0, NULL);
+ 	kfree(devr->p0);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  
  	/* Make sure no change P_Key work items are still executing */
  	for (port = 0; port < dev->num_ports; ++port)
@@@ -5948,6 -5997,11 +5973,14 @@@ static const struct ib_device_ops mlx5_
  	.req_notify_cq = mlx5_ib_arm_cq,
  	.rereg_user_mr = mlx5_ib_rereg_user_mr,
  	.resize_cq = mlx5_ib_resize_cq,
++<<<<<<< HEAD
++=======
+ 
+ 	INIT_RDMA_OBJ_SIZE(ib_ah, mlx5_ib_ah, ibah),
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, mlx5_ib_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, mlx5_ib_srq, ibsrq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, mlx5_ib_ucontext, ibucontext),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
  static const struct ib_device_ops mlx5_ib_dev_flow_ipsec_ops = {
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index 1b44b1ade284,3e8d54618c78..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -1051,17 -1054,16 +1051,27 @@@ void mlx5_ib_db_unmap_user(struct mlx5_
  void __mlx5_ib_cq_clean(struct mlx5_ib_cq *cq, u32 qpn, struct mlx5_ib_srq *srq);
  void mlx5_ib_cq_clean(struct mlx5_ib_cq *cq, u32 qpn, struct mlx5_ib_srq *srq);
  void mlx5_ib_free_srq_wqe(struct mlx5_ib_srq *srq, int wqe_index);
 -int mlx5_ib_create_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr, u32 flags,
 -		      struct ib_udata *udata);
 +struct ib_ah *mlx5_ib_create_ah(struct ib_pd *pd, struct rdma_ah_attr *ah_attr,
 +				u32 flags, struct ib_udata *udata);
  int mlx5_ib_query_ah(struct ib_ah *ibah, struct rdma_ah_attr *ah_attr);
++<<<<<<< HEAD
 +int mlx5_ib_destroy_ah(struct ib_ah *ah, u32 flags);
 +struct ib_srq *mlx5_ib_create_srq(struct ib_pd *pd,
 +				  struct ib_srq_init_attr *init_attr,
 +				  struct ib_udata *udata);
 +int mlx5_ib_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
 +		       enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
 +int mlx5_ib_query_srq(struct ib_srq *ibsrq, struct ib_srq_attr *srq_attr);
 +int mlx5_ib_destroy_srq(struct ib_srq *srq);
++=======
+ void mlx5_ib_destroy_ah(struct ib_ah *ah, u32 flags);
+ int mlx5_ib_create_srq(struct ib_srq *srq, struct ib_srq_init_attr *init_attr,
+ 		       struct ib_udata *udata);
+ int mlx5_ib_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
+ 		       enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
+ int mlx5_ib_query_srq(struct ib_srq *ibsrq, struct ib_srq_attr *srq_attr);
+ void mlx5_ib_destroy_srq(struct ib_srq *srq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  int mlx5_ib_post_srq_recv(struct ib_srq *ibsrq, const struct ib_recv_wr *wr,
  			  const struct ib_recv_wr **bad_wr);
  int mlx5_ib_enable_lb(struct mlx5_ib_dev *dev, bool td, bool qp);
diff --cc drivers/infiniband/hw/mlx5/srq.c
index 4e8d18009f58,4e7fde86c96b..000000000000
--- a/drivers/infiniband/hw/mlx5/srq.c
+++ b/drivers/infiniband/hw/mlx5/srq.c
@@@ -328,7 -326,7 +321,11 @@@ err_core
  
  err_usr_kern_srq:
  	if (udata)
++<<<<<<< HEAD
 +		destroy_srq_user(pd, srq);
++=======
+ 		destroy_srq_user(ib_srq->pd, srq, udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	else
  		destroy_srq_kernel(dev, srq);
  
@@@ -388,7 -383,7 +382,11 @@@ out_box
  	return ret;
  }
  
++<<<<<<< HEAD
 +int mlx5_ib_destroy_srq(struct ib_srq *srq)
++=======
+ void mlx5_ib_destroy_srq(struct ib_srq *srq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct mlx5_ib_dev *dev = to_mdev(srq->device);
  	struct mlx5_ib_srq *msrq = to_msrq(srq);
diff --cc drivers/infiniband/hw/mthca/mthca_provider.c
index ae6b236e4756,4f40dfedf920..000000000000
--- a/drivers/infiniband/hw/mthca/mthca_provider.c
+++ b/drivers/infiniband/hw/mthca/mthca_provider.c
@@@ -399,72 -380,47 +399,79 @@@ static struct ib_pd *mthca_alloc_pd(str
  		}
  	}
  
 -	return 0;
 +	return &pd->ibpd;
  }
  
 -static void mthca_dealloc_pd(struct ib_pd *pd, struct ib_udata *udata)
 +static int mthca_dealloc_pd(struct ib_pd *pd)
  {
  	mthca_pd_free(to_mdev(pd->device), to_mpd(pd));
 +	kfree(pd);
 +
 +	return 0;
  }
  
 -static int mthca_ah_create(struct ib_ah *ibah, struct rdma_ah_attr *ah_attr,
 -			   u32 flags, struct ib_udata *udata)
 +static struct ib_ah *mthca_ah_create(struct ib_pd *pd,
 +				     struct rdma_ah_attr *ah_attr,
 +				     u32 flags,
 +				     struct ib_udata *udata)
  
  {
 -	struct mthca_ah *ah = to_mah(ibah);
 +	int err;
 +	struct mthca_ah *ah;
 +
 +	ah = kmalloc(sizeof *ah, GFP_ATOMIC);
 +	if (!ah)
 +		return ERR_PTR(-ENOMEM);
 +
 +	err = mthca_create_ah(to_mdev(pd->device), to_mpd(pd), ah_attr, ah);
 +	if (err) {
 +		kfree(ah);
 +		return ERR_PTR(err);
 +	}
  
 -	return mthca_create_ah(to_mdev(ibah->device), to_mpd(ibah->pd), ah_attr,
 -			       ah);
 +	return &ah->ibah;
  }
  
 -static void mthca_ah_destroy(struct ib_ah *ah, u32 flags)
 +static int mthca_ah_destroy(struct ib_ah *ah, u32 flags)
  {
  	mthca_destroy_ah(to_mdev(ah->device), to_mah(ah));
 +	kfree(ah);
 +
 +	return 0;
  }
  
- static struct ib_srq *mthca_create_srq(struct ib_pd *pd,
- 				       struct ib_srq_init_attr *init_attr,
- 				       struct ib_udata *udata)
+ static int mthca_create_srq(struct ib_srq *ibsrq,
+ 			    struct ib_srq_init_attr *init_attr,
+ 			    struct ib_udata *udata)
  {
  	struct mthca_create_srq ucmd;
++<<<<<<< HEAD
 +	struct mthca_ucontext *context = NULL;
 +	struct mthca_srq *srq;
++=======
+ 	struct mthca_ucontext *context = rdma_udata_to_drv_context(
+ 		udata, struct mthca_ucontext, ibucontext);
+ 	struct mthca_srq *srq = to_msrq(ibsrq);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	int err;
  
  	if (init_attr->srq_type != IB_SRQT_BASIC)
- 		return ERR_PTR(-EOPNOTSUPP);
- 
- 	srq = kmalloc(sizeof *srq, GFP_KERNEL);
- 	if (!srq)
- 		return ERR_PTR(-ENOMEM);
+ 		return -EOPNOTSUPP;
  
  	if (udata) {
++<<<<<<< HEAD
 +		context = to_mucontext(pd->uobject->context);
 +
 +		if (ib_copy_from_udata(&ucmd, udata, sizeof ucmd)) {
 +			err = -EFAULT;
 +			goto err_free;
 +		}
++=======
+ 		if (ib_copy_from_udata(&ucmd, udata, sizeof(ucmd)))
+ 			return -EFAULT;
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  
- 		err = mthca_map_user_db(to_mdev(pd->device), &context->uar,
+ 		err = mthca_map_user_db(to_mdev(ibsrq->device), &context->uar,
  					context->db_tab, ucmd.db_index,
  					ucmd.db_page);
  
@@@ -483,28 -439,24 +490,26 @@@
  				    context->db_tab, ucmd.db_index);
  
  	if (err)
- 		goto err_free;
+ 		return err;
  
- 	if (context && ib_copy_to_udata(udata, &srq->srqn, sizeof (__u32))) {
- 		mthca_free_srq(to_mdev(pd->device), srq);
- 		err = -EFAULT;
- 		goto err_free;
+ 	if (context && ib_copy_to_udata(udata, &srq->srqn, sizeof(__u32))) {
+ 		mthca_free_srq(to_mdev(ibsrq->device), srq);
+ 		return -EFAULT;
  	}
  
- 	return &srq->ibsrq;
- 
- err_free:
- 	kfree(srq);
- 
- 	return ERR_PTR(err);
+ 	return 0;
  }
  
++<<<<<<< HEAD
 +static int mthca_destroy_srq(struct ib_srq *srq)
++=======
+ static void mthca_destroy_srq(struct ib_srq *srq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
 -	if (udata) {
 -		struct mthca_ucontext *context =
 -			rdma_udata_to_drv_context(
 -				udata,
 -				struct mthca_ucontext,
 -				ibucontext);
 +	struct mthca_ucontext *context;
 +
 +	if (srq->uobject) {
 +		context = to_mucontext(srq->uobject->context);
  
  		mthca_unmap_user_db(to_mdev(srq->device), &context->uar,
  				    context->db_tab, to_msrq(srq)->db_index);
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
index 27249892f0d1,ffdd3ac55086..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
@@@ -1909,9 -1893,8 +1905,12 @@@ int ocrdma_query_srq(struct ib_srq *ibs
  	return status;
  }
  
++<<<<<<< HEAD
 +int ocrdma_destroy_srq(struct ib_srq *ibsrq)
++=======
+ void ocrdma_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
- 	int status;
  	struct ocrdma_srq *srq;
  	struct ocrdma_dev *dev = get_ocrdma_dev(ibsrq->device);
  
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
index b69cfdce7970,c6489a1439dc..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
@@@ -91,15 -88,15 +91,19 @@@ int ocrdma_modify_qp(struct ib_qp *, st
  int ocrdma_query_qp(struct ib_qp *,
  		    struct ib_qp_attr *qp_attr,
  		    int qp_attr_mask, struct ib_qp_init_attr *);
 -int ocrdma_destroy_qp(struct ib_qp *ibqp, struct ib_udata *udata);
 +int ocrdma_destroy_qp(struct ib_qp *);
  void ocrdma_del_flush_qp(struct ocrdma_qp *qp);
  
- struct ib_srq *ocrdma_create_srq(struct ib_pd *, struct ib_srq_init_attr *,
- 				 struct ib_udata *);
+ int ocrdma_create_srq(struct ib_srq *srq, struct ib_srq_init_attr *attr,
+ 		      struct ib_udata *udata);
  int ocrdma_modify_srq(struct ib_srq *, struct ib_srq_attr *,
  		      enum ib_srq_attr_mask, struct ib_udata *);
  int ocrdma_query_srq(struct ib_srq *, struct ib_srq_attr *);
++<<<<<<< HEAD
 +int ocrdma_destroy_srq(struct ib_srq *);
++=======
+ void ocrdma_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  int ocrdma_post_srq_recv(struct ib_srq *, const struct ib_recv_wr *,
  			 const struct ib_recv_wr **bad_recv_wr);
  
diff --cc drivers/infiniband/hw/qedr/main.c
index 9a4c7c6c1010,cbcdc5c669c6..000000000000
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@@ -238,6 -238,11 +238,14 @@@ static const struct ib_device_ops qedr_
  	.reg_user_mr = qedr_reg_user_mr,
  	.req_notify_cq = qedr_arm_cq,
  	.resize_cq = qedr_resize_cq,
++<<<<<<< HEAD
++=======
+ 
+ 	INIT_RDMA_OBJ_SIZE(ib_ah, qedr_ah, ibah),
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, qedr_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, qedr_srq, ibsrq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, qedr_ucontext, ibucontext),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
  static int qedr_register_device(struct qedr_dev *dev)
diff --cc drivers/infiniband/hw/qedr/verbs.c
index f963722e9c6c,5e92b6229da2..000000000000
--- a/drivers/infiniband/hw/qedr/verbs.c
+++ b/drivers/infiniband/hw/qedr/verbs.c
@@@ -1511,12 -1478,10 +1506,14 @@@ err1
  	else
  		qedr_free_srq_kernel_params(srq);
  err0:
- 	kfree(srq);
- 
- 	return ERR_PTR(-EFAULT);
+ 	return -EFAULT;
  }
  
++<<<<<<< HEAD
 +int qedr_destroy_srq(struct ib_srq *ibsrq)
++=======
+ void qedr_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct qed_rdma_destroy_srq_in_params in_params = {};
  	struct qedr_dev *dev = get_qedr_dev(ibsrq->device);
diff --cc drivers/infiniband/hw/qedr/verbs.h
index 0e5fb4e82418,9328c80375ef..000000000000
--- a/drivers/infiniband/hw/qedr/verbs.h
+++ b/drivers/infiniband/hw/qedr/verbs.h
@@@ -64,21 -62,21 +64,32 @@@ int qedr_modify_qp(struct ib_qp *, stru
  		   int attr_mask, struct ib_udata *udata);
  int qedr_query_qp(struct ib_qp *, struct ib_qp_attr *qp_attr,
  		  int qp_attr_mask, struct ib_qp_init_attr *);
++<<<<<<< HEAD
 +int qedr_destroy_qp(struct ib_qp *ibqp);
 +struct ib_srq *qedr_create_srq(struct ib_pd *ibpd,
 +			       struct ib_srq_init_attr *attr,
 +			       struct ib_udata *udata);
 +int qedr_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
 +		    enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
 +int qedr_query_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr);
 +int qedr_destroy_srq(struct ib_srq *ibsrq);
++=======
+ int qedr_destroy_qp(struct ib_qp *ibqp, struct ib_udata *udata);
+ 
+ int qedr_create_srq(struct ib_srq *ibsrq, struct ib_srq_init_attr *attr,
+ 		    struct ib_udata *udata);
+ int qedr_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
+ 		    enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
+ int qedr_query_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr);
+ void qedr_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  int qedr_post_srq_recv(struct ib_srq *ibsrq, const struct ib_recv_wr *wr,
  		       const struct ib_recv_wr **bad_recv_wr);
 -int qedr_create_ah(struct ib_ah *ibah, struct rdma_ah_attr *attr, u32 flags,
 -		   struct ib_udata *udata);
 -void qedr_destroy_ah(struct ib_ah *ibah, u32 flags);
 +struct ib_ah *qedr_create_ah(struct ib_pd *ibpd, struct rdma_ah_attr *attr,
 +			     u32 flags, struct ib_udata *udata);
 +int qedr_destroy_ah(struct ib_ah *ibah, u32 flags);
  
 -int qedr_dereg_mr(struct ib_mr *ib_mr, struct ib_udata *udata);
 +int qedr_dereg_mr(struct ib_mr *);
  struct ib_mr *qedr_get_dma_mr(struct ib_pd *, int acc);
  
  struct ib_mr *qedr_reg_user_mr(struct ib_pd *, u64 start, u64 length,
diff --cc drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
index 06ba7c7a2235,6cac0c88cf39..000000000000
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
@@@ -206,11 -197,11 +199,16 @@@ int pvrdma_create_srq(struct ib_srq *ib
  	/* Copy udata back. */
  	if (ib_copy_to_udata(udata, &srq_resp, sizeof(srq_resp))) {
  		dev_warn(&dev->pdev->dev, "failed to copy back udata\n");
++<<<<<<< HEAD
 +		pvrdma_destroy_srq(&srq->ibsrq);
 +		return ERR_PTR(-EINVAL);
++=======
+ 		pvrdma_destroy_srq(&srq->ibsrq, udata);
+ 		return -EINVAL;
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	}
  
- 	return &srq->ibsrq;
+ 	return 0;
  
  err_page_dir:
  	pvrdma_page_dir_cleanup(dev, &srq->pdir);
@@@ -251,7 -241,8 +248,11 @@@ static void pvrdma_free_srq(struct pvrd
   *
   * @return: 0 for success.
   */
++<<<<<<< HEAD
 +int pvrdma_destroy_srq(struct ib_srq *srq)
++=======
+ void pvrdma_destroy_srq(struct ib_srq *srq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct pvrdma_srq *vsrq = to_vsrq(srq);
  	union pvrdma_cmd_req req;
diff --cc drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
index f7f758d60110,9d7b021e1c59..000000000000
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
@@@ -414,22 -411,20 +414,25 @@@ int pvrdma_map_mr_sg(struct ib_mr *ibmr
  		     int sg_nents, unsigned int *sg_offset);
  struct ib_cq *pvrdma_create_cq(struct ib_device *ibdev,
  			       const struct ib_cq_init_attr *attr,
 +			       struct ib_ucontext *context,
  			       struct ib_udata *udata);
 -int pvrdma_destroy_cq(struct ib_cq *cq, struct ib_udata *udata);
 +int pvrdma_destroy_cq(struct ib_cq *cq);
  int pvrdma_poll_cq(struct ib_cq *ibcq, int num_entries, struct ib_wc *wc);
  int pvrdma_req_notify_cq(struct ib_cq *cq, enum ib_cq_notify_flags flags);
 -int pvrdma_create_ah(struct ib_ah *ah, struct rdma_ah_attr *ah_attr, u32 flags,
 -		     struct ib_udata *udata);
 -void pvrdma_destroy_ah(struct ib_ah *ah, u32 flags);
 +struct ib_ah *pvrdma_create_ah(struct ib_pd *pd, struct rdma_ah_attr *ah_attr,
 +			       u32 flags, struct ib_udata *udata);
 +int pvrdma_destroy_ah(struct ib_ah *ah, u32 flags);
  
- struct ib_srq *pvrdma_create_srq(struct ib_pd *pd,
- 				 struct ib_srq_init_attr *init_attr,
- 				 struct ib_udata *udata);
+ int pvrdma_create_srq(struct ib_srq *srq, struct ib_srq_init_attr *init_attr,
+ 		      struct ib_udata *udata);
  int pvrdma_modify_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr,
  		      enum ib_srq_attr_mask attr_mask, struct ib_udata *udata);
  int pvrdma_query_srq(struct ib_srq *srq, struct ib_srq_attr *srq_attr);
++<<<<<<< HEAD
 +int pvrdma_destroy_srq(struct ib_srq *srq);
++=======
+ void pvrdma_destroy_srq(struct ib_srq *srq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  
  struct ib_qp *pvrdma_create_qp(struct ib_pd *pd,
  			       struct ib_qp_init_attr *init_attr,
diff --cc drivers/infiniband/sw/rdmavt/srq.c
index 78e06fc456c5,8d6b3e764255..000000000000
--- a/drivers/infiniband/sw/rdmavt/srq.c
+++ b/drivers/infiniband/sw/rdmavt/srq.c
@@@ -115,14 -111,11 +110,13 @@@ int rvt_create_srq(struct ib_srq *ibsrq
  	 * See rvt_mmap() for details.
  	 */
  	if (udata && udata->outlen >= sizeof(__u64)) {
- 		int err;
  		u32 s = sizeof(struct rvt_rwq) + srq->rq.size * sz;
  
 -		srq->ip = rvt_create_mmap_info(dev, s, udata, srq->rq.wq);
 +		srq->ip =
 +		    rvt_create_mmap_info(dev, s, ibpd->uobject->context,
 +					 srq->rq.wq);
  		if (!srq->ip) {
- 			ret = ERR_PTR(-ENOMEM);
+ 			ret = -ENOMEM;
  			goto bail_wq;
  		}
  
@@@ -335,9 -325,8 +326,12 @@@ int rvt_query_srq(struct ib_srq *ibsrq
   * rvt_destroy_srq - destory an srq
   * @ibsrq: srq object to destroy
   *
-  * Return always 0
   */
++<<<<<<< HEAD
 +int rvt_destroy_srq(struct ib_srq *ibsrq)
++=======
+ void rvt_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct rvt_srq *srq = ibsrq_to_rvtsrq(ibsrq);
  	struct rvt_dev_info *dev = ib_to_rvt(ibsrq->device);
diff --cc drivers/infiniband/sw/rdmavt/srq.h
index bf0eaaf56465,6427d7d62a9a..000000000000
--- a/drivers/infiniband/sw/rdmavt/srq.h
+++ b/drivers/infiniband/sw/rdmavt/srq.h
@@@ -57,6 -56,6 +56,10 @@@ int rvt_modify_srq(struct ib_srq *ibsrq
  		   enum ib_srq_attr_mask attr_mask,
  		   struct ib_udata *udata);
  int rvt_query_srq(struct ib_srq *ibsrq, struct ib_srq_attr *attr);
++<<<<<<< HEAD
 +int rvt_destroy_srq(struct ib_srq *ibsrq);
++=======
+ void rvt_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  
  #endif          /* DEF_RVTSRQ_H */
diff --cc drivers/infiniband/sw/rdmavt/vt.c
index b3f0c5578925,9546a837a8ac..000000000000
--- a/drivers/infiniband/sw/rdmavt/vt.c
+++ b/drivers/infiniband/sw/rdmavt/vt.c
@@@ -436,6 -425,11 +436,14 @@@ static const struct ib_device_ops rvt_d
  	.req_notify_cq = rvt_req_notify_cq,
  	.resize_cq = rvt_resize_cq,
  	.unmap_fmr = rvt_unmap_fmr,
++<<<<<<< HEAD
++=======
+ 
+ 	INIT_RDMA_OBJ_SIZE(ib_ah, rvt_ah, ibah),
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, rvt_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, rvt_srq, ibsrq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, rvt_ucontext, ibucontext),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
  static noinline int check_support(struct rvt_dev_info *rdi, int verb)
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.c
index f3188f269481,8c3e2a18cfe4..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@@ -303,15 -289,13 +303,20 @@@ err1
  	return err;
  }
  
- static struct ib_srq *rxe_create_srq(struct ib_pd *ibpd,
- 				     struct ib_srq_init_attr *init,
- 				     struct ib_udata *udata)
+ static int rxe_create_srq(struct ib_srq *ibsrq, struct ib_srq_init_attr *init,
+ 			  struct ib_udata *udata)
  {
  	int err;
++<<<<<<< HEAD
 +	struct rxe_dev *rxe = to_rdev(ibpd->device);
 +	struct rxe_pd *pd = to_rpd(ibpd);
 +	struct rxe_srq *srq;
 +	struct ib_ucontext *context = udata ? ibpd->uobject->context : NULL;
++=======
+ 	struct rxe_dev *rxe = to_rdev(ibsrq->device);
+ 	struct rxe_pd *pd = to_rpd(ibsrq->pd);
+ 	struct rxe_srq *srq = to_rsrq(ibsrq);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	struct rxe_create_srq_resp __user *uresp = NULL;
  
  	if (udata) {
@@@ -393,7 -373,7 +394,11 @@@ static int rxe_query_srq(struct ib_srq 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int rxe_destroy_srq(struct ib_srq *ibsrq)
++=======
+ static void rxe_destroy_srq(struct ib_srq *ibsrq, struct ib_udata *udata)
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  {
  	struct rxe_srq *srq = to_rsrq(ibsrq);
  
@@@ -1169,9 -1155,14 +1171,17 @@@ static const struct ib_device_ops rxe_d
  	.reg_user_mr = rxe_reg_user_mr,
  	.req_notify_cq = rxe_req_notify_cq,
  	.resize_cq = rxe_resize_cq,
++<<<<<<< HEAD
++=======
+ 
+ 	INIT_RDMA_OBJ_SIZE(ib_ah, rxe_ah, ibah),
+ 	INIT_RDMA_OBJ_SIZE(ib_pd, rxe_pd, ibpd),
+ 	INIT_RDMA_OBJ_SIZE(ib_srq, rxe_srq, ibsrq),
+ 	INIT_RDMA_OBJ_SIZE(ib_ucontext, rxe_ucontext, ibuc),
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
 -int rxe_register_device(struct rxe_dev *rxe, const char *ibdev_name)
 +int rxe_register_device(struct rxe_dev *rxe)
  {
  	int err;
  	struct ib_device *dev = &rxe->ib_dev;
diff --cc include/rdma/ib_verbs.h
index a09e0c8b12a7,43a75ab8ea8a..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -2385,29 -2394,26 +2385,40 @@@ struct ib_device_ops 
  	int (*del_gid)(const struct ib_gid_attr *attr, void **context);
  	int (*query_pkey)(struct ib_device *device, u8 port_num, u16 index,
  			  u16 *pkey);
 -	int (*alloc_ucontext)(struct ib_ucontext *context,
 -			      struct ib_udata *udata);
 -	void (*dealloc_ucontext)(struct ib_ucontext *context);
 +	struct ib_ucontext *(*alloc_ucontext)(struct ib_device *device,
 +					      struct ib_udata *udata);
 +	int (*dealloc_ucontext)(struct ib_ucontext *context);
  	int (*mmap)(struct ib_ucontext *context, struct vm_area_struct *vma);
  	void (*disassociate_ucontext)(struct ib_ucontext *ibcontext);
 -	int (*alloc_pd)(struct ib_pd *pd, struct ib_udata *udata);
 -	void (*dealloc_pd)(struct ib_pd *pd, struct ib_udata *udata);
 -	int (*create_ah)(struct ib_ah *ah, struct rdma_ah_attr *ah_attr,
 -			 u32 flags, struct ib_udata *udata);
 +	struct ib_pd *(*alloc_pd)(struct ib_device *device,
 +				  struct ib_ucontext *context,
 +				  struct ib_udata *udata);
 +	int (*dealloc_pd)(struct ib_pd *pd);
 +	struct ib_ah *(*create_ah)(struct ib_pd *pd,
 +				   struct rdma_ah_attr *ah_attr, u32 flags,
 +				   struct ib_udata *udata);
  	int (*modify_ah)(struct ib_ah *ah, struct rdma_ah_attr *ah_attr);
  	int (*query_ah)(struct ib_ah *ah, struct rdma_ah_attr *ah_attr);
++<<<<<<< HEAD
 +	int (*destroy_ah)(struct ib_ah *ah, u32 flags);
 +	struct ib_srq *(*create_srq)(struct ib_pd *pd,
 +				     struct ib_srq_init_attr *srq_init_attr,
 +				     struct ib_udata *udata);
++=======
+ 	void (*destroy_ah)(struct ib_ah *ah, u32 flags);
+ 	int (*create_srq)(struct ib_srq *srq,
+ 			  struct ib_srq_init_attr *srq_init_attr,
+ 			  struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	int (*modify_srq)(struct ib_srq *srq, struct ib_srq_attr *srq_attr,
  			  enum ib_srq_attr_mask srq_attr_mask,
  			  struct ib_udata *udata);
  	int (*query_srq)(struct ib_srq *srq, struct ib_srq_attr *srq_attr);
++<<<<<<< HEAD
 +	int (*destroy_srq)(struct ib_srq *srq);
++=======
+ 	void (*destroy_srq)(struct ib_srq *srq, struct ib_udata *udata);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  	struct ib_qp *(*create_qp)(struct ib_pd *pd,
  				   struct ib_qp_init_attr *qp_init_attr,
  				   struct ib_udata *udata);
@@@ -2530,8 -2534,41 +2541,32 @@@
  	 */
  	int (*init_port)(struct ib_device *device, u8 port_num,
  			 struct kobject *port_sysfs);
++<<<<<<< HEAD
++=======
+ 	/**
+ 	 * Allows rdma drivers to add their own restrack attributes.
+ 	 */
+ 	int (*fill_res_entry)(struct sk_buff *msg,
+ 			      struct rdma_restrack_entry *entry);
+ 
+ 	/* Device lifecycle callbacks */
+ 	/*
+ 	 * Called after the device becomes registered, before clients are
+ 	 * attached
+ 	 */
+ 	int (*enable_driver)(struct ib_device *dev);
+ 	/*
+ 	 * This is called as part of ib_dealloc_device().
+ 	 */
+ 	void (*dealloc_driver)(struct ib_device *dev);
+ 
+ 	DECLARE_RDMA_OBJ_SIZE(ib_ah);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_pd);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_srq);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_ucontext);
++>>>>>>> 68e326dea1db (RDMA: Handle SRQ allocations by IB/core)
  };
  
 -struct ib_core_device {
 -	/* device must be the first element in structure until,
 -	 * union of ib_core_device and device exists in ib_device.
 -	 */
 -	struct device dev;
 -	possible_net_t rdma_net;
 -	struct kobject *ports_kobj;
 -	struct list_head port_list;
 -	struct ib_device *owner; /* reach back to owner ib_device */
 -};
 -
 -struct rdma_restrack_root;
  struct ib_device {
  	/* Do not access @dma_device directly from ULP nor from HW drivers. */
  	struct device                *dma_device;
* Unmerged path drivers/infiniband/hw/hns/hns_roce_srq.c
* Unmerged path drivers/infiniband/core/device.c
diff --git a/drivers/infiniband/core/uverbs_cmd.c b/drivers/infiniband/core/uverbs_cmd.c
index 4aa2231ad8ef..59d1e6261a4e 100644
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -3401,9 +3401,9 @@ static int __uverbs_create_xsrq(struct uverbs_attr_bundle *attrs,
 	obj->uevent.events_reported = 0;
 	INIT_LIST_HEAD(&obj->uevent.event_list);
 
-	srq = pd->device->ops.create_srq(pd, &attr, udata);
-	if (IS_ERR(srq)) {
-		ret = PTR_ERR(srq);
+	srq = rdma_zalloc_drv_obj(ib_dev, ib_srq);
+	if (!srq) {
+		ret = -ENOMEM;
 		goto err_put;
 	}
 
@@ -3414,6 +3414,10 @@ static int __uverbs_create_xsrq(struct uverbs_attr_bundle *attrs,
 	srq->event_handler = attr.event_handler;
 	srq->srq_context   = attr.srq_context;
 
+	ret = pd->device->ops.create_srq(srq, &attr, udata);
+	if (ret)
+		goto err_free;
+
 	if (ib_srq_has_cq(cmd->srq_type)) {
 		srq->ext.cq       = attr.ext.cq;
 		atomic_inc(&attr.ext.cq->usecnt);
@@ -3453,6 +3457,8 @@ static int __uverbs_create_xsrq(struct uverbs_attr_bundle *attrs,
 err_copy:
 	ib_destroy_srq(srq);
 
+err_free:
+	kfree(srq);
 err_put:
 	uobj_put_obj_read(pd);
 
* Unmerged path drivers/infiniband/core/verbs.c
* Unmerged path drivers/infiniband/hw/bnxt_re/ib_verbs.c
* Unmerged path drivers/infiniband/hw/bnxt_re/ib_verbs.h
* Unmerged path drivers/infiniband/hw/bnxt_re/main.c
diff --git a/drivers/infiniband/hw/bnxt_re/qplib_fp.c b/drivers/infiniband/hw/bnxt_re/qplib_fp.c
index 77eb3d556006..61657a4a9887 100644
--- a/drivers/infiniband/hw/bnxt_re/qplib_fp.c
+++ b/drivers/infiniband/hw/bnxt_re/qplib_fp.c
@@ -507,7 +507,7 @@ static void bnxt_qplib_arm_srq(struct bnxt_qplib_srq *srq, u32 arm_type)
 	writeq(val, db);
 }
 
-int bnxt_qplib_destroy_srq(struct bnxt_qplib_res *res,
+void bnxt_qplib_destroy_srq(struct bnxt_qplib_res *res,
 			   struct bnxt_qplib_srq *srq)
 {
 	struct bnxt_qplib_rcfw *rcfw = res->rcfw;
@@ -521,14 +521,12 @@ int bnxt_qplib_destroy_srq(struct bnxt_qplib_res *res,
 	/* Configure the request */
 	req.srq_cid = cpu_to_le32(srq->id);
 
-	rc = bnxt_qplib_rcfw_send_message(rcfw, (void *)&req,
-					  (void *)&resp, NULL, 0);
+	rc = bnxt_qplib_rcfw_send_message(rcfw, (struct cmdq_base *)&req,
+					  (struct creq_base *)&resp, NULL, 0);
+	kfree(srq->swq);
 	if (rc)
-		return rc;
-
+		return;
 	bnxt_qplib_free_hwq(res->pdev, &srq->hwq);
-	kfree(srq->swq);
-	return 0;
 }
 
 int bnxt_qplib_create_srq(struct bnxt_qplib_res *res,
diff --git a/drivers/infiniband/hw/bnxt_re/qplib_fp.h b/drivers/infiniband/hw/bnxt_re/qplib_fp.h
index 3f618b5f1f06..4f378b0e54d2 100644
--- a/drivers/infiniband/hw/bnxt_re/qplib_fp.h
+++ b/drivers/infiniband/hw/bnxt_re/qplib_fp.h
@@ -521,8 +521,8 @@ int bnxt_qplib_modify_srq(struct bnxt_qplib_res *res,
 			  struct bnxt_qplib_srq *srq);
 int bnxt_qplib_query_srq(struct bnxt_qplib_res *res,
 			 struct bnxt_qplib_srq *srq);
-int bnxt_qplib_destroy_srq(struct bnxt_qplib_res *res,
-			   struct bnxt_qplib_srq *srq);
+void bnxt_qplib_destroy_srq(struct bnxt_qplib_res *res,
+			    struct bnxt_qplib_srq *srq);
 int bnxt_qplib_post_srq_recv(struct bnxt_qplib_srq *srq,
 			     struct bnxt_qplib_swqe *wqe);
 int bnxt_qplib_create_qp1(struct bnxt_qplib_res *res, struct bnxt_qplib_qp *qp);
* Unmerged path drivers/infiniband/hw/cxgb4/iw_cxgb4.h
* Unmerged path drivers/infiniband/hw/cxgb4/provider.c
* Unmerged path drivers/infiniband/hw/cxgb4/qp.c
* Unmerged path drivers/infiniband/hw/hns/hns_roce_device.h
* Unmerged path drivers/infiniband/hw/hns/hns_roce_main.c
* Unmerged path drivers/infiniband/hw/hns/hns_roce_srq.c
* Unmerged path drivers/infiniband/hw/mlx4/main.c
* Unmerged path drivers/infiniband/hw/mlx4/mlx4_ib.h
* Unmerged path drivers/infiniband/hw/mlx4/srq.c
* Unmerged path drivers/infiniband/hw/mlx5/main.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/infiniband/hw/mlx5/srq.c
diff --git a/drivers/infiniband/hw/mlx5/srq.h b/drivers/infiniband/hw/mlx5/srq.h
index c330af35ff10..e509d0caeb56 100644
--- a/drivers/infiniband/hw/mlx5/srq.h
+++ b/drivers/infiniband/hw/mlx5/srq.h
@@ -59,7 +59,7 @@ struct mlx5_srq_table {
 
 int mlx5_cmd_create_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
 			struct mlx5_srq_attr *in);
-int mlx5_cmd_destroy_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq);
+void mlx5_cmd_destroy_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq);
 int mlx5_cmd_query_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
 		       struct mlx5_srq_attr *out);
 int mlx5_cmd_arm_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
diff --git a/drivers/infiniband/hw/mlx5/srq_cmd.c b/drivers/infiniband/hw/mlx5/srq_cmd.c
index 63ac38bb3498..dd1bd8382e37 100644
--- a/drivers/infiniband/hw/mlx5/srq_cmd.c
+++ b/drivers/infiniband/hw/mlx5/srq_cmd.c
@@ -611,7 +611,7 @@ int mlx5_cmd_create_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
 	return err;
 }
 
-int mlx5_cmd_destroy_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq)
+void mlx5_cmd_destroy_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq)
 {
 	struct mlx5_srq_table *table = &dev->srq_table;
 	struct mlx5_core_srq *tmp;
@@ -621,16 +621,14 @@ int mlx5_cmd_destroy_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq)
 	tmp = radix_tree_delete(&table->tree, srq->srqn);
 	spin_unlock_irq(&table->lock);
 	if (!tmp || tmp != srq)
-		return -EINVAL;
+		return;
 
 	err = destroy_srq_split(dev, srq);
 	if (err)
-		return err;
+		return;
 
 	mlx5_core_res_put(&srq->common);
 	wait_for_completion(&srq->common.free);
-
-	return 0;
 }
 
 int mlx5_cmd_query_srq(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
* Unmerged path drivers/infiniband/hw/mthca/mthca_provider.c
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_hw.c b/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
index 7363d6e7071d..9f0cca75b532 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
@@ -2862,21 +2862,19 @@ int ocrdma_mbx_query_srq(struct ocrdma_srq *srq, struct ib_srq_attr *srq_attr)
 	return status;
 }
 
-int ocrdma_mbx_destroy_srq(struct ocrdma_dev *dev, struct ocrdma_srq *srq)
+void ocrdma_mbx_destroy_srq(struct ocrdma_dev *dev, struct ocrdma_srq *srq)
 {
-	int status = -ENOMEM;
 	struct ocrdma_destroy_srq *cmd;
 	struct pci_dev *pdev = dev->nic_info.pdev;
 	cmd = ocrdma_init_emb_mqe(OCRDMA_CMD_DELETE_SRQ, sizeof(*cmd));
 	if (!cmd)
-		return status;
+		return;
 	cmd->id = srq->id;
-	status = ocrdma_mbx_cmd(dev, (struct ocrdma_mqe *)cmd);
+	ocrdma_mbx_cmd(dev, (struct ocrdma_mqe *)cmd);
 	if (srq->rq.va)
 		dma_free_coherent(&pdev->dev, srq->rq.len,
 				  srq->rq.va, srq->rq.pa);
 	kfree(cmd);
-	return status;
 }
 
 static int ocrdma_mbx_get_dcbx_config(struct ocrdma_dev *dev, u32 ptype,
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_hw.h b/drivers/infiniband/hw/ocrdma/ocrdma_hw.h
index ebc1f442aec3..2445b7fba45a 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_hw.h
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_hw.h
@@ -137,7 +137,7 @@ int ocrdma_mbx_create_srq(struct ocrdma_dev *, struct ocrdma_srq *,
 			  struct ocrdma_pd *);
 int ocrdma_mbx_modify_srq(struct ocrdma_srq *, struct ib_srq_attr *);
 int ocrdma_mbx_query_srq(struct ocrdma_srq *, struct ib_srq_attr *);
-int ocrdma_mbx_destroy_srq(struct ocrdma_dev *, struct ocrdma_srq *);
+void ocrdma_mbx_destroy_srq(struct ocrdma_dev *dev, struct ocrdma_srq *srq);
 
 int ocrdma_alloc_av(struct ocrdma_dev *, struct ocrdma_ah *);
 int ocrdma_free_av(struct ocrdma_dev *, struct ocrdma_ah *);
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_main.c b/drivers/infiniband/hw/ocrdma/ocrdma_main.c
index 88970a6bb555..b4fe762f1545 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_main.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_main.c
@@ -187,6 +187,8 @@ static const struct ib_device_ops ocrdma_dev_srq_ops = {
 	.modify_srq = ocrdma_modify_srq,
 	.post_srq_recv = ocrdma_post_srq_recv,
 	.query_srq = ocrdma_query_srq,
+
+	INIT_RDMA_OBJ_SIZE(ib_srq, ocrdma_srq, ibsrq),
 };
 
 static int ocrdma_register_device(struct ocrdma_dev *dev)
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_verbs.h
* Unmerged path drivers/infiniband/hw/qedr/main.c
* Unmerged path drivers/infiniband/hw/qedr/verbs.c
* Unmerged path drivers/infiniband/hw/qedr/verbs.h
diff --git a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
index 7e3160341a20..42b86f06de60 100644
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
@@ -202,6 +202,8 @@ static const struct ib_device_ops pvrdma_dev_srq_ops = {
 	.destroy_srq = pvrdma_destroy_srq,
 	.modify_srq = pvrdma_modify_srq,
 	.query_srq = pvrdma_query_srq,
+
+	INIT_RDMA_OBJ_SIZE(ib_srq, pvrdma_srq, ibsrq),
 };
 
 static int pvrdma_register_device(struct pvrdma_dev *dev)
* Unmerged path drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
* Unmerged path drivers/infiniband/hw/vmw_pvrdma/pvrdma_verbs.h
* Unmerged path drivers/infiniband/sw/rdmavt/srq.c
* Unmerged path drivers/infiniband/sw/rdmavt/srq.h
* Unmerged path drivers/infiniband/sw/rdmavt/vt.c
diff --git a/drivers/infiniband/sw/rxe/rxe_pool.c b/drivers/infiniband/sw/rxe/rxe_pool.c
index b5c91df22047..5dbd7cfd10b2 100644
--- a/drivers/infiniband/sw/rxe/rxe_pool.c
+++ b/drivers/infiniband/sw/rxe/rxe_pool.c
@@ -55,7 +55,7 @@ struct rxe_type_info rxe_type_info[RXE_NUM_TYPES] = {
 	[RXE_TYPE_SRQ] = {
 		.name		= "rxe-srq",
 		.size		= sizeof(struct rxe_srq),
-		.flags		= RXE_POOL_INDEX,
+		.flags		= RXE_POOL_INDEX | RXE_POOL_NO_ALLOC,
 		.min_index	= RXE_MIN_SRQ_INDEX,
 		.max_index	= RXE_MAX_SRQ_INDEX,
 	},
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.c
diff --git a/drivers/infiniband/sw/rxe/rxe_verbs.h b/drivers/infiniband/sw/rxe/rxe_verbs.h
index 74e04801d34d..993bb6a49058 100644
--- a/drivers/infiniband/sw/rxe/rxe_verbs.h
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.h
@@ -120,8 +120,8 @@ struct rxe_rq {
 };
 
 struct rxe_srq {
-	struct rxe_pool_entry	pelem;
 	struct ib_srq		ibsrq;
+	struct rxe_pool_entry	pelem;
 	struct rxe_pd		*pd;
 	struct rxe_rq		rq;
 	u32			srq_num;
* Unmerged path include/rdma/ib_verbs.h
