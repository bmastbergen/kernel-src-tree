nfp: flower: add qos offload stats request and reply

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
commit 5fb5c395e2c4658a57f894ae9ab72b3d4d71a882
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5fb5c395.failed

Add stats request function that sends a stats request message to hw for
a specific police-filter. Process stats reply from hw and update the
stored qos structure.

	Signed-off-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5fb5c395e2c4658a57f894ae9ab72b3d4d71a882)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/flower/cmsg.h
#	drivers/net/ethernet/netronome/nfp/flower/main.h
#	drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
diff --cc drivers/net/ethernet/netronome/nfp/flower/cmsg.h
index a10c29ade5c2,537f7fc19584..000000000000
--- a/drivers/net/ethernet/netronome/nfp/flower/cmsg.h
+++ b/drivers/net/ethernet/netronome/nfp/flower/cmsg.h
@@@ -416,6 -416,9 +416,12 @@@ enum nfp_flower_cmsg_type_port 
  	NFP_FLOWER_CMSG_TYPE_TUN_IPS =		14,
  	NFP_FLOWER_CMSG_TYPE_FLOW_STATS =	15,
  	NFP_FLOWER_CMSG_TYPE_PORT_ECHO =	16,
++<<<<<<< HEAD
++=======
+ 	NFP_FLOWER_CMSG_TYPE_QOS_MOD =		18,
+ 	NFP_FLOWER_CMSG_TYPE_QOS_DEL =		19,
+ 	NFP_FLOWER_CMSG_TYPE_QOS_STATS =	20,
++>>>>>>> 5fb5c395e2c4 (nfp: flower: add qos offload stats request and reply)
  	NFP_FLOWER_CMSG_TYPE_MAX =		32,
  };
  
diff --cc drivers/net/ethernet/netronome/nfp/flower/main.h
index bc2acf60a1a9,6a6be7285105..000000000000
--- a/drivers/net/ethernet/netronome/nfp/flower/main.h
+++ b/drivers/net/ethernet/netronome/nfp/flower/main.h
@@@ -190,6 -196,20 +197,23 @@@ struct nfp_flower_priv 
  };
  
  /**
++<<<<<<< HEAD
++=======
+  * struct nfp_fl_qos - Flower APP priv data for quality of service
+  * @netdev_port_id:	NFP port number of repr with qos info
+  * @curr_stats:		Currently stored stats updates for qos info
+  * @prev_stats:		Previously stored updates for qos info
+  * @last_update:	Stored time when last stats were updated
+  */
+ struct nfp_fl_qos {
+ 	u32 netdev_port_id;
+ 	struct nfp_stat_pair curr_stats;
+ 	struct nfp_stat_pair prev_stats;
+ 	u64 last_update;
+ };
+ 
+ /**
++>>>>>>> 5fb5c395e2c4 (nfp: flower: add qos offload stats request and reply)
   * struct nfp_flower_repr_priv - Flower APP per-repr priv data
   * @nfp_repr:		Back pointer to nfp_repr
   * @lag_port_flags:	Extended port flags to record lag state of repr
@@@ -368,6 -390,11 +392,14 @@@ int nfp_flower_lag_populate_pre_action(
  				       struct nfp_fl_pre_lag *pre_act);
  int nfp_flower_lag_get_output_id(struct nfp_app *app,
  				 struct net_device *master);
++<<<<<<< HEAD
++=======
+ void nfp_flower_qos_init(struct nfp_app *app);
+ void nfp_flower_qos_cleanup(struct nfp_app *app);
+ int nfp_flower_setup_qos_offload(struct nfp_app *app, struct net_device *netdev,
+ 				 struct tc_cls_matchall_offload *flow);
+ void nfp_flower_stats_rlim_reply(struct nfp_app *app, struct sk_buff *skb);
++>>>>>>> 5fb5c395e2c4 (nfp: flower: add qos offload stats request and reply)
  int nfp_flower_reg_indir_block_handler(struct nfp_app *app,
  				       struct net_device *netdev,
  				       unsigned long event);
* Unmerged path drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
diff --git a/drivers/net/ethernet/netronome/nfp/flower/cmsg.c b/drivers/net/ethernet/netronome/nfp/flower/cmsg.c
index 7faec6887b8d..d5bbe3d6048b 100644
--- a/drivers/net/ethernet/netronome/nfp/flower/cmsg.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/cmsg.c
@@ -278,6 +278,9 @@ nfp_flower_cmsg_process_one_rx(struct nfp_app *app, struct sk_buff *skb)
 	case NFP_FLOWER_CMSG_TYPE_ACTIVE_TUNS:
 		nfp_tunnel_keep_alive(app, skb);
 		break;
+	case NFP_FLOWER_CMSG_TYPE_QOS_STATS:
+		nfp_flower_stats_rlim_reply(app, skb);
+		break;
 	case NFP_FLOWER_CMSG_TYPE_LAG_CONFIG:
 		if (app_priv->flower_ext_feats & NFP_FL_FEATS_LAG) {
 			skb_stored = nfp_flower_lag_unprocessed_msg(app, skb);
* Unmerged path drivers/net/ethernet/netronome/nfp/flower/cmsg.h
diff --git a/drivers/net/ethernet/netronome/nfp/flower/main.c b/drivers/net/ethernet/netronome/nfp/flower/main.c
index d476917c8f7d..eb846133943b 100644
--- a/drivers/net/ethernet/netronome/nfp/flower/main.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/main.c
@@ -776,6 +776,9 @@ static int nfp_flower_init(struct nfp_app *app)
 		nfp_warn(app->cpp, "Flow mod/merge not supported by FW.\n");
 	}
 
+	if (app_priv->flower_ext_feats & NFP_FL_FEATS_VF_RLIM)
+		nfp_flower_qos_init(app);
+
 	INIT_LIST_HEAD(&app_priv->indr_block_cb_priv);
 	INIT_LIST_HEAD(&app_priv->non_repr_priv);
 
@@ -799,6 +802,9 @@ static void nfp_flower_clean(struct nfp_app *app)
 	skb_queue_purge(&app_priv->cmsg_skbs_low);
 	flush_work(&app_priv->cmsg_work);
 
+	if (app_priv->flower_ext_feats & NFP_FL_FEATS_VF_RLIM)
+		nfp_flower_qos_cleanup(app);
+
 	if (app_priv->flower_ext_feats & NFP_FL_FEATS_LAG)
 		nfp_flower_lag_cleanup(&app_priv->nfp_lag);
 
* Unmerged path drivers/net/ethernet/netronome/nfp/flower/main.h
* Unmerged path drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
