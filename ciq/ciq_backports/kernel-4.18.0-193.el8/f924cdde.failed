block: remove blk_init_request_from_bio

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Christoph Hellwig <hch@lst.de>
commit f924cddebc900f7cb10d5538d69523e558fa681c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f924cdde.failed

lightnvm should have never used this function, as it is sending
passthrough requests, so switch it to blk_rq_append_bio like all the
other passthrough request users.  Inline blk_init_request_from_bio into
the only remaining caller.

	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Minwoo Im <minwoo.im.dev@gmail.com>
	Reviewed-by: Javier González <javier@javigon.com>
	Reviewed-by: Matias Bjørling <mb@lightnvm.io>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f924cddebc900f7cb10d5538d69523e558fa681c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
diff --cc block/blk-core.c
index 1af5bbd8602f,d1c7c69a20dd..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -684,18 -687,6 +684,21 @@@ bool blk_attempt_plug_merge(struct requ
  	return false;
  }
  
++<<<<<<< HEAD
 +void blk_init_request_from_bio(struct request *req, struct bio *bio)
 +{
 +	if (bio->bi_opf & REQ_RAHEAD)
 +		req->cmd_flags |= REQ_FAILFAST_MASK;
 +
 +	req->__sector = bio->bi_iter.bi_sector;
 +	req->ioprio = bio_prio(bio);
 +	req->write_hint = bio->bi_write_hint;
 +	blk_rq_bio_prep(req->q, req, bio);
 +}
 +EXPORT_SYMBOL_GPL(blk_init_request_from_bio);
 +
++=======
++>>>>>>> f924cddebc90 (block: remove blk_init_request_from_bio)
  static void handle_bad_sector(struct bio *bio, sector_t maxsector)
  {
  	char b[BDEVNAME_SIZE];
* Unmerged path block/blk-core.c
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 49d6c08f6c9f..4bb371c32135 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1769,7 +1769,12 @@ void blk_mq_flush_plug_list(struct blk_plug *plug, bool from_schedule)
 
 static void blk_mq_bio_to_request(struct request *rq, struct bio *bio)
 {
-	blk_init_request_from_bio(rq, bio);
+	if (bio->bi_opf & REQ_RAHEAD)
+		rq->cmd_flags |= REQ_FAILFAST_MASK;
+
+	rq->__sector = bio->bi_iter.bi_sector;
+	rq->write_hint = bio->bi_write_hint;
+	blk_rq_bio_prep(rq->q, rq, bio);
 
 	blk_account_io_start(rq, true);
 }
diff --git a/drivers/nvme/host/lightnvm.c b/drivers/nvme/host/lightnvm.c
index d534225d1001..d1f5090c3fa3 100644
--- a/drivers/nvme/host/lightnvm.c
+++ b/drivers/nvme/host/lightnvm.c
@@ -650,7 +650,7 @@ static struct request *nvme_nvm_alloc_request(struct request_queue *q,
 	rq->cmd_flags &= ~REQ_FAILFAST_DRIVER;
 
 	if (rqd->bio)
-		blk_init_request_from_bio(rq, rqd->bio);
+		blk_rq_append_bio(rq, &rqd->bio);
 	else
 		rq->ioprio = IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE, IOPRIO_NORM);
 
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 53a43430a7f8..8737a3e19e54 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -858,7 +858,6 @@ extern void blk_unregister_queue(struct gendisk *disk);
 extern blk_qc_t generic_make_request(struct bio *bio);
 extern blk_qc_t direct_make_request(struct bio *bio);
 extern void blk_rq_init(struct request_queue *q, struct request *rq);
-extern void blk_init_request_from_bio(struct request *req, struct bio *bio);
 extern void blk_put_request(struct request *);
 extern struct request *blk_get_request(struct request_queue *, unsigned int op,
 				       blk_mq_req_flags_t flags);
