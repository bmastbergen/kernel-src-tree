dax: Avoid losing wakeup in dax_lock_mapping_entry

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Matthew Wilcox <willy@infradead.org>
commit 25bbe21bf427a81b8e3ccd480ea0e1d940256156
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/25bbe21b.failed

After calling get_unlocked_entry(), you have to call
put_unlocked_entry() to avoid subsequent waiters losing wakeups.

Fixes: c2a7d2a11552 ("filesystem-dax: Introduce dax_lock_mapping_entry()")
	Cc: stable@vger.kernel.org
	Signed-off-by: Matthew Wilcox <willy@infradead.org>
(cherry picked from commit 25bbe21bf427a81b8e3ccd480ea0e1d940256156)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
diff --cc fs/dax.c
index b89ab8b5e700,9bcce89ea18e..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -524,32 -375,28 +524,43 @@@ bool dax_lock_mapping_entry(struct pag
  		 * otherwise we would not have a valid pfn_to_page()
  		 * translation.
  		 */
 -		locked = true;
 -		if (S_ISCHR(mapping->host->i_mode))
 +		inode = mapping->host;
 +		if (S_ISCHR(inode->i_mode)) {
 +			did_lock = true;
  			break;
 +		}
  
 -		xas.xa = &mapping->i_pages;
 -		xas_lock_irq(&xas);
 +		xa_lock_irq(&mapping->i_pages);
  		if (mapping != page->mapping) {
 -			xas_unlock_irq(&xas);
 +			xa_unlock_irq(&mapping->i_pages);
  			continue;
  		}
++<<<<<<< HEAD
 +		index = page->index;
 +
 +		entry = __get_unlocked_mapping_entry(mapping, index, &slot,
 +				entry_wait_revalidate);
 +		if (!entry) {
 +			xa_unlock_irq(&mapping->i_pages);
 +			break;
 +		} else if (IS_ERR(entry)) {
 +			xa_unlock_irq(&mapping->i_pages);
 +			WARN_ON_ONCE(PTR_ERR(entry) != -EAGAIN);
++=======
+ 		xas_set(&xas, page->index);
+ 		entry = xas_load(&xas);
+ 		if (dax_is_locked(entry)) {
+ 			rcu_read_unlock();
+ 			entry = get_unlocked_entry(&xas);
+ 			xas_unlock_irq(&xas);
+ 			put_unlocked_entry(&xas, entry);
+ 			rcu_read_lock();
++>>>>>>> 25bbe21bf427 (dax: Avoid losing wakeup in dax_lock_mapping_entry)
  			continue;
  		}
 -		dax_lock_entry(&xas, entry);
 -		xas_unlock_irq(&xas);
 +		lock_slot(mapping, slot);
 +		did_lock = true;
 +		xa_unlock_irq(&mapping->i_pages);
  		break;
  	}
  	rcu_read_unlock();
* Unmerged path fs/dax.c
