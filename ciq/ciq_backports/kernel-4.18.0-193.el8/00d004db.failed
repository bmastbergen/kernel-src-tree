ALSA: firewire-motu: code refactoring for MOTU data block processing layer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit 00d004db6493c62b8bbd7073a9b3b7290cbe0cea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/00d004db.failed

This is code refactoring for MOTU data block processing layer so that
it can receive list of packet descriptor.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 00d004db6493c62b8bbd7073a9b3b7290cbe0cea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/firewire/motu/amdtp-motu.c
diff --cc sound/firewire/motu/amdtp-motu.c
index 7973dedd31ef,21c6bfdf47c0..000000000000
--- a/sound/firewire/motu/amdtp-motu.c
+++ b/sound/firewire/motu/amdtp-motu.c
@@@ -299,23 -311,25 +311,35 @@@ static void __maybe_unused copy_message
  }
  
  static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
 -					   const struct pkt_desc *desc,
 -					   struct snd_pcm_substream *pcm)
 +				__be32 *buffer, unsigned int data_blocks,
 +				unsigned int *syt)
  {
  	struct amdtp_motu *p = s->protocol;
++<<<<<<< HEAD
 +	struct snd_pcm_substream *pcm;
++=======
+ 	unsigned int pcm_frames = 0;
++>>>>>>> 00d004db6493 (ALSA: firewire-motu: code refactoring for MOTU data block processing layer)
  
 -	trace_data_block_sph(s, desc->data_blocks, desc->ctx_payload);
 -	trace_data_block_message(s, desc->data_blocks, desc->ctx_payload);
 +	trace_data_block_sph(s, data_blocks, buffer);
 +	trace_data_block_message(s, data_blocks, buffer);
  
  	if (p->midi_ports)
 -		read_midi_messages(s, desc->ctx_payload, desc->data_blocks);
 +		read_midi_messages(s, buffer, data_blocks);
  
++<<<<<<< HEAD
 +	pcm = READ_ONCE(s->pcm);
 +	if (data_blocks > 0 && pcm)
 +		read_pcm_s32(s, pcm->runtime, buffer, data_blocks);
++=======
+ 	if (pcm) {
+ 		read_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks,
+ 			     pcm_frames);
+ 		pcm_frames = desc->data_blocks;
+ 	}
++>>>>>>> 00d004db6493 (ALSA: firewire-motu: code refactoring for MOTU data block processing layer)
  
 -	return pcm_frames;
 +	return data_blocks;
  }
  
  static inline void compute_next_elapse_from_start(struct amdtp_motu *p)
@@@ -361,32 -375,31 +385,47 @@@ static void write_sph(struct amdtp_stre
  }
  
  static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
 -					   const struct pkt_desc *desc,
 -					   struct snd_pcm_substream *pcm)
 +				__be32 *buffer, unsigned int data_blocks,
 +				unsigned int *syt)
  {
++<<<<<<< HEAD
 +	struct amdtp_motu *p = (struct amdtp_motu *)s->protocol;
 +	struct snd_pcm_substream *pcm;
 +
 +	/* Not used. */
 +	*syt = 0xffff;
++=======
+ 	struct amdtp_motu *p = s->protocol;
+ 	unsigned int pcm_frames = 0;
++>>>>>>> 00d004db6493 (ALSA: firewire-motu: code refactoring for MOTU data block processing layer)
  
  	/* TODO: how to interact control messages between userspace? */
  
  	if (p->midi_ports)
 -		write_midi_messages(s, desc->ctx_payload, desc->data_blocks);
 -
 +		write_midi_messages(s, buffer, data_blocks);
 +
++<<<<<<< HEAD
 +	pcm = READ_ONCE(s->pcm);
 +	if (pcm)
 +		write_pcm_s32(s, pcm->runtime, buffer, data_blocks);
 +	else
 +		write_pcm_silence(s, buffer, data_blocks);
++=======
+ 	if (pcm) {
+ 		write_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks,
+ 			      pcm_frames);
+ 		pcm_frames = desc->data_blocks;
+ 	} else {
+ 		write_pcm_silence(s, desc->ctx_payload, desc->data_blocks);
+ 	}
++>>>>>>> 00d004db6493 (ALSA: firewire-motu: code refactoring for MOTU data block processing layer)
  
 -	write_sph(s, desc->ctx_payload, desc->data_blocks);
 +	write_sph(s, buffer, data_blocks);
  
 -	trace_data_block_sph(s, desc->data_blocks, desc->ctx_payload);
 -	trace_data_block_message(s, desc->data_blocks, desc->ctx_payload);
 +	trace_data_block_sph(s, data_blocks, buffer);
 +	trace_data_block_message(s, data_blocks, buffer);
  
 -	return pcm_frames;
 +	return data_blocks;
  }
  
  int amdtp_motu_init(struct amdtp_stream *s, struct fw_unit *unit,
* Unmerged path sound/firewire/motu/amdtp-motu.c
