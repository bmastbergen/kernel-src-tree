page_pool: fix compile warning when CONFIG_PAGE_POOL is disabled

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jesper Dangaard Brouer <brouer@redhat.com>
commit 497ad9f5b2dc86b733761b9afa44ecfa2f17be65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/497ad9f5.failed

Kbuild test robot reported compile warning:
 warning: no return statement in function returning non-void
in function page_pool_request_shutdown, when CONFIG_PAGE_POOL is disabled.

The fix makes the code a little more verbose, with a descriptive variable.

Fixes: 99c07c43c4ea ("xdp: tracking page_pool resources and safe removal")
	Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Reported-by: kbuild test robot <lkp@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 497ad9f5b2dc86b733761b9afa44ecfa2f17be65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/page_pool.h
diff --cc include/net/page_pool.h
index cf3f42080742,f07c518ef8a5..000000000000
--- a/include/net/page_pool.h
+++ b/include/net/page_pool.h
@@@ -144,6 -146,38 +144,41 @@@ static inline void page_pool_recycle_di
  	__page_pool_put_page(pool, page, true);
  }
  
++<<<<<<< HEAD
++=======
+ /* API user MUST have disconnected alloc-side (not allowed to call
+  * page_pool_alloc_pages()) before calling this.  The free-side can
+  * still run concurrently, to handle in-flight packet-pages.
+  *
+  * A request to shutdown can fail (with false) if there are still
+  * in-flight packet-pages.
+  */
+ bool __page_pool_request_shutdown(struct page_pool *pool);
+ static inline bool page_pool_request_shutdown(struct page_pool *pool)
+ {
+ 	bool safe_to_remove = false;
+ 
+ #ifdef CONFIG_PAGE_POOL
+ 	safe_to_remove = __page_pool_request_shutdown(pool);
+ #endif
+ 	return safe_to_remove;
+ }
+ 
+ /* Disconnects a page (from a page_pool).  API users can have a need
+  * to disconnect a page (from a page_pool), to allow it to be used as
+  * a regular page (that will eventually be returned to the normal
+  * page-allocator via put_page).
+  */
+ void page_pool_unmap_page(struct page_pool *pool, struct page *page);
+ static inline void page_pool_release_page(struct page_pool *pool,
+ 					  struct page *page)
+ {
+ #ifdef CONFIG_PAGE_POOL
+ 	page_pool_unmap_page(pool, page);
+ #endif
+ }
+ 
++>>>>>>> 497ad9f5b2dc (page_pool: fix compile warning when CONFIG_PAGE_POOL is disabled)
  static inline dma_addr_t page_pool_get_dma_addr(struct page *page)
  {
  	return page->dma_addr;
* Unmerged path include/net/page_pool.h
