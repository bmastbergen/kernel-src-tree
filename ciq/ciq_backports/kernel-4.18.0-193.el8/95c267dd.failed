ASoC: soc-core: add snd_soc_dapm_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-core: add snd_soc_dapm_init() (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 92.86%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 95c267dd20431f0eb54ca204bd73a7d85c532a37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/95c267dd.failed

It is easy to read code if it is cleanly using paired function/naming,
like start <-> stop, register <-> unregister, etc, etc.
But, current ALSA SoC code is very random, unbalance, not paired, etc.
It is easy to create bug at the such code, and it will be difficult to
debug.

soc-dapm has snd_soc_dapm_free() which cleanups debugfs, widgets, list.
But, there is no paired initialize function.
This patch adds snd_soc_dapm_init() and initilaizing dapm

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87pnkw7lbj.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 95c267dd20431f0eb54ca204bd73a7d85c532a37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-core.c
diff --cc sound/soc/soc-core.c
index 752d9151c441,8e831ae59eb8..000000000000
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@@ -984,6 -993,100 +984,103 @@@ static void soc_remove_component(struc
  	soc_cleanup_component(component);
  }
  
++<<<<<<< HEAD
++=======
+ static int soc_probe_component(struct snd_soc_card *card,
+ 			       struct snd_soc_component *component)
+ {
+ 	struct snd_soc_dapm_context *dapm =
+ 		snd_soc_component_get_dapm(component);
+ 	struct snd_soc_dai *dai;
+ 	int ret;
+ 
+ 	if (!strcmp(component->name, "snd-soc-dummy"))
+ 		return 0;
+ 
+ 	if (component->card) {
+ 		if (component->card != card) {
+ 			dev_err(component->dev,
+ 				"Trying to bind component to card \"%s\" but is already bound to card \"%s\"\n",
+ 				card->name, component->card->name);
+ 			return -ENODEV;
+ 		}
+ 		return 0;
+ 	}
+ 
+ 	ret = snd_soc_component_module_get_when_probe(component);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	component->card = card;
+ 	soc_set_name_prefix(card, component);
+ 
+ 	soc_init_component_debugfs(component);
+ 
+ 	snd_soc_dapm_init(dapm, card, component);
+ 
+ 	ret = snd_soc_dapm_new_controls(dapm,
+ 					component->driver->dapm_widgets,
+ 					component->driver->num_dapm_widgets);
+ 
+ 	if (ret != 0) {
+ 		dev_err(component->dev,
+ 			"Failed to create new controls %d\n", ret);
+ 		goto err_probe;
+ 	}
+ 
+ 	for_each_component_dais(component, dai) {
+ 		ret = snd_soc_dapm_new_dai_widgets(dapm, dai);
+ 		if (ret != 0) {
+ 			dev_err(component->dev,
+ 				"Failed to create DAI widgets %d\n", ret);
+ 			goto err_probe;
+ 		}
+ 	}
+ 
+ 	ret = snd_soc_component_probe(component);
+ 	if (ret < 0) {
+ 		dev_err(component->dev,
+ 			"ASoC: failed to probe component %d\n", ret);
+ 		goto err_probe;
+ 	}
+ 	WARN(dapm->idle_bias_off &&
+ 	     dapm->bias_level != SND_SOC_BIAS_OFF,
+ 	     "codec %s can not start from non-off bias with idle_bias_off==1\n",
+ 	     component->name);
+ 
+ 	/* machine specific init */
+ 	if (component->init) {
+ 		ret = component->init(component);
+ 		if (ret < 0) {
+ 			dev_err(component->dev,
+ 				"Failed to do machine specific init %d\n", ret);
+ 			goto err_probe;
+ 		}
+ 	}
+ 
+ 	ret = snd_soc_add_component_controls(component,
+ 					     component->driver->controls,
+ 					     component->driver->num_controls);
+ 	if (ret < 0)
+ 		goto err_probe;
+ 
+ 	ret = snd_soc_dapm_add_routes(dapm,
+ 				      component->driver->dapm_routes,
+ 				      component->driver->num_dapm_routes);
+ 	if (ret < 0)
+ 		goto err_probe;
+ 
+ 	/* see for_each_card_components */
+ 	list_add(&component->card_list, &card->component_dev_list);
+ 
+ err_probe:
+ 	if (ret < 0)
+ 		soc_cleanup_component(component);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> 95c267dd2043 (ASoC: soc-core: add snd_soc_dapm_init())
  static void soc_remove_dai(struct snd_soc_dai *dai, int order)
  {
  	int err;
diff --git a/include/sound/soc-dapm.h b/include/sound/soc-dapm.h
index 8a90816a6eb5..9076ae880481 100644
--- a/include/sound/soc-dapm.h
+++ b/include/sound/soc-dapm.h
@@ -417,6 +417,9 @@ int snd_soc_dapm_update_dai(struct snd_pcm_substream *substream,
 /* dapm path setup */
 int snd_soc_dapm_new_widgets(struct snd_soc_card *card);
 void snd_soc_dapm_free(struct snd_soc_dapm_context *dapm);
+void snd_soc_dapm_init(struct snd_soc_dapm_context *dapm,
+		       struct snd_soc_card *card,
+		       struct snd_soc_component *component);
 int snd_soc_dapm_add_routes(struct snd_soc_dapm_context *dapm,
 			    const struct snd_soc_dapm_route *route, int num);
 int snd_soc_dapm_del_routes(struct snd_soc_dapm_context *dapm,
* Unmerged path sound/soc/soc-core.c
diff --git a/sound/soc/soc-dapm.c b/sound/soc/soc-dapm.c
index 7874989d43fc..0ed4dca454c4 100644
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@ -4683,6 +4683,27 @@ void snd_soc_dapm_free(struct snd_soc_dapm_context *dapm)
 }
 EXPORT_SYMBOL_GPL(snd_soc_dapm_free);
 
+void snd_soc_dapm_init(struct snd_soc_dapm_context *dapm,
+		       struct snd_soc_card *card,
+		       struct snd_soc_component *component)
+{
+	dapm->card		= card;
+	dapm->component		= component;
+	dapm->bias_level	= SND_SOC_BIAS_OFF;
+
+	if (component) {
+		dapm->dev		= component->dev;
+		dapm->idle_bias_off	= !component->driver->idle_bias_on,
+		dapm->suspend_bias_off	= component->driver->suspend_bias_off;
+	} else {
+		dapm->dev		= card->dev;
+	}
+
+	INIT_LIST_HEAD(&dapm->list);
+	list_add(&dapm->list, &card->dapm_list);
+}
+EXPORT_SYMBOL_GPL(snd_soc_dapm_init);
+
 static void soc_dapm_shutdown_dapm(struct snd_soc_dapm_context *dapm)
 {
 	struct snd_soc_card *card = dapm->card;
