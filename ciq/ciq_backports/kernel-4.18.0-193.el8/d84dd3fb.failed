SUNRPC: Don't let RPC_SOFTCONN tasks time out if the transport is connected

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit d84dd3fb82fa7a094de7f08f10610d55a70cf0ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d84dd3fb.failed

If the transport is still connected, then we do want to allow
RPC_SOFTCONN tasks to retry. They should time out if and only if
the connection is broken.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit d84dd3fb82fa7a094de7f08f10610d55a70cf0ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/clnt.c
diff --cc net/sunrpc/clnt.c
index 4c9385209a04,187d10443a15..000000000000
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@@ -2195,17 -2302,26 +2195,29 @@@ call_status(struct rpc_task *task
  		if (clnt->cl_chatty)
  			printk("%s: RPC call returned error %d\n",
  			       clnt->cl_program->name, -status);
 -		goto out_exit;
 +		rpc_exit(task, status);
  	}
 -	task->tk_action = call_encode;
 -	rpc_check_timeout(task);
 -	return;
 -out_exit:
 -	rpc_exit(task, status);
  }
  
++<<<<<<< HEAD
 +/*
 + * 6a.	Handle RPC timeout
 + * 	We do not release the request slot, so we keep using the
 + *	same XID for all retransmits.
 + */
++=======
+ static bool
+ rpc_check_connected(const struct rpc_rqst *req)
+ {
+ 	/* No allocated request or transport? return true */
+ 	if (!req || !req->rq_xprt)
+ 		return true;
+ 	return xprt_connected(req->rq_xprt);
+ }
+ 
++>>>>>>> d84dd3fb82fa (SUNRPC: Don't let RPC_SOFTCONN tasks time out if the transport is connected)
  static void
 -rpc_check_timeout(struct rpc_task *task)
 +call_timeout(struct rpc_task *task)
  {
  	struct rpc_clnt	*clnt = task->tk_client;
  
* Unmerged path net/sunrpc/clnt.c
