powerpc/fadump: reset metadata address during clean up

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Hari Bathini <hbathini@linux.ibm.com>
commit 2790d01d1e1d22735d848eec55668f7d44417e22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/2790d01d.failed

During kexec boot, metadata address needs to be reset to avoid running
into errors interpreting stale metadata address, in case the kexec'ed
kernel crashes before metadata address could be setup again.

	Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/156821346629.5656.10783321582005237813.stgit@hbathini.in.ibm.com
(cherry picked from commit 2790d01d1e1d22735d848eec55668f7d44417e22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/fadump-internal.h
#	arch/powerpc/platforms/powernv/opal-fadump.c
diff --cc arch/powerpc/include/asm/fadump-internal.h
index f8097510e03f,0c2c4f58d365..000000000000
--- a/arch/powerpc/include/asm/fadump-internal.h
+++ b/arch/powerpc/include/asm/fadump-internal.h
@@@ -99,6 -106,23 +99,26 @@@ struct fw_dump 
  	unsigned long	dump_active:1;
  	unsigned long	dump_registered:1;
  	unsigned long	nocma:1;
++<<<<<<< HEAD
++=======
+ 
+ 	struct fadump_ops	*ops;
+ };
+ 
+ struct fadump_ops {
+ 	u64	(*fadump_init_mem_struct)(struct fw_dump *fadump_conf);
+ 	u64	(*fadump_get_metadata_size)(void);
+ 	int	(*fadump_setup_metadata)(struct fw_dump *fadump_conf);
+ 	int	(*fadump_register)(struct fw_dump *fadump_conf);
+ 	int	(*fadump_unregister)(struct fw_dump *fadump_conf);
+ 	int	(*fadump_invalidate)(struct fw_dump *fadump_conf);
+ 	void	(*fadump_cleanup)(struct fw_dump *fadump_conf);
+ 	int	(*fadump_process)(struct fw_dump *fadump_conf);
+ 	void	(*fadump_region_show)(struct fw_dump *fadump_conf,
+ 				      struct seq_file *m);
+ 	void	(*fadump_trigger)(struct fadump_crash_info_header *fdh,
+ 				  const char *msg);
++>>>>>>> 2790d01d1e1d (powerpc/fadump: reset metadata address during clean up)
  };
  
  /* Helper functions */
* Unmerged path arch/powerpc/platforms/powernv/opal-fadump.c
* Unmerged path arch/powerpc/include/asm/fadump-internal.h
diff --git a/arch/powerpc/kernel/fadump.c b/arch/powerpc/kernel/fadump.c
index 56526469b148..6fef6968e3d9 100644
--- a/arch/powerpc/kernel/fadump.c
+++ b/arch/powerpc/kernel/fadump.c
@@ -1381,6 +1381,9 @@ static int fadump_invalidate_dump(const struct rtas_fadump_mem_struct *fdm)
 
 void fadump_cleanup(void)
 {
+	if (!fw_dump.fadump_supported)
+		return;
+
 	/* Invalidate the registration only if dump is active. */
 	if (fw_dump.dump_active) {
 		/* pass the same memory dump structure provided by platform */
@@ -1390,6 +1393,9 @@ void fadump_cleanup(void)
 		fadump_unregister_dump(&fdm);
 		free_crash_memory_ranges();
 	}
+
+	if (fw_dump.ops->fadump_cleanup)
+		fw_dump.ops->fadump_cleanup(&fw_dump);
 }
 
 static void fadump_free_reserved_memory(unsigned long start_pfn,
* Unmerged path arch/powerpc/platforms/powernv/opal-fadump.c
