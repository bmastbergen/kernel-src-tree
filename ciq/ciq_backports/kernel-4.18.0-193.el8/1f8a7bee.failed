net/mlx5: Add EQ enable/disable API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Add EQ enable/disable API (Alaa Hleihel) [1724308 1724336]
Rebuild_FUZZ: 93.94%
commit-author Yuval Avnery <yuvalav@mellanox.com>
commit 1f8a7bee27e63d7c5287719049941e285e54d370
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1f8a7bee.failed

Previously, EQ joined the chain notifier on creation.
This forced the caller to be ready to handle events before creating
the EQ through eq_create_generic interface.

To help the caller control when the created EQ will be attached to the
IRQ, add enable/disable API.

	Signed-off-by: Yuval Avnery <yuvalav@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 1f8a7bee27e63d7c5287719049941e285e54d370)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eq.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eq.c
index c00cfa7a9ba0,58fff2f39b38..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@@ -396,11 -304,6 +396,14 @@@ create_map_eq(struct mlx5_core_dev *dev
  	eq->irqn = pci_irq_vector(dev->pdev, vecidx);
  	eq->dev = dev;
  	eq->doorbell = priv->uar->map + MLX5_EQ_DOORBEL_OFFSET;
++<<<<<<< HEAD
 +	eq->irq_nb = param->nb;
 +
 +	err = mlx5_irq_attach_nb(mlx5_irq_get(dev, vecidx), param->nb);
 +	if (err)
 +		goto err_eq;
++=======
++>>>>>>> 1f8a7bee27e6 (net/mlx5: Add EQ enable/disable API)
  
  	err = mlx5_debug_eq_add(dev, eq);
  	if (err)
@@@ -413,9 -312,6 +412,12 @@@
  	kvfree(in);
  	return 0;
  
++<<<<<<< HEAD
 +err_detach:
 +	mlx5_irq_detach_nb(mlx5_irq_get(dev, vecidx), eq->irq_nb);
 +
++=======
++>>>>>>> 1f8a7bee27e6 (net/mlx5: Add EQ enable/disable API)
  err_eq:
  	mlx5_cmd_destroy_eq(dev, eq->eqn);
  
@@@ -433,10 -366,6 +472,13 @@@ static int destroy_unmap_eq(struct mlx5
  
  	mlx5_debug_eq_remove(dev, eq);
  
++<<<<<<< HEAD
 +	err = mlx5_irq_detach_nb(mlx5_irq_get(dev, eq->vecidx), eq->irq_nb);
 +	if (err)
 +		mlx5_core_warn(eq->dev, "eq failed to detach from irq. err %d",
 +			       err);
++=======
++>>>>>>> 1f8a7bee27e6 (net/mlx5: Add EQ enable/disable API)
  	err = mlx5_cmd_destroy_eq(dev, eq->eqn);
  	if (err)
  		mlx5_core_warn(dev, "failed to destroy a previously created eq: eqn %d\n",
@@@ -628,10 -560,9 +670,9 @@@ static int create_async_eqs(struct mlx5
  
  	table->cmd_eq.irq_nb.notifier_call = mlx5_eq_async_int;
  	param = (struct mlx5_eq_param) {
 -		.irq_index = 0,
 +		.index = MLX5_EQ_CMD_IDX,
  		.mask = 1ull << MLX5_EVENT_TYPE_CMD,
  		.nent = MLX5_NUM_CMD_EQE,
- 		.nb = &table->cmd_eq.irq_nb,
  	};
  	err = create_async_eq(dev, &table->cmd_eq.core, &param);
  	if (err) {
@@@ -643,10 -578,9 +688,9 @@@
  
  	table->async_eq.irq_nb.notifier_call = mlx5_eq_async_int;
  	param = (struct mlx5_eq_param) {
 -		.irq_index = 0,
 +		.index = MLX5_EQ_ASYNC_IDX,
  		.mask = gather_async_events_mask(dev),
  		.nent = MLX5_NUM_ASYNC_EQE,
- 		.nb = &table->async_eq.irq_nb,
  	};
  	err = create_async_eq(dev, &table->async_eq.core, &param);
  	if (err) {
@@@ -656,10 -596,9 +706,9 @@@
  
  	table->pages_eq.irq_nb.notifier_call = mlx5_eq_async_int;
  	param = (struct mlx5_eq_param) {
 -		.irq_index = 0,
 +		.index = MLX5_EQ_PAGEREQ_IDX,
  		.mask =  1 << MLX5_EVENT_TYPE_PAGE_REQUEST,
  		.nent = /* TODO: sriov max_vf + */ 1,
- 		.nb = &table->pages_eq.irq_nb,
  	};
  	err = create_async_eq(dev, &table->pages_eq.core, &param);
  	if (err) {
@@@ -859,16 -749,9 +922,17 @@@ static void destroy_comp_eqs(struct mlx
  	struct mlx5_eq_table *table = dev->priv.eq_table;
  	struct mlx5_eq_comp *eq, *n;
  
 +	clear_comp_irqs_affinity_hints(dev);
 +
 +#ifdef CONFIG_RFS_ACCEL
 +	if (table->rmap) {
 +		free_irq_cpu_rmap(table->rmap);
 +		table->rmap = NULL;
 +	}
 +#endif
  	list_for_each_entry_safe(eq, n, &table->comp_eqs_list, list) {
  		list_del(&eq->list);
+ 		mlx5_eq_disable(dev, &eq->core, &eq->irq_nb);
  		if (destroy_unmap_eq(dev, &eq->core))
  			mlx5_core_warn(dev, "failed to destroy comp EQ 0x%x\n",
  				       eq->core.eqn);
@@@ -910,15 -788,11 +974,14 @@@ static int create_comp_eqs(struct mlx5_
  		tasklet_init(&eq->tasklet_ctx.task, mlx5_cq_tasklet_cb,
  			     (unsigned long)&eq->tasklet_ctx);
  
 +#ifdef CONFIG_RFS_ACCEL
 +		irq_cpu_rmap_add(table->rmap, pci_irq_vector(dev->pdev, vecidx));
 +#endif
  		eq->irq_nb.notifier_call = mlx5_eq_comp_int;
  		param = (struct mlx5_eq_param) {
 -			.irq_index = vecidx,
 +			.index = vecidx,
  			.mask = 0,
  			.nent = nent,
- 			.nb = &eq->irq_nb,
  		};
  		err = create_map_eq(dev, &eq->core, &param);
  		if (err) {
diff --git a/drivers/infiniband/hw/mlx5/odp.c b/drivers/infiniband/hw/mlx5/odp.c
index 48a5074fbdc2..2b4327121d0c 100644
--- a/drivers/infiniband/hw/mlx5/odp.c
+++ b/drivers/infiniband/hw/mlx5/odp.c
@@ -1559,15 +1559,21 @@ mlx5_ib_create_pf_eq(struct mlx5_ib_dev *dev, struct mlx5_ib_pf_eq *eq)
 		.index = MLX5_EQ_PFAULT_IDX,
 		.mask = 1 << MLX5_EVENT_TYPE_PAGE_FAULT,
 		.nent = MLX5_IB_NUM_PF_EQE,
-		.nb = &eq->irq_nb,
 	};
 	eq->core = mlx5_eq_create_generic(dev->mdev, &param);
 	if (IS_ERR(eq->core)) {
 		err = PTR_ERR(eq->core);
 		goto err_wq;
 	}
+	err = mlx5_eq_enable(dev->mdev, eq->core, &eq->irq_nb);
+	if (err) {
+		mlx5_ib_err(dev, "failed to enable odp EQ %d\n", err);
+		goto err_eq;
+	}
 
 	return 0;
+err_eq:
+	mlx5_eq_destroy_generic(dev->mdev, eq->core);
 err_wq:
 	destroy_workqueue(eq->wq);
 err_mempool:
@@ -1580,6 +1586,7 @@ mlx5_ib_destroy_pf_eq(struct mlx5_ib_dev *dev, struct mlx5_ib_pf_eq *eq)
 {
 	int err;
 
+	mlx5_eq_disable(dev->mdev, eq->core, &eq->irq_nb);
 	err = mlx5_eq_destroy_generic(dev->mdev, eq->core);
 	cancel_work_sync(&eq->work);
 	destroy_workqueue(eq->wq);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eq.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/lib/eq.h b/drivers/net/ethernet/mellanox/mlx5/core/lib/eq.h
index adbc228bd55d..edec8d3a90ad 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/lib/eq.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/eq.h
@@ -34,7 +34,6 @@ struct mlx5_eq {
 	u8                      eqn;
 	int                     nent;
 	struct mlx5_rsc_debug   *dbg;
-	struct notifier_block   *irq_nb; /* For destroy only */
 };
 
 struct mlx5_eq_async {
diff --git a/include/linux/mlx5/eq.h b/include/linux/mlx5/eq.h
index 73ab658af764..109c32cb6ca6 100644
--- a/include/linux/mlx5/eq.h
+++ b/include/linux/mlx5/eq.h
@@ -26,13 +26,16 @@ struct mlx5_eq_param {
 	u8             index;
 	int            nent;
 	u64            mask;
-	struct notifier_block *nb;
 };
 
 struct mlx5_eq *
 mlx5_eq_create_generic(struct mlx5_core_dev *dev, struct mlx5_eq_param *param);
 int
 mlx5_eq_destroy_generic(struct mlx5_core_dev *dev, struct mlx5_eq *eq);
+int mlx5_eq_enable(struct mlx5_core_dev *dev, struct mlx5_eq *eq,
+		   struct notifier_block *nb);
+void mlx5_eq_disable(struct mlx5_core_dev *dev, struct mlx5_eq *eq,
+		     struct notifier_block *nb);
 
 struct mlx5_eqe *mlx5_eq_get_eqe(struct mlx5_eq *eq, u32 cc);
 void mlx5_eq_update_ci(struct mlx5_eq *eq, u32 cc, bool arm);
