IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Michael J. Ruhl <michael.j.ruhl@intel.com>
commit 2b0ad2da8fd4c32f63d9142f2de43a4d34fdd679
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/2b0ad2da.failed

Add some helper functions to hide struct rvt_swqe details.

	Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
	Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
	Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 2b0ad2da8fd4c32f63d9142f2de43a4d34fdd679)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/hfi1/qp.c
#	drivers/infiniband/hw/hfi1/ud.c
#	drivers/infiniband/hw/qib/qib_qp.c
#	drivers/infiniband/hw/qib/qib_ud.c
#	drivers/infiniband/sw/rdmavt/qp.c
diff --cc drivers/infiniband/hw/hfi1/qp.c
index 4e0e9fc0a777,f8e733aa3bb8..000000000000
--- a/drivers/infiniband/hw/hfi1/qp.c
+++ b/drivers/infiniband/hw/hfi1/qp.c
@@@ -348,7 -348,7 +348,11 @@@ int hfi1_setup_wqe(struct rvt_qp *qp, s
  		break;
  	case IB_QPT_GSI:
  	case IB_QPT_UD:
++<<<<<<< HEAD
 +		ah = ibah_to_rvtah(wqe->ud_wr.ah);
++=======
+ 		ah = rvt_get_swqe_ah(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  		if (wqe->length > (1 << ah->log_pmtu))
  			return -EINVAL;
  		if (ibp->sl_to_sc[rdma_ah_get_sl(&ah->attr)] == 0xf)
diff --cc drivers/infiniband/hw/hfi1/ud.c
index 4cb0fce5c096,e804af71b629..000000000000
--- a/drivers/infiniband/hw/hfi1/ud.c
+++ b/drivers/infiniband/hw/hfi1/ud.c
@@@ -87,7 -87,7 +87,11 @@@ static void ud_loopback(struct rvt_qp *
  	rcu_read_lock();
  
  	qp = rvt_lookup_qpn(ib_to_rvt(sqp->ibqp.device), &ibp->rvp,
++<<<<<<< HEAD
 +			    swqe->ud_wr.remote_qpn);
++=======
+ 			    rvt_get_swqe_remote_qpn(swqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	if (!qp) {
  		ibp->rvp.n_pkt_drops++;
  		rcu_read_unlock();
@@@ -105,7 -105,7 +109,11 @@@
  		goto drop;
  	}
  
++<<<<<<< HEAD
 +	ah_attr = &ibah_to_rvtah(swqe->ud_wr.ah)->attr;
++=======
+ 	ah_attr = rvt_get_swqe_ah_attr(swqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ppd = ppd_from_ibp(ibp);
  
  	if (qp->ibqp.qp_num > 1) {
@@@ -135,8 -135,8 +143,13 @@@
  	if (qp->ibqp.qp_num) {
  		u32 qkey;
  
++<<<<<<< HEAD
 +		qkey = (int)swqe->ud_wr.remote_qkey < 0 ?
 +			sqp->qkey : swqe->ud_wr.remote_qkey;
++=======
+ 		qkey = (int)rvt_get_swqe_remote_qkey(swqe) < 0 ?
+ 			sqp->qkey : rvt_get_swqe_remote_qkey(swqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  		if (unlikely(qkey != qp->qkey))
  			goto drop; /* silently drop per IBTA spec */
  	}
@@@ -240,7 -240,7 +253,11 @@@
  	if (qp->ibqp.qp_type == IB_QPT_GSI || qp->ibqp.qp_type == IB_QPT_SMI) {
  		if (sqp->ibqp.qp_type == IB_QPT_GSI ||
  		    sqp->ibqp.qp_type == IB_QPT_SMI)
++<<<<<<< HEAD
 +			wc.pkey_index = swqe->ud_wr.pkey_index;
++=======
+ 			wc.pkey_index = rvt_get_swqe_pkey_index(swqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  		else
  			wc.pkey_index = sqp->s_pkey_index;
  	} else {
@@@ -283,20 -282,21 +300,34 @@@ static void hfi1_make_bth_deth(struct r
  		bth0 |= IB_BTH_SOLICITED;
  	bth0 |= extra_bytes << 20;
  	if (qp->ibqp.qp_type == IB_QPT_GSI || qp->ibqp.qp_type == IB_QPT_SMI)
++<<<<<<< HEAD
 +		*pkey = hfi1_get_pkey(ibp, wqe->ud_wr.pkey_index);
++=======
+ 		*pkey = hfi1_get_pkey(ibp, rvt_get_swqe_pkey_index(wqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	else
  		*pkey = hfi1_get_pkey(ibp, qp->s_pkey_index);
  	if (!bypass)
  		bth0 |= *pkey;
  	ohdr->bth[0] = cpu_to_be32(bth0);
++<<<<<<< HEAD
 +	ohdr->bth[1] = cpu_to_be32(wqe->ud_wr.remote_qpn);
++=======
+ 	ohdr->bth[1] = cpu_to_be32(rvt_get_swqe_remote_qpn(wqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ohdr->bth[2] = cpu_to_be32(mask_psn(wqe->psn));
  	/*
  	 * Qkeys with the high order bit set mean use the
  	 * qkey from the QP context instead of the WR (see 10.2.5).
  	 */
++<<<<<<< HEAD
 +	ohdr->u.ud.deth[0] = cpu_to_be32((int)wqe->ud_wr.remote_qkey < 0 ?
 +					 qp->qkey : wqe->ud_wr.remote_qkey);
++=======
+ 	ohdr->u.ud.deth[0] =
+ 		cpu_to_be32((int)rvt_get_swqe_remote_qkey(wqe) < 0 ? qp->qkey :
+ 			    rvt_get_swqe_remote_qkey(wqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ohdr->u.ud.deth[1] = cpu_to_be32(qp->ibqp.qp_num);
  }
  
@@@ -316,7 -316,7 +347,11 @@@ void hfi1_make_ud_req_9B(struct rvt_qp 
  
  	ibp = to_iport(qp->ibqp.device, qp->port_num);
  	ppd = ppd_from_ibp(ibp);
++<<<<<<< HEAD
 +	ah_attr = &ibah_to_rvtah(wqe->ud_wr.ah)->attr;
++=======
+ 	ah_attr = rvt_get_swqe_ah_attr(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  
  	extra_bytes = -wqe->length & 3;
  	nwords = ((wqe->length + extra_bytes) >> 2) + SIZE_OF_CRC;
@@@ -380,7 -380,7 +415,11 @@@ void hfi1_make_ud_req_16B(struct rvt_q
  	struct hfi1_pportdata *ppd;
  	struct hfi1_ibport *ibp;
  	u32 dlid, slid, nwords, extra_bytes;
++<<<<<<< HEAD
 +	u32 dest_qp = wqe->ud_wr.remote_qpn;
++=======
+ 	u32 dest_qp = rvt_get_swqe_remote_qpn(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	u32 src_qp = qp->ibqp.qp_num;
  	u16 len, pkey;
  	u8 l4, sc5;
@@@ -388,7 -388,7 +427,11 @@@
  
  	ibp = to_iport(qp->ibqp.device, qp->port_num);
  	ppd = ppd_from_ibp(ibp);
++<<<<<<< HEAD
 +	ah_attr = &ibah_to_rvtah(wqe->ud_wr.ah)->attr;
++=======
+ 	ah_attr = rvt_get_swqe_ah_attr(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  
  	/*
  	 * Build 16B Management Packet if either the destination
@@@ -450,7 -450,7 +493,11 @@@
  
  	if (is_mgmt) {
  		l4 = OPA_16B_L4_FM;
++<<<<<<< HEAD
 +		pkey = hfi1_get_pkey(ibp, wqe->ud_wr.pkey_index);
++=======
+ 		pkey = hfi1_get_pkey(ibp, rvt_get_swqe_pkey_index(wqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  		hfi1_16B_set_qpn(&ps->s_txreq->phdr.hdr.opah.u.mgmt,
  				 dest_qp, src_qp);
  	} else {
@@@ -515,7 -515,7 +562,11 @@@ int hfi1_make_ud_req(struct rvt_qp *qp
  	/* Construct the header. */
  	ibp = to_iport(qp->ibqp.device, qp->port_num);
  	ppd = ppd_from_ibp(ibp);
++<<<<<<< HEAD
 +	ah_attr = &ibah_to_rvtah(wqe->ud_wr.ah)->attr;
++=======
+ 	ah_attr = rvt_get_swqe_ah_attr(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	priv->hdr_type = hfi1_get_hdr_type(ppd->lid, ah_attr);
  	if ((!hfi1_check_mcast(rdma_ah_get_dlid(ah_attr))) ||
  	    (rdma_ah_get_dlid(ah_attr) == be32_to_cpu(OPA_LID_PERMISSIVE))) {
diff --cc drivers/infiniband/hw/qib/qib_qp.c
index a81905df2d0f,8d0563ef5be1..000000000000
--- a/drivers/infiniband/hw/qib/qib_qp.c
+++ b/drivers/infiniband/hw/qib/qib_qp.c
@@@ -398,7 -398,7 +398,11 @@@ int qib_check_send_wqe(struct rvt_qp *q
  	case IB_QPT_SMI:
  	case IB_QPT_GSI:
  	case IB_QPT_UD:
++<<<<<<< HEAD
 +		ah = ibah_to_rvtah(wqe->ud_wr.ah);
++=======
+ 		ah = rvt_get_swqe_ah(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  		if (wqe->length > (1 << ah->log_pmtu))
  			return -EINVAL;
  		/* progress hint */
diff --cc drivers/infiniband/hw/qib/qib_ud.c
index 5cdedba2d164,93ca21347959..000000000000
--- a/drivers/infiniband/hw/qib/qib_ud.c
+++ b/drivers/infiniband/hw/qib/qib_ud.c
@@@ -63,7 -64,7 +63,11 @@@ static void qib_ud_loopback(struct rvt_
  	enum ib_qp_type sqptype, dqptype;
  
  	rcu_read_lock();
++<<<<<<< HEAD
 +	qp = rvt_lookup_qpn(rdi, &ibp->rvp, swqe->ud_wr.remote_qpn);
++=======
+ 	qp = rvt_lookup_qpn(rdi, &ibp->rvp, rvt_get_swqe_remote_qpn(swqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	if (!qp) {
  		ibp->rvp.n_pkt_drops++;
  		goto drop;
@@@ -80,7 -81,7 +84,11 @@@
  		goto drop;
  	}
  
++<<<<<<< HEAD
 +	ah_attr = &ibah_to_rvtah(swqe->ud_wr.ah)->attr;
++=======
+ 	ah_attr = rvt_get_swqe_ah_attr(swqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ppd = ppd_from_ibp(ibp);
  
  	if (qp->ibqp.qp_num > 1) {
@@@ -110,8 -111,8 +118,13 @@@
  	if (qp->ibqp.qp_num) {
  		u32 qkey;
  
++<<<<<<< HEAD
 +		qkey = (int)swqe->ud_wr.remote_qkey < 0 ?
 +			sqp->qkey : swqe->ud_wr.remote_qkey;
++=======
+ 		qkey = (int)rvt_get_swqe_remote_qkey(swqe) < 0 ?
+ 			sqp->qkey : rvt_get_swqe_remote_qkey(swqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  		if (unlikely(qkey != qp->qkey))
  			goto drop;
  	}
@@@ -203,7 -204,7 +216,11 @@@
  	wc.qp = &qp->ibqp;
  	wc.src_qp = sqp->ibqp.qp_num;
  	wc.pkey_index = qp->ibqp.qp_type == IB_QPT_GSI ?
++<<<<<<< HEAD
 +		swqe->ud_wr.pkey_index : 0;
++=======
+ 		rvt_get_swqe_pkey_index(swqe) : 0;
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	wc.slid = ppd->lid | (rdma_ah_get_path_bits(ah_attr) &
  				((1 << ppd->lmc) - 1));
  	wc.sl = rdma_ah_get_sl(ah_attr);
@@@ -271,7 -271,7 +288,11 @@@ int qib_make_ud_req(struct rvt_qp *qp, 
  	/* Construct the header. */
  	ibp = to_iport(qp->ibqp.device, qp->port_num);
  	ppd = ppd_from_ibp(ibp);
++<<<<<<< HEAD
 +	ah_attr = &ibah_to_rvtah(wqe->ud_wr.ah)->attr;
++=======
+ 	ah_attr = rvt_get_swqe_ah_attr(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	if (rdma_ah_get_dlid(ah_attr) >= be16_to_cpu(IB_MULTICAST_LID_BASE)) {
  		if (rdma_ah_get_dlid(ah_attr) !=
  				be16_to_cpu(IB_LID_PERMISSIVE))
@@@ -363,7 -363,7 +384,11 @@@
  	bth0 |= extra_bytes << 20;
  	bth0 |= qp->ibqp.qp_type == IB_QPT_SMI ? QIB_DEFAULT_P_KEY :
  		qib_get_pkey(ibp, qp->ibqp.qp_type == IB_QPT_GSI ?
++<<<<<<< HEAD
 +			     wqe->ud_wr.pkey_index : qp->s_pkey_index);
++=======
+ 			     rvt_get_swqe_pkey_index(wqe) : qp->s_pkey_index);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ohdr->bth[0] = cpu_to_be32(bth0);
  	/*
  	 * Use the multicast QP if the destination LID is a multicast LID.
@@@ -372,14 -372,15 +397,24 @@@
  			be16_to_cpu(IB_MULTICAST_LID_BASE) &&
  		rdma_ah_get_dlid(ah_attr) != be16_to_cpu(IB_LID_PERMISSIVE) ?
  		cpu_to_be32(QIB_MULTICAST_QPN) :
++<<<<<<< HEAD
 +		cpu_to_be32(wqe->ud_wr.remote_qpn);
++=======
+ 		cpu_to_be32(rvt_get_swqe_remote_qpn(wqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ohdr->bth[2] = cpu_to_be32(wqe->psn & QIB_PSN_MASK);
  	/*
  	 * Qkeys with the high order bit set mean use the
  	 * qkey from the QP context instead of the WR (see 10.2.5).
  	 */
++<<<<<<< HEAD
 +	ohdr->u.ud.deth[0] = cpu_to_be32((int)wqe->ud_wr.remote_qkey < 0 ?
 +					 qp->qkey : wqe->ud_wr.remote_qkey);
++=======
+ 	ohdr->u.ud.deth[0] =
+ 		cpu_to_be32((int)rvt_get_swqe_remote_qkey(wqe) < 0 ? qp->qkey :
+ 			    rvt_get_swqe_remote_qkey(wqe));
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  	ohdr->u.ud.deth[1] = cpu_to_be32(qp->ibqp.qp_num);
  
  done:
diff --cc drivers/infiniband/sw/rdmavt/qp.c
index e6fda8da530f,11b4d3c1efd4..000000000000
--- a/drivers/infiniband/sw/rdmavt/qp.c
+++ b/drivers/infiniband/sw/rdmavt/qp.c
@@@ -1996,10 -2089,10 +1996,14 @@@ static int rvt_post_one_wr(struct rvt_q
  	 */
  	log_pmtu = qp->log_pmtu;
  	if (qp->allowed_ops == IB_OPCODE_UD) {
++<<<<<<< HEAD
 +		struct rvt_ah *ah = ibah_to_rvtah(wqe->ud_wr.ah);
++=======
+ 		struct rvt_ah *ah = rvt_get_swqe_ah(wqe);
++>>>>>>> 2b0ad2da8fd4 (IB/{rdmavt, hfi1, qib}: Add helpers to hide SWQE WR details)
  
  		log_pmtu = ah->log_pmtu;
 -		rdma_copy_ah_attr(wqe->ud_wr.attr, &ah->attr);
 +		atomic_inc(&ibah_to_rvtah(ud_wr(wr)->ah)->refcount);
  	}
  
  	if (rdi->post_parms[wr->opcode].flags & RVT_OPERATION_LOCAL) {
* Unmerged path drivers/infiniband/hw/hfi1/qp.c
* Unmerged path drivers/infiniband/hw/hfi1/ud.c
* Unmerged path drivers/infiniband/hw/qib/qib_qp.c
* Unmerged path drivers/infiniband/hw/qib/qib_ud.c
* Unmerged path drivers/infiniband/sw/rdmavt/qp.c
diff --git a/include/rdma/rdmavt_qp.h b/include/rdma/rdmavt_qp.h
index 84d0f36afc2f..0eb6e4d48f68 100644
--- a/include/rdma/rdmavt_qp.h
+++ b/include/rdma/rdmavt_qp.h
@@ -202,6 +202,56 @@ struct rvt_rwq {
 	struct rvt_rwqe wq[0];
 };
 
+/*
+ * rvt_get_swqe_ah - Return the pointer to the struct rvt_ah
+ * @swqe: valid Send WQE
+ *
+ */
+static inline struct rvt_ah *rvt_get_swqe_ah(struct rvt_swqe *swqe)
+{
+	return ibah_to_rvtah(swqe->ud_wr.wr.ah);
+}
+
+/**
+ * rvt_get_swqe_ah_attr - Return the cached ah attribute information
+ * @swqe: valid Send WQE
+ *
+ */
+static inline struct rdma_ah_attr *rvt_get_swqe_ah_attr(struct rvt_swqe *swqe)
+{
+	return swqe->ud_wr.attr;
+}
+
+/**
+ * rvt_get_swqe_remote_qpn - Access the remote QPN value
+ * @swqe: valid Send WQE
+ *
+ */
+static inline u32 rvt_get_swqe_remote_qpn(struct rvt_swqe *swqe)
+{
+	return swqe->ud_wr.wr.remote_qpn;
+}
+
+/**
+ * rvt_get_swqe_remote_qkey - Acces the remote qkey value
+ * @swqe: valid Send WQE
+ *
+ */
+static inline u32 rvt_get_swqe_remote_qkey(struct rvt_swqe *swqe)
+{
+	return swqe->ud_wr.wr.remote_qkey;
+}
+
+/**
+ * rvt_get_swqe_pkey_index - Access the pkey index
+ * @swqe: valid Send WQE
+ *
+ */
+static inline u16 rvt_get_swqe_pkey_index(struct rvt_swqe *swqe)
+{
+	return swqe->ud_wr.wr.pkey_index;
+}
+
 struct rvt_rq {
 	struct rvt_rwq *wq;
 	u32 size;               /* size of RWQE array */
