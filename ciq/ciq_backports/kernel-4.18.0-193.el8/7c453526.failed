net/mlx5e: Enable all available stats for uplink reps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Vlad Buslov <vladbu@mellanox.com>
commit 7c453526dc50460c63ff28df7673570dd057c5d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7c453526.failed

Extend stats group array of uplink representor with all stats that are
available for PF in legacy mode, besides ipsec and TLS which are not
supported.

Don't output vport stats for uplink representor because they are already
handled by 802_3 group (with different names: {tx|rx}_{bytes|packets}_phy).

	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 7c453526dc50460c63ff28df7673570dd057c5d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index e3ab7df3e76c,09061b4c43af..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -111,24 -117,71 +111,24 @@@ static const struct counter_desc vport_
  #define NUM_VPORT_REP_SW_COUNTERS ARRAY_SIZE(sw_rep_stats_desc)
  #define NUM_VPORT_REP_HW_COUNTERS ARRAY_SIZE(vport_rep_stats_desc)
  
 -static MLX5E_DECLARE_STATS_GRP_OP_NUM_STATS(sw_rep)
 -{
 -	return NUM_VPORT_REP_SW_COUNTERS;
 -}
 -
 -static MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(sw_rep)
 -{
 -	int i;
 -
 -	for (i = 0; i < NUM_VPORT_REP_SW_COUNTERS; i++)
 -		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 -		       sw_rep_stats_desc[i].format);
 -	return idx;
 -}
 -
 -static MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(sw_rep)
 -{
 -	int i;
 -
 -	for (i = 0; i < NUM_VPORT_REP_SW_COUNTERS; i++)
 -		data[idx++] = MLX5E_READ_CTR64_CPU(&priv->stats.sw,
 -						   sw_rep_stats_desc, i);
 -	return idx;
 -}
 -
 -static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(sw_rep)
 -{
 -	struct mlx5e_sw_stats *s = &priv->stats.sw;
 -	struct rtnl_link_stats64 stats64 = {};
 -
 -	memset(s, 0, sizeof(*s));
 -	mlx5e_fold_sw_stats64(priv, &stats64);
 -
 -	s->rx_packets = stats64.rx_packets;
 -	s->rx_bytes   = stats64.rx_bytes;
 -	s->tx_packets = stats64.tx_packets;
 -	s->tx_bytes   = stats64.tx_bytes;
 -	s->tx_queue_dropped = stats64.tx_dropped;
 -}
 -
 -static MLX5E_DECLARE_STATS_GRP_OP_NUM_STATS(vport_rep)
 -{
 -	return NUM_VPORT_REP_HW_COUNTERS;
 -}
 -
 -static MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(vport_rep)
 -{
 -	int i;
 -
 -	for (i = 0; i < NUM_VPORT_REP_HW_COUNTERS; i++)
 -		strcpy(data + (idx++) * ETH_GSTRING_LEN, vport_rep_stats_desc[i].format);
 -	return idx;
 -}
 -
 -static MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(vport_rep)
 +static void mlx5e_rep_get_strings(struct net_device *dev,
 +				  u32 stringset, uint8_t *data)
  {
 -	int i;
 +	int i, j;
  
 -	for (i = 0; i < NUM_VPORT_REP_HW_COUNTERS; i++)
 -		data[idx++] = MLX5E_READ_CTR64_CPU(&priv->stats.vf_vport,
 -						   vport_rep_stats_desc, i);
 -	return idx;
 +	switch (stringset) {
 +	case ETH_SS_STATS:
 +		for (i = 0; i < NUM_VPORT_REP_SW_COUNTERS; i++)
 +			strcpy(data + (i * ETH_GSTRING_LEN),
 +			       sw_rep_stats_desc[i].format);
 +		for (j = 0; j < NUM_VPORT_REP_HW_COUNTERS; j++, i++)
 +			strcpy(data + (i * ETH_GSTRING_LEN),
 +			       vport_rep_stats_desc[j].format);
 +		break;
 +	}
  }
  
- static void mlx5e_vf_rep_update_hw_counters(struct mlx5e_priv *priv)
+ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(vport_rep)
  {
  	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
  	struct mlx5e_rep_priv *rpriv = priv->ppriv;
@@@ -151,45 -204,16 +151,50 @@@
  	vport_stats->tx_bytes   = vf_stats.rx_bytes;
  }
  
++<<<<<<< HEAD
 +static void mlx5e_uplink_rep_update_hw_counters(struct mlx5e_priv *priv)
 +{
 +	struct mlx5e_pport_stats *pstats = &priv->stats.pport;
 +	struct rtnl_link_stats64 *vport_stats;
 +
 +	mlx5e_grp_802_3_update_stats(priv);
 +
 +	vport_stats = &priv->stats.vf_vport;
 +
 +	vport_stats->rx_packets = PPORT_802_3_GET(pstats, a_frames_received_ok);
 +	vport_stats->rx_bytes   = PPORT_802_3_GET(pstats, a_octets_received_ok);
 +	vport_stats->tx_packets = PPORT_802_3_GET(pstats, a_frames_transmitted_ok);
 +	vport_stats->tx_bytes   = PPORT_802_3_GET(pstats, a_octets_transmitted_ok);
 +}
 +
 +static void mlx5e_rep_update_hw_counters(struct mlx5e_priv *priv)
 +{
 +	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 +	struct mlx5_eswitch_rep *rep = rpriv->rep;
 +
 +	if (rep->vport == FDB_UPLINK_VPORT)
 +		mlx5e_uplink_rep_update_hw_counters(priv);
 +	else
 +		mlx5e_vf_rep_update_hw_counters(priv);
 +}
 +
 +static void mlx5e_rep_update_sw_counters(struct mlx5e_priv *priv)
++=======
+ static void mlx5e_rep_get_strings(struct net_device *dev,
+ 				  u32 stringset, uint8_t *data)
++>>>>>>> 7c453526dc50 (net/mlx5e: Enable all available stats for uplink reps)
  {
 -	struct mlx5e_priv *priv = netdev_priv(dev);
 +	struct mlx5e_sw_stats *s = &priv->stats.sw;
 +	struct rtnl_link_stats64 stats64 = {};
  
 -	switch (stringset) {
 -	case ETH_SS_STATS:
 -		mlx5e_stats_fill_strings(priv, data);
 -		break;
 -	}
 +	memset(s, 0, sizeof(*s));
 +	mlx5e_fold_sw_stats64(priv, &stats64);
 +
 +	s->rx_packets = stats64.rx_packets;
 +	s->rx_bytes   = stats64.rx_bytes;
 +	s->tx_packets = stats64.tx_packets;
 +	s->tx_bytes   = stats64.tx_bytes;
 +	s->tx_queue_dropped = stats64.tx_dropped;
  }
  
  static void mlx5e_rep_get_ethtool_stats(struct net_device *dev,
@@@ -1756,7 -1866,44 +1761,48 @@@ static void mlx5e_uplink_rep_disable(st
  	mlx5_lag_remove(mdev);
  }
  
++<<<<<<< HEAD
 +static const struct mlx5e_profile mlx5e_vf_rep_profile = {
++=======
+ static MLX5E_DEFINE_STATS_GRP(sw_rep, 0);
+ static MLX5E_DEFINE_STATS_GRP(vport_rep, MLX5E_NDO_UPDATE_STATS);
+ 
+ /* The stats groups order is opposite to the update_stats() order calls */
+ static mlx5e_stats_grp_t mlx5e_rep_stats_grps[] = {
+ 	&MLX5E_STATS_GRP(sw_rep),
+ 	&MLX5E_STATS_GRP(vport_rep),
+ };
+ 
+ static unsigned int mlx5e_rep_stats_grps_num(struct mlx5e_priv *priv)
+ {
+ 	return ARRAY_SIZE(mlx5e_rep_stats_grps);
+ }
+ 
+ /* The stats groups order is opposite to the update_stats() order calls */
+ static mlx5e_stats_grp_t mlx5e_ul_rep_stats_grps[] = {
+ 	&MLX5E_STATS_GRP(sw),
+ 	&MLX5E_STATS_GRP(qcnt),
+ 	&MLX5E_STATS_GRP(vnic_env),
+ 	&MLX5E_STATS_GRP(vport),
+ 	&MLX5E_STATS_GRP(802_3),
+ 	&MLX5E_STATS_GRP(2863),
+ 	&MLX5E_STATS_GRP(2819),
+ 	&MLX5E_STATS_GRP(phy),
+ 	&MLX5E_STATS_GRP(eth_ext),
+ 	&MLX5E_STATS_GRP(pcie),
+ 	&MLX5E_STATS_GRP(per_prio),
+ 	&MLX5E_STATS_GRP(pme),
+ 	&MLX5E_STATS_GRP(channels),
+ 	&MLX5E_STATS_GRP(per_port_buff_congest),
+ };
+ 
+ static unsigned int mlx5e_ul_rep_stats_grps_num(struct mlx5e_priv *priv)
+ {
+ 	return ARRAY_SIZE(mlx5e_ul_rep_stats_grps);
+ }
+ 
+ static const struct mlx5e_profile mlx5e_rep_profile = {
++>>>>>>> 7c453526dc50 (net/mlx5e: Enable all available stats for uplink reps)
  	.init			= mlx5e_init_rep,
  	.cleanup		= mlx5e_cleanup_rep,
  	.init_rx		= mlx5e_init_rep_rx,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index f68b345df892,30b216d9284c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -504,7 -630,7 +504,11 @@@ static int mlx5e_grp_802_3_fill_stats(s
  #define MLX5_BASIC_PPCNT_SUPPORTED(mdev) \
  	(MLX5_CAP_GEN(mdev, pcam_reg) ? MLX5_CAP_PCAM_REG(mdev, ppcnt) : 1)
  
++<<<<<<< HEAD
 +void mlx5e_grp_802_3_update_stats(struct mlx5e_priv *priv)
++=======
+ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(802_3)
++>>>>>>> 7c453526dc50 (net/mlx5e: Enable all available stats for uplink reps)
  {
  	struct mlx5e_pport_stats *pstats = &priv->stats.pport;
  	struct mlx5_core_dev *mdev = priv->mdev;
@@@ -1519,104 -1698,46 +1523,126 @@@ static int mlx5e_grp_channels_fill_stat
  	return idx;
  }
  
++<<<<<<< HEAD
++=======
+ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(channels) { return; }
+ 
+ MLX5E_DEFINE_STATS_GRP(sw, 0);
+ MLX5E_DEFINE_STATS_GRP(qcnt, MLX5E_NDO_UPDATE_STATS);
+ MLX5E_DEFINE_STATS_GRP(vnic_env, 0);
+ MLX5E_DEFINE_STATS_GRP(vport, MLX5E_NDO_UPDATE_STATS);
+ MLX5E_DEFINE_STATS_GRP(802_3, MLX5E_NDO_UPDATE_STATS);
+ MLX5E_DEFINE_STATS_GRP(2863, 0);
+ MLX5E_DEFINE_STATS_GRP(2819, 0);
+ MLX5E_DEFINE_STATS_GRP(phy, 0);
+ MLX5E_DEFINE_STATS_GRP(pcie, 0);
+ MLX5E_DEFINE_STATS_GRP(per_prio, 0);
+ MLX5E_DEFINE_STATS_GRP(pme, 0);
+ MLX5E_DEFINE_STATS_GRP(channels, 0);
+ MLX5E_DEFINE_STATS_GRP(per_port_buff_congest, 0);
+ MLX5E_DEFINE_STATS_GRP(eth_ext, 0);
+ static MLX5E_DEFINE_STATS_GRP(ipsec, 0);
+ static MLX5E_DEFINE_STATS_GRP(tls, 0);
+ 
++>>>>>>> 7c453526dc50 (net/mlx5e: Enable all available stats for uplink reps)
  /* The stats groups order is opposite to the update_stats() order calls */
 -mlx5e_stats_grp_t mlx5e_nic_stats_grps[] = {
 -	&MLX5E_STATS_GRP(sw),
 -	&MLX5E_STATS_GRP(qcnt),
 -	&MLX5E_STATS_GRP(vnic_env),
 -	&MLX5E_STATS_GRP(vport),
 -	&MLX5E_STATS_GRP(802_3),
 -	&MLX5E_STATS_GRP(2863),
 -	&MLX5E_STATS_GRP(2819),
 -	&MLX5E_STATS_GRP(phy),
 -	&MLX5E_STATS_GRP(eth_ext),
 -	&MLX5E_STATS_GRP(pcie),
 -	&MLX5E_STATS_GRP(per_prio),
 -	&MLX5E_STATS_GRP(pme),
 -	&MLX5E_STATS_GRP(ipsec),
 -	&MLX5E_STATS_GRP(tls),
 -	&MLX5E_STATS_GRP(channels),
 -	&MLX5E_STATS_GRP(per_port_buff_congest),
 +const struct mlx5e_stats_grp mlx5e_stats_grps[] = {
 +	{
 +		.get_num_stats = mlx5e_grp_sw_get_num_stats,
 +		.fill_strings = mlx5e_grp_sw_fill_strings,
 +		.fill_stats = mlx5e_grp_sw_fill_stats,
 +		.update_stats = mlx5e_grp_sw_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_q_get_num_stats,
 +		.fill_strings = mlx5e_grp_q_fill_strings,
 +		.fill_stats = mlx5e_grp_q_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_q_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_vnic_env_get_num_stats,
 +		.fill_strings = mlx5e_grp_vnic_env_fill_strings,
 +		.fill_stats = mlx5e_grp_vnic_env_fill_stats,
 +		.update_stats = mlx5e_grp_vnic_env_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_vport_get_num_stats,
 +		.fill_strings = mlx5e_grp_vport_fill_strings,
 +		.fill_stats = mlx5e_grp_vport_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_vport_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_802_3_get_num_stats,
 +		.fill_strings = mlx5e_grp_802_3_fill_strings,
 +		.fill_stats = mlx5e_grp_802_3_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_802_3_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_2863_get_num_stats,
 +		.fill_strings = mlx5e_grp_2863_fill_strings,
 +		.fill_stats = mlx5e_grp_2863_fill_stats,
 +		.update_stats = mlx5e_grp_2863_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_2819_get_num_stats,
 +		.fill_strings = mlx5e_grp_2819_fill_strings,
 +		.fill_stats = mlx5e_grp_2819_fill_stats,
 +		.update_stats = mlx5e_grp_2819_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_phy_get_num_stats,
 +		.fill_strings = mlx5e_grp_phy_fill_strings,
 +		.fill_stats = mlx5e_grp_phy_fill_stats,
 +		.update_stats = mlx5e_grp_phy_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_eth_ext_get_num_stats,
 +		.fill_strings = mlx5e_grp_eth_ext_fill_strings,
 +		.fill_stats = mlx5e_grp_eth_ext_fill_stats,
 +		.update_stats = mlx5e_grp_eth_ext_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_pcie_get_num_stats,
 +		.fill_strings = mlx5e_grp_pcie_fill_strings,
 +		.fill_stats = mlx5e_grp_pcie_fill_stats,
 +		.update_stats = mlx5e_grp_pcie_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_per_prio_get_num_stats,
 +		.fill_strings = mlx5e_grp_per_prio_fill_strings,
 +		.fill_stats = mlx5e_grp_per_prio_fill_stats,
 +		.update_stats = mlx5e_grp_per_prio_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_pme_get_num_stats,
 +		.fill_strings = mlx5e_grp_pme_fill_strings,
 +		.fill_stats = mlx5e_grp_pme_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_ipsec_get_num_stats,
 +		.fill_strings = mlx5e_grp_ipsec_fill_strings,
 +		.fill_stats = mlx5e_grp_ipsec_fill_stats,
 +		.update_stats = mlx5e_grp_ipsec_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_tls_get_num_stats,
 +		.fill_strings = mlx5e_grp_tls_fill_strings,
 +		.fill_stats = mlx5e_grp_tls_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_channels_get_num_stats,
 +		.fill_strings = mlx5e_grp_channels_fill_strings,
 +		.fill_stats = mlx5e_grp_channels_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_per_port_buffer_congest_get_num_stats,
 +		.fill_strings = mlx5e_grp_per_port_buffer_congest_fill_strings,
 +		.fill_stats = mlx5e_grp_per_port_buffer_congest_fill_stats,
 +		.update_stats = mlx5e_grp_per_port_buffer_congest_update_stats,
 +	},
  };
  
 -unsigned int mlx5e_nic_stats_grps_num(struct mlx5e_priv *priv)
 -{
 -	return ARRAY_SIZE(mlx5e_nic_stats_grps);
 -}
 +const int mlx5e_num_stats_grps = ARRAY_SIZE(mlx5e_stats_grps);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 1e151c97c07b,092b39ffa32a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -271,22 -373,22 +271,39 @@@ struct mlx5e_stats 
  	struct mlx5e_pcie_stats pcie;
  };
  
 -extern mlx5e_stats_grp_t mlx5e_nic_stats_grps[];
 -unsigned int mlx5e_nic_stats_grps_num(struct mlx5e_priv *priv);
 +enum {
 +	MLX5E_NDO_UPDATE_STATS = BIT(0x1),
 +};
 +
++<<<<<<< HEAD
 +struct mlx5e_priv;
 +struct mlx5e_stats_grp {
 +	u16 update_stats_mask;
 +	int (*get_num_stats)(struct mlx5e_priv *priv);
 +	int (*fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx);
 +	int (*fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx);
 +	void (*update_stats)(struct mlx5e_priv *priv);
 +};
 +
 +extern const struct mlx5e_stats_grp mlx5e_stats_grps[];
 +extern const int mlx5e_num_stats_grps;
  
 +void mlx5e_grp_802_3_update_stats(struct mlx5e_priv *priv);
++=======
+ extern MLX5E_DECLARE_STATS_GRP(sw);
+ extern MLX5E_DECLARE_STATS_GRP(qcnt);
+ extern MLX5E_DECLARE_STATS_GRP(vnic_env);
+ extern MLX5E_DECLARE_STATS_GRP(vport);
+ extern MLX5E_DECLARE_STATS_GRP(802_3);
+ extern MLX5E_DECLARE_STATS_GRP(2863);
+ extern MLX5E_DECLARE_STATS_GRP(2819);
+ extern MLX5E_DECLARE_STATS_GRP(phy);
+ extern MLX5E_DECLARE_STATS_GRP(eth_ext);
+ extern MLX5E_DECLARE_STATS_GRP(pcie);
+ extern MLX5E_DECLARE_STATS_GRP(per_prio);
+ extern MLX5E_DECLARE_STATS_GRP(pme);
+ extern MLX5E_DECLARE_STATS_GRP(channels);
+ extern MLX5E_DECLARE_STATS_GRP(per_port_buff_congest);
++>>>>>>> 7c453526dc50 (net/mlx5e: Enable all available stats for uplink reps)
  
  #endif /* __MLX5_EN_STATS_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
