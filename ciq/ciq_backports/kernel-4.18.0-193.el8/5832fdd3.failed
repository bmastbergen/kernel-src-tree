IB/mlx5: DEVX cleanup mdev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 5832fdd35e61bf4793da0f0480fb873af645a7b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5832fdd3.failed

No need any more to hold mlx5_core_dev on the devx_object, it can be
accessed from ib_dev.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 5832fdd35e61bf4793da0f0480fb873af645a7b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/devx.c
diff --cc drivers/infiniband/hw/mlx5/devx.c
index b9841ad6052e,e69a8693f102..000000000000
--- a/drivers/infiniband/hw/mlx5/devx.c
+++ b/drivers/infiniband/hw/mlx5/devx.c
@@@ -24,7 -91,7 +24,11 @@@ enum devx_obj_flags 
  
  #define MLX5_MAX_DESTROY_INBOX_SIZE_DW MLX5_ST_SZ_DW(delete_fte_in)
  struct devx_obj {
++<<<<<<< HEAD
 +	struct mlx5_core_dev	*mdev;
++=======
+ 	struct mlx5_ib_dev	*ib_dev;
++>>>>>>> 5832fdd35e61 (IB/mlx5: DEVX cleanup mdev)
  	u64			obj_id;
  	u32			dinlen; /* destroy inbox length */
  	u32			dinbox[MLX5_MAX_DESTROY_INBOX_SIZE_DW];
@@@ -1114,10 -1339,12 +1118,16 @@@ static int devx_obj_cleanup(struct ib_u
  		devx_cleanup_mkey(obj);
  
  	if (obj->flags & DEVX_OBJ_FLAGS_DCT)
++<<<<<<< HEAD
 +		ret = mlx5_core_destroy_dct(obj->mdev, &obj->core_dct);
++=======
+ 		ret = mlx5_core_destroy_dct(obj->ib_dev->mdev, &obj->core_dct);
+ 	else if (obj->flags & DEVX_OBJ_FLAGS_CQ)
+ 		ret = mlx5_core_destroy_cq(obj->ib_dev->mdev, &obj->core_cq);
++>>>>>>> 5832fdd35e61 (IB/mlx5: DEVX cleanup mdev)
  	else
- 		ret = mlx5_cmd_exec(obj->mdev, obj->dinbox, obj->dinlen, out,
- 				    sizeof(out));
+ 		ret = mlx5_cmd_exec(obj->ib_dev->mdev, obj->dinbox,
+ 				    obj->dinlen, out, sizeof(out));
  	if (ib_is_destroy_retryable(ret, why, uobject))
  		return ret;
  
@@@ -1193,7 -1455,8 +1203,12 @@@ static int UVERBS_HANDLER(MLX5_IB_METHO
  		goto obj_free;
  
  	uobj->object = obj;
++<<<<<<< HEAD
 +	obj->mdev = dev->mdev;
++=======
+ 	INIT_LIST_HEAD(&obj->event_sub);
+ 	obj->ib_dev = dev;
++>>>>>>> 5832fdd35e61 (IB/mlx5: DEVX cleanup mdev)
  	devx_obj_build_destroy_cmd(cmd_in, cmd_out, obj->dinbox, &obj->dinlen,
  				   &obj_id);
  	WARN_ON(obj->dinlen > MLX5_MAX_DESTROY_INBOX_SIZE_DW * sizeof(u32));
@@@ -1220,9 -1483,11 +1235,15 @@@ err_copy
  		devx_cleanup_mkey(obj);
  obj_destroy:
  	if (obj->flags & DEVX_OBJ_FLAGS_DCT)
++<<<<<<< HEAD
 +		mlx5_core_destroy_dct(obj->mdev, &obj->core_dct);
++=======
+ 		mlx5_core_destroy_dct(obj->ib_dev->mdev, &obj->core_dct);
+ 	else if (obj->flags & DEVX_OBJ_FLAGS_CQ)
+ 		mlx5_core_destroy_cq(obj->ib_dev->mdev, &obj->core_cq);
++>>>>>>> 5832fdd35e61 (IB/mlx5: DEVX cleanup mdev)
  	else
- 		mlx5_cmd_exec(obj->mdev, obj->dinbox, obj->dinlen, out,
+ 		mlx5_cmd_exec(obj->ib_dev->mdev, obj->dinbox, obj->dinlen, out,
  			      sizeof(out));
  obj_free:
  	kfree(obj);
* Unmerged path drivers/infiniband/hw/mlx5/devx.c
