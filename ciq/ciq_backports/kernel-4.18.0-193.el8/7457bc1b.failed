HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [hid] logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports (Benjamin Tissoires) [1740778]
Rebuild_FUZZ: 96.50%
commit-author Hans de Goede <hdegoede@redhat.com>
commit 7457bc1b0ebf30d98ce993ec876a5ab2b143539d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7457bc1b.failed

Some mice have extra buttons which are only reported through HID++ 1.0
extra mouse buttons reports, this commit adds support for this and
automatically enables this support for all 27 MHz mice.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
(cherry picked from commit 7457bc1b0ebf30d98ce993ec876a5ab2b143539d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-logitech-hidpp.c
diff --cc drivers/hid/hid-logitech-hidpp.c
index 844711d5f9a8,215c3a256c27..000000000000
--- a/drivers/hid/hid-logitech-hidpp.c
+++ b/drivers/hid/hid-logitech-hidpp.c
@@@ -67,6 -71,12 +67,15 @@@ MODULE_PARM_DESC(disable_tap_to_click
  #define HIDPP_QUIRK_HI_RES_SCROLL_1P0		BIT(26)
  #define HIDPP_QUIRK_HI_RES_SCROLL_X2120		BIT(27)
  #define HIDPP_QUIRK_HI_RES_SCROLL_X2121		BIT(28)
++<<<<<<< HEAD
++=======
+ #define HIDPP_QUIRK_HIDPP_WHEELS		BIT(29)
+ #define HIDPP_QUIRK_HIDPP_EXTRA_MOUSE_BTNS	BIT(30)
+ 
+ /* These are just aliases for now */
+ #define HIDPP_QUIRK_KBD_SCROLL_WHEEL HIDPP_QUIRK_HIDPP_WHEELS
+ #define HIDPP_QUIRK_KBD_ZOOM_WHEEL   HIDPP_QUIRK_HIDPP_WHEELS
++>>>>>>> 7457bc1b0ebf (HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports)
  
  /* Convenience constant to check for any high-res support. */
  #define HIDPP_QUIRK_HI_RES_SCROLL	(HIDPP_QUIRK_HI_RES_SCROLL_1P0 | \
@@@ -2677,6 -2748,110 +2686,113 @@@ static int g920_get_config(struct hidpp
  }
  
  /* -------------------------------------------------------------------------- */
++<<<<<<< HEAD
++=======
+ /* HID++1.0 devices which use HID++ reports for their wheels                  */
+ /* -------------------------------------------------------------------------- */
+ static int hidpp10_wheel_connect(struct hidpp_device *hidpp)
+ {
+ 	return hidpp10_set_register(hidpp, HIDPP_REG_ENABLE_REPORTS, 0,
+ 			HIDPP_ENABLE_WHEEL_REPORT | HIDPP_ENABLE_HWHEEL_REPORT,
+ 			HIDPP_ENABLE_WHEEL_REPORT | HIDPP_ENABLE_HWHEEL_REPORT);
+ }
+ 
+ static int hidpp10_wheel_raw_event(struct hidpp_device *hidpp,
+ 				   u8 *data, int size)
+ {
+ 	s8 value, hvalue;
+ 
+ 	if (!hidpp->input)
+ 		return -EINVAL;
+ 
+ 	if (size < 7)
+ 		return 0;
+ 
+ 	if (data[0] != REPORT_ID_HIDPP_SHORT || data[2] != HIDPP_SUB_ID_ROLLER)
+ 		return 0;
+ 
+ 	value = data[3];
+ 	hvalue = data[4];
+ 
+ 	input_report_rel(hidpp->input, REL_WHEEL, value);
+ 	input_report_rel(hidpp->input, REL_WHEEL_HI_RES, value * 120);
+ 	input_report_rel(hidpp->input, REL_HWHEEL, hvalue);
+ 	input_report_rel(hidpp->input, REL_HWHEEL_HI_RES, hvalue * 120);
+ 	input_sync(hidpp->input);
+ 
+ 	return 1;
+ }
+ 
+ static void hidpp10_wheel_populate_input(struct hidpp_device *hidpp,
+ 					 struct input_dev *input_dev)
+ {
+ 	__set_bit(EV_REL, input_dev->evbit);
+ 	__set_bit(REL_WHEEL, input_dev->relbit);
+ 	__set_bit(REL_WHEEL_HI_RES, input_dev->relbit);
+ 	__set_bit(REL_HWHEEL, input_dev->relbit);
+ 	__set_bit(REL_HWHEEL_HI_RES, input_dev->relbit);
+ }
+ 
+ /* -------------------------------------------------------------------------- */
+ /* HID++1.0 mice which use HID++ reports for extra mouse buttons              */
+ /* -------------------------------------------------------------------------- */
+ static int hidpp10_extra_mouse_buttons_connect(struct hidpp_device *hidpp)
+ {
+ 	return hidpp10_set_register(hidpp, HIDPP_REG_ENABLE_REPORTS, 0,
+ 				    HIDPP_ENABLE_MOUSE_EXTRA_BTN_REPORT,
+ 				    HIDPP_ENABLE_MOUSE_EXTRA_BTN_REPORT);
+ }
+ 
+ static int hidpp10_extra_mouse_buttons_raw_event(struct hidpp_device *hidpp,
+ 				    u8 *data, int size)
+ {
+ 	int i;
+ 
+ 	if (!hidpp->input)
+ 		return -EINVAL;
+ 
+ 	if (size < 7)
+ 		return 0;
+ 
+ 	if (data[0] != REPORT_ID_HIDPP_SHORT ||
+ 	    data[2] != HIDPP_SUB_ID_MOUSE_EXTRA_BTNS)
+ 		return 0;
+ 
+ 	/*
+ 	 * Buttons are either delivered through the regular mouse report *or*
+ 	 * through the extra buttons report. At least for button 6 how it is
+ 	 * delivered differs per receiver firmware version. Even receivers with
+ 	 * the same usb-id show different behavior, so we handle both cases.
+ 	 */
+ 	for (i = 0; i < 8; i++)
+ 		input_report_key(hidpp->input, BTN_MOUSE + i,
+ 				 (data[3] & (1 << i)));
+ 
+ 	/* Some mice report events on button 9+, use BTN_MISC */
+ 	for (i = 0; i < 8; i++)
+ 		input_report_key(hidpp->input, BTN_MISC + i,
+ 				 (data[4] & (1 << i)));
+ 
+ 	input_sync(hidpp->input);
+ 	return 1;
+ }
+ 
+ static void hidpp10_extra_mouse_buttons_populate_input(
+ 			struct hidpp_device *hidpp, struct input_dev *input_dev)
+ {
+ 	/* BTN_MOUSE - BTN_MOUSE+7 are set already by the descriptor */
+ 	__set_bit(BTN_0, input_dev->keybit);
+ 	__set_bit(BTN_1, input_dev->keybit);
+ 	__set_bit(BTN_2, input_dev->keybit);
+ 	__set_bit(BTN_3, input_dev->keybit);
+ 	__set_bit(BTN_4, input_dev->keybit);
+ 	__set_bit(BTN_5, input_dev->keybit);
+ 	__set_bit(BTN_6, input_dev->keybit);
+ 	__set_bit(BTN_7, input_dev->keybit);
+ }
+ 
+ /* -------------------------------------------------------------------------- */
++>>>>>>> 7457bc1b0ebf (HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports)
  /* High-resolution scroll wheels                                              */
  /* -------------------------------------------------------------------------- */
  
@@@ -2782,17 -2927,20 +2898,25 @@@ static int hidpp_input_mapped(struct hi
  
  
  static void hidpp_populate_input(struct hidpp_device *hidpp,
 -				 struct input_dev *input)
 +		struct input_dev *input, bool origin_is_hid_core)
  {
 -	hidpp->input = input;
 -
  	if (hidpp->quirks & HIDPP_QUIRK_CLASS_WTP)
 -		wtp_populate_input(hidpp, input);
 +		wtp_populate_input(hidpp, input, origin_is_hid_core);
  	else if (hidpp->quirks & HIDPP_QUIRK_CLASS_M560)
 -		m560_populate_input(hidpp, input);
 +		m560_populate_input(hidpp, input, origin_is_hid_core);
  
++<<<<<<< HEAD
 +	if (hidpp->quirks & HIDPP_QUIRK_HI_RES_SCROLL) {
 +		input_set_capability(input, EV_REL, REL_WHEEL_HI_RES);
 +		hidpp->vertical_wheel_counter.dev = input;
 +	}
++=======
+ 	if (hidpp->quirks & HIDPP_QUIRK_HIDPP_WHEELS)
+ 		hidpp10_wheel_populate_input(hidpp, input);
+ 
+ 	if (hidpp->quirks & HIDPP_QUIRK_HIDPP_EXTRA_MOUSE_BTNS)
+ 		hidpp10_extra_mouse_buttons_populate_input(hidpp, input);
++>>>>>>> 7457bc1b0ebf (HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports)
  }
  
  static int hidpp_input_configured(struct hid_device *hdev,
@@@ -2861,6 -3012,18 +2985,21 @@@ static int hidpp_raw_hidpp_event(struc
  			return ret;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (hidpp->quirks & HIDPP_QUIRK_HIDPP_WHEELS) {
+ 		ret = hidpp10_wheel_raw_event(hidpp, data, size);
+ 		if (ret != 0)
+ 			return ret;
+ 	}
+ 
+ 	if (hidpp->quirks & HIDPP_QUIRK_HIDPP_EXTRA_MOUSE_BTNS) {
+ 		ret = hidpp10_extra_mouse_buttons_raw_event(hidpp, data, size);
+ 		if (ret != 0)
+ 			return ret;
+ 	}
+ 
++>>>>>>> 7457bc1b0ebf (HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports)
  	return 0;
  }
  
@@@ -3100,6 -3271,18 +3239,21 @@@ static void hidpp_connect_event(struct 
  			return;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (hidpp->quirks & HIDPP_QUIRK_HIDPP_WHEELS) {
+ 		ret = hidpp10_wheel_connect(hidpp);
+ 		if (ret)
+ 			return;
+ 	}
+ 
+ 	if (hidpp->quirks & HIDPP_QUIRK_HIDPP_EXTRA_MOUSE_BTNS) {
+ 		ret = hidpp10_extra_mouse_buttons_connect(hidpp);
+ 		if (ret)
+ 			return;
+ 	}
+ 
++>>>>>>> 7457bc1b0ebf (HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports)
  	/* the device is already connected, we can ask for its name and
  	 * protocol */
  	if (!hidpp->protocol_major) {
@@@ -3192,6 -3441,16 +3346,14 @@@ static int hidpp_probe(struct hid_devic
  	if (id->group == HID_GROUP_LOGITECH_DJ_DEVICE)
  		hidpp->quirks |= HIDPP_QUIRK_UNIFYING;
  
++<<<<<<< HEAD
++=======
+ 	if (id->group == HID_GROUP_LOGITECH_27MHZ_DEVICE &&
+ 	    hidpp_application_equals(hdev, HID_GD_MOUSE))
+ 		hidpp->quirks |= HIDPP_QUIRK_HIDPP_WHEELS |
+ 				 HIDPP_QUIRK_HIDPP_EXTRA_MOUSE_BTNS;
+ 
++>>>>>>> 7457bc1b0ebf (HID: logitech-hidpp: add support for HID++ 1.0 extra mouse buttons reports)
  	if (disable_raw_mode) {
  		hidpp->quirks &= ~HIDPP_QUIRK_CLASS_WTP;
  		hidpp->quirks &= ~HIDPP_QUIRK_NO_HIDINPUT;
* Unmerged path drivers/hid/hid-logitech-hidpp.c
