RDMA/cxgb3: Use sizeof() notation instead of plain sizeof

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit d34d37d5a102a016c63f904d1ff0284637759cc2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d34d37d5.failed

sizeof(a), sizeof a and sizeof (a) are all valid notations, but first is
more readable format recommended by checkpatch.pl.

Let's canonize it in cxgb3 drivers, so latter patches won't emit
checkpatch warnings. As part of this change, a redundant memset() was
removed.

	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit d34d37d5a102a016c63f904d1ff0284637759cc2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/cxgb3/iwch_provider.c
diff --cc drivers/infiniband/hw/cxgb3/iwch_provider.c
index 19e9772c2181,82669c254b3f..000000000000
--- a/drivers/infiniband/hw/cxgb3/iwch_provider.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_provider.c
@@@ -130,10 -125,9 +130,10 @@@ static struct ib_cq *iwch_create_cq(str
  	if (!chp)
  		return ERR_PTR(-ENOMEM);
  
 -	if (udata) {
 +	if (ib_context) {
 +		ucontext = to_iwch_ucontext(ib_context);
  		if (!t3a_device(rhp)) {
- 			if (ib_copy_from_udata(&ureq, udata, sizeof (ureq))) {
+ 			if (ib_copy_from_udata(&ureq, udata, sizeof(ureq))) {
  				kfree(chp);
  				return ERR_PTR(-EFAULT);
  			}
@@@ -173,12 -167,14 +173,12 @@@
  		return ERR_PTR(-ENOMEM);
  	}
  
 -	if (udata) {
 +	if (ucontext) {
  		struct iwch_mm_entry *mm;
 -		struct iwch_ucontext *ucontext = rdma_udata_to_drv_context(
 -			udata, struct iwch_ucontext, ibucontext);
  
- 		mm = kmalloc(sizeof *mm, GFP_KERNEL);
+ 		mm = kmalloc(sizeof(*mm), GFP_KERNEL);
  		if (!mm) {
 -			iwch_destroy_cq(&chp->ibcq, udata);
 +			iwch_destroy_cq(&chp->ibcq);
  			return ERR_PTR(-ENOMEM);
  		}
  		uresp.cqid = chp->cq.cqid;
@@@ -598,8 -587,8 +598,13 @@@ pbl_done
  		pr_debug("%s user resp pbl_addr 0x%x\n", __func__,
  			 uresp.pbl_addr);
  
++<<<<<<< HEAD
 +		if (ib_copy_to_udata(udata, &uresp, sizeof (uresp))) {
 +			iwch_dereg_mr(&mhp->ibmr);
++=======
+ 		if (ib_copy_to_udata(udata, &uresp, sizeof(uresp))) {
+ 			iwch_dereg_mr(&mhp->ibmr, udata);
++>>>>>>> d34d37d5a102 (RDMA/cxgb3: Use sizeof() notation instead of plain sizeof)
  			err = -EFAULT;
  			goto err;
  		}
@@@ -891,16 -880,16 +896,16 @@@ static struct ib_qp *iwch_create_qp(str
  
  		struct iwch_mm_entry *mm1, *mm2;
  
- 		mm1 = kmalloc(sizeof *mm1, GFP_KERNEL);
+ 		mm1 = kmalloc(sizeof(*mm1), GFP_KERNEL);
  		if (!mm1) {
 -			iwch_destroy_qp(&qhp->ibqp, udata);
 +			iwch_destroy_qp(&qhp->ibqp);
  			return ERR_PTR(-ENOMEM);
  		}
  
- 		mm2 = kmalloc(sizeof *mm2, GFP_KERNEL);
+ 		mm2 = kmalloc(sizeof(*mm2), GFP_KERNEL);
  		if (!mm2) {
  			kfree(mm1);
 -			iwch_destroy_qp(&qhp->ibqp, udata);
 +			iwch_destroy_qp(&qhp->ibqp);
  			return ERR_PTR(-ENOMEM);
  		}
  
@@@ -914,10 -903,10 +919,10 @@@
  		uresp.db_key = ucontext->key;
  		ucontext->key += PAGE_SIZE;
  		spin_unlock(&ucontext->mmap_lock);
- 		if (ib_copy_to_udata(udata, &uresp, sizeof (uresp))) {
+ 		if (ib_copy_to_udata(udata, &uresp, sizeof(uresp))) {
  			kfree(mm1);
  			kfree(mm2);
 -			iwch_destroy_qp(&qhp->ibqp, udata);
 +			iwch_destroy_qp(&qhp->ibqp);
  			return ERR_PTR(-EFAULT);
  		}
  		mm1->key = uresp.key;
diff --git a/drivers/infiniband/hw/cxgb3/cxio_hal.c b/drivers/infiniband/hw/cxgb3/cxio_hal.c
index dcb4bba522ba..0287482d14f3 100644
--- a/drivers/infiniband/hw/cxgb3/cxio_hal.c
+++ b/drivers/infiniband/hw/cxgb3/cxio_hal.c
@@ -219,7 +219,7 @@ static u32 get_qpid(struct cxio_rdev *rdev_p, struct cxio_ucontext *uctx)
 		if (!qpid)
 			goto out;
 		for (i = qpid+1; i & rdev_p->qpmask; i++) {
-			entry = kmalloc(sizeof *entry, GFP_KERNEL);
+			entry = kmalloc(sizeof(*entry), GFP_KERNEL);
 			if (!entry)
 				break;
 			entry->qpid = i;
@@ -237,7 +237,7 @@ static void put_qpid(struct cxio_rdev *rdev_p, u32 qpid,
 {
 	struct cxio_qpid_list *entry;
 
-	entry = kmalloc(sizeof *entry, GFP_KERNEL);
+	entry = kmalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
 		return;
 	pr_debug("%s qpid 0x%x\n", __func__, qpid);
diff --git a/drivers/infiniband/hw/cxgb3/iwch_cm.c b/drivers/infiniband/hw/cxgb3/iwch_cm.c
index 1c90c86fc8b8..0bca72cb4d9a 100644
--- a/drivers/infiniband/hw/cxgb3/iwch_cm.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_cm.c
@@ -170,7 +170,7 @@ static void release_tid(struct t3cdev *tdev, u32 hwtid, struct sk_buff *skb)
 {
 	struct cpl_tid_release *req;
 
-	skb = get_skb(skb, sizeof *req, GFP_KERNEL);
+	skb = get_skb(skb, sizeof(*req), GFP_KERNEL);
 	if (!skb)
 		return;
 	req = skb_put(skb, sizeof(*req));
* Unmerged path drivers/infiniband/hw/cxgb3/iwch_provider.c
