iommu: Introduce iommu_iotlb_gather_add_page()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Will Deacon <will@kernel.org>
commit 4fcf8544fc677fc8af135f1d86b3ba69c4ad429d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4fcf8544.failed

Introduce a helper function for drivers to use when updating an
iommu_iotlb_gather structure in response to an ->unmap() call, rather
than having to open-code the logic in every page-table implementation.

	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 4fcf8544fc677fc8af135f1d86b3ba69c4ad429d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/iommu.h
diff --cc include/linux/iommu.h
index ebdb739eccf2,ad41aee55bc6..000000000000
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@@ -367,8 -503,35 +367,33 @@@ static inline void iommu_tlb_sync(struc
  {
  	if (domain->ops->iotlb_sync)
  		domain->ops->iotlb_sync(domain);
 -
 -	iommu_iotlb_gather_init(iotlb_gather);
  }
  
+ static inline void iommu_iotlb_gather_add_page(struct iommu_domain *domain,
+ 					       struct iommu_iotlb_gather *gather,
+ 					       unsigned long iova, size_t size)
+ {
+ 	unsigned long start = iova, end = start + size;
+ 
+ 	/*
+ 	 * If the new page is disjoint from the current range or is mapped at
+ 	 * a different granularity, then sync the TLB so that the gather
+ 	 * structure can be rewritten.
+ 	 */
+ 	if (gather->pgsize != size ||
+ 	    end < gather->start || start > gather->end) {
+ 		if (gather->pgsize)
+ 			iommu_tlb_sync(domain, gather);
+ 		gather->pgsize = size;
+ 	}
+ 
+ 	if (gather->end < end)
+ 		gather->end = end;
+ 
+ 	if (gather->start > start)
+ 		gather->start = start;
+ }
+ 
  /* PCI device grouping function */
  extern struct iommu_group *pci_device_group(struct device *dev);
  /* Generic device grouping function */
@@@ -645,6 -868,16 +670,19 @@@ static inline struct iommu_device *dev_
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static inline void iommu_iotlb_gather_init(struct iommu_iotlb_gather *gather)
+ {
+ }
+ 
+ static inline void iommu_iotlb_gather_add_page(struct iommu_domain *domain,
+ 					       struct iommu_iotlb_gather *gather,
+ 					       unsigned long iova, size_t size)
+ {
+ }
+ 
++>>>>>>> 4fcf8544fc67 (iommu: Introduce iommu_iotlb_gather_add_page())
  static inline void iommu_device_unregister(struct iommu_device *iommu)
  {
  }
* Unmerged path include/linux/iommu.h
