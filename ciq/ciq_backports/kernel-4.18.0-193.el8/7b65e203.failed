perf tools: Allow to link with libbpf dynamicaly

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 7b65e2034fde011d090d4ec472902b71129c6cbd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/7b65e203.failed

Currently we support only static linking with kernel's libbpf
(tools/lib/bpf). This patch adds libbpf package detection and support to
link perf with it dynamically.

The libbpf package status is displayed with:

  $ make VF=1
  Auto-detecting system features:
  ...
  ...                        libbpf: [ on  ]

It's not checked by default, because it's quite new.  Once it's on most
distros we can switch it on.

For the same reason it's not added to the test-all check.

Perf does not need advanced version of libbpf, so we can check just for
the base bpf_object__open function.

Adding new compile variable to detect libbpf package and link bpf
dynamically:

  $ make LIBBPF_DYNAMIC=1
    ...
    LINK     perf
  $ ldd perf | grep bpf
    libbpf.so.0 => /lib64/libbpf.so.0 (0x00007f46818bc000)

If libbpf is not installed, build stops with:

  Makefile.config:486: *** Error: No libbpf devel library found,\
  please install libbpf-devel.  Stop.

Committer testing:

  $ make LIBBPF_DYNAMIC=1 -C tools/perf O=/tmp/build/perf
  make: Entering directory '/home/acme/git/perf/tools/perf'
    BUILD:   Doing 'make -j8' parallel build
  Makefile.config:493: *** Error: No libbpf devel library found, please install libbpf-devel.  Stop.
  make[1]: *** [Makefile.perf:225: sub-make] Error 2
  make: *** [Makefile:70: all] Error 2
  make: Leaving directory '/home/acme/git/perf/tools/perf'
  $

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Toke Høiland-Jørgensen <toke@redhat.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexei Starovoitov <alexei.starovoitov@gmail.com>
	Cc: Andrii Nakryiko <andriin@fb.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Jesper Dangaard Brouer <brouer@redhat.com>
	Cc: Martin KaFai Lau <kafai@fb.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Song Liu <songliubraving@fb.com>
	Cc: Yonghong Song <yhs@fb.com>
	Cc: bpf@vger.kernel.org
	Cc: netdev@vger.kernel.org
Link: http://lore.kernel.org/lkml/20191126121253.28253-1-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7b65e2034fde011d090d4ec472902b71129c6cbd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
diff --cc tools/perf/Makefile.perf
index 06b927ee6ee3,eae5d5e95952..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -111,6 -114,10 +111,13 @@@ include ../scripts/utilities.ma
  # Define NO_LIBZSTD if you do not want support of Zstandard based runtime
  # trace compression in record mode.
  #
++<<<<<<< HEAD
++=======
+ # Define TCMALLOC to enable tcmalloc heap profiling.
+ #
+ # Define LIBBPF_DYNAMIC to enable libbpf dynamic linking.
+ #
++>>>>>>> 7b65e2034fde (perf tools: Allow to link with libbpf dynamicaly)
  
  # As per kernel Makefile, avoid funny character set dependencies
  unexport LC_ALL
@@@ -347,11 -360,11 +354,13 @@@ endi
  
  export PERL_PATH
  
 -PERFLIBS = $(LIBAPI) $(LIBTRACEEVENT) $(LIBSUBCMD) $(LIBPERF)
 +LIBPERF_A=$(OUTPUT)libperf.a
 +
 +PERFLIBS = $(LIBAPI) $(LIBTRACEEVENT) $(LIBSUBCMD)
  ifndef NO_LIBBPF
-   PERFLIBS += $(LIBBPF)
+   ifndef LIBBPF_DYNAMIC
+     PERFLIBS += $(LIBBPF)
+   endif
  endif
  
  # We choose to avoid "if .. else if .. else .. endif endif"
diff --git a/tools/build/Makefile.feature b/tools/build/Makefile.feature
index 54e816f1cc2f..6bd0c6d91303 100644
--- a/tools/build/Makefile.feature
+++ b/tools/build/Makefile.feature
@@ -92,7 +92,8 @@ FEATURE_TESTS_EXTRA :=                  \
          cxx                            \
          llvm                           \
          llvm-version                   \
-         clang
+         clang                          \
+         libbpf
 
 FEATURE_TESTS ?= $(FEATURE_TESTS_BASIC)
 
diff --git a/tools/build/feature/Makefile b/tools/build/feature/Makefile
index ade2edccbe30..9476a2fa521b 100644
--- a/tools/build/feature/Makefile
+++ b/tools/build/feature/Makefile
@@ -51,6 +51,7 @@ FILES=                                          \
          test-zlib.bin                          \
          test-lzma.bin                          \
          test-bpf.bin                           \
+         test-libbpf.bin                        \
          test-get_cpuid.bin                     \
          test-sdt.bin                           \
          test-cxx.bin                           \
@@ -261,6 +262,9 @@ $(OUTPUT)test-get_cpuid.bin:
 $(OUTPUT)test-bpf.bin:
 	$(BUILD)
 
+$(OUTPUT)test-libbpf.bin:
+	$(BUILD) -lbpf
+
 $(OUTPUT)test-sdt.bin:
 	$(BUILD)
 
diff --git a/tools/build/feature/test-libbpf.c b/tools/build/feature/test-libbpf.c
new file mode 100644
index 000000000000..a508756cf4cc
--- /dev/null
+++ b/tools/build/feature/test-libbpf.c
@@ -0,0 +1,7 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <bpf/libbpf.h>
+
+int main(void)
+{
+	return bpf_object__open("test") ? 0 : -1;
+}
diff --git a/tools/perf/Makefile.config b/tools/perf/Makefile.config
index fed1ccb604ce..fc81eaf963e3 100644
--- a/tools/perf/Makefile.config
+++ b/tools/perf/Makefile.config
@@ -459,6 +459,16 @@ ifndef NO_LIBELF
     ifeq ($(feature-bpf), 1)
       CFLAGS += -DHAVE_LIBBPF_SUPPORT
       $(call detected,CONFIG_LIBBPF)
+
+      # detecting libbpf without LIBBPF_DYNAMIC, so make VF=1 shows libbpf detection status
+      $(call feature_check,libbpf)
+      ifdef LIBBPF_DYNAMIC
+        ifeq ($(feature-libbpf), 1)
+          EXTLIBS += -lbpf
+        else
+          dummy := $(error Error: No libbpf devel library found, please install libbpf-devel);
+        endif
+      endif
     endif
 
     ifndef NO_DWARF
* Unmerged path tools/perf/Makefile.perf
