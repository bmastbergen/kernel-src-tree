libbpf: Fix bpf_object name determination for bpf_object__open_file()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 1aace10f41adf1080d1cc54de9b3db98b8b8b0fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1aace10f.failed

If bpf_object__open_file() gets path like "some/dir/obj.o", it should derive
BPF object's name as "obj" (unless overriden through opts->object_name).
Instead, due to using `path` as a fallback value for opts->obj_name, path is
used as is for object name, so for above example BPF object's name will be
verbatim "some/dir/obj", which leads to all sorts of troubles, especially when
internal maps are concern (they are using up to 8 characters of object name).
Fix that by ensuring object_name stays NULL, unless overriden.

Fixes: 291ee02b5e40 ("libbpf: Refactor bpf_object__open APIs to use common opts")
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20191122003527.551556-1-andriin@fb.com
(cherry picked from commit 1aace10f41adf1080d1cc54de9b3db98b8b8b0fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 0adc6e12ef11,e1698461c6b3..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -2715,7 -3937,22 +2715,26 @@@ __bpf_object__open(const char *path, vo
  		return ERR_PTR(-LIBBPF_ERRNO__LIBELF);
  	}
  
++<<<<<<< HEAD
 +	obj = bpf_object__new(path, obj_buf, obj_buf_sz);
++=======
+ 	if (!OPTS_VALID(opts, bpf_object_open_opts))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	obj_name = OPTS_GET(opts, object_name, NULL);
+ 	if (obj_buf) {
+ 		if (!obj_name) {
+ 			snprintf(tmp_name, sizeof(tmp_name), "%lx-%lx",
+ 				 (unsigned long)obj_buf,
+ 				 (unsigned long)obj_buf_sz);
+ 			obj_name = tmp_name;
+ 		}
+ 		path = obj_name;
+ 		pr_debug("loading object '%s' from buffer\n", obj_name);
+ 	}
+ 
+ 	obj = bpf_object__new(path, obj_buf, obj_buf_sz, obj_name);
++>>>>>>> 1aace10f41ad (libbpf: Fix bpf_object name determination for bpf_object__open_file())
  	if (IS_ERR(obj))
  		return obj;
  
* Unmerged path tools/lib/bpf/libbpf.c
