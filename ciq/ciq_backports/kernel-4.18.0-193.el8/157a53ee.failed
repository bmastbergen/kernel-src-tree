ALSA: firewire-lib: add a kernel API to add AMDTP stream into AMDTP domain

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit 157a53eef6a016e6938d9fd266b85221fcd4eaa3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/157a53ee.failed

This commit adds a kernel API to insert AMDTP stream to list in AMDTP
domain.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 157a53eef6a016e6938d9fd266b85221fcd4eaa3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/firewire/amdtp-stream.c
#	sound/firewire/amdtp-stream.h
diff --cc sound/firewire/amdtp-stream.c
index 49eaae157b64,fa7989ee4769..000000000000
--- a/sound/firewire/amdtp-stream.c
+++ b/sound/firewire/amdtp-stream.c
@@@ -1109,3 -1158,45 +1109,48 @@@ void amdtp_domain_destroy(struct amdtp_
  	WARN_ON(!list_empty(&d->streams));
  }
  EXPORT_SYMBOL_GPL(amdtp_domain_destroy);
++<<<<<<< HEAD
++=======
+ 
+ /**
+  * amdtp_domain_add_stream - register isoc context into the domain.
+  * @d: the AMDTP domain.
+  * @s: the AMDTP stream.
+  * @channel: the isochronous channel on the bus.
+  * @speed: firewire speed code.
+  */
+ int amdtp_domain_add_stream(struct amdtp_domain *d, struct amdtp_stream *s,
+ 			    int channel, int speed)
+ {
+ 	struct amdtp_stream *tmp;
+ 
+ 	list_for_each_entry(tmp, &d->streams, list) {
+ 		if (s == tmp)
+ 			return -EBUSY;
+ 	}
+ 
+ 	list_add(&s->list, &d->streams);
+ 
+ 	s->channel = channel;
+ 	s->speed = speed;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(amdtp_domain_add_stream);
+ 
+ /**
+  * amdtp_domain_stop - stop sending packets for isoc context in the same domain.
+  * @d: the AMDTP domain to which the isoc contexts belong.
+  */
+ void amdtp_domain_stop(struct amdtp_domain *d)
+ {
+ 	struct amdtp_stream *s, *next;
+ 
+ 	list_for_each_entry_safe(s, next, &d->streams, list) {
+ 		list_del(&s->list);
+ 
+ 		amdtp_stream_stop(s);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(amdtp_domain_stop);
++>>>>>>> 157a53eef6a0 (ALSA: firewire-lib: add a kernel API to add AMDTP stream into AMDTP domain)
diff --cc sound/firewire/amdtp-stream.h
index a739889ba7ac,4b102fd7529d..000000000000
--- a/sound/firewire/amdtp-stream.h
+++ b/sound/firewire/amdtp-stream.h
@@@ -167,7 -169,12 +167,16 @@@ struct amdtp_stream 
  
  	/* For backends to process data blocks. */
  	void *protocol;
++<<<<<<< HEAD
 +	amdtp_stream_process_data_blocks_t process_data_blocks;
++=======
+ 	amdtp_stream_process_ctx_payloads_t process_ctx_payloads;
+ 
+ 	// For domain.
+ 	int channel;
+ 	int speed;
+ 	struct list_head list;
++>>>>>>> 157a53eef6a0 (ALSA: firewire-lib: add a kernel API to add AMDTP stream into AMDTP domain)
  };
  
  int amdtp_stream_init(struct amdtp_stream *s, struct fw_unit *unit,
@@@ -272,4 -279,9 +281,12 @@@ struct amdtp_domain 
  int amdtp_domain_init(struct amdtp_domain *d);
  void amdtp_domain_destroy(struct amdtp_domain *d);
  
++<<<<<<< HEAD
++=======
+ int amdtp_domain_add_stream(struct amdtp_domain *d, struct amdtp_stream *s,
+ 			    int channel, int speed);
+ 
+ void amdtp_domain_stop(struct amdtp_domain *d);
+ 
++>>>>>>> 157a53eef6a0 (ALSA: firewire-lib: add a kernel API to add AMDTP stream into AMDTP domain)
  #endif
* Unmerged path sound/firewire/amdtp-stream.c
* Unmerged path sound/firewire/amdtp-stream.h
