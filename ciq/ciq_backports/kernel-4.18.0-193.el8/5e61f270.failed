libbpf: stop enforcing kern_version, populate it for users

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 5e61f27070292d4ad3af51dc68eebab6c1df69d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5e61f270.failed

Kernel version enforcement for kprobes/kretprobes was removed from
5.0 kernel in 6c4fc209fcf9 ("bpf: remove useless version check for prog load").
Since then, BPF programs were specifying SEC("version") just to please
libbpf. We should stop enforcing this in libbpf, if even kernel doesn't
care. Furthermore, libbpf now will pre-populate current kernel version
of the host system, in case we are still running on old kernel.

This patch also removes __bpf_object__open_xattr from libbpf.h, as
nothing in libbpf is relying on having it in that header. That function
was never exported as LIBBPF_API and even name suggests its internal
version. So this should be safe to remove, as it doesn't break ABI.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 5e61f27070292d4ad3af51dc68eebab6c1df69d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/testing/selftests/bpf/progs/test_attach_probe.c
#	tools/testing/selftests/bpf/progs/test_perf_buffer.c
diff --cc tools/lib/bpf/libbpf.c
index 70dc223cca5a,024334b29b54..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -2648,53 -3545,9 +2642,56 @@@ bpf_object__load_progs(struct bpf_objec
  	return 0;
  }
  
++<<<<<<< HEAD
 +static bool bpf_prog_type__needs_kver(enum bpf_prog_type type)
 +{
 +	switch (type) {
 +	case BPF_PROG_TYPE_SOCKET_FILTER:
 +	case BPF_PROG_TYPE_SCHED_CLS:
 +	case BPF_PROG_TYPE_SCHED_ACT:
 +	case BPF_PROG_TYPE_XDP:
 +	case BPF_PROG_TYPE_CGROUP_SKB:
 +	case BPF_PROG_TYPE_CGROUP_SOCK:
 +	case BPF_PROG_TYPE_LWT_IN:
 +	case BPF_PROG_TYPE_LWT_OUT:
 +	case BPF_PROG_TYPE_LWT_XMIT:
 +	case BPF_PROG_TYPE_LWT_SEG6LOCAL:
 +	case BPF_PROG_TYPE_SOCK_OPS:
 +	case BPF_PROG_TYPE_SK_SKB:
 +	case BPF_PROG_TYPE_CGROUP_DEVICE:
 +	case BPF_PROG_TYPE_SK_MSG:
 +	case BPF_PROG_TYPE_CGROUP_SOCK_ADDR:
 +	case BPF_PROG_TYPE_LIRC_MODE2:
 +	case BPF_PROG_TYPE_SK_REUSEPORT:
 +	case BPF_PROG_TYPE_FLOW_DISSECTOR:
 +	case BPF_PROG_TYPE_UNSPEC:
 +	case BPF_PROG_TYPE_TRACEPOINT:
 +	case BPF_PROG_TYPE_RAW_TRACEPOINT:
 +	case BPF_PROG_TYPE_PERF_EVENT:
 +	case BPF_PROG_TYPE_CGROUP_SYSCTL:
 +	case BPF_PROG_TYPE_CGROUP_SOCKOPT:
 +		return false;
 +	case BPF_PROG_TYPE_KPROBE:
 +	default:
 +		return true;
 +	}
 +}
 +
 +static int bpf_object__validate(struct bpf_object *obj, bool needs_kver)
 +{
 +	if (needs_kver && obj->kern_version == 0) {
 +		pr_warning("%s doesn't provide kernel version\n",
 +			   obj->path);
 +		return -LIBBPF_ERRNO__KVERSION;
 +	}
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5e61f2707029 (libbpf: stop enforcing kern_version, populate it for users)
  static struct bpf_object *
- __bpf_object__open(const char *path, void *obj_buf, size_t obj_buf_sz,
- 		   bool needs_kver, int flags)
+ __bpf_object__open(const char *path, const void *obj_buf, size_t obj_buf_sz,
+ 		   int flags)
  {
  	struct bpf_object *obj;
  	int err;
* Unmerged path tools/testing/selftests/bpf/progs/test_attach_probe.c
* Unmerged path tools/testing/selftests/bpf/progs/test_perf_buffer.c
* Unmerged path tools/lib/bpf/libbpf.c
diff --git a/tools/lib/bpf/libbpf.h b/tools/lib/bpf/libbpf.h
index 5cbf459ece0b..cd84b1dd879e 100644
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -70,8 +70,6 @@ struct bpf_object_open_attr {
 LIBBPF_API struct bpf_object *bpf_object__open(const char *path);
 LIBBPF_API struct bpf_object *
 bpf_object__open_xattr(struct bpf_object_open_attr *attr);
-struct bpf_object *__bpf_object__open_xattr(struct bpf_object_open_attr *attr,
-					    int flags);
 LIBBPF_API struct bpf_object *bpf_object__open_buffer(void *obj_buf,
 						      size_t obj_buf_sz,
 						      const char *name);
* Unmerged path tools/testing/selftests/bpf/progs/test_attach_probe.c
* Unmerged path tools/testing/selftests/bpf/progs/test_perf_buffer.c
diff --git a/tools/testing/selftests/bpf/test_get_stack_rawtp.c b/tools/testing/selftests/bpf/test_get_stack_rawtp.c
index f6d9f238e00a..a7f275cd39d0 100644
--- a/tools/testing/selftests/bpf/test_get_stack_rawtp.c
+++ b/tools/testing/selftests/bpf/test_get_stack_rawtp.c
@@ -99,4 +99,3 @@ int bpf_prog1(void *ctx)
 }
 
 char _license[] SEC("license") = "GPL";
-__u32 _version SEC("version") = 1; /* ignored by tracepoints, required by libbpf.a */
diff --git a/tools/testing/selftests/bpf/test_stacktrace_map.c b/tools/testing/selftests/bpf/test_stacktrace_map.c
index af111af7ca1a..eb676566fac7 100644
--- a/tools/testing/selftests/bpf/test_stacktrace_map.c
+++ b/tools/testing/selftests/bpf/test_stacktrace_map.c
@@ -72,4 +72,3 @@ int oncpu(struct sched_switch_args *ctx)
 }
 
 char _license[] SEC("license") = "GPL";
-__u32 _version SEC("version") = 1; /* ignored by tracepoints, required by libbpf.a */
