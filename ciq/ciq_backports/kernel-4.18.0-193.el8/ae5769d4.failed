drm/nouveau/kms/nv50-: Limit MST BPC to 8

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Lyude Paul <lyude@redhat.com>
commit ae5769d4670982bc483885b120b557a9ffd57527
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ae5769d4.failed

Noticed this while working on some unrelated CRC stuff. Currently,
userspace has very little support for BPCs higher than 8. While this
doesn't matter for most things, on MST topologies we need to be careful
about ensuring that we do our best to make any given display
configuration fit within the bandwidth restraints of the topology, since
otherwise less people's monitor configurations will work.

Allowing for BPC settings higher than 8 dramatically increases the
required bandwidth for displays in most configurations, and consequently
makes it a lot less likely that said display configurations will pass
the atomic check.

In the future we want to fix this correctly by making it so that we
adjust the bpp for each display in a topology to be as high as possible,
while making sure to lower the bpp of each display in the event that we
run out of bandwidth and need to rerun our atomic check. But for now,
follow the behavior that both i915 and amdgpu are sticking to.

	Signed-off-by: Lyude Paul <lyude@redhat.com>
Fixes: 232c9eec417a ("drm/nouveau: Use atomic VCPI helpers for MST")
	Cc: Ben Skeggs <bskeggs@redhat.com>
	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: David Airlie <airlied@redhat.com>
	Cc: Jerry Zuo <Jerry.Zuo@amd.com>
	Cc: Harry Wentland <harry.wentland@amd.com>
	Cc: Juston Li <juston.li@intel.com>
	Cc: Sam Ravnborg <sam@ravnborg.org>
	Cc: Sean Paul <seanpaul@chromium.org>
	Cc: <stable@vger.kernel.org> # v5.1+
	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit ae5769d4670982bc483885b120b557a9ffd57527)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/dispnv50/disp.c
diff --cc drivers/gpu/drm/nouveau/dispnv50/disp.c
index 5216b642fff4,9ac47fe519f8..000000000000
--- a/drivers/gpu/drm/nouveau/dispnv50/disp.c
+++ b/drivers/gpu/drm/nouveau/dispnv50/disp.c
@@@ -765,32 -780,54 +765,44 @@@ nv50_msto_atomic_check(struct drm_encod
  	struct nv50_mstm *mstm = mstc->mstm;
  	struct nv50_head_atom *asyh = nv50_head_atom(crtc_state);
  	int slots;
 -	int ret;
  
 -	ret = nv50_outp_atomic_check_view(encoder, crtc_state, conn_state,
 -					  mstc->native);
 -	if (ret)
 -		return ret;
 +	if (crtc_state->mode_changed || crtc_state->connectors_changed) {
 +		/*
 +		 * When restoring duplicated states, we need to make sure that
 +		 * the bw remains the same and avoid recalculating it, as the
 +		 * connector's bpc may have changed after the state was
 +		 * duplicated
 +		 */
 +		if (!state->duplicated) {
 +			const int bpp = connector->display_info.bpc * 3;
 +			const int clock = crtc_state->adjusted_mode.clock;
  
 -	if (!crtc_state->mode_changed && !crtc_state->connectors_changed)
 -		return 0;
 +			asyh->dp.pbn = drm_dp_calc_pbn_mode(bpp, clock);
 +		}
  
 -	/*
 -	 * When restoring duplicated states, we need to make sure that the bw
 -	 * remains the same and avoid recalculating it, as the connector's bpc
 -	 * may have changed after the state was duplicated
 -	 */
 -	if (!state->duplicated) {
 -		const int clock = crtc_state->adjusted_mode.clock;
 +		slots = drm_dp_atomic_find_vcpi_slots(state, &mstm->mgr,
 +						      mstc->port,
 +						      asyh->dp.pbn);
 +		if (slots < 0)
 +			return slots;
  
++<<<<<<< HEAD
 +		asyh->dp.tu = slots;
++=======
+ 		/*
+ 		 * XXX: Since we don't use HDR in userspace quite yet, limit
+ 		 * the bpc to 8 to save bandwidth on the topology. In the
+ 		 * future, we'll want to properly fix this by dynamically
+ 		 * selecting the highest possible bpc that would fit in the
+ 		 * topology
+ 		 */
+ 		asyh->or.bpc = min(connector->display_info.bpc, 8U);
+ 		asyh->dp.pbn = drm_dp_calc_pbn_mode(clock, asyh->or.bpc * 3);
++>>>>>>> ae5769d46709 (drm/nouveau/kms/nv50-: Limit MST BPC to 8)
  	}
  
 -	slots = drm_dp_atomic_find_vcpi_slots(state, &mstm->mgr, mstc->port,
 -					      asyh->dp.pbn);
 -	if (slots < 0)
 -		return slots;
 -
 -	asyh->dp.tu = slots;
 -
 -	return 0;
 -}
 -
 -static u8
 -nv50_dp_bpc_to_depth(unsigned int bpc)
 -{
 -	switch (bpc) {
 -	case  6: return 0x2;
 -	case  8: return 0x5;
 -	case 10: /* fall-through */
 -	default: return 0x6;
 -	}
 +	return nv50_outp_atomic_check_view(encoder, crtc_state, conn_state,
 +					   mstc->native);
  }
  
  static void
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/disp.c
