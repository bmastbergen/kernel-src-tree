ACPI / scan: Create platform device for BSG2150 ACPI nodes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit 96f984d3127e283265a6245dacc399967655fe54
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/96f984d3.failed

The Point of View TAB-P1006W-232-3G tablet has an ACPI firmware node with
a HID of BSG2150 describing the 2 Bosch sensors used in the device a
BMC150 compatible accelerometer and a BMC150 compatible magnetometer.

The ACPI firmware node actually contains 3 I2cSerialBusV2 resources,
but this seems to be a copy and paste job from the BSG1160 firmware node
on other devices, since there is no i2c-client listening to the 0x68
address listed in the third resource and the 0x68 address is identical
to the address of the third resource in the BSG1160 nodes, where as the
other 2 addresses are different.

Add the ID to the I2C multi instantiate list, so that the
i2c-multi-instantiate.c driver can handle it;

And add the necessary info to the i2c-multi-instantiate.c driver to
enumerate all I2C slaves correctly.

To avoid triggering the:

        if (i < multi->num_clients) {
                dev_err(dev, "Error finding driver, idx %d\n", i);

Error this commit lists the 3th device in the i2c_inst_data with a
type of "bsg2150_dummy_dev".

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
(cherry picked from commit 96f984d3127e283265a6245dacc399967655fe54)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/scan.c
#	drivers/platform/x86/i2c-multi-instantiate.c
diff --cc drivers/acpi/scan.c
index 9ca8e1d0b2f3,446c959a8f08..000000000000
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@@ -1535,6 -1535,21 +1535,24 @@@ static bool acpi_device_enumeration_by_
  {
  	struct list_head resource_list;
  	bool is_serial_bus_slave = false;
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * These devices have multiple I2cSerialBus resources and an i2c-client
+ 	 * must be instantiated for each, each with its own i2c_device_id.
+ 	 * Normally we only instantiate an i2c-client for the first resource,
+ 	 * using the ACPI HID as id. These special cases are handled by the
+ 	 * drivers/platform/x86/i2c-multi-instantiate.c driver, which knows
+ 	 * which i2c_device_id to use for each resource.
+ 	 */
+ 	static const struct acpi_device_id i2c_multi_instantiate_ids[] = {
+ 		{"BSG1160", },
+ 		{"BSG2150", },
+ 		{"INT33FE", },
+ 		{"INT3515", },
+ 		{}
+ 	};
++>>>>>>> 96f984d3127e (ACPI / scan: Create platform device for BSG2150 ACPI nodes)
  
  	if (acpi_is_indirect_io_slave(device))
  		return true;
diff --cc drivers/platform/x86/i2c-multi-instantiate.c
index 5456581b473c,197d8a192721..000000000000
--- a/drivers/platform/x86/i2c-multi-instantiate.c
+++ b/drivers/platform/x86/i2c-multi-instantiate.c
@@@ -101,9 -153,25 +101,31 @@@ static int i2c_multi_inst_remove(struc
  }
  
  static const struct i2c_inst_data bsg1160_data[]  = {
++<<<<<<< HEAD
 +	{ "bmc150_accel", 0 },
 +	{ "bmc150_magn", -1 },
 +	{ "bmg160", -1 },
++=======
+ 	{ "bmc150_accel", IRQ_RESOURCE_GPIO, 0 },
+ 	{ "bmc150_magn" },
+ 	{ "bmg160" },
+ 	{}
+ };
+ 
+ static const struct i2c_inst_data bsg2150_data[]  = {
+ 	{ "bmc150_accel", IRQ_RESOURCE_GPIO, 0 },
+ 	{ "bmc150_magn" },
+ 	/* The resources describe a 3th client, but it is not really there. */
+ 	{ "bsg2150_dummy_dev" },
+ 	{}
+ };
+ 
+ static const struct i2c_inst_data int3515_data[]  = {
+ 	{ "tps6598x", IRQ_RESOURCE_APIC, 0 },
+ 	{ "tps6598x", IRQ_RESOURCE_APIC, 1 },
+ 	{ "tps6598x", IRQ_RESOURCE_APIC, 2 },
+ 	{ "tps6598x", IRQ_RESOURCE_APIC, 3 },
++>>>>>>> 96f984d3127e (ACPI / scan: Create platform device for BSG2150 ACPI nodes)
  	{}
  };
  
@@@ -113,6 -181,8 +135,11 @@@
   */
  static const struct acpi_device_id i2c_multi_inst_acpi_ids[] = {
  	{ "BSG1160", (unsigned long)bsg1160_data },
++<<<<<<< HEAD
++=======
+ 	{ "BSG2150", (unsigned long)bsg2150_data },
+ 	{ "INT3515", (unsigned long)int3515_data },
++>>>>>>> 96f984d3127e (ACPI / scan: Create platform device for BSG2150 ACPI nodes)
  	{ }
  };
  MODULE_DEVICE_TABLE(acpi, i2c_multi_inst_acpi_ids);
* Unmerged path drivers/acpi/scan.c
* Unmerged path drivers/platform/x86/i2c-multi-instantiate.c
