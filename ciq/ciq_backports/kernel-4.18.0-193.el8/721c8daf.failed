tcp: Protect accesses to .ts_recent_stamp with {READ,WRITE}_ONCE()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Guillaume Nault <gnault@redhat.com>
commit 721c8dafad26ccfa90ff659ee19755e3377b829d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/721c8daf.failed

Syncookies borrow the ->rx_opt.ts_recent_stamp field to store the
timestamp of the last synflood. Protect them with READ_ONCE() and
WRITE_ONCE() since reads and writes aren't serialised.

Use of .rx_opt.ts_recent_stamp for storing the synflood timestamp was
introduced by a0f82f64e269 ("syncookies: remove last_synq_overflow from
struct tcp_sock"). But unprotected accesses were already there when
timestamp was stored in .last_synq_overflow.

Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
	Signed-off-by: Guillaume Nault <gnault@redhat.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 721c8dafad26ccfa90ff659ee19755e3377b829d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tcp.h
diff --cc include/net/tcp.h
index 530bc36b1333,86b9a8766648..000000000000
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@@ -475,19 -485,56 +475,64 @@@ struct sock *cookie_v4_check(struct soc
   */
  static inline void tcp_synq_overflow(const struct sock *sk)
  {
 -	unsigned int last_overflow;
 -	unsigned int now = jiffies;
 +	unsigned long last_overflow = tcp_sk(sk)->rx_opt.ts_recent_stamp;
 +	unsigned long now = jiffies;
  
++<<<<<<< HEAD
 +	if (time_after(now, last_overflow + HZ))
 +		tcp_sk(sk)->rx_opt.ts_recent_stamp = now;
++=======
+ 	if (sk->sk_reuseport) {
+ 		struct sock_reuseport *reuse;
+ 
+ 		reuse = rcu_dereference(sk->sk_reuseport_cb);
+ 		if (likely(reuse)) {
+ 			last_overflow = READ_ONCE(reuse->synq_overflow_ts);
+ 			if (!time_between32(now, last_overflow,
+ 					    last_overflow + HZ))
+ 				WRITE_ONCE(reuse->synq_overflow_ts, now);
+ 			return;
+ 		}
+ 	}
+ 
+ 	last_overflow = READ_ONCE(tcp_sk(sk)->rx_opt.ts_recent_stamp);
+ 	if (!time_between32(now, last_overflow, last_overflow + HZ))
+ 		WRITE_ONCE(tcp_sk(sk)->rx_opt.ts_recent_stamp, now);
++>>>>>>> 721c8dafad26 (tcp: Protect accesses to .ts_recent_stamp with {READ,WRITE}_ONCE())
  }
  
  /* syncookies: no recent synqueue overflow on this listening socket? */
  static inline bool tcp_synq_no_recent_overflow(const struct sock *sk)
  {
 -	unsigned int last_overflow;
 -	unsigned int now = jiffies;
 +	unsigned long last_overflow = tcp_sk(sk)->rx_opt.ts_recent_stamp;
  
++<<<<<<< HEAD
 +	return time_after(jiffies, last_overflow + TCP_SYNCOOKIE_VALID);
++=======
+ 	if (sk->sk_reuseport) {
+ 		struct sock_reuseport *reuse;
+ 
+ 		reuse = rcu_dereference(sk->sk_reuseport_cb);
+ 		if (likely(reuse)) {
+ 			last_overflow = READ_ONCE(reuse->synq_overflow_ts);
+ 			return !time_between32(now, last_overflow - HZ,
+ 					       last_overflow +
+ 					       TCP_SYNCOOKIE_VALID);
+ 		}
+ 	}
+ 
+ 	last_overflow = READ_ONCE(tcp_sk(sk)->rx_opt.ts_recent_stamp);
+ 
+ 	/* If last_overflow <= jiffies <= last_overflow + TCP_SYNCOOKIE_VALID,
+ 	 * then we're under synflood. However, we have to use
+ 	 * 'last_overflow - HZ' as lower bound. That's because a concurrent
+ 	 * tcp_synq_overflow() could update .ts_recent_stamp after we read
+ 	 * jiffies but before we store .ts_recent_stamp into last_overflow,
+ 	 * which could lead to rejecting a valid syncookie.
+ 	 */
+ 	return !time_between32(now, last_overflow - HZ,
+ 			       last_overflow + TCP_SYNCOOKIE_VALID);
++>>>>>>> 721c8dafad26 (tcp: Protect accesses to .ts_recent_stamp with {READ,WRITE}_ONCE())
  }
  
  static inline u32 tcp_cookie_time(void)
* Unmerged path include/net/tcp.h
