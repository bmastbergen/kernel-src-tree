net: phy: icplus: rename IP101A_G_NO_IRQ to IP101A_G_IRQ_ALL_MASK

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] phy: icplus: rename IP101A_G_NO_IRQ to IP101A_G_IRQ_ALL_MASK (Petr Oros) [1772010]
Rebuild_FUZZ: 96.00%
commit-author Martin Blumenstingl <martin.blumenstingl@googlemail.com>
commit a872c388f9d9e515d9c4102110d0bf0fd7a9778a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a872c388.failed

The datasheet uses the name "All Mask" for this bit. Change the name of
our #define to be consistent with the datasheet. While here also replace
the tab between the #define and IP101A_G_IRQ_ALL_MASK with a space.
No functional changes.

	Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a872c388f9d9e515d9c4102110d0bf0fd7a9778a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/icplus.c
diff --cc drivers/net/phy/icplus.c
index 6dc83343b55c,c9489ec77cef..000000000000
--- a/drivers/net/phy/icplus.c
+++ b/drivers/net/phy/icplus.c
@@@ -42,8 -42,8 +42,13 @@@ MODULE_LICENSE("GPL")
  #define IP1001_APS_ON			11	/* IP1001 APS Mode  bit */
  #define IP101A_G_APS_ON			BIT(1)	/* IP101A/G APS Mode bit */
  #define IP101A_G_IRQ_CONF_STATUS	0x11	/* Conf Info IRQ & Status Reg */
++<<<<<<< HEAD
 +#define	IP101A_G_IRQ_PIN_USED		(1<<15) /* INTR pin used */
 +#define	IP101A_G_IRQ_DEFAULT		IP101A_G_IRQ_PIN_USED
++=======
+ #define	IP101A_G_IRQ_PIN_USED		BIT(15) /* INTR pin used */
+ #define IP101A_G_IRQ_ALL_MASK		BIT(11) /* IRQ's inactive */
++>>>>>>> a872c388f9d9 (net: phy: icplus: rename IP101A_G_NO_IRQ to IP101A_G_IRQ_ALL_MASK)
  
  static int ip175c_config_init(struct phy_device *phydev)
  {
@@@ -201,6 -181,34 +206,37 @@@ static int ip175c_config_aneg(struct ph
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int ip101a_g_config_init(struct phy_device *phydev)
+ {
+ 	int c;
+ 
+ 	c = ip1xx_reset(phydev);
+ 	if (c < 0)
+ 		return c;
+ 
+ 	/* Enable Auto Power Saving mode */
+ 	c = phy_read(phydev, IP10XX_SPEC_CTRL_STATUS);
+ 	c |= IP101A_G_APS_ON;
+ 
+ 	return phy_write(phydev, IP10XX_SPEC_CTRL_STATUS, c);
+ }
+ 
+ static int ip101a_g_config_intr(struct phy_device *phydev)
+ {
+ 	u16 val;
+ 
+ 	if (phydev->interrupts == PHY_INTERRUPT_ENABLED)
+ 		/* INTR pin used: Speed/link/duplex will cause an interrupt */
+ 		val = IP101A_G_IRQ_PIN_USED;
+ 	else
+ 		val = IP101A_G_IRQ_ALL_MASK;
+ 
+ 	return phy_write(phydev, IP101A_G_IRQ_CONF_STATUS, val);
+ }
+ 
++>>>>>>> a872c388f9d9 (net: phy: icplus: rename IP101A_G_NO_IRQ to IP101A_G_IRQ_ALL_MASK)
  static int ip101a_g_ack_interrupt(struct phy_device *phydev)
  {
  	int err = phy_read(phydev, IP101A_G_IRQ_CONF_STATUS);
* Unmerged path drivers/net/phy/icplus.c
