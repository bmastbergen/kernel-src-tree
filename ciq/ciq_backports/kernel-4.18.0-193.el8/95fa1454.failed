bpf: sockmap/tls, close can race with map free

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author John Fastabend <john.fastabend@gmail.com>
commit 95fa145479fbc0a0c1fd3274ceb42ec03c042a4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/95fa1454.failed

When a map free is called and in parallel a socket is closed we
have two paths that can potentially reset the socket prot ops, the
bpf close() path and the map free path. This creates a problem
with which prot ops should be used from the socket closed side.

If the map_free side completes first then we want to call the
original lowest level ops. However, if the tls path runs first
we want to call the sockmap ops. Additionally there was no locking
around prot updates in TLS code paths so the prot ops could
be changed multiple times once from TLS path and again from sockmap
side potentially leaving ops pointed at either TLS or sockmap
when psock and/or tls context have already been destroyed.

To fix this race first only update ops inside callback lock
so that TLS, sockmap and lowest level all agree on prot state.
Second and a ULP callback update() so that lower layers can
inform the upper layer when they are being removed allowing the
upper layer to reset prot ops.

This gets us close to allowing sockmap and tls to be stacked
in arbitrary order but will save that patch for *next trees.

v4:
 - make sure we don't free things for device;
 - remove the checks which swap the callbacks back
   only if TLS is at the top.

	Reported-by: syzbot+06537213db7ba2745c4a@syzkaller.appspotmail.com
Fixes: 02c558b2d5d6 ("bpf: sockmap, support for msg_peek in sk_msg with redirect ingress")
	Signed-off-by: John Fastabend <john.fastabend@gmail.com>
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 95fa145479fbc0a0c1fd3274ceb42ec03c042a4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tls/tls_main.c
diff --cc net/tls/tls_main.c
index 797e39e87f9c,f208f8455ef2..000000000000
--- a/net/tls/tls_main.c
+++ b/net/tls/tls_main.c
@@@ -288,9 -315,32 +288,35 @@@ static void tls_sk_proto_cleanup(struc
  #endif
  }
  
++<<<<<<< HEAD
++=======
+ static void tls_sk_proto_unhash(struct sock *sk)
+ {
+ 	struct inet_connection_sock *icsk = inet_csk(sk);
+ 	long timeo = sock_sndtimeo(sk, 0);
+ 	struct tls_context *ctx;
+ 
+ 	if (unlikely(!icsk->icsk_ulp_data)) {
+ 		if (sk->sk_prot->unhash)
+ 			sk->sk_prot->unhash(sk);
+ 	}
+ 
+ 	ctx = tls_get_ctx(sk);
+ 	tls_sk_proto_cleanup(sk, ctx, timeo);
+ 	write_lock_bh(&sk->sk_callback_lock);
+ 	icsk->icsk_ulp_data = NULL;
+ 	sk->sk_prot = ctx->sk_proto;
+ 	write_unlock_bh(&sk->sk_callback_lock);
+ 
+ 	if (ctx->sk_proto->unhash)
+ 		ctx->sk_proto->unhash(sk);
+ 	tls_ctx_free_wq(ctx);
+ }
+ 
++>>>>>>> 95fa145479fb (bpf: sockmap/tls, close can race with map free)
  static void tls_sk_proto_close(struct sock *sk, long timeout)
  {
- 	void (*sk_proto_close)(struct sock *sk, long timeout);
+ 	struct inet_connection_sock *icsk = inet_csk(sk);
  	struct tls_context *ctx = tls_get_ctx(sk);
  	long timeo = sock_sndtimeo(sk, 0);
  	bool free_ctx;
@@@ -305,6 -354,11 +330,14 @@@
  	if (ctx->tx_conf != TLS_BASE || ctx->rx_conf != TLS_BASE)
  		tls_sk_proto_cleanup(sk, ctx, timeo);
  
++<<<<<<< HEAD
++=======
+ 	write_lock_bh(&sk->sk_callback_lock);
+ 	if (free_ctx)
+ 		icsk->icsk_ulp_data = NULL;
+ 	sk->sk_prot = ctx->sk_proto;
+ 	write_unlock_bh(&sk->sk_callback_lock);
++>>>>>>> 95fa145479fb (bpf: sockmap/tls, close can race with map free)
  	release_sock(sk);
  	if (ctx->tx_conf == TLS_SW)
  		tls_sw_free_ctx_tx(ctx);
@@@ -787,19 -854,33 +823,32 @@@ static int tls_init(struct sock *sk
  		goto out;
  	}
  
- 	tls_build_proto(sk);
  	ctx->tx_conf = TLS_BASE;
  	ctx->rx_conf = TLS_BASE;
 -	ctx->sk_proto = sk->sk_prot;
  	update_sk_prot(sk, ctx);
  out:
+ 	write_unlock_bh(&sk->sk_callback_lock);
  	return rc;
  }
  
+ static void tls_update(struct sock *sk, struct proto *p)
+ {
+ 	struct tls_context *ctx;
+ 
+ 	ctx = tls_get_ctx(sk);
+ 	if (likely(ctx)) {
+ 		ctx->sk_proto_close = p->close;
+ 		ctx->sk_proto = p;
+ 	} else {
+ 		sk->sk_prot = p;
+ 	}
+ }
+ 
  void tls_register_device(struct tls_device *device)
  {
 -	spin_lock_bh(&device_spinlock);
 +	mutex_lock(&device_mutex);
  	list_add_tail(&device->dev_list, &device_list);
 -	spin_unlock_bh(&device_spinlock);
 +	mutex_unlock(&device_mutex);
  }
  EXPORT_SYMBOL(tls_register_device);
  
diff --git a/include/linux/skmsg.h b/include/linux/skmsg.h
index 50ced8aba9db..e4b3fb4bb77c 100644
--- a/include/linux/skmsg.h
+++ b/include/linux/skmsg.h
@@ -354,7 +354,13 @@ static inline void sk_psock_restore_proto(struct sock *sk,
 	sk->sk_write_space = psock->saved_write_space;
 
 	if (psock->sk_proto) {
-		sk->sk_prot = psock->sk_proto;
+		struct inet_connection_sock *icsk = inet_csk(sk);
+		bool has_ulp = !!icsk->icsk_ulp_data;
+
+		if (has_ulp)
+			tcp_update_ulp(sk, psock->sk_proto);
+		else
+			sk->sk_prot = psock->sk_proto;
 		psock->sk_proto = NULL;
 	}
 }
diff --git a/include/net/tcp.h b/include/net/tcp.h
index 7d5cd46c9e6b..3d45e91abf6d 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -2020,6 +2020,8 @@ struct tcp_ulp_ops {
 
 	/* initialize ulp */
 	int (*init)(struct sock *sk);
+	/* update ulp */
+	void (*update)(struct sock *sk, struct proto *p);
 	/* cleanup ulp */
 	void (*release)(struct sock *sk);
 
@@ -2031,6 +2033,7 @@ void tcp_unregister_ulp(struct tcp_ulp_ops *type);
 int tcp_set_ulp(struct sock *sk, const char *name);
 void tcp_get_available_ulp(char *buf, size_t len);
 void tcp_cleanup_ulp(struct sock *sk);
+void tcp_update_ulp(struct sock *sk, struct proto *p);
 
 #define MODULE_ALIAS_TCP_ULP(name)				\
 	__MODULE_INFO(alias, alias_userspace, name);		\
diff --git a/net/core/skmsg.c b/net/core/skmsg.c
index 93bffaad2135..6832eeb4b785 100644
--- a/net/core/skmsg.c
+++ b/net/core/skmsg.c
@@ -585,12 +585,12 @@ EXPORT_SYMBOL_GPL(sk_psock_destroy);
 
 void sk_psock_drop(struct sock *sk, struct sk_psock *psock)
 {
-	rcu_assign_sk_user_data(sk, NULL);
 	sk_psock_cork_free(psock);
 	sk_psock_zap_ingress(psock);
-	sk_psock_restore_proto(sk, psock);
 
 	write_lock_bh(&sk->sk_callback_lock);
+	sk_psock_restore_proto(sk, psock);
+	rcu_assign_sk_user_data(sk, NULL);
 	if (psock->progs.skb_parser)
 		sk_psock_stop_strp(sk, psock);
 	write_unlock_bh(&sk->sk_callback_lock);
diff --git a/net/ipv4/tcp_ulp.c b/net/ipv4/tcp_ulp.c
index 95df7f7f6328..98c4a4fa6e38 100644
--- a/net/ipv4/tcp_ulp.c
+++ b/net/ipv4/tcp_ulp.c
@@ -95,6 +95,19 @@ void tcp_get_available_ulp(char *buf, size_t maxlen)
 	rcu_read_unlock();
 }
 
+void tcp_update_ulp(struct sock *sk, struct proto *proto)
+{
+	struct inet_connection_sock *icsk = inet_csk(sk);
+
+	if (!icsk->icsk_ulp_ops) {
+		sk->sk_prot = proto;
+		return;
+	}
+
+	if (icsk->icsk_ulp_ops->update)
+		icsk->icsk_ulp_ops->update(sk, proto);
+}
+
 void tcp_cleanup_ulp(struct sock *sk)
 {
 	struct inet_connection_sock *icsk = inet_csk(sk);
* Unmerged path net/tls/tls_main.c
