fs/dax: Fix pmd vs pte conflict detection

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [fs] dax: Fix pmd vs pte conflict detection (Jeff Moyer) [1777250]
Rebuild_FUZZ: 96.20%
commit-author Dan Williams <dan.j.williams@intel.com>
commit 6370740e5f8ef12de7f9a9bf48a0393d202cd827
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/6370740e.failed

Users reported a v5.3 performance regression and inability to establish
huge page mappings. A revised version of the ndctl "dax.sh" huge page
unit test identifies commit 23c84eb78375 "dax: Fix missed wakeup with
PMD faults" as the source.

Update get_unlocked_entry() to check for NULL entries before checking
the entry order, otherwise NULL is misinterpreted as a present pte
conflict. The 'order' check needs to happen before the locked check as
an unlocked entry at the wrong order must fallback to lookup the correct
order.

	Reported-by: Jeff Smits <jeff.smits@intel.com>
	Reported-by: Doug Nelson <doug.nelson@intel.com>
	Cc: <stable@vger.kernel.org>
Fixes: 23c84eb78375 ("dax: Fix missed wakeup with PMD faults")
	Reviewed-by: Jan Kara <jack@suse.cz>
	Cc: Jeff Moyer <jmoyer@redhat.com>
	Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
Link: https://lore.kernel.org/r/157167532455.3945484.11971474077040503994.stgit@dwillia2-desk3.amr.corp.intel.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 6370740e5f8ef12de7f9a9bf48a0393d202cd827)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
diff --cc fs/dax.c
index 8240cbbe1f07,2cc43cd914eb..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -225,14 -219,15 +225,23 @@@ static void *get_unlocked_entry(struct 
  	ewait.wait.func = wake_exceptional_entry_func;
  
  	for (;;) {
++<<<<<<< HEAD
 +		entry = xas_load(xas);
 +		if (!entry || xa_is_internal(entry) ||
 +				WARN_ON_ONCE(!xa_is_value(entry)) ||
 +				!dax_is_locked(entry))
++=======
+ 		entry = xas_find_conflict(xas);
+ 		if (!entry || WARN_ON_ONCE(!xa_is_value(entry)))
+ 			return entry;
+ 		if (dax_entry_order(entry) < order)
+ 			return XA_RETRY_ENTRY;
+ 		if (!dax_is_locked(entry))
++>>>>>>> 6370740e5f8e (fs/dax: Fix pmd vs pte conflict detection)
  			return entry;
  
 -		wq = dax_entry_waitqueue(xas, entry, &ewait.key);
 +		wq = dax_entry_waitqueue(xas->xa, xas->xa_index, entry,
 +				&ewait.key);
  		prepare_to_wait_exclusive(wq, &ewait.wait,
  					  TASK_UNINTERRUPTIBLE);
  		xas_unlock_irq(xas);
* Unmerged path fs/dax.c
