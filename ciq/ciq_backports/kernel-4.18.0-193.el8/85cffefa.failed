scsi: qla2xxx: Fix a race condition between aborting and completing a SCSI command

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 85cffefa09e448906a6f0bc20f422d75a18675bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/85cffefa.failed

Instead of allocating a struct srb dynamically from inside .queuecommand(),
set qla2xxx_driver_template.cmd_size such that struct scsi_cmnd and struct
srb are contiguous. Do not call QLA_QPAIR_MARK_BUSY() /
QLA_QPAIR_MARK_NOT_BUSY() for SRBs associated with SCSI commands. That is
safe because scsi_remove_host() is called before queue pairs are deleted
and scsi_remove_host() waits for all outstanding SCSI commands to finish.

	Cc: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Tested-by: Himanshu Madhani <hmadhani@marvell.com>
	Reviewed-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 85cffefa09e448906a6f0bc20f422d75a18675bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_os.c
diff --cc drivers/scsi/qla2xxx/qla_os.c
index 85207fd853b7,5ca7f7913258..000000000000
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@@ -764,13 -713,10 +764,12 @@@ qla2x00_sp_compl(void *ptr, int res
  	cmd->scsi_done(cmd);
  	if (comp)
  		complete(comp);
- 	qla2x00_rel_sp(sp);
  }
  
 -void qla2xxx_qpair_sp_free_dma(srb_t *sp)
 +void
 +qla2xxx_qpair_sp_free_dma(void *ptr)
  {
 +	srb_t *sp = (srb_t *)ptr;
  	struct scsi_cmnd *cmd = GET_CMD_SP(sp);
  	struct qla_hw_data *ha = sp->fcport->vha->hw;
  	void *ctx = GET_CMD_CTX_SP(sp);
@@@ -7087,6 -7100,38 +7057,41 @@@ static int qla2xxx_map_queues(struct Sc
  	return rc;
  }
  
++<<<<<<< HEAD
++=======
+ struct scsi_host_template qla2xxx_driver_template = {
+ 	.module			= THIS_MODULE,
+ 	.name			= QLA2XXX_DRIVER_NAME,
+ 	.queuecommand		= qla2xxx_queuecommand,
+ 
+ 	.eh_timed_out		= fc_eh_timed_out,
+ 	.eh_abort_handler	= qla2xxx_eh_abort,
+ 	.eh_device_reset_handler = qla2xxx_eh_device_reset,
+ 	.eh_target_reset_handler = qla2xxx_eh_target_reset,
+ 	.eh_bus_reset_handler	= qla2xxx_eh_bus_reset,
+ 	.eh_host_reset_handler	= qla2xxx_eh_host_reset,
+ 
+ 	.slave_configure	= qla2xxx_slave_configure,
+ 
+ 	.slave_alloc		= qla2xxx_slave_alloc,
+ 	.slave_destroy		= qla2xxx_slave_destroy,
+ 	.scan_finished		= qla2xxx_scan_finished,
+ 	.scan_start		= qla2xxx_scan_start,
+ 	.change_queue_depth	= scsi_change_queue_depth,
+ 	.map_queues             = qla2xxx_map_queues,
+ 	.this_id		= -1,
+ 	.cmd_per_lun		= 3,
+ 	.sg_tablesize		= SG_ALL,
+ 
+ 	.max_sectors		= 0xFFFF,
+ 	.shost_attrs		= qla2x00_host_attrs,
+ 
+ 	.supported_mode		= MODE_INITIATOR,
+ 	.track_queue_depth	= 1,
+ 	.cmd_size		= sizeof(srb_t),
+ };
+ 
++>>>>>>> 85cffefa09e4 (scsi: qla2xxx: Fix a race condition between aborting and completing a SCSI command)
  static const struct pci_error_handlers qla2xxx_err_handler = {
  	.error_detected = qla2xxx_pci_error_detected,
  	.mmio_enabled = qla2xxx_pci_mmio_enabled,
diff --git a/drivers/scsi/qla2xxx/qla_def.h b/drivers/scsi/qla2xxx/qla_def.h
index a822393932e8..a80955aede7b 100644
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@ -618,7 +618,6 @@ typedef struct srb {
 } srb_t;
 
 #define GET_CMD_SP(sp) (sp->u.scmd.cmd)
-#define SET_CMD_SP(sp, cmd) (sp->u.scmd.cmd = cmd)
 #define GET_CMD_CTX_SP(sp) (sp->u.scmd.ctx)
 
 #define GET_CMD_SENSE_LEN(sp) \
* Unmerged path drivers/scsi/qla2xxx/qla_os.c
