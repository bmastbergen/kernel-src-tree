bnxt_en: Fix devlink NVRAM related byte order related issues.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] bnxt_en: Fix devlink NVRAM related byte order related issues (Jonathan Toppins) [1773724]
Rebuild_FUZZ: 99.17%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 83a46a82b96c1928ad82958752523fb0c7d9fcce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/83a46a82.failed

The current code does not do endian swapping between the devlink
parameter and the internal NVRAM representation.  Define a union to
represent the little endian NVRAM data and add 2 helper functions to
copy to and from the NVRAM data with the proper byte swapping.

Fixes: 782a624d00fa ("bnxt_en: Add bnxt_en initial port params table and register it")
	Cc: Jiri Pirko <jiri@mellanox.com>
	Reviewed-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
(cherry picked from commit 83a46a82b96c1928ad82958752523fb0c7d9fcce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index 336fbceafb45,bd4b9f31614e..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -29,25 -215,68 +29,71 @@@ enum bnxt_dl_param_id 
  
  static const struct bnxt_dl_nvm_param nvm_params[] = {
  	{DEVLINK_PARAM_GENERIC_ID_ENABLE_SRIOV, NVM_OFF_ENABLE_SRIOV,
 -	 BNXT_NVM_SHARED_CFG, 1, 1},
 +	 BNXT_NVM_SHARED_CFG, 1},
  	{DEVLINK_PARAM_GENERIC_ID_IGNORE_ARI, NVM_OFF_IGNORE_ARI,
 -	 BNXT_NVM_SHARED_CFG, 1, 1},
 +	 BNXT_NVM_SHARED_CFG, 1},
  	{DEVLINK_PARAM_GENERIC_ID_MSIX_VEC_PER_PF_MAX,
 -	 NVM_OFF_MSIX_VEC_PER_PF_MAX, BNXT_NVM_SHARED_CFG, 10, 4},
 +	 NVM_OFF_MSIX_VEC_PER_PF_MAX, BNXT_NVM_SHARED_CFG, 10},
  	{DEVLINK_PARAM_GENERIC_ID_MSIX_VEC_PER_PF_MIN,
 -	 NVM_OFF_MSIX_VEC_PER_PF_MIN, BNXT_NVM_SHARED_CFG, 7, 4},
 +	 NVM_OFF_MSIX_VEC_PER_PF_MIN, BNXT_NVM_SHARED_CFG, 7},
  	{BNXT_DEVLINK_PARAM_ID_GRE_VER_CHECK, NVM_OFF_DIS_GRE_VER_CHECK,
 -	 BNXT_NVM_SHARED_CFG, 1, 1},
 +	 BNXT_NVM_SHARED_CFG, 1},
  };
  
+ union bnxt_nvm_data {
+ 	u8	val8;
+ 	__le32	val32;
+ };
+ 
+ static void bnxt_copy_to_nvm_data(union bnxt_nvm_data *dst,
+ 				  union devlink_param_value *src,
+ 				  int nvm_num_bits, int dl_num_bytes)
+ {
+ 	u32 val32 = 0;
+ 
+ 	if (nvm_num_bits == 1) {
+ 		dst->val8 = src->vbool;
+ 		return;
+ 	}
+ 	if (dl_num_bytes == 4)
+ 		val32 = src->vu32;
+ 	else if (dl_num_bytes == 2)
+ 		val32 = (u32)src->vu16;
+ 	else if (dl_num_bytes == 1)
+ 		val32 = (u32)src->vu8;
+ 	dst->val32 = cpu_to_le32(val32);
+ }
+ 
+ static void bnxt_copy_from_nvm_data(union devlink_param_value *dst,
+ 				    union bnxt_nvm_data *src,
+ 				    int nvm_num_bits, int dl_num_bytes)
+ {
+ 	u32 val32;
+ 
+ 	if (nvm_num_bits == 1) {
+ 		dst->vbool = src->val8;
+ 		return;
+ 	}
+ 	val32 = le32_to_cpu(src->val32);
+ 	if (dl_num_bytes == 4)
+ 		dst->vu32 = val32;
+ 	else if (dl_num_bytes == 2)
+ 		dst->vu16 = (u16)val32;
+ 	else if (dl_num_bytes == 1)
+ 		dst->vu8 = (u8)val32;
+ }
+ 
  static int bnxt_hwrm_nvm_req(struct bnxt *bp, u32 param_id, void *msg,
  			     int msg_len, union devlink_param_value *val)
  {
  	struct hwrm_nvm_get_variable_input *req = msg;
- 	void *data_addr = NULL, *buf = NULL;
  	struct bnxt_dl_nvm_param nvm_param;
++<<<<<<< HEAD
 +	int bytesize, idx = 0, rc, i;
++=======
+ 	union bnxt_nvm_data *data;
++>>>>>>> 83a46a82b96c (bnxt_en: Fix devlink NVRAM related byte order related issues.)
  	dma_addr_t data_dma_addr;
 -	int idx = 0, rc, i;
  
  	/* Get/Set NVM CFG parameter is supported only on PFs */
  	if (BNXT_VF(bp))
@@@ -68,27 -297,9 +114,33 @@@
  	else if (nvm_param.dir_type == BNXT_NVM_FUNC_CFG)
  		idx = bp->pf.fw_fid - BNXT_FIRST_PF_FID;
  
++<<<<<<< HEAD
 +	bytesize = roundup(nvm_param.num_bits, BITS_PER_BYTE) / BITS_PER_BYTE;
 +	switch (bytesize) {
 +	case 1:
 +		if (nvm_param.num_bits == 1)
 +			buf = &val->vbool;
 +		else
 +			buf = &val->vu8;
 +		break;
 +	case 2:
 +		buf = &val->vu16;
 +		break;
 +	case 4:
 +		buf = &val->vu32;
 +		break;
 +	default:
 +		return -EFAULT;
 +	}
 +
 +	data_addr = dma_zalloc_coherent(&bp->pdev->dev, bytesize,
 +					&data_dma_addr, GFP_KERNEL);
 +	if (!data_addr)
++=======
+ 	data = dma_alloc_coherent(&bp->pdev->dev, sizeof(*data),
+ 				  &data_dma_addr, GFP_KERNEL);
+ 	if (!data)
++>>>>>>> 83a46a82b96c (bnxt_en: Fix devlink NVRAM related byte order related issues.)
  		return -ENOMEM;
  
  	req->dest_data_addr = cpu_to_le64(data_dma_addr);
@@@ -99,16 -310,18 +151,29 @@@
  		req->dimensions = cpu_to_le16(1);
  
  	if (req->req_type == cpu_to_le16(HWRM_NVM_SET_VARIABLE)) {
++<<<<<<< HEAD
 +		memcpy(data_addr, buf, bytesize);
++=======
+ 		bnxt_copy_to_nvm_data(data, val, nvm_param.nvm_num_bits,
+ 				      nvm_param.dl_num_bytes);
++>>>>>>> 83a46a82b96c (bnxt_en: Fix devlink NVRAM related byte order related issues.)
  		rc = hwrm_send_message(bp, msg, msg_len, HWRM_CMD_TIMEOUT);
  	} else {
  		rc = hwrm_send_message_silent(bp, msg, msg_len,
  					      HWRM_CMD_TIMEOUT);
+ 		if (!rc)
+ 			bnxt_copy_from_nvm_data(val, data,
+ 						nvm_param.nvm_num_bits,
+ 						nvm_param.dl_num_bytes);
  	}
++<<<<<<< HEAD
 +	if (!rc && req->req_type == cpu_to_le16(HWRM_NVM_GET_VARIABLE))
 +		memcpy(buf, data_addr, bytesize);
 +
 +	dma_free_coherent(&bp->pdev->dev, bytesize, data_addr, data_dma_addr);
++=======
+ 	dma_free_coherent(&bp->pdev->dev, sizeof(*data), data, data_dma_addr);
++>>>>>>> 83a46a82b96c (bnxt_en: Fix devlink NVRAM related byte order related issues.)
  	if (rc == -EACCES)
  		netdev_err(bp->dev, "PF does not have admin privileges to modify NVM config\n");
  	return rc;
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
