net/mlx5: E-switch, Initialize TSAR Qos hardware block before its user vports

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: E-switch, Initialize TSAR Qos hardware block before its user vports (Alaa Hleihel) [1724336]
Rebuild_FUZZ: 97.33%
commit-author Parav Pandit <parav@mellanox.com>
commit 610090ebce92ab6a3e1e623344be5a9dd72a8b6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/610090eb.failed

First enable TSAR Qos hardware block in device before enabling its
user vports.

This refactor is needed so that vports can be enabled before their
representor netdevice can be created.

While at it, esw_create_tsar() returns error code which was used only to
print error. However esw_create_tsar() already prints warning if it hits
an error.
Hence, remove the redundant warning.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 610090ebce92ab6a3e1e623344be5a9dd72a8b6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index 0fb996a72fb2,820970911f8b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@@ -1731,13 -1813,13 +1730,15 @@@ int mlx5_eswitch_enable_sriov(struct ml
  	}
  
  	if (!MLX5_CAP_ESW_INGRESS_ACL(esw->dev, ft_support))
 -		esw_warn(esw->dev, "ingress ACL is not supported by FW\n");
 +		esw_warn(esw->dev, "E-Switch ingress ACL is not supported by FW\n");
  
  	if (!MLX5_CAP_ESW_EGRESS_ACL(esw->dev, ft_support))
 -		esw_warn(esw->dev, "engress ACL is not supported by FW\n");
 +		esw_warn(esw->dev, "E-Switch engress ACL is not supported by FW\n");
 +
 +	esw_info(esw->dev, "E-Switch enable SRIOV: nvfs(%d) mode (%d)\n", nvfs, mode);
  
+ 	esw_create_tsar(esw);
+ 
  	esw->mode = mode;
  
  	mlx5_lag_update(esw->dev);
@@@ -1755,25 -1837,29 +1756,30 @@@
  	if (err)
  		goto abort;
  
++<<<<<<< HEAD
 +	err = esw_create_tsar(esw);
 +	if (err)
 +		esw_warn(esw->dev, "Failed to create eswitch TSAR");
 +
 +	/* Don't enable vport events when in SRIOV_OFFLOADS mode, since:
 +	 * 1. L2 table (MPFS) is programmed by PF/VF representors netdevs set_rx_mode
 +	 * 2. FDB/Eswitch is programmed by user space tools
 +	 */
 +	enabled_events = (mode == SRIOV_LEGACY) ? SRIOV_VPORT_EVENTS : 0;
 +	for (i = 0; i <= nvfs; i++)
 +		esw_enable_vport(esw, i, enabled_events);
++=======
+ 	enabled_events = (mode == MLX5_ESWITCH_LEGACY) ? SRIOV_VPORT_EVENTS :
+ 		UC_ADDR_CHANGE;
++>>>>>>> 610090ebce92 (net/mlx5: E-switch, Initialize TSAR Qos hardware block before its user vports)
  
 -	/* Enable PF vport */
 -	vport = mlx5_eswitch_get_vport(esw, MLX5_VPORT_PF);
 -	esw_enable_vport(esw, vport, enabled_events);
 -
 -	/* Enable ECPF vports */
 -	if (mlx5_ecpf_vport_exists(esw->dev)) {
 -		vport = mlx5_eswitch_get_vport(esw, MLX5_VPORT_ECPF);
 -		esw_enable_vport(esw, vport, enabled_events);
 +	if (mode == SRIOV_LEGACY) {
 +		MLX5_NB_INIT(&esw->nb, eswitch_vport_event, NIC_VPORT_CHANGE);
 +		mlx5_eq_notifier_register(esw->dev, &esw->nb);
  	}
  
 -	/* Enable VF vports */
 -	mlx5_esw_for_each_vf_vport(esw, i, vport, esw->esw_funcs.num_vfs)
 -		esw_enable_vport(esw, vport, enabled_events);
 -
 -	mlx5_eswitch_event_handlers_register(esw);
 -
 -	esw_info(esw->dev, "Enable: mode(%s), nvfs(%d), active vports(%d)\n",
 -		 mode == MLX5_ESWITCH_LEGACY ? "LEGACY" : "OFFLOADS",
 -		 esw->esw_funcs.num_vfs, esw->enabled_vports);
 -
 +	esw_info(esw->dev, "SRIOV enabled: active vports(%d)\n",
 +		 esw->enabled_vports);
  	return 0;
  
  abort:
@@@ -1812,15 -1896,15 +1818,21 @@@ void mlx5_eswitch_disable_sriov(struct 
  	if (mc_promisc && mc_promisc->uplink_rule)
  		mlx5_del_flow_rules(mc_promisc->uplink_rule);
  
++<<<<<<< HEAD
 +	esw_destroy_tsar(esw);
 +
 +	if (esw->mode == SRIOV_LEGACY)
++=======
+ 	if (esw->mode == MLX5_ESWITCH_LEGACY)
++>>>>>>> 610090ebce92 (net/mlx5: E-switch, Initialize TSAR Qos hardware block before its user vports)
  		esw_destroy_legacy_table(esw);
 -	else if (esw->mode == MLX5_ESWITCH_OFFLOADS)
 -		esw_offloads_cleanup(esw);
 +	else if (esw->mode == SRIOV_OFFLOADS)
 +		esw_offloads_cleanup(esw, nvports);
  
+ 	esw_destroy_tsar(esw);
+ 
  	old_mode = esw->mode;
 -	esw->mode = MLX5_ESWITCH_NONE;
 +	esw->mode = SRIOV_NONE;
  
  	mlx5_lag_update(esw->dev);
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
