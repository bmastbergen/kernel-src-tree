ASoC: codec2codec: remove ephemeral variables

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: codec2codec: remove ephemeral variables (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 93.75%
commit-author Jerome Brunet <jbrunet@baylibre.com>
commit a72706ed8208ac3f72d1c3ebbc6509e368b0dcb0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a72706ed.failed

Now that codec to codec links struct snd_soc_pcm_runtime have lasting pcm
and substreams, let's use them. Alsa allocate and keep the
struct snd_pcm_runtime as long as the link is powered.

	Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
Link: https://lore.kernel.org/r/20190725165949.29699-6-jbrunet@baylibre.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit a72706ed8208ac3f72d1c3ebbc6509e368b0dcb0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-dapm.c
diff --cc sound/soc/soc-dapm.c
index 7874989d43fc,1c953a1b46ce..000000000000
--- a/sound/soc/soc-dapm.c
+++ b/sound/soc/soc-dapm.c
@@@ -3791,20 -3772,64 +3791,72 @@@ static int snd_soc_dai_link_event(struc
  {
  	struct snd_soc_dapm_path *path;
  	struct snd_soc_dai *source, *sink;
 -	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 +	struct snd_soc_pcm_runtime *rtd = w->priv;
 +	const struct snd_soc_pcm_stream *config;
 +	struct snd_pcm_substream substream;
  	struct snd_pcm_hw_params *params = NULL;
++<<<<<<< HEAD
++=======
+ 	const struct snd_soc_pcm_stream *config = NULL;
++>>>>>>> a72706ed8208 (ASoC: codec2codec: remove ephemeral variables)
  	struct snd_pcm_runtime *runtime = NULL;
  	unsigned int fmt;
  	int ret = 0;
  
++<<<<<<< HEAD
++=======
+ 	params = kzalloc(sizeof(*params), GFP_KERNEL);
+ 	if (!params)
+ 		return -ENOMEM;
+ 
+ 	runtime = kzalloc(sizeof(*runtime), GFP_KERNEL);
+ 	if (!runtime) {
+ 		ret = -ENOMEM;
+ 		goto out;
+ 	}
+ 
+ 	substream->runtime = runtime;
+ 
+ 	substream->stream = SNDRV_PCM_STREAM_CAPTURE;
+ 	snd_soc_dapm_widget_for_each_source_path(w, path) {
+ 		source = path->source->priv;
+ 
+ 		ret = snd_soc_dai_startup(source, substream);
+ 		if (ret < 0) {
+ 			dev_err(source->dev,
+ 				"ASoC: startup() failed: %d\n", ret);
+ 			goto out;
+ 		}
+ 		source->active++;
+ 	}
+ 
+ 	substream->stream = SNDRV_PCM_STREAM_PLAYBACK;
+ 	snd_soc_dapm_widget_for_each_sink_path(w, path) {
+ 		sink = path->sink->priv;
+ 
+ 		ret = snd_soc_dai_startup(sink, substream);
+ 		if (ret < 0) {
+ 			dev_err(sink->dev,
+ 				"ASoC: startup() failed: %d\n", ret);
+ 			goto out;
+ 		}
+ 		sink->active++;
+ 	}
+ 
+ 	substream->hw_opened = 1;
+ 
+ 	/*
+ 	 * Note: getting the config after .startup() gives a chance to
+ 	 * either party on the link to alter the configuration if
+ 	 * necessary
+ 	 */
++>>>>>>> a72706ed8208 (ASoC: codec2codec: remove ephemeral variables)
  	config = rtd->dai_link->params + rtd->params_select;
 -	if (WARN_ON(!config)) {
 -		dev_err(w->dapm->dev, "ASoC: link config missing\n");
 -		ret = -EINVAL;
 -		goto out;
 -	}
 +
 +	if (WARN_ON(!config) ||
 +	    WARN_ON(list_empty(&w->edges[SND_SOC_DAPM_DIR_OUT]) ||
 +		    list_empty(&w->edges[SND_SOC_DAPM_DIR_IN])))
 +		return -EINVAL;
  
  	/* Be a little careful as we don't want to overflow the mask array */
  	if (config->formats) {
@@@ -3833,62 -3852,54 +3885,112 @@@
  	hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS)->max
  		= config->channels_max;
  
++<<<<<<< HEAD
 +	memset(&substream, 0, sizeof(substream));
 +
 +	/* Allocate a dummy snd_pcm_runtime for startup() and other ops() */
 +	runtime = kzalloc(sizeof(*runtime), GFP_KERNEL);
 +	if (!runtime) {
 +		ret = -ENOMEM;
 +		goto out;
 +	}
 +	substream.runtime = runtime;
 +	substream.private_data = rtd;
 +
 +	switch (event) {
 +	case SND_SOC_DAPM_PRE_PMU:
 +		substream.stream = SNDRV_PCM_STREAM_CAPTURE;
 +		snd_soc_dapm_widget_for_each_source_path(w, path) {
 +			source = path->source->priv;
++=======
+ 	substream->stream = SNDRV_PCM_STREAM_CAPTURE;
+ 	snd_soc_dapm_widget_for_each_source_path(w, path) {
+ 		source = path->source->priv;
+ 
+ 		ret = snd_soc_dai_hw_params(source, substream, params);
+ 		if (ret < 0)
+ 			goto out;
+ 
+ 		dapm_update_dai_unlocked(substream, params, source);
+ 	}
+ 
+ 	substream->stream = SNDRV_PCM_STREAM_PLAYBACK;
+ 	snd_soc_dapm_widget_for_each_sink_path(w, path) {
+ 		sink = path->sink->priv;
+ 
+ 		ret = snd_soc_dai_hw_params(sink, substream, params);
+ 		if (ret < 0)
+ 			goto out;
+ 
+ 		dapm_update_dai_unlocked(substream, params, sink);
+ 	}
+ 
+ out:
+ 	if (ret < 0)
+ 		kfree(runtime);
+ 
+ 	kfree(params);
+ 	return ret;
+ }
+ 
+ static int snd_soc_dai_link_event(struct snd_soc_dapm_widget *w,
+ 				  struct snd_kcontrol *kcontrol, int event)
+ {
+ 	struct snd_soc_dapm_path *path;
+ 	struct snd_soc_dai *source, *sink;
+ 	struct snd_pcm_substream *substream = w->priv;
+ 	int ret = 0, saved_stream = substream->stream;
+ 
+ 	if (WARN_ON(list_empty(&w->edges[SND_SOC_DAPM_DIR_OUT]) ||
+ 		    list_empty(&w->edges[SND_SOC_DAPM_DIR_IN])))
+ 		return -EINVAL;
+ 
+ 	switch (event) {
+ 	case SND_SOC_DAPM_PRE_PMU:
+ 		ret = snd_soc_dai_link_event_pre_pmu(w, substream);
+ 		if (ret < 0)
+ 			goto out;
++>>>>>>> a72706ed8208 (ASoC: codec2codec: remove ephemeral variables)
 +
 +			if (source->driver->ops->startup) {
 +				ret = source->driver->ops->startup(&substream,
 +								   source);
 +				if (ret < 0) {
 +					dev_err(source->dev,
 +						"ASoC: startup() failed: %d\n",
 +						ret);
 +					goto out;
 +				}
 +			}
 +			source->active++;
 +			ret = soc_dai_hw_params(&substream, params, source);
 +			if (ret < 0)
 +				goto out;
 +
 +			dapm_update_dai_unlocked(&substream, params, source);
 +		}
 +
 +		substream.stream = SNDRV_PCM_STREAM_PLAYBACK;
 +		snd_soc_dapm_widget_for_each_sink_path(w, path) {
 +			sink = path->sink->priv;
 +
 +			if (sink->driver->ops->startup) {
 +				ret = sink->driver->ops->startup(&substream,
 +								 sink);
 +				if (ret < 0) {
 +					dev_err(sink->dev,
 +						"ASoC: startup() failed: %d\n",
 +						ret);
 +					goto out;
 +				}
 +			}
 +			sink->active++;
 +			ret = soc_dai_hw_params(&substream, params, sink);
 +			if (ret < 0)
 +				goto out;
  
 +			dapm_update_dai_unlocked(&substream, params, sink);
 +		}
  		break;
  
  	case SND_SOC_DAPM_POST_PMU:
@@@ -3916,30 -3927,30 +4018,51 @@@
  			ret = 0;
  		}
  
- 		substream.stream = SNDRV_PCM_STREAM_CAPTURE;
+ 		substream->stream = SNDRV_PCM_STREAM_CAPTURE;
  		snd_soc_dapm_widget_for_each_source_path(w, path) {
  			source = path->source->priv;
++<<<<<<< HEAD
 +
 +			if (source->driver->ops->hw_free)
 +				source->driver->ops->hw_free(&substream,
 +							     source);
 +
 +			source->active--;
 +			if (source->driver->ops->shutdown)
 +				source->driver->ops->shutdown(&substream,
 +							      source);
++=======
+ 			snd_soc_dai_hw_free(source, substream);
  		}
  
- 		substream.stream = SNDRV_PCM_STREAM_PLAYBACK;
+ 		substream->stream = SNDRV_PCM_STREAM_PLAYBACK;
+ 		snd_soc_dapm_widget_for_each_sink_path(w, path) {
+ 			sink = path->sink->priv;
+ 			snd_soc_dai_hw_free(sink, substream);
+ 		}
+ 
+ 		substream->stream = SNDRV_PCM_STREAM_CAPTURE;
+ 		snd_soc_dapm_widget_for_each_source_path(w, path) {
+ 			source = path->source->priv;
+ 			source->active--;
+ 			snd_soc_dai_shutdown(source, substream);
++>>>>>>> a72706ed8208 (ASoC: codec2codec: remove ephemeral variables)
+ 		}
+ 
+ 		substream->stream = SNDRV_PCM_STREAM_PLAYBACK;
  		snd_soc_dapm_widget_for_each_sink_path(w, path) {
  			sink = path->sink->priv;
 +
 +			if (sink->driver->ops->hw_free)
 +				sink->driver->ops->hw_free(&substream, sink);
 +
  			sink->active--;
++<<<<<<< HEAD
 +			if (sink->driver->ops->shutdown)
 +				sink->driver->ops->shutdown(&substream, sink);
++=======
+ 			snd_soc_dai_shutdown(sink, substream);
++>>>>>>> a72706ed8208 (ASoC: codec2codec: remove ephemeral variables)
  		}
  		break;
  
@@@ -3949,8 -3964,8 +4076,13 @@@
  	}
  
  out:
++<<<<<<< HEAD
 +	kfree(runtime);
 +	kfree(params);
++=======
+ 	/* Restore the substream direction */
+ 	substream->stream = saved_stream;
++>>>>>>> a72706ed8208 (ASoC: codec2codec: remove ephemeral variables)
  	return ret;
  }
  
* Unmerged path sound/soc/soc-dapm.c
