arm64: KVM: regmap: Fix unexpected switch fall-through

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [arm64] kvm: regmap: Fix unexpected switch fall-through (Auger Eric) [1749501]
Rebuild_FUZZ: 93.07%
commit-author Anders Roxell <anders.roxell@linaro.org>
commit 3d584a3c85d6fe2cf878f220d4ad7145e7f89218
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/3d584a3c.failed

When fall-through warnings was enabled by default, commit d93512ef0f0e
("Makefile: Globally enable fall-through warning"), the following
warnings was starting to show up:

In file included from ../arch/arm64/include/asm/kvm_emulate.h:19,
                 from ../arch/arm64/kvm/regmap.c:13:
../arch/arm64/kvm/regmap.c: In function ‘vcpu_write_spsr32’:
../arch/arm64/include/asm/kvm_hyp.h:31:3: warning: this statement may fall
 through [-Wimplicit-fallthrough=]
   asm volatile(ALTERNATIVE(__msr_s(r##nvh, "%x0"), \
   ^~~
../arch/arm64/include/asm/kvm_hyp.h:46:31: note: in expansion of macro ‘write_sysreg_elx’
 #define write_sysreg_el1(v,r) write_sysreg_elx(v, r, _EL1, _EL12)
                               ^~~~~~~~~~~~~~~~
../arch/arm64/kvm/regmap.c:180:3: note: in expansion of macro ‘write_sysreg_el1’
   write_sysreg_el1(v, SYS_SPSR);
   ^~~~~~~~~~~~~~~~
../arch/arm64/kvm/regmap.c:181:2: note: here
  case KVM_SPSR_ABT:
  ^~~~
In file included from ../arch/arm64/include/asm/cputype.h:132,
                 from ../arch/arm64/include/asm/cache.h:8,
                 from ../include/linux/cache.h:6,
                 from ../include/linux/printk.h:9,
                 from ../include/linux/kernel.h:15,
                 from ../include/asm-generic/bug.h:18,
                 from ../arch/arm64/include/asm/bug.h:26,
                 from ../include/linux/bug.h:5,
                 from ../include/linux/mmdebug.h:5,
                 from ../include/linux/mm.h:9,
                 from ../arch/arm64/kvm/regmap.c:11:
../arch/arm64/include/asm/sysreg.h:837:2: warning: this statement may fall
 through [-Wimplicit-fallthrough=]
  asm volatile("msr " __stringify(r) ", %x0"  \
  ^~~
../arch/arm64/kvm/regmap.c:182:3: note: in expansion of macro ‘write_sysreg’
   write_sysreg(v, spsr_abt);
   ^~~~~~~~~~~~
../arch/arm64/kvm/regmap.c:183:2: note: here
  case KVM_SPSR_UND:
  ^~~~

Rework to add a 'break;' in the swich-case since it didn't have that,
leading to an interresting set of bugs.

	Cc: stable@vger.kernel.org # v4.17+
Fixes: a892819560c4 ("KVM: arm64: Prepare to handle deferred save/restore of 32-bit registers")
	Signed-off-by: Anders Roxell <anders.roxell@linaro.org>
[maz: reworked commit message, fixed stable range]
	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit 3d584a3c85d6fe2cf878f220d4ad7145e7f89218)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/regmap.c
diff --cc arch/arm64/kvm/regmap.c
index 7a5173ea2276,a900181e3867..000000000000
--- a/arch/arm64/kvm/regmap.c
+++ b/arch/arm64/kvm/regmap.c
@@@ -188,14 -177,19 +188,23 @@@ void vcpu_write_spsr32(struct kvm_vcpu 
  
  	switch (spsr_idx) {
  	case KVM_SPSR_SVC:
++<<<<<<< HEAD
 +		write_sysreg_el1(v, spsr);
++=======
+ 		write_sysreg_el1(v, SYS_SPSR);
+ 		break;
++>>>>>>> 3d584a3c85d6 (arm64: KVM: regmap: Fix unexpected switch fall-through)
  	case KVM_SPSR_ABT:
  		write_sysreg(v, spsr_abt);
+ 		break;
  	case KVM_SPSR_UND:
  		write_sysreg(v, spsr_und);
+ 		break;
  	case KVM_SPSR_IRQ:
  		write_sysreg(v, spsr_irq);
+ 		break;
  	case KVM_SPSR_FIQ:
  		write_sysreg(v, spsr_fiq);
+ 		break;
  	}
  }
* Unmerged path arch/arm64/kvm/regmap.c
