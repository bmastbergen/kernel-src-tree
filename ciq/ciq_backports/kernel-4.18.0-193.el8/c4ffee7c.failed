RDMA/netlink: Implement counter dumpit calback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Mark Zhang <markz@mellanox.com>
commit c4ffee7c9bdba7b189df3251e375c4c7e93a91ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/c4ffee7c.failed

This patch adds the ability to return all available counters together with
their properties and hwstats.

	Signed-off-by: Mark Zhang <markz@mellanox.com>
	Reviewed-by: Majd Dibbiny <majd@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit c4ffee7c9bdba7b189df3251e375c4c7e93a91ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/counters.c
#	drivers/infiniband/core/device.c
#	drivers/infiniband/core/nldev.c
#	include/rdma/ib_verbs.h
#	include/rdma/rdma_counter.h
#	include/uapi/rdma/rdma_netlink.h
diff --cc drivers/infiniband/core/device.c
index ec96a7b1c811,bdf61499e6d5..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -1282,6 -2471,11 +1282,14 @@@ void ib_set_device_ops(struct ib_devic
  	SET_DEVICE_OP(dev_ops, alloc_xrcd);
  	SET_DEVICE_OP(dev_ops, attach_mcast);
  	SET_DEVICE_OP(dev_ops, check_mr_status);
++<<<<<<< HEAD
++=======
+ 	SET_DEVICE_OP(dev_ops, counter_alloc_stats);
+ 	SET_DEVICE_OP(dev_ops, counter_bind_qp);
+ 	SET_DEVICE_OP(dev_ops, counter_dealloc);
+ 	SET_DEVICE_OP(dev_ops, counter_unbind_qp);
+ 	SET_DEVICE_OP(dev_ops, counter_update_stats);
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  	SET_DEVICE_OP(dev_ops, create_ah);
  	SET_DEVICE_OP(dev_ops, create_counters);
  	SET_DEVICE_OP(dev_ops, create_cq);
diff --cc drivers/infiniband/core/nldev.c
index efccd8e0fb77,cebc15b23b15..000000000000
--- a/drivers/infiniband/core/nldev.c
+++ b/drivers/infiniband/core/nldev.c
@@@ -39,74 -40,106 +39,93 @@@
  
  #include "core_priv.h"
  #include "cma_priv.h"
 -#include "restrack.h"
  
 -/*
 - * Sort array elements by the netlink attribute name
 - */
  static const struct nla_policy nldev_policy[RDMA_NLDEV_ATTR_MAX] = {
 -	[RDMA_NLDEV_ATTR_CHARDEV]		= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_CHARDEV_ABI]		= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_CHARDEV_NAME]		= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_EMPTY_STRING },
 -	[RDMA_NLDEV_ATTR_CHARDEV_TYPE]		= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_CHARDEV_TYPE_SIZE },
 -	[RDMA_NLDEV_ATTR_DEV_INDEX]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_DEV_NAME]		= { .type = NLA_NUL_STRING,
 -					.len = IB_DEVICE_NAME_MAX },
 -	[RDMA_NLDEV_ATTR_DEV_NODE_TYPE]		= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_DEV_PROTOCOL]		= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_EMPTY_STRING },
 -	[RDMA_NLDEV_ATTR_DRIVER]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_DRIVER_ENTRY]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_DRIVER_PRINT_TYPE]	= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_DRIVER_STRING]		= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_EMPTY_STRING },
 -	[RDMA_NLDEV_ATTR_DRIVER_S32]		= { .type = NLA_S32 },
 -	[RDMA_NLDEV_ATTR_DRIVER_S64]		= { .type = NLA_S64 },
 -	[RDMA_NLDEV_ATTR_DRIVER_U32]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_DRIVER_U64]		= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_FW_VERSION]		= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_EMPTY_STRING },
 -	[RDMA_NLDEV_ATTR_LID]			= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_LINK_TYPE]		= { .type = NLA_NUL_STRING,
 -					.len = IFNAMSIZ },
 -	[RDMA_NLDEV_ATTR_LMC]			= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_NDEV_INDEX]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_NDEV_NAME]		= { .type = NLA_NUL_STRING,
 -					.len = IFNAMSIZ },
 -	[RDMA_NLDEV_ATTR_NODE_GUID]		= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_PORT_INDEX]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_PORT_PHYS_STATE]	= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_PORT_STATE]		= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_DEV_INDEX]     = { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_DEV_NAME]	= { .type = NLA_NUL_STRING,
 +					    .len = IB_DEVICE_NAME_MAX - 1},
 +	[RDMA_NLDEV_ATTR_PORT_INDEX]	= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_FW_VERSION]	= { .type = NLA_NUL_STRING,
 +					    .len = IB_FW_VERSION_NAME_MAX - 1},
 +	[RDMA_NLDEV_ATTR_NODE_GUID]	= { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_SYS_IMAGE_GUID] = { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_SUBNET_PREFIX]	= { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_LID]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_SM_LID]	= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_LMC]		= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_PORT_STATE]	= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_PORT_PHYS_STATE] = { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_DEV_NODE_TYPE] = { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_RES_SUMMARY]	= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY]	= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME] = { .type = NLA_NUL_STRING,
 +					     .len = 16 },
 +	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR] = { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_RES_QP]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_QP_ENTRY]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_LQPN]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_RQPN]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_RQ_PSN]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_SQ_PSN]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_PATH_MIG_STATE] = { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_RES_TYPE]		= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_RES_STATE]		= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_RES_PID]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_KERN_NAME]		= { .type = NLA_NUL_STRING,
 +						    .len = TASK_COMM_LEN },
  	[RDMA_NLDEV_ATTR_RES_CM_ID]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_CM_IDN]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_CM_ID_ENTRY]	= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_RES_PS]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_SRC_ADDR]	= {
 +			.len = sizeof(struct __kernel_sockaddr_storage) },
 +	[RDMA_NLDEV_ATTR_RES_DST_ADDR]	= {
 +			.len = sizeof(struct __kernel_sockaddr_storage) },
  	[RDMA_NLDEV_ATTR_RES_CQ]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_CQE]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_CQN]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_CQ_ENTRY]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_CTXN]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_DST_ADDR]		= {
 -			.len = sizeof(struct __kernel_sockaddr_storage) },
 -	[RDMA_NLDEV_ATTR_RES_IOVA]		= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_RES_KERN_NAME]		= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_EMPTY_STRING },
 -	[RDMA_NLDEV_ATTR_RES_LKEY]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_LOCAL_DMA_LKEY]	= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_LQPN]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_CQE]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_USECNT]		= { .type = NLA_U64 },
++<<<<<<< HEAD
 +	[RDMA_NLDEV_ATTR_RES_POLL_CTX]		= { .type = NLA_U8 },
  	[RDMA_NLDEV_ATTR_RES_MR]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_MRLEN]		= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_RES_MRN]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_MR_ENTRY]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_PATH_MIG_STATE]	= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_RES_RKEY]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_LKEY]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_IOVA]		= { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_RES_MRLEN]		= { .type = NLA_U64 },
  	[RDMA_NLDEV_ATTR_RES_PD]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_PDN]		= { .type = NLA_U32 },
  	[RDMA_NLDEV_ATTR_RES_PD_ENTRY]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_PID]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_POLL_CTX]		= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_RES_PS]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_QP]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_QP_ENTRY]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_RKEY]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_RQPN]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_RQ_PSN]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_SQ_PSN]		= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_SRC_ADDR]		= {
 -			.len = sizeof(struct __kernel_sockaddr_storage) },
 -	[RDMA_NLDEV_ATTR_RES_STATE]		= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_RES_SUMMARY]		= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY]	= { .type = NLA_NESTED },
 -	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR]= { .type = NLA_U64 },
 -	[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME]= { .type = NLA_NUL_STRING,
 -					.len = RDMA_NLDEV_ATTR_EMPTY_STRING },
 -	[RDMA_NLDEV_ATTR_RES_TYPE]		= { .type = NLA_U8 },
 -	[RDMA_NLDEV_ATTR_RES_UNSAFE_GLOBAL_RKEY]= { .type = NLA_U32 },
 -	[RDMA_NLDEV_ATTR_RES_USECNT]		= { .type = NLA_U64 },
 +	[RDMA_NLDEV_ATTR_RES_LOCAL_DMA_LKEY]	= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_RES_UNSAFE_GLOBAL_RKEY] = { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_NDEV_INDEX]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_NDEV_NAME]		= { .type = NLA_NUL_STRING,
 +						    .len = IFNAMSIZ },
 +	[RDMA_NLDEV_ATTR_DRIVER]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_DRIVER_ENTRY]		= { .type = NLA_NESTED },
 +	[RDMA_NLDEV_ATTR_DRIVER_STRING]		= { .type = NLA_NUL_STRING,
 +				    .len = RDMA_NLDEV_ATTR_ENTRY_STRLEN },
 +	[RDMA_NLDEV_ATTR_DRIVER_PRINT_TYPE]	= { .type = NLA_U8 },
 +	[RDMA_NLDEV_ATTR_DRIVER_S32]		= { .type = NLA_S32 },
 +	[RDMA_NLDEV_ATTR_DRIVER_U32]		= { .type = NLA_U32 },
 +	[RDMA_NLDEV_ATTR_DRIVER_S64]		= { .type = NLA_S64 },
 +	[RDMA_NLDEV_ATTR_DRIVER_U64]		= { .type = NLA_U64 },
++=======
+ 	[RDMA_NLDEV_ATTR_SM_LID]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_SUBNET_PREFIX]		= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK]	= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_STAT_MODE]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_STAT_RES]		= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_STAT_COUNTER]		= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_STAT_COUNTER_ENTRY]	= { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_STAT_COUNTER_ID]       = { .type = NLA_U32 },
+ 	[RDMA_NLDEV_ATTR_STAT_HWCOUNTERS]       = { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY]  = { .type = NLA_NESTED },
+ 	[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_NAME] = { .type = NLA_NUL_STRING },
+ 	[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_VALUE] = { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_SYS_IMAGE_GUID]	= { .type = NLA_U64 },
+ 	[RDMA_NLDEV_ATTR_UVERBS_DRIVER_ID]	= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_NET_NS_FD]			= { .type = NLA_U32 },
+ 	[RDMA_NLDEV_SYS_ATTR_NETNS_MODE]	= { .type = NLA_U8 },
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  };
  
  static int put_driver_name_print_type(struct sk_buff *msg, const char *name,
@@@ -587,18 -627,168 +606,164 @@@ static int fill_res_pd_entry(struct sk_
  	if (fill_res_name_pid(msg, res))
  		goto err;
  
 -	if (fill_res_entry(dev, msg, res))
 +	if (resroot->fill_res_entry(msg, res))
  		goto err;
  
 +	nla_nest_end(msg, entry_attr);
  	return 0;
  
 -err:	return -EMSGSIZE;
 +err:
 +	nla_nest_cancel(msg, entry_attr);
 +out:
 +	return -EMSGSIZE;
  }
  
+ static int fill_stat_counter_mode(struct sk_buff *msg,
+ 				  struct rdma_counter *counter)
+ {
+ 	struct rdma_counter_mode *m = &counter->mode;
+ 
+ 	if (nla_put_u32(msg, RDMA_NLDEV_ATTR_STAT_MODE, m->mode))
+ 		return -EMSGSIZE;
+ 
+ 	if (m->mode == RDMA_COUNTER_MODE_AUTO)
+ 		if ((m->mask & RDMA_COUNTER_MASK_QP_TYPE) &&
+ 		    nla_put_u8(msg, RDMA_NLDEV_ATTR_RES_TYPE, m->param.qp_type))
+ 			return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
+ static int fill_stat_counter_qp_entry(struct sk_buff *msg, u32 qpn)
+ {
+ 	struct nlattr *entry_attr;
+ 
+ 	entry_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_RES_QP_ENTRY);
+ 	if (!entry_attr)
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_u32(msg, RDMA_NLDEV_ATTR_RES_LQPN, qpn))
+ 		goto err;
+ 
+ 	nla_nest_end(msg, entry_attr);
+ 	return 0;
+ 
+ err:
+ 	nla_nest_cancel(msg, entry_attr);
+ 	return -EMSGSIZE;
+ }
+ 
+ static int fill_stat_counter_qps(struct sk_buff *msg,
+ 				 struct rdma_counter *counter)
+ {
+ 	struct rdma_restrack_entry *res;
+ 	struct rdma_restrack_root *rt;
+ 	struct nlattr *table_attr;
+ 	struct ib_qp *qp = NULL;
+ 	unsigned long id = 0;
+ 	int ret = 0;
+ 
+ 	table_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_RES_QP);
+ 
+ 	rt = &counter->device->res[RDMA_RESTRACK_QP];
+ 	xa_lock(&rt->xa);
+ 	xa_for_each(&rt->xa, id, res) {
+ 		if (!rdma_is_visible_in_pid_ns(res))
+ 			continue;
+ 
+ 		qp = container_of(res, struct ib_qp, res);
+ 		if (qp->qp_type == IB_QPT_RAW_PACKET && !capable(CAP_NET_RAW))
+ 			continue;
+ 
+ 		if (!qp->counter || (qp->counter->id != counter->id))
+ 			continue;
+ 
+ 		ret = fill_stat_counter_qp_entry(msg, qp->qp_num);
+ 		if (ret)
+ 			goto err;
+ 	}
+ 
+ 	xa_unlock(&rt->xa);
+ 	nla_nest_end(msg, table_attr);
+ 	return 0;
+ 
+ err:
+ 	xa_unlock(&rt->xa);
+ 	nla_nest_cancel(msg, table_attr);
+ 	return ret;
+ }
+ 
+ static int fill_stat_hwcounter_entry(struct sk_buff *msg,
+ 				     const char *name, u64 value)
+ {
+ 	struct nlattr *entry_attr;
+ 
+ 	entry_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY);
+ 	if (!entry_attr)
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_string(msg, RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_NAME,
+ 			   name))
+ 		goto err;
+ 	if (nla_put_u64_64bit(msg, RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_VALUE,
+ 			      value, RDMA_NLDEV_ATTR_PAD))
+ 		goto err;
+ 
+ 	nla_nest_end(msg, entry_attr);
+ 	return 0;
+ 
+ err:
+ 	nla_nest_cancel(msg, entry_attr);
+ 	return -EMSGSIZE;
+ }
+ 
+ static int fill_stat_counter_hwcounters(struct sk_buff *msg,
+ 					struct rdma_counter *counter)
+ {
+ 	struct rdma_hw_stats *st = counter->stats;
+ 	struct nlattr *table_attr;
+ 	int i;
+ 
+ 	table_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_STAT_HWCOUNTERS);
+ 	if (!table_attr)
+ 		return -EMSGSIZE;
+ 
+ 	for (i = 0; i < st->num_counters; i++)
+ 		if (fill_stat_hwcounter_entry(msg, st->names[i], st->value[i]))
+ 			goto err;
+ 
+ 	nla_nest_end(msg, table_attr);
+ 	return 0;
+ 
+ err:
+ 	nla_nest_cancel(msg, table_attr);
+ 	return -EMSGSIZE;
+ }
+ 
+ static int fill_res_counter_entry(struct sk_buff *msg, bool has_cap_net_admin,
+ 				  struct rdma_restrack_entry *res,
+ 				  uint32_t port)
+ {
+ 	struct rdma_counter *counter =
+ 		container_of(res, struct rdma_counter, res);
+ 
+ 	if (port && port != counter->port)
+ 		return 0;
+ 
+ 	/* Dump it even query failed */
+ 	rdma_counter_query_stats(counter);
+ 
+ 	if (nla_put_u32(msg, RDMA_NLDEV_ATTR_PORT_INDEX, counter->port) ||
+ 	    nla_put_u32(msg, RDMA_NLDEV_ATTR_STAT_COUNTER_ID, counter->id) ||
+ 	    fill_res_name_pid(msg, &counter->res) ||
+ 	    fill_stat_counter_mode(msg, counter) ||
+ 	    fill_stat_counter_qps(msg, counter) ||
+ 	    fill_stat_counter_hwcounters(msg, counter))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
  static int nldev_get_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
  			  struct netlink_ext_ack *extack)
  {
@@@ -935,18 -1152,100 +1100,25 @@@ static const struct nldev_fill_res_entr
  		.fill_res_func = fill_res_pd_entry,
  		.nldev_cmd = RDMA_NLDEV_CMD_RES_PD_GET,
  		.nldev_attr = RDMA_NLDEV_ATTR_RES_PD,
 -		.flags = NLDEV_PER_DEV,
 -		.entry = RDMA_NLDEV_ATTR_RES_PD_ENTRY,
 -		.id = RDMA_NLDEV_ATTR_RES_PDN,
  	},
+ 	[RDMA_RESTRACK_COUNTER] = {
+ 		.fill_res_func = fill_res_counter_entry,
+ 		.nldev_cmd = RDMA_NLDEV_CMD_STAT_GET,
+ 		.nldev_attr = RDMA_NLDEV_ATTR_STAT_COUNTER,
+ 		.entry = RDMA_NLDEV_ATTR_STAT_COUNTER_ENTRY,
+ 		.id = RDMA_NLDEV_ATTR_STAT_COUNTER_ID,
+ 	},
  };
  
 -static int res_get_common_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
 -			       struct netlink_ext_ack *extack,
 -			       enum rdma_restrack_type res_type)
 +static bool is_visible_in_pid_ns(struct rdma_restrack_entry *res)
  {
 -	const struct nldev_fill_res_entry *fe = &fill_entries[res_type];
 -	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
 -	struct rdma_restrack_entry *res;
 -	struct ib_device *device;
 -	u32 index, id, port = 0;
 -	bool has_cap_net_admin;
 -	struct sk_buff *msg;
 -	int ret;
 -
 -	ret = nlmsg_parse_deprecated(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 -				     nldev_policy, extack);
 -	if (ret || !tb[RDMA_NLDEV_ATTR_DEV_INDEX] || !fe->id || !tb[fe->id])
 -		return -EINVAL;
 -
 -	index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
 -	device = ib_device_get_by_index(sock_net(skb->sk), index);
 -	if (!device)
 -		return -EINVAL;
 -
 -	if (tb[RDMA_NLDEV_ATTR_PORT_INDEX]) {
 -		port = nla_get_u32(tb[RDMA_NLDEV_ATTR_PORT_INDEX]);
 -		if (!rdma_is_port_valid(device, port)) {
 -			ret = -EINVAL;
 -			goto err;
 -		}
 -	}
 -
 -	if ((port && fe->flags & NLDEV_PER_DEV) ||
 -	    (!port && ~fe->flags & NLDEV_PER_DEV)) {
 -		ret = -EINVAL;
 -		goto err;
 -	}
 -
 -	id = nla_get_u32(tb[fe->id]);
 -	res = rdma_restrack_get_byid(device, res_type, id);
 -	if (IS_ERR(res)) {
 -		ret = PTR_ERR(res);
 -		goto err;
 -	}
 -
 -	if (!rdma_is_visible_in_pid_ns(res)) {
 -		ret = -ENOENT;
 -		goto err_get;
 -	}
 -
 -	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 -	if (!msg) {
 -		ret = -ENOMEM;
 -		goto err;
 -	}
 -
 -	nlh = nlmsg_put(msg, NETLINK_CB(skb).portid, nlh->nlmsg_seq,
 -			RDMA_NL_GET_TYPE(RDMA_NL_NLDEV, fe->nldev_cmd),
 -			0, 0);
 -
 -	if (fill_nldev_handle(msg, device)) {
 -		ret = -EMSGSIZE;
 -		goto err_free;
 -	}
 -
 -	has_cap_net_admin = netlink_capable(skb, CAP_NET_ADMIN);
 -	ret = fe->fill_res_func(msg, has_cap_net_admin, res, port);
 -	rdma_restrack_put(res);
 -	if (ret)
 -		goto err_free;
 -
 -	nlmsg_end(msg, nlh);
 -	ib_device_put(device);
 -	return rdma_nl_unicast(msg, NETLINK_CB(skb).portid);
 -
 -err_free:
 -	nlmsg_free(msg);
 -err_get:
 -	rdma_restrack_put(res);
 -err:
 -	ib_device_put(device);
 -	return ret;
 +	/*
 +	 * 1. Kern resources should be visible in init name space only
 +	 * 2. Present only resources visible in the current namespace
 +	 */
 +	if (rdma_is_kernel_res(res))
 +		return task_active_pid_ns(current) == &init_pid_ns;
 +	return task_active_pid_ns(current) == task_active_pid_ns(res->task);
  }
  
  static int res_get_common_dumpit(struct sk_buff *skb,
@@@ -1089,7 -1399,373 +1261,376 @@@ RES_GET_FUNCS(cm_id, RDMA_RESTRACK_CM_I
  RES_GET_FUNCS(cq, RDMA_RESTRACK_CQ);
  RES_GET_FUNCS(pd, RDMA_RESTRACK_PD);
  RES_GET_FUNCS(mr, RDMA_RESTRACK_MR);
+ RES_GET_FUNCS(counter, RDMA_RESTRACK_COUNTER);
+ 
++<<<<<<< HEAD
++=======
+ static LIST_HEAD(link_ops);
+ static DECLARE_RWSEM(link_ops_rwsem);
+ 
+ static const struct rdma_link_ops *link_ops_get(const char *type)
+ {
+ 	const struct rdma_link_ops *ops;
+ 
+ 	list_for_each_entry(ops, &link_ops, list) {
+ 		if (!strcmp(ops->type, type))
+ 			goto out;
+ 	}
+ 	ops = NULL;
+ out:
+ 	return ops;
+ }
+ 
+ void rdma_link_register(struct rdma_link_ops *ops)
+ {
+ 	down_write(&link_ops_rwsem);
+ 	if (WARN_ON_ONCE(link_ops_get(ops->type)))
+ 		goto out;
+ 	list_add(&ops->list, &link_ops);
+ out:
+ 	up_write(&link_ops_rwsem);
+ }
+ EXPORT_SYMBOL(rdma_link_register);
+ 
+ void rdma_link_unregister(struct rdma_link_ops *ops)
+ {
+ 	down_write(&link_ops_rwsem);
+ 	list_del(&ops->list);
+ 	up_write(&link_ops_rwsem);
+ }
+ EXPORT_SYMBOL(rdma_link_unregister);
+ 
+ static int nldev_newlink(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	char ibdev_name[IB_DEVICE_NAME_MAX];
+ 	const struct rdma_link_ops *ops;
+ 	char ndev_name[IFNAMSIZ];
+ 	struct net_device *ndev;
+ 	char type[IFNAMSIZ];
+ 	int err;
+ 
+ 	err = nlmsg_parse_deprecated(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 				     nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_NAME] ||
+ 	    !tb[RDMA_NLDEV_ATTR_LINK_TYPE] || !tb[RDMA_NLDEV_ATTR_NDEV_NAME])
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(ibdev_name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
+ 		    sizeof(ibdev_name));
+ 	if (strchr(ibdev_name, '%'))
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(type, tb[RDMA_NLDEV_ATTR_LINK_TYPE], sizeof(type));
+ 	nla_strlcpy(ndev_name, tb[RDMA_NLDEV_ATTR_NDEV_NAME],
+ 		    sizeof(ndev_name));
+ 
+ 	ndev = dev_get_by_name(&init_net, ndev_name);
+ 	if (!ndev)
+ 		return -ENODEV;
+ 
+ 	down_read(&link_ops_rwsem);
+ 	ops = link_ops_get(type);
+ #ifdef CONFIG_MODULES
+ 	if (!ops) {
+ 		up_read(&link_ops_rwsem);
+ 		request_module("rdma-link-%s", type);
+ 		down_read(&link_ops_rwsem);
+ 		ops = link_ops_get(type);
+ 	}
+ #endif
+ 	err = ops ? ops->newlink(ibdev_name, ndev) : -EINVAL;
+ 	up_read(&link_ops_rwsem);
+ 	dev_put(ndev);
+ 
+ 	return err;
+ }
+ 
+ static int nldev_dellink(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	struct ib_device *device;
+ 	u32 index;
+ 	int err;
+ 
+ 	err = nlmsg_parse_deprecated(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 				     nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_INDEX])
+ 		return -EINVAL;
+ 
+ 	index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
+ 	device = ib_device_get_by_index(sock_net(skb->sk), index);
+ 	if (!device)
+ 		return -EINVAL;
+ 
+ 	if (!(device->attrs.device_cap_flags & IB_DEVICE_ALLOW_USER_UNREG)) {
+ 		ib_device_put(device);
+ 		return -EINVAL;
+ 	}
+ 
+ 	ib_unregister_device_and_put(device);
+ 	return 0;
+ }
+ 
+ static int nldev_get_chardev(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			     struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	char client_name[RDMA_NLDEV_ATTR_CHARDEV_TYPE_SIZE];
+ 	struct ib_client_nl_info data = {};
+ 	struct ib_device *ibdev = NULL;
+ 	struct sk_buff *msg;
+ 	u32 index;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1, nldev_policy,
+ 			  extack);
+ 	if (err || !tb[RDMA_NLDEV_ATTR_CHARDEV_TYPE])
+ 		return -EINVAL;
+ 
+ 	nla_strlcpy(client_name, tb[RDMA_NLDEV_ATTR_CHARDEV_TYPE],
+ 		    sizeof(client_name));
+ 
+ 	if (tb[RDMA_NLDEV_ATTR_DEV_INDEX]) {
+ 		index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
+ 		ibdev = ib_device_get_by_index(sock_net(skb->sk), index);
+ 		if (!ibdev)
+ 			return -EINVAL;
+ 
+ 		if (tb[RDMA_NLDEV_ATTR_PORT_INDEX]) {
+ 			data.port = nla_get_u32(tb[RDMA_NLDEV_ATTR_PORT_INDEX]);
+ 			if (!rdma_is_port_valid(ibdev, data.port)) {
+ 				err = -EINVAL;
+ 				goto out_put;
+ 			}
+ 		} else {
+ 			data.port = -1;
+ 		}
+ 	} else if (tb[RDMA_NLDEV_ATTR_PORT_INDEX]) {
+ 		return -EINVAL;
+ 	}
+ 
+ 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+ 	if (!msg) {
+ 		err = -ENOMEM;
+ 		goto out_put;
+ 	}
+ 	nlh = nlmsg_put(msg, NETLINK_CB(skb).portid, nlh->nlmsg_seq,
+ 			RDMA_NL_GET_TYPE(RDMA_NL_NLDEV,
+ 					 RDMA_NLDEV_CMD_GET_CHARDEV),
+ 			0, 0);
+ 
+ 	data.nl_msg = msg;
+ 	err = ib_get_client_nl_info(ibdev, client_name, &data);
+ 	if (err)
+ 		goto out_nlmsg;
+ 
+ 	err = nla_put_u64_64bit(msg, RDMA_NLDEV_ATTR_CHARDEV,
+ 				huge_encode_dev(data.cdev->devt),
+ 				RDMA_NLDEV_ATTR_PAD);
+ 	if (err)
+ 		goto out_data;
+ 	err = nla_put_u64_64bit(msg, RDMA_NLDEV_ATTR_CHARDEV_ABI, data.abi,
+ 				RDMA_NLDEV_ATTR_PAD);
+ 	if (err)
+ 		goto out_data;
+ 	if (nla_put_string(msg, RDMA_NLDEV_ATTR_CHARDEV_NAME,
+ 			   dev_name(data.cdev))) {
+ 		err = -EMSGSIZE;
+ 		goto out_data;
+ 	}
+ 
+ 	nlmsg_end(msg, nlh);
+ 	put_device(data.cdev);
+ 	if (ibdev)
+ 		ib_device_put(ibdev);
+ 	return rdma_nl_unicast(msg, NETLINK_CB(skb).portid);
+ 
+ out_data:
+ 	put_device(data.cdev);
+ out_nlmsg:
+ 	nlmsg_free(msg);
+ out_put:
+ 	if (ibdev)
+ 		ib_device_put(ibdev);
+ 	return err;
+ }
+ 
+ static int nldev_sys_get_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			      struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	struct sk_buff *msg;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err)
+ 		return err;
+ 
+ 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+ 	if (!msg)
+ 		return -ENOMEM;
  
+ 	nlh = nlmsg_put(msg, NETLINK_CB(skb).portid, nlh->nlmsg_seq,
+ 			RDMA_NL_GET_TYPE(RDMA_NL_NLDEV,
+ 					 RDMA_NLDEV_CMD_SYS_GET),
+ 			0, 0);
+ 
+ 	err = nla_put_u8(msg, RDMA_NLDEV_SYS_ATTR_NETNS_MODE,
+ 			 (u8)ib_devices_shared_netns);
+ 	if (err) {
+ 		nlmsg_free(msg);
+ 		return err;
+ 	}
+ 	nlmsg_end(msg, nlh);
+ 	return rdma_nl_unicast(msg, NETLINK_CB(skb).portid);
+ }
+ 
+ static int nldev_set_sys_set_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 				  struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	u8 enable;
+ 	int err;
+ 
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (err || !tb[RDMA_NLDEV_SYS_ATTR_NETNS_MODE])
+ 		return -EINVAL;
+ 
+ 	enable = nla_get_u8(tb[RDMA_NLDEV_SYS_ATTR_NETNS_MODE]);
+ 	/* Only 0 and 1 are supported */
+ 	if (enable > 1)
+ 		return -EINVAL;
+ 
+ 	err = rdma_compatdev_set(enable);
+ 	return err;
+ }
+ 
+ static int nldev_stat_set_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			       struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	u32 index, port, mode, mask = 0;
+ 	struct ib_device *device;
+ 	struct sk_buff *msg;
+ 	int ret;
+ 
+ 	ret = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	/* Currently only counter for QP is supported */
+ 	if (ret || !tb[RDMA_NLDEV_ATTR_STAT_RES] ||
+ 	    !tb[RDMA_NLDEV_ATTR_DEV_INDEX] ||
+ 	    !tb[RDMA_NLDEV_ATTR_PORT_INDEX] || !tb[RDMA_NLDEV_ATTR_STAT_MODE])
+ 		return -EINVAL;
+ 
+ 	if (nla_get_u32(tb[RDMA_NLDEV_ATTR_STAT_RES]) != RDMA_NLDEV_ATTR_RES_QP)
+ 		return -EINVAL;
+ 
+ 	index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
+ 	device = ib_device_get_by_index(sock_net(skb->sk), index);
+ 	if (!device)
+ 		return -EINVAL;
+ 
+ 	port = nla_get_u32(tb[RDMA_NLDEV_ATTR_PORT_INDEX]);
+ 	if (!rdma_is_port_valid(device, port)) {
+ 		ret = -EINVAL;
+ 		goto err;
+ 	}
+ 
+ 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+ 	if (!msg) {
+ 		ret = -ENOMEM;
+ 		goto err;
+ 	}
+ 	nlh = nlmsg_put(msg, NETLINK_CB(skb).portid, nlh->nlmsg_seq,
+ 			RDMA_NL_GET_TYPE(RDMA_NL_NLDEV,
+ 					 RDMA_NLDEV_CMD_STAT_SET),
+ 			0, 0);
+ 
+ 	mode = nla_get_u32(tb[RDMA_NLDEV_ATTR_STAT_MODE]);
+ 	if (mode != RDMA_COUNTER_MODE_AUTO) {
+ 		ret = -EMSGSIZE;
+ 		goto err_msg;
+ 	}
+ 
+ 	if (tb[RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK])
+ 		mask = nla_get_u32(tb[RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK]);
+ 
+ 	ret = rdma_counter_set_auto_mode(device, port,
+ 					 mask ? true : false, mask);
+ 	if (ret)
+ 		goto err_msg;
+ 
+ 	if (nla_put_u32(msg, RDMA_NLDEV_ATTR_STAT_MODE, mode) ||
+ 	    nla_put_u32(msg, RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK, mask)) {
+ 		ret = -EMSGSIZE;
+ 		goto err_msg;
+ 	}
+ 
+ 	nlmsg_end(msg, nlh);
+ 	ib_device_put(device);
+ 	return rdma_nl_unicast(msg, NETLINK_CB(skb).portid);
+ 
+ err_msg:
+ 	nlmsg_free(msg);
+ err:
+ 	ib_device_put(device);
+ 	return ret;
+ }
+ 
+ static int nldev_stat_get_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			       struct netlink_ext_ack *extack)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	int ret;
+ 
+ 	ret = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, extack);
+ 	if (ret || !tb[RDMA_NLDEV_ATTR_STAT_RES])
+ 		return -EINVAL;
+ 
+ 	switch (nla_get_u32(tb[RDMA_NLDEV_ATTR_STAT_RES])) {
+ 	case RDMA_NLDEV_ATTR_RES_QP:
+ 		ret = nldev_res_get_counter_doit(skb, nlh, extack);
+ 		break;
+ 
+ 	default:
+ 		ret = -EINVAL;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int nldev_stat_get_dumpit(struct sk_buff *skb,
+ 				 struct netlink_callback *cb)
+ {
+ 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
+ 	int ret;
+ 
+ 	ret = nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, NULL);
+ 	if (ret || !tb[RDMA_NLDEV_ATTR_STAT_RES])
+ 		return -EINVAL;
+ 
+ 	switch (nla_get_u32(tb[RDMA_NLDEV_ATTR_STAT_RES])) {
+ 	case RDMA_NLDEV_ATTR_RES_QP:
+ 		ret = nldev_res_get_counter_dumpit(skb, cb);
+ 		break;
+ 
+ 	default:
+ 		ret = -EINVAL;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  static const struct rdma_nl_cbs nldev_cb_table[RDMA_NLDEV_NUM_OPS] = {
  	[RDMA_NLDEV_CMD_GET] = {
  		.doit = nldev_get_doit,
@@@ -1130,8 -1810,24 +1671,25 @@@
  		.dump = nldev_res_get_mr_dumpit,
  	},
  	[RDMA_NLDEV_CMD_RES_PD_GET] = {
 -		.doit = nldev_res_get_pd_doit,
  		.dump = nldev_res_get_pd_dumpit,
  	},
++<<<<<<< HEAD
++=======
+ 	[RDMA_NLDEV_CMD_SYS_GET] = {
+ 		.doit = nldev_sys_get_doit,
+ 	},
+ 	[RDMA_NLDEV_CMD_SYS_SET] = {
+ 		.doit = nldev_set_sys_set_doit,
+ 	},
+ 	[RDMA_NLDEV_CMD_STAT_SET] = {
+ 		.doit = nldev_stat_set_doit,
+ 		.flags = RDMA_NL_ADMIN_PERM,
+ 	},
+ 	[RDMA_NLDEV_CMD_STAT_GET] = {
+ 		.doit = nldev_stat_get_doit,
+ 		.dump = nldev_stat_get_dumpit,
+ 	},
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  };
  
  void __init nldev_init(void)
diff --cc include/rdma/ib_verbs.h
index 9a1c4c9437dd,0c5151a12ae4..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -2424,8 -2459,80 +2424,71 @@@ struct ib_device_ops 
  	 */
  	int (*init_port)(struct ib_device *device, u8 port_num,
  			 struct kobject *port_sysfs);
++<<<<<<< HEAD
++=======
+ 	/**
+ 	 * Allows rdma drivers to add their own restrack attributes.
+ 	 */
+ 	int (*fill_res_entry)(struct sk_buff *msg,
+ 			      struct rdma_restrack_entry *entry);
+ 
+ 	/* Device lifecycle callbacks */
+ 	/*
+ 	 * Called after the device becomes registered, before clients are
+ 	 * attached
+ 	 */
+ 	int (*enable_driver)(struct ib_device *dev);
+ 	/*
+ 	 * This is called as part of ib_dealloc_device().
+ 	 */
+ 	void (*dealloc_driver)(struct ib_device *dev);
+ 
+ 	/* iWarp CM callbacks */
+ 	void (*iw_add_ref)(struct ib_qp *qp);
+ 	void (*iw_rem_ref)(struct ib_qp *qp);
+ 	struct ib_qp *(*iw_get_qp)(struct ib_device *device, int qpn);
+ 	int (*iw_connect)(struct iw_cm_id *cm_id,
+ 			  struct iw_cm_conn_param *conn_param);
+ 	int (*iw_accept)(struct iw_cm_id *cm_id,
+ 			 struct iw_cm_conn_param *conn_param);
+ 	int (*iw_reject)(struct iw_cm_id *cm_id, const void *pdata,
+ 			 u8 pdata_len);
+ 	int (*iw_create_listen)(struct iw_cm_id *cm_id, int backlog);
+ 	int (*iw_destroy_listen)(struct iw_cm_id *cm_id);
+ 	/**
+ 	 * counter_bind_qp - Bind a QP to a counter.
+ 	 * @counter - The counter to be bound. If counter->id is zero then
+ 	 *   the driver needs to allocate a new counter and set counter->id
+ 	 */
+ 	int (*counter_bind_qp)(struct rdma_counter *counter, struct ib_qp *qp);
+ 	/**
+ 	 * counter_unbind_qp - Unbind the qp from the dynamically-allocated
+ 	 *   counter and bind it onto the default one
+ 	 */
+ 	int (*counter_unbind_qp)(struct ib_qp *qp);
+ 	/**
+ 	 * counter_dealloc -De-allocate the hw counter
+ 	 */
+ 	int (*counter_dealloc)(struct rdma_counter *counter);
+ 	/**
+ 	 * counter_alloc_stats - Allocate a struct rdma_hw_stats and fill in
+ 	 * the driver initialized data.
+ 	 */
+ 	struct rdma_hw_stats *(*counter_alloc_stats)(
+ 		struct rdma_counter *counter);
+ 	/**
+ 	 * counter_update_stats - Query the stats value of this counter
+ 	 */
+ 	int (*counter_update_stats)(struct rdma_counter *counter);
+ 
+ 	DECLARE_RDMA_OBJ_SIZE(ib_ah);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_cq);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_pd);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_srq);
+ 	DECLARE_RDMA_OBJ_SIZE(ib_ucontext);
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  };
  
 -struct ib_core_device {
 -	/* device must be the first element in structure until,
 -	 * union of ib_core_device and device exists in ib_device.
 -	 */
 -	struct device dev;
 -	possible_net_t rdma_net;
 -	struct kobject *ports_kobj;
 -	struct list_head port_list;
 -	struct ib_device *owner; /* reach back to owner ib_device */
 -};
 -
 -struct rdma_restrack_root;
  struct ib_device {
  	/* Do not access @dma_device directly from ULP nor from HW drivers. */
  	struct device                *dma_device;
diff --cc include/uapi/rdma/rdma_netlink.h
index 213452ef94a5,18dd88c0add8..000000000000
--- a/include/uapi/rdma/rdma_netlink.h
+++ b/include/uapi/rdma/rdma_netlink.h
@@@ -274,6 -279,12 +274,15 @@@ enum rdma_nldev_command 
  
  	RDMA_NLDEV_CMD_RES_PD_GET, /* can dump */
  
++<<<<<<< HEAD
++=======
+ 	RDMA_NLDEV_CMD_GET_CHARDEV,
+ 
+ 	RDMA_NLDEV_CMD_STAT_SET,
+ 
+ 	RDMA_NLDEV_CMD_STAT_GET, /* can dump */
+ 
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  	RDMA_NLDEV_NUM_OPS
  };
  
@@@ -458,6 -465,60 +467,63 @@@ enum rdma_nldev_attr 
  	RDMA_NLDEV_ATTR_DRIVER_U64,		/* u64 */
  
  	/*
++<<<<<<< HEAD
++=======
+ 	 * Indexes to get/set secific entry,
+ 	 * for QP use RDMA_NLDEV_ATTR_RES_LQPN
+ 	 */
+ 	RDMA_NLDEV_ATTR_RES_PDN,               /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_CQN,               /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_MRN,               /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_CM_IDN,            /* u32 */
+ 	RDMA_NLDEV_ATTR_RES_CTXN,	       /* u32 */
+ 	/*
+ 	 * Identifies the rdma driver. eg: "rxe" or "siw"
+ 	 */
+ 	RDMA_NLDEV_ATTR_LINK_TYPE,		/* string */
+ 
+ 	/*
+ 	 * net namespace mode for rdma subsystem:
+ 	 * either shared or exclusive among multiple net namespaces.
+ 	 */
+ 	RDMA_NLDEV_SYS_ATTR_NETNS_MODE,		/* u8 */
+ 	/*
+ 	 * Device protocol, e.g. ib, iw, usnic, roce and opa
+ 	 */
+ 	RDMA_NLDEV_ATTR_DEV_PROTOCOL,		/* string */
+ 
+ 	/*
+ 	 * File descriptor handle of the net namespace object
+ 	 */
+ 	RDMA_NLDEV_NET_NS_FD,			/* u32 */
+ 	/*
+ 	 * Information about a chardev.
+ 	 * CHARDEV_TYPE is the name of the chardev ABI (ie uverbs, umad, etc)
+ 	 * CHARDEV_ABI signals the ABI revision (historical)
+ 	 * CHARDEV_NAME is the kernel name for the /dev/ file (no directory)
+ 	 * CHARDEV is the 64 bit dev_t for the inode
+ 	 */
+ 	RDMA_NLDEV_ATTR_CHARDEV_TYPE,		/* string */
+ 	RDMA_NLDEV_ATTR_CHARDEV_NAME,		/* string */
+ 	RDMA_NLDEV_ATTR_CHARDEV_ABI,		/* u64 */
+ 	RDMA_NLDEV_ATTR_CHARDEV,		/* u64 */
+ 	RDMA_NLDEV_ATTR_UVERBS_DRIVER_ID,       /* u64 */
+ 	/*
+ 	 * Counter-specific attributes.
+ 	 */
+ 	RDMA_NLDEV_ATTR_STAT_MODE,		/* u32 */
+ 	RDMA_NLDEV_ATTR_STAT_RES,		/* u32 */
+ 	RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK,	/* u32 */
+ 	RDMA_NLDEV_ATTR_STAT_COUNTER,		/* nested table */
+ 	RDMA_NLDEV_ATTR_STAT_COUNTER_ENTRY,	/* nested table */
+ 	RDMA_NLDEV_ATTR_STAT_COUNTER_ID,	/* u32 */
+ 	RDMA_NLDEV_ATTR_STAT_HWCOUNTERS,	/* nested table */
+ 	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY,	/* nested table */
+ 	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_NAME,	/* string */
+ 	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_VALUE,	/* u64 */
+ 
+ 	/*
++>>>>>>> c4ffee7c9bdb (RDMA/netlink: Implement counter dumpit calback)
  	 * Always the end
  	 */
  	RDMA_NLDEV_ATTR_MAX
* Unmerged path drivers/infiniband/core/counters.c
* Unmerged path include/rdma/rdma_counter.h
* Unmerged path drivers/infiniband/core/counters.c
* Unmerged path drivers/infiniband/core/device.c
* Unmerged path drivers/infiniband/core/nldev.c
* Unmerged path include/rdma/ib_verbs.h
* Unmerged path include/rdma/rdma_counter.h
* Unmerged path include/uapi/rdma/rdma_netlink.h
