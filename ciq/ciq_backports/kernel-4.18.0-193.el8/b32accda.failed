net/mlx5e: Protect hairpin hash table with mutex

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5e: Protect hairpin hash table with mutex (Alaa Hleihel) [1663231 1724336]
Rebuild_FUZZ: 95.65%
commit-author Vlad Buslov <vladbu@mellanox.com>
commit b32accda8afd36d7de1581375467fd3642d3c73e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/b32accda.failed

To remove dependency on rtnl lock, protect hairpin hash table from
concurrent modifications with new "hairpin_tbl_lock" mutex.

	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit b32accda8afd36d7de1581375467fd3642d3c73e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index c033e0d4fc59,a7acb7fcbf5a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -563,6 -648,23 +563,26 @@@ static struct mlx5e_hairpin_entry *mlx5
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static void mlx5e_hairpin_put(struct mlx5e_priv *priv,
+ 			      struct mlx5e_hairpin_entry *hpe)
+ {
+ 	/* no more hairpin flows for us, release the hairpin pair */
+ 	if (!refcount_dec_and_mutex_lock(&hpe->refcnt, &priv->fs.tc.hairpin_tbl_lock))
+ 		return;
+ 	hash_del(&hpe->hairpin_hlist);
+ 	mutex_unlock(&priv->fs.tc.hairpin_tbl_lock);
+ 
+ 	netdev_dbg(priv->netdev, "del hairpin: peer %s\n",
+ 		   dev_name(hpe->hp->pair->peer_mdev->device));
+ 
+ 	WARN_ON(!list_empty(&hpe->flows));
+ 	mlx5e_hairpin_destroy(hpe->hp);
+ 	kfree(hpe);
+ }
+ 
++>>>>>>> b32accda8afd (net/mlx5e: Protect hairpin hash table with mutex)
  #define UNKNOWN_MATCH_PRIO 8
  
  static int mlx5e_hairpin_get_prio(struct mlx5e_priv *priv,
@@@ -633,9 -737,12 +655,11 @@@ static int mlx5e_hairpin_flow_add(struc
  		goto attach_flow;
  
  	hpe = kzalloc(sizeof(*hpe), GFP_KERNEL);
- 	if (!hpe)
- 		return -ENOMEM;
+ 	if (!hpe) {
+ 		err = -ENOMEM;
+ 		goto create_hairpin_err;
+ 	}
  
 -	spin_lock_init(&hpe->flows_lock);
  	INIT_LIST_HEAD(&hpe->flows);
  	hpe->peer_vhca_id = peer_id;
  	hpe->prio = match_prio;
@@@ -680,7 -789,12 +704,14 @@@ attach_flow
  	} else {
  		flow->nic_attr->hairpin_tirn = hpe->hp->tirn;
  	}
++<<<<<<< HEAD
++=======
+ 	mutex_unlock(&priv->fs.tc.hairpin_tbl_lock);
+ 
+ 	flow->hpe = hpe;
+ 	spin_lock(&hpe->flows_lock);
++>>>>>>> b32accda8afd (net/mlx5e: Protect hairpin hash table with mutex)
  	list_add(&flow->hairpin, &hpe->flows);
 -	spin_unlock(&hpe->flows_lock);
  
  	return 0;
  
@@@ -3460,7 -3816,9 +3494,8 @@@ int mlx5e_tc_nic_init(struct mlx5e_pri
  	struct mlx5e_tc_table *tc = &priv->fs.tc;
  	int err;
  
 -	mutex_init(&tc->t_lock);
  	hash_init(tc->mod_hdr_tbl);
+ 	mutex_init(&tc->hairpin_tbl_lock);
  	hash_init(tc->hairpin_tbl);
  
  	err = rhashtable_init(&tc->ht, &tc_ht_params);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
index eb70ada89b09..6e80ccec283b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
@@ -15,6 +15,7 @@ struct mlx5e_tc_table {
 	struct rhashtable               ht;
 
 	DECLARE_HASHTABLE(mod_hdr_tbl, 8);
+	struct mutex hairpin_tbl_lock; /* protects hairpin_tbl */
 	DECLARE_HASHTABLE(hairpin_tbl, 8);
 
 	struct notifier_block     netdevice_nb;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
