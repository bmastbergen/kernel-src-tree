net/mlx5: E-Switch, Reduce ingress acl modify metadata stack usage

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: E-Switch, Reduce ingress acl modify metadata stack usage (Alaa Hleihel) [1724327 1724336]
Rebuild_FUZZ: 96.88%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 9446d17e0e21889046568e5f970e9c706acb01f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9446d17e.failed

Fix the following compiler warning:
In function ‘esw_vport_add_ingress_acl_modify_metadata’:
the frame size of 1084 bytes is larger than 1024 bytes [-Wframe-larger-than=]

Since the structure is never written to, we can statically allocate
it to avoid the stack usage.

Fixes: 7445cfb1169c ("net/mlx5: E-Switch, Tag packet with vport number in VF vports and uplink ingress ACLs")
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Jianbo Liu <jianbol@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9446d17e0e21889046568e5f970e9c706acb01f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 2a02050a09e7,5f78e76019c5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -1461,6 -1781,58 +1461,61 @@@ out_no_mem
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static int esw_vport_add_ingress_acl_modify_metadata(struct mlx5_eswitch *esw,
+ 						     struct mlx5_vport *vport)
+ {
+ 	u8 action[MLX5_UN_SZ_BYTES(set_action_in_add_action_in_auto)] = {};
+ 	static const struct mlx5_flow_spec spec = {};
+ 	struct mlx5_flow_act flow_act = {};
+ 	int err = 0;
+ 
+ 	MLX5_SET(set_action_in, action, action_type, MLX5_ACTION_TYPE_SET);
+ 	MLX5_SET(set_action_in, action, field, MLX5_ACTION_IN_FIELD_METADATA_REG_C_0);
+ 	MLX5_SET(set_action_in, action, data,
+ 		 mlx5_eswitch_get_vport_metadata_for_match(esw, vport->vport));
+ 
+ 	err = mlx5_modify_header_alloc(esw->dev, MLX5_FLOW_NAMESPACE_ESW_INGRESS,
+ 				       1, action, &vport->ingress.modify_metadata_id);
+ 	if (err) {
+ 		esw_warn(esw->dev,
+ 			 "failed to alloc modify header for vport %d ingress acl (%d)\n",
+ 			 vport->vport, err);
+ 		return err;
+ 	}
+ 
+ 	flow_act.action = MLX5_FLOW_CONTEXT_ACTION_MOD_HDR | MLX5_FLOW_CONTEXT_ACTION_ALLOW;
+ 	flow_act.modify_id = vport->ingress.modify_metadata_id;
+ 	vport->ingress.modify_metadata_rule = mlx5_add_flow_rules(vport->ingress.acl,
+ 								  &spec, &flow_act, NULL, 0);
+ 	if (IS_ERR(vport->ingress.modify_metadata_rule)) {
+ 		err = PTR_ERR(vport->ingress.modify_metadata_rule);
+ 		esw_warn(esw->dev,
+ 			 "failed to add setting metadata rule for vport %d ingress acl, err(%d)\n",
+ 			 vport->vport, err);
+ 		vport->ingress.modify_metadata_rule = NULL;
+ 		goto out;
+ 	}
+ 
+ out:
+ 	if (err)
+ 		mlx5_modify_header_dealloc(esw->dev, vport->ingress.modify_metadata_id);
+ 	return err;
+ }
+ 
+ void esw_vport_del_ingress_acl_modify_metadata(struct mlx5_eswitch *esw,
+ 					       struct mlx5_vport *vport)
+ {
+ 	if (vport->ingress.modify_metadata_rule) {
+ 		mlx5_del_flow_rules(vport->ingress.modify_metadata_rule);
+ 		mlx5_modify_header_dealloc(esw->dev, vport->ingress.modify_metadata_id);
+ 
+ 		vport->ingress.modify_metadata_rule = NULL;
+ 	}
+ }
+ 
++>>>>>>> 9446d17e0e21 (net/mlx5: E-Switch, Reduce ingress acl modify metadata stack usage)
  static int esw_vport_egress_prio_tag_config(struct mlx5_eswitch *esw,
  					    struct mlx5_vport *vport)
  {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
