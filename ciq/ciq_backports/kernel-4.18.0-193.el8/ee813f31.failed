net/mlx5: Use available mlx5_vport struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Use available mlx5_vport struct (Alaa Hleihel) [1724335]
Rebuild_FUZZ: 94.87%
commit-author Parav Pandit <parav@mellanox.com>
commit ee813f314b2486549cd06e9e2c4d56ccab005609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ee813f31.failed

Several functions need to access mlx5_vport and vport_num.
When these functions are called, caller already has mlx5_vport*
available.
Hence pass such mlx5_vport pointer.

This is preparation patch to add error checks to
mlx5_eswitch_get_vport() and to return error status.
By doing so, reduce places where error check of mlx5_eswitch_get_vport()
can be avoided.

While doing such change, mlx5_eswitch_query_vport_drop_stats() gets
corrected to work on vport, instead of vport_idx.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Bodong Wang <bodong@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit ee813f314b2486549cd06e9e2c4d56ccab005609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
index 881a0621eae0,41afc7bf8bd8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
@@@ -622,9 -631,8 +622,12 @@@ static int esw_del_mc_addr(struct mlx5_
  
  /* Apply vport UC/MC list to HW l2 table and FDB table */
  static void esw_apply_vport_addr_list(struct mlx5_eswitch *esw,
- 				      u16 vport_num, int list_type)
+ 				      struct mlx5_vport *vport, int list_type)
  {
++<<<<<<< HEAD
 +	struct mlx5_vport *vport = &esw->vports[vport_num];
++=======
++>>>>>>> ee813f314b24 (net/mlx5: Use available mlx5_vport struct)
  	bool is_uc = list_type == MLX5_NVPRT_LIST_TYPE_UC;
  	vport_addr_action vport_addr_add;
  	vport_addr_action vport_addr_del;
@@@ -657,9 -665,8 +660,12 @@@
  
  /* Sync vport UC/MC list from vport context */
  static void esw_update_vport_addr_list(struct mlx5_eswitch *esw,
- 				       u16 vport_num, int list_type)
+ 				       struct mlx5_vport *vport, int list_type)
  {
++<<<<<<< HEAD
 +	struct mlx5_vport *vport = &esw->vports[vport_num];
++=======
++>>>>>>> ee813f314b24 (net/mlx5: Use available mlx5_vport struct)
  	bool is_uc = list_type == MLX5_NVPRT_LIST_TYPE_UC;
  	u8 (*mac_list)[ETH_ALEN];
  	struct l2addr_node *node;
@@@ -744,9 -751,9 +750,13 @@@ out
  /* Sync vport UC/MC list from vport context
   * Must be called after esw_update_vport_addr_list
   */
- static void esw_update_vport_mc_promisc(struct mlx5_eswitch *esw, u16 vport_num)
+ static void esw_update_vport_mc_promisc(struct mlx5_eswitch *esw,
+ 					struct mlx5_vport *vport)
  {
++<<<<<<< HEAD
 +	struct mlx5_vport *vport = &esw->vports[vport_num];
++=======
++>>>>>>> ee813f314b24 (net/mlx5: Use available mlx5_vport struct)
  	struct l2addr_node *node;
  	struct vport_addr *addr;
  	struct hlist_head *hash;
@@@ -822,9 -829,9 +833,13 @@@ promisc
  }
  
  /* Sync vport rx mode from vport context */
- static void esw_update_vport_rx_mode(struct mlx5_eswitch *esw, u16 vport_num)
+ static void esw_update_vport_rx_mode(struct mlx5_eswitch *esw,
+ 				     struct mlx5_vport *vport)
  {
++<<<<<<< HEAD
 +	struct mlx5_vport *vport = &esw->vports[vport_num];
++=======
++>>>>>>> ee813f314b24 (net/mlx5: Use available mlx5_vport struct)
  	int promisc_all = 0;
  	int promisc_uc = 0;
  	int promisc_mc = 0;
@@@ -1439,10 -1440,10 +1449,15 @@@ static int esw_vport_enable_qos(struct 
  	return 0;
  }
  
- static void esw_vport_disable_qos(struct mlx5_eswitch *esw, int vport_num)
+ static void esw_vport_disable_qos(struct mlx5_eswitch *esw,
+ 				  struct mlx5_vport *vport)
  {
++<<<<<<< HEAD
 +	struct mlx5_vport *vport = &esw->vports[vport_num];
 +	int err = 0;
++=======
+ 	int err;
++>>>>>>> ee813f314b24 (net/mlx5: Use available mlx5_vport struct)
  
  	if (!vport->qos.enabled)
  		return;
@@@ -2228,7 -2263,7 +2244,11 @@@ static int normalize_vports_min_rate(st
  		if (bw_share == evport->qos.bw_share)
  			continue;
  
++<<<<<<< HEAD
 +		err = esw_vport_qos_config(esw, i, vport_max_rate,
++=======
+ 		err = esw_vport_qos_config(esw, evport, vport_max_rate,
++>>>>>>> ee813f314b24 (net/mlx5: Use available mlx5_vport struct)
  					   bw_share);
  		if (!err)
  			evport->qos.bw_share = bw_share;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.c
