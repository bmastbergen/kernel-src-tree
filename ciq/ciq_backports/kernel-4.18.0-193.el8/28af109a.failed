driver core: add a debugfs entry to show deferred devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Javier Martinez Canillas <javierm@redhat.com>
commit 28af109a57d14211e5e8ba1551f00428be2fd508
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/28af109a.failed

With Device Trees (DT), the dependencies of the devices are defined in the
DT, then the drivers parse that information to lookup the needed resources
that have as dependencies.

Since drivers and devices are registered in a non-deterministic way, it is
possible that a device that is a dependency has not been registered yet by
the time that is looked up.

In this case the driver that requires this dependency cannot probe and has
to defer it. So the driver core adds it to a list of deferred devices that
is iterated again every time that a new driver is probed successfully.

For debugging purposes it may be useful to know what are the devices whose
probe function was deferred. Add a debugfs entry showing that information.

  $ cat /sys/kernel/debug/devices_deferred
  48070000.i2c:twl@48:bci
  musb-hdrc.0.auto
  omapdrm.0

This information could be obtained partially by enabling debugging, but it
means that the kernel log has to be parsed and the probe deferral balanced
with the successes. This can be error probe and has to be done in a ad-hoc
manner by everyone who needs to debug these kind of issues.

Since the information is already known by the kernel, just show it to make
it easier to debug.

	Signed-off-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Reviewed-by: Mark Brown <broonie@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 28af109a57d14211e5e8ba1551f00428be2fd508)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/dd.c
diff --cc drivers/base/dd.c
index e542ffec3960,e85705e84407..000000000000
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@@ -53,7 -54,7 +54,11 @@@ static DEFINE_MUTEX(deferred_probe_mute
  static LIST_HEAD(deferred_probe_pending_list);
  static LIST_HEAD(deferred_probe_active_list);
  static atomic_t deferred_trigger_count = ATOMIC_INIT(0);
++<<<<<<< HEAD
 +static bool initcalls_done;
++=======
+ static struct dentry *deferred_devices;
++>>>>>>> 28af109a57d1 (driver core: add a debugfs entry to show deferred devices)
  
  /*
   * In some cases, like suspend to RAM or hibernation, It might be reasonable
* Unmerged path drivers/base/dd.c
