io_uring: fix counter inc/dec mismatch in async_list

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Zhengyuan Liu <liuzhengyuan@kylinos.cn>
commit f7b76ac9d17e16e44feebb6d2749fec92bfd6dd4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f7b76ac9.failed

We could queue a work for each req in defer and link list without
increasing async_list->cnt, so we shouldn't decrease it while exiting
from workqueue as well if we didn't process the req in async list.

Thanks to Jens Axboe <axboe@kernel.dk> for his guidance.

Fixes: 31b515106428 ("io_uring: allow workqueue item to handle multiple buffered requests")
	Signed-off-by: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f7b76ac9d17e16e44feebb6d2749fec92bfd6dd4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 1fcc77d1f34e,5ec06e5ba0be..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -331,8 -332,11 +331,14 @@@ struct io_kiocb 
  #define REQ_F_SEQ_PREV		8	/* sequential with previous */
  #define REQ_F_IO_DRAIN		16	/* drain existing IO first */
  #define REQ_F_IO_DRAINED	32	/* drain done */
++<<<<<<< HEAD
++=======
+ #define REQ_F_LINK		64	/* linked sqes */
+ #define REQ_F_LINK_DONE		128	/* linked sqes done */
+ #define REQ_F_FAIL_LINK		256	/* fail rest of links */
++>>>>>>> f7b76ac9d17e (io_uring: fix counter inc/dec mismatch in async_list)
  	u64			user_data;
 -	u32			result;
 +	u32			error;	/* iopoll result from callback */
  	u32			sequence;
  
  	struct work_struct	work;
@@@ -609,6 -615,64 +615,67 @@@ static void io_free_req(struct io_kioc
  	kmem_cache_free(req_cachep, req);
  }
  
++<<<<<<< HEAD
++=======
+ static void io_req_link_next(struct io_kiocb *req)
+ {
+ 	struct io_kiocb *nxt;
+ 
+ 	/*
+ 	 * The list should never be empty when we are called here. But could
+ 	 * potentially happen if the chain is messed up, check to be on the
+ 	 * safe side.
+ 	 */
+ 	nxt = list_first_entry_or_null(&req->link_list, struct io_kiocb, list);
+ 	if (nxt) {
+ 		list_del(&nxt->list);
+ 		if (!list_empty(&req->link_list)) {
+ 			INIT_LIST_HEAD(&nxt->link_list);
+ 			list_splice(&req->link_list, &nxt->link_list);
+ 			nxt->flags |= REQ_F_LINK;
+ 		}
+ 
+ 		nxt->flags |= REQ_F_LINK_DONE;
+ 		INIT_WORK(&nxt->work, io_sq_wq_submit_work);
+ 		queue_work(req->ctx->sqo_wq, &nxt->work);
+ 	}
+ }
+ 
+ /*
+  * Called if REQ_F_LINK is set, and we fail the head request
+  */
+ static void io_fail_links(struct io_kiocb *req)
+ {
+ 	struct io_kiocb *link;
+ 
+ 	while (!list_empty(&req->link_list)) {
+ 		link = list_first_entry(&req->link_list, struct io_kiocb, list);
+ 		list_del(&link->list);
+ 
+ 		io_cqring_add_event(req->ctx, link->user_data, -ECANCELED);
+ 		__io_free_req(link);
+ 	}
+ }
+ 
+ static void io_free_req(struct io_kiocb *req)
+ {
+ 	/*
+ 	 * If LINK is set, we have dependent requests in this chain. If we
+ 	 * didn't fail this request, queue the first one up, moving any other
+ 	 * dependencies to the next request. In case of failure, fail the rest
+ 	 * of the chain.
+ 	 */
+ 	if (req->flags & REQ_F_LINK) {
+ 		if (req->flags & REQ_F_FAIL_LINK)
+ 			io_fail_links(req);
+ 		else
+ 			io_req_link_next(req);
+ 	}
+ 
+ 	__io_free_req(req);
+ }
+ 
++>>>>>>> f7b76ac9d17e (io_uring: fix counter inc/dec mismatch in async_list)
  static void io_put_req(struct io_kiocb *req)
  {
  	if (refcount_dec_and_test(&req->refs))
* Unmerged path fs/io_uring.c
