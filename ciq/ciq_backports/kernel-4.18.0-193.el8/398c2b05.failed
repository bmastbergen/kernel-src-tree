linux/dim: Add completions count to dim_sample

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Yamin Friedman <yaminf@mellanox.com>
commit 398c2b05bbee21cc172dfff017c0351d4d14e04c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/398c2b05.failed

Added a measurement of completions per/msec to allow for completion based
dim algorithms.

In order to use dynamic interrupt moderation with RDMA we need to have a
different measurment than packets per second. This change is meant to
prepare for adding a new DIM method.

All drivers that use net_dim and thus do not need a completion count will
have the completions set to 0.

	Signed-off-by: Yamin Friedman <yaminf@mellanox.com>
	Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 398c2b05bbee21cc172dfff017c0351d4d14e04c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/dim.h
#	lib/dim/dim.c
diff --cc include/linux/dim.h
index f0f20ed25497,aa9bdd47a648..000000000000
--- a/include/linux/dim.h
+++ b/include/linux/dim.h
@@@ -6,17 -6,38 +6,18 @@@
  
  #include <linux/module.h>
  
 -/**
 - * Number of events between DIM iterations.
 - * Causes a moderation of the algorithm run.
 - */
  #define DIM_NEVENTS 64
  
 -/**
 - * Is a difference between values justifies taking an action.
 - * We consider 10% difference as significant.
 - */
 +/* more than 10% difference */
  #define IS_SIGNIFICANT_DIFF(val, ref) \
  	(((100UL * abs((val) - (ref))) / (ref)) > 10)
 -
 -/**
 - * Calculate the gap between two values.
 - * Take wrap-around and variable size into consideration.
 - */
  #define BIT_GAP(bits, end, start) ((((end) - (start)) + BIT_ULL(bits)) \
 -		& (BIT_ULL(bits) - 1))
 +& (BIT_ULL(bits) - 1))
  
 -/**
 - * Structure for CQ moderation values.
 - * Used for communications between DIM and its consumer.
 - *
 - * @usec: CQ timer suggestion (by DIM)
 - * @pkts: CQ packet counter suggestion (by DIM)
 - * @cq_period_mode: CQ priod count mode (from CQE/EQE)
 - */
 -struct dim_cq_moder {
 +struct net_dim_cq_moder {
  	u16 usec;
  	u16 pkts;
+ 	u16 comps;
  	u8 cq_period_mode;
  };
  
@@@ -25,18 -55,45 +26,29 @@@ struct net_dim_sample 
  	u32 pkt_ctr;
  	u32 byte_ctr;
  	u16 event_ctr;
+ 	u32 comp_ctr;
  };
  
 -/**
 - * Structure for DIM stats.
 - * Used for holding current measured rates.
 - *
 - * @ppms: Packets per msec
 - * @bpms: Bytes per msec
 - * @epms: Events per msec
 - */
  struct dim_stats {
  	int ppms; /* packets per msec */
  	int bpms; /* bytes per msec */
  	int epms; /* events per msec */
++<<<<<<< HEAD
++=======
+ 	int cpms; /* completions per msec */
+ 	int cpe_ratio; /* ratio of completions to events */
++>>>>>>> 398c2b05bbee (linux/dim: Add completions count to dim_sample)
  };
  
 -/**
 - * Main structure for dynamic interrupt moderation (DIM).
 - * Used for holding all information about a specific DIM instance.
 - *
 - * @state: Algorithm state (see below)
 - * @prev_stats: Measured rates from previous iteration (for comparison)
 - * @start_sample: Sampled data at start of current iteration
 - * @work: Work to perform on action required
 - * @profile_ix: Current moderation profile
 - * @mode: CQ period count mode
 - * @tune_state: Algorithm tuning state (see below)
 - * @steps_right: Number of steps taken towards higher moderation
 - * @steps_left: Number of steps taken towards lower moderation
 - * @tired: Parking depth counter
 - */
 -struct dim {
 +struct net_dim { /* Dynamic Interrupt Moderation */
  	u8 state;
  	struct dim_stats prev_stats;
++<<<<<<< HEAD
 +	struct net_dim_sample start_sample;
++=======
+ 	struct dim_sample start_sample;
+ 	struct dim_sample measuring_sample;
++>>>>>>> 398c2b05bbee (linux/dim: Add completions count to dim_sample)
  	struct work_struct work;
  	u8 profile_ix;
  	u8 mode;
@@@ -132,23 -251,116 +144,44 @@@ net_dim_update_sample(u16 event_ctr, u6
  	s->event_ctr = event_ctr;
  }
  
++<<<<<<< HEAD
 +static inline void
 +dim_calc_stats(struct net_dim_sample *start, struct net_dim_sample *end,
 +	       struct dim_stats *curr_stats)
 +{
 +	/* u32 holds up to 71 minutes, should be enough */
 +	u32 delta_us = ktime_us_delta(end->time, start->time);
 +	u32 npkts = BIT_GAP(BITS_PER_TYPE(u32), end->pkt_ctr, start->pkt_ctr);
 +	u32 nbytes = BIT_GAP(BITS_PER_TYPE(u32), end->byte_ctr,
 +			     start->byte_ctr);
++=======
+ /**
+  *	dim_update_sample_with_comps - set a sample's fields with given
+  *	values including the completion parameter
+  *	@event_ctr: number of events to set
+  *	@packets: number of packets to set
+  *	@bytes: number of bytes to set
+  *	@comps: number of completions to set
+  *	@s: DIM sample
+  */
+ static inline void
+ dim_update_sample_with_comps(u16 event_ctr, u64 packets, u64 bytes, u64 comps,
+ 			     struct dim_sample *s)
+ {
+ 	dim_update_sample(event_ctr, packets, bytes, s);
+ 	s->comp_ctr = comps;
+ }
+ 
+ /* Net DIM */
++>>>>>>> 398c2b05bbee (linux/dim: Add completions count to dim_sample)
  
 -/*
 - * Net DIM profiles:
 - *        There are different set of profiles for each CQ period mode.
 - *        There are different set of profiles for RX/TX CQs.
 - *        Each profile size must be of NET_DIM_PARAMS_NUM_PROFILES
 - */
 -#define NET_DIM_PARAMS_NUM_PROFILES 5
 -#define NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE 256
 -#define NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE 128
 -#define NET_DIM_DEF_PROFILE_CQE 1
 -#define NET_DIM_DEF_PROFILE_EQE 1
 -
 -#define NET_DIM_RX_EQE_PROFILES { \
 -	{1,   NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
 -	{8,   NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
 -	{64,  NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
 -	{128, NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
 -	{256, NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
 -}
 -
 -#define NET_DIM_RX_CQE_PROFILES { \
 -	{2,  256},             \
 -	{8,  128},             \
 -	{16, 64},              \
 -	{32, 64},              \
 -	{64, 64}               \
 -}
 -
 -#define NET_DIM_TX_EQE_PROFILES { \
 -	{1,   NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
 -	{8,   NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
 -	{32,  NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
 -	{64,  NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
 -	{128, NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE}   \
 -}
 +	if (!delta_us)
 +		return;
  
 -#define NET_DIM_TX_CQE_PROFILES { \
 -	{5,  128},  \
 -	{8,  64},  \
 -	{16, 32},  \
 -	{32, 32},  \
 -	{64, 32}   \
 +	curr_stats->ppms = DIV_ROUND_UP(npkts * USEC_PER_MSEC, delta_us);
 +	curr_stats->bpms = DIV_ROUND_UP(nbytes * USEC_PER_MSEC, delta_us);
 +	curr_stats->epms = DIV_ROUND_UP(DIM_NEVENTS * USEC_PER_MSEC,
 +					delta_us);
  }
  
 -static const struct dim_cq_moder
 -rx_profile[DIM_CQ_PERIOD_NUM_MODES][NET_DIM_PARAMS_NUM_PROFILES] = {
 -	NET_DIM_RX_EQE_PROFILES,
 -	NET_DIM_RX_CQE_PROFILES,
 -};
 -
 -static const struct dim_cq_moder
 -tx_profile[DIM_CQ_PERIOD_NUM_MODES][NET_DIM_PARAMS_NUM_PROFILES] = {
 -	NET_DIM_TX_EQE_PROFILES,
 -	NET_DIM_TX_CQE_PROFILES,
 -};
 -
 -/**
 - *	net_dim_get_rx_moderation - provide a CQ moderation object for the given RX profile
 - *	@cq_period_mode: CQ period mode
 - *	@ix: Profile index
 - */
 -struct dim_cq_moder net_dim_get_rx_moderation(u8 cq_period_mode, int ix);
 -
 -/**
 - *	net_dim_get_def_rx_moderation - provide the default RX moderation
 - *	@cq_period_mode: CQ period mode
 - */
 -struct dim_cq_moder net_dim_get_def_rx_moderation(u8 cq_period_mode);
 -
 -/**
 - *	net_dim_get_tx_moderation - provide a CQ moderation object for the given TX profile
 - *	@cq_period_mode: CQ period mode
 - *	@ix: Profile index
 - */
 -struct dim_cq_moder net_dim_get_tx_moderation(u8 cq_period_mode, int ix);
 -
 -/**
 - *	net_dim_get_def_tx_moderation - provide the default TX moderation
 - *	@cq_period_mode: CQ period mode
 - */
 -struct dim_cq_moder net_dim_get_def_tx_moderation(u8 cq_period_mode);
 -
 -/**
 - *	net_dim - main DIM algorithm entry point
 - *	@dim: DIM instance information
 - *	@end_sample: Current data measurement
 - *
 - * Called by the consumer.
 - * This is the main logic of the algorithm, where data is processed in order to decide on next
 - * required action.
 - */
 -void net_dim(struct dim *dim, struct dim_sample end_sample);
 -
  #endif /* DIM_H */
* Unmerged path lib/dim/dim.c
* Unmerged path include/linux/dim.h
* Unmerged path lib/dim/dim.c
