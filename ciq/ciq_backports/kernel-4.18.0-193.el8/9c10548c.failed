tools lib: Move argv_{split,free} from tools/perf/util/

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [tools] tools lib: Move argv_{split, free} from tools/perf/util/ (Michael Petlan) [1743210]
Rebuild_FUZZ: 99.10%
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 9c10548c42219e961279826c2763a0e32dc056b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9c10548c.failed

This came from the kernel lib/argv_split.c, so move it to
tools/lib/argv_split.c, to get it closer to the kernel structure.

We need to audit the usage of argv_split() to figure out if it is really
necessary to do have one allocation per argv[] entry, looking at one of
its users I guess that is not the case and we probably are even leaking
those allocations by not using argv_free() judiciously, for later.

With this we further remove stuff from tools/perf/util/, reducing the
perf specific codebase and encouraging other tools/ code to use these
routines so as to keep the style and constructs used with the kernel.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-j479s1ive9h75w5lfg16jroz@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9c10548c42219e961279826c2763a0e32dc056b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/Build
diff --cc tools/perf/util/Build
index 32eb2e011c5d,d3408a463060..000000000000
--- a/tools/perf/util/Build
+++ b/tools/perf/util/Build
@@@ -1,125 -1,129 +1,226 @@@
++<<<<<<< HEAD
 +libperf-y += annotate.o
 +libperf-y += block-range.o
 +libperf-y += build-id.o
 +libperf-y += config.o
 +libperf-y += ctype.o
 +libperf-y += db-export.o
 +libperf-y += env.o
 +libperf-y += event.o
 +libperf-y += evlist.o
 +libperf-y += evsel.o
 +libperf-y += evsel_fprintf.o
 +libperf-y += find_bit.o
 +libperf-y += kallsyms.o
 +libperf-y += levenshtein.o
 +libperf-y += llvm-utils.o
 +libperf-y += mmap.o
 +libperf-y += memswap.o
 +libperf-y += parse-events.o
 +libperf-y += perf_regs.o
 +libperf-y += path.o
 +libperf-y += print_binary.o
 +libperf-y += rbtree.o
 +libperf-y += libstring.o
 +libperf-y += bitmap.o
 +libperf-y += hweight.o
 +libperf-y += smt.o
 +libperf-y += strbuf.o
 +libperf-y += string.o
 +libperf-y += strlist.o
 +libperf-y += strfilter.o
 +libperf-y += top.o
 +libperf-y += usage.o
 +libperf-y += dso.o
 +libperf-y += symbol.o
 +libperf-y += symbol_fprintf.o
 +libperf-y += color.o
 +libperf-y += color_config.o
 +libperf-y += metricgroup.o
 +libperf-y += header.o
 +libperf-y += callchain.o
 +libperf-y += values.o
 +libperf-y += debug.o
 +libperf-y += machine.o
 +libperf-y += map.o
 +libperf-y += pstack.o
 +libperf-y += session.o
 +libperf-y += sample-raw.o
 +libperf-y += s390-sample-raw.o
 +libperf-$(CONFIG_TRACE) += syscalltbl.o
 +libperf-y += ordered-events.o
 +libperf-y += namespaces.o
 +libperf-y += comm.o
 +libperf-y += thread.o
 +libperf-y += thread_map.o
 +libperf-y += trace-event-parse.o
 +libperf-y += parse-events-flex.o
 +libperf-y += parse-events-bison.o
 +libperf-y += pmu.o
 +libperf-y += pmu-flex.o
 +libperf-y += pmu-bison.o
 +libperf-y += trace-event-read.o
 +libperf-y += trace-event-info.o
 +libperf-y += trace-event-scripting.o
 +libperf-y += trace-event.o
 +libperf-y += svghelper.o
 +libperf-y += sort.o
 +libperf-y += hist.o
 +libperf-y += util.o
 +libperf-y += xyarray.o
 +libperf-y += cpumap.o
 +libperf-y += cgroup.o
 +libperf-y += target.o
 +libperf-y += rblist.o
 +libperf-y += intlist.o
 +libperf-y += vdso.o
 +libperf-y += counts.o
 +libperf-y += stat.o
 +libperf-y += stat-shadow.o
 +libperf-y += stat-display.o
 +libperf-y += record.o
 +libperf-y += srcline.o
 +libperf-y += srccode.o
 +libperf-y += data.o
 +libperf-y += tsc.o
 +libperf-y += cloexec.o
 +libperf-y += call-path.o
 +libperf-y += rwsem.o
 +libperf-y += thread-stack.o
 +libperf-$(CONFIG_AUXTRACE) += auxtrace.o
 +libperf-$(CONFIG_AUXTRACE) += intel-pt-decoder/
 +libperf-$(CONFIG_AUXTRACE) += intel-pt.o
 +libperf-$(CONFIG_AUXTRACE) += intel-bts.o
 +libperf-$(CONFIG_AUXTRACE) += arm-spe.o
 +libperf-$(CONFIG_AUXTRACE) += arm-spe-pkt-decoder.o
 +libperf-$(CONFIG_AUXTRACE) += s390-cpumsf.o
++=======
+ perf-y += annotate.o
+ perf-y += block-range.o
+ perf-y += build-id.o
+ perf-y += config.o
+ perf-y += ctype.o
+ perf-y += db-export.o
+ perf-y += env.o
+ perf-y += event.o
+ perf-y += evlist.o
+ perf-y += evsel.o
+ perf-y += evsel_fprintf.o
+ perf-y += find_bit.o
+ perf-y += get_current_dir_name.o
+ perf-y += kallsyms.o
+ perf-y += levenshtein.o
+ perf-y += llvm-utils.o
+ perf-y += mmap.o
+ perf-y += memswap.o
+ perf-y += parse-events.o
+ perf-y += perf_regs.o
+ perf-y += path.o
+ perf-y += print_binary.o
+ perf-y += argv_split.o
+ perf-y += rbtree.o
+ perf-y += libstring.o
+ perf-y += bitmap.o
+ perf-y += hweight.o
+ perf-y += smt.o
+ perf-y += strbuf.o
+ perf-y += string.o
+ perf-y += strlist.o
+ perf-y += strfilter.o
+ perf-y += top.o
+ perf-y += usage.o
+ perf-y += dso.o
+ perf-y += symbol.o
+ perf-y += symbol_fprintf.o
+ perf-y += color.o
+ perf-y += color_config.o
+ perf-y += metricgroup.o
+ perf-y += header.o
+ perf-y += callchain.o
+ perf-y += values.o
+ perf-y += debug.o
+ perf-y += machine.o
+ perf-y += map.o
+ perf-y += pstack.o
+ perf-y += session.o
+ perf-y += sample-raw.o
+ perf-y += s390-sample-raw.o
+ perf-$(CONFIG_TRACE) += syscalltbl.o
+ perf-y += ordered-events.o
+ perf-y += namespaces.o
+ perf-y += comm.o
+ perf-y += thread.o
+ perf-y += thread_map.o
+ perf-y += trace-event-parse.o
+ perf-y += parse-events-flex.o
+ perf-y += parse-events-bison.o
+ perf-y += pmu.o
+ perf-y += pmu-flex.o
+ perf-y += pmu-bison.o
+ perf-y += trace-event-read.o
+ perf-y += trace-event-info.o
+ perf-y += trace-event-scripting.o
+ perf-y += trace-event.o
+ perf-y += svghelper.o
+ perf-y += sort.o
+ perf-y += hist.o
+ perf-y += util.o
+ perf-y += xyarray.o
+ perf-y += cpumap.o
+ perf-y += cputopo.o
+ perf-y += cgroup.o
+ perf-y += target.o
+ perf-y += rblist.o
+ perf-y += intlist.o
+ perf-y += vdso.o
+ perf-y += counts.o
+ perf-y += stat.o
+ perf-y += stat-shadow.o
+ perf-y += stat-display.o
+ perf-y += record.o
+ perf-y += srcline.o
+ perf-y += srccode.o
+ perf-y += data.o
+ perf-y += tsc.o
+ perf-y += cloexec.o
+ perf-y += call-path.o
+ perf-y += rwsem.o
+ perf-y += thread-stack.o
+ perf-$(CONFIG_AUXTRACE) += auxtrace.o
+ perf-$(CONFIG_AUXTRACE) += intel-pt-decoder/
+ perf-$(CONFIG_AUXTRACE) += intel-pt.o
+ perf-$(CONFIG_AUXTRACE) += intel-bts.o
+ perf-$(CONFIG_AUXTRACE) += arm-spe.o
+ perf-$(CONFIG_AUXTRACE) += arm-spe-pkt-decoder.o
+ perf-$(CONFIG_AUXTRACE) += s390-cpumsf.o
++>>>>>>> 9c10548c4221 (tools lib: Move argv_{split,free} from tools/perf/util/)
  
  ifdef CONFIG_LIBOPENCSD
 -perf-$(CONFIG_AUXTRACE) += cs-etm.o
 -perf-$(CONFIG_AUXTRACE) += cs-etm-decoder/
 +libperf-$(CONFIG_AUXTRACE) += cs-etm.o
 +libperf-$(CONFIG_AUXTRACE) += cs-etm-decoder/
  endif
  
 -perf-y += parse-branch-options.o
 -perf-y += dump-insn.o
 -perf-y += parse-regs-options.o
 -perf-y += term.o
 -perf-y += help-unknown-cmd.o
 -perf-y += mem-events.o
 -perf-y += vsprintf.o
 -perf-y += units.o
 -perf-y += time-utils.o
 -perf-y += expr-bison.o
 -perf-y += branch.o
 -perf-y += mem2node.o
 +libperf-y += parse-branch-options.o
 +libperf-y += dump-insn.o
 +libperf-y += parse-regs-options.o
 +libperf-y += term.o
 +libperf-y += help-unknown-cmd.o
 +libperf-y += mem-events.o
 +libperf-y += vsprintf.o
 +libperf-y += units.o
 +libperf-y += time-utils.o
 +libperf-y += expr-bison.o
 +libperf-y += branch.o
 +libperf-y += mem2node.o
  
 -perf-$(CONFIG_LIBBPF) += bpf-loader.o
 -perf-$(CONFIG_LIBBPF) += bpf_map.o
 -perf-$(CONFIG_BPF_PROLOGUE) += bpf-prologue.o
 -perf-$(CONFIG_LIBELF) += symbol-elf.o
 -perf-$(CONFIG_LIBELF) += probe-file.o
 -perf-$(CONFIG_LIBELF) += probe-event.o
 +libperf-$(CONFIG_LIBBPF) += bpf-loader.o
 +libperf-$(CONFIG_BPF_PROLOGUE) += bpf-prologue.o
 +libperf-$(CONFIG_LIBELF) += symbol-elf.o
 +libperf-$(CONFIG_LIBELF) += probe-file.o
 +libperf-$(CONFIG_LIBELF) += probe-event.o
  
  ifndef CONFIG_LIBELF
 -perf-y += symbol-minimal.o
 +libperf-y += symbol-minimal.o
  endif
  
  ifndef CONFIG_SETNS
diff --git a/tools/include/linux/string.h b/tools/include/linux/string.h
index a76d4df10435..980cb9266718 100644
--- a/tools/include/linux/string.h
+++ b/tools/include/linux/string.h
@@ -7,6 +7,9 @@
 
 void *memdup(const void *src, size_t len);
 
+char **argv_split(const char *str, int *argcp);
+void argv_free(char **argv);
+
 int strtobool(const char *s, bool *res);
 
 /*
diff --git a/tools/lib/argv_split.c b/tools/lib/argv_split.c
new file mode 100644
index 000000000000..0a58ccf3f761
--- /dev/null
+++ b/tools/lib/argv_split.c
@@ -0,0 +1,100 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Helper function for splitting a string into an argv-like array.
+ */
+
+#include <stdlib.h>
+#include <linux/kernel.h>
+#include <linux/ctype.h>
+#include <linux/string.h>
+
+static const char *skip_arg(const char *cp)
+{
+	while (*cp && !isspace(*cp))
+		cp++;
+
+	return cp;
+}
+
+static int count_argc(const char *str)
+{
+	int count = 0;
+
+	while (*str) {
+		str = skip_spaces(str);
+		if (*str) {
+			count++;
+			str = skip_arg(str);
+		}
+	}
+
+	return count;
+}
+
+/**
+ * argv_free - free an argv
+ * @argv - the argument vector to be freed
+ *
+ * Frees an argv and the strings it points to.
+ */
+void argv_free(char **argv)
+{
+	char **p;
+	for (p = argv; *p; p++) {
+		free(*p);
+		*p = NULL;
+	}
+
+	free(argv);
+}
+
+/**
+ * argv_split - split a string at whitespace, returning an argv
+ * @str: the string to be split
+ * @argcp: returned argument count
+ *
+ * Returns an array of pointers to strings which are split out from
+ * @str.  This is performed by strictly splitting on white-space; no
+ * quote processing is performed.  Multiple whitespace characters are
+ * considered to be a single argument separator.  The returned array
+ * is always NULL-terminated.  Returns NULL on memory allocation
+ * failure.
+ */
+char **argv_split(const char *str, int *argcp)
+{
+	int argc = count_argc(str);
+	char **argv = calloc(argc + 1, sizeof(*argv));
+	char **argvp;
+
+	if (argv == NULL)
+		goto out;
+
+	if (argcp)
+		*argcp = argc;
+
+	argvp = argv;
+
+	while (*str) {
+		str = skip_spaces(str);
+
+		if (*str) {
+			const char *p = str;
+			char *t;
+
+			str = skip_arg(str);
+
+			t = strndup(p, str-p);
+			if (t == NULL)
+				goto fail;
+			*argvp++ = t;
+		}
+	}
+	*argvp = NULL;
+
+out:
+	return argv;
+
+fail:
+	argv_free(argv);
+	return NULL;
+}
diff --git a/tools/perf/MANIFEST b/tools/perf/MANIFEST
index aac4c755d81b..6a5de44b2de9 100644
--- a/tools/perf/MANIFEST
+++ b/tools/perf/MANIFEST
@@ -7,6 +7,7 @@ tools/lib/traceevent
 tools/lib/api
 tools/lib/bpf
 tools/lib/subcmd
+tools/lib/argv_split.c
 tools/lib/ctype.c
 tools/lib/hweight.c
 tools/lib/rbtree.c
* Unmerged path tools/perf/util/Build
diff --git a/tools/perf/util/string.c b/tools/perf/util/string.c
index 9b7fbb0cbecd..52603876c548 100644
--- a/tools/perf/util/string.c
+++ b/tools/perf/util/string.c
@@ -69,97 +69,6 @@ s64 perf_atoll(const char *str)
 	return -1;
 }
 
-static const char *skip_arg(const char *cp)
-{
-	while (*cp && !isspace(*cp))
-		cp++;
-
-	return cp;
-}
-
-static int count_argc(const char *str)
-{
-	int count = 0;
-
-	while (*str) {
-		str = skip_spaces(str);
-		if (*str) {
-			count++;
-			str = skip_arg(str);
-		}
-	}
-
-	return count;
-}
-
-/**
- * argv_free - free an argv
- * @argv - the argument vector to be freed
- *
- * Frees an argv and the strings it points to.
- */
-void argv_free(char **argv)
-{
-	char **p;
-	for (p = argv; *p; p++) {
-		free(*p);
-		*p = NULL;
-	}
-
-	free(argv);
-}
-
-/**
- * argv_split - split a string at whitespace, returning an argv
- * @str: the string to be split
- * @argcp: returned argument count
- *
- * Returns an array of pointers to strings which are split out from
- * @str.  This is performed by strictly splitting on white-space; no
- * quote processing is performed.  Multiple whitespace characters are
- * considered to be a single argument separator.  The returned array
- * is always NULL-terminated.  Returns NULL on memory allocation
- * failure.
- */
-char **argv_split(const char *str, int *argcp)
-{
-	int argc = count_argc(str);
-	char **argv = calloc(argc + 1, sizeof(*argv));
-	char **argvp;
-
-	if (argv == NULL)
-		goto out;
-
-	if (argcp)
-		*argcp = argc;
-
-	argvp = argv;
-
-	while (*str) {
-		str = skip_spaces(str);
-
-		if (*str) {
-			const char *p = str;
-			char *t;
-
-			str = skip_arg(str);
-
-			t = strndup(p, str-p);
-			if (t == NULL)
-				goto fail;
-			*argvp++ = t;
-		}
-	}
-	*argvp = NULL;
-
-out:
-	return argv;
-
-fail:
-	argv_free(argv);
-	return NULL;
-}
-
 /* Character class matching */
 static bool __match_charclass(const char *pat, char c, const char **npat)
 {
diff --git a/tools/perf/util/string2.h b/tools/perf/util/string2.h
index 2696c3fcd780..708805f5573e 100644
--- a/tools/perf/util/string2.h
+++ b/tools/perf/util/string2.h
@@ -11,8 +11,6 @@ extern const char *graph_dotted_line;
 extern const char *dots;
 
 s64 perf_atoll(const char *str);
-char **argv_split(const char *str, int *argcp);
-void argv_free(char **argv);
 bool strglobmatch(const char *str, const char *pat);
 bool strglobmatch_nocase(const char *str, const char *pat);
 bool strlazymatch(const char *str, const char *pat);
