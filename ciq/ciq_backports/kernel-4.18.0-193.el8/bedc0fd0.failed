RDMA/core: Fix -Wunused-const-variable warnings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Qian Cai <cai@lca.pw>
commit bedc0fd0f9b517698193d644f914b33951856fd2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/bedc0fd0.failed

The commit below introduced a few compilation warnings.

In file included from ./include/rdma/ib_verbs.h:64,
                 from ./include/linux/mlx5/device.h:37,
                 from ./include/linux/mlx5/driver.h:51,
                 from drivers/net/ethernet/mellanox/mlx5/core/uar.c:36:
./include/linux/dim.h:378:1: warning: 'rdma_dim_prof' defined but not
used [-Wunused-const-variable=]
 rdma_dim_prof[RDMA_DIM_PARAMS_NUM_PROFILES] = {
 ^~~~~~~~~~~~~
In file included from ./include/rdma/ib_verbs.h:64,
                 from ./include/linux/mlx5/device.h:37,
                 from ./include/linux/mlx5/driver.h:51,
                 from
drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c:37:
./include/linux/dim.h:378:1: warning: 'rdma_dim_prof' defined but not
used [-Wunused-const-variable=]
 rdma_dim_prof[RDMA_DIM_PARAMS_NUM_PROFILES] = {
 ^~~~~~~~~~~~~

Since only ib_cq_rdma_dim_work() in drivers/infiniband/core/cq.c uses it,
just move the definition over there.

Fixes: f4915455dcf0 ("linux/dim: Implement RDMA adaptive moderation (DIM)")
	Signed-off-by: Qian Cai <cai@lca.pw>
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit bedc0fd0f9b517698193d644f914b33951856fd2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cq.c
#	include/linux/dim.h
diff --cc drivers/infiniband/core/cq.c
index d0ebdb43d295,7c599878ccf7..000000000000
--- a/drivers/infiniband/core/cq.c
+++ b/drivers/infiniband/core/cq.c
@@@ -26,6 -18,53 +26,56 @@@
  #define IB_POLL_FLAGS \
  	(IB_CQ_NEXT_COMP | IB_CQ_REPORT_MISSED_EVENTS)
  
++<<<<<<< HEAD
++=======
+ static const struct dim_cq_moder
+ rdma_dim_prof[RDMA_DIM_PARAMS_NUM_PROFILES] = {
+ 	{1,   0, 1,  0},
+ 	{1,   0, 4,  0},
+ 	{2,   0, 4,  0},
+ 	{2,   0, 8,  0},
+ 	{4,   0, 8,  0},
+ 	{16,  0, 8,  0},
+ 	{16,  0, 16, 0},
+ 	{32,  0, 16, 0},
+ 	{32,  0, 32, 0},
+ };
+ 
+ static void ib_cq_rdma_dim_work(struct work_struct *w)
+ {
+ 	struct dim *dim = container_of(w, struct dim, work);
+ 	struct ib_cq *cq = dim->priv;
+ 
+ 	u16 usec = rdma_dim_prof[dim->profile_ix].usec;
+ 	u16 comps = rdma_dim_prof[dim->profile_ix].comps;
+ 
+ 	dim->state = DIM_START_MEASURE;
+ 
+ 	cq->device->ops.modify_cq(cq, comps, usec);
+ }
+ 
+ static void rdma_dim_init(struct ib_cq *cq)
+ {
+ 	struct dim *dim;
+ 
+ 	if (!cq->device->ops.modify_cq || !cq->device->use_cq_dim ||
+ 	    cq->poll_ctx == IB_POLL_DIRECT)
+ 		return;
+ 
+ 	dim = kzalloc(sizeof(struct dim), GFP_KERNEL);
+ 	if (!dim)
+ 		return;
+ 
+ 	dim->state = DIM_START_MEASURE;
+ 	dim->tune_state = DIM_GOING_RIGHT;
+ 	dim->profile_ix = RDMA_DIM_START_PROFILE;
+ 	dim->priv = cq;
+ 	cq->dim = dim;
+ 
+ 	INIT_WORK(&dim->work, ib_cq_rdma_dim_work);
+ }
+ 
++>>>>>>> bedc0fd0f9b5 (RDMA/core: Fix -Wunused-const-variable warnings)
  static int __ib_process_cq(struct ib_cq *cq, int budget, struct ib_wc *wcs,
  			   int batch)
  {
diff --cc include/linux/dim.h
index f0f20ed25497,d3a0fbfff2bb..000000000000
--- a/include/linux/dim.h
+++ b/include/linux/dim.h
@@@ -132,23 -253,137 +132,142 @@@ net_dim_update_sample(u16 event_ctr, u6
  	s->event_ctr = event_ctr;
  }
  
 -/**
 - *	dim_update_sample_with_comps - set a sample's fields with given
 - *	values including the completion parameter
 - *	@event_ctr: number of events to set
 - *	@packets: number of packets to set
 - *	@bytes: number of bytes to set
 - *	@comps: number of completions to set
 - *	@s: DIM sample
 - */
  static inline void
 -dim_update_sample_with_comps(u16 event_ctr, u64 packets, u64 bytes, u64 comps,
 -			     struct dim_sample *s)
 +dim_calc_stats(struct net_dim_sample *start, struct net_dim_sample *end,
 +	       struct dim_stats *curr_stats)
  {
 -	dim_update_sample(event_ctr, packets, bytes, s);
 -	s->comp_ctr = comps;
 +	/* u32 holds up to 71 minutes, should be enough */
 +	u32 delta_us = ktime_us_delta(end->time, start->time);
 +	u32 npkts = BIT_GAP(BITS_PER_TYPE(u32), end->pkt_ctr, start->pkt_ctr);
 +	u32 nbytes = BIT_GAP(BITS_PER_TYPE(u32), end->byte_ctr,
 +			     start->byte_ctr);
 +
 +	if (!delta_us)
 +		return;
 +
 +	curr_stats->ppms = DIV_ROUND_UP(npkts * USEC_PER_MSEC, delta_us);
 +	curr_stats->bpms = DIV_ROUND_UP(nbytes * USEC_PER_MSEC, delta_us);
 +	curr_stats->epms = DIV_ROUND_UP(DIM_NEVENTS * USEC_PER_MSEC,
 +					delta_us);
  }
  
++<<<<<<< HEAD
++=======
+ /* Net DIM */
+ 
+ /*
+  * Net DIM profiles:
+  *        There are different set of profiles for each CQ period mode.
+  *        There are different set of profiles for RX/TX CQs.
+  *        Each profile size must be of NET_DIM_PARAMS_NUM_PROFILES
+  */
+ #define NET_DIM_PARAMS_NUM_PROFILES 5
+ #define NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE 256
+ #define NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE 128
+ #define NET_DIM_DEF_PROFILE_CQE 1
+ #define NET_DIM_DEF_PROFILE_EQE 1
+ 
+ #define NET_DIM_RX_EQE_PROFILES { \
+ 	{1,   NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{8,   NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{64,  NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{128, NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{256, NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ }
+ 
+ #define NET_DIM_RX_CQE_PROFILES { \
+ 	{2,  256},             \
+ 	{8,  128},             \
+ 	{16, 64},              \
+ 	{32, 64},              \
+ 	{64, 64}               \
+ }
+ 
+ #define NET_DIM_TX_EQE_PROFILES { \
+ 	{1,   NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
+ 	{8,   NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
+ 	{32,  NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
+ 	{64,  NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE},  \
+ 	{128, NET_DIM_DEFAULT_TX_CQ_MODERATION_PKTS_FROM_EQE}   \
+ }
+ 
+ #define NET_DIM_TX_CQE_PROFILES { \
+ 	{5,  128},  \
+ 	{8,  64},  \
+ 	{16, 32},  \
+ 	{32, 32},  \
+ 	{64, 32}   \
+ }
+ 
+ static const struct dim_cq_moder
+ rx_profile[DIM_CQ_PERIOD_NUM_MODES][NET_DIM_PARAMS_NUM_PROFILES] = {
+ 	NET_DIM_RX_EQE_PROFILES,
+ 	NET_DIM_RX_CQE_PROFILES,
+ };
+ 
+ static const struct dim_cq_moder
+ tx_profile[DIM_CQ_PERIOD_NUM_MODES][NET_DIM_PARAMS_NUM_PROFILES] = {
+ 	NET_DIM_TX_EQE_PROFILES,
+ 	NET_DIM_TX_CQE_PROFILES,
+ };
+ 
+ /**
+  *	net_dim_get_rx_moderation - provide a CQ moderation object for the given RX profile
+  *	@cq_period_mode: CQ period mode
+  *	@ix: Profile index
+  */
+ struct dim_cq_moder net_dim_get_rx_moderation(u8 cq_period_mode, int ix);
+ 
+ /**
+  *	net_dim_get_def_rx_moderation - provide the default RX moderation
+  *	@cq_period_mode: CQ period mode
+  */
+ struct dim_cq_moder net_dim_get_def_rx_moderation(u8 cq_period_mode);
+ 
+ /**
+  *	net_dim_get_tx_moderation - provide a CQ moderation object for the given TX profile
+  *	@cq_period_mode: CQ period mode
+  *	@ix: Profile index
+  */
+ struct dim_cq_moder net_dim_get_tx_moderation(u8 cq_period_mode, int ix);
+ 
+ /**
+  *	net_dim_get_def_tx_moderation - provide the default TX moderation
+  *	@cq_period_mode: CQ period mode
+  */
+ struct dim_cq_moder net_dim_get_def_tx_moderation(u8 cq_period_mode);
+ 
+ /**
+  *	net_dim - main DIM algorithm entry point
+  *	@dim: DIM instance information
+  *	@end_sample: Current data measurement
+  *
+  * Called by the consumer.
+  * This is the main logic of the algorithm, where data is processed in order to decide on next
+  * required action.
+  */
+ void net_dim(struct dim *dim, struct dim_sample end_sample);
+ 
+ /* RDMA DIM */
+ 
+ /*
+  * RDMA DIM profile:
+  * profile size must be of RDMA_DIM_PARAMS_NUM_PROFILES.
+  */
+ #define RDMA_DIM_PARAMS_NUM_PROFILES 9
+ #define RDMA_DIM_START_PROFILE 0
+ 
+ /**
+  * rdma_dim - Runs the adaptive moderation.
+  * @dim: The moderation struct.
+  * @completions: The number of completions collected in this round.
+  *
+  * Each call to rdma_dim takes the latest amount of completions that
+  * have been collected and counts them as a new event.
+  * Once enough events have been collected the algorithm decides a new
+  * moderation level.
+  */
+ void rdma_dim(struct dim *dim, u64 completions);
+ 
++>>>>>>> bedc0fd0f9b5 (RDMA/core: Fix -Wunused-const-variable warnings)
  #endif /* DIM_H */
* Unmerged path drivers/infiniband/core/cq.c
* Unmerged path include/linux/dim.h
