KVM: no need to check return value of debugfs_create functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Greg KH <gregkh@linuxfoundation.org>
commit 3e7093d045196b1016517631645e874fe903db7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/3e7093d0.failed

When calling debugfs functions, there is no need to ever check the
return value.  The function can work or not, but the code logic should
never do something different based on this.

Also, when doing this, change kvm_arch_create_vcpu_debugfs() to return
void instead of an integer, as we should not care at all about if this
function actually does anything or not.

	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: "Radim Krčmář" <rkrcmar@redhat.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: <x86@kernel.org>
	Cc: <kvm@vger.kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 3e7093d045196b1016517631645e874fe903db7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kvm_host.h
#	virt/kvm/kvm_main.c
diff --cc include/linux/kvm_host.h
index 780fa0268145,fcb46b3374c6..000000000000
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@@ -863,8 -861,9 +863,14 @@@ int kvm_arch_vcpu_setup(struct kvm_vcp
  void kvm_arch_vcpu_postcreate(struct kvm_vcpu *vcpu);
  void kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu);
  
++<<<<<<< HEAD
 +bool kvm_arch_has_vcpu_debugfs(void);
 +int kvm_arch_create_vcpu_debugfs(struct kvm_vcpu *vcpu);
++=======
+ #ifdef __KVM_HAVE_ARCH_VCPU_DEBUGFS
+ void kvm_arch_create_vcpu_debugfs(struct kvm_vcpu *vcpu);
+ #endif
++>>>>>>> 3e7093d04519 (KVM: no need to check return value of debugfs_create functions)
  
  int kvm_arch_hardware_enable(void);
  void kvm_arch_hardware_disable(void);
diff --cc virt/kvm/kvm_main.c
index d7a8329ce5db,4feceaa03fb1..000000000000
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@@ -2614,30 -2615,20 +2614,32 @@@ static int create_vcpu_fd(struct kvm_vc
  	return anon_inode_getfd(name, &kvm_vcpu_fops, vcpu, O_RDWR | O_CLOEXEC);
  }
  
- static int kvm_create_vcpu_debugfs(struct kvm_vcpu *vcpu)
+ static void kvm_create_vcpu_debugfs(struct kvm_vcpu *vcpu)
  {
 -#ifdef __KVM_HAVE_ARCH_VCPU_DEBUGFS
  	char dir_name[ITOA_MAX_LEN * 2];
- 	int ret;
  
 +	if (!kvm_arch_has_vcpu_debugfs())
 +		return 0;
 +
  	if (!debugfs_initialized())
- 		return 0;
+ 		return;
  
  	snprintf(dir_name, sizeof(dir_name), "vcpu%d", vcpu->vcpu_id);
  	vcpu->debugfs_dentry = debugfs_create_dir(dir_name,
- 								vcpu->kvm->debugfs_dentry);
- 	if (!vcpu->debugfs_dentry)
- 		return -ENOMEM;
+ 						  vcpu->kvm->debugfs_dentry);
  
++<<<<<<< HEAD
 +	ret = kvm_arch_create_vcpu_debugfs(vcpu);
 +	if (ret < 0) {
 +		debugfs_remove_recursive(vcpu->debugfs_dentry);
 +		return ret;
 +	}
 +
 +	return 0;
++=======
+ 	kvm_arch_create_vcpu_debugfs(vcpu);
+ #endif
++>>>>>>> 3e7093d04519 (KVM: no need to check return value of debugfs_create functions)
  }
  
  /*
diff --git a/arch/x86/kvm/debugfs.c b/arch/x86/kvm/debugfs.c
index a2f3432ce090..64c341d7b2a4 100644
--- a/arch/x86/kvm/debugfs.c
+++ b/arch/x86/kvm/debugfs.c
@@ -51,37 +51,22 @@ static int vcpu_get_tsc_scaling_frac_bits(void *data, u64 *val)
 
 DEFINE_SIMPLE_ATTRIBUTE(vcpu_tsc_scaling_frac_fops, vcpu_get_tsc_scaling_frac_bits, NULL, "%llu\n");
 
-int kvm_arch_create_vcpu_debugfs(struct kvm_vcpu *vcpu)
+void kvm_arch_create_vcpu_debugfs(struct kvm_vcpu *vcpu)
 {
-	struct dentry *ret;
+	debugfs_create_file("tsc-offset", 0444, vcpu->debugfs_dentry, vcpu,
+			    &vcpu_tsc_offset_fops);
 
-	ret = debugfs_create_file("tsc-offset", 0444,
-							vcpu->debugfs_dentry,
-							vcpu, &vcpu_tsc_offset_fops);
-	if (!ret)
-		return -ENOMEM;
-
-	if (lapic_in_kernel(vcpu)) {
-		ret = debugfs_create_file("lapic_timer_advance_ns", 0444,
-								vcpu->debugfs_dentry,
-								vcpu, &vcpu_timer_advance_ns_fops);
-		if (!ret)
-			return -ENOMEM;
-	}
+	if (lapic_in_kernel(vcpu))
+		debugfs_create_file("lapic_timer_advance_ns", 0444,
+				    vcpu->debugfs_dentry, vcpu,
+				    &vcpu_timer_advance_ns_fops);
 
 	if (kvm_has_tsc_control) {
-		ret = debugfs_create_file("tsc-scaling-ratio", 0444,
-							vcpu->debugfs_dentry,
-							vcpu, &vcpu_tsc_scaling_fops);
-		if (!ret)
-			return -ENOMEM;
-		ret = debugfs_create_file("tsc-scaling-ratio-frac-bits", 0444,
-							vcpu->debugfs_dentry,
-							vcpu, &vcpu_tsc_scaling_frac_fops);
-		if (!ret)
-			return -ENOMEM;
-
+		debugfs_create_file("tsc-scaling-ratio", 0444,
+				    vcpu->debugfs_dentry, vcpu,
+				    &vcpu_tsc_scaling_fops);
+		debugfs_create_file("tsc-scaling-ratio-frac-bits", 0444,
+				    vcpu->debugfs_dentry, vcpu,
+				    &vcpu_tsc_scaling_frac_fops);
 	}
-
-	return 0;
 }
* Unmerged path include/linux/kvm_host.h
* Unmerged path virt/kvm/kvm_main.c
