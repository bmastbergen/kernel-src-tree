nvme-pci: tidy up nvme_map_data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 70479b71bc80ae6f63c8d6644cc76dff99f79686
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/70479b71.failed

Remove two pointless local variables, remove ret assignment that is
never used, move the use_sgl initialization closer to where it is used.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <keith.busch@intel.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
(cherry picked from commit 70479b71bc80ae6f63c8d6644cc76dff99f79686)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index a1872786ad46,c1eecde6b853..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -818,25 -840,30 +818,29 @@@ static blk_status_t nvme_map_data(struc
  		struct nvme_command *cmnd)
  {
  	struct nvme_iod *iod = blk_mq_rq_to_pdu(req);
- 	struct request_queue *q = req->q;
- 	enum dma_data_direction dma_dir = rq_data_dir(req) ?
- 			DMA_TO_DEVICE : DMA_FROM_DEVICE;
- 	blk_status_t ret = BLK_STS_IOERR;
+ 	blk_status_t ret = BLK_STS_RESOURCE;
  	int nr_mapped;
  
 -	if (blk_rq_nr_phys_segments(req) == 1) {
 -		struct bio_vec bv = req_bvec(req);
 -
 -		if (!is_pci_p2pdma_page(bv.bv_page)) {
 -			if (bv.bv_offset + bv.bv_len <= dev->ctrl.page_size * 2)
 -				return nvme_setup_prp_simple(dev, req,
 -							     &cmnd->rw, &bv);
 -
 -			if (iod->nvmeq->qid &&
 -			    dev->ctrl.sgls & ((1 << 0) | (1 << 1)))
 -				return nvme_setup_sgl_simple(dev, req,
 -							     &cmnd->rw, &bv);
 -		}
 +	if (blk_rq_payload_bytes(req) > NVME_INT_BYTES(dev) ||
 +	    blk_rq_nr_phys_segments(req) > NVME_INT_PAGES) {
 +		iod->sg = mempool_alloc(dev->iod_mempool, GFP_ATOMIC);
 +		if (!iod->sg)
 +			return BLK_STS_RESOURCE;
 +	} else {
 +		iod->sg = iod->inline_sg;
  	}
  
++<<<<<<< HEAD
 +	iod->use_sgl = nvme_pci_use_sgls(dev, req);
 +
++=======
+ 	iod->dma_len = 0;
+ 	iod->sg = mempool_alloc(dev->iod_mempool, GFP_ATOMIC);
+ 	if (!iod->sg)
+ 		return BLK_STS_RESOURCE;
++>>>>>>> 70479b71bc80 (nvme-pci: tidy up nvme_map_data)
  	sg_init_table(iod->sg, blk_rq_nr_phys_segments(req));
- 	iod->nents = blk_rq_map_sg(q, req, iod->sg);
+ 	iod->nents = blk_rq_map_sg(req->q, req, iod->sg);
  	if (!iod->nents)
  		goto out;
  
* Unmerged path drivers/nvme/host/pci.c
