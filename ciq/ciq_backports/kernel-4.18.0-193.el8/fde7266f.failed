drm/i915: Fix eDP DPCD aux max backlight calculations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Lyude Paul <lyude@redhat.com>
commit fde7266fb2f6fff2a7fe861474bf198ef0f2449f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/fde7266f.failed

Max backlight value for the panel was being calculated using byte
count i.e. 0xffff if 2 bytes are supported for backlight brightness
and 0xff if 1 byte is supported. However, EDP_PWMGEN_BIT_COUNT
determines the number of active control bits used for the brightness
setting. Thus, even if the panel uses 2 byte setting, it might not use
all the control bits. Thus, max backlight should be set based on the
value of EDP_PWMGEN_BIT_COUNT instead of assuming 65535 or 255.

Additionally, EDP_PWMGEN_BIT_COUNT was being updated based on the VBT
frequency which results in a different max backlight value. Thus,
setting of EDP_PWMGEN_BIT_COUNT is moved to setup phase instead of
enable so that max backlight can be calculated correctly. Only the
frequency divider is set during the enable phase using the value of
EDP_PWMGEN_BIT_COUNT.

This is based off the original patch series from Furquan Shaikh
<furquan@google.com>:

https://patchwork.freedesktop.org/patch/317255/?series=62326&rev=3

Changes since original patch:
* Remove unused intel_dp variable in intel_dp_aux_setup_backlight()
* Fix checkpatch issues
* Make sure that we rewrite the pwmgen bit count whenever we bring the
  panel out of D3 mode

v2 by Jani:
* rebase
* fix readb return value check

	Cc: Furquan Shaikh <furquan@google.com>
	Tested-by: AceLan Kao <acelan.kao@canonical.com>
	Tested-by: Perry Yuan <pyuan@redhat.com>
	Signed-off-by: Lyude Paul <lyude@redhat.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200116211623.53799-2-lyude@redhat.com
(cherry picked from commit fde7266fb2f6fff2a7fe861474bf198ef0f2449f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_display_types.h
#	drivers/gpu/drm/i915/intel_dp_aux_backlight.c
diff --cc drivers/gpu/drm/i915/intel_dp_aux_backlight.c
index 357136f17f85,345eed641455..000000000000
--- a/drivers/gpu/drm/i915/intel_dp_aux_backlight.c
+++ b/drivers/gpu/drm/i915/intel_dp_aux_backlight.c
@@@ -109,16 -110,11 +109,17 @@@ intel_dp_aux_set_backlight(const struc
  static bool intel_dp_aux_set_pwm_freq(struct intel_connector *connector)
  {
  	struct drm_i915_private *dev_priv = to_i915(connector->base.dev);
++<<<<<<< HEAD:drivers/gpu/drm/i915/intel_dp_aux_backlight.c
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
 +	int freq, fxp, fxp_min, fxp_max, fxp_actual, f = 1;
 +	u8 pn, pn_min, pn_max;
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(connector->encoder);
+ 	const u8 pn = connector->panel.backlight.pwmgen_bit_count;
+ 	int freq, fxp, f, fxp_actual, fxp_min, fxp_max;
++>>>>>>> fde7266fb2f6 (drm/i915: Fix eDP DPCD aux max backlight calculations):drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
  
- 	/* Find desired value of (F x P)
- 	 * Note that, if F x P is out of supported range, the maximum value or
- 	 * minimum value will applied automatically. So no need to check that.
- 	 */
  	freq = dev_priv->vbt.backlight.pwm_freq_hz;
- 	DRM_DEBUG_KMS("VBT defined backlight frequency %u Hz\n", freq);
  	if (!freq) {
  		DRM_DEBUG_KMS("Use panel default backlight frequency\n");
  		return false;
@@@ -177,7 -145,8 +150,12 @@@ static void intel_dp_aux_enable_backlig
  					  const struct drm_connector_state *conn_state)
  {
  	struct intel_connector *connector = to_intel_connector(conn_state->connector);
++<<<<<<< HEAD:drivers/gpu/drm/i915/intel_dp_aux_backlight.c
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(connector->encoder);
+ 	struct intel_panel *panel = &connector->panel;
++>>>>>>> fde7266fb2f6 (drm/i915: Fix eDP DPCD aux max backlight calculations):drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
  	u8 dpcd_buf, new_dpcd_buf, edp_backlight_mode;
  
  	if (drm_dp_dpcd_readb(&intel_dp->aux,
@@@ -221,19 -196,92 +205,95 @@@
  
  static void intel_dp_aux_disable_backlight(const struct drm_connector_state *old_conn_state)
  {
 -	set_aux_backlight_enable(enc_to_intel_dp(to_intel_encoder(old_conn_state->best_encoder)),
 -				 false);
 +	set_aux_backlight_enable(enc_to_intel_dp(old_conn_state->best_encoder), false);
  }
  
+ static u32 intel_dp_aux_calc_max_backlight(struct intel_connector *connector)
+ {
+ 	struct drm_i915_private *i915 = to_i915(connector->base.dev);
+ 	struct intel_dp *intel_dp = enc_to_intel_dp(connector->encoder);
+ 	struct intel_panel *panel = &connector->panel;
+ 	u32 max_backlight = 0;
+ 	int freq, fxp, fxp_min, fxp_max, fxp_actual, f = 1;
+ 	u8 pn, pn_min, pn_max;
+ 
+ 	if (drm_dp_dpcd_readb(&intel_dp->aux, DP_EDP_PWMGEN_BIT_COUNT, &pn) == 1) {
+ 		pn &= DP_EDP_PWMGEN_BIT_COUNT_MASK;
+ 		max_backlight = (1 << pn) - 1;
+ 	}
+ 
+ 	/* Find desired value of (F x P)
+ 	 * Note that, if F x P is out of supported range, the maximum value or
+ 	 * minimum value will applied automatically. So no need to check that.
+ 	 */
+ 	freq = i915->vbt.backlight.pwm_freq_hz;
+ 	DRM_DEBUG_KMS("VBT defined backlight frequency %u Hz\n", freq);
+ 	if (!freq) {
+ 		DRM_DEBUG_KMS("Use panel default backlight frequency\n");
+ 		return max_backlight;
+ 	}
+ 
+ 	fxp = DIV_ROUND_CLOSEST(KHz(DP_EDP_BACKLIGHT_FREQ_BASE_KHZ), freq);
+ 
+ 	/* Use highest possible value of Pn for more granularity of brightness
+ 	 * adjustment while satifying the conditions below.
+ 	 * - Pn is in the range of Pn_min and Pn_max
+ 	 * - F is in the range of 1 and 255
+ 	 * - FxP is within 25% of desired value.
+ 	 *   Note: 25% is arbitrary value and may need some tweak.
+ 	 */
+ 	if (drm_dp_dpcd_readb(&intel_dp->aux,
+ 			      DP_EDP_PWMGEN_BIT_COUNT_CAP_MIN, &pn_min) != 1) {
+ 		DRM_DEBUG_KMS("Failed to read pwmgen bit count cap min\n");
+ 		return max_backlight;
+ 	}
+ 	if (drm_dp_dpcd_readb(&intel_dp->aux,
+ 			      DP_EDP_PWMGEN_BIT_COUNT_CAP_MAX, &pn_max) != 1) {
+ 		DRM_DEBUG_KMS("Failed to read pwmgen bit count cap max\n");
+ 		return max_backlight;
+ 	}
+ 	pn_min &= DP_EDP_PWMGEN_BIT_COUNT_MASK;
+ 	pn_max &= DP_EDP_PWMGEN_BIT_COUNT_MASK;
+ 
+ 	fxp_min = DIV_ROUND_CLOSEST(fxp * 3, 4);
+ 	fxp_max = DIV_ROUND_CLOSEST(fxp * 5, 4);
+ 	if (fxp_min < (1 << pn_min) || (255 << pn_max) < fxp_max) {
+ 		DRM_DEBUG_KMS("VBT defined backlight frequency out of range\n");
+ 		return max_backlight;
+ 	}
+ 
+ 	for (pn = pn_max; pn >= pn_min; pn--) {
+ 		f = clamp(DIV_ROUND_CLOSEST(fxp, 1 << pn), 1, 255);
+ 		fxp_actual = f << pn;
+ 		if (fxp_min <= fxp_actual && fxp_actual <= fxp_max)
+ 			break;
+ 	}
+ 
+ 	DRM_DEBUG_KMS("Using eDP pwmgen bit count of %d\n", pn);
+ 	if (drm_dp_dpcd_writeb(&intel_dp->aux,
+ 			       DP_EDP_PWMGEN_BIT_COUNT, pn) < 0) {
+ 		DRM_DEBUG_KMS("Failed to write aux pwmgen bit count\n");
+ 		return max_backlight;
+ 	}
+ 	panel->backlight.pwmgen_bit_count = pn;
+ 
+ 	max_backlight = (1 << pn) - 1;
+ 
+ 	return max_backlight;
+ }
+ 
  static int intel_dp_aux_setup_backlight(struct intel_connector *connector,
  					enum pipe pipe)
  {
++<<<<<<< HEAD:drivers/gpu/drm/i915/intel_dp_aux_backlight.c
 +	struct intel_dp *intel_dp = enc_to_intel_dp(&connector->encoder->base);
++=======
++>>>>>>> fde7266fb2f6 (drm/i915: Fix eDP DPCD aux max backlight calculations):drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
  	struct intel_panel *panel = &connector->panel;
  
- 	if (intel_dp->edp_dpcd[2] & DP_EDP_BACKLIGHT_BRIGHTNESS_BYTE_COUNT)
- 		panel->backlight.max = 0xFFFF;
- 	else
- 		panel->backlight.max = 0xFF;
+ 	panel->backlight.max = intel_dp_aux_calc_max_backlight(connector);
+ 	if (!panel->backlight.max)
+ 		return -ENODEV;
  
  	panel->backlight.min = 0;
  	panel->backlight.level = intel_dp_aux_get_backlight(connector);
* Unmerged path drivers/gpu/drm/i915/display/intel_display_types.h
* Unmerged path drivers/gpu/drm/i915/display/intel_display_types.h
* Unmerged path drivers/gpu/drm/i915/intel_dp_aux_backlight.c
