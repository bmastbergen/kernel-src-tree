xfs: implement cgroup aware writeback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Christoph Hellwig <hch@lst.de>
commit adfb5fb46af059387eca0fce1d8cd8733f9ee3a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/adfb5fb4.failed

Link every newly allocated writeback bio to cgroup pointed to by the
writeback control structure, and charge every byte written back to it.

	Tested-by: Stefan Priebe - Profihost AG <s.priebe@profihost.ag>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit adfb5fb46af059387eca0fce1d8cd8733f9ee3a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_aops.c
diff --cc fs/xfs/xfs_aops.c
index 7b8bb6bde981,73c291aeae17..000000000000
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@@ -585,6 -698,9 +585,12 @@@ xfs_alloc_ioend
  	bio = bio_alloc_bioset(GFP_NOFS, BIO_MAX_PAGES, &xfs_ioend_bioset);
  	bio_set_dev(bio, bdev);
  	bio->bi_iter.bi_sector = sector;
++<<<<<<< HEAD
++=======
+ 	bio->bi_opf = REQ_OP_WRITE | wbc_to_write_flags(wbc);
+ 	bio->bi_write_hint = inode->i_write_hint;
+ 	wbc_init_bio(wbc, bio);
++>>>>>>> adfb5fb46af0 (xfs: implement cgroup aware writeback)
  
  	ioend = container_of(bio, struct xfs_ioend, io_inline_bio);
  	INIT_LIST_HEAD(&ioend->io_list);
@@@ -616,14 -728,15 +622,26 @@@ xfs_chain_bio
  	struct bio *new;
  
  	new = bio_alloc(GFP_NOFS, BIO_MAX_PAGES);
++<<<<<<< HEAD
 +	bio_set_dev(new, bdev);
 +	new->bi_iter.bi_sector = sector;
 +	bio_chain(ioend->io_bio, new);
 +	bio_get(ioend->io_bio);		/* for xfs_destroy_ioend */
 +	ioend->io_bio->bi_opf = REQ_OP_WRITE | wbc_to_write_flags(wbc);
 +	ioend->io_bio->bi_write_hint = ioend->io_inode->i_write_hint;
 +	submit_bio(ioend->io_bio);
 +	ioend->io_bio = new;
++=======
+ 	bio_copy_dev(new, prev);/* also copies over blkcg information */
+ 	new->bi_iter.bi_sector = bio_end_sector(prev);
+ 	new->bi_opf = prev->bi_opf;
+ 	new->bi_write_hint = prev->bi_write_hint;
+ 
+ 	bio_chain(prev, new);
+ 	bio_get(prev);		/* for xfs_destroy_ioend */
+ 	submit_bio(prev);
+ 	return new;
++>>>>>>> adfb5fb46af0 (xfs: implement cgroup aware writeback)
  }
  
  /*
* Unmerged path fs/xfs/xfs_aops.c
diff --git a/fs/xfs/xfs_super.c b/fs/xfs/xfs_super.c
index 4943cb49b440..51a122d75690 100644
--- a/fs/xfs/xfs_super.c
+++ b/fs/xfs/xfs_super.c
@@ -1685,6 +1685,8 @@ xfs_fs_fill_super(
 	sb->s_maxbytes = xfs_max_file_offset(sb->s_blocksize_bits);
 	sb->s_max_links = XFS_MAXLINK;
 	sb->s_time_gran = 1;
+	sb->s_iflags |= SB_I_CGROUPWB;
+
 	set_posix_acl_flag(sb);
 
 	/* version 5 superblocks support inode version counters. */
