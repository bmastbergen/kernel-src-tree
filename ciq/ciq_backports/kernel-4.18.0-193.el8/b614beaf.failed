ASoC: soc-core: dapm related setup at one place

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-core: dapm related setup at one place (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 94.00%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit b614beafa495c7f6fbc15cb6977e3fe48beea1e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/b614beaf.failed

Current ASoC setups some dapm related member at
snd_soc_component_initialize() which is called when component was
registered, and setups remaining member at soc_probe_component()
which is called when component was probed.
This kind of setup separation is no meanings, and it is very
difficult to read and confusable.
This patch setups all dapm settings at one place.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87r25c7lbo.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit b614beafa495c7f6fbc15cb6977e3fe48beea1e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-core.c
diff --cc sound/soc/soc-core.c
index 752d9151c441,21c005a044e8..000000000000
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@@ -984,6 -993,107 +984,110 @@@ static void soc_remove_component(struc
  	soc_cleanup_component(component);
  }
  
++<<<<<<< HEAD
++=======
+ static int soc_probe_component(struct snd_soc_card *card,
+ 			       struct snd_soc_component *component)
+ {
+ 	struct snd_soc_dapm_context *dapm =
+ 		snd_soc_component_get_dapm(component);
+ 	struct snd_soc_dai *dai;
+ 	int ret;
+ 
+ 	if (!strcmp(component->name, "snd-soc-dummy"))
+ 		return 0;
+ 
+ 	if (component->card) {
+ 		if (component->card != card) {
+ 			dev_err(component->dev,
+ 				"Trying to bind component to card \"%s\" but is already bound to card \"%s\"\n",
+ 				card->name, component->card->name);
+ 			return -ENODEV;
+ 		}
+ 		return 0;
+ 	}
+ 
+ 	ret = snd_soc_component_module_get_when_probe(component);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	component->card = card;
+ 	soc_set_name_prefix(card, component);
+ 
+ 	soc_init_component_debugfs(component);
+ 
+ 	INIT_LIST_HEAD(&dapm->list);
+ 	dapm->card		= card;
+ 	dapm->dev		= component->dev;
+ 	dapm->component		= component;
+ 	dapm->bias_level	= SND_SOC_BIAS_OFF;
+ 	dapm->idle_bias_off	= !component->driver->idle_bias_on;
+ 	dapm->suspend_bias_off	= component->driver->suspend_bias_off;
+ 	list_add(&dapm->list, &card->dapm_list);
+ 
+ 	ret = snd_soc_dapm_new_controls(dapm,
+ 					component->driver->dapm_widgets,
+ 					component->driver->num_dapm_widgets);
+ 
+ 	if (ret != 0) {
+ 		dev_err(component->dev,
+ 			"Failed to create new controls %d\n", ret);
+ 		goto err_probe;
+ 	}
+ 
+ 	for_each_component_dais(component, dai) {
+ 		ret = snd_soc_dapm_new_dai_widgets(dapm, dai);
+ 		if (ret != 0) {
+ 			dev_err(component->dev,
+ 				"Failed to create DAI widgets %d\n", ret);
+ 			goto err_probe;
+ 		}
+ 	}
+ 
+ 	ret = snd_soc_component_probe(component);
+ 	if (ret < 0) {
+ 		dev_err(component->dev,
+ 			"ASoC: failed to probe component %d\n", ret);
+ 		goto err_probe;
+ 	}
+ 	WARN(dapm->idle_bias_off &&
+ 	     dapm->bias_level != SND_SOC_BIAS_OFF,
+ 	     "codec %s can not start from non-off bias with idle_bias_off==1\n",
+ 	     component->name);
+ 
+ 	/* machine specific init */
+ 	if (component->init) {
+ 		ret = component->init(component);
+ 		if (ret < 0) {
+ 			dev_err(component->dev,
+ 				"Failed to do machine specific init %d\n", ret);
+ 			goto err_probe;
+ 		}
+ 	}
+ 
+ 	ret = snd_soc_add_component_controls(component,
+ 					     component->driver->controls,
+ 					     component->driver->num_controls);
+ 	if (ret < 0)
+ 		goto err_probe;
+ 
+ 	ret = snd_soc_dapm_add_routes(dapm,
+ 				      component->driver->dapm_routes,
+ 				      component->driver->num_dapm_routes);
+ 	if (ret < 0)
+ 		goto err_probe;
+ 
+ 	/* see for_each_card_components */
+ 	list_add(&component->card_list, &card->component_dev_list);
+ 
+ err_probe:
+ 	if (ret < 0)
+ 		soc_cleanup_component(component);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> b614beafa495 (ASoC: soc-core: dapm related setup at one place)
  static void soc_remove_dai(struct snd_soc_dai *dai, int order)
  {
  	int err;
@@@ -3148,19 -2669,6 +3250,22 @@@ static int snd_soc_component_initialize
  	component->dev = dev;
  	component->driver = driver;
  
++<<<<<<< HEAD
 +	dapm = snd_soc_component_get_dapm(component);
 +	dapm->dev = dev;
 +	dapm->component = component;
 +	dapm->bias_level = SND_SOC_BIAS_OFF;
 +	dapm->idle_bias_off = !driver->idle_bias_on;
 +	dapm->suspend_bias_off = driver->suspend_bias_off;
 +	if (driver->seq_notifier)
 +		dapm->seq_notifier = snd_soc_component_seq_notifier;
 +	if (driver->stream_event)
 +		dapm->stream_event = snd_soc_component_stream_event;
 +	if (driver->set_bias_level)
 +		dapm->set_bias_level = snd_soc_component_set_bias_level;
 +
++=======
++>>>>>>> b614beafa495 (ASoC: soc-core: dapm related setup at one place)
  	return 0;
  }
  
* Unmerged path sound/soc/soc-core.c
