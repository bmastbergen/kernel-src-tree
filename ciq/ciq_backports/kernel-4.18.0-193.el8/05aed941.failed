iommu/io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [iommu] io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers (Jerry Snitselaar) [1729845]
Rebuild_FUZZ: 96.00%
commit-author Will Deacon <will@kernel.org>
commit 05aed9412b0bd0d9a985d94010c42ff0a5c6cc29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/05aed941.failed

Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers using the
io-pgtable API so that we can start making use of them in the page-table
code. For now, they can just wrap the implementations of ->tlb_add_flush
and ->tlb_sync pending future optimisation in each driver.

	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 05aed9412b0bd0d9a985d94010c42ff0a5c6cc29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/panfrost/panfrost_mmu.c
#	drivers/iommu/arm-smmu-v3.c
#	drivers/iommu/arm-smmu.c
#	drivers/iommu/msm_iommu.c
#	drivers/iommu/mtk_iommu.c
#	drivers/iommu/qcom_iommu.c
diff --cc drivers/iommu/arm-smmu-v3.c
index c08a34136024,79819b003b07..000000000000
--- a/drivers/iommu/arm-smmu-v3.c
+++ b/drivers/iommu/arm-smmu-v3.c
@@@ -1598,8 -1603,30 +1598,34 @@@ static void arm_smmu_tlb_inv_range_nosy
  	} while (size -= granule);
  }
  
++<<<<<<< HEAD
 +static const struct iommu_gather_ops arm_smmu_gather_ops = {
++=======
+ static void arm_smmu_tlb_inv_walk(unsigned long iova, size_t size,
+ 				  size_t granule, void *cookie)
+ {
+ 	struct arm_smmu_domain *smmu_domain = cookie;
+ 	struct arm_smmu_device *smmu = smmu_domain->smmu;
+ 
+ 	arm_smmu_tlb_inv_range_nosync(iova, size, granule, false, cookie);
+ 	arm_smmu_cmdq_issue_sync(smmu);
+ }
+ 
+ static void arm_smmu_tlb_inv_leaf(unsigned long iova, size_t size,
+ 				  size_t granule, void *cookie)
+ {
+ 	struct arm_smmu_domain *smmu_domain = cookie;
+ 	struct arm_smmu_device *smmu = smmu_domain->smmu;
+ 
+ 	arm_smmu_tlb_inv_range_nosync(iova, size, granule, true, cookie);
+ 	arm_smmu_cmdq_issue_sync(smmu);
+ }
+ 
+ static const struct iommu_flush_ops arm_smmu_flush_ops = {
++>>>>>>> 05aed9412b0b (iommu/io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers)
  	.tlb_flush_all	= arm_smmu_tlb_inv_context,
+ 	.tlb_flush_walk = arm_smmu_tlb_inv_walk,
+ 	.tlb_flush_leaf = arm_smmu_tlb_inv_leaf,
  	.tlb_add_flush	= arm_smmu_tlb_inv_range_nosync,
  	.tlb_sync	= arm_smmu_tlb_sync,
  };
diff --cc drivers/iommu/arm-smmu.c
index 58f85e7c33c2,e9f01b860ae3..000000000000
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@@ -540,20 -547,44 +540,48 @@@ static void arm_smmu_tlb_inv_vmid_nosyn
  	writel_relaxed(smmu_domain->cfg.vmid, base + ARM_SMMU_GR0_TLBIVMID);
  }
  
++<<<<<<< HEAD
 +static const struct iommu_gather_ops arm_smmu_s1_tlb_ops = {
++=======
+ static void arm_smmu_tlb_inv_walk(unsigned long iova, size_t size,
+ 				  size_t granule, void *cookie)
+ {
+ 	struct arm_smmu_domain *smmu_domain = cookie;
+ 
+ 	smmu_domain->tlb_ops->tlb_add_flush(iova, size, granule, false, cookie);
+ 	smmu_domain->tlb_ops->tlb_sync(cookie);
+ }
+ 
+ static void arm_smmu_tlb_inv_leaf(unsigned long iova, size_t size,
+ 				  size_t granule, void *cookie)
+ {
+ 	struct arm_smmu_domain *smmu_domain = cookie;
+ 
+ 	smmu_domain->tlb_ops->tlb_add_flush(iova, size, granule, true, cookie);
+ 	smmu_domain->tlb_ops->tlb_sync(cookie);
+ }
+ 
+ static const struct iommu_flush_ops arm_smmu_s1_tlb_ops = {
++>>>>>>> 05aed9412b0b (iommu/io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers)
  	.tlb_flush_all	= arm_smmu_tlb_inv_context_s1,
+ 	.tlb_flush_walk	= arm_smmu_tlb_inv_walk,
+ 	.tlb_flush_leaf	= arm_smmu_tlb_inv_leaf,
  	.tlb_add_flush	= arm_smmu_tlb_inv_range_nosync,
  	.tlb_sync	= arm_smmu_tlb_sync_context,
  };
  
 -static const struct iommu_flush_ops arm_smmu_s2_tlb_ops_v2 = {
 +static const struct iommu_gather_ops arm_smmu_s2_tlb_ops_v2 = {
  	.tlb_flush_all	= arm_smmu_tlb_inv_context_s2,
+ 	.tlb_flush_walk	= arm_smmu_tlb_inv_walk,
+ 	.tlb_flush_leaf	= arm_smmu_tlb_inv_leaf,
  	.tlb_add_flush	= arm_smmu_tlb_inv_range_nosync,
  	.tlb_sync	= arm_smmu_tlb_sync_context,
  };
  
 -static const struct iommu_flush_ops arm_smmu_s2_tlb_ops_v1 = {
 +static const struct iommu_gather_ops arm_smmu_s2_tlb_ops_v1 = {
  	.tlb_flush_all	= arm_smmu_tlb_inv_context_s2,
+ 	.tlb_flush_walk	= arm_smmu_tlb_inv_walk,
+ 	.tlb_flush_leaf	= arm_smmu_tlb_inv_leaf,
  	.tlb_add_flush	= arm_smmu_tlb_inv_vmid_nosync,
  	.tlb_sync	= arm_smmu_tlb_sync_vmid,
  };
diff --cc drivers/iommu/msm_iommu.c
index bc2cef99bb30,64132093751a..000000000000
--- a/drivers/iommu/msm_iommu.c
+++ b/drivers/iommu/msm_iommu.c
@@@ -189,8 -178,24 +189,28 @@@ static void __flush_iotlb_sync(void *co
  	 */
  }
  
++<<<<<<< HEAD
 +static const struct iommu_gather_ops msm_iommu_gather_ops = {
++=======
+ static void __flush_iotlb_walk(unsigned long iova, size_t size,
+ 			       size_t granule, void *cookie)
+ {
+ 	__flush_iotlb_range(iova, size, granule, false, cookie);
+ 	__flush_iotlb_sync(cookie);
+ }
+ 
+ static void __flush_iotlb_leaf(unsigned long iova, size_t size,
+ 			       size_t granule, void *cookie)
+ {
+ 	__flush_iotlb_range(iova, size, granule, true, cookie);
+ 	__flush_iotlb_sync(cookie);
+ }
+ 
+ static const struct iommu_flush_ops msm_iommu_flush_ops = {
++>>>>>>> 05aed9412b0b (iommu/io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers)
  	.tlb_flush_all = __flush_iotlb,
+ 	.tlb_flush_walk = __flush_iotlb_walk,
+ 	.tlb_flush_leaf = __flush_iotlb_leaf,
  	.tlb_add_flush = __flush_iotlb_range,
  	.tlb_sync = __flush_iotlb_sync,
  };
diff --cc drivers/iommu/mtk_iommu.c
index f9f69f7111a9,85a7176bf9ae..000000000000
--- a/drivers/iommu/mtk_iommu.c
+++ b/drivers/iommu/mtk_iommu.c
@@@ -196,8 -188,24 +196,28 @@@ static void mtk_iommu_tlb_sync(void *co
  	}
  }
  
++<<<<<<< HEAD
 +static const struct iommu_gather_ops mtk_iommu_gather_ops = {
++=======
+ static void mtk_iommu_tlb_flush_walk(unsigned long iova, size_t size,
+ 				     size_t granule, void *cookie)
+ {
+ 	mtk_iommu_tlb_add_flush_nosync(iova, size, granule, false, cookie);
+ 	mtk_iommu_tlb_sync(cookie);
+ }
+ 
+ static void mtk_iommu_tlb_flush_leaf(unsigned long iova, size_t size,
+ 				     size_t granule, void *cookie)
+ {
+ 	mtk_iommu_tlb_add_flush_nosync(iova, size, granule, true, cookie);
+ 	mtk_iommu_tlb_sync(cookie);
+ }
+ 
+ static const struct iommu_flush_ops mtk_iommu_flush_ops = {
++>>>>>>> 05aed9412b0b (iommu/io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers)
  	.tlb_flush_all = mtk_iommu_tlb_flush_all,
+ 	.tlb_flush_walk = mtk_iommu_tlb_flush_walk,
+ 	.tlb_flush_leaf = mtk_iommu_tlb_flush_leaf,
  	.tlb_add_flush = mtk_iommu_tlb_add_flush_nosync,
  	.tlb_sync = mtk_iommu_tlb_sync,
  };
diff --cc drivers/iommu/qcom_iommu.c
index 5fa9507289ec,643079e52e69..000000000000
--- a/drivers/iommu/qcom_iommu.c
+++ b/drivers/iommu/qcom_iommu.c
@@@ -175,8 -164,24 +175,28 @@@ static void qcom_iommu_tlb_inv_range_no
  	}
  }
  
++<<<<<<< HEAD
 +static const struct iommu_gather_ops qcom_gather_ops = {
++=======
+ static void qcom_iommu_tlb_flush_walk(unsigned long iova, size_t size,
+ 				      size_t granule, void *cookie)
+ {
+ 	qcom_iommu_tlb_inv_range_nosync(iova, size, granule, false, cookie);
+ 	qcom_iommu_tlb_sync(cookie);
+ }
+ 
+ static void qcom_iommu_tlb_flush_leaf(unsigned long iova, size_t size,
+ 				      size_t granule, void *cookie)
+ {
+ 	qcom_iommu_tlb_inv_range_nosync(iova, size, granule, true, cookie);
+ 	qcom_iommu_tlb_sync(cookie);
+ }
+ 
+ static const struct iommu_flush_ops qcom_flush_ops = {
++>>>>>>> 05aed9412b0b (iommu/io-pgtable: Hook up ->tlb_flush_walk() and ->tlb_flush_leaf() in drivers)
  	.tlb_flush_all	= qcom_iommu_tlb_inv_context,
+ 	.tlb_flush_walk = qcom_iommu_tlb_flush_walk,
+ 	.tlb_flush_leaf = qcom_iommu_tlb_flush_leaf,
  	.tlb_add_flush	= qcom_iommu_tlb_inv_range_nosync,
  	.tlb_sync	= qcom_iommu_tlb_sync,
  };
* Unmerged path drivers/gpu/drm/panfrost/panfrost_mmu.c
* Unmerged path drivers/gpu/drm/panfrost/panfrost_mmu.c
* Unmerged path drivers/iommu/arm-smmu-v3.c
* Unmerged path drivers/iommu/arm-smmu.c
diff --git a/drivers/iommu/ipmmu-vmsa.c b/drivers/iommu/ipmmu-vmsa.c
index c842cf9ce2c3..f22269fe0d9e 100644
--- a/drivers/iommu/ipmmu-vmsa.c
+++ b/drivers/iommu/ipmmu-vmsa.c
@@ -349,6 +349,12 @@ static void ipmmu_tlb_flush_all(void *cookie)
 	ipmmu_tlb_invalidate(domain);
 }
 
+static void ipmmu_tlb_flush(unsigned long iova, size_t size,
+				size_t granule, void *cookie)
+{
+	ipmmu_tlb_flush_all(cookie);
+}
+
 static void ipmmu_tlb_add_flush(unsigned long iova, size_t size,
 				size_t granule, bool leaf, void *cookie)
 {
@@ -357,6 +363,8 @@ static void ipmmu_tlb_add_flush(unsigned long iova, size_t size,
 
 static const struct iommu_gather_ops ipmmu_gather_ops = {
 	.tlb_flush_all = ipmmu_tlb_flush_all,
+	.tlb_flush_walk = ipmmu_tlb_flush,
+	.tlb_flush_leaf = ipmmu_tlb_flush,
 	.tlb_add_flush = ipmmu_tlb_add_flush,
 	.tlb_sync = ipmmu_tlb_flush_all,
 };
* Unmerged path drivers/iommu/msm_iommu.c
* Unmerged path drivers/iommu/mtk_iommu.c
* Unmerged path drivers/iommu/qcom_iommu.c
