ASoC: soc-dai: add snd_soc_dai_delay()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-dai: add snd_soc_dai_delay() (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 92.68%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 1dea80d4b2bd3b53c58f008ca2bcd73182583711
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1dea80d4.failed

Current ALSA SoC is directly using dai->driver->ops->xxx,
thus, it has deep nested bracket, and it makes code unreadable.
This patch adds new snd_soc_dai_delay() and use it.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87o91mhn3i.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 1dea80d4b2bd3b53c58f008ca2bcd73182583711)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/soc-dai.h
#	sound/soc/soc-dai.c
diff --cc include/sound/soc-dai.h
index f5d70041108f,7cfed3034511..000000000000
--- a/include/sound/soc-dai.h
+++ b/include/sound/soc-dai.h
@@@ -145,6 -145,24 +145,27 @@@ int snd_soc_dai_get_channel_map(struct 
  
  int snd_soc_dai_is_dummy(struct snd_soc_dai *dai);
  
++<<<<<<< HEAD
++=======
+ int snd_soc_dai_hw_params(struct snd_soc_dai *dai,
+ 			  struct snd_pcm_substream *substream,
+ 			  struct snd_pcm_hw_params *params);
+ void snd_soc_dai_hw_free(struct snd_soc_dai *dai,
+ 			 struct snd_pcm_substream *substream);
+ int snd_soc_dai_startup(struct snd_soc_dai *dai,
+ 			struct snd_pcm_substream *substream);
+ void snd_soc_dai_shutdown(struct snd_soc_dai *dai,
+ 			  struct snd_pcm_substream *substream);
+ int snd_soc_dai_prepare(struct snd_soc_dai *dai,
+ 			struct snd_pcm_substream *substream);
+ int snd_soc_dai_trigger(struct snd_soc_dai *dai,
+ 			struct snd_pcm_substream *substream, int cmd);
+ int snd_soc_dai_bespoke_trigger(struct snd_soc_dai *dai,
+ 			struct snd_pcm_substream *substream, int cmd);
+ snd_pcm_sframes_t snd_soc_dai_delay(struct snd_soc_dai *dai,
+ 				    struct snd_pcm_substream *substream);
+ 
++>>>>>>> 1dea80d4b2bd (ASoC: soc-dai: add snd_soc_dai_delay())
  struct snd_soc_dai_ops {
  	/*
  	 * DAI clocking configuration, all optional.
* Unmerged path sound/soc/soc-dai.c
* Unmerged path include/sound/soc-dai.h
* Unmerged path sound/soc/soc-dai.c
diff --git a/sound/soc/soc-pcm.c b/sound/soc/soc-pcm.c
index 4878d22ebd8c..6de0967c4395 100644
--- a/sound/soc/soc-pcm.c
+++ b/sound/soc/soc-pcm.c
@@ -1227,14 +1227,11 @@ static snd_pcm_uframes_t soc_pcm_pointer(struct snd_pcm_substream *substream)
 	/* base delay if assigned in pointer callback */
 	delay = runtime->delay;
 
-	if (cpu_dai->driver->ops->delay)
-		delay += cpu_dai->driver->ops->delay(substream, cpu_dai);
+	delay += snd_soc_dai_delay(cpu_dai, substream);
 
 	for_each_rtd_codec_dai(rtd, i, codec_dai) {
-		if (codec_dai->driver->ops->delay)
-			codec_delay = max(codec_delay,
-					codec_dai->driver->ops->delay(substream,
-								    codec_dai));
+		codec_delay = max(codec_delay,
+				  snd_soc_dai_delay(codec_dai, substream));
 	}
 	delay += codec_delay;
 
