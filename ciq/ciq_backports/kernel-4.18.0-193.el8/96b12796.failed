net/mlx5e: Declare stats groups via macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 96b12796550d0f0a7613f03efa0140f39120946b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/96b12796.failed

Introduce new macros to declare stats callbacks and groups, for better
code reuse and for individual groups selection per profile which will be
introduced in next patches.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
(cherry picked from commit 96b12796550d0f0a7613f03efa0140f39120946b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index f68b345df892,e903a15e7289..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -1432,23 -1591,27 +1412,22 @@@ static const struct counter_desc ch_sta
  #define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
  #define NUM_XDPSQ_STATS			ARRAY_SIZE(xdpsq_stats_desc)
  #define NUM_RQ_XDPSQ_STATS		ARRAY_SIZE(rq_xdpsq_stats_desc)
 -#define NUM_XSKRQ_STATS			ARRAY_SIZE(xskrq_stats_desc)
 -#define NUM_XSKSQ_STATS			ARRAY_SIZE(xsksq_stats_desc)
  #define NUM_CH_STATS			ARRAY_SIZE(ch_stats_desc)
  
- static int mlx5e_grp_channels_get_num_stats(struct mlx5e_priv *priv)
+ static MLX5E_DECLARE_STATS_GRP_OP_NUM_STATS(channels)
  {
 -	int max_nch = priv->max_nch;
 +	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
  
  	return (NUM_RQ_STATS * max_nch) +
  	       (NUM_CH_STATS * max_nch) +
  	       (NUM_SQ_STATS * max_nch * priv->max_opened_tc) +
  	       (NUM_RQ_XDPSQ_STATS * max_nch) +
 -	       (NUM_XDPSQ_STATS * max_nch) +
 -	       (NUM_XSKRQ_STATS * max_nch * priv->xsk.ever_used) +
 -	       (NUM_XSKSQ_STATS * max_nch * priv->xsk.ever_used);
 +	       (NUM_XDPSQ_STATS * max_nch);
  }
  
- static int mlx5e_grp_channels_fill_strings(struct mlx5e_priv *priv, u8 *data,
- 					   int idx)
+ static MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(channels)
  {
 -	bool is_xsk = priv->xsk.ever_used;
 -	int max_nch = priv->max_nch;
 +	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
  	int i, j, tc;
  
  	for (i = 0; i < max_nch; i++)
@@@ -1480,10 -1650,10 +1459,9 @@@
  	return idx;
  }
  
- static int mlx5e_grp_channels_fill_stats(struct mlx5e_priv *priv, u64 *data,
- 					 int idx)
+ static MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(channels)
  {
 -	bool is_xsk = priv->xsk.ever_used;
 -	int max_nch = priv->max_nch;
 +	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
  	int i, j, tc;
  
  	for (i = 0; i < max_nch; i++)
@@@ -1519,104 -1698,29 +1497,126 @@@
  	return idx;
  }
  
+ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(channels) { return; }
+ 
  /* The stats groups order is opposite to the update_stats() order calls */
++<<<<<<< HEAD
 +const struct mlx5e_stats_grp mlx5e_stats_grps[] = {
 +	{
 +		.get_num_stats = mlx5e_grp_sw_get_num_stats,
 +		.fill_strings = mlx5e_grp_sw_fill_strings,
 +		.fill_stats = mlx5e_grp_sw_fill_stats,
 +		.update_stats = mlx5e_grp_sw_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_q_get_num_stats,
 +		.fill_strings = mlx5e_grp_q_fill_strings,
 +		.fill_stats = mlx5e_grp_q_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_q_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_vnic_env_get_num_stats,
 +		.fill_strings = mlx5e_grp_vnic_env_fill_strings,
 +		.fill_stats = mlx5e_grp_vnic_env_fill_stats,
 +		.update_stats = mlx5e_grp_vnic_env_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_vport_get_num_stats,
 +		.fill_strings = mlx5e_grp_vport_fill_strings,
 +		.fill_stats = mlx5e_grp_vport_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_vport_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_802_3_get_num_stats,
 +		.fill_strings = mlx5e_grp_802_3_fill_strings,
 +		.fill_stats = mlx5e_grp_802_3_fill_stats,
 +		.update_stats_mask = MLX5E_NDO_UPDATE_STATS,
 +		.update_stats = mlx5e_grp_802_3_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_2863_get_num_stats,
 +		.fill_strings = mlx5e_grp_2863_fill_strings,
 +		.fill_stats = mlx5e_grp_2863_fill_stats,
 +		.update_stats = mlx5e_grp_2863_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_2819_get_num_stats,
 +		.fill_strings = mlx5e_grp_2819_fill_strings,
 +		.fill_stats = mlx5e_grp_2819_fill_stats,
 +		.update_stats = mlx5e_grp_2819_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_phy_get_num_stats,
 +		.fill_strings = mlx5e_grp_phy_fill_strings,
 +		.fill_stats = mlx5e_grp_phy_fill_stats,
 +		.update_stats = mlx5e_grp_phy_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_eth_ext_get_num_stats,
 +		.fill_strings = mlx5e_grp_eth_ext_fill_strings,
 +		.fill_stats = mlx5e_grp_eth_ext_fill_stats,
 +		.update_stats = mlx5e_grp_eth_ext_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_pcie_get_num_stats,
 +		.fill_strings = mlx5e_grp_pcie_fill_strings,
 +		.fill_stats = mlx5e_grp_pcie_fill_stats,
 +		.update_stats = mlx5e_grp_pcie_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_per_prio_get_num_stats,
 +		.fill_strings = mlx5e_grp_per_prio_fill_strings,
 +		.fill_stats = mlx5e_grp_per_prio_fill_stats,
 +		.update_stats = mlx5e_grp_per_prio_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_pme_get_num_stats,
 +		.fill_strings = mlx5e_grp_pme_fill_strings,
 +		.fill_stats = mlx5e_grp_pme_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_ipsec_get_num_stats,
 +		.fill_strings = mlx5e_grp_ipsec_fill_strings,
 +		.fill_stats = mlx5e_grp_ipsec_fill_stats,
 +		.update_stats = mlx5e_grp_ipsec_update_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_tls_get_num_stats,
 +		.fill_strings = mlx5e_grp_tls_fill_strings,
 +		.fill_stats = mlx5e_grp_tls_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_channels_get_num_stats,
 +		.fill_strings = mlx5e_grp_channels_fill_strings,
 +		.fill_stats = mlx5e_grp_channels_fill_stats,
 +	},
 +	{
 +		.get_num_stats = mlx5e_grp_per_port_buffer_congest_get_num_stats,
 +		.fill_strings = mlx5e_grp_per_port_buffer_congest_fill_strings,
 +		.fill_stats = mlx5e_grp_per_port_buffer_congest_fill_stats,
 +		.update_stats = mlx5e_grp_per_port_buffer_congest_update_stats,
 +	},
++=======
+ const struct mlx5e_stats_grp mlx5e_nic_stats_grps[] = {
+ 	MLX5E_DEFINE_STATS_GRP(sw, 0),
+ 	MLX5E_DEFINE_STATS_GRP(qcnt, MLX5E_NDO_UPDATE_STATS),
+ 	MLX5E_DEFINE_STATS_GRP(vnic_env, 0),
+ 	MLX5E_DEFINE_STATS_GRP(vport, MLX5E_NDO_UPDATE_STATS),
+ 	MLX5E_DEFINE_STATS_GRP(802_3, MLX5E_NDO_UPDATE_STATS),
+ 	MLX5E_DEFINE_STATS_GRP(2863, 0),
+ 	MLX5E_DEFINE_STATS_GRP(2819, 0),
+ 	MLX5E_DEFINE_STATS_GRP(phy, 0),
+ 	MLX5E_DEFINE_STATS_GRP(eth_ext, 0),
+ 	MLX5E_DEFINE_STATS_GRP(pcie, 0),
+ 	MLX5E_DEFINE_STATS_GRP(per_prio, 0),
+ 	MLX5E_DEFINE_STATS_GRP(pme, 0),
+ 	MLX5E_DEFINE_STATS_GRP(ipsec, 0),
+ 	MLX5E_DEFINE_STATS_GRP(tls, 0),
+ 	MLX5E_DEFINE_STATS_GRP(channels, 0),
+ 	MLX5E_DEFINE_STATS_GRP(per_port_buff_congest, 0),
++>>>>>>> 96b12796550d (net/mlx5e: Declare stats groups via macro)
  };
  
 -unsigned int mlx5e_nic_stats_grps_num(struct mlx5e_priv *priv)
 -{
 -	return ARRAY_SIZE(mlx5e_nic_stats_grps);
 -}
 +const int mlx5e_num_stats_grps = ARRAY_SIZE(mlx5e_stats_grps);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 1e151c97c07b,bc97964cd721..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -53,6 -56,48 +54,51 @@@ struct counter_desc 
  	size_t		offset; /* Byte offset */
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	MLX5E_NDO_UPDATE_STATS = BIT(0x1),
+ };
+ 
+ struct mlx5e_priv;
+ struct mlx5e_stats_grp {
+ 	u16 update_stats_mask;
+ 	int (*get_num_stats)(struct mlx5e_priv *priv);
+ 	int (*fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx);
+ 	int (*fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx);
+ 	void (*update_stats)(struct mlx5e_priv *priv);
+ };
+ 
+ #define MLX5E_STATS_GRP_OP(grp, name) mlx5e_stats_grp_ ## grp ## _ ## name
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_NUM_STATS(grp) \
+ 	int MLX5E_STATS_GRP_OP(grp, num_stats)(struct mlx5e_priv *priv)
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(grp) \
+ 	void MLX5E_STATS_GRP_OP(grp, update_stats)(struct mlx5e_priv *priv)
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(grp) \
+ 	int MLX5E_STATS_GRP_OP(grp, fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx)
+ 
+ #define MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(grp) \
+ 	int MLX5E_STATS_GRP_OP(grp, fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx)
+ 
+ #define MLX5E_DEFINE_STATS_GRP(grp, mask) { \
+ 	.get_num_stats = MLX5E_STATS_GRP_OP(grp, num_stats), \
+ 	.fill_stats    = MLX5E_STATS_GRP_OP(grp, fill_stats), \
+ 	.fill_strings  = MLX5E_STATS_GRP_OP(grp, fill_strings), \
+ 	.update_stats  = MLX5E_STATS_GRP_OP(grp, update_stats), \
+ 	.update_stats_mask = mask, \
+ }
+ 
+ unsigned int mlx5e_stats_total_num(struct mlx5e_priv *priv);
+ void mlx5e_stats_update(struct mlx5e_priv *priv);
+ void mlx5e_stats_fill(struct mlx5e_priv *priv, u64 *data, int idx);
+ void mlx5e_stats_fill_strings(struct mlx5e_priv *priv, u8 *data);
+ 
+ /* Concrete NIC Stats */
+ 
++>>>>>>> 96b12796550d (net/mlx5e: Declare stats groups via macro)
  struct mlx5e_sw_stats {
  	u64 rx_packets;
  	u64 rx_bytes;
@@@ -271,22 -365,9 +317,22 @@@ struct mlx5e_stats 
  	struct mlx5e_pcie_stats pcie;
  };
  
 -extern const struct mlx5e_stats_grp mlx5e_nic_stats_grps[];
 -unsigned int mlx5e_nic_stats_grps_num(struct mlx5e_priv *priv);
 +enum {
 +	MLX5E_NDO_UPDATE_STATS = BIT(0x1),
 +};
 +
 +struct mlx5e_priv;
 +struct mlx5e_stats_grp {
 +	u16 update_stats_mask;
 +	int (*get_num_stats)(struct mlx5e_priv *priv);
 +	int (*fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx);
 +	int (*fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx);
 +	void (*update_stats)(struct mlx5e_priv *priv);
 +};
 +
 +extern const struct mlx5e_stats_grp mlx5e_stats_grps[];
 +extern const int mlx5e_num_stats_grps;
  
- void mlx5e_grp_802_3_update_stats(struct mlx5e_priv *priv);
+ MLX5E_DECLARE_STATS_GRP_OP_UPDATE_STATS(802_3);
  
  #endif /* __MLX5_EN_STATS_H__ */
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index e3ab7df3e76c..61608d4dabfd 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -156,7 +156,7 @@ static void mlx5e_uplink_rep_update_hw_counters(struct mlx5e_priv *priv)
 	struct mlx5e_pport_stats *pstats = &priv->stats.pport;
 	struct rtnl_link_stats64 *vport_stats;
 
-	mlx5e_grp_802_3_update_stats(priv);
+	MLX5E_STATS_GRP_OP(802_3, update_stats)(priv);
 
 	vport_stats = &priv->stats.vf_vport;
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
