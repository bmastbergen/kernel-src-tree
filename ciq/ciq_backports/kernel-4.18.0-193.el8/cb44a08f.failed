tcp: tighten acceptance of ACKs not matching a child socket

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Guillaume Nault <gnault@redhat.com>
commit cb44a08f8647fd2e8db5cc9ac27cd8355fa392d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/cb44a08f.failed

When no synflood occurs, the synflood timestamp isn't updated.
Therefore it can be so old that time_after32() can consider it to be
in the future.

That's a problem for tcp_synq_no_recent_overflow() as it may report
that a recent overflow occurred while, in fact, it's just that jiffies
has grown past 'last_overflow' + TCP_SYNCOOKIE_VALID + 2^31.

Spurious detection of recent overflows lead to extra syncookie
verification in cookie_v[46]_check(). At that point, the verification
should fail and the packet dropped. But we should have dropped the
packet earlier as we didn't even send a syncookie.

Let's refine tcp_synq_no_recent_overflow() to report a recent overflow
only if jiffies is within the
[last_overflow, last_overflow + TCP_SYNCOOKIE_VALID] interval. This
way, no spurious recent overflow is reported when jiffies wraps and
'last_overflow' becomes in the future from the point of view of
time_after32().

However, if jiffies wraps and enters the
[last_overflow, last_overflow + TCP_SYNCOOKIE_VALID] interval (with
'last_overflow' being a stale synflood timestamp), then
tcp_synq_no_recent_overflow() still erroneously reports an
overflow. In such cases, we have to rely on syncookie verification
to drop the packet. We unfortunately have no way to differentiate
between a fresh and a stale syncookie timestamp.

In practice, using last_overflow as lower bound is problematic.
If the synflood timestamp is concurrently updated between the time
we read jiffies and the moment we store the timestamp in
'last_overflow', then 'now' becomes smaller than 'last_overflow' and
tcp_synq_no_recent_overflow() returns true, potentially dropping a
valid syncookie.

Reading jiffies after loading the timestamp could fix the problem,
but that'd require a memory barrier. Let's just accommodate for
potential timestamp growth instead and extend the interval using
'last_overflow - HZ' as lower bound.

	Signed-off-by: Guillaume Nault <gnault@redhat.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cb44a08f8647fd2e8db5cc9ac27cd8355fa392d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tcp.h
diff --cc include/net/tcp.h
index 530bc36b1333,43e04e14c41e..000000000000
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@@ -485,9 -509,32 +485,35 @@@ static inline void tcp_synq_overflow(co
  /* syncookies: no recent synqueue overflow on this listening socket? */
  static inline bool tcp_synq_no_recent_overflow(const struct sock *sk)
  {
 -	unsigned int last_overflow;
 -	unsigned int now = jiffies;
 +	unsigned long last_overflow = tcp_sk(sk)->rx_opt.ts_recent_stamp;
  
++<<<<<<< HEAD
 +	return time_after(jiffies, last_overflow + TCP_SYNCOOKIE_VALID);
++=======
+ 	if (sk->sk_reuseport) {
+ 		struct sock_reuseport *reuse;
+ 
+ 		reuse = rcu_dereference(sk->sk_reuseport_cb);
+ 		if (likely(reuse)) {
+ 			last_overflow = READ_ONCE(reuse->synq_overflow_ts);
+ 			return !time_between32(now, last_overflow - HZ,
+ 					       last_overflow +
+ 					       TCP_SYNCOOKIE_VALID);
+ 		}
+ 	}
+ 
+ 	last_overflow = tcp_sk(sk)->rx_opt.ts_recent_stamp;
+ 
+ 	/* If last_overflow <= jiffies <= last_overflow + TCP_SYNCOOKIE_VALID,
+ 	 * then we're under synflood. However, we have to use
+ 	 * 'last_overflow - HZ' as lower bound. That's because a concurrent
+ 	 * tcp_synq_overflow() could update .ts_recent_stamp after we read
+ 	 * jiffies but before we store .ts_recent_stamp into last_overflow,
+ 	 * which could lead to rejecting a valid syncookie.
+ 	 */
+ 	return !time_between32(now, last_overflow - HZ,
+ 			       last_overflow + TCP_SYNCOOKIE_VALID);
++>>>>>>> cb44a08f8647 (tcp: tighten acceptance of ACKs not matching a child socket)
  }
  
  static inline u32 tcp_cookie_time(void)
* Unmerged path include/net/tcp.h
