perf trace: Beautify 'fsmount' arguments

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit f6af095668b7799a7514378824dcc74869df3994
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f6af0956.failed

Use existing beautifiers for the first arg, fd, assigned using the
heuristic that looks for syscall arg names and associates SCA_FD with
'fd' named argumes, and wire up the recently introduced fsmount
attr_flags table generator.

Now it should be possible to just use:

   perf trace -e fsmount

As root and see all fsmount syscalls with its args beautified.

  # cat sys_fsmount.c
  #define _GNU_SOURCE        /* See feature_test_macros(7) */
  #include <unistd.h>
  #include <sys/syscall.h>   /* For SYS_xxx definitions */

  #define __NR_fsmount 432

  #define MOUNT_ATTR_RDONLY	 0x00000001 /* Mount read-only */
  #define MOUNT_ATTR_NOSUID	 0x00000002 /* Ignore suid and sgid bits */
  #define MOUNT_ATTR_NODEV	 0x00000004 /* Disallow access to device special files */
  #define MOUNT_ATTR_NOEXEC	 0x00000008 /* Disallow program execution */
  #define MOUNT_ATTR__ATIME	 0x00000070 /* Setting on how atime should be updated */
  #define MOUNT_ATTR_RELATIME	 0x00000000 /* - Update atime relative to mtime/ctime. */
  #define MOUNT_ATTR_NOATIME	 0x00000010 /* - Do not update access times. */
  #define MOUNT_ATTR_STRICTATIME 0x00000020 /* - Always perform atime updates */
  #define MOUNT_ATTR_NODIRATIME	 0x00000080 /* Do not update directory access times */

  static inline int sys_fsmount(int fs_fd, int flags, int attr_flags)
  {
  	syscall(__NR_fsmount, fs_fd, flags, attr_flags);
  }

  int main(int argc, char *argv[])
  {
  	int attr_flags = 0, fs_fd = 0;

  	sys_fsmount(fs_fd++, 0, attr_flags);
  	attr_flags |= MOUNT_ATTR_RDONLY;
  	sys_fsmount(fs_fd++, 1, attr_flags);
  	attr_flags |= MOUNT_ATTR_NOSUID;
  	sys_fsmount(fs_fd++, 0, attr_flags);
  	attr_flags |= MOUNT_ATTR_NODEV;
  	sys_fsmount(fs_fd++, 1, attr_flags);
  	attr_flags |= MOUNT_ATTR_NOEXEC;
  	sys_fsmount(fs_fd++, 0, attr_flags);
  	attr_flags |= MOUNT_ATTR_NOATIME;
  	sys_fsmount(fs_fd++, 1, attr_flags);
  	attr_flags |= MOUNT_ATTR_STRICTATIME;
  	sys_fsmount(fs_fd++, 0, attr_flags);
  	attr_flags |= MOUNT_ATTR_NODIRATIME;
  	sys_fsmount(fs_fd++, 0, attr_flags);
  	return 0;
  }
  #
  # perf trace -e fsmount ./sys_fsmount
  fsmount(0, 0, MOUNT_ATTR_RELATIME)      = -1 EINVAL (Invalid argument)
  fsmount(1, FSMOUNT_CLOEXEC, MOUNT_ATTR_RDONLY|MOUNT_ATTR_RELATIME) = -1 EINVAL (Invalid argument)
  fsmount(2, 0, MOUNT_ATTR_RDONLY|MOUNT_ATTR_NOSUID|MOUNT_ATTR_RELATIME) = -1 EINVAL (Invalid argument)
  fsmount(3, FSMOUNT_CLOEXEC, MOUNT_ATTR_RDONLY|MOUNT_ATTR_NOSUID|MOUNT_ATTR_NODEV|MOUNT_ATTR_RELATIME) = -1 EBADF (Bad file descriptor)
  fsmount(4, 0, MOUNT_ATTR_RDONLY|MOUNT_ATTR_NOSUID|MOUNT_ATTR_NODEV|MOUNT_ATTR_NOEXEC|MOUNT_ATTR_RELATIME) = -1 EBADF (Bad file descriptor)
  fsmount(5, FSMOUNT_CLOEXEC, MOUNT_ATTR_RDONLY|MOUNT_ATTR_NOSUID|MOUNT_ATTR_NODEV|MOUNT_ATTR_NOEXEC|MOUNT_ATTR_NOATIME) = -1 EBADF (Bad file descriptor)
  fsmount(6, 0, MOUNT_ATTR_RDONLY|MOUNT_ATTR_NOSUID|MOUNT_ATTR_NODEV|MOUNT_ATTR_NOEXEC|MOUNT_ATTR_NOATIME|MOUNT_ATTR_STRICTATIME) = -1 EINVAL (Invalid argument)
  fsmount(7, 0, MOUNT_ATTR_RDONLY|MOUNT_ATTR_NOSUID|MOUNT_ATTR_NODEV|MOUNT_ATTR_NOEXEC|MOUNT_ATTR_NOATIME|MOUNT_ATTR_STRICTATIME|MOUNT_ATTR_NODIRATIME) = -1 EINVAL (Invalid argument)
  #

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Al Viro <viro@zeniv.linux.org.uk>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-w71uge0sfo6ns9uclhwtthca@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f6af095668b7799a7514378824dcc74869df3994)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
#	tools/perf/builtin-trace.c
#	tools/perf/trace/beauty/Build
#	tools/perf/trace/beauty/beauty.h
diff --cc tools/perf/Makefile.perf
index 06b927ee6ee3,326ca5d6a7ef..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -419,6 -419,24 +419,27 @@@ fadvise_advice_tbl := $(srctree)/tools/
  $(fadvise_advice_array): $(linux_uapi_dir)/in.h $(fadvise_advice_tbl)
  	$(Q)$(SHELL) '$(fadvise_advice_tbl)' $(linux_uapi_dir) > $@
  
++<<<<<<< HEAD
++=======
+ fsmount_arrays := $(beauty_outdir)/fsmount_arrays.c
+ fsmount_tbls := $(srctree)/tools/perf/trace/beauty/fsmount.sh
+ 
+ $(fsmount_arrays): $(linux_uapi_dir)/fs.h $(fsmount_tbls)
+ 	$(Q)$(SHELL) '$(fsmount_tbls)' $(linux_uapi_dir) > $@
+ 
+ fspick_arrays := $(beauty_outdir)/fspick_arrays.c
+ fspick_tbls := $(srctree)/tools/perf/trace/beauty/fspick.sh
+ 
+ $(fspick_arrays): $(linux_uapi_dir)/fs.h $(fspick_tbls)
+ 	$(Q)$(SHELL) '$(fspick_tbls)' $(linux_uapi_dir) > $@
+ 
+ fsconfig_arrays := $(beauty_outdir)/fsconfig_arrays.c
+ fsconfig_tbls := $(srctree)/tools/perf/trace/beauty/fsconfig.sh
+ 
+ $(fsconfig_arrays): $(linux_uapi_dir)/fs.h $(fsconfig_tbls)
+ 	$(Q)$(SHELL) '$(fsconfig_tbls)' $(linux_uapi_dir) > $@
+ 
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  pkey_alloc_access_rights_array := $(beauty_outdir)/pkey_alloc_access_rights_array.c
  asm_generic_hdr_dir := $(srctree)/tools/include/uapi/asm-generic/
  pkey_alloc_access_rights_tbl := $(srctree)/tools/perf/trace/beauty/pkey_alloc_access_rights.sh
@@@ -628,6 -652,9 +649,12 @@@ build-dir   = $(if $(__build-dir),$(__b
  
  prepare: $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)common-cmds.h archheaders $(drm_ioctl_array) \
  	$(fadvise_advice_array) \
++<<<<<<< HEAD
++=======
+ 	$(fsconfig_arrays) \
+ 	$(fsmount_arrays) \
+ 	$(fspick_arrays) \
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  	$(pkey_alloc_access_rights_array) \
  	$(sndrv_pcm_ioctl_array) \
  	$(sndrv_ctl_ioctl_array) \
@@@ -922,6 -950,9 +949,12 @@@ clean:: $(LIBTRACEEVENT)-clean $(LIBAPI
  		$(OUTPUT)tests/llvm-src-{base,kbuild,prologue,relocation}.c \
  		$(OUTPUT)pmu-events/pmu-events.c \
  		$(OUTPUT)$(fadvise_advice_array) \
++<<<<<<< HEAD
++=======
+ 		$(OUTPUT)$(fsconfig_arrays) \
+ 		$(OUTPUT)$(fsmount_arrays) \
+ 		$(OUTPUT)$(fspick_arrays) \
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  		$(OUTPUT)$(madvise_behavior_array) \
  		$(OUTPUT)$(mmap_flags_array) \
  		$(OUTPUT)$(mount_flags_array) \
diff --cc tools/perf/builtin-trace.c
index f37fd95d5e34,3a2ab68a8b85..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -487,6 -487,15 +487,18 @@@ static const char *bpf_cmd[] = 
  };
  static DEFINE_STRARRAY(bpf_cmd, "BPF_");
  
++<<<<<<< HEAD
++=======
+ static const char *fsmount_flags[] = {
+ 	[1] = "CLOEXEC",
+ };
+ static DEFINE_STRARRAY(fsmount_flags, "FSMOUNT_");
+ 
+ #include "trace/beauty/generated/fsconfig_arrays.c"
+ 
+ static DEFINE_STRARRAY(fsconfig_cmds, "FSCONFIG_");
+ 
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  static const char *epoll_ctl_ops[] = { "ADD", "DEL", "MOD", };
  static DEFINE_STRARRAY_OFFSET(epoll_ctl_ops, "EPOLL_CTL_", 1);
  
@@@ -718,6 -731,15 +734,18 @@@ static struct syscall_fmt 
  		   [2] = { .scnprintf =  SCA_FCNTL_ARG, /* arg */ }, }, },
  	{ .name	    = "flock",
  	  .arg = { [1] = { .scnprintf = SCA_FLOCK, /* cmd */ }, }, },
++<<<<<<< HEAD
++=======
+ 	{ .name     = "fsconfig",
+ 	  .arg = { [1] = STRARRAY(cmd, fsconfig_cmds), }, },
+ 	{ .name     = "fsmount",
+ 	  .arg = { [1] = STRARRAY_FLAGS(flags, fsmount_flags),
+ 		   [2] = { .scnprintf = SCA_FSMOUNT_ATTR_FLAGS, /* attr_flags */ }, }, },
+ 	{ .name     = "fspick",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT,	  /* dfd */ },
+ 		   [1] = { .scnprintf = SCA_FILENAME,	  /* path */ },
+ 		   [2] = { .scnprintf = SCA_FSPICK_FLAGS, /* flags */ }, }, },
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  	{ .name	    = "fstat", .alias = "newfstat", },
  	{ .name	    = "fstatat", .alias = "newfstatat", },
  	{ .name	    = "futex",
diff --cc tools/perf/trace/beauty/Build
index 637365099b7d,338c61b8ed22..000000000000
--- a/tools/perf/trace/beauty/Build
+++ b/tools/perf/trace/beauty/Build
@@@ -1,15 -1,18 +1,23 @@@
++<<<<<<< HEAD
 +libperf-y += clone.o
 +libperf-y += fcntl.o
 +libperf-y += flock.o
++=======
+ perf-y += clone.o
+ perf-y += fcntl.o
+ perf-y += flock.o
+ perf-y += fsmount.o
+ perf-y += fspick.o
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  ifeq ($(SRCARCH),$(filter $(SRCARCH),x86))
 -perf-y += ioctl.o
 +libperf-y += ioctl.o
  endif
 -perf-y += kcmp.o
 -perf-y += mount_flags.o
 -perf-y += move_mount.o
 -perf-y += pkey_alloc.o
 -perf-y += arch_prctl.o
 -perf-y += prctl.o
 -perf-y += renameat.o
 -perf-y += sockaddr.o
 -perf-y += socket.o
 -perf-y += statx.o
 +libperf-y += kcmp.o
 +libperf-y += mount_flags.o
 +libperf-y += pkey_alloc.o
 +libperf-y += arch_prctl.o
 +libperf-y += prctl.o
 +libperf-y += renameat.o
 +libperf-y += sockaddr.o
 +libperf-y += socket.o
 +libperf-y += statx.o
diff --cc tools/perf/trace/beauty/beauty.h
index 3b522455c5bd,9385d1cb121a..000000000000
--- a/tools/perf/trace/beauty/beauty.h
+++ b/tools/perf/trace/beauty/beauty.h
@@@ -144,6 -144,12 +144,15 @@@ size_t syscall_arg__scnprintf_fcntl_arg
  size_t syscall_arg__scnprintf_flock(char *bf, size_t size, struct syscall_arg *arg);
  #define SCA_FLOCK syscall_arg__scnprintf_flock
  
++<<<<<<< HEAD
++=======
+ size_t syscall_arg__scnprintf_fsmount_attr_flags(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_FSMOUNT_ATTR_FLAGS syscall_arg__scnprintf_fsmount_attr_flags
+ 
+ size_t syscall_arg__scnprintf_fspick_flags(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_FSPICK_FLAGS syscall_arg__scnprintf_fspick_flags
+ 
++>>>>>>> f6af095668b7 (perf trace: Beautify 'fsmount' arguments)
  size_t syscall_arg__scnprintf_ioctl_cmd(char *bf, size_t size, struct syscall_arg *arg);
  #define SCA_IOCTL_CMD syscall_arg__scnprintf_ioctl_cmd
  
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/trace/beauty/Build
* Unmerged path tools/perf/trace/beauty/beauty.h
diff --git a/tools/perf/trace/beauty/fsmount.c b/tools/perf/trace/beauty/fsmount.c
new file mode 100644
index 000000000000..30c8c082a3c3
--- /dev/null
+++ b/tools/perf/trace/beauty/fsmount.c
@@ -0,0 +1,34 @@
+// SPDX-License-Identifier: LGPL-2.1
+/*
+ * trace/beauty/fsmount.c
+ *
+ *  Copyright (C) 2019, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ */
+
+#include "trace/beauty/beauty.h"
+#include <linux/log2.h>
+#include <uapi/linux/mount.h>
+
+static size_t fsmount__scnprintf_attr_flags(unsigned long flags, char *bf, size_t size, bool show_prefix)
+{
+#include "trace/beauty/generated/fsmount_arrays.c"
+       static DEFINE_STRARRAY(fsmount_attr_flags, "MOUNT_ATTR_");
+       size_t printed = 0;
+
+       if ((flags & ~MOUNT_ATTR__ATIME) != 0)
+	       printed += strarray__scnprintf_flags(&strarray__fsmount_attr_flags, bf, size, show_prefix, flags);
+
+       if ((flags & MOUNT_ATTR__ATIME) == MOUNT_ATTR_RELATIME) {
+	       printed += scnprintf(bf + printed, size - printed, "%s%s%s",
+			            printed ? "|" : "", show_prefix ? "MOUNT_ATTR_" : "", "RELATIME");
+       }
+
+       return printed;
+}
+
+size_t syscall_arg__scnprintf_fsmount_attr_flags(char *bf, size_t size, struct syscall_arg *arg)
+{
+	unsigned long flags = arg->val;
+
+	return fsmount__scnprintf_attr_flags(flags, bf, size, arg->show_string_prefix);
+}
