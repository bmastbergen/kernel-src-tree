bpf: fix cgroup bpf release synchronization

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Roman Gushchin <guro@fb.com>
commit e5c891a349d7c556b7b9dc231d6dd78e88a29e5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/e5c891a3.failed

Since commit 4bfc0bb2c60e ("bpf: decouple the lifetime of cgroup_bpf
from cgroup itself"), cgroup_bpf release occurs asynchronously
(from a worker context), and before the release of the cgroup itself.

This introduced a previously non-existing race between the release
and update paths. E.g. if a leaf's cgroup_bpf is released and a new
bpf program is attached to the one of ancestor cgroups at the same
time. The race may result in double-free and other memory corruptions.

To fix the problem, let's protect the body of cgroup_bpf_release()
with cgroup_mutex, as it was effectively previously, when all this
code was called from the cgroup release path with cgroup mutex held.

Also let's skip cgroups, which have no chances to invoke a bpf
program, on the update path. If the cgroup bpf refcnt reached 0,
it means that the cgroup is offline (no attached processes), and
there are no associated sockets left. It means there is no point
in updating effective progs array! And it can lead to a leak,
if it happens after the release. So, let's skip such cgroups.

Big thanks for Tejun Heo for discovering and debugging of this problem!

Fixes: 4bfc0bb2c60e ("bpf: decouple the lifetime of cgroup_bpf from cgroup itself")
	Reported-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Roman Gushchin <guro@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit e5c891a349d7c556b7b9dc231d6dd78e88a29e5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/cgroup.c
diff --cc kernel/bpf/cgroup.c
index 2dc2cddbbfde,077ed3a19848..000000000000
--- a/kernel/bpf/cgroup.c
+++ b/kernel/bpf/cgroup.c
@@@ -16,7 -16,7 +16,11 @@@
  #include <linux/bpf-cgroup.h>
  #include <net/sock.h>
  
++<<<<<<< HEAD
 +#include <linux/rh_features.h>
++=======
+ #include "../cgroup/cgroup-internal.h"
++>>>>>>> e5c891a349d7 (bpf: fix cgroup bpf release synchronization)
  
  DEFINE_STATIC_KEY_FALSE(cgroup_bpf_enabled_key);
  EXPORT_SYMBOL(cgroup_bpf_enabled_key);
* Unmerged path kernel/bpf/cgroup.c
