s390/qeth: gather more detailed RX dropped/error statistics

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [s390] qeth: gather more detailed RX dropped/error statistics (Philipp Rudo) [1781085]
Rebuild_FUZZ: 95.58%
commit-author Julian Wiedmann <jwi@linux.ibm.com>
commit 845ef9047b1f4e8ea3b8865140066b08fe93d05c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/845ef904.failed

Where available, use the fine-grained counters in rtnl_link_stats64 to
indicate different RX error causes. For drop reasons, use driver-private
ethtool counters.

In particular this patch allows us to keep track of driver-side drops due
to unknown/unsupported HW descriptor format.

	Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 845ef9047b1f4e8ea3b8865140066b08fe93d05c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/net/qeth_core.h
#	drivers/s390/net/qeth_core_main.c
#	drivers/s390/net/qeth_ethtool.c
diff --cc drivers/s390/net/qeth_core.h
index dcbcb3b4d38f,14edc892f7c1..000000000000
--- a/drivers/s390/net/qeth_core.h
+++ b/drivers/s390/net/qeth_core.h
@@@ -461,6 -464,55 +461,58 @@@ enum qeth_out_q_states 
         QETH_OUT_Q_LOCKED_FLUSH,
  };
  
++<<<<<<< HEAD
++=======
+ #define QETH_CARD_STAT_ADD(_c, _stat, _val)	((_c)->stats._stat += (_val))
+ #define QETH_CARD_STAT_INC(_c, _stat)		QETH_CARD_STAT_ADD(_c, _stat, 1)
+ 
+ #define QETH_TXQ_STAT_ADD(_q, _stat, _val)	((_q)->stats._stat += (_val))
+ #define QETH_TXQ_STAT_INC(_q, _stat)		QETH_TXQ_STAT_ADD(_q, _stat, 1)
+ 
+ struct qeth_card_stats {
+ 	u64 rx_bufs;
+ 	u64 rx_skb_csum;
+ 	u64 rx_sg_skbs;
+ 	u64 rx_sg_frags;
+ 	u64 rx_sg_alloc_page;
+ 
+ 	u64 rx_dropped_nomem;
+ 	u64 rx_dropped_notsupp;
+ 
+ 	/* rtnl_link_stats64 */
+ 	u64 rx_packets;
+ 	u64 rx_bytes;
+ 	u64 rx_multicast;
+ 	u64 rx_length_errors;
+ 	u64 rx_fifo_errors;
+ };
+ 
+ struct qeth_out_q_stats {
+ 	u64 bufs;
+ 	u64 bufs_pack;
+ 	u64 buf_elements;
+ 	u64 skbs_pack;
+ 	u64 skbs_sg;
+ 	u64 skbs_csum;
+ 	u64 skbs_tso;
+ 	u64 skbs_linearized;
+ 	u64 skbs_linearized_fail;
+ 	u64 tso_bytes;
+ 	u64 packing_mode_switch;
+ 	u64 stopped;
+ 	u64 completion_yield;
+ 	u64 completion_timer;
+ 
+ 	/* rtnl_link_stats64 */
+ 	u64 tx_packets;
+ 	u64 tx_bytes;
+ 	u64 tx_errors;
+ 	u64 tx_dropped;
+ };
+ 
+ #define QETH_TX_TIMER_USECS		500
+ 
++>>>>>>> 845ef9047b1f (s390/qeth: gather more detailed RX dropped/error statistics)
  struct qeth_qdio_out_q {
  	struct qdio_buffer *qdio_bufs[QDIO_MAX_BUFFERS_PER_Q];
  	struct qeth_qdio_out_buffer *bufs[QDIO_MAX_BUFFERS_PER_Q];
diff --cc drivers/s390/net/qeth_core_main.c
index a0c5702815af,4e113f359be9..000000000000
--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@@ -3200,7 -3093,7 +3200,11 @@@ static int qeth_check_qdio_errors(struc
  			       buf->element[14].sflags);
  		QETH_CARD_TEXT_(card, 2, " qerr=%X", qdio_error);
  		if ((buf->element[15].sflags) == 0x12) {
++<<<<<<< HEAD
 +			card->stats.rx_dropped++;
++=======
+ 			QETH_CARD_STAT_INC(card, rx_fifo_errors);
++>>>>>>> 845ef9047b1f (s390/qeth: gather more detailed RX dropped/error statistics)
  			return 0;
  		} else
  			return 1;
@@@ -5241,7 -5135,7 +5246,11 @@@ struct sk_buff *qeth_core_get_next_skb(
  				QETH_CARD_TEXT(card, 4, "unexeob");
  				QETH_CARD_HEX(card, 2, buffer, sizeof(void *));
  				dev_kfree_skb_any(skb);
++<<<<<<< HEAD
 +				card->stats.rx_errors++;
++=======
+ 				QETH_CARD_STAT_INC(card, rx_length_errors);
++>>>>>>> 845ef9047b1f (s390/qeth: gather more detailed RX dropped/error statistics)
  				return NULL;
  			}
  			element++;
@@@ -5262,7 -5157,7 +5271,11 @@@ no_mem
  	if (net_ratelimit()) {
  		QETH_CARD_TEXT(card, 2, "noskbmem");
  	}
++<<<<<<< HEAD
 +	card->stats.rx_dropped++;
++=======
+ 	QETH_CARD_STAT_INC(card, rx_dropped_nomem);
++>>>>>>> 845ef9047b1f (s390/qeth: gather more detailed RX dropped/error statistics)
  	return NULL;
  }
  EXPORT_SYMBOL_GPL(qeth_core_get_next_skb);
@@@ -6215,6 -6227,44 +6228,47 @@@ netdev_features_t qeth_features_check(s
  }
  EXPORT_SYMBOL_GPL(qeth_features_check);
  
++<<<<<<< HEAD
++=======
+ void qeth_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
+ {
+ 	struct qeth_card *card = dev->ml_priv;
+ 	struct qeth_qdio_out_q *queue;
+ 	unsigned int i;
+ 
+ 	QETH_CARD_TEXT(card, 5, "getstat");
+ 
+ 	stats->rx_packets = card->stats.rx_packets;
+ 	stats->rx_bytes = card->stats.rx_bytes;
+ 	stats->rx_errors = card->stats.rx_length_errors +
+ 			   card->stats.rx_fifo_errors;
+ 	stats->rx_dropped = card->stats.rx_dropped_nomem +
+ 			    card->stats.rx_dropped_notsupp;
+ 	stats->multicast = card->stats.rx_multicast;
+ 	stats->rx_length_errors = card->stats.rx_length_errors;
+ 	stats->rx_fifo_errors = card->stats.rx_fifo_errors;
+ 
+ 	for (i = 0; i < card->qdio.no_out_queues; i++) {
+ 		queue = card->qdio.out_qs[i];
+ 
+ 		stats->tx_packets += queue->stats.tx_packets;
+ 		stats->tx_bytes += queue->stats.tx_bytes;
+ 		stats->tx_errors += queue->stats.tx_errors;
+ 		stats->tx_dropped += queue->stats.tx_dropped;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(qeth_get_stats64);
+ 
+ u16 qeth_iqd_select_queue(struct net_device *dev, struct sk_buff *skb,
+ 			  u8 cast_type, struct net_device *sb_dev)
+ {
+ 	if (cast_type != RTN_UNICAST)
+ 		return QETH_IQD_MCAST_TXQ;
+ 	return QETH_IQD_MIN_UCAST_TXQ;
+ }
+ EXPORT_SYMBOL_GPL(qeth_iqd_select_queue);
+ 
++>>>>>>> 845ef9047b1f (s390/qeth: gather more detailed RX dropped/error statistics)
  int qeth_open(struct net_device *dev)
  {
  	struct qeth_card *card = dev->ml_priv;
diff --cc drivers/s390/net/qeth_ethtool.c
index 31474f66f6bf,f7485c6dea25..000000000000
--- a/drivers/s390/net/qeth_ethtool.c
+++ b/drivers/s390/net/qeth_ethtool.c
@@@ -9,43 -9,87 +9,103 @@@
  #include <linux/ethtool.h>
  #include "qeth_core.h"
  
 -
 -#define QETH_TXQ_STAT(_name, _stat) { \
 -	.name = _name, \
 -	.offset = offsetof(struct qeth_out_q_stats, _stat) \
 -}
 -
 -#define QETH_CARD_STAT(_name, _stat) { \
 -	.name = _name, \
 -	.offset = offsetof(struct qeth_card_stats, _stat) \
 -}
 -
 -struct qeth_stats {
 -	char name[ETH_GSTRING_LEN];
 -	unsigned int offset;
 +static struct {
 +	const char str[ETH_GSTRING_LEN];
 +} qeth_ethtool_stats_keys[] = {
 +/*  0 */{"rx skbs"},
 +	{"rx buffers"},
 +	{"tx skbs"},
 +	{"tx buffers"},
 +	{"tx skbs no packing"},
 +	{"tx buffers no packing"},
 +	{"tx skbs packing"},
 +	{"tx buffers packing"},
 +	{"tx sg skbs"},
 +	{"tx buffer elements"},
 +/* 10 */{"rx sg skbs"},
 +	{"rx sg frags"},
 +	{"rx sg page allocs"},
 +	{"tx large kbytes"},
 +	{"tx large count"},
 +	{"tx pk state ch n->p"},
 +	{"tx pk state ch p->n"},
 +	{"tx pk watermark low"},
 +	{"tx pk watermark high"},
 +	{"queue 0 buffer usage"},
 +/* 20 */{"queue 1 buffer usage"},
 +	{"queue 2 buffer usage"},
 +	{"queue 3 buffer usage"},
 +	{"tx csum"},
 +	{"tx lin"},
 +	{"tx linfail"},
 +	{"rx csum"}
  };
  
++<<<<<<< HEAD
++=======
+ static const struct qeth_stats txq_stats[] = {
+ 	QETH_TXQ_STAT("IO buffers", bufs),
+ 	QETH_TXQ_STAT("IO buffer elements", buf_elements),
+ 	QETH_TXQ_STAT("packed IO buffers", bufs_pack),
+ 	QETH_TXQ_STAT("skbs", tx_packets),
+ 	QETH_TXQ_STAT("packed skbs", skbs_pack),
+ 	QETH_TXQ_STAT("SG skbs", skbs_sg),
+ 	QETH_TXQ_STAT("HW csum skbs", skbs_csum),
+ 	QETH_TXQ_STAT("TSO skbs", skbs_tso),
+ 	QETH_TXQ_STAT("linearized skbs", skbs_linearized),
+ 	QETH_TXQ_STAT("linearized+error skbs", skbs_linearized_fail),
+ 	QETH_TXQ_STAT("TSO bytes", tso_bytes),
+ 	QETH_TXQ_STAT("Packing mode switches", packing_mode_switch),
+ 	QETH_TXQ_STAT("Queue stopped", stopped),
+ 	QETH_TXQ_STAT("Completion yield", completion_yield),
+ 	QETH_TXQ_STAT("Completion timer", completion_timer),
+ };
+ 
+ static const struct qeth_stats card_stats[] = {
+ 	QETH_CARD_STAT("rx0 IO buffers", rx_bufs),
+ 	QETH_CARD_STAT("rx0 HW csum skbs", rx_skb_csum),
+ 	QETH_CARD_STAT("rx0 SG skbs", rx_sg_skbs),
+ 	QETH_CARD_STAT("rx0 SG page frags", rx_sg_frags),
+ 	QETH_CARD_STAT("rx0 SG page allocs", rx_sg_alloc_page),
+ 	QETH_CARD_STAT("rx0 dropped, no memory", rx_dropped_nomem),
+ 	QETH_CARD_STAT("rx0 dropped, bad format", rx_dropped_notsupp),
+ };
+ 
+ #define TXQ_STATS_LEN	ARRAY_SIZE(txq_stats)
+ #define CARD_STATS_LEN	ARRAY_SIZE(card_stats)
+ 
+ static void qeth_add_stat_data(u64 **dst, void *src,
+ 			       const struct qeth_stats stats[],
+ 			       unsigned int size)
+ {
+ 	unsigned int i;
+ 	char *stat;
+ 
+ 	for (i = 0; i < size; i++) {
+ 		stat = (char *)src + stats[i].offset;
+ 		**dst = *(u64 *)stat;
+ 		(*dst)++;
+ 	}
+ }
+ 
+ static void qeth_add_stat_strings(u8 **data, const char *prefix,
+ 				  const struct qeth_stats stats[],
+ 				  unsigned int size)
+ {
+ 	unsigned int i;
+ 
+ 	for (i = 0; i < size; i++) {
+ 		snprintf(*data, ETH_GSTRING_LEN, "%s%s", prefix, stats[i].name);
+ 		*data += ETH_GSTRING_LEN;
+ 	}
+ }
+ 
++>>>>>>> 845ef9047b1f (s390/qeth: gather more detailed RX dropped/error statistics)
  static int qeth_get_sset_count(struct net_device *dev, int stringset)
  {
 -	struct qeth_card *card = dev->ml_priv;
 -
  	switch (stringset) {
  	case ETH_SS_STATS:
 -		return CARD_STATS_LEN +
 -		       card->qdio.no_out_queues * TXQ_STATS_LEN;
 +		return (sizeof(qeth_ethtool_stats_keys) / ETH_GSTRING_LEN);
  	default:
  		return -EINVAL;
  	}
* Unmerged path drivers/s390/net/qeth_core.h
* Unmerged path drivers/s390/net/qeth_core_main.c
* Unmerged path drivers/s390/net/qeth_ethtool.c
diff --git a/drivers/s390/net/qeth_l2_main.c b/drivers/s390/net/qeth_l2_main.c
index 26cbbcb6463c..08c0b0bb21db 100644
--- a/drivers/s390/net/qeth_l2_main.c
+++ b/drivers/s390/net/qeth_l2_main.c
@@ -352,6 +352,7 @@ static int qeth_l2_process_inbound_buffer(struct qeth_card *card,
 			dev_kfree_skb_any(skb);
 			QETH_CARD_TEXT(card, 3, "inbunkno");
 			QETH_DBF_HEX(CTRL, 3, hdr, sizeof(*hdr));
+			QETH_CARD_STAT_INC(card, rx_dropped_notsupp);
 			continue;
 		}
 		work_done++;
diff --git a/drivers/s390/net/qeth_l3_main.c b/drivers/s390/net/qeth_l3_main.c
index 0e3a2d122884..9ea05b5c6c4a 100644
--- a/drivers/s390/net/qeth_l3_main.c
+++ b/drivers/s390/net/qeth_l3_main.c
@@ -1392,6 +1392,7 @@ static int qeth_l3_process_inbound_buffer(struct qeth_card *card,
 			dev_kfree_skb_any(skb);
 			QETH_CARD_TEXT(card, 3, "inbunkno");
 			QETH_DBF_HEX(CTRL, 3, hdr, sizeof(*hdr));
+			QETH_CARD_STAT_INC(card, rx_dropped_notsupp);
 			continue;
 		}
 		work_done++;
