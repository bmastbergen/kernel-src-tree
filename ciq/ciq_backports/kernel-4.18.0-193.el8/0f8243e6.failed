scsi: qla2xxx: Set the responder mode if appropriate for ELS pass-through IOCBs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 0f8243e64682b270bad6c58a136a1acd777fcfc3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/0f8243e6.failed

According to the firmware documentation responder mode must be set for ELS
pass-through IOCBs if a response is expected.

	Cc: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Tested-by: Himanshu Madhani <hmadhani@marvell.com>
	Reviewed-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 0f8243e64682b270bad6c58a136a1acd777fcfc3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_iocb.c
diff --cc drivers/scsi/qla2xxx/qla_iocb.c
index 5df8a0e7599c,2da7c92e320b..000000000000
--- a/drivers/scsi/qla2xxx/qla_iocb.c
+++ b/drivers/scsi/qla2xxx/qla_iocb.c
@@@ -2722,34 -2700,29 +2722,42 @@@ qla24xx_els_logo_iocb(srb_t *sp, struc
  	els_iocb->s_id[0] = vha->d_id.b.al_pa;
  	els_iocb->s_id[1] = vha->d_id.b.area;
  	els_iocb->s_id[2] = vha->d_id.b.domain;
- 	els_iocb->control_flags = 0;
  
  	if (elsio->u.els_logo.els_cmd == ELS_DCMD_PLOGI) {
+ 		els_iocb->control_flags = 0;
  		els_iocb->tx_byte_count = els_iocb->tx_len =
 -			cpu_to_le32(sizeof(struct els_plogi_payload));
 -		put_unaligned_le64(elsio->u.els_plogi.els_plogi_pyld_dma,
 -				   &els_iocb->tx_address);
 +			sizeof(struct els_plogi_payload);
 +		els_iocb->tx_address[0] =
 +			cpu_to_le32(LSD(elsio->u.els_plogi.els_plogi_pyld_dma));
 +		els_iocb->tx_address[1] =
 +			cpu_to_le32(MSD(elsio->u.els_plogi.els_plogi_pyld_dma));
 +
  		els_iocb->rx_dsd_count = 1;
  		els_iocb->rx_byte_count = els_iocb->rx_len =
 -			cpu_to_le32(sizeof(struct els_plogi_payload));
 -		put_unaligned_le64(elsio->u.els_plogi.els_resp_pyld_dma,
 -				   &els_iocb->rx_address);
 +			sizeof(struct els_plogi_payload);
 +		els_iocb->rx_address[0] =
 +			cpu_to_le32(LSD(elsio->u.els_plogi.els_resp_pyld_dma));
 +		els_iocb->rx_address[1] =
 +			cpu_to_le32(MSD(elsio->u.els_plogi.els_resp_pyld_dma));
  
  		ql_dbg(ql_dbg_io + ql_dbg_buffer, vha, 0x3073,
  		    "PLOGI ELS IOCB:\n");
  		ql_dump_buffer(ql_log_info, vha, 0x0109,
  		    (uint8_t *)els_iocb, 0x70);
  	} else {
++<<<<<<< HEAD
 +		els_iocb->tx_byte_count = sizeof(struct els_logo_payload);
 +		els_iocb->tx_address[0] =
 +		    cpu_to_le32(LSD(elsio->u.els_logo.els_logo_pyld_dma));
 +		els_iocb->tx_address[1] =
 +		    cpu_to_le32(MSD(elsio->u.els_logo.els_logo_pyld_dma));
++=======
+ 		els_iocb->control_flags = 1 << 13;
+ 		els_iocb->tx_byte_count =
+ 			cpu_to_le32(sizeof(struct els_logo_payload));
+ 		put_unaligned_le64(elsio->u.els_logo.els_logo_pyld_dma,
+ 				   &els_iocb->tx_address);
++>>>>>>> 0f8243e64682 (scsi: qla2xxx: Set the responder mode if appropriate for ELS pass-through IOCBs)
  		els_iocb->tx_len = cpu_to_le32(sizeof(struct els_logo_payload));
  
  		els_iocb->rx_byte_count = 0;
* Unmerged path drivers/scsi/qla2xxx/qla_iocb.c
