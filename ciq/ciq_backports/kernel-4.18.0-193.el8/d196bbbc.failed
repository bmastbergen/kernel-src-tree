drm/amd/display: Use proper enum conversion functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Nathan Chancellor <natechancellor@gmail.com>
commit d196bbbc28fab82624f7686f8b0da8e8644b6e6a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d196bbbc.failed

clang warns:

drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm_pp_smu.c:336:8:
warning: implicit conversion from enumeration type 'enum smu_clk_type'
to different enumeration type 'enum amd_pp_clock_type'
[-Wenum-conversion]
                                        dc_to_smu_clock_type(clk_type),
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm_pp_smu.c:421:14:
warning: implicit conversion from enumeration type 'enum
amd_pp_clock_type' to different enumeration type 'enum smu_clk_type'
[-Wenum-conversion]
                                        dc_to_pp_clock_type(clk_type),
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are functions to properly convert between all of these types, use
them so there are no longer any warnings.

Fixes: a43913ea50a5 ("drm/amd/powerplay: add function get_clock_by_type_with_latency for navi10")
Fixes: e5e4e22391c2 ("drm/amd/powerplay: add interface to get clock by type with latency for display (v2)")
Link: https://github.com/ClangBuiltLinux/linux/issues/586
	Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
	Reviewed-by: Leo Li <sunpeng.li@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit d196bbbc28fab82624f7686f8b0da8e8644b6e6a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_pp_smu.c
diff --cc drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_pp_smu.c
index a114954d6a5b,ea0e17e87c08..000000000000
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_pp_smu.c
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_pp_smu.c
@@@ -308,6 -330,12 +308,15 @@@ bool dm_pp_get_clock_levels_by_type
  		if (adev->powerplay.pp_funcs->get_clock_by_type(pp_handle,
  			dc_to_pp_clock_type(clk_type), &pp_clks)) {
  		/* Error in pplib. Provide default values. */
++<<<<<<< HEAD
++=======
+ 			return true;
+ 		}
+ 	} else if (adev->smu.funcs && adev->smu.funcs->get_clock_by_type) {
+ 		if (smu_get_clock_by_type(&adev->smu,
+ 					  dc_to_pp_clock_type(clk_type),
+ 					  &pp_clks)) {
++>>>>>>> d196bbbc28fa (drm/amd/display: Use proper enum conversion functions)
  			get_default_clock_levels(clk_type, dc_clks);
  			return true;
  		}
@@@ -374,14 -409,21 +383,29 @@@ bool dm_pp_get_clock_levels_by_type_wit
  	void *pp_handle = adev->powerplay.pp_handle;
  	struct pp_clock_levels_with_latency pp_clks = { 0 };
  	const struct amd_pm_funcs *pp_funcs = adev->powerplay.pp_funcs;
 -	int ret;
  
++<<<<<<< HEAD
 +	if (!pp_funcs || !pp_funcs->get_clock_by_type_with_latency)
 +		return false;
++=======
+ 	if (pp_funcs && pp_funcs->get_clock_by_type_with_latency) {
+ 		ret = pp_funcs->get_clock_by_type_with_latency(pp_handle,
+ 						dc_to_pp_clock_type(clk_type),
+ 						&pp_clks);
+ 		if (ret)
+ 			return false;
+ 	} else if (adev->smu.ppt_funcs && adev->smu.ppt_funcs->get_clock_by_type_with_latency) {
+ 		if (smu_get_clock_by_type_with_latency(&adev->smu,
+ 						       dc_to_smu_clock_type(clk_type),
+ 						       &pp_clks))
+ 			return false;
+ 	}
++>>>>>>> d196bbbc28fa (drm/amd/display: Use proper enum conversion functions)
  
 +	if (pp_funcs->get_clock_by_type_with_latency(pp_handle,
 +						     dc_to_pp_clock_type(clk_type),
 +						     &pp_clks))
 +		return false;
  
  	pp_to_dc_clock_levels_with_latency(&pp_clks, clk_level_info, clk_type);
  
* Unmerged path drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_pp_smu.c
