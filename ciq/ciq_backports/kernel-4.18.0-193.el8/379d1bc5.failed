xprtrdma: Simplify rpcrdma_rep_create

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 379d1bc5be373c920bcda16b9894ae99505ea127
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/379d1bc5.failed

Clean up.

Commit 7c8d9e7c8863 ("xprtrdma: Move Receive posting to Receive
handler") reduced the number of rpcrdma_rep_create call sites to
one. After that commit, the backchannel code no longer invokes it.

Therefore the free list logic added by commit d698c4a02ee0
("xprtrdma: Fix backchannel allocation of extra rpcrdma_reps") is
no longer necessary, and in fact adds some extra overhead that we
can do without.

Simply post any newly created reps. They will get added back to
the rb_recv_bufs list when they subsequently complete.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit 379d1bc5be373c920bcda16b9894ae99505ea127)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtrdma/verbs.c
diff --cc net/sunrpc/xprtrdma/verbs.c
index a585b191fe98,de6be101abf2..000000000000
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@@ -1035,10 -1036,9 +1035,14 @@@ out1
  	return NULL;
  }
  
- static bool rpcrdma_rep_create(struct rpcrdma_xprt *r_xprt, bool temp)
+ static struct rpcrdma_rep *rpcrdma_rep_create(struct rpcrdma_xprt *r_xprt,
+ 					      bool temp)
  {
++<<<<<<< HEAD
 +	struct rpcrdma_create_data_internal *cdata = &r_xprt->rx_data;
 +	struct rpcrdma_buffer *buf = &r_xprt->rx_buf;
++=======
++>>>>>>> 379d1bc5be37 (xprtrdma: Simplify rpcrdma_rep_create)
  	struct rpcrdma_rep *rep;
  
  	rep = kzalloc(sizeof(*rep), GFP_KERNEL);
@@@ -1049,12 -1049,11 +1053,12 @@@
  					       DMA_FROM_DEVICE, GFP_KERNEL);
  	if (!rep->rr_rdmabuf)
  		goto out_free;
+ 
  	xdr_buf_init(&rep->rr_hdrbuf, rdmab_data(rep->rr_rdmabuf),
  		     rdmab_length(rep->rr_rdmabuf));
- 
  	rep->rr_cqe.done = rpcrdma_wc_receive;
  	rep->rr_rxprt = r_xprt;
 +	INIT_WORK(&rep->rr_work, rpcrdma_deferred_completion);
  	rep->rr_recv_wr.next = NULL;
  	rep->rr_recv_wr.wr_cqe = &rep->rr_cqe;
  	rep->rr_recv_wr.sg_list = &rep->rr_rdmabuf->rg_iov;
@@@ -1069,11 -1064,16 +1069,11 @@@
  out_free:
  	kfree(rep);
  out:
- 	return false;
+ 	return NULL;
  }
  
 -/**
 - * rpcrdma_buffer_create - Create initial set of req/rep objects
 - * @r_xprt: transport instance to (re)initialize
 - *
 - * Returns zero on success, otherwise a negative errno.
 - */
 -int rpcrdma_buffer_create(struct rpcrdma_xprt *r_xprt)
 +int
 +rpcrdma_buffer_create(struct rpcrdma_xprt *r_xprt)
  {
  	struct rpcrdma_buffer *buf = &r_xprt->rx_buf;
  	int i, rc;
* Unmerged path net/sunrpc/xprtrdma/verbs.c
