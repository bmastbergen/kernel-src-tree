selftests: bpf: extend sub-register mode compilation to all bpf object files

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jiong Wang <jiong.wang@netronome.com>
commit 4836b4637ef080c2764c44ee40ed354cdb991d79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/4836b463.failed

At the moment, we only do extra sub-register mode compilation on bpf object
files used by "test_progs". These object files are really loaded and
executed.

This patch further extends sub-register mode compilation to all bpf object
files, even those without corresponding runtime tests. Because this could
help testing LLVM sub-register code-gen, kernel bpf selftest has much more
C testcases with reasonable size and complexity compared with LLVM
testsuite which only contains unit tests.

There were some file duplication inside BPF_OBJ_FILES_DUAL_COMPILE which
is removed now.

	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 4836b4637ef080c2764c44ee40ed354cdb991d79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/Makefile
diff --cc tools/testing/selftests/bpf/Makefile
index 37b01554670e,f2c11474f762..000000000000
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@@ -24,22 -23,38 +24,46 @@@ TEST_GEN_PROGS = test_verifier test_ta
  	test_align test_verifier_log test_dev_cgroup test_tcpbpf_user \
  	test_sock test_btf test_sockmap test_lirc_mode2_user get_cgroup_id_user \
  	test_socket_cookie test_cgroup_storage test_select_reuseport test_section_names \
 -	test_netcnt test_tcpnotify_user test_sock_fields
 -
 -BPF_OBJ_FILES = \
 -	test_xdp_redirect.o test_xdp_meta.o sockmap_parse_prog.o \
 -	sockmap_verdict_prog.o dev_cgroup.o sample_ret0.o \
 -	test_tcpnotify_kern.o sample_map_ret0.o test_tcpbpf_kern.o \
 -	sockmap_tcp_msg_prog.o connect4_prog.o connect6_prog.o \
 -	test_btf_haskv.o test_btf_nokv.o test_sockmap_kern.o \
 -	test_tunnel_kern.o test_sockhash_kern.o test_lwt_seg6local.o \
 -	sendmsg4_prog.o sendmsg6_prog.o test_lirc_mode2_kern.o \
 +	test_netcnt test_tcpnotify_user
 +
 +TEST_GEN_FILES = test_pkt_access.o test_xdp.o test_l4lb.o test_tcp_estats.o test_obj_id.o \
 +	test_pkt_md_access.o test_xdp_redirect.o test_xdp_meta.o sockmap_parse_prog.o     \
 +	sockmap_verdict_prog.o dev_cgroup.o sample_ret0.o test_tracepoint.o \
 +	test_l4lb_noinline.o test_xdp_noinline.o test_stacktrace_map.o \
 +	test_tcpnotify_kern.o \
 +	sample_map_ret0.o test_tcpbpf_kern.o test_stacktrace_build_id.o \
 +	sockmap_tcp_msg_prog.o connect4_prog.o connect6_prog.o test_adjust_tail.o \
 +	test_btf_haskv.o test_btf_nokv.o test_sockmap_kern.o test_tunnel_kern.o \
 +	test_get_stack_rawtp.o test_sockmap_kern.o test_sockhash_kern.o \
 +	test_lwt_seg6local.o sendmsg4_prog.o sendmsg6_prog.o test_lirc_mode2_kern.o \
  	get_cgroup_id_kern.o socket_cookie_prog.o test_select_reuseport_kern.o \
++<<<<<<< HEAD
 +	test_skb_cgroup_id_kern.o bpf_flow.o netcnt_prog.o \
 +	test_sk_lookup_kern.o test_xdp_vlan.o test_queue_map.o test_stack_map.o \
 +	xdp_dummy.o test_map_in_map.o
++=======
+ 	test_skb_cgroup_id_kern.o bpf_flow.o netcnt_prog.o test_xdp_vlan.o \
+ 	xdp_dummy.o test_map_in_map.o test_spin_lock.o test_map_lock.o \
+ 	test_pkt_access.o test_xdp.o test_adjust_tail.o test_l4lb.o \
+ 	test_l4lb_noinline.o test_xdp_noinline.o test_tcp_estats.o \
+ 	test_obj_id.o test_pkt_md_access.o test_tracepoint.o \
+ 	test_stacktrace_map.o test_stacktrace_build_id.o \
+ 	test_get_stack_rawtp.o test_sk_lookup_kern.o test_queue_map.o \
+ 	test_stack_map.o test_sock_fields_kern.o
+ 
+ TEST_GEN_FILES = $(BPF_OBJ_FILES)
+ 
+ # Also test sub-register code-gen if LLVM + kernel both has eBPF v3 processor
+ # support which is the first version to contain both ALU32 and JMP32
+ # instructions.
+ SUBREG_CODEGEN := $(shell echo "int cal(int a) { return a > 0; }" | \
+ 			$(CLANG) -target bpf -O2 -emit-llvm -S -x c - -o - | \
+ 			$(LLC) -mattr=+alu32 -mcpu=probe 2>&1 | \
+ 			grep 'if w')
+ ifneq ($(SUBREG_CODEGEN),)
+ TEST_GEN_FILES += $(patsubst %.o,alu32/%.o, $(BPF_OBJ_FILES))
+ endif
++>>>>>>> 4836b4637ef0 (selftests: bpf: extend sub-register mode compilation to all bpf object files)
  
  # Order correspond to 'make run_tests' order
  TEST_PROGS := test_kmod.sh \
* Unmerged path tools/testing/selftests/bpf/Makefile
