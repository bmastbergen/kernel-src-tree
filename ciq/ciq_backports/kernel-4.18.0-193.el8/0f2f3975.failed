drm/i915: Add gen9 BCS cmdparsing

jira LE-1907
cve CVE-2019-0155
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jon Bloomfield <jon.bloomfield@intel.com>
commit 0f2f39758341df70202ae1c42d5a1e4ee392b6d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/0f2f3975.failed

For gen9 we enable cmdparsing on the BCS ring, specifically
to catch inadvertent accesses to sensitive registers

Unlike gen7/hsw, we use the parser only to block certain
registers. We can rely on h/w to block restricted commands,
so the command tables only provide enough info to allow the
parser to delineate each command, and identify commands that
access registers.

Note: This patch deliberately ignores checkpatch issues in
favour of matching the style of the surrounding code. We'll
correct the entire file in one go in a later patch.

v3: rebase (Mika)
v4: Add RING_TIMESTAMP registers to whitelist (Jon)

	Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Dave Airlie <airlied@redhat.com>
	Cc: Takashi Iwai <tiwai@suse.de>
	Cc: Tyler Hicks <tyhicks@canonical.com>
	Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
	Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
(cherry picked from commit 0f2f39758341df70202ae1c42d5a1e4ee392b6d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_cmd_parser.c
diff --cc drivers/gpu/drm/i915/i915_cmd_parser.c
index 608b4b4a41e8,6794034c8ced..000000000000
--- a/drivers/gpu/drm/i915/i915_cmd_parser.c
+++ b/drivers/gpu/drm/i915/i915_cmd_parser.c
@@@ -840,18 -926,19 +924,19 @@@ void intel_engine_init_cmd_parser(struc
  	int cmd_table_count;
  	int ret;
  
- 	if (!IS_GEN(engine->i915, 7))
+ 	if (!IS_GEN(engine->i915, 7) && !(IS_GEN(engine->i915, 9) &&
+ 					  engine->class == COPY_ENGINE_CLASS))
  		return;
  
 -	switch (engine->class) {
 -	case RENDER_CLASS:
 +	switch (engine->id) {
 +	case RCS:
  		if (IS_HASWELL(engine->i915)) {
 -			cmd_tables = hsw_render_ring_cmd_table;
 +			cmd_tables = hsw_render_ring_cmds;
  			cmd_table_count =
 -				ARRAY_SIZE(hsw_render_ring_cmd_table);
 +				ARRAY_SIZE(hsw_render_ring_cmds);
  		} else {
 -			cmd_tables = gen7_render_cmd_table;
 -			cmd_table_count = ARRAY_SIZE(gen7_render_cmd_table);
 +			cmd_tables = gen7_render_cmds;
 +			cmd_table_count = ARRAY_SIZE(gen7_render_cmds);
  		}
  
  		if (IS_HASWELL(engine->i915)) {
@@@ -861,36 -948,46 +946,53 @@@
  			engine->reg_tables = ivb_render_reg_tables;
  			engine->reg_table_count = ARRAY_SIZE(ivb_render_reg_tables);
  		}
- 
  		engine->get_cmd_length_mask = gen7_render_get_cmd_length_mask;
  		break;
 -	case VIDEO_DECODE_CLASS:
 -		cmd_tables = gen7_video_cmd_table;
 -		cmd_table_count = ARRAY_SIZE(gen7_video_cmd_table);
 +	case VCS:
 +		cmd_tables = gen7_video_cmds;
 +		cmd_table_count = ARRAY_SIZE(gen7_video_cmds);
  		engine->get_cmd_length_mask = gen7_bsd_get_cmd_length_mask;
  		break;
++<<<<<<< HEAD
 +	case BCS:
 +		if (IS_HASWELL(engine->i915)) {
 +			cmd_tables = hsw_blt_ring_cmds;
 +			cmd_table_count = ARRAY_SIZE(hsw_blt_ring_cmds);
++=======
+ 	case COPY_ENGINE_CLASS:
+ 		engine->get_cmd_length_mask = gen7_blt_get_cmd_length_mask;
+ 		if (IS_GEN(engine->i915, 9)) {
+ 			cmd_tables = gen9_blt_cmd_table;
+ 			cmd_table_count = ARRAY_SIZE(gen9_blt_cmd_table);
+ 			engine->get_cmd_length_mask =
+ 				gen9_blt_get_cmd_length_mask;
+ 
+ 			/* BCS Engine unsafe without parser */
+ 			engine->flags |= I915_ENGINE_REQUIRES_CMD_PARSER;
+ 		} else if (IS_HASWELL(engine->i915)) {
+ 			cmd_tables = hsw_blt_ring_cmd_table;
+ 			cmd_table_count = ARRAY_SIZE(hsw_blt_ring_cmd_table);
++>>>>>>> 0f2f39758341 (drm/i915: Add gen9 BCS cmdparsing)
  		} else {
 -			cmd_tables = gen7_blt_cmd_table;
 -			cmd_table_count = ARRAY_SIZE(gen7_blt_cmd_table);
 +			cmd_tables = gen7_blt_cmds;
 +			cmd_table_count = ARRAY_SIZE(gen7_blt_cmds);
  		}
  
- 		if (IS_HASWELL(engine->i915)) {
+ 		if (IS_GEN(engine->i915, 9)) {
+ 			engine->reg_tables = gen9_blt_reg_tables;
+ 			engine->reg_table_count =
+ 				ARRAY_SIZE(gen9_blt_reg_tables);
+ 		} else if (IS_HASWELL(engine->i915)) {
  			engine->reg_tables = hsw_blt_reg_tables;
  			engine->reg_table_count = ARRAY_SIZE(hsw_blt_reg_tables);
  		} else {
  			engine->reg_tables = ivb_blt_reg_tables;
  			engine->reg_table_count = ARRAY_SIZE(ivb_blt_reg_tables);
  		}
- 
- 		engine->get_cmd_length_mask = gen7_blt_get_cmd_length_mask;
  		break;
 -	case VIDEO_ENHANCEMENT_CLASS:
 -		cmd_tables = hsw_vebox_cmd_table;
 -		cmd_table_count = ARRAY_SIZE(hsw_vebox_cmd_table);
 +	case VECS:
 +		cmd_tables = hsw_vebox_cmds;
 +		cmd_table_count = ARRAY_SIZE(hsw_vebox_cmds);
  		/* VECS can use the same length_mask function as VCS */
  		engine->get_cmd_length_mask = gen7_bsd_get_cmd_length_mask;
  		break;
* Unmerged path drivers/gpu/drm/i915/i915_cmd_parser.c
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 616a28201745..f30cd33e7eb7 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -542,6 +542,10 @@ static inline bool i915_mmio_reg_valid(i915_reg_t reg)
  */
 #define BCS_SWCTRL _MMIO(0x22200)
 
+/* There are 16 GPR registers */
+#define BCS_GPR(n)	_MMIO(0x22600 + (n) * 8)
+#define BCS_GPR_UDW(n)	_MMIO(0x22600 + (n) * 8 + 4)
+
 #define GPGPU_THREADS_DISPATCHED        _MMIO(0x2290)
 #define GPGPU_THREADS_DISPATCHED_UDW	_MMIO(0x2290 + 4)
 #define HS_INVOCATION_COUNT             _MMIO(0x2300)
