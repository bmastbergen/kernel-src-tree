x86/intel: Aggregate microserver naming

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 5ebb34edbefa8ea6a7e109179d5fc7b3529dbeba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5ebb34ed.failed

Currently big microservers have _XEON_D while small microservers have
_X, Make it uniformly: _D.

for i in `git grep -l "\(INTEL_FAM6_\|VULNWL_INTEL\|INTEL_CPU_FAM6\).*_\(X\|XEON_D\)"`
do
	sed -i -e 's/\(\(INTEL_FAM6_\|VULNWL_INTEL\|INTEL_CPU_FAM6\).*ATOM.*\)_X/\1_D/g' \
	       -e 's/\(\(INTEL_FAM6_\|VULNWL_INTEL\|INTEL_CPU_FAM6\).*\)_XEON_D/\1_D/g' ${i}
done

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Tony Luck <tony.luck@intel.com>
	Cc: x86@kernel.org
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Borislav Petkov <bp@alien8.de>
Link: https://lkml.kernel.org/r/20190827195122.677152989@infradead.org
(cherry picked from commit 5ebb34edbefa8ea6a7e109179d5fc7b3529dbeba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/core.c
#	arch/x86/events/intel/cstate.c
#	arch/x86/events/intel/pt.c
#	arch/x86/events/intel/rapl.c
#	arch/x86/events/intel/uncore.c
#	arch/x86/events/msr.c
#	arch/x86/include/asm/intel-family.h
#	arch/x86/kernel/cpu/intel.c
#	arch/x86/kernel/tsc.c
#	drivers/cpufreq/intel_pstate.c
#	drivers/edac/sb_edac.c
#	drivers/idle/intel_idle.c
#	drivers/powercap/intel_rapl.c
diff --cc arch/x86/events/intel/core.c
index 1e5c1e574c8f,dce329c5725d..000000000000
--- a/arch/x86/events/intel/core.c
+++ b/arch/x86/events/intel/core.c
@@@ -3826,23 -3963,57 +3826,56 @@@ static __init void intel_clovertown_qui
  	x86_pmu.pebs_constraints = NULL;
  }
  
++<<<<<<< HEAD
 +static int intel_snb_pebs_broken(int cpu)
++=======
+ static const struct x86_cpu_desc isolation_ucodes[] = {
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL,		 3, 0x0000001f),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_L,		 1, 0x0000001e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_G,		 1, 0x00000015),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_X,		 2, 0x00000037),
+ 	INTEL_CPU_DESC(INTEL_FAM6_HASWELL_X,		 4, 0x0000000a),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL,		 4, 0x00000023),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_G,		 1, 0x00000014),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_D,		 2, 0x00000010),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_D,		 3, 0x07000009),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_D,		 4, 0x0f000009),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_D,		 5, 0x0e000002),
+ 	INTEL_CPU_DESC(INTEL_FAM6_BROADWELL_X,		 2, 0x0b000014),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE_X,		 3, 0x00000021),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE_X,		 4, 0x00000000),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE_L,		 3, 0x0000007c),
+ 	INTEL_CPU_DESC(INTEL_FAM6_SKYLAKE,		 3, 0x0000007c),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		 9, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		 9, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		10, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		11, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE_L,		12, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		10, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		11, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		12, 0x0000004e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_KABYLAKE,		13, 0x0000004e),
+ 	{}
+ };
+ 
+ static void intel_check_pebs_isolation(void)
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  {
 -	x86_pmu.pebs_no_isolation = !x86_cpu_has_min_microcode_rev(isolation_ucodes);
 -}
 +	u32 rev = UINT_MAX; /* default to broken for unknown models */
  
 -static __init void intel_pebs_isolation_quirk(void)
 -{
 -	WARN_ON_ONCE(x86_pmu.check_microcode);
 -	x86_pmu.check_microcode = intel_check_pebs_isolation;
 -	intel_check_pebs_isolation();
 -}
 +	switch (cpu_data(cpu).x86_model) {
 +	case INTEL_FAM6_SANDYBRIDGE:
 +		rev = 0x28;
 +		break;
  
 -static const struct x86_cpu_desc pebs_ucodes[] = {
 -	INTEL_CPU_DESC(INTEL_FAM6_SANDYBRIDGE,		7, 0x00000028),
 -	INTEL_CPU_DESC(INTEL_FAM6_SANDYBRIDGE_X,	6, 0x00000618),
 -	INTEL_CPU_DESC(INTEL_FAM6_SANDYBRIDGE_X,	7, 0x0000070c),
 -	{}
 -};
 +	case INTEL_FAM6_SANDYBRIDGE_X:
 +		switch (cpu_data(cpu).x86_stepping) {
 +		case 6: rev = 0x618; break;
 +		case 7: rev = 0x70c; break;
 +		}
 +	}
  
 -static bool intel_snb_pebs_broken(void)
 -{
 -	return !x86_cpu_has_min_microcode_rev(pebs_ucodes);
 +	return (cpu_data(cpu).microcode < rev);
  }
  
  static void intel_snb_check_microcode(void)
@@@ -3972,23 -4142,22 +4005,37 @@@ static __init void intel_nehalem_quirk(
  	}
  }
  
++<<<<<<< HEAD
 +static bool intel_glp_counter_freezing_broken(int cpu)
++=======
+ static const struct x86_cpu_desc counter_freezing_ucodes[] = {
+ 	INTEL_CPU_DESC(INTEL_FAM6_ATOM_GOLDMONT,	 2, 0x0000000e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_ATOM_GOLDMONT,	 9, 0x0000002e),
+ 	INTEL_CPU_DESC(INTEL_FAM6_ATOM_GOLDMONT,	10, 0x00000008),
+ 	INTEL_CPU_DESC(INTEL_FAM6_ATOM_GOLDMONT_D,	 1, 0x00000028),
+ 	INTEL_CPU_DESC(INTEL_FAM6_ATOM_GOLDMONT_PLUS,	 1, 0x00000028),
+ 	INTEL_CPU_DESC(INTEL_FAM6_ATOM_GOLDMONT_PLUS,	 8, 0x00000006),
+ 	{}
+ };
+ 
+ static bool intel_counter_freezing_broken(void)
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  {
 -	return !x86_cpu_has_min_microcode_rev(counter_freezing_ucodes);
 +	u32 rev = UINT_MAX; /* default to broken for unknown stepping */
 +
 +	switch (cpu_data(cpu).x86_stepping) {
 +	case 1:
 +		rev = 0x28;
 +		break;
 +	case 8:
 +		rev = 0x6;
 +		break;
 +	}
 +
 +	return (cpu_data(cpu).microcode < rev);
  }
  
 -static __init void intel_counter_freezing_quirk(void)
 +static __init void intel_glp_counter_freezing_quirk(void)
  {
  	/* Check if it's already disabled */
  	if (disable_counter_freezing)
@@@ -4351,7 -4665,8 +4398,12 @@@ __init int intel_pmu_init(void
  		break;
  
  	case INTEL_FAM6_ATOM_GOLDMONT:
++<<<<<<< HEAD
 +	case INTEL_FAM6_ATOM_GOLDMONT_X:
++=======
+ 	case INTEL_FAM6_ATOM_GOLDMONT_D:
+ 		x86_add_quirk(intel_counter_freezing_quirk);
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  		memcpy(hw_cache_event_ids, glm_hw_cache_event_ids,
  		       sizeof(hw_cache_event_ids));
  		memcpy(hw_cache_extra_regs, glm_hw_cache_extra_regs,
@@@ -4406,6 -4721,32 +4458,35 @@@
  		name = "goldmont_plus";
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case INTEL_FAM6_ATOM_TREMONT_D:
+ 		x86_pmu.late_ack = true;
+ 		memcpy(hw_cache_event_ids, glp_hw_cache_event_ids,
+ 		       sizeof(hw_cache_event_ids));
+ 		memcpy(hw_cache_extra_regs, tnt_hw_cache_extra_regs,
+ 		       sizeof(hw_cache_extra_regs));
+ 		hw_cache_event_ids[C(ITLB)][C(OP_READ)][C(RESULT_ACCESS)] = -1;
+ 
+ 		intel_pmu_lbr_init_skl();
+ 
+ 		x86_pmu.event_constraints = intel_slm_event_constraints;
+ 		x86_pmu.extra_regs = intel_tnt_extra_regs;
+ 		/*
+ 		 * It's recommended to use CPU_CLK_UNHALTED.CORE_P + NPEBS
+ 		 * for precise cycles.
+ 		 */
+ 		x86_pmu.pebs_aliases = NULL;
+ 		x86_pmu.pebs_prec_dist = true;
+ 		x86_pmu.lbr_pt_coexist = true;
+ 		x86_pmu.flags |= PMU_FL_HAS_RSP_1;
+ 		x86_pmu.get_event_constraints = tnt_get_event_constraints;
+ 		extra_attr = slm_format_attr;
+ 		pr_cont("Tremont events, ");
+ 		name = "Tremont";
+ 		break;
+ 
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	case INTEL_FAM6_WESTMERE:
  	case INTEL_FAM6_WESTMERE_EP:
  	case INTEL_FAM6_WESTMERE_EX:
@@@ -4548,10 -4890,11 +4629,16 @@@
  		name = "haswell";
  		break;
  
++<<<<<<< HEAD
 +	case INTEL_FAM6_BROADWELL_CORE:
 +	case INTEL_FAM6_BROADWELL_XEON_D:
 +	case INTEL_FAM6_BROADWELL_GT3E:
++=======
+ 	case INTEL_FAM6_BROADWELL:
+ 	case INTEL_FAM6_BROADWELL_D:
+ 	case INTEL_FAM6_BROADWELL_G:
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	case INTEL_FAM6_BROADWELL_X:
 -		x86_add_quirk(intel_pebs_isolation_quirk);
  		x86_pmu.late_ack = true;
  		memcpy(hw_cache_event_ids, hsw_hw_cache_event_ids, sizeof(hw_cache_event_ids));
  		memcpy(hw_cache_extra_regs, hsw_hw_cache_extra_regs, sizeof(hw_cache_extra_regs));
@@@ -4658,6 -5001,40 +4745,43 @@@
  		name = "skylake";
  		break;
  
++<<<<<<< HEAD
++=======
+ 	case INTEL_FAM6_ICELAKE_X:
+ 	case INTEL_FAM6_ICELAKE_D:
+ 		pmem = true;
+ 		/* fall through */
+ 	case INTEL_FAM6_ICELAKE_L:
+ 	case INTEL_FAM6_ICELAKE:
+ 		x86_pmu.late_ack = true;
+ 		memcpy(hw_cache_event_ids, skl_hw_cache_event_ids, sizeof(hw_cache_event_ids));
+ 		memcpy(hw_cache_extra_regs, skl_hw_cache_extra_regs, sizeof(hw_cache_extra_regs));
+ 		hw_cache_event_ids[C(ITLB)][C(OP_READ)][C(RESULT_ACCESS)] = -1;
+ 		intel_pmu_lbr_init_skl();
+ 
+ 		x86_pmu.event_constraints = intel_icl_event_constraints;
+ 		x86_pmu.pebs_constraints = intel_icl_pebs_event_constraints;
+ 		x86_pmu.extra_regs = intel_icl_extra_regs;
+ 		x86_pmu.pebs_aliases = NULL;
+ 		x86_pmu.pebs_prec_dist = true;
+ 		x86_pmu.flags |= PMU_FL_HAS_RSP_1;
+ 		x86_pmu.flags |= PMU_FL_NO_HT_SHARING;
+ 
+ 		x86_pmu.hw_config = hsw_hw_config;
+ 		x86_pmu.get_event_constraints = icl_get_event_constraints;
+ 		extra_attr = boot_cpu_has(X86_FEATURE_RTM) ?
+ 			hsw_format_attr : nhm_format_attr;
+ 		extra_skl_attr = skl_format_attr;
+ 		mem_attr = icl_events_attrs;
+ 		tsx_attr = icl_tsx_events_attrs;
+ 		x86_pmu.rtm_abort_event = X86_CONFIG(.event=0xca, .umask=0x02);
+ 		x86_pmu.lbr_pt_coexist = true;
+ 		intel_pmu_pebs_data_source_skl(pmem);
+ 		pr_cont("Icelake events, ");
+ 		name = "icelake";
+ 		break;
+ 
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	default:
  		switch (x86_pmu.version) {
  		case 1:
diff --cc arch/x86/events/intel/cstate.c
index 010caa7b475f,104c093b282b..000000000000
--- a/arch/x86/events/intel/cstate.c
+++ b/arch/x86/events/intel/cstate.c
@@@ -553,37 -593,40 +553,53 @@@ static const struct x86_cpu_id intel_cs
  	X86_CSTATES_MODEL(INTEL_FAM6_IVYBRIDGE,   snb_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_IVYBRIDGE_X, snb_cstates),
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL,   snb_cstates),
 -	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_X, snb_cstates),
 -	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_G, snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_CORE, snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_X,	   snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_GT3E, snb_cstates),
 +
 +	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_ULT, hswult_cstates),
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_HASWELL_L, hswult_cstates),
++<<<<<<< HEAD
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT, slm_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT_X, slm_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_AIRMONT,     slm_cstates),
  
 +	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_CORE,   snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_XEON_D, snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_GT3E,   snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_X,      snb_cstates),
++=======
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT,   slm_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_SILVERMONT_D, slm_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_AIRMONT,      slm_cstates),
+ 
+ 	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL,   snb_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_D, snb_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_G, snb_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_BROADWELL_X, snb_cstates),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_L, snb_cstates),
 -	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE,   snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_MOBILE,  snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_DESKTOP, snb_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_SKYLAKE_X, snb_cstates),
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE_L, hswult_cstates),
 -	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE,   hswult_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE_MOBILE,  snb_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_KABYLAKE_DESKTOP, snb_cstates),
  
 -	X86_CSTATES_MODEL(INTEL_FAM6_CANNONLAKE_L, cnl_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_CANNONLAKE_MOBILE, cnl_cstates),
  
  	X86_CSTATES_MODEL(INTEL_FAM6_XEON_PHI_KNL, knl_cstates),
  	X86_CSTATES_MODEL(INTEL_FAM6_XEON_PHI_KNM, knl_cstates),
  
++<<<<<<< HEAD
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT, glm_cstates),
 +	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT_X, glm_cstates),
++=======
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT,   glm_cstates),
+ 	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT_D, glm_cstates),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  
  	X86_CSTATES_MODEL(INTEL_FAM6_ATOM_GOLDMONT_PLUS, glm_cstates),
 -
 -	X86_CSTATES_MODEL(INTEL_FAM6_ICELAKE_L, snb_cstates),
 -	X86_CSTATES_MODEL(INTEL_FAM6_ICELAKE,   snb_cstates),
  	{ },
  };
  MODULE_DEVICE_TABLE(x86cpu, intel_cstates_match);
diff --cc arch/x86/events/intel/pt.c
index 9494ca68fd9d,26af1f19f153..000000000000
--- a/arch/x86/events/intel/pt.c
+++ b/arch/x86/events/intel/pt.c
@@@ -212,9 -204,9 +212,15 @@@ static int __init pt_pmu_hw_init(void
  
  	/* model-specific quirks */
  	switch (boot_cpu_data.x86_model) {
++<<<<<<< HEAD
 +	case INTEL_FAM6_BROADWELL_CORE:
 +	case INTEL_FAM6_BROADWELL_XEON_D:
 +	case INTEL_FAM6_BROADWELL_GT3E:
++=======
+ 	case INTEL_FAM6_BROADWELL:
+ 	case INTEL_FAM6_BROADWELL_D:
+ 	case INTEL_FAM6_BROADWELL_G:
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	case INTEL_FAM6_BROADWELL_X:
  		/* not setting BRANCH_EN will #GP, erratum BDM106 */
  		pt_pmu.branch_en_always_on = true;
diff --cc arch/x86/events/intel/rapl.c
index 64447338b784,22f5843ef406..000000000000
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@@ -705,81 -671,76 +705,110 @@@ static int __init init_rapl_pmus(void
  #define X86_RAPL_MODEL_MATCH(model, init)	\
  	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (unsigned long)&init }
  
 -static struct rapl_model model_snb = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_PP1),
 -	.apply_quirk	= false,
 +struct intel_rapl_init_fun {
 +	bool apply_quirk;
 +	int cntr_mask;
 +	struct attribute **attrs;
  };
  
 -static struct rapl_model model_snbep = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM),
 -	.apply_quirk	= false,
 +static const struct intel_rapl_init_fun snb_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_CLN,
 +	.attrs = rapl_events_cln_attr,
  };
  
 -static struct rapl_model model_hsw = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM) |
 -			  BIT(PERF_RAPL_PP1),
 -	.apply_quirk	= false,
 +static const struct intel_rapl_init_fun hsx_rapl_init __initconst = {
 +	.apply_quirk = true,
 +	.cntr_mask = RAPL_IDX_SRV,
 +	.attrs = rapl_events_srv_attr,
  };
  
 -static struct rapl_model model_hsx = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM),
 -	.apply_quirk	= true,
 +static const struct intel_rapl_init_fun hsw_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_HSW,
 +	.attrs = rapl_events_hsw_attr,
  };
  
 -static struct rapl_model model_knl = {
 -	.events		= BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM),
 -	.apply_quirk	= true,
 +static const struct intel_rapl_init_fun snbep_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_SRV,
 +	.attrs = rapl_events_srv_attr,
  };
  
 -static struct rapl_model model_skl = {
 -	.events		= BIT(PERF_RAPL_PP0) |
 -			  BIT(PERF_RAPL_PKG) |
 -			  BIT(PERF_RAPL_RAM) |
 -			  BIT(PERF_RAPL_PP1) |
 -			  BIT(PERF_RAPL_PSYS),
 -	.apply_quirk	= false,
 +static const struct intel_rapl_init_fun knl_rapl_init __initconst = {
 +	.apply_quirk = true,
 +	.cntr_mask = RAPL_IDX_KNL,
 +	.attrs = rapl_events_knl_attr,
  };
  
++<<<<<<< HEAD
 +static const struct intel_rapl_init_fun skl_rapl_init __initconst = {
 +	.apply_quirk = false,
 +	.cntr_mask = RAPL_IDX_SKL_CLN,
 +	.attrs = rapl_events_skl_attr,
 +};
 +
 +static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,   snb_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X, snbep_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,   snb_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X, snbep_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_CORE, hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_X,    hsx_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_ULT,  hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_GT3E, hsw_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_CORE,   hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_GT3E,   hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,	  hsx_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D, hsx_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL, knl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM, knl_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_MOBILE,  skl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_DESKTOP, skl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,	 hsx_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_MOBILE,  skl_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_DESKTOP, skl_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_CANNONLAKE_MOBILE,  skl_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT, hsw_rapl_init),
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_X, hsw_rapl_init),
 +
 +	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_PLUS, hsw_rapl_init),
++=======
+ static const struct x86_cpu_id rapl_model_match[] __initconst = {
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE,		model_snb),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SANDYBRIDGE_X,		model_snbep),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE,		model_snb),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X,		model_snbep),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_X,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_L,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_HASWELL_G,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_G,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_BROADWELL_D,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL,		model_knl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM,		model_knl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,		model_hsx),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_KABYLAKE,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_CANNONLAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT,		model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_D,	model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_PLUS,	model_hsw),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ICELAKE_L,		model_skl),
+ 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ICELAKE,		model_skl),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	{},
  };
  
diff --cc arch/x86/events/intel/uncore.c
index 2dd9bdb6c7be,6fc2e06ab4c6..000000000000
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@@ -1393,14 -1462,18 +1393,23 @@@ static const struct x86_cpu_id intel_un
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_IVYBRIDGE_X,	  ivbep_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_HASWELL_X,	  hswep_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_X,	  bdx_uncore_init),
- 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_XEON_D, bdx_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_BROADWELL_D,	  bdx_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNL,	  knl_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_XEON_PHI_KNM,	  knl_uncore_init),
 -	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE,	  skl_uncore_init),
 -	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_L,	  skl_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_DESKTOP,skl_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_MOBILE, skl_uncore_init),
  	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_SKYLAKE_X,      skx_uncore_init),
++<<<<<<< HEAD
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE_MOBILE, skl_uncore_init),
 +	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE_DESKTOP, skl_uncore_init),
++=======
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE_L,	  skl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_KABYLAKE,	  skl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ICELAKE_L,	  icl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ICELAKE_NNPI,	  icl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ICELAKE,	  icl_uncore_init),
+ 	X86_UNCORE_MODEL_MATCH(INTEL_FAM6_ATOM_TREMONT_D, snr_uncore_init),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	{},
  };
  
diff --cc arch/x86/events/msr.c
index 1b9f85abf9bc,ab79d3100241..000000000000
--- a/arch/x86/events/msr.c
+++ b/arch/x86/events/msr.c
@@@ -59,14 -59,14 +59,20 @@@ static bool test_intel(int idx
  	case INTEL_FAM6_IVYBRIDGE:
  	case INTEL_FAM6_IVYBRIDGE_X:
  
 -	case INTEL_FAM6_HASWELL:
 +	case INTEL_FAM6_HASWELL_CORE:
  	case INTEL_FAM6_HASWELL_X:
 -	case INTEL_FAM6_HASWELL_L:
 -	case INTEL_FAM6_HASWELL_G:
 -
 +	case INTEL_FAM6_HASWELL_ULT:
 +	case INTEL_FAM6_HASWELL_GT3E:
 +
++<<<<<<< HEAD
 +	case INTEL_FAM6_BROADWELL_CORE:
 +	case INTEL_FAM6_BROADWELL_XEON_D:
 +	case INTEL_FAM6_BROADWELL_GT3E:
++=======
+ 	case INTEL_FAM6_BROADWELL:
+ 	case INTEL_FAM6_BROADWELL_D:
+ 	case INTEL_FAM6_BROADWELL_G:
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	case INTEL_FAM6_BROADWELL_X:
  
  	case INTEL_FAM6_ATOM_SILVERMONT:
diff --cc arch/x86/include/asm/intel-family.h
index f60ddd655c78,76dc9abb53e9..000000000000
--- a/arch/x86/include/asm/intel-family.h
+++ b/arch/x86/include/asm/intel-family.h
@@@ -34,28 -49,28 +34,34 @@@
  #define INTEL_FAM6_IVYBRIDGE		0x3A
  #define INTEL_FAM6_IVYBRIDGE_X		0x3E
  
 -#define INTEL_FAM6_HASWELL		0x3C
 +#define INTEL_FAM6_HASWELL_CORE		0x3C
  #define INTEL_FAM6_HASWELL_X		0x3F
 -#define INTEL_FAM6_HASWELL_L		0x45
 -#define INTEL_FAM6_HASWELL_G		0x46
 +#define INTEL_FAM6_HASWELL_ULT		0x45
 +#define INTEL_FAM6_HASWELL_GT3E		0x46
  
 -#define INTEL_FAM6_BROADWELL		0x3D
 -#define INTEL_FAM6_BROADWELL_G		0x47
 +#define INTEL_FAM6_BROADWELL_CORE	0x3D
 +#define INTEL_FAM6_BROADWELL_GT3E	0x47
  #define INTEL_FAM6_BROADWELL_X		0x4F
- #define INTEL_FAM6_BROADWELL_XEON_D	0x56
+ #define INTEL_FAM6_BROADWELL_D		0x56
  
 -#define INTEL_FAM6_SKYLAKE_L		0x4E
 -#define INTEL_FAM6_SKYLAKE		0x5E
 +#define INTEL_FAM6_SKYLAKE_MOBILE	0x4E
 +#define INTEL_FAM6_SKYLAKE_DESKTOP	0x5E
  #define INTEL_FAM6_SKYLAKE_X		0x55
 -#define INTEL_FAM6_KABYLAKE_L		0x8E
 -#define INTEL_FAM6_KABYLAKE		0x9E
 +#define INTEL_FAM6_KABYLAKE_MOBILE	0x8E
 +#define INTEL_FAM6_KABYLAKE_DESKTOP	0x9E
  
 -#define INTEL_FAM6_CANNONLAKE_L		0x66
 +#define INTEL_FAM6_CANNONLAKE_MOBILE	0x66
  
  #define INTEL_FAM6_ICELAKE_X		0x6A
++<<<<<<< HEAD
 +#define INTEL_FAM6_ICELAKE_XEON_D	0x6C
 +#define INTEL_FAM6_ICELAKE_DESKTOP	0x7D
 +#define INTEL_FAM6_ICELAKE_MOBILE	0x7E
++=======
+ #define INTEL_FAM6_ICELAKE_D		0x6C
+ #define INTEL_FAM6_ICELAKE		0x7D
+ #define INTEL_FAM6_ICELAKE_L		0x7E
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  #define INTEL_FAM6_ICELAKE_NNPI		0x9D
  
  /* "Small Core" Processors (Atom) */
@@@ -75,9 -90,10 +81,14 @@@
  #define INTEL_FAM6_ATOM_AIRMONT_MID	0x5A /* Moorefield */
  
  #define INTEL_FAM6_ATOM_GOLDMONT	0x5C /* Apollo Lake */
- #define INTEL_FAM6_ATOM_GOLDMONT_X	0x5F /* Denverton */
+ #define INTEL_FAM6_ATOM_GOLDMONT_D	0x5F /* Denverton */
  #define INTEL_FAM6_ATOM_GOLDMONT_PLUS	0x7A /* Gemini Lake */
++<<<<<<< HEAD
 +#define INTEL_FAM6_ATOM_TREMONT_X	0x86 /* Jacobsville */
++=======
+ 
+ #define INTEL_FAM6_ATOM_TREMONT_D	0x86 /* Jacobsville */
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  
  /* Xeon Phi */
  
diff --cc arch/x86/kernel/cpu/intel.c
index 3f0abb62161b,f4b795ab1a9b..000000000000
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@@ -116,21 -142,21 +116,28 @@@ struct sku_microcode 
  	u32 microcode;
  };
  static const struct sku_microcode spectre_bad_microcodes[] = {
 -	{ INTEL_FAM6_KABYLAKE,		0x0B,	0x80 },
 -	{ INTEL_FAM6_KABYLAKE,		0x0A,	0x80 },
 -	{ INTEL_FAM6_KABYLAKE,		0x09,	0x80 },
 -	{ INTEL_FAM6_KABYLAKE_L,	0x0A,	0x80 },
 -	{ INTEL_FAM6_KABYLAKE_L,	0x09,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_DESKTOP,	0x0B,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_DESKTOP,	0x0A,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_DESKTOP,	0x09,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_MOBILE,	0x0A,	0x80 },
 +	{ INTEL_FAM6_KABYLAKE_MOBILE,	0x09,	0x80 },
  	{ INTEL_FAM6_SKYLAKE_X,		0x03,	0x0100013e },
  	{ INTEL_FAM6_SKYLAKE_X,		0x04,	0x0200003c },
++<<<<<<< HEAD
 +	{ INTEL_FAM6_BROADWELL_CORE,	0x04,	0x28 },
 +	{ INTEL_FAM6_BROADWELL_GT3E,	0x01,	0x1b },
 +	{ INTEL_FAM6_BROADWELL_XEON_D,	0x02,	0x14 },
 +	{ INTEL_FAM6_BROADWELL_XEON_D,	0x03,	0x07000011 },
++=======
+ 	{ INTEL_FAM6_BROADWELL,		0x04,	0x28 },
+ 	{ INTEL_FAM6_BROADWELL_G,	0x01,	0x1b },
+ 	{ INTEL_FAM6_BROADWELL_D,	0x02,	0x14 },
+ 	{ INTEL_FAM6_BROADWELL_D,	0x03,	0x07000011 },
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	{ INTEL_FAM6_BROADWELL_X,	0x01,	0x0b000025 },
 -	{ INTEL_FAM6_HASWELL_L,		0x01,	0x21 },
 -	{ INTEL_FAM6_HASWELL_G,		0x01,	0x18 },
 -	{ INTEL_FAM6_HASWELL,		0x03,	0x23 },
 +	{ INTEL_FAM6_HASWELL_ULT,	0x01,	0x21 },
 +	{ INTEL_FAM6_HASWELL_GT3E,	0x01,	0x18 },
 +	{ INTEL_FAM6_HASWELL_CORE,	0x03,	0x23 },
  	{ INTEL_FAM6_HASWELL_X,		0x02,	0x3b },
  	{ INTEL_FAM6_HASWELL_X,		0x04,	0x10 },
  	{ INTEL_FAM6_IVYBRIDGE_X,	0x04,	0x42a },
diff --cc arch/x86/kernel/tsc.c
index ec3ae68c4d12,c59454c382fd..000000000000
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@@ -613,21 -632,34 +613,52 @@@ unsigned long native_calibrate_tsc(void
  
  	crystal_khz = ecx_hz / 1000;
  
++<<<<<<< HEAD
 +	if (crystal_khz == 0) {
 +		switch (boot_cpu_data.x86_model) {
 +		case INTEL_FAM6_SKYLAKE_MOBILE:
 +		case INTEL_FAM6_SKYLAKE_DESKTOP:
 +		case INTEL_FAM6_KABYLAKE_MOBILE:
 +		case INTEL_FAM6_KABYLAKE_DESKTOP:
 +			crystal_khz = 24000;	/* 24.0 MHz */
 +			break;
 +		case INTEL_FAM6_ATOM_GOLDMONT_X:
 +			crystal_khz = 25000;	/* 25.0 MHz */
 +			break;
 +		case INTEL_FAM6_ATOM_GOLDMONT:
 +			crystal_khz = 19200;	/* 19.2 MHz */
 +			break;
 +		}
++=======
+ 	/*
+ 	 * Denverton SoCs don't report crystal clock, and also don't support
+ 	 * CPUID.0x16 for the calculation below, so hardcode the 25MHz crystal
+ 	 * clock.
+ 	 */
+ 	if (crystal_khz == 0 &&
+ 			boot_cpu_data.x86_model == INTEL_FAM6_ATOM_GOLDMONT_D)
+ 		crystal_khz = 25000;
+ 
+ 	/*
+ 	 * TSC frequency reported directly by CPUID is a "hardware reported"
+ 	 * frequency and is the most accurate one so far we have. This
+ 	 * is considered a known frequency.
+ 	 */
+ 	if (crystal_khz != 0)
+ 		setup_force_cpu_cap(X86_FEATURE_TSC_KNOWN_FREQ);
+ 
+ 	/*
+ 	 * Some Intel SoCs like Skylake and Kabylake don't report the crystal
+ 	 * clock, but we can easily calculate it to a high degree of accuracy
+ 	 * by considering the crystal ratio and the CPU speed.
+ 	 */
+ 	if (crystal_khz == 0 && boot_cpu_data.cpuid_level >= 0x16) {
+ 		unsigned int eax_base_mhz, ebx, ecx, edx;
+ 
+ 		cpuid(0x16, &eax_base_mhz, &ebx, &ecx, &edx);
+ 		crystal_khz = eax_base_mhz * 1000 *
+ 			eax_denominator / ebx_numerator;
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	}
  
  	if (crystal_khz == 0)
diff --cc drivers/cpufreq/intel_pstate.c
index 9d4adde922e2,886324041add..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1824,18 -1871,18 +1824,23 @@@ static const struct x86_cpu_id intel_ps
  	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		core_funcs),
  	ICPU(INTEL_FAM6_ATOM_SILVERMONT,	silvermont_funcs),
  	ICPU(INTEL_FAM6_IVYBRIDGE,		core_funcs),
 -	ICPU(INTEL_FAM6_HASWELL,		core_funcs),
 -	ICPU(INTEL_FAM6_BROADWELL,		core_funcs),
 +	ICPU(INTEL_FAM6_HASWELL_CORE,		core_funcs),
 +	ICPU(INTEL_FAM6_BROADWELL_CORE,		core_funcs),
  	ICPU(INTEL_FAM6_IVYBRIDGE_X,		core_funcs),
  	ICPU(INTEL_FAM6_HASWELL_X,		core_funcs),
 -	ICPU(INTEL_FAM6_HASWELL_L,		core_funcs),
 -	ICPU(INTEL_FAM6_HASWELL_G,		core_funcs),
 -	ICPU(INTEL_FAM6_BROADWELL_G,		core_funcs),
 +	ICPU(INTEL_FAM6_HASWELL_ULT,		core_funcs),
 +	ICPU(INTEL_FAM6_HASWELL_GT3E,		core_funcs),
 +	ICPU(INTEL_FAM6_BROADWELL_GT3E,		core_funcs),
  	ICPU(INTEL_FAM6_ATOM_AIRMONT,		airmont_funcs),
 -	ICPU(INTEL_FAM6_SKYLAKE_L,		core_funcs),
 +	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		core_funcs),
  	ICPU(INTEL_FAM6_BROADWELL_X,		core_funcs),
++<<<<<<< HEAD
 +	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	core_funcs),
 +	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	core_funcs),
++=======
+ 	ICPU(INTEL_FAM6_SKYLAKE,		core_funcs),
+ 	ICPU(INTEL_FAM6_BROADWELL_D,		core_funcs),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	ICPU(INTEL_FAM6_XEON_PHI_KNL,		knl_funcs),
  	ICPU(INTEL_FAM6_XEON_PHI_KNM,		knl_funcs),
  	ICPU(INTEL_FAM6_ATOM_GOLDMONT,		core_funcs),
diff --cc drivers/edac/sb_edac.c
index d1e70c81e891,f743502ca9b7..000000000000
--- a/drivers/edac/sb_edac.c
+++ b/drivers/edac/sb_edac.c
@@@ -3425,17 -3424,14 +3425,27 @@@ fail0
  	return rc;
  }
  
 +#define ICPU(model, table) \
 +	{ X86_VENDOR_INTEL, 6, model, 0, (unsigned long)&table }
 +
  static const struct x86_cpu_id sbridge_cpuids[] = {
++<<<<<<< HEAD
 +	ICPU(INTEL_FAM6_SANDYBRIDGE_X,	  pci_dev_descr_sbridge_table),
 +	ICPU(INTEL_FAM6_IVYBRIDGE_X,	  pci_dev_descr_ibridge_table),
 +	ICPU(INTEL_FAM6_HASWELL_X,	  pci_dev_descr_haswell_table),
 +	ICPU(INTEL_FAM6_BROADWELL_X,	  pci_dev_descr_broadwell_table),
 +	ICPU(INTEL_FAM6_BROADWELL_XEON_D, pci_dev_descr_broadwell_table),
 +	ICPU(INTEL_FAM6_XEON_PHI_KNL,	  pci_dev_descr_knl_table),
 +	ICPU(INTEL_FAM6_XEON_PHI_KNM,	  pci_dev_descr_knl_table),
++=======
+ 	INTEL_CPU_FAM6(SANDYBRIDGE_X,	  pci_dev_descr_sbridge_table),
+ 	INTEL_CPU_FAM6(IVYBRIDGE_X,	  pci_dev_descr_ibridge_table),
+ 	INTEL_CPU_FAM6(HASWELL_X,	  pci_dev_descr_haswell_table),
+ 	INTEL_CPU_FAM6(BROADWELL_X,	  pci_dev_descr_broadwell_table),
+ 	INTEL_CPU_FAM6(BROADWELL_D,	  pci_dev_descr_broadwell_table),
+ 	INTEL_CPU_FAM6(XEON_PHI_KNL,	  pci_dev_descr_knl_table),
+ 	INTEL_CPU_FAM6(XEON_PHI_KNM,	  pci_dev_descr_knl_table),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	{ }
  };
  MODULE_DEVICE_TABLE(x86cpu, sbridge_cpuids);
diff --cc drivers/idle/intel_idle.c
index 8b5d85c91e9d,347b08b56042..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -1084,25 -1072,26 +1084,44 @@@ static const struct x86_cpu_id intel_id
  	INTEL_CPU_FAM6(ATOM_AIRMONT,		idle_cpu_cht),
  	INTEL_CPU_FAM6(IVYBRIDGE,		idle_cpu_ivb),
  	INTEL_CPU_FAM6(IVYBRIDGE_X,		idle_cpu_ivt),
 -	INTEL_CPU_FAM6(HASWELL,			idle_cpu_hsw),
 +	INTEL_CPU_FAM6(HASWELL_CORE,		idle_cpu_hsw),
  	INTEL_CPU_FAM6(HASWELL_X,		idle_cpu_hsw),
++<<<<<<< HEAD
 +	INTEL_CPU_FAM6(HASWELL_ULT,		idle_cpu_hsw),
 +	INTEL_CPU_FAM6(HASWELL_GT3E,		idle_cpu_hsw),
 +	INTEL_CPU_FAM6(ATOM_SILVERMONT_X,	idle_cpu_avn),
 +	INTEL_CPU_FAM6(BROADWELL_CORE,		idle_cpu_bdw),
 +	INTEL_CPU_FAM6(BROADWELL_GT3E,		idle_cpu_bdw),
 +	INTEL_CPU_FAM6(BROADWELL_X,		idle_cpu_bdw),
 +	INTEL_CPU_FAM6(BROADWELL_XEON_D,	idle_cpu_bdw),
 +	INTEL_CPU_FAM6(SKYLAKE_MOBILE,		idle_cpu_skl),
 +	INTEL_CPU_FAM6(SKYLAKE_DESKTOP,		idle_cpu_skl),
 +	INTEL_CPU_FAM6(KABYLAKE_MOBILE,		idle_cpu_skl),
 +	INTEL_CPU_FAM6(KABYLAKE_DESKTOP,	idle_cpu_skl),
++=======
+ 	INTEL_CPU_FAM6(HASWELL_L,		idle_cpu_hsw),
+ 	INTEL_CPU_FAM6(HASWELL_G,		idle_cpu_hsw),
+ 	INTEL_CPU_FAM6(ATOM_SILVERMONT_D,	idle_cpu_avn),
+ 	INTEL_CPU_FAM6(BROADWELL,		idle_cpu_bdw),
+ 	INTEL_CPU_FAM6(BROADWELL_G,		idle_cpu_bdw),
+ 	INTEL_CPU_FAM6(BROADWELL_X,		idle_cpu_bdw),
+ 	INTEL_CPU_FAM6(BROADWELL_D,		idle_cpu_bdw),
+ 	INTEL_CPU_FAM6(SKYLAKE_L,		idle_cpu_skl),
+ 	INTEL_CPU_FAM6(SKYLAKE,			idle_cpu_skl),
+ 	INTEL_CPU_FAM6(KABYLAKE_L,		idle_cpu_skl),
+ 	INTEL_CPU_FAM6(KABYLAKE,		idle_cpu_skl),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	INTEL_CPU_FAM6(SKYLAKE_X,		idle_cpu_skx),
  	INTEL_CPU_FAM6(XEON_PHI_KNL,		idle_cpu_knl),
  	INTEL_CPU_FAM6(XEON_PHI_KNM,		idle_cpu_knl),
  	INTEL_CPU_FAM6(ATOM_GOLDMONT,		idle_cpu_bxt),
  	INTEL_CPU_FAM6(ATOM_GOLDMONT_PLUS,	idle_cpu_bxt),
++<<<<<<< HEAD
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT_X,		idle_cpu_dnv),
++=======
+ 	INTEL_CPU_FAM6(ATOM_GOLDMONT_D,		idle_cpu_dnv),
+ 	INTEL_CPU_FAM6(ATOM_TREMONT_D,		idle_cpu_dnv),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming)
  	{}
  };
  
diff --cc drivers/powercap/intel_rapl.c
index ad78c1d08260,94ddd7d659c8..000000000000
--- a/drivers/powercap/intel_rapl.c
+++ b/drivers/powercap/intel_rapl.c
@@@ -1139,43 -951,48 +1139,71 @@@ static const struct rapl_defaults rapl_
  };
  
  static const struct x86_cpu_id rapl_ids[] __initconst = {
 -	INTEL_CPU_FAM6(SANDYBRIDGE, rapl_defaults_core),
 -	INTEL_CPU_FAM6(SANDYBRIDGE_X, rapl_defaults_core),
 -
 -	INTEL_CPU_FAM6(IVYBRIDGE, rapl_defaults_core),
 -	INTEL_CPU_FAM6(IVYBRIDGE_X, rapl_defaults_core),
 -
 -	INTEL_CPU_FAM6(HASWELL, rapl_defaults_core),
 -	INTEL_CPU_FAM6(HASWELL_L, rapl_defaults_core),
 -	INTEL_CPU_FAM6(HASWELL_G, rapl_defaults_core),
 -	INTEL_CPU_FAM6(HASWELL_X, rapl_defaults_hsw_server),
 -
 +	INTEL_CPU_FAM6(SANDYBRIDGE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(SANDYBRIDGE_X,		rapl_defaults_core),
 +
 +	INTEL_CPU_FAM6(IVYBRIDGE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(IVYBRIDGE_X,		rapl_defaults_core),
 +
 +	INTEL_CPU_FAM6(HASWELL_CORE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(HASWELL_ULT,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(HASWELL_GT3E,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(HASWELL_X,		rapl_defaults_hsw_server),
 +
++<<<<<<< HEAD:drivers/powercap/intel_rapl.c
 +	INTEL_CPU_FAM6(BROADWELL_CORE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(BROADWELL_GT3E,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(BROADWELL_XEON_D,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(BROADWELL_X,		rapl_defaults_hsw_server),
 +
 +	INTEL_CPU_FAM6(SKYLAKE_DESKTOP,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(SKYLAKE_MOBILE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(SKYLAKE_X,		rapl_defaults_hsw_server),
 +	INTEL_CPU_FAM6(KABYLAKE_MOBILE,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(KABYLAKE_DESKTOP,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(CANNONLAKE_MOBILE,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(ICELAKE_MOBILE,		rapl_defaults_core),
 +
 +	INTEL_CPU_FAM6(ATOM_SILVERMONT,		rapl_defaults_byt),
 +	INTEL_CPU_FAM6(ATOM_AIRMONT,		rapl_defaults_cht),
 +	INTEL_CPU_FAM6(ATOM_SILVERMONT_MID,	rapl_defaults_tng),
 +	INTEL_CPU_FAM6(ATOM_AIRMONT_MID,	rapl_defaults_ann),
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT_PLUS,	rapl_defaults_core),
 +	INTEL_CPU_FAM6(ATOM_GOLDMONT_X,		rapl_defaults_core),
 +	INTEL_CPU_FAM6(ATOM_TREMONT_X,		rapl_defaults_core),
++=======
+ 	INTEL_CPU_FAM6(BROADWELL, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(BROADWELL_G, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(BROADWELL_D, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(BROADWELL_X, rapl_defaults_hsw_server),
+ 
+ 	INTEL_CPU_FAM6(SKYLAKE, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(SKYLAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(SKYLAKE_X, rapl_defaults_hsw_server),
+ 	INTEL_CPU_FAM6(KABYLAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(KABYLAKE, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(CANNONLAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE_L, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE_NNPI, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ICELAKE_X, rapl_defaults_hsw_server),
+ 	INTEL_CPU_FAM6(ICELAKE_D, rapl_defaults_hsw_server),
+ 
+ 	INTEL_CPU_FAM6(ATOM_SILVERMONT, rapl_defaults_byt),
+ 	INTEL_CPU_FAM6(ATOM_AIRMONT, rapl_defaults_cht),
+ 	INTEL_CPU_FAM6(ATOM_SILVERMONT_MID, rapl_defaults_tng),
+ 	INTEL_CPU_FAM6(ATOM_AIRMONT_MID, rapl_defaults_ann),
+ 	INTEL_CPU_FAM6(ATOM_GOLDMONT, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ATOM_GOLDMONT_PLUS, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ATOM_GOLDMONT_D, rapl_defaults_core),
+ 	INTEL_CPU_FAM6(ATOM_TREMONT_D, rapl_defaults_core),
++>>>>>>> 5ebb34edbefa (x86/intel: Aggregate microserver naming):drivers/powercap/intel_rapl_common.c
  
 -	INTEL_CPU_FAM6(XEON_PHI_KNL, rapl_defaults_hsw_server),
 -	INTEL_CPU_FAM6(XEON_PHI_KNM, rapl_defaults_hsw_server),
 +	INTEL_CPU_FAM6(XEON_PHI_KNL,		rapl_defaults_hsw_server),
 +	INTEL_CPU_FAM6(XEON_PHI_KNM,		rapl_defaults_hsw_server),
  	{}
  };
 -
  MODULE_DEVICE_TABLE(x86cpu, rapl_ids);
  
  /* Read once for all raw primitive data for domains */
* Unmerged path arch/x86/events/intel/core.c
* Unmerged path arch/x86/events/intel/cstate.c
* Unmerged path arch/x86/events/intel/pt.c
* Unmerged path arch/x86/events/intel/rapl.c
* Unmerged path arch/x86/events/intel/uncore.c
* Unmerged path arch/x86/events/msr.c
* Unmerged path arch/x86/include/asm/intel-family.h
diff --git a/arch/x86/kernel/apic/apic.c b/arch/x86/kernel/apic/apic.c
index 4c9f99e94d52..7c8e67a411bb 100644
--- a/arch/x86/kernel/apic/apic.c
+++ b/arch/x86/kernel/apic/apic.c
@@ -583,7 +583,7 @@ static u32 skx_deadline_rev(void)
 static const struct x86_cpu_id deadline_match[] = {
 	DEADLINE_MODEL_MATCH_FUNC( INTEL_FAM6_HASWELL_X,	hsx_deadline_rev),
 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_BROADWELL_X,	0x0b000020),
-	DEADLINE_MODEL_MATCH_FUNC( INTEL_FAM6_BROADWELL_XEON_D,	bdx_deadline_rev),
+	DEADLINE_MODEL_MATCH_FUNC( INTEL_FAM6_BROADWELL_D,	bdx_deadline_rev),
 	DEADLINE_MODEL_MATCH_FUNC( INTEL_FAM6_SKYLAKE_X,	skx_deadline_rev),
 
 	DEADLINE_MODEL_MATCH_REV ( INTEL_FAM6_HASWELL_CORE,	0x22),
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index e4eea0ab2b92..17f9eff4fed2 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -983,7 +983,7 @@ static const __initconst struct x86_cpu_id cpu_vuln_whitelist[] = {
 	VULNWL_INTEL(ATOM_BONNELL_MID,		NO_SPECULATION),
 
 	VULNWL_INTEL(ATOM_SILVERMONT,		NO_SSB | NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
-	VULNWL_INTEL(ATOM_SILVERMONT_X,		NO_SSB | NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
+	VULNWL_INTEL(ATOM_SILVERMONT_D,		NO_SSB | NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
 	VULNWL_INTEL(ATOM_SILVERMONT_MID,	NO_SSB | NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
 	VULNWL_INTEL(ATOM_AIRMONT,		NO_SSB | NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
 	VULNWL_INTEL(XEON_PHI_KNL,		NO_SSB | NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
@@ -994,7 +994,7 @@ static const __initconst struct x86_cpu_id cpu_vuln_whitelist[] = {
 	VULNWL_INTEL(ATOM_AIRMONT_MID,		NO_L1TF | MSBDS_ONLY | NO_SWAPGS),
 
 	VULNWL_INTEL(ATOM_GOLDMONT,		NO_MDS | NO_L1TF | NO_SWAPGS),
-	VULNWL_INTEL(ATOM_GOLDMONT_X,		NO_MDS | NO_L1TF | NO_SWAPGS),
+	VULNWL_INTEL(ATOM_GOLDMONT_D,		NO_MDS | NO_L1TF | NO_SWAPGS),
 	VULNWL_INTEL(ATOM_GOLDMONT_PLUS,	NO_MDS | NO_L1TF | NO_SWAPGS),
 
 	/*
* Unmerged path arch/x86/kernel/cpu/intel.c
diff --git a/arch/x86/kernel/cpu/mce/intel.c b/arch/x86/kernel/cpu/mce/intel.c
index e43eb6732630..88cd9598fa57 100644
--- a/arch/x86/kernel/cpu/mce/intel.c
+++ b/arch/x86/kernel/cpu/mce/intel.c
@@ -479,7 +479,7 @@ static void intel_ppin_init(struct cpuinfo_x86 *c)
 	switch (c->x86_model) {
 	case INTEL_FAM6_IVYBRIDGE_X:
 	case INTEL_FAM6_HASWELL_X:
-	case INTEL_FAM6_BROADWELL_XEON_D:
+	case INTEL_FAM6_BROADWELL_D:
 	case INTEL_FAM6_BROADWELL_X:
 	case INTEL_FAM6_SKYLAKE_X:
 	case INTEL_FAM6_XEON_PHI_KNL:
* Unmerged path arch/x86/kernel/tsc.c
* Unmerged path drivers/cpufreq/intel_pstate.c
diff --git a/drivers/edac/i10nm_base.c b/drivers/edac/i10nm_base.c
index 83392f2841de..c370d5457e6b 100644
--- a/drivers/edac/i10nm_base.c
+++ b/drivers/edac/i10nm_base.c
@@ -123,9 +123,9 @@ static int i10nm_get_all_munits(void)
 }
 
 static const struct x86_cpu_id i10nm_cpuids[] = {
-	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_TREMONT_X, 0, 0 },
+	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_TREMONT_D, 0, 0 },
 	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ICELAKE_X, 0, 0 },
-	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ICELAKE_XEON_D, 0, 0 },
+	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ICELAKE_D, 0, 0 },
 	{ }
 };
 MODULE_DEVICE_TABLE(x86cpu, i10nm_cpuids);
diff --git a/drivers/edac/pnd2_edac.c b/drivers/edac/pnd2_edac.c
index 903a4f1fadcc..cf786c5ea9a9 100644
--- a/drivers/edac/pnd2_edac.c
+++ b/drivers/edac/pnd2_edac.c
@@ -1541,7 +1541,7 @@ static struct dunit_ops dnv_ops = {
 
 static const struct x86_cpu_id pnd2_cpuids[] = {
 	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_GOLDMONT, 0, (kernel_ulong_t)&apl_ops },
-	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_GOLDMONT_X, 0, (kernel_ulong_t)&dnv_ops },
+	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_GOLDMONT_D, 0, (kernel_ulong_t)&dnv_ops },
 	{ }
 };
 MODULE_DEVICE_TABLE(x86cpu, pnd2_cpuids);
* Unmerged path drivers/edac/sb_edac.c
* Unmerged path drivers/idle/intel_idle.c
* Unmerged path drivers/powercap/intel_rapl.c
diff --git a/tools/power/x86/turbostat/turbostat.c b/tools/power/x86/turbostat/turbostat.c
index 33444b65755d..e90bb2c306dc 100644
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@ -2180,7 +2180,7 @@ int has_turbo_ratio_group_limits(int family, int model)
 	switch (model) {
 	case INTEL_FAM6_ATOM_GOLDMONT:
 	case INTEL_FAM6_SKYLAKE_X:
-	case INTEL_FAM6_ATOM_GOLDMONT_X:
+	case INTEL_FAM6_ATOM_GOLDMONT_D:
 		return 1;
 	}
 	return 0;
@@ -3264,7 +3264,7 @@ int probe_nhm_msrs(unsigned int family, unsigned int model)
 		break;
 	case INTEL_FAM6_ATOM_SILVERMONT:	/* BYT */
 		no_MSR_MISC_PWR_MGMT = 1;
-	case INTEL_FAM6_ATOM_SILVERMONT_X:	/* AVN */
+	case INTEL_FAM6_ATOM_SILVERMONT_D:	/* AVN */
 		pkg_cstate_limits = slv_pkg_cstate_limits;
 		break;
 	case INTEL_FAM6_ATOM_AIRMONT:	/* AMT */
@@ -3276,7 +3276,7 @@ int probe_nhm_msrs(unsigned int family, unsigned int model)
 		break;
 	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
 	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
-	case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
+	case INTEL_FAM6_ATOM_GOLDMONT_D:	/* DNV */
 		pkg_cstate_limits = glm_pkg_cstate_limits;
 		break;
 	default:
@@ -3319,7 +3319,7 @@ int is_dnv(unsigned int family, unsigned int model)
 		return 0;
 
 	switch (model) {
-	case INTEL_FAM6_ATOM_GOLDMONT_X:
+	case INTEL_FAM6_ATOM_GOLDMONT_D:
 		return 1;
 	}
 	return 0;
@@ -3833,7 +3833,7 @@ double get_tdp_intel(unsigned int model)
 
 	switch (model) {
 	case INTEL_FAM6_ATOM_SILVERMONT:
-	case INTEL_FAM6_ATOM_SILVERMONT_X:
+	case INTEL_FAM6_ATOM_SILVERMONT_D:
 		return 30.0;
 	default:
 		return 135.0;
@@ -3954,7 +3954,7 @@ void rapl_probe_intel(unsigned int family, unsigned int model)
 		}
 		break;
 	case INTEL_FAM6_ATOM_SILVERMONT:	/* BYT */
-	case INTEL_FAM6_ATOM_SILVERMONT_X:	/* AVN */
+	case INTEL_FAM6_ATOM_SILVERMONT_D:	/* AVN */
 		do_rapl = RAPL_PKG | RAPL_CORES;
 		if (rapl_joules) {
 			BIC_PRESENT(BIC_Pkg_J);
@@ -3964,7 +3964,7 @@ void rapl_probe_intel(unsigned int family, unsigned int model)
 			BIC_PRESENT(BIC_CorWatt);
 		}
 		break;
-	case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
+	case INTEL_FAM6_ATOM_GOLDMONT_D:	/* DNV */
 		do_rapl = RAPL_PKG | RAPL_DRAM | RAPL_DRAM_POWER_INFO | RAPL_DRAM_PERF_STATUS | RAPL_PKG_PERF_STATUS | RAPL_PKG_POWER_INFO | RAPL_CORES_ENERGY_STATUS;
 		BIC_PRESENT(BIC_PKG__);
 		BIC_PRESENT(BIC_RAM__);
@@ -4306,7 +4306,7 @@ int has_snb_msrs(unsigned int family, unsigned int model)
 	case INTEL_FAM6_SKYLAKE_X:	/* SKX */
 	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
 	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
-	case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
+	case INTEL_FAM6_ATOM_GOLDMONT_D:	/* DNV */
 		return 1;
 	}
 	return 0;
@@ -4368,7 +4368,7 @@ int is_slm(unsigned int family, unsigned int model)
 		return 0;
 	switch (model) {
 	case INTEL_FAM6_ATOM_SILVERMONT:	/* BYT */
-	case INTEL_FAM6_ATOM_SILVERMONT_X:	/* AVN */
+	case INTEL_FAM6_ATOM_SILVERMONT_D:	/* AVN */
 		return 1;
 	}
 	return 0;
@@ -4615,7 +4615,7 @@ unsigned int intel_model_duplicates(unsigned int model)
 		return INTEL_FAM6_XEON_PHI_KNL;
 
 	case INTEL_FAM6_BROADWELL_X:
-	case INTEL_FAM6_BROADWELL_XEON_D:	/* BDX-DE */
+	case INTEL_FAM6_BROADWELL_D:	/* BDX-DE */
 		return INTEL_FAM6_BROADWELL_X;
 
 	case INTEL_FAM6_SKYLAKE_MOBILE:
@@ -4783,7 +4783,7 @@ void process_cpuid()
 				case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
 					crystal_hz = 24000000;	/* 24.0 MHz */
 					break;
-				case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
+				case INTEL_FAM6_ATOM_GOLDMONT_D:	/* DNV */
 					crystal_hz = 25000000;	/* 25.0 MHz */
 					break;
 				case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
