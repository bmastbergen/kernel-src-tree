nfp: move devlink port type set after netdev registration

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit faaccbe6eb07ecd590bebae11eb236661ecfb069
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/faaccbe6.failed

Similar to other driver, move the port type set after netdev registration
is done. Along with that, clear the type before unregistration.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit faaccbe6eb07ecd590bebae11eb236661ecfb069)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_devlink.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_devlink.c
index db2da99f6aa7,cb59a18ec6a6..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_devlink.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_devlink.c
@@@ -376,3 -375,24 +375,27 @@@ void nfp_devlink_port_unregister(struc
  {
  	devlink_port_unregister(&port->dl_port);
  }
++<<<<<<< HEAD
++=======
+ 
+ void nfp_devlink_port_type_eth_set(struct nfp_port *port)
+ {
+ 	devlink_port_type_eth_set(&port->dl_port, port->netdev);
+ }
+ 
+ void nfp_devlink_port_type_clear(struct nfp_port *port)
+ {
+ 	devlink_port_type_clear(&port->dl_port);
+ }
+ 
+ struct devlink *nfp_devlink_get_devlink(struct net_device *netdev)
+ {
+ 	struct nfp_app *app;
+ 
+ 	app = nfp_app_from_netdev(netdev);
+ 	if (!app)
+ 		return NULL;
+ 
+ 	return priv_to_devlink(app->pf);
+ }
++>>>>>>> faaccbe6eb07 (nfp: move devlink port type set after netdev registration)
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_devlink.c
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index 08f5fdbd8e41..f35278062476 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@ -160,6 +160,7 @@ nfp_net_pf_init_vnic(struct nfp_pf *pf, struct nfp_net *nn, unsigned int id)
 		err = nfp_devlink_port_register(pf->app, nn->port);
 		if (err)
 			goto err_dfs_clean;
+		nfp_devlink_port_type_eth_set(nn->port);
 	}
 
 	nfp_net_info(nn);
@@ -173,8 +174,10 @@ nfp_net_pf_init_vnic(struct nfp_pf *pf, struct nfp_net *nn, unsigned int id)
 	return 0;
 
 err_devlink_port_clean:
-	if (nn->port)
+	if (nn->port) {
+		nfp_devlink_port_type_clear(nn->port);
 		nfp_devlink_port_unregister(nn->port);
+	}
 err_dfs_clean:
 	nfp_net_debugfs_dir_clean(&nn->debugfs_dir);
 	nfp_net_clean(nn);
@@ -220,8 +223,10 @@ static void nfp_net_pf_clean_vnic(struct nfp_pf *pf, struct nfp_net *nn)
 {
 	if (nfp_net_is_data_vnic(nn))
 		nfp_app_vnic_clean(pf->app, nn);
-	if (nn->port)
+	if (nn->port) {
+		nfp_devlink_port_type_clear(nn->port);
 		nfp_devlink_port_unregister(nn->port);
+	}
 	nfp_net_debugfs_dir_clean(&nn->debugfs_dir);
 	nfp_net_clean(nn);
 }
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_port.h b/drivers/net/ethernet/netronome/nfp/nfp_port.h
index 90ae053f5c07..d7fd203bb180 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_port.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_port.h
@@ -131,6 +131,8 @@ int nfp_net_refresh_port_table_sync(struct nfp_pf *pf);
 
 int nfp_devlink_port_register(struct nfp_app *app, struct nfp_port *port);
 void nfp_devlink_port_unregister(struct nfp_port *port);
+void nfp_devlink_port_type_eth_set(struct nfp_port *port);
+void nfp_devlink_port_type_clear(struct nfp_port *port);
 
 /**
  * Mac stats (0x0000 - 0x0200)
