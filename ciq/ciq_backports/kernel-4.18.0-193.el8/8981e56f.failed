selftests/bpf: use typedef'ed arrays as map values

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 8981e56fa17282598571958ae6a29cbc3209a6cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/8981e56f.failed

Convert few tests that couldn't use typedef'ed arrays due to kernel bug.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 8981e56fa17282598571958ae6a29cbc3209a6cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_get_stack_rawtp.c
#	tools/testing/selftests/bpf/test_stacktrace_build_id.c
#	tools/testing/selftests/bpf/test_stacktrace_map.c
diff --cc tools/testing/selftests/bpf/test_get_stack_rawtp.c
index f6d9f238e00a,33254b771384..000000000000
--- a/tools/testing/selftests/bpf/test_get_stack_rawtp.c
+++ b/tools/testing/selftests/bpf/test_get_stack_rawtp.c
@@@ -47,12 -47,13 +47,22 @@@ struct bpf_map_def SEC("maps") stackdat
   * issue and avoid complicated C programming massaging.
   * This is an acceptable workaround since there is one entry here.
   */
++<<<<<<< HEAD:tools/testing/selftests/bpf/test_get_stack_rawtp.c
 +struct bpf_map_def SEC("maps") rawdata_map = {
 +	.type = BPF_MAP_TYPE_PERCPU_ARRAY,
 +	.key_size = sizeof(__u32),
 +	.value_size = MAX_STACK_RAWTP * sizeof(__u64) * 2,
 +	.max_entries = 1,
 +};
++=======
+ typedef __u64 raw_stack_trace_t[2 * MAX_STACK_RAWTP];
+ struct {
+ 	__uint(type, BPF_MAP_TYPE_PERCPU_ARRAY);
+ 	__uint(max_entries, 1);
+ 	__type(key, __u32);
+ 	__type(value, raw_stack_trace_t);
+ } rawdata_map SEC(".maps");
++>>>>>>> 8981e56fa172 (selftests/bpf: use typedef'ed arrays as map values):tools/testing/selftests/bpf/progs/test_get_stack_rawtp.c
  
  SEC("tracepoint/raw_syscalls/sys_enter")
  int bpf_prog1(void *ctx)
diff --cc tools/testing/selftests/bpf/test_stacktrace_build_id.c
index d86c281e957f,f5638e26865d..000000000000
--- a/tools/testing/selftests/bpf/test_stacktrace_build_id.c
+++ b/tools/testing/selftests/bpf/test_stacktrace_build_id.c
@@@ -8,36 -8,36 +8,53 @@@
  #define PERF_MAX_STACK_DEPTH         127
  #endif
  
 -struct {
 -	__uint(type, BPF_MAP_TYPE_ARRAY);
 -	__uint(max_entries, 1);
 -	__type(key, __u32);
 -	__type(value, __u32);
 -} control_map SEC(".maps");
 +struct bpf_map_def SEC("maps") control_map = {
 +	.type = BPF_MAP_TYPE_ARRAY,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(__u32),
 +	.max_entries = 1,
 +};
  
 -struct {
 -	__uint(type, BPF_MAP_TYPE_HASH);
 -	__uint(max_entries, 16384);
 -	__type(key, __u32);
 -	__type(value, __u32);
 -} stackid_hmap SEC(".maps");
 +struct bpf_map_def SEC("maps") stackid_hmap = {
 +	.type = BPF_MAP_TYPE_HASH,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(__u32),
 +	.max_entries = 16384,
 +};
  
 -typedef struct bpf_stack_build_id stack_trace_t[PERF_MAX_STACK_DEPTH];
 +struct bpf_map_def SEC("maps") stackmap = {
 +	.type = BPF_MAP_TYPE_STACK_TRACE,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(struct bpf_stack_build_id)
 +		* PERF_MAX_STACK_DEPTH,
 +	.max_entries = 128,
 +	.map_flags = BPF_F_STACK_BUILD_ID,
 +};
  
++<<<<<<< HEAD:tools/testing/selftests/bpf/test_stacktrace_build_id.c
 +struct bpf_map_def SEC("maps") stack_amap = {
 +	.type = BPF_MAP_TYPE_ARRAY,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(struct bpf_stack_build_id)
 +		* PERF_MAX_STACK_DEPTH,
 +	.max_entries = 128,
 +};
++=======
+ struct {
+ 	__uint(type, BPF_MAP_TYPE_STACK_TRACE);
+ 	__uint(max_entries, 128);
+ 	__uint(map_flags, BPF_F_STACK_BUILD_ID);
+ 	__uint(key_size, sizeof(__u32));
+ 	__uint(value_size, sizeof(stack_trace_t));
+ } stackmap SEC(".maps");
+ 
+ struct {
+ 	__uint(type, BPF_MAP_TYPE_ARRAY);
+ 	__uint(max_entries, 128);
+ 	__type(key, __u32);
+ 	__type(value, stack_trace_t);
+ } stack_amap SEC(".maps");
++>>>>>>> 8981e56fa172 (selftests/bpf: use typedef'ed arrays as map values):tools/testing/selftests/bpf/progs/test_stacktrace_build_id.c
  
  /* taken from /sys/kernel/debug/tracing/events/random/urandom_read/format */
  struct random_urandom_args {
diff --cc tools/testing/selftests/bpf/test_stacktrace_map.c
index af111af7ca1a,fa0be3e10a10..000000000000
--- a/tools/testing/selftests/bpf/test_stacktrace_map.c
+++ b/tools/testing/selftests/bpf/test_stacktrace_map.c
@@@ -8,33 -8,35 +8,49 @@@
  #define PERF_MAX_STACK_DEPTH         127
  #endif
  
 -struct {
 -	__uint(type, BPF_MAP_TYPE_ARRAY);
 -	__uint(max_entries, 1);
 -	__type(key, __u32);
 -	__type(value, __u32);
 -} control_map SEC(".maps");
 +struct bpf_map_def SEC("maps") control_map = {
 +	.type = BPF_MAP_TYPE_ARRAY,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(__u32),
 +	.max_entries = 1,
 +};
  
 -struct {
 -	__uint(type, BPF_MAP_TYPE_HASH);
 -	__uint(max_entries, 16384);
 -	__type(key, __u32);
 -	__type(value, __u32);
 -} stackid_hmap SEC(".maps");
 +struct bpf_map_def SEC("maps") stackid_hmap = {
 +	.type = BPF_MAP_TYPE_HASH,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(__u32),
 +	.max_entries = 16384,
 +};
  
 -typedef __u64 stack_trace_t[PERF_MAX_STACK_DEPTH];
 +struct bpf_map_def SEC("maps") stackmap = {
 +	.type = BPF_MAP_TYPE_STACK_TRACE,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(__u64) * PERF_MAX_STACK_DEPTH,
 +	.max_entries = 16384,
 +};
  
++<<<<<<< HEAD:tools/testing/selftests/bpf/test_stacktrace_map.c
 +struct bpf_map_def SEC("maps") stack_amap = {
 +	.type = BPF_MAP_TYPE_ARRAY,
 +	.key_size = sizeof(__u32),
 +	.value_size = sizeof(__u64) * PERF_MAX_STACK_DEPTH,
 +	.max_entries = 16384,
 +};
++=======
+ struct {
+ 	__uint(type, BPF_MAP_TYPE_STACK_TRACE);
+ 	__uint(max_entries, 16384);
+ 	__uint(key_size, sizeof(__u32));
+ 	__uint(value_size, sizeof(stack_trace_t));
+ } stackmap SEC(".maps");
+ 
+ struct {
+ 	__uint(type, BPF_MAP_TYPE_ARRAY);
+ 	__uint(max_entries, 16384);
+ 	__type(key, __u32);
+ 	__type(value, stack_trace_t);
+ } stack_amap SEC(".maps");
++>>>>>>> 8981e56fa172 (selftests/bpf: use typedef'ed arrays as map values):tools/testing/selftests/bpf/progs/test_stacktrace_map.c
  
  /* taken from /sys/kernel/debug/tracing/events/sched/sched_switch/format */
  struct sched_switch_args {
* Unmerged path tools/testing/selftests/bpf/test_get_stack_rawtp.c
* Unmerged path tools/testing/selftests/bpf/test_stacktrace_build_id.c
* Unmerged path tools/testing/selftests/bpf/test_stacktrace_map.c
