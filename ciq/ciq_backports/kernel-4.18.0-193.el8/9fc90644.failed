ALSA: firewire-lib: code refactoring for AM824 data block processing layer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit 9fc90644cae9c0abfcce0576ed0a14cca67f69b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/9fc90644.failed

This is code refactoring for AM824 data block processing layer so that
it can receive list of packet descriptor.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 9fc90644cae9c0abfcce0576ed0a14cca67f69b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/firewire/amdtp-am824.c
diff --cc sound/firewire/amdtp-am824.c
index 99c99d5627ae,5d2952a1a9b2..000000000000
--- a/sound/firewire/amdtp-am824.c
+++ b/sound/firewire/amdtp-am824.c
@@@ -331,43 -345,46 +341,63 @@@ static void read_midi_messages(struct a
  	}
  }
  
 -static unsigned int process_rx_data_blocks(struct amdtp_stream *s,
 -					   const struct pkt_desc *desc,
 -					   struct snd_pcm_substream *pcm)
 +static unsigned int process_rx_data_blocks(struct amdtp_stream *s, __be32 *buffer,
 +					   unsigned int data_blocks, unsigned int *syt)
  {
  	struct amdtp_am824 *p = s->protocol;
++<<<<<<< HEAD
 +	struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
 +	unsigned int pcm_frames;
 +
 +	if (pcm) {
 +		write_pcm_s32(s, pcm, buffer, data_blocks);
 +		pcm_frames = data_blocks * p->frame_multiplier;
 +	} else {
 +		write_pcm_silence(s, buffer, data_blocks);
 +		pcm_frames = 0;
++=======
+ 	unsigned int pcm_frames = 0;
+ 
+ 	if (pcm) {
+ 		write_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks,
+ 			      pcm_frames);
+ 		pcm_frames = desc->data_blocks * p->frame_multiplier;
+ 	} else {
+ 		write_pcm_silence(s, desc->ctx_payload, desc->data_blocks);
++>>>>>>> 9fc90644cae9 (ALSA: firewire-lib: code refactoring for AM824 data block processing layer)
  	}
  
 -	if (p->midi_ports) {
 -		write_midi_messages(s, desc->ctx_payload, desc->data_blocks,
 -				    desc->data_block_counter);
 -	}
 +	if (p->midi_ports)
 +		write_midi_messages(s, buffer, data_blocks);
  
  	return pcm_frames;
  }
  
 -static unsigned int process_tx_data_blocks(struct amdtp_stream *s,
 -					   const struct pkt_desc *desc,
 -					   struct snd_pcm_substream *pcm)
 +static unsigned int process_tx_data_blocks(struct amdtp_stream *s, __be32 *buffer,
 +					   unsigned int data_blocks, unsigned int *syt)
  {
  	struct amdtp_am824 *p = s->protocol;
++<<<<<<< HEAD
 +	struct snd_pcm_substream *pcm = READ_ONCE(s->pcm);
 +	unsigned int pcm_frames;
 +
 +	if (pcm) {
 +		read_pcm_s32(s, pcm, buffer, data_blocks);
 +		pcm_frames = data_blocks * p->frame_multiplier;
 +	} else {
 +		pcm_frames = 0;
++=======
+ 	unsigned int pcm_frames = 0;
+ 
+ 	if (pcm) {
+ 		read_pcm_s32(s, pcm, desc->ctx_payload, desc->data_blocks,
+ 			     pcm_frames);
+ 		pcm_frames = desc->data_blocks * p->frame_multiplier;
++>>>>>>> 9fc90644cae9 (ALSA: firewire-lib: code refactoring for AM824 data block processing layer)
  	}
  
 -	if (p->midi_ports) {
 -		read_midi_messages(s, desc->ctx_payload, desc->data_blocks,
 -				   desc->data_block_counter);
 -	}
 +	if (p->midi_ports)
 +		read_midi_messages(s, buffer, data_blocks);
  
  	return pcm_frames;
  }
* Unmerged path sound/firewire/amdtp-am824.c
