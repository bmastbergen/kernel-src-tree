net: core: move pop MPLS functionality from OvS to core helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [net] core: move pop MPLS functionality from OvS to core helper (Ivan Vecera) [1737820]
Rebuild_FUZZ: 95.80%
commit-author John Hurley <john.hurley@netronome.com>
commit ed246cee09b9865145a2e1e34f63ec0e31dd83a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ed246cee.failed

Open vSwitch provides code to pop an MPLS header to a packet. In
preparation for supporting this in TC, move the pop code to an skb helper
that can be reused.

Remove the, now unused, update_ethertype static function from OvS.

	Signed-off-by: John Hurley <john.hurley@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Reviewed-by: Willem de Bruijn <willemb@google.com>
	Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ed246cee09b9865145a2e1e34f63ec0e31dd83a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/actions.c
diff --cc net/openvswitch/actions.c
index c45ff6be42d0,62715bb8d611..000000000000
--- a/net/openvswitch/actions.c
+++ b/net/openvswitch/actions.c
@@@ -169,17 -156,9 +169,23 @@@ static int clone_execute(struct datapat
  			 const struct nlattr *actions, int len,
  			 bool last, bool clone_flow_key);
  
++<<<<<<< HEAD
 +static void update_ethertype(struct sk_buff *skb, struct ethhdr *hdr,
 +			     __be16 ethertype)
 +{
 +	if (skb->ip_summed == CHECKSUM_COMPLETE) {
 +		__be16 diff[] = { ~(hdr->h_proto), ethertype };
 +
 +		skb->csum = csum_partial((char *)diff, sizeof(diff), skb->csum);
 +	}
 +
 +	hdr->h_proto = ethertype;
 +}
++=======
+ static int do_execute_actions(struct datapath *dp, struct sk_buff *skb,
+ 			      struct sw_flow_key *key,
+ 			      const struct nlattr *attr, int len);
++>>>>>>> ed246cee09b9 (net: core: move pop MPLS functionality from OvS to core helper)
  
  static int push_mpls(struct sk_buff *skb, struct sw_flow_key *key,
  		     const struct ovs_action_push_mpls *mpls)
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 45ac9388e751..810457e53797 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -3408,6 +3408,7 @@ int __skb_vlan_pop(struct sk_buff *skb, u16 *vlan_tci);
 int skb_vlan_pop(struct sk_buff *skb);
 int skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci);
 int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto);
+int skb_mpls_pop(struct sk_buff *skb, __be16 next_proto);
 struct sk_buff *pskb_extract(struct sk_buff *skb, int off, int to_copy,
 			     gfp_t gfp);
 
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 20259cd3ce3e..8096e10a28f0 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -5308,6 +5308,48 @@ int skb_mpls_push(struct sk_buff *skb, __be32 mpls_lse, __be16 mpls_proto)
 }
 EXPORT_SYMBOL_GPL(skb_mpls_push);
 
+/**
+ * skb_mpls_pop() - pop the outermost MPLS header
+ *
+ * @skb: buffer
+ * @next_proto: ethertype of header after popped MPLS header
+ *
+ * Expects skb->data at mac header.
+ *
+ * Returns 0 on success, -errno otherwise.
+ */
+int skb_mpls_pop(struct sk_buff *skb, __be16 next_proto)
+{
+	int err;
+
+	if (unlikely(!eth_p_mpls(skb->protocol)))
+		return -EINVAL;
+
+	err = skb_ensure_writable(skb, skb->mac_len + MPLS_HLEN);
+	if (unlikely(err))
+		return err;
+
+	skb_postpull_rcsum(skb, mpls_hdr(skb), MPLS_HLEN);
+	memmove(skb_mac_header(skb) + MPLS_HLEN, skb_mac_header(skb),
+		skb->mac_len);
+
+	__skb_pull(skb, MPLS_HLEN);
+	skb_reset_mac_header(skb);
+	skb_set_network_header(skb, skb->mac_len);
+
+	if (skb->dev && skb->dev->type == ARPHRD_ETHER) {
+		struct ethhdr *hdr;
+
+		/* use mpls_hdr() to get ethertype to account for VLANs. */
+		hdr = (struct ethhdr *)((void *)mpls_hdr(skb) - ETH_HLEN);
+		skb_mod_eth_type(skb, hdr, next_proto);
+	}
+	skb->protocol = next_proto;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(skb_mpls_pop);
+
 /**
  * alloc_skb_with_frags - allocate skb with page frags
  *
* Unmerged path net/openvswitch/actions.c
