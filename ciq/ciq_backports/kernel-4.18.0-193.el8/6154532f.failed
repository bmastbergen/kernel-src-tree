bnxt_en: Check new firmware capability to display extended stats.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] bnxt_en: Check new firmware capability to display extended stats (Jonathan Toppins) [1724766]
Rebuild_FUZZ: 99.22%
commit-author Vasundhara Volam <vasundhara-v.volam@broadcom.com>
commit 6154532fe8fe4e5ec5ffb1a71f587015973f8753
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/6154532f.failed

Newer firmware now advertises the capability for extended stats
support.  Check the new capability in addition to the existing
version check.

	Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6154532fe8fe4e5ec5ffb1a71f587015973f8753)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.h
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index ba84c87ec7b3,4e0fec287259..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -3446,56 -3446,68 +3446,72 @@@ static int bnxt_alloc_stats(struct bnx
  		cpr->hw_stats_ctx_id = INVALID_STATS_CTX_ID;
  	}
  
 -	if (BNXT_VF(bp) || bp->chip_num == CHIP_NUM_58700)
 -		return 0;
 +	if (BNXT_PF(bp) && bp->chip_num != CHIP_NUM_58700) {
 +		if (bp->hw_rx_port_stats)
 +			goto alloc_ext_stats;
  
 -	if (bp->hw_rx_port_stats)
 -		goto alloc_ext_stats;
 +		bp->hw_port_stats_size = sizeof(struct rx_port_stats) +
 +					 sizeof(struct tx_port_stats) + 1024;
  
 -	bp->hw_port_stats_size = sizeof(struct rx_port_stats) +
 -				 sizeof(struct tx_port_stats) + 1024;
 -
 -	bp->hw_rx_port_stats =
 -		dma_alloc_coherent(&pdev->dev, bp->hw_port_stats_size,
 -				   &bp->hw_rx_port_stats_map,
 -				   GFP_KERNEL);
 -	if (!bp->hw_rx_port_stats)
 -		return -ENOMEM;
 +		bp->hw_rx_port_stats =
 +			dma_alloc_coherent(&pdev->dev, bp->hw_port_stats_size,
 +					   &bp->hw_rx_port_stats_map,
 +					   GFP_KERNEL);
 +		if (!bp->hw_rx_port_stats)
 +			return -ENOMEM;
  
 -	bp->hw_tx_port_stats = (void *)(bp->hw_rx_port_stats + 1) + 512;
 -	bp->hw_tx_port_stats_map = bp->hw_rx_port_stats_map +
 -				   sizeof(struct rx_port_stats) + 512;
 -	bp->flags |= BNXT_FLAG_PORT_STATS;
 +		bp->hw_tx_port_stats = (void *)(bp->hw_rx_port_stats + 1) +
 +				       512;
 +		bp->hw_tx_port_stats_map = bp->hw_rx_port_stats_map +
 +					   sizeof(struct rx_port_stats) + 512;
 +		bp->flags |= BNXT_FLAG_PORT_STATS;
  
  alloc_ext_stats:
++<<<<<<< HEAD
 +		/* Display extended statistics only if FW supports it */
 +		if (bp->hwrm_spec_code < 0x10804 ||
 +		    bp->hwrm_spec_code == 0x10900)
++=======
+ 	/* Display extended statistics only if FW supports it */
+ 	if (bp->hwrm_spec_code < 0x10804 || bp->hwrm_spec_code == 0x10900)
+ 		if (!(bp->fw_cap & BNXT_FW_CAP_EXT_STATS_SUPPORTED))
++>>>>>>> 6154532fe8fe (bnxt_en: Check new firmware capability to display extended stats.)
  			return 0;
  
 -	if (bp->hw_rx_port_stats_ext)
 -		goto alloc_tx_ext_stats;
 +		if (bp->hw_rx_port_stats_ext)
 +			goto alloc_tx_ext_stats;
  
 -	bp->hw_rx_port_stats_ext =
 -		dma_alloc_coherent(&pdev->dev, sizeof(struct rx_port_stats_ext),
 -				   &bp->hw_rx_port_stats_ext_map, GFP_KERNEL);
 -	if (!bp->hw_rx_port_stats_ext)
 -		return 0;
 +		bp->hw_rx_port_stats_ext =
 +			dma_zalloc_coherent(&pdev->dev,
 +					    sizeof(struct rx_port_stats_ext),
 +					    &bp->hw_rx_port_stats_ext_map,
 +					    GFP_KERNEL);
 +		if (!bp->hw_rx_port_stats_ext)
 +			return 0;
  
  alloc_tx_ext_stats:
 -	if (bp->hw_tx_port_stats_ext)
 -		goto alloc_pcie_stats;
 +		if (bp->hw_tx_port_stats_ext)
 +			return 0;
  
++<<<<<<< HEAD
 +		if (bp->hwrm_spec_code >= 0x10902) {
 +			bp->hw_tx_port_stats_ext =
 +				dma_zalloc_coherent(&pdev->dev,
 +					    sizeof(struct tx_port_stats_ext),
 +					    &bp->hw_tx_port_stats_ext_map,
 +					    GFP_KERNEL);
 +		}
 +		bp->flags |= BNXT_FLAG_PORT_STATS_EXT;
++=======
+ 	if (bp->hwrm_spec_code >= 0x10902 ||
+ 	    (bp->fw_cap & BNXT_FW_CAP_EXT_STATS_SUPPORTED)) {
+ 		bp->hw_tx_port_stats_ext =
+ 			dma_alloc_coherent(&pdev->dev,
+ 					   sizeof(struct tx_port_stats_ext),
+ 					   &bp->hw_tx_port_stats_ext_map,
+ 					   GFP_KERNEL);
++>>>>>>> 6154532fe8fe (bnxt_en: Check new firmware capability to display extended stats.)
  	}
 -	bp->flags |= BNXT_FLAG_PORT_STATS_EXT;
 -
 -alloc_pcie_stats:
 -	if (bp->hw_pcie_stats ||
 -	    !(bp->fw_cap & BNXT_FW_CAP_PCIE_STATS_SUPPORTED))
 -		return 0;
 -
 -	bp->hw_pcie_stats =
 -		dma_alloc_coherent(&pdev->dev, sizeof(struct pcie_ctx_hw_stats),
 -				   &bp->hw_pcie_stats_map, GFP_KERNEL);
 -	if (!bp->hw_pcie_stats)
 -		return 0;
 -
 -	bp->flags |= BNXT_FLAG_PCIE_STATS;
  	return 0;
  }
  
@@@ -6525,6 -6526,10 +6541,13 @@@ static int __bnxt_hwrm_func_qcaps(struc
  		bp->flags |= BNXT_FLAG_ROCEV1_CAP;
  	if (flags & FUNC_QCAPS_RESP_FLAGS_ROCE_V2_SUPPORTED)
  		bp->flags |= BNXT_FLAG_ROCEV2_CAP;
++<<<<<<< HEAD
++=======
+ 	if (flags & FUNC_QCAPS_RESP_FLAGS_PCIE_STATS_SUPPORTED)
+ 		bp->fw_cap |= BNXT_FW_CAP_PCIE_STATS_SUPPORTED;
+ 	if (flags & FUNC_QCAPS_RESP_FLAGS_EXT_STATS_SUPPORTED)
+ 		bp->fw_cap |= BNXT_FW_CAP_EXT_STATS_SUPPORTED;
++>>>>>>> 6154532fe8fe (bnxt_en: Check new firmware capability to display extended stats.)
  
  	bp->tx_push_thresh = 0;
  	if (flags & FUNC_QCAPS_RESP_FLAGS_PUSH_MODE_SUPPORTED)
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.h
index 61c1e7ccd7d0,647f7c01c50b..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@@ -1482,6 -1481,8 +1482,11 @@@ struct bnxt 
  	#define BNXT_FW_CAP_KONG_MB_CHNL		0x00000080
  	#define BNXT_FW_CAP_OVS_64BIT_HANDLE		0x00000400
  	#define BNXT_FW_CAP_TRUSTED_VF			0x00000800
++<<<<<<< HEAD
++=======
+ 	#define BNXT_FW_CAP_PCIE_STATS_SUPPORTED	0x00020000
+ 	#define BNXT_FW_CAP_EXT_STATS_SUPPORTED		0x00040000
++>>>>>>> 6154532fe8fe (bnxt_en: Check new firmware capability to display extended stats.)
  
  #define BNXT_NEW_RM(bp)		((bp)->fw_cap & BNXT_FW_CAP_NEW_RM)
  	u32			hwrm_spec_code;
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.h
