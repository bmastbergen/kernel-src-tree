ASoC: Intel: Skylake: Remove MCPS available check

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: Intel: Skylake: Remove MCPS available check (Jaroslav Kysela) [1738610]
Rebuild_FUZZ: 94.23%
commit-author Cezary Rojewski <cezary.rojewski@intel.com>
commit f2a167ca681d21aa46f127032cc005879c328823
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/f2a167ca.failed

The entire logic for MCPS calculation and DSP scheduling is found
within DSP firmware. Currently driver implements simplistic, inaccurate
logic itself which may prevent pipeline creation despite firmware being
completely fine its parameters.

Remove that logic and leave the MCPS calculation to DSP alone.

	Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
Link: https://lore.kernel.org/r/20190723145854.8527-4-cezary.rojewski@intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f2a167ca681d21aa46f127032cc005879c328823)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/skylake/skl-topology.c
diff --cc sound/soc/intel/skylake/skl-topology.c
index c1a64d6597c2,2af311150543..000000000000
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@@ -146,55 -143,6 +146,58 @@@ static void skl_tplg_alloc_pipe_mem(str
  }
  
  /*
++<<<<<<< HEAD
 + * Pipeline needs needs DSP CPU resources for computation, this is
 + * quantified in MCPS (Million Clocks Per Second) required for module/pipe
 + *
 + * Each pipelines needs mcps to be allocated. Check if we have mcps for this
 + * pipe.
 + */
 +
 +static bool skl_is_pipe_mcps_avail(struct skl *skl,
 +				struct skl_module_cfg *mconfig)
 +{
 +	struct skl_sst *ctx = skl->skl_sst;
 +	u8 res_idx = mconfig->res_idx;
 +	struct skl_module_res *res = &mconfig->module->resources[res_idx];
 +
 +	if (skl->resource.mcps + res->cps > skl->resource.max_mcps) {
 +		dev_err(ctx->dev,
 +			"%s: module_id %d instance %d\n", __func__,
 +			mconfig->id.module_id, mconfig->id.instance_id);
 +		dev_err(ctx->dev,
 +			"exceeds ppl mcps available %d > mem %d\n",
 +			skl->resource.max_mcps, skl->resource.mcps);
 +		return false;
 +	} else {
 +		return true;
 +	}
 +}
 +
 +static void skl_tplg_alloc_pipe_mcps(struct skl *skl,
 +				struct skl_module_cfg *mconfig)
 +{
 +	u8 res_idx = mconfig->res_idx;
 +	struct skl_module_res *res = &mconfig->module->resources[res_idx];
 +
 +	skl->resource.mcps += res->cps;
 +}
 +
 +/*
 + * Free the mcps when tearing down
 + */
 +static void
 +skl_tplg_free_pipe_mcps(struct skl *skl, struct skl_module_cfg *mconfig)
 +{
 +	u8 res_idx = mconfig->res_idx;
 +	struct skl_module_res *res = &mconfig->module->resources[res_idx];
 +
 +	skl->resource.mcps -= res->cps;
 +}
 +
 +/*
++=======
++>>>>>>> f2a167ca681d (ASoC: Intel: Skylake: Remove MCPS available check)
   * Free the memory when tearing down
   */
  static void
@@@ -589,12 -534,8 +592,17 @@@ skl_tplg_init_pipe_modules(struct skl *
  		mconfig->fmt_idx = mconfig->mod_cfg[cfg_idx].fmt_idx;
  		mconfig->res_idx = mconfig->mod_cfg[cfg_idx].res_idx;
  
++<<<<<<< HEAD
 +		/* check resource available */
 +		if (!skl_is_pipe_mcps_avail(skl, mconfig))
 +			return -ENOMEM;
 +
 +		if (mconfig->module->loadable && ctx->dsp->fw_ops.load_mod) {
 +			ret = ctx->dsp->fw_ops.load_mod(ctx->dsp,
++=======
+ 		if (mconfig->module->loadable && skl->dsp->fw_ops.load_mod) {
+ 			ret = skl->dsp->fw_ops.load_mod(skl->dsp,
++>>>>>>> f2a167ca681d (ASoC: Intel: Skylake: Remove MCPS available check)
  				mconfig->id.module_id, mconfig->guid);
  			if (ret < 0)
  				return ret;
@@@ -629,13 -570,13 +637,18 @@@
  			return ret;
  		}
  
 -		ret = skl_init_module(skl, mconfig);
 +		ret = skl_init_module(ctx, mconfig);
  		if (ret < 0) {
 -			skl_put_pvt_id(skl, uuid_mod, &mconfig->id.pvt_id);
 +			skl_put_pvt_id(ctx, uuid_mod, &mconfig->id.pvt_id);
  			goto err;
  		}
++<<<<<<< HEAD
 +		skl_tplg_alloc_pipe_mcps(skl, mconfig);
 +		ret = skl_tplg_set_module_params(w, ctx);
++=======
+ 
+ 		ret = skl_tplg_set_module_params(w, skl);
++>>>>>>> f2a167ca681d (ASoC: Intel: Skylake: Remove MCPS available check)
  		if (ret < 0)
  			goto err;
  	}
@@@ -2994,10 -2922,9 +2997,9 @@@ void skl_cleanup_resources(struct skl *
  		return;
  
  	skl->resource.mem = 0;
- 	skl->resource.mcps = 0;
  
  	list_for_each_entry(w, &card->widgets, list) {
 -		if (is_skl_dsp_widget_type(w, skl->dev) && w->priv != NULL)
 +		if (is_skl_dsp_widget_type(w, ctx->dev) && w->priv != NULL)
  			skl_clear_pin_config(soc_component, w);
  	}
  
* Unmerged path sound/soc/intel/skylake/skl-topology.c
diff --git a/sound/soc/intel/skylake/skl.h b/sound/soc/intel/skylake/skl.h
index 1418dc74dcbe..12be42515917 100644
--- a/sound/soc/intel/skylake/skl.h
+++ b/sound/soc/intel/skylake/skl.h
@@ -39,9 +39,7 @@
 #define AZX_REG_VS_EM2_L1SEN		BIT(13)
 
 struct skl_dsp_resource {
-	u32 max_mcps;
 	u32 max_mem;
-	u32 mcps;
 	u32 mem;
 };
 
