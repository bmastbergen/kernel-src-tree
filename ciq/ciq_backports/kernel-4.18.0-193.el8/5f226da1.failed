iommu/amd: Use dev_printk() when possible

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [iommu] amd: Use dev_printk() when possible (Jerry Snitselaar) [1742234]
Rebuild_FUZZ: 92.11%
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit 5f226da1b1d7065bd22605fd889ac96eb5f3a7db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/5f226da1.failed

Use dev_printk() when possible so the IOMMU messages are more consistent
with other messages related to the device.

	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 5f226da1b1d7065bd22605fd889ac96eb5f3a7db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
#	drivers/iommu/amd_iommu_init.c
diff --cc drivers/iommu/amd_iommu.c
index fbf6928d44be,c0dc7c33335e..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -3,8 -2,24 +3,14 @@@
   * Copyright (C) 2007-2010 Advanced Micro Devices, Inc.
   * Author: Joerg Roedel <jroedel@suse.de>
   *         Leo Duran <leo.duran@amd.com>
 - *
 - * This program is free software; you can redistribute it and/or modify it
 - * under the terms of the GNU General Public License version 2 as published
 - * by the Free Software Foundation.
 - *
 - * This program is distributed in the hope that it will be useful,
 - * but WITHOUT ANY WARRANTY; without even the implied warranty of
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 - * GNU General Public License for more details.
 - *
 - * You should have received a copy of the GNU General Public License
 - * along with this program; if not, write to the Free Software
 - * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   */
  
++<<<<<<< HEAD
++=======
+ #define pr_fmt(fmt)     "AMD-Vi: " fmt
+ #define dev_fmt(fmt)    pr_fmt(fmt)
+ 
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  #include <linux/ratelimit.h>
  #include <linux/pci.h>
  #include <linux/acpi.h>
@@@ -269,10 -280,10 +275,15 @@@ static u16 get_alias(struct device *dev
  		return pci_alias;
  	}
  
++<<<<<<< HEAD
 +	pr_info("AMD-Vi: Using IVRS reported alias %02x:%02x.%d "
 +		"for device %s[%04x:%04x], kernel reported alias "
++=======
+ 	pci_info(pdev, "Using IVRS reported alias %02x:%02x.%d "
+ 		"for device [%04x:%04x], kernel reported alias "
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  		"%02x:%02x.%d\n", PCI_BUS_NUM(ivrs_alias), PCI_SLOT(ivrs_alias),
- 		PCI_FUNC(ivrs_alias), dev_name(dev), pdev->vendor, pdev->device,
+ 		PCI_FUNC(ivrs_alias), pdev->vendor, pdev->device,
  		PCI_BUS_NUM(pci_alias), PCI_SLOT(pci_alias),
  		PCI_FUNC(pci_alias));
  
@@@ -283,9 -294,8 +294,14 @@@
  	if (pci_alias == devid &&
  	    PCI_BUS_NUM(ivrs_alias) == pdev->bus->number) {
  		pci_add_dma_alias(pdev, ivrs_alias & 0xff);
++<<<<<<< HEAD
 +		pr_info("AMD-Vi: Added PCI DMA alias %02x.%d for %s\n",
 +			PCI_SLOT(ivrs_alias), PCI_FUNC(ivrs_alias),
 +			dev_name(dev));
++=======
+ 		pci_info(pdev, "Added PCI DMA alias %02x.%d\n",
+ 			PCI_SLOT(ivrs_alias), PCI_FUNC(ivrs_alias));
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  	}
  
  	return ivrs_alias;
@@@ -535,10 -545,10 +551,14 @@@ static void amd_iommu_report_page_fault
  		dev_data = get_dev_data(&pdev->dev);
  
  	if (dev_data && __ratelimit(&dev_data->rs)) {
++<<<<<<< HEAD
 +		dev_err(&pdev->dev, "Event logged [IO_PAGE_FAULT domain=0x%04x address=0x%016llx flags=0x%04x]\n",
++=======
+ 		pci_err(pdev, "Event logged [IO_PAGE_FAULT domain=0x%04x address=0x%llx flags=0x%04x]\n",
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  			domain_id, address, flags);
  	} else if (printk_ratelimit()) {
 -		pr_err("Event logged [IO_PAGE_FAULT device=%02x:%02x.%x domain=0x%04x address=0x%llx flags=0x%04x]\n",
 +		pr_err("AMD-Vi: Event logged [IO_PAGE_FAULT device=%02x:%02x.%x domain=0x%04x address=0x%016llx flags=0x%04x]\n",
  			PCI_BUS_NUM(devid), PCI_SLOT(devid), PCI_FUNC(devid),
  			domain_id, address, flags);
  	}
@@@ -3168,15 -3164,12 +3187,14 @@@ static void amd_iommu_get_resv_regions(
  			prot |= IOMMU_READ;
  		if (entry->prot & IOMMU_PROT_IW)
  			prot |= IOMMU_WRITE;
 +		if (entry->prot & IOMMU_UNITY_MAP_FLAG_EXCL_RANGE)
 +			/* Exclusion range */
 +			type = IOMMU_RESV_RESERVED;
  
  		region = iommu_alloc_resv_region(entry->address_start,
 -						 length, prot,
 -						 IOMMU_RESV_DIRECT);
 +						 length, prot, type);
  		if (!region) {
- 			pr_err("Out of memory allocating dm-regions for %s\n",
- 				dev_name(dev));
+ 			dev_err(dev, "Out of memory allocating dm-regions\n");
  			return;
  		}
  		list_add_tail(&region->list, head);
diff --cc drivers/iommu/amd_iommu_init.c
index 2b560f4bbe17,f773792d77fd..000000000000
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@@ -3,8 -2,24 +3,14 @@@
   * Copyright (C) 2007-2010 Advanced Micro Devices, Inc.
   * Author: Joerg Roedel <jroedel@suse.de>
   *         Leo Duran <leo.duran@amd.com>
 - *
 - * This program is free software; you can redistribute it and/or modify it
 - * under the terms of the GNU General Public License version 2 as published
 - * by the Free Software Foundation.
 - *
 - * This program is distributed in the hope that it will be useful,
 - * but WITHOUT ANY WARRANTY; without even the implied warranty of
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 - * GNU General Public License for more details.
 - *
 - * You should have received a copy of the GNU General Public License
 - * along with this program; if not, write to the Free Software
 - * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   */
  
++<<<<<<< HEAD
++=======
+ #define pr_fmt(fmt)     "AMD-Vi: " fmt
+ #define dev_fmt(fmt)    pr_fmt(fmt)
+ 
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  #include <linux/pci.h>
  #include <linux/acpi.h>
  #include <linux/list.h>
@@@ -1445,8 -1458,7 +1451,12 @@@ static void amd_iommu_erratum_746_worka
  	pci_write_config_dword(iommu->dev, 0xf0, 0x90 | (1 << 8));
  
  	pci_write_config_dword(iommu->dev, 0xf4, value | 0x4);
++<<<<<<< HEAD
 +	pr_info("AMD-Vi: Applying erratum 746 workaround for IOMMU at %s\n",
 +		dev_name(&iommu->dev->dev));
++=======
+ 	pci_info(iommu->dev, "Applying erratum 746 workaround\n");
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  
  	/* Clear the enable writing bit */
  	pci_write_config_dword(iommu->dev, 0xf0, 0x90);
@@@ -1476,8 -1488,7 +1486,12 @@@ static void amd_iommu_ats_write_check_w
  	/* Set L2_DEBUG_3[AtsIgnoreIWDis] = 1 */
  	iommu_write_l2(iommu, 0x47, value | BIT(0));
  
++<<<<<<< HEAD
 +	pr_info("AMD-Vi: Applying ATS write check workaround for IOMMU at %s\n",
 +		dev_name(&iommu->dev->dev));
++=======
+ 	pci_info(iommu->dev, "Applying ATS write check workaround\n");
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  }
  
  /*
@@@ -1664,12 -1676,12 +1679,20 @@@ static void init_iommu_perf_ctr(struct 
  	if ((iommu_pc_get_set_reg(iommu, 0, 0, 0, &val, true)) ||
  	    (iommu_pc_get_set_reg(iommu, 0, 0, 0, &val2, false)) ||
  	    (val != val2)) {
++<<<<<<< HEAD
 +		pr_err("AMD-Vi: Unable to write to IOMMU perf counter.\n");
++=======
+ 		pci_err(pdev, "Unable to write to IOMMU perf counter.\n");
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  		amd_iommu_pc_present = false;
  		return;
  	}
  
++<<<<<<< HEAD
 +	pr_info("AMD-Vi: IOMMU performance counters supported\n");
++=======
+ 	pci_info(pdev, "IOMMU performance counters supported\n");
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  
  	val = readl(iommu->mmio_base + MMIO_CNTR_CONF_OFFSET);
  	iommu->max_banks = (u8) ((val >> 12) & 0x3f);
@@@ -1828,14 -1840,14 +1851,23 @@@ static void print_iommu_info(void
  	struct amd_iommu *iommu;
  
  	for_each_iommu(iommu) {
+ 		struct pci_dev *pdev = iommu->dev;
  		int i;
  
++<<<<<<< HEAD
 +		pr_info("AMD-Vi: Found IOMMU at %s cap 0x%hx\n",
 +			dev_name(&iommu->dev->dev), iommu->cap_ptr);
 +
 +		if (iommu->cap & (1 << IOMMU_CAP_EFR)) {
 +			pr_info("AMD-Vi: Extended features (%#llx):\n",
 +				iommu->features);
++=======
+ 		pci_info(pdev, "Found IOMMU cap 0x%hx\n", iommu->cap_ptr);
+ 
+ 		if (iommu->cap & (1 << IOMMU_CAP_EFR)) {
+ 			pci_info(pdev, "Extended features (%#llx):\n",
+ 				 iommu->features);
++>>>>>>> 5f226da1b1d7 (iommu/amd: Use dev_printk() when possible)
  			for (i = 0; i < ARRAY_SIZE(feat_str); ++i) {
  				if (iommu_feature(iommu, (1ULL << i)))
  					pr_cont(" %s", feat_str[i]);
* Unmerged path drivers/iommu/amd_iommu.c
* Unmerged path drivers/iommu/amd_iommu_init.c
