NFSv4.1: Only reap expired delegations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit ad11408970df79d5f481aa9964e91f183133424c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ad114089.failed

Fix nfs_reap_expired_delegations() to ensure that we only reap delegations
that are actually expired, rather than triggering on random errors.

Fixes: 45870d6909d5a ("NFSv4.1: Test delegation stateids when server...")
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit ad11408970df79d5f481aa9964e91f183133424c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/delegation.c
diff --cc fs/nfs/delegation.c
index a6489575d5cb,071b90a45933..000000000000
--- a/fs/nfs/delegation.c
+++ b/fs/nfs/delegation.c
@@@ -1036,6 -1035,34 +1036,37 @@@ void nfs_mark_test_expired_all_delegati
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * nfs_test_expired_all_delegations - test all delegations for a client
+  * @clp: nfs_client to process
+  *
+  * Helper for handling "recallable state revoked" status from server.
+  */
+ void nfs_test_expired_all_delegations(struct nfs_client *clp)
+ {
+ 	nfs_mark_test_expired_all_delegations(clp);
+ 	nfs4_schedule_state_manager(clp);
+ }
+ 
+ static void
+ nfs_delegation_test_free_expired(struct inode *inode,
+ 		nfs4_stateid *stateid,
+ 		const struct cred *cred)
+ {
+ 	struct nfs_server *server = NFS_SERVER(inode);
+ 	const struct nfs4_minor_version_ops *ops = server->nfs_client->cl_mvops;
+ 	int status;
+ 
+ 	if (!cred)
+ 		return;
+ 	status = ops->test_and_free_expired(server, stateid, cred);
+ 	if (status == -NFS4ERR_EXPIRED || status == -NFS4ERR_BAD_STATEID)
+ 		nfs_remove_bad_delegation(inode, stateid);
+ }
+ 
+ /**
++>>>>>>> ad11408970df (NFSv4.1: Only reap expired delegations)
   * nfs_reap_expired_delegations - reap expired delegations
   * @clp: nfs_client to process
   *
@@@ -1077,12 -1103,8 +1107,17 @@@ restart
  			nfs4_stateid_copy(&stateid, &delegation->stateid);
  			clear_bit(NFS_DELEGATION_TEST_EXPIRED, &delegation->flags);
  			rcu_read_unlock();
++<<<<<<< HEAD
 +			if (cred != NULL &&
 +			    ops->test_and_free_expired(server, &stateid, cred) < 0) {
 +				nfs_revoke_delegation(inode, &stateid);
 +				nfs_inode_find_state_and_recover(inode, &stateid);
 +			}
 +			put_rpccred(cred);
++=======
+ 			nfs_delegation_test_free_expired(inode, &stateid, cred);
+ 			put_cred(cred);
++>>>>>>> ad11408970df (NFSv4.1: Only reap expired delegations)
  			if (nfs4_server_rebooted(clp)) {
  				nfs_inode_mark_test_expired_delegation(server,inode);
  				iput(inode);
* Unmerged path fs/nfs/delegation.c
