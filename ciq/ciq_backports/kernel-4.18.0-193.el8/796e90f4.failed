cfg80211: add support for parsing OBBS_PD attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author John Crispin <john@phrozen.org>
commit 796e90f42b7e52cf1c88e978e1d5ee69c102d85d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/796e90f4.failed

Add the data structure, policy and parsing code allowing userland to send
the OBSS PD information into the kernel.

	Signed-off-by: John Crispin <john@phrozen.org>
Link: https://lore.kernel.org/r/20190730163701.18836-2-john@phrozen.org
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 796e90f42b7e52cf1c88e978e1d5ee69c102d85d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/uapi/linux/nl80211.h
index 4f370da7d4b6,822851d369ab..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2341,6 -2352,15 +2341,18 @@@ enum nl80211_commands 
   *	should be picking up the lowest tx power, either tx power per-interface
   *	or per-station.
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_ATTR_SAE_PASSWORD: attribute for passing SAE password material. It
+  *	is used with %NL80211_CMD_CONNECT to provide password for offloading
+  *	SAE authentication for WPA3-Personal networks.
+  *
+  * @NL80211_ATTR_TWT_RESPONDER: Enable target wait time responder support.
+  *
+  * @NL80211_ATTR_HE_OBSS_PD: nested attribute for OBSS Packet Detection
+  *	functionality.
+  *
++>>>>>>> 796e90f42b7e (cfg80211: add support for parsing OBBS_PD attributes)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -2794,6 -2814,12 +2806,15 @@@ enum nl80211_attrs 
  	NL80211_ATTR_STA_TX_POWER_SETTING,
  	NL80211_ATTR_STA_TX_POWER,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_SAE_PASSWORD,
+ 
+ 	NL80211_ATTR_TWT_RESPONDER,
+ 
+ 	NL80211_ATTR_HE_OBSS_PD,
+ 
++>>>>>>> 796e90f42b7e (cfg80211: add support for parsing OBBS_PD attributes)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
diff --cc net/wireless/nl80211.c
index fe7c655c8ec8,3006cfce7158..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -268,8 -280,15 +268,16 @@@ nl80211_pmsr_attr_policy[NL80211_PMSR_A
  	[NL80211_PMSR_ATTR_PEERS] =
  		NLA_POLICY_NESTED_ARRAY(nl80211_psmr_peer_attr_policy),
  };
 +#endif /* Not in RHEL */
  
+ static const struct nla_policy
+ he_obss_pd_policy[NL80211_HE_OBSS_PD_ATTR_MAX + 1] = {
+ 	[NL80211_HE_OBSS_PD_ATTR_MIN_OFFSET] =
+ 		NLA_POLICY_RANGE(NLA_U8, 1, 20),
+ 	[NL80211_HE_OBSS_PD_ATTR_MAX_OFFSET] =
+ 		NLA_POLICY_RANGE(NLA_U8, 1, 20),
+ };
+ 
  const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
  	[NL80211_ATTR_WIPHY] = { .type = NLA_U32 },
  	[NL80211_ATTR_WIPHY_NAME] = { .type = NLA_NUL_STRING,
@@@ -510,7 -579,10 +518,14 @@@
  	[NL80211_ATTR_PEER_MEASUREMENTS] =
  		NLA_POLICY_NESTED(nl80211_pmsr_attr_policy),
  	[NL80211_ATTR_AIRTIME_WEIGHT] = NLA_POLICY_MIN(NLA_U16, 1),
++<<<<<<< HEAD
 +#endif /* Not in RHEL */
++=======
+ 	[NL80211_ATTR_SAE_PASSWORD] = { .type = NLA_BINARY,
+ 					.len = SAE_PASSWORD_MAX_LEN },
+ 	[NL80211_ATTR_TWT_RESPONDER] = { .type = NLA_FLAG },
+ 	[NL80211_ATTR_HE_OBSS_PD] = NLA_POLICY_NESTED(he_obss_pd_policy),
++>>>>>>> 796e90f42b7e (cfg80211: add support for parsing OBBS_PD attributes)
  };
  
  /* policy for the key attributes */
@@@ -4621,6 -4723,17 +4664,20 @@@ static int nl80211_start_ap(struct sk_b
  			return PTR_ERR(params.acl);
  	}
  
++<<<<<<< HEAD
++=======
+ 	params.twt_responder =
+ 		    nla_get_flag(info->attrs[NL80211_ATTR_TWT_RESPONDER]);
+ 
+ 	if (info->attrs[NL80211_ATTR_HE_OBSS_PD]) {
+ 		err = nl80211_parse_he_obss_pd(
+ 					info->attrs[NL80211_ATTR_HE_OBSS_PD],
+ 					&params.he_obss_pd);
+ 		if (err)
+ 			return err;
+ 	}
+ 
++>>>>>>> 796e90f42b7e (cfg80211: add support for parsing OBBS_PD attributes)
  	nl80211_calculate_ap_params(&params);
  
  	if (info->attrs[NL80211_ATTR_EXTERNAL_AUTH_SUPPORT])
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 4bfd406c4316..74689d038801 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -246,6 +246,19 @@ struct ieee80211_rate {
 	u16 hw_value, hw_value_short;
 };
 
+/**
+ * struct ieee80211_he_obss_pd - AP settings for spatial reuse
+ *
+ * @enable: is the feature enabled.
+ * @min_offset: minimal tx power offset an associated station shall use
+ * @max_offset: maximum tx power offset an associated station shall use
+ */
+struct ieee80211_he_obss_pd {
+	bool enable;
+	u8 min_offset;
+	u8 max_offset;
+};
+
 /**
  * struct ieee80211_sta_ht_cap - STA's HT capabilities
  *
@@ -888,6 +901,7 @@ enum cfg80211_ap_settings_flags {
  * @ht_required: stations must support HT
  * @vht_required: stations must support VHT
  * @flags: flags, as defined in enum cfg80211_ap_settings_flags
+ * @he_obss_pd: OBSS Packet Detection settings
  */
 struct cfg80211_ap_settings {
 	struct cfg80211_chan_def chandef;
@@ -914,6 +928,7 @@ struct cfg80211_ap_settings {
 	const struct ieee80211_he_cap_elem *he_cap;
 	bool ht_required, vht_required;
 	u32 flags;
+	struct ieee80211_he_obss_pd he_obss_pd;
 };
 
 /**
* Unmerged path include/uapi/linux/nl80211.h
* Unmerged path net/wireless/nl80211.c
