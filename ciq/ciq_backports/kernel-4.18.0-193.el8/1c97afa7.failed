libnvdimm/pmem: Advance namespace seed for specific probe errors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
commit 1c97afa714098aab2ca588cc654f8ff67dd46dcb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1c97afa7.failed

In order to support marking namespaces with unsupported feature/versions
disabled, nvdimm core should advance the namespace seed on these
probe failures. Otherwise, these failed namespaces will be considered a
seed namespace and will be wrongly used while creating new namespaces.

Add -EOPNOTSUPP as return from pmem probe callback to indicate a namespace
initialization failures due to pfn superblock feature/version mismatch.

	Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Link: https://lore.kernel.org/r/20190905154603.10349-3-aneesh.kumar@linux.ibm.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 1c97afa714098aab2ca588cc654f8ff67dd46dcb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/bus.c
diff --cc drivers/nvdimm/bus.c
index 3a2ce74a07a4,75a58a6e9615..000000000000
--- a/drivers/nvdimm/bus.c
+++ b/drivers/nvdimm/bus.c
@@@ -91,11 -91,13 +91,19 @@@ static int nvdimm_bus_probe(struct devi
  			dev->driver->name, dev_name(dev));
  
  	nvdimm_bus_probe_start(nvdimm_bus);
 -	debug_nvdimm_lock(dev);
  	rc = nd_drv->probe(dev);
++<<<<<<< HEAD
 +	if (rc == 0)
 +		nd_region_probe_success(nvdimm_bus, dev);
 +	else
 +		nd_region_disable(nvdimm_bus, dev);
++=======
+ 	debug_nvdimm_unlock(dev);
+ 
+ 	if ((rc == 0 || rc == -EOPNOTSUPP) &&
+ 			dev->parent && is_nd_region(dev->parent))
+ 		nd_region_advance_seeds(to_nd_region(dev->parent), dev);
++>>>>>>> 1c97afa71409 (libnvdimm/pmem: Advance namespace seed for specific probe errors)
  	nvdimm_bus_probe_end(nvdimm_bus);
  
  	dev_dbg(&nvdimm_bus->dev, "END: %s.probe(%s) = %d\n", dev->driver->name,
* Unmerged path drivers/nvdimm/bus.c
diff --git a/drivers/nvdimm/pmem.c b/drivers/nvdimm/pmem.c
index d9d845077b8b..a74767a7dcb2 100644
--- a/drivers/nvdimm/pmem.c
+++ b/drivers/nvdimm/pmem.c
@@ -496,6 +496,7 @@ static int pmem_attach_disk(struct device *dev,
 
 static int nd_pmem_probe(struct device *dev)
 {
+	int ret;
 	struct nd_namespace_common *ndns;
 
 	ndns = nvdimm_namespace_common_probe(dev);
@@ -511,12 +512,32 @@ static int nd_pmem_probe(struct device *dev)
 	if (is_nd_pfn(dev))
 		return pmem_attach_disk(dev, ndns);
 
-	/* if we find a valid info-block we'll come back as that personality */
-	if (nd_btt_probe(dev, ndns) == 0 || nd_pfn_probe(dev, ndns) == 0
-			|| nd_dax_probe(dev, ndns) == 0)
+	ret = nd_btt_probe(dev, ndns);
+	if (ret == 0)
 		return -ENXIO;
 
-	/* ...otherwise we're just a raw pmem device */
+	/*
+	 * We have two failure conditions here, there is no
+	 * info reserver block or we found a valid info reserve block
+	 * but failed to initialize the pfn superblock.
+	 *
+	 * For the first case consider namespace as a raw pmem namespace
+	 * and attach a disk.
+	 *
+	 * For the latter, consider this a success and advance the namespace
+	 * seed.
+	 */
+	ret = nd_pfn_probe(dev, ndns);
+	if (ret == 0)
+		return -ENXIO;
+	else if (ret == -EOPNOTSUPP)
+		return ret;
+
+	ret = nd_dax_probe(dev, ndns);
+	if (ret == 0)
+		return -ENXIO;
+	else if (ret == -EOPNOTSUPP)
+		return ret;
 	return pmem_attach_disk(dev, ndns);
 }
 
