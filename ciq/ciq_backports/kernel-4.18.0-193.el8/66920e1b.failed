rdma_rxe: Use netlink messages to add/delete links

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Steve Wise <swise@opengridcomputing.com>
commit 66920e1b25861d5bd99192489f6da7183529285e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/66920e1b.failed

Add support for the RDMA_NLDEV_CMD_NEWLINK/DELLINK messages which allow
dynamically adding new RXE links.  Deprecate the old module options for
now.

	Cc: Moni Shoua <monis@mellanox.com>
	Reviewed-by: Yanjun Zhu <yanjun.zhu@oracle.com>
	Signed-off-by: Steve Wise <swise@opengridcomputing.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 66920e1b25861d5bd99192489f6da7183529285e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe.c
#	drivers/infiniband/sw/rxe/rxe.h
#	drivers/infiniband/sw/rxe/rxe_net.c
#	drivers/infiniband/sw/rxe/rxe_net.h
#	drivers/infiniband/sw/rxe/rxe_sysfs.c
#	drivers/infiniband/sw/rxe/rxe_verbs.c
#	drivers/infiniband/sw/rxe/rxe_verbs.h
diff --cc drivers/infiniband/sw/rxe/rxe.c
index ce90da888b4b,a8c11b5e1e94..000000000000
--- a/drivers/infiniband/sw/rxe/rxe.c
+++ b/drivers/infiniband/sw/rxe/rxe.c
@@@ -320,25 -312,36 +321,56 @@@ int rxe_add(struct rxe_dev *rxe, unsign
  
  	rxe_set_mtu(rxe, mtu);
  
++<<<<<<< HEAD
 +	err = rxe_register_device(rxe);
 +	if (err)
 +		goto err1;
 +
 +	return 0;
 +
 +err1:
 +	rxe_dev_put(rxe);
 +	return err;
 +}
 +
 +/* called by the ifc layer to remove a device */
 +void rxe_remove(struct rxe_dev *rxe)
 +{
 +	rxe_unregister_device(rxe);
 +
 +	rxe_dev_put(rxe);
++=======
+ 	return rxe_register_device(rxe, ibdev_name);
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  }
  
+ static int rxe_newlink(const char *ibdev_name, struct net_device *ndev)
+ {
+ 	struct rxe_dev *exists;
+ 	int err = 0;
+ 
+ 	exists = rxe_get_dev_from_net(ndev);
+ 	if (exists) {
+ 		ib_device_put(&exists->ib_dev);
+ 		pr_err("already configured on %s\n", ndev->name);
+ 		err = -EEXIST;
+ 		goto err;
+ 	}
+ 
+ 	err = rxe_net_add(ibdev_name, ndev);
+ 	if (err) {
+ 		pr_err("failed to add %s\n", ndev->name);
+ 		goto err;
+ 	}
+ err:
+ 	return err;
+ }
+ 
+ static struct rdma_link_ops rxe_link_ops = {
+ 	.type = "rxe",
+ 	.newlink = rxe_newlink,
+ };
+ 
  static int __init rxe_module_init(void)
  {
  	int err;
@@@ -362,7 -364,8 +395,12 @@@
  
  static void __exit rxe_module_exit(void)
  {
++<<<<<<< HEAD
 +	rxe_remove_all();
++=======
+ 	rdma_link_unregister(&rxe_link_ops);
+ 	ib_unregister_driver(RDMA_DRIVER_RXE);
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  	rxe_net_exit();
  	rxe_cache_exit();
  
diff --cc drivers/infiniband/sw/rxe/rxe.h
index 2b875875962f,2e2dff478833..000000000000
--- a/drivers/infiniband/sw/rxe/rxe.h
+++ b/drivers/infiniband/sw/rxe/rxe.h
@@@ -95,9 -95,7 +95,13 @@@ static inline u32 rxe_crc32(struct rxe_
  
  void rxe_set_mtu(struct rxe_dev *rxe, unsigned int dev_mtu);
  
++<<<<<<< HEAD
 +int rxe_add(struct rxe_dev *rxe, unsigned int mtu);
 +void rxe_remove(struct rxe_dev *rxe);
 +void rxe_remove_all(void);
++=======
+ int rxe_add(struct rxe_dev *rxe, unsigned int mtu, const char *ibdev_name);
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  
  void rxe_rcv(struct sk_buff *skb);
  
diff --cc drivers/infiniband/sw/rxe/rxe_net.c
index 56878453f1ae,753cabcd441c..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_net.c
+++ b/drivers/infiniband/sw/rxe/rxe_net.c
@@@ -536,7 -517,7 +536,11 @@@ enum rdma_link_layer rxe_link_layer(str
  	return IB_LINK_LAYER_ETHERNET;
  }
  
++<<<<<<< HEAD
 +struct rxe_dev *rxe_net_add(struct net_device *ndev)
++=======
+ int rxe_net_add(const char *ibdev_name, struct net_device *ndev)
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  {
  	int err;
  	struct rxe_dev *rxe = NULL;
@@@ -547,31 -528,13 +551,31 @@@
  
  	rxe->ndev = ndev;
  
- 	err = rxe_add(rxe, ndev->mtu);
+ 	err = rxe_add(rxe, ndev->mtu, ibdev_name);
  	if (err) {
  		ib_dealloc_device(&rxe->ib_dev);
 -		return err;
 +		return NULL;
  	}
  
 -	return 0;
 +	spin_lock_bh(&dev_list_lock);
 +	list_add_tail(&rxe->list, &rxe_dev_list);
 +	spin_unlock_bh(&dev_list_lock);
 +	return rxe;
 +}
 +
 +void rxe_remove_all(void)
 +{
 +	spin_lock_bh(&dev_list_lock);
 +	while (!list_empty(&rxe_dev_list)) {
 +		struct rxe_dev *rxe =
 +			list_first_entry(&rxe_dev_list, struct rxe_dev, list);
 +
 +		list_del(&rxe->list);
 +		spin_unlock_bh(&dev_list_lock);
 +		rxe_remove(rxe);
 +		spin_lock_bh(&dev_list_lock);
 +	}
 +	spin_unlock_bh(&dev_list_lock);
  }
  
  static void rxe_port_event(struct rxe_dev *rxe,
diff --cc drivers/infiniband/sw/rxe/rxe_net.h
index 106c586dbb26,2ca71d3d245c..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_net.h
+++ b/drivers/infiniband/sw/rxe/rxe_net.h
@@@ -43,7 -43,7 +43,11 @@@ struct rxe_recv_sockets 
  	struct socket *sk6;
  };
  
++<<<<<<< HEAD
 +struct rxe_dev *rxe_net_add(struct net_device *ndev);
++=======
+ int rxe_net_add(const char *ibdev_name, struct net_device *ndev);
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  
  int rxe_net_init(void);
  void rxe_net_exit(void);
diff --cc drivers/infiniband/sw/rxe/rxe_sysfs.c
index 6802be71bf9b,ccda5f5a3bc0..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_sysfs.c
+++ b/drivers/infiniband/sw/rxe/rxe_sysfs.c
@@@ -82,10 -81,9 +82,15 @@@ static int rxe_param_set_add(const cha
  		goto err;
  	}
  
++<<<<<<< HEAD
 +	rxe = rxe_net_add(ndev);
 +	if (!rxe) {
++=======
+ 	err = rxe_net_add("rxe%d", ndev);
+ 	if (err) {
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  		pr_err("failed to add %s\n", intf);
 +		err = -EINVAL;
  		goto err;
  	}
  
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.c
index f3188f269481,bd6a379b79d3..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@@ -1169,9 -1179,10 +1169,9 @@@ static const struct ib_device_ops rxe_d
  	.reg_user_mr = rxe_reg_user_mr,
  	.req_notify_cq = rxe_req_notify_cq,
  	.resize_cq = rxe_resize_cq,
 -	INIT_RDMA_OBJ_SIZE(ib_pd, rxe_pd, ibpd),
  };
  
- int rxe_register_device(struct rxe_dev *rxe)
+ int rxe_register_device(struct rxe_dev *rxe, const char *ibdev_name)
  {
  	int err;
  	struct ib_device *dev = &rxe->ib_dev;
@@@ -1240,23 -1251,13 +1240,28 @@@
  
  	rdma_set_device_sysfs_group(dev, &rxe_attr_group);
  	dev->driver_id = RDMA_DRIVER_RXE;
++<<<<<<< HEAD
 +	err = ib_register_device(dev, "rxe%d");
 +	if (err) {
++=======
+ 	err = ib_register_device(dev, ibdev_name);
+ 	if (err)
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  		pr_warn("%s failed with error %d\n", __func__, err);
 +		goto err1;
 +	}
 +
 +	return 0;
 +
 +err1:
 +	crypto_free_shash(rxe->tfm);
  
 -	/*
 -	 * Note that rxe may be invalid at this point if another thread
 -	 * unregistered it.
 -	 */
  	return err;
  }
 +
 +void rxe_unregister_device(struct rxe_dev *rxe)
 +{
 +	struct ib_device *dev = &rxe->ib_dev;
 +
 +	ib_unregister_device(dev);
 +}
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.h
index 74e04801d34d,d02eb75ef282..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.h
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.h
@@@ -466,8 -464,7 +466,12 @@@ static inline struct rxe_mem *to_rmw(st
  	return mw ? container_of(mw, struct rxe_mem, ibmw) : NULL;
  }
  
++<<<<<<< HEAD
 +int rxe_register_device(struct rxe_dev *rxe);
 +void rxe_unregister_device(struct rxe_dev *rxe);
++=======
+ int rxe_register_device(struct rxe_dev *rxe, const char *ibdev_name);
++>>>>>>> 66920e1b2586 (rdma_rxe: Use netlink messages to add/delete links)
  
  void rxe_mc_cleanup(struct rxe_pool_entry *arg);
  
* Unmerged path drivers/infiniband/sw/rxe/rxe.c
* Unmerged path drivers/infiniband/sw/rxe/rxe.h
* Unmerged path drivers/infiniband/sw/rxe/rxe_net.c
* Unmerged path drivers/infiniband/sw/rxe/rxe_net.h
diff --git a/drivers/infiniband/sw/rxe/rxe_param.h b/drivers/infiniband/sw/rxe/rxe_param.h
index bdea899a58ac..1abed47ca221 100644
--- a/drivers/infiniband/sw/rxe/rxe_param.h
+++ b/drivers/infiniband/sw/rxe/rxe_param.h
@@ -78,7 +78,8 @@ enum rxe_device_param {
 					| IB_DEVICE_SYS_IMAGE_GUID
 					| IB_DEVICE_RC_RNR_NAK_GEN
 					| IB_DEVICE_SRQ_RESIZE
-					| IB_DEVICE_MEM_MGT_EXTENSIONS,
+					| IB_DEVICE_MEM_MGT_EXTENSIONS
+					| IB_DEVICE_ALLOW_USER_UNREG,
 	RXE_MAX_SGE			= 32,
 	RXE_MAX_SGE_RD			= 32,
 	RXE_MAX_CQ			= 16384,
* Unmerged path drivers/infiniband/sw/rxe/rxe_sysfs.c
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.c
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.h
