selftests/bpf: samples/bpf: Split off legacy stuff from bpf_helpers.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 36b5d471135c3ef5f4922aa23f6566b6a07227f7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/36b5d471.failed

Split off few legacy things from bpf_helpers.h into separate
bpf_legacy.h file:
- load_{byte|half|word};
- remove extra inner_idx and numa_node fields from bpf_map_def and
  introduce bpf_map_def_legacy for use in samples;
- move BPF_ANNOTATE_KV_PAIR into bpf_legacy.h.

Adjust samples and selftests accordingly by either including
bpf_legacy.h and using bpf_map_def_legacy, or switching to BTF-defined
maps altogether.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Song Liu <songliubraving@fb.com>
Link: https://lore.kernel.org/bpf/20191008175942.1769476-3-andriin@fb.com
(cherry picked from commit 36b5d471135c3ef5f4922aa23f6566b6a07227f7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/bpf_helpers.h
#	tools/testing/selftests/bpf/progs/sockopt_sk.c
#	tools/testing/selftests/bpf/progs/tcp_rtt.c
#	tools/testing/selftests/bpf/progs/test_btf_newkv.c
diff --cc tools/testing/selftests/bpf/bpf_helpers.h
index 91537e9a7fbd,c7cfc27063d4..000000000000
--- a/tools/testing/selftests/bpf/bpf_helpers.h
+++ b/tools/testing/selftests/bpf/bpf_helpers.h
@@@ -19,184 -15,14 +19,173 @@@
  			 ##__VA_ARGS__);		\
  })
  
 -/* helper macro to place programs, maps, license in
 - * different sections in elf_bpf file. Section names
 - * are interpreted by elf_bpf loader
 - */
 -#define SEC(NAME) __attribute__((section(NAME), used))
 +/* helper functions called from eBPF programs written in C */
 +static void *(*bpf_map_lookup_elem)(void *map, void *key) =
 +	(void *) BPF_FUNC_map_lookup_elem;
 +static int (*bpf_map_update_elem)(void *map, void *key, void *value,
 +				  unsigned long long flags) =
 +	(void *) BPF_FUNC_map_update_elem;
 +static int (*bpf_map_delete_elem)(void *map, void *key) =
 +	(void *) BPF_FUNC_map_delete_elem;
 +static int (*bpf_map_push_elem)(void *map, void *value,
 +				unsigned long long flags) =
 +	(void *) BPF_FUNC_map_push_elem;
 +static int (*bpf_map_pop_elem)(void *map, void *value) =
 +	(void *) BPF_FUNC_map_pop_elem;
 +static int (*bpf_map_peek_elem)(void *map, void *value) =
 +	(void *) BPF_FUNC_map_peek_elem;
 +static int (*bpf_probe_read)(void *dst, int size, const void *unsafe_ptr) =
 +	(void *) BPF_FUNC_probe_read;
 +static unsigned long long (*bpf_ktime_get_ns)(void) =
 +	(void *) BPF_FUNC_ktime_get_ns;
 +static int (*bpf_trace_printk)(const char *fmt, int fmt_size, ...) =
 +	(void *) BPF_FUNC_trace_printk;
 +static void (*bpf_tail_call)(void *ctx, void *map, int index) =
 +	(void *) BPF_FUNC_tail_call;
 +static unsigned long long (*bpf_get_smp_processor_id)(void) =
 +	(void *) BPF_FUNC_get_smp_processor_id;
 +static unsigned long long (*bpf_get_current_pid_tgid)(void) =
 +	(void *) BPF_FUNC_get_current_pid_tgid;
 +static unsigned long long (*bpf_get_current_uid_gid)(void) =
 +	(void *) BPF_FUNC_get_current_uid_gid;
 +static int (*bpf_get_current_comm)(void *buf, int buf_size) =
 +	(void *) BPF_FUNC_get_current_comm;
 +static unsigned long long (*bpf_perf_event_read)(void *map,
 +						 unsigned long long flags) =
 +	(void *) BPF_FUNC_perf_event_read;
 +static int (*bpf_clone_redirect)(void *ctx, int ifindex, int flags) =
 +	(void *) BPF_FUNC_clone_redirect;
 +static int (*bpf_redirect)(int ifindex, int flags) =
 +	(void *) BPF_FUNC_redirect;
 +static int (*bpf_redirect_map)(void *map, int key, int flags) =
 +	(void *) BPF_FUNC_redirect_map;
 +static int (*bpf_perf_event_output)(void *ctx, void *map,
 +				    unsigned long long flags, void *data,
 +				    int size) =
 +	(void *) BPF_FUNC_perf_event_output;
 +static int (*bpf_get_stackid)(void *ctx, void *map, int flags) =
 +	(void *) BPF_FUNC_get_stackid;
 +static int (*bpf_probe_write_user)(void *dst, const void *src, int size) =
 +	(void *) BPF_FUNC_probe_write_user;
 +static int (*bpf_current_task_under_cgroup)(void *map, int index) =
 +	(void *) BPF_FUNC_current_task_under_cgroup;
 +static int (*bpf_skb_get_tunnel_key)(void *ctx, void *key, int size, int flags) =
 +	(void *) BPF_FUNC_skb_get_tunnel_key;
 +static int (*bpf_skb_set_tunnel_key)(void *ctx, void *key, int size, int flags) =
 +	(void *) BPF_FUNC_skb_set_tunnel_key;
 +static int (*bpf_skb_get_tunnel_opt)(void *ctx, void *md, int size) =
 +	(void *) BPF_FUNC_skb_get_tunnel_opt;
 +static int (*bpf_skb_set_tunnel_opt)(void *ctx, void *md, int size) =
 +	(void *) BPF_FUNC_skb_set_tunnel_opt;
 +static unsigned long long (*bpf_get_prandom_u32)(void) =
 +	(void *) BPF_FUNC_get_prandom_u32;
 +static int (*bpf_xdp_adjust_head)(void *ctx, int offset) =
 +	(void *) BPF_FUNC_xdp_adjust_head;
 +static int (*bpf_xdp_adjust_meta)(void *ctx, int offset) =
 +	(void *) BPF_FUNC_xdp_adjust_meta;
 +static int (*bpf_get_socket_cookie)(void *ctx) =
 +	(void *) BPF_FUNC_get_socket_cookie;
 +static int (*bpf_setsockopt)(void *ctx, int level, int optname, void *optval,
 +			     int optlen) =
 +	(void *) BPF_FUNC_setsockopt;
 +static int (*bpf_getsockopt)(void *ctx, int level, int optname, void *optval,
 +			     int optlen) =
 +	(void *) BPF_FUNC_getsockopt;
 +static int (*bpf_sock_ops_cb_flags_set)(void *ctx, int flags) =
 +	(void *) BPF_FUNC_sock_ops_cb_flags_set;
 +static int (*bpf_sk_redirect_map)(void *ctx, void *map, int key, int flags) =
 +	(void *) BPF_FUNC_sk_redirect_map;
 +static int (*bpf_sk_redirect_hash)(void *ctx, void *map, void *key, int flags) =
 +	(void *) BPF_FUNC_sk_redirect_hash;
 +static int (*bpf_sock_map_update)(void *map, void *key, void *value,
 +				  unsigned long long flags) =
 +	(void *) BPF_FUNC_sock_map_update;
 +static int (*bpf_sock_hash_update)(void *map, void *key, void *value,
 +				   unsigned long long flags) =
 +	(void *) BPF_FUNC_sock_hash_update;
 +static int (*bpf_perf_event_read_value)(void *map, unsigned long long flags,
 +					void *buf, unsigned int buf_size) =
 +	(void *) BPF_FUNC_perf_event_read_value;
 +static int (*bpf_perf_prog_read_value)(void *ctx, void *buf,
 +				       unsigned int buf_size) =
 +	(void *) BPF_FUNC_perf_prog_read_value;
 +static int (*bpf_override_return)(void *ctx, unsigned long rc) =
 +	(void *) BPF_FUNC_override_return;
 +static int (*bpf_msg_redirect_map)(void *ctx, void *map, int key, int flags) =
 +	(void *) BPF_FUNC_msg_redirect_map;
 +static int (*bpf_msg_redirect_hash)(void *ctx,
 +				    void *map, void *key, int flags) =
 +	(void *) BPF_FUNC_msg_redirect_hash;
 +static int (*bpf_msg_apply_bytes)(void *ctx, int len) =
 +	(void *) BPF_FUNC_msg_apply_bytes;
 +static int (*bpf_msg_cork_bytes)(void *ctx, int len) =
 +	(void *) BPF_FUNC_msg_cork_bytes;
 +static int (*bpf_msg_pull_data)(void *ctx, int start, int end, int flags) =
 +	(void *) BPF_FUNC_msg_pull_data;
 +static int (*bpf_msg_push_data)(void *ctx, int start, int end, int flags) =
 +	(void *) BPF_FUNC_msg_push_data;
 +static int (*bpf_msg_pop_data)(void *ctx, int start, int cut, int flags) =
 +	(void *) BPF_FUNC_msg_pop_data;
 +static int (*bpf_bind)(void *ctx, void *addr, int addr_len) =
 +	(void *) BPF_FUNC_bind;
 +static int (*bpf_xdp_adjust_tail)(void *ctx, int offset) =
 +	(void *) BPF_FUNC_xdp_adjust_tail;
 +static int (*bpf_skb_get_xfrm_state)(void *ctx, int index, void *state,
 +				     int size, int flags) =
 +	(void *) BPF_FUNC_skb_get_xfrm_state;
 +static int (*bpf_sk_select_reuseport)(void *ctx, void *map, void *key, __u32 flags) =
 +	(void *) BPF_FUNC_sk_select_reuseport;
 +static int (*bpf_get_stack)(void *ctx, void *buf, int size, int flags) =
 +	(void *) BPF_FUNC_get_stack;
 +static int (*bpf_fib_lookup)(void *ctx, struct bpf_fib_lookup *params,
 +			     int plen, __u32 flags) =
 +	(void *) BPF_FUNC_fib_lookup;
 +static int (*bpf_lwt_push_encap)(void *ctx, unsigned int type, void *hdr,
 +				 unsigned int len) =
 +	(void *) BPF_FUNC_lwt_push_encap;
 +static int (*bpf_lwt_seg6_store_bytes)(void *ctx, unsigned int offset,
 +				       void *from, unsigned int len) =
 +	(void *) BPF_FUNC_lwt_seg6_store_bytes;
 +static int (*bpf_lwt_seg6_action)(void *ctx, unsigned int action, void *param,
 +				  unsigned int param_len) =
 +	(void *) BPF_FUNC_lwt_seg6_action;
 +static int (*bpf_lwt_seg6_adjust_srh)(void *ctx, unsigned int offset,
 +				      unsigned int len) =
 +	(void *) BPF_FUNC_lwt_seg6_adjust_srh;
 +static int (*bpf_rc_repeat)(void *ctx) =
 +	(void *) BPF_FUNC_rc_repeat;
 +static int (*bpf_rc_keydown)(void *ctx, unsigned int protocol,
 +			     unsigned long long scancode, unsigned int toggle) =
 +	(void *) BPF_FUNC_rc_keydown;
 +static unsigned long long (*bpf_get_current_cgroup_id)(void) =
 +	(void *) BPF_FUNC_get_current_cgroup_id;
 +static void *(*bpf_get_local_storage)(void *map, unsigned long long flags) =
 +	(void *) BPF_FUNC_get_local_storage;
 +static unsigned long long (*bpf_skb_cgroup_id)(void *ctx) =
 +	(void *) BPF_FUNC_skb_cgroup_id;
 +static unsigned long long (*bpf_skb_ancestor_cgroup_id)(void *ctx, int level) =
 +	(void *) BPF_FUNC_skb_ancestor_cgroup_id;
 +static struct bpf_sock *(*bpf_sk_lookup_tcp)(void *ctx,
 +					     struct bpf_sock_tuple *tuple,
 +					     int size, unsigned long long netns_id,
 +					     unsigned long long flags) =
 +	(void *) BPF_FUNC_sk_lookup_tcp;
 +static struct bpf_sock *(*bpf_sk_lookup_udp)(void *ctx,
 +					     struct bpf_sock_tuple *tuple,
 +					     int size, unsigned long long netns_id,
 +					     unsigned long long flags) =
 +	(void *) BPF_FUNC_sk_lookup_udp;
 +static int (*bpf_sk_release)(struct bpf_sock *sk) =
 +	(void *) BPF_FUNC_sk_release;
 +static int (*bpf_skb_vlan_push)(void *ctx, __be16 vlan_proto, __u16 vlan_tci) =
 +	(void *) BPF_FUNC_skb_vlan_push;
 +static int (*bpf_skb_vlan_pop)(void *ctx) =
 +	(void *) BPF_FUNC_skb_vlan_pop;
 +static int (*bpf_rc_pointer_rel)(void *ctx, int rel_x, int rel_y) =
 +	(void *) BPF_FUNC_rc_pointer_rel;
  
- /* llvm builtin functions that eBPF C program may use to
-  * emit BPF_LD_ABS and BPF_LD_IND instructions
-  */
- struct sk_buff;
- unsigned long long load_byte(void *skb,
- 			     unsigned long long off) asm("llvm.bpf.load.byte");
- unsigned long long load_half(void *skb,
- 			     unsigned long long off) asm("llvm.bpf.load.half");
- unsigned long long load_word(void *skb,
- 			     unsigned long long off) asm("llvm.bpf.load.word");
- 
  /* a helper structure used by eBPF C program
-  * to describe map attributes to elf_bpf loader
+  * to describe BPF map attributes to libbpf loader
   */
  struct bpf_map_def {
  	unsigned int type;
@@@ -204,68 -30,8 +193,69 @@@
  	unsigned int value_size;
  	unsigned int max_entries;
  	unsigned int map_flags;
- 	unsigned int inner_map_idx;
- 	unsigned int numa_node;
  };
  
++<<<<<<< HEAD
 +#define BPF_ANNOTATE_KV_PAIR(name, type_key, type_val)		\
 +	struct ____btf_map_##name {				\
 +		type_key key;					\
 +		type_val value;					\
 +	};							\
 +	struct ____btf_map_##name				\
 +	__attribute__ ((section(".maps." #name), used))		\
 +		____btf_map_##name = { }
 +
 +static int (*bpf_skb_load_bytes)(void *ctx, int off, void *to, int len) =
 +	(void *) BPF_FUNC_skb_load_bytes;
 +static int (*bpf_skb_load_bytes_relative)(void *ctx, int off, void *to, int len, __u32 start_header) =
 +	(void *) BPF_FUNC_skb_load_bytes_relative;
 +static int (*bpf_skb_store_bytes)(void *ctx, int off, void *from, int len, int flags) =
 +	(void *) BPF_FUNC_skb_store_bytes;
 +static int (*bpf_l3_csum_replace)(void *ctx, int off, int from, int to, int flags) =
 +	(void *) BPF_FUNC_l3_csum_replace;
 +static int (*bpf_l4_csum_replace)(void *ctx, int off, int from, int to, int flags) =
 +	(void *) BPF_FUNC_l4_csum_replace;
 +static int (*bpf_csum_diff)(void *from, int from_size, void *to, int to_size, int seed) =
 +	(void *) BPF_FUNC_csum_diff;
 +static int (*bpf_skb_under_cgroup)(void *ctx, void *map, int index) =
 +	(void *) BPF_FUNC_skb_under_cgroup;
 +static int (*bpf_skb_change_head)(void *, int len, int flags) =
 +	(void *) BPF_FUNC_skb_change_head;
 +static int (*bpf_skb_pull_data)(void *, int len) =
 +	(void *) BPF_FUNC_skb_pull_data;
 +static unsigned int (*bpf_get_cgroup_classid)(void *ctx) =
 +	(void *) BPF_FUNC_get_cgroup_classid;
 +static unsigned int (*bpf_get_route_realm)(void *ctx) =
 +	(void *) BPF_FUNC_get_route_realm;
 +static int (*bpf_skb_change_proto)(void *ctx, __be16 proto, __u64 flags) =
 +	(void *) BPF_FUNC_skb_change_proto;
 +static int (*bpf_skb_change_type)(void *ctx, __u32 type) =
 +	(void *) BPF_FUNC_skb_change_type;
 +static unsigned int (*bpf_get_hash_recalc)(void *ctx) =
 +	(void *) BPF_FUNC_get_hash_recalc;
 +static unsigned long long (*bpf_get_current_task)(void) =
 +	(void *) BPF_FUNC_get_current_task;
 +static int (*bpf_skb_change_tail)(void *ctx, __u32 len, __u64 flags) =
 +	(void *) BPF_FUNC_skb_change_tail;
 +static long long (*bpf_csum_update)(void *ctx, __u32 csum) =
 +	(void *) BPF_FUNC_csum_update;
 +static void (*bpf_set_hash_invalid)(void *ctx) =
 +	(void *) BPF_FUNC_set_hash_invalid;
 +static int (*bpf_get_numa_node_id)(void) =
 +	(void *) BPF_FUNC_get_numa_node_id;
 +static int (*bpf_probe_read_str)(void *ctx, __u32 size,
 +				 const void *unsafe_ptr) =
 +	(void *) BPF_FUNC_probe_read_str;
 +static unsigned int (*bpf_get_socket_uid)(void *ctx) =
 +	(void *) BPF_FUNC_get_socket_uid;
 +static unsigned int (*bpf_set_hash)(void *ctx, __u32 hash) =
 +	(void *) BPF_FUNC_set_hash;
 +static int (*bpf_skb_adjust_room)(void *ctx, __s32 len_diff, __u32 mode,
 +				  unsigned long long flags) =
 +	(void *) BPF_FUNC_skb_adjust_room;
 +
++=======
++>>>>>>> 36b5d471135c (selftests/bpf: samples/bpf: Split off legacy stuff from bpf_helpers.h)
  /* Scan the ARCH passed in from ARCH env variable (see Makefile) */
  #if defined(__TARGET_ARCH_x86)
  	#define bpf_target_x86
* Unmerged path tools/testing/selftests/bpf/progs/sockopt_sk.c
* Unmerged path tools/testing/selftests/bpf/progs/tcp_rtt.c
* Unmerged path tools/testing/selftests/bpf/progs/test_btf_newkv.c
diff --git a/samples/bpf/hbm_kern.h b/samples/bpf/hbm_kern.h
index aa207a2eebbd..4edaf47876ca 100644
--- a/samples/bpf/hbm_kern.h
+++ b/samples/bpf/hbm_kern.h
@@ -59,21 +59,18 @@
 #define BYTES_PER_NS(delta, rate) ((((u64)(delta)) * (rate)) >> 20)
 #define BYTES_TO_NS(bytes, rate) div64_u64(((u64)(bytes)) << 20, (u64)(rate))
 
-struct bpf_map_def SEC("maps") queue_state = {
-	.type = BPF_MAP_TYPE_CGROUP_STORAGE,
-	.key_size = sizeof(struct bpf_cgroup_storage_key),
-	.value_size = sizeof(struct hbm_vqueue),
-};
-BPF_ANNOTATE_KV_PAIR(queue_state, struct bpf_cgroup_storage_key,
-		     struct hbm_vqueue);
-
-struct bpf_map_def SEC("maps") queue_stats = {
-	.type = BPF_MAP_TYPE_ARRAY,
-	.key_size = sizeof(u32),
-	.value_size = sizeof(struct hbm_queue_stats),
-	.max_entries = 1,
-};
-BPF_ANNOTATE_KV_PAIR(queue_stats, int, struct hbm_queue_stats);
+struct {
+	__uint(type, BPF_MAP_TYPE_CGROUP_STORAGE);
+	__type(key, struct bpf_cgroup_storage_key);
+	__type(value, struct hbm_vqueue);
+} queue_state SEC(".maps");
+
+struct {
+	__uint(type, BPF_MAP_TYPE_ARRAY);
+	__uint(max_entries, 1);
+	__type(key, u32);
+	__type(value, struct hvm_queue_stats);
+} queue_stats SEC(".maps");
 
 struct hbm_pkt_info {
 	int	cwnd;
diff --git a/samples/bpf/map_perf_test_kern.c b/samples/bpf/map_perf_test_kern.c
index 2b2ffb97018b..f47ee513cb7c 100644
--- a/samples/bpf/map_perf_test_kern.c
+++ b/samples/bpf/map_perf_test_kern.c
@@ -9,25 +9,26 @@
 #include <linux/version.h>
 #include <uapi/linux/bpf.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 
 #define MAX_ENTRIES 1000
 #define MAX_NR_CPUS 1024
 
-struct bpf_map_def SEC("maps") hash_map = {
+struct bpf_map_def_legacy SEC("maps") hash_map = {
 	.type = BPF_MAP_TYPE_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
 	.max_entries = MAX_ENTRIES,
 };
 
-struct bpf_map_def SEC("maps") lru_hash_map = {
+struct bpf_map_def_legacy SEC("maps") lru_hash_map = {
 	.type = BPF_MAP_TYPE_LRU_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
 	.max_entries = 10000,
 };
 
-struct bpf_map_def SEC("maps") nocommon_lru_hash_map = {
+struct bpf_map_def_legacy SEC("maps") nocommon_lru_hash_map = {
 	.type = BPF_MAP_TYPE_LRU_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
@@ -35,7 +36,7 @@ struct bpf_map_def SEC("maps") nocommon_lru_hash_map = {
 	.map_flags = BPF_F_NO_COMMON_LRU,
 };
 
-struct bpf_map_def SEC("maps") inner_lru_hash_map = {
+struct bpf_map_def_legacy SEC("maps") inner_lru_hash_map = {
 	.type = BPF_MAP_TYPE_LRU_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
@@ -44,20 +45,20 @@ struct bpf_map_def SEC("maps") inner_lru_hash_map = {
 	.numa_node = 0,
 };
 
-struct bpf_map_def SEC("maps") array_of_lru_hashs = {
+struct bpf_map_def_legacy SEC("maps") array_of_lru_hashs = {
 	.type = BPF_MAP_TYPE_ARRAY_OF_MAPS,
 	.key_size = sizeof(u32),
 	.max_entries = MAX_NR_CPUS,
 };
 
-struct bpf_map_def SEC("maps") percpu_hash_map = {
+struct bpf_map_def_legacy SEC("maps") percpu_hash_map = {
 	.type = BPF_MAP_TYPE_PERCPU_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
 	.max_entries = MAX_ENTRIES,
 };
 
-struct bpf_map_def SEC("maps") hash_map_alloc = {
+struct bpf_map_def_legacy SEC("maps") hash_map_alloc = {
 	.type = BPF_MAP_TYPE_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
@@ -65,7 +66,7 @@ struct bpf_map_def SEC("maps") hash_map_alloc = {
 	.map_flags = BPF_F_NO_PREALLOC,
 };
 
-struct bpf_map_def SEC("maps") percpu_hash_map_alloc = {
+struct bpf_map_def_legacy SEC("maps") percpu_hash_map_alloc = {
 	.type = BPF_MAP_TYPE_PERCPU_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
@@ -73,7 +74,7 @@ struct bpf_map_def SEC("maps") percpu_hash_map_alloc = {
 	.map_flags = BPF_F_NO_PREALLOC,
 };
 
-struct bpf_map_def SEC("maps") lpm_trie_map_alloc = {
+struct bpf_map_def_legacy SEC("maps") lpm_trie_map_alloc = {
 	.type = BPF_MAP_TYPE_LPM_TRIE,
 	.key_size = 8,
 	.value_size = sizeof(long),
@@ -81,14 +82,14 @@ struct bpf_map_def SEC("maps") lpm_trie_map_alloc = {
 	.map_flags = BPF_F_NO_PREALLOC,
 };
 
-struct bpf_map_def SEC("maps") array_map = {
+struct bpf_map_def_legacy SEC("maps") array_map = {
 	.type = BPF_MAP_TYPE_ARRAY,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
 	.max_entries = MAX_ENTRIES,
 };
 
-struct bpf_map_def SEC("maps") lru_hash_lookup_map = {
+struct bpf_map_def_legacy SEC("maps") lru_hash_lookup_map = {
 	.type = BPF_MAP_TYPE_LRU_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(long),
diff --git a/samples/bpf/parse_ldabs.c b/samples/bpf/parse_ldabs.c
index 6db6b21fdc6d..ef5892377beb 100644
--- a/samples/bpf/parse_ldabs.c
+++ b/samples/bpf/parse_ldabs.c
@@ -12,6 +12,7 @@
 #include <linux/udp.h>
 #include <uapi/linux/bpf.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 
 #define DEFAULT_PKTGEN_UDP_PORT	9
 #define IP_MF			0x2000
diff --git a/samples/bpf/sockex1_kern.c b/samples/bpf/sockex1_kern.c
index ed18e9a4909c..f96943f443ab 100644
--- a/samples/bpf/sockex1_kern.c
+++ b/samples/bpf/sockex1_kern.c
@@ -3,6 +3,7 @@
 #include <uapi/linux/if_packet.h>
 #include <uapi/linux/ip.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 
 struct bpf_map_def SEC("maps") my_map = {
 	.type = BPF_MAP_TYPE_ARRAY,
diff --git a/samples/bpf/sockex2_kern.c b/samples/bpf/sockex2_kern.c
index f2f9dbc021b0..5566fa7d92fa 100644
--- a/samples/bpf/sockex2_kern.c
+++ b/samples/bpf/sockex2_kern.c
@@ -1,5 +1,6 @@
 #include <uapi/linux/bpf.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 #include <uapi/linux/in.h>
 #include <uapi/linux/if.h>
 #include <uapi/linux/if_ether.h>
diff --git a/samples/bpf/sockex3_kern.c b/samples/bpf/sockex3_kern.c
index c527b57d3ec8..151dd842ecc0 100644
--- a/samples/bpf/sockex3_kern.c
+++ b/samples/bpf/sockex3_kern.c
@@ -6,6 +6,7 @@
  */
 #include <uapi/linux/bpf.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 #include <uapi/linux/in.h>
 #include <uapi/linux/if.h>
 #include <uapi/linux/if_ether.h>
diff --git a/samples/bpf/tcbpf1_kern.c b/samples/bpf/tcbpf1_kern.c
index 274c884c87fe..ff43341bdfce 100644
--- a/samples/bpf/tcbpf1_kern.c
+++ b/samples/bpf/tcbpf1_kern.c
@@ -8,6 +8,7 @@
 #include <uapi/linux/filter.h>
 #include <uapi/linux/pkt_cls.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 
 /* compiler workaround */
 #define _htonl __builtin_bswap32
diff --git a/samples/bpf/test_map_in_map_kern.c b/samples/bpf/test_map_in_map_kern.c
index 42c44d091dd1..8101bf3dc7f7 100644
--- a/samples/bpf/test_map_in_map_kern.c
+++ b/samples/bpf/test_map_in_map_kern.c
@@ -11,11 +11,12 @@
 #include <uapi/linux/bpf.h>
 #include <uapi/linux/in6.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 
 #define MAX_NR_PORTS 65536
 
 /* map #0 */
-struct bpf_map_def SEC("maps") port_a = {
+struct bpf_map_def_legacy SEC("maps") port_a = {
 	.type = BPF_MAP_TYPE_ARRAY,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(int),
@@ -23,7 +24,7 @@ struct bpf_map_def SEC("maps") port_a = {
 };
 
 /* map #1 */
-struct bpf_map_def SEC("maps") port_h = {
+struct bpf_map_def_legacy SEC("maps") port_h = {
 	.type = BPF_MAP_TYPE_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(int),
@@ -31,7 +32,7 @@ struct bpf_map_def SEC("maps") port_h = {
 };
 
 /* map #2 */
-struct bpf_map_def SEC("maps") reg_result_h = {
+struct bpf_map_def_legacy SEC("maps") reg_result_h = {
 	.type = BPF_MAP_TYPE_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(int),
@@ -39,7 +40,7 @@ struct bpf_map_def SEC("maps") reg_result_h = {
 };
 
 /* map #3 */
-struct bpf_map_def SEC("maps") inline_result_h = {
+struct bpf_map_def_legacy SEC("maps") inline_result_h = {
 	.type = BPF_MAP_TYPE_HASH,
 	.key_size = sizeof(u32),
 	.value_size = sizeof(int),
@@ -47,7 +48,7 @@ struct bpf_map_def SEC("maps") inline_result_h = {
 };
 
 /* map #4 */ /* Test case #0 */
-struct bpf_map_def SEC("maps") a_of_port_a = {
+struct bpf_map_def_legacy SEC("maps") a_of_port_a = {
 	.type = BPF_MAP_TYPE_ARRAY_OF_MAPS,
 	.key_size = sizeof(u32),
 	.inner_map_idx = 0, /* map_fd[0] is port_a */
@@ -55,7 +56,7 @@ struct bpf_map_def SEC("maps") a_of_port_a = {
 };
 
 /* map #5 */ /* Test case #1 */
-struct bpf_map_def SEC("maps") h_of_port_a = {
+struct bpf_map_def_legacy SEC("maps") h_of_port_a = {
 	.type = BPF_MAP_TYPE_HASH_OF_MAPS,
 	.key_size = sizeof(u32),
 	.inner_map_idx = 0, /* map_fd[0] is port_a */
@@ -63,7 +64,7 @@ struct bpf_map_def SEC("maps") h_of_port_a = {
 };
 
 /* map #6 */ /* Test case #2 */
-struct bpf_map_def SEC("maps") h_of_port_h = {
+struct bpf_map_def_legacy SEC("maps") h_of_port_h = {
 	.type = BPF_MAP_TYPE_HASH_OF_MAPS,
 	.key_size = sizeof(u32),
 	.inner_map_idx = 1, /* map_fd[1] is port_h */
* Unmerged path tools/testing/selftests/bpf/bpf_helpers.h
diff --git a/tools/testing/selftests/bpf/bpf_legacy.h b/tools/testing/selftests/bpf/bpf_legacy.h
new file mode 100644
index 000000000000..6f8988738bc1
--- /dev/null
+++ b/tools/testing/selftests/bpf/bpf_legacy.h
@@ -0,0 +1,39 @@
+/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
+#ifndef __BPF_LEGACY__
+#define __BPF_LEGACY__
+
+/*
+ * legacy bpf_map_def with extra fields supported only by bpf_load(), do not
+ * use outside of samples/bpf
+ */
+struct bpf_map_def_legacy {
+	unsigned int type;
+	unsigned int key_size;
+	unsigned int value_size;
+	unsigned int max_entries;
+	unsigned int map_flags;
+	unsigned int inner_map_idx;
+	unsigned int numa_node;
+};
+
+#define BPF_ANNOTATE_KV_PAIR(name, type_key, type_val)		\
+	struct ____btf_map_##name {				\
+		type_key key;					\
+		type_val value;					\
+	};							\
+	struct ____btf_map_##name				\
+	__attribute__ ((section(".maps." #name), used))		\
+		____btf_map_##name = { }
+
+/* llvm builtin functions that eBPF C program may use to
+ * emit BPF_LD_ABS and BPF_LD_IND instructions
+ */
+unsigned long long load_byte(void *skb,
+			     unsigned long long off) asm("llvm.bpf.load.byte");
+unsigned long long load_half(void *skb,
+			     unsigned long long off) asm("llvm.bpf.load.half");
+unsigned long long load_word(void *skb,
+			     unsigned long long off) asm("llvm.bpf.load.word");
+
+#endif
+
* Unmerged path tools/testing/selftests/bpf/progs/sockopt_sk.c
* Unmerged path tools/testing/selftests/bpf/progs/tcp_rtt.c
* Unmerged path tools/testing/selftests/bpf/progs/test_btf_newkv.c
diff --git a/tools/testing/selftests/bpf/test_btf_haskv.c b/tools/testing/selftests/bpf/test_btf_haskv.c
index e5c79fe0ffdb..763c51447c19 100644
--- a/tools/testing/selftests/bpf/test_btf_haskv.c
+++ b/tools/testing/selftests/bpf/test_btf_haskv.c
@@ -2,6 +2,7 @@
 /* Copyright (c) 2018 Facebook */
 #include <linux/bpf.h>
 #include "bpf_helpers.h"
+#include "bpf_legacy.h"
 
 int _version SEC("version") = 1;
 
