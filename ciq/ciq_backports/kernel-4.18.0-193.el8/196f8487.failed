libbpf: Move directory creation into _pin() functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit 196f8487f51ee6e2a46f51e10ac3f4ca67574ba9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/196f8487.failed

The existing pin_*() functions all try to create the parent directory
before pinning. Move this check into the per-object _pin() functions
instead. This ensures consistent behaviour when auto-pinning is
added (which doesn't go through the top-level pin_maps() function), at the
cost of a few more calls to mkdir().

	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/157269297985.394725.5882630952992598610.stgit@toke.dk
(cherry picked from commit 196f8487f51ee6e2a46f51e10ac3f4ca67574ba9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index d91bdfbf910b,fa15f3b315ba..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -2928,21 -3931,6 +2954,24 @@@ int bpf_program__unpin_instance(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int make_dir(const char *path)
 +{
 +	char *cp, errmsg[STRERR_BUFSIZE];
 +	int err = 0;
 +
 +	if (mkdir(path, 0700) && errno != EEXIST)
 +		err = -errno;
 +
 +	if (err) {
 +		cp = libbpf_strerror_r(-err, errmsg, sizeof(errmsg));
 +		pr_warning("failed to mkdir %s: %s\n", path, cp);
 +	}
 +	return err;
 +}
 +
++=======
++>>>>>>> 196f8487f51e (libbpf: Move directory creation into _pin() functions)
  int bpf_program__pin(struct bpf_program *prog, const char *path)
  {
  	int i, err;
@@@ -3061,7 -4049,43 +3090,47 @@@ int bpf_map__pin(struct bpf_map *map, c
  	char *cp, errmsg[STRERR_BUFSIZE];
  	int err;
  
++<<<<<<< HEAD
 +	err = check_path(path);
++=======
+ 	if (map == NULL) {
+ 		pr_warn("invalid map pointer\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (map->pin_path) {
+ 		if (path && strcmp(path, map->pin_path)) {
+ 			pr_warn("map '%s' already has pin path '%s' different from '%s'\n",
+ 				bpf_map__name(map), map->pin_path, path);
+ 			return -EINVAL;
+ 		} else if (map->pinned) {
+ 			pr_debug("map '%s' already pinned at '%s'; not re-pinning\n",
+ 				 bpf_map__name(map), map->pin_path);
+ 			return 0;
+ 		}
+ 	} else {
+ 		if (!path) {
+ 			pr_warn("missing a path to pin map '%s' at\n",
+ 				bpf_map__name(map));
+ 			return -EINVAL;
+ 		} else if (map->pinned) {
+ 			pr_warn("map '%s' already pinned\n", bpf_map__name(map));
+ 			return -EEXIST;
+ 		}
+ 
+ 		map->pin_path = strdup(path);
+ 		if (!map->pin_path) {
+ 			err = -errno;
+ 			goto out_err;
+ 		}
+ 	}
+ 
+ 	err = make_parent_dir(map->pin_path);
+ 	if (err)
+ 		return err;
+ 
+ 	err = check_path(map->pin_path);
++>>>>>>> 196f8487f51e (libbpf: Move directory creation into _pin() functions)
  	if (err)
  		return err;
  
@@@ -3115,25 -4179,28 +3184,21 @@@ int bpf_object__pin_maps(struct bpf_obj
  		return -ENOENT;
  	}
  
- 	err = make_dir(path);
- 	if (err)
- 		return err;
- 
  	bpf_object__for_each_map(map, obj) {
 -		char *pin_path = NULL;
  		char buf[PATH_MAX];
 +		int len;
  
 -		if (path) {
 -			int len;
 -
 -			len = snprintf(buf, PATH_MAX, "%s/%s", path,
 -				       bpf_map__name(map));
 -			if (len < 0) {
 -				err = -EINVAL;
 -				goto err_unpin_maps;
 -			} else if (len >= PATH_MAX) {
 -				err = -ENAMETOOLONG;
 -				goto err_unpin_maps;
 -			}
 -			pin_path = buf;
 -		} else if (!map->pin_path) {
 -			continue;
 +		len = snprintf(buf, PATH_MAX, "%s/%s", path,
 +			       bpf_map__name(map));
 +		if (len < 0) {
 +			err = -EINVAL;
 +			goto err_unpin_maps;
 +		} else if (len >= PATH_MAX) {
 +			err = -ENAMETOOLONG;
 +			goto err_unpin_maps;
  		}
  
 -		err = bpf_map__pin(map, pin_path);
 +		err = bpf_map__pin(map, buf);
  		if (err)
  			goto err_unpin_maps;
  	}
* Unmerged path tools/lib/bpf/libbpf.c
