devlink: Introduce PCI VF port flavour and port attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Parav Pandit <parav@mellanox.com>
commit e41b6bf3cdd474dc9c587cb55906b0256835bf6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/e41b6bf3.failed

In an eswitch, PCI VF may have port which is normally represented using
a representor netdevice.
To have better visibility of eswitch port, its association with VF,
and its representor netdevice, introduce a PCI VF port flavour.

When devlink port flavour is PCI VF, fill up PCI VF attributes of
the port.

Extend port name creation using PCI PF and VF number scheme on best
effort basis, so that vendor drivers can skip defining their own scheme.

$ devlink port show
pci/0000:05:00.0/0: type eth netdev eth0 flavour pcipf pfnum 0
pci/0000:05:00.0/1: type eth netdev eth1 flavour pcivf pfnum 0 vfnum 0
pci/0000:05:00.0/2: type eth netdev eth2 flavour pcivf pfnum 0 vfnum 1

	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e41b6bf3cdd474dc9c587cb55906b0256835bf6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/devlink.h
#	include/uapi/linux/devlink.h
#	net/core/devlink.c
diff --cc include/net/devlink.h
index b709c4086baa,bc36f942a7d5..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -40,12 -38,34 +40,41 @@@ struct devlink 
  	char priv[0] __aligned(NETDEV_ALIGN);
  };
  
++<<<<<<< HEAD
++=======
+ struct devlink_port_phys_attrs {
+ 	u32 port_number; /* Same value as "split group".
+ 			  * A physical port which is visible to the user
+ 			  * for a given port flavour.
+ 			  */
+ 	u32 split_subport_number;
+ };
+ 
+ struct devlink_port_pci_pf_attrs {
+ 	u16 pf;	/* Associated PCI PF for this port. */
+ };
+ 
+ struct devlink_port_pci_vf_attrs {
+ 	u16 pf;	/* Associated PCI PF for this port. */
+ 	u16 vf;	/* Associated PCI VF for of the PCI PF for this port. */
+ };
+ 
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  struct devlink_port_attrs {
  	u8 set:1,
 -	   split:1,
 -	   switch_port:1;
 +	   split:1;
  	enum devlink_port_flavour flavour;
++<<<<<<< HEAD
 +	u32 port_number; /* same value as "split group" */
 +	u32 split_subport_number;
++=======
+ 	struct netdev_phys_item_id switch_id;
+ 	union {
+ 		struct devlink_port_phys_attrs phys;
+ 		struct devlink_port_pci_pf_attrs pci_pf;
+ 		struct devlink_port_pci_vf_attrs pci_vf;
+ 	};
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  };
  
  struct devlink_port {
@@@ -567,9 -607,16 +596,22 @@@ void devlink_port_type_clear(struct dev
  void devlink_port_attrs_set(struct devlink_port *devlink_port,
  			    enum devlink_port_flavour flavour,
  			    u32 port_number, bool split,
++<<<<<<< HEAD
 +			    u32 split_subport_number);
 +int devlink_port_get_phys_port_name(struct devlink_port *devlink_port,
 +				    char *name, size_t len);
++=======
+ 			    u32 split_subport_number,
+ 			    const unsigned char *switch_id,
+ 			    unsigned char switch_id_len);
+ void devlink_port_attrs_pci_pf_set(struct devlink_port *devlink_port,
+ 				   const unsigned char *switch_id,
+ 				   unsigned char switch_id_len, u16 pf);
+ void devlink_port_attrs_pci_vf_set(struct devlink_port *devlink_port,
+ 				   const unsigned char *switch_id,
+ 				   unsigned char switch_id_len,
+ 				   u16 pf, u16 vf);
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  int devlink_sb_register(struct devlink *devlink, unsigned int sb_index,
  			u32 size, u16 ingress_pools_count,
  			u16 egress_pools_count, u16 ingress_tc_count,
diff --cc include/uapi/linux/devlink.h
index 5bb4ea67d84f,ffc993256527..000000000000
--- a/include/uapi/linux/devlink.h
+++ b/include/uapi/linux/devlink.h
@@@ -167,6 -169,14 +167,17 @@@ enum devlink_port_flavour 
  	DEVLINK_PORT_FLAVOUR_DSA, /* Distributed switch architecture
  				   * interconnect port.
  				   */
++<<<<<<< HEAD
++=======
+ 	DEVLINK_PORT_FLAVOUR_PCI_PF, /* Represents eswitch port for
+ 				      * the PCI PF. It is an internal
+ 				      * port that faces the PCI PF.
+ 				      */
+ 	DEVLINK_PORT_FLAVOUR_PCI_VF, /* Represents eswitch port
+ 				      * for the PCI VF. It is an internal
+ 				      * port that faces the PCI VF.
+ 				      */
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  };
  
  enum devlink_param_cmode {
@@@ -331,7 -341,13 +342,13 @@@ enum devlink_attr 
  
  	DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME,	/* string */
  	DEVLINK_ATTR_FLASH_UPDATE_COMPONENT,	/* string */
 -	DEVLINK_ATTR_FLASH_UPDATE_STATUS_MSG,	/* string */
 -	DEVLINK_ATTR_FLASH_UPDATE_STATUS_DONE,	/* u64 */
 -	DEVLINK_ATTR_FLASH_UPDATE_STATUS_TOTAL,	/* u64 */
  
++<<<<<<< HEAD
++=======
+ 	DEVLINK_ATTR_PORT_PCI_PF_NUMBER,	/* u16 */
+ 	DEVLINK_ATTR_PORT_PCI_VF_NUMBER,	/* u16 */
+ 
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  	/* add new attributes above here, update the policy in devlink.c */
  
  	__DEVLINK_ATTR_MAX,
diff --cc net/core/devlink.c
index d12ffdf1735e,4f40aeace902..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -517,7 -515,23 +517,27 @@@ static int devlink_nl_port_attrs_put(st
  		return 0;
  	if (nla_put_u16(msg, DEVLINK_ATTR_PORT_FLAVOUR, attrs->flavour))
  		return -EMSGSIZE;
++<<<<<<< HEAD
 +	if (nla_put_u32(msg, DEVLINK_ATTR_PORT_NUMBER, attrs->port_number))
++=======
+ 	if (devlink_port->attrs.flavour == DEVLINK_PORT_FLAVOUR_PCI_PF) {
+ 		if (nla_put_u16(msg, DEVLINK_ATTR_PORT_PCI_PF_NUMBER,
+ 				attrs->pci_pf.pf))
+ 			return -EMSGSIZE;
+ 	} else if (devlink_port->attrs.flavour == DEVLINK_PORT_FLAVOUR_PCI_VF) {
+ 		if (nla_put_u16(msg, DEVLINK_ATTR_PORT_PCI_PF_NUMBER,
+ 				attrs->pci_vf.pf) ||
+ 		    nla_put_u16(msg, DEVLINK_ATTR_PORT_PCI_VF_NUMBER,
+ 				attrs->pci_vf.vf))
+ 			return -EMSGSIZE;
+ 	}
+ 	if (devlink_port->attrs.flavour != DEVLINK_PORT_FLAVOUR_PHYSICAL &&
+ 	    devlink_port->attrs.flavour != DEVLINK_PORT_FLAVOUR_CPU &&
+ 	    devlink_port->attrs.flavour != DEVLINK_PORT_FLAVOUR_DSA)
+ 		return 0;
+ 	if (nla_put_u32(msg, DEVLINK_ATTR_PORT_NUMBER,
+ 			attrs->phys.port_number))
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  		return -EMSGSIZE;
  	if (!attrs->split)
  		return 0;
@@@ -5487,8 -5812,62 +5507,67 @@@ void devlink_port_attrs_set(struct devl
  }
  EXPORT_SYMBOL_GPL(devlink_port_attrs_set);
  
++<<<<<<< HEAD
 +int devlink_port_get_phys_port_name(struct devlink_port *devlink_port,
 +				    char *name, size_t len)
++=======
+ /**
+  *	devlink_port_attrs_pci_pf_set - Set PCI PF port attributes
+  *
+  *	@devlink_port: devlink port
+  *	@pf: associated PF for the devlink port instance
+  *	@switch_id: if the port is part of switch, this is buffer with ID,
+  *	            otherwise this is NULL
+  *	@switch_id_len: length of the switch_id buffer
+  */
+ void devlink_port_attrs_pci_pf_set(struct devlink_port *devlink_port,
+ 				   const unsigned char *switch_id,
+ 				   unsigned char switch_id_len, u16 pf)
+ {
+ 	struct devlink_port_attrs *attrs = &devlink_port->attrs;
+ 	int ret;
+ 
+ 	ret = __devlink_port_attrs_set(devlink_port,
+ 				       DEVLINK_PORT_FLAVOUR_PCI_PF,
+ 				       switch_id, switch_id_len);
+ 	if (ret)
+ 		return;
+ 
+ 	attrs->pci_pf.pf = pf;
+ }
+ EXPORT_SYMBOL_GPL(devlink_port_attrs_pci_pf_set);
+ 
+ /**
+  *	devlink_port_attrs_pci_vf_set - Set PCI VF port attributes
+  *
+  *	@devlink_port: devlink port
+  *	@pf: associated PF for the devlink port instance
+  *	@vf: associated VF of a PF for the devlink port instance
+  *	@switch_id: if the port is part of switch, this is buffer with ID,
+  *	            otherwise this is NULL
+  *	@switch_id_len: length of the switch_id buffer
+  */
+ void devlink_port_attrs_pci_vf_set(struct devlink_port *devlink_port,
+ 				   const unsigned char *switch_id,
+ 				   unsigned char switch_id_len,
+ 				   u16 pf, u16 vf)
+ {
+ 	struct devlink_port_attrs *attrs = &devlink_port->attrs;
+ 	int ret;
+ 
+ 	ret = __devlink_port_attrs_set(devlink_port,
+ 				       DEVLINK_PORT_FLAVOUR_PCI_VF,
+ 				       switch_id, switch_id_len);
+ 	if (ret)
+ 		return;
+ 	attrs->pci_vf.pf = pf;
+ 	attrs->pci_vf.vf = vf;
+ }
+ EXPORT_SYMBOL_GPL(devlink_port_attrs_pci_vf_set);
+ 
+ static int __devlink_port_phys_port_name_get(struct devlink_port *devlink_port,
+ 					     char *name, size_t len)
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  {
  	struct devlink_port_attrs *attrs = &devlink_port->attrs;
  	int n = 0;
@@@ -5511,6 -5891,13 +5590,16 @@@
  		 */
  		WARN_ON(1);
  		return -EINVAL;
++<<<<<<< HEAD
++=======
+ 	case DEVLINK_PORT_FLAVOUR_PCI_PF:
+ 		n = snprintf(name, len, "pf%u", attrs->pci_pf.pf);
+ 		break;
+ 	case DEVLINK_PORT_FLAVOUR_PCI_VF:
+ 		n = snprintf(name, len, "pf%uvf%u",
+ 			     attrs->pci_vf.pf, attrs->pci_vf.vf);
+ 		break;
++>>>>>>> e41b6bf3cdd4 (devlink: Introduce PCI VF port flavour and port attribute)
  	}
  
  	if (n >= len)
* Unmerged path include/net/devlink.h
* Unmerged path include/uapi/linux/devlink.h
* Unmerged path net/core/devlink.c
