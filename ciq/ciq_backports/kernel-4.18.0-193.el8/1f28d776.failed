net/mlx5: Move all devlink related functions calls to devlink.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Move all devlink related functions calls to devlink.c (Alaa Hleihel) [1724336]
Rebuild_FUZZ: 96.72%
commit-author Eran Ben Elisha <eranbe@mellanox.com>
commit 1f28d7768f1d181249318a0f61949d4cb412e8c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/1f28d776.failed

Centralize all devlink related callbacks in one file.
In the downstream patch, some more functionality will be added, this
patch is preparing the driver infrastructure for it.

Currently, move devlink un/register functions calls into this file.

	Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
	Reviewed-by: Moshe Shemesh <moshe@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 1f28d7768f1d181249318a0f61949d4cb412e8c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index ea5e5990b832,5ea141893b99..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -1253,60 -1215,12 +1254,64 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
 +static int mlx5_devlink_flash_update(struct devlink *devlink,
 +				     const char *file_name,
 +				     const char *component,
 +				     struct netlink_ext_ack *extack)
 +{
 +	struct mlx5_core_dev *dev = devlink_priv(devlink);
 +	const struct firmware *fw;
 +	int err;
 +
 +	if (component)
 +		return -EOPNOTSUPP;
 +
 +	err = request_firmware_direct(&fw, file_name, &dev->pdev->dev);
 +	if (err)
 +		return err;
 +
 +	return mlx5_firmware_flash(dev, fw);
 +}
 +
 +static const struct devlink_ops mlx5_devlink_ops = {
 +#ifdef CONFIG_MLX5_ESWITCH
 +	.eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
 +	.eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
 +	.eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
 +	.eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
 +	.eswitch_encap_mode_set = mlx5_devlink_eswitch_encap_mode_set,
 +	.eswitch_encap_mode_get = mlx5_devlink_eswitch_encap_mode_get,
 +#endif
 +	.flash_update = mlx5_devlink_flash_update,
 +};
 +
 +#define MLX5_IB_MOD "mlx5_ib"
 +static int init_one(struct pci_dev *pdev,
 +		    const struct pci_device_id *id)
++=======
+ static int mlx5_mdev_init(struct mlx5_core_dev *dev, int profile_idx)
++>>>>>>> 1f28d7768f1d (net/mlx5: Move all devlink related functions calls to devlink.c)
  {
 -	struct mlx5_priv *priv = &dev->priv;
 +	struct mlx5_core_dev *dev;
 +	struct devlink *devlink;
 +	struct mlx5_priv *priv;
  	int err;
  
 -	dev->profile = &profile[profile_idx];
 +	devlink = devlink_alloc(&mlx5_devlink_ops, sizeof(*dev));
 +	if (!devlink) {
 +		dev_err(&pdev->dev, "kzalloc failed\n");
 +		return -ENOMEM;
 +	}
 +
 +	dev = devlink_priv(devlink);
 +	priv = &dev->priv;
 +	priv->pci_dev_data = id->driver_data;
 +
 +	pci_set_drvdata(pdev, dev);
 +
 +	dev->pdev = pdev;
 +	dev->profile = &profile[prof_sel];
  
  	INIT_LIST_HEAD(&priv->ctx_list);
  	spin_lock_init(&priv->ctx_lock);
@@@ -1334,9 -1252,55 +1339,51 @@@
  	if (err)
  		goto err_pagealloc_init;
  
++<<<<<<< HEAD
 +	err = mlx5_load_one(dev, priv, true);
++=======
+ 	return 0;
+ 
+ err_pagealloc_init:
+ 	mlx5_health_cleanup(dev);
+ err_health_init:
+ 	debugfs_remove(dev->priv.dbg_root);
+ 
+ 	return err;
+ }
+ 
+ static void mlx5_mdev_uninit(struct mlx5_core_dev *dev)
+ {
+ 	mlx5_pagealloc_cleanup(dev);
+ 	mlx5_health_cleanup(dev);
+ 	debugfs_remove_recursive(dev->priv.dbg_root);
+ }
+ 
+ #define MLX5_IB_MOD "mlx5_ib"
+ static int init_one(struct pci_dev *pdev, const struct pci_device_id *id)
+ {
+ 	struct mlx5_core_dev *dev;
+ 	struct devlink *devlink;
+ 	int err;
+ 
+ 	devlink = mlx5_devlink_alloc();
+ 	if (!devlink) {
+ 		dev_err(&pdev->dev, "devlink alloc failed\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	dev = devlink_priv(devlink);
+ 	dev->device = &pdev->dev;
+ 	dev->pdev = pdev;
+ 
+ 	err = mlx5_mdev_init(dev, prof_sel);
+ 	if (err)
+ 		goto mdev_init_err;
+ 
+ 	err = mlx5_pci_init(dev, pdev, id);
++>>>>>>> 1f28d7768f1d (net/mlx5: Move all devlink related functions calls to devlink.c)
  	if (err) {
 -		mlx5_core_err(dev, "mlx5_pci_init failed with error code %d\n",
 -			      err);
 -		goto pci_init_err;
 -	}
 -
 -	err = mlx5_load_one(dev, true);
 -	if (err) {
 -		mlx5_core_err(dev, "mlx5_load_one failed with error code %d\n",
 -			      err);
 +		dev_err(&pdev->dev, "mlx5_load_one failed with error code %d\n", err);
  		goto err_load_one;
  	}
  
@@@ -1350,15 -1314,14 +1397,23 @@@
  	return 0;
  
  clean_load:
 -	mlx5_unload_one(dev, true);
 -
 +	mlx5_unload_one(dev, priv, true);
  err_load_one:
++<<<<<<< HEAD
 +	mlx5_pagealloc_cleanup(dev);
 +err_pagealloc_init:
 +	mlx5_health_cleanup(dev);
 +close_pci:
 +	mlx5_pci_close(dev, priv);
 +clean_dev:
 +	devlink_free(devlink);
++=======
+ 	mlx5_pci_close(dev);
+ pci_init_err:
+ 	mlx5_mdev_uninit(dev);
+ mdev_init_err:
+ 	mlx5_devlink_free(devlink);
++>>>>>>> 1f28d7768f1d (net/mlx5: Move all devlink related functions calls to devlink.c)
  
  	return err;
  }
@@@ -1367,21 -1330,19 +1422,27 @@@ static void remove_one(struct pci_dev *
  {
  	struct mlx5_core_dev *dev  = pci_get_drvdata(pdev);
  	struct devlink *devlink = priv_to_devlink(dev);
 +	struct mlx5_priv *priv = &dev->priv;
  
- 	devlink_unregister(devlink);
+ 	mlx5_devlink_unregister(devlink);
  	mlx5_unregister_device(dev);
  
 -	if (mlx5_unload_one(dev, true)) {
 -		mlx5_core_err(dev, "mlx5_unload_one failed\n");
 -		mlx5_health_flush(dev);
 +	if (mlx5_unload_one(dev, priv, true)) {
 +		dev_err(&dev->pdev->dev, "mlx5_unload_one failed\n");
 +		mlx5_health_cleanup(dev);
  		return;
  	}
  
++<<<<<<< HEAD
 +	mlx5_pagealloc_cleanup(dev);
 +	mlx5_health_cleanup(dev);
 +	mlx5_pci_close(dev, priv);
 +	devlink_free(devlink);
++=======
+ 	mlx5_pci_close(dev);
+ 	mlx5_mdev_uninit(dev);
+ 	mlx5_devlink_free(devlink);
++>>>>>>> 1f28d7768f1d (net/mlx5: Move all devlink related functions calls to devlink.c)
  }
  
  static pci_ers_result_t mlx5_pci_err_detected(struct pci_dev *pdev,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/Makefile b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 282b26e5f09b..4069628d26b6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@ -15,7 +15,7 @@ mlx5_core-y :=	main.o cmd.o debugfs.o fw.o eq.o uar.o pagealloc.o \
 		health.o mcg.o cq.o alloc.o qp.o port.o mr.o pd.o \
 		transobj.o vport.o sriov.o fs_cmd.o fs_core.o \
 		fs_counters.o rl.o lag.o dev.o events.o wq.o lib/gid.o \
-		lib/devcom.o diag/fs_tracepoint.o diag/fw_tracer.o
+		lib/devcom.o diag/fs_tracepoint.o diag/fw_tracer.o devlink.o
 
 #
 # Netdev basic
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
new file mode 100644
index 000000000000..ed4202e883f0
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@ -0,0 +1,58 @@
+// SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
+/* Copyright (c) 2019 Mellanox Technologies */
+
+#include <devlink.h>
+
+#include "mlx5_core.h"
+#include "eswitch.h"
+
+static int mlx5_devlink_flash_update(struct devlink *devlink,
+				     const char *file_name,
+				     const char *component,
+				     struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+	const struct firmware *fw;
+	int err;
+
+	if (component)
+		return -EOPNOTSUPP;
+
+	err = request_firmware_direct(&fw, file_name, &dev->pdev->dev);
+	if (err)
+		return err;
+
+	return mlx5_firmware_flash(dev, fw, extack);
+}
+
+static const struct devlink_ops mlx5_devlink_ops = {
+#ifdef CONFIG_MLX5_ESWITCH
+	.eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
+	.eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
+	.eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
+	.eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
+	.eswitch_encap_mode_set = mlx5_devlink_eswitch_encap_mode_set,
+	.eswitch_encap_mode_get = mlx5_devlink_eswitch_encap_mode_get,
+#endif
+	.flash_update = mlx5_devlink_flash_update,
+};
+
+struct devlink *mlx5_devlink_alloc()
+{
+	return devlink_alloc(&mlx5_devlink_ops, sizeof(struct mlx5_core_dev));
+}
+
+void mlx5_devlink_free(struct devlink *devlink)
+{
+	devlink_free(devlink);
+}
+
+int mlx5_devlink_register(struct devlink *devlink, struct device *dev)
+{
+	return devlink_register(devlink, dev);
+}
+
+void mlx5_devlink_unregister(struct devlink *devlink)
+{
+	devlink_unregister(devlink);
+}
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/devlink.h b/drivers/net/ethernet/mellanox/mlx5/core/devlink.h
new file mode 100644
index 000000000000..d0ba03774ddf
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
+/* Copyright (c) 2019, Mellanox Technologies */
+
+#ifndef __MLX5_DEVLINK_H__
+#define __MLX5_DEVLINK_H__
+
+#include <net/devlink.h>
+
+struct devlink *mlx5_devlink_alloc(void);
+void mlx5_devlink_free(struct devlink *devlink);
+int mlx5_devlink_register(struct devlink *devlink, struct device *dev);
+void mlx5_devlink_unregister(struct devlink *devlink);
+
+#endif /* __MLX5_DEVLINK_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
