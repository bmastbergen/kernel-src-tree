crypto: arc4 - refactor arc4 core code into separate library

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ard Biesheuvel <ard.biesheuvel@linaro.org>
commit dc51f25752bfcb5f1edbac1ca4ce16af7b3bd507
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/dc51f257.failed

Refactor the core rc4 handling so we can move most users to a library
interface, permitting us to drop the cipher interface entirely in a
future patch. This is part of an effort to simplify the crypto API
and improve its robustness against incorrect use.

	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit dc51f25752bfcb5f1edbac1ca4ce16af7b3bd507)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/arc4.c
#	include/crypto/arc4.h
#	lib/Makefile
diff --cc crypto/arc4.c
index 652d24399afa,d303b7ff1fed..000000000000
--- a/crypto/arc4.c
+++ b/crypto/arc4.c
@@@ -17,15 -18,6 +17,18 @@@
  #include <linux/init.h>
  #include <linux/module.h>
  
++<<<<<<< HEAD
 +#define ARC4_MIN_KEY_SIZE	1
 +#define ARC4_MAX_KEY_SIZE	256
 +#define ARC4_BLOCK_SIZE		1
 +
 +struct arc4_ctx {
 +	u32 S[256];
 +	u32 x, y;
 +};
 +
++=======
++>>>>>>> dc51f25752bf (crypto: arc4 - refactor arc4 core code into separate library)
  static int arc4_set_key(struct crypto_tfm *tfm, const u8 *in_key,
  			unsigned int key_len)
  {
diff --cc lib/Makefile
index b148854c884c,d3daedf93c5a..000000000000
--- a/lib/Makefile
+++ b/lib/Makefile
@@@ -92,6 -102,8 +92,11 @@@ endi
  obj-$(CONFIG_DEBUG_INFO_REDUCED) += debug_info.o
  CFLAGS_debug_info.o += $(call cc-option, -femit-struct-debug-detailed=any)
  
++<<<<<<< HEAD
++=======
+ obj-y += math/ crypto/
+ 
++>>>>>>> dc51f25752bf (crypto: arc4 - refactor arc4 core code into separate library)
  obj-$(CONFIG_GENERIC_IOMAP) += iomap.o
  obj-$(CONFIG_GENERIC_PCI_IOMAP) += pci_iomap.o
  obj-$(CONFIG_HAS_IOMEM) += iomap_copy.o devres.o
* Unmerged path include/crypto/arc4.h
diff --git a/MAINTAINERS b/MAINTAINERS
index 5877cb6661e1..b2030e57bda4 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -3836,6 +3836,7 @@ F:	crypto/
 F:	drivers/crypto/
 F:	include/crypto/
 F:	include/linux/crypto*
+F:	lib/crypto/
 
 CRYPTOGRAPHIC RANDOM NUMBER GENERATOR
 M:	Neil Horman <nhorman@tuxdriver.com>
diff --git a/crypto/Kconfig b/crypto/Kconfig
index f3e40ac56d93..eea86349593e 100644
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -1191,9 +1191,13 @@ config CRYPTO_ANUBIS
 	  <https://www.cosic.esat.kuleuven.be/nessie/reports/>
 	  <http://www.larc.usp.br/~pbarreto/AnubisPage.html>
 
+config CRYPTO_LIB_ARC4
+	tristate
+
 config CRYPTO_ARC4
 	tristate "ARC4 cipher algorithm"
 	select CRYPTO_BLKCIPHER
+	select CRYPTO_LIB_ARC4
 	help
 	  ARC4 cipher algorithm.
 
* Unmerged path crypto/arc4.c
* Unmerged path include/crypto/arc4.h
* Unmerged path lib/Makefile
diff --git a/lib/crypto/Makefile b/lib/crypto/Makefile
new file mode 100644
index 000000000000..88195c34932d
--- /dev/null
+++ b/lib/crypto/Makefile
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0
+
+obj-$(CONFIG_CRYPTO_LIB_ARC4) += libarc4.o
+libarc4-y := arc4.o
diff --git a/lib/crypto/arc4.c b/lib/crypto/arc4.c
new file mode 100644
index 000000000000..c2020f19c652
--- /dev/null
+++ b/lib/crypto/arc4.c
@@ -0,0 +1,74 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Cryptographic API
+ *
+ * ARC4 Cipher Algorithm
+ *
+ * Jon Oberheide <jon@oberheide.org>
+ */
+
+#include <crypto/arc4.h>
+#include <linux/module.h>
+
+int arc4_setkey(struct arc4_ctx *ctx, const u8 *in_key, unsigned int key_len)
+{
+	int i, j = 0, k = 0;
+
+	ctx->x = 1;
+	ctx->y = 0;
+
+	for (i = 0; i < 256; i++)
+		ctx->S[i] = i;
+
+	for (i = 0; i < 256; i++) {
+		u32 a = ctx->S[i];
+
+		j = (j + in_key[k] + a) & 0xff;
+		ctx->S[i] = ctx->S[j];
+		ctx->S[j] = a;
+		if (++k >= key_len)
+			k = 0;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(arc4_setkey);
+
+void arc4_crypt(struct arc4_ctx *ctx, u8 *out, const u8 *in, unsigned int len)
+{
+	u32 *const S = ctx->S;
+	u32 x, y, a, b;
+	u32 ty, ta, tb;
+
+	if (len == 0)
+		return;
+
+	x = ctx->x;
+	y = ctx->y;
+
+	a = S[x];
+	y = (y + a) & 0xff;
+	b = S[y];
+
+	do {
+		S[y] = a;
+		a = (a + b) & 0xff;
+		S[x] = b;
+		x = (x + 1) & 0xff;
+		ta = S[x];
+		ty = (y + ta) & 0xff;
+		tb = S[ty];
+		*out++ = *in++ ^ S[a];
+		if (--len == 0)
+			break;
+		y = ty;
+		a = ta;
+		b = tb;
+	} while (true);
+
+	ctx->x = x;
+	ctx->y = y;
+}
+EXPORT_SYMBOL(arc4_crypt);
+
+MODULE_LICENSE("GPL");
