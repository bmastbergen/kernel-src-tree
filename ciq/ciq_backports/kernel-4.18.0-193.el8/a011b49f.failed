net/mlx5e: Consider XSK in XDP MTU limit calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5e: Consider XSK in XDP MTU limit calculation (Alaa Hleihel) [1724336]
Rebuild_FUZZ: 96.00%
commit-author Maxim Mikityanskiy <maximmi@mellanox.com>
commit a011b49f4ed7813777a15da12a426ab939c58f14
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/a011b49f.failed

Use the existing mlx5e_get_linear_rq_headroom function to calculate the
headroom for mlx5e_xdp_max_mtu. This function takes the XSK headroom
into consideration, which will be used in the following patches.

	Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Acked-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit a011b49f4ed7813777a15da12a426ab939c58f14)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/params.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/params.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/params.c
index fa6661ea6310,0de908b12fcc..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.c
@@@ -3,19 -3,48 +3,26 @@@
  
  #include "en/params.h"
  
 -static inline bool mlx5e_rx_is_xdp(struct mlx5e_params *params,
 -				   struct mlx5e_xsk_param *xsk)
 +u32 mlx5e_rx_get_linear_frag_sz(struct mlx5e_params *params)
  {
 -	return params->xdp_prog || xsk;
 -}
 -
 +	u16 hw_mtu = MLX5E_SW2HW_MTU(params, params->sw_mtu);
 +	u16 linear_rq_headroom = params->xdp_prog ?
 +		XDP_PACKET_HEADROOM : MLX5_RX_HEADROOM;
 +	u32 frag_sz;
 +
++<<<<<<< HEAD
 +	linear_rq_headroom += NET_IP_ALIGN;
++=======
+ u16 mlx5e_get_linear_rq_headroom(struct mlx5e_params *params,
+ 				 struct mlx5e_xsk_param *xsk)
+ {
+ 	u16 headroom = NET_IP_ALIGN;
++>>>>>>> a011b49f4ed7 (net/mlx5e: Consider XSK in XDP MTU limit calculation)
  
 -	if (mlx5e_rx_is_xdp(params, xsk)) {
 -		headroom += XDP_PACKET_HEADROOM;
 -		if (xsk)
 -			headroom += xsk->headroom;
 -	} else {
 -		headroom += MLX5_RX_HEADROOM;
 -	}
 -
 -	return headroom;
 -}
 -
 -u32 mlx5e_rx_get_linear_frag_sz(struct mlx5e_params *params,
 -				struct mlx5e_xsk_param *xsk)
 -{
 -	u32 hw_mtu = MLX5E_SW2HW_MTU(params, params->sw_mtu);
 -	u16 linear_rq_headroom = mlx5e_get_linear_rq_headroom(params, xsk);
 -	u32 frag_sz = linear_rq_headroom + hw_mtu;
 -
 -	/* AF_XDP doesn't build SKBs in place. */
 -	if (!xsk)
 -		frag_sz = MLX5_SKB_FRAG_SZ(frag_sz);
 -
 -	/* XDP in mlx5e doesn't support multiple packets per page. */
 -	if (mlx5e_rx_is_xdp(params, xsk))
 -		frag_sz = max_t(u32, frag_sz, PAGE_SIZE);
 +	frag_sz = MLX5_SKB_FRAG_SZ(linear_rq_headroom + hw_mtu);
  
 -	/* Even if we can go with a smaller fragment size, we must not put
 -	 * multiple packets into a single frame.
 -	 */
 -	if (xsk)
 -		frag_sz = max_t(u32, frag_sz, xsk->chunk_size);
 +	if (params->xdp_prog && frag_sz < PAGE_SIZE)
 +		frag_sz = PAGE_SIZE;
  
  	return frag_sz;
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/params.h
index 0ef1436c4c76,7f29b82dd8c2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/params.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/params.h
@@@ -6,10 -6,17 +6,22 @@@
  
  #include "en.h"
  
++<<<<<<< HEAD
 +u32 mlx5e_rx_get_linear_frag_sz(struct mlx5e_params *params);
++=======
+ struct mlx5e_xsk_param {
+ 	u16 headroom;
+ 	u16 chunk_size;
+ };
+ 
+ u16 mlx5e_get_linear_rq_headroom(struct mlx5e_params *params,
+ 				 struct mlx5e_xsk_param *xsk);
+ u32 mlx5e_rx_get_linear_frag_sz(struct mlx5e_params *params,
+ 				struct mlx5e_xsk_param *xsk);
++>>>>>>> a011b49f4ed7 (net/mlx5e: Consider XSK in XDP MTU limit calculation)
  u8 mlx5e_mpwqe_log_pkts_per_wqe(struct mlx5e_params *params);
 -bool mlx5e_rx_is_linear_skb(struct mlx5e_params *params);
 +bool mlx5e_rx_is_linear_skb(struct mlx5_core_dev *mdev,
 +			    struct mlx5e_params *params);
  bool mlx5e_rx_mpwqe_is_linear_skb(struct mlx5_core_dev *mdev,
  				  struct mlx5e_params *params);
  u8 mlx5e_mpwqe_get_log_rq_size(struct mlx5e_params *params);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/params.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/params.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
index 1364bdff702c..ee99efde9143 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
@@ -32,10 +32,11 @@
 
 #include <linux/bpf_trace.h>
 #include "en/xdp.h"
+#include "en/params.h"
 
-int mlx5e_xdp_max_mtu(struct mlx5e_params *params)
+int mlx5e_xdp_max_mtu(struct mlx5e_params *params, struct mlx5e_xsk_param *xsk)
 {
-	int hr = NET_IP_ALIGN + XDP_PACKET_HEADROOM;
+	int hr = mlx5e_get_linear_rq_headroom(params, xsk);
 
 	/* Let S := SKB_DATA_ALIGN(sizeof(struct skb_shared_info)).
 	 * The condition checked in mlx5e_rx_is_linear_skb is:
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
index 86db5ad49a42..9200cb9f499b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
@@ -39,7 +39,8 @@
 	(sizeof(struct mlx5e_tx_wqe) / MLX5_SEND_WQE_DS)
 #define MLX5E_XDP_TX_DS_COUNT (MLX5E_XDP_TX_EMPTY_DS_COUNT + 1 /* SG DS */)
 
-int mlx5e_xdp_max_mtu(struct mlx5e_params *params);
+struct mlx5e_xsk_param;
+int mlx5e_xdp_max_mtu(struct mlx5e_params *params, struct mlx5e_xsk_param *xsk);
 bool mlx5e_xdp_handle(struct mlx5e_rq *rq, struct mlx5e_dma_info *di,
 		      void *va, u16 *rx_headroom, u32 *len);
 bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index c389378c3be2..56b82c1c12ab 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -3719,7 +3719,7 @@ int mlx5e_change_mtu(struct net_device *netdev, int new_mtu,
 	if (params->xdp_prog &&
 	    !mlx5e_rx_is_linear_skb(priv->mdev, &new_channels.params)) {
 		netdev_err(netdev, "MTU(%d) > %d is not allowed while XDP enabled\n",
-			   new_mtu, mlx5e_xdp_max_mtu(params));
+			   new_mtu, mlx5e_xdp_max_mtu(params, NULL));
 		err = -EINVAL;
 		goto out;
 	}
@@ -4164,7 +4164,7 @@ static int mlx5e_xdp_allowed(struct mlx5e_priv *priv, struct bpf_prog *prog)
 	if (!mlx5e_rx_is_linear_skb(priv->mdev, &new_channels.params)) {
 		netdev_warn(netdev, "XDP is not allowed with MTU(%d) > %d\n",
 			    new_channels.params.sw_mtu,
-			    mlx5e_xdp_max_mtu(&new_channels.params));
+			    mlx5e_xdp_max_mtu(&new_channels.params, NULL));
 		return -EINVAL;
 	}
 
