tcp: add data bytes retransmitted stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Wei Wang <weiwan@google.com>
commit fb31c9b9f6c85b1bad569ecedbde78d9e37cd87b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/fb31c9b9.failed

Introduce a new TCP stat to record the number of bytes retransmitted
(RFC4898 tcpEStatsPerfOctetsRetrans) and expose it in both tcp_info
(TCP_INFO) and opt_stats (SOF_TIMESTAMPING_OPT_STATS).

	Signed-off-by: Wei Wang <weiwan@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Neal Cardwell <ncardwell@google.com>
	Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
	Acked-by: Yuchung Cheng <ycheng@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fb31c9b9f6c85b1bad569ecedbde78d9e37cd87b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/tcp.h
#	net/ipv4/tcp.c
diff --cc include/uapi/linux/tcp.h
index e3f6ed8a7064,c31f5100b744..000000000000
--- a/include/uapi/linux/tcp.h
+++ b/include/uapi/linux/tcp.h
@@@ -235,6 -235,9 +235,12 @@@ struct tcp_info 
  
  	__u32	tcpi_delivered;
  	__u32	tcpi_delivered_ce;
++<<<<<<< HEAD
++=======
+ 
+ 	__u64	tcpi_bytes_sent;     /* RFC4898 tcpEStatsPerfHCDataOctetsOut */
+ 	__u64	tcpi_bytes_retrans;  /* RFC4898 tcpEStatsPerfOctetsRetrans */
++>>>>>>> fb31c9b9f6c8 (tcp: add data bytes retransmitted stats)
  };
  
  /* netlink attributes types for SCM_TIMESTAMPING_OPT_STATS */
@@@ -257,7 -260,8 +263,12 @@@ enum 
  	TCP_NLA_SND_SSTHRESH,	/* Slow start size threshold */
  	TCP_NLA_DELIVERED,	/* Data pkts delivered incl. out-of-order */
  	TCP_NLA_DELIVERED_CE,	/* Like above but only ones w/ CE marks */
++<<<<<<< HEAD
 +
++=======
+ 	TCP_NLA_BYTES_SENT,	/* Data bytes sent including retransmission */
+ 	TCP_NLA_BYTES_RETRANS,	/* Data bytes retransmitted */
++>>>>>>> fb31c9b9f6c8 (tcp: add data bytes retransmitted stats)
  };
  
  /* for TCP_MD5SIG socket option */
diff --cc net/ipv4/tcp.c
index 6da266d09f97,5ed1be88e922..000000000000
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@@ -2611,8 -2594,8 +2611,13 @@@ int tcp_disconnect(struct sock *sk, in
  	sk->sk_rx_dst = NULL;
  	tcp_saved_syn_free(tp);
  	tp->compressed_ack = 0;
++<<<<<<< HEAD
 +	tp->bytes_acked = 0;
 +	tp->bytes_received = 0;
++=======
+ 	tp->bytes_sent = 0;
+ 	tp->bytes_retrans = 0;
++>>>>>>> fb31c9b9f6c8 (tcp: add data bytes retransmitted stats)
  
  	/* Clean up fastopen related fields */
  	tcp_free_fastopen_req(tp);
@@@ -3222,6 -3203,8 +3227,11 @@@ void tcp_get_info(struct sock *sk, stru
  		info->tcpi_delivery_rate = rate64;
  	info->tcpi_delivered = tp->delivered;
  	info->tcpi_delivered_ce = tp->delivered_ce;
++<<<<<<< HEAD
++=======
+ 	info->tcpi_bytes_sent = tp->bytes_sent;
+ 	info->tcpi_bytes_retrans = tp->bytes_retrans;
++>>>>>>> fb31c9b9f6c8 (tcp: add data bytes retransmitted stats)
  	unlock_sock_fast(sk, slow);
  }
  EXPORT_SYMBOL_GPL(tcp_get_info);
@@@ -3246,6 -3229,8 +3256,11 @@@ static size_t tcp_opt_stats_get_size(vo
  		nla_total_size(sizeof(u32)) + /* TCP_NLA_SND_SSTHRESH */
  		nla_total_size(sizeof(u32)) + /* TCP_NLA_DELIVERED */
  		nla_total_size(sizeof(u32)) + /* TCP_NLA_DELIVERED_CE */
++<<<<<<< HEAD
++=======
+ 		nla_total_size_64bit(sizeof(u64)) + /* TCP_NLA_BYTES_SENT */
+ 		nla_total_size_64bit(sizeof(u64)) + /* TCP_NLA_BYTES_RETRANS */
++>>>>>>> fb31c9b9f6c8 (tcp: add data bytes retransmitted stats)
  		0;
  }
  
@@@ -3293,6 -3278,11 +3308,14 @@@ struct sk_buff *tcp_get_timestamping_op
  	nla_put_u32(stats, TCP_NLA_SNDQ_SIZE, tp->write_seq - tp->snd_una);
  	nla_put_u8(stats, TCP_NLA_CA_STATE, inet_csk(sk)->icsk_ca_state);
  
++<<<<<<< HEAD
++=======
+ 	nla_put_u64_64bit(stats, TCP_NLA_BYTES_SENT, tp->bytes_sent,
+ 			  TCP_NLA_PAD);
+ 	nla_put_u64_64bit(stats, TCP_NLA_BYTES_RETRANS, tp->bytes_retrans,
+ 			  TCP_NLA_PAD);
+ 
++>>>>>>> fb31c9b9f6c8 (tcp: add data bytes retransmitted stats)
  	return stats;
  }
  
diff --git a/include/linux/tcp.h b/include/linux/tcp.h
index 8c66475339ed..71d13bd966dc 100644
--- a/include/linux/tcp.h
+++ b/include/linux/tcp.h
@@ -331,6 +331,9 @@ struct tcp_sock {
 				 * the first SYN. */
 	u32	undo_marker;	/* snd_una upon a new recovery episode. */
 	int	undo_retrans;	/* number of undoable retransmissions. */
+	u64	bytes_retrans;	/* RFC4898 tcpEStatsPerfOctetsRetrans
+				 * Total data bytes retransmitted
+				 */
 	u32	total_retrans;	/* Total retransmits for entire connection */
 
 	u32	urg_seq;	/* Seq of received urgent pointer */
* Unmerged path include/uapi/linux/tcp.h
* Unmerged path net/ipv4/tcp.c
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index 97e11e678888..3c118755ecc9 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -2918,6 +2918,7 @@ int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs)
 	if (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN)
 		__NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPSYNRETRANS);
 	tp->total_retrans += segs;
+	tp->bytes_retrans += skb->len;
 
 	/* make sure skb->data is aligned on arches that require it
 	 * and check if ack-trimming & collapsing extended the headroom
