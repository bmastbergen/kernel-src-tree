libceph: use sock_no_sendpage() as a fallback in ceph_tcp_sendpage()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 3239eb5215ebdef593a79316c9dbbdf8849166ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/3239eb52.failed

sock_no_sendpage() makes the code cleaner.

Also, don't set MSG_EOR.  sendpage doesn't act on MSG_EOR on its own,
it just honors the setting from the preceding sendmsg call by looking
at ->eor in tcp_skb_can_collapse_to().

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 3239eb5215ebdef593a79316c9dbbdf8849166ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/messenger.c
diff --cc net/ceph/messenger.c
index 84b36e9bd1ee,21a743a3bd29..000000000000
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@@ -589,19 -577,11 +577,16 @@@ static int ceph_tcp_sendpage(struct soc
  	 * triggers one of hardened usercopy checks.
  	 */
  	if (page_count(page) >= 1 && !PageSlab(page))
- 		return __ceph_tcp_sendpage(sock, page, offset, size, more);
- 
- 	bvec.bv_page = page;
- 	bvec.bv_offset = offset;
- 	bvec.bv_len = size;
- 
- 	if (more)
- 		msg.msg_flags |= MSG_MORE;
+ 		sendpage = sock->ops->sendpage;
  	else
- 		msg.msg_flags |= MSG_EOR;  /* superfluous, but what the hell */
+ 		sendpage = sock_no_sendpage;
  
++<<<<<<< HEAD
 +	iov_iter_bvec(&msg.msg_iter, WRITE | ITER_BVEC, &bvec, 1, size);
 +	ret = sock_sendmsg(sock, &msg);
++=======
+ 	ret = sendpage(sock, page, offset, size, flags);
++>>>>>>> 3239eb5215eb (libceph: use sock_no_sendpage() as a fallback in ceph_tcp_sendpage())
  	if (ret == -EAGAIN)
  		ret = 0;
  
* Unmerged path net/ceph/messenger.c
