libbpf: implement BPF CO-RE offset relocation algorithm

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit ddc7c3042614e273044f698d2beab25cc3842d45
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ddc7c304.failed

This patch implements the core logic for BPF CO-RE offsets relocations.
Every instruction that needs to be relocated has corresponding
bpf_offset_reloc as part of BTF.ext. Relocations are performed by trying
to match recorded "local" relocation spec against potentially many
compatible "target" types, creating corresponding spec. Details of the
algorithm are noted in corresponding comments in the code.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit ddc7c3042614e273044f698d2beab25cc3842d45)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 70dc223cca5a,3abf2dd1b3b5..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -1105,10 -1110,10 +1105,15 @@@ static int bpf_object__init_user_btf_ma
  		return -EOPNOTSUPP;
  	}
  
++<<<<<<< HEAD
 +	def = skip_mods_and_typedefs(obj->btf, var->type);
 +	if (BTF_INFO_KIND(def->info) != BTF_KIND_STRUCT) {
++=======
+ 	def = skip_mods_and_typedefs(obj->btf, var->type, NULL);
+ 	if (!btf_is_struct(def)) {
++>>>>>>> ddc7c3042614 (libbpf: implement BPF CO-RE offset relocation algorithm)
  		pr_warning("map '%s': unexpected def kind %u.\n",
 -			   map_name, btf_kind(var));
 +			   map_name, BTF_INFO_KIND(var->info));
  		return -EINVAL;
  	}
  	if (def->size > vi->size) {
* Unmerged path tools/lib/bpf/libbpf.c
diff --git a/tools/lib/bpf/libbpf.h b/tools/lib/bpf/libbpf.h
index 5cbf459ece0b..6004bfe1ebf0 100644
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -92,6 +92,7 @@ LIBBPF_API void bpf_object__close(struct bpf_object *object);
 struct bpf_object_load_attr {
 	struct bpf_object *obj;
 	int log_level;
+	const char *target_btf_path;
 };
 
 /* Load/unload object into/from kernel */
