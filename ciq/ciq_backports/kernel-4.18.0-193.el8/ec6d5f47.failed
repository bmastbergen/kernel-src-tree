libbpf: Unpin auto-pinned maps if loading fails

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit ec6d5f47bfe36f46aa0de707e5beb2f58d96b76d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/ec6d5f47.failed

Since the automatic map-pinning happens during load, it will leave pinned
maps around if the load fails at a later stage. Fix this by unpinning any
pinned maps on cleanup. To avoid unpinning pinned maps that were reused
rather than newly pinned, add a new boolean property on struct bpf_map to
keep track of whether that map was reused or not; and only unpin those maps
that were not reused.

Fixes: 57a00f41644f ("libbpf: Add auto-pinning of maps when loading BPF objects")
	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: David S. Miller <davem@davemloft.net>
	Acked-by: Song Liu <songliubraving@fb.com>
Link: https://lore.kernel.org/bpf/157333184731.88376.9992935027056165873.stgit@toke.dk
(cherry picked from commit ec6d5f47bfe36f46aa0de707e5beb2f58d96b76d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index d91bdfbf910b,d8ead85903d1..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -220,6 -227,9 +220,12 @@@ struct bpf_map 
  	void *priv;
  	bpf_map_clear_priv_t clear_priv;
  	enum libbpf_map_type libbpf_type;
++<<<<<<< HEAD
++=======
+ 	char *pin_path;
+ 	bool pinned;
+ 	bool reused;
++>>>>>>> ec6d5f47bfe3 (libbpf: Unpin auto-pinned maps if loading fails)
  };
  
  struct bpf_secdata {
@@@ -2825,8 -4049,13 +2832,13 @@@ int bpf_object__load_xattr(struct bpf_o
  
  	return 0;
  out:
+ 	/* unpin any maps that were auto-pinned during load */
+ 	for (i = 0; i < obj->nr_maps; i++)
+ 		if (obj->maps[i].pinned && !obj->maps[i].reused)
+ 			bpf_map__unpin(&obj->maps[i], NULL);
+ 
  	bpf_object__unload(obj);
 -	pr_warn("failed to load object '%s'\n", obj->path);
 +	pr_warning("failed to load object '%s'\n", obj->path);
  	return err;
  }
  
* Unmerged path tools/lib/bpf/libbpf.c
