net/mlx5: Generalize IRQ interface to work with irq_table

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5: Generalize IRQ interface to work with irq_table (Alaa Hleihel) [1724336]
Rebuild_FUZZ: 96.36%
commit-author Yuval Avnery <yuvalav@mellanox.com>
commit bfb49549ea7993f49c0374295d84a0c7772102a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/bfb49549.failed

IRQ interface should operate within the irq_table context.
It should be independent of any EQ data structure.

The interface that will be exposed:
init/clenup, create/destroy, attach/detach

	Signed-off-by: Yuval Avnery <yuvalav@mellanox.com>
	Reviewed-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit bfb49549ea7993f49c0374295d84a0c7772102a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eq.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eq.c
index c00cfa7a9ba0,80a436b5034a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@@ -109,23 -114,51 +109,29 @@@ struct mlx5_eq_table 
  			       (1ull << MLX5_EVENT_TYPE_SRQ_LAST_WQE)	    | \
  			       (1ull << MLX5_EVENT_TYPE_SRQ_RQ_LIMIT))
  
 -int mlx5_irq_table_init(struct mlx5_core_dev *dev)
 -{
 -	struct mlx5_irq_table *irq_table;
 -
 -	irq_table = kvzalloc(sizeof(*irq_table), GFP_KERNEL);
 -	if (!irq_table)
 -		return -ENOMEM;
 -
 -	dev->priv.irq_table = irq_table;
 -	return 0;
 -}
 -
 -void mlx5_irq_table_cleanup(struct mlx5_core_dev *dev)
 -{
 -	kvfree(dev->priv.irq_table);
 -}
 -
 -static int mlx5_irq_get_num_comp(struct mlx5_irq_table *table)
 -{
 -	return table->nvec - MLX5_EQ_VEC_COMP_BASE;
 -}
 -
  static struct mlx5_irq_info *mlx5_irq_get(struct mlx5_core_dev *dev, int vecidx)
  {
 -	struct mlx5_irq_table *irq_table = dev->priv.irq_table;
 +	struct mlx5_eq_table *eq_table = dev->priv.eq_table;
  
 -	return &irq_table->irq_info[vecidx];
 +	return &eq_table->irq_info[vecidx];
  }
  
- static int mlx5_irq_attach_nb(struct mlx5_irq_info *irq,
+ static int mlx5_irq_attach_nb(struct mlx5_irq_table *irq_table, int vecidx,
  			      struct notifier_block *nb)
  {
- 	return atomic_notifier_chain_register(&irq->nh, nb);
+ 	struct mlx5_irq_info *irq_info;
+ 
+ 	irq_info = &irq_table->irq_info[vecidx];
+ 	return atomic_notifier_chain_register(&irq_info->nh, nb);
  }
  
- static int mlx5_irq_detach_nb(struct mlx5_irq_info *irq,
+ static int mlx5_irq_detach_nb(struct mlx5_irq_table *irq_table, int vecidx,
  			      struct notifier_block *nb)
  {
- 	return atomic_notifier_chain_unregister(&irq->nh, nb);
+ 	struct mlx5_irq_info *irq_info;
+ 
+ 	irq_info = &irq_table->irq_info[vecidx];
+ 	return atomic_notifier_chain_unregister(&irq_info->nh, nb);
  }
  
  static irqreturn_t mlx5_irq_int_handler(int irq, void *nh)
@@@ -973,15 -1040,22 +987,31 @@@ mlx5_irq_get_affinity_mask(struct mlx5_
  struct cpumask *
  mlx5_comp_irq_get_affinity_mask(struct mlx5_core_dev *dev, int vector)
  {
++<<<<<<< HEAD
 +	/* TODO: consider irq_get_affinity_mask(irq) */
 +	return dev->priv.eq_table->irq_info[vector + MLX5_EQ_VEC_COMP_BASE].mask;
++=======
+ 	int vecidx = vector + MLX5_EQ_VEC_COMP_BASE;
+ 
+ 	return mlx5_irq_get_affinity_mask(dev->priv.eq_table->irq_table,
+ 					  vecidx);
++>>>>>>> bfb49549ea79 (net/mlx5: Generalize IRQ interface to work with irq_table)
  }
  EXPORT_SYMBOL(mlx5_comp_irq_get_affinity_mask);
  
  #ifdef CONFIG_RFS_ACCEL
+ static struct cpu_rmap *mlx5_irq_get_rmap(struct mlx5_irq_table *irq_table)
+ {
+ 	return irq_table->rmap;
+ }
+ 
  struct cpu_rmap *mlx5_eq_table_get_rmap(struct mlx5_core_dev *dev)
  {
++<<<<<<< HEAD
 +	return dev->priv.eq_table->rmap;
++=======
+ 	return mlx5_irq_get_rmap(dev->priv.eq_table->irq_table);
++>>>>>>> bfb49549ea79 (net/mlx5: Generalize IRQ interface to work with irq_table)
  }
  #endif
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eq.c
