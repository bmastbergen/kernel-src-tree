iommu/vt-d: Implement is_attach_deferred iommu ops entry

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [iommu] vt-d: Implement is_attach_deferred iommu ops entry (Jerry Snitselaar) [1742234]
Rebuild_FUZZ: 94.34%
commit-author Lu Baolu <baolu.lu@linux.intel.com>
commit 8af46c784ecfe8929f66b5eaae987f6874953226
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/8af46c78.failed

As a domain is now attached to a device earlier, we should
implement the is_attach_deferred call-back and use it to
defer the domain attach from iommu driver init to device
driver init when iommu is pre-enabled in kdump kernel.

	Suggested-by: Tom Murphy <tmurphy@arista.com>
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 8af46c784ecfe8929f66b5eaae987f6874953226)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel-iommu.c
diff --cc drivers/iommu/intel-iommu.c
index 2e309c5bf99c,c8b73802f0e0..000000000000
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@@ -356,6 -352,9 +356,12 @@@ static void domain_context_clear(struc
  				 struct device *dev);
  static int domain_detach_iommu(struct dmar_domain *domain,
  			       struct intel_iommu *iommu);
++<<<<<<< HEAD
++=======
+ static bool device_is_rmrr_locked(struct device *dev);
+ static int intel_iommu_attach_device(struct iommu_domain *domain,
+ 				     struct device *dev);
++>>>>>>> 8af46c784ecf (iommu/vt-d: Implement is_attach_deferred iommu ops entry)
  
  #ifdef CONFIG_INTEL_IOMMU_DEFAULT_ON
  int dmar_disabled = 0;
@@@ -5703,6 -5835,21 +5723,24 @@@ intel_iommu_dev_feat_enabled(struct dev
  	return false;
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ intel_iommu_aux_get_pasid(struct iommu_domain *domain, struct device *dev)
+ {
+ 	struct dmar_domain *dmar_domain = to_dmar_domain(domain);
+ 
+ 	return dmar_domain->default_pasid > 0 ?
+ 			dmar_domain->default_pasid : -EINVAL;
+ }
+ 
+ static bool intel_iommu_is_attach_deferred(struct iommu_domain *domain,
+ 					   struct device *dev)
+ {
+ 	return dev->archdata.iommu == DEFER_DEVICE_DOMAIN_INFO;
+ }
+ 
++>>>>>>> 8af46c784ecf (iommu/vt-d: Implement is_attach_deferred iommu ops entry)
  const struct iommu_ops intel_iommu_ops = {
  	.capable		= intel_iommu_capable,
  	.domain_alloc		= intel_iommu_domain_alloc,
* Unmerged path drivers/iommu/intel-iommu.c
