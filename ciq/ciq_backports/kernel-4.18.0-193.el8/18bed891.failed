af_packet: fix the tx skb protocol in raw sockets with ETH_P_ALL

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Yoshiki Komachi <komachi.yoshiki@lab.ntt.co.jp>
commit 18bed89107a400af0d672ec85a270f1545db2569
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/18bed891.failed

I am using "protocol ip" filters in TC to manipulate TC flower
classifiers, which are only available with "protocol ip". However,
I faced an issue that packets sent via raw sockets with ETH_P_ALL
did not match the ip filters even if they did satisfy the condition
(e.g., DHCP offer from dhcpd).

I have determined that the behavior was caused by an unexpected
value stored in skb->protocol, namely, ETH_P_ALL instead of ETH_P_IP,
when packets were sent via raw sockets with ETH_P_ALL set.

IMHO, storing ETH_P_ALL in skb->protocol is not appropriate for
packets sent via raw sockets because ETH_P_ALL is not a real ether
type used on wire, but a virtual one.

This patch fixes the tx protocol selection in cases of transmission
via raw sockets created with ETH_P_ALL so that it asks the driver to
extract protocol from the Ethernet header.

Fixes: 75c65772c3 ("net/packet: Ask driver for protocol if not provided by user")
	Signed-off-by: Yoshiki Komachi <komachi.yoshiki@lab.ntt.co.jp>
	Acked-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 18bed89107a400af0d672ec85a270f1545db2569)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/packet/af_packet.c
diff --cc net/packet/af_packet.c
index be29c5f08129,323655a25674..000000000000
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@@ -1850,6 -1850,16 +1850,19 @@@ oom
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void packet_parse_headers(struct sk_buff *skb, struct socket *sock)
+ {
+ 	if ((!skb->protocol || skb->protocol == htons(ETH_P_ALL)) &&
+ 	    sock->type == SOCK_RAW) {
+ 		skb_reset_mac_header(skb);
+ 		skb->protocol = dev_parse_header_protocol(skb);
+ 	}
+ 
+ 	skb_probe_transport_header(skb);
+ }
++>>>>>>> 18bed89107a4 (af_packet: fix the tx skb protocol in raw sockets with ETH_P_ALL)
  
  /*
   *	Output a raw packet to a device layer. This bypasses all the other
* Unmerged path net/packet/af_packet.c
