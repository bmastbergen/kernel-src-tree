intel_rapl: support 64 bit register

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Zhang Rui <rui.zhang@intel.com>
commit d978e755aabe215cb67bf713e103ed3916ec306d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/d978e755.failed

RAPL MMIO interface uses 64 bit registers, thus force use 64 bit register
for all the RAPL code.

	Reviewed-by: Pandruvada, Srinivas <srinivas.pandruvada@intel.com>
	Tested-by: Pandruvada, Srinivas <srinivas.pandruvada@intel.com>
	Signed-off-by: Zhang Rui <rui.zhang@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit d978e755aabe215cb67bf713e103ed3916ec306d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/powercap/intel_rapl.c
#	drivers/powercap/intel_rapl_msr.c
diff --cc drivers/powercap/intel_rapl.c
index cb3f68ebdb60,8e4de036f6d0..000000000000
--- a/drivers/powercap/intel_rapl.c
+++ b/drivers/powercap/intel_rapl.c
@@@ -785,8 -749,8 +785,13 @@@ static int rapl_check_unit_core(struct 
  	ra.reg = rp->priv->reg_unit;
  	ra.mask = ~0;
  	if (rp->priv->read_raw(cpu, &ra)) {
++<<<<<<< HEAD:drivers/powercap/intel_rapl.c
 +		pr_err("Failed to read power unit REG 0x%x on CPU %d, exit.\n",
 +			rp->priv->reg_unit, cpu);
++=======
+ 		pr_err("Failed to read power unit REG 0x%llx on CPU %d, exit.\n",
+ 		       rp->priv->reg_unit, cpu);
++>>>>>>> d978e755aabe (intel_rapl: support 64 bit register):drivers/powercap/intel_rapl_common.c
  		return -ENODEV;
  	}
  
@@@ -813,8 -777,8 +818,13 @@@ static int rapl_check_unit_atom(struct 
  	ra.reg = rp->priv->reg_unit;
  	ra.mask = ~0;
  	if (rp->priv->read_raw(cpu, &ra)) {
++<<<<<<< HEAD:drivers/powercap/intel_rapl.c
 +		pr_err("Failed to read power unit REG 0x%x on CPU %d, exit.\n",
 +			rp->priv->reg_unit, cpu);
++=======
+ 		pr_err("Failed to read power unit REG 0x%llx on CPU %d, exit.\n",
+ 		       rp->priv->reg_unit, cpu);
++>>>>>>> d978e755aabe (intel_rapl: support 64 bit register):drivers/powercap/intel_rapl_common.c
  		return -ENODEV;
  	}
  
* Unmerged path drivers/powercap/intel_rapl_msr.c
* Unmerged path drivers/powercap/intel_rapl.c
* Unmerged path drivers/powercap/intel_rapl_msr.c
diff --git a/include/linux/intel_rapl.h b/include/linux/intel_rapl.h
index ff215d64d114..baa3fb306b47 100644
--- a/include/linux/intel_rapl.h
+++ b/include/linux/intel_rapl.h
@@ -78,7 +78,7 @@ struct rapl_package;
 struct rapl_domain {
 	const char *name;
 	enum rapl_domain_type id;
-	int regs[RAPL_DOMAIN_REG_MAX];
+	u64 regs[RAPL_DOMAIN_REG_MAX];
 	struct powercap_zone power_zone;
 	struct rapl_domain_data rdd;
 	struct rapl_power_limit rpl[NR_POWER_LIMITS];
@@ -89,7 +89,7 @@ struct rapl_domain {
 };
 
 struct reg_action {
-	u32 reg;
+	u64 reg;
 	u64 mask;
 	u64 value;
 	int err;
@@ -113,8 +113,8 @@ struct rapl_if_priv {
 	struct powercap_control_type *control_type;
 	struct rapl_domain *platform_rapl_domain;
 	enum cpuhp_state pcap_rapl_online;
-	u32 reg_unit;
-	u32 regs[RAPL_DOMAIN_MAX][RAPL_DOMAIN_REG_MAX];
+	u64 reg_unit;
+	u64 regs[RAPL_DOMAIN_MAX][RAPL_DOMAIN_REG_MAX];
 	int (*read_raw)(int cpu, struct reg_action *ra);
 	int (*write_raw)(int cpu, struct reg_action *ra);
 };
