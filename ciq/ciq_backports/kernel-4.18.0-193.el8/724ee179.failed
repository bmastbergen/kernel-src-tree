net/mlx5e: Simplify querying port representor parent id

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
Rebuild_CHGLOG: - [netdrv] mlx5e: Simplify querying port representor parent id (Alaa Hleihel) [1663231 1724336]
Rebuild_FUZZ: 96.23%
commit-author Parav Pandit <parav@mellanox.com>
commit 724ee17912c9a8e5362751a22fd955166ed0550a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/724ee179.failed

System image GUID doesn't depend on eswitch switchdev mode.

Hence, remove the check which simplifies the code.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Vu Pham <vuhuong@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 724ee17912c9a8e5362751a22fd955166ed0550a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 1ddcc10576ec,33ae66dc72e2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -399,40 -389,17 +399,54 @@@ static const struct ethtool_ops mlx5e_u
  	.set_pauseparam    = mlx5e_uplink_rep_set_pauseparam,
  };
  
++<<<<<<< HEAD
 +static int mlx5e_attr_get(struct net_device *dev, struct switchdev_attr *attr)
 +{
 +	struct mlx5e_priv *priv = netdev_priv(dev);
 +	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 +	struct net_device *uplink_upper = NULL;
 +	struct mlx5e_priv *uplink_priv = NULL;
 +	struct net_device *uplink_dev;
 +
 +	if (esw->mode == SRIOV_NONE)
 +		return -EOPNOTSUPP;
 +
 +	uplink_dev = mlx5_eswitch_uplink_get_proto_dev(esw, REP_ETH);
 +	if (uplink_dev) {
 +		uplink_upper = netdev_master_upper_dev_get(uplink_dev);
 +		uplink_priv = netdev_priv(uplink_dev);
 +	}
 +
 +	switch (attr->id) {
 +	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
 +		attr->u.ppid.id_len = ETH_ALEN;
 +		if (uplink_upper && mlx5_lag_is_sriov(uplink_priv->mdev)) {
 +			ether_addr_copy(attr->u.ppid.id, uplink_upper->dev_addr);
 +		} else {
 +			struct mlx5e_rep_priv *rpriv = priv->ppriv;
 +			struct mlx5_eswitch_rep *rep = rpriv->rep;
 +
 +			ether_addr_copy(attr->u.ppid.id, rep->hw_id);
 +		}
 +		break;
 +	default:
 +		return -EOPNOTSUPP;
 +	}
 +
 +	return 0;
++=======
+ static void mlx5e_rep_get_port_parent_id(struct net_device *dev,
+ 					 struct netdev_phys_item_id *ppid)
+ {
+ 	struct mlx5e_priv *priv;
+ 	u64 parent_id;
+ 
+ 	priv = netdev_priv(dev);
+ 
+ 	parent_id = mlx5_query_nic_system_image_guid(priv->mdev);
+ 	ppid->id_len = sizeof(parent_id);
+ 	memcpy(ppid->id, &parent_id, sizeof(parent_id));
++>>>>>>> 724ee17912c9 (net/mlx5e: Simplify querying port representor parent id)
  }
  
  static void mlx5e_sqs2vport_stop(struct mlx5_eswitch *esw,
@@@ -1753,8 -1734,55 +1767,57 @@@ static const struct mlx5e_profile mlx5e
  	.rx_handlers.handle_rx_cqe       = mlx5e_handle_rx_cqe_rep,
  	.rx_handlers.handle_rx_cqe_mpwqe = mlx5e_handle_rx_cqe_mpwrq,
  	.max_tc			= MLX5E_MAX_NUM_TC,
 -	.rq_groups		= MLX5E_NUM_RQ_GROUPS(REGULAR),
  };
  
++<<<<<<< HEAD
++=======
+ static bool
+ is_devlink_port_supported(const struct mlx5_core_dev *dev,
+ 			  const struct mlx5e_rep_priv *rpriv)
+ {
+ 	return rpriv->rep->vport == MLX5_VPORT_UPLINK ||
+ 	       rpriv->rep->vport == MLX5_VPORT_PF ||
+ 	       mlx5_eswitch_is_vf_vport(dev->priv.eswitch, rpriv->rep->vport);
+ }
+ 
+ static int register_devlink_port(struct mlx5_core_dev *dev,
+ 				 struct mlx5e_rep_priv *rpriv)
+ {
+ 	struct devlink *devlink = priv_to_devlink(dev);
+ 	struct mlx5_eswitch_rep *rep = rpriv->rep;
+ 	struct netdev_phys_item_id ppid = {};
+ 
+ 	if (!is_devlink_port_supported(dev, rpriv))
+ 		return 0;
+ 
+ 	mlx5e_rep_get_port_parent_id(rpriv->netdev, &ppid);
+ 
+ 	if (rep->vport == MLX5_VPORT_UPLINK)
+ 		devlink_port_attrs_set(&rpriv->dl_port,
+ 				       DEVLINK_PORT_FLAVOUR_PHYSICAL,
+ 				       PCI_FUNC(dev->pdev->devfn), false, 0,
+ 				       &ppid.id[0], ppid.id_len);
+ 	else if (rep->vport == MLX5_VPORT_PF)
+ 		devlink_port_attrs_pci_pf_set(&rpriv->dl_port,
+ 					      &ppid.id[0], ppid.id_len,
+ 					      dev->pdev->devfn);
+ 	else if (mlx5_eswitch_is_vf_vport(dev->priv.eswitch, rpriv->rep->vport))
+ 		devlink_port_attrs_pci_vf_set(&rpriv->dl_port,
+ 					      &ppid.id[0], ppid.id_len,
+ 					      dev->pdev->devfn,
+ 					      rep->vport - 1);
+ 
+ 	return devlink_port_register(devlink, &rpriv->dl_port, rep->vport);
+ }
+ 
+ static void unregister_devlink_port(struct mlx5_core_dev *dev,
+ 				    struct mlx5e_rep_priv *rpriv)
+ {
+ 	if (is_devlink_port_supported(dev, rpriv))
+ 		devlink_port_unregister(&rpriv->dl_port);
+ }
+ 
++>>>>>>> 724ee17912c9 (net/mlx5e: Simplify querying port representor parent id)
  /* e-Switch vport representors */
  static int
  mlx5e_vport_rep_load(struct mlx5_core_dev *dev, struct mlx5_eswitch_rep *rep)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
