net: phy: Move of_set_phy_eee_broken to phy-core.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Maxime Chevallier <maxime.chevallier@bootlin.com>
commit 3feb9b23bf4cbf9f34568035170c6f1c25416523
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/3feb9b23.failed

Since of_set_phy_supported was moved to phy-core.c, we can also move
of_set_phy_eee_broken to the same location, so that we have all OF
functions in the same place.

This patch doesn't intend to introduce any change in behaviour.

	Signed-off-by: Maxime Chevallier <maxime.chevallier@bootlin.com>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3feb9b23bf4cbf9f34568035170c6f1c25416523)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy_device.c
diff --cc drivers/net/phy/phy_device.c
index 27b1c1eb3d20,a752de2fff5e..000000000000
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@@ -35,10 -30,7 +35,9 @@@
  #include <linux/mdio.h>
  #include <linux/io.h>
  #include <linux/uaccess.h>
- #include <linux/of.h>
  
 +#include <asm/irq.h>
 +
  MODULE_DESCRIPTION("PHY library");
  MODULE_AUTHOR("Andy Fleming");
  MODULE_LICENSE("GPL");
@@@ -2027,31 -2078,9 +2026,37 @@@ bool phy_validate_pause(struct phy_devi
  }
  EXPORT_SYMBOL(phy_validate_pause);
  
++<<<<<<< HEAD
 +static void of_set_phy_eee_broken(struct phy_device *phydev)
 +{
 +	struct device_node *node = phydev->mdio.dev.of_node;
 +	u32 broken = 0;
 +
 +	if (!IS_ENABLED(CONFIG_OF_MDIO))
 +		return;
 +
 +	if (!node)
 +		return;
 +
 +	if (of_property_read_bool(node, "eee-broken-100tx"))
 +		broken |= MDIO_EEE_100TX;
 +	if (of_property_read_bool(node, "eee-broken-1000t"))
 +		broken |= MDIO_EEE_1000T;
 +	if (of_property_read_bool(node, "eee-broken-10gt"))
 +		broken |= MDIO_EEE_10GT;
 +	if (of_property_read_bool(node, "eee-broken-1000kx"))
 +		broken |= MDIO_EEE_1000KX;
 +	if (of_property_read_bool(node, "eee-broken-10gkx4"))
 +		broken |= MDIO_EEE_10GKX4;
 +	if (of_property_read_bool(node, "eee-broken-10gkr"))
 +		broken |= MDIO_EEE_10GKR;
 +
 +	phydev->eee_broken_modes = broken;
++=======
+ static bool phy_drv_supports_irq(struct phy_driver *phydrv)
+ {
+ 	return phydrv->config_intr && phydrv->ack_interrupt;
++>>>>>>> 3feb9b23bf4c (net: phy: Move of_set_phy_eee_broken to phy-core.c)
  }
  
  /**
diff --git a/drivers/net/phy/phy-core.c b/drivers/net/phy/phy-core.c
index 0017cdb8c9fa..0dc45e5098dd 100644
--- a/drivers/net/phy/phy-core.c
+++ b/drivers/net/phy/phy-core.c
@@ -387,6 +387,33 @@ void of_set_phy_supported(struct phy_device *phydev)
 		__set_phy_supported(phydev, max_speed);
 }
 
+void of_set_phy_eee_broken(struct phy_device *phydev)
+{
+	struct device_node *node = phydev->mdio.dev.of_node;
+	u32 broken = 0;
+
+	if (!IS_ENABLED(CONFIG_OF_MDIO))
+		return;
+
+	if (!node)
+		return;
+
+	if (of_property_read_bool(node, "eee-broken-100tx"))
+		broken |= MDIO_EEE_100TX;
+	if (of_property_read_bool(node, "eee-broken-1000t"))
+		broken |= MDIO_EEE_1000T;
+	if (of_property_read_bool(node, "eee-broken-10gt"))
+		broken |= MDIO_EEE_10GT;
+	if (of_property_read_bool(node, "eee-broken-1000kx"))
+		broken |= MDIO_EEE_1000KX;
+	if (of_property_read_bool(node, "eee-broken-10gkx4"))
+		broken |= MDIO_EEE_10GKX4;
+	if (of_property_read_bool(node, "eee-broken-10gkr"))
+		broken |= MDIO_EEE_10GKR;
+
+	phydev->eee_broken_modes = broken;
+}
+
 /**
  * phy_resolve_aneg_linkmode - resolve the advertisements into phy settings
  * @phydev: The phy_device struct
* Unmerged path drivers/net/phy/phy_device.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index f24ff2f7a551..f4a7a89b89d4 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -734,6 +734,7 @@ phy_lookup_setting(int speed, int duplex, const unsigned long *mask,
 size_t phy_speeds(unsigned int *speeds, size_t size,
 		  unsigned long *mask);
 void of_set_phy_supported(struct phy_device *phydev);
+void of_set_phy_eee_broken(struct phy_device *phydev);
 
 void phy_resolve_aneg_linkmode(struct phy_device *phydev);
 
