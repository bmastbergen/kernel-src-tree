bpf: Add ene-to-end test for bpf_sk_storage_* helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 263d0b35334112dd999afb4246646a2ea9da800d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/263d0b35.failed

This patch rides on an existing BPF_PROG_TYPE_CGROUP_SKB test
(test_sock_fields.c) to do a TCP end-to-end test on the new
bpf_sk_storage_* helpers.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 263d0b35334112dd999afb4246646a2ea9da800d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/bpf_helpers.h
#	tools/testing/selftests/bpf/progs/test_sock_fields_kern.c
#	tools/testing/selftests/bpf/test_sock_fields.c
diff --cc tools/testing/selftests/bpf/bpf_helpers.h
index f4aedf8b6643,6e80b66d7fb1..000000000000
--- a/tools/testing/selftests/bpf/bpf_helpers.h
+++ b/tools/testing/selftests/bpf/bpf_helpers.h
@@@ -172,6 -177,45 +172,48 @@@ static int (*bpf_skb_vlan_pop)(void *ct
  	(void *) BPF_FUNC_skb_vlan_pop;
  static int (*bpf_rc_pointer_rel)(void *ctx, int rel_x, int rel_y) =
  	(void *) BPF_FUNC_rc_pointer_rel;
++<<<<<<< HEAD
++=======
+ static void (*bpf_spin_lock)(struct bpf_spin_lock *lock) =
+ 	(void *) BPF_FUNC_spin_lock;
+ static void (*bpf_spin_unlock)(struct bpf_spin_lock *lock) =
+ 	(void *) BPF_FUNC_spin_unlock;
+ static struct bpf_sock *(*bpf_sk_fullsock)(struct bpf_sock *sk) =
+ 	(void *) BPF_FUNC_sk_fullsock;
+ static struct bpf_tcp_sock *(*bpf_tcp_sock)(struct bpf_sock *sk) =
+ 	(void *) BPF_FUNC_tcp_sock;
+ static struct bpf_sock *(*bpf_get_listener_sock)(struct bpf_sock *sk) =
+ 	(void *) BPF_FUNC_get_listener_sock;
+ static int (*bpf_skb_ecn_set_ce)(void *ctx) =
+ 	(void *) BPF_FUNC_skb_ecn_set_ce;
+ static int (*bpf_tcp_check_syncookie)(struct bpf_sock *sk,
+ 	    void *ip, int ip_len, void *tcp, int tcp_len) =
+ 	(void *) BPF_FUNC_tcp_check_syncookie;
+ static int (*bpf_sysctl_get_name)(void *ctx, char *buf,
+ 				  unsigned long long buf_len,
+ 				  unsigned long long flags) =
+ 	(void *) BPF_FUNC_sysctl_get_name;
+ static int (*bpf_sysctl_get_current_value)(void *ctx, char *buf,
+ 					   unsigned long long buf_len) =
+ 	(void *) BPF_FUNC_sysctl_get_current_value;
+ static int (*bpf_sysctl_get_new_value)(void *ctx, char *buf,
+ 				       unsigned long long buf_len) =
+ 	(void *) BPF_FUNC_sysctl_get_new_value;
+ static int (*bpf_sysctl_set_new_value)(void *ctx, const char *buf,
+ 				       unsigned long long buf_len) =
+ 	(void *) BPF_FUNC_sysctl_set_new_value;
+ static int (*bpf_strtol)(const char *buf, unsigned long long buf_len,
+ 			 unsigned long long flags, long *res) =
+ 	(void *) BPF_FUNC_strtol;
+ static int (*bpf_strtoul)(const char *buf, unsigned long long buf_len,
+ 			  unsigned long long flags, unsigned long *res) =
+ 	(void *) BPF_FUNC_strtoul;
+ static void *(*bpf_sk_storage_get)(void *map, struct bpf_sock *sk,
+ 				   void *value, __u64 flags) =
+ 	(void *) BPF_FUNC_sk_storage_get;
+ static int (*bpf_sk_storage_delete)(void *map, struct bpf_sock *sk) =
+ 	(void *)BPF_FUNC_sk_storage_delete;
++>>>>>>> 263d0b353341 (bpf: Add ene-to-end test for bpf_sk_storage_* helpers)
  
  /* llvm builtin functions that eBPF C program may use to
   * emit BPF_LD_ABS and BPF_LD_IND instructions
* Unmerged path tools/testing/selftests/bpf/progs/test_sock_fields_kern.c
* Unmerged path tools/testing/selftests/bpf/test_sock_fields.c
* Unmerged path tools/testing/selftests/bpf/bpf_helpers.h
* Unmerged path tools/testing/selftests/bpf/progs/test_sock_fields_kern.c
* Unmerged path tools/testing/selftests/bpf/test_sock_fields.c
