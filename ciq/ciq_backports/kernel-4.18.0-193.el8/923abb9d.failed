RDMA/core: Introduce RDMA subsystem ibdev_* print functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-193.el8
commit-author Gal Pressman <galpress@amazon.com>
commit 923abb9d797ba078f4e9eb3734dd71be5f567a2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-193.el8/923abb9d.failed

Similarly to dev/netdev/etc printk helpers, add standard printk helpers
for the RDMA subsystem.

Example output:
efa 0000:00:06.0 efa_0: Hello World!
efa_0: Hello World! (no parent device set)
(NULL ib_device): Hello World! (ibdev is NULL)

	Cc: Jason Baron <jbaron@akamai.com>
	Suggested-by: Jason Gunthorpe <jgg@ziepe.ca>
	Suggested-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Gal Pressman <galpress@amazon.com>
	Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
	Reviewed-by: Shiraz Saleem <shiraz.saleem@intel.com>
	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 923abb9d797ba078f4e9eb3734dd71be5f567a2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/dynamic_debug.h
diff --cc include/linux/dynamic_debug.h
index 2fd8006153c3,6c809440f319..000000000000
--- a/include/linux/dynamic_debug.h
+++ b/include/linux/dynamic_debug.h
@@@ -71,7 -71,14 +71,18 @@@ void __dynamic_netdev_dbg(struct _ddebu
  			  const struct net_device *dev,
  			  const char *fmt, ...);
  
++<<<<<<< HEAD
 +#define DEFINE_DYNAMIC_DEBUG_METADATA_KEY(name, fmt, key, init)	\
++=======
+ struct ib_device;
+ 
+ extern __printf(3, 4)
+ void __dynamic_ibdev_dbg(struct _ddebug *descriptor,
+ 			 const struct ib_device *ibdev,
+ 			 const char *fmt, ...);
+ 
+ #define DEFINE_DYNAMIC_DEBUG_METADATA(name, fmt)		\
++>>>>>>> 923abb9d797b (RDMA/core: Introduce RDMA subsystem ibdev_* print functions)
  	static struct _ddebug  __aligned(8)			\
  	__attribute__((section("__verbose"))) name = {		\
  		.modname = KBUILD_MODNAME,			\
@@@ -120,40 -119,58 +131,53 @@@
  
  #endif
  
 -#define __dynamic_func_call(id, fmt, func, ...) do {	\
 -	DEFINE_DYNAMIC_DEBUG_METADATA(id, fmt);		\
 -	if (DYNAMIC_DEBUG_BRANCH(id))			\
 -		func(&id, ##__VA_ARGS__);		\
 -} while (0)
 -
 -#define __dynamic_func_call_no_desc(id, fmt, func, ...) do {	\
 -	DEFINE_DYNAMIC_DEBUG_METADATA(id, fmt);			\
 -	if (DYNAMIC_DEBUG_BRANCH(id))				\
 -		func(__VA_ARGS__);				\
 -} while (0)
 -
 -/*
 - * "Factory macro" for generating a call to func, guarded by a
 - * DYNAMIC_DEBUG_BRANCH. The dynamic debug decriptor will be
 - * initialized using the fmt argument. The function will be called with
 - * the address of the descriptor as first argument, followed by all
 - * the varargs. Note that fmt is repeated in invocations of this
 - * macro.
 - */
 -#define _dynamic_func_call(fmt, func, ...)				\
 -	__dynamic_func_call(__UNIQUE_ID(ddebug), fmt, func, ##__VA_ARGS__)
 -/*
 - * A variant that does the same, except that the descriptor is not
 - * passed as the first argument to the function; it is only called
 - * with precisely the macro's varargs.
 - */
 -#define _dynamic_func_call_no_desc(fmt, func, ...)	\
 -	__dynamic_func_call_no_desc(__UNIQUE_ID(ddebug), fmt, func, ##__VA_ARGS__)
 -
  #define dynamic_pr_debug(fmt, ...)				\
 -	_dynamic_func_call(fmt,	__dynamic_pr_debug,		\
 -			   pr_fmt(fmt), ##__VA_ARGS__)
 +do {								\
 +	DEFINE_DYNAMIC_DEBUG_METADATA(descriptor, fmt);		\
 +	if (DYNAMIC_DEBUG_BRANCH(descriptor))			\
 +		__dynamic_pr_debug(&descriptor, pr_fmt(fmt),	\
 +				   ##__VA_ARGS__);		\
 +} while (0)
  
  #define dynamic_dev_dbg(dev, fmt, ...)				\
 -	_dynamic_func_call(fmt,__dynamic_dev_dbg, 		\
 -			   dev, fmt, ##__VA_ARGS__)
 +do {								\
 +	DEFINE_DYNAMIC_DEBUG_METADATA(descriptor, fmt);		\
 +	if (DYNAMIC_DEBUG_BRANCH(descriptor))			\
 +		__dynamic_dev_dbg(&descriptor, dev, fmt,	\
 +				  ##__VA_ARGS__);		\
 +} while (0)
  
  #define dynamic_netdev_dbg(dev, fmt, ...)			\
 -	_dynamic_func_call(fmt, __dynamic_netdev_dbg,		\
 -			   dev, fmt, ##__VA_ARGS__)
 +do {								\
 +	DEFINE_DYNAMIC_DEBUG_METADATA(descriptor, fmt);		\
 +	if (DYNAMIC_DEBUG_BRANCH(descriptor))			\
 +		__dynamic_netdev_dbg(&descriptor, dev, fmt,	\
 +				     ##__VA_ARGS__);		\
 +} while (0)
  
++<<<<<<< HEAD
 +#define dynamic_hex_dump(prefix_str, prefix_type, rowsize,	\
 +			 groupsize, buf, len, ascii)		\
 +do {								\
 +	DEFINE_DYNAMIC_DEBUG_METADATA(descriptor,		\
 +		__builtin_constant_p(prefix_str) ? prefix_str : "hexdump");\
 +	if (DYNAMIC_DEBUG_BRANCH(descriptor))			\
 +		print_hex_dump(KERN_DEBUG, prefix_str,		\
 +			       prefix_type, rowsize, groupsize,	\
 +			       buf, len, ascii);		\
 +} while (0)
++=======
+ #define dynamic_ibdev_dbg(dev, fmt, ...)			\
+ 	_dynamic_func_call(fmt, __dynamic_ibdev_dbg,		\
+ 			   dev, fmt, ##__VA_ARGS__)
+ 
+ #define dynamic_hex_dump(prefix_str, prefix_type, rowsize,		\
+ 			 groupsize, buf, len, ascii)			\
+ 	_dynamic_func_call_no_desc(__builtin_constant_p(prefix_str) ? prefix_str : "hexdump", \
+ 				   print_hex_dump,			\
+ 				   KERN_DEBUG, prefix_str, prefix_type,	\
+ 				   rowsize, groupsize, buf, len, ascii)
++>>>>>>> 923abb9d797b (RDMA/core: Introduce RDMA subsystem ibdev_* print functions)
  
  #else
  
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index ec96a7b1c811..fdacbcc4e19a 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -92,6 +92,66 @@ static int ib_security_change(struct notifier_block *nb, unsigned long event,
 static void ib_policy_change_task(struct work_struct *work);
 static DECLARE_WORK(ib_policy_change_work, ib_policy_change_task);
 
+static void __ibdev_printk(const char *level, const struct ib_device *ibdev,
+			   struct va_format *vaf)
+{
+	if (ibdev && ibdev->dev.parent)
+		dev_printk_emit(level[1] - '0',
+				ibdev->dev.parent,
+				"%s %s %s: %pV",
+				dev_driver_string(ibdev->dev.parent),
+				dev_name(ibdev->dev.parent),
+				dev_name(&ibdev->dev),
+				vaf);
+	else if (ibdev)
+		printk("%s%s: %pV",
+		       level, dev_name(&ibdev->dev), vaf);
+	else
+		printk("%s(NULL ib_device): %pV", level, vaf);
+}
+
+void ibdev_printk(const char *level, const struct ib_device *ibdev,
+		  const char *format, ...)
+{
+	struct va_format vaf;
+	va_list args;
+
+	va_start(args, format);
+
+	vaf.fmt = format;
+	vaf.va = &args;
+
+	__ibdev_printk(level, ibdev, &vaf);
+
+	va_end(args);
+}
+EXPORT_SYMBOL(ibdev_printk);
+
+#define define_ibdev_printk_level(func, level)                  \
+void func(const struct ib_device *ibdev, const char *fmt, ...)  \
+{                                                               \
+	struct va_format vaf;                                   \
+	va_list args;                                           \
+								\
+	va_start(args, fmt);                                    \
+								\
+	vaf.fmt = fmt;                                          \
+	vaf.va = &args;                                         \
+								\
+	__ibdev_printk(level, ibdev, &vaf);                     \
+								\
+	va_end(args);                                           \
+}                                                               \
+EXPORT_SYMBOL(func);
+
+define_ibdev_printk_level(ibdev_emerg, KERN_EMERG);
+define_ibdev_printk_level(ibdev_alert, KERN_ALERT);
+define_ibdev_printk_level(ibdev_crit, KERN_CRIT);
+define_ibdev_printk_level(ibdev_err, KERN_ERR);
+define_ibdev_printk_level(ibdev_warn, KERN_WARNING);
+define_ibdev_printk_level(ibdev_notice, KERN_NOTICE);
+define_ibdev_printk_level(ibdev_info, KERN_INFO);
+
 static struct notifier_block ibdev_lsm_nb = {
 	.notifier_call = ib_security_change,
 };
* Unmerged path include/linux/dynamic_debug.h
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index e0695e17f2fe..d312d1795850 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -74,6 +74,36 @@ extern struct workqueue_struct *ib_wq;
 extern struct workqueue_struct *ib_comp_wq;
 extern struct workqueue_struct *ib_comp_unbound_wq;
 
+__printf(3, 4) __cold
+void ibdev_printk(const char *level, const struct ib_device *ibdev,
+		  const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_emerg(const struct ib_device *ibdev, const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_alert(const struct ib_device *ibdev, const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_crit(const struct ib_device *ibdev, const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_err(const struct ib_device *ibdev, const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_warn(const struct ib_device *ibdev, const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_notice(const struct ib_device *ibdev, const char *format, ...);
+__printf(2, 3) __cold
+void ibdev_info(const struct ib_device *ibdev, const char *format, ...);
+
+#if defined(CONFIG_DYNAMIC_DEBUG)
+#define ibdev_dbg(__dev, format, args...)                       \
+	dynamic_ibdev_dbg(__dev, format, ##args)
+#elif defined(DEBUG)
+#define ibdev_dbg(__dev, format, args...)                       \
+	ibdev_printk(KERN_DEBUG, __dev, format, ##args)
+#else
+__printf(2, 3) __cold
+static inline
+void ibdev_dbg(const struct ib_device *ibdev, const char *format, ...) {}
+#endif
+
 union ib_gid {
 	u8	raw[16];
 	struct {
diff --git a/lib/dynamic_debug.c b/lib/dynamic_debug.c
index c7c96bc7654a..f229ed6076d4 100644
--- a/lib/dynamic_debug.c
+++ b/lib/dynamic_debug.c
@@ -37,6 +37,8 @@
 #include <linux/device.h>
 #include <linux/netdevice.h>
 
+#include <rdma/ib_verbs.h>
+
 extern struct _ddebug __start___verbose[];
 extern struct _ddebug __stop___verbose[];
 
@@ -636,6 +638,41 @@ EXPORT_SYMBOL(__dynamic_netdev_dbg);
 
 #endif
 
+#if IS_ENABLED(CONFIG_INFINIBAND)
+
+void __dynamic_ibdev_dbg(struct _ddebug *descriptor,
+			 const struct ib_device *ibdev, const char *fmt, ...)
+{
+	struct va_format vaf;
+	va_list args;
+
+	va_start(args, fmt);
+
+	vaf.fmt = fmt;
+	vaf.va = &args;
+
+	if (ibdev && ibdev->dev.parent) {
+		char buf[PREFIX_SIZE];
+
+		dev_printk_emit(LOGLEVEL_DEBUG, ibdev->dev.parent,
+				"%s%s %s %s: %pV",
+				dynamic_emit_prefix(descriptor, buf),
+				dev_driver_string(ibdev->dev.parent),
+				dev_name(ibdev->dev.parent),
+				dev_name(&ibdev->dev),
+				&vaf);
+	} else if (ibdev) {
+		printk(KERN_DEBUG "%s: %pV", dev_name(&ibdev->dev), &vaf);
+	} else {
+		printk(KERN_DEBUG "(NULL ib_device): %pV", &vaf);
+	}
+
+	va_end(args);
+}
+EXPORT_SYMBOL(__dynamic_ibdev_dbg);
+
+#endif
+
 #define DDEBUG_STRING_SIZE 1024
 static __initdata char ddebug_setup_string[DDEBUG_STRING_SIZE];
 
