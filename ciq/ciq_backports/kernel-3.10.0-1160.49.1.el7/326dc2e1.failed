PCI: hv: Remove bus device removal unused refcount/functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.49.1.el7
commit-author Long Li <longli@microsoft.com>
commit 326dc2e1e59a98c61c3c71616496422af522678c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.49.1.el7/326dc2e1.failed

With the new method of flushing/stopping the workqueue before doing bus
removal, the old mechanism of using refcount and wait for completion
is no longer needed. Remove those dead code.

Link: https://lore.kernel.org/r/1620806809-31055-1-git-send-email-longli@linuxonhyperv.com
	Signed-off-by: Long Li <longli@microsoft.com>
[lorenzo.pieralisi@arm.com: Reworded subject]
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
(cherry picked from commit 326dc2e1e59a98c61c3c71616496422af522678c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index 15ab10058bb9,8807b6247e9e..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -464,8 -449,9 +464,11 @@@ enum hv_pcibus_state 
  
  struct hv_pcibus_device {
  	struct pci_sysdata sysdata;
 -	/* Protocol version negotiated with the host */
 -	enum pci_protocol_version_t protocol_version;
  	enum hv_pcibus_state state;
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	atomic_t remove_lock;
++=======
++>>>>>>> 326dc2e1e59a (PCI: hv: Remove bus device removal unused refcount/functions):drivers/pci/controller/pci-hyperv.c
  	struct hv_device *hdev;
  	resource_size_t low_mmio_space;
  	resource_size_t high_mmio_space;
@@@ -2021,8 -2343,15 +2013,12 @@@ static void hv_pci_eject_device(struct 
  	hpdev->state = hv_pcichild_ejecting;
  	get_pcichild(hpdev);
  	INIT_WORK(&hpdev->wrk, hv_eject_device_work);
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	get_hvpcibus(hpdev->hbus);
 +	queue_work(hpdev->hbus->wq, &hpdev->wrk);
++=======
+ 	queue_work(hbus->wq, &hpdev->wrk);
++>>>>>>> 326dc2e1e59a (PCI: hv: Remove bus device removal unused refcount/functions):drivers/pci/controller/pci-hyperv.c
  }
  
  /**
@@@ -2601,17 -2950,6 +2597,20 @@@ static int hv_send_resources_released(s
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +static void get_hvpcibus(struct hv_pcibus_device *hbus)
 +{
 +	atomic_inc(&hbus->remove_lock);
 +}
 +
 +static void put_hvpcibus(struct hv_pcibus_device *hbus)
 +{
 +	if (atomic_dec_and_test(&hbus->remove_lock))
 +		complete(&hbus->remove_event);
 +}
 +
++=======
++>>>>>>> 326dc2e1e59a (PCI: hv: Remove bus device removal unused refcount/functions):drivers/pci/controller/pci-hyperv.c
  #define HVPCI_DOM_MAP_SIZE (64 * 1024)
  static DECLARE_BITMAP(hvpci_dom_map, HVPCI_DOM_MAP_SIZE);
  
@@@ -2712,7 -3069,6 +2711,10 @@@ static int hv_pci_probe(struct hv_devic
  	hbus->sysdata.domain = dom;
  
  	hbus->hdev = hdev;
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	atomic_inc(&hbus->remove_lock);
++=======
++>>>>>>> 326dc2e1e59a (PCI: hv: Remove bus device removal unused refcount/functions):drivers/pci/controller/pci-hyperv.c
  	INIT_LIST_HEAD(&hbus->children);
  	INIT_LIST_HEAD(&hbus->dr_list);
  	INIT_LIST_HEAD(&hbus->resources_for_children);
@@@ -2900,9 -3309,8 +2901,14 @@@ static int hv_pci_remove(struct hv_devi
  	hv_free_config_window(hbus);
  	pci_free_resource_list(&hbus->resources_for_children);
  	hv_pci_free_bridge_windows(hbus);
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	put_hvpcibus(hbus);
 +	wait_for_completion(&hbus->remove_event);
 +	destroy_workqueue(hbus->wq);
++=======
+ 	irq_domain_remove(hbus->irq_domain);
+ 	irq_domain_free_fwnode(hbus->sysdata.fwnode);
++>>>>>>> 326dc2e1e59a (PCI: hv: Remove bus device removal unused refcount/functions):drivers/pci/controller/pci-hyperv.c
  
  	hv_put_dom_num(hbus->sysdata.domain);
  
* Unmerged path drivers/pci/pci-hyperv.c
