nvme-pci: Unblock reset_work on IO failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.49.1.el7
commit-author Keith Busch <keith.busch@intel.com>
commit 2036f7263d70e67d70a67899a468588cb7356bc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.49.1.el7/2036f726.failed

The reset_work waits for queued IO to complete before setting the
controller to live. If any of these times out and requeues, we won't be
able to restart the controller because the reset_work is already running.

Flush all entered requests to a failed completion if a timeout occurs
in the connecting state, and ensure the controller can't transition to
the live state after we've unblocked it from waiting for completions.

	Reviewed-by: Ming Lei <ming.lei@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
(cherry picked from commit 2036f7263d70e67d70a67899a468588cb7356bc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 7e300a01dee5,8df176ffcbc1..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -1017,19 -1290,21 +1016,26 @@@ static enum blk_eh_timer_return nvme_ti
  	 * Shutdown immediately if controller times out while starting. The
  	 * reset work will see the pci device disabled when it gets the forced
  	 * cancellation error. All outstanding requests are completed on
 -	 * shutdown, so we return BLK_EH_DONE.
 +	 * shutdown, so we return BLK_EH_NOT_HANDLED.
  	 */
  	switch (dev->ctrl.state) {
++<<<<<<< HEAD
 +	case NVME_CTRL_DELETING:
 +		shutdown = true;
 +	case NVME_CTRL_CONNECTING:
 +	case NVME_CTRL_RESETTING:
++=======
+ 	case NVME_CTRL_CONNECTING:
+ 		nvme_change_ctrl_state(&dev->ctrl, NVME_CTRL_DELETING);
+ 		/* fall through */
+ 	case NVME_CTRL_DELETING:
++>>>>>>> 2036f7263d70 (nvme-pci: Unblock reset_work on IO failure)
  		dev_warn_ratelimited(dev->ctrl.device,
  			 "I/O %d QID %d timeout, disable controller\n",
  			 req->tag, nvmeq->qid);
- 		nvme_dev_disable(dev, shutdown);
+ 		nvme_dev_disable(dev, true);
  		nvme_req(req)->flags |= NVME_REQ_CANCELLED;
 -		return BLK_EH_DONE;
 -	case NVME_CTRL_RESETTING:
 -		return BLK_EH_RESET_TIMER;
 +		return BLK_EH_NOT_HANDLED;
  	default:
  		break;
  	}
* Unmerged path drivers/nvme/host/pci.c
