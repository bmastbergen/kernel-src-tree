scsi: lpfc: Fix illegal memory access on Abort IOCBs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.80.1.el7
commit-author James Smart <jsmart2021@gmail.com>
commit e1364711359f3ced054bda9920477c8bf93b74c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.80.1.el7/e1364711.failed

In devloss timer handler and in backend calls to terminate remote port I/O,
there is logic to walk through all active IOCBs and validate them to
potentially trigger an abort request. This logic is causing illegal memory
accesses which leads to a crash. Abort IOCBs, which may be on the list, do
not have an associated lpfc_io_buf struct. The driver is trying to map an
lpfc_io_buf struct on the IOCB and which results in a bogus address thus
the issue.

Fix by skipping over ABORT IOCBs (CLOSE IOCBs are ABORTS that don't send
ABTS) in the IOCB scan logic.

Link: https://lore.kernel.org/r/20210421234433.102079-1-jsmart2021@gmail.com
Co-developed-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: Justin Tee <justin.tee@broadcom.com>
	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e1364711359f3ced054bda9920477c8bf93b74c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_sli.c
diff --cc drivers/scsi/lpfc/lpfc_sli.c
index bb1cf126c14f,579ac75dfe79..000000000000
--- a/drivers/scsi/lpfc/lpfc_sli.c
+++ b/drivers/scsi/lpfc/lpfc_sli.c
@@@ -11388,17 -11803,24 +11388,28 @@@ lpfc_sli_validate_fcp_iocb(struct lpfc_
  			   uint16_t tgt_id, uint64_t lun_id,
  			   lpfc_ctx_cmd ctx_cmd)
  {
++<<<<<<< HEAD
 +	struct lpfc_scsi_buf *lpfc_cmd;
++=======
+ 	struct lpfc_io_buf *lpfc_cmd;
+ 	IOCB_t *icmd = NULL;
++>>>>>>> e1364711359f (scsi: lpfc: Fix illegal memory access on Abort IOCBs)
  	int rc = 1;
  
 -	if (!iocbq || iocbq->vport != vport)
 +	if (iocbq->vport != vport)
  		return rc;
  
- 	if (!(iocbq->iocb_flag &  LPFC_IO_FCP) ||
- 	    !(iocbq->iocb_flag & LPFC_IO_ON_TXCMPLQ))
+ 	if (!(iocbq->iocb_flag & LPFC_IO_FCP) ||
+ 	    !(iocbq->iocb_flag & LPFC_IO_ON_TXCMPLQ) ||
+ 	      iocbq->iocb_flag & LPFC_DRIVER_ABORTED)
+ 		return rc;
+ 
+ 	icmd = &iocbq->iocb;
+ 	if (icmd->ulpCommand == CMD_ABORT_XRI_CN ||
+ 	    icmd->ulpCommand == CMD_CLOSE_XRI_CN)
  		return rc;
  
 -	lpfc_cmd = container_of(iocbq, struct lpfc_io_buf, cur_iocbq);
 +	lpfc_cmd = container_of(iocbq, struct lpfc_scsi_buf, cur_iocbq);
  
  	if (lpfc_cmd->pCmd == NULL)
  		return rc;
* Unmerged path drivers/scsi/lpfc/lpfc_sli.c
