ptp: Add PTP_SYS_OFFSET_PRECISE for driver crosstimestamping

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christopher S. Hall <christopher.s.hall@intel.com>
commit 719f1aa4a67199a3c4c68a03f94e5ec44d9d5f82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/719f1aa4.failed

Currently, network /system cross-timestamping is performed in the
PTP_SYS_OFFSET ioctl. The PTP clock driver reads gettimeofday() and
the gettime64() callback provided by the driver. The cross-timestamp
is best effort where the latency between the capture of system time
(getnstimeofday()) and the device time (driver callback) may be
significant.

The getcrosststamp() callback and corresponding PTP_SYS_OFFSET_PRECISE
ioctl allows the driver to perform this device/system correlation when
for example cross timestamp hardware is available. Modern Intel
systems can do this for onboard Ethernet controllers using the ART
counter. There is virtually zero latency between captures of the ART
and network device clock.

The capabilities ioctl (PTP_CLOCK_GETCAPS), is augmented allowing
applications to query whether or not drivers implement the
getcrosststamp callback, providing more precise cross timestamping.

	Cc: Prarit Bhargava <prarit@redhat.com>
	Cc: Richard Cochran <richardcochran@gmail.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: kevin.b.stanton@intel.com
	Cc: kevin.j.clarke@intel.com
	Cc: hpa@zytor.com
	Cc: jeffrey.t.kirsher@intel.com
	Cc: netdev@vger.kernel.org
	Acked-by: Richard Cochran <richardcochran@gmail.com>
	Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
[jstultz: Commit subject tweaks]
	Signed-off-by: John Stultz <john.stultz@linaro.org>
(cherry picked from commit 719f1aa4a67199a3c4c68a03f94e5ec44d9d5f82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ptp/testptp.c
#	drivers/ptp/ptp_chardev.c
diff --cc Documentation/ptp/testptp.c
index f59ded066108,d99012f41602..000000000000
--- a/Documentation/ptp/testptp.c
+++ b/Documentation/ptp/testptp.c
@@@ -220,12 -276,16 +220,24 @@@ int main(int argc, char *argv[]
  			       "  %d programmable alarms\n"
  			       "  %d external time stamp channels\n"
  			       "  %d programmable periodic signals\n"
++<<<<<<< HEAD
 +			       "  %d pulse per second\n",
++=======
+ 			       "  %d pulse per second\n"
+ 			       "  %d programmable pins\n"
+ 			       "  %d cross timestamping\n",
++>>>>>>> 719f1aa4a671 (ptp: Add PTP_SYS_OFFSET_PRECISE for driver crosstimestamping)
  			       caps.max_adj,
  			       caps.n_alarm,
  			       caps.n_ext_ts,
  			       caps.n_per_out,
++<<<<<<< HEAD
 +			       caps.pps);
++=======
+ 			       caps.pps,
+ 			       caps.n_pins,
+ 			       caps.cross_timestamping);
++>>>>>>> 719f1aa4a671 (ptp: Add PTP_SYS_OFFSET_PRECISE for driver crosstimestamping)
  		}
  	}
  
diff --cc drivers/ptp/ptp_chardev.c
index c6c091f4b762,579fd65299a0..000000000000
--- a/drivers/ptp/ptp_chardev.c
+++ b/drivers/ptp/ptp_chardev.c
@@@ -130,7 -127,7 +132,11 @@@ long ptp_ioctl(struct posix_clock *pc, 
  	struct ptp_clock_info *ops = ptp->info;
  	struct ptp_clock_time *pct;
  	struct timespec64 ts;
++<<<<<<< HEAD
 +	struct timespec t2;
++=======
+ 	struct system_device_crosststamp xtstamp;
++>>>>>>> 719f1aa4a671 (ptp: Add PTP_SYS_OFFSET_PRECISE for driver crosstimestamping)
  	int enable, err = 0;
  	unsigned int i, pin_index;
  
* Unmerged path Documentation/ptp/testptp.c
* Unmerged path drivers/ptp/ptp_chardev.c
diff --git a/include/linux/ptp_clock_kernel.h b/include/linux/ptp_clock_kernel.h
index 7d6f8e66396f..6300614a4b6a 100644
--- a/include/linux/ptp_clock_kernel.h
+++ b/include/linux/ptp_clock_kernel.h
@@ -38,6 +38,7 @@ struct ptp_clock_request {
 	};
 };
 
+struct system_device_crosststamp;
 /**
  * struct ptp_clock_info - decribes a PTP hardware clock
  *
@@ -73,6 +74,11 @@ struct ptp_clock_request {
  * @gettime64:  Reads the current time from the hardware clock.
  *              parameter ts: Holds the result.
  *
+ * @getcrosststamp:  Reads the current time from the hardware clock and
+ *                   system clock simultaneously.
+ *                   parameter cts: Contains timestamp (device,system) pair,
+ *                   where system time is realtime and monotonic.
+ *
  * @settime64:  Set the current time on the hardware clock.
  *              parameter ts: Time value to set.
  *
@@ -113,6 +119,8 @@ struct ptp_clock_info {
 	int (*gettime)(struct ptp_clock_info *ptp, struct timespec *ts);
 	int (*settime)(struct ptp_clock_info *ptp, const struct timespec *ts);
 	int (*gettime64)(struct ptp_clock_info *ptp, struct timespec64 *ts);
+	int (*getcrosststamp)(struct ptp_clock_info *ptp,
+			      struct system_device_crosststamp *cts);
 	int (*settime64)(struct ptp_clock_info *p, const struct timespec64 *ts);
 	int (*enable)(struct ptp_clock_info *ptp,
 		      struct ptp_clock_request *request, int on);
diff --git a/include/uapi/linux/ptp_clock.h b/include/uapi/linux/ptp_clock.h
index f0b7bfe5da92..ac6dded80ffa 100644
--- a/include/uapi/linux/ptp_clock.h
+++ b/include/uapi/linux/ptp_clock.h
@@ -51,7 +51,9 @@ struct ptp_clock_caps {
 	int n_per_out; /* Number of programmable periodic signals. */
 	int pps;       /* Whether the clock supports a PPS callback. */
 	int n_pins;    /* Number of input/output pins. */
-	int rsv[14];   /* Reserved for future use. */
+	/* Whether the clock supports precise system-device cross timestamps */
+	int cross_timestamping;
+	int rsv[13];   /* Reserved for future use. */
 };
 
 struct ptp_extts_request {
@@ -81,6 +83,13 @@ struct ptp_sys_offset {
 	struct ptp_clock_time ts[2 * PTP_MAX_SAMPLES + 1];
 };
 
+struct ptp_sys_offset_precise {
+	struct ptp_clock_time device;
+	struct ptp_clock_time sys_realtime;
+	struct ptp_clock_time sys_monoraw;
+	unsigned int rsv[4];    /* Reserved for future use. */
+};
+
 enum ptp_pin_function {
 	PTP_PF_NONE,
 	PTP_PF_EXTTS,
@@ -124,6 +133,8 @@ struct ptp_pin_desc {
 #define PTP_SYS_OFFSET     _IOW(PTP_CLK_MAGIC, 5, struct ptp_sys_offset)
 #define PTP_PIN_GETFUNC    _IOWR(PTP_CLK_MAGIC, 6, struct ptp_pin_desc)
 #define PTP_PIN_SETFUNC    _IOW(PTP_CLK_MAGIC, 7, struct ptp_pin_desc)
+#define PTP_SYS_OFFSET_PRECISE \
+	_IOWR(PTP_CLK_MAGIC, 8, struct ptp_sys_offset_precise)
 
 struct ptp_extts_event {
 	struct ptp_clock_time t; /* Time event occured. */
