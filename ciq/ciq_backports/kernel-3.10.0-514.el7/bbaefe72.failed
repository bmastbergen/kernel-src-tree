drm/i915: Mimic skl with WaForceEnableNonCoherent

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drm] i915: Mimic skl with WaForceEnableNonCoherent (Rob Clark) [1348329 1349064]
Rebuild_FUZZ: 95.74%
commit-author Mika Kuoppala <mika.kuoppala@linux.intel.com>
commit bbaefe72a00c93c6ec12e029019681e3f7d7de7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bbaefe72.failed

Past evidence with system hangs and hsds tie
WaForceEnableNonCoherent and WaDisableHDCInvalidation to
WaForceContextSaveRestoreNonCoherent. Documentation
states that WaForceContextSaveRestoreNonCoherent would
not be needed on skl past E0 but evidence proved otherwise. See
commit <510650e8b2ab> ("drm/i915/skl: Fix spurious gpu hang with gt3/gt4
revs"). In this scope consider kbl to be skl with a bigger revision than
E0 so play it safe and bind these two workarounds to the
WaForceContextSaveRestoreNonCoherent, and apply to all gen9.

v2: fix comment (Matthew)

References: HSD#2134449, HSD#2131413
	Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
	Reviewed-by: Matthew Auld <matthew.auld@intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1465309159-30531-7-git-send-email-mika.kuoppala@intel.com
(cherry picked from commit bbaefe72a00c93c6ec12e029019681e3f7d7de7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_ringbuffer.c
diff --cc drivers/gpu/drm/i915/intel_ringbuffer.c
index 005b5e04de4d,228c3f75d3c5..000000000000
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@@ -959,6 -961,67 +959,70 @@@ static int gen9_init_workarounds(struc
  	WA_CLR_BIT_MASKED(GEN9_HALF_SLICE_CHICKEN5,
  			  GEN9_CCS_TLB_PREFETCH_ENABLE);
  
++<<<<<<< HEAD
++=======
+ 	/* WaDisableMaskBasedCammingInRCC:skl,bxt */
+ 	if (IS_SKL_REVID(dev_priv, SKL_REVID_C0, SKL_REVID_C0) ||
+ 	    IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1))
+ 		WA_SET_BIT_MASKED(SLICE_ECO_CHICKEN0,
+ 				  PIXEL_MASK_CAMMING_DISABLE);
+ 
+ 	/* WaForceContextSaveRestoreNonCoherent:skl,bxt,kbl */
+ 	WA_SET_BIT_MASKED(HDC_CHICKEN0,
+ 			  HDC_FORCE_CONTEXT_SAVE_RESTORE_NON_COHERENT |
+ 			  HDC_FORCE_CSR_NON_COHERENT_OVR_DISABLE);
+ 
+ 	/* WaForceEnableNonCoherent and WaDisableHDCInvalidation are
+ 	 * both tied to WaForceContextSaveRestoreNonCoherent
+ 	 * in some hsds for skl. We keep the tie for all gen9. The
+ 	 * documentation is a bit hazy and so we want to get common behaviour,
+ 	 * even though there is no clear evidence we would need both on kbl/bxt.
+ 	 * This area has been source of system hangs so we play it safe
+ 	 * and mimic the skl regardless of what bspec says.
+ 	 *
+ 	 * Use Force Non-Coherent whenever executing a 3D context. This
+ 	 * is a workaround for a possible hang in the unlikely event
+ 	 * a TLB invalidation occurs during a PSD flush.
+ 	 */
+ 
+ 	/* WaForceEnableNonCoherent:skl,bxt,kbl */
+ 	WA_SET_BIT_MASKED(HDC_CHICKEN0,
+ 			  HDC_FORCE_NON_COHERENT);
+ 
+ 	/* WaDisableHDCInvalidation:skl,bxt,kbl */
+ 	I915_WRITE(GAM_ECOCHK, I915_READ(GAM_ECOCHK) |
+ 		   BDW_DISABLE_HDC_INVALIDATION);
+ 
+ 	/* WaDisableSamplerPowerBypassForSOPingPong:skl,bxt,kbl */
+ 	if (IS_SKYLAKE(dev_priv) ||
+ 	    IS_KABYLAKE(dev_priv) ||
+ 	    IS_BXT_REVID(dev_priv, 0, BXT_REVID_B0))
+ 		WA_SET_BIT_MASKED(HALF_SLICE_CHICKEN3,
+ 				  GEN8_SAMPLER_POWER_BYPASS_DIS);
+ 
+ 	/* WaDisableSTUnitPowerOptimization:skl,bxt,kbl */
+ 	WA_SET_BIT_MASKED(HALF_SLICE_CHICKEN2, GEN8_ST_PO_DISABLE);
+ 
+ 	/* WaOCLCoherentLineFlush:skl,bxt,kbl */
+ 	I915_WRITE(GEN8_L3SQCREG4, (I915_READ(GEN8_L3SQCREG4) |
+ 				    GEN8_LQSC_FLUSH_COHERENT_LINES));
+ 
+ 	/* WaVFEStateAfterPipeControlwithMediaStateClear:skl,bxt */
+ 	ret = wa_ring_whitelist_reg(engine, GEN9_CTX_PREEMPT_REG);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* WaEnablePreemptionGranularityControlByUMD:skl,bxt,kbl */
+ 	ret= wa_ring_whitelist_reg(engine, GEN8_CS_CHICKEN1);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* WaAllowUMDToModifyHDCChicken1:skl,bxt,kbl */
+ 	ret = wa_ring_whitelist_reg(engine, GEN8_HDC_CHICKEN1);
+ 	if (ret)
+ 		return ret;
+ 
++>>>>>>> bbaefe72a00c (drm/i915: Mimic skl with WaForceEnableNonCoherent)
  	return 0;
  }
  
@@@ -1017,9 -1110,8 +1081,14 @@@ static int skl_init_workarounds(struct 
  		WA_SET_BIT_MASKED(HIZ_CHICKEN,
  				  BDW_HIZ_POWER_COMPILER_CLOCK_GATING_DISABLE);
  
++<<<<<<< HEAD
 +	if (INTEL_REVID(dev) == SKL_REVID_C0 ||
 +	    INTEL_REVID(dev) == SKL_REVID_D0)
 +		/* WaBarrierPerformanceFixDisable:skl */
++=======
+ 	/* WaBarrierPerformanceFixDisable:skl */
+ 	if (IS_SKL_REVID(dev_priv, SKL_REVID_C0, SKL_REVID_D0))
++>>>>>>> bbaefe72a00c (drm/i915: Mimic skl with WaForceEnableNonCoherent)
  		WA_SET_BIT_MASKED(HDC_CHICKEN0,
  				  HDC_FENCE_DEST_SLM_DISABLE |
  				  HDC_BARRIER_PERFORMANCE_DISABLE);
* Unmerged path drivers/gpu/drm/i915/intel_ringbuffer.c
