perf hists: Introduce hists__for_each_sort_list macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit aa6f50af822a552b579252ecd42224e09e11e879
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/aa6f50af.failed

With the hist object having the perf_hpp_list we can now iterate sort
format entries based in the hists object. Adding
hists__for_each_sort_list macro to do that.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1453109064-1026-27-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit aa6f50af822a552b579252ecd42224e09e11e879)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.c
#	tools/perf/util/hist.h
diff --cc tools/perf/util/hist.c
index d3cfa15c7e2e,12f2d794dc28..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -958,7 -962,7 +959,11 @@@ hist_entry__cmp(struct hist_entry *left
  	struct perf_hpp_fmt *fmt;
  	int64_t cmp = 0;
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_sort_list(fmt) {
++=======
+ 	hists__for_each_sort_list(hists, fmt) {
++>>>>>>> aa6f50af822a (perf hists: Introduce hists__for_each_sort_list macro)
  		cmp = fmt->cmp(fmt, left, right);
  		if (cmp)
  			break;
@@@ -973,7 -978,7 +979,11 @@@ hist_entry__collapse(struct hist_entry 
  	struct perf_hpp_fmt *fmt;
  	int64_t cmp = 0;
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_sort_list(fmt) {
++=======
+ 	hists__for_each_sort_list(hists, fmt) {
++>>>>>>> aa6f50af822a (perf hists: Introduce hists__for_each_sort_list macro)
  		cmp = fmt->collapse(fmt, left, right);
  		if (cmp)
  			break;
@@@ -1116,8 -1123,8 +1127,13 @@@ static int hist_entry__sort(struct hist
  	struct perf_hpp_fmt *fmt;
  	int64_t cmp = 0;
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_sort_list(fmt) {
 +		if (perf_hpp__should_skip(fmt))
++=======
+ 	hists__for_each_sort_list(hists, fmt) {
+ 		if (perf_hpp__should_skip(fmt, a->hists))
++>>>>>>> aa6f50af822a (perf hists: Introduce hists__for_each_sort_list macro)
  			continue;
  
  		cmp = fmt->sort(fmt, a, b);
diff --cc tools/perf/util/hist.h
index 9ddf2f915eef,1c7544a8fe1a..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -252,6 -261,12 +252,15 @@@ static inline void perf_hpp__register_s
  #define perf_hpp_list__for_each_sort_list_safe(_list, format, tmp)	\
  	list_for_each_entry_safe(format, tmp, &(_list)->sorts, sort_list)
  
++<<<<<<< HEAD
++=======
+ #define hists__for_each_format(hists, format) \
+ 	perf_hpp_list__for_each_format((hists)->hpp_list, fmt)
+ 
+ #define hists__for_each_sort_list(hists, format) \
+ 	perf_hpp_list__for_each_sort_list((hists)->hpp_list, fmt)
+ 
++>>>>>>> aa6f50af822a (perf hists: Introduce hists__for_each_sort_list macro)
  extern struct perf_hpp_fmt perf_hpp__format[];
  
  enum {
* Unmerged path tools/perf/util/hist.c
* Unmerged path tools/perf/util/hist.h
