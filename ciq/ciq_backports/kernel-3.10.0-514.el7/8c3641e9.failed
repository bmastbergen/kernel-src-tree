x86/mpx: Introduce a boot-time disable flag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] mpx: Introduce a boot-time disable flag (Rui Wang) [1138650]
Rebuild_FUZZ: 95.12%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit 8c3641e957a948f41f0174290096ed7a3b95e703
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8c3641e9.failed

MPX has the _potential_ to cause some issues.  Say part of your
init system tried to protect one of its components from buffer
overflows with MPX.  If there were a false positive, it's
possible that MPX could keep a system from booting.

MPX could also potentially cause performance issues since it is
present in hot paths like the unmap path.

Allow it to be disabled at boot time.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20150607183702.2E8B77AB@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 8c3641e957a948f41f0174290096ed7a3b95e703)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/kernel-parameters.txt
#	arch/x86/kernel/cpu/common.c
diff --cc Documentation/kernel-parameters.txt
index 94e58cc726a2,8b7e5c342302..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -799,7 -937,29 +799,25 @@@ bytes respectively. Such letter suffixe
  			Enable debug messages at boot time.  See
  			Documentation/dynamic-debug-howto.txt for details.
  
++<<<<<<< HEAD
++=======
+ 	nompx		[X86] Disables Intel Memory Protection Extensions.
+ 			See Documentation/x86/intel_mpx.txt for more
+ 			information about the feature.
+ 
+ 	eagerfpu=	[X86]
+ 			on	enable eager fpu restore
+ 			off	disable eager fpu restore
+ 			auto	selects the default scheme, which automatically
+ 				enables eagerfpu restore for xsaveopt.
+ 
+ 	early_ioremap_debug [KNL]
+ 			Enable debug messages in early_ioremap support. This
+ 			is useful for tracking down temporary early mappings
+ 			which are not unmapped.
+ 
++>>>>>>> 8c3641e957a9 (x86/mpx: Introduce a boot-time disable flag)
  	earlycon=	[KNL] Output early console device and options.
 -
 -		cdns,<addr>
 -			Start an early, polled-mode console on a cadence serial
 -			port at the specified address. The cadence serial port
 -			must already be setup and configured. Options are not
 -			yet supported.
 -
  		uart[8250],io,<addr>[,options]
  		uart[8250],mmio,<addr>[,options]
  		uart[8250],mmio32,<addr>[,options]
diff --cc arch/x86/kernel/cpu/common.c
index b7f07b3beff8,3956858e5312..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -143,30 -144,21 +143,48 @@@ DEFINE_PER_CPU_PAGE_ALIGNED(struct gdt_
  } };
  EXPORT_PER_CPU_SYMBOL_GPL(gdt_page);
  
++<<<<<<< HEAD
 +static int __init x86_xsave_setup(char *s)
 +{
 +	setup_clear_cpu_cap(X86_FEATURE_XSAVE);
 +	setup_clear_cpu_cap(X86_FEATURE_XSAVEOPT);
 +	setup_clear_cpu_cap(X86_FEATURE_XSAVES);
 +	setup_clear_cpu_cap(X86_FEATURE_AVX);
 +	setup_clear_cpu_cap(X86_FEATURE_AVX2);
 +	return 1;
 +}
 +__setup("noxsave", x86_xsave_setup);
 +
 +static int __init x86_xsaveopt_setup(char *s)
 +{
 +	setup_clear_cpu_cap(X86_FEATURE_XSAVEOPT);
 +	return 1;
 +}
 +__setup("noxsaveopt", x86_xsaveopt_setup);
 +
 +static int __init x86_xsaves_setup(char *s)
 +{
 +	setup_clear_cpu_cap(X86_FEATURE_XSAVES);
 +	return 1;
 +}
 +__setup("noxsaves", x86_xsaves_setup);
++=======
+ static int __init x86_mpx_setup(char *s)
+ {
+ 	/* require an exact match without trailing characters */
+ 	if (strlen(s))
+ 		return 0;
+ 
+ 	/* do not emit a message if the feature is not present */
+ 	if (!boot_cpu_has(X86_FEATURE_MPX))
+ 		return 1;
+ 
+ 	setup_clear_cpu_cap(X86_FEATURE_MPX);
+ 	pr_info("nompx: Intel Memory Protection Extensions (MPX) disabled\n");
+ 	return 1;
+ }
+ __setup("nompx", x86_mpx_setup);
++>>>>>>> 8c3641e957a9 (x86/mpx: Introduce a boot-time disable flag)
  
  #ifdef CONFIG_X86_32
  static int cachesize_override = -1;
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path arch/x86/kernel/cpu/common.c
