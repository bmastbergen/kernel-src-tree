RDS: IB: allocate extra space on queues for FRMR support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author santosh.shilimkar@oracle.com <santosh.shilimkar@oracle.com>
commit ad6832f950d35df8c70b577993a24b31b34d88e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ad6832f9.failed

Fastreg MR(FRMR) memory registration and invalidation makes use
of work request and completion queues for its operation. Patch
allocates extra queue space towards these operation(s).

	Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>
	Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ad6832f950d35df8c70b577993a24b31b34d88e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/ib.h
#	net/rds/ib_cm.c
diff --cc net/rds/ib.h
index 1c9525b4fdbb,eeb0d6c85cb3..000000000000
--- a/net/rds/ib.h
+++ b/net/rds/ib.h
@@@ -105,6 -120,15 +106,18 @@@ struct rds_ib_connection 
  	struct ib_pd		*i_pd;
  	struct ib_cq		*i_send_cq;
  	struct ib_cq		*i_recv_cq;
++<<<<<<< HEAD
++=======
+ 	struct ib_wc		i_send_wc[RDS_IB_WC_MAX];
+ 	struct ib_wc		i_recv_wc[RDS_IB_WC_MAX];
+ 
+ 	/* To control the number of wrs from fastreg */
+ 	atomic_t		i_fastreg_wrs;
+ 
+ 	/* interrupt handling */
+ 	struct tasklet_struct	i_send_tasklet;
+ 	struct tasklet_struct	i_recv_tasklet;
++>>>>>>> ad6832f950d3 (RDS: IB: allocate extra space on queues for FRMR support)
  
  	/* tx */
  	struct rds_ib_work_ring	i_send_ring;
diff --cc net/rds/ib_cm.c
index c129638ff6f1,83f4673970e7..000000000000
--- a/net/rds/ib_cm.c
+++ b/net/rds/ib_cm.c
@@@ -261,8 -390,9 +267,14 @@@ static int rds_ib_setup_qp(struct rds_c
  	/* Protection domain and memory range */
  	ic->i_pd = rds_ibdev->pd;
  
++<<<<<<< HEAD
 +	cq_attr.cqe = ic->i_send_ring.w_nr + 1;
 +	ic->i_send_cq = ib_create_cq(dev, rds_ib_send_cq_comp_handler,
++=======
+ 	cq_attr.cqe = ic->i_send_ring.w_nr + fr_queue_space + 1;
+ 
+ 	ic->i_send_cq = ib_create_cq(dev, rds_ib_cq_comp_handler_send,
++>>>>>>> ad6832f950d3 (RDS: IB: allocate extra space on queues for FRMR support)
  				     rds_ib_cq_event_handler, conn,
  				     &cq_attr);
  	if (IS_ERR(ic->i_send_cq)) {
@@@ -627,7 -758,9 +640,13 @@@ void rds_ib_conn_shutdown(struct rds_co
  		 */
  		wait_event(rds_ib_ring_empty_wait,
  			   rds_ib_ring_empty(&ic->i_recv_ring) &&
++<<<<<<< HEAD
 +			   (atomic_read(&ic->i_signaled_sends) == 0));
++=======
+ 			   (atomic_read(&ic->i_signaled_sends) == 0) &&
+ 			   (atomic_read(&ic->i_fastreg_wrs) == RDS_IB_DEFAULT_FR_WR));
+ 		tasklet_kill(&ic->i_send_tasklet);
++>>>>>>> ad6832f950d3 (RDS: IB: allocate extra space on queues for FRMR support)
  		tasklet_kill(&ic->i_recv_tasklet);
  
  		/* first destroy the ib state that generates callbacks */
* Unmerged path net/rds/ib.h
* Unmerged path net/rds/ib_cm.c
