netfilter: bridge: refactor clearing BRNF_NF_BRIDGE_PREROUTING

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bernhard Thaler <bernhard.thaler@wvnet.at>
commit d39a33ed9b9ac0939a5b2ddc4dd3d283373bbe89
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d39a33ed.failed

use binary AND on complement of BRNF_NF_BRIDGE_PREROUTING to unset
bit in nf_bridge->mask.

	Signed-off-by: Bernhard Thaler <bernhard.thaler@wvnet.at>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit d39a33ed9b9ac0939a5b2ddc4dd3d283373bbe89)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_netfilter.c
diff --cc net/bridge/br_netfilter.c
index bfa28cea8c79,2651876894e0..000000000000
--- a/net/bridge/br_netfilter.c
+++ b/net/bridge/br_netfilter.c
@@@ -302,14 -283,14 +302,14 @@@ drop
   * bridge PRE_ROUTING hook. */
  static int br_nf_pre_routing_finish_ipv6(struct sock *sk, struct sk_buff *skb)
  {
 -	struct nf_bridge_info *nf_bridge = nf_bridge_info_get(skb);
 +	struct nf_bridge_info *nf_bridge = skb->nf_bridge;
  	struct rtable *rt;
  
 -	if (nf_bridge->pkt_otherhost) {
 +	if (nf_bridge->mask & BRNF_PKT_TYPE) {
  		skb->pkt_type = PACKET_OTHERHOST;
 -		nf_bridge->pkt_otherhost = false;
 +		nf_bridge->mask ^= BRNF_PKT_TYPE;
  	}
- 	nf_bridge->mask ^= BRNF_NF_BRIDGE_PREROUTING;
+ 	nf_bridge->mask &= ~BRNF_NF_BRIDGE_PREROUTING;
  
  	rt = bridge_parent_rtable(nf_bridge->physindev);
  	if (!rt) {
@@@ -430,16 -403,20 +430,21 @@@ static int br_nf_pre_routing_finish(str
  {
  	struct net_device *dev = skb->dev;
  	struct iphdr *iph = ip_hdr(skb);
 -	struct nf_bridge_info *nf_bridge = nf_bridge_info_get(skb);
 +	struct nf_bridge_info *nf_bridge = skb->nf_bridge;
  	struct rtable *rt;
  	int err;
 -	int frag_max_size;
  
 -	frag_max_size = IPCB(skb)->frag_max_size;
 -	BR_INPUT_SKB_CB(skb)->frag_max_size = frag_max_size;
 -
 -	if (nf_bridge->pkt_otherhost) {
 +	if (nf_bridge->mask & BRNF_PKT_TYPE) {
  		skb->pkt_type = PACKET_OTHERHOST;
 -		nf_bridge->pkt_otherhost = false;
 +		nf_bridge->mask ^= BRNF_PKT_TYPE;
  	}
++<<<<<<< HEAD
 +	nf_bridge->mask ^= BRNF_NF_BRIDGE_PREROUTING;
 +	if (dnat_took_place(skb)) {
++=======
+ 	nf_bridge->mask &= ~BRNF_NF_BRIDGE_PREROUTING;
+ 	if (daddr_was_changed(skb, nf_bridge)) {
++>>>>>>> d39a33ed9b9a (netfilter: bridge: refactor clearing BRNF_NF_BRIDGE_PREROUTING)
  		if ((err = ip_route_input(skb, iph->daddr, iph->saddr, iph->tos, dev))) {
  			struct in_device *in_dev = __in_dev_get_rcu(dev);
  
* Unmerged path net/bridge/br_netfilter.c
