geneve: implement geneve_get_sk_family helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Benc <jbenc@redhat.com>
commit 1e9f12ec92ab7307ac7386924e343905f7f12205
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1e9f12ec.failed

Similarly to the existing vxlan_get_sk_family.

	Signed-off-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1e9f12ec92ab7307ac7386924e343905f7f12205)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/geneve.c
diff --cc drivers/net/geneve.c
index 7c79843ccb40,f09de1e30955..000000000000
--- a/drivers/net/geneve.c
+++ b/drivers/net/geneve.c
@@@ -121,24 -165,46 +126,62 @@@ static void geneve_rx(struct geneve_soc
  	struct metadata_dst *tun_dst = NULL;
  	struct geneve_dev *geneve = NULL;
  	struct pcpu_sw_netstats *stats;
 -	struct iphdr *iph = NULL;
 -	__be32 addr;
 -	static u8 zero_vni[3];
 +	struct iphdr *iph;
  	u8 *vni;
++<<<<<<< HEAD
 +	__be32 addr;
 +	int err;
 +
 +	iph = ip_hdr(skb); /* outer IP header... */
 +
 +	if (gs->collect_md) {
 +		static u8 zero_vni[3];
 +
 +		vni = zero_vni;
 +		addr = 0;
 +	} else {
 +		vni = gnvh->vni;
 +		addr = iph->saddr;
++=======
+ 	int err = 0;
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	struct ipv6hdr *ip6h = NULL;
+ 	struct in6_addr addr6;
+ 	static struct in6_addr zero_addr6;
+ #endif
+ 
+ 	if (geneve_get_sk_family(gs) == AF_INET) {
+ 		iph = ip_hdr(skb); /* outer IP header... */
+ 
+ 		if (gs->collect_md) {
+ 			vni = zero_vni;
+ 			addr = 0;
+ 		} else {
+ 			vni = gnvh->vni;
+ 
+ 			addr = iph->saddr;
+ 		}
+ 
+ 		geneve = geneve_lookup(gs, addr, vni);
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	} else if (geneve_get_sk_family(gs) == AF_INET6) {
+ 		ip6h = ipv6_hdr(skb); /* outer IPv6 header... */
+ 
+ 		if (gs->collect_md) {
+ 			vni = zero_vni;
+ 			addr6 = zero_addr6;
+ 		} else {
+ 			vni = gnvh->vni;
+ 
+ 			addr6 = ip6h->saddr;
+ 		}
+ 
+ 		geneve = geneve6_lookup(gs, addr6, vni);
+ #endif
++>>>>>>> 1e9f12ec92ab (geneve: implement geneve_get_sk_family helper)
  	}
 +
 +	geneve = geneve_lookup(gs, addr, vni);
  	if (!geneve)
  		goto drop;
  
@@@ -150,7 -215,7 +193,11 @@@
  			(gnvh->oam ? TUNNEL_OAM : 0) |
  			(gnvh->critical ? TUNNEL_CRIT_OPT : 0);
  
++<<<<<<< HEAD
 +		tun_dst = udp_tun_rx_dst(skb, AF_INET, flags,
++=======
+ 		tun_dst = udp_tun_rx_dst(skb, geneve_get_sk_family(gs), flags,
++>>>>>>> 1e9f12ec92ab (geneve: implement geneve_get_sk_family helper)
  					 vni_to_tunnel_id(gnvh->vni),
  					 gnvh->opt_len * 4);
  		if (!tun_dst)
@@@ -304,8 -391,11 +351,14 @@@ static struct socket *geneve_create_soc
  
  static void geneve_notify_add_rx_port(struct geneve_sock *gs)
  {
 -	struct net_device *dev;
  	struct sock *sk = gs->sock->sk;
++<<<<<<< HEAD
 +	sa_family_t sa_family = sk->sk_family;
++=======
+ 	struct net *net = sock_net(sk);
+ 	sa_family_t sa_family = geneve_get_sk_family(gs);
+ 	__be16 port = inet_sk(sk)->inet_sport;
++>>>>>>> 1e9f12ec92ab (geneve: implement geneve_get_sk_family helper)
  	int err;
  
  	if (sa_family == AF_INET) {
@@@ -454,8 -552,20 +507,23 @@@ static struct geneve_sock *geneve_socke
  
  static void geneve_notify_del_rx_port(struct geneve_sock *gs)
  {
 -	struct net_device *dev;
  	struct sock *sk = gs->sock->sk;
++<<<<<<< HEAD
 +	sa_family_t sa_family = sk->sk_family;
++=======
+ 	struct net *net = sock_net(sk);
+ 	sa_family_t sa_family = geneve_get_sk_family(gs);
+ 	__be16 port = inet_sk(sk)->inet_sport;
+ 
+ 	rcu_read_lock();
+ 	for_each_netdev_rcu(net, dev) {
+ 		if (dev->netdev_ops->ndo_del_geneve_port)
+ 			dev->netdev_ops->ndo_del_geneve_port(dev, sa_family,
+ 							     port);
+ 	}
+ 
+ 	rcu_read_unlock();
++>>>>>>> 1e9f12ec92ab (geneve: implement geneve_get_sk_family helper)
  
  	if (sa_family == AF_INET)
  		udp_del_offload(&gs->udp_offloads);
@@@ -479,7 -598,7 +547,11 @@@ static struct geneve_sock *geneve_find_
  
  	list_for_each_entry(gs, &gn->sock_list, list) {
  		if (inet_sk(gs->sock->sk)->inet_sport == dst_port &&
++<<<<<<< HEAD
 +		    inet_sk(gs->sock->sk)->sk.sk_family == AF_INET) {
++=======
+ 		    geneve_get_sk_family(gs) == family) {
++>>>>>>> 1e9f12ec92ab (geneve: implement geneve_get_sk_family helper)
  			return gs;
  		}
  	}
* Unmerged path drivers/net/geneve.c
