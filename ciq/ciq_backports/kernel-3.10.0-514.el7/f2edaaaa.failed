i40e/i40evf: Fix handling of boolean logic in polling routines

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit f2edaaaa392bc21c24f532ea9bcc952a54a22367
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f2edaaaa.failed

In the polling routines for i40e and i40evf we were using bitwise operators
to avoid the side effects of the logical operators, specifically the fact
that if the first case is true with "||" we skip the second case, or if it
is false with "&&" we skip the second case.  This fixes an earlier patch
that converted the bitwise operators over to the logical operators and
instead replaces the entire thing with just an if statement since it should
be more readable what we are trying to do this way.

Fixes: 1a36d7fadd14 ("i40e/i40evf: use logical operators, not bitwise")
	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit f2edaaaa392bc21c24f532ea9bcc952a54a22367)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_txrx.c
#	drivers/net/ethernet/intel/i40evf/i40e_txrx.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 5a3abb58e191,8fb2a966d70e..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@@ -2026,8 -1999,11 +2028,16 @@@ int i40e_napi_poll(struct napi_struct *
  			cleaned = i40e_clean_rx_irq_ps(ring, budget_per_ring);
  		else
  			cleaned = i40e_clean_rx_irq_1buf(ring, budget_per_ring);
++<<<<<<< HEAD
 +		/* if we didn't clean as many as budgeted, we must be done */
 +		clean_complete = clean_complete && (budget_per_ring > cleaned);
++=======
+ 
+ 		work_done += cleaned;
+ 		/* if we clean as many as budgeted, we must not be done */
+ 		if (cleaned >= budget_per_ring)
+ 			clean_complete = false;
++>>>>>>> f2edaaaa392b (i40e/i40evf: Fix handling of boolean logic in polling routines)
  	}
  
  	/* If work not completed, return budget and polling will return */
diff --cc drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index f6384b0c8220,839a6df62f72..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@@ -1457,8 -1435,11 +1459,16 @@@ int i40evf_napi_poll(struct napi_struc
  			cleaned = i40e_clean_rx_irq_ps(ring, budget_per_ring);
  		else
  			cleaned = i40e_clean_rx_irq_1buf(ring, budget_per_ring);
++<<<<<<< HEAD
 +		/* if we didn't clean as many as budgeted, we must be done */
 +		clean_complete = clean_complete && (budget_per_ring > cleaned);
++=======
+ 
+ 		work_done += cleaned;
+ 		/* if we clean as many as budgeted, we must not be done */
+ 		if (cleaned >= budget_per_ring)
+ 			clean_complete = false;
++>>>>>>> f2edaaaa392b (i40e/i40evf: Fix handling of boolean logic in polling routines)
  	}
  
  	/* If work not completed, return budget and polling will return */
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_txrx.c
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_txrx.c
