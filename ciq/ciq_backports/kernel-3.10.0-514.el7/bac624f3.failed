MD: add a new disk role to present write journal device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [md] add a new disk role to present write journal device (Jes Sorensen) [1250578 1265947 1273343 1299140 1307091 1312828 1320563 1340839]
Rebuild_FUZZ: 96.23%
commit-author Song Liu <songliubraving@fb.com>
commit bac624f3f86a8c7db395c7f85ccad6a504b9c4b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bac624f3.failed

Next patches will use a disk as raid5/6 journaling. We need a new disk
role to present the journal device and add MD_FEATURE_JOURNAL to
feature_map for backward compability.

	Signed-off-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
	Signed-off-by: NeilBrown <neilb@suse.com>
(cherry picked from commit bac624f3f86a8c7db395c7f85ccad6a504b9c4b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
#	drivers/md/md.h
#	include/uapi/linux/raid/md_p.h
diff --cc drivers/md/md.c
index 09cc33b8b337,391341a772c7..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -5878,12 -5968,43 +5891,33 @@@ static int add_new_disk(struct mddev *m
  		else
  			clear_bit(WriteMostly, &rdev->flags);
  
++<<<<<<< HEAD
++=======
+ 		if (info->state & (1<<MD_DISK_JOURNAL))
+ 			set_bit(Journal, &rdev->flags);
+ 		/*
+ 		 * check whether the device shows up in other nodes
+ 		 */
+ 		if (mddev_is_clustered(mddev)) {
+ 			if (info->state & (1 << MD_DISK_CANDIDATE))
+ 				set_bit(Candidate, &rdev->flags);
+ 			else if (info->state & (1 << MD_DISK_CLUSTER_ADD)) {
+ 				/* --add initiated by this node */
+ 				err = md_cluster_ops->add_new_disk(mddev, rdev);
+ 				if (err) {
+ 					export_rdev(rdev);
+ 					return err;
+ 				}
+ 			}
+ 		}
+ 
++>>>>>>> bac624f3f86a (MD: add a new disk role to present write journal device)
  		rdev->raid_disk = -1;
  		err = bind_rdev_to_array(rdev, mddev);
 -
  		if (err)
  			export_rdev(rdev);
 -
 -		if (mddev_is_clustered(mddev)) {
 -			if (info->state & (1 << MD_DISK_CANDIDATE))
 -				md_cluster_ops->new_disk_ack(mddev, (err == 0));
 -			else {
 -				if (err)
 -					md_cluster_ops->add_new_disk_cancel(mddev);
 -				else
 -					err = add_bound_rdev(rdev);
 -			}
 -
 -		} else if (!err)
 +		else
  			err = add_bound_rdev(rdev);
 -
  		return err;
  	}
  
diff --cc drivers/md/md.h
index f8d82442ce8b,88dc6312f5d5..000000000000
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@@ -170,6 -168,15 +170,18 @@@ enum flag_bits 
  				 * a want_replacement device with same
  				 * raid_disk number.
  				 */
++<<<<<<< HEAD
++=======
+ 	Candidate,		/* For clustered environments only:
+ 				 * This device is seen locally but not
+ 				 * by the whole cluster
+ 				 */
+ 	Journal,		/* This device is used as journal for
+ 				 * raid-5/6.
+ 				 * Usually, this device should be faster
+ 				 * than other devices in the array
+ 				 */
++>>>>>>> bac624f3f86a (MD: add a new disk role to present write journal device)
  };
  
  #define BB_LEN_MASK	(0x00000000000001FFULL)
diff --cc include/uapi/linux/raid/md_p.h
index 2b8150485007,eaaab52077a3..000000000000
--- a/include/uapi/linux/raid/md_p.h
+++ b/include/uapi/linux/raid/md_p.h
@@@ -298,6 -308,8 +300,11 @@@ struct mdp_superblock_1 
  #define	MD_FEATURE_RECOVERY_BITMAP	128 /* recovery that is happening
  					     * is guided by bitmap.
  					     */
++<<<<<<< HEAD
++=======
+ #define MD_FEATURE_CLUSTERED		256 /* clustered MD */
+ #define	MD_FEATURE_JOURNAL		512 /* support write cache */
++>>>>>>> bac624f3f86a (MD: add a new disk role to present write journal device)
  #define	MD_FEATURE_ALL			(MD_FEATURE_BITMAP_OFFSET	\
  					|MD_FEATURE_RECOVERY_OFFSET	\
  					|MD_FEATURE_RESHAPE_ACTIVE	\
* Unmerged path drivers/md/md.c
* Unmerged path drivers/md/md.h
* Unmerged path include/uapi/linux/raid/md_p.h
