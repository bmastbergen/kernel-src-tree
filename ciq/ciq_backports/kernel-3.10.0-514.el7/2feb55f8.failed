fs: allow no_seek_end_llseek to actually seek

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [fs] allow no_seek_end_llseek to actually seek (David Arcari) [1350836]
Rebuild_FUZZ: 95.35%
commit-author Wouter van Kesteren <woutershep@gmail.com>
commit 2feb55f89096b22e2de066e411a3263647211987
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2feb55f8.failed

The user-visible impact of the issue is for example that without this
patch sensors-detect breaks when trying to seek in /dev/cpu/0/cpuid.

'~0ULL' is a 'unsigned long long' that when converted to a loff_t,
which is signed, gets turned into -1. later in vfs_setpos we have
'if (offset > maxsize)', which makes it always return EINVAL.

Fixes: b25472f9b961 ("new helpers: no_seek_end_llseek{,_size}()")
	Signed-off-by: Wouter van Kesteren <woutershep@gmail.com>
	Reviewed-by: Andreas Dilger <adilger@dilger.ca>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 2feb55f89096b22e2de066e411a3263647211987)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/read_write.c
diff --cc fs/read_write.c
index b419445f9b49,0c8782aa3d71..000000000000
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@@ -17,6 -16,8 +17,11 @@@
  #include <linux/pagemap.h>
  #include <linux/splice.h>
  #include <linux/compat.h>
++<<<<<<< HEAD
++=======
+ #include <linux/mount.h>
+ #include <linux/fs.h>
++>>>>>>> 2feb55f89096 (fs: allow no_seek_end_llseek to actually seek)
  #include "internal.h"
  
  #include <asm/uaccess.h>
@@@ -174,6 -173,45 +179,48 @@@ loff_t fixed_size_llseek(struct file *f
  EXPORT_SYMBOL(fixed_size_llseek);
  
  /**
++<<<<<<< HEAD
++=======
+  * no_seek_end_llseek - llseek implementation for fixed-sized devices
+  * @file:	file structure to seek on
+  * @offset:	file offset to seek to
+  * @whence:	type of seek
+  *
+  */
+ loff_t no_seek_end_llseek(struct file *file, loff_t offset, int whence)
+ {
+ 	switch (whence) {
+ 	case SEEK_SET: case SEEK_CUR:
+ 		return generic_file_llseek_size(file, offset, whence,
+ 						OFFSET_MAX, 0);
+ 	default:
+ 		return -EINVAL;
+ 	}
+ }
+ EXPORT_SYMBOL(no_seek_end_llseek);
+ 
+ /**
+  * no_seek_end_llseek_size - llseek implementation for fixed-sized devices
+  * @file:	file structure to seek on
+  * @offset:	file offset to seek to
+  * @whence:	type of seek
+  * @size:	maximal offset allowed
+  *
+  */
+ loff_t no_seek_end_llseek_size(struct file *file, loff_t offset, int whence, loff_t size)
+ {
+ 	switch (whence) {
+ 	case SEEK_SET: case SEEK_CUR:
+ 		return generic_file_llseek_size(file, offset, whence,
+ 						size, 0);
+ 	default:
+ 		return -EINVAL;
+ 	}
+ }
+ EXPORT_SYMBOL(no_seek_end_llseek_size);
+ 
+ /**
++>>>>>>> 2feb55f89096 (fs: allow no_seek_end_llseek to actually seek)
   * noop_llseek - No Operation Performed llseek implementation
   * @file:	file structure to seek on
   * @offset:	file offset to seek to
* Unmerged path fs/read_write.c
