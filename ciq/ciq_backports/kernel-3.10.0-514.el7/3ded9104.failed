driver core: Avoid NULL pointer dereferences in device_is_bound()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drivers] core: Avoid NULL pointer dereferences in device_is_bound() (Jeremy McNicoll) [1309527]
Rebuild_FUZZ: 94.31%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 3ded91041a762423bd49bb932ae2e36b65c6ae4b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3ded9104.failed

If device_is_bound() is called on a device that's not been registered
yet, it will attepmt to dereference dev->p which is NULL, so avoid
that by checking dev->p in there against NULL.

Fixes: 6b9cb42752da "device core: add device_is_bound()"
Reported-and-tested-by: Guenter Roeck <linux@roeck-us.net>
	Tested-by: Tony Lindgren <tony@atomide.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 3ded91041a762423bd49bb932ae2e36b65c6ae4b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/dd.c
diff --cc drivers/base/dd.c
index 06051767393f,c4da2df62e02..000000000000
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@@ -179,9 -223,23 +179,26 @@@ static int deferred_probe_initcall(void
  }
  late_initcall(deferred_probe_initcall);
  
++<<<<<<< HEAD
++=======
+ /**
+  * device_is_bound() - Check if device is bound to a driver
+  * @dev: device to check
+  *
+  * Returns true if passed device has already finished probing successfully
+  * against a driver.
+  *
+  * This function must be called with the device lock held.
+  */
+ bool device_is_bound(struct device *dev)
+ {
+ 	return dev->p && klist_node_attached(&dev->p->knode_driver);
+ }
+ 
++>>>>>>> 3ded91041a76 (driver core: Avoid NULL pointer dereferences in device_is_bound())
  static void driver_bound(struct device *dev)
  {
 -	if (device_is_bound(dev)) {
 +	if (klist_node_attached(&dev->p->knode_driver)) {
  		printk(KERN_WARNING "%s: device %s already bound\n",
  			__func__, kobject_name(&dev->kobj));
  		return;
* Unmerged path drivers/base/dd.c
