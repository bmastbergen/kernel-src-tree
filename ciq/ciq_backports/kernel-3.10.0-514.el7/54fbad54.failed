perf mem record: Check for memory events support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 54fbad54ebcde9db9c7459e9e379f2350c25e1f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/54fbad54.failed

Check if current kernel support available memory events and display the
status within -e  list option:

  $ perf mem record -e list
  ldlat-loads  : available
  ldlat-stores : available

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1456303616-26926-2-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 54fbad54ebcde9db9c7459e9e379f2350c25e1f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-mem.c
#	tools/perf/util/mem-events.c
#	tools/perf/util/mem-events.h
diff --cc tools/perf/builtin-mem.c
index 80170aace5d4,f1fa7b8d1f69..000000000000
--- a/tools/perf/builtin-mem.c
+++ b/tools/perf/builtin-mem.c
@@@ -21,6 -23,40 +21,43 @@@ struct perf_mem 
  	DECLARE_BITMAP(cpu_bitmap, MAX_NR_CPUS);
  };
  
++<<<<<<< HEAD
++=======
+ static int parse_record_events(const struct option *opt,
+ 			       const char *str, int unset __maybe_unused)
+ {
+ 	struct perf_mem *mem = *(struct perf_mem **)opt->value;
+ 	int j;
+ 
+ 	if (strcmp(str, "list")) {
+ 		if (!perf_mem_events__parse(str)) {
+ 			mem->operation = 0;
+ 			return 0;
+ 		}
+ 		exit(-1);
+ 	}
+ 
+ 	for (j = 0; j < PERF_MEM_EVENTS__MAX; j++) {
+ 		struct perf_mem_event *e = &perf_mem_events[j];
+ 
+ 		fprintf(stderr, "%-13s%-*s%s\n",
+ 			e->tag,
+ 			verbose ? 25 : 0,
+ 			verbose ? e->name : "",
+ 			e->supported ? ": available" : "");
+ 	}
+ 	exit(0);
+ }
+ 
+ static const char * const __usage[] = {
+ 	"perf mem record [<options>] [<command>]",
+ 	"perf mem record [<options>] -- <command> [<options>]",
+ 	NULL
+ };
+ 
+ static const char * const *record_mem_usage = __usage;
+ 
++>>>>>>> 54fbad54ebcd (perf mem record: Check for memory events support)
  static int __cmd_record(int argc, const char **argv, struct perf_mem *mem)
  {
  	int rec_argc, i = 0, j;
@@@ -39,19 -89,33 +76,32 @@@
  
  	rec_argv[i++] = "-d";
  
++<<<<<<< HEAD
 +	if (mem->operation & MEM_OPERATION_LOAD) {
++=======
+ 	for (j = 0; j < PERF_MEM_EVENTS__MAX; j++) {
+ 		if (!perf_mem_events[j].record)
+ 			continue;
+ 
+ 		if (!perf_mem_events[j].supported) {
+ 			pr_err("failed: event '%s' not supported\n",
+ 			       perf_mem_events[j].name);
+ 			return -1;
+ 		}
+ 
++>>>>>>> 54fbad54ebcd (perf mem record: Check for memory events support)
  		rec_argv[i++] = "-e";
 -		rec_argv[i++] = perf_mem_events[j].name;
 -	};
 -
 -	for (j = 0; j < argc; j++, i++)
 -		rec_argv[i] = argv[j];
 -
 -	if (verbose > 0) {
 -		pr_debug("calling: record ");
 +		rec_argv[i++] = "cpu/mem-loads/pp";
 +	}
  
 -		while (rec_argv[j]) {
 -			pr_debug("%s ", rec_argv[j]);
 -			j++;
 -		}
 -		pr_debug("\n");
 +	if (mem->operation & MEM_OPERATION_STORE) {
 +		rec_argv[i++] = "-e";
 +		rec_argv[i++] = "cpu/mem-stores/pp";
  	}
  
 +	for (j = 1; j < argc; j++, i++)
 +		rec_argv[i] = argv[j];
 +
  	ret = cmd_record(i, rec_argv, NULL);
  	free(rec_argv);
  	return ret;
@@@ -298,6 -362,10 +348,13 @@@ int cmd_mem(int argc, const char **argv
  		NULL
  	};
  
++<<<<<<< HEAD
++=======
+ 	if (perf_mem_events__init()) {
+ 		pr_err("failed: memory events not supported\n");
+ 		return -1;
+ 	}
++>>>>>>> 54fbad54ebcd (perf mem record: Check for memory events support)
  
  	argc = parse_options_subcommand(argc, argv, mem_options, mem_subcommands,
  					mem_usage, PARSE_OPT_STOP_AT_NON_OPTION);
* Unmerged path tools/perf/util/mem-events.c
* Unmerged path tools/perf/util/mem-events.h
* Unmerged path tools/perf/builtin-mem.c
* Unmerged path tools/perf/util/mem-events.c
* Unmerged path tools/perf/util/mem-events.h
