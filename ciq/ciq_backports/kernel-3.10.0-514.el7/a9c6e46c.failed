perf tools: Add helper functions for some sort keys

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Namhyung Kim <namhyung@kernel.org>
commit a9c6e46c04ba38925e94c4c2fa9217460338db43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a9c6e46c.failed

The 'trace', 'srcline' and 'srcfile' sort keys updates hist entry's
field later.  With the hierarchy mode, those fields are passed to a
matching entry so it needs to identify the sort keys.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1456326830-30456-2-git-send-email-namhyung@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a9c6e46c04ba38925e94c4c2fa9217460338db43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.h
#	tools/perf/util/sort.c
diff --cc tools/perf/util/hist.h
index 2e5b433c74ba,044419b3be7c..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -271,16 -293,29 +271,24 @@@ enum 
  void perf_hpp__init(void);
  void perf_hpp__column_unregister(struct perf_hpp_fmt *format);
  void perf_hpp__cancel_cumulate(void);
 -void perf_hpp__setup_output_field(struct perf_hpp_list *list);
 -void perf_hpp__reset_output_field(struct perf_hpp_list *list);
 -void perf_hpp__append_sort_keys(struct perf_hpp_list *list);
 -
 +void perf_hpp__setup_output_field(void);
 +void perf_hpp__reset_output_field(void);
 +void perf_hpp__append_sort_keys(void);
  
  bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format);
++<<<<<<< HEAD
 +bool perf_hpp__same_sort_entry(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b);
++=======
+ bool perf_hpp__is_dynamic_entry(struct perf_hpp_fmt *format);
+ bool perf_hpp__defined_dynamic_entry(struct perf_hpp_fmt *fmt, struct hists *hists);
+ bool perf_hpp__is_trace_entry(struct perf_hpp_fmt *fmt);
+ bool perf_hpp__is_srcline_entry(struct perf_hpp_fmt *fmt);
+ bool perf_hpp__is_srcfile_entry(struct perf_hpp_fmt *fmt);
++>>>>>>> a9c6e46c04ba (perf tools: Add helper functions for some sort keys)
  
 -static inline bool perf_hpp__should_skip(struct perf_hpp_fmt *format,
 -					 struct hists *hists)
 +static inline bool perf_hpp__should_skip(struct perf_hpp_fmt *format)
  {
 -	if (format->elide)
 -		return true;
 -
 -	if (perf_hpp__is_dynamic_entry(format) &&
 -	    !perf_hpp__defined_dynamic_entry(format, hists))
 -		return true;
 -
 -	return false;
 +	return format->elide;
  }
  
  void perf_hpp__reset_width(struct perf_hpp_fmt *fmt, struct hists *hists);
diff --cc tools/perf/util/sort.c
index 8f36c1d6fd38,358035c2c327..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -1448,6 -1386,66 +1448,69 @@@ static int64_t __sort__hpp_sort(struct 
  	return sort_fn(a, b);
  }
  
++<<<<<<< HEAD
++=======
+ bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format)
+ {
+ 	return format->header == __sort__hpp_header;
+ }
+ 
+ bool perf_hpp__is_trace_entry(struct perf_hpp_fmt *fmt)
+ {
+ 	struct hpp_sort_entry *hse;
+ 
+ 	if (!perf_hpp__is_sort_entry(fmt))
+ 		return false;
+ 
+ 	hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 	return hse->se == &sort_trace;
+ }
+ 
+ bool perf_hpp__is_srcline_entry(struct perf_hpp_fmt *fmt)
+ {
+ 	struct hpp_sort_entry *hse;
+ 
+ 	if (!perf_hpp__is_sort_entry(fmt))
+ 		return false;
+ 
+ 	hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 	return hse->se == &sort_srcline;
+ }
+ 
+ bool perf_hpp__is_srcfile_entry(struct perf_hpp_fmt *fmt)
+ {
+ 	struct hpp_sort_entry *hse;
+ 
+ 	if (!perf_hpp__is_sort_entry(fmt))
+ 		return false;
+ 
+ 	hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 	return hse->se == &sort_srcfile;
+ }
+ 
+ static bool __sort__hpp_equal(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b)
+ {
+ 	struct hpp_sort_entry *hse_a;
+ 	struct hpp_sort_entry *hse_b;
+ 
+ 	if (!perf_hpp__is_sort_entry(a) || !perf_hpp__is_sort_entry(b))
+ 		return false;
+ 
+ 	hse_a = container_of(a, struct hpp_sort_entry, hpp);
+ 	hse_b = container_of(b, struct hpp_sort_entry, hpp);
+ 
+ 	return hse_a->se == hse_b->se;
+ }
+ 
+ static void hse_free(struct perf_hpp_fmt *fmt)
+ {
+ 	struct hpp_sort_entry *hse;
+ 
+ 	hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 	free(hse);
+ }
+ 
++>>>>>>> a9c6e46c04ba (perf tools: Add helper functions for some sort keys)
  static struct hpp_sort_entry *
  __sort_dimension__alloc_hpp(struct sort_dimension *sd)
  {
* Unmerged path tools/perf/util/hist.h
* Unmerged path tools/perf/util/sort.c
