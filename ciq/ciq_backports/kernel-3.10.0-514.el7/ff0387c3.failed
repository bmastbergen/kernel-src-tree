PCI: Delete unnecessary NULL pointer checks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [pci] Delete unnecessary NULL pointer checks (Myron Stowe) [1331507]
Rebuild_FUZZ: 93.83%
commit-author Markus Elfring <elfring@users.sourceforge.net>
commit ff0387c3777f2438bad2088abe442c9f231b0be4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ff0387c3.failed

The functions pci_dev_put(), pci_pme_wakeup_bus(), and put_device() return
immediately if their argument is NULL.  Thus the test before the call is
not needed.

Remove these unnecessary tests.

This issue was detected by using the Coccinelle software.

	Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit ff0387c3777f2438bad2088abe442c9f231b0be4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-acpi.c
diff --cc drivers/pci/pci-acpi.c
index 54216cd523ca,3542150fc8a3..000000000000
--- a/drivers/pci/pci-acpi.c
+++ b/drivers/pci/pci-acpi.c
@@@ -372,6 -279,72 +372,75 @@@ int pci_get_hp_params(struct pci_dev *d
  }
  EXPORT_SYMBOL_GPL(pci_get_hp_params);
  
++<<<<<<< HEAD
++=======
+ /**
+  * pci_acpi_wake_bus - Root bus wakeup notification fork function.
+  * @work: Work item to handle.
+  */
+ static void pci_acpi_wake_bus(struct work_struct *work)
+ {
+ 	struct acpi_device *adev;
+ 	struct acpi_pci_root *root;
+ 
+ 	adev = container_of(work, struct acpi_device, wakeup.context.work);
+ 	root = acpi_driver_data(adev);
+ 	pci_pme_wakeup_bus(root->bus);
+ }
+ 
+ /**
+  * pci_acpi_wake_dev - PCI device wakeup notification work function.
+  * @handle: ACPI handle of a device the notification is for.
+  * @work: Work item to handle.
+  */
+ static void pci_acpi_wake_dev(struct work_struct *work)
+ {
+ 	struct acpi_device_wakeup_context *context;
+ 	struct pci_dev *pci_dev;
+ 
+ 	context = container_of(work, struct acpi_device_wakeup_context, work);
+ 	pci_dev = to_pci_dev(context->dev);
+ 
+ 	if (pci_dev->pme_poll)
+ 		pci_dev->pme_poll = false;
+ 
+ 	if (pci_dev->current_state == PCI_D3cold) {
+ 		pci_wakeup_event(pci_dev);
+ 		pm_runtime_resume(&pci_dev->dev);
+ 		return;
+ 	}
+ 
+ 	/* Clear PME Status if set. */
+ 	if (pci_dev->pme_support)
+ 		pci_check_pme_status(pci_dev);
+ 
+ 	pci_wakeup_event(pci_dev);
+ 	pm_runtime_resume(&pci_dev->dev);
+ 
+ 	pci_pme_wakeup_bus(pci_dev->subordinate);
+ }
+ 
+ /**
+  * pci_acpi_add_bus_pm_notifier - Register PM notifier for root PCI bus.
+  * @dev: PCI root bridge ACPI device.
+  */
+ acpi_status pci_acpi_add_bus_pm_notifier(struct acpi_device *dev)
+ {
+ 	return acpi_add_pm_notifier(dev, NULL, pci_acpi_wake_bus);
+ }
+ 
+ /**
+  * pci_acpi_add_pm_notifier - Register PM notifier for given PCI device.
+  * @dev: ACPI device to add the notifier for.
+  * @pci_dev: PCI device to check for the PME status if an event is signaled.
+  */
+ acpi_status pci_acpi_add_pm_notifier(struct acpi_device *dev,
+ 				     struct pci_dev *pci_dev)
+ {
+ 	return acpi_add_pm_notifier(dev, &pci_dev->dev, pci_acpi_wake_dev);
+ }
+ 
++>>>>>>> ff0387c3777f (PCI: Delete unnecessary NULL pointer checks)
  /*
   * _SxD returns the D-state with the highest power
   * (lowest D-state number) supported in the S-state "x".
* Unmerged path drivers/pci/pci-acpi.c
diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index d900c70685e3..d1c632cbdefd 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -87,8 +87,7 @@ static void release_pcibus_dev(struct device *dev)
 {
 	struct pci_bus *pci_bus = to_pci_bus(dev);
 
-	if (pci_bus->bridge)
-		put_device(pci_bus->bridge);
+	put_device(pci_bus->bridge);
 	pci_bus_remove_resources(pci_bus);
 	pci_release_bus_of_node(pci_bus);
 	kfree(pci_bus->pci_bus_rh);
diff --git a/drivers/pci/search.c b/drivers/pci/search.c
index 9f0453ad3cd8..e750d378e95c 100644
--- a/drivers/pci/search.c
+++ b/drivers/pci/search.c
@@ -312,8 +312,7 @@ static struct pci_dev *pci_get_dev_by_id(const struct pci_device_id *id,
 			      match_pci_dev_by_id);
 	if (dev)
 		pdev = to_pci_dev(dev);
-	if (from)
-		pci_dev_put(from);
+	pci_dev_put(from);
 	return pdev;
 }
 
diff --git a/drivers/pci/xen-pcifront.c b/drivers/pci/xen-pcifront.c
index eae7cd9fde7b..13022139ac0f 100644
--- a/drivers/pci/xen-pcifront.c
+++ b/drivers/pci/xen-pcifront.c
@@ -590,8 +590,7 @@ static pci_ers_result_t pcifront_common_process(int cmd,
 	pcidev = pci_get_bus_and_slot(bus, devfn);
 	if (!pcidev || !pcidev->driver) {
 		dev_err(&pdev->xdev->dev, "device or AER driver is NULL\n");
-		if (pcidev)
-			pci_dev_put(pcidev);
+		pci_dev_put(pcidev);
 		return result;
 	}
 	pdrv = pcidev->driver;
