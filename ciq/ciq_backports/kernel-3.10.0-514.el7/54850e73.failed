zram: change parameter from vaild_io_request()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author karam.lee <karam.lee@lge.com>
commit 54850e73e86e3bc092680d1bdb84eb322f982ab1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/54850e73.failed

This patch changes parameter of valid_io_request for common usage.  The
purpose of valid_io_request() is to determine if bio request is valid or
not.

This patch use I/O start address and size instead of a BIO parameter for
common usage.

	Signed-off-by: karam.lee <karam.lee@lge.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
	Acked-by: Jerome Marchand <jmarchan@redhat.com>
	Cc: Matthew Wilcox <matthew.r.wilcox@intel.com>
	Cc: Nitin Gupta <ngupta@vflare.org>
	Cc: <seungho1.park@lge.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 54850e73e86e3bc092680d1bdb84eb322f982ab1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/zram/zram_drv.c
diff --cc drivers/block/zram/zram_drv.c
index 294e16906db2,98af4aae2618..000000000000
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@@ -274,18 -287,18 +274,28 @@@ static inline int is_partial_io(struct 
  /*
   * Check if request is within bounds and aligned on zram logical blocks.
   */
- static inline int valid_io_request(struct zram *zram, struct bio *bio)
+ static inline int valid_io_request(struct zram *zram,
+ 		sector_t start, unsigned int size)
  {
- 	u64 start, end, bound;
+ 	u64 end, bound;
  
  	/* unaligned request */
++<<<<<<< HEAD
 +	if (unlikely(bio->bi_sector & (ZRAM_SECTOR_PER_LOGICAL_BLOCK - 1)))
 +		return 0;
 +	if (unlikely(bio->bi_size & (ZRAM_LOGICAL_BLOCK_SIZE - 1)))
 +		return 0;
 +
 +	start = bio->bi_sector;
 +	end = start + (bio->bi_size >> SECTOR_SHIFT);
++=======
+ 	if (unlikely(start & (ZRAM_SECTOR_PER_LOGICAL_BLOCK - 1)))
+ 		return 0;
+ 	if (unlikely(size & (ZRAM_LOGICAL_BLOCK_SIZE - 1)))
+ 		return 0;
+ 
+ 	end = start + (size >> SECTOR_SHIFT);
++>>>>>>> 54850e73e86e (zram: change parameter from vaild_io_request())
  	bound = zram->disksize >> SECTOR_SHIFT;
  	/* out of range range */
  	if (unlikely(start >= bound || end > bound || start > end))
* Unmerged path drivers/block/zram/zram_drv.c
