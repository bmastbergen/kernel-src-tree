Drivers: hv: vmbus: Use READ_ONCE() to read variables that are volatile

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hv] vmbus: Use READ_ONCE() to read variables that are volatile (Vitaly Kuznetsov) [1339684]
Rebuild_FUZZ: 89.92%
commit-author K. Y. Srinivasan <kys@microsoft.com>
commit d45faaeedb762a3965a0246cf831e55045dd6ef8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d45faaee.failed

Use the READ_ONCE macro to access variabes that can change asynchronously.
This is the recommended mechanism for dealing with "unsafe" compiler
optimizations.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit d45faaeedb762a3965a0246cf831e55045dd6ef8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/ring_buffer.c
diff --cc drivers/hv/ring_buffer.c
index 6361d124f67d,6ea1b552cc8a..000000000000
--- a/drivers/hv/ring_buffer.c
+++ b/drivers/hv/ring_buffer.c
@@@ -103,19 -99,26 +103,26 @@@ static bool hv_need_to_signal(u32 old_w
   *    there is room for the producer to send the pending packet.
   */
  
 -static bool hv_need_to_signal_on_read(struct hv_ring_buffer_info *rbi)
 +static bool hv_need_to_signal_on_read(u32 old_rd,
 +					 struct hv_ring_buffer_info *rbi)
  {
 +	u32 prev_write_sz;
  	u32 cur_write_sz;
 -	u32 pending_sz;
 +	u32 r_size;
 +	u32 write_loc = rbi->ring_buffer->write_index;
 +	u32 read_loc = rbi->ring_buffer->read_index;
 +	u32 pending_sz = rbi->ring_buffer->pending_send_sz;
  
  	/*
 -	 * Issue a full memory barrier before making the signaling decision.
 -	 * Here is the reason for having this barrier:
 -	 * If the reading of the pend_sz (in this function)
 -	 * were to be reordered and read before we commit the new read
 -	 * index (in the calling function)  we could
 -	 * have a problem. If the host were to set the pending_sz after we
 -	 * have sampled pending_sz and go to sleep before we commit the
 -	 * read index, we could miss sending the interrupt. Issue a full
 -	 * memory barrier to address this.
 +	 * If the other end is not blocked on write don't bother.
  	 */
++<<<<<<< HEAD
++=======
+ 	mb();
+ 
+ 	pending_sz = READ_ONCE(rbi->ring_buffer->pending_send_sz);
+ 	/* If the other end is not blocked on write don't bother. */
++>>>>>>> d45faaeedb76 (Drivers: hv: vmbus: Use READ_ONCE() to read variables that are volatile)
  	if (pending_sz == 0)
  		return false;
  
* Unmerged path drivers/hv/ring_buffer.c
