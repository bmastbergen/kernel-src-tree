rcu: Convert rcutree_plugin.h printk calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit efc151c33b971148894789dc7c5589dec46d4348
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/efc151c3.failed

This commit converts printk() calls to the corresponding pr_*() calls.

	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Reviewed-by: Josh Triplett <josh@joshtriplett.org>
(cherry picked from commit efc151c33b971148894789dc7c5589dec46d4348)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcutree_plugin.h
diff --cc kernel/rcutree_plugin.h
index 4c302a1eed7f,207844ea0226..000000000000
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@@ -60,31 -60,30 +60,34 @@@ static void __init rcu_bootup_announce_
  	       CONFIG_RCU_FANOUT);
  #endif
  #ifdef CONFIG_RCU_FANOUT_EXACT
- 	printk(KERN_INFO "\tHierarchical RCU autobalancing is disabled.\n");
+ 	pr_info("\tHierarchical RCU autobalancing is disabled.\n");
  #endif
  #ifdef CONFIG_RCU_FAST_NO_HZ
- 	printk(KERN_INFO
- 	       "\tRCU dyntick-idle grace-period acceleration is enabled.\n");
+ 	pr_info("\tRCU dyntick-idle grace-period acceleration is enabled.\n");
  #endif
  #ifdef CONFIG_PROVE_RCU
- 	printk(KERN_INFO "\tRCU lockdep checking is enabled.\n");
+ 	pr_info("\tRCU lockdep checking is enabled.\n");
  #endif
  #ifdef CONFIG_RCU_TORTURE_TEST_RUNNABLE
- 	printk(KERN_INFO "\tRCU torture testing starts during boot.\n");
+ 	pr_info("\tRCU torture testing starts during boot.\n");
  #endif
  #if defined(CONFIG_TREE_PREEMPT_RCU) && !defined(CONFIG_RCU_CPU_STALL_VERBOSE)
- 	printk(KERN_INFO "\tDump stacks of tasks blocking RCU-preempt GP.\n");
+ 	pr_info("\tDump stacks of tasks blocking RCU-preempt GP.\n");
  #endif
  #if defined(CONFIG_RCU_CPU_STALL_INFO)
- 	printk(KERN_INFO "\tAdditional per-CPU info printed with stalls.\n");
+ 	pr_info("\tAdditional per-CPU info printed with stalls.\n");
  #endif
  #if NUM_RCU_LVL_4 != 0
- 	printk(KERN_INFO "\tFour-level hierarchy is enabled.\n");
+ 	pr_info("\tFour-level hierarchy is enabled.\n");
  #endif
  	if (rcu_fanout_leaf != CONFIG_RCU_FANOUT_LEAF)
++<<<<<<< HEAD
 +		pr_info("\tBoot-time adjustment of leaf fanout to %d.\n", rcu_fanout_leaf);
++=======
+ 		pr_info("\tExperimental boot-time adjustment of leaf fanout to %d.\n", rcu_fanout_leaf);
++>>>>>>> efc151c33b97 (rcu: Convert rcutree_plugin.h printk calls)
  	if (nr_cpu_ids != NR_CPUS)
- 		printk(KERN_INFO "\tRCU restricting CPUs from NR_CPUS=%d to nr_cpu_ids=%d.\n", NR_CPUS, nr_cpu_ids);
+ 		pr_info("\tRCU restricting CPUs from NR_CPUS=%d to nr_cpu_ids=%d.\n", NR_CPUS, nr_cpu_ids);
  #ifdef CONFIG_RCU_NOCB_CPU
  #ifndef CONFIG_RCU_NOCB_CPU_NONE
  	if (!have_rcu_nocb_mask) {
* Unmerged path kernel/rcutree_plugin.h
