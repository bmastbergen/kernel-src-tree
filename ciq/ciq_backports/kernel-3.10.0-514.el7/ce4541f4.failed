nvme: move the call to nvme_init_identify earlier

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christoph Hellwig <hch@lst.de>
commit ce4541f40a949cd9a9c9f308b1a6a86914ce6e1a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ce4541f4.failed

We want to record the identify and CAP values even if no I/O queue
is available.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit ce4541f40a949cd9a9c9f308b1a6a86914ce6e1a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index 2a6eb55ad96c,4d64aee61aea..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -2411,51 -1930,6 +2411,54 @@@ static void nvme_dev_scan(struct work_s
   */
  static int nvme_dev_add(struct nvme_dev *dev)
  {
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +	struct pci_dev *pdev = dev->pci_dev;
 +	int res;
 +	unsigned nn;
 +	struct nvme_id_ctrl *ctrl;
 +	void *mem;
 +	dma_addr_t dma_addr;
 +	int shift = NVME_CAP_MPSMIN(readq(&dev->bar->cap)) + 12;
 +
 +	mem = dma_alloc_coherent(&pdev->dev, 4096, &dma_addr, GFP_KERNEL);
 +	if (!mem)
 +		return -ENOMEM;
 +
 +	res = nvme_identify(dev, 0, 1, dma_addr);
 +	if (res) {
 +		dev_err(&pdev->dev, "Identify Controller failed (%d)\n", res);
 +		dma_free_coherent(&dev->pci_dev->dev, 4096, mem, dma_addr);
 +		return -EIO;
 +	}
 +
 +	ctrl = mem;
 +	nn = le32_to_cpup(&ctrl->nn);
 +	dev->oncs = le16_to_cpup(&ctrl->oncs);
 +	dev->abort_limit = ctrl->acl + 1;
 +	dev->vwc = ctrl->vwc;
 +	memcpy(dev->serial, ctrl->sn, sizeof(ctrl->sn));
 +	memcpy(dev->model, ctrl->mn, sizeof(ctrl->mn));
 +	memcpy(dev->firmware_rev, ctrl->fr, sizeof(ctrl->fr));
 +	if (ctrl->mdts)
 +		dev->max_hw_sectors = 1 << (ctrl->mdts + shift - 9);
 +	else
 +		dev->max_hw_sectors = UINT_MAX;
 +	if ((pdev->vendor == PCI_VENDOR_ID_INTEL) &&
 +			(pdev->device == 0x0953) && ctrl->vs[3]) {
 +		unsigned int max_hw_sectors;
 +
 +		dev->stripe_size = 1 << (ctrl->vs[3] + shift);
 +		max_hw_sectors = dev->stripe_size >> (shift - 9);
 +		if (dev->max_hw_sectors) {
 +			dev->max_hw_sectors = min(max_hw_sectors,
 +							dev->max_hw_sectors);
 +		} else
 +			dev->max_hw_sectors = max_hw_sectors;
 +	}
 +	dma_free_coherent(&dev->pci_dev->dev, 4096, mem, dma_addr);
 +
++=======
++>>>>>>> ce4541f40a94 (nvme: move the call to nvme_init_identify earlier):drivers/nvme/host/pci.c
  	if (!dev->tagset.tags) {
  		dev->tagset.ops = &nvme_mq_ops;
  		dev->tagset.nr_hw_queues = dev->online_queues - 1;
* Unmerged path drivers/block/nvme-core.c
