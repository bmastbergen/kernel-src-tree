powerpc/powernv: Specialise pci_controller_ops for each controller type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [powerpc] powernv: Specialise pci_controller_ops for each controller type (Gustavo Duarte) [1275657]
Rebuild_FUZZ: 94.03%
commit-author Daniel Axtens <dja@axtens.net>
commit 92ae03532619dc24fdb7a5ae8ea63785fbd39f86
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/92ae0353.failed

Remove powernv generic PCI controller operations. Replace it with
controller ops for each of the two supported PHBs.

As an added bonus, make the two new structs const, which will help
guard against bugs such as the one introduced in 65ebf4b63
("powerpc/powernv: Move controller ops from ppc_md to controller_ops")

	Signed-off-by: Daniel Axtens <dja@axtens.net>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 92ae03532619dc24fdb7a5ae8ea63785fbd39f86)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci-ioda.c
#	arch/powerpc/platforms/powernv/pci-p5ioc2.c
#	arch/powerpc/platforms/powernv/pci.c
diff --cc arch/powerpc/platforms/powernv/pci-ioda.c
index fe5c4ee44e89,23125f46f865..000000000000
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@@ -2879,8 -2648,19 +2879,24 @@@ static void pnv_pci_ioda_shutdown(struc
  		       OPAL_ASSERT_RESET);
  }
  
++<<<<<<< HEAD
 +void __init pnv_pci_init_ioda_phb(struct device_node *np,
 +				  u64 hub_id, int ioda_type)
++=======
+ static const struct pci_controller_ops pnv_pci_ioda_controller_ops = {
+        .dma_dev_setup = pnv_pci_dma_dev_setup,
+ #ifdef CONFIG_PCI_MSI
+        .setup_msi_irqs = pnv_setup_msi_irqs,
+        .teardown_msi_irqs = pnv_teardown_msi_irqs,
+ #endif
+        .enable_device_hook = pnv_pci_enable_device_hook,
+        .window_alignment = pnv_pci_window_alignment,
+        .reset_secondary_bus = pnv_pci_reset_secondary_bus,
+ };
+ 
+ static void __init pnv_pci_init_ioda_phb(struct device_node *np,
+ 					 u64 hub_id, int ioda_type)
++>>>>>>> 92ae03532619 (powerpc/powernv: Specialise pci_controller_ops for each controller type)
  {
  	struct pci_controller *hose;
  	struct pnv_phb *phb;
@@@ -3045,12 -2819,13 +3061,17 @@@
  	 * the child P2P bridges) can form individual PE.
  	 */
  	ppc_md.pcibios_fixup = pnv_pci_ioda_fixup;
++<<<<<<< HEAD
 +	ppc_md.pcibios_enable_device_hook = pnv_pci_enable_device_hook;
 +	ppc_md.pcibios_window_alignment = pnv_pci_window_alignment;
 +	ppc_md.pcibios_reset_secondary_bus = pnv_pci_reset_secondary_bus;
++=======
+ 	hose->controller_ops = pnv_pci_ioda_controller_ops;
+ 
++>>>>>>> 92ae03532619 (powerpc/powernv: Specialise pci_controller_ops for each controller type)
  #ifdef CONFIG_PCI_IOV
  	ppc_md.pcibios_fixup_sriov = pnv_pci_ioda_fixup_iov_resources;
 -	ppc_md.pcibios_iov_resource_alignment = pnv_pci_iov_resource_alignment;
 -#endif
 -
 +#endif /* CONFIG_PCI_IOV */
  	pci_add_flags(PCI_REASSIGN_ALL_RSRC);
  
  	/* Reset IODA tables to a clean state */
diff --cc arch/powerpc/platforms/powernv/pci-p5ioc2.c
index 419fa2c9fb78,7f826e8cc1d4..000000000000
--- a/arch/powerpc/platforms/powernv/pci-p5ioc2.c
+++ b/arch/powerpc/platforms/powernv/pci-p5ioc2.c
@@@ -95,22 -86,23 +95,30 @@@ static struct iommu_table_ops pnv_p5ioc
  static void pnv_pci_p5ioc2_dma_dev_setup(struct pnv_phb *phb,
  					 struct pci_dev *pdev)
  {
 -	if (phb->p5ioc2.iommu_table.it_map == NULL) {
 -		iommu_init_table(&phb->p5ioc2.iommu_table, phb->hose->node);
 -		iommu_register_group(&phb->p5ioc2.iommu_table,
 +	struct iommu_table *tbl = phb->p5ioc2.table_group.tables[0];
 +
 +	if (!tbl->it_map) {
 +		tbl->it_ops = &pnv_p5ioc2_iommu_ops;
 +		iommu_init_table(tbl, phb->hose->node);
 +		iommu_register_group(&phb->p5ioc2.table_group,
  				pci_domain_nr(phb->hose->bus), phb->opal_id);
 +		INIT_LIST_HEAD_RCU(&tbl->it_group_list);
 +		pnv_pci_link_table_and_group(phb->hose->node, 0,
 +				tbl, &phb->p5ioc2.table_group);
  	}
  
 -	set_iommu_table_base_and_group(&pdev->dev, &phb->p5ioc2.iommu_table);
 +	set_iommu_table_base(&pdev->dev, tbl);
 +	iommu_add_device(&pdev->dev);
  }
  
+ static const struct pci_controller_ops pnv_pci_p5ioc2_controller_ops = {
+ 	.dma_dev_setup = pnv_pci_dma_dev_setup,
+ #ifdef CONFIG_PCI_MSI
+        .setup_msi_irqs = pnv_setup_msi_irqs,
+        .teardown_msi_irqs = pnv_teardown_msi_irqs,
+ #endif
+ };
+ 
  static void __init pnv_pci_init_p5ioc2_phb(struct device_node *np, u64 hub_id,
  					   void *tce_mem, u64 tce_size)
  {
@@@ -154,6 -141,7 +162,10 @@@
  	phb->hose->first_busno = 0;
  	phb->hose->last_busno = 0xff;
  	phb->hose->private_data = phb;
++<<<<<<< HEAD
++=======
+ 	phb->hose->controller_ops = pnv_pci_p5ioc2_controller_ops;
++>>>>>>> 92ae03532619 (powerpc/powernv: Specialise pci_controller_ops for each controller type)
  	phb->hub_id = hub_id;
  	phb->opal_id = phb_id;
  	phb->type = PNV_PHB_P5IOC2;
diff --cc arch/powerpc/platforms/powernv/pci.c
index 3a74d719e520,dfad2ba13bdf..000000000000
--- a/arch/powerpc/platforms/powernv/pci.c
+++ b/arch/powerpc/platforms/powernv/pci.c
@@@ -46,19 -45,7 +46,23 @@@
  //#define cfg_dbg(fmt...)	printk(fmt)
  
  #ifdef CONFIG_PCI_MSI
++<<<<<<< HEAD
 +static int pnv_msi_check_device(struct pci_dev* pdev, int nvec, int type)
 +{
 +	struct pci_controller *hose = pci_bus_to_host(pdev->bus);
 +	struct pnv_phb *phb = hose->private_data;
 +	struct pci_dn *pdn = pci_get_pdn(pdev);
 +
 +	if (pdn && pdn->force_32bit_msi && !phb->msi32_support)
 +		return -ENODEV;
 +
 +	return (phb && phb->msi_bmp.bitmap) ? 0 : -ENODEV;
 +}
 +
 +static int pnv_setup_msi_irqs(struct pci_dev *pdev, int nvec, int type)
++=======
+ int pnv_setup_msi_irqs(struct pci_dev *pdev, int nvec, int type)
++>>>>>>> 92ae03532619 (powerpc/powernv: Specialise pci_controller_ops for each controller type)
  {
  	struct pci_controller *hose = pci_bus_to_host(pdev->bus);
  	struct pnv_phb *phb = hose->private_data;
* Unmerged path arch/powerpc/platforms/powernv/pci-ioda.c
* Unmerged path arch/powerpc/platforms/powernv/pci-p5ioc2.c
* Unmerged path arch/powerpc/platforms/powernv/pci.c
diff --git a/arch/powerpc/platforms/powernv/pci.h b/arch/powerpc/platforms/powernv/pci.h
index 9f8987faf648..e605d099cfbc 100644
--- a/arch/powerpc/platforms/powernv/pci.h
+++ b/arch/powerpc/platforms/powernv/pci.h
@@ -238,4 +238,8 @@ extern void pnv_pci_ioda_tce_invalidate(struct iommu_table *tbl,
 extern void pnv_pci_reset_secondary_bus(struct pci_dev *dev);
 extern int pnv_eeh_phb_reset(struct pci_controller *hose, int option);
 
+extern void pnv_pci_dma_dev_setup(struct pci_dev *pdev);
+extern int pnv_setup_msi_irqs(struct pci_dev *pdev, int nvec, int type);
+extern void pnv_teardown_msi_irqs(struct pci_dev *pdev);
+
 #endif /* __POWERNV_PCI_H */
