net/mlx5e: Allocate set of queue counters per netdev

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Allocate set of queue counters per netdev (kamal heib) [1275159 1296272 1296405 1298421 1298422 1298423 1298424 1298425]
Rebuild_FUZZ: 96.00%
commit-author Rana Shahout <ranas@mellanox.com>
commit 593cf33829adfd3d5c75d42879cc42afded1b626
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/593cf338.failed

Connect all netdev RQs to this set of queue counters.
Also, add an "rx_out_of_buffer" counter to ethtool,
which indicates RX packet drops due to lack of receive
buffers.

	Signed-off-by: Rana Shahout <ranas@mellanox.com>
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 593cf33829adfd3d5c75d42879cc42afded1b626)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index b2b207af1d60,c4ddbe8501a7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -221,8 -236,18 +221,17 @@@ struct mlx5e_pport_stats 
  	__be64 RFC_2819_counters[NUM_RFC_2819_COUNTERS];
  };
  
+ static const char qcounter_stats_strings[][ETH_GSTRING_LEN] = {
+ 	"rx_out_of_buffer",
+ };
+ 
+ struct mlx5e_qcounter_stats {
+ 	u32 rx_out_of_buffer;
+ #define NUM_Q_COUNTERS 1
+ };
+ 
  static const char rq_stats_strings[][ETH_GSTRING_LEN] = {
  	"packets",
 -	"bytes",
  	"csum_none",
  	"csum_sw",
  	"lro_packets",
@@@ -511,6 -584,8 +521,11 @@@ struct mlx5e_priv 
  	struct mlx5_core_dev      *mdev;
  	struct net_device         *netdev;
  	struct mlx5e_stats         stats;
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_tstamp        tstamp;
+ 	u16 q_counter;
++>>>>>>> 593cf33829ad (net/mlx5e: Allocate set of queue counters per netdev)
  };
  
  #define MLX5E_NET_IP_ALIGN 2
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 23ff9e4eac90,7fbe1ba86294..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2285,8 -2561,20 +2319,23 @@@ static void *mlx5e_create_netdev(struc
  		goto err_destroy_tirs;
  	}
  
+ 	mlx5e_create_q_counter(priv);
+ 
  	mlx5e_init_eth_addr(priv);
  
++<<<<<<< HEAD
++=======
+ 	mlx5e_vxlan_init(priv);
+ 
+ 	err = mlx5e_tc_init(priv);
+ 	if (err)
+ 		goto err_dealloc_q_counters;
+ 
+ #ifdef CONFIG_MLX5_CORE_EN_DCB
+ 	mlx5e_dcbnl_ieee_setets_core(priv, &priv->params.ets);
+ #endif
+ 
++>>>>>>> 593cf33829ad (net/mlx5e: Allocate set of queue counters per netdev)
  	err = register_netdev(netdev);
  	if (err) {
  		mlx5_core_err(mdev, "register_netdev failed, %d\n", err);
@@@ -2298,7 -2589,11 +2347,15 @@@
  
  	return priv;
  
++<<<<<<< HEAD
 +err_destroy_flow_tables:
++=======
+ err_tc_cleanup:
+ 	mlx5e_tc_cleanup(priv);
+ 
+ err_dealloc_q_counters:
+ 	mlx5e_destroy_q_counter(priv);
++>>>>>>> 593cf33829ad (net/mlx5e: Allocate set of queue counters per netdev)
  	mlx5e_destroy_flow_tables(priv);
  
  err_destroy_tirs:
@@@ -2345,6 -2640,9 +2402,12 @@@ static void mlx5e_destroy_netdev(struc
  	mlx5e_disable_async_events(priv);
  	flush_scheduled_work();
  	unregister_netdev(netdev);
++<<<<<<< HEAD
++=======
+ 	mlx5e_tc_cleanup(priv);
+ 	mlx5e_vxlan_cleanup(priv);
+ 	mlx5e_destroy_q_counter(priv);
++>>>>>>> 593cf33829ad (net/mlx5e: Allocate set of queue counters per netdev)
  	mlx5e_destroy_flow_tables(priv);
  	mlx5e_destroy_tirs(priv);
  	mlx5e_destroy_rqt(priv, MLX5E_SINGLE_RQ_RQT);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 72a2892f3570..236004b669d9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -165,6 +165,8 @@ static const struct {
 	},
 };
 
+#define MLX5E_NUM_Q_CNTRS(priv) (NUM_Q_COUNTERS * (!!priv->q_counter))
+
 static int mlx5e_get_sset_count(struct net_device *dev, int sset)
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
@@ -172,6 +174,7 @@ static int mlx5e_get_sset_count(struct net_device *dev, int sset)
 	switch (sset) {
 	case ETH_SS_STATS:
 		return NUM_VPORT_COUNTERS + NUM_PPORT_COUNTERS +
+		       MLX5E_NUM_Q_CNTRS(priv) +
 		       priv->params.num_channels * NUM_RQ_STATS +
 		       priv->params.num_channels * priv->params.num_tc *
 						   NUM_SQ_STATS;
@@ -200,6 +203,11 @@ static void mlx5e_get_strings(struct net_device *dev,
 			strcpy(data + (idx++) * ETH_GSTRING_LEN,
 			       vport_strings[i]);
 
+		/* Q counters */
+		for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
+			strcpy(data + (idx++) * ETH_GSTRING_LEN,
+			       qcounter_stats_strings[i]);
+
 		/* PPORT counters */
 		for (i = 0; i < NUM_PPORT_COUNTERS; i++)
 			strcpy(data + (idx++) * ETH_GSTRING_LEN,
@@ -240,6 +248,9 @@ static void mlx5e_get_ethtool_stats(struct net_device *dev,
 	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 		data[idx++] = ((u64 *)&priv->stats.vport)[i];
 
+	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
+		data[idx++] = ((u32 *)&priv->stats.qcnt)[i];
+
 	for (i = 0; i < NUM_PPORT_COUNTERS; i++)
 		data[idx++] = be64_to_cpu(((__be64 *)&priv->stats.pport)[i]);
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
