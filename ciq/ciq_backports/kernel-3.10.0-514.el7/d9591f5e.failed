libceph: rename ceph_oloc_oid_to_pg()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit d9591f5e28686277d9312d3c7422faf1368b305e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d9591f5e.failed

Rename ceph_oloc_oid_to_pg() to ceph_object_locator_to_pg().  Emphasise
that returned is raw PG and return -ENOENT instead of -EIO if the pool
doesn't exist.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit d9591f5e28686277d9312d3c7422faf1368b305e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/osdmap.c
diff --cc net/ceph/osdmap.c
index e19b7ae21ce0,6267839cb246..000000000000
--- a/net/ceph/osdmap.c
+++ b/net/ceph/osdmap.c
@@@ -1465,19 -1557,19 +1466,24 @@@ int ceph_object_locator_to_pg(struct ce
  {
  	struct ceph_pg_pool_info *pi;
  
- 	pi = __lookup_pg_pool(&osdmap->pg_pools, oloc->pool);
+ 	pi = ceph_pg_pool_by_id(osdmap, oloc->pool);
  	if (!pi)
- 		return -EIO;
+ 		return -ENOENT;
  
- 	pg_out->pool = oloc->pool;
- 	pg_out->seed = ceph_str_hash(pi->object_hash, oid->name,
- 				     oid->name_len);
+ 	raw_pgid->pool = oloc->pool;
+ 	raw_pgid->seed = ceph_str_hash(pi->object_hash, oid->name,
+ 				       oid->name_len);
  
++<<<<<<< HEAD
 +	dout("%s '%.*s' pgid %llu.%x\n", __func__, oid->name_len, oid->name,
 +	     pg_out->pool, pg_out->seed);
++=======
+ 	dout("%s %*pE -> raw_pgid %llu.%x\n", __func__, oid->name_len,
+ 	     oid->name, raw_pgid->pool, raw_pgid->seed);
++>>>>>>> d9591f5e2868 (libceph: rename ceph_oloc_oid_to_pg())
  	return 0;
  }
- EXPORT_SYMBOL(ceph_oloc_oid_to_pg);
+ EXPORT_SYMBOL(ceph_object_locator_to_pg);
  
  static int do_crush(struct ceph_osdmap *map, int ruleno, int x,
  		    int *result, int result_max,
diff --git a/fs/ceph/ioctl.c b/fs/ceph/ioctl.c
index f851d8d70158..4ea18ac62c55 100644
--- a/fs/ceph/ioctl.c
+++ b/fs/ceph/ioctl.c
@@ -215,7 +215,7 @@ static long ceph_ioctl_get_dataloc(struct file *file, void __user *arg)
 	oloc.pool = ceph_file_layout_pg_pool(ci->i_layout);
 	ceph_oid_set_name(&oid, dl.object_name);
 
-	r = ceph_oloc_oid_to_pg(osdc->osdmap, &oloc, &oid, &pgid);
+	r = ceph_object_locator_to_pg(osdc->osdmap, &oid, &oloc, &pgid);
 	if (r < 0) {
 		up_read(&osdc->map_sem);
 		return r;
diff --git a/include/linux/ceph/osdmap.h b/include/linux/ceph/osdmap.h
index 2ee511292e4e..6d076e337bd7 100644
--- a/include/linux/ceph/osdmap.h
+++ b/include/linux/ceph/osdmap.h
@@ -201,11 +201,10 @@ extern int ceph_calc_file_object_mapping(struct ceph_file_layout *layout,
 					 u64 off, u64 len,
 					 u64 *bno, u64 *oxoff, u64 *oxlen);
 
-/* calculate mapping of object to a placement group */
-extern int ceph_oloc_oid_to_pg(struct ceph_osdmap *osdmap,
-			       struct ceph_object_locator *oloc,
-			       struct ceph_object_id *oid,
-			       struct ceph_pg *pg_out);
+int ceph_object_locator_to_pg(struct ceph_osdmap *osdmap,
+			      struct ceph_object_id *oid,
+			      struct ceph_object_locator *oloc,
+			      struct ceph_pg *raw_pgid);
 
 extern int ceph_calc_pg_acting(struct ceph_osdmap *osdmap,
 			       struct ceph_pg pgid,
diff --git a/net/ceph/osd_client.c b/net/ceph/osd_client.c
index a33261e1cf5d..af365e854420 100644
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@ -1336,8 +1336,8 @@ static int __calc_request_pg(struct ceph_osdmap *osdmap,
 		/* !pi is caught in ceph_oloc_oid_to_pg() */
 	}
 
-	return ceph_oloc_oid_to_pg(osdmap, &req->r_target_oloc,
-				   &req->r_target_oid, pg_out);
+	return ceph_object_locator_to_pg(osdmap, &req->r_target_oid,
+					 &req->r_target_oloc, pg_out);
 }
 
 static void __enqueue_request(struct ceph_osd_request *req)
* Unmerged path net/ceph/osdmap.c
