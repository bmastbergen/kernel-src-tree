usb: don't use PREPARE_DELAYED_WORK

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] don't use PREPARE_DELAYED_WORK (Don Zickus) [1303209]
Rebuild_FUZZ: 92.31%
commit-author Tejun Heo <tj@kernel.org>
commit 77fa83cf7478202fac1520ca082ab8f9658d63b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/77fa83cf.failed

PREPARE_[DELAYED_]WORK() are being phased out.  They have few users
and a nasty surprise in terms of reentrancy guarantee as workqueue
considers work items to be different if they don't have the same work
function.

usb_hub->init_work is multiplexed with multiple work functions;
however, the work item is never queued while in-flight, so we can
simply use INIT_DELAYED_WORK() before each queueing.

It would probably be best to route this with other related updates
through the workqueue tree.

Lightly tested.

v2: Greg and Alan confirm that the work item is never queued while
    in-flight.  Simply use INIT_DELAYED_WORK().

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Alan Stern <stern@rowland.harvard.edu>
	Cc: linux-usb@vger.kernel.org
(cherry picked from commit 77fa83cf7478202fac1520ca082ab8f9658d63b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/core/hub.c
diff --cc drivers/usb/core/hub.c
index 820ddf2f8ff4,5cbf78d0be25..000000000000
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@@ -1069,12 -1039,9 +1069,18 @@@ static void hub_activate(struct usb_hu
  		 * for HUB_POST_RESET, but it's easier not to.
  		 */
  		if (type == HUB_INIT) {
++<<<<<<< HEAD
 +			unsigned delay = hub_power_on_good_delay(hub);
 +
 +			hub_power_on(hub, false);
 +			PREPARE_DELAYED_WORK(&hub->init_work, hub_init_func2);
 +			queue_delayed_work(system_power_efficient_wq,
 +					&hub->init_work,
++=======
+ 			delay = hub_power_on(hub, false);
+ 			INIT_DELAYED_WORK(&hub->init_work, hub_init_func2);
+ 			schedule_delayed_work(&hub->init_work,
++>>>>>>> 77fa83cf7478 (usb: don't use PREPARE_DELAYED_WORK)
  					msecs_to_jiffies(delay));
  
  			/* Suppress autosuspend until init is done */
@@@ -1227,9 -1194,8 +1233,14 @@@
  
  		/* Don't do a long sleep inside a workqueue routine */
  		if (type == HUB_INIT2) {
++<<<<<<< HEAD
 +			PREPARE_DELAYED_WORK(&hub->init_work, hub_init_func3);
 +			queue_delayed_work(system_power_efficient_wq,
 +					&hub->init_work,
++=======
+ 			INIT_DELAYED_WORK(&hub->init_work, hub_init_func3);
+ 			schedule_delayed_work(&hub->init_work,
++>>>>>>> 77fa83cf7478 (usb: don't use PREPARE_DELAYED_WORK)
  					msecs_to_jiffies(delay));
  			return;		/* Continues at init3: below */
  		} else {
* Unmerged path drivers/usb/core/hub.c
