megaraid_sas: MFI adapter OCR changes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sumit Saxena <sumit.saxena@avagotech.com>
commit ccc7507de27a639c9e1327d6e56ef1f357962b09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ccc7507d.failed

Optimized MFI adapters' OCR path, particularly
megasas_wait_for_outstanding() function.

	Signed-off-by: Kashyap Desai <kashyap.desai@avagotech.com>
	Signed-off-by: Sumit Saxena <sumit.saxena@avagotech.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit ccc7507de27a639c9e1327d6e56ef1f357962b09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_base.c
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index b60f8ef53c66,d2ea97769c76..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -2357,21 -2455,21 +2357,28 @@@ void megasas_sriov_heartbeat_handler(un
   */
  static int megasas_wait_for_outstanding(struct megasas_instance *instance)
  {
- 	int i;
+ 	int i, sl, outstanding;
  	u32 reset_index;
  	u32 wait_time = MEGASAS_RESET_WAIT_TIME;
 +	u8 adprecovery;
  	unsigned long flags;
  	struct list_head clist_local;
  	struct megasas_cmd *reset_cmd;
  	u32 fw_state;
- 	u8 kill_adapter_flag;
  
++<<<<<<< HEAD
 +	spin_lock_irqsave(&instance->hba_lock, flags);
 +	adprecovery = instance->adprecovery;
 +	spin_unlock_irqrestore(&instance->hba_lock, flags);
++=======
+ 	if (atomic_read(&instance->adprecovery) == MEGASAS_HW_CRITICAL_ERROR) {
+ 		dev_info(&instance->pdev->dev, "%s:%d HBA is killed.\n",
+ 		__func__, __LINE__);
+ 		return FAILED;
+ 	}
++>>>>>>> ccc7507de27a (megaraid_sas: MFI adapter OCR changes)
  
 -	if (atomic_read(&instance->adprecovery) != MEGASAS_HBA_OPERATIONAL) {
 +	if (adprecovery != MEGASAS_HBA_OPERATIONAL) {
  
  		INIT_LIST_HEAD(&clist_local);
  		spin_lock_irqsave(&instance->hba_lock, flags);
@@@ -2431,8 -2524,7 +2438,12 @@@
  	}
  
  	for (i = 0; i < resetwaittime; i++) {
++<<<<<<< HEAD
 +
 +		int outstanding = atomic_read(&instance->fw_outstanding);
++=======
+ 		outstanding = atomic_read(&instance->fw_outstanding);
++>>>>>>> ccc7507de27a (megaraid_sas: MFI adapter OCR changes)
  
  		if (!outstanding)
  			break;
@@@ -2470,50 -2580,23 +2499,68 @@@
  		i++;
  	} while (i <= 3);
  
++<<<<<<< HEAD
 +	if (atomic_read(&instance->fw_outstanding) &&
 +					!kill_adapter_flag) {
 +		if (instance->disableOnlineCtrlReset == 0) {
 +
 +			megasas_do_ocr(instance);
 +
 +			/* wait for 5 secs to let FW finish the pending cmds */
 +			for (i = 0; i < wait_time; i++) {
 +				int outstanding =
 +					atomic_read(&instance->fw_outstanding);
 +				if (!outstanding)
 +					return SUCCESS;
 +				msleep(1000);
 +			}
 +		}
 +	}
 +
 +	if (atomic_read(&instance->fw_outstanding) ||
 +					(kill_adapter_flag == 2)) {
 +		printk(KERN_NOTICE "megaraid_sas: pending cmds after reset\n");
 +		/*
 +		* Send signal to FW to stop processing any pending cmds.
 +		* The controller will be taken offline by the OS now.
 +		*/
 +		if ((instance->pdev->device ==
 +			PCI_DEVICE_ID_LSI_SAS0073SKINNY) ||
 +			(instance->pdev->device ==
 +			PCI_DEVICE_ID_LSI_SAS0071SKINNY)) {
 +			writel(MFI_STOP_ADP,
 +				&instance->reg_set->doorbell);
 +		} else {
 +			writel(MFI_STOP_ADP,
 +				&instance->reg_set->inbound_doorbell);
 +		}
 +		megasas_dump_pending_frames(instance);
 +		spin_lock_irqsave(&instance->hba_lock, flags);
 +		instance->adprecovery	= MEGASAS_HW_CRITICAL_ERROR;
 +		spin_unlock_irqrestore(&instance->hba_lock, flags);
 +		return FAILED;
 +	}
 +
 +	printk(KERN_NOTICE "megaraid_sas: no pending cmds after reset\n");
++=======
+ no_outstanding:
++>>>>>>> ccc7507de27a (megaraid_sas: MFI adapter OCR changes)
  
+ 	dev_info(&instance->pdev->dev, "%s:%d no more pending commands remain after reset handling.\n",
+ 		__func__, __LINE__);
  	return SUCCESS;
+ 
+ kill_hba_and_failed:
+ 
+ 	/* Reset not supported, kill adapter */
+ 	dev_info(&instance->pdev->dev, "%s:%d killing adapter scsi%d"
+ 		" disableOnlineCtrlReset %d fw_outstanding %d \n",
+ 		__func__, __LINE__, instance->host->host_no, instance->disableOnlineCtrlReset,
+ 		atomic_read(&instance->fw_outstanding));
+ 	megasas_dump_pending_frames(instance);
+ 	megaraid_sas_kill_hba(instance);
+ 
+ 	return FAILED;
  }
  
  /**
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
