xfs: return errors from partial I/O failures to files

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author David Jeffery <djeffery@redhat.com>
commit c9eb256eda4420c06bb10f5e8fbdbe1a34bc98e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c9eb256e.failed

There is an issue with xfs's error reporting in some cases of I/O partially
failing and partially succeeding. Calls like fsync() can report success even
though not all I/O was successful in partial-failure cases such as one disk of
a RAID0 array being offline.

The issue can occur when there are more than one bio per xfs_ioend struct.
Each call to xfs_end_bio() for a bio completing will write a value to
ioend->io_error.  If a successful bio completes after any failed bio, no
error is reported do to it writing 0 over the error code set by any failed bio.
The I/O error information is now lost and when the ioend is completed
only success is reported back up the filesystem stack.

xfs_end_bio() should only set ioend->io_error in the case of BIO_UPTODATE
being clear.  ioend->io_error is initialized to 0 at allocation so only needs
to be updated by a failed bio. Also check that ioend->io_error is 0 so that
the first error reported will be the error code returned.

	Cc: stable@vger.kernel.org
	Signed-off-by: David Jeffery <djeffery@redhat.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit c9eb256eda4420c06bb10f5e8fbdbe1a34bc98e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_aops.c
diff --cc fs/xfs/xfs_aops.c
index bb6024910e57,458fced2c0f9..000000000000
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@@ -384,8 -356,8 +384,13 @@@ xfs_end_bio
  {
  	xfs_ioend_t		*ioend = bio->bi_private;
  
++<<<<<<< HEAD
 +	ASSERT(atomic_read(&bio->bi_cnt) >= 1);
 +	ioend->io_error = test_bit(BIO_UPTODATE, &bio->bi_flags) ? 0 : error;
++=======
+ 	if (!ioend->io_error && !test_bit(BIO_UPTODATE, &bio->bi_flags))
+ 		ioend->io_error = error;
++>>>>>>> c9eb256eda44 (xfs: return errors from partial I/O failures to files)
  
  	/* Toss bio and pass work off to an xfsdatad thread */
  	bio->bi_private = NULL;
* Unmerged path fs/xfs/xfs_aops.c
