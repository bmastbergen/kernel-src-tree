powerpc/pci: Fix endian bug in fixed PHB numbering

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [powerpc] pci: Fix endian bug in fixed PHB numbering (Gustavo Duarte) [1360353]
Rebuild_FUZZ: 91.30%
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 61e8a0d5a0270b91581f6c715036844b2ea98da1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/61e8a0d5.failed

The recent commit 63a72284b159 ("powerpc/pci: Assign fixed PHB number
based on device-tree properties"), added code to read a 64-bit property
from the device tree, and if not found read a 32-bit property (reg).

There was a bug in the 32-bit case, on big endian machines, due to the
use of the 64-bit value to read the 32-bit property. The cast of &prop
means we end up writing to the high 32-bit of prop, leaving the low
32-bits containing whatever junk was on the stack.

If that junk value was non-zero, and < MAX_PHBS, we would end up using
it as the PHB id. This results in users seeing what appear to be random
PHB ids.

Fix it by reading into a u32 property and then assigning that to the
u64 value, letting the CPU do the correct conversions for us.

Fixes: 63a72284b159 ("powerpc/pci: Assign fixed PHB number based on device-tree properties")
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 61e8a0d5a0270b91581f6c715036844b2ea98da1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/pci-common.c
diff --cc arch/powerpc/kernel/pci-common.c
index 250c4df20695,7fdf324d5b51..000000000000
--- a/arch/powerpc/kernel/pci-common.c
+++ b/arch/powerpc/kernel/pci-common.c
@@@ -65,6 -71,45 +65,48 @@@ struct dma_map_ops *get_pci_dma_ops(voi
  }
  EXPORT_SYMBOL(get_pci_dma_ops);
  
++<<<<<<< HEAD
++=======
+ /*
+  * This function should run under locking protection, specifically
+  * hose_spinlock.
+  */
+ static int get_phb_number(struct device_node *dn)
+ {
+ 	int ret, phb_id = -1;
+ 	u32 prop_32;
+ 	u64 prop;
+ 
+ 	/*
+ 	 * Try fixed PHB numbering first, by checking archs and reading
+ 	 * the respective device-tree properties. Firstly, try powernv by
+ 	 * reading "ibm,opal-phbid", only present in OPAL environment.
+ 	 */
+ 	ret = of_property_read_u64(dn, "ibm,opal-phbid", &prop);
+ 	if (ret) {
+ 		ret = of_property_read_u32_index(dn, "reg", 1, &prop_32);
+ 		prop = prop_32;
+ 	}
+ 
+ 	if (!ret)
+ 		phb_id = (int)(prop & (MAX_PHBS - 1));
+ 
+ 	/* We need to be sure to not use the same PHB number twice. */
+ 	if ((phb_id >= 0) && !test_and_set_bit(phb_id, phb_bitmap))
+ 		return phb_id;
+ 
+ 	/*
+ 	 * If not pseries nor powernv, or if fixed PHB numbering tried to add
+ 	 * the same PHB number twice, then fallback to dynamic PHB numbering.
+ 	 */
+ 	phb_id = find_first_zero_bit(phb_bitmap, MAX_PHBS);
+ 	BUG_ON(phb_id >= MAX_PHBS);
+ 	set_bit(phb_id, phb_bitmap);
+ 
+ 	return phb_id;
+ }
+ 
++>>>>>>> 61e8a0d5a027 (powerpc/pci: Fix endian bug in fixed PHB numbering)
  struct pci_controller *pcibios_alloc_controller(struct device_node *dev)
  {
  	struct pci_controller *phb;
* Unmerged path arch/powerpc/kernel/pci-common.c
