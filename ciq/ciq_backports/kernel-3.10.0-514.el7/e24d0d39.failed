HID: core: do not scan constant input report

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hid] core: do not scan constant input report (Benjamin Tissoires) [1311883]
Rebuild_FUZZ: 93.98%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit e24d0d399b2fce71b627043e900ef28283850482
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e24d0d39.failed

The Microsoft Surface Type/Touch Cover 2 is a fancy device which advertised
itself as a multitouch device but with constant input reports.
This way, hid_scan_report() gives the group MULTITOUCH to it, but
hid-multitouch can not handle it due to the constant collection ignored
by hid-input.

To prevent such crap in the future, and while we do not fix this particular
device, make the scan_report coherent with hid-input.c, and ignore constant
input reports.

CC: stable@vger.kernel.org # 3.12+
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit e24d0d399b2fce71b627043e900ef28283850482)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-core.c
diff --cc drivers/hid/hid-core.c
index 32bdc0edb75b,10a2c0866459..000000000000
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@@ -686,6 -688,56 +686,59 @@@ static void hid_scan_usage(struct hid_d
  		hid->group = HID_GROUP_MULTITOUCH;
  }
  
++<<<<<<< HEAD
++=======
+ static void hid_scan_feature_usage(struct hid_parser *parser, u32 usage)
+ {
+ 	if (usage == 0xff0000c5 && parser->global.report_count == 256 &&
+ 	    parser->global.report_size == 8)
+ 		parser->scan_flags |= HID_SCAN_FLAG_MT_WIN_8;
+ }
+ 
+ static void hid_scan_collection(struct hid_parser *parser, unsigned type)
+ {
+ 	struct hid_device *hid = parser->device;
+ 
+ 	if (((parser->global.usage_page << 16) == HID_UP_SENSOR) &&
+ 	    type == HID_COLLECTION_PHYSICAL)
+ 		hid->group = HID_GROUP_SENSOR_HUB;
+ }
+ 
+ static int hid_scan_main(struct hid_parser *parser, struct hid_item *item)
+ {
+ 	__u32 data;
+ 	int i;
+ 
+ 	data = item_udata(item);
+ 
+ 	switch (item->tag) {
+ 	case HID_MAIN_ITEM_TAG_BEGIN_COLLECTION:
+ 		hid_scan_collection(parser, data & 0xff);
+ 		break;
+ 	case HID_MAIN_ITEM_TAG_END_COLLECTION:
+ 		break;
+ 	case HID_MAIN_ITEM_TAG_INPUT:
+ 		/* ignore constant inputs, they will be ignored by hid-input */
+ 		if (data & HID_MAIN_ITEM_CONSTANT)
+ 			break;
+ 		for (i = 0; i < parser->local.usage_index; i++)
+ 			hid_scan_input_usage(parser, parser->local.usage[i]);
+ 		break;
+ 	case HID_MAIN_ITEM_TAG_OUTPUT:
+ 		break;
+ 	case HID_MAIN_ITEM_TAG_FEATURE:
+ 		for (i = 0; i < parser->local.usage_index; i++)
+ 			hid_scan_feature_usage(parser, parser->local.usage[i]);
+ 		break;
+ 	}
+ 
+ 	/* Reset the local parser environment */
+ 	memset(&parser->local, 0, sizeof(parser->local));
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> e24d0d399b2f (HID: core: do not scan constant input report)
  /*
   * Scan a report descriptor before the device is added to the bus.
   * Sets device groups and other properties that determine what driver
* Unmerged path drivers/hid/hid-core.c
