s390: show virtualization support in /proc/cpuinfo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [s390] show virtualization support in /proc/cpuinfo (Hendrik Brueckner) [1310710]
Rebuild_FUZZ: 93.62%
commit-author David Hildenbrand <dahi@linux.vnet.ibm.com>
commit 7f16d7e787b731d9db273b822b4b8069102e57a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7f16d7e7.failed

This patch exposes the SIE capability (aka virtualization support) via
/proc/cpuinfo -> "features" as "sie".

As we don't want to expose this hwcap via elf, let's add a second,
"internal"/non-elf capability list. The content is simply concatenated
to the existing features when printing /proc/cpuinfo.

We also add the defines to elf.h to keep the hwcap stuff at a common
place.

	Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Signed-off-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit 7f16d7e787b731d9db273b822b4b8069102e57a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/setup.c
diff --cc arch/s390/kernel/setup.c
index ef6ef46fe684,dc83ae66a730..000000000000
--- a/arch/s390/kernel/setup.c
+++ b/arch/s390/kernel/setup.c
@@@ -75,10 -77,10 +75,14 @@@ EXPORT_SYMBOL(console_devno)
  unsigned int console_irq = -1;
  EXPORT_SYMBOL(console_irq);
  
 -unsigned long elf_hwcap __read_mostly = 0;
 +unsigned long elf_hwcap = 0;
  char elf_platform[ELF_PLATFORM_SIZE];
  
++<<<<<<< HEAD
 +struct mem_chunk __initdata memory_chunk[MEMORY_CHUNKS];
++=======
+ unsigned long int_hwcap = 0;
++>>>>>>> 7f16d7e787b7 (s390: show virtualization support in /proc/cpuinfo)
  
  int __initdata memory_end_set;
  unsigned long __initdata memory_end;
@@@ -969,6 -795,28 +973,31 @@@ static void __init setup_hwcaps(void
  		strcpy(elf_platform, "z13");
  		break;
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	/*
+ 	 * Virtualization support HWCAP_INT_SIE is bit 0.
+ 	 */
+ 	if (sclp.has_sief2)
+ 		int_hwcap |= HWCAP_INT_SIE;
+ 
+ 	return 0;
+ }
+ arch_initcall(setup_hwcaps);
+ 
+ /*
+  * Add system information as device randomness
+  */
+ static void __init setup_randomness(void)
+ {
+ 	struct sysinfo_3_2_2 *vmms;
+ 
+ 	vmms = (struct sysinfo_3_2_2 *) alloc_page(GFP_KERNEL);
+ 	if (vmms && stsi(vmms, 3, 2, 2) == 0 && vmms->count)
+ 		add_device_randomness(&vmms, vmms->count);
+ 	free_page((unsigned long) vmms);
++>>>>>>> 7f16d7e787b7 (s390: show virtualization support in /proc/cpuinfo)
  }
  
  /*
diff --git a/arch/s390/include/asm/elf.h b/arch/s390/include/asm/elf.h
index c9c875d9ed31..0745df3fe60b 100644
--- a/arch/s390/include/asm/elf.h
+++ b/arch/s390/include/asm/elf.h
@@ -104,6 +104,9 @@
 #define HWCAP_S390_TE		1024
 #define HWCAP_S390_VXRS		2048
 
+/* Internal bits, not exposed via elf */
+#define HWCAP_INT_SIE		1UL
+
 /*
  * These are used to set parameters in the core dumps.
  */
@@ -172,6 +175,10 @@ extern unsigned long randomize_et_dyn(void);
 extern unsigned long elf_hwcap;
 #define ELF_HWCAP (elf_hwcap)
 
+/* Internal hardware capabilities, not exposed via elf */
+
+extern unsigned long int_hwcap;
+
 /* This yields a string that ld.so will use to load implementation
    specific libraries for optimization.  This is more specific in
    intent than poking at uname or /proc/cpuinfo.
diff --git a/arch/s390/kernel/processor.c b/arch/s390/kernel/processor.c
index c674dbcd9e68..37adaeef71e8 100644
--- a/arch/s390/kernel/processor.c
+++ b/arch/s390/kernel/processor.c
@@ -51,6 +51,9 @@ static int show_cpuinfo(struct seq_file *m, void *v)
 		"esan3", "zarch", "stfle", "msa", "ldisp", "eimm", "dfp",
 		"edat", "etf3eh", "highgprs", "te", "vx"
 	};
+	static const char * const int_hwcap_str[] = {
+		"sie"
+	};
 	unsigned long n = (unsigned long) v - 1;
 	int i;
 
@@ -65,6 +68,9 @@ static int show_cpuinfo(struct seq_file *m, void *v)
 		for (i = 0; i < ARRAY_SIZE(hwcap_str); i++)
 			if (hwcap_str[i] && (elf_hwcap & (1UL << i)))
 				seq_printf(m, "%s ", hwcap_str[i]);
+		for (i = 0; i < ARRAY_SIZE(int_hwcap_str); i++)
+			if (int_hwcap_str[i] && (int_hwcap & (1UL << i)))
+				seq_printf(m, "%s ", int_hwcap_str[i]);
 		seq_puts(m, "\n");
 		show_cacheinfo(m);
 	}
* Unmerged path arch/s390/kernel/setup.c
