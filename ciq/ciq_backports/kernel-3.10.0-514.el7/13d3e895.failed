RDMA/nes: Remove old FRWR API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sagi Grimberg <sagig@mellanox.com>
commit 13d3e895faf68ab5f1981298198897a20b35827a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/13d3e895.failed

No ULP uses it anymore, go ahead and remove it.

	Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
	Acked-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 13d3e895faf68ab5f1981298198897a20b35827a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/nes/nes_verbs.c
diff --cc drivers/infiniband/hw/nes/nes_verbs.c
index cbbc2523f4aa,137880a19ebe..000000000000
--- a/drivers/infiniband/hw/nes/nes_verbs.c
+++ b/drivers/infiniband/hw/nes/nes_verbs.c
@@@ -3470,93 -3400,6 +3400,96 @@@ static int nes_post_send(struct ib_qp *
  					    NES_IWARP_SQ_LOCINV_WQE_INV_STAG_IDX,
  					    ib_wr->ex.invalidate_rkey);
  			break;
++<<<<<<< HEAD
 +		case IB_WR_FAST_REG_MR:
 +		{
 +			int i;
 +			int flags = ib_wr->wr.fast_reg.access_flags;
 +			struct nes_ib_fast_reg_page_list *pnesfrpl =
 +				container_of(ib_wr->wr.fast_reg.page_list,
 +					     struct nes_ib_fast_reg_page_list,
 +					     ibfrpl);
 +			u64 *src_page_list = pnesfrpl->ibfrpl.page_list;
 +			u64 *dst_page_list = pnesfrpl->nes_wqe_pbl.kva;
 +
 +			if (ib_wr->wr.fast_reg.page_list_len >
 +			    (NES_4K_PBL_CHUNK_SIZE / sizeof(u64))) {
 +				nes_debug(NES_DBG_IW_TX, "SQ_FMR: bad page_list_len\n");
 +				err = -EINVAL;
 +				break;
 +			}
 +			wqe_misc = NES_IWARP_SQ_OP_FAST_REG;
 +			set_wqe_64bit_value(wqe->wqe_words,
 +					    NES_IWARP_SQ_FMR_WQE_VA_FBO_LOW_IDX,
 +					    ib_wr->wr.fast_reg.iova_start);
 +			set_wqe_32bit_value(wqe->wqe_words,
 +					    NES_IWARP_SQ_FMR_WQE_LENGTH_LOW_IDX,
 +					    ib_wr->wr.fast_reg.length);
 +			set_wqe_32bit_value(wqe->wqe_words,
 +					    NES_IWARP_SQ_FMR_WQE_LENGTH_HIGH_IDX, 0);
 +			set_wqe_32bit_value(wqe->wqe_words,
 +					    NES_IWARP_SQ_FMR_WQE_MR_STAG_IDX,
 +					    ib_wr->wr.fast_reg.rkey);
 +			/* Set page size: */
 +			if (ib_wr->wr.fast_reg.page_shift == 12) {
 +				wqe_misc |= NES_IWARP_SQ_FMR_WQE_PAGE_SIZE_4K;
 +			} else if (ib_wr->wr.fast_reg.page_shift == 21) {
 +				wqe_misc |= NES_IWARP_SQ_FMR_WQE_PAGE_SIZE_2M;
 +			} else {
 +				nes_debug(NES_DBG_IW_TX, "Invalid page shift,"
 +					  " ib_wr=%u, max=1\n", ib_wr->num_sge);
 +				err = -EINVAL;
 +				break;
 +			}
 +			/* Set access_flags */
 +			wqe_misc |= NES_IWARP_SQ_FMR_WQE_RIGHTS_ENABLE_LOCAL_READ;
 +			if (flags & IB_ACCESS_LOCAL_WRITE)
 +				wqe_misc |= NES_IWARP_SQ_FMR_WQE_RIGHTS_ENABLE_LOCAL_WRITE;
 +
 +			if (flags & IB_ACCESS_REMOTE_WRITE)
 +				wqe_misc |= NES_IWARP_SQ_FMR_WQE_RIGHTS_ENABLE_REMOTE_WRITE;
 +
 +			if (flags & IB_ACCESS_REMOTE_READ)
 +				wqe_misc |= NES_IWARP_SQ_FMR_WQE_RIGHTS_ENABLE_REMOTE_READ;
 +
 +			if (flags & IB_ACCESS_MW_BIND)
 +				wqe_misc |= NES_IWARP_SQ_FMR_WQE_RIGHTS_ENABLE_WINDOW_BIND;
 +
 +			/* Fill in PBL info: */
 +			if (ib_wr->wr.fast_reg.page_list_len >
 +			    pnesfrpl->ibfrpl.max_page_list_len) {
 +				nes_debug(NES_DBG_IW_TX, "Invalid page list length,"
 +					  " ib_wr=%p, value=%u, max=%u\n",
 +					  ib_wr, ib_wr->wr.fast_reg.page_list_len,
 +					  pnesfrpl->ibfrpl.max_page_list_len);
 +				err = -EINVAL;
 +				break;
 +			}
 +
 +			set_wqe_64bit_value(wqe->wqe_words,
 +					    NES_IWARP_SQ_FMR_WQE_PBL_ADDR_LOW_IDX,
 +					    pnesfrpl->nes_wqe_pbl.paddr);
 +
 +			set_wqe_32bit_value(wqe->wqe_words,
 +					    NES_IWARP_SQ_FMR_WQE_PBL_LENGTH_IDX,
 +					    ib_wr->wr.fast_reg.page_list_len * 8);
 +
 +			for (i = 0; i < ib_wr->wr.fast_reg.page_list_len; i++)
 +				dst_page_list[i] = cpu_to_le64(src_page_list[i]);
 +
 +			nes_debug(NES_DBG_IW_TX, "SQ_FMR: iova_start: %llx, "
 +				  "length: %d, rkey: %0x, pgl_paddr: %llx, "
 +				  "page_list_len: %u, wqe_misc: %x\n",
 +				  (unsigned long long) ib_wr->wr.fast_reg.iova_start,
 +				  ib_wr->wr.fast_reg.length,
 +				  ib_wr->wr.fast_reg.rkey,
 +				  (unsigned long long) pnesfrpl->nes_wqe_pbl.paddr,
 +				  ib_wr->wr.fast_reg.page_list_len,
 +				  wqe_misc);
 +			break;
 +		}
++=======
++>>>>>>> 13d3e895faf6 (RDMA/nes: Remove old FRWR API)
  		case IB_WR_REG_MR:
  		{
  			struct nes_mr *mr = to_nesmr(reg_wr(ib_wr)->mr);
diff --git a/drivers/infiniband/hw/nes/nes_hw.h b/drivers/infiniband/hw/nes/nes_hw.h
index d748e4b31b8d..c9080208aad2 100644
--- a/drivers/infiniband/hw/nes/nes_hw.h
+++ b/drivers/infiniband/hw/nes/nes_hw.h
@@ -1200,12 +1200,6 @@ struct nes_fast_mr_wqe_pbl {
 	dma_addr_t	paddr;
 };
 
-struct nes_ib_fast_reg_page_list {
-	struct ib_fast_reg_page_list	ibfrpl;
-	struct nes_fast_mr_wqe_pbl 	nes_wqe_pbl;
-	u64 				pbl;
-};
-
 struct nes_listener {
 	struct work_struct      work;
 	struct workqueue_struct *wq;
* Unmerged path drivers/infiniband/hw/nes/nes_verbs.c
