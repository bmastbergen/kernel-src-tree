iommu/amd: Support IOMMU_DOMAIN_IDENTITY type allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] amd: Support IOMMU_DOMAIN_IDENTITY type allocation (Myron Stowe) [1050021]
Rebuild_FUZZ: 94.34%
commit-author Joerg Roedel <jroedel@suse.de>
commit 07f643a35d6b50f0f091444f07db1353188e787e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/07f643a3.failed

Add support to allocate direct mapped domains through the
IOMMU-API.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 07f643a35d6b50f0f091444f07db1353188e787e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
diff --cc drivers/iommu/amd_iommu.c
index 5607b3ae03af,188b81d56ac4..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -3240,7 -2964,53 +3240,57 @@@ static int __init alloc_passthrough_dom
  
  	return 0;
  }
++<<<<<<< HEAD
 +static int amd_iommu_domain_init(struct iommu_domain *dom)
++=======
+ 
+ static struct iommu_domain *amd_iommu_domain_alloc(unsigned type)
+ {
+ 	struct protection_domain *pdomain;
+ 	struct dma_ops_domain *dma_domain;
+ 
+ 	switch (type) {
+ 	case IOMMU_DOMAIN_UNMANAGED:
+ 		pdomain = protection_domain_alloc();
+ 		if (!pdomain)
+ 			return NULL;
+ 
+ 		pdomain->mode    = PAGE_MODE_3_LEVEL;
+ 		pdomain->pt_root = (void *)get_zeroed_page(GFP_KERNEL);
+ 		if (!pdomain->pt_root) {
+ 			protection_domain_free(pdomain);
+ 			return NULL;
+ 		}
+ 
+ 		pdomain->domain.geometry.aperture_start = 0;
+ 		pdomain->domain.geometry.aperture_end   = ~0ULL;
+ 		pdomain->domain.geometry.force_aperture = true;
+ 
+ 		break;
+ 	case IOMMU_DOMAIN_DMA:
+ 		dma_domain = dma_ops_domain_alloc();
+ 		if (!dma_domain) {
+ 			pr_err("AMD-Vi: Failed to allocate\n");
+ 			return NULL;
+ 		}
+ 		pdomain = &dma_domain->domain;
+ 		break;
+ 	case IOMMU_DOMAIN_IDENTITY:
+ 		pdomain = protection_domain_alloc();
+ 		if (!pdomain)
+ 			return NULL;
+ 
+ 		pdomain->mode = PAGE_MODE_NONE;
+ 		break;
+ 	default:
+ 		return NULL;
+ 	}
+ 
+ 	return &pdomain->domain;
+ }
+ 
+ static void amd_iommu_domain_free(struct iommu_domain *dom)
++>>>>>>> 07f643a35d6b (iommu/amd: Support IOMMU_DOMAIN_IDENTITY type allocation)
  {
  	struct protection_domain *domain;
  
* Unmerged path drivers/iommu/amd_iommu.c
