hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author KY Srinivasan <kys@microsoft.com>
commit c4b20c6370aa5cdbe11536125d86f31378d4b702
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c4b20c63.failed

Eliminatte the data field from struct hv_netvsc_packet.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c4b20c6370aa5cdbe11536125d86f31378d4b702)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/netvsc.c
#	drivers/net/hyperv/netvsc_drv.c
#	drivers/net/hyperv/rndis_filter.c
diff --cc drivers/net/hyperv/hyperv_net.h
index cf498664d989,62542081a864..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -139,17 -148,7 +139,21 @@@ struct hv_netvsc_packet 
  	u64 send_completion_tid;
  	void *send_completion_ctx;
  	void (*send_completion)(void *context);
++<<<<<<< HEAD
 +
 +	u32 send_buf_index;
 +
 +	/* This points to the memory after page_buf */
 +	struct rndis_message *rndis_msg;
 +
 +	u32 total_data_buflen;
 +	/* Points to the send/receive buffer where the ethernet frame is */
 +	void *data;
 +	u32 page_buf_cnt;
 +	struct hv_page_buffer page_buf[0];
++=======
+ 	struct hv_page_buffer *page_buf;
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  };
  
  struct netvsc_device_info {
@@@ -183,12 -184,17 +187,18 @@@ struct rndis_device 
  int netvsc_device_add(struct hv_device *device, void *additional_info);
  int netvsc_device_remove(struct hv_device *device);
  int netvsc_send(struct hv_device *device,
 -		struct hv_netvsc_packet *packet,
 -		struct rndis_message *rndis_msg);
 +		struct hv_netvsc_packet *packet);
  void netvsc_linkstatus_callback(struct hv_device *device_obj,
 -				struct rndis_message *resp);
 -void netvsc_xmit_completion(void *context);
 +				unsigned int status);
  int netvsc_recv_callback(struct hv_device *device_obj,
  			struct hv_netvsc_packet *packet,
++<<<<<<< HEAD
 +			struct ndis_tcp_ip_checksum_info *csum_info);
++=======
+ 			void **data,
+ 			struct ndis_tcp_ip_checksum_info *csum_info,
+ 			struct vmbus_channel *channel);
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  void netvsc_channel_cb(void *context);
  int rndis_filter_open(struct hv_device *dev);
  int rndis_filter_close(struct hv_device *dev);
@@@ -196,7 -202,9 +206,13 @@@ int rndis_filter_device_add(struct hv_d
  			void *additional_info);
  void rndis_filter_device_remove(struct hv_device *dev);
  int rndis_filter_receive(struct hv_device *dev,
++<<<<<<< HEAD
 +			struct hv_netvsc_packet *pkt);
++=======
+ 			struct hv_netvsc_packet *pkt,
+ 			void **data,
+ 			struct vmbus_channel *channel);
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  
  int rndis_filter_set_packet_filter(struct rndis_device *dev, u32 new_filter);
  int rndis_filter_set_device_mac(struct hv_device *hdev, char *mac);
diff --cc drivers/net/hyperv/netvsc.c
index 74ee1b57e623,8fbf81626bc3..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -931,7 -1054,7 +932,11 @@@ static void netvsc_receive(struct netvs
  					vmxferpage_packet->ranges[i].byte_count;
  
  		/* Pass it to the upper layer */
++<<<<<<< HEAD
 +		rndis_filter_receive(device, netvsc_packet);
++=======
+ 		rndis_filter_receive(device, netvsc_packet, &data, channel);
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  
  		if (netvsc_packet->status != NVSP_STAT_SUCCESS)
  			status = NVSP_STAT_FAIL;
diff --cc drivers/net/hyperv/netvsc_drv.c
index 56b76b7b9a27,622e62e32636..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -650,10 -682,14 +650,16 @@@ void netvsc_linkstatus_callback(struct 
   */
  int netvsc_recv_callback(struct hv_device *device_obj,
  				struct hv_netvsc_packet *packet,
++<<<<<<< HEAD
 +				struct ndis_tcp_ip_checksum_info *csum_info)
++=======
+ 				void **data,
+ 				struct ndis_tcp_ip_checksum_info *csum_info,
+ 				struct vmbus_channel *channel)
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  {
  	struct net_device *net;
 -	struct net_device_context *net_device_ctx;
  	struct sk_buff *skb;
 -	struct netvsc_stats *rx_stats;
  
  	net = ((struct netvsc_device *)hv_get_drvdata(device_obj))->ndev;
  	if (!net || net->reg_state != NETREG_REGISTERED) {
diff --cc drivers/net/hyperv/rndis_filter.c
index 4f78abd49222,be0fa9c94f63..000000000000
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@@ -366,7 -350,9 +366,13 @@@ static inline void *rndis_get_ppi(struc
  
  static void rndis_filter_receive_data(struct rndis_device *dev,
  				   struct rndis_message *msg,
++<<<<<<< HEAD
 +				   struct hv_netvsc_packet *pkt)
++=======
+ 				   struct hv_netvsc_packet *pkt,
+ 				   void **data,
+ 				   struct vmbus_channel *channel)
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  {
  	struct rndis_packet *rndis_pkt;
  	u32 data_offset;
@@@ -409,11 -395,13 +415,21 @@@
  	}
  
  	csum_info = rndis_get_ppi(rndis_pkt, TCPIP_CHKSUM_PKTINFO);
++<<<<<<< HEAD
 +	netvsc_recv_callback(dev->net_dev->dev, pkt, csum_info);
 +}
 +
 +int rndis_filter_receive(struct hv_device *dev,
 +				struct hv_netvsc_packet	*pkt)
++=======
+ 	netvsc_recv_callback(dev->net_dev->dev, pkt, data, csum_info, channel);
+ }
+ 
+ int rndis_filter_receive(struct hv_device *dev,
+ 				struct hv_netvsc_packet	*pkt,
+ 				void **data,
+ 				struct vmbus_channel *channel)
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  {
  	struct netvsc_device *net_dev = hv_get_drvdata(dev);
  	struct rndis_device *rndis_dev;
@@@ -444,14 -432,16 +460,19 @@@
  		goto exit;
  	}
  
- 	rndis_msg = pkt->data;
+ 	rndis_msg = *data;
  
 -	if (netif_msg_rx_err(net_dev->nd_ctx))
 -		dump_rndis_message(dev, rndis_msg);
 +	dump_rndis_message(dev, rndis_msg);
  
  	switch (rndis_msg->ndis_msg_type) {
  	case RNDIS_MSG_PACKET:
  		/* data msg */
++<<<<<<< HEAD
 +		rndis_filter_receive_data(rndis_dev, rndis_msg, pkt);
++=======
+ 		rndis_filter_receive_data(rndis_dev, rndis_msg, pkt,
+ 					  data, channel);
++>>>>>>> c4b20c6370aa (hv_netvsc: Eliminatte the data field from struct hv_netvsc_packet)
  		break;
  
  	case RNDIS_MSG_INIT_C:
* Unmerged path drivers/net/hyperv/hyperv_net.h
* Unmerged path drivers/net/hyperv/netvsc.c
* Unmerged path drivers/net/hyperv/netvsc_drv.c
* Unmerged path drivers/net/hyperv/rndis_filter.c
