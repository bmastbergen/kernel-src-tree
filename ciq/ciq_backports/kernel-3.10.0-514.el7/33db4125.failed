openvswitch: Rename LABEL->LABELS

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Joe Stringer <joestringer@nicira.com>
commit 33db4125ec745426c3483d6817d8f7ea5324cd05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/33db4125.failed

Conntrack LABELS (plural) are exposed by conntrack; rename the OVS name
for these to be consistent with conntrack.

Fixes: c2ac667 "openvswitch: Allow matching on conntrack label"
	Signed-off-by: Joe Stringer <joestringer@nicira.com>
	Acked-by: Pravin B Shelar <pshelar@nicira.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 33db4125ec745426c3483d6817d8f7ea5324cd05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/openvswitch.h
#	net/openvswitch/actions.c
#	net/openvswitch/conntrack.c
#	net/openvswitch/conntrack.h
#	net/openvswitch/flow.h
#	net/openvswitch/flow_netlink.c
diff --cc include/uapi/linux/openvswitch.h
index 1dab77601c21,c736344afed4..000000000000
--- a/include/uapi/linux/openvswitch.h
+++ b/include/uapi/linux/openvswitch.h
@@@ -319,9 -323,13 +319,16 @@@ enum ovs_key_attr 
  	OVS_KEY_ATTR_MPLS,      /* array of struct ovs_key_mpls.
  				 * The implementation may restrict
  				 * the accepted length of the array. */
++<<<<<<< HEAD
++=======
+ 	OVS_KEY_ATTR_CT_STATE,	/* u8 bitmask of OVS_CS_F_* */
+ 	OVS_KEY_ATTR_CT_ZONE,	/* u16 connection tracking zone. */
+ 	OVS_KEY_ATTR_CT_MARK,	/* u32 connection tracking mark */
+ 	OVS_KEY_ATTR_CT_LABELS,	/* 16-octet connection tracking label */
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  
  #ifdef __KERNEL__
 -	OVS_KEY_ATTR_TUNNEL_INFO,  /* struct ip_tunnel_info */
 +	OVS_KEY_ATTR_TUNNEL_INFO,  /* struct ovs_tunnel_info */
  #endif
  	__OVS_KEY_ATTR_MAX
  };
@@@ -431,6 -439,20 +438,23 @@@ struct ovs_key_nd 
  	__u8	nd_tll[ETH_ALEN];
  };
  
++<<<<<<< HEAD
++=======
+ #define OVS_CT_LABELS_LEN	16
+ struct ovs_key_ct_labels {
+ 	__u8	ct_labels[OVS_CT_LABELS_LEN];
+ };
+ 
+ /* OVS_KEY_ATTR_CT_STATE flags */
+ #define OVS_CS_F_NEW               0x01 /* Beginning of a new connection. */
+ #define OVS_CS_F_ESTABLISHED       0x02 /* Part of an existing connection. */
+ #define OVS_CS_F_RELATED           0x04 /* Related to an established
+ 					 * connection. */
+ #define OVS_CS_F_INVALID           0x20 /* Could not track connection. */
+ #define OVS_CS_F_REPLY_DIR         0x40 /* Flow is in the reply direction. */
+ #define OVS_CS_F_TRACKED           0x80 /* Conntrack has occurred. */
+ 
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  /**
   * enum ovs_flow_attr - attributes for %OVS_FLOW_* commands.
   * @OVS_FLOW_ATTR_KEY: Nested %OVS_KEY_ATTR_* attributes specifying the flow
@@@ -595,6 -617,39 +619,42 @@@ struct ovs_action_hash 
  };
  
  /**
++<<<<<<< HEAD
++=======
+  * enum ovs_ct_attr - Attributes for %OVS_ACTION_ATTR_CT action.
+  * @OVS_CT_ATTR_FLAGS: u32 connection tracking flags.
+  * @OVS_CT_ATTR_ZONE: u16 connection tracking zone.
+  * @OVS_CT_ATTR_MARK: u32 value followed by u32 mask. For each bit set in the
+  * mask, the corresponding bit in the value is copied to the connection
+  * tracking mark field in the connection.
+  * @OVS_CT_ATTR_LABEL: %OVS_CT_LABELS_LEN value followed by %OVS_CT_LABELS_LEN
+  * mask. For each bit set in the mask, the corresponding bit in the value is
+  * copied to the connection tracking label field in the connection.
+  * @OVS_CT_ATTR_HELPER: variable length string defining conntrack ALG.
+  */
+ enum ovs_ct_attr {
+ 	OVS_CT_ATTR_UNSPEC,
+ 	OVS_CT_ATTR_FLAGS,      /* u8 bitmask of OVS_CT_F_*. */
+ 	OVS_CT_ATTR_ZONE,       /* u16 zone id. */
+ 	OVS_CT_ATTR_MARK,       /* mark to associate with this connection. */
+ 	OVS_CT_ATTR_LABELS,     /* labels to associate with this connection. */
+ 	OVS_CT_ATTR_HELPER,     /* netlink helper to assist detection of
+ 				   related connections. */
+ 	__OVS_CT_ATTR_MAX
+ };
+ 
+ #define OVS_CT_ATTR_MAX (__OVS_CT_ATTR_MAX - 1)
+ 
+ /*
+  * OVS_CT_ATTR_FLAGS flags - bitmask of %OVS_CT_F_*
+  * @OVS_CT_F_COMMIT: Commits the flow to the conntrack table. This allows
+  * future packets for the same connection to be identified as 'established'
+  * or 'related'.
+  */
+ #define OVS_CT_F_COMMIT		0x01
+ 
+ /**
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
   * enum ovs_action_attr - Action types.
   *
   * @OVS_ACTION_ATTR_OUTPUT: Output packet to port.
diff --cc net/openvswitch/actions.c
index 1970b0908585,e23a61cc3d5c..000000000000
--- a/net/openvswitch/actions.c
+++ b/net/openvswitch/actions.c
@@@ -806,6 -964,13 +806,16 @@@ static int execute_masked_set_action(st
  		err = set_mpls(skb, flow_key, nla_data(a), get_mask(a,
  								    __be32 *));
  		break;
++<<<<<<< HEAD
++=======
+ 
+ 	case OVS_KEY_ATTR_CT_STATE:
+ 	case OVS_KEY_ATTR_CT_ZONE:
+ 	case OVS_KEY_ATTR_CT_MARK:
+ 	case OVS_KEY_ATTR_CT_LABELS:
+ 		err = -EINVAL;
+ 		break;
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  	}
  
  	return err;
diff --cc net/openvswitch/flow.h
index 998401ae6927,8cfa15a08668..000000000000
--- a/net/openvswitch/flow.h
+++ b/net/openvswitch/flow.h
@@@ -176,6 -111,14 +176,17 @@@ struct sw_flow_key 
  			} nd;
  		} ipv6;
  	};
++<<<<<<< HEAD
++=======
+ 	struct {
+ 		/* Connection tracking fields. */
+ 		u16 zone;
+ 		u32 mark;
+ 		u8 state;
+ 		struct ovs_key_ct_labels labels;
+ 	} ct;
+ 
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  } __aligned(BITS_PER_LONG/8); /* Ensure that we can do comparisons as longs. */
  
  struct sw_flow_key_range {
diff --cc net/openvswitch/flow_netlink.c
index 953a2c4bca92,a60e3b7684bc..000000000000
--- a/net/openvswitch/flow_netlink.c
+++ b/net/openvswitch/flow_netlink.c
@@@ -290,6 -291,10 +290,13 @@@ size_t ovs_key_attr_size(void
  		+ nla_total_size(4)   /* OVS_KEY_ATTR_SKB_MARK */
  		+ nla_total_size(4)   /* OVS_KEY_ATTR_DP_HASH */
  		+ nla_total_size(4)   /* OVS_KEY_ATTR_RECIRC_ID */
++<<<<<<< HEAD
++=======
+ 		+ nla_total_size(1)   /* OVS_KEY_ATTR_CT_STATE */
+ 		+ nla_total_size(2)   /* OVS_KEY_ATTR_CT_ZONE */
+ 		+ nla_total_size(4)   /* OVS_KEY_ATTR_CT_MARK */
+ 		+ nla_total_size(16)  /* OVS_KEY_ATTR_CT_LABELS */
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  		+ nla_total_size(12)  /* OVS_KEY_ATTR_ETHERNET */
  		+ nla_total_size(2)   /* OVS_KEY_ATTR_ETHERTYPE */
  		+ nla_total_size(4)   /* OVS_KEY_ATTR_VLAN */
@@@ -339,8 -349,19 +346,15 @@@ static const struct ovs_len_tbl ovs_key
  	[OVS_KEY_ATTR_TUNNEL]	 = { .len = OVS_ATTR_NESTED,
  				     .next = ovs_tunnel_key_lens, },
  	[OVS_KEY_ATTR_MPLS]	 = { .len = sizeof(struct ovs_key_mpls) },
++<<<<<<< HEAD
++=======
+ 	[OVS_KEY_ATTR_CT_STATE]	 = { .len = sizeof(u8) },
+ 	[OVS_KEY_ATTR_CT_ZONE]	 = { .len = sizeof(u16) },
+ 	[OVS_KEY_ATTR_CT_MARK]	 = { .len = sizeof(u32) },
+ 	[OVS_KEY_ATTR_CT_LABELS] = { .len = sizeof(struct ovs_key_ct_labels) },
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  };
  
 -static bool check_attr_len(unsigned int attr_len, unsigned int expected_len)
 -{
 -	return expected_len == attr_len ||
 -	       expected_len == OVS_ATTR_NESTED ||
 -	       expected_len == OVS_ATTR_VARIABLE;
 -}
 -
  static bool is_all_zero(const u8 *fp, size_t size)
  {
  	int i;
@@@ -768,6 -811,37 +782,40 @@@ static int metadata_from_nlattrs(struc
  			return -EINVAL;
  		*attrs &= ~(1 << OVS_KEY_ATTR_TUNNEL);
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	if (*attrs & (1 << OVS_KEY_ATTR_CT_STATE) &&
+ 	    ovs_ct_verify(net, OVS_KEY_ATTR_CT_STATE)) {
+ 		u8 ct_state = nla_get_u8(a[OVS_KEY_ATTR_CT_STATE]);
+ 
+ 		SW_FLOW_KEY_PUT(match, ct.state, ct_state, is_mask);
+ 		*attrs &= ~(1ULL << OVS_KEY_ATTR_CT_STATE);
+ 	}
+ 	if (*attrs & (1 << OVS_KEY_ATTR_CT_ZONE) &&
+ 	    ovs_ct_verify(net, OVS_KEY_ATTR_CT_ZONE)) {
+ 		u16 ct_zone = nla_get_u16(a[OVS_KEY_ATTR_CT_ZONE]);
+ 
+ 		SW_FLOW_KEY_PUT(match, ct.zone, ct_zone, is_mask);
+ 		*attrs &= ~(1ULL << OVS_KEY_ATTR_CT_ZONE);
+ 	}
+ 	if (*attrs & (1 << OVS_KEY_ATTR_CT_MARK) &&
+ 	    ovs_ct_verify(net, OVS_KEY_ATTR_CT_MARK)) {
+ 		u32 mark = nla_get_u32(a[OVS_KEY_ATTR_CT_MARK]);
+ 
+ 		SW_FLOW_KEY_PUT(match, ct.mark, mark, is_mask);
+ 		*attrs &= ~(1ULL << OVS_KEY_ATTR_CT_MARK);
+ 	}
+ 	if (*attrs & (1 << OVS_KEY_ATTR_CT_LABELS) &&
+ 	    ovs_ct_verify(net, OVS_KEY_ATTR_CT_LABELS)) {
+ 		const struct ovs_key_ct_labels *cl;
+ 
+ 		cl = nla_data(a[OVS_KEY_ATTR_CT_LABELS]);
+ 		SW_FLOW_KEY_MEMCPY(match, ct.labels, cl->ct_labels,
+ 				   sizeof(*cl), is_mask);
+ 		*attrs &= ~(1ULL << OVS_KEY_ATTR_CT_LABELS);
+ 	}
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  	return 0;
  }
  
@@@ -1844,6 -1972,8 +1892,11 @@@ static int validate_set(const struct nl
  
  	case OVS_KEY_ATTR_PRIORITY:
  	case OVS_KEY_ATTR_SKB_MARK:
++<<<<<<< HEAD
++=======
+ 	case OVS_KEY_ATTR_CT_MARK:
+ 	case OVS_KEY_ATTR_CT_LABELS:
++>>>>>>> 33db4125ec74 (openvswitch: Rename LABEL->LABELS)
  	case OVS_KEY_ATTR_ETHERNET:
  		break;
  
* Unmerged path net/openvswitch/conntrack.c
* Unmerged path net/openvswitch/conntrack.h
* Unmerged path include/uapi/linux/openvswitch.h
* Unmerged path net/openvswitch/actions.c
* Unmerged path net/openvswitch/conntrack.c
* Unmerged path net/openvswitch/conntrack.h
* Unmerged path net/openvswitch/flow.h
* Unmerged path net/openvswitch/flow_netlink.c
