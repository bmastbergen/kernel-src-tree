cpufreq: powernv: Define per_cpu chip pointer to optimize hot-path

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [cpufreq] powernv: Define per_cpu chip pointer to optimize hot-path (Steve Best) [1329176]
Rebuild_FUZZ: 92.68%
commit-author Michael Neuling <mikey@neuling.org>
commit 3e5963bc343b3fb4ca045e9d1c14cb9ce89234b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3e5963bc.failed

Commit 96c4726f01cd "cpufreq: powernv: Remove cpu_to_chip_id() from
hot-path" introduced a 'core_to_chip_map' array to cache the chip-ids
of all cores.

Replace this with a per-CPU variable that stores the pointer to the
chip-array. This removes the linear lookup and provides a neater and
simpler solution.

	Signed-off-by: Michael Neuling <mikey@neuling.org>
	Signed-off-by: Shilpasri G Bhat <shilpa.bhat@linux.vnet.ibm.com>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 3e5963bc343b3fb4ca045e9d1c14cb9ce89234b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/powernv-cpufreq.c
diff --cc drivers/cpufreq/powernv-cpufreq.c
index f171dd3496cc,a00bcc2cef09..000000000000
--- a/drivers/cpufreq/powernv-cpufreq.c
+++ b/drivers/cpufreq/powernv-cpufreq.c
@@@ -43,8 -44,16 +43,7 @@@
  
  static struct cpufreq_frequency_table powernv_freqs[POWERNV_MAX_PSTATES+1];
  static bool rebooting, throttled, occ_reset;
- static unsigned int *core_to_chip_map;
  
 -static const char * const throttle_reason[] = {
 -	"No throttling",
 -	"Power Cap",
 -	"Processor Over Temperature",
 -	"Power Supply Failure",
 -	"Over Current",
 -	"OCC Reset"
 -};
 -
  static struct chip {
  	unsigned int id;
  	bool throttled;
@@@ -327,21 -335,21 +324,35 @@@ static void powernv_cpufreq_throttle_ch
  	/* Check for Pmax Capping */
  	pmsr_pmax = (s8)PMSR_MAX(pmsr);
  	if (pmsr_pmax != powernv_pstate_info.max) {
- 		if (chips[i].throttled)
+ 		if (chip->throttled)
  			goto next;
- 		chips[i].throttled = true;
+ 		chip->throttled = true;
  		if (pmsr_pmax < powernv_pstate_info.nominal)
++<<<<<<< HEAD
 +			pr_crit("CPU %d on Chip %u has Pmax reduced below nominal frequency (%d < %d)\n",
 +				cpu, chips[i].id, pmsr_pmax,
 +				powernv_pstate_info.nominal);
 +		else
 +			pr_info("CPU %d on Chip %u has Pmax reduced below turbo frequency (%d < %d)\n",
 +				cpu, chips[i].id, pmsr_pmax,
 +				powernv_pstate_info.max);
 +	} else if (chips[i].throttled) {
 +		chips[i].throttled = false;
 +		pr_info("CPU %d on Chip %u has Pmax restored to %d\n", cpu,
 +			chips[i].id, pmsr_pmax);
++=======
+ 			pr_warn_once("CPU %d on Chip %u has Pmax reduced below nominal frequency (%d < %d)\n",
+ 				     cpu, chip->id, pmsr_pmax,
+ 				     powernv_pstate_info.nominal);
+ 		trace_powernv_throttle(chip->id,
+ 				      throttle_reason[chip->throttle_reason],
+ 				      pmsr_pmax);
+ 	} else if (chip->throttled) {
+ 		chip->throttled = false;
+ 		trace_powernv_throttle(chip->id,
+ 				      throttle_reason[chip->throttle_reason],
+ 				      pmsr_pmax);
++>>>>>>> 3e5963bc343b (cpufreq: powernv: Define per_cpu chip pointer to optimize hot-path)
  	}
  
  	/* Check if Psafe_mode_active is set in PMSR. */
@@@ -576,20 -563,18 +579,23 @@@ static int init_chip_info(void
  			prev_chip_id = id;
  			chip[nr_chips++] = id;
  		}
- 		core_to_chip_map[cpu_core_index_of_thread(cpu)] = id;
- 		cpumask_andnot(&cpu_mask, &cpu_mask, cpu_sibling_mask(cpu));
  	}
  
 -	chips = kcalloc(nr_chips, sizeof(struct chip), GFP_KERNEL);
 +	chips = kmalloc_array(nr_chips, sizeof(struct chip), GFP_KERNEL);
  	if (!chips)
- 		goto free_chip_map;
+ 		return -ENOMEM;
  
  	for (i = 0; i < nr_chips; i++) {
  		chips[i].id = chip[i];
 +		chips[i].throttled = false;
  		cpumask_copy(&chips[i].mask, cpumask_of_node(chip[i]));
  		INIT_WORK(&chips[i].throttle, powernv_cpufreq_work_fn);
++<<<<<<< HEAD
 +		chips[i].restore = false;
++=======
+ 		for_each_cpu(cpu, &chips[i].mask)
+ 			per_cpu(chip_info, cpu) =  &chips[i];
++>>>>>>> 3e5963bc343b (cpufreq: powernv: Define per_cpu chip pointer to optimize hot-path)
  	}
  
  	return 0;
* Unmerged path drivers/cpufreq/powernv-cpufreq.c
