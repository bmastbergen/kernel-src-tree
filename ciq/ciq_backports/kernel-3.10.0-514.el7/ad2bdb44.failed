drm/i915: Add WaInsertDummyPushConstP for bxt and kbl

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drm] i915: Add WaInsertDummyPushConstP for bxt and kbl (Rob Clark) [1348329 1349064]
Rebuild_FUZZ: 96.08%
commit-author Mika Kuoppala <mika.kuoppala@linux.intel.com>
commit ad2bdb44b19529ba992bd0b7667e91b14fe9a9ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ad2bdb44.failed

Add this workaround for both bxt and kbl up to until
rev B0.

References: HSD#2136703
	Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
	Reviewed-by: Matthew Auld <matthew.auld@intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1465309159-30531-16-git-send-email-mika.kuoppala@intel.com
(cherry picked from commit ad2bdb44b19529ba992bd0b7667e91b14fe9a9ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg.h
#	drivers/gpu/drm/i915/intel_ringbuffer.c
diff --cc drivers/gpu/drm/i915/i915_reg.h
index bcce9fc478ee,11e10a0ccd37..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -5291,30 -6048,51 +5291,35 @@@ enum skl_disp_power_wells 
  #define _CHICKEN_PIPESL_1_B	0x420b4
  #define  HSW_FBCQ_DIS			(1 << 22)
  #define  BDW_DPRS_MASK_VBLANK_SRD	(1 << 0)
 -#define CHICKEN_PIPESL_1(pipe) _MMIO_PIPE(pipe, _CHICKEN_PIPESL_1_A, _CHICKEN_PIPESL_1_B)
 +#define CHICKEN_PIPESL_1(pipe) _PIPE(pipe, _CHICKEN_PIPESL_1_A, _CHICKEN_PIPESL_1_B)
  
 -#define DISP_ARB_CTL	_MMIO(0x45000)
 +#define DISP_ARB_CTL	0x45000
  #define  DISP_TILE_SURFACE_SWIZZLING	(1<<13)
  #define  DISP_FBC_WM_DIS		(1<<15)
 -#define DISP_ARB_CTL2	_MMIO(0x45004)
 +#define DISP_ARB_CTL2	0x45004
  #define  DISP_DATA_PARTITION_5_6	(1<<6)
 -#define DBUF_CTL	_MMIO(0x45008)
 -#define  DBUF_POWER_REQUEST		(1<<31)
 -#define  DBUF_POWER_STATE		(1<<30)
 -#define GEN7_MSG_CTL	_MMIO(0x45010)
 +#define GEN7_MSG_CTL	0x45010
  #define  WAIT_FOR_PCH_RESET_ACK		(1<<1)
  #define  WAIT_FOR_PCH_FLR_ACK		(1<<0)
 -#define HSW_NDE_RSTWRN_OPT	_MMIO(0x46408)
 +#define HSW_NDE_RSTWRN_OPT	0x46408
  #define  RESET_PCH_HANDSHAKE_ENABLE	(1<<4)
  
 -#define SKL_DFSM			_MMIO(0x51000)
 -#define SKL_DFSM_CDCLK_LIMIT_MASK	(3 << 23)
 -#define SKL_DFSM_CDCLK_LIMIT_675	(0 << 23)
 -#define SKL_DFSM_CDCLK_LIMIT_540	(1 << 23)
 -#define SKL_DFSM_CDCLK_LIMIT_450	(2 << 23)
 -#define SKL_DFSM_CDCLK_LIMIT_337_5	(3 << 23)
 -#define SKL_DFSM_PIPE_A_DISABLE		(1 << 30)
 -#define SKL_DFSM_PIPE_B_DISABLE		(1 << 21)
 -#define SKL_DFSM_PIPE_C_DISABLE		(1 << 28)
 -
 -#define GEN7_FF_SLICE_CS_CHICKEN1	_MMIO(0x20e0)
 -#define   GEN9_FFSC_PERCTX_PREEMPT_CTRL	(1<<14)
 -
 -#define FF_SLICE_CS_CHICKEN2			_MMIO(0x20e4)
 +#define FF_SLICE_CS_CHICKEN2			0x02e4
  #define  GEN9_TSG_BARRIER_ACK_DISABLE		(1<<8)
  
 -#define GEN9_CS_DEBUG_MODE1		_MMIO(0x20ec)
 -#define GEN9_CTX_PREEMPT_REG		_MMIO(0x2248)
 -#define GEN8_CS_CHICKEN1		_MMIO(0x2580)
 -
  /* GEN7 chicken */
 -#define GEN7_COMMON_SLICE_CHICKEN1		_MMIO(0x7010)
 +#define GEN7_COMMON_SLICE_CHICKEN1		0x7010
  # define GEN7_CSC1_RHWO_OPT_DISABLE_IN_RCC	((1<<10) | (1<<26))
  # define GEN9_RHWO_OPTIMIZATION_DISABLE		(1<<14)
++<<<<<<< HEAD
 +#define COMMON_SLICE_CHICKEN2			0x7014
++=======
+ #define COMMON_SLICE_CHICKEN2			_MMIO(0x7014)
+ # define GEN8_SBE_DISABLE_REPLAY_BUF_OPTIMIZATION (1<<8)
++>>>>>>> ad2bdb44b195 (drm/i915: Add WaInsertDummyPushConstP for bxt and kbl)
  # define GEN8_CSC2_SBE_VUE_CACHE_CONSERVATIVE	(1<<0)
  
 -#define HIZ_CHICKEN					_MMIO(0x7018)
 +#define HIZ_CHICKEN					0x7018
  # define CHV_HZ_8X8_MODE_IN_1X				(1<<15)
  # define BDW_HIZ_POWER_COMPILER_CLOCK_GATING_DISABLE	(1<<3)
  
diff --cc drivers/gpu/drm/i915/intel_ringbuffer.c
index 005b5e04de4d,a397b876da2c..000000000000
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@@ -1024,28 -1116,148 +1024,133 @@@ static int skl_init_workarounds(struct 
  				  HDC_FENCE_DEST_SLM_DISABLE |
  				  HDC_BARRIER_PERFORMANCE_DISABLE);
  
 -	/* WaDisableSbeCacheDispatchPortSharing:skl */
 -	if (IS_SKL_REVID(dev_priv, 0, SKL_REVID_F0))
 -		WA_SET_BIT_MASKED(
 -			GEN7_HALF_SLICE_CHICKEN1,
 -			GEN7_SBE_SS_CACHE_DISPATCH_PORT_SHARING_DISABLE);
 -
 -	/* WaDisableGafsUnitClkGating:skl */
 -	WA_SET_BIT(GEN7_UCGCTL4, GEN8_EU_GAUNIT_CLOCK_GATE_DISABLE);
 -
 -	/* WaDisableLSQCROPERFforOCL:skl */
 -	ret = wa_ring_whitelist_reg(engine, GEN8_L3SQCREG4);
 -	if (ret)
 -		return ret;
 -
 -	return skl_tune_iz_hashing(engine);
 +	return skl_tune_iz_hashing(ring);
  }
  
 -static int bxt_init_workarounds(struct intel_engine_cs *engine)
 +int init_workarounds_ring(struct intel_engine_cs *ring)
  {
 -	struct drm_i915_private *dev_priv = engine->i915;
 -	int ret;
 +	struct drm_device *dev = ring->dev;
 +	struct drm_i915_private *dev_priv = dev->dev_private;
  
++<<<<<<< HEAD
 +	WARN_ON(ring->id != RCS);
++=======
+ 	ret = gen9_init_workarounds(engine);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* WaStoreMultiplePTEenable:bxt */
+ 	/* This is a requirement according to Hardware specification */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1))
+ 		I915_WRITE(TILECTL, I915_READ(TILECTL) | TILECTL_TLBPF);
+ 
+ 	/* WaSetClckGatingDisableMedia:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1)) {
+ 		I915_WRITE(GEN7_MISCCPCTL, (I915_READ(GEN7_MISCCPCTL) &
+ 					    ~GEN8_DOP_CLOCK_GATE_MEDIA_ENABLE));
+ 	}
+ 
+ 	/* WaDisableThreadStallDopClockGating:bxt */
+ 	WA_SET_BIT_MASKED(GEN8_ROW_CHICKEN,
+ 			  STALL_DOP_GATING_DISABLE);
+ 
+ 	/* WaDisableSbeCacheDispatchPortSharing:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_B0)) {
+ 		WA_SET_BIT_MASKED(
+ 			GEN7_HALF_SLICE_CHICKEN1,
+ 			GEN7_SBE_SS_CACHE_DISPATCH_PORT_SHARING_DISABLE);
+ 	}
+ 
+ 	/* WaDisableObjectLevelPreemptionForTrifanOrPolygon:bxt */
+ 	/* WaDisableObjectLevelPreemptionForInstancedDraw:bxt */
+ 	/* WaDisableObjectLevelPreemtionForInstanceId:bxt */
+ 	/* WaDisableLSQCROPERFforOCL:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1)) {
+ 		ret = wa_ring_whitelist_reg(engine, GEN9_CS_DEBUG_MODE1);
+ 		if (ret)
+ 			return ret;
+ 
+ 		ret = wa_ring_whitelist_reg(engine, GEN8_L3SQCREG4);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* WaProgramL3SqcReg1DefaultForPerf:bxt */
+ 	if (IS_BXT_REVID(dev_priv, BXT_REVID_B0, REVID_FOREVER))
+ 		I915_WRITE(GEN8_L3SQCREG1, L3_GENERAL_PRIO_CREDITS(62) |
+ 					   L3_HIGH_PRIO_CREDITS(2));
+ 
+ 	/* WaInsertDummyPushConstPs:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_B0))
+ 		WA_SET_BIT_MASKED(COMMON_SLICE_CHICKEN2,
+ 				  GEN8_SBE_DISABLE_REPLAY_BUF_OPTIMIZATION);
+ 
+ 	return 0;
+ }
+ 
+ static int kbl_init_workarounds(struct intel_engine_cs *engine)
+ {
+ 	struct drm_i915_private *dev_priv = engine->i915;
+ 	int ret;
+ 
+ 	ret = gen9_init_workarounds(engine);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* WaEnableGapsTsvCreditFix:kbl */
+ 	I915_WRITE(GEN8_GARBCNTL, (I915_READ(GEN8_GARBCNTL) |
+ 				   GEN9_GAPS_TSV_CREDIT_DISABLE));
+ 
+ 	/* WaDisableDynamicCreditSharing:kbl */
+ 	if (IS_KBL_REVID(dev_priv, 0, KBL_REVID_B0))
+ 		WA_SET_BIT(GAMT_CHKN_BIT_REG,
+ 			   GAMT_CHKN_DISABLE_DYNAMIC_CREDIT_SHARING);
+ 
+ 	/* WaDisableFenceDestinationToSLM:kbl (pre-prod) */
+ 	if (IS_KBL_REVID(dev_priv, KBL_REVID_A0, KBL_REVID_A0))
+ 		WA_SET_BIT_MASKED(HDC_CHICKEN0,
+ 				  HDC_FENCE_DEST_SLM_DISABLE);
+ 
+ 	/* GEN8_L3SQCREG4 has a dependency with WA batch so any new changes
+ 	 * involving this register should also be added to WA batch as required.
+ 	 */
+ 	if (IS_KBL_REVID(dev_priv, 0, KBL_REVID_E0))
+ 		/* WaDisableLSQCROPERFforOCL:kbl */
+ 		I915_WRITE(GEN8_L3SQCREG4, I915_READ(GEN8_L3SQCREG4) |
+ 			   GEN8_LQSC_RO_PERF_DIS);
+ 
+ 	/* WaInsertDummyPushConstPs:kbl */
+ 	if (IS_KBL_REVID(dev_priv, 0, KBL_REVID_B0))
+ 		WA_SET_BIT_MASKED(COMMON_SLICE_CHICKEN2,
+ 				  GEN8_SBE_DISABLE_REPLAY_BUF_OPTIMIZATION);
+ 
+ 	/* WaDisableLSQCROPERFforOCL:kbl */
+ 	ret = wa_ring_whitelist_reg(engine, GEN8_L3SQCREG4);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return 0;
+ }
+ 
+ int init_workarounds_ring(struct intel_engine_cs *engine)
+ {
+ 	struct drm_i915_private *dev_priv = engine->i915;
+ 
+ 	WARN_ON(engine->id != RCS);
++>>>>>>> ad2bdb44b195 (drm/i915: Add WaInsertDummyPushConstP for bxt and kbl)
  
  	dev_priv->workarounds.count = 0;
 -	dev_priv->workarounds.hw_whitelist_count[RCS] = 0;
 -
 -	if (IS_BROADWELL(dev_priv))
 -		return bdw_init_workarounds(engine);
 -
 -	if (IS_CHERRYVIEW(dev_priv))
 -		return chv_init_workarounds(engine);
  
 -	if (IS_SKYLAKE(dev_priv))
 -		return skl_init_workarounds(engine);
 +	if (IS_BROADWELL(dev))
 +		return bdw_init_workarounds(ring);
  
 -	if (IS_BROXTON(dev_priv))
 -		return bxt_init_workarounds(engine);
 +	if (IS_CHERRYVIEW(dev))
 +		return chv_init_workarounds(ring);
  
 -	if (IS_KABYLAKE(dev_priv))
 -		return kbl_init_workarounds(engine);
 +	if (IS_SKYLAKE(dev))
 +		return skl_init_workarounds(ring);
 +	else if (IS_GEN9(dev))
 +		return gen9_init_workarounds(ring);
  
  	return 0;
  }
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
* Unmerged path drivers/gpu/drm/i915/intel_ringbuffer.c
