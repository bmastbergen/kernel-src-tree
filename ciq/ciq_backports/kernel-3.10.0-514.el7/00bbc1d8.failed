driver core: platform: Add support for built-in device properties

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 00bbc1d8e46a92ce7bd80622cf4b09c3b727a741
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/00bbc1d8.failed

Make it possible to pass built-in device properties to platform device
drivers. This is useful if the system does not have any firmware interface
like Device Tree or ACPI which provides these.

Properties associated with the platform device will be automatically
released when the corresponding device is removed.

	Suggested-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 00bbc1d8e46a92ce7bd80622cf4b09c3b727a741)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/platform.c
diff --cc drivers/base/platform.c
index 55684f062830,d77ed0c946dd..000000000000
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@@ -20,8 -21,12 +20,14 @@@
  #include <linux/err.h>
  #include <linux/slab.h>
  #include <linux/pm_runtime.h>
 -#include <linux/pm_domain.h>
  #include <linux/idr.h>
  #include <linux/acpi.h>
++<<<<<<< HEAD
++=======
+ #include <linux/clk/clk-conf.h>
+ #include <linux/limits.h>
+ #include <linux/property.h>
++>>>>>>> 00bbc1d8e46a (driver core: platform: Add support for built-in device properties)
  
  #include "base.h"
  #include "power/power.h"
@@@ -380,11 -423,11 +402,13 @@@ void platform_device_del(struct platfor
  
  		for (i = 0; i < pdev->num_resources; i++) {
  			struct resource *r = &pdev->resource[i];
 -			if (r->parent)
 +			unsigned long type = resource_type(r);
 +
 +			if (type == IORESOURCE_MEM || type == IORESOURCE_IO)
  				release_resource(r);
  		}
+ 
+ 		device_remove_property_set(&pdev->dev);
  	}
  }
  EXPORT_SYMBOL_GPL(platform_device_del);
* Unmerged path drivers/base/platform.c
diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 9abf1db6aea6..60439eaacd17 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -18,6 +18,7 @@
 #define PLATFORM_DEVID_AUTO	(-2)
 
 struct mfd_cell;
+struct property_set;
 
 struct platform_device {
 	const char	*name;
@@ -69,6 +70,8 @@ struct platform_device_info {
 		const void *data;
 		size_t size_data;
 		u64 dma_mask;
+
+		const struct property_set *pset;
 };
 extern struct platform_device *platform_device_register_full(
 		const struct platform_device_info *pdevinfo);
@@ -166,6 +169,8 @@ extern int platform_device_add_resources(struct platform_device *pdev,
 					 unsigned int num);
 extern int platform_device_add_data(struct platform_device *pdev,
 				    const void *data, size_t size);
+extern int platform_device_add_properties(struct platform_device *pdev,
+					  const struct property_set *pset);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);
