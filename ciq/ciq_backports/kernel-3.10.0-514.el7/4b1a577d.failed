usb: isp1760: Move core code to isp1760-core.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] isp1760: Move core code to isp1760-core.c (Don Zickus) [1303209]
Rebuild_FUZZ: 94.25%
commit-author Laurent Pinchart <laurent.pinchart@ideasonboard.com>
commit 4b1a577d41c99f2aa548e8de3effe1033d9ca40b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4b1a577d.failed

Move core device initialization to a central location in order to share
it with the device mode implementation.

	Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
	Signed-off-by: Felipe Balbi <balbi@ti.com>
(cherry picked from commit 4b1a577d41c99f2aa548e8de3effe1033d9ca40b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/isp1760-hcd.c
#	drivers/usb/host/isp1760-hcd.h
#	drivers/usb/host/isp1760-if.c
diff --cc drivers/usb/host/isp1760-hcd.c
index 2facee53eab1,0cf620b1f6aa..000000000000
--- a/drivers/usb/host/isp1760-hcd.c
+++ b/drivers/usb/host/isp1760-hcd.c
@@@ -2213,55 -2232,50 +2213,89 @@@ void deinit_kmem_cache(void
  	kmem_cache_destroy(urb_listitem_cachep);
  }
  
++<<<<<<< HEAD
 +struct usb_hcd *isp1760_register(phys_addr_t res_start, resource_size_t res_len,
 +				 int irq, unsigned long irqflags,
 +				 int rst_gpio,
 +				 struct device *dev, const char *busname,
 +				 unsigned int devflags)
 +{
 +	struct usb_hcd *hcd;
 +	struct isp1760_hcd *priv;
 +	int ret;
 +
 +	if (usb_disabled())
 +		return ERR_PTR(-ENODEV);
 +
 +	/* prevent usb-core allocating DMA pages */
 +	dev->dma_mask = NULL;
 +
 +	hcd = usb_create_hcd(&isp1760_hc_driver, dev, dev_name(dev));
 +	if (!hcd)
 +		return ERR_PTR(-ENOMEM);
 +
 +	priv = hcd_to_priv(hcd);
++=======
+ int isp1760_hcd_register(struct isp1760_hcd *priv, void __iomem *regs,
+ 			 struct resource *mem, int irq, unsigned long irqflags,
+ 			 struct device *dev, unsigned int devflags)
+ {
+ 	struct usb_hcd *hcd;
+ 	int ret;
+ 
+ 	hcd = usb_create_hcd(&isp1760_hc_driver, dev, dev_name(dev));
+ 	if (!hcd)
+ 		return -ENOMEM;
+ 
+ 	*(struct isp1760_hcd **)hcd->hcd_priv = priv;
+ 
+ 	priv->hcd = hcd;
++>>>>>>> 4b1a577d41c9 (usb: isp1760: Move core code to isp1760-core.c)
  	priv->devflags = devflags;
 -
 -	priv->rst_gpio = devm_gpiod_get_optional(dev, NULL, GPIOD_OUT_HIGH);
 -	if (IS_ERR(priv->rst_gpio)) {
 -		ret = PTR_ERR(priv->rst_gpio);
 -		goto error;
 +	priv->rst_gpio = rst_gpio;
 +	init_memory(priv);
++<<<<<<< HEAD
 +	hcd->regs = ioremap(res_start, res_len);
 +	if (!hcd->regs) {
 +		ret = -EIO;
 +		goto err_put;
  	}
  
 -	init_memory(priv);
 +	hcd->irq = irq;
 +	hcd->rsrc_start = res_start;
 +	hcd->rsrc_len = res_len;
 +
 +	ret = usb_add_hcd(hcd, irq, irqflags);
 +	if (ret)
 +		goto err_unmap;
 +
 +	return hcd;
++=======
+ 
+ 	hcd->irq = irq;
+ 	hcd->regs = regs;
+ 	hcd->rsrc_start = mem->start;
+ 	hcd->rsrc_len = resource_size(mem);
+ 
+ 	ret = usb_add_hcd(hcd, irq, irqflags);
+ 	if (ret)
+ 		goto error;
+ 
+ 	device_wakeup_enable(hcd->self.controller);
++>>>>>>> 4b1a577d41c9 (usb: isp1760: Move core code to isp1760-core.c)
  
 -	return 0;
 +err_unmap:
 +	 iounmap(hcd->regs);
  
 -error:
 -	usb_put_hcd(hcd);
 -	return ret;
 -}
 +err_put:
 +	 usb_put_hcd(hcd);
  
++<<<<<<< HEAD
 +	 return ERR_PTR(ret);
++=======
+ void isp1760_hcd_unregister(struct isp1760_hcd *priv)
+ {
+ 	usb_remove_hcd(priv->hcd);
+ 	usb_put_hcd(priv->hcd);
++>>>>>>> 4b1a577d41c9 (usb: isp1760: Move core code to isp1760-core.c)
  }
- 
- MODULE_DESCRIPTION("Driver for the ISP1760 USB-controller from NXP");
- MODULE_AUTHOR("Sebastian Siewior <bigeasy@linuxtronix.de>");
- MODULE_LICENSE("GPL v2");
diff --cc drivers/usb/host/isp1760-hcd.h
index 33dc79ccaa6b,dcd2232848cd..000000000000
--- a/drivers/usb/host/isp1760-hcd.h
+++ b/drivers/usb/host/isp1760-hcd.h
@@@ -136,73 -54,42 +136,113 @@@ struct memory_chunk 
  	unsigned int free;
  };
  
 +/*
 + * 60kb divided in:
 + * - 32 blocks @ 256  bytes
 + * - 20 blocks @ 1024 bytes
 + * -  4 blocks @ 8192 bytes
 + */
 +
 +#define BLOCK_1_NUM 32
 +#define BLOCK_2_NUM 20
 +#define BLOCK_3_NUM 4
 +
 +#define BLOCK_1_SIZE 256
 +#define BLOCK_2_SIZE 1024
 +#define BLOCK_3_SIZE 8192
 +#define BLOCKS (BLOCK_1_NUM + BLOCK_2_NUM + BLOCK_3_NUM)
 +#define MAX_PAYLOAD_SIZE BLOCK_3_SIZE
 +#define PAYLOAD_AREA_SIZE 0xf000
 +
 +/* ATL */
 +/* DW0 */
 +#define DW0_VALID_BIT			1
 +#define FROM_DW0_VALID(x)		((x) & 0x01)
 +#define TO_DW0_LENGTH(x)		(((u32) x) << 3)
 +#define TO_DW0_MAXPACKET(x)		(((u32) x) << 18)
 +#define TO_DW0_MULTI(x)			(((u32) x) << 29)
 +#define TO_DW0_ENDPOINT(x)		(((u32)	x) << 31)
 +/* DW1 */
 +#define TO_DW1_DEVICE_ADDR(x)		(((u32) x) << 3)
 +#define TO_DW1_PID_TOKEN(x)		(((u32) x) << 10)
 +#define DW1_TRANS_BULK			((u32) 2 << 12)
 +#define DW1_TRANS_INT			((u32) 3 << 12)
 +#define DW1_TRANS_SPLIT			((u32) 1 << 14)
 +#define DW1_SE_USB_LOSPEED		((u32) 2 << 16)
 +#define TO_DW1_PORT_NUM(x)		(((u32) x) << 18)
 +#define TO_DW1_HUB_NUM(x)		(((u32) x) << 25)
 +/* DW2 */
 +#define TO_DW2_DATA_START_ADDR(x)	(((u32) x) << 8)
 +#define TO_DW2_RL(x)			((x) << 25)
 +#define FROM_DW2_RL(x)			(((x) >> 25) & 0xf)
 +/* DW3 */
 +#define FROM_DW3_NRBYTESTRANSFERRED(x)		((x) & 0x7fff)
 +#define FROM_DW3_SCS_NRBYTESTRANSFERRED(x)	((x) & 0x07ff)
 +#define TO_DW3_NAKCOUNT(x)		((x) << 19)
 +#define FROM_DW3_NAKCOUNT(x)		(((x) >> 19) & 0xf)
 +#define TO_DW3_CERR(x)			((x) << 23)
 +#define FROM_DW3_CERR(x)		(((x) >> 23) & 0x3)
 +#define TO_DW3_DATA_TOGGLE(x)		((x) << 25)
 +#define FROM_DW3_DATA_TOGGLE(x)		(((x) >> 25) & 0x1)
 +#define TO_DW3_PING(x)			((x) << 26)
 +#define FROM_DW3_PING(x)		(((x) >> 26) & 0x1)
 +#define DW3_ERROR_BIT			(1 << 28)
 +#define DW3_BABBLE_BIT			(1 << 29)
 +#define DW3_HALT_BIT			(1 << 30)
 +#define DW3_ACTIVE_BIT			(1 << 31)
 +#define FROM_DW3_ACTIVE(x)		(((x) >> 31) & 0x01)
 +
 +#define INT_UNDERRUN			(1 << 2)
 +#define INT_BABBLE			(1 << 1)
 +#define INT_EXACT			(1 << 0)
 +
 +#define SETUP_PID	(2)
 +#define IN_PID		(1)
 +#define OUT_PID		(0)
 +
++<<<<<<< HEAD
 +/* Errata 1 */
 +#define RL_COUNTER	(0)
 +#define NAK_COUNTER	(0)
 +#define ERR_COUNTER	(2)
++=======
+ enum isp1760_queue_head_types {
+ 	QH_CONTROL,
+ 	QH_BULK,
+ 	QH_INTERRUPT,
+ 	QH_END
+ };
+ 
+ struct isp1760_hcd {
+ 	struct usb_hcd		*hcd;
+ 
+ 	u32 hcs_params;
+ 	spinlock_t		lock;
+ 	struct isp1760_slotinfo	atl_slots[32];
+ 	int			atl_done_map;
+ 	struct isp1760_slotinfo	int_slots[32];
+ 	int			int_done_map;
+ 	struct isp1760_memory_chunk memory_pool[BLOCKS];
+ 	struct list_head	qh_list[QH_END];
+ 
+ 	/* periodic schedule support */
+ #define	DEFAULT_I_TDPS		1024
+ 	unsigned		periodic_size;
+ 	unsigned		i_thresh;
+ 	unsigned long		reset_done;
+ 	unsigned long		next_statechange;
+ 	unsigned int		devflags;
+ 
+ 	struct gpio_desc	*rst_gpio;
+ };
+ 
+ int isp1760_hcd_register(struct isp1760_hcd *priv, void __iomem *regs,
+ 			 struct resource *mem, int irq, unsigned long irqflags,
+ 			 struct device *dev, unsigned int devflags);
+ void isp1760_hcd_unregister(struct isp1760_hcd *priv);
+ 
+ int isp1760_init_kmem_once(void);
+ void isp1760_deinit_kmem_cache(void);
++>>>>>>> 4b1a577d41c9 (usb: isp1760: Move core code to isp1760-core.c)
  
  #endif /* _ISP1760_HCD_H_ */
diff --cc drivers/usb/host/isp1760-if.c
index a13709ee4e5d,f2a399051244..000000000000
--- a/drivers/usb/host/isp1760-if.c
+++ b/drivers/usb/host/isp1760-if.c
@@@ -16,16 -17,9 +16,21 @@@
  #include <linux/usb/isp1760.h>
  #include <linux/usb/hcd.h>
  
++<<<<<<< HEAD
 +#include "isp1760-hcd.h"
 +
 +#if defined(CONFIG_OF) && defined(CONFIG_OF_IRQ)
 +#include <linux/slab.h>
 +#include <linux/of.h>
 +#include <linux/of_platform.h>
 +#include <linux/of_address.h>
 +#include <linux/of_irq.h>
 +#include <linux/of_gpio.h>
 +#endif
++=======
+ #include "isp1760-core.h"
+ #include "isp1760-regs.h"
++>>>>>>> 4b1a577d41c9 (usb: isp1760: Move core code to isp1760-core.c)
  
  #ifdef CONFIG_PCI
  #include <linux/pci.h>
diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index c063401cba59..ece1376a1b43 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -5,7 +5,7 @@
 # tell define_trace.h where to find the xhci trace header
 CFLAGS_xhci-trace.o := -I$(src)
 
-isp1760-y := isp1760-hcd.o isp1760-if.o
+isp1760-y := isp1760-core.o isp1760-hcd.o isp1760-if.o
 
 fhci-y := fhci-hcd.o fhci-hub.o fhci-q.o
 fhci-y += fhci-mem.o fhci-tds.o fhci-sched.o
diff --git a/drivers/usb/host/isp1760-core.c b/drivers/usb/host/isp1760-core.c
new file mode 100644
index 000000000000..d38efa0e340a
--- /dev/null
+++ b/drivers/usb/host/isp1760-core.c
@@ -0,0 +1,65 @@
+/*
+ * Driver for the NXP ISP1760 chip
+ *
+ * Copyright 2014 Laurent Pinchart
+ * Copyright 2007 Sebastian Siewior
+ *
+ * Contacts:
+ *	Sebastian Siewior <bigeasy@linutronix.de>
+ *	Laurent Pinchart <laurent.pinchart@ideasonboard.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ */
+
+#include <linux/gpio.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/usb.h>
+
+#include "isp1760-core.h"
+#include "isp1760-hcd.h"
+
+int isp1760_register(struct resource *mem, int irq, unsigned long irqflags,
+		     struct device *dev, unsigned int devflags)
+{
+	struct isp1760_device *isp;
+	int ret;
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	/* prevent usb-core allocating DMA pages */
+	dev->dma_mask = NULL;
+
+	isp = devm_kzalloc(dev, sizeof(*isp), GFP_KERNEL);
+	if (!isp)
+		return -ENOMEM;
+
+	isp->regs = devm_ioremap_resource(dev, mem);
+	if (IS_ERR(isp->regs))
+		return PTR_ERR(isp->regs);
+
+	ret = isp1760_hcd_register(&isp->hcd, isp->regs, mem, irq, irqflags,
+				   dev, devflags);
+	if (ret < 0)
+		return ret;
+
+	dev_set_drvdata(dev, isp);
+
+	return 0;
+}
+
+void isp1760_unregister(struct device *dev)
+{
+	struct isp1760_device *isp = dev_get_drvdata(dev);
+
+	isp1760_hcd_unregister(&isp->hcd);
+}
+
+MODULE_DESCRIPTION("Driver for the ISP1760 USB-controller from NXP");
+MODULE_AUTHOR("Sebastian Siewior <bigeasy@linuxtronix.de>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/usb/host/isp1760-core.h b/drivers/usb/host/isp1760-core.h
new file mode 100644
index 000000000000..0caeb1135275
--- /dev/null
+++ b/drivers/usb/host/isp1760-core.h
@@ -0,0 +1,33 @@
+/*
+ * Driver for the NXP ISP1760 chip
+ *
+ * Copyright 2014 Laurent Pinchart
+ * Copyright 2007 Sebastian Siewior
+ *
+ * Contacts:
+ *	Sebastian Siewior <bigeasy@linutronix.de>
+ *	Laurent Pinchart <laurent.pinchart@ideasonboard.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ */
+
+#ifndef _ISP1760_CORE_H_
+#define _ISP1760_CORE_H_
+
+#include <linux/ioport.h>
+
+#include "isp1760-hcd.h"
+
+struct isp1760_device {
+	void __iomem *regs;
+
+	struct isp1760_hcd hcd;
+};
+
+int isp1760_register(struct resource *mem, int irq, unsigned long irqflags,
+		     struct device *dev, unsigned int devflags);
+void isp1760_unregister(struct device *dev);
+
+#endif
* Unmerged path drivers/usb/host/isp1760-hcd.c
* Unmerged path drivers/usb/host/isp1760-hcd.h
* Unmerged path drivers/usb/host/isp1760-if.c
