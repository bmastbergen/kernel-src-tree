mei: me: add io register tracing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit a0a927d06d79d59c55ae7ac0b2fd7f3c0ea3c14c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a0a927d0.failed

To make debugging a bit easier we add me register
access tracing
<debugfs>/tracing/events/mei/mei_reg_{read,write}

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit a0a927d06d79d59c55ae7ac0b2fd7f3c0ea3c14c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/hw-me.c
diff --cc drivers/misc/mei/hw-me.c
index 1707fa5ea02a,d3aef82a6c89..000000000000
--- a/drivers/misc/mei/hw-me.c
+++ b/drivers/misc/mei/hw-me.c
@@@ -70,11 -84,16 +72,20 @@@ static u32 mei_me_mecbrw_read(const str
   *
   * @dev: the device structure
   *
 - * Return: ME_CSR_HA register value (u32)
 + * returns ME_CSR_HA register value (u32)
   */
 -static inline u32 mei_me_mecsr_read(const struct mei_device *dev)
 +static inline u32 mei_me_mecsr_read(const struct mei_me_hw *hw)
  {
++<<<<<<< HEAD
 +	return mei_me_reg_read(hw, ME_CSR_HA);
++=======
+ 	u32 reg;
+ 
+ 	reg = mei_me_reg_read(to_me_hw(dev), ME_CSR_HA);
+ 	trace_mei_reg_read(dev->dev, "ME_CSR_HA", ME_CSR_HA, reg);
+ 
+ 	return reg;
++>>>>>>> a0a927d06d79 (mei: me: add io register tracing)
  }
  
  /**
@@@ -82,11 -101,28 +93,32 @@@
   *
   * @dev: the device structure
   *
 - * Return: H_CSR register value (u32)
 + * returns H_CSR register value (u32)
   */
 -static inline u32 mei_hcsr_read(const struct mei_device *dev)
 +static inline u32 mei_hcsr_read(const struct mei_me_hw *hw)
  {
++<<<<<<< HEAD
 +	return mei_me_reg_read(hw, H_CSR);
++=======
+ 	u32 reg;
+ 
+ 	reg = mei_me_reg_read(to_me_hw(dev), H_CSR);
+ 	trace_mei_reg_read(dev->dev, "H_CSR", H_CSR, reg);
+ 
+ 	return reg;
+ }
+ 
+ /**
+  * mei_hcsr_write - writes H_CSR register to the mei device
+  *
+  * @dev: the device structure
+  * @reg: new register value
+  */
+ static inline void mei_hcsr_write(struct mei_device *dev, u32 reg)
+ {
+ 	trace_mei_reg_write(dev->dev, "H_CSR", H_CSR, reg);
+ 	mei_me_reg_write(to_me_hw(dev), H_CSR, reg);
++>>>>>>> a0a927d06d79 (mei: me: add io register tracing)
  }
  
  /**
@@@ -476,8 -568,14 +508,18 @@@ static int mei_me_read_slots(struct mei
  static void mei_me_pg_enter(struct mei_device *dev)
  {
  	struct mei_me_hw *hw = to_me_hw(dev);
++<<<<<<< HEAD
 +	u32 reg = mei_me_reg_read(hw, H_HPG_CSR);
++=======
+ 	u32 reg;
+ 
+ 	reg = mei_me_reg_read(hw, H_HPG_CSR);
+ 	trace_mei_reg_read(dev->dev, "H_HPG_CSR", H_HPG_CSR, reg);
+ 
++>>>>>>> a0a927d06d79 (mei: me: add io register tracing)
  	reg |= H_HPG_CSR_PGI;
+ 
+ 	trace_mei_reg_write(dev->dev, "H_HPG_CSR", H_HPG_CSR, reg);
  	mei_me_reg_write(hw, H_HPG_CSR, reg);
  }
  
diff --git a/drivers/misc/mei/Makefile b/drivers/misc/mei/Makefile
index 8ebc6cda1373..518914a82b83 100644
--- a/drivers/misc/mei/Makefile
+++ b/drivers/misc/mei/Makefile
@@ -21,3 +21,6 @@ mei-me-objs += hw-me.o
 obj-$(CONFIG_INTEL_MEI_TXE) += mei-txe.o
 mei-txe-objs := pci-txe.o
 mei-txe-objs += hw-txe.o
+
+mei-$(CONFIG_EVENT_TRACING) += mei-trace.o
+CFLAGS_mei-trace.o = -I$(src)
* Unmerged path drivers/misc/mei/hw-me.c
diff --git a/drivers/misc/mei/mei-trace.c b/drivers/misc/mei/mei-trace.c
new file mode 100644
index 000000000000..388efb519138
--- /dev/null
+++ b/drivers/misc/mei/mei-trace.c
@@ -0,0 +1,25 @@
+/*
+ *
+ * Intel Management Engine Interface (Intel MEI) Linux driver
+ * Copyright (c) 2015, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+#include <linux/module.h>
+
+/* sparse doesn't like tracepoint macros */
+#ifndef __CHECKER__
+#define CREATE_TRACE_POINTS
+#include "mei-trace.h"
+
+EXPORT_TRACEPOINT_SYMBOL(mei_reg_read);
+EXPORT_TRACEPOINT_SYMBOL(mei_reg_write);
+#endif /* __CHECKER__ */
diff --git a/drivers/misc/mei/mei-trace.h b/drivers/misc/mei/mei-trace.h
new file mode 100644
index 000000000000..d5c38d15cdd9
--- /dev/null
+++ b/drivers/misc/mei/mei-trace.h
@@ -0,0 +1,74 @@
+/*
+ *
+ * Intel Management Engine Interface (Intel MEI) Linux driver
+ * Copyright (c) 2015, Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#if !defined(_MEI_TRACE_H_) || defined(TRACE_HEADER_MULTI_READ)
+#define _MEI_TRACE_H_
+
+#include <linux/stringify.h>
+#include <linux/types.h>
+#include <linux/tracepoint.h>
+
+#undef TRACE_SYSTEM
+
+#define TRACE_SYSTEM mei
+#define TRACE_SYSTEM_STRING __stringify(TRACE_SYSTEM)
+
+TRACE_EVENT(mei_reg_read,
+	TP_PROTO(const struct device *dev, const char *reg, u32 offs, u32 val),
+	TP_ARGS(dev, reg, offs, val),
+	TP_STRUCT__entry(
+		__string(dev, dev_name(dev))
+		__field(const char *, reg)
+		__field(u32, offs)
+		__field(u32, val)
+	),
+	TP_fast_assign(
+		__assign_str(dev, dev_name(dev))
+		__entry->reg  = reg;
+		__entry->offs = offs;
+		__entry->val = val;
+	),
+	TP_printk("[%s] read %s:[%#x] = %#x",
+		  __get_str(dev), __entry->reg, __entry->offs, __entry->val)
+);
+
+TRACE_EVENT(mei_reg_write,
+	TP_PROTO(const struct device *dev, const char *reg, u32 offs, u32 val),
+	TP_ARGS(dev, reg, offs, val),
+	TP_STRUCT__entry(
+		__string(dev, dev_name(dev))
+		__field(const char *, reg)
+		__field(u32, offs)
+		__field(u32, val)
+	),
+	TP_fast_assign(
+		__assign_str(dev, dev_name(dev))
+		__entry->reg = reg;
+		__entry->offs = offs;
+		__entry->val = val;
+	),
+	TP_printk("[%s] write %s[%#x] = %#x)",
+		  __get_str(dev), __entry->reg,  __entry->offs, __entry->val)
+);
+
+#endif /* _MEI_TRACE_H_ */
+
+/* This part must be outside protection */
+#undef TRACE_INCLUDE_PATH
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE mei-trace
+#include <trace/define_trace.h>
