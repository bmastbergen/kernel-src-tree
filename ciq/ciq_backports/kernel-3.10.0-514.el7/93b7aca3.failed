lib/idr.c: fix out-of-bounds pointer dereference

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [lib] idr: fix out-of-bounds pointer dereference (Jerome Marchand) [1285333]
Rebuild_FUZZ: 93.33%
commit-author Andrey Ryabinin <a.ryabinin@samsung.com>
commit 93b7aca35dd7bf0c3ba7ea0542b556bcfdb28e76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/93b7aca3.failed

I'm working on address sanitizer project for kernel.  Recently we
started experiments with stack instrumentation, to detect out-of-bounds
read/write bugs on stack.

Just after booting I've hit out-of-bounds read on stack in idr_for_each
(and in __idr_remove_all as well):

	struct idr_layer **paa = &pa[0];

	while (id >= 0 && id <= max) {
		...
		while (n < fls(id)) {
			n += IDR_BITS;
			p = *--paa; <--- here we are reading pa[-1] value.
		}
	}

Despite the fact that after this dereference we are exiting out of loop
and never use p, such behaviour is undefined and should be avoided.

Fix this by moving pointer derference to the beggining of the loop,
right before we will use it.

	Signed-off-by: Andrey Ryabinin <a.ryabinin@samsung.com>
	Reviewed-by: Lai Jiangshan <laijs@cn.fujitsu.com>
	Cc: Tejun Heo <tj@kernel.org>
	Cc: Alexey Preobrazhensky <preobr@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Konstantin Khlebnikov <koct9i@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 93b7aca35dd7bf0c3ba7ea0542b556bcfdb28e76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/idr.c
diff --cc lib/idr.c
index 4ce22275f3e8,50be3fa9b657..000000000000
--- a/lib/idr.c
+++ b/lib/idr.c
@@@ -618,8 -590,8 +618,13 @@@ void __idr_remove_all(struct idr *idp
  	struct idr_layer **paa = &pa[0];
  
  	n = idp->layers * IDR_BITS;
++<<<<<<< HEAD
 +	p = idp->top;
 +	rcu_assign_pointer(idp->top, NULL);
++=======
+ 	*paa = idp->top;
+ 	RCU_INIT_POINTER(idp->top, NULL);
++>>>>>>> 93b7aca35dd7 (lib/idr.c: fix out-of-bounds pointer dereference)
  	max = idr_max(idp->layers);
  
  	id = 0;
* Unmerged path lib/idr.c
