iommu: Make sure a device is always attached to a domain

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] Make sure a device is always attached to a domain (Myron Stowe) [1050021]
Rebuild_FUZZ: 93.33%
commit-author Joerg Roedel <jroedel@suse.de>
commit e39cb8a3aa988a74433a3f26443b454cca033651
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e39cb8a3.failed

Make use of the default domain and re-attach a device to it
when it is detached from another domain. Also enforce that a
device has to be in the default domain before it can be
attached to a different domain.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit e39cb8a3aa988a74433a3f26443b454cca033651)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/iommu.c
diff --cc drivers/iommu/iommu.c
index 8dda05d5148c,7bce522c2367..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -47,6 -51,8 +47,11 @@@ struct iommu_group 
  	void (*iommu_data_release)(void *iommu_data);
  	char *name;
  	int id;
++<<<<<<< HEAD
++=======
+ 	struct iommu_domain *default_domain;
+ 	struct iommu_domain *domain;
++>>>>>>> e39cb8a3aa98 (iommu: Make sure a device is always attached to a domain)
  };
  
  struct iommu_device {
@@@ -71,6 -77,15 +76,18 @@@ struct iommu_group_attribute iommu_grou
  #define to_iommu_group(_kobj)		\
  	container_of(_kobj, struct iommu_group, kobj)
  
++<<<<<<< HEAD
++=======
+ static struct iommu_domain *__iommu_domain_alloc(struct bus_type *bus,
+ 						 unsigned type);
+ static int __iommu_attach_device(struct iommu_domain *domain,
+ 				 struct device *dev);
+ static int __iommu_attach_group(struct iommu_domain *domain,
+ 				struct iommu_group *group);
+ static void __iommu_detach_group(struct iommu_domain *domain,
+ 				 struct iommu_group *group);
+ 
++>>>>>>> e39cb8a3aa98 (iommu: Make sure a device is always attached to a domain)
  static ssize_t iommu_group_attr_show(struct kobject *kobj,
  				     struct attribute *__attr, char *buf)
  {
@@@ -708,7 -739,18 +738,22 @@@ static struct iommu_group *iommu_group_
  		return group;
  
  	/* No shared group found, allocate new */
++<<<<<<< HEAD
 +	return iommu_group_alloc();
++=======
+ 	group = iommu_group_alloc();
+ 	if (group) {
+ 		/*
+ 		 * Try to allocate a default domain - needs support from the
+ 		 * IOMMU driver.
+ 		 */
+ 		group->default_domain = __iommu_domain_alloc(pdev->dev.bus,
+ 							     IOMMU_DOMAIN_DMA);
+ 		group->domain = group->default_domain;
+ 	}
+ 
+ 	return group;
++>>>>>>> e39cb8a3aa98 (iommu: Make sure a device is always attached to a domain)
  }
  
  /**
* Unmerged path drivers/iommu/iommu.c
