IB/qib: Remove qib_query_qp function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Harish Chegondi <harish.chegondi@intel.com>
commit 034a3e7079aabc028783755d0ea1406fe9453d52
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/034a3e70.failed

Rely on rvt_query_qp function defined in rdmavt

	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Harish Chegondi <harish.chegondi@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 034a3e7079aabc028783755d0ea1406fe9453d52)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/qib/qib_qp.c
#	drivers/infiniband/hw/qib/qib_verbs.c
#	drivers/infiniband/hw/qib/qib_verbs.h
diff --cc drivers/infiniband/hw/qib/qib_qp.c
index cf1dd6e9d434,ce9002f6e7a2..000000000000
--- a/drivers/infiniband/hw/qib/qib_qp.c
+++ b/drivers/infiniband/hw/qib/qib_qp.c
@@@ -857,56 -804,6 +857,59 @@@ bail
  	return ret;
  }
  
++<<<<<<< HEAD
 +int qib_query_qp(struct ib_qp *ibqp, struct ib_qp_attr *attr,
 +		 int attr_mask, struct ib_qp_init_attr *init_attr)
 +{
 +	struct qib_qp *qp = to_iqp(ibqp);
 +
 +	attr->qp_state = qp->state;
 +	attr->cur_qp_state = attr->qp_state;
 +	attr->path_mtu = qp->path_mtu;
 +	attr->path_mig_state = qp->s_mig_state;
 +	attr->qkey = qp->qkey;
 +	attr->rq_psn = qp->r_psn & QIB_PSN_MASK;
 +	attr->sq_psn = qp->s_next_psn & QIB_PSN_MASK;
 +	attr->dest_qp_num = qp->remote_qpn;
 +	attr->qp_access_flags = qp->qp_access_flags;
 +	attr->cap.max_send_wr = qp->s_size - 1;
 +	attr->cap.max_recv_wr = qp->ibqp.srq ? 0 : qp->r_rq.size - 1;
 +	attr->cap.max_send_sge = qp->s_max_sge;
 +	attr->cap.max_recv_sge = qp->r_rq.max_sge;
 +	attr->cap.max_inline_data = 0;
 +	attr->ah_attr = qp->remote_ah_attr;
 +	attr->alt_ah_attr = qp->alt_ah_attr;
 +	attr->pkey_index = qp->s_pkey_index;
 +	attr->alt_pkey_index = qp->s_alt_pkey_index;
 +	attr->en_sqd_async_notify = 0;
 +	attr->sq_draining = qp->s_draining;
 +	attr->max_rd_atomic = qp->s_max_rd_atomic;
 +	attr->max_dest_rd_atomic = qp->r_max_rd_atomic;
 +	attr->min_rnr_timer = qp->r_min_rnr_timer;
 +	attr->port_num = qp->port_num;
 +	attr->timeout = qp->timeout;
 +	attr->retry_cnt = qp->s_retry_cnt;
 +	attr->rnr_retry = qp->s_rnr_retry_cnt;
 +	attr->alt_port_num = qp->alt_ah_attr.port_num;
 +	attr->alt_timeout = qp->alt_timeout;
 +
 +	init_attr->event_handler = qp->ibqp.event_handler;
 +	init_attr->qp_context = qp->ibqp.qp_context;
 +	init_attr->send_cq = qp->ibqp.send_cq;
 +	init_attr->recv_cq = qp->ibqp.recv_cq;
 +	init_attr->srq = qp->ibqp.srq;
 +	init_attr->cap = attr->cap;
 +	if (qp->s_flags & QIB_S_SIGNAL_REQ_WR)
 +		init_attr->sq_sig_type = IB_SIGNAL_REQ_WR;
 +	else
 +		init_attr->sq_sig_type = IB_SIGNAL_ALL_WR;
 +	init_attr->qp_type = qp->ibqp.qp_type;
 +	init_attr->port_num = qp->port_num;
 +	return 0;
 +}
 +
++=======
++>>>>>>> 034a3e7079aa (IB/qib: Remove qib_query_qp function)
  /**
   * qib_compute_aeth - compute the AETH (syndrome + MSN)
   * @qp: the queue pair to compute the AETH for
diff --cc drivers/infiniband/hw/qib/qib_verbs.c
index c4417a1f33be,8b97ca1787f6..000000000000
--- a/drivers/infiniband/hw/qib/qib_verbs.c
+++ b/drivers/infiniband/hw/qib/qib_verbs.c
@@@ -2244,33 -1758,31 +2244,33 @@@ int qib_register_ib_device(struct qib_d
  	ibdev->modify_srq = qib_modify_srq;
  	ibdev->query_srq = qib_query_srq;
  	ibdev->destroy_srq = qib_destroy_srq;
 -	ibdev->create_qp = NULL;
 +	ibdev->create_qp = qib_create_qp;
  	ibdev->modify_qp = qib_modify_qp;
- 	ibdev->query_qp = qib_query_qp;
+ 	ibdev->query_qp = NULL;
  	ibdev->destroy_qp = qib_destroy_qp;
 -	ibdev->post_send = NULL;
 -	ibdev->post_recv = NULL;
 +	ibdev->post_send = qib_post_send;
 +	ibdev->post_recv = qib_post_receive;
  	ibdev->post_srq_recv = qib_post_srq_receive;
 -	ibdev->create_cq = NULL;
 -	ibdev->destroy_cq = NULL;
 -	ibdev->resize_cq = NULL;
 -	ibdev->poll_cq = NULL;
 -	ibdev->req_notify_cq = NULL;
 -	ibdev->get_dma_mr = NULL;
 -	ibdev->reg_user_mr = NULL;
 -	ibdev->dereg_mr = NULL;
 -	ibdev->alloc_mr = NULL;
 -	ibdev->map_mr_sg = NULL;
 -	ibdev->alloc_fmr = NULL;
 -	ibdev->map_phys_fmr = NULL;
 -	ibdev->unmap_fmr = NULL;
 -	ibdev->dealloc_fmr = NULL;
 -	ibdev->attach_mcast = NULL;
 -	ibdev->detach_mcast = NULL;
 +	ibdev->create_cq = qib_create_cq;
 +	ibdev->destroy_cq = qib_destroy_cq;
 +	ibdev->resize_cq = qib_resize_cq;
 +	ibdev->poll_cq = qib_poll_cq;
 +	ibdev->req_notify_cq = qib_req_notify_cq;
 +	ibdev->get_dma_mr = qib_get_dma_mr;
 +	ibdev->reg_phys_mr = qib_reg_phys_mr;
 +	ibdev->reg_user_mr = qib_reg_user_mr;
 +	ibdev->dereg_mr = qib_dereg_mr;
 +	ibdev->alloc_mr = qib_alloc_mr;
 +	ibdev->alloc_fast_reg_page_list = qib_alloc_fast_reg_page_list;
 +	ibdev->free_fast_reg_page_list = qib_free_fast_reg_page_list;
 +	ibdev->alloc_fmr = qib_alloc_fmr;
 +	ibdev->map_phys_fmr = qib_map_phys_fmr;
 +	ibdev->unmap_fmr = qib_unmap_fmr;
 +	ibdev->dealloc_fmr = qib_dealloc_fmr;
 +	ibdev->attach_mcast = qib_multicast_attach;
 +	ibdev->detach_mcast = qib_multicast_detach;
  	ibdev->process_mad = qib_process_mad;
 -	ibdev->mmap = NULL;
 +	ibdev->mmap = qib_mmap;
  	ibdev->dma_ops = NULL;
  	ibdev->get_port_immutable = qib_port_immutable;
  
@@@ -2283,11 -1795,43 +2283,41 @@@
  	dd->verbs_dev.rdi.driver_f.port_callback = qib_create_port_files;
  	dd->verbs_dev.rdi.driver_f.get_card_name = qib_get_card_name;
  	dd->verbs_dev.rdi.driver_f.get_pci_dev = qib_get_pci_dev;
 -	dd->verbs_dev.rdi.driver_f.check_ah = qib_check_ah;
 -	dd->verbs_dev.rdi.driver_f.notify_new_ah = qib_notify_new_ah;
 -	dd->verbs_dev.rdi.driver_f.alloc_qpn = alloc_qpn;
 -	dd->verbs_dev.rdi.driver_f.qp_priv_alloc = qp_priv_alloc;
 -	dd->verbs_dev.rdi.driver_f.qp_priv_free = qp_priv_free;
 -	dd->verbs_dev.rdi.driver_f.free_all_qps = qib_free_all_qps;
 -	dd->verbs_dev.rdi.driver_f.notify_qp_reset = notify_qp_reset;
 -	dd->verbs_dev.rdi.driver_f.do_send = qib_do_send;
 -	dd->verbs_dev.rdi.driver_f.schedule_send = qib_schedule_send;
 +	dd->verbs_dev.rdi.dparms.props.max_pd = ib_qib_max_pds;
 +	dd->verbs_dev.rdi.flags = (RVT_FLAG_MR_INIT_DRIVER |
 +				   RVT_FLAG_QP_INIT_DRIVER |
 +				   RVT_FLAG_CQ_INIT_DRIVER);
  
++<<<<<<< HEAD
++=======
+ 	dd->verbs_dev.rdi.flags = 0;
+ 
+ 	dd->verbs_dev.rdi.dparms.lkey_table_size = qib_lkey_table_size;
+ 	dd->verbs_dev.rdi.dparms.qp_table_size = ib_qib_qp_table_size;
+ 	dd->verbs_dev.rdi.dparms.qpn_start = 1;
+ 	dd->verbs_dev.rdi.dparms.qpn_res_start = QIB_KD_QP;
+ 	dd->verbs_dev.rdi.dparms.qpn_res_end = QIB_KD_QP; /* Reserve one QP */
+ 	dd->verbs_dev.rdi.dparms.qpn_inc = 1;
+ 	dd->verbs_dev.rdi.dparms.qos_shift = 1;
+ 	dd->verbs_dev.rdi.dparms.psn_mask = QIB_PSN_MASK;
+ 	dd->verbs_dev.rdi.dparms.nports = dd->num_pports;
+ 	dd->verbs_dev.rdi.dparms.npkeys = qib_get_npkeys(dd);
+ 	dd->verbs_dev.rdi.dparms.node = dd->assigned_node_id;
+ 	snprintf(dd->verbs_dev.rdi.dparms.cq_name,
+ 		 sizeof(dd->verbs_dev.rdi.dparms.cq_name),
+ 		 "qib_cq%d", dd->unit);
+ 
+ 	qib_fill_device_attr(dd);
+ 
+ 	ppd = dd->pport;
+ 	for (i = 0; i < dd->num_pports; i++, ppd++) {
+ 		ctxt = ppd->hw_pidx;
+ 		rvt_init_port(&dd->verbs_dev.rdi,
+ 			      &ppd->ibport_data.rvp,
+ 			      i,
+ 			      dd->rcd[ctxt]->pkeys);
+ 	}
++>>>>>>> 034a3e7079aa (IB/qib: Remove qib_query_qp function)
  
  	ret = rvt_register_device(&dd->verbs_dev.rdi);
  	if (ret)
diff --cc drivers/infiniband/hw/qib/qib_verbs.h
index ca366073af4f,34f778424f61..000000000000
--- a/drivers/infiniband/hw/qib/qib_verbs.h
+++ b/drivers/infiniband/hw/qib/qib_verbs.h
@@@ -933,15 -369,15 +933,27 @@@ int qib_error_qp(struct qib_qp *qp, enu
  
  int qib_modify_qp(struct ib_qp *ibqp, struct ib_qp_attr *attr,
  		  int attr_mask, struct ib_udata *udata);
++<<<<<<< HEAD
 +
 +int qib_query_qp(struct ib_qp *ibqp, struct ib_qp_attr *attr,
 +		 int attr_mask, struct ib_qp_init_attr *init_attr);
 +
 +unsigned qib_free_all_qps(struct qib_devdata *dd);
 +
 +void qib_init_qpn_table(struct qib_devdata *dd, struct qib_qpn_table *qpt);
 +
 +void qib_free_qpn_table(struct qib_qpn_table *qpt);
++=======
+ /*
+  * Functions provided by qib driver for rdmavt to use
+  */
+ unsigned qib_free_all_qps(struct rvt_dev_info *rdi);
+ void *qp_priv_alloc(struct rvt_dev_info *rdi, struct rvt_qp *qp, gfp_t gfp);
+ void qp_priv_free(struct rvt_dev_info *rdi, struct rvt_qp *qp);
+ void notify_qp_reset(struct rvt_qp *qp);
+ int alloc_qpn(struct rvt_dev_info *rdi, struct rvt_qpn_table *qpt,
+ 	      enum ib_qp_type type, u8 port, gfp_t gfp);
++>>>>>>> 034a3e7079aa (IB/qib: Remove qib_query_qp function)
  
  #ifdef CONFIG_DEBUG_FS
  
* Unmerged path drivers/infiniband/hw/qib/qib_qp.c
* Unmerged path drivers/infiniband/hw/qib/qib_verbs.c
* Unmerged path drivers/infiniband/hw/qib/qib_verbs.h
