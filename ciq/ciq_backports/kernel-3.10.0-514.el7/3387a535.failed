x86/asm: Create stack frames in rwsem functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] asm: Create stack frames in rwsem functions (Josh Poimboeuf) [1320250]
Rebuild_FUZZ: 95.56%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 3387a535ce629906d849864ef6a3c3437a645cb5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3387a535.failed

rwsem.S has several callable non-leaf functions which don't honor
CONFIG_FRAME_POINTER, which can result in bad stack traces.

Create stack frames for them when CONFIG_FRAME_POINTER is enabled.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Chris J Arges <chris.j.arges@canonical.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: live-patching@vger.kernel.org
Link: http://lkml.kernel.org/r/ad0932bbead975b15f9578e4f2cf2ee5961eb840.1453405861.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 3387a535ce629906d849864ef6a3c3437a645cb5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/lib/rwsem.S
diff --cc arch/x86/lib/rwsem.S
index 5dff5f042468,be110efa0096..000000000000
--- a/arch/x86/lib/rwsem.S
+++ b/arch/x86/lib/rwsem.S
@@@ -15,7 -15,7 +15,11 @@@
  
  #include <linux/linkage.h>
  #include <asm/alternative-asm.h>
++<<<<<<< HEAD
 +#include <asm/dwarf2.h>
++=======
+ #include <asm/frame.h>
++>>>>>>> 3387a535ce62 (x86/asm: Create stack frames in rwsem functions)
  
  #define __ASM_HALF_REG(reg)	__ASM_SEL(reg, e##reg)
  #define __ASM_HALF_SIZE(inst)	__ASM_SEL(inst##w, inst##l)
@@@ -85,31 -85,29 +89,45 @@@
  
  /* Fix up special calling conventions */
  ENTRY(call_rwsem_down_read_failed)
++<<<<<<< HEAD
 +	CFI_STARTPROC
++=======
+ 	FRAME_BEGIN
++>>>>>>> 3387a535ce62 (x86/asm: Create stack frames in rwsem functions)
  	save_common_regs
 -	__ASM_SIZE(push,) %__ASM_REG(dx)
 +	__ASM_SIZE(push,_cfi) %__ASM_REG(dx)
 +	CFI_REL_OFFSET __ASM_REG(dx), 0
  	movq %rax,%rdi
  	call rwsem_down_read_failed
 -	__ASM_SIZE(pop,) %__ASM_REG(dx)
 +	__ASM_SIZE(pop,_cfi) %__ASM_REG(dx)
 +	CFI_RESTORE __ASM_REG(dx)
  	restore_common_regs
+ 	FRAME_END
  	ret
 +	CFI_ENDPROC
  ENDPROC(call_rwsem_down_read_failed)
  
  ENTRY(call_rwsem_down_write_failed)
++<<<<<<< HEAD
 +	CFI_STARTPROC
++=======
+ 	FRAME_BEGIN
++>>>>>>> 3387a535ce62 (x86/asm: Create stack frames in rwsem functions)
  	save_common_regs
  	movq %rax,%rdi
  	call rwsem_down_write_failed
  	restore_common_regs
+ 	FRAME_END
  	ret
 +	CFI_ENDPROC
  ENDPROC(call_rwsem_down_write_failed)
  
  ENTRY(call_rwsem_wake)
++<<<<<<< HEAD
 +	CFI_STARTPROC
++=======
+ 	FRAME_BEGIN
++>>>>>>> 3387a535ce62 (x86/asm: Create stack frames in rwsem functions)
  	/* do nothing if still outstanding active readers */
  	__ASM_HALF_SIZE(dec) %__ASM_HALF_REG(dx)
  	jnz 1f
@@@ -117,20 -115,18 +135,30 @@@
  	movq %rax,%rdi
  	call rwsem_wake
  	restore_common_regs
++<<<<<<< HEAD
 +1:	ret
 +	CFI_ENDPROC
 +ENDPROC(call_rwsem_wake)
 +
 +ENTRY(call_rwsem_downgrade_wake)
 +	CFI_STARTPROC
++=======
+ 1:	FRAME_END
+ 	ret
+ ENDPROC(call_rwsem_wake)
+ 
+ ENTRY(call_rwsem_downgrade_wake)
+ 	FRAME_BEGIN
++>>>>>>> 3387a535ce62 (x86/asm: Create stack frames in rwsem functions)
  	save_common_regs
 -	__ASM_SIZE(push,) %__ASM_REG(dx)
 +	__ASM_SIZE(push,_cfi) %__ASM_REG(dx)
 +	CFI_REL_OFFSET __ASM_REG(dx), 0
  	movq %rax,%rdi
  	call rwsem_downgrade_wake
 -	__ASM_SIZE(pop,) %__ASM_REG(dx)
 +	__ASM_SIZE(pop,_cfi) %__ASM_REG(dx)
 +	CFI_RESTORE __ASM_REG(dx)
  	restore_common_regs
+ 	FRAME_END
  	ret
 +	CFI_ENDPROC
  ENDPROC(call_rwsem_downgrade_wake)
* Unmerged path arch/x86/lib/rwsem.S
