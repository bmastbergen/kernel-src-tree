nfsd: Pass filehandle to nfs4_preprocess_stateid_op()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Anna Schumaker <Anna.Schumaker@netapp.com>
commit aa0d6aed45ff48bd41439211f2bda1d54585aba3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/aa0d6aed.failed

This will be needed so COPY can look up the saved_fh in addition to the
current_fh.

	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Acked-by: J. Bruce Fields <bfields@fieldses.org>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit aa0d6aed45ff48bd41439211f2bda1d54585aba3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4proc.c
#	fs/nfsd/nfs4state.c
#	fs/nfsd/state.h
diff --cc fs/nfsd/nfs4proc.c
index 6f4256ca51df,3ba10a3534f1..000000000000
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@@ -772,12 -771,13 +772,19 @@@ nfsd4_read(struct svc_rqst *rqstp, stru
  	 * the client wants us to do more in this compound:
  	 */
  	if (!nfsd4_last_compound_op(rqstp))
 -		clear_bit(RQ_SPLICE_OK, &rqstp->rq_flags);
 +		rqstp->rq_splice_ok = false;
  
  	/* check stateid */
++<<<<<<< HEAD
 +	if ((status = nfs4_preprocess_stateid_op(SVC_NET(rqstp),
 +						 cstate, &read->rd_stateid,
 +						 RD_STATE, &read->rd_filp))) {
++=======
+ 	status = nfs4_preprocess_stateid_op(rqstp, cstate, &cstate->current_fh,
+ 					&read->rd_stateid, RD_STATE,
+ 					&read->rd_filp, &read->rd_tmp_file);
+ 	if (status) {
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  		dprintk("NFSD: nfsd4_read: couldn't process stateid!\n");
  		goto out;
  	}
@@@ -921,8 -921,9 +928,14 @@@ nfsd4_setattr(struct svc_rqst *rqstp, s
  	int err;
  
  	if (setattr->sa_iattr.ia_valid & ATTR_SIZE) {
++<<<<<<< HEAD
 +		status = nfs4_preprocess_stateid_op(SVC_NET(rqstp), cstate,
 +			&setattr->sa_stateid, WR_STATE, NULL);
++=======
+ 		status = nfs4_preprocess_stateid_op(rqstp, cstate,
+ 				&cstate->current_fh, &setattr->sa_stateid,
+ 				WR_STATE, NULL, NULL);
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  		if (status) {
  			dprintk("NFSD: nfsd4_setattr: couldn't process stateid!\n");
  			return status;
@@@ -988,8 -987,8 +1001,13 @@@ nfsd4_write(struct svc_rqst *rqstp, str
  	if (write->wr_offset >= OFFSET_MAX)
  		return nfserr_inval;
  
++<<<<<<< HEAD
 +	status = nfs4_preprocess_stateid_op(SVC_NET(rqstp),
 +					cstate, stateid, WR_STATE, &filp);
++=======
+ 	status = nfs4_preprocess_stateid_op(rqstp, cstate, &cstate->current_fh,
+ 						stateid, WR_STATE, &filp, NULL);
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  	if (status) {
  		dprintk("NFSD: nfsd4_write: couldn't process stateid!\n");
  		return status;
@@@ -1020,9 -1018,9 +1038,13 @@@ nfsd4_fallocate(struct svc_rqst *rqstp
  	__be32 status = nfserr_notsupp;
  	struct file *file;
  
++<<<<<<< HEAD
 +	status = nfs4_preprocess_stateid_op(SVC_NET(rqstp), cstate,
++=======
+ 	status = nfs4_preprocess_stateid_op(rqstp, cstate, &cstate->current_fh,
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  					    &fallocate->falloc_stateid,
 -					    WR_STATE, &file, NULL);
 +					    WR_STATE, &file);
  	if (status != nfs_ok) {
  		dprintk("NFSD: nfsd4_fallocate: couldn't process stateid!\n");
  		return status;
@@@ -1061,9 -1057,9 +1083,13 @@@ nfsd4_seek(struct svc_rqst *rqstp, stru
  	__be32 status;
  	struct file *file;
  
++<<<<<<< HEAD
 +	status = nfs4_preprocess_stateid_op(SVC_NET(rqstp), cstate,
++=======
+ 	status = nfs4_preprocess_stateid_op(rqstp, cstate, &cstate->current_fh,
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  					    &seek->seek_stateid,
 -					    RD_STATE, &file, NULL);
 +					    RD_STATE, &file);
  	if (status) {
  		dprintk("NFSD: nfsd4_seek: couldn't process stateid!\n");
  		return status;
diff --cc fs/nfsd/nfs4state.c
index fa4328191a07,df5dba687265..000000000000
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@@ -4515,20 -4728,82 +4515,29 @@@ nfsd4_lookup_stateid(struct nfsd4_compo
  	return nfs_ok;
  }
  
 -static struct file *
 -nfs4_find_file(struct nfs4_stid *s, int flags)
 -{
 -	if (!s)
 -		return NULL;
 -
 -	switch (s->sc_type) {
 -	case NFS4_DELEG_STID:
 -		if (WARN_ON_ONCE(!s->sc_file->fi_deleg_file))
 -			return NULL;
 -		return get_file(s->sc_file->fi_deleg_file);
 -	case NFS4_OPEN_STID:
 -	case NFS4_LOCK_STID:
 -		if (flags & RD_STATE)
 -			return find_readable_file(s->sc_file);
 -		else
 -			return find_writeable_file(s->sc_file);
 -		break;
 -	}
 -
 -	return NULL;
 -}
 -
 -static __be32
 -nfs4_check_olstateid(struct svc_fh *fhp, struct nfs4_ol_stateid *ols, int flags)
 -{
 -	__be32 status;
 -
 -	status = nfsd4_check_openowner_confirmed(ols);
 -	if (status)
 -		return status;
 -	return nfs4_check_openmode(ols, flags);
 -}
 -
 -static __be32
 -nfs4_check_file(struct svc_rqst *rqstp, struct svc_fh *fhp, struct nfs4_stid *s,
 -		struct file **filpp, bool *tmp_file, int flags)
 -{
 -	int acc = (flags & RD_STATE) ? NFSD_MAY_READ : NFSD_MAY_WRITE;
 -	struct file *file;
 -	__be32 status;
 -
 -	file = nfs4_find_file(s, flags);
 -	if (file) {
 -		status = nfsd_permission(rqstp, fhp->fh_export, fhp->fh_dentry,
 -				acc | NFSD_MAY_OWNER_OVERRIDE);
 -		if (status) {
 -			fput(file);
 -			return status;
 -		}
 -
 -		*filpp = file;
 -	} else {
 -		status = nfsd_open(rqstp, fhp, S_IFREG, acc, filpp);
 -		if (status)
 -			return status;
 -
 -		if (tmp_file)
 -			*tmp_file = true;
 -	}
 -
 -	return 0;
 -}
 -
  /*
 - * Checks for stateid operations
 - */
 +* Checks for stateid operations
 +*/
  __be32
++<<<<<<< HEAD
 +nfs4_preprocess_stateid_op(struct net *net, struct nfsd4_compound_state *cstate,
 +			   stateid_t *stateid, int flags, struct file **filpp)
 +{
 +	struct nfs4_stid *s;
 +	struct nfs4_ol_stateid *stp = NULL;
 +	struct nfs4_delegation *dp = NULL;
 +	struct svc_fh *current_fh = &cstate->current_fh;
 +	struct inode *ino = current_fh->fh_dentry->d_inode;
++=======
+ nfs4_preprocess_stateid_op(struct svc_rqst *rqstp,
+ 		struct nfsd4_compound_state *cstate, struct svc_fh *fhp,
+ 		stateid_t *stateid, int flags, struct file **filpp, bool *tmp_file)
+ {
+ 	struct inode *ino = d_inode(fhp->fh_dentry);
+ 	struct net *net = SVC_NET(rqstp);
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  	struct nfsd_net *nn = net_generic(net, nfsd_net_id);
 -	struct nfs4_stid *s = NULL;
 +	struct file *file = NULL;
  	__be32 status;
  
  	if (filpp)
diff --cc fs/nfsd/state.h
index c2f84daa044b,99432b7ecb9c..000000000000
--- a/fs/nfsd/state.h
+++ b/fs/nfsd/state.h
@@@ -564,9 -577,9 +564,15 @@@ enum nfsd4_cb_op 
  struct nfsd4_compound_state;
  struct nfsd_net;
  
++<<<<<<< HEAD
 +extern __be32 nfs4_preprocess_stateid_op(struct net *net,
 +		struct nfsd4_compound_state *cstate,
 +		stateid_t *stateid, int flags, struct file **filp);
++=======
+ extern __be32 nfs4_preprocess_stateid_op(struct svc_rqst *rqstp,
+ 		struct nfsd4_compound_state *cstate, struct svc_fh *fhp,
+ 		stateid_t *stateid, int flags, struct file **filp, bool *tmp_file);
++>>>>>>> aa0d6aed45ff (nfsd: Pass filehandle to nfs4_preprocess_stateid_op())
  __be32 nfsd4_lookup_stateid(struct nfsd4_compound_state *cstate,
  		     stateid_t *stateid, unsigned char typemask,
  		     struct nfs4_stid **s, struct nfsd_net *nn);
* Unmerged path fs/nfsd/nfs4proc.c
* Unmerged path fs/nfsd/nfs4state.c
* Unmerged path fs/nfsd/state.h
