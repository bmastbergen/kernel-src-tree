udp: properly support MSG_PEEK with truncated buffers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 197c949e7798fbf28cfadc69d9ca0c2abbf93191
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/197c949e.failed

Backport of this upstream commit into stable kernels :
89c22d8c3b27 ("net: Fix skb csum races when peeking")
exposed a bug in udp stack vs MSG_PEEK support, when user provides
a buffer smaller than skb payload.

In this case,
skb_copy_and_csum_datagram_iovec(skb, sizeof(struct udphdr),
                                 msg->msg_iov);
returns -EFAULT.

This bug does not happen in upstream kernels since Al Viro did a great
job to replace this into :
skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg);
This variant is safe vs short buffers.

For the time being, instead reverting Herbert Xu patch and add back
skb->ip_summed invalid changes, simply store the result of
udp_lib_checksum_complete() so that we avoid computing the checksum a
second time, and avoid the problematic
skb_copy_and_csum_datagram_iovec() call.

This patch can be applied on recent kernels as it avoids a double
checksumming, then backported to stable kernels as a bug fix.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 197c949e7798fbf28cfadc69d9ca0c2abbf93191)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/udp.c
#	net/ipv6/udp.c
diff --cc net/ipv4/udp.c
index 7c7368a4440c,ac14ae44390d..000000000000
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@@ -1290,13 -1302,12 +1292,19 @@@ try_again
  			goto csum_copy_err;
  	}
  
++<<<<<<< HEAD
 +	if (skb_csum_unnecessary(skb))
 +		err = skb_copy_datagram_iovec(skb, sizeof(struct udphdr),
 +					      msg->msg_iov, copied);
++=======
+ 	if (checksum_valid || skb_csum_unnecessary(skb))
+ 		err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),
+ 					    msg, copied);
++>>>>>>> 197c949e7798 (udp: properly support MSG_PEEK with truncated buffers)
  	else {
 -		err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),
 -						     msg);
 +		err = skb_copy_and_csum_datagram_iovec(skb,
 +						       sizeof(struct udphdr),
 +						       msg->msg_iov, copied);
  
  		if (err == -EINVAL)
  			goto csum_copy_err;
diff --cc net/ipv6/udp.c
index ed48f377d6aa,00775ee27d86..000000000000
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@@ -424,12 -439,11 +426,18 @@@ try_again
  			goto csum_copy_err;
  	}
  
++<<<<<<< HEAD
 +	if (skb_csum_unnecessary(skb))
 +		err = skb_copy_datagram_iovec(skb, sizeof(struct udphdr),
 +					      msg->msg_iov, copied);
++=======
+ 	if (checksum_valid || skb_csum_unnecessary(skb))
+ 		err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),
+ 					    msg, copied);
++>>>>>>> 197c949e7798 (udp: properly support MSG_PEEK with truncated buffers)
  	else {
 -		err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg);
 +		err = skb_copy_and_csum_datagram_iovec(skb, sizeof(struct udphdr),
 +						       msg->msg_iov, copied);
  		if (err == -EINVAL)
  			goto csum_copy_err;
  	}
* Unmerged path net/ipv4/udp.c
* Unmerged path net/ipv6/udp.c
