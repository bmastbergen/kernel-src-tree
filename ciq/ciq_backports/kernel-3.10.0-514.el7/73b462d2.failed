GFS2: Eliminate parameter non_block on gfs2_inode_lookup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bob Peterson <rpeterso@redhat.com>
commit 73b462d2808d7cbca4d7886cf6aaed850640e6cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/73b462d2.failed

Now that we're not filtering out I_FREEING inodes from our lookups
anymore, we can eliminate the non_block parameter from the lookup
function.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Acked-by: Steven Whitehouse <swhiteho@redhat.com>
(cherry picked from commit 73b462d2808d7cbca4d7886cf6aaed850640e6cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/dir.c
diff --cc fs/gfs2/dir.c
index 68c8b73800ed,4a01f30e9995..000000000000
--- a/fs/gfs2/dir.c
+++ b/fs/gfs2/dir.c
@@@ -1626,7 -1660,10 +1626,14 @@@ struct inode *gfs2_dir_search(struct in
  		brelse(bh);
  		if (fail_on_exist)
  			return ERR_PTR(-EEXIST);
++<<<<<<< HEAD
 +		return gfs2_inode_lookup(dir->i_sb, dtype, addr, formal_ino, 0);
++=======
+ 		inode = gfs2_inode_lookup(dir->i_sb, dtype, addr, formal_ino);
+ 		if (!IS_ERR(inode))
+ 			GFS2_I(inode)->i_rahead = rahead;
+ 		return inode;
++>>>>>>> 73b462d2808d (GFS2: Eliminate parameter non_block on gfs2_inode_lookup)
  	}
  	return ERR_PTR(-ENOENT);
  }
* Unmerged path fs/gfs2/dir.c
diff --git a/fs/gfs2/inode.c b/fs/gfs2/inode.c
index afe33e59be1b..b9ab47453381 100644
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@ -81,13 +81,12 @@ static void gfs2_set_iop(struct inode *inode)
  * @sb: The super block
  * @no_addr: The inode number
  * @type: The type of the inode
- * non_block: Can we block on inodes that are being freed?
  *
  * Returns: A VFS inode, or an error
  */
 
 struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned int type,
-				u64 no_addr, u64 no_formal_ino, int non_block)
+				u64 no_addr, u64 no_formal_ino)
 {
 	struct inode *inode;
 	struct gfs2_inode *ip;
@@ -171,7 +170,7 @@ struct inode *gfs2_lookup_by_inum(struct gfs2_sbd *sdp, u64 no_addr,
 	if (error)
 		goto fail;
 
-	inode = gfs2_inode_lookup(sb, DT_UNKNOWN, no_addr, 0, 1);
+	inode = gfs2_inode_lookup(sb, DT_UNKNOWN, no_addr, 0);
 	if (IS_ERR(inode))
 		goto fail;
 
diff --git a/fs/gfs2/inode.h b/fs/gfs2/inode.h
index d5caed1f9acf..f8897002a826 100644
--- a/fs/gfs2/inode.h
+++ b/fs/gfs2/inode.h
@@ -94,8 +94,7 @@ err:
 }
 
 extern struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned type, 
-				       u64 no_addr, u64 no_formal_ino,
-				       int non_block);
+				       u64 no_addr, u64 no_formal_ino);
 extern struct inode *gfs2_lookup_by_inum(struct gfs2_sbd *sdp, u64 no_addr,
 					 u64 *no_formal_ino,
 					 unsigned int blktype);
diff --git a/fs/gfs2/ops_fstype.c b/fs/gfs2/ops_fstype.c
index 902da6b6e2b5..eb48c78e86ca 100644
--- a/fs/gfs2/ops_fstype.c
+++ b/fs/gfs2/ops_fstype.c
@@ -435,7 +435,7 @@ static int gfs2_lookup_root(struct super_block *sb, struct dentry **dptr,
 	struct dentry *dentry;
 	struct inode *inode;
 
-	inode = gfs2_inode_lookup(sb, DT_DIR, no_addr, 0, 0);
+	inode = gfs2_inode_lookup(sb, DT_DIR, no_addr, 0);
 	if (IS_ERR(inode)) {
 		fs_err(sdp, "can't read in %s inode: %ld\n", name, PTR_ERR(inode));
 		return PTR_ERR(inode);
