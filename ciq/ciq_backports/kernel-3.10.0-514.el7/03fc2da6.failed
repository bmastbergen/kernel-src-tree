mm: fix pfn_t to page conversion in vm_insert_mixed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mm] fix pfn_t to page conversion in vm_insert_mixed (Jeff Moyer) [1346083 1346084 1346445 1346449 1346472 1347091 1359806]
Rebuild_FUZZ: 95.92%
commit-author Dan Williams <dan.j.williams@intel.com>
commit 03fc2da63b9a33dce784a2075c7e068bb97cbf69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/03fc2da6.failed

pfn_t_to_page() honors the flags in the pfn_t value to determine if a
pfn is backed by a page.  However, vm_insert_mixed() was originally
written to use pfn_valid() to make this determination.  To restore the
old/correct behavior, ignore the pfn_t flags in the !pfn_t_devmap() case
and fallback to trusting pfn_valid().

Fixes: 01c8f1c44b83 ("mm, dax, gpu: convert vm_insert_mixed to pfn_t")
	Cc: Dave Hansen <dave@sr71.net>
	Cc: David Airlie <airlied@linux.ie>
	Reported-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
	Tested-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 03fc2da63b9a33dce784a2075c7e068bb97cbf69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memory.c
diff --cc mm/memory.c
index 66d68efad529,93ce37989471..000000000000
--- a/mm/memory.c
+++ b/mm/memory.c
@@@ -2452,10 -1591,15 +2452,22 @@@ int vm_insert_mixed(struct vm_area_stru
  	 * than insert_pfn).  If a zero_pfn were inserted into a VM_MIXEDMAP
  	 * without pte special, it would there be refcounted as a normal page.
  	 */
++<<<<<<< HEAD
 +	if (!HAVE_PTE_SPECIAL && pfn_valid(pfn)) {
 +		struct page *page;
 +
 +		page = pfn_to_page(pfn);
++=======
+ 	if (!HAVE_PTE_SPECIAL && !pfn_t_devmap(pfn) && pfn_t_valid(pfn)) {
+ 		struct page *page;
+ 
+ 		/*
+ 		 * At this point we are committed to insert_page()
+ 		 * regardless of whether the caller specified flags that
+ 		 * result in pfn_t_has_page() == false.
+ 		 */
+ 		page = pfn_to_page(pfn_t_to_pfn(pfn));
++>>>>>>> 03fc2da63b9a (mm: fix pfn_t to page conversion in vm_insert_mixed)
  		return insert_page(vma, addr, page, vma->vm_page_prot);
  	}
  	return insert_pfn(vma, addr, pfn, vma->vm_page_prot);
* Unmerged path mm/memory.c
