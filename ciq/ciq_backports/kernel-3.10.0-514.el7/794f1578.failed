mmc: core: Add DT bindings for eMMC hardware reset support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] core: Add DT bindings for eMMC hardware reset support (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 95.50%
commit-author Chaotian Jing <chaotian.jing@mediatek.com>
commit 794f15782d9f12aa5a43f796680a5fc4f2c424e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/794f1578.failed

Sometime only need set MMC_CAP_HW_RESET for one of MMC hosts,
So set it in device tree is better.

	Signed-off-by: Chaotian Jing <chaotian.jing@mediatek.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 794f15782d9f12aa5a43f796680a5fc4f2c424e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/host.c
diff --cc drivers/mmc/core/host.c
index 1ef8c2a03585,da950c44204d..000000000000
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@@ -394,65 -236,58 +394,71 @@@ int mmc_of_parse(struct mmc_host *host
  	}
  
  	/* Parse Write Protection */
 -	ro_cap_invert = of_property_read_bool(np, "wp-inverted");
 -
 -	ret = mmc_gpiod_request_ro(host, "wp", 0, false, 0, &ro_gpio_invert);
 -	if (!ret)
 -		dev_info(host->parent, "Got WP GPIO\n");
 -	else if (ret != -ENOENT && ret != -ENOSYS)
 -		return ret;
 +	explicit_inv_wp = of_property_read_bool(np, "wp-inverted");
  
 -	if (of_property_read_bool(np, "disable-wp"))
 -		host->caps2 |= MMC_CAP2_NO_WRITE_PROTECT;
 -
 -	/* See the comment on CD inversion above */
 -	if (ro_cap_invert ^ ro_gpio_invert)
 +	gpio = of_get_named_gpio_flags(np, "wp-gpios", 0, &flags);
 +	if (gpio == -EPROBE_DEFER) {
 +		ret = -EPROBE_DEFER;
 +		goto out;
 +	}
 +	if (gpio_is_valid(gpio)) {
 +		if (!(flags & OF_GPIO_ACTIVE_LOW))
 +			gpio_inv_wp = true;
 +
 +		ret = mmc_gpio_request_ro(host, gpio);
 +		if (ret < 0) {
 +			dev_err(host->parent,
 +				"Failed to request WP GPIO: %d!\n", ret);
 +			goto out;
 +		} else {
 +				dev_info(host->parent, "Got WP GPIO #%d.\n",
 +					 gpio);
 +		}
 +	}
 +	if (explicit_inv_wp ^ gpio_inv_wp)
  		host->caps2 |= MMC_CAP2_RO_ACTIVE_HIGH;
  
 -	if (of_property_read_bool(np, "cap-sd-highspeed"))
 +	if (of_find_property(np, "cap-sd-highspeed", &len))
  		host->caps |= MMC_CAP_SD_HIGHSPEED;
 -	if (of_property_read_bool(np, "cap-mmc-highspeed"))
 +	if (of_find_property(np, "cap-mmc-highspeed", &len))
  		host->caps |= MMC_CAP_MMC_HIGHSPEED;
 -	if (of_property_read_bool(np, "sd-uhs-sdr12"))
 +	if (of_find_property(np, "sd-uhs-sdr12", &len))
  		host->caps |= MMC_CAP_UHS_SDR12;
 -	if (of_property_read_bool(np, "sd-uhs-sdr25"))
 +	if (of_find_property(np, "sd-uhs-sdr25", &len))
  		host->caps |= MMC_CAP_UHS_SDR25;
 -	if (of_property_read_bool(np, "sd-uhs-sdr50"))
 +	if (of_find_property(np, "sd-uhs-sdr50", &len))
  		host->caps |= MMC_CAP_UHS_SDR50;
 -	if (of_property_read_bool(np, "sd-uhs-sdr104"))
 +	if (of_find_property(np, "sd-uhs-sdr104", &len))
  		host->caps |= MMC_CAP_UHS_SDR104;
 -	if (of_property_read_bool(np, "sd-uhs-ddr50"))
 +	if (of_find_property(np, "sd-uhs-ddr50", &len))
  		host->caps |= MMC_CAP_UHS_DDR50;
 -	if (of_property_read_bool(np, "cap-power-off-card"))
 +	if (of_find_property(np, "cap-power-off-card", &len))
  		host->caps |= MMC_CAP_POWER_OFF_CARD;
++<<<<<<< HEAD
 +	if (of_find_property(np, "cap-sdio-irq", &len))
++=======
+ 	if (of_property_read_bool(np, "cap-mmc-hw-reset"))
+ 		host->caps |= MMC_CAP_HW_RESET;
+ 	if (of_property_read_bool(np, "cap-sdio-irq"))
++>>>>>>> 794f15782d9f (mmc: core: Add DT bindings for eMMC hardware reset support)
  		host->caps |= MMC_CAP_SDIO_IRQ;
 -	if (of_property_read_bool(np, "full-pwr-cycle"))
 +	if (of_find_property(np, "full-pwr-cycle", &len))
  		host->caps2 |= MMC_CAP2_FULL_PWR_CYCLE;
 -	if (of_property_read_bool(np, "keep-power-in-suspend"))
 +	if (of_find_property(np, "keep-power-in-suspend", &len))
  		host->pm_caps |= MMC_PM_KEEP_POWER;
 -	if (of_property_read_bool(np, "enable-sdio-wakeup"))
 +	if (of_find_property(np, "enable-sdio-wakeup", &len))
  		host->pm_caps |= MMC_PM_WAKE_SDIO_IRQ;
 -	if (of_property_read_bool(np, "mmc-ddr-1_8v"))
 +	if (of_find_property(np, "mmc-ddr-1_8v", &len))
  		host->caps |= MMC_CAP_1_8V_DDR;
 -	if (of_property_read_bool(np, "mmc-ddr-1_2v"))
 +	if (of_find_property(np, "mmc-ddr-1_2v", &len))
  		host->caps |= MMC_CAP_1_2V_DDR;
 -	if (of_property_read_bool(np, "mmc-hs200-1_8v"))
 +	if (of_find_property(np, "mmc-hs200-1_8v", &len))
  		host->caps2 |= MMC_CAP2_HS200_1_8V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs200-1_2v"))
 +	if (of_find_property(np, "mmc-hs200-1_2v", &len))
  		host->caps2 |= MMC_CAP2_HS200_1_2V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs400-1_8v"))
 +	if (of_find_property(np, "mmc-hs400-1_8v", &len))
  		host->caps2 |= MMC_CAP2_HS400_1_8V | MMC_CAP2_HS200_1_8V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs400-1_2v"))
 +	if (of_find_property(np, "mmc-hs400-1_2v", &len))
  		host->caps2 |= MMC_CAP2_HS400_1_2V | MMC_CAP2_HS200_1_2V_SDR;
  
  	host->dsr_req = !of_property_read_u32(np, "dsr", &host->dsr);
diff --git a/Documentation/devicetree/bindings/mmc/mmc.txt b/Documentation/devicetree/bindings/mmc/mmc.txt
index a3fe21f2b709..d6fc506527e5 100644
--- a/Documentation/devicetree/bindings/mmc/mmc.txt
+++ b/Documentation/devicetree/bindings/mmc/mmc.txt
@@ -32,6 +32,7 @@ Optional properties:
 - sd-uhs-sdr104: SD UHS SDR104 speed is supported
 - sd-uhs-ddr50: SD UHS DDR50 speed is supported
 - cap-power-off-card: powering off the card is safe
+- cap-mmc-hw-reset: eMMC hardware reset is supported
 - cap-sdio-irq: enable SDIO IRQ signalling on this interface
 - full-pwr-cycle: full power cycle of the card is supported
 - mmc-highspeed-ddr-1_8v: eMMC high-speed DDR mode(1.8V I/O) is supported
* Unmerged path drivers/mmc/core/host.c
