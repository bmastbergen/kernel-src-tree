mmc: tmio: tmio_mmc_data has .dma_rx_offset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 8b4c8f32da91681c0dcd321c9e3cd14f866c5517
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8b4c8f32.failed

Current .dma_rx_offset is implemented under tmio_mmc_dma.
It goes to tmio_mmc_data by this patch.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	Acked-by: Lee Jones <lee.jones@linaro.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 8b4c8f32da91681c0dcd321c9e3cd14f866c5517)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sh_mobile_sdhi.c
#	drivers/mmc/host/tmio_mmc.h
#	drivers/mmc/host/tmio_mmc_dma.c
#	include/linux/mfd/tmio.h
diff --cc drivers/mmc/host/sh_mobile_sdhi.c
index 79ee6f0c45bd,c06e93b77995..000000000000
--- a/drivers/mmc/host/sh_mobile_sdhi.c
+++ b/drivers/mmc/host/sh_mobile_sdhi.c
@@@ -199,11 -259,37 +199,17 @@@ static int sh_mobile_sdhi_probe(struct 
  	if (of_id && of_id->data) {
  		const struct sh_mobile_sdhi_of_data *of_data = of_id->data;
  		mmc_data->flags |= of_data->tmio_flags;
++<<<<<<< HEAD
++=======
+ 		mmc_data->capabilities |= of_data->capabilities;
+ 		mmc_data->capabilities2 |= of_data->capabilities2;
+ 		mmc_data->dma_rx_offset = of_data->dma_rx_offset;
++>>>>>>> 8b4c8f32da91 (mmc: tmio: tmio_mmc_data has .dma_rx_offset)
  	}
  
 -	ret = tmio_mmc_host_probe(host, mmc_data);
 +	ret = tmio_mmc_host_probe(&host, pdev, mmc_data);
  	if (ret < 0)
 -		goto efree;
 -
 -	/*
 -	 * FIXME:
 -	 * this Workaround can be more clever method
 -	 */
 -	ver = sd_ctrl_read16(host, CTL_VERSION);
 -	if (ver == 0xCB0D)
 -		sd_ctrl_write16(host, EXT_ACC, 1);
 +		goto eprobe;
  
  	/*
  	 * Allow one or more specific (named) ISRs or
diff --cc drivers/mmc/host/tmio_mmc.h
index d857f5c6e7d9,c9a84695cff2..000000000000
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@@ -40,9 -40,16 +40,20 @@@
  
  struct tmio_mmc_data;
  
++<<<<<<< HEAD
++=======
+ struct tmio_mmc_dma {
+ 	void *chan_priv_tx;
+ 	void *chan_priv_rx;
+ 	int slave_id_tx;
+ 	int slave_id_rx;
+ 	bool (*filter)(struct dma_chan *chan, void *arg);
+ };
+ 
++>>>>>>> 8b4c8f32da91 (mmc: tmio: tmio_mmc_data has .dma_rx_offset)
  struct tmio_mmc_host {
  	void __iomem *ctl;
 +	unsigned long bus_shift;
  	struct mmc_command      *cmd;
  	struct mmc_request      *mrq;
  	struct mmc_data         *data;
diff --cc drivers/mmc/host/tmio_mmc_dma.c
index a8aaa7871c0d,634b2700cb77..000000000000
--- a/drivers/mmc/host/tmio_mmc_dma.c
+++ b/drivers/mmc/host/tmio_mmc_dma.c
@@@ -304,9 -305,11 +304,14 @@@ void tmio_mmc_request_dma(struct tmio_m
  		if (!host->chan_rx)
  			goto ereqrx;
  
 -		if (host->dma->chan_priv_rx)
 -			cfg.slave_id = host->dma->slave_id_rx;
 +		cfg.slave_id = pdata->dma->slave_id_rx;
  		cfg.direction = DMA_DEV_TO_MEM;
++<<<<<<< HEAD
 +		cfg.src_addr = cfg.dst_addr;
++=======
+ 		cfg.src_addr = cfg.dst_addr + host->pdata->dma_rx_offset;
+ 		cfg.src_addr_width = DMA_SLAVE_BUSWIDTH_2_BYTES;
++>>>>>>> 8b4c8f32da91 (mmc: tmio: tmio_mmc_data has .dma_rx_offset)
  		cfg.dst_addr = 0;
  		ret = dmaengine_slave_config(host->chan_rx, &cfg);
  		if (ret < 0)
diff --cc include/linux/mfd/tmio.h
index 38409958f913,807ecfb162d7..000000000000
--- a/include/linux/mfd/tmio.h
+++ b/include/linux/mfd/tmio.h
@@@ -104,17 -121,11 +104,22 @@@ struct tmio_mmc_data 
  	unsigned long			capabilities2;
  	unsigned long			flags;
  	u32				ocr_mask;	/* available voltages */
 +	struct tmio_mmc_dma		*dma;
 +	struct device			*dev;
  	unsigned int			cd_gpio;
++<<<<<<< HEAD
++=======
+ 	int				alignment_shift;
+ 	dma_addr_t			dma_rx_offset;
++>>>>>>> 8b4c8f32da91 (mmc: tmio: tmio_mmc_data has .dma_rx_offset)
  	void (*set_pwr)(struct platform_device *host, int state);
  	void (*set_clk_div)(struct platform_device *host, int state);
 +	int (*write16_hook)(struct tmio_mmc_host *host, int addr);
 +	/* clock management callbacks */
 +	int (*clk_enable)(struct platform_device *pdev, unsigned int *f);
 +	void (*clk_disable)(struct platform_device *pdev);
 +	int (*multi_io_quirk)(struct mmc_card *card,
 +			      unsigned int direction, int blk_size);
  };
  
  /*
* Unmerged path drivers/mmc/host/sh_mobile_sdhi.c
* Unmerged path drivers/mmc/host/tmio_mmc.h
* Unmerged path drivers/mmc/host/tmio_mmc_dma.c
* Unmerged path include/linux/mfd/tmio.h
