x86/microcode/intel: Rename get_matching_sig()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode/intel: Rename get_matching_sig() (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 95.45%
commit-author Borislav Petkov <bp@suse.de>
commit e774eaa9f6069b70b5208aa50539a09f41cf7e73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e774eaa9.failed

... to find_matching_signature() which is exactly what it does.

No functionality change.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1431860101-14847-5-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e774eaa9f6069b70b5208aa50539a09f41cf7e73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/microcode_intel.h
#	arch/x86/kernel/cpu/microcode/intel_early.c
#	arch/x86/kernel/cpu/microcode/intel_lib.c
diff --cc arch/x86/include/asm/microcode_intel.h
index 4855f672db60,7991c606125d..000000000000
--- a/arch/x86/include/asm/microcode_intel.h
+++ b/arch/x86/include/asm/microcode_intel.h
@@@ -53,16 -53,9 +53,20 @@@ struct extended_sigtable 
  
  #define exttable_size(et) ((et)->count * EXT_SIGNATURE_SIZE + EXT_HEADER_SIZE)
  
 -extern int has_newer_microcode(void *mc, unsigned int csig, int cpf, int rev);
 +extern int
 +get_matching_microcode(unsigned int csig, int cpf, void *mc, int rev);
  extern int microcode_sanity_check(void *mc, int print_err);
++<<<<<<< HEAD
 +extern int get_matching_sig(unsigned int csig, int cpf, void *mc, int rev);
 +
 +static inline int
 +revision_is_newer(struct microcode_header_intel *mc_header, int rev)
 +{
 +	return (mc_header->rev <= rev) ? 0 : 1;
 +}
++=======
+ extern int find_matching_signature(void *mc, unsigned int csig, int cpf);
++>>>>>>> e774eaa9f606 (x86/microcode/intel: Rename get_matching_sig())
  
  #ifdef CONFIG_MICROCODE_INTEL_EARLY
  extern void __init load_ucode_intel_bsp(void);
diff --cc arch/x86/kernel/cpu/microcode/intel_early.c
index f074fe1d5a06,10dff3f3f686..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel_early.c
+++ b/arch/x86/kernel/cpu/microcode/intel_early.c
@@@ -284,9 -255,8 +284,13 @@@ static unsigned int _save_mc(struct mic
  		mc_saved_hdr = (struct microcode_header_intel *)mc_saved[i];
  		sig	     = mc_saved_hdr->sig;
  		pf	     = mc_saved_hdr->pf;
 +		new_rev	     = mc_hdr->rev;
  
++<<<<<<< HEAD
 +		if (!get_matching_sig(sig, pf, ucode_ptr, new_rev))
++=======
+ 		if (!find_matching_signature(ucode_ptr, sig, pf))
++>>>>>>> e774eaa9f606 (x86/microcode/intel: Rename get_matching_sig())
  			continue;
  
  		found = 1;
diff --cc arch/x86/kernel/cpu/microcode/intel_lib.c
index b05470c50c6d,1883d252ff7d..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel_lib.c
+++ b/arch/x86/kernel/cpu/microcode/intel_lib.c
@@@ -129,10 -129,9 +129,14 @@@ int microcode_sanity_check(void *mc, in
  EXPORT_SYMBOL_GPL(microcode_sanity_check);
  
  /*
 - * Returns 1 if update has been found, 0 otherwise.
 + * return 0 - no update found
 + * return 1 - found update
   */
++<<<<<<< HEAD
 +int get_matching_sig(unsigned int csig, int cpf, void *mc, int rev)
++=======
+ int find_matching_signature(void *mc, unsigned int csig, int cpf)
++>>>>>>> e774eaa9f606 (x86/microcode/intel: Rename get_matching_sig())
  {
  	struct microcode_header_intel *mc_hdr = mc;
  	struct extended_sigtable *ext_hdr;
@@@ -158,16 -157,15 +162,20 @@@
  }
  
  /*
 - * Returns 1 if update has been found, 0 otherwise.
 + * return 0 - no update found
 + * return 1 - found update
   */
 -int has_newer_microcode(void *mc, unsigned int csig, int cpf, int new_rev)
 +int get_matching_microcode(unsigned int csig, int cpf, void *mc, int rev)
  {
 -	struct microcode_header_intel *mc_hdr = mc;
 +	struct microcode_header_intel *mc_header = mc;
  
 -	if (mc_hdr->rev <= new_rev)
 +	if (!revision_is_newer(mc_header, rev))
  		return 0;
  
++<<<<<<< HEAD
 +	return get_matching_sig(csig, cpf, mc, rev);
++=======
+ 	return find_matching_signature(mc, csig, cpf);
++>>>>>>> e774eaa9f606 (x86/microcode/intel: Rename get_matching_sig())
  }
 -EXPORT_SYMBOL_GPL(has_newer_microcode);
 +EXPORT_SYMBOL_GPL(get_matching_microcode);
* Unmerged path arch/x86/include/asm/microcode_intel.h
* Unmerged path arch/x86/kernel/cpu/microcode/intel_early.c
* Unmerged path arch/x86/kernel/cpu/microcode/intel_lib.c
