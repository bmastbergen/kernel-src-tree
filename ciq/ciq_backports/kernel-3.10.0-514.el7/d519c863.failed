mmc: sdhci: Add out_unlock to sdhci_execute_tuning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: Add out_unlock to sdhci_execute_tuning (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 94.74%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit d519c863fc198f43c979e9d6a74b53d9c53d55aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d519c863.failed

A 'goto' can be used to save duplicating unlocking
and returning.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Reviewed-by: Aaron Lu <aaron.lu@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit d519c863fc198f43c979e9d6a74b53d9c53d55aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci.c
diff --cc drivers/mmc/host/sdhci.c
index 30eeaa114d6a,c45beaff1ab5..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -1885,18 -1896,20 +1885,29 @@@ static int sdhci_execute_tuning(struct 
  	 * If the Host Controller supports the HS200 mode then the
  	 * tuning function has to be executed.
  	 */
 -	switch (host->timing) {
 -	case MMC_TIMING_MMC_HS400:
 -	case MMC_TIMING_MMC_HS200:
 -	case MMC_TIMING_UHS_SDR104:
 -		break;
 -
 +	if (((ctrl & SDHCI_CTRL_UHS_MASK) == SDHCI_CTRL_UHS_SDR50) &&
 +	    (host->flags & SDHCI_SDR50_NEEDS_TUNING ||
 +	     host->flags & SDHCI_SDR104_NEEDS_TUNING))
 +		requires_tuning_nonuhs = true;
 +
++<<<<<<< HEAD
 +	if (((ctrl & SDHCI_CTRL_UHS_MASK) == SDHCI_CTRL_UHS_SDR104) ||
 +	    requires_tuning_nonuhs)
 +		ctrl |= SDHCI_CTRL_EXEC_TUNING;
 +	else {
 +		spin_unlock_irqrestore(&host->lock, flags);
 +		sdhci_runtime_pm_put(host);
 +		return 0;
++=======
+ 	case MMC_TIMING_UHS_SDR50:
+ 		if (host->flags & SDHCI_SDR50_NEEDS_TUNING ||
+ 		    host->flags & SDHCI_SDR104_NEEDS_TUNING)
+ 			break;
+ 		/* FALLTHROUGH */
+ 
+ 	default:
+ 		goto out_unlock;
++>>>>>>> d519c863fc19 (mmc: sdhci: Add out_unlock to sdhci_execute_tuning)
  	}
  
  	if (host->ops->platform_execute_tuning) {
@@@ -2047,7 -2062,9 +2058,13 @@@ out
  	if (err && (host->flags & SDHCI_USING_RETUNING_TIMER))
  		err = 0;
  
++<<<<<<< HEAD
 +	sdhci_clear_set_irqs(host, SDHCI_INT_DATA_AVAIL, ier);
++=======
+ 	sdhci_writel(host, host->ier, SDHCI_INT_ENABLE);
+ 	sdhci_writel(host, host->ier, SDHCI_SIGNAL_ENABLE);
+ out_unlock:
++>>>>>>> d519c863fc19 (mmc: sdhci: Add out_unlock to sdhci_execute_tuning)
  	spin_unlock_irqrestore(&host->lock, flags);
  	sdhci_runtime_pm_put(host);
  
* Unmerged path drivers/mmc/host/sdhci.c
