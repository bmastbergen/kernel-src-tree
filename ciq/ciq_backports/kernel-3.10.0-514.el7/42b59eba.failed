USB: OHCI: Export the OHCI hub control and status_data functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] ohci: Export the OHCI hub control and status_data functions (Don Zickus) [1303209]
Rebuild_FUZZ: 95.93%
commit-author Laurent Pinchart <laurent.pinchart@ideasonboard.com>
commit 42b59eba718a145e991ae02437f38d8aa8efe207
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/42b59eba.failed

Platform drivers sometimes need to perform specific handling of hub
control requests and status data. Make this possible by exporting the
ohci_hub_control() and ohci_hub_status_data() functions which can then
be called from custom hub operations in the default case.

	Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 42b59eba718a145e991ae02437f38d8aa8efe207)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/ohci-at91.c
#	drivers/usb/host/ohci-s3c2410.c
diff --cc drivers/usb/host/ohci-at91.c
index 2ee1496dbc1d,e49eb4f90f5d..000000000000
--- a/drivers/usb/host/ohci-at91.c
+++ b/drivers/usb/host/ohci-at91.c
@@@ -727,3 -668,37 +727,40 @@@ static struct platform_driver ohci_hcd_
  		.of_match_table	= of_match_ptr(at91_ohci_dt_ids),
  	},
  };
++<<<<<<< HEAD
++=======
+ 
+ static int __init ohci_at91_init(void)
+ {
+ 	if (usb_disabled())
+ 		return -ENODEV;
+ 
+ 	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+ 	ohci_init_driver(&ohci_at91_hc_driver, NULL);
+ 
+ 	/*
+ 	 * The Atmel HW has some unusual quirks, which require Atmel-specific
+ 	 * workarounds. We override certain hc_driver functions here to
+ 	 * achieve that. We explicitly do not enhance ohci_driver_overrides to
+ 	 * allow this more easily, since this is an unusual case, and we don't
+ 	 * want to encourage others to override these functions by making it
+ 	 * too easy.
+ 	 */
+ 
+ 	ohci_at91_hc_driver.hub_status_data	= ohci_at91_hub_status_data;
+ 	ohci_at91_hc_driver.hub_control		= ohci_at91_hub_control;
+ 
+ 	return platform_driver_register(&ohci_hcd_at91_driver);
+ }
+ module_init(ohci_at91_init);
+ 
+ static void __exit ohci_at91_cleanup(void)
+ {
+ 	platform_driver_unregister(&ohci_hcd_at91_driver);
+ }
+ module_exit(ohci_at91_cleanup);
+ 
+ MODULE_DESCRIPTION(DRIVER_DESC);
+ MODULE_LICENSE("GPL");
+ MODULE_ALIAS("platform:at91_ohci");
++>>>>>>> 42b59eba718a (USB: OHCI: Export the OHCI hub control and status_data functions)
diff --cc drivers/usb/host/ohci-s3c2410.c
index e125770b893c,3d753a9d3141..000000000000
--- a/drivers/usb/host/ohci-s3c2410.c
+++ b/drivers/usb/host/ohci-s3c2410.c
@@@ -93,7 -106,7 +93,11 @@@ ohci_s3c2410_hub_status_data(struct usb
  	int orig;
  	int portno;
  
++<<<<<<< HEAD
 +	orig  = ohci_hub_status_data(hcd, buf);
++=======
+ 	orig = ohci_hub_status_data(hcd, buf);
++>>>>>>> 42b59eba718a (USB: OHCI: Export the OHCI hub control and status_data functions)
  
  	if (info == NULL)
  		return orig;
@@@ -532,4 -468,36 +536,39 @@@ static struct platform_driver ohci_hcd_
  	},
  };
  
++<<<<<<< HEAD
++=======
+ static int __init ohci_s3c2410_init(void)
+ {
+ 	if (usb_disabled())
+ 		return -ENODEV;
+ 
+ 	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+ 	ohci_init_driver(&ohci_s3c2410_hc_driver, NULL);
+ 
+ 	/*
+ 	 * The Samsung HW has some unusual quirks, which require
+ 	 * Sumsung-specific workarounds. We override certain hc_driver
+ 	 * functions here to achieve that. We explicitly do not enhance
+ 	 * ohci_driver_overrides to allow this more easily, since this
+ 	 * is an unusual case, and we don't want to encourage others to
+ 	 * override these functions by making it too easy.
+ 	 */
+ 
+ 	ohci_s3c2410_hc_driver.hub_status_data	= ohci_s3c2410_hub_status_data;
+ 	ohci_s3c2410_hc_driver.hub_control	= ohci_s3c2410_hub_control;
+ 
+ 	return platform_driver_register(&ohci_hcd_s3c2410_driver);
+ }
+ module_init(ohci_s3c2410_init);
+ 
+ static void __exit ohci_s3c2410_cleanup(void)
+ {
+ 	platform_driver_unregister(&ohci_hcd_s3c2410_driver);
+ }
+ module_exit(ohci_s3c2410_cleanup);
+ 
+ MODULE_DESCRIPTION(DRIVER_DESC);
+ MODULE_LICENSE("GPL");
++>>>>>>> 42b59eba718a (USB: OHCI: Export the OHCI hub control and status_data functions)
  MODULE_ALIAS("platform:s3c2410-ohci");
* Unmerged path drivers/usb/host/ohci-at91.c
diff --git a/drivers/usb/host/ohci-hub.c b/drivers/usb/host/ohci-hub.c
index 6146900ca0ab..ed678c17c4ea 100644
--- a/drivers/usb/host/ohci-hub.c
+++ b/drivers/usb/host/ohci-hub.c
@@ -459,8 +459,7 @@ static int ohci_root_hub_state_changes(struct ohci_hcd *ohci, int changed,
 
 /* build "status change" packet (one or two bytes) from HC registers */
 
-static int
-ohci_hub_status_data (struct usb_hcd *hcd, char *buf)
+int ohci_hub_status_data(struct usb_hcd *hcd, char *buf)
 {
 	struct ohci_hcd	*ohci = hcd_to_ohci (hcd);
 	int		i, changed = 0, length = 1;
@@ -525,6 +524,7 @@ done:
 
 	return changed ? length : 0;
 }
+EXPORT_SYMBOL_GPL(ohci_hub_status_data);
 
 /*-------------------------------------------------------------------------*/
 
@@ -667,7 +667,7 @@ static inline int root_port_reset (struct ohci_hcd *ohci, unsigned port)
 	return 0;
 }
 
-static int ohci_hub_control (
+int ohci_hub_control(
 	struct usb_hcd	*hcd,
 	u16		typeReq,
 	u16		wValue,
@@ -793,4 +793,4 @@ error:
 	}
 	return retval;
 }
-
+EXPORT_SYMBOL_GPL(ohci_hub_control);
* Unmerged path drivers/usb/host/ohci-s3c2410.c
diff --git a/drivers/usb/host/ohci.h b/drivers/usb/host/ohci.h
index 75c84216421e..bc462288cfb0 100644
--- a/drivers/usb/host/ohci.h
+++ b/drivers/usb/host/ohci.h
@@ -739,3 +739,6 @@ extern int	ohci_setup(struct usb_hcd *hcd);
 extern int	ohci_suspend(struct usb_hcd *hcd, bool do_wakeup);
 extern int	ohci_resume(struct usb_hcd *hcd, bool hibernated);
 #endif
+extern int	ohci_hub_control(struct usb_hcd	*hcd, u16 typeReq, u16 wValue,
+				 u16 wIndex, char *buf, u16 wLength);
+extern int	ohci_hub_status_data(struct usb_hcd *hcd, char *buf);
