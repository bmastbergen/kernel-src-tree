perf record: Support per-event freq term

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Namhyung Kim <namhyung@kernel.org>
commit 09af2a553577a6e53e40011a910be0f27ce56f3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/09af2a55.failed

Now perf can set per-event value of time and (sampling) period.  But I
guess most users like me just want to set frequency rather than period.
So add the 'freq' term in the event parser.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1439102724-14079-1-git-send-email-namhyung@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 09af2a553577a6e53e40011a910be0f27ce56f3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-record.txt
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/parse-events.c
#	tools/perf/util/pmu.c
diff --cc tools/perf/Documentation/perf-record.txt
index 1c99db2877d3,afbe45ef7e3e..000000000000
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@@ -46,10 -46,13 +46,17 @@@ OPTION
            /sys/bus/event_sources/devices/<pmu>/format/*
  
  	  There are also some params which are not defined in .../<pmu>/format/*.
 -	  These params can be used to overload default config values per event.
 +	  These params can be used to set event defaults.
  	  Here is a list of the params.
  	  - 'period': Set event sampling period
- 
++<<<<<<< HEAD
++
++=======
+ 	  - 'freq': Set event sampling frequency
+ 	  - 'time': Disable/enable time stamping. Acceptable values are 1 for
+ 		    enabling time stamping. 0 for disabling time stamping.
+ 		    The default is 1.
++>>>>>>> 09af2a553577 (perf record: Support per-event freq term)
  	  Note: If user explicitly sets options which conflict with the params,
  	  the value set by the params will be overridden.
  
diff --cc tools/perf/util/evsel.c
index fafe7b1572e6,f664a22b5fea..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -583,6 -588,34 +583,37 @@@ perf_evsel__config_callgraph(struct per
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void apply_config_terms(struct perf_evsel *evsel)
+ {
+ 	struct perf_evsel_config_term *term;
+ 	struct list_head *config_terms = &evsel->config_terms;
+ 	struct perf_event_attr *attr = &evsel->attr;
+ 
+ 	list_for_each_entry(term, config_terms, list) {
+ 		switch (term->type) {
+ 		case PERF_EVSEL__CONFIG_TERM_PERIOD:
+ 			attr->sample_period = term->val.period;
+ 			attr->freq = 0;
+ 			break;
+ 		case PERF_EVSEL__CONFIG_TERM_FREQ:
+ 			attr->sample_freq = term->val.freq;
+ 			attr->freq = 1;
+ 			break;
+ 		case PERF_EVSEL__CONFIG_TERM_TIME:
+ 			if (term->val.time)
+ 				perf_evsel__set_sample_bit(evsel, TIME);
+ 			else
+ 				perf_evsel__reset_sample_bit(evsel, TIME);
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 09af2a553577 (perf record: Support per-event freq term)
  /*
   * The enable_on_exec/disabled value strategy:
   *
diff --cc tools/perf/util/evsel.h
index a7e233d23541,fdf2674ab339..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -31,6 -31,29 +31,32 @@@ struct perf_sample_id 
  
  struct cgroup_sel;
  
++<<<<<<< HEAD
++=======
+ /*
+  * The 'struct perf_evsel_config_term' is used to pass event
+  * specific configuration data to perf_evsel__config routine.
+  * It is allocated within event parsing and attached to
+  * perf_evsel::config_terms list head.
+ */
+ enum {
+ 	PERF_EVSEL__CONFIG_TERM_PERIOD,
+ 	PERF_EVSEL__CONFIG_TERM_FREQ,
+ 	PERF_EVSEL__CONFIG_TERM_TIME,
+ 	PERF_EVSEL__CONFIG_TERM_MAX,
+ };
+ 
+ struct perf_evsel_config_term {
+ 	struct list_head	list;
+ 	int	type;
+ 	union {
+ 		u64	period;
+ 		u64	freq;
+ 		bool	time;
+ 	} val;
+ };
+ 
++>>>>>>> 09af2a553577 (perf record: Support per-event freq term)
  /** struct perf_evsel - event selector
   *
   * @name - Can be set to retain the original event name passed by the user,
diff --cc tools/perf/util/parse-events.c
index 4d13728779c2,dbf315df4220..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -590,8 -596,10 +590,11 @@@ do {									   
  		break;
  	case PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD:
  		CHECK_TYPE_VAL(NUM);
 +		attr->sample_period = term->val.num;
  		break;
+ 	case PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ:
+ 		CHECK_TYPE_VAL(NUM);
+ 		break;
  	case PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE:
  		/*
  		 * TODO uncomment when the field is available
@@@ -622,6 -638,44 +625,47 @@@ static int config_attr(struct perf_even
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int get_config_terms(struct list_head *head_config,
+ 			    struct list_head *head_terms __maybe_unused)
+ {
+ #define ADD_CONFIG_TERM(__type, __name, __val)			\
+ do {								\
+ 	struct perf_evsel_config_term *__t;			\
+ 								\
+ 	__t = zalloc(sizeof(*__t));				\
+ 	if (!__t)						\
+ 		return -ENOMEM;					\
+ 								\
+ 	INIT_LIST_HEAD(&__t->list);				\
+ 	__t->type       = PERF_EVSEL__CONFIG_TERM_ ## __type;	\
+ 	__t->val.__name = __val;				\
+ 	list_add_tail(&__t->list, head_terms);			\
+ } while (0)
+ 
+ 	struct parse_events_term *term;
+ 
+ 	list_for_each_entry(term, head_config, list) {
+ 		switch (term->type_term) {
+ 		case PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD:
+ 			ADD_CONFIG_TERM(PERIOD, period, term->val.num);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ:
+ 			ADD_CONFIG_TERM(FREQ, freq, term->val.num);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_TIME:
+ 			ADD_CONFIG_TERM(TIME, time, term->val.num);
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ #undef ADD_EVSEL_CONFIG
+ 	return 0;
+ }
+ 
++>>>>>>> 09af2a553577 (perf record: Support per-event freq term)
  int parse_events_add_numeric(struct parse_events_evlist *data,
  			     struct list_head *list,
  			     u32 type, u64 config,
diff --cc tools/perf/util/pmu.c
index 3eac7baefbaa,d85f11b8cacf..000000000000
--- a/tools/perf/util/pmu.c
+++ b/tools/perf/util/pmu.c
@@@ -634,7 -634,7 +634,11 @@@ static char *formats_error_string(struc
  {
  	struct perf_pmu_format *format;
  	char *err, *str;
++<<<<<<< HEAD
 +	static const char *static_terms = "config,config1,config2,name,period,branch_type\n";
++=======
+ 	static const char *static_terms = "config,config1,config2,name,period,freq,branch_type,time\n";
++>>>>>>> 09af2a553577 (perf record: Support per-event freq term)
  	unsigned i = 0;
  
  	if (!asprintf(&str, "valid terms:"))
* Unmerged path tools/perf/Documentation/perf-record.txt
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/parse-events.c
diff --git a/tools/perf/util/parse-events.h b/tools/perf/util/parse-events.h
index 2063048a4354..188d4402b63c 100644
--- a/tools/perf/util/parse-events.h
+++ b/tools/perf/util/parse-events.h
@@ -62,6 +62,7 @@ enum {
 	PARSE_EVENTS__TERM_TYPE_CONFIG2,
 	PARSE_EVENTS__TERM_TYPE_NAME,
 	PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD,
+	PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ,
 	PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE,
 };
 
diff --git a/tools/perf/util/parse-events.l b/tools/perf/util/parse-events.l
index 13cef3c65565..6cf476b71cee 100644
--- a/tools/perf/util/parse-events.l
+++ b/tools/perf/util/parse-events.l
@@ -182,6 +182,7 @@ config1			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG1); }
 config2			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG2); }
 name			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_NAME); }
 period			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD); }
+freq			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ); }
 branch_type		{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE); }
 ,			{ return ','; }
 "/"			{ BEGIN(INITIAL); return '/'; }
* Unmerged path tools/perf/util/pmu.c
