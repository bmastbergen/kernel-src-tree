memory-hotplug: fix wrong edge when hot add a new node

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Xishi Qiu <qiuxishi@huawei.com>
commit f9126ab9241f66562debf69c2c9d8fee32ddcc53
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f9126ab9.failed

When we add a new node, the edge of memory may be wrong.

e.g. system has 4 nodes, and node3 is movable, node3 mem:[24G-32G],

1. hotremove the node3,
2. then hotadd node3 with a part of memory, mem:[26G-30G],
3. call hotadd_new_pgdat()
        free_area_init_node()
                get_pfn_range_for_nid()
4. it will return wrong start_pfn and end_pfn, because we have not
update the memblock.

This patch also fixes a BUG_ON during hot-addition, please see
http://marc.info/?l=linux-kernel&m=142961156129456&w=2

	Signed-off-by: Xishi Qiu <qiuxishi@huawei.com>
	Cc: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
	Cc: Kamezawa Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
	Cc: Taku Izumi <izumi.taku@jp.fujitsu.com>
	Cc: Tang Chen <tangchen@cn.fujitsu.com>
	Cc: Gu Zheng <guz.fnst@cn.fujitsu.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f9126ab9241f66562debf69c2c9d8fee32ddcc53)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index 7fe6979e3cea,df959b7d6085..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -4547,13 -5054,17 +4547,21 @@@ static void __meminit adjust_zone_range
   */
  static unsigned long __meminit zone_spanned_pages_in_node(int nid,
  					unsigned long zone_type,
 -					unsigned long node_start_pfn,
 -					unsigned long node_end_pfn,
  					unsigned long *ignored)
  {
 +	unsigned long node_start_pfn, node_end_pfn;
  	unsigned long zone_start_pfn, zone_end_pfn;
  
++<<<<<<< HEAD
 +	/* Get the start and end of the node and zone */
 +	get_pfn_range_for_nid(nid, &node_start_pfn, &node_end_pfn);
++=======
+ 	/* When hotadd a new node, the node should be empty */
+ 	if (!node_start_pfn && !node_end_pfn)
+ 		return 0;
+ 
+ 	/* Get the start and end of the zone */
++>>>>>>> f9126ab9241f (memory-hotplug: fix wrong edge when hot add a new node)
  	zone_start_pfn = arch_zone_lowest_possible_pfn[zone_type];
  	zone_end_pfn = arch_zone_highest_possible_pfn[zone_type];
  	adjust_zone_range_for_zone_movable(nid, zone_type,
@@@ -4612,10 -5125,12 +4620,17 @@@ static unsigned long __meminit zone_abs
  {
  	unsigned long zone_low = arch_zone_lowest_possible_pfn[zone_type];
  	unsigned long zone_high = arch_zone_highest_possible_pfn[zone_type];
 +	unsigned long node_start_pfn, node_end_pfn;
  	unsigned long zone_start_pfn, zone_end_pfn;
  
++<<<<<<< HEAD
 +	get_pfn_range_for_nid(nid, &node_start_pfn, &node_end_pfn);
++=======
+ 	/* When hotadd a new node, the node should be empty */
+ 	if (!node_start_pfn && !node_end_pfn)
+ 		return 0;
+ 
++>>>>>>> f9126ab9241f (memory-hotplug: fix wrong edge when hot add a new node)
  	zone_start_pfn = clamp(node_start_pfn, zone_low, zone_high);
  	zone_end_pfn = clamp(node_end_pfn, zone_low, zone_high);
  
diff --git a/mm/memory_hotplug.c b/mm/memory_hotplug.c
index e7bfdf837815..8605e494a8d9 100644
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@ -1209,6 +1209,7 @@ int __ref add_memory(int nid, u64 start, u64 size)
 
 	/* create new memmap entry */
 	firmware_map_add_hotplug(start, start + size, "System RAM");
+	memblock_add_node(start, size, nid);
 
 	goto out;
 
@@ -1918,6 +1919,8 @@ void __ref remove_memory(int nid, u64 start, u64 size)
 
 	/* remove memmap entry */
 	firmware_map_remove(start, start + size, "System RAM");
+	memblock_free(start, size);
+	memblock_remove(start, size);
 
 	arch_remove_memory(start, size);
 
* Unmerged path mm/page_alloc.c
