KVM: s390: don't load kvm without virtualization support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [s390] kvm: don't load kvm without virtualization support (Hendrik Brueckner) [1310710]
Rebuild_FUZZ: 94.34%
commit-author David Hildenbrand <dahi@linux.vnet.ibm.com>
commit 07197fd05fa3eb2e8a5aae92938ca5d07bcac9fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/07197fd0.failed

If we don't have support for virtualization (SIE), e.g. when running under
a hypervisor not supporting execution of the SIE instruction, we should
immediately abort loading the kvm module, as the SIE instruction cannot
be enabled dynamically.

Currently, the SIE instructions fails with an exception on a non-SIE
host, resulting in the guest making no progress, instead of failing hard.

	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
	Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Signed-off-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit 07197fd05fa3eb2e8a5aae92938ca5d07bcac9fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kvm/kvm-s390.c
diff --cc arch/s390/kvm/kvm-s390.c
index 1e923bcabe93,49d33190bd98..000000000000
--- a/arch/s390/kvm/kvm-s390.c
+++ b/arch/s390/kvm/kvm-s390.c
@@@ -1156,36 -2857,14 +1156,45 @@@ void kvm_arch_commit_memory_region(stru
  	return;
  }
  
 +void kvm_arch_flush_shadow_all(struct kvm *kvm)
 +{
 +}
 +
 +void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
 +				   struct kvm_memory_slot *slot)
 +{
 +}
 +
  static int __init kvm_s390_init(void)
  {
++<<<<<<< HEAD
 +	int ret;
 +	ret = kvm_init(NULL, sizeof(struct kvm_vcpu), 0, THIS_MODULE);
 +	if (ret)
 +		return ret;
 +
 +	/*
 +	 * guests can ask for up to 255+1 double words, we need a full page
 +	 * to hold the maximum amount of facilities. On the other hand, we
 +	 * only set facilities that are known to work in KVM.
 +	 */
 +	vfacilities = (unsigned long *) get_zeroed_page(GFP_KERNEL|GFP_DMA);
 +	if (!vfacilities) {
 +		kvm_exit();
 +		return -ENOMEM;
 +	}
 +	memcpy(vfacilities, S390_lowcore.stfle_fac_list, 16);
 +	vfacilities[0] &= 0xff82fff3f47c0000UL;
 +	vfacilities[1] &= 0x001c000000000000UL;
 +	return 0;
++=======
+ 	if (!sclp.has_sief2) {
+ 		pr_info("SIE not available\n");
+ 		return -ENODEV;
+ 	}
+ 
+ 	return kvm_init(NULL, sizeof(struct kvm_vcpu), 0, THIS_MODULE);
++>>>>>>> 07197fd05fa3 (KVM: s390: don't load kvm without virtualization support)
  }
  
  static void __exit kvm_s390_exit(void)
* Unmerged path arch/s390/kvm/kvm-s390.c
