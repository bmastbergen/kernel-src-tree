mmc: dt: Allow to specify that no write protect signal is present

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] dt: Allow to specify that no write protect signal is present (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 96.00%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit 19f4424677455a01b93163975cfbcffa9adb3336
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/19f44246.failed

Allow to specify in the device-tree that no physical write-protect signal
is connected to a particular instance of a MMC controller. Setting the
property will cause the core will assume that the SD card is always
read-write.

The name for the new property is 'disable-wp' and was chosen based on the
property with the same function from the Synopsys designware mobile storage
host controller DT bindings specification.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Cc: Rob Herring <robh+dt@kernel.org>
	Cc: Pawel Moll <pawel.moll@arm.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Ian Campbell <ijc+devicetree@hellion.org.uk>
	Cc: Kumar Gala <galak@codeaurora.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 19f4424677455a01b93163975cfbcffa9adb3336)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/host.c
diff --cc drivers/mmc/core/host.c
index 1ef8c2a03585,99a9c9011c50..000000000000
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@@ -394,28 -476,19 +394,36 @@@ int mmc_of_parse(struct mmc_host *host
  	}
  
  	/* Parse Write Protection */
 -	ro_cap_invert = of_property_read_bool(np, "wp-inverted");
 -
 -	ret = mmc_gpiod_request_ro(host, "wp", 0, false, 0, &ro_gpio_invert);
 -	if (!ret)
 -		dev_info(host->parent, "Got WP GPIO\n");
 -	else if (ret != -ENOENT)
 -		return ret;
 +	explicit_inv_wp = of_property_read_bool(np, "wp-inverted");
  
 +	gpio = of_get_named_gpio_flags(np, "wp-gpios", 0, &flags);
 +	if (gpio == -EPROBE_DEFER) {
 +		ret = -EPROBE_DEFER;
 +		goto out;
 +	}
 +	if (gpio_is_valid(gpio)) {
 +		if (!(flags & OF_GPIO_ACTIVE_LOW))
 +			gpio_inv_wp = true;
 +
++<<<<<<< HEAD
 +		ret = mmc_gpio_request_ro(host, gpio);
 +		if (ret < 0) {
 +			dev_err(host->parent,
 +				"Failed to request WP GPIO: %d!\n", ret);
 +			goto out;
 +		} else {
 +				dev_info(host->parent, "Got WP GPIO #%d.\n",
 +					 gpio);
 +		}
 +	}
 +	if (explicit_inv_wp ^ gpio_inv_wp)
++=======
+ 	if (of_property_read_bool(np, "disable-wp"))
+ 		host->caps2 |= MMC_CAP2_NO_WRITE_PROTECT;
+ 
+ 	/* See the comment on CD inversion above */
+ 	if (ro_cap_invert ^ ro_gpio_invert)
++>>>>>>> 19f442467745 (mmc: dt: Allow to specify that no write protect signal is present)
  		host->caps2 |= MMC_CAP2_RO_ACTIVE_HIGH;
  
  	if (of_find_property(np, "cap-sd-highspeed", &len))
diff --git a/Documentation/devicetree/bindings/mmc/mmc.txt b/Documentation/devicetree/bindings/mmc/mmc.txt
index a3fe21f2b709..13a86c2937c8 100644
--- a/Documentation/devicetree/bindings/mmc/mmc.txt
+++ b/Documentation/devicetree/bindings/mmc/mmc.txt
@@ -21,6 +21,11 @@ Optional properties:
   below for the case, when a GPIO is used for the CD line
 - wp-inverted: when present, polarity on the WP line is inverted. See the note
   below for the case, when a GPIO is used for the WP line
+- disable-wp: When set no physical WP line is present. This property should
+  only be specified when the controller has a dedicated write-protect
+  detection logic. If a GPIO is always used for the write-protect detection
+  logic it is sufficient to not specify wp-gpios property in the absence of a WP
+  line.
 - max-frequency: maximum operating clock frequency
 - no-1-8-v: when present, denotes that 1.8v card voltage is not supported on
   this system, even if the controller claims it is.
* Unmerged path drivers/mmc/core/host.c
