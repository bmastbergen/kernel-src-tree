openvswitch: Interface with NAT.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] openvswitch: Interface with NAT (Lance Richardson) [1297465]
Rebuild_FUZZ: 98.41%
commit-author Jarno Rajahalme <jarno@ovn.org>
commit 05752523e56502cd9975aec0a2ded465d51a71f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/05752523.failed

Extend OVS conntrack interface to cover NAT.  New nested
OVS_CT_ATTR_NAT attribute may be used to include NAT with a CT action.
A bare OVS_CT_ATTR_NAT only mangles existing and expected connections.
If OVS_NAT_ATTR_SRC or OVS_NAT_ATTR_DST is included within the nested
attributes, new (non-committed/non-confirmed) connections are mangled
according to the rest of the nested attributes.

The corresponding OVS userspace patch series includes test cases (in
tests/system-traffic.at) that also serve as example uses.

This work extends on a branch by Thomas Graf at
https://github.com/tgraf/ovs/tree/nat.

	Signed-off-by: Jarno Rajahalme <jarno@ovn.org>
	Acked-by: Thomas Graf <tgraf@suug.ch>
	Acked-by: Joe Stringer <joe@ovn.org>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 05752523e56502cd9975aec0a2ded465d51a71f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/openvswitch.h
#	net/openvswitch/Kconfig
#	net/openvswitch/conntrack.c
#	net/openvswitch/conntrack.h
diff --cc include/uapi/linux/openvswitch.h
index d6b885460187,616d04761730..000000000000
--- a/include/uapi/linux/openvswitch.h
+++ b/include/uapi/linux/openvswitch.h
@@@ -431,6 -441,28 +431,31 @@@ struct ovs_key_nd 
  	__u8	nd_tll[ETH_ALEN];
  };
  
++<<<<<<< HEAD
++=======
+ #define OVS_CT_LABELS_LEN	16
+ struct ovs_key_ct_labels {
+ 	__u8	ct_labels[OVS_CT_LABELS_LEN];
+ };
+ 
+ /* OVS_KEY_ATTR_CT_STATE flags */
+ #define OVS_CS_F_NEW               0x01 /* Beginning of a new connection. */
+ #define OVS_CS_F_ESTABLISHED       0x02 /* Part of an existing connection. */
+ #define OVS_CS_F_RELATED           0x04 /* Related to an established
+ 					 * connection. */
+ #define OVS_CS_F_REPLY_DIR         0x08 /* Flow is in the reply direction. */
+ #define OVS_CS_F_INVALID           0x10 /* Could not track connection. */
+ #define OVS_CS_F_TRACKED           0x20 /* Conntrack has occurred. */
+ #define OVS_CS_F_SRC_NAT           0x40 /* Packet's source address/port was
+ 					 * mangled by NAT.
+ 					 */
+ #define OVS_CS_F_DST_NAT           0x80 /* Packet's destination address/port
+ 					 * was mangled by NAT.
+ 					 */
+ 
+ #define OVS_CS_F_NAT_MASK (OVS_CS_F_SRC_NAT | OVS_CS_F_DST_NAT)
+ 
++>>>>>>> 05752523e565 (openvswitch: Interface with NAT.)
  /**
   * enum ovs_flow_attr - attributes for %OVS_FLOW_* commands.
   * @OVS_FLOW_ATTR_KEY: Nested %OVS_KEY_ATTR_* attributes specifying the flow
@@@ -595,6 -627,75 +620,78 @@@ struct ovs_action_hash 
  };
  
  /**
++<<<<<<< HEAD
++=======
+  * enum ovs_ct_attr - Attributes for %OVS_ACTION_ATTR_CT action.
+  * @OVS_CT_ATTR_COMMIT: If present, commits the connection to the conntrack
+  * table. This allows future packets for the same connection to be identified
+  * as 'established' or 'related'. The flow key for the current packet will
+  * retain the pre-commit connection state.
+  * @OVS_CT_ATTR_ZONE: u16 connection tracking zone.
+  * @OVS_CT_ATTR_MARK: u32 value followed by u32 mask. For each bit set in the
+  * mask, the corresponding bit in the value is copied to the connection
+  * tracking mark field in the connection.
+  * @OVS_CT_ATTR_LABELS: %OVS_CT_LABELS_LEN value followed by %OVS_CT_LABELS_LEN
+  * mask. For each bit set in the mask, the corresponding bit in the value is
+  * copied to the connection tracking label field in the connection.
+  * @OVS_CT_ATTR_HELPER: variable length string defining conntrack ALG.
+  * @OVS_CT_ATTR_NAT: Nested OVS_NAT_ATTR_* for performing L3 network address
+  * translation (NAT) on the packet.
+  */
+ enum ovs_ct_attr {
+ 	OVS_CT_ATTR_UNSPEC,
+ 	OVS_CT_ATTR_COMMIT,     /* No argument, commits connection. */
+ 	OVS_CT_ATTR_ZONE,       /* u16 zone id. */
+ 	OVS_CT_ATTR_MARK,       /* mark to associate with this connection. */
+ 	OVS_CT_ATTR_LABELS,     /* labels to associate with this connection. */
+ 	OVS_CT_ATTR_HELPER,     /* netlink helper to assist detection of
+ 				   related connections. */
+ 	OVS_CT_ATTR_NAT,        /* Nested OVS_NAT_ATTR_* */
+ 	__OVS_CT_ATTR_MAX
+ };
+ 
+ #define OVS_CT_ATTR_MAX (__OVS_CT_ATTR_MAX - 1)
+ 
+ /**
+  * enum ovs_nat_attr - Attributes for %OVS_CT_ATTR_NAT.
+  *
+  * @OVS_NAT_ATTR_SRC: Flag for Source NAT (mangle source address/port).
+  * @OVS_NAT_ATTR_DST: Flag for Destination NAT (mangle destination
+  * address/port).  Only one of (@OVS_NAT_ATTR_SRC, @OVS_NAT_ATTR_DST) may be
+  * specified.  Effective only for packets for ct_state NEW connections.
+  * Packets of committed connections are mangled by the NAT action according to
+  * the committed NAT type regardless of the flags specified.  As a corollary, a
+  * NAT action without a NAT type flag will only mangle packets of committed
+  * connections.  The following NAT attributes only apply for NEW
+  * (non-committed) connections, and they may be included only when the CT
+  * action has the @OVS_CT_ATTR_COMMIT flag and either @OVS_NAT_ATTR_SRC or
+  * @OVS_NAT_ATTR_DST is also included.
+  * @OVS_NAT_ATTR_IP_MIN: struct in_addr or struct in6_addr
+  * @OVS_NAT_ATTR_IP_MAX: struct in_addr or struct in6_addr
+  * @OVS_NAT_ATTR_PROTO_MIN: u16 L4 protocol specific lower boundary (port)
+  * @OVS_NAT_ATTR_PROTO_MAX: u16 L4 protocol specific upper boundary (port)
+  * @OVS_NAT_ATTR_PERSISTENT: Flag for persistent IP mapping across reboots
+  * @OVS_NAT_ATTR_PROTO_HASH: Flag for pseudo random L4 port mapping (MD5)
+  * @OVS_NAT_ATTR_PROTO_RANDOM: Flag for fully randomized L4 port mapping
+  */
+ enum ovs_nat_attr {
+ 	OVS_NAT_ATTR_UNSPEC,
+ 	OVS_NAT_ATTR_SRC,
+ 	OVS_NAT_ATTR_DST,
+ 	OVS_NAT_ATTR_IP_MIN,
+ 	OVS_NAT_ATTR_IP_MAX,
+ 	OVS_NAT_ATTR_PROTO_MIN,
+ 	OVS_NAT_ATTR_PROTO_MAX,
+ 	OVS_NAT_ATTR_PERSISTENT,
+ 	OVS_NAT_ATTR_PROTO_HASH,
+ 	OVS_NAT_ATTR_PROTO_RANDOM,
+ 	__OVS_NAT_ATTR_MAX,
+ };
+ 
+ #define OVS_NAT_ATTR_MAX (__OVS_NAT_ATTR_MAX - 1)
+ 
+ /**
++>>>>>>> 05752523e565 (openvswitch: Interface with NAT.)
   * enum ovs_action_attr - Action types.
   *
   * @OVS_ACTION_ATTR_OUTPUT: Output packet to port.
diff --cc net/openvswitch/Kconfig
index aa5eac5326eb,234a73344c6e..000000000000
--- a/net/openvswitch/Kconfig
+++ b/net/openvswitch/Kconfig
@@@ -5,7 -5,9 +5,13 @@@
  config OPENVSWITCH
  	tristate "Open vSwitch"
  	depends on INET
++<<<<<<< HEAD
 +	depends on VXLAN
++=======
+ 	depends on !NF_CONNTRACK || \
+ 		   (NF_CONNTRACK && ((!NF_DEFRAG_IPV6 || NF_DEFRAG_IPV6) && \
+ 				     (!NF_NAT || NF_NAT)))
++>>>>>>> 05752523e565 (openvswitch: Interface with NAT.)
  	select LIBCRC32C
  	select MPLS
  	select NET_MPLS_GSO
* Unmerged path net/openvswitch/conntrack.c
* Unmerged path net/openvswitch/conntrack.h
* Unmerged path include/uapi/linux/openvswitch.h
* Unmerged path net/openvswitch/Kconfig
* Unmerged path net/openvswitch/conntrack.c
* Unmerged path net/openvswitch/conntrack.h
