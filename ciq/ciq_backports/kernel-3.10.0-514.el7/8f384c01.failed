RDS: rds_conn_lookup() should factor in the struct net for a match

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] rds: rds_conn_lookup() should factor in the structfor a match (Don Dutile) [1169955 1259940 1262728 1275187 1275209 1275423 1275425 1289615 1291874 1292284 1292872 1296195 1296269 1296338 1296344 1298707 1302166 1310156]
Rebuild_FUZZ: 96.06%
commit-author Sowmini Varadhan <sowmini.varadhan@oracle.com>
commit 8f384c0177a03640312b9cb3638c998b32243b63
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8f384c01.failed

Only return a conn if the rds_conn_net(conn) matches the struct
net passed to rds_conn_lookup().

Fixes: 467fa15356ac ("RDS-TCP: Support multiple RDS-TCP listen endpoints,
       one per netns.")

	Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8f384c0177a03640312b9cb3638c998b32243b63)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/connection.c
diff --cc net/rds/connection.c
index 94e1fc7527e8,9b2de5e67d79..000000000000
--- a/net/rds/connection.c
+++ b/net/rds/connection.c
@@@ -132,9 -133,9 +133,9 @@@ static struct rds_connection *__rds_con
  	if (!is_outgoing && otrans->t_type == RDS_TRANS_TCP)
  		goto new_conn;
  	rcu_read_lock();
- 	conn = rds_conn_lookup(head, laddr, faddr, trans);
+ 	conn = rds_conn_lookup(net, head, laddr, faddr, trans);
  	if (conn && conn->c_loopback && conn->c_trans != &rds_loop_transport &&
 -	    laddr == faddr && !is_outgoing) {
 +	    !is_outgoing) {
  		/* This is a looped back IB connection, and we're
  		 * called by the code handling the incoming connect.
  		 * We need a second connection object into which we
@@@ -236,7 -237,10 +237,14 @@@ new_conn
  		/* Creating normal conn */
  		struct rds_connection *found;
  
++<<<<<<< HEAD
 +		found = rds_conn_lookup(head, laddr, faddr, trans);
++=======
+ 		if (!is_outgoing && otrans->t_type == RDS_TRANS_TCP)
+ 			found = NULL;
+ 		else
+ 			found = rds_conn_lookup(net, head, laddr, faddr, trans);
++>>>>>>> 8f384c0177a0 (RDS: rds_conn_lookup() should factor in the struct net for a match)
  		if (found) {
  			trans->conn_free(conn->c_transport_data);
  			kmem_cache_free(rds_conn_slab, conn);
* Unmerged path net/rds/connection.c
