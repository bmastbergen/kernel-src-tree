net/mlx5_core: Add helper function to read virtual port counters

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [include] mlx5_core: Add helper function to read virtual port counters (kamal heib) [1275159 1296272 1296405 1298421 1298422 1298423 1298424 1298425]
Rebuild_FUZZ: 96.77%
commit-author Meny Yossefi <menyy@mellanox.com>
commit b54ba2772b7af82a07eb48f88c88f7cadfb33401
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b54ba277.failed

Added helper function to read 64bit virtual port Infiniband traffic
counters.

	Signed-off-by: Meny Yossefi <menyy@mellanox.com>
	Signed-off-by: Majd Dibbiny <majd@mellanox.com>
	Reviewed-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit b54ba2772b7af82a07eb48f88c88f7cadfb33401)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/vport.c
#	include/linux/mlx5/mlx5_ifc.h
#	include/linux/mlx5/vport.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/vport.c
index 076197efea9b,90ab09e375b8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/vport.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/vport.c
@@@ -750,3 -809,84 +750,87 @@@ int mlx5_modify_nic_vport_promisc(struc
  	return err;
  }
  EXPORT_SYMBOL_GPL(mlx5_modify_nic_vport_promisc);
++<<<<<<< HEAD
++=======
+ 
+ enum mlx5_vport_roce_state {
+ 	MLX5_VPORT_ROCE_DISABLED = 0,
+ 	MLX5_VPORT_ROCE_ENABLED  = 1,
+ };
+ 
+ static int mlx5_nic_vport_update_roce_state(struct mlx5_core_dev *mdev,
+ 					    enum mlx5_vport_roce_state state)
+ {
+ 	void *in;
+ 	int inlen = MLX5_ST_SZ_BYTES(modify_nic_vport_context_in);
+ 	int err;
+ 
+ 	in = mlx5_vzalloc(inlen);
+ 	if (!in) {
+ 		mlx5_core_warn(mdev, "failed to allocate inbox\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	MLX5_SET(modify_nic_vport_context_in, in, field_select.roce_en, 1);
+ 	MLX5_SET(modify_nic_vport_context_in, in, nic_vport_context.roce_en,
+ 		 state);
+ 
+ 	err = mlx5_modify_nic_vport_context(mdev, in, inlen);
+ 
+ 	kvfree(in);
+ 
+ 	return err;
+ }
+ 
+ int mlx5_nic_vport_enable_roce(struct mlx5_core_dev *mdev)
+ {
+ 	return mlx5_nic_vport_update_roce_state(mdev, MLX5_VPORT_ROCE_ENABLED);
+ }
+ EXPORT_SYMBOL_GPL(mlx5_nic_vport_enable_roce);
+ 
+ int mlx5_nic_vport_disable_roce(struct mlx5_core_dev *mdev)
+ {
+ 	return mlx5_nic_vport_update_roce_state(mdev, MLX5_VPORT_ROCE_DISABLED);
+ }
+ EXPORT_SYMBOL_GPL(mlx5_nic_vport_disable_roce);
+ 
+ int mlx5_core_query_vport_counter(struct mlx5_core_dev *dev, u8 other_vport,
+ 				  u8 port_num, void *out, size_t out_sz)
+ {
+ 	int	in_sz = MLX5_ST_SZ_BYTES(query_vport_counter_in);
+ 	int	is_group_manager;
+ 	void   *in;
+ 	int	err;
+ 
+ 	is_group_manager = MLX5_CAP_GEN(dev, vport_group_manager);
+ 	in = mlx5_vzalloc(in_sz);
+ 	if (!in) {
+ 		err = -ENOMEM;
+ 		return err;
+ 	}
+ 
+ 	MLX5_SET(query_vport_counter_in, in, opcode,
+ 		 MLX5_CMD_OP_QUERY_VPORT_COUNTER);
+ 	if (other_vport) {
+ 		if (is_group_manager) {
+ 			MLX5_SET(query_vport_counter_in, in, other_vport, 1);
+ 			MLX5_SET(query_vport_counter_in, in, vport_number, 0);
+ 		} else {
+ 			err = -EPERM;
+ 			goto free;
+ 		}
+ 	}
+ 	if (MLX5_CAP_GEN(dev, num_ports) == 2)
+ 		MLX5_SET(query_vport_counter_in, in, port_num, port_num);
+ 
+ 	err = mlx5_cmd_exec(dev, in, in_sz, out,  out_sz);
+ 	if (err)
+ 		goto free;
+ 	err = mlx5_cmd_status_to_err_v2(out);
+ 
+ free:
+ 	kvfree(in);
+ 	return err;
+ }
+ EXPORT_SYMBOL_GPL(mlx5_core_query_vport_counter);
++>>>>>>> b54ba2772b7a (net/mlx5_core: Add helper function to read virtual port counters)
diff --cc include/linux/mlx5/mlx5_ifc.h
index 3446b357315b,0732e6c1fe7a..000000000000
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@@ -3119,15 -3126,16 +3119,20 @@@ struct mlx5_ifc_query_vport_counter_in_
  	u8         op_mod[0x10];
  
  	u8         other_vport[0x1];
++<<<<<<< HEAD
 +	u8         reserved_2[0xf];
++=======
+ 	u8         reserved_at_41[0xb];
+ 	u8	   port_num[0x4];
++>>>>>>> b54ba2772b7a (net/mlx5_core: Add helper function to read virtual port counters)
  	u8         vport_number[0x10];
  
 -	u8         reserved_at_60[0x60];
 +	u8         reserved_3[0x60];
  
  	u8         clear[0x1];
 -	u8         reserved_at_c1[0x1f];
 +	u8         reserved_4[0x1f];
  
 -	u8         reserved_at_e0[0x20];
 +	u8         reserved_5[0x20];
  };
  
  struct mlx5_ifc_query_tis_out_bits {
diff --cc include/linux/mlx5/vport.h
index 638f2ca7a527,a9f2bcc98cab..000000000000
--- a/include/linux/mlx5/vport.h
+++ b/include/linux/mlx5/vport.h
@@@ -85,4 -90,9 +85,12 @@@ int mlx5_modify_nic_vport_vlans(struct 
  				u16 vlans[],
  				int list_size);
  
++<<<<<<< HEAD
++=======
+ int mlx5_nic_vport_enable_roce(struct mlx5_core_dev *mdev);
+ int mlx5_nic_vport_disable_roce(struct mlx5_core_dev *mdev);
+ int mlx5_core_query_vport_counter(struct mlx5_core_dev *dev, u8 other_vport,
+ 				  u8 port_num, void *out, size_t out_sz);
+ 
++>>>>>>> b54ba2772b7a (net/mlx5_core: Add helper function to read virtual port counters)
  #endif /* __MLX5_VPORT_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/vport.c
* Unmerged path include/linux/mlx5/mlx5_ifc.h
* Unmerged path include/linux/mlx5/vport.h
