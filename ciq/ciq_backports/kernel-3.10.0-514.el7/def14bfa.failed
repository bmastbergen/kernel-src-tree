crypto: qat - add support for ctr(aes) and xts(aes)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [crypto] qat - add support for ctr(aes) and xts(aes) (Neil Horman) [1274179]
Rebuild_FUZZ: 91.49%
commit-author Tadeusz Struk <tadeusz.struk@intel.com>
commit def14bfaf30d5d5a4a8fe5bf600ce09232e688c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/def14bfa.failed

Add support for ctr and xts encryption modes.

	Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit def14bfaf30d5d5a4a8fe5bf600ce09232e688c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_common/qat_algs.c
diff --cc drivers/crypto/qat/qat_common/qat_algs.c
index df427c0e9e7b,59e4c3af15ed..000000000000
--- a/drivers/crypto/qat/qat_common/qat_algs.c
+++ b/drivers/crypto/qat/qat_common/qat_algs.c
@@@ -278,12 -269,13 +278,13 @@@ static void qat_alg_init_common_hdr(str
  				       ICP_QAT_FW_LA_NO_UPDATE_STATE);
  }
  
 -static int qat_alg_aead_init_enc_session(struct crypto_aead *aead_tfm,
 +static int qat_alg_aead_init_enc_session(struct qat_alg_aead_ctx *ctx,
  					 int alg,
- 					 struct crypto_authenc_keys *keys)
+ 					 struct crypto_authenc_keys *keys,
+ 					 int mode)
  {
 -	struct qat_alg_aead_ctx *ctx = crypto_aead_ctx(aead_tfm);
 -	unsigned int digestsize = crypto_aead_authsize(aead_tfm);
 +	struct crypto_aead *aead_tfm = __crypto_aead_cast(ctx->tfm);
 +	unsigned int digestsize = crypto_aead_crt(aead_tfm)->authsize;
  	struct qat_enc *enc_ctx = &ctx->enc_cd->qat_enc_cd;
  	struct icp_qat_hw_cipher_algo_blk *cipher = &enc_ctx->cipher;
  	struct icp_qat_hw_auth_algo_blk *hash =
@@@ -358,12 -350,13 +359,13 @@@
  	return 0;
  }
  
 -static int qat_alg_aead_init_dec_session(struct crypto_aead *aead_tfm,
 +static int qat_alg_aead_init_dec_session(struct qat_alg_aead_ctx *ctx,
  					 int alg,
- 					 struct crypto_authenc_keys *keys)
+ 					 struct crypto_authenc_keys *keys,
+ 					 int mode)
  {
 -	struct qat_alg_aead_ctx *ctx = crypto_aead_ctx(aead_tfm);
 -	unsigned int digestsize = crypto_aead_authsize(aead_tfm);
 +	struct crypto_aead *aead_tfm = __crypto_aead_cast(ctx->tfm);
 +	unsigned int digestsize = crypto_aead_crt(aead_tfm)->authsize;
  	struct qat_dec *dec_ctx = &ctx->dec_cd->qat_dec_cd;
  	struct icp_qat_hw_auth_algo_blk *hash = &dec_ctx->hash;
  	struct icp_qat_hw_cipher_algo_blk *cipher =
@@@ -515,8 -527,8 +536,13 @@@ static int qat_alg_validate_key(int key
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int qat_alg_aead_init_sessions(struct qat_alg_aead_ctx *ctx,
 +				      const uint8_t *key, unsigned int keylen)
++=======
+ static int qat_alg_aead_init_sessions(struct crypto_aead *tfm, const u8 *key,
+ 				      unsigned int keylen,  int mode)
++>>>>>>> def14bfaf30d (crypto: qat - add support for ctr(aes) and xts(aes))
  {
  	struct crypto_authenc_keys keys;
  	int alg;
@@@ -527,13 -536,13 +553,20 @@@
  	if (crypto_authenc_extractkeys(&keys, key, keylen))
  		goto bad_key;
  
- 	if (qat_alg_validate_key(keys.enckeylen, &alg))
+ 	if (qat_alg_validate_key(keys.enckeylen, &alg, mode))
  		goto bad_key;
  
++<<<<<<< HEAD
 +	if (qat_alg_aead_init_enc_session(ctx, alg, &keys))
 +		goto error;
 +
 +	if (qat_alg_aead_init_dec_session(ctx, alg, &keys))
++=======
+ 	if (qat_alg_aead_init_enc_session(tfm, alg, &keys, mode))
+ 		goto error;
+ 
+ 	if (qat_alg_aead_init_dec_session(tfm, alg, &keys, mode))
++>>>>>>> def14bfaf30d (crypto: qat - add support for ctr(aes) and xts(aes))
  		goto error;
  
  	return 0;
@@@ -602,8 -608,8 +636,13 @@@ static int qat_alg_aead_setkey(struct c
  			goto out_free_enc;
  		}
  	}
++<<<<<<< HEAD
 +	spin_unlock(&ctx->lock);
 +	if (qat_alg_aead_init_sessions(ctx, key, keylen))
++=======
+ 	if (qat_alg_aead_init_sessions(tfm, key, keylen,
+ 				       ICP_QAT_HW_CIPHER_CBC_MODE))
++>>>>>>> def14bfaf30d (crypto: qat - add support for ctr(aes) and xts(aes))
  		goto out_free_all;
  
  	return 0;
@@@ -936,28 -898,9 +975,28 @@@ static int qat_alg_aead_enc_internal(st
  	return -EINPROGRESS;
  }
  
 +static int qat_alg_aead_enc(struct aead_request *areq)
 +{
 +	return qat_alg_aead_enc_internal(areq, areq->iv, 0);
 +}
 +
 +static int qat_alg_aead_genivenc(struct aead_givcrypt_request *req)
 +{
 +	struct crypto_aead *aead_tfm = crypto_aead_reqtfm(&req->areq);
 +	struct crypto_tfm *tfm = crypto_aead_tfm(aead_tfm);
 +	struct qat_alg_aead_ctx *ctx = crypto_tfm_ctx(tfm);
 +	__be64 seq;
 +
 +	memcpy(req->giv, ctx->salt, AES_BLOCK_SIZE);
 +	seq = cpu_to_be64(req->seq);
 +	memcpy(req->giv + AES_BLOCK_SIZE - sizeof(uint64_t),
 +	       &seq, sizeof(uint64_t));
 +	return qat_alg_aead_enc_internal(&req->areq, req->giv, 1);
 +}
 +
  static int qat_alg_ablkcipher_setkey(struct crypto_ablkcipher *tfm,
- 				     const uint8_t *key,
- 				     unsigned int keylen)
+ 				     const u8 *key, unsigned int keylen,
+ 				     int mode)
  {
  	struct qat_alg_ablkcipher_ctx *ctx = crypto_ablkcipher_ctx(tfm);
  	struct device *dev;
* Unmerged path drivers/crypto/qat/qat_common/qat_algs.c
