cpufreq: Fix formatting issues in 'struct cpufreq_driver'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [cpufreq] Fix formatting issues in 'struct cpufreq_driver' (Gustavo Duarte) [1346246]
Rebuild_FUZZ: 91.43%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 90452e61137a3e88aa705d3efcb3874f3ce8d390
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/90452e61.failed

Adding any new callback to 'struct cpufreq_driver' gives following checkpatch
warning:

WARNING: Unnecessary space before function pointer arguments
+	void	(*ready)	(struct cpufreq_policy *policy);

This is because we have been using a tab spacing between function pointer name
and its arguments and the new one tried to follow that.

Though we normally don't try to fix every checkpatch warning, specially around
formatting issues as that creates unnecessary noise over lists. But I thought we
better fix this so that new additions don't generate these warnings plus it
looks far better/symmetric now.

So, remove these tab spacing issues in 'struct cpufreq_driver' only + fix
alignment of all members.

	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Reviewed-by: Eduardo Valentin <edubezval@gmail.com>
	Tested-by: Eduardo Valentin <edubezval@gmail.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 90452e61137a3e88aa705d3efcb3874f3ce8d390)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/cpufreq.h
diff --cc include/linux/cpufreq.h
index 0c6cbe6ccb72,db3c13085671..000000000000
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@@ -163,114 -139,94 +163,120 @@@ static inline bool policy_is_shared(str
  	return cpumask_weight(policy->cpus) > 1;
  }
  
 -/* /sys/devices/system/cpu/cpufreq: entry point for global variables */
 -extern struct kobject *cpufreq_global_kobject;
 -int cpufreq_get_global_kobject(void);
 -void cpufreq_put_global_kobject(void);
 -int cpufreq_sysfs_create_file(const struct attribute *attr);
 -void cpufreq_sysfs_remove_file(const struct attribute *attr);
 +/******************** cpufreq transition notifiers *******************/
  
 -#ifdef CONFIG_CPU_FREQ
 -unsigned int cpufreq_get(unsigned int cpu);
 -unsigned int cpufreq_quick_get(unsigned int cpu);
 -unsigned int cpufreq_quick_get_max(unsigned int cpu);
 -void disable_cpufreq(void);
 +#define CPUFREQ_PRECHANGE	(0)
 +#define CPUFREQ_POSTCHANGE	(1)
  
 -u64 get_cpu_idle_time(unsigned int cpu, u64 *wall, int io_busy);
 -int cpufreq_get_policy(struct cpufreq_policy *policy, unsigned int cpu);
 -int cpufreq_update_policy(unsigned int cpu);
 -bool have_governor_per_policy(void);
 -struct kobject *get_governor_parent_kobj(struct cpufreq_policy *policy);
 -#else
 -static inline unsigned int cpufreq_get(unsigned int cpu)
 -{
 -	return 0;
 -}
 -static inline unsigned int cpufreq_quick_get(unsigned int cpu)
 -{
 -	return 0;
 -}
 -static inline unsigned int cpufreq_quick_get_max(unsigned int cpu)
 +struct cpufreq_freqs {
 +	unsigned int cpu;	/* cpu nr */
 +	unsigned int old;
 +	unsigned int new;
 +	u8 flags;		/* flags of cpufreq_driver, see below. */
 +};
 +
 +/**
 + * cpufreq_scale - "old * mult / div" calculation for large values (32-bit-arch
 + * safe)
 + * @old:   old value
 + * @div:   divisor
 + * @mult:  multiplier
 + *
 + *
 + * new = old * mult / div
 + */
 +static inline unsigned long cpufreq_scale(unsigned long old, u_int div,
 +		u_int mult)
  {
 -	return 0;
 -}
 -static inline void disable_cpufreq(void) { }
 +#if BITS_PER_LONG == 32
 +
 +	u64 result = ((u64) old) * ((u64) mult);
 +	do_div(result, div);
 +	return (unsigned long) result;
 +
 +#elif BITS_PER_LONG == 64
 +
 +	unsigned long result = old * ((u64) mult);
 +	result /= div;
 +	return result;
 +
  #endif
 +};
  
  /*********************************************************************
 - *                      CPUFREQ DRIVER INTERFACE                     *
 + *                          CPUFREQ GOVERNORS                        *
   *********************************************************************/
  
 -#define CPUFREQ_RELATION_L 0  /* lowest frequency at or above target */
 -#define CPUFREQ_RELATION_H 1  /* highest frequency below or at target */
 -#define CPUFREQ_RELATION_C 2  /* closest frequency to target */
 +#define CPUFREQ_GOV_START	1
 +#define CPUFREQ_GOV_STOP	2
 +#define CPUFREQ_GOV_LIMITS	3
 +#define CPUFREQ_GOV_POLICY_INIT	4
 +#define CPUFREQ_GOV_POLICY_EXIT	5
  
 -struct freq_attr {
 -	struct attribute attr;
 -	ssize_t (*show)(struct cpufreq_policy *, char *);
 -	ssize_t (*store)(struct cpufreq_policy *, const char *, size_t count);
 +struct cpufreq_governor {
 +	char	name[CPUFREQ_NAME_LEN];
 +	int	initialized;
 +	int	(*governor)	(struct cpufreq_policy *policy,
 +				 unsigned int event);
 +	ssize_t	(*show_setspeed)	(struct cpufreq_policy *policy,
 +					 char *buf);
 +	int	(*store_setspeed)	(struct cpufreq_policy *policy,
 +					 unsigned int freq);
 +	unsigned int max_transition_latency; /* HW must be able to switch to
 +			next freq faster than this value in nano secs or we
 +			will fallback to performance governor */
 +	struct list_head	governor_list;
 +	struct module		*owner;
  };
  
 -#define cpufreq_freq_attr_ro(_name)		\
 -static struct freq_attr _name =			\
 -__ATTR(_name, 0444, show_##_name, NULL)
 -
 -#define cpufreq_freq_attr_ro_perm(_name, _perm)	\
 -static struct freq_attr _name =			\
 -__ATTR(_name, _perm, show_##_name, NULL)
 -
 -#define cpufreq_freq_attr_rw(_name)		\
 -static struct freq_attr _name =			\
 -__ATTR(_name, 0644, show_##_name, store_##_name)
 +/*
 + * Pass a target to the cpufreq driver.
 + */
 +extern int cpufreq_driver_target(struct cpufreq_policy *policy,
 +				 unsigned int target_freq,
 +				 unsigned int relation);
 +extern int __cpufreq_driver_target(struct cpufreq_policy *policy,
 +				   unsigned int target_freq,
 +				   unsigned int relation);
 +int cpufreq_register_governor(struct cpufreq_governor *governor);
 +void cpufreq_unregister_governor(struct cpufreq_governor *governor);
  
 -struct global_attr {
 -	struct attribute attr;
 -	ssize_t (*show)(struct kobject *kobj,
 -			struct attribute *attr, char *buf);
 -	ssize_t (*store)(struct kobject *a, struct attribute *b,
 -			 const char *c, size_t count);
 -};
 +#ifdef CONFIG_CPU_FREQ
 +void cpufreq_suspend(void);
 +void cpufreq_resume(void);
 +int cpufreq_generic_suspend(struct cpufreq_policy *policy);
 +#else
 +static inline void cpufreq_suspend(void) {}
 +static inline void cpufreq_resume(void) {}
 +#endif
  
 -#define define_one_global_ro(_name)		\
 -static struct global_attr _name =		\
 -__ATTR(_name, 0444, show_##_name, NULL)
 +/*********************************************************************
 + *                      CPUFREQ DRIVER INTERFACE                     *
 + *********************************************************************/
  
 -#define define_one_global_rw(_name)		\
 -static struct global_attr _name =		\
 -__ATTR(_name, 0644, show_##_name, store_##_name)
 +#define CPUFREQ_RELATION_L 0  /* lowest frequency at or above target */
 +#define CPUFREQ_RELATION_H 1  /* highest frequency below or at target */
 +#define CPUFREQ_RELATION_C 2  /* closest frequency to target */
  
 +struct freq_attr;
  
  struct cpufreq_driver {
++<<<<<<< HEAD
 +	struct module		*owner;
 +	char			name[CPUFREQ_NAME_LEN];
 +	u8			flags;
++=======
+ 	char		name[CPUFREQ_NAME_LEN];
+ 	u8		flags;
+ 	void		*driver_data;
++>>>>>>> 90452e61137a (cpufreq: Fix formatting issues in 'struct cpufreq_driver')
  
  	/* needed by all drivers */
- 	int	(*init)		(struct cpufreq_policy *policy);
- 	int	(*verify)	(struct cpufreq_policy *policy);
+ 	int		(*init)(struct cpufreq_policy *policy);
+ 	int		(*verify)(struct cpufreq_policy *policy);
  
  	/* define one out of two */
- 	int	(*setpolicy)	(struct cpufreq_policy *policy);
+ 	int		(*setpolicy)(struct cpufreq_policy *policy);
  
  	/*
  	 * On failure, should always restore frequency to policy->restore_freq
* Unmerged path include/linux/cpufreq.h
