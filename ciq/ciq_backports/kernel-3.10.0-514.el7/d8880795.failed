net/mlx5e: Implement DCBNL IEEE max rate

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [include] mlx5e: Implement DCBNL IEEE max rate (kamal heib) [1275159 1296272 1296405 1298421 1298422 1298423 1298424 1298425]
Rebuild_FUZZ: 94.74%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit d8880795dabf2381ed1e98348f6d9c7ea6fab950
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d8880795.failed

Add support for DCBNL IEEE get/set max rate.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d8880795dabf2381ed1e98348f6d9c7ea6fab950)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_dcbnl.c
#	drivers/net/ethernet/mellanox/mlx5/core/port.c
#	include/linux/mlx5/port.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/port.c
index dae70500b6a9,d97605ef3efd..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/port.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/port.c
@@@ -405,3 -405,144 +405,147 @@@ int mlx5_query_port_pfc(struct mlx5_cor
  	return 0;
  }
  EXPORT_SYMBOL_GPL(mlx5_query_port_pfc);
++<<<<<<< HEAD
++=======
+ 
+ int mlx5_max_tc(struct mlx5_core_dev *mdev)
+ {
+ 	u8 num_tc = MLX5_CAP_GEN(mdev, max_tc) ? : 8;
+ 
+ 	return num_tc - 1;
+ }
+ 
+ int mlx5_set_port_prio_tc(struct mlx5_core_dev *mdev, u8 *prio_tc)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(qtct_reg)];
+ 	u32 out[MLX5_ST_SZ_DW(qtct_reg)];
+ 	int err;
+ 	int i;
+ 
+ 	memset(in, 0, sizeof(in));
+ 	for (i = 0; i < 8; i++) {
+ 		if (prio_tc[i] > mlx5_max_tc(mdev))
+ 			return -EINVAL;
+ 
+ 		MLX5_SET(qtct_reg, in, prio, i);
+ 		MLX5_SET(qtct_reg, in, tclass, prio_tc[i]);
+ 
+ 		err = mlx5_core_access_reg(mdev, in, sizeof(in), out,
+ 					   sizeof(out), MLX5_REG_QTCT, 0, 1);
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(mlx5_set_port_prio_tc);
+ 
+ static int mlx5_set_port_qetcr_reg(struct mlx5_core_dev *mdev, u32 *in,
+ 				   int inlen)
+ {
+ 	u32 out[MLX5_ST_SZ_DW(qtct_reg)];
+ 
+ 	if (!MLX5_CAP_GEN(mdev, ets))
+ 		return -ENOTSUPP;
+ 
+ 	return mlx5_core_access_reg(mdev, in, inlen, out, sizeof(out),
+ 				    MLX5_REG_QETCR, 0, 1);
+ }
+ 
+ static int mlx5_query_port_qetcr_reg(struct mlx5_core_dev *mdev, u32 *out,
+ 				     int outlen)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(qtct_reg)];
+ 
+ 	if (!MLX5_CAP_GEN(mdev, ets))
+ 		return -ENOTSUPP;
+ 
+ 	memset(in, 0, sizeof(in));
+ 	return mlx5_core_access_reg(mdev, in, sizeof(in), out, outlen,
+ 				    MLX5_REG_QETCR, 0, 0);
+ }
+ 
+ int mlx5_set_port_tc_group(struct mlx5_core_dev *mdev, u8 *tc_group)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(qetc_reg)];
+ 	int i;
+ 
+ 	memset(in, 0, sizeof(in));
+ 
+ 	for (i = 0; i <= mlx5_max_tc(mdev); i++) {
+ 		MLX5_SET(qetc_reg, in, tc_configuration[i].g, 1);
+ 		MLX5_SET(qetc_reg, in, tc_configuration[i].group, tc_group[i]);
+ 	}
+ 
+ 	return mlx5_set_port_qetcr_reg(mdev, in, sizeof(in));
+ }
+ EXPORT_SYMBOL_GPL(mlx5_set_port_tc_group);
+ 
+ int mlx5_set_port_tc_bw_alloc(struct mlx5_core_dev *mdev, u8 *tc_bw)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(qetc_reg)];
+ 	int i;
+ 
+ 	memset(in, 0, sizeof(in));
+ 
+ 	for (i = 0; i <= mlx5_max_tc(mdev); i++) {
+ 		MLX5_SET(qetc_reg, in, tc_configuration[i].b, 1);
+ 		MLX5_SET(qetc_reg, in, tc_configuration[i].bw_allocation, tc_bw[i]);
+ 	}
+ 
+ 	return mlx5_set_port_qetcr_reg(mdev, in, sizeof(in));
+ }
+ EXPORT_SYMBOL_GPL(mlx5_set_port_tc_bw_alloc);
+ 
+ int mlx5_modify_port_ets_rate_limit(struct mlx5_core_dev *mdev,
+ 				    u8 *max_bw_value,
+ 				    u8 *max_bw_units)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(qetc_reg)];
+ 	void *ets_tcn_conf;
+ 	int i;
+ 
+ 	memset(in, 0, sizeof(in));
+ 
+ 	MLX5_SET(qetc_reg, in, port_number, 1);
+ 
+ 	for (i = 0; i <= mlx5_max_tc(mdev); i++) {
+ 		ets_tcn_conf = MLX5_ADDR_OF(qetc_reg, in, tc_configuration[i]);
+ 
+ 		MLX5_SET(ets_tcn_config_reg, ets_tcn_conf, r, 1);
+ 		MLX5_SET(ets_tcn_config_reg, ets_tcn_conf, max_bw_units,
+ 			 max_bw_units[i]);
+ 		MLX5_SET(ets_tcn_config_reg, ets_tcn_conf, max_bw_value,
+ 			 max_bw_value[i]);
+ 	}
+ 
+ 	return mlx5_set_port_qetcr_reg(mdev, in, sizeof(in));
+ }
+ EXPORT_SYMBOL_GPL(mlx5_modify_port_ets_rate_limit);
+ 
+ int mlx5_query_port_ets_rate_limit(struct mlx5_core_dev *mdev,
+ 				   u8 *max_bw_value,
+ 				   u8 *max_bw_units)
+ {
+ 	u32 out[MLX5_ST_SZ_DW(qetc_reg)];
+ 	void *ets_tcn_conf;
+ 	int err;
+ 	int i;
+ 
+ 	err = mlx5_query_port_qetcr_reg(mdev, out, sizeof(out));
+ 	if (err)
+ 		return err;
+ 
+ 	for (i = 0; i <= mlx5_max_tc(mdev); i++) {
+ 		ets_tcn_conf = MLX5_ADDR_OF(qetc_reg, out, tc_configuration[i]);
+ 
+ 		max_bw_value[i] = MLX5_GET(ets_tcn_config_reg, ets_tcn_conf,
+ 					   max_bw_value);
+ 		max_bw_units[i] = MLX5_GET(ets_tcn_config_reg, ets_tcn_conf,
+ 					   max_bw_units);
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(mlx5_query_port_ets_rate_limit);
++>>>>>>> d8880795dabf (net/mlx5e: Implement DCBNL IEEE max rate)
diff --cc include/linux/mlx5/port.h
index 4b3644caa936,595c7b2d9bfa..000000000000
--- a/include/linux/mlx5/port.h
+++ b/include/linux/mlx5/port.h
@@@ -70,4 -70,16 +70,19 @@@ int mlx5_set_port_pfc(struct mlx5_core_
  int mlx5_query_port_pfc(struct mlx5_core_dev *dev, u8 *pfc_en_tx,
  			u8 *pfc_en_rx);
  
++<<<<<<< HEAD
++=======
+ int mlx5_max_tc(struct mlx5_core_dev *mdev);
+ 
+ int mlx5_set_port_prio_tc(struct mlx5_core_dev *mdev, u8 *prio_tc);
+ int mlx5_set_port_tc_group(struct mlx5_core_dev *mdev, u8 *tc_group);
+ int mlx5_set_port_tc_bw_alloc(struct mlx5_core_dev *mdev, u8 *tc_bw);
+ int mlx5_modify_port_ets_rate_limit(struct mlx5_core_dev *mdev,
+ 				    u8 *max_bw_value,
+ 				    u8 *max_bw_unit);
+ int mlx5_query_port_ets_rate_limit(struct mlx5_core_dev *mdev,
+ 				   u8 *max_bw_value,
+ 				   u8 *max_bw_unit);
+ 
++>>>>>>> d8880795dabf (net/mlx5e: Implement DCBNL IEEE max rate)
  #endif /* __MLX5_PORT_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_dcbnl.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_dcbnl.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/port.c
diff --git a/include/linux/mlx5/device.h b/include/linux/mlx5/device.h
index 399e8ec7a944..a1e533c3e774 100644
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@ -350,6 +350,12 @@ enum {
 	MLX5_SET_PORT_PKEY_TABLE	= 20,
 };
 
+enum {
+	MLX5_BW_NO_LIMIT   = 0,
+	MLX5_100_MBPS_UNIT = 3,
+	MLX5_GBPS_UNIT	   = 4,
+};
+
 enum {
 	MLX5_MAX_PAGE_SHIFT		= 31
 };
* Unmerged path include/linux/mlx5/port.h
