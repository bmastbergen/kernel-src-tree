x86/microcode: Remove redundant __setup() param parsing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode: Remove redundant __setup() param parsing (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 96.23%
commit-author Borislav Petkov <bp@suse.de>
commit e8c8165ecfb1cfd6650777c193361d33b0f7f59e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e8c8165e.failed

We do parse for the disable microcode loader chicken bit very early.
After the driver merge, the __setup() param parsing method is not needed
anymore so get rid of it.

In addition, fix a compiler warning from an old SLES11 gcc (4.3.4)
reported by Jan Beulich <jbeulich@suse.com>:

  arch/x86/kernel/cpu/microcode/core.c: In function ‘load_ucode_bsp’:
  arch/x86/kernel/cpu/microcode/core.c:96: warning: array subscript is above array bounds

	Tested-by: Thomas Voegtle <tv@lio96.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1454499225-21544-4-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e8c8165ecfb1cfd6650777c193361d33b0f7f59e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/core.c
diff --cc arch/x86/kernel/cpu/microcode/core.c
index 9ca8f8b3983f,bca4e48b531d..000000000000
--- a/arch/x86/kernel/cpu/microcode/core.c
+++ b/arch/x86/kernel/cpu/microcode/core.c
@@@ -24,23 -31,19 +24,27 @@@
  #include <linux/cpu.h>
  #include <linux/fs.h>
  #include <linux/mm.h>
 +#include <linux/syscore_ops.h>
  
 -#include <asm/microcode_intel.h>
 -#include <asm/cpu_device_id.h>
 -#include <asm/microcode_amd.h>
 -#include <asm/perf_event.h>
  #include <asm/microcode.h>
  #include <asm/processor.h>
 -#include <asm/cmdline.h>
 +#include <asm/cpu_device_id.h>
 +#include <asm/perf_event.h>
 +
 +MODULE_DESCRIPTION("Microcode Update Driver");
 +MODULE_AUTHOR("Tigran Aivazian <tigran@aivazian.fsnet.co.uk>");
 +MODULE_LICENSE("GPL");
  
 -#define MICROCODE_VERSION	"2.01"
 +#define MICROCODE_VERSION	"2.00"
  
  static struct microcode_ops	*microcode_ops;
++<<<<<<< HEAD
 +
 +bool dis_ucode_ldr;
 +module_param(dis_ucode_ldr, bool, 0);
++=======
+ static bool dis_ucode_ldr;
++>>>>>>> e8c8165ecfb1 (x86/microcode: Remove redundant __setup() param parsing)
  
  /*
   * Synchronization.
@@@ -68,6 -71,151 +72,154 @@@ struct cpu_info_ctx 
  	int			err;
  };
  
++<<<<<<< HEAD
++=======
+ static bool __init check_loader_disabled_bsp(void)
+ {
+ 	static const char *__dis_opt_str = "dis_ucode_ldr";
+ 
+ #ifdef CONFIG_X86_32
+ 	const char *cmdline = (const char *)__pa_nodebug(boot_command_line);
+ 	const char *option  = (const char *)__pa_nodebug(__dis_opt_str);
+ 	bool *res = (bool *)__pa_nodebug(&dis_ucode_ldr);
+ 
+ #else /* CONFIG_X86_64 */
+ 	const char *cmdline = boot_command_line;
+ 	const char *option  = __dis_opt_str;
+ 	bool *res = &dis_ucode_ldr;
+ #endif
+ 
+ 	if (cmdline_find_option_bool(cmdline, option))
+ 		*res = true;
+ 
+ 	return *res;
+ }
+ 
+ extern struct builtin_fw __start_builtin_fw[];
+ extern struct builtin_fw __end_builtin_fw[];
+ 
+ bool get_builtin_firmware(struct cpio_data *cd, const char *name)
+ {
+ #ifdef CONFIG_FW_LOADER
+ 	struct builtin_fw *b_fw;
+ 
+ 	for (b_fw = __start_builtin_fw; b_fw != __end_builtin_fw; b_fw++) {
+ 		if (!strcmp(name, b_fw->name)) {
+ 			cd->size = b_fw->size;
+ 			cd->data = b_fw->data;
+ 			return true;
+ 		}
+ 	}
+ #endif
+ 	return false;
+ }
+ 
+ void __init load_ucode_bsp(void)
+ {
+ 	int vendor;
+ 	unsigned int family;
+ 
+ 	if (check_loader_disabled_bsp())
+ 		return;
+ 
+ 	if (!have_cpuid_p())
+ 		return;
+ 
+ 	vendor = x86_cpuid_vendor();
+ 	family = x86_cpuid_family();
+ 
+ 	switch (vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (family >= 6)
+ 			load_ucode_intel_bsp();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (family >= 0x10)
+ 			load_ucode_amd_bsp(family);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ static bool check_loader_disabled_ap(void)
+ {
+ #ifdef CONFIG_X86_32
+ 	return *((bool *)__pa_nodebug(&dis_ucode_ldr));
+ #else
+ 	return dis_ucode_ldr;
+ #endif
+ }
+ 
+ void load_ucode_ap(void)
+ {
+ 	int vendor, family;
+ 
+ 	if (check_loader_disabled_ap())
+ 		return;
+ 
+ 	if (!have_cpuid_p())
+ 		return;
+ 
+ 	vendor = x86_cpuid_vendor();
+ 	family = x86_cpuid_family();
+ 
+ 	switch (vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (family >= 6)
+ 			load_ucode_intel_ap();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (family >= 0x10)
+ 			load_ucode_amd_ap();
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ int __init save_microcode_in_initrd(void)
+ {
+ 	struct cpuinfo_x86 *c = &boot_cpu_data;
+ 
+ 	switch (c->x86_vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (c->x86 >= 6)
+ 			save_microcode_in_initrd_intel();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (c->x86 >= 0x10)
+ 			save_microcode_in_initrd_amd();
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ void reload_early_microcode(void)
+ {
+ 	int vendor, family;
+ 
+ 	vendor = x86_cpuid_vendor();
+ 	family = x86_cpuid_family();
+ 
+ 	switch (vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (family >= 6)
+ 			reload_ucode_intel();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (family >= 0x10)
+ 			reload_ucode_amd();
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> e8c8165ecfb1 (x86/microcode: Remove redundant __setup() param parsing)
  static void collect_cpu_info_local(void *arg)
  {
  	struct cpu_info_ctx *ctx = arg;
* Unmerged path arch/x86/kernel/cpu/microcode/core.c
