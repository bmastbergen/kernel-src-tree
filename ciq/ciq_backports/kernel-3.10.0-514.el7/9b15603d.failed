MD: change journal disk role to disk 0

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [md] change journal disk role to disk 0 (Jes Sorensen) [1250578 1265947 1273343 1299140 1307091 1312828 1320563 1340839]
Rebuild_FUZZ: 94.44%
commit-author Shaohua Li <shli@fb.com>
commit 9b15603dbd98ad1003355ef6ac7d682c75df81c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9b15603d.failed

Neil pointed out setting journal disk role to raid_disks will confuse
reshape if we support reshape eventually. Switching the role to 0 (we
should be fine as long as the value >=0) and skip sysfs file creation to
avoid error.

	Signed-off-by: Shaohua Li <shli@fb.com>
	Signed-off-by: NeilBrown <neilb@suse.com>
(cherry picked from commit 9b15603dbd98ad1003355ef6ac7d682c75df81c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
diff --cc drivers/md/md.c
index 23495b11dff1,874c843e72fb..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -1657,6 -1641,19 +1657,22 @@@ static int super_1_validate(struct mdde
  		case MD_DISK_ROLE_FAULTY: /* faulty */
  			set_bit(Faulty, &rdev->flags);
  			break;
++<<<<<<< HEAD
++=======
+ 		case MD_DISK_ROLE_JOURNAL: /* journal device */
+ 			if (!(le32_to_cpu(sb->feature_map) & MD_FEATURE_JOURNAL)) {
+ 				/* journal device without journal feature */
+ 				printk(KERN_WARNING
+ 				  "md: journal device provided without journal feature, ignoring the device\n");
+ 				return -EINVAL;
+ 			}
+ 			set_bit(Journal, &rdev->flags);
+ 			rdev->journal_tail = le64_to_cpu(sb->journal_tail);
+ 			if (mddev->recovery_cp == MaxSector)
+ 				set_bit(MD_JOURNAL_CLEAN, &mddev->flags);
+ 			rdev->raid_disk = 0;
+ 			break;
++>>>>>>> 9b15603dbd98 (MD: change journal disk role to disk 0)
  		default:
  			rdev->saved_raid_disk = role;
  			if ((le32_to_cpu(sb->feature_map) &
* Unmerged path drivers/md/md.c
diff --git a/drivers/md/md.h b/drivers/md/md.h
index f8d82442ce8b..b062a3e1d012 100644
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@ -554,7 +554,9 @@ static inline char * mdname (struct mddev * mddev)
 static inline int sysfs_link_rdev(struct mddev *mddev, struct md_rdev *rdev)
 {
 	char nm[20];
-	if (!test_bit(Replacement, &rdev->flags) && mddev->kobj.sd) {
+	if (!test_bit(Replacement, &rdev->flags) &&
+	    !test_bit(Journal, &rdev->flags) &&
+	    mddev->kobj.sd) {
 		sprintf(nm, "rd%d", rdev->raid_disk);
 		return sysfs_create_link(&mddev->kobj, &rdev->kobj, nm);
 	} else
@@ -564,7 +566,9 @@ static inline int sysfs_link_rdev(struct mddev *mddev, struct md_rdev *rdev)
 static inline void sysfs_unlink_rdev(struct mddev *mddev, struct md_rdev *rdev)
 {
 	char nm[20];
-	if (!test_bit(Replacement, &rdev->flags) && mddev->kobj.sd) {
+	if (!test_bit(Replacement, &rdev->flags) &&
+	    !test_bit(Journal, &rdev->flags) &&
+	    mddev->kobj.sd) {
 		sprintf(nm, "rd%d", rdev->raid_disk);
 		sysfs_remove_link(&mddev->kobj, nm);
 	}
