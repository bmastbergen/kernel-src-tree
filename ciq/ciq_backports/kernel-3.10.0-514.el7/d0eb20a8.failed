sd: Optimal I/O size is in bytes, not sectors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Martin K. Petersen <martin.petersen@oracle.com>
commit d0eb20a863ba7dc1d3f4b841639671f134560be2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d0eb20a8.failed

Commit ca369d51b3e1 ("block/sd: Fix device-imposed transfer length
limits") accidentally switched optimal I/O size reporting from bytes to
block layer sectors.

	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
	Reported-by: Christian Borntraeger <borntraeger@de.ibm.com>
	Tested-by: Christian Borntraeger <borntraeger@de.ibm.com>
Fixes: ca369d51b3e1649be4a72addd6d6a168cfb3f537
	Cc: stable@vger.kernel.org # 4.4+
	Reviewed-by: James E.J. Bottomley <James.Bottomley@HansenPartnership.com>
	Reviewed-by: Ewan D. Milne <emilne@redhat.com>
	Reviewed-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
(cherry picked from commit d0eb20a863ba7dc1d3f4b841639671f134560be2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd.c
diff --cc drivers/scsi/sd.c
index aba2f00de9b1,ec163d08f6c3..000000000000
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@@ -2893,11 -2876,29 +2893,34 @@@ static int sd_revalidate_disk(struct ge
  	 */
  	sd_set_flush_flag(sdkp);
  
 -	/* Initial block count limit based on CDB TRANSFER LENGTH field size. */
 -	dev_max = sdp->use_16_for_rw ? SD_MAX_XFER_BLOCKS : SD_DEF_XFER_BLOCKS;
 +	max_xfer = sdkp->max_xfer_blocks;
 +	max_xfer <<= ilog2(sdp->sector_size) - 9;
  
++<<<<<<< HEAD
 +	sdkp->disk->queue->limits.max_sectors =
 +		min_not_zero(queue_max_hw_sectors(sdkp->disk->queue), max_xfer);
++=======
+ 	/* Some devices report a maximum block count for READ/WRITE requests. */
+ 	dev_max = min_not_zero(dev_max, sdkp->max_xfer_blocks);
+ 	q->limits.max_dev_sectors = logical_to_sectors(sdp, dev_max);
+ 
+ 	/*
+ 	 * Use the device's preferred I/O size for reads and writes
+ 	 * unless the reported value is unreasonably small, large, or
+ 	 * garbage.
+ 	 */
+ 	if (sdkp->opt_xfer_blocks &&
+ 	    sdkp->opt_xfer_blocks <= dev_max &&
+ 	    sdkp->opt_xfer_blocks <= SD_DEF_XFER_BLOCKS &&
+ 	    sdkp->opt_xfer_blocks * sdp->sector_size >= PAGE_CACHE_SIZE)
+ 		rw_max = q->limits.io_opt =
+ 			sdkp->opt_xfer_blocks * sdp->sector_size;
+ 	else
+ 		rw_max = BLK_DEF_MAX_SECTORS;
+ 
+ 	/* Combine with controller limits */
+ 	q->limits.max_sectors = min(rw_max, queue_max_hw_sectors(q));
++>>>>>>> d0eb20a863ba (sd: Optimal I/O size is in bytes, not sectors)
  
  	set_capacity(disk, sdkp->capacity);
  	sd_config_write_same(sdkp);
* Unmerged path drivers/scsi/sd.c
