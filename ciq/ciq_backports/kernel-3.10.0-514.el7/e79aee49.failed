PM: Avoid false-positive warnings in dev_pm_domain_set()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit e79aee49bcf9ad005b3f2f4cf68b17dc2c22d9c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e79aee49.failed

There is a WARN_ON() in dev_pm_domain_set() that triggers on attempts
to set the pm_domain pointer for devices with a driver bound.

However, that WARN_ON() triggers on attempts to clear the pointer
too and the test it uses is based on checking the device's
p->knode_driver pointer which still is set when the device bus
type's/driver's ->remove callback has been executed.  This
leads to false-positive warnings when bus type code calls
dev_pm_domain_set() to clear the pm_domain pointer after
invoking the driver's ->remove() callback.

To avoid those false-positives, make dev_pm_domain_set() check
if the pointer passed to it is NULL and skip the warning in
that case.

Fixes: 989561de9b51 (PM / Domains: add setter for dev.pm_domain)
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Tested-by: Sinan Kaya <okaya@codeaurora.org>
	Tested-by: Steven Rostedt <rostedt@goodmis.org>
	Acked-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit e79aee49bcf9ad005b3f2f4cf68b17dc2c22d9c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/power/common.c
diff --cc drivers/base/power/common.c
index 5da914041305,f6a9ad52cbbf..000000000000
--- a/drivers/base/power/common.c
+++ b/drivers/base/power/common.c
@@@ -82,4 -81,74 +82,49 @@@ int dev_pm_put_subsys_data(struct devic
  
  	return ret;
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL_GPL(dev_pm_put_subsys_data);
++=======
+ EXPORT_SYMBOL_GPL(dev_pm_domain_attach);
+ 
+ /**
+  * dev_pm_domain_detach - Detach a device from its PM domain.
+  * @dev: Device to detach.
+  * @power_off: Used to indicate whether we should power off the device.
+  *
+  * This functions will reverse the actions from dev_pm_domain_attach() and thus
+  * try to detach the @dev from its PM domain. Typically it should be invoked
+  * from subsystem level code during the remove phase.
+  *
+  * Callers must ensure proper synchronization of this function with power
+  * management callbacks.
+  */
+ void dev_pm_domain_detach(struct device *dev, bool power_off)
+ {
+ 	if (dev->pm_domain && dev->pm_domain->detach)
+ 		dev->pm_domain->detach(dev, power_off);
+ }
+ EXPORT_SYMBOL_GPL(dev_pm_domain_detach);
+ 
+ /**
+  * dev_pm_domain_set - Set PM domain of a device.
+  * @dev: Device whose PM domain is to be set.
+  * @pd: PM domain to be set, or NULL.
+  *
+  * Sets the PM domain the device belongs to. The PM domain of a device needs
+  * to be set before its probe finishes (it's bound to a driver).
+  *
+  * This function must be called with the device lock held.
+  */
+ void dev_pm_domain_set(struct device *dev, struct dev_pm_domain *pd)
+ {
+ 	if (dev->pm_domain == pd)
+ 		return;
+ 
+ 	WARN(pd && device_is_bound(dev),
+ 	     "PM domains can only be changed for unbound devices\n");
+ 	dev->pm_domain = pd;
+ 	device_pm_check_callbacks(dev);
+ }
+ EXPORT_SYMBOL_GPL(dev_pm_domain_set);
++>>>>>>> e79aee49bcf9 (PM: Avoid false-positive warnings in dev_pm_domain_set())
* Unmerged path drivers/base/power/common.c
