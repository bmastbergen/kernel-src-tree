x86/uaccess: Add stack frame output operand in get_user() inline asm

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] revert "uaccess: Add stack frame output operand in get_user() inline asm" (Josh Poimboeuf) [1347232]
Rebuild_FUZZ: 90.78%
commit-author Chris J Arges <chris.j.arges@canonical.com>
commit f05058c4d652b619adfda6c78d8f5b341169c264
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f05058c4.failed

Numerous 'call without frame pointer save/setup' warnings are introduced
by stacktool because of functions using the get_user() macro. Bad stack
traces could occur due to lack of or misplacement of stack frame setup
code.

This patch forces a stack frame to be created before the inline asm code
if CONFIG_FRAME_POINTER is enabled by listing the stack pointer as an
output operand for the get_user() inline assembly statement.

	Signed-off-by: Chris J Arges <chris.j.arges@canonical.com>
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: live-patching@vger.kernel.org
Link: http://lkml.kernel.org/r/bc85501f221ee512670797c7f110022e64b12c81.1453405861.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f05058c4d652b619adfda6c78d8f5b341169c264)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/uaccess.h
diff --cc arch/x86/include/asm/uaccess.h
index c9544c24528c,9bbb3b2d0372..000000000000
--- a/arch/x86/include/asm/uaccess.h
+++ b/arch/x86/include/asm/uaccess.h
@@@ -162,14 -178,15 +162,19 @@@ __typeof__(__builtin_choose_expr(sizeof
  #define get_user(x, ptr)						\
  ({									\
  	int __ret_gu;							\
++<<<<<<< HEAD
 +	register __inttype(*(ptr)) __val_gu asm("%edx");		\
++=======
+ 	register __inttype(*(ptr)) __val_gu asm("%"_ASM_DX);		\
+ 	register void *__sp asm(_ASM_SP);				\
++>>>>>>> f05058c4d652 (x86/uaccess: Add stack frame output operand in get_user() inline asm)
  	__chk_user_ptr(ptr);						\
  	might_fault();							\
- 	asm volatile("call __get_user_%P3"				\
- 		     : "=a" (__ret_gu), "=r" (__val_gu)			\
+ 	asm volatile("call __get_user_%P4"				\
+ 		     : "=a" (__ret_gu), "=r" (__val_gu), "+r" (__sp)	\
  		     : "0" (ptr), "i" (sizeof(*(ptr))));		\
 -	(x) = (__force __typeof__(*(ptr))) __val_gu;			\
 -	__builtin_expect(__ret_gu, 0);					\
 +	(x) = (__typeof__(*(ptr))) __val_gu;				\
 +	__ret_gu;							\
  })
  
  #define __put_user_x(size, x, ptr, __ret_pu)			\
* Unmerged path arch/x86/include/asm/uaccess.h
