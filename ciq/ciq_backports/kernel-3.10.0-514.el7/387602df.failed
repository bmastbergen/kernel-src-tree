sctp: remove macros sctp_write_[un]_lock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author wangweidong <wangweidong1@huawei.com>
commit 387602dfdc3332f786f6195c74d53f9e8f7af402
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/387602df.failed

Redefined write_[un]lock to sctp_write_[un]lock for user space
friendly code which we haven't use in years, so removing them.

	Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 387602dfdc3332f786f6195c74d53f9e8f7af402)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sctp/sctp.h
diff --cc include/net/sctp/sctp.h
index 1619519658e4,73dcc0c82749..000000000000
--- a/include/net/sctp/sctp.h
+++ b/include/net/sctp/sctp.h
@@@ -210,12 -171,6 +210,15 @@@ extern struct kmem_cache *sctp_bucket_c
   */
  
  /* spin lock wrappers. */
++<<<<<<< HEAD
 +#define sctp_local_bh_disable() local_bh_disable()
 +#define sctp_local_bh_enable()  local_bh_enable()
 +#define sctp_spin_lock(lock)    spin_lock(lock)
 +#define sctp_spin_unlock(lock)  spin_unlock(lock)
 +#define sctp_write_lock(lock)   write_lock(lock)
 +#define sctp_write_unlock(lock) write_unlock(lock)
++=======
++>>>>>>> 387602dfdc33 (sctp: remove macros sctp_write_[un]_lock)
  #define sctp_read_lock(lock)    read_lock(lock)
  #define sctp_read_unlock(lock)  read_unlock(lock)
  
* Unmerged path include/net/sctp/sctp.h
diff --git a/net/sctp/input.c b/net/sctp/input.c
index f5c23efe96a7..ea5da216e327 100644
--- a/net/sctp/input.c
+++ b/net/sctp/input.c
@@ -731,9 +731,9 @@ static void __sctp_hash_endpoint(struct sctp_endpoint *ep)
 	epb->hashent = sctp_ep_hashfn(net, epb->bind_addr.port);
 	head = &sctp_ep_hashtable[epb->hashent];
 
-	sctp_write_lock(&head->lock);
+	write_lock(&head->lock);
 	hlist_add_head(&epb->node, &head->chain);
-	sctp_write_unlock(&head->lock);
+	write_unlock(&head->lock);
 }
 
 /* Add an endpoint to the hash. Local BH-safe. */
@@ -757,9 +757,9 @@ static void __sctp_unhash_endpoint(struct sctp_endpoint *ep)
 
 	head = &sctp_ep_hashtable[epb->hashent];
 
-	sctp_write_lock(&head->lock);
+	write_lock(&head->lock);
 	hlist_del_init(&epb->node);
-	sctp_write_unlock(&head->lock);
+	write_unlock(&head->lock);
 }
 
 /* Remove endpoint from the hash.  Local BH-safe. */
@@ -950,9 +950,9 @@ static void __sctp_hash_established(struct sctp_association *asoc)
 
 	head = &sctp_assoc_hashtable[epb->hashent];
 
-	sctp_write_lock(&head->lock);
+	write_lock(&head->lock);
 	hlist_add_head(&epb->node, &head->chain);
-	sctp_write_unlock(&head->lock);
+	write_unlock(&head->lock);
 }
 
 /* Add an association to the hash. Local BH-safe. */
@@ -980,9 +980,9 @@ static void __sctp_unhash_established(struct sctp_association *asoc)
 
 	head = &sctp_assoc_hashtable[epb->hashent];
 
-	sctp_write_lock(&head->lock);
+	write_lock(&head->lock);
 	hlist_del_init(&epb->node);
-	sctp_write_unlock(&head->lock);
+	write_unlock(&head->lock);
 }
 
 /* Remove association from the hash table.  Local BH-safe. */
