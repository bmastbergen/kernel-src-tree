rhashtable: unconditionally grow when max_shift is not specified

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 8331de75cb13fc907ceba78e698c42150e61dda9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8331de75.failed

While commit c0c09bfdc415 ("rhashtable: avoid unnecessary wakeup for
worker queue") rightfully moved part of the decision making of
whether we should expand or shrink from the expand/shrink functions
themselves into insert/delete functions in order to avoid unnecessary
worker wake-ups, it however introduced a regression by doing so.

Before that change, if no max_shift was specified (= 0) on rhashtable
initialization, rhashtable_expand() would just grow unconditionally
and lets the available memory be the limiting factor. After that
change, if no max_shift was specified, there would be _no_ expansion
step at all.

Given that netlink and tipc have a max_shift specified, it was not
visible there, but Josh Hunt reported that if nft that starts out
with a default element hint of 3 if not otherwise provided, would
slow i.e. inserts down trememdously as it cannot grow larger to
relax table occupancy.

Given that the test case verifies shrinks/expands manually, we also
must remove pointer to the helper functions to explicitly avoid
parallel resizing on insertions/deletions. test_bucket_stats() and
test_rht_lookup() could also be wrapped around rhashtable mutex to
explicitly synchronize a walk from resizing, but I think that defeats
the actual test case which intended to have explicit test steps,
i.e. 1) inserts, 2) expands, 3) shrinks, 4) deletions, with object
verification after each stage.

	Reported-by: Josh Hunt <johunt@akamai.com>
Fixes: c0c09bfdc415 ("rhashtable: avoid unnecessary wakeup for worker queue")
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Ying Xue <ying.xue@windriver.com>
	Cc: Josh Hunt <johunt@akamai.com>
	Acked-by: Thomas Graf <tgraf@suug.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8331de75cb13fc907ceba78e698c42150e61dda9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/rhashtable.c
#	lib/test_rhashtable.c
diff --cc lib/rhashtable.c
index 6d0c4774001c,bcf119bfdef4..000000000000
--- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@@ -127,7 -250,8 +127,12 @@@ static void bucket_table_free(const str
  bool rht_grow_above_75(const struct rhashtable *ht, size_t new_size)
  {
  	/* Expand table when exceeding 75% load */
++<<<<<<< HEAD
 +	return ht->nelems > (new_size / 4 * 3);
++=======
+ 	return atomic_read(&ht->nelems) > (new_size / 4 * 3) &&
+ 	       (!ht->p.max_shift || atomic_read(&ht->shift) < ht->p.max_shift);
++>>>>>>> 8331de75cb13 (rhashtable: unconditionally grow when max_shift is not specified)
  }
  EXPORT_SYMBOL_GPL(rht_grow_above_75);
  
* Unmerged path lib/test_rhashtable.c
* Unmerged path lib/rhashtable.c
* Unmerged path lib/test_rhashtable.c
