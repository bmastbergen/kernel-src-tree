GFS2: ignore unlock failures after withdraw

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Benjamin Marzinski <bmarzins@redhat.com>
commit 3e11e530415027a57936545957126aff49267b76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3e11e530.failed

After gfs2 has withdrawn the filesystem, it may still have many locks not
in the unlocked state.  If it is using lock_dlm, it will failed trying
the unlocks since it has already unmounted the lock manager. Instead, it
should set the SDF_SKIP_DLM_UNLOCK flag on withdraw, to signal that
it can skip the lock_manager on unlocks, and failback to lock_nolock
style unlocking.

	Signed-off-by: Benjamin Marzinski <bmarzins@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 3e11e530415027a57936545957126aff49267b76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/glock.c
diff --cc fs/gfs2/glock.c
index ea771a5d5be5,2897ced5fca0..000000000000
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@@ -541,8 -475,15 +541,20 @@@ __acquires(&gl->gl_spin
  	if (sdp->sd_lockstruct.ls_ops->lm_lock)	{
  		/* lock_dlm */
  		ret = sdp->sd_lockstruct.ls_ops->lm_lock(gl, target, lck_flags);
++<<<<<<< HEAD
 +		if (ret) {
 +			printk(KERN_ERR "GFS2: lm_lock ret %d\n", ret);
++=======
+ 		if (ret == -EINVAL && gl->gl_target == LM_ST_UNLOCKED &&
+ 		    target == LM_ST_UNLOCKED &&
+ 		    test_bit(SDF_SKIP_DLM_UNLOCK, &sdp->sd_flags)) {
+ 			finish_xmote(gl, target);
+ 			if (queue_delayed_work(glock_workqueue, &gl->gl_work, 0) == 0)
+ 				gfs2_glock_put(gl);
+ 		}
+ 		else if (ret) {
+ 			pr_err("lm_lock ret %d\n", ret);
++>>>>>>> 3e11e5304150 (GFS2: ignore unlock failures after withdraw)
  			GLOCK_BUG_ON(gl, 1);
  		}
  	} else { /* lock_nolock */
* Unmerged path fs/gfs2/glock.c
diff --git a/fs/gfs2/util.c b/fs/gfs2/util.c
index cdacc01e25b8..b4009e999dbe 100644
--- a/fs/gfs2/util.c
+++ b/fs/gfs2/util.c
@@ -61,6 +61,7 @@ int gfs2_lm_withdraw(struct gfs2_sbd *sdp, char *fmt, ...)
 			fs_err(sdp, "telling LM to unmount\n");
 			lm->lm_unmount(sdp);
 		}
+		set_bit(SDF_SKIP_DLM_UNLOCK, &sdp->sd_flags);
 		fs_err(sdp, "withdrawn\n");
 		dump_stack();
 	}
