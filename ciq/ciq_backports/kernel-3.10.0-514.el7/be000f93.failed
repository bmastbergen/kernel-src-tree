drivers:hv: Track allocations of children of hv_vmbus in private resource tree

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hv] Track allocations of children of hv_vmbus in private resource tree (Vitaly Kuznetsov) [1302147]
Rebuild_FUZZ: 91.67%
commit-author Jake Oshins <jakeo@microsoft.com>
commit be000f93e5d71f5d43dd722f8eb110b069f9d8a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/be000f93.failed

This patch changes vmbus_allocate_mmio() and vmbus_free_mmio() so
that when child paravirtual devices allocate memory-mapped I/O
space, they allocate it privately from a resource tree pointed
at by hyperv_mmio and also by the public resource tree
iomem_resource.  This allows the region to be marked as "busy"
in the private tree, but a "bridge window" in the public tree,
guaranteeing that no two bridge windows will overlap each other
but while also allowing the PCI device children of the bridge
windows to overlap that window.

One might conclude that this belongs in the pnp layer, rather
than in this driver.  Rafael Wysocki, the maintainter of the
pnp layer, has previously asked that we not modify the pnp layer
as it is considered deprecated.  This patch is thus essentially
a workaround.

	Signed-off-by: Jake Oshins <jakeo@microsoft.com>
	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit be000f93e5d71f5d43dd722f8eb110b069f9d8a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/vmbus_drv.c
diff --cc drivers/hv/vmbus_drv.c
index 7882a259dbd0,dfc6149ccc93..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -1045,6 -1085,159 +1045,162 @@@ static acpi_status vmbus_walk_resources
  	return AE_OK;
  }
  
++<<<<<<< HEAD
++=======
+ static int vmbus_acpi_remove(struct acpi_device *device)
+ {
+ 	struct resource *cur_res;
+ 	struct resource *next_res;
+ 
+ 	if (hyperv_mmio) {
+ 		for (cur_res = hyperv_mmio; cur_res; cur_res = next_res) {
+ 			next_res = cur_res->sibling;
+ 			kfree(cur_res);
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ /**
+  * vmbus_allocate_mmio() - Pick a memory-mapped I/O range.
+  * @new:		If successful, supplied a pointer to the
+  *			allocated MMIO space.
+  * @device_obj:		Identifies the caller
+  * @min:		Minimum guest physical address of the
+  *			allocation
+  * @max:		Maximum guest physical address
+  * @size:		Size of the range to be allocated
+  * @align:		Alignment of the range to be allocated
+  * @fb_overlap_ok:	Whether this allocation can be allowed
+  *			to overlap the video frame buffer.
+  *
+  * This function walks the resources granted to VMBus by the
+  * _CRS object in the ACPI namespace underneath the parent
+  * "bridge" whether that's a root PCI bus in the Generation 1
+  * case or a Module Device in the Generation 2 case.  It then
+  * attempts to allocate from the global MMIO pool in a way that
+  * matches the constraints supplied in these parameters and by
+  * that _CRS.
+  *
+  * Return: 0 on success, -errno on failure
+  */
+ int vmbus_allocate_mmio(struct resource **new, struct hv_device *device_obj,
+ 			resource_size_t min, resource_size_t max,
+ 			resource_size_t size, resource_size_t align,
+ 			bool fb_overlap_ok)
+ {
+ 	struct resource *iter, *shadow;
+ 	resource_size_t range_min, range_max, start, local_min, local_max;
+ 	const char *dev_n = dev_name(&device_obj->device);
+ 	u32 fb_end = screen_info.lfb_base + (screen_info.lfb_size << 1);
+ 	int i, retval;
+ 
+ 	retval = -ENXIO;
+ 	down(&hyperv_mmio_lock);
+ 
+ 	for (iter = hyperv_mmio; iter; iter = iter->sibling) {
+ 		if ((iter->start >= max) || (iter->end <= min))
+ 			continue;
+ 
+ 		range_min = iter->start;
+ 		range_max = iter->end;
+ 
+ 		/* If this range overlaps the frame buffer, split it into
+ 		   two tries. */
+ 		for (i = 0; i < 2; i++) {
+ 			local_min = range_min;
+ 			local_max = range_max;
+ 			if (fb_overlap_ok || (range_min >= fb_end) ||
+ 			    (range_max <= screen_info.lfb_base)) {
+ 				i++;
+ 			} else {
+ 				if ((range_min <= screen_info.lfb_base) &&
+ 				    (range_max >= screen_info.lfb_base)) {
+ 					/*
+ 					 * The frame buffer is in this window,
+ 					 * so trim this into the part that
+ 					 * preceeds the frame buffer.
+ 					 */
+ 					local_max = screen_info.lfb_base - 1;
+ 					range_min = fb_end;
+ 				} else {
+ 					range_min = fb_end;
+ 					continue;
+ 				}
+ 			}
+ 
+ 			start = (local_min + align - 1) & ~(align - 1);
+ 			for (; start + size - 1 <= local_max; start += align) {
+ 				shadow = __request_region(iter, start,
+ 							  size,
+ 							  NULL,
+ 							  IORESOURCE_BUSY);
+ 				if (!shadow)
+ 					continue;
+ 
+ 				*new = request_mem_region_exclusive(start, size,
+ 								    dev_n);
+ 				if (*new) {
+ 					shadow->name = (char *)*new;
+ 					retval = 0;
+ 					goto exit;
+ 				}
+ 
+ 				__release_region(iter, start, size);
+ 			}
+ 		}
+ 	}
+ 
+ exit:
+ 	up(&hyperv_mmio_lock);
+ 	return retval;
+ }
+ EXPORT_SYMBOL_GPL(vmbus_allocate_mmio);
+ 
+ /**
+  * vmbus_free_mmio() - Free a memory-mapped I/O range.
+  * @start:		Base address of region to release.
+  * @size:		Size of the range to be allocated
+  *
+  * This function releases anything requested by
+  * vmbus_mmio_allocate().
+  */
+ void vmbus_free_mmio(resource_size_t start, resource_size_t size)
+ {
+ 	struct resource *iter;
+ 
+ 	down(&hyperv_mmio_lock);
+ 	for (iter = hyperv_mmio; iter; iter = iter->sibling) {
+ 		if ((iter->start >= start + size) || (iter->end <= start))
+ 			continue;
+ 
+ 		__release_region(iter, start, size);
+ 	}
+ 	release_mem_region(start, size);
+ 	up(&hyperv_mmio_lock);
+ 
+ }
+ EXPORT_SYMBOL_GPL(vmbus_free_mmio);
+ 
+ /**
+  * vmbus_cpu_number_to_vp_number() - Map CPU to VP.
+  * @cpu_number: CPU number in Linux terms
+  *
+  * This function returns the mapping between the Linux processor
+  * number and the hypervisor's virtual processor number, useful
+  * in making hypercalls and such that talk about specific
+  * processors.
+  *
+  * Return: Virtual processor number in Hyper-V terms
+  */
+ int vmbus_cpu_number_to_vp_number(int cpu_number)
+ {
+ 	return hv_context.vp_index[cpu_number];
+ }
+ EXPORT_SYMBOL_GPL(vmbus_cpu_number_to_vp_number);
+ 
++>>>>>>> be000f93e5d7 (drivers:hv: Track allocations of children of hv_vmbus in private resource tree)
  static int vmbus_acpi_add(struct acpi_device *device)
  {
  	acpi_status result;
* Unmerged path drivers/hv/vmbus_drv.c
