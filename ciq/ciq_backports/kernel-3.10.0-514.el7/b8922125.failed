sched/fair: Fix typo in sync_throttle()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Xunlei Pang <xlpang@redhat.com>
commit b8922125e4790fa237a8a4204562ecf457ef54bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b8922125.failed

We should update cfs_rq->throttled_clock_task, not
pcfs_rq->throttle_clock_task.

The effects of this bug was probably occasionally erratic
group scheduling, particularly in cgroups-intense workloads.

	Signed-off-by: Xunlei Pang <xlpang@redhat.com>
[ Added changelog. ]
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Fixes: 55e16d30bd99 ("sched/fair: Rework throttle_count sync")
Link: http://lkml.kernel.org/r/1468050862-18864-1-git-send-email-xlpang@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b8922125e4790fa237a8a4204562ecf457ef54bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 7fbda546148a,039de34f1521..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -3613,14 -4255,31 +3613,34 @@@ static void check_enqueue_throttle(stru
  		throttle_cfs_rq(cfs_rq);
  }
  
++<<<<<<< HEAD
++=======
+ static void sync_throttle(struct task_group *tg, int cpu)
+ {
+ 	struct cfs_rq *pcfs_rq, *cfs_rq;
+ 
+ 	if (!cfs_bandwidth_used())
+ 		return;
+ 
+ 	if (!tg->parent)
+ 		return;
+ 
+ 	cfs_rq = tg->cfs_rq[cpu];
+ 	pcfs_rq = tg->parent->cfs_rq[cpu];
+ 
+ 	cfs_rq->throttle_count = pcfs_rq->throttle_count;
+ 	cfs_rq->throttled_clock_task = rq_clock_task(cpu_rq(cpu));
+ }
+ 
++>>>>>>> b8922125e479 (sched/fair: Fix typo in sync_throttle())
  /* conditionally throttle active cfs_rq's from put_prev_entity() */
 -static bool check_cfs_rq_runtime(struct cfs_rq *cfs_rq)
 +static void check_cfs_rq_runtime(struct cfs_rq *cfs_rq)
  {
  	if (!cfs_bandwidth_used())
 -		return false;
 +		return;
  
  	if (likely(!cfs_rq->runtime_enabled || cfs_rq->runtime_remaining > 0))
 -		return false;
 +		return;
  
  	/*
  	 * it's possible for a throttled entity to be forced into a running
* Unmerged path kernel/sched/fair.c
