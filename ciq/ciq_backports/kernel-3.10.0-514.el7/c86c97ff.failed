mm: softdirty: clear VM_SOFTDIRTY flag inside clear_refs_write() instead of clear_soft_dirty()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Cyrill Gorcunov <gorcunov@openvz.org>
commit c86c97ff42cd6c6d1bd29eca4dfabeaf2b7f1020
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c86c97ff.failed

clear_refs_write() is called earlier than clear_soft_dirty() and it is
more natural to clear VM_SOFTDIRTY (which belongs to VMA entry but not
PTEs) that early instead of clearing it a way deeper inside call chain.

	Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
	Cc: Pavel Emelyanov <xemul@parallels.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c86c97ff42cd6c6d1bd29eca4dfabeaf2b7f1020)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/task_mmu.c
diff --cc fs/proc/task_mmu.c
index 452c618feb42,2101ce46a5d2..000000000000
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@@ -703,8 -713,34 +703,36 @@@ enum clear_refs_types 
  
  struct clear_refs_private {
  	struct vm_area_struct *vma;
 -	enum clear_refs_types type;
  };
  
++<<<<<<< HEAD
++=======
+ static inline void clear_soft_dirty(struct vm_area_struct *vma,
+ 		unsigned long addr, pte_t *pte)
+ {
+ #ifdef CONFIG_MEM_SOFT_DIRTY
+ 	/*
+ 	 * The soft-dirty tracker uses #PF-s to catch writes
+ 	 * to pages, so write-protect the pte as well. See the
+ 	 * Documentation/vm/soft-dirty.txt for full description
+ 	 * of how soft-dirty works.
+ 	 */
+ 	pte_t ptent = *pte;
+ 
+ 	if (pte_present(ptent)) {
+ 		ptent = pte_wrprotect(ptent);
+ 		ptent = pte_clear_flags(ptent, _PAGE_SOFT_DIRTY);
+ 	} else if (is_swap_pte(ptent)) {
+ 		ptent = pte_swp_clear_soft_dirty(ptent);
+ 	} else if (pte_file(ptent)) {
+ 		ptent = pte_file_clear_soft_dirty(ptent);
+ 	}
+ 
+ 	set_pte_at(vma->vm_mm, addr, pte, ptent);
+ #endif
+ }
+ 
++>>>>>>> c86c97ff42cd (mm: softdirty: clear VM_SOFTDIRTY flag inside clear_refs_write() instead of clear_soft_dirty())
  static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr,
  				unsigned long end, struct mm_walk *walk)
  {
@@@ -759,6 -801,14 +787,17 @@@ static ssize_t clear_refs_write(struct 
  	type = (enum clear_refs_types)itype;
  	if (type < CLEAR_REFS_ALL || type >= CLEAR_REFS_LAST)
  		return -EINVAL;
++<<<<<<< HEAD
++=======
+ 
+ 	if (type == CLEAR_REFS_SOFT_DIRTY) {
+ 		soft_dirty_cleared = true;
+ 		pr_warn_once("The pagemap bits 55-60 has changed their meaning!"
+ 			     " See the linux/Documentation/vm/pagemap.txt for "
+ 			     "details.\n");
+ 	}
+ 
++>>>>>>> c86c97ff42cd (mm: softdirty: clear VM_SOFTDIRTY flag inside clear_refs_write() instead of clear_soft_dirty())
  	task = get_proc_task(file_inode(file));
  	if (!task)
  		return -ESRCH;
* Unmerged path fs/proc/task_mmu.c
