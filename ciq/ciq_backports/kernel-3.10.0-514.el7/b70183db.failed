asix: silence log message from oversize packet

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit b70183db83552cf63cac51406aaf76a2cf5fca73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b70183db.failed

Since it is possible for an external system to send oversize packets
at anytime, it is best for driver not to print a message and spam
the log (potential external DoS).

Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=109471

	Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b70183db83552cf63cac51406aaf76a2cf5fca73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/asix_common.c
diff --cc drivers/net/usb/asix_common.c
index f7ee6338a446,0c5c22b84da8..000000000000
--- a/drivers/net/usb/asix_common.c
+++ b/drivers/net/usb/asix_common.c
@@@ -109,44 -110,45 +109,50 @@@ int asix_rx_fixup_internal(struct usbne
  				offset += sizeof(u32);
  			}
  
 -			/* take frame length from Data header 32-bit word */
 -			size = (u16)(rx->header & 0x7ff);
 -			if (size != ((~rx->header >> 16) & 0x7ff)) {
 +			/* get the packet length */
 +			rx->size = (u16) (rx->header & 0x7ff);
 +			if (rx->size != ((~rx->header >> 16) & 0x7ff)) {
  				netdev_err(dev->net, "asix_rx_fixup() Bad Header Length 0x%x, offset %d\n",
  					   rx->header, offset);
 +				rx->size = 0;
  				return 0;
  			}
++<<<<<<< HEAD
 +			rx->ax_skb = netdev_alloc_skb_ip_align(dev->net,
 +							       rx->size);
 +			if (!rx->ax_skb) {
 +				rx->size = 0;
++=======
+ 			if (size > dev->net->mtu + ETH_HLEN + VLAN_HLEN) {
+ 				netdev_dbg(dev->net, "asix_rx_fixup() Bad RX Length %d\n",
+ 					   size);
++>>>>>>> b70183db8355 (asix: silence log message from oversize packet)
  				return 0;
  			}
 +		}
  
 -			/* Sometimes may fail to get a netdev socket buffer but
 -			 * continue to process the URB socket buffer so that
 -			 * synchronisation of the Ethernet frame Data header
 -			 * word is maintained.
 -			 */
 -			rx->ax_skb = netdev_alloc_skb_ip_align(dev->net, size);
 +		if (rx->size > dev->net->mtu + ETH_HLEN + VLAN_HLEN) {
 +			netdev_err(dev->net, "asix_rx_fixup() Bad RX Length %d\n",
 +				   rx->size);
 +			kfree_skb(rx->ax_skb);
 +			rx->ax_skb = NULL;
 +			rx->size = 0U;
  
 -			rx->remaining = size;
 +			return 0;
  		}
  
 -		if (rx->remaining > skb->len - offset) {
 -			copy_length = skb->len - offset;
 -			rx->remaining -= copy_length;
 -		} else {
 -			copy_length = rx->remaining;
 -			rx->remaining = 0;
 +		if (rx->size > skb->len - offset) {
 +			remaining = rx->size - (skb->len - offset);
 +			rx->size = skb->len - offset;
  		}
  
 -		if (rx->ax_skb) {
 -			data = skb_put(rx->ax_skb, copy_length);
 -			memcpy(data, skb->data + offset, copy_length);
 -			if (!rx->remaining)
 -				usbnet_skb_return(dev, rx->ax_skb);
 -		}
 +		data = skb_put(rx->ax_skb, rx->size);
 +		memcpy(data, skb->data + offset, rx->size);
 +		if (!remaining)
 +			usbnet_skb_return(dev, rx->ax_skb);
  
 -		offset += (copy_length + 1) & 0xfffe;
 +		offset += (rx->size + 1) & 0xfffe;
 +		rx->size = remaining;
  	}
  
  	if (skb->len != offset) {
* Unmerged path drivers/net/usb/asix_common.c
