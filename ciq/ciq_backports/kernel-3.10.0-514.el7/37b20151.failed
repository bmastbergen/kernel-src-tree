perf tools: Move timestamp creation to util

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit 37b20151efe002a4a43532d3791d11d39d080248
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/37b20151.failed

Timestamp generation becomes a public available helper. Which will
be used by 'perf record', help it output to split output file based
on time.

For example:

 perf.data.2015122620363710
 perf.data.2015122620364092
 perf.data.2015122620365423
 ...

	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Li Zefan <lizefan@huawei.com>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1453715801-7732-27-git-send-email-wangnan0@huawei.com
	Signed-off-by: He Kuang <hekuang@huawei.com>
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 37b20151efe002a4a43532d3791d11d39d080248)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/util.c
#	tools/perf/util/util.h
diff --cc tools/perf/util/util.c
index 8228f4f63f42,b9e2843cfbe7..000000000000
--- a/tools/perf/util/util.c
+++ b/tools/perf/util/util.c
@@@ -633,3 -635,86 +633,89 @@@ bool find_process(const char *name
  	closedir(dir);
  	return ret ? false : true;
  }
++<<<<<<< HEAD
++=======
+ 
+ int
+ fetch_kernel_version(unsigned int *puint, char *str,
+ 		     size_t str_size)
+ {
+ 	struct utsname utsname;
+ 	int version, patchlevel, sublevel, err;
+ 
+ 	if (uname(&utsname))
+ 		return -1;
+ 
+ 	if (str && str_size) {
+ 		strncpy(str, utsname.release, str_size);
+ 		str[str_size - 1] = '\0';
+ 	}
+ 
+ 	err = sscanf(utsname.release, "%d.%d.%d",
+ 		     &version, &patchlevel, &sublevel);
+ 
+ 	if (err != 3) {
+ 		pr_debug("Unablt to get kernel version from uname '%s'\n",
+ 			 utsname.release);
+ 		return -1;
+ 	}
+ 
+ 	if (puint)
+ 		*puint = (version << 16) + (patchlevel << 8) + sublevel;
+ 	return 0;
+ }
+ 
+ const char *perf_tip(const char *dirpath)
+ {
+ 	struct strlist *tips;
+ 	struct str_node *node;
+ 	char *tip = NULL;
+ 	struct strlist_config conf = {
+ 		.dirname = dirpath,
+ 		.file_only = true,
+ 	};
+ 
+ 	tips = strlist__new("tips.txt", &conf);
+ 	if (tips == NULL)
+ 		return errno == ENOENT ? NULL : "Tip: get more memory! ;-p";
+ 
+ 	if (strlist__nr_entries(tips) == 0)
+ 		goto out;
+ 
+ 	node = strlist__entry(tips, random() % strlist__nr_entries(tips));
+ 	if (asprintf(&tip, "Tip: %s", node->s) < 0)
+ 		tip = (char *)"Tip: get more memory! ;-)";
+ 
+ out:
+ 	strlist__delete(tips);
+ 
+ 	return tip;
+ }
+ 
+ bool is_regular_file(const char *file)
+ {
+ 	struct stat st;
+ 
+ 	if (stat(file, &st))
+ 		return false;
+ 
+ 	return S_ISREG(st.st_mode);
+ }
+ 
+ int fetch_current_timestamp(char *buf, size_t sz)
+ {
+ 	struct timeval tv;
+ 	struct tm tm;
+ 	char dt[32];
+ 
+ 	if (gettimeofday(&tv, NULL) || !localtime_r(&tv.tv_sec, &tm))
+ 		return -1;
+ 
+ 	if (!strftime(dt, sizeof(dt), "%Y%m%d%H%M%S", &tm))
+ 		return -1;
+ 
+ 	scnprintf(buf, sz, "%s%02u", dt, (unsigned)tv.tv_usec / 10000);
+ 
+ 	return 0;
+ }
++>>>>>>> 37b20151efe0 (perf tools: Move timestamp creation to util)
diff --cc tools/perf/util/util.h
index 4e5c6ce20b5a,a8615816a00d..000000000000
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@@ -348,4 -334,16 +348,19 @@@ static inline char *asprintf_expr_not_i
  
  int get_stack_size(const char *str, unsigned long *_size);
  
++<<<<<<< HEAD
++=======
+ int fetch_kernel_version(unsigned int *puint,
+ 			 char *str, size_t str_sz);
+ #define KVER_VERSION(x)		(((x) >> 16) & 0xff)
+ #define KVER_PATCHLEVEL(x)	(((x) >> 8) & 0xff)
+ #define KVER_SUBLEVEL(x)	((x) & 0xff)
+ #define KVER_FMT	"%d.%d.%d"
+ #define KVER_PARAM(x)	KVER_VERSION(x), KVER_PATCHLEVEL(x), KVER_SUBLEVEL(x)
+ 
+ const char *perf_tip(const char *dirpath);
+ bool is_regular_file(const char *file);
+ int fetch_current_timestamp(char *buf, size_t sz);
+ 
++>>>>>>> 37b20151efe0 (perf tools: Move timestamp creation to util)
  #endif /* GIT_COMPAT_UTIL_H */
diff --git a/tools/perf/builtin-buildid-cache.c b/tools/perf/builtin-buildid-cache.c
index 7b8450cd33c2..f183da1aeae7 100644
--- a/tools/perf/builtin-buildid-cache.c
+++ b/tools/perf/builtin-buildid-cache.c
@@ -38,19 +38,7 @@ static int build_id_cache__kcore_buildid(const char *proc_dir, char *sbuildid)
 
 static int build_id_cache__kcore_dir(char *dir, size_t sz)
 {
-	struct timeval tv;
-	struct tm tm;
-	char dt[32];
-
-	if (gettimeofday(&tv, NULL) || !localtime_r(&tv.tv_sec, &tm))
-		return -1;
-
-	if (!strftime(dt, sizeof(dt), "%Y%m%d%H%M%S", &tm))
-		return -1;
-
-	scnprintf(dir, sz, "%s%02u", dt, (unsigned)tv.tv_usec / 10000);
-
-	return 0;
+	return fetch_current_timestamp(dir, sz);
 }
 
 static bool same_kallsyms_reloc(const char *from_dir, char *to_dir)
* Unmerged path tools/perf/util/util.c
* Unmerged path tools/perf/util/util.h
