igb: Add support for bulk Tx cleanup & cleanup boolean logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit 7f0ba845607364c76009e396a31651fa3a24bd1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7f0ba845.failed

This patch enables bulk free in Tx cleanup for igb and cleans up the
boolean logic in the polling routines for igb in the hopes of avoiding
any mix-ups similar to what occurred with i40e and i40evf.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Tested-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 7f0ba845607364c76009e396a31651fa3a24bd1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igb/igb_main.c
diff --cc drivers/net/ethernet/intel/igb/igb_main.c
index 2e9e3ece07e8,e40983ca35b4..000000000000
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@@ -150,8 -150,8 +150,13 @@@ static void igb_update_dca(struct igb_q
  static void igb_setup_dca(struct igb_adapter *);
  #endif /* CONFIG_IGB_DCA */
  static int igb_poll(struct napi_struct *, int);
++<<<<<<< HEAD
 +static bool igb_clean_tx_irq(struct igb_q_vector *);
 +static bool igb_clean_rx_irq(struct igb_q_vector *, int);
++=======
+ static bool igb_clean_tx_irq(struct igb_q_vector *, int);
+ static int igb_clean_rx_irq(struct igb_q_vector *, int);
++>>>>>>> 7f0ba8456073 (igb: Add support for bulk Tx cleanup & cleanup boolean logic)
  static int igb_ioctl(struct net_device *, struct ifreq *, int cmd);
  static void igb_tx_timeout(struct net_device *);
  static void igb_reset_task(struct work_struct *);
@@@ -6531,10 -6522,15 +6536,20 @@@ static int igb_poll(struct napi_struct 
  		igb_update_dca(q_vector);
  #endif
  	if (q_vector->tx.ring)
- 		clean_complete = igb_clean_tx_irq(q_vector);
+ 		clean_complete = igb_clean_tx_irq(q_vector, budget);
  
++<<<<<<< HEAD
 +	if (q_vector->rx.ring)
 +		clean_complete &= igb_clean_rx_irq(q_vector, budget);
++=======
+ 	if (q_vector->rx.ring) {
+ 		int cleaned = igb_clean_rx_irq(q_vector, budget);
+ 
+ 		work_done += cleaned;
+ 		if (cleaned >= budget)
+ 			clean_complete = false;
+ 	}
++>>>>>>> 7f0ba8456073 (igb: Add support for bulk Tx cleanup & cleanup boolean logic)
  
  	/* If all work not completed, return budget and keep polling */
  	if (!clean_complete)
* Unmerged path drivers/net/ethernet/intel/igb/igb_main.c
