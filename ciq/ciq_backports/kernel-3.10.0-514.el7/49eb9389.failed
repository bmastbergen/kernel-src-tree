hv_netvsc: add ethtool support for set and get of settings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author sixiao@microsoft.com <sixiao@microsoft.com>
commit 49eb93892d8dfcf5dc5088e640f486d08572d8bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/49eb9389.failed

This patch allows the user to set and retrieve speed and duplex of the
hv_netvsc device via ethtool.

Example:
$ ethtool eth0
Settings for eth0:
...
    Speed: Unknown!
    Duplex: Unknown! (255)
...
$ ethtool -s eth0 speed 1000 duplex full
$ ethtool eth0
Settings for eth0:
...
    Speed: 1000Mb/s
    Duplex: Full
...

This is based on patches by Roopa Prabhu and Nikolay Aleksandrov.

	Signed-off-by: Simon Xiao <sixiao@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 49eb93892d8dfcf5dc5088e640f486d08572d8bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/hyperv_net.h
index cf498664d989,b4c68783dfc3..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -596,7 -620,51 +596,55 @@@ struct nvsp_message 
  
  #define VRSS_SEND_TAB_SIZE 16
  
++<<<<<<< HEAD
 +/* Per netvsc channel-specific */
++=======
+ #define RNDIS_MAX_PKT_DEFAULT 8
+ #define RNDIS_PKT_ALIGN_DEFAULT 8
+ 
+ struct multi_send_data {
+ 	struct sk_buff *skb; /* skb containing the pkt */
+ 	struct hv_netvsc_packet *pkt; /* netvsc pkt pending */
+ 	u32 count; /* counter of batched packets */
+ };
+ 
+ struct netvsc_stats {
+ 	u64 packets;
+ 	u64 bytes;
+ 	struct u64_stats_sync syncp;
+ };
+ 
+ struct netvsc_reconfig {
+ 	struct list_head list;
+ 	u32 event;
+ };
+ 
+ /* The context of the netvsc device  */
+ struct net_device_context {
+ 	/* point back to our device context */
+ 	struct hv_device *device_ctx;
+ 	/* reconfigure work */
+ 	struct delayed_work dwork;
+ 	/* last reconfig time */
+ 	unsigned long last_reconfig;
+ 	/* reconfig events */
+ 	struct list_head reconfig_events;
+ 	/* list protection */
+ 	spinlock_t lock;
+ 
+ 	struct work_struct work;
+ 	u32 msg_enable; /* debug level */
+ 
+ 	struct netvsc_stats __percpu *tx_stats;
+ 	struct netvsc_stats __percpu *rx_stats;
+ 
+ 	/* Ethtool settings */
+ 	u8 duplex;
+ 	u32 speed;
+ };
+ 
+ /* Per netvsc device */
++>>>>>>> 49eb93892d8d (hv_netvsc: add ethtool support for set and get of settings)
  struct netvsc_device {
  	struct hv_device *dev;
  
diff --cc drivers/net/hyperv/netvsc_drv.c
index 822e657fcee7,08608499fa17..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -728,6 -701,156 +728,159 @@@ static void netvsc_get_channels(struct 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int netvsc_set_channels(struct net_device *net,
+ 			       struct ethtool_channels *channels)
+ {
+ 	struct net_device_context *net_device_ctx = netdev_priv(net);
+ 	struct hv_device *dev = net_device_ctx->device_ctx;
+ 	struct netvsc_device *nvdev = hv_get_drvdata(dev);
+ 	struct netvsc_device_info device_info;
+ 	u32 num_chn;
+ 	u32 max_chn;
+ 	int ret = 0;
+ 	bool recovering = false;
+ 
+ 	if (!nvdev || nvdev->destroy)
+ 		return -ENODEV;
+ 
+ 	num_chn = nvdev->num_chn;
+ 	max_chn = min_t(u32, nvdev->max_chn, num_online_cpus());
+ 
+ 	if (nvdev->nvsp_version < NVSP_PROTOCOL_VERSION_5) {
+ 		pr_info("vRSS unsupported before NVSP Version 5\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* We do not support rx, tx, or other */
+ 	if (!channels ||
+ 	    channels->rx_count ||
+ 	    channels->tx_count ||
+ 	    channels->other_count ||
+ 	    (channels->combined_count < 1))
+ 		return -EINVAL;
+ 
+ 	if (channels->combined_count > max_chn) {
+ 		pr_info("combined channels too high, using %d\n", max_chn);
+ 		channels->combined_count = max_chn;
+ 	}
+ 
+ 	ret = netvsc_close(net);
+ 	if (ret)
+ 		goto out;
+ 
+  do_set:
+ 	nvdev->start_remove = true;
+ 	rndis_filter_device_remove(dev);
+ 
+ 	nvdev->num_chn = channels->combined_count;
+ 
+ 	net_device_ctx->device_ctx = dev;
+ 	hv_set_drvdata(dev, net);
+ 
+ 	memset(&device_info, 0, sizeof(device_info));
+ 	device_info.num_chn = nvdev->num_chn; /* passed to RNDIS */
+ 	device_info.ring_size = ring_size;
+ 	device_info.max_num_vrss_chns = max_num_vrss_chns;
+ 
+ 	ret = rndis_filter_device_add(dev, &device_info);
+ 	if (ret) {
+ 		if (recovering) {
+ 			netdev_err(net, "unable to add netvsc device (ret %d)\n", ret);
+ 			return ret;
+ 		}
+ 		goto recover;
+ 	}
+ 
+ 	nvdev = hv_get_drvdata(dev);
+ 
+ 	ret = netif_set_real_num_tx_queues(net, nvdev->num_chn);
+ 	if (ret) {
+ 		if (recovering) {
+ 			netdev_err(net, "could not set tx queue count (ret %d)\n", ret);
+ 			return ret;
+ 		}
+ 		goto recover;
+ 	}
+ 
+ 	ret = netif_set_real_num_rx_queues(net, nvdev->num_chn);
+ 	if (ret) {
+ 		if (recovering) {
+ 			netdev_err(net, "could not set rx queue count (ret %d)\n", ret);
+ 			return ret;
+ 		}
+ 		goto recover;
+ 	}
+ 
+  out:
+ 	netvsc_open(net);
+ 
+ 	return ret;
+ 
+  recover:
+ 	/* If the above failed, we attempt to recover through the same
+ 	 * process but with the original number of channels.
+ 	 */
+ 	netdev_err(net, "could not set channels, recovering\n");
+ 	recovering = true;
+ 	channels->combined_count = num_chn;
+ 	goto do_set;
+ }
+ 
+ static bool netvsc_validate_ethtool_ss_cmd(const struct ethtool_cmd *cmd)
+ {
+ 	struct ethtool_cmd diff1 = *cmd;
+ 	struct ethtool_cmd diff2 = {};
+ 
+ 	ethtool_cmd_speed_set(&diff1, 0);
+ 	diff1.duplex = 0;
+ 	/* advertising and cmd are usually set */
+ 	diff1.advertising = 0;
+ 	diff1.cmd = 0;
+ 	/* We set port to PORT_OTHER */
+ 	diff2.port = PORT_OTHER;
+ 
+ 	return !memcmp(&diff1, &diff2, sizeof(diff1));
+ }
+ 
+ static void netvsc_init_settings(struct net_device *dev)
+ {
+ 	struct net_device_context *ndc = netdev_priv(dev);
+ 
+ 	ndc->speed = SPEED_UNKNOWN;
+ 	ndc->duplex = DUPLEX_UNKNOWN;
+ }
+ 
+ static int netvsc_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+ {
+ 	struct net_device_context *ndc = netdev_priv(dev);
+ 
+ 	ethtool_cmd_speed_set(cmd, ndc->speed);
+ 	cmd->duplex = ndc->duplex;
+ 	cmd->port = PORT_OTHER;
+ 
+ 	return 0;
+ }
+ 
+ static int netvsc_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+ {
+ 	struct net_device_context *ndc = netdev_priv(dev);
+ 	u32 speed;
+ 
+ 	speed = ethtool_cmd_speed(cmd);
+ 	if (!ethtool_validate_speed(speed) ||
+ 	    !ethtool_validate_duplex(cmd->duplex) ||
+ 	    !netvsc_validate_ethtool_ss_cmd(cmd))
+ 		return -EINVAL;
+ 
+ 	ndc->speed = speed;
+ 	ndc->duplex = cmd->duplex;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 49eb93892d8d (hv_netvsc: add ethtool support for set and get of settings)
  static int netvsc_change_mtu(struct net_device *ndev, int mtu)
  {
  	struct net_device_context *ndevctx = netdev_priv(ndev);
@@@ -806,6 -973,10 +959,13 @@@ static const struct ethtool_ops ethtool
  	.get_drvinfo	= netvsc_get_drvinfo,
  	.get_link	= ethtool_op_get_link,
  	.get_channels   = netvsc_get_channels,
++<<<<<<< HEAD
++=======
+ 	.set_channels   = netvsc_set_channels,
+ 	.get_ts_info	= ethtool_op_get_ts_info,
+ 	.get_settings	= netvsc_get_settings,
+ 	.set_settings	= netvsc_set_settings,
++>>>>>>> 49eb93892d8d (hv_netvsc: add ethtool support for set and get of settings)
  };
  
  static const struct net_device_ops device_ops = {
* Unmerged path drivers/net/hyperv/hyperv_net.h
* Unmerged path drivers/net/hyperv/netvsc_drv.c
