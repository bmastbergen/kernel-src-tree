hv_netvsc: Eliminate rndis_msg pointer from hv_netvsc_packet structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author KY Srinivasan <kys@microsoft.com>
commit 24476760ef0b45bab75ea6731d081aeb48113e6a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/24476760.failed

Eliminate rndis_msg pointer from hv_netvsc_packet structure.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 24476760ef0b45bab75ea6731d081aeb48113e6a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/netvsc.c
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/hyperv_net.h
index cf498664d989,14deedd1b411..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -140,16 -149,9 +140,19 @@@ struct hv_netvsc_packet 
  	void *send_completion_ctx;
  	void (*send_completion)(void *context);
  
++<<<<<<< HEAD
 +	u32 send_buf_index;
 +
 +	/* This points to the memory after page_buf */
 +	struct rndis_message *rndis_msg;
 +
 +	u32 total_data_buflen;
++=======
++>>>>>>> 24476760ef0b (hv_netvsc: Eliminate rndis_msg pointer from hv_netvsc_packet structure)
  	/* Points to the send/receive buffer where the ethernet frame is */
  	void *data;
 -	struct hv_page_buffer *page_buf;
 +	u32 page_buf_cnt;
 +	struct hv_page_buffer page_buf[0];
  };
  
  struct netvsc_device_info {
@@@ -183,12 -188,15 +187,13 @@@ struct rndis_message
  int netvsc_device_add(struct hv_device *device, void *additional_info);
  int netvsc_device_remove(struct hv_device *device);
  int netvsc_send(struct hv_device *device,
- 		struct hv_netvsc_packet *packet);
+ 		struct hv_netvsc_packet *packet,
+ 		struct rndis_message *rndis_msg);
  void netvsc_linkstatus_callback(struct hv_device *device_obj,
 -				struct rndis_message *resp);
 -void netvsc_xmit_completion(void *context);
 +				unsigned int status);
  int netvsc_recv_callback(struct hv_device *device_obj,
  			struct hv_netvsc_packet *packet,
 -			struct ndis_tcp_ip_checksum_info *csum_info,
 -			struct vmbus_channel *channel);
 +			struct ndis_tcp_ip_checksum_info *csum_info);
  void netvsc_channel_cb(void *context);
  int rndis_filter_open(struct hv_device *dev);
  int rndis_filter_close(struct hv_device *dev);
diff --cc drivers/net/hyperv/netvsc.c
index 74ee1b57e623,2de9e7fb4f68..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -693,16 -703,31 +693,36 @@@ static u32 netvsc_get_next_send_section
  	return ret_val;
  }
  
++<<<<<<< HEAD
 +u32 netvsc_copy_to_send_buf(struct netvsc_device *net_device,
 +			    unsigned int section_index,
 +			    struct hv_netvsc_packet *packet)
++=======
+ static u32 netvsc_copy_to_send_buf(struct netvsc_device *net_device,
+ 				   unsigned int section_index,
+ 				   u32 pend_size,
+ 				   struct hv_netvsc_packet *packet,
+ 				   struct rndis_message *rndis_msg)
++>>>>>>> 24476760ef0b (hv_netvsc: Eliminate rndis_msg pointer from hv_netvsc_packet structure)
  {
  	char *start = net_device->send_buf;
 -	char *dest = start + (section_index * net_device->send_section_size)
 -		     + pend_size;
 +	char *dest = (start + (section_index * net_device->send_section_size));
  	int i;
  	u32 msg_size = 0;
 -	u32 padding = 0;
 -	u32 remain = packet->total_data_buflen % net_device->pkt_align;
 -	u32 page_count = packet->cp_partial ? packet->rmsg_pgcnt :
 -		packet->page_buf_cnt;
  
++<<<<<<< HEAD
 +	for (i = 0; i < packet->page_buf_cnt; i++) {
++=======
+ 	/* Add padding */
+ 	if (packet->is_data_pkt && packet->xmit_more && remain &&
+ 	    !packet->cp_partial) {
+ 		padding = net_device->pkt_align - remain;
+ 		rndis_msg->msg_len += padding;
+ 		packet->total_data_buflen += padding;
+ 	}
+ 
+ 	for (i = 0; i < page_count; i++) {
++>>>>>>> 24476760ef0b (hv_netvsc: Eliminate rndis_msg pointer from hv_netvsc_packet structure)
  		char *src = phys_to_virt(packet->page_buf[i].pfn << PAGE_SHIFT);
  		u32 offset = packet->page_buf[i].offset;
  		u32 len = packet->page_buf[i].len;
@@@ -817,13 -838,115 +837,125 @@@ int netvsc_send(struct hv_device *devic
  			   packet, ret);
  	}
  
++<<<<<<< HEAD
 +	if (ret != 0) {
 +		if (section_index != NETVSC_INVALID_INDEX)
 +			netvsc_free_send_slot(net_device, section_index);
 +	} else if (skb) {
 +		dev_kfree_skb_any(skb);
 +	}
 +
++=======
+ 	return ret;
+ }
+ 
+ int netvsc_send(struct hv_device *device,
+ 		struct hv_netvsc_packet *packet,
+ 		struct rndis_message *rndis_msg)
+ {
+ 	struct netvsc_device *net_device;
+ 	int ret = 0, m_ret = 0;
+ 	struct vmbus_channel *out_channel;
+ 	u16 q_idx = packet->q_idx;
+ 	u32 pktlen = packet->total_data_buflen, msd_len = 0;
+ 	unsigned int section_index = NETVSC_INVALID_INDEX;
+ 	unsigned long flag;
+ 	struct multi_send_data *msdp;
+ 	struct hv_netvsc_packet *msd_send = NULL, *cur_send = NULL;
+ 	bool try_batch;
+ 
+ 	net_device = get_outbound_net_device(device);
+ 	if (!net_device)
+ 		return -ENODEV;
+ 
+ 	out_channel = get_channel(packet, net_device);
+ 	q_idx = packet->q_idx;
+ 
+ 	packet->send_buf_index = NETVSC_INVALID_INDEX;
+ 	packet->cp_partial = false;
+ 
+ 	msdp = &net_device->msd[q_idx];
+ 
+ 	/* batch packets in send buffer if possible */
+ 	spin_lock_irqsave(&msdp->lock, flag);
+ 	if (msdp->pkt)
+ 		msd_len = msdp->pkt->total_data_buflen;
+ 
+ 	try_batch = packet->is_data_pkt && msd_len > 0 && msdp->count <
+ 		    net_device->max_pkt;
+ 
+ 	if (try_batch && msd_len + pktlen + net_device->pkt_align <
+ 	    net_device->send_section_size) {
+ 		section_index = msdp->pkt->send_buf_index;
+ 
+ 	} else if (try_batch && msd_len + packet->rmsg_size <
+ 		   net_device->send_section_size) {
+ 		section_index = msdp->pkt->send_buf_index;
+ 		packet->cp_partial = true;
+ 
+ 	} else if (packet->is_data_pkt && pktlen + net_device->pkt_align <
+ 		   net_device->send_section_size) {
+ 		section_index = netvsc_get_next_send_section(net_device);
+ 		if (section_index != NETVSC_INVALID_INDEX) {
+ 				msd_send = msdp->pkt;
+ 				msdp->pkt = NULL;
+ 				msdp->count = 0;
+ 				msd_len = 0;
+ 		}
+ 	}
+ 
+ 	if (section_index != NETVSC_INVALID_INDEX) {
+ 		netvsc_copy_to_send_buf(net_device,
+ 					section_index, msd_len,
+ 					packet, rndis_msg);
+ 
+ 		packet->send_buf_index = section_index;
+ 
+ 		if (packet->cp_partial) {
+ 			packet->page_buf_cnt -= packet->rmsg_pgcnt;
+ 			packet->total_data_buflen = msd_len + packet->rmsg_size;
+ 		} else {
+ 			packet->page_buf_cnt = 0;
+ 			packet->total_data_buflen += msd_len;
+ 		}
+ 
+ 		if (msdp->pkt)
+ 			netvsc_xmit_completion(msdp->pkt);
+ 
+ 		if (packet->xmit_more && !packet->cp_partial) {
+ 			msdp->pkt = packet;
+ 			msdp->count++;
+ 		} else {
+ 			cur_send = packet;
+ 			msdp->pkt = NULL;
+ 			msdp->count = 0;
+ 		}
+ 	} else {
+ 		msd_send = msdp->pkt;
+ 		msdp->pkt = NULL;
+ 		msdp->count = 0;
+ 		cur_send = packet;
+ 	}
+ 
+ 	spin_unlock_irqrestore(&msdp->lock, flag);
+ 
+ 	if (msd_send) {
+ 		m_ret = netvsc_send_pkt(msd_send, net_device);
+ 
+ 		if (m_ret != 0) {
+ 			netvsc_free_send_slot(net_device,
+ 					      msd_send->send_buf_index);
+ 			netvsc_xmit_completion(msd_send);
+ 		}
+ 	}
+ 
+ 	if (cur_send)
+ 		ret = netvsc_send_pkt(cur_send, net_device);
+ 
+ 	if (ret != 0 && section_index != NETVSC_INVALID_INDEX)
+ 		netvsc_free_send_slot(net_device, section_index);
+ 
++>>>>>>> 24476760ef0b (hv_netvsc: Eliminate rndis_msg pointer from hv_netvsc_packet structure)
  	return ret;
  }
  
diff --cc drivers/net/hyperv/netvsc_drv.c
index 56b76b7b9a27,e5f81c797e26..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -461,9 -483,10 +461,16 @@@ static int netvsc_start_xmit(struct sk_
  	packet->is_data_pkt = true;
  	packet->total_data_buflen = skb->len;
  
++<<<<<<< HEAD
 +	packet->rndis_msg = (struct rndis_message *)((unsigned long)packet +
 +				sizeof(struct hv_netvsc_packet) +
 +				(num_data_pgs * sizeof(struct hv_page_buffer)));
++=======
+ 	rndis_msg = (struct rndis_message *)((unsigned long)packet +
+ 				sizeof(struct hv_netvsc_packet));
+ 
+ 	memset(rndis_msg, 0, RNDIS_AND_PPI_SIZE);
++>>>>>>> 24476760ef0b (hv_netvsc: Eliminate rndis_msg pointer from hv_netvsc_packet structure)
  
  	/* Set the completion routine */
  	packet->send_completion = netvsc_xmit_completion;
@@@ -595,9 -617,9 +601,9 @@@ do_send
  	rndis_msg->msg_len += rndis_msg_size;
  	packet->total_data_buflen = rndis_msg->msg_len;
  	packet->page_buf_cnt = init_page_array(rndis_msg, rndis_msg_size,
 -					       skb, packet);
 +					skb, &packet->page_buf[0]);
  
- 	ret = netvsc_send(net_device_ctx->device_ctx, packet);
+ 	ret = netvsc_send(net_device_ctx->device_ctx, packet, rndis_msg);
  
  drop:
  	if (ret == 0) {
* Unmerged path drivers/net/hyperv/hyperv_net.h
* Unmerged path drivers/net/hyperv/netvsc.c
* Unmerged path drivers/net/hyperv/netvsc_drv.c
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index 4f78abd49222..77df29758f00 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -237,7 +237,7 @@ static int rndis_filter_send_request(struct rndis_device *dev,
 
 	packet->send_completion = NULL;
 
-	ret = netvsc_send(dev->net_dev->dev, packet);
+	ret = netvsc_send(dev->net_dev->dev, packet, NULL);
 	return ret;
 }
 
