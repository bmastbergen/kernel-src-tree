x86/setup/crash: Remove alignment variable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] setup/crash: Remove alignment variable (Baoquan He) [1241236]
Rebuild_FUZZ: 95.00%
commit-author Borislav Petkov <bp@suse.de>
commit 606134f77ce22997fd2800d5937698d85c6990d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/606134f7.failed

Use a macro instead. No functionality change.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Dave Young <dyoung@redhat.com>
	Reviewed-by: Joerg Roedel <jroedel@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Kosina <jkosina@suse.cz>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mark Salter <msalter@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: WANG Chao <chaowang@redhat.com>
	Cc: jerry_hoemann@hp.com
Link: http://lkml.kernel.org/r/1445246268-26285-5-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 606134f77ce22997fd2800d5937698d85c6990d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/setup.c
diff --cc arch/x86/kernel/setup.c
index 41f53963b5ef,ea086dd8e821..000000000000
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@@ -513,8 -478,11 +513,11 @@@ static void __init memblock_x86_reserve
   * --------- Crashkernel reservation ------------------------------
   */
  
 -#ifdef CONFIG_KEXEC_CORE
 +#ifdef CONFIG_KEXEC
  
+ /* 16M alignment for crash kernel regions */
+ #define CRASH_ALIGN		(16 << 20)
+ 
  /*
   * Keep the crash kernel below this limit.  On 32 bits earlier kernels
   * would limit the kernel to the low 512 MiB due to mapping restrictions.
@@@ -560,9 -527,7 +562,13 @@@ static int __init reserve_crashkernel_l
  			return 0;
  	}
  
++<<<<<<< HEAD
 +	low_base = memblock_find_in_range(low_size, (1ULL<<32),
 +					low_size, alignment);
 +
++=======
+ 	low_base = memblock_find_in_range(low_size, 1ULL << 32, low_size, CRASH_ALIGN);
++>>>>>>> 606134f77ce2 (x86/setup/crash: Remove alignment variable)
  	if (!low_base) {
  		pr_err("Cannot reserve %ldMB crashkernel low memory, please try smaller size.\n",
  		       (unsigned long)(low_size >> 20));
@@@ -608,26 -573,10 +613,33 @@@ static void __init reserve_crashkernel(
  		/*
  		 *  kexec want bzImage is below CRASH_KERNEL_ADDR_MAX
  		 */
++<<<<<<< HEAD
 +		crash_base = memblock_find_in_range(alignment,
 +					high ? CRASH_KERNEL_ADDR_HIGH_MAX :
 +					       CRASH_KERNEL_ADDR_LOW_MAX,
 +					crash_size, alignment);
 +#ifdef CONFIG_X86_64
 +		/*
 +		 * crashkernel=X reserve below 896M fails? Try below 4G
 +		 */
 +		if (!high && !crash_base)
 +			crash_base = memblock_find_in_range(alignment,
 +						(1ULL << 32),
 +						crash_size, alignment);
 +		/*
 +		 * crashkernel=X reserve below 4G fails? Try MAXMEM
 +		 */
 +		if (!high && !crash_base)
 +			crash_base = memblock_find_in_range(alignment,
 +						CRASH_KERNEL_ADDR_HIGH_MAX,
 +						crash_size, alignment);
 +#endif
++=======
+ 		crash_base = memblock_find_in_range(CRASH_ALIGN,
+ 						    high ? CRASH_ADDR_HIGH_MAX
+ 							 : CRASH_ADDR_LOW_MAX,
+ 						    crash_size, CRASH_ALIGN);
++>>>>>>> 606134f77ce2 (x86/setup/crash: Remove alignment variable)
  		if (!crash_base) {
  			pr_info("crashkernel reservation failed - No suitable area found.\n");
  			return;
* Unmerged path arch/x86/kernel/setup.c
