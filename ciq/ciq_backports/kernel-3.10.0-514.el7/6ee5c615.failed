storvsc: Rather than look for sets of specific protocol versions, make decisions based on ranges.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [scsi] storvsc: Rather than look for sets of specific protocol versions, make decisions based on ranges (Cathy Avery) [1287037]
Rebuild_FUZZ: 99.48%
commit-author Keith Mange <keith.mange@microsoft.com>
commit 6ee5c61535a2df807069145970d3e7fa492a3fac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6ee5c615.failed

Rather than look for sets of specific protocol versions,
make decisions based on ranges. This will be safer and require fewer changes
going forward as we add more storage protocol versions.

	Tested-by: Alex Ng <alexng@microsoft.com>
	Signed-off-by: Keith Mange <keith.mange@microsoft.com>
	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: James Bottomley <JBottomley@Odin.com>
(cherry picked from commit 6ee5c61535a2df807069145970d3e7fa492a3fac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/storvsc_drv.c
diff --cc drivers/scsi/storvsc_drv.c
index bbf2151975a8,05f6f970826e..000000000000
--- a/drivers/scsi/storvsc_drv.c
+++ b/drivers/scsi/storvsc_drv.c
@@@ -1711,12 -1774,17 +1707,21 @@@ static int storvsc_probe(struct hv_devi
  		max_luns_per_target = STORVSC_MAX_LUNS_PER_TARGET;
  		max_targets = STORVSC_MAX_TARGETS;
  		max_channels = STORVSC_MAX_CHANNELS;
++<<<<<<< HEAD
 +		break;
++=======
+ 		/*
+ 		 * On Windows8 and above, we support sub-channels for storage.
+ 		 * The number of sub-channels offerred is based on the number of
+ 		 * VCPUs in the guest.
+ 		 */
+ 		max_sub_channels = (num_cpus / storvsc_vcpus_per_sub_channel);
++>>>>>>> 6ee5c61535a2 (storvsc: Rather than look for sets of specific protocol versions, make decisions based on ranges.)
  	}
  
 -	scsi_driver.can_queue = (max_outstanding_req_per_channel *
 -				 (max_sub_channels + 1));
 -
 +	if (dev_id->driver_data == SFC_GUID)
 +		scsi_driver.can_queue = (STORVSC_MAX_IO_REQUESTS *
 +					 STORVSC_FC_MAX_TARGETS);
  	host = scsi_host_alloc(&scsi_driver,
  			       sizeof(struct hv_host_device));
  	if (!host)
* Unmerged path drivers/scsi/storvsc_drv.c
