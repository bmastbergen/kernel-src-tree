ACPI/EINJ: Allow memory error injection to NVDIMM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] apei/einj: Allow memory error injection to NVDIMM (Jeff Moyer) [1342696]
Rebuild_FUZZ: 97.96%
commit-author Toshi Kani <toshi.kani@hpe.com>
commit 4650bac1fc45d64aef62ab99aa4db93d41dedbd9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4650bac1.failed

In the case of memory error injection, einj_error_inject()
checks if a target address is System RAM. Change this check to
allow injecting a memory error into NVDIMM memory by calling
region_intersects() with IORES_DESC_PERSISTENT_MEMORY. This
enables memory error testing on both System RAM and NVDIMM.

In addition, page_is_ram() is replaced with region_intersects()
with IORESOURCE_SYSTEM_RAM, so that it can verify a target
address range with the requested size.

	Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Acked-by: Tony Luck <tony.luck@intel.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Cc: Len Brown <lenb@kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Luis R. Rodriguez <mcgrof@suse.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Toshi Kani <toshi.kani@hp.com>
	Cc: Vishal Verma <vishal.l.verma@intel.com>
	Cc: linux-acpi@vger.kernel.org
	Cc: linux-arch@vger.kernel.org
	Cc: linux-mm <linux-mm@kvack.org>
	Cc: linux-nvdimm@lists.01.org
Link: http://lkml.kernel.org/r/1453841853-11383-18-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 4650bac1fc45d64aef62ab99aa4db93d41dedbd9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/apei/einj.c
diff --cc drivers/acpi/apei/einj.c
index 7165c1613aec,559c1173de1c..000000000000
--- a/drivers/acpi/apei/einj.c
+++ b/drivers/acpi/apei/einj.c
@@@ -508,12 -515,52 +508,55 @@@ static int __einj_error_inject(u32 type
  }
  
  /* Inject the specified hardware error */
 -static int einj_error_inject(u32 type, u32 flags, u64 param1, u64 param2,
 -			     u64 param3, u64 param4)
 +static int einj_error_inject(u32 type, u64 param1, u64 param2)
  {
  	int rc;
++<<<<<<< HEAD
 +
++=======
+ 	u64 base_addr, size;
+ 
+ 	/* If user manually set "flags", make sure it is legal */
+ 	if (flags && (flags &
+ 		~(SETWA_FLAGS_APICID|SETWA_FLAGS_MEM|SETWA_FLAGS_PCIE_SBDF)))
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * We need extra sanity checks for memory errors.
+ 	 * Other types leap directly to injection.
+ 	 */
+ 
+ 	/* ensure param1/param2 existed */
+ 	if (!(param_extension || acpi5))
+ 		goto inject;
+ 
+ 	/* ensure injection is memory related */
+ 	if (type & ACPI5_VENDOR_BIT) {
+ 		if (vendor_flags != SETWA_FLAGS_MEM)
+ 			goto inject;
+ 	} else if (!(type & MEM_ERROR_MASK) && !(flags & SETWA_FLAGS_MEM))
+ 		goto inject;
+ 
+ 	/*
+ 	 * Disallow crazy address masks that give BIOS leeway to pick
+ 	 * injection address almost anywhere. Insist on page or
+ 	 * better granularity and that target address is normal RAM or
+ 	 * NVDIMM.
+ 	 */
+ 	base_addr = param1 & param2;
+ 	size = ~param2 + 1;
+ 
+ 	if (((param2 & PAGE_MASK) != PAGE_MASK) ||
+ 	    ((region_intersects(base_addr, size, IORESOURCE_SYSTEM_RAM, IORES_DESC_NONE)
+ 				!= REGION_INTERSECTS) &&
+ 	     (region_intersects(base_addr, size, IORESOURCE_MEM, IORES_DESC_PERSISTENT_MEMORY)
+ 				!= REGION_INTERSECTS)))
+ 		return -EINVAL;
+ 
+ inject:
++>>>>>>> 4650bac1fc45 (ACPI/EINJ: Allow memory error injection to NVDIMM)
  	mutex_lock(&einj_mutex);
 -	rc = __einj_error_inject(type, flags, param1, param2, param3, param4);
 +	rc = __einj_error_inject(type, param1, param2);
  	mutex_unlock(&einj_mutex);
  
  	return rc;
* Unmerged path drivers/acpi/apei/einj.c
