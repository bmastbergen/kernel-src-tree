i40e/i40evf: Add support for bulk free in Tx cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit a619afe814453300684f1d5a6478d67f791bc723
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a619afe8.failed

This patch enables bulk Tx clean for skbs.  In order to enable it we need
to pass the napi_budget value as that is used to determine if we are truly
running in NAPI mode or if we are simply calling the routine from netpoll
with a budget of 0.  In order to avoid adding too many more variables I
thought it best to pass the VSI directly in a fashion similar to what we do
on igb and ixgbe with the q_vector.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit a619afe814453300684f1d5a6478d67f791bc723)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_txrx.c
#	drivers/net/ethernet/intel/i40evf/i40e_txrx.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 5a3abb58e191,01cff073f8db..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@@ -2006,9 -1977,11 +2008,17 @@@ int i40e_napi_poll(struct napi_struct *
  	 * budget and be more aggressive about cleaning up the Tx descriptors.
  	 */
  	i40e_for_each_ring(ring, q_vector->tx) {
++<<<<<<< HEAD
 +		clean_complete = clean_complete &&
 +				 i40e_clean_tx_irq(ring, vsi->work_limit);
 +		arm_wb = arm_wb || ring->arm_wb;
++=======
+ 		if (!i40e_clean_tx_irq(vsi, ring, budget)) {
+ 			clean_complete = false;
+ 			continue;
+ 		}
+ 		arm_wb |= ring->arm_wb;
++>>>>>>> a619afe81445 (i40e/i40evf: Add support for bulk free in Tx cleanup)
  		ring->arm_wb = false;
  	}
  
diff --cc drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index f6384b0c8220,9e911363c11b..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@@ -1437,9 -1413,11 +1439,17 @@@ int i40evf_napi_poll(struct napi_struc
  	 * budget and be more aggressive about cleaning up the Tx descriptors.
  	 */
  	i40e_for_each_ring(ring, q_vector->tx) {
++<<<<<<< HEAD
 +		clean_complete = clean_complete &&
 +				 i40e_clean_tx_irq(ring, vsi->work_limit);
 +		arm_wb = arm_wb || ring->arm_wb;
++=======
+ 		if (!i40e_clean_tx_irq(vsi, ring, budget)) {
+ 			clean_complete = false;
+ 			continue;
+ 		}
+ 		arm_wb |= ring->arm_wb;
++>>>>>>> a619afe81445 (i40e/i40evf: Add support for bulk free in Tx cleanup)
  		ring->arm_wb = false;
  	}
  
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_txrx.c
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_txrx.c
