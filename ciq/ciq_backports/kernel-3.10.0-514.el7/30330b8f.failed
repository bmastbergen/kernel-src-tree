USB: OHCI: make ohci-nxp a separate driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] ohci: make ohci-nxp a separate driver (Don Zickus) [1303209]
Rebuild_FUZZ: 93.67%
commit-author Manjunath Goudar <manjunath.goudar@linaro.org>
commit 30330b8fedba32e6bfeda8040311a11b84053c97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/30330b8f.failed

Separate the OHCI NXP host controller driver from ohci-hcd
host code so that it can be built as a separate driver module.
This work is part of enabling multi-platform kernels on ARM.

Many place function name and struct name started with usb,
current scenario replaced usb with ohci for proper naming.

	Signed-off-by: Manjunath Goudar <manjunath.goudar@linaro.org>
	Signed-off-by: Deepak Saxena <dsaxena@linaro.org>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 30330b8fedba32e6bfeda8040311a11b84053c97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/Kconfig
#	drivers/usb/host/Makefile
#	drivers/usb/host/ohci-hcd.c
diff --cc drivers/usb/host/Kconfig
index 14e3c49416bf,74ca887eabce..000000000000
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@@ -379,8 -373,40 +379,43 @@@ config USB_OHCI_HCD_OMAP
  	---help---
  	  Enables support for the OHCI controller on OMAP1/2 chips.
  
++<<<<<<< HEAD
++=======
+ config USB_OHCI_HCD_SPEAR
+         tristate "Support for ST SPEAr on-chip OHCI USB controller"
+         depends on USB_OHCI_HCD && PLAT_SPEAR
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           ST SPEAr chips.
+ 
+ config USB_OHCI_HCD_S3C2410
+         tristate "OHCI support for Samsung S3C24xx/S3C64xx SoC series"
+         depends on USB_OHCI_HCD && (ARCH_S3C24XX || ARCH_S3C64XX)
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           S3C24xx/S3C64xx chips.
+ 
+ config USB_OHCI_HCD_LPC32XX
+ 	tristate "Support for LPC on-chip OHCI USB controller"
+ 	depends on USB_OHCI_HCD && ARCH_LPC32XX
+ 	default y
+ 	---help---
+           Enables support for the on-chip OHCI controller on
+           NXP chips.
+ 
+ config USB_OHCI_HCD_AT91
+         tristate "Support for Atmel on-chip OHCI USB controller"
+         depends on USB_OHCI_HCD && ARCH_AT91
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           Atmel chips.
+ 
++>>>>>>> 30330b8fedba (USB: OHCI: make ohci-nxp a separate driver)
  config USB_OHCI_HCD_OMAP3
 -	tristate "OHCI support for OMAP3 and later chips"
 +	bool "OHCI support for OMAP3 and later chips"
  	depends on (ARCH_OMAP3 || ARCH_OMAP4)
  	default y
  	---help---
diff --cc drivers/usb/host/Makefile
index 602b80e40777,db9416f55f26..000000000000
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@@ -44,6 -48,12 +44,15 @@@ obj-$(CONFIG_USB_OHCI_HCD)	+= ohci-hcd.
  obj-$(CONFIG_USB_OHCI_HCD_PCI)	+= ohci-pci.o
  obj-$(CONFIG_USB_OHCI_HCD_PLATFORM)	+= ohci-platform.o
  obj-$(CONFIG_USB_OHCI_EXYNOS)	+= ohci-exynos.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_USB_OHCI_HCD_OMAP1)	+= ohci-omap.o
+ obj-$(CONFIG_USB_OHCI_HCD_OMAP3)	+= ohci-omap3.o
+ obj-$(CONFIG_USB_OHCI_HCD_SPEAR)	+= ohci-spear.o
+ obj-$(CONFIG_USB_OHCI_HCD_AT91)	+= ohci-at91.o
+ obj-$(CONFIG_USB_OHCI_HCD_S3C2410)	+= ohci-s3c2410.o
+ obj-$(CONFIG_USB_OHCI_HCD_LPC32XX)	+= ohci-nxp.o
++>>>>>>> 30330b8fedba (USB: OHCI: make ohci-nxp a separate driver)
  
  obj-$(CONFIG_USB_UHCI_HCD)	+= uhci-hcd.o
  obj-$(CONFIG_USB_FHCI_HCD)	+= fhci.o
diff --cc drivers/usb/host/ohci-hcd.c
index 31d50d19b73d,c51519248db9..000000000000
--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@@ -1237,16 -1187,6 +1237,19 @@@ MODULE_LICENSE ("GPL")
  #define EP93XX_PLATFORM_DRIVER	ohci_hcd_ep93xx_driver
  #endif
  
++<<<<<<< HEAD
 +#ifdef CONFIG_ARCH_AT91
 +#include "ohci-at91.c"
 +#define AT91_PLATFORM_DRIVER	ohci_hcd_at91_driver
 +#endif
 +
 +#ifdef CONFIG_ARCH_LPC32XX
 +#include "ohci-nxp.c"
 +#define NXP_PLATFORM_DRIVER	usb_hcd_nxp_driver
 +#endif
 +
++=======
++>>>>>>> 30330b8fedba (USB: OHCI: make ohci-nxp a separate driver)
  #ifdef CONFIG_ARCH_DAVINCI_DA8XX
  #include "ohci-da8xx.c"
  #define DAVINCI_PLATFORM_DRIVER	ohci_hcd_da8xx_driver
@@@ -1370,18 -1289,6 +1373,21 @@@ static int __init ohci_hcd_mod_init(voi
  		goto error_ep93xx;
  #endif
  
++<<<<<<< HEAD
 +#ifdef AT91_PLATFORM_DRIVER
 +	retval = platform_driver_register(&AT91_PLATFORM_DRIVER);
 +	if (retval < 0)
 +		goto error_at91;
 +#endif
 +
 +#ifdef NXP_PLATFORM_DRIVER
 +	retval = platform_driver_register(&NXP_PLATFORM_DRIVER);
 +	if (retval < 0)
 +		goto error_nxp;
 +#endif
 +
++=======
++>>>>>>> 30330b8fedba (USB: OHCI: make ohci-nxp a separate driver)
  #ifdef DAVINCI_PLATFORM_DRIVER
  	retval = platform_driver_register(&DAVINCI_PLATFORM_DRIVER);
  	if (retval < 0)
@@@ -1405,14 -1302,6 +1411,17 @@@
  	platform_driver_unregister(&DAVINCI_PLATFORM_DRIVER);
   error_davinci:
  #endif
++<<<<<<< HEAD
 +#ifdef NXP_PLATFORM_DRIVER
 +	platform_driver_unregister(&NXP_PLATFORM_DRIVER);
 + error_nxp:
 +#endif
 +#ifdef AT91_PLATFORM_DRIVER
 +	platform_driver_unregister(&AT91_PLATFORM_DRIVER);
 + error_at91:
 +#endif
++=======
++>>>>>>> 30330b8fedba (USB: OHCI: make ohci-nxp a separate driver)
  #ifdef EP93XX_PLATFORM_DRIVER
  	platform_driver_unregister(&EP93XX_PLATFORM_DRIVER);
   error_ep93xx:
@@@ -1470,12 -1346,6 +1479,15 @@@ static void __exit ohci_hcd_mod_exit(vo
  #ifdef DAVINCI_PLATFORM_DRIVER
  	platform_driver_unregister(&DAVINCI_PLATFORM_DRIVER);
  #endif
++<<<<<<< HEAD
 +#ifdef NXP_PLATFORM_DRIVER
 +	platform_driver_unregister(&NXP_PLATFORM_DRIVER);
 +#endif
 +#ifdef AT91_PLATFORM_DRIVER
 +	platform_driver_unregister(&AT91_PLATFORM_DRIVER);
 +#endif
++=======
++>>>>>>> 30330b8fedba (USB: OHCI: make ohci-nxp a separate driver)
  #ifdef EP93XX_PLATFORM_DRIVER
  	platform_driver_unregister(&EP93XX_PLATFORM_DRIVER);
  #endif
* Unmerged path drivers/usb/host/Kconfig
* Unmerged path drivers/usb/host/Makefile
* Unmerged path drivers/usb/host/ohci-hcd.c
diff --git a/drivers/usb/host/ohci-nxp.c b/drivers/usb/host/ohci-nxp.c
index 0b5dde7c538a..1cc90c4546be 100644
--- a/drivers/usb/host/ohci-nxp.c
+++ b/drivers/usb/host/ohci-nxp.c
@@ -19,10 +19,19 @@
  * or implied.
  */
 #include <linux/clk.h>
-#include <linux/platform_device.h>
+#include <linux/dma-mapping.h>
+#include <linux/io.h>
 #include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
 #include <linux/of.h>
+#include <linux/platform_device.h>
 #include <linux/usb/isp1301.h>
+#include <linux/usb.h>
+#include <linux/usb/hcd.h>
+
+#include "ohci.h"
+
 
 #include <mach/hardware.h>
 #include <asm/mach-types.h>
@@ -57,6 +66,11 @@
 #define start_int_umask(irq)
 #endif
 
+#define DRIVER_DESC "OHCI NXP driver"
+
+static const char hcd_name[] = "ohci-nxp";
+static struct hc_driver __read_mostly ohci_nxp_hc_driver;
+
 static struct i2c_client *isp1301_i2c_client;
 
 extern int usb_disabled(void);
@@ -132,14 +146,14 @@ static inline void isp1301_vbus_off(void)
 		OTG1_VBUS_DRV);
 }
 
-static void nxp_start_hc(void)
+static void ohci_nxp_start_hc(void)
 {
 	unsigned long tmp = __raw_readl(USB_OTG_STAT_CONTROL) | HOST_EN;
 	__raw_writel(tmp, USB_OTG_STAT_CONTROL);
 	isp1301_vbus_on();
 }
 
-static void nxp_stop_hc(void)
+static void ohci_nxp_stop_hc(void)
 {
 	unsigned long tmp;
 	isp1301_vbus_off();
@@ -147,68 +161,9 @@ static void nxp_stop_hc(void)
 	__raw_writel(tmp, USB_OTG_STAT_CONTROL);
 }
 
-static int ohci_nxp_start(struct usb_hcd *hcd)
-{
-	struct ohci_hcd *ohci = hcd_to_ohci(hcd);
-	int ret;
-
-	if ((ret = ohci_init(ohci)) < 0)
-		return ret;
-
-	if ((ret = ohci_run(ohci)) < 0) {
-		dev_err(hcd->self.controller, "can't start\n");
-		ohci_stop(hcd);
-		return ret;
-	}
-	return 0;
-}
-
-static const struct hc_driver ohci_nxp_hc_driver = {
-	.description = hcd_name,
-	.product_desc =		"nxp OHCI",
-
-	/*
-	 * generic hardware linkage
-	 */
-	.irq = ohci_irq,
-	.flags = HCD_USB11 | HCD_MEMORY,
-
-	.hcd_priv_size =	sizeof(struct ohci_hcd),
-	/*
-	 * basic lifecycle operations
-	 */
-	.start = ohci_nxp_start,
-	.stop = ohci_stop,
-	.shutdown = ohci_shutdown,
-
-	/*
-	 * managing i/o requests and associated device resources
-	 */
-	.urb_enqueue = ohci_urb_enqueue,
-	.urb_dequeue = ohci_urb_dequeue,
-	.endpoint_disable = ohci_endpoint_disable,
-
-	/*
-	 * scheduling support
-	 */
-	.get_frame_number = ohci_get_frame,
-
-	/*
-	 * root hub support
-	 */
-	.hub_status_data = ohci_hub_status_data,
-	.hub_control = ohci_hub_control,
-#ifdef	CONFIG_PM
-	.bus_suspend = ohci_bus_suspend,
-	.bus_resume = ohci_bus_resume,
-#endif
-	.start_port_reset = ohci_start_port_reset,
-};
-
-static int usb_hcd_nxp_probe(struct platform_device *pdev)
+static int ohci_hcd_nxp_probe(struct platform_device *pdev)
 {
 	struct usb_hcd *hcd = 0;
-	struct ohci_hcd *ohci;
 	const struct hc_driver *driver = &ohci_nxp_hc_driver;
 	struct resource *res;
 	int ret = 0, irq;
@@ -313,17 +268,15 @@ static int usb_hcd_nxp_probe(struct platform_device *pdev)
 		goto fail_resource;
 	}
 
-	nxp_start_hc();
+	ohci_nxp_start_hc();
 	platform_set_drvdata(pdev, hcd);
-	ohci = hcd_to_ohci(hcd);
-	ohci_hcd_init(ohci);
 
 	dev_info(&pdev->dev, "at 0x%p, irq %d\n", hcd->regs, hcd->irq);
 	ret = usb_add_hcd(hcd, irq, 0);
 	if (ret == 0)
 		return ret;
 
-	nxp_stop_hc();
+	ohci_nxp_stop_hc();
 fail_resource:
 	usb_put_hcd(hcd);
 fail_hcd:
@@ -345,12 +298,12 @@ fail_disable:
 	return ret;
 }
 
-static int usb_hcd_nxp_remove(struct platform_device *pdev)
+static int ohci_hcd_nxp_remove(struct platform_device *pdev)
 {
 	struct usb_hcd *hcd = platform_get_drvdata(pdev);
 
 	usb_remove_hcd(hcd);
-	nxp_stop_hc();
+	ohci_nxp_stop_hc();
 	usb_put_hcd(hcd);
 	clk_disable(usb_pll_clk);
 	clk_put(usb_pll_clk);
@@ -368,20 +321,40 @@ static int usb_hcd_nxp_remove(struct platform_device *pdev)
 MODULE_ALIAS("platform:usb-ohci");
 
 #ifdef CONFIG_OF
-static const struct of_device_id usb_hcd_nxp_match[] = {
+static const struct of_device_id ohci_hcd_nxp_match[] = {
 	{ .compatible = "nxp,ohci-nxp" },
 	{},
 };
-MODULE_DEVICE_TABLE(of, usb_hcd_nxp_match);
+MODULE_DEVICE_TABLE(of, ohci_hcd_nxp_match);
 #endif
 
-static struct platform_driver usb_hcd_nxp_driver = {
+static struct platform_driver ohci_hcd_nxp_driver = {
 	.driver = {
 		.name = "usb-ohci",
 		.owner	= THIS_MODULE,
-		.of_match_table = of_match_ptr(usb_hcd_nxp_match),
+		.of_match_table = of_match_ptr(ohci_hcd_nxp_match),
 	},
-	.probe = usb_hcd_nxp_probe,
-	.remove = usb_hcd_nxp_remove,
+	.probe = ohci_hcd_nxp_probe,
+	.remove = ohci_hcd_nxp_remove,
 };
 
+static int __init ohci_nxp_init(void)
+{
+	if (usb_disabled())
+		return -ENODEV;
+
+	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+
+	ohci_init_driver(&ohci_nxp_hc_driver, NULL);
+	return platform_driver_register(&ohci_hcd_nxp_driver);
+}
+module_init(ohci_nxp_init);
+
+static void __exit ohci_nxp_cleanup(void)
+{
+	platform_driver_unregister(&ohci_hcd_nxp_driver);
+}
+module_exit(ohci_nxp_cleanup);
+
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_LICENSE("GPL v2");
