mmc: sdhci: Define ADMA constants

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: Define ADMA constants (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 91.80%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 739d46dcc24d9fabeed1dea6705d2c7f444b092c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/739d46dc.failed

Define all the ADMA constants instead of having numbers
scattered throughout the code.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 739d46dcc24d9fabeed1dea6705d2c7f444b092c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci.c
#	drivers/mmc/host/sdhci.h
diff --cc drivers/mmc/host/sdhci.c
index e2d27069abbd,11b62171f94e..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -576,8 -549,8 +577,13 @@@ static int sdhci_adma_table_pre(struct 
  		BUG_ON(len > 65536);
  
  		/* tran, valid */
++<<<<<<< HEAD
 +		sdhci_adma_write_desc(desc, addr, len, 0x21);
 +		desc += 8;
++=======
+ 		sdhci_adma_write_desc(desc, addr, len, ADMA2_TRAN_VALID);
+ 		desc += host->desc_sz;
++>>>>>>> 739d46dcc24d (mmc: sdhci: Define ADMA constants)
  
  		/*
  		 * If this triggers then we have a calculation bug
@@@ -2318,9 -2311,9 +2324,9 @@@ static void sdhci_adma_show_error(struc
  		DBG("%s: %p: DMA 0x%08x, LEN 0x%04x, Attr=0x%02x\n",
  		    name, desc, le32_to_cpu(*dma), le16_to_cpu(*len), attr);
  
 -		desc += host->desc_sz;
 +		desc += 8;
  
- 		if (attr & 2)
+ 		if (attr & ADMA2_END)
  			break;
  	}
  }
@@@ -2871,21 -2873,28 +2877,31 @@@ int sdhci_add_host(struct sdhci_host *h
  
  	if (host->flags & SDHCI_USE_ADMA) {
  		/*
 -		 * The DMA descriptor table size is calculated as the maximum
 -		 * number of segments times 2, to allow for an alignment
 -		 * descriptor for each segment, plus 1 for a nop end descriptor,
 -		 * all multipled by the descriptor size.
 +		 * We need to allocate descriptors for all sg entries
 +		 * (128) and potentially one alignment transfer for
 +		 * each of those entries.
  		 */
++<<<<<<< HEAD
++=======
+ 		host->adma_table_sz = (SDHCI_MAX_SEGS * 2 + 1) *
+ 				      SDHCI_ADMA2_32_DESC_SZ;
+ 		host->align_buffer_sz = SDHCI_MAX_SEGS *
+ 					SDHCI_ADMA2_32_ALIGN;
+ 		host->desc_sz = SDHCI_ADMA2_32_DESC_SZ;
+ 		host->align_sz = SDHCI_ADMA2_32_ALIGN;
+ 		host->align_mask = SDHCI_ADMA2_32_ALIGN - 1;
++>>>>>>> 739d46dcc24d (mmc: sdhci: Define ADMA constants)
  		host->adma_table = dma_alloc_coherent(mmc_dev(mmc),
 -						      host->adma_table_sz,
 +						      ADMA_SIZE,
  						      &host->adma_addr,
  						      GFP_KERNEL);
 -		host->align_buffer = kmalloc(host->align_buffer_sz, GFP_KERNEL);
 +		host->align_buffer = kmalloc(128 * 4, GFP_KERNEL);
  		if (!host->adma_table || !host->align_buffer) {
 -			dma_free_coherent(mmc_dev(mmc), host->adma_table_sz,
 +			dma_free_coherent(mmc_dev(mmc), ADMA_SIZE,
  					  host->adma_table, host->adma_addr);
  			kfree(host->align_buffer);
 -			pr_warn("%s: Unable to allocate ADMA buffers - falling back to standard DMA\n",
 +			pr_warning("%s: Unable to allocate ADMA "
 +				"buffers. Falling back to standard DMA.\n",
  				mmc_hostname(mmc));
  			host->flags &= ~SDHCI_USE_ADMA;
  			host->adma_table = NULL;
diff --cc drivers/mmc/host/sdhci.h
index 4dea27050ed1,823cce177498..000000000000
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@@ -266,6 -266,22 +266,25 @@@
  #define SDHCI_DEFAULT_BOUNDARY_SIZE  (512 * 1024)
  #define SDHCI_DEFAULT_BOUNDARY_ARG   (ilog2(SDHCI_DEFAULT_BOUNDARY_SIZE) - 12)
  
++<<<<<<< HEAD
++=======
+ /* ADMA2 32-bit DMA descriptor size */
+ #define SDHCI_ADMA2_32_DESC_SZ	8
+ 
+ /* ADMA2 32-bit DMA alignment */
+ #define SDHCI_ADMA2_32_ALIGN	4
+ 
+ #define ADMA2_TRAN_VALID	0x21
+ #define ADMA2_NOP_END_VALID	0x3
+ #define ADMA2_END		0x2
+ 
+ /*
+  * Maximum segments assuming a 512KiB maximum requisition size and a minimum
+  * 4KiB page size.
+  */
+ #define SDHCI_MAX_SEGS		128
+ 
++>>>>>>> 739d46dcc24d (mmc: sdhci: Define ADMA constants)
  struct sdhci_ops {
  #ifdef CONFIG_MMC_SDHCI_IO_ACCESSORS
  	u32		(*read_l)(struct sdhci_host *host, int reg);
* Unmerged path drivers/mmc/host/sdhci.c
* Unmerged path drivers/mmc/host/sdhci.h
