x86/setup/crash: Cleanup some more

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] setup/crash: Cleanup some more (Baoquan He) [1241236]
Rebuild_FUZZ: 93.75%
commit-author Borislav Petkov <bp@suse.de>
commit f56d55781c1ff5663874775d0672ba954fe5634c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f56d5578.failed

* Remove unused auto_set variable
* Cleanup local function variable declarations
* Reformat printk string and use pr_info()

No functionality change.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Dave Young <dyoung@redhat.com>
	Reviewed-by: Joerg Roedel <jroedel@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Kosina <jkosina@suse.cz>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mark Salter <msalter@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: WANG Chao <chaowang@redhat.com>
	Cc: jerry_hoemann@hp.com
Link: http://lkml.kernel.org/r/1445246268-26285-6-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f56d55781c1ff5663874775d0672ba954fe5634c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/setup.c
diff --cc arch/x86/kernel/setup.c
index 41f53963b5ef,d4788719a1e2..000000000000
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@@ -531,18 -499,15 +531,25 @@@ static void __init memblock_x86_reserve
  static int __init reserve_crashkernel_low(void)
  {
  #ifdef CONFIG_X86_64
++<<<<<<< HEAD
 +	const unsigned long long alignment = 16<<20;	/* 16M */
 +	unsigned long long low_base = 0, low_size = 0;
++=======
+ 	unsigned long long base, low_base = 0, low_size = 0;
++>>>>>>> f56d55781c1f (x86/setup/crash: Cleanup some more)
  	unsigned long total_low_mem;
- 	unsigned long long base;
- 	bool auto_set = false;
  	int ret;
  
 -	total_low_mem = memblock_mem_size(1UL << (32 - PAGE_SHIFT));
 -
 +	total_low_mem = memblock_mem_size(1UL<<(32-PAGE_SHIFT));
  	/* crashkernel=Y,low */
++<<<<<<< HEAD
 +	ret = parse_crashkernel_low(boot_command_line, total_low_mem,
 +						&low_size, &base);
 +	if (ret != 0) {
++=======
+ 	ret = parse_crashkernel_low(boot_command_line, total_low_mem, &low_size, &base);
+ 	if (ret) {
++>>>>>>> f56d55781c1f (x86/setup/crash: Cleanup some more)
  		/*
  		 * two parts from lib/swiotlb.c:
  		 * -swiotlb size: user-specified with swiotlb= or default.
@@@ -552,8 -517,7 +559,12 @@@
  		 * make sure we allocate enough extra low memory so that we
  		 * don't run out of DMA buffers for 32-bit devices.
  		 */
++<<<<<<< HEAD
 +		low_size = max(swiotlb_size_or_default() + (8UL<<20), 256UL<<20);
 +		auto_set = true;
++=======
+ 		low_size = max(swiotlb_size_or_default() + (8UL << 20), 256UL << 20);
++>>>>>>> f56d55781c1f (x86/setup/crash: Cleanup some more)
  	} else {
  		/* passed with crashkernel=0,low ? */
  		if (!low_size)
@@@ -583,9 -547,7 +594,13 @@@
  
  static void __init reserve_crashkernel(void)
  {
++<<<<<<< HEAD
 +	const unsigned long long alignment = 16<<20;	/* 16M */
 +	unsigned long long total_mem;
 +	unsigned long long crash_size, crash_base;
++=======
+ 	unsigned long long crash_size, crash_base, total_mem;
++>>>>>>> f56d55781c1f (x86/setup/crash: Cleanup some more)
  	bool high = false;
  	int ret;
  
* Unmerged path arch/x86/kernel/setup.c
