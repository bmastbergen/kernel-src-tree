ovl: fix open in stacked overlay

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Miklos Szeredi <miklos@szeredi.hu>
commit 1c8a47df36d72ace8cf78eb6c228aa0f8027d3c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1c8a47df.failed

If two overlayfs filesystems are stacked on top of each other, then we need
recursion in ovl_d_select_inode().

I guess d_backing_inode() is supposed to do that.  But currently it doesn't
and that functionality is open coded in vfs_open().  This is now copied
into ovl_d_select_inode() to fix this regression.

	Reported-by: Alban Crequy <alban.crequy@gmail.com>
	Signed-off-by: Miklos Szeredi <miklos@szeredi.hu>
Fixes: 4bacc9c9234c ("overlayfs: Make f_path always point to the overlay...")
	Cc: David Howells <dhowells@redhat.com>
	Cc: <stable@vger.kernel.org> # v4.2+
(cherry picked from commit 1c8a47df36d72ace8cf78eb6c228aa0f8027d3c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/inode.c
diff --cc fs/overlayfs/inode.c
index 209373c9ed01,ec0c2a050043..000000000000
--- a/fs/overlayfs/inode.c
+++ b/fs/overlayfs/inode.c
@@@ -362,11 -363,13 +362,18 @@@ static int ovl_dentry_open(struct dentr
  		ovl_path_upper(dentry, &realpath);
  	}
  
++<<<<<<< HEAD
 +	return vfs_open(&realpath, file, cred);
++=======
+ 	if (realpath.dentry->d_flags & DCACHE_OP_SELECT_INODE)
+ 		return realpath.dentry->d_op->d_select_inode(realpath.dentry, file_flags);
+ 
+ 	return d_backing_inode(realpath.dentry);
++>>>>>>> 1c8a47df36d7 (ovl: fix open in stacked overlay)
  }
  
 -static const struct inode_operations ovl_file_inode_operations = {
 +static const struct inode_operations_wrapper ovl_file_inode_operations = {
 +	.ops = {
  	.setattr	= ovl_setattr,
  	.permission	= ovl_permission,
  	.getattr	= ovl_getattr,
* Unmerged path fs/overlayfs/inode.c
