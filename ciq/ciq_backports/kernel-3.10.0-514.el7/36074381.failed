powerpc/powernv: Honor the generic "no_64bit_msi" flag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [powerpc] powernv: Honor the generic "no_64bit_msi" flag (Oded Gabbay) [1274362]
Rebuild_FUZZ: 92.00%
commit-author Benjamin Herrenschmidt <benh@kernel.crashing.org>
commit 360743814c4082515581aa23ab1d8e699e1fbe88
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/36074381.failed

Instead of the arch specific quirk which we are deprecating
and that drivers don't understand.

	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
CC: <stable@vger.kernel.org>
(cherry picked from commit 360743814c4082515581aa23ab1d8e699e1fbe88)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci.c
diff --cc arch/powerpc/platforms/powernv/pci.c
index 3a74d719e520,4b20f2c6b3b2..000000000000
--- a/arch/powerpc/platforms/powernv/pci.c
+++ b/arch/powerpc/platforms/powernv/pci.c
@@@ -46,29 -46,20 +46,39 @@@
  //#define cfg_dbg(fmt...)	printk(fmt)
  
  #ifdef CONFIG_PCI_MSI
 +static int pnv_msi_check_device(struct pci_dev* pdev, int nvec, int type)
 +{
 +	struct pci_controller *hose = pci_bus_to_host(pdev->bus);
 +	struct pnv_phb *phb = hose->private_data;
++<<<<<<< HEAD
 +	struct pci_dn *pdn = pci_get_pdn(pdev);
 +
 +	if (pdn && pdn->force_32bit_msi && !phb->msi32_support)
 +		return -ENODEV;
 +
 +	return (phb && phb->msi_bmp.bitmap) ? 0 : -ENODEV;
 +}
 +
  static int pnv_setup_msi_irqs(struct pci_dev *pdev, int nvec, int type)
  {
  	struct pci_controller *hose = pci_bus_to_host(pdev->bus);
  	struct pnv_phb *phb = hose->private_data;
++=======
++>>>>>>> 360743814c40 (powerpc/powernv: Honor the generic "no_64bit_msi" flag)
  	struct msi_desc *entry;
  	struct msi_msg msg;
  	int hwirq;
  	unsigned int virq;
  	int rc;
  
++<<<<<<< HEAD
 +	if (WARN_ON(!phb))
++=======
+ 	if (WARN_ON(!phb) || !phb->msi_bmp.bitmap)
+ 		return -ENODEV;
+ 
+ 	if (pdev->no_64bit_msi && !phb->msi32_support)
++>>>>>>> 360743814c40 (powerpc/powernv: Honor the generic "no_64bit_msi" flag)
  		return -ENODEV;
  
  	list_for_each_entry(entry, &pdev->msi_list, list) {
diff --git a/arch/powerpc/platforms/powernv/pci-ioda.c b/arch/powerpc/platforms/powernv/pci-ioda.c
index fe5c4ee44e89..4850d4a38ab5 100644
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@ -2535,7 +2535,6 @@ static int pnv_pci_ioda_msi_setup(struct pnv_phb *phb, struct pci_dev *dev,
 				  unsigned int is_64, struct msi_msg *msg)
 {
 	struct pnv_ioda_pe *pe = pnv_ioda_get_pe(dev);
-	struct pci_dn *pdn = pci_get_pdn(dev);
 	unsigned int xive_num = hwirq - phb->msi_base;
 	__be32 data;
 	int rc;
@@ -2549,7 +2548,7 @@ static int pnv_pci_ioda_msi_setup(struct pnv_phb *phb, struct pci_dev *dev,
 		return -ENXIO;
 
 	/* Force 32-bit MSI on some broken devices */
-	if (pdn && pdn->force_32bit_msi)
+	if (dev->no_64bit_msi)
 		is_64 = 0;
 
 	/* Assign XIVE to PE */
* Unmerged path arch/powerpc/platforms/powernv/pci.c
