sched: Compute runnable load avg in cpu_load and cpu_avg_load_per_task

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alex Shi <alex.shi@intel.com>
commit b92486cbf2aa230d00f160664858495c81d2b37b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b92486cb.failed

They are the base values in load balance, update them with rq runnable
load average, then the load balance will consider runnable load avg
naturally.

We also try to include the blocked_load_avg as cpu load in balancing,
but that cause kbuild performance drop 6% on every Intel machine, and
aim7/oltp drop on some of 4 CPU sockets machines.
Or only add blocked_load_avg into get_rq_runable_load, hackbench still
drop a little on NHM EX.

	Signed-off-by: Alex Shi <alex.shi@intel.com>
	Reviewed-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1371694737-29336-7-git-send-email-alex.shi@intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b92486cbf2aa230d00f160664858495c81d2b37b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/proc.c
* Unmerged path kernel/sched/proc.c
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 87153a402330..94aa48e06738 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -3931,7 +3931,7 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 /* Used instead of source_load when we know the type == 0 */
 static unsigned long weighted_cpuload(const int cpu)
 {
-	return cpu_rq(cpu)->load.weight;
+	return cpu_rq(cpu)->cfs.runnable_load_avg;
 }
 
 /*
@@ -3976,9 +3976,10 @@ static unsigned long cpu_avg_load_per_task(int cpu)
 {
 	struct rq *rq = cpu_rq(cpu);
 	unsigned long nr_running = ACCESS_ONCE(rq->nr_running);
+	unsigned long load_avg = rq->cfs.runnable_load_avg;
 
 	if (nr_running)
-		return rq->load.weight / nr_running;
+		return load_avg / nr_running;
 
 	return 0;
 }
* Unmerged path kernel/sched/proc.c
