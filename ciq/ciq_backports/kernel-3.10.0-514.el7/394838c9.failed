x86/asm/entry/32: Fix user_mode() misuses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] asm/entry/32: Fix user_mode() misuses (Rui Wang) [1138650]
Rebuild_FUZZ: 94.87%
commit-author Andy Lutomirski <luto@amacapital.net>
commit 394838c96013ba414a24ffe7a2a593a9154daadf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/394838c9.failed

The one in do_debug() is probably harmless, but better safe than sorry.

	Signed-off-by: Andy Lutomirski <luto@amacapital.net>
	Cc: <stable@vger.kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/d67deaa9df5458363623001f252d1aee3215d014.1425948056.git.luto@amacapital.net
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 394838c96013ba414a24ffe7a2a593a9154daadf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/traps.c
diff --cc arch/x86/kernel/traps.c
index 9823443df079,4ff5d162ff9f..000000000000
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@@ -247,7 -370,90 +247,94 @@@ dotraplinkage void do_double_fault(stru
  }
  #endif
  
++<<<<<<< HEAD
 +dotraplinkage void __kprobes
++=======
+ dotraplinkage void do_bounds(struct pt_regs *regs, long error_code)
+ {
+ 	struct task_struct *tsk = current;
+ 	struct xsave_struct *xsave_buf;
+ 	enum ctx_state prev_state;
+ 	struct bndcsr *bndcsr;
+ 	siginfo_t *info;
+ 
+ 	prev_state = exception_enter();
+ 	if (notify_die(DIE_TRAP, "bounds", regs, error_code,
+ 			X86_TRAP_BR, SIGSEGV) == NOTIFY_STOP)
+ 		goto exit;
+ 	conditional_sti(regs);
+ 
+ 	if (!user_mode_vm(regs))
+ 		die("bounds", regs, error_code);
+ 
+ 	if (!cpu_feature_enabled(X86_FEATURE_MPX)) {
+ 		/* The exception is not from Intel MPX */
+ 		goto exit_trap;
+ 	}
+ 
+ 	/*
+ 	 * We need to look at BNDSTATUS to resolve this exception.
+ 	 * It is not directly accessible, though, so we need to
+ 	 * do an xsave and then pull it out of the xsave buffer.
+ 	 */
+ 	fpu_save_init(&tsk->thread.fpu);
+ 	xsave_buf = &(tsk->thread.fpu.state->xsave);
+ 	bndcsr = get_xsave_addr(xsave_buf, XSTATE_BNDCSR);
+ 	if (!bndcsr)
+ 		goto exit_trap;
+ 
+ 	/*
+ 	 * The error code field of the BNDSTATUS register communicates status
+ 	 * information of a bound range exception #BR or operation involving
+ 	 * bound directory.
+ 	 */
+ 	switch (bndcsr->bndstatus & MPX_BNDSTA_ERROR_CODE) {
+ 	case 2:	/* Bound directory has invalid entry. */
+ 		if (mpx_handle_bd_fault(xsave_buf))
+ 			goto exit_trap;
+ 		break; /* Success, it was handled */
+ 	case 1: /* Bound violation. */
+ 		info = mpx_generate_siginfo(regs, xsave_buf);
+ 		if (IS_ERR(info)) {
+ 			/*
+ 			 * We failed to decode the MPX instruction.  Act as if
+ 			 * the exception was not caused by MPX.
+ 			 */
+ 			goto exit_trap;
+ 		}
+ 		/*
+ 		 * Success, we decoded the instruction and retrieved
+ 		 * an 'info' containing the address being accessed
+ 		 * which caused the exception.  This information
+ 		 * allows and application to possibly handle the
+ 		 * #BR exception itself.
+ 		 */
+ 		do_trap(X86_TRAP_BR, SIGSEGV, "bounds", regs, error_code, info);
+ 		kfree(info);
+ 		break;
+ 	case 0: /* No exception caused by Intel MPX operations. */
+ 		goto exit_trap;
+ 	default:
+ 		die("bounds", regs, error_code);
+ 	}
+ 
+ exit:
+ 	exception_exit(prev_state);
+ 	return;
+ exit_trap:
+ 	/*
+ 	 * This path out is for all the cases where we could not
+ 	 * handle the exception in some way (like allocating a
+ 	 * table or telling userspace about it.  We will also end
+ 	 * up here if the kernel has MPX turned off at compile
+ 	 * time..
+ 	 */
+ 	do_trap(X86_TRAP_BR, SIGSEGV, "bounds", regs, error_code, NULL);
+ 	exception_exit(prev_state);
+ }
+ 
+ dotraplinkage void
++>>>>>>> 394838c96013 (x86/asm/entry/32: Fix user_mode() misuses)
  do_general_protection(struct pt_regs *regs, long error_code)
  {
  	struct task_struct *tsk;
* Unmerged path arch/x86/kernel/traps.c
