dm: do not reuse dm_blk_ioctl block_device input as local variable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Mike Snitzer <snitzer@redhat.com>
commit 647a20d5cad7477033bc021ec9dd75edf4bbf9a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/647a20d5.failed

(Ab)using the @bdev passed to dm_blk_ioctl() opens the potential for
targets' .prepare_ioctl to fail if they go on to check the bdev for
!NULL.

Fixes: e56f81e0b01e ("dm: refactor ioctl handling")
	Reported-by: Junichi Nomura <j-nomura@ce.jp.nec.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 647a20d5cad7477033bc021ec9dd75edf4bbf9a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index 66c19dce3920,5df40480228b..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -594,7 -595,35 +594,36 @@@ out
  		msleep(10);
  		goto retry;
  	}
 -	return r;
 -}
  
++<<<<<<< HEAD
++=======
+ static int dm_blk_ioctl(struct block_device *bdev, fmode_t mode,
+ 			unsigned int cmd, unsigned long arg)
+ {
+ 	struct mapped_device *md = bdev->bd_disk->private_data;
+ 	struct dm_target *tgt;
+ 	struct block_device *tgt_bdev = NULL;
+ 	int srcu_idx, r;
+ 
+ 	r = dm_get_live_table_for_ioctl(md, &tgt, &tgt_bdev, &mode, &srcu_idx);
+ 	if (r < 0)
+ 		return r;
+ 
+ 	if (r > 0) {
+ 		/*
+ 		 * Target determined this ioctl is being issued against
+ 		 * a logical partition of the parent bdev; so extra
+ 		 * validation is needed.
+ 		 */
+ 		r = scsi_verify_blk_ioctl(NULL, cmd);
+ 		if (r)
+ 			goto out;
+ 	}
+ 
+ 	r =  __blkdev_driver_ioctl(tgt_bdev, mode, cmd, arg);
+ out:
+ 	dm_put_live_table(md, srcu_idx);
++>>>>>>> 647a20d5cad7 (dm: do not reuse dm_blk_ioctl block_device input as local variable)
  	return r;
  }
  
* Unmerged path drivers/md/dm.c
