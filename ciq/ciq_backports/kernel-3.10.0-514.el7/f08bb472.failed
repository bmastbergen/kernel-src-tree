ACPI / table: Add new function to get table entries

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] table: Add new function to get table entries (Prarit Bhargava) [1242556]
Rebuild_FUZZ: 92.63%
commit-author Ashwin Chaugule <ashwin.chaugule@linaro.org>
commit f08bb472bff3c0397fb7d6f47bc5cec41dad76e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f08bb472.failed

The acpi_table_parse() function has a callback that
passes a pointer to a table_header. Add a new function
which takes this pointer and parses its entries. This
eliminates the need to re-traverse all the tables for
each call. e.g. as in acpi_table_parse_madt() which is
normally called after acpi_table_parse().

	Acked-by: Grant Likely <grant.likely@linaro.org>
	Signed-off-by: Ashwin Chaugule <ashwin.chaugule@linaro.org>
	Signed-off-by: Tomasz Nowicki <tomasz.nowicki@linaro.org>
	Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit f08bb472bff3c0397fb7d6f47bc5cec41dad76e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/tables.c
diff --cc drivers/acpi/tables.c
index d67a1fe07f0e,f1debe97dcfc..000000000000
--- a/drivers/acpi/tables.c
+++ b/drivers/acpi/tables.c
@@@ -216,16 -203,14 +212,14 @@@ acpi_parse_entries(char *id, unsigned l
  	if (acpi_disabled)
  		return -ENODEV;
  
- 	if (!handler)
+ 	if (!id || !handler)
  		return -EINVAL;
  
- 	if (strncmp(id, ACPI_SIG_MADT, 4) == 0)
- 		acpi_get_table_with_size(id, acpi_apic_instance, &table_header, &tbl_size);
- 	else
- 		acpi_get_table_with_size(id, 0, &table_header, &tbl_size);
+ 	if (!table_size)
+ 		return -EINVAL;
  
  	if (!table_header) {
 -		pr_warn("%4.4s not present\n", id);
 +		printk(KERN_WARNING PREFIX "%4.4s not present\n", id);
  		return -ENODEV;
  	}
  
@@@ -248,23 -233,54 +242,59 @@@
  		 * infinite loop.
  		 */
  		if (entry->length == 0) {
++<<<<<<< HEAD
 +			pr_err(PREFIX "[%4.4s:0x%02x] Invalid zero length\n", id, entry_id);
 +			goto err;
++=======
+ 			pr_err("[%4.4s:0x%02x] Invalid zero length\n", id, entry_id);
+ 			return -EINVAL;
++>>>>>>> f08bb472bff3 (ACPI / table: Add new function to get table entries)
  		}
  
  		entry = (struct acpi_subtable_header *)
  		    ((unsigned long)entry + entry->length);
  	}
+ 
  	if (max_entries && count > max_entries) {
 -		pr_warn("[%4.4s:0x%02x] ignored %i entries of %i found\n",
 -			id, entry_id, count - max_entries, count);
 +		printk(KERN_WARNING PREFIX "[%4.4s:0x%02x] ignored %i entries of "
 +		       "%i found\n", id, entry_id, count - max_entries, count);
  	}
  
- 	early_acpi_os_unmap_memory((char *)table_header, tbl_size);
  	return count;
- err:
+ }
+ 
+ int __init
+ acpi_table_parse_entries(char *id,
+ 			 unsigned long table_size,
+ 			 int entry_id,
+ 			 acpi_tbl_entry_handler handler,
+ 			 unsigned int max_entries)
+ {
+ 	struct acpi_table_header *table_header = NULL;
+ 	acpi_size tbl_size;
+ 	int count;
+ 	u32 instance = 0;
+ 
+ 	if (acpi_disabled)
+ 		return -ENODEV;
+ 
+ 	if (!id || !handler)
+ 		return -EINVAL;
+ 
+ 	if (!strncmp(id, ACPI_SIG_MADT, 4))
+ 		instance = acpi_apic_instance;
+ 
+ 	acpi_get_table_with_size(id, instance, &table_header, &tbl_size);
+ 	if (!table_header) {
+ 		pr_warn("%4.4s not present\n", id);
+ 		return -ENODEV;
+ 	}
+ 
+ 	count = acpi_parse_entries(id, table_size, handler, table_header,
+ 			entry_id, max_entries);
+ 
  	early_acpi_os_unmap_memory((char *)table_header, tbl_size);
- 	return -EINVAL;
+ 	return count;
  }
  
  int __init
* Unmerged path drivers/acpi/tables.c
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index d0b584048366..26bf2fee1550 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -112,6 +112,10 @@ int acpi_numa_init (void);
 
 int acpi_table_init (void);
 int acpi_table_parse(char *id, acpi_tbl_table_handler handler);
+int __init acpi_parse_entries(char *id, unsigned long table_size,
+			      acpi_tbl_entry_handler handler,
+			      struct acpi_table_header *table_header,
+			      int entry_id, unsigned int max_entries);
 int __init acpi_table_parse_entries(char *id, unsigned long table_size,
 				    int entry_id,
 				    acpi_tbl_entry_handler handler,
