perf tools: Per-event time support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kan Liang <kan.liang@intel.com>
commit 320677123905fd1dd122895cd5fb870ee9e1380b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/32067712.failed

This patchkit adds the ability to turn off time stamps per event.

One usaful case for partial time is to work with per-event callgraph to
enable "PEBS threshold > 1" (https://lkml.org/lkml/2015/5/10/196), which
can significantly reduce the sampling overhead.

The event samples with time stamps off will not be ordered.

	Signed-off-by: Kan Liang <kan.liang@intel.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1438677022-34296-2-git-send-email-kan.liang@intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 320677123905fd1dd122895cd5fb870ee9e1380b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/parse-events.c
diff --cc tools/perf/util/evsel.c
index 016bdc7ab6b1,7febfe255703..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -582,6 -587,29 +582,32 @@@ perf_evsel__config_callgraph(struct per
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void apply_config_terms(struct perf_evsel *evsel)
+ {
+ 	struct perf_evsel_config_term *term;
+ 	struct list_head *config_terms = &evsel->config_terms;
+ 	struct perf_event_attr *attr = &evsel->attr;
+ 
+ 	list_for_each_entry(term, config_terms, list) {
+ 		switch (term->type) {
+ 		case PERF_EVSEL__CONFIG_TERM_PERIOD:
+ 			attr->sample_period = term->val.period;
+ 			break;
+ 		case PERF_EVSEL__CONFIG_TERM_TIME:
+ 			if (term->val.time)
+ 				perf_evsel__set_sample_bit(evsel, TIME);
+ 			else
+ 				perf_evsel__reset_sample_bit(evsel, TIME);
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 320677123905 (perf tools: Per-event time support)
  /*
   * The enable_on_exec/disabled value strategy:
   *
@@@ -764,6 -795,18 +790,21 @@@ void perf_evsel__config(struct perf_evs
  		attr->disabled = 0;
  		attr->enable_on_exec = 0;
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	clockid = opts->clockid;
+ 	if (opts->use_clockid) {
+ 		attr->use_clockid = 1;
+ 		attr->clockid = opts->clockid;
+ 	}
+ 
+ 	/*
+ 	 * Apply event specific term settings,
+ 	 * it overloads any global configuration.
+ 	 */
+ 	apply_config_terms(evsel);
++>>>>>>> 320677123905 (perf tools: Per-event time support)
  }
  
  static int perf_evsel__alloc_fd(struct perf_evsel *evsel, int ncpus, int nthreads)
diff --cc tools/perf/util/evsel.h
index 1fc263a80d91,6a129081f3ad..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -31,6 -31,27 +31,30 @@@ struct perf_sample_id 
  
  struct cgroup_sel;
  
++<<<<<<< HEAD
++=======
+ /*
+  * The 'struct perf_evsel_config_term' is used to pass event
+  * specific configuration data to perf_evsel__config routine.
+  * It is allocated within event parsing and attached to
+  * perf_evsel::config_terms list head.
+ */
+ enum {
+ 	PERF_EVSEL__CONFIG_TERM_PERIOD,
+ 	PERF_EVSEL__CONFIG_TERM_TIME,
+ 	PERF_EVSEL__CONFIG_TERM_MAX,
+ };
+ 
+ struct perf_evsel_config_term {
+ 	struct list_head	list;
+ 	int	type;
+ 	union {
+ 		u64	period;
+ 		bool	time;
+ 	} val;
+ };
+ 
++>>>>>>> 320677123905 (perf tools: Per-event time support)
  /** struct perf_evsel - event selector
   *
   * @name - Can be set to retain the original event name passed by the user,
diff --cc tools/perf/util/parse-events.c
index 4f807fc1b14a,a6cb9afc20e2..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -622,6 -635,41 +630,44 @@@ static int config_attr(struct perf_even
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int get_config_terms(struct list_head *head_config,
+ 			    struct list_head *head_terms __maybe_unused)
+ {
+ #define ADD_CONFIG_TERM(__type, __name, __val)			\
+ do {								\
+ 	struct perf_evsel_config_term *__t;			\
+ 								\
+ 	__t = zalloc(sizeof(*__t));				\
+ 	if (!__t)						\
+ 		return -ENOMEM;					\
+ 								\
+ 	INIT_LIST_HEAD(&__t->list);				\
+ 	__t->type       = PERF_EVSEL__CONFIG_TERM_ ## __type;	\
+ 	__t->val.__name = __val;				\
+ 	list_add_tail(&__t->list, head_terms);			\
+ } while (0)
+ 
+ 	struct parse_events_term *term;
+ 
+ 	list_for_each_entry(term, head_config, list) {
+ 		switch (term->type_term) {
+ 		case PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD:
+ 			ADD_CONFIG_TERM(PERIOD, period, term->val.num);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_TIME:
+ 			ADD_CONFIG_TERM(TIME, time, term->val.num);
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ #undef ADD_EVSEL_CONFIG
+ 	return 0;
+ }
+ 
++>>>>>>> 320677123905 (perf tools: Per-event time support)
  int parse_events_add_numeric(struct parse_events_evlist *data,
  			     struct list_head *list,
  			     u32 type, u64 config,
diff --git a/tools/perf/Documentation/perf-record.txt b/tools/perf/Documentation/perf-record.txt
index 1c99db2877d3..c743d4cb0428 100644
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@ -49,7 +49,9 @@ OPTIONS
 	  These params can be used to set event defaults.
 	  Here is a list of the params.
 	  - 'period': Set event sampling period
-
+	  - 'time': Disable/enable time stamping. Acceptable values are 1 for
+		    enabling time stamping. 0 for disabling time stamping.
+		    The default is 1.
 	  Note: If user explicitly sets options which conflict with the params,
 	  the value set by the params will be overridden.
 
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/parse-events.c
diff --git a/tools/perf/util/parse-events.h b/tools/perf/util/parse-events.h
index 2063048a4354..e6f9aacc1cce 100644
--- a/tools/perf/util/parse-events.h
+++ b/tools/perf/util/parse-events.h
@@ -63,6 +63,7 @@ enum {
 	PARSE_EVENTS__TERM_TYPE_NAME,
 	PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD,
 	PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE,
+	PARSE_EVENTS__TERM_TYPE_TIME,
 };
 
 struct parse_events_term {
diff --git a/tools/perf/util/parse-events.l b/tools/perf/util/parse-events.l
index 13cef3c65565..f5427505ae77 100644
--- a/tools/perf/util/parse-events.l
+++ b/tools/perf/util/parse-events.l
@@ -183,6 +183,7 @@ config2			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_CONFIG2); }
 name			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_NAME); }
 period			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD); }
 branch_type		{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE); }
+time			{ return term(yyscanner, PARSE_EVENTS__TERM_TYPE_TIME); }
 ,			{ return ','; }
 "/"			{ BEGIN(INITIAL); return '/'; }
 {name_minus}		{ return str(yyscanner, PE_NAME); }
diff --git a/tools/perf/util/pmu.c b/tools/perf/util/pmu.c
index 7bcb8c315615..b615cdf211d6 100644
--- a/tools/perf/util/pmu.c
+++ b/tools/perf/util/pmu.c
@@ -607,7 +607,7 @@ static char *formats_error_string(struct list_head *formats)
 {
 	struct perf_pmu_format *format;
 	char *err, *str;
-	static const char *static_terms = "config,config1,config2,name,period,branch_type\n";
+	static const char *static_terms = "config,config1,config2,name,period,branch_type,time\n";
 	unsigned i = 0;
 
 	if (!asprintf(&str, "valid terms:"))
