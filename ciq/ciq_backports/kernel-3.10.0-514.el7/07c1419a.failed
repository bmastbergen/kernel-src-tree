KVM: x86: Replace call-back compute_tsc_offset() with a common function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Haozhong Zhang <haozhong.zhang@intel.com>
commit 07c1419a32bbba08cf1efb6d1ecaf24f174fa4c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/07c1419a.failed

Both VMX and SVM calculate the tsc-offset in the same way, so this
patch removes the call-back compute_tsc_offset() and replaces it with a
common function kvm_compute_tsc_offset().

	Signed-off-by: Haozhong Zhang <haozhong.zhang@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 07c1419a32bbba08cf1efb6d1ecaf24f174fa4c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm.c
#	arch/x86/kvm/vmx.c
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/svm.c
index f4d872b9eba6,d99b175ffbea..000000000000
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@@ -1079,15 -1004,6 +1079,18 @@@ static void svm_adjust_tsc_offset(struc
  	mark_dirty(svm->vmcb, VMCB_INTERCEPTS);
  }
  
++<<<<<<< HEAD
 +static u64 svm_compute_tsc_offset(struct kvm_vcpu *vcpu, u64 target_tsc)
 +{
 +	u64 tsc;
 +
 +	tsc = svm_scale_tsc(vcpu, native_read_tsc());
 +
 +	return target_tsc - tsc;
 +}
 +
++=======
++>>>>>>> 07c1419a32bb (KVM: x86: Replace call-back compute_tsc_offset() with a common function)
  static void init_vmcb(struct vcpu_svm *svm)
  {
  	struct vmcb_control_area *control = &svm->vmcb->control;
diff --cc arch/x86/kvm/vmx.c
index 2e741a634171,2d4782ce9a93..000000000000
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@@ -2291,11 -2426,6 +2291,14 @@@ static void vmx_adjust_tsc_offset(struc
  					   offset + adjustment);
  }
  
++<<<<<<< HEAD
 +static u64 vmx_compute_tsc_offset(struct kvm_vcpu *vcpu, u64 target_tsc)
 +{
 +	return target_tsc - native_read_tsc();
 +}
 +
++=======
++>>>>>>> 07c1419a32bb (KVM: x86: Replace call-back compute_tsc_offset() with a common function)
  static bool guest_cpuid_has_vmx(struct kvm_vcpu *vcpu)
  {
  	struct kvm_cpuid_entry2 *best = kvm_find_cpuid_entry(vcpu, 1, 0);
diff --cc arch/x86/kvm/x86.c
index 24f418aad1ea,bb46066e125b..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -1310,6 -1365,42 +1310,45 @@@ static void update_ia32_tsc_adjust_msr(
  	vcpu->arch.ia32_tsc_adjust_msr += offset - curr_offset;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Multiply tsc by a fixed point number represented by ratio.
+  *
+  * The most significant 64-N bits (mult) of ratio represent the
+  * integral part of the fixed point number; the remaining N bits
+  * (frac) represent the fractional part, ie. ratio represents a fixed
+  * point number (mult + frac * 2^(-N)).
+  *
+  * N equals to kvm_tsc_scaling_ratio_frac_bits.
+  */
+ static inline u64 __scale_tsc(u64 ratio, u64 tsc)
+ {
+ 	return mul_u64_u64_shr(tsc, ratio, kvm_tsc_scaling_ratio_frac_bits);
+ }
+ 
+ u64 kvm_scale_tsc(struct kvm_vcpu *vcpu, u64 tsc)
+ {
+ 	u64 _tsc = tsc;
+ 	u64 ratio = vcpu->arch.tsc_scaling_ratio;
+ 
+ 	if (ratio != kvm_default_tsc_scaling_ratio)
+ 		_tsc = __scale_tsc(ratio, tsc);
+ 
+ 	return _tsc;
+ }
+ EXPORT_SYMBOL_GPL(kvm_scale_tsc);
+ 
+ static u64 kvm_compute_tsc_offset(struct kvm_vcpu *vcpu, u64 target_tsc)
+ {
+ 	u64 tsc;
+ 
+ 	tsc = kvm_scale_tsc(vcpu, rdtsc());
+ 
+ 	return target_tsc - tsc;
+ }
+ 
++>>>>>>> 07c1419a32bb (KVM: x86: Replace call-back compute_tsc_offset() with a common function)
  void kvm_write_tsc(struct kvm_vcpu *vcpu, struct msr_data *msr)
  {
  	struct kvm *kvm = vcpu->kvm;
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index c40aad26d942..99bc590b4237 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -802,7 +802,6 @@ struct kvm_x86_ops {
 	u64 (*read_tsc_offset)(struct kvm_vcpu *vcpu);
 	void (*write_tsc_offset)(struct kvm_vcpu *vcpu, u64 offset);
 
-	u64 (*compute_tsc_offset)(struct kvm_vcpu *vcpu, u64 target_tsc);
 	u64 (*read_l1_tsc)(struct kvm_vcpu *vcpu, u64 host_tsc);
 
 	void (*get_exit_info)(struct kvm_vcpu *vcpu, u64 *info1, u64 *info2);
* Unmerged path arch/x86/kvm/svm.c
* Unmerged path arch/x86/kvm/vmx.c
* Unmerged path arch/x86/kvm/x86.c
