vxlan: restructure vxlan.h definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Benc <jbenc@redhat.com>
commit 828788ac99d5de6bae10b333d1e8ddf25928ac12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/828788ac.failed

RCO and GBP are VXLAN extensions, not specified in RFC 7348. Because of
that, they need to be explicitly enabled when creating vxlan interface. By
default, those extensions are not used and plain VXLAN header is sent and
received.

Reflect this in vxlan.h: first, the plain VXLAN header is defined. Following
it, RCO is documented and defined, and likewise for GBP.

	Signed-off-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 828788ac99d5de6bae10b333d1e8ddf25928ac12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/vxlan.h
diff --cc include/net/vxlan.h
index b3828bd87f8a,25bd919c9ef0..000000000000
--- a/include/net/vxlan.h
+++ b/include/net/vxlan.h
@@@ -7,11 -7,67 +7,66 @@@
  #include <linux/skbuff.h>
  #include <linux/netdevice.h>
  #include <linux/udp.h>
 -#include <net/dst_metadata.h>
  
+ /* VXLAN protocol (RFC 7348) header:
+  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+  * |R|R|R|R|I|R|R|R|               Reserved                        |
+  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+  * |                VXLAN Network Identifier (VNI) |   Reserved    |
+  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+  *
+  * I = VXLAN Network Identifier (VNI) present.
+  */
+ struct vxlanhdr {
+ 	__be32 vx_flags;
+ 	__be32 vx_vni;
+ };
+ 
+ /* VXLAN header flags. */
+ #define VXLAN_HF_VNI BIT(27)
+ 
+ #define VXLAN_N_VID     (1u << 24)
+ #define VXLAN_VID_MASK  (VXLAN_N_VID - 1)
+ #define VXLAN_VNI_MASK  (VXLAN_VID_MASK << 8)
+ #define VXLAN_HLEN (sizeof(struct udphdr) + sizeof(struct vxlanhdr))
+ 
+ #define VNI_HASH_BITS	10
+ #define VNI_HASH_SIZE	(1<<VNI_HASH_BITS)
+ #define FDB_HASH_BITS	8
+ #define FDB_HASH_SIZE	(1<<FDB_HASH_BITS)
+ 
+ /* Remote checksum offload for VXLAN (VXLAN_F_REMCSUM_[RT]X):
+  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+  * |R|R|R|R|I|R|R|R|R|R|C|              Reserved                   |
+  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+  * |           VXLAN Network Identifier (VNI)      |O| Csum start  |
+  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+  *
+  * C = Remote checksum offload bit. When set indicates that the
+  *     remote checksum offload data is present.
+  *
+  * O = Offset bit. Indicates the checksum offset relative to
+  *     checksum start.
+  *
+  * Csum start = Checksum start divided by two.
+  *
+  * http://tools.ietf.org/html/draft-herbert-vxlan-rco
+  */
+ 
+ /* VXLAN-RCO header flags. */
+ #define VXLAN_HF_RCO BIT(21)
+ 
+ /* Remote checksum offload header option */
+ #define VXLAN_RCO_MASK  0x7f    /* Last byte of vni field */
+ #define VXLAN_RCO_UDP   0x80    /* Indicate UDP RCO (TCP when not set *) */
+ #define VXLAN_RCO_SHIFT 1       /* Left shift of start */
+ #define VXLAN_RCO_SHIFT_MASK ((1 << VXLAN_RCO_SHIFT) - 1)
+ #define VXLAN_MAX_REMCSUM_START (VXLAN_RCO_MASK << VXLAN_RCO_SHIFT)
+ 
  /*
-  * VXLAN Group Based Policy Extension:
+  * VXLAN Group Based Policy Extension (VXLAN_F_GBP):
   * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-  * |1|-|-|-|1|-|-|-|R|D|R|R|A|R|R|R|        Group Policy ID        |
+  * |G|R|R|R|I|R|R|R|R|D|R|R|A|R|R|R|        Group Policy ID        |
   * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   * |                VXLAN Network Identifier (VNI) |   Reserved    |
   * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
@@@ -23,12 -81,12 +80,12 @@@
   *     this packet. Policies MUST NOT be applied by devices when the
   *     A bit is set.
   *
-  * [0] https://tools.ietf.org/html/draft-smith-vxlan-group-policy
+  * https://tools.ietf.org/html/draft-smith-vxlan-group-policy
   */
  struct vxlanhdr_gbp {
 -	u8	vx_flags;
 +	__u8	vx_flags;
  #ifdef __LITTLE_ENDIAN_BITFIELD
 -	u8	reserved_flags1:3,
 +	__u8	reserved_flags1:3,
  		policy_applied:1,
  		reserved_flags2:2,
  		dont_learn:1,
@@@ -58,41 -119,7 +118,44 @@@
  #define VXLAN_GBP_POLICY_APPLIED	(BIT(3) << 16)
  #define VXLAN_GBP_ID_MASK		(0xFFFF)
  
++<<<<<<< HEAD
 +/* VXLAN protocol header:
 + * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 + * |G|R|R|R|I|R|R|C|               Reserved                        |
 + * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 + * |                VXLAN Network Identifier (VNI) |   Reserved    |
 + * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 + *
 + * G = 1	Group Policy (VXLAN-GBP)
 + * I = 1	VXLAN Network Identifier (VNI) present
 + * C = 1	Remote checksum offload (RCO)
 + */
 +struct vxlanhdr {
 +	__be32 vx_flags;
 +	__be32 vx_vni;
 +};
 +
 +/* VXLAN header flags. */
 +#define VXLAN_HF_RCO BIT(21)
 +#define VXLAN_HF_VNI BIT(27)
 +#define VXLAN_HF_GBP BIT(31)
 +
 +/* Remote checksum offload header option */
 +#define VXLAN_RCO_MASK  0x7f    /* Last byte of vni field */
 +#define VXLAN_RCO_UDP   0x80    /* Indicate UDP RCO (TCP when not set *) */
 +#define VXLAN_RCO_SHIFT 1       /* Left shift of start */
 +#define VXLAN_RCO_SHIFT_MASK ((1 << VXLAN_RCO_SHIFT) - 1)
 +#define VXLAN_MAX_REMCSUM_START (VXLAN_RCO_MASK << VXLAN_RCO_SHIFT)
 +
 +#define VXLAN_N_VID     (1u << 24)
 +#define VXLAN_VID_MASK  (VXLAN_N_VID - 1)
 +#define VXLAN_VNI_MASK  (VXLAN_VID_MASK << 8)
 +#define VXLAN_HLEN (sizeof(struct udphdr) + sizeof(struct vxlanhdr))
 +
++=======
++>>>>>>> 828788ac99d5 (vxlan: restructure vxlan.h definitions)
  struct vxlan_metadata {
 +	__be32		vni;
  	u32		gbp;
  };
  
* Unmerged path include/net/vxlan.h
