mei: use local cl variables in wd and amthif

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 3d32cf02241e307d3be92046a8cbd3deb8cda307
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3d32cf02.failed

Use local cl variable instead of dev->iamthif_cl and dev->wd_cl
as the first step to use dynamic allocation of these clients
as their are not supported on all platforms

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 3d32cf02241e307d3be92046a8cbd3deb8cda307)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/wd.c
diff --cc drivers/misc/mei/wd.c
index 1e4f4283f10e,b1d892cea94d..000000000000
--- a/drivers/misc/mei/wd.c
+++ b/drivers/misc/mei/wd.c
@@@ -286,23 -277,25 +287,35 @@@ static int mei_wd_ops_ping(struct watch
  	if (!dev)
  		return -ENODEV;
  
+ 	cl = &dev->wd_cl;
+ 
  	mutex_lock(&dev->device_lock);
  
++<<<<<<< HEAD
 +	if (dev->wd_cl.state != MEI_FILE_CONNECTED) {
 +		dev_err(&dev->pdev->dev, "wd: not connected.\n");
++=======
+ 	if (cl->state != MEI_FILE_CONNECTED) {
+ 		dev_err(dev->dev, "wd: not connected.\n");
++>>>>>>> 3d32cf02241e (mei: use local cl variables in wd and amthif)
  		ret = -ENODEV;
  		goto end;
  	}
  
  	dev->wd_state = MEI_WD_RUNNING;
  
- 	ret = mei_cl_flow_ctrl_creds(&dev->wd_cl);
+ 	ret = mei_cl_flow_ctrl_creds(cl);
  	if (ret < 0)
  		goto end;
+ 
  	/* Check if we can send the ping to HW*/
  	if (ret && mei_hbuf_acquire(dev)) {
++<<<<<<< HEAD
 +
 +		dev_dbg(&dev->pdev->dev, "wd: sending ping\n");
++=======
+ 		dev_dbg(dev->dev, "wd: sending ping\n");
++>>>>>>> 3d32cf02241e (mei: use local cl variables in wd and amthif)
  
  		ret = mei_wd_send(dev);
  		if (ret)
diff --git a/drivers/misc/mei/amthif.c b/drivers/misc/mei/amthif.c
index a11128c1997f..590c29c8603f 100644
--- a/drivers/misc/mei/amthif.c
+++ b/drivers/misc/mei/amthif.c
@@ -268,6 +268,7 @@ out:
 static int mei_amthif_send_cmd(struct mei_device *dev, struct mei_cl_cb *cb)
 {
 	struct mei_msg_hdr mei_hdr;
+	struct mei_cl *cl;
 	int ret;
 
 	if (!dev || !cb)
@@ -283,8 +284,9 @@ static int mei_amthif_send_cmd(struct mei_device *dev, struct mei_cl_cb *cb)
 	dev->iamthif_msg_buf_size = cb->request_buffer.size;
 	memcpy(dev->iamthif_msg_buf, cb->request_buffer.data,
 	       cb->request_buffer.size);
+	cl = &dev->iamthif_cl;
 
-	ret = mei_cl_flow_ctrl_creds(&dev->iamthif_cl);
+	ret = mei_cl_flow_ctrl_creds(cl);
 	if (ret < 0)
 		return ret;
 
@@ -298,8 +300,8 @@ static int mei_amthif_send_cmd(struct mei_device *dev, struct mei_cl_cb *cb)
 			mei_hdr.msg_complete = 1;
 		}
 
-		mei_hdr.host_addr = dev->iamthif_cl.host_client_id;
-		mei_hdr.me_addr = dev->iamthif_cl.me_client_id;
+		mei_hdr.host_addr = cl->host_client_id;
+		mei_hdr.me_addr = cl->me_client_id;
 		mei_hdr.reserved = 0;
 		mei_hdr.internal = 0;
 		dev->iamthif_msg_buf_index += mei_hdr.length;
@@ -308,7 +310,7 @@ static int mei_amthif_send_cmd(struct mei_device *dev, struct mei_cl_cb *cb)
 			return ret;
 
 		if (mei_hdr.msg_complete) {
-			if (mei_cl_flow_ctrl_reduce(&dev->iamthif_cl))
+			if (mei_cl_flow_ctrl_reduce(cl))
 				return -EIO;
 			dev->iamthif_flow_control_pending = true;
 			dev->iamthif_state = MEI_IAMTHIF_FLOW_CONTROL;
* Unmerged path drivers/misc/mei/wd.c
