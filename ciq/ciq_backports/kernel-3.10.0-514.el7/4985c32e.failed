ACPI / processor: Fix failure of loading acpi-cpufreq driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] processor: Fix failure of loading acpi-cpufreq driver (Prarit Bhargava) [1262898]
Rebuild_FUZZ: 93.81%
commit-author Lan Tianyu <tianyu.lan@intel.com>
commit 4985c32ee4241d1aba1beeac72294faa46aaff10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4985c32e.failed

According commit d640113fe (ACPI: processor: fix acpi_get_cpuid for UP
processor),  BIOS may not provide _MAT or MADT tables and acpi_get_apicid()
always returns -1. For these cases, original code will pass apic_id with
vaule of -1 to acpi_map_cpuid() and it will check the acpi_id. If acpi_id
is equal to zero, ignores apic_id and return zero for CPU0.

Commit b981513 (ACPI / scan: bail out early if failed to parse APIC
ID for CPU) changed the behavior. Return ENODEV when find apic_id is
less than zero after calling acpi_get_apicid(). This causes acpi-cpufreq
driver fails to be loaded on some machines. This patch is to fix it.

Fixes: b981513f806d (ACPI / scan: bail out early if failed to parse APIC ID for CPU)
References: https://bugzilla.kernel.org/show_bug.cgi?id=73781
	Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
Reported-and-tested-by: KATO Hiroshi <katoh@mikage.ne.jp>
Reported-and-tested-by: Stuart Foster <smf.linux@ntlworld.com>
	Signed-off-by: Lan Tianyu <tianyu.lan@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 4985c32ee4241d1aba1beeac72294faa46aaff10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpi_processor.c
diff --cc drivers/acpi/acpi_processor.c
index 19cb604702df,b06f5f55ada9..000000000000
--- a/drivers/acpi/acpi_processor.c
+++ b/drivers/acpi/acpi_processor.c
@@@ -264,20 -262,15 +267,27 @@@ static int acpi_processor_get_info(stru
  		pr->acpi_id = value;
  	}
  
++<<<<<<< HEAD
 +	phys_id = acpi_get_phys_id(pr->handle, device_declaration, pr->acpi_id);
 +	if (phys_id < 0) {
 +		acpi_handle_debug(pr->handle, "failed to get CPU physical ID.\n");
 +		return -ENODEV;
 +	}
 +	pr->phys_id = phys_id;
++=======
+ 	apic_id = acpi_get_apicid(pr->handle, device_declaration, pr->acpi_id);
+ 	if (apic_id < 0)
+ 		acpi_handle_debug(pr->handle, "failed to get CPU APIC ID.\n");
+ 	pr->apic_id = apic_id;
++>>>>>>> 4985c32ee424 (ACPI / processor: Fix failure of loading acpi-cpufreq driver)
  
 -	cpu_index = acpi_map_cpuid(pr->apic_id, pr->acpi_id);
 +	cpu_index = acpi_map_cpuid(pr->phys_id, pr->acpi_id);
  	if (!cpu0_initialized) {
  		cpu0_initialized = 1;
 -		/* Handle UP system running SMP kernel, with no LAPIC in MADT */
 +		/*
 +		 * Handle UP system running SMP kernel, with no CPU
 +		 * entry in MADT
 +		 */
  		if ((cpu_index == -1) && (num_online_cpus() == 1))
  			cpu_index = 0;
  	}
* Unmerged path drivers/acpi/acpi_processor.c
