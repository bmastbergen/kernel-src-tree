ACPI: Enforce stricter checks for address space descriptors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] Enforce stricter checks for address space descriptors (Myron Stowe) [1344513]
Rebuild_FUZZ: 94.64%
commit-author Jiang Liu <jiang.liu@linux.intel.com>
commit a274019fc332d7b4dcb85735978c2018522be312
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a274019f.failed

Enforce stricter checks for address space descriptors according to
ACPI spec.

	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a274019fc332d7b4dcb85735978c2018522be312)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/resource.c
diff --cc drivers/acpi/resource.c
index 75d12a1b01ad,57891a621b96..000000000000
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@@ -171,6 -184,49 +171,52 @@@ bool acpi_dev_resource_io(struct acpi_r
  }
  EXPORT_SYMBOL_GPL(acpi_dev_resource_io);
  
++<<<<<<< HEAD
++=======
+ static bool acpi_decode_space(struct resource *res,
+ 			      struct acpi_resource_address *addr,
+ 			      struct acpi_address64_attribute *attr)
+ {
+ 	u8 iodec = attr->granularity == 0xfff ? ACPI_DECODE_10 : ACPI_DECODE_16;
+ 	bool wp = addr->info.mem.write_protect;
+ 	u64 len = attr->address_length;
+ 
+ 	/*
+ 	 * Filter out invalid descriptor according to ACPI Spec 5.0, section
+ 	 * 6.4.3.5 Address Space Resource Descriptors.
+ 	 */
+ 	if ((addr->min_address_fixed != addr->max_address_fixed && len) ||
+ 	    (addr->min_address_fixed && addr->max_address_fixed && !len))
+ 		pr_debug("ACPI: Invalid address space min_addr_fix %d, max_addr_fix %d, len %llx\n",
+ 			 addr->min_address_fixed, addr->max_address_fixed, len);
+ 
+ 	res->start = attr->minimum;
+ 	res->end = attr->maximum;
+ 
+ 	switch (addr->resource_type) {
+ 	case ACPI_MEMORY_RANGE:
+ 		acpi_dev_memresource_flags(res, len, wp);
+ 		break;
+ 	case ACPI_IO_RANGE:
+ 		acpi_dev_ioresource_flags(res, len, iodec);
+ 		break;
+ 	case ACPI_BUS_NUMBER_RANGE:
+ 		res->flags = IORESOURCE_BUS;
+ 		break;
+ 	default:
+ 		return false;
+ 	}
+ 
+ 	if (addr->producer_consumer == ACPI_PRODUCER)
+ 		res->flags |= IORESOURCE_WINDOW;
+ 
+ 	if (addr->info.mem.caching == ACPI_PREFETCHABLE_MEMORY)
+ 		res->flags |= IORESOURCE_PREFETCH;
+ 
+ 	return !(res->flags & IORESOURCE_DISABLED);
+ }
+ 
++>>>>>>> a274019fc332 (ACPI: Enforce stricter checks for address space descriptors)
  /**
   * acpi_dev_resource_address_space - Extract ACPI address space information.
   * @ares: Input ACPI resource object.
* Unmerged path drivers/acpi/resource.c
