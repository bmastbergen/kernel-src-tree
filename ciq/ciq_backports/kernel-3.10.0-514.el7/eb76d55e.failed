ACPI: Unify the parsing of address_space and ext_address_space

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] Unify the parsing of address_space and ext_address_space (Myron Stowe) [1344513]
Rebuild_FUZZ: 94.92%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit eb76d55e66a9bed2359cc5a0f08168b287c4dea8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/eb76d55e.failed

With the unions in place which let us identify the substructs we can
use a single parser for address_space and ext_address_space.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit eb76d55e66a9bed2359cc5a0f08168b287c4dea8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/resource.c
diff --cc drivers/acpi/resource.c
index 75d12a1b01ad,99903d196024..000000000000
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@@ -183,42 -219,13 +212,48 @@@ static bool acpi_decode_space(struct re
  bool acpi_dev_resource_address_space(struct acpi_resource *ares,
  				     struct resource *res)
  {
- 	acpi_status status;
  	struct acpi_resource_address64 addr;
++<<<<<<< HEAD
 +	bool window;
 +	u64 len;
 +	u8 io_decode;
++=======
++>>>>>>> eb76d55e66a9 (ACPI: Unify the parsing of address_space and ext_address_space)
  
- 	status = acpi_resource_to_address64(ares, &addr);
- 	if (ACPI_FAILURE(status))
+ 	if (ACPI_FAILURE(acpi_resource_to_address64(ares, &addr)))
  		return false;
  
++<<<<<<< HEAD
 +	res->start = addr.minimum;
 +	res->end = addr.maximum;
 +	window = addr.producer_consumer == ACPI_PRODUCER;
 +
 +	switch(addr.resource_type) {
 +	case ACPI_MEMORY_RANGE:
 +		len = addr.maximum - addr.minimum + 1;
 +		res->flags = acpi_dev_memresource_flags(len,
 +						addr.info.mem.write_protect,
 +						window);
 +		break;
 +	case ACPI_IO_RANGE:
 +		io_decode = addr.granularity == 0xfff ?
 +				ACPI_DECODE_10 : ACPI_DECODE_16;
 +		res->flags = acpi_dev_ioresource_flags(addr.minimum,
 +						       addr.maximum,
 +						       io_decode, window);
 +		break;
 +	case ACPI_BUS_NUMBER_RANGE:
 +		res->flags = IORESOURCE_BUS;
 +		break;
 +	default:
 +		return false;
 +	}
 +
 +	return !(res->flags & IORESOURCE_DISABLED);
++=======
+ 	return acpi_decode_space(res, (struct acpi_resource_address *)&addr,
+ 				 &addr.address);
++>>>>>>> eb76d55e66a9 (ACPI: Unify the parsing of address_space and ext_address_space)
  }
  EXPORT_SYMBOL_GPL(acpi_dev_resource_address_space);
  
@@@ -235,41 -242,14 +270,49 @@@ bool acpi_dev_resource_ext_address_spac
  					 struct resource *res)
  {
  	struct acpi_resource_extended_address64 *ext_addr;
++<<<<<<< HEAD
 +	bool window;
 +	u64 len;
 +	u8 io_decode;
++=======
++>>>>>>> eb76d55e66a9 (ACPI: Unify the parsing of address_space and ext_address_space)
  
  	if (ares->type != ACPI_RESOURCE_TYPE_EXTENDED_ADDRESS64)
  		return false;
  
  	ext_addr = &ares->data.ext_address64;
  
++<<<<<<< HEAD
 +	res->start = ext_addr->minimum;
 +	res->end = ext_addr->maximum;
 +	window = ext_addr->producer_consumer == ACPI_PRODUCER;
 +
 +	switch(ext_addr->resource_type) {
 +	case ACPI_MEMORY_RANGE:
 +		len = ext_addr->maximum - ext_addr->minimum + 1;
 +		res->flags = acpi_dev_memresource_flags(len,
 +					ext_addr->info.mem.write_protect,
 +					window);
 +		break;
 +	case ACPI_IO_RANGE:
 +		io_decode = ext_addr->granularity == 0xfff ?
 +				ACPI_DECODE_10 : ACPI_DECODE_16;
 +		res->flags = acpi_dev_ioresource_flags(ext_addr->minimum,
 +						       ext_addr->maximum,
 +						       io_decode, window);
 +		break;
 +	case ACPI_BUS_NUMBER_RANGE:
 +		res->flags = IORESOURCE_BUS;
 +		break;
 +	default:
 +		return false;
 +	}
 +
 +	return !(res->flags & IORESOURCE_DISABLED);
++=======
+ 	return acpi_decode_space(res, (struct acpi_resource_address *)ext_addr,
+ 				 &ext_addr->address);
++>>>>>>> eb76d55e66a9 (ACPI: Unify the parsing of address_space and ext_address_space)
  }
  EXPORT_SYMBOL_GPL(acpi_dev_resource_ext_address_space);
  
* Unmerged path drivers/acpi/resource.c
