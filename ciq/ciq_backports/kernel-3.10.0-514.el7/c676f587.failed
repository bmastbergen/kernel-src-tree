iommu/vt-d: Disable IRQ remapping in intel_prepare_irq_remapping

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] vt-d: Disable IRQ remapping in intel_prepare_irq_remapping (Myron Stowe) [1050021]
Rebuild_FUZZ: 95.08%
commit-author Joerg Roedel <jroedel@suse.de>
commit c676f5876bc088ace35ece98042a3be6d8329530
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c676f587.failed

Move it to this function for now, so that the copy routines
for irq remapping take no effect yet.

	Tested-by: ZhenHua Li <zhen-hual@hp.com>
	Tested-by: Baoquan He <bhe@redhat.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit c676f5876bc088ace35ece98042a3be6d8329530)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel_irq_remapping.c
diff --cc drivers/iommu/intel_irq_remapping.c
index 085a116a8b0a,f1711836486f..000000000000
--- a/drivers/iommu/intel_irq_remapping.c
+++ b/drivers/iommu/intel_irq_remapping.c
@@@ -615,10 -640,37 +615,41 @@@ static int __init intel_prepare_irq_rem
  		if (!ecap_ir_support(iommu->ecap))
  			goto error;
  
++<<<<<<< HEAD
 +	/* Do the allocations early */
 +	for_each_iommu(iommu, drhd)
 +		if (intel_setup_irq_remapping(iommu))
++=======
+ 	/* Detect remapping mode: lapic or x2apic */
+ 	if (x2apic_supported()) {
+ 		eim = !dmar_x2apic_optout();
+ 		if (!eim) {
+ 			pr_info("x2apic is disabled because BIOS sets x2apic opt out bit.");
+ 			pr_info("Use 'intremap=no_x2apic_optout' to override the BIOS setting.\n");
+ 		}
+ 	}
+ 
+ 	for_each_iommu(iommu, drhd) {
+ 		if (eim && !ecap_eim_support(iommu->ecap)) {
+ 			pr_info("%s does not support EIM\n", iommu->name);
+ 			eim = 0;
+ 		}
+ 
+ 		/* Disable IRQ remapping if it is already enabled */
+ 		iommu_disable_irq_remapping(iommu);
+ 	}
+ 
+ 	eim_mode = eim;
+ 	if (eim)
+ 		pr_info("Queued invalidation will be enabled to support x2apic and Intr-remapping.\n");
+ 
+ 	/* Do the initializations early */
+ 	for_each_iommu(iommu, drhd) {
+ 		if (intel_setup_irq_remapping(iommu)) {
+ 			pr_err("Failed to setup irq remapping for %s\n",
+ 			       iommu->name);
++>>>>>>> c676f5876bc0 (iommu/vt-d: Disable IRQ remapping in intel_prepare_irq_remapping)
  			goto error;
 -		}
 -	}
  
  	return 0;
  
@@@ -632,63 -684,7 +663,66 @@@ static int __init intel_enable_irq_rema
  	struct dmar_drhd_unit *drhd;
  	struct intel_iommu *iommu;
  	bool setup = false;
 +	int eim = 0;
 +
++<<<<<<< HEAD
 +	if (x2apic_supported()) {
 +		eim = !dmar_x2apic_optout();
 +		if (!eim)
 +			pr_info("x2apic is disabled because BIOS sets x2apic opt out bit. You can use 'intremap=no_x2apic_optout' to override the BIOS setting.\n");
 +	}
 +
 +	for_each_iommu(iommu, drhd) {
 +		/*
 +		 * If the queued invalidation is already initialized,
 +		 * shouldn't disable it.
 +		 */
 +		if (iommu->qi)
 +			continue;
 +
 +		/*
 +		 * Clear previous faults.
 +		 */
 +		dmar_fault(-1, iommu);
 +
 +		/*
 +		 * Disable intr remapping and queued invalidation, if already
 +		 * enabled prior to OS handover.
 +		 */
 +		iommu_disable_irq_remapping(iommu);
 +
 +		dmar_disable_qi(iommu);
 +	}
 +
 +	/*
 +	 * check for the Interrupt-remapping support
 +	 */
 +	for_each_iommu(iommu, drhd)
 +		if (eim && !ecap_eim_support(iommu->ecap)) {
 +			printk(KERN_INFO "DRHD %Lx: EIM not supported by DRHD, "
 +			       " ecap %Lx\n", drhd->reg_base_addr, iommu->ecap);
 +			eim = 0;
 +		}
 +	eim_mode = eim;
 +	if (eim)
 +		pr_info("Queued invalidation will be enabled to support x2apic and Intr-remapping.\n");
  
 +	/*
 +	 * Enable queued invalidation for all the DRHD's.
 +	 */
 +	for_each_iommu(iommu, drhd) {
 +		int ret = dmar_enable_qi(iommu);
 +
 +		if (ret) {
 +			printk(KERN_ERR "DRHD %Lx: failed to enable queued, "
 +			       " invalidation, ecap %Lx, ret %d\n",
 +			       drhd->reg_base_addr, iommu->ecap, ret);
 +			goto error;
 +		}
 +	}
 +
++=======
++>>>>>>> c676f5876bc0 (iommu/vt-d: Disable IRQ remapping in intel_prepare_irq_remapping)
  	/*
  	 * Setup Interrupt-remapping for all the DRHD's now.
  	 */
* Unmerged path drivers/iommu/intel_irq_remapping.c
