perf top: Add branch annotation code to top

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Andi Kleen <ak@linux.intel.com>
commit a18b027efe1a2a502d98a8d0ea0391a72bf3f696
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a18b027e.failed

Now that we can process branch data in annotate it makes sense to
support enabling branch recording from top too. Most of the code needed
for this is already in shared code with report. But we need to add:

- The option parsing code (using shared code from the previous patch)
- Document the options
- Set up the IPC/cycles accounting state in the top session
- Call the accounting code in the hist iter callback

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1437233094-12844-8-git-send-email-andi@firstfloor.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a18b027efe1a2a502d98a8d0ea0391a72bf3f696)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-top.c
diff --cc tools/perf/builtin-top.c
index d15b4eaf6954,bfe24f1e362f..000000000000
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@@ -1168,6 -1172,14 +1171,17 @@@ int cmd_top(int argc, const char **argv
  	OPT_STRING('w', "column-widths", &symbol_conf.col_width_list_str,
  		   "width[,width...]",
  		   "don't try to adjust column width, use these fixed values"),
++<<<<<<< HEAD
++=======
+ 	OPT_UINTEGER(0, "proc-map-timeout", &opts->proc_map_timeout,
+ 			"per thread proc mmap processing timeout in ms"),
+ 	OPT_CALLBACK_NOOPT('b', "branch-any", &opts->branch_stack,
+ 		     "branch any", "sample any taken branches",
+ 		     parse_branch_stack),
+ 	OPT_CALLBACK('j', "branch-filter", &opts->branch_stack,
+ 		     "branch filter mask", "branch stack filter modes",
+ 		     parse_branch_stack),
++>>>>>>> a18b027efe1a (perf top: Add branch annotation code to top)
  	OPT_END()
  	};
  	const char * const top_usage[] = {
diff --git a/tools/perf/Documentation/perf-top.txt b/tools/perf/Documentation/perf-top.txt
index 9e5b07eb7d35..fc2bffd88fb3 100644
--- a/tools/perf/Documentation/perf-top.txt
+++ b/tools/perf/Documentation/perf-top.txt
@@ -202,6 +202,27 @@ Default is to monitor all CPUS.
 	readability.  0 means no limit (default behavior).
 
 
+-b::
+--branch-any::
+	Enable taken branch stack sampling. Any type of taken branch may be sampled.
+	This is a shortcut for --branch-filter any. See --branch-filter for more infos.
+
+-j::
+--branch-filter::
+	Enable taken branch stack sampling. Each sample captures a series of consecutive
+	taken branches. The number of branches captured with each sample depends on the
+	underlying hardware, the type of branches of interest, and the executed code.
+	It is possible to select the types of branches captured by enabling filters.
+	For a full list of modifiers please see the perf record manpage.
+
+	The option requires at least one branch type among any, any_call, any_ret, ind_call, cond.
+	The privilege levels may be omitted, in which case, the privilege levels of the associated
+	event are applied to the branch filter. Both kernel (k) and hypervisor (hv) privilege
+	levels are subject to permissions.  When sampling on multiple events, branch stack sampling
+	is enabled for all the sampling events. The sampled branch type is the same for all events.
+	The various filters must be specified as a comma separated list: --branch-filter any_ret,u,k
+	Note that this feature may not be available on all processors.
+
 INTERACTIVE PROMPTING KEYS
 --------------------------
 
* Unmerged path tools/perf/builtin-top.c
