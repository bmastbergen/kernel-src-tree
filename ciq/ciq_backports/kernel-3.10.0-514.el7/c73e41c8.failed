mmc: dw_mmc-pltfm: add Rockchip variant

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Heiko St√ºbner <heiko@sntech.de>
commit c73e41c898bb59aaf50098c2c672c7132a88fdbc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c73e41c8.failed

Cortex-A9 SoCs from Rockchip use a slightly modified variant of dw_mmc
controllers that seems to require the SDMMC_CMD_USE_HOLD_REG bit to
always be set.

There also seem to be no other modifications (additional register etc)
present, so to keep the footprint low, add this small variant to the
pltfm driver.

	Signed-off-by: Heiko Stuebner <heiko@sntech.de>
	Acked-by: Seungwon Jeon <tgih.jun@samsung.com>
	Signed-off-by: Chris Ball <cjb@laptop.org>
(cherry picked from commit c73e41c898bb59aaf50098c2c672c7132a88fdbc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/dw_mmc-pltfm.c
diff --cc drivers/mmc/host/dw_mmc-pltfm.c
index 37873f101cdb,ee525565aa77..000000000000
--- a/drivers/mmc/host/dw_mmc-pltfm.c
+++ b/drivers/mmc/host/dw_mmc-pltfm.c
@@@ -24,8 -24,17 +24,17 @@@
  
  #include "dw_mmc.h"
  
+ static void dw_mci_rockchip_prepare_command(struct dw_mci *host, u32 *cmdr)
+ {
+ 	*cmdr |= SDMMC_CMD_USE_HOLD_REG;
+ }
+ 
+ static const struct dw_mci_drv_data rockchip_drv_data = {
+ 	.prepare_command	= dw_mci_rockchip_prepare_command,
+ };
+ 
  int dw_mci_pltfm_register(struct platform_device *pdev,
 -			  const struct dw_mci_drv_data *drv_data)
 +				const struct dw_mci_drv_data *drv_data)
  {
  	struct dw_mci *host;
  	struct resource	*regs;
@@@ -118,6 -102,28 +129,31 @@@ static const struct of_device_id dw_mci
  };
  MODULE_DEVICE_TABLE(of, dw_mci_pltfm_match);
  
++<<<<<<< HEAD
++=======
+ static int dw_mci_pltfm_probe(struct platform_device *pdev)
+ {
+ 	const struct dw_mci_drv_data *drv_data = NULL;
+ 	const struct of_device_id *match;
+ 
+ 	if (pdev->dev.of_node) {
+ 		match = of_match_node(dw_mci_pltfm_match, pdev->dev.of_node);
+ 		drv_data = match->data;
+ 	}
+ 
+ 	return dw_mci_pltfm_register(pdev, drv_data);
+ }
+ 
+ int dw_mci_pltfm_remove(struct platform_device *pdev)
+ {
+ 	struct dw_mci *host = platform_get_drvdata(pdev);
+ 
+ 	dw_mci_remove(host);
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(dw_mci_pltfm_remove);
+ 
++>>>>>>> c73e41c898bb (mmc: dw_mmc-pltfm: add Rockchip variant)
  static struct platform_driver dw_mci_pltfm_driver = {
  	.probe		= dw_mci_pltfm_probe,
  	.remove		= dw_mci_pltfm_remove,
diff --git a/Documentation/devicetree/bindings/mmc/rockchip-dw-mshc.txt b/Documentation/devicetree/bindings/mmc/rockchip-dw-mshc.txt
new file mode 100644
index 000000000000..8a3d91d47b6a
--- /dev/null
+++ b/Documentation/devicetree/bindings/mmc/rockchip-dw-mshc.txt
@@ -0,0 +1,23 @@
+* Rockchip specific extensions to the Synopsis Designware Mobile
+  Storage Host Controller
+
+The Synopsis designware mobile storage host controller is used to interface
+a SoC with storage medium such as eMMC or SD/MMC cards. This file documents
+differences between the core Synopsis dw mshc controller properties described
+by synopsis-dw-mshc.txt and the properties used by the Rockchip specific
+extensions to the Synopsis Designware Mobile Storage Host Controller.
+
+Required Properties:
+
+* compatible: should be
+	- "rockchip,rk2928-dw-mshc": for Rockchip RK2928 and following
+
+Example:
+
+	rkdwmmc0@12200000 {
+		compatible = "rockchip,rk2928-dw-mshc";
+		reg = <0x12200000 0x1000>;
+		interrupts = <0 75 0>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+	};
* Unmerged path drivers/mmc/host/dw_mmc-pltfm.c
