iscsi-target: export symbols

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Varun Prakash <varun@chelsio.com>
commit d2faaefb8d4c63fbc680512b04f9eb57667e2682
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d2faaefb.failed

export symbols for ISCSI_HW_OFFLOAD
transport drivers.

	Signed-off-by: Varun Prakash <varun@chelsio.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit d2faaefb8d4c63fbc680512b04f9eb57667e2682)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target.c
diff --cc drivers/target/iscsi/iscsi_target.c
index 9c89eb0215d7,487d8f37b23a..000000000000
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@@ -480,10 -478,9 +480,14 @@@ int iscsit_del_np(struct iscsi_np *np
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int iscsit_immediate_queue(struct iscsi_conn *, struct iscsi_cmd *, int);
 +static int iscsit_response_queue(struct iscsi_conn *, struct iscsi_cmd *, int);
++=======
+ static void iscsit_get_rx_pdu(struct iscsi_conn *);
++>>>>>>> d2faaefb8d4c (iscsi-target: export symbols)
  
- static int iscsit_queue_rsp(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
+ int iscsit_queue_rsp(struct iscsi_conn *conn, struct iscsi_cmd *cmd)
  {
  	iscsit_add_cmd_to_response_queue(cmd, cmd->conn, cmd->i_state);
  	return 0;
@@@ -500,7 -498,170 +505,8 @@@ void iscsit_aborted_task(struct iscsi_c
  
  	__iscsit_free_cmd(cmd, scsi_cmd, true);
  }
+ EXPORT_SYMBOL(iscsit_aborted_task);
  
 -static void iscsit_do_crypto_hash_buf(struct ahash_request *, const void *,
 -				      u32, u32, u8 *, u8 *);
 -static void iscsit_tx_thread_wait_for_tcp(struct iscsi_conn *);
 -
 -static int
 -iscsit_xmit_nondatain_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
 -			  const void *data_buf, u32 data_buf_len)
 -{
 -	struct iscsi_hdr *hdr = (struct iscsi_hdr *)cmd->pdu;
 -	struct kvec *iov;
 -	u32 niov = 0, tx_size = ISCSI_HDR_LEN;
 -	int ret;
 -
 -	iov = &cmd->iov_misc[0];
 -	iov[niov].iov_base	= cmd->pdu;
 -	iov[niov++].iov_len	= ISCSI_HDR_LEN;
 -
 -	if (conn->conn_ops->HeaderDigest) {
 -		u32 *header_digest = (u32 *)&cmd->pdu[ISCSI_HDR_LEN];
 -
 -		iscsit_do_crypto_hash_buf(conn->conn_tx_hash, hdr,
 -					  ISCSI_HDR_LEN, 0, NULL,
 -					  (u8 *)header_digest);
 -
 -		iov[0].iov_len += ISCSI_CRC_LEN;
 -		tx_size += ISCSI_CRC_LEN;
 -		pr_debug("Attaching CRC32C HeaderDigest"
 -			 " to opcode 0x%x 0x%08x\n",
 -			 hdr->opcode, *header_digest);
 -	}
 -
 -	if (data_buf_len) {
 -		u32 padding = ((-data_buf_len) & 3);
 -
 -		iov[niov].iov_base	= (void *)data_buf;
 -		iov[niov++].iov_len	= data_buf_len;
 -		tx_size += data_buf_len;
 -
 -		if (padding != 0) {
 -			iov[niov].iov_base = &cmd->pad_bytes;
 -			iov[niov++].iov_len = padding;
 -			tx_size += padding;
 -			pr_debug("Attaching %u additional"
 -				 " padding bytes.\n", padding);
 -		}
 -
 -		if (conn->conn_ops->DataDigest) {
 -			iscsit_do_crypto_hash_buf(conn->conn_tx_hash,
 -						  data_buf, data_buf_len,
 -						  padding,
 -						  (u8 *)&cmd->pad_bytes,
 -						  (u8 *)&cmd->data_crc);
 -
 -			iov[niov].iov_base = &cmd->data_crc;
 -			iov[niov++].iov_len = ISCSI_CRC_LEN;
 -			tx_size += ISCSI_CRC_LEN;
 -			pr_debug("Attached DataDigest for %u"
 -				 " bytes opcode 0x%x, CRC 0x%08x\n",
 -				 data_buf_len, hdr->opcode, cmd->data_crc);
 -		}
 -	}
 -
 -	cmd->iov_misc_count = niov;
 -	cmd->tx_size = tx_size;
 -
 -	ret = iscsit_send_tx_data(cmd, conn, 1);
 -	if (ret < 0) {
 -		iscsit_tx_thread_wait_for_tcp(conn);
 -		return ret;
 -	}
 -
 -	return 0;
 -}
 -
 -static int iscsit_map_iovec(struct iscsi_cmd *, struct kvec *, u32, u32);
 -static void iscsit_unmap_iovec(struct iscsi_cmd *);
 -static u32 iscsit_do_crypto_hash_sg(struct ahash_request *, struct iscsi_cmd *,
 -				    u32, u32, u32, u8 *);
 -static int
 -iscsit_xmit_datain_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
 -		       const struct iscsi_datain *datain)
 -{
 -	struct kvec *iov;
 -	u32 iov_count = 0, tx_size = 0;
 -	int ret, iov_ret;
 -
 -	iov = &cmd->iov_data[0];
 -	iov[iov_count].iov_base	= cmd->pdu;
 -	iov[iov_count++].iov_len = ISCSI_HDR_LEN;
 -	tx_size += ISCSI_HDR_LEN;
 -
 -	if (conn->conn_ops->HeaderDigest) {
 -		u32 *header_digest = (u32 *)&cmd->pdu[ISCSI_HDR_LEN];
 -
 -		iscsit_do_crypto_hash_buf(conn->conn_tx_hash, cmd->pdu,
 -					  ISCSI_HDR_LEN, 0, NULL,
 -					  (u8 *)header_digest);
 -
 -		iov[0].iov_len += ISCSI_CRC_LEN;
 -		tx_size += ISCSI_CRC_LEN;
 -
 -		pr_debug("Attaching CRC32 HeaderDigest for DataIN PDU 0x%08x\n",
 -			 *header_digest);
 -	}
 -
 -	iov_ret = iscsit_map_iovec(cmd, &cmd->iov_data[1],
 -				   datain->offset, datain->length);
 -	if (iov_ret < 0)
 -		return -1;
 -
 -	iov_count += iov_ret;
 -	tx_size += datain->length;
 -
 -	cmd->padding = ((-datain->length) & 3);
 -	if (cmd->padding) {
 -		iov[iov_count].iov_base		= cmd->pad_bytes;
 -		iov[iov_count++].iov_len	= cmd->padding;
 -		tx_size += cmd->padding;
 -
 -		pr_debug("Attaching %u padding bytes\n", cmd->padding);
 -	}
 -
 -	if (conn->conn_ops->DataDigest) {
 -		cmd->data_crc = iscsit_do_crypto_hash_sg(conn->conn_tx_hash,
 -							 cmd, datain->offset,
 -							 datain->length,
 -							 cmd->padding,
 -							 cmd->pad_bytes);
 -
 -		iov[iov_count].iov_base	= &cmd->data_crc;
 -		iov[iov_count++].iov_len = ISCSI_CRC_LEN;
 -		tx_size += ISCSI_CRC_LEN;
 -
 -		pr_debug("Attached CRC32C DataDigest %d bytes, crc 0x%08x\n",
 -			 datain->length + cmd->padding, cmd->data_crc);
 -	}
 -
 -	cmd->iov_data_count = iov_count;
 -	cmd->tx_size = tx_size;
 -
 -	ret = iscsit_fe_sendpage_sg(cmd, conn);
 -
 -	iscsit_unmap_iovec(cmd);
 -
 -	if (ret < 0) {
 -		iscsit_tx_thread_wait_for_tcp(conn);
 -		return ret;
 -	}
 -
 -	return 0;
 -}
 -
 -static int iscsit_xmit_pdu(struct iscsi_conn *conn, struct iscsi_cmd *cmd,
 -			   struct iscsi_datain_req *dr, const void *buf,
 -			   u32 buf_len)
 -{
 -	if (dr)
 -		return iscsit_xmit_datain_pdu(conn, cmd, buf);
 -	else
 -		return iscsit_xmit_nondatain_pdu(conn, cmd, buf, buf_len);
 -}
 -
  static enum target_prot_op iscsit_get_sup_prot_ops(struct iscsi_conn *conn)
  {
  	return TARGET_PROT_NORMAL;
* Unmerged path drivers/target/iscsi/iscsi_target.c
diff --git a/drivers/target/iscsi/iscsi_target_datain_values.c b/drivers/target/iscsi/iscsi_target_datain_values.c
index fb3b52b124ac..647d4a5dca52 100644
--- a/drivers/target/iscsi/iscsi_target_datain_values.c
+++ b/drivers/target/iscsi/iscsi_target_datain_values.c
@@ -524,3 +524,4 @@ struct iscsi_datain_req *iscsit_get_datain_values(
 
 	return NULL;
 }
+EXPORT_SYMBOL(iscsit_get_datain_values);
diff --git a/drivers/target/iscsi/iscsi_target_login.c b/drivers/target/iscsi/iscsi_target_login.c
index af49b793be31..4368a4f4e531 100644
--- a/drivers/target/iscsi/iscsi_target_login.c
+++ b/drivers/target/iscsi/iscsi_target_login.c
@@ -249,7 +249,7 @@ static void iscsi_login_set_conn_values(
 	mutex_unlock(&auth_id_lock);
 }
 
-static __printf(2, 3) int iscsi_change_param_sprintf(
+__printf(2, 3) int iscsi_change_param_sprintf(
 	struct iscsi_conn *conn,
 	const char *fmt, ...)
 {
@@ -270,6 +270,7 @@ static __printf(2, 3) int iscsi_change_param_sprintf(
 
 	return 0;
 }
+EXPORT_SYMBOL(iscsi_change_param_sprintf);
 
 /*
  *	This is the leading connection of a new session,
diff --git a/drivers/target/iscsi/iscsi_target_nego.c b/drivers/target/iscsi/iscsi_target_nego.c
index 52409a817501..0720ef19a09d 100644
--- a/drivers/target/iscsi/iscsi_target_nego.c
+++ b/drivers/target/iscsi/iscsi_target_nego.c
@@ -268,6 +268,7 @@ int iscsi_target_check_login_request(
 
 	return 0;
 }
+EXPORT_SYMBOL(iscsi_target_check_login_request);
 
 static int iscsi_target_check_first_request(
 	struct iscsi_conn *conn,
diff --git a/drivers/target/iscsi/iscsi_target_parameters.c b/drivers/target/iscsi/iscsi_target_parameters.c
index d4f9e9645697..f4e6f709a0a2 100644
--- a/drivers/target/iscsi/iscsi_target_parameters.c
+++ b/drivers/target/iscsi/iscsi_target_parameters.c
@@ -703,6 +703,7 @@ struct iscsi_param *iscsi_find_param_from_key(
 	pr_err("Unable to locate key \"%s\".\n", key);
 	return NULL;
 }
+EXPORT_SYMBOL(iscsi_find_param_from_key);
 
 int iscsi_extract_key_value(char *textbuf, char **key, char **value)
 {
diff --git a/drivers/target/iscsi/iscsi_target_util.c b/drivers/target/iscsi/iscsi_target_util.c
index d56e38a96f25..2faae1edc0c8 100644
--- a/drivers/target/iscsi/iscsi_target_util.c
+++ b/drivers/target/iscsi/iscsi_target_util.c
@@ -515,6 +515,7 @@ void iscsit_add_cmd_to_immediate_queue(
 
 	wake_up(&conn->queues_wq);
 }
+EXPORT_SYMBOL(iscsit_add_cmd_to_immediate_queue);
 
 struct iscsi_queue_req *iscsit_get_cmd_from_immediate_queue(struct iscsi_conn *conn)
 {
@@ -774,6 +775,7 @@ void iscsit_free_cmd(struct iscsi_cmd *cmd, bool shutdown)
 		break;
 	}
 }
+EXPORT_SYMBOL(iscsit_free_cmd);
 
 int iscsit_check_session_usage_count(struct iscsi_session *sess)
 {
diff --git a/include/target/iscsi/iscsi_transport.h b/include/target/iscsi/iscsi_transport.h
index e6bb166f12c2..39ad7b6dc56b 100644
--- a/include/target/iscsi/iscsi_transport.h
+++ b/include/target/iscsi/iscsi_transport.h
@@ -77,6 +77,18 @@ extern void iscsit_build_reject(struct iscsi_cmd *, struct iscsi_conn *,
 extern int iscsit_build_logout_rsp(struct iscsi_cmd *, struct iscsi_conn *,
 				struct iscsi_logout_rsp *);
 extern int iscsit_logout_post_handler(struct iscsi_cmd *, struct iscsi_conn *);
+extern int iscsit_queue_rsp(struct iscsi_conn *, struct iscsi_cmd *);
+extern void iscsit_aborted_task(struct iscsi_conn *, struct iscsi_cmd *);
+extern int iscsit_add_reject(struct iscsi_conn *, u8, unsigned char *);
+extern int iscsit_reject_cmd(struct iscsi_cmd *, u8, unsigned char *);
+extern int iscsit_handle_snack(struct iscsi_conn *, unsigned char *);
+extern void iscsit_build_datain_pdu(struct iscsi_cmd *, struct iscsi_conn *,
+				    struct iscsi_datain *,
+				    struct iscsi_data_rsp *, bool);
+extern int iscsit_build_r2ts_for_cmd(struct iscsi_conn *, struct iscsi_cmd *,
+				     bool);
+extern int iscsit_immediate_queue(struct iscsi_conn *, struct iscsi_cmd *, int);
+extern int iscsit_response_queue(struct iscsi_conn *, struct iscsi_cmd *, int);
 /*
  * From iscsi_target_device.c
  */
@@ -102,3 +114,24 @@ extern struct iscsi_cmd *iscsit_allocate_cmd(struct iscsi_conn *, int);
 extern int iscsit_sequence_cmd(struct iscsi_conn *, struct iscsi_cmd *,
 			       unsigned char *, __be32);
 extern void iscsit_release_cmd(struct iscsi_cmd *);
+extern void iscsit_free_cmd(struct iscsi_cmd *, bool);
+extern void iscsit_add_cmd_to_immediate_queue(struct iscsi_cmd *,
+					      struct iscsi_conn *, u8);
+
+/*
+ * From iscsi_target_nego.c
+ */
+extern int iscsi_target_check_login_request(struct iscsi_conn *,
+					    struct iscsi_login *);
+
+/*
+ * From iscsi_target_login.c
+ */
+extern __printf(2, 3) int iscsi_change_param_sprintf(
+	struct iscsi_conn *, const char *, ...);
+
+/*
+ * From iscsi_target_parameters.c
+ */
+extern struct iscsi_param *iscsi_find_param_from_key(
+	char *, struct iscsi_param_list *);
