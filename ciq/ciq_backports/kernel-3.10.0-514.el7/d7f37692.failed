xfs: return start block of first bad log record during recovery

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Brian Foster <bfoster@redhat.com>
commit d7f37692e38798797d415153bc186afb2bbac645
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d7f37692.failed

Each log recovery pass walks from the tail block to the head block and
processes records appropriately based on the associated log pass type.
There are various failure conditions that can occur through this
sequence, such as I/O errors, CRC errors, etc. Log torn write detection
will perform CRC verification near the head of the log to detect torn
writes and trim torn records from the log appropriately.

As it is, xlog_do_recovery_pass() only returns an error code in the
event of CRC failure, which isn't enough information to trim the head of
the log. Update xlog_do_recovery_pass() to optionally return the start
block of the associated record when an error occurs. This patch contains
no functional changes.

	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit d7f37692e38798797d415153bc186afb2bbac645)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_log_recover.c
diff --cc fs/xfs/xfs_log_recover.c
index 5a774879a6c2,e0318e8a0771..000000000000
--- a/fs/xfs/xfs_log_recover.c
+++ b/fs/xfs/xfs_log_recover.c
@@@ -4263,7 -4244,8 +4264,12 @@@ xlog_do_recovery_pass
  {
  	xlog_rec_header_t	*rhead;
  	xfs_daddr_t		blk_no;
++<<<<<<< HEAD
 +	xfs_caddr_t		offset;
++=======
+ 	xfs_daddr_t		rhead_blk;
+ 	char			*offset;
++>>>>>>> d7f37692e387 (xfs: return start block of first bad log record during recovery)
  	xfs_buf_t		*hbp, *dbp;
  	int			error = 0, h_size, h_len;
  	int			bblks, split_bblks;
* Unmerged path fs/xfs/xfs_log_recover.c
