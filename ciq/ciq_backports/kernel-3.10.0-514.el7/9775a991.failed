IB/hfi1: Wait for QSFP modules to initialize

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Easwar Hariharan <easwar.hariharan@intel.com>
commit 9775a991f9bdbdde3cc38e553326755af5b2b2a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9775a991.failed

The function level reset in init_chip() and subsequent write of all 1s
to the ASIC_QSFP registers effectively resets attached active and
optical QSFP modules that pay attention to the RESET_N pin.

We subsequently try to access the QSFP management interface to qualify
and tune the channel and fabric SerDes before enough time (2 seconds
per SFF 8679 spec for QSFP28 modules) has elapsed for the module to
finish initialization. This fails and causes the failure of the channel
tuning algorithm, preventing us from bringing the link up.

This patch checks the port type prior to beginning channel and SerDes
tuning, and if found to be QSFP, watches for the QSFP initialization
complete interrupt, with a maximum timeout of 2 seconds, to allow the
initialization to complete.

	Reviewed-by: Dean Luick <dean.luick@intel.com>
	Signed-off-by: Easwar Hariharan <easwar.hariharan@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 9775a991f9bdbdde3cc38e553326755af5b2b2a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/chip.c
#	drivers/staging/hfi1/platform_config.h
#	drivers/staging/rdma/hfi1/platform.c
diff --cc drivers/staging/hfi1/chip.c
index 0b4db256e34f,ce4c275b60f2..000000000000
--- a/drivers/staging/hfi1/chip.c
+++ b/drivers/staging/hfi1/chip.c
@@@ -9404,6 -9485,20 +9404,23 @@@ int bringup_serdes(struct hfi1_pportdat
  			return ret;
  	}
  
++<<<<<<< HEAD:drivers/staging/hfi1/chip.c
++=======
+ 	get_port_type(ppd);
+ 	if (ppd->port_type == PORT_TYPE_QSFP) {
+ 		set_qsfp_int_n(ppd, 0);
+ 		wait_for_qsfp_init(ppd);
+ 		set_qsfp_int_n(ppd, 1);
+ 	}
+ 
+ 	/*
+ 	 * Tune the SerDes to a ballpark setting for
+ 	 * optimal signal and bit error rate
+ 	 * Needs to be done before starting the link
+ 	 */
+ 	tune_serdes(ppd);
+ 
++>>>>>>> 9775a991f9bd (IB/hfi1: Wait for QSFP modules to initialize):drivers/staging/rdma/hfi1/chip.c
  	return start_link(ppd);
  }
  
diff --cc drivers/staging/hfi1/platform_config.h
index 8a94a8342052,e2c21613c326..000000000000
--- a/drivers/staging/hfi1/platform_config.h
+++ b/drivers/staging/hfi1/platform_config.h
@@@ -283,4 -289,17 +283,21 @@@ enum platform_config_local_max_timeout_
  	LOCAL_MAX_TIMEOUT_1000_S
  };
  
++<<<<<<< HEAD:drivers/staging/hfi1/platform_config.h
 +#endif			/*__PLATFORM_CONFIG_H*/
++=======
+ enum link_tuning_encoding {
+ 	OPA_PASSIVE_TUNING,
+ 	OPA_ACTIVE_TUNING,
+ 	OPA_UNKNOWN_TUNING
+ };
+ 
+ /* platform.c */
+ void get_platform_config(struct hfi1_devdata *dd);
+ void free_platform_config(struct hfi1_devdata *dd);
+ void get_port_type(struct hfi1_pportdata *ppd);
+ int set_qsfp_tx(struct hfi1_pportdata *ppd, int on);
+ void tune_serdes(struct hfi1_pportdata *ppd);
+ 
+ #endif			/*__PLATFORM_H*/
++>>>>>>> 9775a991f9bd (IB/hfi1: Wait for QSFP modules to initialize):drivers/staging/rdma/hfi1/platform.h
* Unmerged path drivers/staging/rdma/hfi1/platform.c
* Unmerged path drivers/staging/hfi1/chip.c
* Unmerged path drivers/staging/hfi1/platform_config.h
* Unmerged path drivers/staging/rdma/hfi1/platform.c
