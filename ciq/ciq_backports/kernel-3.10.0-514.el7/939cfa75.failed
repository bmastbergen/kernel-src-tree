net: sctp: get rid of t_new macro for kzalloc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] sctp: get rid of t_new macro for kzalloc (Marcelo Leitner) [1337639]
Rebuild_FUZZ: 94.12%
commit-author Daniel Borkmann <dborkman@redhat.com>
commit 939cfa75a0cea97aa60cb88e3722baefdceb4e72
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/939cfa75.failed

t_new rather obfuscates things where everyone else is using actual
function names instead of that macro, so replace it with kzalloc,
which is the function t_new wraps.

	Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
	Acked-by: Vlad Yasevich <vyasevich@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 939cfa75a0cea97aa60cb88e3722baefdceb4e72)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sctp/sctp.h
diff --cc include/net/sctp/sctp.h
index bb0f96d481fd,b9f136ad5a5a..000000000000
--- a/include/net/sctp/sctp.h
+++ b/include/net/sctp/sctp.h
@@@ -586,8 -575,23 +586,28 @@@ for (pos = chunk->subh.fwdtsn_hdr->skip
  /* Round an int up to the next multiple of 4.  */
  #define WORD_ROUND(s) (((s)+3)&~3)
  
++<<<<<<< HEAD
 +/* Make a new instance of type.  */
 +#define t_new(type, flags)	kzalloc(sizeof(type), flags)
++=======
+ /* Compare two timevals.  */
+ #define tv_lt(s, t) \
+    (s.tv_sec < t.tv_sec || (s.tv_sec == t.tv_sec && s.tv_usec < t.tv_usec))
+ 
+ /* Add tv1 to tv2. */
+ #define TIMEVAL_ADD(tv1, tv2) \
+ ({ \
+         suseconds_t usecs = (tv2).tv_usec + (tv1).tv_usec; \
+         time_t secs = (tv2).tv_sec + (tv1).tv_sec; \
+ \
+         if (usecs >= 1000000) { \
+                 usecs -= 1000000; \
+                 secs++; \
+         } \
+         (tv2).tv_sec = secs; \
+         (tv2).tv_usec = usecs; \
+ })
++>>>>>>> 939cfa75a0ce (net: sctp: get rid of t_new macro for kzalloc)
  
  /* External references. */
  
* Unmerged path include/net/sctp/sctp.h
diff --git a/net/sctp/associola.c b/net/sctp/associola.c
index 95613ef42a0c..e2e4dc7db555 100644
--- a/net/sctp/associola.c
+++ b/net/sctp/associola.c
@@ -350,7 +350,7 @@ struct sctp_association *sctp_association_new(const struct sctp_endpoint *ep,
 {
 	struct sctp_association *asoc;
 
-	asoc = t_new(struct sctp_association, gfp);
+	asoc = kzalloc(sizeof(*asoc), gfp);
 	if (!asoc)
 		goto fail;
 
diff --git a/net/sctp/bind_addr.c b/net/sctp/bind_addr.c
index 41145fe31813..64977ea0f9c5 100644
--- a/net/sctp/bind_addr.c
+++ b/net/sctp/bind_addr.c
@@ -162,7 +162,7 @@ int sctp_add_bind_addr(struct sctp_bind_addr *bp, union sctp_addr *new,
 	struct sctp_sockaddr_entry *addr;
 
 	/* Add the address to the bind address list.  */
-	addr = t_new(struct sctp_sockaddr_entry, gfp);
+	addr = kzalloc(sizeof(*addr), gfp);
 	if (!addr)
 		return -ENOMEM;
 
diff --git a/net/sctp/endpointola.c b/net/sctp/endpointola.c
index e09f906514db..85909364dc17 100644
--- a/net/sctp/endpointola.c
+++ b/net/sctp/endpointola.c
@@ -193,9 +193,10 @@ struct sctp_endpoint *sctp_endpoint_new(struct sock *sk, gfp_t gfp)
 	struct sctp_endpoint *ep;
 
 	/* Build a local endpoint. */
-	ep = t_new(struct sctp_endpoint, gfp);
+	ep = kzalloc(sizeof(*ep), gfp);
 	if (!ep)
 		goto fail;
+
 	if (!sctp_endpoint_init(ep, sk, gfp))
 		goto fail_init;
 
diff --git a/net/sctp/ipv6.c b/net/sctp/ipv6.c
index 09aaba531950..fba350aa6f1e 100644
--- a/net/sctp/ipv6.c
+++ b/net/sctp/ipv6.c
@@ -393,7 +393,7 @@ static void sctp_v6_copy_addrlist(struct list_head *addrlist,
 	read_lock_bh(&in6_dev->lock);
 	list_for_each_entry(ifp, &in6_dev->addr_list, if_list) {
 		/* Add the address to the local list.  */
-		addr = t_new(struct sctp_sockaddr_entry, GFP_ATOMIC);
+		addr = kzalloc(sizeof(*addr), GFP_ATOMIC);
 		if (addr) {
 			addr->a.v6.sin6_family = AF_INET6;
 			addr->a.v6.sin6_port = 0;
diff --git a/net/sctp/protocol.c b/net/sctp/protocol.c
index ce4856e5bfb8..a2bbe68565b9 100644
--- a/net/sctp/protocol.c
+++ b/net/sctp/protocol.c
@@ -153,7 +153,7 @@ static void sctp_v4_copy_addrlist(struct list_head *addrlist,
 
 	for (ifa = in_dev->ifa_list; ifa; ifa = ifa->ifa_next) {
 		/* Add the address to the local list.  */
-		addr = t_new(struct sctp_sockaddr_entry, GFP_ATOMIC);
+		addr = kzalloc(sizeof(*addr), GFP_ATOMIC);
 		if (addr) {
 			addr->a.v4.sin_family = AF_INET;
 			addr->a.v4.sin_port = 0;
diff --git a/net/sctp/transport.c b/net/sctp/transport.c
index 5387cb44ad90..6ad13335e055 100644
--- a/net/sctp/transport.c
+++ b/net/sctp/transport.c
@@ -116,7 +116,7 @@ struct sctp_transport *sctp_transport_new(struct net *net,
 {
 	struct sctp_transport *transport;
 
-	transport = t_new(struct sctp_transport, gfp);
+	transport = kzalloc(sizeof(*transport), gfp);
 	if (!transport)
 		goto fail;
 
