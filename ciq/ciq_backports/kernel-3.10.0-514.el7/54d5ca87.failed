vfs: add vfs_select_inode() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit 54d5ca871e72f2bb172ec9323497f01cd5091ec7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/54d5ca87.failed

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
	Cc: <stable@vger.kernel.org> # v4.2+
(cherry picked from commit 54d5ca871e72f2bb172ec9323497f01cd5091ec7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/open.c
#	include/linux/dcache.h
diff --cc fs/open.c
index eeadbd924dc1,081d3d6df74b..000000000000
--- a/fs/open.c
+++ b/fs/open.c
@@@ -840,6 -825,30 +840,33 @@@ int finish_no_open(struct file *file, s
  }
  EXPORT_SYMBOL(finish_no_open);
  
++<<<<<<< HEAD
++=======
+ char *file_path(struct file *filp, char *buf, int buflen)
+ {
+ 	return d_path(&filp->f_path, buf, buflen);
+ }
+ EXPORT_SYMBOL(file_path);
+ 
+ /**
+  * vfs_open - open the file at the given path
+  * @path: path to open
+  * @file: newly allocated file with f_flag initialized
+  * @cred: credentials to use
+  */
+ int vfs_open(const struct path *path, struct file *file,
+ 	     const struct cred *cred)
+ {
+ 	struct inode *inode = vfs_select_inode(path->dentry, file->f_flags);
+ 
+ 	if (IS_ERR(inode))
+ 		return PTR_ERR(inode);
+ 
+ 	file->f_path = *path;
+ 	return do_dentry_open(file, inode, NULL, cred);
+ }
+ 
++>>>>>>> 54d5ca871e72 (vfs: add vfs_select_inode() helper)
  struct file *dentry_open(const struct path *path, int flags,
  			 const struct cred *cred)
  {
diff --cc include/linux/dcache.h
index 5888528c0fa0,7e9422cb5989..000000000000
--- a/include/linux/dcache.h
+++ b/include/linux/dcache.h
@@@ -459,6 -443,138 +459,90 @@@ static inline bool d_is_positive(const 
  	return !d_is_negative(dentry);
  }
  
 -/**
 - * d_really_is_negative - Determine if a dentry is really negative (ignoring fallthroughs)
 - * @dentry: The dentry in question
 - *
 - * Returns true if the dentry represents either an absent name or a name that
 - * doesn't map to an inode (ie. ->d_inode is NULL).  The dentry could represent
 - * a true miss, a whiteout that isn't represented by a 0,0 chardev or a
 - * fallthrough marker in an opaque directory.
 - *
 - * Note!  (1) This should be used *only* by a filesystem to examine its own
 - * dentries.  It should not be used to look at some other filesystem's
 - * dentries.  (2) It should also be used in combination with d_inode() to get
 - * the inode.  (3) The dentry may have something attached to ->d_lower and the
 - * type field of the flags may be set to something other than miss or whiteout.
 - */
 -static inline bool d_really_is_negative(const struct dentry *dentry)
 -{
 -	return dentry->d_inode == NULL;
 -}
 -
 -/**
 - * d_really_is_positive - Determine if a dentry is really positive (ignoring fallthroughs)
 - * @dentry: The dentry in question
 - *
 - * Returns true if the dentry represents a name that maps to an inode
 - * (ie. ->d_inode is not NULL).  The dentry might still represent a whiteout if
 - * that is represented on medium as a 0,0 chardev.
 - *
 - * Note!  (1) This should be used *only* by a filesystem to examine its own
 - * dentries.  It should not be used to look at some other filesystem's
 - * dentries.  (2) It should also be used in combination with d_inode() to get
 - * the inode.
 - */
 -static inline bool d_really_is_positive(const struct dentry *dentry)
 -{
 -	return dentry->d_inode != NULL;
 -}
 -
 -static inline int simple_positive(struct dentry *dentry)
 -{
 -	return d_really_is_positive(dentry) && !d_unhashed(dentry);
 -}
 -
 -extern void d_set_fallthru(struct dentry *dentry);
 -
 -static inline bool d_is_fallthru(const struct dentry *dentry)
 -{
 -	return dentry->d_flags & DCACHE_FALLTHRU;
 -}
 -
 -
  extern int sysctl_vfs_cache_pressure;
  
++<<<<<<< HEAD
++=======
+ static inline unsigned long vfs_pressure_ratio(unsigned long val)
+ {
+ 	return mult_frac(val, sysctl_vfs_cache_pressure, 100);
+ }
+ 
+ /**
+  * d_inode - Get the actual inode of this dentry
+  * @dentry: The dentry to query
+  *
+  * This is the helper normal filesystems should use to get at their own inodes
+  * in their own dentries and ignore the layering superimposed upon them.
+  */
+ static inline struct inode *d_inode(const struct dentry *dentry)
+ {
+ 	return dentry->d_inode;
+ }
+ 
+ /**
+  * d_inode_rcu - Get the actual inode of this dentry with ACCESS_ONCE()
+  * @dentry: The dentry to query
+  *
+  * This is the helper normal filesystems should use to get at their own inodes
+  * in their own dentries and ignore the layering superimposed upon them.
+  */
+ static inline struct inode *d_inode_rcu(const struct dentry *dentry)
+ {
+ 	return ACCESS_ONCE(dentry->d_inode);
+ }
+ 
+ /**
+  * d_backing_inode - Get upper or lower inode we should be using
+  * @upper: The upper layer
+  *
+  * This is the helper that should be used to get at the inode that will be used
+  * if this dentry were to be opened as a file.  The inode may be on the upper
+  * dentry or it may be on a lower dentry pinned by the upper.
+  *
+  * Normal filesystems should not use this to access their own inodes.
+  */
+ static inline struct inode *d_backing_inode(const struct dentry *upper)
+ {
+ 	struct inode *inode = upper->d_inode;
+ 
+ 	return inode;
+ }
+ 
+ /**
+  * d_backing_dentry - Get upper or lower dentry we should be using
+  * @upper: The upper layer
+  *
+  * This is the helper that should be used to get the dentry of the inode that
+  * will be used if this dentry were opened as a file.  It may be the upper
+  * dentry or it may be a lower dentry pinned by the upper.
+  *
+  * Normal filesystems should not use this to access their own dentries.
+  */
+ static inline struct dentry *d_backing_dentry(struct dentry *upper)
+ {
+ 	return upper;
+ }
+ 
+ static inline struct dentry *d_real(struct dentry *dentry)
+ {
+ 	if (unlikely(dentry->d_flags & DCACHE_OP_REAL))
+ 		return dentry->d_op->d_real(dentry, NULL);
+ 	else
+ 		return dentry;
+ }
+ 
+ static inline struct inode *vfs_select_inode(struct dentry *dentry,
+ 					     unsigned open_flags)
+ {
+ 	struct inode *inode = d_inode(dentry);
+ 
+ 	if (inode && unlikely(dentry->d_flags & DCACHE_OP_SELECT_INODE))
+ 		inode = dentry->d_op->d_select_inode(dentry, open_flags);
+ 
+ 	return inode;
+ }
+ 
+ 
++>>>>>>> 54d5ca871e72 (vfs: add vfs_select_inode() helper)
  #endif	/* __LINUX_DCACHE_H */
* Unmerged path fs/open.c
* Unmerged path include/linux/dcache.h
