drm/i915/gen9: Use a bitmask to track dirty pipe watermarks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Matt Roper <matthew.d.roper@intel.com>
commit 2b4b9f35d94b1b533bc23110b040b04316480b28
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2b4b9f35.failed

Slightly easier to work with than an array of bools.

	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
	Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1463061971-19638-14-git-send-email-matthew.d.roper@intel.com
(cherry picked from commit 2b4b9f35d94b1b533bc23110b040b04316480b28)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_pm.c
diff --cc drivers/gpu/drm/i915/intel_pm.c
index cca54888a5ac,14c2c3e25ef8..000000000000
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@@ -3316,8 -3740,8 +3316,13 @@@ static void skl_update_other_pipe_wm(st
  		 */
  		WARN_ON(!wm_changed);
  
++<<<<<<< HEAD
 +		skl_compute_wm_results(dev, &params, &pipe_wm, r, intel_crtc);
 +		r->dirty[intel_crtc->pipe] = true;
++=======
+ 		skl_compute_wm_results(dev, &pipe_wm, r, intel_crtc);
+ 		r->dirty_pipes |= drm_crtc_mask(&intel_crtc->base);
++>>>>>>> 2b4b9f35d94b (drm/i915/gen9: Use a bitmask to track dirty pipe watermarks)
  	}
  }
  
@@@ -3326,23 -3838,23 +3331,33 @@@ static void skl_update_wm(struct drm_cr
  	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
  	struct drm_device *dev = crtc->dev;
  	struct drm_i915_private *dev_priv = dev->dev_private;
 +	struct skl_pipe_wm_parameters params = {};
  	struct skl_wm_values *results = &dev_priv->wm.skl_results;
 -	struct intel_crtc_state *cstate = to_intel_crtc_state(crtc->state);
 -	struct skl_pipe_wm *pipe_wm = &cstate->wm.skl.optimal;
 +	struct skl_pipe_wm pipe_wm = {};
 +	struct intel_wm_config config = {};
  
 +	memset(results, 0, sizeof(*results));
  
++<<<<<<< HEAD
 +	skl_compute_wm_global_parameters(dev, &config);
++=======
+ 	/* Clear all dirty flags */
+ 	results->dirty_pipes = 0;
++>>>>>>> 2b4b9f35d94b (drm/i915/gen9: Use a bitmask to track dirty pipe watermarks)
  
 -	skl_clear_wm(results, intel_crtc->pipe);
 -
 -	if (!skl_update_pipe_wm(crtc->state, &results->ddb, pipe_wm))
 +	if (!skl_update_pipe_wm(crtc, &params, &config,
 +				&results->ddb, &pipe_wm))
  		return;
  
++<<<<<<< HEAD
 +	skl_compute_wm_results(dev, &params, &pipe_wm, results, intel_crtc);
 +	results->dirty[intel_crtc->pipe] = true;
++=======
+ 	skl_compute_wm_results(dev, pipe_wm, results, intel_crtc);
+ 	results->dirty_pipes |= drm_crtc_mask(&intel_crtc->base);
++>>>>>>> 2b4b9f35d94b (drm/i915/gen9: Use a bitmask to track dirty pipe watermarks)
  
 -	skl_update_other_pipe_wm(dev, crtc, results);
 +	skl_update_other_pipe_wm(dev, crtc, &config, results);
  	skl_write_wm_values(dev_priv, results);
  	skl_flush_wm_values(dev_priv, results);
  
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index b86c23f96df2..d4260fe72371 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1456,7 +1456,7 @@ struct skl_ddb_allocation {
 };
 
 struct skl_wm_values {
-	bool dirty[I915_MAX_PIPES];
+	unsigned dirty_pipes;
 	struct skl_ddb_allocation ddb;
 	uint32_t wm_linetime[I915_MAX_PIPES];
 	uint32_t plane[I915_MAX_PIPES][I915_MAX_PLANES][8];
* Unmerged path drivers/gpu/drm/i915/intel_pm.c
