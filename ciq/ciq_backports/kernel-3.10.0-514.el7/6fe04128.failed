mac80211: fix fast_tx header alignment

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Felix Fietkau <nbd@nbd.name>
commit 6fe04128f158c5ad27e7504bfdf1b12e63331bc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6fe04128.failed

The header field is defined as u8[] but also accessed as struct
ieee80211_hdr. Enforce an alignment of 2 to prevent unnecessary
unaligned accesses, which can be very harmful for performance on many
platforms.

Fixes: e495c24731a2 ("mac80211: extend fast-xmit for more ciphers")
	Cc: stable@vger.kernel.org
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 6fe04128f158c5ad27e7504bfdf1b12e63331bc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/sta_info.h
diff --cc net/mac80211/sta_info.h
index b31d36fffe9c,78b0ef32dddd..000000000000
--- a/net/mac80211/sta_info.h
+++ b/net/mac80211/sta_info.h
@@@ -241,6 -257,133 +241,136 @@@ struct sta_ampdu_mlme 
  /* Value to indicate no TID reservation */
  #define IEEE80211_TID_UNRESERVED	0xff
  
++<<<<<<< HEAD
++=======
+ #define IEEE80211_FAST_XMIT_MAX_IV	18
+ 
+ /**
+  * struct ieee80211_fast_tx - TX fastpath information
+  * @key: key to use for hw crypto
+  * @hdr: the 802.11 header to put with the frame
+  * @hdr_len: actual 802.11 header length
+  * @sa_offs: offset of the SA
+  * @da_offs: offset of the DA
+  * @pn_offs: offset where to put PN for crypto (or 0 if not needed)
+  * @band: band this will be transmitted on, for tx_info
+  * @rcu_head: RCU head to free this struct
+  *
+  * This struct is small enough so that the common case (maximum crypto
+  * header length of 8 like for CCMP/GCMP) fits into a single 64-byte
+  * cache line.
+  */
+ struct ieee80211_fast_tx {
+ 	struct ieee80211_key *key;
+ 	u8 hdr_len;
+ 	u8 sa_offs, da_offs, pn_offs;
+ 	u8 band;
+ 	u8 hdr[30 + 2 + IEEE80211_FAST_XMIT_MAX_IV +
+ 	       sizeof(rfc1042_header)] __aligned(2);
+ 
+ 	struct rcu_head rcu_head;
+ };
+ 
+ /**
+  * struct ieee80211_fast_rx - RX fastpath information
+  * @dev: netdevice for reporting the SKB
+  * @vif_type: (P2P-less) interface type of the original sdata (sdata->vif.type)
+  * @vif_addr: interface address
+  * @rfc1042_hdr: copy of the RFC 1042 SNAP header (to have in cache)
+  * @control_port_protocol: control port protocol copied from sdata
+  * @expected_ds_bits: from/to DS bits expected
+  * @icv_len: length of the MIC if present
+  * @key: bool indicating encryption is expected (key is set)
+  * @sta_notify: notify the MLME code (once)
+  * @internal_forward: forward froms internally on AP/VLAN type interfaces
+  * @uses_rss: copy of USES_RSS hw flag
+  * @da_offs: offset of the DA in the header (for header conversion)
+  * @sa_offs: offset of the SA in the header (for header conversion)
+  * @rcu_head: RCU head for freeing this structure
+  */
+ struct ieee80211_fast_rx {
+ 	struct net_device *dev;
+ 	enum nl80211_iftype vif_type;
+ 	u8 vif_addr[ETH_ALEN] __aligned(2);
+ 	u8 rfc1042_hdr[6] __aligned(2);
+ 	__be16 control_port_protocol;
+ 	__le16 expected_ds_bits;
+ 	u8 icv_len;
+ 	u8 key:1,
+ 	   sta_notify:1,
+ 	   internal_forward:1,
+ 	   uses_rss:1;
+ 	u8 da_offs, sa_offs;
+ 
+ 	struct rcu_head rcu_head;
+ };
+ 
+ /**
+  * struct mesh_sta - mesh STA information
+  * @plink_lock: serialize access to plink fields
+  * @llid: Local link ID
+  * @plid: Peer link ID
+  * @aid: local aid supplied by peer
+  * @reason: Cancel reason on PLINK_HOLDING state
+  * @plink_retries: Retries in establishment
+  * @plink_state: peer link state
+  * @plink_timeout: timeout of peer link
+  * @plink_timer: peer link watch timer
+  * @t_offset: timing offset relative to this host
+  * @t_offset_setpoint: reference timing offset of this sta to be used when
+  * 	calculating clockdrift
+  * @local_pm: local link-specific power save mode
+  * @peer_pm: peer-specific power save mode towards local STA
+  * @nonpeer_pm: STA power save mode towards non-peer neighbors
+  * @processed_beacon: set to true after peer rates and capabilities are
+  *	processed
+  * @fail_avg: moving percentage of failed MSDUs
+  */
+ struct mesh_sta {
+ 	struct timer_list plink_timer;
+ 
+ 	s64 t_offset;
+ 	s64 t_offset_setpoint;
+ 
+ 	spinlock_t plink_lock;
+ 	u16 llid;
+ 	u16 plid;
+ 	u16 aid;
+ 	u16 reason;
+ 	u8 plink_retries;
+ 
+ 	bool processed_beacon;
+ 
+ 	enum nl80211_plink_state plink_state;
+ 	u32 plink_timeout;
+ 
+ 	/* mesh power save */
+ 	enum nl80211_mesh_power_mode local_pm;
+ 	enum nl80211_mesh_power_mode peer_pm;
+ 	enum nl80211_mesh_power_mode nonpeer_pm;
+ 
+ 	/* moving percentage of failed MSDUs */
+ 	unsigned int fail_avg;
+ };
+ 
+ DECLARE_EWMA(signal, 1024, 8)
+ 
+ struct ieee80211_sta_rx_stats {
+ 	unsigned long packets;
+ 	unsigned long last_rx;
+ 	unsigned long num_duplicates;
+ 	unsigned long fragments;
+ 	unsigned long dropped;
+ 	int last_signal;
+ 	u8 chains;
+ 	s8 chain_signal_last[IEEE80211_MAX_CHAINS];
+ 	u16 last_rate;
+ 	struct u64_stats_sync syncp;
+ 	u64 bytes;
+ 	u64 msdu[IEEE80211_NUM_TIDS + 1];
+ };
+ 
++>>>>>>> 6fe04128f158 (mac80211: fix fast_tx header alignment)
  /**
   * struct sta_info - STA information
   *
* Unmerged path net/mac80211/sta_info.h
