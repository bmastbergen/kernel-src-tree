fs: Provide function telling whether file_remove_privs() will do anything

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [fs] Provide function telling whether file_remove_privs() will do anything (Eric Sandeen) [1197686]
Rebuild_FUZZ: 97.18%
commit-author Jan Kara <jack@suse.cz>
commit dbfae0cdcd87602737101d4417811f4323156b54
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/dbfae0cd.failed

Provide function telling whether file_remove_privs() will do anything.
Currently we only have should_remove_suid() and that does something
slightly different.

	Signed-off-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit dbfae0cdcd87602737101d4417811f4323156b54)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/inode.c
#	include/linux/fs.h
diff --cc fs/inode.c
index 237190a851c4,8c2dd74455c9..000000000000
--- a/fs/inode.c
+++ b/fs/inode.c
@@@ -1658,12 -1710,15 +1683,17 @@@ static int __remove_privs(struct dentr
  	return notify_change(dentry, &newattrs, NULL);
  }
  
 -/*
 - * Remove special file priviledges (suid, capabilities) when file is written
 - * to or truncated.
 - */
 -int file_remove_privs(struct file *file)
 +int file_remove_suid(struct file *file)
  {
  	struct dentry *dentry = file->f_path.dentry;
++<<<<<<< HEAD
 +	struct inode *inode = dentry->d_inode;
 +	int killsuid;
 +	int killpriv;
++=======
+ 	struct inode *inode = d_inode(dentry);
+ 	int kill;
++>>>>>>> dbfae0cdcd87 (fs: Provide function telling whether file_remove_privs() will do anything)
  	int error = 0;
  
  	/* Fast path for nothing security related */
diff --cc include/linux/fs.h
index 37d4ac39152e,ee60e8ab210f..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -2627,7 -2553,8 +2627,12 @@@ extern struct inode *new_inode_pseudo(s
  extern struct inode *new_inode(struct super_block *sb);
  extern void free_inode_nonrcu(struct inode *inode);
  extern int should_remove_suid(struct dentry *);
++<<<<<<< HEAD
 +extern int file_remove_suid(struct file *);
++=======
+ extern int file_remove_privs(struct file *);
+ extern int file_needs_remove_privs(struct file *file);
++>>>>>>> dbfae0cdcd87 (fs: Provide function telling whether file_remove_privs() will do anything)
  
  extern void __insert_inode_hash(struct inode *, unsigned long hashval);
  static inline void insert_inode_hash(struct inode *inode)
* Unmerged path fs/inode.c
* Unmerged path include/linux/fs.h
