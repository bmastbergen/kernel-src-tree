i2c: designware: Move common probe code into i2c_dw_probe()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jarkko Nikula <jarkko.nikula@linux.intel.com>
commit d80d134182ba536ececab8d5fca50d779befc9a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d80d1341.failed

There is some code duplication in i2c-designware-platdrv and
i2c-designware-pcidrv probe functions. What is even worse that duplication
requires i2c_dw_xfer(), i2c_dw_func() and i2c_dw_isr() i2c-designware-core
functions to be exported.

Therefore move common code into new i2c_dw_probe() and make functions above
local to i2c-designware-core.

While merging the code patch does following functional changes:

- I2C Adapter name will be "Synopsys DesignWare I2C adapter". Previously it
  was used for platform and ACPI devices but PCI device used
  "i2c-designware-pci".
- Using device name for interrupt name. Previous it was platform device name,
  ACPI device name or "i2c-designware-pci".
- Error code from devm_request_irq() and i2c_add_numbered_adapter() will be
  printed in case of error.

	Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit d80d134182ba536ececab8d5fca50d779befc9a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-core.h
#	drivers/i2c/busses/i2c-designware-pcidrv.c
#	drivers/i2c/busses/i2c-designware-platdrv.c
diff --cc drivers/i2c/busses/i2c-designware-core.h
index 98a2ab668f3b,1d50898e7b24..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@@ -91,16 -112,14 +91,29 @@@ struct dw_i2c_dev 
  #define ACCESS_SWAP		0x00000001
  #define ACCESS_16BIT		0x00000002
  
 +extern u32 dw_readl(struct dw_i2c_dev *dev, int offset);
 +extern void dw_writel(struct dw_i2c_dev *dev, u32 b, int offset);
  extern int i2c_dw_init(struct dw_i2c_dev *dev);
++<<<<<<< HEAD
 +extern int i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[],
 +		int num);
 +extern u32 i2c_dw_func(struct i2c_adapter *adap);
 +extern irqreturn_t i2c_dw_isr(int this_irq, void *dev_id);
 +extern void i2c_dw_enable(struct dw_i2c_dev *dev);
 +extern u32 i2c_dw_is_enabled(struct dw_i2c_dev *dev);
++=======
++>>>>>>> d80d134182ba (i2c: designware: Move common probe code into i2c_dw_probe())
  extern void i2c_dw_disable(struct dw_i2c_dev *dev);
 +extern void i2c_dw_clear_int(struct dw_i2c_dev *dev);
  extern void i2c_dw_disable_int(struct dw_i2c_dev *dev);
  extern u32 i2c_dw_read_comp_param(struct dw_i2c_dev *dev);
++<<<<<<< HEAD
++=======
+ extern int i2c_dw_probe(struct dw_i2c_dev *dev);
+ 
+ #if IS_ENABLED(CONFIG_I2C_DESIGNWARE_BAYTRAIL)
+ extern int i2c_dw_eval_lock_support(struct dw_i2c_dev *dev);
+ #else
+ static inline int i2c_dw_eval_lock_support(struct dw_i2c_dev *dev) { return 0; }
+ #endif
++>>>>>>> d80d134182ba (i2c: designware: Move common probe code into i2c_dw_probe())
diff --cc drivers/i2c/busses/i2c-designware-pcidrv.c
index 76bdc3369a4f,169be1e26241..000000000000
--- a/drivers/i2c/busses/i2c-designware-pcidrv.c
+++ b/drivers/i2c/busses/i2c-designware-pcidrv.c
@@@ -182,11 -157,8 +182,16 @@@ static struct  dw_pci_controller  dw_pc
  		.scl_sda_cfg = &hsw_config,
  	},
  };
++<<<<<<< HEAD
 +static struct i2c_algorithm i2c_dw_algo = {
 +	.master_xfer	= i2c_dw_xfer,
 +	.functionality	= i2c_dw_func,
 +};
 +
++=======
+ 
+ #ifdef CONFIG_PM
++>>>>>>> d80d134182ba (i2c: designware: Move common probe code into i2c_dw_probe())
  static int i2c_dw_pci_suspend(struct device *dev)
  {
  	struct pci_dev *pdev = container_of(dev, struct pci_dev, dev);
@@@ -314,34 -240,15 +318,34 @@@ static int i2c_dw_pci_probe(struct pci_
  
  	dev->tx_fifo_depth = controller->tx_fifo_depth;
  	dev->rx_fifo_depth = controller->rx_fifo_depth;
- 	r = i2c_dw_init(dev);
- 	if (r)
- 		return r;
  
  	adap = &dev->adapter;
- 	i2c_set_adapdata(adap, dev);
  	adap->owner = THIS_MODULE;
  	adap->class = 0;
- 	adap->algo = &i2c_dw_algo;
- 	adap->dev.parent = &pdev->dev;
  	adap->nr = controller->bus_num;
  
++<<<<<<< HEAD
 +	snprintf(adap->name, sizeof(adap->name), "i2c-designware-pci");
 +
 +	r = devm_request_irq(&pdev->dev, pdev->irq, i2c_dw_isr, IRQF_SHARED,
 +			adap->name, dev);
 +	if (r) {
 +		dev_err(&pdev->dev, "failure requesting irq %i\n", dev->irq);
 +		return r;
 +	}
 +
 +	i2c_dw_disable_int(dev);
 +	i2c_dw_clear_int(dev);
 +	r = i2c_add_numbered_adapter(adap);
 +	if (r) {
 +		dev_err(&pdev->dev, "failure adding adapter\n");
 +		return r;
 +	}
++=======
+ 	r = i2c_dw_probe(dev);
+ 	if (r)
+ 		return r;
++>>>>>>> d80d134182ba (i2c: designware: Move common probe code into i2c_dw_probe())
  
  	pm_runtime_set_autosuspend_delay(&pdev->dev, 1000);
  	pm_runtime_use_autosuspend(&pdev->dev);
diff --cc drivers/i2c/busses/i2c-designware-platdrv.c
index 69e4d10d2aa1,adcf4c3a81f0..000000000000
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@@ -36,12 -38,9 +36,8 @@@
  #include <linux/io.h>
  #include <linux/slab.h>
  #include <linux/acpi.h>
 -#include <linux/platform_data/i2c-designware.h>
  #include "i2c-designware-core.h"
  
- static struct i2c_algorithm i2c_dw_algo = {
- 	.master_xfer	= i2c_dw_xfer,
- 	.functionality	= i2c_dw_func,
- };
  static u32 i2c_dw_get_clk_rate_khz(struct dw_i2c_dev *dev)
  {
  	return clk_get_rate(dev->clk)/1000;
@@@ -161,38 -225,24 +155,28 @@@ static int dw_i2c_probe(struct platform
  		dev->rx_fifo_depth = ((param1 >> 8)  & 0xff) + 1;
  		dev->adapter.nr = pdev->id;
  	}
- 	r = i2c_dw_init(dev);
- 	if (r)
- 		return r;
- 
- 	i2c_dw_disable_int(dev);
- 	r = devm_request_irq(&pdev->dev, dev->irq, i2c_dw_isr, IRQF_SHARED,
- 			pdev->name, dev);
- 	if (r) {
- 		dev_err(&pdev->dev, "failure requesting irq %i\n", dev->irq);
- 		return r;
- 	}
  
  	adap = &dev->adapter;
- 	i2c_set_adapdata(adap, dev);
  	adap->owner = THIS_MODULE;
++<<<<<<< HEAD
 +	adap->class = I2C_CLASS_HWMON;
 +	strlcpy(adap->name, "Synopsys DesignWare I2C adapter",
 +			sizeof(adap->name));
 +	adap->algo = &i2c_dw_algo;
 +	adap->dev.parent = &pdev->dev;
++=======
+ 	adap->class = I2C_CLASS_DEPRECATED;
++>>>>>>> d80d134182ba (i2c: designware: Move common probe code into i2c_dw_probe())
  	adap->dev.of_node = pdev->dev.of_node;
  
- 	r = i2c_add_numbered_adapter(adap);
- 	if (r) {
- 		dev_err(&pdev->dev, "failure adding adapter\n");
+ 	r = i2c_dw_probe(dev);
+ 	if (r)
  		return r;
- 	}
  
 -	if (dev->pm_runtime_disabled) {
 -		pm_runtime_forbid(&pdev->dev);
 -	} else {
 -		pm_runtime_set_autosuspend_delay(&pdev->dev, 1000);
 -		pm_runtime_use_autosuspend(&pdev->dev);
 -		pm_runtime_set_active(&pdev->dev);
 -		pm_runtime_enable(&pdev->dev);
 -	}
 +	pm_runtime_set_autosuspend_delay(&pdev->dev, 1000);
 +	pm_runtime_use_autosuspend(&pdev->dev);
 +	pm_runtime_set_active(&pdev->dev);
 +	pm_runtime_enable(&pdev->dev);
  
  	return 0;
  }
diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index 2bb954019f01..fae42d5a1cc7 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -545,7 +545,7 @@ static int i2c_dw_handle_tx_abort(struct dw_i2c_dev *dev)
 /*
  * Prepare controller for a transaction and call i2c_dw_xfer_msg
  */
-int
+static int
 i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 {
 	struct dw_i2c_dev *dev = i2c_get_adapdata(adap);
@@ -611,14 +611,17 @@ done:
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i2c_dw_xfer);
 
-u32 i2c_dw_func(struct i2c_adapter *adap)
+static u32 i2c_dw_func(struct i2c_adapter *adap)
 {
 	struct dw_i2c_dev *dev = i2c_get_adapdata(adap);
 	return dev->functionality;
 }
-EXPORT_SYMBOL_GPL(i2c_dw_func);
+
+static struct i2c_algorithm i2c_dw_algo = {
+	.master_xfer	= i2c_dw_xfer,
+	.functionality	= i2c_dw_func,
+};
 
 static u32 i2c_dw_read_clear_intrbits(struct dw_i2c_dev *dev)
 {
@@ -679,7 +682,7 @@ static u32 i2c_dw_read_clear_intrbits(struct dw_i2c_dev *dev)
  * Interrupt service routine. This gets called whenever an I2C interrupt
  * occurs.
  */
-irqreturn_t i2c_dw_isr(int this_irq, void *dev_id)
+static irqreturn_t i2c_dw_isr(int this_irq, void *dev_id)
 {
 	struct dw_i2c_dev *dev = dev_id;
 	u32 stat, enabled;
@@ -723,7 +726,6 @@ tx_aborted:
 
 	return IRQ_HANDLED;
 }
-EXPORT_SYMBOL_GPL(i2c_dw_isr);
 
 void i2c_dw_enable(struct dw_i2c_dev *dev)
 {
@@ -767,5 +769,40 @@ u32 i2c_dw_read_comp_param(struct dw_i2c_dev *dev)
 }
 EXPORT_SYMBOL_GPL(i2c_dw_read_comp_param);
 
+int i2c_dw_probe(struct dw_i2c_dev *dev)
+{
+	struct i2c_adapter *adap = &dev->adapter;
+	int r;
+
+	init_completion(&dev->cmd_complete);
+	mutex_init(&dev->lock);
+
+	r = i2c_dw_init(dev);
+	if (r)
+		return r;
+
+	snprintf(adap->name, sizeof(adap->name),
+		 "Synopsys DesignWare I2C adapter");
+	adap->algo = &i2c_dw_algo;
+	adap->dev.parent = dev->dev;
+	i2c_set_adapdata(adap, dev);
+
+	i2c_dw_disable_int(dev);
+	r = devm_request_irq(dev->dev, dev->irq, i2c_dw_isr, IRQF_SHARED,
+			     dev_name(dev->dev), dev);
+	if (r) {
+		dev_err(dev->dev, "failure requesting irq %i: %d\n",
+			dev->irq, r);
+		return r;
+	}
+
+	r = i2c_add_numbered_adapter(adap);
+	if (r)
+		dev_err(dev->dev, "failure adding adapter: %d\n", r);
+
+	return r;
+}
+EXPORT_SYMBOL_GPL(i2c_dw_probe);
+
 MODULE_DESCRIPTION("Synopsys DesignWare I2C bus adapter core");
 MODULE_LICENSE("GPL");
* Unmerged path drivers/i2c/busses/i2c-designware-core.h
* Unmerged path drivers/i2c/busses/i2c-designware-pcidrv.c
* Unmerged path drivers/i2c/busses/i2c-designware-platdrv.c
