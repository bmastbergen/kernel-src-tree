Btrfs: fix regression in raid level conversion

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Chris Mason <clm@fb.com>
commit 153c35b6cccc0c72de9fae06c8e2c8b2c47d79d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/153c35b6.failed

Commit 2f0810880f082fa8ba66ab2c33b02e4ff9770a5e changed
btrfs_set_block_group_ro to avoid trying to allocate new chunks with the
new raid profile during conversion.  This fixed failures when there was
no space on the drive to allocate a new chunk, but the metadata
reserves were sufficient to continue the conversion.

But this ended up causing a regression when the drive had plenty of
space to allocate new chunks, mostly because reduce_alloc_profile isn't
using the new raid profile.

Fixing btrfs_reduce_alloc_profile is a bigger patch.  For now, do a
partial revert of 2f0810880, and don't error out if we hit ENOSPC.

	Signed-off-by: Chris Mason <clm@fb.com>
	Tested-by: Dave Sterba <dsterba@suse.cz>
	Reported-by: Holger Hoffstaette <holger.hoffstaette@googlemail.com>
(cherry picked from commit 153c35b6cccc0c72de9fae06c8e2c8b2c47d79d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/extent-tree.c
diff --cc fs/btrfs/extent-tree.c
index 1d5f5fd820fe,0ec3acd14cbf..000000000000
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@@ -8618,6 -8811,43 +8618,46 @@@ int btrfs_set_block_group_ro(struct btr
  	if (IS_ERR(trans))
  		return PTR_ERR(trans);
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * we're not allowed to set block groups readonly after the dirty
+ 	 * block groups cache has started writing.  If it already started,
+ 	 * back off and let this transaction commit
+ 	 */
+ 	mutex_lock(&root->fs_info->ro_block_group_mutex);
+ 	if (trans->transaction->dirty_bg_run) {
+ 		u64 transid = trans->transid;
+ 
+ 		mutex_unlock(&root->fs_info->ro_block_group_mutex);
+ 		btrfs_end_transaction(trans, root);
+ 
+ 		ret = btrfs_wait_for_commit(root, transid);
+ 		if (ret)
+ 			return ret;
+ 		goto again;
+ 	}
+ 
+ 	/*
+ 	 * if we are changing raid levels, try to allocate a corresponding
+ 	 * block group with the new raid level.
+ 	 */
+ 	alloc_flags = update_block_group_flags(root, cache->flags);
+ 	if (alloc_flags != cache->flags) {
+ 		ret = do_chunk_alloc(trans, root, alloc_flags,
+ 				     CHUNK_ALLOC_FORCE);
+ 		/*
+ 		 * ENOSPC is allowed here, we may have enough space
+ 		 * already allocated at the new raid level to
+ 		 * carry on
+ 		 */
+ 		if (ret == -ENOSPC)
+ 			ret = 0;
+ 		if (ret < 0)
+ 			goto out;
+ 	}
+ 
++>>>>>>> 153c35b6cccc (Btrfs: fix regression in raid level conversion)
  	ret = set_block_group_ro(cache, 0);
  	if (!ret)
  		goto out;
* Unmerged path fs/btrfs/extent-tree.c
