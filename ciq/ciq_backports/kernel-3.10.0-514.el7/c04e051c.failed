x86: mpx: Give bndX registers actual names

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] mpx: Give bndX registers actual names (Rui Wang) [1138650]
Rebuild_FUZZ: 93.67%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit c04e051cccd2446d9ca373628d14b7e732462f5d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c04e051c.failed

Consider the bndX MPX registers.  There 4 registers each
containing a 64-bit lower and a 64-bit upper bound.  That's 8*64
bits and we declare it thusly:

	struct bndregs_struct {
		u64 bndregs[8];
	}
    
Let's say you want to read the upper bound from the MPX register
bnd2 out of the xsave buf.  You do:

	bndregno = 2;
	upper_bound = xsave_buf->bndregs.bndregs[2*bndregno+1];

That kinda sucks.  Every time you access it, you need to know:
1. Each bndX register is two entries wide in "bndregs"
2. The lower comes first followed by upper.  We do the +1 to get
   upper vs. lower.

This replaces the old definition.  You can now access them
indexed by the register number directly, and with a meaningful
name for the lower and upper bound:

	bndregno = 2;
	xsave_buf->bndreg[bndregno].upper_bound;

It's now *VERY* clear that there are 4 registers.  The programmer
now doesn't have to care what order the lower and upper bounds
are in, and it's harder to get it wrong.

[ tglx: Changed ub/lb to upper_bound/lower_bound and renamed struct
bndreg_struct to struct bndreg ]

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: x86@kernel.org
	Cc: "H. Peter Anvin" <hpa@linux.intel.com>
	Cc: Qiaowei Ren <qiaowei.ren@intel.com>
	Cc: "Yu, Fenghua" <fenghua.yu@intel.com>
	Cc: Dave Hansen <dave@sr71.net>
Link: http://lkml.kernel.org/r/20141031215820.5EA5E0EC@viggo.jf.intel.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit c04e051cccd2446d9ca373628d14b7e732462f5d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/processor.h
diff --cc arch/x86/include/asm/processor.h
index ddad3b312de4,0f2263a8ad31..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -380,19 -369,14 +380,20 @@@ struct ymmh_struct 
  	u32 ymmh_space[64];
  };
  
 -/* We don't support LWP yet: */
  struct lwp_struct {
 -	u8 reserved[128];
 +	u64 lwpcb_addr;
 +	u32 flags;
 +	u32 buf_head_offset;
 +	u64 buf_base;
 +	u32 buf_size;
 +	u32 filters;
 +	u64 saved_event_record[4];
 +	u32 event_counter[16];
  };
  
- struct bndregs_struct {
- 	u64 bndregs[8];
+ struct bndreg {
+ 	u64 lower_bound;
+ 	u64 upper_bound;
  } __packed;
  
  struct bndcsr_struct {
@@@ -410,9 -394,9 +411,15 @@@ struct xsave_struct 
  	struct i387_fxsave_struct i387;
  	struct xsave_hdr_struct xsave_hdr;
  	struct ymmh_struct ymmh;
++<<<<<<< HEAD
 +	RH_KABI_EXTEND(struct lwp_struct lwp)
 +	RH_KABI_EXTEND(struct bndregs_struct bndregs)
 +	RH_KABI_EXTEND(struct bndcsr_struct bndcsr)
++=======
+ 	struct lwp_struct lwp;
+ 	struct bndreg bndreg[4];
+ 	struct bndcsr_struct bndcsr;
++>>>>>>> c04e051cccd2 (x86: mpx: Give bndX registers actual names)
  	/* new processor state extensions will go here */
  } __attribute__ ((packed, aligned (64)));
  
* Unmerged path arch/x86/include/asm/processor.h
