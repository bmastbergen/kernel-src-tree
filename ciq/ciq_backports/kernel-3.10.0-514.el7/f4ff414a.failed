NVMe: Use requested sync command timeout

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Keith Busch <keith.busch@intel.com>
commit f4ff414aeb472397d3b4fc15c22ca65bab219ec8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f4ff414a.failed

	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit f4ff414aeb472397d3b4fc15c22ca65bab219ec8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index a8d9055d2103,4eb9917b2a7a..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -905,28 -1009,43 +905,32 @@@ static int __nvme_submit_sync_cmd(struc
  	if (IS_ERR(req))
  		return PTR_ERR(req);
  
 -	req->cmd_type = REQ_TYPE_DRV_PRIV;
 -	req->__data_len = 0;
 -	req->__sector = (sector_t) -1;
 -	req->bio = req->biotail = NULL;
 +	cmdinfo.task = current;
 +	cmdinfo.status = -EINTR;
  
++<<<<<<< HEAD
 +	cmd->common.command_id = req->tag;
++=======
+ 	req->timeout = timeout ? timeout : ADMIN_TIMEOUT;
++>>>>>>> f4ff414aeb47 (NVMe: Use requested sync command timeout)
  
 -	req->cmd = (unsigned char *)cmd;
 -	req->cmd_len = sizeof(struct nvme_command);
 -	req->special = (void *)0;
 +	cmd_rq = blk_mq_rq_to_pdu(req);
 +	nvme_set_info(cmd_rq, &cmdinfo, sync_completion);
  
 -	if (buffer && bufflen) {
 -		ret = blk_rq_map_kern(q, req, buffer, bufflen, __GFP_WAIT);
 -		if (ret)
 -			goto out;
 -	} else if (ubuffer && bufflen) {
 -		ret = blk_rq_map_user(q, req, NULL, ubuffer, bufflen, __GFP_WAIT);
 -		if (ret)
 -			goto out;
 -		bio = req->bio;
 -	}
 +	set_current_state(TASK_UNINTERRUPTIBLE);
 +	nvme_submit_cmd(cmd_rq->nvmeq, cmd);
 +	schedule();
  
 -	blk_execute_rq(req->q, NULL, req, 0);
 -	if (bio)
 -		blk_rq_unmap_user(bio);
  	if (result)
 -		*result = (u32)(uintptr_t)req->special;
 -	ret = req->errors;
 - out:
 +		*result = cmdinfo.result;
 +	res = cmdinfo.status;
  	blk_mq_free_request(req);
 -	return ret;
 +	return res;
  }
  
 -int nvme_submit_sync_cmd(struct request_queue *q, struct nvme_command *cmd,
 -		void *buffer, unsigned bufflen)
 +int nvme_submit_sync_cmd(struct request_queue *q, struct nvme_command *cmd)
  {
 -	return __nvme_submit_sync_cmd(q, cmd, buffer, NULL, bufflen, NULL, 0);
 +	return __nvme_submit_sync_cmd(q, cmd, NULL, 0);
  }
  
  static int nvme_submit_async_admin_req(struct nvme_dev *dev)
* Unmerged path drivers/block/nvme-core.c
