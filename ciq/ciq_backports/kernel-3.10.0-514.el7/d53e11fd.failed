IB/mad: use CQ abstraction

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christoph Hellwig <hch@infradead.org>
commit d53e11fdf0538a972ad4f1e5ec315d3e35c1aae9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d53e11fd.failed

Remove the local workqueue to process mad completions and use the CQ API
instead.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hal Rosenstock <hal@mellanox.com>
	Reviewed-by: Ira Weiny <ira.weiny@intel.com>
	Reviewed-by: Sagi Grimberg <sagig@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit d53e11fdf0538a972ad4f1e5ec315d3e35c1aae9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/mad.c
diff --cc drivers/infiniband/core/mad.c
index 381da3519202,9fa5bf33f5a3..000000000000
--- a/drivers/infiniband/core/mad.c
+++ b/drivers/infiniband/core/mad.c
@@@ -844,9 -834,9 +834,15 @@@ static int handle_outgoing_dr_smp(struc
  	}
  
  	build_smp_wc(mad_agent_priv->agent.qp,
++<<<<<<< HEAD
 +		     send_wr->wr_id, drslid,
 +		     send_wr->wr.ud.pkey_index,
 +		     send_wr->wr.ud.port_num, &mad_wc);
++=======
+ 		     send_wr->wr.wr_cqe, drslid,
+ 		     send_wr->pkey_index,
+ 		     send_wr->port_num, &mad_wc);
++>>>>>>> d53e11fdf053 (IB/mad: use CQ abstraction)
  
  	if (opa && smp->base_version == OPA_MGMT_BASE_VERSION) {
  		mad_wc.byte_len = mad_send_wr->send_buf.hdr_len
@@@ -1051,14 -1041,16 +1047,27 @@@ struct ib_mad_send_buf * ib_create_send
  
  	mad_send_wr->sg_list[1].lkey = mad_agent->qp->pd->local_dma_lkey;
  
++<<<<<<< HEAD
 +	mad_send_wr->send_wr.wr_id = (unsigned long) mad_send_wr;
 +	mad_send_wr->send_wr.sg_list = mad_send_wr->sg_list;
 +	mad_send_wr->send_wr.num_sge = 2;
 +	mad_send_wr->send_wr.opcode = IB_WR_SEND;
 +	mad_send_wr->send_wr.send_flags = IB_SEND_SIGNALED;
 +	mad_send_wr->send_wr.wr.ud.remote_qpn = remote_qpn;
 +	mad_send_wr->send_wr.wr.ud.remote_qkey = IB_QP_SET_QKEY;
 +	mad_send_wr->send_wr.wr.ud.pkey_index = pkey_index;
++=======
+ 	mad_send_wr->mad_list.cqe.done = ib_mad_send_done;
+ 
+ 	mad_send_wr->send_wr.wr.wr_cqe = &mad_send_wr->mad_list.cqe;
+ 	mad_send_wr->send_wr.wr.sg_list = mad_send_wr->sg_list;
+ 	mad_send_wr->send_wr.wr.num_sge = 2;
+ 	mad_send_wr->send_wr.wr.opcode = IB_WR_SEND;
+ 	mad_send_wr->send_wr.wr.send_flags = IB_SEND_SIGNALED;
+ 	mad_send_wr->send_wr.remote_qpn = remote_qpn;
+ 	mad_send_wr->send_wr.remote_qkey = IB_QP_SET_QKEY;
+ 	mad_send_wr->send_wr.pkey_index = pkey_index;
++>>>>>>> d53e11fdf053 (IB/mad: use CQ abstraction)
  
  	if (rmpp_active) {
  		ret = alloc_send_rmpp_list(mad_send_wr, mad_size, gfp_mask);
@@@ -1163,8 -1155,9 +1172,13 @@@ int ib_send_mad(struct ib_mad_send_wr_p
  
  	/* Set WR ID to find mad_send_wr upon completion */
  	qp_info = mad_send_wr->mad_agent_priv->qp_info;
++<<<<<<< HEAD
 +	mad_send_wr->send_wr.wr_id = (unsigned long)&mad_send_wr->mad_list;
++=======
++>>>>>>> d53e11fdf053 (IB/mad: use CQ abstraction)
  	mad_send_wr->mad_list.mad_queue = &qp_info->send_queue;
+ 	mad_send_wr->mad_list.cqe.done = ib_mad_send_done;
+ 	mad_send_wr->send_wr.wr.wr_cqe = &mad_send_wr->mad_list.cqe;
  
  	mad_agent = mad_send_wr->send_buf.mad_agent;
  	sge = mad_send_wr->sg_list;
@@@ -2533,12 -2536,11 +2557,11 @@@ static bool ib_mad_send_error(struct ib
  			struct ib_send_wr *bad_send_wr;
  
  			mad_send_wr->retry = 0;
 -			ret = ib_post_send(qp_info->qp, &mad_send_wr->send_wr.wr,
 +			ret = ib_post_send(qp_info->qp, &mad_send_wr->send_wr,
  					&bad_send_wr);
- 			if (ret)
- 				ib_mad_send_done_handler(port_priv, wc);
- 		} else
- 			ib_mad_send_done_handler(port_priv, wc);
+ 			if (!ret)
+ 				return false;
+ 		}
  	} else {
  		struct ib_qp_attr *attr;
  
@@@ -2735,9 -2703,9 +2724,9 @@@ static void local_completions(struct wo
  			 * before request
  			 */
  			build_smp_wc(recv_mad_agent->agent.qp,
- 				     (unsigned long) local->mad_send_wr,
+ 				     local->mad_send_wr->send_wr.wr.wr_cqe,
  				     be16_to_cpu(IB_LID_PERMISSIVE),
 -				     local->mad_send_wr->send_wr.pkey_index,
 +				     local->mad_send_wr->send_wr.wr.ud.pkey_index,
  				     recv_mad_agent->agent.port_num, &wc);
  
  			local->mad_priv->header.recv_wc.wc = &wc;
* Unmerged path drivers/infiniband/core/mad.c
diff --git a/drivers/infiniband/core/mad_priv.h b/drivers/infiniband/core/mad_priv.h
index 4a4f7aad0978..c5b20138c4e1 100644
--- a/drivers/infiniband/core/mad_priv.h
+++ b/drivers/infiniband/core/mad_priv.h
@@ -64,6 +64,7 @@
 
 struct ib_mad_list_head {
 	struct list_head list;
+	struct ib_cqe cqe;
 	struct ib_mad_queue *mad_queue;
 };
 
@@ -204,7 +205,6 @@ struct ib_mad_port_private {
 	struct ib_mad_mgmt_version_table version[MAX_MGMT_VERSION];
 	struct list_head agent_list;
 	struct workqueue_struct *wq;
-	struct work_struct work;
 	struct ib_mad_qp_info qp_info[IB_MAD_QPS_CORE];
 };
 
