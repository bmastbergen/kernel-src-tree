cxgb4/cxgb4vf: For T6 adapter, set FBMIN to 64 bytes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit edadad80d65bf9c7aa9f2605dbd2eef94ccd47c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/edadad80.failed

T4 and T5 hardware will not coalesce Free List PCI-E Fetch Requests if
the Host Driver provides more Free List Pointers than the Fetch Burst
Minimum value.  So if we set FBMIN to 64 bytes and the Host Driver
supplies 128 bytes of Free List Pointer data, the hardware will issue two
64-byte PCI-E Fetch Requests rather than a single coallesced 128-byte
Fetch Request. T6 fixes this. So, for T4/T5 we set the FBMIN value to 128

	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit edadad80d65bf9c7aa9f2605dbd2eef94ccd47c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/sge.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/sge.c
index f3fdb0c21e69,deca4a2956cc..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@@ -2501,9 -2611,21 +2501,26 @@@ int t4_sge_alloc_rxq(struct adapter *ad
  				htonl(FW_IQ_CMD_FL0CNGCHMAP_V(cong) |
  				      FW_IQ_CMD_FL0CONGCIF_F |
  				      FW_IQ_CMD_FL0CONGEN_F);
+ 		/* In T6, for egress queue type FL there is internal overhead
+ 		 * of 16B for header going into FLM module.  Hence the maximum
+ 		 * allowed burst size is 448 bytes.  For T4/T5, the hardware
+ 		 * doesn't coalesce fetch requests if more than 64 bytes of
+ 		 * Free List pointers are provided, so we use a 128-byte Fetch
+ 		 * Burst Minimum there (T6 implements coalescing so we can use
+ 		 * the smaller 64-byte value there).
+ 		 */
  		c.fl0dcaen_to_fl0cidxfthresh =
++<<<<<<< HEAD
 +			htons(FW_IQ_CMD_FL0FBMIN_V(FETCHBURSTMIN_64B_X) |
 +			      FW_IQ_CMD_FL0FBMAX_V(FETCHBURSTMAX_512B_X));
++=======
+ 			htons(FW_IQ_CMD_FL0FBMIN_V(chip <= CHELSIO_T5 ?
+ 						   FETCHBURSTMIN_128B_X :
+ 						   FETCHBURSTMIN_64B_X) |
+ 			      FW_IQ_CMD_FL0FBMAX_V((chip <= CHELSIO_T5) ?
+ 						   FETCHBURSTMAX_512B_X :
+ 						   FETCHBURSTMAX_256B_X));
++>>>>>>> edadad80d65b (cxgb4/cxgb4vf: For T6 adapter, set FBMIN to 64 bytes)
  		c.fl0size = htons(flsz);
  		c.fl0addr = cpu_to_be64(fl->addr);
  	}
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sge.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4_values.h b/drivers/net/ethernet/chelsio/cxgb4/t4_values.h
index 33cdbfc2d659..76395b071577 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_values.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_values.h
@@ -65,6 +65,7 @@
 #define TIMERREG_COUNTER0_X		0
 
 #define FETCHBURSTMIN_64B_X		2
+#define FETCHBURSTMIN_128B_X		3
 
 #define FETCHBURSTMAX_512B_X		3
 
diff --git a/drivers/net/ethernet/chelsio/cxgb4vf/sge.c b/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
index fa51ad2c9b23..efd5152808e0 100644
--- a/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
@@ -2299,9 +2299,20 @@ int t4vf_sge_alloc_rxq(struct adapter *adapter, struct sge_rspq *rspq,
 				FW_IQ_CMD_FL0HOSTFCMODE_V(SGE_HOSTFCMODE_NONE) |
 				FW_IQ_CMD_FL0PACKEN_F |
 				FW_IQ_CMD_FL0PADEN_F);
+
+		/* In T6, for egress queue type FL there is internal overhead
+		 * of 16B for header going into FLM module.  Hence the maximum
+		 * allowed burst size is 448 bytes.  For T4/T5, the hardware
+		 * doesn't coalesce fetch requests if more than 64 bytes of
+		 * Free List pointers are provided, so we use a 128-byte Fetch
+		 * Burst Minimum there (T6 implements coalescing so we can use
+		 * the smaller 64-byte value there).
+		 */
 		cmd.fl0dcaen_to_fl0cidxfthresh =
 			cpu_to_be16(
-				FW_IQ_CMD_FL0FBMIN_V(SGE_FETCHBURSTMIN_64B) |
+				FW_IQ_CMD_FL0FBMIN_V(chip <= CHELSIO_T5 ?
+						     FETCHBURSTMIN_128B_X :
+						     FETCHBURSTMIN_64B_X) |
 				FW_IQ_CMD_FL0FBMAX_V((chip <= CHELSIO_T5) ?
 						     FETCHBURSTMAX_512B_X :
 						     FETCHBURSTMAX_256B_X));
