rhashtable: Fix read-side crash during rehash

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 393619474ec0ba2a16dee12ec78fd43164f1e9b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/39361947.failed

This patch fixes a typo rhashtable_lookup_compare where we fail
to recompute the hash when looking up the new table.  This causes
elements to be missed and potentially a crash during a resize.

	Reported-by: Thomas Graf <tgraf@suug.ch>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 393619474ec0ba2a16dee12ec78fd43164f1e9b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/rhashtable.c
diff --cc lib/rhashtable.c
index 6d0c4774001c,fc0d451279f0..000000000000
--- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@@ -450,7 -603,11 +450,15 @@@ void *rhashtable_lookup_compare(const s
  	struct rhash_head *he;
  	u32 hash;
  
++<<<<<<< HEAD
 +	hash = key_hashfn(ht, key, ht->p.key_len);
++=======
+ 	rcu_read_lock();
+ 
+ 	tbl = rht_dereference_rcu(ht->tbl, ht);
+ restart:
+ 	hash = key_hashfn(ht, tbl, key);
++>>>>>>> 393619474ec0 (rhashtable: Fix read-side crash during rehash)
  	rht_for_each_rcu(he, tbl, hash) {
  		if (!compare(rht_obj(ht, he), arg))
  			continue;
* Unmerged path lib/rhashtable.c
