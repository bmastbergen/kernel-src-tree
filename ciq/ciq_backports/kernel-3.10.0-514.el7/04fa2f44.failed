hpsa: simplify update scsi devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kevin Barnett <kevin.barnett@pmcs.com>
commit 04fa2f44461dd90a00b514cd75ce82f829924826
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/04fa2f44.failed

remove repeated calculation that checks for physical
or logical devices.

	Reviewed-by: Scott Teel <scott.teel@pmcs.com>
	Reviewed-by: Justin Lindley <justin.lindley@pmcs.com>
	Reviewed-by: Kevin Barnett <kevin.barnett@pmcs.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Reviewed-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Don Brace <don.brace@pmcs.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 04fa2f44461dd90a00b514cd75ce82f829924826)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hpsa.c
#	drivers/scsi/hpsa.h
diff --cc drivers/scsi/hpsa.c
index e6b21f6ebf7d,62df4808119c..000000000000
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@@ -3693,7 -3752,7 +3693,11 @@@ static void hpsa_update_scsi_devices(st
  	int ncurrent = 0;
  	int i, n_ext_target_devs, ndevs_to_allocate;
  	int raid_ctlr_position;
++<<<<<<< HEAD
 +	int rescan_hba_mode;
++=======
+ 	bool physical_device;
++>>>>>>> 04fa2f44461d (hpsa: simplify update scsi devices)
  	DECLARE_BITMAP(lunzerobits, MAX_EXT_TARGETS);
  
  	currentsd = kzalloc(sizeof(*currentsd) * HPSA_MAX_DEVICES, GFP_KERNEL);
@@@ -3757,21 -3810,35 +3761,29 @@@
  	n_ext_target_devs = 0;
  	for (i = 0; i < nphysicals + nlogicals + 1; i++) {
  		u8 *lunaddrbytes, is_OBDR = 0;
 -		int rc = 0;
 -		int phys_dev_index = i - (raid_ctlr_position == 0);
  
+ 		physical_device = i < nphysicals + (raid_ctlr_position == 0);
+ 
  		/* Figure out where the LUN ID info is coming from */
  		lunaddrbytes = figure_lunaddrbytes(h, raid_ctlr_position,
  			i, nphysicals, nlogicals, physdev_list, logdev_list);
  
  		/* skip masked non-disk devices */
++<<<<<<< HEAD
 +		if (MASKED_DEVICE(lunaddrbytes))
 +			if (i < nphysicals + (raid_ctlr_position == 0) &&
 +				NON_DISK_PHYS_DEV(lunaddrbytes))
 +				continue;
++=======
+ 		if (MASKED_DEVICE(lunaddrbytes) && physical_device &&
+ 			(physdev_list->LUN[phys_dev_index].device_flags & 0x01))
+ 			continue;
++>>>>>>> 04fa2f44461d (hpsa: simplify update scsi devices)
  
  		/* Get device type, vendor, model, device id */
 -		rc = hpsa_update_device_info(h, lunaddrbytes, tmpdevice,
 -							&is_OBDR);
 -		if (rc == -ENOMEM) {
 -			dev_warn(&h->pdev->dev,
 -				"Out of memory, rescan deferred.\n");
 -			h->drv_req_rescan = 1;
 -			goto out;
 -		}
 -		if (rc) {
 -			dev_warn(&h->pdev->dev,
 -				"Inquiry failed, skipping device.\n");
 -			continue;
 -		}
 -
 +		if (hpsa_update_device_info(h, lunaddrbytes, tmpdevice,
 +							&is_OBDR))
 +			continue; /* skip it if we can't talk to it. */
  		figure_bus_target_lun(h, lunaddrbytes, tmpdevice);
  		hpsa_update_device_supports_aborts(h, tmpdevice, lunaddrbytes);
  		this_device = currentsd[ncurrent];
@@@ -3791,18 -3858,16 +3803,30 @@@
  		}
  
  		*this_device = *tmpdevice;
+ 		this_device->physical_device = physical_device;
  
++<<<<<<< HEAD
 +		/* do not expose masked devices */
 +		if (MASKED_DEVICE(lunaddrbytes) &&
 +			i < nphysicals + (raid_ctlr_position == 0)) {
 +			if (h->hba_mode_enabled)
 +				dev_warn(&h->pdev->dev,
 +					"Masked physical device detected\n");
 +			this_device->expose_state = HPSA_DO_NOT_EXPOSE;
 +		} else {
 +			this_device->expose_state =
 +					HPSA_SG_ATTACH | HPSA_ULD_ATTACH;
 +		}
++=======
+ 		/*
+ 		 * Expose all devices except for physical devices that
+ 		 * are masked.
+ 		 */
+ 		if (MASKED_DEVICE(lunaddrbytes) && this_device->physical_device)
+ 			this_device->expose_device = 0;
+ 		else
+ 			this_device->expose_device = 1;
++>>>>>>> 04fa2f44461d (hpsa: simplify update scsi devices)
  
  		switch (this_device->devtype) {
  		case TYPE_ROM:
@@@ -3817,20 -3882,15 +3841,31 @@@
  				ncurrent++;
  			break;
  		case TYPE_DISK:
++<<<<<<< HEAD
 +			if (i >= nphysicals) {
 +				ncurrent++;
 +				break;
++=======
+ 			if (this_device->physical_device) {
+ 				/* The disk is in HBA mode. */
+ 				/* Never use RAID mapper in HBA mode. */
+ 				this_device->offload_enabled = 0;
+ 				hpsa_get_ioaccel_drive_info(h, this_device,
+ 					physdev_list, phys_dev_index, id_phys);
+ 				hpsa_get_path_info(this_device,
+ 					physdev_list, phys_dev_index, id_phys);
++>>>>>>> 04fa2f44461d (hpsa: simplify update scsi devices)
  			}
 +
 +			if (h->hba_mode_enabled)
 +				/* never use raid mapper in HBA mode */
 +				this_device->offload_enabled = 0;
 +			else if (!(h->transMethod & CFGTBL_Trans_io_accel1 ||
 +				h->transMethod & CFGTBL_Trans_io_accel2))
 +				break;
 +			hpsa_get_ioaccel_drive_info(h, this_device,
 +						lunaddrbytes, id_phys);
 +			atomic_set(&this_device->ioaccel_cmds_out, 0);
  			ncurrent++;
  			break;
  		case TYPE_TAPE:
diff --cc drivers/scsi/hpsa.h
index 5dffb7026c33,50e478087919..000000000000
--- a/drivers/scsi/hpsa.h
+++ b/drivers/scsi/hpsa.h
@@@ -37,6 -37,8 +37,11 @@@ struct hpsa_scsi_dev_t 
  	unsigned int devtype;
  	int bus, target, lun;		/* as presented to the OS */
  	unsigned char scsi3addr[8];	/* as presented to the HW */
++<<<<<<< HEAD
++=======
+ 	u8 physical_device : 1;
+ 	u8 expose_device;
++>>>>>>> 04fa2f44461d (hpsa: simplify update scsi devices)
  #define RAID_CTLR_LUNID "\0\0\0\0\0\0\0\0"
  	unsigned char device_id[16];    /* from inquiry pg. 0x83 */
  	unsigned char vendor[8];        /* bytes 8-15 of inquiry data */
* Unmerged path drivers/scsi/hpsa.c
* Unmerged path drivers/scsi/hpsa.h
