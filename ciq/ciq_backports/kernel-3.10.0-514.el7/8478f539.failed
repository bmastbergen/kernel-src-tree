cpufreq: intel_pstate: Fix limits->max_policy_pct rounding error

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Fix limits->max_policy_pct rounding error (Prarit Bhargava) [1279617]
Rebuild_FUZZ: 92.44%
commit-author Prarit Bhargava <prarit@redhat.com>
commit 8478f53946f01b8365a206ac58a2640e3e408fb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8478f539.failed

I have a Intel (6,63) processor with a "marketing" frequency (from
/proc/cpuinfo) of 2100MHz, and a max turbo frequency of 2600MHz.  I
can execute

cpupower frequency-set -g powersave --min 1200MHz --max 2100MHz

and the max_freq_pct is set to 80.  When adding load to the system I noticed
that the cpu frequency only reached 2000MHZ and not 2100MHz as expected.

This is because limits->max_policy_pct is calculated as 2100 * 100 /2600 = 80.7
and is rounded down to 80 when it should be rounded up to 81.  This patch
adds a DIV_ROUND_UP() which will return the correct value.

	Signed-off-by: Prarit Bhargava <prarit@redhat.com>
	Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8478f53946f01b8365a206ac58a2640e3e408fb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 9d42010c6969,eb75053f1371..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -969,14 -1104,31 +969,24 @@@ static int intel_pstate_set_policy(stru
  		return 0;
  	}
  
++<<<<<<< HEAD
 +	limits.min_perf_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
 +	limits.min_perf_pct = clamp_t(int, limits.min_perf_pct, 0 , 100);
 +	limits.min_perf = div_fp(int_tofp(limits.min_perf_pct), int_tofp(100));
++=======
+ 	pr_debug("intel_pstate: set powersave\n");
+ 	limits = &powersave_limits;
+ 	limits->min_policy_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
+ 	limits->min_policy_pct = clamp_t(int, limits->min_policy_pct, 0 , 100);
+ 	limits->max_policy_pct = DIV_ROUND_UP(policy->max * 100,
+ 					      policy->cpuinfo.max_freq);
+ 	limits->max_policy_pct = clamp_t(int, limits->max_policy_pct, 0 , 100);
++>>>>>>> 8478f53946f0 (cpufreq: intel_pstate: Fix limits->max_policy_pct rounding error)
  
 -	/* Normalize user input to [min_policy_pct, max_policy_pct] */
 -	limits->min_perf_pct = max(limits->min_policy_pct,
 -				   limits->min_sysfs_pct);
 -	limits->min_perf_pct = min(limits->max_policy_pct,
 -				   limits->min_perf_pct);
 -	limits->max_perf_pct = min(limits->max_policy_pct,
 -				   limits->max_sysfs_pct);
 -	limits->max_perf_pct = max(limits->min_policy_pct,
 -				   limits->max_perf_pct);
 -
 -	/* Make sure min_perf_pct <= max_perf_pct */
 -	limits->min_perf_pct = min(limits->max_perf_pct, limits->min_perf_pct);
 -
 -	limits->min_perf = div_fp(int_tofp(limits->min_perf_pct),
 -				  int_tofp(100));
 -	limits->max_perf = div_fp(int_tofp(limits->max_perf_pct),
 -				  int_tofp(100));
 +	limits.max_policy_pct = (policy->max * 100) / policy->cpuinfo.max_freq;
 +	limits.max_policy_pct = clamp_t(int, limits.max_policy_pct, 0 , 100);
 +	limits.max_perf_pct = min(limits.max_policy_pct, limits.max_sysfs_pct);
 +	limits.max_perf = div_fp(int_tofp(limits.max_perf_pct), int_tofp(100));
  
  	if (hwp_active)
  		intel_pstate_hwp_set();
* Unmerged path drivers/cpufreq/intel_pstate.c
