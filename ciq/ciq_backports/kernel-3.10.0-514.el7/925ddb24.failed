i2c: designware: Rework probe() to get clock a bit later

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 925ddb240d6c76e56dd3aa22493f5755c452ba61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/925ddb24.failed

In order to be able to create missing clock for AMD (and in future possibly
others) we move getting clock for the device a bit later. Also make ACPI/DT
configuration in the same place depending on from where the device was
enumerated from.

	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit 925ddb240d6c76e56dd3aa22493f5755c452ba61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-platdrv.c
diff --cc drivers/i2c/busses/i2c-designware-platdrv.c
index c6618c95b98c,e59c63ae4d41..000000000000
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@@ -118,7 -118,9 +115,11 @@@ static int dw_i2c_probe(struct platform
  	struct dw_i2c_dev *dev;
  	struct i2c_adapter *adap;
  	struct resource *mem;
 -	struct dw_i2c_platform_data *pdata;
  	int irq, r;
++<<<<<<< HEAD
++=======
+ 	u32 clk_freq, ht = 0;
++>>>>>>> 925ddb240d6c (i2c: designware: Rework probe() to get clock a bit later)
  
  	irq = platform_get_irq(pdev, 0);
  	if (irq < 0) {
@@@ -141,12 -143,37 +142,46 @@@
  	dev->irq = irq;
  	platform_set_drvdata(pdev, dev);
  
++<<<<<<< HEAD
 +	dev->clk = devm_clk_get(&pdev->dev, NULL);
 +	dev->get_clk_rate_khz = i2c_dw_get_clk_rate_khz;
 +
 +	if (IS_ERR(dev->clk))
 +		return PTR_ERR(dev->clk);
 +	clk_prepare_enable(dev->clk);
++=======
+ 	/* fast mode by default because of legacy reasons */
+ 	clk_freq = 400000;
+ 
+ 	if (ACPI_COMPANION(&pdev->dev)) {
+ 		dw_i2c_acpi_configure(pdev);
+ 	} else if (pdev->dev.of_node) {
+ 		of_property_read_u32(pdev->dev.of_node,
+ 					"i2c-sda-hold-time-ns", &ht);
+ 
+ 		of_property_read_u32(pdev->dev.of_node,
+ 				     "i2c-sda-falling-time-ns",
+ 				     &dev->sda_falling_time);
+ 		of_property_read_u32(pdev->dev.of_node,
+ 				     "i2c-scl-falling-time-ns",
+ 				     &dev->scl_falling_time);
+ 
+ 		of_property_read_u32(pdev->dev.of_node, "clock-frequency",
+ 				     &clk_freq);
+ 
+ 		/* Only standard mode at 100kHz and fast mode at 400kHz
+ 		 * are supported.
+ 		 */
+ 		if (clk_freq != 100000 && clk_freq != 400000) {
+ 			dev_err(&pdev->dev, "Only 100kHz and 400kHz supported");
+ 			return -EINVAL;
+ 		}
+ 	} else {
+ 		pdata = dev_get_platdata(&pdev->dev);
+ 		if (pdata)
+ 			clk_freq = pdata->i2c_scl_freq;
+ 	}
++>>>>>>> 925ddb240d6c (i2c: designware: Rework probe() to get clock a bit later)
  
  	dev->functionality =
  		I2C_FUNC_I2C |
@@@ -155,12 -182,27 +190,23 @@@
  		I2C_FUNC_SMBUS_BYTE_DATA |
  		I2C_FUNC_SMBUS_WORD_DATA |
  		I2C_FUNC_SMBUS_I2C_BLOCK;
 -	if (clk_freq == 100000)
 -		dev->master_cfg =  DW_IC_CON_MASTER | DW_IC_CON_SLAVE_DISABLE |
 -			DW_IC_CON_RESTART_EN | DW_IC_CON_SPEED_STD;
 -	else
 -		dev->master_cfg =  DW_IC_CON_MASTER | DW_IC_CON_SLAVE_DISABLE |
 -			DW_IC_CON_RESTART_EN | DW_IC_CON_SPEED_FAST;
 +	dev->master_cfg =  DW_IC_CON_MASTER | DW_IC_CON_SLAVE_DISABLE |
 +		DW_IC_CON_RESTART_EN | DW_IC_CON_SPEED_FAST;
  
- 	/* Try first if we can configure the device from ACPI */
- 	r = dw_i2c_acpi_configure(pdev);
- 	if (r) {
+ 	dev->clk = devm_clk_get(&pdev->dev, NULL);
+ 	dev->get_clk_rate_khz = i2c_dw_get_clk_rate_khz;
+ 	if (IS_ERR(dev->clk))
+ 		return PTR_ERR(dev->clk);
+ 	clk_prepare_enable(dev->clk);
+ 
+ 	if (!dev->sda_hold_time && ht) {
+ 		u32 ic_clk = dev->get_clk_rate_khz(dev);
+ 
+ 		dev->sda_hold_time = div_u64((u64)ic_clk * ht + 500000,
+ 					     1000000);
+ 	}
+ 
+ 	if (!dev->tx_fifo_depth) {
  		u32 param1 = i2c_dw_read_comp_param(dev);
  
  		dev->tx_fifo_depth = ((param1 >> 16) & 0xff) + 1;
* Unmerged path drivers/i2c/busses/i2c-designware-platdrv.c
