IB/mlx5: Make coding style more consistent

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Doug Ledford <dledford@redhat.com>
commit 0025b0bdeae7c13b8ab1dce64b0108ed9c071e2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0025b0bd.failed

These three related functions can't agree whether to put the
umrwr on the stack dirty and then memset it, or to initialize
it on the stack.  Make them all agree.

	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 0025b0bdeae7c13b8ab1dce64b0108ed9c071e2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/mr.c
diff --cc drivers/infiniband/hw/mlx5/mr.c
index 9a8b4ea88eb7,628f43506d91..000000000000
--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@@ -865,7 -860,8 +865,12 @@@ static struct mlx5_ib_mr *reg_umr(struc
  	struct device *ddev = dev->ib_dev.dma_device;
  	struct umr_common *umrc = &dev->umrc;
  	struct mlx5_ib_umr_context umr_context;
++<<<<<<< HEAD
 +	struct ib_send_wr wr, *bad;
++=======
+ 	struct mlx5_umr_wr umrwr = {};
+ 	struct ib_send_wr *bad;
++>>>>>>> 0025b0bdeae7 (IB/mlx5: Make coding style more consistent)
  	struct mlx5_ib_mr *mr;
  	struct ib_sge sg;
  	int size;
@@@ -894,14 -890,14 +899,22 @@@
  	if (err)
  		goto free_mr;
  
 +	memset(&wr, 0, sizeof(wr));
 +	wr.wr_id = (u64)(unsigned long)&umr_context;
 +	prep_umr_reg_wqe(pd, &wr, &sg, dma, npages, mr->mmr.key, page_shift,
 +			 virt_addr, len, access_flags);
 +
  	mlx5_ib_init_umr_context(&umr_context);
++<<<<<<< HEAD
++=======
+ 
+ 	umrwr.wr.wr_cqe = &umr_context.cqe;
+ 	prep_umr_reg_wqe(pd, &umrwr.wr, &sg, dma, npages, mr->mmkey.key,
+ 			 page_shift, virt_addr, len, access_flags);
+ 
++>>>>>>> 0025b0bdeae7 (IB/mlx5: Make coding style more consistent)
  	down(&umrc->sem);
 -	err = ib_post_send(umrc->qp, &umrwr.wr, &bad);
 +	err = ib_post_send(umrc->qp, &wr, &bad);
  	if (err) {
  		mlx5_ib_warn(dev, "post send failed, err %d\n", err);
  		goto unmap_dma;
@@@ -1198,16 -1195,17 +1211,28 @@@ static int unreg_umr(struct mlx5_ib_de
  {
  	struct umr_common *umrc = &dev->umrc;
  	struct mlx5_ib_umr_context umr_context;
++<<<<<<< HEAD
 +	struct ib_send_wr wr, *bad;
++=======
+ 	struct mlx5_umr_wr umrwr = {};
+ 	struct ib_send_wr *bad;
++>>>>>>> 0025b0bdeae7 (IB/mlx5: Make coding style more consistent)
  	int err;
  
 +	memset(&wr, 0, sizeof(wr));
 +	wr.wr_id = (u64)(unsigned long)&umr_context;
 +	prep_umr_unreg_wqe(dev, &wr, mr->mmr.key);
 +
  	mlx5_ib_init_umr_context(&umr_context);
++<<<<<<< HEAD
++=======
+ 
+ 	umrwr.wr.wr_cqe = &umr_context.cqe;
+ 	prep_umr_unreg_wqe(dev, &umrwr.wr, mr->mmkey.key);
+ 
++>>>>>>> 0025b0bdeae7 (IB/mlx5: Make coding style more consistent)
  	down(&umrc->sem);
 -	err = ib_post_send(umrc->qp, &umrwr.wr, &bad);
 +	err = ib_post_send(umrc->qp, &wr, &bad);
  	if (err) {
  		up(&umrc->sem);
  		mlx5_ib_dbg(dev, "err %d\n", err);
* Unmerged path drivers/infiniband/hw/mlx5/mr.c
