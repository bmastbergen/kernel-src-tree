crypto: qat - fix SKU definiftion for c3xxx dev

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [crypto] qat - fix SKU definiftion for c3xxx dev (Neil Horman) [1274179]
Rebuild_FUZZ: 90.70%
commit-author Tadeusz Struk <tadeusz.struk@intel.com>
commit 2a5de720dcecbc7ba998bc1ae8f7b9cd7cb81654
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2a5de720.failed

c3xxx doesn't have the esram BAR and only has 6 ue.

	Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 2a5de720dcecbc7ba998bc1ae8f7b9cd7cb81654)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
#	drivers/crypto/qat/qat_dh895xcc/qat_admin.c
diff --cc drivers/crypto/qat/qat_dh895xcc/qat_admin.c
index 55b7a8e48bad,2f2681d3458a..000000000000
--- a/drivers/crypto/qat/qat_dh895xcc/qat_admin.c
+++ b/drivers/crypto/qat/qat_dh895xcc/qat_admin.c
@@@ -44,64 -44,40 +44,90 @@@
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 -#ifndef ADF_C3XXX_HW_DATA_H_
 -#define ADF_C3XXX_HW_DATA_H_
 +#include <icp_qat_fw_init_admin.h>
 +#include <adf_accel_devices.h>
 +#include <adf_common_drv.h>
 +#include "adf_drv.h"
  
++<<<<<<< HEAD:drivers/crypto/qat/qat_dh895xcc/qat_admin.c
 +static struct service_hndl qat_admin;
++=======
+ /* PCIe configuration space */
+ #define ADF_C3XXX_PMISC_BAR 0
+ #define ADF_C3XXX_ETR_BAR 1
+ #define ADF_C3XXX_RX_RINGS_OFFSET 8
+ #define ADF_C3XXX_TX_RINGS_MASK 0xFF
+ #define ADF_C3XXX_MAX_ACCELERATORS 3
+ #define ADF_C3XXX_MAX_ACCELENGINES 6
+ #define ADF_C3XXX_ACCELERATORS_REG_OFFSET 16
+ #define ADF_C3XXX_ACCELERATORS_MASK 0x3
+ #define ADF_C3XXX_ACCELENGINES_MASK 0x3F
+ #define ADF_C3XXX_ETR_MAX_BANKS 16
+ #define ADF_C3XXX_SMIAPF0_MASK_OFFSET (0x3A000 + 0x28)
+ #define ADF_C3XXX_SMIAPF1_MASK_OFFSET (0x3A000 + 0x30)
+ #define ADF_C3XXX_SMIA0_MASK 0xFFFF
+ #define ADF_C3XXX_SMIA1_MASK 0x1
+ /* Error detection and correction */
+ #define ADF_C3XXX_AE_CTX_ENABLES(i) (i * 0x1000 + 0x20818)
+ #define ADF_C3XXX_AE_MISC_CONTROL(i) (i * 0x1000 + 0x20960)
+ #define ADF_C3XXX_ENABLE_AE_ECC_ERR BIT(28)
+ #define ADF_C3XXX_ENABLE_AE_ECC_PARITY_CORR (BIT(24) | BIT(12))
+ #define ADF_C3XXX_UERRSSMSH(i) (i * 0x4000 + 0x18)
+ #define ADF_C3XXX_CERRSSMSH(i) (i * 0x4000 + 0x10)
+ #define ADF_C3XXX_ERRSSMSH_EN BIT(3)
++>>>>>>> 2a5de720dcec (crypto: qat - fix SKU definiftion for c3xxx dev):drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.h
  
 -#define ADF_C3XXX_PF2VF_OFFSET(i)	(0x3A000 + 0x280 + ((i) * 0x04))
 -#define ADF_C3XXX_VINTMSK_OFFSET(i)	(0x3A000 + 0x200 + ((i) * 0x04))
 +static int qat_send_admin_cmd(struct adf_accel_dev *accel_dev, int cmd)
 +{
 +	struct adf_hw_device_data *hw_device = accel_dev->hw_device;
 +	struct icp_qat_fw_init_admin_req req;
 +	struct icp_qat_fw_init_admin_resp resp;
 +	int i;
  
 -/* Firmware Binary */
 -#define ADF_C3XXX_FW "qat_c3xxx.bin"
 -#define ADF_C3XXX_MMP "qat_c3xxx_mmp.bin"
 +	memset(&req, 0, sizeof(struct icp_qat_fw_init_admin_req));
 +	req.init_admin_cmd_id = cmd;
 +	for (i = 0; i < hw_device->get_num_aes(hw_device); i++) {
 +		memset(&resp, 0, sizeof(struct icp_qat_fw_init_admin_resp));
 +		if (adf_put_admin_msg_sync(accel_dev, i, &req, &resp) ||
 +		    resp.init_resp_hdr.status)
 +			return -EFAULT;
 +	}
 +	return 0;
 +}
  
 -void adf_init_hw_data_c3xxx(struct adf_hw_device_data *hw_data);
 -void adf_clean_hw_data_c3xxx(struct adf_hw_device_data *hw_data);
 -#endif
 +static int qat_admin_start(struct adf_accel_dev *accel_dev)
 +{
 +	return qat_send_admin_cmd(accel_dev, ICP_QAT_FW_INIT_ME);
 +}
 +
 +static int qat_admin_event_handler(struct adf_accel_dev *accel_dev,
 +				   enum adf_event event)
 +{
 +	int ret;
 +
 +	switch (event) {
 +	case ADF_EVENT_START:
 +		ret = qat_admin_start(accel_dev);
 +		break;
 +	case ADF_EVENT_STOP:
 +	case ADF_EVENT_INIT:
 +	case ADF_EVENT_SHUTDOWN:
 +	default:
 +		ret = 0;
 +	}
 +	return ret;
 +}
 +
 +int qat_admin_register(void)
 +{
 +	memset(&qat_admin, 0, sizeof(struct service_hndl));
 +	qat_admin.event_hld = qat_admin_event_handler;
 +	qat_admin.name = "qat_admin";
 +	qat_admin.admin = 1;
 +	return adf_service_register(&qat_admin);
 +}
 +
 +int qat_admin_unregister(void)
 +{
 +	return adf_service_unregister(&qat_admin);
 +}
* Unmerged path drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
* Unmerged path drivers/crypto/qat/qat_c3xxx/adf_c3xxx_hw_data.c
* Unmerged path drivers/crypto/qat/qat_dh895xcc/qat_admin.c
