x86/smp/boot: Remove 10ms delay from cpu_up() on modern processors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] smpboot: Remove 10ms delay from cpu_up() on modern processors (Steve Best) [1365413]
Rebuild_FUZZ: 96.06%
commit-author Len Brown <len.brown@intel.com>
commit 1a744cb356c57303fc97eb15a298032170f841fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1a744cb3.failed

Modern processor familes do not require the 10ms delay
in cpu_up() to de-assert INIT.  This speeds up boot
and resume by 10ms per (application) processor.

	Signed-off-by: Len Brown <len.brown@intel.com>
	Cc: Alan Cox <alan@linux.intel.com>
	Cc: Arjan van de Ven <arjan@linux.intel.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jan H. Sch√∂nherr <jschoenh@amazon.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/021ce30c88f216ad39686646421194dc25671e55.1431379433.git.len.brown@intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 1a744cb356c57303fc97eb15a298032170f841fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/smpboot.c
diff --cc arch/x86/kernel/smpboot.c
index 7dbc496614e0,85bd6aad8c74..000000000000
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@@ -483,6 -514,40 +483,43 @@@ void __inquire_remote_apic(int apicid
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * The Multiprocessor Specification 1.4 (1997) example code suggests
+  * that there should be a 10ms delay between the BSP asserting INIT
+  * and de-asserting INIT, when starting a remote processor.
+  * But that slows boot and resume on modern processors, which include
+  * many cores and don't require that delay.
+  *
+  * Cmdline "init_cpu_udelay=" is available to over-ride this delay.
+  * Modern processor families are quirked to remove the delay entirely.
+  */
+ #define UDELAY_10MS_DEFAULT 10000
+ 
+ static unsigned int init_udelay = UDELAY_10MS_DEFAULT;
+ 
+ static int __init cpu_init_udelay(char *str)
+ {
+ 	get_option(&str, &init_udelay);
+ 
+ 	return 0;
+ }
+ early_param("cpu_init_udelay", cpu_init_udelay);
+ 
+ static void __init smp_quirk_init_udelay(void)
+ {
+ 	/* if cmdline changed it from default, leave it alone */
+ 	if (init_udelay != UDELAY_10MS_DEFAULT)
+ 		return;
+ 
+ 	/* if modern processor, use no delay */
+ 	if (((boot_cpu_data.x86_vendor == X86_VENDOR_INTEL) && (boot_cpu_data.x86 == 6)) ||
+ 	    ((boot_cpu_data.x86_vendor == X86_VENDOR_AMD) && (boot_cpu_data.x86 >= 0xF)))
+ 		init_udelay = 0;
+ }
+ 
+ /*
++>>>>>>> 1a744cb356c5 (x86/smp/boot: Remove 10ms delay from cpu_up() on modern processors)
   * Poke the other CPU in the eye via NMI to wake it up. Remember that the normal
   * INIT, INIT, STARTUP sequence will reset the chip hard for us, and this
   * won't ... remember to clear down the APIC, etc later.
@@@ -1135,8 -1223,8 +1172,13 @@@ void __init native_smp_prepare_cpus(uns
  		uv_system_init();
  
  	set_mtrr_aps_delayed_init();
++<<<<<<< HEAD
 +out:
 +	preempt_enable();
++=======
+ 
+ 	smp_quirk_init_udelay();
++>>>>>>> 1a744cb356c5 (x86/smp/boot: Remove 10ms delay from cpu_up() on modern processors)
  }
  
  void arch_enable_nonboot_cpus_begin(void)
* Unmerged path arch/x86/kernel/smpboot.c
