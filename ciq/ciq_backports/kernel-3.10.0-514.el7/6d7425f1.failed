vfio: Register/unregister irq_bypass_producer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [vfio] Register/unregister irq_bypass_producer (Paolo Bonzini) [1301888]
Rebuild_FUZZ: 92.86%
commit-author Feng Wu <feng.wu@intel.com>
commit 6d7425f109d2629d1f4b4b146eca8e43701bf966
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6d7425f1.failed

This patch adds the registration/unregistration of an
irq_bypass_producer for MSI/MSIx on vfio pci devices.

	Acked-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Feng Wu <feng.wu@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6d7425f109d2629d1f4b4b146eca8e43701bf966)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/Kconfig
#	drivers/vfio/pci/Kconfig
diff --cc drivers/vfio/Kconfig
index d8c57636b9ce,850d86ca685b..000000000000
--- a/drivers/vfio/Kconfig
+++ b/drivers/vfio/Kconfig
@@@ -27,3 -32,5 +27,8 @@@ menuconfig VFI
  	  If you don't know what to do here, say N.
  
  source "drivers/vfio/pci/Kconfig"
++<<<<<<< HEAD
++=======
+ source "drivers/vfio/platform/Kconfig"
+ source "virt/lib/Kconfig"
++>>>>>>> 6d7425f109d2 (vfio: Register/unregister irq_bypass_producer)
diff --cc drivers/vfio/pci/Kconfig
index c41b01e2b693,02912f180c6d..000000000000
--- a/drivers/vfio/pci/Kconfig
+++ b/drivers/vfio/pci/Kconfig
@@@ -1,6 -1,8 +1,11 @@@
  config VFIO_PCI
  	tristate "VFIO support for PCI devices"
  	depends on VFIO && PCI && EVENTFD
++<<<<<<< HEAD
++=======
+ 	select VFIO_VIRQFD
+ 	select IRQ_BYPASS_MANAGER
++>>>>>>> 6d7425f109d2 (vfio: Register/unregister irq_bypass_producer)
  	help
  	  Support for the PCI VFIO bus driver.  This is required to make
  	  use of PCI drivers using the VFIO framework.
* Unmerged path drivers/vfio/Kconfig
* Unmerged path drivers/vfio/pci/Kconfig
diff --git a/drivers/vfio/pci/vfio_pci_intrs.c b/drivers/vfio/pci/vfio_pci_intrs.c
index 874222205152..e950d771f147 100644
--- a/drivers/vfio/pci/vfio_pci_intrs.c
+++ b/drivers/vfio/pci/vfio_pci_intrs.c
@@ -530,6 +530,7 @@ static int vfio_msi_set_vector_signal(struct vfio_pci_device *vdev,
 
 	if (vdev->ctx[vector].trigger) {
 		free_irq(irq, vdev->ctx[vector].trigger);
+		irq_bypass_unregister_producer(&vdev->ctx[vector].producer);
 		kfree(vdev->ctx[vector].name);
 		eventfd_ctx_put(vdev->ctx[vector].trigger);
 		vdev->ctx[vector].trigger = NULL;
@@ -571,6 +572,14 @@ static int vfio_msi_set_vector_signal(struct vfio_pci_device *vdev,
 		return ret;
 	}
 
+	vdev->ctx[vector].producer.token = trigger;
+	vdev->ctx[vector].producer.irq = irq;
+	ret = irq_bypass_register_producer(&vdev->ctx[vector].producer);
+	if (unlikely(ret))
+		dev_info(&pdev->dev,
+		"irq bypass producer (token %p) registration fails: %d\n",
+		vdev->ctx[vector].producer.token, ret);
+
 	vdev->ctx[vector].trigger = trigger;
 
 	return 0;
diff --git a/drivers/vfio/pci/vfio_pci_private.h b/drivers/vfio/pci/vfio_pci_private.h
index c9f9b323f152..bcdd69b3c3eb 100644
--- a/drivers/vfio/pci/vfio_pci_private.h
+++ b/drivers/vfio/pci/vfio_pci_private.h
@@ -13,6 +13,7 @@
 
 #include <linux/mutex.h>
 #include <linux/pci.h>
+#include <linux/irqbypass.h>
 
 #ifndef VFIO_PCI_PRIVATE_H
 #define VFIO_PCI_PRIVATE_H
@@ -29,6 +30,7 @@ struct vfio_pci_irq_ctx {
 	struct virqfd		*mask;
 	char			*name;
 	bool			masked;
+	struct irq_bypass_producer	producer;
 };
 
 struct vfio_pci_device {
