crypto: qat - remove empty functions and turn qat_uregister fn to void

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [crypto] qat - remove empty functions and turn qat_uregister fn to void (Neil Horman) [1274179]
Rebuild_FUZZ: 93.94%
commit-author Tadeusz Struk <tadeusz.struk@intel.com>
commit be2cfac07619a8f97fe3aae39f095e9e33decd99
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/be2cfac0.failed

Some code cleanups after crypto API changes:
- Change qat_algs_unregister to a void function to keep it consistent
  with qat_asym_algs_unregister.
- Remove empty functions qat_algs_init & qat_algs_exit.

	Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit be2cfac07619a8f97fe3aae39f095e9e33decd99)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_common/adf_common_drv.h
#	drivers/crypto/qat/qat_common/adf_ctl_drv.c
#	drivers/crypto/qat/qat_common/adf_init.c
#	drivers/crypto/qat/qat_common/qat_algs.c
diff --cc drivers/crypto/qat/qat_common/adf_common_drv.h
index 3695dfa679f6,3f76bd495bcb..000000000000
--- a/drivers/crypto/qat/qat_common/adf_common_drv.h
+++ b/drivers/crypto/qat/qat_common/adf_common_drv.h
@@@ -134,10 -162,11 +134,18 @@@ int qat_crypto_unregister(void)
  struct qat_crypto_instance *qat_crypto_get_instance_node(int node);
  void qat_crypto_put_instance(struct qat_crypto_instance *inst);
  void qat_alg_callback(void *resp);
++<<<<<<< HEAD
 +int qat_algs_init(void);
 +void qat_algs_exit(void);
 +int qat_algs_register(void);
 +int qat_algs_unregister(void);
++=======
+ void qat_alg_asym_callback(void *resp);
+ int qat_algs_register(void);
+ void qat_algs_unregister(void);
+ int qat_asym_algs_register(void);
+ void qat_asym_algs_unregister(void);
++>>>>>>> be2cfac07619 (crypto: qat - remove empty functions and turn qat_uregister fn to void)
  
  int qat_hal_init(struct adf_accel_dev *accel_dev);
  void qat_hal_deinit(struct icp_qat_fw_loader_handle *handle);
diff --cc drivers/crypto/qat/qat_common/adf_ctl_drv.c
index cb5f066e93a6,03856ad280b9..000000000000
--- a/drivers/crypto/qat/qat_common/adf_ctl_drv.c
+++ b/drivers/crypto/qat/qat_common/adf_ctl_drv.c
@@@ -494,7 -488,7 +489,11 @@@ static void __exit adf_unregister_ctl_d
  	adf_chr_drv_destroy();
  	adf_exit_aer();
  	qat_crypto_unregister();
++<<<<<<< HEAD
 +	qat_algs_exit();
++=======
+ 	adf_clean_vf_map(false);
++>>>>>>> be2cfac07619 (crypto: qat - remove empty functions and turn qat_uregister fn to void)
  	mutex_destroy(&adf_ctl_lock);
  }
  
diff --cc drivers/crypto/qat/qat_common/adf_init.c
index 6b6a98ec5be4,d873eeecc363..000000000000
--- a/drivers/crypto/qat/qat_common/adf_init.c
+++ b/drivers/crypto/qat/qat_common/adf_init.c
@@@ -292,9 -272,10 +292,16 @@@ int adf_dev_stop(struct adf_accel_dev *
  	clear_bit(ADF_STATUS_STARTING, &accel_dev->status);
  	clear_bit(ADF_STATUS_STARTED, &accel_dev->status);
  
++<<<<<<< HEAD
 +	if (qat_algs_unregister())
 +		dev_err(&GET_DEV(accel_dev),
 +			"Failed to unregister crypto algs\n");
++=======
+ 	if (!list_empty(&accel_dev->crypto_list)) {
+ 		qat_algs_unregister();
+ 		qat_asym_algs_unregister();
+ 	}
++>>>>>>> be2cfac07619 (crypto: qat - remove empty functions and turn qat_uregister fn to void)
  
  	list_for_each(list_itr, &service_table) {
  		service = list_entry(list_itr, struct service_hndl, list);
diff --cc drivers/crypto/qat/qat_common/qat_algs.c
index df427c0e9e7b,9ed7bd5b860c..000000000000
--- a/drivers/crypto/qat/qat_common/qat_algs.c
+++ b/drivers/crypto/qat/qat_common/qat_algs.c
@@@ -1281,42 -1183,44 +1281,45 @@@ static struct crypto_alg qat_algs[] = 
  
  int qat_algs_register(void)
  {
 -	int ret = 0, i;
 +	int ret = 0;
  
  	mutex_lock(&algs_lock);
 -	if (++active_devs != 1)
 -		goto unlock;
 -
 -	for (i = 0; i < ARRAY_SIZE(qat_algs); i++)
 -		qat_algs[i].cra_flags = CRYPTO_ALG_TYPE_ABLKCIPHER | CRYPTO_ALG_ASYNC;
 -
 -	ret = crypto_register_algs(qat_algs, ARRAY_SIZE(qat_algs));
 -	if (ret)
 -		goto unlock;
 +	if (++active_devs == 1) {
 +		int i;
  
 -	for (i = 0; i < ARRAY_SIZE(qat_aeads); i++)
 -		qat_aeads[i].base.cra_flags = CRYPTO_ALG_ASYNC;
 +		for (i = 0; i < ARRAY_SIZE(qat_algs); i++)
 +			qat_algs[i].cra_flags =
 +				(qat_algs[i].cra_type == &crypto_aead_type) ?
 +				CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC :
 +				CRYPTO_ALG_TYPE_ABLKCIPHER | CRYPTO_ALG_ASYNC;
  
 -	ret = crypto_register_aeads(qat_aeads, ARRAY_SIZE(qat_aeads));
 -	if (ret)
 -		goto unreg_algs;
 -
 -unlock:
 +		ret = crypto_register_algs(qat_algs, ARRAY_SIZE(qat_algs));
 +	}
  	mutex_unlock(&algs_lock);
  	return ret;
 -
 -unreg_algs:
 -	crypto_unregister_algs(qat_algs, ARRAY_SIZE(qat_algs));
 -	goto unlock;
  }
  
- int qat_algs_unregister(void)
+ void qat_algs_unregister(void)
  {
 +	int ret = 0;
 +
  	mutex_lock(&algs_lock);
 -	if (--active_devs != 0)
 -		goto unlock;
 +	if (--active_devs == 0)
 +		ret = crypto_unregister_algs(qat_algs, ARRAY_SIZE(qat_algs));
 +	mutex_unlock(&algs_lock);
++<<<<<<< HEAD
 +	return ret;
 +}
  
 -	crypto_unregister_aeads(qat_aeads, ARRAY_SIZE(qat_aeads));
 -	crypto_unregister_algs(qat_algs, ARRAY_SIZE(qat_algs));
 +int qat_algs_init(void)
 +{
 +	crypto_get_default_rng();
 +	return 0;
 +}
  
 -unlock:
 -	mutex_unlock(&algs_lock);
 +void qat_algs_exit(void)
 +{
 +	crypto_put_default_rng();
++=======
++>>>>>>> be2cfac07619 (crypto: qat - remove empty functions and turn qat_uregister fn to void)
  }
* Unmerged path drivers/crypto/qat/qat_common/adf_common_drv.h
* Unmerged path drivers/crypto/qat/qat_common/adf_ctl_drv.c
* Unmerged path drivers/crypto/qat/qat_common/adf_init.c
* Unmerged path drivers/crypto/qat/qat_common/qat_algs.c
