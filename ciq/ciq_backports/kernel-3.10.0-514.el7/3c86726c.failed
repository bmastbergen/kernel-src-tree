HID: make .raw_request mandatory

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hid] make .raw_request mandatory (Benjamin Tissoires) [1311883]
Rebuild_FUZZ: 91.53%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 3c86726cfe38952f0366f86acfbbb025813ec1c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3c86726c.failed

SET_REPORT and GET_REPORT are mandatory in the HID specification.
Make the corresponding API in hid-core mandatory too, which removes the
need to test against it in some various places.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 3c86726cfe38952f0366f86acfbbb025813ec1c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-input.c
diff --cc drivers/hid/hid-input.c
index 802311fb961a,f5aef792f13b..000000000000
--- a/drivers/hid/hid-input.c
+++ b/drivers/hid/hid-input.c
@@@ -1263,8 -1266,7 +1263,12 @@@ static struct hid_input *hidinput_alloc
  	}
  
  	input_set_drvdata(input_dev, hid);
++<<<<<<< HEAD
 +	if (hid->ll_driver->request || hid->hid_output_raw_report)
 +		input_dev->event = hidinput_input_event;
++=======
+ 	input_dev->event = hidinput_input_event;
++>>>>>>> 3c86726cfe38 (HID: make .raw_request mandatory)
  	input_dev->open = hidinput_open;
  	input_dev->close = hidinput_close;
  	input_dev->setkeycode = hidinput_setkeycode;
diff --git a/Documentation/hid/hid-transport.txt b/Documentation/hid/hid-transport.txt
index 9dbbceaef4f3..3dcba9fd4a3a 100644
--- a/Documentation/hid/hid-transport.txt
+++ b/Documentation/hid/hid-transport.txt
@@ -283,7 +283,8 @@ The available HID callbacks are:
                        int reqtype)
    Same as ->request() but provides the report as raw buffer. This request shall
    be synchronous. A transport driver must not use ->wait() to complete such
-   requests.
+   requests. This request is mandatory and hid core will reject the device if
+   it is missing.
 
  - int (*output_report) (struct hid_device *hdev, __u8 *buf, size_t len)
    Send raw output report via intr channel. Used by some HID device drivers
diff --git a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
index 32bdc0edb75b..127f85d80ea5 100644
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@ -1298,9 +1298,6 @@ void __hid_request(struct hid_device *hid, struct hid_report *report,
 	int ret;
 	int len;
 
-	if (!hid->ll_driver->raw_request)
-		return;
-
 	buf = hid_alloc_report_buf(report, GFP_KERNEL);
 	if (!buf)
 		return;
@@ -2416,6 +2413,14 @@ int hid_add_device(struct hid_device *hdev)
 	if (hid_ignore(hdev))
 		return -ENODEV;
 
+	/*
+	 * Check for the mandatory transport channel.
+	 */
+	 if (!hdev->ll_driver->raw_request) {
+		hid_err(hdev, "transport driver missing .raw_request()\n");
+		return -EINVAL;
+	 }
+
 	/*
 	 * Read the device report descriptor once and use as template
 	 * for the driver-specific modifications.
* Unmerged path drivers/hid/hid-input.c
diff --git a/include/linux/hid.h b/include/linux/hid.h
index e94e65fe6e73..fdcdd52b2296 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -1001,11 +1001,8 @@ static inline int hid_hw_raw_request(struct hid_device *hdev,
 	if (len < 1 || len > HID_MAX_BUFFER_SIZE || !buf)
 		return -EINVAL;
 
-	if (hdev->ll_driver->raw_request)
-		return hdev->ll_driver->raw_request(hdev, reportnum, buf, len,
+	return hdev->ll_driver->raw_request(hdev, reportnum, buf, len,
 						    rtype, reqtype);
-
-	return -ENOSYS;
 }
 
 /**
