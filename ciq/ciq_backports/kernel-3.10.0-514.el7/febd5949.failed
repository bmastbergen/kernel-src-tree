mm/memory hotplug: init the zone's size when calculating node totalpages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mm] hotplug: init the zone's size when calculating node totalpages (Yasuaki Ishimatsu) [1270209]
Rebuild_FUZZ: 92.54%
commit-author Gu Zheng <guz.fnst@cn.fujitsu.com>
commit febd5949e134e279bde927353dc705ce41b18e2d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/febd5949.failed

Init the zone's size when calculating node totalpages to avoid duplicated
operations in free_area_init_core().

	Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit febd5949e134e279bde927353dc705ce41b18e2d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index f60ded95bce9,3b02be4def90..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -4561,21 -4751,33 +4561,43 @@@ static inline unsigned long __meminit z
  #endif /* CONFIG_HAVE_MEMBLOCK_NODE_MAP */
  
  static void __meminit calculate_node_totalpages(struct pglist_data *pgdat,
 -						unsigned long node_start_pfn,
 -						unsigned long node_end_pfn,
 -						unsigned long *zones_size,
 -						unsigned long *zholes_size)
 +		unsigned long *zones_size, unsigned long *zholes_size)
  {
- 	unsigned long realtotalpages, totalpages = 0;
+ 	unsigned long realtotalpages = 0, totalpages = 0;
  	enum zone_type i;
  
++<<<<<<< HEAD
 +	for (i = 0; i < MAX_NR_ZONES; i++)
 +		totalpages += zone_spanned_pages_in_node(pgdat->node_id, i,
 +								zones_size);
 +	pgdat->node_spanned_pages = totalpages;
 +
 +	realtotalpages = totalpages;
 +	for (i = 0; i < MAX_NR_ZONES; i++)
 +		realtotalpages -=
 +			zone_absent_pages_in_node(pgdat->node_id, i,
 +								zholes_size);
++=======
+ 	for (i = 0; i < MAX_NR_ZONES; i++) {
+ 		struct zone *zone = pgdat->node_zones + i;
+ 		unsigned long size, real_size;
+ 
+ 		size = zone_spanned_pages_in_node(pgdat->node_id, i,
+ 						  node_start_pfn,
+ 						  node_end_pfn,
+ 						  zones_size);
+ 		real_size = size - zone_absent_pages_in_node(pgdat->node_id, i,
+ 						  node_start_pfn, node_end_pfn,
+ 						  zholes_size);
+ 		zone->spanned_pages = size;
+ 		zone->present_pages = real_size;
+ 
+ 		totalpages += size;
+ 		realtotalpages += real_size;
+ 	}
+ 
+ 	pgdat->node_spanned_pages = totalpages;
++>>>>>>> febd5949e134 (mm/memory hotplug: init the zone's size when calculating node totalpages)
  	pgdat->node_present_pages = realtotalpages;
  	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,
  							realtotalpages);
@@@ -4684,7 -4887,7 +4706,11 @@@ static unsigned long __paginginit calc_
   * NOTE: pgdat should get zeroed by caller.
   */
  static void __paginginit free_area_init_core(struct pglist_data *pgdat,
++<<<<<<< HEAD
 +		unsigned long *zones_size, unsigned long *zholes_size)
++=======
+ 		unsigned long node_start_pfn, unsigned long node_end_pfn)
++>>>>>>> febd5949e134 (mm/memory hotplug: init the zone's size when calculating node totalpages)
  {
  	enum zone_type j;
  	int nid = pgdat->node_id;
@@@ -4705,9 -4908,8 +4731,14 @@@
  		struct zone *zone = pgdat->node_zones + j;
  		unsigned long size, realsize, freesize, memmap_pages;
  
++<<<<<<< HEAD
 +		size = zone_spanned_pages_in_node(nid, j, zones_size);
 +		realsize = freesize = size - zone_absent_pages_in_node(nid, j,
 +								zholes_size);
++=======
+ 		size = zone->spanned_pages;
+ 		realsize = freesize = zone->present_pages;
++>>>>>>> febd5949e134 (mm/memory hotplug: init the zone's size when calculating node totalpages)
  
  		/*
  		 * Adjust freesize so that it accounts for how much memory
@@@ -4838,7 -5049,7 +4867,11 @@@ void __paginginit free_area_init_node(i
  		(unsigned long)pgdat->node_mem_map);
  #endif
  
++<<<<<<< HEAD
 +	free_area_init_core(pgdat, zones_size, zholes_size);
++=======
+ 	free_area_init_core(pgdat, start_pfn, end_pfn);
++>>>>>>> febd5949e134 (mm/memory hotplug: init the zone's size when calculating node totalpages)
  }
  
  #ifdef CONFIG_HAVE_MEMBLOCK_NODE_MAP
* Unmerged path mm/page_alloc.c
