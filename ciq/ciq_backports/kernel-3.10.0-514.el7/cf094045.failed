perf hists: Introduce perf_hpp_list__for_each_format macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit cf094045d718437e3d5cd42ac09d77561cb2f368
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/cf094045.failed

Introducing perf_hpp_list__for_each_format macro to iterate
perf_hpp_list object's output entries.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1453109064-1026-20-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit cf094045d718437e3d5cd42ac09d77561cb2f368)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/browsers/hists.c
#	tools/perf/ui/gtk/hists.c
#	tools/perf/ui/hist.c
#	tools/perf/ui/stdio/hist.c
diff --cc tools/perf/ui/browsers/hists.c
index 29794dff01f7,df0aedfaea75..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -1095,8 -1095,9 +1095,14 @@@ static int hist_browser__show_entry(str
  
  		hist_browser__gotorc(browser, row, 0);
  
++<<<<<<< HEAD
 +		perf_hpp__for_each_format(fmt) {
 +			if (perf_hpp__should_skip(fmt) || column++ < browser->b.horiz_scroll)
++=======
+ 		perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 			if (perf_hpp__should_skip(fmt, entry->hists) ||
+ 			    column++ < browser->b.horiz_scroll)
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  				continue;
  
  			if (current_entry && browser->b.navkeypressed) {
@@@ -1174,8 -1175,8 +1180,13 @@@ static int hists_browser__scnprintf_hea
  			return ret;
  	}
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (perf_hpp__should_skip(fmt)  || column++ < browser->b.horiz_scroll)
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		if (perf_hpp__should_skip(fmt, hists)  || column++ < browser->b.horiz_scroll)
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  			continue;
  
  		ret = fmt->header(fmt, &dummy_hpp, hists_to_evsel(hists));
@@@ -1440,8 -1441,8 +1451,13 @@@ static int hist_browser__fprintf_entry(
  	if (symbol_conf.use_callchain)
  		printed += fprintf(fp, "%c ", folded_sign);
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (perf_hpp__should_skip(fmt))
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		if (perf_hpp__should_skip(fmt, he->hists))
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  			continue;
  
  		if (!first) {
diff --cc tools/perf/ui/gtk/hists.c
index 467717276ab6,eca5151f91d7..000000000000
--- a/tools/perf/ui/gtk/hists.c
+++ b/tools/perf/ui/gtk/hists.c
@@@ -317,8 -317,8 +317,13 @@@ static void perf_gtk__show_hists(GtkWid
  
  	col_idx = 0;
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (perf_hpp__should_skip(fmt))
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		if (perf_hpp__should_skip(fmt, hists))
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  			continue;
  
  		/*
@@@ -367,8 -367,8 +372,13 @@@
  
  		col_idx = 0;
  
++<<<<<<< HEAD
 +		perf_hpp__for_each_format(fmt) {
 +			if (perf_hpp__should_skip(fmt))
++=======
+ 		perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 			if (perf_hpp__should_skip(fmt, h->hists))
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  				continue;
  
  			if (fmt->color)
diff --cc tools/perf/ui/hist.c
index 2b9ea4c7e3a2,7b5e8cedf853..000000000000
--- a/tools/perf/ui/hist.c
+++ b/tools/perf/ui/hist.c
@@@ -537,21 -554,11 +537,27 @@@ void perf_hpp__setup_output_field(void
  
  	/* append sort keys to output field */
  	perf_hpp__for_each_sort_list(fmt) {
 -		struct perf_hpp_fmt *pos;
 +		if (!list_empty(&fmt->list))
 +			continue;
 +
++<<<<<<< HEAD
 +		/*
 +		 * sort entry fields are dynamically created,
 +		 * so they can share a same sort key even though
 +		 * the list is empty.
 +		 */
 +		if (perf_hpp__is_sort_entry(fmt)) {
 +			struct perf_hpp_fmt *pos;
  
 +			perf_hpp__for_each_format(pos) {
 +				if (perf_hpp__same_sort_entry(pos, fmt))
 +					goto next;
 +			}
++=======
+ 		perf_hpp_list__for_each_format(&perf_hpp_list, pos) {
+ 			if (fmt_equal(fmt, pos))
+ 				goto next;
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  		}
  
  		perf_hpp__column_register(fmt);
@@@ -565,22 -572,12 +571,27 @@@ void perf_hpp__append_sort_keys(void
  	struct perf_hpp_fmt *fmt;
  
  	/* append output fields to sort keys */
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (!list_empty(&fmt->sort_list))
 +			continue;
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		struct perf_hpp_fmt *pos;
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  
 -		perf_hpp__for_each_sort_list(pos) {
 -			if (fmt_equal(fmt, pos))
 -				goto next;
 +		/*
 +		 * sort entry fields are dynamically created,
 +		 * so they can share a same sort key even though
 +		 * the list is empty.
 +		 */
 +		if (perf_hpp__is_sort_entry(fmt)) {
 +			struct perf_hpp_fmt *pos;
 +
 +			perf_hpp__for_each_sort_list(pos) {
 +				if (perf_hpp__same_sort_entry(pos, fmt))
 +					goto next;
 +			}
  		}
  
  		perf_hpp__register_sort_field(fmt);
@@@ -616,8 -621,8 +627,13 @@@ unsigned int hists__sort_list_width(str
  	bool first = true;
  	struct perf_hpp dummy_hpp;
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (perf_hpp__should_skip(fmt))
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		if (perf_hpp__should_skip(fmt, hists))
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  			continue;
  
  		if (first)
diff --cc tools/perf/ui/stdio/hist.c
index 28fcb1ee0342,83e0bf2ab986..000000000000
--- a/tools/perf/ui/stdio/hist.c
+++ b/tools/perf/ui/stdio/hist.c
@@@ -384,8 -384,8 +384,13 @@@ static int hist_entry__snprintf(struct 
  	if (symbol_conf.exclude_other && !he->parent)
  		return 0;
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (perf_hpp__should_skip(fmt))
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		if (perf_hpp__should_skip(fmt, he->hists))
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  			continue;
  
  		/*
@@@ -464,8 -464,8 +469,13 @@@ size_t hists__fprintf(struct hists *his
  
  	fprintf(fp, "# ");
  
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (perf_hpp__should_skip(fmt))
++=======
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
+ 		if (perf_hpp__should_skip(fmt, hists))
++>>>>>>> cf094045d718 (perf hists: Introduce perf_hpp_list__for_each_format macro)
  			continue;
  
  		if (!first)
@@@ -488,10 -488,10 +498,10 @@@
  
  	fprintf(fp, "# ");
  
- 	perf_hpp__for_each_format(fmt) {
+ 	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
  		unsigned int i;
  
 -		if (perf_hpp__should_skip(fmt, hists))
 +		if (perf_hpp__should_skip(fmt))
  			continue;
  
  		if (!first)
* Unmerged path tools/perf/ui/browsers/hists.c
* Unmerged path tools/perf/ui/gtk/hists.c
* Unmerged path tools/perf/ui/hist.c
* Unmerged path tools/perf/ui/stdio/hist.c
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index bd572df18d95..5fe6db60f374 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -240,8 +240,8 @@ static inline void perf_hpp__register_sort_field(struct perf_hpp_fmt *format)
 	perf_hpp_list__register_sort_field(&perf_hpp_list, format);
 }
 
-#define perf_hpp__for_each_format(format) \
-	list_for_each_entry(format, &perf_hpp_list.fields, list)
+#define perf_hpp_list__for_each_format(_list, format) \
+	list_for_each_entry(format, &(_list)->fields, list)
 
 #define perf_hpp__for_each_format_safe(format, tmp)	\
 	list_for_each_entry_safe(format, tmp, &perf_hpp_list.fields, list)
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 6d30991339ed..2374b9de0a6b 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -2117,7 +2117,7 @@ void perf_hpp__set_elide(int idx, bool elide)
 	struct perf_hpp_fmt *fmt;
 	struct hpp_sort_entry *hse;
 
-	perf_hpp__for_each_format(fmt) {
+	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
 		if (!perf_hpp__is_sort_entry(fmt))
 			continue;
 
@@ -2177,7 +2177,7 @@ void sort__setup_elide(FILE *output)
 	struct perf_hpp_fmt *fmt;
 	struct hpp_sort_entry *hse;
 
-	perf_hpp__for_each_format(fmt) {
+	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
 		if (!perf_hpp__is_sort_entry(fmt))
 			continue;
 
@@ -2189,7 +2189,7 @@ void sort__setup_elide(FILE *output)
 	 * It makes no sense to elide all of sort entries.
 	 * Just revert them to show up again.
 	 */
-	perf_hpp__for_each_format(fmt) {
+	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
 		if (!perf_hpp__is_sort_entry(fmt))
 			continue;
 
@@ -2197,7 +2197,7 @@ void sort__setup_elide(FILE *output)
 			return;
 	}
 
-	perf_hpp__for_each_format(fmt) {
+	perf_hpp_list__for_each_format(&perf_hpp_list, fmt) {
 		if (!perf_hpp__is_sort_entry(fmt))
 			continue;
 
