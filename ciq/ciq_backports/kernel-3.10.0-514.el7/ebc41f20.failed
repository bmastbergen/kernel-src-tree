panic: change nmi_panic from macro to function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
commit ebc41f20d77f6ad91f1f2d2af5147dc9bb6b5eea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ebc41f20.failed

Commit 1717f2096b54 ("panic, x86: Fix re-entrance problem due to panic
on NMI") and commit 58c5661f2144 ("panic, x86: Allow CPUs to save
registers even if looping in NMI context") introduced nmi_panic() which
prevents concurrent/recursive execution of panic().  It also saves
registers for the crash dump on x86.

However, there are some cases where NMI handlers still use panic().
This patch set partially replaces them with nmi_panic() in those cases.

Even this patchset is applied, some NMI or similar handlers (e.g.  MCE
handler) continue to use panic().  This is because I can't test them
well and actual problems won't happen.  For example, the possibility
that normal panic and panic on MCE happen simultaneously is very low.

This patch (of 3):

Convert nmi_panic() to a proper function and export it instead of
exporting internal implementation details to modules, for obvious
reasons.

	Signed-off-by: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
	Acked-by: Borislav Petkov <bp@suse.de>
	Acked-by: Michal Nazarewicz <mina86@mina86.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
	Cc: Nicolas Iooss <nicolas.iooss_linux@m4x.org>
	Cc: Javi Merino <javi.merino@arm.com>
	Cc: Gobinda Charan Maji <gobinda.cemk07@gmail.com>
	Cc: "Steven Rostedt (Red Hat)" <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
	Cc: HATAYAMA Daisuke <d.hatayama@jp.fujitsu.com>
	Cc: Tejun Heo <tj@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ebc41f20d77f6ad91f1f2d2af5147dc9bb6b5eea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kernel.h
#	kernel/panic.c
diff --cc include/linux/kernel.h
index 27e50d389c3f,a13c52ccd8ac..000000000000
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@@ -251,6 -255,7 +251,10 @@@ extern long (*panic_blink)(int state)
  __printf(1, 2)
  void panic(const char *fmt, ...)
  	__noreturn __cold;
++<<<<<<< HEAD
++=======
+ void nmi_panic(struct pt_regs *regs, const char *msg);
++>>>>>>> ebc41f20d77f (panic: change nmi_panic from macro to function)
  extern void oops_enter(void);
  extern void oops_exit(void);
  void print_oops_end_marker(void);
@@@ -441,6 -445,17 +445,20 @@@ extern int panic_on_unrecovered_nmi
  extern int panic_on_io_nmi;
  extern int panic_on_warn;
  extern int sysctl_panic_on_stackoverflow;
++<<<<<<< HEAD
++=======
+ 
+ extern bool crash_kexec_post_notifiers;
+ 
+ /*
+  * panic_cpu is used for synchronizing panic() and crash_kexec() execution. It
+  * holds a CPU number which is executing panic() currently. A value of
+  * PANIC_CPU_INVALID means no CPU has entered panic() or crash_kexec().
+  */
+ extern atomic_t panic_cpu;
+ #define PANIC_CPU_INVALID	-1
+ 
++>>>>>>> ebc41f20d77f (panic: change nmi_panic from macro to function)
  /*
   * Only to be used by arch init code. If the user over-wrote the default
   * CONFIG_PANIC_TIMEOUT, honor it.
diff --cc kernel/panic.c
index 77e119fb43e1,535c96510a44..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -59,6 -62,37 +59,40 @@@ void __weak panic_smp_self_stop(void
  		cpu_relax();
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Stop ourselves in NMI context if another CPU has already panicked. Arch code
+  * may override this to prepare for crash dumping, e.g. save regs info.
+  */
+ void __weak nmi_panic_self_stop(struct pt_regs *regs)
+ {
+ 	panic_smp_self_stop();
+ }
+ 
+ atomic_t panic_cpu = ATOMIC_INIT(PANIC_CPU_INVALID);
+ 
+ /*
+  * A variant of panic() called from NMI context. We return if we've already
+  * panicked on this CPU. If another CPU already panicked, loop in
+  * nmi_panic_self_stop() which can provide architecture dependent code such
+  * as saving register state for crash dump.
+  */
+ void nmi_panic(struct pt_regs *regs, const char *msg)
+ {
+ 	int old_cpu, cpu;
+ 
+ 	cpu = raw_smp_processor_id();
+ 	old_cpu = atomic_cmpxchg(&panic_cpu, PANIC_CPU_INVALID, cpu);
+ 
+ 	if (old_cpu == PANIC_CPU_INVALID)
+ 		panic("%s", msg);
+ 	else if (old_cpu != cpu)
+ 		nmi_panic_self_stop(regs);
+ }
+ EXPORT_SYMBOL(nmi_panic);
+ 
++>>>>>>> ebc41f20d77f (panic: change nmi_panic from macro to function)
  /**
   *	panic - halt the system
   *	@fmt: The text string to print
* Unmerged path include/linux/kernel.h
* Unmerged path kernel/panic.c
