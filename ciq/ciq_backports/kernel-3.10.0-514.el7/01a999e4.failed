mmc: dw_mmc: remove the unused quirks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jaehoon Chung <jh80.chung@samsung.com>
commit 01a999e48995a35faaa513f811c335bce72917d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/01a999e4.failed

Removed the unused quirks. These quirks don't used anywhere.

	Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 01a999e48995a35faaa513f811c335bce72917d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/dw_mmc.c
#	include/linux/mmc/dw_mmc.h
diff --cc drivers/mmc/host/dw_mmc.c
index bc4f99ee919c,712835177e8b..000000000000
--- a/drivers/mmc/host/dw_mmc.c
+++ b/drivers/mmc/host/dw_mmc.c
@@@ -1101,16 -1634,64 +1101,48 @@@ static void dw_mci_command_complete(str
  	else
  		cmd->error = 0;
  
++<<<<<<< HEAD
 +	if (cmd->error) {
 +		/* newer ip versions need a delay between retries */
 +		if (host->quirks & DW_MCI_QUIRK_RETRY_DELAY)
 +			mdelay(20);
 +
 +		if (cmd->data) {
 +			dw_mci_stop_dma(host);
 +			host->data = NULL;
++=======
+ 	return cmd->error;
+ }
+ 
+ static int dw_mci_data_complete(struct dw_mci *host, struct mmc_data *data)
+ {
+ 	u32 status = host->data_status;
+ 
+ 	if (status & DW_MCI_DATA_ERROR_FLAGS) {
+ 		if (status & SDMMC_INT_DRTO) {
+ 			data->error = -ETIMEDOUT;
+ 		} else if (status & SDMMC_INT_DCRC) {
+ 			data->error = -EILSEQ;
+ 		} else if (status & SDMMC_INT_EBE) {
+ 			if (host->dir_status ==
+ 				DW_MCI_SEND_STATUS) {
+ 				/*
+ 				 * No data CRC status was returned.
+ 				 * The number of bytes transferred
+ 				 * will be exaggerated in PIO mode.
+ 				 */
+ 				data->bytes_xfered = 0;
+ 				data->error = -ETIMEDOUT;
+ 			} else if (host->dir_status ==
+ 					DW_MCI_RECV_STATUS) {
+ 				data->error = -EIO;
+ 			}
+ 		} else {
+ 			/* SDMMC_INT_SBE is included */
+ 			data->error = -EIO;
++>>>>>>> 01a999e48995 (mmc: dw_mmc: remove the unused quirks)
  		}
 -
 -		dev_dbg(host->dev, "data error, status 0x%08x\n", status);
 -
 -		/*
 -		 * After an error, there may be data lingering
 -		 * in the FIFO
 -		 */
 -		dw_mci_reset(host);
 -	} else {
 -		data->bytes_xfered = data->blocks * data->blksz;
 -		data->error = 0;
  	}
 -
 -	return data->error;
 -}
 -
 -static void dw_mci_set_drto(struct dw_mci *host)
 -{
 -	unsigned int drto_clks;
 -	unsigned int drto_ms;
 -
 -	drto_clks = mci_readl(host, TMOUT) >> 8;
 -	drto_ms = DIV_ROUND_UP(drto_clks, host->bus_hz / 1000);
 -
 -	/* add a bit spare time */
 -	drto_ms += 10;
 -
 -	mod_timer(&host->dto_timer, jiffies + msecs_to_jiffies(drto_ms));
  }
  
  static void dw_mci_tasklet_func(unsigned long priv)
@@@ -2469,13 -3140,14 +2501,18 @@@ int dw_mci_probe(struct dw_mci *host
  	if (init_slots) {
  		dev_info(host->dev, "%d slots initialized\n", init_slots);
  	} else {
 -		dev_dbg(host->dev,
 -			"attempted to initialize %d slots, but failed on all\n",
 -			host->num_slots);
 -		goto err_dmaunmap;
 +		dev_dbg(host->dev, "attempted to initialize %d slots, "
 +					"but failed on all\n", host->num_slots);
 +		goto err_workqueue;
  	}
  
++<<<<<<< HEAD
 +	if (host->quirks & DW_MCI_QUIRK_IDMAC_DTO)
 +		dev_info(host->dev, "Internal DMAC interrupt fix enabled.\n");
++=======
+ 	/* Now that slots are all setup, we can enable card detect */
+ 	dw_mci_enable_cd(host);
++>>>>>>> 01a999e48995 (mmc: dw_mmc: remove the unused quirks)
  
  	return 0;
  
diff --cc include/linux/mmc/dw_mmc.h
index a2d9a022a8fd,89df7abedd67..000000000000
--- a/include/linux/mmc/dw_mmc.h
+++ b/include/linux/mmc/dw_mmc.h
@@@ -203,20 -235,10 +203,20 @@@ struct dw_mci_dma_ops 
  };
  
  /* IP Quirks/flags. */
- /* DTO fix for command transmission with IDMAC configured */
- #define DW_MCI_QUIRK_IDMAC_DTO			BIT(0)
- /* delay needed between retries on some 2.11a implementations */
- #define DW_MCI_QUIRK_RETRY_DELAY		BIT(1)
- /* High Speed Capable - Supports HS cards (up to 50MHz) */
- #define DW_MCI_QUIRK_HIGHSPEED			BIT(2)
  /* Unreliable card detection */
++<<<<<<< HEAD
 +#define DW_MCI_QUIRK_BROKEN_CARD_DETECTION	BIT(3)
 +/* No write protect */
 +#define DW_MCI_QUIRK_NO_WRITE_PROTECT		BIT(4)
 +
 +/* Slot level quirks */
 +/* This slot has no write protect */
 +#define DW_MCI_SLOT_QUIRK_NO_WRITE_PROTECT	BIT(0)
++=======
+ #define DW_MCI_QUIRK_BROKEN_CARD_DETECTION	BIT(0)
+ /* Timer for broken data transfer over scheme */
+ #define DW_MCI_QUIRK_BROKEN_DTO			BIT(1)
++>>>>>>> 01a999e48995 (mmc: dw_mmc: remove the unused quirks)
  
  struct dma_pdata;
  
* Unmerged path drivers/mmc/host/dw_mmc.c
* Unmerged path include/linux/mmc/dw_mmc.h
