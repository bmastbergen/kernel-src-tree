libceph: don't access invalid memory in keepalive2 path

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 7f61f545657281a3a1b0faf68993165ebdecc51b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7f61f545.failed

This

    struct ceph_timespec ceph_ts;
    ...
    con_out_kvec_add(con, sizeof(ceph_ts), &ceph_ts);

wraps ceph_ts into a kvec and adds it to con->out_kvec array, yet
ceph_ts becomes invalid on return from prepare_write_keepalive().  As
a result, we send out bogus keepalive2 stamps.  Fix this by encoding
into a ceph_timespec member, similar to how acks are read and written.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
	Reviewed-by: Yan, Zheng <zyan@redhat.com>
(cherry picked from commit 7f61f545657281a3a1b0faf68993165ebdecc51b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ceph/messenger.h
#	net/ceph/messenger.c
diff --cc include/linux/ceph/messenger.h
index 363d6b80443d,b2371d9b51fa..000000000000
--- a/include/linux/ceph/messenger.h
+++ b/include/linux/ceph/messenger.h
@@@ -246,6 -250,8 +248,11 @@@ struct ceph_connection 
  	int in_base_pos;     /* bytes read */
  	__le64 in_temp_ack;  /* for reading an ack */
  
++<<<<<<< HEAD
++=======
+ 	struct timespec last_keepalive_ack; /* keepalive2 ack stamp */
+ 
++>>>>>>> 7f61f5456572 (libceph: don't access invalid memory in keepalive2 path)
  	struct delayed_work work;	    /* send|recv work */
  	unsigned long       delay;          /* current delay interval */
  };
diff --cc net/ceph/messenger.c
index dfab96506a17,b9b0e3b5da49..000000000000
--- a/net/ceph/messenger.c
+++ b/net/ceph/messenger.c
@@@ -1352,7 -1352,16 +1352,20 @@@ static void prepare_write_keepalive(str
  {
  	dout("prepare_write_keepalive %p\n", con);
  	con_out_kvec_reset(con);
++<<<<<<< HEAD
 +	con_out_kvec_add(con, sizeof (tag_keepalive), &tag_keepalive);
++=======
+ 	if (con->peer_features & CEPH_FEATURE_MSGR_KEEPALIVE2) {
+ 		struct timespec now = CURRENT_TIME;
+ 
+ 		con_out_kvec_add(con, sizeof(tag_keepalive2), &tag_keepalive2);
+ 		ceph_encode_timespec(&con->out_temp_keepalive2, &now);
+ 		con_out_kvec_add(con, sizeof(con->out_temp_keepalive2),
+ 				 &con->out_temp_keepalive2);
+ 	} else {
+ 		con_out_kvec_add(con, sizeof(tag_keepalive), &tag_keepalive);
+ 	}
++>>>>>>> 7f61f5456572 (libceph: don't access invalid memory in keepalive2 path)
  	con_flag_set(con, CON_FLAG_WRITE_PENDING);
  }
  
* Unmerged path include/linux/ceph/messenger.h
* Unmerged path net/ceph/messenger.c
