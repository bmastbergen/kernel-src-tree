gpio: move varargs hack outside #ifdef GPIOLIB

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [sound] alsa: gpio: move varargs hack outside #ifdef GPIOLIB (Jaroslav Kysela) [1220299]
Rebuild_FUZZ: 93.88%
commit-author Linus Walleij <linus.walleij@linaro.org>
commit 0dbc8b7afef6e4fddcfebcbacbeb269a0a3b06d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0dbc8b7a.failed

commit 39b2bbe3d715cf5013b5c48695ccdd25bd3bf120
"gpio: add flags argument to gpiod_get*() functions"
added a dynamic flags argument to all the GPIOD getter
functions, however this did not cover the stubs so
when people used gpiod stubs to compile out descriptor
code, compilation failed.

Solve this by:
- Also rename all the stub functions __gpiod_*
- Moving the vararg hack outside of #ifdef CONFIG_GPIOLIB
  so these will always be available.

	Reviewed-by: Alexandre Courbot <acourbot@nvidia.com>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 0dbc8b7afef6e4fddcfebcbacbeb269a0a3b06d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/gpio/consumer.h
diff --cc include/linux/gpio/consumer.h
index 7a8144fef406,12f146fa6604..000000000000
--- a/include/linux/gpio/consumer.h
+++ b/include/linux/gpio/consumer.h
@@@ -19,18 -19,51 +19,50 @@@ struct gpio_desc
  #ifdef CONFIG_GPIOLIB
  
  /* Acquire and dispose GPIOs */
++<<<<<<< HEAD
 +struct gpio_desc *__must_check gpiod_get(struct device *dev,
 +					 const char *con_id);
 +struct gpio_desc *__must_check gpiod_get_index(struct device *dev,
 +					       const char *con_id,
 +					       unsigned int idx);
 +void gpiod_put(struct gpio_desc *desc);
 +
 +struct gpio_desc *__must_check devm_gpiod_get(struct device *dev,
 +					      const char *con_id);
 +struct gpio_desc *__must_check devm_gpiod_get_index(struct device *dev,
 +						    const char *con_id,
 +						    unsigned int idx);
++=======
+ struct gpio_desc *__must_check __gpiod_get(struct device *dev,
+ 					 const char *con_id,
+ 					 enum gpiod_flags flags);
+ struct gpio_desc *__must_check __gpiod_get_index(struct device *dev,
+ 					       const char *con_id,
+ 					       unsigned int idx,
+ 					       enum gpiod_flags flags);
+ struct gpio_desc *__must_check __gpiod_get_optional(struct device *dev,
+ 						  const char *con_id,
+ 						  enum gpiod_flags flags);
+ struct gpio_desc *__must_check __gpiod_get_index_optional(struct device *dev,
+ 							const char *con_id,
+ 							unsigned int index,
+ 							enum gpiod_flags flags);
+ void gpiod_put(struct gpio_desc *desc);
+ 
+ struct gpio_desc *__must_check __devm_gpiod_get(struct device *dev,
+ 					      const char *con_id,
+ 					      enum gpiod_flags flags);
+ struct gpio_desc *__must_check __devm_gpiod_get_index(struct device *dev,
+ 						    const char *con_id,
+ 						    unsigned int idx,
+ 						    enum gpiod_flags flags);
+ struct gpio_desc *__must_check __devm_gpiod_get_optional(struct device *dev,
+ 						       const char *con_id,
+ 						       enum gpiod_flags flags);
+ struct gpio_desc *__must_check
+ __devm_gpiod_get_index_optional(struct device *dev, const char *con_id,
+ 			      unsigned int index, enum gpiod_flags flags);
++>>>>>>> 0dbc8b7afef6 (gpio: move varargs hack outside #ifdef GPIOLIB)
  void devm_gpiod_put(struct device *dev, struct gpio_desc *desc);
  
  int gpiod_get_direction(const struct gpio_desc *desc);
@@@ -63,8 -96,24 +95,26 @@@ struct gpio_chip *gpiod_to_chip(const s
  
  #else /* CONFIG_GPIOLIB */
  
- static inline struct gpio_desc *__must_check gpiod_get(struct device *dev,
- 						       const char *con_id)
+ static inline struct gpio_desc *__must_check __gpiod_get(struct device *dev,
+ 						const char *con_id,
+ 						enum gpiod_flags flags)
+ {
+ 	return ERR_PTR(-ENOSYS);
+ }
+ static inline struct gpio_desc *__must_check
+ __gpiod_get_index(struct device *dev,
+ 		  const char *con_id,
+ 		  unsigned int idx,
+ 		  enum gpiod_flags flags)
+ {
+ 	return ERR_PTR(-ENOSYS);
+ }
++<<<<<<< HEAD
++=======
+ 
+ static inline struct gpio_desc *__must_check
+ __gpiod_get_optional(struct device *dev, const char *con_id,
+ 		     enum gpiod_flags flags)
  {
  	return ERR_PTR(-ENOSYS);
  }
@@@ -74,6 -124,7 +125,8 @@@ __gpiod_get_index_optional(struct devic
  {
  	return ERR_PTR(-ENOSYS);
  }
+ 
++>>>>>>> 0dbc8b7afef6 (gpio: move varargs hack outside #ifdef GPIOLIB)
  static inline void gpiod_put(struct gpio_desc *desc)
  {
  	might_sleep();
@@@ -94,6 -149,21 +151,24 @@@ __devm_gpiod_get_index(struct device *d
  {
  	return ERR_PTR(-ENOSYS);
  }
++<<<<<<< HEAD
++=======
+ 
+ static inline struct gpio_desc *__must_check
+ __devm_gpiod_get_optional(struct device *dev, const char *con_id,
+ 			  enum gpiod_flags flags)
+ {
+ 	return ERR_PTR(-ENOSYS);
+ }
+ 
+ static inline struct gpio_desc *__must_check
+ __devm_gpiod_get_index_optional(struct device *dev, const char *con_id,
+ 				unsigned int index, enum gpiod_flags flags)
+ {
+ 	return ERR_PTR(-ENOSYS);
+ }
+ 
++>>>>>>> 0dbc8b7afef6 (gpio: move varargs hack outside #ifdef GPIOLIB)
  static inline void devm_gpiod_put(struct device *dev, struct gpio_desc *desc)
  {
  	might_sleep();
@@@ -207,16 -283,44 +282,50 @@@ static inline int desc_to_gpio(const st
  	WARN_ON(1);
  	return -EINVAL;
  }
 +static inline struct gpio_chip *gpiod_to_chip(const struct gpio_desc *desc)
 +{
 +	/* GPIO can never have been requested */
 +	WARN_ON(1);
 +	return ERR_PTR(-ENODEV);
 +}
  
- 
  #endif /* CONFIG_GPIOLIB */
  
+ /*
+  * Vararg-hacks! This is done to transition the kernel to always pass
+  * the options flags argument to the below functions. During a transition
+  * phase these vararg macros make both old-and-newstyle code compile,
+  * but when all calls to the elder API are removed, these should go away
+  * and the __gpiod_get() etc functions above be renamed just gpiod_get()
+  * etc.
+  */
+ #define __gpiod_get(dev, con_id, flags, ...) __gpiod_get(dev, con_id, flags)
+ #define gpiod_get(varargs...) __gpiod_get(varargs, 0)
+ #define __gpiod_get_index(dev, con_id, index, flags, ...)		\
+ 	__gpiod_get_index(dev, con_id, index, flags)
+ #define gpiod_get_index(varargs...) __gpiod_get_index(varargs, 0)
+ #define __gpiod_get_optional(dev, con_id, flags, ...)			\
+ 	__gpiod_get_optional(dev, con_id, flags)
+ #define gpiod_get_optional(varargs...) __gpiod_get_optional(varargs, 0)
+ #define __gpiod_get_index_optional(dev, con_id, index, flags, ...)	\
+ 	__gpiod_get_index_optional(dev, con_id, index, flags)
+ #define gpiod_get_index_optional(varargs...)				\
+ 	__gpiod_get_index_optional(varargs, 0)
+ #define __devm_gpiod_get(dev, con_id, flags, ...)			\
+ 	__devm_gpiod_get(dev, con_id, flags)
+ #define devm_gpiod_get(varargs...) __devm_gpiod_get(varargs, 0)
+ #define __devm_gpiod_get_index(dev, con_id, index, flags, ...)		\
+ 	__devm_gpiod_get_index(dev, con_id, index, flags)
+ #define devm_gpiod_get_index(varargs...) __devm_gpiod_get_index(varargs, 0)
+ #define __devm_gpiod_get_optional(dev, con_id, flags, ...)		\
+ 	__devm_gpiod_get_optional(dev, con_id, flags)
+ #define devm_gpiod_get_optional(varargs...)				\
+ 	__devm_gpiod_get_optional(varargs, 0)
+ #define __devm_gpiod_get_index_optional(dev, con_id, index, flags, ...)	\
+ 	__devm_gpiod_get_index_optional(dev, con_id, index, flags)
+ #define devm_gpiod_get_index_optional(varargs...)			\
+ 	__devm_gpiod_get_index_optional(varargs, 0)
+ 
  #if IS_ENABLED(CONFIG_GPIOLIB) && IS_ENABLED(CONFIG_GPIO_SYSFS)
  
  int gpiod_export(struct gpio_desc *desc, bool direction_may_change);
* Unmerged path include/linux/gpio/consumer.h
