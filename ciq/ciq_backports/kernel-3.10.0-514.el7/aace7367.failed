device property: add spaces to PROPERTY_ENTRY_STRING macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit aace7367bf83aef7baa021c7bcc9d2e331b040aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/aace7367.failed

Just a style fix, no functional changes.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit aace7367bf83aef7baa021c7bcc9d2e331b040aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/property.h
diff --cc include/linux/property.h
index 07076ebbcd68,b51fcd36d892..000000000000
--- a/include/linux/property.h
+++ b/include/linux/property.h
@@@ -76,4 -111,152 +76,155 @@@ static inline int device_property_read_
  	return device_property_read_u64_array(dev, propname, val, 1);
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool fwnode_property_read_bool(struct fwnode_handle *fwnode,
+ 					     const char *propname)
+ {
+ 	return fwnode_property_present(fwnode, propname);
+ }
+ 
+ static inline int fwnode_property_read_u8(struct fwnode_handle *fwnode,
+ 					  const char *propname, u8 *val)
+ {
+ 	return fwnode_property_read_u8_array(fwnode, propname, val, 1);
+ }
+ 
+ static inline int fwnode_property_read_u16(struct fwnode_handle *fwnode,
+ 					   const char *propname, u16 *val)
+ {
+ 	return fwnode_property_read_u16_array(fwnode, propname, val, 1);
+ }
+ 
+ static inline int fwnode_property_read_u32(struct fwnode_handle *fwnode,
+ 					   const char *propname, u32 *val)
+ {
+ 	return fwnode_property_read_u32_array(fwnode, propname, val, 1);
+ }
+ 
+ static inline int fwnode_property_read_u64(struct fwnode_handle *fwnode,
+ 					   const char *propname, u64 *val)
+ {
+ 	return fwnode_property_read_u64_array(fwnode, propname, val, 1);
+ }
+ 
+ /**
+  * struct property_entry - "Built-in" device property representation.
+  * @name: Name of the property.
+  * @length: Length of data making up the value.
+  * @is_array: True when the property is an array.
+  * @is_string: True when property is a string.
+  * @pointer: Pointer to the property (an array of items of the given type).
+  * @value: Value of the property (when it is a single item of the given type).
+  */
+ struct property_entry {
+ 	const char *name;
+ 	size_t length;
+ 	bool is_array;
+ 	bool is_string;
+ 	union {
+ 		union {
+ 			void *raw_data;
+ 			u8 *u8_data;
+ 			u16 *u16_data;
+ 			u32 *u32_data;
+ 			u64 *u64_data;
+ 			const char **str;
+ 		} pointer;
+ 		union {
+ 			unsigned long long raw_data;
+ 			u8 u8_data;
+ 			u16 u16_data;
+ 			u32 u32_data;
+ 			u64 u64_data;
+ 			const char *str;
+ 		} value;
+ 	};
+ };
+ 
+ /*
+  * Note: the below four initializers for the anonymous union are carefully
+  * crafted to avoid gcc-4.4.4's problems with initialization of anon unions
+  * and structs.
+  */
+ 
+ #define PROPERTY_ENTRY_INTEGER_ARRAY(_name_, _type_, _val_)	\
+ {								\
+ 	.name = _name_,						\
+ 	.length = ARRAY_SIZE(_val_) * sizeof(_type_),		\
+ 	.is_array = true,					\
+ 	.is_string = false,					\
+ 	{ .pointer = { _type_##_data = _val_ } },		\
+ }
+ 
+ #define PROPERTY_ENTRY_U8_ARRAY(_name_, _val_)			\
+ 	PROPERTY_ENTRY_INTEGER_ARRAY(_name_, u8, _val_)
+ #define PROPERTY_ENTRY_U16_ARRAY(_name_, _val_)			\
+ 	PROPERTY_ENTRY_INTEGER_ARRAY(_name_, u16, _val_)
+ #define PROPERTY_ENTRY_U32_ARRAY(_name_, _val_)			\
+ 	PROPERTY_ENTRY_INTEGER_ARRAY(_name_, u32, _val_)
+ #define PROPERTY_ENTRY_U64_ARRAY(_name_, _val_)			\
+ 	PROPERTY_ENTRY_INTEGER_ARRAY(_name_, u64, _val_)
+ 
+ #define PROPERTY_ENTRY_STRING_ARRAY(_name_, _val_)		\
+ {								\
+ 	.name = _name_,						\
+ 	.length = ARRAY_SIZE(_val_) * sizeof(const char *),	\
+ 	.is_array = true,					\
+ 	.is_string = true,					\
+ 	{ .pointer = { .str = _val_ } },			\
+ }
+ 
+ #define PROPERTY_ENTRY_INTEGER(_name_, _type_, _val_)	\
+ {							\
+ 	.name = _name_,					\
+ 	.length = sizeof(_type_),			\
+ 	.is_string = false,				\
+ 	{ .value = { ._type_##_data = _val_ } },	\
+ }
+ 
+ #define PROPERTY_ENTRY_U8(_name_, _val_)		\
+ 	PROPERTY_ENTRY_INTEGER(_name_, u8, _val_)
+ #define PROPERTY_ENTRY_U16(_name_, _val_)		\
+ 	PROPERTY_ENTRY_INTEGER(_name_, u16, _val_)
+ #define PROPERTY_ENTRY_U32(_name_, _val_)		\
+ 	PROPERTY_ENTRY_INTEGER(_name_, u32, _val_)
+ #define PROPERTY_ENTRY_U64(_name_, _val_)		\
+ 	PROPERTY_ENTRY_INTEGER(_name_, u64, _val_)
+ 
+ #define PROPERTY_ENTRY_STRING(_name_, _val_)		\
+ {							\
+ 	.name = _name_,					\
+ 	.length = sizeof(_val_),			\
+ 	.is_string = true,				\
+ 	{ .value = { .str = _val_ } },			\
+ }
+ 
+ #define PROPERTY_ENTRY_BOOL(_name_)		\
+ {						\
+ 	.name = _name_,				\
+ }
+ 
+ /**
+  * struct property_set - Collection of "built-in" device properties.
+  * @fwnode: Handle to be pointed to by the fwnode field of struct device.
+  * @properties: Array of properties terminated with a null entry.
+  */
+ struct property_set {
+ 	struct fwnode_handle fwnode;
+ 	struct property_entry *properties;
+ };
+ 
+ int device_add_property_set(struct device *dev, const struct property_set *pset);
+ void device_remove_property_set(struct device *dev);
+ 
+ bool device_dma_supported(struct device *dev);
+ 
+ enum dev_dma_attr device_get_dma_attr(struct device *dev);
+ 
+ int device_get_phy_mode(struct device *dev);
+ 
+ void *device_get_mac_address(struct device *dev, char *addr, int alen);
+ 
++>>>>>>> aace7367bf83 (device property: add spaces to PROPERTY_ENTRY_STRING macro)
  #endif /* _LINUX_PROPERTY_H_ */
* Unmerged path include/linux/property.h
