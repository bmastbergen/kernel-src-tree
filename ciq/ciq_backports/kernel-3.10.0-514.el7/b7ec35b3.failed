libceph: change ceph_osdmap_flag() to take osdc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit b7ec35b304b64af2830027350cc99d31e6e537c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b7ec35b3.failed

For the benefit of every single caller, take osdc instead of map.
Also, now that osdc->osdmap can't ever be NULL, drop the check.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit b7ec35b304b64af2830027350cc99d31e6e537c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/file.c
#	net/ceph/osd_client.c
diff --cc fs/ceph/file.c
index 0c3070bb755c,8eeb9f579db5..000000000000
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@@ -1090,12 -1439,11 +1090,20 @@@ retry_snap
  	     ceph_cap_string(got));
  	ceph_put_cap_refs(ci, got);
  
++<<<<<<< HEAD
 +	if (written >= 0 &&
 +	    ((file->f_flags & O_SYNC) || IS_SYNC(file->f_mapping->host) ||
 +	     ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_NEARFULL))) {
 +		err = vfs_fsync_range(file, pos, pos + written - 1, 1);
 +		if (err < 0)
 +			written = err;
++=======
+ 	if (written >= 0) {
+ 		if (ceph_osdmap_flag(osdc, CEPH_OSDMAP_NEARFULL))
+ 			iocb->ki_flags |= IOCB_DSYNC;
+ 
+ 		written = generic_write_sync(iocb, written);
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  	}
  
  	goto out_unlocked;
diff --cc net/ceph/osd_client.c
index b1bd089d52f0,79c3bad87e62..000000000000
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@@ -1313,236 -1271,1197 +1313,1053 @@@ EXPORT_SYMBOL(ceph_osdc_set_request_lin
  /*
   * Returns whether a request should be blocked from being sent
   * based on the current osdmap and osd_client settings.
 + *
 + * Caller should hold map_sem for read.
   */
 -static bool target_should_be_paused(struct ceph_osd_client *osdc,
 -				    const struct ceph_osd_request_target *t,
 -				    struct ceph_pg_pool_info *pi)
 -{
 +static bool __req_should_be_paused(struct ceph_osd_client *osdc,
 +				   struct ceph_osd_request *req)
 +{
++<<<<<<< HEAD
 +	bool pauserd = ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_PAUSERD);
 +	bool pausewr = ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_PAUSEWR) ||
 +		ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_FULL);
 +	return (req->r_flags & CEPH_OSD_FLAG_READ && pauserd) ||
 +		(req->r_flags & CEPH_OSD_FLAG_WRITE && pausewr);
++=======
+ 	bool pauserd = ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD);
+ 	bool pausewr = ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR) ||
+ 		       ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
+ 		       __pool_full(pi);
+ 
+ 	WARN_ON(pi->id != t->base_oloc.pool);
+ 	return (t->flags & CEPH_OSD_FLAG_READ && pauserd) ||
+ 	       (t->flags & CEPH_OSD_FLAG_WRITE && pausewr);
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  }
  
 -enum calc_target_result {
 -	CALC_TARGET_NO_ACTION = 0,
 -	CALC_TARGET_NEED_RESEND,
 -	CALC_TARGET_POOL_DNE,
 -};
 -
 -static enum calc_target_result calc_target(struct ceph_osd_client *osdc,
 -					   struct ceph_osd_request_target *t,
 -					   u32 *last_force_resend,
 -					   bool any_change)
 +/*
 + * Calculate mapping of a request to a PG.  Takes tiering into account.
 + */
 +static int __calc_request_pg(struct ceph_osdmap *osdmap,
 +			     struct ceph_osd_request *req,
 +			     struct ceph_pg *pg_out)
  {
++<<<<<<< HEAD
 +	bool need_check_tiering;
++=======
+ 	struct ceph_pg_pool_info *pi;
+ 	struct ceph_pg pgid, last_pgid;
+ 	struct ceph_osds up, acting;
+ 	bool force_resend = false;
+ 	bool need_check_tiering = false;
+ 	bool need_resend = false;
+ 	bool sort_bitwise = ceph_osdmap_flag(osdc, CEPH_OSDMAP_SORTBITWISE);
+ 	enum calc_target_result ct_res;
+ 	int ret;
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  
 -	pi = ceph_pg_pool_by_id(osdc->osdmap, t->base_oloc.pool);
 -	if (!pi) {
 -		t->osd = CEPH_HOMELESS_OSD;
 -		ct_res = CALC_TARGET_POOL_DNE;
 -		goto out;
 -	}
 -
 -	if (osdc->osdmap->epoch == pi->last_force_request_resend) {
 -		if (last_force_resend &&
 -		    *last_force_resend < pi->last_force_request_resend) {
 -			*last_force_resend = pi->last_force_request_resend;
 -			force_resend = true;
 -		} else if (!last_force_resend) {
 -			force_resend = true;
 -		}
 -	}
 -	if (ceph_oid_empty(&t->target_oid) || force_resend) {
 -		ceph_oid_copy(&t->target_oid, &t->base_oid);
 +	need_check_tiering = false;
 +	if (req->r_target_oloc.pool == -1) {
 +		req->r_target_oloc = req->r_base_oloc; /* struct */
  		need_check_tiering = true;
  	}
 -	if (ceph_oloc_empty(&t->target_oloc) || force_resend) {
 -		ceph_oloc_copy(&t->target_oloc, &t->base_oloc);
 +	if (req->r_target_oid.name_len == 0) {
 +		ceph_oid_copy(&req->r_target_oid, &req->r_base_oid);
  		need_check_tiering = true;
  	}
  
  	if (need_check_tiering &&
 -	    (t->flags & CEPH_OSD_FLAG_IGNORE_OVERLAY) == 0) {
 -		if (t->flags & CEPH_OSD_FLAG_READ && pi->read_tier >= 0)
 -			t->target_oloc.pool = pi->read_tier;
 -		if (t->flags & CEPH_OSD_FLAG_WRITE && pi->write_tier >= 0)
 -			t->target_oloc.pool = pi->write_tier;
 +	    (req->r_flags & CEPH_OSD_FLAG_IGNORE_OVERLAY) == 0) {
 +		struct ceph_pg_pool_info *pi;
 +
 +		pi = ceph_pg_pool_by_id(osdmap, req->r_target_oloc.pool);
 +		if (pi) {
 +			if ((req->r_flags & CEPH_OSD_FLAG_READ) &&
 +			    pi->read_tier >= 0)
 +				req->r_target_oloc.pool = pi->read_tier;
 +			if ((req->r_flags & CEPH_OSD_FLAG_WRITE) &&
 +			    pi->write_tier >= 0)
 +				req->r_target_oloc.pool = pi->write_tier;
 +		}
 +		/* !pi is caught in ceph_oloc_oid_to_pg() */
  	}
  
 -	ret = ceph_object_locator_to_pg(osdc->osdmap, &t->target_oid,
 -					&t->target_oloc, &pgid);
 -	if (ret) {
 -		WARN_ON(ret != -ENOENT);
 -		t->osd = CEPH_HOMELESS_OSD;
 -		ct_res = CALC_TARGET_POOL_DNE;
 -		goto out;
 -	}
 -	last_pgid.pool = pgid.pool;
 -	last_pgid.seed = ceph_stable_mod(pgid.seed, t->pg_num, t->pg_num_mask);
 +	return ceph_oloc_oid_to_pg(osdmap, &req->r_target_oloc,
 +				   &req->r_target_oid, pg_out);
 +}
  
 -	ceph_pg_to_up_acting_osds(osdc->osdmap, &pgid, &up, &acting);
 -	if (any_change &&
 -	    ceph_is_new_interval(&t->acting,
 -				 &acting,
 -				 &t->up,
 -				 &up,
 -				 t->size,
 -				 pi->size,
 -				 t->min_size,
 -				 pi->min_size,
 -				 t->pg_num,
 -				 pi->pg_num,
 -				 t->sort_bitwise,
 -				 sort_bitwise,
 -				 &last_pgid))
 -		force_resend = true;
 -
 -	if (t->paused && !target_should_be_paused(osdc, t, pi)) {
 -		t->paused = false;
 -		need_resend = true;
 -	}
 +static void __enqueue_request(struct ceph_osd_request *req)
 +{
 +	struct ceph_osd_client *osdc = req->r_osdc;
  
 -	if (ceph_pg_compare(&t->pgid, &pgid) ||
 -	    ceph_osds_changed(&t->acting, &acting, any_change) ||
 -	    force_resend) {
 -		t->pgid = pgid; /* struct */
 -		ceph_osds_copy(&t->acting, &acting);
 -		ceph_osds_copy(&t->up, &up);
 -		t->size = pi->size;
 -		t->min_size = pi->min_size;
 -		t->pg_num = pi->pg_num;
 -		t->pg_num_mask = pi->pg_num_mask;
 -		t->sort_bitwise = sort_bitwise;
 -
 -		t->osd = acting.primary;
 -		need_resend = true;
 -	}
 +	dout("%s %p tid %llu to osd%d\n", __func__, req, req->r_tid,
 +	     req->r_osd ? req->r_osd->o_osd : -1);
  
 -	ct_res = need_resend ? CALC_TARGET_NEED_RESEND : CALC_TARGET_NO_ACTION;
 -out:
 -	dout("%s t %p -> ct_res %d osd %d\n", __func__, t, ct_res, t->osd);
 -	return ct_res;
 +	if (req->r_osd) {
 +		__remove_osd_from_lru(req->r_osd);
 +		list_add_tail(&req->r_osd_item, &req->r_osd->o_requests);
 +		list_move_tail(&req->r_req_lru_item, &osdc->req_unsent);
 +	} else {
 +		list_move_tail(&req->r_req_lru_item, &osdc->req_notarget);
 +	}
  }
  
 -static void setup_request_data(struct ceph_osd_request *req,
 -			       struct ceph_msg *msg)
 +/*
 + * Pick an osd (the first 'up' osd in the pg), allocate the osd struct
 + * (as needed), and set the request r_osd appropriately.  If there is
 + * no up osd, set r_osd to NULL.  Move the request to the appropriate list
 + * (unsent, homeless) or leave on in-flight lru.
 + *
 + * Return 0 if unchanged, 1 if changed, or negative on error.
 + *
 + * Caller should hold map_sem for read and request_mutex.
 + */
 +static int __map_request(struct ceph_osd_client *osdc,
 +			 struct ceph_osd_request *req, int force_resend)
  {
 -	u32 data_len = 0;
 -	int i;
 +	struct ceph_pg pgid;
 +	struct ceph_osds up, acting;
 +	int err;
 +	bool was_paused;
  
 -	if (!list_empty(&msg->data))
 -		return;
 +	dout("map_request %p tid %lld\n", req, req->r_tid);
  
 -	WARN_ON(msg->data_length);
 -	for (i = 0; i < req->r_num_ops; i++) {
 -		struct ceph_osd_req_op *op = &req->r_ops[i];
 -
 -		switch (op->op) {
 -		/* request */
 -		case CEPH_OSD_OP_WRITE:
 -		case CEPH_OSD_OP_WRITEFULL:
 -			WARN_ON(op->indata_len != op->extent.length);
 -			ceph_osdc_msg_data_add(msg, &op->extent.osd_data);
 -			break;
 -		case CEPH_OSD_OP_SETXATTR:
 -		case CEPH_OSD_OP_CMPXATTR:
 -			WARN_ON(op->indata_len != op->xattr.name_len +
 -						  op->xattr.value_len);
 -			ceph_osdc_msg_data_add(msg, &op->xattr.osd_data);
 -			break;
 -		case CEPH_OSD_OP_NOTIFY_ACK:
 -			ceph_osdc_msg_data_add(msg,
 -					       &op->notify_ack.request_data);
 -			break;
 +	err = __calc_request_pg(osdc->osdmap, req, &pgid);
 +	if (err) {
 +		list_move(&req->r_req_lru_item, &osdc->req_notarget);
 +		return err;
 +	}
 +	req->r_pgid = pgid;
  
 -		/* reply */
 -		case CEPH_OSD_OP_STAT:
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->raw_data_in);
 -			break;
 -		case CEPH_OSD_OP_READ:
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->extent.osd_data);
 -			break;
 +	ceph_pg_to_up_acting_osds(osdc->osdmap, &pgid, &up, &acting);
  
 -		/* both */
 -		case CEPH_OSD_OP_CALL:
 -			WARN_ON(op->indata_len != op->cls.class_len +
 -						  op->cls.method_len +
 -						  op->cls.indata_len);
 -			ceph_osdc_msg_data_add(msg, &op->cls.request_info);
 -			/* optional, can be NONE */
 -			ceph_osdc_msg_data_add(msg, &op->cls.request_data);
 -			/* optional, can be NONE */
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->cls.response_data);
 -			break;
 -		case CEPH_OSD_OP_NOTIFY:
 -			ceph_osdc_msg_data_add(msg,
 -					       &op->notify.request_data);
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->notify.response_data);
 -			break;
 +	was_paused = req->r_paused;
 +	req->r_paused = __req_should_be_paused(osdc, req);
 +	if (was_paused && !req->r_paused)
 +		force_resend = 1;
 +
 +	if ((!force_resend &&
 +	     req->r_osd && req->r_osd->o_osd == acting.primary &&
 +	     req->r_sent >= req->r_osd->o_incarnation &&
 +	     req->r_num_pg_osds == acting.size &&
 +	     memcmp(req->r_pg_osds, acting.osds,
 +		    acting.size * sizeof(acting.osds[0])) == 0) ||
 +	    (req->r_osd == NULL && acting.primary == -1) ||
 +	    req->r_paused)
 +		return 0;  /* no change */
 +
 +	dout("map_request tid %llu pgid %lld.%x osd%d (was osd%d)\n",
 +	     req->r_tid, pgid.pool, pgid.seed, acting.primary,
 +	     req->r_osd ? req->r_osd->o_osd : -1);
 +
 +	/* record full pg acting set */
 +	memcpy(req->r_pg_osds, acting.osds,
 +	       acting.size * sizeof(acting.osds[0]));
 +	req->r_num_pg_osds = acting.size;
 +
 +	if (req->r_osd) {
 +		__cancel_request(req);
 +		list_del_init(&req->r_osd_item);
 +		list_del_init(&req->r_linger_osd_item);
 +		req->r_osd = NULL;
 +	}
 +
 +	req->r_osd = lookup_osd(&osdc->osds, acting.primary);
 +	if (!req->r_osd && acting.primary >= 0) {
 +		err = -ENOMEM;
 +		req->r_osd = create_osd(osdc, acting.primary);
 +		if (!req->r_osd) {
 +			list_move(&req->r_req_lru_item, &osdc->req_notarget);
 +			goto out;
  		}
  
 -		data_len += op->indata_len;
 +		dout("map_request osd %p is osd%d\n", req->r_osd,
 +		     acting.primary);
 +		insert_osd(&osdc->osds, req->r_osd);
 +
 +		ceph_con_open(&req->r_osd->o_con,
 +			      CEPH_ENTITY_TYPE_OSD, acting.primary,
 +			      &osdc->osdmap->osd_addr[acting.primary]);
  	}
  
++<<<<<<< HEAD
 +	__enqueue_request(req);
 +	err = 1;   /* osd or pg changed */
++=======
+ 	WARN_ON(data_len != msg->data_length);
+ }
+ 
+ static void encode_request(struct ceph_osd_request *req, struct ceph_msg *msg)
+ {
+ 	void *p = msg->front.iov_base;
+ 	void *const end = p + msg->front_alloc_len;
+ 	u32 data_len = 0;
+ 	int i;
+ 
+ 	if (req->r_flags & CEPH_OSD_FLAG_WRITE) {
+ 		/* snapshots aren't writeable */
+ 		WARN_ON(req->r_snapid != CEPH_NOSNAP);
+ 	} else {
+ 		WARN_ON(req->r_mtime.tv_sec || req->r_mtime.tv_nsec ||
+ 			req->r_data_offset || req->r_snapc);
+ 	}
+ 
+ 	setup_request_data(req, msg);
+ 
+ 	ceph_encode_32(&p, 1); /* client_inc, always 1 */
+ 	ceph_encode_32(&p, req->r_osdc->osdmap->epoch);
+ 	ceph_encode_32(&p, req->r_flags);
+ 	ceph_encode_timespec(p, &req->r_mtime);
+ 	p += sizeof(struct ceph_timespec);
+ 	/* aka reassert_version */
+ 	memcpy(p, &req->r_replay_version, sizeof(req->r_replay_version));
+ 	p += sizeof(req->r_replay_version);
+ 
+ 	/* oloc */
+ 	ceph_encode_8(&p, 4);
+ 	ceph_encode_8(&p, 4);
+ 	ceph_encode_32(&p, 8 + 4 + 4);
+ 	ceph_encode_64(&p, req->r_t.target_oloc.pool);
+ 	ceph_encode_32(&p, -1); /* preferred */
+ 	ceph_encode_32(&p, 0); /* key len */
+ 
+ 	/* pgid */
+ 	ceph_encode_8(&p, 1);
+ 	ceph_encode_64(&p, req->r_t.pgid.pool);
+ 	ceph_encode_32(&p, req->r_t.pgid.seed);
+ 	ceph_encode_32(&p, -1); /* preferred */
+ 
+ 	/* oid */
+ 	ceph_encode_32(&p, req->r_t.target_oid.name_len);
+ 	memcpy(p, req->r_t.target_oid.name, req->r_t.target_oid.name_len);
+ 	p += req->r_t.target_oid.name_len;
+ 
+ 	/* ops, can imply data */
+ 	ceph_encode_16(&p, req->r_num_ops);
+ 	for (i = 0; i < req->r_num_ops; i++) {
+ 		data_len += osd_req_encode_op(p, &req->r_ops[i]);
+ 		p += sizeof(struct ceph_osd_op);
+ 	}
+ 
+ 	ceph_encode_64(&p, req->r_snapid); /* snapid */
+ 	if (req->r_snapc) {
+ 		ceph_encode_64(&p, req->r_snapc->seq);
+ 		ceph_encode_32(&p, req->r_snapc->num_snaps);
+ 		for (i = 0; i < req->r_snapc->num_snaps; i++)
+ 			ceph_encode_64(&p, req->r_snapc->snaps[i]);
+ 	} else {
+ 		ceph_encode_64(&p, 0); /* snap_seq */
+ 		ceph_encode_32(&p, 0); /* snaps len */
+ 	}
+ 
+ 	ceph_encode_32(&p, req->r_attempts); /* retry_attempt */
+ 
+ 	BUG_ON(p > end);
+ 	msg->front.iov_len = p - msg->front.iov_base;
+ 	msg->hdr.version = cpu_to_le16(4); /* MOSDOp v4 */
+ 	msg->hdr.front_len = cpu_to_le32(msg->front.iov_len);
+ 	msg->hdr.data_len = cpu_to_le32(data_len);
+ 	/*
+ 	 * The header "data_off" is a hint to the receiver allowing it
+ 	 * to align received data into its buffers such that there's no
+ 	 * need to re-copy it before writing it to disk (direct I/O).
+ 	 */
+ 	msg->hdr.data_off = cpu_to_le16(req->r_data_offset);
+ 
+ 	dout("%s req %p oid %*pE oid_len %d front %zu data %u\n", __func__,
+ 	     req, req->r_t.target_oid.name_len, req->r_t.target_oid.name,
+ 	     req->r_t.target_oid.name_len, msg->front.iov_len, data_len);
+ }
+ 
+ /*
+  * @req has to be assigned a tid and registered.
+  */
+ static void send_request(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd *osd = req->r_osd;
+ 
+ 	verify_osd_locked(osd);
+ 	WARN_ON(osd->o_osd != req->r_t.osd);
+ 
+ 	/*
+ 	 * We may have a previously queued request message hanging
+ 	 * around.  Cancel it to avoid corrupting the msgr.
+ 	 */
+ 	if (req->r_sent)
+ 		ceph_msg_revoke(req->r_request);
+ 
+ 	req->r_flags |= CEPH_OSD_FLAG_KNOWN_REDIR;
+ 	if (req->r_attempts)
+ 		req->r_flags |= CEPH_OSD_FLAG_RETRY;
+ 	else
+ 		WARN_ON(req->r_flags & CEPH_OSD_FLAG_RETRY);
+ 
+ 	encode_request(req, req->r_request);
+ 
+ 	dout("%s req %p tid %llu to pg %llu.%x osd%d flags 0x%x attempt %d\n",
+ 	     __func__, req, req->r_tid, req->r_t.pgid.pool, req->r_t.pgid.seed,
+ 	     req->r_t.osd, req->r_flags, req->r_attempts);
+ 
+ 	req->r_t.paused = false;
+ 	req->r_stamp = jiffies;
+ 	req->r_attempts++;
+ 
+ 	req->r_sent = osd->o_incarnation;
+ 	req->r_request->hdr.tid = cpu_to_le64(req->r_tid);
+ 	ceph_con_send(&osd->o_con, ceph_msg_get(req->r_request));
+ }
+ 
+ static void maybe_request_map(struct ceph_osd_client *osdc)
+ {
+ 	bool continuous = false;
+ 
+ 	verify_osdc_locked(osdc);
+ 	WARN_ON(!osdc->osdmap->epoch);
+ 
+ 	if (ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
+ 	    ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD) ||
+ 	    ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR)) {
+ 		dout("%s osdc %p continuous\n", __func__, osdc);
+ 		continuous = true;
+ 	} else {
+ 		dout("%s osdc %p onetime\n", __func__, osdc);
+ 	}
+ 
+ 	if (ceph_monc_want_map(&osdc->client->monc, CEPH_SUB_OSDMAP,
+ 			       osdc->osdmap->epoch + 1, continuous))
+ 		ceph_monc_renew_subs(&osdc->client->monc);
+ }
+ 
+ static void send_map_check(struct ceph_osd_request *req);
+ 
+ static void __submit_request(struct ceph_osd_request *req, bool wrlocked)
+ {
+ 	struct ceph_osd_client *osdc = req->r_osdc;
+ 	struct ceph_osd *osd;
+ 	enum calc_target_result ct_res;
+ 	bool need_send = false;
+ 	bool promoted = false;
+ 
+ 	WARN_ON(req->r_tid || req->r_got_reply);
+ 	dout("%s req %p wrlocked %d\n", __func__, req, wrlocked);
+ 
+ again:
+ 	ct_res = calc_target(osdc, &req->r_t, &req->r_last_force_resend, false);
+ 	if (ct_res == CALC_TARGET_POOL_DNE && !wrlocked)
+ 		goto promote;
+ 
+ 	osd = lookup_create_osd(osdc, req->r_t.osd, wrlocked);
+ 	if (IS_ERR(osd)) {
+ 		WARN_ON(PTR_ERR(osd) != -EAGAIN || wrlocked);
+ 		goto promote;
+ 	}
+ 
+ 	if ((req->r_flags & CEPH_OSD_FLAG_WRITE) &&
+ 	    ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR)) {
+ 		dout("req %p pausewr\n", req);
+ 		req->r_t.paused = true;
+ 		maybe_request_map(osdc);
+ 	} else if ((req->r_flags & CEPH_OSD_FLAG_READ) &&
+ 		   ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD)) {
+ 		dout("req %p pauserd\n", req);
+ 		req->r_t.paused = true;
+ 		maybe_request_map(osdc);
+ 	} else if ((req->r_flags & CEPH_OSD_FLAG_WRITE) &&
+ 		   !(req->r_flags & (CEPH_OSD_FLAG_FULL_TRY |
+ 				     CEPH_OSD_FLAG_FULL_FORCE)) &&
+ 		   (ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
+ 		    pool_full(osdc, req->r_t.base_oloc.pool))) {
+ 		dout("req %p full/pool_full\n", req);
+ 		pr_warn_ratelimited("FULL or reached pool quota\n");
+ 		req->r_t.paused = true;
+ 		maybe_request_map(osdc);
+ 	} else if (!osd_homeless(osd)) {
+ 		need_send = true;
+ 	} else {
+ 		maybe_request_map(osdc);
+ 	}
+ 
+ 	mutex_lock(&osd->lock);
+ 	/*
+ 	 * Assign the tid atomically with send_request() to protect
+ 	 * multiple writes to the same object from racing with each
+ 	 * other, resulting in out of order ops on the OSDs.
+ 	 */
+ 	req->r_tid = atomic64_inc_return(&osdc->last_tid);
+ 	link_request(osd, req);
+ 	if (need_send)
+ 		send_request(req);
+ 	mutex_unlock(&osd->lock);
+ 
+ 	if (ct_res == CALC_TARGET_POOL_DNE)
+ 		send_map_check(req);
+ 
+ 	if (promoted)
+ 		downgrade_write(&osdc->lock);
+ 	return;
+ 
+ promote:
+ 	up_read(&osdc->lock);
+ 	down_write(&osdc->lock);
+ 	wrlocked = true;
+ 	promoted = true;
+ 	goto again;
+ }
+ 
+ static void account_request(struct ceph_osd_request *req)
+ {
+ 	unsigned int mask = CEPH_OSD_FLAG_ACK | CEPH_OSD_FLAG_ONDISK;
+ 
+ 	if (req->r_flags & CEPH_OSD_FLAG_READ) {
+ 		WARN_ON(req->r_flags & mask);
+ 		req->r_flags |= CEPH_OSD_FLAG_ACK;
+ 	} else if (req->r_flags & CEPH_OSD_FLAG_WRITE)
+ 		WARN_ON(!(req->r_flags & mask));
+ 	else
+ 		WARN_ON(1);
+ 
+ 	WARN_ON(req->r_unsafe_callback && (req->r_flags & mask) != mask);
+ 	atomic_inc(&req->r_osdc->num_requests);
+ }
+ 
+ static void submit_request(struct ceph_osd_request *req, bool wrlocked)
+ {
+ 	ceph_osdc_get_request(req);
+ 	account_request(req);
+ 	__submit_request(req, wrlocked);
+ }
+ 
+ static void __finish_request(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_client *osdc = req->r_osdc;
+ 	struct ceph_osd *osd = req->r_osd;
+ 
+ 	verify_osd_locked(osd);
+ 	dout("%s req %p tid %llu\n", __func__, req, req->r_tid);
+ 
+ 	WARN_ON(lookup_request_mc(&osdc->map_checks, req->r_tid));
+ 	unlink_request(osd, req);
+ 	atomic_dec(&osdc->num_requests);
+ 
+ 	/*
+ 	 * If an OSD has failed or returned and a request has been sent
+ 	 * twice, it's possible to get a reply and end up here while the
+ 	 * request message is queued for delivery.  We will ignore the
+ 	 * reply, so not a big deal, but better to try and catch it.
+ 	 */
+ 	ceph_msg_revoke(req->r_request);
+ 	ceph_msg_revoke_incoming(req->r_reply);
+ }
+ 
+ static void finish_request(struct ceph_osd_request *req)
+ {
+ 	__finish_request(req);
+ 	ceph_osdc_put_request(req);
+ }
+ 
+ static void __complete_request(struct ceph_osd_request *req)
+ {
+ 	if (req->r_callback)
+ 		req->r_callback(req);
+ 	else
+ 		complete_all(&req->r_completion);
+ }
+ 
+ /*
+  * Note that this is open-coded in handle_reply(), which has to deal
+  * with ack vs commit, dup acks, etc.
+  */
+ static void complete_request(struct ceph_osd_request *req, int err)
+ {
+ 	dout("%s req %p tid %llu err %d\n", __func__, req, req->r_tid, err);
+ 
+ 	req->r_result = err;
+ 	__finish_request(req);
+ 	__complete_request(req);
+ 	complete_all(&req->r_safe_completion);
+ 	ceph_osdc_put_request(req);
+ }
+ 
+ static void cancel_map_check(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_client *osdc = req->r_osdc;
+ 	struct ceph_osd_request *lookup_req;
+ 
+ 	verify_osdc_wrlocked(osdc);
+ 
+ 	lookup_req = lookup_request_mc(&osdc->map_checks, req->r_tid);
+ 	if (!lookup_req)
+ 		return;
+ 
+ 	WARN_ON(lookup_req != req);
+ 	erase_request_mc(&osdc->map_checks, req);
+ 	ceph_osdc_put_request(req);
+ }
+ 
+ static void cancel_request(struct ceph_osd_request *req)
+ {
+ 	dout("%s req %p tid %llu\n", __func__, req, req->r_tid);
+ 
+ 	cancel_map_check(req);
+ 	finish_request(req);
+ }
+ 
+ static void check_pool_dne(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_client *osdc = req->r_osdc;
+ 	struct ceph_osdmap *map = osdc->osdmap;
+ 
+ 	verify_osdc_wrlocked(osdc);
+ 	WARN_ON(!map->epoch);
+ 
+ 	if (req->r_attempts) {
+ 		/*
+ 		 * We sent a request earlier, which means that
+ 		 * previously the pool existed, and now it does not
+ 		 * (i.e., it was deleted).
+ 		 */
+ 		req->r_map_dne_bound = map->epoch;
+ 		dout("%s req %p tid %llu pool disappeared\n", __func__, req,
+ 		     req->r_tid);
+ 	} else {
+ 		dout("%s req %p tid %llu map_dne_bound %u have %u\n", __func__,
+ 		     req, req->r_tid, req->r_map_dne_bound, map->epoch);
+ 	}
+ 
+ 	if (req->r_map_dne_bound) {
+ 		if (map->epoch >= req->r_map_dne_bound) {
+ 			/* we had a new enough map */
+ 			pr_info_ratelimited("tid %llu pool does not exist\n",
+ 					    req->r_tid);
+ 			complete_request(req, -ENOENT);
+ 		}
+ 	} else {
+ 		send_map_check(req);
+ 	}
+ }
+ 
+ static void map_check_cb(struct ceph_mon_generic_request *greq)
+ {
+ 	struct ceph_osd_client *osdc = &greq->monc->client->osdc;
+ 	struct ceph_osd_request *req;
+ 	u64 tid = greq->private_data;
+ 
+ 	WARN_ON(greq->result || !greq->u.newest);
+ 
+ 	down_write(&osdc->lock);
+ 	req = lookup_request_mc(&osdc->map_checks, tid);
+ 	if (!req) {
+ 		dout("%s tid %llu dne\n", __func__, tid);
+ 		goto out_unlock;
+ 	}
+ 
+ 	dout("%s req %p tid %llu map_dne_bound %u newest %llu\n", __func__,
+ 	     req, req->r_tid, req->r_map_dne_bound, greq->u.newest);
+ 	if (!req->r_map_dne_bound)
+ 		req->r_map_dne_bound = greq->u.newest;
+ 	erase_request_mc(&osdc->map_checks, req);
+ 	check_pool_dne(req);
+ 
+ 	ceph_osdc_put_request(req);
+ out_unlock:
+ 	up_write(&osdc->lock);
+ }
+ 
+ static void send_map_check(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_client *osdc = req->r_osdc;
+ 	struct ceph_osd_request *lookup_req;
+ 	int ret;
+ 
+ 	verify_osdc_wrlocked(osdc);
+ 
+ 	lookup_req = lookup_request_mc(&osdc->map_checks, req->r_tid);
+ 	if (lookup_req) {
+ 		WARN_ON(lookup_req != req);
+ 		return;
+ 	}
+ 
+ 	ceph_osdc_get_request(req);
+ 	insert_request_mc(&osdc->map_checks, req);
+ 	ret = ceph_monc_get_version_async(&osdc->client->monc, "osdmap",
+ 					  map_check_cb, req->r_tid);
+ 	WARN_ON(ret);
+ }
+ 
+ /*
+  * lingering requests, watch/notify v2 infrastructure
+  */
+ static void linger_release(struct kref *kref)
+ {
+ 	struct ceph_osd_linger_request *lreq =
+ 	    container_of(kref, struct ceph_osd_linger_request, kref);
+ 
+ 	dout("%s lreq %p reg_req %p ping_req %p\n", __func__, lreq,
+ 	     lreq->reg_req, lreq->ping_req);
+ 	WARN_ON(!RB_EMPTY_NODE(&lreq->node));
+ 	WARN_ON(!RB_EMPTY_NODE(&lreq->osdc_node));
+ 	WARN_ON(!RB_EMPTY_NODE(&lreq->mc_node));
+ 	WARN_ON(!list_empty(&lreq->scan_item));
+ 	WARN_ON(!list_empty(&lreq->pending_lworks));
+ 	WARN_ON(lreq->osd);
+ 
+ 	if (lreq->reg_req)
+ 		ceph_osdc_put_request(lreq->reg_req);
+ 	if (lreq->ping_req)
+ 		ceph_osdc_put_request(lreq->ping_req);
+ 	target_destroy(&lreq->t);
+ 	kfree(lreq);
+ }
+ 
+ static void linger_put(struct ceph_osd_linger_request *lreq)
+ {
+ 	if (lreq)
+ 		kref_put(&lreq->kref, linger_release);
+ }
+ 
+ static struct ceph_osd_linger_request *
+ linger_get(struct ceph_osd_linger_request *lreq)
+ {
+ 	kref_get(&lreq->kref);
+ 	return lreq;
+ }
+ 
+ static struct ceph_osd_linger_request *
+ linger_alloc(struct ceph_osd_client *osdc)
+ {
+ 	struct ceph_osd_linger_request *lreq;
+ 
+ 	lreq = kzalloc(sizeof(*lreq), GFP_NOIO);
+ 	if (!lreq)
+ 		return NULL;
+ 
+ 	kref_init(&lreq->kref);
+ 	mutex_init(&lreq->lock);
+ 	RB_CLEAR_NODE(&lreq->node);
+ 	RB_CLEAR_NODE(&lreq->osdc_node);
+ 	RB_CLEAR_NODE(&lreq->mc_node);
+ 	INIT_LIST_HEAD(&lreq->scan_item);
+ 	INIT_LIST_HEAD(&lreq->pending_lworks);
+ 	init_completion(&lreq->reg_commit_wait);
+ 	init_completion(&lreq->notify_finish_wait);
+ 
+ 	lreq->osdc = osdc;
+ 	target_init(&lreq->t);
+ 
+ 	dout("%s lreq %p\n", __func__, lreq);
+ 	return lreq;
+ }
+ 
+ DEFINE_RB_INSDEL_FUNCS(linger, struct ceph_osd_linger_request, linger_id, node)
+ DEFINE_RB_FUNCS(linger_osdc, struct ceph_osd_linger_request, linger_id, osdc_node)
+ DEFINE_RB_FUNCS(linger_mc, struct ceph_osd_linger_request, linger_id, mc_node)
+ 
+ /*
+  * Create linger request <-> OSD session relation.
+  *
+  * @lreq has to be registered, @osd may be homeless.
+  */
+ static void link_linger(struct ceph_osd *osd,
+ 			struct ceph_osd_linger_request *lreq)
+ {
+ 	verify_osd_locked(osd);
+ 	WARN_ON(!lreq->linger_id || lreq->osd);
+ 	dout("%s osd %p osd%d lreq %p linger_id %llu\n", __func__, osd,
+ 	     osd->o_osd, lreq, lreq->linger_id);
+ 
+ 	if (!osd_homeless(osd))
+ 		__remove_osd_from_lru(osd);
+ 	else
+ 		atomic_inc(&osd->o_osdc->num_homeless);
+ 
+ 	get_osd(osd);
+ 	insert_linger(&osd->o_linger_requests, lreq);
+ 	lreq->osd = osd;
+ }
+ 
+ static void unlink_linger(struct ceph_osd *osd,
+ 			  struct ceph_osd_linger_request *lreq)
+ {
+ 	verify_osd_locked(osd);
+ 	WARN_ON(lreq->osd != osd);
+ 	dout("%s osd %p osd%d lreq %p linger_id %llu\n", __func__, osd,
+ 	     osd->o_osd, lreq, lreq->linger_id);
+ 
+ 	lreq->osd = NULL;
+ 	erase_linger(&osd->o_linger_requests, lreq);
+ 	put_osd(osd);
+ 
+ 	if (!osd_homeless(osd))
+ 		maybe_move_osd_to_lru(osd);
+ 	else
+ 		atomic_dec(&osd->o_osdc->num_homeless);
+ }
+ 
+ static bool __linger_registered(struct ceph_osd_linger_request *lreq)
+ {
+ 	verify_osdc_locked(lreq->osdc);
+ 
+ 	return !RB_EMPTY_NODE(&lreq->osdc_node);
+ }
+ 
+ static bool linger_registered(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 	bool registered;
+ 
+ 	down_read(&osdc->lock);
+ 	registered = __linger_registered(lreq);
+ 	up_read(&osdc->lock);
+ 
+ 	return registered;
+ }
+ 
+ static void linger_register(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 
+ 	verify_osdc_wrlocked(osdc);
+ 	WARN_ON(lreq->linger_id);
+ 
+ 	linger_get(lreq);
+ 	lreq->linger_id = ++osdc->last_linger_id;
+ 	insert_linger_osdc(&osdc->linger_requests, lreq);
+ }
+ 
+ static void linger_unregister(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 
+ 	verify_osdc_wrlocked(osdc);
+ 
+ 	erase_linger_osdc(&osdc->linger_requests, lreq);
+ 	linger_put(lreq);
+ }
+ 
+ static void cancel_linger_request(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_linger_request *lreq = req->r_priv;
+ 
+ 	WARN_ON(!req->r_linger);
+ 	cancel_request(req);
+ 	linger_put(lreq);
+ }
+ 
+ struct linger_work {
+ 	struct work_struct work;
+ 	struct ceph_osd_linger_request *lreq;
+ 	struct list_head pending_item;
+ 	unsigned long queued_stamp;
+ 
+ 	union {
+ 		struct {
+ 			u64 notify_id;
+ 			u64 notifier_id;
+ 			void *payload; /* points into @msg front */
+ 			size_t payload_len;
+ 
+ 			struct ceph_msg *msg; /* for ceph_msg_put() */
+ 		} notify;
+ 		struct {
+ 			int err;
+ 		} error;
+ 	};
+ };
+ 
+ static struct linger_work *lwork_alloc(struct ceph_osd_linger_request *lreq,
+ 				       work_func_t workfn)
+ {
+ 	struct linger_work *lwork;
+ 
+ 	lwork = kzalloc(sizeof(*lwork), GFP_NOIO);
+ 	if (!lwork)
+ 		return NULL;
+ 
+ 	INIT_WORK(&lwork->work, workfn);
+ 	INIT_LIST_HEAD(&lwork->pending_item);
+ 	lwork->lreq = linger_get(lreq);
+ 
+ 	return lwork;
+ }
+ 
+ static void lwork_free(struct linger_work *lwork)
+ {
+ 	struct ceph_osd_linger_request *lreq = lwork->lreq;
+ 
+ 	mutex_lock(&lreq->lock);
+ 	list_del(&lwork->pending_item);
+ 	mutex_unlock(&lreq->lock);
+ 
+ 	linger_put(lreq);
+ 	kfree(lwork);
+ }
+ 
+ static void lwork_queue(struct linger_work *lwork)
+ {
+ 	struct ceph_osd_linger_request *lreq = lwork->lreq;
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 
+ 	verify_lreq_locked(lreq);
+ 	WARN_ON(!list_empty(&lwork->pending_item));
+ 
+ 	lwork->queued_stamp = jiffies;
+ 	list_add_tail(&lwork->pending_item, &lreq->pending_lworks);
+ 	queue_work(osdc->notify_wq, &lwork->work);
+ }
+ 
+ static void do_watch_notify(struct work_struct *w)
+ {
+ 	struct linger_work *lwork = container_of(w, struct linger_work, work);
+ 	struct ceph_osd_linger_request *lreq = lwork->lreq;
+ 
+ 	if (!linger_registered(lreq)) {
+ 		dout("%s lreq %p not registered\n", __func__, lreq);
+ 		goto out;
+ 	}
+ 
+ 	WARN_ON(!lreq->is_watch);
+ 	dout("%s lreq %p notify_id %llu notifier_id %llu payload_len %zu\n",
+ 	     __func__, lreq, lwork->notify.notify_id, lwork->notify.notifier_id,
+ 	     lwork->notify.payload_len);
+ 	lreq->wcb(lreq->data, lwork->notify.notify_id, lreq->linger_id,
+ 		  lwork->notify.notifier_id, lwork->notify.payload,
+ 		  lwork->notify.payload_len);
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  
  out:
 -	ceph_msg_put(lwork->notify.msg);
 -	lwork_free(lwork);
 -}
 -
 -static void do_watch_error(struct work_struct *w)
 -{
 -	struct linger_work *lwork = container_of(w, struct linger_work, work);
 -	struct ceph_osd_linger_request *lreq = lwork->lreq;
 -
 -	if (!linger_registered(lreq)) {
 -		dout("%s lreq %p not registered\n", __func__, lreq);
 -		goto out;
 -	}
 -
 -	dout("%s lreq %p err %d\n", __func__, lreq, lwork->error.err);
 -	lreq->errcb(lreq->data, lreq->linger_id, lwork->error.err);
 -
 -out:
 -	lwork_free(lwork);
 -}
 -
 -static void queue_watch_error(struct ceph_osd_linger_request *lreq)
 -{
 -	struct linger_work *lwork;
 -
 -	lwork = lwork_alloc(lreq, do_watch_error);
 -	if (!lwork) {
 -		pr_err("failed to allocate error-lwork\n");
 -		return;
 -	}
 -
 -	lwork->error.err = lreq->last_error;
 -	lwork_queue(lwork);
 -}
 -
 -static void linger_reg_commit_complete(struct ceph_osd_linger_request *lreq,
 -				       int result)
 -{
 -	if (!completion_done(&lreq->reg_commit_wait)) {
 -		lreq->reg_commit_error = (result <= 0 ? result : 0);
 -		complete_all(&lreq->reg_commit_wait);
 -	}
 -}
 -
 -static void linger_commit_cb(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_linger_request *lreq = req->r_priv;
 -
 -	mutex_lock(&lreq->lock);
 -	dout("%s lreq %p linger_id %llu result %d\n", __func__, lreq,
 -	     lreq->linger_id, req->r_result);
 -	WARN_ON(!__linger_registered(lreq));
 -	linger_reg_commit_complete(lreq, req->r_result);
 -	lreq->committed = true;
 -
 -	if (!lreq->is_watch) {
 -		struct ceph_osd_data *osd_data =
 -		    osd_req_op_data(req, 0, notify, response_data);
 -		void *p = page_address(osd_data->pages[0]);
 -
 -		WARN_ON(req->r_ops[0].op != CEPH_OSD_OP_NOTIFY ||
 -			osd_data->type != CEPH_OSD_DATA_TYPE_PAGES);
 -
 -		/* make note of the notify_id */
 -		if (req->r_ops[0].outdata_len >= sizeof(u64)) {
 -			lreq->notify_id = ceph_decode_64(&p);
 -			dout("lreq %p notify_id %llu\n", lreq,
 -			     lreq->notify_id);
 -		} else {
 -			dout("lreq %p no notify_id\n", lreq);
 -		}
 -	}
 -
 -	mutex_unlock(&lreq->lock);
 -	linger_put(lreq);
 -}
 -
 -static int normalize_watch_error(int err)
 -{
 -	/*
 -	 * Translate ENOENT -> ENOTCONN so that a delete->disconnection
 -	 * notification and a failure to reconnect because we raced with
 -	 * the delete appear the same to the user.
 -	 */
 -	if (err == -ENOENT)
 -		err = -ENOTCONN;
 -
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static void linger_reconnect_cb(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_linger_request *lreq = req->r_priv;
+ 
+ 	mutex_lock(&lreq->lock);
+ 	dout("%s lreq %p linger_id %llu result %d last_error %d\n", __func__,
+ 	     lreq, lreq->linger_id, req->r_result, lreq->last_error);
+ 	if (req->r_result < 0) {
+ 		if (!lreq->last_error) {
+ 			lreq->last_error = normalize_watch_error(req->r_result);
+ 			queue_watch_error(lreq);
+ 		}
+ 	}
+ 
+ 	mutex_unlock(&lreq->lock);
+ 	linger_put(lreq);
+ }
+ 
+ static void send_linger(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_request *req = lreq->reg_req;
+ 	struct ceph_osd_req_op *op = &req->r_ops[0];
+ 
+ 	verify_osdc_wrlocked(req->r_osdc);
+ 	dout("%s lreq %p linger_id %llu\n", __func__, lreq, lreq->linger_id);
+ 
+ 	if (req->r_osd)
+ 		cancel_linger_request(req);
+ 
+ 	request_reinit(req);
+ 	ceph_oid_copy(&req->r_base_oid, &lreq->t.base_oid);
+ 	ceph_oloc_copy(&req->r_base_oloc, &lreq->t.base_oloc);
+ 	req->r_flags = lreq->t.flags;
+ 	req->r_mtime = lreq->mtime;
+ 
+ 	mutex_lock(&lreq->lock);
+ 	if (lreq->is_watch && lreq->committed) {
+ 		WARN_ON(op->op != CEPH_OSD_OP_WATCH ||
+ 			op->watch.cookie != lreq->linger_id);
+ 		op->watch.op = CEPH_OSD_WATCH_OP_RECONNECT;
+ 		op->watch.gen = ++lreq->register_gen;
+ 		dout("lreq %p reconnect register_gen %u\n", lreq,
+ 		     op->watch.gen);
+ 		req->r_callback = linger_reconnect_cb;
+ 	} else {
+ 		if (!lreq->is_watch)
+ 			lreq->notify_id = 0;
+ 		else
+ 			WARN_ON(op->watch.op != CEPH_OSD_WATCH_OP_WATCH);
+ 		dout("lreq %p register\n", lreq);
+ 		req->r_callback = linger_commit_cb;
+ 	}
+ 	mutex_unlock(&lreq->lock);
+ 
+ 	req->r_priv = linger_get(lreq);
+ 	req->r_linger = true;
+ 
+ 	submit_request(req, true);
+ }
+ 
+ static void linger_ping_cb(struct ceph_osd_request *req)
+ {
+ 	struct ceph_osd_linger_request *lreq = req->r_priv;
+ 
+ 	mutex_lock(&lreq->lock);
+ 	dout("%s lreq %p linger_id %llu result %d ping_sent %lu last_error %d\n",
+ 	     __func__, lreq, lreq->linger_id, req->r_result, lreq->ping_sent,
+ 	     lreq->last_error);
+ 	if (lreq->register_gen == req->r_ops[0].watch.gen) {
+ 		if (!req->r_result) {
+ 			lreq->watch_valid_thru = lreq->ping_sent;
+ 		} else if (!lreq->last_error) {
+ 			lreq->last_error = normalize_watch_error(req->r_result);
+ 			queue_watch_error(lreq);
+ 		}
+ 	} else {
+ 		dout("lreq %p register_gen %u ignoring old pong %u\n", lreq,
+ 		     lreq->register_gen, req->r_ops[0].watch.gen);
+ 	}
+ 
+ 	mutex_unlock(&lreq->lock);
+ 	linger_put(lreq);
+ }
+ 
+ static void send_linger_ping(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 	struct ceph_osd_request *req = lreq->ping_req;
+ 	struct ceph_osd_req_op *op = &req->r_ops[0];
+ 
+ 	if (ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD)) {
+ 		dout("%s PAUSERD\n", __func__);
+ 		return;
+ 	}
+ 
+ 	lreq->ping_sent = jiffies;
+ 	dout("%s lreq %p linger_id %llu ping_sent %lu register_gen %u\n",
+ 	     __func__, lreq, lreq->linger_id, lreq->ping_sent,
+ 	     lreq->register_gen);
+ 
+ 	if (req->r_osd)
+ 		cancel_linger_request(req);
+ 
+ 	request_reinit(req);
+ 	target_copy(&req->r_t, &lreq->t);
+ 
+ 	WARN_ON(op->op != CEPH_OSD_OP_WATCH ||
+ 		op->watch.cookie != lreq->linger_id ||
+ 		op->watch.op != CEPH_OSD_WATCH_OP_PING);
+ 	op->watch.gen = lreq->register_gen;
+ 	req->r_callback = linger_ping_cb;
+ 	req->r_priv = linger_get(lreq);
+ 	req->r_linger = true;
+ 
+ 	ceph_osdc_get_request(req);
+ 	account_request(req);
+ 	req->r_tid = atomic64_inc_return(&osdc->last_tid);
+ 	link_request(lreq->osd, req);
+ 	send_request(req);
+ }
+ 
+ static void linger_submit(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 	struct ceph_osd *osd;
+ 
+ 	calc_target(osdc, &lreq->t, &lreq->last_force_resend, false);
+ 	osd = lookup_create_osd(osdc, lreq->t.osd, true);
+ 	link_linger(osd, lreq);
+ 
+ 	send_linger(lreq);
+ }
+ 
+ static void cancel_linger_map_check(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_client *osdc = lreq->osdc;
+ 	struct ceph_osd_linger_request *lookup_lreq;
+ 
+ 	verify_osdc_wrlocked(osdc);
+ 
+ 	lookup_lreq = lookup_linger_mc(&osdc->linger_map_checks,
+ 				       lreq->linger_id);
+ 	if (!lookup_lreq)
+ 		return;
+ 
+ 	WARN_ON(lookup_lreq != lreq);
+ 	erase_linger_mc(&osdc->linger_map_checks, lreq);
+ 	linger_put(lreq);
+ }
+ 
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  /*
 - * @lreq has to be both registered and linked.
 + * caller should hold map_sem (for read) and request_mutex
   */
 -static void __linger_cancel(struct ceph_osd_linger_request *lreq)
 -{
 -	if (lreq->is_watch && lreq->ping_req->r_osd)
 -		cancel_linger_request(lreq->ping_req);
 -	if (lreq->reg_req->r_osd)
 -		cancel_linger_request(lreq->reg_req);
 -	cancel_linger_map_check(lreq);
 -	unlink_linger(lreq->osd, lreq);
 -	linger_unregister(lreq);
 -}
 -
 -static void linger_cancel(struct ceph_osd_linger_request *lreq)
 +static void __send_request(struct ceph_osd_client *osdc,
 +			   struct ceph_osd_request *req)
  {
 -	struct ceph_osd_client *osdc = lreq->osdc;
 +	void *p;
  
 -	down_write(&osdc->lock);
 -	if (__linger_registered(lreq))
 -		__linger_cancel(lreq);
 -	up_write(&osdc->lock);
 -}
 +	dout("send_request %p tid %llu to osd%d flags %d pg %lld.%x\n",
 +	     req, req->r_tid, req->r_osd->o_osd, req->r_flags,
 +	     (unsigned long long)req->r_pgid.pool, req->r_pgid.seed);
  
 -static void send_linger_map_check(struct ceph_osd_linger_request *lreq);
 +	/* fill in message content that changes each time we send it */
 +	put_unaligned_le32(osdc->osdmap->epoch, req->r_request_osdmap_epoch);
 +	put_unaligned_le32(req->r_flags, req->r_request_flags);
 +	put_unaligned_le64(req->r_target_oloc.pool, req->r_request_pool);
 +	p = req->r_request_pgid;
 +	ceph_encode_64(&p, req->r_pgid.pool);
 +	ceph_encode_32(&p, req->r_pgid.seed);
 +	put_unaligned_le64(1, req->r_request_attempts);  /* FIXME */
 +	memcpy(req->r_request_reassert_version, &req->r_reassert_version,
 +	       sizeof(req->r_reassert_version));
  
 -static void check_linger_pool_dne(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -	struct ceph_osdmap *map = osdc->osdmap;
 +	req->r_stamp = jiffies;
 +	list_move_tail(&req->r_req_lru_item, &osdc->req_lru);
  
 -	verify_osdc_wrlocked(osdc);
 -	WARN_ON(!map->epoch);
 +	ceph_msg_get(req->r_request); /* send consumes a ref */
  
 -	if (lreq->register_gen) {
 -		lreq->map_dne_bound = map->epoch;
 -		dout("%s lreq %p linger_id %llu pool disappeared\n", __func__,
 -		     lreq, lreq->linger_id);
 -	} else {
 -		dout("%s lreq %p linger_id %llu map_dne_bound %u have %u\n",
 -		     __func__, lreq, lreq->linger_id, lreq->map_dne_bound,
 -		     map->epoch);
 -	}
 +	req->r_sent = req->r_osd->o_incarnation;
  
 -	if (lreq->map_dne_bound) {
 -		if (map->epoch >= lreq->map_dne_bound) {
 -			/* we had a new enough map */
 -			pr_info("linger_id %llu pool does not exist\n",
 -				lreq->linger_id);
 -			linger_reg_commit_complete(lreq, -ENOENT);
 -			__linger_cancel(lreq);
 -		}
 -	} else {
 -		send_linger_map_check(lreq);
 -	}
 +	ceph_con_send(&req->r_osd->o_con, req->r_request);
  }
  
 -static void linger_map_check_cb(struct ceph_mon_generic_request *greq)
 +/*
 + * Send any requests in the queue (req_unsent).
 + */
 +static void __send_queued(struct ceph_osd_client *osdc)
  {
 -	struct ceph_osd_client *osdc = &greq->monc->client->osdc;
 -	struct ceph_osd_linger_request *lreq;
 -	u64 linger_id = greq->private_data;
 -
 -	WARN_ON(greq->result || !greq->u.newest);
 +	struct ceph_osd_request *req, *tmp;
  
 -	down_write(&osdc->lock);
 -	lreq = lookup_linger_mc(&osdc->linger_map_checks, linger_id);
 -	if (!lreq) {
 -		dout("%s linger_id %llu dne\n", __func__, linger_id);
 -		goto out_unlock;
 -	}
 -
 -	dout("%s lreq %p linger_id %llu map_dne_bound %u newest %llu\n",
 -	     __func__, lreq, lreq->linger_id, lreq->map_dne_bound,
 -	     greq->u.newest);
 -	if (!lreq->map_dne_bound)
 -		lreq->map_dne_bound = greq->u.newest;
 -	erase_linger_mc(&osdc->linger_map_checks, lreq);
 -	check_linger_pool_dne(lreq);
 -
 -	linger_put(lreq);
 -out_unlock:
 -	up_write(&osdc->lock);
 +	dout("__send_queued\n");
 +	list_for_each_entry_safe(req, tmp, &osdc->req_unsent, r_req_lru_item)
 +		__send_request(osdc, req);
  }
  
 -static void send_linger_map_check(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -	struct ceph_osd_linger_request *lookup_lreq;
 -	int ret;
 -
 -	verify_osdc_wrlocked(osdc);
 -
 -	lookup_lreq = lookup_linger_mc(&osdc->linger_map_checks,
 -				       lreq->linger_id);
 -	if (lookup_lreq) {
 -		WARN_ON(lookup_lreq != lreq);
 -		return;
 +/*
 + * Caller should hold map_sem for read and request_mutex.
 + */
 +static int __ceph_osdc_start_request(struct ceph_osd_client *osdc,
 +				     struct ceph_osd_request *req,
 +				     bool nofail)
 +{
 +	int rc;
 +
 +	__register_request(osdc, req);
 +	req->r_sent = 0;
 +	req->r_got_reply = 0;
 +	rc = __map_request(osdc, req, 0);
 +	if (rc < 0) {
 +		if (nofail) {
 +			dout("osdc_start_request failed map, "
 +				" will retry %lld\n", req->r_tid);
 +			rc = 0;
 +		} else {
 +			__unregister_request(osdc, req);
 +		}
 +		return rc;
  	}
  
 -	linger_get(lreq);
 -	insert_linger_mc(&osdc->linger_map_checks, lreq);
 -	ret = ceph_monc_get_version_async(&osdc->client->monc, "osdmap",
 -					  linger_map_check_cb, lreq->linger_id);
 -	WARN_ON(ret);
 -}
 -
 -static int linger_reg_commit_wait(struct ceph_osd_linger_request *lreq)
 -{
 -	int ret;
 -
 -	dout("%s lreq %p linger_id %llu\n", __func__, lreq, lreq->linger_id);
 -	ret = wait_for_completion_interruptible(&lreq->reg_commit_wait);
 -	return ret ?: lreq->reg_commit_error;
 -}
 -
 -static int linger_notify_finish_wait(struct ceph_osd_linger_request *lreq)
 -{
 -	int ret;
 +	if (req->r_osd == NULL) {
 +		dout("send_request %p no up osds in pg\n", req);
 +		ceph_monc_request_next_osdmap(&osdc->client->monc);
 +	} else {
 +		__send_queued(osdc);
 +	}
  
 -	dout("%s lreq %p linger_id %llu\n", __func__, lreq, lreq->linger_id);
 -	ret = wait_for_completion_interruptible(&lreq->notify_finish_wait);
 -	return ret ?: lreq->notify_finish_error;
 +	return 0;
  }
  
  /*
@@@ -1949,102 -2956,190 +2766,195 @@@ static void reset_changed_osds(struct c
  }
  
  /*
 - * Requeue requests whose mapping to an OSD has changed.
 + * Requeue requests whose mapping to an OSD has changed.  If requests map to
 + * no osd, request a new map.
 + *
 + * Caller should hold map_sem for read.
   */
 -static void scan_requests(struct ceph_osd *osd,
 -			  bool force_resend,
 -			  bool cleared_full,
 -			  bool check_pool_cleared_full,
 -			  struct rb_root *need_resend,
 -			  struct list_head *need_resend_linger)
 +static void kick_requests(struct ceph_osd_client *osdc, bool force_resend,
 +			  bool force_resend_writes)
  {
 -	struct ceph_osd_client *osdc = osd->o_osdc;
 -	struct rb_node *n;
 -	bool force_resend_writes;
 +	struct ceph_osd_request *req, *nreq;
 +	struct rb_node *p;
 +	int needmap = 0;
 +	int err;
 +	bool force_resend_req;
  
 -	for (n = rb_first(&osd->o_linger_requests); n; ) {
 -		struct ceph_osd_linger_request *lreq =
 -		    rb_entry(n, struct ceph_osd_linger_request, node);
 -		enum calc_target_result ct_res;
 +	dout("kick_requests %s %s\n", force_resend ? " (force resend)" : "",
 +		force_resend_writes ? " (force resend writes)" : "");
 +	mutex_lock(&osdc->request_mutex);
 +	for (p = rb_first(&osdc->requests); p; ) {
 +		req = rb_entry(p, struct ceph_osd_request, r_node);
 +		p = rb_next(p);
  
++<<<<<<< HEAD
++=======
+ 		n = rb_next(n); /* recalc_linger_target() */
+ 
+ 		dout("%s lreq %p linger_id %llu\n", __func__, lreq,
+ 		     lreq->linger_id);
+ 		ct_res = recalc_linger_target(lreq);
+ 		switch (ct_res) {
+ 		case CALC_TARGET_NO_ACTION:
+ 			force_resend_writes = cleared_full ||
+ 			    (check_pool_cleared_full &&
+ 			     pool_cleared_full(osdc, lreq->t.base_oloc.pool));
+ 			if (!force_resend && !force_resend_writes)
+ 				break;
+ 
+ 			/* fall through */
+ 		case CALC_TARGET_NEED_RESEND:
+ 			cancel_linger_map_check(lreq);
+ 			/*
+ 			 * scan_requests() for the previous epoch(s)
+ 			 * may have already added it to the list, since
+ 			 * it's not unlinked here.
+ 			 */
+ 			if (list_empty(&lreq->scan_item))
+ 				list_add_tail(&lreq->scan_item, need_resend_linger);
+ 			break;
+ 		case CALC_TARGET_POOL_DNE:
+ 			check_linger_pool_dne(lreq);
+ 			break;
+ 		}
+ 	}
+ 
+ 	for (n = rb_first(&osd->o_requests); n; ) {
+ 		struct ceph_osd_request *req =
+ 		    rb_entry(n, struct ceph_osd_request, r_node);
+ 		enum calc_target_result ct_res;
+ 
+ 		n = rb_next(n); /* unlink_request(), check_pool_dne() */
+ 
+ 		dout("%s req %p tid %llu\n", __func__, req, req->r_tid);
+ 		ct_res = calc_target(osdc, &req->r_t,
+ 				     &req->r_last_force_resend, false);
+ 		switch (ct_res) {
+ 		case CALC_TARGET_NO_ACTION:
+ 			force_resend_writes = cleared_full ||
+ 			    (check_pool_cleared_full &&
+ 			     pool_cleared_full(osdc, req->r_t.base_oloc.pool));
+ 			if (!force_resend &&
+ 			    (!(req->r_flags & CEPH_OSD_FLAG_WRITE) ||
+ 			     !force_resend_writes))
+ 				break;
+ 
+ 			/* fall through */
+ 		case CALC_TARGET_NEED_RESEND:
+ 			cancel_map_check(req);
+ 			unlink_request(osd, req);
+ 			insert_request(need_resend, req);
+ 			break;
+ 		case CALC_TARGET_POOL_DNE:
+ 			check_pool_dne(req);
+ 			break;
+ 		}
+ 	}
+ }
+ 
+ static int handle_one_map(struct ceph_osd_client *osdc,
+ 			  void *p, void *end, bool incremental,
+ 			  struct rb_root *need_resend,
+ 			  struct list_head *need_resend_linger)
+ {
+ 	struct ceph_osdmap *newmap;
+ 	struct rb_node *n;
+ 	bool skipped_map = false;
+ 	bool was_full;
+ 
+ 	was_full = ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL);
+ 	set_pool_was_full(osdc);
+ 
+ 	if (incremental)
+ 		newmap = osdmap_apply_incremental(&p, end, osdc->osdmap);
+ 	else
+ 		newmap = ceph_osdmap_decode(&p, end);
+ 	if (IS_ERR(newmap))
+ 		return PTR_ERR(newmap);
+ 
+ 	if (newmap != osdc->osdmap) {
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  		/*
 -		 * Preserve ->was_full before destroying the old map.
 -		 * For pools that weren't in the old map, ->was_full
 -		 * should be false.
 +		 * For linger requests that have not yet been
 +		 * registered, move them to the linger list; they'll
 +		 * be sent to the osd in the loop below.  Unregister
 +		 * the request before re-registering it as a linger
 +		 * request to ensure the __map_request() below
 +		 * will decide it needs to be sent.
  		 */
 -		for (n = rb_first(&newmap->pg_pools); n; n = rb_next(n)) {
 -			struct ceph_pg_pool_info *pi =
 -			    rb_entry(n, struct ceph_pg_pool_info, node);
 -			struct ceph_pg_pool_info *old_pi;
 -
 -			old_pi = ceph_pg_pool_by_id(osdc->osdmap, pi->id);
 -			if (old_pi)
 -				pi->was_full = old_pi->was_full;
 -			else
 -				WARN_ON(pi->was_full);
 +		if (req->r_linger && list_empty(&req->r_linger_item)) {
 +			dout("%p tid %llu restart on osd%d\n",
 +			     req, req->r_tid,
 +			     req->r_osd ? req->r_osd->o_osd : -1);
 +			ceph_osdc_get_request(req);
 +			__unregister_request(osdc, req);
 +			__register_linger_request(osdc, req);
 +			ceph_osdc_put_request(req);
 +			continue;
  		}
  
 -		if (osdc->osdmap->epoch &&
 -		    osdc->osdmap->epoch + 1 < newmap->epoch) {
 -			WARN_ON(incremental);
 -			skipped_map = true;
 +		force_resend_req = force_resend ||
 +			(force_resend_writes &&
 +				req->r_flags & CEPH_OSD_FLAG_WRITE);
 +		err = __map_request(osdc, req, force_resend_req);
 +		if (err < 0)
 +			continue;  /* error */
 +		if (req->r_osd == NULL) {
 +			dout("%p tid %llu maps to no osd\n", req, req->r_tid);
 +			needmap++;  /* request a newer map */
 +		} else if (err > 0) {
 +			if (!req->r_linger) {
 +				dout("%p tid %llu requeued on osd%d\n", req,
 +				     req->r_tid,
 +				     req->r_osd ? req->r_osd->o_osd : -1);
 +				req->r_flags |= CEPH_OSD_FLAG_RETRY;
 +			}
  		}
 -
 -		ceph_osdmap_destroy(osdc->osdmap);
 -		osdc->osdmap = newmap;
  	}
  
++<<<<<<< HEAD
 +	list_for_each_entry_safe(req, nreq, &osdc->req_linger,
 +				 r_linger_item) {
 +		dout("linger req=%p req->r_osd=%p\n", req, req->r_osd);
++=======
+ 	was_full &= !ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL);
+ 	scan_requests(&osdc->homeless_osd, skipped_map, was_full, true,
+ 		      need_resend, need_resend_linger);
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
 +
 +		err = __map_request(osdc, req,
 +				    force_resend || force_resend_writes);
 +		dout("__map_request returned %d\n", err);
 +		if (err < 0)
 +			continue;  /* hrm! */
 +		if (req->r_osd == NULL || err > 0) {
 +			if (req->r_osd == NULL) {
 +				dout("lingering %p tid %llu maps to no osd\n",
 +				     req, req->r_tid);
 +				/*
 +				 * A homeless lingering request makes
 +				 * no sense, as it's job is to keep
 +				 * a particular OSD connection open.
 +				 * Request a newer map and kick the
 +				 * request, knowing that it won't be
 +				 * resent until we actually get a map
 +				 * that can tell us where to send it.
 +				 */
 +				needmap++;
 +			}
  
 -	for (n = rb_first(&osdc->osds); n; ) {
 -		struct ceph_osd *osd = rb_entry(n, struct ceph_osd, o_node);
 -
 -		n = rb_next(n); /* close_osd() */
 -
 -		scan_requests(osd, skipped_map, was_full, true, need_resend,
 -			      need_resend_linger);
 -		if (!ceph_osd_is_up(osdc->osdmap, osd->o_osd) ||
 -		    memcmp(&osd->o_con.peer_addr,
 -			   ceph_osd_addr(osdc->osdmap, osd->o_osd),
 -			   sizeof(struct ceph_entity_addr)))
 -			close_osd(osd);
 -	}
 -
 -	return 0;
 -}
 -
 -static void kick_requests(struct ceph_osd_client *osdc,
 -			  struct rb_root *need_resend,
 -			  struct list_head *need_resend_linger)
 -{
 -	struct ceph_osd_linger_request *lreq, *nlreq;
 -	struct rb_node *n;
 -
 -	for (n = rb_first(need_resend); n; ) {
 -		struct ceph_osd_request *req =
 -		    rb_entry(n, struct ceph_osd_request, r_node);
 -		struct ceph_osd *osd;
 -
 -		n = rb_next(n);
 -		erase_request(need_resend, req); /* before link_request() */
 -
 -		WARN_ON(req->r_osd);
 -		calc_target(osdc, &req->r_t, NULL, false);
 -		osd = lookup_create_osd(osdc, req->r_t.osd, true);
 -		link_request(osd, req);
 -		if (!req->r_linger) {
 -			if (!osd_homeless(osd) && !req->r_t.paused)
 -				send_request(req);
 -		} else {
 -			cancel_linger_request(req);
 +			dout("kicking lingering %p tid %llu osd%d\n", req,
 +			     req->r_tid, req->r_osd ? req->r_osd->o_osd : -1);
 +			__register_request(osdc, req);
 +			__unregister_linger_request(osdc, req);
  		}
  	}
 +	reset_changed_osds(osdc);
 +	mutex_unlock(&osdc->request_mutex);
  
 -	list_for_each_entry_safe(lreq, nlreq, need_resend_linger, scan_item) {
 -		if (!osd_homeless(lreq->osd))
 -			send_linger(lreq);
 -
 -		list_del_init(&lreq->scan_item);
 +	if (needmap) {
 +		dout("%d requests for down osds, need new map\n", needmap);
 +		ceph_monc_request_next_osdmap(&osdc->client->monc);
  	}
  }
  
@@@ -2074,11 -3171,12 +2984,18 @@@ void ceph_osdc_handle_map(struct ceph_o
  	ceph_decode_need(&p, end, sizeof(fsid), bad);
  	ceph_decode_copy(&p, &fsid, sizeof(fsid));
  	if (ceph_check_fsid(osdc->client, &fsid) < 0)
 -		goto bad;
 +		return;
  
++<<<<<<< HEAD
 +	down_write(&osdc->map_sem);
 +
 +	was_full = ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_FULL);
++=======
+ 	was_pauserd = ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD);
+ 	was_pausewr = ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR) ||
+ 		      ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
+ 		      have_pool_full(osdc);
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  
  	/* incremental maps */
  	ceph_decode_32_safe(&p, end, nr_maps, bad);
@@@ -2169,15 -3237,18 +3086,24 @@@ done
  	 * we find out when we are no longer full and stop returning
  	 * ENOSPC.
  	 */
++<<<<<<< HEAD
 +	if (ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_FULL) ||
 +		ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_PAUSERD) ||
 +		ceph_osdmap_flag(osdc->osdmap, CEPH_OSDMAP_PAUSEWR))
 +		ceph_monc_request_next_osdmap(&osdc->client->monc);
++=======
+ 	pauserd = ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD);
+ 	pausewr = ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR) ||
+ 		  ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
+ 		  have_pool_full(osdc);
+ 	if (was_pauserd || was_pausewr || pauserd || pausewr)
+ 		maybe_request_map(osdc);
++>>>>>>> b7ec35b304b6 (libceph: change ceph_osdmap_flag() to take osdc)
  
 -	kick_requests(osdc, &need_resend, &need_resend_linger);
 -
 -	ceph_monc_got_map(&osdc->client->monc, CEPH_SUB_OSDMAP,
 -			  osdc->osdmap->epoch);
 -	up_write(&osdc->lock);
 +	mutex_lock(&osdc->request_mutex);
 +	__send_queued(osdc);
 +	mutex_unlock(&osdc->request_mutex);
 +	up_read(&osdc->map_sem);
  	wake_up_all(&osdc->client->auth_wq);
  	return;
  
* Unmerged path fs/ceph/file.c
diff --git a/include/linux/ceph/osd_client.h b/include/linux/ceph/osd_client.h
index cc16ab3e4c14..5776629b0f47 100644
--- a/include/linux/ceph/osd_client.h
+++ b/include/linux/ceph/osd_client.h
@@ -233,6 +233,11 @@ struct ceph_osd_client {
 	struct workqueue_struct	*notify_wq;
 };
 
+static inline bool ceph_osdmap_flag(struct ceph_osd_client *osdc, int flag)
+{
+	return osdc->osdmap->flags & flag;
+}
+
 extern int ceph_osdc_setup(void);
 extern void ceph_osdc_cleanup(void);
 
diff --git a/include/linux/ceph/osdmap.h b/include/linux/ceph/osdmap.h
index e8bf68758dc4..05e81b83bc7d 100644
--- a/include/linux/ceph/osdmap.h
+++ b/include/linux/ceph/osdmap.h
@@ -158,11 +158,6 @@ static inline int ceph_osd_is_down(struct ceph_osdmap *map, int osd)
 	return !ceph_osd_is_up(map, osd);
 }
 
-static inline bool ceph_osdmap_flag(struct ceph_osdmap *map, int flag)
-{
-	return map && (map->flags & flag);
-}
-
 extern char *ceph_osdmap_state_str(char *str, int len, int state);
 extern u32 ceph_get_primary_affinity(struct ceph_osdmap *map, int osd);
 
* Unmerged path net/ceph/osd_client.c
