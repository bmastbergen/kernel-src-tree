pmem: kill __pmem address space

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dan Williams <dan.j.williams@intel.com>
commit 7a9eb20666317794d0279843fbd091af93907780
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7a9eb206.failed

The __pmem address space was meant to annotate codepaths that touch
persistent memory and need to coordinate a call to wmb_pmem().  Now that
wmb_pmem() is gone, there is little need to keep this annotation.

	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 7a9eb20666317794d0279843fbd091af93907780)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/filesystems/Locking
#	arch/powerpc/sysdev/axonram.c
#	arch/x86/include/asm/pmem.h
#	drivers/acpi/nfit.h
#	drivers/block/brd.c
#	drivers/nvdimm/pmem.c
#	drivers/nvdimm/pmem.h
#	drivers/s390/block/dcssblk.c
#	fs/dax.c
#	include/linux/blkdev.h
#	include/linux/compiler.h
#	include/linux/nd.h
#	include/linux/pmem.h
#	tools/testing/nvdimm/pmem-dax.c
diff --cc Documentation/filesystems/Locking
index af63b7f9e0d8,d9c37ec4c760..000000000000
--- a/Documentation/filesystems/Locking
+++ b/Documentation/filesystems/Locking
@@@ -397,7 -395,8 +397,12 @@@ prototypes
  	int (*release) (struct gendisk *, fmode_t);
  	int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
  	int (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
++<<<<<<< HEAD
 +	int (*direct_access) (struct block_device *, sector_t, void **, unsigned long *);
++=======
+ 	int (*direct_access) (struct block_device *, sector_t, void **,
+ 				unsigned long *);
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  	int (*media_changed) (struct gendisk *);
  	void (*unlock_native_capacity) (struct gendisk *);
  	int (*revalidate_disk) (struct gendisk *);
diff --cc arch/powerpc/sysdev/axonram.c
index 45bc123f9227,a87489d007dc..000000000000
--- a/arch/powerpc/sysdev/axonram.c
+++ b/arch/powerpc/sysdev/axonram.c
@@@ -140,14 -143,13 +140,23 @@@ axon_ram_make_request(struct request_qu
   */
  static long
  axon_ram_direct_access(struct block_device *device, sector_t sector,
++<<<<<<< HEAD
 +		       void **kaddr, unsigned long *pfn, long size)
++=======
+ 		       void **kaddr, pfn_t *pfn, long size)
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  {
  	struct axon_ram_bank *bank = device->bd_disk->private_data;
  	loff_t offset = (loff_t)sector << AXON_RAM_SECTOR_SHIFT;
  
++<<<<<<< HEAD
 +	*kaddr = (void *)(bank->ph_addr + offset);
 +	*pfn = virt_to_phys(kaddr) >> PAGE_SHIFT;
 +
++=======
+ 	*kaddr = (void *) bank->io_addr + offset;
+ 	*pfn = phys_to_pfn_t(bank->ph_addr + offset, PFN_DEV);
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  	return bank->size - offset;
  }
  
diff --cc drivers/block/brd.c
index 9c60a3cd03eb,5f1fe4e6208d..000000000000
--- a/drivers/block/brd.c
+++ b/drivers/block/brd.c
@@@ -371,7 -381,7 +371,11 @@@ static int brd_rw_page(struct block_dev
  
  #ifdef CONFIG_BLK_DEV_RAM_DAX
  static long brd_direct_access(struct block_device *bdev, sector_t sector,
++<<<<<<< HEAD
 +			void **kaddr, unsigned long *pfn, long size)
++=======
+ 			void **kaddr, pfn_t *pfn, long size)
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  {
  	struct brd_device *brd = bdev->bd_disk->private_data;
  	struct page *page;
@@@ -382,12 -392,8 +386,16 @@@
  	if (!page)
  		return -ENOSPC;
  	*kaddr = page_address(page);
++<<<<<<< HEAD
 +	*pfn = page_to_pfn(page);
++=======
+ 	*pfn = page_to_pfn_t(page);
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  
 +	/*
 +	 * TODO: If size > PAGE_SIZE, we could look to see if the next page in
 +	 * the file happens to be mapped to the next page of physical RAM.
 +	 */
  	return PAGE_SIZE;
  }
  #else
diff --cc drivers/s390/block/dcssblk.c
index 234818c98b8f,023c5c975dc0..000000000000
--- a/drivers/s390/block/dcssblk.c
+++ b/drivers/s390/block/dcssblk.c
@@@ -27,9 -28,10 +27,13 @@@
  
  static int dcssblk_open(struct block_device *bdev, fmode_t mode);
  static void dcssblk_release(struct gendisk *disk, fmode_t mode);
 -static blk_qc_t dcssblk_make_request(struct request_queue *q,
 -						struct bio *bio);
 +static void dcssblk_make_request(struct request_queue *q, struct bio *bio);
  static long dcssblk_direct_access(struct block_device *bdev, sector_t secnum,
++<<<<<<< HEAD
 +				 void **kaddr, unsigned long *pfn, long size);
++=======
+ 			 void **kaddr, pfn_t *pfn, long size);
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  
  static char dcssblk_segments[DCSSBLK_PARM_LEN] = "\0";
  
@@@ -867,7 -884,7 +871,11 @@@ fail
  
  static long
  dcssblk_direct_access (struct block_device *bdev, sector_t secnum,
++<<<<<<< HEAD
 +			void **kaddr, unsigned long *pfn, long size)
++=======
+ 			void **kaddr, pfn_t *pfn, long size)
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  {
  	struct dcssblk_dev_info *dev_info;
  	unsigned long offset, dev_sz;
@@@ -877,8 -894,8 +885,13 @@@
  		return -ENODEV;
  	dev_sz = dev_info->end - dev_info->start;
  	offset = secnum * 512;
++<<<<<<< HEAD
 +	*kaddr = (void *) (dev_info->start + offset);
 +	*pfn = virt_to_phys(*kaddr) >> PAGE_SHIFT;
++=======
+ 	*kaddr = (void *) dev_info->start + offset;
+ 	*pfn = __pfn_to_pfn_t(PFN_DOWN(dev_info->start + offset), PFN_DEV);
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  
  	return dev_sz - offset;
  }
diff --cc include/linux/blkdev.h
index 0e72d45d3caf,fde908b2836b..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -1643,14 -1650,28 +1643,36 @@@ static inline bool blk_integrity_is_ini
  
  #endif /* CONFIG_BLK_DEV_INTEGRITY */
  
++<<<<<<< HEAD
++=======
+ /**
+  * struct blk_dax_ctl - control and output parameters for ->direct_access
+  * @sector: (input) offset relative to a block_device
+  * @addr: (output) kernel virtual address for @sector populated by driver
+  * @pfn: (output) page frame number for @addr populated by driver
+  * @size: (input) number of bytes requested
+  */
+ struct blk_dax_ctl {
+ 	sector_t sector;
+ 	void *addr;
+ 	long size;
+ 	pfn_t pfn;
+ };
+ 
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  struct block_device_operations {
  	int (*open) (struct block_device *, fmode_t);
  	void (*release) (struct gendisk *, fmode_t);
  	int (*rw_page)(struct block_device *, sector_t, struct page *, int rw);
  	int (*ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
  	int (*compat_ioctl) (struct block_device *, fmode_t, unsigned, unsigned long);
++<<<<<<< HEAD
 +	long (*direct_access)(struct block_device *, sector_t,
 +					void **, unsigned long *pfn, long size);
++=======
+ 	long (*direct_access)(struct block_device *, sector_t, void **, pfn_t *,
+ 			long);
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  	unsigned int (*check_events) (struct gendisk *disk,
  				      unsigned int clearing);
  	/* ->media_changed() is DEPRECATED, use ->check_events() instead */
diff --cc include/linux/compiler.h
index 52174992c7c0,b966974938ed..000000000000
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@@ -17,15 -17,16 +17,14 @@@
  # define __release(x)	__context__(x,-1)
  # define __cond_lock(x,c)	((c) ? ({ __acquire(x); 1; }) : 0)
  # define __percpu	__attribute__((noderef, address_space(3)))
- # define __pmem		__attribute__((noderef, address_space(5)))
  #ifdef CONFIG_SPARSE_RCU_POINTER
  # define __rcu		__attribute__((noderef, address_space(4)))
 -#else /* CONFIG_SPARSE_RCU_POINTER */
 +#else
  # define __rcu
 -#endif /* CONFIG_SPARSE_RCU_POINTER */
 -# define __private	__attribute__((noderef))
 +#endif
  extern void __chk_user_ptr(const volatile void __user *);
  extern void __chk_io_ptr(const volatile void __iomem *);
 -# define ACCESS_PRIVATE(p, member) (*((typeof((p)->member) __force *) &(p)->member))
 -#else /* __CHECKER__ */
 +#else
  # define __user
  # define __kernel
  # define __safe
@@@ -43,7 -44,9 +42,13 @@@
  # define __cond_lock(x,c) (c)
  # define __percpu
  # define __rcu
++<<<<<<< HEAD
 +#endif
++=======
+ # define __private
+ # define ACCESS_PRIVATE(p, member) ((p)->member)
+ #endif /* __CHECKER__ */
++>>>>>>> 7a9eb2066631 (pmem: kill __pmem address space)
  
  /* Indirect macros required for expanded argument pasting, eg. __LINE__. */
  #define ___PASTE(a,b) a##b
* Unmerged path arch/x86/include/asm/pmem.h
* Unmerged path drivers/acpi/nfit.h
* Unmerged path drivers/nvdimm/pmem.c
* Unmerged path drivers/nvdimm/pmem.h
* Unmerged path fs/dax.c
* Unmerged path include/linux/nd.h
* Unmerged path include/linux/pmem.h
* Unmerged path tools/testing/nvdimm/pmem-dax.c
* Unmerged path Documentation/filesystems/Locking
* Unmerged path arch/powerpc/sysdev/axonram.c
* Unmerged path arch/x86/include/asm/pmem.h
* Unmerged path drivers/acpi/nfit.h
* Unmerged path drivers/block/brd.c
* Unmerged path drivers/nvdimm/pmem.c
* Unmerged path drivers/nvdimm/pmem.h
* Unmerged path drivers/s390/block/dcssblk.c
* Unmerged path fs/dax.c
* Unmerged path include/linux/blkdev.h
* Unmerged path include/linux/compiler.h
* Unmerged path include/linux/nd.h
* Unmerged path include/linux/pmem.h
diff --git a/scripts/checkpatch.pl b/scripts/checkpatch.pl
index 028db77648d0..6a9bddd70b42 100755
--- a/scripts/checkpatch.pl
+++ b/scripts/checkpatch.pl
@@ -192,7 +192,6 @@ our $Sparse	= qr{
 			__kernel|
 			__force|
 			__iomem|
-			__pmem|
 			__must_check|
 			__init_refok|
 			__kprobes|
* Unmerged path tools/testing/nvdimm/pmem-dax.c
