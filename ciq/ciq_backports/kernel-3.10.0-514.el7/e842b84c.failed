usb: phy: Add interface to get phy give of device_node.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [include] usb: phy: Add interface to get phy give of device_node (Torez Smith) [1303955]
Rebuild_FUZZ: 99.08%
commit-author NeilBrown <neilb@suse.de>
commit e842b84c8e7221c45c8dbd7de09185c6149e1cf9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e842b84c.failed

Split the "get phy from device_node" functionality out of
"get phy by phandle" so it can be used directly.

This is useful when a battery-charger is intimately associated with a
particular phy but handled by a separate driver.  The charger
can find the device_node based on sibling relationships
without the need for a redundant declaration in the devicetree
description.

As a peripheral that gets a phy will often want to register a
notifier block, and de-register it later, that functionality
is included so the de-registration is automatic.

	Acked-by: Pavel Machek <pavel@ucw.cz>
	Signed-off-by: NeilBrown <neilb@suse.de>
	Signed-off-by: Felipe Balbi <balbi@ti.com>
(cherry picked from commit e842b84c8e7221c45c8dbd7de09185c6149e1cf9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/phy/phy.c
diff --cc drivers/usb/phy/phy.c
index afeedb6e6008,98f75d2842b7..000000000000
--- a/drivers/usb/phy/phy.c
+++ b/drivers/usb/phy/phy.c
@@@ -76,9 -84,20 +81,18 @@@ static void devm_usb_phy_release(struc
  	usb_put_phy(phy);
  }
  
+ static void devm_usb_phy_release2(struct device *dev, void *_res)
+ {
+ 	struct phy_devm *res = _res;
+ 
+ 	if (res->nb)
+ 		usb_unregister_notifier(res->phy, res->nb);
+ 	usb_put_phy(res->phy);
+ }
+ 
  static int devm_usb_phy_match(struct device *dev, void *res, void *match_data)
  {
 -	struct usb_phy **phy = res;
 -
 -	return *phy == match_data;
 +	return res == match_data;
  }
  
  /**
@@@ -144,16 -166,16 +158,21 @@@ err0
  }
  EXPORT_SYMBOL_GPL(usb_get_phy);
  
++<<<<<<< HEAD
 + /**
 + * devm_usb_get_phy_by_phandle - find the USB PHY by phandle
++=======
+ /**
+  * devm_usb_get_phy_by_node - find the USB PHY by device_node
++>>>>>>> e842b84c8e72 (usb: phy: Add interface to get phy give of device_node.)
   * @dev - device that requests this phy
-  * @phandle - name of the property holding the phy phandle value
-  * @index - the index of the phy
+  * @node - the device_node for the phy device.
+  * @nb - a notifier_block to register with the phy.
   *
-  * Returns the phy driver associated with the given phandle value,
+  * Returns the phy driver associated with the given device_node,
   * after getting a refcount to it, -ENODEV if there is no such phy or
-  * -EPROBE_DEFER if there is a phandle to the phy, but the device is
-  * not yet loaded. While at that, it also associates the device with
+  * -EPROBE_DEFER if the device is not yet loaded. While at that, it
+  * also associates the device with
   * the phy using devres. On driver detach, release function is invoked
   * on the devres data, then, devres data is freed.
   *
* Unmerged path drivers/usb/phy/phy.c
diff --git a/include/linux/usb/phy.h b/include/linux/usb/phy.h
index 3c713ff2f44f..784477c7d379 100644
--- a/include/linux/usb/phy.h
+++ b/include/linux/usb/phy.h
@@ -206,6 +206,8 @@ extern struct usb_phy *usb_get_phy_dev(struct device *dev, u8 index);
 extern struct usb_phy *devm_usb_get_phy_dev(struct device *dev, u8 index);
 extern struct usb_phy *devm_usb_get_phy_by_phandle(struct device *dev,
 	const char *phandle, u8 index);
+extern struct usb_phy *devm_usb_get_phy_by_node(struct device *dev,
+	struct device_node *node, struct notifier_block *nb);
 extern void usb_put_phy(struct usb_phy *);
 extern void devm_usb_put_phy(struct device *dev, struct usb_phy *x);
 extern int usb_bind_phy(const char *dev_name, u8 index,
