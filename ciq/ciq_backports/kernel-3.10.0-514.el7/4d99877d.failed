mei: enable async event notifications only from hbm version 2.0

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 4d99877d871da0bbb924b2d7aa4ccb27e1ffa93a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4d99877d.failed

Only FW version 2.0 and newer support the async event
notification. For backward compatibility block the feature
if the FW version is older then 2.0

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 4d99877d871da0bbb924b2d7aa4ccb27e1ffa93a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/debugfs.c
#	drivers/misc/mei/hbm.c
#	drivers/misc/mei/hw.h
#	drivers/misc/mei/mei_dev.h
diff --cc drivers/misc/mei/debugfs.c
index 15554a224d0c,4b469cf9e60f..000000000000
--- a/drivers/misc/mei/debugfs.c
+++ b/drivers/misc/mei/debugfs.c
@@@ -144,6 -154,12 +144,15 @@@ static ssize_t mei_dbgfs_read_devstate(
  		pos += scnprintf(buf + pos, bufsz - pos, "hbm features:\n");
  		pos += scnprintf(buf + pos, bufsz - pos, "\tPG: %01d\n",
  				 dev->hbm_f_pg_supported);
++<<<<<<< HEAD
++=======
+ 		pos += scnprintf(buf + pos, bufsz - pos, "\tDC: %01d\n",
+ 				 dev->hbm_f_dc_supported);
+ 		pos += scnprintf(buf + pos, bufsz - pos, "\tDOT: %01d\n",
+ 				 dev->hbm_f_dot_supported);
+ 		pos += scnprintf(buf + pos, bufsz - pos, "\tEV: %01d\n",
+ 				 dev->hbm_f_ev_supported);
++>>>>>>> 4d99877d871d (mei: enable async event notifications only from hbm version 2.0)
  	}
  
  	pos += scnprintf(buf + pos, bufsz - pos, "pg:  %s, %s\n",
diff --cc drivers/misc/mei/hbm.c
index 3cb8e1000d69,95e918c84a6c..000000000000
--- a/drivers/misc/mei/hbm.c
+++ b/drivers/misc/mei/hbm.c
@@@ -673,6 -896,17 +673,20 @@@ static void mei_hbm_config_features(str
  	if (dev->version.major_version == HBM_MAJOR_VERSION_PGI &&
  	    dev->version.minor_version >= HBM_MINOR_VERSION_PGI)
  		dev->hbm_f_pg_supported = 1;
++<<<<<<< HEAD
++=======
+ 
+ 	if (dev->version.major_version >= HBM_MAJOR_VERSION_DC)
+ 		dev->hbm_f_dc_supported = 1;
+ 
+ 	/* disconnect on connect timeout instead of link reset */
+ 	if (dev->version.major_version >= HBM_MAJOR_VERSION_DOT)
+ 		dev->hbm_f_dot_supported = 1;
+ 
+ 	/* Notification Event Support */
+ 	if (dev->version.major_version >= HBM_MAJOR_VERSION_EV)
+ 		dev->hbm_f_ev_supported = 1;
++>>>>>>> 4d99877d871d (mei: enable async event notifications only from hbm version 2.0)
  }
  
  /**
diff --cc drivers/misc/mei/hw.h
index 50526f92f092,3f8901a503a6..000000000000
--- a/drivers/misc/mei/hw.h
+++ b/drivers/misc/mei/hw.h
@@@ -46,6 -46,24 +46,27 @@@
  #define HBM_MINOR_VERSION_PGI               1
  #define HBM_MAJOR_VERSION_PGI               1
  
++<<<<<<< HEAD
++=======
+ /*
+  * MEI version with Dynamic clients support
+  */
+ #define HBM_MINOR_VERSION_DC               0
+ #define HBM_MAJOR_VERSION_DC               2
+ 
+ /*
+  * MEI version with disconnect on connection timeout support
+  */
+ #define HBM_MINOR_VERSION_DOT              0
+ #define HBM_MAJOR_VERSION_DOT              2
+ 
+ /*
+  * MEI version with notifcation support
+  */
+ #define HBM_MINOR_VERSION_EV               0
+ #define HBM_MAJOR_VERSION_EV               2
+ 
++>>>>>>> 4d99877d871d (mei: enable async event notifications only from hbm version 2.0)
  /* Host bus message command opcode */
  #define MEI_HBM_CMD_OP_MSK                  0x7f
  /* Host bus message command RESPONSE */
diff --cc drivers/misc/mei/mei_dev.h
index 1b981b70f5aa,e22bd21bb754..000000000000
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@@ -382,55 -375,98 +382,132 @@@ enum mei_pg_state 
  
  const char *mei_pg_state_str(enum mei_pg_state state);
  
 +/*
 + * mei_cfg
 + *
 + * @fw_status - FW status
 + * @quirk_probe - device exclusion quirk
 + */
 +struct mei_cfg {
 +	const struct mei_fw_status fw_status;
 +	bool (*quirk_probe)(struct pci_dev *pdev);
 +};
 +
 +
 +#define MEI_PCI_DEVICE(dev, cfg) \
 +	.vendor = PCI_VENDOR_ID_INTEL, .device = (dev), \
 +	.subvendor = PCI_ANY_ID, .subdevice = PCI_ANY_ID, \
 +	.driver_data = (kernel_ulong_t)&(cfg)
 +
 +
  /**
   * struct mei_device -  MEI private device struct
 +
 + * @reset_count - limits the number of consecutive resets
 + * @hbm_state - state of host bus message protocol
   *
 - * @dev         : device on a bus
 - * @cdev        : character device
 - * @minor       : minor number allocated for device
 + * @hbm_f_pg_supported - hbm feature pgi protocol
   *
++<<<<<<< HEAD
 + * @pg_event - power gating event
 + * @mem_addr - mem mapped base register address
 +
 + * @hbuf_depth - depth of hardware host/write buffer is slots
 + * @hbuf_is_ready - query if the host host/write buffer is ready
 + * @wr_msg - the buffer for hbm control messages
 + * @cfg - per device generation config and ops
++=======
+  * @write_list  : write pending list
+  * @write_waiting_list : write completion list
+  * @ctrl_wr_list : pending control write list
+  * @ctrl_rd_list : pending control read list
+  *
+  * @file_list   : list of opened handles
+  * @open_handle_count: number of opened handles
+  *
+  * @device_lock : big device lock
+  * @timer_work  : MEI timer delayed work (timeouts)
+  *
+  * @recvd_hw_ready : hw ready message received flag
+  *
+  * @wait_hw_ready : wait queue for receive HW ready message form FW
+  * @wait_pg     : wait queue for receive PG message from FW
+  * @wait_hbm_start : wait queue for receive HBM start message from FW
+  * @wait_stop_wd : wait queue for receive WD stop message from FW
+  *
+  * @reset_count : number of consecutive resets
+  * @dev_state   : device state
+  * @hbm_state   : state of host bus message protocol
+  * @init_clients_timer : HBM init handshake timeout
+  *
+  * @pg_event    : power gating event
+  * @pg_domain   : runtime PM domain
+  *
+  * @rd_msg_buf  : control messages buffer
+  * @rd_msg_hdr  : read message header storage
+  *
+  * @hbuf_depth  : depth of hardware host/write buffer is slots
+  * @hbuf_is_ready : query if the host host/write buffer is ready
+  * @wr_msg      : the buffer for hbm control messages
+  *
+  * @version     : HBM protocol version in use
+  * @hbm_f_pg_supported  : hbm feature pgi protocol
+  * @hbm_f_dc_supported  : hbm feature dynamic clients
+  * @hbm_f_dot_supported : hbm feature disconnect on timeout
+  * @hbm_f_ev_supported  : hbm feature event notification
+  *
+  * @me_clients_rwsem: rw lock over me_clients list
+  * @me_clients  : list of FW clients
+  * @me_clients_map : FW clients bit map
+  * @host_clients_map : host clients id pool
+  * @me_client_index : last FW client index in enumeration
+  *
+  * @allow_fixed_address: allow user space to connect a fixed client
+  *
+  * @wd_cl       : watchdog client
+  * @wd_state    : watchdog client state
+  * @wd_pending  : watchdog command is pending
+  * @wd_timeout  : watchdog expiration timeout
+  * @wd_data     : watchdog message buffer
+  *
+  * @amthif_cmd_list : amthif list for cmd waiting
+  * @amthif_rd_complete_list : amthif list for reading completed cmd data
+  * @iamthif_file_object : file for current amthif operation
+  * @iamthif_cl  : amthif host client
+  * @iamthif_current_cb : amthif current operation callback
+  * @iamthif_open_count : number of opened amthif connections
+  * @iamthif_timer : time stamp of current amthif command completion
+  * @iamthif_stall_timer : timer to detect amthif hang
+  * @iamthif_state : amthif processor state
+  * @iamthif_canceled : current amthif command is canceled
+  *
+  * @init_work   : work item for the device init
+  * @reset_work  : work item for the device reset
+  *
+  * @device_list : mei client bus list
+  * @cl_bus_lock : client bus list lock
+  *
+  * @dbgfs_dir   : debugfs mei root directory
+  *
+  * @ops:        : hw specific operations
+  * @hw          : hw specific data
++>>>>>>> 4d99877d871d (mei: enable async event notifications only from hbm version 2.0)
   */
  struct mei_device {
 -	struct device *dev;
 -	struct cdev cdev;
 -	int minor;
 -
 -	struct mei_cl_cb write_list;
 -	struct mei_cl_cb write_waiting_list;
 -	struct mei_cl_cb ctrl_wr_list;
 -	struct mei_cl_cb ctrl_rd_list;
 +	struct pci_dev *pdev;	/* pointer to pci device struct */
 +	/*
 +	 * lists of queues
 +	 */
 +	/* array of pointers to aio lists */
 +	struct mei_cl_cb read_list;		/* driver read queue */
 +	struct mei_cl_cb write_list;		/* driver write queue */
 +	struct mei_cl_cb write_waiting_list;	/* write waiting queue */
 +	struct mei_cl_cb ctrl_wr_list;		/* managed write IOCTL list */
 +	struct mei_cl_cb ctrl_rd_list;		/* managed read IOCTL list */
  
 +	/*
 +	 * list of files
 +	 */
  	struct list_head file_list;
  	long open_handle_count;
  
@@@ -477,14 -513,18 +554,20 @@@
  
  	struct hbm_version version;
  	unsigned int hbm_f_pg_supported:1;
++<<<<<<< HEAD
++=======
+ 	unsigned int hbm_f_dc_supported:1;
+ 	unsigned int hbm_f_dot_supported:1;
+ 	unsigned int hbm_f_ev_supported:1;
++>>>>>>> 4d99877d871d (mei: enable async event notifications only from hbm version 2.0)
  
 -	struct rw_semaphore me_clients_rwsem;
 -	struct list_head me_clients;
 +	struct mei_me_client *me_clients; /* Note: memory has to be allocated */
  	DECLARE_BITMAP(me_clients_map, MEI_CLIENTS_MAX);
  	DECLARE_BITMAP(host_clients_map, MEI_CLIENTS_MAX);
 +	unsigned long me_clients_num;
 +	unsigned long me_client_presentation_num;
  	unsigned long me_client_index;
  
 -	u32 allow_fixed_address;
 -
  	struct mei_cl wd_cl;
  	enum mei_wd_states wd_state;
  	bool wd_pending;
* Unmerged path drivers/misc/mei/debugfs.c
* Unmerged path drivers/misc/mei/hbm.c
* Unmerged path drivers/misc/mei/hw.h
* Unmerged path drivers/misc/mei/mei_dev.h
