tcp/dccp: try to not exhaust ip_local_port_range in connect()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] tcp, dccp: try to not exhaust ip_local_port_range in connect() (Florian Westphal) [1305525]
Rebuild_FUZZ: 97.56%
commit-author Eric Dumazet <edumazet@google.com>
commit 07f4c90062f8fc7c8c26f8f95324cbe8fa3145a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/07f4c900.failed

A long standing problem on busy servers is the tiny available TCP port
range (/proc/sys/net/ipv4/ip_local_port_range) and the default
sequential allocation of source ports in connect() system call.

If a host is having a lot of active TCP sessions, chances are
very high that all ports are in use by at least one flow,
and subsequent bind(0) attempts fail, or have to scan a big portion of
space to find a slot.

In this patch, I changed the starting point in __inet_hash_connect()
so that we try to favor even [1] ports, leaving odd ports for bind()
users.

We still perform a sequential search, so there is no guarantee, but
if connect() targets are very different, end result is we leave
more ports available to bind(), and we spread them all over the range,
lowering time for both connect() and bind() to find a slot.

This strategy only works well if /proc/sys/net/ipv4/ip_local_port_range
is even, ie if start/end values have different parity.

Therefore, default /proc/sys/net/ipv4/ip_local_port_range was changed to
32768 - 60999 (instead of 32768 - 61000)

There is no change on security aspects here, only some poor hashing
schemes could be eventually impacted by this change.

[1] : The odd/even property depends on ip_local_port_range values parity

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 07f4c90062f8fc7c8c26f8f95324cbe8fa3145a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/af_inet.c
diff --cc net/ipv4/af_inet.c
index 96cfb62894e8,6ad0f7a711c9..000000000000
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@@ -1601,6 -1588,39 +1601,42 @@@ static int __init init_ipv4_mibs(void
  	return register_pernet_subsys(&ipv4_mib_ops);
  }
  
++<<<<<<< HEAD
++=======
+ static __net_init int inet_init_net(struct net *net)
+ {
+ 	/*
+ 	 * Set defaults for local port range
+ 	 */
+ 	seqlock_init(&net->ipv4.ip_local_ports.lock);
+ 	net->ipv4.ip_local_ports.range[0] =  32768;
+ 	net->ipv4.ip_local_ports.range[1] =  60999;
+ 
+ 	seqlock_init(&net->ipv4.ping_group_range.lock);
+ 	/*
+ 	 * Sane defaults - nobody may create ping sockets.
+ 	 * Boot scripts should set this to distro-specific group.
+ 	 */
+ 	net->ipv4.ping_group_range.range[0] = make_kgid(&init_user_ns, 1);
+ 	net->ipv4.ping_group_range.range[1] = make_kgid(&init_user_ns, 0);
+ 	return 0;
+ }
+ 
+ static __net_exit void inet_exit_net(struct net *net)
+ {
+ }
+ 
+ static __net_initdata struct pernet_operations af_inet_ops = {
+ 	.init = inet_init_net,
+ 	.exit = inet_exit_net,
+ };
+ 
+ static int __init init_inet_pernet_ops(void)
+ {
+ 	return register_pernet_subsys(&af_inet_ops);
+ }
+ 
++>>>>>>> 07f4c90062f8 (tcp/dccp: try to not exhaust ip_local_port_range in connect())
  static int ipv4_proc_init(void);
  
  /*
diff --git a/Documentation/networking/ip-sysctl.txt b/Documentation/networking/ip-sysctl.txt
index e8d824aef227..cfda25308a45 100644
--- a/Documentation/networking/ip-sysctl.txt
+++ b/Documentation/networking/ip-sysctl.txt
@@ -700,8 +700,10 @@ IP Variables:
 ip_local_port_range - 2 INTEGERS
 	Defines the local port range that is used by TCP and UDP to
 	choose the local port. The first number is the first, the
-	second the last local port number. The default values are
-	32768 and 61000 respectively.
+	second the last local port number.
+	If possible, it is better these numbers have different parity.
+	(one even and one odd values)
+	The default values are 32768 and 60999 respectively.
 
 ip_local_reserved_ports - list of comma separated ranges
 	Specify the ports which are reserved for known third-party
@@ -724,7 +726,7 @@ ip_local_reserved_ports - list of comma separated ranges
 	ip_local_port_range, e.g.:
 
 	$ cat /proc/sys/net/ipv4/ip_local_port_range
-	32000	61000
+	32000	60999
 	$ cat /proc/sys/net/ipv4/ip_local_reserved_ports
 	8080,9148
 
* Unmerged path net/ipv4/af_inet.c
diff --git a/net/ipv4/inet_hashtables.c b/net/ipv4/inet_hashtables.c
index 3d8aca2d725d..bc39391706a2 100644
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@ -496,8 +496,14 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		inet_get_local_port_range(net, &low, &high);
 		remaining = (high - low) + 1;
 
+		/* By starting with offset being an even number,
+		 * we tend to leave about 50% of ports for other uses,
+		 * like bind(0).
+		 */
+		offset &= ~1;
+
 		local_bh_disable();
-		for (i = 1; i <= remaining; i++) {
+		for (i = 0; i < remaining; i++) {
 			port = low + (i + offset) % remaining;
 			if (inet_is_reserved_local_port(port))
 				continue;
@@ -541,7 +547,7 @@ int __inet_hash_connect(struct inet_timewait_death_row *death_row,
 		return -EADDRNOTAVAIL;
 
 ok:
-		hint += i;
+		hint += (i + 2) & ~1;
 
 		/* Head lock still held and bh's disabled */
 		inet_bind_hash(sk, tb, port);
