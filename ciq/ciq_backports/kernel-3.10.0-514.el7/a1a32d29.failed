x86/microcode/intel: Get rid of revision_is_newer()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode/intel: Get rid of revision_is_newer() (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 95.92%
commit-author Borislav Petkov <bp@suse.de>
commit a1a32d29f941b7219be07f9e76455a5e4ce4e9c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a1a32d29.failed

It is a one-liner for checking microcode header revisions. On top of
that, it can be used wrong as it was the case in _save_mc(). Get rid of
it.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Acked-by: Quentin Casasnovas <quentin.casasnovas@oracle.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a1a32d29f941b7219be07f9e76455a5e4ce4e9c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/intel_lib.c
diff --cc arch/x86/kernel/cpu/microcode/intel_lib.c
index 7e259d99b0aa,63b0a2e059ee..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel_lib.c
+++ b/arch/x86/kernel/cpu/microcode/intel_lib.c
@@@ -153,16 -152,15 +153,27 @@@ int get_matching_sig(unsigned int csig
  }
  
  /*
 - * Returns 1 if update has been found, 0 otherwise.
 + * return 0 - no update found
 + * return 1 - found update
   */
++<<<<<<< HEAD
 +int get_matching_microcode(unsigned int csig, int cpf, void *mc, int rev)
++=======
+ int get_matching_microcode(unsigned int csig, int cpf, int new_rev, void *mc)
++>>>>>>> a1a32d29f941 (x86/microcode/intel: Get rid of revision_is_newer())
  {
 -	struct microcode_header_intel *mc_hdr = mc;
 +	struct microcode_header_intel *mc_header = mc;
 +
++<<<<<<< HEAD
 +	if (!revision_is_newer(mc_header, rev))
 +		return 0;
  
 +	return get_matching_sig(csig, cpf, mc, rev);
++=======
+ 	if (mc_hdr->rev <= new_rev)
+ 		return 0;
+ 
+ 	return get_matching_sig(csig, cpf, new_rev, mc);
++>>>>>>> a1a32d29f941 (x86/microcode/intel: Get rid of revision_is_newer())
  }
  EXPORT_SYMBOL_GPL(get_matching_microcode);
diff --git a/arch/x86/include/asm/microcode_intel.h b/arch/x86/include/asm/microcode_intel.h
index e2c7404deded..3a3f637d625a 100644
--- a/arch/x86/include/asm/microcode_intel.h
+++ b/arch/x86/include/asm/microcode_intel.h
@@ -61,12 +61,6 @@ get_matching_microcode(unsigned int csig, int cpf, void *mc, int rev);
 extern int microcode_sanity_check(void *mc, int print_err);
 extern int get_matching_sig(unsigned int csig, int cpf, void *mc, int rev);
 
-static inline int
-revision_is_newer(struct microcode_header_intel *mc_header, int rev)
-{
-	return (mc_header->rev <= rev) ? 0 : 1;
-}
-
 #ifdef CONFIG_MICROCODE_INTEL_EARLY
 extern void __init load_ucode_intel_bsp(void);
 extern void load_ucode_intel_ap(void);
diff --git a/arch/x86/kernel/cpu/microcode/intel_early.c b/arch/x86/kernel/cpu/microcode/intel_early.c
index f074fe1d5a06..8adcb72fafd2 100644
--- a/arch/x86/kernel/cpu/microcode/intel_early.c
+++ b/arch/x86/kernel/cpu/microcode/intel_early.c
@@ -291,7 +291,7 @@ static unsigned int _save_mc(struct microcode_intel **mc_saved,
 
 		found = 1;
 
-		if (!revision_is_newer(mc_hdr, new_rev))
+		if (mc_hdr->rev <= mc_saved_hdr->rev)
 			continue;
 
 		/*
* Unmerged path arch/x86/kernel/cpu/microcode/intel_lib.c
