alx: add stats to ethtool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit b7e6ce18cb361064c35394cdb81def8c293732a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b7e6ce18.failed

	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Reviewed-by: Ben Hutchings <bhutchings@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b7e6ce18cb361064c35394cdb81def8c293732a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/atheros/alx/ethtool.c
diff --cc drivers/net/ethernet/atheros/alx/ethtool.c
index 926100626d60,08e22df2a300..000000000000
--- a/drivers/net/ethernet/atheros/alx/ethtool.c
+++ b/drivers/net/ethernet/atheros/alx/ethtool.c
@@@ -201,38 -261,42 +261,76 @@@ static void alx_set_msglevel(struct net
  	alx->msg_enable = data;
  }
  
++<<<<<<< HEAD
 +static void alx_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
++=======
+ static void alx_get_ethtool_stats(struct net_device *netdev,
+ 				  struct ethtool_stats *estats, u64 *data)
++>>>>>>> b7e6ce18cb36 (alx: add stats to ethtool)
  {
  	struct alx_priv *alx = netdev_priv(netdev);
  	struct alx_hw *hw = &alx->hw;
  
++<<<<<<< HEAD
 +	wol->supported = WAKE_MAGIC | WAKE_PHY;
 +	wol->wolopts = 0;
 +
 +	if (hw->sleep_ctrl & ALX_SLEEP_WOL_MAGIC)
 +		wol->wolopts |= WAKE_MAGIC;
 +	if (hw->sleep_ctrl & ALX_SLEEP_WOL_PHY)
 +		wol->wolopts |= WAKE_PHY;
 +}
 +
 +static int alx_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
 +{
 +	struct alx_priv *alx = netdev_priv(netdev);
 +	struct alx_hw *hw = &alx->hw;
 +
 +	if (wol->wolopts & ~(WAKE_MAGIC | WAKE_PHY))
 +		return -EOPNOTSUPP;
 +
 +	hw->sleep_ctrl = 0;
 +
 +	if (wol->wolopts & WAKE_MAGIC)
 +		hw->sleep_ctrl |= ALX_SLEEP_WOL_MAGIC;
 +	if (wol->wolopts & WAKE_PHY)
 +		hw->sleep_ctrl |= ALX_SLEEP_WOL_PHY;
 +
 +	device_set_wakeup_enable(&alx->hw.pdev->dev, hw->sleep_ctrl);
 +
 +	return 0;
++=======
+ 	spin_lock(&alx->stats_lock);
+ 
+ 	alx_update_hw_stats(hw);
+ 	BUILD_BUG_ON(sizeof(hw->stats) - offsetof(struct alx_hw_stats, rx_ok) <
+ 		     ALX_NUM_STATS * sizeof(u64));
+ 	memcpy(data, &hw->stats.rx_ok, ALX_NUM_STATS * sizeof(u64));
+ 
+ 	spin_unlock(&alx->stats_lock);
+ }
+ 
+ static void alx_get_strings(struct net_device *netdev, u32 stringset, u8 *buf)
+ {
+ 	switch (stringset) {
+ 	case ETH_SS_STATS:
+ 		memcpy(buf, &alx_gstrings_stats, sizeof(alx_gstrings_stats));
+ 		break;
+ 	default:
+ 		WARN_ON(1);
+ 		break;
+ 	}
+ }
+ 
+ static int alx_get_sset_count(struct net_device *netdev, int sset)
+ {
+ 	switch (sset) {
+ 	case ETH_SS_STATS:
+ 		return ALX_NUM_STATS;
+ 	default:
+ 		return -EINVAL;
+ 	}
++>>>>>>> b7e6ce18cb36 (alx: add stats to ethtool)
  }
  
  const struct ethtool_ops alx_ethtool_ops = {
@@@ -242,7 -306,8 +340,10 @@@
  	.set_pauseparam	= alx_set_pauseparam,
  	.get_msglevel	= alx_get_msglevel,
  	.set_msglevel	= alx_set_msglevel,
 +	.get_wol	= alx_get_wol,
 +	.set_wol	= alx_set_wol,
  	.get_link	= ethtool_op_get_link,
+ 	.get_strings	= alx_get_strings,
+ 	.get_sset_count	= alx_get_sset_count,
+ 	.get_ethtool_stats	= alx_get_ethtool_stats,
  };
* Unmerged path drivers/net/ethernet/atheros/alx/ethtool.c
diff --git a/drivers/net/ethernet/atheros/alx/hw.h b/drivers/net/ethernet/atheros/alx/hw.h
index 3e0bb4a3a717..ed16b80815d0 100644
--- a/drivers/net/ethernet/atheros/alx/hw.h
+++ b/drivers/net/ethernet/atheros/alx/hw.h
@@ -381,7 +381,12 @@ struct alx_rrd {
 				 ALX_ISR_RX_Q6 | \
 				 ALX_ISR_RX_Q7)
 
-/* Statistics counters collected by the MAC */
+/* Statistics counters collected by the MAC
+ *
+ * The order of the fields must match the strings in alx_gstrings_stats
+ * All stats fields should be u64
+ * See ethtool.c
+ */
 struct alx_hw_stats {
 	/* rx */
 	u64 rx_ok;		/* good RX packets */
