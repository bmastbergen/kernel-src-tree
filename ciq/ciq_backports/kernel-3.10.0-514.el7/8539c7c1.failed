iommu: Introduce iommu domain types

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] Introduce iommu domain types (Myron Stowe) [1299039]
Rebuild_FUZZ: 88.89%
commit-author Joerg Roedel <jroedel@suse.de>
commit 8539c7c16b970258e14761d8a1f7d10fe798031a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8539c7c1.failed

This allows to handle domains differently based on their
type in the future. An IOMMU driver can implement certain
optimizations for DMA-API domains for example.

The domain types can be extended later and some of the
existing domain attributes can be migrated to become domain
flags.

	Tested-by: Thierry Reding <treding@nvidia.com>
	Tested-by: Heiko Stuebner <heiko@sntech.de>
	Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
	Acked-by: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 8539c7c16b970258e14761d8a1f7d10fe798031a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/iommu.h
diff --cc include/linux/iommu.h
index 2ad74a596858,72d03fe78cf6..000000000000
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@@ -50,8 -51,33 +50,37 @@@ struct iommu_domain_geometry 
  	bool force_aperture;       /* DMA only allowed in mappable range? */
  };
  
+ /* Domain feature flags */
+ #define __IOMMU_DOMAIN_PAGING	(1U << 0)  /* Support for iommu_map/unmap */
+ #define __IOMMU_DOMAIN_DMA_API	(1U << 1)  /* Domain for use in DMA-API
+ 					      implementation              */
+ #define __IOMMU_DOMAIN_PT	(1U << 2)  /* Domain is identity mapped   */
+ 
+ /*
+  * This are the possible domain-types
+  *
+  *	IOMMU_DOMAIN_BLOCKED	- All DMA is blocked, can be used to isolate
+  *				  devices
+  *	IOMMU_DOMAIN_IDENTITY	- DMA addresses are system physical addresses
+  *	IOMMU_DOMAIN_UNMANAGED	- DMA mappings managed by IOMMU-API user, used
+  *				  for VMs
+  *	IOMMU_DOMAIN_DMA	- Internally used for DMA-API implementations.
+  *				  This flag allows IOMMU drivers to implement
+  *				  certain optimizations for these domains
+  */
+ #define IOMMU_DOMAIN_BLOCKED	(0U)
+ #define IOMMU_DOMAIN_IDENTITY	(__IOMMU_DOMAIN_PT)
+ #define IOMMU_DOMAIN_UNMANAGED	(__IOMMU_DOMAIN_PAGING)
+ #define IOMMU_DOMAIN_DMA	(__IOMMU_DOMAIN_PAGING |	\
+ 				 __IOMMU_DOMAIN_DMA_API)
+ 
  struct iommu_domain {
++<<<<<<< HEAD
 +	struct iommu_ops *ops;
++=======
+ 	unsigned type;
+ 	const struct iommu_ops *ops;
++>>>>>>> 8539c7c16b97 (iommu: Introduce iommu domain types)
  	void *priv;
  	iommu_fault_handler_t handler;
  	void *handler_token;
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index f4751b7157d4..762f78722c78 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -880,14 +880,15 @@ struct iommu_domain *iommu_domain_alloc(struct bus_type *bus)
 	ops = bus->iommu_ops;
 
 	if (ops->domain_alloc)
-		domain = ops->domain_alloc();
+		domain = ops->domain_alloc(IOMMU_DOMAIN_UNMANAGED);
 	else
 		domain = kzalloc(sizeof(*domain), GFP_KERNEL);
 
 	if (!domain)
 		return NULL;
 
-	domain->ops = bus->iommu_ops;
+	domain->ops  = bus->iommu_ops;
+	domain->type = IOMMU_DOMAIN_UNMANAGED;
 
 	if (ops->domain_init && domain->ops->domain_init(domain))
 		goto out_free;
* Unmerged path include/linux/iommu.h
