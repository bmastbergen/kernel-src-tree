mm: move_ptes -- Set soft dirty bit depending on pte type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mm] move_ptes -- Set soft dirty bit depending on pte type (Oleg Nesterov) [1269561]
Rebuild_FUZZ: 96.36%
commit-author Cyrill Gorcunov <gorcunov@gmail.com>
commit 6dec97dc92946eb479e6ebb54a61f8226cceefec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6dec97dc.failed

Dave reported corrupted swap entries

 | [ 4588.541886] swap_free: Unused swap offset entry 00002d15
 | [ 4588.541952] BUG: Bad page map in process trinity-kid12  pte:005a2a80 pmd:22c01f067

and Hugh pointed that in move_ptes _PAGE_SOFT_DIRTY bit set regardless
the type of entry pte consists of.  The trick here is that when we carry
soft dirty status in swap entries we are to use _PAGE_SWP_SOFT_DIRTY
instead, because this is the only place in pte which can be used for own
needs without intersecting with bits owned by swap entry type/offset.

Reported-and-tested-by: Dave Jones <davej@redhat.com>
	Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
	Cc: Pavel Emelyanov <xemul@parallels.com>
Analyzed-by: Hugh Dickins <hughd@google.com>
	Cc: Hillf Danton <dhillf@gmail.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6dec97dc92946eb479e6ebb54a61f8226cceefec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/mremap.c
diff --cc mm/mremap.c
index ee435797a2ae,0843feb66f3d..000000000000
--- a/mm/mremap.c
+++ b/mm/mremap.c
@@@ -126,6 -144,7 +144,10 @@@ static void move_ptes(struct vm_area_st
  			continue;
  		pte = ptep_get_and_clear(mm, old_addr, old_pte);
  		pte = move_pte(pte, new_vma->vm_page_prot, old_addr, new_addr);
++<<<<<<< HEAD
++=======
+ 		pte = move_soft_dirty_pte(pte);
++>>>>>>> 6dec97dc9294 (mm: move_ptes -- Set soft dirty bit depending on pte type)
  		set_pte_at(mm, new_addr, new_pte, pte);
  	}
  
* Unmerged path mm/mremap.c
