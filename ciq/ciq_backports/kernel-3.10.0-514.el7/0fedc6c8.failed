sched/fair: Disambiguate existing/remaining "capacity" usage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [kernel] sched: Disambiguate existing/remaining "capacity" usage (Jiri Olsa) [1211784]
Rebuild_FUZZ: 95.65%
commit-author Nicolas Pitre <nicolas.pitre@linaro.org>
commit 0fedc6c8e34f4ce0b37b1f25c3619b4a8faa244c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0fedc6c8.failed

We have "power" (which should actually become "capacity") and "capacity"
which is a scaled down "capacity factor" in terms of unitary tasks.
Let's use "capacity_factor" to make room for proper usage of "capacity"
later.

	Signed-off-by: Nicolas Pitre <nico@linaro.org>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Vincent Guittot <vincent.guittot@linaro.org>
	Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
	Cc: Morten Rasmussen <morten.rasmussen@arm.com>
	Cc: "Rafael J. Wysocki" <rjw@rjwysocki.net>
	Cc: linaro-kernel@lists.linaro.org
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: linux-kernel@vger.kernel.org
Link: http://lkml.kernel.org/n/tip-gk1co8sqdev3763opqm6ovml@git.kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 0fedc6c8e34f4ce0b37b1f25c3619b4a8faa244c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 0709f6bcbbf5,e401e446e87c..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -5702,10 -5902,10 +5702,15 @@@ static inline void update_sg_lb_stats(s
  	sgs->group_weight = group->group_weight;
  
  	sgs->group_imb = sg_imbalanced(group);
- 	sgs->group_capacity = sg_capacity(env, group);
+ 	sgs->group_capacity_factor = sg_capacity_factor(env, group);
  
++<<<<<<< HEAD
 +	if (sgs->group_capacity > sgs->sum_nr_running)
 +		sgs->group_has_capacity = 1;
++=======
+ 	if (sgs->group_capacity_factor > sgs->sum_nr_running)
+ 		sgs->group_has_free_capacity = 1;
++>>>>>>> 0fedc6c8e34f (sched/fair: Disambiguate existing/remaining "capacity" usage)
  }
  
  /**
@@@ -5825,10 -6028,16 +5830,16 @@@ static inline void update_sd_lb_stats(s
  		 * heaviest group when it is already under-utilized (possible
  		 * with a large weight task outweighs the tasks on the system).
  		 */
++<<<<<<< HEAD
 +		if (prefer_sibling && !local_group &&
 +				sds->this && sds->this_stat.group_has_capacity)
 +			sgs->group_capacity = min(sgs->group_capacity, 1U);
++=======
+ 		if (prefer_sibling && sds->local &&
+ 		    sds->local_stat.group_has_free_capacity)
+ 			sgs->group_capacity_factor = min(sgs->group_capacity_factor, 1U);
++>>>>>>> 0fedc6c8e34f (sched/fair: Disambiguate existing/remaining "capacity" usage)
  
 -		if (update_sd_pick_busiest(env, sds, sg, sgs)) {
 -			sds->busiest = sg;
 -			sds->busiest_stat = *sgs;
 -		}
 -
 -next_group:
  		/* Now, start updating sd_lb_stats */
  		sds->total_load += sgs->group_load;
  		sds->total_pwr += sgs->group_power;
* Unmerged path kernel/sched/fair.c
