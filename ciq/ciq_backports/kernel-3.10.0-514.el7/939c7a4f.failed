tracing: Introduce saved_cmdlines_size file

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
commit 939c7a4f04fcd2162109744e8bf88194948a6e65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/939c7a4f.failed

Introduce saved_cmdlines_size file for changing the number of saved pid-comms.
saved_cmdlines currently stores 128 command names using SAVED_CMDLINES, but
'no-existing processes' names are often lost in saved_cmdlines when we
read the trace data. So, by introducing saved_cmdlines_size file, we can
now change the 128 command names saved to something much larger if needed.

When we write a value to saved_cmdlines_size, the number of the value will
be stored in pid-comm list:

	# echo 1024 > /sys/kernel/debug/tracing/saved_cmdlines_size

Here, 1024 command names can be stored. The default number is 128 and the maximum
number is PID_MAX_DEFAULT (=32768 if CONFIG_BASE_SMALL is not set). So, if we
want to avoid losing any command names, we need to set 32768 to
saved_cmdlines_size.

We can read the maximum number of the list:

	# cat /sys/kernel/debug/tracing/saved_cmdlines_size
	128

Link: http://lkml.kernel.org/p/20140605012427.22115.16173.stgit@yunodevel

	Signed-off-by: Yoshihiro YUNOMAE <yoshihiro.yunomae.ez@hitachi.com>
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit 939c7a4f04fcd2162109744e8bf88194948a6e65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace.c
diff --cc kernel/trace/trace.c
index be5207f86004,e29edee1542a..000000000000
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@@ -3485,43 -3640,50 +3534,49 @@@ static const char readme_msg[] 
  	"  instances\t\t- Make sub-buffers with: mkdir instances/foo\n"
  	"\t\t\t  Remove sub-buffer with rmdir\n"
  	"  trace_options\t\t- Set format or modify how tracing happens\n"
++<<<<<<< HEAD
 +	"\t\t\t  Disable an option by adding a suffix 'no' to the option name\n"
++=======
+ 	"\t\t\t  Disable an option by adding a suffix 'no' to the\n"
+ 	"\t\t\t  option name\n"
+ 	"  saved_cmdlines_size\t- echo command number in here to store comm-pid list\n"
++>>>>>>> 939c7a4f04fc (tracing: Introduce saved_cmdlines_size file)
  #ifdef CONFIG_DYNAMIC_FTRACE
  	"\n  available_filter_functions - list of functions that can be filtered on\n"
 -	"  set_ftrace_filter\t- echo function name in here to only trace these\n"
 -	"\t\t\t  functions\n"
 -	"\t     accepts: func_full_name, *func_end, func_begin*, *func_middle*\n"
 -	"\t     modules: Can select a group via module\n"
 -	"\t      Format: :mod:<module-name>\n"
 -	"\t     example: echo :mod:ext3 > set_ftrace_filter\n"
 -	"\t    triggers: a command to perform when function is hit\n"
 -	"\t      Format: <function>:<trigger>[:count]\n"
 -	"\t     trigger: traceon, traceoff\n"
 -	"\t\t      enable_event:<system>:<event>\n"
 -	"\t\t      disable_event:<system>:<event>\n"
 +	"  set_ftrace_filter\t- echo function name in here to only trace these functions\n"
 +	"            accepts: func_full_name, *func_end, func_begin*, *func_middle*\n"
 +	"            modules: Can select a group via module\n"
 +	"             Format: :mod:<module-name>\n"
 +	"             example: echo :mod:ext3 > set_ftrace_filter\n"
 +	"            triggers: a command to perform when function is hit\n"
 +	"              Format: <function>:<trigger>[:count]\n"
 +	"             trigger: traceon, traceoff\n"
 +	"                      enable_event:<system>:<event>\n"
 +	"                      disable_event:<system>:<event>\n"
  #ifdef CONFIG_STACKTRACE
 -	"\t\t      stacktrace\n"
 +	"                      stacktrace\n"
  #endif
  #ifdef CONFIG_TRACER_SNAPSHOT
 -	"\t\t      snapshot\n"
 +	"                      snapshot\n"
  #endif
 -	"\t\t      dump\n"
 -	"\t\t      cpudump\n"
 -	"\t     example: echo do_fault:traceoff > set_ftrace_filter\n"
 -	"\t              echo do_trap:traceoff:3 > set_ftrace_filter\n"
 -	"\t     The first one will disable tracing every time do_fault is hit\n"
 -	"\t     The second will disable tracing at most 3 times when do_trap is hit\n"
 -	"\t       The first time do trap is hit and it disables tracing, the\n"
 -	"\t       counter will decrement to 2. If tracing is already disabled,\n"
 -	"\t       the counter will not decrement. It only decrements when the\n"
 -	"\t       trigger did work\n"
 -	"\t     To remove trigger without count:\n"
 -	"\t       echo '!<function>:<trigger> > set_ftrace_filter\n"
 -	"\t     To remove trigger with a count:\n"
 -	"\t       echo '!<function>:<trigger>:0 > set_ftrace_filter\n"
 +	"             example: echo do_fault:traceoff > set_ftrace_filter\n"
 +	"                      echo do_trap:traceoff:3 > set_ftrace_filter\n"
 +	"             The first one will disable tracing every time do_fault is hit\n"
 +	"             The second will disable tracing at most 3 times when do_trap is hit\n"
 +	"               The first time do trap is hit and it disables tracing, the counter\n"
 +	"               will decrement to 2. If tracing is already disabled, the counter\n"
 +	"               will not decrement. It only decrements when the trigger did work\n"
 +	"             To remove trigger without count:\n"
 +	"               echo '!<function>:<trigger> > set_ftrace_filter\n"
 +	"             To remove trigger with a count:\n"
 +	"               echo '!<function>:<trigger>:0 > set_ftrace_filter\n"
  	"  set_ftrace_notrace\t- echo function name in here to never trace.\n"
 -	"\t    accepts: func_full_name, *func_end, func_begin*, *func_middle*\n"
 -	"\t    modules: Can select a group via module command :mod:\n"
 -	"\t    Does not accept triggers\n"
 +	"            accepts: func_full_name, *func_end, func_begin*, *func_middle*\n"
 +	"            modules: Can select a group via module command :mod:\n"
 +	"            Does not accept triggers\n"
  #endif /* CONFIG_DYNAMIC_FTRACE */
  #ifdef CONFIG_FUNCTION_TRACER
 -	"  set_ftrace_pid\t- Write pid(s) to only function trace those pids\n"
 -	"\t\t    (function)\n"
 +	"  set_ftrace_pid\t- Write pid(s) to only function trace those pids (function)\n"
  #endif
  #ifdef CONFIG_FUNCTION_GRAPH_TRACER
  	"  set_graph_function\t- Trace the nested calls of a function (function_graph)\n"
@@@ -6450,17 -6733,30 +6582,41 @@@ __init static int tracer_alloc_buffers(
  
  	raw_spin_lock_init(&global_trace.start_lock);
  
++<<<<<<< HEAD
++=======
+ 	/* Used for event triggers */
+ 	temp_buffer = ring_buffer_alloc(PAGE_SIZE, RB_FL_OVERWRITE);
+ 	if (!temp_buffer)
+ 		goto out_free_cpumask;
+ 
+ 	if (trace_create_savedcmd() < 0)
+ 		goto out_free_temp_buffer;
+ 
++>>>>>>> 939c7a4f04fc (tracing: Introduce saved_cmdlines_size file)
  	/* TODO: make the number of buffers hot pluggable with CPUS */
  	if (allocate_trace_buffers(&global_trace, ring_buf_size) < 0) {
  		printk(KERN_ERR "tracer: failed to allocate ring buffer!\n");
  		WARN_ON(1);
++<<<<<<< HEAD
 +		goto out_free_cpumask;
++=======
+ 		goto out_free_savedcmd;
++>>>>>>> 939c7a4f04fc (tracing: Introduce saved_cmdlines_size file)
  	}
  
  	if (global_trace.buffer_disabled)
  		tracing_off();
  
++<<<<<<< HEAD
 +	trace_init_cmdlines();
++=======
+ 	if (trace_boot_clock) {
+ 		ret = tracing_set_clock(&global_trace, trace_boot_clock);
+ 		if (ret < 0)
+ 			pr_warning("Trace clock %s not defined, going back to default\n",
+ 				   trace_boot_clock);
+ 	}
++>>>>>>> 939c7a4f04fc (tracing: Introduce saved_cmdlines_size file)
  
  	/*
  	 * register_tracer() might reference current_trace, so it
@@@ -6500,12 -6796,12 +6656,19 @@@
  
  	return 0;
  
++<<<<<<< HEAD
++=======
+ out_free_savedcmd:
+ 	free_saved_cmdlines_buffer(savedcmd);
+ out_free_temp_buffer:
+ 	ring_buffer_free(temp_buffer);
++>>>>>>> 939c7a4f04fc (tracing: Introduce saved_cmdlines_size file)
  out_free_cpumask:
 -	free_cpumask_var(global_trace.tracing_cpumask);
 +	free_percpu(global_trace.trace_buffer.data);
 +#ifdef CONFIG_TRACER_MAX_TRACE
 +	free_percpu(global_trace.max_buffer.data);
 +#endif
 +	free_cpumask_var(tracing_cpumask);
  out_free_buffer_mask:
  	free_cpumask_var(tracing_buffer_mask);
  out:
* Unmerged path kernel/trace/trace.c
