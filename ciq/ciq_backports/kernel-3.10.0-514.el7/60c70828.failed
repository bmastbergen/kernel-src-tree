IB/hfi1: Change EPROM handling to use resource reservation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dean Luick <dean.luick@intel.com>
commit 60c708285c0d3877a78dd8ede24238bc68c09651
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/60c70828.failed

Change EPROM handling to use the new ASIC resource reservation system.

	Reviewed-by: Mitko Haralanov <mitko.haralanov@intel.com>
	Reviewed-by: Easwar Hariharan <easwar.hariharan@intel.com>
	Signed-off-by: Dean Luick <dean.luick@intel.com>
	Signed-off-by: Jubin John <jubin.john@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 60c708285c0d3877a78dd8ede24238bc68c09651)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/eprom.c
diff --cc drivers/staging/hfi1/eprom.c
index 4668c094ceef,bd8771570f81..000000000000
--- a/drivers/staging/hfi1/eprom.c
+++ b/drivers/staging/hfi1/eprom.c
@@@ -105,11 -102,11 +105,19 @@@
  #define EPROM_WP_N BIT_ULL(14)	/* EPROM write line */
  
  /*
++<<<<<<< HEAD:drivers/staging/hfi1/eprom.c
 + * Use the EP mutex to guard against other callers from within the driver.
 + * Also covers usage of eprom_available.
 + */
 +static DEFINE_MUTEX(eprom_mutex);
 +static int eprom_available;	/* default: not available */
++=======
+  * How long to wait for the EPROM to become available, in ms.
+  * The spec 32 Mb EPROM takes around 40s to erase then write.
+  * Double it for safety.
+  */
+ #define EPROM_TIMEOUT 80000 /* ms */
++>>>>>>> 60c708285c0d (IB/hfi1: Change EPROM handling to use resource reservation):drivers/staging/rdma/hfi1/eprom.c
  
  /*
   * Turn on external enable line that allows writing on the flash.
@@@ -376,21 -369,14 +384,32 @@@ int handle_eprom_command(struct file *f
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD:drivers/staging/hfi1/eprom.c
 +	/* lock against other callers touching the ASIC block */
 +	mutex_lock(&eprom_mutex);
 +
 +	/* some platforms do not have an EPROM */
 +	if (!eprom_available) {
 +		ret = -ENOSYS;
 +		goto done_asic;
 +	}
 +
 +	/* lock against the other HFI on another OS */
 +	ret = acquire_hw_mutex(dd);
 +	if (ret) {
 +		dd_dev_err(dd,
 +			"%s: unable to acquire hw mutex, no EPROM support\n",
 +			__func__);
++=======
+ 	/* some devices do not have an EPROM */
+ 	if (!dd->eprom_available)
+ 		return -EOPNOTSUPP;
+ 
+ 	ret = acquire_chip_resource(dd, CR_EPROM, EPROM_TIMEOUT);
+ 	if (ret) {
+ 		dd_dev_err(dd, "%s: unable to acquire EPROM resource\n",
+ 			   __func__);
++>>>>>>> 60c708285c0d (IB/hfi1: Change EPROM handling to use resource reservation):drivers/staging/rdma/hfi1/eprom.c
  		goto done_asic;
  	}
  
@@@ -456,22 -441,15 +474,28 @@@ int eprom_init(struct hfi1_devdata *dd
  	if (dd->pcidev->device != PCI_DEVICE_ID_INTEL0)
  		return 0;
  
++<<<<<<< HEAD:drivers/staging/hfi1/eprom.c
 +	/* lock against other callers */
 +	mutex_lock(&eprom_mutex);
 +	if (eprom_available)	/* already initialized */
 +		goto done_asic;
 +
++=======
++>>>>>>> 60c708285c0d (IB/hfi1: Change EPROM handling to use resource reservation):drivers/staging/rdma/hfi1/eprom.c
  	/*
- 	 * Lock against the other HFI on another OS - the mutex above
- 	 * would have caught anything in this driver.  It is OK if
- 	 * both OSes reset the EPROM - as long as they don't do it at
- 	 * the same time.
+ 	 * It is OK if both HFIs reset the EPROM as long as they don't
+ 	 * do it at the same time.
  	 */
- 	ret = acquire_hw_mutex(dd);
+ 	ret = acquire_chip_resource(dd, CR_EPROM, EPROM_TIMEOUT);
  	if (ret) {
  		dd_dev_err(dd,
++<<<<<<< HEAD:drivers/staging/hfi1/eprom.c
 +			"%s: unable to acquire hw mutex, no EPROM support\n",
 +			__func__);
++=======
+ 			   "%s: unable to acquire EPROM resource, no EPROM support\n",
+ 			   __func__);
++>>>>>>> 60c708285c0d (IB/hfi1: Change EPROM handling to use resource reservation):drivers/staging/rdma/hfi1/eprom.c
  		goto done_asic;
  	}
  
@@@ -487,9 -464,8 +511,13 @@@
  	/* wake the device with command "release powerdown NoID" */
  	write_csr(dd, ASIC_EEP_ADDR_CMD, CMD_RELEASE_POWERDOWN_NOID);
  
++<<<<<<< HEAD:drivers/staging/hfi1/eprom.c
 +	eprom_available = 1;
 +	release_hw_mutex(dd);
++=======
+ 	dd->eprom_available = true;
+ 	release_chip_resource(dd, CR_EPROM);
++>>>>>>> 60c708285c0d (IB/hfi1: Change EPROM handling to use resource reservation):drivers/staging/rdma/hfi1/eprom.c
  done_asic:
- 	mutex_unlock(&eprom_mutex);
  	return ret;
  }
* Unmerged path drivers/staging/hfi1/eprom.c
