sched/wait: Fix signal handling in bit wait helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit 68985633bccb6066bf1803e316fbc6c1f5b796d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/68985633.failed

Vladimir reported getting RCU stall warnings and bisected it back to
commit:

  743162013d40 ("sched: Remove proliferation of wait_on_bit() action functions")

That commit inadvertently reversed the calls to schedule() and signal_pending(),
thereby not handling the case where the signal receives while we sleep.

	Reported-by: Vladimir Murzin <vladimir.murzin@arm.com>
	Tested-by: Vladimir Murzin <vladimir.murzin@arm.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: mark.rutland@arm.com
	Cc: neilb@suse.de
	Cc: oleg@redhat.com
Fixes: 743162013d40 ("sched: Remove proliferation of wait_on_bit() action functions")
Fixes: cbbce8220949 ("SCHED: add some "wait..on_bit...timeout()" interfaces.")
Link: http://lkml.kernel.org/r/20151201130404.GL3816@twins.programming.kicks-ass.net
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 68985633bccb6066bf1803e316fbc6c1f5b796d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/wait.c
diff --cc kernel/wait.c
index d550920e040c,f10bd873e684..000000000000
--- a/kernel/wait.c
+++ b/kernel/wait.c
@@@ -375,3 -580,45 +375,48 @@@ void wake_up_atomic_t(atomic_t *p
  	__wake_up_bit(atomic_t_waitqueue(p), p, WAIT_ATOMIC_T_BIT_NR);
  }
  EXPORT_SYMBOL(wake_up_atomic_t);
++<<<<<<< HEAD:kernel/wait.c
++=======
+ 
+ __sched int bit_wait(struct wait_bit_key *word)
+ {
+ 	schedule();
+ 	if (signal_pending(current))
+ 		return -EINTR;
+ 	return 0;
+ }
+ EXPORT_SYMBOL(bit_wait);
+ 
+ __sched int bit_wait_io(struct wait_bit_key *word)
+ {
+ 	io_schedule();
+ 	if (signal_pending(current))
+ 		return -EINTR;
+ 	return 0;
+ }
+ EXPORT_SYMBOL(bit_wait_io);
+ 
+ __sched int bit_wait_timeout(struct wait_bit_key *word)
+ {
+ 	unsigned long now = READ_ONCE(jiffies);
+ 	if (time_after_eq(now, word->timeout))
+ 		return -EAGAIN;
+ 	schedule_timeout(word->timeout - now);
+ 	if (signal_pending(current))
+ 		return -EINTR;
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(bit_wait_timeout);
+ 
+ __sched int bit_wait_io_timeout(struct wait_bit_key *word)
+ {
+ 	unsigned long now = READ_ONCE(jiffies);
+ 	if (time_after_eq(now, word->timeout))
+ 		return -EAGAIN;
+ 	io_schedule_timeout(word->timeout - now);
+ 	if (signal_pending(current))
+ 		return -EINTR;
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(bit_wait_io_timeout);
++>>>>>>> 68985633bccb (sched/wait: Fix signal handling in bit wait helpers):kernel/sched/wait.c
* Unmerged path kernel/wait.c
