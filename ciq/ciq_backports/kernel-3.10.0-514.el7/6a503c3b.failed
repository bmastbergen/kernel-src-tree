sched/deadline: Fix migration of SCHED_DEADLINE tasks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Luca Abeni <luca.abeni@unitn.it>
commit 6a503c3be937d275113b702e0421e5b0720abe8a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6a503c3b.failed

According to global EDF, tasks should be migrated between runqueues
without checking if their scheduling deadlines and runtimes are valid.
However, SCHED_DEADLINE currently performs such a check:
a migration happens doing:

	deactivate_task(rq, next_task, 0);
	set_task_cpu(next_task, later_rq->cpu);
	activate_task(later_rq, next_task, 0);

which ends up calling dequeue_task_dl(), setting the new CPU, and then
calling enqueue_task_dl().

enqueue_task_dl() then calls enqueue_dl_entity(), which calls
update_dl_entity(), which can modify scheduling deadline and runtime,
breaking global EDF scheduling.

As a result, some of the properties of global EDF are not respected:
for example, a taskset {(30, 80), (40, 80), (120, 170)} scheduled on
two cores can have unbounded response times for the third task even
if 30/80+40/80+120/170 = 1.5809 < 2

This can be fixed by invoking update_dl_entity() only in case of
wakeup, or if this is a new SCHED_DEADLINE task.

	Signed-off-by: Luca Abeni <luca.abeni@unitn.it>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Juri Lelli <juri.lelli@gmail.com>
	Cc: <stable@vger.kernel.org>
	Cc: Dario Faggioli <raistlin@linux.it>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1418813432-20797-2-git-send-email-luca.abeni@unitn.it
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 6a503c3be937d275113b702e0421e5b0720abe8a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
* Unmerged path kernel/sched/deadline.c
* Unmerged path kernel/sched/deadline.c
