USB: EHCI: make ehci-tegra a separate driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] ehci: make ehci-tegra a separate driver (Don Zickus) [1303209]
Rebuild_FUZZ: 93.98%
commit-author Manjunath Goudar <manjunath.goudar@linaro.org>
commit 9fc5f24e43da17df75af75d446c9d89a4bcfce8c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9fc5f24e.failed

Separate the Tegra on-chip host controller driver from
ehci-hcd host code so that it can be built as a separate driver module.
This work is part of enabling multi-platform kernels on ARM.

	Signed-off-by: Manjunath Goudar <manjunath.goudar@linaro.org>
[swarren, reworked Manjunath's patches to split them more logically,
minor re-order of added lines to better match layout of other split-up
HCD drivers and existing code, add MODULE_DEVICE_TABLE, fix
MODULE_LICENSE, adapted to change in earlier patches which removed the
ehci_driver_overrides addition, removed all PM code and solved circular
dependencies.]
	Signed-off-by: Stephen Warren <swarren@nvidia.com>
	Acked-by: Arnd Bergmann <arnd@arndb.de>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Tested-by: Thierry Reding <thierry.reding@gmail.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 9fc5f24e43da17df75af75d446c9d89a4bcfce8c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/ehci-tegra.c
diff --cc drivers/usb/host/ehci-tegra.c
index 614c2089ef38,338c8a56118d..000000000000
--- a/drivers/usb/host/ehci-tegra.c
+++ b/drivers/usb/host/ehci-tegra.c
@@@ -34,10 -42,7 +42,14 @@@
  #define TEGRA_USB2_BASE			0xC5004000
  #define TEGRA_USB3_BASE			0xC5008000
  
++<<<<<<< HEAD
 +/* PORTSC registers */
 +#define TEGRA_USB_PORTSC1			0x184
 +#define TEGRA_USB_PORTSC1_PTS(x)	(((x) & 0x3) << 30)
 +#define TEGRA_USB_PORTSC1_PHCD	(1 << 23)
++=======
+ #define PORT_WAKE_BITS (PORT_WKOC_E|PORT_WKDISC_E|PORT_WKCONN_E)
++>>>>>>> 9fc5f24e43da (USB: EHCI: make ehci-tegra a separate driver)
  
  #define TEGRA_USB_DMA_ALIGN 32
  
@@@ -248,52 -244,6 +270,55 @@@ done
  	return retval;
  }
  
++<<<<<<< HEAD
 +static void tegra_ehci_restart(struct usb_hcd *hcd)
 +{
 +	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 +
 +	ehci_reset(ehci);
 +
 +	/* setup the frame list and Async q heads */
 +	ehci_writel(ehci, ehci->periodic_dma, &ehci->regs->frame_list);
 +	ehci_writel(ehci, (u32)ehci->async->qh_dma, &ehci->regs->async_next);
 +	/* setup the command register and set the controller in RUN mode */
 +	ehci->command &= ~(CMD_LRESET|CMD_IAAD|CMD_PSE|CMD_ASE|CMD_RESET);
 +	ehci->command |= CMD_RUN;
 +	ehci_writel(ehci, ehci->command, &ehci->regs->command);
 +
 +	down_write(&ehci_cf_port_reset_rwsem);
 +	ehci_writel(ehci, FLAG_CF, &ehci->regs->configured_flag);
 +	/* flush posted writes */
 +	ehci_readl(ehci, &ehci->regs->command);
 +	up_write(&ehci_cf_port_reset_rwsem);
 +}
 +
 +static void tegra_ehci_shutdown(struct usb_hcd *hcd)
 +{
 +	struct tegra_ehci_hcd *tegra = dev_get_drvdata(hcd->self.controller);
 +
 +	/* ehci_shutdown touches the USB controller registers, make sure
 +	 * controller has clocks to it */
 +	if (!tegra->host_resumed)
 +		tegra_ehci_power_up(hcd);
 +
 +	ehci_shutdown(hcd);
 +}
 +
 +static int tegra_ehci_setup(struct usb_hcd *hcd)
 +{
 +	struct ehci_hcd *ehci = hcd_to_ehci(hcd);
 +
 +	/* EHCI registers start at offset 0x100 */
 +	ehci->caps = hcd->regs + 0x100;
 +
 +	/* switch to host mode */
 +	hcd->has_tt = 1;
 +
 +	return ehci_setup(hcd);
 +}
 +
++=======
++>>>>>>> 9fc5f24e43da (USB: EHCI: make ehci-tegra a separate driver)
  struct dma_aligned_buffer {
  	void *kmalloc_ptr;
  	void *old_xfer_buffer;
@@@ -373,38 -323,6 +398,41 @@@ static void tegra_ehci_unmap_urb_for_dm
  	free_dma_aligned_buffer(urb);
  }
  
++<<<<<<< HEAD
 +static const struct hc_driver tegra_ehci_hc_driver = {
 +	.description		= hcd_name,
 +	.product_desc		= "Tegra EHCI Host Controller",
 +	.hcd_priv_size		= sizeof(struct ehci_hcd),
 +	.flags			= HCD_USB2 | HCD_MEMORY,
 +
 +	/* standard ehci functions */
 +	.irq			= ehci_irq,
 +	.start			= ehci_run,
 +	.stop			= ehci_stop,
 +	.urb_enqueue		= ehci_urb_enqueue,
 +	.urb_dequeue		= ehci_urb_dequeue,
 +	.endpoint_disable	= ehci_endpoint_disable,
 +	.endpoint_reset		= ehci_endpoint_reset,
 +	.get_frame_number	= ehci_get_frame,
 +	.hub_status_data	= ehci_hub_status_data,
 +	.clear_tt_buffer_complete = ehci_clear_tt_buffer_complete,
 +	.relinquish_port	= ehci_relinquish_port,
 +	.port_handed_over	= ehci_port_handed_over,
 +
 +	/* modified ehci functions for tegra */
 +	.reset			= tegra_ehci_setup,
 +	.shutdown		= tegra_ehci_shutdown,
 +	.map_urb_for_dma	= tegra_ehci_map_urb_for_dma,
 +	.unmap_urb_for_dma	= tegra_ehci_unmap_urb_for_dma,
 +	.hub_control		= tegra_ehci_hub_control,
 +#ifdef CONFIG_PM
 +	.bus_suspend		= ehci_bus_suspend,
 +	.bus_resume		= ehci_bus_resume,
 +#endif
 +};
 +
++=======
++>>>>>>> 9fc5f24e43da (USB: EHCI: make ehci-tegra a separate driver)
  static int setup_vbus_gpio(struct platform_device *pdev,
  			   struct tegra_ehci_platform_data *pdata)
  {
@@@ -697,6 -400,30 +725,21 @@@ static int tegra_ehci_probe(struct plat
  	tegra->needs_double_reset = of_property_read_bool(pdev->dev.of_node,
  		"nvidia,needs-double-reset");
  
++<<<<<<< HEAD
++=======
+ 	hcd = usb_create_hcd(&tegra_ehci_hc_driver, &pdev->dev,
+ 					dev_name(&pdev->dev));
+ 	if (!hcd) {
+ 		dev_err(&pdev->dev, "Unable to create HCD\n");
+ 		err = -ENOMEM;
+ 		goto cleanup_clk;
+ 	}
+ 	tegra->ehci = hcd_to_ehci(hcd);
+ 
+ 	hcd->has_tt = 1;
+ 	hcd->phy = u_phy;
+ 
++>>>>>>> 9fc5f24e43da (USB: EHCI: make ehci-tegra a separate driver)
  	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
  	if (!res) {
  		dev_err(&pdev->dev, "Failed to get I/O memory\n");
@@@ -709,45 -436,16 +752,46 @@@
  	if (!hcd->regs) {
  		dev_err(&pdev->dev, "Failed to remap I/O memory\n");
  		err = -ENOMEM;
 -		goto cleanup_hcd_create;
 +		goto fail_io;
  	}
+ 	tegra->ehci->caps = hcd->regs + 0x100;
  
 -	err = usb_phy_init(hcd->phy);
 -	if (err) {
 -		dev_err(&pdev->dev, "Failed to initialize phy\n");
 -		goto cleanup_hcd_create;
 +	/* This is pretty ugly and needs to be fixed when we do only
 +	 * device-tree probing. Old code relies on the platform_device
 +	 * numbering that we lack for device-tree-instantiated devices.
 +	 */
 +	if (instance < 0) {
 +		switch (res->start) {
 +		case TEGRA_USB_BASE:
 +			instance = 0;
 +			break;
 +		case TEGRA_USB2_BASE:
 +			instance = 1;
 +			break;
 +		case TEGRA_USB3_BASE:
 +			instance = 2;
 +			break;
 +		default:
 +			err = -ENODEV;
 +			dev_err(&pdev->dev, "unknown usb instance\n");
 +			goto fail_io;
 +		}
 +	}
 +
 +	tegra->phy = tegra_usb_phy_open(&pdev->dev, instance, hcd->regs,
 +					pdata->phy_config,
 +					TEGRA_USB_PHY_MODE_HOST,
 +					tegra_ehci_set_pts,
 +					tegra_ehci_set_phcd);
 +	if (IS_ERR(tegra->phy)) {
 +		dev_err(&pdev->dev, "Failed to open USB phy\n");
 +		err = -ENXIO;
 +		goto fail_io;
  	}
  
 +	hcd->phy = u_phy = &tegra->phy->u_phy;
 +	usb_phy_init(hcd->phy);
 +
  	u_phy->otg = devm_kzalloc(&pdev->dev, sizeof(struct usb_otg),
  			     GFP_KERNEL);
  	if (!u_phy->otg) {
@@@ -760,12 -458,9 +804,15 @@@
  	err = usb_phy_set_suspend(hcd->phy, 0);
  	if (err) {
  		dev_err(&pdev->dev, "Failed to power on the phy\n");
 -		goto cleanup_phy;
 +		goto fail_phy;
  	}
  
++<<<<<<< HEAD
 +	tegra->host_resumed = 1;
 +	tegra->ehci = hcd_to_ehci(hcd);
 +
++=======
++>>>>>>> 9fc5f24e43da (USB: EHCI: make ehci-tegra a separate driver)
  	irq = platform_get_irq(pdev, 0);
  	if (!irq) {
  		dev_err(&pdev->dev, "Failed to get IRQ\n");
@@@ -850,10 -535,50 +897,53 @@@ static struct platform_driver tegra_ehc
  	.remove		= tegra_ehci_remove,
  	.shutdown	= tegra_ehci_hcd_shutdown,
  	.driver		= {
- 		.name	= "tegra-ehci",
+ 		.name	= DRV_NAME,
  		.of_match_table = tegra_ehci_of_match,
 +#ifdef CONFIG_PM
 +		.pm	= &tegra_ehci_pm_ops,
 +#endif
  	}
  };
+ 
+ static const struct ehci_driver_overrides tegra_overrides __initconst = {
+ 	.extra_priv_size	= sizeof(struct tegra_ehci_hcd),
+ };
+ 
+ static int __init ehci_tegra_init(void)
+ {
+ 	if (usb_disabled())
+ 		return -ENODEV;
+ 
+ 	pr_info(DRV_NAME ": " DRIVER_DESC "\n");
+ 
+ 	ehci_init_driver(&tegra_ehci_hc_driver, &tegra_overrides);
+ 
+ 	/*
+ 	 * The Tegra HW has some unusual quirks, which require Tegra-specific
+ 	 * workarounds. We override certain hc_driver functions here to
+ 	 * achieve that. We explicitly do not enhance ehci_driver_overrides to
+ 	 * allow this more easily, since this is an unusual case, and we don't
+ 	 * want to encourage others to override these functions by making it
+ 	 * too easy.
+ 	 */
+ 
+ 	orig_hub_control = tegra_ehci_hc_driver.hub_control;
+ 
+ 	tegra_ehci_hc_driver.map_urb_for_dma = tegra_ehci_map_urb_for_dma;
+ 	tegra_ehci_hc_driver.unmap_urb_for_dma = tegra_ehci_unmap_urb_for_dma;
+ 	tegra_ehci_hc_driver.hub_control = tegra_ehci_hub_control;
+ 
+ 	return platform_driver_register(&tegra_ehci_driver);
+ }
+ module_init(ehci_tegra_init);
+ 
+ static void __exit ehci_tegra_cleanup(void)
+ {
+ 	platform_driver_unregister(&tegra_ehci_driver);
+ }
+ module_exit(ehci_tegra_cleanup);
+ 
+ MODULE_DESCRIPTION(DRIVER_DESC);
+ MODULE_LICENSE("GPL");
+ MODULE_ALIAS("platform:" DRV_NAME);
+ MODULE_DEVICE_TABLE(of, tegra_ehci_of_match);
diff --git a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
index af8f9d880c00..56f659df1b0c 100644
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@ -188,7 +188,7 @@ config USB_EHCI_MSM
 	  has an external PHY.
 
 config USB_EHCI_TEGRA
-       boolean "NVIDIA Tegra HCD support"
+       tristate "NVIDIA Tegra HCD support"
        depends on ARCH_TEGRA
        select USB_EHCI_ROOT_HUB_TT
        select USB_PHY
diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index 05b2bb43913f..dd27d4bca843 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -35,6 +35,7 @@ obj-$(CONFIG_USB_EHCI_HCD_SPEAR)	+= ehci-spear.o
 obj-$(CONFIG_USB_EHCI_S5P)	+= ehci-s5p.o
 obj-$(CONFIG_USB_EHCI_HCD_AT91) += ehci-atmel.o
 obj-$(CONFIG_USB_EHCI_MSM)	+= ehci-msm.o
+obj-$(CONFIG_USB_EHCI_TEGRA)	+= ehci-tegra.o
 
 obj-$(CONFIG_USB_OXU210HP_HCD)	+= oxu210hp-hcd.o
 obj-$(CONFIG_USB_ISP116X_HCD)	+= isp116x-hcd.o
diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index e18f0a4a08c4..35ed38fd9b1f 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -1295,11 +1295,6 @@ MODULE_LICENSE ("GPL");
 #define	PLATFORM_DRIVER		ehci_hcd_msp_driver
 #endif
 
-#ifdef CONFIG_USB_EHCI_TEGRA
-#include "ehci-tegra.c"
-#define PLATFORM_DRIVER		tegra_ehci_driver
-#endif
-
 #ifdef CONFIG_SPARC_LEON
 #include "ehci-grlib.c"
 #define PLATFORM_DRIVER		ehci_grlib_driver
* Unmerged path drivers/usb/host/ehci-tegra.c
