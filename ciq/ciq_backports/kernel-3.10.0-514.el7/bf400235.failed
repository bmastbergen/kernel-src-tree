staging/rdma/hfi1: Avoid using upstream component if it is not accessible

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [infiniband] rdma/hfi1: Avoid using upstream component if it is not accessible (Alex Estrin) [1272062 1273170]
Rebuild_FUZZ: 94.20%
commit-author Kaike Wan <kaike.wan@intel.com>
commit bf400235f392eabf60c865c95da823727cb00def
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bf400235.failed

When the hfi1 device is assigned to a VM (eg KVM), the hfi1 driver has
no access to the upstream component and therefore cannot use it to perform
some operations, such as secondary bus reset. As a result, the hfi1 driver
cannot perform the pcie Gen3 transition. Instead, those operation should
be done in the host environment, preferrably done during the Option ROM
initialization. Similarly, the hfi1 driver cannot support ASPM and tune
the pcie capability under this circumstance.

	Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Kaike Wan <kaike.wan@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit bf400235f392eabf60c865c95da823727cb00def)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/pcie.c
#	drivers/staging/rdma/hfi1/aspm.h
diff --cc drivers/staging/hfi1/pcie.c
index 986a471703d4,1adfa8bfaf2b..000000000000
--- a/drivers/staging/hfi1/pcie.c
+++ b/drivers/staging/hfi1/pcie.c
@@@ -985,10 -989,14 +992,21 @@@ int do_pcie_gen3_transition(struct hfi1
  	}
  
  	/*
++<<<<<<< HEAD:drivers/staging/hfi1/pcie.c
 +	 * A0 needs an additional SBR
 +	 */
 +	if (is_ax(dd))
 +		nsbr++;
++=======
+ 	 * The driver cannot do the transition if it has no access to the
+ 	 * upstream component
+ 	 */
+ 	if (!parent) {
+ 		dd_dev_info(dd, "%s: No upstream, Can't do gen3 transition\n",
+ 			    __func__);
+ 		return 0;
+ 	}
++>>>>>>> bf400235f392 (staging/rdma/hfi1: Avoid using upstream component if it is not accessible):drivers/staging/rdma/hfi1/pcie.c
  
  	/*
  	 * Do the Gen3 transition.  Steps are those of the PCIe Gen3
@@@ -1163,10 -1174,9 +1181,9 @@@ retry
  	 * that it is Gen3 capable earlier.
  	 */
  	dd_dev_info(dd, "%s: setting parent target link speed\n", __func__);
- 	parent = dd->pcidev->bus->self;
  	pcie_capability_read_word(parent, PCI_EXP_LNKCTL2, &lnkctl2);
  	dd_dev_info(dd, "%s: ..old link control2: 0x%x\n", __func__,
 -		    (u32)lnkctl2);
 +		(u32)lnkctl2);
  	/* only write to parent if target is not as high as ours */
  	if ((lnkctl2 & LNKCTL2_TARGET_LINK_SPEED_MASK) < target_vector) {
  		lnkctl2 &= ~LNKCTL2_TARGET_LINK_SPEED_MASK;
* Unmerged path drivers/staging/rdma/hfi1/aspm.h
* Unmerged path drivers/staging/hfi1/pcie.c
* Unmerged path drivers/staging/rdma/hfi1/aspm.h
