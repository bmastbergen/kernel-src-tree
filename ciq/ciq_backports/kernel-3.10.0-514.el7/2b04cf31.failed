cxl: Rename some bare-metal specific functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Frederic Barrat <fbarrat@linux.vnet.ibm.com>
commit 2b04cf310ba8c123e9957cfab80274e7606bf53c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2b04cf31.failed

Rename a few functions, changing the 'cxl_' prefix to either
'cxl_pci_' or 'cxl_native_', to make clear that the implementation is
bare-metal specific.

Those functions will have an equivalent implementation for a guest in
a later patch.

Co-authored-by: Christophe Lombard <clombard@linux.vnet.ibm.com>
	Signed-off-by: Frederic Barrat <fbarrat@linux.vnet.ibm.com>
	Signed-off-by: Christophe Lombard <clombard@linux.vnet.ibm.com>
	Reviewed-by: Manoj Kumar <manoj@linux.vnet.ibm.com>
	Acked-by: Ian Munsie <imunsie@au1.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 2b04cf310ba8c123e9957cfab80274e7606bf53c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/cxl/cxl.h
#	drivers/misc/cxl/native.c
#	drivers/misc/cxl/pci.c
diff --cc drivers/misc/cxl/cxl.h
index 0a60a9644195,02065b4defa2..000000000000
--- a/drivers/misc/cxl/cxl.h
+++ b/drivers/misc/cxl/cxl.h
@@@ -623,12 -623,7 +623,16 @@@ static inline u64 cxl_p2n_read(struct c
  		return ~0ULL;
  }
  
++<<<<<<< HEAD
 +u64 cxl_afu_cr_read64(struct cxl_afu *afu, int cr, u64 off);
 +u32 cxl_afu_cr_read32(struct cxl_afu *afu, int cr, u64 off);
 +u16 cxl_afu_cr_read16(struct cxl_afu *afu, int cr, u64 off);
 +u8 cxl_afu_cr_read8(struct cxl_afu *afu, int cr, u64 off);
 +
 +ssize_t cxl_afu_read_err_buffer(struct cxl_afu *afu, char *buf,
++=======
+ ssize_t cxl_pci_afu_read_err_buffer(struct cxl_afu *afu, char *buf,
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  				loff_t off, size_t count);
  
  
@@@ -666,18 -661,14 +670,18 @@@ void cxl_sysfs_afu_m_remove(struct cxl_
  
  struct cxl *cxl_alloc_adapter(void);
  struct cxl_afu *cxl_alloc_afu(struct cxl *adapter, int slice);
 +
 +int cxl_afu_activate_mode(struct cxl_afu *afu, int mode);
 +int _cxl_afu_deactivate_mode(struct cxl_afu *afu, int mode);
 +int cxl_afu_deactivate_mode(struct cxl_afu *afu);
  int cxl_afu_select_best_mode(struct cxl_afu *afu);
  
- int cxl_register_psl_irq(struct cxl_afu *afu);
- void cxl_release_psl_irq(struct cxl_afu *afu);
- int cxl_register_psl_err_irq(struct cxl *adapter);
- void cxl_release_psl_err_irq(struct cxl *adapter);
- int cxl_register_serr_irq(struct cxl_afu *afu);
- void cxl_release_serr_irq(struct cxl_afu *afu);
+ int cxl_native_register_psl_irq(struct cxl_afu *afu);
+ void cxl_native_release_psl_irq(struct cxl_afu *afu);
+ int cxl_native_register_psl_err_irq(struct cxl *adapter);
+ void cxl_native_release_psl_err_irq(struct cxl *adapter);
+ int cxl_native_register_serr_irq(struct cxl_afu *afu);
+ void cxl_native_release_serr_irq(struct cxl_afu *afu);
  int afu_register_irqs(struct cxl_context *ctx, u32 count);
  void afu_release_irqs(struct cxl_context *ctx, void *cookie);
  void afu_irq_name_free(struct cxl_context *ctx);
diff --cc drivers/misc/cxl/native.c
index 3103e3327ea6,b8a6ad55a5c3..000000000000
--- a/drivers/misc/cxl/native.c
+++ b/drivers/misc/cxl/native.c
@@@ -80,7 -80,7 +80,11 @@@ int cxl_afu_disable(struct cxl_afu *afu
  }
  
  /* This will disable as well as reset */
++<<<<<<< HEAD
 +int __cxl_afu_reset(struct cxl_afu *afu)
++=======
+ static int native_afu_reset(struct cxl_afu *afu)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	pr_devel("AFU reset request\n");
  
@@@ -90,9 -90,9 +94,13 @@@
  			   false);
  }
  
++<<<<<<< HEAD
 +int cxl_afu_check_and_enable(struct cxl_afu *afu)
++=======
+ static int native_afu_check_and_enable(struct cxl_afu *afu)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
 -	if (!cxl_ops->link_ok(afu->adapter)) {
 +	if (!cxl_adapter_link_ok(afu->adapter)) {
  		WARN(1, "Refusing to enable afu while link down!\n");
  		return -EIO;
  	}
@@@ -631,7 -631,7 +639,11 @@@ static int deactivate_dedicated_process
  	return 0;
  }
  
++<<<<<<< HEAD
 +int _cxl_afu_deactivate_mode(struct cxl_afu *afu, int mode)
++=======
+ static int native_afu_deactivate_mode(struct cxl_afu *afu, int mode)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	if (mode == CXL_MODE_DIRECTED)
  		return deactivate_afu_directed(afu);
@@@ -640,12 -640,7 +652,16 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +int cxl_afu_deactivate_mode(struct cxl_afu *afu)
 +{
 +	return _cxl_afu_deactivate_mode(afu, afu->current_mode);
 +}
 +
 +int cxl_afu_activate_mode(struct cxl_afu *afu, int mode)
++=======
+ static int native_afu_activate_mode(struct cxl_afu *afu, int mode)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	if (!mode)
  		return 0;
@@@ -665,9 -660,10 +681,14 @@@
  	return -EINVAL;
  }
  
++<<<<<<< HEAD
 +int cxl_attach_process(struct cxl_context *ctx, bool kernel, u64 wed, u64 amr)
++=======
+ static int native_attach_process(struct cxl_context *ctx, bool kernel,
+ 				u64 wed, u64 amr)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
 -	if (!cxl_ops->link_ok(ctx->afu->adapter)) {
 +	if (!cxl_adapter_link_ok(ctx->afu->adapter)) {
  		WARN(1, "Device link is down, refusing to attach process!\n");
  		return -EIO;
  	}
@@@ -702,7 -698,7 +723,11 @@@ static inline int detach_process_native
  	return 0;
  }
  
++<<<<<<< HEAD
 +int cxl_detach_process(struct cxl_context *ctx)
++=======
+ static int native_detach_process(struct cxl_context *ctx)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	trace_cxl_detach(ctx);
  
@@@ -734,7 -730,8 +759,12 @@@ static int native_get_irq_info(struct c
  	return 0;
  }
  
++<<<<<<< HEAD
 +irqreturn_t handle_psl_slice_error(struct cxl_context *ctx, u64 dsisr, u64 errstat)
++=======
+ static irqreturn_t native_handle_psl_slice_error(struct cxl_context *ctx,
+ 						u64 dsisr, u64 errstat)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	u64 fir1, fir2, fir_slice, serr, afu_debug;
  
@@@ -950,7 -947,7 +980,11 @@@ static void recover_psl_err(struct cxl_
  	cxl_p2n_write(afu, CXL_PSL_ErrStat_An, errstat);
  }
  
++<<<<<<< HEAD
 +int cxl_ack_irq(struct cxl_context *ctx, u64 tfc, u64 psl_reset_mask)
++=======
+ static int native_ack_irq(struct cxl_context *ctx, u64 tfc, u64 psl_reset_mask)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	trace_cxl_psl_irq_ack(ctx, tfc);
  	if (tfc)
@@@ -966,38 -963,74 +1000,94 @@@ int cxl_check_error(struct cxl_afu *afu
  	return (cxl_p1n_read(afu, CXL_PSL_SCNTL_An) == ~0ULL);
  }
  
++<<<<<<< HEAD
 +u64 cxl_afu_cr_read64(struct cxl_afu *afu, int cr, u64 off)
++=======
+ static int native_afu_cr_read64(struct cxl_afu *afu, int cr, u64 off, u64 *out)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
 -	if (unlikely(!cxl_ops->link_ok(afu->adapter)))
 -		return -EIO;
 -	if (unlikely(off >= afu->crs_len))
 -		return -ERANGE;
 -	*out = in_le64(afu->afu_desc_mmio + afu->crs_offset +
 -		(cr * afu->crs_len) + off);
 -	return 0;
 +	if (likely(cxl_adapter_link_ok(afu->adapter)))
 +		return in_le64((afu)->afu_desc_mmio + (afu)->crs_offset +
 +			       ((cr) * (afu)->crs_len) + (off));
 +	else
 +		return ~0ULL;
  }
  
++<<<<<<< HEAD
 +u32 cxl_afu_cr_read32(struct cxl_afu *afu, int cr, u64 off)
++=======
+ static int native_afu_cr_read32(struct cxl_afu *afu, int cr, u64 off, u32 *out)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
 -	if (unlikely(!cxl_ops->link_ok(afu->adapter)))
 -		return -EIO;
 -	if (unlikely(off >= afu->crs_len))
 -		return -ERANGE;
 -	*out = in_le32(afu->afu_desc_mmio + afu->crs_offset +
 -		(cr * afu->crs_len) + off);
 -	return 0;
 +	if (likely(cxl_adapter_link_ok(afu->adapter)))
 +		return in_le32((afu)->afu_desc_mmio + (afu)->crs_offset +
 +			       ((cr) * (afu)->crs_len) + (off));
 +	else
 +		return 0xffffffff;
  }
  
++<<<<<<< HEAD
 +u16 cxl_afu_cr_read16(struct cxl_afu *afu, int cr, u64 off)
++=======
+ static int native_afu_cr_read16(struct cxl_afu *afu, int cr, u64 off, u16 *out)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	u64 aligned_off = off & ~0x3L;
  	u32 val;
 -	int rc;
  
++<<<<<<< HEAD
 +	val = cxl_afu_cr_read32(afu, cr, aligned_off);
 +	return (val >> ((off & 0x2) * 8)) & 0xffff;
 +}
 +
 +u8 cxl_afu_cr_read8(struct cxl_afu *afu, int cr, u64 off)
++=======
+ 	rc = native_afu_cr_read32(afu, cr, aligned_off, &val);
+ 	if (!rc)
+ 		*out = (val >> ((off & 0x3) * 8)) & 0xffff;
+ 	return rc;
+ }
+ 
+ static int native_afu_cr_read8(struct cxl_afu *afu, int cr, u64 off, u8 *out)
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  {
  	u64 aligned_off = off & ~0x3L;
  	u32 val;
 -	int rc;
  
++<<<<<<< HEAD
 +	val = cxl_afu_cr_read32(afu, cr, aligned_off);
 +	return (val >> ((off & 0x3) * 8)) & 0xff;
 +}
++=======
+ 	rc = native_afu_cr_read32(afu, cr, aligned_off, &val);
+ 	if (!rc)
+ 		*out = (val >> ((off & 0x3) * 8)) & 0xff;
+ 	return rc;
+ }
+ 
+ const struct cxl_backend_ops cxl_native_ops = {
+ 	.module = THIS_MODULE,
+ 	.adapter_reset = cxl_pci_reset,
+ 	.alloc_one_irq = cxl_pci_alloc_one_irq,
+ 	.release_one_irq = cxl_pci_release_one_irq,
+ 	.alloc_irq_ranges = cxl_pci_alloc_irq_ranges,
+ 	.release_irq_ranges = cxl_pci_release_irq_ranges,
+ 	.setup_irq = cxl_pci_setup_irq,
+ 	.handle_psl_slice_error = native_handle_psl_slice_error,
+ 	.psl_interrupt = NULL,
+ 	.ack_irq = native_ack_irq,
+ 	.attach_process = native_attach_process,
+ 	.detach_process = native_detach_process,
+ 	.link_ok = cxl_adapter_link_ok,
+ 	.release_afu = cxl_pci_release_afu,
+ 	.afu_read_err_buffer = cxl_pci_afu_read_err_buffer,
+ 	.afu_check_and_enable = native_afu_check_and_enable,
+ 	.afu_activate_mode = native_afu_activate_mode,
+ 	.afu_deactivate_mode = native_afu_deactivate_mode,
+ 	.afu_reset = native_afu_reset,
+ 	.afu_cr_read8 = native_afu_cr_read8,
+ 	.afu_cr_read16 = native_afu_cr_read16,
+ 	.afu_cr_read32 = native_afu_cr_read32,
+ 	.afu_cr_read64 = native_afu_cr_read64,
+ };
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
diff --cc drivers/misc/cxl/pci.c
index c7dc27fa6ee0,23b84c5d9453..000000000000
--- a/drivers/misc/cxl/pci.c
+++ b/drivers/misc/cxl/pci.c
@@@ -917,9 -880,9 +919,9 @@@ static void cxl_pci_remove_afu(struct c
  	spin_unlock(&afu->adapter->afu_list_lock);
  
  	cxl_context_detach_all(afu);
 -	cxl_ops->afu_deactivate_mode(afu, afu->current_mode);
 +	cxl_afu_deactivate_mode(afu);
  
- 	cxl_deconfigure_afu(afu);
+ 	pci_deconfigure_afu(afu);
  	device_unregister(&afu->dev);
  }
  
@@@ -1439,8 -1402,8 +1441,13 @@@ static pci_ers_result_t cxl_pci_error_d
  			return result;
  
  		cxl_context_detach_all(afu);
++<<<<<<< HEAD
 +		cxl_afu_deactivate_mode(afu);
 +		cxl_deconfigure_afu(afu);
++=======
+ 		cxl_ops->afu_deactivate_mode(afu, afu->current_mode);
+ 		pci_deconfigure_afu(afu);
++>>>>>>> 2b04cf310ba8 (cxl: Rename some bare-metal specific functions)
  	}
  	cxl_deconfigure_adapter(adapter);
  
* Unmerged path drivers/misc/cxl/cxl.h
* Unmerged path drivers/misc/cxl/native.c
* Unmerged path drivers/misc/cxl/pci.c
