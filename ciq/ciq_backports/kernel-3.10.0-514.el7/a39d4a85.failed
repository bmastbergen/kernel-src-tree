printk: add and use LOGLEVEL_<level> defines for KERN_<LEVEL> equivalents

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Joe Perches <joe@perches.com>
commit a39d4a857d4bb0a62d6655c0d69f7387fe1ad160
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a39d4a85.failed

Use #defines instead of magic values.

	Signed-off-by: Joe Perches <joe@perches.com>
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Jason Baron <jbaron@akamai.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a39d4a857d4bb0a62d6655c0d69f7387fe1ad160)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/storage/debug.c
#	kernel/printk.c
#	lib/dynamic_debug.c
diff --cc drivers/usb/storage/debug.c
index bef3d1311e6d,2d81e1d8ee30..000000000000
--- a/drivers/usb/storage/debug.c
+++ b/drivers/usb/storage/debug.c
@@@ -183,8 -187,11 +183,12 @@@ void usb_stor_dbg(const struct us_data 
  
  	va_start(args, fmt);
  
++<<<<<<< HEAD
 +	dev_vprintk_emit(7, &us->pusb_dev->dev, fmt, args);
++=======
+ 	r = dev_vprintk_emit(LOGLEVEL_DEBUG, &us->pusb_dev->dev, fmt, args);
++>>>>>>> a39d4a857d4b (printk: add and use LOGLEVEL_<level> defines for KERN_<LEVEL> equivalents)
  
  	va_end(args);
 -
 -	return r;
  }
  EXPORT_SYMBOL_GPL(usb_stor_dbg);
diff --cc kernel/printk.c
index 6881a4f0352d,1b7092dbb590..000000000000
--- a/kernel/printk.c
+++ b/kernel/printk.c
@@@ -1517,6 -1622,14 +1517,17 @@@ asmlinkage int vprintk_emit(int facilit
  	unsigned long flags;
  	int this_cpu;
  	int printed_len = 0;
++<<<<<<< HEAD:kernel/printk.c
++=======
+ 	bool in_sched = false;
+ 	/* cpu currently holding logbuf_lock in this function */
+ 	static volatile unsigned int logbuf_cpu = UINT_MAX;
+ 
+ 	if (level == LOGLEVEL_SCHED) {
+ 		level = LOGLEVEL_DEFAULT;
+ 		in_sched = true;
+ 	}
++>>>>>>> a39d4a857d4b (printk: add and use LOGLEVEL_<level> defines for KERN_<LEVEL> equivalents):kernel/printk/printk.c
  
  	boot_delay_msec(level);
  	printk_delay();
@@@ -1578,13 -1692,17 +1589,14 @@@
  			const char *end_of_header = printk_skip_level(text);
  			switch (kern_level) {
  			case '0' ... '7':
- 				if (level == -1)
+ 				if (level == LOGLEVEL_DEFAULT)
  					level = kern_level - '0';
+ 				/* fallthrough */
  			case 'd':	/* KERN_DEFAULT */
  				lflags |= LOG_PREFIX;
 +			case 'c':	/* KERN_CONT */
 +				break;
  			}
 -			/*
 -			 * No need to check length here because vscnprintf
 -			 * put '\0' at the end of the string. Only valid and
 -			 * newly printed level is detected.
 -			 */
  			text_len -= end_of_header - text;
  			text = (char *)end_of_header;
  		}
@@@ -2504,23 -2622,19 +2516,27 @@@ void wake_up_klogd(void
  	preempt_enable();
  }
  
 -int printk_deferred(const char *fmt, ...)
 +int printk_sched(const char *fmt, ...)
  {
 +	unsigned long flags;
  	va_list args;
 +	char *buf;
  	int r;
  
 -	preempt_disable();
 +	local_irq_save(flags);
 +	buf = __get_cpu_var(printk_sched_buf);
 +
  	va_start(args, fmt);
++<<<<<<< HEAD:kernel/printk.c
 +	r = vsnprintf(buf, PRINTK_BUF_SIZE, fmt, args);
++=======
+ 	r = vprintk_emit(0, LOGLEVEL_SCHED, NULL, 0, fmt, args);
++>>>>>>> a39d4a857d4b (printk: add and use LOGLEVEL_<level> defines for KERN_<LEVEL> equivalents):kernel/printk/printk.c
  	va_end(args);
  
 -	__this_cpu_or(printk_pending, PRINTK_PENDING_OUTPUT);
 -	irq_work_queue(this_cpu_ptr(&wake_up_klogd_work));
 -	preempt_enable();
 +	__this_cpu_or(printk_pending, PRINTK_PENDING_SCHED);
 +	irq_work_queue(&__get_cpu_var(wake_up_klogd_work));
 +	local_irq_restore(flags);
  
  	return r;
  }
diff --cc lib/dynamic_debug.c
index 99fec3ae405a,527799d44476..000000000000
--- a/lib/dynamic_debug.c
+++ b/lib/dynamic_debug.c
@@@ -578,10 -576,10 +578,17 @@@ int __dynamic_dev_dbg(struct _ddebug *d
  	} else {
  		char buf[PREFIX_SIZE];
  
++<<<<<<< HEAD
 +		res = dev_printk_emit(7, dev, "%s%s %s: %pV",
 +				      dynamic_emit_prefix(descriptor, buf),
 +				      dev_driver_string(dev), dev_name(dev),
 +				      &vaf);
++=======
+ 		dev_printk_emit(LOGLEVEL_DEBUG, dev, "%s%s %s: %pV",
+ 				dynamic_emit_prefix(descriptor, buf),
+ 				dev_driver_string(dev), dev_name(dev),
+ 				&vaf);
++>>>>>>> a39d4a857d4b (printk: add and use LOGLEVEL_<level> defines for KERN_<LEVEL> equivalents)
  	}
  
  	va_end(args);
@@@ -610,16 -605,18 +617,26 @@@ int __dynamic_netdev_dbg(struct _ddebu
  	if (dev && dev->dev.parent) {
  		char buf[PREFIX_SIZE];
  
++<<<<<<< HEAD
 +		res = dev_printk_emit(7, dev->dev.parent,
 +				      "%s%s %s %s: %pV",
 +				      dynamic_emit_prefix(descriptor, buf),
 +				      dev_driver_string(dev->dev.parent),
 +				      dev_name(dev->dev.parent),
 +				      netdev_name(dev), &vaf);
++=======
+ 		dev_printk_emit(LOGLEVEL_DEBUG, dev->dev.parent,
+ 				"%s%s %s %s%s: %pV",
+ 				dynamic_emit_prefix(descriptor, buf),
+ 				dev_driver_string(dev->dev.parent),
+ 				dev_name(dev->dev.parent),
+ 				netdev_name(dev), netdev_reg_state(dev),
+ 				&vaf);
++>>>>>>> a39d4a857d4b (printk: add and use LOGLEVEL_<level> defines for KERN_<LEVEL> equivalents)
  	} else if (dev) {
 -		printk(KERN_DEBUG "%s%s: %pV", netdev_name(dev),
 -		       netdev_reg_state(dev), &vaf);
 +		res = printk(KERN_DEBUG "%s: %pV", netdev_name(dev), &vaf);
  	} else {
 -		printk(KERN_DEBUG "(NULL net_device): %pV", &vaf);
 +		res = printk(KERN_DEBUG "(NULL net_device): %pV", &vaf);
  	}
  
  	va_end(args);
* Unmerged path drivers/usb/storage/debug.c
diff --git a/include/linux/kern_levels.h b/include/linux/kern_levels.h
index 866caaa9e2bb..c2ce155d83cc 100644
--- a/include/linux/kern_levels.h
+++ b/include/linux/kern_levels.h
@@ -22,4 +22,17 @@
  */
 #define KERN_CONT	""
 
+/* integer equivalents of KERN_<LEVEL> */
+#define LOGLEVEL_SCHED		-2	/* Deferred messages from sched code
+					 * are set to this special level */
+#define LOGLEVEL_DEFAULT	-1	/* default (or last) loglevel */
+#define LOGLEVEL_EMERG		0	/* system is unusable */
+#define LOGLEVEL_ALERT		1	/* action must be taken immediately */
+#define LOGLEVEL_CRIT		2	/* critical conditions */
+#define LOGLEVEL_ERR		3	/* error conditions */
+#define LOGLEVEL_WARNING	4	/* warning conditions */
+#define LOGLEVEL_NOTICE		5	/* normal but significant condition */
+#define LOGLEVEL_INFO		6	/* informational */
+#define LOGLEVEL_DEBUG		7	/* debug-level messages */
+
 #endif
* Unmerged path kernel/printk.c
* Unmerged path lib/dynamic_debug.c
