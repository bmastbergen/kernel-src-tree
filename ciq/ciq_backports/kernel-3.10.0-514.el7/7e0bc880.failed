HID: wiimote: replace hid_output_raw_report with hid_hw_output_report for output requests

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hid] wiimote: replace hid_output_raw_report with hid_hw_output_report for output requests (Benjamin Tissoires) [1311883]
Rebuild_FUZZ: 97.11%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 7e0bc880fce51ba3bd9128b8df9dc59567c5f73a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7e0bc880.failed

For BT transport layer,
  ret = hid_output_raw_report(A, B, C, HID_OUTPUT_REPORT);
is equivalent to
  ret = hid_hw_output_report(A, B, C);

So use the new API where available

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 7e0bc880fce51ba3bd9128b8df9dc59567c5f73a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-wiimote-core.c
diff --cc drivers/hid/hid-wiimote-core.c
index e5ee1f20bbd9,d00391418d1a..000000000000
--- a/drivers/hid/hid-wiimote-core.c
+++ b/drivers/hid/hid-wiimote-core.c
@@@ -22,54 -20,22 +22,58 @@@
  #include "hid-ids.h"
  #include "hid-wiimote.h"
  
 -/* output queue handling */
 +enum wiiproto_keys {
 +	WIIPROTO_KEY_LEFT,
 +	WIIPROTO_KEY_RIGHT,
 +	WIIPROTO_KEY_UP,
 +	WIIPROTO_KEY_DOWN,
 +	WIIPROTO_KEY_PLUS,
 +	WIIPROTO_KEY_MINUS,
 +	WIIPROTO_KEY_ONE,
 +	WIIPROTO_KEY_TWO,
 +	WIIPROTO_KEY_A,
 +	WIIPROTO_KEY_B,
 +	WIIPROTO_KEY_HOME,
 +	WIIPROTO_KEY_COUNT
 +};
 +
 +static __u16 wiiproto_keymap[] = {
 +	KEY_LEFT,	/* WIIPROTO_KEY_LEFT */
 +	KEY_RIGHT,	/* WIIPROTO_KEY_RIGHT */
 +	KEY_UP,		/* WIIPROTO_KEY_UP */
 +	KEY_DOWN,	/* WIIPROTO_KEY_DOWN */
 +	KEY_NEXT,	/* WIIPROTO_KEY_PLUS */
 +	KEY_PREVIOUS,	/* WIIPROTO_KEY_MINUS */
 +	BTN_1,		/* WIIPROTO_KEY_ONE */
 +	BTN_2,		/* WIIPROTO_KEY_TWO */
 +	BTN_A,		/* WIIPROTO_KEY_A */
 +	BTN_B,		/* WIIPROTO_KEY_B */
 +	BTN_MODE,	/* WIIPROTO_KEY_HOME */
 +};
  
 -static int wiimote_hid_send(struct hid_device *hdev, __u8 *buffer,
 -			    size_t count)
 +static enum power_supply_property wiimote_battery_props[] = {
 +	POWER_SUPPLY_PROP_CAPACITY,
 +	POWER_SUPPLY_PROP_SCOPE,
 +};
 +
 +static ssize_t wiimote_hid_send(struct hid_device *hdev, __u8 *buffer,
 +								size_t count)
  {
  	__u8 *buf;
 -	int ret;
 +	ssize_t ret;
  
- 	if (!hdev->hid_output_raw_report)
+ 	if (!hdev->ll_driver->output_report)
  		return -ENODEV;
  
  	buf = kmemdup(buffer, count, GFP_KERNEL);
  	if (!buf)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	ret = hdev->hid_output_raw_report(hdev, buf, count, HID_OUTPUT_REPORT);
++=======
+ 	ret = hid_hw_output_report(hdev, buf, count);
++>>>>>>> 7e0bc880fce5 (HID: wiimote: replace hid_output_raw_report with hid_hw_output_report for output requests)
  
  	kfree(buf);
  	return ret;
* Unmerged path drivers/hid/hid-wiimote-core.c
