mmc: core: Return error at failure of request CD/WP in mmc_of_parse()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] core: Return error at failure of request CD/WP in mmc_of_parse() (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 96.24%
commit-author Ulf Hansson <ulf.hansson@linaro.org>
commit 9116752f51d7cce9b555ea87a7ee78846e315751
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9116752f.failed

Instead of just printing an error when mmc_of_parse() fails to request
CD/WP GPIO pins, let's propagate all errors, except for -ENOENT.
Earlier only -EPROBE_DEFER was handled correctly.

As a side effect of this change and by relying on host drivers to
handle the errors during ->probe(), we don't need to free any data in
the error path.

This also means we are actually fixing a bug, since we remove the call
to mmc_gpio_free_cd() which wasn't the correct function to invoke to
handle cleanup. Instead that should have been mmc_gpiod_free_cd().

	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 9116752f51d7cce9b555ea87a7ee78846e315751)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/host.c
diff --cc drivers/mmc/core/host.c
index 5e896e1f24c1,45c2daea71ab..000000000000
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@@ -367,52 -365,39 +367,72 @@@ int mmc_of_parse(struct mmc_host *host
  		if (of_find_property(np, "broken-cd", &len))
  			host->caps |= MMC_CAP_NEEDS_POLL;
  
++<<<<<<< HEAD
 +		gpio = of_get_named_gpio_flags(np, "cd-gpios", 0, &flags);
 +		if (gpio == -EPROBE_DEFER)
 +			return gpio;
 +		if (gpio_is_valid(gpio)) {
 +			if (!(flags & OF_GPIO_ACTIVE_LOW))
 +				gpio_inv_cd = true;
++=======
+ 		ret = mmc_gpiod_request_cd(host, "cd", 0, true,
+ 					   0, &cd_gpio_invert);
+ 		if (!ret)
+ 			dev_info(host->parent, "Got CD GPIO\n");
+ 		else if (ret != -ENOENT)
+ 			return ret;
 -
 -		/*
 -		 * There are two ways to flag that the CD line is inverted:
 -		 * through the cd-inverted flag and by the GPIO line itself
 -		 * being inverted from the GPIO subsystem. This is a leftover
 -		 * from the times when the GPIO subsystem did not make it
 -		 * possible to flag a line as inverted.
 -		 *
 -		 * If the capability on the host AND the GPIO line are
 -		 * both inverted, the end result is that the CD line is
 -		 * not inverted.
 -		 */
 -		if (cd_cap_invert ^ cd_gpio_invert)
++>>>>>>> 9116752f51d7 (mmc: core: Return error at failure of request CD/WP in mmc_of_parse())
 +
 +			ret = mmc_gpio_request_cd(host, gpio);
 +			if (ret < 0) {
 +				dev_err(host->parent,
 +					"Failed to request CD GPIO #%d: %d!\n",
 +					gpio, ret);
 +				return ret;
 +			} else {
 +				dev_info(host->parent, "Got CD GPIO #%d.\n",
 +					 gpio);
 +			}
 +		}
 +
 +		if (explicit_inv_cd ^ gpio_inv_cd)
  			host->caps2 |= MMC_CAP2_CD_ACTIVE_HIGH;
  	}
  
  	/* Parse Write Protection */
 -	ro_cap_invert = of_property_read_bool(np, "wp-inverted");
 +	explicit_inv_wp = of_property_read_bool(np, "wp-inverted");
  
++<<<<<<< HEAD
 +	gpio = of_get_named_gpio_flags(np, "wp-gpios", 0, &flags);
 +	if (gpio == -EPROBE_DEFER) {
 +		ret = -EPROBE_DEFER;
 +		goto out;
 +	}
 +	if (gpio_is_valid(gpio)) {
 +		if (!(flags & OF_GPIO_ACTIVE_LOW))
 +			gpio_inv_wp = true;
 +
 +		ret = mmc_gpio_request_ro(host, gpio);
 +		if (ret < 0) {
 +			dev_err(host->parent,
 +				"Failed to request WP GPIO: %d!\n", ret);
 +			goto out;
 +		} else {
 +				dev_info(host->parent, "Got WP GPIO #%d.\n",
 +					 gpio);
 +		}
 +	}
 +	if (explicit_inv_wp ^ gpio_inv_wp)
++=======
+ 	ret = mmc_gpiod_request_ro(host, "wp", 0, false, 0, &ro_gpio_invert);
+ 	if (!ret)
+ 		dev_info(host->parent, "Got WP GPIO\n");
+ 	else if (ret != -ENOENT)
+ 		return ret;
+ 
+ 	/* See the comment on CD inversion above */
+ 	if (ro_cap_invert ^ ro_gpio_invert)
++>>>>>>> 9116752f51d7 (mmc: core: Return error at failure of request CD/WP in mmc_of_parse())
  		host->caps2 |= MMC_CAP2_RO_ACTIVE_HIGH;
  
  	if (of_find_property(np, "cap-sd-highspeed", &len))
* Unmerged path drivers/mmc/core/host.c
