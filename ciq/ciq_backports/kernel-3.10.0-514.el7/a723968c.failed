perf: Fix u16 overflows

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit a723968c0ed36db676478c3d26078f13484fe01c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a723968c.failed

Vince reported that its possible to overflow the various size fields
and get weird stuff if you stick too many events in a group.

Put a lid on this by requiring the fixed record size not exceed 16k.
This is still a fair amount of events (silly amount really) and leaves
plenty room for callchains and stack dwarves while also avoiding
overflowing the u16 variables.

	Reported-by: Vince Weaver <vincent.weaver@maine.edu>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a723968c0ed36db676478c3d26078f13484fe01c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/events/core.c
diff --cc kernel/events/core.c
index 49fc1e59eeb3,dbb5329b6a3a..000000000000
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@@ -7767,7 -8322,31 +7792,30 @@@ SYSCALL_DEFINE5(perf_event_open
  
  	if (move_group) {
  		gctx = group_leader->ctx;
 -		mutex_lock_double(&gctx->mutex, &ctx->mutex);
 -	} else {
 -		mutex_lock(&ctx->mutex);
 -	}
  
++<<<<<<< HEAD
++=======
+ 	if (!perf_event_validate_size(event)) {
+ 		err = -E2BIG;
+ 		goto err_locked;
+ 	}
+ 
+ 	/*
+ 	 * Must be under the same ctx::mutex as perf_install_in_context(),
+ 	 * because we need to serialize with concurrent event creation.
+ 	 */
+ 	if (!exclusive_event_installable(event, ctx)) {
+ 		/* exclusive and group stuff are assumed mutually exclusive */
+ 		WARN_ON_ONCE(move_group);
+ 
+ 		err = -EBUSY;
+ 		goto err_locked;
+ 	}
+ 
+ 	WARN_ON_ONCE(ctx->parent_ctx);
+ 
+ 	if (move_group) {
++>>>>>>> a723968c0ed3 (perf: Fix u16 overflows)
  		/*
  		 * See perf_event_ctx_lock() for comments on the details
  		 * of swizzling perf_event::ctx.
* Unmerged path kernel/events/core.c
