x86/kprobes: Mark kretprobe_trampoline() stack frame as non-standard

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] revert "kprobes: Mark kretprobe_trampoline() stack frame as non-standard" (Josh Poimboeuf) [1347232]
Rebuild_FUZZ: 90.78%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 87aaff2ae09036cf699fde20dfd52ce7d3c8eabe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/87aaff2a.failed

objtool reports the following warning for kretprobe_trampoline():

  arch/x86/kernel/kprobes/core.o: warning: objtool: kretprobe_trampoline()+0x20: call without frame pointer save/setup

kretprobes are a special case where the stack is intentionally wrong.
The return address isn't known at the beginning of the trampoline, so
the stack frame can't be set up properly before it calls
trampoline_handler().

Because kretprobe handlers don't sleep, the frame pointer doesn't *have*
to be accurate in the trampoline.  So it's ok to tell objtool to ignore
it.  This results in no actual changes to the generated code.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Chris J Arges <chris.j.arges@canonical.com>
	Cc: David S. Miller <davem@davemloft.net>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: live-patching@vger.kernel.org
Link: http://lkml.kernel.org/r/7eaf37de52456ff822ffc86b928edb5d48a40ef1.1456719558.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 87aaff2ae09036cf699fde20dfd52ce7d3c8eabe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/kprobes/core.c
diff --cc arch/x86/kernel/kprobes/core.c
index 0c6c07cea3f7,ae703acb85c1..000000000000
--- a/arch/x86/kernel/kprobes/core.c
+++ b/arch/x86/kernel/kprobes/core.c
@@@ -626,37 -672,39 +627,45 @@@ static int __kprobes kprobe_handler(str
   * When a retprobed function returns, this code saves registers and
   * calls trampoline_handler() runs, which calls the kretprobe's handler.
   */
 -asm(
 -	".global kretprobe_trampoline\n"
 -	".type kretprobe_trampoline, @function\n"
 -	"kretprobe_trampoline:\n"
 +static void __used __kprobes kretprobe_trampoline_holder(void)
 +{
 +	asm volatile (
 +			".global kretprobe_trampoline\n"
 +			"kretprobe_trampoline: \n"
  #ifdef CONFIG_X86_64
 -	/* We don't bother saving the ss register */
 -	"	pushq %rsp\n"
 -	"	pushfq\n"
 -	SAVE_REGS_STRING
 -	"	movq %rsp, %rdi\n"
 -	"	call trampoline_handler\n"
 -	/* Replace saved sp with true return address. */
 -	"	movq %rax, 152(%rsp)\n"
 -	RESTORE_REGS_STRING
 -	"	popfq\n"
 +			/* We don't bother saving the ss register */
 +			"	pushq %rsp\n"
 +			"	pushfq\n"
 +			SAVE_REGS_STRING
 +			"	movq %rsp, %rdi\n"
 +			"	call trampoline_handler\n"
 +			/* Replace saved sp with true return address. */
 +			"	movq %rax, 152(%rsp)\n"
 +			RESTORE_REGS_STRING
 +			"	popfq\n"
  #else
 -	"	pushf\n"
 -	SAVE_REGS_STRING
 -	"	movl %esp, %eax\n"
 -	"	call trampoline_handler\n"
 -	/* Move flags to cs */
 -	"	movl 56(%esp), %edx\n"
 -	"	movl %edx, 52(%esp)\n"
 -	/* Replace saved flags with true return address. */
 -	"	movl %eax, 56(%esp)\n"
 -	RESTORE_REGS_STRING
 -	"	popf\n"
 +			"	pushf\n"
 +			SAVE_REGS_STRING
 +			"	movl %esp, %eax\n"
 +			"	call trampoline_handler\n"
 +			/* Move flags to cs */
 +			"	movl 56(%esp), %edx\n"
 +			"	movl %edx, 52(%esp)\n"
 +			/* Replace saved flags with true return address. */
 +			"	movl %eax, 56(%esp)\n"
 +			RESTORE_REGS_STRING
 +			"	popf\n"
  #endif
++<<<<<<< HEAD
 +			"	ret\n");
 +}
++=======
+ 	"	ret\n"
+ 	".size kretprobe_trampoline, .-kretprobe_trampoline\n"
+ );
+ NOKPROBE_SYMBOL(kretprobe_trampoline);
+ STACK_FRAME_NON_STANDARD(kretprobe_trampoline);
++>>>>>>> 87aaff2ae090 (x86/kprobes: Mark kretprobe_trampoline() stack frame as non-standard)
  
  /*
   * Called from kretprobe_trampoline
* Unmerged path arch/x86/kernel/kprobes/core.c
