perf hists browser: Check sort keys before hot key actions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Namhyung Kim <namhyung@kernel.org>
commit 599a2f38a989a79df99838f22cb607f5e2b5b56c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/599a2f38.failed

The context menu in TUI hists browser checks corresponding sort keys
when creating the menu item.  But hotkey actions lacks these checks so
it can filter using incorrect info.

For example, default sort key of 'perf top' doesn't contain 'comm' or
'pid' sort key so each hist entry's thread info is not reliable.  Thus
it should prohibit using thread filter on 't' key.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1457533253-21419-3-git-send-email-namhyung@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 599a2f38a989a79df99838f22cb607f5e2b5b56c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/browsers/hists.c
diff --cc tools/perf/ui/browsers/hists.c
index d1445dd5bb7f,4b9816555946..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -1947,8 -2380,11 +1950,11 @@@ add_thread_opt(struct hist_browser *bro
  static int
  do_zoom_dso(struct hist_browser *browser, struct popup_action *act)
  {
 -	struct map *map = act->ms.map;
 +	struct dso *dso = act->dso;
  
+ 	if (!sort__has_dso || map == NULL)
+ 		return 0;
+ 
  	if (browser->hists->dso_filter) {
  		pstack__remove(browser->pstack, &browser->hists->dso_filter);
  		perf_hpp__set_elide(HISTC_DSO, false);
@@@ -2097,6 -2533,44 +2103,47 @@@ add_exit_opt(struct hist_browser *brows
  	return 1;
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ do_zoom_socket(struct hist_browser *browser, struct popup_action *act)
+ {
+ 	if (!sort__has_socket || act->socket < 0)
+ 		return 0;
+ 
+ 	if (browser->hists->socket_filter > -1) {
+ 		pstack__remove(browser->pstack, &browser->hists->socket_filter);
+ 		browser->hists->socket_filter = -1;
+ 		perf_hpp__set_elide(HISTC_SOCKET, false);
+ 	} else {
+ 		browser->hists->socket_filter = act->socket;
+ 		perf_hpp__set_elide(HISTC_SOCKET, true);
+ 		pstack__push(browser->pstack, &browser->hists->socket_filter);
+ 	}
+ 
+ 	hists__filter_by_socket(browser->hists);
+ 	hist_browser__reset(browser);
+ 	return 0;
+ }
+ 
+ static int
+ add_socket_opt(struct hist_browser *browser, struct popup_action *act,
+ 	       char **optstr, int socket_id)
+ {
+ 	if (!sort__has_socket || socket_id < 0)
+ 		return 0;
+ 
+ 	if (asprintf(optstr, "Zoom %s Processor Socket %d",
+ 		     (browser->hists->socket_filter > -1) ? "out of" : "into",
+ 		     socket_id) < 0)
+ 		return 0;
+ 
+ 	act->socket = socket_id;
+ 	act->fn = do_zoom_socket;
+ 	return 1;
+ }
+ 
++>>>>>>> 599a2f38a989 (perf hists browser: Check sort keys before hot key actions)
  static void hist_browser__update_nr_entries(struct hist_browser *hb)
  {
  	u64 nr_entries = 0;
* Unmerged path tools/perf/ui/browsers/hists.c
