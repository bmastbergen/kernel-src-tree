rhashtable: Add immediate rehash during insertion

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit ccd57b1bd32460d27bbb9c599e795628a3c66983
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ccd57b1b.failed

This patch reintroduces immediate rehash during insertion.  If
we find during insertion that the table is full or the chain
length exceeds a set limit (currently 16 but may be disabled
with insecure_elasticity) then we will force an immediate rehash.
The rehash will contain an expansion if the table utilisation
exceeds 75%.

If this rehash fails then the insertion will fail.  Otherwise the
insertion will be reattempted in the new hash table.

	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Acked-by: Thomas Graf <tgraf@suug.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ccd57b1bd32460d27bbb9c599e795628a3c66983)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/rhashtable.h
#	lib/rhashtable.c
diff --cc include/linux/rhashtable.h
index 0839d7b8cd60,f9ecf32bce55..000000000000
--- a/include/linux/rhashtable.h
+++ b/include/linux/rhashtable.h
@@@ -42,51 -100,211 +42,237 @@@ struct rhashtable
   * @key_len: Length of key
   * @key_offset: Offset of key in struct to be hashed
   * @head_offset: Offset of rhash_head in struct to be hashed
++<<<<<<< HEAD
 + * @hash_rnd: Seed to use while hashing
 + * @max_shift: Maximum number of shifts while expanding
 + * @min_shift: Minimum number of shifts while shrinking
 + * @hashfn: Function to hash key
++=======
+  * @max_size: Maximum size while expanding
+  * @min_size: Minimum size while shrinking
+  * @nulls_base: Base value to generate nulls marker
+  * @insecure_elasticity: Set to true to disable chain length checks
+  * @locks_mul: Number of bucket locks to allocate per cpu (default: 128)
+  * @hashfn: Hash function (default: jhash2 if !(key_len % 4), or jhash)
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
   * @obj_hashfn: Function to hash object
 - * @obj_cmpfn: Function to compare key with object
 + * @grow_decision: If defined, may return true if table should expand
 + * @shrink_decision: If defined, may return true if table should shrink
 + * @mutex_is_held: Must return true if protecting mutex is held
   */
  struct rhashtable_params {
  	size_t			nelem_hint;
  	size_t			key_len;
  	size_t			key_offset;
  	size_t			head_offset;
++<<<<<<< HEAD
 +	u32			hash_rnd;
 +	size_t			max_shift;
 +	size_t			min_shift;
++=======
+ 	unsigned int		max_size;
+ 	unsigned int		min_size;
+ 	u32			nulls_base;
+ 	bool			insecure_elasticity;
+ 	size_t			locks_mul;
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
  	rht_hashfn_t		hashfn;
  	rht_obj_hashfn_t	obj_hashfn;
 -	rht_obj_cmpfn_t		obj_cmpfn;
 +	bool			(*grow_decision)(const struct rhashtable *ht,
 +						 size_t new_size);
 +	bool			(*shrink_decision)(const struct rhashtable *ht,
 +						   size_t new_size);
 +	int			(*mutex_is_held)(void);
  };
  
  /**
   * struct rhashtable - Hash table handle
   * @tbl: Bucket table
   * @nelems: Number of elements in table
++<<<<<<< HEAD
 + * @shift: Current size (1 << shift)
++=======
+  * @key_len: Key length for hashfn
+  * @elasticity: Maximum chain length before rehash
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
   * @p: Configuration parameters
 - * @run_work: Deferred worker to expand/shrink asynchronously
 - * @mutex: Mutex to protect current/future table swapping
 - * @being_destroyed: True if table is set up for destruction
   */
  struct rhashtable {
  	struct bucket_table __rcu	*tbl;
++<<<<<<< HEAD
 +	size_t				nelems;
 +	size_t				shift;
++=======
+ 	atomic_t			nelems;
+ 	bool                            being_destroyed;
+ 	unsigned int			key_len;
+ 	unsigned int			elasticity;
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
  	struct rhashtable_params	p;
 -	struct work_struct		run_work;
 -	struct mutex                    mutex;
  };
  
++<<<<<<< HEAD
++=======
+ /**
+  * struct rhashtable_walker - Hash table walker
+  * @list: List entry on list of walkers
+  * @tbl: The table that we were walking over
+  */
+ struct rhashtable_walker {
+ 	struct list_head list;
+ 	struct bucket_table *tbl;
+ };
+ 
+ /**
+  * struct rhashtable_iter - Hash table iterator, fits into netlink cb
+  * @ht: Table to iterate through
+  * @p: Current pointer
+  * @walker: Associated rhashtable walker
+  * @slot: Current slot
+  * @skip: Number of entries to skip in slot
+  */
+ struct rhashtable_iter {
+ 	struct rhashtable *ht;
+ 	struct rhash_head *p;
+ 	struct rhashtable_walker *walker;
+ 	unsigned int slot;
+ 	unsigned int skip;
+ };
+ 
+ static inline unsigned long rht_marker(const struct rhashtable *ht, u32 hash)
+ {
+ 	return NULLS_MARKER(ht->p.nulls_base + hash);
+ }
+ 
+ #define INIT_RHT_NULLS_HEAD(ptr, ht, hash) \
+ 	((ptr) = (typeof(ptr)) rht_marker(ht, hash))
+ 
+ static inline bool rht_is_a_nulls(const struct rhash_head *ptr)
+ {
+ 	return ((unsigned long) ptr & 1);
+ }
+ 
+ static inline unsigned long rht_get_nulls_value(const struct rhash_head *ptr)
+ {
+ 	return ((unsigned long) ptr) >> 1;
+ }
+ 
+ static inline void *rht_obj(const struct rhashtable *ht,
+ 			    const struct rhash_head *he)
+ {
+ 	return (char *)he - ht->p.head_offset;
+ }
+ 
+ static inline unsigned int rht_bucket_index(const struct bucket_table *tbl,
+ 					    unsigned int hash)
+ {
+ 	return (hash >> RHT_HASH_RESERVED_SPACE) & (tbl->size - 1);
+ }
+ 
+ static inline unsigned int rht_key_hashfn(
+ 	struct rhashtable *ht, const struct bucket_table *tbl,
+ 	const void *key, const struct rhashtable_params params)
+ {
+ 	unsigned hash;
+ 
+ 	/* params must be equal to ht->p if it isn't constant. */
+ 	if (!__builtin_constant_p(params.key_len))
+ 		hash = ht->p.hashfn(key, ht->key_len, tbl->hash_rnd);
+ 	else if (params.key_len) {
+ 		unsigned key_len = params.key_len;
+ 
+ 		if (params.hashfn)
+ 			hash = params.hashfn(key, key_len, tbl->hash_rnd);
+ 		else if (key_len & (sizeof(u32) - 1))
+ 			hash = jhash(key, key_len, tbl->hash_rnd);
+ 		else
+ 			hash = jhash2(key, key_len / sizeof(u32),
+ 				      tbl->hash_rnd);
+ 	} else {
+ 		unsigned key_len = ht->p.key_len;
+ 
+ 		if (params.hashfn)
+ 			hash = params.hashfn(key, key_len, tbl->hash_rnd);
+ 		else
+ 			hash = jhash(key, key_len, tbl->hash_rnd);
+ 	}
+ 
+ 	return rht_bucket_index(tbl, hash);
+ }
+ 
+ static inline unsigned int rht_head_hashfn(
+ 	struct rhashtable *ht, const struct bucket_table *tbl,
+ 	const struct rhash_head *he, const struct rhashtable_params params)
+ {
+ 	const char *ptr = rht_obj(ht, he);
+ 
+ 	return likely(params.obj_hashfn) ?
+ 	       rht_bucket_index(tbl, params.obj_hashfn(ptr, tbl->hash_rnd)) :
+ 	       rht_key_hashfn(ht, tbl, ptr + params.key_offset, params);
+ }
+ 
+ /**
+  * rht_grow_above_75 - returns true if nelems > 0.75 * table-size
+  * @ht:		hash table
+  * @tbl:	current table
+  */
+ static inline bool rht_grow_above_75(const struct rhashtable *ht,
+ 				     const struct bucket_table *tbl)
+ {
+ 	/* Expand table when exceeding 75% load */
+ 	return atomic_read(&ht->nelems) > (tbl->size / 4 * 3) &&
+ 	       (!ht->p.max_size || tbl->size < ht->p.max_size);
+ }
+ 
+ /**
+  * rht_shrink_below_30 - returns true if nelems < 0.3 * table-size
+  * @ht:		hash table
+  * @tbl:	current table
+  */
+ static inline bool rht_shrink_below_30(const struct rhashtable *ht,
+ 				       const struct bucket_table *tbl)
+ {
+ 	/* Shrink table beneath 30% load */
+ 	return atomic_read(&ht->nelems) < (tbl->size * 3 / 10) &&
+ 	       tbl->size > ht->p.min_size;
+ }
+ 
+ /**
+  * rht_grow_above_100 - returns true if nelems > table-size
+  * @ht:		hash table
+  * @tbl:	current table
+  */
+ static inline bool rht_grow_above_100(const struct rhashtable *ht,
+ 				      const struct bucket_table *tbl)
+ {
+ 	return atomic_read(&ht->nelems) > tbl->size;
+ }
+ 
+ /* The bucket lock is selected based on the hash and protects mutations
+  * on a group of hash buckets.
+  *
+  * A maximum of tbl->size/2 bucket locks is allocated. This ensures that
+  * a single lock always covers both buckets which may both contains
+  * entries which link to the same bucket of the old table during resizing.
+  * This allows to simplify the locking as locking the bucket in both
+  * tables during resize always guarantee protection.
+  *
+  * IMPORTANT: When holding the bucket lock of both the old and new table
+  * during expansions and shrinking, the old bucket lock must always be
+  * acquired first.
+  */
+ static inline spinlock_t *rht_bucket_lock(const struct bucket_table *tbl,
+ 					  unsigned int hash)
+ {
+ 	return &tbl->locks[hash & tbl->locks_mask];
+ }
+ 
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
  #ifdef CONFIG_PROVE_LOCKING
 -int lockdep_rht_mutex_is_held(struct rhashtable *ht);
 +int lockdep_rht_mutex_is_held(const struct rhashtable *ht);
  int lockdep_rht_bucket_is_held(const struct bucket_table *tbl, u32 hash);
  #else
 -static inline int lockdep_rht_mutex_is_held(struct rhashtable *ht)
 +static inline int lockdep_rht_mutex_is_held(const struct rhashtable *ht)
  {
  	return 1;
  }
@@@ -98,22 -316,21 +284,29 @@@ static inline int lockdep_rht_bucket_is
  }
  #endif /* CONFIG_PROVE_LOCKING */
  
 -int rhashtable_init(struct rhashtable *ht,
 -		    const struct rhashtable_params *params);
 +int rhashtable_init(struct rhashtable *ht, struct rhashtable_params *params);
  
++<<<<<<< HEAD
 +void rhashtable_insert(struct rhashtable *ht, struct rhash_head *node);
 +bool rhashtable_remove(struct rhashtable *ht, struct rhash_head *node);
++=======
+ int rhashtable_insert_slow(struct rhashtable *ht, const void *key,
+ 			   struct rhash_head *obj,
+ 			   struct bucket_table *old_tbl);
+ int rhashtable_insert_rehash(struct rhashtable *ht);
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
 +
 +bool rht_grow_above_75(const struct rhashtable *ht, size_t new_size);
 +bool rht_shrink_below_30(const struct rhashtable *ht, size_t new_size);
 +
 +int rhashtable_expand(struct rhashtable *ht);
 +int rhashtable_shrink(struct rhashtable *ht);
  
 -int rhashtable_walk_init(struct rhashtable *ht, struct rhashtable_iter *iter);
 -void rhashtable_walk_exit(struct rhashtable_iter *iter);
 -int rhashtable_walk_start(struct rhashtable_iter *iter) __acquires(RCU);
 -void *rhashtable_walk_next(struct rhashtable_iter *iter);
 -void rhashtable_walk_stop(struct rhashtable_iter *iter) __releases(RCU);
 +void *rhashtable_lookup(const struct rhashtable *ht, const void *key);
 +void *rhashtable_lookup_compare(const struct rhashtable *ht, const void *key,
 +				bool (*compare)(void *, void *), void *arg);
  
 -void rhashtable_destroy(struct rhashtable *ht);
 +void rhashtable_destroy(const struct rhashtable *ht);
  
  #define rht_dereference(p, ht) \
  	rcu_dereference_protected(p, lockdep_rht_mutex_is_held(ht))
@@@ -261,4 -480,313 +454,316 @@@
  	rht_for_each_entry_rcu_continue(tpos, pos, (tbl)->buckets[hash],\
  					tbl, hash, member)
  
++<<<<<<< HEAD
++=======
+ static inline int rhashtable_compare(struct rhashtable_compare_arg *arg,
+ 				     const void *obj)
+ {
+ 	struct rhashtable *ht = arg->ht;
+ 	const char *ptr = obj;
+ 
+ 	return memcmp(ptr + ht->p.key_offset, arg->key, ht->p.key_len);
+ }
+ 
+ /**
+  * rhashtable_lookup_fast - search hash table, inlined version
+  * @ht:		hash table
+  * @key:	the pointer to the key
+  * @params:	hash table parameters
+  *
+  * Computes the hash value for the key and traverses the bucket chain looking
+  * for a entry with an identical key. The first matching entry is returned.
+  *
+  * Returns the first entry on which the compare function returned true.
+  */
+ static inline void *rhashtable_lookup_fast(
+ 	struct rhashtable *ht, const void *key,
+ 	const struct rhashtable_params params)
+ {
+ 	struct rhashtable_compare_arg arg = {
+ 		.ht = ht,
+ 		.key = key,
+ 	};
+ 	const struct bucket_table *tbl;
+ 	struct rhash_head *he;
+ 	unsigned hash;
+ 
+ 	rcu_read_lock();
+ 
+ 	tbl = rht_dereference_rcu(ht->tbl, ht);
+ restart:
+ 	hash = rht_key_hashfn(ht, tbl, key, params);
+ 	rht_for_each_rcu(he, tbl, hash) {
+ 		if (params.obj_cmpfn ?
+ 		    params.obj_cmpfn(&arg, rht_obj(ht, he)) :
+ 		    rhashtable_compare(&arg, rht_obj(ht, he)))
+ 			continue;
+ 		rcu_read_unlock();
+ 		return rht_obj(ht, he);
+ 	}
+ 
+ 	/* Ensure we see any new tables. */
+ 	smp_rmb();
+ 
+ 	tbl = rht_dereference_rcu(tbl->future_tbl, ht);
+ 	if (unlikely(tbl))
+ 		goto restart;
+ 	rcu_read_unlock();
+ 
+ 	return NULL;
+ }
+ 
+ static inline int __rhashtable_insert_fast(
+ 	struct rhashtable *ht, const void *key, struct rhash_head *obj,
+ 	const struct rhashtable_params params)
+ {
+ 	struct rhashtable_compare_arg arg = {
+ 		.ht = ht,
+ 		.key = key,
+ 	};
+ 	struct bucket_table *tbl, *new_tbl;
+ 	struct rhash_head *head;
+ 	spinlock_t *lock;
+ 	unsigned elasticity;
+ 	unsigned hash;
+ 	int err;
+ 
+ restart:
+ 	rcu_read_lock();
+ 
+ 	tbl = rht_dereference_rcu(ht->tbl, ht);
+ 
+ 	/* All insertions must grab the oldest table containing
+ 	 * the hashed bucket that is yet to be rehashed.
+ 	 */
+ 	for (;;) {
+ 		hash = rht_head_hashfn(ht, tbl, obj, params);
+ 		lock = rht_bucket_lock(tbl, hash);
+ 		spin_lock_bh(lock);
+ 
+ 		if (tbl->rehash <= hash)
+ 			break;
+ 
+ 		spin_unlock_bh(lock);
+ 		tbl = rht_dereference_rcu(tbl->future_tbl, ht);
+ 	}
+ 
+ 	new_tbl = rht_dereference_rcu(tbl->future_tbl, ht);
+ 	if (unlikely(new_tbl)) {
+ 		err = rhashtable_insert_slow(ht, key, obj, new_tbl);
+ 		if (err == -EAGAIN)
+ 			goto slow_path;
+ 		goto out;
+ 	}
+ 
+ 	if (unlikely(rht_grow_above_100(ht, tbl))) {
+ slow_path:
+ 		spin_unlock_bh(lock);
+ 		rcu_read_unlock();
+ 		err = rhashtable_insert_rehash(ht);
+ 		if (err)
+ 			return err;
+ 
+ 		goto restart;
+ 	}
+ 
+ 	err = -EEXIST;
+ 	elasticity = ht->elasticity;
+ 	rht_for_each(head, tbl, hash) {
+ 		if (key &&
+ 		    unlikely(!(params.obj_cmpfn ?
+ 			       params.obj_cmpfn(&arg, rht_obj(ht, head)) :
+ 			       rhashtable_compare(&arg, rht_obj(ht, head)))))
+ 			goto out;
+ 		if (!--elasticity)
+ 			goto slow_path;
+ 	}
+ 
+ 	err = 0;
+ 
+ 	head = rht_dereference_bucket(tbl->buckets[hash], tbl, hash);
+ 
+ 	RCU_INIT_POINTER(obj->next, head);
+ 
+ 	rcu_assign_pointer(tbl->buckets[hash], obj);
+ 
+ 	atomic_inc(&ht->nelems);
+ 	if (rht_grow_above_75(ht, tbl))
+ 		schedule_work(&ht->run_work);
+ 
+ out:
+ 	spin_unlock_bh(lock);
+ 	rcu_read_unlock();
+ 
+ 	return err;
+ }
+ 
+ /**
+  * rhashtable_insert_fast - insert object into hash table
+  * @ht:		hash table
+  * @obj:	pointer to hash head inside object
+  * @params:	hash table parameters
+  *
+  * Will take a per bucket spinlock to protect against mutual mutations
+  * on the same bucket. Multiple insertions may occur in parallel unless
+  * they map to the same bucket lock.
+  *
+  * It is safe to call this function from atomic context.
+  *
+  * Will trigger an automatic deferred table resizing if the size grows
+  * beyond the watermark indicated by grow_decision() which can be passed
+  * to rhashtable_init().
+  */
+ static inline int rhashtable_insert_fast(
+ 	struct rhashtable *ht, struct rhash_head *obj,
+ 	const struct rhashtable_params params)
+ {
+ 	return __rhashtable_insert_fast(ht, NULL, obj, params);
+ }
+ 
+ /**
+  * rhashtable_lookup_insert_fast - lookup and insert object into hash table
+  * @ht:		hash table
+  * @obj:	pointer to hash head inside object
+  * @params:	hash table parameters
+  *
+  * Locks down the bucket chain in both the old and new table if a resize
+  * is in progress to ensure that writers can't remove from the old table
+  * and can't insert to the new table during the atomic operation of search
+  * and insertion. Searches for duplicates in both the old and new table if
+  * a resize is in progress.
+  *
+  * This lookup function may only be used for fixed key hash table (key_len
+  * parameter set). It will BUG() if used inappropriately.
+  *
+  * It is safe to call this function from atomic context.
+  *
+  * Will trigger an automatic deferred table resizing if the size grows
+  * beyond the watermark indicated by grow_decision() which can be passed
+  * to rhashtable_init().
+  */
+ static inline int rhashtable_lookup_insert_fast(
+ 	struct rhashtable *ht, struct rhash_head *obj,
+ 	const struct rhashtable_params params)
+ {
+ 	const char *key = rht_obj(ht, obj);
+ 
+ 	BUG_ON(ht->p.obj_hashfn);
+ 
+ 	return __rhashtable_insert_fast(ht, key + ht->p.key_offset, obj,
+ 					params);
+ }
+ 
+ /**
+  * rhashtable_lookup_insert_key - search and insert object to hash table
+  *				  with explicit key
+  * @ht:		hash table
+  * @key:	key
+  * @obj:	pointer to hash head inside object
+  * @params:	hash table parameters
+  *
+  * Locks down the bucket chain in both the old and new table if a resize
+  * is in progress to ensure that writers can't remove from the old table
+  * and can't insert to the new table during the atomic operation of search
+  * and insertion. Searches for duplicates in both the old and new table if
+  * a resize is in progress.
+  *
+  * Lookups may occur in parallel with hashtable mutations and resizing.
+  *
+  * Will trigger an automatic deferred table resizing if the size grows
+  * beyond the watermark indicated by grow_decision() which can be passed
+  * to rhashtable_init().
+  *
+  * Returns zero on success.
+  */
+ static inline int rhashtable_lookup_insert_key(
+ 	struct rhashtable *ht, const void *key, struct rhash_head *obj,
+ 	const struct rhashtable_params params)
+ {
+ 	BUG_ON(!ht->p.obj_hashfn || !key);
+ 
+ 	return __rhashtable_insert_fast(ht, key, obj, params);
+ }
+ 
+ static inline int __rhashtable_remove_fast(
+ 	struct rhashtable *ht, struct bucket_table *tbl,
+ 	struct rhash_head *obj, const struct rhashtable_params params)
+ {
+ 	struct rhash_head __rcu **pprev;
+ 	struct rhash_head *he;
+ 	spinlock_t * lock;
+ 	unsigned hash;
+ 	int err = -ENOENT;
+ 
+ 	hash = rht_head_hashfn(ht, tbl, obj, params);
+ 	lock = rht_bucket_lock(tbl, hash);
+ 
+ 	spin_lock_bh(lock);
+ 
+ 	pprev = &tbl->buckets[hash];
+ 	rht_for_each(he, tbl, hash) {
+ 		if (he != obj) {
+ 			pprev = &he->next;
+ 			continue;
+ 		}
+ 
+ 		rcu_assign_pointer(*pprev, obj->next);
+ 		err = 0;
+ 		break;
+ 	}
+ 
+ 	spin_unlock_bh(lock);
+ 
+ 	return err;
+ }
+ 
+ /**
+  * rhashtable_remove_fast - remove object from hash table
+  * @ht:		hash table
+  * @obj:	pointer to hash head inside object
+  * @params:	hash table parameters
+  *
+  * Since the hash chain is single linked, the removal operation needs to
+  * walk the bucket chain upon removal. The removal operation is thus
+  * considerable slow if the hash table is not correctly sized.
+  *
+  * Will automatically shrink the table via rhashtable_expand() if the
+  * shrink_decision function specified at rhashtable_init() returns true.
+  *
+  * Returns zero on success, -ENOENT if the entry could not be found.
+  */
+ static inline int rhashtable_remove_fast(
+ 	struct rhashtable *ht, struct rhash_head *obj,
+ 	const struct rhashtable_params params)
+ {
+ 	struct bucket_table *tbl;
+ 	int err;
+ 
+ 	rcu_read_lock();
+ 
+ 	tbl = rht_dereference_rcu(ht->tbl, ht);
+ 
+ 	/* Because we have already taken (and released) the bucket
+ 	 * lock in old_tbl, if we find that future_tbl is not yet
+ 	 * visible then that guarantees the entry to still be in
+ 	 * the old tbl if it exists.
+ 	 */
+ 	while ((err = __rhashtable_remove_fast(ht, tbl, obj, params)) &&
+ 	       (tbl = rht_dereference_rcu(tbl->future_tbl, ht)))
+ 		;
+ 
+ 	if (err)
+ 		goto out;
+ 
+ 	atomic_dec(&ht->nelems);
+ 	if (rht_shrink_below_30(ht, tbl))
+ 		schedule_work(&ht->run_work);
+ 
+ out:
+ 	rcu_read_unlock();
+ 
+ 	return err;
+ }
+ 
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
  #endif /* _LINUX_RHASHTABLE_H */
diff --cc lib/rhashtable.c
index 6d0c4774001c,7686c1e9934a..000000000000
--- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@@ -285,186 -327,337 +285,282 @@@ int rhashtable_shrink(struct rhashtabl
  
  	ASSERT_RHT_MUTEX(ht);
  
 -	if (size < ht->p.min_size)
 -		size = ht->p.min_size;
 -
 -	if (old_tbl->size <= size)
 +	if (ht->shift <= ht->p.min_shift)
  		return 0;
  
 -	if (rht_dereference(old_tbl->future_tbl, ht))
 -		return -EEXIST;
 -
 -	new_tbl = bucket_table_alloc(ht, size, GFP_KERNEL);
 -	if (new_tbl == NULL)
 +	ntbl = bucket_table_alloc(tbl->size / 2);
 +	if (ntbl == NULL)
  		return -ENOMEM;
  
 -	err = rhashtable_rehash_attach(ht, old_tbl, new_tbl);
 -	if (err)
 -		bucket_table_free(new_tbl);
 +	ht->shift--;
  
 -	return err;
 +	/* Link each bucket in the new table to the first bucket
 +	 * in the old table that contains entries which will hash
 +	 * to the new bucket.
 +	 */
 +	for (i = 0; i < ntbl->size; i++) {
 +		ntbl->buckets[i] = tbl->buckets[i];
 +		RCU_INIT_POINTER(*bucket_tail(ntbl, i),
 +				 tbl->buckets[i + ntbl->size]);
 +
 +	}
 +
 +	/* Publish the new, valid hash table */
 +	rcu_assign_pointer(ht->tbl, ntbl);
 +
 +	/* Wait for readers. No new readers will have references to the
 +	 * old hash table.
 +	 */
 +	synchronize_rcu();
 +
 +	bucket_table_free(tbl);
 +
 +	return 0;
  }
 +EXPORT_SYMBOL_GPL(rhashtable_shrink);
  
 -static void rht_deferred_worker(struct work_struct *work)
 +/**
 + * rhashtable_insert - insert object into hash hash table
 + * @ht:		hash table
 + * @obj:	pointer to hash head inside object
 + *
 + * Will automatically grow the table via rhashtable_expand() if the the
 + * grow_decision function specified at rhashtable_init() returns true.
 + *
 + * The caller must ensure that no concurrent table mutations occur. It is
 + * however valid to have concurrent lookups if they are RCU protected.
 + */
 +void rhashtable_insert(struct rhashtable *ht, struct rhash_head *obj)
  {
 -	struct rhashtable *ht;
 -	struct bucket_table *tbl;
 -	int err = 0;
 +	struct bucket_table *tbl = rht_dereference(ht->tbl, ht);
 +	u32 hash;
  
 -	ht = container_of(work, struct rhashtable, run_work);
 -	mutex_lock(&ht->mutex);
 -	if (ht->being_destroyed)
 -		goto unlock;
 +	ASSERT_RHT_MUTEX(ht);
  
++<<<<<<< HEAD
 +	hash = head_hashfn(ht, tbl, obj);
 +	RCU_INIT_POINTER(obj->next, tbl->buckets[hash]);
++=======
+ 	tbl = rht_dereference(ht->tbl, ht);
+ 	tbl = rhashtable_last_table(ht, tbl);
+ 
+ 	if (rht_grow_above_75(ht, tbl))
+ 		rhashtable_expand(ht);
+ 	else if (rht_shrink_below_30(ht, tbl))
+ 		rhashtable_shrink(ht);
+ 
+ 	err = rhashtable_rehash_table(ht);
+ 
+ unlock:
+ 	mutex_unlock(&ht->mutex);
+ 
+ 	if (err)
+ 		schedule_work(&ht->run_work);
+ }
+ 
+ static bool rhashtable_check_elasticity(struct rhashtable *ht,
+ 					struct bucket_table *tbl,
+ 					unsigned hash)
+ {
+ 	unsigned elasticity = ht->elasticity;
+ 	struct rhash_head *head;
+ 
+ 	rht_for_each(head, tbl, hash)
+ 		if (!--elasticity)
+ 			return true;
+ 
+ 	return false;
+ }
+ 
+ int rhashtable_insert_rehash(struct rhashtable *ht)
+ {
+ 	struct bucket_table *old_tbl;
+ 	struct bucket_table *new_tbl;
+ 	struct bucket_table *tbl;
+ 	unsigned int size;
+ 	int err;
+ 
+ 	old_tbl = rht_dereference_rcu(ht->tbl, ht);
+ 	tbl = rhashtable_last_table(ht, old_tbl);
+ 
+ 	size = tbl->size;
+ 
+ 	if (rht_grow_above_75(ht, tbl))
+ 		size *= 2;
+ 	/* More than two rehashes (not resizes) detected. */
+ 	else if (WARN_ON(old_tbl != tbl && old_tbl->size == size))
+ 		return -EBUSY;
+ 
+ 	new_tbl = bucket_table_alloc(ht, size, GFP_ATOMIC);
+ 	if (new_tbl == NULL)
+ 		return -ENOMEM;
+ 
+ 	err = rhashtable_rehash_attach(ht, tbl, new_tbl);
+ 	if (err) {
+ 		bucket_table_free(new_tbl);
+ 		if (err == -EEXIST)
+ 			err = 0;
+ 	} else
+ 		schedule_work(&ht->run_work);
+ 
+ 	return err;
+ }
+ EXPORT_SYMBOL_GPL(rhashtable_insert_rehash);
+ 
+ int rhashtable_insert_slow(struct rhashtable *ht, const void *key,
+ 			   struct rhash_head *obj,
+ 			   struct bucket_table *tbl)
+ {
+ 	struct rhash_head *head;
+ 	unsigned hash;
+ 	int err;
+ 
+ 	tbl = rhashtable_last_table(ht, tbl);
+ 	hash = head_hashfn(ht, tbl, obj);
+ 	spin_lock_nested(rht_bucket_lock(tbl, hash), SINGLE_DEPTH_NESTING);
+ 
+ 	err = -EEXIST;
+ 	if (key && rhashtable_lookup_fast(ht, key, ht->p))
+ 		goto exit;
+ 
+ 	err = -EAGAIN;
+ 	if (rhashtable_check_elasticity(ht, tbl, hash) ||
+ 	    rht_grow_above_100(ht, tbl))
+ 		goto exit;
+ 
+ 	err = 0;
+ 
+ 	head = rht_dereference_bucket(tbl->buckets[hash], tbl, hash);
+ 
+ 	RCU_INIT_POINTER(obj->next, head);
+ 
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
  	rcu_assign_pointer(tbl->buckets[hash], obj);
 +	ht->nelems++;
  
 -	atomic_inc(&ht->nelems);
 -
 -exit:
 -	spin_unlock(rht_bucket_lock(tbl, hash));
 -
 -	return err;
 +	if (ht->p.grow_decision && ht->p.grow_decision(ht, tbl->size))
 +		rhashtable_expand(ht);
  }
 -EXPORT_SYMBOL_GPL(rhashtable_insert_slow);
 +EXPORT_SYMBOL_GPL(rhashtable_insert);
  
  /**
 - * rhashtable_walk_init - Initialise an iterator
 - * @ht:		Table to walk over
 - * @iter:	Hash table Iterator
 - *
 - * This function prepares a hash table walk.
 + * rhashtable_remove - remove object from hash table
 + * @ht:		hash table
 + * @obj:	pointer to hash head inside object
   *
 - * Note that if you restart a walk after rhashtable_walk_stop you
 - * may see the same object twice.  Also, you may miss objects if
 - * there are removals in between rhashtable_walk_stop and the next
 - * call to rhashtable_walk_start.
 + * Since the hash chain is single linked, the removal operation needs to
 + * walk the bucket chain upon removal. The removal operation is thus
 + * considerable slow if the hash table is not correctly sized.
   *
 - * For a completely stable walk you should construct your own data
 - * structure outside the hash table.
 + * Will automatically shrink the table via rhashtable_expand() if the the
 + * shrink_decision function specified at rhashtable_init() returns true.
   *
 - * This function may sleep so you must not call it from interrupt
 - * context or with spin locks held.
 - *
 - * You must call rhashtable_walk_exit if this function returns
 - * successfully.
 + * The caller must ensure that no concurrent table mutations occur. It is
 + * however valid to have concurrent lookups if they are RCU protected.
   */
 -int rhashtable_walk_init(struct rhashtable *ht, struct rhashtable_iter *iter)
 +bool rhashtable_remove(struct rhashtable *ht, struct rhash_head *obj)
  {
 -	iter->ht = ht;
 -	iter->p = NULL;
 -	iter->slot = 0;
 -	iter->skip = 0;
 -
 -	iter->walker = kmalloc(sizeof(*iter->walker), GFP_KERNEL);
 -	if (!iter->walker)
 -		return -ENOMEM;
 -
 -	mutex_lock(&ht->mutex);
 -	iter->walker->tbl = rht_dereference(ht->tbl, ht);
 -	list_add(&iter->walker->list, &iter->walker->tbl->walkers);
 -	mutex_unlock(&ht->mutex);
 -
 -	return 0;
 -}
 -EXPORT_SYMBOL_GPL(rhashtable_walk_init);
 -
 -/**
 - * rhashtable_walk_exit - Free an iterator
 - * @iter:	Hash table Iterator
 - *
 - * This function frees resources allocated by rhashtable_walk_init.
 - */
 -void rhashtable_walk_exit(struct rhashtable_iter *iter)
 -{
 -	mutex_lock(&iter->ht->mutex);
 -	if (iter->walker->tbl)
 -		list_del(&iter->walker->list);
 -	mutex_unlock(&iter->ht->mutex);
 -	kfree(iter->walker);
 -}
 -EXPORT_SYMBOL_GPL(rhashtable_walk_exit);
 +	struct bucket_table *tbl = rht_dereference(ht->tbl, ht);
 +	struct rhash_head __rcu **pprev;
 +	struct rhash_head *he;
 +	u32 h;
  
 -/**
 - * rhashtable_walk_start - Start a hash table walk
 - * @iter:	Hash table iterator
 - *
 - * Start a hash table walk.  Note that we take the RCU lock in all
 - * cases including when we return an error.  So you must always call
 - * rhashtable_walk_stop to clean up.
 - *
 - * Returns zero if successful.
 - *
 - * Returns -EAGAIN if resize event occured.  Note that the iterator
 - * will rewind back to the beginning and you may use it immediately
 - * by calling rhashtable_walk_next.
 - */
 -int rhashtable_walk_start(struct rhashtable_iter *iter)
 -	__acquires(RCU)
 -{
 -	struct rhashtable *ht = iter->ht;
 +	ASSERT_RHT_MUTEX(ht);
  
 -	mutex_lock(&ht->mutex);
 +	h = head_hashfn(ht, tbl, obj);
  
 -	if (iter->walker->tbl)
 -		list_del(&iter->walker->list);
 +	pprev = &tbl->buckets[h];
 +	rht_for_each(he, tbl, h) {
 +		if (he != obj) {
 +			pprev = &he->next;
 +			continue;
 +		}
  
 -	rcu_read_lock();
 +		RCU_INIT_POINTER(*pprev, he->next);
 +		ht->nelems--;
  
 -	mutex_unlock(&ht->mutex);
 +		if (ht->p.shrink_decision &&
 +		    ht->p.shrink_decision(ht, tbl->size))
 +			rhashtable_shrink(ht);
  
 -	if (!iter->walker->tbl) {
 -		iter->walker->tbl = rht_dereference_rcu(ht->tbl, ht);
 -		return -EAGAIN;
 +		return true;
  	}
  
 -	return 0;
 +	return false;
  }
 -EXPORT_SYMBOL_GPL(rhashtable_walk_start);
 +EXPORT_SYMBOL_GPL(rhashtable_remove);
  
  /**
 - * rhashtable_walk_next - Return the next object and advance the iterator
 - * @iter:	Hash table iterator
 + * rhashtable_lookup - lookup key in hash table
 + * @ht:		hash table
 + * @key:	pointer to key
   *
 - * Note that you must call rhashtable_walk_stop when you are finished
 - * with the walk.
 + * Computes the hash value for the key and traverses the bucket chain looking
 + * for a entry with an identical key. The first matching entry is returned.
   *
 - * Returns the next object or NULL when the end of the table is reached.
 + * This lookup function may only be used for fixed key hash table (key_len
 + * paramter set). It will BUG() if used inappropriately.
   *
 - * Returns -EAGAIN if resize event occured.  Note that the iterator
 - * will rewind back to the beginning and you may continue to use it.
 + * Lookups may occur in parallel with hash mutations as long as the lookup is
 + * guarded by rcu_read_lock(). The caller must take care of this.
   */
 -void *rhashtable_walk_next(struct rhashtable_iter *iter)
 +void *rhashtable_lookup(const struct rhashtable *ht, const void *key)
  {
 -	struct bucket_table *tbl = iter->walker->tbl;
 -	struct rhashtable *ht = iter->ht;
 -	struct rhash_head *p = iter->p;
 -	void *obj = NULL;
 -
 -	if (p) {
 -		p = rht_dereference_bucket_rcu(p->next, tbl, iter->slot);
 -		goto next;
 -	}
 -
 -	for (; iter->slot < tbl->size; iter->slot++) {
 -		int skip = iter->skip;
 -
 -		rht_for_each_rcu(p, tbl, iter->slot) {
 -			if (!skip)
 -				break;
 -			skip--;
 -		}
 -
 -next:
 -		if (!rht_is_a_nulls(p)) {
 -			iter->skip++;
 -			iter->p = p;
 -			obj = rht_obj(ht, p);
 -			goto out;
 -		}
 -
 -		iter->skip = 0;
 +	const struct bucket_table *tbl = rht_dereference_rcu(ht->tbl, ht);
 +	struct rhash_head *he;
 +	u32 h;
 +
 +	BUG_ON(!ht->p.key_len);
 +
 +	h = key_hashfn(ht, key, ht->p.key_len);
 +	rht_for_each_rcu(he, tbl, h) {
 +		if (memcmp(rht_obj(ht, he) + ht->p.key_offset, key,
 +			   ht->p.key_len))
 +			continue;
 +		return rht_obj(ht, he);
  	}
  
 -	/* Ensure we see any new tables. */
 -	smp_rmb();
 -
 -	iter->walker->tbl = rht_dereference_rcu(tbl->future_tbl, ht);
 -	if (iter->walker->tbl) {
 -		iter->slot = 0;
 -		iter->skip = 0;
 -		return ERR_PTR(-EAGAIN);
 -	}
 -
 -	iter->p = NULL;
 -
 -out:
 -
 -	return obj;
 +	return NULL;
  }
 -EXPORT_SYMBOL_GPL(rhashtable_walk_next);
 +EXPORT_SYMBOL_GPL(rhashtable_lookup);
  
  /**
 - * rhashtable_walk_stop - Finish a hash table walk
 - * @iter:	Hash table iterator
 + * rhashtable_lookup_compare - search hash table with compare function
 + * @ht:		hash table
 + * @key:	the pointer to the key
 + * @compare:	compare function, must return true on match
 + * @arg:	argument passed on to compare function
 + *
 + * Traverses the bucket chain behind the provided hash value and calls the
 + * specified compare function for each entry.
   *
 - * Finish a hash table walk.
 + * Lookups may occur in parallel with hash mutations as long as the lookup is
 + * guarded by rcu_read_lock(). The caller must take care of this.
 + *
 + * Returns the first entry on which the compare function returned true.
   */
 -void rhashtable_walk_stop(struct rhashtable_iter *iter)
 -	__releases(RCU)
 +void *rhashtable_lookup_compare(const struct rhashtable *ht, const void *key,
 +				bool (*compare)(void *, void *), void *arg)
  {
 -	struct rhashtable *ht;
 -	struct bucket_table *tbl = iter->walker->tbl;
 -
 -	if (!tbl)
 -		goto out;
 -
 -	ht = iter->ht;
 -
 -	mutex_lock(&ht->mutex);
 -	if (tbl->rehash < tbl->size)
 -		list_add(&iter->walker->list, &tbl->walkers);
 -	else
 -		iter->walker->tbl = NULL;
 -	mutex_unlock(&ht->mutex);
 -
 -	iter->p = NULL;
 +	const struct bucket_table *tbl = rht_dereference_rcu(ht->tbl, ht);
 +	struct rhash_head *he;
 +	u32 hash;
 +
 +	hash = key_hashfn(ht, key, ht->p.key_len);
 +	rht_for_each_rcu(he, tbl, hash) {
 +		if (!compare(rht_obj(ht, he), arg))
 +			continue;
 +		return rht_obj(ht, he);
 +	}
  
 -out:
 -	rcu_read_unlock();
 +	return NULL;
  }
 -EXPORT_SYMBOL_GPL(rhashtable_walk_stop);
 +EXPORT_SYMBOL_GPL(rhashtable_lookup_compare);
  
 -static size_t rounded_hashtable_size(const struct rhashtable_params *params)
 +static size_t rounded_hashtable_size(struct rhashtable_params *params)
  {
  	return max(roundup_pow_of_two(params->nelem_hint * 4 / 3),
 -		   (unsigned long)params->min_size);
 -}
 -
 -static u32 rhashtable_jhash2(const void *key, u32 length, u32 seed)
 -{
 -	return jhash2(key, length, seed);
 +		   1UL << params->min_shift);
  }
  
  /**
@@@ -528,7 -721,37 +624,41 @@@ int rhashtable_init(struct rhashtable *
  	if (params->nelem_hint)
  		size = rounded_hashtable_size(params);
  
++<<<<<<< HEAD
 +	tbl = bucket_table_alloc(size);
++=======
+ 	memset(ht, 0, sizeof(*ht));
+ 	mutex_init(&ht->mutex);
+ 	memcpy(&ht->p, params, sizeof(*params));
+ 
+ 	if (params->min_size)
+ 		ht->p.min_size = roundup_pow_of_two(params->min_size);
+ 
+ 	if (params->max_size)
+ 		ht->p.max_size = rounddown_pow_of_two(params->max_size);
+ 
+ 	ht->p.min_size = max(ht->p.min_size, HASH_MIN_SIZE);
+ 
+ 	if (!params->insecure_elasticity)
+ 		ht->elasticity = 16;
+ 
+ 	if (params->locks_mul)
+ 		ht->p.locks_mul = roundup_pow_of_two(params->locks_mul);
+ 	else
+ 		ht->p.locks_mul = BUCKET_LOCKS_PER_CPU;
+ 
+ 	ht->key_len = ht->p.key_len;
+ 	if (!params->hashfn) {
+ 		ht->p.hashfn = jhash;
+ 
+ 		if (!(ht->key_len & (sizeof(u32) - 1))) {
+ 			ht->key_len /= sizeof(u32);
+ 			ht->p.hashfn = rhashtable_jhash2;
+ 		}
+ 	}
+ 
+ 	tbl = bucket_table_alloc(ht, size, GFP_KERNEL);
++>>>>>>> ccd57b1bd324 (rhashtable: Add immediate rehash during insertion)
  	if (tbl == NULL)
  		return -ENOMEM;
  
* Unmerged path include/linux/rhashtable.h
* Unmerged path lib/rhashtable.c
