iscsi-target: Add tpg_enabled_sendtargets for disabled discovery

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author David Disseldorp <ddiss@suse.de>
commit a6415cddc4e6e1675a5648e7785aef716980c90c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a6415cdd.failed

This patch adds a new tpg_enabled_sendtargets configfs attribute
to allow in-band sendtargets discovery information to include
target-portal-groups (TPGs) in !TPG_STATE_ACTIVE state.

This functionality is useful for clustered iSCSI targets, where
TPGTs handled on remote cluster nodes should be advertised in
the SendTargets response.

By default, this new attribute retains the default behaviour of
existing code which to ignore portal-groups in !TPG_STATE_ACTIVE
state.

	Signed-off-by: David Disseldorp <ddiss@suse.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit a6415cddc4e6e1675a5648e7785aef716980c90c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/iscsi/iscsi_target_tpg.c
#	drivers/target/iscsi/iscsi_target_tpg.h
#	include/target/iscsi/iscsi_target_core.h
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index 39bfc6509663,05f16640fb9b..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -1052,6 -1005,16 +1052,19 @@@ TPG_ATTR(default_erl, S_IRUGO | S_IWUSR
   */
  DEF_TPG_ATTRIB(t10_pi);
  TPG_ATTR(t10_pi, S_IRUGO | S_IWUSR);
++<<<<<<< HEAD
++=======
+ /*
+  * Define iscsi_tpg_attrib_s_fabric_prot_type
+  */
+ DEF_TPG_ATTRIB(fabric_prot_type);
+ TPG_ATTR(fabric_prot_type, S_IRUGO | S_IWUSR);
+ /*
+  * Define iscsi_tpg_attrib_s_tpg_enabled_sendtargets
+  */
+ DEF_TPG_ATTRIB(tpg_enabled_sendtargets);
+ TPG_ATTR(tpg_enabled_sendtargets, S_IRUGO | S_IWUSR);
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
  
  static struct configfs_attribute *lio_target_tpg_attrib_attrs[] = {
  	&iscsi_tpg_attrib_authentication.attr,
@@@ -1065,6 -1028,8 +1078,11 @@@
  	&iscsi_tpg_attrib_demo_mode_discovery.attr,
  	&iscsi_tpg_attrib_default_erl.attr,
  	&iscsi_tpg_attrib_t10_pi.attr,
++<<<<<<< HEAD
++=======
+ 	&iscsi_tpg_attrib_fabric_prot_type.attr,
+ 	&iscsi_tpg_attrib_tpg_enabled_sendtargets.attr,
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
  	NULL,
  };
  
diff --cc drivers/target/iscsi/iscsi_target_tpg.c
index 62bf0e5a1c51,8262a853e888..000000000000
--- a/drivers/target/iscsi/iscsi_target_tpg.c
+++ b/drivers/target/iscsi/iscsi_target_tpg.c
@@@ -228,6 -225,8 +228,11 @@@ static void iscsit_set_default_tpg_attr
  	a->demo_mode_discovery = TA_DEMO_MODE_DISCOVERY;
  	a->default_erl = TA_DEFAULT_ERL;
  	a->t10_pi = TA_DEFAULT_T10_PI;
++<<<<<<< HEAD
++=======
+ 	a->fabric_prot_type = TA_DEFAULT_FABRIC_PROT_TYPE;
+ 	a->tpg_enabled_sendtargets = TA_DEFAULT_TPG_ENABLED_SENDTARGETS;
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
  }
  
  int iscsit_tpg_add_portal_group(struct iscsi_tiqn *tiqn, struct iscsi_portal_group *tpg)
@@@ -877,3 -875,39 +882,42 @@@ int iscsit_ta_t10_pi
  
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ int iscsit_ta_fabric_prot_type(
+ 	struct iscsi_portal_group *tpg,
+ 	u32 prot_type)
+ {
+ 	struct iscsi_tpg_attrib *a = &tpg->tpg_attrib;
+ 
+ 	if ((prot_type != 0) && (prot_type != 1) && (prot_type != 3)) {
+ 		pr_err("Illegal value for fabric_prot_type: %u\n", prot_type);
+ 		return -EINVAL;
+ 	}
+ 
+ 	a->fabric_prot_type = prot_type;
+ 	pr_debug("iSCSI_TPG[%hu] - T10 Fabric Protection Type: %u\n",
+ 		 tpg->tpgt, prot_type);
+ 
+ 	return 0;
+ }
+ 
+ int iscsit_ta_tpg_enabled_sendtargets(
+ 	struct iscsi_portal_group *tpg,
+ 	u32 flag)
+ {
+ 	struct iscsi_tpg_attrib *a = &tpg->tpg_attrib;
+ 
+ 	if ((flag != 0) && (flag != 1)) {
+ 		pr_err("Illegal value %d\n", flag);
+ 		return -EINVAL;
+ 	}
+ 
+ 	a->tpg_enabled_sendtargets = flag;
+ 	pr_debug("iSCSI_TPG[%hu] - TPG enabled bit required for SendTargets:"
+ 		" %s\n", tpg->tpgt, (a->tpg_enabled_sendtargets) ? "ON" : "OFF");
+ 
+ 	return 0;
+ }
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
diff --cc drivers/target/iscsi/iscsi_target_tpg.h
index e216128b5a98,a2790fd8f7da..000000000000
--- a/drivers/target/iscsi/iscsi_target_tpg.h
+++ b/drivers/target/iscsi/iscsi_target_tpg.h
@@@ -39,5 -39,7 +39,10 @@@ extern int iscsit_ta_prod_mode_write_pr
  extern int iscsit_ta_demo_mode_discovery(struct iscsi_portal_group *, u32);
  extern int iscsit_ta_default_erl(struct iscsi_portal_group *, u32);
  extern int iscsit_ta_t10_pi(struct iscsi_portal_group *, u32);
++<<<<<<< HEAD
++=======
+ extern int iscsit_ta_fabric_prot_type(struct iscsi_portal_group *, u32);
+ extern int iscsit_ta_tpg_enabled_sendtargets(struct iscsi_portal_group *, u32);
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
  
  #endif /* ISCSI_TARGET_TPG_H */
diff --cc include/target/iscsi/iscsi_target_core.h
index 41cfb95c7cde,ab465858f462..000000000000
--- a/include/target/iscsi/iscsi_target_core.h
+++ b/include/target/iscsi/iscsi_target_core.h
@@@ -60,6 -61,9 +60,12 @@@
  #define TA_CACHE_CORE_NPS		0
  /* T10 protection information disabled by default */
  #define TA_DEFAULT_T10_PI		0
++<<<<<<< HEAD
++=======
+ #define TA_DEFAULT_FABRIC_PROT_TYPE	0
+ /* TPG status needs to be enabled to return sendtargets discovery endpoint info */
+ #define TA_DEFAULT_TPG_ENABLED_SENDTARGETS 1
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
  
  #define ISCSI_IOV_DATA_BUFFER		5
  
@@@ -771,6 -764,8 +777,11 @@@ struct iscsi_tpg_attrib 
  	u32			demo_mode_discovery;
  	u32			default_erl;
  	u8			t10_pi;
++<<<<<<< HEAD
++=======
+ 	u32			fabric_prot_type;
+ 	u32			tpg_enabled_sendtargets;
++>>>>>>> a6415cddc4e6 (iscsi-target: Add tpg_enabled_sendtargets for disabled discovery)
  	struct iscsi_portal_group *tpg;
  };
  
diff --git a/drivers/target/iscsi/iscsi_target.c b/drivers/target/iscsi/iscsi_target.c
index c4fef98585d3..61cf874d9bd8 100644
--- a/drivers/target/iscsi/iscsi_target.c
+++ b/drivers/target/iscsi/iscsi_target.c
@@ -3386,6 +3386,7 @@ iscsit_build_sendtargets_response(struct iscsi_cmd *cmd,
 	int target_name_printed;
 	unsigned char buf[ISCSI_IQN_LEN+12]; /* iqn + "TargetName=" + \0 */
 	unsigned char *text_in = cmd->text_in_ptr, *text_ptr = NULL;
+	bool active;
 
 	buffer_len = min(conn->conn_ops->MaxRecvDataSegmentLength,
 			 SENDTARGETS_BUF_LIMIT);
@@ -3439,13 +3440,12 @@ iscsit_build_sendtargets_response(struct iscsi_cmd *cmd,
 			}
 
 			spin_lock(&tpg->tpg_state_lock);
-			if ((tpg->tpg_state == TPG_STATE_FREE) ||
-			    (tpg->tpg_state == TPG_STATE_INACTIVE)) {
-				spin_unlock(&tpg->tpg_state_lock);
-				continue;
-			}
+			active = (tpg->tpg_state == TPG_STATE_ACTIVE);
 			spin_unlock(&tpg->tpg_state_lock);
 
+			if (!active && tpg->tpg_attrib.tpg_enabled_sendtargets)
+				continue;
+
 			spin_lock(&tpg->tpg_np_lock);
 			list_for_each_entry(tpg_np, &tpg->tpg_gnp_list,
 						tpg_np_list) {
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
* Unmerged path drivers/target/iscsi/iscsi_target_tpg.c
* Unmerged path drivers/target/iscsi/iscsi_target_tpg.h
* Unmerged path include/target/iscsi/iscsi_target_core.h
