SUNRPC: Ensure that we wait for connections to complete before retrying

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 0fdea1e8a2853f79d39b8555cc9de16a7e0ab26f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0fdea1e8.failed

Commit 718ba5b87343, moved the responsibility for unlocking the socket to
xs_tcp_setup_socket, meaning that the socket will be unlocked before we
know that it has finished trying to connect. The following patch is based on
an initial patch by Russell King to ensure that we delay clearing the
XPRT_CONNECTING flag until we either know that we failed to initiate
a connection attempt, or the connection attempt itself failed.

Fixes: 718ba5b87343 ("SUNRPC: Add helpers to prevent socket create from racing")
	Reported-by: Russell King <linux@arm.linux.org.uk>
	Reported-by: Russell King <rmk+kernel@arm.linux.org.uk>
	Tested-by: Russell King <rmk+kernel@arm.linux.org.uk>
	Tested-by: Benjamin Coddington <bcodding@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 0fdea1e8a2853f79d39b8555cc9de16a7e0ab26f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/xprtsock.h
#	net/sunrpc/xprtsock.c
diff --cc include/linux/sunrpc/xprtsock.h
index 1ad36cc25b2e,357e44c1a46b..000000000000
--- a/include/linux/sunrpc/xprtsock.h
+++ b/include/linux/sunrpc/xprtsock.h
@@@ -17,6 -17,68 +17,71 @@@ void		cleanup_socket_xprt(void)
  #define RPC_DEF_MIN_RESVPORT	(665U)
  #define RPC_DEF_MAX_RESVPORT	(1023U)
  
++<<<<<<< HEAD
++=======
+ struct sock_xprt {
+ 	struct rpc_xprt		xprt;
+ 
+ 	/*
+ 	 * Network layer
+ 	 */
+ 	struct socket *		sock;
+ 	struct sock *		inet;
+ 
+ 	/*
+ 	 * State of TCP reply receive
+ 	 */
+ 	__be32			tcp_fraghdr,
+ 				tcp_xid,
+ 				tcp_calldir;
+ 
+ 	u32			tcp_offset,
+ 				tcp_reclen;
+ 
+ 	unsigned long		tcp_copied,
+ 				tcp_flags;
+ 
+ 	/*
+ 	 * Connection of transports
+ 	 */
+ 	unsigned long		sock_state;
+ 	struct delayed_work	connect_worker;
+ 	struct sockaddr_storage	srcaddr;
+ 	unsigned short		srcport;
+ 
+ 	/*
+ 	 * UDP socket buffer size parameters
+ 	 */
+ 	size_t			rcvsize,
+ 				sndsize;
+ 
+ 	/*
+ 	 * Saved socket callback addresses
+ 	 */
+ 	void			(*old_data_ready)(struct sock *);
+ 	void			(*old_state_change)(struct sock *);
+ 	void			(*old_write_space)(struct sock *);
+ 	void			(*old_error_report)(struct sock *);
+ };
+ 
+ /*
+  * TCP receive state flags
+  */
+ #define TCP_RCV_LAST_FRAG	(1UL << 0)
+ #define TCP_RCV_COPY_FRAGHDR	(1UL << 1)
+ #define TCP_RCV_COPY_XID	(1UL << 2)
+ #define TCP_RCV_COPY_DATA	(1UL << 3)
+ #define TCP_RCV_READ_CALLDIR	(1UL << 4)
+ #define TCP_RCV_COPY_CALLDIR	(1UL << 5)
+ 
+ /*
+  * TCP RPC flags
+  */
+ #define TCP_RPC_REPLY		(1UL << 6)
+ 
+ #define XPRT_SOCK_CONNECTING	1U
+ 
++>>>>>>> 0fdea1e8a285 (SUNRPC: Ensure that we wait for connections to complete before retrying)
  #endif /* __KERNEL__ */
  
  #endif /* _LINUX_SUNRPC_XPRTSOCK_H */
diff --cc net/sunrpc/xprtsock.c
index 357bc10926b1,c35038511686..000000000000
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@@ -1599,13 -1496,14 +1601,19 @@@ static void xs_tcp_state_change(struct 
  		break;
  	case TCP_LAST_ACK:
  		set_bit(XPRT_CLOSING, &xprt->state);
 -		smp_mb__before_atomic();
 +		xs_tcp_schedule_linger_timeout(xprt, xs_tcp_fin_timeout);
 +		smp_mb__before_clear_bit();
  		clear_bit(XPRT_CONNECTED, &xprt->state);
 -		smp_mb__after_atomic();
 +		smp_mb__after_clear_bit();
  		break;
  	case TCP_CLOSE:
++<<<<<<< HEAD
 +		xs_tcp_cancel_linger_timeout(xprt);
++=======
+ 		if (test_and_clear_bit(XPRT_SOCK_CONNECTING,
+ 					&transport->sock_state))
+ 			xprt_clear_connecting(xprt);
++>>>>>>> 0fdea1e8a285 (SUNRPC: Ensure that we wait for connections to complete before retrying)
  		xs_sock_mark_closed(xprt);
  	}
   out:
* Unmerged path include/linux/sunrpc/xprtsock.h
* Unmerged path net/sunrpc/xprtsock.c
