sched: Fix sched_setparam() policy == -1 logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Daniel Bristot de Oliveira <bristot@redhat.com>
commit d8d28c8f00e84a72e8bee39a85835635417bee49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d8d28c8f.failed

The scheduler uses policy == -1 to preserve the current policy state to
implement sched_setparam(). But, as (int) -1 is equals to 0xffffffff,
it's matching the if (policy & SCHED_RESET_ON_FORK) on
_sched_setscheduler(). This match changes the policy value to an
invalid value, breaking the sched_setparam() syscall.

This patch checks policy == -1 before check the SCHED_RESET_ON_FORK flag.

The following program shows the bug:

int main(void)
{
	struct sched_param param = {
		.sched_priority = 5,
	};

	sched_setscheduler(0, SCHED_FIFO, &param);
	param.sched_priority = 1;
	sched_setparam(0, &param);
	param.sched_priority = 0;
	sched_getparam(0, &param);
	if (param.sched_priority != 1)
		printf("failed priority setting (found %d instead of 1)\n",
			param.sched_priority);
	else
		printf("priority setting fine\n");
}

	Signed-off-by: Daniel Bristot de Oliveira <bristot@redhat.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
	Cc: <stable@vger.kernel.org> # 3.14+
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: linux-kernel@vger.kernel.org
Fixes: 7479f3c9cf67 "sched: Move SCHED_RESET_ON_FORK into attr::sched_flags"
Link: http://lkml.kernel.org/r/9ebe0566a08dbbb3999759d3f20d6004bb2dbcfa.1406079891.git.bristot@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d8d28c8f00e84a72e8bee39a85835635417bee49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 04c5c65570ca,0acf96b790c5..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -4277,6 -3548,27 +4277,30 @@@ recheck
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int _sched_setscheduler(struct task_struct *p, int policy,
+ 			       const struct sched_param *param, bool check)
+ {
+ 	struct sched_attr attr = {
+ 		.sched_policy   = policy,
+ 		.sched_priority = param->sched_priority,
+ 		.sched_nice	= PRIO_TO_NICE(p->static_prio),
+ 	};
+ 
+ 	/*
+ 	 * Fixup the legacy SCHED_RESET_ON_FORK hack, except if
+ 	 * the policy=-1 was passed by sched_setparam().
+ 	 */
+ 	if ((policy != -1) && (policy & SCHED_RESET_ON_FORK)) {
+ 		attr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
+ 		policy &= ~SCHED_RESET_ON_FORK;
+ 		attr.sched_policy = policy;
+ 	}
+ 
+ 	return __sched_setscheduler(p, &attr, check);
+ }
++>>>>>>> d8d28c8f00e8 (sched: Fix sched_setparam() policy == -1 logic)
  /**
   * sched_setscheduler - change the scheduling policy and/or RT priority of a thread.
   * @p: the task in question.
* Unmerged path kernel/sched/core.c
