kprobes/ftrace: Recover original IP if pre_handler doesn't change it

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
commit a017784f1b236cbc42ce83b4345a667c21113481
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a017784f.failed

Recover original IP register if the pre_handler doesn't change it.
Since current kprobes doesn't expect that another ftrace handler
may change regs->ip, it sets kprobe.addr + MCOUNT_INSN_SIZE to
regs->ip and returns to ftrace.
This seems wrong behavior since kprobes can recover regs->ip
and safely pass it to another handler.

This adds code which recovers original regs->ip passed from
ftrace right before returning to ftrace, so that another ftrace
user can change regs->ip.

Link: http://lkml.kernel.org/r/20141009130106.4698.26362.stgit@kbuild-f20.novalocal

	Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit a017784f1b236cbc42ce83b4345a667c21113481)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/kprobes/ftrace.c
diff --cc arch/x86/kernel/kprobes/ftrace.c
index 23ef5c556f06,5f8f0b3cc674..000000000000
--- a/arch/x86/kernel/kprobes/ftrace.c
+++ b/arch/x86/kernel/kprobes/ftrace.c
@@@ -25,8 -25,9 +25,14 @@@
  
  #include "common.h"
  
++<<<<<<< HEAD
 +static int __skip_singlestep(struct kprobe *p, struct pt_regs *regs,
 +			     struct kprobe_ctlblk *kcb)
++=======
+ static nokprobe_inline
+ int __skip_singlestep(struct kprobe *p, struct pt_regs *regs,
+ 		      struct kprobe_ctlblk *kcb, unsigned long orig_ip)
++>>>>>>> a017784f1b23 (kprobes/ftrace: Recover original IP if pre_handler doesn't change it)
  {
  	/*
  	 * Emulate singlestep (and also recover regs->ip)
@@@ -41,11 -44,11 +49,11 @@@
  	return 1;
  }
  
 -int skip_singlestep(struct kprobe *p, struct pt_regs *regs,
 -		    struct kprobe_ctlblk *kcb)
 +int __kprobes skip_singlestep(struct kprobe *p, struct pt_regs *regs,
 +			      struct kprobe_ctlblk *kcb)
  {
  	if (kprobe_ftrace(p))
- 		return __skip_singlestep(p, regs, kcb);
+ 		return __skip_singlestep(p, regs, kcb, 0);
  	else
  		return 0;
  }
* Unmerged path arch/x86/kernel/kprobes/ftrace.c
