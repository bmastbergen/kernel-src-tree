mmc: sdhci: also get preset value and driver type for MMC_DDR52

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: also get preset value and driver type for MMC_DDR52 (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 95.87%
commit-author Jisheng Zhang <jszhang@marvell.com>
commit 0dafa60eb2506617e6968b97cc5a44914a7fb1a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0dafa60e.failed

commit bb8175a8aa42 ("mmc: sdhci: clarify DDR timing mode between
SD-UHS and eMMC") added MMC_DDR52 as eMMC's DDR mode to be
distinguished from SD-UHS, but it missed setting driver type for
MMC_DDR52 timing mode.

So sometimes we get the following error on Marvell BG2Q DMP board:

[    1.559598] mmcblk0: error -84 transferring data, sector 0, nr 8, cmd
response 0x900, card status 0xb00
[    1.569314] mmcblk0: retrying using single block read
[    1.575676] mmcblk0: error -84 transferring data, sector 2, nr 6, cmd
response 0x900, card status 0x0
[    1.585202] blk_update_request: I/O error, dev mmcblk0, sector 2
[    1.591818] mmcblk0: error -84 transferring data, sector 3, nr 5, cmd
response 0x900, card status 0x0
[    1.601341] blk_update_request: I/O error, dev mmcblk0, sector 3

This patches fixes this by adding the missing driver type setting.

Fixes: bb8175a8aa42 ("mmc: sdhci: clarify DDR timing mode ...")
	Signed-off-by: Jisheng Zhang <jszhang@marvell.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 0dafa60eb2506617e6968b97cc5a44914a7fb1a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci.c
diff --cc drivers/mmc/host/sdhci.c
index 0b59825ebddf,64b7fdbd1a9c..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -1118,26 -1117,29 +1118,31 @@@ static void sdhci_finish_command(struc
  
  static u16 sdhci_get_preset_value(struct sdhci_host *host)
  {
 -	u16 preset = 0;
 +	u16 ctrl, preset = 0;
 +
 +	ctrl = sdhci_readw(host, SDHCI_HOST_CONTROL2);
  
 -	switch (host->timing) {
 -	case MMC_TIMING_UHS_SDR12:
 +	switch (ctrl & SDHCI_CTRL_UHS_MASK) {
 +	case SDHCI_CTRL_UHS_SDR12:
  		preset = sdhci_readw(host, SDHCI_PRESET_FOR_SDR12);
  		break;
 -	case MMC_TIMING_UHS_SDR25:
 +	case SDHCI_CTRL_UHS_SDR25:
  		preset = sdhci_readw(host, SDHCI_PRESET_FOR_SDR25);
  		break;
 -	case MMC_TIMING_UHS_SDR50:
 +	case SDHCI_CTRL_UHS_SDR50:
  		preset = sdhci_readw(host, SDHCI_PRESET_FOR_SDR50);
  		break;
 -	case MMC_TIMING_UHS_SDR104:
 -	case MMC_TIMING_MMC_HS200:
 +	case SDHCI_CTRL_UHS_SDR104:
  		preset = sdhci_readw(host, SDHCI_PRESET_FOR_SDR104);
  		break;
++<<<<<<< HEAD
 +	case SDHCI_CTRL_UHS_DDR50:
++=======
+ 	case MMC_TIMING_UHS_DDR50:
+ 	case MMC_TIMING_MMC_DDR52:
++>>>>>>> 0dafa60eb250 (mmc: sdhci: also get preset value and driver type for MMC_DDR52)
  		preset = sdhci_readw(host, SDHCI_PRESET_FOR_DDR50);
  		break;
 -	case MMC_TIMING_MMC_HS400:
 -		preset = sdhci_readw(host, SDHCI_PRESET_FOR_HS400);
 -		break;
  	default:
  		pr_warn("%s: Invalid UHS-I mode selected\n",
  			mmc_hostname(host->mmc));
* Unmerged path drivers/mmc/host/sdhci.c
