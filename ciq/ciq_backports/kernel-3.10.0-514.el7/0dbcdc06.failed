mmc: core: enable support for the standard "wakeup-source" property

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] core: enable support for the standard "wakeup-source" property (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 96.12%
commit-author Sudeep Holla <Sudeep.Holla@arm.com>
commit 0dbcdc0622ea77fae87732c485ca13a1f9375571
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0dbcdc06.failed

Though the mmc core driver should/will continue to support the legacy
"enable-sdio-wakeup" property to enable SDIO as the wakeup source, we
need to add support for the new standard property "wakeup-source".

This patch adds support for "wakeup-source" property in addition to the
existing "enable-sdio-wakeup" property.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 0dbcdc0622ea77fae87732c485ca13a1f9375571)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/host.c
diff --cc drivers/mmc/core/host.c
index 1ef8c2a03585,e2cad924a26f..000000000000
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@@ -394,65 -236,59 +394,70 @@@ int mmc_of_parse(struct mmc_host *host
  	}
  
  	/* Parse Write Protection */
 -	ro_cap_invert = of_property_read_bool(np, "wp-inverted");
 -
 -	ret = mmc_gpiod_request_ro(host, "wp", 0, false, 0, &ro_gpio_invert);
 -	if (!ret)
 -		dev_info(host->parent, "Got WP GPIO\n");
 -	else if (ret != -ENOENT && ret != -ENOSYS)
 -		return ret;
 +	explicit_inv_wp = of_property_read_bool(np, "wp-inverted");
  
 -	if (of_property_read_bool(np, "disable-wp"))
 -		host->caps2 |= MMC_CAP2_NO_WRITE_PROTECT;
 -
 -	/* See the comment on CD inversion above */
 -	if (ro_cap_invert ^ ro_gpio_invert)
 +	gpio = of_get_named_gpio_flags(np, "wp-gpios", 0, &flags);
 +	if (gpio == -EPROBE_DEFER) {
 +		ret = -EPROBE_DEFER;
 +		goto out;
 +	}
 +	if (gpio_is_valid(gpio)) {
 +		if (!(flags & OF_GPIO_ACTIVE_LOW))
 +			gpio_inv_wp = true;
 +
 +		ret = mmc_gpio_request_ro(host, gpio);
 +		if (ret < 0) {
 +			dev_err(host->parent,
 +				"Failed to request WP GPIO: %d!\n", ret);
 +			goto out;
 +		} else {
 +				dev_info(host->parent, "Got WP GPIO #%d.\n",
 +					 gpio);
 +		}
 +	}
 +	if (explicit_inv_wp ^ gpio_inv_wp)
  		host->caps2 |= MMC_CAP2_RO_ACTIVE_HIGH;
  
 -	if (of_property_read_bool(np, "cap-sd-highspeed"))
 +	if (of_find_property(np, "cap-sd-highspeed", &len))
  		host->caps |= MMC_CAP_SD_HIGHSPEED;
 -	if (of_property_read_bool(np, "cap-mmc-highspeed"))
 +	if (of_find_property(np, "cap-mmc-highspeed", &len))
  		host->caps |= MMC_CAP_MMC_HIGHSPEED;
 -	if (of_property_read_bool(np, "sd-uhs-sdr12"))
 +	if (of_find_property(np, "sd-uhs-sdr12", &len))
  		host->caps |= MMC_CAP_UHS_SDR12;
 -	if (of_property_read_bool(np, "sd-uhs-sdr25"))
 +	if (of_find_property(np, "sd-uhs-sdr25", &len))
  		host->caps |= MMC_CAP_UHS_SDR25;
 -	if (of_property_read_bool(np, "sd-uhs-sdr50"))
 +	if (of_find_property(np, "sd-uhs-sdr50", &len))
  		host->caps |= MMC_CAP_UHS_SDR50;
 -	if (of_property_read_bool(np, "sd-uhs-sdr104"))
 +	if (of_find_property(np, "sd-uhs-sdr104", &len))
  		host->caps |= MMC_CAP_UHS_SDR104;
 -	if (of_property_read_bool(np, "sd-uhs-ddr50"))
 +	if (of_find_property(np, "sd-uhs-ddr50", &len))
  		host->caps |= MMC_CAP_UHS_DDR50;
 -	if (of_property_read_bool(np, "cap-power-off-card"))
 +	if (of_find_property(np, "cap-power-off-card", &len))
  		host->caps |= MMC_CAP_POWER_OFF_CARD;
 -	if (of_property_read_bool(np, "cap-mmc-hw-reset"))
 -		host->caps |= MMC_CAP_HW_RESET;
 -	if (of_property_read_bool(np, "cap-sdio-irq"))
 +	if (of_find_property(np, "cap-sdio-irq", &len))
  		host->caps |= MMC_CAP_SDIO_IRQ;
 -	if (of_property_read_bool(np, "full-pwr-cycle"))
 +	if (of_find_property(np, "full-pwr-cycle", &len))
  		host->caps2 |= MMC_CAP2_FULL_PWR_CYCLE;
 -	if (of_property_read_bool(np, "keep-power-in-suspend"))
 +	if (of_find_property(np, "keep-power-in-suspend", &len))
  		host->pm_caps |= MMC_PM_KEEP_POWER;
++<<<<<<< HEAD
 +	if (of_find_property(np, "enable-sdio-wakeup", &len))
++=======
+ 	if (of_property_read_bool(np, "wakeup-source") ||
+ 	    of_property_read_bool(np, "enable-sdio-wakeup")) /* legacy */
++>>>>>>> 0dbcdc0622ea (mmc: core: enable support for the standard "wakeup-source" property)
  		host->pm_caps |= MMC_PM_WAKE_SDIO_IRQ;
 -	if (of_property_read_bool(np, "mmc-ddr-1_8v"))
 +	if (of_find_property(np, "mmc-ddr-1_8v", &len))
  		host->caps |= MMC_CAP_1_8V_DDR;
 -	if (of_property_read_bool(np, "mmc-ddr-1_2v"))
 +	if (of_find_property(np, "mmc-ddr-1_2v", &len))
  		host->caps |= MMC_CAP_1_2V_DDR;
 -	if (of_property_read_bool(np, "mmc-hs200-1_8v"))
 +	if (of_find_property(np, "mmc-hs200-1_8v", &len))
  		host->caps2 |= MMC_CAP2_HS200_1_8V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs200-1_2v"))
 +	if (of_find_property(np, "mmc-hs200-1_2v", &len))
  		host->caps2 |= MMC_CAP2_HS200_1_2V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs400-1_8v"))
 +	if (of_find_property(np, "mmc-hs400-1_8v", &len))
  		host->caps2 |= MMC_CAP2_HS400_1_8V | MMC_CAP2_HS200_1_8V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs400-1_2v"))
 +	if (of_find_property(np, "mmc-hs400-1_2v", &len))
  		host->caps2 |= MMC_CAP2_HS400_1_2V | MMC_CAP2_HS200_1_2V_SDR;
  
  	host->dsr_req = !of_property_read_u32(np, "dsr", &host->dsr);
* Unmerged path drivers/mmc/core/host.c
diff --git a/drivers/mmc/host/sdhci-pltfm.c b/drivers/mmc/host/sdhci-pltfm.c
index 77ef5293aa82..b71e2548e163 100644
--- a/drivers/mmc/host/sdhci-pltfm.c
+++ b/drivers/mmc/host/sdhci-pltfm.c
@@ -100,7 +100,8 @@ void sdhci_get_of_property(struct platform_device *pdev)
 	if (of_find_property(np, "keep-power-in-suspend", NULL))
 		host->mmc->pm_caps |= MMC_PM_KEEP_POWER;
 
-	if (of_find_property(np, "enable-sdio-wakeup", NULL))
+	if (of_property_read_bool(np, "wakeup-source") ||
+	    of_property_read_bool(np, "enable-sdio-wakeup")) /* legacy */
 		host->mmc->pm_caps |= MMC_PM_WAKE_SDIO_IRQ;
 }
 #else
