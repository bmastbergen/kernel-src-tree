usb: host: add has_tdi_phy_lpm capability bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] host: add has_tdi_phy_lpm capability bit (Don Zickus) [1303209]
Rebuild_FUZZ: 94.12%
commit-author Tuomas Tynkkynen <ttynkkynen@nvidia.com>
commit 2cdcec4fedd6a5ee77bd551e6be7505f2230cd43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2cdcec4f.failed

The has_hostpc capability bit indicates that the host controller has the
HOSTPC register extensions, but at the same time enables clock disabling
power saving features with the PHY Low Power Clock Disable (PHCD) bit.

However, some host controllers have the HOSTPC extensions but don't
support the low-power feature, so the PHCD bit must not be set on those
controllers. Add a separate capability bit for the low-power feature
instead, and change all existing users of has_hostpc to use this new
capability bit.

The idea for this commit is taken from an old 2012 commit that never got
merged ("disociate chipidea PHY low power suspend control from hostpc")

Inspired-by: Matthieu CASTET <matthieu.castet@parrot.com>
	Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Tested-by: Stephen Warren <swarren@nvidia.com>
	Reviewed-by: Stephen Warren <swarren@nvidia.com>
	Signed-off-by: Felipe Balbi <balbi@ti.com>
(cherry picked from commit 2cdcec4fedd6a5ee77bd551e6be7505f2230cd43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/ehci-hub.c
diff --cc drivers/usb/host/ehci-hub.c
index 9290f686ce10,6280bd269e12..000000000000
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@@ -314,18 -308,12 +314,24 @@@ static int ehci_bus_suspend (struct usb
  			changed = 1;
  		}
  	}
 +	spin_unlock_irq(&ehci->lock);
 +
 +	if ((changed && ehci->has_hostpc) || fs_idle_delay) {
 +		/*
 +		 * Wait for HCD to enter low-power mode or for the bus
 +		 * to switch to full-speed idle.
 +		 */
 +		usleep_range(5000, 5500);
 +	}
  
++<<<<<<< HEAD
 +	if (changed && ehci->has_hostpc) {
++=======
+ 	if (changed && ehci->has_tdi_phy_lpm) {
+ 		spin_unlock_irq(&ehci->lock);
+ 		msleep(5);	/* 5 ms for HCD to enter low-power mode */
++>>>>>>> 2cdcec4fedd6 (usb: host: add has_tdi_phy_lpm capability bit)
  		spin_lock_irq(&ehci->lock);
 -
  		port = HCS_N_PORTS(ehci->hcs_params);
  		while (port--) {
  			u32 __iomem	*hostpc_reg = &ehci->regs->hostpc[port];
diff --git a/drivers/usb/chipidea/host.c b/drivers/usb/chipidea/host.c
index 8e9d31277c43..55e7d6fdc22e 100644
--- a/drivers/usb/chipidea/host.c
+++ b/drivers/usb/chipidea/host.c
@@ -63,6 +63,7 @@ static int host_start(struct ci13xxx *ci)
 	ehci = hcd_to_ehci(hcd);
 	ehci->caps = ci->hw_bank.cap;
 	ehci->has_hostpc = ci->hw_bank.lpm;
+	ehci->has_tdi_phy_lpm = ci->hw_bank.lpm;
 
 	ret = usb_add_hcd(hcd, 0, 0);
 	if (ret)
* Unmerged path drivers/usb/host/ehci-hub.c
diff --git a/drivers/usb/host/ehci.h b/drivers/usb/host/ehci.h
index 7dac94014a4a..a45ad2896a41 100644
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@ -235,6 +235,7 @@ struct ehci_hcd {			/* one per controller */
 	#define OHCI_HCCTRL_LEN         0x4
 	__hc32			*ohci_hcctrl_reg;
 	unsigned		has_hostpc:1;
+	unsigned		has_tdi_phy_lpm:1;
 	unsigned		has_ppcd:1; /* support per-port change bits */
 	u8			sbrn;		/* packed release number */
 
