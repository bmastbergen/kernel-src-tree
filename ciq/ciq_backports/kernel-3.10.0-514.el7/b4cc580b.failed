mmc: slot-gpio: Use the parent device while allocating data

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] slot-gpio: Use the parent device while allocating data (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 95.58%
commit-author Ulf Hansson <ulf.hansson@linaro.org>
commit b4cc580bb6fcd9f4f86483d566601984febc1d31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b4cc580b.failed

We had a mix of using the class device and the parent device while
allocating data through the devm_* managed functions.

Let's be more consistent and always use the parent device.

	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit b4cc580bb6fcd9f4f86483d566601984febc1d31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/slot-gpio.c
diff --cc drivers/mmc/core/slot-gpio.c
index f33bbd48c2c0,f9a0c6e8001e..000000000000
--- a/drivers/mmc/core/slot-gpio.c
+++ b/drivers/mmc/core/slot-gpio.c
@@@ -194,6 -164,51 +194,54 @@@ int mmc_gpio_request_cd(struct mmc_hos
  
  	if (irq < 0)
  		host->caps |= MMC_CAP_NEEDS_POLL;
++<<<<<<< HEAD
++=======
+ }
+ EXPORT_SYMBOL(mmc_gpiod_request_cd_irq);
+ 
+ /**
+  * mmc_gpio_request_cd - request a gpio for card-detection
+  * @host: mmc host
+  * @gpio: gpio number requested
+  * @debounce: debounce time in microseconds
+  *
+  * As devm_* managed functions are used in mmc_gpio_request_cd(), client
+  * drivers do not need to worry about freeing up memory.
+  *
+  * If GPIO debouncing is desired, set the debounce parameter to a non-zero
+  * value. The caller is responsible for ensuring that the GPIO driver associated
+  * with the GPIO supports debouncing, otherwise an error will be returned.
+  *
+  * Returns zero on success, else an error.
+  */
+ int mmc_gpio_request_cd(struct mmc_host *host, unsigned int gpio,
+ 			unsigned int debounce)
+ {
+ 	struct mmc_gpio *ctx;
+ 	int ret;
+ 
+ 	ret = mmc_gpio_alloc(host);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	ctx = host->slot.handler_priv;
+ 
+ 	ret = devm_gpio_request_one(host->parent, gpio, GPIOF_DIR_IN,
+ 				    ctx->cd_label);
+ 	if (ret < 0)
+ 		/*
+ 		 * don't bother freeing memory. It might still get used by other
+ 		 * slot functions, in any case it will be freed, when the device
+ 		 * is destroyed.
+ 		 */
+ 		return ret;
+ 
+ 	if (debounce) {
+ 		ret = gpio_set_debounce(gpio, debounce);
+ 		if (ret < 0)
+ 			return ret;
+ 	}
++>>>>>>> b4cc580bb6fc (mmc: slot-gpio: Use the parent device while allocating data)
  
  	ctx->override_cd_active_level = true;
  	ctx->cd_gpio = gpio_to_desc(gpio);
* Unmerged path drivers/mmc/core/slot-gpio.c
