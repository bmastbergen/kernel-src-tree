x86/mce: Make usable address checks Intel-only

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] mce: Make usable address checks Intel-only (Prarit Bhargava) [1301710]
Rebuild_FUZZ: 95.45%
commit-author Borislav Petkov <bp@suse.de>
commit feab21f8356bde572663e29c9d9e48c964292e05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/feab21f8.failed

The MCi_MISC bitfield definitions mce_usable_address() checks
are Intel-only. Make them so.

While at it, move mce_usable_address() up, before all its
callers and get rid of the forward declaration.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Acked-by: Tony Luck <tony.luck@intel.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1448350880-5573-5-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit feab21f8356bde572663e29c9d9e48c964292e05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mcheck/mce.c
diff --cc arch/x86/kernel/cpu/mcheck/mce.c
index cedd2739979e,3865e95cc5ec..000000000000
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@@ -549,9 -471,52 +549,55 @@@ static void mce_report_event(struct pt_
  		return;
  	}
  
 -	irq_work_queue(&mce_irq_work);
 +	irq_work_queue(&__get_cpu_var(mce_irq_work));
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Check if the address reported by the CPU is in a format we can parse.
+  * It would be possible to add code for most other cases, but all would
+  * be somewhat complicated (e.g. segment offset would require an instruction
+  * parser). So only support physical addresses up to page granuality for now.
+  */
+ static int mce_usable_address(struct mce *m)
+ {
+ 	if (!(m->status & MCI_STATUS_MISCV) || !(m->status & MCI_STATUS_ADDRV))
+ 		return 0;
+ 
+ 	/* Checks after this one are Intel-specific: */
+ 	if (boot_cpu_data.x86_vendor != X86_VENDOR_INTEL)
+ 		return 1;
+ 
+ 	if (MCI_MISC_ADDR_LSB(m->misc) > PAGE_SHIFT)
+ 		return 0;
+ 	if (MCI_MISC_ADDR_MODE(m->misc) != MCI_MISC_ADDR_PHYS)
+ 		return 0;
+ 	return 1;
+ }
+ 
+ static int srao_decode_notifier(struct notifier_block *nb, unsigned long val,
+ 				void *data)
+ {
+ 	struct mce *mce = (struct mce *)data;
+ 	unsigned long pfn;
+ 
+ 	if (!mce)
+ 		return NOTIFY_DONE;
+ 
+ 	if (mce_usable_address(mce) && (mce->severity == MCE_AO_SEVERITY)) {
+ 		pfn = mce->addr >> PAGE_SHIFT;
+ 		memory_failure(pfn, MCE_VECTOR, 0);
+ 	}
+ 
+ 	return NOTIFY_OK;
+ }
+ static struct notifier_block mce_srao_nb = {
+ 	.notifier_call	= srao_decode_notifier,
+ 	.priority = INT_MAX,
+ };
+ 
++>>>>>>> feab21f8356b (x86/mce: Make usable address checks Intel-only)
  /*
   * Read ADDR and MISC registers.
   */
* Unmerged path arch/x86/kernel/cpu/mcheck/mce.c
