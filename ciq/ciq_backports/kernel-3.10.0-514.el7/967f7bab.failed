ses: add enclosure logical id

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dan Williams <dan.j.williams@intel.com>
commit 967f7bab0eaaa74d7d01a56d45aa309f78fb87dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/967f7bab.failed

Export the NAA logical id for the enclosure.  This is optionally
available from the sas_transport_class, but it is really a property of
the enclosure.

	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
	Signed-off-by: Song Liu <songliubraving@fb.com>
	Reviewed-by: Jens Axboe <axboe@fb.com>
	Cc: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 967f7bab0eaaa74d7d01a56d45aa309f78fb87dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/enclosure.c
diff --cc drivers/misc/enclosure.c
index 63c4ab74bf46,958ee988a1e1..000000000000
--- a/drivers/misc/enclosure.c
+++ b/drivers/misc/enclosure.c
@@@ -432,11 -430,26 +432,30 @@@ static ssize_t enclosure_show_component
  
  	return snprintf(buf, 40, "%d\n", edev->components);
  }
 -static DEVICE_ATTR_RO(components);
  
++<<<<<<< HEAD
 +static struct device_attribute enclosure_attrs[] = {
 +	__ATTR(components, S_IRUGO, enclosure_show_components, NULL),
 +	__ATTR_NULL
++=======
+ static ssize_t id_show(struct device *cdev,
+ 				 struct device_attribute *attr,
+ 				 char *buf)
+ {
+ 	struct enclosure_device *edev = to_enclosure_device(cdev);
+ 
+ 	if (edev->cb->show_id)
+ 		return edev->cb->show_id(edev, buf);
+ 	return -EINVAL;
+ }
+ static DEVICE_ATTR_RO(id);
+ 
+ static struct attribute *enclosure_class_attrs[] = {
+ 	&dev_attr_components.attr,
+ 	&dev_attr_id.attr,
+ 	NULL,
++>>>>>>> 967f7bab0eaa (ses: add enclosure logical id)
  };
 -ATTRIBUTE_GROUPS(enclosure_class);
  
  static struct class enclosure_class = {
  	.name			= "enclosure",
* Unmerged path drivers/misc/enclosure.c
diff --git a/drivers/scsi/ses.c b/drivers/scsi/ses.c
index ca370cb1946a..73fc4e72d998 100644
--- a/drivers/scsi/ses.c
+++ b/drivers/scsi/ses.c
@@ -276,6 +276,14 @@ static int ses_set_active(struct enclosure_device *edev,
 	return ses_set_page2_descriptor(edev, ecomp, desc);
 }
 
+static int ses_show_id(struct enclosure_device *edev, char *buf)
+{
+	struct ses_device *ses_dev = edev->scratch;
+	unsigned long long id = get_unaligned_be64(ses_dev->page1+8+4);
+
+	return sprintf(buf, "%#llx\n", id);
+}
+
 static struct enclosure_component_callbacks ses_enclosure_callbacks = {
 	.get_fault		= ses_get_fault,
 	.set_fault		= ses_set_fault,
@@ -283,6 +291,7 @@ static struct enclosure_component_callbacks ses_enclosure_callbacks = {
 	.get_locate		= ses_get_locate,
 	.set_locate		= ses_set_locate,
 	.set_active		= ses_set_active,
+	.show_id		= ses_show_id,
 };
 
 struct ses_host_edev {
diff --git a/include/linux/enclosure.h b/include/linux/enclosure.h
index a835d335b924..807622b252a4 100644
--- a/include/linux/enclosure.h
+++ b/include/linux/enclosure.h
@@ -79,6 +79,7 @@ struct enclosure_component_callbacks {
 	int (*set_locate)(struct enclosure_device *,
 			  struct enclosure_component *,
 			  enum enclosure_component_setting);
+	int (*show_id)(struct enclosure_device *, char *buf);
 };
 
 
