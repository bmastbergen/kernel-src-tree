zram: remove bio parameter from zram_bvec_rw()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author karam.lee <karam.lee@lge.com>
commit b627cff3d308d3ccb3ec73a89260f5c7872e46a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b627cff3.failed

Recently rw_page block device operation has been added.  This patchset
implements rw_page operation for zram block device and does some clean-up.

This patch (of 3):

Remove an unnecessary parameter(bio) from zram_bvec_rw() and
zram_bvec_read().  zram_bvec_read() doesn't use a bio parameter, so remove
it.  zram_bvec_rw() calls a read/write operation not using bio, so a rw
parameter replaces a bio parameter.

	Signed-off-by: karam.lee <karam.lee@lge.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
	Acked-by: Jerome Marchand <jmarchan@redhat.com>
	Cc: Matthew Wilcox <matthew.r.wilcox@intel.com>
	Cc: Nitin Gupta <ngupta@vflare.org>
	Cc: <seungho1.park@lge.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b627cff3d308d3ccb3ec73a89260f5c7872e46a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/zram/zram_drv.c
diff --cc drivers/block/zram/zram_drv.c
index 294e16906db2,ac5be75c013f..000000000000
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@@ -626,14 -645,17 +626,26 @@@ out
  }
  
  static int zram_bvec_rw(struct zram *zram, struct bio_vec *bvec, u32 index,
++<<<<<<< HEAD
 +			int offset, struct bio *bio, int rw)
 +{
 +	int ret;
 +
 +	if (rw == READ)
 +		ret = zram_bvec_read(zram, bvec, index, offset, bio);
 +	else
++=======
+ 			int offset, int rw)
+ {
+ 	int ret;
+ 
+ 	if (rw == READ) {
+ 		atomic64_inc(&zram->stats.num_reads);
+ 		ret = zram_bvec_read(zram, bvec, index, offset);
+ 	} else {
+ 		atomic64_inc(&zram->stats.num_writes);
++>>>>>>> b627cff3d308 (zram: remove bio parameter from zram_bvec_rw())
  		ret = zram_bvec_write(zram, bvec, index, offset);
 -	}
  
  	if (unlikely(ret)) {
  		if (rw == READ)
@@@ -789,51 -850,50 +801,71 @@@ out
  	return ret;
  }
  
 -static void __zram_make_request(struct zram *zram, struct bio *bio)
 +static void __zram_make_request(struct zram *zram, struct bio *bio, int rw)
  {
++<<<<<<< HEAD
 +	int i, offset;
++=======
+ 	int offset, rw;
++>>>>>>> b627cff3d308 (zram: remove bio parameter from zram_bvec_rw())
  	u32 index;
 -	struct bio_vec bvec;
 -	struct bvec_iter iter;
 -
 -	index = bio->bi_iter.bi_sector >> SECTORS_PER_PAGE_SHIFT;
 -	offset = (bio->bi_iter.bi_sector &
 -		  (SECTORS_PER_PAGE - 1)) << SECTOR_SHIFT;
 +	struct bio_vec *bvec;
  
 -	if (unlikely(bio->bi_rw & REQ_DISCARD)) {
 -		zram_bio_discard(zram, index, offset, bio);
 -		bio_endio(bio, 0);
 -		return;
 +	switch (rw) {
 +	case READ:
 +		atomic64_inc(&zram->stats.num_reads);
 +		break;
 +	case WRITE:
 +		atomic64_inc(&zram->stats.num_writes);
 +		break;
  	}
  
++<<<<<<< HEAD
 +	index = bio->bi_sector >> SECTORS_PER_PAGE_SHIFT;
 +	offset = (bio->bi_sector & (SECTORS_PER_PAGE - 1)) << SECTOR_SHIFT;
 +
 +	bio_for_each_segment(bvec, bio, i) {
++=======
+ 	rw = bio_data_dir(bio);
+ 	bio_for_each_segment(bvec, bio, iter) {
++>>>>>>> b627cff3d308 (zram: remove bio parameter from zram_bvec_rw())
  		int max_transfer_size = PAGE_SIZE - offset;
  
 -		if (bvec.bv_len > max_transfer_size) {
 +		if (bvec->bv_len > max_transfer_size) {
  			/*
  			 * zram_bvec_rw() can only make operation on a single
  			 * zram page. Split the bio vector.
  			 */
  			struct bio_vec bv;
  
 -			bv.bv_page = bvec.bv_page;
 +			bv.bv_page = bvec->bv_page;
  			bv.bv_len = max_transfer_size;
 -			bv.bv_offset = bvec.bv_offset;
 +			bv.bv_offset = bvec->bv_offset;
  
++<<<<<<< HEAD
 +			if (zram_bvec_rw(zram, &bv, index, offset, bio, rw) < 0)
++=======
+ 			if (zram_bvec_rw(zram, &bv, index, offset, rw) < 0)
++>>>>>>> b627cff3d308 (zram: remove bio parameter from zram_bvec_rw())
  				goto out;
  
 -			bv.bv_len = bvec.bv_len - max_transfer_size;
 +			bv.bv_len = bvec->bv_len - max_transfer_size;
  			bv.bv_offset += max_transfer_size;
++<<<<<<< HEAD
 +			if (zram_bvec_rw(zram, &bv, index+1, 0, bio, rw) < 0)
 +				goto out;
 +		} else
 +			if (zram_bvec_rw(zram, bvec, index, offset, bio, rw)
 +			    < 0)
++=======
+ 			if (zram_bvec_rw(zram, &bv, index + 1, 0, rw) < 0)
+ 				goto out;
+ 		} else
+ 			if (zram_bvec_rw(zram, &bvec, index, offset, rw) < 0)
++>>>>>>> b627cff3d308 (zram: remove bio parameter from zram_bvec_rw())
  				goto out;
  
 -		update_position(&index, &offset, &bvec);
 +		update_position(&index, &offset, bvec);
  	}
  
  	set_bit(BIO_UPTODATE, &bio->bi_flags);
* Unmerged path drivers/block/zram/zram_drv.c
