cxl: Check periodically the coherent platform function's state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christophe Lombard <clombard@linux.vnet.ibm.com>
commit 266eab8f32cc43b688c2e9aaab63c2565a3998c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/266eab8f.failed

In the PowerVM environment, the PHYP CoherentAccel component manages
the state of the Coherent Accelerator Processor Interface adapter and
virtualizes CAPI resources, handles CAPP, PSL, PSL Slice errors - and
interrupts - and provides a new set of hcalls for the OS APIs to utilize
Accelerator Function Unit (AFU).

During the course of operation, a coherent platform function can
encounter errors. Some possible reason for errors are:
• Hardware recoverable and unrecoverable errors
• Transient and over-threshold correctable errors

PHYP implements its own state model for the coherent platform function.
The state of the AFU is available through a hcall.

The current implementation of the cxl driver, for the PowerVM
environment, checks this state of the AFU only when an action is
requested - open a device, ioctl command, memory map, attach/detach a
process - from an external driver - cxlflash, libcxl. If an error is
detected the cxl driver handles the error according the content of the
Power Architecture Platform Requirements document.

But in case of low-level troubles (or error injection), the PHYP
component may reset the card and change the AFU state. The PHYP
interface doesn't provide any way to be notified when that happens thus
implies that the cxl driver:
• cannot handle immediatly the state change of the AFU.
• cannot notify other drivers (cxlflash, ...)

The purpose of this patch is to wake up the cpu periodically to check
the current state of each AFU and to see if we need to enter an error
recovery path.

	Signed-off-by: Christophe Lombard <clombard@linux.vnet.ibm.com>
	Acked-by: Ian Munsie <imunsie@au1.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 266eab8f32cc43b688c2e9aaab63c2565a3998c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/cxl/cxl.h
#	drivers/misc/cxl/guest.c
diff --cc drivers/misc/cxl/cxl.h
index ea4888bb5ce4,d23a3a59a712..000000000000
--- a/drivers/misc/cxl/cxl.h
+++ b/drivers/misc/cxl/cxl.h
@@@ -381,7 -362,43 +381,47 @@@ struct cxl_afu 
  	unsigned int spa_size;
  	int spa_order;
  	int spa_max_procs;
++<<<<<<< HEAD
 +	unsigned int psl_virq;
++=======
+ 	u64 pp_offset;
+ };
+ 
+ struct cxl_afu_guest {
+ 	struct cxl_afu *parent;
+ 	u64 handle;
+ 	phys_addr_t p2n_phys;
+ 	u64 p2n_size;
+ 	int max_ints;
+ 	bool handle_err;
+ 	struct delayed_work work_err;
+ 	int previous_state;
+ };
+ 
+ struct cxl_afu {
+ 	struct cxl_afu_native *native;
+ 	struct cxl_afu_guest *guest;
+ 	irq_hw_number_t serr_hwirq;
+ 	unsigned int serr_virq;
+ 	char *psl_irq_name;
+ 	char *err_irq_name;
+ 	void __iomem *p2n_mmio;
+ 	phys_addr_t psn_phys;
+ 	u64 pp_size;
+ 
+ 	struct cxl *adapter;
+ 	struct device dev;
+ 	struct cdev afu_cdev_s, afu_cdev_m, afu_cdev_d;
+ 	struct device *chardev_s, *chardev_m, *chardev_d;
+ 	struct idr contexts_idr;
+ 	struct dentry *debugfs;
+ 	struct mutex contexts_lock;
+ 	spinlock_t afu_cntl_lock;
+ 
+ 	/* AFU error buffer fields and bin attribute for sysfs */
+ 	u64 eb_len, eb_offset;
+ 	struct bin_attribute attr_eb;
++>>>>>>> 266eab8f32cc (cxl: Check periodically the coherent platform function's state)
  
  	/* pointer to the vphb */
  	struct pci_controller *phb;
* Unmerged path drivers/misc/cxl/guest.c
* Unmerged path drivers/misc/cxl/cxl.h
* Unmerged path drivers/misc/cxl/guest.c
