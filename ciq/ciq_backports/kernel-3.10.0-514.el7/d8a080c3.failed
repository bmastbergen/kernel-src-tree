hpsa: logical vs bitwise AND typo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit d8a080c3746c0b60905a88ca56e83a8239c184e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d8a080c3.failed

HPSA_DIAG_OPTS_DISABLE_RLD_CACHING is a mask and bitwise AND was
intended here instead of logical &&.  This bug is essentially harmless,
it means that sometimes we don't print a warning message which we wanted
to print.

Fixes: c2adae44e916 ('hpsa: disable report lun data caching')
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Acked-by: Don Brace <don.brace@pmcs.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit d8a080c3746c0b60905a88ca56e83a8239c184e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hpsa.c
diff --cc drivers/scsi/hpsa.c
index 68754355feaa,bff95090e52a..000000000000
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@@ -8302,6 -8625,71 +8302,74 @@@ out
  	kfree(flush_buf);
  }
  
++<<<<<<< HEAD
++=======
+ /* Make controller gather fresh report lun data each time we
+  * send down a report luns request
+  */
+ static void hpsa_disable_rld_caching(struct ctlr_info *h)
+ {
+ 	u32 *options;
+ 	struct CommandList *c;
+ 	int rc;
+ 
+ 	/* Don't bother trying to set diag options if locked up */
+ 	if (unlikely(h->lockup_detected))
+ 		return;
+ 
+ 	options = kzalloc(sizeof(*options), GFP_KERNEL);
+ 	if (!options) {
+ 		dev_err(&h->pdev->dev,
+ 			"Error: failed to disable rld caching, during alloc.\n");
+ 		return;
+ 	}
+ 
+ 	c = cmd_alloc(h);
+ 
+ 	/* first, get the current diag options settings */
+ 	if (fill_cmd(c, BMIC_SENSE_DIAG_OPTIONS, h, options, 4, 0,
+ 		RAID_CTLR_LUNID, TYPE_CMD))
+ 		goto errout;
+ 
+ 	rc = hpsa_scsi_do_simple_cmd_with_retry(h, c,
+ 		PCI_DMA_FROMDEVICE, NO_TIMEOUT);
+ 	if ((rc != 0) || (c->err_info->CommandStatus != 0))
+ 		goto errout;
+ 
+ 	/* Now, set the bit for disabling the RLD caching */
+ 	*options |= HPSA_DIAG_OPTS_DISABLE_RLD_CACHING;
+ 
+ 	if (fill_cmd(c, BMIC_SET_DIAG_OPTIONS, h, options, 4, 0,
+ 		RAID_CTLR_LUNID, TYPE_CMD))
+ 		goto errout;
+ 
+ 	rc = hpsa_scsi_do_simple_cmd_with_retry(h, c,
+ 		PCI_DMA_TODEVICE, NO_TIMEOUT);
+ 	if ((rc != 0)  || (c->err_info->CommandStatus != 0))
+ 		goto errout;
+ 
+ 	/* Now verify that it got set: */
+ 	if (fill_cmd(c, BMIC_SENSE_DIAG_OPTIONS, h, options, 4, 0,
+ 		RAID_CTLR_LUNID, TYPE_CMD))
+ 		goto errout;
+ 
+ 	rc = hpsa_scsi_do_simple_cmd_with_retry(h, c,
+ 		PCI_DMA_FROMDEVICE, NO_TIMEOUT);
+ 	if ((rc != 0)  || (c->err_info->CommandStatus != 0))
+ 		goto errout;
+ 
+ 	if (*options & HPSA_DIAG_OPTS_DISABLE_RLD_CACHING)
+ 		goto out;
+ 
+ errout:
+ 	dev_err(&h->pdev->dev,
+ 			"Error: failed to disable report lun data caching.\n");
+ out:
+ 	cmd_free(h, c);
+ 	kfree(options);
+ }
+ 
++>>>>>>> d8a080c3746c (hpsa: logical vs bitwise AND typo)
  static void hpsa_shutdown(struct pci_dev *pdev)
  {
  	struct ctlr_info *h;
* Unmerged path drivers/scsi/hpsa.c
