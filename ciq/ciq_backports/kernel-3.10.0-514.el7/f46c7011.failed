sctp: move rcu_read_lock from __sctp_lookup_association to sctp_lookup_association

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Xin Long <lucien.xin@gmail.com>
commit f46c7011b062726b798fa3326b5b0c2711ead2a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f46c7011.failed

__sctp_lookup_association() is only invoked by sctp_v4_err() and
sctp_rcv(), both which run on the rx BH, and it has been protected
by rcu_read_lock [see ip_local_deliver_finish() / ipv6_rcv()].

So we can move it to sctp_lookup_association, only let
sctp_lookup_association use rcu_read_lock.

	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f46c7011b062726b798fa3326b5b0c2711ead2a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/input.c
diff --cc net/sctp/input.c
index cd26a52ea425,21a2d6b7abaf..000000000000
--- a/net/sctp/input.c
+++ b/net/sctp/input.c
@@@ -998,34 -934,20 +998,48 @@@ static struct sctp_association *__sctp_
  					const union sctp_addr *peer,
  					struct sctp_transport **pt)
  {
 -	struct sctp_transport *t;
 -	struct sctp_association *asoc = NULL;
 +	struct sctp_hashbucket *head;
 +	struct sctp_ep_common *epb;
 +	struct sctp_association *asoc;
 +	struct sctp_transport *transport;
 +	int hash;
  
++<<<<<<< HEAD
 +	/* Optimize here for direct hit, only listening connections can
 +	 * have wildcards anyways.
 +	 */
 +	hash = sctp_assoc_hashfn(net, ntohs(local->v4.sin_port),
 +				 ntohs(peer->v4.sin_port));
 +	head = &sctp_assoc_hashtable[hash];
 +	read_lock(&head->lock);
 +	sctp_for_each_hentry(epb, &head->chain) {
 +		asoc = sctp_assoc(epb);
 +		transport = sctp_assoc_is_match(asoc, net, local, peer);
 +		if (transport)
 +			goto hit;
 +	}
++=======
+ 	t = sctp_addrs_lookup_transport(net, local, peer);
+ 	if (!t || !sctp_transport_hold(t))
+ 		goto out;
++>>>>>>> f46c7011b062 (sctp: move rcu_read_lock from __sctp_lookup_association to sctp_lookup_association)
  
 -	asoc = t->asoc;
 +	read_unlock(&head->lock);
 +
 +	return NULL;
 +
 +hit:
 +	*pt = transport;
  	sctp_association_hold(asoc);
++<<<<<<< HEAD
 +	read_unlock(&head->lock);
++=======
+ 	*pt = t;
+ 
+ 	sctp_transport_put(t);
+ 
+ out:
++>>>>>>> f46c7011b062 (sctp: move rcu_read_lock from __sctp_lookup_association to sctp_lookup_association)
  	return asoc;
  }
  
@@@ -1038,9 -960,9 +1052,15 @@@ struct sctp_association *sctp_lookup_as
  {
  	struct sctp_association *asoc;
  
++<<<<<<< HEAD
 +	sctp_local_bh_disable();
 +	asoc = __sctp_lookup_association(net, laddr, paddr, transportp);
 +	sctp_local_bh_enable();
++=======
+ 	rcu_read_lock();
+ 	asoc = __sctp_lookup_association(net, laddr, paddr, transportp);
+ 	rcu_read_unlock();
++>>>>>>> f46c7011b062 (sctp: move rcu_read_lock from __sctp_lookup_association to sctp_lookup_association)
  
  	return asoc;
  }
* Unmerged path net/sctp/input.c
