net/mlx5e: Fix checksum handling for non-stripped vlan packets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [include] mlx5e: Fix checksum handling for non-stripped vlan packets (kamal heib) [1275159 1296272 1296405 1298421 1298422 1298423 1298424 1298425]
Rebuild_FUZZ: 96.67%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 1b223dd391622fde05e03829d813c3c6cc998685
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1b223dd3.failed

Now as rx-vlan offload can be disabled, packets can be received
with vlan tag not stripped, which means is_first_ethertype_ip will
return false, for that we need to check if the hardware reported
csum OK so we will report CHECKSUM_UNNECESSARY for those packets.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1b223dd391622fde05e03829d813c3c6cc998685)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
#	include/linux/mlx5/device.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 2dc1f9b26b65,23adfe2fcba9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -168,9 -541,12 +168,16 @@@ static inline void mlx5e_handle_csum(st
  	if (unlikely(!(netdev->features & NETIF_F_RXCSUM)))
  		goto csum_none;
  
 -	if (lro) {
 +	if (likely(cqe->hds_ip_ext & CQE_L4_OK)) {
  		skb->ip_summed = CHECKSUM_UNNECESSARY;
++<<<<<<< HEAD
 +	} else if (is_first_ethertype_ip(skb)) {
++=======
+ 		return;
+ 	}
+ 
+ 	if (is_first_ethertype_ip(skb)) {
++>>>>>>> 1b223dd39162 (net/mlx5e: Fix checksum handling for non-stripped vlan packets)
  		skb->ip_summed = CHECKSUM_COMPLETE;
  		skb->csum = csum_unfold((__force __sum16)cqe->check_sum);
  		rq->stats.csum_sw++;
diff --cc include/linux/mlx5/device.h
index ca924da2b9a5,6bd429b53b77..000000000000
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@@ -649,7 -645,9 +649,13 @@@ struct mlx5_err_cqe 
  };
  
  struct mlx5_cqe64 {
++<<<<<<< HEAD
 +	u8		rsvd0[4];
++=======
+ 	u8		outer_l3_tunneled;
+ 	u8		rsvd0;
+ 	__be16		wqe_id;
++>>>>>>> 1b223dd39162 (net/mlx5e: Fix checksum handling for non-stripped vlan packets)
  	u8		lro_tcppsh_abort_dupack;
  	u8		lro_min_ttl;
  	__be16		lro_tcp_win;
@@@ -687,9 -696,55 +703,9 @@@ static inline u8 cqe_is_tunneled(struc
  
  static inline int cqe_has_vlan(struct mlx5_cqe64 *cqe)
  {
- 	return !!(cqe->l4_hdr_type_etc & 0x1);
+ 	return !!(cqe->l4_l3_hdr_type & 0x1);
  }
  
 -static inline u64 get_cqe_ts(struct mlx5_cqe64 *cqe)
 -{
 -	u32 hi, lo;
 -
 -	hi = be32_to_cpu(cqe->timestamp_h);
 -	lo = be32_to_cpu(cqe->timestamp_l);
 -
 -	return (u64)lo | ((u64)hi << 32);
 -}
 -
 -struct mpwrq_cqe_bc {
 -	__be16	filler_consumed_strides;
 -	__be16	byte_cnt;
 -};
 -
 -static inline u16 mpwrq_get_cqe_byte_cnt(struct mlx5_cqe64 *cqe)
 -{
 -	struct mpwrq_cqe_bc *bc = (struct mpwrq_cqe_bc *)&cqe->byte_cnt;
 -
 -	return be16_to_cpu(bc->byte_cnt);
 -}
 -
 -static inline u16 mpwrq_get_cqe_bc_consumed_strides(struct mpwrq_cqe_bc *bc)
 -{
 -	return 0x7fff & be16_to_cpu(bc->filler_consumed_strides);
 -}
 -
 -static inline u16 mpwrq_get_cqe_consumed_strides(struct mlx5_cqe64 *cqe)
 -{
 -	struct mpwrq_cqe_bc *bc = (struct mpwrq_cqe_bc *)&cqe->byte_cnt;
 -
 -	return mpwrq_get_cqe_bc_consumed_strides(bc);
 -}
 -
 -static inline bool mpwrq_is_filler_cqe(struct mlx5_cqe64 *cqe)
 -{
 -	struct mpwrq_cqe_bc *bc = (struct mpwrq_cqe_bc *)&cqe->byte_cnt;
 -
 -	return 0x8000 & be16_to_cpu(bc->filler_consumed_strides);
 -}
 -
 -static inline u16 mpwrq_get_cqe_stride_index(struct mlx5_cqe64 *cqe)
 -{
 -	return be16_to_cpu(cqe->wqe_counter);
 -}
 -
  enum {
  	CQE_L4_HDR_TYPE_NONE			= 0x0,
  	CQE_L4_HDR_TYPE_TCP_NO_ACK		= 0x1,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index b70e3293db0b..e705954dca76 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -168,6 +168,7 @@ void mlx5e_update_stats(struct mlx5e_priv *priv)
 		s->lro_bytes	+= rq_stats->lro_bytes;
 		s->rx_csum_none	+= rq_stats->csum_none;
 		s->rx_csum_sw	+= rq_stats->csum_sw;
+		s->rx_csum_inner += rq_stats->csum_inner;
 		s->rx_wqe_err   += rq_stats->wqe_err;
 
 		for (j = 0; j < priv->params.num_tc; j++) {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
* Unmerged path include/linux/mlx5/device.h
