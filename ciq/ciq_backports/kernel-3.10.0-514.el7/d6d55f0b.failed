perf/x86/amd: AMD support for bp_len > HW_BREAKPOINT_LEN_8

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] perf: AMD support for bp_len > HW_BREAKPOINT_LEN_8 (Kim Naru) [928536]
Rebuild_FUZZ: 92.59%
commit-author Jacob Shin <jacob.w.shin@gmail.com>
commit d6d55f0b9d900673548515614b56ab55aa2c51f8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d6d55f0b.failed

Implement hardware breakpoint address mask for AMD Family 16h and
above processors. CPUID feature bit indicates hardware support for
DRn_ADDR_MASK MSRs. These masks further qualify DRn/DR7 hardware
breakpoint addresses to allow matching of larger addresses ranges.

Valuable advice and pseudo code from Oleg Nesterov <oleg@redhat.com>

	Signed-off-by: Jacob Shin <jacob.w.shin@gmail.com>
	Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Reviewed-by: Oleg Nesterov <oleg@redhat.com>
	Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: xiakaixu <xiakaixu@huawei.com>
	Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
(cherry picked from commit d6d55f0b9d900673548515614b56ab55aa2c51f8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
diff --cc arch/x86/include/asm/cpufeature.h
index ca3dea2fde08,53966d65591e..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -70,107 -74,108 +70,134 @@@
  
  /* Other features, Linux-defined mapping, word 3 */
  /* This range is used for feature bits which conflict or are synthesized */
 -#define X86_FEATURE_CXMMX	( 3*32+ 0) /* Cyrix MMX extensions */
 -#define X86_FEATURE_K6_MTRR	( 3*32+ 1) /* AMD K6 nonstandard MTRRs */
 -#define X86_FEATURE_CYRIX_ARR	( 3*32+ 2) /* Cyrix ARRs (= MTRRs) */
 -#define X86_FEATURE_CENTAUR_MCR	( 3*32+ 3) /* Centaur MCRs (= MTRRs) */
 +#define X86_FEATURE_CXMMX	(3*32+ 0) /* Cyrix MMX extensions */
 +#define X86_FEATURE_K6_MTRR	(3*32+ 1) /* AMD K6 nonstandard MTRRs */
 +#define X86_FEATURE_CYRIX_ARR	(3*32+ 2) /* Cyrix ARRs (= MTRRs) */
 +#define X86_FEATURE_CENTAUR_MCR	(3*32+ 3) /* Centaur MCRs (= MTRRs) */
  /* cpu types for specific tunings: */
 -#define X86_FEATURE_K8		( 3*32+ 4) /* "" Opteron, Athlon64 */
 -#define X86_FEATURE_K7		( 3*32+ 5) /* "" Athlon */
 -#define X86_FEATURE_P3		( 3*32+ 6) /* "" P3 */
 -#define X86_FEATURE_P4		( 3*32+ 7) /* "" P4 */
 -#define X86_FEATURE_CONSTANT_TSC ( 3*32+ 8) /* TSC ticks at a constant rate */
 -#define X86_FEATURE_UP		( 3*32+ 9) /* smp kernel running on up */
 -/* free, was #define X86_FEATURE_FXSAVE_LEAK ( 3*32+10) * "" FXSAVE leaks FOP/FIP/FOP */
 -#define X86_FEATURE_ARCH_PERFMON ( 3*32+11) /* Intel Architectural PerfMon */
 -#define X86_FEATURE_PEBS	( 3*32+12) /* Precise-Event Based Sampling */
 -#define X86_FEATURE_BTS		( 3*32+13) /* Branch Trace Store */
 -#define X86_FEATURE_SYSCALL32	( 3*32+14) /* "" syscall in ia32 userspace */
 -#define X86_FEATURE_SYSENTER32	( 3*32+15) /* "" sysenter in ia32 userspace */
 -#define X86_FEATURE_REP_GOOD	( 3*32+16) /* rep microcode works well */
 -#define X86_FEATURE_MFENCE_RDTSC ( 3*32+17) /* "" Mfence synchronizes RDTSC */
 -#define X86_FEATURE_LFENCE_RDTSC ( 3*32+18) /* "" Lfence synchronizes RDTSC */
 -/* free, was #define X86_FEATURE_11AP	( 3*32+19) * "" Bad local APIC aka 11AP */
 -#define X86_FEATURE_NOPL	( 3*32+20) /* The NOPL (0F 1F) instructions */
 -#define X86_FEATURE_ALWAYS	( 3*32+21) /* "" Always-present feature */
 -#define X86_FEATURE_XTOPOLOGY	( 3*32+22) /* cpu topology enum extensions */
 -#define X86_FEATURE_TSC_RELIABLE ( 3*32+23) /* TSC is known to be reliable */
 -#define X86_FEATURE_NONSTOP_TSC	( 3*32+24) /* TSC does not stop in C states */
 -/* free, was #define X86_FEATURE_CLFLUSH_MONITOR ( 3*32+25) * "" clflush reqd with monitor */
 -#define X86_FEATURE_EXTD_APICID	( 3*32+26) /* has extended APICID (8 bits) */
 -#define X86_FEATURE_AMD_DCM     ( 3*32+27) /* multi-node processor */
 -#define X86_FEATURE_APERFMPERF	( 3*32+28) /* APERFMPERF */
 -#define X86_FEATURE_EAGER_FPU	( 3*32+29) /* "eagerfpu" Non lazy FPU restore */
 -#define X86_FEATURE_NONSTOP_TSC_S3 ( 3*32+30) /* TSC doesn't stop in S3 state */
 +#define X86_FEATURE_K8		(3*32+ 4) /* "" Opteron, Athlon64 */
 +#define X86_FEATURE_K7		(3*32+ 5) /* "" Athlon */
 +#define X86_FEATURE_P3		(3*32+ 6) /* "" P3 */
 +#define X86_FEATURE_P4		(3*32+ 7) /* "" P4 */
 +#define X86_FEATURE_CONSTANT_TSC (3*32+ 8) /* TSC ticks at a constant rate */
 +#define X86_FEATURE_UP		(3*32+ 9) /* smp kernel running on up */
 +#define X86_FEATURE_FXSAVE_LEAK (3*32+10) /* "" FXSAVE leaks FOP/FIP/FOP */
 +#define X86_FEATURE_ARCH_PERFMON (3*32+11) /* Intel Architectural PerfMon */
 +#define X86_FEATURE_PEBS	(3*32+12) /* Precise-Event Based Sampling */
 +#define X86_FEATURE_BTS		(3*32+13) /* Branch Trace Store */
 +#define X86_FEATURE_SYSCALL32	(3*32+14) /* "" syscall in ia32 userspace */
 +#define X86_FEATURE_SYSENTER32	(3*32+15) /* "" sysenter in ia32 userspace */
 +#define X86_FEATURE_REP_GOOD	(3*32+16) /* rep microcode works well */
 +#define X86_FEATURE_MFENCE_RDTSC (3*32+17) /* "" Mfence synchronizes RDTSC */
 +#define X86_FEATURE_LFENCE_RDTSC (3*32+18) /* "" Lfence synchronizes RDTSC */
 +#define X86_FEATURE_11AP	(3*32+19) /* "" Bad local APIC aka 11AP */
 +#define X86_FEATURE_NOPL	(3*32+20) /* The NOPL (0F 1F) instructions */
 +					  /* 21 available, was AMD_C1E */
 +#define X86_FEATURE_XTOPOLOGY	(3*32+22) /* cpu topology enum extensions */
 +#define X86_FEATURE_TSC_RELIABLE (3*32+23) /* TSC is known to be reliable */
 +#define X86_FEATURE_NONSTOP_TSC	(3*32+24) /* TSC does not stop in C states */
 +#define X86_FEATURE_CLFLUSH_MONITOR (3*32+25) /* "" clflush reqd with monitor */
 +#define X86_FEATURE_EXTD_APICID	(3*32+26) /* has extended APICID (8 bits) */
 +#define X86_FEATURE_AMD_DCM     (3*32+27) /* multi-node processor */
 +#define X86_FEATURE_APERFMPERF	(3*32+28) /* APERFMPERF */
 +#define X86_FEATURE_EAGER_FPU	(3*32+29) /* "eagerfpu" Non lazy FPU restore */
 +#define X86_FEATURE_NONSTOP_TSC_S3 (3*32+30) /* TSC doesn't stop in S3 state */
  
  /* Intel-defined CPU features, CPUID level 0x00000001 (ecx), word 4 */
 -#define X86_FEATURE_XMM3	( 4*32+ 0) /* "pni" SSE-3 */
 -#define X86_FEATURE_PCLMULQDQ	( 4*32+ 1) /* PCLMULQDQ instruction */
 -#define X86_FEATURE_DTES64	( 4*32+ 2) /* 64-bit Debug Store */
 -#define X86_FEATURE_MWAIT	( 4*32+ 3) /* "monitor" Monitor/Mwait support */
 -#define X86_FEATURE_DSCPL	( 4*32+ 4) /* "ds_cpl" CPL Qual. Debug Store */
 -#define X86_FEATURE_VMX		( 4*32+ 5) /* Hardware virtualization */
 -#define X86_FEATURE_SMX		( 4*32+ 6) /* Safer mode */
 -#define X86_FEATURE_EST		( 4*32+ 7) /* Enhanced SpeedStep */
 -#define X86_FEATURE_TM2		( 4*32+ 8) /* Thermal Monitor 2 */
 -#define X86_FEATURE_SSSE3	( 4*32+ 9) /* Supplemental SSE-3 */
 -#define X86_FEATURE_CID		( 4*32+10) /* Context ID */
 -#define X86_FEATURE_FMA		( 4*32+12) /* Fused multiply-add */
 -#define X86_FEATURE_CX16	( 4*32+13) /* CMPXCHG16B */
 -#define X86_FEATURE_XTPR	( 4*32+14) /* Send Task Priority Messages */
 -#define X86_FEATURE_PDCM	( 4*32+15) /* Performance Capabilities */
 -#define X86_FEATURE_PCID	( 4*32+17) /* Process Context Identifiers */
 -#define X86_FEATURE_DCA		( 4*32+18) /* Direct Cache Access */
 -#define X86_FEATURE_XMM4_1	( 4*32+19) /* "sse4_1" SSE-4.1 */
 -#define X86_FEATURE_XMM4_2	( 4*32+20) /* "sse4_2" SSE-4.2 */
 -#define X86_FEATURE_X2APIC	( 4*32+21) /* x2APIC */
 -#define X86_FEATURE_MOVBE	( 4*32+22) /* MOVBE instruction */
 -#define X86_FEATURE_POPCNT      ( 4*32+23) /* POPCNT instruction */
 -#define X86_FEATURE_TSC_DEADLINE_TIMER	( 4*32+24) /* Tsc deadline timer */
 -#define X86_FEATURE_AES		( 4*32+25) /* AES instructions */
 -#define X86_FEATURE_XSAVE	( 4*32+26) /* XSAVE/XRSTOR/XSETBV/XGETBV */
 -#define X86_FEATURE_OSXSAVE	( 4*32+27) /* "" XSAVE enabled in the OS */
 -#define X86_FEATURE_AVX		( 4*32+28) /* Advanced Vector Extensions */
 -#define X86_FEATURE_F16C	( 4*32+29) /* 16-bit fp conversions */
 -#define X86_FEATURE_RDRAND	( 4*32+30) /* The RDRAND instruction */
 -#define X86_FEATURE_HYPERVISOR	( 4*32+31) /* Running on a hypervisor */
 +#define X86_FEATURE_XMM3	(4*32+ 0) /* "pni" SSE-3 */
 +#define X86_FEATURE_PCLMULQDQ	(4*32+ 1) /* PCLMULQDQ instruction */
 +#define X86_FEATURE_DTES64	(4*32+ 2) /* 64-bit Debug Store */
 +#define X86_FEATURE_MWAIT	(4*32+ 3) /* "monitor" Monitor/Mwait support */
 +#define X86_FEATURE_DSCPL	(4*32+ 4) /* "ds_cpl" CPL Qual. Debug Store */
 +#define X86_FEATURE_VMX		(4*32+ 5) /* Hardware virtualization */
 +#define X86_FEATURE_SMX		(4*32+ 6) /* Safer mode */
 +#define X86_FEATURE_EST		(4*32+ 7) /* Enhanced SpeedStep */
 +#define X86_FEATURE_TM2		(4*32+ 8) /* Thermal Monitor 2 */
 +#define X86_FEATURE_SSSE3	(4*32+ 9) /* Supplemental SSE-3 */
 +#define X86_FEATURE_CID		(4*32+10) /* Context ID */
 +#define X86_FEATURE_FMA		(4*32+12) /* Fused multiply-add */
 +#define X86_FEATURE_CX16	(4*32+13) /* CMPXCHG16B */
 +#define X86_FEATURE_XTPR	(4*32+14) /* Send Task Priority Messages */
 +#define X86_FEATURE_PDCM	(4*32+15) /* Performance Capabilities */
 +#define X86_FEATURE_PCID	(4*32+17) /* Process Context Identifiers */
 +#define X86_FEATURE_DCA		(4*32+18) /* Direct Cache Access */
 +#define X86_FEATURE_XMM4_1	(4*32+19) /* "sse4_1" SSE-4.1 */
 +#define X86_FEATURE_XMM4_2	(4*32+20) /* "sse4_2" SSE-4.2 */
 +#define X86_FEATURE_X2APIC	(4*32+21) /* x2APIC */
 +#define X86_FEATURE_MOVBE	(4*32+22) /* MOVBE instruction */
 +#define X86_FEATURE_POPCNT      (4*32+23) /* POPCNT instruction */
 +#define X86_FEATURE_TSC_DEADLINE_TIMER	(4*32+24) /* Tsc deadline timer */
 +#define X86_FEATURE_AES		(4*32+25) /* AES instructions */
 +#define X86_FEATURE_XSAVE	(4*32+26) /* XSAVE/XRSTOR/XSETBV/XGETBV */
 +#define X86_FEATURE_OSXSAVE	(4*32+27) /* "" XSAVE enabled in the OS */
 +#define X86_FEATURE_AVX		(4*32+28) /* Advanced Vector Extensions */
 +#define X86_FEATURE_F16C	(4*32+29) /* 16-bit fp conversions */
 +#define X86_FEATURE_RDRAND	(4*32+30) /* The RDRAND instruction */
 +#define X86_FEATURE_HYPERVISOR	(4*32+31) /* Running on a hypervisor */
  
  /* VIA/Cyrix/Centaur-defined CPU features, CPUID level 0xC0000001, word 5 */
 -#define X86_FEATURE_XSTORE	( 5*32+ 2) /* "rng" RNG present (xstore) */
 -#define X86_FEATURE_XSTORE_EN	( 5*32+ 3) /* "rng_en" RNG enabled */
 -#define X86_FEATURE_XCRYPT	( 5*32+ 6) /* "ace" on-CPU crypto (xcrypt) */
 -#define X86_FEATURE_XCRYPT_EN	( 5*32+ 7) /* "ace_en" on-CPU crypto enabled */
 -#define X86_FEATURE_ACE2	( 5*32+ 8) /* Advanced Cryptography Engine v2 */
 -#define X86_FEATURE_ACE2_EN	( 5*32+ 9) /* ACE v2 enabled */
 -#define X86_FEATURE_PHE		( 5*32+10) /* PadLock Hash Engine */
 -#define X86_FEATURE_PHE_EN	( 5*32+11) /* PHE enabled */
 -#define X86_FEATURE_PMM		( 5*32+12) /* PadLock Montgomery Multiplier */
 -#define X86_FEATURE_PMM_EN	( 5*32+13) /* PMM enabled */
 +#define X86_FEATURE_XSTORE	(5*32+ 2) /* "rng" RNG present (xstore) */
 +#define X86_FEATURE_XSTORE_EN	(5*32+ 3) /* "rng_en" RNG enabled */
 +#define X86_FEATURE_XCRYPT	(5*32+ 6) /* "ace" on-CPU crypto (xcrypt) */
 +#define X86_FEATURE_XCRYPT_EN	(5*32+ 7) /* "ace_en" on-CPU crypto enabled */
 +#define X86_FEATURE_ACE2	(5*32+ 8) /* Advanced Cryptography Engine v2 */
 +#define X86_FEATURE_ACE2_EN	(5*32+ 9) /* ACE v2 enabled */
 +#define X86_FEATURE_PHE		(5*32+10) /* PadLock Hash Engine */
 +#define X86_FEATURE_PHE_EN	(5*32+11) /* PHE enabled */
 +#define X86_FEATURE_PMM		(5*32+12) /* PadLock Montgomery Multiplier */
 +#define X86_FEATURE_PMM_EN	(5*32+13) /* PMM enabled */
  
  /* More extended AMD flags: CPUID level 0x80000001, ecx, word 6 */
++<<<<<<< HEAD
 +#define X86_FEATURE_LAHF_LM	(6*32+ 0) /* LAHF/SAHF in long mode */
 +#define X86_FEATURE_CMP_LEGACY	(6*32+ 1) /* If yes HyperThreading not valid */
 +#define X86_FEATURE_SVM		(6*32+ 2) /* Secure virtual machine */
 +#define X86_FEATURE_EXTAPIC	(6*32+ 3) /* Extended APIC space */
 +#define X86_FEATURE_CR8_LEGACY	(6*32+ 4) /* CR8 in 32-bit mode */
 +#define X86_FEATURE_ABM		(6*32+ 5) /* Advanced bit manipulation */
 +#define X86_FEATURE_SSE4A	(6*32+ 6) /* SSE-4A */
 +#define X86_FEATURE_MISALIGNSSE (6*32+ 7) /* Misaligned SSE mode */
 +#define X86_FEATURE_3DNOWPREFETCH (6*32+ 8) /* 3DNow prefetch instructions */
 +#define X86_FEATURE_OSVW	(6*32+ 9) /* OS Visible Workaround */
 +#define X86_FEATURE_IBS		(6*32+10) /* Instruction Based Sampling */
 +#define X86_FEATURE_XOP		(6*32+11) /* extended AVX instructions */
 +#define X86_FEATURE_SKINIT	(6*32+12) /* SKINIT/STGI instructions */
 +#define X86_FEATURE_WDT		(6*32+13) /* Watchdog timer */
 +#define X86_FEATURE_LWP		(6*32+15) /* Light Weight Profiling */
 +#define X86_FEATURE_FMA4	(6*32+16) /* 4 operands MAC instructions */
 +#define X86_FEATURE_TCE		(6*32+17) /* translation cache extension */
 +#define X86_FEATURE_NODEID_MSR	(6*32+19) /* NodeId MSR */
 +#define X86_FEATURE_TBM		(6*32+21) /* trailing bit manipulations */
 +#define X86_FEATURE_TOPOEXT	(6*32+22) /* topology extensions CPUID leafs */
 +#define X86_FEATURE_PERFCTR_CORE (6*32+23) /* core performance counter extensions */
 +#define X86_FEATURE_PERFCTR_NB  (6*32+24) /* NB performance counter extensions */
 +#define X86_FEATURE_PERFCTR_L2	(6*32+28) /* L2 performance counter extensions */
++=======
+ #define X86_FEATURE_LAHF_LM	( 6*32+ 0) /* LAHF/SAHF in long mode */
+ #define X86_FEATURE_CMP_LEGACY	( 6*32+ 1) /* If yes HyperThreading not valid */
+ #define X86_FEATURE_SVM		( 6*32+ 2) /* Secure virtual machine */
+ #define X86_FEATURE_EXTAPIC	( 6*32+ 3) /* Extended APIC space */
+ #define X86_FEATURE_CR8_LEGACY	( 6*32+ 4) /* CR8 in 32-bit mode */
+ #define X86_FEATURE_ABM		( 6*32+ 5) /* Advanced bit manipulation */
+ #define X86_FEATURE_SSE4A	( 6*32+ 6) /* SSE-4A */
+ #define X86_FEATURE_MISALIGNSSE ( 6*32+ 7) /* Misaligned SSE mode */
+ #define X86_FEATURE_3DNOWPREFETCH ( 6*32+ 8) /* 3DNow prefetch instructions */
+ #define X86_FEATURE_OSVW	( 6*32+ 9) /* OS Visible Workaround */
+ #define X86_FEATURE_IBS		( 6*32+10) /* Instruction Based Sampling */
+ #define X86_FEATURE_XOP		( 6*32+11) /* extended AVX instructions */
+ #define X86_FEATURE_SKINIT	( 6*32+12) /* SKINIT/STGI instructions */
+ #define X86_FEATURE_WDT		( 6*32+13) /* Watchdog timer */
+ #define X86_FEATURE_LWP		( 6*32+15) /* Light Weight Profiling */
+ #define X86_FEATURE_FMA4	( 6*32+16) /* 4 operands MAC instructions */
+ #define X86_FEATURE_TCE		( 6*32+17) /* translation cache extension */
+ #define X86_FEATURE_NODEID_MSR	( 6*32+19) /* NodeId MSR */
+ #define X86_FEATURE_TBM		( 6*32+21) /* trailing bit manipulations */
+ #define X86_FEATURE_TOPOEXT	( 6*32+22) /* topology extensions CPUID leafs */
+ #define X86_FEATURE_PERFCTR_CORE ( 6*32+23) /* core performance counter extensions */
+ #define X86_FEATURE_PERFCTR_NB  ( 6*32+24) /* NB performance counter extensions */
+ #define X86_FEATURE_BPEXT	(6*32+26) /* data breakpoint extension */
+ #define X86_FEATURE_PERFCTR_L2	( 6*32+28) /* L2 performance counter extensions */
++>>>>>>> d6d55f0b9d90 (perf/x86/amd: AMD support for bp_len > HW_BREAKPOINT_LEN_8)
  
  /*
   * Auxiliary flags: Linux defined - For features scattered in various
@@@ -355,24 -384,12 +382,25 @@@ extern const char * const x86_power_fla
  #define cpu_has_cx16		boot_cpu_has(X86_FEATURE_CX16)
  #define cpu_has_eager_fpu	boot_cpu_has(X86_FEATURE_EAGER_FPU)
  #define cpu_has_topoext		boot_cpu_has(X86_FEATURE_TOPOEXT)
+ #define cpu_has_bpext		boot_cpu_has(X86_FEATURE_BPEXT)
  
 -#if __GNUC__ >= 4
 -extern void warn_pre_alternatives(void);
 -extern bool __static_cpu_has_safe(u16 bit);
 +#ifdef CONFIG_X86_64
 +
 +#undef  cpu_has_vme
 +#define cpu_has_vme		0
 +
 +#undef  cpu_has_k6_mtrr
 +#define cpu_has_k6_mtrr		0
  
 +#undef  cpu_has_cyrix_arr
 +#define cpu_has_cyrix_arr	0
 +
 +#undef  cpu_has_centaur_mcr
 +#define cpu_has_centaur_mcr	0
 +
 +#endif /* CONFIG_X86_64 */
 +
 +#if __GNUC__ >= 4
  /*
   * Static testing of CPU features.  Used the same as boot_cpu_has().
   * These are only valid after alternatives have run, but will statically
* Unmerged path arch/x86/include/asm/cpufeature.h
diff --git a/arch/x86/include/asm/debugreg.h b/arch/x86/include/asm/debugreg.h
index 4b528a970bd4..145b00989b4e 100644
--- a/arch/x86/include/asm/debugreg.h
+++ b/arch/x86/include/asm/debugreg.h
@@ -114,5 +114,10 @@ static inline void debug_stack_usage_inc(void) { }
 static inline void debug_stack_usage_dec(void) { }
 #endif /* X86_64 */
 
+#ifdef CONFIG_CPU_SUP_AMD
+extern void set_dr_addr_mask(unsigned long mask, int dr);
+#else
+static inline void set_dr_addr_mask(unsigned long mask, int dr) { }
+#endif
 
 #endif /* _ASM_X86_DEBUGREG_H */
diff --git a/arch/x86/include/asm/hw_breakpoint.h b/arch/x86/include/asm/hw_breakpoint.h
index ef1c4d2d41ec..6c98be864a75 100644
--- a/arch/x86/include/asm/hw_breakpoint.h
+++ b/arch/x86/include/asm/hw_breakpoint.h
@@ -12,6 +12,7 @@
  */
 struct arch_hw_breakpoint {
 	unsigned long	address;
+	unsigned long	mask;
 	u8		len;
 	u8		type;
 };
diff --git a/arch/x86/include/uapi/asm/msr-index.h b/arch/x86/include/uapi/asm/msr-index.h
index 312bbffd9ada..6963e3d2a2be 100644
--- a/arch/x86/include/uapi/asm/msr-index.h
+++ b/arch/x86/include/uapi/asm/msr-index.h
@@ -265,6 +265,10 @@
 /* Fam 16h MSRs */
 #define MSR_F16H_L2I_PERF_CTL		0xc0010230
 #define MSR_F16H_L2I_PERF_CTR		0xc0010231
+#define MSR_F16H_DR1_ADDR_MASK		0xc0011019
+#define MSR_F16H_DR2_ADDR_MASK		0xc001101a
+#define MSR_F16H_DR3_ADDR_MASK		0xc001101b
+#define MSR_F16H_DR0_ADDR_MASK		0xc0011027
 
 /* Fam 15h MSRs */
 #define MSR_F15H_PERF_CTL		0xc0010200
diff --git a/arch/x86/kernel/cpu/amd.c b/arch/x86/kernel/cpu/amd.c
index 09cc08968ceb..d5ab107c38aa 100644
--- a/arch/x86/kernel/cpu/amd.c
+++ b/arch/x86/kernel/cpu/amd.c
@@ -909,3 +909,22 @@ static bool cpu_has_amd_erratum(struct cpuinfo_x86 *cpu, const int *erratum)
 
 	return false;
 }
+
+void set_dr_addr_mask(unsigned long mask, int dr)
+{
+	if (!cpu_has_bpext)
+		return;
+
+	switch (dr) {
+	case 0:
+		wrmsr(MSR_F16H_DR0_ADDR_MASK, mask, 0);
+		break;
+	case 1:
+	case 2:
+	case 3:
+		wrmsr(MSR_F16H_DR1_ADDR_MASK - 1 + dr, mask, 0);
+		break;
+	default:
+		break;
+	}
+}
diff --git a/arch/x86/kernel/hw_breakpoint.c b/arch/x86/kernel/hw_breakpoint.c
index d448c030b2c0..9bd65fc977f3 100644
--- a/arch/x86/kernel/hw_breakpoint.c
+++ b/arch/x86/kernel/hw_breakpoint.c
@@ -127,6 +127,8 @@ int arch_install_hw_breakpoint(struct perf_event *bp)
 	*dr7 |= encode_dr7(i, info->len, info->type);
 
 	set_debugreg(*dr7, 7);
+	if (info->mask)
+		set_dr_addr_mask(info->mask, i);
 
 	return 0;
 }
@@ -162,6 +164,8 @@ void arch_uninstall_hw_breakpoint(struct perf_event *bp)
 	*dr7 &= ~__encode_dr7(i, info->len, info->type);
 
 	set_debugreg(*dr7, 7);
+	if (info->mask)
+		set_dr_addr_mask(0, i);
 }
 
 static int get_hbp_len(u8 hbp_len)
@@ -278,6 +282,8 @@ static int arch_build_bp_info(struct perf_event *bp)
 	}
 
 	/* Len */
+	info->mask = 0;
+
 	switch (bp->attr.bp_len) {
 	case HW_BREAKPOINT_LEN_1:
 		info->len = X86_BREAKPOINT_LEN_1;
@@ -294,11 +300,17 @@ static int arch_build_bp_info(struct perf_event *bp)
 		break;
 #endif
 	default:
-		return -EINVAL;
+		if (!is_power_of_2(bp->attr.bp_len))
+			return -EINVAL;
+		if (!cpu_has_bpext)
+			return -EOPNOTSUPP;
+		info->mask = bp->attr.bp_len - 1;
+		info->len = X86_BREAKPOINT_LEN_1;
 	}
 
 	return 0;
 }
+
 /*
  * Validate the arch-specific HW Breakpoint register settings
  */
@@ -313,11 +325,11 @@ int arch_validate_hwbkpt_settings(struct perf_event *bp)
 	if (ret)
 		return ret;
 
-	ret = -EINVAL;
-
 	switch (info->len) {
 	case X86_BREAKPOINT_LEN_1:
 		align = 0;
+		if (info->mask)
+			align = info->mask;
 		break;
 	case X86_BREAKPOINT_LEN_2:
 		align = 1;
@@ -331,7 +343,7 @@ int arch_validate_hwbkpt_settings(struct perf_event *bp)
 		break;
 #endif
 	default:
-		return ret;
+		WARN_ON_ONCE(1);
 	}
 
 	/*
