mmc: core: Fix init_card in 52Mhz

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] core: Fix init_card in 52Mhz (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 91.80%
commit-author Chaotian Jing <chaotian.jing@mediatek.com>
commit 08b137d90eec51b0e90c42e123ca8ceb118d233f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/08b137d9.failed

Suppose that we got a data crc error, and it triggers the mmc_reset.
mmc_reset will call mmc_send_status to see if HW reset was supported.
before issue CMD13, it will do retune, and if EMMC was in HS400 mode,
it will reduce frequency to 52Mhz firstly, then results in card init
was doing at 52Mhz.
The mmc_send_status was originally only done for mmc_test, should drop
it. And, rename the "eMMC hardware reset" to "Reset test", as we would
also be able to use the test for SD-cards.

	Signed-off-by: Chaotian Jing <chaotian.jing@mediatek.com>
	Suggested-by: Adrian Hunter <adrian.hunter@intel.com>
Fixes: bd11e8bd03ca ("mmc: core: Flag re-tuning is needed on CRC errors")
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 08b137d90eec51b0e90c42e123ca8ceb118d233f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/mmc.c
diff --cc drivers/mmc/core/mmc.c
index 33983b7d000a,f6cd995dbe92..000000000000
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@@ -1684,16 -1910,37 +1684,39 @@@ static int mmc_runtime_resume(struct mm
  	return 0;
  }
  
 -int mmc_can_reset(struct mmc_card *card)
 +static int mmc_power_restore(struct mmc_host *host)
  {
 -	u8 rst_n_function;
 +	int ret;
  
 -	rst_n_function = card->ext_csd.rst_n_function;
 -	if ((rst_n_function & EXT_CSD_RST_N_EN_MASK) != EXT_CSD_RST_N_ENABLED)
 -		return 0;
 -	return 1;
 -}
 -EXPORT_SYMBOL(mmc_can_reset);
 +	host->card->state &= ~(MMC_STATE_HIGHSPEED | MMC_STATE_HIGHSPEED_200);
 +	mmc_claim_host(host);
 +	ret = mmc_init_card(host, host->card->ocr, host->card);
 +	mmc_release_host(host);
  
++<<<<<<< HEAD
 +	return ret;
++=======
+ static int mmc_reset(struct mmc_host *host)
+ {
+ 	struct mmc_card *card = host->card;
+ 
+ 	if (!(host->caps & MMC_CAP_HW_RESET) || !host->ops->hw_reset)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (!mmc_can_reset(card))
+ 		return -EOPNOTSUPP;
+ 
+ 	mmc_host_clk_hold(host);
+ 	mmc_set_clock(host, host->f_init);
+ 
+ 	host->ops->hw_reset(host);
+ 
+ 	/* Set initial state and call mmc_set_ios */
+ 	mmc_set_initial_state(host);
+ 	mmc_host_clk_release(host);
+ 
+ 	return mmc_init_card(host, card->ocr, card);
++>>>>>>> 08b137d90eec (mmc: core: Fix init_card in 52Mhz)
  }
  
  static const struct mmc_bus_ops mmc_ops = {
diff --git a/drivers/mmc/card/mmc_test.c b/drivers/mmc/card/mmc_test.c
index b78cf5d403a3..7fc9174d4619 100644
--- a/drivers/mmc/card/mmc_test.c
+++ b/drivers/mmc/card/mmc_test.c
@@ -2263,15 +2263,12 @@ static int mmc_test_profile_sglen_r_nonblock_perf(struct mmc_test_card *test)
 /*
  * eMMC hardware reset.
  */
-static int mmc_test_hw_reset(struct mmc_test_card *test)
+static int mmc_test_reset(struct mmc_test_card *test)
 {
 	struct mmc_card *card = test->card;
 	struct mmc_host *host = card->host;
 	int err;
 
-	if (!mmc_card_mmc(card) || !mmc_can_reset(card))
-		return RESULT_UNSUP_CARD;
-
 	err = mmc_hw_reset(host);
 	if (!err)
 		return RESULT_OK;
@@ -2605,8 +2602,8 @@ static const struct mmc_test_case mmc_test_cases[] = {
 	},
 
 	{
-		.name = "eMMC hardware reset",
-		.run = mmc_test_hw_reset,
+		.name = "Reset test",
+		.run = mmc_test_reset,
 	},
 };
 
* Unmerged path drivers/mmc/core/mmc.c
