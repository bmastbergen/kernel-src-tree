libceph: support for CEPH_OSD_OP_LIST_WATCHERS

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Douglas Fuller <dfuller@redhat.com>
commit a4ed38d7a180f184a6e7aedd09db9ca4b1e6a71c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a4ed38d7.failed

Add support for this Ceph OSD op, needed to support the RBD exclusive
lock feature.

	Signed-off-by: Douglas Fuller <dfuller@redhat.com>
[idryomov@gmail.com: refactor, misc fixes throughout]
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
	Reviewed-by: Mike Christie <mchristi@redhat.com>
	Reviewed-by: Alex Elder <elder@linaro.org>
(cherry picked from commit a4ed38d7a180f184a6e7aedd09db9ca4b1e6a71c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ceph/osd_client.h
#	net/ceph/osd_client.c
diff --cc include/linux/ceph/osd_client.h
index fd44600a4a6b,19821a191732..000000000000
--- a/include/linux/ceph/osd_client.h
+++ b/include/linux/ceph/osd_client.h
@@@ -107,12 -109,21 +107,26 @@@ struct ceph_osd_req_op 
  		} cls;
  		struct {
  			u64 cookie;
 -			__u8 op;           /* CEPH_OSD_WATCH_OP_ */
 -			u32 gen;
 +			u64 ver;
 +			u32 prot_ver;
 +			u32 timeout;
 +			__u8 flag;
  		} watch;
  		struct {
++<<<<<<< HEAD
++=======
+ 			struct ceph_osd_data request_data;
+ 		} notify_ack;
+ 		struct {
+ 			u64 cookie;
+ 			struct ceph_osd_data request_data;
+ 			struct ceph_osd_data response_data;
+ 		} notify;
+ 		struct {
+ 			struct ceph_osd_data response_data;
+ 		} list_watchers;
+ 		struct {
++>>>>>>> a4ed38d7a180 (libceph: support for CEPH_OSD_OP_LIST_WATCHERS)
  			u64 expected_object_size;
  			u64 expected_write_size;
  		} alloc_hint;
@@@ -181,25 -205,59 +195,31 @@@ struct ceph_request_redirect 
  	struct ceph_object_locator oloc;
  };
  
 -typedef void (*rados_watchcb2_t)(void *arg, u64 notify_id, u64 cookie,
 -				 u64 notifier_id, void *data, size_t data_len);
 -typedef void (*rados_watcherrcb_t)(void *arg, u64 cookie, int err);
 -
 -struct ceph_osd_linger_request {
 +struct ceph_osd_event {
 +	u64 cookie;
 +	int one_shot;
  	struct ceph_osd_client *osdc;
 -	u64 linger_id;
 -	bool committed;
 -	bool is_watch;                  /* watch or notify */
 -
 -	struct ceph_osd *osd;
 -	struct ceph_osd_request *reg_req;
 -	struct ceph_osd_request *ping_req;
 -	unsigned long ping_sent;
 -	unsigned long watch_valid_thru;
 -	struct list_head pending_lworks;
 -
 -	struct ceph_osd_request_target t;
 -	u32 last_force_resend;
 -	u32 map_dne_bound;
 -
 -	struct timespec mtime;
 -
 -	struct kref kref;
 -	struct mutex lock;
 -	struct rb_node node;            /* osd */
 -	struct rb_node osdc_node;       /* osdc */
 -	struct rb_node mc_node;         /* map check */
 -	struct list_head scan_item;
 -
 -	struct completion reg_commit_wait;
 -	struct completion notify_finish_wait;
 -	int reg_commit_error;
 -	int notify_finish_error;
 -	int last_error;
 -
 -	u32 register_gen;
 -	u64 notify_id;
 -
 -	rados_watchcb2_t wcb;
 -	rados_watcherrcb_t errcb;
 +	void (*cb)(u64, u64, u8, void *);
  	void *data;
 +	struct rb_node node;
 +	struct list_head osd_node;
 +	struct kref kref;
 +};
  
 -	struct page ***preply_pages;
 -	size_t *preply_len;
 +struct ceph_osd_event_work {
 +	struct work_struct work;
 +	struct ceph_osd_event *event;
 +        u64 ver;
 +        u64 notify_id;
 +        u8 opcode;
  };
  
+ struct ceph_watch_item {
+ 	struct ceph_entity_name name;
+ 	u64 cookie;
+ 	struct ceph_entity_addr addr;
+ };
+ 
  struct ceph_osd_client {
  	struct ceph_client     *client;
  
@@@ -364,11 -414,38 +383,47 @@@ extern int ceph_osdc_writepages(struct 
  				struct timespec *mtime,
  				struct page **pages, int nr_pages);
  
++<<<<<<< HEAD
 +/* watch/notify events */
 +extern int ceph_osdc_create_event(struct ceph_osd_client *osdc,
 +				  void (*event_cb)(u64, u64, u8, void *),
 +				  void *data, struct ceph_osd_event **pevent);
 +extern void ceph_osdc_cancel_event(struct ceph_osd_event *event);
 +extern void ceph_osdc_put_event(struct ceph_osd_event *event);
++=======
+ /* watch/notify */
+ struct ceph_osd_linger_request *
+ ceph_osdc_watch(struct ceph_osd_client *osdc,
+ 		struct ceph_object_id *oid,
+ 		struct ceph_object_locator *oloc,
+ 		rados_watchcb2_t wcb,
+ 		rados_watcherrcb_t errcb,
+ 		void *data);
+ int ceph_osdc_unwatch(struct ceph_osd_client *osdc,
+ 		      struct ceph_osd_linger_request *lreq);
+ 
+ int ceph_osdc_notify_ack(struct ceph_osd_client *osdc,
+ 			 struct ceph_object_id *oid,
+ 			 struct ceph_object_locator *oloc,
+ 			 u64 notify_id,
+ 			 u64 cookie,
+ 			 void *payload,
+ 			 size_t payload_len);
+ int ceph_osdc_notify(struct ceph_osd_client *osdc,
+ 		     struct ceph_object_id *oid,
+ 		     struct ceph_object_locator *oloc,
+ 		     void *payload,
+ 		     size_t payload_len,
+ 		     u32 timeout,
+ 		     struct page ***preply_pages,
+ 		     size_t *preply_len);
+ int ceph_osdc_watch_check(struct ceph_osd_client *osdc,
+ 			  struct ceph_osd_linger_request *lreq);
+ int ceph_osdc_list_watchers(struct ceph_osd_client *osdc,
+ 			    struct ceph_object_id *oid,
+ 			    struct ceph_object_locator *oloc,
+ 			    struct ceph_watch_item **watchers,
+ 			    u32 *num_watchers);
++>>>>>>> a4ed38d7a180 (libceph: support for CEPH_OSD_OP_LIST_WATCHERS)
  #endif
  
diff --cc net/ceph/osd_client.c
index b1bd089d52f0,dd51ec8ce97f..000000000000
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@@ -294,6 -331,16 +294,19 @@@ static void osd_req_op_data_release(str
  	case CEPH_OSD_OP_STAT:
  		ceph_osd_data_release(&op->raw_data_in);
  		break;
++<<<<<<< HEAD
++=======
+ 	case CEPH_OSD_OP_NOTIFY_ACK:
+ 		ceph_osd_data_release(&op->notify_ack.request_data);
+ 		break;
+ 	case CEPH_OSD_OP_NOTIFY:
+ 		ceph_osd_data_release(&op->notify.request_data);
+ 		ceph_osd_data_release(&op->notify.response_data);
+ 		break;
+ 	case CEPH_OSD_OP_LIST_WATCHERS:
+ 		ceph_osd_data_release(&op->list_watchers.response_data);
+ 		break;
++>>>>>>> a4ed38d7a180 (libceph: support for CEPH_OSD_OP_LIST_WATCHERS)
  	default:
  		break;
  	}
@@@ -744,12 -855,19 +757,14 @@@ static u64 osd_req_encode_op(struct cep
  		break;
  	case CEPH_OSD_OP_STARTSYNC:
  		break;
 +	case CEPH_OSD_OP_NOTIFY_ACK:
  	case CEPH_OSD_OP_WATCH:
  		dst->watch.cookie = cpu_to_le64(src->watch.cookie);
 -		dst->watch.ver = cpu_to_le64(0);
 -		dst->watch.op = src->watch.op;
 -		dst->watch.gen = cpu_to_le32(src->watch.gen);
 -		break;
 -	case CEPH_OSD_OP_NOTIFY_ACK:
 -		break;
 -	case CEPH_OSD_OP_NOTIFY:
 -		dst->notify.cookie = cpu_to_le64(src->notify.cookie);
 +		dst->watch.ver = cpu_to_le64(src->watch.ver);
 +		dst->watch.flag = src->watch.flag;
  		break;
+ 	case CEPH_OSD_OP_LIST_WATCHERS:
+ 		break;
  	case CEPH_OSD_OP_SETALLOCHINT:
  		dst->alloc_hint.expected_object_size =
  		    cpu_to_le64(src->alloc_hint.expected_object_size);
@@@ -1346,157 -1348,1018 +1361,245 @@@ static int __calc_request_pg(struct cep
  	}
  
  	if (need_check_tiering &&
 -	    (t->flags & CEPH_OSD_FLAG_IGNORE_OVERLAY) == 0) {
 -		if (t->flags & CEPH_OSD_FLAG_READ && pi->read_tier >= 0)
 -			t->target_oloc.pool = pi->read_tier;
 -		if (t->flags & CEPH_OSD_FLAG_WRITE && pi->write_tier >= 0)
 -			t->target_oloc.pool = pi->write_tier;
 +	    (req->r_flags & CEPH_OSD_FLAG_IGNORE_OVERLAY) == 0) {
 +		struct ceph_pg_pool_info *pi;
 +
 +		pi = ceph_pg_pool_by_id(osdmap, req->r_target_oloc.pool);
 +		if (pi) {
 +			if ((req->r_flags & CEPH_OSD_FLAG_READ) &&
 +			    pi->read_tier >= 0)
 +				req->r_target_oloc.pool = pi->read_tier;
 +			if ((req->r_flags & CEPH_OSD_FLAG_WRITE) &&
 +			    pi->write_tier >= 0)
 +				req->r_target_oloc.pool = pi->write_tier;
 +		}
 +		/* !pi is caught in ceph_oloc_oid_to_pg() */
  	}
  
 -	ret = ceph_object_locator_to_pg(osdc->osdmap, &t->target_oid,
 -					&t->target_oloc, &pgid);
 -	if (ret) {
 -		WARN_ON(ret != -ENOENT);
 -		t->osd = CEPH_HOMELESS_OSD;
 -		ct_res = CALC_TARGET_POOL_DNE;
 -		goto out;
 +	return ceph_oloc_oid_to_pg(osdmap, &req->r_target_oloc,
 +				   &req->r_target_oid, pg_out);
 +}
 +
 +static void __enqueue_request(struct ceph_osd_request *req)
 +{
 +	struct ceph_osd_client *osdc = req->r_osdc;
 +
 +	dout("%s %p tid %llu to osd%d\n", __func__, req, req->r_tid,
 +	     req->r_osd ? req->r_osd->o_osd : -1);
 +
 +	if (req->r_osd) {
 +		__remove_osd_from_lru(req->r_osd);
 +		list_add_tail(&req->r_osd_item, &req->r_osd->o_requests);
 +		list_move_tail(&req->r_req_lru_item, &osdc->req_unsent);
 +	} else {
 +		list_move_tail(&req->r_req_lru_item, &osdc->req_notarget);
  	}
 -	last_pgid.pool = pgid.pool;
 -	last_pgid.seed = ceph_stable_mod(pgid.seed, t->pg_num, t->pg_num_mask);
 +}
  
 -	ceph_pg_to_up_acting_osds(osdc->osdmap, &pgid, &up, &acting);
 -	if (any_change &&
 -	    ceph_is_new_interval(&t->acting,
 -				 &acting,
 -				 &t->up,
 -				 &up,
 -				 t->size,
 -				 pi->size,
 -				 t->min_size,
 -				 pi->min_size,
 -				 t->pg_num,
 -				 pi->pg_num,
 -				 t->sort_bitwise,
 -				 sort_bitwise,
 -				 &last_pgid))
 -		force_resend = true;
 -
 -	if (t->paused && !target_should_be_paused(osdc, t, pi)) {
 -		t->paused = false;
 -		need_resend = true;
 +/*
 + * Pick an osd (the first 'up' osd in the pg), allocate the osd struct
 + * (as needed), and set the request r_osd appropriately.  If there is
 + * no up osd, set r_osd to NULL.  Move the request to the appropriate list
 + * (unsent, homeless) or leave on in-flight lru.
 + *
 + * Return 0 if unchanged, 1 if changed, or negative on error.
 + *
 + * Caller should hold map_sem for read and request_mutex.
 + */
 +static int __map_request(struct ceph_osd_client *osdc,
 +			 struct ceph_osd_request *req, int force_resend)
 +{
 +	struct ceph_pg pgid;
 +	struct ceph_osds up, acting;
 +	int err;
 +	bool was_paused;
 +
 +	dout("map_request %p tid %lld\n", req, req->r_tid);
 +
 +	err = __calc_request_pg(osdc->osdmap, req, &pgid);
 +	if (err) {
 +		list_move(&req->r_req_lru_item, &osdc->req_notarget);
 +		return err;
  	}
 +	req->r_pgid = pgid;
 +
 +	ceph_pg_to_up_acting_osds(osdc->osdmap, &pgid, &up, &acting);
  
 +	was_paused = req->r_paused;
 +	req->r_paused = __req_should_be_paused(osdc, req);
 +	if (was_paused && !req->r_paused)
 +		force_resend = 1;
 +
 +	if ((!force_resend &&
 +	     req->r_osd && req->r_osd->o_osd == acting.primary &&
 +	     req->r_sent >= req->r_osd->o_incarnation &&
 +	     req->r_num_pg_osds == acting.size &&
 +	     memcmp(req->r_pg_osds, acting.osds,
 +		    acting.size * sizeof(acting.osds[0])) == 0) ||
 +	    (req->r_osd == NULL && acting.primary == -1) ||
 +	    req->r_paused)
 +		return 0;  /* no change */
 +
 +	dout("map_request tid %llu pgid %lld.%x osd%d (was osd%d)\n",
 +	     req->r_tid, pgid.pool, pgid.seed, acting.primary,
 +	     req->r_osd ? req->r_osd->o_osd : -1);
 +
 +	/* record full pg acting set */
 +	memcpy(req->r_pg_osds, acting.osds,
 +	       acting.size * sizeof(acting.osds[0]));
 +	req->r_num_pg_osds = acting.size;
 +
 +	if (req->r_osd) {
 +		__cancel_request(req);
 +		list_del_init(&req->r_osd_item);
 +		list_del_init(&req->r_linger_osd_item);
 +		req->r_osd = NULL;
 +	}
 +
++<<<<<<< HEAD
 +	req->r_osd = lookup_osd(&osdc->osds, acting.primary);
 +	if (!req->r_osd && acting.primary >= 0) {
 +		err = -ENOMEM;
 +		req->r_osd = create_osd(osdc, acting.primary);
 +		if (!req->r_osd) {
 +			list_move(&req->r_req_lru_item, &osdc->req_notarget);
 +			goto out;
++=======
+ 	if (ceph_pg_compare(&t->pgid, &pgid) ||
+ 	    ceph_osds_changed(&t->acting, &acting, any_change) ||
+ 	    force_resend) {
+ 		t->pgid = pgid; /* struct */
+ 		ceph_osds_copy(&t->acting, &acting);
+ 		ceph_osds_copy(&t->up, &up);
+ 		t->size = pi->size;
+ 		t->min_size = pi->min_size;
+ 		t->pg_num = pi->pg_num;
+ 		t->pg_num_mask = pi->pg_num_mask;
+ 		t->sort_bitwise = sort_bitwise;
+ 
+ 		t->osd = acting.primary;
+ 		need_resend = true;
+ 	}
+ 
+ 	ct_res = need_resend ? CALC_TARGET_NEED_RESEND : CALC_TARGET_NO_ACTION;
+ out:
+ 	dout("%s t %p -> ct_res %d osd %d\n", __func__, t, ct_res, t->osd);
+ 	return ct_res;
+ }
+ 
+ static void setup_request_data(struct ceph_osd_request *req,
+ 			       struct ceph_msg *msg)
+ {
+ 	u32 data_len = 0;
+ 	int i;
+ 
+ 	if (!list_empty(&msg->data))
+ 		return;
+ 
+ 	WARN_ON(msg->data_length);
+ 	for (i = 0; i < req->r_num_ops; i++) {
+ 		struct ceph_osd_req_op *op = &req->r_ops[i];
+ 
+ 		switch (op->op) {
+ 		/* request */
+ 		case CEPH_OSD_OP_WRITE:
+ 		case CEPH_OSD_OP_WRITEFULL:
+ 			WARN_ON(op->indata_len != op->extent.length);
+ 			ceph_osdc_msg_data_add(msg, &op->extent.osd_data);
+ 			break;
+ 		case CEPH_OSD_OP_SETXATTR:
+ 		case CEPH_OSD_OP_CMPXATTR:
+ 			WARN_ON(op->indata_len != op->xattr.name_len +
+ 						  op->xattr.value_len);
+ 			ceph_osdc_msg_data_add(msg, &op->xattr.osd_data);
+ 			break;
+ 		case CEPH_OSD_OP_NOTIFY_ACK:
+ 			ceph_osdc_msg_data_add(msg,
+ 					       &op->notify_ack.request_data);
+ 			break;
+ 
 -		/* reply */
 -		case CEPH_OSD_OP_STAT:
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->raw_data_in);
 -			break;
 -		case CEPH_OSD_OP_READ:
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->extent.osd_data);
 -			break;
 -		case CEPH_OSD_OP_LIST_WATCHERS:
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->list_watchers.response_data);
 -			break;
 -
 -		/* both */
 -		case CEPH_OSD_OP_CALL:
 -			WARN_ON(op->indata_len != op->cls.class_len +
 -						  op->cls.method_len +
 -						  op->cls.indata_len);
 -			ceph_osdc_msg_data_add(msg, &op->cls.request_info);
 -			/* optional, can be NONE */
 -			ceph_osdc_msg_data_add(msg, &op->cls.request_data);
 -			/* optional, can be NONE */
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->cls.response_data);
 -			break;
 -		case CEPH_OSD_OP_NOTIFY:
 -			ceph_osdc_msg_data_add(msg,
 -					       &op->notify.request_data);
 -			ceph_osdc_msg_data_add(req->r_reply,
 -					       &op->notify.response_data);
 -			break;
 -		}
 -
 -		data_len += op->indata_len;
 -	}
 -
 -	WARN_ON(data_len != msg->data_length);
 -}
 -
 -static void encode_request(struct ceph_osd_request *req, struct ceph_msg *msg)
 -{
 -	void *p = msg->front.iov_base;
 -	void *const end = p + msg->front_alloc_len;
 -	u32 data_len = 0;
 -	int i;
 -
 -	if (req->r_flags & CEPH_OSD_FLAG_WRITE) {
 -		/* snapshots aren't writeable */
 -		WARN_ON(req->r_snapid != CEPH_NOSNAP);
 -	} else {
 -		WARN_ON(req->r_mtime.tv_sec || req->r_mtime.tv_nsec ||
 -			req->r_data_offset || req->r_snapc);
 -	}
 -
 -	setup_request_data(req, msg);
 -
 -	ceph_encode_32(&p, 1); /* client_inc, always 1 */
 -	ceph_encode_32(&p, req->r_osdc->osdmap->epoch);
 -	ceph_encode_32(&p, req->r_flags);
 -	ceph_encode_timespec(p, &req->r_mtime);
 -	p += sizeof(struct ceph_timespec);
 -	/* aka reassert_version */
 -	memcpy(p, &req->r_replay_version, sizeof(req->r_replay_version));
 -	p += sizeof(req->r_replay_version);
 -
 -	/* oloc */
 -	ceph_start_encoding(&p, 5, 4,
 -			    ceph_oloc_encoding_size(&req->r_t.target_oloc));
 -	ceph_encode_64(&p, req->r_t.target_oloc.pool);
 -	ceph_encode_32(&p, -1); /* preferred */
 -	ceph_encode_32(&p, 0); /* key len */
 -	if (req->r_t.target_oloc.pool_ns)
 -		ceph_encode_string(&p, end, req->r_t.target_oloc.pool_ns->str,
 -				   req->r_t.target_oloc.pool_ns->len);
 -	else
 -		ceph_encode_32(&p, 0);
 -
 -	/* pgid */
 -	ceph_encode_8(&p, 1);
 -	ceph_encode_64(&p, req->r_t.pgid.pool);
 -	ceph_encode_32(&p, req->r_t.pgid.seed);
 -	ceph_encode_32(&p, -1); /* preferred */
 -
 -	/* oid */
 -	ceph_encode_32(&p, req->r_t.target_oid.name_len);
 -	memcpy(p, req->r_t.target_oid.name, req->r_t.target_oid.name_len);
 -	p += req->r_t.target_oid.name_len;
 -
 -	/* ops, can imply data */
 -	ceph_encode_16(&p, req->r_num_ops);
 -	for (i = 0; i < req->r_num_ops; i++) {
 -		data_len += osd_req_encode_op(p, &req->r_ops[i]);
 -		p += sizeof(struct ceph_osd_op);
 -	}
 -
 -	ceph_encode_64(&p, req->r_snapid); /* snapid */
 -	if (req->r_snapc) {
 -		ceph_encode_64(&p, req->r_snapc->seq);
 -		ceph_encode_32(&p, req->r_snapc->num_snaps);
 -		for (i = 0; i < req->r_snapc->num_snaps; i++)
 -			ceph_encode_64(&p, req->r_snapc->snaps[i]);
 -	} else {
 -		ceph_encode_64(&p, 0); /* snap_seq */
 -		ceph_encode_32(&p, 0); /* snaps len */
 -	}
 -
 -	ceph_encode_32(&p, req->r_attempts); /* retry_attempt */
 -
 -	BUG_ON(p > end);
 -	msg->front.iov_len = p - msg->front.iov_base;
 -	msg->hdr.version = cpu_to_le16(4); /* MOSDOp v4 */
 -	msg->hdr.front_len = cpu_to_le32(msg->front.iov_len);
 -	msg->hdr.data_len = cpu_to_le32(data_len);
 -	/*
 -	 * The header "data_off" is a hint to the receiver allowing it
 -	 * to align received data into its buffers such that there's no
 -	 * need to re-copy it before writing it to disk (direct I/O).
 -	 */
 -	msg->hdr.data_off = cpu_to_le16(req->r_data_offset);
 -
 -	dout("%s req %p oid %s oid_len %d front %zu data %u\n", __func__,
 -	     req, req->r_t.target_oid.name, req->r_t.target_oid.name_len,
 -	     msg->front.iov_len, data_len);
 -}
 -
 -/*
 - * @req has to be assigned a tid and registered.
 - */
 -static void send_request(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd *osd = req->r_osd;
 -
 -	verify_osd_locked(osd);
 -	WARN_ON(osd->o_osd != req->r_t.osd);
 -
 -	/*
 -	 * We may have a previously queued request message hanging
 -	 * around.  Cancel it to avoid corrupting the msgr.
 -	 */
 -	if (req->r_sent)
 -		ceph_msg_revoke(req->r_request);
 -
 -	req->r_flags |= CEPH_OSD_FLAG_KNOWN_REDIR;
 -	if (req->r_attempts)
 -		req->r_flags |= CEPH_OSD_FLAG_RETRY;
 -	else
 -		WARN_ON(req->r_flags & CEPH_OSD_FLAG_RETRY);
 -
 -	encode_request(req, req->r_request);
 -
 -	dout("%s req %p tid %llu to pg %llu.%x osd%d flags 0x%x attempt %d\n",
 -	     __func__, req, req->r_tid, req->r_t.pgid.pool, req->r_t.pgid.seed,
 -	     req->r_t.osd, req->r_flags, req->r_attempts);
 -
 -	req->r_t.paused = false;
 -	req->r_stamp = jiffies;
 -	req->r_attempts++;
 -
 -	req->r_sent = osd->o_incarnation;
 -	req->r_request->hdr.tid = cpu_to_le64(req->r_tid);
 -	ceph_con_send(&osd->o_con, ceph_msg_get(req->r_request));
 -}
 -
 -static void maybe_request_map(struct ceph_osd_client *osdc)
 -{
 -	bool continuous = false;
 -
 -	verify_osdc_locked(osdc);
 -	WARN_ON(!osdc->osdmap->epoch);
 -
 -	if (ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
 -	    ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD) ||
 -	    ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR)) {
 -		dout("%s osdc %p continuous\n", __func__, osdc);
 -		continuous = true;
 -	} else {
 -		dout("%s osdc %p onetime\n", __func__, osdc);
 -	}
 -
 -	if (ceph_monc_want_map(&osdc->client->monc, CEPH_SUB_OSDMAP,
 -			       osdc->osdmap->epoch + 1, continuous))
 -		ceph_monc_renew_subs(&osdc->client->monc);
 -}
 -
 -static void send_map_check(struct ceph_osd_request *req);
 -
 -static void __submit_request(struct ceph_osd_request *req, bool wrlocked)
 -{
 -	struct ceph_osd_client *osdc = req->r_osdc;
 -	struct ceph_osd *osd;
 -	enum calc_target_result ct_res;
 -	bool need_send = false;
 -	bool promoted = false;
 -
 -	WARN_ON(req->r_tid || req->r_got_reply);
 -	dout("%s req %p wrlocked %d\n", __func__, req, wrlocked);
 -
 -again:
 -	ct_res = calc_target(osdc, &req->r_t, &req->r_last_force_resend, false);
 -	if (ct_res == CALC_TARGET_POOL_DNE && !wrlocked)
 -		goto promote;
 -
 -	osd = lookup_create_osd(osdc, req->r_t.osd, wrlocked);
 -	if (IS_ERR(osd)) {
 -		WARN_ON(PTR_ERR(osd) != -EAGAIN || wrlocked);
 -		goto promote;
 -	}
 -
 -	if ((req->r_flags & CEPH_OSD_FLAG_WRITE) &&
 -	    ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSEWR)) {
 -		dout("req %p pausewr\n", req);
 -		req->r_t.paused = true;
 -		maybe_request_map(osdc);
 -	} else if ((req->r_flags & CEPH_OSD_FLAG_READ) &&
 -		   ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD)) {
 -		dout("req %p pauserd\n", req);
 -		req->r_t.paused = true;
 -		maybe_request_map(osdc);
 -	} else if ((req->r_flags & CEPH_OSD_FLAG_WRITE) &&
 -		   !(req->r_flags & (CEPH_OSD_FLAG_FULL_TRY |
 -				     CEPH_OSD_FLAG_FULL_FORCE)) &&
 -		   (ceph_osdmap_flag(osdc, CEPH_OSDMAP_FULL) ||
 -		    pool_full(osdc, req->r_t.base_oloc.pool))) {
 -		dout("req %p full/pool_full\n", req);
 -		pr_warn_ratelimited("FULL or reached pool quota\n");
 -		req->r_t.paused = true;
 -		maybe_request_map(osdc);
 -	} else if (!osd_homeless(osd)) {
 -		need_send = true;
 -	} else {
 -		maybe_request_map(osdc);
 -	}
 -
 -	mutex_lock(&osd->lock);
 -	/*
 -	 * Assign the tid atomically with send_request() to protect
 -	 * multiple writes to the same object from racing with each
 -	 * other, resulting in out of order ops on the OSDs.
 -	 */
 -	req->r_tid = atomic64_inc_return(&osdc->last_tid);
 -	link_request(osd, req);
 -	if (need_send)
 -		send_request(req);
 -	mutex_unlock(&osd->lock);
 -
 -	if (ct_res == CALC_TARGET_POOL_DNE)
 -		send_map_check(req);
 -
 -	if (promoted)
 -		downgrade_write(&osdc->lock);
 -	return;
 -
 -promote:
 -	up_read(&osdc->lock);
 -	down_write(&osdc->lock);
 -	wrlocked = true;
 -	promoted = true;
 -	goto again;
 -}
 -
 -static void account_request(struct ceph_osd_request *req)
 -{
 -	unsigned int mask = CEPH_OSD_FLAG_ACK | CEPH_OSD_FLAG_ONDISK;
 -
 -	if (req->r_flags & CEPH_OSD_FLAG_READ) {
 -		WARN_ON(req->r_flags & mask);
 -		req->r_flags |= CEPH_OSD_FLAG_ACK;
 -	} else if (req->r_flags & CEPH_OSD_FLAG_WRITE)
 -		WARN_ON(!(req->r_flags & mask));
 -	else
 -		WARN_ON(1);
 -
 -	WARN_ON(req->r_unsafe_callback && (req->r_flags & mask) != mask);
 -	atomic_inc(&req->r_osdc->num_requests);
 -}
 -
 -static void submit_request(struct ceph_osd_request *req, bool wrlocked)
 -{
 -	ceph_osdc_get_request(req);
 -	account_request(req);
 -	__submit_request(req, wrlocked);
 -}
 -
 -static void __finish_request(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_client *osdc = req->r_osdc;
 -	struct ceph_osd *osd = req->r_osd;
 -
 -	verify_osd_locked(osd);
 -	dout("%s req %p tid %llu\n", __func__, req, req->r_tid);
 -
 -	WARN_ON(lookup_request_mc(&osdc->map_checks, req->r_tid));
 -	unlink_request(osd, req);
 -	atomic_dec(&osdc->num_requests);
 -
 -	/*
 -	 * If an OSD has failed or returned and a request has been sent
 -	 * twice, it's possible to get a reply and end up here while the
 -	 * request message is queued for delivery.  We will ignore the
 -	 * reply, so not a big deal, but better to try and catch it.
 -	 */
 -	ceph_msg_revoke(req->r_request);
 -	ceph_msg_revoke_incoming(req->r_reply);
 -}
 -
 -static void finish_request(struct ceph_osd_request *req)
 -{
 -	__finish_request(req);
 -	ceph_osdc_put_request(req);
 -}
 -
 -static void __complete_request(struct ceph_osd_request *req)
 -{
 -	if (req->r_callback)
 -		req->r_callback(req);
 -	else
 -		complete_all(&req->r_completion);
 -}
 -
 -/*
 - * Note that this is open-coded in handle_reply(), which has to deal
 - * with ack vs commit, dup acks, etc.
 - */
 -static void complete_request(struct ceph_osd_request *req, int err)
 -{
 -	dout("%s req %p tid %llu err %d\n", __func__, req, req->r_tid, err);
 -
 -	req->r_result = err;
 -	__finish_request(req);
 -	__complete_request(req);
 -	complete_all(&req->r_safe_completion);
 -	ceph_osdc_put_request(req);
 -}
 -
 -static void cancel_map_check(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_client *osdc = req->r_osdc;
 -	struct ceph_osd_request *lookup_req;
 -
 -	verify_osdc_wrlocked(osdc);
 -
 -	lookup_req = lookup_request_mc(&osdc->map_checks, req->r_tid);
 -	if (!lookup_req)
 -		return;
 -
 -	WARN_ON(lookup_req != req);
 -	erase_request_mc(&osdc->map_checks, req);
 -	ceph_osdc_put_request(req);
 -}
 -
 -static void cancel_request(struct ceph_osd_request *req)
 -{
 -	dout("%s req %p tid %llu\n", __func__, req, req->r_tid);
 -
 -	cancel_map_check(req);
 -	finish_request(req);
 -}
 -
 -static void check_pool_dne(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_client *osdc = req->r_osdc;
 -	struct ceph_osdmap *map = osdc->osdmap;
 -
 -	verify_osdc_wrlocked(osdc);
 -	WARN_ON(!map->epoch);
 -
 -	if (req->r_attempts) {
 -		/*
 -		 * We sent a request earlier, which means that
 -		 * previously the pool existed, and now it does not
 -		 * (i.e., it was deleted).
 -		 */
 -		req->r_map_dne_bound = map->epoch;
 -		dout("%s req %p tid %llu pool disappeared\n", __func__, req,
 -		     req->r_tid);
 -	} else {
 -		dout("%s req %p tid %llu map_dne_bound %u have %u\n", __func__,
 -		     req, req->r_tid, req->r_map_dne_bound, map->epoch);
 -	}
 -
 -	if (req->r_map_dne_bound) {
 -		if (map->epoch >= req->r_map_dne_bound) {
 -			/* we had a new enough map */
 -			pr_info_ratelimited("tid %llu pool does not exist\n",
 -					    req->r_tid);
 -			complete_request(req, -ENOENT);
 -		}
 -	} else {
 -		send_map_check(req);
 -	}
 -}
 -
 -static void map_check_cb(struct ceph_mon_generic_request *greq)
 -{
 -	struct ceph_osd_client *osdc = &greq->monc->client->osdc;
 -	struct ceph_osd_request *req;
 -	u64 tid = greq->private_data;
 -
 -	WARN_ON(greq->result || !greq->u.newest);
 -
 -	down_write(&osdc->lock);
 -	req = lookup_request_mc(&osdc->map_checks, tid);
 -	if (!req) {
 -		dout("%s tid %llu dne\n", __func__, tid);
 -		goto out_unlock;
 -	}
 -
 -	dout("%s req %p tid %llu map_dne_bound %u newest %llu\n", __func__,
 -	     req, req->r_tid, req->r_map_dne_bound, greq->u.newest);
 -	if (!req->r_map_dne_bound)
 -		req->r_map_dne_bound = greq->u.newest;
 -	erase_request_mc(&osdc->map_checks, req);
 -	check_pool_dne(req);
 -
 -	ceph_osdc_put_request(req);
 -out_unlock:
 -	up_write(&osdc->lock);
 -}
 -
 -static void send_map_check(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_client *osdc = req->r_osdc;
 -	struct ceph_osd_request *lookup_req;
 -	int ret;
 -
 -	verify_osdc_wrlocked(osdc);
 -
 -	lookup_req = lookup_request_mc(&osdc->map_checks, req->r_tid);
 -	if (lookup_req) {
 -		WARN_ON(lookup_req != req);
 -		return;
 -	}
 -
 -	ceph_osdc_get_request(req);
 -	insert_request_mc(&osdc->map_checks, req);
 -	ret = ceph_monc_get_version_async(&osdc->client->monc, "osdmap",
 -					  map_check_cb, req->r_tid);
 -	WARN_ON(ret);
 -}
 -
 -/*
 - * lingering requests, watch/notify v2 infrastructure
 - */
 -static void linger_release(struct kref *kref)
 -{
 -	struct ceph_osd_linger_request *lreq =
 -	    container_of(kref, struct ceph_osd_linger_request, kref);
 -
 -	dout("%s lreq %p reg_req %p ping_req %p\n", __func__, lreq,
 -	     lreq->reg_req, lreq->ping_req);
 -	WARN_ON(!RB_EMPTY_NODE(&lreq->node));
 -	WARN_ON(!RB_EMPTY_NODE(&lreq->osdc_node));
 -	WARN_ON(!RB_EMPTY_NODE(&lreq->mc_node));
 -	WARN_ON(!list_empty(&lreq->scan_item));
 -	WARN_ON(!list_empty(&lreq->pending_lworks));
 -	WARN_ON(lreq->osd);
 -
 -	if (lreq->reg_req)
 -		ceph_osdc_put_request(lreq->reg_req);
 -	if (lreq->ping_req)
 -		ceph_osdc_put_request(lreq->ping_req);
 -	target_destroy(&lreq->t);
 -	kfree(lreq);
 -}
 -
 -static void linger_put(struct ceph_osd_linger_request *lreq)
 -{
 -	if (lreq)
 -		kref_put(&lreq->kref, linger_release);
 -}
 -
 -static struct ceph_osd_linger_request *
 -linger_get(struct ceph_osd_linger_request *lreq)
 -{
 -	kref_get(&lreq->kref);
 -	return lreq;
 -}
 -
 -static struct ceph_osd_linger_request *
 -linger_alloc(struct ceph_osd_client *osdc)
 -{
 -	struct ceph_osd_linger_request *lreq;
 -
 -	lreq = kzalloc(sizeof(*lreq), GFP_NOIO);
 -	if (!lreq)
 -		return NULL;
 -
 -	kref_init(&lreq->kref);
 -	mutex_init(&lreq->lock);
 -	RB_CLEAR_NODE(&lreq->node);
 -	RB_CLEAR_NODE(&lreq->osdc_node);
 -	RB_CLEAR_NODE(&lreq->mc_node);
 -	INIT_LIST_HEAD(&lreq->scan_item);
 -	INIT_LIST_HEAD(&lreq->pending_lworks);
 -	init_completion(&lreq->reg_commit_wait);
 -	init_completion(&lreq->notify_finish_wait);
 -
 -	lreq->osdc = osdc;
 -	target_init(&lreq->t);
 -
 -	dout("%s lreq %p\n", __func__, lreq);
 -	return lreq;
 -}
 -
 -DEFINE_RB_INSDEL_FUNCS(linger, struct ceph_osd_linger_request, linger_id, node)
 -DEFINE_RB_FUNCS(linger_osdc, struct ceph_osd_linger_request, linger_id, osdc_node)
 -DEFINE_RB_FUNCS(linger_mc, struct ceph_osd_linger_request, linger_id, mc_node)
 -
 -/*
 - * Create linger request <-> OSD session relation.
 - *
 - * @lreq has to be registered, @osd may be homeless.
 - */
 -static void link_linger(struct ceph_osd *osd,
 -			struct ceph_osd_linger_request *lreq)
 -{
 -	verify_osd_locked(osd);
 -	WARN_ON(!lreq->linger_id || lreq->osd);
 -	dout("%s osd %p osd%d lreq %p linger_id %llu\n", __func__, osd,
 -	     osd->o_osd, lreq, lreq->linger_id);
 -
 -	if (!osd_homeless(osd))
 -		__remove_osd_from_lru(osd);
 -	else
 -		atomic_inc(&osd->o_osdc->num_homeless);
 -
 -	get_osd(osd);
 -	insert_linger(&osd->o_linger_requests, lreq);
 -	lreq->osd = osd;
 -}
 -
 -static void unlink_linger(struct ceph_osd *osd,
 -			  struct ceph_osd_linger_request *lreq)
 -{
 -	verify_osd_locked(osd);
 -	WARN_ON(lreq->osd != osd);
 -	dout("%s osd %p osd%d lreq %p linger_id %llu\n", __func__, osd,
 -	     osd->o_osd, lreq, lreq->linger_id);
 -
 -	lreq->osd = NULL;
 -	erase_linger(&osd->o_linger_requests, lreq);
 -	put_osd(osd);
 -
 -	if (!osd_homeless(osd))
 -		maybe_move_osd_to_lru(osd);
 -	else
 -		atomic_dec(&osd->o_osdc->num_homeless);
 -}
 -
 -static bool __linger_registered(struct ceph_osd_linger_request *lreq)
 -{
 -	verify_osdc_locked(lreq->osdc);
 -
 -	return !RB_EMPTY_NODE(&lreq->osdc_node);
 -}
 -
 -static bool linger_registered(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -	bool registered;
 -
 -	down_read(&osdc->lock);
 -	registered = __linger_registered(lreq);
 -	up_read(&osdc->lock);
 -
 -	return registered;
 -}
 -
 -static void linger_register(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -
 -	verify_osdc_wrlocked(osdc);
 -	WARN_ON(lreq->linger_id);
 -
 -	linger_get(lreq);
 -	lreq->linger_id = ++osdc->last_linger_id;
 -	insert_linger_osdc(&osdc->linger_requests, lreq);
 -}
 -
 -static void linger_unregister(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -
 -	verify_osdc_wrlocked(osdc);
 -
 -	erase_linger_osdc(&osdc->linger_requests, lreq);
 -	linger_put(lreq);
 -}
 -
 -static void cancel_linger_request(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_linger_request *lreq = req->r_priv;
 -
 -	WARN_ON(!req->r_linger);
 -	cancel_request(req);
 -	linger_put(lreq);
 -}
 -
 -struct linger_work {
 -	struct work_struct work;
 -	struct ceph_osd_linger_request *lreq;
 -	struct list_head pending_item;
 -	unsigned long queued_stamp;
 -
 -	union {
 -		struct {
 -			u64 notify_id;
 -			u64 notifier_id;
 -			void *payload; /* points into @msg front */
 -			size_t payload_len;
 -
 -			struct ceph_msg *msg; /* for ceph_msg_put() */
 -		} notify;
 -		struct {
 -			int err;
 -		} error;
 -	};
 -};
 -
 -static struct linger_work *lwork_alloc(struct ceph_osd_linger_request *lreq,
 -				       work_func_t workfn)
 -{
 -	struct linger_work *lwork;
 -
 -	lwork = kzalloc(sizeof(*lwork), GFP_NOIO);
 -	if (!lwork)
 -		return NULL;
 -
 -	INIT_WORK(&lwork->work, workfn);
 -	INIT_LIST_HEAD(&lwork->pending_item);
 -	lwork->lreq = linger_get(lreq);
 -
 -	return lwork;
 -}
 -
 -static void lwork_free(struct linger_work *lwork)
 -{
 -	struct ceph_osd_linger_request *lreq = lwork->lreq;
 -
 -	mutex_lock(&lreq->lock);
 -	list_del(&lwork->pending_item);
 -	mutex_unlock(&lreq->lock);
 -
 -	linger_put(lreq);
 -	kfree(lwork);
 -}
 -
 -static void lwork_queue(struct linger_work *lwork)
 -{
 -	struct ceph_osd_linger_request *lreq = lwork->lreq;
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -
 -	verify_lreq_locked(lreq);
 -	WARN_ON(!list_empty(&lwork->pending_item));
 -
 -	lwork->queued_stamp = jiffies;
 -	list_add_tail(&lwork->pending_item, &lreq->pending_lworks);
 -	queue_work(osdc->notify_wq, &lwork->work);
 -}
 -
 -static void do_watch_notify(struct work_struct *w)
 -{
 -	struct linger_work *lwork = container_of(w, struct linger_work, work);
 -	struct ceph_osd_linger_request *lreq = lwork->lreq;
 -
 -	if (!linger_registered(lreq)) {
 -		dout("%s lreq %p not registered\n", __func__, lreq);
 -		goto out;
 -	}
 -
 -	WARN_ON(!lreq->is_watch);
 -	dout("%s lreq %p notify_id %llu notifier_id %llu payload_len %zu\n",
 -	     __func__, lreq, lwork->notify.notify_id, lwork->notify.notifier_id,
 -	     lwork->notify.payload_len);
 -	lreq->wcb(lreq->data, lwork->notify.notify_id, lreq->linger_id,
 -		  lwork->notify.notifier_id, lwork->notify.payload,
 -		  lwork->notify.payload_len);
 -
 -out:
 -	ceph_msg_put(lwork->notify.msg);
 -	lwork_free(lwork);
 -}
 -
 -static void do_watch_error(struct work_struct *w)
 -{
 -	struct linger_work *lwork = container_of(w, struct linger_work, work);
 -	struct ceph_osd_linger_request *lreq = lwork->lreq;
 -
 -	if (!linger_registered(lreq)) {
 -		dout("%s lreq %p not registered\n", __func__, lreq);
 -		goto out;
 -	}
 -
 -	dout("%s lreq %p err %d\n", __func__, lreq, lwork->error.err);
 -	lreq->errcb(lreq->data, lreq->linger_id, lwork->error.err);
 -
 -out:
 -	lwork_free(lwork);
 -}
 -
 -static void queue_watch_error(struct ceph_osd_linger_request *lreq)
 -{
 -	struct linger_work *lwork;
 -
 -	lwork = lwork_alloc(lreq, do_watch_error);
 -	if (!lwork) {
 -		pr_err("failed to allocate error-lwork\n");
 -		return;
 -	}
 -
 -	lwork->error.err = lreq->last_error;
 -	lwork_queue(lwork);
 -}
 -
 -static void linger_reg_commit_complete(struct ceph_osd_linger_request *lreq,
 -				       int result)
 -{
 -	if (!completion_done(&lreq->reg_commit_wait)) {
 -		lreq->reg_commit_error = (result <= 0 ? result : 0);
 -		complete_all(&lreq->reg_commit_wait);
 -	}
 -}
 -
 -static void linger_commit_cb(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_linger_request *lreq = req->r_priv;
 -
 -	mutex_lock(&lreq->lock);
 -	dout("%s lreq %p linger_id %llu result %d\n", __func__, lreq,
 -	     lreq->linger_id, req->r_result);
 -	WARN_ON(!__linger_registered(lreq));
 -	linger_reg_commit_complete(lreq, req->r_result);
 -	lreq->committed = true;
 -
 -	if (!lreq->is_watch) {
 -		struct ceph_osd_data *osd_data =
 -		    osd_req_op_data(req, 0, notify, response_data);
 -		void *p = page_address(osd_data->pages[0]);
 -
 -		WARN_ON(req->r_ops[0].op != CEPH_OSD_OP_NOTIFY ||
 -			osd_data->type != CEPH_OSD_DATA_TYPE_PAGES);
 -
 -		/* make note of the notify_id */
 -		if (req->r_ops[0].outdata_len >= sizeof(u64)) {
 -			lreq->notify_id = ceph_decode_64(&p);
 -			dout("lreq %p notify_id %llu\n", lreq,
 -			     lreq->notify_id);
 -		} else {
 -			dout("lreq %p no notify_id\n", lreq);
 -		}
 -	}
 -
 -	mutex_unlock(&lreq->lock);
 -	linger_put(lreq);
 -}
 -
 -static int normalize_watch_error(int err)
 -{
 -	/*
 -	 * Translate ENOENT -> ENOTCONN so that a delete->disconnection
 -	 * notification and a failure to reconnect because we raced with
 -	 * the delete appear the same to the user.
 -	 */
 -	if (err == -ENOENT)
 -		err = -ENOTCONN;
 -
 -	return err;
 -}
 -
 -static void linger_reconnect_cb(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_linger_request *lreq = req->r_priv;
 -
 -	mutex_lock(&lreq->lock);
 -	dout("%s lreq %p linger_id %llu result %d last_error %d\n", __func__,
 -	     lreq, lreq->linger_id, req->r_result, lreq->last_error);
 -	if (req->r_result < 0) {
 -		if (!lreq->last_error) {
 -			lreq->last_error = normalize_watch_error(req->r_result);
 -			queue_watch_error(lreq);
 -		}
 -	}
 -
 -	mutex_unlock(&lreq->lock);
 -	linger_put(lreq);
 -}
 -
 -static void send_linger(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_request *req = lreq->reg_req;
 -	struct ceph_osd_req_op *op = &req->r_ops[0];
 -
 -	verify_osdc_wrlocked(req->r_osdc);
 -	dout("%s lreq %p linger_id %llu\n", __func__, lreq, lreq->linger_id);
 -
 -	if (req->r_osd)
 -		cancel_linger_request(req);
 -
 -	request_reinit(req);
 -	ceph_oid_copy(&req->r_base_oid, &lreq->t.base_oid);
 -	ceph_oloc_copy(&req->r_base_oloc, &lreq->t.base_oloc);
 -	req->r_flags = lreq->t.flags;
 -	req->r_mtime = lreq->mtime;
 -
 -	mutex_lock(&lreq->lock);
 -	if (lreq->is_watch && lreq->committed) {
 -		WARN_ON(op->op != CEPH_OSD_OP_WATCH ||
 -			op->watch.cookie != lreq->linger_id);
 -		op->watch.op = CEPH_OSD_WATCH_OP_RECONNECT;
 -		op->watch.gen = ++lreq->register_gen;
 -		dout("lreq %p reconnect register_gen %u\n", lreq,
 -		     op->watch.gen);
 -		req->r_callback = linger_reconnect_cb;
 -	} else {
 -		if (!lreq->is_watch)
 -			lreq->notify_id = 0;
 -		else
 -			WARN_ON(op->watch.op != CEPH_OSD_WATCH_OP_WATCH);
 -		dout("lreq %p register\n", lreq);
 -		req->r_callback = linger_commit_cb;
 -	}
 -	mutex_unlock(&lreq->lock);
 -
 -	req->r_priv = linger_get(lreq);
 -	req->r_linger = true;
 -
 -	submit_request(req, true);
 -}
 -
 -static void linger_ping_cb(struct ceph_osd_request *req)
 -{
 -	struct ceph_osd_linger_request *lreq = req->r_priv;
++		/* reply */
++		case CEPH_OSD_OP_STAT:
++			ceph_osdc_msg_data_add(req->r_reply,
++					       &op->raw_data_in);
++			break;
++		case CEPH_OSD_OP_READ:
++			ceph_osdc_msg_data_add(req->r_reply,
++					       &op->extent.osd_data);
++			break;
++		case CEPH_OSD_OP_LIST_WATCHERS:
++			ceph_osdc_msg_data_add(req->r_reply,
++					       &op->list_watchers.response_data);
++			break;
+ 
 -	mutex_lock(&lreq->lock);
 -	dout("%s lreq %p linger_id %llu result %d ping_sent %lu last_error %d\n",
 -	     __func__, lreq, lreq->linger_id, req->r_result, lreq->ping_sent,
 -	     lreq->last_error);
 -	if (lreq->register_gen == req->r_ops[0].watch.gen) {
 -		if (!req->r_result) {
 -			lreq->watch_valid_thru = lreq->ping_sent;
 -		} else if (!lreq->last_error) {
 -			lreq->last_error = normalize_watch_error(req->r_result);
 -			queue_watch_error(lreq);
++		/* both */
++		case CEPH_OSD_OP_CALL:
++			WARN_ON(op->indata_len != op->cls.class_len +
++						  op->cls.method_len +
++						  op->cls.indata_len);
++			ceph_osdc_msg_data_add(msg, &op->cls.request_info);
++			/* optional, can be NONE */
++			ceph_osdc_msg_data_add(msg, &op->cls.request_data);
++			/* optional, can be NONE */
++			ceph_osdc_msg_data_add(req->r_reply,
++					       &op->cls.response_data);
++			break;
++		case CEPH_OSD_OP_NOTIFY:
++			ceph_osdc_msg_data_add(msg,
++					       &op->notify.request_data);
++			ceph_osdc_msg_data_add(req->r_reply,
++					       &op->notify.response_data);
++			break;
++>>>>>>> a4ed38d7a180 (libceph: support for CEPH_OSD_OP_LIST_WATCHERS)
  		}
 -	} else {
 -		dout("lreq %p register_gen %u ignoring old pong %u\n", lreq,
 -		     lreq->register_gen, req->r_ops[0].watch.gen);
 -	}
 -
 -	mutex_unlock(&lreq->lock);
 -	linger_put(lreq);
 -}
  
 -static void send_linger_ping(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -	struct ceph_osd_request *req = lreq->ping_req;
 -	struct ceph_osd_req_op *op = &req->r_ops[0];
 +		dout("map_request osd %p is osd%d\n", req->r_osd,
 +		     acting.primary);
 +		insert_osd(&osdc->osds, req->r_osd);
  
 -	if (ceph_osdmap_flag(osdc, CEPH_OSDMAP_PAUSERD)) {
 -		dout("%s PAUSERD\n", __func__);
 -		return;
 +		ceph_con_open(&req->r_osd->o_con,
 +			      CEPH_ENTITY_TYPE_OSD, acting.primary,
 +			      &osdc->osdmap->osd_addr[acting.primary]);
  	}
  
 -	lreq->ping_sent = jiffies;
 -	dout("%s lreq %p linger_id %llu ping_sent %lu register_gen %u\n",
 -	     __func__, lreq, lreq->linger_id, lreq->ping_sent,
 -	     lreq->register_gen);
 -
 -	if (req->r_osd)
 -		cancel_linger_request(req);
 -
 -	request_reinit(req);
 -	target_copy(&req->r_t, &lreq->t);
 +	__enqueue_request(req);
 +	err = 1;   /* osd or pg changed */
  
 -	WARN_ON(op->op != CEPH_OSD_OP_WATCH ||
 -		op->watch.cookie != lreq->linger_id ||
 -		op->watch.op != CEPH_OSD_WATCH_OP_PING);
 -	op->watch.gen = lreq->register_gen;
 -	req->r_callback = linger_ping_cb;
 -	req->r_priv = linger_get(lreq);
 -	req->r_linger = true;
 -
 -	ceph_osdc_get_request(req);
 -	account_request(req);
 -	req->r_tid = atomic64_inc_return(&osdc->last_tid);
 -	link_request(lreq->osd, req);
 -	send_request(req);
 +out:
 +	return err;
  }
  
 -static void linger_submit(struct ceph_osd_linger_request *lreq)
 +/*
 + * caller should hold map_sem (for read) and request_mutex
 + */
 +static void __send_request(struct ceph_osd_client *osdc,
 +			   struct ceph_osd_request *req)
  {
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -	struct ceph_osd *osd;
 +	void *p;
  
 -	calc_target(osdc, &lreq->t, &lreq->last_force_resend, false);
 -	osd = lookup_create_osd(osdc, lreq->t.osd, true);
 -	link_linger(osd, lreq);
 +	dout("send_request %p tid %llu to osd%d flags %d pg %lld.%x\n",
 +	     req, req->r_tid, req->r_osd->o_osd, req->r_flags,
 +	     (unsigned long long)req->r_pgid.pool, req->r_pgid.seed);
  
 -	send_linger(lreq);
 -}
 +	/* fill in message content that changes each time we send it */
 +	put_unaligned_le32(osdc->osdmap->epoch, req->r_request_osdmap_epoch);
 +	put_unaligned_le32(req->r_flags, req->r_request_flags);
 +	put_unaligned_le64(req->r_target_oloc.pool, req->r_request_pool);
 +	p = req->r_request_pgid;
 +	ceph_encode_64(&p, req->r_pgid.pool);
 +	ceph_encode_32(&p, req->r_pgid.seed);
 +	put_unaligned_le64(1, req->r_request_attempts);  /* FIXME */
 +	memcpy(req->r_request_reassert_version, &req->r_reassert_version,
 +	       sizeof(req->r_reassert_version));
  
 -static void cancel_linger_map_check(struct ceph_osd_linger_request *lreq)
 -{
 -	struct ceph_osd_client *osdc = lreq->osdc;
 -	struct ceph_osd_linger_request *lookup_lreq;
 +	req->r_stamp = jiffies;
 +	list_move_tail(&req->r_req_lru_item, &osdc->req_lru);
  
 -	verify_osdc_wrlocked(osdc);
 +	ceph_msg_get(req->r_request); /* send consumes a ref */
  
 -	lookup_lreq = lookup_linger_mc(&osdc->linger_map_checks,
 -				       lreq->linger_id);
 -	if (!lookup_lreq)
 -		return;
 +	req->r_sent = req->r_osd->o_incarnation;
  
 -	WARN_ON(lookup_lreq != lreq);
 -	erase_linger_mc(&osdc->linger_map_checks, lreq);
 -	linger_put(lreq);
 +	ceph_con_send(&req->r_osd->o_con, req->r_request);
  }
  
  /*
@@@ -2579,6 -3562,452 +2682,455 @@@ void ceph_osdc_sync(struct ceph_osd_cli
  }
  EXPORT_SYMBOL(ceph_osdc_sync);
  
++<<<<<<< HEAD
++=======
+ static struct ceph_osd_request *
+ alloc_linger_request(struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_osd_request *req;
+ 
+ 	req = ceph_osdc_alloc_request(lreq->osdc, NULL, 1, false, GFP_NOIO);
+ 	if (!req)
+ 		return NULL;
+ 
+ 	ceph_oid_copy(&req->r_base_oid, &lreq->t.base_oid);
+ 	ceph_oloc_copy(&req->r_base_oloc, &lreq->t.base_oloc);
+ 
+ 	if (ceph_osdc_alloc_messages(req, GFP_NOIO)) {
+ 		ceph_osdc_put_request(req);
+ 		return NULL;
+ 	}
+ 
+ 	return req;
+ }
+ 
+ /*
+  * Returns a handle, caller owns a ref.
+  */
+ struct ceph_osd_linger_request *
+ ceph_osdc_watch(struct ceph_osd_client *osdc,
+ 		struct ceph_object_id *oid,
+ 		struct ceph_object_locator *oloc,
+ 		rados_watchcb2_t wcb,
+ 		rados_watcherrcb_t errcb,
+ 		void *data)
+ {
+ 	struct ceph_osd_linger_request *lreq;
+ 	int ret;
+ 
+ 	lreq = linger_alloc(osdc);
+ 	if (!lreq)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	lreq->is_watch = true;
+ 	lreq->wcb = wcb;
+ 	lreq->errcb = errcb;
+ 	lreq->data = data;
+ 	lreq->watch_valid_thru = jiffies;
+ 
+ 	ceph_oid_copy(&lreq->t.base_oid, oid);
+ 	ceph_oloc_copy(&lreq->t.base_oloc, oloc);
+ 	lreq->t.flags = CEPH_OSD_FLAG_WRITE | CEPH_OSD_FLAG_ONDISK;
+ 	lreq->mtime = CURRENT_TIME;
+ 
+ 	lreq->reg_req = alloc_linger_request(lreq);
+ 	if (!lreq->reg_req) {
+ 		ret = -ENOMEM;
+ 		goto err_put_lreq;
+ 	}
+ 
+ 	lreq->ping_req = alloc_linger_request(lreq);
+ 	if (!lreq->ping_req) {
+ 		ret = -ENOMEM;
+ 		goto err_put_lreq;
+ 	}
+ 
+ 	down_write(&osdc->lock);
+ 	linger_register(lreq); /* before osd_req_op_* */
+ 	osd_req_op_watch_init(lreq->reg_req, 0, lreq->linger_id,
+ 			      CEPH_OSD_WATCH_OP_WATCH);
+ 	osd_req_op_watch_init(lreq->ping_req, 0, lreq->linger_id,
+ 			      CEPH_OSD_WATCH_OP_PING);
+ 	linger_submit(lreq);
+ 	up_write(&osdc->lock);
+ 
+ 	ret = linger_reg_commit_wait(lreq);
+ 	if (ret) {
+ 		linger_cancel(lreq);
+ 		goto err_put_lreq;
+ 	}
+ 
+ 	return lreq;
+ 
+ err_put_lreq:
+ 	linger_put(lreq);
+ 	return ERR_PTR(ret);
+ }
+ EXPORT_SYMBOL(ceph_osdc_watch);
+ 
+ /*
+  * Releases a ref.
+  *
+  * Times out after mount_timeout to preserve rbd unmap behaviour
+  * introduced in 2894e1d76974 ("rbd: timeout watch teardown on unmap
+  * with mount_timeout").
+  */
+ int ceph_osdc_unwatch(struct ceph_osd_client *osdc,
+ 		      struct ceph_osd_linger_request *lreq)
+ {
+ 	struct ceph_options *opts = osdc->client->options;
+ 	struct ceph_osd_request *req;
+ 	int ret;
+ 
+ 	req = ceph_osdc_alloc_request(osdc, NULL, 1, false, GFP_NOIO);
+ 	if (!req)
+ 		return -ENOMEM;
+ 
+ 	ceph_oid_copy(&req->r_base_oid, &lreq->t.base_oid);
+ 	ceph_oloc_copy(&req->r_base_oloc, &lreq->t.base_oloc);
+ 	req->r_flags = CEPH_OSD_FLAG_WRITE | CEPH_OSD_FLAG_ONDISK;
+ 	req->r_mtime = CURRENT_TIME;
+ 	osd_req_op_watch_init(req, 0, lreq->linger_id,
+ 			      CEPH_OSD_WATCH_OP_UNWATCH);
+ 
+ 	ret = ceph_osdc_alloc_messages(req, GFP_NOIO);
+ 	if (ret)
+ 		goto out_put_req;
+ 
+ 	ceph_osdc_start_request(osdc, req, false);
+ 	linger_cancel(lreq);
+ 	linger_put(lreq);
+ 	ret = wait_request_timeout(req, opts->mount_timeout);
+ 
+ out_put_req:
+ 	ceph_osdc_put_request(req);
+ 	return ret;
+ }
+ EXPORT_SYMBOL(ceph_osdc_unwatch);
+ 
+ static int osd_req_op_notify_ack_init(struct ceph_osd_request *req, int which,
+ 				      u64 notify_id, u64 cookie, void *payload,
+ 				      size_t payload_len)
+ {
+ 	struct ceph_osd_req_op *op;
+ 	struct ceph_pagelist *pl;
+ 	int ret;
+ 
+ 	op = _osd_req_op_init(req, which, CEPH_OSD_OP_NOTIFY_ACK, 0);
+ 
+ 	pl = kmalloc(sizeof(*pl), GFP_NOIO);
+ 	if (!pl)
+ 		return -ENOMEM;
+ 
+ 	ceph_pagelist_init(pl);
+ 	ret = ceph_pagelist_encode_64(pl, notify_id);
+ 	ret |= ceph_pagelist_encode_64(pl, cookie);
+ 	if (payload) {
+ 		ret |= ceph_pagelist_encode_32(pl, payload_len);
+ 		ret |= ceph_pagelist_append(pl, payload, payload_len);
+ 	} else {
+ 		ret |= ceph_pagelist_encode_32(pl, 0);
+ 	}
+ 	if (ret) {
+ 		ceph_pagelist_release(pl);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	ceph_osd_data_pagelist_init(&op->notify_ack.request_data, pl);
+ 	op->indata_len = pl->length;
+ 	return 0;
+ }
+ 
+ int ceph_osdc_notify_ack(struct ceph_osd_client *osdc,
+ 			 struct ceph_object_id *oid,
+ 			 struct ceph_object_locator *oloc,
+ 			 u64 notify_id,
+ 			 u64 cookie,
+ 			 void *payload,
+ 			 size_t payload_len)
+ {
+ 	struct ceph_osd_request *req;
+ 	int ret;
+ 
+ 	req = ceph_osdc_alloc_request(osdc, NULL, 1, false, GFP_NOIO);
+ 	if (!req)
+ 		return -ENOMEM;
+ 
+ 	ceph_oid_copy(&req->r_base_oid, oid);
+ 	ceph_oloc_copy(&req->r_base_oloc, oloc);
+ 	req->r_flags = CEPH_OSD_FLAG_READ;
+ 
+ 	ret = ceph_osdc_alloc_messages(req, GFP_NOIO);
+ 	if (ret)
+ 		goto out_put_req;
+ 
+ 	ret = osd_req_op_notify_ack_init(req, 0, notify_id, cookie, payload,
+ 					 payload_len);
+ 	if (ret)
+ 		goto out_put_req;
+ 
+ 	ceph_osdc_start_request(osdc, req, false);
+ 	ret = ceph_osdc_wait_request(osdc, req);
+ 
+ out_put_req:
+ 	ceph_osdc_put_request(req);
+ 	return ret;
+ }
+ EXPORT_SYMBOL(ceph_osdc_notify_ack);
+ 
+ static int osd_req_op_notify_init(struct ceph_osd_request *req, int which,
+ 				  u64 cookie, u32 prot_ver, u32 timeout,
+ 				  void *payload, size_t payload_len)
+ {
+ 	struct ceph_osd_req_op *op;
+ 	struct ceph_pagelist *pl;
+ 	int ret;
+ 
+ 	op = _osd_req_op_init(req, which, CEPH_OSD_OP_NOTIFY, 0);
+ 	op->notify.cookie = cookie;
+ 
+ 	pl = kmalloc(sizeof(*pl), GFP_NOIO);
+ 	if (!pl)
+ 		return -ENOMEM;
+ 
+ 	ceph_pagelist_init(pl);
+ 	ret = ceph_pagelist_encode_32(pl, 1); /* prot_ver */
+ 	ret |= ceph_pagelist_encode_32(pl, timeout);
+ 	ret |= ceph_pagelist_encode_32(pl, payload_len);
+ 	ret |= ceph_pagelist_append(pl, payload, payload_len);
+ 	if (ret) {
+ 		ceph_pagelist_release(pl);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	ceph_osd_data_pagelist_init(&op->notify.request_data, pl);
+ 	op->indata_len = pl->length;
+ 	return 0;
+ }
+ 
+ /*
+  * @timeout: in seconds
+  *
+  * @preply_{pages,len} are initialized both on success and error.
+  * The caller is responsible for:
+  *
+  *     ceph_release_page_vector(reply_pages, calc_pages_for(0, reply_len))
+  */
+ int ceph_osdc_notify(struct ceph_osd_client *osdc,
+ 		     struct ceph_object_id *oid,
+ 		     struct ceph_object_locator *oloc,
+ 		     void *payload,
+ 		     size_t payload_len,
+ 		     u32 timeout,
+ 		     struct page ***preply_pages,
+ 		     size_t *preply_len)
+ {
+ 	struct ceph_osd_linger_request *lreq;
+ 	struct page **pages;
+ 	int ret;
+ 
+ 	WARN_ON(!timeout);
+ 	if (preply_pages) {
+ 		*preply_pages = NULL;
+ 		*preply_len = 0;
+ 	}
+ 
+ 	lreq = linger_alloc(osdc);
+ 	if (!lreq)
+ 		return -ENOMEM;
+ 
+ 	lreq->preply_pages = preply_pages;
+ 	lreq->preply_len = preply_len;
+ 
+ 	ceph_oid_copy(&lreq->t.base_oid, oid);
+ 	ceph_oloc_copy(&lreq->t.base_oloc, oloc);
+ 	lreq->t.flags = CEPH_OSD_FLAG_READ;
+ 
+ 	lreq->reg_req = alloc_linger_request(lreq);
+ 	if (!lreq->reg_req) {
+ 		ret = -ENOMEM;
+ 		goto out_put_lreq;
+ 	}
+ 
+ 	/* for notify_id */
+ 	pages = ceph_alloc_page_vector(1, GFP_NOIO);
+ 	if (IS_ERR(pages)) {
+ 		ret = PTR_ERR(pages);
+ 		goto out_put_lreq;
+ 	}
+ 
+ 	down_write(&osdc->lock);
+ 	linger_register(lreq); /* before osd_req_op_* */
+ 	ret = osd_req_op_notify_init(lreq->reg_req, 0, lreq->linger_id, 1,
+ 				     timeout, payload, payload_len);
+ 	if (ret) {
+ 		linger_unregister(lreq);
+ 		up_write(&osdc->lock);
+ 		ceph_release_page_vector(pages, 1);
+ 		goto out_put_lreq;
+ 	}
+ 	ceph_osd_data_pages_init(osd_req_op_data(lreq->reg_req, 0, notify,
+ 						 response_data),
+ 				 pages, PAGE_SIZE, 0, false, true);
+ 	linger_submit(lreq);
+ 	up_write(&osdc->lock);
+ 
+ 	ret = linger_reg_commit_wait(lreq);
+ 	if (!ret)
+ 		ret = linger_notify_finish_wait(lreq);
+ 	else
+ 		dout("lreq %p failed to initiate notify %d\n", lreq, ret);
+ 
+ 	linger_cancel(lreq);
+ out_put_lreq:
+ 	linger_put(lreq);
+ 	return ret;
+ }
+ EXPORT_SYMBOL(ceph_osdc_notify);
+ 
+ /*
+  * Return the number of milliseconds since the watch was last
+  * confirmed, or an error.  If there is an error, the watch is no
+  * longer valid, and should be destroyed with ceph_osdc_unwatch().
+  */
+ int ceph_osdc_watch_check(struct ceph_osd_client *osdc,
+ 			  struct ceph_osd_linger_request *lreq)
+ {
+ 	unsigned long stamp, age;
+ 	int ret;
+ 
+ 	down_read(&osdc->lock);
+ 	mutex_lock(&lreq->lock);
+ 	stamp = lreq->watch_valid_thru;
+ 	if (!list_empty(&lreq->pending_lworks)) {
+ 		struct linger_work *lwork =
+ 		    list_first_entry(&lreq->pending_lworks,
+ 				     struct linger_work,
+ 				     pending_item);
+ 
+ 		if (time_before(lwork->queued_stamp, stamp))
+ 			stamp = lwork->queued_stamp;
+ 	}
+ 	age = jiffies - stamp;
+ 	dout("%s lreq %p linger_id %llu age %lu last_error %d\n", __func__,
+ 	     lreq, lreq->linger_id, age, lreq->last_error);
+ 	/* we are truncating to msecs, so return a safe upper bound */
+ 	ret = lreq->last_error ?: 1 + jiffies_to_msecs(age);
+ 
+ 	mutex_unlock(&lreq->lock);
+ 	up_read(&osdc->lock);
+ 	return ret;
+ }
+ 
+ static int decode_watcher(void **p, void *end, struct ceph_watch_item *item)
+ {
+ 	u8 struct_v;
+ 	u32 struct_len;
+ 	int ret;
+ 
+ 	ret = ceph_start_decoding(p, end, 2, "watch_item_t",
+ 				  &struct_v, &struct_len);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ceph_decode_copy(p, &item->name, sizeof(item->name));
+ 	item->cookie = ceph_decode_64(p);
+ 	*p += 4; /* skip timeout_seconds */
+ 	if (struct_v >= 2) {
+ 		ceph_decode_copy(p, &item->addr, sizeof(item->addr));
+ 		ceph_decode_addr(&item->addr);
+ 	}
+ 
+ 	dout("%s %s%llu cookie %llu addr %s\n", __func__,
+ 	     ENTITY_NAME(item->name), item->cookie,
+ 	     ceph_pr_addr(&item->addr.in_addr));
+ 	return 0;
+ }
+ 
+ static int decode_watchers(void **p, void *end,
+ 			   struct ceph_watch_item **watchers,
+ 			   u32 *num_watchers)
+ {
+ 	u8 struct_v;
+ 	u32 struct_len;
+ 	int i;
+ 	int ret;
+ 
+ 	ret = ceph_start_decoding(p, end, 1, "obj_list_watch_response_t",
+ 				  &struct_v, &struct_len);
+ 	if (ret)
+ 		return ret;
+ 
+ 	*num_watchers = ceph_decode_32(p);
+ 	*watchers = kcalloc(*num_watchers, sizeof(**watchers), GFP_NOIO);
+ 	if (!*watchers)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < *num_watchers; i++) {
+ 		ret = decode_watcher(p, end, *watchers + i);
+ 		if (ret) {
+ 			kfree(*watchers);
+ 			return ret;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ /*
+  * On success, the caller is responsible for:
+  *
+  *     kfree(watchers);
+  */
+ int ceph_osdc_list_watchers(struct ceph_osd_client *osdc,
+ 			    struct ceph_object_id *oid,
+ 			    struct ceph_object_locator *oloc,
+ 			    struct ceph_watch_item **watchers,
+ 			    u32 *num_watchers)
+ {
+ 	struct ceph_osd_request *req;
+ 	struct page **pages;
+ 	int ret;
+ 
+ 	req = ceph_osdc_alloc_request(osdc, NULL, 1, false, GFP_NOIO);
+ 	if (!req)
+ 		return -ENOMEM;
+ 
+ 	ceph_oid_copy(&req->r_base_oid, oid);
+ 	ceph_oloc_copy(&req->r_base_oloc, oloc);
+ 	req->r_flags = CEPH_OSD_FLAG_READ;
+ 
+ 	ret = ceph_osdc_alloc_messages(req, GFP_NOIO);
+ 	if (ret)
+ 		goto out_put_req;
+ 
+ 	pages = ceph_alloc_page_vector(1, GFP_NOIO);
+ 	if (IS_ERR(pages)) {
+ 		ret = PTR_ERR(pages);
+ 		goto out_put_req;
+ 	}
+ 
+ 	osd_req_op_init(req, 0, CEPH_OSD_OP_LIST_WATCHERS, 0);
+ 	ceph_osd_data_pages_init(osd_req_op_data(req, 0, list_watchers,
+ 						 response_data),
+ 				 pages, PAGE_SIZE, 0, false, true);
+ 
+ 	ceph_osdc_start_request(osdc, req, false);
+ 	ret = ceph_osdc_wait_request(osdc, req);
+ 	if (ret >= 0) {
+ 		void *p = page_address(pages[0]);
+ 		void *const end = p + req->r_ops[0].outdata_len;
+ 
+ 		ret = decode_watchers(&p, end, watchers, num_watchers);
+ 	}
+ 
+ out_put_req:
+ 	ceph_osdc_put_request(req);
+ 	return ret;
+ }
+ EXPORT_SYMBOL(ceph_osdc_list_watchers);
+ 
++>>>>>>> a4ed38d7a180 (libceph: support for CEPH_OSD_OP_LIST_WATCHERS)
  /*
   * Call all pending notify callbacks - for use after a watch is
   * unregistered, to make sure no more callbacks for it will be invoked
* Unmerged path include/linux/ceph/osd_client.h
* Unmerged path net/ceph/osd_client.c
