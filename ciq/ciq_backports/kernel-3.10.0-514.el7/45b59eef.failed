staging/rdma/hfi1: Remove modify_port and port_immutable functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [infiniband] rdma/hfi1: Remove modify_port and port_immutable functions (Alex Estrin) [1272062 1273170]
Rebuild_FUZZ: 93.55%
commit-author Harish Chegondi <harish.chegondi@intel.com>
commit 45b59eefcca95a3dc75b68e063390f7a1aedd90b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/45b59eef.failed

Delete code from query_port which has been moved into rvt_query_port
Create a call back function to shut down a port which may be called from
rvt_modify_port

	Signed-off-by: Harish Chegondi <harish.chegondi@intel.com>
	Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 45b59eefcca95a3dc75b68e063390f7a1aedd90b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/verbs.c
#	drivers/staging/rdma/hfi1/verbs.h
diff --cc drivers/staging/hfi1/verbs.c
index d228eb7fc4f0,0ee6b1debd05..000000000000
--- a/drivers/staging/hfi1/verbs.c
+++ b/drivers/staging/hfi1/verbs.c
@@@ -1444,28 -1220,20 +1444,34 @@@ static inline u16 opa_width_to_ib(u16 i
  	}
  }
  
- static int query_port(struct ib_device *ibdev, u8 port,
+ static int query_port(struct rvt_dev_info *rdi, u8 port_num,
  		      struct ib_port_attr *props)
  {
- 	struct hfi1_devdata *dd = dd_from_ibdev(ibdev);
- 	struct hfi1_ibport *ibp = to_iport(ibdev, port);
- 	struct hfi1_pportdata *ppd = ppd_from_ibp(ibp);
+ 	struct hfi1_ibdev *verbs_dev = dev_from_rdi(rdi);
+ 	struct hfi1_devdata *dd = dd_from_dev(verbs_dev);
+ 	struct hfi1_pportdata *ppd = &dd->pport[port_num - 1];
  	u16 lid = ppd->lid;
  
- 	memset(props, 0, sizeof(*props));
  	props->lid = lid ? lid : 0;
  	props->lmc = ppd->lmc;
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	props->sm_lid = ibp->sm_lid;
 +	props->sm_sl = ibp->sm_sl;
  	/* OPA logical states match IB logical states */
  	props->state = driver_lstate(ppd);
  	props->phys_state = hfi1_ibphys_portstate(ppd);
 +	props->port_cap_flags = ibp->port_cap_flags;
  	props->gid_tbl_len = HFI1_GUIDS_PER_PORT;
 +	props->max_msg_sz = 0x80000000;
 +	props->pkey_tbl_len = hfi1_get_npkeys(dd);
 +	props->bad_pkey_cntr = ibp->pkey_violations;
 +	props->qkey_viol_cntr = ibp->qkey_violations;
++=======
++	/* OPA logical states match IB logical states */
++	props->state = driver_lstate(ppd);
++	props->phys_state = hfi1_ibphys_portstate(ppd);
++	props->gid_tbl_len = HFI1_GUIDS_PER_PORT;
++>>>>>>> 45b59eefcca9 (staging/rdma/hfi1: Remove modify_port and port_immutable functions):drivers/staging/rdma/hfi1/verbs.c
  	props->active_width = (u8)opa_width_to_ib(ppd->link_width_active);
  	/* see rate_show() in ib core/sysfs.c */
  	props->active_speed = (u8)opa_speed_to_ib(ppd->link_speed_active);
@@@ -1484,27 -1251,6 +1489,30 @@@
  				      4096 : hfi1_max_mtu), IB_MTU_4096);
  	props->active_mtu = !valid_ib_mtu(ppd->ibmtu) ? props->max_mtu :
  		mtu_to_enum(ppd->ibmtu, IB_MTU_2048);
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	props->subnet_timeout = ibp->subnet_timeout;
 +
 +	return 0;
 +}
 +
 +static int port_immutable(struct ib_device *ibdev, u8 port_num,
 +			  struct ib_port_immutable *immutable)
 +{
 +	struct ib_port_attr attr;
 +	int err;
 +
 +	err = query_port(ibdev, port_num, &attr);
 +	if (err)
 +		return err;
 +
 +	memset(immutable, 0, sizeof(*immutable));
 +
 +	immutable->pkey_tbl_len = attr.pkey_tbl_len;
 +	immutable->gid_tbl_len = attr.gid_tbl_len;
 +	immutable->core_cap_flags = RDMA_CORE_PORT_INTEL_OPA;
 +	immutable->max_mad_size = OPA_MGMT_MAD_SIZE;
++=======
++>>>>>>> 45b59eefcca9 (staging/rdma/hfi1: Remove modify_port and port_immutable functions):drivers/staging/rdma/hfi1/verbs.c
  
  	return 0;
  }
@@@ -1548,24 -1294,16 +1556,30 @@@ bail
  	return ret;
  }
  
- static int modify_port(struct ib_device *ibdev, u8 port,
- 		       int port_modify_mask, struct ib_port_modify *props)
+ static int shut_down_port(struct rvt_dev_info *rdi, u8 port_num)
  {
- 	struct hfi1_ibport *ibp = to_iport(ibdev, port);
- 	struct hfi1_pportdata *ppd = ppd_from_ibp(ibp);
- 	int ret = 0;
+ 	struct hfi1_ibdev *verbs_dev = dev_from_rdi(rdi);
+ 	struct hfi1_devdata *dd = dd_from_dev(verbs_dev);
+ 	struct hfi1_pportdata *ppd = &dd->pport[port_num - 1];
+ 	int ret;
  
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	ibp->port_cap_flags |= props->set_port_cap_mask;
 +	ibp->port_cap_flags &= ~props->clr_port_cap_mask;
 +	if (props->set_port_cap_mask || props->clr_port_cap_mask)
 +		hfi1_cap_mask_chg(ibp);
 +	if (port_modify_mask & IB_PORT_SHUTDOWN) {
 +		set_link_down_reason(ppd, OPA_LINKDOWN_REASON_UNKNOWN, 0,
 +		  OPA_LINKDOWN_REASON_UNKNOWN);
 +		ret = set_link_state(ppd, HLS_DN_DOWNDEF);
 +	}
 +	if (port_modify_mask & IB_PORT_RESET_QKEY_CNTR)
 +		ibp->qkey_violations = 0;
++=======
+ 	set_link_down_reason(ppd, OPA_LINKDOWN_REASON_UNKNOWN, 0,
+ 			     OPA_LINKDOWN_REASON_UNKNOWN);
+ 	ret = set_link_state(ppd, HLS_DN_DOWNDEF);
++>>>>>>> 45b59eefcca9 (staging/rdma/hfi1: Remove modify_port and port_immutable functions):drivers/staging/rdma/hfi1/verbs.c
  	return ret;
  }
  
@@@ -1913,100 -1487,88 +1927,179 @@@ int hfi1_register_ib_device(struct hfi1
  	strlcpy(ibdev->name + lcpysz, "_%d", IB_DEVICE_NAME_MAX - lcpysz);
  	ibdev->owner = THIS_MODULE;
  	ibdev->node_guid = cpu_to_be64(ppd->guid);
 +	ibdev->uverbs_abi_ver = HFI1_UVERBS_ABI_VERSION;
 +	ibdev->uverbs_cmd_mask =
 +		(1ull << IB_USER_VERBS_CMD_GET_CONTEXT)         |
 +		(1ull << IB_USER_VERBS_CMD_QUERY_DEVICE)        |
 +		(1ull << IB_USER_VERBS_CMD_QUERY_PORT)          |
 +		(1ull << IB_USER_VERBS_CMD_ALLOC_PD)            |
 +		(1ull << IB_USER_VERBS_CMD_DEALLOC_PD)          |
 +		(1ull << IB_USER_VERBS_CMD_CREATE_AH)           |
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_AH)           |
 +		(1ull << IB_USER_VERBS_CMD_QUERY_AH)            |
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_AH)          |
 +		(1ull << IB_USER_VERBS_CMD_REG_MR)              |
 +		(1ull << IB_USER_VERBS_CMD_DEREG_MR)            |
 +		(1ull << IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL) |
 +		(1ull << IB_USER_VERBS_CMD_CREATE_CQ)           |
 +		(1ull << IB_USER_VERBS_CMD_RESIZE_CQ)           |
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_CQ)          |
 +		(1ull << IB_USER_VERBS_CMD_POLL_CQ)             |
 +		(1ull << IB_USER_VERBS_CMD_REQ_NOTIFY_CQ)       |
 +		(1ull << IB_USER_VERBS_CMD_CREATE_QP)           |
 +		(1ull << IB_USER_VERBS_CMD_QUERY_QP)            |
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_QP)           |
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_QP)          |
 +		(1ull << IB_USER_VERBS_CMD_POST_SEND)           |
 +		(1ull << IB_USER_VERBS_CMD_POST_RECV)           |
 +		(1ull << IB_USER_VERBS_CMD_ATTACH_MCAST)        |
 +		(1ull << IB_USER_VERBS_CMD_DETACH_MCAST)        |
 +		(1ull << IB_USER_VERBS_CMD_CREATE_SRQ)          |
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_SRQ)          |
 +		(1ull << IB_USER_VERBS_CMD_QUERY_SRQ)           |
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ)         |
 +		(1ull << IB_USER_VERBS_CMD_POST_SRQ_RECV);
 +	ibdev->node_type = RDMA_NODE_IB_CA;
  	ibdev->phys_port_cnt = dd->num_pports;
 +	ibdev->num_comp_vectors = 1;
  	ibdev->dma_device = &dd->pcidev->dev;
 +	ibdev->query_device = query_device;
  	ibdev->modify_device = modify_device;
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	ibdev->query_port = query_port;
 +	ibdev->modify_port = modify_port;
 +	ibdev->query_pkey = NULL;
 +	ibdev->query_gid = query_gid;
 +	ibdev->alloc_ucontext = alloc_ucontext;
 +	ibdev->dealloc_ucontext = dealloc_ucontext;
 +	ibdev->alloc_pd = NULL;
 +	ibdev->dealloc_pd = NULL;
 +	ibdev->create_ah = create_ah;
 +	ibdev->destroy_ah = destroy_ah;
 +	ibdev->modify_ah = modify_ah;
 +	ibdev->query_ah = query_ah;
 +	ibdev->create_srq = hfi1_create_srq;
 +	ibdev->modify_srq = hfi1_modify_srq;
 +	ibdev->query_srq = hfi1_query_srq;
 +	ibdev->destroy_srq = hfi1_destroy_srq;
 +	ibdev->create_qp = hfi1_create_qp;
 +	ibdev->modify_qp = hfi1_modify_qp;
 +	ibdev->query_qp = hfi1_query_qp;
 +	ibdev->destroy_qp = hfi1_destroy_qp;
 +	ibdev->post_send = post_send;
 +	ibdev->post_recv = post_receive;
 +	ibdev->post_srq_recv = hfi1_post_srq_receive;
 +	ibdev->create_cq = hfi1_create_cq;
 +	ibdev->destroy_cq = hfi1_destroy_cq;
 +	ibdev->resize_cq = hfi1_resize_cq;
 +	ibdev->poll_cq = hfi1_poll_cq;
 +	ibdev->req_notify_cq = hfi1_req_notify_cq;
 +	ibdev->get_dma_mr = hfi1_get_dma_mr;
 +	ibdev->reg_phys_mr = hfi1_reg_phys_mr;
 +	ibdev->reg_user_mr = hfi1_reg_user_mr;
 +	ibdev->dereg_mr = hfi1_dereg_mr;
 +	ibdev->alloc_mr = hfi1_alloc_mr;
 +	ibdev->alloc_fast_reg_page_list = hfi1_alloc_fast_reg_page_list;
 +	ibdev->free_fast_reg_page_list = hfi1_free_fast_reg_page_list;
 +	ibdev->alloc_fmr = hfi1_alloc_fmr;
 +	ibdev->map_phys_fmr = hfi1_map_phys_fmr;
 +	ibdev->unmap_fmr = hfi1_unmap_fmr;
 +	ibdev->dealloc_fmr = hfi1_dealloc_fmr;
 +	ibdev->attach_mcast = hfi1_multicast_attach;
 +	ibdev->detach_mcast = hfi1_multicast_detach;
 +	ibdev->process_mad = hfi1_process_mad;
 +	ibdev->mmap = hfi1_mmap;
 +	ibdev->dma_ops = &hfi1_dma_mapping_ops;
 +	ibdev->get_port_immutable = port_immutable;
++=======
+ 
+ 	/* keep process mad in the driver */
+ 	ibdev->process_mad = hfi1_process_mad;
++>>>>>>> 45b59eefcca9 (staging/rdma/hfi1: Remove modify_port and port_immutable functions):drivers/staging/rdma/hfi1/verbs.c
  
  	strncpy(ibdev->node_desc, init_utsname()->nodename,
  		sizeof(ibdev->node_desc));
  
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	ret = ib_register_device(ibdev, hfi1_create_port_files);
++=======
+ 	/*
+ 	 * Fill in rvt info object.
+ 	 */
+ 	dd->verbs_dev.rdi.driver_f.port_callback = hfi1_create_port_files;
+ 	dd->verbs_dev.rdi.driver_f.get_card_name = get_card_name;
+ 	dd->verbs_dev.rdi.driver_f.get_pci_dev = get_pci_dev;
+ 	dd->verbs_dev.rdi.driver_f.check_ah = hfi1_check_ah;
+ 	dd->verbs_dev.rdi.driver_f.notify_new_ah = hfi1_notify_new_ah;
+ 	dd->verbs_dev.rdi.driver_f.get_guid_be = hfi1_get_guid_be;
+ 	dd->verbs_dev.rdi.driver_f.query_port_state = query_port;
+ 	dd->verbs_dev.rdi.driver_f.shut_down_port = shut_down_port;
+ 	dd->verbs_dev.rdi.driver_f.cap_mask_chg = hfi1_cap_mask_chg;
+ 	/*
+ 	 * Fill in rvt info device attributes.
+ 	 */
+ 	hfi1_fill_device_attr(dd);
+ 
+ 	/* queue pair */
+ 	dd->verbs_dev.rdi.dparms.qp_table_size = hfi1_qp_table_size;
+ 	dd->verbs_dev.rdi.dparms.qpn_start = 0;
+ 	dd->verbs_dev.rdi.dparms.qpn_inc = 1;
+ 	dd->verbs_dev.rdi.dparms.qos_shift = dd->qos_shift;
+ 	dd->verbs_dev.rdi.dparms.qpn_res_start = kdeth_qp << 16;
+ 	dd->verbs_dev.rdi.dparms.qpn_res_end =
+ 	dd->verbs_dev.rdi.dparms.qpn_res_start + 65535;
+ 	dd->verbs_dev.rdi.dparms.max_rdma_atomic = HFI1_MAX_RDMA_ATOMIC;
+ 	dd->verbs_dev.rdi.dparms.psn_mask = PSN_MASK;
+ 	dd->verbs_dev.rdi.dparms.psn_shift = PSN_SHIFT;
+ 	dd->verbs_dev.rdi.dparms.psn_modify_mask = PSN_MODIFY_MASK;
+ 	dd->verbs_dev.rdi.dparms.core_cap_flags = RDMA_CORE_PORT_INTEL_OPA;
+ 	dd->verbs_dev.rdi.dparms.max_mad_size = OPA_MGMT_MAD_SIZE;
+ 
+ 	dd->verbs_dev.rdi.driver_f.qp_priv_alloc = qp_priv_alloc;
+ 	dd->verbs_dev.rdi.driver_f.qp_priv_free = qp_priv_free;
+ 	dd->verbs_dev.rdi.driver_f.free_all_qps = free_all_qps;
+ 	dd->verbs_dev.rdi.driver_f.notify_qp_reset = notify_qp_reset;
+ 	dd->verbs_dev.rdi.driver_f.do_send = hfi1_do_send;
+ 	dd->verbs_dev.rdi.driver_f.schedule_send = hfi1_schedule_send;
+ 	dd->verbs_dev.rdi.driver_f.get_pmtu_from_attr = get_pmtu_from_attr;
+ 	dd->verbs_dev.rdi.driver_f.notify_error_qp = notify_error_qp;
+ 	dd->verbs_dev.rdi.driver_f.flush_qp_waiters = flush_qp_waiters;
+ 	dd->verbs_dev.rdi.driver_f.stop_send_queue = stop_send_queue;
+ 	dd->verbs_dev.rdi.driver_f.quiesce_qp = quiesce_qp;
+ 	dd->verbs_dev.rdi.driver_f.notify_error_qp = notify_error_qp;
+ 	dd->verbs_dev.rdi.driver_f.mtu_from_qp = mtu_from_qp;
+ 	dd->verbs_dev.rdi.driver_f.mtu_to_path_mtu = mtu_to_path_mtu;
+ 	dd->verbs_dev.rdi.driver_f.check_modify_qp = hfi1_check_modify_qp;
+ 	dd->verbs_dev.rdi.driver_f.modify_qp = hfi1_modify_qp;
+ 	dd->verbs_dev.rdi.driver_f.check_send_wr = hfi1_check_send_wr;
+ 
+ 	/* completeion queue */
+ 	snprintf(dd->verbs_dev.rdi.dparms.cq_name,
+ 		 sizeof(dd->verbs_dev.rdi.dparms.cq_name),
+ 		 "hfi1_cq%d", dd->unit);
+ 	dd->verbs_dev.rdi.dparms.node = dd->node;
+ 
+ 	/* misc settings */
+ 	dd->verbs_dev.rdi.flags = 0; /* Let rdmavt handle it all */
+ 	dd->verbs_dev.rdi.dparms.lkey_table_size = hfi1_lkey_table_size;
+ 	dd->verbs_dev.rdi.dparms.nports = dd->num_pports;
+ 	dd->verbs_dev.rdi.dparms.npkeys = hfi1_get_npkeys(dd);
+ 
+ 	ppd = dd->pport;
+ 	for (i = 0; i < dd->num_pports; i++, ppd++)
+ 		rvt_init_port(&dd->verbs_dev.rdi,
+ 			      &ppd->ibport_data.rvp,
+ 			      i,
+ 			      ppd->pkeys);
+ 
+ 	ret = rvt_register_device(&dd->verbs_dev.rdi);
++>>>>>>> 45b59eefcca9 (staging/rdma/hfi1: Remove modify_port and port_immutable functions):drivers/staging/rdma/hfi1/verbs.c
  	if (ret)
 -		goto err_verbs_txreq;
 +		goto err_reg;
 +
 +	ret = hfi1_create_agents(dev);
 +	if (ret)
 +		goto err_agents;
  
  	ret = hfi1_verbs_register_sysfs(dd);
  	if (ret)
* Unmerged path drivers/staging/rdma/hfi1/verbs.h
diff --git a/drivers/staging/hfi1/hfi.h b/drivers/staging/hfi1/hfi.h
index f80d2d19b4e5..c3ac3a4f7ec2 100644
--- a/drivers/staging/hfi1/hfi.h
+++ b/drivers/staging/hfi1/hfi.h
@@ -1512,6 +1512,11 @@ static inline struct hfi1_pportdata *ppd_from_ibp(struct hfi1_ibport *ibp)
 	return container_of(ibp, struct hfi1_pportdata, ibport_data);
 }
 
+static inline struct hfi1_ibdev *dev_from_rdi(struct rvt_dev_info *rdi)
+{
+	return container_of(rdi, struct hfi1_ibdev, rdi);
+}
+
 static inline struct hfi1_ibport *to_iport(struct ib_device *ibdev, u8 port)
 {
 	struct hfi1_devdata *dd = dd_from_ibdev(ibdev);
diff --git a/drivers/staging/hfi1/mad.c b/drivers/staging/hfi1/mad.c
index 2f77da10954b..f1a312d45856 100644
--- a/drivers/staging/hfi1/mad.c
+++ b/drivers/staging/hfi1/mad.c
@@ -233,9 +233,12 @@ static void bad_mkey(struct hfi1_ibport *ibp, struct ib_mad_hdr *mad,
 /*
  * Send a Port Capability Mask Changed trap (ch. 14.3.11).
  */
-void hfi1_cap_mask_chg(struct hfi1_ibport *ibp)
+void hfi1_cap_mask_chg(struct rvt_dev_info *rdi, u8 port_num)
 {
 	struct opa_mad_notice_attr data;
+	struct hfi1_ibdev *verbs_dev = dev_from_rdi(rdi);
+	struct hfi1_devdata *dd = dd_from_dev(verbs_dev);
+	struct hfi1_ibport *ibp = &dd->pport[port_num - 1].ibport_data;
 	u32 lid = ppd_from_ibp(ibp)->lid;
 
 	memset(&data, 0, sizeof(data));
* Unmerged path drivers/staging/hfi1/verbs.c
* Unmerged path drivers/staging/rdma/hfi1/verbs.h
