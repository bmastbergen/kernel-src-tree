ipv4: fix reply_dst leakage on arp reply

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Benc <jbenc@redhat.com>
commit 181a4224acdfb993a21f987f8617b5c8d7bc654e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/181a4224.failed

There are cases when the created metadata reply is not used. Ensure the
allocated memory is freed also in such cases.

Fixes: 63d008a4e9ee ("ipv4: send arp replies to the correct tunnel")
	Reported-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Signed-off-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 181a4224acdfb993a21f987f8617b5c8d7bc654e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/arp.c
diff --cc net/ipv4/arp.c
index eb2b67ce4b84,0c9c3482e419..000000000000
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@@ -320,6 -293,39 +320,42 @@@ static void arp_error_report(struct nei
  	kfree_skb(skb);
  }
  
++<<<<<<< HEAD
++=======
+ /* Create and send an arp packet. */
+ static void arp_send_dst(int type, int ptype, __be32 dest_ip,
+ 			 struct net_device *dev, __be32 src_ip,
+ 			 const unsigned char *dest_hw,
+ 			 const unsigned char *src_hw,
+ 			 const unsigned char *target_hw,
+ 			 struct dst_entry *dst)
+ {
+ 	struct sk_buff *skb;
+ 
+ 	/* arp on this interface. */
+ 	if (dev->flags & IFF_NOARP)
+ 		return;
+ 
+ 	skb = arp_create(type, ptype, dest_ip, dev, src_ip,
+ 			 dest_hw, src_hw, target_hw);
+ 	if (!skb)
+ 		return;
+ 
+ 	skb_dst_set(skb, dst_clone(dst));
+ 	arp_xmit(skb);
+ }
+ 
+ void arp_send(int type, int ptype, __be32 dest_ip,
+ 	      struct net_device *dev, __be32 src_ip,
+ 	      const unsigned char *dest_hw, const unsigned char *src_hw,
+ 	      const unsigned char *target_hw)
+ {
+ 	arp_send_dst(type, ptype, dest_ip, dev, src_ip, dest_hw, src_hw,
+ 		     target_hw, NULL);
+ }
+ EXPORT_SYMBOL(arp_send);
+ 
++>>>>>>> 181a4224acdf (ipv4: fix reply_dst leakage on arp reply)
  static void arp_solicit(struct neighbour *neigh, struct sk_buff *skb)
  {
  	__be32 saddr = 0;
@@@ -375,8 -383,10 +411,15 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	arp_send(ARPOP_REQUEST, ETH_P_ARP, target, dev, saddr,
 +		 dst_hw, dev->dev_addr, NULL);
++=======
+ 	if (skb && !(dev->priv_flags & IFF_XMIT_DST_RELEASE))
+ 		dst = skb_dst(skb);
+ 	arp_send_dst(ARPOP_REQUEST, ETH_P_ARP, target, dev, saddr,
+ 		     dst_hw, dev->dev_addr, NULL, dst);
++>>>>>>> 181a4224acdf (ipv4: fix reply_dst leakage on arp reply)
  }
  
  static int arp_ignore(struct in_device *in_dev, __be32 sip, __be32 tip)
* Unmerged path net/ipv4/arp.c
