mmc: tmio: tmio_mmc_host has .clk_enable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 4fe2ec57a15f98c232536cf04e7c139d830955d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4fe2ec57.failed

Current .clk_enable is implemented under tmio_mmc_data.
It goes to tmio_mmc_host by this patch.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	Acked-by: Lee Jones <lee.jones@linaro.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 4fe2ec57a15f98c232536cf04e7c139d830955d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sh_mobile_sdhi.c
#	drivers/mmc/host/tmio_mmc.h
#	drivers/mmc/host/tmio_mmc_pio.c
diff --cc drivers/mmc/host/sh_mobile_sdhi.c
index 79ee6f0c45bd,87af77dd660b..000000000000
--- a/drivers/mmc/host/sh_mobile_sdhi.c
+++ b/drivers/mmc/host/sh_mobile_sdhi.c
@@@ -154,10 -207,19 +154,23 @@@ static int sh_mobile_sdhi_probe(struct 
  		goto eclkget;
  	}
  
++<<<<<<< HEAD
 +	mmc_data->clk_enable = sh_mobile_sdhi_clk_enable;
++=======
+ 	host = tmio_mmc_host_alloc(pdev);
+ 	if (!host) {
+ 		ret = -ENOMEM;
+ 		goto eprobe;
+ 	}
+ 
+ 	host->dma		= dma_priv;
+ 	host->write16_hook	= sh_mobile_sdhi_write16_hook;
+ 	host->clk_enable	= sh_mobile_sdhi_clk_enable;
+ 
++>>>>>>> 4fe2ec57a15f (mmc: tmio: tmio_mmc_host has .clk_enable)
  	mmc_data->clk_disable = sh_mobile_sdhi_clk_disable;
  	mmc_data->capabilities = MMC_CAP_MMC_HIGHSPEED;
 -	mmc_data->multi_io_quirk = sh_mobile_sdhi_multi_io_quirk;
 +	mmc_data->write16_hook = sh_mobile_sdhi_write16_hook;
  	if (p) {
  		mmc_data->flags = p->tmio_flags;
  		mmc_data->ocr_mask = p->tmio_ocr_mask;
diff --cc drivers/mmc/host/tmio_mmc.h
index d857f5c6e7d9,5cd298665b94..000000000000
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@@ -85,10 -93,15 +85,17 @@@ struct tmio_mmc_host 
  	unsigned long		last_req_ts;
  	struct mutex		ios_lock;	/* protect set_ios() context */
  	bool			native_hotplug;
++<<<<<<< HEAD
++=======
+ 	bool			sdio_irq_enabled;
+ 
+ 	int (*write16_hook)(struct tmio_mmc_host *host, int addr);
+ 	int (*clk_enable)(struct platform_device *pdev, unsigned int *f);
++>>>>>>> 4fe2ec57a15f (mmc: tmio: tmio_mmc_host has .clk_enable)
  };
  
 -struct tmio_mmc_host *tmio_mmc_host_alloc(struct platform_device *pdev);
 -void tmio_mmc_host_free(struct tmio_mmc_host *host);
 -int tmio_mmc_host_probe(struct tmio_mmc_host *host,
 +int tmio_mmc_host_probe(struct tmio_mmc_host **host,
 +			struct platform_device *pdev,
  			struct tmio_mmc_data *pdata);
  void tmio_mmc_host_remove(struct tmio_mmc_host *host);
  void tmio_mmc_do_data_irq(struct tmio_mmc_host *host);
diff --cc drivers/mmc/host/tmio_mmc_pio.c
index d5da81365223,38bcf0ca31c5..000000000000
--- a/drivers/mmc/host/tmio_mmc_pio.c
+++ b/drivers/mmc/host/tmio_mmc_pio.c
@@@ -752,18 -827,20 +752,22 @@@ fail
  	host->mrq = NULL;
  	mrq->cmd->error = ret;
  	mmc_request_done(mmc, mrq);
 -
 -	pm_runtime_mark_last_busy(mmc_dev(mmc));
 -	pm_runtime_put_autosuspend(mmc_dev(mmc));
  }
  
 -static int tmio_mmc_clk_update(struct tmio_mmc_host *host)
 +static int tmio_mmc_clk_update(struct mmc_host *mmc)
  {
++<<<<<<< HEAD
 +	struct tmio_mmc_host *host = mmc_priv(mmc);
 +	struct tmio_mmc_data *pdata = host->pdata;
++=======
+ 	struct mmc_host *mmc = host->mmc;
++>>>>>>> 4fe2ec57a15f (mmc: tmio: tmio_mmc_host has .clk_enable)
  	int ret;
  
- 	if (!pdata->clk_enable)
+ 	if (!host->clk_enable)
  		return -ENOTSUPP;
  
- 	ret = pdata->clk_enable(host->pdev, &mmc->f_max);
+ 	ret = host->clk_enable(host->pdev, &mmc->f_max);
  	if (!ret)
  		mmc->f_min = mmc->f_max / 512;
  
* Unmerged path drivers/mmc/host/sh_mobile_sdhi.c
* Unmerged path drivers/mmc/host/tmio_mmc.h
* Unmerged path drivers/mmc/host/tmio_mmc_pio.c
diff --git a/include/linux/mfd/tmio.h b/include/linux/mfd/tmio.h
index 38409958f913..899ed464302a 100644
--- a/include/linux/mfd/tmio.h
+++ b/include/linux/mfd/tmio.h
@@ -111,7 +111,6 @@ struct tmio_mmc_data {
 	void (*set_clk_div)(struct platform_device *host, int state);
 	int (*write16_hook)(struct tmio_mmc_host *host, int addr);
 	/* clock management callbacks */
-	int (*clk_enable)(struct platform_device *pdev, unsigned int *f);
 	void (*clk_disable)(struct platform_device *pdev);
 	int (*multi_io_quirk)(struct mmc_card *card,
 			      unsigned int direction, int blk_size);
