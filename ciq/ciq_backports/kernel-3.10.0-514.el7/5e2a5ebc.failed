cxgb4: Add HW timesptamp support for RX

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit 5e2a5ebc3f94027d0f2ffd33d3f3adbc856775d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/5e2a5ebc.failed

Adds support for ethtool get time stamp ioctl, which is used by
tcpdump to get the supported time stamp types

eg: tcpdump -i eth5 -J
Time stamp types for eth5 (use option -j to set):
  host (Host)
  adapter_unsynced (Adapter, not synced with system time)

Adds support for adapter unsynced mode, by adding SIOCSHWTSTAMP support
in driver.

	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5e2a5ebc3f94027d0f2ffd33d3f3adbc856775d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
#	drivers/net/ethernet/chelsio/cxgb4/sge.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
index 17d67dc9b0fa,634e50c8c5ef..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
@@@ -462,6 -476,11 +463,14 @@@ struct port_info 
  #ifdef CONFIG_CHELSIO_T4_DCB
  	struct port_dcb_info dcb;     /* Data Center Bridging support */
  #endif
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CHELSIO_T4_FCOE
+ 	struct cxgb_fcoe fcoe;
+ #endif /* CONFIG_CHELSIO_T4_FCOE */
+ 	bool rxtstamp;  /* Enable TS */
+ 	struct hwtstamp_config tstamp_config;
++>>>>>>> 5e2a5ebc3f94 (cxgb4: Add HW timesptamp support for RX)
  };
  
  struct dentry;
diff --cc drivers/net/ethernet/chelsio/cxgb4/sge.c
index 106fc9f1da68,b7b93e7a643d..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@@ -1818,6 -1904,7 +1845,10 @@@ int t4_ethrx_handler(struct sge_rspq *q
  	struct sge *s = &q->adap->sge;
  	int cpl_trace_pkt = is_t4(q->adap->params.chip) ?
  			    CPL_TRACE_PKT : CPL_TRACE_PKT_T5;
++<<<<<<< HEAD
++=======
+ 	struct port_info *pi;
++>>>>>>> 5e2a5ebc3f94 (cxgb4: Add HW timesptamp support for RX)
  
  	if (unlikely(*(u8 *)rsp == cpl_trace_pkt))
  		return handle_trace_pkt(q->adap, si);
@@@ -1858,8 -1949,23 +1893,26 @@@
  			skb->ip_summed = CHECKSUM_COMPLETE;
  			rxq->stats.rx_cso++;
  		}
 -	} else {
 +	} else
  		skb_checksum_none_assert(skb);
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CHELSIO_T4_FCOE
+ #define CPL_RX_PKT_FLAGS (RXF_PSH_F | RXF_SYN_F | RXF_UDP_F | \
+ 			  RXF_TCP_F | RXF_IP_F | RXF_IP6_F | RXF_LRO_F)
+ 
+ 		if (!(pkt->l2info & cpu_to_be32(CPL_RX_PKT_FLAGS))) {
+ 			if ((pkt->l2info & cpu_to_be32(RXF_FCOE_F)) &&
+ 			    (pi->fcoe.flags & CXGB_FCOE_ENABLED)) {
+ 				if (!(pkt->err_vec & cpu_to_be16(RXERR_CSUM_F)))
+ 					skb->ip_summed = CHECKSUM_UNNECESSARY;
+ 			}
+ 		}
+ 
+ #undef CPL_RX_PKT_FLAGS
+ #endif /* CONFIG_CHELSIO_T4_FCOE */
+ 	}
++>>>>>>> 5e2a5ebc3f94 (cxgb4: Add HW timesptamp support for RX)
  
  	if (unlikely(pkt->vlan_ex)) {
  		__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q), ntohs(pkt->vlan));
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c
index 3d6cc515f98f..df7a3b49d5bb 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c
@@ -961,6 +961,20 @@ static int set_flash(struct net_device *netdev, struct ethtool_flash *ef)
 	return ret;
 }
 
+static int get_ts_info(struct net_device *dev, struct ethtool_ts_info *ts_info)
+{
+	ts_info->so_timestamping = SOF_TIMESTAMPING_TX_SOFTWARE |
+				   SOF_TIMESTAMPING_RX_SOFTWARE |
+				   SOF_TIMESTAMPING_SOFTWARE;
+
+	ts_info->so_timestamping |= SOF_TIMESTAMPING_RX_HARDWARE |
+				    SOF_TIMESTAMPING_RAW_HARDWARE;
+
+	ts_info->phc_index = -1;
+
+	return 0;
+}
+
 static u32 get_rss_table_size(struct net_device *dev)
 {
 	const struct port_info *pi = netdev_priv(dev);
@@ -1095,6 +1109,7 @@ static const struct ethtool_ops cxgb_ethtool_ops = {
 	.get_rxfh	   = get_rss_table,
 	.set_rxfh	   = set_rss_table,
 	.flash_device      = set_flash,
+	.get_ts_info       = get_ts_info
 };
 
 void cxgb4_set_ethtool_ops(struct net_device *netdev)
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index f6e40fcf55af..64f4d9baf657 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@ -2939,6 +2939,30 @@ static int cxgb_ioctl(struct net_device *dev, struct ifreq *req, int cmd)
 			ret = t4_mdio_wr(pi->adapter, mbox, prtad, devad,
 					 data->reg_num, data->val_in);
 		break;
+	case SIOCGHWTSTAMP:
+		return copy_to_user(req->ifr_data, &pi->tstamp_config,
+				    sizeof(pi->tstamp_config)) ?
+			-EFAULT : 0;
+	case SIOCSHWTSTAMP:
+		if (copy_from_user(&pi->tstamp_config, req->ifr_data,
+				   sizeof(pi->tstamp_config)))
+			return -EFAULT;
+
+		switch (pi->tstamp_config.rx_filter) {
+		case HWTSTAMP_FILTER_NONE:
+			pi->rxtstamp = false;
+			break;
+		case HWTSTAMP_FILTER_ALL:
+			pi->rxtstamp = true;
+			break;
+		default:
+			pi->tstamp_config.rx_filter = HWTSTAMP_FILTER_NONE;
+			return -ERANGE;
+		}
+
+		return copy_to_user(req->ifr_data, &pi->tstamp_config,
+				    sizeof(pi->tstamp_config)) ?
+			-EFAULT : 0;
 	default:
 		return -EOPNOTSUPP;
 	}
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sge.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h
index 640369df8b3a..13708fde1668 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h
@@ -263,4 +263,9 @@ enum {
 #undef FLASH_START
 #undef FLASH_MAX_SIZE
 
+#define SGE_TIMESTAMP_S 0
+#define SGE_TIMESTAMP_M 0xfffffffffffffffULL
+#define SGE_TIMESTAMP_V(x) ((__u64)(x) << SGE_TIMESTAMP_S)
+#define SGE_TIMESTAMP_G(x) (((__u64)(x) >> SGE_TIMESTAMP_S) & SGE_TIMESTAMP_M)
+
 #endif /* __T4_HW_H */
