vxlan: reduce usage of synchronize_net in ndo_stop

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Hannes Frederic Sowa <hannes@stressinduktion.org>
commit 544a773a01828e3cc3b553721f68d880d0d27a97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/544a773a.failed

We only need to do the synchronize_net dance once for both, ipv4 and
ipv6 sockets, thus removing one synchronize_net in case both sockets get
dismantled.

	Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 544a773a01828e3cc3b553721f68d880d0d27a97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/vxlan.c
diff --cc drivers/net/vxlan.c
index 9215c93ac7ca,a7112b3bc9b4..000000000000
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@@ -1051,23 -1037,45 +1051,58 @@@ static bool vxlan_group_used(struct vxl
  	return false;
  }
  
++<<<<<<< HEAD
 +void vxlan_sock_release(struct vxlan_sock *vs)
++=======
+ static bool __vxlan_sock_release_prep(struct vxlan_sock *vs)
++>>>>>>> 544a773a0182 (vxlan: reduce usage of synchronize_net in ndo_stop)
  {
 -	struct vxlan_net *vn;
 +	struct sock *sk = vs->sock->sk;
 +	struct net *net = sock_net(sk);
 +	struct vxlan_net *vn = net_generic(net, vxlan_net_id);
  
++<<<<<<< HEAD
++=======
+ 	if (!vs)
+ 		return false;
++>>>>>>> 544a773a0182 (vxlan: reduce usage of synchronize_net in ndo_stop)
  	if (!atomic_dec_and_test(&vs->refcnt))
- 		return;
+ 		return false;
  
 -	vn = net_generic(sock_net(vs->sock->sk), vxlan_net_id);
  	spin_lock(&vn->sock_lock);
  	hlist_del_rcu(&vs->hlist);
  	vxlan_notify_del_rx_port(vs);
  	spin_unlock(&vn->sock_lock);
  
++<<<<<<< HEAD
 +	queue_work(vxlan_wq, &vs->del_work);
++=======
+ 	return true;
+ }
+ 
+ static void vxlan_sock_release(struct vxlan_dev *vxlan)
+ {
+ 	bool ipv4 = __vxlan_sock_release_prep(vxlan->vn4_sock);
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	bool ipv6 = __vxlan_sock_release_prep(vxlan->vn6_sock);
+ #endif
+ 
+ 	synchronize_net();
+ 
+ 	if (ipv4) {
+ 		udp_tunnel_sock_release(vxlan->vn4_sock->sock);
+ 		kfree(vxlan->vn4_sock);
+ 	}
+ 
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	if (ipv6) {
+ 		udp_tunnel_sock_release(vxlan->vn6_sock->sock);
+ 		kfree(vxlan->vn6_sock);
+ 	}
+ #endif
++>>>>>>> 544a773a0182 (vxlan: reduce usage of synchronize_net in ndo_stop)
  }
 +EXPORT_SYMBOL_GPL(vxlan_sock_release);
  
  /* Update multicast group membership when first VNI on
   * multicast address is brought up
* Unmerged path drivers/net/vxlan.c
