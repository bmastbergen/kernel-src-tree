drivers/net: Convert uses of compare_ether_addr to ether_addr_equal

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Joe Perches <joe@perches.com>
commit 7367d0b573d149550d2ae25c402984b98f8f422e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7367d0b5.failed

Use the new bool function ether_addr_equal to add
some clarity and reduce the likelihood for misuse
of compare_ether_addr for sorting.

Done via cocci script: (and a little typing)

$ cat compare_ether_addr.cocci
@@
expression a,b;
@@
-	!compare_ether_addr(a, b)
+	ether_addr_equal(a, b)

@@
expression a,b;
@@
-	compare_ether_addr(a, b)
+	!ether_addr_equal(a, b)

@@
expression a,b;
@@
-	!ether_addr_equal(a, b) == 0
+	ether_addr_equal(a, b)

@@
expression a,b;
@@
-	!ether_addr_equal(a, b) != 0
+	!ether_addr_equal(a, b)

@@
expression a,b;
@@
-	ether_addr_equal(a, b) == 0
+	!ether_addr_equal(a, b)

@@
expression a,b;
@@
-	ether_addr_equal(a, b) != 0
+	ether_addr_equal(a, b)

@@
expression a,b;
@@
-	!!ether_addr_equal(a, b)
+	ether_addr_equal(a, b)

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7367d0b573d149550d2ae25c402984b98f8f422e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
#	drivers/net/wireless/ath/carl9170/rx.c
#	drivers/net/wireless/rt2x00/rt2x00dev.c
#	drivers/net/wireless/rtlwifi/ps.c
#	drivers/net/wireless/rtlwifi/rtl8188ee/trx.c
#	drivers/net/wireless/rtlwifi/rtl8723ae/trx.c
diff --cc drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index 5edcc4fd4be3,59a62bbfb371..000000000000
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@@ -961,32 -487,41 +961,37 @@@ static int ixgbevf_clean_rx_irq(struct 
  		/* Workaround hardware that can't do proper VEPA multicast
  		 * source pruning.
  		 */
++<<<<<<< HEAD
 +		if ((skb->pkt_type == PACKET_BROADCAST ||
 +		     skb->pkt_type == PACKET_MULTICAST) &&
 +		    ether_addr_equal(rx_ring->netdev->dev_addr,
++=======
+ 		if ((skb->pkt_type & (PACKET_BROADCAST | PACKET_MULTICAST)) &&
+ 		    ether_addr_equal(adapter->netdev->dev_addr,
++>>>>>>> 7367d0b573d1 (drivers/net: Convert uses of compare_ether_addr to ether_addr_equal)
  				     eth_hdr(skb)->h_source)) {
  			dev_kfree_skb_irq(skb);
 -			goto next_desc;
 +			continue;
  		}
  
 -		ixgbevf_receive_skb(q_vector, skb, staterr, rx_desc);
 +		/* populate checksum, VLAN, and protocol */
 +		ixgbevf_process_skb_fields(rx_ring, rx_desc, skb);
  
 -next_desc:
 -		rx_desc->wb.upper.status_error = 0;
 +		ixgbevf_rx_skb(q_vector, skb);
  
 -		/* return some buffers to hardware, one at a time is too slow */
 -		if (cleaned_count >= IXGBEVF_RX_BUFFER_WRITE) {
 -			ixgbevf_alloc_rx_buffers(adapter, rx_ring,
 -						 cleaned_count);
 -			cleaned_count = 0;
 -		}
 -
 -		/* use prefetched values */
 -		rx_desc = next_rxd;
 -		rx_buffer_info = &rx_ring->rx_buffer_info[i];
 +		/* reset skb pointer */
 +		skb = NULL;
  
 -		staterr = le32_to_cpu(rx_desc->wb.upper.status_error);
 +		/* update budget accounting */
 +		total_rx_packets++;
  	}
  
 -	rx_ring->next_to_clean = i;
 -	cleaned_count = IXGBE_DESC_UNUSED(rx_ring);
 -
 -	if (cleaned_count)
 -		ixgbevf_alloc_rx_buffers(adapter, rx_ring, cleaned_count);
 +	/* place incomplete frames back on ring for completion */
 +	rx_ring->skb = skb;
  
  	u64_stats_update_begin(&rx_ring->syncp);
 -	rx_ring->total_packets += total_rx_packets;
 -	rx_ring->total_bytes += total_rx_bytes;
 +	rx_ring->stats.packets += total_rx_packets;
 +	rx_ring->stats.bytes += total_rx_bytes;
  	u64_stats_update_end(&rx_ring->syncp);
  	q_vector->rx.total_packets += total_rx_packets;
  	q_vector->rx.total_bytes += total_rx_bytes;
diff --cc drivers/net/wireless/ath/carl9170/rx.c
index 924135b8e575,e935f61c7fad..000000000000
--- a/drivers/net/wireless/ath/carl9170/rx.c
+++ b/drivers/net/wireless/ath/carl9170/rx.c
@@@ -598,8 -602,8 +598,13 @@@ static void carl9170_ba_check(struct ar
  
  		if (bar->start_seq_num == entry_bar->start_seq_num &&
  		    TID_CHECK(bar->control, entry_bar->control) &&
++<<<<<<< HEAD
 +		    ether_addr_equal_64bits(bar->ra, entry_bar->ta) &&
 +		    ether_addr_equal_64bits(bar->ta, entry_bar->ra)) {
++=======
+ 		    ether_addr_equal(bar->ra, entry_bar->ta) &&
+ 		    ether_addr_equal(bar->ta, entry_bar->ra)) {
++>>>>>>> 7367d0b573d1 (drivers/net: Convert uses of compare_ether_addr to ether_addr_equal)
  			struct ieee80211_tx_info *tx_info;
  
  			tx_info = IEEE80211_SKB_CB(entry_skb);
diff --cc drivers/net/wireless/rt2x00/rt2x00dev.c
index 5639ed816813,712eea9d398f..000000000000
--- a/drivers/net/wireless/rt2x00/rt2x00dev.c
+++ b/drivers/net/wireless/rt2x00/rt2x00dev.c
@@@ -568,10 -566,10 +568,17 @@@ static void rt2x00lib_rxdone_check_ba(s
  
  #undef TID_CHECK
  
++<<<<<<< HEAD
 +		if (!ether_addr_equal_64bits(ba->ra, entry->ta))
 +			continue;
 +
 +		if (!ether_addr_equal_64bits(ba->ta, entry->ra))
++=======
+ 		if (!ether_addr_equal(ba->ra, entry->ta))
+ 			continue;
+ 
+ 		if (!ether_addr_equal(ba->ta, entry->ra))
++>>>>>>> 7367d0b573d1 (drivers/net: Convert uses of compare_ether_addr to ether_addr_equal)
  			continue;
  
  		/* Mark BAR since we received the according BA */
diff --cc drivers/net/wireless/rtlwifi/ps.c
index b69321d45f04,0d81f766fd0f..000000000000
--- a/drivers/net/wireless/rtlwifi/ps.c
+++ b/drivers/net/wireless/rtlwifi/ps.c
@@@ -987,7 -923,7 +987,11 @@@ void rtl_p2p_info(struct ieee80211_hw *
  		return;
  
  	/* and only beacons from the associated BSSID, please */
++<<<<<<< HEAD
 +	if (!ether_addr_equal_64bits(hdr->addr3, rtlpriv->mac80211.bssid))
++=======
+ 	if (!ether_addr_equal(hdr->addr3, rtlpriv->mac80211.bssid))
++>>>>>>> 7367d0b573d1 (drivers/net: Convert uses of compare_ether_addr to ether_addr_equal)
  		return;
  
  	/* check if this really is a beacon */
diff --cc drivers/net/wireless/rtlwifi/rtl8188ee/trx.c
index 791efbe6b18c,68685a898257..000000000000
--- a/drivers/net/wireless/rtlwifi/rtl8188ee/trx.c
+++ b/drivers/net/wireless/rtlwifi/rtl8188ee/trx.c
@@@ -314,24 -305,21 +314,36 @@@ static void _rtl88ee_translate_rx_signa
  	psaddr = ieee80211_get_SA(hdr);
  	memcpy(pstatus->psaddr, psaddr, ETH_ALEN);
  
++<<<<<<< HEAD
 +	packet_matchbssid = ((!ieee80211_is_ctl(fc)) &&
 +	     (ether_addr_equal(mac->bssid, ieee80211_has_tods(fc) ?
 +			       hdr->addr1 : ieee80211_has_fromds(fc) ?
 +			       hdr->addr2 : hdr->addr3)) &&
 +			       (!pstatus->hwerror) &&
 +			       (!pstatus->crc) && (!pstatus->icv));
 +
 +	packet_toself = packet_matchbssid &&
 +	    (ether_addr_equal(praddr, rtlefuse->dev_addr));
++=======
+ 	addr = ether_addr_equal(mac->bssid,
+ 				(ufc & IEEE80211_FCTL_TODS) ? hdr->addr1 :
+ 				(ufc & IEEE80211_FCTL_FROMDS) ? hdr->addr2 :
+ 				hdr->addr3);
+ 	match_bssid = ((IEEE80211_FTYPE_CTL != type) && (!pstatus->hwerror) &&
+ 		       (!pstatus->crc) && (!pstatus->icv)) && addr;
+ 
+ 	addr = ether_addr_equal(praddr, rtlefuse->dev_addr);
+ 	packet_toself = match_bssid && addr;
++>>>>>>> 7367d0b573d1 (drivers/net: Convert uses of compare_ether_addr to ether_addr_equal)
  
 -	if (ieee80211_is_beacon(fc))
 +	if (ieee80211_is_beacon(hdr->frame_control))
  		packet_beacon = true;
 +	else
 +		packet_beacon = false;
  
  	_rtl88ee_query_rxphystatus(hw, pstatus, pdesc, p_drvinfo,
 -				   match_bssid, packet_toself, packet_beacon);
 +				   packet_matchbssid, packet_toself,
 +				   packet_beacon);
  	_rtl88ee_smart_antenna(hw, pstatus);
  	rtl_process_phyinfo(hw, tmp_buf, pstatus);
  }
diff --cc drivers/net/wireless/rtlwifi/rtl8723ae/trx.c
index 2f7c144d7980,bcd82a1020a5..000000000000
--- a/drivers/net/wireless/rtlwifi/rtl8723ae/trx.c
+++ b/drivers/net/wireless/rtlwifi/rtl8723ae/trx.c
@@@ -253,28 -251,27 +253,41 @@@ static void translate_rx_signal_stuff(s
  	tmp_buf = skb->data + pstatus->rx_drvinfo_size + pstatus->rx_bufshift;
  
  	hdr = (struct ieee80211_hdr *)tmp_buf;
 -	fc = hdr->frame_control;
 -	type = WLAN_FC_GET_TYPE(fc);
 +	fc = le16_to_cpu(hdr->frame_control);
 +	type = WLAN_FC_GET_TYPE(hdr->frame_control);
  	praddr = hdr->addr1;
  
++<<<<<<< HEAD
 +	packet_matchbssid = ((IEEE80211_FTYPE_CTL != type) &&
 +		(ether_addr_equal(mac->bssid, (fc & IEEE80211_FCTL_TODS) ?
 +		 hdr->addr1 : (fc & IEEE80211_FCTL_FROMDS) ?
 +		 hdr->addr2 : hdr->addr3)) &&
 +		 (!pstatus->hwerror) &&
 +		 (!pstatus->crc) && (!pstatus->icv));
 +
 +	packet_toself = packet_matchbssid &&
 +	    (ether_addr_equal(praddr, rtlefuse->dev_addr));
++=======
+ 	packet_matchbssid =
+ 		((IEEE80211_FTYPE_CTL != type) &&
+ 		 ether_addr_equal(mac->bssid,
+ 				  (le16_to_cpu(fc) & IEEE80211_FCTL_TODS) ? hdr->addr1 :
+ 				  (le16_to_cpu(fc) & IEEE80211_FCTL_FROMDS) ? hdr->addr2 :
+ 				  hdr->addr3) &&
+ 		 (!pstatus->hwerror) && (!pstatus->crc) && (!pstatus->icv));
+ 
+ 	packet_toself = (packet_matchbssid &&
+ 			 ether_addr_equal(praddr, rtlefuse->dev_addr));
++>>>>>>> 7367d0b573d1 (drivers/net: Convert uses of compare_ether_addr to ether_addr_equal)
  
 -	if (ieee80211_is_beacon(fc))
 +	if (ieee80211_is_beacon(hdr->frame_control))
  		packet_beacon = true;
 +	else
 +		packet_beacon = false;
  
 -	_rtl8723ae_query_rxphystatus(hw, pstatus, pdesc, p_drvinfo,
 -				   packet_matchbssid, packet_toself,
 -				   packet_beacon);
 +	_rtl8723e_query_rxphystatus(hw, pstatus, pdesc, p_drvinfo,
 +				    packet_matchbssid, packet_toself,
 +				    packet_beacon);
  
  	rtl_process_phyinfo(hw, tmp_buf, pstatus);
  }
* Unmerged path drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
diff --git a/drivers/net/ethernet/tile/tilegx.c b/drivers/net/ethernet/tile/tilegx.c
index f3c2d034b32c..54eb01889b3d 100644
--- a/drivers/net/ethernet/tile/tilegx.c
+++ b/drivers/net/ethernet/tile/tilegx.c
@@ -398,7 +398,7 @@ static inline bool filter_packet(struct net_device *dev, void *buf)
 	/* Filter out packets that aren't for us. */
 	if (!(dev->flags & IFF_PROMISC) &&
 	    !is_multicast_ether_addr(buf) &&
-	    compare_ether_addr(dev->dev_addr, buf) != 0)
+	    !ether_addr_equal(dev->dev_addr, buf))
 		return true;
 
 	return false;
diff --git a/drivers/net/usb/qmi_wwan.c b/drivers/net/usb/qmi_wwan.c
index 3b0b4ba6720e..dcebd508a027 100644
--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -323,7 +323,7 @@ next_desc:
 	/* Never use the same address on both ends of the link, even
 	 * if the buggy firmware told us to.
 	 */
-	if (!compare_ether_addr(dev->net->dev_addr, default_modem_addr))
+	if (ether_addr_equal(dev->net->dev_addr, default_modem_addr))
 		eth_hw_addr_random(dev->net);
 
 	/* make MAC addr easily distinguishable from an IP header */
* Unmerged path drivers/net/wireless/ath/carl9170/rx.c
* Unmerged path drivers/net/wireless/rt2x00/rt2x00dev.c
* Unmerged path drivers/net/wireless/rtlwifi/ps.c
* Unmerged path drivers/net/wireless/rtlwifi/rtl8188ee/trx.c
* Unmerged path drivers/net/wireless/rtlwifi/rtl8723ae/trx.c
