IB/hfi1: Fix i2c resource reservation checks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dean Luick <dean.luick@intel.com>
commit f9c82a0b75a120ca3e9542a7a6e60244d04c915a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f9c82a0b.failed

The i2c and qsfp read/write routines should check for the resource
reservation of the incoming argument target rather than the implicit
target of the hardware HFI.

	Reviewed-by: Easwar Hariharan <easwar.hariharan@intel.com>
	Signed-off-by: Dean Luick <dean.luick@intel.com>
	Signed-off-by: Jubin John <jubin.john@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit f9c82a0b75a120ca3e9542a7a6e60244d04c915a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/qsfp.c
diff --cc drivers/staging/hfi1/qsfp.c
index b16ff11927bd,ac03d80d27cc..000000000000
--- a/drivers/staging/hfi1/qsfp.c
+++ b/drivers/staging/hfi1/qsfp.c
@@@ -94,12 -91,13 +94,17 @@@ static int __i2c_write(struct hfi1_ppor
  int i2c_write(struct hfi1_pportdata *ppd, u32 target, int i2c_addr, int offset,
  	      void *bp, int len)
  {
 +	struct hfi1_devdata *dd = ppd->dd;
  	int ret;
  
++<<<<<<< HEAD:drivers/staging/hfi1/qsfp.c
 +	ret = mutex_lock_interruptible(&dd->qsfp_i2c_mutex);
 +	if (ret)
 +		return ret;
++=======
+ 	if (!check_chip_resource(ppd->dd, i2c_target(target), __func__))
+ 		return -EACCES;
++>>>>>>> f9c82a0b75a1 (IB/hfi1: Fix i2c resource reservation checks):drivers/staging/rdma/hfi1/qsfp.c
  
  	/* make sure the TWSI bus is in a sane state */
  	ret = hfi1_twsi_reset(ppd->dd, target);
@@@ -163,12 -157,13 +168,17 @@@ exit
  int i2c_read(struct hfi1_pportdata *ppd, u32 target, int i2c_addr, int offset,
  	     void *bp, int len)
  {
 +	struct hfi1_devdata *dd = ppd->dd;
  	int ret;
  
++<<<<<<< HEAD:drivers/staging/hfi1/qsfp.c
 +	ret = mutex_lock_interruptible(&dd->qsfp_i2c_mutex);
 +	if (ret)
 +		return ret;
++=======
+ 	if (!check_chip_resource(ppd->dd, i2c_target(target), __func__))
+ 		return -EACCES;
++>>>>>>> f9c82a0b75a1 (IB/hfi1: Fix i2c resource reservation checks):drivers/staging/rdma/hfi1/qsfp.c
  
  	/* make sure the TWSI bus is in a sane state */
  	ret = hfi1_twsi_reset(ppd->dd, target);
@@@ -199,9 -192,8 +209,14 @@@ int qsfp_write(struct hfi1_pportdata *p
  	int ret;
  	u8 page;
  
++<<<<<<< HEAD:drivers/staging/hfi1/qsfp.c
 +	ret = mutex_lock_interruptible(&ppd->dd->qsfp_i2c_mutex);
 +	if (ret)
 +		return ret;
++=======
+ 	if (!check_chip_resource(ppd->dd, i2c_target(target), __func__))
+ 		return -EACCES;
++>>>>>>> f9c82a0b75a1 (IB/hfi1: Fix i2c resource reservation checks):drivers/staging/rdma/hfi1/qsfp.c
  
  	/* make sure the TWSI bus is in a sane state */
  	ret = hfi1_twsi_reset(ppd->dd, target);
@@@ -265,9 -276,8 +280,14 @@@ int qsfp_read(struct hfi1_pportdata *pp
  	int ret;
  	u8 page;
  
++<<<<<<< HEAD:drivers/staging/hfi1/qsfp.c
 +	ret = mutex_lock_interruptible(&ppd->dd->qsfp_i2c_mutex);
 +	if (ret)
 +		return ret;
++=======
+ 	if (!check_chip_resource(ppd->dd, i2c_target(target), __func__))
+ 		return -EACCES;
++>>>>>>> f9c82a0b75a1 (IB/hfi1: Fix i2c resource reservation checks):drivers/staging/rdma/hfi1/qsfp.c
  
  	/* make sure the TWSI bus is in a sane state */
  	ret = hfi1_twsi_reset(ppd->dd, target);
* Unmerged path drivers/staging/hfi1/qsfp.c
