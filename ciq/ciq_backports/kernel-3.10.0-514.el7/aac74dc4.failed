printk: rename printk_sched to printk_deferred

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author John Stultz <john.stultz@linaro.org>
commit aac74dc495456412c4130a1167ce4beb6c1f0b38
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/aac74dc4.failed

After learning we'll need some sort of deferred printk functionality in
the timekeeping core, Peter suggested we rename the printk_sched function
so it can be reused by needed subsystems.

This only changes the function name. No logic changes.

	Signed-off-by: John Stultz <john.stultz@linaro.org>
	Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Jiri Bohac <jbohac@suse.cz>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit aac74dc495456412c4130a1167ce4beb6c1f0b38)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
* Unmerged path kernel/sched/deadline.c
diff --git a/include/linux/printk.h b/include/linux/printk.h
index 2deb0b0f3cd4..3dabb8c60c21 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -127,9 +127,9 @@ asmlinkage __printf(1, 2) __cold
 int printk(const char *fmt, ...);
 
 /*
- * Special printk facility for scheduler use only, _DO_NOT_USE_ !
+ * Special printk facility for scheduler/timekeeping use only, _DO_NOT_USE_ !
  */
-__printf(1, 2) __cold int printk_sched(const char *fmt, ...);
+__printf(1, 2) __cold int printk_deferred(const char *fmt, ...);
 
 /*
  * Please don't use printk_ratelimit(), because it shares ratelimiting state
@@ -164,7 +164,7 @@ int printk(const char *s, ...)
 	return 0;
 }
 static inline __printf(1, 2) __cold
-int printk_sched(const char *s, ...)
+int printk_deferred(const char *s, ...)
 {
 	return 0;
 }
diff --git a/kernel/printk.c b/kernel/printk.c
index 6881a4f0352d..6adde77408a0 100644
--- a/kernel/printk.c
+++ b/kernel/printk.c
@@ -2504,7 +2504,7 @@ void wake_up_klogd(void)
 	preempt_enable();
 }
 
-int printk_sched(const char *fmt, ...)
+int printk_deferred(const char *fmt, ...)
 {
 	unsigned long flags;
 	va_list args;
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 8f3f375de9d1..f433c3ddbd8c 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1422,7 +1422,7 @@ out:
 		 * leave kernel.
 		 */
 		if (p->mm && printk_ratelimit()) {
-			printk_sched("process %d (%s) no longer affine to cpu%d\n",
+			printk_deferred("process %d (%s) no longer affine to cpu%d\n",
 					task_pid_nr(p), p->comm, cpu);
 		}
 	}
* Unmerged path kernel/sched/deadline.c
diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 27f9ed8f4b17..1f015768f7b7 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -852,7 +852,7 @@ static int sched_rt_runtime_exceeded(struct rt_rq *rt_rq)
 
 			if (!once) {
 				once = true;
-				printk_sched("sched: RT throttling activated\n");
+				printk_deferred("sched: RT throttling activated\n");
 			}
 		} else {
 			/*
