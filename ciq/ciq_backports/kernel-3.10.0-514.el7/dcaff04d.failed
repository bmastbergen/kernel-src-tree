mmc: esdhc: Fix bug when writing to SDHCI_HOST_CONTROL register

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Oded Gabbay <ogabbay@advaoptical.com>
commit dcaff04d36fd7f22973bf4fc108912ce19bcef4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/dcaff04d.failed

The P2020 has a non-standard implementation of the SDHCI_HOST_CONTROL
register. This patch adds a QUIRK in the SDHCI header to signal that
a host controller has a non-standard SDHCI_HOST_CONTROL register. The
patch adds a check to the function esdhc_writeb in file
sdhci-of-esdhc.c, where it checks if the write is done to the
SDHCI_HOST_CONTROL register and th host has the above mentioned QUIRK,
then the function simply returns instead of writing to the register.
The patch also detects if the processor is P2020 (by looking in dev
tree) and if so, adds the QUIRK to the host->quirk2

	Signed-off-by: Oded Gabbay <ogabbay@advaoptical.com>
	Reviewed-by: Anton Vorontsov <anton@enomsg.org>
	Signed-off-by: Chris Ball <cjb@laptop.org>
(cherry picked from commit dcaff04d36fd7f22973bf4fc108912ce19bcef4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-of-esdhc.c
diff --cc drivers/mmc/host/sdhci-of-esdhc.c
index 37e668f5b992,15039e2d1c12..000000000000
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@@ -262,7 -295,33 +269,37 @@@ static const struct sdhci_pltfm_data sd
  
  static int sdhci_esdhc_probe(struct platform_device *pdev)
  {
++<<<<<<< HEAD
 +	return sdhci_pltfm_register(pdev, &sdhci_esdhc_pdata, 0);
++=======
+ 	struct sdhci_host *host;
+ 	struct device_node *np;
+ 	int ret;
+ 
+ 	host = sdhci_pltfm_init(pdev, &sdhci_esdhc_pdata, 0);
+ 	if (IS_ERR(host))
+ 		return PTR_ERR(host);
+ 
+ 	sdhci_get_of_property(pdev);
+ 
+ 	np = pdev->dev.of_node;
+ 	if (of_device_is_compatible(np, "fsl,p2020-esdhc")) {
+ 		/*
+ 		 * Freescale messed up with P2020 as it has a non-standard
+ 		 * host control register
+ 		 */
+ 		host->quirks2 |= SDHCI_QUIRK2_BROKEN_HOST_CONTROL;
+ 	}
+ 
+ 	/* call to generic mmc_of_parse to support additional capabilities */
+ 	mmc_of_parse(host->mmc);
+ 
+ 	ret = sdhci_add_host(host);
+ 	if (ret)
+ 		sdhci_pltfm_free(pdev);
+ 
+ 	return ret;
++>>>>>>> dcaff04d36fd (mmc: esdhc: Fix bug when writing to SDHCI_HOST_CONTROL register)
  }
  
  static int sdhci_esdhc_remove(struct platform_device *pdev)
* Unmerged path drivers/mmc/host/sdhci-of-esdhc.c
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index a74518009099..e3c6a74d980a 100644
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -96,6 +96,8 @@ struct sdhci_host {
 #define SDHCI_QUIRK2_NO_1_8_V				(1<<2)
 #define SDHCI_QUIRK2_PRESET_VALUE_BROKEN		(1<<3)
 #define SDHCI_QUIRK2_CARD_ON_NEEDS_BUS_ON		(1<<4)
+/* Controller has a non-standard host control register */
+#define SDHCI_QUIRK2_BROKEN_HOST_CONTROL		(1<<5)
 
 	int irq;		/* Device IRQ */
 	void __iomem *ioaddr;	/* Mapped address */
