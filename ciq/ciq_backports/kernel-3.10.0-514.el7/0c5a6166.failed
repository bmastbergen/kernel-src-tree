ixgbe: Add support for toggling VLAN filtering flag via ethtool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit 0c5a616650a08b766e529511348274c1914ef4bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0c5a6166.failed

This change makes it so that we can use the ethtool rx-vlan-filter flag to
toggle Rx VLAN filtering on and off.  This is basically just an extension
of the existing VLAN promisc work in that it just adds support for the
additional ethtool flag.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 0c5a616650a08b766e529511348274c1914ef4bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 194a67d0951f,19bf3860d3d8..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@@ -4243,7 -4447,7 +4243,11 @@@ void ixgbe_set_rx_mode(struct net_devic
  	struct ixgbe_adapter *adapter = netdev_priv(netdev);
  	struct ixgbe_hw *hw = &adapter->hw;
  	u32 fctrl, vmolr = IXGBE_VMOLR_BAM | IXGBE_VMOLR_AUPE;
++<<<<<<< HEAD
 +	u32 vlnctrl;
++=======
+ 	netdev_features_t features = netdev->features;
++>>>>>>> 0c5a616650a0 (ixgbe: Add support for toggling VLAN filtering flag via ethtool)
  	int count;
  
  	/* Check for Promiscuous and All Multicast modes */
@@@ -4263,13 -4465,7 +4267,17 @@@
  		hw->addr_ctrl.user_set_promisc = true;
  		fctrl |= (IXGBE_FCTRL_UPE | IXGBE_FCTRL_MPE);
  		vmolr |= IXGBE_VMOLR_MPE;
++<<<<<<< HEAD
 +		/* Only disable hardware filter vlans in promiscuous mode
 +		 * if SR-IOV and VMDQ are disabled - otherwise ensure
 +		 * that hardware VLAN filters remain enabled.
 +		 */
 +		if (adapter->flags & (IXGBE_FLAG_VMDQ_ENABLED |
 +				      IXGBE_FLAG_SRIOV_ENABLED))
 +			vlnctrl |= (IXGBE_VLNCTRL_VFE | IXGBE_VLNCTRL_CFIEN);
++=======
+ 		features &= ~NETIF_F_HW_VLAN_CTAG_FILTER;
++>>>>>>> 0c5a616650a0 (ixgbe: Add support for toggling VLAN filtering flag via ethtool)
  	} else {
  		if (netdev->flags & IFF_ALLMULTI) {
  			fctrl |= IXGBE_FCTRL_MPE;
@@@ -4328,10 -4515,9 +4336,10 @@@
  		/* NOTE:  VLAN filtering is disabled by setting PROMISC */
  	}
  
 +	IXGBE_WRITE_REG(hw, IXGBE_VLNCTRL, vlnctrl);
  	IXGBE_WRITE_REG(hw, IXGBE_FCTRL, fctrl);
  
- 	if (netdev->features & NETIF_F_HW_VLAN_CTAG_RX)
+ 	if (features & NETIF_F_HW_VLAN_CTAG_RX)
  		ixgbe_vlan_strip_enable(adapter);
  	else
  		ixgbe_vlan_strip_disable(adapter);
@@@ -7768,36 -8488,37 +7781,34 @@@ static int ixgbe_set_features(struct ne
  		adapter->flags &= ~IXGBE_FLAG_FDIR_PERFECT_CAPABLE;
  
  		/* We cannot enable ATR if SR-IOV is enabled */
 -		if (adapter->flags & IXGBE_FLAG_SRIOV_ENABLED ||
 -		    /* We cannot enable ATR if we have 2 or more tcs */
 -		    (netdev_get_num_tc(netdev) > 1) ||
 -		    /* We cannot enable ATR if RSS is disabled */
 -		    (adapter->ring_feature[RING_F_RSS].limit <= 1) ||
 -		    /* A sample rate of 0 indicates ATR disabled */
 -		    (!adapter->atr_sample_rate))
 -			; /* do nothing not supported */
 -		else /* otherwise supported and set the flag */
 -			adapter->flags |= IXGBE_FLAG_FDIR_HASH_CAPABLE;
 +		if (adapter->flags & IXGBE_FLAG_SRIOV_ENABLED)
 +			break;
 +
 +		/* We cannot enable ATR if we have 2 or more traffic classes */
 +		if (netdev_get_num_tc(netdev) > 1)
 +			break;
 +
 +		/* We cannot enable ATR if RSS is disabled */
 +		if (adapter->ring_feature[RING_F_RSS].limit <= 1)
 +			break;
 +
 +		/* A sample rate of 0 indicates ATR disabled */
 +		if (!adapter->atr_sample_rate)
 +			break;
 +
 +		adapter->flags |= IXGBE_FLAG_FDIR_HASH_CAPABLE;
 +		break;
  	}
  
- 	if (features & NETIF_F_HW_VLAN_CTAG_RX)
- 		ixgbe_vlan_strip_enable(adapter);
- 	else
- 		ixgbe_vlan_strip_disable(adapter);
- 
  	if (changed & NETIF_F_RXALL)
  		need_reset = true;
  
  	netdev->features = features;
 -
 -#ifdef CONFIG_IXGBE_VXLAN
 -	if ((adapter->flags & IXGBE_FLAG_VXLAN_OFFLOAD_CAPABLE)) {
 -		if (features & NETIF_F_RXCSUM)
 -			adapter->flags2 |= IXGBE_FLAG2_VXLAN_REREG_NEEDED;
 -		else
 -			ixgbe_clear_vxlan_port(adapter);
 -	}
 -#endif /* CONFIG_IXGBE_VXLAN */
 -
  	if (need_reset)
  		ixgbe_do_reset(netdev);
+ 	else if (changed & (NETIF_F_HW_VLAN_CTAG_RX |
+ 			    NETIF_F_HW_VLAN_CTAG_FILTER))
+ 		ixgbe_set_rx_mode(netdev);
  
  	return 0;
  }
@@@ -8323,31 -9190,32 +8334,54 @@@ skip_sriov
  			   NETIF_F_TSO |
  			   NETIF_F_TSO6 |
  			   NETIF_F_RXHASH |
++<<<<<<< HEAD
 +			   NETIF_F_RXCSUM;
++=======
+ 			   NETIF_F_RXCSUM |
+ 			   NETIF_F_HW_CSUM |
+ 			   NETIF_F_HW_VLAN_CTAG_TX |
+ 			   NETIF_F_HW_VLAN_CTAG_RX |
+ 			   NETIF_F_HW_VLAN_CTAG_FILTER;
++>>>>>>> 0c5a616650a0 (ixgbe: Add support for toggling VLAN filtering flag via ethtool)
  
 -	if (hw->mac.type >= ixgbe_mac_82599EB)
 -		netdev->features |= NETIF_F_SCTP_CRC;
 +	netdev->hw_features = netdev->features;
 +
 +	switch (adapter->hw.mac.type) {
 +	case ixgbe_mac_82599EB:
 +	case ixgbe_mac_X540:
 +	case ixgbe_mac_X550:
 +	case ixgbe_mac_X550EM_x:
 +		netdev->features |= NETIF_F_SCTP_CSUM;
 +		netdev->hw_features |= NETIF_F_SCTP_CSUM |
 +				       NETIF_F_NTUPLE;
 +		break;
 +	default:
 +		break;
 +	}
  
 -	/* copy netdev features into list of user selectable features */
 -	netdev->hw_features |= netdev->features;
 -	netdev->hw_features |= NETIF_F_RXALL |
 -			       NETIF_F_HW_L2FW_DOFFLOAD;
++<<<<<<< HEAD
 +	netdev->hw_features |= NETIF_F_RXALL;
 +	netdev->features |= NETIF_F_HW_VLAN_CTAG_FILTER;
  
 +	netdev->vlan_features |= NETIF_F_TSO;
 +	netdev->vlan_features |= NETIF_F_TSO6;
 +	netdev->vlan_features |= NETIF_F_IP_CSUM;
 +	netdev->vlan_features |= NETIF_F_IPV6_CSUM;
 +	netdev->vlan_features |= NETIF_F_SG;
++=======
+ 	if (hw->mac.type >= ixgbe_mac_82599EB)
+ 		netdev->hw_features |= NETIF_F_NTUPLE |
+ 				       NETIF_F_HW_TC;
+ 
+ 	netdev->vlan_features |= NETIF_F_SG |
+ 				 NETIF_F_TSO |
+ 				 NETIF_F_TSO6 |
+ 				 NETIF_F_HW_CSUM |
+ 				 NETIF_F_SCTP_CRC;
+ 
+ 	netdev->mpls_features |= NETIF_F_HW_CSUM;
+ 	netdev->hw_enc_features |= NETIF_F_HW_CSUM;
++>>>>>>> 0c5a616650a0 (ixgbe: Add support for toggling VLAN filtering flag via ethtool)
  
  	netdev->priv_flags |= IFF_UNICAST_FLT;
  	netdev->priv_flags |= IFF_SUPP_NOFCS;
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
