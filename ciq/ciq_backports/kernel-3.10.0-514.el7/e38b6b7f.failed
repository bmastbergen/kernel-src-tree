crypto: x86/sha - Add build support for Intel SHA Extensions optimized SHA1 and SHA256

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [crypto] x86/sha - Add build support for Intel SHA Extensions optimized SHA1 and SHA256 (Herbert Xu) [1267049]
Rebuild_FUZZ: 95.12%
commit-author tim <tim.c.chen@linux.intel.com>
commit e38b6b7fcfd11fb83dcac54a33cbca3739c45a09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e38b6b7f.failed

This patch provides the configuration and build support to
include and build the optimized SHA1 and SHA256 update transforms
for the kernel's crypto library.

Originally-by: Chandramouli Narayanan <mouli_7982@yahoo.com>
	Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
	Acked-by: David S. Miller <davem@davemloft.net>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit e38b6b7fcfd11fb83dcac54a33cbca3739c45a09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Makefile
#	arch/x86/crypto/Makefile
diff --cc arch/x86/Makefile
index 6912ffd3849c,a8009c77918a..000000000000
--- a/arch/x86/Makefile
+++ b/arch/x86/Makefile
@@@ -125,19 -159,17 +125,26 @@@ KBUILD_CFLAGS += -Wframe-larger-than=20
  sp-$(CONFIG_X86_32) := esp
  sp-$(CONFIG_X86_64) := rsp
  
 +# do binutils support CFI?
 +cfi := $(call as-instr,.cfi_startproc\n.cfi_rel_offset $(sp-y)$(comma)0\n.cfi_endproc,-DCONFIG_AS_CFI=1)
 +# is .cfi_signal_frame supported too?
 +cfi-sigframe := $(call as-instr,.cfi_startproc\n.cfi_signal_frame\n.cfi_endproc,-DCONFIG_AS_CFI_SIGNAL_FRAME=1)
 +cfi-sections := $(call as-instr,.cfi_sections .debug_frame,-DCONFIG_AS_CFI_SECTIONS=1)
 +
  # does binutils support specific instructions?
  asinstr := $(call as-instr,fxsaveq (%rax),-DCONFIG_AS_FXSAVEQ=1)
 -asinstr += $(call as-instr,pshufb %xmm0$(comma)%xmm0,-DCONFIG_AS_SSSE3=1)
 -asinstr += $(call as-instr,crc32l %eax$(comma)%eax,-DCONFIG_AS_CRC32=1)
  avx_instr := $(call as-instr,vxorps %ymm0$(comma)%ymm1$(comma)%ymm2,-DCONFIG_AS_AVX=1)
  avx2_instr :=$(call as-instr,vpbroadcastb %xmm0$(comma)%ymm1,-DCONFIG_AS_AVX2=1)
+ sha1_ni_instr :=$(call as-instr,sha1msg1 %xmm0$(comma)%xmm1,-DCONFIG_AS_SHA1_NI=1)
+ sha256_ni_instr :=$(call as-instr,sha256msg1 %xmm0$(comma)%xmm1,-DCONFIG_AS_SHA256_NI=1)
  
++<<<<<<< HEAD
 +KBUILD_AFLAGS += $(cfi) $(cfi-sigframe) $(cfi-sections) $(asinstr) $(avx_instr) $(avx2_instr)
 +KBUILD_CFLAGS += $(cfi) $(cfi-sigframe) $(cfi-sections) $(asinstr) $(avx_instr) $(avx2_instr)
++=======
+ KBUILD_AFLAGS += $(asinstr) $(avx_instr) $(avx2_instr) $(sha1_ni_instr) $(sha256_ni_instr)
+ KBUILD_CFLAGS += $(asinstr) $(avx_instr) $(avx2_instr) $(sha1_ni_instr) $(sha256_ni_instr)
++>>>>>>> e38b6b7fcfd1 (crypto: x86/sha - Add build support for Intel SHA Extensions optimized SHA1 and SHA256)
  
  LDFLAGS := -m elf_$(UTS_MACHINE)
  
diff --cc arch/x86/crypto/Makefile
index 56a17beb9dcd,b9b912a44d61..000000000000
--- a/arch/x86/crypto/Makefile
+++ b/arch/x86/crypto/Makefile
@@@ -4,9 -4,10 +4,15 @@@
  
  avx_supported := $(call as-instr,vpxor %xmm0$(comma)%xmm0$(comma)%xmm0,yes,no)
  avx2_supported := $(call as-instr,vpgatherdd %ymm0$(comma)(%eax$(comma)%ymm1\
++<<<<<<< HEAD
 +					$(comma)4)$(comma)%ymm2,yes,no)
++=======
+ 				$(comma)4)$(comma)%ymm2,yes,no)
+ sha1_ni_supported :=$(call as-instr,sha1msg1 %xmm0$(comma)%xmm1,yes,no)
+ sha256_ni_supported :=$(call as-instr,sha256msg1 %xmm0$(comma)%xmm1,yes,no)
++>>>>>>> e38b6b7fcfd1 (crypto: x86/sha - Add build support for Intel SHA Extensions optimized SHA1 and SHA256)
  
 +obj-$(CONFIG_CRYPTO_ABLK_HELPER_X86) += ablk_helper.o
  obj-$(CONFIG_CRYPTO_GLUE_HELPER_X86) += glue_helper.o
  
  obj-$(CONFIG_CRYPTO_AES_586) += aes-i586.o
@@@ -82,12 -85,17 +88,15 @@@ ifeq ($(avx2_supported),yes
  endif
  
  aesni-intel-y := aesni-intel_asm.o aesni-intel_glue.o fpu.o
 -aesni-intel-$(CONFIG_64BIT) += aesni-intel_avx-x86_64.o aes_ctrby8_avx-x86_64.o
 +aesni-intel-$(CONFIG_64BIT) += aes_ctrby8_avx-x86_64.o
  ghash-clmulni-intel-y := ghash-clmulni-intel_asm.o ghash-clmulni-intel_glue.o
  sha1-ssse3-y := sha1_ssse3_asm.o sha1_ssse3_glue.o
 -poly1305-x86_64-y := poly1305-sse2-x86_64.o poly1305_glue.o
  ifeq ($(avx2_supported),yes)
  sha1-ssse3-y += sha1_avx2_x86_64_asm.o
 -poly1305-x86_64-y += poly1305-avx2-x86_64.o
  endif
+ ifeq ($(sha1_ni_supported),yes)
+ sha1-ssse3-y += sha1_ni_asm.o
+ endif
  crc32c-intel-y := crc32c-intel_glue.o
  crc32c-intel-$(CONFIG_64BIT) += crc32c-pcl-intel-asm_64.o
  crc32-pclmul-y := crc32-pclmul_asm.o crc32-pclmul_glue.o
* Unmerged path arch/x86/Makefile
* Unmerged path arch/x86/crypto/Makefile
diff --git a/crypto/Kconfig b/crypto/Kconfig
index c7c27a5b2e9f..a4b298e4cd41 100644
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -525,17 +525,18 @@ config CRYPTO_SHA1
 	  SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2).
 
 config CRYPTO_SHA1_SSSE3
-	tristate "SHA1 digest algorithm (SSSE3/AVX/AVX2)"
+	tristate "SHA1 digest algorithm (SSSE3/AVX/AVX2/SHA-NI)"
 	depends on X86 && 64BIT
 	select CRYPTO_SHA1
 	select CRYPTO_HASH
 	help
 	  SHA-1 secure hash standard (FIPS 180-1/DFIPS 180-2) implemented
 	  using Supplemental SSE3 (SSSE3) instructions or Advanced Vector
-	  Extensions (AVX/AVX2), when available.
+	  Extensions (AVX/AVX2) or SHA-NI(SHA Extensions New Instructions),
+	  when available.
 
 config CRYPTO_SHA256_SSSE3
-	tristate "SHA256 digest algorithm (SSSE3/AVX/AVX2)"
+	tristate "SHA256 digest algorithm (SSSE3/AVX/AVX2/SHA-NI)"
 	depends on X86 && 64BIT
 	select CRYPTO_SHA256
 	select CRYPTO_HASH
@@ -543,7 +544,8 @@ config CRYPTO_SHA256_SSSE3
 	  SHA-256 secure hash standard (DFIPS 180-2) implemented
 	  using Supplemental SSE3 (SSSE3) instructions, or Advanced Vector
 	  Extensions version 1 (AVX1), or Advanced Vector Extensions
-	  version 2 (AVX2) instructions, when available.
+	  version 2 (AVX2) instructions, or SHA-NI (SHA Extensions New
+	  Instructions) when available.
 
 config CRYPTO_SHA512_SSSE3
 	tristate "SHA512 digest algorithm (SSSE3/AVX/AVX2)"
