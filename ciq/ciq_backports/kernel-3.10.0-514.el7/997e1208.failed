virtio_balloon: do not change memory amount visible via /proc/meminfo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Denis V. Lunev <den@openvz.org>
commit 997e120843e82609c8d99a9d5714e6cf91e14cbe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/997e1208.failed

Balloon device is frequently used as a mean of cooperative memory control
in between guest and host to manage memory overcommitment. This is the
typical case for any hosting workload when KVM guest is provided for
end-user.

Though there is a problem in this setup. The end-user and hosting provider
have signed SLA agreement in which some amount of memory is guaranted for
the guest. The good thing is that this memory will be given to the guest
when the guest will really need it (f.e. with OOM in guest and with
VIRTIO_BALLOON_F_DEFLATE_ON_OOM configuration flag set). The bad thing
is that end-user does not know this.

Balloon by default reduce the amount of memory exposed to the end-user
each time when the page is stolen from guest or returned back by using
adjust_managed_page_count and thus /proc/meminfo shows reduced amount
of memory.

Fortunately the solution is simple, we should just avoid to call
adjust_managed_page_count with VIRTIO_BALLOON_F_DEFLATE_ON_OOM set.

	Signed-off-by: Denis V. Lunev <den@openvz.org>
CC: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 997e120843e82609c8d99a9d5714e6cf91e14cbe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio_balloon.c
diff --cc drivers/virtio/virtio_balloon.c
index 5e461066deb2,7efc32945810..000000000000
--- a/drivers/virtio/virtio_balloon.c
+++ b/drivers/virtio/virtio_balloon.c
@@@ -156,7 -157,9 +156,13 @@@ static void fill_balloon(struct virtio_
  		}
  		set_page_pfns(vb->pfns + vb->num_pfns, page);
  		vb->num_pages += VIRTIO_BALLOON_PAGES_PER_PAGE;
++<<<<<<< HEAD
 +		totalram_pages--;
++=======
+ 		if (!virtio_has_feature(vb->vdev,
+ 					VIRTIO_BALLOON_F_DEFLATE_ON_OOM))
+ 			adjust_managed_page_count(page, -1);
++>>>>>>> 997e120843e8 (virtio_balloon: do not change memory amount visible via /proc/meminfo)
  	}
  
  	/* Did we get any? */
@@@ -170,9 -173,12 +176,18 @@@ static void release_pages_by_pfn(const 
  	unsigned int i;
  
  	/* Find pfns pointing at start of each page, get pages and free them. */
++<<<<<<< HEAD
 +	for (i = 0; i < num; i += VIRTIO_BALLOON_PAGES_PER_PAGE) {
 +		balloon_page_free(balloon_pfn_to_page(pfns[i]));
 +		totalram_pages++;
++=======
+ 	for (i = 0; i < vb->num_pfns; i += VIRTIO_BALLOON_PAGES_PER_PAGE) {
+ 		struct page *page = balloon_pfn_to_page(vb->pfns[i]);
+ 		if (!virtio_has_feature(vb->vdev,
+ 					VIRTIO_BALLOON_F_DEFLATE_ON_OOM))
+ 			adjust_managed_page_count(page, 1);
+ 		put_page(page); /* balloon reference */
++>>>>>>> 997e120843e8 (virtio_balloon: do not change memory amount visible via /proc/meminfo)
  	}
  }
  
* Unmerged path drivers/virtio/virtio_balloon.c
