dmaengine: use DMA_COMPLETE for dma completion status

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Vinod Koul <vinod.koul@intel.com>
commit adfedd9a32e4e3490c0060576fd824881572b72a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/adfedd9a.failed

the DMA_SUCCESS is a misnomer as dmaengine indicates the transfer is complete and
gives no guarantee of the transfer success. Hence we should use DMA_COMPLTE
instead of DMA_SUCCESS

	Acked-by: Dan Williams <dan.j.williams@intel.com>
	Acked-by: Linus Walleij <linus.walleij@linaro.org>
	Signed-off-by: Vinod Koul <vinod.koul@intel.com>
(cherry picked from commit adfedd9a32e4e3490c0060576fd824881572b72a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/dmaengine.h
diff --cc include/linux/dmaengine.h
index 65b45f77d3d9,120e64c96478..000000000000
--- a/include/linux/dmaengine.h
+++ b/include/linux/dmaengine.h
@@@ -988,9 -1007,17 +988,20 @@@ struct dma_chan *__dma_request_channel(
  struct dma_chan *dma_request_slave_channel(struct device *dev, const char *name);
  void dma_release_channel(struct dma_chan *chan);
  #else
++<<<<<<< HEAD
++=======
+ static inline struct dma_chan *dma_find_channel(enum dma_transaction_type tx_type)
+ {
+ 	return NULL;
+ }
+ static inline enum dma_status dma_sync_wait(struct dma_chan *chan, dma_cookie_t cookie)
+ {
+ 	return DMA_COMPLETE;
+ }
++>>>>>>> adfedd9a32e4 (dmaengine: use DMA_COMPLETE for dma completion status)
  static inline enum dma_status dma_wait_for_async_tx(struct dma_async_tx_descriptor *tx)
  {
- 	return DMA_SUCCESS;
+ 	return DMA_COMPLETE;
  }
  static inline void dma_issue_pending_all(void)
  {
diff --git a/drivers/dma/dmaengine.c b/drivers/dma/dmaengine.c
index 3c89d840eb0f..897d22b85023 100644
--- a/drivers/dma/dmaengine.c
+++ b/drivers/dma/dmaengine.c
@@ -894,7 +894,7 @@ dma_wait_for_async_tx(struct dma_async_tx_descriptor *tx)
 	unsigned long dma_sync_wait_timeout = jiffies + msecs_to_jiffies(5000);
 
 	if (!tx)
-		return DMA_SUCCESS;
+		return DMA_COMPLETE;
 
 	while (tx->cookie == -EBUSY) {
 		if (time_after_eq(jiffies, dma_sync_wait_timeout)) {
* Unmerged path include/linux/dmaengine.h
