IB: remove xrc_remote_srq_num from struct ib_send_wr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 25556ae6b965321c7e7469faa06ddbeae50dac91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/25556ae6.failed

The field is only initialized in mlx, but never used.

If we want to add proper XRC support it should be done with a new
struct ib_xrc_wr.

This shrinks the various WR structures by another 4 bytes.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Sagi Grimberg <sagig@mellanox.com>
	Reviewed-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
	Tested-by: Haggai Eran <haggaie@mellanox.com>
(cherry picked from commit 25556ae6b965321c7e7469faa06ddbeae50dac91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/rdma/ib_verbs.h
diff --cc include/rdma/ib_verbs.h
index e1f65e204d37,edf02908a0fd..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -1101,54 -1100,93 +1101,57 @@@ struct ib_send_wr 
  		__be32		imm_data;
  		u32		invalidate_rkey;
  	} ex;
++<<<<<<< HEAD
 +	union {
 +		struct {
 +			u64	remote_addr;
 +			u32	rkey;
 +		} rdma;
 +		struct {
 +			u64	remote_addr;
 +			u64	compare_add;
 +			u64	swap;
 +			u64	compare_add_mask;
 +			u64	swap_mask;
 +			u32	rkey;
 +		} atomic;
 +		struct {
 +			struct ib_ah *ah;
 +			void   *header;
 +			int     hlen;
 +			int     mss;
 +			u32	remote_qpn;
 +			u32	remote_qkey;
 +			u16	pkey_index; /* valid for GSI only */
 +			u8	port_num;   /* valid for DR SMPs on switch only */
 +		} ud;
 +		struct {
 +			u64				iova_start;
 +			struct ib_fast_reg_page_list   *page_list;
 +			unsigned int			page_shift;
 +			unsigned int			page_list_len;
 +			u32				length;
 +			int				access_flags;
 +			u32				rkey;
 +		} fast_reg;
 +		struct {
 +			struct ib_mw            *mw;
 +			/* The new rkey for the memory window. */
 +			u32                      rkey;
 +			struct ib_mw_bind_info   bind_info;
 +		} bind_mw;
 +		struct {
 +			struct ib_sig_attrs    *sig_attrs;
 +			struct ib_mr	       *sig_mr;
 +			int			access_flags;
 +			struct ib_sge	       *prot;
 +		} sig_handover;
 +	} wr;
 +	u32			xrc_remote_srq_num;	/* XRC TGT QPs only */
++=======
++>>>>>>> 25556ae6b965 (IB: remove xrc_remote_srq_num from struct ib_send_wr)
  };
  
 -struct ib_rdma_wr {
 -	struct ib_send_wr	wr;
 -	u64			remote_addr;
 -	u32			rkey;
 -};
 -
 -static inline struct ib_rdma_wr *rdma_wr(struct ib_send_wr *wr)
 -{
 -	return container_of(wr, struct ib_rdma_wr, wr);
 -}
 -
 -struct ib_atomic_wr {
 -	struct ib_send_wr	wr;
 -	u64			remote_addr;
 -	u64			compare_add;
 -	u64			swap;
 -	u64			compare_add_mask;
 -	u64			swap_mask;
 -	u32			rkey;
 -};
 -
 -static inline struct ib_atomic_wr *atomic_wr(struct ib_send_wr *wr)
 -{
 -	return container_of(wr, struct ib_atomic_wr, wr);
 -}
 -
 -struct ib_ud_wr {
 -	struct ib_send_wr	wr;
 -	struct ib_ah		*ah;
 -	void			*header;
 -	int			hlen;
 -	int			mss;
 -	u32			remote_qpn;
 -	u32			remote_qkey;
 -	u16			pkey_index; /* valid for GSI only */
 -	u8			port_num;   /* valid for DR SMPs on switch only */
 -};
 -
 -static inline struct ib_ud_wr *ud_wr(struct ib_send_wr *wr)
 -{
 -	return container_of(wr, struct ib_ud_wr, wr);
 -}
 -
 -struct ib_fast_reg_wr {
 -	struct ib_send_wr	wr;
 -	u64			iova_start;
 -	struct ib_fast_reg_page_list *page_list;
 -	unsigned int		page_shift;
 -	unsigned int		page_list_len;
 -	u32			length;
 -	int			access_flags;
 -	u32			rkey;
 -};
 -
 -static inline struct ib_fast_reg_wr *fast_reg_wr(struct ib_send_wr *wr)
 -{
 -	return container_of(wr, struct ib_fast_reg_wr, wr);
 -}
 -
 -struct ib_bind_mw_wr {
 -	struct ib_send_wr	wr;
 -	struct ib_mw		*mw;
 -	/* The new rkey for the memory window. */
 -	u32			rkey;
 -	struct ib_mw_bind_info	bind_info;
 -};
 -
 -static inline struct ib_bind_mw_wr *bind_mw_wr(struct ib_send_wr *wr)
 -{
 -	return container_of(wr, struct ib_bind_mw_wr, wr);
 -}
 -
 -struct ib_sig_handover_wr {
 -	struct ib_send_wr	wr;
 -	struct ib_sig_attrs    *sig_attrs;
 -	struct ib_mr	       *sig_mr;
 -	int			access_flags;
 -	struct ib_sge	       *prot;
 -};
 -
 -static inline struct ib_sig_handover_wr *sig_handover_wr(struct ib_send_wr *wr)
 -{
 -	return container_of(wr, struct ib_sig_handover_wr, wr);
 -}
 -
  struct ib_recv_wr {
  	struct ib_recv_wr      *next;
  	u64			wr_id;
diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index 6f521a3418e8..0dd193ade6d0 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -2627,7 +2627,6 @@ int mlx5_ib_post_send(struct ib_qp *ibqp, struct ib_send_wr *wr,
 		switch (ibqp->qp_type) {
 		case IB_QPT_XRC_INI:
 			xrc = seg;
-			xrc->xrc_srqn = htonl(wr->xrc_remote_srq_num);
 			seg += sizeof(*xrc);
 			size += sizeof(*xrc) / 16;
 			/* fall through */
* Unmerged path include/rdma/ib_verbs.h
