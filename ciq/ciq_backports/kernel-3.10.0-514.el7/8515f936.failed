ACPI: Fix a bug in parsing ACPI Memory24 resource

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] Fix a bug in parsing ACPI Memory24 resource (Myron Stowe) [1344513]
Rebuild_FUZZ: 93.48%
commit-author Jiang Liu <jiang.liu@linux.intel.com>
commit 8515f9368161730655b64ddaf8b11a3d20049610
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8515f936.failed

According to ACPI spec 5, section 6.4.3.1 "24-Bit Memory Range Descriptor",
minimum, maximum and address_length field in struct acpi_resource_memory24
is in granularity of 256-bytes. So shift 8-bit left to get correct address.

	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8515f9368161730655b64ddaf8b11a3d20049610)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/resource.c
diff --cc drivers/acpi/resource.c
index 75d12a1b01ad,5544c6d26f32..000000000000
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@@ -77,10 -90,8 +77,15 @@@ bool acpi_dev_resource_memory(struct ac
  	switch (ares->type) {
  	case ACPI_RESOURCE_TYPE_MEMORY24:
  		memory24 = &ares->data.memory24;
++<<<<<<< HEAD
 +		if (!memory24->minimum && !memory24->address_length)
 +			return false;
 +		acpi_dev_get_memresource(res, memory24->minimum,
 +					 memory24->address_length,
++=======
+ 		acpi_dev_get_memresource(res, memory24->minimum << 8,
+ 					 memory24->address_length << 8,
++>>>>>>> 8515f9368161 (ACPI: Fix a bug in parsing ACPI Memory24 resource)
  					 memory24->write_protect);
  		break;
  	case ACPI_RESOURCE_TYPE_MEMORY32:
* Unmerged path drivers/acpi/resource.c
