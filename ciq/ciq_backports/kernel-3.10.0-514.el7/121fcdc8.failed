net/mlx5e: Add link down events counter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [include] mlx5e: Add link down events counter (kamal heib) [1275159 1296272 1296405 1298421 1298422 1298423 1298424 1298425]
Rebuild_FUZZ: 94.59%
commit-author Gal Pressman <galp@mellanox.com>
commit 121fcdc84d8240d4dfe1f737befd5814b12623ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/121fcdc8.failed

Expose link_down_events counter through ethtool -S.
This counter is read from PPort statistics, then proccessed and stored as
a special handling software counter.
This counter is stored along software counters since it is the only PPort
counter that it's size is not 64 bits.

	Signed-off-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 121fcdc84d8240d4dfe1f737befd5814b12623ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index b70e3293db0b,61e261c3d247..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -184,7 -131,23 +184,27 @@@ void mlx5e_update_stats(struct mlx5e_pr
  		}
  	}
  
++<<<<<<< HEAD
 +	/* HW counters */
++=======
+ 	/* Update calculated offload counters */
+ 	s->tx_csum_offload = s->tx_packets - tx_offload_none - s->tx_csum_inner;
+ 	s->rx_csum_good    = s->rx_packets - s->rx_csum_none -
+ 			     s->rx_csum_sw;
+ 
+ 	s->link_down_events = MLX5_GET(ppcnt_reg,
+ 				priv->stats.pport.phy_counters,
+ 				counter_set.phys_layer_cntrs.link_down_events);
+ }
+ 
+ static void mlx5e_update_vport_counters(struct mlx5e_priv *priv)
+ {
+ 	int outlen = MLX5_ST_SZ_BYTES(query_vport_counter_out);
+ 	u32 *out = (u32 *)priv->stats.vport.query_vport_out;
+ 	u32 in[MLX5_ST_SZ_DW(query_vport_counter_in)];
+ 	struct mlx5_core_dev *mdev = priv->mdev;
+ 
++>>>>>>> 121fcdc84d82 (net/mlx5e: Add link down events counter)
  	memset(in, 0, sizeof(in));
  
  	MLX5_SET(query_vport_counter_in, in, opcode,
@@@ -194,56 -157,69 +214,90 @@@
  
  	memset(out, 0, outlen);
  
 -	mlx5_cmd_exec(mdev, in, sizeof(in), out, outlen);
 -}
 -
 -static void mlx5e_update_pport_counters(struct mlx5e_priv *priv)
 -{
 -	struct mlx5e_pport_stats *pstats = &priv->stats.pport;
 -	struct mlx5_core_dev *mdev = priv->mdev;
 -	int sz = MLX5_ST_SZ_BYTES(ppcnt_reg);
 -	int prio;
 -	void *out;
 -	u32 *in;
 -
 -	in = mlx5_vzalloc(sz);
 -	if (!in)
 +	if (mlx5_cmd_exec(mdev, in, sizeof(in), out, outlen))
  		goto free_out;
  
 -	MLX5_SET(ppcnt_reg, in, local_port, 1);
 -
 -	out = pstats->IEEE_802_3_counters;
 -	MLX5_SET(ppcnt_reg, in, grp, MLX5_IEEE_802_3_COUNTERS_GROUP);
 -	mlx5_core_access_reg(mdev, in, sz, out, sz, MLX5_REG_PPCNT, 0, 0);
 -
 -	out = pstats->RFC_2863_counters;
 -	MLX5_SET(ppcnt_reg, in, grp, MLX5_RFC_2863_COUNTERS_GROUP);
 -	mlx5_core_access_reg(mdev, in, sz, out, sz, MLX5_REG_PPCNT, 0, 0);
 -
 -	out = pstats->RFC_2819_counters;
 -	MLX5_SET(ppcnt_reg, in, grp, MLX5_RFC_2819_COUNTERS_GROUP);
 -	mlx5_core_access_reg(mdev, in, sz, out, sz, MLX5_REG_PPCNT, 0, 0);
 -
 +#define MLX5_GET_CTR(p, x) \
 +	MLX5_GET64(query_vport_counter_out, p, x)
 +
 +	s->rx_error_packets     =
 +		MLX5_GET_CTR(out, received_errors.packets);
 +	s->rx_error_bytes       =
 +		MLX5_GET_CTR(out, received_errors.octets);
 +	s->tx_error_packets     =
 +		MLX5_GET_CTR(out, transmit_errors.packets);
 +	s->tx_error_bytes       =
 +		MLX5_GET_CTR(out, transmit_errors.octets);
 +
 +	s->rx_unicast_packets   =
 +		MLX5_GET_CTR(out, received_eth_unicast.packets);
 +	s->rx_unicast_bytes     =
 +		MLX5_GET_CTR(out, received_eth_unicast.octets);
 +	s->tx_unicast_packets   =
 +		MLX5_GET_CTR(out, transmitted_eth_unicast.packets);
 +	s->tx_unicast_bytes     =
 +		MLX5_GET_CTR(out, transmitted_eth_unicast.octets);
 +
 +	s->rx_multicast_packets =
 +		MLX5_GET_CTR(out, received_eth_multicast.packets);
 +	s->rx_multicast_bytes   =
 +		MLX5_GET_CTR(out, received_eth_multicast.octets);
 +	s->tx_multicast_packets =
 +		MLX5_GET_CTR(out, transmitted_eth_multicast.packets);
 +	s->tx_multicast_bytes   =
 +		MLX5_GET_CTR(out, transmitted_eth_multicast.octets);
 +
++<<<<<<< HEAD
 +	s->rx_broadcast_packets =
 +		MLX5_GET_CTR(out, received_eth_broadcast.packets);
 +	s->rx_broadcast_bytes   =
 +		MLX5_GET_CTR(out, received_eth_broadcast.octets);
 +	s->tx_broadcast_packets =
 +		MLX5_GET_CTR(out, transmitted_eth_broadcast.packets);
 +	s->tx_broadcast_bytes   =
 +		MLX5_GET_CTR(out, transmitted_eth_broadcast.octets);
++=======
+ 	out = pstats->phy_counters;
+ 	MLX5_SET(ppcnt_reg, in, grp, MLX5_PHYSICAL_LAYER_COUNTERS_GROUP);
+ 	mlx5_core_access_reg(mdev, in, sz, out, sz, MLX5_REG_PPCNT, 0, 0);
+ 
+ 	MLX5_SET(ppcnt_reg, in, grp, MLX5_PER_PRIORITY_COUNTERS_GROUP);
+ 	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
+ 		out = pstats->per_prio_counters[prio];
+ 		MLX5_SET(ppcnt_reg, in, prio_tc, prio);
+ 		mlx5_core_access_reg(mdev, in, sz, out, sz,
+ 				     MLX5_REG_PPCNT, 0, 0);
+ 	}
++>>>>>>> 121fcdc84d82 (net/mlx5e: Add link down events counter)
  
 -free_out:
 -	kvfree(in);
 -}
 +	/* Update calculated offload counters */
 +	s->tx_csum_offload = s->tx_packets - tx_offload_none;
 +	s->rx_csum_good    = s->rx_packets - s->rx_csum_none -
 +			       s->rx_csum_sw;
  
++<<<<<<< HEAD
 +	mlx5e_update_pport_counters(priv);
 +free_out:
 +	kvfree(out);
++=======
+ static void mlx5e_update_q_counter(struct mlx5e_priv *priv)
+ {
+ 	struct mlx5e_qcounter_stats *qcnt = &priv->stats.qcnt;
+ 
+ 	if (!priv->q_counter)
+ 		return;
+ 
+ 	mlx5_core_query_out_of_buffer(priv->mdev, priv->q_counter,
+ 				      &qcnt->rx_out_of_buffer);
+ }
+ 
+ void mlx5e_update_stats(struct mlx5e_priv *priv)
+ {
+ 	mlx5e_update_q_counter(priv);
+ 	mlx5e_update_vport_counters(priv);
+ 	mlx5e_update_pport_counters(priv);
+ 	mlx5e_update_sw_counters(priv);
++>>>>>>> 121fcdc84d82 (net/mlx5e: Add link down events counter)
  }
  
  static void mlx5e_update_stats_work(struct work_struct *work)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --git a/include/linux/mlx5/device.h b/include/linux/mlx5/device.h
index ca924da2b9a5..2c4543e68165 100644
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@ -1308,6 +1308,7 @@ enum {
 	MLX5_ETHERNET_EXTENDED_COUNTERS_GROUP = 0x5,
 	MLX5_PER_PRIORITY_COUNTERS_GROUP      = 0x10,
 	MLX5_PER_TRAFFIC_CLASS_COUNTERS_GROUP = 0x11,
+	MLX5_PHYSICAL_LAYER_COUNTERS_GROUP    = 0x12,
 	MLX5_INFINIBAND_PORT_COUNTERS_GROUP   = 0x20,
 };
 
