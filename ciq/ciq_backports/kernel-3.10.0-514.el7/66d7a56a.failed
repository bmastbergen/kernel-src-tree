SUNRPC: Refactor TCP receive

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 66d7a56a6254389587d0999dcaab1d2634cd4e24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/66d7a56a.failed

Move the TCP data receive loop out of xs_tcp_data_ready(). Doing so
will allow us to move the data receive out of the softirq context in
a set of followup patches.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 66d7a56a6254389587d0999dcaab1d2634cd4e24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtsock.c
diff --cc net/sunrpc/xprtsock.c
index 28893e435064,fa8d0c15c8cd..000000000000
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@@ -1437,32 -1418,27 +1461,45 @@@ static void xs_tcp_data_receive(struct 
  /**
   * xs_tcp_data_ready - "data ready" callback for TCP sockets
   * @sk: socket with data to read
 + * @bytes: how much data to read
   *
   */
 -static void xs_tcp_data_ready(struct sock *sk)
 +static void xs_tcp_data_ready(struct sock *sk, int bytes)
  {
+ 	struct sock_xprt *transport;
  	struct rpc_xprt *xprt;
++<<<<<<< HEAD
 +	read_descriptor_t rd_desc;
 +	int read;
++=======
++>>>>>>> 66d7a56a6254 (SUNRPC: Refactor TCP receive)
  
  	dprintk("RPC:       xs_tcp_data_ready...\n");
  
  	read_lock_bh(&sk->sk_callback_lock);
  	if (!(xprt = xprt_from_sock(sk)))
  		goto out;
++<<<<<<< HEAD
++=======
+ 	transport = container_of(xprt, struct sock_xprt, xprt);
+ 
++>>>>>>> 66d7a56a6254 (SUNRPC: Refactor TCP receive)
  	/* Any data means we had a useful conversation, so
  	 * the we don't need to delay the next reconnect
  	 */
  	if (xprt->reestablish_timeout)
  		xprt->reestablish_timeout = 0;
  
++<<<<<<< HEAD
 +	/* We use rd_desc to pass struct xprt to xs_tcp_data_recv */
 +	rd_desc.arg.data = xprt;
 +	do {
 +		rd_desc.count = 65536;
 +		read = tcp_read_sock(sk, &rd_desc, xs_tcp_data_recv);
 +	} while (read > 0);
++=======
+ 	xs_tcp_data_receive(transport);
++>>>>>>> 66d7a56a6254 (SUNRPC: Refactor TCP receive)
  out:
  	read_unlock_bh(&sk->sk_callback_lock);
  }
* Unmerged path net/sunrpc/xprtsock.c
