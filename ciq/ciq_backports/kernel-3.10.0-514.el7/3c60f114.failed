device property: return -EINVAL when property isn't found in ACPI

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 3c60f1149a2fee9ac4ef3cc27bd830e3bd8d2654
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3c60f114.failed

Change return code to be in align with OF and built-in device properties error
codes. In particular -EINVAL means property is not found.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 3c60f1149a2fee9ac4ef3cc27bd830e3bd8d2654)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/property.c
diff --cc drivers/acpi/property.c
index 3d47281953cd,2aee41655ce9..000000000000
--- a/drivers/acpi/property.c
+++ b/drivers/acpi/property.c
@@@ -149,22 -346,23 +149,27 @@@ void acpi_free_properties(struct acpi_d
   *
   * Return: %0 if property with @name has been found (success),
   *         %-EINVAL if the arguments are invalid,
-  *         %-ENODATA if the property doesn't exist,
+  *         %-EINVAL if the property doesn't exist,
   *         %-EPROTO if the property value type doesn't match @type.
   */
 -static int acpi_data_get_property(struct acpi_device_data *data,
 -				  const char *name, acpi_object_type type,
 -				  const union acpi_object **obj)
 +int acpi_dev_get_property(struct acpi_device *adev, const char *name,
 +			  acpi_object_type type, const union acpi_object **obj)
  {
  	const union acpi_object *properties;
  	int i;
  
 -	if (!data || !name)
 +	if (!adev || !name)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (!adev->data.pointer || !adev->data.properties)
 +		return -ENODATA;
++=======
+ 	if (!data->pointer || !data->properties)
+ 		return -EINVAL;
++>>>>>>> 3c60f1149a2f (device property: return -EINVAL when property isn't found in ACPI)
  
 -	properties = data->properties;
 +	properties = adev->data.properties;
  	for (i = 0; i < properties->package.count; i++) {
  		const union acpi_object *propname, *propvalue;
  		const union acpi_object *property;
@@@ -183,13 -381,52 +188,13 @@@
  			return 0;
  		}
  	}
- 	return -ENODATA;
+ 	return -EINVAL;
  }
 -
 -/**
 - * acpi_dev_get_property - return an ACPI property with given name.
 - * @adev: ACPI device to get the property from.
 - * @name: Name of the property.
 - * @type: Expected property type.
 - * @obj: Location to store the property value (if not %NULL).
 - */
 -int acpi_dev_get_property(struct acpi_device *adev, const char *name,
 -			  acpi_object_type type, const union acpi_object **obj)
 -{
 -	return adev ? acpi_data_get_property(&adev->data, name, type, obj) : -EINVAL;
 -}
  EXPORT_SYMBOL_GPL(acpi_dev_get_property);
  
 -static struct acpi_device_data *acpi_device_data_of_node(struct fwnode_handle *fwnode)
 -{
 -	if (fwnode->type == FWNODE_ACPI) {
 -		struct acpi_device *adev = to_acpi_device_node(fwnode);
 -		return &adev->data;
 -	} else if (fwnode->type == FWNODE_ACPI_DATA) {
 -		struct acpi_data_node *dn = to_acpi_data_node(fwnode);
 -		return &dn->data;
 -	}
 -	return NULL;
 -}
 -
 -/**
 - * acpi_node_prop_get - return an ACPI property with given name.
 - * @fwnode: Firmware node to get the property from.
 - * @propname: Name of the property.
 - * @valptr: Location to store a pointer to the property value (if not %NULL).
 - */
 -int acpi_node_prop_get(struct fwnode_handle *fwnode, const char *propname,
 -		       void **valptr)
 -{
 -	return acpi_data_get_property(acpi_device_data_of_node(fwnode),
 -				      propname, ACPI_TYPE_ANY,
 -				      (const union acpi_object **)valptr);
 -}
 -
  /**
 - * acpi_data_get_property_array - return an ACPI array property with given name
 - * @adev: ACPI data object to get the property from
 + * acpi_dev_get_property_array - return an ACPI array property with given name
 + * @adev: ACPI device to get property
   * @name: Name of the property
   * @type: Expected type of array elements
   * @obj: Location to store a pointer to the property value (if not NULL)
* Unmerged path drivers/acpi/property.c
