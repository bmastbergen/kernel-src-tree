dax: move DAX-related functions to a new header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Matthew Wilcox <willy@linux.intel.com>
commit c94c2acf84dc16cf4b989bb0bc849785b7ff52f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c94c2acf.failed

In order to handle the !CONFIG_TRANSPARENT_HUGEPAGES case, we need to
return VM_FAULT_FALLBACK from the inlined dax_pmd_fault(), which is
defined in linux/mm.h.  Given that we don't want to include <linux/mm.h>
in <linux/fs.h>, the easiest solution is to move the DAX-related
functions to a new header, <linux/dax.h>.  We could also have moved
VM_FAULT_* definitions to a new header, or a different header that isn't
quite such a boil-the-ocean header as <linux/mm.h>, but this felt like
the best option.

	Signed-off-by: Matthew Wilcox <willy@linux.intel.com>
	Cc: Hillf Danton <dhillf@gmail.com>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: Theodore Ts'o <tytso@mit.edu>
	Cc: Jan Kara <jack@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c94c2acf84dc16cf4b989bb0bc849785b7ff52f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
#	fs/ext4/file.c
#	fs/ext4/indirect.c
#	include/linux/fs.h
diff --cc fs/block_dev.c
index 2557803cf68e,28cc525b8d59..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -27,7 -28,7 +27,11 @@@
  #include <linux/namei.h>
  #include <linux/log2.h>
  #include <linux/cleancache.h>
++<<<<<<< HEAD
 +#include <linux/aio.h>
++=======
+ #include <linux/dax.h>
++>>>>>>> c94c2acf84dc (dax: move DAX-related functions to a new header)
  #include <asm/uaccess.h>
  #include "internal.h"
  
diff --cc fs/ext4/file.c
index 3034d6b4eaee,f8a631047379..000000000000
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@@ -20,12 -20,12 +20,16 @@@
  
  #include <linux/time.h>
  #include <linux/fs.h>
 +#include <linux/jbd2.h>
  #include <linux/mount.h>
  #include <linux/path.h>
++<<<<<<< HEAD
 +#include <linux/aio.h>
++=======
+ #include <linux/dax.h>
++>>>>>>> c94c2acf84dc (dax: move DAX-related functions to a new header)
  #include <linux/quotaops.h>
  #include <linux/pagevec.h>
 -#include <linux/uio.h>
  #include "ext4.h"
  #include "ext4_jbd2.h"
  #include "xattr.h"
diff --cc fs/ext4/indirect.c
index cf83aba7d248,2468261748b2..000000000000
--- a/fs/ext4/indirect.c
+++ b/fs/ext4/indirect.c
@@@ -20,9 -20,10 +20,14 @@@
   *	(sct@redhat.com), 1993, 1998
   */
  
 +#include <linux/aio.h>
  #include "ext4_jbd2.h"
  #include "truncate.h"
++<<<<<<< HEAD
++=======
+ #include <linux/dax.h>
+ #include <linux/uio.h>
++>>>>>>> c94c2acf84dc (dax: move DAX-related functions to a new header)
  
  #include <trace/events/ext4.h>
  
diff --cc include/linux/fs.h
index 37d4ac39152e,72d8a844c692..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -46,6 -50,8 +46,11 @@@ struct vfsmount
  struct cred;
  struct swap_info_struct;
  struct seq_file;
++<<<<<<< HEAD
++=======
+ struct workqueue_struct;
+ struct iov_iter;
++>>>>>>> c94c2acf84dc (dax: move DAX-related functions to a new header)
  
  extern void __init inode_init(void);
  extern void __init inode_init_early(void);
@@@ -2706,20 -2677,6 +2711,23 @@@ extern loff_t fixed_size_llseek(struct 
  extern int generic_file_open(struct inode * inode, struct file * filp);
  extern int nonseekable_open(struct inode * inode, struct file * filp);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_FS_XIP
 +extern ssize_t xip_file_read(struct file *filp, char __user *buf, size_t len,
 +			     loff_t *ppos);
 +extern int xip_file_mmap(struct file * file, struct vm_area_struct * vma);
 +extern ssize_t xip_file_write(struct file *filp, const char __user *buf,
 +			      size_t len, loff_t *ppos);
 +extern int xip_truncate_page(struct address_space *mapping, loff_t from);
 +#else
 +static inline int xip_truncate_page(struct address_space *mapping, loff_t from)
 +{
 +	return 0;
 +}
 +#endif
 +
++=======
++>>>>>>> c94c2acf84dc (dax: move DAX-related functions to a new header)
  #ifdef CONFIG_BLOCK
  typedef void (dio_submit_t)(int rw, struct bio *bio, struct inode *inode,
  			    loff_t file_offset);
* Unmerged path fs/block_dev.c
diff --git a/fs/ext2/file.c b/fs/ext2/file.c
index a5b3a5db3120..61f37d21e5bc 100644
--- a/fs/ext2/file.c
+++ b/fs/ext2/file.c
@@ -20,6 +20,7 @@
 
 #include <linux/time.h>
 #include <linux/pagemap.h>
+#include <linux/dax.h>
 #include <linux/quotaops.h>
 #include "ext2.h"
 #include "xattr.h"
diff --git a/fs/ext2/inode.c b/fs/ext2/inode.c
index 115fa58bb9ae..c5ac66b0a55b 100644
--- a/fs/ext2/inode.c
+++ b/fs/ext2/inode.c
@@ -25,6 +25,7 @@
 #include <linux/time.h>
 #include <linux/highuid.h>
 #include <linux/pagemap.h>
+#include <linux/dax.h>
 #include <linux/quotaops.h>
 #include <linux/writeback.h>
 #include <linux/buffer_head.h>
* Unmerged path fs/ext4/file.c
* Unmerged path fs/ext4/indirect.c
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 235a73f02c8d..0c742b5ba6da 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -23,6 +23,7 @@
 #include <linux/jbd2.h>
 #include <linux/highuid.h>
 #include <linux/pagemap.h>
+#include <linux/dax.h>
 #include <linux/quotaops.h>
 #include <linux/string.h>
 #include <linux/buffer_head.h>
diff --git a/fs/xfs/xfs_buf.h b/fs/xfs/xfs_buf.h
index b5ec1b3719af..bdf6362c8867 100644
--- a/fs/xfs/xfs_buf.h
+++ b/fs/xfs/xfs_buf.h
@@ -23,6 +23,7 @@
 #include <linux/spinlock.h>
 #include <linux/mm.h>
 #include <linux/fs.h>
+#include <linux/dax.h>
 #include <linux/buffer_head.h>
 #include <linux/uio.h>
 
diff --git a/include/linux/dax.h b/include/linux/dax.h
new file mode 100644
index 000000000000..4f27d3dbf6e8
--- /dev/null
+++ b/include/linux/dax.h
@@ -0,0 +1,21 @@
+#ifndef _LINUX_DAX_H
+#define _LINUX_DAX_H
+
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <asm/pgtable.h>
+
+ssize_t dax_do_io(struct kiocb *, struct inode *, struct iov_iter *, loff_t,
+		  get_block_t, dio_iodone_t, int flags);
+int dax_clear_blocks(struct inode *, sector_t block, long size);
+int dax_zero_page_range(struct inode *, loff_t from, unsigned len, get_block_t);
+int dax_truncate_page(struct inode *, loff_t from, get_block_t);
+int dax_fault(struct vm_area_struct *, struct vm_fault *, get_block_t,
+		dax_iodone_t);
+int __dax_fault(struct vm_area_struct *, struct vm_fault *, get_block_t,
+		dax_iodone_t);
+int dax_pfn_mkwrite(struct vm_area_struct *, struct vm_fault *);
+#define dax_mkwrite(vma, vmf, gb, iod)		dax_fault(vma, vmf, gb, iod)
+#define __dax_mkwrite(vma, vmf, gb, iod)	__dax_fault(vma, vmf, gb, iod)
+
+#endif
* Unmerged path include/linux/fs.h
