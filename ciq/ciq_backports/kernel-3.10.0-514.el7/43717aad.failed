intel_pstate: Fix user input of min/max to legal policy region

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Chen Yu <yu.c.chen@intel.com>
commit 43717aadd2bc87fb10fbf1cd815c1cbae9bb95b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/43717aad.failed

In current code, max_perf_pct might be smaller than min_perf_pct
by improper user input:

$ grep . /sys/devices/system/cpu/intel_pstate/m*_perf_pct
/sys/devices/system/cpu/intel_pstate/max_perf_pct:100
/sys/devices/system/cpu/intel_pstate/min_perf_pct:100

$ echo 80 > /sys/devices/system/cpu/intel_pstate/max_perf_pct

$ grep . /sys/devices/system/cpu/intel_pstate/m*_perf_pct
/sys/devices/system/cpu/intel_pstate/max_perf_pct:80
/sys/devices/system/cpu/intel_pstate/min_perf_pct:100

Fix this problem by 2 steps:
 1. Normalize the user input to [min_policy, max_policy].
 2. Make sure max_perf_pct>=min_perf_pct, suggested by Seiichi Ikarashi.

	Signed-off-by: Chen Yu <yu.c.chen@intel.com>
	Acked-by: Kristen Carlson Accardi <kristen@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 43717aadd2bc87fb10fbf1cd815c1cbae9bb95b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 8d2d4333f09f,63075cc4a476..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -440,7 -441,11 +442,15 @@@ static ssize_t store_min_perf_pct(struc
  	ret = sscanf(buf, "%u", &input);
  	if (ret != 1)
  		return -EINVAL;
++<<<<<<< HEAD
 +	limits.min_perf_pct = clamp_t(int, input, 0 , 100);
++=======
+ 
+ 	limits.min_sysfs_pct = clamp_t(int, input, 0 , 100);
+ 	limits.min_perf_pct = max(limits.min_policy_pct, limits.min_sysfs_pct);
+ 	limits.min_perf_pct = min(limits.max_policy_pct, limits.min_perf_pct);
+ 	limits.min_perf_pct = min(limits.max_perf_pct, limits.min_perf_pct);
++>>>>>>> 43717aadd2bc (intel_pstate: Fix user input of min/max to legal policy region)
  	limits.min_perf = div_fp(int_tofp(limits.min_perf_pct), int_tofp(100));
  
  	if (hwp_active)
@@@ -980,13 -991,21 +990,28 @@@ static int intel_pstate_set_policy(stru
  		return 0;
  	}
  
++<<<<<<< HEAD
 +	limits.min_perf_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
 +	limits.min_perf_pct = clamp_t(int, limits.min_perf_pct, 0 , 100);
 +	limits.min_perf = div_fp(int_tofp(limits.min_perf_pct), int_tofp(100));
 +
++=======
+ 	limits.min_policy_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
+ 	limits.min_policy_pct = clamp_t(int, limits.min_policy_pct, 0 , 100);
++>>>>>>> 43717aadd2bc (intel_pstate: Fix user input of min/max to legal policy region)
  	limits.max_policy_pct = (policy->max * 100) / policy->cpuinfo.max_freq;
  	limits.max_policy_pct = clamp_t(int, limits.max_policy_pct, 0 , 100);
+ 
+ 	/* Normalize user input to [min_policy_pct, max_policy_pct] */
+ 	limits.min_perf_pct = max(limits.min_policy_pct, limits.min_sysfs_pct);
+ 	limits.min_perf_pct = min(limits.max_policy_pct, limits.min_perf_pct);
  	limits.max_perf_pct = min(limits.max_policy_pct, limits.max_sysfs_pct);
+ 	limits.max_perf_pct = max(limits.min_policy_pct, limits.max_perf_pct);
+ 
+ 	/* Make sure min_perf_pct <= max_perf_pct */
+ 	limits.min_perf_pct = min(limits.max_perf_pct, limits.min_perf_pct);
+ 
+ 	limits.min_perf = div_fp(int_tofp(limits.min_perf_pct), int_tofp(100));
  	limits.max_perf = div_fp(int_tofp(limits.max_perf_pct), int_tofp(100));
  
  	if (hwp_active)
* Unmerged path drivers/cpufreq/intel_pstate.c
