hung_task: check the value of "sysctl_hung_task_timeout_sec"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Liu Hua <sdu.liu@huawei.com>
commit 80df28476505ed4e6701c3448c63c9229a50c655
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/80df2847.failed

As sysctl_hung_task_timeout_sec is unsigned long, when this value is
larger then LONG_MAX/HZ, the function schedule_timeout_interruptible in
watchdog will return immediately without sleep and with print :

  schedule_timeout: wrong timeout value ffffffffffffff83

and then the funtion watchdog will call schedule_timeout_interruptible
again and again.  The screen will be filled with

	"schedule_timeout: wrong timeout value ffffffffffffff83"

This patch does some check and correction in sysctl, to let the function
schedule_timeout_interruptible allways get the valid parameter.

	Signed-off-by: Liu Hua <sdu.liu@huawei.com>
	Tested-by: Satoru Takeuchi <satoru.takeuchi@gmail.com>
	Cc: <stable@vger.kernel.org>	[3.4+]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 80df28476505ed4e6701c3448c63c9229a50c655)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/sysctl/kernel.txt
diff --cc Documentation/sysctl/kernel.txt
index 7bff85a472ae,9886c3d57fc2..000000000000
--- a/Documentation/sysctl/kernel.txt
+++ b/Documentation/sysctl/kernel.txt
@@@ -295,6 -292,46 +295,49 @@@ Default value is "/sbin/hotplug"
  
  ==============================================================
  
++<<<<<<< HEAD
++=======
+ hung_task_panic:
+ 
+ Controls the kernel's behavior when a hung task is detected.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ 0: continue operation. This is the default behavior.
+ 
+ 1: panic immediately.
+ 
+ ==============================================================
+ 
+ hung_task_check_count:
+ 
+ The upper bound on the number of tasks that are checked.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ ==============================================================
+ 
+ hung_task_timeout_secs:
+ 
+ Check interval. When a task in D state did not get scheduled
+ for more than this value report a warning.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ 0: means infinite timeout - no checking done.
+ Possible values to set are in range {0..LONG_MAX/HZ}.
+ 
+ ==============================================================
+ 
+ hung_task_warnings:
+ 
+ The maximum number of warnings to report. During a check interval
+ if a hung task is detected, this value is decreased by 1.
+ When this value reaches 0, no more warnings will be reported.
+ This file shows up if CONFIG_DETECT_HUNG_TASK is enabled.
+ 
+ -1: report an infinite number of warnings.
+ 
+ ==============================================================
+ 
++>>>>>>> 80df28476505 (hung_task: check the value of "sysctl_hung_task_timeout_sec")
  kexec_load_disabled:
  
  A toggle indicating if the kexec_load syscall has been disabled. This
* Unmerged path Documentation/sysctl/kernel.txt
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 650fd94446e0..2eceadb9fe4b 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -142,6 +142,11 @@ static int min_percpu_pagelist_fract = 8;
 static int ngroups_max = NGROUPS_MAX;
 static const int cap_last_cap = CAP_LAST_CAP;
 
+/*this is needed for proc_doulongvec_minmax of sysctl_hung_task_timeout_secs */
+#ifdef CONFIG_DETECT_HUNG_TASK
+static unsigned long hung_task_timeout_max = (LONG_MAX/HZ);
+#endif
+
 #ifdef CONFIG_INOTIFY_USER
 #include <linux/inotify.h>
 #endif
@@ -1015,6 +1020,7 @@ static struct ctl_table kern_table[] = {
 		.maxlen		= sizeof(unsigned long),
 		.mode		= 0644,
 		.proc_handler	= proc_dohung_task_timeout_secs,
+		.extra2		= &hung_task_timeout_max,
 	},
 	{
 		.procname	= "hung_task_warnings",
