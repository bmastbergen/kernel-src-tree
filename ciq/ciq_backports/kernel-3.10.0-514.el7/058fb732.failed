x86/asm/entry: Create stack frames in thunk functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] revert "asm/entry: Create stack frames in thunk functions" (Josh Poimboeuf) [1347232]
Rebuild_FUZZ: 88.29%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 058fb73274f9e7eb72acc9836cbb2c4a9f9659a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/058fb732.failed

Thunk functions are callable non-leaf functions that don't honor
CONFIG_FRAME_POINTER, which can result in bad stack traces.  Also they
aren't annotated as ELF callable functions which can confuse tooling.

Create stack frames for them when CONFIG_FRAME_POINTER is enabled and
add the ELF function type.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Chris J Arges <chris.j.arges@canonical.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: live-patching@vger.kernel.org
Link: http://lkml.kernel.org/r/4373e5bff459b9fd66ce5d45bfcc881a5c202643.1453405861.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 058fb73274f9e7eb72acc9836cbb2c4a9f9659a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/lib/thunk_64.S
diff --cc arch/x86/lib/thunk_64.S
index a63efd6bb6a5,98df1fa8825c..000000000000
--- a/arch/x86/lib/thunk_64.S
+++ b/arch/x86/lib/thunk_64.S
@@@ -6,20 -6,31 +6,31 @@@
   * Subject to the GNU public license, v.2. No warranty of any kind.
   */
  #include <linux/linkage.h>
++<<<<<<< HEAD:arch/x86/lib/thunk_64.S
 +#include <asm/dwarf2.h>
 +#include <asm/calling.h>
++=======
+ #include "calling.h"
+ #include <asm/asm.h>
+ #include <asm/frame.h>
++>>>>>>> 058fb73274f9 (x86/asm/entry: Create stack frames in thunk functions):arch/x86/entry/thunk_64.S
  
  	/* rdi:	arg1 ... normal C conventions. rax is saved/restored. */
  	.macro THUNK name, func, put_ret_addr_in_rdi=0
  	.globl \name
+ 	.type \name, @function
  \name:
++<<<<<<< HEAD:arch/x86/lib/thunk_64.S
 +	CFI_STARTPROC
++=======
+ 	FRAME_BEGIN
++>>>>>>> 058fb73274f9 (x86/asm/entry: Create stack frames in thunk functions):arch/x86/entry/thunk_64.S
  
  	/* this one pushes 9 elems, the next one would be %rIP */
 -	pushq %rdi
 -	pushq %rsi
 -	pushq %rdx
 -	pushq %rcx
 -	pushq %rax
 -	pushq %r8
 -	pushq %r9
 -	pushq %r10
 -	pushq %r11
 +	SAVE_ARGS
  
  	.if \put_ret_addr_in_rdi
 -	/* 9*8(%rsp) is return addr on stack */
 -	movq 9*8(%rsp), %rdi
 +	movq_cfi_restore 9*8, rdi
  	.endif
  
  	call \func
@@@ -36,10 -47,25 +47,23 @@@
  	THUNK lockdep_sys_exit_thunk,lockdep_sys_exit
  #endif
  
 -#ifdef CONFIG_PREEMPT
 -	THUNK ___preempt_schedule, preempt_schedule
 -	THUNK ___preempt_schedule_notrace, preempt_schedule_notrace
 -#endif
 -
 -#if defined(CONFIG_TRACE_IRQFLAGS) \
 - || defined(CONFIG_DEBUG_LOCK_ALLOC) \
 - || defined(CONFIG_PREEMPT)
 +	/* SAVE_ARGS below is used only for the .cfi directives it contains. */
 +	CFI_STARTPROC
 +	SAVE_ARGS
  restore:
++<<<<<<< HEAD:arch/x86/lib/thunk_64.S
 +	RESTORE_ARGS
++=======
+ 	popq %r11
+ 	popq %r10
+ 	popq %r9
+ 	popq %r8
+ 	popq %rax
+ 	popq %rcx
+ 	popq %rdx
+ 	popq %rsi
+ 	popq %rdi
+ 	FRAME_END
++>>>>>>> 058fb73274f9 (x86/asm/entry: Create stack frames in thunk functions):arch/x86/entry/thunk_64.S
  	ret
 -	_ASM_NOKPROBE(restore)
 -#endif
 +	CFI_ENDPROC
* Unmerged path arch/x86/lib/thunk_64.S
