MD: set journal disk ->raid_disk

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [md] set journal disk ->raid_disk (Jes Sorensen) [1250578 1265947 1273343 1299140 1307091 1312828 1320563 1340839]
Rebuild_FUZZ: 93.33%
commit-author Shaohua Li <shli@fb.com>
commit f2076e7d0643d15b11db979acc7cffd2e8d69e77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f2076e7d.failed

Set journal disk ->raid_disk to >=0, I choose raid_disks + 1 instead of
0, because we already have a disk with ->raid_disk 0 and this causes
sysfs entry creation conflict. A lot of places assumes disk with
->raid_disk >=0 is normal raid disk, so we add check for journal disk.

	Signed-off-by: Shaohua Li <shli@fb.com>
	Signed-off-by: NeilBrown <neilb@suse.com>
(cherry picked from commit f2076e7d0643d15b11db979acc7cffd2e8d69e77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
#	drivers/md/raid5.c
diff --cc drivers/md/md.c
index 48bd208f28bf,b5057596b630..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -1657,6 -1639,19 +1657,22 @@@ static int super_1_validate(struct mdde
  		case MD_DISK_ROLE_FAULTY: /* faulty */
  			set_bit(Faulty, &rdev->flags);
  			break;
++<<<<<<< HEAD
++=======
+ 		case MD_DISK_ROLE_JOURNAL: /* journal device */
+ 			if (!(le32_to_cpu(sb->feature_map) & MD_FEATURE_JOURNAL)) {
+ 				/* journal device without journal feature */
+ 				printk(KERN_WARNING
+ 				  "md: journal device provided without journal feature, ignoring the device\n");
+ 				return -EINVAL;
+ 			}
+ 			set_bit(Journal, &rdev->flags);
+ 			rdev->journal_tail = le64_to_cpu(sb->journal_tail);
+ 			if (mddev->recovery_cp == MaxSector)
+ 				set_bit(MD_JOURNAL_CLEAN, &mddev->flags);
+ 			rdev->raid_disk = mddev->raid_disks;
+ 			break;
++>>>>>>> f2076e7d0643 (MD: set journal disk ->raid_disk)
  		default:
  			rdev->saved_raid_disk = role;
  			if ((le32_to_cpu(sb->feature_map) &
@@@ -7867,8 -8127,13 +7898,9 @@@ static int remove_and_add_spares(struc
  		goto no_add;
  
  	rdev_for_each(rdev, mddev) {
 -		if (this && this != rdev)
 -			continue;
 -		if (test_bit(Candidate, &rdev->flags))
 -			continue;
  		if (rdev->raid_disk >= 0 &&
  		    !test_bit(In_sync, &rdev->flags) &&
+ 		    !test_bit(Journal, &rdev->flags) &&
  		    !test_bit(Faulty, &rdev->flags))
  			spares++;
  		if (rdev->raid_disk >= 0)
diff --cc drivers/md/raid5.c
index f90d9dae25ba,e5befa356dbe..000000000000
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@@ -6624,6 -6693,11 +6624,14 @@@ static int run(struct mddev *mddev
  
  	rdev_for_each(rdev, mddev) {
  		long long diff;
++<<<<<<< HEAD
++=======
+ 
+ 		if (test_bit(Journal, &rdev->flags)) {
+ 			journal_dev = rdev;
+ 			continue;
+ 		}
++>>>>>>> f2076e7d0643 (MD: set journal disk ->raid_disk)
  		if (rdev->raid_disk < 0)
  			continue;
  		diff = (rdev->new_data_offset - rdev->data_offset);
* Unmerged path drivers/md/md.c
* Unmerged path drivers/md/raid5.c
