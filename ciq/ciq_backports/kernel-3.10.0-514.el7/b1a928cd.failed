PCI: Add DMA alias quirk for mic_x200_dma

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [pci] Add DMA alias quirk for mic_x200_dma (Jerry Snitselaar) [1299853]
Rebuild_FUZZ: 93.51%
commit-author Jacek Lawrynowicz <jacek.lawrynowicz@intel.com>
commit b1a928cdb477037fb7c10fbf94c47f65f2bcce77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b1a928cd.failed

The MIC x200 NTB forwards DMA transactions upstream using multiple alien
RIDs.  These RIDs have to be added as aliases to the DMA device to allow
buffer access when the IOMMU is enabled.

	Signed-off-by: Jacek Lawrynowicz <jacek.lawrynowicz@intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
	Acked-by: David Woodhouse <David.Woodhouse@intel.com>
(cherry picked from commit b1a928cdb477037fb7c10fbf94c47f65f2bcce77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/quirks.c
diff --cc drivers/pci/quirks.c
index 3f0d54b18af9,8889ac433cf1..000000000000
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@@ -3600,6 -3725,100 +3600,103 @@@ DECLARE_PCI_FIXUP_HEADER(0x1283, 0x8892
  DECLARE_PCI_FIXUP_HEADER(0x8086, 0x244e, quirk_use_pcie_bridge_dma_alias);
  
  /*
++<<<<<<< HEAD
++=======
+  * MIC x200 NTB forwards PCIe traffic using multiple alien RIDs. They have to
+  * be added as aliases to the DMA device in order to allow buffer access
+  * when IOMMU is enabled. Following devfns have to match RIT-LUT table
+  * programmed in the EEPROM.
+  */
+ static void quirk_mic_x200_dma_alias(struct pci_dev *pdev)
+ {
+ 	pci_add_dma_alias(pdev, PCI_DEVFN(0x10, 0x0));
+ 	pci_add_dma_alias(pdev, PCI_DEVFN(0x11, 0x0));
+ 	pci_add_dma_alias(pdev, PCI_DEVFN(0x12, 0x3));
+ }
+ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x2260, quirk_mic_x200_dma_alias);
+ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x2264, quirk_mic_x200_dma_alias);
+ 
+ /*
+  * Intersil/Techwell TW686[4589]-based video capture cards have an empty (zero)
+  * class code.  Fix it.
+  */
+ static void quirk_tw686x_class(struct pci_dev *pdev)
+ {
+ 	u32 class = pdev->class;
+ 
+ 	/* Use "Multimedia controller" class */
+ 	pdev->class = (PCI_CLASS_MULTIMEDIA_OTHER << 8) | 0x01;
+ 	dev_info(&pdev->dev, "TW686x PCI class overridden (%#08x -> %#08x)\n",
+ 		 class, pdev->class);
+ }
+ DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6864, PCI_CLASS_NOT_DEFINED, 8,
+ 			      quirk_tw686x_class);
+ DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6865, PCI_CLASS_NOT_DEFINED, 8,
+ 			      quirk_tw686x_class);
+ DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6868, PCI_CLASS_NOT_DEFINED, 8,
+ 			      quirk_tw686x_class);
+ DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6869, PCI_CLASS_NOT_DEFINED, 8,
+ 			      quirk_tw686x_class);
+ 
+ /*
+  * Per PCIe r3.0, sec 2.2.9, "Completion headers must supply the same
+  * values for the Attribute as were supplied in the header of the
+  * corresponding Request, except as explicitly allowed when IDO is used."
+  *
+  * If a non-compliant device generates a completion with a different
+  * attribute than the request, the receiver may accept it (which itself
+  * seems non-compliant based on sec 2.3.2), or it may handle it as a
+  * Malformed TLP or an Unexpected Completion, which will probably lead to a
+  * device access timeout.
+  *
+  * If the non-compliant device generates completions with zero attributes
+  * (instead of copying the attributes from the request), we can work around
+  * this by disabling the "Relaxed Ordering" and "No Snoop" attributes in
+  * upstream devices so they always generate requests with zero attributes.
+  *
+  * This affects other devices under the same Root Port, but since these
+  * attributes are performance hints, there should be no functional problem.
+  *
+  * Note that Configuration Space accesses are never supposed to have TLP
+  * Attributes, so we're safe waiting till after any Configuration Space
+  * accesses to do the Root Port fixup.
+  */
+ static void quirk_disable_root_port_attributes(struct pci_dev *pdev)
+ {
+ 	struct pci_dev *root_port = pci_find_pcie_root_port(pdev);
+ 
+ 	if (!root_port) {
+ 		dev_warn(&pdev->dev, "PCIe Completion erratum may cause device errors\n");
+ 		return;
+ 	}
+ 
+ 	dev_info(&root_port->dev, "Disabling No Snoop/Relaxed Ordering Attributes to avoid PCIe Completion erratum in %s\n",
+ 		 dev_name(&pdev->dev));
+ 	pcie_capability_clear_and_set_word(root_port, PCI_EXP_DEVCTL,
+ 					   PCI_EXP_DEVCTL_RELAX_EN |
+ 					   PCI_EXP_DEVCTL_NOSNOOP_EN, 0);
+ }
+ 
+ /*
+  * The Chelsio T5 chip fails to copy TLP Attributes from a Request to the
+  * Completion it generates.
+  */
+ static void quirk_chelsio_T5_disable_root_port_attributes(struct pci_dev *pdev)
+ {
+ 	/*
+ 	 * This mask/compare operation selects for Physical Function 4 on a
+ 	 * T5.  We only need to fix up the Root Port once for any of the
+ 	 * PFs.  PF[0..3] have PCI Device IDs of 0x50xx, but PF4 is uniquely
+ 	 * 0x54xx so we use that one,
+ 	 */
+ 	if ((pdev->device & 0xff00) == 0x5400)
+ 		quirk_disable_root_port_attributes(pdev);
+ }
+ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_CHELSIO, PCI_ANY_ID,
+ 			 quirk_chelsio_T5_disable_root_port_attributes);
+ 
+ /*
++>>>>>>> b1a928cdb477 (PCI: Add DMA alias quirk for mic_x200_dma)
   * AMD has indicated that the devices below do not support peer-to-peer
   * in any system where they are found in the southbridge with an AMD
   * IOMMU in the system.  Multifunction devices that do not support
* Unmerged path drivers/pci/quirks.c
