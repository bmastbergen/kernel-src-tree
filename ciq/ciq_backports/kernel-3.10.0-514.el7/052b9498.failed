netfilter: nf_reject_ipv4: split nf_send_reset() in smaller functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 052b9498eea532deb5de75277a53f6e0623215dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/052b9498.failed

That can be reused by the reject bridge expression to build the reject
packet. The new functions are:

* nf_reject_ip_tcphdr_get(): to sanitize and to obtain the TCP header.
* nf_reject_iphdr_put(): to build the IPv4 header.
* nf_reject_ip_tcphdr_put(): to build the TCP header.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 052b9498eea532deb5de75277a53f6e0623215dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/ipv4/nf_reject.h
#	net/ipv4/netfilter/nf_reject_ipv4.c
diff --cc include/net/netfilter/ipv4/nf_reject.h
index 00e9cef81939,03e928a55229..000000000000
--- a/include/net/netfilter/ipv4/nf_reject.h
+++ b/include/net/netfilter/ipv4/nf_reject.h
@@@ -1,10 -1,8 +1,15 @@@
  #ifndef _IPV4_NF_REJECT_H
  #define _IPV4_NF_REJECT_H
  
++<<<<<<< HEAD
 +#include <net/ip.h>
 +#include <net/tcp.h>
 +#include <net/route.h>
 +#include <net/dst.h>
++=======
+ #include <linux/skbuff.h>
+ #include <net/ip.h>
++>>>>>>> 052b9498eea5 (netfilter: nf_reject_ipv4: split nf_send_reset() in smaller functions)
  #include <net/icmp.h>
  
  static inline void nf_send_unreach(struct sk_buff *skb_in, int code)
@@@ -12,118 -10,14 +17,126 @@@
  	icmp_send(skb_in, ICMP_DEST_UNREACH, code, 0);
  }
  
 -void nf_send_reset(struct sk_buff *oldskb, int hook);
 +/* Send RST reply */
 +static void nf_send_reset(struct sk_buff *oldskb, int hook)
 +{
 +	struct sk_buff *nskb;
 +	const struct iphdr *oiph;
 +	struct iphdr *niph;
 +	const struct tcphdr *oth;
 +	struct tcphdr _otcph, *tcph;
 +
 +	/* IP header checks: fragment. */
 +	if (ip_hdr(oldskb)->frag_off & htons(IP_OFFSET))
 +		return;
 +
 +	oth = skb_header_pointer(oldskb, ip_hdrlen(oldskb),
 +				 sizeof(_otcph), &_otcph);
 +	if (oth == NULL)
 +		return;
 +
 +	/* No RST for RST. */
 +	if (oth->rst)
 +		return;
 +
 +	if (skb_rtable(oldskb)->rt_flags & (RTCF_BROADCAST | RTCF_MULTICAST))
 +		return;
 +
 +	/* Check checksum */
 +	if (nf_ip_checksum(oldskb, hook, ip_hdrlen(oldskb), IPPROTO_TCP))
 +		return;
 +	oiph = ip_hdr(oldskb);
 +
 +	nskb = alloc_skb(sizeof(struct iphdr) + sizeof(struct tcphdr) +
 +			 LL_MAX_HEADER, GFP_ATOMIC);
 +	if (!nskb)
 +		return;
 +
 +	skb_reserve(nskb, LL_MAX_HEADER);
 +
 +	skb_reset_network_header(nskb);
 +	niph = (struct iphdr *)skb_put(nskb, sizeof(struct iphdr));
 +	niph->version	= 4;
 +	niph->ihl	= sizeof(struct iphdr) / 4;
 +	niph->tos	= 0;
 +	niph->id	= 0;
 +	niph->frag_off	= htons(IP_DF);
 +	niph->protocol	= IPPROTO_TCP;
 +	niph->check	= 0;
 +	niph->saddr	= oiph->daddr;
 +	niph->daddr	= oiph->saddr;
 +
 +	skb_reset_transport_header(nskb);
 +	tcph = (struct tcphdr *)skb_put(nskb, sizeof(struct tcphdr));
 +	memset(tcph, 0, sizeof(*tcph));
 +	tcph->source	= oth->dest;
 +	tcph->dest	= oth->source;
 +	tcph->doff	= sizeof(struct tcphdr) / 4;
 +
 +	if (oth->ack)
 +		tcph->seq = oth->ack_seq;
 +	else {
 +		tcph->ack_seq = htonl(ntohl(oth->seq) + oth->syn + oth->fin +
 +				      oldskb->len - ip_hdrlen(oldskb) -
 +				      (oth->doff << 2));
 +		tcph->ack = 1;
 +	}
 +
 +	tcph->rst	= 1;
 +	tcph->check = ~tcp_v4_check(sizeof(struct tcphdr), niph->saddr,
 +				    niph->daddr, 0);
 +	nskb->ip_summed = CHECKSUM_PARTIAL;
 +	nskb->csum_start = (unsigned char *)tcph - nskb->head;
 +	nskb->csum_offset = offsetof(struct tcphdr, check);
 +
 +	/* ip_route_me_harder expects skb->dst to be set */
 +	skb_dst_set_noref(nskb, skb_dst(oldskb));
 +
 +	nskb->protocol = htons(ETH_P_IP);
 +	if (ip_route_me_harder(nskb, RTN_UNSPEC))
 +		goto free_nskb;
 +
 +	niph->ttl	= ip4_dst_hoplimit(skb_dst(nskb));
 +
 +	/* "Never happens" */
 +	if (nskb->len > dst_mtu(skb_dst(nskb)))
 +		goto free_nskb;
 +
 +	nf_ct_attach(nskb, oldskb);
 +
 +#ifdef CONFIG_BRIDGE_NETFILTER
 +	/* If we use ip_local_out for bridged traffic, the MAC source on
 +	 * the RST will be ours, instead of the destination's.  This confuses
 +	 * some routers/firewalls, and they drop the packet.  So we need to
 +	 * build the eth header using the original destination's MAC as the
 +	 * source, and send the RST packet directly.
 +	 */
 +	if (oldskb->nf_bridge) {
 +		struct ethhdr *oeth = eth_hdr(oldskb);
 +		nskb->dev = oldskb->nf_bridge->physindev;
 +		niph->tot_len = htons(nskb->len);
 +		ip_send_check(niph);
 +		if (dev_hard_header(nskb, nskb->dev, ntohs(nskb->protocol),
 +				    oeth->h_source, oeth->h_dest, nskb->len) < 0)
 +			goto free_nskb;
 +		dev_queue_xmit(nskb);
 +	} else
 +#endif
 +		ip_local_out(nskb);
 +
 +	return;
 +
 + free_nskb:
 +	kfree_skb(nskb);
 +}
 +
  
+ const struct tcphdr *nf_reject_ip_tcphdr_get(struct sk_buff *oldskb,
+ 					     struct tcphdr *_oth, int hook);
+ struct iphdr *nf_reject_iphdr_put(struct sk_buff *nskb,
+ 				  const struct sk_buff *oldskb,
+ 				  __be16 protocol, int ttl);
+ void nf_reject_ip_tcphdr_put(struct sk_buff *nskb, const struct sk_buff *oldskb,
+ 			     const struct tcphdr *oth);
+ 
  #endif /* _IPV4_NF_REJECT_H */
* Unmerged path net/ipv4/netfilter/nf_reject_ipv4.c
* Unmerged path include/net/netfilter/ipv4/nf_reject.h
* Unmerged path net/ipv4/netfilter/nf_reject_ipv4.c
