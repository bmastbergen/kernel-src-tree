locks: inline posix_lock_file_wait and flock_lock_file_wait

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jeff Layton <jeff.layton@primarydata.com>
commit ee296d7c5709440f8abd36b5b65c6b3e388538d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ee296d7c.failed

They just call file_inode and then the corresponding *_inode_file_wait
function. Just make them static inlines instead.

	Signed-off-by: Jeff Layton <jeff.layton@primarydata.com>
(cherry picked from commit ee296d7c5709440f8abd36b5b65c6b3e388538d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/locks.c
#	include/linux/fs.h
diff --cc fs/locks.c
index 4da168d46db3,d3d558ba4da7..000000000000
--- a/fs/locks.c
+++ b/fs/locks.c
@@@ -1166,7 -1187,7 +1166,11 @@@ int posix_lock_file_wait(struct file *f
  	}
  	return error;
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL(posix_lock_file_wait);
++=======
+ EXPORT_SYMBOL(posix_lock_inode_wait);
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  
  /**
   * locks_mandatory_locked - Check for an active lock
@@@ -1808,9 -1872,8 +1812,12 @@@ int flock_lock_file_wait(struct file *f
  	}
  	return error;
  }
 -EXPORT_SYMBOL(flock_lock_inode_wait);
  
++<<<<<<< HEAD
 +EXPORT_SYMBOL(flock_lock_file_wait);
 +
++=======
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  /**
   *	sys_flock: - flock() system call.
   *	@fd: the file descriptor to lock.
diff --cc include/linux/fs.h
index 37d4ac39152e,cc008c338f5a..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -1096,12 -1046,12 +1096,20 @@@ extern void locks_remove_flock(struct f
  extern void locks_release_private(struct file_lock *);
  extern void posix_test_lock(struct file *, struct file_lock *);
  extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
++<<<<<<< HEAD
 +extern int posix_lock_file_wait(struct file *, struct file_lock *);
++=======
+ extern int posix_lock_inode_wait(struct inode *, struct file_lock *);
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  extern int posix_unblock_lock(struct file_lock *);
  extern int vfs_test_lock(struct file *, struct file_lock *);
  extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
  extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
++<<<<<<< HEAD
 +extern int flock_lock_file_wait(struct file *filp, struct file_lock *fl);
++=======
+ extern int flock_lock_inode_wait(struct inode *inode, struct file_lock *fl);
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
  extern void lease_get_mtime(struct inode *, struct timespec *time);
  extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
@@@ -1182,7 -1137,8 +1190,12 @@@ static inline int posix_lock_file(struc
  	return -ENOLCK;
  }
  
++<<<<<<< HEAD
 +static inline int posix_lock_file_wait(struct file *filp, struct file_lock *fl)
++=======
+ static inline int posix_lock_inode_wait(struct inode *inode,
+ 					struct file_lock *fl)
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  {
  	return -ENOLCK;
  }
@@@ -1208,8 -1164,8 +1221,13 @@@ static inline int vfs_cancel_lock(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +static inline int flock_lock_file_wait(struct file *filp,
 +				       struct file_lock *request)
++=======
+ static inline int flock_lock_inode_wait(struct inode *inode,
+ 					struct file_lock *request)
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  {
  	return -ENOLCK;
  }
@@@ -2080,6 -2024,7 +2112,10 @@@ extern int current_umask(void)
  
  extern void ihold(struct inode * inode);
  extern void iput(struct inode *);
++<<<<<<< HEAD
++=======
+ extern int generic_update_time(struct inode *, struct timespec *, int);
++>>>>>>> ee296d7c5709 (locks: inline posix_lock_file_wait and flock_lock_file_wait)
  
  /* /sys/fs */
  extern struct kobject *fs_kobj;
* Unmerged path fs/locks.c
* Unmerged path include/linux/fs.h
