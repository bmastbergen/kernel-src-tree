perf: Fix cgroup scheduling in perf_enable_on_exec()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit 70a0165752944e0be0b1de4a9020473079962c18
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/70a01657.failed

There is a comment that states that perf_event_context_sched_in() will
also switch in the cgroup events, I cannot find it does so. Therefore
all the resulting logic goes out the window too.

Clean that up.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 70a0165752944e0be0b1de4a9020473079962c18)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/events/core.c
diff --cc kernel/events/core.c
index 4038d54962c2,e7bda0ed8d40..000000000000
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@@ -568,17 -572,14 +568,22 @@@ static inline void perf_cgroup_sched_ou
  	struct perf_cgroup *cgrp1;
  	struct perf_cgroup *cgrp2 = NULL;
  
 -	rcu_read_lock();
  	/*
  	 * we come here when we know perf_cgroup_events > 0
 -	 * we do not need to pass the ctx here because we know
 -	 * we are holding the rcu lock
  	 */
++<<<<<<< HEAD
 +	cgrp1 = perf_cgroup_from_task(task);
 +
 +	/*
 +	 * next is NULL when called from perf_event_enable_on_exec()
 +	 * that will systematically cause a cgroup_switch()
 +	 */
 +	if (next)
 +		cgrp2 = perf_cgroup_from_task(next);
++=======
+ 	cgrp1 = perf_cgroup_from_task(task, NULL);
+ 	cgrp2 = perf_cgroup_from_task(next, NULL);
++>>>>>>> 70a016575294 (perf: Fix cgroup scheduling in perf_enable_on_exec())
  
  	/*
  	 * only schedule out current cgroup events if we know
@@@ -595,13 -598,14 +600,18 @@@ static inline void perf_cgroup_sched_in
  	struct perf_cgroup *cgrp1;
  	struct perf_cgroup *cgrp2 = NULL;
  
 -	rcu_read_lock();
  	/*
  	 * we come here when we know perf_cgroup_events > 0
 -	 * we do not need to pass the ctx here because we know
 -	 * we are holding the rcu lock
  	 */
++<<<<<<< HEAD
 +	cgrp1 = perf_cgroup_from_task(task);
 +
 +	/* prev can never be NULL */
 +	cgrp2 = perf_cgroup_from_task(prev);
++=======
+ 	cgrp1 = perf_cgroup_from_task(task, NULL);
+ 	cgrp2 = perf_cgroup_from_task(prev, NULL);
++>>>>>>> 70a016575294 (perf: Fix cgroup scheduling in perf_enable_on_exec())
  
  	/*
  	 * only need to schedule in cgroup events if we are changing
* Unmerged path kernel/events/core.c
