mei: fix fasync return value on error

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit ed6dc538e5a36a331b6256d54f435c80f6715460
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ed6dc538.failed

fasync should return a negative value on error
and not poll mask POLLERR.

	Cc: <stable@vger.kernel.org> # 4.3+
	Cc: Al Viro <viro@ZenIV.linux.org.uk>
	Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit ed6dc538e5a36a331b6256d54f435c80f6715460)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/main.c
diff --cc drivers/misc/mei/main.c
index b23f9eba9e3a,677d0362f334..000000000000
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@@ -666,6 -650,66 +666,69 @@@ out
  	return mask;
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * mei_fasync - asynchronous io support
+  *
+  * @fd: file descriptor
+  * @file: pointer to file structure
+  * @band: band bitmap
+  *
+  * Return: negative on error,
+  *         0 if it did no changes,
+  *         and positive a process was added or deleted
+  */
+ static int mei_fasync(int fd, struct file *file, int band)
+ {
+ 
+ 	struct mei_cl *cl = file->private_data;
+ 
+ 	if (!mei_cl_is_connected(cl))
+ 		return -ENODEV;
+ 
+ 	return fasync_helper(fd, file, band, &cl->ev_async);
+ }
+ 
+ /**
+  * fw_status_show - mei device attribute show method
+  *
+  * @device: device pointer
+  * @attr: attribute pointer
+  * @buf:  char out buffer
+  *
+  * Return: number of the bytes printed into buf or error
+  */
+ static ssize_t fw_status_show(struct device *device,
+ 		struct device_attribute *attr, char *buf)
+ {
+ 	struct mei_device *dev = dev_get_drvdata(device);
+ 	struct mei_fw_status fw_status;
+ 	int err, i;
+ 	ssize_t cnt = 0;
+ 
+ 	mutex_lock(&dev->device_lock);
+ 	err = mei_fw_status(dev, &fw_status);
+ 	mutex_unlock(&dev->device_lock);
+ 	if (err) {
+ 		dev_err(device, "read fw_status error = %d\n", err);
+ 		return err;
+ 	}
+ 
+ 	for (i = 0; i < fw_status.count; i++)
+ 		cnt += scnprintf(buf + cnt, PAGE_SIZE - cnt, "%08X\n",
+ 				fw_status.status[i]);
+ 	return cnt;
+ }
+ static DEVICE_ATTR_RO(fw_status);
+ 
+ static struct attribute *mei_attrs[] = {
+ 	&dev_attr_fw_status.attr,
+ 	NULL
+ };
+ ATTRIBUTE_GROUPS(mei);
+ 
++>>>>>>> ed6dc538e5a3 (mei: fix fasync return value on error)
  /*
   * file operations structure will be used for mei char device.
   */
* Unmerged path drivers/misc/mei/main.c
