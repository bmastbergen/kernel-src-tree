bgmac: fix requests for extra polling calls from NAPI

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Rafał Miłecki <zajec5@gmail.com>
commit e580267df97eda407c525dbaee5430e0d51a0edb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e580267d.failed

After d75b1ade567f ("net: less interrupt masking in NAPI") polling
function has to return whole budget when it wants NAPI to call it again.

	Signed-off-by: Rafał Miłecki <zajec5@gmail.com>
	Cc: Felix Fietkau <nbd@openwrt.org>
Fixes: eb64e2923a886 ("bgmac: leave interrupts disabled as long as there is work to do")
	Acked-by: Felix Fietkau <nbd@openwrt.org>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e580267df97eda407c525dbaee5430e0d51a0edb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bgmac.c
diff --cc drivers/net/ethernet/broadcom/bgmac.c
index 1c6bc9678774,21e3c38c7c75..000000000000
--- a/drivers/net/ethernet/broadcom/bgmac.c
+++ b/drivers/net/ethernet/broadcom/bgmac.c
@@@ -1104,31 -1250,23 +1104,47 @@@ static irqreturn_t bgmac_interrupt(int 
  static int bgmac_poll(struct napi_struct *napi, int weight)
  {
  	struct bgmac *bgmac = container_of(napi, struct bgmac, napi);
 +	struct bgmac_dma_ring *ring;
  	int handled = 0;
  
++<<<<<<< HEAD
 +	if (bgmac->int_status & BGMAC_IS_TX0) {
 +		ring = &bgmac->tx_ring[0];
 +		bgmac_dma_tx_free(bgmac, ring);
 +		bgmac->int_status &= ~BGMAC_IS_TX0;
++=======
+ 	/* Ack */
+ 	bgmac_write(bgmac, BGMAC_INT_STATUS, ~0);
+ 
+ 	bgmac_dma_tx_free(bgmac, &bgmac->tx_ring[0]);
+ 	handled += bgmac_dma_rx_read(bgmac, &bgmac->rx_ring[0], weight);
+ 
+ 	/* Poll again if more events arrived in the meantime */
+ 	if (bgmac_read(bgmac, BGMAC_INT_STATUS) & (BGMAC_IS_TX0 | BGMAC_IS_RX))
+ 		return weight;
+ 
+ 	if (handled < weight) {
+ 		napi_complete(napi);
+ 		bgmac_chip_intrs_on(bgmac);
++>>>>>>> e580267df97e (bgmac: fix requests for extra polling calls from NAPI)
 +	}
 +
 +	if (bgmac->int_status & BGMAC_IS_RX) {
 +		ring = &bgmac->rx_ring[0];
 +		handled += bgmac_dma_rx_read(bgmac, ring, weight);
 +		bgmac->int_status &= ~BGMAC_IS_RX;
 +	}
 +
 +	if (bgmac->int_status) {
 +		bgmac_err(bgmac, "Unknown IRQs: 0x%08X\n", bgmac->int_status);
 +		bgmac->int_status = 0;
  	}
  
 +	if (handled < weight)
 +		napi_complete(napi);
 +
 +	bgmac_chip_intrs_on(bgmac);
 +
  	return handled;
  }
  
* Unmerged path drivers/net/ethernet/broadcom/bgmac.c
