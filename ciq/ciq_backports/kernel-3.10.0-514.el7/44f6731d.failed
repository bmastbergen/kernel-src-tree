cdc_ncm: Fix tx_bytes statistics

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bjørn Mork <bjorn@mork.no>
commit 44f6731d8b68fa02f5ed65eaceac41f8c3c9279e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/44f6731d.failed

The tx_curr_frame_payload field is u32. When we try to calculate a
small negative delta based on it, we end up with a positive integer
close to 2^32 instead.  So the tx_bytes pointer increases by about
2^32 for every transmitted frame.

Fix by calculating the delta as a signed long.

	Cc: Ben Hutchings <ben.hutchings@codethink.co.uk>
	Reported-by: Florian Bruhin <me@the-compiler.org>
Fixes: 7a1e890e2168 ("usbnet: Fix tx_bytes statistic running backward in cdc_ncm")
	Signed-off-by: Bjørn Mork <bjorn@mork.no>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 44f6731d8b68fa02f5ed65eaceac41f8c3c9279e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/cdc_ncm.c
diff --cc drivers/net/usb/cdc_ncm.c
index e977104210f9,8067b8fbb0ee..000000000000
--- a/drivers/net/usb/cdc_ncm.c
+++ b/drivers/net/usb/cdc_ncm.c
@@@ -806,7 -1172,18 +806,22 @@@ cdc_ncm_fill_tx_frame(struct usbnet *de
  
  	/* return skb */
  	ctx->tx_curr_skb = NULL;
++<<<<<<< HEAD
 +	dev->net->stats.tx_packets += ctx->tx_curr_frame_num;
++=======
+ 
+ 	/* keep private stats: framing overhead and number of NTBs */
+ 	ctx->tx_overhead += skb_out->len - ctx->tx_curr_frame_payload;
+ 	ctx->tx_ntbs++;
+ 
+ 	/* usbnet will count all the framing overhead by default.
+ 	 * Adjust the stats so that the tx_bytes counter show real
+ 	 * payload data instead.
+ 	 */
+ 	usbnet_set_skb_tx_stats(skb_out, n,
+ 				(long)ctx->tx_curr_frame_payload - skb_out->len);
+ 
++>>>>>>> 44f6731d8b68 (cdc_ncm: Fix tx_bytes statistics)
  	return skb_out;
  
  exit_no_skb:
* Unmerged path drivers/net/usb/cdc_ncm.c
