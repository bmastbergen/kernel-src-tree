scsi: disable automatic target scan

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [scsi] disable automatic target scan (Ewan Milne) [1088445]
Rebuild_FUZZ: 90.62%
commit-author Hannes Reinecke <hare@suse.de>
commit 1d64508810d8d15867251c75a68d7250278ce2bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1d645088.failed

On larger installations it is useful to disable automatic LUN scanning,
and only add the required LUNs via udev rules.  This can speed up bootup
dramatically.

This patch introduces a new scan module parameter value 'manual', which
works like 'none', but can be overridden by setting the 'rescan' value
from scsi_scan_target to 'SCSI_SCAN_MANUAL'.  And it updates all
relevant callers to set the 'rescan' value to 'SCSI_SCAN_MANUAL' if
invoked via the 'scan' option in sysfs.

	Signed-off-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Ewan D. Milne <emilne@redhat.com>
	Tested-by: Laurence Oberman <loberman@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 1d64508810d8d15867251c75a68d7250278ce2bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_priv.h
#	drivers/scsi/scsi_scan.c
#	drivers/scsi/scsi_transport_iscsi.c
#	drivers/scsi/snic/snic_disc.c
#	include/scsi/scsi_device.h
diff --cc drivers/scsi/scsi_priv.h
index b6c54de9e6ae,57a4b9973320..000000000000
--- a/drivers/scsi/scsi_priv.h
+++ b/drivers/scsi/scsi_priv.h
@@@ -115,9 -113,10 +115,13 @@@ extern void scsi_exit_procfs(void)
  #endif /* CONFIG_PROC_FS */
  
  /* scsi_scan.c */
 -extern char scsi_scan_type[];
  extern int scsi_complete_async_scans(void);
  extern int scsi_scan_host_selected(struct Scsi_Host *, unsigned int,
++<<<<<<< HEAD
 +				   unsigned int, unsigned int, int);
++=======
+ 				   unsigned int, u64, enum scsi_scan_mode);
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  extern void scsi_forget_host(struct Scsi_Host *);
  extern void scsi_rescan_device(struct device *);
  
diff --cc drivers/scsi/scsi_scan.c
index 20209c4d4196,6c8ad36560d1..000000000000
--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@@ -99,27 -96,14 +99,34 @@@ MODULE_PARM_DESC(max_luns
  #define SCSI_SCAN_TYPE_DEFAULT "sync"
  #endif
  
++<<<<<<< HEAD
 +static char scsi_scan_type[6] = SCSI_SCAN_TYPE_DEFAULT;
 +
 +#define MAX_INIT_REPORT_LUNS 511
++=======
+ char scsi_scan_type[7] = SCSI_SCAN_TYPE_DEFAULT;
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  
- module_param_string(scan, scsi_scan_type, sizeof(scsi_scan_type), S_IRUGO);
- MODULE_PARM_DESC(scan, "sync, async or none");
+ module_param_string(scan, scsi_scan_type, sizeof(scsi_scan_type),
+ 		    S_IRUGO|S_IWUSR);
+ MODULE_PARM_DESC(scan, "sync, async, manual, or none. "
+ 		 "Setting to 'manual' disables automatic scanning, but allows "
+ 		 "for manual device scan via the 'scan' sysfs attribute.");
  
 +/*
 + * max_scsi_report_luns: the maximum number of LUNS that will be
 + * returned from the REPORT LUNS command. 8 times this value must
 + * be allocated. In theory this could be up to an 8 byte value, but
 + * in practice, the maximum number of LUNs suppored by any device
 + * is about 16k.
 + */
 +static unsigned int max_scsi_report_luns = 16383;
 +
 +module_param_named(max_report_luns, max_scsi_report_luns, uint, S_IRUGO|S_IWUSR);
 +MODULE_PARM_DESC(max_report_luns,
 +		 "REPORT LUNS maximum number of LUNS received (should be"
 +		 " between 1 and 16383)");
 +
  static unsigned int scsi_inq_timeout = SCSI_TIMEOUT/HZ + 18;
  
  module_param_named(inq_timeout, scsi_inq_timeout, uint, S_IRUGO|S_IWUSR);
@@@ -1043,8 -1058,9 +1051,14 @@@ static unsigned char *scsi_inq_str(unsi
   *     SCSI_SCAN_LUN_PRESENT: a new scsi_device was allocated and initialized
   **/
  static int scsi_probe_and_add_lun(struct scsi_target *starget,
++<<<<<<< HEAD
 +				  uint lun, int *bflagsp,
 +				  struct scsi_device **sdevp, int rescan,
++=======
+ 				  u64 lun, int *bflagsp,
+ 				  struct scsi_device **sdevp,
+ 				  enum scsi_scan_mode rescan,
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  				  void *hostdata)
  {
  	struct scsi_device *sdev;
@@@ -1194,9 -1210,11 +1208,10 @@@
   *     Modifies sdevscan->lun.
   **/
  static void scsi_sequential_lun_scan(struct scsi_target *starget,
- 				     int bflags, int scsi_level, int rescan)
+ 				     int bflags, int scsi_level,
+ 				     enum scsi_scan_mode rescan)
  {
 -	uint max_dev_lun;
 -	u64 sparse_lun, lun;
 +	unsigned int sparse_lun, lun, max_dev_lun;
  	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
  
  	SCSI_LOG_SCAN_BUS(3, starget_printk(KERN_INFO, starget,
@@@ -1612,7 -1552,7 +1627,11 @@@ void scsi_rescan_device(struct device *
  EXPORT_SYMBOL(scsi_rescan_device);
  
  static void __scsi_scan_target(struct device *parent, unsigned int channel,
++<<<<<<< HEAD
 +		unsigned int id, unsigned int lun, int rescan)
++=======
+ 		unsigned int id, u64 lun, enum scsi_scan_mode rescan)
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  {
  	struct Scsi_Host *shost = dev_to_shost(parent);
  	int bflags = 0;
@@@ -1678,7 -1623,7 +1700,11 @@@
   *     sequential scan of LUNs on the target id.
   **/
  void scsi_scan_target(struct device *parent, unsigned int channel,
++<<<<<<< HEAD
 +		      unsigned int id, unsigned int lun, int rescan)
++=======
+ 		      unsigned int id, u64 lun, enum scsi_scan_mode rescan)
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  {
  	struct Scsi_Host *shost = dev_to_shost(parent);
  
@@@ -1698,7 -1647,8 +1728,12 @@@
  EXPORT_SYMBOL(scsi_scan_target);
  
  static void scsi_scan_channel(struct Scsi_Host *shost, unsigned int channel,
++<<<<<<< HEAD
 +			      unsigned int id, unsigned int lun, int rescan)
++=======
+ 			      unsigned int id, u64 lun,
+ 			      enum scsi_scan_mode rescan)
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  {
  	uint order_id;
  
@@@ -1729,10 -1679,11 +1764,15 @@@
  }
  
  int scsi_scan_host_selected(struct Scsi_Host *shost, unsigned int channel,
++<<<<<<< HEAD
 +			    unsigned int id, unsigned int lun, int rescan)
++=======
+ 			    unsigned int id, u64 lun,
+ 			    enum scsi_scan_mode rescan)
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  {
  	SCSI_LOG_SCAN_BUS(3, shost_printk (KERN_INFO, shost,
 -		"%s: <%u:%u:%llu>\n",
 +		"%s: <%u:%u:%u>\n",
  		__func__, channel, id, lun));
  
  	if (((channel != SCAN_WILD_CARD) && (channel > shost->max_channel)) ||
diff --cc drivers/scsi/scsi_transport_iscsi.c
index 769fa357c462,7a759a9257ea..000000000000
--- a/drivers/scsi/scsi_transport_iscsi.c
+++ b/drivers/scsi/scsi_transport_iscsi.c
@@@ -1782,7 -1782,8 +1782,12 @@@ EXPORT_SYMBOL_GPL(iscsi_scan_finished)
  struct iscsi_scan_data {
  	unsigned int channel;
  	unsigned int id;
++<<<<<<< HEAD
 +	unsigned int lun;
++=======
+ 	u64 lun;
+ 	enum scsi_scan_mode rescan;
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  };
  
  static int iscsi_user_scan_session(struct device *dev, void *data)
diff --cc include/scsi/scsi_device.h
index e1cb95bd1424,1d4a3297559e..000000000000
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@@ -467,7 -397,8 +473,12 @@@ extern void scsi_device_resume(struct s
  extern void scsi_target_quiesce(struct scsi_target *);
  extern void scsi_target_resume(struct scsi_target *);
  extern void scsi_scan_target(struct device *parent, unsigned int channel,
++<<<<<<< HEAD
 +			     unsigned int id, unsigned int lun, int rescan);
++=======
+ 			     unsigned int id, u64 lun,
+ 			     enum scsi_scan_mode rescan);
++>>>>>>> 1d64508810d8 (scsi: disable automatic target scan)
  extern void scsi_target_reap(struct scsi_target *);
  extern void scsi_target_block(struct device *);
  extern void scsi_target_unblock(struct device *, enum scsi_device_state);
* Unmerged path drivers/scsi/snic/snic_disc.c
diff --git a/drivers/infiniband/ulp/srp/ib_srp.c b/drivers/infiniband/ulp/srp/ib_srp.c
index 7b6298b022a8..d3f24f50fd8c 100644
--- a/drivers/infiniband/ulp/srp/ib_srp.c
+++ b/drivers/infiniband/ulp/srp/ib_srp.c
@@ -2744,7 +2744,7 @@ static int srp_add_target(struct srp_host *host, struct srp_target_port *target)
 	spin_unlock(&host->target_lock);
 
 	scsi_scan_target(&target->scsi_host->shost_gendev,
-			 0, target->scsi_id, SCAN_WILD_CARD, 0);
+			 0, target->scsi_id, SCAN_WILD_CARD, SCSI_SCAN_INITIAL);
 
 	if (!target->connected || target->qp_in_error) {
 		shost_printk(KERN_INFO, target->scsi_host,
diff --git a/drivers/message/fusion/mptspi.c b/drivers/message/fusion/mptspi.c
index 49d11338294b..63ddaf842893 100644
--- a/drivers/message/fusion/mptspi.c
+++ b/drivers/message/fusion/mptspi.c
@@ -1151,7 +1151,7 @@ static void mpt_work_wrapper(struct work_struct *work)
 	}
 	shost_printk(KERN_INFO, shost, MYIOC_s_FMT
 	    "Integrated RAID detects new device %d\n", ioc->name, disk);
-	scsi_scan_target(&ioc->sh->shost_gendev, 1, disk, 0, 1);
+	scsi_scan_target(&ioc->sh->shost_gendev, 1, disk, 0, SCSI_SCAN_RESCAN);
 }
 
 
diff --git a/drivers/s390/scsi/zfcp_unit.c b/drivers/s390/scsi/zfcp_unit.c
index 1cd2b99ab256..4605a37c19e2 100644
--- a/drivers/s390/scsi/zfcp_unit.c
+++ b/drivers/s390/scsi/zfcp_unit.c
@@ -26,7 +26,8 @@ void zfcp_unit_scsi_scan(struct zfcp_unit *unit)
 	lun = scsilun_to_int((struct scsi_lun *) &unit->fcp_lun);
 
 	if (rport && rport->port_state == FC_PORTSTATE_ONLINE)
-		scsi_scan_target(&rport->dev, 0, rport->scsi_target_id, lun, 1);
+		scsi_scan_target(&rport->dev, 0, rport->scsi_target_id, lun,
+				 SCSI_SCAN_RESCAN);
 }
 
 static void zfcp_unit_scsi_scan_work(struct work_struct *work)
* Unmerged path drivers/scsi/scsi_priv.h
diff --git a/drivers/scsi/scsi_proc.c b/drivers/scsi/scsi_proc.c
index 86f0c5d5c116..955c8fb7fc56 100644
--- a/drivers/scsi/scsi_proc.c
+++ b/drivers/scsi/scsi_proc.c
@@ -251,7 +251,8 @@ static int scsi_add_single_device(uint host, uint channel, uint id, uint lun)
 	if (shost->transportt->user_scan)
 		error = shost->transportt->user_scan(shost, channel, id, lun);
 	else
-		error = scsi_scan_host_selected(shost, channel, id, lun, 1);
+		error = scsi_scan_host_selected(shost, channel, id, lun,
+						SCSI_SCAN_MANUAL);
 	scsi_host_put(shost);
 	return error;
 }
* Unmerged path drivers/scsi/scsi_scan.c
diff --git a/drivers/scsi/scsi_sysfs.c b/drivers/scsi/scsi_sysfs.c
index 97a026ae730c..1eae41b40829 100644
--- a/drivers/scsi/scsi_sysfs.c
+++ b/drivers/scsi/scsi_sysfs.c
@@ -115,7 +115,8 @@ static int scsi_scan(struct Scsi_Host *shost, const char *str)
 	if (shost->transportt->user_scan)
 		res = shost->transportt->user_scan(shost, channel, id, lun);
 	else
-		res = scsi_scan_host_selected(shost, channel, id, lun, 1);
+		res = scsi_scan_host_selected(shost, channel, id, lun,
+					      SCSI_SCAN_MANUAL);
 	return res;
 }
 
diff --git a/drivers/scsi/scsi_transport_fc.c b/drivers/scsi/scsi_transport_fc.c
index ec2701a9f411..e17cb5aaaef7 100644
--- a/drivers/scsi/scsi_transport_fc.c
+++ b/drivers/scsi/scsi_transport_fc.c
@@ -2111,7 +2111,8 @@ fc_user_scan_tgt(struct Scsi_Host *shost, uint channel, uint id, uint lun)
 		if ((channel == rport->channel) &&
 		    (id == rport->scsi_target_id)) {
 			spin_unlock_irqrestore(shost->host_lock, flags);
-			scsi_scan_target(&rport->dev, channel, id, lun, 1);
+			scsi_scan_target(&rport->dev, channel, id, lun,
+					 SCSI_SCAN_MANUAL);
 			return;
 		}
 	}
@@ -3289,7 +3290,8 @@ fc_scsi_scan_rport(struct work_struct *work)
 	    (rport->roles & FC_PORT_ROLE_FCP_TARGET) &&
 	    !(i->f->disable_target_scan)) {
 		scsi_scan_target(&rport->dev, rport->channel,
-			rport->scsi_target_id, SCAN_WILD_CARD, 1);
+				 rport->scsi_target_id, SCAN_WILD_CARD,
+				 SCSI_SCAN_RESCAN);
 	}
 
 	spin_lock_irqsave(shost->host_lock, flags);
* Unmerged path drivers/scsi/scsi_transport_iscsi.c
diff --git a/drivers/scsi/scsi_transport_sas.c b/drivers/scsi/scsi_transport_sas.c
index 6610017419bb..3cb653d3fdb3 100644
--- a/drivers/scsi/scsi_transport_sas.c
+++ b/drivers/scsi/scsi_transport_sas.c
@@ -1623,7 +1623,8 @@ int sas_rphy_add(struct sas_rphy *rphy)
 		else
 			lun = 0;
 
-		scsi_scan_target(&rphy->dev, 0, rphy->scsi_target_id, lun, 0);
+		scsi_scan_target(&rphy->dev, 0, rphy->scsi_target_id, lun,
+				 SCSI_SCAN_INITIAL);
 	}
 
 	return 0;
@@ -1749,8 +1750,8 @@ static int sas_user_scan(struct Scsi_Host *shost, uint channel,
 
 		if ((channel == SCAN_WILD_CARD || channel == 0) &&
 		    (id == SCAN_WILD_CARD || id == rphy->scsi_target_id)) {
-			scsi_scan_target(&rphy->dev, 0,
-					 rphy->scsi_target_id, lun, 1);
+			scsi_scan_target(&rphy->dev, 0, rphy->scsi_target_id,
+					 lun, SCSI_SCAN_MANUAL);
 		}
 	}
 	mutex_unlock(&sas_host->lock);
* Unmerged path drivers/scsi/snic/snic_disc.c
* Unmerged path include/scsi/scsi_device.h
