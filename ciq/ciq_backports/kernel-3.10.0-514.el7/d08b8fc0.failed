mei: remove the reference to pdev from mei_device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit d08b8fc0dbdbe9bf7edeb46f7a856f993630664f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d08b8fc0.failed

For purpose of adding testing HW we would like
to get rid of pci dependency in generic mei code.

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit d08b8fc0dbdbe9bf7edeb46f7a856f993630664f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/hw-me.c
#	drivers/misc/mei/hw-txe.c
#	drivers/misc/mei/mei_dev.h
#	drivers/misc/mei/pci-me.c
diff --cc drivers/misc/mei/hw-me.c
index 241eae550b0c,da86310d7899..000000000000
--- a/drivers/misc/mei/hw-me.c
+++ b/drivers/misc/mei/hw-me.c
@@@ -812,11 -852,8 +812,16 @@@ struct mei_device *mei_me_dev_init(stru
  	if (!dev)
  		return NULL;
  
++<<<<<<< HEAD
 +	mei_device_init(dev, cfg);
 +
 +	dev->ops = &mei_me_hw_ops;
 +
 +	dev->pdev = pdev;
++=======
+ 	mei_device_init(dev, &pdev->dev, &mei_me_hw_ops);
+ 	dev->cfg  = cfg;
++>>>>>>> d08b8fc0dbdb (mei: remove the reference to pdev from mei_device)
  	return dev;
  }
  
diff --cc drivers/misc/mei/hw-txe.c
index f1cd166094f2,6eef6766f0a5..000000000000
--- a/drivers/misc/mei/hw-txe.c
+++ b/drivers/misc/mei/hw-txe.c
@@@ -1108,9 -1156,7 +1108,13 @@@ struct mei_device *mei_txe_dev_init(str
  
  	init_waitqueue_head(&hw->wait_aliveness_resp);
  
++<<<<<<< HEAD
 +	dev->ops = &mei_txe_hw_ops;
 +
 +	dev->pdev = pdev;
++=======
+ 	dev->cfg  = cfg;
++>>>>>>> d08b8fc0dbdb (mei: remove the reference to pdev from mei_device)
  	return dev;
  }
  
diff --cc drivers/misc/mei/mei_dev.h
index 1b981b70f5aa,5a16cc46f8d6..000000000000
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@@ -403,6 -401,10 +403,13 @@@ struct mei_cfg 
  /**
   * struct mei_device -  MEI private device struct
  
++<<<<<<< HEAD
++=======
+  * @dev  - device on a bus
+  * @cdev - character device
+  * @minor - minor number allocated for device
+  *
++>>>>>>> d08b8fc0dbdb (mei: remove the reference to pdev from mei_device)
   * @reset_count - limits the number of consecutive resets
   * @hbm_state - state of host bus message protocol
   *
@@@ -417,7 -419,10 +424,14 @@@
   * @cfg - per device generation config and ops
   */
  struct mei_device {
++<<<<<<< HEAD
 +	struct pci_dev *pdev;	/* pointer to pci device struct */
++=======
+ 	struct device *dev;
+ 	struct cdev cdev;
+ 	int minor;
+ 
++>>>>>>> d08b8fc0dbdb (mei: remove the reference to pdev from mei_device)
  	/*
  	 * lists of queues
  	 */
diff --cc drivers/misc/mei/pci-me.c
index 1eebd0f6a9f0,a91071716868..000000000000
--- a/drivers/misc/mei/pci-me.c
+++ b/drivers/misc/mei/pci-me.c
@@@ -346,8 -355,116 +346,120 @@@ static int mei_me_pci_resume(struct dev
  
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ #endif /* CONFIG_PM_SLEEP */
+ 
+ #ifdef CONFIG_PM_RUNTIME
+ static int mei_me_pm_runtime_idle(struct device *device)
+ {
+ 	struct pci_dev *pdev = to_pci_dev(device);
+ 	struct mei_device *dev;
+ 
+ 	dev_dbg(&pdev->dev, "rpm: me: runtime_idle\n");
+ 
+ 	dev = pci_get_drvdata(pdev);
+ 	if (!dev)
+ 		return -ENODEV;
+ 	if (mei_write_is_idle(dev))
+ 		pm_runtime_autosuspend(device);
+ 
+ 	return -EBUSY;
+ }
+ 
+ static int mei_me_pm_runtime_suspend(struct device *device)
+ {
+ 	struct pci_dev *pdev = to_pci_dev(device);
+ 	struct mei_device *dev;
+ 	int ret;
+ 
+ 	dev_dbg(&pdev->dev, "rpm: me: runtime suspend\n");
+ 
+ 	dev = pci_get_drvdata(pdev);
+ 	if (!dev)
+ 		return -ENODEV;
+ 
+ 	mutex_lock(&dev->device_lock);
+ 
+ 	if (mei_write_is_idle(dev))
+ 		ret = mei_me_pg_set_sync(dev);
+ 	else
+ 		ret = -EAGAIN;
+ 
+ 	mutex_unlock(&dev->device_lock);
+ 
+ 	dev_dbg(&pdev->dev, "rpm: me: runtime suspend ret=%d\n", ret);
+ 
+ 	return ret;
+ }
+ 
+ static int mei_me_pm_runtime_resume(struct device *device)
+ {
+ 	struct pci_dev *pdev = to_pci_dev(device);
+ 	struct mei_device *dev;
+ 	int ret;
+ 
+ 	dev_dbg(&pdev->dev, "rpm: me: runtime resume\n");
+ 
+ 	dev = pci_get_drvdata(pdev);
+ 	if (!dev)
+ 		return -ENODEV;
+ 
+ 	mutex_lock(&dev->device_lock);
+ 
+ 	ret = mei_me_pg_unset_sync(dev);
+ 
+ 	mutex_unlock(&dev->device_lock);
+ 
+ 	dev_dbg(&pdev->dev, "rpm: me: runtime resume ret = %d\n", ret);
+ 
+ 	return ret;
+ }
+ 
+ /**
+  * mei_me_set_pm_domain - fill and set pm domian stucture for device
+  *
+  * @dev: mei_device
+  */
+ static inline void mei_me_set_pm_domain(struct mei_device *dev)
+ {
+ 	struct pci_dev *pdev  = to_pci_dev(dev->dev);
+ 
+ 	if (pdev->dev.bus && pdev->dev.bus->pm) {
+ 		dev->pg_domain.ops = *pdev->dev.bus->pm;
+ 
+ 		dev->pg_domain.ops.runtime_suspend = mei_me_pm_runtime_suspend;
+ 		dev->pg_domain.ops.runtime_resume = mei_me_pm_runtime_resume;
+ 		dev->pg_domain.ops.runtime_idle = mei_me_pm_runtime_idle;
+ 
+ 		pdev->dev.pm_domain = &dev->pg_domain;
+ 	}
+ }
+ 
+ /**
+  * mei_me_unset_pm_domain - clean pm domian stucture for device
+  *
+  * @dev: mei_device
+  */
+ static inline void mei_me_unset_pm_domain(struct mei_device *dev)
+ {
+ 	/* stop using pm callbacks if any */
+ 	dev->dev->pm_domain = NULL;
+ }
+ #endif /* CONFIG_PM_RUNTIME */
+ 
+ #ifdef CONFIG_PM
+ static const struct dev_pm_ops mei_me_pm_ops = {
+ 	SET_SYSTEM_SLEEP_PM_OPS(mei_me_pci_suspend,
+ 				mei_me_pci_resume)
+ 	SET_RUNTIME_PM_OPS(
+ 		mei_me_pm_runtime_suspend,
+ 		mei_me_pm_runtime_resume,
+ 		mei_me_pm_runtime_idle)
+ };
++>>>>>>> d08b8fc0dbdb (mei: remove the reference to pdev from mei_device)
  
 +static SIMPLE_DEV_PM_OPS(mei_me_pm_ops, mei_me_pci_suspend, mei_me_pci_resume);
  #define MEI_ME_PM_OPS	(&mei_me_pm_ops)
  #else
  #define MEI_ME_PM_OPS	NULL
* Unmerged path drivers/misc/mei/hw-me.c
* Unmerged path drivers/misc/mei/hw-txe.c
* Unmerged path drivers/misc/mei/mei_dev.h
* Unmerged path drivers/misc/mei/pci-me.c
diff --git a/drivers/misc/mei/pci-txe.c b/drivers/misc/mei/pci-txe.c
index 2343c6236df9..0fac28b0ca0f 100644
--- a/drivers/misc/mei/pci-txe.c
+++ b/drivers/misc/mei/pci-txe.c
@@ -377,7 +377,7 @@ static int mei_txe_pm_runtime_resume(struct device *device)
  */
 static inline void mei_txe_set_pm_domain(struct mei_device *dev)
 {
-	struct pci_dev *pdev  = dev->pdev;
+	struct pci_dev *pdev  = to_pci_dev(dev->dev);
 
 	if (pdev->dev.bus && pdev->dev.bus->pm) {
 		dev->pg_domain.ops = *pdev->dev.bus->pm;
