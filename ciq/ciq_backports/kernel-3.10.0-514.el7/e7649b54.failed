drm/i915: Rename s/skl_compute_pipe_wm/skl_build_pipe_wm/

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Matt Roper <matthew.d.roper@intel.com>
commit e7649b54777ba6491204acbe1f1a34fce78637d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e7649b54.failed

When we added atomic watermarks, we added a new display vfunc
'compute_pipe_wm' that is used to compute any pipe-specific watermark
information that we can at atomic check time.  This was a somewhat poor
naming choice since we already had a 'skl_compute_pipe_wm' function that
doesn't quite fit this model --- the existing SKL function is something
that gets used at atomic commit time, after the DDB allocation has been
determined.  Let's rename the existing SKL function to avoid confusion.

	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
	Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1463061971-19638-3-git-send-email-matthew.d.roper@intel.com
(cherry picked from commit e7649b54777ba6491204acbe1f1a34fce78637d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_pm.c
diff --cc drivers/gpu/drm/i915/intel_pm.c
index cca54888a5ac,f6520d5a9ac6..000000000000
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@@ -2989,19 -3320,19 +2989,25 @@@ static void skl_compute_transition_wm(s
  		return;
  
  	/* Until we know more, just disable transition WMs */
 -	for_each_intel_plane_on_crtc(crtc->dev, intel_crtc, intel_plane) {
 -		int i = skl_wm_plane_id(intel_plane);
 -
 +	for (i = 0; i < intel_num_planes(intel_crtc); i++)
  		trans_wm->plane_en[i] = false;
 -	}
 +	trans_wm->cursor_en = false;
  }
  
++<<<<<<< HEAD
 +static void skl_compute_pipe_wm(struct drm_crtc *crtc,
 +				struct skl_ddb_allocation *ddb,
 +				struct skl_pipe_wm_parameters *params,
 +				struct skl_pipe_wm *pipe_wm)
++=======
+ static void skl_build_pipe_wm(struct intel_crtc_state *cstate,
+ 			      struct skl_ddb_allocation *ddb,
+ 			      struct skl_pipe_wm *pipe_wm)
++>>>>>>> e7649b54777b (drm/i915: Rename s/skl_compute_pipe_wm/skl_build_pipe_wm/)
  {
 -	struct drm_device *dev = cstate->base.crtc->dev;
 +	struct drm_device *dev = crtc->dev;
  	const struct drm_i915_private *dev_priv = dev->dev_private;
 +	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
  	int level, max_level = ilk_wm_max_level(dev);
  
  	for (level = 0; level <= max_level; level++) {
@@@ -3260,15 -3593,16 +3266,20 @@@ static bool skl_update_pipe_wm(struct d
  			       struct skl_pipe_wm *pipe_wm /* out */)
  {
  	struct intel_crtc *intel_crtc = to_intel_crtc(crtc);
 -	struct intel_crtc_state *cstate = to_intel_crtc_state(crtc->state);
  
++<<<<<<< HEAD
 +	skl_compute_wm_pipe_parameters(crtc, params);
 +	skl_allocate_pipe_ddb(crtc, config, params, ddb);
 +	skl_compute_pipe_wm(crtc, ddb, params, pipe_wm);
++=======
+ 	skl_allocate_pipe_ddb(cstate, ddb);
+ 	skl_build_pipe_wm(cstate, ddb, pipe_wm);
++>>>>>>> e7649b54777b (drm/i915: Rename s/skl_compute_pipe_wm/skl_build_pipe_wm/)
  
 -	if (!memcmp(&intel_crtc->wm.active.skl, pipe_wm, sizeof(*pipe_wm)))
 +	if (!memcmp(&intel_crtc->wm.skl_active, pipe_wm, sizeof(*pipe_wm)))
  		return false;
  
 -	intel_crtc->wm.active.skl = *pipe_wm;
 -
 +	intel_crtc->wm.skl_active = *pipe_wm;
  	return true;
  }
  
* Unmerged path drivers/gpu/drm/i915/intel_pm.c
