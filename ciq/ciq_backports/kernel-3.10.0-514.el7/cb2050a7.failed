sctp: export some functions for sctp_diag in inet_diag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Xin Long <lucien.xin@gmail.com>
commit cb2050a7b8131a9a9f3f97276df1feaae8987dc8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/cb2050a7.failed

inet_diag_msg_common_fill is used to fill the diag msg common info,
we need to use it in sctp_diag as well, so export it.

inet_diag_msg_attrs_fill is used to fill some common attrs info between
sctp diag and tcp diag.

v2->v3:
- do not need to define and export inet_diag_get_handler any more.
  cause all the functions in it are in sctp_diag.ko, we just call
  them in sctp_diag.ko.

- add inet_diag_msg_attrs_fill to make codes clear.

	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cb2050a7b8131a9a9f3f97276df1feaae8987dc8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/inet_diag.c
diff --cc net/ipv4/inet_diag.c
index f92539b6465e,70212bddf0f8..000000000000
--- a/net/ipv4/inet_diag.c
+++ b/net/ipv4/inet_diag.c
@@@ -71,6 -66,31 +71,34 @@@ static inline void inet_diag_unlock_han
  	mutex_unlock(&inet_diag_table_mutex);
  }
  
++<<<<<<< HEAD
++=======
+ void inet_diag_msg_common_fill(struct inet_diag_msg *r, struct sock *sk)
+ {
+ 	r->idiag_family = sk->sk_family;
+ 
+ 	r->id.idiag_sport = htons(sk->sk_num);
+ 	r->id.idiag_dport = sk->sk_dport;
+ 	r->id.idiag_if = sk->sk_bound_dev_if;
+ 	sock_diag_save_cookie(sk, r->id.idiag_cookie);
+ 
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	if (sk->sk_family == AF_INET6) {
+ 		*(struct in6_addr *)r->id.idiag_src = sk->sk_v6_rcv_saddr;
+ 		*(struct in6_addr *)r->id.idiag_dst = sk->sk_v6_daddr;
+ 	} else
+ #endif
+ 	{
+ 	memset(&r->id.idiag_src, 0, sizeof(r->id.idiag_src));
+ 	memset(&r->id.idiag_dst, 0, sizeof(r->id.idiag_dst));
+ 
+ 	r->id.idiag_src[0] = sk->sk_rcv_saddr;
+ 	r->id.idiag_dst[0] = sk->sk_daddr;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(inet_diag_msg_common_fill);
+ 
++>>>>>>> cb2050a7b813 (sctp: export some functions for sctp_diag in inet_diag)
  static size_t inet_sk_attr_size(void)
  {
  	return	  nla_total_size(sizeof(struct tcp_info))
@@@ -85,48 -105,11 +113,56 @@@
  		+ 64;
  }
  
++<<<<<<< HEAD
 +int inet_sk_diag_fill(struct sock *sk, struct inet_connection_sock *icsk,
 +			      struct sk_buff *skb, struct inet_diag_req_v2 *req,
 +			      struct user_namespace *user_ns,		      	
 +			      u32 portid, u32 seq, u16 nlmsg_flags,
 +			      const struct nlmsghdr *unlh)
 +{
 +	const struct inet_sock *inet = inet_sk(sk);
 +	const struct tcp_congestion_ops *ca_ops;
 +	struct inet_diag_msg *r;
 +	struct nlmsghdr  *nlh;
 +	struct nlattr *attr;
 +	void *info = NULL;
 +	const struct inet_diag_handler *handler;
 +	int ext = req->idiag_ext;
 +
 +	handler = inet_diag_table[req->sdiag_protocol];
 +	BUG_ON(handler == NULL);
 +
 +	nlh = nlmsg_put(skb, portid, seq, unlh->nlmsg_type, sizeof(*r),
 +			nlmsg_flags);
 +	if (!nlh)
 +		return -EMSGSIZE;
 +
 +	r = nlmsg_data(nlh);
 +	BUG_ON(sk->sk_state == TCP_TIME_WAIT);
 +
 +	r->idiag_family = sk->sk_family;
 +	r->idiag_state = sk->sk_state;
 +	r->idiag_timer = 0;
 +	r->idiag_retrans = 0;
++=======
+ int inet_diag_msg_attrs_fill(struct sock *sk, struct sk_buff *skb,
+ 			     struct inet_diag_msg *r, int ext,
+ 			     struct user_namespace *user_ns)
+ {
+ 	const struct inet_sock *inet = inet_sk(sk);
++>>>>>>> cb2050a7b813 (sctp: export some functions for sctp_diag in inet_diag)
 +
 +	r->id.idiag_if = sk->sk_bound_dev_if;
 +	sock_diag_save_cookie(sk, r->id.idiag_cookie);
 +
 +	r->id.idiag_sport = inet->inet_sport;
 +	r->id.idiag_dport = inet->inet_dport;
 +
 +	memset(&r->id.idiag_src, 0, sizeof(r->id.idiag_src));
 +	memset(&r->id.idiag_dst, 0, sizeof(r->id.idiag_dst));
 +
 +	r->id.idiag_src[0] = inet->inet_rcv_saddr;
 +	r->id.idiag_dst[0] = inet->inet_daddr;
  
  	if (nla_put_u8(skb, INET_DIAG_SHUTDOWN, sk->sk_shutdown))
  		goto errout;
* Unmerged path net/ipv4/inet_diag.c
