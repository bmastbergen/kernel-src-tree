i40e/i40evf: Move Tx checksum closer to TSO

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit 3bc67973e81d5104908a4ba7c2aab98a4f7bd64e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3bc67973.failed

On all of the other Intel drivers we place checksum close to TSO as they
have a significant amount in common and it can help to reduce the decision
tree for how to handle the frame as the first check in TSO is to see if
checksumming is offloaded, and if it is not we can skip _BOTH_ TSO and Tx
checksum offload based on a single check.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 3bc67973e81d5104908a4ba7c2aab98a4f7bd64e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_txrx.c
#	drivers/net/ethernet/intel/i40evf/i40e_txrx.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 5a3abb58e191,cb52f39d514a..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@@ -2965,14 -2945,6 +2971,17 @@@ static netdev_tx_t i40e_xmit_frame_ring
  	/* always enable CRC insertion offload */
  	td_cmd |= I40E_TX_DESC_CMD_ICRC;
  
++<<<<<<< HEAD
 +	/* Always offload the checksum, since it's in the data descriptor */
 +	if (skb->ip_summed == CHECKSUM_PARTIAL) {
 +		tx_flags |= I40E_TX_FLAGS_CSUM;
 +
 +		i40e_tx_enable_csum(skb, &tx_flags, &td_cmd, &td_offset,
 +				    tx_ring, &cd_tunneling);
 +	}
 +
++=======
++>>>>>>> 3bc67973e81d (i40e/i40evf: Move Tx checksum closer to TSO)
  	i40e_create_tx_ctx(tx_ring, cd_type_cmd_tso_mss,
  			   cd_tunneling, cd_l2tag2);
  
diff --cc drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index f6384b0c8220,ebcc25c05796..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@@ -2148,24 -2148,17 +2148,32 @@@ static netdev_tx_t i40e_xmit_frame_ring
  	else if (tso)
  		tx_flags |= I40E_TX_FLAGS_TSO;
  
++<<<<<<< HEAD
 +	if (i40e_chk_linearize(skb, tx_flags)) {
 +		if (skb_linearize(skb))
 +			goto out_drop;
 +		tx_ring->tx_stats.tx_linearize++;
 +	}
 +	skb_tx_timestamp(skb);
 +
 +	/* always enable CRC insertion offload */
 +	td_cmd |= I40E_TX_DESC_CMD_ICRC;
 +
++=======
++>>>>>>> 3bc67973e81d (i40e/i40evf: Move Tx checksum closer to TSO)
  	/* Always offload the checksum, since it's in the data descriptor */
 -	tso = i40e_tx_enable_csum(skb, &tx_flags, &td_cmd, &td_offset,
 -				  tx_ring, &cd_tunneling);
 -	if (tso < 0)
 -		goto out_drop;
 +	if (skb->ip_summed == CHECKSUM_PARTIAL) {
 +		tx_flags |= I40E_TX_FLAGS_CSUM;
 +
 +		i40e_tx_enable_csum(skb, &tx_flags, &td_cmd, &td_offset,
 +				    tx_ring, &cd_tunneling);
 +	}
  
+ 	skb_tx_timestamp(skb);
+ 
+ 	/* always enable CRC insertion offload */
+ 	td_cmd |= I40E_TX_DESC_CMD_ICRC;
+ 
  	i40e_create_tx_ctx(tx_ring, cd_type_cmd_tso_mss,
  			   cd_tunneling, cd_l2tag2);
  
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_txrx.c
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_txrx.c
