perf tools: Fix hist_entry__filter() for hierarchy

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Namhyung Kim <namhyung@kernel.org>
commit f4954cfb1cda4cf0abf36d23213c702e94666c3f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f4954cfb.failed

When hierarchy mode is enabled each output format is in a separate hpp
list.  So when applying a filter it should check all formats in the
list.  Currently it only checks a single ->fmt field which was not set
properly.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Tested-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1457531222-18130-2-git-send-email-namhyung@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f4954cfb1cda4cf0abf36d23213c702e94666c3f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/sort.c
diff --cc tools/perf/util/sort.c
index 8f36c1d6fd38,8a49a07ebea6..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -1479,14 -1577,62 +1479,65 @@@ __sort_dimension__alloc_hpp(struct sort
  	return hse;
  }
  
 -static void hpp_free(struct perf_hpp_fmt *fmt)
 +bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format)
  {
 -	free(fmt);
 +	return format->header == __sort__hpp_header;
  }
  
 -static struct perf_hpp_fmt *__hpp_dimension__alloc_hpp(struct hpp_dimension *hd,
 -						       int level)
 +static int __sort_dimension__add_hpp_sort(struct sort_dimension *sd)
  {
++<<<<<<< HEAD
 +	struct hpp_sort_entry *hse = __sort_dimension__alloc_hpp(sd);
++=======
+ 	struct perf_hpp_fmt *fmt;
+ 
+ 	fmt = memdup(hd->fmt, sizeof(*fmt));
+ 	if (fmt) {
+ 		INIT_LIST_HEAD(&fmt->list);
+ 		INIT_LIST_HEAD(&fmt->sort_list);
+ 		fmt->free = hpp_free;
+ 		fmt->level = level;
+ 	}
+ 
+ 	return fmt;
+ }
+ 
+ int hist_entry__filter(struct hist_entry *he, int type, const void *arg)
+ {
+ 	struct perf_hpp_fmt *fmt;
+ 	struct hpp_sort_entry *hse;
+ 	int ret = -1;
+ 	int r;
+ 
+ 	perf_hpp_list__for_each_format(he->hpp_list, fmt) {
+ 		if (!perf_hpp__is_sort_entry(fmt))
+ 			continue;
+ 
+ 		hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 		if (hse->se->se_filter == NULL)
+ 			continue;
+ 
+ 		/*
+ 		 * hist entry is filtered if any of sort key in the hpp list
+ 		 * is applied.  But it should skip non-matched filter types.
+ 		 */
+ 		r = hse->se->se_filter(he, type, arg);
+ 		if (r >= 0) {
+ 			if (ret < 0)
+ 				ret = 0;
+ 			ret |= r;
+ 		}
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int __sort_dimension__add_hpp_sort(struct sort_dimension *sd,
+ 					  struct perf_hpp_list *list,
+ 					  int level)
+ {
+ 	struct hpp_sort_entry *hse = __sort_dimension__alloc_hpp(sd, level);
++>>>>>>> f4954cfb1cda (perf tools: Fix hist_entry__filter() for hierarchy)
  
  	if (hse == NULL)
  		return -1;
* Unmerged path tools/perf/util/sort.c
