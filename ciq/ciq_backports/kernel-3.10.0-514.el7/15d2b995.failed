perf cpumap: Fix cpu conversion in cpu_map__from_entries

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 15d2b9956b41ffb5961b897bf61cdc09f722dfbf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/15d2b995.failed

We can't convert u16 cpu_map_entries::cpu[x] value directly to int,
because it could hold -1, which would be converted as 65535.

Adding special treatment for -1, which is not real cpu number, to be
converted to (int -1).

	Reported-by: Arnaldo Carvalho de Melo <acme@kernel.org>
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1452077397-31958-2-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 15d2b9956b41ffb5961b897bf61cdc09f722dfbf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/cpumap.c
diff --cc tools/perf/util/cpumap.c
index b361b196be14,fa935093a599..000000000000
--- a/tools/perf/util/cpumap.c
+++ b/tools/perf/util/cpumap.c
@@@ -179,6 -180,56 +179,59 @@@ out
  	return cpus;
  }
  
++<<<<<<< HEAD
++=======
+ static struct cpu_map *cpu_map__from_entries(struct cpu_map_entries *cpus)
+ {
+ 	struct cpu_map *map;
+ 
+ 	map = cpu_map__empty_new(cpus->nr);
+ 	if (map) {
+ 		unsigned i;
+ 
+ 		for (i = 0; i < cpus->nr; i++) {
+ 			/*
+ 			 * Special treatment for -1, which is not real cpu number,
+ 			 * and we need to use (int) -1 to initialize map[i],
+ 			 * otherwise it would become 65535.
+ 			 */
+ 			if (cpus->cpu[i] == (u16) -1)
+ 				map->map[i] = -1;
+ 			else
+ 				map->map[i] = (int) cpus->cpu[i];
+ 		}
+ 	}
+ 
+ 	return map;
+ }
+ 
+ static struct cpu_map *cpu_map__from_mask(struct cpu_map_mask *mask)
+ {
+ 	struct cpu_map *map;
+ 	int nr, nbits = mask->nr * mask->long_size * BITS_PER_BYTE;
+ 
+ 	nr = bitmap_weight(mask->mask, nbits);
+ 
+ 	map = cpu_map__empty_new(nr);
+ 	if (map) {
+ 		int cpu, i = 0;
+ 
+ 		for_each_set_bit(cpu, mask->mask, nbits)
+ 			map->map[i++] = cpu;
+ 	}
+ 	return map;
+ 
+ }
+ 
+ struct cpu_map *cpu_map__new_data(struct cpu_map_data *data)
+ {
+ 	if (data->type == PERF_CPU_MAP__CPUS)
+ 		return cpu_map__from_entries((struct cpu_map_entries *)data->data);
+ 	else
+ 		return cpu_map__from_mask((struct cpu_map_mask *)data->data);
+ }
+ 
++>>>>>>> 15d2b9956b41 (perf cpumap: Fix cpu conversion in cpu_map__from_entries)
  size_t cpu_map__fprintf(struct cpu_map *map, FILE *fp)
  {
  	int i;
* Unmerged path tools/perf/util/cpumap.c
