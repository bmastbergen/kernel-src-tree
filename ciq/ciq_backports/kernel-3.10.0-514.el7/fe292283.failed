mei: txe: reduce suspend/resume time

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit fe292283c23329218e384bffc6cb4bfa3fd92277
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/fe292283.failed

HW has to be in known state before the initialisation
sequence is started. The polling step for settling aliveness
was set to 200ms while in practise this can be done in up to 30msecs.

	Cc: <stable@vger.kernel.org> #3.18+
	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Barak Yoresh <barak.yoresh@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit fe292283c23329218e384bffc6cb4bfa3fd92277)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/hw-txe.c
diff --cc drivers/misc/mei/hw-txe.c
index ac1dee3e0a8b,1cd223c96864..000000000000
--- a/drivers/misc/mei/hw-txe.c
+++ b/drivers/misc/mei/hw-txe.c
@@@ -203,7 -218,8 +204,12 @@@ static u32 mei_txe_aliveness_get(struc
   * @expected: expected aliveness value
   *
   * Polls for HICR_HOST_ALIVENESS_RESP.ALIVENESS_RESP to be set
++<<<<<<< HEAD
 + * returns > 0 if the expected value was received, -ETIME otherwise
++=======
+  *
+  * Return: 0 if the expected value was received, -ETIME otherwise
++>>>>>>> fe292283c233 (mei: txe: reduce suspend/resume time)
   */
  static int mei_txe_aliveness_poll(struct mei_device *dev, u32 expected)
  {
@@@ -214,18 -232,15 +222,21 @@@
  		hw->aliveness = mei_txe_aliveness_get(dev);
  		if (hw->aliveness == expected) {
  			dev->pg_event = MEI_PG_EVENT_IDLE;
++<<<<<<< HEAD
 +			dev_dbg(&dev->pdev->dev,
 +				"aliveness settled after %d msecs\n", t);
 +			return t;
++=======
+ 			dev_dbg(dev->dev, "aliveness settled after %lld usecs\n",
+ 				ktime_to_us(ktime_sub(ktime_get(), start)));
+ 			return 0;
++>>>>>>> fe292283c233 (mei: txe: reduce suspend/resume time)
  		}
- 		mutex_unlock(&dev->device_lock);
- 		msleep(MSEC_PER_SEC / 5);
- 		mutex_lock(&dev->device_lock);
- 		t += MSEC_PER_SEC / 5;
- 	} while (t < SEC_ALIVENESS_WAIT_TIMEOUT);
+ 		usleep_range(20, 50);
+ 	} while (ktime_before(ktime_get(), stop));
  
  	dev->pg_event = MEI_PG_EVENT_IDLE;
 -	dev_err(dev->dev, "aliveness timed out\n");
 +	dev_err(&dev->pdev->dev, "aliveness timed out\n");
  	return -ETIME;
  }
  
* Unmerged path drivers/misc/mei/hw-txe.c
