drm/i915/gen9: add WaClearFlowControlGpgpuContextSave

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drm] i915/gen9: add WaClearFlowControlGpgpuContextSave (Rob Clark) [1348329 1349064]
Rebuild_FUZZ: 96.08%
commit-author Tim Gore <tim.gore@intel.com>
commit 950b2aaeea6960561425fc80adfb5b2fc0ac020f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/950b2aae.failed

This allows writes to EU flow control registers. Together
with SIP code from the user-mode driver this resolves a
hang seen in some pre-emption scenarios. Note that this
patch is just the kernel mode part of this workaround.

v2. Oops, add FLOW_CONTROL_ENABLE macro to i915_reg.h.

	Signed-off-by: Tim Gore <tim.gore@intel.com>
	Reviewed-by: Arun Siluvery <arun.siluvery@linux.intel.com>
	Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1458144826-17269-1-git-send-email-tim.gore@intel.com
(cherry picked from commit 950b2aaeea6960561425fc80adfb5b2fc0ac020f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg.h
#	drivers/gpu/drm/i915/intel_ringbuffer.c
diff --cc drivers/gpu/drm/i915/i915_reg.h
index bcce9fc478ee,264885fc245d..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -6324,7 -7104,8 +6324,12 @@@ enum skl_disp_power_wells 
  #define   GEN9_DG_MIRROR_FIX_ENABLE	(1<<5)
  #define   GEN9_CCS_TLB_PREFETCH_ENABLE	(1<<3)
  
++<<<<<<< HEAD
 +#define GEN8_ROW_CHICKEN		0xe4f0
++=======
+ #define GEN8_ROW_CHICKEN		_MMIO(0xe4f0)
+ #define   FLOW_CONTROL_ENABLE		(1<<15)
++>>>>>>> 950b2aaeea69 (drm/i915/gen9: add WaClearFlowControlGpgpuContextSave)
  #define   PARTIAL_INSTRUCTION_SHOOTDOWN_DISABLE	(1<<8)
  #define   STALL_DOP_GATING_DISABLE		(1<<5)
  
diff --cc drivers/gpu/drm/i915/intel_ringbuffer.c
index 005b5e04de4d,9c59ede5dd9a..000000000000
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@@ -904,16 -910,28 +904,30 @@@ static int chv_init_workarounds(struct 
  	return 0;
  }
  
 -static int gen9_init_workarounds(struct intel_engine_cs *engine)
 +static int gen9_init_workarounds(struct intel_engine_cs *ring)
  {
 -	struct drm_device *dev = engine->dev;
 +	struct drm_device *dev = ring->dev;
  	struct drm_i915_private *dev_priv = dev->dev_private;
 -	uint32_t tmp;
 -	int ret;
  
++<<<<<<< HEAD
 +	/* WaDisablePartialInstShootdown:skl */
++=======
+ 	/* WaEnableLbsSlaRetryTimerDecrement:skl */
+ 	I915_WRITE(BDW_SCRATCH1, I915_READ(BDW_SCRATCH1) |
+ 		   GEN9_LBS_SLA_RETRY_TIMER_DECREMENT_ENABLE);
+ 
+ 	/* WaDisableKillLogic:bxt,skl */
+ 	I915_WRITE(GAM_ECOCHK, I915_READ(GAM_ECOCHK) |
+ 		   ECOCHK_DIS_TLB);
+ 
+ 	/* WaClearFlowControlGpgpuContextSave:skl,bxt */
+ 	/* WaDisablePartialInstShootdown:skl,bxt */
++>>>>>>> 950b2aaeea69 (drm/i915/gen9: add WaClearFlowControlGpgpuContextSave)
  	WA_SET_BIT_MASKED(GEN8_ROW_CHICKEN,
+ 			  FLOW_CONTROL_ENABLE |
  			  PARTIAL_INSTRUCTION_SHOOTDOWN_DISABLE);
  
 -	/* Syncing dependencies between camera and graphics:skl,bxt */
 +	/* Syncing dependencies between camera and graphics */
  	WA_SET_BIT_MASKED(HALF_SLICE_CHICKEN3,
  			  GEN9_DISABLE_OCL_OOB_SUPPRESS_LOGIC);
  
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
* Unmerged path drivers/gpu/drm/i915/intel_ringbuffer.c
