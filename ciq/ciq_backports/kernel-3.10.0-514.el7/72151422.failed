hv_netvsc: Define a macro RNDIS_AND_PPI_SIZE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit 721514222db13498613706709409c21c105e0f4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/72151422.failed

The sum of RNDIS msg and PPI struct sizes is used in multiple places, so we define
a macro for them.

	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Reviewed-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 721514222db13498613706709409c21c105e0f4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index f6bc78f79972,73f8fba62a52..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -398,22 -401,29 +398,26 @@@ static int netvsc_start_xmit(struct sk_
  		return NETDEV_TX_OK;
  	}
  
++<<<<<<< HEAD
 +	/* Allocate a netvsc packet based on # of frags. */
 +	packet = kzalloc(sizeof(struct hv_netvsc_packet) +
 +			 (num_data_pgs * sizeof(struct hv_page_buffer)) +
 +			 sizeof(struct rndis_message) +
 +			 NDIS_VLAN_PPI_SIZE + NDIS_CSUM_PPI_SIZE +
 +			 NDIS_LSO_PPI_SIZE + NDIS_HASH_PPI_SIZE, GFP_ATOMIC);
 +	if (!packet) {
 +		/* out of memory, drop packet */
 +		netdev_err(net, "unable to allocate hv_netvsc_packet\n");
++=======
+ 	pkt_sz = sizeof(struct hv_netvsc_packet) + RNDIS_AND_PPI_SIZE;
++>>>>>>> 721514222db1 (hv_netvsc: Define a macro RNDIS_AND_PPI_SIZE)
  
 -	if (head_room < pkt_sz) {
 -		packet = kmalloc(pkt_sz, GFP_ATOMIC);
 -		if (!packet) {
 -			/* out of memory, drop packet */
 -			netdev_err(net, "unable to alloc hv_netvsc_packet\n");
 -			dev_kfree_skb(skb);
 -			net->stats.tx_dropped++;
 -			return NETDEV_TX_OK;
 -		}
 -		packet->part_of_skb = false;
 -	} else {
 -		/* Use the headroom for building up the packet */
 -		packet = (struct hv_netvsc_packet *)skb->head;
 -		packet->part_of_skb = true;
 +		dev_kfree_skb(skb);
 +		net->stats.tx_dropped++;
 +		return NETDEV_TX_OK;
  	}
  
 -	packet->status = 0;
 -	packet->xmit_more = skb->xmit_more;
 -
  	packet->vlan_tci = skb->vlan_tci;
 -	packet->page_buf = page_buf;
  
  	packet->q_idx = skb_get_queue_mapping(skb);
  
@@@ -421,8 -431,9 +425,14 @@@
  	packet->total_data_buflen = skb->len;
  
  	packet->rndis_msg = (struct rndis_message *)((unsigned long)packet +
++<<<<<<< HEAD
 +				sizeof(struct hv_netvsc_packet) +
 +				(num_data_pgs * sizeof(struct hv_page_buffer)));
++=======
+ 				sizeof(struct hv_netvsc_packet));
+ 
+ 	memset(packet->rndis_msg, 0, RNDIS_AND_PPI_SIZE);
++>>>>>>> 721514222db1 (hv_netvsc: Define a macro RNDIS_AND_PPI_SIZE)
  
  	/* Set the completion routine */
  	packet->send_completion = netvsc_xmit_completion;
@@@ -829,6 -864,9 +839,12 @@@ static int netvsc_probe(struct hv_devic
  	if (!net)
  		return -ENOMEM;
  
++<<<<<<< HEAD
++=======
+ 	max_needed_headroom = sizeof(struct hv_netvsc_packet) +
+ 			      RNDIS_AND_PPI_SIZE;
+ 
++>>>>>>> 721514222db1 (hv_netvsc: Define a macro RNDIS_AND_PPI_SIZE)
  	netif_carrier_off(net);
  
  	net_device_ctx = netdev_priv(net);
diff --git a/drivers/net/hyperv/hyperv_net.h b/drivers/net/hyperv/hyperv_net.h
index 3362765215d6..e8455fafaa45 100644
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@ -943,6 +943,10 @@ struct ndis_tcp_lso_info {
 #define NDIS_HASH_PPI_SIZE (sizeof(struct rndis_per_packet_info) + \
 		sizeof(u32))
 
+/* Total size of all PPI data */
+#define NDIS_ALL_PPI_SIZE (NDIS_VLAN_PPI_SIZE + NDIS_CSUM_PPI_SIZE + \
+			   NDIS_LSO_PPI_SIZE + NDIS_HASH_PPI_SIZE)
+
 /* Format of Information buffer passed in a SetRequest for the OID */
 /* OID_GEN_RNDIS_CONFIG_PARAMETER. */
 struct rndis_config_parameter_info {
@@ -1155,6 +1159,8 @@ struct rndis_message {
 #define RNDIS_HEADER_SIZE	(sizeof(struct rndis_message) - \
 				 sizeof(union rndis_message_container))
 
+#define RNDIS_AND_PPI_SIZE (sizeof(struct rndis_message) + NDIS_ALL_PPI_SIZE)
+
 #define NDIS_PACKET_TYPE_DIRECTED	0x00000001
 #define NDIS_PACKET_TYPE_MULTICAST	0x00000002
 #define NDIS_PACKET_TYPE_ALL_MULTICAST	0x00000004
* Unmerged path drivers/net/hyperv/netvsc_drv.c
