x86/PCI/ACPI: Ignore resources consumed by host bridge itself

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] pci/acpi: Ignore resources consumed by host bridge itself (Myron Stowe) [1344513]
Rebuild_FUZZ: 96.61%
commit-author Jiang Liu <jiang.liu@linux.intel.com>
commit 63f1789ec71677dd285d43d6c79ca44808f16945
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/63f1789e.failed

When parsing resources for PCI host bridge, we should ignore resources
consumed by host bridge itself and only report window resources available
to child PCI busses.

Fixes: 593669c2ac0f (x86/PCI/ACPI: Use common ACPI resource interfaces ...)
	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 63f1789ec71677dd285d43d6c79ca44808f16945)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/pci/acpi.c
diff --cc arch/x86/pci/acpi.c
index d1d7ec7f7759,e4695985f9de..000000000000
--- a/arch/x86/pci/acpi.c
+++ b/arch/x86/pci/acpi.c
@@@ -440,46 -325,33 +440,71 @@@ static void __release_pci_root_info(str
  	kfree(info);
  }
  
 +static void release_pci_root_info(struct pci_host_bridge *bridge)
 +{
 +	struct pci_root_info *info = bridge->release_data;
 +
 +	__release_pci_root_info(info);
 +}
 +
  static void probe_pci_root_info(struct pci_root_info *info,
  				struct acpi_device *device,
 -				int busnum, int domain,
 -				struct list_head *list)
 +				int busnum, int domain)
  {
++<<<<<<< HEAD
 +	size_t size;
 +
 +	sprintf(info->name, "PCI Bus %04x:%02x", domain, busnum);
 +	info->bridge = device;
 +
 +	info->res_num = 0;
 +	acpi_walk_resources(device->handle, METHOD_NAME__CRS, count_resource,
 +				info);
 +	if (!info->res_num)
 +		return;
 +
 +	size = sizeof(*info->res) * info->res_num;
 +	info->res = kzalloc_node(size, GFP_KERNEL, info->sd.node);
 +	if (!info->res) {
 +		info->res_num = 0;
 +		return;
 +	}
 +
 +	size = sizeof(*info->res_offset) * info->res_num;
 +	info->res_num = 0;
 +	info->res_offset = kzalloc_node(size, GFP_KERNEL, info->sd.node);
 +	if (!info->res_offset) {
 +		kfree(info->res);
 +		info->res = NULL;
 +		return;
 +	}
 +
 +	acpi_walk_resources(device->handle, METHOD_NAME__CRS, setup_resource,
 +				info);
++=======
+ 	int ret;
+ 	struct resource_entry *entry, *tmp;
+ 
+ 	sprintf(info->name, "PCI Bus %04x:%02x", domain, busnum);
+ 	info->bridge = device;
+ 	ret = acpi_dev_get_resources(device, list,
+ 				     acpi_dev_filter_resource_type_cb,
+ 				     (void *)(IORESOURCE_IO | IORESOURCE_MEM));
+ 	if (ret < 0)
+ 		dev_warn(&device->dev,
+ 			 "failed to parse _CRS method, error code %d\n", ret);
+ 	else if (ret == 0)
+ 		dev_dbg(&device->dev,
+ 			"no IO and memory resources present in _CRS\n");
+ 	else
+ 		resource_list_for_each_entry_safe(entry, tmp, list) {
+ 			if ((entry->res->flags & IORESOURCE_WINDOW) == 0 ||
+ 			    (entry->res->flags & IORESOURCE_DISABLED))
+ 				resource_list_destroy_entry(entry);
+ 			else
+ 				entry->res->name = info->name;
+ 		}
++>>>>>>> 63f1789ec716 (x86/PCI/ACPI: Ignore resources consumed by host bridge itself)
  }
  
  struct pci_bus *pci_acpi_scan_root(struct acpi_pci_root *root)
* Unmerged path arch/x86/pci/acpi.c
