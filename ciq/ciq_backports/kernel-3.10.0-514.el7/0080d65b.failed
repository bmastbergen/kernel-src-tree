idle_intel: Add Denverton

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [idle] intel: add denverton (Steve Best) [1273777]
Rebuild_FUZZ: 88.89%
commit-author Jacob Pan <jacob.jun.pan@linux.intel.com>
commit 0080d65b7719fc58e60b5595fc61acded330004f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0080d65b.failed

Denverton is an Intel Atom based micro server which shares the same
Goldmont architecture as Broxton. The available C-states on
Denverton is a subset of Broxton with only C1, C1e, and C6.

	Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Signed-off-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 0080d65b7719fc58e60b5595fc61acded330004f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index ebe5090f66aa,170ab8e01075..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -618,6 -765,96 +618,99 @@@ static struct cpuidle_state knl_cstates
  		.enter = NULL }
  };
  
++<<<<<<< HEAD
++=======
+ static struct cpuidle_state bxt_cstates[] = {
+ 	{
+ 		.name = "C1-BXT",
+ 		.desc = "MWAIT 0x00",
+ 		.flags = MWAIT2flg(0x00),
+ 		.exit_latency = 2,
+ 		.target_residency = 2,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C1E-BXT",
+ 		.desc = "MWAIT 0x01",
+ 		.flags = MWAIT2flg(0x01),
+ 		.exit_latency = 10,
+ 		.target_residency = 20,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C6-BXT",
+ 		.desc = "MWAIT 0x20",
+ 		.flags = MWAIT2flg(0x20) | CPUIDLE_FLAG_TLB_FLUSHED,
+ 		.exit_latency = 133,
+ 		.target_residency = 133,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C7s-BXT",
+ 		.desc = "MWAIT 0x31",
+ 		.flags = MWAIT2flg(0x31) | CPUIDLE_FLAG_TLB_FLUSHED,
+ 		.exit_latency = 155,
+ 		.target_residency = 155,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C8-BXT",
+ 		.desc = "MWAIT 0x40",
+ 		.flags = MWAIT2flg(0x40) | CPUIDLE_FLAG_TLB_FLUSHED,
+ 		.exit_latency = 1000,
+ 		.target_residency = 1000,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C9-BXT",
+ 		.desc = "MWAIT 0x50",
+ 		.flags = MWAIT2flg(0x50) | CPUIDLE_FLAG_TLB_FLUSHED,
+ 		.exit_latency = 2000,
+ 		.target_residency = 2000,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C10-BXT",
+ 		.desc = "MWAIT 0x60",
+ 		.flags = MWAIT2flg(0x60) | CPUIDLE_FLAG_TLB_FLUSHED,
+ 		.exit_latency = 10000,
+ 		.target_residency = 10000,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.enter = NULL }
+ };
+ 
+ static struct cpuidle_state dnv_cstates[] = {
+ 	{
+ 		.name = "C1-DNV",
+ 		.desc = "MWAIT 0x00",
+ 		.flags = MWAIT2flg(0x00),
+ 		.exit_latency = 2,
+ 		.target_residency = 2,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C1E-DNV",
+ 		.desc = "MWAIT 0x01",
+ 		.flags = MWAIT2flg(0x01),
+ 		.exit_latency = 10,
+ 		.target_residency = 20,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.name = "C6-DNV",
+ 		.desc = "MWAIT 0x20",
+ 		.flags = MWAIT2flg(0x20) | CPUIDLE_FLAG_TLB_FLUSHED,
+ 		.exit_latency = 50,
+ 		.target_residency = 500,
+ 		.enter = &intel_idle,
+ 		.enter_freeze = intel_idle_freeze, },
+ 	{
+ 		.enter = NULL }
+ };
+ 
++>>>>>>> 0080d65b7719 (idle_intel: Add Denverton)
  /**
   * intel_idle
   * @dev: cpuidle_device
@@@ -773,42 -1039,55 +866,92 @@@ static const struct idle_cpu idle_cpu_k
  	.state_table = knl_cstates,
  };
  
++<<<<<<< HEAD
 +#define ICPU(model, cpu) \
 +	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_MWAIT, (unsigned long)&cpu }
 +
 +static const struct x86_cpu_id intel_idle_ids[] = {
 +	ICPU(0x1a, idle_cpu_nehalem),
 +	ICPU(0x1e, idle_cpu_nehalem),
 +	ICPU(0x1f, idle_cpu_nehalem),
 +	ICPU(0x25, idle_cpu_nehalem),
 +	ICPU(0x2c, idle_cpu_nehalem),
 +	ICPU(0x2e, idle_cpu_nehalem),
 +	ICPU(0x1c, idle_cpu_atom),
 +	ICPU(0x26, idle_cpu_lincroft),
 +	ICPU(0x2f, idle_cpu_nehalem),
 +	ICPU(0x2a, idle_cpu_snb),
 +	ICPU(0x2d, idle_cpu_snb),
 +	ICPU(0x36, idle_cpu_atom),
 +	ICPU(0x3a, idle_cpu_ivb),
 +	ICPU(0x3e, idle_cpu_ivt),
 +	ICPU(0x3c, idle_cpu_hsw),
 +	ICPU(0x3f, idle_cpu_hsw),
 +	ICPU(0x45, idle_cpu_hsw),
 +	ICPU(0x46, idle_cpu_hsw),
 +	ICPU(0x4d, idle_cpu_avn),
 +	ICPU(0x3d, idle_cpu_bdw),
 +	ICPU(0x47, idle_cpu_bdw),
 +	ICPU(0x4f, idle_cpu_bdw),
 +	ICPU(0x56, idle_cpu_bdw),
 +	ICPU(0x4e, idle_cpu_skl),
 +	ICPU(0x5e, idle_cpu_skl),
 +	ICPU(0x8e, idle_cpu_skl),
 +	ICPU(0x9e, idle_cpu_skl),
 +	ICPU(0x55, idle_cpu_skx),
 +	ICPU(0x57, idle_cpu_knl),
++=======
+ static const struct idle_cpu idle_cpu_bxt = {
+ 	.state_table = bxt_cstates,
+ 	.disable_promotion_to_c1e = true,
+ };
+ 
+ static const struct idle_cpu idle_cpu_dnv = {
+ 	.state_table = dnv_cstates,
+ 	.disable_promotion_to_c1e = true,
+ };
+ 
+ #define ICPU(model, cpu) \
+ 	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_MWAIT, (unsigned long)&cpu }
+ 
+ static const struct x86_cpu_id intel_idle_ids[] __initconst = {
+ 	ICPU(INTEL_FAM6_NEHALEM_EP,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_NEHALEM,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_WESTMERE2,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_WESTMERE,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_WESTMERE_EP,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_NEHALEM_EX,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_ATOM_PINEVIEW,		idle_cpu_atom),
+ 	ICPU(INTEL_FAM6_ATOM_LINCROFT,		idle_cpu_lincroft),
+ 	ICPU(INTEL_FAM6_WESTMERE_EX,		idle_cpu_nehalem),
+ 	ICPU(INTEL_FAM6_SANDYBRIDGE,		idle_cpu_snb),
+ 	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		idle_cpu_snb),
+ 	ICPU(INTEL_FAM6_ATOM_CEDARVIEW,		idle_cpu_atom),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	idle_cpu_byt),
+ 	ICPU(INTEL_FAM6_ATOM_AIRMONT,		idle_cpu_cht),
+ 	ICPU(INTEL_FAM6_IVYBRIDGE,		idle_cpu_ivb),
+ 	ICPU(INTEL_FAM6_IVYBRIDGE_X,		idle_cpu_ivt),
+ 	ICPU(INTEL_FAM6_HASWELL_CORE,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_HASWELL_X,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_HASWELL_ULT,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_HASWELL_GT3E,		idle_cpu_hsw),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT2,	idle_cpu_avn),
+ 	ICPU(INTEL_FAM6_BROADWELL_CORE,		idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_BROADWELL_GT3E,		idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_BROADWELL_X,		idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	idle_cpu_bdw),
+ 	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_KABYLAKE_MOBILE,	idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_KABYLAKE_DESKTOP,	idle_cpu_skl),
+ 	ICPU(INTEL_FAM6_SKYLAKE_X,		idle_cpu_skx),
+ 	ICPU(INTEL_FAM6_XEON_PHI_KNL,		idle_cpu_knl),
+ 	ICPU(INTEL_FAM6_ATOM_GOLDMONT,		idle_cpu_bxt),
+ 	ICPU(INTEL_FAM6_ATOM_DENVERTON,		idle_cpu_dnv),
++>>>>>>> 0080d65b7719 (idle_intel: Add Denverton)
  	{}
  };
 +MODULE_DEVICE_TABLE(x86cpu, intel_idle_ids);
  
  /*
   * intel_idle_probe()
* Unmerged path drivers/idle/intel_idle.c
