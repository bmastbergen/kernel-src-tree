perf hists: Allocate output sort field

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 1945c3e734cd1f01535dc76de47c38bbe9a87352
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1945c3e7.failed

Currently we use static output fields, because we have single global
list of all sort/output fields.

We will add hists specific sort and output lists in following patches,
so we need all format entries to be dynamically allocated. Adding
support to allocate output sort field.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1453109064-1026-10-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1945c3e734cd1f01535dc76de47c38bbe9a87352)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/sort.c
diff --cc tools/perf/util/sort.c
index cb6856b79208,52e4a3674985..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -1482,9 -1577,17 +1482,23 @@@ __sort_dimension__alloc_hpp(struct sort
  	return hse;
  }
  
++<<<<<<< HEAD
 +bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format)
 +{
 +	return format->header == __sort__hpp_header;
++=======
+ static struct perf_hpp_fmt *__hpp_dimension__alloc_hpp(struct hpp_dimension *hd)
+ {
+ 	struct perf_hpp_fmt *fmt;
+ 
+ 	fmt = memdup(hd->fmt, sizeof(*fmt));
+ 	if (fmt) {
+ 		INIT_LIST_HEAD(&fmt->list);
+ 		INIT_LIST_HEAD(&fmt->sort_list);
+ 	}
+ 
+ 	return fmt;
++>>>>>>> 1945c3e734cd (perf hists: Allocate output sort field)
  }
  
  static int __sort_dimension__add_hpp_sort(struct sort_dimension *sd)
diff --git a/tools/perf/ui/hist.c b/tools/perf/ui/hist.c
index cf6fa58d2ee7..d17dfa816ae6 100644
--- a/tools/perf/ui/hist.c
+++ b/tools/perf/ui/hist.c
@@ -533,11 +533,23 @@ void perf_hpp__column_disable(unsigned col)
 
 void perf_hpp__cancel_cumulate(void)
 {
+	struct perf_hpp_fmt *fmt, *acc, *ovh, *tmp;
+
 	if (is_strict_order(field_order))
 		return;
 
-	perf_hpp__column_disable(PERF_HPP__OVERHEAD_ACC);
-	perf_hpp__format[PERF_HPP__OVERHEAD].name = "Overhead";
+	ovh = &perf_hpp__format[PERF_HPP__OVERHEAD];
+	acc = &perf_hpp__format[PERF_HPP__OVERHEAD_ACC];
+
+	perf_hpp__for_each_format_safe(fmt, tmp) {
+		if (acc->equal(acc, fmt)) {
+			perf_hpp__column_unregister(fmt);
+			continue;
+		}
+
+		if (ovh->equal(ovh, fmt))
+			fmt->name = "Overhead";
+	}
 }
 
 void perf_hpp__setup_output_field(void)
* Unmerged path tools/perf/util/sort.c
