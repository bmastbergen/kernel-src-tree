cisco: enic: Update logging macros and uses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Joe Perches <joe@perches.com>
commit e327f4e193b6a176f4dc3b19faf6371a8917588d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e327f4e1.failed

Don't hide varibles used by the logging macros.

Miscellanea:

o Use the more common ##__VA_ARGS__ extension
o Add missing newlines to formats
o Realign arguments

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e327f4e193b6a176f4dc3b19faf6371a8917588d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cisco/enic/enic.h
#	drivers/net/ethernet/cisco/enic/vnic_cq.c
#	drivers/net/ethernet/cisco/enic/vnic_dev.c
#	drivers/net/ethernet/cisco/enic/vnic_intr.c
#	drivers/net/ethernet/cisco/enic/vnic_rq.c
#	drivers/net/ethernet/cisco/enic/vnic_wq.c
diff --cc drivers/net/ethernet/cisco/enic/enic.h
index e730beaf3f11,130f910e4785..000000000000
--- a/drivers/net/ethernet/cisco/enic/enic.h
+++ b/drivers/net/ethernet/cisco/enic/enic.h
@@@ -192,6 -192,30 +192,32 @@@ struct enic 
  	struct vnic_gen_stats gen_stats;
  };
  
++<<<<<<< HEAD
++=======
+ static inline struct net_device *vnic_get_netdev(struct vnic_dev *vdev)
+ {
+ 	struct enic *enic = vdev->priv;
+ 
+ 	return enic->netdev;
+ }
+ 
+ /* wrappers function for kernel log
+  */
+ #define vdev_err(vdev, fmt, ...)					\
+ 	dev_err(&(vdev)->pdev->dev, fmt, ##__VA_ARGS__)
+ #define vdev_warn(vdev, fmt, ...)					\
+ 	dev_warn(&(vdev)->pdev->dev, fmt, ##__VA_ARGS__)
+ #define vdev_info(vdev, fmt, ...)					\
+ 	dev_info(&(vdev)->pdev->dev, fmt, ##__VA_ARGS__)
+ 
+ #define vdev_neterr(vdev, fmt, ...)					\
+ 	netdev_err(vnic_get_netdev(vdev), fmt, ##__VA_ARGS__)
+ #define vdev_netwarn(vdev, fmt, ...)					\
+ 	netdev_warn(vnic_get_netdev(vdev), fmt, ##__VA_ARGS__)
+ #define vdev_netinfo(vdev, fmt, ...)					\
+ 	netdev_info(vnic_get_netdev(vdev), fmt, ##__VA_ARGS__)
+ 
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  static inline struct device *enic_get_dev(struct enic *enic)
  {
  	return &(enic->pdev->dev);
diff --cc drivers/net/ethernet/cisco/enic/vnic_cq.c
index 0daa1c7073cb,9c682aff3834..000000000000
--- a/drivers/net/ethernet/cisco/enic/vnic_cq.c
+++ b/drivers/net/ethernet/cisco/enic/vnic_cq.c
@@@ -42,7 -43,7 +42,11 @@@ int vnic_cq_alloc(struct vnic_dev *vdev
  
  	cq->ctrl = vnic_dev_get_res(vdev, RES_TYPE_CQ, index);
  	if (!cq->ctrl) {
++<<<<<<< HEAD
 +		pr_err("Failed to hook CQ[%d] resource\n", index);
++=======
+ 		vdev_err(vdev, "Failed to hook CQ[%d] resource\n", index);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
diff --cc drivers/net/ethernet/cisco/enic/vnic_dev.c
index 59f21a19a435,8f27df3207bc..000000000000
--- a/drivers/net/ethernet/cisco/enic/vnic_dev.c
+++ b/drivers/net/ethernet/cisco/enic/vnic_dev.c
@@@ -52,14 -53,14 +52,22 @@@ static int vnic_dev_discover_res(struc
  		return -EINVAL;
  
  	if (bar->len < VNIC_MAX_RES_HDR_SIZE) {
++<<<<<<< HEAD
 +		pr_err("vNIC BAR0 res hdr length error\n");
++=======
+ 		vdev_err(vdev, "vNIC BAR0 res hdr length error\n");
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
  	rh  = bar->vaddr;
  	mrh = bar->vaddr;
  	if (!rh) {
++<<<<<<< HEAD
 +		pr_err("vNIC BAR0 res hdr not mem-mapped\n");
++=======
+ 		vdev_err(vdev, "vNIC BAR0 res hdr not mem-mapped\n");
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
@@@ -68,11 -69,10 +76,18 @@@
  		(ioread32(&rh->version) != VNIC_RES_VERSION)) {
  		if ((ioread32(&mrh->magic) != MGMTVNIC_MAGIC) ||
  			(ioread32(&mrh->version) != MGMTVNIC_VERSION)) {
++<<<<<<< HEAD
 +			pr_err("vNIC BAR0 res magic/version error "
 +			"exp (%lx/%lx) or (%lx/%lx), curr (%x/%x)\n",
 +			VNIC_RES_MAGIC, VNIC_RES_VERSION,
 +			MGMTVNIC_MAGIC, MGMTVNIC_VERSION,
 +			ioread32(&rh->magic), ioread32(&rh->version));
++=======
+ 			vdev_err(vdev, "vNIC BAR0 res magic/version error exp (%lx/%lx) or (%lx/%lx), curr (%x/%x)\n",
+ 				 VNIC_RES_MAGIC, VNIC_RES_VERSION,
+ 				 MGMTVNIC_MAGIC, MGMTVNIC_VERSION,
+ 				 ioread32(&rh->magic), ioread32(&rh->version));
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  			return -EINVAL;
  		}
  	}
@@@ -106,12 -106,9 +121,18 @@@
  			/* each count is stride bytes long */
  			len = count * VNIC_RES_STRIDE;
  			if (len + bar_offset > bar[bar_num].len) {
++<<<<<<< HEAD
 +				pr_err("vNIC BAR0 resource %d "
 +					"out-of-bounds, offset 0x%x + "
 +					"size 0x%x > bar len 0x%lx\n",
 +					type, bar_offset,
 +					len,
 +					bar[bar_num].len);
++=======
+ 				vdev_err(vdev, "vNIC BAR0 resource %d out-of-bounds, offset 0x%x + size 0x%x > bar len 0x%lx\n",
+ 					 type, bar_offset, len,
+ 					 bar[bar_num].len);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  				return -EINVAL;
  			}
  			break;
@@@ -201,8 -198,8 +222,13 @@@ int vnic_dev_alloc_desc_ring(struct vni
  		&ring->base_addr_unaligned);
  
  	if (!ring->descs_unaligned) {
++<<<<<<< HEAD
 +		pr_err("Failed to allocate ring (size=%d), aborting\n",
 +			(int)ring->size);
++=======
+ 		vdev_err(vdev, "Failed to allocate ring (size=%d), aborting\n",
+ 			 (int)ring->size);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -ENOMEM;
  	}
  
@@@ -244,7 -241,7 +270,11 @@@ static int _vnic_dev_cmd(struct vnic_de
  		return -ENODEV;
  	}
  	if (status & STAT_BUSY) {
++<<<<<<< HEAD
 +		pr_err("Busy devcmd %d\n", _CMD_N(cmd));
++=======
+ 		vdev_neterr(vdev, "Busy devcmd %d\n", _CMD_N(cmd));
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EBUSY;
  	}
  
@@@ -278,8 -275,8 +308,13 @@@
  					return -err;
  				if (err != ERR_ECMDUNKNOWN ||
  				    cmd != CMD_CAPABILITY)
++<<<<<<< HEAD
 +					pr_err("Error %d devcmd %d\n",
 +						err, _CMD_N(cmd));
++=======
+ 					vdev_neterr(vdev, "Error %d devcmd %d\n",
+ 						    err, _CMD_N(cmd));
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  				return -err;
  			}
  
@@@ -293,7 -290,7 +328,11 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	pr_err("Timedout devcmd %d\n", _CMD_N(cmd));
++=======
+ 	vdev_neterr(vdev, "Timedout devcmd %d\n", _CMD_N(cmd));
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  	return -ETIMEDOUT;
  }
  
@@@ -477,7 -474,8 +516,12 @@@ static int vnic_dev_cmd_proxy(struct vn
  		err = (int)vdev->args[1];
  		if (err != ERR_ECMDUNKNOWN ||
  		    cmd != CMD_CAPABILITY)
++<<<<<<< HEAD
 +			pr_err("Error %d proxy devcmd %d\n", err, _CMD_N(cmd));
++=======
+ 			vdev_neterr(vdev, "Error %d proxy devcmd %d\n",
+ 				    err, _CMD_N(cmd));
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return err;
  	}
  
@@@ -772,7 -768,7 +816,11 @@@ int vnic_dev_packet_filter(struct vnic_
  
  	err = vnic_dev_cmd(vdev, CMD_PACKET_FILTER, &a0, &a1, wait);
  	if (err)
++<<<<<<< HEAD
 +		pr_err("Can't set packet filter\n");
++=======
+ 		vdev_neterr(vdev, "Can't set packet filter\n");
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  
  	return err;
  }
@@@ -789,7 -785,7 +837,11 @@@ int vnic_dev_add_addr(struct vnic_dev *
  
  	err = vnic_dev_cmd(vdev, CMD_ADDR_ADD, &a0, &a1, wait);
  	if (err)
++<<<<<<< HEAD
 +		pr_err("Can't add addr [%pM], %d\n", addr, err);
++=======
+ 		vdev_neterr(vdev, "Can't add addr [%pM], %d\n", addr, err);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  
  	return err;
  }
@@@ -806,7 -802,7 +858,11 @@@ int vnic_dev_del_addr(struct vnic_dev *
  
  	err = vnic_dev_cmd(vdev, CMD_ADDR_DEL, &a0, &a1, wait);
  	if (err)
++<<<<<<< HEAD
 +		pr_err("Can't del addr [%pM], %d\n", addr, err);
++=======
+ 		vdev_neterr(vdev, "Can't del addr [%pM], %d\n", addr, err);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  
  	return err;
  }
@@@ -850,7 -846,8 +906,12 @@@ int vnic_dev_notify_set(struct vnic_de
  	dma_addr_t notify_pa;
  
  	if (vdev->notify || vdev->notify_pa) {
++<<<<<<< HEAD
 +		pr_err("notify block %p still allocated", vdev->notify);
++=======
+ 		vdev_neterr(vdev, "notify block %p still allocated\n",
+ 			    vdev->notify);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
@@@ -969,8 -966,7 +1030,12 @@@ int vnic_dev_intr_coal_timer_info(struc
  	 */
  	if ((err == ERR_ECMDUNKNOWN) ||
  		(!err && !(vdev->args[0] && vdev->args[1] && vdev->args[2]))) {
++<<<<<<< HEAD
 +		pr_warning("Using default conversion factor for "
 +			"interrupt coalesce timer\n");
++=======
+ 		vdev_netwarn(vdev, "Using default conversion factor for interrupt coalesce timer\n");
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		vnic_dev_intr_coal_timer_info_default(vdev);
  		return 0;
  	}
diff --cc drivers/net/ethernet/cisco/enic/vnic_intr.c
index 0ca107f7bc8c,23604e3d4455..000000000000
--- a/drivers/net/ethernet/cisco/enic/vnic_intr.c
+++ b/drivers/net/ethernet/cisco/enic/vnic_intr.c
@@@ -39,7 -40,8 +39,12 @@@ int vnic_intr_alloc(struct vnic_dev *vd
  
  	intr->ctrl = vnic_dev_get_res(vdev, RES_TYPE_INTR_CTRL, index);
  	if (!intr->ctrl) {
++<<<<<<< HEAD
 +		pr_err("Failed to hook INTR[%d].ctrl resource\n", index);
++=======
+ 		vdev_err(vdev, "Failed to hook INTR[%d].ctrl resource\n",
+ 			 index);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
diff --cc drivers/net/ethernet/cisco/enic/vnic_rq.c
index c4b2183bf352,e572a527b18d..000000000000
--- a/drivers/net/ethernet/cisco/enic/vnic_rq.c
+++ b/drivers/net/ethernet/cisco/enic/vnic_rq.c
@@@ -91,7 -92,7 +91,11 @@@ int vnic_rq_alloc(struct vnic_dev *vdev
  
  	rq->ctrl = vnic_dev_get_res(vdev, RES_TYPE_RQ, index);
  	if (!rq->ctrl) {
++<<<<<<< HEAD
 +		pr_err("Failed to hook RQ[%d] resource\n", index);
++=======
+ 		vdev_err(vdev, "Failed to hook RQ[%d] resource\n", index);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
@@@ -177,7 -179,7 +181,11 @@@ int vnic_rq_disable(struct vnic_rq *rq
  		udelay(10);
  	}
  
++<<<<<<< HEAD
 +	pr_err("Failed to disable RQ[%d]\n", rq->index);
++=======
+ 	vdev_neterr(vdev, "Failed to disable RQ[%d]\n", rq->index);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  
  	return -ETIMEDOUT;
  }
diff --cc drivers/net/ethernet/cisco/enic/vnic_wq.c
index 97ea3479824c,090cc65658a3..000000000000
--- a/drivers/net/ethernet/cisco/enic/vnic_wq.c
+++ b/drivers/net/ethernet/cisco/enic/vnic_wq.c
@@@ -94,7 -95,7 +94,11 @@@ int vnic_wq_alloc(struct vnic_dev *vdev
  
  	wq->ctrl = vnic_dev_get_res(vdev, RES_TYPE_WQ, index);
  	if (!wq->ctrl) {
++<<<<<<< HEAD
 +		pr_err("Failed to hook WQ[%d] resource\n", index);
++=======
+ 		vdev_err(vdev, "Failed to hook WQ[%d] resource\n", index);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  		return -EINVAL;
  	}
  
@@@ -185,7 -187,7 +189,11 @@@ int vnic_wq_disable(struct vnic_wq *wq
  		udelay(10);
  	}
  
++<<<<<<< HEAD
 +	pr_err("Failed to disable WQ[%d]\n", wq->index);
++=======
+ 	vdev_neterr(vdev, "Failed to disable WQ[%d]\n", wq->index);
++>>>>>>> e327f4e193b6 (cisco: enic: Update logging macros and uses)
  
  	return -ETIMEDOUT;
  }
* Unmerged path drivers/net/ethernet/cisco/enic/enic.h
* Unmerged path drivers/net/ethernet/cisco/enic/vnic_cq.c
* Unmerged path drivers/net/ethernet/cisco/enic/vnic_dev.c
* Unmerged path drivers/net/ethernet/cisco/enic/vnic_intr.c
* Unmerged path drivers/net/ethernet/cisco/enic/vnic_rq.c
* Unmerged path drivers/net/ethernet/cisco/enic/vnic_wq.c
