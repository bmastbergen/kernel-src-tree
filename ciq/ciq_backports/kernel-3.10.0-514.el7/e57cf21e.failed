Btrfs: fix allocation size calculations in alloc_btrfs_bio

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Chris Mason <clm@fb.com>
commit e57cf21e9787c081db4db6afa02e6e70112ee410
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e57cf21e.failed

Since commit 8e5cfb55d3f (Btrfs: Make raid_map array be inlined in
btrfs_bio structure), the raid map array is allocated along with the
btrfs bio in alloc_btrfs_bio.  The calculation used to decide how much
we need to allocate was using the wrong parameter passed into the
allocation function.

The passed in real_stripes will be zero if a target replace operation
is not currently running.  We want to use total_stripes instead.

	Signed-off-by: Chris Mason <clm@fb.com>
	Reported-by: David Sterba <dsterba@suse.cz>
	Tested-by: David Sterba <dsterba@suse.cz>
(cherry picked from commit e57cf21e9787c081db4db6afa02e6e70112ee410)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/volumes.c
diff --cc fs/btrfs/volumes.c
index 5d68b46a2990,8222f6f74147..000000000000
--- a/fs/btrfs/volumes.c
+++ b/fs/btrfs/volumes.c
@@@ -4903,6 -4900,44 +4903,47 @@@ static void sort_parity_stripes(struct 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static struct btrfs_bio *alloc_btrfs_bio(int total_stripes, int real_stripes)
+ {
+ 	struct btrfs_bio *bbio = kzalloc(
+ 		 /* the size of the btrfs_bio */
+ 		sizeof(struct btrfs_bio) +
+ 		/* plus the variable array for the stripes */
+ 		sizeof(struct btrfs_bio_stripe) * (total_stripes) +
+ 		/* plus the variable array for the tgt dev */
+ 		sizeof(int) * (real_stripes) +
+ 		/*
+ 		 * plus the raid_map, which includes both the tgt dev
+ 		 * and the stripes
+ 		 */
+ 		sizeof(u64) * (total_stripes),
+ 		GFP_NOFS);
+ 	if (!bbio)
+ 		return NULL;
+ 
+ 	atomic_set(&bbio->error, 0);
+ 	atomic_set(&bbio->refs, 1);
+ 
+ 	return bbio;
+ }
+ 
+ void btrfs_get_bbio(struct btrfs_bio *bbio)
+ {
+ 	WARN_ON(!atomic_read(&bbio->refs));
+ 	atomic_inc(&bbio->refs);
+ }
+ 
+ void btrfs_put_bbio(struct btrfs_bio *bbio)
+ {
+ 	if (!bbio)
+ 		return;
+ 	if (atomic_dec_and_test(&bbio->refs))
+ 		kfree(bbio);
+ }
+ 
++>>>>>>> e57cf21e9787 (Btrfs: fix allocation size calculations in alloc_btrfs_bio)
  static int __btrfs_map_block(struct btrfs_fs_info *fs_info, int rw,
  			     u64 logical, u64 *length,
  			     struct btrfs_bio **bbio_ret,
* Unmerged path fs/btrfs/volumes.c
