scsi: Do not attach VPD to devices that don't support it

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Hannes Reinecke <hare@suse.de>
commit 5ddfe0858ea7848c5d4efe3f4319e7543522e0ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/5ddfe085.failed

The patch "scsi: rescan VPD attributes" introduced a regression in which
devices that don't support VPD were being scanned for VPD attributes
anyway.  This could cause issues for some devices and should be avoided
so the check for scsi_level has been moved out of scsi_add_lun and into
scsi_attach_vpd so that all callers will not scan VPD for devices that
don't support it.

[mkp: Merge fix]

Fixes: 09e2b0b14690 ("scsi: rescan VPD attributes")
	Cc: <stable@vger.kernel.org> #v4.5+
	Suggested-by: Alexander Duyck <aduyck@mirantis.com>
	Signed-off-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 5ddfe0858ea7848c5d4efe3f4319e7543522e0ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd.c
diff --cc drivers/scsi/sd.c
index 26f434ffa9f6,974ca5b45f8d..000000000000
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@@ -2823,18 -2788,6 +2823,21 @@@ static void sd_read_write_same(struct s
  		sdkp->ws10 = 1;
  }
  
++<<<<<<< HEAD
 +static int sd_try_extended_inquiry(struct scsi_device *sdp)
 +{
 +	/*
 +	 * Although VPD inquiries can go to SCSI-2 type devices,
 +	 * some USB ones crash on receiving them, and the pages
 +	 * we currently ask for are for SPC-3 and beyond
 +	 */
 +	if (sdp->scsi_level > SCSI_SPC_2 && !sdp->skip_vpd_pages)
 +		return 1;
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5ddfe0858ea7 (scsi: Do not attach VPD to devices that don't support it)
  /**
   *	sd_revalidate_disk - called the first time a new disk is seen,
   *	performs disk spin up, read_capacity, etc.
diff --git a/drivers/scsi/scsi.c b/drivers/scsi/scsi.c
index a9080c4f426e..68996233d127 100644
--- a/drivers/scsi/scsi.c
+++ b/drivers/scsi/scsi.c
@@ -966,8 +966,9 @@ void scsi_attach_vpd(struct scsi_device *sdev)
 	int pg83_supported = 0;
 	unsigned char *vpd_buf;
 
-	if (sdev->skip_vpd_pages)
+	if (!scsi_device_supports_vpd(sdev))
 		return;
+
 retry_pg0:
 	vpd_buf = kmalloc(vpd_len, GFP_KERNEL);
 	if (!vpd_buf)
* Unmerged path drivers/scsi/sd.c
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index e1cb95bd1424..33f96aef6d6a 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -592,6 +592,31 @@ static inline int scsi_device_tpgs(struct scsi_device *sdev)
 	return sdev->inquiry ? (sdev->inquiry[5] >> 4) & 0x3 : 0;
 }
 
+/**
+ * scsi_device_supports_vpd - test if a device supports VPD pages
+ * @sdev: the &struct scsi_device to test
+ *
+ * If the 'try_vpd_pages' flag is set it takes precedence.
+ * Otherwise we will assume VPD pages are supported if the
+ * SCSI level is at least SPC-3 and 'skip_vpd_pages' is not set.
+ */
+static inline int scsi_device_supports_vpd(struct scsi_device *sdev)
+{
+	/* Attempt VPD inquiry if the device blacklist explicitly calls
+	 * for it.
+	 */
+	if (sdev->try_vpd_pages)
+		return 1;
+	/*
+	 * Although VPD inquiries can go to SCSI-2 type devices,
+	 * some USB ones crash on receiving them, and the pages
+	 * we currently ask for are for SPC-3 and beyond
+	 */
+	if (sdev->scsi_level > SCSI_SPC_2 && !sdev->skip_vpd_pages)
+		return 1;
+	return 0;
+}
+
 #define MODULE_ALIAS_SCSI_DEVICE(type) \
 	MODULE_ALIAS("scsi:t-" __stringify(type) "*")
 #define SCSI_DEVICE_MODALIAS_FMT "scsi:t-0x%02x"
