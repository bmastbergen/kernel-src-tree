virtio_balloon: fix race by fill and leak

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Minchan Kim <minchan@kernel.org>
commit f68b992bbb474641881932c61c92dcfa6f5b3689
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f68b992b.failed

During my compaction-related stuff, I encountered a bug
with ballooning.

With repeated inflating and deflating cycle, guest memory(
ie, cat /proc/meminfo | grep MemTotal) is decreased and
couldn't be recovered.

The reason is balloon_lock doesn't cover release_pages_balloon
so struct virtio_balloon fields could be overwritten by race
of fill_balloon(e,g, vb->*pfns could be critical).

This patch fixes it in my test.

	Cc: <stable@vger.kernel.org>
	Signed-off-by: Minchan Kim <minchan@kernel.org>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit f68b992bbb474641881932c61c92dcfa6f5b3689)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio_balloon.c
diff --cc drivers/virtio/virtio_balloon.c
index 5e461066deb2,7d3e5d0e9aa4..000000000000
--- a/drivers/virtio/virtio_balloon.c
+++ b/drivers/virtio/virtio_balloon.c
@@@ -203,8 -209,8 +203,13 @@@ static unsigned leak_balloon(struct vir
  	 */
  	if (vb->num_pfns != 0)
  		tell_host(vb, vb->deflate_vq);
++<<<<<<< HEAD
 +	mutex_unlock(&vb->balloon_lock);
 +	release_pages_by_pfn(vb->pfns, vb->num_pfns);
++=======
+ 	release_pages_balloon(vb);
+ 	mutex_unlock(&vb->balloon_lock);
++>>>>>>> f68b992bbb47 (virtio_balloon: fix race by fill and leak)
  	return num_freed_pages;
  }
  
* Unmerged path drivers/virtio/virtio_balloon.c
