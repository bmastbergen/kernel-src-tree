xfs: fix xfs_log_ticket leak in xfs_end_io() after fs shutdown

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Brian Foster <bfoster@redhat.com>
commit af055e37a91d215d7174d0b84c86795ca81086a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/af055e37.failed

If the filesystem has shut down, xfs_end_io() currently sets an
error on the ioend and proceeds to ioend destruction. The ioend
might contain a truncate transaction if the I/O extended the size of
the file. This transaction is only cleaned up in
xfs_setfilesize_ioend(), however, which is skipped in this case.
This results in an xfs_log_ticket leak message when the associate
cache slab is destroyed (e.g., on rmmod).

This was originally reproduced by xfs/141 on a distro kernel. The
problem is reproducible on an upstream kernel, but not easily
detected in current upstream if the xfs_log_ticket cache happens to
be merged with another cache. This can be reproduced more
deterministically with the 'slab_nomerge' kernel boot option.

Update xfs_end_io() to proceed with normal end I/O processing after
an error is set on an ioend due to fs shutdown. The I/O type-based
processing is already designed to handle an I/O error and ensure
that the ioend is cleaned up correctly.

	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit af055e37a91d215d7174d0b84c86795ca81086a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_aops.c
diff --cc fs/xfs/xfs_aops.c
index 3ffbdb7cbd8f,0c8dacea411e..000000000000
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@@ -209,12 -214,12 +209,19 @@@ xfs_end_io
  	struct xfs_inode *ip = XFS_I(ioend->io_inode);
  	int		error = 0;
  
- 	if (XFS_FORCED_SHUTDOWN(ip->i_mount)) {
+ 	/*
+ 	 * Set an error if the mount has shut down and proceed with end I/O
+ 	 * processing so it can perform whatever cleanups are necessary.
+ 	 */
+ 	if (XFS_FORCED_SHUTDOWN(ip->i_mount))
  		ioend->io_error = -EIO;
++<<<<<<< HEAD
 +		goto done;
 +	}
 +	if (ioend->io_error)
 +		goto done;
++=======
++>>>>>>> af055e37a91d (xfs: fix xfs_log_ticket leak in xfs_end_io() after fs shutdown)
  
  	/*
  	 * For unwritten extents we need to issue transactions to convert a
* Unmerged path fs/xfs/xfs_aops.c
