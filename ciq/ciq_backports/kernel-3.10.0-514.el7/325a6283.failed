perf hists browser: Cleanup hist_browser__fprintf_hierarchy_entry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Namhyung Kim <namhyung@kernel.org>
commit 325a62834e81452d2a6e253444022cf493bbabfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/325a6283.failed

The hist_browser__fprintf_hierarchy_entry() if to dump current output
into a file so it needs to be sync-ed with the corresponding function
hist_browser__show_hierarchy_entry().  So use hists->nr_hpp_node to
indent width and use first fmt_node to print overhead columns instead of
checking whether it's a sort entry (or dynamic entry).

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Tested-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1457531222-18130-6-git-send-email-namhyung@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 325a62834e81452d2a6e253444022cf493bbabfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/browsers/hists.c
diff --cc tools/perf/ui/browsers/hists.c
index d1445dd5bb7f,aed9c8f011f7..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -1582,12 -1914,71 +1582,71 @@@ static int hist_browser__fprintf_entry(
  			first = false;
  
  		ret = fmt->entry(fmt, &hpp, he);
 -		ret = hist_entry__snprintf_alignment(he, &hpp, fmt, ret);
  		advance_hpp(&hpp, ret);
  	}
++<<<<<<< HEAD
++=======
+ 	printed += fprintf(fp, "%s\n", s);
+ 
+ 	if (folded_sign == '-')
+ 		printed += hist_browser__fprintf_callchain(browser, he, fp, 1);
+ 
+ 	return printed;
+ }
+ 
+ 
+ static int hist_browser__fprintf_hierarchy_entry(struct hist_browser *browser,
+ 						 struct hist_entry *he,
+ 						 FILE *fp, int level)
+ {
+ 	char s[8192];
+ 	int printed = 0;
+ 	char folded_sign = ' ';
+ 	struct perf_hpp hpp = {
+ 		.buf = s,
+ 		.size = sizeof(s),
+ 	};
+ 	struct perf_hpp_fmt *fmt;
+ 	struct perf_hpp_list_node *fmt_node;
+ 	bool first = true;
+ 	int ret;
+ 	int hierarchy_indent = (he->hists->nr_hpp_node - 2) * HIERARCHY_INDENT;
+ 
+ 	printed = fprintf(fp, "%*s", level * HIERARCHY_INDENT, "");
+ 
+ 	folded_sign = hist_entry__folded(he);
+ 	printed += fprintf(fp, "%c", folded_sign);
+ 
+ 	/* the first hpp_list_node is for overhead columns */
+ 	fmt_node = list_first_entry(&he->hists->hpp_formats,
+ 				    struct perf_hpp_list_node, list);
+ 	perf_hpp_list__for_each_format(&fmt_node->hpp, fmt) {
+ 		if (!first) {
+ 			ret = scnprintf(hpp.buf, hpp.size, "  ");
+ 			advance_hpp(&hpp, ret);
+ 		} else
+ 			first = false;
+ 
+ 		ret = fmt->entry(fmt, &hpp, he);
+ 		advance_hpp(&hpp, ret);
+ 	}
+ 
+ 	ret = scnprintf(hpp.buf, hpp.size, "%*s", hierarchy_indent, "");
+ 	advance_hpp(&hpp, ret);
+ 
+ 	perf_hpp_list__for_each_format(he->hpp_list, fmt) {
+ 		ret = scnprintf(hpp.buf, hpp.size, "  ");
+ 		advance_hpp(&hpp, ret);
+ 
+ 		ret = fmt->entry(fmt, &hpp, he);
+ 		advance_hpp(&hpp, ret);
+ 	}
+ 
++>>>>>>> 325a62834e81 (perf hists browser: Cleanup hist_browser__fprintf_hierarchy_entry())
  	printed += fprintf(fp, "%s\n", rtrim(s));
  
 -	if (he->leaf && folded_sign == '-') {
 -		printed += hist_browser__fprintf_callchain(browser, he, fp,
 -							   he->depth + 1);
 -	}
 +	if (folded_sign == '-')
 +		printed += hist_browser__fprintf_callchain(browser, he, fp);
  
  	return printed;
  }
@@@ -1601,8 -1992,16 +1660,21 @@@ static int hist_browser__fprintf(struc
  	while (nd) {
  		struct hist_entry *h = rb_entry(nd, struct hist_entry, rb_node);
  
++<<<<<<< HEAD
 +		printed += hist_browser__fprintf_entry(browser, h, fp);
 +		nd = hists__filter_entries(rb_next(nd), browser->min_pcnt);
++=======
+ 		if (symbol_conf.report_hierarchy) {
+ 			printed += hist_browser__fprintf_hierarchy_entry(browser,
+ 									 h, fp,
+ 									 h->depth);
+ 		} else {
+ 			printed += hist_browser__fprintf_entry(browser, h, fp);
+ 		}
+ 
+ 		nd = hists__filter_entries(rb_hierarchy_next(nd),
+ 					   browser->min_pcnt);
++>>>>>>> 325a62834e81 (perf hists browser: Cleanup hist_browser__fprintf_hierarchy_entry())
  	}
  
  	return printed;
* Unmerged path tools/perf/ui/browsers/hists.c
