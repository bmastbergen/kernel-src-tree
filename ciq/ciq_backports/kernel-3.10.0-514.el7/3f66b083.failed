inet: introduce ireq_family

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 3f66b083a5b7f1a63540c24df3679c24f2e935a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3f66b083.failed

Before inserting request socks into general hash table,
fill their socket family.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3f66b083a5b7f1a63540c24df3679c24f2e935a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/inet_sock.h
#	net/dccp/ipv4.c
#	net/dccp/ipv6.c
#	net/ipv4/syncookies.c
#	net/ipv6/syncookies.c
diff --cc include/net/inet_sock.h
index 38188e5b955a,b3053fdd871e..000000000000
--- a/include/net/inet_sock.h
+++ b/include/net/inet_sock.h
@@@ -78,6 -78,11 +78,14 @@@ struct inet_request_sock 
  #define ir_v6_rmt_addr		req.__req_common.skc_v6_daddr
  #define ir_v6_loc_addr		req.__req_common.skc_v6_rcv_saddr
  #define ir_iif			req.__req_common.skc_bound_dev_if
++<<<<<<< HEAD
++=======
+ #define ir_cookie		req.__req_common.skc_cookie
+ #define ireq_net		req.__req_common.skc_net
+ #define ireq_state		req.__req_common.skc_state
+ #define ireq_refcnt		req.__req_common.skc_refcnt
+ #define ireq_family		req.__req_common.skc_family
++>>>>>>> 3f66b083a5b7 (inet: introduce ireq_family)
  
  	kmemcheck_bitfield_begin(flags);
  	u16			snd_wscale : 4,
diff --cc net/dccp/ipv4.c
index 1be4968143f5,8f6f4004daac..000000000000
--- a/net/dccp/ipv4.c
+++ b/net/dccp/ipv4.c
@@@ -644,6 -641,8 +644,11 @@@ int dccp_v4_conn_request(struct sock *s
  	ireq = inet_rsk(req);
  	ireq->ir_loc_addr = ip_hdr(skb)->daddr;
  	ireq->ir_rmt_addr = ip_hdr(skb)->saddr;
++<<<<<<< HEAD
++=======
+ 	write_pnet(&ireq->ireq_net, sock_net(sk));
+ 	ireq->ireq_family = AF_INET;
++>>>>>>> 3f66b083a5b7 (inet: introduce ireq_family)
  
  	/*
  	 * Step 3: Process LISTEN state
diff --cc net/dccp/ipv6.c
index 04cb17d4b0ce,5166b0043f95..000000000000
--- a/net/dccp/ipv6.c
+++ b/net/dccp/ipv6.c
@@@ -403,8 -403,10 +403,13 @@@ static int dccp_v6_conn_request(struct 
  	ireq = inet_rsk(req);
  	ireq->ir_v6_rmt_addr = ipv6_hdr(skb)->saddr;
  	ireq->ir_v6_loc_addr = ipv6_hdr(skb)->daddr;
++<<<<<<< HEAD
++=======
+ 	write_pnet(&ireq->ireq_net, sock_net(sk));
+ 	ireq->ireq_family = AF_INET6;
++>>>>>>> 3f66b083a5b7 (inet: introduce ireq_family)
  
 -	if (ipv6_opt_accepted(sk, skb, IP6CB(skb)) ||
 +	if (ipv6_opt_accepted(sk, skb) ||
  	    np->rxopt.bits.rxinfo || np->rxopt.bits.rxoinfo ||
  	    np->rxopt.bits.rxhlim || np->rxopt.bits.rxohlim) {
  		atomic_inc(&skb->users);
diff --cc net/ipv4/syncookies.c
index 650ced499f23,0c432730c7b4..000000000000
--- a/net/ipv4/syncookies.c
+++ b/net/ipv4/syncookies.c
@@@ -342,6 -346,8 +342,11 @@@ struct sock *cookie_v4_check(struct soc
  	req->ts_recent		= tcp_opt.saw_tstamp ? tcp_opt.rcv_tsval : 0;
  	treq->snt_synack	= tcp_opt.saw_tstamp ? tcp_opt.rcv_tsecr : 0;
  	treq->listener		= NULL;
++<<<<<<< HEAD
++=======
+ 	write_pnet(&ireq->ireq_net, sock_net(sk));
+ 	ireq->ireq_family = AF_INET;
++>>>>>>> 3f66b083a5b7 (inet: introduce ireq_family)
  
  	/* We throwed the options of the initial SYN away, so we hope
  	 * the ACK carries the same options again (see RFC1122 4.2.3.8)
diff --cc net/ipv6/syncookies.c
index 47e5432f7b07,58875ce8e178..000000000000
--- a/net/ipv6/syncookies.c
+++ b/net/ipv6/syncookies.c
@@@ -193,6 -196,8 +193,11 @@@ struct sock *cookie_v6_check(struct soc
  	ireq = inet_rsk(req);
  	treq = tcp_rsk(req);
  	treq->listener = NULL;
++<<<<<<< HEAD
++=======
+ 	write_pnet(&ireq->ireq_net, sock_net(sk));
+ 	ireq->ireq_family = AF_INET6;
++>>>>>>> 3f66b083a5b7 (inet: introduce ireq_family)
  
  	if (security_inet_conn_request(sk, skb, req))
  		goto out_free;
* Unmerged path include/net/inet_sock.h
* Unmerged path net/dccp/ipv4.c
* Unmerged path net/dccp/ipv6.c
diff --git a/net/ipv4/inet_diag.c b/net/ipv4/inet_diag.c
index 9dc6c425c768..2d4c8bdb58ad 100644
--- a/net/ipv4/inet_diag.c
+++ b/net/ipv4/inet_diag.c
@@ -762,7 +762,7 @@ static int inet_diag_fill_req(struct sk_buff *skb, struct sock *sk,
 		return -EMSGSIZE;
 
 	r = nlmsg_data(nlh);
-	r->idiag_family = sk->sk_family;
+	r->idiag_family = ireq->ireq_family;
 	r->idiag_state = TCP_SYN_RECV;
 	r->idiag_timer = 1;
 	r->idiag_retrans = req->num_retrans;
* Unmerged path net/ipv4/syncookies.c
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index ed3602fcee3a..72e901c27569 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1251,6 +1251,7 @@ static void tcp_v4_init_req(struct request_sock *req, struct sock *sk,
 	ireq->ir_rmt_addr = ip_hdr(skb)->saddr;
 	ireq->no_srccheck = inet_sk(sk)->transparent;
 	ireq->opt = tcp_v4_save_options(skb);
+	ireq->ireq_family = AF_INET;
 }
 
 static struct dst_entry *tcp_v4_route_req(struct sock *sk, struct flowi *fl,
* Unmerged path net/ipv6/syncookies.c
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index b1e56e7b4f4f..8c6650d8c3e9 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -743,6 +743,7 @@ static void tcp_v6_init_req(struct request_sock *req, struct sock *sk,
 		atomic_inc(&skb->users);
 		ireq->pktopts = skb;
 	}
+	ireq->ireq_family = AF_INET6;
 }
 
 static struct dst_entry *tcp_v6_route_req(struct sock *sk, struct flowi *fl,
