s390/stacktrace: fix address ranges for asynchronous and panic stack

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [s390] stacktrace: fix address ranges for asynchronous and panic stack (Pratyush Anand) [1297488]
Rebuild_FUZZ: 96.18%
commit-author Heiko Carstens <heiko.carstens@de.ibm.com>
commit 9900c48c46d8bcf497972024c5fe366e6d9771f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9900c48c.failed

git commit dc7ee00d4771 ("s390: lowcore stack pointer offsets")
introduced a regression in regard to save_stack_trace(). The stack
pointer for the asynchronous and the panic stack in the lowcore now
have an additional offset applied to them. This offset needs to be
taken into account in the calculation for the low and high address for
the stacks.

This bug was already partially fixed with 9cc5c206d9b4
("s390/dumpstack: fix address ranges for asynchronous and panic
stack"). This patch fixes it also for the stacktrace code.

Fixes: dc7ee00d4771 ("s390: lowcore stack pointer offsets")
	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Tested-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 9900c48c46d8bcf497972024c5fe366e6d9771f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/stacktrace.c
diff --cc arch/s390/kernel/stacktrace.c
index 1785cd82253c,225bed00aa92..000000000000
--- a/arch/s390/kernel/stacktrace.c
+++ b/arch/s390/kernel/stacktrace.c
@@@ -63,12 -62,13 +63,17 @@@ static unsigned long save_context_stack
  void save_stack_trace(struct stack_trace *trace)
  {
  	register unsigned long sp asm ("15");
- 	unsigned long orig_sp, new_sp;
+ 	unsigned long orig_sp, new_sp, frame_size;
  
++<<<<<<< HEAD
 +	orig_sp = sp & PSW_ADDR_INSN;
++=======
+ 	frame_size = STACK_FRAME_OVERHEAD + sizeof(struct pt_regs);
+ 	orig_sp = sp;
++>>>>>>> 9900c48c46d8 (s390/stacktrace: fix address ranges for asynchronous and panic stack)
  	new_sp = save_context_stack(trace, orig_sp,
- 				    S390_lowcore.panic_stack - PAGE_SIZE,
- 				    S390_lowcore.panic_stack, 1);
+ 			S390_lowcore.panic_stack + frame_size - PAGE_SIZE,
+ 			S390_lowcore.panic_stack + frame_size, 1);
  	if (new_sp != orig_sp)
  		return;
  	new_sp = save_context_stack(trace, new_sp,
* Unmerged path arch/s390/kernel/stacktrace.c
