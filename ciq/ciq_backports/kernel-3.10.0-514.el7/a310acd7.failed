NVMe: use split lo_hi_{read,write}q

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [block] nvme: use split lo_hi_readq, lo_write_q (David Milburn) [1288601]
Rebuild_FUZZ: 89.19%
commit-author Stephan GÃ¼nther <guenther@tum.de>
commit a310acd7a7ea53533886c11bb7edd11ffd61a036
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a310acd7.failed

Some controllers may require ordered split transfers even on 64bit
machines, e.g. Apple's NVMe controller as found in the MacBook8,1 and
MacBookAir7,1 (256/512GB models).

This patch enforces ordered split transfers on 64bit platforms, which
works around that issue for all controllers. As pointed out by Christoph
[1] there should be no performance impact due to that modification.

[1] http://lists.infradead.org/pipermail/linux-nvme/2015-November/002965.html

	Signed-off-by: Stephan Guenther <guenther@tum.de>
	Signed-off-by: Maurice Leclaire <leclaire@in.tum.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>

Updated by me to explicitly use lo_hi_read/writeq instead of playing
define tricks.

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit a310acd7a7ea53533886c11bb7edd11ffd61a036)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index f880e0529928,3435d79a99ee..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -2410,22 -2603,14 +2410,26 @@@ static void nvme_dev_scan(struct work_s
   */
  static int nvme_dev_add(struct nvme_dev *dev)
  {
 -	struct pci_dev *pdev = to_pci_dev(dev->dev);
 +	struct pci_dev *pdev = dev->pci_dev;
  	int res;
 +	unsigned nn;
  	struct nvme_id_ctrl *ctrl;
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +	void *mem;
 +	dma_addr_t dma_addr;
 +	int shift = NVME_CAP_MPSMIN(readq(&dev->bar->cap)) + 12;
++=======
+ 	int shift = NVME_CAP_MPSMIN(lo_hi_readq(&dev->bar->cap)) + 12;
++>>>>>>> a310acd7a7ea (NVMe: use split lo_hi_{read,write}q):drivers/nvme/host/pci.c
  
 -	res = nvme_identify_ctrl(dev, &ctrl);
 +	mem = dma_alloc_coherent(&pdev->dev, 4096, &dma_addr, GFP_KERNEL);
 +	if (!mem)
 +		return -ENOMEM;
 +
 +	res = nvme_identify(dev, 0, 1, dma_addr);
  	if (res) {
 -		dev_err(dev->dev, "Identify Controller failed (%d)\n", res);
 +		dev_err(&pdev->dev, "Identify Controller failed (%d)\n", res);
 +		dma_free_coherent(&dev->pci_dev->dev, 4096, mem, dma_addr);
  		return -EIO;
  	}
  
* Unmerged path drivers/block/nvme-core.c
