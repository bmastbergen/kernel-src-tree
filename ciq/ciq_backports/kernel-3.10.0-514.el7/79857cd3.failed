net/mlx4: Postpone the registration of net_device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Moni Shoua <monis@mellanox.com>
commit 79857cd31fe70145ff007d4e968557af342c8ccd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/79857cd3.failed

The mlx4 network driver was registered in the context of the 'add'
function of the core driver (called when HW should be registered).
This makes the netdev event NETDEV_REGISTER to be sent in a context
where the answer to get_protocol_dev() callback returns NULL. This may
be confusing to listeners of netdev events.
This patch is a preparation to the patch that implements the
get_netdev() callback in the IB/mlx4 driver.

	Signed-off-by: Moni Shoua <monis@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 79857cd31fe70145ff007d4e968557af342c8ccd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_main.c
index 23cf1f23e56a,a946e4bf71d2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_main.c
@@@ -288,15 -317,6 +308,18 @@@ static void *mlx4_en_add(struct mlx4_de
  	mutex_init(&mdev->state_lock);
  	mdev->device_up = true;
  
++<<<<<<< HEAD
 +	/* Setup ports */
 +
 +	/* Create a netdev for each port */
 +	mlx4_foreach_port(i, dev, MLX4_PORT_TYPE_ETH) {
 +		mlx4_info(mdev, "Activating port:%d\n", i);
 +		if (mlx4_en_init_netdev(mdev, i, &mdev->profile.prof[i]))
 +			mdev->pndev[i] = NULL;
 +	}
 +
++=======
++>>>>>>> 79857cd31fe7 (net/mlx4: Postpone the registration of net_device)
  	return mdev;
  
  err_mr:
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/intf.c b/drivers/net/ethernet/mellanox/mlx4/intf.c
index 0d80aed59043..0472941af820 100644
--- a/drivers/net/ethernet/mellanox/mlx4/intf.c
+++ b/drivers/net/ethernet/mellanox/mlx4/intf.c
@@ -63,8 +63,11 @@ static void mlx4_add_device(struct mlx4_interface *intf, struct mlx4_priv *priv)
 		spin_lock_irq(&priv->ctx_lock);
 		list_add_tail(&dev_ctx->list, &priv->ctx_list);
 		spin_unlock_irq(&priv->ctx_lock);
+		if (intf->activate)
+			intf->activate(&priv->dev, dev_ctx->context);
 	} else
 		kfree(dev_ctx);
+
 }
 
 static void mlx4_remove_device(struct mlx4_interface *intf, struct mlx4_priv *priv)
diff --git a/include/linux/mlx4/driver.h b/include/linux/mlx4/driver.h
index 9553a73d2049..5a06d969338e 100644
--- a/include/linux/mlx4/driver.h
+++ b/include/linux/mlx4/driver.h
@@ -59,6 +59,7 @@ struct mlx4_interface {
 	void			(*event) (struct mlx4_dev *dev, void *context,
 					  enum mlx4_dev_event event, unsigned long param);
 	void *			(*get_dev)(struct mlx4_dev *dev, void *context, u8 port);
+	void			(*activate)(struct mlx4_dev *dev, void *context);
 	struct list_head	list;
 	enum mlx4_protocol	protocol;
 	int			flags;
