nvme: fix 32-bit build warning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Arnd Bergmann <arnd@arndb.de>
commit 3d42e67fe5ebc1e5c3aae9b1037e38ec99a362cc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3d42e67f.failed

Compiling the nvme driver on 32-bit warns about a cast from a __u64
variable to a pointer:

drivers/block/nvme-core.c: In function 'nvme_submit_io':
drivers/block/nvme-core.c:1847:4: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
    (void __user *)io.addr, length, NULL, 0);

The cast here is intentional and safe, so we can shut up the
gcc warning by adding an intermediate cast to 'uintptr_t'.

I had previously submitted a patch to fix this problem in the
nvme driver, but it was accepted on the same day that two new
warnings got added.

For clarification, I also change the third instance of this cast
to use uintptr_t instead of unsigned long now.

	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
Fixes: d29ec8241c10e ("nvme: submit internal commands through the block layer")
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 3d42e67fe5ebc1e5c3aae9b1037e38ec99a362cc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index f5099f908371,ad58ee3c3b57..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -1666,17 -1800,22 +1666,24 @@@ static int nvme_submit_io(struct nvme_n
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +	if (IS_ERR(iod))
 +		return PTR_ERR(iod);
++=======
+ 	length = (io.nblocks + 1) << ns->lba_shift;
+ 	meta_len = (io.nblocks + 1) * ns->ms;
+ 	metadata = (void __user *)(uintptr_t)io.metadata;
+ 	write = io.opcode & 1;
++>>>>>>> 3d42e67fe5eb (nvme: fix 32-bit build warning):drivers/nvme/host/pci.c
  
 -	if (ns->ext) {
 -		length += meta_len;
 -		meta_len = 0;
 +	prp_len = nvme_setup_prps(dev, iod, length, GFP_KERNEL);
 +	if (length != prp_len) {
 +		status = -ENOMEM;
 +		goto unmap;
  	}
  	if (meta_len) {
 -		if (((io.metadata & 3) || !io.metadata) && !ns->ext)
 -			return -EINVAL;
 -
 -		meta = dma_alloc_coherent(dev->dev, meta_len,
 -						&meta_dma, GFP_KERNEL);
 -
 +		meta = dma_alloc_coherent(&dev->pci_dev->dev, meta_len,
 +					  &meta_dma, GFP_KERNEL);
  		if (!meta) {
  			status = -ENOMEM;
  			goto unmap;
@@@ -1701,21 -1839,17 +1708,27 @@@
  	c.rw.reftag = cpu_to_le32(io.reftag);
  	c.rw.apptag = cpu_to_le16(io.apptag);
  	c.rw.appmask = cpu_to_le16(io.appmask);
 +	c.rw.prp1 = cpu_to_le64(sg_dma_address(iod->sg));
 +	c.rw.prp2 = cpu_to_le64(iod->first_dma);
  	c.rw.metadata = cpu_to_le64(meta_dma);
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +	status = nvme_submit_sync_cmd(ns->queue, &c);
++=======
+ 
+ 	status = __nvme_submit_sync_cmd(ns->queue, &c, NULL,
+ 			(void __user *)(uintptr_t)io.addr, length, NULL, 0);
++>>>>>>> 3d42e67fe5eb (nvme: fix 32-bit build warning):drivers/nvme/host/pci.c
   unmap:
 +	nvme_unmap_user_pages(dev, write, iod);
 +	nvme_free_iod(dev, iod);
 +
  	if (meta) {
  		if (status == NVME_SC_SUCCESS && !write) {
 -			if (copy_to_user(metadata, meta, meta_len))
 +			if (copy_to_user((void __user *)io.metadata, meta,
 +					 meta_len))
  				status = -EFAULT;
  		}
 -		dma_free_coherent(dev->dev, meta_len, meta, meta_dma);
 +		dma_free_coherent(&dev->pci_dev->dev, meta_len, meta, meta_dma);
  	}
  	return status;
  }
@@@ -1747,38 -1880,17 +1760,46 @@@ static int nvme_user_cmd(struct nvme_de
  	c.common.cdw10[4] = cpu_to_le32(cmd.cdw14);
  	c.common.cdw10[5] = cpu_to_le32(cmd.cdw15);
  
 -	if (cmd.timeout_ms)
 -		timeout = msecs_to_jiffies(cmd.timeout_ms);
 +	length = cmd.data_len;
 +	if (cmd.data_len) {
 +		iod = nvme_map_user_pages(dev, cmd.opcode & 1, cmd.addr,
 +								length);
 +		if (IS_ERR(iod))
 +			return PTR_ERR(iod);
 +		length = nvme_setup_prps(dev, iod, length, GFP_KERNEL);
 +		c.common.prp1 = cpu_to_le64(sg_dma_address(iod->sg));
 +		c.common.prp2 = cpu_to_le64(iod->first_dma);
 +	}
 +
 +	timeout = cmd.timeout_ms ? msecs_to_jiffies(cmd.timeout_ms) :
 +								ADMIN_TIMEOUT;
 +
 +	if (length != cmd.data_len) {
 +		status = -ENOMEM;
 +		goto out;
 +	}
  
  	status = __nvme_submit_sync_cmd(ns ? ns->queue : dev->admin_q, &c,
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +					&cmd.result, timeout);
 +
 +out:
 +	if (cmd.data_len) {
 +		nvme_unmap_user_pages(dev, cmd.opcode & 1, iod);
 +		nvme_free_iod(dev, iod);
++=======
+ 			NULL, (void __user *)(uintptr_t)cmd.addr, cmd.data_len,
+ 			&cmd.result, timeout);
+ 	if (status >= 0) {
+ 		if (put_user(cmd.result, &ucmd->result))
+ 			return -EFAULT;
++>>>>>>> 3d42e67fe5eb (nvme: fix 32-bit build warning):drivers/nvme/host/pci.c
  	}
  
 +	if ((status >= 0) && copy_to_user(&ucmd->result, &cmd.result,
 +							sizeof(cmd.result)))
 +		status = -EFAULT;
 +
  	return status;
  }
  
* Unmerged path drivers/block/nvme-core.c
