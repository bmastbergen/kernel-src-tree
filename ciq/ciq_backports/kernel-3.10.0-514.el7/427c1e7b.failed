{IB, net}/mlx5: Move the modify QP operation table to mlx5_ib

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author majd@mellanox.com <majd@mellanox.com>
commit 427c1e7bcd7e5cd62160fcda0ce215ebbe0da3a1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/427c1e7b.failed

When modifying a QP, the desired operation was determined in
the mlx5_core using a transition table that takes the current
state, the final state, and returns the desired operation.

Since this logic will be used for Raw Packet QP, move the
operation table to the mlx5_ib.

	Signed-off-by: Majd Dibbiny <majd@mellanox.com>
	Reviewed-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 427c1e7bcd7e5cd62160fcda0ce215ebbe0da3a1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 607cf202ca0b,26e461b6a7b9..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -1197,10 -1528,10 +1197,17 @@@ static void destroy_qp_common(struct ml
  
  	if (qp->state != IB_QPS_RESET) {
  		mlx5_ib_qp_disable_pagefaults(qp);
++<<<<<<< HEAD
 +		if (mlx5_core_qp_modify(dev->mdev, to_mlx5_state(qp->state),
 +					MLX5_QP_STATE_RST, in, 0, &qp->mqp))
 +			mlx5_ib_warn(dev, "mlx5_ib: modify QP %06x to RESET failed\n",
 +				     qp->mqp.qpn);
++=======
+ 		if (mlx5_core_qp_modify(dev->mdev, MLX5_CMD_OP_2RST_QP,
+ 					in, 0, &base->mqp))
+ 			mlx5_ib_warn(dev, "mlx5_ib: modify QP 0x%06x to RESET failed\n",
+ 				     base->mqp.qpn);
++>>>>>>> 427c1e7bcd7e ({IB, net}/mlx5: Move the modify QP operation table to mlx5_ib)
  	}
  
  	get_cqs(qp, &send_cq, &recv_cq);
@@@ -1640,8 -1988,46 +1647,45 @@@ static int __mlx5_ib_modify_qp(struct i
  			       const struct ib_qp_attr *attr, int attr_mask,
  			       enum ib_qp_state cur_state, enum ib_qp_state new_state)
  {
+ 	static const u16 optab[MLX5_QP_NUM_STATE][MLX5_QP_NUM_STATE] = {
+ 		[MLX5_QP_STATE_RST] = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 			[MLX5_QP_STATE_INIT]	= MLX5_CMD_OP_RST2INIT_QP,
+ 		},
+ 		[MLX5_QP_STATE_INIT]  = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 			[MLX5_QP_STATE_INIT]	= MLX5_CMD_OP_INIT2INIT_QP,
+ 			[MLX5_QP_STATE_RTR]	= MLX5_CMD_OP_INIT2RTR_QP,
+ 		},
+ 		[MLX5_QP_STATE_RTR]   = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 			[MLX5_QP_STATE_RTS]	= MLX5_CMD_OP_RTR2RTS_QP,
+ 		},
+ 		[MLX5_QP_STATE_RTS]   = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 			[MLX5_QP_STATE_RTS]	= MLX5_CMD_OP_RTS2RTS_QP,
+ 		},
+ 		[MLX5_QP_STATE_SQD] = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 		},
+ 		[MLX5_QP_STATE_SQER] = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 			[MLX5_QP_STATE_RTS]	= MLX5_CMD_OP_SQERR2RTS_QP,
+ 		},
+ 		[MLX5_QP_STATE_ERR] = {
+ 			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
+ 			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
+ 		}
+ 	};
+ 
  	struct mlx5_ib_dev *dev = to_mdev(ibqp->device);
  	struct mlx5_ib_qp *qp = to_mqp(ibqp);
 -	struct mlx5_ib_qp_base *base = &qp->trans_qp.base;
  	struct mlx5_ib_cq *send_cq, *recv_cq;
  	struct mlx5_qp_context *context;
  	struct mlx5_modify_qp_mbox_in *in;
@@@ -1800,9 -2192,8 +1850,14 @@@
  	optpar = ib_mask_to_mlx5_opt(attr_mask);
  	optpar &= opt_mask[mlx5_cur][mlx5_new][mlx5_st];
  	in->optparam = cpu_to_be32(optpar);
++<<<<<<< HEAD
 +	err = mlx5_core_qp_modify(dev->mdev, to_mlx5_state(cur_state),
 +				  to_mlx5_state(new_state), in, sqd_event,
 +				  &qp->mqp);
++=======
+ 	err = mlx5_core_qp_modify(dev->mdev, op, in, sqd_event,
+ 				  &base->mqp);
++>>>>>>> 427c1e7bcd7e ({IB, net}/mlx5: Move the modify QP operation table to mlx5_ib)
  	if (err)
  		goto out;
  
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/qp.c b/drivers/net/ethernet/mellanox/mlx5/core/qp.c
index c46024910736..def289375ecb 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/qp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/qp.c
@@ -348,59 +348,15 @@ int mlx5_core_destroy_qp(struct mlx5_core_dev *dev,
 }
 EXPORT_SYMBOL_GPL(mlx5_core_destroy_qp);
 
-int mlx5_core_qp_modify(struct mlx5_core_dev *dev, enum mlx5_qp_state cur_state,
-			enum mlx5_qp_state new_state,
+int mlx5_core_qp_modify(struct mlx5_core_dev *dev, u16 operation,
 			struct mlx5_modify_qp_mbox_in *in, int sqd_event,
 			struct mlx5_core_qp *qp)
 {
-	static const u16 optab[MLX5_QP_NUM_STATE][MLX5_QP_NUM_STATE] = {
-		[MLX5_QP_STATE_RST] = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-			[MLX5_QP_STATE_INIT]	= MLX5_CMD_OP_RST2INIT_QP,
-		},
-		[MLX5_QP_STATE_INIT]  = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-			[MLX5_QP_STATE_INIT]	= MLX5_CMD_OP_INIT2INIT_QP,
-			[MLX5_QP_STATE_RTR]	= MLX5_CMD_OP_INIT2RTR_QP,
-		},
-		[MLX5_QP_STATE_RTR]   = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-			[MLX5_QP_STATE_RTS]	= MLX5_CMD_OP_RTR2RTS_QP,
-		},
-		[MLX5_QP_STATE_RTS]   = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-			[MLX5_QP_STATE_RTS]	= MLX5_CMD_OP_RTS2RTS_QP,
-		},
-		[MLX5_QP_STATE_SQD] = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-		},
-		[MLX5_QP_STATE_SQER] = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-			[MLX5_QP_STATE_RTS]	= MLX5_CMD_OP_SQERR2RTS_QP,
-		},
-		[MLX5_QP_STATE_ERR] = {
-			[MLX5_QP_STATE_RST]	= MLX5_CMD_OP_2RST_QP,
-			[MLX5_QP_STATE_ERR]	= MLX5_CMD_OP_2ERR_QP,
-		}
-	};
-
 	struct mlx5_modify_qp_mbox_out out;
 	int err = 0;
-	u16 op;
-
-	if (cur_state >= MLX5_QP_NUM_STATE || new_state >= MLX5_QP_NUM_STATE ||
-	    !optab[cur_state][new_state])
-		return -EINVAL;
 
 	memset(&out, 0, sizeof(out));
-	op = optab[cur_state][new_state];
-	in->hdr.opcode = cpu_to_be16(op);
+	in->hdr.opcode = cpu_to_be16(operation);
 	in->qpn = cpu_to_be32(qp->qpn);
 	err = mlx5_cmd_exec(dev, in, sizeof(*in), &out, sizeof(out));
 	if (err)
diff --git a/include/linux/mlx5/qp.h b/include/linux/mlx5/qp.h
index f033c7a1490c..5b8c89ffaa58 100644
--- a/include/linux/mlx5/qp.h
+++ b/include/linux/mlx5/qp.h
@@ -641,8 +641,7 @@ int mlx5_core_create_qp(struct mlx5_core_dev *dev,
 			struct mlx5_core_qp *qp,
 			struct mlx5_create_qp_mbox_in *in,
 			int inlen);
-int mlx5_core_qp_modify(struct mlx5_core_dev *dev, enum mlx5_qp_state cur_state,
-			enum mlx5_qp_state new_state,
+int mlx5_core_qp_modify(struct mlx5_core_dev *dev, u16 operation,
 			struct mlx5_modify_qp_mbox_in *in, int sqd_event,
 			struct mlx5_core_qp *qp);
 int mlx5_core_destroy_qp(struct mlx5_core_dev *dev,
