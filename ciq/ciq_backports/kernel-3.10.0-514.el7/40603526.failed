pmem, x86: move x86 PMEM API to new pmem.h header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] pmem: move x86 PMEM API to new pmem.h header (Jeff Moyer) [1345801 1348502 1348836 1350149 1350156]
Rebuild_FUZZ: 94.62%
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit 40603526569b304dd92f720f2f8ab11e828ea145
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/40603526.failed

Move the x86 PMEM API implementation out of asm/cacheflush.h and into
its own header asm/pmem.h.  This will allow members of the PMEM API to
be more easily identified on this and other architectures.

	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Suggested-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 40603526569b304dd92f720f2f8ab11e828ea145)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	MAINTAINERS
#	include/linux/pmem.h
diff --cc MAINTAINERS
index 7069382ff6e9,8fcde3717ab7..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -4948,6 -6080,89 +4948,92 @@@ F:	drivers/lguest
  F:	include/linux/lguest*.h
  F:	tools/lguest/
  
++<<<<<<< HEAD
++=======
+ LIBATA SUBSYSTEM (Serial and Parallel ATA drivers)
+ M:	Tejun Heo <tj@kernel.org>
+ L:	linux-ide@vger.kernel.org
+ T:	git git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata.git
+ S:	Maintained
+ F:	drivers/ata/
+ F:	include/linux/ata.h
+ F:	include/linux/libata.h
+ 
+ LIBATA PATA ARASAN COMPACT FLASH CONTROLLER
+ M:	Viresh Kumar <vireshk@kernel.org>
+ L:	linux-ide@vger.kernel.org
+ T:	git git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata.git
+ S:	Maintained
+ F:	include/linux/pata_arasan_cf_data.h
+ F:	drivers/ata/pata_arasan_cf.c
+ 
+ LIBATA PATA DRIVERS
+ M:	Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
+ M:	Tejun Heo <tj@kernel.org>
+ L:	linux-ide@vger.kernel.org
+ T:	git git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata.git
+ S:	Maintained
+ F:	drivers/ata/pata_*.c
+ F:	drivers/ata/ata_generic.c
+ 
+ LIBATA SATA AHCI PLATFORM devices support
+ M:	Hans de Goede <hdegoede@redhat.com>
+ M:	Tejun Heo <tj@kernel.org>
+ L:	linux-ide@vger.kernel.org
+ T:	git git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata.git
+ S:	Maintained
+ F:	drivers/ata/ahci_platform.c
+ F:	drivers/ata/libahci_platform.c
+ F:	include/linux/ahci_platform.h
+ 
+ LIBATA SATA PROMISE TX2/TX4 CONTROLLER DRIVER
+ M:	Mikael Pettersson <mikpelinux@gmail.com>
+ L:	linux-ide@vger.kernel.org
+ T:	git git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata.git
+ S:	Maintained
+ F:	drivers/ata/sata_promise.*
+ 
+ LIBLOCKDEP
+ M:	Sasha Levin <sasha.levin@oracle.com>
+ S:	Maintained
+ F:	tools/lib/lockdep/
+ 
+ LIBNVDIMM: NON-VOLATILE MEMORY DEVICE SUBSYSTEM
+ M:	Dan Williams <dan.j.williams@intel.com>
+ L:	linux-nvdimm@lists.01.org
+ Q:	https://patchwork.kernel.org/project/linux-nvdimm/list/
+ S:	Supported
+ F:	drivers/nvdimm/*
+ F:	include/linux/nd.h
+ F:	include/linux/libnvdimm.h
+ F:	include/uapi/linux/ndctl.h
+ 
+ LIBNVDIMM BLK: MMIO-APERTURE DRIVER
+ M:	Ross Zwisler <ross.zwisler@linux.intel.com>
+ L:	linux-nvdimm@lists.01.org
+ Q:	https://patchwork.kernel.org/project/linux-nvdimm/list/
+ S:	Supported
+ F:	drivers/nvdimm/blk.c
+ F:	drivers/nvdimm/region_devs.c
+ F:	drivers/acpi/nfit*
+ 
+ LIBNVDIMM BTT: BLOCK TRANSLATION TABLE
+ M:	Vishal Verma <vishal.l.verma@intel.com>
+ L:	linux-nvdimm@lists.01.org
+ Q:	https://patchwork.kernel.org/project/linux-nvdimm/list/
+ S:	Supported
+ F:	drivers/nvdimm/btt*
+ 
+ LIBNVDIMM PMEM: PERSISTENT MEMORY DRIVER
+ M:	Ross Zwisler <ross.zwisler@linux.intel.com>
+ L:	linux-nvdimm@lists.01.org
+ Q:	https://patchwork.kernel.org/project/linux-nvdimm/list/
+ S:	Supported
+ F:	drivers/nvdimm/pmem.c
+ F:	include/linux/pmem.h
+ F:	arch/*/include/asm/pmem.h
+ 
++>>>>>>> 40603526569b (pmem, x86: move x86 PMEM API to new pmem.h header)
  LINUX FOR IBM pSERIES (RS/6000)
  M:	Paul Mackerras <paulus@au.ibm.com>
  W:	http://www.ibm.com/linux/ltc/projects/ppc
* Unmerged path include/linux/pmem.h
* Unmerged path MAINTAINERS
diff --git a/arch/x86/include/asm/pmem.h b/arch/x86/include/asm/pmem.h
new file mode 100644
index 000000000000..f43462cc91aa
--- /dev/null
+++ b/arch/x86/include/asm/pmem.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright(c) 2015 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+#ifndef __ASM_X86_PMEM_H__
+#define __ASM_X86_PMEM_H__
+
+#include <linux/uaccess.h>
+#include <asm/cacheflush.h>
+#include <asm/cpufeature.h>
+#include <asm/special_insns.h>
+
+#ifdef ARCH_HAS_NOCACHE_UACCESS
+
+/**
+ * arch_memcpy_to_pmem - copy data to persistent memory
+ * @dst: destination buffer for the copy
+ * @src: source buffer for the copy
+ * @n: length of the copy in bytes
+ *
+ * Copy data to persistent memory media via non-temporal stores so that
+ * a subsequent arch_wmb_pmem() can flush cpu and memory controller
+ * write buffers to guarantee durability.
+ */
+static inline void arch_memcpy_to_pmem(void __pmem *dst, const void *src,
+		size_t n)
+{
+	int unwritten;
+
+	/*
+	 * We are copying between two kernel buffers, if
+	 * __copy_from_user_inatomic_nocache() returns an error (page
+	 * fault) we would have already reported a general protection fault
+	 * before the WARN+BUG.
+	 */
+	unwritten = __copy_from_user_inatomic_nocache((void __force *) dst,
+			(void __user *) src, n);
+	if (WARN(unwritten, "%s: fault copying %p <- %p unwritten: %d\n",
+				__func__, dst, src, unwritten))
+		BUG();
+}
+
+/**
+ * arch_wmb_pmem - synchronize writes to persistent memory
+ *
+ * After a series of arch_memcpy_to_pmem() operations this drains data
+ * from cpu write buffers and any platform (memory controller) buffers
+ * to ensure that written data is durable on persistent memory media.
+ */
+static inline void arch_wmb_pmem(void)
+{
+	/*
+	 * wmb() to 'sfence' all previous writes such that they are
+	 * architecturally visible to 'pcommit'.  Note, that we've
+	 * already arranged for pmem writes to avoid the cache via
+	 * arch_memcpy_to_pmem().
+	 */
+	wmb();
+	pcommit_sfence();
+}
+
+static inline bool __arch_has_wmb_pmem(void)
+{
+#ifdef CONFIG_X86_64
+	/*
+	 * We require that wmb() be an 'sfence', that is only guaranteed on
+	 * 64-bit builds
+	 */
+	return static_cpu_has(X86_FEATURE_PCOMMIT);
+#else
+	return false;
+#endif
+}
+#else /* ARCH_HAS_NOCACHE_UACCESS i.e. ARCH=um */
+extern void arch_memcpy_to_pmem(void __pmem *dst, const void *src, size_t n);
+extern void arch_wmb_pmem(void);
+
+static inline bool __arch_has_wmb_pmem(void)
+{
+	return false;
+}
+#endif
+
+#endif /* __ASM_X86_PMEM_H__ */
* Unmerged path include/linux/pmem.h
