be2iscsi: Remove be_mbox_notify_wait function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jitendra Bhivare <jitendra.bhivare@broadcom.com>
commit a264f5e80d56ae675e25f0e4158e12f4df5efb9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a264f5e8.failed

be_mbox_notify_wait does exactly same thing as be_mbox_notify.

	Signed-off-by: Jitendra Bhivare <jitendra.bhivare@broadcom.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit a264f5e80d56ae675e25f0e4158e12f4df5efb9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/be2iscsi/be_cmds.c
diff --cc drivers/scsi/be2iscsi/be_cmds.c
index f6abd01429a1,12b60dd8d1c9..000000000000
--- a/drivers/scsi/be2iscsi/be_cmds.c
+++ b/drivers/scsi/be2iscsi/be_cmds.c
@@@ -636,10 -625,8 +636,8 @@@ int be_mbox_notify(struct be_ctrl_info 
  	void __iomem *db = ctrl->db + MPU_MAILBOX_DB_OFFSET;
  	struct be_dma_mem *mbox_mem = &ctrl->mbox_mem;
  	struct be_mcc_mailbox *mbox = mbox_mem->va;
- 	struct be_mcc_compl *compl = &mbox->compl;
- 	struct beiscsi_hba *phba = pci_get_drvdata(ctrl->pdev);
  
 -	status = be_mbox_db_ready_poll(ctrl);
 +	status = be_mbox_db_ready_wait(ctrl);
  	if (status)
  		return status;
  
@@@ -665,77 -652,8 +663,82 @@@
  	/* RDY is set; small delay before CQE read. */
  	udelay(1);
  
++<<<<<<< HEAD
 +	if (be_mcc_compl_is_new(compl)) {
 +		status = be_mcc_compl_process(ctrl, &mbox->compl);
 +		be_mcc_compl_use(compl);
 +		if (status) {
 +			beiscsi_log(phba, KERN_ERR,
 +				    BEISCSI_LOG_CONFIG | BEISCSI_LOG_MBOX,
 +				    "BC_%d : After be_mcc_compl_process\n");
 +
 +			return status;
 +		}
 +	} else {
 +		beiscsi_log(phba, KERN_ERR,
 +			    BEISCSI_LOG_CONFIG | BEISCSI_LOG_MBOX,
 +			    "BC_%d : Invalid Mailbox Completion\n");
 +
 +		return -EBUSY;
 +	}
 +	return 0;
 +}
 +
 +/*
 + * Insert the mailbox address into the doorbell in two steps
 + * Polls on the mbox doorbell till a command completion (or a timeout) occurs
 + */
 +static int be_mbox_notify_wait(struct beiscsi_hba *phba)
 +{
 +	int status;
 +	u32 val = 0;
 +	void __iomem *db = phba->ctrl.db + MPU_MAILBOX_DB_OFFSET;
 +	struct be_dma_mem *mbox_mem = &phba->ctrl.mbox_mem;
 +	struct be_mcc_mailbox *mbox = mbox_mem->va;
 +	struct be_mcc_compl *compl = &mbox->compl;
 +	struct be_ctrl_info *ctrl = &phba->ctrl;
 +
 +	status = be_mbox_db_ready_wait(ctrl);
 +	if (status)
 +		return status;
 +
 +	val |= MPU_MAILBOX_DB_HI_MASK;
 +	/* at bits 2 - 31 place mbox dma addr msb bits 34 - 63 */
 +	val |= (upper_32_bits(mbox_mem->dma) >> 2) << 2;
 +	iowrite32(val, db);
 +
 +	/* wait for ready to be set */
 +	status = be_mbox_db_ready_wait(ctrl);
 +	if (status != 0)
 +		return status;
 +
 +	val = 0;
 +	/* at bits 2 - 31 place mbox dma addr lsb bits 4 - 33 */
 +	val |= (u32)(mbox_mem->dma >> 4) << 2;
 +	iowrite32(val, db);
 +
 +	status = be_mbox_db_ready_wait(ctrl);
 +	if (status != 0)
 +		return status;
 +
 +	/* A cq entry has been made now */
 +	if (be_mcc_compl_is_new(compl)) {
 +		status = be_mcc_compl_process(ctrl, &mbox->compl);
 +		be_mcc_compl_use(compl);
 +		if (status)
 +			return status;
 +	} else {
 +		beiscsi_log(phba, KERN_ERR,
 +			    BEISCSI_LOG_CONFIG | BEISCSI_LOG_MBOX,
 +			    "BC_%d : invalid mailbox completion\n");
 +
 +		return -EBUSY;
 +	}
 +	return 0;
++=======
+ 	status = beiscsi_process_mbox_compl(ctrl, &mbox->compl);
+ 	return status;
++>>>>>>> a264f5e80d56 (be2iscsi: Remove be_mbox_notify_wait function)
  }
  
  void be_wrb_hdr_prepare(struct be_mcc_wrb *wrb, int payload_len,
* Unmerged path drivers/scsi/be2iscsi/be_cmds.c
