sched/deadline: Fix artificial overrun introduced by yield_task_dl()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Wanpeng Li <wanpeng.li@linux.intel.com>
commit 804968809c321066cca028d4cbd533a420f964bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/80496880.failed

The yield semantic of deadline class is to reduce remaining runtime to
zero, and then update_curr_dl() will stop it. However, comsumed bandwidth
is reduced from the budget of yield task again even if it has already been
set to zero which leads to artificial overrun. This patch fix it by make
sure we don't steal some more time from the task that yielded in update_curr_dl().

	Suggested-by: Juri Lelli <juri.lelli@arm.com>
	Signed-off-by: Wanpeng Li <wanpeng.li@linux.intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Kirill Tkhai <ktkhai@parallels.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1414708776-124078-2-git-send-email-wanpeng.li@linux.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 804968809c321066cca028d4cbd533a420f964bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
* Unmerged path kernel/sched/deadline.c
* Unmerged path kernel/sched/deadline.c
