tty: Check tty->count instead of TTY_CLOSING in tty_reopen()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [tty] Check tty->count instead of TTY_CLOSING in tty_reopen() ("Herton R. Krzesinski") [1327403]
Rebuild_FUZZ: 95.65%
commit-author Peter Hurley <peter@hurleysoftware.com>
commit 216030ec55e08646be629ee32725c0189ad74c9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/216030ec.failed

Although perhaps not obvious, the TTY_CLOSING bit is set when the
tty count has been decremented to 0 (which occurs while holding
tty_lock). The only other case when tty count is 0 during a re-open
is when a legacy BSD pty master has been opened in parallel but
after the pty slave, which is unsupported and returns an error.

Thus !tty->count contains the complete set of degenerate conditions
under which a tty open fails.

	Reviewed-by: Alan Cox <alan@linux.intel.com>
	Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 216030ec55e08646be629ee32725c0189ad74c9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/tty_io.c
diff --cc drivers/tty/tty_io.c
index e7ad0015f190,0eaf632ad39e..000000000000
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@@ -1389,8 -1452,7 +1389,12 @@@ static int tty_reopen(struct tty_struc
  {
  	struct tty_driver *driver = tty->driver;
  
++<<<<<<< HEAD
 +	if (test_bit(TTY_CLOSING, &tty->flags) ||
 +			test_bit(TTY_HUPPING, &tty->flags))
++=======
+ 	if (!tty->count)
++>>>>>>> 216030ec55e0 (tty: Check tty->count instead of TTY_CLOSING in tty_reopen())
  		return -EIO;
  
  	if (driver->type == TTY_DRIVER_TYPE_PTY &&
* Unmerged path drivers/tty/tty_io.c
