sched/deadline: Remove dl_new from struct sched_dl_entity

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Luca Abeni <luca.abeni@unitn.it>
commit 72f9f3fdc928dc3ecd223e801b32d930b662b6ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/72f9f3fd.failed

The dl_new field of struct sched_dl_entity is currently used to
identify new deadline tasks, so that their deadline and runtime
can be properly initialised.

However, these tasks can be easily identified by checking if
their deadline is smaller than the current time when they switch
to SCHED_DEADLINE. So, dl_new can be removed by introducing this
check in switched_to_dl(); this allows to simplify the
SCHED_DEADLINE code.

	Signed-off-by: Luca Abeni <luca.abeni@unitn.it>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Juri Lelli <juri.lelli@arm.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1457350024-7825-2-git-send-email-luca.abeni@unitn.it
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 72f9f3fdc928dc3ecd223e801b32d930b662b6ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sched.h
#	kernel/sched/core.c
#	kernel/sched/deadline.c
diff --cc include/linux/sched.h
index e57aba91f593,838a89a78332..000000000000
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@@ -1104,7 -1304,60 +1104,61 @@@ struct sched_rt_entity 
  #endif
  };
  
 -struct sched_dl_entity {
 -	struct rb_node	rb_node;
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Original scheduling parameters. Copied here from sched_attr
+ 	 * during sched_setattr(), they will remain the same until
+ 	 * the next sched_setattr().
+ 	 */
+ 	u64 dl_runtime;		/* maximum runtime for each instance	*/
+ 	u64 dl_deadline;	/* relative deadline of each instance	*/
+ 	u64 dl_period;		/* separation of two instances (period) */
+ 	u64 dl_bw;		/* dl_runtime / dl_deadline		*/
+ 
+ 	/*
+ 	 * Actual scheduling parameters. Initialized with the values above,
+ 	 * they are continously updated during task execution. Note that
+ 	 * the remaining runtime could be < 0 in case we are in overrun.
+ 	 */
+ 	s64 runtime;		/* remaining runtime for this instance	*/
+ 	u64 deadline;		/* absolute deadline for this instance	*/
+ 	unsigned int flags;	/* specifying the scheduler behaviour	*/
+ 
+ 	/*
+ 	 * Some bool flags:
+ 	 *
+ 	 * @dl_throttled tells if we exhausted the runtime. If so, the
+ 	 * task has to wait for a replenishment to be performed at the
+ 	 * next firing of dl_timer.
+ 	 *
+ 	 * @dl_boosted tells if we are boosted due to DI. If so we are
+ 	 * outside bandwidth enforcement mechanism (but only until we
+ 	 * exit the critical section);
+ 	 *
+ 	 * @dl_yielded tells if task gave up the cpu before consuming
+ 	 * all its available runtime during the last job.
+ 	 */
+ 	int dl_throttled, dl_boosted, dl_yielded;
+ 
+ 	/*
+ 	 * Bandwidth enforcement timer. Each -deadline task has its
+ 	 * own bandwidth to be enforced, thus we need one timer per task.
+ 	 */
+ 	struct hrtimer dl_timer;
+ };
+ 
+ union rcu_special {
+ 	struct {
+ 		u8 blocked;
+ 		u8 need_qs;
+ 		u8 exp_need_qs;
+ 		u8 pad;	/* Otherwise the compiler can store garbage here. */
+ 	} b; /* Bits. */
+ 	u32 s; /* Set of bits. */
+ };
++>>>>>>> 72f9f3fdc928 (sched/deadline: Remove dl_new from struct sched_dl_entity)
  struct rcu_node;
  
  enum perf_event_task_context {
diff --cc kernel/sched/core.c
index 04c5c65570ca,249e37dc02c8..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -1797,6 -2038,23 +1797,26 @@@ int wake_up_state(struct task_struct *p
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * This function clears the sched_dl_entity static params.
+  */
+ void __dl_clear_params(struct task_struct *p)
+ {
+ 	struct sched_dl_entity *dl_se = &p->dl;
+ 
+ 	dl_se->dl_runtime = 0;
+ 	dl_se->dl_deadline = 0;
+ 	dl_se->dl_period = 0;
+ 	dl_se->flags = 0;
+ 	dl_se->dl_bw = 0;
+ 
+ 	dl_se->dl_throttled = 0;
+ 	dl_se->dl_yielded = 0;
+ }
+ 
+ /*
++>>>>>>> 72f9f3fdc928 (sched/deadline: Remove dl_new from struct sched_dl_entity)
   * Perform scheduler related setup for a newly forked process p.
   * p is forked by current.
   *
* Unmerged path kernel/sched/deadline.c
* Unmerged path include/linux/sched.h
* Unmerged path kernel/sched/core.c
* Unmerged path kernel/sched/deadline.c
