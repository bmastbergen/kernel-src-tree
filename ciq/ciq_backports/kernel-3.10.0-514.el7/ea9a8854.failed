PCI: Set SR-IOV NumVFs to zero after enumeration

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [pci] Set SR-IOV NumVFs to zero after enumeration (Myron Stowe) [1332667]
Rebuild_FUZZ: 94.51%
commit-author Alexander Duyck <aduyck@mirantis.com>
commit ea9a8854161d9580cfabe011c0ae296ecc0e1d4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ea9a8854.failed

The enumeration path should leave NumVFs set to zero.  But after
4449f079722c ("PCI: Calculate maximum number of buses required for VFs"),
we call virtfn_max_buses() in the enumeration path, which changes NumVFs.
This NumVFs change is visible via lspci and sysfs until a driver enables
SR-IOV.

Iterate from TotalVFs down to zero so NumVFs is zero when we're finished
computing the maximum number of buses.  Validate offset and stride in
the loop, so we can test it at every possible NumVFs setting.  Rename
virtfn_max_buses() to compute_max_vf_buses() to hint that it does have a
side effect of updating iov->max_VF_buses.

[bhelgaas: changelog, rename, allow numVF==1 && stride==0, rework loop,
reverse sense of error path]
Fixes: 4449f079722c ("PCI: Calculate maximum number of buses required for VFs")
Based-on-patch-by: Ethan Zhao <ethan.zhao@oracle.com>
	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit ea9a8854161d9580cfabe011c0ae296ecc0e1d4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/iov.c
diff --cc drivers/pci/iov.c
index b5b2cdc08512,1b1acc27141c..000000000000
--- a/drivers/pci/iov.c
+++ b/drivers/pci/iov.c
@@@ -50,6 -50,35 +50,38 @@@ static inline void pci_iov_set_numvfs(s
  	pci_read_config_word(dev, iov->pos + PCI_SRIOV_VF_STRIDE, &iov->stride);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * The PF consumes one bus number.  NumVFs, First VF Offset, and VF Stride
+  * determine how many additional bus numbers will be consumed by VFs.
+  *
+  * Iterate over all valid NumVFs, validate offset and stride, and calculate
+  * the maximum number of bus numbers that could ever be required.
+  */
+ static int compute_max_vf_buses(struct pci_dev *dev)
+ {
+ 	struct pci_sriov *iov = dev->sriov;
+ 	int nr_virtfn, busnr, rc = 0;
+ 
+ 	for (nr_virtfn = iov->total_VFs; nr_virtfn; nr_virtfn--) {
+ 		pci_iov_set_numvfs(dev, nr_virtfn);
+ 		if (!iov->offset || (nr_virtfn > 1 && !iov->stride)) {
+ 			rc = -EIO;
+ 			goto out;
+ 		}
+ 
+ 		busnr = pci_iov_virtfn_bus(dev, nr_virtfn - 1);
+ 		if (busnr > iov->max_VF_buses)
+ 			iov->max_VF_buses = busnr;
+ 	}
+ 
+ out:
+ 	pci_iov_set_numvfs(dev, 0);
+ 	return rc;
+ }
+ 
++>>>>>>> ea9a8854161d (PCI: Set SR-IOV NumVFs to zero after enumeration)
  static struct pci_bus *virtfn_add_bus(struct pci_bus *bus, int busnr)
  {
  	struct pci_bus *child;
@@@ -390,12 -415,11 +422,7 @@@ static int sriov_init(struct pci_dev *d
  
  found:
  	pci_write_config_word(dev, pos + PCI_SRIOV_CTRL, ctrl);
- 	pci_write_config_word(dev, pos + PCI_SRIOV_NUM_VF, 0);
- 	pci_read_config_word(dev, pos + PCI_SRIOV_VF_OFFSET, &offset);
- 	pci_read_config_word(dev, pos + PCI_SRIOV_VF_STRIDE, &stride);
- 	if (!offset || (total > 1 && !stride))
- 		return -EIO;
  
 -	pci_read_config_word(dev, pos + PCI_SRIOV_TOTAL_VF, &total);
 -	if (!total)
 -		return 0;
 -
  	pci_read_config_dword(dev, pos + PCI_SRIOV_SUP_PGSIZE, &pgsz);
  	i = PAGE_SHIFT > 12 ? PAGE_SHIFT - 12 : 0;
  	pgsz &= ~((1 << i) - 1);
@@@ -450,6 -472,9 +475,12 @@@
  
  	dev->sriov = iov;
  	dev->is_physfn = 1;
++<<<<<<< HEAD
++=======
+ 	rc = compute_max_vf_buses(dev);
+ 	if (rc)
+ 		goto fail_max_buses;
++>>>>>>> ea9a8854161d (PCI: Set SR-IOV NumVFs to zero after enumeration)
  
  	return 0;
  
* Unmerged path drivers/pci/iov.c
