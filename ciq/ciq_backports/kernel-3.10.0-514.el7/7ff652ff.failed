ALSA: hda - Enable i915 ELD notifier for Intel IronLake and Baytrail

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit 7ff652ffc06afc7f81839fb1780c57470ac09db6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7ff652ff.failed

Since we have the fixed pin-port mapping for Intel IronLake (IbexPeak)
and Baytrail (ValleyView) platforms in the code side, now it's time to
add the support in the codec driver side.  This patch simply enables
the i915 ELD notifier for these in addition with the fix of the
mapping from the port to NID in the callback.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 7ff652ffc06afc7f81839fb1780c57470ac09db6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_hdmi.c
diff --cc sound/pci/hda/patch_hdmi.c
index 811716fbd8d3,4833c7bdd1e8..000000000000
--- a/sound/pci/hda/patch_hdmi.c
+++ b/sound/pci/hda/patch_hdmi.c
@@@ -2214,10 -2271,10 +2214,10 @@@ static void haswell_set_power_state(str
  	snd_hda_codec_set_power_to_all(codec, fg, power_state);
  }
  
 -static void intel_pin_eld_notify(void *audio_ptr, int port)
 +static void intel_pin_eld_notify(void *audio_ptr, int port, int port_mst_index)
  {
  	struct hda_codec *codec = audio_ptr;
- 	int pin_nid = port + 0x04;
+ 	int pin_nid;
  
  	/* we assume only from port-B to port-D */
  	if (port < 1 || port > 3)
@@@ -2236,93 -2303,159 +2247,150 @@@
  	check_presence_and_report(codec, pin_nid);
  }
  
 -/* register i915 component pin_eld_notify callback */
 -static void register_i915_notifier(struct hda_codec *codec)
 -{
 -	struct hdmi_spec *spec = codec->spec;
 -
 -	spec->use_acomp_notifier = true;
 -	spec->i915_audio_ops.audio_ptr = codec;
 -	/* intel_audio_codec_enable() or intel_audio_codec_disable()
 -	 * will call pin_eld_notify with using audio_ptr pointer
 -	 * We need make sure audio_ptr is really setup
 -	 */
 -	wmb();
 -	spec->i915_audio_ops.pin_eld_notify = intel_pin_eld_notify;
 -	snd_hdac_i915_register_notifier(&spec->i915_audio_ops);
 -}
 -
 -/* setup_stream ops override for HSW+ */
 -static int i915_hsw_setup_stream(struct hda_codec *codec, hda_nid_t cvt_nid,
 -				 hda_nid_t pin_nid, u32 stream_tag, int format)
 -{
 -	haswell_verify_D0(codec, cvt_nid, pin_nid);
 -	return hdmi_setup_stream(codec, cvt_nid, pin_nid, stream_tag, format);
 -}
 -
 -/* pin_cvt_fixup ops override for HSW+ and VLV+ */
 -static void i915_pin_cvt_fixup(struct hda_codec *codec,
 -			       struct hdmi_spec_per_pin *per_pin,
 -			       hda_nid_t cvt_nid)
 -{
 -	if (per_pin) {
 -		intel_verify_pin_cvt_connect(codec, per_pin);
 -		intel_not_share_assigned_cvt(codec, per_pin->pin_nid,
 -					     per_pin->mux_idx);
 -	} else {
 -		intel_not_share_assigned_cvt_nid(codec, 0, cvt_nid);
 -	}
 -}
 -
 -/* Intel Haswell and onwards; audio component with eld notifier */
 -static int patch_i915_hsw_hdmi(struct hda_codec *codec)
 +static int patch_generic_hdmi(struct hda_codec *codec)
  {
  	struct hdmi_spec *spec;
 -	int err;
  
 -	/* HSW+ requires i915 binding */
 -	if (!codec->bus->core.audio_component) {
 -		codec_info(codec, "No i915 binding for Intel HDMI/DP codec\n");
 -		return -ENODEV;
 -	}
 -
 -	err = alloc_generic_hdmi(codec);
 -	if (err < 0)
 -		return err;
 -	spec = codec->spec;
 +	spec = kzalloc(sizeof(*spec), GFP_KERNEL);
 +	if (spec == NULL)
 +		return -ENOMEM;
  
 -	intel_haswell_enable_all_pins(codec, true);
 -	intel_haswell_fixup_enable_dp12(codec);
 +	spec->ops = generic_standard_hdmi_ops;
 +	mutex_init(&spec->pcm_lock);
 +	snd_hdac_register_chmap_ops(&codec->core, &spec->chmap);
  
 -	/* For Haswell/Broadwell, the controller is also in the power well and
 -	 * can cover the codec power request, and so need not set this flag.
 -	 */
 -	if (!is_haswell(codec) && !is_broadwell(codec))
 -		codec->core.link_power_control = 1;
 +	spec->chmap.ops.get_chmap = hdmi_get_chmap;
 +	spec->chmap.ops.set_chmap = hdmi_set_chmap;
 +	spec->chmap.ops.is_pcm_attached = is_hdmi_pcm_attached;
  
 -	codec->patch_ops.set_power_state = haswell_set_power_state;
 -	codec->dp_mst = true;
 -	codec->depop_delay = 0;
 -	codec->auto_runtime_pm = 1;
 +	codec->spec = spec;
 +	hdmi_array_init(spec, 4);
  
 -	spec->ops.setup_stream = i915_hsw_setup_stream;
 -	spec->ops.pin_cvt_fixup = i915_pin_cvt_fixup;
 +#ifdef CONFIG_SND_HDA_I915
 +	/* Try to bind with i915 for Intel HSW+ codecs (if not done yet) */
 +	if ((codec->core.vendor_id >> 16) == 0x8086 &&
 +	    is_haswell_plus(codec)) {
 +#if 0
 +		/* on-demand binding leads to an unbalanced refcount when
 +		 * both i915 and hda drivers are probed concurrently;
 +		 * disabled temporarily for now
 +		 */
 +		if (!codec->bus->core.audio_component)
 +			if (!snd_hdac_i915_init(&codec->bus->core))
 +				spec->i915_bound = true;
 +#endif
 +		/* use i915 audio component notifier for hotplug */
 +		if (codec->bus->core.audio_component)
 +			spec->use_acomp_notifier = true;
 +	}
 +#endif
  
 -	err = hdmi_parse_codec(codec);
 -	if (err < 0) {
 -		generic_spec_free(codec);
 -		return err;
 +	if (is_haswell_plus(codec)) {
 +		intel_haswell_enable_all_pins(codec, true);
 +		intel_haswell_fixup_enable_dp12(codec);
  	}
  
++<<<<<<< HEAD
++=======
+ 	generic_hdmi_init_per_pins(codec);
+ 	register_i915_notifier(codec);
+ 	return 0;
+ }
+ 
+ /* Intel Baytrail and Braswell; with eld notifier */
+ static int patch_i915_byt_hdmi(struct hda_codec *codec)
+ {
+ 	struct hdmi_spec *spec;
+ 	int err;
+ 
+ 	/* requires i915 binding */
+ 	if (!codec->bus->core.audio_component) {
+ 		codec_info(codec, "No i915 binding for Intel HDMI/DP codec\n");
+ 		return -ENODEV;
+ 	}
+ 
+ 	err = alloc_generic_hdmi(codec);
+ 	if (err < 0)
+ 		return err;
+ 	spec = codec->spec;
+ 
++>>>>>>> 7ff652ffc06a (ALSA: hda - Enable i915 ELD notifier for Intel IronLake and Baytrail)
  	/* For Valleyview/Cherryview, only the display codec is in the display
  	 * power well and can use link_power ops to request/release the power.
 +	 * For Haswell/Broadwell, the controller is also in the power well and
 +	 * can cover the codec power request, and so need not set this flag.
 +	 * For previous platforms, there is no such power well feature.
  	 */
 -	codec->core.link_power_control = 1;
 -
 -	codec->depop_delay = 0;
 -	codec->auto_runtime_pm = 1;
 +	if (is_valleyview_plus(codec) || is_skylake(codec) ||
 +			is_broxton(codec))
 +		codec->core.link_power_control = 1;
  
 -	spec->ops.pin_cvt_fixup = i915_pin_cvt_fixup;
 +	if (codec_has_acomp(codec)) {
 +		codec->depop_delay = 0;
 +		spec->i915_audio_ops.audio_ptr = codec;
 +		/* intel_audio_codec_enable() or intel_audio_codec_disable()
 +		 * will call pin_eld_notify with using audio_ptr pointer
 +		 * We need make sure audio_ptr is really setup
 +		 */
 +		wmb();
 +		spec->i915_audio_ops.pin_eld_notify = intel_pin_eld_notify;
 +		snd_hdac_i915_register_notifier(&spec->i915_audio_ops);
 +	}
  
 -	err = hdmi_parse_codec(codec);
 -	if (err < 0) {
 -		generic_spec_free(codec);
 -		return err;
++<<<<<<< HEAD
 +	if (hdmi_parse_codec(codec) < 0) {
 +		if (spec->i915_bound)
 +			snd_hdac_i915_exit(&codec->bus->core);
 +		codec->spec = NULL;
 +		kfree(spec);
 +		return -EINVAL;
 +	}
 +	codec->patch_ops = generic_hdmi_patch_ops;
 +	if (is_haswell_plus(codec)) {
 +		codec->patch_ops.set_power_state = haswell_set_power_state;
 +		codec->dp_mst = true;
  	}
  
 +	/* Enable runtime pm for HDMI audio codec of HSW/BDW/SKL/BYT/BSW */
 +	if (is_haswell_plus(codec) || is_valleyview_plus(codec))
 +		codec->auto_runtime_pm = 1;
++=======
+ 	generic_hdmi_init_per_pins(codec);
+ 	register_i915_notifier(codec);
+ 	return 0;
+ }
+ 
+ /* Intel IronLake, SandyBridge and IvyBridge; with eld notifier */
+ static int patch_i915_cpt_hdmi(struct hda_codec *codec)
+ {
+ 	struct hdmi_spec *spec;
+ 	int err;
+ 
+ 	/* no i915 component should have been bound before this */
+ 	if (WARN_ON(codec->bus->core.audio_component))
+ 		return -EBUSY;
+ 
+ 	err = alloc_generic_hdmi(codec);
+ 	if (err < 0)
+ 		return err;
+ 	spec = codec->spec;
+ 
+ 	/* Try to bind with i915 now */
+ 	err = snd_hdac_i915_init(&codec->bus->core);
+ 	if (err < 0)
+ 		goto error;
+ 	spec->i915_bound = true;
+ 
+ 	err = hdmi_parse_codec(codec);
+ 	if (err < 0)
+ 		goto error;
++>>>>>>> 7ff652ffc06a (ALSA: hda - Enable i915 ELD notifier for Intel IronLake and Baytrail)
  
  	generic_hdmi_init_per_pins(codec);
 -	register_i915_notifier(codec);
 -	return 0;
  
 - error:
 -	generic_spec_free(codec);
 -	return err;
 +
 +	WARN_ON(spec->dyn_pcm_assign && !codec_has_acomp(codec));
 +	return 0;
  }
  
  /*
@@@ -3497,17 -3630,17 +3565,28 @@@ HDA_CODEC_ENTRY(0x80860054, "IbexPeak H
  HDA_CODEC_ENTRY(0x80862801, "Bearlake HDMI",	patch_generic_hdmi),
  HDA_CODEC_ENTRY(0x80862802, "Cantiga HDMI",	patch_generic_hdmi),
  HDA_CODEC_ENTRY(0x80862803, "Eaglelake HDMI",	patch_generic_hdmi),
++<<<<<<< HEAD
 +HDA_CODEC_ENTRY(0x80862804, "IbexPeak HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x80862805, "CougarPoint HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x80862806, "PantherPoint HDMI", patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x80862807, "Haswell HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x80862808, "Broadwell HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x80862809, "Skylake HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x8086280a, "Broxton HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x8086280b, "Kabylake HDMI",	patch_generic_hdmi),
++=======
+ HDA_CODEC_ENTRY(0x80862804, "IbexPeak HDMI",	patch_i915_cpt_hdmi),
+ HDA_CODEC_ENTRY(0x80862805, "CougarPoint HDMI",	patch_i915_cpt_hdmi),
+ HDA_CODEC_ENTRY(0x80862806, "PantherPoint HDMI", patch_i915_cpt_hdmi),
+ HDA_CODEC_ENTRY(0x80862807, "Haswell HDMI",	patch_i915_hsw_hdmi),
+ HDA_CODEC_ENTRY(0x80862808, "Broadwell HDMI",	patch_i915_hsw_hdmi),
+ HDA_CODEC_ENTRY(0x80862809, "Skylake HDMI",	patch_i915_hsw_hdmi),
+ HDA_CODEC_ENTRY(0x8086280a, "Broxton HDMI",	patch_i915_hsw_hdmi),
+ HDA_CODEC_ENTRY(0x8086280b, "Kabylake HDMI",	patch_i915_hsw_hdmi),
++>>>>>>> 7ff652ffc06a (ALSA: hda - Enable i915 ELD notifier for Intel IronLake and Baytrail)
  HDA_CODEC_ENTRY(0x80862880, "CedarTrail HDMI",	patch_generic_hdmi),
 -HDA_CODEC_ENTRY(0x80862882, "Valleyview2 HDMI",	patch_i915_byt_hdmi),
 -HDA_CODEC_ENTRY(0x80862883, "Braswell HDMI",	patch_i915_byt_hdmi),
 +HDA_CODEC_ENTRY(0x80862882, "Valleyview2 HDMI",	patch_generic_hdmi),
 +HDA_CODEC_ENTRY(0x80862883, "Braswell HDMI",	patch_generic_hdmi),
  HDA_CODEC_ENTRY(0x808629fb, "Crestline HDMI",	patch_generic_hdmi),
  /* special ID for generic HDMI */
  HDA_CODEC_ENTRY(HDA_CODEC_ID_GENERIC_HDMI, "Generic HDMI", patch_generic_hdmi),
* Unmerged path sound/pci/hda/patch_hdmi.c
