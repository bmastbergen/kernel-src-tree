perf/x86/intel/rapl: Refactor the code some more

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 7162b8fea63061b6231bc5e8a0fed55167e71b4c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7162b8fe.failed

Split out code from init into seperate functions. Tidy up the code and get rid
of pointless comments. I wish there would be comments for code which is not
obvious....

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Andi Kleen <andi.kleen@intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Harish Chegondi <harish.chegondi@intel.com>
	Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Cc: linux-kernel@vger.kernel.org
Link: http://lkml.kernel.org/r/20160222221012.588544679@linutronix.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 7162b8fea63061b6231bc5e8a0fed55167e71b4c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_rapl.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_rapl.c
index c019c57572a7,ba5043b12c3e..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_rapl.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_rapl.c
@@@ -107,13 -110,7 +107,17 @@@ static ssize_t __rapl_##_var##_show(str
  static struct kobj_attribute format_attr_##_var =		\
  	__ATTR(_name, 0444, __rapl_##_var##_show, NULL)
  
++<<<<<<< HEAD:arch/x86/kernel/cpu/perf_event_intel_rapl.c
 +#define RAPL_EVENT_DESC(_name, _config)				\
 +{								\
 +	.attr	= __ATTR(_name, 0444, rapl_event_show, NULL),	\
 +	.config	= _config,					\
 +}
 +
 +#define RAPL_CNTR_WIDTH 32 /* 32-bit rapl counters */
++=======
+ #define RAPL_CNTR_WIDTH 32
++>>>>>>> 7162b8fea630 (perf/x86/intel/rapl: Refactor the code some more):arch/x86/events/intel/rapl.c
  
  #define RAPL_EVENT_ATTR_STR(_name, v, str)					\
  static struct perf_pmu_events_attr event_attr_##v = {				\
@@@ -212,14 -201,9 +217,9 @@@ static void rapl_start_hrtimer(struct r
  		     HRTIMER_MODE_REL_PINNED);
  }
  
- static void rapl_stop_hrtimer(struct rapl_pmu *pmu)
- {
- 	hrtimer_cancel(&pmu->hrtimer);
- }
- 
  static enum hrtimer_restart rapl_hrtimer_handle(struct hrtimer *hrtimer)
  {
 -	struct rapl_pmu *pmu = __this_cpu_read(rapl_pmu);
 +	struct rapl_pmu *pmu = __get_cpu_var(rapl_pmu);
  	struct perf_event *event;
  	unsigned long flags;
  
@@@ -696,25 -662,72 +695,67 @@@ static int rapl_check_hw_unit(void
  	return 0;
  }
  
++<<<<<<< HEAD:arch/x86/kernel/cpu/perf_event_intel_rapl.c
 +static const struct x86_cpu_id rapl_cpu_match[] = {
++=======
+ static void __init rapl_advertise(void)
+ {
+ 	int i;
+ 
+ 	pr_info("API unit is 2^-32 Joules, %d fixed counters, %llu ms ovfl timer\n",
+ 		hweight32(rapl_cntr_mask), rapl_timer_ms);
+ 
+ 	for (i = 0; i < NR_RAPL_DOMAINS; i++) {
+ 		if (rapl_cntr_mask & (1 << i)) {
+ 			pr_info("hw unit of domain %s 2^-%d Joules\n",
+ 				rapl_domain_names[i], rapl_hw_unit[i]);
+ 		}
+ 	}
+ }
+ 
+ static int __init rapl_prepare_cpus(void)
+ {
+ 	unsigned int cpu;
+ 	int ret;
+ 
+ 	for_each_online_cpu(cpu) {
+ 		ret = rapl_cpu_prepare(cpu);
+ 		if (ret)
+ 			return ret;
+ 		rapl_cpu_init(cpu);
+ 	}
+ 	return 0;
+ }
+ 
+ static void __init cleanup_rapl_pmus(void)
+ {
+ 	int cpu;
+ 
+ 	for_each_online_cpu(cpu)
+ 		kfree(per_cpu(rapl_pmu, cpu));
+ }
+ 
+ static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
++>>>>>>> 7162b8fea630 (perf/x86/intel/rapl: Refactor the code some more):arch/x86/events/intel/rapl.c
  	[0] = { .vendor = X86_VENDOR_INTEL, .family = 6 },
  	[1] = {},
  };
  
  static int __init rapl_pmu_init(void)
  {
++<<<<<<< HEAD:arch/x86/kernel/cpu/perf_event_intel_rapl.c
 +	struct rapl_pmu *pmu;
 +	int cpu, ret;
 +	struct x86_pmu_quirk *quirk;
 +	int i;
++=======
+ 	void (*quirk)(void) = NULL;
+ 	int ret;
++>>>>>>> 7162b8fea630 (perf/x86/intel/rapl: Refactor the code some more):arch/x86/events/intel/rapl.c
  
- 	/*
- 	 * check for Intel processor family 6
- 	 */
  	if (!x86_match_cpu(rapl_cpu_match))
 -		return -ENODEV;
 +		return 0;
  
- 	/* check supported CPU */
  	switch (boot_cpu_data.x86_model) {
  	case 42: /* Sandy Bridge */
  	case 58: /* Ivy Bridge */
@@@ -743,51 -756,32 +784,52 @@@
  		rapl_pmu_events_group.attrs = rapl_events_knl_attr;
  		break;
  	default:
++<<<<<<< HEAD:arch/x86/kernel/cpu/perf_event_intel_rapl.c
 +		/* unsupported */
 +		return 0;
++=======
+ 		return -ENODEV;
++>>>>>>> 7162b8fea630 (perf/x86/intel/rapl: Refactor the code some more):arch/x86/events/intel/rapl.c
  	}
 -
 -	ret = rapl_check_hw_unit(quirk);
 +	ret = rapl_check_hw_unit();
  	if (ret)
  		return ret;
  
 +	/* run cpu model quirks */
 +	for (quirk = rapl_quirks; quirk; quirk = quirk->next)
 +		quirk->func();
  	cpu_notifier_register_begin();
  
- 	for_each_online_cpu(cpu) {
- 		ret = rapl_cpu_prepare(cpu);
- 		if (ret)
- 			goto out;
- 		rapl_cpu_init(cpu);
- 	}
+ 	ret = rapl_prepare_cpus();
+ 	if (ret)
+ 		goto out;
  
 +	__perf_cpu_notifier(rapl_cpu_notifier);
 +
  	ret = perf_pmu_register(&rapl_pmu_class, "power", -1);
 -	if (ret)
 -		goto out;
 +	if (WARN_ON(ret)) {
 +		pr_info("RAPL PMU detected, registration failed (%d), RAPL PMU disabled\n", ret);
 +		cpu_notifier_register_done();
 +		return -1;
 +	}
  
 -	__perf_cpu_notifier(rapl_cpu_notifier);
 -	cpu_notifier_register_done();
 -	rapl_advertise();
 -	return 0;
 +	pmu = __get_cpu_var(rapl_pmu);
  
 +	pr_info("RAPL PMU detected,"
 +		" API unit is 2^-32 Joules,"
 +		" %d fixed counters"
 +		" %llu ms ovfl timer\n",
 +		hweight32(rapl_cntr_mask),
 +		ktime_to_ms(pmu->timer_interval));
 +	for (i = 0; i < NR_RAPL_DOMAINS; i++) {
 +		if (rapl_cntr_mask & (1 << i)) {
 +			pr_info("hw unit of domain %s 2^-%d Joules\n",
 +				rapl_domain_names[i], rapl_hw_unit[i]);
 +		}
 +	}
  out:
 -	pr_warn("Initialization failed (%d), disabled\n", ret);
 -	cleanup_rapl_pmus();
  	cpu_notifier_register_done();
 -	return ret;
 +
 +	return 0;
  }
  device_initcall(rapl_pmu_init);
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_rapl.c
