powerpc/pci: add dma_set_mask to pci_controller_ops

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [powerpc] pci: add dma_set_mask to pci_controller_ops (Gustavo Duarte) [1275657]
Rebuild_FUZZ: 91.49%
commit-author Daniel Axtens <dja@axtens.net>
commit 3405c2570fd68fc5ccc703c8de9c23abf5e95819
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3405c257.failed

Some systems only need to deal with DMA masks for PCI devices.
For these systems, we can avoid the need for a platform hook and
instead use a pci controller based hook.

	Signed-off-by: Daniel Axtens <dja@axtens.net>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 3405c2570fd68fc5ccc703c8de9c23abf5e95819)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/pci-bridge.h
diff --cc arch/powerpc/include/asm/pci-bridge.h
index 157251ae4847,6d17bb8498bf..000000000000
--- a/arch/powerpc/include/asm/pci-bridge.h
+++ b/arch/powerpc/include/asm/pci-bridge.h
@@@ -35,6 -30,14 +35,17 @@@ struct pci_controller_ops 
  	/* Called during PCI resource reassignment */
  	resource_size_t (*window_alignment)(struct pci_bus *, unsigned long type);
  	void		(*reset_secondary_bus)(struct pci_dev *dev);
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_PCI_MSI
+ 	int		(*setup_msi_irqs)(struct pci_dev *dev,
+ 					  int nvec, int type);
+ 	void		(*teardown_msi_irqs)(struct pci_dev *dev);
+ #endif
+ 
+ 	int             (*dma_set_mask)(struct pci_dev *dev, u64 dma_mask);
++>>>>>>> 3405c2570fd6 (powerpc/pci: add dma_set_mask to pci_controller_ops)
  };
  
  /*
* Unmerged path arch/powerpc/include/asm/pci-bridge.h
diff --git a/arch/powerpc/kernel/dma.c b/arch/powerpc/kernel/dma.c
index c9175243454e..326685910e30 100644
--- a/arch/powerpc/kernel/dma.c
+++ b/arch/powerpc/kernel/dma.c
@@ -282,6 +282,14 @@ int dma_set_mask(struct device *dev, u64 dma_mask)
 {
 	if (ppc_md.dma_set_mask)
 		return ppc_md.dma_set_mask(dev, dma_mask);
+
+	if (dev_is_pci(dev)) {
+		struct pci_dev *pdev = to_pci_dev(dev);
+		struct pci_controller *phb = pci_bus_to_host(pdev->bus);
+		if (phb->controller_ops.dma_set_mask)
+			return phb->controller_ops.dma_set_mask(pdev, dma_mask);
+	}
+
 	return __dma_set_mask(dev, dma_mask);
 }
 EXPORT_SYMBOL(dma_set_mask);
