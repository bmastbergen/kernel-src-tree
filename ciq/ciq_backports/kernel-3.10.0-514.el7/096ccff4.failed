hpsa: move scsi_add_device and scsi_remove_device calls to new function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kevin Barnett <kevin.barnett@pmcs.com>
commit 096ccff47e152aef8e9ef318c02781daedc433b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/096ccff4.failed

preparation for adding the sas transport class

	Reviewed-by: Scott Teel <scott.teel@pmcs.com>
	Reviewed-by: Justin Lindley <justin.lindley@pmcs.com>
	Reviewed-by: Kevin Barnett <kevin.barnett@pmcs.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
	Signed-off-by: Don Brace <don.brace@pmcs.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 096ccff47e152aef8e9ef318c02781daedc433b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hpsa.c
diff --cc drivers/scsi/hpsa.c
index ef01b3ac8b79,0af4c670c7cd..000000000000
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@@ -1559,7 -1653,44 +1559,48 @@@ static void hpsa_update_log_drive_phys_
  	}
  }
  
++<<<<<<< HEAD
 +static void adjust_hpsa_scsi_table(struct ctlr_info *h, int hostno,
++=======
+ static int hpsa_add_device(struct ctlr_info *h, struct hpsa_scsi_dev_t *device)
+ {
+ 	int rc = 0;
+ 
+ 	if (!h->scsi_host)
+ 		return 1;
+ 
+ 	rc = scsi_add_device(h->scsi_host, device->bus,
+ 					device->target, device->lun);
+ 	return rc;
+ }
+ 
+ static void hpsa_remove_device(struct ctlr_info *h,
+ 			struct hpsa_scsi_dev_t *device)
+ {
+ 	struct scsi_device *sdev = NULL;
+ 
+ 	if (!h->scsi_host)
+ 		return;
+ 
+ 	sdev = scsi_device_lookup(h->scsi_host, device->bus,
+ 						device->target, device->lun);
+ 
+ 	if (sdev) {
+ 		scsi_remove_device(sdev);
+ 		scsi_device_put(sdev);
+ 	} else {
+ 		/*
+ 		 * We don't expect to get here.  Future commands
+ 		 * to this device will get a selection timeout as
+ 		 * if the device were gone.
+ 		 */
+ 		hpsa_show_dev_msg(KERN_WARNING, h, device,
+ 					"didn't find device for removal.");
+ 	}
+ }
+ 
+ static void adjust_hpsa_scsi_table(struct ctlr_info *h,
++>>>>>>> 096ccff47e15 (hpsa: move scsi_add_device and scsi_remove_device calls to new function)
  	struct hpsa_scsi_dev_t *sd[], int nsds)
  {
  	/* sd contains scsi3 addresses and devtypes, and inquiry
@@@ -1688,49 -1816,32 +1728,52 @@@
  	 * (or if there are no changes) scsi_scan_host will do it later the
  	 * first time through.
  	 */
 -	if (!changes)
 +	if (hostno == -1 || !changes)
  		goto free_and_out;
  
- 	sh = h->scsi_host;
- 	if (sh == NULL) {
- 		dev_warn(&h->pdev->dev, "%s: scsi_host is null\n", __func__);
- 		goto free_and_out;
- 	}
  	/* Notify scsi mid layer of any removed devices */
  	for (i = 0; i < nremoved; i++) {
  		if (removed[i] == NULL)
  			continue;
++<<<<<<< HEAD
 +		if (removed[i]->expose_state & HPSA_SCSI_ADD) {
 +			struct scsi_device *sdev =
 +				scsi_device_lookup(sh, removed[i]->bus,
 +					removed[i]->target, removed[i]->lun);
 +			if (sdev != NULL) {
 +				scsi_remove_device(sdev);
 +				scsi_device_put(sdev);
 +			} else {
 +				/*
 +				 * We don't expect to get here.
 +				 * future cmds to this device will get selection
 +				 * timeout as if the device was gone.
 +				 */
 +				hpsa_show_dev_msg(KERN_WARNING, h, removed[i],
 +					"didn't find device for removal.");
 +			}
 +		}
++=======
+ 		if (removed[i]->expose_device)
+ 			hpsa_remove_device(h, removed[i]);
++>>>>>>> 096ccff47e15 (hpsa: move scsi_add_device and scsi_remove_device calls to new function)
  		kfree(removed[i]);
  		removed[i] = NULL;
  	}
  
  	/* Notify scsi mid layer of any added devices */
  	for (i = 0; i < nadded; i++) {
+ 		int rc = 0;
+ 
  		if (added[i] == NULL)
  			continue;
 -		if (!(added[i]->expose_device))
 +		if (!(added[i]->expose_state & HPSA_SCSI_ADD))
  			continue;
- 		if (scsi_add_device(sh, added[i]->bus,
- 			added[i]->target, added[i]->lun) == 0)
+ 		rc = hpsa_add_device(h, added[i]);
+ 		if (!rc)
  			continue;
- 		dev_warn(&h->pdev->dev, "addition failed, device not added.");
+ 		dev_warn(&h->pdev->dev,
+ 			"addition failed %d, device not added.", rc);
  		/* now we have to remove it from h->dev,
  		 * since it didn't get added to scsi mid layer
  		 */
* Unmerged path drivers/scsi/hpsa.c
