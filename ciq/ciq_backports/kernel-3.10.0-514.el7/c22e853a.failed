libceph: fix return value check in alloc_msg_with_page_vector()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Wei Yongjun <weiyj.lk@gmail.com>
commit c22e853a2ed19321d00c1eae339ffdc4f5e7757e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c22e853a.failed

In case of error, the function ceph_alloc_page_vector() returns
ERR_PTR() and never returns NULL. The NULL test in the return value
check should be replaced with IS_ERR().

Fixes: 1907920324f1 ('libceph: support for sending notifies')
	Signed-off-by: Wei Yongjun <weiyj.lk@gmail.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit c22e853a2ed19321d00c1eae339ffdc4f5e7757e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/osd_client.c
diff --cc net/ceph/osd_client.c
index b1bd089d52f0,a97e7b506612..000000000000
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@@ -2865,8 -4193,43 +2865,48 @@@ static struct ceph_msg *get_reply(struc
  	m = ceph_msg_get(req->r_reply);
  	dout("get_reply tid %lld %p\n", tid, m);
  
++<<<<<<< HEAD
 +out:
 +	mutex_unlock(&osdc->request_mutex);
++=======
+ out_unlock_session:
+ 	mutex_unlock(&osd->lock);
+ out_unlock_osdc:
+ 	up_read(&osdc->lock);
+ 	return m;
+ }
+ 
+ /*
+  * TODO: switch to a msg-owned pagelist
+  */
+ static struct ceph_msg *alloc_msg_with_page_vector(struct ceph_msg_header *hdr)
+ {
+ 	struct ceph_msg *m;
+ 	int type = le16_to_cpu(hdr->type);
+ 	u32 front_len = le32_to_cpu(hdr->front_len);
+ 	u32 data_len = le32_to_cpu(hdr->data_len);
+ 
+ 	m = ceph_msg_new(type, front_len, GFP_NOIO, false);
+ 	if (!m)
+ 		return NULL;
+ 
+ 	if (data_len) {
+ 		struct page **pages;
+ 		struct ceph_osd_data osd_data;
+ 
+ 		pages = ceph_alloc_page_vector(calc_pages_for(0, data_len),
+ 					       GFP_NOIO);
+ 		if (IS_ERR(pages)) {
+ 			ceph_msg_put(m);
+ 			return NULL;
+ 		}
+ 
+ 		ceph_osd_data_pages_init(&osd_data, pages, data_len, 0, false,
+ 					 false);
+ 		ceph_osdc_msg_data_add(m, &osd_data);
+ 	}
+ 
++>>>>>>> c22e853a2ed1 (libceph: fix return value check in alloc_msg_with_page_vector())
  	return m;
  }
  
* Unmerged path net/ceph/osd_client.c
