tty: Remove wait_event_interruptible_tty()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [tty] Remove wait_event_interruptible_tty() ("Herton R. Krzesinski") [1327403]
Rebuild_FUZZ: 93.67%
commit-author Peter Hurley <peter@hurleysoftware.com>
commit f148d6d7b79adb42a8e7fa95bf6be5b607015f26
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f148d6d7.failed

In-tree users of wait_event_interruptible_tty() have been removed;
remove.

	Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit f148d6d7b79adb42a8e7fa95bf6be5b607015f26)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/tty.h
diff --cc include/linux/tty.h
index 1204111a3f0a,c2889f4331e1..000000000000
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@@ -623,51 -652,9 +623,57 @@@ extern long vt_compat_ioctl(struct tty_
  /* functions for preparation of BKL removal */
  extern void __lockfunc tty_lock(struct tty_struct *tty);
  extern void __lockfunc tty_unlock(struct tty_struct *tty);
++<<<<<<< HEAD
 +extern void __lockfunc tty_lock_pair(struct tty_struct *tty,
 +				struct tty_struct *tty2);
 +extern void __lockfunc tty_unlock_pair(struct tty_struct *tty,
 +				struct tty_struct *tty2);
 +
 +/*
 + * wait_event_interruptible_tty -- wait for a condition with the tty lock held
 + *
 + * The condition we are waiting for might take a long time to
 + * become true, or might depend on another thread taking the
 + * BTM. In either case, we need to drop the BTM to guarantee
 + * forward progress. This is a leftover from the conversion
 + * from the BKL and should eventually get removed as the BTM
 + * falls out of use.
 + *
 + * Do not use in new code.
 + */
 +#define wait_event_interruptible_tty(tty, wq, condition)		\
 +({									\
 +	int __ret = 0;							\
 +	if (!(condition)) {						\
 +		__wait_event_interruptible_tty(tty, wq, condition, __ret);	\
 +	}								\
 +	__ret;								\
 +})
 +
 +#define __wait_event_interruptible_tty(tty, wq, condition, ret)		\
 +do {									\
 +	DEFINE_WAIT(__wait);						\
 +									\
 +	for (;;) {							\
 +		prepare_to_wait(&wq, &__wait, TASK_INTERRUPTIBLE);	\
 +		if (condition)						\
 +			break;						\
 +		if (!signal_pending(current)) {				\
 +			tty_unlock(tty);					\
 +			schedule();					\
 +			tty_lock(tty);					\
 +			continue;					\
 +		}							\
 +		ret = -ERESTARTSYS;					\
 +		break;							\
 +	}								\
 +	finish_wait(&wq, &__wait);					\
 +} while (0)
++=======
+ extern void __lockfunc tty_lock_slave(struct tty_struct *tty);
+ extern void __lockfunc tty_unlock_slave(struct tty_struct *tty);
+ extern void tty_set_lock_subclass(struct tty_struct *tty);
++>>>>>>> f148d6d7b79a (tty: Remove wait_event_interruptible_tty())
  
  #ifdef CONFIG_PROC_FS
  extern void proc_tty_register_driver(struct tty_driver *);
* Unmerged path include/linux/tty.h
