KVM: x86: removing redundant eflags bits definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Nadav Amit <namit@cs.technion.ac.il>
commit 0efb04406de834d820f7ba150a00d1d3194aa8a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0efb0440.failed

The eflags are redefined (using other defines) in emulate.c.
Use the definition from processor-flags.h as some mess already started.
No functional change.

	Signed-off-by: Nadav Amit <namit@cs.technion.ac.il>
Message-Id: <1427635984-8113-2-git-send-email-namit@cs.technion.ac.il>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 0efb04406de834d820f7ba150a00d1d3194aa8a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/emulate.c
diff --cc arch/x86/kvm/emulate.c
index ed9520e66908,e49cabae377d..000000000000
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@@ -241,28 -243,20 +241,34 @@@ struct instr_dual 
  	struct opcode mod3;
  };
  
++<<<<<<< HEAD
 +/* EFLAGS bit definitions. */
 +#define EFLG_ID (1<<21)
 +#define EFLG_VIP (1<<20)
 +#define EFLG_VIF (1<<19)
 +#define EFLG_AC (1<<18)
 +#define EFLG_VM (1<<17)
 +#define EFLG_RF (1<<16)
 +#define EFLG_IOPL (3<<12)
 +#define EFLG_NT (1<<14)
 +#define EFLG_OF (1<<11)
 +#define EFLG_DF (1<<10)
 +#define EFLG_IF (1<<9)
 +#define EFLG_TF (1<<8)
 +#define EFLG_SF (1<<7)
 +#define EFLG_ZF (1<<6)
 +#define EFLG_AF (1<<4)
 +#define EFLG_PF (1<<2)
 +#define EFLG_CF (1<<0)
++=======
+ struct mode_dual {
+ 	struct opcode mode32;
+ 	struct opcode mode64;
+ };
++>>>>>>> 0efb04406de8 (KVM: x86: removing redundant eflags bits definitions)
  
  #define EFLG_RESERVED_ZEROS_MASK 0xffc0802a
- #define EFLG_RESERVED_ONE_MASK 2
  
 -enum x86_transfer_type {
 -	X86_TRANSFER_NONE,
 -	X86_TRANSFER_CALL_JMP,
 -	X86_TRANSFER_RET,
 -	X86_TRANSFER_TASK_SWITCH,
 -};
 -
  static ulong reg_read(struct x86_emulate_ctxt *ctxt, unsigned nr)
  {
  	if (!(ctxt->regs_valid & (1 << nr))) {
@@@ -5132,9 -4912,8 +5145,9 @@@ int x86_emulate_insn(struct x86_emulate
  		if (ctxt->rep_prefix && (ctxt->d & String)) {
  			/* All REP prefixes have the same first termination condition */
  			if (address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) == 0) {
 +				string_registers_quirk(ctxt);
  				ctxt->eip = ctxt->_eip;
- 				ctxt->eflags &= ~EFLG_RF;
+ 				ctxt->eflags &= ~X86_EFLAGS_RF;
  				goto done;
  			}
  		}
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index a9be00d2af59..080261f48497 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -86,8 +86,6 @@ static inline gfn_t gfn_to_index(gfn_t gfn, gfn_t base_gfn, int level)
 #define SELECTOR_TI_MASK (1 << 2)
 #define SELECTOR_RPL_MASK 0x03
 
-#define IOPL_SHIFT 12
-
 #define KVM_PERMILLE_MMU_PAGES 20
 #define KVM_MIN_ALLOC_MMU_PAGES 64
 #define KVM_MMU_HASH_SHIFT 10
* Unmerged path arch/x86/kvm/emulate.c
