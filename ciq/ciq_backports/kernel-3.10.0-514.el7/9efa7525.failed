net/mlx5_core: Introduce access functions to query vport RoCE fields

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Achiad Shochat <achiad@mellanox.com>
commit 9efa75254593d6ca3ae54bac8153f47e1a7cbcda
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9efa7525.failed

Introduce access functions to query NIC vport system_image_guid,
node_guid and qkey_viol_cntr.

	Signed-off-by: Achiad Shochat <achiad@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 9efa75254593d6ca3ae54bac8153f47e1a7cbcda)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mlx5/mlx5_ifc.h
#	include/linux/mlx5/vport.h
diff --cc include/linux/mlx5/mlx5_ifc.h
index 131a2737cfa3,49b34c6466ac..000000000000
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@@ -2182,26 -2141,19 +2182,38 @@@ struct mlx5_ifc_nic_vport_context_bits 
  	u8         reserved_0[0x1f];
  	u8         roce_en[0x1];
  
++<<<<<<< HEAD
 +	u8         arm_change_event[0x1];
 +	u8         reserved_1[0x1a];
 +	u8         event_on_mtu[0x1];
 +	u8         event_on_promisc_change[0x1];
 +	u8         event_on_vlan_change[0x1];
 +	u8         event_on_mc_address_change[0x1];
 +	u8         event_on_uc_address_change[0x1];
++=======
+ 	u8         reserved_1[0x120];
+ 
+ 	u8         system_image_guid[0x40];
+ 	u8         port_guid[0x40];
+ 	u8         node_guid[0x40];
+ 
+ 	u8         reserved_5[0x140];
+ 	u8         qkey_violation_counter[0x10];
+ 	u8         reserved_6[0x430];
++>>>>>>> 9efa75254593 (net/mlx5_core: Introduce access functions to query vport RoCE fields)
  
 -	u8         reserved_2[0x5];
 +	u8         reserved_2[0xf0];
 +
 +	u8         mtu[0x10];
 +
 +	u8         reserved_3[0x640];
 +
 +	u8         promisc_uc[0x1];
 +	u8         promisc_mc[0x1];
 +	u8         promisc_all[0x1];
 +	u8         reserved_4[0x2];
  	u8         allowed_list_type[0x3];
 -	u8         reserved_3[0xc];
 +	u8         reserved_5[0xc];
  	u8         allowed_list_size[0xc];
  
  	struct mlx5_ifc_mac_address_layout_bits permanent_address;
diff --cc include/linux/mlx5/vport.h
index 638f2ca7a527,dfb2d9497d2d..000000000000
--- a/include/linux/mlx5/vport.h
+++ b/include/linux/mlx5/vport.h
@@@ -34,17 -34,14 +34,27 @@@
  #define __MLX5_VPORT_H__
  
  #include <linux/mlx5/driver.h>
 +#include <linux/mlx5/device.h>
  
++<<<<<<< HEAD
 +u8 mlx5_query_vport_state(struct mlx5_core_dev *mdev, u8 opmod, u16 vport);
 +u8 mlx5_query_vport_admin_state(struct mlx5_core_dev *mdev, u8 opmod,
 +				u16 vport);
 +int mlx5_modify_vport_admin_state(struct mlx5_core_dev *mdev, u8 opmod,
 +				  u16 vport, u8 state);
 +int mlx5_query_nic_vport_mac_address(struct mlx5_core_dev *mdev,
 +				     u16 vport, u8 *addr);
 +int mlx5_modify_nic_vport_mac_address(struct mlx5_core_dev *dev,
 +				      u16 vport, u8 *addr);
++=======
+ u8 mlx5_query_vport_state(struct mlx5_core_dev *mdev, u8 opmod);
+ void mlx5_query_nic_vport_mac_address(struct mlx5_core_dev *mdev, u8 *addr);
+ int mlx5_query_nic_vport_system_image_guid(struct mlx5_core_dev *mdev,
+ 					   u64 *system_image_guid);
+ int mlx5_query_nic_vport_node_guid(struct mlx5_core_dev *mdev, u64 *node_guid);
+ int mlx5_query_nic_vport_qkey_viol_cntr(struct mlx5_core_dev *mdev,
+ 					u16 *qkey_viol_cntr);
++>>>>>>> 9efa75254593 (net/mlx5_core: Introduce access functions to query vport RoCE fields)
  int mlx5_query_hca_vport_gid(struct mlx5_core_dev *dev, u8 other_vport,
  			     u8 port_num, u16  vf_num, u16 gid_index,
  			     union ib_gid *gid);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/vport.c b/drivers/net/ethernet/mellanox/mlx5/core/vport.c
index 076197efea9b..ce2de0436429 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/vport.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/vport.c
@@ -430,6 +430,68 @@ int mlx5_modify_nic_vport_vlans(struct mlx5_core_dev *dev,
 }
 EXPORT_SYMBOL_GPL(mlx5_modify_nic_vport_vlans);
 
+int mlx5_query_nic_vport_system_image_guid(struct mlx5_core_dev *mdev,
+					   u64 *system_image_guid)
+{
+	u32 *out;
+	int outlen = MLX5_ST_SZ_BYTES(query_nic_vport_context_out);
+
+	out = mlx5_vzalloc(outlen);
+	if (!out)
+		return -ENOMEM;
+
+	mlx5_query_nic_vport_context(mdev, out, outlen);
+
+	*system_image_guid = MLX5_GET64(query_nic_vport_context_out, out,
+					nic_vport_context.system_image_guid);
+
+	kfree(out);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(mlx5_query_nic_vport_system_image_guid);
+
+int mlx5_query_nic_vport_node_guid(struct mlx5_core_dev *mdev, u64 *node_guid)
+{
+	u32 *out;
+	int outlen = MLX5_ST_SZ_BYTES(query_nic_vport_context_out);
+
+	out = mlx5_vzalloc(outlen);
+	if (!out)
+		return -ENOMEM;
+
+	mlx5_query_nic_vport_context(mdev, out, outlen);
+
+	*node_guid = MLX5_GET64(query_nic_vport_context_out, out,
+				nic_vport_context.node_guid);
+
+	kfree(out);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(mlx5_query_nic_vport_node_guid);
+
+int mlx5_query_nic_vport_qkey_viol_cntr(struct mlx5_core_dev *mdev,
+					u16 *qkey_viol_cntr)
+{
+	u32 *out;
+	int outlen = MLX5_ST_SZ_BYTES(query_nic_vport_context_out);
+
+	out = mlx5_vzalloc(outlen);
+	if (!out)
+		return -ENOMEM;
+
+	mlx5_query_nic_vport_context(mdev, out, outlen);
+
+	*qkey_viol_cntr = MLX5_GET(query_nic_vport_context_out, out,
+				   nic_vport_context.qkey_violation_counter);
+
+	kfree(out);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(mlx5_query_nic_vport_qkey_viol_cntr);
+
 int mlx5_query_hca_vport_gid(struct mlx5_core_dev *dev, u8 other_vport,
 			     u8 port_num, u16  vf_num, u16 gid_index,
 			     union ib_gid *gid)
* Unmerged path include/linux/mlx5/mlx5_ifc.h
* Unmerged path include/linux/mlx5/vport.h
