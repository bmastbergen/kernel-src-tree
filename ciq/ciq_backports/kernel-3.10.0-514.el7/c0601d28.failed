i2c: designware: Add i2c bus locking support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [i2c] designware: Add i2c bus locking support (Prarit Bhargava) [1339663]
Rebuild_FUZZ: 93.98%
commit-author David Box <david.e.box@linux.intel.com>
commit c0601d285efe063def984f91b04de2d227f89526
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c0601d28.failed

Adds support for acquiring and releasing a hardware bus lock in the i2c
designware core transfer function. This is needed for i2c bus controllers
that are shared with but not controlled by the kernel.

	Signed-off-by: David E. Box <david.e.box@linux.intel.com>
	Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit c0601d285efe063def984f91b04de2d227f89526)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-core.c
#	drivers/i2c/busses/i2c-designware-core.h
diff --cc drivers/i2c/busses/i2c-designware-core.c
index bc5abe76f91f,fbb48fb138e7..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@@ -282,6 -284,16 +282,19 @@@ int i2c_dw_init(struct dw_i2c_dev *dev
  	u32 input_clock_khz;
  	u32 hcnt, lcnt;
  	u32 reg;
++<<<<<<< HEAD
++=======
+ 	u32 sda_falling_time, scl_falling_time;
+ 	int ret;
+ 
+ 	if (dev->acquire_lock) {
+ 		ret = dev->acquire_lock(dev);
+ 		if (ret) {
+ 			dev_err(dev->dev, "couldn't acquire bus ownership\n");
+ 			return ret;
+ 		}
+ 	}
++>>>>>>> c0601d285efe (i2c: designware: Add i2c bus locking support)
  
  	input_clock_khz = dev->get_clk_rate_khz(dev);
  
diff --cc drivers/i2c/busses/i2c-designware-core.h
index e761ad18dd61,ef8ba839e2d3..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@@ -61,6 -57,17 +61,20 @@@
   * @tx_fifo_depth: depth of the hardware tx fifo
   * @rx_fifo_depth: depth of the hardware rx fifo
   * @rx_outstanding: current master-rx elements in tx fifo
++<<<<<<< HEAD
++=======
+  * @ss_hcnt: standard speed HCNT value
+  * @ss_lcnt: standard speed LCNT value
+  * @fs_hcnt: fast speed HCNT value
+  * @fs_lcnt: fast speed LCNT value
+  * @acquire_lock: function to acquire a hardware lock on the bus
+  * @release_lock: function to release a hardware lock on the bus
+  * @pm_runtime_disabled: true if pm runtime is disabled
+  *
+  * HCNT and LCNT parameters can be used if the platform knows more accurate
+  * values than the one computed based only on the input clock frequency.
+  * Leave them to be %0 if not used.
++>>>>>>> c0601d285efe (i2c: designware: Add i2c bus locking support)
   */
  struct dw_i2c_dev {
  	struct device		*dev;
@@@ -90,6 -97,16 +104,19 @@@
  	unsigned int		tx_fifo_depth;
  	unsigned int		rx_fifo_depth;
  	int			rx_outstanding;
++<<<<<<< HEAD
++=======
+ 	u32			sda_hold_time;
+ 	u32			sda_falling_time;
+ 	u32			scl_falling_time;
+ 	u16			ss_hcnt;
+ 	u16			ss_lcnt;
+ 	u16			fs_hcnt;
+ 	u16			fs_lcnt;
+ 	int			(*acquire_lock)(struct dw_i2c_dev *dev);
+ 	void			(*release_lock)(struct dw_i2c_dev *dev);
+ 	bool			pm_runtime_disabled;
++>>>>>>> c0601d285efe (i2c: designware: Add i2c bus locking support)
  };
  
  #define ACCESS_SWAP		0x00000001
* Unmerged path drivers/i2c/busses/i2c-designware-core.c
* Unmerged path drivers/i2c/busses/i2c-designware-core.h
