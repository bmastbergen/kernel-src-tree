time: Consolidate the time accessor prototypes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 8b094cd03b4a3793220d8d8d86a173bfea8c285b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8b094cd0.failed

Right now we have time related prototypes in 3 different header
files. Move it to a single timekeeping header file and move the core
internal stuff into a core private header.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: John Stultz <john.stultz@linaro.org>
(cherry picked from commit 8b094cd03b4a3793220d8d8d86a173bfea8c285b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/hrtimer.h
#	include/linux/ktime.h
#	include/linux/time.h
diff --cc include/linux/hrtimer.h
index 248694023e48,a036d058a249..000000000000
--- a/include/linux/hrtimer.h
+++ b/include/linux/hrtimer.h
@@@ -317,15 -326,6 +317,18 @@@ static inline void timerfd_clock_was_se
  #endif
  extern void hrtimers_resume(void);
  
++<<<<<<< HEAD
 +extern ktime_t ktime_get(void);
 +extern ktime_t ktime_get_real(void);
 +extern ktime_t ktime_get_boottime(void);
 +extern ktime_t ktime_get_monotonic_offset(void);
 +extern ktime_t ktime_get_clocktai(void);
 +extern ktime_t ktime_get_update_offsets_now(unsigned int *cwsseq,
 +						ktime_t *offs_real,
 +						ktime_t *offs_boot,
 +						ktime_t *offs_tai);
++=======
++>>>>>>> 8b094cd03b4a (time: Consolidate the time accessor prototypes)
  DECLARE_PER_CPU(struct tick_device, tick_cpu_device);
  
  
diff --cc include/linux/ktime.h
index 320f5dab0622,c9d645ad98ff..000000000000
--- a/include/linux/ktime.h
+++ b/include/linux/ktime.h
@@@ -419,41 -250,6 +419,44 @@@ static inline __must_check bool ktime_t
  #define LOW_RES_NSEC		TICK_NSEC
  #define KTIME_LOW_RES		(ktime_t){ .tv64 = LOW_RES_NSEC }
  
++<<<<<<< HEAD
 +/* Get the monotonic time in timespec format: */
 +extern void ktime_get_ts64(struct timespec64 *ts);
 +
 +#if BITS_PER_LONG == 64
 +static inline void ktime_get_ts(struct timespec *ts)
 +{
 +	ktime_get_ts64(ts);
 +}
 +
 +static inline void ktime_get_real_ts(struct timespec *ts)
 +{
 +	getnstimeofday64(ts);
 +}
 +
 +#else
 +static inline void ktime_get_ts(struct timespec *ts)
 +{
 +	struct timespec64 ts64;
 +
 +	ktime_get_ts64(&ts64);
 +	*ts = timespec64_to_timespec(ts64);
 +}
 +
 +static inline void ktime_get_real_ts(struct timespec *ts)
 +{
 +	struct timespec64 ts64;
 +
 +	getnstimeofday64(&ts64);
 +	*ts = timespec64_to_timespec(ts64);
 +}
 +#endif
 +
 +/* Get the real (wall-) time in timespec format: */
 +#define ktime_get_real_ts64(ts)	getnstimeofday64(ts)
 +
++=======
++>>>>>>> 8b094cd03b4a (time: Consolidate the time accessor prototypes)
  static inline ktime_t ns_to_ktime(u64 ns)
  {
  	static const ktime_t ktime_zero = { .tv64 = 0 };
diff --cc include/linux/time.h
index 7eaf1ac0a44a,8c42cf8d2444..000000000000
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@@ -138,62 -120,11 +120,54 @@@ extern u32 (*arch_gettimeoffset)(void)
  struct itimerval;
  extern int do_setitimer(int which, struct itimerval *value,
  			struct itimerval *ovalue);
- extern unsigned int alarm_setitimer(unsigned int seconds);
  extern int do_getitimer(int which, struct itimerval *value);
++<<<<<<< HEAD
 +
 +extern int __getnstimeofday64(struct timespec64 *tv);
 +extern void getnstimeofday64(struct timespec64 *tv);
 +
 +#if BITS_PER_LONG == 64
 +static inline int __getnstimeofday(struct timespec *ts)
 +{
 +	return __getnstimeofday64(ts);
 +}
 +
 +static inline void getnstimeofday(struct timespec *ts)
 +{
 +	getnstimeofday64(ts);
 +}
 +
 +#else
 +static inline int __getnstimeofday(struct timespec *ts)
 +{
 +	struct timespec64 ts64;
 +	int ret = __getnstimeofday64(&ts64);
 +
 +	*ts = timespec64_to_timespec(ts64);
 +	return ret;
 +}
 +
 +static inline void getnstimeofday(struct timespec *ts)
 +{
 +	struct timespec64 ts64;
 +
 +	getnstimeofday64(&ts64);
 +	*ts = timespec64_to_timespec(ts64);
 +}
 +#endif
 +
 +extern void getrawmonotonic(struct timespec *ts);
 +extern void getnstime_raw_and_real(struct timespec *ts_raw,
 +		struct timespec *ts_real);
 +extern void getboottime(struct timespec *ts);
 +extern void monotonic_to_bootbased(struct timespec *ts);
 +extern void get_monotonic_boottime(struct timespec *ts);
++=======
++>>>>>>> 8b094cd03b4a (time: Consolidate the time accessor prototypes)
  
- extern struct timespec timespec_trunc(struct timespec t, unsigned gran);
- extern int timekeeping_valid_for_hres(void);
- extern u64 timekeeping_max_deferment(void);
- extern int timekeeping_inject_offset(struct timespec *ts);
- extern s32 timekeeping_get_tai_offset(void);
- extern void timekeeping_set_tai_offset(s32 tai_offset);
- extern void timekeeping_clocktai(struct timespec *ts);
+ extern unsigned int alarm_setitimer(unsigned int seconds);
+ 
+ extern long do_utimes(int dfd, const char __user *filename, struct timespec *times, int flags);
  
  struct tms;
  extern void do_sys_times(struct tms *);
* Unmerged path include/linux/hrtimer.h
* Unmerged path include/linux/ktime.h
* Unmerged path include/linux/time.h
diff --git a/include/linux/timekeeping.h b/include/linux/timekeeping.h
new file mode 100644
index 000000000000..e81c35b71da7
--- /dev/null
+++ b/include/linux/timekeeping.h
@@ -0,0 +1,78 @@
+#ifndef _LINUX_TIMEKEEPING_H
+#define _LINUX_TIMEKEEPING_H
+
+/* Included from linux/ktime.h */
+
+void timekeeping_init(void);
+extern int timekeeping_suspended;
+
+/*
+ * Get and set timeofday
+ */
+extern void do_gettimeofday(struct timeval *tv);
+extern int do_settimeofday(const struct timespec *tv);
+extern int do_sys_settimeofday(const struct timespec *tv,
+			       const struct timezone *tz);
+
+/*
+ * Kernel time accessors
+ */
+unsigned long get_seconds(void);
+struct timespec current_kernel_time(void);
+/* does not take xtime_lock */
+struct timespec __current_kernel_time(void);
+
+/*
+ * timespec based interfaces
+ */
+struct timespec get_monotonic_coarse(void);
+extern void getrawmonotonic(struct timespec *ts);
+extern void monotonic_to_bootbased(struct timespec *ts);
+extern void get_monotonic_boottime(struct timespec *ts);
+extern void ktime_get_ts(struct timespec *ts);
+
+extern int __getnstimeofday(struct timespec *tv);
+extern void getnstimeofday(struct timespec *tv);
+extern void getboottime(struct timespec *ts);
+
+#define do_posix_clock_monotonic_gettime(ts) ktime_get_ts(ts)
+#define ktime_get_real_ts(ts)	getnstimeofday(ts)
+
+
+/*
+ * ktime_t based interfaces
+ */
+extern ktime_t ktime_get(void);
+extern ktime_t ktime_get_real(void);
+extern ktime_t ktime_get_boottime(void);
+extern ktime_t ktime_get_monotonic_offset(void);
+extern ktime_t ktime_get_clocktai(void);
+
+/*
+ * RTC specific
+ */
+extern void timekeeping_inject_sleeptime(struct timespec *delta);
+
+/*
+ * PPS accessor
+ */
+extern void getnstime_raw_and_real(struct timespec *ts_raw,
+				   struct timespec *ts_real);
+
+/*
+ * Persistent clock related interfaces
+ */
+extern bool persistent_clock_exist;
+extern int persistent_clock_is_local;
+
+static inline bool has_persistent_clock(void)
+{
+	return persistent_clock_exist;
+}
+
+extern void read_persistent_clock(struct timespec *ts);
+extern void read_boot_clock(struct timespec *ts);
+extern int update_persistent_clock(struct timespec now);
+
+
+#endif
diff --git a/kernel/hrtimer.c b/kernel/hrtimer.c
index 67384c8b3c54..634d5985d567 100644
--- a/kernel/hrtimer.c
+++ b/kernel/hrtimer.c
@@ -53,6 +53,8 @@
 
 #include <trace/events/timer.h>
 
+#include "timekeeping.h"
+
 /*
  * The timer bases:
  *
diff --git a/kernel/posix-timers.c b/kernel/posix-timers.c
index 424c2d4265c9..42b463ad90f2 100644
--- a/kernel/posix-timers.c
+++ b/kernel/posix-timers.c
@@ -49,6 +49,8 @@
 #include <linux/export.h>
 #include <linux/hashtable.h>
 
+#include "timekeeping.h"
+
 /*
  * Management arrays for POSIX timers. Timers are now kept in static hash table
  * with 512 entries.
diff --git a/kernel/time.c b/kernel/time.c
index d3b920123303..e51f0700670a 100644
--- a/kernel/time.c
+++ b/kernel/time.c
@@ -42,6 +42,7 @@
 #include <asm/unistd.h>
 
 #include "timeconst.h"
+#include "timekeeping.h"
 
 /*
  * The timezone where the local system is located.  Used as a default by some
diff --git a/kernel/time/tick-internal.h b/kernel/time/tick-internal.h
index 4b574148f4f0..1c0d0322e980 100644
--- a/kernel/time/tick-internal.h
+++ b/kernel/time/tick-internal.h
@@ -4,6 +4,8 @@
 #include <linux/hrtimer.h>
 #include <linux/tick.h>
 
+#include "timekeeping.h"
+
 extern seqlock_t jiffies_lock;
 
 #ifdef CONFIG_GENERIC_CLOCKEVENTS_BUILD
diff --git a/kernel/time/timekeeping.h b/kernel/time/timekeeping.h
new file mode 100644
index 000000000000..adc1fc98bde3
--- /dev/null
+++ b/kernel/time/timekeeping.h
@@ -0,0 +1,20 @@
+#ifndef _KERNEL_TIME_TIMEKEEPING_H
+#define _KERNEL_TIME_TIMEKEEPING_H
+/*
+ * Internal interfaces for kernel/time/
+ */
+extern ktime_t ktime_get_update_offsets_tick(ktime_t *offs_real,
+						ktime_t *offs_boot,
+						ktime_t *offs_tai);
+extern ktime_t ktime_get_update_offsets_now(ktime_t *offs_real,
+						ktime_t *offs_boot,
+						ktime_t *offs_tai);
+
+extern int timekeeping_valid_for_hres(void);
+extern u64 timekeeping_max_deferment(void);
+extern int timekeeping_inject_offset(struct timespec *ts);
+extern s32 timekeeping_get_tai_offset(void);
+extern void timekeeping_set_tai_offset(s32 tai_offset);
+extern void timekeeping_clocktai(struct timespec *ts);
+
+#endif
