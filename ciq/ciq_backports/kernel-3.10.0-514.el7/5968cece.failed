sched/stat: Expose /proc/pid/schedstat if CONFIG_SCHED_INFO=y

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
commit 5968cecedd7a09f23e9fcb5f9fb4e893712f35ba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/5968cece.failed

Expand /proc/pid/schedstat output:

 - enable it on CONFIG_TASK_DELAY_ACCT=y && !CONFIG_SCHEDSTATS kernels.

 - dump all zeroes on kernels that are booted with the 'nodelayacct'
   option, which boot option disables delay accounting on
   CONFIG_TASK_DELAY_ACCT=y kernels.

	Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Cc: Balbir Singh <bsingharora@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: a.p.zijlstra@chello.nl
	Cc: ricklind@us.ibm.com
Link: http://lkml.kernel.org/r/5ccbef17d4bc841084ea6e6421d4e4a23b7b806f.1435654789.git.naveen.n.rao@linux.vnet.ibm.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 5968cecedd7a09f23e9fcb5f9fb4e893712f35ba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/base.c
diff --cc fs/proc/base.c
index e5ccc0b19999,ad63fa3306df..000000000000
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@@ -498,12 -308,18 +498,24 @@@ static int proc_pid_stack(struct seq_fi
  /*
   * Provides /proc/PID/schedstat
   */
 -static int proc_pid_schedstat(struct seq_file *m, struct pid_namespace *ns,
 -			      struct pid *pid, struct task_struct *task)
 -{
 +static int proc_pid_schedstat(struct task_struct *task, char *buffer)
 +{
++<<<<<<< HEAD
 +	return sprintf(buffer, "%llu %llu %lu\n",
 +			(unsigned long long)task->se.sum_exec_runtime,
 +			(unsigned long long)task->sched_info.run_delay,
 +			task->sched_info.pcount);
++=======
+ 	if (unlikely(!sched_info_on()))
+ 		seq_printf(m, "0 0 0\n");
+ 	else
+ 		seq_printf(m, "%llu %llu %lu\n",
+ 		   (unsigned long long)task->se.sum_exec_runtime,
+ 		   (unsigned long long)task->sched_info.run_delay,
+ 		   task->sched_info.pcount);
+ 
+ 	return 0;
++>>>>>>> 5968cecedd7a (sched/stat: Expose /proc/pid/schedstat if CONFIG_SCHED_INFO=y)
  }
  #endif
  
@@@ -2898,13 -2598,13 +2910,18 @@@ static const struct pid_entry tgid_base
  	DIR("attr",       S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),
  #endif
  #ifdef CONFIG_KALLSYMS
 -	ONE("wchan",      S_IRUGO, proc_pid_wchan),
 +	INF("wchan",      S_IRUGO, proc_pid_wchan),
  #endif
  #ifdef CONFIG_STACKTRACE
 -	ONE("stack",      S_IRUSR, proc_pid_stack),
 +	ONE("stack",      S_IRUGO, proc_pid_stack),
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_SCHEDSTATS
 +	INF("schedstat",  S_IRUGO, proc_pid_schedstat),
++=======
+ #ifdef CONFIG_SCHED_INFO
+ 	ONE("schedstat",  S_IRUGO, proc_pid_schedstat),
++>>>>>>> 5968cecedd7a (sched/stat: Expose /proc/pid/schedstat if CONFIG_SCHED_INFO=y)
  #endif
  #ifdef CONFIG_LATENCYTOP
  	REG("latency",  S_IRUGO, proc_lstats_operations),
@@@ -3255,13 -2946,13 +3272,18 @@@ static const struct pid_entry tid_base_
  	DIR("attr",      S_IRUGO|S_IXUGO, proc_attr_dir_inode_operations, proc_attr_dir_operations),
  #endif
  #ifdef CONFIG_KALLSYMS
 -	ONE("wchan",     S_IRUGO, proc_pid_wchan),
 +	INF("wchan",     S_IRUGO, proc_pid_wchan),
  #endif
  #ifdef CONFIG_STACKTRACE
 -	ONE("stack",      S_IRUSR, proc_pid_stack),
 +	ONE("stack",      S_IRUGO, proc_pid_stack),
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_SCHEDSTATS
 +	INF("schedstat", S_IRUGO, proc_pid_schedstat),
++=======
+ #ifdef CONFIG_SCHED_INFO
+ 	ONE("schedstat", S_IRUGO, proc_pid_schedstat),
++>>>>>>> 5968cecedd7a (sched/stat: Expose /proc/pid/schedstat if CONFIG_SCHED_INFO=y)
  #endif
  #ifdef CONFIG_LATENCYTOP
  	REG("latency",  S_IRUGO, proc_lstats_operations),
* Unmerged path fs/proc/base.c
