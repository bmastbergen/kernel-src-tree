x86/asm/bpf: Create stack frames in bpf_jit.S

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] asm/bpf: Create stack frames in bpf_jit.S (Josh Poimboeuf) [1320250]
Rebuild_FUZZ: 95.35%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit d21001cc15ba9f63b0334d60942278587471a451
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d21001cc.failed

bpf_jit.S has several callable non-leaf functions which don't honor
CONFIG_FRAME_POINTER, which can result in bad stack traces.

Create a stack frame before the call instructions when
CONFIG_FRAME_POINTER is enabled.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Chris J Arges <chris.j.arges@canonical.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: live-patching@vger.kernel.org
	Cc: netdev@vger.kernel.org
Link: http://lkml.kernel.org/r/fa4c41976b438b51954cb8021f06bceb1d1d66cc.1453405861.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d21001cc15ba9f63b0334d60942278587471a451)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/net/bpf_jit.S
diff --cc arch/x86/net/bpf_jit.S
index 2db57c407615,f2a7faf4706e..000000000000
--- a/arch/x86/net/bpf_jit.S
+++ b/arch/x86/net/bpf_jit.S
@@@ -8,7 -8,7 +8,11 @@@
   * of the License.
   */
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +#include <asm/dwarf2.h>
++=======
+ #include <asm/frame.h>
++>>>>>>> d21001cc15ba (x86/asm/bpf: Create stack frames in bpf_jit.S)
  
  /*
   * Calling convention :
@@@ -61,40 -64,20 +65,53 @@@ FUNC(sk_load_byte_positive_offset
  	movzbl	(SKBDATA,%rsi),%eax
  	ret
  
 +/**
 + * sk_load_byte_msh - BPF_S_LDX_B_MSH helper
 + *
 + * Implements BPF_S_LDX_B_MSH : ldxb  4*([offset]&0xf)
 + * Must preserve A accumulator (%eax)
 + * Inputs : %esi is the offset value
 + */
 +sk_load_byte_msh:
 +	.globl	sk_load_byte_msh
 +	test	%esi,%esi
 +	js	bpf_slow_path_byte_msh_neg
 +
 +sk_load_byte_msh_positive_offset:
 +	.globl	sk_load_byte_msh_positive_offset
 +	cmp	%esi,%r9d      /* if (offset >= hlen) goto bpf_slow_path_byte_msh */
 +	jle	bpf_slow_path_byte_msh
 +	movzbl	(SKBDATA,%rsi),%ebx
 +	and	$15,%bl
 +	shl	$2,%bl
 +	ret
 +
  /* rsi contains offset and can be scratched */
  #define bpf_slow_path_common(LEN)		\
++<<<<<<< HEAD
 +	push	%rdi;    /* save skb */		\
++=======
+ 	lea	-MAX_BPF_STACK + 32(%rbp), %rdx;\
+ 	FRAME_BEGIN;				\
+ 	mov	%rbx, %rdi; /* arg1 == skb */	\
++>>>>>>> d21001cc15ba (x86/asm/bpf: Create stack frames in bpf_jit.S)
  	push	%r9;				\
  	push	SKBDATA;			\
  /* rsi already has offset */			\
  	mov	$LEN,%ecx;	/* len */	\
++<<<<<<< HEAD
 +	lea	-12(%rbp),%rdx;			\
++=======
++>>>>>>> d21001cc15ba (x86/asm/bpf: Create stack frames in bpf_jit.S)
  	call	skb_copy_bits;			\
  	test    %eax,%eax;			\
  	pop	SKBDATA;			\
  	pop	%r9;				\
++<<<<<<< HEAD
 +	pop	%rdi
++=======
+ 	FRAME_END
++>>>>>>> d21001cc15ba (x86/asm/bpf: Create stack frames in bpf_jit.S)
  
  
  bpf_slow_path_word:
@@@ -129,7 -102,8 +146,12 @@@ bpf_slow_path_byte_msh
  	ret
  
  #define sk_negative_common(SIZE)				\
++<<<<<<< HEAD
 +	push	%rdi;	/* save skb */				\
++=======
+ 	FRAME_BEGIN;						\
+ 	mov	%rbx, %rdi; /* arg1 == skb */			\
++>>>>>>> d21001cc15ba (x86/asm/bpf: Create stack frames in bpf_jit.S)
  	push	%r9;						\
  	push	SKBDATA;					\
  /* rsi already has offset */					\
@@@ -138,10 -112,9 +160,14 @@@
  	test	%rax,%rax;					\
  	pop	SKBDATA;					\
  	pop	%r9;						\
++<<<<<<< HEAD
 +	pop	%rdi;						\
++=======
+ 	FRAME_END;						\
++>>>>>>> d21001cc15ba (x86/asm/bpf: Create stack frames in bpf_jit.S)
  	jz	bpf_error
  
 +
  bpf_slow_path_word_neg:
  	cmp	SKF_MAX_NEG_OFF, %esi	/* test range */
  	jl	bpf_error	/* offset lower -> error  */
* Unmerged path arch/x86/net/bpf_jit.S
