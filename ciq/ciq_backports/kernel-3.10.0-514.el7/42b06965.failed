libceph: wait_request_timeout()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 42b0696527c49a109e9558162b8d109ae257d402
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/42b06965.failed

The unwatch timeout is currently implemented in rbd.  With
watch/unwatch code moving into libceph, we are going to need
a ceph_osdc_wait_request() variant with a timeout.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 42b0696527c49a109e9558162b8d109ae257d402)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/osd_client.c
diff --cc net/ceph/osd_client.c
index b1bd089d52f0,ef1bcbe9af2d..000000000000
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@@ -2527,21 -2697,7 +2551,25 @@@ static int wait_request_timeout(struct 
  int ceph_osdc_wait_request(struct ceph_osd_client *osdc,
  			   struct ceph_osd_request *req)
  {
++<<<<<<< HEAD
 +	int rc;
 +
 +	dout("%s %p tid %llu\n", __func__, req, req->r_tid);
 +
 +	rc = wait_for_completion_interruptible(&req->r_completion);
 +	if (rc < 0) {
 +		dout("%s %p tid %llu interrupted\n", __func__, req, req->r_tid);
 +		ceph_osdc_cancel_request(req);
 +		complete_request(req);
 +		return rc;
 +	}
 +
 +	dout("%s %p tid %llu result %d\n", __func__, req, req->r_tid,
 +	     req->r_result);
 +	return req->r_result;
++=======
+ 	return wait_request_timeout(req, 0);
++>>>>>>> 42b0696527c4 (libceph: wait_request_timeout())
  }
  EXPORT_SYMBOL(ceph_osdc_wait_request);
  
* Unmerged path net/ceph/osd_client.c
