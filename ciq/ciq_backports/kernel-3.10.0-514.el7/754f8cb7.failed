ovl: do not require mounter to have MAY_WRITE on lower

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Vivek Goyal <vgoyal@redhat.com>
commit 754f8cb72b42a3a6100d2bbb1cb885361a7310dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/754f8cb7.failed

Now we have two levels of checks in ovl_permission(). overlay inode
is checked with the creds of task while underlying inode is checked
with the creds of mounter.

Looks like mounter does not have to have WRITE access to files on lower/.
So remove the MAY_WRITE from access mask for checks on underlying
lower inode.

This means task should still have the MAY_WRITE permission on lower
inode and mounter is not required to have MAY_WRITE.

It also solves the problem of read only NFS mounts being used as lower.
If __inode_permission(lower_inode, MAY_WRITE) is called on read only
NFS, it fails. By resetting MAY_WRITE, check succeeds and case of
read only NFS shold work with overlay without having to specify any
special mount options (default permission).

	Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 754f8cb72b42a3a6100d2bbb1cb885361a7310dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/inode.c
diff --cc fs/overlayfs/inode.c
index cec7c3f64b1e,8f7dd547cfb3..000000000000
--- a/fs/overlayfs/inode.c
+++ b/fs/overlayfs/inode.c
@@@ -147,15 -170,25 +147,29 @@@ int ovl_permission(struct inode *inode
  		 * constructed return EROFS to prevent modification of
  		 * upper layer.
  		 */
 +		err = -EROFS;
  		if (is_upper && !IS_RDONLY(inode) && IS_RDONLY(realinode) &&
  		    (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode)))
 -			return -EROFS;
 +			goto out_dput;
  	}
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Check overlay inode with the creds of task and underlying inode
+ 	 * with creds of mounter
+ 	 */
+ 	err = generic_permission(inode, mask);
+ 	if (err)
+ 		return err;
+ 
+ 	old_cred = ovl_override_creds(inode->i_sb);
+ 	if (!is_upper)
+ 		mask &= ~(MAY_WRITE | MAY_APPEND);
++>>>>>>> 754f8cb72b42 (ovl: do not require mounter to have MAY_WRITE on lower)
  	err = __inode_permission(realinode, mask);
 -	revert_creds(old_cred);
 -
 +out_dput:
 +	dput(alias);
  	return err;
  }
  
* Unmerged path fs/overlayfs/inode.c
