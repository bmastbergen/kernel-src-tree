scsi_transport_srp: Introduce srp_wait_for_queuecommand()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bart Van Assche <bart.vanassche@sandisk.com>
commit be34c62ddf39d1931780b07a6f4241393e4ba2ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/be34c62d.failed

Introduce the helper function srp_wait_for_queuecommand().
Move the definition of scsi_request_fn_active(). Add a comment
above srp_wait_for_queuecommand() that support for scsi-mq needs
to be added.

This patch does not change any functionality. A second call to
srp_wait_for_queuecommand() will be introduced in the next patch.

	Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Cc: James Bottomley <JBottomley@Odin.com>
	Cc: Sagi Grimberg <sagig@mellanox.com>
	Cc: Sebastian Parschauer <sebastian.riemer@profitbricks.com>
	Cc: <stable@vger.kernel.org> #v3.13
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit be34c62ddf39d1931780b07a6f4241393e4ba2ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_transport_srp.c
diff --cc drivers/scsi/scsi_transport_srp.c
index 2700a5a09bd4,e05cd7e2d6d3..000000000000
--- a/drivers/scsi/scsi_transport_srp.c
+++ b/drivers/scsi/scsi_transport_srp.c
@@@ -501,27 -534,8 +531,30 @@@ void srp_start_tl_fail_timers(struct sr
  EXPORT_SYMBOL(srp_start_tl_fail_timers);
  
  /**
++<<<<<<< HEAD
 + * scsi_request_fn_active() - number of kernel threads inside scsi_request_fn()
 + */
 +static int scsi_request_fn_active(struct Scsi_Host *shost)
 +{
 +	struct scsi_device *sdev;
 +	struct request_queue *q;
 +	int request_fn_active = 0;
 +
 +	shost_for_each_device(sdev, shost) {
 +		q = sdev->request_queue;
 +
 +		spin_lock_irq(q->queue_lock);
 +		request_fn_active += q->request_fn_active;
 +		spin_unlock_irq(q->queue_lock);
 +	}
 +
 +	return request_fn_active;
 +}
 +
 +/**
++=======
++>>>>>>> be34c62ddf39 (scsi_transport_srp: Introduce srp_wait_for_queuecommand())
   * srp_reconnect_rport() - reconnect to an SRP target port
 - * @rport: SRP target port.
   *
   * Blocks SCSI command queueing before invoking reconnect() such that
   * queuecommand() won't be invoked concurrently with reconnect() from outside
@@@ -554,9 -568,8 +587,14 @@@ int srp_reconnect_rport(struct srp_rpor
  	if (res)
  		goto out;
  	scsi_target_block(&shost->shost_gendev);
++<<<<<<< HEAD
 +	while (scsi_request_fn_active(shost))
 +		msleep(20);
 +	res = i->f->reconnect(rport);
++=======
+ 	srp_wait_for_queuecommand(shost);
+ 	res = rport->state != SRP_RPORT_LOST ? i->f->reconnect(rport) : -ENODEV;
++>>>>>>> be34c62ddf39 (scsi_transport_srp: Introduce srp_wait_for_queuecommand())
  	pr_debug("%s (state %d): transport.reconnect() returned %d\n",
  		 dev_name(&shost->shost_gendev), rport->state, res);
  	if (res == 0) {
* Unmerged path drivers/scsi/scsi_transport_srp.c
