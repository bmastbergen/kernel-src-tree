hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author KY Srinivasan <kys@microsoft.com>
commit 3a3d9a0a731add5afaafd9c714e7efe11820fe5b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3a3d9a0a.failed

Eliminate send_completion_tid from struct hv_netvsc_packet.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3a3d9a0a731add5afaafd9c714e7efe11820fe5b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/netvsc.c
#	drivers/net/hyperv/netvsc_drv.c
#	drivers/net/hyperv/rndis_filter.c
diff --cc drivers/net/hyperv/hyperv_net.h
index cf498664d989,eebfbe5f2f3d..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -128,28 -127,24 +128,34 @@@ struct ndis_tcp_ip_checksum_info
   */
  struct hv_netvsc_packet {
  	/* Bookkeeping stuff */
 -	u8 status;
 -	u8 is_data_pkt;
 -	u8 xmit_more; /* from skb */
 -	u8 cp_partial; /* partial copy into send buffer */
 -
 -	u8 rmsg_size; /* RNDIS header and PPI size */
 -	u8 rmsg_pgcnt; /* page count of RNDIS header and PPI */
 -	u8 page_buf_cnt;
 -	u8 completion_func;
 +	u32 status;
  
 +	bool is_data_pkt;
  	u16 vlan_tci;
 +
  	u16 q_idx;
++<<<<<<< HEAD
 +	struct vmbus_channel *channel;
 +
 +	u64 send_completion_tid;
 +	void *send_completion_ctx;
 +	void (*send_completion)(void *context);
 +
 +	u32 send_buf_index;
 +
 +	/* This points to the memory after page_buf */
 +	struct rndis_message *rndis_msg;
 +
 +	u32 total_data_buflen;
 +	/* Points to the send/receive buffer where the ethernet frame is */
 +	void *data;
 +	u32 page_buf_cnt;
 +	struct hv_page_buffer page_buf[0];
++=======
+ 	u32 send_buf_index;
+ 
+ 	u32 total_data_buflen;
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  };
  
  struct netvsc_device_info {
@@@ -183,12 -180,18 +189,21 @@@ struct rndis_device 
  int netvsc_device_add(struct hv_device *device, void *additional_info);
  int netvsc_device_remove(struct hv_device *device);
  int netvsc_send(struct hv_device *device,
++<<<<<<< HEAD
 +		struct hv_netvsc_packet *packet);
 +void netvsc_linkstatus_callback(struct hv_device *device_obj,
 +				unsigned int status);
++=======
+ 		struct hv_netvsc_packet *packet,
+ 		struct rndis_message *rndis_msg,
+ 		struct hv_page_buffer **page_buffer,
+ 		struct sk_buff *skb);
+ void netvsc_linkstatus_callback(struct hv_device *device_obj,
+ 				struct rndis_message *resp);
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  int netvsc_recv_callback(struct hv_device *device_obj,
  			struct hv_netvsc_packet *packet,
 -			void **data,
 -			struct ndis_tcp_ip_checksum_info *csum_info,
 -			struct vmbus_channel *channel);
 +			struct ndis_tcp_ip_checksum_info *csum_info);
  void netvsc_channel_cb(void *context);
  int rndis_filter_open(struct hv_device *dev);
  int rndis_filter_close(struct hv_device *dev);
diff --cc drivers/net/hyperv/netvsc.c
index 74ee1b57e623,d18e10cceced..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -642,9 -649,8 +643,14 @@@ static void netvsc_send_completion(stru
  			if (send_index != NETVSC_INVALID_INDEX)
  				netvsc_free_send_slot(net_device, send_index);
  			q_idx = nvsc_packet->q_idx;
++<<<<<<< HEAD
 +			channel = nvsc_packet->channel;
 +			nvsc_packet->send_completion(nvsc_packet->
 +						     send_completion_ctx);
++=======
+ 			channel = incoming_channel;
+ 			dev_kfree_skb_any(skb);
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  		}
  
  		num_outstanding_sends =
@@@ -714,63 -736,45 +720,75 @@@ u32 netvsc_copy_to_send_buf(struct netv
  	return msg_size;
  }
  
++<<<<<<< HEAD
 +int netvsc_send(struct hv_device *device,
 +			struct hv_netvsc_packet *packet)
++=======
+ static inline int netvsc_send_pkt(
+ 	struct hv_netvsc_packet *packet,
+ 	struct netvsc_device *net_device,
+ 	struct hv_page_buffer **pb,
+ 	struct sk_buff *skb)
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  {
 -	struct nvsp_message nvmsg;
 -	u16 q_idx = packet->q_idx;
 -	struct vmbus_channel *out_channel = net_device->chn_table[q_idx];
 -	struct net_device *ndev = net_device->ndev;
 +	struct netvsc_device *net_device;
 +	int ret = 0;
 +	struct nvsp_message sendMessage;
 +	struct net_device *ndev;
 +	struct vmbus_channel *out_channel = NULL;
  	u64 req_id;
 -	int ret;
 -	struct hv_page_buffer *pgbuf;
 -	u32 ring_avail = hv_ringbuf_avail_percent(&out_channel->outbound);
 +	unsigned int section_index = NETVSC_INVALID_INDEX;
 +	u32 msg_size = 0;
 +	struct sk_buff *skb = NULL;
 +	u16 q_idx = packet->q_idx;
 +
 +
 +	net_device = get_outbound_net_device(device);
 +	if (!net_device)
 +		return -ENODEV;
 +	ndev = net_device->ndev;
  
 -	nvmsg.hdr.msg_type = NVSP_MSG1_TYPE_SEND_RNDIS_PKT;
 +	sendMessage.hdr.msg_type = NVSP_MSG1_TYPE_SEND_RNDIS_PKT;
  	if (packet->is_data_pkt) {
  		/* 0 is RMC_DATA; */
 -		nvmsg.msg.v1_msg.send_rndis_pkt.channel_type = 0;
 +		sendMessage.msg.v1_msg.send_rndis_pkt.channel_type = 0;
  	} else {
  		/* 1 is RMC_CONTROL; */
 -		nvmsg.msg.v1_msg.send_rndis_pkt.channel_type = 1;
 +		sendMessage.msg.v1_msg.send_rndis_pkt.channel_type = 1;
  	}
  
 -	nvmsg.msg.v1_msg.send_rndis_pkt.send_buf_section_index =
 -		packet->send_buf_index;
 -	if (packet->send_buf_index == NETVSC_INVALID_INDEX)
 -		nvmsg.msg.v1_msg.send_rndis_pkt.send_buf_section_size = 0;
 -	else
 -		nvmsg.msg.v1_msg.send_rndis_pkt.send_buf_section_size =
 -			packet->total_data_buflen;
 +	/* Attempt to send via sendbuf */
 +	if (packet->total_data_buflen < net_device->send_section_size) {
 +		section_index = netvsc_get_next_send_section(net_device);
 +		if (section_index != NETVSC_INVALID_INDEX) {
 +			msg_size = netvsc_copy_to_send_buf(net_device,
 +							   section_index,
 +							   packet);
 +			skb = (struct sk_buff *)
 +			      (unsigned long)packet->send_completion_tid;
 +			packet->page_buf_cnt = 0;
 +		}
 +	}
 +	packet->send_buf_index = section_index;
 +
++<<<<<<< HEAD
  
 +	sendMessage.msg.v1_msg.send_rndis_pkt.send_buf_section_index =
 +		section_index;
 +	sendMessage.msg.v1_msg.send_rndis_pkt.send_buf_section_size = msg_size;
 +
 +	if (packet->send_completion)
 +		req_id = (ulong)packet;
 +	else
 +		req_id = 0;
++=======
+ 	req_id = (ulong)skb;
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
 +
 +	out_channel = net_device->chn_table[packet->q_idx];
 +	if (out_channel == NULL)
 +		out_channel = device->channel;
 +	packet->channel = out_channel;
  
  	if (out_channel->rescind)
  		return -ENODEV;
@@@ -817,13 -834,112 +835,122 @@@
  			   packet, ret);
  	}
  
++<<<<<<< HEAD
 +	if (ret != 0) {
 +		if (section_index != NETVSC_INVALID_INDEX)
 +			netvsc_free_send_slot(net_device, section_index);
 +	} else if (skb) {
 +		dev_kfree_skb_any(skb);
 +	}
 +
++=======
+ 	return ret;
+ }
+ 
+ int netvsc_send(struct hv_device *device,
+ 		struct hv_netvsc_packet *packet,
+ 		struct rndis_message *rndis_msg,
+ 		struct hv_page_buffer **pb,
+ 		struct sk_buff *skb)
+ {
+ 	struct netvsc_device *net_device;
+ 	int ret = 0, m_ret = 0;
+ 	struct vmbus_channel *out_channel;
+ 	u16 q_idx = packet->q_idx;
+ 	u32 pktlen = packet->total_data_buflen, msd_len = 0;
+ 	unsigned int section_index = NETVSC_INVALID_INDEX;
+ 	struct multi_send_data *msdp;
+ 	struct hv_netvsc_packet *msd_send = NULL, *cur_send = NULL;
+ 	bool try_batch;
+ 
+ 	net_device = get_outbound_net_device(device);
+ 	if (!net_device)
+ 		return -ENODEV;
+ 
+ 	out_channel = net_device->chn_table[q_idx];
+ 
+ 	packet->send_buf_index = NETVSC_INVALID_INDEX;
+ 	packet->cp_partial = false;
+ 
+ 	msdp = &net_device->msd[q_idx];
+ 
+ 	/* batch packets in send buffer if possible */
+ 	if (msdp->pkt)
+ 		msd_len = msdp->pkt->total_data_buflen;
+ 
+ 	try_batch = packet->is_data_pkt && msd_len > 0 && msdp->count <
+ 		    net_device->max_pkt;
+ 
+ 	if (try_batch && msd_len + pktlen + net_device->pkt_align <
+ 	    net_device->send_section_size) {
+ 		section_index = msdp->pkt->send_buf_index;
+ 
+ 	} else if (try_batch && msd_len + packet->rmsg_size <
+ 		   net_device->send_section_size) {
+ 		section_index = msdp->pkt->send_buf_index;
+ 		packet->cp_partial = true;
+ 
+ 	} else if (packet->is_data_pkt && pktlen + net_device->pkt_align <
+ 		   net_device->send_section_size) {
+ 		section_index = netvsc_get_next_send_section(net_device);
+ 		if (section_index != NETVSC_INVALID_INDEX) {
+ 				msd_send = msdp->pkt;
+ 				msdp->pkt = NULL;
+ 				msdp->count = 0;
+ 				msd_len = 0;
+ 		}
+ 	}
+ 
+ 	if (section_index != NETVSC_INVALID_INDEX) {
+ 		netvsc_copy_to_send_buf(net_device,
+ 					section_index, msd_len,
+ 					packet, rndis_msg, pb);
+ 
+ 		packet->send_buf_index = section_index;
+ 
+ 		if (packet->cp_partial) {
+ 			packet->page_buf_cnt -= packet->rmsg_pgcnt;
+ 			packet->total_data_buflen = msd_len + packet->rmsg_size;
+ 		} else {
+ 			packet->page_buf_cnt = 0;
+ 			packet->total_data_buflen += msd_len;
+ 		}
+ 
+ 		if (msdp->pkt)
+ 			dev_kfree_skb_any(skb);
+ 
+ 		if (packet->xmit_more && !packet->cp_partial) {
+ 			msdp->pkt = packet;
+ 			msdp->count++;
+ 		} else {
+ 			cur_send = packet;
+ 			msdp->pkt = NULL;
+ 			msdp->count = 0;
+ 		}
+ 	} else {
+ 		msd_send = msdp->pkt;
+ 		msdp->pkt = NULL;
+ 		msdp->count = 0;
+ 		cur_send = packet;
+ 	}
+ 
+ 	if (msd_send) {
+ 		m_ret = netvsc_send_pkt(msd_send, net_device, pb, skb);
+ 
+ 		if (m_ret != 0) {
+ 			netvsc_free_send_slot(net_device,
+ 					      msd_send->send_buf_index);
+ 			dev_kfree_skb_any(skb);
+ 		}
+ 	}
+ 
+ 	if (cur_send)
+ 		ret = netvsc_send_pkt(cur_send, net_device, pb, skb);
+ 
+ 	if (ret != 0 && section_index != NETVSC_INVALID_INDEX)
+ 		netvsc_free_send_slot(net_device, section_index);
+ 
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  	return ret;
  }
  
diff --cc drivers/net/hyperv/netvsc_drv.c
index 56b76b7b9a27,c1078a62a231..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -270,19 -276,9 +270,22 @@@ static u16 netvsc_select_queue(struct n
  	return q_idx;
  }
  
++<<<<<<< HEAD
 +static void netvsc_xmit_completion(void *context)
 +{
 +	struct hv_netvsc_packet *packet = (struct hv_netvsc_packet *)context;
 +	struct sk_buff *skb = (struct sk_buff *)
 +		(unsigned long)packet->send_completion_tid;
 +	u32 index = packet->send_buf_index;
 +
 +	kfree(packet);
 +
 +	if (skb && (index == NETVSC_INVALID_INDEX))
 +		dev_kfree_skb_any(skb);
 +}
 +
++=======
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  static u32 fill_pg_buf(struct page *page, u32 offset, u32 len,
  			struct hv_page_buffer *pb)
  {
@@@ -461,14 -481,12 +464,18 @@@ static int netvsc_start_xmit(struct sk_
  	packet->is_data_pkt = true;
  	packet->total_data_buflen = skb->len;
  
 -	rndis_msg = (struct rndis_message *)skb->head;
 -
 -	memset(rndis_msg, 0, RNDIS_AND_PPI_SIZE);
 +	packet->rndis_msg = (struct rndis_message *)((unsigned long)packet +
 +				sizeof(struct hv_netvsc_packet) +
 +				(num_data_pgs * sizeof(struct hv_page_buffer)));
  
  	/* Set the completion routine */
++<<<<<<< HEAD
 +	packet->send_completion = netvsc_xmit_completion;
 +	packet->send_completion_ctx = packet;
 +	packet->send_completion_tid = (unsigned long)skb;
++=======
+ 	packet->completion_func = 1;
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  
  	isvlan = packet->vlan_tci & VLAN_TAG_PRESENT;
  
@@@ -595,9 -612,10 +602,14 @@@ do_send
  	rndis_msg->msg_len += rndis_msg_size;
  	packet->total_data_buflen = rndis_msg->msg_len;
  	packet->page_buf_cnt = init_page_array(rndis_msg, rndis_msg_size,
 -					       skb, packet, &pb);
 +					skb, &packet->page_buf[0]);
  
++<<<<<<< HEAD
 +	ret = netvsc_send(net_device_ctx->device_ctx, packet);
++=======
+ 	ret = netvsc_send(net_device_ctx->device_ctx, packet,
+ 			  rndis_msg, &pb, skb);
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  
  drop:
  	if (ret == 0) {
diff --cc drivers/net/hyperv/rndis_filter.c
index 4f78abd49222,53139f7efcb9..000000000000
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@@ -224,20 -226,21 +224,24 @@@ static int rndis_filter_send_request(st
  		(unsigned long)&req->request_msg & (PAGE_SIZE - 1);
  
  	/* Add one page_buf when request_msg crossing page boundary */
 -	if (pb[0].offset + pb[0].len > PAGE_SIZE) {
 +	if (packet->page_buf[0].offset + packet->page_buf[0].len > PAGE_SIZE) {
  		packet->page_buf_cnt++;
 -		pb[0].len = PAGE_SIZE -
 -			pb[0].offset;
 -		pb[1].pfn = virt_to_phys((void *)&req->request_msg
 -			+ pb[0].len) >> PAGE_SHIFT;
 -		pb[1].offset = 0;
 -		pb[1].len = req->request_msg.msg_len -
 -			pb[0].len;
 +		packet->page_buf[0].len = PAGE_SIZE -
 +			packet->page_buf[0].offset;
 +		packet->page_buf[1].pfn = virt_to_phys((void *)&req->request_msg
 +			+ packet->page_buf[0].len) >> PAGE_SHIFT;
 +		packet->page_buf[1].offset = 0;
 +		packet->page_buf[1].len = req->request_msg.msg_len -
 +			packet->page_buf[0].len;
  	}
  
 -	packet->completion_func = 0;
 -	packet->xmit_more = false;
 +	packet->send_completion = NULL;
  
++<<<<<<< HEAD
 +	ret = netvsc_send(dev->net_dev->dev, packet);
++=======
+ 	ret = netvsc_send(dev->net_dev->dev, packet, NULL, &pb, NULL);
++>>>>>>> 3a3d9a0a731a (hv_netvsc: Eliminate send_completion_tid from struct hv_netvsc_packet)
  	return ret;
  }
  
* Unmerged path drivers/net/hyperv/hyperv_net.h
* Unmerged path drivers/net/hyperv/netvsc.c
* Unmerged path drivers/net/hyperv/netvsc_drv.c
* Unmerged path drivers/net/hyperv/rndis_filter.c
