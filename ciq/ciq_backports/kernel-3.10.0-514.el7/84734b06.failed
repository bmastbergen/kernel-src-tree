perf hists browser: Zoom in/out for processor socket

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kan Liang <kan.liang@intel.com>
commit 84734b06b63093cd44533f4caa43d4452fb11ec3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/84734b06.failed

Currently, users can zoom in/out for threads and dso in 'perf top' and
'perf report'.

This patch extends it for the processor sockets.

'S' is the short key to zoom into current Processor Socket.

	Signed-off-by: Kan Liang <kan.liang@intel.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1441377946-44429-4-git-send-email-kan.liang@intel.com
[ - Made it elide the Socket column when zooming into it,
    just like with the other zoom ops;
  - Make it use browser->pstack, to unzoom level by level;
  - Rename 'socket' variables to 'socket_id' to make it build on
    older systems where it shadows a global glibc declaration ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 84734b06b63093cd44533f4caa43d4452fb11ec3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-report.c
#	tools/perf/ui/browsers/hists.c
#	tools/perf/util/hist.c
diff --cc tools/perf/builtin-report.c
index f301e865001f,e4e3f1432622..000000000000
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@@ -286,6 -287,7 +286,10 @@@ static size_t hists__fprintf_nr_sample_
  	struct perf_evsel *evsel = hists_to_evsel(hists);
  	char buf[512];
  	size_t size = sizeof(buf);
++<<<<<<< HEAD
++=======
+ 	int socked_id = hists->socket_filter;
++>>>>>>> 84734b06b630 (perf hists browser: Zoom in/out for processor socket)
  
  	if (symbol_conf.filter_relative) {
  		nr_samples = hists->stats.nr_non_filtered_samples;
@@@ -321,6 -328,10 +325,13 @@@
  		ret += fprintf(fp, "\n# Sort order   : %s", sort_order ? : default_mem_sort_order);
  	} else
  		ret += fprintf(fp, "\n# Event count (approx.): %" PRIu64, nr_events);
++<<<<<<< HEAD
++=======
+ 
+ 	if (socked_id > -1)
+ 		ret += fprintf(fp, "\n# Processor Socket: %d", socked_id);
+ 
++>>>>>>> 84734b06b630 (perf hists browser: Zoom in/out for processor socket)
  	return ret + fprintf(fp, "\n#\n");
  }
  
diff --cc tools/perf/ui/browsers/hists.c
index 4d15f0925a18,380e9080991e..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -1261,6 -1261,7 +1261,10 @@@ static int hists__browser_title(struct 
  	int printed;
  	const struct dso *dso = hists->dso_filter;
  	const struct thread *thread = hists->thread_filter;
++<<<<<<< HEAD
++=======
+ 	int socket_id = hists->socket_filter;
++>>>>>>> 84734b06b630 (perf hists browser: Zoom in/out for processor socket)
  	unsigned long nr_samples = hists->stats.nr_events[PERF_RECORD_SAMPLE];
  	u64 nr_events = hists->stats.total_period;
  	struct perf_evsel *evsel = hists_to_evsel(hists);
@@@ -1309,6 -1315,9 +1313,12 @@@
  	if (dso)
  		printed += scnprintf(bf + printed, size - printed,
  				    ", DSO: %s", dso->short_name);
++<<<<<<< HEAD
++=======
+ 	if (socket_id > -1)
+ 		printed += scnprintf(bf + printed, size - printed,
+ 				    ", Processor Socket: %d", socket_id);
++>>>>>>> 84734b06b630 (perf hists browser: Zoom in/out for processor socket)
  	if (!is_report_browser(hbt)) {
  		struct perf_top *top = hbt->arg;
  
@@@ -1963,9 -2017,10 +2018,16 @@@ skip_annotation
  					  &options[nr_options], dso);
  		nr_options += add_map_opt(browser, &actions[nr_options],
  					  &options[nr_options],
++<<<<<<< HEAD
 +					  browser->selection ?
 +						browser->selection->map : NULL);
 +
++=======
+ 					  browser->selection->map);
+ 		nr_options += add_socket_opt(browser, &actions[nr_options],
+ 					     &options[nr_options],
+ 					     socked_id);
++>>>>>>> 84734b06b630 (perf hists browser: Zoom in/out for processor socket)
  		/* perf script support */
  		if (browser->he_selection) {
  			nr_options += add_script_opt(browser,
diff --cc tools/perf/util/hist.c
index 5c7cab6b7767,b3567a25f0c4..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -1286,6 -1298,37 +1286,40 @@@ void hists__filter_by_symbol(struct his
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static bool hists__filter_entry_by_socket(struct hists *hists,
+ 					  struct hist_entry *he)
+ {
+ 	if ((hists->socket_filter > -1) &&
+ 	    (he->socket != hists->socket_filter)) {
+ 		he->filtered |= (1 << HIST_FILTER__SOCKET);
+ 		return true;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ void hists__filter_by_socket(struct hists *hists)
+ {
+ 	struct rb_node *nd;
+ 
+ 	hists->stats.nr_non_filtered_samples = 0;
+ 
+ 	hists__reset_filter_stats(hists);
+ 	hists__reset_col_len(hists);
+ 
+ 	for (nd = rb_first(&hists->entries); nd; nd = rb_next(nd)) {
+ 		struct hist_entry *h = rb_entry(nd, struct hist_entry, rb_node);
+ 
+ 		if (hists__filter_entry_by_socket(hists, h))
+ 			continue;
+ 
+ 		hists__remove_entry_filter(hists, h, HIST_FILTER__SOCKET);
+ 	}
+ }
+ 
++>>>>>>> 84734b06b630 (perf hists browser: Zoom in/out for processor socket)
  void events_stats__inc(struct events_stats *stats, u32 type)
  {
  	++stats->nr_events[0];
* Unmerged path tools/perf/builtin-report.c
* Unmerged path tools/perf/ui/browsers/hists.c
* Unmerged path tools/perf/util/hist.c
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index de6d58e7f0d5..62cdbd489b1f 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -144,6 +144,7 @@ size_t perf_evlist__fprintf_nr_events(struct perf_evlist *evlist, FILE *fp);
 void hists__filter_by_dso(struct hists *hists);
 void hists__filter_by_thread(struct hists *hists);
 void hists__filter_by_symbol(struct hists *hists);
+void hists__filter_by_socket(struct hists *hists);
 
 static inline bool hists__has_filter(struct hists *hists)
 {
