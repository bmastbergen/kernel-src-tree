crypto: x86/sha256_ssse3 - move SHA-224/256 SSSE3 implementation to base layer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [crypto] x86/sha256_ssse3 - move SHA-224/256 SSSE3 implementation to base layer (Herbert Xu) [1267049]
Rebuild_FUZZ: 94.59%
commit-author Ard Biesheuvel <ard.biesheuvel@linaro.org>
commit 1631030ae63aef0a54fe08813e0f4e26c8ef9c78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1631030a.failed

This removes all the boilerplate from the existing implementation,
and replaces it with calls into the base layer. It also changes the
prototypes of the core asm functions to be compatible with the base
prototype

  void (sha256_block_fn)(struct sha256_state *sst, u8 const *src, int blocks)

so that they can be passed to the base layer directly.

	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 1631030ae63aef0a54fe08813e0f4e26c8ef9c78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/crypto/sha256_ssse3_glue.c
diff --cc arch/x86/crypto/sha256_ssse3_glue.c
index 38d835b71fbb,ccc338881ee8..000000000000
--- a/arch/x86/crypto/sha256_ssse3_glue.c
+++ b/arch/x86/crypto/sha256_ssse3_glue.c
@@@ -129,73 -94,16 +94,77 @@@ static int sha256_ssse3_finup(struct sh
  /* Add padding and return the message digest. */
  static int sha256_ssse3_final(struct shash_desc *desc, u8 *out)
  {
++<<<<<<< HEAD
 +	struct sha256_state *sctx = shash_desc_ctx(desc);
 +	unsigned int i, index, padlen;
 +	__be32 *dst = (__be32 *)out;
 +	__be64 bits;
 +	static const u8 padding[SHA256_BLOCK_SIZE] = { 0x80, };
 +
 +	bits = cpu_to_be64(sctx->count << 3);
 +
 +	/* Pad out to 56 mod 64 and append length */
 +	index = sctx->count % SHA256_BLOCK_SIZE;
 +	padlen = (index < 56) ? (56 - index) : ((SHA256_BLOCK_SIZE+56)-index);
 +
 +	if (!irq_fpu_usable()) {
 +		crypto_sha256_update(desc, padding, padlen);
 +		crypto_sha256_update(desc, (const u8 *)&bits, sizeof(bits));
 +	} else {
 +		kernel_fpu_begin();
 +		/* We need to fill a whole block for __sha256_ssse3_update() */
 +		if (padlen <= 56) {
 +			sctx->count += padlen;
 +			memcpy(sctx->buf + index, padding, padlen);
 +		} else {
 +			__sha256_ssse3_update(desc, padding, padlen, index);
 +		}
 +		__sha256_ssse3_update(desc, (const u8 *)&bits,
 +					sizeof(bits), 56);
 +		kernel_fpu_end();
 +	}
 +
 +	/* Store state in digest */
 +	for (i = 0; i < 8; i++)
 +		dst[i] = cpu_to_be32(sctx->state[i]);
 +
 +	/* Wipe context */
 +	memset(sctx, 0, sizeof(*sctx));
 +
 +	return 0;
 +}
 +
 +static int sha256_ssse3_export(struct shash_desc *desc, void *out)
 +{
 +	struct sha256_state *sctx = shash_desc_ctx(desc);
 +
 +	memcpy(out, sctx, sizeof(*sctx));
 +
 +	return 0;
 +}
 +
 +static int sha256_ssse3_import(struct shash_desc *desc, const void *in)
 +{
 +	struct sha256_state *sctx = shash_desc_ctx(desc);
 +
 +	memcpy(sctx, in, sizeof(*sctx));
 +
 +	return 0;
 +}
 +
 +static struct shash_alg alg = {
++=======
+ 	return sha256_ssse3_finup(desc, NULL, 0, out);
+ }
+ 
+ static struct shash_alg algs[] = { {
++>>>>>>> 1631030ae63a (crypto: x86/sha256_ssse3 - move SHA-224/256 SSSE3 implementation to base layer)
  	.digestsize	=	SHA256_DIGEST_SIZE,
- 	.init		=	sha256_ssse3_init,
+ 	.init		=	sha256_base_init,
  	.update		=	sha256_ssse3_update,
  	.final		=	sha256_ssse3_final,
- 	.export		=	sha256_ssse3_export,
- 	.import		=	sha256_ssse3_import,
+ 	.finup		=	sha256_ssse3_finup,
  	.descsize	=	sizeof(struct sha256_state),
- 	.statesize	=	sizeof(struct sha256_state),
  	.base		=	{
  		.cra_name	=	"sha256",
  		.cra_driver_name =	"sha256-ssse3",
@@@ -204,7 -112,22 +173,26 @@@
  		.cra_blocksize	=	SHA256_BLOCK_SIZE,
  		.cra_module	=	THIS_MODULE,
  	}
++<<<<<<< HEAD
 +};
++=======
+ }, {
+ 	.digestsize	=	SHA224_DIGEST_SIZE,
+ 	.init		=	sha224_base_init,
+ 	.update		=	sha256_ssse3_update,
+ 	.final		=	sha256_ssse3_final,
+ 	.finup		=	sha256_ssse3_finup,
+ 	.descsize	=	sizeof(struct sha256_state),
+ 	.base		=	{
+ 		.cra_name	=	"sha224",
+ 		.cra_driver_name =	"sha224-ssse3",
+ 		.cra_priority	=	150,
+ 		.cra_flags	=	CRYPTO_ALG_TYPE_SHASH,
+ 		.cra_blocksize	=	SHA224_BLOCK_SIZE,
+ 		.cra_module	=	THIS_MODULE,
+ 	}
+ } };
++>>>>>>> 1631030ae63a (crypto: x86/sha256_ssse3 - move SHA-224/256 SSSE3 implementation to base layer)
  
  #ifdef CONFIG_AS_AVX
  static bool __init avx_usable(void)
diff --git a/arch/x86/crypto/sha256-avx-asm.S b/arch/x86/crypto/sha256-avx-asm.S
index 642f15687a0a..92b3b5d75ba9 100644
--- a/arch/x86/crypto/sha256-avx-asm.S
+++ b/arch/x86/crypto/sha256-avx-asm.S
@@ -96,10 +96,10 @@ SHUF_DC00 = %xmm12      # shuffle xDxC -> DC00
 BYTE_FLIP_MASK = %xmm13
 
 NUM_BLKS = %rdx   # 3rd arg
-CTX = %rsi        # 2nd arg
-INP = %rdi        # 1st arg
+INP = %rsi        # 2nd arg
+CTX = %rdi        # 1st arg
 
-SRND = %rdi       # clobbers INP
+SRND = %rsi       # clobbers INP
 c = %ecx
 d = %r8d
 e = %edx
@@ -342,8 +342,8 @@ a = TMP_
 
 ########################################################################
 ## void sha256_transform_avx(void *input_data, UINT32 digest[8], UINT64 num_blks)
-## arg 1 : pointer to input data
-## arg 2 : pointer to digest
+## arg 1 : pointer to digest
+## arg 2 : pointer to input data
 ## arg 3 : Num blocks
 ########################################################################
 .text
diff --git a/arch/x86/crypto/sha256-avx2-asm.S b/arch/x86/crypto/sha256-avx2-asm.S
index 9e86944c539d..570ec5ec62d7 100644
--- a/arch/x86/crypto/sha256-avx2-asm.S
+++ b/arch/x86/crypto/sha256-avx2-asm.S
@@ -91,12 +91,12 @@ BYTE_FLIP_MASK = %ymm13
 X_BYTE_FLIP_MASK = %xmm13 # XMM version of BYTE_FLIP_MASK
 
 NUM_BLKS = %rdx	# 3rd arg
-CTX	= %rsi  # 2nd arg
-INP	= %rdi	# 1st arg
+INP	= %rsi  # 2nd arg
+CTX	= %rdi	# 1st arg
 c	= %ecx
 d	= %r8d
 e       = %edx	# clobbers NUM_BLKS
-y3	= %edi	# clobbers INP
+y3	= %esi	# clobbers INP
 
 
 TBL	= %rbp
@@ -523,8 +523,8 @@ STACK_SIZE	= _RSP      + _RSP_SIZE
 
 ########################################################################
 ## void sha256_transform_rorx(void *input_data, UINT32 digest[8], UINT64 num_blks)
-## arg 1 : pointer to input data
-## arg 2 : pointer to digest
+## arg 1 : pointer to digest
+## arg 2 : pointer to input data
 ## arg 3 : Num blocks
 ########################################################################
 .text
diff --git a/arch/x86/crypto/sha256-ssse3-asm.S b/arch/x86/crypto/sha256-ssse3-asm.S
index f833b74d902b..2cedc44e8121 100644
--- a/arch/x86/crypto/sha256-ssse3-asm.S
+++ b/arch/x86/crypto/sha256-ssse3-asm.S
@@ -88,10 +88,10 @@ SHUF_DC00 = %xmm11      # shuffle xDxC -> DC00
 BYTE_FLIP_MASK = %xmm12
 
 NUM_BLKS = %rdx   # 3rd arg
-CTX = %rsi        # 2nd arg
-INP = %rdi        # 1st arg
+INP = %rsi        # 2nd arg
+CTX = %rdi        # 1st arg
 
-SRND = %rdi       # clobbers INP
+SRND = %rsi       # clobbers INP
 c = %ecx
 d = %r8d
 e = %edx
@@ -348,8 +348,8 @@ a = TMP_
 
 ########################################################################
 ## void sha256_transform_ssse3(void *input_data, UINT32 digest[8], UINT64 num_blks)
-## arg 1 : pointer to input data
-## arg 2 : pointer to digest
+## arg 1 : pointer to digest
+## arg 2 : pointer to input data
 ## arg 3 : Num blocks
 ########################################################################
 .text
* Unmerged path arch/x86/crypto/sha256_ssse3_glue.c
