x86/cpu: Unify CPU family, model, stepping calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] cpu: Unify CPU family, model, stepping calculation (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 96.15%
commit-author Borislav Petkov <bp@suse.de>
commit 99f925ce927e4ac313d9af8bd1bf55796e2cdcb1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/99f925ce.failed

Add generic functions which calc family, model and stepping from
the CPUID_1.EAX leaf and stick them into the library we have.

Rename those which do call CPUID with the prefix "x86_cpuid" as
suggested by Paolo Bonzini.

No functionality change.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1448273546-2567-2-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 99f925ce927e4ac313d9af8bd1bf55796e2cdcb1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/microcode.h
#	arch/x86/kernel/cpu/microcode/core.c
#	arch/x86/kernel/cpu/microcode/intel.c
#	arch/x86/lib/Makefile
diff --cc arch/x86/include/asm/microcode.h
index 64dc362506b7,1e1b07a5a738..000000000000
--- a/arch/x86/include/asm/microcode.h
+++ b/arch/x86/include/asm/microcode.h
@@@ -1,6 -1,9 +1,12 @@@
  #ifndef _ASM_X86_MICROCODE_H
  #define _ASM_X86_MICROCODE_H
  
++<<<<<<< HEAD
++=======
+ #include <asm/cpu.h>
+ #include <linux/earlycpio.h>
+ 
++>>>>>>> 99f925ce927e (x86/cpu: Unify CPU family, model, stepping calculation)
  #define native_rdmsr(msr, val1, val2)			\
  do {							\
  	u64 __val = native_read_msr((msr));		\
@@@ -73,8 -81,55 +79,59 @@@ static inline struct microcode_ops * __
  static inline void __exit exit_amd_microcode(void) {}
  #endif
  
 +#ifdef CONFIG_MICROCODE_EARLY
  #define MAX_UCODE_COUNT 128
++<<<<<<< HEAD
++=======
+ 
+ #define QCHAR(a, b, c, d) ((a) + ((b) << 8) + ((c) << 16) + ((d) << 24))
+ #define CPUID_INTEL1 QCHAR('G', 'e', 'n', 'u')
+ #define CPUID_INTEL2 QCHAR('i', 'n', 'e', 'I')
+ #define CPUID_INTEL3 QCHAR('n', 't', 'e', 'l')
+ #define CPUID_AMD1 QCHAR('A', 'u', 't', 'h')
+ #define CPUID_AMD2 QCHAR('e', 'n', 't', 'i')
+ #define CPUID_AMD3 QCHAR('c', 'A', 'M', 'D')
+ 
+ #define CPUID_IS(a, b, c, ebx, ecx, edx)	\
+ 		(!((ebx ^ (a))|(edx ^ (b))|(ecx ^ (c))))
+ 
+ /*
+  * In early loading microcode phase on BSP, boot_cpu_data is not set up yet.
+  * x86_cpuid_vendor() gets vendor id for BSP.
+  *
+  * In 32 bit AP case, accessing boot_cpu_data needs linear address. To simplify
+  * coding, we still use x86_cpuid_vendor() to get vendor id for AP.
+  *
+  * x86_cpuid_vendor() gets vendor information directly from CPUID.
+  */
+ static inline int x86_cpuid_vendor(void)
+ {
+ 	u32 eax = 0x00000000;
+ 	u32 ebx, ecx = 0, edx;
+ 
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 
+ 	if (CPUID_IS(CPUID_INTEL1, CPUID_INTEL2, CPUID_INTEL3, ebx, ecx, edx))
+ 		return X86_VENDOR_INTEL;
+ 
+ 	if (CPUID_IS(CPUID_AMD1, CPUID_AMD2, CPUID_AMD3, ebx, ecx, edx))
+ 		return X86_VENDOR_AMD;
+ 
+ 	return X86_VENDOR_UNKNOWN;
+ }
+ 
+ static inline unsigned int x86_cpuid_family(void)
+ {
+ 	u32 eax = 0x00000001;
+ 	u32 ebx, ecx = 0, edx;
+ 
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 
+ 	return x86_family(eax);
+ }
+ 
+ #ifdef CONFIG_MICROCODE
++>>>>>>> 99f925ce927e (x86/cpu: Unify CPU family, model, stepping calculation)
  extern void __init load_ucode_bsp(void);
  extern void load_ucode_ap(void);
  extern int __init save_microcode_in_initrd(void);
diff --cc arch/x86/kernel/cpu/microcode/core.c
index 9ca8f8b3983f,3aaffb601c91..000000000000
--- a/arch/x86/kernel/cpu/microcode/core.c
+++ b/arch/x86/kernel/cpu/microcode/core.c
@@@ -68,6 -79,150 +68,153 @@@ struct cpu_info_ctx 
  	int			err;
  };
  
++<<<<<<< HEAD
++=======
+ static bool __init check_loader_disabled_bsp(void)
+ {
+ #ifdef CONFIG_X86_32
+ 	const char *cmdline = (const char *)__pa_nodebug(boot_command_line);
+ 	const char *opt	    = "dis_ucode_ldr";
+ 	const char *option  = (const char *)__pa_nodebug(opt);
+ 	bool *res = (bool *)__pa_nodebug(&dis_ucode_ldr);
+ 
+ #else /* CONFIG_X86_64 */
+ 	const char *cmdline = boot_command_line;
+ 	const char *option  = "dis_ucode_ldr";
+ 	bool *res = &dis_ucode_ldr;
+ #endif
+ 
+ 	if (cmdline_find_option_bool(cmdline, option))
+ 		*res = true;
+ 
+ 	return *res;
+ }
+ 
+ extern struct builtin_fw __start_builtin_fw[];
+ extern struct builtin_fw __end_builtin_fw[];
+ 
+ bool get_builtin_firmware(struct cpio_data *cd, const char *name)
+ {
+ #ifdef CONFIG_FW_LOADER
+ 	struct builtin_fw *b_fw;
+ 
+ 	for (b_fw = __start_builtin_fw; b_fw != __end_builtin_fw; b_fw++) {
+ 		if (!strcmp(name, b_fw->name)) {
+ 			cd->size = b_fw->size;
+ 			cd->data = b_fw->data;
+ 			return true;
+ 		}
+ 	}
+ #endif
+ 	return false;
+ }
+ 
+ void __init load_ucode_bsp(void)
+ {
+ 	int vendor;
+ 	unsigned int family;
+ 
+ 	if (check_loader_disabled_bsp())
+ 		return;
+ 
+ 	if (!have_cpuid_p())
+ 		return;
+ 
+ 	vendor = x86_cpuid_vendor();
+ 	family = x86_cpuid_family();
+ 
+ 	switch (vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (family >= 6)
+ 			load_ucode_intel_bsp();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (family >= 0x10)
+ 			load_ucode_amd_bsp(family);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ static bool check_loader_disabled_ap(void)
+ {
+ #ifdef CONFIG_X86_32
+ 	return *((bool *)__pa_nodebug(&dis_ucode_ldr));
+ #else
+ 	return dis_ucode_ldr;
+ #endif
+ }
+ 
+ void load_ucode_ap(void)
+ {
+ 	int vendor, family;
+ 
+ 	if (check_loader_disabled_ap())
+ 		return;
+ 
+ 	if (!have_cpuid_p())
+ 		return;
+ 
+ 	vendor = x86_cpuid_vendor();
+ 	family = x86_cpuid_family();
+ 
+ 	switch (vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (family >= 6)
+ 			load_ucode_intel_ap();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (family >= 0x10)
+ 			load_ucode_amd_ap();
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ int __init save_microcode_in_initrd(void)
+ {
+ 	struct cpuinfo_x86 *c = &boot_cpu_data;
+ 
+ 	switch (c->x86_vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (c->x86 >= 6)
+ 			save_microcode_in_initrd_intel();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (c->x86 >= 0x10)
+ 			save_microcode_in_initrd_amd();
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ void reload_early_microcode(void)
+ {
+ 	int vendor, family;
+ 
+ 	vendor = x86_cpuid_vendor();
+ 	family = x86_cpuid_family();
+ 
+ 	switch (vendor) {
+ 	case X86_VENDOR_INTEL:
+ 		if (family >= 6)
+ 			reload_ucode_intel();
+ 		break;
+ 	case X86_VENDOR_AMD:
+ 		if (family >= 0x10)
+ 			reload_ucode_amd();
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 99f925ce927e (x86/cpu: Unify CPU family, model, stepping calculation)
  static void collect_cpu_info_local(void *arg)
  {
  	struct cpu_info_ctx *ctx = arg;
diff --cc arch/x86/kernel/cpu/microcode/intel.c
index 865d78872256,ee81c544ee0d..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel.c
+++ b/arch/x86/kernel/cpu/microcode/intel.c
@@@ -20,11 -35,769 +20,773 @@@
  
  #include <asm/microcode_intel.h>
  #include <asm/processor.h>
 -#include <asm/tlbflush.h>
 -#include <asm/setup.h>
  #include <asm/msr.h>
  
++<<<<<<< HEAD
 +MODULE_DESCRIPTION("Microcode Update Driver");
 +MODULE_AUTHOR("Tigran Aivazian <tigran@aivazian.fsnet.co.uk>");
 +MODULE_LICENSE("GPL");
++=======
+ static unsigned long mc_saved_in_initrd[MAX_UCODE_COUNT];
+ static struct mc_saved_data {
+ 	unsigned int mc_saved_count;
+ 	struct microcode_intel **mc_saved;
+ } mc_saved_data;
+ 
+ static enum ucode_state
+ load_microcode_early(struct microcode_intel **saved,
+ 		     unsigned int num_saved, struct ucode_cpu_info *uci)
+ {
+ 	struct microcode_intel *ucode_ptr, *new_mc = NULL;
+ 	struct microcode_header_intel *mc_hdr;
+ 	int new_rev, ret, i;
+ 
+ 	new_rev = uci->cpu_sig.rev;
+ 
+ 	for (i = 0; i < num_saved; i++) {
+ 		ucode_ptr = saved[i];
+ 		mc_hdr	  = (struct microcode_header_intel *)ucode_ptr;
+ 
+ 		ret = has_newer_microcode(ucode_ptr,
+ 					  uci->cpu_sig.sig,
+ 					  uci->cpu_sig.pf,
+ 					  new_rev);
+ 		if (!ret)
+ 			continue;
+ 
+ 		new_rev = mc_hdr->rev;
+ 		new_mc  = ucode_ptr;
+ 	}
+ 
+ 	if (!new_mc)
+ 		return UCODE_NFOUND;
+ 
+ 	uci->mc = (struct microcode_intel *)new_mc;
+ 	return UCODE_OK;
+ }
+ 
+ static inline void
+ copy_initrd_ptrs(struct microcode_intel **mc_saved, unsigned long *initrd,
+ 		  unsigned long off, int num_saved)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < num_saved; i++)
+ 		mc_saved[i] = (struct microcode_intel *)(initrd[i] + off);
+ }
+ 
+ #ifdef CONFIG_X86_32
+ static void
+ microcode_phys(struct microcode_intel **mc_saved_tmp,
+ 	       struct mc_saved_data *mc_saved_data)
+ {
+ 	int i;
+ 	struct microcode_intel ***mc_saved;
+ 
+ 	mc_saved = (struct microcode_intel ***)
+ 		   __pa_nodebug(&mc_saved_data->mc_saved);
+ 	for (i = 0; i < mc_saved_data->mc_saved_count; i++) {
+ 		struct microcode_intel *p;
+ 
+ 		p = *(struct microcode_intel **)
+ 			__pa_nodebug(mc_saved_data->mc_saved + i);
+ 		mc_saved_tmp[i] = (struct microcode_intel *)__pa_nodebug(p);
+ 	}
+ }
+ #endif
+ 
+ static enum ucode_state
+ load_microcode(struct mc_saved_data *mc_saved_data, unsigned long *initrd,
+ 	       unsigned long initrd_start, struct ucode_cpu_info *uci)
+ {
+ 	struct microcode_intel *mc_saved_tmp[MAX_UCODE_COUNT];
+ 	unsigned int count = mc_saved_data->mc_saved_count;
+ 
+ 	if (!mc_saved_data->mc_saved) {
+ 		copy_initrd_ptrs(mc_saved_tmp, initrd, initrd_start, count);
+ 
+ 		return load_microcode_early(mc_saved_tmp, count, uci);
+ 	} else {
+ #ifdef CONFIG_X86_32
+ 		microcode_phys(mc_saved_tmp, mc_saved_data);
+ 		return load_microcode_early(mc_saved_tmp, count, uci);
+ #else
+ 		return load_microcode_early(mc_saved_data->mc_saved,
+ 						    count, uci);
+ #endif
+ 	}
+ }
+ 
+ /*
+  * Given CPU signature and a microcode patch, this function finds if the
+  * microcode patch has matching family and model with the CPU.
+  */
+ static enum ucode_state
+ matching_model_microcode(struct microcode_header_intel *mc_header,
+ 			unsigned long sig)
+ {
+ 	unsigned int fam, model;
+ 	unsigned int fam_ucode, model_ucode;
+ 	struct extended_sigtable *ext_header;
+ 	unsigned long total_size = get_totalsize(mc_header);
+ 	unsigned long data_size = get_datasize(mc_header);
+ 	int ext_sigcount, i;
+ 	struct extended_signature *ext_sig;
+ 
+ 	fam   = x86_family(sig);
+ 	model = x86_model(sig);
+ 
+ 	fam_ucode   = x86_family(mc_header->sig);
+ 	model_ucode = x86_model(mc_header->sig);
+ 
+ 	if (fam == fam_ucode && model == model_ucode)
+ 		return UCODE_OK;
+ 
+ 	/* Look for ext. headers: */
+ 	if (total_size <= data_size + MC_HEADER_SIZE)
+ 		return UCODE_NFOUND;
+ 
+ 	ext_header   = (void *) mc_header + data_size + MC_HEADER_SIZE;
+ 	ext_sig      = (void *)ext_header + EXT_HEADER_SIZE;
+ 	ext_sigcount = ext_header->count;
+ 
+ 	for (i = 0; i < ext_sigcount; i++) {
+ 		fam_ucode   = x86_family(ext_sig->sig);
+ 		model_ucode = x86_model(ext_sig->sig);
+ 
+ 		if (fam == fam_ucode && model == model_ucode)
+ 			return UCODE_OK;
+ 
+ 		ext_sig++;
+ 	}
+ 	return UCODE_NFOUND;
+ }
+ 
+ static int
+ save_microcode(struct mc_saved_data *mc_saved_data,
+ 	       struct microcode_intel **mc_saved_src,
+ 	       unsigned int mc_saved_count)
+ {
+ 	int i, j;
+ 	struct microcode_intel **saved_ptr;
+ 	int ret;
+ 
+ 	if (!mc_saved_count)
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * Copy new microcode data.
+ 	 */
+ 	saved_ptr = kcalloc(mc_saved_count, sizeof(struct microcode_intel *), GFP_KERNEL);
+ 	if (!saved_ptr)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < mc_saved_count; i++) {
+ 		struct microcode_header_intel *mc_hdr;
+ 		struct microcode_intel *mc;
+ 		unsigned long size;
+ 
+ 		if (!mc_saved_src[i]) {
+ 			ret = -EINVAL;
+ 			goto err;
+ 		}
+ 
+ 		mc     = mc_saved_src[i];
+ 		mc_hdr = &mc->hdr;
+ 		size   = get_totalsize(mc_hdr);
+ 
+ 		saved_ptr[i] = kmalloc(size, GFP_KERNEL);
+ 		if (!saved_ptr[i]) {
+ 			ret = -ENOMEM;
+ 			goto err;
+ 		}
+ 
+ 		memcpy(saved_ptr[i], mc, size);
+ 	}
+ 
+ 	/*
+ 	 * Point to newly saved microcode.
+ 	 */
+ 	mc_saved_data->mc_saved = saved_ptr;
+ 	mc_saved_data->mc_saved_count = mc_saved_count;
+ 
+ 	return 0;
+ 
+ err:
+ 	for (j = 0; j <= i; j++)
+ 		kfree(saved_ptr[j]);
+ 	kfree(saved_ptr);
+ 
+ 	return ret;
+ }
+ 
+ /*
+  * A microcode patch in ucode_ptr is saved into mc_saved
+  * - if it has matching signature and newer revision compared to an existing
+  *   patch mc_saved.
+  * - or if it is a newly discovered microcode patch.
+  *
+  * The microcode patch should have matching model with CPU.
+  *
+  * Returns: The updated number @num_saved of saved microcode patches.
+  */
+ static unsigned int _save_mc(struct microcode_intel **mc_saved,
+ 			     u8 *ucode_ptr, unsigned int num_saved)
+ {
+ 	struct microcode_header_intel *mc_hdr, *mc_saved_hdr;
+ 	unsigned int sig, pf;
+ 	int found = 0, i;
+ 
+ 	mc_hdr = (struct microcode_header_intel *)ucode_ptr;
+ 
+ 	for (i = 0; i < num_saved; i++) {
+ 		mc_saved_hdr = (struct microcode_header_intel *)mc_saved[i];
+ 		sig	     = mc_saved_hdr->sig;
+ 		pf	     = mc_saved_hdr->pf;
+ 
+ 		if (!find_matching_signature(ucode_ptr, sig, pf))
+ 			continue;
+ 
+ 		found = 1;
+ 
+ 		if (mc_hdr->rev <= mc_saved_hdr->rev)
+ 			continue;
+ 
+ 		/*
+ 		 * Found an older ucode saved earlier. Replace it with
+ 		 * this newer one.
+ 		 */
+ 		mc_saved[i] = (struct microcode_intel *)ucode_ptr;
+ 		break;
+ 	}
+ 
+ 	/* Newly detected microcode, save it to memory. */
+ 	if (i >= num_saved && !found)
+ 		mc_saved[num_saved++] = (struct microcode_intel *)ucode_ptr;
+ 
+ 	return num_saved;
+ }
+ 
+ /*
+  * Get microcode matching with BSP's model. Only CPUs with the same model as
+  * BSP can stay in the platform.
+  */
+ static enum ucode_state __init
+ get_matching_model_microcode(int cpu, unsigned long start,
+ 			     void *data, size_t size,
+ 			     struct mc_saved_data *mc_saved_data,
+ 			     unsigned long *mc_saved_in_initrd,
+ 			     struct ucode_cpu_info *uci)
+ {
+ 	u8 *ucode_ptr = data;
+ 	unsigned int leftover = size;
+ 	enum ucode_state state = UCODE_OK;
+ 	unsigned int mc_size;
+ 	struct microcode_header_intel *mc_header;
+ 	struct microcode_intel *mc_saved_tmp[MAX_UCODE_COUNT];
+ 	unsigned int mc_saved_count = mc_saved_data->mc_saved_count;
+ 	int i;
+ 
+ 	while (leftover && mc_saved_count < ARRAY_SIZE(mc_saved_tmp)) {
+ 
+ 		if (leftover < sizeof(mc_header))
+ 			break;
+ 
+ 		mc_header = (struct microcode_header_intel *)ucode_ptr;
+ 
+ 		mc_size = get_totalsize(mc_header);
+ 		if (!mc_size || mc_size > leftover ||
+ 			microcode_sanity_check(ucode_ptr, 0) < 0)
+ 			break;
+ 
+ 		leftover -= mc_size;
+ 
+ 		/*
+ 		 * Since APs with same family and model as the BSP may boot in
+ 		 * the platform, we need to find and save microcode patches
+ 		 * with the same family and model as the BSP.
+ 		 */
+ 		if (matching_model_microcode(mc_header, uci->cpu_sig.sig) !=
+ 			 UCODE_OK) {
+ 			ucode_ptr += mc_size;
+ 			continue;
+ 		}
+ 
+ 		mc_saved_count = _save_mc(mc_saved_tmp, ucode_ptr, mc_saved_count);
+ 
+ 		ucode_ptr += mc_size;
+ 	}
+ 
+ 	if (leftover) {
+ 		state = UCODE_ERROR;
+ 		goto out;
+ 	}
+ 
+ 	if (mc_saved_count == 0) {
+ 		state = UCODE_NFOUND;
+ 		goto out;
+ 	}
+ 
+ 	for (i = 0; i < mc_saved_count; i++)
+ 		mc_saved_in_initrd[i] = (unsigned long)mc_saved_tmp[i] - start;
+ 
+ 	mc_saved_data->mc_saved_count = mc_saved_count;
+ out:
+ 	return state;
+ }
+ 
+ static int collect_cpu_info_early(struct ucode_cpu_info *uci)
+ {
+ 	unsigned int val[2];
+ 	unsigned int family, model;
+ 	struct cpu_signature csig;
+ 	unsigned int eax, ebx, ecx, edx;
+ 
+ 	csig.sig = 0;
+ 	csig.pf = 0;
+ 	csig.rev = 0;
+ 
+ 	memset(uci, 0, sizeof(*uci));
+ 
+ 	eax = 0x00000001;
+ 	ecx = 0;
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 	csig.sig = eax;
+ 
+ 	family = x86_family(csig.sig);
+ 	model  = x86_model(csig.sig);
+ 
+ 	if ((model >= 5) || (family > 6)) {
+ 		/* get processor flags from MSR 0x17 */
+ 		native_rdmsr(MSR_IA32_PLATFORM_ID, val[0], val[1]);
+ 		csig.pf = 1 << ((val[1] >> 18) & 7);
+ 	}
+ 	native_wrmsr(MSR_IA32_UCODE_REV, 0, 0);
+ 
+ 	/* As documented in the SDM: Do a CPUID 1 here */
+ 	sync_core();
+ 
+ 	/* get the current revision from MSR 0x8B */
+ 	native_rdmsr(MSR_IA32_UCODE_REV, val[0], val[1]);
+ 
+ 	csig.rev = val[1];
+ 
+ 	uci->cpu_sig = csig;
+ 	uci->valid = 1;
+ 
+ 	return 0;
+ }
+ 
+ static void show_saved_mc(void)
+ {
+ #ifdef DEBUG
+ 	int i, j;
+ 	unsigned int sig, pf, rev, total_size, data_size, date;
+ 	struct ucode_cpu_info uci;
+ 
+ 	if (mc_saved_data.mc_saved_count == 0) {
+ 		pr_debug("no microcode data saved.\n");
+ 		return;
+ 	}
+ 	pr_debug("Total microcode saved: %d\n", mc_saved_data.mc_saved_count);
+ 
+ 	collect_cpu_info_early(&uci);
+ 
+ 	sig = uci.cpu_sig.sig;
+ 	pf = uci.cpu_sig.pf;
+ 	rev = uci.cpu_sig.rev;
+ 	pr_debug("CPU: sig=0x%x, pf=0x%x, rev=0x%x\n", sig, pf, rev);
+ 
+ 	for (i = 0; i < mc_saved_data.mc_saved_count; i++) {
+ 		struct microcode_header_intel *mc_saved_header;
+ 		struct extended_sigtable *ext_header;
+ 		int ext_sigcount;
+ 		struct extended_signature *ext_sig;
+ 
+ 		mc_saved_header = (struct microcode_header_intel *)
+ 				  mc_saved_data.mc_saved[i];
+ 		sig = mc_saved_header->sig;
+ 		pf = mc_saved_header->pf;
+ 		rev = mc_saved_header->rev;
+ 		total_size = get_totalsize(mc_saved_header);
+ 		data_size = get_datasize(mc_saved_header);
+ 		date = mc_saved_header->date;
+ 
+ 		pr_debug("mc_saved[%d]: sig=0x%x, pf=0x%x, rev=0x%x, toal size=0x%x, date = %04x-%02x-%02x\n",
+ 			 i, sig, pf, rev, total_size,
+ 			 date & 0xffff,
+ 			 date >> 24,
+ 			 (date >> 16) & 0xff);
+ 
+ 		/* Look for ext. headers: */
+ 		if (total_size <= data_size + MC_HEADER_SIZE)
+ 			continue;
+ 
+ 		ext_header = (void *) mc_saved_header + data_size + MC_HEADER_SIZE;
+ 		ext_sigcount = ext_header->count;
+ 		ext_sig = (void *)ext_header + EXT_HEADER_SIZE;
+ 
+ 		for (j = 0; j < ext_sigcount; j++) {
+ 			sig = ext_sig->sig;
+ 			pf = ext_sig->pf;
+ 
+ 			pr_debug("\tExtended[%d]: sig=0x%x, pf=0x%x\n",
+ 				 j, sig, pf);
+ 
+ 			ext_sig++;
+ 		}
+ 
+ 	}
+ #endif
+ }
+ 
+ #ifdef CONFIG_HOTPLUG_CPU
+ static DEFINE_MUTEX(x86_cpu_microcode_mutex);
+ /*
+  * Save this mc into mc_saved_data. So it will be loaded early when a CPU is
+  * hot added or resumes.
+  *
+  * Please make sure this mc should be a valid microcode patch before calling
+  * this function.
+  */
+ int save_mc_for_early(u8 *mc)
+ {
+ 	struct microcode_intel *mc_saved_tmp[MAX_UCODE_COUNT];
+ 	unsigned int mc_saved_count_init;
+ 	unsigned int mc_saved_count;
+ 	struct microcode_intel **mc_saved;
+ 	int ret = 0;
+ 	int i;
+ 
+ 	/*
+ 	 * Hold hotplug lock so mc_saved_data is not accessed by a CPU in
+ 	 * hotplug.
+ 	 */
+ 	mutex_lock(&x86_cpu_microcode_mutex);
+ 
+ 	mc_saved_count_init = mc_saved_data.mc_saved_count;
+ 	mc_saved_count = mc_saved_data.mc_saved_count;
+ 	mc_saved = mc_saved_data.mc_saved;
+ 
+ 	if (mc_saved && mc_saved_count)
+ 		memcpy(mc_saved_tmp, mc_saved,
+ 		       mc_saved_count * sizeof(struct microcode_intel *));
+ 	/*
+ 	 * Save the microcode patch mc in mc_save_tmp structure if it's a newer
+ 	 * version.
+ 	 */
+ 	mc_saved_count = _save_mc(mc_saved_tmp, mc, mc_saved_count);
+ 
+ 	/*
+ 	 * Save the mc_save_tmp in global mc_saved_data.
+ 	 */
+ 	ret = save_microcode(&mc_saved_data, mc_saved_tmp, mc_saved_count);
+ 	if (ret) {
+ 		pr_err("Cannot save microcode patch.\n");
+ 		goto out;
+ 	}
+ 
+ 	show_saved_mc();
+ 
+ 	/*
+ 	 * Free old saved microcode data.
+ 	 */
+ 	if (mc_saved) {
+ 		for (i = 0; i < mc_saved_count_init; i++)
+ 			kfree(mc_saved[i]);
+ 		kfree(mc_saved);
+ 	}
+ 
+ out:
+ 	mutex_unlock(&x86_cpu_microcode_mutex);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(save_mc_for_early);
+ #endif
+ 
+ static bool __init load_builtin_intel_microcode(struct cpio_data *cp)
+ {
+ #ifdef CONFIG_X86_64
+ 	unsigned int eax = 0x00000001, ebx, ecx = 0, edx;
+ 	char name[30];
+ 
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 
+ 	sprintf(name, "intel-ucode/%02x-%02x-%02x",
+ 		      x86_family(eax), x86_model(eax), x86_stepping(eax));
+ 
+ 	return get_builtin_firmware(cp, name);
+ #else
+ 	return false;
+ #endif
+ }
+ 
+ static __initdata char ucode_name[] = "kernel/x86/microcode/GenuineIntel.bin";
+ static __init enum ucode_state
+ scan_microcode(struct mc_saved_data *mc_saved_data, unsigned long *initrd,
+ 	       unsigned long start, unsigned long size,
+ 	       struct ucode_cpu_info *uci)
+ {
+ 	struct cpio_data cd;
+ 	long offset = 0;
+ #ifdef CONFIG_X86_32
+ 	char *p = (char *)__pa_nodebug(ucode_name);
+ #else
+ 	char *p = ucode_name;
+ #endif
+ 
+ 	cd.data = NULL;
+ 	cd.size = 0;
+ 
+ 	cd = find_cpio_data(p, (void *)start, size, &offset);
+ 	if (!cd.data) {
+ 		if (!load_builtin_intel_microcode(&cd))
+ 			return UCODE_ERROR;
+ 	}
+ 
+ 	return get_matching_model_microcode(0, start, cd.data, cd.size,
+ 					    mc_saved_data, initrd, uci);
+ }
+ 
+ /*
+  * Print ucode update info.
+  */
+ static void
+ print_ucode_info(struct ucode_cpu_info *uci, unsigned int date)
+ {
+ 	int cpu = smp_processor_id();
+ 
+ 	pr_info("CPU%d microcode updated early to revision 0x%x, date = %04x-%02x-%02x\n",
+ 		cpu,
+ 		uci->cpu_sig.rev,
+ 		date & 0xffff,
+ 		date >> 24,
+ 		(date >> 16) & 0xff);
+ }
+ 
+ #ifdef CONFIG_X86_32
+ 
+ static int delay_ucode_info;
+ static int current_mc_date;
+ 
+ /*
+  * Print early updated ucode info after printk works. This is delayed info dump.
+  */
+ void show_ucode_info_early(void)
+ {
+ 	struct ucode_cpu_info uci;
+ 
+ 	if (delay_ucode_info) {
+ 		collect_cpu_info_early(&uci);
+ 		print_ucode_info(&uci, current_mc_date);
+ 		delay_ucode_info = 0;
+ 	}
+ }
+ 
+ /*
+  * At this point, we can not call printk() yet. Keep microcode patch number in
+  * mc_saved_data.mc_saved and delay printing microcode info in
+  * show_ucode_info_early() until printk() works.
+  */
+ static void print_ucode(struct ucode_cpu_info *uci)
+ {
+ 	struct microcode_intel *mc_intel;
+ 	int *delay_ucode_info_p;
+ 	int *current_mc_date_p;
+ 
+ 	mc_intel = uci->mc;
+ 	if (mc_intel == NULL)
+ 		return;
+ 
+ 	delay_ucode_info_p = (int *)__pa_nodebug(&delay_ucode_info);
+ 	current_mc_date_p = (int *)__pa_nodebug(&current_mc_date);
+ 
+ 	*delay_ucode_info_p = 1;
+ 	*current_mc_date_p = mc_intel->hdr.date;
+ }
+ #else
+ 
+ /*
+  * Flush global tlb. We only do this in x86_64 where paging has been enabled
+  * already and PGE should be enabled as well.
+  */
+ static inline void flush_tlb_early(void)
+ {
+ 	__native_flush_tlb_global_irq_disabled();
+ }
+ 
+ static inline void print_ucode(struct ucode_cpu_info *uci)
+ {
+ 	struct microcode_intel *mc_intel;
+ 
+ 	mc_intel = uci->mc;
+ 	if (mc_intel == NULL)
+ 		return;
+ 
+ 	print_ucode_info(uci, mc_intel->hdr.date);
+ }
+ #endif
+ 
+ static int apply_microcode_early(struct ucode_cpu_info *uci, bool early)
+ {
+ 	struct microcode_intel *mc_intel;
+ 	unsigned int val[2];
+ 
+ 	mc_intel = uci->mc;
+ 	if (mc_intel == NULL)
+ 		return 0;
+ 
+ 	/* write microcode via MSR 0x79 */
+ 	native_wrmsr(MSR_IA32_UCODE_WRITE,
+ 	      (unsigned long) mc_intel->bits,
+ 	      (unsigned long) mc_intel->bits >> 16 >> 16);
+ 	native_wrmsr(MSR_IA32_UCODE_REV, 0, 0);
+ 
+ 	/* As documented in the SDM: Do a CPUID 1 here */
+ 	sync_core();
+ 
+ 	/* get the current revision from MSR 0x8B */
+ 	native_rdmsr(MSR_IA32_UCODE_REV, val[0], val[1]);
+ 	if (val[1] != mc_intel->hdr.rev)
+ 		return -1;
+ 
+ #ifdef CONFIG_X86_64
+ 	/* Flush global tlb. This is precaution. */
+ 	flush_tlb_early();
+ #endif
+ 	uci->cpu_sig.rev = val[1];
+ 
+ 	if (early)
+ 		print_ucode(uci);
+ 	else
+ 		print_ucode_info(uci, mc_intel->hdr.date);
+ 
+ 	return 0;
+ }
+ 
+ /*
+  * This function converts microcode patch offsets previously stored in
+  * mc_saved_in_initrd to pointers and stores the pointers in mc_saved_data.
+  */
+ int __init save_microcode_in_initrd_intel(void)
+ {
+ 	unsigned int count = mc_saved_data.mc_saved_count;
+ 	struct microcode_intel *mc_saved[MAX_UCODE_COUNT];
+ 	int ret = 0;
+ 
+ 	if (count == 0)
+ 		return ret;
+ 
+ 	copy_initrd_ptrs(mc_saved, mc_saved_in_initrd, initrd_start, count);
+ 	ret = save_microcode(&mc_saved_data, mc_saved, count);
+ 	if (ret)
+ 		pr_err("Cannot save microcode patches from initrd.\n");
+ 
+ 	show_saved_mc();
+ 
+ 	return ret;
+ }
+ 
+ static void __init
+ _load_ucode_intel_bsp(struct mc_saved_data *mc_saved_data,
+ 		      unsigned long *initrd,
+ 		      unsigned long start, unsigned long size)
+ {
+ 	struct ucode_cpu_info uci;
+ 	enum ucode_state ret;
+ 
+ 	collect_cpu_info_early(&uci);
+ 
+ 	ret = scan_microcode(mc_saved_data, initrd, start, size, &uci);
+ 	if (ret != UCODE_OK)
+ 		return;
+ 
+ 	ret = load_microcode(mc_saved_data, initrd, start, &uci);
+ 	if (ret != UCODE_OK)
+ 		return;
+ 
+ 	apply_microcode_early(&uci, true);
+ }
+ 
+ void __init load_ucode_intel_bsp(void)
+ {
+ 	u64 start, size;
+ #ifdef CONFIG_X86_32
+ 	struct boot_params *p;
+ 
+ 	p	= (struct boot_params *)__pa_nodebug(&boot_params);
+ 	start	= p->hdr.ramdisk_image;
+ 	size	= p->hdr.ramdisk_size;
+ 
+ 	_load_ucode_intel_bsp(
+ 			(struct mc_saved_data *)__pa_nodebug(&mc_saved_data),
+ 			(unsigned long *)__pa_nodebug(&mc_saved_in_initrd),
+ 			start, size);
+ #else
+ 	start	= boot_params.hdr.ramdisk_image + PAGE_OFFSET;
+ 	size	= boot_params.hdr.ramdisk_size;
+ 
+ 	_load_ucode_intel_bsp(&mc_saved_data, mc_saved_in_initrd, start, size);
+ #endif
+ }
+ 
+ void load_ucode_intel_ap(void)
+ {
+ 	struct mc_saved_data *mc_saved_data_p;
+ 	struct ucode_cpu_info uci;
+ 	unsigned long *mc_saved_in_initrd_p;
+ 	unsigned long initrd_start_addr;
+ 	enum ucode_state ret;
+ #ifdef CONFIG_X86_32
+ 	unsigned long *initrd_start_p;
+ 
+ 	mc_saved_in_initrd_p =
+ 		(unsigned long *)__pa_nodebug(mc_saved_in_initrd);
+ 	mc_saved_data_p = (struct mc_saved_data *)__pa_nodebug(&mc_saved_data);
+ 	initrd_start_p = (unsigned long *)__pa_nodebug(&initrd_start);
+ 	initrd_start_addr = (unsigned long)__pa_nodebug(*initrd_start_p);
+ #else
+ 	mc_saved_data_p = &mc_saved_data;
+ 	mc_saved_in_initrd_p = mc_saved_in_initrd;
+ 	initrd_start_addr = initrd_start;
+ #endif
+ 
+ 	/*
+ 	 * If there is no valid ucode previously saved in memory, no need to
+ 	 * update ucode on this AP.
+ 	 */
+ 	if (mc_saved_data_p->mc_saved_count == 0)
+ 		return;
+ 
+ 	collect_cpu_info_early(&uci);
+ 	ret = load_microcode(mc_saved_data_p, mc_saved_in_initrd_p,
+ 			     initrd_start_addr, &uci);
+ 
+ 	if (ret != UCODE_OK)
+ 		return;
+ 
+ 	apply_microcode_early(&uci, true);
+ }
+ 
+ void reload_ucode_intel(void)
+ {
+ 	struct ucode_cpu_info uci;
+ 	enum ucode_state ret;
+ 
+ 	if (!mc_saved_data.mc_saved_count)
+ 		return;
+ 
+ 	collect_cpu_info_early(&uci);
+ 
+ 	ret = load_microcode_early(mc_saved_data.mc_saved,
+ 				   mc_saved_data.mc_saved_count, &uci);
+ 	if (ret != UCODE_OK)
+ 		return;
+ 
+ 	apply_microcode_early(&uci, false);
+ }
++>>>>>>> 99f925ce927e (x86/cpu: Unify CPU family, model, stepping calculation)
  
  static int collect_cpu_info(int cpu_num, struct cpu_signature *csig)
  {
diff --cc arch/x86/lib/Makefile
index 99c2d8870270,a501fa25da41..000000000000
--- a/arch/x86/lib/Makefile
+++ b/arch/x86/lib/Makefile
@@@ -16,12 -16,9 +16,16 @@@ clean-files := inat-tables.
  
  obj-$(CONFIG_SMP) += msr-smp.o cache-smp.o
  
++<<<<<<< HEAD
 +lib-y := delay.o
 +lib-y := delay.o cmdline.o
 +lib-y += thunk_$(BITS).o
++=======
+ lib-y := delay.o misc.o cmdline.o cpu.o
++>>>>>>> 99f925ce927e (x86/cpu: Unify CPU family, model, stepping calculation)
  lib-y += usercopy_$(BITS).o usercopy.o getuser.o putuser.o
  lib-y += memcpy_$(BITS).o
 +lib-$(CONFIG_SMP) += rwlock.o
  lib-$(CONFIG_RWSEM_XCHGADD_ALGORITHM) += rwsem.o
  lib-$(CONFIG_INSTRUCTION_DECODER) += insn.o inat.o
  
diff --git a/arch/x86/include/asm/cpu.h b/arch/x86/include/asm/cpu.h
index d2b12988d2ed..2117cf82ace7 100644
--- a/arch/x86/include/asm/cpu.h
+++ b/arch/x86/include/asm/cpu.h
@@ -38,4 +38,7 @@ DECLARE_PER_CPU(int, cpu_state);
 
 int mwait_usable(const struct cpuinfo_x86 *);
 
+unsigned int x86_family(unsigned int sig);
+unsigned int x86_model(unsigned int sig);
+unsigned int x86_stepping(unsigned int sig);
 #endif /* _ASM_X86_CPU_H */
* Unmerged path arch/x86/include/asm/microcode.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index b7f07b3beff8..bd5dbbd2e73e 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -596,14 +596,9 @@ void cpu_detect(struct cpuinfo_x86 *c)
 		u32 junk, tfms, cap0, misc;
 
 		cpuid(0x00000001, &tfms, &misc, &junk, &cap0);
-		c->x86 = (tfms >> 8) & 0xf;
-		c->x86_model = (tfms >> 4) & 0xf;
-		c->x86_mask = tfms & 0xf;
-
-		if (c->x86 == 0xf)
-			c->x86 += (tfms >> 20) & 0xff;
-		if (c->x86 >= 0x6)
-			c->x86_model += ((tfms >> 16) & 0xf) << 4;
+		c->x86		= x86_family(tfms);
+		c->x86_model	= x86_model(tfms);
+		c->x86_mask	= x86_stepping(tfms);
 
 		if (cap0 & (1<<19)) {
 			c->x86_clflush_size = ((misc >> 8) & 0xff) * 8;
* Unmerged path arch/x86/kernel/cpu/microcode/core.c
* Unmerged path arch/x86/kernel/cpu/microcode/intel.c
* Unmerged path arch/x86/lib/Makefile
diff --git a/arch/x86/lib/cpu.c b/arch/x86/lib/cpu.c
new file mode 100644
index 000000000000..aa417a97511c
--- /dev/null
+++ b/arch/x86/lib/cpu.c
@@ -0,0 +1,35 @@
+#include <linux/module.h>
+
+unsigned int x86_family(unsigned int sig)
+{
+	unsigned int x86;
+
+	x86 = (sig >> 8) & 0xf;
+
+	if (x86 == 0xf)
+		x86 += (sig >> 20) & 0xff;
+
+	return x86;
+}
+EXPORT_SYMBOL_GPL(x86_family);
+
+unsigned int x86_model(unsigned int sig)
+{
+	unsigned int fam, model;
+
+	 fam = x86_family(sig);
+
+	model = (sig >> 4) & 0xf;
+
+	if (fam >= 0x6)
+		model += ((sig >> 16) & 0xf) << 4;
+
+	return model;
+}
+EXPORT_SYMBOL_GPL(x86_model);
+
+unsigned int x86_stepping(unsigned int sig)
+{
+	return sig & 0xf;
+}
+EXPORT_SYMBOL_GPL(x86_stepping);
