SUNRPC: Fix a backchannel deadlock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 68514471ceceac63c7fa9ad684d882f41be5b2d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/68514471.failed

xprt_alloc_bc_request() cannot call xprt_free_bc_request() without
deadlocking, since it already holds the xprt->bc_pa_lock.

	Reported-by: Chuck Lever <chuck.lever@oracle.com>
Fixes: 0d2a970d0ae55 ("SUNRPC: Fix a backchannel race")
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 68514471ceceac63c7fa9ad684d882f41be5b2d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/backchannel_rqst.c
diff --cc net/sunrpc/backchannel_rqst.c
index 9769c56a2130,5a3b50aec397..000000000000
--- a/net/sunrpc/backchannel_rqst.c
+++ b/net/sunrpc/backchannel_rqst.c
@@@ -232,9 -234,15 +232,19 @@@ static struct rpc_rqst *xprt_alloc_bc_r
  	struct rpc_rqst *req = NULL;
  
  	dprintk("RPC:       allocate a backchannel request\n");
 -	if (atomic_read(&xprt->bc_free_slots) <= 0)
 +	if (list_empty(&xprt->bc_pa_list))
  		goto not_found;
- 
++<<<<<<< HEAD
++
++=======
+ 	if (list_empty(&xprt->bc_pa_list)) {
+ 		req = xprt_alloc_bc_req(xprt, GFP_ATOMIC);
+ 		if (!req)
+ 			goto not_found;
+ 		list_add_tail(&req->rq_bc_pa_list, &xprt->bc_pa_list);
+ 		xprt->bc_alloc_count++;
+ 	}
++>>>>>>> 68514471cece (SUNRPC: Fix a backchannel deadlock)
  	req = list_first_entry(&xprt->bc_pa_list, struct rpc_rqst,
  				rq_bc_pa_list);
  	req->rq_reply_bytes_recvd = 0;
* Unmerged path net/sunrpc/backchannel_rqst.c
