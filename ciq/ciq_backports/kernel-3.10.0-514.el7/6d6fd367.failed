mmc: sh_mmcif: revision-specific CLK_CTRL2 handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Guennadi Liakhovetski <g.liakhovetski@gmx.de>
commit 6d6fd3674259d16b735c961743ff28870c46cedc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6d6fd367.failed

Some newer MMCIF IP revisions contain a CE_CLK_CTRL2 register, that has to
be set for proper operation. Support for this feature is added in a way to
preserve the current behaviour by default, i.e. when it is not enabled
in platform data. Patch is based on work by Nobuyuki HIRAI.

	Signed-off-by: Guennadi Liakhovetski <g.liakhovetski+renesas@gmail.com>
	Signed-off-by: Chris Ball <cjb@laptop.org>
(cherry picked from commit 6d6fd3674259d16b735c961743ff28870c46cedc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sh_mmcif.c
#	include/linux/mmc/sh_mmcif.h
diff --cc drivers/mmc/host/sh_mmcif.c
index 779946234bcd,36629a024aa1..000000000000
--- a/drivers/mmc/host/sh_mmcif.c
+++ b/drivers/mmc/host/sh_mmcif.c
@@@ -244,6 -246,8 +244,11 @@@ struct sh_mmcif_host 
  	int sg_blkidx;
  	bool power;
  	bool card_present;
++<<<<<<< HEAD
++=======
+ 	bool ccs_enable;		/* Command Completion Signal support */
+ 	bool clk_ctrl2_enable;
++>>>>>>> 6d6fd3674259 (mmc: sh_mmcif: revision-specific CLK_CTRL2 handling)
  	struct mutex thread_lock;
  
  	/* DMA support */
@@@ -486,8 -496,12 +491,15 @@@ static void sh_mmcif_sync_reset(struct 
  
  	sh_mmcif_writel(host->addr, MMCIF_CE_VERSION, SOFT_RST_ON);
  	sh_mmcif_writel(host->addr, MMCIF_CE_VERSION, SOFT_RST_OFF);
++<<<<<<< HEAD
++=======
+ 	if (host->ccs_enable)
+ 		tmp |= SCCSTO_29;
+ 	if (host->clk_ctrl2_enable)
+ 		sh_mmcif_writel(host->addr, MMCIF_CE_CLK_CTRL2, 0x0F0F0000);
++>>>>>>> 6d6fd3674259 (mmc: sh_mmcif: revision-specific CLK_CTRL2 handling)
  	sh_mmcif_bitset(host, MMCIF_CE_CLK_CTRL, tmp |
 -		SRSPTO_256 | SRBSYTO_29 | SRWDTO_29);
 +		SRSPTO_256 | SRBSYTO_29 | SRWDTO_29 | SCCSTO_29);
  	/* byte swap on */
  	sh_mmcif_bitset(host, MMCIF_CE_BUF_ACC, BUF_ACC_ATYP);
  }
@@@ -1372,6 -1400,8 +1384,11 @@@ static int sh_mmcif_probe(struct platfo
  	host->mmc	= mmc;
  	host->addr	= reg;
  	host->timeout	= msecs_to_jiffies(1000);
++<<<<<<< HEAD
++=======
+ 	host->ccs_enable = !pd || !pd->ccs_unsupported;
+ 	host->clk_ctrl2_enable = pd && pd->clk_ctrl2_present;
++>>>>>>> 6d6fd3674259 (mmc: sh_mmcif: revision-specific CLK_CTRL2 handling)
  
  	host->pd = pdev;
  
diff --cc include/linux/mmc/sh_mmcif.h
index c4880ffb6cce,ccd8fb2cad52..000000000000
--- a/include/linux/mmc/sh_mmcif.h
+++ b/include/linux/mmc/sh_mmcif.h
@@@ -36,6 -36,8 +36,11 @@@ struct sh_mmcif_plat_data 
  	unsigned int		slave_id_tx;	/* embedded slave_id_[tr]x */
  	unsigned int		slave_id_rx;
  	bool			use_cd_gpio : 1;
++<<<<<<< HEAD
++=======
+ 	bool			ccs_unsupported : 1;
+ 	bool			clk_ctrl2_present : 1;
++>>>>>>> 6d6fd3674259 (mmc: sh_mmcif: revision-specific CLK_CTRL2 handling)
  	unsigned int		cd_gpio;
  	u8			sup_pclk;	/* 1 :SH7757, 0: SH7724/SH7372 */
  	unsigned long		caps;
* Unmerged path drivers/mmc/host/sh_mmcif.c
* Unmerged path include/linux/mmc/sh_mmcif.h
