mei: push all standard settings into mei_device_init

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 3a7e9b6c661a23429b4a106d1ffa8aa5ce6c62bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3a7e9b6c.failed

Setting of hw_ops and device has should be in
mei_device_init.
We add reference to the parent device and remove
pci dependent cfg

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 3a7e9b6c661a23429b4a106d1ffa8aa5ce6c62bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/mei_dev.h
diff --cc drivers/misc/mei/mei_dev.h
index 1b981b70f5aa,705143023255..000000000000
--- a/drivers/misc/mei/mei_dev.h
+++ b/drivers/misc/mei/mei_dev.h
@@@ -403,6 -398,11 +403,14 @@@ struct mei_cfg 
  /**
   * struct mei_device -  MEI private device struct
  
++<<<<<<< HEAD
++=======
+  * @pdev - pointer to pci device struct
+  * @dev  - device on a bus
+  * @cdev - character device
+  * @minor - minor number allocated for device
+  *
++>>>>>>> 3a7e9b6c661a (mei: push all standard settings into mei_device_init)
   * @reset_count - limits the number of consecutive resets
   * @hbm_state - state of host bus message protocol
   *
@@@ -418,6 -418,10 +426,13 @@@
   */
  struct mei_device {
  	struct pci_dev *pdev;	/* pointer to pci device struct */
++<<<<<<< HEAD
++=======
+ 	struct device *dev;
+ 	struct cdev cdev;
+ 	int minor;
+ 
++>>>>>>> 3a7e9b6c661a (mei: push all standard settings into mei_device_init)
  	/*
  	 * lists of queues
  	 */
diff --git a/drivers/misc/mei/hw-me.c b/drivers/misc/mei/hw-me.c
index 241eae550b0c..22db4da77054 100644
--- a/drivers/misc/mei/hw-me.c
+++ b/drivers/misc/mei/hw-me.c
@@ -812,10 +812,8 @@ struct mei_device *mei_me_dev_init(struct pci_dev *pdev,
 	if (!dev)
 		return NULL;
 
-	mei_device_init(dev, cfg);
-
-	dev->ops = &mei_me_hw_ops;
-
+	mei_device_init(dev, &pdev->dev, &mei_me_hw_ops);
+	dev->cfg  = cfg;
 	dev->pdev = pdev;
 	return dev;
 }
diff --git a/drivers/misc/mei/hw-txe.c b/drivers/misc/mei/hw-txe.c
index f1cd166094f2..6480bfe67f79 100644
--- a/drivers/misc/mei/hw-txe.c
+++ b/drivers/misc/mei/hw-txe.c
@@ -1102,14 +1102,13 @@ struct mei_device *mei_txe_dev_init(struct pci_dev *pdev,
 	if (!dev)
 		return NULL;
 
-	mei_device_init(dev, cfg);
+	mei_device_init(dev, &pdev->dev, &mei_txe_hw_ops);
 
 	hw = to_txe_hw(dev);
 
 	init_waitqueue_head(&hw->wait_aliveness_resp);
 
-	dev->ops = &mei_txe_hw_ops;
-
+	dev->cfg  = cfg;
 	dev->pdev = pdev;
 	return dev;
 }
diff --git a/drivers/misc/mei/init.c b/drivers/misc/mei/init.c
index 08331e745faf..4ba2b27e0eb6 100644
--- a/drivers/misc/mei/init.c
+++ b/drivers/misc/mei/init.c
@@ -363,7 +363,16 @@ int mei_fw_status(struct mei_device *dev, struct mei_fw_status *fw_status)
 }
 EXPORT_SYMBOL_GPL(mei_fw_status);
 
-void mei_device_init(struct mei_device *dev, const struct mei_cfg *cfg)
+/**
+ * mei_device_init  -- initialize mei_device structure
+ *
+ * @dev: the mei device
+ * @device: the device structure
+ * @hw_ops: hw operations
+ */
+void mei_device_init(struct mei_device *dev,
+		     struct device *device,
+		     const struct mei_hw_ops *hw_ops)
 {
 	/* setup our list array */
 	INIT_LIST_HEAD(&dev->file_list);
@@ -401,7 +410,8 @@ void mei_device_init(struct mei_device *dev, const struct mei_cfg *cfg)
 	bitmap_set(dev->host_clients_map, 0, 1);
 
 	dev->pg_event = MEI_PG_EVENT_IDLE;
-	dev->cfg      = cfg;
+	dev->ops      = hw_ops;
+	dev->dev      = device;
 }
 EXPORT_SYMBOL_GPL(mei_device_init);
 
* Unmerged path drivers/misc/mei/mei_dev.h
