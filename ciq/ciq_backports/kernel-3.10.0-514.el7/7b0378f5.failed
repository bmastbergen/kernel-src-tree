asix: Rename remaining and size for clarity

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dean Jenkins <Dean_Jenkins@mentor.com>
commit 7b0378f517fa1a32b5c8384248d2f8bf79c7c2ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7b0378f5.failed

The Data header synchronisation is easier to understand
if the variables "remaining" and "size" are renamed.

Therefore, the lifetime of the "remaining" variable exists
outside of asix_rx_fixup_internal() and is used to indicate
any remaining pending bytes of the Ethernet frame that need
to be obtained from the next socket buffer. This allows an
Ethernet frame to span across multiple socket buffers.

"size" is now local to asix_rx_fixup_internal() and contains
the size read from the Data header 32-bit word.

Add "copy_length" to hold the number of the Ethernet frame
bytes (maybe a part of a full frame) that are to be copied
out of the socket buffer.

	Signed-off-by: Dean Jenkins <Dean_Jenkins@mentor.com>
	Signed-off-by: Mark Craske <Mark_Craske@mentor.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7b0378f517fa1a32b5c8384248d2f8bf79c7c2ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/asix_common.c
diff --cc drivers/net/usb/asix_common.c
index 99bf5d9050e8,2bd5bdda8c2e..000000000000
--- a/drivers/net/usb/asix_common.c
+++ b/drivers/net/usb/asix_common.c
@@@ -81,29 -82,25 +82,34 @@@ int asix_rx_fixup_internal(struct usbne
  				offset += sizeof(u32);
  			}
  
- 			/* get the packet length */
- 			rx->size = (u16) (rx->header & 0x7ff);
- 			if (rx->size != ((~rx->header >> 16) & 0x7ff)) {
+ 			/* take frame length from Data header 32-bit word */
+ 			size = (u16)(rx->header & 0x7ff);
+ 			if (size != ((~rx->header >> 16) & 0x7ff)) {
  				netdev_err(dev->net, "asix_rx_fixup() Bad Header Length 0x%x, offset %d\n",
  					   rx->header, offset);
- 				rx->size = 0;
  				return 0;
  			}
++<<<<<<< HEAD
 +			rx->ax_skb = netdev_alloc_skb_ip_align(dev->net,
 +							       rx->size);
 +			if (!rx->ax_skb) {
 +				rx->size = 0;
 +				return 0;
 +			}
++=======
+ 			rx->ax_skb = netdev_alloc_skb_ip_align(dev->net, size);
+ 			if (!rx->ax_skb)
+ 				return 0;
+ 			rx->remaining = size;
++>>>>>>> 7b0378f517fa (asix: Rename remaining and size for clarity)
  		}
  
- 		if (rx->size > dev->net->mtu + ETH_HLEN + VLAN_HLEN) {
+ 		if (rx->remaining > dev->net->mtu + ETH_HLEN + VLAN_HLEN) {
  			netdev_err(dev->net, "asix_rx_fixup() Bad RX Length %d\n",
- 				   rx->size);
+ 				   rx->remaining);
  			kfree_skb(rx->ax_skb);
  			rx->ax_skb = NULL;
- 			rx->size = 0U;
- 
+ 			rx->remaining = 0;
  			return 0;
  		}
  
diff --git a/drivers/net/usb/asix.h b/drivers/net/usb/asix.h
index bad857aacd1a..9c9bc0f5404f 100644
--- a/drivers/net/usb/asix.h
+++ b/drivers/net/usb/asix.h
@@ -169,7 +169,7 @@ struct asix_data {
 struct asix_rx_fixup_info {
 	struct sk_buff *ax_skb;
 	u32 header;
-	u16 size;
+	u16 remaining;
 	bool split_head;
 };
 
* Unmerged path drivers/net/usb/asix_common.c
