zram: remove request_queue from struct zram

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
commit ee98016010ae036a5b27300d83bd99ef3fd5776e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ee980160.failed

`struct zram' contains both `struct gendisk' and `struct request_queue'.
the latter can be deleted, because zram->disk carries ->queue pointer, and
->queue carries zram pointer:

create_device()
	zram->queue->queuedata = zram
	zram->disk->queue = zram->queue
	zram->disk->private_data = zram

so zram->queue is not needed, we can access all necessary data anyway.

	Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Jerome Marchand <jmarchan@redhat.com>
	Cc: Nitin Gupta <ngupta@vflare.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ee98016010ae036a5b27300d83bd99ef3fd5776e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/zram/zram_drv.c
#	drivers/block/zram/zram_drv.h
diff --cc drivers/block/zram/zram_drv.c
index 55d1b1aee8ba,eca4b67274c1..000000000000
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@@ -997,15 -1143,30 +998,28 @@@ out
  	return ret;
  }
  
 -static void destroy_devices(unsigned int nr)
 +static void destroy_device(struct zram *zram)
  {
 -	struct zram *zram;
 -	unsigned int i;
 +	sysfs_remove_group(&disk_to_dev(zram->disk)->kobj,
 +			&zram_disk_attr_group);
  
 -	for (i = 0; i < nr; i++) {
 -		zram = &zram_devices[i];
 -		/*
 -		 * Remove sysfs first, so no one will perform a disksize
 -		 * store while we destroy the devices
 -		 */
 -		sysfs_remove_group(&disk_to_dev(zram->disk)->kobj,
 -				&zram_disk_attr_group);
 +	del_gendisk(zram->disk);
 +	put_disk(zram->disk);
  
++<<<<<<< HEAD
 +	blk_cleanup_queue(zram->queue);
++=======
+ 		zram_reset_device(zram);
+ 
+ 		blk_cleanup_queue(zram->disk->queue);
+ 		del_gendisk(zram->disk);
+ 		put_disk(zram->disk);
+ 	}
+ 
+ 	kfree(zram_devices);
+ 	unregister_blkdev(zram_major, "zram");
+ 	pr_info("Destroyed %u device(s)\n", nr);
++>>>>>>> ee98016010ae (zram: remove request_queue from struct zram)
  }
  
  static int __init zram_init(void)
diff --cc drivers/block/zram/zram_drv.h
index 7d655c176e09,17056e589146..000000000000
--- a/drivers/block/zram/zram_drv.h
+++ b/drivers/block/zram/zram_drv.h
@@@ -88,24 -100,25 +88,28 @@@ struct zram_meta 
  
  struct zram {
  	struct zram_meta *meta;
++<<<<<<< HEAD
 +	struct request_queue *queue;
++=======
+ 	struct zcomp *comp;
++>>>>>>> ee98016010ae (zram: remove request_queue from struct zram)
  	struct gendisk *disk;
 -	/* Prevent concurrent execution of device init */
 +	struct zcomp *comp;
 +
 +	/* Prevent concurrent execution of device init, reset and R/W request */
  	struct rw_semaphore init_lock;
  	/*
 -	 * the number of pages zram can consume for storing compressed data
 +	 * This is the limit on amount of *uncompressed* worth of data
 +	 * we can store in a disk.
  	 */
 -	unsigned long limit_pages;
 +	u64 disksize;	/* bytes */
  	int max_comp_streams;
 -
  	struct zram_stats stats;
 -	atomic_t refcount; /* refcount for zram_meta */
 -	/* wait all IO under all of cpu are done */
 -	wait_queue_head_t io_done;
  	/*
 -	 * This is the limit on amount of *uncompressed* worth of data
 -	 * we can store in a disk.
 +	 * the number of pages zram can consume for storing compressed data
  	 */
 -	u64 disksize;	/* bytes */
 +	unsigned long limit_pages;
 +
  	char compressor[10];
  };
  #endif
* Unmerged path drivers/block/zram/zram_drv.c
* Unmerged path drivers/block/zram/zram_drv.h
