mmc: sdhci: convert generic bus width setup to library function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: convert generic bus width setup to library function (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 95.87%
commit-author Russell King <rmk+kernel@arm.linux.org.uk>
commit 2317f56c055fcad524bf6a873df48a754e7ebc4d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2317f56c.failed

	Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
	Tested-by: Markus Pargmann <mpa@pengutronix.de>
	Tested-by: Stephen Warren <swarren@nvidia.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Signed-off-by: Chris Ball <chris@printf.net>
(cherry picked from commit 2317f56c055fcad524bf6a873df48a754e7ebc4d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-esdhc-imx.c
#	drivers/mmc/host/sdhci-of-arasan.c
#	drivers/mmc/host/sdhci-of-esdhc.c
#	drivers/mmc/host/sdhci.h
diff --cc drivers/mmc/host/sdhci-esdhc-imx.c
index 98f46704baa6,568239d84cbe..000000000000
--- a/drivers/mmc/host/sdhci-esdhc-imx.c
+++ b/drivers/mmc/host/sdhci-esdhc-imx.c
@@@ -428,21 -686,208 +428,24 @@@ static void esdhc_pltfm_set_bus_width(s
  
  	esdhc_clrset_le(host, ESDHC_CTRL_BUSWIDTH_MASK, ctrl,
  			SDHCI_HOST_CONTROL);
- 
- 	return 0;
  }
  
 -static void esdhc_prepare_tuning(struct sdhci_host *host, u32 val)
 -{
 -	u32 reg;
 -
 -	/* FIXME: delay a bit for card to be ready for next tuning due to errors */
 -	mdelay(1);
 -
 -	pm_runtime_get_sync(host->mmc->parent);
 -	reg = readl(host->ioaddr + ESDHC_MIX_CTRL);
 -	reg |= ESDHC_MIX_CTRL_EXE_TUNE | ESDHC_MIX_CTRL_SMPCLK_SEL |
 -			ESDHC_MIX_CTRL_FBCLK_SEL;
 -	writel(reg, host->ioaddr + ESDHC_MIX_CTRL);
 -	writel(val << 8, host->ioaddr + ESDHC_TUNE_CTRL_STATUS);
 -	dev_dbg(mmc_dev(host->mmc),
 -		"tunning with delay 0x%x ESDHC_TUNE_CTRL_STATUS 0x%x\n",
 -			val, readl(host->ioaddr + ESDHC_TUNE_CTRL_STATUS));
 -}
 -
 -static void esdhc_request_done(struct mmc_request *mrq)
 -{
 -	complete(&mrq->completion);
 -}
 -
 -static int esdhc_send_tuning_cmd(struct sdhci_host *host, u32 opcode)
 -{
 -	struct mmc_command cmd = {0};
 -	struct mmc_request mrq = {NULL};
 -	struct mmc_data data = {0};
 -	struct scatterlist sg;
 -	char tuning_pattern[ESDHC_TUNING_BLOCK_PATTERN_LEN];
 -
 -	cmd.opcode = opcode;
 -	cmd.arg = 0;
 -	cmd.flags = MMC_RSP_R1 | MMC_CMD_ADTC;
 -
 -	data.blksz = ESDHC_TUNING_BLOCK_PATTERN_LEN;
 -	data.blocks = 1;
 -	data.flags = MMC_DATA_READ;
 -	data.sg = &sg;
 -	data.sg_len = 1;
 -
 -	sg_init_one(&sg, tuning_pattern, sizeof(tuning_pattern));
 -
 -	mrq.cmd = &cmd;
 -	mrq.cmd->mrq = &mrq;
 -	mrq.data = &data;
 -	mrq.data->mrq = &mrq;
 -	mrq.cmd->data = mrq.data;
 -
 -	mrq.done = esdhc_request_done;
 -	init_completion(&(mrq.completion));
 -
 -	disable_irq(host->irq);
 -	spin_lock(&host->lock);
 -	host->mrq = &mrq;
 -
 -	sdhci_send_command(host, mrq.cmd);
 -
 -	spin_unlock(&host->lock);
 -	enable_irq(host->irq);
 -
 -	wait_for_completion(&mrq.completion);
 -
 -	if (cmd.error)
 -		return cmd.error;
 -	if (data.error)
 -		return data.error;
 -
 -	return 0;
 -}
 -
 -static void esdhc_post_tuning(struct sdhci_host *host)
 -{
 -	u32 reg;
 -
 -	reg = readl(host->ioaddr + ESDHC_MIX_CTRL);
 -	reg &= ~ESDHC_MIX_CTRL_EXE_TUNE;
 -	writel(reg, host->ioaddr + ESDHC_MIX_CTRL);
 -}
 -
 -static int esdhc_executing_tuning(struct sdhci_host *host, u32 opcode)
 -{
 -	int min, max, avg, ret;
 -
 -	/* find the mininum delay first which can pass tuning */
 -	min = ESDHC_TUNE_CTRL_MIN;
 -	while (min < ESDHC_TUNE_CTRL_MAX) {
 -		esdhc_prepare_tuning(host, min);
 -		if (!esdhc_send_tuning_cmd(host, opcode))
 -			break;
 -		min += ESDHC_TUNE_CTRL_STEP;
 -	}
 -
 -	/* find the maxinum delay which can not pass tuning */
 -	max = min + ESDHC_TUNE_CTRL_STEP;
 -	while (max < ESDHC_TUNE_CTRL_MAX) {
 -		esdhc_prepare_tuning(host, max);
 -		if (esdhc_send_tuning_cmd(host, opcode)) {
 -			max -= ESDHC_TUNE_CTRL_STEP;
 -			break;
 -		}
 -		max += ESDHC_TUNE_CTRL_STEP;
 -	}
 -
 -	/* use average delay to get the best timing */
 -	avg = (min + max) / 2;
 -	esdhc_prepare_tuning(host, avg);
 -	ret = esdhc_send_tuning_cmd(host, opcode);
 -	esdhc_post_tuning(host);
 -
 -	dev_dbg(mmc_dev(host->mmc), "tunning %s at 0x%x ret %d\n",
 -		ret ? "failed" : "passed", avg, ret);
 -
 -	return ret;
 -}
 -
 -static int esdhc_change_pinstate(struct sdhci_host *host,
 -						unsigned int uhs)
 -{
 -	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
 -	struct pltfm_imx_data *imx_data = pltfm_host->priv;
 -	struct pinctrl_state *pinctrl;
 -
 -	dev_dbg(mmc_dev(host->mmc), "change pinctrl state for uhs %d\n", uhs);
 -
 -	if (IS_ERR(imx_data->pinctrl) ||
 -		IS_ERR(imx_data->pins_default) ||
 -		IS_ERR(imx_data->pins_100mhz) ||
 -		IS_ERR(imx_data->pins_200mhz))
 -		return -EINVAL;
 -
 -	switch (uhs) {
 -	case MMC_TIMING_UHS_SDR50:
 -		pinctrl = imx_data->pins_100mhz;
 -		break;
 -	case MMC_TIMING_UHS_SDR104:
 -	case MMC_TIMING_MMC_HS200:
 -		pinctrl = imx_data->pins_200mhz;
 -		break;
 -	default:
 -		/* back to default state for other legacy timing */
 -		pinctrl = imx_data->pins_default;
 -	}
 -
 -	return pinctrl_select_state(imx_data->pinctrl, pinctrl);
 -}
 -
 -static int esdhc_set_uhs_signaling(struct sdhci_host *host, unsigned int uhs)
 -{
 -	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
 -	struct pltfm_imx_data *imx_data = pltfm_host->priv;
 -	struct esdhc_platform_data *boarddata = &imx_data->boarddata;
 -
 -	switch (uhs) {
 -	case MMC_TIMING_UHS_SDR12:
 -		imx_data->uhs_mode = SDHCI_CTRL_UHS_SDR12;
 -		break;
 -	case MMC_TIMING_UHS_SDR25:
 -		imx_data->uhs_mode = SDHCI_CTRL_UHS_SDR25;
 -		break;
 -	case MMC_TIMING_UHS_SDR50:
 -		imx_data->uhs_mode = SDHCI_CTRL_UHS_SDR50;
 -		break;
 -	case MMC_TIMING_UHS_SDR104:
 -	case MMC_TIMING_MMC_HS200:
 -		imx_data->uhs_mode = SDHCI_CTRL_UHS_SDR104;
 -		break;
 -	case MMC_TIMING_UHS_DDR50:
 -		imx_data->uhs_mode = SDHCI_CTRL_UHS_DDR50;
 -		writel(readl(host->ioaddr + ESDHC_MIX_CTRL) |
 -				ESDHC_MIX_CTRL_DDREN,
 -				host->ioaddr + ESDHC_MIX_CTRL);
 -		imx_data->is_ddr = 1;
 -		if (boarddata->delay_line) {
 -			u32 v;
 -			v = boarddata->delay_line <<
 -				ESDHC_DLL_OVERRIDE_VAL_SHIFT |
 -				(1 << ESDHC_DLL_OVERRIDE_EN_SHIFT);
 -			if (is_imx53_esdhc(imx_data))
 -				v <<= 1;
 -			writel(v, host->ioaddr + ESDHC_DLL_CTRL);
 -		}
 -		break;
 -	}
 -
 -	return esdhc_change_pinstate(host, uhs);
 -}
 -
 -static struct sdhci_ops sdhci_esdhc_ops = {
 +static const struct sdhci_ops sdhci_esdhc_ops = {
  	.read_l = esdhc_readl_le,
  	.read_w = esdhc_readw_le,
  	.write_l = esdhc_writel_le,
  	.write_w = esdhc_writew_le,
  	.write_b = esdhc_writeb_le,
 -	.set_clock = esdhc_pltfm_set_clock,
 -	.get_max_clock = esdhc_pltfm_get_max_clock,
 +	.set_clock = esdhc_set_clock,
 +	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
  	.get_min_clock = esdhc_pltfm_get_min_clock,
  	.get_ro = esdhc_pltfm_get_ro,
++<<<<<<< HEAD
 +	.platform_bus_width = esdhc_pltfm_bus_width,
++=======
+ 	.set_bus_width = esdhc_pltfm_set_bus_width,
+ 	.set_uhs_signaling = esdhc_set_uhs_signaling,
++>>>>>>> 2317f56c055f (mmc: sdhci: convert generic bus width setup to library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_esdhc_imx_pdata = {
diff --cc drivers/mmc/host/sdhci-of-esdhc.c
index 37e668f5b992,86b8326e77c3..000000000000
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@@ -230,6 -269,28 +230,31 @@@ static void esdhc_of_platform_init(stru
  		host->quirks &= ~SDHCI_QUIRK_NO_BUSY_IRQ;
  }
  
++<<<<<<< HEAD
++=======
+ static void esdhc_pltfm_set_bus_width(struct sdhci_host *host, int width)
+ {
+ 	u32 ctrl;
+ 
+ 	switch (width) {
+ 	case MMC_BUS_WIDTH_8:
+ 		ctrl = ESDHC_CTRL_8BITBUS;
+ 		break;
+ 
+ 	case MMC_BUS_WIDTH_4:
+ 		ctrl = ESDHC_CTRL_4BITBUS;
+ 		break;
+ 
+ 	default:
+ 		ctrl = 0;
+ 		break;
+ 	}
+ 
+ 	clrsetbits_be32(host->ioaddr + SDHCI_HOST_CONTROL,
+ 			ESDHC_CTRL_BUSWIDTH_MASK, ctrl);
+ }
+ 
++>>>>>>> 2317f56c055f (mmc: sdhci: convert generic bus width setup to library function)
  static const struct sdhci_ops sdhci_esdhc_ops = {
  	.read_l = esdhc_readl,
  	.read_w = esdhc_readw,
@@@ -247,6 -308,7 +272,10 @@@
  	.platform_resume = esdhc_of_resume,
  #endif
  	.adma_workaround = esdhci_of_adma_workaround,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = esdhc_pltfm_set_bus_width,
++>>>>>>> 2317f56c055f (mmc: sdhci: convert generic bus width setup to library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_esdhc_pdata = {
diff --cc drivers/mmc/host/sdhci.h
index 0a3ed01887db,0301f928eb11..000000000000
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@@ -397,6 -396,13 +396,16 @@@ extern void sdhci_remove_host(struct sd
  extern void sdhci_send_command(struct sdhci_host *host,
  				struct mmc_command *cmd);
  
++<<<<<<< HEAD
++=======
+ static inline bool sdhci_sdio_irq_enabled(struct sdhci_host *host)
+ {
+ 	return !!(host->flags & SDHCI_SDIO_IRQ_ENABLED);
+ }
+ 
+ void sdhci_set_bus_width(struct sdhci_host *host, int width);
+ 
++>>>>>>> 2317f56c055f (mmc: sdhci: convert generic bus width setup to library function)
  #ifdef CONFIG_PM
  extern int sdhci_suspend_host(struct sdhci_host *host);
  extern int sdhci_resume_host(struct sdhci_host *host);
* Unmerged path drivers/mmc/host/sdhci-of-arasan.c
diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
index ebb3f392b589..0e4ba0a4cd71 100644
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -103,10 +103,12 @@ static void sdhci_acpi_int_hw_reset(struct sdhci_host *host)
 
 static const struct sdhci_ops sdhci_acpi_ops_dflt = {
 	.enable_dma = sdhci_acpi_enable_dma,
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 static const struct sdhci_ops sdhci_acpi_ops_int = {
 	.enable_dma = sdhci_acpi_enable_dma,
+	.set_bus_width = sdhci_set_bus_width,
 	.hw_reset   = sdhci_acpi_int_hw_reset,
 };
 
diff --git a/drivers/mmc/host/sdhci-bcm-kona.c b/drivers/mmc/host/sdhci-bcm-kona.c
index 87175f9817c2..9d78433819bd 100644
--- a/drivers/mmc/host/sdhci-bcm-kona.c
+++ b/drivers/mmc/host/sdhci-bcm-kona.c
@@ -209,6 +209,7 @@ static struct sdhci_ops sdhci_bcm_kona_ops = {
 	.get_max_clock = sdhci_bcm_kona_get_max_clk,
 	.get_timeout_clock = sdhci_bcm_kona_get_timeout_clock,
 	.platform_send_init_74_clocks = sdhci_bcm_kona_init_74_clocks,
+	.set_bus_width = sdhci_set_bus_width,
 	.card_event = sdhci_bcm_kona_card_event,
 };
 
diff --git a/drivers/mmc/host/sdhci-bcm2835.c b/drivers/mmc/host/sdhci-bcm2835.c
index 0584a1c788b8..753cb931a12a 100644
--- a/drivers/mmc/host/sdhci-bcm2835.c
+++ b/drivers/mmc/host/sdhci-bcm2835.c
@@ -133,6 +133,7 @@ static const struct sdhci_ops bcm2835_sdhci_ops = {
 	.read_b = bcm2835_sdhci_readb,
 	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
 	.get_min_clock = bcm2835_sdhci_get_min_clock,
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 static const struct sdhci_pltfm_data bcm2835_sdhci_pdata = {
diff --git a/drivers/mmc/host/sdhci-cns3xxx.c b/drivers/mmc/host/sdhci-cns3xxx.c
index f2cc26633cb2..5e0cc9c47887 100644
--- a/drivers/mmc/host/sdhci-cns3xxx.c
+++ b/drivers/mmc/host/sdhci-cns3xxx.c
@@ -82,6 +82,7 @@ out:
 static const struct sdhci_ops sdhci_cns3xxx_ops = {
 	.get_max_clock	= sdhci_cns3xxx_get_max_clk,
 	.set_clock	= sdhci_cns3xxx_set_clock,
+	.set_bus_width	= sdhci_set_bus_width,
 };
 
 static const struct sdhci_pltfm_data sdhci_cns3xxx_pdata = {
diff --git a/drivers/mmc/host/sdhci-dove.c b/drivers/mmc/host/sdhci-dove.c
index 8424839660f8..7eef4890fd22 100644
--- a/drivers/mmc/host/sdhci-dove.c
+++ b/drivers/mmc/host/sdhci-dove.c
@@ -86,6 +86,7 @@ static u32 sdhci_dove_readl(struct sdhci_host *host, int reg)
 static const struct sdhci_ops sdhci_dove_ops = {
 	.read_w	= sdhci_dove_readw,
 	.read_l	= sdhci_dove_readl,
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 static const struct sdhci_pltfm_data sdhci_dove_pdata = {
* Unmerged path drivers/mmc/host/sdhci-esdhc-imx.c
* Unmerged path drivers/mmc/host/sdhci-of-arasan.c
* Unmerged path drivers/mmc/host/sdhci-of-esdhc.c
diff --git a/drivers/mmc/host/sdhci-of-hlwd.c b/drivers/mmc/host/sdhci-of-hlwd.c
index 57c514a81ca5..4d5d0015e392 100644
--- a/drivers/mmc/host/sdhci-of-hlwd.c
+++ b/drivers/mmc/host/sdhci-of-hlwd.c
@@ -58,6 +58,7 @@ static const struct sdhci_ops sdhci_hlwd_ops = {
 	.write_l = sdhci_hlwd_writel,
 	.write_w = sdhci_hlwd_writew,
 	.write_b = sdhci_hlwd_writeb,
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 static const struct sdhci_pltfm_data sdhci_hlwd_pdata = {
diff --git a/drivers/mmc/host/sdhci-pci.c b/drivers/mmc/host/sdhci-pci.c
index a3024b2fb30e..18160a533716 100644
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@ -915,7 +915,7 @@ static int sdhci_pci_enable_dma(struct sdhci_host *host)
 	return 0;
 }
 
-static int sdhci_pci_bus_width(struct sdhci_host *host, int width)
+static void sdhci_pci_set_bus_width(struct sdhci_host *host, int width)
 {
 	u8 ctrl;
 
@@ -936,8 +936,6 @@ static int sdhci_pci_bus_width(struct sdhci_host *host, int width)
 	}
 
 	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
-
-	return 0;
 }
 
 static void sdhci_pci_hw_reset(struct sdhci_host *host)
@@ -957,7 +955,7 @@ static void sdhci_pci_hw_reset(struct sdhci_host *host)
 
 static const struct sdhci_ops sdhci_pci_ops = {
 	.enable_dma	= sdhci_pci_enable_dma,
-	.platform_bus_width	= sdhci_pci_bus_width,
+	.set_bus_width	= sdhci_pci_set_bus_width,
 	.hw_reset		= sdhci_pci_hw_reset,
 };
 
diff --git a/drivers/mmc/host/sdhci-pltfm.c b/drivers/mmc/host/sdhci-pltfm.c
index bef250e95418..40b0fe224f9d 100644
--- a/drivers/mmc/host/sdhci-pltfm.c
+++ b/drivers/mmc/host/sdhci-pltfm.c
@@ -45,6 +45,7 @@ unsigned int sdhci_pltfm_clk_get_max_clock(struct sdhci_host *host)
 EXPORT_SYMBOL_GPL(sdhci_pltfm_clk_get_max_clock);
 
 static const struct sdhci_ops sdhci_pltfm_ops = {
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 #ifdef CONFIG_OF
diff --git a/drivers/mmc/host/sdhci-pxav2.c b/drivers/mmc/host/sdhci-pxav2.c
index d51e061ec576..d24c282e5eb8 100644
--- a/drivers/mmc/host/sdhci-pxav2.c
+++ b/drivers/mmc/host/sdhci-pxav2.c
@@ -88,7 +88,7 @@ static void pxav2_set_private_registers(struct sdhci_host *host, u8 mask)
 	}
 }
 
-static int pxav2_mmc_set_width(struct sdhci_host *host, int width)
+static void pxav2_mmc_set_bus_width(struct sdhci_host *host, int width)
 {
 	u8 ctrl;
 	u16 tmp;
@@ -107,14 +107,12 @@ static int pxav2_mmc_set_width(struct sdhci_host *host, int width)
 	}
 	writew(tmp, host->ioaddr + SD_CE_ATA_2);
 	writeb(ctrl, host->ioaddr + SDHCI_HOST_CONTROL);
-
-	return 0;
 }
 
 static const struct sdhci_ops pxav2_sdhci_ops = {
 	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
 	.platform_reset_exit = pxav2_set_private_registers,
-	.platform_bus_width = pxav2_mmc_set_width,
+	.set_bus_width = pxav2_mmc_set_bus_width,
 };
 
 #ifdef CONFIG_OF
diff --git a/drivers/mmc/host/sdhci-pxav3.c b/drivers/mmc/host/sdhci-pxav3.c
index 56d9bee93d8f..9d58394a6bcb 100644
--- a/drivers/mmc/host/sdhci-pxav3.c
+++ b/drivers/mmc/host/sdhci-pxav3.c
@@ -172,6 +172,7 @@ static const struct sdhci_ops pxav3_sdhci_ops = {
 	.set_uhs_signaling = pxav3_set_uhs_signaling,
 	.platform_send_init_74_clocks = pxav3_gen_init_74_clocks,
 	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 static struct sdhci_pltfm_data sdhci_pxav3_pdata = {
diff --git a/drivers/mmc/host/sdhci-s3c.c b/drivers/mmc/host/sdhci-s3c.c
index 926aaf6acc67..a84a38792643 100644
--- a/drivers/mmc/host/sdhci-s3c.c
+++ b/drivers/mmc/host/sdhci-s3c.c
@@ -327,14 +327,14 @@ static void sdhci_cmu_set_clock(struct sdhci_host *host, unsigned int clock)
 }
 
 /**
- * sdhci_s3c_platform_bus_width - support 8bit buswidth
+ * sdhci_s3c_set_bus_width - support 8bit buswidth
  * @host: The SDHCI host being queried
  * @width: MMC_BUS_WIDTH_ macro for the bus width being requested
  *
  * We have 8-bit width support but is not a v3 controller.
  * So we add platform_bus_width() and support 8bit width.
  */
-static int sdhci_s3c_platform_bus_width(struct sdhci_host *host, int width)
+static void sdhci_s3c_set_bus_width(struct sdhci_host *host, int width)
 {
 	u8 ctrl;
 
@@ -356,15 +356,13 @@ static int sdhci_s3c_platform_bus_width(struct sdhci_host *host, int width)
 	}
 
 	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
-
-	return 0;
 }
 
 static struct sdhci_ops sdhci_s3c_ops = {
 	.get_max_clock		= sdhci_s3c_get_max_clk,
 	.set_clock		= sdhci_s3c_set_clock,
 	.get_min_clock		= sdhci_s3c_get_min_clock,
-	.platform_bus_width	= sdhci_s3c_platform_bus_width,
+	.set_bus_width		= sdhci_s3c_set_bus_width,
 };
 
 static void sdhci_s3c_notify_change(struct platform_device *dev, int state)
diff --git a/drivers/mmc/host/sdhci-sirf.c b/drivers/mmc/host/sdhci-sirf.c
index 09805af0526d..9473492de1b2 100644
--- a/drivers/mmc/host/sdhci-sirf.c
+++ b/drivers/mmc/host/sdhci-sirf.c
@@ -30,6 +30,7 @@ static unsigned int sdhci_sirf_get_max_clk(struct sdhci_host *host)
 
 static struct sdhci_ops sdhci_sirf_ops = {
 	.get_max_clock	= sdhci_sirf_get_max_clk,
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 static struct sdhci_pltfm_data sdhci_sirf_pdata = {
diff --git a/drivers/mmc/host/sdhci-spear.c b/drivers/mmc/host/sdhci-spear.c
index 2151911b43ec..5d2edaaf1f2b 100644
--- a/drivers/mmc/host/sdhci-spear.c
+++ b/drivers/mmc/host/sdhci-spear.c
@@ -37,7 +37,7 @@ struct spear_sdhci {
 
 /* sdhci ops */
 static const struct sdhci_ops sdhci_pltfm_ops = {
-	/* Nothing to do for now. */
+	.set_bus_width = sdhci_set_bus_width,
 };
 
 /* gpio card detection interrupt handler */
diff --git a/drivers/mmc/host/sdhci-tegra.c b/drivers/mmc/host/sdhci-tegra.c
index c8b058283a06..edefd6323806 100644
--- a/drivers/mmc/host/sdhci-tegra.c
+++ b/drivers/mmc/host/sdhci-tegra.c
@@ -127,7 +127,7 @@ static void tegra_sdhci_reset_exit(struct sdhci_host *host, u8 mask)
 	}
 }
 
-static int tegra_sdhci_buswidth(struct sdhci_host *host, int bus_width)
+static void tegra_sdhci_set_bus_width(struct sdhci_host *host, int bus_width)
 {
 	u32 ctrl;
 
@@ -144,7 +144,6 @@ static int tegra_sdhci_buswidth(struct sdhci_host *host, int bus_width)
 			ctrl &= ~SDHCI_CTRL_4BITBUS;
 	}
 	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
-	return 0;
 }
 
 static const struct sdhci_ops tegra_sdhci_ops = {
@@ -152,7 +151,7 @@ static const struct sdhci_ops tegra_sdhci_ops = {
 	.read_l     = tegra_sdhci_readl,
 	.read_w     = tegra_sdhci_readw,
 	.write_l    = tegra_sdhci_writel,
-	.platform_bus_width = tegra_sdhci_buswidth,
+	.set_bus_width = tegra_sdhci_set_bus_width,
 	.platform_reset_exit = tegra_sdhci_reset_exit,
 };
 
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 9a66ab1fa866..459ba9d0e93a 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1427,6 +1427,27 @@ static void sdhci_request(struct mmc_host *mmc, struct mmc_request *mrq)
 	spin_unlock_irqrestore(&host->lock, flags);
 }
 
+void sdhci_set_bus_width(struct sdhci_host *host, int width)
+{
+	u8 ctrl;
+
+	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
+	if (width == MMC_BUS_WIDTH_8) {
+		ctrl &= ~SDHCI_CTRL_4BITBUS;
+		if (host->version >= SDHCI_SPEC_300)
+			ctrl |= SDHCI_CTRL_8BITBUS;
+	} else {
+		if (host->version >= SDHCI_SPEC_300)
+			ctrl &= ~SDHCI_CTRL_8BITBUS;
+		if (width == MMC_BUS_WIDTH_4)
+			ctrl |= SDHCI_CTRL_4BITBUS;
+		else
+			ctrl &= ~SDHCI_CTRL_4BITBUS;
+	}
+	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
+}
+EXPORT_SYMBOL_GPL(sdhci_set_bus_width);
+
 static void sdhci_do_set_ios(struct sdhci_host *host, struct mmc_ios *ios)
 {
 	unsigned long flags;
@@ -1472,29 +1493,7 @@ static void sdhci_do_set_ios(struct sdhci_host *host, struct mmc_ios *ios)
 	if (host->ops->platform_send_init_74_clocks)
 		host->ops->platform_send_init_74_clocks(host, ios->power_mode);
 
-	/*
-	 * If your platform has 8-bit width support but is not a v3 controller,
-	 * or if it requires special setup code, you should implement that in
-	 * platform_bus_width().
-	 */
-	if (host->ops->platform_bus_width) {
-		host->ops->platform_bus_width(host, ios->bus_width);
-	} else {
-		ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
-		if (ios->bus_width == MMC_BUS_WIDTH_8) {
-			ctrl &= ~SDHCI_CTRL_4BITBUS;
-			if (host->version >= SDHCI_SPEC_300)
-				ctrl |= SDHCI_CTRL_8BITBUS;
-		} else {
-			if (host->version >= SDHCI_SPEC_300)
-				ctrl &= ~SDHCI_CTRL_8BITBUS;
-			if (ios->bus_width == MMC_BUS_WIDTH_4)
-				ctrl |= SDHCI_CTRL_4BITBUS;
-			else
-				ctrl &= ~SDHCI_CTRL_4BITBUS;
-		}
-		sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
-	}
+	host->ops->set_bus_width(host, ios->bus_width);
 
 	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
 
* Unmerged path drivers/mmc/host/sdhci.h
