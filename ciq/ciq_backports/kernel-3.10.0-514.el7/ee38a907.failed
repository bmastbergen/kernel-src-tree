x86/microcode: Disable builtin microcode loading on 32-bit for now

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode: Disable builtin microcode loading on 32-bit for now (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 96.88%
commit-author Borislav Petkov <bp@suse.de>
commit ee38a90709084b1c91279cde8f783e90f85285a1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ee38a907.failed

Andy Shevchenko reported machine freezes when booting latest tip
on 32-bit setups. Problem is, the builtin microcode handling cannot
really work that early, when we haven't even enabled paging.

A proper fix would involve handling that case specially as every
other early 32-bit boot case in the microcode loader and would
require much more involved changes for which it is too late now,
more than a week before the upcoming merge window.

So, disable the builtin microcode loading on 32-bit for now.

Reported-and-tested-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1433436928-31903-20-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit ee38a90709084b1c91279cde8f783e90f85285a1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/amd_early.c
#	arch/x86/kernel/cpu/microcode/intel_early.c
diff --cc arch/x86/kernel/cpu/microcode/amd_early.c
index 3d988a30a21d,9243cd839829..000000000000
--- a/arch/x86/kernel/cpu/microcode/amd_early.c
+++ b/arch/x86/kernel/cpu/microcode/amd_early.c
@@@ -228,7 -228,22 +228,26 @@@ static void apply_ucode_in_initrd(void 
  	}
  }
  
++<<<<<<< HEAD
 +void __init load_ucode_amd_bsp(void)
++=======
+ static bool __init load_builtin_amd_microcode(struct cpio_data *cp, int family)
+ {
+ #ifdef CONFIG_X86_64
+ 	char fw_name[36] = "amd-ucode/microcode_amd.bin";
+ 
+ 	if (family >= 0x15)
+ 		snprintf(fw_name, sizeof(fw_name),
+ 			 "amd-ucode/microcode_amd_fam%.2xh.bin", family);
+ 
+ 	return get_builtin_firmware(cp, fw_name);
+ #else
+ 	return false;
+ #endif
+ }
+ 
+ void __init load_ucode_amd_bsp(int family)
++>>>>>>> ee38a9070908 (x86/microcode: Disable builtin microcode loading on 32-bit for now)
  {
  	struct cpio_data cp;
  	void **data;
diff --cc arch/x86/kernel/cpu/microcode/intel_early.c
index f074fe1d5a06,b4858d892592..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel_early.c
+++ b/arch/x86/kernel/cpu/microcode/intel_early.c
@@@ -551,14 -521,33 +551,38 @@@ out
  EXPORT_SYMBOL_GPL(save_mc_for_early);
  #endif
  
++<<<<<<< HEAD
++=======
+ static bool __init load_builtin_intel_microcode(struct cpio_data *cp)
+ {
+ #ifdef CONFIG_X86_64
+ 	u32 eax = 0x00000001, ebx, ecx = 0, edx;
+ 	int family, model, stepping;
+ 	char name[30];
+ 
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 
+ 	family   = __x86_family(eax);
+ 	model    = x86_model(eax);
+ 	stepping = eax & 0xf;
+ 
+ 	sprintf(name, "intel-ucode/%02x-%02x-%02x", family, model, stepping);
+ 
+ 	return get_builtin_firmware(cp, name);
+ #else
+ 	return false;
+ #endif
+ }
+ 
++>>>>>>> ee38a9070908 (x86/microcode: Disable builtin microcode loading on 32-bit for now)
  static __initdata char ucode_name[] = "kernel/x86/microcode/GenuineIntel.bin";
  static __init enum ucode_state
 -scan_microcode(struct mc_saved_data *mc_saved_data, unsigned long *initrd,
 -	       unsigned long start, unsigned long size,
 -	       struct ucode_cpu_info *uci)
 +scan_microcode(unsigned long start, unsigned long end,
 +		struct mc_saved_data *mc_saved_data,
 +		unsigned long *mc_saved_in_initrd,
 +		struct ucode_cpu_info *uci)
  {
 +	unsigned int size = end - start + 1;
  	struct cpio_data cd;
  	long offset = 0;
  #ifdef CONFIG_X86_32
* Unmerged path arch/x86/kernel/cpu/microcode/amd_early.c
* Unmerged path arch/x86/kernel/cpu/microcode/intel_early.c
