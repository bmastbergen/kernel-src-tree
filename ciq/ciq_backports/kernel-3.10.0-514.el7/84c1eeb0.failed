usb : replace dma_pool_alloc and memset with dma_pool_zalloc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] replace dma_pool_alloc and memset with dma_pool_zalloc (Torez Smith) [1303955]
Rebuild_FUZZ: 94.74%
commit-author Saurabh Sengar <saurabh.truth@gmail.com>
commit 84c1eeb02353ffcafe039e892410cad835334ba9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/84c1eeb0.failed

replace dma_pool_alloc and memset with a single call to dma_pool_zalloc

	Signed-off-by: Saurabh Sengar <saurabh.truth@gmail.com>
	Acked-by: Peter Chen <peter.chen@freescale.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 84c1eeb02353ffcafe039e892410cad835334ba9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/chipidea/udc.c
#	drivers/usb/gadget/udc/gr_udc.c
diff --cc drivers/usb/chipidea/udc.c
index b501346484ae,b292b454c77b..000000000000
--- a/drivers/usb/chipidea/udc.c
+++ b/drivers/usb/chipidea/udc.c
@@@ -368,6 -337,62 +368,65 @@@ static int hw_usb_reset(struct ci13xxx 
  /******************************************************************************
   * UTIL block
   *****************************************************************************/
++<<<<<<< HEAD
++=======
+ 
+ static int add_td_to_list(struct ci_hw_ep *hwep, struct ci_hw_req *hwreq,
+ 			  unsigned length)
+ {
+ 	int i;
+ 	u32 temp;
+ 	struct td_node *lastnode, *node = kzalloc(sizeof(struct td_node),
+ 						  GFP_ATOMIC);
+ 
+ 	if (node == NULL)
+ 		return -ENOMEM;
+ 
+ 	node->ptr = dma_pool_zalloc(hwep->td_pool, GFP_ATOMIC,
+ 				   &node->dma);
+ 	if (node->ptr == NULL) {
+ 		kfree(node);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	node->ptr->token = cpu_to_le32(length << __ffs(TD_TOTAL_BYTES));
+ 	node->ptr->token &= cpu_to_le32(TD_TOTAL_BYTES);
+ 	node->ptr->token |= cpu_to_le32(TD_STATUS_ACTIVE);
+ 	if (hwep->type == USB_ENDPOINT_XFER_ISOC && hwep->dir == TX) {
+ 		u32 mul = hwreq->req.length / hwep->ep.maxpacket;
+ 
+ 		if (hwreq->req.length == 0
+ 				|| hwreq->req.length % hwep->ep.maxpacket)
+ 			mul++;
+ 		node->ptr->token |= mul << __ffs(TD_MULTO);
+ 	}
+ 
+ 	temp = (u32) (hwreq->req.dma + hwreq->req.actual);
+ 	if (length) {
+ 		node->ptr->page[0] = cpu_to_le32(temp);
+ 		for (i = 1; i < TD_PAGE_COUNT; i++) {
+ 			u32 page = temp + i * CI_HDRC_PAGE_SIZE;
+ 			page &= ~TD_RESERVED_MASK;
+ 			node->ptr->page[i] = cpu_to_le32(page);
+ 		}
+ 	}
+ 
+ 	hwreq->req.actual += length;
+ 
+ 	if (!list_empty(&hwreq->tds)) {
+ 		/* get the last entry */
+ 		lastnode = list_entry(hwreq->tds.prev,
+ 				struct td_node, td);
+ 		lastnode->ptr->next = cpu_to_le32(node->dma);
+ 	}
+ 
+ 	INIT_LIST_HEAD(&node->td);
+ 	list_add_tail(&node->td, &hwreq->tds);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 84c1eeb02353 (usb : replace dma_pool_alloc and memset with dma_pool_zalloc)
  /**
   * _usb_addr: calculates endpoint address from direction & number
   * @ep:  endpoint
* Unmerged path drivers/usb/gadget/udc/gr_udc.c
* Unmerged path drivers/usb/chipidea/udc.c
* Unmerged path drivers/usb/gadget/udc/gr_udc.c
diff --git a/drivers/usb/host/uhci-q.c b/drivers/usb/host/uhci-q.c
index da6f56d996ce..c17ea1589b83 100644
--- a/drivers/usb/host/uhci-q.c
+++ b/drivers/usb/host/uhci-q.c
@@ -248,11 +248,10 @@ static struct uhci_qh *uhci_alloc_qh(struct uhci_hcd *uhci,
 	dma_addr_t dma_handle;
 	struct uhci_qh *qh;
 
-	qh = dma_pool_alloc(uhci->qh_pool, GFP_ATOMIC, &dma_handle);
+	qh = dma_pool_zalloc(uhci->qh_pool, GFP_ATOMIC, &dma_handle);
 	if (!qh)
 		return NULL;
 
-	memset(qh, 0, sizeof(*qh));
 	qh->dma_handle = dma_handle;
 
 	qh->element = UHCI_PTR_TERM(uhci);
diff --git a/drivers/usb/host/whci/qset.c b/drivers/usb/host/whci/qset.c
index 9f1c0538b211..8c7dc17ce869 100644
--- a/drivers/usb/host/whci/qset.c
+++ b/drivers/usb/host/whci/qset.c
@@ -30,10 +30,9 @@ struct whc_qset *qset_alloc(struct whc *whc, gfp_t mem_flags)
 	struct whc_qset *qset;
 	dma_addr_t dma;
 
-	qset = dma_pool_alloc(whc->qset_pool, mem_flags, &dma);
+	qset = dma_pool_zalloc(whc->qset_pool, mem_flags, &dma);
 	if (qset == NULL)
 		return NULL;
-	memset(qset, 0, sizeof(struct whc_qset));
 
 	qset->qset_dma = dma;
 	qset->whc = whc;
diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index dc7f915d9a13..5cd080e0a685 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -47,13 +47,12 @@ static struct xhci_segment *xhci_segment_alloc(struct xhci_hcd *xhci,
 	if (!seg)
 		return NULL;
 
-	seg->trbs = dma_pool_alloc(xhci->segment_pool, flags, &dma);
+	seg->trbs = dma_pool_zalloc(xhci->segment_pool, flags, &dma);
 	if (!seg->trbs) {
 		kfree(seg);
 		return NULL;
 	}
 
-	memset(seg->trbs, 0, TRB_SEGMENT_SIZE);
 	/* If the cycle state is 0, set the cycle bit to 1 for all the TRBs */
 	if (cycle_state == 0) {
 		for (i = 0; i < TRBS_PER_SEGMENT; i++)
@@ -517,12 +516,11 @@ static struct xhci_container_ctx *xhci_alloc_container_ctx(struct xhci_hcd *xhci
 	if (type == XHCI_CTX_TYPE_INPUT)
 		ctx->size += CTX_SIZE(xhci->hcc_params);
 
-	ctx->bytes = dma_pool_alloc(xhci->device_pool, flags, &ctx->dma);
+	ctx->bytes = dma_pool_zalloc(xhci->device_pool, flags, &ctx->dma);
 	if (!ctx->bytes) {
 		kfree(ctx);
 		return NULL;
 	}
-	memset(ctx->bytes, 0, ctx->size);
 	return ctx;
 }
 
