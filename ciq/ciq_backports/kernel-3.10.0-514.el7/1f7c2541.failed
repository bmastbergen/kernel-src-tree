perf hists: Cleanup filtering functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Namhyung Kim <namhyung@kernel.org>
commit 1f7c254132f098d19ff3fd452ba9f826cd85c4c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1f7c2541.failed

The hists__filter_by_xxx functions share same logic with different
filters.  Factor out the common code into the hists__filter_by_type.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Acked-by: Pekka Enberg <penberg@kernel.org>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1453252521-24398-2-git-send-email-namhyung@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1f7c254132f098d19ff3fd452ba9f826cd85c4c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.c
diff --cc tools/perf/util/hist.c
index 8a0f162d404d,81ce0aff69d1..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -1305,7 -1279,21 +1267,25 @@@ static bool hists__filter_entry_by_symb
  	return false;
  }
  
++<<<<<<< HEAD
 +void hists__filter_by_symbol(struct hists *hists)
++=======
+ static bool hists__filter_entry_by_socket(struct hists *hists,
+ 					  struct hist_entry *he)
+ {
+ 	if ((hists->socket_filter > -1) &&
+ 	    (he->socket != hists->socket_filter)) {
+ 		he->filtered |= (1 << HIST_FILTER__SOCKET);
+ 		return true;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ typedef bool (*filter_fn_t)(struct hists *hists, struct hist_entry *he);
+ 
+ static void hists__filter_by_type(struct hists *hists, int type, filter_fn_t filter)
++>>>>>>> 1f7c254132f0 (perf hists: Cleanup filtering functions)
  {
  	struct rb_node *nd;
  
@@@ -1317,13 -1305,37 +1297,47 @@@
  	for (nd = rb_first(&hists->entries); nd; nd = rb_next(nd)) {
  		struct hist_entry *h = rb_entry(nd, struct hist_entry, rb_node);
  
++<<<<<<< HEAD
 +		if (hists__filter_entry_by_symbol(hists, h))
 +			continue;
 +
 +		hists__remove_entry_filter(hists, h, HIST_FILTER__SYMBOL);
 +	}
 +}
 +
++=======
+ 		if (filter(hists, h))
+ 			continue;
+ 
+ 		hists__remove_entry_filter(hists, h, type);
+ 	}
+ }
+ 
+ void hists__filter_by_thread(struct hists *hists)
+ {
+ 	hists__filter_by_type(hists, HIST_FILTER__THREAD,
+ 			      hists__filter_entry_by_thread);
+ }
+ 
+ void hists__filter_by_dso(struct hists *hists)
+ {
+ 	hists__filter_by_type(hists, HIST_FILTER__DSO,
+ 			      hists__filter_entry_by_dso);
+ }
+ 
+ void hists__filter_by_symbol(struct hists *hists)
+ {
+ 	hists__filter_by_type(hists, HIST_FILTER__SYMBOL,
+ 			      hists__filter_entry_by_symbol);
+ }
+ 
+ void hists__filter_by_socket(struct hists *hists)
+ {
+ 	hists__filter_by_type(hists, HIST_FILTER__SOCKET,
+ 			      hists__filter_entry_by_socket);
+ }
+ 
++>>>>>>> 1f7c254132f0 (perf hists: Cleanup filtering functions)
  void events_stats__inc(struct events_stats *stats, u32 type)
  {
  	++stats->nr_events[0];
* Unmerged path tools/perf/util/hist.c
