ipmi: constify some struct and char arrays

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author LABBE Corentin <clabbe.montjoie@gmail.com>
commit 99ee67351bedf23fe6b969dd94cc2847b397cd20
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/99ee6735.failed

Lots of char arrays could be set as const since they contain only literal
char arrays.
We could in the same time make const some struct members who are pointer
to those const char arrays.

	Signed-off-by: LABBE Corentin <clabbe.montjoie@gmail.com>
	Signed-off-by: Corey Minyard <cminyard@mvista.com>
(cherry picked from commit 99ee67351bedf23fe6b969dd94cc2847b397cd20)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/ipmi/ipmi_si_intf.c
diff --cc drivers/char/ipmi/ipmi_si_intf.c
index 31fa4818fd23,440574de3cb4..000000000000
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@@ -2806,6 -2830,64 +2811,67 @@@ static struct platform_driver ipmi_driv
  	.remove		= ipmi_remove,
  };
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_PARISC
+ static int ipmi_parisc_probe(struct parisc_device *dev)
+ {
+ 	struct smi_info *info;
+ 	int rv;
+ 
+ 	info = smi_info_alloc();
+ 
+ 	if (!info) {
+ 		dev_err(&dev->dev,
+ 			"could not allocate memory for PARISC probe\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	info->si_type		= SI_KCS;
+ 	info->addr_source	= SI_DEVICETREE;
+ 	info->io_setup		= mem_setup;
+ 	info->io.addr_type	= IPMI_MEM_ADDR_SPACE;
+ 	info->io.addr_data	= dev->hpa.start;
+ 	info->io.regsize	= 1;
+ 	info->io.regspacing	= 1;
+ 	info->io.regshift	= 0;
+ 	info->irq		= 0; /* no interrupt */
+ 	info->irq_setup		= NULL;
+ 	info->dev		= &dev->dev;
+ 
+ 	dev_dbg(&dev->dev, "addr 0x%lx\n", info->io.addr_data);
+ 
+ 	dev_set_drvdata(&dev->dev, info);
+ 
+ 	rv = add_smi(info);
+ 	if (rv) {
+ 		kfree(info);
+ 		return rv;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int ipmi_parisc_remove(struct parisc_device *dev)
+ {
+ 	cleanup_one_si(dev_get_drvdata(&dev->dev));
+ 	return 0;
+ }
+ 
+ static const struct parisc_device_id ipmi_parisc_tbl[] = {
+ 	{ HPHW_MC, HVERSION_REV_ANY_ID, 0x004, 0xC0 },
+ 	{ 0, }
+ };
+ 
+ static struct parisc_driver ipmi_parisc_driver = {
+ 	.name =		"ipmi",
+ 	.id_table =	ipmi_parisc_tbl,
+ 	.probe =	ipmi_parisc_probe,
+ 	.remove =	ipmi_parisc_remove,
+ };
+ #endif /* CONFIG_PARISC */
+ 
++>>>>>>> 99ee67351bed (ipmi: constify some struct and char arrays)
  static int wait_for_msg_done(struct smi_info *smi_info)
  {
  	enum si_sm_result     smi_result;
@@@ -3365,10 -3447,10 +3431,10 @@@ static inline void wait_for_timer_and_t
  		del_timer_sync(&smi_info->si_timer);
  }
  
 -static const struct ipmi_default_vals
 +static struct ipmi_default_vals
  {
- 	int type;
- 	int port;
+ 	const int type;
+ 	const int port;
  } ipmi_defaults[] =
  {
  	{ .type = SI_KCS, .port = 0xca2 },
diff --git a/drivers/char/ipmi/ipmi_msghandler.c b/drivers/char/ipmi/ipmi_msghandler.c
index f14ea4b04393..9aa06efeb45a 100644
--- a/drivers/char/ipmi/ipmi_msghandler.c
+++ b/drivers/char/ipmi/ipmi_msghandler.c
@@ -486,9 +486,10 @@ static DEFINE_MUTEX(smi_watchers_mutex);
 #define ipmi_get_stat(intf, stat) \
 	((unsigned int) atomic_read(&(intf)->stats[IPMI_STAT_ ## stat]))
 
-static char *addr_src_to_str[] = { "invalid", "hotmod", "hardcoded", "SPMI",
-				   "ACPI", "SMBIOS", "PCI",
-				   "device-tree", "default" };
+static const char * const addr_src_to_str[] = {
+	"invalid", "hotmod", "hardcoded", "SPMI", "ACPI", "SMBIOS", "PCI",
+	"device-tree", "default"
+};
 
 const char *ipmi_addr_src_to_str(enum ipmi_addr_src src)
 {
* Unmerged path drivers/char/ipmi/ipmi_si_intf.c
