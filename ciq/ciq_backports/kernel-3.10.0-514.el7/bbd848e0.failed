block: reinstate early return of -EOPNOTSUPP from blkdev_issue_discard

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [block] reinstate early return of -EOPNOTSUPP from blkdev_issue_discard (Mike Snitzer) [1356244 1357031]
Rebuild_FUZZ: 94.74%
commit-author Mike Snitzer <snitzer@redhat.com>
commit bbd848e0fade51ae51dab86a0683069cef89953f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bbd848e0.failed

Commit 38f25255330 ("block: add __blkdev_issue_discard") incorrectly
disallowed the early return of -EOPNOTSUPP if the device doesn't support
discard (or secure discard).  This early return of -EOPNOTSUPP has
always been part of blkdev_issue_discard() interface so there isn't a
good reason to break that behaviour -- especially when it can be easily
reinstated.

The nuance of allowing early return of -EOPNOTSUPP vs disallowing late
return of -EOPNOTSUPP is: if the overall device never advertised support
for discards and one is issued to the device it is beneficial to inform
the caller that discards are not supported via -EOPNOTSUPP.  But if a
device advertises discard support it means that at least a subset of the
device does have discard support -- but it could be that discards issued
to some regions of a stacked device will not be supported.  In that case
the late return of -EOPNOTSUPP must be disallowed.

Fixes: 38f25255330 ("block: add __blkdev_issue_discard")
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit bbd848e0fade51ae51dab86a0683069cef89953f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-lib.c
diff --cc block/blk-lib.c
index 35cdebc4817d,23d7f301a196..000000000000
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@@ -60,28 -41,6 +60,29 @@@ int blkdev_issue_discard(struct block_d
  	granularity = max(q->limits.discard_granularity >> 9, 1U);
  	alignment = (bdev_discard_alignment(bdev) >> 9) % granularity;
  
 +	/*
 +	 * Ensure that max_discard_sectors is of the proper
 +	 * granularity, so that requests stay aligned after a split.
 +	 */
 +	max_discard_sectors = min(q->limits.max_discard_sectors, UINT_MAX >> 9);
 +	max_discard_sectors -= max_discard_sectors % granularity;
 +	if (unlikely(!max_discard_sectors)) {
 +		/* Avoid infinite loop below. Being cautious never hurts. */
 +		return -EOPNOTSUPP;
 +	}
 +
 +	if (flags & BLKDEV_DISCARD_SECURE) {
 +		if (!blk_queue_secdiscard(q))
 +			return -EOPNOTSUPP;
 +		type |= REQ_SECURE;
 +	}
 +
 +	atomic_set(&bb.done, 1);
 +	bb.flags = 1 << BIO_UPTODATE;
 +	bb.wait = &wait;
 +
 +	blk_start_plug(&plug);
++<<<<<<< HEAD
  	while (nr_sects) {
  		unsigned int req_sects;
  		sector_t end_sect, tmp;
@@@ -128,15 -78,44 +129,26 @@@
  		 */
  		cond_resched();
  	}
 +	blk_finish_plug(&plug);
  
 -	*biop = bio;
 -	return 0;
 -}
 -EXPORT_SYMBOL(__blkdev_issue_discard);
 +	/* Wait for bios in-flight */
 +	if (!atomic_dec_and_test(&bb.done))
 +		wait_for_completion_io(&wait);
  
 -/**
 - * blkdev_issue_discard - queue a discard
 - * @bdev:	blockdev to issue discard for
 - * @sector:	start sector
 - * @nr_sects:	number of sectors to discard
 - * @gfp_mask:	memory allocation flags (for bio_alloc)
 - * @flags:	BLKDEV_IFL_* flags to control behaviour
 - *
 - * Description:
 - *    Issue a discard request for the sectors in question.
 - */
 -int blkdev_issue_discard(struct block_device *bdev, sector_t sector,
 -		sector_t nr_sects, gfp_t gfp_mask, unsigned long flags)
 -{
 -	int type = REQ_WRITE | REQ_DISCARD;
 -	struct bio *bio = NULL;
 -	struct blk_plug plug;
 -	int ret;
 -
 -	if (flags & BLKDEV_DISCARD_SECURE)
 -		type |= REQ_SECURE;
 +	if (!test_bit(BIO_UPTODATE, &bb.flags))
 +		ret = -EIO;
  
 -	blk_start_plug(&plug);
++=======
+ 	ret = __blkdev_issue_discard(bdev, sector, nr_sects, gfp_mask, type,
+ 			&bio);
+ 	if (!ret && bio) {
+ 		ret = submit_bio_wait(type, bio);
+ 		if (ret == -EOPNOTSUPP)
+ 			ret = 0;
+ 	}
+ 	blk_finish_plug(&plug);
+ 
++>>>>>>> bbd848e0fade (block: reinstate early return of -EOPNOTSUPP from blkdev_issue_discard)
  	return ret;
  }
  EXPORT_SYMBOL(blkdev_issue_discard);
* Unmerged path block/blk-lib.c
