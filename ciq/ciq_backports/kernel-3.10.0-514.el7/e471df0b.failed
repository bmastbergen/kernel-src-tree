mmc: tmio: tmio_mmc_data has .alignment_shift

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit e471df0bcaa137f1bbe7c5f75db6ce7566caa292
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e471df0b.failed

Current .alignment_shift is implemented under tmio_mmc_dma.
It goes to tmio_mmc_data by this patch.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	Acked-by: Lee Jones <lee.jones@linaro.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit e471df0bcaa137f1bbe7c5f75db6ce7566caa292)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sh_mobile_sdhi.c
#	drivers/mmc/host/tmio_mmc.h
#	drivers/mmc/host/tmio_mmc_dma.c
diff --cc drivers/mmc/host/sh_mobile_sdhi.c
index 79ee6f0c45bd,782d8cf942a7..000000000000
--- a/drivers/mmc/host/sh_mobile_sdhi.c
+++ b/drivers/mmc/host/sh_mobile_sdhi.c
@@@ -177,13 -239,11 +177,19 @@@ static int sh_mobile_sdhi_probe(struct 
  			dma_priv->chan_priv_rx = (void *)p->dma_slave_rx;
  			dma_priv->slave_id_tx = p->dma_slave_tx;
  			dma_priv->slave_id_rx = p->dma_slave_rx;
 +
 +			dma_priv->alignment_shift = 1; /* 2-byte alignment */
 +			dma_priv->filter = shdma_chan_filter;
 +
 +			mmc_data->dma = dma_priv;
  		}
  	}
++<<<<<<< HEAD
++=======
+ 	dma_priv->filter = shdma_chan_filter;
+ 
+ 	mmc_data->alignment_shift = 1; /* 2-byte alignment */
++>>>>>>> e471df0bcaa1 (mmc: tmio: tmio_mmc_data has .alignment_shift)
  
  	/*
  	 * All SDHI blocks support 2-byte and larger block sizes in 4-bit
diff --cc drivers/mmc/host/tmio_mmc.h
index d857f5c6e7d9,9482abceeb9c..000000000000
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@@ -40,9 -40,17 +40,21 @@@
  
  struct tmio_mmc_data;
  
++<<<<<<< HEAD
++=======
+ struct tmio_mmc_dma {
+ 	void *chan_priv_tx;
+ 	void *chan_priv_rx;
+ 	int slave_id_tx;
+ 	int slave_id_rx;
+ 	dma_addr_t dma_rx_offset;
+ 	bool (*filter)(struct dma_chan *chan, void *arg);
+ };
+ 
++>>>>>>> e471df0bcaa1 (mmc: tmio: tmio_mmc_data has .alignment_shift)
  struct tmio_mmc_host {
  	void __iomem *ctl;
 +	unsigned long bus_shift;
  	struct mmc_command      *cmd;
  	struct mmc_request      *mrq;
  	struct mmc_data         *data;
diff --cc drivers/mmc/host/tmio_mmc_dma.c
index a8aaa7871c0d,d2b02de2f378..000000000000
--- a/drivers/mmc/host/tmio_mmc_dma.c
+++ b/drivers/mmc/host/tmio_mmc_dma.c
@@@ -55,7 -52,7 +55,11 @@@ static void tmio_mmc_start_dma_rx(struc
  	dma_cookie_t cookie;
  	int ret, i;
  	bool aligned = true, multiple = true;
++<<<<<<< HEAD
 +	unsigned int align = (1 << pdata->dma->alignment_shift) - 1;
++=======
+ 	unsigned int align = (1 << host->pdata->alignment_shift) - 1;
++>>>>>>> e471df0bcaa1 (mmc: tmio: tmio_mmc_data has .alignment_shift)
  
  	for_each_sg(sg, sg_tmp, host->sg_len, i) {
  		if (sg_tmp->offset & align)
@@@ -132,7 -128,7 +136,11 @@@ static void tmio_mmc_start_dma_tx(struc
  	dma_cookie_t cookie;
  	int ret, i;
  	bool aligned = true, multiple = true;
++<<<<<<< HEAD
 +	unsigned int align = (1 << pdata->dma->alignment_shift) - 1;
++=======
+ 	unsigned int align = (1 << host->pdata->alignment_shift) - 1;
++>>>>>>> e471df0bcaa1 (mmc: tmio: tmio_mmc_data has .alignment_shift)
  
  	for_each_sg(sg, sg_tmp, host->sg_len, i) {
  		if (sg_tmp->offset & align)
* Unmerged path drivers/mmc/host/sh_mobile_sdhi.c
* Unmerged path drivers/mmc/host/tmio_mmc.h
* Unmerged path drivers/mmc/host/tmio_mmc_dma.c
diff --git a/include/linux/mfd/tmio.h b/include/linux/mfd/tmio.h
index 38409958f913..26b1077a62d2 100644
--- a/include/linux/mfd/tmio.h
+++ b/include/linux/mfd/tmio.h
@@ -107,6 +107,7 @@ struct tmio_mmc_data {
 	struct tmio_mmc_dma		*dma;
 	struct device			*dev;
 	unsigned int			cd_gpio;
+	int				alignment_shift;
 	void (*set_pwr)(struct platform_device *host, int state);
 	void (*set_clk_div)(struct platform_device *host, int state);
 	int (*write16_hook)(struct tmio_mmc_host *host, int addr);
