mm: /proc/pid/pagemap: inspect _PAGE_SOFT_DIRTY only on present pages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Cyrill Gorcunov <gorcunov@gmail.com>
commit e9cdd6e771580e6ff872e5c64e8b766972c7d1bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e9cdd6e7.failed

If a page we are inspecting is in swap we may occasionally report it as
having soft dirty bit (even if it is clean).  The pte_soft_dirty helper
should be called on present pte only.

	Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
	Cc: Pavel Emelyanov <xemul@parallels.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Matt Mackall <mpm@selenic.com>
	Cc: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>
	Cc: Marcelo Tosatti <mtosatti@redhat.com>
	Cc: KOSAKI Motohiro <kosaki.motohiro@gmail.com>
	Cc: Stephen Rothwell <sfr@canb.auug.org.au>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
	Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Cc: Mel Gorman <mel@csn.ul.ie>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit e9cdd6e771580e6ff872e5c64e8b766972c7d1bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/task_mmu.c
diff --cc fs/proc/task_mmu.c
index 452c618feb42,390bdab01c3c..000000000000
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@@ -876,9 -941,13 +876,11 @@@ static void pte_to_pagemap_entry(pagema
  		frame = pte_pfn(pte);
  		flags = PM_PRESENT;
  		page = vm_normal_page(vma, addr, pte);
+ 		if (pte_soft_dirty(pte))
+ 			flags2 |= __PM_SOFT_DIRTY;
  	} else if (is_swap_pte(pte)) {
 -		swp_entry_t entry;
 -		if (pte_swp_soft_dirty(pte))
 -			flags2 |= __PM_SOFT_DIRTY;
 -		entry = pte_to_swp_entry(pte);
 +		swp_entry_t entry = pte_to_swp_entry(pte);
 +
  		frame = swp_type(entry) |
  			(swp_offset(entry) << MAX_SWAPFILES_SHIFT);
  		flags = PM_SWAP;
@@@ -891,8 -962,10 +893,13 @@@
  
  	if (page && !PageAnon(page))
  		flags |= PM_FILE;
++<<<<<<< HEAD
++=======
+ 	if ((vma->vm_flags & VM_SOFTDIRTY))
+ 		flags2 |= __PM_SOFT_DIRTY;
++>>>>>>> e9cdd6e77158 (mm: /proc/pid/pagemap: inspect _PAGE_SOFT_DIRTY only on present pages)
  
 -	*pme = make_pme(PM_PFRAME(frame) | PM_STATUS2(pm->v2, flags2) | flags);
 +	*pme = make_pme(PM_PFRAME(frame) | PM_PSHIFT(PAGE_SHIFT) | flags);
  }
  
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
* Unmerged path fs/proc/task_mmu.c
