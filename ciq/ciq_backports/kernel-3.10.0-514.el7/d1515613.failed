block SG_IO: add SG_FLAG_Q_AT_HEAD flag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [block] SG_IO: add SG_FLAG_Q_AT_HEAD flag (Ewan Milne) [1292896]
Rebuild_FUZZ: 91.67%
commit-author Douglas Gilbert <dgilbert@interlog.com>
commit d15156138dad40205c9fdd9abe85c9e1479ae272
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d1515613.failed

After the SG_IO ioctl was copied into the block layer and
later into the bsg driver, subtle differences emerged.

One difference is the way injected commands are queued through
the block layer (i.e. this is not SCSI device queueing nor SATA
NCQ). Summarizing:
  - SG_IO on block layer device: blk_exec*(at_head=false)
  - sg device SG_IO: at_head=true
  - bsg device SG_IO: at_head=true

Some time ago Boaz Harrosh introduced a sg v4 flag called
BSG_FLAG_Q_AT_TAIL to override the bsg driver default. A
recent patch titled: "sg: add SG_FLAG_Q_AT_TAIL flag"
allowed the sg driver default to be overridden. This patch
allows a SG_IO ioctl sent to a block layer device to have
its default overridden.

ChangeLog:
    - introduce SG_FLAG_Q_AT_HEAD flag in sg.h to cause
      commands that are injected via a block layer
      device SG_IO ioctl to set at_head=true
    - make comments clearer about queueing in sg.h since the
      header is used both by the sg device and block layer
      device implementations of the SG_IO ioctl.
    - introduce BSG_FLAG_Q_AT_HEAD in bsg.h for compatibility
      (it does nothing) and update comments.

	Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Mike Christie <michaelc@cs.wisc.edu>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit d15156138dad40205c9fdd9abe85c9e1479ae272)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/scsi_ioctl.c
#	include/scsi/sg.h
diff --cc block/scsi_ioctl.c
index cc59368d5d25,51bf5155ee75..000000000000
--- a/block/scsi_ioctl.c
+++ b/block/scsi_ioctl.c
@@@ -291,7 -288,9 +291,13 @@@ static int sg_io(struct request_queue *
  		struct sg_io_hdr *hdr, fmode_t mode)
  {
  	unsigned long start_time;
++<<<<<<< HEAD
 +	int writing = 0, ret = 0;
++=======
+ 	ssize_t ret = 0;
+ 	int writing = 0;
+ 	int at_head = 0;
++>>>>>>> d15156138dad (block SG_IO: add SG_FLAG_Q_AT_HEAD flag)
  	struct request *rq;
  	char sense[SCSI_SENSE_BUFFERSIZE];
  	struct bio *bio;
@@@ -315,10 -314,12 +321,12 @@@
  		case SG_DXFER_FROM_DEV:
  			break;
  		}
+ 	if (hdr->flags & SG_FLAG_Q_AT_HEAD)
+ 		at_head = 1;
  
  	rq = blk_get_request(q, writing ? WRITE : READ, GFP_KERNEL);
 -	if (!rq)
 -		return -ENOMEM;
 +	if (IS_ERR(rq))
 +		return PTR_ERR(rq);
  	blk_rq_set_block_pc(rq);
  
  	if (blk_fill_sghdr_rq(q, rq, hdr, mode)) {
diff --cc include/scsi/sg.h
index 9859355a7cf9,4734c15ab5d6..000000000000
--- a/include/scsi/sg.h
+++ b/include/scsi/sg.h
@@@ -86,7 -129,9 +86,13 @@@ typedef struct sg_io_hd
  #define SG_FLAG_MMAP_IO 4       /* request memory mapped IO */
  #define SG_FLAG_NO_DXFER 0x10000 /* no transfer of kernel buffers to/from */
  				/* user space (debug indirect IO) */
++<<<<<<< HEAD
 +#define SG_FLAG_Q_AT_TAIL 0x10  /* default is Q_AT_HEAD */
++=======
+ /* defaults:: for sg driver: Q_AT_HEAD; for block layer: Q_AT_TAIL */
+ #define SG_FLAG_Q_AT_TAIL 0x10
+ #define SG_FLAG_Q_AT_HEAD 0x20
++>>>>>>> d15156138dad (block SG_IO: add SG_FLAG_Q_AT_HEAD flag)
  
  /* following 'info' values are "or"-ed together */
  #define SG_INFO_OK_MASK 0x1
* Unmerged path block/scsi_ioctl.c
* Unmerged path include/scsi/sg.h
diff --git a/include/uapi/linux/bsg.h b/include/uapi/linux/bsg.h
index 7a12e1c0f371..02986cf8b6f1 100644
--- a/include/uapi/linux/bsg.h
+++ b/include/uapi/linux/bsg.h
@@ -10,12 +10,13 @@
 #define BSG_SUB_PROTOCOL_SCSI_TRANSPORT	2
 
 /*
- * For flags member below
- * sg.h sg_io_hdr also has bits defined for it's flags member. However
- * none of these bits are implemented/used by bsg. The bits below are
- * allocated to not conflict with sg.h ones anyway.
+ * For flag constants below:
+ * sg.h sg_io_hdr also has bits defined for it's flags member. These
+ * two flag values (0x10 and 0x20) have the same meaning in sg.h . For
+ * bsg the BSG_FLAG_Q_AT_HEAD flag is ignored since it is the deafult.
  */
-#define BSG_FLAG_Q_AT_TAIL 0x10 /* default, == 0 at this bit, is Q_AT_HEAD */
+#define BSG_FLAG_Q_AT_TAIL 0x10 /* default is Q_AT_HEAD */
+#define BSG_FLAG_Q_AT_HEAD 0x20
 
 struct sg_io_v4 {
 	__s32 guard;		/* [i] 'Q' to differentiate from v3 */
