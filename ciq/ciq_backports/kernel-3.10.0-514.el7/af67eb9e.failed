vxlan: Add checksum check to the features check function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit af67eb9e7e1ab37880459f83153d34b3c42b0075
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/af67eb9e.failed

We need to perform an additional check on the inner headers to determine if
we can offload the checksum for them.  Previously this check didn't occur
so we would generate an invalid frame in the case of an IPv6 header
encapsulated inside of an IPv4 tunnel.  To fix this I added a secondary
check to vxlan_features_check so that we can verify that we can offload the
inner checksum.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit af67eb9e7e1ab37880459f83153d34b3c42b0075)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/vxlan.h
diff --cc include/net/vxlan.h
index b3828bd87f8a,35437c779da8..000000000000
--- a/include/net/vxlan.h
+++ b/include/net/vxlan.h
@@@ -170,8 -252,10 +170,15 @@@ static inline netdev_features_t vxlan_f
  	    (skb->inner_protocol_type != ENCAP_TYPE_ETHER ||
  	     skb->inner_protocol != htons(ETH_P_TEB) ||
  	     (skb_inner_mac_header(skb) - skb_transport_header(skb) !=
++<<<<<<< HEAD
 +	      sizeof(struct udphdr) + sizeof(struct vxlanhdr))))
 +		return features & ~(NETIF_F_ALL_CSUM | NETIF_F_GSO_MASK);
++=======
+ 	      sizeof(struct udphdr) + sizeof(struct vxlanhdr)) ||
+ 	     (skb->ip_summed != CHECKSUM_NONE &&
+ 	      !can_checksum_protocol(features, inner_eth_hdr(skb)->h_proto))))
+ 		return features & ~(NETIF_F_CSUM_MASK | NETIF_F_GSO_MASK);
++>>>>>>> af67eb9e7e1a (vxlan: Add checksum check to the features check function)
  
  	return features;
  }
diff --git a/include/linux/if_ether.h b/include/linux/if_ether.h
index 12b4d55a02af..26abfeef3765 100644
--- a/include/linux/if_ether.h
+++ b/include/linux/if_ether.h
@@ -28,6 +28,11 @@ static inline struct ethhdr *eth_hdr(const struct sk_buff *skb)
 	return (struct ethhdr *)skb_mac_header(skb);
 }
 
+static inline struct ethhdr *inner_eth_hdr(const struct sk_buff *skb)
+{
+	return (struct ethhdr *)skb_inner_mac_header(skb);
+}
+
 int eth_header_parse(const struct sk_buff *skb, unsigned char *haddr);
 
 int mac_pton(const char *s, u8 *mac);
* Unmerged path include/net/vxlan.h
