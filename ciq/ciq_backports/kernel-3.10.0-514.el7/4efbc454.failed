sched: Fix information leak in sys_sched_getattr()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Vegard Nossum <vegard.nossum@oracle.com>
commit 4efbc454ba68def5ef285b26ebfcfdb605b52755
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4efbc454.failed

We're copying the on-stack structure to userspace, but forgot to give
the right number of bytes to copy. This allows the calling process to
obtain up to PAGE_SIZE bytes from the stack (and possibly adjacent
kernel memory).

This fix copies only as much as we actually have on the stack
(attr->size defaults to the size of the struct) and leaves the rest of
the userspace-provided buffer untouched.

Found using kmemcheck + trinity.

Fixes: d50dde5a10f30 ("sched: Add new scheduler syscalls to support an extended scheduling parameters ABI")
	Cc: Dario Faggioli <raistlin@linux.it>
	Cc: Juri Lelli <juri.lelli@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1392585857-10725-1-git-send-email-vegard.nossum@oracle.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 4efbc454ba68def5ef285b26ebfcfdb605b52755)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 8f3f375de9d1,a6e7470166c7..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -4435,6 -3757,96 +4435,99 @@@ out_unlock
  	return retval;
  }
  
++<<<<<<< HEAD
++=======
+ static int sched_read_attr(struct sched_attr __user *uattr,
+ 			   struct sched_attr *attr,
+ 			   unsigned int usize)
+ {
+ 	int ret;
+ 
+ 	if (!access_ok(VERIFY_WRITE, uattr, usize))
+ 		return -EFAULT;
+ 
+ 	/*
+ 	 * If we're handed a smaller struct than we know of,
+ 	 * ensure all the unknown bits are 0 - i.e. old
+ 	 * user-space does not get uncomplete information.
+ 	 */
+ 	if (usize < sizeof(*attr)) {
+ 		unsigned char *addr;
+ 		unsigned char *end;
+ 
+ 		addr = (void *)attr + usize;
+ 		end  = (void *)attr + sizeof(*attr);
+ 
+ 		for (; addr < end; addr++) {
+ 			if (*addr)
+ 				goto err_size;
+ 		}
+ 
+ 		attr->size = usize;
+ 	}
+ 
+ 	ret = copy_to_user(uattr, attr, attr->size);
+ 	if (ret)
+ 		return -EFAULT;
+ 
+ out:
+ 	return ret;
+ 
+ err_size:
+ 	ret = -E2BIG;
+ 	goto out;
+ }
+ 
+ /**
+  * sys_sched_getattr - similar to sched_getparam, but with sched_attr
+  * @pid: the pid in question.
+  * @uattr: structure containing the extended parameters.
+  * @size: sizeof(attr) for fwd/bwd comp.
+  */
+ SYSCALL_DEFINE3(sched_getattr, pid_t, pid, struct sched_attr __user *, uattr,
+ 		unsigned int, size)
+ {
+ 	struct sched_attr attr = {
+ 		.size = sizeof(struct sched_attr),
+ 	};
+ 	struct task_struct *p;
+ 	int retval;
+ 
+ 	if (!uattr || pid < 0 || size > PAGE_SIZE ||
+ 	    size < SCHED_ATTR_SIZE_VER0)
+ 		return -EINVAL;
+ 
+ 	rcu_read_lock();
+ 	p = find_process_by_pid(pid);
+ 	retval = -ESRCH;
+ 	if (!p)
+ 		goto out_unlock;
+ 
+ 	retval = security_task_getscheduler(p);
+ 	if (retval)
+ 		goto out_unlock;
+ 
+ 	attr.sched_policy = p->policy;
+ 	if (p->sched_reset_on_fork)
+ 		attr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
+ 	if (task_has_dl_policy(p))
+ 		__getparam_dl(p, &attr);
+ 	else if (task_has_rt_policy(p))
+ 		attr.sched_priority = p->rt_priority;
+ 	else
+ 		attr.sched_nice = TASK_NICE(p);
+ 
+ 	rcu_read_unlock();
+ 
+ 	retval = sched_read_attr(uattr, &attr, size);
+ 	return retval;
+ 
+ out_unlock:
+ 	rcu_read_unlock();
+ 	return retval;
+ }
+ 
++>>>>>>> 4efbc454ba68 (sched: Fix information leak in sys_sched_getattr())
  long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)
  {
  	cpumask_var_t cpus_allowed, new_mask;
* Unmerged path kernel/sched/core.c
