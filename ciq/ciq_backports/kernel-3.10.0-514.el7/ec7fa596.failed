perf thread_map: Add perf_event__fprintf_thread_map function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit ec7fa596f514b76a5f1003ffe9e6dfb50cb9e811
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ec7fa596.failed

To display a thread_map event for a raw dump.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Kan Liang <kan.liang@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1445784728-21732-7-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ec7fa596f514b76a5f1003ffe9e6dfb50cb9e811)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/event.h
diff --cc tools/perf/util/event.h
index 9400ef1c1335,b7ad896d1317..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -484,6 -515,8 +484,11 @@@ size_t perf_event__fprintf_mmap2(union 
  size_t perf_event__fprintf_task(union perf_event *event, FILE *fp);
  size_t perf_event__fprintf_aux(union perf_event *event, FILE *fp);
  size_t perf_event__fprintf_itrace_start(union perf_event *event, FILE *fp);
++<<<<<<< HEAD
++=======
+ size_t perf_event__fprintf_switch(union perf_event *event, FILE *fp);
+ size_t perf_event__fprintf_thread_map(union perf_event *event, FILE *fp);
++>>>>>>> ec7fa596f514 (perf thread_map: Add perf_event__fprintf_thread_map function)
  size_t perf_event__fprintf(union perf_event *event, FILE *fp);
  
  u64 kallsyms__get_function_start(const char *kallsyms_filename,
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index 763fbcde76fc..4fb156ecf91c 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -763,6 +763,22 @@ size_t perf_event__fprintf_mmap2(union perf_event *event, FILE *fp)
 		       event->mmap2.filename);
 }
 
+size_t perf_event__fprintf_thread_map(union perf_event *event, FILE *fp)
+{
+	struct thread_map *threads = thread_map__new_event(&event->thread_map);
+	size_t ret;
+
+	ret = fprintf(fp, " nr: ");
+
+	if (threads)
+		ret += thread_map__fprintf(threads, fp);
+	else
+		ret += fprintf(fp, "failed to get threads from event\n");
+
+	thread_map__put(threads);
+	return ret;
+}
+
 int perf_event__process_mmap(struct perf_tool *tool __maybe_unused,
 			     union perf_event *event,
 			     struct perf_sample *sample,
* Unmerged path tools/perf/util/event.h
