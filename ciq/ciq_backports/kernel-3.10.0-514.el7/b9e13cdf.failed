nfsd/sunrpc: turn enqueueing a svc_xprt into a svc_serv operation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jeff Layton <jlayton@primarydata.com>
commit b9e13cdfac70e38ade17b53810a36968c5842339
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b9e13cdf.failed

For now, all services use svc_xprt_do_enqueue, but once we add
workqueue-based service support, we'll need to do something different.

	Signed-off-by: Shirley Ma <shirley.ma@oracle.com>
	Acked-by: Jeff Layton <jlayton@primarydata.com>
	Tested-by: Shirley Ma <shirley.ma@oracle.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit b9e13cdfac70e38ade17b53810a36968c5842339)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/lockd/svc.c
#	fs/nfs/callback.c
#	fs/nfsd/nfssvc.c
#	include/linux/sunrpc/svc.h
diff --cc fs/lockd/svc.c
index 0288d339fa06,530914b5c455..000000000000
--- a/fs/lockd/svc.c
+++ b/fs/lockd/svc.c
@@@ -322,6 -322,11 +322,14 @@@ out_rqst
  	return error;
  }
  
++<<<<<<< HEAD
++=======
+ static struct svc_serv_ops lockd_sv_ops = {
+ 	.svo_shutdown		= svc_rpcb_cleanup,
+ 	.svo_enqueue_xprt	= svc_xprt_do_enqueue,
+ };
+ 
++>>>>>>> b9e13cdfac70 (nfsd/sunrpc: turn enqueueing a svc_xprt into a svc_serv operation)
  static struct svc_serv *lockd_create_svc(void)
  {
  	struct svc_serv *serv;
diff --cc fs/nfs/callback.c
index 8773f5a3e2ae,2c4a0b565d28..000000000000
--- a/fs/nfs/callback.c
+++ b/fs/nfs/callback.c
@@@ -306,6 -308,10 +306,13 @@@ err_bind
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static struct svc_serv_ops nfs_cb_sv_ops = {
+ 	.svo_enqueue_xprt	= svc_xprt_do_enqueue,
+ };
+ 
++>>>>>>> b9e13cdfac70 (nfsd/sunrpc: turn enqueueing a svc_xprt into a svc_serv operation)
  static struct svc_serv *nfs_callback_create_svc(int minorversion)
  {
  	struct nfs_callback_data *cb_info = &nfs_callback_info[minorversion];
diff --cc fs/nfsd/nfssvc.c
index 5ba2659eb9e1,d8b9b4cd37c6..000000000000
--- a/fs/nfsd/nfssvc.c
+++ b/fs/nfsd/nfssvc.c
@@@ -391,6 -391,13 +391,16 @@@ static int nfsd_get_default_max_blksize
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static struct svc_serv_ops nfsd_thread_sv_ops = {
+ 	.svo_shutdown		= nfsd_last_thread,
+ 	.svo_function		= nfsd,
+ 	.svo_enqueue_xprt	= svc_xprt_do_enqueue,
+ 	.svo_module		= THIS_MODULE,
+ };
+ 
++>>>>>>> b9e13cdfac70 (nfsd/sunrpc: turn enqueueing a svc_xprt into a svc_serv operation)
  int nfsd_create_serv(struct net *net)
  {
  	int error;
@@@ -405,7 -412,7 +415,11 @@@
  		nfsd_max_blksize = nfsd_get_default_max_blksize();
  	nfsd_reset_versions();
  	nn->nfsd_serv = svc_create_pooled(&nfsd_program, nfsd_max_blksize,
++<<<<<<< HEAD
 +				      nfsd_last_thread, nfsd, THIS_MODULE);
++=======
+ 						&nfsd_thread_sv_ops);
++>>>>>>> b9e13cdfac70 (nfsd/sunrpc: turn enqueueing a svc_xprt into a svc_serv operation)
  	if (nn->nfsd_serv == NULL)
  		return -ENOMEM;
  
diff --cc include/linux/sunrpc/svc.h
index 960832d76aed,97609d0f68f6..000000000000
--- a/include/linux/sunrpc/svc.h
+++ b/include/linux/sunrpc/svc.h
@@@ -55,6 -49,22 +55,25 @@@ struct svc_pool 
  	unsigned long		sp_flags;
  } ____cacheline_aligned_in_smp;
  
++<<<<<<< HEAD
++=======
+ struct svc_serv;
+ 
+ struct svc_serv_ops {
+ 	/* Callback to use when last thread exits. */
+ 	void		(*svo_shutdown)(struct svc_serv *, struct net *);
+ 
+ 	/* function for service threads to run */
+ 	int		(*svo_function)(void *);
+ 
+ 	/* queue up a transport for servicing */
+ 	void		(*svo_enqueue_xprt)(struct svc_xprt *);
+ 
+ 	/* optional module to count when adding threads (pooled svcs only) */
+ 	struct module	*svo_module;
+ };
+ 
++>>>>>>> b9e13cdfac70 (nfsd/sunrpc: turn enqueueing a svc_xprt into a svc_serv operation)
  /*
   * RPC service.
   *
* Unmerged path fs/lockd/svc.c
* Unmerged path fs/nfs/callback.c
* Unmerged path fs/nfsd/nfssvc.c
* Unmerged path include/linux/sunrpc/svc.h
diff --git a/include/linux/sunrpc/svc_xprt.h b/include/linux/sunrpc/svc_xprt.h
index 79f6f8f3dc0a..78512cfe1fe6 100644
--- a/include/linux/sunrpc/svc_xprt.h
+++ b/include/linux/sunrpc/svc_xprt.h
@@ -116,6 +116,7 @@ void	svc_xprt_init(struct net *, struct svc_xprt_class *, struct svc_xprt *,
 		      struct svc_serv *);
 int	svc_create_xprt(struct svc_serv *, const char *, struct net *,
 			const int, const unsigned short, int);
+void	svc_xprt_do_enqueue(struct svc_xprt *xprt);
 void	svc_xprt_enqueue(struct svc_xprt *xprt);
 void	svc_xprt_put(struct svc_xprt *xprt);
 void	svc_xprt_copy_addrs(struct svc_rqst *rqstp, struct svc_xprt *xprt);
diff --git a/net/sunrpc/svc_xprt.c b/net/sunrpc/svc_xprt.c
index e5d85b3d3f46..e4f7bb523178 100644
--- a/net/sunrpc/svc_xprt.c
+++ b/net/sunrpc/svc_xprt.c
@@ -24,7 +24,6 @@ static int svc_deferred_recv(struct svc_rqst *rqstp);
 static struct cache_deferred_req *svc_defer(struct cache_req *req);
 static void svc_age_temp_xprts(unsigned long closure);
 static void svc_delete_xprt(struct svc_xprt *xprt);
-static void svc_xprt_do_enqueue(struct svc_xprt *xprt);
 
 /* apparently the "standard" is that clients close
  * idle connections after 5 minutes, servers after
@@ -225,12 +224,12 @@ static void svc_xprt_received(struct svc_xprt *xprt)
 	}
 
 	/* As soon as we clear busy, the xprt could be closed and
-	 * 'put', so we need a reference to call svc_xprt_do_enqueue with:
+	 * 'put', so we need a reference to call svc_enqueue_xprt with:
 	 */
 	svc_xprt_get(xprt);
 	smp_mb__before_atomic();
 	clear_bit(XPT_BUSY, &xprt->xpt_flags);
-	svc_xprt_do_enqueue(xprt);
+	xprt->xpt_server->sv_ops->svo_enqueue_xprt(xprt);
 	svc_xprt_put(xprt);
 }
 
@@ -354,7 +353,7 @@ static bool svc_xprt_has_something_to_do(struct svc_xprt *xprt)
 	return false;
 }
 
-static void svc_xprt_do_enqueue(struct svc_xprt *xprt)
+void svc_xprt_do_enqueue(struct svc_xprt *xprt)
 {
 	struct svc_pool *pool;
 	struct svc_rqst	*rqstp;
@@ -409,6 +408,7 @@ static void svc_xprt_do_enqueue(struct svc_xprt *xprt)
 	spin_unlock_bh(&pool->sp_lock);
 	put_cpu();
 }
+EXPORT_SYMBOL_GPL(svc_xprt_do_enqueue);
 
 /*
  * Queue up a transport with data pending. If there are idle nfsd
@@ -419,7 +419,7 @@ void svc_xprt_enqueue(struct svc_xprt *xprt)
 {
 	if (test_bit(XPT_BUSY, &xprt->xpt_flags))
 		return;
-	svc_xprt_do_enqueue(xprt);
+	xprt->xpt_server->sv_ops->svo_enqueue_xprt(xprt);
 }
 EXPORT_SYMBOL_GPL(svc_xprt_enqueue);
 
