IB/core: Remove old fast registration API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sagi Grimberg <sagig@mellanox.com>
commit 39bfc271bd687be2c8e396e976c0fb9a97963400
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/39bfc271.failed

No callers and no providers left, go ahead and remove it.

	Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
	Acked-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 39bfc271bd687be2c8e396e976c0fb9a97963400)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/rdma/ib_verbs.h
diff --cc include/rdma/ib_verbs.h
index 64fb06bbe2fe,324e9bf8e66c..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -737,7 -737,7 +737,11 @@@ enum ib_wc_opcode 
  	IB_WC_BIND_MW,
  	IB_WC_LSO,
  	IB_WC_LOCAL_INV,
++<<<<<<< HEAD
 +	IB_WC_FAST_REG_MR,
++=======
+ 	IB_WC_REG_MR,
++>>>>>>> 39bfc271bd68 (IB/core: Remove old fast registration API)
  	IB_WC_MASKED_COMP_SWAP,
  	IB_WC_MASKED_FETCH_ADD,
  /*
@@@ -1024,7 -1024,7 +1028,11 @@@ enum ib_wr_opcode 
  	IB_WR_SEND_WITH_INV,
  	IB_WR_RDMA_READ_WITH_INV,
  	IB_WR_LOCAL_INV,
++<<<<<<< HEAD
 +	IB_WR_FAST_REG_MR,
++=======
+ 	IB_WR_REG_MR,
++>>>>>>> 39bfc271bd68 (IB/core: Remove old fast registration API)
  	IB_WR_MASKED_ATOMIC_CMP_AND_SWP,
  	IB_WR_MASKED_ATOMIC_FETCH_AND_ADD,
  	IB_WR_BIND_MW,
@@@ -1096,54 -1090,89 +1098,138 @@@ struct ib_send_wr 
  		__be32		imm_data;
  		u32		invalidate_rkey;
  	} ex;
 +	union {
 +		struct {
 +			u64	remote_addr;
 +			u32	rkey;
 +		} rdma;
 +		struct {
 +			u64	remote_addr;
 +			u64	compare_add;
 +			u64	swap;
 +			u64	compare_add_mask;
 +			u64	swap_mask;
 +			u32	rkey;
 +		} atomic;
 +		struct {
 +			struct ib_ah *ah;
 +			void   *header;
 +			int     hlen;
 +			int     mss;
 +			u32	remote_qpn;
 +			u32	remote_qkey;
 +			u16	pkey_index; /* valid for GSI only */
 +			u8	port_num;   /* valid for DR SMPs on switch only */
 +		} ud;
 +		struct {
 +			u64				iova_start;
 +			struct ib_fast_reg_page_list   *page_list;
 +			unsigned int			page_shift;
 +			unsigned int			page_list_len;
 +			u32				length;
 +			int				access_flags;
 +			u32				rkey;
 +		} fast_reg;
 +		struct {
 +			struct ib_mw            *mw;
 +			/* The new rkey for the memory window. */
 +			u32                      rkey;
 +			struct ib_mw_bind_info   bind_info;
 +		} bind_mw;
 +		struct {
 +			struct ib_sig_attrs    *sig_attrs;
 +			struct ib_mr	       *sig_mr;
 +			int			access_flags;
 +			struct ib_sge	       *prot;
 +		} sig_handover;
 +	} wr;
 +	u32			xrc_remote_srq_num;	/* XRC TGT QPs only */
  };
  
++<<<<<<< HEAD
++=======
+ struct ib_rdma_wr {
+ 	struct ib_send_wr	wr;
+ 	u64			remote_addr;
+ 	u32			rkey;
+ };
+ 
+ static inline struct ib_rdma_wr *rdma_wr(struct ib_send_wr *wr)
+ {
+ 	return container_of(wr, struct ib_rdma_wr, wr);
+ }
+ 
+ struct ib_atomic_wr {
+ 	struct ib_send_wr	wr;
+ 	u64			remote_addr;
+ 	u64			compare_add;
+ 	u64			swap;
+ 	u64			compare_add_mask;
+ 	u64			swap_mask;
+ 	u32			rkey;
+ };
+ 
+ static inline struct ib_atomic_wr *atomic_wr(struct ib_send_wr *wr)
+ {
+ 	return container_of(wr, struct ib_atomic_wr, wr);
+ }
+ 
+ struct ib_ud_wr {
+ 	struct ib_send_wr	wr;
+ 	struct ib_ah		*ah;
+ 	void			*header;
+ 	int			hlen;
+ 	int			mss;
+ 	u32			remote_qpn;
+ 	u32			remote_qkey;
+ 	u16			pkey_index; /* valid for GSI only */
+ 	u8			port_num;   /* valid for DR SMPs on switch only */
+ };
+ 
+ static inline struct ib_ud_wr *ud_wr(struct ib_send_wr *wr)
+ {
+ 	return container_of(wr, struct ib_ud_wr, wr);
+ }
+ 
+ struct ib_reg_wr {
+ 	struct ib_send_wr	wr;
+ 	struct ib_mr		*mr;
+ 	u32			key;
+ 	int			access;
+ };
+ 
+ static inline struct ib_reg_wr *reg_wr(struct ib_send_wr *wr)
+ {
+ 	return container_of(wr, struct ib_reg_wr, wr);
+ }
+ 
+ struct ib_bind_mw_wr {
+ 	struct ib_send_wr	wr;
+ 	struct ib_mw		*mw;
+ 	/* The new rkey for the memory window. */
+ 	u32			rkey;
+ 	struct ib_mw_bind_info	bind_info;
+ };
+ 
+ static inline struct ib_bind_mw_wr *bind_mw_wr(struct ib_send_wr *wr)
+ {
+ 	return container_of(wr, struct ib_bind_mw_wr, wr);
+ }
+ 
+ struct ib_sig_handover_wr {
+ 	struct ib_send_wr	wr;
+ 	struct ib_sig_attrs    *sig_attrs;
+ 	struct ib_mr	       *sig_mr;
+ 	int			access_flags;
+ 	struct ib_sge	       *prot;
+ };
+ 
+ static inline struct ib_sig_handover_wr *sig_handover_wr(struct ib_send_wr *wr)
+ {
+ 	return container_of(wr, struct ib_sig_handover_wr, wr);
+ }
+ 
++>>>>>>> 39bfc271bd68 (IB/core: Remove old fast registration API)
  struct ib_recv_wr {
  	struct ib_recv_wr      *next;
  	u64			wr_id;
@@@ -1714,9 -1746,9 +1800,15 @@@ struct ib_device 
  	struct ib_mr *		   (*alloc_mr)(struct ib_pd *pd,
  					       enum ib_mr_type mr_type,
  					       u32 max_num_sg);
++<<<<<<< HEAD
 +	struct ib_fast_reg_page_list * (*alloc_fast_reg_page_list)(struct ib_device *device,
 +								   int page_list_len);
 +	void			   (*free_fast_reg_page_list)(struct ib_fast_reg_page_list *page_list);
++=======
+ 	int                        (*map_mr_sg)(struct ib_mr *mr,
+ 						struct scatterlist *sg,
+ 						int sg_nents);
++>>>>>>> 39bfc271bd68 (IB/core: Remove old fast registration API)
  	int                        (*rereg_phys_mr)(struct ib_mr *mr,
  						    int mr_rereg_mask,
  						    struct ib_pd *pd,
diff --git a/drivers/infiniband/core/verbs.c b/drivers/infiniband/core/verbs.c
index e1f2c9887f3f..8463eaf2409d 100644
--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@ -1253,31 +1253,6 @@ struct ib_mr *ib_alloc_mr(struct ib_pd *pd,
 }
 EXPORT_SYMBOL(ib_alloc_mr);
 
-struct ib_fast_reg_page_list *ib_alloc_fast_reg_page_list(struct ib_device *device,
-							  int max_page_list_len)
-{
-	struct ib_fast_reg_page_list *page_list;
-
-	if (!device->alloc_fast_reg_page_list)
-		return ERR_PTR(-ENOSYS);
-
-	page_list = device->alloc_fast_reg_page_list(device, max_page_list_len);
-
-	if (!IS_ERR(page_list)) {
-		page_list->device = device;
-		page_list->max_page_list_len = max_page_list_len;
-	}
-
-	return page_list;
-}
-EXPORT_SYMBOL(ib_alloc_fast_reg_page_list);
-
-void ib_free_fast_reg_page_list(struct ib_fast_reg_page_list *page_list)
-{
-	page_list->device->free_fast_reg_page_list(page_list);
-}
-EXPORT_SYMBOL(ib_free_fast_reg_page_list);
-
 /* Memory windows */
 
 struct ib_mw *ib_alloc_mw(struct ib_pd *pd, enum ib_mw_type type)
* Unmerged path include/rdma/ib_verbs.h
