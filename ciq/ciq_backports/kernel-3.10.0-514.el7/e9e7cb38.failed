sched/core: Fix sched_rt_global_validate

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Juri Lelli <juri.lelli@gmail.com>
commit e9e7cb38c21c80c82af4b16608bb4c8c5ec6a28e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e9e7cb38.failed

Don't compare sysctl_sched_rt_runtime against sysctl_sched_rt_period if
the former is equal to RUNTIME_INF, otherwise disabling -rt bandwidth
management (with CONFIG_RT_GROUP_SCHED=n) fails.

	Cc: Ingo Molnar <mingo@redhat.com>
	Signed-off-by: Juri Lelli <juri.lelli@gmail.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1392107067-19907-2-git-send-email-juri.lelli@gmail.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit e9e7cb38c21c80c82af4b16608bb4c8c5ec6a28e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 8f3f375de9d1,98d33c105252..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -8008,11 -7412,83 +8008,81 @@@ static int sched_rt_global_constraints(
  	}
  	raw_spin_unlock_irqrestore(&def_rt_bandwidth.rt_runtime_lock, flags);
  
++<<<<<<< HEAD
++=======
+ 	return ret;
+ }
+ #endif /* CONFIG_RT_GROUP_SCHED */
+ 
+ static int sched_dl_global_constraints(void)
+ {
+ 	u64 runtime = global_rt_runtime();
+ 	u64 period = global_rt_period();
+ 	u64 new_bw = to_ratio(period, runtime);
+ 	int cpu, ret = 0;
+ 
+ 	/*
+ 	 * Here we want to check the bandwidth not being set to some
+ 	 * value smaller than the currently allocated bandwidth in
+ 	 * any of the root_domains.
+ 	 *
+ 	 * FIXME: Cycling on all the CPUs is overdoing, but simpler than
+ 	 * cycling on root_domains... Discussion on different/better
+ 	 * solutions is welcome!
+ 	 */
+ 	for_each_possible_cpu(cpu) {
+ 		struct dl_bw *dl_b = dl_bw_of(cpu);
+ 
+ 		raw_spin_lock(&dl_b->lock);
+ 		if (new_bw < dl_b->total_bw)
+ 			ret = -EBUSY;
+ 		raw_spin_unlock(&dl_b->lock);
+ 
+ 		if (ret)
+ 			break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static void sched_dl_do_global(void)
+ {
+ 	u64 new_bw = -1;
+ 	int cpu;
+ 
+ 	def_dl_bandwidth.dl_period = global_rt_period();
+ 	def_dl_bandwidth.dl_runtime = global_rt_runtime();
+ 
+ 	if (global_rt_runtime() != RUNTIME_INF)
+ 		new_bw = to_ratio(global_rt_period(), global_rt_runtime());
+ 
+ 	/*
+ 	 * FIXME: As above...
+ 	 */
+ 	for_each_possible_cpu(cpu) {
+ 		struct dl_bw *dl_b = dl_bw_of(cpu);
+ 
+ 		raw_spin_lock(&dl_b->lock);
+ 		dl_b->bw = new_bw;
+ 		raw_spin_unlock(&dl_b->lock);
+ 	}
+ }
+ 
+ static int sched_rt_global_validate(void)
+ {
+ 	if (sysctl_sched_rt_period <= 0)
+ 		return -EINVAL;
+ 
+ 	if ((sysctl_sched_rt_runtime != RUNTIME_INF) &&
+ 		(sysctl_sched_rt_runtime > sysctl_sched_rt_period))
+ 		return -EINVAL;
+ 
++>>>>>>> e9e7cb38c21c (sched/core: Fix sched_rt_global_validate)
  	return 0;
  }
 +#endif /* CONFIG_RT_GROUP_SCHED */
  
 -static void sched_rt_do_global(void)
 -{
 -	def_rt_bandwidth.rt_runtime = global_rt_runtime();
 -	def_rt_bandwidth.rt_period = ns_to_ktime(global_rt_period());
 -}
 -
 -int sched_rt_handler(struct ctl_table *table, int write,
 +int sched_rr_handler(struct ctl_table *table, int write,
  		void __user *buffer, size_t *lenp,
  		loff_t *ppos)
  {
* Unmerged path kernel/sched/core.c
