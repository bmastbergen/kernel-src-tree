x86/microcode/intel: Fish out the stashed microcode for the BSP

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode/intel: Fish out the stashed microcode for the BSP (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 96.72%
commit-author Borislav Petkov <bp@suse.de>
commit 25cdb9c86826f8d035d8aaa07fc36832e76bd8a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/25cdb9c8.failed

I'm such a moron! The simple solution of saving the BSP patch
for use on resume was too simple (and wrong!), hint:
sizeof(struct microcode_intel).

What needs to be done instead is to fish out the microcode patch
we have stashed previously and apply that on the BSP in case the
late loader hasn't been utilized.

So do that instead.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/20141208110820.GB20057@pd.tnic
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 25cdb9c86826f8d035d8aaa07fc36832e76bd8a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/intel_early.c
diff --cc arch/x86/kernel/cpu/microcode/intel_early.c
index ae52af585ee3,ec9df6f9cd47..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel_early.c
+++ b/arch/x86/kernel/cpu/microcode/intel_early.c
@@@ -717,9 -720,14 +717,18 @@@ _load_ucode_intel_bsp(struct mc_saved_d
  	collect_cpu_info_early(uci);
  	scan_microcode(initrd_start_early, initrd_end_early, mc_saved_data,
  		       mc_saved_in_initrd, uci);
++<<<<<<< HEAD
 +	load_microcode(mc_saved_data, mc_saved_in_initrd,
 +		       initrd_start_early, uci);
 +	apply_microcode_early(uci);
++=======
+ 
+ 	ret = load_microcode(mc_saved_data, mc_saved_in_initrd,
+ 			     initrd_start_early, uci);
+ 
+ 	if (ret == UCODE_OK)
+ 		apply_microcode_early(uci, true);
++>>>>>>> 25cdb9c86826 (x86/microcode/intel: Fish out the stashed microcode for the BSP)
  }
  
  void __init
@@@ -748,7 -756,8 +757,12 @@@ load_ucode_intel_bsp(void
  	initrd_end_early = initrd_start_early + ramdisk_size;
  
  	_load_ucode_intel_bsp(&mc_saved_data, mc_saved_in_initrd,
++<<<<<<< HEAD
 +			      initrd_start_early, initrd_end_early, &uci);
++=======
+ 			      initrd_start_early, initrd_end_early,
+ 			      &uci);
++>>>>>>> 25cdb9c86826 (x86/microcode/intel: Fish out the stashed microcode for the BSP)
  #endif
  }
  
@@@ -782,5 -791,23 +796,27 @@@ void load_ucode_intel_ap(void
  	collect_cpu_info_early(&uci);
  	load_microcode(mc_saved_data_p, mc_saved_in_initrd_p,
  		       initrd_start_addr, &uci);
++<<<<<<< HEAD
 +	apply_microcode_early(&uci);
++=======
+ 	apply_microcode_early(&uci, true);
+ }
+ 
+ void reload_ucode_intel(void)
+ {
+ 	struct ucode_cpu_info uci;
+ 	enum ucode_state ret;
+ 
+ 	if (!mc_saved_data.mc_saved_count)
+ 		return;
+ 
+ 	collect_cpu_info_early(&uci);
+ 
+ 	ret = generic_load_microcode_early(mc_saved_data.mc_saved,
+ 					   mc_saved_data.mc_saved_count, &uci);
+ 	if (ret != UCODE_OK)
+ 		return;
+ 
+ 	apply_microcode_early(&uci, false);
++>>>>>>> 25cdb9c86826 (x86/microcode/intel: Fish out the stashed microcode for the BSP)
  }
* Unmerged path arch/x86/kernel/cpu/microcode/intel_early.c
