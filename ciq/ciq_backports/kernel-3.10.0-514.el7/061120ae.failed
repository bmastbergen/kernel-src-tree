x86/mce: Don't use percpu workqueues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] mce: Don't use percpu workqueues (Prarit Bhargava) [1301710]
Rebuild_FUZZ: 94.12%
commit-author Chen, Gong <gong.chen@linux.intel.com>
commit 061120aed7081b9a4393fbe07b558192f40ad911
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/061120ae.failed

An MCE is a rare event. Therefore, there's no need to have
per-CPU instances of both normal and IRQ workqueues. Make them
both global.

	Signed-off-by: Chen, Gong <gong.chen@linux.intel.com>
[ Fold in subsequent patch from Rui/Boris/Tony for early boot logging. ]
	Signed-off-by: Tony Luck <tony.luck@intel.com>
[ Massage commit message. ]
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1439396985-12812-4-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 061120aed7081b9a4393fbe07b558192f40ad911)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mcheck/mce.c
diff --cc arch/x86/kernel/cpu/mcheck/mce.c
index 53f7039f68c9,456f8d7b8fd3..000000000000
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@@ -524,11 -527,9 +525,13 @@@ int mce_available(struct cpuinfo_x86 *c
  static void mce_schedule_work(void)
  {
  	if (!mce_ring_empty())
++<<<<<<< HEAD
 +		schedule_work(&__get_cpu_var(mce_work));
++=======
+ 		schedule_work(&mce_work);
++>>>>>>> 061120aed708 (x86/mce: Don't use percpu workqueues)
  }
  
- static DEFINE_PER_CPU(struct irq_work, mce_irq_work);
- 
  static void mce_irq_work_cb(struct irq_work *entry)
  {
  	mce_notify_irq();
@@@ -549,7 -550,7 +552,11 @@@ static void mce_report_event(struct pt_
  		return;
  	}
  
++<<<<<<< HEAD
 +	irq_work_queue(&__get_cpu_var(mce_irq_work));
++=======
+ 	irq_work_queue(&mce_irq_work);
++>>>>>>> 061120aed708 (x86/mce: Don't use percpu workqueues)
  }
  
  /*
@@@ -1733,8 -1741,6 +1740,11 @@@ void mcheck_cpu_init(struct cpuinfo_x8
  	__mcheck_cpu_init_generic();
  	__mcheck_cpu_init_vendor(c);
  	__mcheck_cpu_init_timer();
++<<<<<<< HEAD
 +	INIT_WORK(&__get_cpu_var(mce_work), mce_process_work);
 +	init_irq_work(&__get_cpu_var(mce_irq_work), &mce_irq_work_cb);
++=======
++>>>>>>> 061120aed708 (x86/mce: Don't use percpu workqueues)
  }
  
  /*
* Unmerged path arch/x86/kernel/cpu/mcheck/mce.c
