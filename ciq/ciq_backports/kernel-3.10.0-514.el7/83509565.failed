perf tools: Add a helper function to probe whether cpu-wide tracing is possible

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 835095653ebfe4b16596a30db1c4e7c414014b5e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/83509565.failed

Add a helper function to probe whether cpu-wide tracing is possible.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
Link: http://lkml.kernel.org/r/1439458857-30636-2-git-send-email-adrian.hunter@intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 835095653ebfe4b16596a30db1c4e7c414014b5e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evlist.h
#	tools/perf/util/record.c
diff --cc tools/perf/util/evlist.h
index 2a278f062cfa,436e358300b1..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -114,6 -114,8 +114,11 @@@ void perf_evlist__close(struct perf_evl
  
  void perf_evlist__set_id_pos(struct perf_evlist *evlist);
  bool perf_can_sample_identifier(void);
++<<<<<<< HEAD
++=======
+ bool perf_can_record_switch_events(void);
+ bool perf_can_record_cpu_wide(void);
++>>>>>>> 835095653ebf (perf tools: Add a helper function to probe whether cpu-wide tracing is possible)
  void perf_evlist__config(struct perf_evlist *evlist, struct record_opts *opts);
  int record_opts__config(struct record_opts *opts);
  
diff --cc tools/perf/util/record.c
index 1f7becbe5e18,0467367dc315..000000000000
--- a/tools/perf/util/record.c
+++ b/tools/perf/util/record.c
@@@ -95,6 -100,35 +95,38 @@@ static bool perf_can_comm_exec(void
  	return perf_probe_api(perf_probe_comm_exec);
  }
  
++<<<<<<< HEAD
++=======
+ bool perf_can_record_switch_events(void)
+ {
+ 	return perf_probe_api(perf_probe_context_switch);
+ }
+ 
+ bool perf_can_record_cpu_wide(void)
+ {
+ 	struct perf_event_attr attr = {
+ 		.type = PERF_TYPE_SOFTWARE,
+ 		.config = PERF_COUNT_SW_CPU_CLOCK,
+ 		.exclude_kernel = 1,
+ 	};
+ 	struct cpu_map *cpus;
+ 	int cpu, fd;
+ 
+ 	cpus = cpu_map__new(NULL);
+ 	if (!cpus)
+ 		return false;
+ 	cpu = cpus->map[0];
+ 	cpu_map__put(cpus);
+ 
+ 	fd = sys_perf_event_open(&attr, -1, cpu, -1, 0);
+ 	if (fd < 0)
+ 		return false;
+ 	close(fd);
+ 
+ 	return true;
+ }
+ 
++>>>>>>> 835095653ebf (perf tools: Add a helper function to probe whether cpu-wide tracing is possible)
  void perf_evlist__config(struct perf_evlist *evlist, struct record_opts *opts)
  {
  	struct perf_evsel *evsel;
* Unmerged path tools/perf/util/evlist.h
* Unmerged path tools/perf/util/record.c
