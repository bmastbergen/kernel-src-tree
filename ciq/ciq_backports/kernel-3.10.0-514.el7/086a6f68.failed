Drivers: hv: vss: switch to using the hvutil_device_state state machine

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hv] vss: switch to using the hvutil_device_state state machine (Vitaly Kuznetsov) [1074407 1309368]
Rebuild_FUZZ: 89.92%
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit 086a6f68d6933d3c48b3898752cd6ca1a0e02aec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/086a6f68.failed

Switch to using the hvutil_device_state state machine from using kvp_transaction.active.

State transitions are:
-> HVUTIL_DEVICE_INIT when driver loads or on device release
-> HVUTIL_READY if the handshake was successful
-> HVUTIL_HOSTMSG_RECEIVED when there is a non-negotiation message from the host
-> HVUTIL_USERSPACE_REQ after we sent the message to the userspace daemon
   -> HVUTIL_USERSPACE_RECV after/if the userspace daemon has replied
-> HVUTIL_READY after we respond to the host
-> HVUTIL_DEVICE_DYING on driver unload

In hv_vss_onchannelcallback() process ICMSGTYPE_NEGOTIATE messages even when
the userspace daemon is disconnected, otherwise we can make the host think
we don't support VSS and disable the service completely.

Unfortunately there is no good way we can figure out that the userspace daemon
has died (unless we start treating all timeouts as such), add a protection
against processing new VSS_OP_REGISTER messages while being in the middle of a
transaction (HVUTIL_USERSPACE_REQ or HVUTIL_USERSPACE_RECV state).

	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Tested-by: Alex Ng <alexng@microsoft.com>
	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 086a6f68d6933d3c48b3898752cd6ca1a0e02aec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/hv_snapshot.c
diff --cc drivers/hv/hv_snapshot.c
index 5ca7351b78df,ddb1cda4b2fc..000000000000
--- a/drivers/hv/hv_snapshot.c
+++ b/drivers/hv/hv_snapshot.c
@@@ -117,12 -147,16 +147,20 @@@ static void vss_send_op(struct work_str
  	vss_msg->vss_hdr.operation = op;
  	msg->len = sizeof(struct hv_vss_msg);
  
++<<<<<<< HEAD
 +	rc = cn_netlink_send(msg, 0, GFP_ATOMIC);
++=======
+ 	vss_transaction.state = HVUTIL_USERSPACE_REQ;
+ 	rc = cn_netlink_send(msg, 0, 0, GFP_ATOMIC);
++>>>>>>> 086a6f68d693 (Drivers: hv: vss: switch to using the hvutil_device_state state machine)
  	if (rc) {
  		pr_warn("VSS: failed to communicate to the daemon: %d\n", rc);
- 		if (cancel_delayed_work_sync(&vss_timeout_work))
+ 		if (cancel_delayed_work_sync(&vss_timeout_work)) {
  			vss_respond_to_host(HV_E_FAIL);
+ 			vss_transaction.state = HVUTIL_READY;
+ 		}
  	}
+ 
  	kfree(msg);
  
  	return;
* Unmerged path drivers/hv/hv_snapshot.c
