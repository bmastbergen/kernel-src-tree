perf record: Extract synthesize code to record__synthesize()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit c45c86eb70964615bd13b4c1e647bf9ee60c3db9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c45c86eb.failed

Create record__synthesize(). It can be used to create tracking events
for each perf.data after perf supporting splitting into multiple
outputs.

	Signed-off-by: He Kuang <hekuang@huawei.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Li Zefan <lizefan@huawei.com>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1456479154-136027-20-git-send-email-wangnan0@huawei.com
	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit c45c86eb70964615bd13b4c1e647bf9ee60c3db9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
diff --cc tools/perf/builtin-record.c
index 9631fc84ef82,cb583b49a175..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -406,6 -484,76 +406,79 @@@ static void workload_exec_failed_signal
  	child_finished = 1;
  }
  
++<<<<<<< HEAD
++=======
+ static void snapshot_sig_handler(int sig);
+ 
+ static int record__synthesize(struct record *rec)
+ {
+ 	struct perf_session *session = rec->session;
+ 	struct machine *machine = &session->machines.host;
+ 	struct perf_data_file *file = &rec->file;
+ 	struct record_opts *opts = &rec->opts;
+ 	struct perf_tool *tool = &rec->tool;
+ 	int fd = perf_data_file__fd(file);
+ 	int err = 0;
+ 
+ 	if (file->is_pipe) {
+ 		err = perf_event__synthesize_attrs(tool, session,
+ 						   process_synthesized_event);
+ 		if (err < 0) {
+ 			pr_err("Couldn't synthesize attrs.\n");
+ 			goto out;
+ 		}
+ 
+ 		if (have_tracepoints(&rec->evlist->entries)) {
+ 			/*
+ 			 * FIXME err <= 0 here actually means that
+ 			 * there were no tracepoints so its not really
+ 			 * an error, just that we don't need to
+ 			 * synthesize anything.  We really have to
+ 			 * return this more properly and also
+ 			 * propagate errors that now are calling die()
+ 			 */
+ 			err = perf_event__synthesize_tracing_data(tool,	fd, rec->evlist,
+ 								  process_synthesized_event);
+ 			if (err <= 0) {
+ 				pr_err("Couldn't record tracing data.\n");
+ 				goto out;
+ 			}
+ 			rec->bytes_written += err;
+ 		}
+ 	}
+ 
+ 	if (rec->opts.full_auxtrace) {
+ 		err = perf_event__synthesize_auxtrace_info(rec->itr, tool,
+ 					session, process_synthesized_event);
+ 		if (err)
+ 			goto out;
+ 	}
+ 
+ 	err = perf_event__synthesize_kernel_mmap(tool, process_synthesized_event,
+ 						 machine);
+ 	WARN_ONCE(err < 0, "Couldn't record kernel reference relocation symbol\n"
+ 			   "Symbol resolution may be skewed if relocation was used (e.g. kexec).\n"
+ 			   "Check /proc/kallsyms permission or run as root.\n");
+ 
+ 	err = perf_event__synthesize_modules(tool, process_synthesized_event,
+ 					     machine);
+ 	WARN_ONCE(err < 0, "Couldn't record kernel module information.\n"
+ 			   "Symbol resolution may be skewed if relocation was used (e.g. kexec).\n"
+ 			   "Check /proc/modules permission or run as root.\n");
+ 
+ 	if (perf_guest) {
+ 		machines__process_guests(&session->machines,
+ 					 perf_event__synthesize_guest_os, tool);
+ 	}
+ 
+ 	err = __machine__synthesize_threads(machine, tool, &opts->target, rec->evlist->threads,
+ 					    process_synthesized_event, opts->sample_address,
+ 					    opts->proc_map_timeout);
+ out:
+ 	return err;
+ }
+ 
++>>>>>>> c45c86eb7096 (perf record: Extract synthesize code to record__synthesize())
  static int __cmd_record(struct record *rec, int argc, const char **argv)
  {
  	int err;
@@@ -486,62 -648,8 +559,67 @@@
  
  	machine = &session->machines.host;
  
++<<<<<<< HEAD
 +	if (file->is_pipe) {
 +		err = perf_event__synthesize_attrs(tool, session,
 +						   process_synthesized_event);
 +		if (err < 0) {
 +			pr_err("Couldn't synthesize attrs.\n");
 +			goto out_child;
 +		}
 +
 +		if (have_tracepoints(&rec->evlist->entries)) {
 +			/*
 +			 * FIXME err <= 0 here actually means that
 +			 * there were no tracepoints so its not really
 +			 * an error, just that we don't need to
 +			 * synthesize anything.  We really have to
 +			 * return this more properly and also
 +			 * propagate errors that now are calling die()
 +			 */
 +			err = perf_event__synthesize_tracing_data(tool,	fd, rec->evlist,
 +								  process_synthesized_event);
 +			if (err <= 0) {
 +				pr_err("Couldn't record tracing data.\n");
 +				goto out_child;
 +			}
 +			rec->bytes_written += err;
 +		}
 +	}
 +
 +	if (rec->opts.full_auxtrace) {
 +		err = perf_event__synthesize_auxtrace_info(rec->itr, tool,
 +					session, process_synthesized_event);
 +		if (err)
 +			goto out_delete_session;
 +	}
 +
 +	err = perf_event__synthesize_kernel_mmap(tool, process_synthesized_event,
 +						 machine);
 +	if (err < 0)
 +		pr_err("Couldn't record kernel reference relocation symbol\n"
 +		       "Symbol resolution may be skewed if relocation was used (e.g. kexec).\n"
 +		       "Check /proc/kallsyms permission or run as root.\n");
 +
 +	err = perf_event__synthesize_modules(tool, process_synthesized_event,
 +					     machine);
 +	if (err < 0)
 +		pr_err("Couldn't record kernel module information.\n"
 +		       "Symbol resolution may be skewed if relocation was used (e.g. kexec).\n"
 +		       "Check /proc/modules permission or run as root.\n");
 +
 +	if (perf_guest) {
 +		machines__process_guests(&session->machines,
 +					 perf_event__synthesize_guest_os, tool);
 +	}
 +
 +	err = __machine__synthesize_threads(machine, tool, &opts->target, rec->evlist->threads,
 +					    process_synthesized_event, opts->sample_address);
 +	if (err != 0)
++=======
+ 	err = record__synthesize(rec);
+ 	if (err < 0)
++>>>>>>> c45c86eb7096 (perf record: Extract synthesize code to record__synthesize())
  		goto out_child;
  
  	if (rec->realtime_prio) {
* Unmerged path tools/perf/builtin-record.c
