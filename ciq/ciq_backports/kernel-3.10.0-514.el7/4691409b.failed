drm/nouveau/disp/sor/gm107: training pattern registers are like gm200

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 4691409b3e2250ed66aa8dcefa23fe765daf7add
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4691409b.failed

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
	Cc: stable@vger.kernel.org
(cherry picked from commit 4691409b3e2250ed66aa8dcefa23fe765daf7add)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/Kbuild
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/gm107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/outpdp.h
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgm200.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/Kbuild
index 16a4e2a37008,e2a64ed14b22..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/Kbuild
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/Kbuild
@@@ -24,6 -17,78 +24,24 @@@ nvkm-y += nvkm/engine/disp/hdmigk104.
  nvkm-y += nvkm/engine/disp/piornv50.o
  nvkm-y += nvkm/engine/disp/sornv50.o
  nvkm-y += nvkm/engine/disp/sorg94.o
++<<<<<<< HEAD
 +nvkm-y += nvkm/engine/disp/sorgf110.o
 +nvkm-y += nvkm/engine/disp/sorgm204.o
++=======
+ nvkm-y += nvkm/engine/disp/sorgf119.o
+ nvkm-y += nvkm/engine/disp/sorgm107.o
+ nvkm-y += nvkm/engine/disp/sorgm200.o
+ nvkm-y += nvkm/engine/disp/dport.o
+ 
+ nvkm-y += nvkm/engine/disp/conn.o
+ 
+ nvkm-y += nvkm/engine/disp/hdagt215.o
+ nvkm-y += nvkm/engine/disp/hdagf119.o
+ 
+ nvkm-y += nvkm/engine/disp/hdmig84.o
+ nvkm-y += nvkm/engine/disp/hdmigt215.o
+ nvkm-y += nvkm/engine/disp/hdmigf119.o
+ nvkm-y += nvkm/engine/disp/hdmigk104.o
+ 
++>>>>>>> 4691409b3e22 (drm/nouveau/disp/sor/gm107: training pattern registers are like gm200)
  nvkm-y += nvkm/engine/disp/vga.o
 -
 -nvkm-y += nvkm/engine/disp/rootnv04.o
 -nvkm-y += nvkm/engine/disp/rootnv50.o
 -nvkm-y += nvkm/engine/disp/rootg84.o
 -nvkm-y += nvkm/engine/disp/rootg94.o
 -nvkm-y += nvkm/engine/disp/rootgt200.o
 -nvkm-y += nvkm/engine/disp/rootgt215.o
 -nvkm-y += nvkm/engine/disp/rootgf119.o
 -nvkm-y += nvkm/engine/disp/rootgk104.o
 -nvkm-y += nvkm/engine/disp/rootgk110.o
 -nvkm-y += nvkm/engine/disp/rootgm107.o
 -nvkm-y += nvkm/engine/disp/rootgm200.o
 -
 -nvkm-y += nvkm/engine/disp/channv50.o
 -nvkm-y += nvkm/engine/disp/changf119.o
 -
 -nvkm-y += nvkm/engine/disp/dmacnv50.o
 -nvkm-y += nvkm/engine/disp/dmacgf119.o
 -
 -nvkm-y += nvkm/engine/disp/basenv50.o
 -nvkm-y += nvkm/engine/disp/baseg84.o
 -nvkm-y += nvkm/engine/disp/basegt200.o
 -nvkm-y += nvkm/engine/disp/basegt215.o
 -nvkm-y += nvkm/engine/disp/basegf119.o
 -nvkm-y += nvkm/engine/disp/basegk104.o
 -nvkm-y += nvkm/engine/disp/basegk110.o
 -
 -nvkm-y += nvkm/engine/disp/corenv50.o
 -nvkm-y += nvkm/engine/disp/coreg84.o
 -nvkm-y += nvkm/engine/disp/coreg94.o
 -nvkm-y += nvkm/engine/disp/coregt200.o
 -nvkm-y += nvkm/engine/disp/coregt215.o
 -nvkm-y += nvkm/engine/disp/coregf119.o
 -nvkm-y += nvkm/engine/disp/coregk104.o
 -nvkm-y += nvkm/engine/disp/coregk110.o
 -nvkm-y += nvkm/engine/disp/coregm107.o
 -nvkm-y += nvkm/engine/disp/coregm200.o
 -
 -nvkm-y += nvkm/engine/disp/ovlynv50.o
 -nvkm-y += nvkm/engine/disp/ovlyg84.o
 -nvkm-y += nvkm/engine/disp/ovlygt200.o
 -nvkm-y += nvkm/engine/disp/ovlygt215.o
 -nvkm-y += nvkm/engine/disp/ovlygf119.o
 -nvkm-y += nvkm/engine/disp/ovlygk104.o
 -
 -nvkm-y += nvkm/engine/disp/piocnv50.o
 -nvkm-y += nvkm/engine/disp/piocgf119.o
 -
 -nvkm-y += nvkm/engine/disp/cursnv50.o
 -nvkm-y += nvkm/engine/disp/cursg84.o
 -nvkm-y += nvkm/engine/disp/cursgt215.o
 -nvkm-y += nvkm/engine/disp/cursgf119.o
 -nvkm-y += nvkm/engine/disp/cursgk104.o
 -
 -nvkm-y += nvkm/engine/disp/oimmnv50.o
 -nvkm-y += nvkm/engine/disp/oimmg84.o
 -nvkm-y += nvkm/engine/disp/oimmgt215.o
 -nvkm-y += nvkm/engine/disp/oimmgf119.o
 -nvkm-y += nvkm/engine/disp/oimmgk104.o
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/gm107.c
index 881cc94385a1,f4b9cf8574be..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/gm107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/gm107.c
@@@ -22,82 -22,32 +22,105 @@@
   * Authors: Ben Skeggs
   */
  #include "nv50.h"
 -#include "rootnv50.h"
  
++<<<<<<< HEAD
 +#include <nvif/class.h>
 +
 +/*******************************************************************************
 + * Base display object
 + ******************************************************************************/
 +
 +static struct nvkm_oclass
 +gm107_disp_sclass[] = {
 +	{ GM107_DISP_CORE_CHANNEL_DMA, &gf110_disp_core_ofuncs.base },
 +	{ GK110_DISP_BASE_CHANNEL_DMA, &gf110_disp_base_ofuncs.base },
 +	{ GK104_DISP_OVERLAY_CONTROL_DMA, &gf110_disp_ovly_ofuncs.base },
 +	{ GK104_DISP_OVERLAY, &gf110_disp_oimm_ofuncs.base },
 +	{ GK104_DISP_CURSOR, &gf110_disp_curs_ofuncs.base },
 +	{}
++=======
+ static const struct nv50_disp_func
+ gm107_disp = {
+ 	.intr = gf119_disp_intr,
+ 	.uevent = &gf119_disp_chan_uevent,
+ 	.super = gf119_disp_intr_supervisor,
+ 	.root = &gm107_disp_root_oclass,
+ 	.head.vblank_init = gf119_disp_vblank_init,
+ 	.head.vblank_fini = gf119_disp_vblank_fini,
+ 	.head.scanoutpos = gf119_disp_root_scanoutpos,
+ 	.outp.internal.crt = nv50_dac_output_new,
+ 	.outp.internal.tmds = nv50_sor_output_new,
+ 	.outp.internal.lvds = nv50_sor_output_new,
+ 	.outp.internal.dp = gm107_sor_dp_new,
+ 	.dac.nr = 3,
+ 	.dac.power = nv50_dac_power,
+ 	.dac.sense = nv50_dac_sense,
+ 	.sor.nr = 4,
+ 	.sor.power = nv50_sor_power,
+ 	.sor.hda_eld = gf119_hda_eld,
+ 	.sor.hdmi = gk104_hdmi_ctrl,
++>>>>>>> 4691409b3e22 (drm/nouveau/disp/sor/gm107: training pattern registers are like gm200)
  };
  
 -int
 -gm107_disp_new(struct nvkm_device *device, int index, struct nvkm_disp **pdisp)
 +static struct nvkm_oclass
 +gm107_disp_main_oclass[] = {
 +	{ GM107_DISP, &gf110_disp_main_ofuncs },
 +	{}
 +};
 +
 +/*******************************************************************************
 + * Display engine implementation
 + ******************************************************************************/
 +
 +static int
 +gm107_disp_ctor(struct nvkm_object *parent, struct nvkm_object *engine,
 +		struct nvkm_oclass *oclass, void *data, u32 size,
 +		struct nvkm_object **pobject)
  {
 -	return gf119_disp_new_(&gm107_disp, device, index, pdisp);
 +	struct nv50_disp_priv *priv;
 +	int heads = nv_rd32(parent, 0x022448);
 +	int ret;
 +
 +	ret = nvkm_disp_create(parent, engine, oclass, heads,
 +			       "PDISP", "display", &priv);
 +	*pobject = nv_object(priv);
 +	if (ret)
 +		return ret;
 +
 +	ret = nvkm_event_init(&gf110_disp_chan_uevent, 1, 17, &priv->uevent);
 +	if (ret)
 +		return ret;
 +
 +	nv_engine(priv)->sclass = gm107_disp_main_oclass;
 +	nv_engine(priv)->cclass = &nv50_disp_cclass;
 +	nv_subdev(priv)->intr = gf110_disp_intr;
 +	INIT_WORK(&priv->supervisor, gf110_disp_intr_supervisor);
 +	priv->sclass = gm107_disp_sclass;
 +	priv->head.nr = heads;
 +	priv->dac.nr = 3;
 +	priv->sor.nr = 4;
 +	priv->dac.power = nv50_dac_power;
 +	priv->dac.sense = nv50_dac_sense;
 +	priv->sor.power = nv50_sor_power;
 +	priv->sor.hda_eld = gf110_hda_eld;
 +	priv->sor.hdmi = gk104_hdmi_ctrl;
 +	return 0;
  }
 +
 +struct nvkm_oclass *
 +gm107_disp_oclass = &(struct nv50_disp_impl) {
 +	.base.base.handle = NV_ENGINE(DISP, 0x07),
 +	.base.base.ofuncs = &(struct nvkm_ofuncs) {
 +		.ctor = gm107_disp_ctor,
 +		.dtor = _nvkm_disp_dtor,
 +		.init = _nvkm_disp_init,
 +		.fini = _nvkm_disp_fini,
 +	},
 +	.base.vblank = &gf110_disp_vblank_func,
 +	.base.outp =  gf110_disp_outp_sclass,
 +	.mthd.core = &gk104_disp_core_mthd_chan,
 +	.mthd.base = &gf110_disp_base_mthd_chan,
 +	.mthd.ovly = &gk104_disp_ovly_mthd_chan,
 +	.mthd.prev = -0x020000,
 +	.head.scanoutpos = gf110_disp_main_scanoutpos,
 +}.base.base;
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/outpdp.h
index 70c77aec4850,4e983f6d7032..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/outpdp.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/outpdp.h
@@@ -58,4 -44,30 +58,33 @@@ struct nvkm_output_dp_impl 
  };
  
  int nvkm_output_dp_train(struct nvkm_output *, u32 rate, bool wait);
++<<<<<<< HEAD
++=======
+ 
+ int nvkm_output_dp_ctor(const struct nvkm_output_dp_func *, struct nvkm_disp *,
+ 			int index, struct dcb_output *, struct nvkm_i2c_aux *,
+ 			struct nvkm_output_dp *);
+ int nvkm_output_dp_new_(const struct nvkm_output_dp_func *, struct nvkm_disp *,
+ 			int index, struct dcb_output *,
+ 			struct nvkm_output **);
+ 
+ int nv50_pior_dp_new(struct nvkm_disp *, int, struct dcb_output *,
+ 		     struct nvkm_output **);
+ 
+ int g94_sor_dp_new(struct nvkm_disp *, int, struct dcb_output *,
+ 		   struct nvkm_output **);
+ int g94_sor_dp_lnk_pwr(struct nvkm_output_dp *, int);
+ 
+ int gf119_sor_dp_new(struct nvkm_disp *, int, struct dcb_output *,
+ 		     struct nvkm_output **);
+ int gf119_sor_dp_lnk_ctl(struct nvkm_output_dp *, int, int, bool);
+ int gf119_sor_dp_drv_ctl(struct nvkm_output_dp *, int, int, int, int);
+ 
+ int gm107_sor_dp_new(struct nvkm_disp *, int, struct dcb_output *,
+ 		     struct nvkm_output **);
+ int gm107_sor_dp_pattern(struct nvkm_output_dp *, int);
+ 
+ int gm200_sor_dp_new(struct nvkm_disp *, int, struct dcb_output *,
+ 		     struct nvkm_output **);
++>>>>>>> 4691409b3e22 (drm/nouveau/disp/sor/gm107: training pattern registers are like gm200)
  #endif
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
index 1f02b603e19a,22706c0a54b5..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
@@@ -64,14 -63,14 +64,19 @@@ gf110_sor_dp_lnk_ctl(struct nvkm_output
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
 +static int
 +gf110_sor_dp_drv_ctl(struct nvkm_output_dp *outp,
++=======
+ int
+ gf119_sor_dp_drv_ctl(struct nvkm_output_dp *outp,
++>>>>>>> 4691409b3e22 (drm/nouveau/disp/sor/gm107: training pattern registers are like gm200):drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf119.c
  		     int ln, int vs, int pe, int pc)
  {
 -	struct nvkm_device *device = outp->base.disp->engine.subdev.device;
 -	struct nvkm_bios *bios = device->bios;
 -	const u32 shift = g94_sor_dp_lane_map(device, ln);
 -	const u32 loff = gf119_sor_loff(outp);
 +	struct nv50_disp_priv *priv = (void *)nvkm_disp(outp);
 +	struct nvkm_bios *bios = nvkm_bios(priv);
 +	const u32 shift = g94_sor_dp_lane_map(priv, ln);
 +	const u32 loff = gf110_sor_loff(outp);
  	u32 addr, data[4];
  	u8  ver, hdr, cnt, len;
  	struct nvbios_dpout info;
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgm200.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/Kbuild
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/gm107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/outpdp.h
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgm107.c b/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgm107.c
new file mode 100644
index 000000000000..37790b2617c5
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgm107.c
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2016 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Ben Skeggs <bskeggs@redhat.com>
+ */
+#include "nv50.h"
+#include "outpdp.h"
+
+int
+gm107_sor_dp_pattern(struct nvkm_output_dp *outp, int pattern)
+{
+	struct nvkm_device *device = outp->base.disp->engine.subdev.device;
+	const u32 soff = outp->base.or * 0x800;
+	const u32 data = 0x01010101 * pattern;
+	if (outp->base.info.sorconf.link & 1)
+		nvkm_mask(device, 0x61c110 + soff, 0x0f0f0f0f, data);
+	else
+		nvkm_mask(device, 0x61c12c + soff, 0x0f0f0f0f, data);
+	return 0;
+}
+
+static const struct nvkm_output_dp_func
+gm107_sor_dp_func = {
+	.pattern = gm107_sor_dp_pattern,
+	.lnk_pwr = g94_sor_dp_lnk_pwr,
+	.lnk_ctl = gf119_sor_dp_lnk_ctl,
+	.drv_ctl = gf119_sor_dp_drv_ctl,
+};
+
+int
+gm107_sor_dp_new(struct nvkm_disp *disp, int index,
+		 struct dcb_output *dcbE, struct nvkm_output **poutp)
+{
+	return nvkm_output_dp_new_(&gm107_sor_dp_func, disp, index, dcbE, poutp);
+}
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgm200.c
