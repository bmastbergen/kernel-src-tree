printk: Add printk_deferred_once

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author John Stultz <john.stultz@linaro.org>
commit c224815dac9c739b79050d3cc67443ff500bc478
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c224815d.failed

Two of the three prink_deferred uses are really printk_once style
uses, so add a printk_deferred_once macro to simplify those call
sites.

	Signed-off-by: John Stultz <john.stultz@linaro.org>
	Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Jiri Bohac <jbohac@suse.cz>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c224815dac9c739b79050d3cc67443ff500bc478)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
#	kernel/sched/rt.c
diff --cc kernel/sched/rt.c
index 27f9ed8f4b17,b3512f1afce9..000000000000
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@@ -846,14 -890,8 +846,16 @@@ static int sched_rt_runtime_exceeded(st
  		 * but accrue some time due to boosting.
  		 */
  		if (likely(rt_b->rt_runtime)) {
- 			static bool once = false;
- 
  			rt_rq->rt_throttled = 1;
++<<<<<<< HEAD
 +
 +			if (!once) {
 +				once = true;
 +				printk_sched("sched: RT throttling activated\n");
 +			}
++=======
+ 			printk_deferred_once("sched: RT throttling activated\n");
++>>>>>>> c224815dac9c (printk: Add printk_deferred_once)
  		} else {
  			/*
  			 * In case we did anyway, make it go away,
* Unmerged path kernel/sched/deadline.c
diff --git a/include/linux/printk.h b/include/linux/printk.h
index 2deb0b0f3cd4..b3a6e3029194 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -263,9 +263,20 @@ extern void dump_stack(void) __cold;
 		printk(fmt, ##__VA_ARGS__);	\
 	}					\
 })
+#define printk_deferred_once(fmt, ...)				\
+({								\
+	static bool __print_once __read_mostly;			\
+								\
+	if (!__print_once) {					\
+		__print_once = true;				\
+		printk_deferred(fmt, ##__VA_ARGS__);		\
+	}							\
+})
 #else
 #define printk_once(fmt, ...)			\
 	no_printk(fmt, ##__VA_ARGS__)
+#define printk_deferred_once(fmt, ...)				\
+	no_printk(fmt, ##__VA_ARGS__)
 #endif
 
 #define pr_emerg_once(fmt, ...)					\
* Unmerged path kernel/sched/deadline.c
* Unmerged path kernel/sched/rt.c
