usb: rename phy to usb_phy in HCD

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Antoine Tenart <antoine.tenart@free-electrons.com>
commit 3d46e73dfdb840f460e5b06416965d132570ec33
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3d46e73d.failed

The USB PHY member of the HCD structure is renamed to 'usb_phy' and
modifications are done in all drivers accessing it.
This is in preparation to adding the generic PHY support.

	Signed-off-by: Antoine Tenart <antoine.tenart@free-electrons.com>
[Sergei: added missing 'drivers/usb/misc/lvstest.c' file, resolved rejects,
updated changelog.]
	Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Acked-by: Felipe Balbi <balbi@ti.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 3d46e73dfdb840f460e5b06416965d132570ec33)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/chipidea/host.c
#	drivers/usb/core/hcd.c
#	drivers/usb/host/ehci-fsl.c
#	drivers/usb/host/ehci-msm.c
#	drivers/usb/host/ehci-tegra.c
#	drivers/usb/host/ohci-omap.c
diff --cc drivers/usb/chipidea/host.c
index 8e9d31277c43,ebde7b6ce687..000000000000
--- a/drivers/usb/chipidea/host.c
+++ b/drivers/usb/chipidea/host.c
@@@ -58,7 -59,8 +58,12 @@@ static int host_start(struct ci13xxx *c
  	hcd->has_tt = 1;
  
  	hcd->power_budget = ci->platdata->power_budget;
++<<<<<<< HEAD
 +	hcd->phy = ci->transceiver;
++=======
+ 	hcd->usb_phy = ci->transceiver;
+ 	hcd->tpl_support = ci->platdata->tpl_support;
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  
  	ehci = hcd_to_ehci(hcd);
  	ehci->caps = ci->hw_bank.cap;
diff --cc drivers/usb/core/hcd.c
index 28c5a88b883b,2c56252b9ff8..000000000000
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@@ -2796,6 -2789,12 +2796,15 @@@ err_allocate_root_hub
  	usb_deregister_bus(&hcd->self);
  err_register_bus:
  	hcd_buffer_destroy(hcd);
++<<<<<<< HEAD
++=======
+ err_remove_phy:
+ 	if (hcd->remove_phy && hcd->usb_phy) {
+ 		usb_phy_shutdown(hcd->usb_phy);
+ 		usb_put_phy(hcd->usb_phy);
+ 		hcd->usb_phy = NULL;
+ 	}
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  	return retval;
  }
  EXPORT_SYMBOL_GPL(usb_add_hcd);
@@@ -2867,6 -2866,11 +2876,14 @@@ void usb_remove_hcd(struct usb_hcd *hcd
  
  	usb_deregister_bus(&hcd->self);
  	hcd_buffer_destroy(hcd);
++<<<<<<< HEAD
++=======
+ 	if (hcd->remove_phy && hcd->usb_phy) {
+ 		usb_phy_shutdown(hcd->usb_phy);
+ 		usb_put_phy(hcd->usb_phy);
+ 		hcd->usb_phy = NULL;
+ 	}
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  
  	usb_put_invalidate_rhdev(hcd);
  }
diff --cc drivers/usb/host/ehci-fsl.c
index 1d866120aa2e,2d2ae8db439e..000000000000
--- a/drivers/usb/host/ehci-fsl.c
+++ b/drivers/usb/host/ehci-fsl.c
@@@ -143,16 -136,16 +143,21 @@@ static int usb_hcd_fsl_probe(const stru
  	if (pdata->operating_mode == FSL_USB2_DR_OTG) {
  		struct ehci_hcd *ehci = hcd_to_ehci(hcd);
  
- 		hcd->phy = usb_get_phy(USB_PHY_TYPE_USB2);
+ 		hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
  		dev_dbg(&pdev->dev, "hcd=0x%p  ehci=0x%p, phy=0x%p\n",
- 			hcd, ehci, hcd->phy);
+ 			hcd, ehci, hcd->usb_phy);
  
- 		if (!IS_ERR_OR_NULL(hcd->phy)) {
- 			retval = otg_set_host(hcd->phy->otg,
+ 		if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
+ 			retval = otg_set_host(hcd->usb_phy->otg,
  					      &ehci_to_hcd(ehci)->self);
  			if (retval) {
++<<<<<<< HEAD
 +				usb_put_phy(hcd->phy);
 +				goto err4;
++=======
+ 				usb_put_phy(hcd->usb_phy);
+ 				goto err2;
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  			}
  		} else {
  			dev_err(&pdev->dev, "can't find phy\n");
@@@ -190,11 -179,11 +195,11 @@@
  static void usb_hcd_fsl_remove(struct usb_hcd *hcd,
  			       struct platform_device *pdev)
  {
 -	struct fsl_usb2_platform_data *pdata = dev_get_platdata(&pdev->dev);
 +	struct fsl_usb2_platform_data *pdata = pdev->dev.platform_data;
  
- 	if (!IS_ERR_OR_NULL(hcd->phy)) {
- 		otg_set_host(hcd->phy->otg, NULL);
- 		usb_put_phy(hcd->phy);
+ 	if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
+ 		otg_set_host(hcd->usb_phy->otg, NULL);
+ 		usb_put_phy(hcd->usb_phy);
  	}
  
  	usb_remove_hcd(hcd);
diff --cc drivers/usb/host/ehci-msm.c
index 0f717dc688b7,9dc2118ae808..000000000000
--- a/drivers/usb/host/ehci-msm.c
+++ b/drivers/usb/host/ehci-msm.c
@@@ -121,6 -124,7 +121,10 @@@ static int ehci_msm_probe(struct platfo
  		goto put_hcd;
  	}
  
++<<<<<<< HEAD
++=======
+ 	hcd->usb_phy = phy;
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  	device_init_wakeup(&pdev->dev, 1);
  	/*
  	 * OTG device parent of HCD takes care of putting
@@@ -147,7 -151,7 +151,11 @@@ static int ehci_msm_remove(struct platf
  	pm_runtime_disable(&pdev->dev);
  	pm_runtime_set_suspended(&pdev->dev);
  
++<<<<<<< HEAD
 +	otg_set_host(phy->otg, NULL);
++=======
+ 	otg_set_host(hcd->usb_phy->otg, NULL);
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  
  	/* FIXME: need to call usb_remove_hcd() here? */
  
diff --cc drivers/usb/host/ehci-tegra.c
index 614c2089ef38,aaa01971efe9..000000000000
--- a/drivers/usb/host/ehci-tegra.c
+++ b/drivers/usb/host/ehci-tegra.c
@@@ -688,11 -443,18 +688,24 @@@ static int tegra_ehci_probe(struct plat
  
  	err = clk_prepare_enable(tegra->clk);
  	if (err)
 -		goto cleanup_hcd_create;
 +		goto fail_clk;
  
++<<<<<<< HEAD
 +	tegra_periph_reset_assert(tegra->clk);
 +	udelay(1);
 +	tegra_periph_reset_deassert(tegra->clk);
++=======
+ 	err = tegra_reset_usb_controller(pdev);
+ 	if (err)
+ 		goto cleanup_clk_en;
+ 
+ 	u_phy = devm_usb_get_phy_by_phandle(&pdev->dev, "nvidia,phy", 0);
+ 	if (IS_ERR(u_phy)) {
+ 		err = PTR_ERR(u_phy);
+ 		goto cleanup_clk_en;
+ 	}
+ 	hcd->usb_phy = u_phy;
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  
  	tegra->needs_double_reset = of_property_read_bool(pdev->dev.of_node,
  		"nvidia,needs-double-reset");
@@@ -705,49 -467,20 +718,56 @@@
  	}
  	hcd->rsrc_start = res->start;
  	hcd->rsrc_len = resource_size(res);
 -	hcd->regs = devm_ioremap_resource(&pdev->dev, res);
 -	if (IS_ERR(hcd->regs)) {
 -		err = PTR_ERR(hcd->regs);
 -		goto cleanup_clk_en;
 +	hcd->regs = devm_ioremap(&pdev->dev, res->start, resource_size(res));
 +	if (!hcd->regs) {
 +		dev_err(&pdev->dev, "Failed to remap I/O memory\n");
 +		err = -ENOMEM;
 +		goto fail_io;
  	}
 -	ehci->caps = hcd->regs + 0x100;
 -	ehci->has_hostpc = soc_config->has_hostpc;
  
++<<<<<<< HEAD
 +	/* This is pretty ugly and needs to be fixed when we do only
 +	 * device-tree probing. Old code relies on the platform_device
 +	 * numbering that we lack for device-tree-instantiated devices.
 +	 */
 +	if (instance < 0) {
 +		switch (res->start) {
 +		case TEGRA_USB_BASE:
 +			instance = 0;
 +			break;
 +		case TEGRA_USB2_BASE:
 +			instance = 1;
 +			break;
 +		case TEGRA_USB3_BASE:
 +			instance = 2;
 +			break;
 +		default:
 +			err = -ENODEV;
 +			dev_err(&pdev->dev, "unknown usb instance\n");
 +			goto fail_io;
 +		}
++=======
+ 	err = usb_phy_init(hcd->usb_phy);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "Failed to initialize phy\n");
+ 		goto cleanup_clk_en;
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
 +	}
 +
 +	tegra->phy = tegra_usb_phy_open(&pdev->dev, instance, hcd->regs,
 +					pdata->phy_config,
 +					TEGRA_USB_PHY_MODE_HOST,
 +					tegra_ehci_set_pts,
 +					tegra_ehci_set_phcd);
 +	if (IS_ERR(tegra->phy)) {
 +		dev_err(&pdev->dev, "Failed to open USB phy\n");
 +		err = -ENXIO;
 +		goto fail_io;
  	}
  
 +	hcd->phy = u_phy = &tegra->phy->u_phy;
 +	usb_phy_init(hcd->phy);
 +
  	u_phy->otg = devm_kzalloc(&pdev->dev, sizeof(struct usb_otg),
  			     GFP_KERNEL);
  	if (!u_phy->otg) {
@@@ -757,15 -490,12 +777,15 @@@
  	}
  	u_phy->otg->host = hcd_to_bus(hcd);
  
- 	err = usb_phy_set_suspend(hcd->phy, 0);
+ 	err = usb_phy_set_suspend(hcd->usb_phy, 0);
  	if (err) {
  		dev_err(&pdev->dev, "Failed to power on the phy\n");
 -		goto cleanup_phy;
 +		goto fail_phy;
  	}
  
 +	tegra->host_resumed = 1;
 +	tegra->ehci = hcd_to_ehci(hcd);
 +
  	irq = platform_get_irq(pdev, 0);
  	if (!irq) {
  		dev_err(&pdev->dev, "Failed to get IRQ\n");
@@@ -785,46 -508,33 +805,58 @@@
  	err = usb_add_hcd(hcd, irq, IRQF_SHARED);
  	if (err) {
  		dev_err(&pdev->dev, "Failed to add USB HCD\n");
 -		goto cleanup_otg_set_host;
 +		goto fail;
  	}
 -	device_wakeup_enable(hcd->self.controller);
  
 +	pm_runtime_set_active(&pdev->dev);
 +	pm_runtime_get_noresume(&pdev->dev);
 +
 +	/* Don't skip the pm_runtime_forbid call if wakeup isn't working */
 +	/* if (!pdata->power_down_on_bus_suspend) */
 +		pm_runtime_forbid(&pdev->dev);
 +	pm_runtime_enable(&pdev->dev);
 +	pm_runtime_put_sync(&pdev->dev);
  	return err;
  
++<<<<<<< HEAD
 +fail:
 +	if (!IS_ERR(tegra->transceiver))
 +		otg_set_host(tegra->transceiver->otg, NULL);
 +fail_phy:
 +	usb_phy_shutdown(hcd->phy);
 +fail_io:
++=======
+ cleanup_otg_set_host:
+ 	otg_set_host(u_phy->otg, NULL);
+ cleanup_phy:
+ 	usb_phy_shutdown(hcd->usb_phy);
+ cleanup_clk_en:
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  	clk_disable_unprepare(tegra->clk);
 -cleanup_hcd_create:
 +fail_clk:
  	usb_put_hcd(hcd);
  	return err;
  }
  
  static int tegra_ehci_remove(struct platform_device *pdev)
  {
 -	struct usb_hcd *hcd = platform_get_drvdata(pdev);
 -	struct tegra_ehci_hcd *tegra =
 -		(struct tegra_ehci_hcd *)hcd_to_ehci(hcd)->priv;
 +	struct tegra_ehci_hcd *tegra = platform_get_drvdata(pdev);
 +	struct usb_hcd *hcd = ehci_to_hcd(tegra->ehci);
  
++<<<<<<< HEAD
 +	pm_runtime_get_sync(&pdev->dev);
 +	pm_runtime_disable(&pdev->dev);
 +	pm_runtime_put_noidle(&pdev->dev);
 +
 +	if (!IS_ERR(tegra->transceiver))
 +		otg_set_host(tegra->transceiver->otg, NULL);
++=======
+ 	otg_set_host(hcd->usb_phy->otg, NULL);
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  
- 	usb_phy_shutdown(hcd->phy);
+ 	usb_phy_shutdown(hcd->usb_phy);
  	usb_remove_hcd(hcd);
 +	usb_put_hcd(hcd);
  
  	clk_disable_unprepare(tegra->clk);
  
diff --cc drivers/usb/host/ohci-omap.c
index b1d32fb4a7ae,0231606d47c2..000000000000
--- a/drivers/usb/host/ohci-omap.c
+++ b/drivers/usb/host/ohci-omap.c
@@@ -402,10 -396,12 +402,17 @@@ err0
  static inline void
  usb_hcd_omap_remove (struct usb_hcd *hcd, struct platform_device *pdev)
  {
 -	dev_dbg(hcd->self.controller, "stopping USB Controller\n");
  	usb_remove_hcd(hcd);
++<<<<<<< HEAD
 +	if (!IS_ERR_OR_NULL(hcd->phy)) {
 +		(void) otg_set_host(hcd->phy->otg, 0);
 +		usb_put_phy(hcd->phy);
++=======
+ 	omap_ohci_clock_power(0);
+ 	if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
+ 		(void) otg_set_host(hcd->usb_phy->otg, 0);
+ 		usb_put_phy(hcd->usb_phy);
++>>>>>>> 3d46e73dfdb8 (usb: rename phy to usb_phy in HCD)
  	}
  	if (machine_is_omap_osk())
  		gpio_free(9);
* Unmerged path drivers/usb/chipidea/host.c
* Unmerged path drivers/usb/core/hcd.c
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index 820ddf2f8ff4..4695a2684362 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -4473,8 +4473,8 @@ hub_port_init (struct usb_hub *hub, struct usb_device *udev, int port1,
 	if (retval)
 		goto fail;
 
-	if (hcd->phy && !hdev->parent)
-		usb_phy_notify_connect(hcd->phy, udev->speed);
+	if (hcd->usb_phy && !hdev->parent)
+		usb_phy_notify_connect(hcd->usb_phy, udev->speed);
 
 	/*
 	 * Some superspeed devices have finished the link training process
@@ -4632,9 +4632,9 @@ static void hub_port_connect(struct usb_hub *hub, int port1, u16 portstatus,
 
 	/* Disconnect any existing devices under this port */
 	if (udev) {
-		if (hcd->phy && !hdev->parent &&
+		if (hcd->usb_phy && !hdev->parent &&
 				!(portstatus & USB_PORT_STAT_CONNECTION))
-			usb_phy_notify_disconnect(hcd->phy, udev->speed);
+			usb_phy_notify_disconnect(hcd->usb_phy, udev->speed);
 		usb_disconnect(&port_dev->child);
 	}
 
* Unmerged path drivers/usb/host/ehci-fsl.c
diff --git a/drivers/usb/host/ehci-hub.c b/drivers/usb/host/ehci-hub.c
index 9290f686ce10..8675ecff0ddd 100644
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@ -932,7 +932,7 @@ static int ehci_hub_control (
 #ifdef CONFIG_USB_OTG
 			if ((hcd->self.otg_port == (wIndex + 1))
 			    && hcd->self.b_hnp_enable) {
-				otg_start_hnp(hcd->phy->otg);
+				otg_start_hnp(hcd->usb_phy->otg);
 				break;
 			}
 #endif
* Unmerged path drivers/usb/host/ehci-msm.c
* Unmerged path drivers/usb/host/ehci-tegra.c
* Unmerged path drivers/usb/host/ohci-omap.c
diff --git a/drivers/usb/misc/lvstest.c b/drivers/usb/misc/lvstest.c
index 7d589c156fb1..62cb8cd08403 100644
--- a/drivers/usb/misc/lvstest.c
+++ b/drivers/usb/misc/lvstest.c
@@ -333,13 +333,13 @@ static void lvs_rh_work(struct work_struct *work)
 					USB_PORT_STAT_CONNECTION) {
 				lvs->present = true;
 				lvs->portnum = i;
-				if (hcd->phy)
-					usb_phy_notify_connect(hcd->phy,
+				if (hcd->usb_phy)
+					usb_phy_notify_connect(hcd->usb_phy,
 							USB_SPEED_SUPER);
 			} else {
 				lvs->present = false;
-				if (hcd->phy)
-					usb_phy_notify_disconnect(hcd->phy,
+				if (hcd->usb_phy)
+					usb_phy_notify_disconnect(hcd->usb_phy,
 							USB_SPEED_SUPER);
 			}
 			break;
diff --git a/include/linux/usb/hcd.h b/include/linux/usb/hcd.h
index 8845ed2f1978..7211c6fa5b6b 100644
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -106,7 +106,7 @@ struct usb_hcd {
 	 * OTG and some Host controllers need software interaction with phys;
 	 * other external phys should be software-transparent
 	 */
-	struct usb_phy	*phy;
+	struct usb_phy		*usb_phy;
 
 	/* Flags that need to be manipulated atomically because they can
 	 * change while the host controller is running.  Always use
