mmc: core: Enable / disable re-tuning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] core: Enable / disable re-tuning (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 92.75%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 79d5a65aeea43920bf3ff60791f317570dd6f54f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/79d5a65a.failed

Enable re-tuning when tuning is executed and
disable re-tuning when card is no longer initialized.

In the case of SDIO suspend, the card can keep power.
In that case, re-tuning need not be disabled, but, if
a re-tuning timer is being used, ensure it is disabled
and assume that re-tuning will be needed upon resume
since it is not known how long the suspend will last.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 79d5a65aeea43920bf3ff60791f317570dd6f54f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/core.c
diff --cc drivers/mmc/core/core.c
index adeeff71cddc,007c44443332..000000000000
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@@ -1087,6 -1089,32 +1087,35 @@@ void mmc_set_ungated(struct mmc_host *h
  }
  #endif
  
++<<<<<<< HEAD
++=======
+ int mmc_execute_tuning(struct mmc_card *card)
+ {
+ 	struct mmc_host *host = card->host;
+ 	u32 opcode;
+ 	int err;
+ 
+ 	if (!host->ops->execute_tuning)
+ 		return 0;
+ 
+ 	if (mmc_card_mmc(card))
+ 		opcode = MMC_SEND_TUNING_BLOCK_HS200;
+ 	else
+ 		opcode = MMC_SEND_TUNING_BLOCK;
+ 
+ 	mmc_host_clk_hold(host);
+ 	err = host->ops->execute_tuning(host, opcode);
+ 	mmc_host_clk_release(host);
+ 
+ 	if (err)
+ 		pr_err("%s: tuning execution failed\n", mmc_hostname(host));
+ 	else
+ 		mmc_retune_enable(host);
+ 
+ 	return err;
+ }
+ 
++>>>>>>> 79d5a65aeea4 (mmc: core: Enable / disable re-tuning)
  /*
   * Change the bus mode (open drain/push-pull) of a host.
   */
@@@ -1109,6 -1137,24 +1138,27 @@@ void mmc_set_bus_width(struct mmc_host 
  	mmc_host_clk_release(host);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Set initial state after a power cycle or a hw_reset.
+  */
+ void mmc_set_initial_state(struct mmc_host *host)
+ {
+ 	mmc_retune_disable(host);
+ 
+ 	if (mmc_host_is_spi(host))
+ 		host->ios.chip_select = MMC_CS_HIGH;
+ 	else
+ 		host->ios.chip_select = MMC_CS_DONTCARE;
+ 	host->ios.bus_mode = MMC_BUSMODE_PUSHPULL;
+ 	host->ios.bus_width = MMC_BUS_WIDTH_1;
+ 	host->ios.timing = MMC_TIMING_LEGACY;
+ 
+ 	mmc_set_ios(host);
+ }
+ 
++>>>>>>> 79d5a65aeea4 (mmc: core: Enable / disable re-tuning)
  /**
   * mmc_vdd_to_ocrbitnum - Convert a voltage to the OCR bit number
   * @vdd:	voltage (mV)
* Unmerged path drivers/mmc/core/core.c
diff --git a/drivers/mmc/core/sdio.c b/drivers/mmc/core/sdio.c
index d2f16e27144d..38ca0ad04b17 100644
--- a/drivers/mmc/core/sdio.c
+++ b/drivers/mmc/core/sdio.c
@@ -945,8 +945,12 @@ static int mmc_sdio_suspend(struct mmc_host *host)
 		mmc_release_host(host);
 	}
 
-	if (!mmc_card_keep_power(host))
+	if (!mmc_card_keep_power(host)) {
 		mmc_power_off(host);
+	} else if (host->retune_period) {
+		mmc_retune_timer_stop(host);
+		mmc_retune_needed(host);
+	}
 
 	return 0;
 }
