mmc: sdhci: move setting host->clock into sdhci_do_set_ios()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: move setting host->clock into sdhci_do_set_ios() (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 95.65%
commit-author Russell King <rmk+kernel@arm.linux.org.uk>
commit 373073efd06528867df963724a93f29c7d5534d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/373073ef.failed

We don't need implementations to do this, since the only time it's
necessary is when we change the clock, and the only place that happens
is in sdhci_do_set_ios().  So, move it there, and remove it from the
iMX platform backend.

	Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
	Tested-by: Markus Pargmann <mpa@pengutronix.de>
	Tested-by: Stephen Warren <swarren@nvidia.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Signed-off-by: Chris Ball <chris@printf.net>
(cherry picked from commit 373073efd06528867df963724a93f29c7d5534d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-esdhc-imx.c
#	drivers/mmc/host/sdhci-of-esdhc.c
#	drivers/mmc/host/sdhci-s3c.c
diff --cc drivers/mmc/host/sdhci-esdhc-imx.c
index 98f46704baa6,1e68a77c9987..000000000000
--- a/drivers/mmc/host/sdhci-esdhc-imx.c
+++ b/drivers/mmc/host/sdhci-esdhc-imx.c
@@@ -388,7 -586,65 +388,69 @@@ static unsigned int esdhc_pltfm_get_min
  {
  	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
  
++<<<<<<< HEAD
 +	return clk_get_rate(pltfm_host->clk) / 256 / 16;
++=======
+ 	return pltfm_host->clock / 256 / 16;
+ }
+ 
+ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
+ 					 unsigned int clock)
+ {
+ 	struct sdhci_pltfm_host *pltfm_host = sdhci_priv(host);
+ 	struct pltfm_imx_data *imx_data = pltfm_host->priv;
+ 	unsigned int host_clock = pltfm_host->clock;
+ 	int pre_div = 2;
+ 	int div = 1;
+ 	u32 temp, val;
+ 
+ 	if (clock == 0) {
+ 		if (esdhc_is_usdhc(imx_data)) {
+ 			val = readl(host->ioaddr + ESDHC_VENDOR_SPEC);
+ 			writel(val & ~ESDHC_VENDOR_SPEC_FRC_SDCLK_ON,
+ 					host->ioaddr + ESDHC_VENDOR_SPEC);
+ 		}
+ 		return;
+ 	}
+ 
+ 	if (esdhc_is_usdhc(imx_data) && !imx_data->is_ddr)
+ 		pre_div = 1;
+ 
+ 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+ 	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
+ 		| ESDHC_CLOCK_MASK);
+ 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+ 
+ 	while (host_clock / pre_div / 16 > clock && pre_div < 256)
+ 		pre_div *= 2;
+ 
+ 	while (host_clock / pre_div / div > clock && div < 16)
+ 		div++;
+ 
+ 	host->mmc->actual_clock = host_clock / pre_div / div;
+ 	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
+ 		clock, host->mmc->actual_clock);
+ 
+ 	if (imx_data->is_ddr)
+ 		pre_div >>= 2;
+ 	else
+ 		pre_div >>= 1;
+ 	div--;
+ 
+ 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+ 	temp |= (ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
+ 		| (div << ESDHC_DIVIDER_SHIFT)
+ 		| (pre_div << ESDHC_PREDIV_SHIFT));
+ 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+ 
+ 	if (esdhc_is_usdhc(imx_data)) {
+ 		val = readl(host->ioaddr + ESDHC_VENDOR_SPEC);
+ 		writel(val | ESDHC_VENDOR_SPEC_FRC_SDCLK_ON,
+ 		host->ioaddr + ESDHC_VENDOR_SPEC);
+ 	}
+ 
+ 	mdelay(1);
++>>>>>>> 373073efd065 (mmc: sdhci: move setting host->clock into sdhci_do_set_ios())
  }
  
  static unsigned int esdhc_pltfm_get_ro(struct sdhci_host *host)
diff --cc drivers/mmc/host/sdhci-of-esdhc.c
index 37e668f5b992,d814b3ecb1f7..000000000000
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@@ -191,6 -199,14 +191,17 @@@ static unsigned int esdhc_of_get_min_cl
  
  static void esdhc_of_set_clock(struct sdhci_host *host, unsigned int clock)
  {
++<<<<<<< HEAD
++=======
+ 
+ 	int pre_div = 2;
+ 	int div = 1;
+ 	u32 temp;
+ 
+ 	if (clock == 0)
+ 		return;
+ 
++>>>>>>> 373073efd065 (mmc: sdhci: move setting host->clock into sdhci_do_set_ios())
  	/* Workaround to reduce the clock frequency for p1010 esdhc */
  	if (of_find_compatible_node(NULL, NULL, "fsl,p1010-esdhc")) {
  		if (clock > 20000000)
@@@ -199,8 -215,29 +210,34 @@@
  			clock -= 5000000;
  	}
  
++<<<<<<< HEAD
 +	/* Set the clock */
 +	esdhc_set_clock(host, clock);
++=======
+ 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+ 	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
+ 		| ESDHC_CLOCK_MASK);
+ 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+ 
+ 	while (host->max_clk / pre_div / 16 > clock && pre_div < 256)
+ 		pre_div *= 2;
+ 
+ 	while (host->max_clk / pre_div / div > clock && div < 16)
+ 		div++;
+ 
+ 	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
+ 		clock, host->max_clk / pre_div / div);
+ 
+ 	pre_div >>= 1;
+ 	div--;
+ 
+ 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+ 	temp |= (ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
+ 		| (div << ESDHC_DIVIDER_SHIFT)
+ 		| (pre_div << ESDHC_PREDIV_SHIFT));
+ 	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+ 	mdelay(1);
++>>>>>>> 373073efd065 (mmc: sdhci: move setting host->clock into sdhci_do_set_ios())
  }
  
  #ifdef CONFIG_PM
diff --cc drivers/mmc/host/sdhci-s3c.c
index 926aaf6acc67,269c3fd8b740..000000000000
--- a/drivers/mmc/host/sdhci-s3c.c
+++ b/drivers/mmc/host/sdhci-s3c.c
@@@ -296,9 -292,11 +296,15 @@@ static void sdhci_cmu_set_clock(struct 
  	unsigned long timeout;
  	u16 clk = 0;
  
++<<<<<<< HEAD
 +	/* don't bother if the clock is going off */
 +	if (clock == 0)
++=======
+ 	/* If the clock is going off, set to 0 at clock control register */
+ 	if (clock == 0) {
+ 		sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);
++>>>>>>> 373073efd065 (mmc: sdhci: move setting host->clock into sdhci_do_set_ios())
  		return;
 -	}
  
  	sdhci_s3c_set_clock(host, clock);
  
diff --git a/drivers/mmc/host/sdhci-cns3xxx.c b/drivers/mmc/host/sdhci-cns3xxx.c
index 95620e1983a8..b95b24d38398 100644
--- a/drivers/mmc/host/sdhci-cns3xxx.c
+++ b/drivers/mmc/host/sdhci-cns3xxx.c
@@ -33,7 +33,7 @@ static void sdhci_cns3xxx_set_clock(struct sdhci_host *host, unsigned int clock)
 	sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);
 
 	if (clock == 0)
-		goto out;
+		return;
 
 	while (host->max_clk / div > clock) {
 		/*
@@ -72,8 +72,6 @@ static void sdhci_cns3xxx_set_clock(struct sdhci_host *host, unsigned int clock)
 
 	clk |= SDHCI_CLOCK_CARD_EN;
 	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
-out:
-	host->clock = clock;
 }
 
 static const struct sdhci_ops sdhci_cns3xxx_ops = {
* Unmerged path drivers/mmc/host/sdhci-esdhc-imx.c
* Unmerged path drivers/mmc/host/sdhci-of-esdhc.c
* Unmerged path drivers/mmc/host/sdhci-s3c.c
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index e292d602646d..ced9c6db0bc9 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -1148,7 +1148,7 @@ static void sdhci_set_clock(struct sdhci_host *host, unsigned int clock)
 	sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);
 
 	if (clock == 0)
-		goto out;
+		return;
 
 	if (host->version >= SDHCI_SPEC_300) {
 		if (sdhci_readw(host, SDHCI_HOST_CONTROL2) &
@@ -1238,9 +1238,6 @@ clock_set:
 
 	clk |= SDHCI_CLOCK_CARD_EN;
 	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
-
-out:
-	host->clock = clock;
 }
 
 static int sdhci_set_power(struct sdhci_host *host, unsigned short power)
@@ -1438,8 +1435,10 @@ static void sdhci_do_set_ios(struct sdhci_host *host, struct mmc_ios *ios)
 		!(host->quirks2 & SDHCI_QUIRK2_PRESET_VALUE_BROKEN))
 		sdhci_enable_preset_value(host, false);
 
-	if (!ios->clock || ios->clock != host->clock)
+	if (!ios->clock || ios->clock != host->clock) {
 		sdhci_set_clock(host, ios->clock);
+		host->clock = ios->clock;
+	}
 
 	if (ios->power_mode == MMC_POWER_OFF)
 		vdd_bit = sdhci_set_power(host, -1);
