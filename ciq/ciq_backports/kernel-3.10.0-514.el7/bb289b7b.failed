Btrfs: fail on mismatched subvol and subvolid mount options

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Omar Sandoval <osandov@osandov.com>
commit bb289b7be62db84b9630ce00367444c810cada2c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bb289b7b.failed

There's nothing to stop a user from passing both subvol= and subvolid=
to mount, but if they don't refer to the same subvolume, someone is
going to be surprised at some point. Error out on this case, but allow
users to pass in both if they do match (which they could, for example,
get out of /proc/mounts).

	Reviewed-by: David Sterba <dsterba@suse.cz>
	Signed-off-by: Omar Sandoval <osandov@osandov.com>
	Signed-off-by: Chris Mason <clm@fb.com>
(cherry picked from commit bb289b7be62db84b9630ce00367444c810cada2c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/super.c
diff --cc fs/btrfs/super.c
index 656008880e8a,3ad97953537c..000000000000
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@@ -1221,12 -1215,27 +1222,31 @@@ static struct dentry *mount_subvol(cons
  	/* mount_subtree() drops our reference on the vfsmount. */
  	mnt = NULL;
  
++<<<<<<< HEAD
 +	if (!IS_ERR(root) && !is_subvolume_inode(root->d_inode)) {
++=======
+ 	if (!IS_ERR(root)) {
++>>>>>>> bb289b7be62d (Btrfs: fail on mismatched subvol and subvolid mount options)
  		struct super_block *s = root->d_sb;
- 		dput(root);
- 		root = ERR_PTR(-EINVAL);
- 		deactivate_locked_super(s);
- 		pr_err("BTRFS: '%s' is not a valid subvolume\n", subvol_name);
+ 		struct inode *root_inode = d_inode(root);
+ 		u64 root_objectid = BTRFS_I(root_inode)->root->root_key.objectid;
+ 
+ 		ret = 0;
+ 		if (!is_subvolume_inode(root_inode)) {
+ 			pr_err("BTRFS: '%s' is not a valid subvolume\n",
+ 			       subvol_name);
+ 			ret = -EINVAL;
+ 		}
+ 		if (subvol_objectid && root_objectid != subvol_objectid) {
+ 			pr_err("BTRFS: subvol '%s' does not match subvolid %llu\n",
+ 			       subvol_name, subvol_objectid);
+ 			ret = -EINVAL;
+ 		}
+ 		if (ret) {
+ 			dput(root);
+ 			root = ERR_PTR(ret);
+ 			deactivate_locked_super(s);
+ 		}
  	}
  
  out:
* Unmerged path fs/btrfs/super.c
