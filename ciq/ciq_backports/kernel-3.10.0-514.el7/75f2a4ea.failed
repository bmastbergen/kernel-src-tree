devres: Add devm_kasprintf and devm_kvasprintf API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Himangi Saraogi <himangi774@gmail.com>
commit 75f2a4ead5d5890ada9c2663a70fb58613c0d9f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/75f2a4ea.failed

devm_kasprintf() and devm_kvasprintf() are the managed counterparts
for kasprintf() and kvasprintf().

	Signed-off-by: Himangi Saraogi <himangi774@gmail.com>
	Acked-by: Julia Lawall <julia.lawall@lip6.fr>
	Acked-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 75f2a4ead5d5890ada9c2663a70fb58613c0d9f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/devres.c
diff --cc drivers/base/devres.c
index 545c4de412c3,69d9b0c89a01..000000000000
--- a/drivers/base/devres.c
+++ b/drivers/base/devres.c
@@@ -791,6 -791,87 +791,90 @@@ void * devm_kmalloc(struct device *dev
  EXPORT_SYMBOL_GPL(devm_kmalloc);
  
  /**
++<<<<<<< HEAD
++=======
+  * devm_kstrdup - Allocate resource managed space and
+  *                copy an existing string into that.
+  * @dev: Device to allocate memory for
+  * @s: the string to duplicate
+  * @gfp: the GFP mask used in the devm_kmalloc() call when
+  *       allocating memory
+  * RETURNS:
+  * Pointer to allocated string on success, NULL on failure.
+  */
+ char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp)
+ {
+ 	size_t size;
+ 	char *buf;
+ 
+ 	if (!s)
+ 		return NULL;
+ 
+ 	size = strlen(s) + 1;
+ 	buf = devm_kmalloc(dev, size, gfp);
+ 	if (buf)
+ 		memcpy(buf, s, size);
+ 	return buf;
+ }
+ EXPORT_SYMBOL_GPL(devm_kstrdup);
+ 
+ /**
+  * devm_kvasprintf - Allocate resource managed space
+  *			for the formatted string.
+  * @dev: Device to allocate memory for
+  * @gfp: the GFP mask used in the devm_kmalloc() call when
+  *       allocating memory
+  * @fmt: the formatted string to duplicate
+  * @ap: the list of tokens to be placed in the formatted string
+  * RETURNS:
+  * Pointer to allocated string on success, NULL on failure.
+  */
+ char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
+ 		      va_list ap)
+ {
+ 	unsigned int len;
+ 	char *p;
+ 	va_list aq;
+ 
+ 	va_copy(aq, ap);
+ 	len = vsnprintf(NULL, 0, fmt, aq);
+ 	va_end(aq);
+ 
+ 	p = devm_kmalloc(dev, len+1, gfp);
+ 	if (!p)
+ 		return NULL;
+ 
+ 	vsnprintf(p, len+1, fmt, ap);
+ 
+ 	return p;
+ }
+ EXPORT_SYMBOL(devm_kvasprintf);
+ 
+ /**
+  * devm_kasprintf - Allocate resource managed space
+  *		and copy an existing formatted string into that
+  * @dev: Device to allocate memory for
+  * @gfp: the GFP mask used in the devm_kmalloc() call when
+  *       allocating memory
+  * @fmt: the string to duplicate
+  * RETURNS:
+  * Pointer to allocated string on success, NULL on failure.
+  */
+ char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...)
+ {
+ 	va_list ap;
+ 	char *p;
+ 
+ 	va_start(ap, fmt);
+ 	p = devm_kvasprintf(dev, gfp, fmt, ap);
+ 	va_end(ap);
+ 
+ 	return p;
+ }
+ EXPORT_SYMBOL_GPL(devm_kasprintf);
+ 
+ /**
++>>>>>>> 75f2a4ead5d5 (devres: Add devm_kasprintf and devm_kvasprintf API)
   * devm_kfree - Resource-managed kfree
   * @dev: Device this memory belongs to
   * @p: Memory to free
* Unmerged path drivers/base/devres.c
diff --git a/include/linux/device.h b/include/linux/device.h
index 16fec9b06e34..c2b9a670814a 100644
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -623,6 +623,10 @@ extern int devres_release_group(struct device *dev, void *id);
 
 /* managed devm_k.alloc/kfree for device drivers */
 extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp);
+extern char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
+			     va_list ap);
+extern char *devm_kasprintf(struct device *dev, gfp_t gfp,
+			    const char *fmt, ...);
 static inline void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
 {
 	return devm_kmalloc(dev, size, gfp | __GFP_ZERO);
