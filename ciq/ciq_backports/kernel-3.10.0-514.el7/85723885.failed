perf record: Add --all-user/--all-kernel options

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 85723885feb823b4fc352b727ece0b6d00306c4d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/85723885.failed

Allow user to easily switch all events to user or kernel space with simple
--all-user or --all-kernel options.

This will be handy within perf mem/c2c wrappers to switch easily monitoring
modes.

Committer note:

Testing it:

  # perf record --all-kernel --all-user -a sleep 2
   Error: option `all-user' cannot be used with all-kernel
   Usage: perf record [<options>] [<command>]
      or: perf record [<options>] -- <command> [<options>]

        --all-user        Configure all used events to run in user space.
        --all-kernel      Configure all used events to run in kernel space.
  # perf record --all-user --all-kernel -a sleep 2
   Error: option `all-kernel' cannot be used with all-user
   Usage: perf record [<options>] [<command>]
      or: perf record [<options>] -- <command> [<options>]

        --all-kernel      Configure all used events to run in kernel space.
        --all-user        Configure all used events to run in user space.
  # perf record --all-user -a sleep 1
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 1.416 MB perf.data (162 samples) ]
  # perf report | grep '\[k\]'
  # perf record --all-kernel -a sleep 1
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 1.423 MB perf.data (296 samples) ]
  # perf report | grep '\[\.\]'
  #

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1455525293-8671-2-git-send-email-jolsa@kernel.org
[ Made those options to be mutually exclusive ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 85723885feb823b4fc352b727ece0b6d00306c4d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-record.txt
#	tools/perf/builtin-record.c
#	tools/perf/perf.h
#	tools/perf/util/evsel.c
diff --cc tools/perf/Documentation/perf-record.txt
index 0752b177a5e3,19aa17532a16..000000000000
--- a/tools/perf/Documentation/perf-record.txt
+++ b/tools/perf/Documentation/perf-record.txt
@@@ -294,6 -303,50 +294,53 @@@ symbolic names, e.g. on x86, ax, si. T
  --running-time::
  Record running and enabled time for read events (:S)
  
++<<<<<<< HEAD
++=======
+ -k::
+ --clockid::
+ Sets the clock id to use for the various time fields in the perf_event_type
+ records. See clock_gettime(). In particular CLOCK_MONOTONIC and
+ CLOCK_MONOTONIC_RAW are supported, some events might also allow
+ CLOCK_BOOTTIME, CLOCK_REALTIME and CLOCK_TAI.
+ 
+ -S::
+ --snapshot::
+ Select AUX area tracing Snapshot Mode. This option is valid only with an
+ AUX area tracing event. Optionally the number of bytes to capture per
+ snapshot can be specified. In Snapshot Mode, trace data is captured only when
+ signal SIGUSR2 is received.
+ 
+ --proc-map-timeout::
+ When processing pre-existing threads /proc/XXX/mmap, it may take a long time,
+ because the file may be huge. A time out is needed in such cases.
+ This option sets the time out limit. The default value is 500 ms.
+ 
+ --switch-events::
+ Record context switch events i.e. events of type PERF_RECORD_SWITCH or
+ PERF_RECORD_SWITCH_CPU_WIDE.
+ 
+ --clang-path=PATH::
+ Path to clang binary to use for compiling BPF scriptlets.
+ (enabled when BPF support is on)
+ 
+ --clang-opt=OPTIONS::
+ Options passed to clang when compiling BPF scriptlets.
+ (enabled when BPF support is on)
+ 
+ --vmlinux=PATH::
+ Specify vmlinux path which has debuginfo.
+ (enabled when BPF prologue is on)
+ 
+ --buildid-all::
+ Record build-id of all DSOs regardless whether it's actually hit or not.
+ 
+ --all-kernel::
+ Configure all used events to run in kernel space.
+ 
+ --all-user::
+ Configure all used events to run in user space.
+ 
++>>>>>>> 85723885feb8 (perf record: Add --all-user/--all-kernel options)
  SEE ALSO
  --------
  linkperf:perf-stat[1], linkperf:perf-list[1]
diff --cc tools/perf/builtin-record.c
index 9631fc84ef82,cf3a28d83066..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -907,6 -1131,29 +907,32 @@@ struct option __record_options[] = 
  		    " use -I ? to list register names", parse_regs),
  	OPT_BOOLEAN(0, "running-time", &record.opts.running_time,
  		    "Record running/enabled time of read (:S) events"),
++<<<<<<< HEAD
++=======
+ 	OPT_CALLBACK('k', "clockid", &record.opts,
+ 	"clockid", "clockid to use for events, see clock_gettime()",
+ 	parse_clockid),
+ 	OPT_STRING_OPTARG('S', "snapshot", &record.opts.auxtrace_snapshot_opts,
+ 			  "opts", "AUX area tracing Snapshot Mode", ""),
+ 	OPT_UINTEGER(0, "proc-map-timeout", &record.opts.proc_map_timeout,
+ 			"per thread proc mmap processing timeout in ms"),
+ 	OPT_BOOLEAN(0, "switch-events", &record.opts.record_switch_events,
+ 		    "Record context switch events"),
+ 	OPT_BOOLEAN_FLAG(0, "all-kernel", &record.opts.all_kernel,
+ 			 "Configure all used events to run in kernel space.",
+ 			 PARSE_OPT_EXCLUSIVE),
+ 	OPT_BOOLEAN_FLAG(0, "all-user", &record.opts.all_user,
+ 			 "Configure all used events to run in user space.",
+ 			 PARSE_OPT_EXCLUSIVE),
+ 	OPT_STRING(0, "clang-path", &llvm_param.clang_path, "clang path",
+ 		   "clang binary to use for compiling BPF scriptlets"),
+ 	OPT_STRING(0, "clang-opt", &llvm_param.clang_opt, "clang options",
+ 		   "options passed to clang when compiling BPF scriptlets"),
+ 	OPT_STRING(0, "vmlinux", &symbol_conf.vmlinux_name,
+ 		   "file", "vmlinux pathname"),
+ 	OPT_BOOLEAN(0, "buildid-all", &record.buildid_all,
+ 		    "Record build-id of all DSOs regardless of hits"),
++>>>>>>> 85723885feb8 (perf record: Add --all-user/--all-kernel options)
  	OPT_END()
  };
  
diff --cc tools/perf/perf.h
index 8f5281e2b276,5381a01c0610..000000000000
--- a/tools/perf/perf.h
+++ b/tools/perf/perf.h
@@@ -57,6 -57,9 +57,12 @@@ struct record_opts 
  	bool	     running_time;
  	bool	     full_auxtrace;
  	bool	     auxtrace_snapshot_mode;
++<<<<<<< HEAD
++=======
+ 	bool	     record_switch_events;
+ 	bool	     all_kernel;
+ 	bool	     all_user;
++>>>>>>> 85723885feb8 (perf record: Add --all-user/--all-kernel options)
  	unsigned int freq;
  	unsigned int mmap_pages;
  	unsigned int auxtrace_mmap_pages;
diff --cc tools/perf/util/evsel.c
index 7bee83c327e0,6ae20d0056de..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -776,6 -888,31 +776,34 @@@ void perf_evsel__config(struct perf_evs
  		attr->disabled = 0;
  		attr->enable_on_exec = 0;
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	clockid = opts->clockid;
+ 	if (opts->use_clockid) {
+ 		attr->use_clockid = 1;
+ 		attr->clockid = opts->clockid;
+ 	}
+ 
+ 	if (evsel->precise_max)
+ 		perf_event_attr__set_max_precise_ip(attr);
+ 
+ 	if (opts->all_user) {
+ 		attr->exclude_kernel = 1;
+ 		attr->exclude_user   = 0;
+ 	}
+ 
+ 	if (opts->all_kernel) {
+ 		attr->exclude_kernel = 0;
+ 		attr->exclude_user   = 1;
+ 	}
+ 
+ 	/*
+ 	 * Apply event specific term settings,
+ 	 * it overloads any global configuration.
+ 	 */
+ 	apply_config_terms(evsel, opts);
++>>>>>>> 85723885feb8 (perf record: Add --all-user/--all-kernel options)
  }
  
  static int perf_evsel__alloc_fd(struct perf_evsel *evsel, int ncpus, int nthreads)
* Unmerged path tools/perf/Documentation/perf-record.txt
* Unmerged path tools/perf/builtin-record.c
* Unmerged path tools/perf/perf.h
* Unmerged path tools/perf/util/evsel.c
