x86/microcode: Initialize the driver late when facilities are up

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode: Initialize the driver late when facilities are up (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 96.77%
commit-author Borislav Petkov <bp@suse.de>
commit 2d5be37d686c4dae8e60d20283d6f44ac2c44f65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2d5be37d.failed

Running microcode_init() from setup_arch() is a bad idea because
not even kmalloc() is ready at that point and the loader does
all kinds of allocations and init/registration with various
subsystems.

Make it a late initcall when required facilities are initialized
so that the microcode driver initialization can succeed too.

Reported-and-tested-by: Markus Trippelsdorf <markus@trippelsdorf.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20151120112400.GC4028@pd.tnic
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 2d5be37d686c4dae8e60d20283d6f44ac2c44f65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/core.c
#	arch/x86/kernel/setup.c
diff --cc arch/x86/kernel/cpu/microcode/core.c
index 9ca8f8b3983f,b3e94ef461fd..000000000000
--- a/arch/x86/kernel/cpu/microcode/core.c
+++ b/arch/x86/kernel/cpu/microcode/core.c
@@@ -569,35 -698,4 +569,39 @@@ static int __init microcode_init(void
  	return error;
  
  }
++<<<<<<< HEAD
 +module_init(microcode_init);
 +
 +static void __exit microcode_exit(void)
 +{
 +	struct cpuinfo_x86 *c = &cpu_data(0);
 +
 +	microcode_dev_exit();
 +
 +	unregister_hotcpu_notifier(&mc_cpu_notifier);
 +	unregister_syscore_ops(&mc_syscore_ops);
 +
 +	sysfs_remove_group(&cpu_subsys.dev_root->kobj,
 +			   &cpu_root_microcode_group);
 +
 +	get_online_cpus();
 +	mutex_lock(&microcode_mutex);
 +
 +	subsys_interface_unregister(&mc_cpu_interface);
 +
 +	mutex_unlock(&microcode_mutex);
 +	put_online_cpus();
 +
 +	platform_device_unregister(microcode_pdev);
 +
 +	microcode_ops = NULL;
 +
 +	if (c->x86_vendor == X86_VENDOR_AMD)
 +		exit_amd_microcode();
 +
 +	pr_info("Microcode Update Driver: v" MICROCODE_VERSION " removed.\n");
 +}
 +module_exit(microcode_exit);
++=======
+ late_initcall(microcode_init);
++>>>>>>> 2d5be37d686c (x86/microcode: Initialize the driver late when facilities are up)
diff --cc arch/x86/kernel/setup.c
index fb4a3b838d7f,d2bbe343fda7..000000000000
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@@ -1332,8 -1250,6 +1332,11 @@@ void __init setup_arch(char **cmdline_p
  	if (efi_enabled(EFI_BOOT))
  		efi_apply_memmap_quirks();
  #endif
++<<<<<<< HEAD
 +
 +	rh_check_supported();
++=======
++>>>>>>> 2d5be37d686c (x86/microcode: Initialize the driver late when facilities are up)
  }
  
  #ifdef CONFIG_X86_32
* Unmerged path arch/x86/kernel/cpu/microcode/core.c
* Unmerged path arch/x86/kernel/setup.c
