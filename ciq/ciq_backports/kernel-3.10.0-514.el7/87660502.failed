drm/i915/gen6+: Interpret mailbox error flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drm] i915/gen6+: Interpret mailbox error flags (Lyude Paul) [1341633 1355776]
Rebuild_FUZZ: 95.35%
commit-author Lyude <cpaul@redhat.com>
commit 87660502f1a4d51fb043e89a45d30c9917787c22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/87660502.failed

In order to add proper support for the SAGV, we need to be able to know
what the cause of a failure to change the SAGV through the pcode mailbox
was. The reasoning for this is that some very early pre-release Skylake
machines don't actually allow you to control the SAGV on them, and
indicate an invalid mailbox command was sent.

This also might come in handy in the future for debugging.

Changes since v1:
 - Add functions for interpreting gen6 mailbox error codes along with
   gen7+ error codes, and actually interpret those codes properly
 - Renamed patch to reflect new behavior

	Signed-off-by: Lyude <cpaul@redhat.com>
	Cc: Matt Roper <matthew.d.roper@intel.com>
	Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Cc: stable@vger.kernel.org
	Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-2-git-send-email-cpaul@redhat.com
[mlankhorst: -ENOSYS -> -ENXIO for checkpatch]
(cherry picked from commit 87660502f1a4d51fb043e89a45d30c9917787c22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg.h
#	drivers/gpu/drm/i915/intel_pm.c
diff --cc drivers/gpu/drm/i915/i915_reg.h
index bcce9fc478ee,7419fbfb145e..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -6220,40 -7112,53 +6220,65 @@@ enum skl_disp_power_wells 
  #define   VLV_RENDER_RC0_COUNT_EN		(1<<4)
  #define   VLV_MEDIA_RC6_COUNT_EN		(1<<1)
  #define   VLV_RENDER_RC6_COUNT_EN		(1<<0)
 -#define GEN6_GT_GFX_RC6				_MMIO(0x138108)
 -#define VLV_GT_RENDER_RC6			_MMIO(0x138108)
 -#define VLV_GT_MEDIA_RC6			_MMIO(0x13810C)
 +#define GEN6_GT_GFX_RC6				0x138108
 +#define VLV_GT_RENDER_RC6			0x138108
 +#define VLV_GT_MEDIA_RC6			0x13810C
  
 -#define GEN6_GT_GFX_RC6p			_MMIO(0x13810C)
 -#define GEN6_GT_GFX_RC6pp			_MMIO(0x138110)
 -#define VLV_RENDER_C0_COUNT			_MMIO(0x138118)
 -#define VLV_MEDIA_C0_COUNT			_MMIO(0x13811C)
 +#define GEN6_GT_GFX_RC6p			0x13810C
 +#define GEN6_GT_GFX_RC6pp			0x138110
 +#define VLV_RENDER_C0_COUNT			0x138118
 +#define VLV_MEDIA_C0_COUNT			0x13811C
  
 -#define GEN6_PCODE_MAILBOX			_MMIO(0x138124)
 +#define GEN6_PCODE_MAILBOX			0x138124
  #define   GEN6_PCODE_READY			(1<<31)
++<<<<<<< HEAD
 +#define   GEN6_READ_OC_PARAMS			0xc
++=======
+ #define   GEN6_PCODE_ERROR_MASK			0xFF
+ #define     GEN6_PCODE_SUCCESS			0x0
+ #define     GEN6_PCODE_ILLEGAL_CMD		0x1
+ #define     GEN6_PCODE_MIN_FREQ_TABLE_GT_RATIO_OUT_OF_RANGE 0x2
+ #define     GEN6_PCODE_TIMEOUT			0x3
+ #define     GEN6_PCODE_UNIMPLEMENTED_CMD	0xFF
+ #define     GEN7_PCODE_TIMEOUT			0x2
+ #define     GEN7_PCODE_ILLEGAL_DATA		0x3
+ #define     GEN7_PCODE_MIN_FREQ_TABLE_GT_RATIO_OUT_OF_RANGE 0x10
+ #define	  GEN6_PCODE_WRITE_RC6VIDS		0x4
+ #define	  GEN6_PCODE_READ_RC6VIDS		0x5
+ #define     GEN6_ENCODE_RC6_VID(mv)		(((mv) - 245) / 5)
+ #define     GEN6_DECODE_RC6_VID(vids)		(((vids) * 5) + 245)
+ #define   BDW_PCODE_DISPLAY_FREQ_CHANGE_REQ	0x18
+ #define   GEN9_PCODE_READ_MEM_LATENCY		0x6
+ #define     GEN9_MEM_LATENCY_LEVEL_MASK		0xFF
+ #define     GEN9_MEM_LATENCY_LEVEL_1_5_SHIFT	8
+ #define     GEN9_MEM_LATENCY_LEVEL_2_6_SHIFT	16
+ #define     GEN9_MEM_LATENCY_LEVEL_3_7_SHIFT	24
+ #define   SKL_PCODE_CDCLK_CONTROL		0x7
+ #define     SKL_CDCLK_PREPARE_FOR_CHANGE	0x3
+ #define     SKL_CDCLK_READY_FOR_CHANGE		0x1
++>>>>>>> 87660502f1a4 (drm/i915/gen6+: Interpret mailbox error flags)
  #define   GEN6_PCODE_WRITE_MIN_FREQ_TABLE	0x8
  #define   GEN6_PCODE_READ_MIN_FREQ_TABLE	0x9
 -#define   GEN6_READ_OC_PARAMS			0xc
 +#define	  GEN6_PCODE_WRITE_RC6VIDS		0x4
 +#define	  GEN6_PCODE_READ_RC6VIDS		0x5
  #define   GEN6_PCODE_READ_D_COMP		0x10
  #define   GEN6_PCODE_WRITE_D_COMP		0x11
 -#define   HSW_PCODE_DE_WRITE_FREQ_REQ		0x17
 +#define   GEN6_ENCODE_RC6_VID(mv)		(((mv) - 245) / 5)
 +#define   GEN6_DECODE_RC6_VID(vids)		(((vids) * 5) + 245)
  #define   DISPLAY_IPS_CONTROL			0x19
  #define	  HSW_PCODE_DYNAMIC_DUTY_CYCLE_CONTROL	0x1A
 -#define GEN6_PCODE_DATA				_MMIO(0x138128)
 +#define GEN6_PCODE_DATA				0x138128
  #define   GEN6_PCODE_FREQ_IA_RATIO_SHIFT	8
  #define   GEN6_PCODE_FREQ_RING_RATIO_SHIFT	16
 -#define GEN6_PCODE_DATA1			_MMIO(0x13812C)
 +#define GEN6_PCODE_DATA1			0x13812C
  
 -#define GEN6_GT_CORE_STATUS		_MMIO(0x138060)
 +#define   GEN9_PCODE_READ_MEM_LATENCY		0x6
 +#define   GEN9_MEM_LATENCY_LEVEL_MASK		0xFF
 +#define   GEN9_MEM_LATENCY_LEVEL_1_5_SHIFT	8
 +#define   GEN9_MEM_LATENCY_LEVEL_2_6_SHIFT	16
 +#define   GEN9_MEM_LATENCY_LEVEL_3_7_SHIFT	24
 +
 +#define GEN6_GT_CORE_STATUS		0x138060
  #define   GEN6_CORE_CPD_STATE_MASK	(7<<4)
  #define   GEN6_RCn_MASK			7
  #define   GEN6_RC0			0
diff --cc drivers/gpu/drm/i915/intel_pm.c
index 29a433e4d2d1,d0b745534585..000000000000
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@@ -6628,11 -7659,61 +6628,56 @@@ void intel_init_pm(struct drm_device *d
  	}
  }
  
+ static inline int gen6_check_mailbox_status(struct drm_i915_private *dev_priv)
+ {
+ 	uint32_t flags =
+ 		I915_READ_FW(GEN6_PCODE_MAILBOX) & GEN6_PCODE_ERROR_MASK;
+ 
+ 	switch (flags) {
+ 	case GEN6_PCODE_SUCCESS:
+ 		return 0;
+ 	case GEN6_PCODE_UNIMPLEMENTED_CMD:
+ 	case GEN6_PCODE_ILLEGAL_CMD:
+ 		return -ENXIO;
+ 	case GEN6_PCODE_MIN_FREQ_TABLE_GT_RATIO_OUT_OF_RANGE:
+ 		return -EOVERFLOW;
+ 	case GEN6_PCODE_TIMEOUT:
+ 		return -ETIMEDOUT;
+ 	default:
+ 		MISSING_CASE(flags)
+ 		return 0;
+ 	}
+ }
+ 
+ static inline int gen7_check_mailbox_status(struct drm_i915_private *dev_priv)
+ {
+ 	uint32_t flags =
+ 		I915_READ_FW(GEN6_PCODE_MAILBOX) & GEN6_PCODE_ERROR_MASK;
+ 
+ 	switch (flags) {
+ 	case GEN6_PCODE_SUCCESS:
+ 		return 0;
+ 	case GEN6_PCODE_ILLEGAL_CMD:
+ 		return -ENXIO;
+ 	case GEN7_PCODE_TIMEOUT:
+ 		return -ETIMEDOUT;
+ 	case GEN7_PCODE_ILLEGAL_DATA:
+ 		return -EINVAL;
+ 	case GEN7_PCODE_MIN_FREQ_TABLE_GT_RATIO_OUT_OF_RANGE:
+ 		return -EOVERFLOW;
+ 	default:
+ 		MISSING_CASE(flags);
+ 		return 0;
+ 	}
+ }
+ 
  int sandybridge_pcode_read(struct drm_i915_private *dev_priv, u32 mbox, u32 *val)
  {
+ 	int status;
+ 
  	WARN_ON(!mutex_is_locked(&dev_priv->rps.hw_lock));
  
 -	/* GEN6_PCODE_* are outside of the forcewake domain, we can
 -	 * use te fw I915_READ variants to reduce the amount of work
 -	 * required when reading/writing.
 -	 */
 -
 -	if (I915_READ_FW(GEN6_PCODE_MAILBOX) & GEN6_PCODE_READY) {
 +	if (I915_READ(GEN6_PCODE_MAILBOX) & GEN6_PCODE_READY) {
  		DRM_DEBUG_DRIVER("warning: pcode (read) mailbox access failed\n");
  		return -EAGAIN;
  	}
@@@ -6647,17 -7729,36 +6692,35 @@@
  		return -ETIMEDOUT;
  	}
  
 -	*val = I915_READ_FW(GEN6_PCODE_DATA);
 -	I915_WRITE_FW(GEN6_PCODE_DATA, 0);
 +	*val = I915_READ(GEN6_PCODE_DATA);
 +	I915_WRITE(GEN6_PCODE_DATA, 0);
  
+ 	if (INTEL_GEN(dev_priv) > 6)
+ 		status = gen7_check_mailbox_status(dev_priv);
+ 	else
+ 		status = gen6_check_mailbox_status(dev_priv);
+ 
+ 	if (status) {
+ 		DRM_DEBUG_DRIVER("warning: pcode (read) mailbox access failed: %d\n",
+ 				 status);
+ 		return status;
+ 	}
+ 
  	return 0;
  }
  
++<<<<<<< HEAD
 +int sandybridge_pcode_write(struct drm_i915_private *dev_priv, u32 mbox, u32 val)
++=======
+ int sandybridge_pcode_write(struct drm_i915_private *dev_priv,
+ 			    u32 mbox, u32 val)
++>>>>>>> 87660502f1a4 (drm/i915/gen6+: Interpret mailbox error flags)
  {
+ 	int status;
+ 
  	WARN_ON(!mutex_is_locked(&dev_priv->rps.hw_lock));
  
 -	/* GEN6_PCODE_* are outside of the forcewake domain, we can
 -	 * use te fw I915_READ variants to reduce the amount of work
 -	 * required when reading/writing.
 -	 */
 -
 -	if (I915_READ_FW(GEN6_PCODE_MAILBOX) & GEN6_PCODE_READY) {
 +	if (I915_READ(GEN6_PCODE_MAILBOX) & GEN6_PCODE_READY) {
  		DRM_DEBUG_DRIVER("warning: pcode (write) mailbox access failed\n");
  		return -EAGAIN;
  	}
@@@ -6671,8 -7773,19 +6734,19 @@@
  		return -ETIMEDOUT;
  	}
  
 -	I915_WRITE_FW(GEN6_PCODE_DATA, 0);
 +	I915_WRITE(GEN6_PCODE_DATA, 0);
  
+ 	if (INTEL_GEN(dev_priv) > 6)
+ 		status = gen7_check_mailbox_status(dev_priv);
+ 	else
+ 		status = gen6_check_mailbox_status(dev_priv);
+ 
+ 	if (status) {
+ 		DRM_DEBUG_DRIVER("warning: pcode (write) mailbox access failed: %d\n",
+ 				 status);
+ 		return status;
+ 	}
+ 
  	return 0;
  }
  
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
* Unmerged path drivers/gpu/drm/i915/intel_pm.c
