nvme: split command submission helpers out of pci.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 21d34711e1b5970acfb22bddf1fefbfbd7e0123b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/21d34711.failed

Create a new core.c and start by adding the command submission helpers
to it, which are already abstracted away from the actual hardware queues
by the block layer.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 21d34711e1b5970acfb22bddf1fefbfbd7e0123b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/core.c
#	drivers/block/nvme-core.c
#	drivers/nvme/host/Makefile
#	drivers/nvme/host/nvme.h
diff --cc drivers/block/nvme-core.c
index 2a6eb55ad96c,996356261c6b..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -881,61 -1027,23 +880,64 @@@ static irqreturn_t nvme_irq_check(int i
  	return IRQ_WAKE_THREAD;
  }
  
 -static int nvme_poll(struct blk_mq_hw_ctx *hctx, unsigned int tag)
 +struct sync_cmd_info {
 +	struct task_struct *task;
 +	u32 result;
 +	int status;
 +};
 +
 +static void sync_completion(struct nvme_queue *nvmeq, void *ctx,
 +						struct nvme_completion *cqe)
  {
 -	struct nvme_queue *nvmeq = hctx->driver_data;
 +	struct sync_cmd_info *cmdinfo = ctx;
 +	cmdinfo->result = le32_to_cpup(&cqe->result);
 +	cmdinfo->status = le16_to_cpup(&cqe->status) >> 1;
 +	wake_up_process(cmdinfo->task);
 +}
  
 -	if ((le16_to_cpu(nvmeq->cqes[nvmeq->cq_head].status) & 1) ==
 -	    nvmeq->cq_phase) {
 -		spin_lock_irq(&nvmeq->q_lock);
 -		__nvme_process_cq(nvmeq, &tag);
 -		spin_unlock_irq(&nvmeq->q_lock);
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +/*
 + * Returns 0 on success.  If the result is negative, it's a Linux error code;
 + * if the result is positive, it's an NVM Express status code
 + */
 +static int __nvme_submit_sync_cmd(struct request_queue *q,
 +		struct nvme_command *cmd, u32 *result, unsigned timeout)
 +{
 +	struct sync_cmd_info cmdinfo;
 +	struct nvme_cmd_info *cmd_rq;
 +	struct request *req;
 +	int res;
  
 -		if (tag == -1)
 -			return 1;
 -	}
 +	req = blk_mq_alloc_request(q, WRITE, GFP_KERNEL, false);
 +	if (IS_ERR(req))
 +		return PTR_ERR(req);
  
 -	return 0;
 +	cmdinfo.task = current;
 +	cmdinfo.status = -EINTR;
 +
 +	cmd->common.command_id = req->tag;
 +
 +	cmd_rq = blk_mq_rq_to_pdu(req);
 +	nvme_set_info(cmd_rq, &cmdinfo, sync_completion);
 +
 +	set_current_state(TASK_UNINTERRUPTIBLE);
 +	nvme_submit_cmd(cmd_rq->nvmeq, cmd);
 +	schedule();
 +
 +	if (result)
 +		*result = cmdinfo.result;
 +	res = cmdinfo.status;
 +	blk_mq_free_request(req);
 +	return res;
 +}
 +
 +int nvme_submit_sync_cmd(struct request_queue *q, struct nvme_command *cmd)
 +{
 +	return __nvme_submit_sync_cmd(q, cmd, NULL, 0);
  }
  
++=======
++>>>>>>> 21d34711e1b5 (nvme: split command submission helpers out of pci.c):drivers/nvme/host/pci.c
  static int nvme_submit_async_admin_req(struct nvme_dev *dev)
  {
  	struct nvme_queue *nvmeq = dev->queues[0];
@@@ -1039,48 -1156,6 +1041,51 @@@ static int adapter_delete_sq(struct nvm
  	return adapter_delete_queue(dev, nvme_admin_delete_sq, sqid);
  }
  
++<<<<<<< HEAD:drivers/block/nvme-core.c
 +int nvme_identify(struct nvme_dev *dev, unsigned nsid, unsigned cns,
 +							dma_addr_t dma_addr)
 +{
 +	struct nvme_command c;
 +
 +	memset(&c, 0, sizeof(c));
 +	c.identify.opcode = nvme_admin_identify;
 +	c.identify.nsid = cpu_to_le32(nsid);
 +	c.identify.prp1 = cpu_to_le64(dma_addr);
 +	c.identify.cns = cpu_to_le32(cns);
 +
 +	return nvme_submit_sync_cmd(dev->admin_q, &c);
 +}
 +
 +int nvme_get_features(struct nvme_dev *dev, unsigned fid, unsigned nsid,
 +					dma_addr_t dma_addr, u32 *result)
 +{
 +	struct nvme_command c;
 +
 +	memset(&c, 0, sizeof(c));
 +	c.features.opcode = nvme_admin_get_features;
 +	c.features.nsid = cpu_to_le32(nsid);
 +	c.features.prp1 = cpu_to_le64(dma_addr);
 +	c.features.fid = cpu_to_le32(fid);
 +
 +	return __nvme_submit_sync_cmd(dev->admin_q, &c, result, 0);
 +}
 +
 +int nvme_set_features(struct nvme_dev *dev, unsigned fid, unsigned dword11,
 +					dma_addr_t dma_addr, u32 *result)
 +{
 +	struct nvme_command c;
 +
 +	memset(&c, 0, sizeof(c));
 +	c.features.opcode = nvme_admin_set_features;
 +	c.features.prp1 = cpu_to_le64(dma_addr);
 +	c.features.fid = cpu_to_le32(fid);
 +	c.features.dword11 = cpu_to_le32(dword11);
 +
 +	return __nvme_submit_sync_cmd(dev->admin_q, &c, result, 0);
 +}
 +
++=======
++>>>>>>> 21d34711e1b5 (nvme: split command submission helpers out of pci.c):drivers/nvme/host/pci.c
  /**
   * nvme_abort_req - Attempt aborting a request
   *
* Unmerged path drivers/block/core.c
* Unmerged path drivers/nvme/host/Makefile
* Unmerged path drivers/nvme/host/nvme.h
* Unmerged path drivers/block/core.c
* Unmerged path drivers/block/nvme-core.c
* Unmerged path drivers/nvme/host/Makefile
* Unmerged path drivers/nvme/host/nvme.h
