mmc: sdhci: convert sdhci_set_clock() into a library function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Russell King <rmk+kernel@arm.linux.org.uk>
commit 1771059cf5f9c09e37ef6315df8acf120f2642fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1771059c.failed

	Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
	Tested-by: Markus Pargmann <mpa@pengutronix.de>
	Tested-by: Stephen Warren <swarren@nvidia.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Signed-off-by: Chris Ball <chris@printf.net>
(cherry picked from commit 1771059cf5f9c09e37ef6315df8acf120f2642fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-dove.c
#	drivers/mmc/host/sdhci-of-arasan.c
#	drivers/mmc/host/sdhci-of-hlwd.c
#	drivers/mmc/host/sdhci-pltfm.c
#	drivers/mmc/host/sdhci-pxav3.c
#	drivers/mmc/host/sdhci-s3c.c
#	drivers/mmc/host/sdhci-spear.c
#	drivers/mmc/host/sdhci-tegra.c
#	drivers/mmc/host/sdhci.c
#	drivers/mmc/host/sdhci.h
diff --cc drivers/mmc/host/sdhci-dove.c
index 8424839660f8,8ef4ab52f8e0..000000000000
--- a/drivers/mmc/host/sdhci-dove.c
+++ b/drivers/mmc/host/sdhci-dove.c
@@@ -86,6 -86,9 +86,12 @@@ static u32 sdhci_dove_readl(struct sdhc
  static const struct sdhci_ops sdhci_dove_ops = {
  	.read_w	= sdhci_dove_readw,
  	.read_l	= sdhci_dove_readl,
++<<<<<<< HEAD
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_dove_pdata = {
diff --cc drivers/mmc/host/sdhci-of-hlwd.c
index 57c514a81ca5,a4a1f0f2c0a0..000000000000
--- a/drivers/mmc/host/sdhci-of-hlwd.c
+++ b/drivers/mmc/host/sdhci-of-hlwd.c
@@@ -58,6 -58,9 +58,12 @@@ static const struct sdhci_ops sdhci_hlw
  	.write_l = sdhci_hlwd_writel,
  	.write_w = sdhci_hlwd_writew,
  	.write_b = sdhci_hlwd_writeb,
++<<<<<<< HEAD
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_hlwd_pdata = {
diff --cc drivers/mmc/host/sdhci-pltfm.c
index bef250e95418,1fb89f44bd58..000000000000
--- a/drivers/mmc/host/sdhci-pltfm.c
+++ b/drivers/mmc/host/sdhci-pltfm.c
@@@ -45,6 -45,9 +45,12 @@@ unsigned int sdhci_pltfm_clk_get_max_cl
  EXPORT_SYMBOL_GPL(sdhci_pltfm_clk_get_max_clock);
  
  static const struct sdhci_ops sdhci_pltfm_ops = {
++<<<<<<< HEAD
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  };
  
  #ifdef CONFIG_OF
diff --cc drivers/mmc/host/sdhci-pxav3.c
index 56d9bee93d8f,8a40e079a57e..000000000000
--- a/drivers/mmc/host/sdhci-pxav3.c
+++ b/drivers/mmc/host/sdhci-pxav3.c
@@@ -168,7 -225,7 +168,11 @@@ static int pxav3_set_uhs_signaling(stru
  }
  
  static const struct sdhci_ops pxav3_sdhci_ops = {
++<<<<<<< HEAD
 +	.platform_reset_exit = pxav3_set_private_registers,
++=======
+ 	.set_clock = sdhci_set_clock,
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  	.set_uhs_signaling = pxav3_set_uhs_signaling,
  	.platform_send_init_74_clocks = pxav3_gen_init_74_clocks,
  	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
diff --cc drivers/mmc/host/sdhci-s3c.c
index 926aaf6acc67,9e6f1c52982c..000000000000
--- a/drivers/mmc/host/sdhci-s3c.c
+++ b/drivers/mmc/host/sdhci-s3c.c
@@@ -57,6 -54,9 +57,12 @@@ struct sdhci_s3c 
  
  	struct clk		*clk_io;
  	struct clk		*clk_bus[MAX_BUS_CLK];
++<<<<<<< HEAD
++=======
+ 	unsigned long		clk_rates[MAX_BUS_CLK];
+ 
+ 	bool			no_divider;
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  };
  
  /**
@@@ -188,9 -161,13 +195,11 @@@ static void sdhci_s3c_set_clock(struct 
  	int src;
  	u32 ctrl;
  
 -	host->mmc->actual_clock = 0;
 -
  	/* don't bother if the clock is going off. */
- 	if (clock == 0)
+ 	if (clock == 0) {
+ 		sdhci_set_clock(host, clock);
  		return;
+ 	}
  
  	for (src = 0; src < MAX_BUS_CLK; src++) {
  		delta = sdhci_s3c_consider_clock(ourhost, src, clock);
diff --cc drivers/mmc/host/sdhci-spear.c
index 2151911b43ec,8bf64ab36720..000000000000
--- a/drivers/mmc/host/sdhci-spear.c
+++ b/drivers/mmc/host/sdhci-spear.c
@@@ -37,31 -38,11 +37,37 @@@ struct spear_sdhci 
  
  /* sdhci ops */
  static const struct sdhci_ops sdhci_pltfm_ops = {
++<<<<<<< HEAD
 +	/* Nothing to do for now. */
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  };
  
 +/* gpio card detection interrupt handler */
 +static irqreturn_t sdhci_gpio_irq(int irq, void *dev_id)
 +{
 +	struct platform_device *pdev = dev_id;
 +	struct sdhci_host *host = platform_get_drvdata(pdev);
 +	struct spear_sdhci *sdhci = dev_get_platdata(&pdev->dev);
 +	unsigned long gpio_irq_type;
 +	int val;
 +
 +	val = gpio_get_value(sdhci->data->card_int_gpio);
 +
 +	/* val == 1 -> card removed, val == 0 -> card inserted */
 +	/* if card removed - set irq for low level, else vice versa */
 +	gpio_irq_type = val ? IRQF_TRIGGER_LOW : IRQF_TRIGGER_HIGH;
 +	irq_set_irq_type(irq, gpio_irq_type);
 +
 +	/* inform sdhci driver about card insertion/removal */
 +	tasklet_schedule(&host->card_tasklet);
 +
 +	return IRQ_HANDLED;
 +}
 +
  #ifdef CONFIG_OF
  static struct sdhci_plat_data *sdhci_probe_config_dt(struct platform_device *pdev)
  {
diff --cc drivers/mmc/host/sdhci-tegra.c
index c8b058283a06,a0a8b5cc3b0c..000000000000
--- a/drivers/mmc/host/sdhci-tegra.c
+++ b/drivers/mmc/host/sdhci-tegra.c
@@@ -152,8 -153,9 +152,14 @@@ static const struct sdhci_ops tegra_sdh
  	.read_l     = tegra_sdhci_readl,
  	.read_w     = tegra_sdhci_readw,
  	.write_l    = tegra_sdhci_writel,
++<<<<<<< HEAD
 +	.platform_bus_width = tegra_sdhci_buswidth,
 +	.platform_reset_exit = tegra_sdhci_reset_exit,
++=======
+ 	.set_clock  = sdhci_set_clock,
+ 	.set_bus_width = tegra_sdhci_set_bus_width,
+ 	.reset      = tegra_sdhci_reset,
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_tegra20_pdata = {
diff --cc drivers/mmc/host/sdhci.c
index e292d602646d,69e58d071b33..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -1139,12 -1121,6 +1139,15 @@@ void sdhci_set_clock(struct sdhci_host 
  
  	host->mmc->actual_clock = 0;
  
++<<<<<<< HEAD
 +	if (host->ops->set_clock) {
 +		host->ops->set_clock(host, clock);
 +		if (host->quirks & SDHCI_QUIRK_NONSTANDARD_CLOCK)
 +			return;
 +	}
 +
++=======
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  	sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);
  
  	if (clock == 0)
@@@ -1238,10 -1214,8 +1241,11 @@@ clock_set
  
  	clk |= SDHCI_CLOCK_CARD_EN;
  	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
 +
 +out:
 +	host->clock = clock;
  }
+ EXPORT_SYMBOL_GPL(sdhci_set_clock);
  
  static int sdhci_set_power(struct sdhci_host *host, unsigned short power)
  {
@@@ -1438,8 -1433,10 +1442,15 @@@ static void sdhci_do_set_ios(struct sdh
  		!(host->quirks2 & SDHCI_QUIRK2_PRESET_VALUE_BROKEN))
  		sdhci_enable_preset_value(host, false);
  
++<<<<<<< HEAD
 +	if (!ios->clock || ios->clock != host->clock)
 +		sdhci_set_clock(host, ios->clock);
++=======
+ 	if (!ios->clock || ios->clock != host->clock) {
+ 		host->ops->set_clock(host, ios->clock);
+ 		host->clock = ios->clock;
+ 	}
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  
  	if (ios->power_mode == MMC_POWER_OFF)
  		vdd_bit = sdhci_set_power(host, -1);
diff --cc drivers/mmc/host/sdhci.h
index 0a3ed01887db,ac20195f667b..000000000000
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@@ -397,6 -395,15 +397,18 @@@ extern void sdhci_remove_host(struct sd
  extern void sdhci_send_command(struct sdhci_host *host,
  				struct mmc_command *cmd);
  
++<<<<<<< HEAD
++=======
+ static inline bool sdhci_sdio_irq_enabled(struct sdhci_host *host)
+ {
+ 	return !!(host->flags & SDHCI_SDIO_IRQ_ENABLED);
+ }
+ 
+ void sdhci_set_clock(struct sdhci_host *host, unsigned int clock);
+ void sdhci_set_bus_width(struct sdhci_host *host, int width);
+ void sdhci_reset(struct sdhci_host *host, u8 mask);
+ 
++>>>>>>> 1771059cf5f9 (mmc: sdhci: convert sdhci_set_clock() into a library function)
  #ifdef CONFIG_PM
  extern int sdhci_suspend_host(struct sdhci_host *host);
  extern int sdhci_resume_host(struct sdhci_host *host);
* Unmerged path drivers/mmc/host/sdhci-of-arasan.c
diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
index ebb3f392b589..c1434b29d729 100644
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -102,10 +102,12 @@ static void sdhci_acpi_int_hw_reset(struct sdhci_host *host)
 }
 
 static const struct sdhci_ops sdhci_acpi_ops_dflt = {
+	.set_clock = sdhci_set_clock,
 	.enable_dma = sdhci_acpi_enable_dma,
 };
 
 static const struct sdhci_ops sdhci_acpi_ops_int = {
+	.set_clock = sdhci_set_clock,
 	.enable_dma = sdhci_acpi_enable_dma,
 	.hw_reset   = sdhci_acpi_int_hw_reset,
 };
diff --git a/drivers/mmc/host/sdhci-bcm-kona.c b/drivers/mmc/host/sdhci-bcm-kona.c
index 87175f9817c2..a5f4576577b5 100644
--- a/drivers/mmc/host/sdhci-bcm-kona.c
+++ b/drivers/mmc/host/sdhci-bcm-kona.c
@@ -206,6 +206,7 @@ static void sdhci_bcm_kona_init_74_clocks(struct sdhci_host *host,
 }
 
 static struct sdhci_ops sdhci_bcm_kona_ops = {
+	.set_clock = sdhci_set_clock,
 	.get_max_clock = sdhci_bcm_kona_get_max_clk,
 	.get_timeout_clock = sdhci_bcm_kona_get_timeout_clock,
 	.platform_send_init_74_clocks = sdhci_bcm_kona_init_74_clocks,
diff --git a/drivers/mmc/host/sdhci-bcm2835.c b/drivers/mmc/host/sdhci-bcm2835.c
index 0584a1c788b8..0f925c73f00d 100644
--- a/drivers/mmc/host/sdhci-bcm2835.c
+++ b/drivers/mmc/host/sdhci-bcm2835.c
@@ -131,6 +131,7 @@ static const struct sdhci_ops bcm2835_sdhci_ops = {
 	.read_l = bcm2835_sdhci_readl,
 	.read_w = bcm2835_sdhci_readw,
 	.read_b = bcm2835_sdhci_readb,
+	.set_clock = sdhci_set_clock,
 	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
 	.get_min_clock = bcm2835_sdhci_get_min_clock,
 };
diff --git a/drivers/mmc/host/sdhci-cns3xxx.c b/drivers/mmc/host/sdhci-cns3xxx.c
index 95620e1983a8..4749ee2b8b1c 100644
--- a/drivers/mmc/host/sdhci-cns3xxx.c
+++ b/drivers/mmc/host/sdhci-cns3xxx.c
@@ -87,8 +87,7 @@ static const struct sdhci_pltfm_data sdhci_cns3xxx_pdata = {
 		  SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK |
 		  SDHCI_QUIRK_INVERTED_WRITE_PROTECT |
 		  SDHCI_QUIRK_CAP_CLOCK_BASE_BROKEN |
-		  SDHCI_QUIRK_BROKEN_TIMEOUT_VAL |
-		  SDHCI_QUIRK_NONSTANDARD_CLOCK,
+		  SDHCI_QUIRK_BROKEN_TIMEOUT_VAL,
 };
 
 static int sdhci_cns3xxx_probe(struct platform_device *pdev)
* Unmerged path drivers/mmc/host/sdhci-dove.c
diff --git a/drivers/mmc/host/sdhci-esdhc.h b/drivers/mmc/host/sdhci-esdhc.h
index d25f9ab9a54d..673dd168ddc6 100644
--- a/drivers/mmc/host/sdhci-esdhc.h
+++ b/drivers/mmc/host/sdhci-esdhc.h
@@ -20,7 +20,6 @@
 
 #define ESDHC_DEFAULT_QUIRKS	(SDHCI_QUIRK_FORCE_BLK_SZ_2048 | \
 				SDHCI_QUIRK_NO_BUSY_IRQ | \
-				SDHCI_QUIRK_NONSTANDARD_CLOCK | \
 				SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK | \
 				SDHCI_QUIRK_PIO_NEEDS_DELAY | \
 				SDHCI_QUIRK_RESTORE_IRQS_AFTER_RESET)
* Unmerged path drivers/mmc/host/sdhci-of-arasan.c
* Unmerged path drivers/mmc/host/sdhci-of-hlwd.c
diff --git a/drivers/mmc/host/sdhci-pci.c b/drivers/mmc/host/sdhci-pci.c
index a3024b2fb30e..6dd908b5c020 100644
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@ -956,6 +956,7 @@ static void sdhci_pci_hw_reset(struct sdhci_host *host)
 }
 
 static const struct sdhci_ops sdhci_pci_ops = {
+	.set_clock	= sdhci_set_clock,
 	.enable_dma	= sdhci_pci_enable_dma,
 	.platform_bus_width	= sdhci_pci_bus_width,
 	.hw_reset		= sdhci_pci_hw_reset,
* Unmerged path drivers/mmc/host/sdhci-pltfm.c
diff --git a/drivers/mmc/host/sdhci-pxav2.c b/drivers/mmc/host/sdhci-pxav2.c
index d51e061ec576..83a4d18d3d7f 100644
--- a/drivers/mmc/host/sdhci-pxav2.c
+++ b/drivers/mmc/host/sdhci-pxav2.c
@@ -112,6 +112,7 @@ static int pxav2_mmc_set_width(struct sdhci_host *host, int width)
 }
 
 static const struct sdhci_ops pxav2_sdhci_ops = {
+	.set_clock     = sdhci_set_clock,
 	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
 	.platform_reset_exit = pxav2_set_private_registers,
 	.platform_bus_width = pxav2_mmc_set_width,
* Unmerged path drivers/mmc/host/sdhci-pxav3.c
* Unmerged path drivers/mmc/host/sdhci-s3c.c
diff --git a/drivers/mmc/host/sdhci-sirf.c b/drivers/mmc/host/sdhci-sirf.c
index 09805af0526d..5ef69246589f 100644
--- a/drivers/mmc/host/sdhci-sirf.c
+++ b/drivers/mmc/host/sdhci-sirf.c
@@ -29,6 +29,7 @@ static unsigned int sdhci_sirf_get_max_clk(struct sdhci_host *host)
 }
 
 static struct sdhci_ops sdhci_sirf_ops = {
+	.set_clock = sdhci_set_clock,
 	.get_max_clock	= sdhci_sirf_get_max_clk,
 };
 
* Unmerged path drivers/mmc/host/sdhci-spear.c
* Unmerged path drivers/mmc/host/sdhci-tegra.c
* Unmerged path drivers/mmc/host/sdhci.c
* Unmerged path drivers/mmc/host/sdhci.h
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index 1f55d4bcbbfb..c3215c749522 100644
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -57,8 +57,6 @@ struct sdhci_host {
 #define SDHCI_QUIRK_BROKEN_CARD_DETECTION		(1<<15)
 /* Controller reports inverted write-protect state */
 #define SDHCI_QUIRK_INVERTED_WRITE_PROTECT		(1<<16)
-/* Controller has nonstandard clock management */
-#define SDHCI_QUIRK_NONSTANDARD_CLOCK			(1<<17)
 /* Controller does not like fast PIO transfers */
 #define SDHCI_QUIRK_PIO_NEEDS_DELAY			(1<<18)
 /* Controller losing signal/interrupt enable states after reset */
