IB/core: Add vendor's specific data to alloc mw

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Matan Barak <matanb@mellanox.com>
commit b2a239df4e65fe35240ddf3e5f9f31335c90589b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b2a239df.failed

Passing udata to the vendor's driver in order to pass data from the
user-space driver to the kernel-space driver. This data will be
used in downstream patches.

	Signed-off-by: Matan Barak <matanb@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit b2a239df4e65fe35240ddf3e5f9f31335c90589b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx4/mlx4_ib.h
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/hw/mlx4/mlx4_ib.h
index c3377d0b54d4,1eca01cebe51..000000000000
--- a/drivers/infiniband/hw/mlx4/mlx4_ib.h
+++ b/drivers/infiniband/hw/mlx4/mlx4_ib.h
@@@ -718,9 -711,8 +718,14 @@@ struct ib_mr *mlx4_ib_reg_user_mr(struc
  				  u64 virt_addr, int access_flags,
  				  struct ib_udata *udata);
  int mlx4_ib_dereg_mr(struct ib_mr *mr);
++<<<<<<< HEAD
 +struct ib_mw *mlx4_ib_alloc_mw(struct ib_pd *pd, enum ib_mw_type type);
 +int mlx4_ib_bind_mw(struct ib_qp *qp, struct ib_mw *mw,
 +		    struct ib_mw_bind *mw_bind);
++=======
+ struct ib_mw *mlx4_ib_alloc_mw(struct ib_pd *pd, enum ib_mw_type type,
+ 			       struct ib_udata *udata);
++>>>>>>> b2a239df4e65 (IB/core: Add vendor's specific data to alloc mw)
  int mlx4_ib_dealloc_mw(struct ib_mw *mw);
  struct ib_mr *mlx4_ib_alloc_mr(struct ib_pd *pd,
  			       enum ib_mr_type mr_type,
diff --cc include/rdma/ib_verbs.h
index b833561dbb05,3f79070de547..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -1765,21 -1804,12 +1765,26 @@@ struct ib_device 
  	struct ib_mr *		   (*alloc_mr)(struct ib_pd *pd,
  					       enum ib_mr_type mr_type,
  					       u32 max_num_sg);
 -	int                        (*map_mr_sg)(struct ib_mr *mr,
 -						struct scatterlist *sg,
 -						int sg_nents);
 +	struct ib_fast_reg_page_list * (*alloc_fast_reg_page_list)(struct ib_device *device,
 +								   int page_list_len);
 +	void			   (*free_fast_reg_page_list)(struct ib_fast_reg_page_list *page_list);
 +	int                        (*rereg_phys_mr)(struct ib_mr *mr,
 +						    int mr_rereg_mask,
 +						    struct ib_pd *pd,
 +						    struct ib_phys_buf *phys_buf_array,
 +						    int num_phys_buf,
 +						    int mr_access_flags,
 +						    u64 *iova_start);
  	struct ib_mw *             (*alloc_mw)(struct ib_pd *pd,
++<<<<<<< HEAD
 +					       enum ib_mw_type type);
 +	int                        (*bind_mw)(struct ib_qp *qp,
 +					      struct ib_mw *mw,
 +					      struct ib_mw_bind *mw_bind);
++=======
+ 					       enum ib_mw_type type,
+ 					       struct ib_udata *udata);
++>>>>>>> b2a239df4e65 (IB/core: Add vendor's specific data to alloc mw)
  	int                        (*dealloc_mw)(struct ib_mw *mw);
  	struct ib_fmr *	           (*alloc_fmr)(struct ib_pd *pd,
  						int mr_access_flags,
diff --git a/drivers/infiniband/core/uverbs_cmd.c b/drivers/infiniband/core/uverbs_cmd.c
index d8a926ca185b..fb145fac9c7d 100644
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -1180,6 +1180,7 @@ ssize_t ib_uverbs_alloc_mw(struct ib_uverbs_file *file,
 	struct ib_uobject             *uobj;
 	struct ib_pd                  *pd;
 	struct ib_mw                  *mw;
+	struct ib_udata		       udata;
 	int                            ret;
 
 	if (out_len < sizeof(resp))
@@ -1201,7 +1202,12 @@ ssize_t ib_uverbs_alloc_mw(struct ib_uverbs_file *file,
 		goto err_free;
 	}
 
-	mw = pd->device->alloc_mw(pd, cmd.mw_type);
+	INIT_UDATA(&udata, buf + sizeof(cmd),
+		   (unsigned long)cmd.response + sizeof(resp),
+		   in_len - sizeof(cmd) - sizeof(struct ib_uverbs_cmd_hdr),
+		   out_len - sizeof(resp));
+
+	mw = pd->device->alloc_mw(pd, cmd.mw_type, &udata);
 	if (IS_ERR(mw)) {
 		ret = PTR_ERR(mw);
 		goto err_put;
diff --git a/drivers/infiniband/hw/cxgb3/iwch_provider.c b/drivers/infiniband/hw/cxgb3/iwch_provider.c
index 3f8009da73e6..55da885b81b4 100644
--- a/drivers/infiniband/hw/cxgb3/iwch_provider.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_provider.c
@@ -726,7 +726,8 @@ err:
 	return ERR_PTR(err);
 }
 
-static struct ib_mw *iwch_alloc_mw(struct ib_pd *pd, enum ib_mw_type type)
+static struct ib_mw *iwch_alloc_mw(struct ib_pd *pd, enum ib_mw_type type,
+				   struct ib_udata *udata)
 {
 	struct iwch_dev *rhp;
 	struct iwch_pd *php;
diff --git a/drivers/infiniband/hw/cxgb4/iw_cxgb4.h b/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
index c7bb38c931a5..0f3bb13cec70 100644
--- a/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
+++ b/drivers/infiniband/hw/cxgb4/iw_cxgb4.h
@@ -974,7 +974,8 @@ struct ib_mr *c4iw_alloc_mr(struct ib_pd *pd,
 			    enum ib_mr_type mr_type,
 			    u32 max_num_sg);
 int c4iw_dealloc_mw(struct ib_mw *mw);
-struct ib_mw *c4iw_alloc_mw(struct ib_pd *pd, enum ib_mw_type type);
+struct ib_mw *c4iw_alloc_mw(struct ib_pd *pd, enum ib_mw_type type,
+			    struct ib_udata *udata);
 struct ib_mr *c4iw_reg_user_mr(struct ib_pd *pd, u64 start,
 					   u64 length, u64 virt, int acc,
 					   struct ib_udata *udata);
diff --git a/drivers/infiniband/hw/cxgb4/mem.c b/drivers/infiniband/hw/cxgb4/mem.c
index 574f3065888c..8618d10c6a2c 100644
--- a/drivers/infiniband/hw/cxgb4/mem.c
+++ b/drivers/infiniband/hw/cxgb4/mem.c
@@ -34,6 +34,7 @@
 #include <linux/moduleparam.h>
 #include <rdma/ib_umem.h>
 #include <linux/atomic.h>
+#include <rdma/ib_user_verbs.h>
 
 #include "iw_cxgb4.h"
 
@@ -776,7 +777,8 @@ err:
 	return ERR_PTR(err);
 }
 
-struct ib_mw *c4iw_alloc_mw(struct ib_pd *pd, enum ib_mw_type type)
+struct ib_mw *c4iw_alloc_mw(struct ib_pd *pd, enum ib_mw_type type,
+			    struct ib_udata *udata)
 {
 	struct c4iw_dev *rhp;
 	struct c4iw_pd *php;
* Unmerged path drivers/infiniband/hw/mlx4/mlx4_ib.h
diff --git a/drivers/infiniband/hw/mlx4/mr.c b/drivers/infiniband/hw/mlx4/mr.c
index 2542fd3c1a49..a4c78878ef9e 100644
--- a/drivers/infiniband/hw/mlx4/mr.c
+++ b/drivers/infiniband/hw/mlx4/mr.c
@@ -32,6 +32,7 @@
  */
 
 #include <linux/slab.h>
+#include <rdma/ib_user_verbs.h>
 
 #include "mlx4_ib.h"
 
@@ -286,7 +287,8 @@ int mlx4_ib_dereg_mr(struct ib_mr *ibmr)
 	return 0;
 }
 
-struct ib_mw *mlx4_ib_alloc_mw(struct ib_pd *pd, enum ib_mw_type type)
+struct ib_mw *mlx4_ib_alloc_mw(struct ib_pd *pd, enum ib_mw_type type,
+			       struct ib_udata *udata)
 {
 	struct mlx4_ib_dev *dev = to_mdev(pd->device);
 	struct mlx4_ib_mw *mw;
diff --git a/drivers/infiniband/hw/nes/nes_verbs.c b/drivers/infiniband/hw/nes/nes_verbs.c
index cbbc2523f4aa..da5fe651e5ac 100644
--- a/drivers/infiniband/hw/nes/nes_verbs.c
+++ b/drivers/infiniband/hw/nes/nes_verbs.c
@@ -56,7 +56,8 @@ static int nes_dereg_mr(struct ib_mr *ib_mr);
 /**
  * nes_alloc_mw
  */
-static struct ib_mw *nes_alloc_mw(struct ib_pd *ibpd, enum ib_mw_type type)
+static struct ib_mw *nes_alloc_mw(struct ib_pd *ibpd, enum ib_mw_type type,
+				  struct ib_udata *udata)
 {
 	struct nes_pd *nespd = to_nespd(ibpd);
 	struct nes_vnic *nesvnic = to_nesvnic(ibpd->device);
* Unmerged path include/rdma/ib_verbs.h
