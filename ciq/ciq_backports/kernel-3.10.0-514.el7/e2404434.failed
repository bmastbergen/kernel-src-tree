USB: OHCI: make ohci-ep93xx a separate driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Manjunath Goudar <manjunath.goudar@linaro.org>
commit e2404434b6c2f98e6accc3fb220a508edb5ee87a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e2404434.failed

Separate the OHCI EP93XX host controller driver from ohci-hcd
host code so that it can be built as a separate driver module.
This work is part of enabling multi-platform kernels on ARM.

	Signed-off-by: Manjunath Goudar <manjunath.goudar@linaro.org>
	Signed-off-by: Deepak Saxena <dsaxena@linaro.org>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit e2404434b6c2f98e6accc3fb220a508edb5ee87a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/Kconfig
#	drivers/usb/host/Makefile
#	drivers/usb/host/ohci-hcd.c
diff --cc drivers/usb/host/Kconfig
index 14e3c49416bf,31a431afad47..000000000000
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@@ -379,8 -373,48 +379,51 @@@ config USB_OHCI_HCD_OMAP
  	---help---
  	  Enables support for the OHCI controller on OMAP1/2 chips.
  
++<<<<<<< HEAD
++=======
+ config USB_OHCI_HCD_SPEAR
+         tristate "Support for ST SPEAr on-chip OHCI USB controller"
+         depends on USB_OHCI_HCD && PLAT_SPEAR
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           ST SPEAr chips.
+ 
+ config USB_OHCI_HCD_S3C2410
+         tristate "OHCI support for Samsung S3C24xx/S3C64xx SoC series"
+         depends on USB_OHCI_HCD && (ARCH_S3C24XX || ARCH_S3C64XX)
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           S3C24xx/S3C64xx chips.
+ 
+ config USB_OHCI_HCD_LPC32XX
+ 	tristate "Support for LPC on-chip OHCI USB controller"
+ 	depends on USB_OHCI_HCD && ARCH_LPC32XX
+ 	default y
+ 	---help---
+           Enables support for the on-chip OHCI controller on
+           NXP chips.
+ 
+ config USB_OHCI_HCD_EP93XX
+ 	tristate "Support for EP93XX on-chip OHCI USB controller"
+ 	depends on USB_OHCI_HCD && ARCH_EP93XX
+ 	default y
+ 	---help---
+ 	  Enables support for the on-chip OHCI controller on
+ 	  EP93XX chips.
+ 
+ config USB_OHCI_HCD_AT91
+         tristate "Support for Atmel on-chip OHCI USB controller"
+         depends on USB_OHCI_HCD && ARCH_AT91
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           Atmel chips.
+ 
++>>>>>>> e2404434b6c2 (USB: OHCI: make ohci-ep93xx a separate driver)
  config USB_OHCI_HCD_OMAP3
 -	tristate "OHCI support for OMAP3 and later chips"
 +	bool "OHCI support for OMAP3 and later chips"
  	depends on (ARCH_OMAP3 || ARCH_OMAP4)
  	default y
  	---help---
diff --cc drivers/usb/host/Makefile
index 602b80e40777,68b148c9f66c..000000000000
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@@ -44,6 -48,13 +44,16 @@@ obj-$(CONFIG_USB_OHCI_HCD)	+= ohci-hcd.
  obj-$(CONFIG_USB_OHCI_HCD_PCI)	+= ohci-pci.o
  obj-$(CONFIG_USB_OHCI_HCD_PLATFORM)	+= ohci-platform.o
  obj-$(CONFIG_USB_OHCI_EXYNOS)	+= ohci-exynos.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_USB_OHCI_HCD_OMAP1)	+= ohci-omap.o
+ obj-$(CONFIG_USB_OHCI_HCD_OMAP3)	+= ohci-omap3.o
+ obj-$(CONFIG_USB_OHCI_HCD_SPEAR)	+= ohci-spear.o
+ obj-$(CONFIG_USB_OHCI_HCD_AT91)	+= ohci-at91.o
+ obj-$(CONFIG_USB_OHCI_HCD_S3C2410)	+= ohci-s3c2410.o
+ obj-$(CONFIG_USB_OHCI_HCD_LPC32XX)	+= ohci-nxp.o
+ obj-$(CONFIG_USB_OHCI_HCD_EP93XX)	+= ohci-ep93xx.o
++>>>>>>> e2404434b6c2 (USB: OHCI: make ohci-ep93xx a separate driver)
  
  obj-$(CONFIG_USB_UHCI_HCD)	+= uhci-hcd.o
  obj-$(CONFIG_USB_FHCI_HCD)	+= fhci.o
diff --cc drivers/usb/host/ohci-hcd.c
index 31d50d19b73d,2ee31712c13f..000000000000
--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@@ -1232,21 -1182,6 +1232,24 @@@ MODULE_LICENSE ("GPL")
  #define PLATFORM_DRIVER		ohci_hcd_pxa27x_driver
  #endif
  
++<<<<<<< HEAD
 +#ifdef CONFIG_ARCH_EP93XX
 +#include "ohci-ep93xx.c"
 +#define EP93XX_PLATFORM_DRIVER	ohci_hcd_ep93xx_driver
 +#endif
 +
 +#ifdef CONFIG_ARCH_AT91
 +#include "ohci-at91.c"
 +#define AT91_PLATFORM_DRIVER	ohci_hcd_at91_driver
 +#endif
 +
 +#ifdef CONFIG_ARCH_LPC32XX
 +#include "ohci-nxp.c"
 +#define NXP_PLATFORM_DRIVER	usb_hcd_nxp_driver
 +#endif
 +
++=======
++>>>>>>> e2404434b6c2 (USB: OHCI: make ohci-ep93xx a separate driver)
  #ifdef CONFIG_ARCH_DAVINCI_DA8XX
  #include "ohci-da8xx.c"
  #define DAVINCI_PLATFORM_DRIVER	ohci_hcd_da8xx_driver
@@@ -1358,30 -1278,6 +1361,33 @@@ static int __init ohci_hcd_mod_init(voi
  		goto error_tmio;
  #endif
  
++<<<<<<< HEAD
 +#ifdef S3C2410_PLATFORM_DRIVER
 +	retval = platform_driver_register(&S3C2410_PLATFORM_DRIVER);
 +	if (retval < 0)
 +		goto error_s3c2410;
 +#endif
 +
 +#ifdef EP93XX_PLATFORM_DRIVER
 +	retval = platform_driver_register(&EP93XX_PLATFORM_DRIVER);
 +	if (retval < 0)
 +		goto error_ep93xx;
 +#endif
 +
 +#ifdef AT91_PLATFORM_DRIVER
 +	retval = platform_driver_register(&AT91_PLATFORM_DRIVER);
 +	if (retval < 0)
 +		goto error_at91;
 +#endif
 +
 +#ifdef NXP_PLATFORM_DRIVER
 +	retval = platform_driver_register(&NXP_PLATFORM_DRIVER);
 +	if (retval < 0)
 +		goto error_nxp;
 +#endif
 +
++=======
++>>>>>>> e2404434b6c2 (USB: OHCI: make ohci-ep93xx a separate driver)
  #ifdef DAVINCI_PLATFORM_DRIVER
  	retval = platform_driver_register(&DAVINCI_PLATFORM_DRIVER);
  	if (retval < 0)
@@@ -1405,22 -1291,6 +1411,25 @@@
  	platform_driver_unregister(&DAVINCI_PLATFORM_DRIVER);
   error_davinci:
  #endif
++<<<<<<< HEAD
 +#ifdef NXP_PLATFORM_DRIVER
 +	platform_driver_unregister(&NXP_PLATFORM_DRIVER);
 + error_nxp:
 +#endif
 +#ifdef AT91_PLATFORM_DRIVER
 +	platform_driver_unregister(&AT91_PLATFORM_DRIVER);
 + error_at91:
 +#endif
 +#ifdef EP93XX_PLATFORM_DRIVER
 +	platform_driver_unregister(&EP93XX_PLATFORM_DRIVER);
 + error_ep93xx:
 +#endif
 +#ifdef S3C2410_PLATFORM_DRIVER
 +	platform_driver_unregister(&S3C2410_PLATFORM_DRIVER);
 + error_s3c2410:
 +#endif
++=======
++>>>>>>> e2404434b6c2 (USB: OHCI: make ohci-ep93xx a separate driver)
  #ifdef TMIO_OHCI_DRIVER
  	platform_driver_unregister(&TMIO_OHCI_DRIVER);
   error_tmio:
@@@ -1470,18 -1331,6 +1479,21 @@@ static void __exit ohci_hcd_mod_exit(vo
  #ifdef DAVINCI_PLATFORM_DRIVER
  	platform_driver_unregister(&DAVINCI_PLATFORM_DRIVER);
  #endif
++<<<<<<< HEAD
 +#ifdef NXP_PLATFORM_DRIVER
 +	platform_driver_unregister(&NXP_PLATFORM_DRIVER);
 +#endif
 +#ifdef AT91_PLATFORM_DRIVER
 +	platform_driver_unregister(&AT91_PLATFORM_DRIVER);
 +#endif
 +#ifdef EP93XX_PLATFORM_DRIVER
 +	platform_driver_unregister(&EP93XX_PLATFORM_DRIVER);
 +#endif
 +#ifdef S3C2410_PLATFORM_DRIVER
 +	platform_driver_unregister(&S3C2410_PLATFORM_DRIVER);
 +#endif
++=======
++>>>>>>> e2404434b6c2 (USB: OHCI: make ohci-ep93xx a separate driver)
  #ifdef TMIO_OHCI_DRIVER
  	platform_driver_unregister(&TMIO_OHCI_DRIVER);
  #endif
* Unmerged path drivers/usb/host/Kconfig
* Unmerged path drivers/usb/host/Makefile
diff --git a/drivers/usb/host/ohci-ep93xx.c b/drivers/usb/host/ohci-ep93xx.c
index 84a20d5223b9..492f681c70f2 100644
--- a/drivers/usb/host/ohci-ep93xx.c
+++ b/drivers/usb/host/ohci-ep93xx.c
@@ -25,50 +25,23 @@
 
 #include <linux/clk.h>
 #include <linux/device.h>
-#include <linux/signal.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/signal.h>
+#include <linux/usb.h>
+#include <linux/usb/hcd.h>
 
-static struct clk *usb_host_clock;
+#include "ohci.h"
 
-static int ohci_ep93xx_start(struct usb_hcd *hcd)
-{
-	struct ohci_hcd *ohci = hcd_to_ohci(hcd);
-	int ret;
+#define DRIVER_DESC "OHCI EP93xx driver"
 
-	if ((ret = ohci_init(ohci)) < 0)
-		return ret;
+static const char hcd_name[] = "ohci-ep93xx";
 
-	if ((ret = ohci_run(ohci)) < 0) {
-		dev_err(hcd->self.controller, "can't start %s\n",
-			hcd->self.bus_name);
-		ohci_stop(hcd);
-		return ret;
-	}
+static struct hc_driver __read_mostly ohci_ep93xx_hc_driver;
 
-	return 0;
-}
-
-static struct hc_driver ohci_ep93xx_hc_driver = {
-	.description		= hcd_name,
-	.product_desc		= "EP93xx OHCI",
-	.hcd_priv_size		= sizeof(struct ohci_hcd),
-	.irq			= ohci_irq,
-	.flags			= HCD_USB11 | HCD_MEMORY,
-	.start			= ohci_ep93xx_start,
-	.stop			= ohci_stop,
-	.shutdown		= ohci_shutdown,
-	.urb_enqueue		= ohci_urb_enqueue,
-	.urb_dequeue		= ohci_urb_dequeue,
-	.endpoint_disable	= ohci_endpoint_disable,
-	.get_frame_number	= ohci_get_frame,
-	.hub_status_data	= ohci_hub_status_data,
-	.hub_control		= ohci_hub_control,
-#ifdef CONFIG_PM
-	.bus_suspend		= ohci_bus_suspend,
-	.bus_resume		= ohci_bus_resume,
-#endif
-	.start_port_reset	= ohci_start_port_reset,
-};
+static struct clk *usb_host_clock;
 
 static int ohci_hcd_ep93xx_drv_probe(struct platform_device *pdev)
 {
@@ -109,8 +82,6 @@ static int ohci_hcd_ep93xx_drv_probe(struct platform_device *pdev)
 
 	clk_enable(usb_host_clock);
 
-	ohci_hcd_init(hcd_to_ohci(hcd));
-
 	ret = usb_add_hcd(hcd, irq, 0);
 	if (ret)
 		goto err_clk_disable;
@@ -166,7 +137,6 @@ static int ohci_hcd_ep93xx_drv_resume(struct platform_device *pdev)
 }
 #endif
 
-
 static struct platform_driver ohci_hcd_ep93xx_driver = {
 	.probe		= ohci_hcd_ep93xx_drv_probe,
 	.remove		= ohci_hcd_ep93xx_drv_remove,
@@ -181,4 +151,24 @@ static struct platform_driver ohci_hcd_ep93xx_driver = {
 	},
 };
 
+static int __init ohci_ep93xx_init(void)
+{
+	if (usb_disabled())
+		return -ENODEV;
+
+	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+
+	ohci_init_driver(&ohci_ep93xx_hc_driver, NULL);
+	return platform_driver_register(&ohci_hcd_ep93xx_driver);
+}
+module_init(ohci_ep93xx_init);
+
+static void __exit ohci_ep93xx_cleanup(void)
+{
+	platform_driver_unregister(&ohci_hcd_ep93xx_driver);
+}
+module_exit(ohci_ep93xx_cleanup);
+
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_LICENSE("GPL");
 MODULE_ALIAS("platform:ep93xx-ohci");
* Unmerged path drivers/usb/host/ohci-hcd.c
