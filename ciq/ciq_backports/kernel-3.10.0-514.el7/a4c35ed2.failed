ftrace: Fix synchronization location disabling and freeing ftrace_ops

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Steven Rostedt (Red Hat) <rostedt@goodmis.org>
commit a4c35ed241129dd142be4cadb1e5a474a56d5464
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a4c35ed2.failed

The synchronization needed after ftrace_ops are unregistered must happen
after the callback is disabled from becing called by functions.

The current location happens after the function is being removed from the
internal lists, but not after the function callbacks were disabled, leaving
the functions susceptible of being called after their callbacks are freed.

This affects perf and any externel users of function tracing (LTTng and
SystemTap).

	Cc: stable@vger.kernel.org # 3.0+
Fixes: cdbe61bfe704 "ftrace: Allow dynamically allocated function tracers"
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit a4c35ed241129dd142be4cadb1e5a474a56d5464)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/ftrace.c
diff --cc kernel/trace/ftrace.c
index 979b7eac7331,7181ad15923b..000000000000
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@@ -425,16 -498,6 +425,19 @@@ static int __unregister_ftrace_function
  	} else if (ops->flags & FTRACE_OPS_FL_CONTROL) {
  		ret = remove_ftrace_list_ops(&ftrace_control_list,
  					     &control_ops, ops);
++<<<<<<< HEAD
 +		if (!ret) {
 +			/*
 +			 * The ftrace_ops is now removed from the list,
 +			 * so there'll be no new users. We must ensure
 +			 * all current users are done before we free
 +			 * the control data.
 +			 */
 +			synchronize_sched();
 +			control_ops_free(ops);
 +		}
++=======
++>>>>>>> a4c35ed24112 (ftrace: Fix synchronization location disabling and freeing ftrace_ops)
  	} else
  		ret = remove_ftrace_ops(&ftrace_ops_list, ops);
  
@@@ -444,13 -507,6 +447,16 @@@
  	if (ftrace_enabled)
  		update_ftrace_function();
  
++<<<<<<< HEAD
 +	/*
 +	 * Dynamic ops may be freed, we must make sure that all
 +	 * callers are done before leaving this function.
 +	 */
 +	if (ops->flags & FTRACE_OPS_FL_DYNAMIC)
 +		synchronize_sched();
 +
++=======
++>>>>>>> a4c35ed24112 (ftrace: Fix synchronization location disabling and freeing ftrace_ops)
  	return 0;
  }
  
* Unmerged path kernel/trace/ftrace.c
