irq_poll: don't disable new irq_poll instances

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [irq_poll] don't disable new irq_poll instances (Jeff Moyer) [1336479]
Rebuild_FUZZ: 87.80%
commit-author Christoph Hellwig <hch@lst.de>
commit 78d0264eb7a938f1eaf59fcb2d3f7da2567369d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/78d0264e.failed

There is no good reason to start out disabled - drivers can control if
the poll instance can be scheduled by simply not scheduling it yet.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Bart Van Assche <bart.vanassche@sandisk.com>
(cherry picked from commit 78d0264eb7a938f1eaf59fcb2d3f7da2567369d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-iopoll.c
#	drivers/scsi/be2iscsi/be_main.c
#	drivers/scsi/ipr.c
diff --cc block/blk-iopoll.c
index aaadab9ccfea,88af87971e8c..000000000000
--- a/block/blk-iopoll.c
+++ b/block/blk-iopoll.c
@@@ -176,20 -170,18 +176,27 @@@ EXPORT_SYMBOL(blk_iopoll_enable)
   * @poll_fn:  The handler to invoke
   *
   * Description:
++<<<<<<< HEAD:block/blk-iopoll.c
 + *     Initialize this blk_iopoll structure. Before being actively used, the
 + *     driver must call blk_iopoll_enable().
++=======
+  *     Initialize and enable this irq_poll structure.
++>>>>>>> 78d0264eb7a9 (irq_poll: don't disable new irq_poll instances):lib/irq_poll.c
   **/
 -void irq_poll_init(struct irq_poll *iop, int weight, irq_poll_fn *poll_fn)
 +void blk_iopoll_init(struct blk_iopoll *iop, int weight, blk_iopoll_fn *poll_fn)
  {
  	memset(iop, 0, sizeof(*iop));
  	INIT_LIST_HEAD(&iop->list);
  	iop->weight = weight;
  	iop->poll = poll_fn;
++<<<<<<< HEAD:block/blk-iopoll.c
 +	set_bit(IOPOLL_F_SCHED, &iop->state);
++=======
++>>>>>>> 78d0264eb7a9 (irq_poll: don't disable new irq_poll instances):lib/irq_poll.c
  }
 -EXPORT_SYMBOL(irq_poll_init);
 +EXPORT_SYMBOL(blk_iopoll_init);
  
 -static int irq_poll_cpu_notify(struct notifier_block *self,
 +static int blk_iopoll_cpu_notify(struct notifier_block *self,
  				 unsigned long action, void *hcpu)
  {
  	/*
diff --cc drivers/scsi/be2iscsi/be_main.c
index 29e4d80b9729,471e2b942435..000000000000
--- a/drivers/scsi/be2iscsi/be_main.c
+++ b/drivers/scsi/be2iscsi/be_main.c
@@@ -5631,31 -5577,16 +5631,39 @@@ static void beiscsi_eeh_resume(struct p
  	phwi_ctrlr = phba->phwi_ctrlr;
  	phwi_context = phwi_ctrlr->phwi_ctxt;
  
++<<<<<<< HEAD
 +	if (blk_iopoll_enabled) {
 +		for (i = 0; i < phba->num_cpus; i++) {
 +			pbe_eq = &phwi_context->be_eq[i];
 +			blk_iopoll_init(&pbe_eq->iopoll, be_iopoll_budget,
 +					be_iopoll);
 +			blk_iopoll_enable(&pbe_eq->iopoll);
 +		}
++=======
+ 	for (i = 0; i < phba->num_cpus; i++) {
+ 		pbe_eq = &phwi_context->be_eq[i];
+ 		irq_poll_init(&pbe_eq->iopoll, be_iopoll_budget,
+ 				be_iopoll);
+ 	}
++>>>>>>> 78d0264eb7a9 (irq_poll: don't disable new irq_poll instances)
  
 -	i = (phba->msix_enabled) ? i : 0;
 -	/* Work item for MCC handling */
 -	pbe_eq = &phwi_context->be_eq[i];
 -	INIT_WORK(&pbe_eq->work_cqs, beiscsi_process_all_cqs);
 +		i = (phba->msix_enabled) ? i : 0;
 +		/* Work item for MCC handling */
 +		pbe_eq = &phwi_context->be_eq[i];
 +		INIT_WORK(&pbe_eq->work_cqs, beiscsi_process_all_cqs);
 +	} else {
 +		if (phba->msix_enabled) {
 +			for (i = 0; i <= phba->num_cpus; i++) {
 +				pbe_eq = &phwi_context->be_eq[i];
 +				INIT_WORK(&pbe_eq->work_cqs,
 +					  beiscsi_process_all_cqs);
 +			}
 +		} else {
 +			pbe_eq = &phwi_context->be_eq[0];
 +			INIT_WORK(&pbe_eq->work_cqs,
 +				  beiscsi_process_all_cqs);
 +		}
 +	}
  
  	ret = beiscsi_init_irqs(phba);
  	if (ret < 0) {
@@@ -5818,31 -5749,16 +5826,39 @@@ static int beiscsi_dev_probe(struct pci
  	phwi_ctrlr = phba->phwi_ctrlr;
  	phwi_context = phwi_ctrlr->phwi_ctxt;
  
++<<<<<<< HEAD
 +	if (blk_iopoll_enabled) {
 +		for (i = 0; i < phba->num_cpus; i++) {
 +			pbe_eq = &phwi_context->be_eq[i];
 +			blk_iopoll_init(&pbe_eq->iopoll, be_iopoll_budget,
 +					be_iopoll);
 +			blk_iopoll_enable(&pbe_eq->iopoll);
 +		}
++=======
+ 	for (i = 0; i < phba->num_cpus; i++) {
+ 		pbe_eq = &phwi_context->be_eq[i];
+ 		irq_poll_init(&pbe_eq->iopoll, be_iopoll_budget,
+ 				be_iopoll);
+ 	}
++>>>>>>> 78d0264eb7a9 (irq_poll: don't disable new irq_poll instances)
  
 -	i = (phba->msix_enabled) ? i : 0;
 -	/* Work item for MCC handling */
 -	pbe_eq = &phwi_context->be_eq[i];
 -	INIT_WORK(&pbe_eq->work_cqs, beiscsi_process_all_cqs);
 +		i = (phba->msix_enabled) ? i : 0;
 +		/* Work item for MCC handling */
 +		pbe_eq = &phwi_context->be_eq[i];
 +		INIT_WORK(&pbe_eq->work_cqs, beiscsi_process_all_cqs);
 +	} else {
 +		if (phba->msix_enabled) {
 +			for (i = 0; i <= phba->num_cpus; i++) {
 +				pbe_eq = &phwi_context->be_eq[i];
 +				INIT_WORK(&pbe_eq->work_cqs,
 +					  beiscsi_process_all_cqs);
 +			}
 +		} else {
 +				pbe_eq = &phwi_context->be_eq[0];
 +				INIT_WORK(&pbe_eq->work_cqs,
 +					  beiscsi_process_all_cqs);
 +			}
 +	}
  
  	ret = beiscsi_init_irqs(phba);
  	if (ret < 0) {
diff --cc drivers/scsi/ipr.c
index 3131cefaf4a9,402e4ca32d70..000000000000
--- a/drivers/scsi/ipr.c
+++ b/drivers/scsi/ipr.c
@@@ -3705,12 -3704,10 +3705,15 @@@ static ssize_t ipr_store_iopoll_weight(
  
  	spin_lock_irqsave(shost->host_lock, lock_flags);
  	ioa_cfg->iopoll_weight = user_iopoll_weight;
 -	if (ioa_cfg->iopoll_weight && ioa_cfg->sis64 && ioa_cfg->nvectors > 1) {
 +	if (blk_iopoll_enabled && ioa_cfg->iopoll_weight &&
 +			ioa_cfg->sis64 && ioa_cfg->nvectors > 1) {
  		for (i = 1; i < ioa_cfg->hrrq_num; i++) {
 -			irq_poll_init(&ioa_cfg->hrrq[i].iopoll,
 +			blk_iopoll_init(&ioa_cfg->hrrq[i].iopoll,
  					ioa_cfg->iopoll_weight, ipr_iopoll);
++<<<<<<< HEAD
 +			blk_iopoll_enable(&ioa_cfg->hrrq[i].iopoll);
++=======
++>>>>>>> 78d0264eb7a9 (irq_poll: don't disable new irq_poll instances)
  		}
  	}
  	spin_unlock_irqrestore(shost->host_lock, lock_flags);
@@@ -10357,12 -10402,10 +10360,15 @@@ static int ipr_probe(struct pci_dev *pd
  	scsi_scan_host(ioa_cfg->host);
  	ioa_cfg->iopoll_weight = ioa_cfg->chip_cfg->iopoll_weight;
  
 -	if (ioa_cfg->iopoll_weight && ioa_cfg->sis64 && ioa_cfg->nvectors > 1) {
 +	if (blk_iopoll_enabled && ioa_cfg->iopoll_weight &&
 +			ioa_cfg->sis64 && ioa_cfg->nvectors > 1) {
  		for (i = 1; i < ioa_cfg->hrrq_num; i++) {
 -			irq_poll_init(&ioa_cfg->hrrq[i].iopoll,
 +			blk_iopoll_init(&ioa_cfg->hrrq[i].iopoll,
  					ioa_cfg->iopoll_weight, ipr_iopoll);
++<<<<<<< HEAD
 +			blk_iopoll_enable(&ioa_cfg->hrrq[i].iopoll);
++=======
++>>>>>>> 78d0264eb7a9 (irq_poll: don't disable new irq_poll instances)
  		}
  	}
  
* Unmerged path block/blk-iopoll.c
* Unmerged path drivers/scsi/be2iscsi/be_main.c
* Unmerged path drivers/scsi/ipr.c
