perf/x86/intel/pt: Add new timing packet enables

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Shishkin <alexander.shishkin@linux.intel.com>
commit b1bf72d6691cc33fc7763fc8ec77df42ca1a8702
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b1bf72d6.failed

Intel PT chapter in the new Intel Architecture SDM adds several packets
corresponding enable bits and registers that control packet generation.
Also, additional bits in the Intel PT CPUID leaf were added to enumerate
presence and parameters of these new packets and features.

The packets and enables are:

  * CYC: cycle accurate mode, provides the number of cycles elapsed since
    previous CYC packet; its presence and available threshold values are
    enumerated via CPUID;

  * MTC: mini time counter packets, used for tracking TSC time between
    full TSC packets; its presence and available resolution options are
    enumerated via CPUID;

  * PSB packet period is now configurable, available period values are
    enumerated via CPUID.

This patch adds corresponding bit and register definitions, pmu driver
capabilities based on CPUID enumeration, new attribute format bits for
the new featurens and extends event configuration validation function
to take these into account.

	Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: acme@infradead.org
	Cc: adrian.hunter@intel.com
	Cc: hpa@zytor.com
Link: http://lkml.kernel.org/r/1438262131-12725-1-git-send-email-alexander.shishkin@linux.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b1bf72d6691cc33fc7763fc8ec77df42ca1a8702)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/uapi/asm/msr-index.h
#	arch/x86/kernel/cpu/intel_pt.h
#	arch/x86/kernel/cpu/perf_event_intel_pt.c
diff --cc arch/x86/include/uapi/asm/msr-index.h
index e2ac3df35ace,c665d34f7285..000000000000
--- a/arch/x86/include/uapi/asm/msr-index.h
+++ b/arch/x86/include/uapi/asm/msr-index.h
@@@ -78,6 -78,32 +78,35 @@@
  #define MSR_IA32_PERF_CAPABILITIES	0x00000345
  #define MSR_PEBS_LD_LAT_THRESHOLD	0x000003f6
  
++<<<<<<< HEAD:arch/x86/include/uapi/asm/msr-index.h
++=======
+ #define MSR_IA32_RTIT_CTL		0x00000570
+ #define RTIT_CTL_TRACEEN		BIT(0)
+ #define RTIT_CTL_CYCLEACC		BIT(1)
+ #define RTIT_CTL_OS			BIT(2)
+ #define RTIT_CTL_USR			BIT(3)
+ #define RTIT_CTL_CR3EN			BIT(7)
+ #define RTIT_CTL_TOPA			BIT(8)
+ #define RTIT_CTL_MTC_EN			BIT(9)
+ #define RTIT_CTL_TSC_EN			BIT(10)
+ #define RTIT_CTL_DISRETC		BIT(11)
+ #define RTIT_CTL_BRANCH_EN		BIT(13)
+ #define RTIT_CTL_MTC_RANGE_OFFSET	14
+ #define RTIT_CTL_MTC_RANGE		(0x0full << RTIT_CTL_MTC_RANGE_OFFSET)
+ #define RTIT_CTL_CYC_THRESH_OFFSET	19
+ #define RTIT_CTL_CYC_THRESH		(0x0full << RTIT_CTL_CYC_THRESH_OFFSET)
+ #define RTIT_CTL_PSB_FREQ_OFFSET	24
+ #define RTIT_CTL_PSB_FREQ      		(0x0full << RTIT_CTL_PSB_FREQ_OFFSET)
+ #define MSR_IA32_RTIT_STATUS		0x00000571
+ #define RTIT_STATUS_CONTEXTEN		BIT(1)
+ #define RTIT_STATUS_TRIGGEREN		BIT(2)
+ #define RTIT_STATUS_ERROR		BIT(4)
+ #define RTIT_STATUS_STOPPED		BIT(5)
+ #define MSR_IA32_RTIT_CR3_MATCH		0x00000572
+ #define MSR_IA32_RTIT_OUTPUT_BASE	0x00000560
+ #define MSR_IA32_RTIT_OUTPUT_MASK	0x00000561
+ 
++>>>>>>> b1bf72d6691c (perf/x86/intel/pt: Add new timing packet enables):arch/x86/include/asm/msr-index.h
  #define MSR_MTRRfix64K_00000		0x00000250
  #define MSR_MTRRfix16K_80000		0x00000258
  #define MSR_MTRRfix16K_A0000		0x00000259
* Unmerged path arch/x86/kernel/cpu/intel_pt.h
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_pt.c
* Unmerged path arch/x86/include/uapi/asm/msr-index.h
* Unmerged path arch/x86/kernel/cpu/intel_pt.h
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_pt.c
