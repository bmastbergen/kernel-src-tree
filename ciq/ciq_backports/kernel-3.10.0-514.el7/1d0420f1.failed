ACPI: Use the length check for io resources as well

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] Use the length check for io resources as well (Myron Stowe) [1344513]
Rebuild_FUZZ: 93.75%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 1d0420f1cfc4763a8c5bfc617e0a40f710c2f74d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1d0420f1.failed

Also apply length check to IO resources.

[Jiang] Remove enforcement that resource starting address must be
non-zero.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 1d0420f1cfc4763a8c5bfc617e0a40f710c2f74d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/resource.c
diff --cc drivers/acpi/resource.c
index d4c3d7640715,16d291c60277..000000000000
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@@ -199,17 -205,15 +195,22 @@@ bool acpi_dev_resource_address_space(st
  
  	switch(addr.resource_type) {
  	case ACPI_MEMORY_RANGE:
 -		acpi_dev_memresource_flags(res, addr.address.address_length,
 -					   addr.info.mem.write_protect,
 -					   window);
 +		len = addr.maximum - addr.minimum + 1;
 +		res->flags = acpi_dev_memresource_flags(len,
 +						addr.info.mem.write_protect,
 +						window);
  		break;
  	case ACPI_IO_RANGE:
 -		io_decode = addr.address.granularity == 0xfff ?
 +		io_decode = addr.granularity == 0xfff ?
  				ACPI_DECODE_10 : ACPI_DECODE_16;
++<<<<<<< HEAD
 +		res->flags = acpi_dev_ioresource_flags(addr.minimum,
 +						       addr.maximum,
 +						       io_decode, window);
++=======
+ 		acpi_dev_ioresource_flags(res, addr.address.address_length,
+ 					  io_decode, window);
++>>>>>>> 1d0420f1cfc4 (ACPI: Use the length check for io resources as well)
  		break;
  	case ACPI_BUS_NUMBER_RANGE:
  		res->flags = IORESOURCE_BUS;
@@@ -250,17 -253,16 +251,22 @@@ bool acpi_dev_resource_ext_address_spac
  
  	switch(ext_addr->resource_type) {
  	case ACPI_MEMORY_RANGE:
 -		acpi_dev_memresource_flags(res,
 -					   ext_addr->address.address_length,
 -					   ext_addr->info.mem.write_protect,
 -					   window);
 +		len = ext_addr->maximum - ext_addr->minimum + 1;
 +		res->flags = acpi_dev_memresource_flags(len,
 +					ext_addr->info.mem.write_protect,
 +					window);
  		break;
  	case ACPI_IO_RANGE:
 -		io_decode = ext_addr->address.granularity == 0xfff ?
 +		io_decode = ext_addr->granularity == 0xfff ?
  				ACPI_DECODE_10 : ACPI_DECODE_16;
++<<<<<<< HEAD
 +		res->flags = acpi_dev_ioresource_flags(ext_addr->minimum,
 +						       ext_addr->maximum,
 +						       io_decode, window);
++=======
+ 		acpi_dev_ioresource_flags(res, ext_addr->address.address_length,
+ 					  io_decode, window);
++>>>>>>> 1d0420f1cfc4 (ACPI: Use the length check for io resources as well)
  		break;
  	case ACPI_BUS_NUMBER_RANGE:
  		res->flags = IORESOURCE_BUS;
* Unmerged path drivers/acpi/resource.c
