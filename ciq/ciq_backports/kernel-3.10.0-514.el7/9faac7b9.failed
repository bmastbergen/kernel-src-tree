mmc: sdhci: enable tuning for DDR50

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: enable tuning for DDR50 (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 92.31%
commit-author Weijun Yang <york.yang@csr.com>
commit 9faac7b95ea4f9e83b7a914084cc81ef1632fd91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9faac7b9.failed

CMD19 tuning is also available for DDR50 mode.

	Signed-off-by: Weijun Yang <york.yang@csr.com>
	Signed-off-by: Barry Song <Baohua.Song@csr.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 9faac7b95ea4f9e83b7a914084cc81ef1632fd91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci.c
diff --cc drivers/mmc/host/sdhci.c
index 4d8ab1379ab4,b48565ed5616..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -1896,27 -1888,46 +1896,51 @@@ static int sdhci_execute_tuning(struct 
  	sdhci_runtime_pm_get(host);
  	spin_lock_irqsave(&host->lock, flags);
  
 -	hs400_tuning = host->flags & SDHCI_HS400_TUNING;
 -	host->flags &= ~SDHCI_HS400_TUNING;
 -
 -	if (host->tuning_mode == SDHCI_TUNING_MODE_1)
 -		tuning_count = host->tuning_count;
 +	ctrl = sdhci_readw(host, SDHCI_HOST_CONTROL2);
  
  	/*
- 	 * The Host Controller needs tuning only in case of SDR104 mode
- 	 * and for SDR50 mode when Use Tuning for SDR50 is set in the
- 	 * Capabilities register.
+ 	 * The Host Controller needs tuning in case of SDR104 and DDR50
+ 	 * mode, and for SDR50 mode when Use Tuning for SDR50 is set in
+ 	 * the Capabilities register.
  	 * If the Host Controller supports the HS200 mode then the
  	 * tuning function has to be executed.
  	 */
 -	switch (host->timing) {
 -	/* HS400 tuning is done in HS200 mode */
 -	case MMC_TIMING_MMC_HS400:
 -		err = -EINVAL;
 -		goto out_unlock;
 -
 +	if (((ctrl & SDHCI_CTRL_UHS_MASK) == SDHCI_CTRL_UHS_SDR50) &&
 +	    (host->flags & SDHCI_SDR50_NEEDS_TUNING ||
 +	     host->flags & SDHCI_SDR104_NEEDS_TUNING))
 +		requires_tuning_nonuhs = true;
 +
++<<<<<<< HEAD
 +	if (((ctrl & SDHCI_CTRL_UHS_MASK) == SDHCI_CTRL_UHS_SDR104) ||
 +	    requires_tuning_nonuhs)
 +		ctrl |= SDHCI_CTRL_EXEC_TUNING;
 +	else {
 +		spin_unlock_irqrestore(&host->lock, flags);
 +		sdhci_runtime_pm_put(host);
 +		return 0;
++=======
+ 	case MMC_TIMING_MMC_HS200:
+ 		/*
+ 		 * Periodic re-tuning for HS400 is not expected to be needed, so
+ 		 * disable it here.
+ 		 */
+ 		if (hs400_tuning)
+ 			tuning_count = 0;
+ 		break;
+ 
+ 	case MMC_TIMING_UHS_SDR104:
+ 	case MMC_TIMING_UHS_DDR50:
+ 		break;
+ 
+ 	case MMC_TIMING_UHS_SDR50:
+ 		if (host->flags & SDHCI_SDR50_NEEDS_TUNING ||
+ 		    host->flags & SDHCI_SDR104_NEEDS_TUNING)
+ 			break;
+ 		/* FALLTHROUGH */
+ 
+ 	default:
+ 		goto out_unlock;
++>>>>>>> 9faac7b95ea4 (mmc: sdhci: enable tuning for DDR50)
  	}
  
  	if (host->ops->platform_execute_tuning) {
* Unmerged path drivers/mmc/host/sdhci.c
