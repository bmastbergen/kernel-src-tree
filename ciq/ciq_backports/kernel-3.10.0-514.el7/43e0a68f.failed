perf hists: Add struct perf_hpp_list argument to helper functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 43e0a68f13047750a3728c983a539c61fb4121c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/43e0a68f.failed

Adding struct perf_hpp_list argument to following helper functions:

  void perf_hpp__setup_output_field(struct perf_hpp_list *list);
  void perf_hpp__reset_output_field(struct perf_hpp_list *list);
  void perf_hpp__append_sort_keys(struct perf_hpp_list *list);

so they could be used on hists's hpp_list.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1453109064-1026-24-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 43e0a68f13047750a3728c983a539c61fb4121c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/hist.c
diff --cc tools/perf/ui/hist.c
index f3d12f9f2181,8075d4cc54a8..000000000000
--- a/tools/perf/ui/hist.c
+++ b/tools/perf/ui/hist.c
@@@ -527,31 -527,38 +527,40 @@@ void perf_hpp__cancel_cumulate(void
  	if (is_strict_order(field_order))
  		return;
  
 -	ovh = &perf_hpp__format[PERF_HPP__OVERHEAD];
 -	acc = &perf_hpp__format[PERF_HPP__OVERHEAD_ACC];
 -
 -	perf_hpp_list__for_each_format_safe(&perf_hpp_list, fmt, tmp) {
 -		if (acc->equal(acc, fmt)) {
 -			perf_hpp__column_unregister(fmt);
 -			continue;
 -		}
 -
 -		if (ovh->equal(ovh, fmt))
 -			fmt->name = "Overhead";
 -	}
 -}
 -
 -static bool fmt_equal(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b)
 -{
 -	return a->equal && a->equal(a, b);
 +	perf_hpp__column_disable(PERF_HPP__OVERHEAD_ACC);
 +	perf_hpp__format[PERF_HPP__OVERHEAD].name = "Overhead";
  }
  
- void perf_hpp__setup_output_field(void)
+ void perf_hpp__setup_output_field(struct perf_hpp_list *list)
  {
  	struct perf_hpp_fmt *fmt;
  
  	/* append sort keys to output field */
++<<<<<<< HEAD
 +	perf_hpp__for_each_sort_list(fmt) {
 +		if (!list_empty(&fmt->list))
 +			continue;
 +
 +		/*
 +		 * sort entry fields are dynamically created,
 +		 * so they can share a same sort key even though
 +		 * the list is empty.
 +		 */
 +		if (perf_hpp__is_sort_entry(fmt)) {
 +			struct perf_hpp_fmt *pos;
 +
 +			perf_hpp__for_each_format(pos) {
 +				if (perf_hpp__same_sort_entry(pos, fmt))
 +					goto next;
 +			}
++=======
+ 	perf_hpp_list__for_each_sort_list(list, fmt) {
+ 		struct perf_hpp_fmt *pos;
+ 
+ 		perf_hpp_list__for_each_format(list, pos) {
+ 			if (fmt_equal(fmt, pos))
+ 				goto next;
++>>>>>>> 43e0a68f1304 (perf hists: Add struct perf_hpp_list argument to helper functions)
  		}
  
  		perf_hpp__column_register(fmt);
@@@ -565,22 -572,12 +574,31 @@@ void perf_hpp__append_sort_keys(struct 
  	struct perf_hpp_fmt *fmt;
  
  	/* append output fields to sort keys */
++<<<<<<< HEAD
 +	perf_hpp__for_each_format(fmt) {
 +		if (!list_empty(&fmt->sort_list))
 +			continue;
 +
 +		/*
 +		 * sort entry fields are dynamically created,
 +		 * so they can share a same sort key even though
 +		 * the list is empty.
 +		 */
 +		if (perf_hpp__is_sort_entry(fmt)) {
 +			struct perf_hpp_fmt *pos;
 +
 +			perf_hpp__for_each_sort_list(pos) {
 +				if (perf_hpp__same_sort_entry(pos, fmt))
 +					goto next;
 +			}
++=======
+ 	perf_hpp_list__for_each_format(list, fmt) {
+ 		struct perf_hpp_fmt *pos;
+ 
+ 		perf_hpp_list__for_each_sort_list(list, pos) {
+ 			if (fmt_equal(fmt, pos))
+ 				goto next;
++>>>>>>> 43e0a68f1304 (perf hists: Add struct perf_hpp_list argument to helper functions)
  		}
  
  		perf_hpp__register_sort_field(fmt);
@@@ -589,20 -586,29 +607,35 @@@ next
  	}
  }
  
++<<<<<<< HEAD
 +void perf_hpp__reset_output_field(void)
++=======
+ 
+ static void fmt_free(struct perf_hpp_fmt *fmt)
+ {
+ 	if (fmt->free)
+ 		fmt->free(fmt);
+ }
+ 
+ void perf_hpp__reset_output_field(struct perf_hpp_list *list)
++>>>>>>> 43e0a68f1304 (perf hists: Add struct perf_hpp_list argument to helper functions)
  {
  	struct perf_hpp_fmt *fmt, *tmp;
  
  	/* reset output fields */
++<<<<<<< HEAD
 +	perf_hpp__for_each_format_safe(fmt, tmp) {
++=======
+ 	perf_hpp_list__for_each_format_safe(list, fmt, tmp) {
++>>>>>>> 43e0a68f1304 (perf hists: Add struct perf_hpp_list argument to helper functions)
  		list_del_init(&fmt->list);
  		list_del_init(&fmt->sort_list);
 -		fmt_free(fmt);
  	}
  
  	/* reset sort keys */
- 	perf_hpp_list__for_each_sort_list_safe(&perf_hpp_list, fmt, tmp) {
+ 	perf_hpp_list__for_each_sort_list_safe(list, fmt, tmp) {
  		list_del_init(&fmt->list);
  		list_del_init(&fmt->sort_list);
 -		fmt_free(fmt);
  	}
  }
  
* Unmerged path tools/perf/ui/hist.c
diff --git a/tools/perf/util/hist.h b/tools/perf/util/hist.h
index 9ddf2f915eef..1559e71207e3 100644
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@ -271,9 +271,10 @@ enum {
 void perf_hpp__init(void);
 void perf_hpp__column_unregister(struct perf_hpp_fmt *format);
 void perf_hpp__cancel_cumulate(void);
-void perf_hpp__setup_output_field(void);
-void perf_hpp__reset_output_field(void);
-void perf_hpp__append_sort_keys(void);
+void perf_hpp__setup_output_field(struct perf_hpp_list *list);
+void perf_hpp__reset_output_field(struct perf_hpp_list *list);
+void perf_hpp__append_sort_keys(struct perf_hpp_list *list);
+
 
 bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format);
 bool perf_hpp__same_sort_entry(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b);
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 6d30991339ed..969c0e361a94 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -2346,9 +2346,9 @@ int setup_sorting(struct perf_evlist *evlist)
 		return err;
 
 	/* copy sort keys to output fields */
-	perf_hpp__setup_output_field();
+	perf_hpp__setup_output_field(&perf_hpp_list);
 	/* and then copy output fields to sort keys */
-	perf_hpp__append_sort_keys();
+	perf_hpp__append_sort_keys(&perf_hpp_list);
 
 	return 0;
 }
@@ -2364,5 +2364,5 @@ void reset_output_field(void)
 	sort_order = NULL;
 
 	reset_dimensions();
-	perf_hpp__reset_output_field();
+	perf_hpp__reset_output_field(&perf_hpp_list);
 }
