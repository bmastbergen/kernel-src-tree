vxlan: do not receive IPv4 packets on IPv6 socket

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Benc <jbenc@redhat.com>
commit a43a9ef6a2e510fec61176ff2c34fab3e7d581da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a43a9ef6.failed

By default (subject to the sysctl settings), IPv6 sockets listen also for
IPv4 traffic. Vxlan is not prepared for that and expects IPv6 header in
packets received through an IPv6 socket.

In addition, it's currently not possible to have both IPv4 and IPv6 vxlan
tunnel on the same port (unless bindv6only sysctl is enabled), as it's not
possible to create and bind both IPv4 and IPv6 vxlan interfaces and there's
no way to specify both IPv4 and IPv6 remote/group IP addresses.

Set IPV6_V6ONLY on vxlan sockets to fix both of these issues. This is not
done globally in udp_tunnel, as l2tp and tipc seems to work okay when
receiving IPv4 packets on IPv6 socket and people may rely on this behavior.
The other tunnels (geneve and fou) do not support IPv6.

	Signed-off-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a43a9ef6a2e510fec61176ff2c34fab3e7d581da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_udp_tunnel.c
diff --cc net/ipv6/ip6_udp_tunnel.c
index bba8903e871f,14dacf1df529..000000000000
--- a/net/ipv6/ip6_udp_tunnel.c
+++ b/net/ipv6/ip6_udp_tunnel.c
@@@ -23,7 -23,14 +23,18 @@@ int udp_sock_create6(struct net *net, s
  	if (err < 0)
  		goto error;
  
++<<<<<<< HEAD
 +	sk_change_net(sock->sk, net);
++=======
+ 	if (cfg->ipv6_v6only) {
+ 		int val = 1;
+ 
+ 		err = kernel_setsockopt(sock, IPPROTO_IPV6, IPV6_V6ONLY,
+ 					(char *) &val, sizeof(val));
+ 		if (err < 0)
+ 			goto error;
+ 	}
++>>>>>>> a43a9ef6a2e5 (vxlan: do not receive IPv4 packets on IPv6 socket)
  
  	udp6_addr.sin6_family = AF_INET6;
  	memcpy(&udp6_addr.sin6_addr, &cfg->local_ip6,
diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 9d79e4f0a7b6..7dc9fdf3b427 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -2478,6 +2478,7 @@ static struct socket *vxlan_create_sock(struct net *net, bool ipv6,
 		udp_conf.family = AF_INET6;
 		udp_conf.use_udp6_rx_checksums =
 		    !(flags & VXLAN_F_UDP_ZERO_CSUM6_RX);
+		udp_conf.ipv6_v6only = 1;
 	} else {
 		udp_conf.family = AF_INET;
 	}
diff --git a/include/net/udp_tunnel.h b/include/net/udp_tunnel.h
index c491c1221606..93fe751c8064 100644
--- a/include/net/udp_tunnel.h
+++ b/include/net/udp_tunnel.h
@@ -31,7 +31,8 @@ struct udp_port_cfg {
 	__be16			peer_udp_port;
 	unsigned int		use_udp_checksums:1,
 				use_udp6_tx_checksums:1,
-				use_udp6_rx_checksums:1;
+				use_udp6_rx_checksums:1,
+				ipv6_v6only:1;
 };
 
 int udp_sock_create4(struct net *net, struct udp_port_cfg *cfg,
* Unmerged path net/ipv6/ip6_udp_tunnel.c
