drm/nouveau/disp/sor/gf119: both links use the same training register

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit a8953c52b95167b5d21a66f0859751570271d834
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a8953c52.failed

It appears that, for whatever reason, both link A and B use the same
register to control the training pattern.  It's a little odd, as the
GPUs before this (Tesla/Fermi1) have per-link registers, as do newer
GPUs (Maxwell).

Fixes the third DP output on NVS 510 (GK107).

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
	Cc: stable@vger.kernel.org
(cherry picked from commit a8953c52b95167b5d21a66f0859751570271d834)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
index 1f02b603e19a,5111560b4809..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
@@@ -37,11 -37,10 +37,16 @@@ gf110_sor_loff(struct nvkm_output_dp *o
  }
  
  static int
 -gf119_sor_dp_pattern(struct nvkm_output_dp *outp, int pattern)
 +gf110_sor_dp_pattern(struct nvkm_output_dp *outp, int pattern)
  {
++<<<<<<< HEAD:drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
 +	struct nv50_disp_priv *priv = (void *)nvkm_disp(outp);
 +	const u32 loff = gf110_sor_loff(outp);
 +	nv_mask(priv, 0x61c110 + loff, 0x0f0f0f0f, 0x01010101 * pattern);
++=======
+ 	struct nvkm_device *device = outp->base.disp->engine.subdev.device;
+ 	nvkm_mask(device, 0x61c110, 0x0f0f0f0f, 0x01010101 * pattern);
++>>>>>>> a8953c52b951 (drm/nouveau/disp/sor/gf119: both links use the same training register):drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf119.c
  	return 0;
  }
  
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/sorgf110.c
