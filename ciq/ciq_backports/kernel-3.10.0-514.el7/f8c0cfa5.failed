net: cdc_mbim: add "NDP to end" quirk for Huawei E3372

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bjørn Mork <bjorn@mork.no>
commit f8c0cfa5eca902d388c0b57c7ca29a1ff2e6d8c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f8c0cfa5.failed

The Huawei E3372 (12d1:157d) needs this quirk in MBIM mode
as well. Allow this by forcing the NTB to contain only a
single NDP, and add a device specific entry for this ID.

Due to the way Huawei use device IDs, this might be applied
to other modems as well.  It is assumed that those modems
will be based on the same firmware and will need this quirk
too.  If not, it will still not harm normal usage, although
multiplexing performance could be impacted.

	Cc: Enrico Mioso <mrkiko.rs@gmail.com>
	Reported-by: Sami Farin <hvtaifwkbgefbaei@gmail.com>
	Signed-off-by: Bjørn Mork <bjorn@mork.no>
Acked-By: Enrico Mioso <mrkiko.rs@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f8c0cfa5eca902d388c0b57c7ca29a1ff2e6d8c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/cdc_mbim.c
#	drivers/net/usb/cdc_ncm.c
diff --cc drivers/net/usb/cdc_mbim.c
index a164dab06678,8973abdec9f6..000000000000
--- a/drivers/net/usb/cdc_mbim.c
+++ b/drivers/net/usb/cdc_mbim.c
@@@ -158,7 -158,7 +158,11 @@@ static int cdc_mbim_bind(struct usbnet 
  	if (!cdc_ncm_comm_intf_is_mbim(intf->cur_altsetting))
  		goto err;
  
++<<<<<<< HEAD
 +	ret = cdc_ncm_bind_common(dev, intf, data_altsetting);
++=======
+ 	ret = cdc_ncm_bind_common(dev, intf, data_altsetting, dev->driver_info->data);
++>>>>>>> f8c0cfa5eca9 (net: cdc_mbim: add "NDP to end" quirk for Huawei E3372)
  	if (ret)
  		goto err;
  
diff --cc drivers/net/usb/cdc_ncm.c
index e977104210f9,1e9843a41168..000000000000
--- a/drivers/net/usb/cdc_ncm.c
+++ b/drivers/net/usb/cdc_ncm.c
@@@ -628,6 -951,22 +628,25 @@@ static struct usb_cdc_ncm_ndp16 *cdc_nc
  	struct usb_cdc_ncm_nth16 *nth16 = (void *)skb->data;
  	size_t ndpoffset = le16_to_cpu(nth16->wNdpIndex);
  
++<<<<<<< HEAD
++=======
+ 	/* If NDP should be moved to the end of the NCM package, we can't follow the
+ 	* NTH16 header as we would normally do. NDP isn't written to the SKB yet, and
+ 	* the wNdpIndex field in the header is actually not consistent with reality. It will be later.
+ 	*/
+ 	if (ctx->drvflags & CDC_NCM_FLAG_NDP_TO_END) {
+ 		if (ctx->delayed_ndp16->dwSignature == sign)
+ 			return ctx->delayed_ndp16;
+ 
+ 		/* We can only push a single NDP to the end. Return
+ 		 * NULL to send what we've already got and queue this
+ 		 * skb for later.
+ 		 */
+ 		else if (ctx->delayed_ndp16->dwSignature)
+ 			return NULL;
+ 	}
+ 
++>>>>>>> f8c0cfa5eca9 (net: cdc_mbim: add "NDP to end" quirk for Huawei E3372)
  	/* follow the chain of NDPs, looking for a match */
  	while (ndpoffset) {
  		ndp16 = (struct usb_cdc_ncm_ndp16 *)(skb->data + ndpoffset);
* Unmerged path drivers/net/usb/cdc_mbim.c
* Unmerged path drivers/net/usb/cdc_ncm.c
