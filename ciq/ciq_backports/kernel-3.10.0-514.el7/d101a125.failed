fs: add file_dentry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [fs] add file_dentry() (Miklos Szeredi) [1343388]
Rebuild_FUZZ: 89.47%
commit-author Miklos Szeredi <miklos@szeredi.hu>
commit d101a125954eae1d397adda94ca6319485a50493
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d101a125.failed

This series fixes bugs in nfs and ext4 due to 4bacc9c9234c ("overlayfs:
Make f_path always point to the overlay and f_inode to the underlay").

Regular files opened on overlayfs will result in the file being opened on
the underlying filesystem, while f_path points to the overlayfs
mount/dentry.

This confuses filesystems which get the dentry from struct file and assume
it's theirs.

Add a new helper, file_dentry() [*], to get the filesystem's own dentry
from the file.  This checks file->f_path.dentry->d_flags against
DCACHE_OP_REAL, and returns file->f_path.dentry if DCACHE_OP_REAL is not
set (this is the common, non-overlayfs case).

In the uncommon case it will call into overlayfs's ->d_real() to get the
underlying dentry, matching file_inode(file).

The reason we need to check against the inode is that if the file is copied
up while being open, d_real() would return the upper dentry, while the open
file comes from the lower dentry.

[*] If possible, it's better simply to use file_inode() instead.

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Tested-by: Goldwyn Rodrigues <rgoldwyn@suse.com>
	Reviewed-by: Trond Myklebust <trond.myklebust@primarydata.com>
	Cc: <stable@vger.kernel.org> # v4.2
	Cc: David Howells <dhowells@redhat.com>
	Cc: Al Viro <viro@zeniv.linux.org.uk>
	Cc: Daniel Axtens <dja@axtens.net>
(cherry picked from commit d101a125954eae1d397adda94ca6319485a50493)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dcache.c
#	fs/overlayfs/super.c
#	include/linux/dcache.h
#	include/linux/fs.h
diff --cc fs/dcache.c
index 94451775d8ad,d5ecc6e477da..000000000000
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@@ -1472,7 -1666,9 +1472,13 @@@ void d_set_d_op(struct dentry *dentry, 
  				DCACHE_OP_COMPARE	|
  				DCACHE_OP_REVALIDATE	|
  				DCACHE_OP_WEAK_REVALIDATE	|
++<<<<<<< HEAD
 +				DCACHE_OP_DELETE ));
++=======
+ 				DCACHE_OP_DELETE	|
+ 				DCACHE_OP_SELECT_INODE	|
+ 				DCACHE_OP_REAL));
++>>>>>>> d101a125954e (fs: add file_dentry())
  	dentry->d_op = op;
  	if (!op)
  		return;
@@@ -1488,6 -1684,10 +1494,13 @@@
  		dentry->d_flags |= DCACHE_OP_DELETE;
  	if (op->d_prune)
  		dentry->d_flags |= DCACHE_OP_PRUNE;
++<<<<<<< HEAD
++=======
+ 	if (op->d_select_inode)
+ 		dentry->d_flags |= DCACHE_OP_SELECT_INODE;
+ 	if (op->d_real)
+ 		dentry->d_flags |= DCACHE_OP_REAL;
++>>>>>>> d101a125954e (fs: add file_dentry())
  
  }
  EXPORT_SYMBOL(d_set_d_op);
diff --cc fs/overlayfs/super.c
index 5c0fb1f1eab2,5d972e6cd3fe..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -345,6 -369,8 +376,11 @@@ static int ovl_dentry_weak_revalidate(s
  
  static const struct dentry_operations ovl_dentry_operations = {
  	.d_release = ovl_dentry_release,
++<<<<<<< HEAD
++=======
+ 	.d_select_inode = ovl_d_select_inode,
+ 	.d_real = ovl_d_real,
++>>>>>>> d101a125954e (fs: add file_dentry())
  };
  
  static const struct dentry_operations ovl_reval_dentry_operations = {
diff --cc include/linux/dcache.h
index 5888528c0fa0,4bb4de8d95ea..000000000000
--- a/include/linux/dcache.h
+++ b/include/linux/dcache.h
@@@ -158,6 -160,8 +158,11 @@@ struct dentry_operations 
  	char *(*d_dname)(struct dentry *, char *, int);
  	struct vfsmount *(*d_automount)(struct path *);
  	int (*d_manage)(struct dentry *, bool);
++<<<<<<< HEAD
++=======
+ 	struct inode *(*d_select_inode)(struct dentry *, unsigned);
+ 	struct dentry *(*d_real)(struct dentry *, struct inode *);
++>>>>>>> d101a125954e (fs: add file_dentry())
  } ____cacheline_aligned;
  
  /*
@@@ -208,15 -214,23 +213,33 @@@
  #define DCACHE_MANAGED_DENTRY \
  	(DCACHE_MOUNTED|DCACHE_NEED_AUTOMOUNT|DCACHE_MANAGE_TRANSIT)
  
 -#define DCACHE_LRU_LIST			0x00080000
 -
 +#define DCACHE_LRU_LIST		0x80000
 +#define DCACHE_DENTRY_KILLED	0x100000
 +
++<<<<<<< HEAD
 +#define DCACHE_ENTRY_TYPE		0x07000000
 +#define DCACHE_MISS_TYPE		0x00000000 /* Negative dentry */
 +#define DCACHE_DIRECTORY_TYPE		0x01000000 /* Normal directory */
 +#define DCACHE_AUTODIR_TYPE		0x02000000 /* Lookupless directory (presumed automount) */
 +#define DCACHE_SYMLINK_TYPE		0x03000000 /* Symlink */
 +#define DCACHE_FILE_TYPE		0x04000000 /* Other file type */
++=======
+ #define DCACHE_ENTRY_TYPE		0x00700000
+ #define DCACHE_MISS_TYPE		0x00000000 /* Negative dentry (maybe fallthru to nowhere) */
+ #define DCACHE_WHITEOUT_TYPE		0x00100000 /* Whiteout dentry (stop pathwalk) */
+ #define DCACHE_DIRECTORY_TYPE		0x00200000 /* Normal directory */
+ #define DCACHE_AUTODIR_TYPE		0x00300000 /* Lookupless directory (presumed automount) */
+ #define DCACHE_REGULAR_TYPE		0x00400000 /* Regular file type (or fallthru to such) */
+ #define DCACHE_SPECIAL_TYPE		0x00500000 /* Other file type (or fallthru to such) */
+ #define DCACHE_SYMLINK_TYPE		0x00600000 /* Symlink (or fallthru to such) */
+ 
+ #define DCACHE_MAY_FREE			0x00800000
+ #define DCACHE_FALLTHRU			0x01000000 /* Fall through to lower layer */
+ #define DCACHE_OP_SELECT_INODE		0x02000000 /* Unioned entry: dcache op selects inode */
+ 
+ #define DCACHE_ENCRYPTED_WITH_KEY	0x04000000 /* dir is encrypted with a valid key */
+ #define DCACHE_OP_REAL			0x08000000
++>>>>>>> d101a125954e (fs: add file_dentry())
  
  extern seqlock_t rename_lock;
  
@@@ -459,6 -443,126 +482,78 @@@ static inline bool d_is_positive(const 
  	return !d_is_negative(dentry);
  }
  
 -/**
 - * d_really_is_negative - Determine if a dentry is really negative (ignoring fallthroughs)
 - * @dentry: The dentry in question
 - *
 - * Returns true if the dentry represents either an absent name or a name that
 - * doesn't map to an inode (ie. ->d_inode is NULL).  The dentry could represent
 - * a true miss, a whiteout that isn't represented by a 0,0 chardev or a
 - * fallthrough marker in an opaque directory.
 - *
 - * Note!  (1) This should be used *only* by a filesystem to examine its own
 - * dentries.  It should not be used to look at some other filesystem's
 - * dentries.  (2) It should also be used in combination with d_inode() to get
 - * the inode.  (3) The dentry may have something attached to ->d_lower and the
 - * type field of the flags may be set to something other than miss or whiteout.
 - */
 -static inline bool d_really_is_negative(const struct dentry *dentry)
 -{
 -	return dentry->d_inode == NULL;
 -}
 -
 -/**
 - * d_really_is_positive - Determine if a dentry is really positive (ignoring fallthroughs)
 - * @dentry: The dentry in question
 - *
 - * Returns true if the dentry represents a name that maps to an inode
 - * (ie. ->d_inode is not NULL).  The dentry might still represent a whiteout if
 - * that is represented on medium as a 0,0 chardev.
 - *
 - * Note!  (1) This should be used *only* by a filesystem to examine its own
 - * dentries.  It should not be used to look at some other filesystem's
 - * dentries.  (2) It should also be used in combination with d_inode() to get
 - * the inode.
 - */
 -static inline bool d_really_is_positive(const struct dentry *dentry)
 -{
 -	return dentry->d_inode != NULL;
 -}
 -
 -static inline int simple_positive(struct dentry *dentry)
 -{
 -	return d_really_is_positive(dentry) && !d_unhashed(dentry);
 -}
 -
 -extern void d_set_fallthru(struct dentry *dentry);
 -
 -static inline bool d_is_fallthru(const struct dentry *dentry)
 -{
 -	return dentry->d_flags & DCACHE_FALLTHRU;
 -}
 -
 -
  extern int sysctl_vfs_cache_pressure;
  
++<<<<<<< HEAD
++=======
+ static inline unsigned long vfs_pressure_ratio(unsigned long val)
+ {
+ 	return mult_frac(val, sysctl_vfs_cache_pressure, 100);
+ }
+ 
+ /**
+  * d_inode - Get the actual inode of this dentry
+  * @dentry: The dentry to query
+  *
+  * This is the helper normal filesystems should use to get at their own inodes
+  * in their own dentries and ignore the layering superimposed upon them.
+  */
+ static inline struct inode *d_inode(const struct dentry *dentry)
+ {
+ 	return dentry->d_inode;
+ }
+ 
+ /**
+  * d_inode_rcu - Get the actual inode of this dentry with ACCESS_ONCE()
+  * @dentry: The dentry to query
+  *
+  * This is the helper normal filesystems should use to get at their own inodes
+  * in their own dentries and ignore the layering superimposed upon them.
+  */
+ static inline struct inode *d_inode_rcu(const struct dentry *dentry)
+ {
+ 	return ACCESS_ONCE(dentry->d_inode);
+ }
+ 
+ /**
+  * d_backing_inode - Get upper or lower inode we should be using
+  * @upper: The upper layer
+  *
+  * This is the helper that should be used to get at the inode that will be used
+  * if this dentry were to be opened as a file.  The inode may be on the upper
+  * dentry or it may be on a lower dentry pinned by the upper.
+  *
+  * Normal filesystems should not use this to access their own inodes.
+  */
+ static inline struct inode *d_backing_inode(const struct dentry *upper)
+ {
+ 	struct inode *inode = upper->d_inode;
+ 
+ 	return inode;
+ }
+ 
+ /**
+  * d_backing_dentry - Get upper or lower dentry we should be using
+  * @upper: The upper layer
+  *
+  * This is the helper that should be used to get the dentry of the inode that
+  * will be used if this dentry were opened as a file.  It may be the upper
+  * dentry or it may be a lower dentry pinned by the upper.
+  *
+  * Normal filesystems should not use this to access their own dentries.
+  */
+ static inline struct dentry *d_backing_dentry(struct dentry *upper)
+ {
+ 	return upper;
+ }
+ 
+ static inline struct dentry *d_real(struct dentry *dentry)
+ {
+ 	if (unlikely(dentry->d_flags & DCACHE_OP_REAL))
+ 		return dentry->d_op->d_real(dentry, NULL);
+ 	else
+ 		return dentry;
+ }
+ 
++>>>>>>> d101a125954e (fs: add file_dentry())
  #endif	/* __LINUX_DCACHE_H */
diff --cc include/linux/fs.h
index 37d4ac39152e,b2ed2311b021..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -1258,6 -1236,25 +1258,28 @@@ static inline void show_fd_locks(struc
  			struct file *filp, struct files_struct *files) {}
  #endif /* !CONFIG_FILE_LOCKING */
  
++<<<<<<< HEAD
++=======
+ static inline struct inode *file_inode(const struct file *f)
+ {
+ 	return f->f_inode;
+ }
+ 
+ static inline struct dentry *file_dentry(const struct file *file)
+ {
+ 	struct dentry *dentry = file->f_path.dentry;
+ 
+ 	if (unlikely(dentry->d_flags & DCACHE_OP_REAL))
+ 		return dentry->d_op->d_real(dentry, file_inode(file));
+ 	else
+ 		return dentry;
+ }
+ 
+ static inline int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
+ {
+ 	return locks_lock_inode_wait(file_inode(filp), fl);
+ }
++>>>>>>> d101a125954e (fs: add file_dentry())
  
  struct fasync_struct {
  	spinlock_t		fa_lock;
* Unmerged path fs/dcache.c
* Unmerged path fs/overlayfs/super.c
* Unmerged path include/linux/dcache.h
* Unmerged path include/linux/fs.h
