tools/power/turbostat: split core MSR support into status + limit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jacob Pan <jacob.jun.pan@linux.intel.com>
commit 9148494c59f53bb6c9233df07447777dc533db33
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9148494c.failed

Some CPUs may not have PP0/Core domain power limit MSRs. We
should still allow its domain energy status to be used. This
patch splits PP0/Core RAPL into two separate flags for power
limit and energy status such that energy status can continue
to be reported without power limit.

Without this patch, turbostat will not be able to use the
remaining RAPL features if some PL MSRs are not present.

	Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 9148494c59f53bb6c9233df07447777dc533db33)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index 0eec0ca23b25,3a80f949e5ba..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -355,33 -399,32 +358,45 @@@ void print_header(void
  
  	if (do_rapl && !rapl_joules) {
  		if (do_rapl & RAPL_PKG)
++<<<<<<< HEAD
 +			outp += sprintf(outp, " PkgWatt");
 +		if (do_rapl & RAPL_CORES)
 +			outp += sprintf(outp, " CorWatt");
++=======
+ 			outp += sprintf(outp, "\tPkgWatt");
+ 		if (do_rapl & RAPL_CORES_ENERGY_STATUS)
+ 			outp += sprintf(outp, "\tCorWatt");
++>>>>>>> 9148494c59f5 (tools/power/turbostat: split core MSR support into status + limit)
  		if (do_rapl & RAPL_GFX)
 -			outp += sprintf(outp, "\tGFXWatt");
 +			outp += sprintf(outp, " GFXWatt");
  		if (do_rapl & RAPL_DRAM)
 -			outp += sprintf(outp, "\tRAMWatt");
 +			outp += sprintf(outp, " RAMWatt");
  		if (do_rapl & RAPL_PKG_PERF_STATUS)
 -			outp += sprintf(outp, "\tPKG_%%");
 +			outp += sprintf(outp, "   PKG_%%");
  		if (do_rapl & RAPL_DRAM_PERF_STATUS)
 -			outp += sprintf(outp, "\tRAM_%%");
 +			outp += sprintf(outp, "   RAM_%%");
  	} else if (do_rapl && rapl_joules) {
  		if (do_rapl & RAPL_PKG)
++<<<<<<< HEAD
 +			outp += sprintf(outp, "   Pkg_J");
 +		if (do_rapl & RAPL_CORES)
 +			outp += sprintf(outp, "   Cor_J");
++=======
+ 			outp += sprintf(outp, "\tPkg_J");
+ 		if (do_rapl & RAPL_CORES_ENERGY_STATUS)
+ 			outp += sprintf(outp, "\tCor_J");
++>>>>>>> 9148494c59f5 (tools/power/turbostat: split core MSR support into status + limit)
  		if (do_rapl & RAPL_GFX)
 -			outp += sprintf(outp, "\tGFX_J");
 +			outp += sprintf(outp, "   GFX_J");
  		if (do_rapl & RAPL_DRAM)
 -			outp += sprintf(outp, "\tRAM_J");
 +			outp += sprintf(outp, "   RAM_J");
  		if (do_rapl & RAPL_PKG_PERF_STATUS)
 -			outp += sprintf(outp, "\tPKG_%%");
 +			outp += sprintf(outp, "   PKG_%%");
  		if (do_rapl & RAPL_DRAM_PERF_STATUS)
 -			outp += sprintf(outp, "\tRAM_%%");
 +			outp += sprintf(outp, "   RAM_%%");
 +		outp += sprintf(outp, "   time");
 +
  	}
 -    done:
  	outp += sprintf(outp, "\n");
  }
  
@@@ -2213,9 -2653,14 +2228,9 @@@ void rapl_probe(unsigned int family, un
  	case 0x57:	/* KNL */
  		do_rapl = RAPL_PKG | RAPL_DRAM | RAPL_DRAM_POWER_INFO | RAPL_DRAM_PERF_STATUS | RAPL_PKG_PERF_STATUS | RAPL_PKG_POWER_INFO;
  		break;
 -	case 0x2D:
 -	case 0x3E:
 -		do_rapl = RAPL_PKG | RAPL_CORES | RAPL_CORE_POLICY | RAPL_DRAM | RAPL_DRAM_POWER_INFO | RAPL_PKG_PERF_STATUS | RAPL_DRAM_PERF_STATUS | RAPL_PKG_POWER_INFO;
 -		break;
  	case 0x37:	/* BYT */
  	case 0x4D:	/* AVN */
- 		do_rapl = RAPL_PKG | RAPL_CORES ;
+ 		do_rapl = RAPL_PKG | RAPL_CORES;
  		break;
  	default:
  		return;
@@@ -2427,15 -2872,14 +2442,14 @@@ int print_rapl(struct thread_data *t, s
  			if (get_msr(cpu, MSR_PP0_POLICY, &msr))
  				return -7;
  
 -			fprintf(outf, "cpu%d: MSR_PP0_POLICY: %lld\n", cpu, msr & 0xF);
 +			fprintf(stderr, "cpu%d: MSR_PP0_POLICY: %lld\n", cpu, msr & 0xF);
  		}
  	}
- 	if (do_rapl & RAPL_CORES) {
+ 	if (do_rapl & RAPL_CORES_POWER_LIMIT) {
  		if (debug) {
- 
  			if (get_msr(cpu, MSR_PP0_POWER_LIMIT, &msr))
  				return -9;
 -			fprintf(outf, "cpu%d: MSR_PP0_POWER_LIMIT: 0x%08llx (%slocked)\n",
 +			fprintf(stderr, "cpu%d: MSR_PP0_POWER_LIMIT: 0x%08llx (%slocked)\n",
  					cpu, msr, (msr >> 31) & 1 ? "": "UN");
  			print_power_limit_msr(cpu, msr, "Cores Limit");
  		}
* Unmerged path tools/power/x86/turbostat/turbostat.c
