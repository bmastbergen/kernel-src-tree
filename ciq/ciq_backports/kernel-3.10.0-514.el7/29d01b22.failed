locks: new helpers - flock_lock_inode_wait and posix_lock_inode_wait

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jeff Layton <jeff.layton@primarydata.com>
commit 29d01b22eaa18d8b46091d3c98c6001c49f78e4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/29d01b22.failed

Allow callers to pass in an inode instead of a filp.

	Signed-off-by: Jeff Layton <jeff.layton@primarydata.com>
	Reviewed-by: "J. Bruce Fields" <bfields@fieldses.org>
	Tested-by: "J. Bruce Fields" <bfields@fieldses.org>
(cherry picked from commit 29d01b22eaa18d8b46091d3c98c6001c49f78e4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/locks.c
diff --cc fs/locks.c
index 4da168d46db3,ba268a503c1b..000000000000
--- a/fs/locks.c
+++ b/fs/locks.c
@@@ -1796,7 -1875,7 +1810,11 @@@ int flock_lock_inode_wait(struct inode 
  	int error;
  	might_sleep();
  	for (;;) {
++<<<<<<< HEAD
 +		error = flock_lock_file(filp, fl);
++=======
+ 		error = flock_lock_inode(inode, fl);
++>>>>>>> 29d01b22eaa1 (locks: new helpers - flock_lock_inode_wait and posix_lock_inode_wait)
  		if (error != FILE_LOCK_DEFERRED)
  			break;
  		error = wait_event_interruptible(fl->fl_wait, !fl->fl_next);
* Unmerged path fs/locks.c
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 37d4ac39152e..fb5bd79eae33 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1096,11 +1096,13 @@ extern void locks_remove_flock(struct file *);
 extern void locks_release_private(struct file_lock *);
 extern void posix_test_lock(struct file *, struct file_lock *);
 extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
+extern int posix_lock_inode_wait(struct inode *, struct file_lock *);
 extern int posix_lock_file_wait(struct file *, struct file_lock *);
 extern int posix_unblock_lock(struct file_lock *);
 extern int vfs_test_lock(struct file *, struct file_lock *);
 extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
 extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
+extern int flock_lock_inode_wait(struct inode *inode, struct file_lock *fl);
 extern int flock_lock_file_wait(struct file *filp, struct file_lock *fl);
 extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
 extern void lease_get_mtime(struct inode *, struct timespec *time);
@@ -1182,6 +1184,12 @@ static inline int posix_lock_file(struct file *filp, struct file_lock *fl,
 	return -ENOLCK;
 }
 
+static inline int posix_lock_inode_wait(struct inode *inode,
+					struct file_lock *fl)
+{
+	return -ENOLCK;
+}
+
 static inline int posix_lock_file_wait(struct file *filp, struct file_lock *fl)
 {
 	return -ENOLCK;
@@ -1208,6 +1216,12 @@ static inline int vfs_cancel_lock(struct file *filp, struct file_lock *fl)
 	return 0;
 }
 
+static inline int flock_lock_inode_wait(struct inode *inode,
+					struct file_lock *request)
+{
+	return -ENOLCK;
+}
+
 static inline int flock_lock_file_wait(struct file *filp,
 				       struct file_lock *request)
 {
