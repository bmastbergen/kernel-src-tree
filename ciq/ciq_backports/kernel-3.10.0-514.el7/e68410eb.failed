crypto: x86/sha512_ssse3 - move SHA-384/512 SSSE3 implementation to base layer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [crypto] x86/sha512_ssse3 - move SHA-384/512 SSSE3 implementation to base layer (Herbert Xu) [1267049]
Rebuild_FUZZ: 94.59%
commit-author Ard Biesheuvel <ard.biesheuvel@linaro.org>
commit e68410ebf62676dfb93aafff7c55b76644f37072
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e68410eb.failed

This removes all the boilerplate from the existing implementation,
and replaces it with calls into the base layer.  It also changes the
prototypes of the core asm functions to be compatible with the base
prototype

  void (sha512_block_fn)(struct sha256_state *sst, u8 const *src, int blocks)

so that they can be passed to the base layer directly.

	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit e68410ebf62676dfb93aafff7c55b76644f37072)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/crypto/sha512_ssse3_glue.c
diff --cc arch/x86/crypto/sha512_ssse3_glue.c
index d1ee9f638d1c,d9fa4c1e063f..000000000000
--- a/arch/x86/crypto/sha512_ssse3_glue.c
+++ b/arch/x86/crypto/sha512_ssse3_glue.c
@@@ -132,77 -93,16 +93,81 @@@ static int sha512_ssse3_finup(struct sh
  /* Add padding and return the message digest. */
  static int sha512_ssse3_final(struct shash_desc *desc, u8 *out)
  {
++<<<<<<< HEAD
 +	struct sha512_state *sctx = shash_desc_ctx(desc);
 +	unsigned int i, index, padlen;
 +	__be64 *dst = (__be64 *)out;
 +	__be64 bits[2];
 +	static const u8 padding[SHA512_BLOCK_SIZE] = { 0x80, };
 +
 +	/* save number of bits */
 +	bits[1] = cpu_to_be64(sctx->count[0] << 3);
 +	bits[0] = cpu_to_be64(sctx->count[1] << 3 | sctx->count[0] >> 61);
 +
 +	/* Pad out to 112 mod 128 and append length */
 +	index = sctx->count[0] & 0x7f;
 +	padlen = (index < 112) ? (112 - index) : ((128+112) - index);
 +
 +	if (!irq_fpu_usable()) {
 +		crypto_sha512_update(desc, padding, padlen);
 +		crypto_sha512_update(desc, (const u8 *)&bits, sizeof(bits));
 +	} else {
 +		kernel_fpu_begin();
 +		/* We need to fill a whole block for __sha512_ssse3_update() */
 +		if (padlen <= 112) {
 +			sctx->count[0] += padlen;
 +			if (sctx->count[0] < padlen)
 +				sctx->count[1]++;
 +			memcpy(sctx->buf + index, padding, padlen);
 +		} else {
 +			__sha512_ssse3_update(desc, padding, padlen, index);
 +		}
 +		__sha512_ssse3_update(desc, (const u8 *)&bits,
 +					sizeof(bits), 112);
 +		kernel_fpu_end();
 +	}
 +
 +	/* Store state in digest */
 +	for (i = 0; i < 8; i++)
 +		dst[i] = cpu_to_be64(sctx->state[i]);
 +
 +	/* Wipe context */
 +	memset(sctx, 0, sizeof(*sctx));
 +
 +	return 0;
 +}
 +
 +static int sha512_ssse3_export(struct shash_desc *desc, void *out)
 +{
 +	struct sha512_state *sctx = shash_desc_ctx(desc);
 +
 +	memcpy(out, sctx, sizeof(*sctx));
 +
 +	return 0;
 +}
 +
 +static int sha512_ssse3_import(struct shash_desc *desc, const void *in)
 +{
 +	struct sha512_state *sctx = shash_desc_ctx(desc);
 +
 +	memcpy(sctx, in, sizeof(*sctx));
 +
 +	return 0;
 +}
 +
 +static struct shash_alg alg = {
++=======
+ 	return sha512_ssse3_finup(desc, NULL, 0, out);
+ }
+ 
+ static struct shash_alg algs[] = { {
++>>>>>>> e68410ebf626 (crypto: x86/sha512_ssse3 - move SHA-384/512 SSSE3 implementation to base layer)
  	.digestsize	=	SHA512_DIGEST_SIZE,
- 	.init		=	sha512_ssse3_init,
+ 	.init		=	sha512_base_init,
  	.update		=	sha512_ssse3_update,
  	.final		=	sha512_ssse3_final,
- 	.export		=	sha512_ssse3_export,
- 	.import		=	sha512_ssse3_import,
+ 	.finup		=	sha512_ssse3_finup,
  	.descsize	=	sizeof(struct sha512_state),
- 	.statesize	=	sizeof(struct sha512_state),
  	.base		=	{
  		.cra_name	=	"sha512",
  		.cra_driver_name =	"sha512-ssse3",
@@@ -211,7 -111,22 +176,26 @@@
  		.cra_blocksize	=	SHA512_BLOCK_SIZE,
  		.cra_module	=	THIS_MODULE,
  	}
++<<<<<<< HEAD
 +};
++=======
+ },  {
+ 	.digestsize	=	SHA384_DIGEST_SIZE,
+ 	.init		=	sha384_base_init,
+ 	.update		=	sha512_ssse3_update,
+ 	.final		=	sha512_ssse3_final,
+ 	.finup		=	sha512_ssse3_finup,
+ 	.descsize	=	sizeof(struct sha512_state),
+ 	.base		=	{
+ 		.cra_name	=	"sha384",
+ 		.cra_driver_name =	"sha384-ssse3",
+ 		.cra_priority	=	150,
+ 		.cra_flags	=	CRYPTO_ALG_TYPE_SHASH,
+ 		.cra_blocksize	=	SHA384_BLOCK_SIZE,
+ 		.cra_module	=	THIS_MODULE,
+ 	}
+ } };
++>>>>>>> e68410ebf626 (crypto: x86/sha512_ssse3 - move SHA-384/512 SSSE3 implementation to base layer)
  
  #ifdef CONFIG_AS_AVX
  static bool __init avx_usable(void)
diff --git a/arch/x86/crypto/sha512-avx-asm.S b/arch/x86/crypto/sha512-avx-asm.S
index 974dde9bc6cd..565274d6a641 100644
--- a/arch/x86/crypto/sha512-avx-asm.S
+++ b/arch/x86/crypto/sha512-avx-asm.S
@@ -54,9 +54,9 @@
 
 # Virtual Registers
 # ARG1
-msg	= %rdi
+digest	= %rdi
 # ARG2
-digest	= %rsi
+msg	= %rsi
 # ARG3
 msglen	= %rdx
 T1	= %rcx
@@ -271,7 +271,7 @@ frame_size = frame_GPRSAVE + GPRSAVE_SIZE
 .endm
 
 ########################################################################
-# void sha512_transform_avx(const void* M, void* D, u64 L)
+# void sha512_transform_avx(void* D, const void* M, u64 L)
 # Purpose: Updates the SHA512 digest stored at D with the message stored in M.
 # The size of the message pointed to by M must be an integer multiple of SHA512
 # message blocks.
diff --git a/arch/x86/crypto/sha512-avx2-asm.S b/arch/x86/crypto/sha512-avx2-asm.S
index 568b96105f5c..a4771dcd1fcf 100644
--- a/arch/x86/crypto/sha512-avx2-asm.S
+++ b/arch/x86/crypto/sha512-avx2-asm.S
@@ -70,9 +70,9 @@ XFER  = YTMP0
 BYTE_FLIP_MASK  = %ymm9
 
 # 1st arg
-INP         = %rdi
+CTX         = %rdi
 # 2nd arg
-CTX         = %rsi
+INP         = %rsi
 # 3rd arg
 NUM_BLKS    = %rdx
 
@@ -562,7 +562,7 @@ frame_size = frame_GPRSAVE + GPRSAVE_SIZE
 .endm
 
 ########################################################################
-# void sha512_transform_rorx(const void* M, void* D, uint64_t L)#
+# void sha512_transform_rorx(void* D, const void* M, uint64_t L)#
 # Purpose: Updates the SHA512 digest stored at D with the message stored in M.
 # The size of the message pointed to by M must be an integer multiple of SHA512
 #   message blocks.
diff --git a/arch/x86/crypto/sha512-ssse3-asm.S b/arch/x86/crypto/sha512-ssse3-asm.S
index fb56855d51f5..e610e29cbc81 100644
--- a/arch/x86/crypto/sha512-ssse3-asm.S
+++ b/arch/x86/crypto/sha512-ssse3-asm.S
@@ -53,9 +53,9 @@
 
 # Virtual Registers
 # ARG1
-msg =		%rdi
+digest =	%rdi
 # ARG2
-digest =	%rsi
+msg =		%rsi
 # ARG3
 msglen =	%rdx
 T1 =		%rcx
@@ -269,7 +269,7 @@ frame_size = frame_GPRSAVE + GPRSAVE_SIZE
 .endm
 
 ########################################################################
-# void sha512_transform_ssse3(const void* M, void* D, u64 L)#
+# void sha512_transform_ssse3(void* D, const void* M, u64 L)#
 # Purpose: Updates the SHA512 digest stored at D with the message stored in M.
 # The size of the message pointed to by M must be an integer multiple of SHA512
 #   message blocks.
* Unmerged path arch/x86/crypto/sha512_ssse3_glue.c
