netfilter: nf_tables: fix nf_log_trace based tracing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Florian Westphal <fw@strlen.de>
commit 9fb0b519c7e094e741a3fc3fd4d854a8bc74b6dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/9fb0b519.failed

nf_log_trace() outputs bogus 'TRACE:' strings because I forgot to update
the comments array.

Fixes: 33d5a7b14bfd0 ("netfilter: nf_tables: extend tracing infrastructure")
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 9fb0b519c7e094e741a3fc3fd4d854a8bc74b6dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_tables_core.c
diff --cc net/netfilter/nf_tables_core.c
index ff886b43c625,e9f8dffcc244..000000000000
--- a/net/netfilter/nf_tables_core.c
+++ b/net/netfilter/nf_tables_core.c
@@@ -43,24 -39,36 +37,30 @@@ static struct nf_loginfo trace_loginfo 
  	},
  };
  
++<<<<<<< HEAD
 +static void __nft_trace_packet(const struct nft_pktinfo *pkt,
 +			       const struct nft_chain *chain,
 +			       int rulenum, enum nft_trace type)
++=======
+ static noinline void __nft_trace_packet(struct nft_traceinfo *info,
+ 					const struct nft_chain *chain,
+ 					int rulenum, enum nft_trace_types type)
++>>>>>>> 9fb0b519c7e0 (netfilter: nf_tables: fix nf_log_trace based tracing)
  {
 -	const struct nft_pktinfo *pkt = info->pkt;
 +	struct net *net = dev_net(pkt->in ? pkt->in : pkt->out);
  
 -	if (!info->trace || !pkt->skb->nf_trace)
 -		return;
 -
 -	info->chain = chain;
 -	info->type = type;
 -
 -	nft_trace_notify(info);
 -
 -	nf_log_trace(pkt->net, pkt->pf, pkt->hook, pkt->skb, pkt->in,
 -		     pkt->out, &trace_loginfo, "TRACE: %s:%s:%s:%u ",
 -		     chain->table->name, chain->name, comments[type],
 -		     rulenum);
 +	nf_log_packet(net, pkt->xt.family, pkt->ops->hooknum, pkt->skb, pkt->in,
 +		      pkt->out, &trace_loginfo, "TRACE: %s:%s:%s:%u ",
 +		      chain->table->name, chain->name, comments[type],
 +		      rulenum);
  }
  
 -static inline void nft_trace_packet(struct nft_traceinfo *info,
 +static inline void nft_trace_packet(const struct nft_pktinfo *pkt,
  				    const struct nft_chain *chain,
 -				    const struct nft_rule *rule,
 -				    int rulenum,
 -				    enum nft_trace_types type)
 +				    int rulenum, enum nft_trace type)
  {
 -	if (static_branch_unlikely(&nft_trace_enabled)) {
 -		info->rule = rule;
 -		__nft_trace_packet(info, chain, rulenum, type);
 -	}
 +	if (unlikely(pkt->skb->nf_trace))
 +		__nft_trace_packet(pkt, chain, rulenum, type);
  }
  
  static void nft_cmp_fast_eval(const struct nft_expr *expr,
* Unmerged path net/netfilter/nf_tables_core.c
