objtool: Add CONFIG_STACK_VALIDATION option

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [scripts] revert "objtool: Add CONFIG_STACK_VALIDATION option" (Josh Poimboeuf) [1347232]
Rebuild_FUZZ: 90.53%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit b9ab5ebb14ec389bd80f66613f1fe3f8f65f2521
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b9ab5ebb.failed

Add a CONFIG_STACK_VALIDATION option which will run "objtool check" for
each .o file to ensure the validity of its stack metadata.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Chris J Arges <chris.j.arges@canonical.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: live-patching@vger.kernel.org
Link: http://lkml.kernel.org/r/92baab69a6bf9bc7043af0bfca9fb964a1d45546.1456719558.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b9ab5ebb14ec389bd80f66613f1fe3f8f65f2521)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/Kconfig
#	lib/Kconfig.debug
diff --cc arch/Kconfig
index 96ad1995a47a,81869a5e7e17..000000000000
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@@ -454,6 -486,109 +454,112 @@@ config HAVE_UNDERSCORE_SYMBOL_PREFI
  	  Some architectures generate an _ in front of C symbols; things like
  	  module loading and assembly files need to know about this.
  
++<<<<<<< HEAD
++=======
+ config HAVE_IRQ_EXIT_ON_IRQ_STACK
+ 	bool
+ 	help
+ 	  Architecture doesn't only execute the irq handler on the irq stack
+ 	  but also irq_exit(). This way we can process softirqs on this irq
+ 	  stack instead of switching to a new one when we call __do_softirq()
+ 	  in the end of an hardirq.
+ 	  This spares a stack switch and improves cache usage on softirq
+ 	  processing.
+ 
+ config PGTABLE_LEVELS
+ 	int
+ 	default 2
+ 
+ config ARCH_HAS_ELF_RANDOMIZE
+ 	bool
+ 	help
+ 	  An architecture supports choosing randomized locations for
+ 	  stack, mmap, brk, and ET_DYN. Defined functions:
+ 	  - arch_mmap_rnd()
+ 	  - arch_randomize_brk()
+ 
+ config HAVE_ARCH_MMAP_RND_BITS
+ 	bool
+ 	help
+ 	  An arch should select this symbol if it supports setting a variable
+ 	  number of bits for use in establishing the base address for mmap
+ 	  allocations, has MMU enabled and provides values for both:
+ 	  - ARCH_MMAP_RND_BITS_MIN
+ 	  - ARCH_MMAP_RND_BITS_MAX
+ 
+ config ARCH_MMAP_RND_BITS_MIN
+ 	int
+ 
+ config ARCH_MMAP_RND_BITS_MAX
+ 	int
+ 
+ config ARCH_MMAP_RND_BITS_DEFAULT
+ 	int
+ 
+ config ARCH_MMAP_RND_BITS
+ 	int "Number of bits to use for ASLR of mmap base address" if EXPERT
+ 	range ARCH_MMAP_RND_BITS_MIN ARCH_MMAP_RND_BITS_MAX
+ 	default ARCH_MMAP_RND_BITS_DEFAULT if ARCH_MMAP_RND_BITS_DEFAULT
+ 	default ARCH_MMAP_RND_BITS_MIN
+ 	depends on HAVE_ARCH_MMAP_RND_BITS
+ 	help
+ 	  This value can be used to select the number of bits to use to
+ 	  determine the random offset to the base address of vma regions
+ 	  resulting from mmap allocations. This value will be bounded
+ 	  by the architecture's minimum and maximum supported values.
+ 
+ 	  This value can be changed after boot using the
+ 	  /proc/sys/vm/mmap_rnd_bits tunable
+ 
+ config HAVE_ARCH_MMAP_RND_COMPAT_BITS
+ 	bool
+ 	help
+ 	  An arch should select this symbol if it supports running applications
+ 	  in compatibility mode, supports setting a variable number of bits for
+ 	  use in establishing the base address for mmap allocations, has MMU
+ 	  enabled and provides values for both:
+ 	  - ARCH_MMAP_RND_COMPAT_BITS_MIN
+ 	  - ARCH_MMAP_RND_COMPAT_BITS_MAX
+ 
+ config ARCH_MMAP_RND_COMPAT_BITS_MIN
+ 	int
+ 
+ config ARCH_MMAP_RND_COMPAT_BITS_MAX
+ 	int
+ 
+ config ARCH_MMAP_RND_COMPAT_BITS_DEFAULT
+ 	int
+ 
+ config ARCH_MMAP_RND_COMPAT_BITS
+ 	int "Number of bits to use for ASLR of mmap base address for compatible applications" if EXPERT
+ 	range ARCH_MMAP_RND_COMPAT_BITS_MIN ARCH_MMAP_RND_COMPAT_BITS_MAX
+ 	default ARCH_MMAP_RND_COMPAT_BITS_DEFAULT if ARCH_MMAP_RND_COMPAT_BITS_DEFAULT
+ 	default ARCH_MMAP_RND_COMPAT_BITS_MIN
+ 	depends on HAVE_ARCH_MMAP_RND_COMPAT_BITS
+ 	help
+ 	  This value can be used to select the number of bits to use to
+ 	  determine the random offset to the base address of vma regions
+ 	  resulting from mmap allocations for compatible applications This
+ 	  value will be bounded by the architecture's minimum and maximum
+ 	  supported values.
+ 
+ 	  This value can be changed after boot using the
+ 	  /proc/sys/vm/mmap_rnd_compat_bits tunable
+ 
+ config HAVE_COPY_THREAD_TLS
+ 	bool
+ 	help
+ 	  Architecture provides copy_thread_tls to accept tls argument via
+ 	  normal C parameter passing, rather than extracting the syscall
+ 	  argument from pt_regs.
+ 
+ config HAVE_STACK_VALIDATION
+ 	bool
+ 	help
+ 	  Architecture supports the 'objtool check' host tool command, which
+ 	  performs compile-time stack metadata validation.
+ 
++>>>>>>> b9ab5ebb14ec (objtool: Add CONFIG_STACK_VALIDATION option)
  #
  # ABI hall of shame
  #
diff --cc lib/Kconfig.debug
index b42d9b05227b,855265621863..000000000000
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@@ -156,6 -312,88 +156,91 @@@ config DEBUG_SECTION_MISMATC
  	  - Enable verbose reporting from modpost in order to help resolve
  	    the section mismatches that are reported.
  
++<<<<<<< HEAD
++=======
+ config SECTION_MISMATCH_WARN_ONLY
+ 	bool "Make section mismatch errors non-fatal"
+ 	default y
+ 	help
+ 	  If you say N here, the build process will fail if there are any
+ 	  section mismatch, instead of just throwing warnings.
+ 
+ 	  If unsure, say Y.
+ 
+ #
+ # Select this config option from the architecture Kconfig, if it
+ # is preferred to always offer frame pointers as a config
+ # option on the architecture (regardless of KERNEL_DEBUG):
+ #
+ config ARCH_WANT_FRAME_POINTERS
+ 	bool
+ 	help
+ 
+ config FRAME_POINTER
+ 	bool "Compile the kernel with frame pointers"
+ 	depends on DEBUG_KERNEL && \
+ 		(CRIS || M68K || FRV || UML || \
+ 		 AVR32 || SUPERH || BLACKFIN || MN10300 || METAG) || \
+ 		ARCH_WANT_FRAME_POINTERS
+ 	default y if (DEBUG_INFO && UML) || ARCH_WANT_FRAME_POINTERS
+ 	help
+ 	  If you say Y here the resulting kernel image will be slightly
+ 	  larger and slower, but it gives very useful debugging information
+ 	  in case of kernel bugs. (precise oopses/stacktraces/warnings)
+ 
+ config STACK_VALIDATION
+ 	bool "Compile-time stack metadata validation"
+ 	depends on HAVE_STACK_VALIDATION
+ 	default n
+ 	help
+ 	  Add compile-time checks to validate stack metadata, including frame
+ 	  pointers (if CONFIG_FRAME_POINTER is enabled).  This helps ensure
+ 	  that runtime stack traces are more reliable.
+ 
+ 	  For more information, see
+ 	  tools/objtool/Documentation/stack-validation.txt.
+ 
+ config DEBUG_FORCE_WEAK_PER_CPU
+ 	bool "Force weak per-cpu definitions"
+ 	depends on DEBUG_KERNEL
+ 	help
+ 	  s390 and alpha require percpu variables in modules to be
+ 	  defined weak to work around addressing range issue which
+ 	  puts the following two restrictions on percpu variable
+ 	  definitions.
+ 
+ 	  1. percpu symbols must be unique whether static or not
+ 	  2. percpu variables can't be defined inside a function
+ 
+ 	  To ensure that generic code follows the above rules, this
+ 	  option forces all percpu variables to be defined as weak.
+ 
+ endmenu # "Compiler options"
+ 
+ config MAGIC_SYSRQ
+ 	bool "Magic SysRq key"
+ 	depends on !UML
+ 	help
+ 	  If you say Y here, you will have some control over the system even
+ 	  if the system crashes for example during kernel debugging (e.g., you
+ 	  will be able to flush the buffer cache to disk, reboot the system
+ 	  immediately or dump some status information). This is accomplished
+ 	  by pressing various keys while holding SysRq (Alt+PrintScreen). It
+ 	  also works on a serial console (on PC hardware at least), if you
+ 	  send a BREAK and then within 5 seconds a command keypress. The
+ 	  keys are documented in <file:Documentation/sysrq.txt>. Don't say Y
+ 	  unless you really know what this hack does.
+ 
+ config MAGIC_SYSRQ_DEFAULT_ENABLE
+ 	hex "Enable magic SysRq key functions by default"
+ 	depends on MAGIC_SYSRQ
+ 	default 0x1
+ 	help
+ 	  Specifies which SysRq key functions are enabled by default.
+ 	  This may be set to 1 or 0 to enable or disable them all, or
+ 	  to a bitmask as described in Documentation/sysrq.txt.
+ 
++>>>>>>> b9ab5ebb14ec (objtool: Add CONFIG_STACK_VALIDATION option)
  config DEBUG_KERNEL
  	bool "Kernel debugging"
  	help
diff --git a/Makefile b/Makefile
index 9bf0ea111cf7..b36f1d213765 100644
--- a/Makefile
+++ b/Makefile
@@ -884,7 +884,10 @@ prepare0: archprepare FORCE
 	$(Q)$(MAKE) $(build)=.
 
 # All the preparing..
-prepare: prepare0
+prepare: prepare0 prepare-objtool
+
+PHONY += prepare-objtool
+prepare-objtool: $(if $(CONFIG_STACK_VALIDATION), tools/objtool FORCE)
 
 # Generate some files
 # ---------------------------------------------------------------------------
* Unmerged path arch/Kconfig
* Unmerged path lib/Kconfig.debug
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index d5d859c80729..113faaf81851 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -291,10 +291,32 @@ cmd_record_mcount = 						\
 	fi;
 endif
 
+ifdef CONFIG_STACK_VALIDATION
+
+__objtool_obj := $(objtree)/tools/objtool/objtool
+
+objtool_args = check
+ifndef CONFIG_FRAME_POINTER
+objtool_args += --no-fp
+endif
+
+# 'OBJECT_FILES_NON_STANDARD := y': skip objtool checking for a directory
+# 'OBJECT_FILES_NON_STANDARD_foo.o := 'y': skip objtool checking for a file
+# 'OBJECT_FILES_NON_STANDARD_foo.o := 'n': override directory skip for a file
+cmd_objtool = $(if $(patsubst y%,, \
+	$(OBJECT_FILES_NON_STANDARD_$(basetarget).o)$(OBJECT_FILES_NON_STANDARD)n), \
+	$(__objtool_obj) $(objtool_args) "$(@)";)
+objtool_obj = $(if $(patsubst y%,, \
+	$(OBJECT_FILES_NON_STANDARD_$(basetarget).o)$(OBJECT_FILES_NON_STANDARD)n), \
+	$(__objtool_obj))
+
+endif # CONFIG_STACK_VALIDATION
+
 define rule_cc_o_c
 	$(call echo-cmd,checksrc) $(cmd_checksrc)			  \
 	$(call echo-cmd,cc_o_c) $(cmd_cc_o_c);				  \
 	$(cmd_modversions)						  \
+	$(cmd_objtool)						  \
 	$(call echo-cmd,record_mcount)					  \
 	$(cmd_record_mcount)						  \
 	scripts/basic/fixdep $(depfile) $@ '$(call make-cmd,cc_o_c)' >    \
@@ -303,14 +325,23 @@ define rule_cc_o_c
 	mv -f $(dot-target).tmp $(dot-target).cmd
 endef
 
+define rule_as_o_S
+	$(call echo-cmd,as_o_S) $(cmd_as_o_S);				  \
+	$(cmd_objtool)						  \
+	scripts/basic/fixdep $(depfile) $@ '$(call make-cmd,as_o_S)' >    \
+	                                              $(dot-target).tmp;  \
+	rm -f $(depfile);						  \
+	mv -f $(dot-target).tmp $(dot-target).cmd
+endef
+
 # Built-in and composite module parts
-$(obj)/%.o: $(src)/%.c $(recordmcount_source) FORCE
+$(obj)/%.o: $(src)/%.c $(recordmcount_source) $(objtool_obj) FORCE
 	$(call cmd,force_checksrc)
 	$(call if_changed_rule,cc_o_c)
 
 # Single-part modules are special since we need to mark them in $(MODVERDIR)
 
-$(single-used-m): $(obj)/%.o: $(src)/%.c $(recordmcount_source) FORCE
+$(single-used-m): $(obj)/%.o: $(src)/%.c $(recordmcount_source) $(objtool_obj) FORCE
 	$(call cmd,force_checksrc)
 	$(call if_changed_rule,cc_o_c)
 	@{ echo $(@:.o=.ko); echo $@; } > $(MODVERDIR)/$(@F:.o=.mod)
@@ -340,8 +371,8 @@ $(obj)/%.s: $(src)/%.S FORCE
 quiet_cmd_as_o_S = AS $(quiet_modtag)  $@
 cmd_as_o_S       = $(CC) $(a_flags) -c -o $@ $<
 
-$(obj)/%.o: $(src)/%.S FORCE
-	$(call if_changed_dep,as_o_S)
+$(obj)/%.o: $(src)/%.S $(objtool_obj) FORCE
+	$(call if_changed_rule,as_o_S)
 
 targets += $(real-objs-y) $(real-objs-m) $(lib-y)
 targets += $(extra-y) $(MAKECMDGOALS) $(always)
