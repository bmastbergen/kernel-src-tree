ext4: move unlocked dio protection from ext4_alloc_file_blocks()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jan Kara <jack@suse.com>
commit 17048e8a083fec7ad841d88ef0812707fbc7e39f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/17048e8a.failed

Currently ext4_alloc_file_blocks() was handling protection against
unlocked DIO. However we now need to sometimes call it under i_mmap_sem
and sometimes not and DIO protection ranks above it (although strictly
speaking this cannot currently create any deadlocks). Also
ext4_zero_range() was actually getting & releasing unlocked DIO
protection twice in some cases. Luckily it didn't introduce any real bug
but it was a land mine waiting to be stepped on.  So move DIO protection
out from ext4_alloc_file_blocks() into the two callsites.

	Signed-off-by: Jan Kara <jack@suse.com>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 17048e8a083fec7ad841d88ef0812707fbc7e39f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/extents.c
diff --cc fs/ext4/extents.c
index d936da6a075b,65b5ada2833f..000000000000
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@@ -4834,16 -4842,18 +4832,28 @@@ static long ext4_zero_range(struct fil
  		flags |= (EXT4_GET_BLOCKS_CONVERT_UNWRITTEN |
  			  EXT4_EX_NOCACHE);
  
++<<<<<<< HEAD
 +		/* Now release the pages and zero block aligned part of pages*/
 +		truncate_pagecache_range(inode, start, end - 1);
 +		inode->i_mtime = inode->i_ctime = ext4_current_time(inode);
 +
 +		/* Wait all existing dio workers, newcomers will block on i_mutex */
 +		ext4_inode_block_unlocked_dio(inode);
 +		inode_dio_wait(inode);
 +
++=======
+ 		/*
+ 		 * Prevent page faults from reinstantiating pages we have
+ 		 * released from page cache.
+ 		 */
+ 		down_write(&EXT4_I(inode)->i_mmap_sem);
+ 		/* Now release the pages and zero block aligned part of pages */
+ 		truncate_pagecache_range(inode, start, end - 1);
+ 		inode->i_mtime = inode->i_ctime = ext4_current_time(inode);
+ 
++>>>>>>> 17048e8a083f (ext4: move unlocked dio protection from ext4_alloc_file_blocks())
  		ret = ext4_alloc_file_blocks(file, lblk, max_blocks, new_size,
  					     flags, mode);
 -		up_write(&EXT4_I(inode)->i_mmap_sem);
  		if (ret)
  			goto out_dio;
  	}
* Unmerged path fs/ext4/extents.c
