mm: fix anon_vma->degree underflow in anon_vma endless growing prevention

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mm] fix anon_vma->degree underflow in anon_vma endless growing prevention (Jerome Marchand) [1341497]
Rebuild_FUZZ: 97.18%
commit-author Leon Yu <chianglungyu@gmail.com>
commit 3fe89b3e2a7bbf3e97657104b9b33a9d81b950b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3fe89b3e.failed

I have constantly stumbled upon "kernel BUG at mm/rmap.c:399!" after
upgrading to 3.19 and had no luck with 4.0-rc1 neither.

So, after looking into new logic introduced by commit 7a3ef208e662 ("mm:
prevent endless growth of anon_vma hierarchy"), I found chances are that
unlink_anon_vmas() is called without incrementing dst->anon_vma->degree
in anon_vma_clone() due to allocation failure.  If dst->anon_vma is not
NULL in error path, its degree will be incorrectly decremented in
unlink_anon_vmas() and eventually underflow when exiting as a result of
another call to unlink_anon_vmas().  That's how "kernel BUG at
mm/rmap.c:399!" is triggered for me.

This patch fixes the underflow by dropping dst->anon_vma when allocation
fails.  It's safe to do so regardless of original value of dst->anon_vma
because dst->anon_vma doesn't have valid meaning if anon_vma_clone()
fails.  Besides, callers don't care dst->anon_vma in such case neither.

Also suggested by Michal Hocko, we can clean up vma_adjust() a bit as
anon_vma_clone() now does the work.

[akpm@linux-foundation.org: tweak comment]
Fixes: 7a3ef208e662 ("mm: prevent endless growth of anon_vma hierarchy")
	Signed-off-by: Leon Yu <chianglungyu@gmail.com>
	Signed-off-by: Konstantin Khlebnikov <koct9i@gmail.com>
	Reviewed-by: Michal Hocko <mhocko@suse.cz>
	Acked-by: Rik van Riel <riel@redhat.com>
	Acked-by: David Rientjes <rientjes@google.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 3fe89b3e2a7bbf3e97657104b9b33a9d81b950b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/mmap.c
diff --cc mm/mmap.c
index dc2927ad5660,9ec50a368634..000000000000
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@@ -744,9 -770,12 +744,15 @@@ again:			remove_next = 1 + (end > next-
  		 * shrinking vma had, to cover any anon pages imported.
  		 */
  		if (exporter && exporter->anon_vma && !importer->anon_vma) {
 -			int error;
 -
 +			if (anon_vma_clone(importer, exporter))
 +				return -ENOMEM;
  			importer->anon_vma = exporter->anon_vma;
++<<<<<<< HEAD
++=======
+ 			error = anon_vma_clone(importer, exporter);
+ 			if (error)
+ 				return error;
++>>>>>>> 3fe89b3e2a7b (mm: fix anon_vma->degree underflow in anon_vma endless growing prevention)
  		}
  	}
  
* Unmerged path mm/mmap.c
diff --git a/mm/rmap.c b/mm/rmap.c
index 07c67e0cb866..deb34b039e93 100644
--- a/mm/rmap.c
+++ b/mm/rmap.c
@@ -286,6 +286,13 @@ int anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)
 	return 0;
 
  enomem_failure:
+	/*
+	 * dst->anon_vma is dropped here otherwise its degree can be incorrectly
+	 * decremented in unlink_anon_vmas().
+	 * We can safely do this because callers of anon_vma_clone() don't care
+	 * about dst->anon_vma if anon_vma_clone() failed.
+	 */
+	dst->anon_vma = NULL;
 	unlink_anon_vmas(dst);
 	return -ENOMEM;
 }
