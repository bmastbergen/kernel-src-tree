dax: fix lifetime of in-kernel dax mappings with dax_map_atomic()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dan Williams <dan.j.williams@intel.com>
commit b2e0d1625e193b40cbbd45b799f82d54d34e015c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b2e0d162.failed

The DAX implementation needs to protect new calls to ->direct_access()
and usage of its return value against the driver for the underlying
block device being disabled.  Use blk_queue_enter()/blk_queue_exit() to
hold off blk_cleanup_queue() from proceeding, or otherwise fail new
mapping requests if the request_queue is being torn down.

This also introduces blk_dax_ctl to simplify the interface from fs/dax.c
through dax_map_atomic() to bdev_direct_access().

[willy@linux.intel.com: fix read() of a hole]
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
	Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
	Cc: Jan Kara <jack@suse.com>
	Cc: Jens Axboe <axboe@fb.com>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Cc: Matthew Wilcox <willy@linux.intel.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b2e0d1625e193b40cbbd45b799f82d54d34e015c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
#	fs/dax.c
#	include/linux/blkdev.h
diff --cc fs/block_dev.c
index 2557803cf68e,530145b607c4..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -461,10 -466,10 +458,15 @@@ EXPORT_SYMBOL_GPL(bdev_write_page)
   * Return: negative errno if an error occurs, otherwise the number of bytes
   * accessible at this address.
   */
++<<<<<<< HEAD
 +long bdev_direct_access(struct block_device *bdev, sector_t sector,
 +			void **addr, unsigned long *pfn, long size)
++=======
+ long bdev_direct_access(struct block_device *bdev, struct blk_dax_ctl *dax)
++>>>>>>> b2e0d1625e19 (dax: fix lifetime of in-kernel dax mappings with dax_map_atomic())
  {
- 	long avail;
+ 	sector_t sector = dax->sector;
+ 	long avail, size = dax->size;
  	const struct block_device_operations *ops = bdev->bd_disk->fops;
  
  	/*
@@@ -483,9 -488,11 +485,13 @@@
  	sector += get_start_sect(bdev);
  	if (sector % (PAGE_SIZE / 512))
  		return -EINVAL;
++<<<<<<< HEAD
 +	avail = ops->direct_access(bdev, sector, addr, pfn, size);
++=======
+ 	avail = ops->direct_access(bdev, sector, &dax->addr, &dax->pfn);
++>>>>>>> b2e0d1625e19 (dax: fix lifetime of in-kernel dax mappings with dax_map_atomic())
  	if (!avail)
  		return -ERANGE;
 -	if (avail > 0 && avail & ~PAGE_MASK)
 -		return -ENXIO;
  	return min(avail, size);
  }
  EXPORT_SYMBOL_GPL(bdev_direct_access);
diff --cc include/linux/blkdev.h
index 0e72d45d3caf,88821fa26f19..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -1676,9 -1657,11 +1690,13 @@@ extern int __blkdev_driver_ioctl(struc
  extern int bdev_read_page(struct block_device *, sector_t, struct page *);
  extern int bdev_write_page(struct block_device *, sector_t, struct page *,
  						struct writeback_control *);
++<<<<<<< HEAD
 +extern long bdev_direct_access(struct block_device *, sector_t, void **addr,
 +						unsigned long *pfn, long size);
++=======
+ extern long bdev_direct_access(struct block_device *, struct blk_dax_ctl *);
++>>>>>>> b2e0d1625e19 (dax: fix lifetime of in-kernel dax mappings with dax_map_atomic())
  #else /* CONFIG_BLOCK */
 -
 -struct block_device;
 -
  /*
   * stubs for when the block layer is configured out
   */
* Unmerged path fs/dax.c
* Unmerged path fs/block_dev.c
* Unmerged path fs/dax.c
* Unmerged path include/linux/blkdev.h
