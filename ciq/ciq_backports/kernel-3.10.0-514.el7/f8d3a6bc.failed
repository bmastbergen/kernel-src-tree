netfilter: nft_limit: factor out shared code with per-byte limiting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit f8d3a6bc76011bb86d2515ebd0b3b300641f2f8c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f8d3a6bc.failed

This patch prepares the introduction of per-byte limiting.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit f8d3a6bc76011bb86d2515ebd0b3b300641f2f8c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nft_limit.c
diff --cc net/netfilter/nft_limit.c
index 5301b69b3692,c4d1b1b75b8f..000000000000
--- a/net/netfilter/nft_limit.c
+++ b/net/netfilter/nft_limit.c
@@@ -27,43 -27,32 +27,43 @@@ struct nft_limit 
  	u64		nsecs;
  };
  
++<<<<<<< HEAD
 +static void nft_limit_eval(const struct nft_expr *expr,
 +			   struct nft_data data[NFT_REG_MAX + 1],
 +			   const struct nft_pktinfo *pkt)
++=======
+ static inline bool nft_limit_eval(struct nft_limit *limit, u64 cost)
++>>>>>>> f8d3a6bc7601 (netfilter: nft_limit: factor out shared code with per-byte limiting)
  {
- 	struct nft_limit *priv = nft_expr_priv(expr);
- 	u64 now, tokens, cost = div_u64(priv->nsecs, priv->rate);
+ 	u64 now, tokens;
  	s64 delta;
  
  	spin_lock_bh(&limit_lock);
  	now = ktime_get_ns();
- 	tokens = priv->tokens + now - priv->last;
- 	if (tokens > priv->tokens_max)
- 		tokens = priv->tokens_max;
+ 	tokens = limit->tokens + now - limit->last;
+ 	if (tokens > limit->tokens_max)
+ 		tokens = limit->tokens_max;
  
- 	priv->last = now;
+ 	limit->last = now;
  	delta = tokens - cost;
  	if (delta >= 0) {
- 		priv->tokens = delta;
+ 		limit->tokens = delta;
  		spin_unlock_bh(&limit_lock);
- 		return;
+ 		return false;
  	}
- 	priv->tokens = tokens;
+ 	limit->tokens = tokens;
  	spin_unlock_bh(&limit_lock);
++<<<<<<< HEAD
 +
 +	data[NFT_REG_VERDICT].verdict = NFT_BREAK;
++=======
+ 	return true;
++>>>>>>> f8d3a6bc7601 (netfilter: nft_limit: factor out shared code with per-byte limiting)
  }
  
- static const struct nla_policy nft_limit_policy[NFTA_LIMIT_MAX + 1] = {
- 	[NFTA_LIMIT_RATE]	= { .type = NLA_U64 },
- 	[NFTA_LIMIT_UNIT]	= { .type = NLA_U64 },
- };
- 
- static int nft_limit_init(const struct nft_ctx *ctx,
- 			  const struct nft_expr *expr,
+ static int nft_limit_init(struct nft_limit *limit,
  			  const struct nlattr * const tb[])
  {
- 	struct nft_limit *priv = nft_expr_priv(expr);
  	u64 unit;
  
  	if (tb[NFTA_LIMIT_RATE] == NULL ||
@@@ -94,13 -83,44 +94,50 @@@ nla_put_failure
  	return -1;
  }
  
+ static void nft_limit_pkts_eval(const struct nft_expr *expr,
+ 				struct nft_regs *regs,
+ 				const struct nft_pktinfo *pkt)
+ {
+ 	struct nft_limit *priv = nft_expr_priv(expr);
+ 
+ 	if (nft_limit_eval(priv, div_u64(priv->nsecs, priv->rate)))
+ 		regs->verdict.code = NFT_BREAK;
+ }
+ 
+ static const struct nla_policy nft_limit_policy[NFTA_LIMIT_MAX + 1] = {
+ 	[NFTA_LIMIT_RATE]	= { .type = NLA_U64 },
+ 	[NFTA_LIMIT_UNIT]	= { .type = NLA_U64 },
+ };
+ 
+ static int nft_limit_pkts_init(const struct nft_ctx *ctx,
+ 			       const struct nft_expr *expr,
+ 			       const struct nlattr * const tb[])
+ {
+ 	struct nft_limit *priv = nft_expr_priv(expr);
+ 
+ 	return nft_limit_init(priv, tb);
+ }
+ 
+ static int nft_limit_pkts_dump(struct sk_buff *skb, const struct nft_expr *expr)
+ {
+ 	const struct nft_limit *priv = nft_expr_priv(expr);
+ 
+ 	return nft_limit_dump(skb, priv);
+ }
+ 
  static struct nft_expr_type nft_limit_type;
 -static const struct nft_expr_ops nft_limit_pkts_ops = {
 +static const struct nft_expr_ops nft_limit_ops = {
  	.type		= &nft_limit_type,
  	.size		= NFT_EXPR_SIZE(sizeof(struct nft_limit)),
++<<<<<<< HEAD
 +	.eval		= nft_limit_eval,
 +	.init		= nft_limit_init,
 +	.dump		= nft_limit_dump,
++=======
+ 	.eval		= nft_limit_pkts_eval,
+ 	.init		= nft_limit_pkts_init,
+ 	.dump		= nft_limit_pkts_dump,
++>>>>>>> f8d3a6bc7601 (netfilter: nft_limit: factor out shared code with per-byte limiting)
  };
  
  static struct nft_expr_type nft_limit_type __read_mostly = {
* Unmerged path net/netfilter/nft_limit.c
