drivers:usb:fsl: Fix compilation error for fsl ehci drv

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] fsl: Fix compilation error for fsl ehci drv (Torez Smith) [1303955]
Rebuild_FUZZ: 87.76%
commit-author Ramneek Mehresh <ramneek.mehresh@freescale.com>
commit 74db22cb3a16dcd782a31236eb139f5865804ae6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/74db22cb.failed

Fix compilation error in fsl ehci drv because ehci_reset()
and ehci_adjust_port_wakeup_flags() were not exported, and
are used when PM is enabled

	Signed-off-by: Ramneek Mehresh <ramneek.mehresh@freescale.com>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 74db22cb3a16dcd782a31236eb139f5865804ae6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/ehci.h
diff --cc drivers/usb/host/ehci.h
index 03cb384c961c,f700157cd084..000000000000
--- a/drivers/usb/host/ehci.h
+++ b/drivers/usb/host/ehci.h
@@@ -870,7 -872,12 +871,13 @@@ extern int	ehci_reset(struct ehci_hcd *
  
  #ifdef CONFIG_PM
  extern int	ehci_suspend(struct usb_hcd *hcd, bool do_wakeup);
++<<<<<<< HEAD
 +extern int	ehci_resume(struct usb_hcd *hcd, bool hibernated);
++=======
+ extern int	ehci_resume(struct usb_hcd *hcd, bool force_reset);
+ extern void	ehci_adjust_port_wakeup_flags(struct ehci_hcd *ehci,
+ 			bool suspending, bool do_wakeup);
++>>>>>>> 74db22cb3a16 (drivers:usb:fsl: Fix compilation error for fsl ehci drv)
  #endif	/* CONFIG_PM */
  
 -extern int	ehci_hub_control(struct usb_hcd	*hcd, u16 typeReq, u16 wValue,
 -				 u16 wIndex, char *buf, u16 wLength);
 -
  #endif /* __LINUX_EHCI_HCD_H */
diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index e18f0a4a08c4..870b5b3501a3 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -239,7 +239,7 @@ static void tdi_reset (struct ehci_hcd *ehci)
  * Reset a non-running (STS_HALT == 1) controller.
  * Must be called with interrupts enabled and the lock not held.
  */
-static int ehci_reset (struct ehci_hcd *ehci)
+int ehci_reset(struct ehci_hcd *ehci)
 {
 	int	retval;
 	u32	command = ehci_readl(ehci, &ehci->regs->command);
@@ -275,6 +275,7 @@ static int ehci_reset (struct ehci_hcd *ehci)
 			ehci->resuming_ports = 0;
 	return retval;
 }
+EXPORT_SYMBOL_GPL(ehci_reset);
 
 /*
  * Idle the controller (turn off the schedules).
diff --git a/drivers/usb/host/ehci-hub.c b/drivers/usb/host/ehci-hub.c
index 9290f686ce10..b34cf95058ef 100644
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@ -164,7 +164,7 @@ static int ehci_port_change(struct ehci_hcd *ehci)
 	return 0;
 }
 
-static void ehci_adjust_port_wakeup_flags(struct ehci_hcd *ehci,
+void ehci_adjust_port_wakeup_flags(struct ehci_hcd *ehci,
 		bool suspending, bool do_wakeup)
 {
 	int		port;
@@ -229,6 +229,7 @@ static void ehci_adjust_port_wakeup_flags(struct ehci_hcd *ehci,
 
 	spin_unlock_irq(&ehci->lock);
 }
+EXPORT_SYMBOL_GPL(ehci_adjust_port_wakeup_flags);
 
 static int ehci_bus_suspend (struct usb_hcd *hcd)
 {
* Unmerged path drivers/usb/host/ehci.h
