staging/rdma/hfi1: Allow a fair scheduling of QPs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [infiniband] rdma/hfi1: Allow a fair scheduling of QPs (Alex Estrin) [1272062 1273170]
Rebuild_FUZZ: 91.11%
commit-author Vennila Megavannan <vennila.megavannan@intel.com>
commit 23cd4716b7e2792f1fdc31b83feb9e9a9812c25f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/23cd4716.failed

This patch fixes the fairness issues in QP scheduling
- the timeout for cond_resched is changed to a ratio of
qp->timeout_jiffies
- workqueue_congested is used to determine if qp needs to
reschedule itself

	Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
	Signed-off-by: Vennila Megavannan <vennila.megavannan@intel.com>
	Signed-off-by: Jubin John <jubin.john@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 23cd4716b7e2792f1fdc31b83feb9e9a9812c25f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/ruc.c
diff --cc drivers/staging/hfi1/ruc.c
index c4280b6f47d4,f09badbfa51c..000000000000
--- a/drivers/staging/hfi1/ruc.c
+++ b/drivers/staging/hfi1/ruc.c
@@@ -809,14 -819,15 +809,21 @@@ void hfi1_make_ruc_header(struct hfi1_q
   * exhausted.  Only allow one CPU to send a packet per QP (tasklet).
   * Otherwise, two threads could send packets out of order.
   */
 -void hfi1_do_send(struct rvt_qp *qp)
 +void hfi1_do_send(struct work_struct *work)
  {
 +	struct iowait *wait = container_of(work, struct iowait, iowork);
 +	struct hfi1_qp *qp = iowait_to_qp(wait);
  	struct hfi1_pkt_state ps;
++<<<<<<< HEAD:drivers/staging/hfi1/ruc.c
 +	int (*make_req)(struct hfi1_qp *qp);
++=======
+ 	struct hfi1_qp_priv *priv = qp->priv;
+ 	int (*make_req)(struct rvt_qp *qp);
++>>>>>>> 23cd4716b7e2 (staging/rdma/hfi1: Allow a fair scheduling of QPs):drivers/staging/rdma/hfi1/ruc.c
  	unsigned long flags;
  	unsigned long timeout;
+ 	unsigned long timeout_int;
+ 	int cpu;
  
  	ps.dev = to_idev(qp->ibqp.device);
  	ps.ibp = to_iport(qp->ibqp.device, qp->port_num);
@@@ -866,9 -889,18 +885,23 @@@
  
  		/* allow other tasks to run */
  		if (unlikely(time_after(jiffies, timeout))) {
+ 			if (workqueue_congested(cpu, ps.ppd->hfi1_wq)) {
+ 				spin_lock_irqsave(&qp->s_lock, flags);
+ 				qp->s_flags &= ~RVT_S_BUSY;
+ 				hfi1_schedule_send(qp);
+ 				spin_unlock_irqrestore(&qp->s_lock,
+ 						       flags);
+ 				this_cpu_inc(*ps.ppd->dd->send_schedule);
+ 				return;
+ 			}
  			cond_resched();
++<<<<<<< HEAD:drivers/staging/hfi1/ruc.c
 +			ps.ppd->dd->verbs_dev.n_send_schedule++;
 +			timeout = jiffies + SEND_RESCHED_TIMEOUT;
++=======
+ 			this_cpu_inc(*ps.ppd->dd->send_schedule);
+ 			timeout = jiffies + (timeout_int) / 8;
++>>>>>>> 23cd4716b7e2 (staging/rdma/hfi1: Allow a fair scheduling of QPs):drivers/staging/rdma/hfi1/ruc.c
  		}
  	} while (make_req(qp));
  }
* Unmerged path drivers/staging/hfi1/ruc.c
