staging/rdma/hfi1: Remove query_device function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [infiniband] rdma/hfi1: Remove query_device function (Alex Estrin) [1272062 1273170]
Rebuild_FUZZ: 90.70%
commit-author Harish Chegondi <harish.chegondi@intel.com>
commit 94d5171cf2d10174e0ee9c3df463607cb0f4dd53
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/94d5171c.failed

Removed hfi1 query_device function to use rdmavt rvt_query_device function
The rvt dev info device attributes still need to be filled in by the driver

	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Harish Chegondi <harish.chegondi@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 94d5171cf2d10174e0ee9c3df463607cb0f4dd53)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/verbs.c
diff --cc drivers/staging/hfi1/verbs.c
index d228eb7fc4f0,70af487c990f..000000000000
--- a/drivers/staging/hfi1/verbs.c
+++ b/drivers/staging/hfi1/verbs.c
@@@ -1362,55 -1362,49 +1362,90 @@@ int hfi1_verbs_send(struct hfi1_qp *qp
  	return ret;
  }
  
- static int query_device(struct ib_device *ibdev,
- 			struct ib_device_attr *props,
- 			struct ib_udata *uhw)
+ /**
+  * hfi1_fill_device_attr - Fill in rvt dev info device attributes.
+  * @dd: the device data structure
+  */
+ static void hfi1_fill_device_attr(struct hfi1_devdata *dd)
  {
- 	struct hfi1_devdata *dd = dd_from_ibdev(ibdev);
- 	struct hfi1_ibdev *dev = to_idev(ibdev);
+ 	struct rvt_dev_info *rdi = &dd->verbs_dev.rdi;
  
- 	if (uhw->inlen || uhw->outlen)
- 		return -EINVAL;
- 	memset(props, 0, sizeof(*props));
+ 	memset(&rdi->dparms.props, 0, sizeof(rdi->dparms.props));
  
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	props->device_cap_flags = IB_DEVICE_BAD_PKEY_CNTR |
 +		IB_DEVICE_BAD_QKEY_CNTR | IB_DEVICE_SHUTDOWN_PORT |
 +		IB_DEVICE_SYS_IMAGE_GUID | IB_DEVICE_RC_RNR_NAK_GEN |
 +		IB_DEVICE_PORT_ACTIVE_EVENT | IB_DEVICE_SRQ_RESIZE;
 +
 +	props->page_size_cap = PAGE_SIZE;
 +	props->vendor_id =
 +		dd->oui1 << 16 | dd->oui2 << 8 | dd->oui3;
 +	props->vendor_part_id = dd->pcidev->device;
 +	props->hw_ver = dd->minrev;
 +	props->sys_image_guid = ib_hfi1_sys_image_guid;
 +	props->max_mr_size = ~0ULL;
 +	props->max_qp = hfi1_max_qps;
 +	props->max_qp_wr = hfi1_max_qp_wrs;
 +	props->max_sge = hfi1_max_sges;
 +	props->max_sge_rd = hfi1_max_sges;
 +	props->max_cq = hfi1_max_cqs;
 +	props->max_ah = hfi1_max_ahs;
 +	props->max_cqe = hfi1_max_cqes;
 +	props->max_mr = dev->lk_table.max;
 +	props->max_fmr = dev->lk_table.max;
 +	props->max_map_per_fmr = 32767;
 +	props->max_pd = dev->rdi.dparms.props.max_pd;
 +	props->max_qp_rd_atom = HFI1_MAX_RDMA_ATOMIC;
 +	props->max_qp_init_rd_atom = 255;
 +	/* props->max_res_rd_atom */
 +	props->max_srq = hfi1_max_srqs;
 +	props->max_srq_wr = hfi1_max_srq_wrs;
 +	props->max_srq_sge = hfi1_max_srq_sges;
 +	/* props->local_ca_ack_delay */
 +	props->atomic_cap = IB_ATOMIC_GLOB;
 +	props->max_pkeys = hfi1_get_npkeys(dd);
 +	props->max_mcast_grp = hfi1_max_mcast_grps;
 +	props->max_mcast_qp_attach = hfi1_max_mcast_qp_attached;
 +	props->max_total_mcast_qp_attach = props->max_mcast_qp_attach *
 +		props->max_mcast_grp;
 +
 +	return 0;
++=======
+ 	rdi->dparms.props.device_cap_flags = IB_DEVICE_BAD_PKEY_CNTR |
+ 			IB_DEVICE_BAD_QKEY_CNTR | IB_DEVICE_SHUTDOWN_PORT |
+ 			IB_DEVICE_SYS_IMAGE_GUID | IB_DEVICE_RC_RNR_NAK_GEN |
+ 			IB_DEVICE_PORT_ACTIVE_EVENT | IB_DEVICE_SRQ_RESIZE;
+ 	rdi->dparms.props.page_size_cap = PAGE_SIZE;
+ 	rdi->dparms.props.vendor_id = dd->oui1 << 16 | dd->oui2 << 8 | dd->oui3;
+ 	rdi->dparms.props.vendor_part_id = dd->pcidev->device;
+ 	rdi->dparms.props.hw_ver = dd->minrev;
+ 	rdi->dparms.props.sys_image_guid = ib_hfi1_sys_image_guid;
+ 	rdi->dparms.props.max_mr_size = ~0ULL;
+ 	rdi->dparms.props.max_qp = hfi1_max_qps;
+ 	rdi->dparms.props.max_qp_wr = hfi1_max_qp_wrs;
+ 	rdi->dparms.props.max_sge = hfi1_max_sges;
+ 	rdi->dparms.props.max_sge_rd = hfi1_max_sges;
+ 	rdi->dparms.props.max_cq = hfi1_max_cqs;
+ 	rdi->dparms.props.max_ah = hfi1_max_ahs;
+ 	rdi->dparms.props.max_cqe = hfi1_max_cqes;
+ 	rdi->dparms.props.max_mr = rdi->lkey_table.max;
+ 	rdi->dparms.props.max_fmr = rdi->lkey_table.max;
+ 	rdi->dparms.props.max_map_per_fmr = 32767;
+ 	rdi->dparms.props.max_pd = hfi1_max_pds;
+ 	rdi->dparms.props.max_qp_rd_atom = HFI1_MAX_RDMA_ATOMIC;
+ 	rdi->dparms.props.max_qp_init_rd_atom = 255;
+ 	rdi->dparms.props.max_srq = hfi1_max_srqs;
+ 	rdi->dparms.props.max_srq_wr = hfi1_max_srq_wrs;
+ 	rdi->dparms.props.max_srq_sge = hfi1_max_srq_sges;
+ 	rdi->dparms.props.atomic_cap = IB_ATOMIC_GLOB;
+ 	rdi->dparms.props.max_pkeys = hfi1_get_npkeys(dd);
+ 	rdi->dparms.props.max_mcast_grp = hfi1_max_mcast_grps;
+ 	rdi->dparms.props.max_mcast_qp_attach = hfi1_max_mcast_qp_attached;
+ 	rdi->dparms.props.max_total_mcast_qp_attach =
+ 					rdi->dparms.props.max_mcast_qp_attach *
+ 					rdi->dparms.props.max_mcast_grp;
++>>>>>>> 94d5171cf2d1 (staging/rdma/hfi1: Remove query_device function):drivers/staging/rdma/hfi1/verbs.c
  }
  
  static inline u16 opa_speed_to_ib(u16 in)
@@@ -2000,7 -1840,46 +2035,50 @@@ int hfi1_register_ib_device(struct hfi1
  	strncpy(ibdev->node_desc, init_utsname()->nodename,
  		sizeof(ibdev->node_desc));
  
++<<<<<<< HEAD:drivers/staging/hfi1/verbs.c
 +	ret = ib_register_device(ibdev, hfi1_create_port_files);
++=======
+ 	/*
+ 	 * Fill in rvt info object.
+ 	 */
+ 	dd->verbs_dev.rdi.driver_f.port_callback = hfi1_create_port_files;
+ 	dd->verbs_dev.rdi.driver_f.get_card_name = get_card_name;
+ 	dd->verbs_dev.rdi.driver_f.get_pci_dev = get_pci_dev;
+ 	dd->verbs_dev.rdi.driver_f.check_ah = hfi1_check_ah;
+ 	dd->verbs_dev.rdi.driver_f.notify_new_ah = hfi1_notify_new_ah;
+ 	/*
+ 	 * Fill in rvt info device attributes.
+ 	 */
+ 	hfi1_fill_device_attr(dd);
+ 
+ 	/* queue pair */
+ 	dd->verbs_dev.rdi.dparms.qp_table_size = hfi1_qp_table_size;
+ 	dd->verbs_dev.rdi.dparms.qpn_start = 0;
+ 	dd->verbs_dev.rdi.dparms.qpn_inc = 1;
+ 	dd->verbs_dev.rdi.dparms.qos_shift = dd->qos_shift;
+ 	dd->verbs_dev.rdi.dparms.qpn_res_start = kdeth_qp << 16;
+ 	dd->verbs_dev.rdi.dparms.qpn_res_end =
+ 		dd->verbs_dev.rdi.dparms.qpn_res_start + 65535;
+ 	dd->verbs_dev.rdi.driver_f.qp_priv_alloc = qp_priv_alloc;
+ 	dd->verbs_dev.rdi.driver_f.qp_priv_free = qp_priv_free;
+ 	dd->verbs_dev.rdi.driver_f.free_all_qps = free_all_qps;
+ 	dd->verbs_dev.rdi.driver_f.notify_qp_reset = notify_qp_reset;
+ 
+ 	/* misc settings */
+ 	dd->verbs_dev.rdi.flags = RVT_FLAG_CQ_INIT_DRIVER;
+ 	dd->verbs_dev.rdi.dparms.lkey_table_size = hfi1_lkey_table_size;
+ 	dd->verbs_dev.rdi.dparms.nports = dd->num_pports;
+ 	dd->verbs_dev.rdi.dparms.npkeys = hfi1_get_npkeys(dd);
+ 
+ 	ppd = dd->pport;
+ 	for (i = 0; i < dd->num_pports; i++, ppd++)
+ 		rvt_init_port(&dd->verbs_dev.rdi,
+ 			      &ppd->ibport_data.rvp,
+ 			      i,
+ 			      ppd->pkeys);
+ 
+ 	ret = rvt_register_device(&dd->verbs_dev.rdi);
++>>>>>>> 94d5171cf2d1 (staging/rdma/hfi1: Remove query_device function):drivers/staging/rdma/hfi1/verbs.c
  	if (ret)
  		goto err_reg;
  
* Unmerged path drivers/staging/hfi1/verbs.c
