ipmi: Don't flush messages in sender() in run-to-completion mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
commit 82802f968bd3118af04eaeb3814c21d9813be527
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/82802f96.failed

When flushing queued messages in run-to-completion mode,
smi_event_handler() is recursively called.

flush_messages()
 smi_event_handler()
  handle_transaction_done()
   deliver_recv_msg()
    ipmi_smi_msg_received()
     smi_recv_tasklet()
      sender()
       flush_messages()
        smi_event_handler()
         ...

The depth of the recursive call depends on the number of queued
messages, so it can cause a stack overflow if many messages have
been queued.

To solve this problem, this patch removes flush_messages()
from sender()@ipmi_si_intf.c.  Instead, add flush_messages() to
caller side of sender() if needed.  Additionally, to implement this,
add new handler flush_messages to struct ipmi_smi_handlers.

	Signed-off-by: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>

Fixed up a comment and some spacing issues.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
(cherry picked from commit 82802f968bd3118af04eaeb3814c21d9813be527)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ipmi_smi.h
diff --cc include/linux/ipmi_smi.h
index 24b9643f267d,f8cea14485dd..000000000000
--- a/include/linux/ipmi_smi.h
+++ b/include/linux/ipmi_smi.h
@@@ -109,6 -108,18 +109,21 @@@ struct ipmi_smi_handlers 
  	   events from the BMC we are attached to. */
  	void (*request_events)(void *send_info);
  
++<<<<<<< HEAD
++=======
+ 	/* Called by the upper layer when some user requires that the
+ 	   interface watch for events, received messages, watchdog
+ 	   pretimeouts, or not.  Used by the SMI to know if it should
+ 	   watch for these.  This may be NULL if the SMI does not
+ 	   implement it. */
+ 	void (*set_need_watch)(void *send_info, bool enable);
+ 
+ 	/*
+ 	 * Called when flushing all pending messages.
+ 	 */
+ 	void (*flush_messages)(void *send_info);
+ 
++>>>>>>> 82802f968bd3 (ipmi: Don't flush messages in sender() in run-to-completion mode)
  	/* Called when the interface should go into "run to
  	   completion" mode.  If this call sets the value to true, the
  	   interface should make sure that all messages are flushed
diff --git a/drivers/char/ipmi/ipmi_msghandler.c b/drivers/char/ipmi/ipmi_msghandler.c
index 1beb48e00322..0300543a8d37 100644
--- a/drivers/char/ipmi/ipmi_msghandler.c
+++ b/drivers/char/ipmi/ipmi_msghandler.c
@@ -4312,6 +4312,9 @@ static void ipmi_panic_request_and_wait(ipmi_smi_t           intf,
 			    0, 1); /* Don't retry, and don't wait. */
 	if (rv)
 		atomic_sub(2, &panic_done_count);
+	else if (intf->handlers->flush_messages)
+		intf->handlers->flush_messages(intf->send_info);
+
 	while (atomic_read(&panic_done_count) != 0)
 		ipmi_poll(intf);
 }
diff --git a/drivers/char/ipmi/ipmi_si_intf.c b/drivers/char/ipmi/ipmi_si_intf.c
index fec2a8ccf78a..261aef66aed9 100644
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@ -921,8 +921,9 @@ static void check_start_timer_thread(struct smi_info *smi_info)
 	}
 }
 
-static void flush_messages(struct smi_info *smi_info)
+static void flush_messages(void *send_info)
 {
+	struct smi_info *smi_info = send_info;
 	enum si_sm_result result;
 
 	/*
@@ -947,12 +948,10 @@ static void sender(void                *send_info,
 
 	if (smi_info->run_to_completion) {
 		/*
-		 * If we are running to completion, start it and run
-		 * transactions until everything is clear.
+		 * If we are running to completion, start it.  Upper
+		 * layer will call flush_messages to clear it out.
 		 */
 		smi_info->waiting_msg = msg;
-
-		flush_messages(smi_info);
 		return;
 	}
 
@@ -1257,6 +1256,7 @@ static struct ipmi_smi_handlers handlers = {
 	.request_events		= request_events,
 	.set_maintenance_mode   = set_maintenance_mode,
 	.set_run_to_completion  = set_run_to_completion,
+	.flush_messages		= flush_messages,
 	.poll			= poll,
 };
 
* Unmerged path include/linux/ipmi_smi.h
