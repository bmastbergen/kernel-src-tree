perf report: Display newly added events in raw dump

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 2d2aea6ae736503d3896c4997b494760ed8febc1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2d2aea6a.failed

The 'perf report -D' command will now display detailed output for these
newly added events:

  event_update
  thread_map
  cpu_map
  stat
  stat_config
  stat_round

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Kan Liang <kan.liang@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1445784728-21732-27-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 2d2aea6ae736503d3896c4997b494760ed8febc1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/session.c
diff --cc tools/perf/util/session.c
index 5c19125e63db,a90c74b67e43..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -205,6 -206,18 +206,21 @@@ static int process_event_synth_attr_stu
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int process_event_synth_event_update_stub(struct perf_tool *tool __maybe_unused,
+ 						 union perf_event *event __maybe_unused,
+ 						 struct perf_evlist **pevlist
+ 						 __maybe_unused)
+ {
+ 	if (dump_trace)
+ 		perf_event__fprintf_event_update(event, stdout);
+ 
+ 	dump_printf(": unhandled!\n");
+ 	return 0;
+ }
+ 
++>>>>>>> 2d2aea6ae736 (perf report: Display newly added events in raw dump)
  static int process_event_sample_stub(struct perf_tool *tool __maybe_unused,
  				     union perf_event *event __maybe_unused,
  				     struct perf_sample *sample __maybe_unused,
@@@ -296,6 -309,67 +312,70 @@@ int process_event_auxtrace_error_stub(s
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ 
+ static
+ int process_event_thread_map_stub(struct perf_tool *tool __maybe_unused,
+ 				  union perf_event *event __maybe_unused,
+ 				  struct perf_session *session __maybe_unused)
+ {
+ 	if (dump_trace)
+ 		perf_event__fprintf_thread_map(event, stdout);
+ 
+ 	dump_printf(": unhandled!\n");
+ 	return 0;
+ }
+ 
+ static
+ int process_event_cpu_map_stub(struct perf_tool *tool __maybe_unused,
+ 			       union perf_event *event __maybe_unused,
+ 			       struct perf_session *session __maybe_unused)
+ {
+ 	if (dump_trace)
+ 		perf_event__fprintf_cpu_map(event, stdout);
+ 
+ 	dump_printf(": unhandled!\n");
+ 	return 0;
+ }
+ 
+ static
+ int process_event_stat_config_stub(struct perf_tool *tool __maybe_unused,
+ 				   union perf_event *event __maybe_unused,
+ 				   struct perf_session *session __maybe_unused)
+ {
+ 	if (dump_trace)
+ 		perf_event__fprintf_stat_config(event, stdout);
+ 
+ 	dump_printf(": unhandled!\n");
+ 	return 0;
+ }
+ 
+ static int process_stat_stub(struct perf_tool *tool __maybe_unused,
+ 			     union perf_event *event __maybe_unused,
+ 			     struct perf_session *perf_session
+ 			     __maybe_unused)
+ {
+ 	if (dump_trace)
+ 		perf_event__fprintf_stat(event, stdout);
+ 
+ 	dump_printf(": unhandled!\n");
+ 	return 0;
+ }
+ 
+ static int process_stat_round_stub(struct perf_tool *tool __maybe_unused,
+ 				   union perf_event *event __maybe_unused,
+ 				   struct perf_session *perf_session
+ 				   __maybe_unused)
+ {
+ 	if (dump_trace)
+ 		perf_event__fprintf_stat_round(event, stdout);
+ 
+ 	dump_printf(": unhandled!\n");
+ 	return 0;
+ }
+ 
++>>>>>>> 2d2aea6ae736 (perf report: Display newly added events in raw dump)
  void perf_tool__fill_defaults(struct perf_tool *tool)
  {
  	if (tool->sample == NULL)
* Unmerged path tools/perf/util/session.c
