hv_netvsc: Move subchannel waiting to rndis_filter_device_remove()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit d66ab51442211158b677c2f12310c314d9587f74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d66ab514.failed

During hot add, vmbus_device_register() is called from vmbus_onoffer(), on
the same workqueue as the subchannel offer message work-queue, so
subchannel offer won't be processed until the vmbus_device_register()/...
/netvsc_probe() is done.
Also, vmbus_device_register() is called with channel_mutex locked, which
prevents subchannel processing too. So the "waiting for sub-channel
processing" will not success in hot add case. But, in usual module loading,
the netvsc_probe() is called from different code path, and doesn't fail.

This patch resolves the deadlock during NIC hot-add, and speeds up NIC
loading time.

	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Reviewed-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d66ab51442211158b677c2f12310c314d9587f74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/rndis_filter.c
diff --cc drivers/net/hyperv/rndis_filter.c
index 4f78abd49222,47d07c576a34..000000000000
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@@ -1151,11 -1174,21 +1151,23 @@@ int rndis_filter_device_add(struct hv_d
  
  	ret = rndis_filter_set_rss_param(rndis_device, net_device->num_chn);
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Set the number of sub-channels to be received.
+ 	 */
+ 	spin_lock_irqsave(&net_device->sc_lock, flags);
+ 	sc_delta = num_rss_qs - (net_device->num_chn - 1);
+ 	net_device->num_sc_offered -= sc_delta;
+ 	spin_unlock_irqrestore(&net_device->sc_lock, flags);
+ 
++>>>>>>> d66ab5144221 (hv_netvsc: Move subchannel waiting to rndis_filter_device_remove())
  out:
  	if (ret) {
  		net_device->max_chn = 1;
  		net_device->num_chn = 1;
+ 		net_device->num_sc_offered = 0;
  	}
 -
  	return 0; /* return 0 because primary channel can be used alone */
  
  err_dev_remv:
* Unmerged path drivers/net/hyperv/rndis_filter.c
