HID: Use hid_parser for pre-scanning the report descriptors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [hid] Use hid_parser for pre-scanning the report descriptors (Benjamin Tissoires) [1311883]
Rebuild_FUZZ: 95.58%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 3dc8fc083dbfeede7b63a0c07581192e97711365
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3dc8fc08.failed

The Win 8 detection is sufficiently complex to warrant use of the full
parser code, in spite of the inferred memory usage. Therefore, we can use
the existing HID parser in hid-core for hid_scan_report() by re-using the
code from hid_open_report(). hid_parser_global, hid_parser_local and
hid_parser_reserved does not have any side effects. We just need to
reimplement the MAIN_ITEM callback to have a proper parsing without side
effects.

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Reviewed-by: Henrik Rydberg <rydberg@euromail.se>
	Tested-by: Srinivas Pandruvada<srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 3dc8fc083dbfeede7b63a0c07581192e97711365)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-core.c
diff --cc drivers/hid/hid-core.c
index 2e63a5156b67,ddd95f3e33c0..000000000000
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@@ -692,58 -730,34 +732,46 @@@ static int hid_scan_main(struct hid_par
   */
  static int hid_scan_report(struct hid_device *hid)
  {
- 	unsigned int page = 0, delim = 0;
+ 	struct hid_parser *parser;
+ 	struct hid_item item;
  	__u8 *start = hid->dev_rdesc;
  	__u8 *end = start + hid->dev_rsize;
- 	unsigned int u, u_min = 0, u_max = 0;
- 	struct hid_item item;
- 
+ 	static int (*dispatch_type[])(struct hid_parser *parser,
+ 				      struct hid_item *item) = {
+ 		hid_scan_main,
+ 		hid_parser_global,
+ 		hid_parser_local,
+ 		hid_parser_reserved
+ 	};
+ 
+ 	parser = vzalloc(sizeof(struct hid_parser));
+ 	if (!parser)
+ 		return -ENOMEM;
+ 
+ 	parser->device = hid;
  	hid->group = HID_GROUP_GENERIC;
- 	while ((start = fetch_item(start, end, &item)) != NULL) {
- 		if (item.format != HID_ITEM_FORMAT_SHORT)
- 			return -EINVAL;
- 		if (item.type == HID_ITEM_TYPE_GLOBAL) {
- 			if (item.tag == HID_GLOBAL_ITEM_TAG_USAGE_PAGE)
- 				page = item_udata(&item) << 16;
- 		} else if (item.type == HID_ITEM_TYPE_LOCAL) {
- 			if (delim > 1)
- 				break;
- 			u = item_udata(&item);
- 			if (item.size <= 2)
- 				u += page;
- 			switch (item.tag) {
- 			case HID_LOCAL_ITEM_TAG_DELIMITER:
- 				delim += !!u;
- 				break;
- 			case HID_LOCAL_ITEM_TAG_USAGE:
- 				hid_scan_usage(hid, u);
- 				break;
- 			case HID_LOCAL_ITEM_TAG_USAGE_MINIMUM:
- 				u_min = u;
- 				break;
- 			case HID_LOCAL_ITEM_TAG_USAGE_MAXIMUM:
- 				u_max = u;
- 				for (u = u_min; u <= u_max; u++)
- 					hid_scan_usage(hid, u);
- 				break;
- 			}
- 		} else if (page == HID_UP_SENSOR &&
- 			item.type == HID_ITEM_TYPE_MAIN &&
- 			item.tag == HID_MAIN_ITEM_TAG_BEGIN_COLLECTION &&
- 			(item_udata(&item) & 0xff) == HID_COLLECTION_PHYSICAL)
- 			hid->group = HID_GROUP_SENSOR_HUB;
- 	}
  
  	/*
++<<<<<<< HEAD
 +	* Vendor specific handlings
 +	*/
 +	if ((hid->vendor == USB_VENDOR_ID_SYNAPTICS) &&
 +	    (hid->group == HID_GROUP_GENERIC) &&
 +	    /* only bind to the mouse interface of composite USB devices */
 +	    (hid->bus != BUS_USB || hid->type == HID_TYPE_USBMOUSE))
 +		/* hid-rmi should take care of them, not hid-generic */
 +		hid->group = HID_GROUP_RMI;
 +
++=======
+ 	 * The parsing is simpler than the one in hid_open_report() as we should
+ 	 * be robust against hid errors. Those errors will be raised by
+ 	 * hid_open_report() anyway.
+ 	 */
+ 	while ((start = fetch_item(start, end, &item)) != NULL)
+ 		dispatch_type[item.type](parser, &item);
+ 
+ 	vfree(parser);
++>>>>>>> 3dc8fc083dbf (HID: Use hid_parser for pre-scanning the report descriptors)
  	return 0;
  }
  
* Unmerged path drivers/hid/hid-core.c
