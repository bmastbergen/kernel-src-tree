iommu: Remove domain_init and domain_free iommu_ops

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] Remove domain_init and domain_free iommu_ops (Myron Stowe) [1299039]
Rebuild_FUZZ: 92.63%
commit-author Joerg Roedel <jroedel@suse.de>
commit 89be34a1ced886880a3219f9d2ba2192dc738ef2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/89be34a1.failed

All drivers have been converted to the new domain_alloc and
domain_free iommu-ops. So remove the old ones and get rid of
iommu_domain->priv too, as this is no longer needed when the
struct iommu_domain is embedded in the private structures of
the iommu drivers.

	Tested-by: Thierry Reding <treding@nvidia.com>
	Tested-by: Heiko Stuebner <heiko@sntech.de>
	Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
	Acked-by: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 89be34a1ced886880a3219f9d2ba2192dc738ef2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/iommu.c
#	include/linux/iommu.h
diff --cc drivers/iommu/iommu.c
index 0c76c651782d,d4f527e56679..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -877,30 -905,14 +876,23 @@@ struct iommu_domain *iommu_domain_alloc
  	if (bus == NULL || bus->iommu_ops == NULL)
  		return NULL;
  
++<<<<<<< HEAD
 +	ops = bus->iommu_ops;
 +
 +	if (ops->domain_alloc)
 +		domain = ops->domain_alloc();
 +	else
 +		domain = kzalloc(sizeof(*domain), GFP_KERNEL);
 +
++=======
+ 	domain = bus->iommu_ops->domain_alloc(IOMMU_DOMAIN_UNMANAGED);
++>>>>>>> 89be34a1ced8 (iommu: Remove domain_init and domain_free iommu_ops)
  	if (!domain)
  		return NULL;
  
 -	domain->ops  = bus->iommu_ops;
 -	domain->type = IOMMU_DOMAIN_UNMANAGED;
 +	domain->ops = bus->iommu_ops;
  
- 	if (ops->domain_init && domain->ops->domain_init(domain))
- 		goto out_free;
- 
  	return domain;
- 
- out_free:
- 	if (ops->domain_free)
- 		ops->domain_free(domain);
- 	else
- 		kfree(domain);
- 
- 	return NULL;
  }
  EXPORT_SYMBOL_GPL(iommu_domain_alloc);
  
diff --cc include/linux/iommu.h
index 2ad74a596858,0546b8710ce3..000000000000
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@@ -50,9 -51,33 +50,14 @@@ struct iommu_domain_geometry 
  	bool force_aperture;       /* DMA only allowed in mappable range? */
  };
  
 -/* Domain feature flags */
 -#define __IOMMU_DOMAIN_PAGING	(1U << 0)  /* Support for iommu_map/unmap */
 -#define __IOMMU_DOMAIN_DMA_API	(1U << 1)  /* Domain for use in DMA-API
 -					      implementation              */
 -#define __IOMMU_DOMAIN_PT	(1U << 2)  /* Domain is identity mapped   */
 -
 -/*
 - * This are the possible domain-types
 - *
 - *	IOMMU_DOMAIN_BLOCKED	- All DMA is blocked, can be used to isolate
 - *				  devices
 - *	IOMMU_DOMAIN_IDENTITY	- DMA addresses are system physical addresses
 - *	IOMMU_DOMAIN_UNMANAGED	- DMA mappings managed by IOMMU-API user, used
 - *				  for VMs
 - *	IOMMU_DOMAIN_DMA	- Internally used for DMA-API implementations.
 - *				  This flag allows IOMMU drivers to implement
 - *				  certain optimizations for these domains
 - */
 -#define IOMMU_DOMAIN_BLOCKED	(0U)
 -#define IOMMU_DOMAIN_IDENTITY	(__IOMMU_DOMAIN_PT)
 -#define IOMMU_DOMAIN_UNMANAGED	(__IOMMU_DOMAIN_PAGING)
 -#define IOMMU_DOMAIN_DMA	(__IOMMU_DOMAIN_PAGING |	\
 -				 __IOMMU_DOMAIN_DMA_API)
 -
  struct iommu_domain {
++<<<<<<< HEAD
 +	struct iommu_ops *ops;
 +	void *priv;
++=======
+ 	unsigned type;
+ 	const struct iommu_ops *ops;
++>>>>>>> 89be34a1ced8 (iommu: Remove domain_init and domain_free iommu_ops)
  	iommu_fault_handler_t handler;
  	void *handler_token;
  	struct iommu_domain_geometry geometry;
@@@ -92,11 -136,10 +97,9 @@@ enum iommu_attr 
   */
  struct iommu_ops {
  	bool (*capable)(enum iommu_cap);
- 	int (*domain_init)(struct iommu_domain *domain);
- 	void (*domain_destroy)(struct iommu_domain *domain);
  
  	/* Domain allocation and freeing by the iommu driver */
 -	struct iommu_domain *(*domain_alloc)(unsigned iommu_domain_type);
 +	struct iommu_domain *(*domain_alloc)(void);
  	void (*domain_free)(struct iommu_domain *);
  
  	int (*attach_dev)(struct iommu_domain *domain, struct device *dev);
* Unmerged path drivers/iommu/iommu.c
* Unmerged path include/linux/iommu.h
