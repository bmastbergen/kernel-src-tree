sched: Make sched_setattr() correctly return -EFBIG

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Michael Kerrisk <mtk.manpages@gmail.com>
commit 143cf23df25b7082cd706c3c53188e741e7881c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/143cf23d.failed

The documented[1] behavior of sched_attr() in the proposed man page text is:

    sched_attr::size must be set to the size of the structure, as in
    sizeof(struct sched_attr), if the provided structure is smaller
    than the kernel structure, any additional fields are assumed
    '0'. If the provided structure is larger than the kernel structure,
    the kernel verifies all additional fields are '0' if not the
    syscall will fail with -E2BIG.

As currently implemented, sched_copy_attr() returns -EFBIG for
for this case, but the logic in sys_sched_setattr() converts that
error to -EFAULT. This patch fixes the behavior.

[1] http://thread.gmane.org/gmane.linux.kernel/1615615/focus=1697760

	Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: <stable@vger.kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/536CEC17.9070903@gmail.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 143cf23df25b7082cd706c3c53188e741e7881c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 8f3f375de9d1,f2205f02eb70..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -4366,6 -3643,36 +4366,39 @@@ SYSCALL_DEFINE2(sched_setparam, pid_t, 
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * sys_sched_setattr - same as above, but with extended sched_attr
+  * @pid: the pid in question.
+  * @uattr: structure containing the extended parameters.
+  * @flags: for future extension.
+  */
+ SYSCALL_DEFINE3(sched_setattr, pid_t, pid, struct sched_attr __user *, uattr,
+ 			       unsigned int, flags)
+ {
+ 	struct sched_attr attr;
+ 	struct task_struct *p;
+ 	int retval;
+ 
+ 	if (!uattr || pid < 0 || flags)
+ 		return -EINVAL;
+ 
+ 	retval = sched_copy_attr(uattr, &attr);
+ 	if (retval)
+ 		return retval;
+ 
+ 	rcu_read_lock();
+ 	retval = -ESRCH;
+ 	p = find_process_by_pid(pid);
+ 	if (p != NULL)
+ 		retval = sched_setattr(p, &attr);
+ 	rcu_read_unlock();
+ 
+ 	return retval;
+ }
+ 
+ /**
++>>>>>>> 143cf23df25b (sched: Make sched_setattr() correctly return -EFBIG)
   * sys_sched_getscheduler - get the policy (scheduling class) of a thread
   * @pid: the pid in question.
   *
* Unmerged path kernel/sched/core.c
