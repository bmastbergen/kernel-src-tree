libnvdimm, nfit: handle unarmed dimms, mark namespaces read-only

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Dan Williams <dan.j.williams@intel.com>
commit 581388209405902b56d055f644b4dd124a206112
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/58138820.failed

Upon detection of an unarmed dimm in a region, arrange for descendant
BTT, PMEM, or BLK instances to be read-only.  A dimm is primarily marked
"unarmed" via flags passed by platform firmware (NFIT).

The flags in the NFIT memory device sub-structure indicate the state of
the data on the nvdimm relative to its energy source or last "flush to
persistence".  For the most part there is nothing the driver can do but
advertise the state of these flags in sysfs and emit a message if
firmware indicates that the contents of the device may be corrupted.
However, for the case of ACPI_NFIT_MEM_ARMED, the driver can arrange for
the block devices incorporating that nvdimm to be marked read-only.
This is a safe default as the data is still available and new writes are
held off until the administrator either forces read-write mode, or the
energy source becomes armed.

A 'read_only' attribute is added to REGION devices to allow for
overriding the default read-only policy of all descendant block devices.

	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 581388209405902b56d055f644b4dd124a206112)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/nfit.c
#	drivers/acpi/nfit.h
#	drivers/nvdimm/blk.c
#	drivers/nvdimm/btt.c
#	drivers/nvdimm/bus.c
#	drivers/nvdimm/nd.h
#	drivers/nvdimm/region_devs.c
#	include/linux/libnvdimm.h
#	tools/testing/nvdimm/test/nfit.c
* Unmerged path drivers/acpi/nfit.c
* Unmerged path drivers/acpi/nfit.h
* Unmerged path drivers/nvdimm/blk.c
* Unmerged path drivers/nvdimm/btt.c
* Unmerged path drivers/nvdimm/bus.c
* Unmerged path drivers/nvdimm/nd.h
* Unmerged path drivers/nvdimm/region_devs.c
* Unmerged path include/linux/libnvdimm.h
* Unmerged path tools/testing/nvdimm/test/nfit.c
* Unmerged path drivers/acpi/nfit.c
* Unmerged path drivers/acpi/nfit.h
diff --git a/drivers/block/pmem.c b/drivers/block/pmem.c
index b5ba004a1153..403ff3a2eda2 100644
--- a/drivers/block/pmem.c
+++ b/drivers/block/pmem.c
@@ -99,6 +99,7 @@ static const struct block_device_operations pmem_fops = {
 	.owner =		THIS_MODULE,
 	.rw_page =		pmem_rw_page,
 	.direct_access =	pmem_direct_access,
+	.revalidate_disk =	nvdimm_revalidate_disk,
 };
 
 static struct pmem_device *pmem_alloc(struct device *dev,
@@ -157,6 +158,7 @@ static struct pmem_device *pmem_alloc(struct device *dev,
 	pmem->pmem_disk = disk;
 
 	add_disk(disk);
+	revalidate_disk(disk);
 
 	return pmem;
 
* Unmerged path drivers/nvdimm/blk.c
* Unmerged path drivers/nvdimm/btt.c
* Unmerged path drivers/nvdimm/bus.c
* Unmerged path drivers/nvdimm/nd.h
* Unmerged path drivers/nvdimm/region_devs.c
* Unmerged path include/linux/libnvdimm.h
* Unmerged path tools/testing/nvdimm/test/nfit.c
