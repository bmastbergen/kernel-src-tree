block: Add bdev_dax_supported() for dax mount checks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Toshi Kani <toshi.kani@hpe.com>
commit 2d96afc8f70ef86c66a0b5d80c24a27d6dd13df3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2d96afc8.failed

DAX imposes additional requirements to a device.  Add
bdev_dax_supported() which performs all the precondition checks
necessary for filesystem to mount the device with dax option.

Also add a new check to verify if a partition is aligned by 4KB.
When a partition is unaligned, any dax read/write access fails,
except for metadata update.

	Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Jens Axboe <axboe@fb.com>
	Cc: "Theodore Ts'o" <tytso@mit.edu>
	Cc: Andreas Dilger <adilger.kernel@dilger.ca>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Cc: Christoph Hellwig <hch@infradead.org>
	Cc: Boaz Harrosh <boaz@plexistor.com>
	Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
(cherry picked from commit 2d96afc8f70ef86c66a0b5d80c24a27d6dd13df3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/blkdev.h
diff --cc include/linux/blkdev.h
index 0e72d45d3caf,71231a55debd..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -1676,9 -1687,12 +1676,14 @@@ extern int __blkdev_driver_ioctl(struc
  extern int bdev_read_page(struct block_device *, sector_t, struct page *);
  extern int bdev_write_page(struct block_device *, sector_t, struct page *,
  						struct writeback_control *);
++<<<<<<< HEAD
 +extern long bdev_direct_access(struct block_device *, sector_t, void **addr,
 +						unsigned long *pfn, long size);
++=======
+ extern long bdev_direct_access(struct block_device *, struct blk_dax_ctl *);
+ extern int bdev_dax_supported(struct super_block *, int);
++>>>>>>> 2d96afc8f70e (block: Add bdev_dax_supported() for dax mount checks)
  #else /* CONFIG_BLOCK */
 -
 -struct block_device;
 -
  /*
   * stubs for when the block layer is configured out
   */
diff --git a/fs/block_dev.c b/fs/block_dev.c
index 2557803cf68e..ae0078e5b451 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -490,6 +490,51 @@ long bdev_direct_access(struct block_device *bdev, sector_t sector,
 }
 EXPORT_SYMBOL_GPL(bdev_direct_access);
 
+/**
+ * bdev_dax_supported() - Check if the device supports dax for filesystem
+ * @sb: The superblock of the device
+ * @blocksize: The block size of the device
+ *
+ * This is a library function for filesystems to check if the block device
+ * can be mounted with dax option.
+ *
+ * Return: negative errno if unsupported, 0 if supported.
+ */
+int bdev_dax_supported(struct super_block *sb, int blocksize)
+{
+	struct blk_dax_ctl dax = {
+		.sector = 0,
+		.size = PAGE_SIZE,
+	};
+	int err;
+
+	if (blocksize != PAGE_SIZE) {
+		vfs_msg(sb, KERN_ERR, "error: unsupported blocksize for dax");
+		return -EINVAL;
+	}
+
+	err = bdev_direct_access(sb->s_bdev, &dax);
+	if (err < 0) {
+		switch (err) {
+		case -EOPNOTSUPP:
+			vfs_msg(sb, KERN_ERR,
+				"error: device does not support dax");
+			break;
+		case -EINVAL:
+			vfs_msg(sb, KERN_ERR,
+				"error: unaligned partition for dax");
+			break;
+		default:
+			vfs_msg(sb, KERN_ERR,
+				"error: dax access failed (%d)", err);
+		}
+		return err;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(bdev_dax_supported);
+
 /*
  * pseudo-fs
  */
* Unmerged path include/linux/blkdev.h
