Add ioctl to set integrity

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Steve French <smfrench@gmail.com>
commit b3152e2c7aa9ad0c50085738d048fbf16d01d32d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b3152e2c.failed

set integrity increases reliability of files stored on SMB3 servers.
Add ioctl to allow setting this on files on SMB3 and later mounts.

	Signed-off-by: Steve French <steve.french@primarydata.com>
(cherry picked from commit b3152e2c7aa9ad0c50085738d048fbf16d01d32d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/smb2ops.c
diff --cc fs/cifs/smb2ops.c
index eab05e1aa587,df91bcf56d67..000000000000
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@@ -1635,6 -1705,94 +1658,97 @@@ struct smb_version_operations smb30_ope
  	.fallocate = smb3_fallocate,
  };
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CIFS_SMB311
+ struct smb_version_operations smb311_operations = {
+ 	.compare_fids = smb2_compare_fids,
+ 	.setup_request = smb2_setup_request,
+ 	.setup_async_request = smb2_setup_async_request,
+ 	.check_receive = smb2_check_receive,
+ 	.add_credits = smb2_add_credits,
+ 	.set_credits = smb2_set_credits,
+ 	.get_credits_field = smb2_get_credits_field,
+ 	.get_credits = smb2_get_credits,
+ 	.wait_mtu_credits = smb2_wait_mtu_credits,
+ 	.get_next_mid = smb2_get_next_mid,
+ 	.read_data_offset = smb2_read_data_offset,
+ 	.read_data_length = smb2_read_data_length,
+ 	.map_error = map_smb2_to_linux_error,
+ 	.find_mid = smb2_find_mid,
+ 	.check_message = smb2_check_message,
+ 	.dump_detail = smb2_dump_detail,
+ 	.clear_stats = smb2_clear_stats,
+ 	.print_stats = smb2_print_stats,
+ 	.dump_share_caps = smb2_dump_share_caps,
+ 	.is_oplock_break = smb2_is_valid_oplock_break,
+ 	.downgrade_oplock = smb2_downgrade_oplock,
+ 	.need_neg = smb2_need_neg,
+ 	.negotiate = smb2_negotiate,
+ 	.negotiate_wsize = smb2_negotiate_wsize,
+ 	.negotiate_rsize = smb2_negotiate_rsize,
+ 	.sess_setup = SMB2_sess_setup,
+ 	.logoff = SMB2_logoff,
+ 	.tree_connect = SMB2_tcon,
+ 	.tree_disconnect = SMB2_tdis,
+ 	.qfs_tcon = smb3_qfs_tcon,
+ 	.is_path_accessible = smb2_is_path_accessible,
+ 	.can_echo = smb2_can_echo,
+ 	.echo = SMB2_echo,
+ 	.query_path_info = smb2_query_path_info,
+ 	.get_srv_inum = smb2_get_srv_inum,
+ 	.query_file_info = smb2_query_file_info,
+ 	.set_path_size = smb2_set_path_size,
+ 	.set_file_size = smb2_set_file_size,
+ 	.set_file_info = smb2_set_file_info,
+ 	.set_compression = smb2_set_compression,
+ 	.mkdir = smb2_mkdir,
+ 	.mkdir_setinfo = smb2_mkdir_setinfo,
+ 	.rmdir = smb2_rmdir,
+ 	.unlink = smb2_unlink,
+ 	.rename = smb2_rename_path,
+ 	.create_hardlink = smb2_create_hardlink,
+ 	.query_symlink = smb2_query_symlink,
+ 	.query_mf_symlink = smb3_query_mf_symlink,
+ 	.create_mf_symlink = smb3_create_mf_symlink,
+ 	.open = smb2_open_file,
+ 	.set_fid = smb2_set_fid,
+ 	.close = smb2_close_file,
+ 	.flush = smb2_flush_file,
+ 	.async_readv = smb2_async_readv,
+ 	.async_writev = smb2_async_writev,
+ 	.sync_read = smb2_sync_read,
+ 	.sync_write = smb2_sync_write,
+ 	.query_dir_first = smb2_query_dir_first,
+ 	.query_dir_next = smb2_query_dir_next,
+ 	.close_dir = smb2_close_dir,
+ 	.calc_smb_size = smb2_calc_size,
+ 	.is_status_pending = smb2_is_status_pending,
+ 	.oplock_response = smb2_oplock_response,
+ 	.queryfs = smb2_queryfs,
+ 	.mand_lock = smb2_mand_lock,
+ 	.mand_unlock_range = smb2_unlock_range,
+ 	.push_mand_locks = smb2_push_mandatory_locks,
+ 	.get_lease_key = smb2_get_lease_key,
+ 	.set_lease_key = smb2_set_lease_key,
+ 	.new_lease_key = smb2_new_lease_key,
+ 	.generate_signingkey = generate_smb3signingkey,
+ 	.calc_signature = smb3_calc_signature,
+ 	.set_integrity  = smb3_set_integrity,
+ 	.is_read_op = smb21_is_read_op,
+ 	.set_oplock_level = smb3_set_oplock_level,
+ 	.create_lease_buf = smb3_create_lease_buf,
+ 	.parse_lease_buf = smb3_parse_lease_buf,
+ 	.clone_range = smb2_clone_range,
+ 	.duplicate_extents = smb2_duplicate_extents,
+ /*	.validate_negotiate = smb3_validate_negotiate, */ /* not used in 3.11 */
+ 	.wp_retry_size = smb2_wp_retry_size,
+ 	.dir_needs_close = smb2_dir_needs_close,
+ 	.fallocate = smb3_fallocate,
+ };
+ #endif /* CIFS_SMB311 */
+ 
++>>>>>>> b3152e2c7aa9 (Add ioctl to set integrity)
  struct smb_version_values smb20_values = {
  	.version_string = SMB20_VERSION_STRING,
  	.protocol_id = SMB20_PROT_ID,
diff --git a/fs/cifs/cifsglob.h b/fs/cifs/cifsglob.h
index df1b0c85e577..49f2e10131ae 100644
--- a/fs/cifs/cifsglob.h
+++ b/fs/cifs/cifsglob.h
@@ -369,6 +369,8 @@ struct smb_version_operations {
 	void (*new_lease_key)(struct cifs_fid *);
 	int (*generate_signingkey)(struct cifs_ses *);
 	int (*calc_signature)(struct smb_rqst *, struct TCP_Server_Info *);
+	int (*set_integrity)(const unsigned int, struct cifs_tcon *tcon,
+			     struct cifsFileInfo *src_file);
 	int (*query_mf_symlink)(unsigned int, struct cifs_tcon *,
 				struct cifs_sb_info *, const unsigned char *,
 				char *, unsigned int *);
diff --git a/fs/cifs/ioctl.c b/fs/cifs/ioctl.c
index 64a9bca976d0..4f6e61625ad9 100644
--- a/fs/cifs/ioctl.c
+++ b/fs/cifs/ioctl.c
@@ -34,6 +34,7 @@
 
 #define CIFS_IOCTL_MAGIC	0xCF
 #define CIFS_IOC_COPYCHUNK_FILE	_IOW(CIFS_IOCTL_MAGIC, 3, int)
+#define CIFS_IOC_SET_INTEGRITY  _IO(CIFS_IOCTL_MAGIC, 4)
 
 static long cifs_ioctl_clone(unsigned int xid, struct file *dst_file,
 			unsigned long srcfd, u64 off, u64 len, u64 destoff)
@@ -213,6 +214,16 @@ long cifs_ioctl(struct file *filep, unsigned int command, unsigned long arg)
 		case CIFS_IOC_COPYCHUNK_FILE:
 			rc = cifs_ioctl_clone(xid, filep, arg, 0, 0, 0);
 			break;
+		case CIFS_IOC_SET_INTEGRITY:
+			if (pSMBFile == NULL)
+				break;
+			tcon = tlink_tcon(pSMBFile->tlink);
+			if (tcon->ses->server->ops->set_integrity)
+				rc = tcon->ses->server->ops->set_integrity(xid,
+						tcon, pSMBFile);
+			else
+				rc = -EOPNOTSUPP;
+			break;
 		default:
 			cifs_dbg(FYI, "unsupported ioctl\n");
 			break;
* Unmerged path fs/cifs/smb2ops.c
diff --git a/fs/cifs/smb2pdu.h b/fs/cifs/smb2pdu.h
index 8ffb63444888..d37124e83f1e 100644
--- a/fs/cifs/smb2pdu.h
+++ b/fs/cifs/smb2pdu.h
@@ -634,6 +634,7 @@ struct fsctl_get_integrity_information_rsp {
 /* Integrity ChecksumAlgorithm choices for above */
 #define	CHECKSUM_TYPE_NONE	0x0000
 #define	CHECKSUM_TYPE_CRC64	0x0002
+#define CHECKSUM_TYPE_UNCHANGED	0xFFFF	/* set only */
 
 /* Integrity flags for above */
 #define FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF	0x00000001
