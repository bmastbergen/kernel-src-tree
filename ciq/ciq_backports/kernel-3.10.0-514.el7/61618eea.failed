vxlan: fix incorrect type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Benc <jbenc@redhat.com>
commit 61618eeac3e6165684895481c4f58ea879c3d616
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/61618eea.failed

The protocol is 16bit, not 32bit.

Fixes: e1e5314de08ba ("vxlan: implement GPE")
	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 61618eeac3e6165684895481c4f58ea879c3d616)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/vxlan.c
diff --cc drivers/net/vxlan.c
index 9215c93ac7ca,7f697a3f00a4..000000000000
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@@ -1127,58 -1128,181 +1127,183 @@@ static int vxlan_igmp_leave(struct vxla
  	return ret;
  }
  
 -static bool vxlan_remcsum(struct vxlanhdr *unparsed,
 -			  struct sk_buff *skb, u32 vxflags)
 +static struct vxlanhdr *vxlan_remcsum(struct sk_buff *skb, struct vxlanhdr *vh,
 +				      size_t hdrlen, u32 data, bool nopartial)
  {
 -	size_t start, offset;
 +	size_t start, offset, plen;
  
 -	if (!(unparsed->vx_flags & VXLAN_HF_RCO) || skb->remcsum_offload)
 -		goto out;
 +	if (skb->remcsum_offload)
 +		return vh;
  
 -	start = vxlan_rco_start(unparsed->vx_vni);
 -	offset = start + vxlan_rco_offset(unparsed->vx_vni);
 +	start = (data & VXLAN_RCO_MASK) << VXLAN_RCO_SHIFT;
 +	offset = start + ((data & VXLAN_RCO_UDP) ?
 +			  offsetof(struct udphdr, check) :
 +			  offsetof(struct tcphdr, check));
  
 -	if (!pskb_may_pull(skb, offset + sizeof(u16)))
 -		return false;
 +	plen = hdrlen + offset + sizeof(u16);
  
 -	skb_remcsum_process(skb, (void *)(vxlan_hdr(skb) + 1), start, offset,
 -			    !!(vxflags & VXLAN_F_REMCSUM_NOPARTIAL));
 -out:
 -	unparsed->vx_flags &= ~VXLAN_HF_RCO;
 -	unparsed->vx_vni &= VXLAN_VNI_MASK;
 -	return true;
 -}
 +	if (!pskb_may_pull(skb, plen))
 +		return NULL;
  
 -static void vxlan_parse_gbp_hdr(struct vxlanhdr *unparsed,
 -				struct sk_buff *skb, u32 vxflags,
 -				struct vxlan_metadata *md)
 -{
 -	struct vxlanhdr_gbp *gbp = (struct vxlanhdr_gbp *)unparsed;
 -	struct metadata_dst *tun_dst;
 +	vh = (struct vxlanhdr *)(udp_hdr(skb) + 1);
  
 -	if (!(unparsed->vx_flags & VXLAN_HF_GBP))
 -		goto out;
 +	skb_remcsum_process(skb, (void *)vh + hdrlen, start, offset,
 +			    nopartial);
  
++<<<<<<< HEAD
 +	return vh;
++=======
+ 	md->gbp = ntohs(gbp->policy_id);
+ 
+ 	tun_dst = (struct metadata_dst *)skb_dst(skb);
+ 	if (tun_dst) {
+ 		tun_dst->u.tun_info.key.tun_flags |= TUNNEL_VXLAN_OPT;
+ 		tun_dst->u.tun_info.options_len = sizeof(*md);
+ 	}
+ 	if (gbp->dont_learn)
+ 		md->gbp |= VXLAN_GBP_DONT_LEARN;
+ 
+ 	if (gbp->policy_applied)
+ 		md->gbp |= VXLAN_GBP_POLICY_APPLIED;
+ 
+ 	/* In flow-based mode, GBP is carried in dst_metadata */
+ 	if (!(vxflags & VXLAN_F_COLLECT_METADATA))
+ 		skb->mark = md->gbp;
+ out:
+ 	unparsed->vx_flags &= ~VXLAN_GBP_USED_BITS;
+ }
+ 
+ static bool vxlan_parse_gpe_hdr(struct vxlanhdr *unparsed,
+ 				__be16 *protocol,
+ 				struct sk_buff *skb, u32 vxflags)
+ {
+ 	struct vxlanhdr_gpe *gpe = (struct vxlanhdr_gpe *)unparsed;
+ 
+ 	/* Need to have Next Protocol set for interfaces in GPE mode. */
+ 	if (!gpe->np_applied)
+ 		return false;
+ 	/* "The initial version is 0. If a receiver does not support the
+ 	 * version indicated it MUST drop the packet.
+ 	 */
+ 	if (gpe->version != 0)
+ 		return false;
+ 	/* "When the O bit is set to 1, the packet is an OAM packet and OAM
+ 	 * processing MUST occur." However, we don't implement OAM
+ 	 * processing, thus drop the packet.
+ 	 */
+ 	if (gpe->oam_flag)
+ 		return false;
+ 
+ 	switch (gpe->next_protocol) {
+ 	case VXLAN_GPE_NP_IPV4:
+ 		*protocol = htons(ETH_P_IP);
+ 		break;
+ 	case VXLAN_GPE_NP_IPV6:
+ 		*protocol = htons(ETH_P_IPV6);
+ 		break;
+ 	case VXLAN_GPE_NP_ETHERNET:
+ 		*protocol = htons(ETH_P_TEB);
+ 		break;
+ 	default:
+ 		return false;
+ 	}
+ 
+ 	unparsed->vx_flags &= ~VXLAN_GPE_USED_BITS;
+ 	return true;
+ }
+ 
+ static bool vxlan_set_mac(struct vxlan_dev *vxlan,
+ 			  struct vxlan_sock *vs,
+ 			  struct sk_buff *skb)
+ {
+ 	union vxlan_addr saddr;
+ 
+ 	skb_reset_mac_header(skb);
+ 	skb->protocol = eth_type_trans(skb, vxlan->dev);
+ 	skb_postpull_rcsum(skb, eth_hdr(skb), ETH_HLEN);
+ 
+ 	/* Ignore packet loops (and multicast echo) */
+ 	if (ether_addr_equal(eth_hdr(skb)->h_source, vxlan->dev->dev_addr))
+ 		return false;
+ 
+ 	/* Get address from the outer IP header */
+ 	if (vxlan_get_sk_family(vs) == AF_INET) {
+ 		saddr.sin.sin_addr.s_addr = ip_hdr(skb)->saddr;
+ 		saddr.sa.sa_family = AF_INET;
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	} else {
+ 		saddr.sin6.sin6_addr = ipv6_hdr(skb)->saddr;
+ 		saddr.sa.sa_family = AF_INET6;
+ #endif
+ 	}
+ 
+ 	if ((vxlan->flags & VXLAN_F_LEARN) &&
+ 	    vxlan_snoop(skb->dev, &saddr, eth_hdr(skb)->h_source))
+ 		return false;
+ 
+ 	return true;
+ }
+ 
+ static bool vxlan_ecn_decapsulate(struct vxlan_sock *vs, void *oiph,
+ 				  struct sk_buff *skb)
+ {
+ 	int err = 0;
+ 
+ 	if (vxlan_get_sk_family(vs) == AF_INET)
+ 		err = IP_ECN_decapsulate(oiph, skb);
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	else
+ 		err = IP6_ECN_decapsulate(oiph, skb);
+ #endif
+ 
+ 	if (unlikely(err) && log_ecn_error) {
+ 		if (vxlan_get_sk_family(vs) == AF_INET)
+ 			net_info_ratelimited("non-ECT from %pI4 with TOS=%#x\n",
+ 					     &((struct iphdr *)oiph)->saddr,
+ 					     ((struct iphdr *)oiph)->tos);
+ 		else
+ 			net_info_ratelimited("non-ECT from %pI6\n",
+ 					     &((struct ipv6hdr *)oiph)->saddr);
+ 	}
+ 	return err <= 1;
++>>>>>>> 61618eeac3e6 (vxlan: fix incorrect type)
  }
  
  /* Callback from net/ipv4/udp.c to receive packets */
 -static int vxlan_rcv(struct sock *sk, struct sk_buff *skb)
 +static int vxlan_udp_encap_recv(struct sock *sk, struct sk_buff *skb)
  {
 -	struct pcpu_sw_netstats *stats;
 -	struct vxlan_dev *vxlan;
  	struct vxlan_sock *vs;
++<<<<<<< HEAD
 +	struct vxlanhdr *vxh;
 +	u32 flags, vni;
 +	struct vxlan_metadata md = {0};
++=======
+ 	struct vxlanhdr unparsed;
+ 	struct vxlan_metadata _md;
+ 	struct vxlan_metadata *md = &_md;
+ 	__be16 protocol = htons(ETH_P_TEB);
+ 	bool raw_proto = false;
+ 	void *oiph;
++>>>>>>> 61618eeac3e6 (vxlan: fix incorrect type)
  
 -	/* Need UDP and VXLAN header to be present */
 +	/* Need Vxlan and inner Ethernet header to be present */
  	if (!pskb_may_pull(skb, VXLAN_HLEN))
 -		return 1;
 +		goto error;
  
 -	unparsed = *vxlan_hdr(skb);
 -	/* VNI flag always required to be set */
 -	if (!(unparsed.vx_flags & VXLAN_HF_VNI)) {
 -		netdev_dbg(skb->dev, "invalid vxlan flags=%#x vni=%#x\n",
 -			   ntohl(vxlan_hdr(skb)->vx_flags),
 -			   ntohl(vxlan_hdr(skb)->vx_vni));
 -		/* Return non vxlan pkt */
 -		return 1;
 +	vxh = (struct vxlanhdr *)(udp_hdr(skb) + 1);
 +	flags = ntohl(vxh->vx_flags);
 +	vni = ntohl(vxh->vx_vni);
 +
 +	if (flags & VXLAN_HF_VNI) {
 +		flags &= ~VXLAN_HF_VNI;
 +	} else {
 +		/* VNI flag always required to be set */
 +		goto bad_flags;
  	}
 -	unparsed.vx_flags &= ~VXLAN_HF_VNI;
 -	unparsed.vx_vni &= ~VXLAN_VNI_MASK;
 +
 +	if (iptunnel_pull_header(skb, VXLAN_HLEN, htons(ETH_P_TEB)))
 +		goto drop;
 +	vxh = (struct vxlanhdr *)(udp_hdr(skb) + 1);
  
  	vs = rcu_dereference_sk_user_data(sk);
  	if (!vs)
* Unmerged path drivers/net/vxlan.c
