iommu/vt-d: Create RMRR mappings in newly allocated domains

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] vt-d: Create RMRR mappings in newly allocated domains (Myron Stowe) [1311267]
Rebuild_FUZZ: 94.64%
commit-author Joerg Roedel <jroedel@suse.de>
commit b1ce5b79aec8d8cd8bcd076d8cce8bc3cd690051
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b1ce5b79.failed

Currently the RMRR entries are created only at boot time.
This means they will vanish when the domain allocated at
boot time is destroyed.
This patch makes sure that also newly allocated domains will
get RMRR mappings.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit b1ce5b79aec8d8cd8bcd076d8cce8bc3cd690051)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel-iommu.c
diff --cc drivers/iommu/intel-iommu.c
index bb8ed4832156,6ac6e741c46e..000000000000
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@@ -2960,8 -3241,10 +2960,14 @@@ static struct iova *intel_alloc_iova(st
  
  static struct dmar_domain *__get_valid_domain_for_dev(struct device *dev)
  {
+ 	struct dmar_rmrr_unit *rmrr;
  	struct dmar_domain *domain;
++<<<<<<< HEAD
 +	int ret;
++=======
+ 	struct device *i_dev;
+ 	int i, ret;
++>>>>>>> b1ce5b79aec8 (iommu/vt-d: Create RMRR mappings in newly allocated domains)
  
  	domain = get_domain_for_dev(dev, DEFAULT_DOMAIN_ADDRESS_WIDTH);
  	if (!domain) {
@@@ -2970,15 -3253,22 +2976,34 @@@
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	/* make sure context mapping is ok */
 +	if (unlikely(!domain_context_mapped(dev))) {
 +		ret = domain_context_mapping(domain, dev);
 +		if (ret) {
 +			printk(KERN_ERR "Domain context map for %s failed",
 +			       dev_name(dev));
 +			return NULL;
 +		}
 +	}
++=======
+ 	/* We have a new domain - setup possible RMRRs for the device */
+ 	rcu_read_lock();
+ 	for_each_rmrr_units(rmrr) {
+ 		for_each_active_dev_scope(rmrr->devices, rmrr->devices_cnt,
+ 					  i, i_dev) {
+ 			if (i_dev != dev)
+ 				continue;
+ 
+ 			ret = domain_prepare_identity_map(dev, domain,
+ 							  rmrr->base_address,
+ 							  rmrr->end_address);
+ 			if (ret)
+ 				dev_err(dev, "Mapping reserved region failed\n");
+ 		}
+ 	}
+ 	rcu_read_unlock();
++>>>>>>> b1ce5b79aec8 (iommu/vt-d: Create RMRR mappings in newly allocated domains)
  
  	return domain;
  }
* Unmerged path drivers/iommu/intel-iommu.c
