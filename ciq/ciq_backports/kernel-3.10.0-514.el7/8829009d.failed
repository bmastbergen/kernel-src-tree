ixgbe: Disable DCB and FCoE for X550EM_x and x550em_a

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Usha Ketineni <usha.k.ketineni@intel.com>
commit 8829009d2fd5683ed29418420b4883cf4782c85c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8829009d.failed

This patch adds IXGBE_FLAG_DCB_CAPABLE flag that is set
for all MACs other than X550EM_x and x550em_a. DCB and
FCoE is disabled for these MACS. DCB initialization
code is moved to a separate function.

	Signed-off-by: Usha Ketineni <usha.k.ketineni@intel.com>
	Tested-by: Ronald Bynoe <ronald.j.bynoe@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 8829009d2fd5683ed29418420b4883cf4782c85c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe.h
#	drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe.h
index 101e13fb1c2d,9f2db1855412..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@@ -638,41 -620,47 +638,69 @@@ struct ixgbe_adapter 
  	 * thus the additional *_CAPABLE flags.
  	 */
  	u32 flags;
++<<<<<<< HEAD
 +#define IXGBE_FLAG_MSI_ENABLED                  (u32)(1 << 1)
 +#define IXGBE_FLAG_MSIX_ENABLED                 (u32)(1 << 3)
 +#define IXGBE_FLAG_RX_1BUF_CAPABLE              (u32)(1 << 4)
 +#define IXGBE_FLAG_RX_PS_CAPABLE                (u32)(1 << 5)
 +#define IXGBE_FLAG_RX_PS_ENABLED                (u32)(1 << 6)
 +#define IXGBE_FLAG_DCA_ENABLED                  (u32)(1 << 8)
 +#define IXGBE_FLAG_DCA_CAPABLE                  (u32)(1 << 9)
 +#define IXGBE_FLAG_IMIR_ENABLED                 (u32)(1 << 10)
 +#define IXGBE_FLAG_MQ_CAPABLE                   (u32)(1 << 11)
 +#define IXGBE_FLAG_DCB_ENABLED                  (u32)(1 << 12)
 +#define IXGBE_FLAG_VMDQ_CAPABLE                 (u32)(1 << 13)
 +#define IXGBE_FLAG_VMDQ_ENABLED                 (u32)(1 << 14)
 +#define IXGBE_FLAG_FAN_FAIL_CAPABLE             (u32)(1 << 15)
 +#define IXGBE_FLAG_NEED_LINK_UPDATE             (u32)(1 << 16)
 +#define IXGBE_FLAG_NEED_LINK_CONFIG             (u32)(1 << 17)
 +#define IXGBE_FLAG_FDIR_HASH_CAPABLE            (u32)(1 << 18)
 +#define IXGBE_FLAG_FDIR_PERFECT_CAPABLE         (u32)(1 << 19)
 +#define IXGBE_FLAG_FCOE_CAPABLE                 (u32)(1 << 20)
 +#define IXGBE_FLAG_FCOE_ENABLED                 (u32)(1 << 21)
 +#define IXGBE_FLAG_SRIOV_CAPABLE                (u32)(1 << 22)
 +#define IXGBE_FLAG_SRIOV_ENABLED                (u32)(1 << 23)
++=======
+ #define IXGBE_FLAG_MSI_ENABLED			BIT(1)
+ #define IXGBE_FLAG_MSIX_ENABLED			BIT(3)
+ #define IXGBE_FLAG_RX_1BUF_CAPABLE		BIT(4)
+ #define IXGBE_FLAG_RX_PS_CAPABLE		BIT(5)
+ #define IXGBE_FLAG_RX_PS_ENABLED		BIT(6)
+ #define IXGBE_FLAG_DCA_ENABLED			BIT(8)
+ #define IXGBE_FLAG_DCA_CAPABLE			BIT(9)
+ #define IXGBE_FLAG_IMIR_ENABLED			BIT(10)
+ #define IXGBE_FLAG_MQ_CAPABLE			BIT(11)
+ #define IXGBE_FLAG_DCB_ENABLED			BIT(12)
+ #define IXGBE_FLAG_VMDQ_CAPABLE			BIT(13)
+ #define IXGBE_FLAG_VMDQ_ENABLED			BIT(14)
+ #define IXGBE_FLAG_FAN_FAIL_CAPABLE		BIT(15)
+ #define IXGBE_FLAG_NEED_LINK_UPDATE		BIT(16)
+ #define IXGBE_FLAG_NEED_LINK_CONFIG		BIT(17)
+ #define IXGBE_FLAG_FDIR_HASH_CAPABLE		BIT(18)
+ #define IXGBE_FLAG_FDIR_PERFECT_CAPABLE		BIT(19)
+ #define IXGBE_FLAG_FCOE_CAPABLE			BIT(20)
+ #define IXGBE_FLAG_FCOE_ENABLED			BIT(21)
+ #define IXGBE_FLAG_SRIOV_CAPABLE		BIT(22)
+ #define IXGBE_FLAG_SRIOV_ENABLED		BIT(23)
+ #define IXGBE_FLAG_VXLAN_OFFLOAD_CAPABLE	BIT(24)
+ #define IXGBE_FLAG_RX_HWTSTAMP_ENABLED		BIT(25)
+ #define IXGBE_FLAG_RX_HWTSTAMP_IN_REGISTER	BIT(26)
+ #define IXGBE_FLAG_DCB_CAPABLE			BIT(27)
++>>>>>>> 8829009d2fd5 (ixgbe: Disable DCB and FCoE for X550EM_x and x550em_a)
  
  	u32 flags2;
 -#define IXGBE_FLAG2_RSC_CAPABLE			BIT(0)
 -#define IXGBE_FLAG2_RSC_ENABLED			BIT(1)
 -#define IXGBE_FLAG2_TEMP_SENSOR_CAPABLE		BIT(2)
 -#define IXGBE_FLAG2_TEMP_SENSOR_EVENT		BIT(3)
 -#define IXGBE_FLAG2_SEARCH_FOR_SFP		BIT(4)
 -#define IXGBE_FLAG2_SFP_NEEDS_RESET		BIT(5)
 -#define IXGBE_FLAG2_RESET_REQUESTED		BIT(6)
 -#define IXGBE_FLAG2_FDIR_REQUIRES_REINIT	BIT(7)
 -#define IXGBE_FLAG2_RSS_FIELD_IPV4_UDP		BIT(8)
 -#define IXGBE_FLAG2_RSS_FIELD_IPV6_UDP		BIT(9)
 -#define IXGBE_FLAG2_PTP_PPS_ENABLED		BIT(10)
 -#define IXGBE_FLAG2_PHY_INTERRUPT		BIT(11)
 -#define IXGBE_FLAG2_VXLAN_REREG_NEEDED		BIT(12)
 -#define IXGBE_FLAG2_VLAN_PROMISC		BIT(13)
 +#define IXGBE_FLAG2_RSC_CAPABLE                 (u32)(1 << 0)
 +#define IXGBE_FLAG2_RSC_ENABLED                 (u32)(1 << 1)
 +#define IXGBE_FLAG2_TEMP_SENSOR_CAPABLE         (u32)(1 << 2)
 +#define IXGBE_FLAG2_TEMP_SENSOR_EVENT           (u32)(1 << 3)
 +#define IXGBE_FLAG2_SEARCH_FOR_SFP              (u32)(1 << 4)
 +#define IXGBE_FLAG2_SFP_NEEDS_RESET             (u32)(1 << 5)
 +#define IXGBE_FLAG2_RESET_REQUESTED             (u32)(1 << 6)
 +#define IXGBE_FLAG2_FDIR_REQUIRES_REINIT        (u32)(1 << 7)
 +#define IXGBE_FLAG2_RSS_FIELD_IPV4_UDP		(u32)(1 << 8)
 +#define IXGBE_FLAG2_RSS_FIELD_IPV6_UDP		(u32)(1 << 9)
 +#define IXGBE_FLAG2_PTP_PPS_ENABLED		(u32)(1 << 10)
 +#define IXGBE_FLAG2_PHY_INTERRUPT		(u32)(1 << 11)
  
  	/* Tx fast path data */
  	int num_tx_queues;
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 7c13b8822850,2f6984279d92..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@@ -5160,10 -5626,7 +5212,14 @@@ static int ixgbe_sw_init(struct ixgbe_a
  	unsigned int rss, fdir;
  	u32 fwsm;
  	u16 device_caps;
++<<<<<<< HEAD
 +#ifdef CONFIG_IXGBE_DCB
 +	int j;
 +	struct tc_configuration *tc;
 +#endif
++=======
+ 	int i;
++>>>>>>> 8829009d2fd5 (ixgbe: Disable DCB and FCoE for X550EM_x and x550em_a)
  
  	/* PCI config space info */
  
@@@ -5230,6 -5707,17 +5290,20 @@@
  			adapter->flags2 |= IXGBE_FLAG2_TEMP_SENSOR_CAPABLE;
  		break;
  	case ixgbe_mac_X550EM_x:
++<<<<<<< HEAD
++=======
+ 	case ixgbe_mac_x550em_a:
+ #ifdef CONFIG_IXGBE_DCB
+ 		adapter->flags &= ~IXGBE_FLAG_DCB_CAPABLE;
+ #endif
+ #ifdef IXGBE_FCOE
+ 		adapter->flags &= ~IXGBE_FLAG_FCOE_CAPABLE;
+ #ifdef CONFIG_IXGBE_DCB
+ 		adapter->fcoe.up = 0;
+ #endif /* IXGBE_DCB */
+ #endif /* IXGBE_FCOE */
+ 	/* Fall Through */
++>>>>>>> 8829009d2fd5 (ixgbe: Disable DCB and FCoE for X550EM_x and x550em_a)
  	case ixgbe_mac_X550:
  #ifdef CONFIG_IXGBE_DCA
  		adapter->flags &= ~IXGBE_FLAG_DCA_CAPABLE;
@@@ -5248,42 -5739,7 +5322,46 @@@
  	spin_lock_init(&adapter->fdir_perfect_lock);
  
  #ifdef CONFIG_IXGBE_DCB
++<<<<<<< HEAD
 +	switch (hw->mac.type) {
 +	case ixgbe_mac_X540:
 +	case ixgbe_mac_X550:
 +	case ixgbe_mac_X550EM_x:
 +		adapter->dcb_cfg.num_tcs.pg_tcs = X540_TRAFFIC_CLASS;
 +		adapter->dcb_cfg.num_tcs.pfc_tcs = X540_TRAFFIC_CLASS;
 +		break;
 +	default:
 +		adapter->dcb_cfg.num_tcs.pg_tcs = MAX_TRAFFIC_CLASS;
 +		adapter->dcb_cfg.num_tcs.pfc_tcs = MAX_TRAFFIC_CLASS;
 +		break;
 +	}
 +
 +	/* Configure DCB traffic classes */
 +	for (j = 0; j < MAX_TRAFFIC_CLASS; j++) {
 +		tc = &adapter->dcb_cfg.tc_config[j];
 +		tc->path[DCB_TX_CONFIG].bwg_id = 0;
 +		tc->path[DCB_TX_CONFIG].bwg_percent = 12 + (j & 1);
 +		tc->path[DCB_RX_CONFIG].bwg_id = 0;
 +		tc->path[DCB_RX_CONFIG].bwg_percent = 12 + (j & 1);
 +		tc->dcb_pfc = pfc_disabled;
 +	}
 +
 +	/* Initialize default user to priority mapping, UPx->TC0 */
 +	tc = &adapter->dcb_cfg.tc_config[0];
 +	tc->path[DCB_TX_CONFIG].up_to_tc_bitmap = 0xFF;
 +	tc->path[DCB_RX_CONFIG].up_to_tc_bitmap = 0xFF;
 +
 +	adapter->dcb_cfg.bw_percentage[DCB_TX_CONFIG][0] = 100;
 +	adapter->dcb_cfg.bw_percentage[DCB_RX_CONFIG][0] = 100;
 +	adapter->dcb_cfg.pfc_mode_enable = false;
 +	adapter->dcb_set_bitmap = 0x00;
 +	adapter->dcbx_cap = DCB_CAP_DCBX_HOST | DCB_CAP_DCBX_VER_CEE;
 +	memcpy(&adapter->temp_dcb_cfg, &adapter->dcb_cfg,
 +	       sizeof(adapter->temp_dcb_cfg));
 +
++=======
+ 	ixgbe_init_dcb(adapter);
++>>>>>>> 8829009d2fd5 (ixgbe: Disable DCB and FCoE for X550EM_x and x550em_a)
  #endif
  
  	/* default flow control settings */
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe.h
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
index bebc341fb941..d0aed156f4d5 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
@@ -543,6 +543,7 @@ struct ixgbe_thermal_sensor_data {
 /* DCB registers */
 #define MAX_TRAFFIC_CLASS        8
 #define X540_TRAFFIC_CLASS       4
+#define DEF_TRAFFIC_CLASS        1
 #define IXGBE_RMCS      0x03D00
 #define IXGBE_DPMCS     0x07F40
 #define IXGBE_PDPMCS    0x0CD00
