powerpc: Add MSI operations to pci_controller_ops struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [powerpc] Add MSI operations to pci_controller_ops struct (Gustavo Duarte) [1275657]
Rebuild_FUZZ: 91.26%
commit-author Daniel Axtens <dja@axtens.net>
commit e059b105d157d0231e2f0a7fba996724d856114b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e059b105.failed

Add MSI setup and teardown functions to pci_controller_ops.

Patch the callsites (arch_{setup,teardown}_msi_irqs) to prefer the
controller ops version if it's available.

	Signed-off-by: Daniel Axtens <dja@axtens.net>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit e059b105d157d0231e2f0a7fba996724d856114b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/msi.c
diff --cc arch/powerpc/kernel/msi.c
index 8bbc12d20f5c,3d452f71fa25..000000000000
--- a/arch/powerpc/kernel/msi.c
+++ b/arch/powerpc/kernel/msi.c
@@@ -13,9 -13,13 +13,13 @@@
  
  #include <asm/machdep.h>
  
 -int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 +int arch_msi_check_device(struct pci_dev* dev, int nvec, int type)
  {
- 	if (!ppc_md.setup_msi_irqs || !ppc_md.teardown_msi_irqs) {
+ 	struct pci_controller *phb = pci_bus_to_host(dev->bus);
+ 
+ 	if ((!phb->controller_ops.setup_msi_irqs ||
+ 	     !phb->controller_ops.teardown_msi_irqs) &&
+ 	    (!ppc_md.setup_msi_irqs || !ppc_md.teardown_msi_irqs)) {
  		pr_debug("msi: Platform doesn't provide MSI callbacks.\n");
  		return -ENOSYS;
  	}
@@@ -24,17 -28,10 +28,24 @@@
  	if (type == PCI_CAP_ID_MSI && nvec > 1)
  		return 1;
  
++<<<<<<< HEAD
 +	if (ppc_md.msi_check_device) {
 +		pr_debug("msi: Using platform check routine.\n");
 +		return ppc_md.msi_check_device(dev, nvec, type);
 +	}
 +
 +        return 0;
 +}
 +
 +int arch_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 +{
 +	return ppc_md.setup_msi_irqs(dev, nvec, type);
++=======
+ 	if (phb->controller_ops.setup_msi_irqs)
+ 		return phb->controller_ops.setup_msi_irqs(dev, nvec, type);
+ 	else
+ 		return ppc_md.setup_msi_irqs(dev, nvec, type);
++>>>>>>> e059b105d157 (powerpc: Add MSI operations to pci_controller_ops struct)
  }
  
  void arch_teardown_msi_irqs(struct pci_dev *dev)
diff --git a/arch/powerpc/include/asm/pci-bridge.h b/arch/powerpc/include/asm/pci-bridge.h
index 157251ae4847..73198f144df8 100644
--- a/arch/powerpc/include/asm/pci-bridge.h
+++ b/arch/powerpc/include/asm/pci-bridge.h
@@ -35,6 +35,12 @@ struct pci_controller_ops {
 	/* Called during PCI resource reassignment */
 	resource_size_t (*window_alignment)(struct pci_bus *, unsigned long type);
 	void		(*reset_secondary_bus)(struct pci_dev *dev);
+
+#ifdef CONFIG_PCI_MSI
+	int		(*setup_msi_irqs)(struct pci_dev *dev,
+					  int nvec, int type);
+	void		(*teardown_msi_irqs)(struct pci_dev *dev);
+#endif
 };
 
 /*
* Unmerged path arch/powerpc/kernel/msi.c
