cxgb4, iw_cxgb4: move definitions to common header file

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Varun Prakash <varun@chelsio.com>
commit a84f0e1379d978ed736cd242e196be723fbdd604
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a84f0e13.failed

move struct tcp_options, struct cpl_pass_accept_req,
enum defining congestion control algorithms
and associated macros to common header file t4_msg.h

	Signed-off-by: Varun Prakash <varun@chelsio.com>
	Acked-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit a84f0e1379d978ed736cd242e196be723fbdd604)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
diff --cc drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
index fe29e875e8c6,5b66da3bcd39..000000000000
--- a/drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
+++ b/drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
@@@ -740,116 -740,35 +740,122 @@@ struct fw_ri_wr 
  	} u;
  };
  
 -#define FW_RI_WR_MPAREQBIT_S	7
 -#define FW_RI_WR_MPAREQBIT_M	0x1
 -#define FW_RI_WR_MPAREQBIT_V(x)	((x) << FW_RI_WR_MPAREQBIT_S)
 -#define FW_RI_WR_MPAREQBIT_G(x)	\
 -	(((x) >> FW_RI_WR_MPAREQBIT_S) & FW_RI_WR_MPAREQBIT_M)
 -#define FW_RI_WR_MPAREQBIT_F	FW_RI_WR_MPAREQBIT_V(1U)
 +#define S_FW_RI_WR_MPAREQBIT	7
 +#define M_FW_RI_WR_MPAREQBIT	0x1
 +#define V_FW_RI_WR_MPAREQBIT(x)	((x) << S_FW_RI_WR_MPAREQBIT)
 +#define G_FW_RI_WR_MPAREQBIT(x)	\
 +    (((x) >> S_FW_RI_WR_MPAREQBIT) & M_FW_RI_WR_MPAREQBIT)
 +#define F_FW_RI_WR_MPAREQBIT	V_FW_RI_WR_MPAREQBIT(1U)
 +
 +#define S_FW_RI_WR_P2PTYPE	0
 +#define M_FW_RI_WR_P2PTYPE	0xf
 +#define V_FW_RI_WR_P2PTYPE(x)	((x) << S_FW_RI_WR_P2PTYPE)
 +#define G_FW_RI_WR_P2PTYPE(x)	\
 +    (((x) >> S_FW_RI_WR_P2PTYPE) & M_FW_RI_WR_P2PTYPE)
 +
++<<<<<<< HEAD
 +struct tcp_options {
 +	__be16 mss;
 +	__u8 wsf;
 +#if defined(__LITTLE_ENDIAN_BITFIELD)
 +	__u8:4;
 +	__u8 unknown:1;
 +	__u8:1;
 +	__u8 sack:1;
 +	__u8 tstamp:1;
 +#else
 +	__u8 tstamp:1;
 +	__u8 sack:1;
 +	__u8:1;
 +	__u8 unknown:1;
 +	__u8:4;
 +#endif
 +};
  
 -#define FW_RI_WR_P2PTYPE_S	0
 -#define FW_RI_WR_P2PTYPE_M	0xf
 -#define FW_RI_WR_P2PTYPE_V(x)	((x) << FW_RI_WR_P2PTYPE_S)
 -#define FW_RI_WR_P2PTYPE_G(x)	\
 -	(((x) >> FW_RI_WR_P2PTYPE_S) & FW_RI_WR_P2PTYPE_M)
 +struct cpl_pass_accept_req {
 +	union opcode_tid ot;
 +	__be16 rsvd;
 +	__be16 len;
 +	__be32 hdr_len;
 +	__be16 vlan;
 +	__be16 l2info;
 +	__be32 tos_stid;
 +	struct tcp_options tcpopt;
 +};
  
 +/* cpl_pass_accept_req.hdr_len fields */
 +#define S_SYN_RX_CHAN    0
 +#define M_SYN_RX_CHAN    0xF
 +#define V_SYN_RX_CHAN(x) ((x) << S_SYN_RX_CHAN)
 +#define G_SYN_RX_CHAN(x) (((x) >> S_SYN_RX_CHAN) & M_SYN_RX_CHAN)
 +
 +#define S_TCP_HDR_LEN    10
 +#define M_TCP_HDR_LEN    0x3F
 +#define V_TCP_HDR_LEN(x) ((x) << S_TCP_HDR_LEN)
 +#define G_TCP_HDR_LEN(x) (((x) >> S_TCP_HDR_LEN) & M_TCP_HDR_LEN)
 +
 +#define S_IP_HDR_LEN    16
 +#define M_IP_HDR_LEN    0x3FF
 +#define V_IP_HDR_LEN(x) ((x) << S_IP_HDR_LEN)
 +#define G_IP_HDR_LEN(x) (((x) >> S_IP_HDR_LEN) & M_IP_HDR_LEN)
 +
 +#define S_ETH_HDR_LEN    26
 +#define M_ETH_HDR_LEN    0x1F
 +#define V_ETH_HDR_LEN(x) ((x) << S_ETH_HDR_LEN)
 +#define G_ETH_HDR_LEN(x) (((x) >> S_ETH_HDR_LEN) & M_ETH_HDR_LEN)
 +
 +/* cpl_pass_accept_req.l2info fields */
 +#define S_SYN_MAC_IDX    0
 +#define M_SYN_MAC_IDX    0x1FF
 +#define V_SYN_MAC_IDX(x) ((x) << S_SYN_MAC_IDX)
 +#define G_SYN_MAC_IDX(x) (((x) >> S_SYN_MAC_IDX) & M_SYN_MAC_IDX)
 +
 +#define S_SYN_XACT_MATCH    9
 +#define V_SYN_XACT_MATCH(x) ((x) << S_SYN_XACT_MATCH)
 +#define F_SYN_XACT_MATCH    V_SYN_XACT_MATCH(1U)
 +
 +#define S_SYN_INTF    12
 +#define M_SYN_INTF    0xF
 +#define V_SYN_INTF(x) ((x) << S_SYN_INTF)
 +#define G_SYN_INTF(x) (((x) >> S_SYN_INTF) & M_SYN_INTF)
 +
++=======
++>>>>>>> a84f0e1379d9 (cxgb4, iw_cxgb4: move definitions to common header file)
  struct ulptx_idata {
  	__be32 cmd_more;
  	__be32 len;
  };
  
 -#define ULPTX_NSGE_S    0
 -#define ULPTX_NSGE_M    0xFFFF
 -#define ULPTX_NSGE_V(x) ((x) << ULPTX_NSGE_S)
 +#define S_ULPTX_NSGE    0
 +#define M_ULPTX_NSGE    0xFFFF
 +#define V_ULPTX_NSGE(x) ((x) << S_ULPTX_NSGE)
 +
 +#define S_RX_DACK_MODE    29
 +#define M_RX_DACK_MODE    0x3
 +#define V_RX_DACK_MODE(x) ((x) << S_RX_DACK_MODE)
 +#define G_RX_DACK_MODE(x) (((x) >> S_RX_DACK_MODE) & M_RX_DACK_MODE)
 +
 +#define S_RX_DACK_CHANGE    31
 +#define V_RX_DACK_CHANGE(x) ((x) << S_RX_DACK_CHANGE)
 +#define F_RX_DACK_CHANGE    V_RX_DACK_CHANGE(1U)
 +
++<<<<<<< HEAD
 +enum {                     /* TCP congestion control algorithms */
 +	CONG_ALG_RENO,
 +	CONG_ALG_TAHOE,
 +	CONG_ALG_NEWRENO,
 +	CONG_ALG_HIGHSPEED
 +};
  
 -#define RX_DACK_MODE_S    29
 -#define RX_DACK_MODE_M    0x3
 -#define RX_DACK_MODE_V(x) ((x) << RX_DACK_MODE_S)
 -#define RX_DACK_MODE_G(x) (((x) >> RX_DACK_MODE_S) & RX_DACK_MODE_M)
 +#define S_CONG_CNTRL    14
 +#define M_CONG_CNTRL    0x3
 +#define V_CONG_CNTRL(x) ((x) << S_CONG_CNTRL)
 +#define G_CONG_CNTRL(x) (((x) >> S_CONG_CNTRL) & M_CONG_CNTRL)
  
 -#define RX_DACK_CHANGE_S    31
 -#define RX_DACK_CHANGE_V(x) ((x) << RX_DACK_CHANGE_S)
 -#define RX_DACK_CHANGE_F    RX_DACK_CHANGE_V(1U)
 +#define T5_ISS_S    18
 +#define T5_ISS_V(x) ((x) << T5_ISS_S)
 +#define T5_ISS_F    T5_ISS_V(1U)
  
++=======
++>>>>>>> a84f0e1379d9 (cxgb4, iw_cxgb4: move definitions to common header file)
  #endif /* _T4FW_RI_API_H_ */
* Unmerged path drivers/infiniband/hw/cxgb4/t4fw_ri_api.h
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h b/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
index 22de86a60073..78b5b7b37833 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
@@ -344,6 +344,87 @@ struct cpl_pass_open_rpl {
 	u8 status;
 };
 
+struct tcp_options {
+	__be16 mss;
+	__u8 wsf;
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u8:4;
+	__u8 unknown:1;
+	__u8:1;
+	__u8 sack:1;
+	__u8 tstamp:1;
+#else
+	__u8 tstamp:1;
+	__u8 sack:1;
+	__u8:1;
+	__u8 unknown:1;
+	__u8:4;
+#endif
+};
+
+struct cpl_pass_accept_req {
+	union opcode_tid ot;
+	__be16 rsvd;
+	__be16 len;
+	__be32 hdr_len;
+	__be16 vlan;
+	__be16 l2info;
+	__be32 tos_stid;
+	struct tcp_options tcpopt;
+};
+
+/* cpl_pass_accept_req.hdr_len fields */
+#define SYN_RX_CHAN_S    0
+#define SYN_RX_CHAN_M    0xF
+#define SYN_RX_CHAN_V(x) ((x) << SYN_RX_CHAN_S)
+#define SYN_RX_CHAN_G(x) (((x) >> SYN_RX_CHAN_S) & SYN_RX_CHAN_M)
+
+#define TCP_HDR_LEN_S    10
+#define TCP_HDR_LEN_M    0x3F
+#define TCP_HDR_LEN_V(x) ((x) << TCP_HDR_LEN_S)
+#define TCP_HDR_LEN_G(x) (((x) >> TCP_HDR_LEN_S) & TCP_HDR_LEN_M)
+
+#define IP_HDR_LEN_S    16
+#define IP_HDR_LEN_M    0x3FF
+#define IP_HDR_LEN_V(x) ((x) << IP_HDR_LEN_S)
+#define IP_HDR_LEN_G(x) (((x) >> IP_HDR_LEN_S) & IP_HDR_LEN_M)
+
+#define ETH_HDR_LEN_S    26
+#define ETH_HDR_LEN_M    0x1F
+#define ETH_HDR_LEN_V(x) ((x) << ETH_HDR_LEN_S)
+#define ETH_HDR_LEN_G(x) (((x) >> ETH_HDR_LEN_S) & ETH_HDR_LEN_M)
+
+/* cpl_pass_accept_req.l2info fields */
+#define SYN_MAC_IDX_S    0
+#define SYN_MAC_IDX_M    0x1FF
+#define SYN_MAC_IDX_V(x) ((x) << SYN_MAC_IDX_S)
+#define SYN_MAC_IDX_G(x) (((x) >> SYN_MAC_IDX_S) & SYN_MAC_IDX_M)
+
+#define SYN_XACT_MATCH_S    9
+#define SYN_XACT_MATCH_V(x) ((x) << SYN_XACT_MATCH_S)
+#define SYN_XACT_MATCH_F    SYN_XACT_MATCH_V(1U)
+
+#define SYN_INTF_S    12
+#define SYN_INTF_M    0xF
+#define SYN_INTF_V(x) ((x) << SYN_INTF_S)
+#define SYN_INTF_G(x) (((x) >> SYN_INTF_S) & SYN_INTF_M)
+
+enum {                     /* TCP congestion control algorithms */
+	CONG_ALG_RENO,
+	CONG_ALG_TAHOE,
+	CONG_ALG_NEWRENO,
+	CONG_ALG_HIGHSPEED
+};
+
+#define CONG_CNTRL_S    14
+#define CONG_CNTRL_M    0x3
+#define CONG_CNTRL_V(x) ((x) << CONG_CNTRL_S)
+#define CONG_CNTRL_G(x) (((x) >> CONG_CNTRL_S) & CONG_CNTRL_M)
+
+#define T5_ISS_S    18
+#define T5_ISS_V(x) ((x) << T5_ISS_S)
+#define T5_ISS_F    T5_ISS_V(1U)
+
 struct cpl_pass_accept_rpl {
 	WR_HDR;
 	union opcode_tid ot;
