net: Add max rate tx queue attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] Add max rate tx queue attribute (Ivan Vecera) [1268334]
Rebuild_FUZZ: 92.54%
commit-author John Fastabend <john.r.fastabend@intel.com>
commit 822b3b2ebfff8e9b3d006086c527738a7ca00cd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/822b3b2e.failed

This adds a tx_maxrate attribute to the tx queue sysfs entry allowing
for max-rate limiting. Along with DCB-ETS and BQL this provides another
knob to tune queue performance. The limit units are Mbps.

By default it is disabled. To disable the rate limitation after it
has been set for a queue, it should be set to zero.

	Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 822b3b2ebfff8e9b3d006086c527738a7ca00cd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/net-sysfs.c
diff --cc include/linux/netdevice.h
index 7b10147de03d,76c5de4978a8..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1013,9 -1023,10 +1014,16 @@@ struct netdev_phys_port_id 
   *	be otherwise expressed by feature flags. The check is called with
   *	the set of features that the stack has calculated and it returns
   *	those the driver believes to be appropriate.
++<<<<<<< HEAD
 + *
 + * int (*ndo_set_vf_rate)(struct net_device *dev, int vf, int min_tx_rate,
 + *			  int max_tx_rate);
++=======
+  * int (*ndo_set_tx_maxrate)(struct net_device *dev,
+  *			     int queue_index, u32 maxrate);
+  *	Called when a user wants to set a max-rate limitation of specific
+  *	TX queue.
++>>>>>>> 822b3b2ebfff (net: Add max rate tx queue attribute)
   */
  struct net_device_ops {
  	int			(*ndo_init)(struct net_device *dev);
@@@ -1153,39 -1171,21 +1161,52 @@@
  						      sa_family_t sa_family,
  						      __be16 port);
  
 -	void*			(*ndo_dfwd_add_station)(struct net_device *pdev,
 -							struct net_device *dev);
 -	void			(*ndo_dfwd_del_station)(struct net_device *pdev,
 -							void *priv);
 -
 +	/* RHEL SPECIFIC
 +	 *
 +	 * The following padding has been inserted before ABI freeze to
 +	 * allow extending the structure while preserve ABI. Feel free
 +	 * to replace reserved slots with required structure field
 +	 * additions of your backport.
 +	 */
 +	RH_KABI_USE_P(1, int	(*ndo_get_iflink)(const struct net_device *dev))
 +	RH_KABI_USE_P(2, netdev_features_t
 +				(*ndo_features_check)(struct sk_buff *skb,
 +						      struct net_device *dev,
 +						      netdev_features_t features))
 +	RH_KABI_USE_P(3, int	(*ndo_set_vf_rate)(struct net_device *dev,
 +						   int vf, int min_tx_rate,
 +						   int max_tx_rate))
 +	RH_KABI_USE_P(4, int	(*ndo_get_vf_stats)(struct net_device *dev,
 +						    int vf,
 +						    struct ifla_vf_stats
 +						    *vf_stats))
 +	RH_KABI_USE_P(5, int    (*ndo_set_vf_rss_query_en)(struct net_device *dev,
 +							   int vf, bool setting))
 +
++<<<<<<< HEAD
 +	RH_KABI_RESERVE_P(6)
 +	RH_KABI_RESERVE_P(7)
 +	RH_KABI_RESERVE_P(8)
 +	RH_KABI_RESERVE_P(9)
 +	RH_KABI_RESERVE_P(10)
 +	RH_KABI_RESERVE_P(11)
 +	RH_KABI_RESERVE_P(12)
 +	RH_KABI_RESERVE_P(13)
 +	RH_KABI_RESERVE_P(14)
 +	RH_KABI_RESERVE_P(15)
 +	RH_KABI_RESERVE_P(16)
++=======
+ 	netdev_tx_t		(*ndo_dfwd_start_xmit) (struct sk_buff *skb,
+ 							struct net_device *dev,
+ 							void *priv);
+ 	int			(*ndo_get_lock_subclass)(struct net_device *dev);
+ 	netdev_features_t	(*ndo_features_check) (struct sk_buff *skb,
+ 						       struct net_device *dev,
+ 						       netdev_features_t features);
+ 	int			(*ndo_set_tx_maxrate)(struct net_device *dev,
+ 						      int queue_index,
+ 						      u32 maxrate);
++>>>>>>> 822b3b2ebfff (net: Add max rate tx queue attribute)
  };
  
  /**
diff --cc net/core/net-sysfs.c
index 5594a4cef283,7e58bd7ec232..000000000000
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@@ -1000,21 -1119,6 +1054,24 @@@ static struct attribute_group dql_grou
  #endif /* CONFIG_BQL */
  
  #ifdef CONFIG_XPS
++<<<<<<< HEAD
 +static inline unsigned int get_netdev_queue_index(struct netdev_queue *queue)
 +{
 +	struct net_device *dev = queue->dev;
 +	int i;
 +
 +	for (i = 0; i < dev->num_tx_queues; i++)
 +		if (queue == &dev->_tx[i])
 +			break;
 +
 +	BUG_ON(i >= dev->num_tx_queues);
 +
 +	return i;
 +}
 +
 +
++=======
++>>>>>>> 822b3b2ebfff (net: Add max rate tx queue attribute)
  static ssize_t show_xps_map(struct netdev_queue *queue,
  			    struct netdev_queue_attribute *attribute, char *buf)
  {
diff --git a/Documentation/ABI/testing/sysfs-class-net-queues b/Documentation/ABI/testing/sysfs-class-net-queues
index 5e9aeb91d355..0c0df91b1516 100644
--- a/Documentation/ABI/testing/sysfs-class-net-queues
+++ b/Documentation/ABI/testing/sysfs-class-net-queues
@@ -24,6 +24,14 @@ Description:
 		Indicates the number of transmit timeout events seen by this
 		network interface transmit queue.
 
+What:		/sys/class/<iface>/queues/tx-<queue>/tx_maxrate
+Date:		March 2015
+KernelVersion:	4.1
+Contact:	netdev@vger.kernel.org
+Description:
+		A Mbps max-rate set for the queue, a value of zero means disabled,
+		default is disabled.
+
 What:		/sys/class/<iface>/queues/tx-<queue>/xps_cpus
 Date:		November 2010
 KernelVersion:	2.6.38
diff --git a/Documentation/networking/scaling.txt b/Documentation/networking/scaling.txt
index 579994afbe06..636f430cd237 100644
--- a/Documentation/networking/scaling.txt
+++ b/Documentation/networking/scaling.txt
@@ -363,6 +363,15 @@ best CPUs to share a given queue are probably those that share the cache
 with the CPU that processes transmit completions for that queue
 (transmit interrupts).
 
+Per TX Queue rate limitation:
+=============================
+
+These are rate-limitation mechanisms implemented by HW, where currently
+a max-rate attribute is supported, by setting a Mbps value to
+
+/sys/class/net/<dev>/queues/tx-<n>/tx_maxrate
+
+A value of zero means disabled, and this is the default.
 
 Further Information
 ===================
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/net-sysfs.c
