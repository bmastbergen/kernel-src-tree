PCI: Remove unused pci_find_upstream_pcie_bridge()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alex Williamson <alex.williamson@redhat.com>
commit bee3f304435a9c8c70b135083e23516872a17c98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bee3f304.failed

pci_find_upstream_pcie_bridge() is unused, so remove it.

	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit bee3f304435a9c8c70b135083e23516872a17c98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index 92b63d104c6a,bf5a47c0cb42..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -1860,25 -1828,17 +1860,30 @@@ int pci_for_each_dma_alias(struct pci_d
  			   int (*fn)(struct pci_dev *pdev,
  				     u16 alias, void *data), void *data);
  
++<<<<<<< HEAD
 +/**
 + * pci_find_upstream_pcie_bridge - find upstream PCIe-to-PCI bridge of a device
 + * @pdev: the PCI device
 + *
 + * if the device is PCIE, return NULL
 + * if the device isn't connected to a PCIe bridge (that is its parent is a
 + * legacy PCI bridge and the bridge is directly connected to bus 0), return its
 + * parent
 + */
 +struct pci_dev *pci_find_upstream_pcie_bridge(struct pci_dev *pdev);
 +
 +/**
 + * pci_ari_enabled - query ARI forwarding status
 + * @bus: the PCI bus
 + *
 + * Returns true if ARI forwarding is enabled.
 + */
 +static inline bool pci_ari_enabled(struct pci_bus *bus)
++=======
+ /* helper functions for operation of device flag */
+ static inline void pci_set_dev_assigned(struct pci_dev *pdev)
++>>>>>>> bee3f304435a (PCI: Remove unused pci_find_upstream_pcie_bridge())
  {
 -	pdev->dev_flags |= PCI_DEV_FLAGS_ASSIGNED;
 -}
 -static inline void pci_clear_dev_assigned(struct pci_dev *pdev)
 -{
 -	pdev->dev_flags &= ~PCI_DEV_FLAGS_ASSIGNED;
 -}
 -static inline bool pci_is_dev_assigned(struct pci_dev *pdev)
 -{
 -	return (pdev->dev_flags & PCI_DEV_FLAGS_ASSIGNED) == PCI_DEV_FLAGS_ASSIGNED;
 +	return bus->self && bus->self->ari_enabled;
  }
  #endif /* LINUX_PCI_H */
diff --git a/drivers/pci/search.c b/drivers/pci/search.c
index 9f0453ad3cd8..a1a2785f771d 100644
--- a/drivers/pci/search.c
+++ b/drivers/pci/search.c
@@ -104,40 +104,6 @@ int pci_for_each_dma_alias(struct pci_dev *pdev,
 	return ret;
 }
 
-/*
- * find the upstream PCIe-to-PCI bridge of a PCI device
- * if the device is PCIE, return NULL
- * if the device isn't connected to a PCIe bridge (that is its parent is a
- * legacy PCI bridge and the bridge is directly connected to bus 0), return its
- * parent
- */
-struct pci_dev *pci_find_upstream_pcie_bridge(struct pci_dev *pdev)
-{
-	struct pci_dev *tmp = NULL;
-
-	if (pci_is_pcie(pdev))
-		return NULL;
-	while (1) {
-		if (pci_is_root_bus(pdev->bus))
-			break;
-		pdev = pdev->bus->self;
-		/* a p2p bridge */
-		if (!pci_is_pcie(pdev)) {
-			tmp = pdev;
-			continue;
-		}
-		/* PCI device should connect to a PCIe bridge */
-		if (pci_pcie_type(pdev) != PCI_EXP_TYPE_PCI_BRIDGE) {
-			/* Busted hardware? */
-			WARN_ON_ONCE(1);
-			return NULL;
-		}
-		return pdev;
-	}
-
-	return tmp;
-}
-
 static struct pci_bus *pci_do_find_bus(struct pci_bus *bus, unsigned char busnr)
 {
 	struct pci_bus *child;
* Unmerged path include/linux/pci.h
