kernel/watchdog: move NMI function header declarations from watchdog.h to nmi.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [kernel] watchdog: move NMI function header declarations from watchdog.h to nmi.h (David Arcari) [1290573]
Rebuild_FUZZ: 95.36%
commit-author Guenter Roeck <linux@roeck-us.net>
commit aacfbe6a9724bb6d66a656a5abcc681d5649ed92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/aacfbe6a.failed

The kernel's NMI watchdog has nothing to do with the watchdog subsystem.
Its header declarations should be in linux/nmi.h, not linux/watchdog.h.

The code provided two sets of dummy functions if HARDLOCKUP_DETECTOR is
not configured, one in the include file and one in kernel/watchdog.c.
Remove the dummy functions from kernel/watchdog.c and use those from the
include file.

	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Don Zickus <dzickus@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit aacfbe6a9724bb6d66a656a5abcc681d5649ed92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/nmi.h
diff --cc include/linux/nmi.h
index 6fe7c9ae7224,088714537d10..000000000000
--- a/include/linux/nmi.h
+++ b/include/linux/nmi.h
@@@ -25,16 -25,13 +25,26 @@@ static inline void touch_nmi_watchdog(v
  #endif
  
  #if defined(CONFIG_HARDLOCKUP_DETECTOR)
++<<<<<<< HEAD
 +extern void watchdog_enable_hardlockup_detector(bool val);
 +extern bool watchdog_hardlockup_detector_is_enabled(void);
 +#else
 +static inline void watchdog_enable_hardlockup_detector(bool val)
 +{
 +}
 +static inline bool watchdog_hardlockup_detector_is_enabled(void)
 +{
 +	return true;
 +}
++=======
+ extern void hardlockup_detector_disable(void);
+ void watchdog_nmi_disable_all(void);
+ void watchdog_nmi_enable_all(void);
+ #else
+ static inline void hardlockup_detector_disable(void) {}
+ static inline void watchdog_nmi_disable_all(void) {}
+ static inline void watchdog_nmi_enable_all(void) {}
++>>>>>>> aacfbe6a9724 (kernel/watchdog: move NMI function header declarations from watchdog.h to nmi.h)
  #endif
  
  /*
diff --git a/arch/x86/kernel/cpu/perf_event_intel.c b/arch/x86/kernel/cpu/perf_event_intel.c
index d4cfd53179e2..e464ac903303 100644
--- a/arch/x86/kernel/cpu/perf_event_intel.c
+++ b/arch/x86/kernel/cpu/perf_event_intel.c
@@ -12,7 +12,7 @@
 #include <linux/init.h>
 #include <linux/slab.h>
 #include <linux/export.h>
-#include <linux/watchdog.h>
+#include <linux/nmi.h>
 
 #include <asm/cpufeature.h>
 #include <asm/hardirq.h>
* Unmerged path include/linux/nmi.h
diff --git a/include/linux/watchdog.h b/include/linux/watchdog.h
index 61cf4c950bdc..2a3038ee17a3 100644
--- a/include/linux/watchdog.h
+++ b/include/linux/watchdog.h
@@ -142,12 +142,4 @@ extern int watchdog_init_timeout(struct watchdog_device *wdd,
 extern int watchdog_register_device(struct watchdog_device *);
 extern void watchdog_unregister_device(struct watchdog_device *);
 
-#ifdef CONFIG_HARDLOCKUP_DETECTOR
-void watchdog_nmi_disable_all(void);
-void watchdog_nmi_enable_all(void);
-#else
-static inline void watchdog_nmi_disable_all(void) {}
-static inline void watchdog_nmi_enable_all(void) {}
-#endif
-
 #endif  /* ifndef _LINUX_WATCHDOG_H */
diff --git a/kernel/watchdog.c b/kernel/watchdog.c
index dcf494ad4e30..e12616dd310b 100644
--- a/kernel/watchdog.c
+++ b/kernel/watchdog.c
@@ -659,8 +659,6 @@ unlock:
 #else
 static int watchdog_nmi_enable(unsigned int cpu) { return 0; }
 static void watchdog_nmi_disable(unsigned int cpu) { return; }
-void watchdog_nmi_enable_all(void) {}
-void watchdog_nmi_disable_all(void) {}
 #endif /* CONFIG_HARDLOCKUP_DETECTOR */
 
 static struct smp_hotplug_thread watchdog_threads = {
