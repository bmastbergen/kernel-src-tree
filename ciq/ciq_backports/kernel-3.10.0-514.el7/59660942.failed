perf thread_map: Add thread_map__new_event function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 59660942397b57b37eccba014544623cf4beb12b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/59660942.failed

Introducing the thread_map__new_event function to create a struct
thread_map object from a thread_map event.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Kan Liang <kan.liang@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1445784728-21732-6-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 59660942397b57b37eccba014544623cf4beb12b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/thread-map.c
diff --cc tools/perf/tests/thread-map.c
index 138a0e3431fa,fccde848fe9c..000000000000
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@@ -40,3 -40,46 +40,49 @@@ int test__thread_map(void
  	thread_map__put(map);
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ static int process_event(struct perf_tool *tool __maybe_unused,
+ 			 union perf_event *event,
+ 			 struct perf_sample *sample __maybe_unused,
+ 			 struct machine *machine __maybe_unused)
+ {
+ 	struct thread_map_event *map = &event->thread_map;
+ 	struct thread_map *threads;
+ 
+ 	TEST_ASSERT_VAL("wrong nr",   map->nr == 1);
+ 	TEST_ASSERT_VAL("wrong pid",  map->entries[0].pid == (u64) getpid());
+ 	TEST_ASSERT_VAL("wrong comm", !strcmp(map->entries[0].comm, "perf"));
+ 
+ 	threads = thread_map__new_event(&event->thread_map);
+ 	TEST_ASSERT_VAL("failed to alloc map", threads);
+ 
+ 	TEST_ASSERT_VAL("wrong nr", threads->nr == 1);
+ 	TEST_ASSERT_VAL("wrong pid",
+ 			thread_map__pid(threads, 0) == getpid());
+ 	TEST_ASSERT_VAL("wrong comm",
+ 			thread_map__comm(threads, 0) &&
+ 			!strcmp(thread_map__comm(threads, 0), "perf"));
+ 	TEST_ASSERT_VAL("wrong refcnt",
+ 			atomic_read(&threads->refcnt) == 1);
+ 	thread_map__put(threads);
+ 	return 0;
+ }
+ 
+ int test__thread_map_synthesize(int subtest __maybe_unused)
+ {
+ 	struct thread_map *threads;
+ 
+ 	/* test map on current pid */
+ 	threads = thread_map__new_by_pid(getpid());
+ 	TEST_ASSERT_VAL("failed to alloc map", threads);
+ 
+ 	thread_map__read_comms(threads);
+ 
+ 	TEST_ASSERT_VAL("failed to synthesize map",
+ 		!perf_event__synthesize_thread_map2(NULL, threads, process_event, NULL));
+ 
+ 	return 0;
+ }
++>>>>>>> 59660942397b (perf thread_map: Add thread_map__new_event function)
* Unmerged path tools/perf/tests/thread-map.c
diff --git a/tools/perf/util/thread_map.c b/tools/perf/util/thread_map.c
index 371fb28fe5b1..08afc6909953 100644
--- a/tools/perf/util/thread_map.c
+++ b/tools/perf/util/thread_map.c
@@ -13,6 +13,7 @@
 #include "thread_map.h"
 #include "util.h"
 #include "debug.h"
+#include "event.h"
 
 /* Skip "." and ".." directories */
 static int filter(const struct dirent *dir)
@@ -409,3 +410,29 @@ void thread_map__read_comms(struct thread_map *threads)
 	for (i = 0; i < threads->nr; ++i)
 		comm_init(threads, i);
 }
+
+static void thread_map__copy_event(struct thread_map *threads,
+				   struct thread_map_event *event)
+{
+	unsigned i;
+
+	threads->nr = (int) event->nr;
+
+	for (i = 0; i < event->nr; i++) {
+		thread_map__set_pid(threads, i, (pid_t) event->entries[i].pid);
+		threads->map[i].comm = strndup(event->entries[i].comm, 16);
+	}
+
+	atomic_set(&threads->refcnt, 1);
+}
+
+struct thread_map *thread_map__new_event(struct thread_map_event *event)
+{
+	struct thread_map *threads;
+
+	threads = thread_map__alloc(event->nr);
+	if (threads)
+		thread_map__copy_event(threads, event);
+
+	return threads;
+}
diff --git a/tools/perf/util/thread_map.h b/tools/perf/util/thread_map.h
index af679d8a50f8..85e4c7c4fbde 100644
--- a/tools/perf/util/thread_map.h
+++ b/tools/perf/util/thread_map.h
@@ -16,11 +16,14 @@ struct thread_map {
 	struct thread_map_data map[];
 };
 
+struct thread_map_event;
+
 struct thread_map *thread_map__new_dummy(void);
 struct thread_map *thread_map__new_by_pid(pid_t pid);
 struct thread_map *thread_map__new_by_tid(pid_t tid);
 struct thread_map *thread_map__new_by_uid(uid_t uid);
 struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
+struct thread_map *thread_map__new_event(struct thread_map_event *event);
 
 struct thread_map *thread_map__get(struct thread_map *map);
 void thread_map__put(struct thread_map *map);
