x86, CPU: Fix trivial printk formatting issues with dmesg

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] cpu: Fix trivial printk formatting issues with dmesg (Stanislav Kozina) [1232441]
Rebuild_FUZZ: 95.41%
commit-author Steven Honeyman <stevenhoneyman@gmail.com>
commit f94fe119f2e53362a3038ee856fa58412f728bc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f94fe119.failed

dmesg (from util-linux) currently has two methods for reading the kernel
message ring buffer: /dev/kmsg and syslog(2). Since kernel 3.5.0 kmsg
has been the default, which escapes control characters (e.g. new lines)
before they are shown.

This change means that when dmesg is using /dev/kmsg, a 2 line printk
makes the output messy, because the second line does not get a
timestamp.

For example:

[    0.012863] CPU0: Thermal monitoring enabled (TM1)
[    0.012869] Last level iTLB entries: 4KB 1024, 2MB 1024, 4MB 1024
Last level dTLB entries: 4KB 1024, 2MB 1024, 4MB 1024, 1GB 4
[    0.012958] Freeing SMP alternatives memory: 28K (ffffffff81d86000 - ffffffff81d8d000)
[    0.014961] dmar: Host address width 39

Because printk.c intentionally escapes control characters, they should
not be there in the first place. This patch fixes two occurrences of
this.

	Signed-off-by: Steven Honeyman <stevenhoneyman@gmail.com>
Link: https://lkml.kernel.org/r/1414856696-8094-1-git-send-email-stevenhoneyman@gmail.com
[ Boris: make cpu_detect_tlb() static, while at it. ]
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit f94fe119f2e53362a3038ee856fa58412f728bc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/kernel/cpu/common.c
index b7f07b3beff8,4973d6308938..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -481,27 -489,20 +481,37 @@@ u16 __read_mostly tlb_lli_4m[NR_INFO]
  u16 __read_mostly tlb_lld_4k[NR_INFO];
  u16 __read_mostly tlb_lld_2m[NR_INFO];
  u16 __read_mostly tlb_lld_4m[NR_INFO];
 -u16 __read_mostly tlb_lld_1g[NR_INFO];
 +
 +/*
 + * tlb_flushall_shift shows the balance point in replacing cr3 write
 + * with multiple 'invlpg'. It will do this replacement when
 + *   flush_tlb_lines <= active_lines/2^tlb_flushall_shift.
 + * If tlb_flushall_shift is -1, means the replacement will be disabled.
 + */
 +s8  __read_mostly tlb_flushall_shift = -1;
  
- void cpu_detect_tlb(struct cpuinfo_x86 *c)
+ static void cpu_detect_tlb(struct cpuinfo_x86 *c)
  {
  	if (this_cpu->c_detect_tlb)
  		this_cpu->c_detect_tlb(c);
  
++<<<<<<< HEAD
 +	printk(KERN_INFO "Last level iTLB entries: 4KB %d, 2MB %d, 4MB %d\n" \
 +		"Last level dTLB entries: 4KB %d, 2MB %d, 4MB %d\n"	     \
 +		"tlb_flushall_shift: %d\n",
 +		tlb_lli_4k[ENTRIES], tlb_lli_2m[ENTRIES],
 +		tlb_lli_4m[ENTRIES], tlb_lld_4k[ENTRIES],
 +		tlb_lld_2m[ENTRIES], tlb_lld_4m[ENTRIES],
 +		tlb_flushall_shift);
++=======
+ 	pr_info("Last level iTLB entries: 4KB %d, 2MB %d, 4MB %d\n",
+ 		tlb_lli_4k[ENTRIES], tlb_lli_2m[ENTRIES],
+ 		tlb_lli_4m[ENTRIES]);
+ 
+ 	pr_info("Last level dTLB entries: 4KB %d, 2MB %d, 4MB %d, 1GB %d\n",
+ 		tlb_lld_4k[ENTRIES], tlb_lld_2m[ENTRIES],
+ 		tlb_lld_4m[ENTRIES], tlb_lld_1g[ENTRIES]);
++>>>>>>> f94fe119f2e5 (x86, CPU: Fix trivial printk formatting issues with dmesg)
  }
  
  void detect_ht(struct cpuinfo_x86 *c)
* Unmerged path arch/x86/kernel/cpu/common.c
diff --git a/arch/x86/kernel/cpu/intel.c b/arch/x86/kernel/cpu/intel.c
index d471d849d819..dab73c0211cc 100644
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@ -461,10 +461,8 @@ static void init_intel(struct cpuinfo_x86 *c)
 
 		rdmsrl(MSR_IA32_ENERGY_PERF_BIAS, epb);
 		if ((epb & 0xF) == ENERGY_PERF_BIAS_PERFORMANCE) {
-			printk_once(KERN_WARNING "ENERGY_PERF_BIAS:"
-				" Set to 'normal', was 'performance'\n"
-				"ENERGY_PERF_BIAS: View and update with"
-				" x86_energy_perf_policy(8)\n");
+			pr_warn_once("ENERGY_PERF_BIAS: Set to 'normal', was 'performance'\n");
+			pr_warn_once("ENERGY_PERF_BIAS: View and update with x86_energy_perf_policy(8)\n");
 			epb = (epb & ~0xF) | ENERGY_PERF_BIAS_NORMAL;
 			wrmsrl(MSR_IA32_ENERGY_PERF_BIAS, epb);
 		}
