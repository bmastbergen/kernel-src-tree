Btrfs: reserve space for block groups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Josef Bacik <jbacik@fb.com>
commit cb723e491955ac11a1591ae25cada7c3b1470609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/cb723e49.failed

This changes our delayed refs calculations to include the space needed
to write back dirty block groups.

	Signed-off-by: Chris Mason <clm@fb.com>
(cherry picked from commit cb723e491955ac11a1591ae25cada7c3b1470609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/extent-tree.c
diff --cc fs/btrfs/extent-tree.c
index 86d1e1b51efa,ae8db3ba467c..000000000000
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@@ -2631,7 -2656,9 +2631,13 @@@ int btrfs_check_space_for_delayed_refs(
  {
  	struct btrfs_block_rsv *global_rsv;
  	u64 num_heads = trans->transaction->delayed_refs.num_heads_ready;
++<<<<<<< HEAD
 +	u64 num_bytes;
++=======
+ 	u64 csum_bytes = trans->transaction->delayed_refs.pending_csums;
+ 	u64 num_dirty_bgs = trans->transaction->num_dirty_bgs;
+ 	u64 num_bytes, num_dirty_bgs_bytes;
++>>>>>>> cb723e491955 (Btrfs: reserve space for block groups)
  	int ret = 0;
  
  	num_bytes = btrfs_calc_trans_metadata_size(root, 1);
@@@ -2639,6 -2666,9 +2645,12 @@@
  	if (num_heads > 1)
  		num_bytes += (num_heads - 1) * root->nodesize;
  	num_bytes <<= 1;
++<<<<<<< HEAD
++=======
+ 	num_bytes += btrfs_csum_bytes_to_leaves(root, csum_bytes) * root->nodesize;
+ 	num_dirty_bgs_bytes = btrfs_calc_trans_metadata_size(root,
+ 							     num_dirty_bgs);
++>>>>>>> cb723e491955 (Btrfs: reserve space for block groups)
  	global_rsv = &root->fs_info->global_block_rsv;
  
  	/*
* Unmerged path fs/btrfs/extent-tree.c
diff --git a/fs/btrfs/transaction.c b/fs/btrfs/transaction.c
index e658864f4698..40908ef887ab 100644
--- a/fs/btrfs/transaction.c
+++ b/fs/btrfs/transaction.c
@@ -247,6 +247,7 @@ loop:
 	INIT_LIST_HEAD(&cur_trans->switch_commits);
 	INIT_LIST_HEAD(&cur_trans->pending_ordered);
 	INIT_LIST_HEAD(&cur_trans->dirty_bgs);
+	cur_trans->num_dirty_bgs = 0;
 	spin_lock_init(&cur_trans->dirty_bgs_lock);
 	list_add_tail(&cur_trans->list, &fs_info->trans_list);
 	extent_io_tree_init(&cur_trans->dirty_pages,
diff --git a/fs/btrfs/transaction.h b/fs/btrfs/transaction.h
index 937050a2b68e..5302fda7ae47 100644
--- a/fs/btrfs/transaction.h
+++ b/fs/btrfs/transaction.h
@@ -64,6 +64,7 @@ struct btrfs_transaction {
 	struct list_head pending_ordered;
 	struct list_head switch_commits;
 	struct list_head dirty_bgs;
+	u64 num_dirty_bgs;
 	spinlock_t dirty_bgs_lock;
 	struct btrfs_delayed_ref_root delayed_refs;
 	int aborted;
