ceph: tolerate bad i_size for symlink inode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Yan, Zheng <zyan@redhat.com>
commit 224a7542b8fdde3cc7c600f8b0870c5541a9f678
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/224a7542.failed

A mds bug can cause symlink's size to be truncated to zero.

	Signed-off-by: Yan, Zheng <zyan@redhat.com>
(cherry picked from commit 224a7542b8fdde3cc7c600f8b0870c5541a9f678)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/inode.c
diff --cc fs/ceph/inode.c
index 1c8ca63373c4,89d08155986d..000000000000
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@@ -538,8 -604,12 +543,17 @@@ int ceph_fill_file_size(struct inode *i
  	if (ceph_seq_cmp(truncate_seq, ci->i_truncate_seq) > 0 ||
  	    (truncate_seq == ci->i_truncate_seq && size > inode->i_size)) {
  		dout("size %lld -> %llu\n", inode->i_size, size);
++<<<<<<< HEAD
 +		inode->i_size = size;
 +		inode->i_blocks = (size + (1<<9) - 1) >> 9;
++=======
+ 		if (size > 0 && S_ISDIR(inode->i_mode)) {
+ 			pr_err("fill_file_size non-zero size for directory\n");
+ 			size = 0;
+ 		}
+ 		i_size_write(inode, size);
+ 		inode->i_blocks = calc_inode_blocks(size);
++>>>>>>> 224a7542b8fd (ceph: tolerate bad i_size for symlink inode)
  		ci->i_reported_size = size;
  		if (truncate_seq != ci->i_truncate_seq) {
  			dout("truncate_seq %u -> %u\n",
@@@ -791,9 -868,13 +805,19 @@@ static int fill_inode(struct inode *ino
  
  			spin_unlock(&ci->i_ceph_lock);
  
++<<<<<<< HEAD
 +			err = -EINVAL;
 +			if (WARN_ON(symlen != inode->i_size))
 +				goto out;
++=======
+ 			if (symlen != i_size_read(inode)) {
+ 				pr_err("fill_inode %llx.%llx BAD symlink "
+ 					"size %lld\n", ceph_vinop(inode),
+ 					i_size_read(inode));
+ 				i_size_write(inode, symlen);
+ 				inode->i_blocks = calc_inode_blocks(symlen);
+ 			}
++>>>>>>> 224a7542b8fd (ceph: tolerate bad i_size for symlink inode)
  
  			err = -ENOMEM;
  			sym = kstrndup(iinfo->symlink, symlen, GFP_NOFS);
@@@ -1476,8 -1637,8 +1500,13 @@@ int ceph_inode_set_size(struct inode *i
  
  	spin_lock(&ci->i_ceph_lock);
  	dout("set_size %p %llu -> %llu\n", inode, inode->i_size, size);
++<<<<<<< HEAD
 +	inode->i_size = size;
 +	inode->i_blocks = (size + (1 << 9) - 1) >> 9;
++=======
+ 	i_size_write(inode, size);
+ 	inode->i_blocks = calc_inode_blocks(size);
++>>>>>>> 224a7542b8fd (ceph: tolerate bad i_size for symlink inode)
  
  	/* tell the MDS if we are approaching max_size */
  	if ((size << 1) >= ci->i_max_size &&
@@@ -1837,9 -2010,8 +1866,14 @@@ int ceph_setattr(struct dentry *dentry
  		     inode->i_size, attr->ia_size);
  		if ((issued & CEPH_CAP_FILE_EXCL) &&
  		    attr->ia_size > inode->i_size) {
++<<<<<<< HEAD
 +			inode->i_size = attr->ia_size;
 +			inode->i_blocks =
 +				(attr->ia_size + (1 << 9) - 1) >> 9;
++=======
+ 			i_size_write(inode, attr->ia_size);
+ 			inode->i_blocks = calc_inode_blocks(attr->ia_size);
++>>>>>>> 224a7542b8fd (ceph: tolerate bad i_size for symlink inode)
  			inode->i_ctime = attr->ia_ctime;
  			ci->i_reported_size = attr->ia_size;
  			dirtied |= CEPH_CAP_FILE_EXCL;
* Unmerged path fs/ceph/inode.c
