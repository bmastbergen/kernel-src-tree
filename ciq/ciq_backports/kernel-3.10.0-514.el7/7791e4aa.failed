cpufreq: intel_pstate: Enable HWP by default

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Enable HWP by default (David Arcari) [1258085]
Rebuild_FUZZ: 88.61%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit 7791e4aa59ad724e0b4c8b4dea547a5735108972
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7791e4aa.failed

If the processor supports HWP, enable it by default without checking
for the cpu model. This will allow to enable HWP in all supported
processors without driver change.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 7791e4aa59ad724e0b4c8b4dea547a5735108972)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 69c31898403f,ebe8506ba285..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1247,17 -1424,10 +1258,21 @@@ static int __init intel_pstate_init(voi
  	if (!id)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	/*
 +	 * The Intel pstate driver will be ignored if the platform
 +	 * firmware has its own power management modes.
 +	 */
 +	if (intel_pstate_platform_pwr_mgmt_exists())
 +		return -ENODEV;
 +
 +	cpu_info = (struct cpu_defaults *)id->driver_data;
++=======
+ 	cpu_def = (struct cpu_defaults *)id->driver_data;
++>>>>>>> 7791e4aa59ad (cpufreq: intel_pstate: Enable HWP by default)
  
 -	copy_pid_params(&cpu_def->pid_policy);
 -	copy_cpu_funcs(&cpu_def->funcs);
 +	copy_pid_params(&cpu_info->pid_policy);
 +	copy_cpu_funcs(&cpu_info->funcs);
  
  	if (intel_pstate_msrs_not_valid())
  		return -ENODEV;
@@@ -1268,19 -1446,6 +1291,22 @@@ hwp_cpu_matched
  	if (!all_cpu_data)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	/*
 +	 * RHEL7: We are having issues with the Skylake-S hanging
 +	 * when HWP is enabled so check for Skylake-S and
 +	 * disable HWP if found
 +	 */
 +	if (x86_match_cpu(hwp_quirk_cpu_ids)) {
 +		pr_info("intel_pstate Skylake-S detected. disabling HWP\n");
 +		no_hwp = 1;
 +	}
 +
 +	if (cpu_has(c,X86_FEATURE_HWP) && !no_hwp)
 +		intel_pstate_hwp_enable();
 +
++=======
++>>>>>>> 7791e4aa59ad (cpufreq: intel_pstate: Enable HWP by default)
  	if (!hwp_active && hwp_only)
  		goto out;
  
* Unmerged path drivers/cpufreq/intel_pstate.c
