usb: phy: rename usb_nop_xceiv to usb_phy_generic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Felipe Balbi <balbi@ti.com>
commit 4525beeb9aadbb9e1cb3e9e135f4371553f26a70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4525beeb.failed

no functional changes, just renaming the function
in order to make it slightly clearer what it should
be used for, also matching the driver name.

	Signed-off-by: Felipe Balbi <balbi@ti.com>
(cherry picked from commit 4525beeb9aadbb9e1cb3e9e135f4371553f26a70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/mach-omap2/usb-host.c
#	drivers/usb/dwc3/dwc3-exynos.c
#	drivers/usb/dwc3/dwc3-pci.c
#	drivers/usb/phy/phy-am335x.c
#	drivers/usb/phy/phy-generic.h
#	drivers/usb/phy/phy-keystone.c
#	drivers/usb/phy/phy-nop.c
#	include/linux/usb/nop-usb-xceiv.h
diff --cc arch/arm/mach-omap2/usb-host.c
index aa27d7f5cbb7,ab983cdd3edf..000000000000
--- a/arch/arm/mach-omap2/usb-host.c
+++ b/arch/arm/mach-omap2/usb-host.c
@@@ -542,7 -349,7 +542,11 @@@ static struct fixed_voltage_config hsus
  	/* .init_data filled later */
  };
  
++<<<<<<< HEAD
 +static const char *nop_name = "nop_usb_xceiv"; /* NOP PHY driver */
++=======
+ static const char *nop_name = "usb_phy_generic"; /* NOP PHY driver */
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  static const char *reg_name = "reg-fixed-voltage"; /* Regulator driver */
  
  /**
@@@ -604,15 -418,24 +608,20 @@@ static int usbhs_add_regulator(char *na
  	return ret;
  }
  
 -#define MAX_STR 20
 -
  int usbhs_init_phys(struct usbhs_phy_data *phy, int num_phys)
  {
 -	char rail_name[MAX_STR];
 -	int i;
 +	char *rail_name;
 +	int i, len;
  	struct platform_device *pdev;
  	char *phy_id;
++<<<<<<< HEAD
 +
 +	/* the phy_id will be something like "nop_usb_xceiv.1" */
 +	len = strlen(nop_name) + 3; /* 3 -> ".1" and NULL terminator */
++=======
+ 	struct platform_device_info pdevinfo;
+ 	struct usb_phy_generic_platform_data nop_pdata;
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  
  	for (i = 0; i < num_phys; i++) {
  
@@@ -627,25 -450,33 +636,41 @@@
  			!gpio_is_valid(phy->vcc_gpio))
  			continue;
  
 -		phy_id = kmalloc(MAX_STR, GFP_KERNEL);
 -		if (!phy_id) {
 -			pr_err("%s: kmalloc() failed\n", __func__);
 +		/* create a NOP PHY device */
++<<<<<<< HEAD
 +		pdev = kzalloc(sizeof(*pdev), GFP_KERNEL);
 +		if (!pdev)
  			return -ENOMEM;
 -		}
  
 -		/* set platform data */
 -		memset(&nop_pdata, 0, sizeof(nop_pdata));
 -		if (gpio_is_valid(phy->vcc_gpio))
 -			nop_pdata.needs_vcc = true;
 -		nop_pdata.gpio_reset = phy->reset_gpio;
 -		nop_pdata.type = USB_PHY_TYPE_USB2;
 +		pdev->id = phy->port;
 +		pdev->name = nop_name;
 +		pdev->dev.platform_data = phy->platform_data;
  
 -		/* create a NOP PHY device */
 +		phy_id = kmalloc(len, GFP_KERNEL);
 +		if (!phy_id)
 +			return -ENOMEM;
 +
 +		scnprintf(phy_id, len, "nop_usb_xceiv.%d\n",
 +					pdev->id);
 +
 +		if (platform_device_register(pdev)) {
 +			pr_err("%s: Failed to register device %s\n",
 +				__func__,  phy_id);
++=======
+ 		memset(&pdevinfo, 0, sizeof(pdevinfo));
+ 		pdevinfo.name = nop_name;
+ 		pdevinfo.id = phy->port;
+ 		pdevinfo.data = &nop_pdata;
+ 		pdevinfo.size_data =
+ 			sizeof(struct usb_phy_generic_platform_data);
+ 		scnprintf(phy_id, MAX_STR, "usb_phy_generic.%d",
+ 					phy->port);
+ 		pdev = platform_device_register_full(&pdevinfo);
+ 		if (IS_ERR(pdev)) {
+ 			pr_err("%s: Failed to register device %s : %ld\n",
+ 				__func__,  phy_id, PTR_ERR(pdev));
+ 			kfree(phy_id);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  			continue;
  		}
  
diff --cc drivers/usb/dwc3/dwc3-exynos.c
index 8ce9d7fd6cfc,821cc59e6e1d..000000000000
--- a/drivers/usb/dwc3/dwc3-exynos.c
+++ b/drivers/usb/dwc3/dwc3-exynos.c
@@@ -34,13 -38,13 +34,21 @@@ struct dwc3_exynos 
  
  static int dwc3_exynos_register_phys(struct dwc3_exynos *exynos)
  {
++<<<<<<< HEAD
 +	struct nop_usb_xceiv_platform_data pdata;
++=======
+ 	struct usb_phy_generic_platform_data pdata;
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  	struct platform_device	*pdev;
  	int			ret;
  
  	memset(&pdata, 0x00, sizeof(pdata));
  
++<<<<<<< HEAD
 +	pdev = platform_device_alloc("nop_usb_xceiv", PLATFORM_DEVID_AUTO);
++=======
+ 	pdev = platform_device_alloc("usb_phy_generic", PLATFORM_DEVID_AUTO);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  	if (!pdev)
  		return -ENOMEM;
  
@@@ -51,7 -56,7 +59,11 @@@
  	if (ret)
  		goto err1;
  
++<<<<<<< HEAD
 +	pdev = platform_device_alloc("nop_usb_xceiv", PLATFORM_DEVID_AUTO);
++=======
+ 	pdev = platform_device_alloc("usb_phy_generic", PLATFORM_DEVID_AUTO);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  	if (!pdev) {
  		ret = -ENOMEM;
  		goto err1;
diff --cc drivers/usb/dwc3/dwc3-pci.c
index fc404193b22e,8b162f0e293c..000000000000
--- a/drivers/usb/dwc3/dwc3-pci.c
+++ b/drivers/usb/dwc3/dwc3-pci.c
@@@ -60,13 -40,13 +60,21 @@@ struct dwc3_pci 
  
  static int dwc3_pci_register_phys(struct dwc3_pci *glue)
  {
++<<<<<<< HEAD
 +	struct nop_usb_xceiv_platform_data pdata;
++=======
+ 	struct usb_phy_generic_platform_data pdata;
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  	struct platform_device	*pdev;
  	int			ret;
  
  	memset(&pdata, 0x00, sizeof(pdata));
  
++<<<<<<< HEAD
 +	pdev = platform_device_alloc("nop_usb_xceiv", 0);
++=======
+ 	pdev = platform_device_alloc("usb_phy_generic", 0);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  	if (!pdev)
  		return -ENOMEM;
  
@@@ -77,7 -58,7 +85,11 @@@
  	if (ret)
  		goto err1;
  
++<<<<<<< HEAD
 +	pdev = platform_device_alloc("nop_usb_xceiv", 1);
++=======
+ 	pdev = platform_device_alloc("usb_phy_generic", 1);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic)
  	if (!pdev) {
  		ret = -ENOMEM;
  		goto err1;
diff --cc drivers/usb/phy/phy-nop.c
index 638cc5dade35,e76ca4ca3a8a..000000000000
--- a/drivers/usb/phy/phy-nop.c
+++ b/drivers/usb/phy/phy-nop.c
@@@ -50,29 -47,47 +50,67 @@@ void usb_phy_generic_register(void
  {
  	if (pd)
  		return;
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +	pd = platform_device_register_simple("nop_usb_xceiv", -1, NULL, 0);
 +	if (!pd) {
 +		printk(KERN_ERR "Unable to register usb nop transceiver\n");
 +		return;
 +	}
 +}
 +EXPORT_SYMBOL(usb_nop_xceiv_register);
++=======
+ 	pd = platform_device_register_simple("usb_phy_generic", -1, NULL, 0);
+ 	if (IS_ERR(pd)) {
+ 		pr_err("Unable to register generic usb transceiver\n");
+ 		pd = NULL;
+ 		return;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(usb_phy_generic_register);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  
- void usb_nop_xceiv_unregister(void)
+ void usb_phy_generic_unregister(void)
  {
  	platform_device_unregister(pd);
  	pd = NULL;
  }
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +EXPORT_SYMBOL(usb_nop_xceiv_unregister);
++=======
+ EXPORT_SYMBOL_GPL(usb_phy_generic_unregister);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  
  static int nop_set_suspend(struct usb_phy *x, int suspend)
  {
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +static int nop_init(struct usb_phy *phy)
 +{
 +	struct nop_usb_xceiv *nop = dev_get_drvdata(phy->dev);
++=======
+ static void nop_reset_set(struct usb_phy_generic *nop, int asserted)
+ {
+ 	int value;
+ 
+ 	if (!gpio_is_valid(nop->gpio_reset))
+ 		return;
+ 
+ 	value = asserted;
+ 	if (nop->reset_active_low)
+ 		value = !value;
+ 
+ 	gpio_set_value_cansleep(nop->gpio_reset, value);
+ 
+ 	if (!asserted)
+ 		usleep_range(10000, 20000);
+ }
+ 
+ int usb_gen_phy_init(struct usb_phy *phy)
+ {
+ 	struct usb_phy_generic *nop = dev_get_drvdata(phy->dev);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  
  	if (!IS_ERR(nop->vcc)) {
  		if (regulator_enable(nop->vcc))
@@@ -90,19 -102,17 +128,23 @@@
  
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(usb_gen_phy_init);
  
 -void usb_gen_phy_shutdown(struct usb_phy *phy)
 +static void nop_shutdown(struct usb_phy *phy)
  {
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +	struct nop_usb_xceiv *nop = dev_get_drvdata(phy->dev);
++=======
+ 	struct usb_phy_generic *nop = dev_get_drvdata(phy->dev);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  
 -	/* Assert RESET */
 -	nop_reset_set(nop, 1);
 +	if (!IS_ERR(nop->reset)) {
 +		/* Assert RESET */
 +		if (regulator_disable(nop->reset))
 +			dev_err(phy->dev, "Failed to assert reset\n");
 +	}
  
  	if (!IS_ERR(nop->clk))
 -		clk_disable_unprepare(nop->clk);
 +		clk_disable(nop->clk);
  
  	if (!IS_ERR(nop->vcc)) {
  		if (regulator_disable(nop->vcc))
@@@ -139,25 -150,16 +181,30 @@@ static int nop_set_host(struct usb_otg 
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +static int nop_usb_xceiv_probe(struct platform_device *pdev)
++=======
+ int usb_phy_gen_create_phy(struct device *dev, struct usb_phy_generic *nop,
+ 		struct usb_phy_generic_platform_data *pdata)
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  {
 -	enum usb_phy_type type = USB_PHY_TYPE_USB2;
 +	struct device *dev = &pdev->dev;
 +	struct nop_usb_xceiv_platform_data *pdata = pdev->dev.platform_data;
 +	struct nop_usb_xceiv	*nop;
 +	enum usb_phy_type	type = USB_PHY_TYPE_USB2;
  	int err;
 -
  	u32 clk_rate = 0;
  	bool needs_vcc = false;
 +	bool needs_reset = false;
  
 -	nop->reset_active_low = true;	/* default behaviour */
 +	nop = devm_kzalloc(&pdev->dev, sizeof(*nop), GFP_KERNEL);
 +	if (!nop)
 +		return -ENOMEM;
 +
 +	nop->phy.otg = devm_kzalloc(&pdev->dev, sizeof(*nop->phy.otg),
 +							GFP_KERNEL);
 +	if (!nop->phy.otg)
 +		return -ENOMEM;
  
  	if (dev->of_node) {
  		struct device_node *node = dev->of_node;
@@@ -226,6 -241,27 +273,30 @@@
  	nop->phy.otg->set_host		= nop_set_host;
  	nop->phy.otg->set_peripheral	= nop_set_peripheral;
  
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
++=======
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(usb_phy_gen_create_phy);
+ 
+ static int usb_phy_generic_probe(struct platform_device *pdev)
+ {
+ 	struct device *dev = &pdev->dev;
+ 	struct usb_phy_generic	*nop;
+ 	int err;
+ 
+ 	nop = devm_kzalloc(dev, sizeof(*nop), GFP_KERNEL);
+ 	if (!nop)
+ 		return -ENOMEM;
+ 
+ 	err = usb_phy_gen_create_phy(dev, nop, dev_get_platdata(&pdev->dev));
+ 	if (err)
+ 		return err;
+ 
+ 	nop->phy.init		= usb_gen_phy_init;
+ 	nop->phy.shutdown	= usb_gen_phy_shutdown;
+ 
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  	err = usb_add_phy_dev(&nop->phy);
  	if (err) {
  		dev_err(&pdev->dev, "can't register transceiver, err: %d\n",
@@@ -235,22 -271,12 +306,28 @@@
  
  	platform_set_drvdata(pdev, nop);
  
 +	ATOMIC_INIT_NOTIFIER_HEAD(&nop->phy.notifier);
 +
  	return 0;
 +
 +err_add:
 +	if (!IS_ERR(nop->clk))
 +		clk_unprepare(nop->clk);
 +	return err;
  }
  
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +static int nop_usb_xceiv_remove(struct platform_device *pdev)
 +{
 +	struct nop_usb_xceiv *nop = platform_get_drvdata(pdev);
 +
 +	if (!IS_ERR(nop->clk))
 +		clk_unprepare(nop->clk);
++=======
+ static int usb_phy_generic_remove(struct platform_device *pdev)
+ {
+ 	struct usb_phy_generic *nop = platform_get_drvdata(pdev);
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  
  	usb_remove_phy(&nop->phy);
  
@@@ -264,29 -290,29 +341,53 @@@ static const struct of_device_id nop_xc
  
  MODULE_DEVICE_TABLE(of, nop_xceiv_dt_ids);
  
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +static struct platform_driver nop_usb_xceiv_driver = {
 +	.probe		= nop_usb_xceiv_probe,
 +	.remove		= nop_usb_xceiv_remove,
 +	.driver		= {
 +		.name	= "nop_usb_xceiv",
++=======
+ static struct platform_driver usb_phy_generic_driver = {
+ 	.probe		= usb_phy_generic_probe,
+ 	.remove		= usb_phy_generic_remove,
+ 	.driver		= {
+ 		.name	= "usb_phy_generic",
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  		.owner	= THIS_MODULE,
 -		.of_match_table = nop_xceiv_dt_ids,
 +		.of_match_table = of_match_ptr(nop_xceiv_dt_ids),
  	},
  };
  
++<<<<<<< HEAD:drivers/usb/phy/phy-nop.c
 +static int __init nop_usb_xceiv_init(void)
 +{
 +	return platform_driver_register(&nop_usb_xceiv_driver);
 +}
 +subsys_initcall(nop_usb_xceiv_init);
 +
 +static void __exit nop_usb_xceiv_exit(void)
 +{
 +	platform_driver_unregister(&nop_usb_xceiv_driver);
 +}
 +module_exit(nop_usb_xceiv_exit);
 +
 +MODULE_ALIAS("platform:nop_usb_xceiv");
++=======
+ static int __init usb_phy_generic_init(void)
+ {
+ 	return platform_driver_register(&usb_phy_generic_driver);
+ }
+ subsys_initcall(usb_phy_generic_init);
+ 
+ static void __exit usb_phy_generic_exit(void)
+ {
+ 	platform_driver_unregister(&usb_phy_generic_driver);
+ }
+ module_exit(usb_phy_generic_exit);
+ 
+ MODULE_ALIAS("platform:usb_phy_generic");
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):drivers/usb/phy/phy-generic.c
  MODULE_AUTHOR("Texas Instruments Inc");
  MODULE_DESCRIPTION("NOP USB Transceiver driver");
  MODULE_LICENSE("GPL");
diff --cc include/linux/usb/nop-usb-xceiv.h
index 127a0b702dbd,c00176d48625..000000000000
--- a/include/linux/usb/nop-usb-xceiv.h
+++ b/include/linux/usb/nop-usb-xceiv.h
@@@ -3,7 -3,7 +3,11 @@@
  
  #include <linux/usb/otg.h>
  
++<<<<<<< HEAD:include/linux/usb/nop-usb-xceiv.h
 +struct nop_usb_xceiv_platform_data {
++=======
+ struct usb_phy_generic_platform_data {
++>>>>>>> 4525beeb9aad (usb: phy: rename usb_nop_xceiv to usb_phy_generic):include/linux/usb/usb_phy_gen_xceiv.h
  	enum usb_phy_type type;
  	unsigned long clk_rate;
  
* Unmerged path drivers/usb/phy/phy-am335x.c
* Unmerged path drivers/usb/phy/phy-generic.h
* Unmerged path drivers/usb/phy/phy-keystone.c
* Unmerged path arch/arm/mach-omap2/usb-host.c
* Unmerged path drivers/usb/dwc3/dwc3-exynos.c
* Unmerged path drivers/usb/dwc3/dwc3-pci.c
diff --git a/drivers/usb/musb/am35x.c b/drivers/usb/musb/am35x.c
index dbe6007a6386..e2b66f1e7df7 100644
--- a/drivers/usb/musb/am35x.c
+++ b/drivers/usb/musb/am35x.c
@@ -361,7 +361,7 @@ static int am35x_musb_init(struct musb *musb)
 	if (!rev)
 		return -ENODEV;
 
-	usb_nop_xceiv_register();
+	usb_phy_generic_register();
 	musb->xceiv = usb_get_phy(USB_PHY_TYPE_USB2);
 	if (IS_ERR_OR_NULL(musb->xceiv))
 		return -EPROBE_DEFER;
@@ -403,7 +403,7 @@ static int am35x_musb_exit(struct musb *musb)
 		data->set_phy_power(0);
 
 	usb_put_phy(musb->xceiv);
-	usb_nop_xceiv_unregister();
+	usb_phy_generic_unregister();
 
 	return 0;
 }
diff --git a/drivers/usb/musb/blackfin.c b/drivers/usb/musb/blackfin.c
index 72743225a0ef..9170d3070604 100644
--- a/drivers/usb/musb/blackfin.c
+++ b/drivers/usb/musb/blackfin.c
@@ -401,7 +401,7 @@ static int bfin_musb_init(struct musb *musb)
 	}
 	gpio_direction_output(musb->config->gpio_vrsel, 0);
 
-	usb_nop_xceiv_register();
+	usb_phy_generic_register();
 	musb->xceiv = usb_get_phy(USB_PHY_TYPE_USB2);
 	if (IS_ERR_OR_NULL(musb->xceiv)) {
 		gpio_free(musb->config->gpio_vrsel);
@@ -426,7 +426,7 @@ static int bfin_musb_exit(struct musb *musb)
 	gpio_free(musb->config->gpio_vrsel);
 
 	usb_put_phy(musb->xceiv);
-	usb_nop_xceiv_unregister();
+	usb_phy_generic_unregister();
 	return 0;
 }
 
diff --git a/drivers/usb/musb/da8xx.c b/drivers/usb/musb/da8xx.c
index 17d600a46123..2493149033c9 100644
--- a/drivers/usb/musb/da8xx.c
+++ b/drivers/usb/musb/da8xx.c
@@ -418,7 +418,7 @@ static int da8xx_musb_init(struct musb *musb)
 	if (!rev)
 		goto fail;
 
-	usb_nop_xceiv_register();
+	usb_phy_generic_register();
 	musb->xceiv = usb_get_phy(USB_PHY_TYPE_USB2);
 	if (IS_ERR_OR_NULL(musb->xceiv)) {
 		ret = -EPROBE_DEFER;
@@ -453,7 +453,7 @@ static int da8xx_musb_exit(struct musb *musb)
 	phy_off();
 
 	usb_put_phy(musb->xceiv);
-	usb_nop_xceiv_unregister();
+	usb_phy_generic_unregister();
 
 	return 0;
 }
diff --git a/drivers/usb/musb/davinci.c b/drivers/usb/musb/davinci.c
index e1a3d0272c11..77fd7758c30b 100644
--- a/drivers/usb/musb/davinci.c
+++ b/drivers/usb/musb/davinci.c
@@ -381,7 +381,7 @@ static int davinci_musb_init(struct musb *musb)
 	u32		revision;
 	int 		ret = -ENODEV;
 
-	usb_nop_xceiv_register();
+	usb_phy_generic_register();
 	musb->xceiv = usb_get_phy(USB_PHY_TYPE_USB2);
 	if (IS_ERR_OR_NULL(musb->xceiv)) {
 		ret = -EPROBE_DEFER;
@@ -439,7 +439,7 @@ static int davinci_musb_init(struct musb *musb)
 fail:
 	usb_put_phy(musb->xceiv);
 unregister:
-	usb_nop_xceiv_unregister();
+	usb_phy_generic_unregister();
 	return ret;
 }
 
@@ -487,7 +487,7 @@ static int davinci_musb_exit(struct musb *musb)
 	phy_off();
 
 	usb_put_phy(musb->xceiv);
-	usb_nop_xceiv_unregister();
+	usb_phy_generic_unregister();
 
 	return 0;
 }
diff --git a/drivers/usb/musb/tusb6010.c b/drivers/usb/musb/tusb6010.c
index 709d4364825f..996a91173e54 100644
--- a/drivers/usb/musb/tusb6010.c
+++ b/drivers/usb/musb/tusb6010.c
@@ -1065,7 +1065,7 @@ static int tusb_musb_init(struct musb *musb)
 	void __iomem		*sync = NULL;
 	int			ret;
 
-	usb_nop_xceiv_register();
+	usb_phy_generic_register();
 	musb->xceiv = usb_get_phy(USB_PHY_TYPE_USB2);
 	if (IS_ERR_OR_NULL(musb->xceiv))
 		return -EPROBE_DEFER;
@@ -1117,7 +1117,7 @@ done:
 			iounmap(sync);
 
 		usb_put_phy(musb->xceiv);
-		usb_nop_xceiv_unregister();
+		usb_phy_generic_unregister();
 	}
 	return ret;
 }
@@ -1133,7 +1133,7 @@ static int tusb_musb_exit(struct musb *musb)
 	iounmap(musb->sync_va);
 
 	usb_put_phy(musb->xceiv);
-	usb_nop_xceiv_unregister();
+	usb_phy_generic_unregister();
 	return 0;
 }
 
* Unmerged path drivers/usb/phy/phy-am335x.c
* Unmerged path drivers/usb/phy/phy-generic.h
* Unmerged path drivers/usb/phy/phy-keystone.c
* Unmerged path drivers/usb/phy/phy-nop.c
* Unmerged path include/linux/usb/nop-usb-xceiv.h
