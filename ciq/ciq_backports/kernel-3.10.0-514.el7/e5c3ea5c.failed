bridge: implement rtnl_link_ops->get_size and rtnl_link_ops->fill_info

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit e5c3ea5c668033b303e7ac835d7d91da32d97958
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e5c3ea5c.failed

Allow rtnetlink users to get bridge master info in IFLA_INFO_DATA attr
This initial part implements forward_delay, hello_time, max_age options.

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e5c3ea5c668033b303e7ac835d7d91da32d97958)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_netlink.c
diff --cc net/bridge/br_netlink.c
index 01e11131d326,bcac09fe2ac8..000000000000
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@@ -586,6 -447,66 +586,69 @@@ static int br_validate(struct nlattr *t
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int br_dev_newlink(struct net *src_net, struct net_device *dev,
+ 			  struct nlattr *tb[], struct nlattr *data[])
+ {
+ 	struct net_bridge *br = netdev_priv(dev);
+ 
+ 	if (tb[IFLA_ADDRESS]) {
+ 		spin_lock_bh(&br->lock);
+ 		br_stp_change_bridge_id(br, nla_data(tb[IFLA_ADDRESS]));
+ 		spin_unlock_bh(&br->lock);
+ 	}
+ 
+ 	return register_netdevice(dev);
+ }
+ 
+ static int br_port_slave_changelink(struct net_device *brdev,
+ 				    struct net_device *dev,
+ 				    struct nlattr *tb[],
+ 				    struct nlattr *data[])
+ {
+ 	if (!data)
+ 		return 0;
+ 	return br_setport(br_port_get_rtnl(dev), data);
+ }
+ 
+ static int br_port_fill_slave_info(struct sk_buff *skb,
+ 				   const struct net_device *brdev,
+ 				   const struct net_device *dev)
+ {
+ 	return br_port_fill_attrs(skb, br_port_get_rtnl(dev));
+ }
+ 
+ static size_t br_port_get_slave_size(const struct net_device *brdev,
+ 				     const struct net_device *dev)
+ {
+ 	return br_port_info_size();
+ }
+ 
+ static size_t br_get_size(const struct net_device *brdev)
+ {
+ 	return nla_total_size(sizeof(u32)) +	/* IFLA_BR_FORWARD_DELAY  */
+ 	       nla_total_size(sizeof(u32)) +	/* IFLA_BR_HELLO_TIME */
+ 	       nla_total_size(sizeof(u32)) +	/* IFLA_BR_MAX_AGE */
+ 	       0;
+ }
+ 
+ static int br_fill_info(struct sk_buff *skb, const struct net_device *brdev)
+ {
+ 	struct net_bridge *br = netdev_priv(brdev);
+ 	u32 forward_delay = jiffies_to_clock_t(br->forward_delay);
+ 	u32 hello_time = jiffies_to_clock_t(br->hello_time);
+ 	u32 age_time = jiffies_to_clock_t(br->max_age);
+ 
+ 	if (nla_put_u32(skb, IFLA_BR_FORWARD_DELAY, forward_delay) ||
+ 	    nla_put_u32(skb, IFLA_BR_HELLO_TIME, hello_time) ||
+ 	    nla_put_u32(skb, IFLA_BR_MAX_AGE, age_time))
+ 		return -EMSGSIZE;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> e5c3ea5c6680 (bridge: implement rtnl_link_ops->get_size and rtnl_link_ops->fill_info)
  static size_t br_get_link_af_size(const struct net_device *dev)
  {
  	struct net_port_vlans *pv;
@@@ -610,11 -531,20 +673,28 @@@ static struct rtnl_af_ops br_af_ops = 
  };
  
  struct rtnl_link_ops br_link_ops __read_mostly = {
++<<<<<<< HEAD
 +	.kind		= "bridge",
 +	.priv_size	= sizeof(struct net_bridge),
 +	.setup		= br_dev_setup,
 +	.validate	= br_validate,
 +	.dellink	= br_dev_delete,
++=======
+ 	.kind			= "bridge",
+ 	.priv_size		= sizeof(struct net_bridge),
+ 	.setup			= br_dev_setup,
+ 	.validate		= br_validate,
+ 	.newlink		= br_dev_newlink,
+ 	.dellink		= br_dev_delete,
+ 	.get_size		= br_get_size,
+ 	.fill_info		= br_fill_info,
+ 
+ 	.slave_maxtype		= IFLA_BRPORT_MAX,
+ 	.slave_policy		= br_port_policy,
+ 	.slave_changelink	= br_port_slave_changelink,
+ 	.get_slave_size		= br_port_get_slave_size,
+ 	.fill_slave_info	= br_port_fill_slave_info,
++>>>>>>> e5c3ea5c6680 (bridge: implement rtnl_link_ops->get_size and rtnl_link_ops->fill_info)
  };
  
  int __init br_netlink_init(void)
diff --git a/include/uapi/linux/if_link.h b/include/uapi/linux/if_link.h
index 30b75598aa6b..aef6f7987c6e 100644
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@ -217,6 +217,18 @@ enum in6_addr_gen_mode {
 	IN6_ADDR_GEN_MODE_NONE,
 };
 
+/* Bridge section */
+
+enum {
+	IFLA_BR_UNSPEC,
+	IFLA_BR_FORWARD_DELAY,
+	IFLA_BR_HELLO_TIME,
+	IFLA_BR_MAX_AGE,
+	__IFLA_BR_MAX,
+};
+
+#define IFLA_BR_MAX	(__IFLA_BR_MAX - 1)
+
 enum {
 	BRIDGE_MODE_UNSPEC,
 	BRIDGE_MODE_HAIRPIN,
* Unmerged path net/bridge/br_netlink.c
