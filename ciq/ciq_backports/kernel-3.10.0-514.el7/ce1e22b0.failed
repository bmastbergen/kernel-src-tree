perf mem: Add -e record option

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit ce1e22b08f0728e840614d3d0fc43fd1d6b7f7a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ce1e22b0.failed

Adding -e option for perf mem record command, to be able to specify
memory event directly.

Get list of available events:

  $ perf mem record -e list
  ldlat-loads
  ldlat-stores

Monitor ldlat-loads:
  $ perf mem record -e ldlat-loads true

Committer notes:

Further testing:

  # perf mem record -e ldlat-loads true
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 0.020 MB perf.data (10 samples) ]
  # perf evlist
  cpu/mem-loads,ldlat=30/P
  #

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1455525293-8671-6-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ce1e22b08f0728e840614d3d0fc43fd1d6b7f7a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-mem.c
#	tools/perf/util/mem-events.c
#	tools/perf/util/mem-events.h
diff --cc tools/perf/builtin-mem.c
index 80170aace5d4,b3f8a89ede40..000000000000
--- a/tools/perf/builtin-mem.c
+++ b/tools/perf/builtin-mem.c
@@@ -6,6 -6,8 +6,11 @@@
  #include "util/tool.h"
  #include "util/session.h"
  #include "util/data.h"
++<<<<<<< HEAD
++=======
+ #include "util/mem-events.h"
+ #include "util/debug.h"
++>>>>>>> ce1e22b08f07 (perf mem: Add -e record option)
  
  #define MEM_OPERATION_LOAD	0x1
  #define MEM_OPERATION_STORE	0x2
@@@ -35,23 -81,34 +84,39 @@@ static int __cmd_record(int argc, cons
  	rec_argv[i++] = "record";
  
  	if (mem->operation & MEM_OPERATION_LOAD)
++<<<<<<< HEAD
++=======
+ 		perf_mem_events[PERF_MEM_EVENTS__LOAD].record = true;
+ 
+ 	if (perf_mem_events[PERF_MEM_EVENTS__LOAD].record)
++>>>>>>> ce1e22b08f07 (perf mem: Add -e record option)
  		rec_argv[i++] = "-W";
  
  	rec_argv[i++] = "-d";
  
 -	for (j = 0; j < PERF_MEM_EVENTS__MAX; j++) {
 -		if (!perf_mem_events[j].record)
 -			continue;
 +	if (mem->operation & MEM_OPERATION_LOAD) {
 +		rec_argv[i++] = "-e";
 +		rec_argv[i++] = "cpu/mem-loads/pp";
 +	}
  
 +	if (mem->operation & MEM_OPERATION_STORE) {
  		rec_argv[i++] = "-e";
 -		rec_argv[i++] = perf_mem_events[j].name;
 -	};
 +		rec_argv[i++] = "cpu/mem-stores/pp";
 +	}
  
- 	for (j = 1; j < argc; j++, i++)
+ 	for (j = 0; j < argc; j++, i++)
  		rec_argv[i] = argv[j];
  
+ 	if (verbose > 0) {
+ 		pr_debug("calling: record ");
+ 
+ 		while (rec_argv[j]) {
+ 			pr_debug("%s ", rec_argv[j]);
+ 			j++;
+ 		}
+ 		pr_debug("\n");
+ 	}
+ 
  	ret = cmd_record(i, rec_argv, NULL);
  	free(rec_argv);
  	return ret;
* Unmerged path tools/perf/util/mem-events.c
* Unmerged path tools/perf/util/mem-events.h
* Unmerged path tools/perf/builtin-mem.c
* Unmerged path tools/perf/util/mem-events.c
* Unmerged path tools/perf/util/mem-events.h
