ACPI: Normalize return value of resource parser functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [acpi] Normalize return value of resource parser functions (Myron Stowe) [1344513]
Rebuild_FUZZ: 94.44%
commit-author Jiang Liu <jiang.liu@linux.intel.com>
commit 581c19f3a72ae9ff7f24f2a6c2e67f269ed4392a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/581c19f3.failed

Normalize return value of resource parse functions as:
1) return "true" if resource is assigned.
2) return "false" and IORESOURCE_DISABLED setting in res->flags if
   resource is unassigned.
3) return "false" and zeroing res->flags if it's not an valid or
   expected resource.

	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 581c19f3a72ae9ff7f24f2a6c2e67f269ed4392a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/resource.c
diff --cc drivers/acpi/resource.c
index 75d12a1b01ad,32561290a4a0..000000000000
--- a/drivers/acpi/resource.c
+++ b/drivers/acpi/resource.c
@@@ -100,9 -112,11 +105,10 @@@ bool acpi_dev_resource_memory(struct ac
  					 fixed_memory32->write_protect);
  		break;
  	default:
+ 		res->flags = 0;
  		return false;
  	}
 -
 -	return !(res->flags & IORESOURCE_DISABLED);
 +	return true;
  }
  EXPORT_SYMBOL_GPL(acpi_dev_resource_memory);
  
@@@ -165,9 -176,11 +176,10 @@@ bool acpi_dev_resource_io(struct acpi_r
  					ACPI_DECODE_10);
  		break;
  	default:
+ 		res->flags = 0;
  		return false;
  	}
 -
 -	return !(res->flags & IORESOURCE_DISABLED);
 +	return true;
  }
  EXPORT_SYMBOL_GPL(acpi_dev_resource_io);
  
@@@ -183,42 -235,14 +200,47 @@@
  bool acpi_dev_resource_address_space(struct acpi_resource *ares,
  				     struct resource *res)
  {
 +	acpi_status status;
  	struct acpi_resource_address64 addr;
 -
 +	bool window;
 +	u64 len;
 +	u8 io_decode;
 +
++<<<<<<< HEAD
 +	status = acpi_resource_to_address64(ares, &addr);
 +	if (ACPI_FAILURE(status))
++=======
+ 	res->flags = 0;
+ 	if (ACPI_FAILURE(acpi_resource_to_address64(ares, &addr)))
++>>>>>>> 581c19f3a72a (ACPI: Normalize return value of resource parser functions)
 +		return false;
 +
 +	res->start = addr.minimum;
 +	res->end = addr.maximum;
 +	window = addr.producer_consumer == ACPI_PRODUCER;
 +
 +	switch(addr.resource_type) {
 +	case ACPI_MEMORY_RANGE:
 +		len = addr.maximum - addr.minimum + 1;
 +		res->flags = acpi_dev_memresource_flags(len,
 +						addr.info.mem.write_protect,
 +						window);
 +		break;
 +	case ACPI_IO_RANGE:
 +		io_decode = addr.granularity == 0xfff ?
 +				ACPI_DECODE_10 : ACPI_DECODE_16;
 +		res->flags = acpi_dev_ioresource_flags(addr.minimum,
 +						       addr.maximum,
 +						       io_decode, window);
 +		break;
 +	case ACPI_BUS_NUMBER_RANGE:
 +		res->flags = IORESOURCE_BUS;
 +		break;
 +	default:
  		return false;
 +	}
  
 -	return acpi_decode_space(res, (struct acpi_resource_address *)&addr,
 -				 &addr.address);
 +	return !(res->flags & IORESOURCE_DISABLED);
  }
  EXPORT_SYMBOL_GPL(acpi_dev_resource_address_space);
  
@@@ -235,10 -264,8 +262,11 @@@ bool acpi_dev_resource_ext_address_spac
  					 struct resource *res)
  {
  	struct acpi_resource_extended_address64 *ext_addr;
 +	bool window;
 +	u64 len;
 +	u8 io_decode;
  
+ 	res->flags = 0;
  	if (ares->type != ACPI_RESOURCE_TYPE_EXTENDED_ADDRESS64)
  		return false;
  
* Unmerged path drivers/acpi/resource.c
