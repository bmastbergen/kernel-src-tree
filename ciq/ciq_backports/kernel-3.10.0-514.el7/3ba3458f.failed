ipv6: Count in extension headers in skb->network_header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jakub Sitnicki <jkbs@redhat.com>
commit 3ba3458fb9c050718b95275a3310b74415e767e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3ba3458f.failed

When sending a UDPv6 message longer than MTU, account for the length
of fragmentable IPv6 extension headers in skb->network_header offset.
Same as we do in alloc_new_skb path in __ip6_append_data().

This ensures that later on __ip6_make_skb() will make space in
headroom for fragmentable extension headers:

	/* move skb->data to ip header from ext header */
	if (skb->data < skb_network_header(skb))
		__skb_pull(skb, skb_network_offset(skb));

Prevents a splat due to skb_under_panic:

skbuff: skb_under_panic: text:ffffffff8143397b len:2126 put:14 \
head:ffff880005bacf50 data:ffff880005bacf4a tail:0x48 end:0xc0 dev:lo
------------[ cut here ]------------
kernel BUG at net/core/skbuff.c:104!
invalid opcode: 0000 [#1] KASAN
CPU: 0 PID: 160 Comm: reproducer Not tainted 4.6.0-rc2 #65
[...]
Call Trace:
 [<ffffffff813eb7b9>] skb_push+0x79/0x80
 [<ffffffff8143397b>] eth_header+0x2b/0x100
 [<ffffffff8141e0d0>] neigh_resolve_output+0x210/0x310
 [<ffffffff814eab77>] ip6_finish_output2+0x4a7/0x7c0
 [<ffffffff814efe3a>] ip6_output+0x16a/0x280
 [<ffffffff815440c1>] ip6_local_out+0xb1/0xf0
 [<ffffffff814f1115>] ip6_send_skb+0x45/0xd0
 [<ffffffff81518836>] udp_v6_send_skb+0x246/0x5d0
 [<ffffffff8151985e>] udpv6_sendmsg+0xa6e/0x1090
[...]

	Reported-by: Ji Jianwen <jiji@redhat.com>
	Signed-off-by: Jakub Sitnicki <jkbs@redhat.com>
	Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3ba3458fb9c050718b95275a3310b74415e767e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_output.c
diff --cc net/ipv6/ip6_output.c
index 6e24dc6ba803,bc972e7152c7..000000000000
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@@ -1022,8 -1090,8 +1022,13 @@@ static inline int ip6_ufo_append_data(s
  			int getfrag(void *from, char *to, int offset, int len,
  			int odd, struct sk_buff *skb),
  			void *from, int length, int hh_len, int fragheaderlen,
++<<<<<<< HEAD
 +			int transhdrlen, int mtu,unsigned int flags,
 +			struct rt6_info *rt)
++=======
+ 			int exthdrlen, int transhdrlen, int mtu,
+ 			unsigned int flags, const struct flowi6 *fl6)
++>>>>>>> 3ba3458fb9c0 (ipv6: Count in extension headers in skb->network_header)
  
  {
  	struct sk_buff *skb;
@@@ -1046,10 -1113,10 +1051,10 @@@
  		skb_reserve(skb, hh_len);
  
  		/* create space for UDP/IP header */
 -		skb_put(skb, fragheaderlen + transhdrlen);
 +		skb_put(skb,fragheaderlen + transhdrlen);
  
  		/* initialize network header pointer */
- 		skb_reset_network_header(skb);
+ 		skb_set_network_header(skb, exthdrlen);
  
  		/* initialize protocol header pointer */
  		skb->transport_header = skb->network_header + fragheaderlen;
@@@ -1287,10 -1355,11 +1292,15 @@@ emsgsize
  	if (((length > mtu) ||
  	     (skb && skb_is_gso(skb))) &&
  	    (sk->sk_protocol == IPPROTO_UDP) &&
 -	    (rt->dst.dev->features & NETIF_F_UFO) &&
 -	    (sk->sk_type == SOCK_DGRAM) && !udp_get_no_check6_tx(sk)) {
 +	    (rt->dst.dev->features & NETIF_F_UFO)) {
  		err = ip6_ufo_append_data(sk, queue, getfrag, from, length,
++<<<<<<< HEAD
 +					  hh_len, fragheaderlen,
 +					  transhdrlen, mtu, flags, rt);
++=======
+ 					  hh_len, fragheaderlen, exthdrlen,
+ 					  transhdrlen, mtu, flags, fl6);
++>>>>>>> 3ba3458fb9c0 (ipv6: Count in extension headers in skb->network_header)
  		if (err)
  			goto error;
  		return 0;
* Unmerged path net/ipv6/ip6_output.c
