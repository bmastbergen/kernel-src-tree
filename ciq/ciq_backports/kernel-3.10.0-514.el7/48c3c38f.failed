PCI/MSI: Remove "pos" from the struct msi_desc msi_attrib

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Yijing Wang <wangyijing@huawei.com>
commit 48c3c38f003c25d50a09d3da558667c5ecd530aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/48c3c38f.failed

"msi_attrib.pos" is only used for MSI (not MSI-X), and we already cache the
MSI capability offset in "dev->msi_cap".

Remove "pos" from the struct msi_attrib and use "dev->msi_cap" directly.

[bhelgaas: changelog, fix whitespace]
	Signed-off-by: Yijing Wang <wangyijing@huawei.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 48c3c38f003c25d50a09d3da558667c5ecd530aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/host/pcie-designware.c
#	drivers/pci/msi.c
diff --cc drivers/pci/msi.c
index cc2e9184f14c,40699a2041b5..000000000000
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@@ -605,8 -574,7 +605,12 @@@ static struct msi_desc *msi_setup_entry
  	entry->msi_attrib.entry_nr	= 0;
  	entry->msi_attrib.maskbit	= !!(control & PCI_MSI_FLAGS_MASKBIT);
  	entry->msi_attrib.default_irq	= dev->irq;	/* Save IOAPIC IRQ */
++<<<<<<< HEAD
 +	entry->msi_attrib.pos		= dev->msi_cap;
 +	entry->multi_cap		= (control & PCI_MSI_FLAGS_QMASK) >> 1;
++=======
+ 	entry->msi_attrib.multi_cap	= (control & PCI_MSI_FLAGS_QMASK) >> 1;
++>>>>>>> 48c3c38f003c (PCI/MSI: Remove "pos" from the struct msi_desc msi_attrib)
  
  	if (control & PCI_MSI_FLAGS_64BIT)
  		entry->mask_pos = dev->msi_cap + PCI_MSI_MASK_64;
* Unmerged path drivers/pci/host/pcie-designware.c
diff --git a/arch/mips/pci/msi-octeon.c b/arch/mips/pci/msi-octeon.c
index d37be36dc659..3e77e011c3e0 100644
--- a/arch/mips/pci/msi-octeon.c
+++ b/arch/mips/pci/msi-octeon.c
@@ -72,8 +72,7 @@ int arch_setup_msi_irq(struct pci_dev *dev, struct msi_desc *desc)
 	 * wants.  Most devices only want 1, which will give
 	 * configured_private_bits and request_private_bits equal 0.
 	 */
-	pci_read_config_word(dev, desc->msi_attrib.pos + PCI_MSI_FLAGS,
-			     &control);
+	pci_read_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, &control);
 
 	/*
 	 * If the number of private bits has been configured then use
@@ -169,8 +168,7 @@ msi_irq_allocated:
 	/* Update the number of IRQs the device has available to it */
 	control &= ~PCI_MSI_FLAGS_QSIZE;
 	control |= request_private_bits << 4;
-	pci_write_config_word(dev, desc->msi_attrib.pos + PCI_MSI_FLAGS,
-			      control);
+	pci_write_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, control);
 
 	irq_set_msi_desc(irq, desc);
 	write_msi_msg(irq, &msg);
* Unmerged path drivers/pci/host/pcie-designware.c
* Unmerged path drivers/pci/msi.c
diff --git a/include/linux/msi.h b/include/linux/msi.h
index 5f4b38363c89..68502907a46c 100644
--- a/include/linux/msi.h
+++ b/include/linux/msi.h
@@ -28,7 +28,6 @@ struct msi_desc {
 		__u8	multiple: 3;	/* log2 num of messages allocated */
 		__u8	maskbit	: 1;	/* mask-pending bit supported ? */
 		__u8	is_64	: 1;	/* Address size: 0=32bit 1=64bit */
-		__u8	pos;		/* Location of the msi capability */
 		__u16	entry_nr;	/* specific enabled entry */
 		unsigned default_irq;	/* default pre-assigned irq */
 	} msi_attrib;
