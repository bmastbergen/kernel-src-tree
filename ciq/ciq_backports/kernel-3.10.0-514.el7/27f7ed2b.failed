sctp: allow setting SCTP_SACK_IMMEDIATELY by the application

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
commit 27f7ed2b11d42ab6d796e96533c2076ec220affc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/27f7ed2b.failed

This patch extends commit b93d6471748d ("sctp: implement the sender side
for SACK-IMMEDIATELY extension") as it didn't white list
SCTP_SACK_IMMEDIATELY on sctp_msghdr_parse(), causing it to be
understood as an invalid flag and returning -EINVAL to the application.

Note that the actual handling of the flag is already there in
sctp_datamsg_from_user().

https://tools.ietf.org/html/rfc7053#section-7

Fixes: b93d6471748d ("sctp: implement the sender side for SACK-IMMEDIATELY extension")
	Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
	Acked-by: Vlad Yasevich <vyasevich@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 27f7ed2b11d42ab6d796e96533c2076ec220affc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/socket.c
diff --cc net/sctp/socket.c
index 1425337e03d0,5ca2ebfe0be8..000000000000
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@@ -6542,20 -6629,41 +6542,47 @@@ SCTP_STATIC int sctp_msghdr_parse(cons
  			 * ------------  ------------   ----------------------
  			 * IPPROTO_SCTP  SCTP_SNDRCV    struct sctp_sndrcvinfo
  			 */
 -			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct sctp_sndrcvinfo)))
 +			if (cmsg->cmsg_len !=
 +			    CMSG_LEN(sizeof(struct sctp_sndrcvinfo)))
  				return -EINVAL;
  
 -			cmsgs->srinfo = CMSG_DATA(cmsg);
 +			cmsgs->info =
 +				(struct sctp_sndrcvinfo *)CMSG_DATA(cmsg);
  
 -			if (cmsgs->srinfo->sinfo_flags &
 +			/* Minimally, validate the sinfo_flags. */
 +			if (cmsgs->info->sinfo_flags &
  			    ~(SCTP_UNORDERED | SCTP_ADDR_OVER |
+ 			      SCTP_SACK_IMMEDIATELY |
  			      SCTP_ABORT | SCTP_EOF))
  				return -EINVAL;
  			break;
  
++<<<<<<< HEAD
++=======
+ 		case SCTP_SNDINFO:
+ 			/* SCTP Socket API Extension
+ 			 * 5.3.4 SCTP Send Information Structure (SCTP_SNDINFO)
+ 			 *
+ 			 * This cmsghdr structure specifies SCTP options for
+ 			 * sendmsg(). This structure and SCTP_RCVINFO replaces
+ 			 * SCTP_SNDRCV which has been deprecated.
+ 			 *
+ 			 * cmsg_level    cmsg_type      cmsg_data[]
+ 			 * ------------  ------------   ---------------------
+ 			 * IPPROTO_SCTP  SCTP_SNDINFO    struct sctp_sndinfo
+ 			 */
+ 			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct sctp_sndinfo)))
+ 				return -EINVAL;
+ 
+ 			cmsgs->sinfo = CMSG_DATA(cmsg);
+ 
+ 			if (cmsgs->sinfo->snd_flags &
+ 			    ~(SCTP_UNORDERED | SCTP_ADDR_OVER |
+ 			      SCTP_SACK_IMMEDIATELY |
+ 			      SCTP_ABORT | SCTP_EOF))
+ 				return -EINVAL;
+ 			break;
++>>>>>>> 27f7ed2b11d4 (sctp: allow setting SCTP_SACK_IMMEDIATELY by the application)
  		default:
  			return -EINVAL;
  		}
* Unmerged path net/sctp/socket.c
