mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: convert sdhci_set_uhs_signaling() into a library function (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 96.24%
commit-author Russell King <rmk+kernel@arm.linux.org.uk>
commit 96d7b78cfc2fd6b1539704e2d33239dbaa097cc4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/96d7b78c.failed

Add sdhci_set_uhs_signaling() and always call the set_uhs_signaling
method.  This avoids quirks being added into sdhci_set_uhs_signaling().

	Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
	Tested-by: Markus Pargmann <mpa@pengutronix.de>
	Tested-by: Stephen Warren <swarren@nvidia.com>
[Ulf Hansson] Resolved conflict
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Signed-off-by: Chris Ball <chris@printf.net>
(cherry picked from commit 96d7b78cfc2fd6b1539704e2d33239dbaa097cc4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-acpi.c
#	drivers/mmc/host/sdhci-bcm-kona.c
#	drivers/mmc/host/sdhci-bcm2835.c
#	drivers/mmc/host/sdhci-cns3xxx.c
#	drivers/mmc/host/sdhci-dove.c
#	drivers/mmc/host/sdhci-of-arasan.c
#	drivers/mmc/host/sdhci-of-esdhc.c
#	drivers/mmc/host/sdhci-of-hlwd.c
#	drivers/mmc/host/sdhci-pci.c
#	drivers/mmc/host/sdhci-pltfm.c
#	drivers/mmc/host/sdhci-pxav2.c
#	drivers/mmc/host/sdhci-pxav3.c
#	drivers/mmc/host/sdhci-s3c.c
#	drivers/mmc/host/sdhci-sirf.c
#	drivers/mmc/host/sdhci-spear.c
#	drivers/mmc/host/sdhci-tegra.c
#	drivers/mmc/host/sdhci.c
#	drivers/mmc/host/sdhci.h
diff --cc drivers/mmc/host/sdhci-acpi.c
index ebb3f392b589,8ce3c28cb76e..000000000000
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@@ -102,11 -102,19 +102,23 @@@ static void sdhci_acpi_int_hw_reset(str
  }
  
  static const struct sdhci_ops sdhci_acpi_ops_dflt = {
 -	.set_clock = sdhci_set_clock,
  	.enable_dma = sdhci_acpi_enable_dma,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_ops sdhci_acpi_ops_int = {
 -	.set_clock = sdhci_set_clock,
  	.enable_dma = sdhci_acpi_enable_dma,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  	.hw_reset   = sdhci_acpi_int_hw_reset,
  };
  
diff --cc drivers/mmc/host/sdhci-bcm-kona.c
index 87175f9817c2,dd780c315a63..000000000000
--- a/drivers/mmc/host/sdhci-bcm-kona.c
+++ b/drivers/mmc/host/sdhci-bcm-kona.c
@@@ -209,6 -209,10 +209,12 @@@ static struct sdhci_ops sdhci_bcm_kona_
  	.get_max_clock = sdhci_bcm_kona_get_max_clk,
  	.get_timeout_clock = sdhci_bcm_kona_get_timeout_clock,
  	.platform_send_init_74_clocks = sdhci_bcm_kona_init_74_clocks,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  	.card_event = sdhci_bcm_kona_card_event,
  };
  
diff --cc drivers/mmc/host/sdhci-bcm2835.c
index 0584a1c788b8,46af9a439d7b..000000000000
--- a/drivers/mmc/host/sdhci-bcm2835.c
+++ b/drivers/mmc/host/sdhci-bcm2835.c
@@@ -131,8 -131,12 +131,14 @@@ static const struct sdhci_ops bcm2835_s
  	.read_l = bcm2835_sdhci_readl,
  	.read_w = bcm2835_sdhci_readw,
  	.read_b = bcm2835_sdhci_readb,
 -	.set_clock = sdhci_set_clock,
  	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
  	.get_min_clock = bcm2835_sdhci_get_min_clock,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_pltfm_data bcm2835_sdhci_pdata = {
diff --cc drivers/mmc/host/sdhci-cns3xxx.c
index 95620e1983a8,14b74075589a..000000000000
--- a/drivers/mmc/host/sdhci-cns3xxx.c
+++ b/drivers/mmc/host/sdhci-cns3xxx.c
@@@ -79,6 -79,9 +79,12 @@@ out
  static const struct sdhci_ops sdhci_cns3xxx_ops = {
  	.get_max_clock	= sdhci_cns3xxx_get_max_clk,
  	.set_clock	= sdhci_cns3xxx_set_clock,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width	= sdhci_set_bus_width,
+ 	.reset          = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_cns3xxx_pdata = {
diff --cc drivers/mmc/host/sdhci-dove.c
index 8424839660f8,0d315f4496c8..000000000000
--- a/drivers/mmc/host/sdhci-dove.c
+++ b/drivers/mmc/host/sdhci-dove.c
@@@ -86,6 -86,10 +86,13 @@@ static u32 sdhci_dove_readl(struct sdhc
  static const struct sdhci_ops sdhci_dove_ops = {
  	.read_w	= sdhci_dove_readw,
  	.read_l	= sdhci_dove_readl,
++<<<<<<< HEAD
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_dove_pdata = {
diff --cc drivers/mmc/host/sdhci-of-esdhc.c
index 37e668f5b992,fcaeae5f55b8..000000000000
--- a/drivers/mmc/host/sdhci-of-esdhc.c
+++ b/drivers/mmc/host/sdhci-of-esdhc.c
@@@ -247,6 -307,9 +247,12 @@@ static const struct sdhci_ops sdhci_esd
  	.platform_resume = esdhc_of_resume,
  #endif
  	.adma_workaround = esdhci_of_adma_workaround,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = esdhc_pltfm_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_esdhc_pdata = {
diff --cc drivers/mmc/host/sdhci-of-hlwd.c
index 57c514a81ca5,b341661369a2..000000000000
--- a/drivers/mmc/host/sdhci-of-hlwd.c
+++ b/drivers/mmc/host/sdhci-of-hlwd.c
@@@ -58,6 -58,10 +58,13 @@@ static const struct sdhci_ops sdhci_hlw
  	.write_l = sdhci_hlwd_writel,
  	.write_w = sdhci_hlwd_writew,
  	.write_b = sdhci_hlwd_writeb,
++<<<<<<< HEAD
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_hlwd_pdata = {
diff --cc drivers/mmc/host/sdhci-pci.c
index a3024b2fb30e,52c42fcc284c..000000000000
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@@ -955,9 -1069,20 +955,15 @@@ static void sdhci_pci_hw_reset(struct s
  	usleep_range(300, 1000);
  }
  
 -static void sdhci_pci_hw_reset(struct sdhci_host *host)
 -{
 -	struct sdhci_pci_slot *slot = sdhci_priv(host);
 -
 -	if (slot->hw_reset)
 -		slot->hw_reset(host);
 -}
 -
  static const struct sdhci_ops sdhci_pci_ops = {
 -	.set_clock	= sdhci_set_clock,
  	.enable_dma	= sdhci_pci_enable_dma,
++<<<<<<< HEAD
 +	.platform_bus_width	= sdhci_pci_bus_width,
++=======
+ 	.set_bus_width	= sdhci_pci_set_bus_width,
+ 	.reset		= sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  	.hw_reset		= sdhci_pci_hw_reset,
  };
  
diff --cc drivers/mmc/host/sdhci-pltfm.c
index bef250e95418,7e834fb78f42..000000000000
--- a/drivers/mmc/host/sdhci-pltfm.c
+++ b/drivers/mmc/host/sdhci-pltfm.c
@@@ -45,6 -45,10 +45,13 @@@ unsigned int sdhci_pltfm_clk_get_max_cl
  EXPORT_SYMBOL_GPL(sdhci_pltfm_clk_get_max_clock);
  
  static const struct sdhci_ops sdhci_pltfm_ops = {
++<<<<<<< HEAD
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  #ifdef CONFIG_OF
diff --cc drivers/mmc/host/sdhci-pxav2.c
index d51e061ec576,3c0f3c0a1cc8..000000000000
--- a/drivers/mmc/host/sdhci-pxav2.c
+++ b/drivers/mmc/host/sdhci-pxav2.c
@@@ -112,9 -112,11 +112,15 @@@ static int pxav2_mmc_set_width(struct s
  }
  
  static const struct sdhci_ops pxav2_sdhci_ops = {
 -	.set_clock     = sdhci_set_clock,
  	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
++<<<<<<< HEAD
 +	.platform_reset_exit = pxav2_set_private_registers,
 +	.platform_bus_width = pxav2_mmc_set_width,
++=======
+ 	.set_bus_width = pxav2_mmc_set_bus_width,
+ 	.reset         = pxav2_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  #ifdef CONFIG_OF
diff --cc drivers/mmc/host/sdhci-pxav3.c
index 56d9bee93d8f,f4f128947561..000000000000
--- a/drivers/mmc/host/sdhci-pxav3.c
+++ b/drivers/mmc/host/sdhci-pxav3.c
@@@ -172,6 -227,9 +172,12 @@@ static const struct sdhci_ops pxav3_sdh
  	.set_uhs_signaling = pxav3_set_uhs_signaling,
  	.platform_send_init_74_clocks = pxav3_gen_init_74_clocks,
  	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = pxav3_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static struct sdhci_pltfm_data sdhci_pxav3_pdata = {
diff --cc drivers/mmc/host/sdhci-s3c.c
index 926aaf6acc67,781b8a943d38..000000000000
--- a/drivers/mmc/host/sdhci-s3c.c
+++ b/drivers/mmc/host/sdhci-s3c.c
@@@ -364,7 -369,9 +364,13 @@@ static struct sdhci_ops sdhci_s3c_ops 
  	.get_max_clock		= sdhci_s3c_get_max_clk,
  	.set_clock		= sdhci_s3c_set_clock,
  	.get_min_clock		= sdhci_s3c_get_min_clock,
++<<<<<<< HEAD
 +	.platform_bus_width	= sdhci_s3c_platform_bus_width,
++=======
+ 	.set_bus_width		= sdhci_s3c_set_bus_width,
+ 	.reset			= sdhci_reset,
+ 	.set_uhs_signaling	= sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static void sdhci_s3c_notify_change(struct platform_device *dev, int state)
diff --cc drivers/mmc/host/sdhci-sirf.c
index 09805af0526d,17004531d089..000000000000
--- a/drivers/mmc/host/sdhci-sirf.c
+++ b/drivers/mmc/host/sdhci-sirf.c
@@@ -29,7 -28,11 +29,13 @@@ static unsigned int sdhci_sirf_get_max_
  }
  
  static struct sdhci_ops sdhci_sirf_ops = {
 -	.set_clock = sdhci_set_clock,
  	.get_max_clock	= sdhci_sirf_get_max_clk,
++<<<<<<< HEAD
++=======
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static struct sdhci_pltfm_data sdhci_sirf_pdata = {
diff --cc drivers/mmc/host/sdhci-spear.c
index 2151911b43ec,9d535c7336ef..000000000000
--- a/drivers/mmc/host/sdhci-spear.c
+++ b/drivers/mmc/host/sdhci-spear.c
@@@ -37,31 -38,12 +37,38 @@@ struct spear_sdhci 
  
  /* sdhci ops */
  static const struct sdhci_ops sdhci_pltfm_ops = {
++<<<<<<< HEAD
 +	/* Nothing to do for now. */
++=======
+ 	.set_clock = sdhci_set_clock,
+ 	.set_bus_width = sdhci_set_bus_width,
+ 	.reset = sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
 +/* gpio card detection interrupt handler */
 +static irqreturn_t sdhci_gpio_irq(int irq, void *dev_id)
 +{
 +	struct platform_device *pdev = dev_id;
 +	struct sdhci_host *host = platform_get_drvdata(pdev);
 +	struct spear_sdhci *sdhci = dev_get_platdata(&pdev->dev);
 +	unsigned long gpio_irq_type;
 +	int val;
 +
 +	val = gpio_get_value(sdhci->data->card_int_gpio);
 +
 +	/* val == 1 -> card removed, val == 0 -> card inserted */
 +	/* if card removed - set irq for low level, else vice versa */
 +	gpio_irq_type = val ? IRQF_TRIGGER_LOW : IRQF_TRIGGER_HIGH;
 +	irq_set_irq_type(irq, gpio_irq_type);
 +
 +	/* inform sdhci driver about card insertion/removal */
 +	tasklet_schedule(&host->card_tasklet);
 +
 +	return IRQ_HANDLED;
 +}
 +
  #ifdef CONFIG_OF
  static struct sdhci_plat_data *sdhci_probe_config_dt(struct platform_device *pdev)
  {
diff --cc drivers/mmc/host/sdhci-tegra.c
index c8b058283a06,d06b6ff60432..000000000000
--- a/drivers/mmc/host/sdhci-tegra.c
+++ b/drivers/mmc/host/sdhci-tegra.c
@@@ -152,8 -153,10 +152,15 @@@ static const struct sdhci_ops tegra_sdh
  	.read_l     = tegra_sdhci_readl,
  	.read_w     = tegra_sdhci_readw,
  	.write_l    = tegra_sdhci_writel,
++<<<<<<< HEAD
 +	.platform_bus_width = tegra_sdhci_buswidth,
 +	.platform_reset_exit = tegra_sdhci_reset_exit,
++=======
+ 	.set_clock  = sdhci_set_clock,
+ 	.set_bus_width = tegra_sdhci_set_bus_width,
+ 	.reset      = tegra_sdhci_reset,
+ 	.set_uhs_signaling = sdhci_set_uhs_signaling,
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  };
  
  static const struct sdhci_pltfm_data sdhci_tegra20_pdata = {
diff --cc drivers/mmc/host/sdhci.c
index e292d602646d,0073aae0adcb..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -1409,6 -1383,50 +1409,53 @@@ static void sdhci_request(struct mmc_ho
  	spin_unlock_irqrestore(&host->lock, flags);
  }
  
++<<<<<<< HEAD
++=======
+ void sdhci_set_bus_width(struct sdhci_host *host, int width)
+ {
+ 	u8 ctrl;
+ 
+ 	ctrl = sdhci_readb(host, SDHCI_HOST_CONTROL);
+ 	if (width == MMC_BUS_WIDTH_8) {
+ 		ctrl &= ~SDHCI_CTRL_4BITBUS;
+ 		if (host->version >= SDHCI_SPEC_300)
+ 			ctrl |= SDHCI_CTRL_8BITBUS;
+ 	} else {
+ 		if (host->version >= SDHCI_SPEC_300)
+ 			ctrl &= ~SDHCI_CTRL_8BITBUS;
+ 		if (width == MMC_BUS_WIDTH_4)
+ 			ctrl |= SDHCI_CTRL_4BITBUS;
+ 		else
+ 			ctrl &= ~SDHCI_CTRL_4BITBUS;
+ 	}
+ 	sdhci_writeb(host, ctrl, SDHCI_HOST_CONTROL);
+ }
+ EXPORT_SYMBOL_GPL(sdhci_set_bus_width);
+ 
+ void sdhci_set_uhs_signaling(struct sdhci_host *host, unsigned timing)
+ {
+ 	u16 ctrl_2;
+ 
+ 	ctrl_2 = sdhci_readw(host, SDHCI_HOST_CONTROL2);
+ 	/* Select Bus Speed Mode for host */
+ 	ctrl_2 &= ~SDHCI_CTRL_UHS_MASK;
+ 	if ((timing == MMC_TIMING_MMC_HS200) ||
+ 	    (timing == MMC_TIMING_UHS_SDR104))
+ 		ctrl_2 |= SDHCI_CTRL_UHS_SDR104;
+ 	else if (timing == MMC_TIMING_UHS_SDR12)
+ 		ctrl_2 |= SDHCI_CTRL_UHS_SDR12;
+ 	else if (timing == MMC_TIMING_UHS_SDR25)
+ 		ctrl_2 |= SDHCI_CTRL_UHS_SDR25;
+ 	else if (timing == MMC_TIMING_UHS_SDR50)
+ 		ctrl_2 |= SDHCI_CTRL_UHS_SDR50;
+ 	else if ((timing == MMC_TIMING_UHS_DDR50) ||
+ 		 (timing == MMC_TIMING_MMC_DDR52))
+ 		ctrl_2 |= SDHCI_CTRL_UHS_DDR50;
+ 	sdhci_writew(host, ctrl_2, SDHCI_HOST_CONTROL2);
+ }
+ EXPORT_SYMBOL_GPL(sdhci_set_uhs_signaling);
+ 
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  static void sdhci_do_set_ios(struct sdhci_host *host, struct mmc_ios *ios)
  {
  	unsigned long flags;
diff --cc drivers/mmc/host/sdhci.h
index 0a3ed01887db,7a35395e5f56..000000000000
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@@ -397,6 -395,16 +397,19 @@@ extern void sdhci_remove_host(struct sd
  extern void sdhci_send_command(struct sdhci_host *host,
  				struct mmc_command *cmd);
  
++<<<<<<< HEAD
++=======
+ static inline bool sdhci_sdio_irq_enabled(struct sdhci_host *host)
+ {
+ 	return !!(host->flags & SDHCI_SDIO_IRQ_ENABLED);
+ }
+ 
+ void sdhci_set_clock(struct sdhci_host *host, unsigned int clock);
+ void sdhci_set_bus_width(struct sdhci_host *host, int width);
+ void sdhci_reset(struct sdhci_host *host, u8 mask);
+ void sdhci_set_uhs_signaling(struct sdhci_host *host, unsigned timing);
+ 
++>>>>>>> 96d7b78cfc2f (mmc: sdhci: convert sdhci_set_uhs_signaling() into a library function)
  #ifdef CONFIG_PM
  extern int sdhci_suspend_host(struct sdhci_host *host);
  extern int sdhci_resume_host(struct sdhci_host *host);
* Unmerged path drivers/mmc/host/sdhci-of-arasan.c
* Unmerged path drivers/mmc/host/sdhci-acpi.c
* Unmerged path drivers/mmc/host/sdhci-bcm-kona.c
* Unmerged path drivers/mmc/host/sdhci-bcm2835.c
* Unmerged path drivers/mmc/host/sdhci-cns3xxx.c
* Unmerged path drivers/mmc/host/sdhci-dove.c
* Unmerged path drivers/mmc/host/sdhci-of-arasan.c
* Unmerged path drivers/mmc/host/sdhci-of-esdhc.c
* Unmerged path drivers/mmc/host/sdhci-of-hlwd.c
* Unmerged path drivers/mmc/host/sdhci-pci.c
* Unmerged path drivers/mmc/host/sdhci-pltfm.c
* Unmerged path drivers/mmc/host/sdhci-pxav2.c
* Unmerged path drivers/mmc/host/sdhci-pxav3.c
* Unmerged path drivers/mmc/host/sdhci-s3c.c
* Unmerged path drivers/mmc/host/sdhci-sirf.c
* Unmerged path drivers/mmc/host/sdhci-spear.c
* Unmerged path drivers/mmc/host/sdhci-tegra.c
* Unmerged path drivers/mmc/host/sdhci.c
* Unmerged path drivers/mmc/host/sdhci.h
