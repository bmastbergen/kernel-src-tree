xfs: Correctly lock inode when removing suid and file capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jan Kara <jack@suse.cz>
commit a6de82cab123beaf9406024943caa0242f0618b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a6de82ca.failed

Currently XFS calls file_remove_privs() without holding i_mutex. This is
wrong because that function can end up messing with file permissions and
file capabilities stored in xattrs for which we need i_mutex held.

Fix the problem by grabbing iolock exclusively when we will need to
change anything in permissions / xattrs.

	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit a6de82cab123beaf9406024943caa0242f0618b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_file.c
diff --cc fs/xfs/xfs_file.c
index a43abe74112c,71c2c712e609..000000000000
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@@ -683,7 -630,9 +690,13 @@@ restart
  	 * setgid bits if the process is not being run by root.  This keeps
  	 * people from modifying setuid and setgid binaries.
  	 */
++<<<<<<< HEAD
 +	return file_remove_suid(file);
++=======
+ 	if (!IS_NOSEC(inode))
+ 		return file_remove_privs(file);
+ 	return 0;
++>>>>>>> a6de82cab123 (xfs: Correctly lock inode when removing suid and file capabilities)
  }
  
  /*
* Unmerged path fs/xfs/xfs_file.c
