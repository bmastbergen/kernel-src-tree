Allow duplicate extents in SMB3 not just SMB3.1.1

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Steve French <smfrench@gmail.com>
commit ca9e7a1c85594f61d7ffb414071e6cae82eae23a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ca9e7a1c.failed

Enable duplicate extents (cp --reflink) ioctl for SMB3.0 not just
SMB3.1.1 since have verified that this works to Windows 2016
(REFS) and additional testing done at recent plugfest with
SMB3.0 not just SMB3.1.1  This will also make it easier
for Samba.

	Signed-off-by: Steve French <steve.french@primarydata.com>
	Reviewed-by: David Disseldorp <ddiss@suse.de>
(cherry picked from commit ca9e7a1c85594f61d7ffb414071e6cae82eae23a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/smb2ops.c
diff --cc fs/cifs/smb2ops.c
index 29be80b2c22d,2f169eb79b4a..000000000000
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@@ -810,6 -810,50 +810,53 @@@ smb2_set_file_size(const unsigned int x
  			    cfile->fid.volatile_fid, cfile->pid, &eof, false);
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ smb2_duplicate_extents(const unsigned int xid,
+ 			struct cifsFileInfo *srcfile,
+ 			struct cifsFileInfo *trgtfile, u64 src_off,
+ 			u64 len, u64 dest_off)
+ {
+ 	int rc;
+ 	unsigned int ret_data_len;
+ 	char *retbuf = NULL;
+ 	struct duplicate_extents_to_file dup_ext_buf;
+ 	struct cifs_tcon *tcon = tlink_tcon(trgtfile->tlink);
+ 
+ 	/* server fileays advertise duplicate extent support with this flag */
+ 	if ((le32_to_cpu(tcon->fsAttrInfo.Attributes) &
+ 	     FILE_SUPPORTS_BLOCK_REFCOUNTING) == 0)
+ 		return -EOPNOTSUPP;
+ 
+ 	dup_ext_buf.VolatileFileHandle = srcfile->fid.volatile_fid;
+ 	dup_ext_buf.PersistentFileHandle = srcfile->fid.persistent_fid;
+ 	dup_ext_buf.SourceFileOffset = cpu_to_le64(src_off);
+ 	dup_ext_buf.TargetFileOffset = cpu_to_le64(dest_off);
+ 	dup_ext_buf.ByteCount = cpu_to_le64(len);
+ 	cifs_dbg(FYI, "duplicate extents: src off %lld dst off %lld len %lld",
+ 		src_off, dest_off, len);
+ 
+ 	rc = smb2_set_file_size(xid, tcon, trgtfile, dest_off + len, false);
+ 	if (rc)
+ 		goto duplicate_extents_out;
+ 
+ 	rc = SMB2_ioctl(xid, tcon, trgtfile->fid.persistent_fid,
+ 			trgtfile->fid.volatile_fid,
+ 			FSCTL_DUPLICATE_EXTENTS_TO_FILE,
+ 			true /* is_fsctl */, (char *)&dup_ext_buf,
+ 			sizeof(struct duplicate_extents_to_file),
+ 			(char **)&retbuf,
+ 			&ret_data_len);
+ 
+ 	if (ret_data_len > 0)
+ 		cifs_dbg(FYI, "non-zero response length in duplicate extents");
+ 
+ duplicate_extents_out:
+ 	return rc;
+ }
+ 
++>>>>>>> ca9e7a1c8559 (Allow duplicate extents in SMB3 not just SMB3.1.1)
  static int
  smb2_set_compression(const unsigned int xid, struct cifs_tcon *tcon,
  		   struct cifsFileInfo *cfile)
* Unmerged path fs/cifs/smb2ops.c
