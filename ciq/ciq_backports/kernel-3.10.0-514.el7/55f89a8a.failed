driver core: Do not overwrite secondary fwnode with NULL if it is set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 55f89a8a4538803195395bdf347cbba51dcb1906
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/55f89a8a.failed

If multiple devices share single firmware node like it is case with MFD
devices, the same firmware node (ACPI) is assigned to all of them. The
function also modifies the shared firmware node in order to preserve
secondary firmware node of the device in question.

If the new device which is sharing the firmware node does not have
secondary node it will be NULL which will be assigned to the secondary node
of the shared firmware node losing all built-in properties.

Prevent this by setting the secondary firmware node only if the replacement
is non-NULL.

Print also warning if someone tries to overwrite secondary node that has
already been assigned.

	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 55f89a8a4538803195395bdf347cbba51dcb1906)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index d142ffcefc20,0a8bdade53f2..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -2288,3 -2239,56 +2288,59 @@@ define_dev_printk_level(dev_notice, KER
  define_dev_printk_level(_dev_info, KERN_INFO);
  
  #endif
++<<<<<<< HEAD
++=======
+ 
+ static inline bool fwnode_is_primary(struct fwnode_handle *fwnode)
+ {
+ 	return fwnode && !IS_ERR(fwnode->secondary);
+ }
+ 
+ /**
+  * set_primary_fwnode - Change the primary firmware node of a given device.
+  * @dev: Device to handle.
+  * @fwnode: New primary firmware node of the device.
+  *
+  * Set the device's firmware node pointer to @fwnode, but if a secondary
+  * firmware node of the device is present, preserve it.
+  */
+ void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode)
+ {
+ 	if (fwnode) {
+ 		struct fwnode_handle *fn = dev->fwnode;
+ 
+ 		if (fwnode_is_primary(fn))
+ 			fn = fn->secondary;
+ 
+ 		if (fn) {
+ 			WARN_ON(fwnode->secondary);
+ 			fwnode->secondary = fn;
+ 		}
+ 		dev->fwnode = fwnode;
+ 	} else {
+ 		dev->fwnode = fwnode_is_primary(dev->fwnode) ?
+ 			dev->fwnode->secondary : NULL;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(set_primary_fwnode);
+ 
+ /**
+  * set_secondary_fwnode - Change the secondary firmware node of a given device.
+  * @dev: Device to handle.
+  * @fwnode: New secondary firmware node of the device.
+  *
+  * If a primary firmware node of the device is present, set its secondary
+  * pointer to @fwnode.  Otherwise, set the device's firmware node pointer to
+  * @fwnode.
+  */
+ void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode)
+ {
+ 	if (fwnode)
+ 		fwnode->secondary = ERR_PTR(-ENODEV);
+ 
+ 	if (fwnode_is_primary(dev->fwnode))
+ 		dev->fwnode->secondary = fwnode;
+ 	else
+ 		dev->fwnode = fwnode;
+ }
++>>>>>>> 55f89a8a4538 (driver core: Do not overwrite secondary fwnode with NULL if it is set)
* Unmerged path drivers/base/core.c
