net: add sk_fullsock() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] add sk_fullsock() helper (Florian Westphal) [1295557]
Rebuild_FUZZ: 90.57%
commit-author Eric Dumazet <edumazet@google.com>
commit 1d0ab253872cdd3d8e7913f59c266c7fd01771d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1d0ab253.failed

We have many places where we want to check if a socket is
not a timewait or request socket. Use a helper to avoid
hard coding this.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1d0ab253872cdd3d8e7913f59c266c7fd01771d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sock.h
diff --cc include/net/sock.h
index ae98ecc11e79,e0360f5a53e9..000000000000
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@@ -67,8 -67,8 +67,13 @@@
  #include <linux/atomic.h>
  #include <net/dst.h>
  #include <net/checksum.h>
++<<<<<<< HEAD
 +
 +#include <linux/rh_kabi.h>
++=======
+ #include <net/tcp_states.h>
+ #include <linux/net_tstamp.h>
++>>>>>>> 1d0ab253872c (net: add sk_fullsock() helper)
  
  struct cgroup;
  struct cgroup_subsys;
@@@ -2318,19 -2219,24 +2323,35 @@@ static inline struct sock *skb_steal_so
  	return NULL;
  }
  
++<<<<<<< HEAD
 +extern void sock_enable_timestamp(struct sock *sk, int flag);
 +extern int sock_get_timestamp(struct sock *, struct timeval __user *);
 +extern int sock_get_timestampns(struct sock *, struct timespec __user *);
++=======
+ /* This helper checks if a socket is a full socket,
+  * ie _not_ a timewait or request socket.
+  */
+ static inline bool sk_fullsock(const struct sock *sk)
+ {
+ 	return (1 << sk->sk_state) & ~(TCPF_TIME_WAIT | TCPF_NEW_SYN_RECV);
+ }
+ 
+ void sock_enable_timestamp(struct sock *sk, int flag);
+ int sock_get_timestamp(struct sock *, struct timeval __user *);
+ int sock_get_timestampns(struct sock *, struct timespec __user *);
+ int sock_recv_errqueue(struct sock *sk, struct msghdr *msg, int len, int level,
+ 		       int type);
++>>>>>>> 1d0ab253872c (net: add sk_fullsock() helper)
 +
 +/*
 + *	Enable debug/info messages
 + */
 +extern int net_msg_warn;
 +#define NETDEBUG(fmt, args...) \
 +	do { if (net_msg_warn) printk(fmt,##args); } while (0)
  
 -bool sk_ns_capable(const struct sock *sk,
 -		   struct user_namespace *user_ns, int cap);
 -bool sk_capable(const struct sock *sk, int cap);
 -bool sk_net_capable(const struct sock *sk, int cap);
 +#define LIMIT_NETDEBUG(fmt, args...) \
 +	do { if (net_msg_warn && net_ratelimit()) printk(fmt,##args); } while(0)
  
  extern __u32 sysctl_wmem_max;
  extern __u32 sysctl_rmem_max;
* Unmerged path include/net/sock.h
