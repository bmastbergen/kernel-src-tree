mmc: sdhci-spear: Remove exported header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ulf Hansson <ulf.hansson@linaro.org>
commit 03a6d291047da60d56514c28fa1314235bdf2037
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/03a6d291.failed

Move the member for card_int_gpio into the struct spear_sdhci.

In this way we eliminate the last user of the struct sdhci_plat_data,
which enables us to remove the exported header for sdhci-spear.

	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 03a6d291047da60d56514c28fa1314235bdf2037)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-spear.c
diff --cc drivers/mmc/host/sdhci-spear.c
index 2151911b43ec,df088343d60f..000000000000
--- a/drivers/mmc/host/sdhci-spear.c
+++ b/drivers/mmc/host/sdhci-spear.c
@@@ -26,7 -26,7 +26,11 @@@
  #include <linux/pm.h>
  #include <linux/slab.h>
  #include <linux/mmc/host.h>
++<<<<<<< HEAD
 +#include <linux/mmc/sdhci-spear.h>
++=======
+ #include <linux/mmc/slot-gpio.h>
++>>>>>>> 03a6d291047d (mmc: sdhci-spear: Remove exported header)
  #include <linux/io.h>
  #include "sdhci.h"
  
@@@ -37,61 -37,23 +41,68 @@@ struct spear_sdhci 
  
  /* sdhci ops */
  static const struct sdhci_ops sdhci_pltfm_ops = {
 -	.set_clock = sdhci_set_clock,
 -	.set_bus_width = sdhci_set_bus_width,
 -	.reset = sdhci_reset,
 -	.set_uhs_signaling = sdhci_set_uhs_signaling,
 +	/* Nothing to do for now. */
  };
  
++<<<<<<< HEAD
 +/* gpio card detection interrupt handler */
 +static irqreturn_t sdhci_gpio_irq(int irq, void *dev_id)
 +{
 +	struct platform_device *pdev = dev_id;
 +	struct sdhci_host *host = platform_get_drvdata(pdev);
 +	struct spear_sdhci *sdhci = dev_get_platdata(&pdev->dev);
 +	unsigned long gpio_irq_type;
 +	int val;
 +
 +	val = gpio_get_value(sdhci->data->card_int_gpio);
 +
 +	/* val == 1 -> card removed, val == 0 -> card inserted */
 +	/* if card removed - set irq for low level, else vice versa */
 +	gpio_irq_type = val ? IRQF_TRIGGER_LOW : IRQF_TRIGGER_HIGH;
 +	irq_set_irq_type(irq, gpio_irq_type);
 +
 +	/* inform sdhci driver about card insertion/removal */
 +	tasklet_schedule(&host->card_tasklet);
 +
 +	return IRQ_HANDLED;
 +}
 +
 +#ifdef CONFIG_OF
 +static struct sdhci_plat_data *sdhci_probe_config_dt(struct platform_device *pdev)
++=======
+ static void sdhci_probe_config_dt(struct device_node *np,
+ 				struct spear_sdhci *host)
++>>>>>>> 03a6d291047d (mmc: sdhci-spear: Remove exported header)
  {
- 	struct device_node *np = pdev->dev.of_node;
- 	struct sdhci_plat_data *pdata = NULL;
  	int cd_gpio;
  
  	cd_gpio = of_get_named_gpio(np, "cd-gpios", 0);
  	if (!gpio_is_valid(cd_gpio))
  		cd_gpio = -1;
  
++<<<<<<< HEAD
 +	/* If pdata is required */
 +	if (cd_gpio != -1) {
 +		pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
 +		if (!pdata) {
 +			dev_err(&pdev->dev, "DT: kzalloc failed\n");
 +			return ERR_PTR(-ENOMEM);
 +		}
 +	}
 +
 +	pdata->card_int_gpio = cd_gpio;
 +
 +	return pdata;
++=======
+ 	host->card_int_gpio = cd_gpio;
++>>>>>>> 03a6d291047d (mmc: sdhci-spear: Remove exported header)
 +}
 +#else
 +static struct sdhci_plat_data *sdhci_probe_config_dt(struct platform_device *pdev)
 +{
 +	return ERR_PTR(-ENOSYS);
  }
 +#endif
  
  static int sdhci_probe(struct platform_device *pdev)
  {
@@@ -141,40 -105,20 +152,57 @@@
  		dev_dbg(&pdev->dev, "Error setting desired clk, clk=%lu\n",
  				clk_get_rate(sdhci->clk));
  
++<<<<<<< HEAD
 +	if (np) {
 +		sdhci->data = sdhci_probe_config_dt(pdev);
 +		if (IS_ERR(sdhci->data)) {
 +			dev_err(&pdev->dev, "DT: Failed to get pdata\n");
 +			return -ENODEV;
 +		}
 +	} else {
 +		sdhci->data = dev_get_platdata(&pdev->dev);
 +	}
 +
 +	pdev->dev.platform_data = sdhci;
 +
 +	if (pdev->dev.parent)
 +		host = sdhci_alloc_host(pdev->dev.parent, 0);
 +	else
 +		host = sdhci_alloc_host(&pdev->dev, 0);
 +
 +	if (IS_ERR(host)) {
 +		ret = PTR_ERR(host);
 +		dev_dbg(&pdev->dev, "error allocating host\n");
 +		goto disable_clk;
 +	}
 +
 +	host->hw_name = "sdhci";
 +	host->ops = &sdhci_pltfm_ops;
 +	host->irq = platform_get_irq(pdev, 0);
 +	host->quirks = SDHCI_QUIRK_BROKEN_ADMA;
 +
 +	host->ioaddr = devm_ioremap(&pdev->dev, iomem->start,
 +			resource_size(iomem));
 +	if (!host->ioaddr) {
 +		ret = -ENOMEM;
 +		dev_dbg(&pdev->dev, "failed to remap registers\n");
 +		goto free_host;
++=======
+ 	sdhci_probe_config_dt(pdev->dev.of_node, sdhci);
+ 	/*
+ 	 * It is optional to use GPIOs for sdhci card detection. If
+ 	 * sdhci->card_int_gpio < 0, then use original sdhci lines otherwise
+ 	 * GPIO lines. We use the built-in GPIO support for this.
+ 	 */
+ 	if (sdhci->card_int_gpio >= 0) {
+ 		ret = mmc_gpio_request_cd(host->mmc, sdhci->card_int_gpio, 0);
+ 		if (ret < 0) {
+ 			dev_dbg(&pdev->dev,
+ 				"failed to request card-detect gpio%d\n",
+ 				sdhci->card_int_gpio);
+ 			goto disable_clk;
+ 		}
++>>>>>>> 03a6d291047d (mmc: sdhci-spear: Remove exported header)
  	}
  
  	ret = sdhci_add_host(host);
* Unmerged path drivers/mmc/host/sdhci-spear.c
diff --git a/include/linux/mmc/sdhci-spear.h b/include/linux/mmc/sdhci-spear.h
deleted file mode 100644
index 8cc095a76cf8..000000000000
--- a/include/linux/mmc/sdhci-spear.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * include/linux/mmc/sdhci-spear.h
- *
- * SDHCI declarations specific to ST SPEAr platform
- *
- * Copyright (C) 2010 ST Microelectronics
- * Viresh Kumar <viresh.linux@gmail.com>
- *
- * This file is licensed under the terms of the GNU General Public
- * License version 2. This program is licensed "as is" without any
- * warranty of any kind, whether express or implied.
- */
-
-#ifndef LINUX_MMC_SDHCI_SPEAR_H
-#define LINUX_MMC_SDHCI_SPEAR_H
-
-#include <linux/platform_device.h>
-/*
- * struct sdhci_plat_data: spear sdhci platform data structure
- *
- * card_int_gpio: gpio pin used for card detection
- */
-struct sdhci_plat_data {
-	int card_int_gpio;
-};
-
-/* This function is used to set platform_data field of pdev->dev */
-static inline void
-sdhci_set_plat_data(struct platform_device *pdev, struct sdhci_plat_data *data)
-{
-	pdev->dev.platform_data = data;
-}
-
-#endif /* LINUX_MMC_SDHCI_SPEAR_H */
