libceph: monc ping rate is 10s

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 58d81b1294f02262a141687cd62529c1ec8e6484
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/58d81b12.failed

Split ping interval and ping timeout: ping interval is 10s; keepalive
timeout is 30s.

Make monc_ping_timeout a constant while at it - it's not actually
exported as a mount option (and the rest of tick-related settings won't
be either), so it's got no place in ceph_options.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 58d81b1294f02262a141687cd62529c1ec8e6484)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ceph/libceph.h
#	net/ceph/ceph_common.c
#	net/ceph/mon_client.c
diff --cc include/linux/ceph/libceph.h
index 1cb06e0fe132,f5466273b9a3..000000000000
--- a/include/linux/ceph/libceph.h
+++ b/include/linux/ceph/libceph.h
@@@ -44,9 -44,9 +44,15 @@@ struct ceph_options 
  	int flags;
  	struct ceph_fsid fsid;
  	struct ceph_entity_addr my_addr;
++<<<<<<< HEAD
 +	int mount_timeout;
 +	int osd_idle_ttl;
 +	int osd_keepalive_timeout;
++=======
+ 	unsigned long mount_timeout;		/* jiffies */
+ 	unsigned long osd_idle_ttl;		/* jiffies */
+ 	unsigned long osd_keepalive_timeout;	/* jiffies */
++>>>>>>> 58d81b1294f0 (libceph: monc ping rate is 10s)
  
  	/*
  	 * any type that can't be simply compared or doesn't need need
@@@ -64,9 -64,12 +70,18 @@@
  /*
   * defaults
   */
++<<<<<<< HEAD
 +#define CEPH_MOUNT_TIMEOUT_DEFAULT  60
 +#define CEPH_OSD_KEEPALIVE_DEFAULT  5
 +#define CEPH_OSD_IDLE_TTL_DEFAULT    60
++=======
+ #define CEPH_MOUNT_TIMEOUT_DEFAULT	msecs_to_jiffies(60 * 1000)
+ #define CEPH_OSD_KEEPALIVE_DEFAULT	msecs_to_jiffies(5 * 1000)
+ #define CEPH_OSD_IDLE_TTL_DEFAULT	msecs_to_jiffies(60 * 1000)
+ 
+ #define CEPH_MONC_PING_INTERVAL		msecs_to_jiffies(10 * 1000)
+ #define CEPH_MONC_PING_TIMEOUT		msecs_to_jiffies(30 * 1000)
++>>>>>>> 58d81b1294f0 (libceph: monc ping rate is 10s)
  
  #define CEPH_MSG_MAX_FRONT_LEN	(16*1024*1024)
  #define CEPH_MSG_MAX_MIDDLE_LEN	(16*1024*1024)
diff --cc net/ceph/ceph_common.c
index 78413b68d412,dcc18c6f7cf9..000000000000
--- a/net/ceph/ceph_common.c
+++ b/net/ceph/ceph_common.c
@@@ -356,8 -359,8 +356,13 @@@ ceph_parse_options(char *options, cons
  	/* start with defaults */
  	opt->flags = CEPH_OPT_DEFAULT;
  	opt->osd_keepalive_timeout = CEPH_OSD_KEEPALIVE_DEFAULT;
++<<<<<<< HEAD
 +	opt->mount_timeout = CEPH_MOUNT_TIMEOUT_DEFAULT; /* seconds */
 +	opt->osd_idle_ttl = CEPH_OSD_IDLE_TTL_DEFAULT;   /* seconds */
++=======
+ 	opt->mount_timeout = CEPH_MOUNT_TIMEOUT_DEFAULT;
+ 	opt->osd_idle_ttl = CEPH_OSD_IDLE_TTL_DEFAULT;
++>>>>>>> 58d81b1294f0 (libceph: monc ping rate is 10s)
  
  	/* get mon ip(s) */
  	/* ip1[:port1][,ip2[:port2]...] */
diff --cc net/ceph/mon_client.c
index 4a66c44fabbd,23a270c49baf..000000000000
--- a/net/ceph/mon_client.c
+++ b/net/ceph/mon_client.c
@@@ -170,18 -202,27 +170,31 @@@ static bool __sub_expired(struct ceph_m
   */
  static void __schedule_delayed(struct ceph_mon_client *monc)
  {
++<<<<<<< HEAD
 +	unsigned int delay;
++=======
+ 	unsigned long delay;
++>>>>>>> 58d81b1294f0 (libceph: monc ping rate is 10s)
  
 -	if (monc->cur_mon < 0 || __sub_expired(monc)) {
 +	if (monc->cur_mon < 0 || __sub_expired(monc))
  		delay = 10 * HZ;
++<<<<<<< HEAD
 +	else
 +		delay = 20 * HZ;
 +	dout("__schedule_delayed after %u\n", delay);
 +	schedule_delayed_work(&monc->delayed_work, delay);
++=======
+ 	} else {
+ 		delay = CEPH_MONC_PING_INTERVAL;
+ 	}
+ 	dout("__schedule_delayed after %lu\n", delay);
+ 	schedule_delayed_work(&monc->delayed_work,
+ 			      round_jiffies_relative(delay));
++>>>>>>> 58d81b1294f0 (libceph: monc ping rate is 10s)
  }
  
 -const char *ceph_sub_str[] = {
 -	[CEPH_SUB_MDSMAP] = "mdsmap",
 -	[CEPH_SUB_MONMAP] = "monmap",
 -	[CEPH_SUB_OSDMAP] = "osdmap",
 -};
 -
  /*
 - * Send subscribe request for one or more maps, according to
 - * monc->subs.
 + * Send subscribe request for mdsmap and/or osdmap.
   */
  static void __send_subscribe(struct ceph_mon_client *monc)
  {
@@@ -693,12 -790,29 +706,24 @@@ static void delayed_work(struct work_st
  		__close_session(monc);
  		__open_session(monc);  /* continue hunting */
  	} else {
++<<<<<<< HEAD
 +		ceph_con_keepalive(&monc->con);
++=======
+ 		int is_auth = ceph_auth_is_authenticated(monc->auth);
+ 		if (ceph_con_keepalive_expired(&monc->con,
+ 					       CEPH_MONC_PING_TIMEOUT)) {
+ 			dout("monc keepalive timeout\n");
+ 			is_auth = 0;
+ 			__close_session(monc);
+ 			monc->hunting = true;
+ 			__open_session(monc);
+ 		}
++>>>>>>> 58d81b1294f0 (libceph: monc ping rate is 10s)
  
 -		if (!monc->hunting) {
 -			ceph_con_keepalive(&monc->con);
 -			__validate_auth(monc);
 -		}
 -
 -		if (is_auth) {
 -			unsigned long now = jiffies;
 +		__validate_auth(monc);
  
 -			dout("%s renew subs? now %lu renew after %lu\n",
 -			     __func__, now, monc->sub_renew_after);
 -			if (time_after_eq(now, monc->sub_renew_after))
 -				__send_subscribe(monc);
 -		}
 +		if (ceph_auth_is_authenticated(monc->auth))
 +			__send_subscribe(monc);
  	}
  	__schedule_delayed(monc);
  	mutex_unlock(&monc->mutex);
* Unmerged path include/linux/ceph/libceph.h
* Unmerged path net/ceph/ceph_common.c
* Unmerged path net/ceph/mon_client.c
