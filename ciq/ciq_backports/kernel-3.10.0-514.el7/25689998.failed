clkdev: add clkdev_create() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Russell King <rmk+kernel@arm.linux.org.uk>
commit 2568999835d7797afce3dcc3a3f368051ffcaf1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/25689998.failed

Add a helper to allocate and add a clk_lookup structure.  This can not
only be used in several places in clkdev.c to simplify the code, but
more importantly, can be used by callers of the clkdev code to simplify
their clkdev creation and registration.

	Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
(cherry picked from commit 2568999835d7797afce3dcc3a3f368051ffcaf1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/clk/clkdev.c
diff --cc drivers/clk/clkdev.c
index 442a31363873,c0eaf0973bd2..000000000000
--- a/drivers/clk/clkdev.c
+++ b/drivers/clk/clkdev.c
@@@ -236,10 -301,33 +249,38 @@@ clkdev_alloc(struct clk *clk, const cha
  }
  EXPORT_SYMBOL(clkdev_alloc);
  
++<<<<<<< HEAD
 +int clk_add_alias(const char *alias, const char *alias_dev_name, char *id,
 +	struct device *dev)
++=======
+ /**
+  * clkdev_create - allocate and add a clkdev lookup structure
+  * @clk: struct clk to associate with all clk_lookups
+  * @con_id: connection ID string on device
+  * @dev_fmt: format string describing device name
+  *
+  * Returns a clk_lookup structure, which can be later unregistered and
+  * freed.
+  */
+ struct clk_lookup *clkdev_create(struct clk *clk, const char *con_id,
+ 	const char *dev_fmt, ...)
+ {
+ 	struct clk_lookup *cl;
+ 	va_list ap;
+ 
+ 	va_start(ap, dev_fmt);
+ 	cl = vclkdev_create(__clk_get_hw(clk), con_id, dev_fmt, ap);
+ 	va_end(ap);
+ 
+ 	return cl;
+ }
+ EXPORT_SYMBOL_GPL(clkdev_create);
+ 
+ int clk_add_alias(const char *alias, const char *alias_dev_name,
+ 	const char *con_id, struct device *dev)
++>>>>>>> 2568999835d7 (clkdev: add clkdev_create() helper)
  {
 -	struct clk *r = clk_get(dev, con_id);
 +	struct clk *r = clk_get(dev, id);
  	struct clk_lookup *l;
  
  	if (IS_ERR(r))
@@@ -290,16 -376,12 +329,15 @@@ int clk_register_clkdev(struct clk *clk
  		return PTR_ERR(clk);
  
  	va_start(ap, dev_fmt);
++<<<<<<< HEAD
 +	cl = vclkdev_alloc(clk, con_id, dev_fmt, ap);
++=======
+ 	cl = vclkdev_create(__clk_get_hw(clk), con_id, dev_fmt, ap);
++>>>>>>> 2568999835d7 (clkdev: add clkdev_create() helper)
  	va_end(ap);
  
- 	if (!cl)
- 		return -ENOMEM;
- 
- 	clkdev_add(cl);
- 
- 	return 0;
+ 	return cl ? 0 : -ENOMEM;
  }
 -EXPORT_SYMBOL(clk_register_clkdev);
  
  /**
   * clk_register_clkdevs - register a set of clk_lookup for a struct clk
* Unmerged path drivers/clk/clkdev.c
diff --git a/include/linux/clkdev.h b/include/linux/clkdev.h
index a6a6f603103b..53f6435465d2 100644
--- a/include/linux/clkdev.h
+++ b/include/linux/clkdev.h
@@ -37,6 +37,9 @@ struct clk_lookup *clkdev_alloc(struct clk *clk, const char *con_id,
 void clkdev_add(struct clk_lookup *cl);
 void clkdev_drop(struct clk_lookup *cl);
 
+struct clk_lookup *clkdev_create(struct clk *clk, const char *con_id,
+	const char *dev_fmt, ...);
+
 void clkdev_add_table(struct clk_lookup *, size_t);
 int clk_add_alias(const char *, const char *, char *, struct device *);
 
