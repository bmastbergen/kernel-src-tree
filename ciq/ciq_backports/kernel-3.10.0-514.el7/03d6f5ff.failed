mmc: sdhci: move timeout_clk dynamically calculation code into common code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: move timeout_clk dynamically calculation code into common code (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 96.50%
commit-author Aisheng Dong <b29396@freescale.com>
commit 03d6f5ffc5c469e66bfe0a7d8120d29d4c3c07c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/03d6f5ff.failed

The timeout_clk calculation code for SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK case
is common and could be moved into common sdhci_do_set_ios, then platform code
which is not using sdhci_set_clock does not need to write the same code again.

	Signed-off-by: Dong Aisheng <b29396@freescale.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 03d6f5ffc5c469e66bfe0a7d8120d29d4c3c07c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci.c
diff --cc drivers/mmc/host/sdhci.c
index 083c3f4ebb88,f6a683b9ffc3..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -1217,15 -1201,8 +1217,18 @@@ static void sdhci_set_clock(struct sdhc
  	}
  
  clock_set:
- 	if (real_div) {
+ 	if (real_div)
  		host->mmc->actual_clock = (host->max_clk * clk_mul) / real_div;
++<<<<<<< HEAD
 +		if (host->quirks & SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK) {
 +			host->timeout_clk = host->mmc->actual_clock / 1000;
 +			host->mmc->max_busy_timeout =
 +				(1 << 27) / host->timeout_clk;
 +		}
 +	}
 +
++=======
++>>>>>>> 03d6f5ffc5c4 (mmc: sdhci: move timeout_clk dynamically calculation code into common code)
  	clk |= (div & SDHCI_DIV_MASK) << SDHCI_DIVIDER_SHIFT;
  	clk |= ((div & SDHCI_DIV_HI_MASK) >> SDHCI_DIV_MASK_LEN)
  		<< SDHCI_DIVIDER_HI_SHIFT;
@@@ -1457,8 -1476,22 +1460,27 @@@ static void sdhci_do_set_ios(struct sdh
  		!(host->quirks2 & SDHCI_QUIRK2_PRESET_VALUE_BROKEN))
  		sdhci_enable_preset_value(host, false);
  
++<<<<<<< HEAD
 +	if (!ios->clock || ios->clock != host->clock)
 +		sdhci_set_clock(host, ios->clock);
++=======
+ 	if (!ios->clock || ios->clock != host->clock) {
+ 		host->ops->set_clock(host, ios->clock);
+ 		host->clock = ios->clock;
+ 
+ 		if (host->quirks & SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK &&
+ 		    host->clock) {
+ 			host->timeout_clk = host->mmc->actual_clock ?
+ 						host->mmc->actual_clock / 1000 :
+ 						host->clock / 1000;
+ 			host->mmc->max_busy_timeout =
+ 				host->ops->get_max_timeout_count ?
+ 				host->ops->get_max_timeout_count(host) :
+ 				1 << 27;
+ 			host->mmc->max_busy_timeout /= host->timeout_clk;
+ 		}
+ 	}
++>>>>>>> 03d6f5ffc5c4 (mmc: sdhci: move timeout_clk dynamically calculation code into common code)
  
  	sdhci_set_power(host, ios->power_mode, ios->vdd);
  
* Unmerged path drivers/mmc/host/sdhci.c
