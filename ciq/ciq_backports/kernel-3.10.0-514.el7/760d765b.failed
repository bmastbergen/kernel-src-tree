x86/microcode: Parse built-in microcode early

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode: Parse built-in microcode early (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 95.35%
commit-author Borislav Petkov <bp@suse.de>
commit 760d765b2bb662be177d4b5b271ced8debc803ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/760d765b.failed

Apparently, people do build microcode into the kernel image, i.e.
CONFIG_FIRMWARE_IN_KERNEL=y.

Make that work in the early loader which is where microcode should be
preferably loaded anyway.

Note that you need to specify the microcode filename with the path
relative to the toplevel firmware directory (the same like the late
loading method) in CONFIG_EXTRA_FIRMWARE=y so that early loader can
find it.

I.e., something like this (Intel variant):

  CONFIG_FIRMWARE_IN_KERNEL=y
  CONFIG_EXTRA_FIRMWARE="intel-ucode/06-3a-09"
  CONFIG_EXTRA_FIRMWARE_DIR="/lib/firmware/"

While at it, add me to the loader copyright boilerplate.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Daniel J Blueman <daniel@numascale.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 760d765b2bb662be177d4b5b271ced8debc803ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/microcode.h
#	arch/x86/kernel/cpu/microcode/core_early.c
diff --cc arch/x86/include/asm/microcode.h
index 64dc362506b7,9e6278c7140e..000000000000
--- a/arch/x86/include/asm/microcode.h
+++ b/arch/x86/include/asm/microcode.h
@@@ -78,6 -80,81 +80,11 @@@ static inline void __exit exit_amd_micr
  extern void __init load_ucode_bsp(void);
  extern void load_ucode_ap(void);
  extern int __init save_microcode_in_initrd(void);
++<<<<<<< HEAD
++=======
+ void reload_early_microcode(void);
+ extern bool get_builtin_firmware(struct cpio_data *cd, const char *name);
++>>>>>>> 760d765b2bb6 (x86/microcode: Parse built-in microcode early)
  #else
  static inline void __init load_ucode_bsp(void) {}
  static inline void load_ucode_ap(void) {}
@@@ -85,6 -162,10 +92,13 @@@ static inline int __init save_microcode
  {
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ static inline void reload_early_microcode(void) {}
+ static inline bool get_builtin_firmware(struct cpio_data *cd, const char *name)
+ {
+ 	return false;
+ }
++>>>>>>> 760d765b2bb6 (x86/microcode: Parse built-in microcode early)
  #endif
- 
  #endif /* _ASM_X86_MICROCODE_H */
diff --cc arch/x86/kernel/cpu/microcode/core_early.c
index 2c017f242a78,979ca78b1561..000000000000
--- a/arch/x86/kernel/cpu/microcode/core_early.c
+++ b/arch/x86/kernel/cpu/microcode/core_early.c
@@@ -94,9 -45,28 +96,28 @@@ static bool __init check_loader_disable
  	return *res;
  }
  
+ extern struct builtin_fw __start_builtin_fw[];
+ extern struct builtin_fw __end_builtin_fw[];
+ 
+ bool get_builtin_firmware(struct cpio_data *cd, const char *name)
+ {
+ #ifdef CONFIG_FW_LOADER
+ 	struct builtin_fw *b_fw;
+ 
+ 	for (b_fw = __start_builtin_fw; b_fw != __end_builtin_fw; b_fw++) {
+ 		if (!strcmp(name, b_fw->name)) {
+ 			cd->size = b_fw->size;
+ 			cd->data = b_fw->data;
+ 			return true;
+ 		}
+ 	}
+ #endif
+ 	return false;
+ }
+ 
  void __init load_ucode_bsp(void)
  {
 -	int vendor, family;
 +	int vendor, x86;
  
  	if (check_loader_disabled_bsp())
  		return;
@@@ -113,8 -83,8 +134,13 @@@
  			load_ucode_intel_bsp();
  		break;
  	case X86_VENDOR_AMD:
++<<<<<<< HEAD
 +		if (x86 >= 0x10)
 +			load_ucode_amd_bsp();
++=======
+ 		if (family >= 0x10)
+ 			load_ucode_amd_bsp(family);
++>>>>>>> 760d765b2bb6 (x86/microcode: Parse built-in microcode early)
  		break;
  	default:
  		break;
* Unmerged path arch/x86/include/asm/microcode.h
diff --git a/arch/x86/include/asm/microcode_amd.h b/arch/x86/include/asm/microcode_amd.h
index 48a48024ebe4..dda331c79a29 100644
--- a/arch/x86/include/asm/microcode_amd.h
+++ b/arch/x86/include/asm/microcode_amd.h
@@ -65,11 +65,11 @@ extern enum ucode_state load_microcode_amd(int cpu, u8 family, const u8 *data, s
 extern u8 amd_ucode_patch[PATCH_MAX_SIZE];
 
 #ifdef CONFIG_MICROCODE_AMD_EARLY
-extern void __init load_ucode_amd_bsp(void);
+extern void __init load_ucode_amd_bsp(int family);
 extern void load_ucode_amd_ap(void);
 extern int __init save_microcode_in_initrd_amd(void);
 #else
-static inline void __init load_ucode_amd_bsp(void) {}
+static inline void __init load_ucode_amd_bsp(int family) {}
 static inline void load_ucode_amd_ap(void) {}
 static inline int __init save_microcode_in_initrd_amd(void) { return -EINVAL; }
 #endif
diff --git a/arch/x86/kernel/cpu/microcode/amd_early.c b/arch/x86/kernel/cpu/microcode/amd_early.c
index 3d988a30a21d..868f03d3cf04 100644
--- a/arch/x86/kernel/cpu/microcode/amd_early.c
+++ b/arch/x86/kernel/cpu/microcode/amd_early.c
@@ -228,7 +228,18 @@ static void apply_ucode_in_initrd(void *ucode, size_t size, bool save_patch)
 	}
 }
 
-void __init load_ucode_amd_bsp(void)
+static bool __init load_builtin_amd_microcode(struct cpio_data *cp, int family)
+{
+	char fw_name[36] = "amd-ucode/microcode_amd.bin";
+
+	if (family >= 0x15)
+		snprintf(fw_name, sizeof(fw_name),
+			 "amd-ucode/microcode_amd_fam%.2xh.bin", family);
+
+	return get_builtin_firmware(cp, fw_name);
+}
+
+void __init load_ucode_amd_bsp(int family)
 {
 	struct cpio_data cp;
 	void **data;
@@ -243,8 +254,10 @@ void __init load_ucode_amd_bsp(void)
 #endif
 
 	cp = find_ucode_in_initrd();
-	if (!cp.data)
-		return;
+	if (!cp.data) {
+		if (!load_builtin_amd_microcode(&cp, family))
+			return;
+	}
 
 	*data = cp.data;
 	*size = cp.size;
* Unmerged path arch/x86/kernel/cpu/microcode/core_early.c
diff --git a/arch/x86/kernel/cpu/microcode/intel_early.c b/arch/x86/kernel/cpu/microcode/intel_early.c
index f074fe1d5a06..3592aeb46116 100644
--- a/arch/x86/kernel/cpu/microcode/intel_early.c
+++ b/arch/x86/kernel/cpu/microcode/intel_early.c
@@ -551,6 +551,23 @@ out:
 EXPORT_SYMBOL_GPL(save_mc_for_early);
 #endif
 
+static bool __init load_builtin_intel_microcode(struct cpio_data *cp)
+{
+	u32 eax = 0x00000001, ebx, ecx = 0, edx;
+	int family, model, stepping;
+	char name[30];
+
+	native_cpuid(&eax, &ebx, &ecx, &edx);
+
+	family   = __x86_family(eax);
+	model    = x86_model(eax);
+	stepping = eax & 0xf;
+
+	sprintf(name, "intel-ucode/%02x-%02x-%02x", family, model, stepping);
+
+	return get_builtin_firmware(cp, name);
+}
+
 static __initdata char ucode_name[] = "kernel/x86/microcode/GenuineIntel.bin";
 static __init enum ucode_state
 scan_microcode(unsigned long start, unsigned long end,
@@ -571,8 +588,10 @@ scan_microcode(unsigned long start, unsigned long end,
 	cd.size = 0;
 
 	cd = find_cpio_data(p, (void *)start, size, &offset);
-	if (!cd.data)
-		return UCODE_ERROR;
+	if (!cd.data) {
+		if (!load_builtin_intel_microcode(&cd))
+			return UCODE_ERROR;
+	}
 
 
 	return get_matching_model_microcode(0, start, cd.data, cd.size,
