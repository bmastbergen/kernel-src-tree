usb: hcd: add generic PHY support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
commit 0043325495222139daa0696db736f67658dc7770
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/00433254.failed

Add the generic PHY support, analogous to the USB PHY support. Intended it to be
used with the PCI EHCI/OHCI drivers and the xHCI platform driver.

	Signed-off-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
	Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 0043325495222139daa0696db736f67658dc7770)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/core/hcd.c
#	include/linux/usb/hcd.h
diff --cc drivers/usb/core/hcd.c
index 28c5a88b883b,b84fb141e122..000000000000
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@@ -42,8 -42,10 +42,9 @@@
  #include <linux/pm_runtime.h>
  #include <linux/types.h>
  
+ #include <linux/phy/phy.h>
  #include <linux/usb.h>
  #include <linux/usb/hcd.h>
 -#include <linux/usb/phy.h>
  
  #include "usb.h"
  
@@@ -2663,7 -2686,7 +2687,11 @@@ int usb_add_hcd(struct usb_hcd *hcd
  	 */
  	if ((retval = hcd_buffer_create(hcd)) != 0) {
  		dev_dbg(hcd->self.controller, "pool alloc failed\n");
++<<<<<<< HEAD
 +		return retval;
++=======
+ 		goto err_create_buf;
++>>>>>>> 004332549522 (usb: hcd: add generic PHY support)
  	}
  
  	if ((retval = usb_register_bus(&hcd->self)) < 0)
@@@ -2796,6 -2813,19 +2824,22 @@@ err_allocate_root_hub
  	usb_deregister_bus(&hcd->self);
  err_register_bus:
  	hcd_buffer_destroy(hcd);
++<<<<<<< HEAD
++=======
+ err_create_buf:
+ 	if (IS_ENABLED(CONFIG_GENERIC_PHY) && hcd->phy) {
+ 		phy_power_off(hcd->phy);
+ 		phy_exit(hcd->phy);
+ 		phy_put(hcd->phy);
+ 		hcd->phy = NULL;
+ 	}
+ err_phy:
+ 	if (hcd->remove_phy && hcd->usb_phy) {
+ 		usb_phy_shutdown(hcd->usb_phy);
+ 		usb_put_phy(hcd->usb_phy);
+ 		hcd->usb_phy = NULL;
+ 	}
++>>>>>>> 004332549522 (usb: hcd: add generic PHY support)
  	return retval;
  }
  EXPORT_SYMBOL_GPL(usb_add_hcd);
@@@ -2867,6 -2897,18 +2911,21 @@@ void usb_remove_hcd(struct usb_hcd *hcd
  
  	usb_deregister_bus(&hcd->self);
  	hcd_buffer_destroy(hcd);
++<<<<<<< HEAD
++=======
+ 
+ 	if (IS_ENABLED(CONFIG_GENERIC_PHY) && hcd->phy) {
+ 		phy_power_off(hcd->phy);
+ 		phy_exit(hcd->phy);
+ 		phy_put(hcd->phy);
+ 		hcd->phy = NULL;
+ 	}
+ 	if (hcd->remove_phy && hcd->usb_phy) {
+ 		usb_phy_shutdown(hcd->usb_phy);
+ 		usb_put_phy(hcd->usb_phy);
+ 		hcd->usb_phy = NULL;
+ 	}
++>>>>>>> 004332549522 (usb: hcd: add generic PHY support)
  
  	usb_put_invalidate_rhdev(hcd);
  }
diff --cc include/linux/usb/hcd.h
index 8845ed2f1978,cd96a2bc3388..000000000000
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@@ -106,7 -106,8 +106,12 @@@ struct usb_hcd 
  	 * OTG and some Host controllers need software interaction with phys;
  	 * other external phys should be software-transparent
  	 */
++<<<<<<< HEAD
 +	struct usb_phy	*phy;
++=======
+ 	struct usb_phy		*usb_phy;
+ 	struct phy		*phy;
++>>>>>>> 004332549522 (usb: hcd: add generic PHY support)
  
  	/* Flags that need to be manipulated atomically because they can
  	 * change while the host controller is running.  Always use
* Unmerged path drivers/usb/core/hcd.c
* Unmerged path include/linux/usb/hcd.h
