x86/microcode: Correct CPU family related variable types

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] microcode: Correct CPU family related variable types (Prarit Bhargava) [1253762]
Rebuild_FUZZ: 96.30%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 7b179b8feba3b887be5ddd501c25d924cf44d70a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7b179b8f.failed

Change the type of variables and function prototypes to be in
alignment with what the x86_*() / __x86_*() family/model
functions return.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1433436928-31903-21-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 7b179b8feba3b887be5ddd501c25d924cf44d70a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/microcode_amd.h
#	arch/x86/kernel/cpu/microcode/amd_early.c
#	arch/x86/kernel/cpu/microcode/core_early.c
#	arch/x86/kernel/cpu/microcode/intel_early.c
diff --cc arch/x86/include/asm/microcode_amd.h
index 48a48024ebe4,ac6d328977a6..000000000000
--- a/arch/x86/include/asm/microcode_amd.h
+++ b/arch/x86/include/asm/microcode_amd.h
@@@ -65,13 -65,15 +65,21 @@@ extern enum ucode_state load_microcode_
  extern u8 amd_ucode_patch[PATCH_MAX_SIZE];
  
  #ifdef CONFIG_MICROCODE_AMD_EARLY
++<<<<<<< HEAD
 +extern void __init load_ucode_amd_bsp(void);
++=======
+ extern void __init load_ucode_amd_bsp(unsigned int family);
++>>>>>>> 7b179b8feba3 (x86/microcode: Correct CPU family related variable types)
  extern void load_ucode_amd_ap(void);
  extern int __init save_microcode_in_initrd_amd(void);
 -void reload_ucode_amd(void);
  #else
++<<<<<<< HEAD
 +static inline void __init load_ucode_amd_bsp(void) {}
++=======
+ static inline void __init load_ucode_amd_bsp(unsigned int family) {}
++>>>>>>> 7b179b8feba3 (x86/microcode: Correct CPU family related variable types)
  static inline void load_ucode_amd_ap(void) {}
  static inline int __init save_microcode_in_initrd_amd(void) { return -EINVAL; }
 -void reload_ucode_amd(void) {}
  #endif
  
  #endif /* _ASM_X86_MICROCODE_AMD_H */
diff --cc arch/x86/kernel/cpu/microcode/amd_early.c
index 3d988a30a21d,e8a215a9a345..000000000000
--- a/arch/x86/kernel/cpu/microcode/amd_early.c
+++ b/arch/x86/kernel/cpu/microcode/amd_early.c
@@@ -228,7 -228,23 +228,27 @@@ static void apply_ucode_in_initrd(void 
  	}
  }
  
++<<<<<<< HEAD
 +void __init load_ucode_amd_bsp(void)
++=======
+ static bool __init load_builtin_amd_microcode(struct cpio_data *cp,
+ 					      unsigned int family)
+ {
+ #ifdef CONFIG_X86_64
+ 	char fw_name[36] = "amd-ucode/microcode_amd.bin";
+ 
+ 	if (family >= 0x15)
+ 		snprintf(fw_name, sizeof(fw_name),
+ 			 "amd-ucode/microcode_amd_fam%.2xh.bin", family);
+ 
+ 	return get_builtin_firmware(cp, fw_name);
+ #else
+ 	return false;
+ #endif
+ }
+ 
+ void __init load_ucode_amd_bsp(unsigned int family)
++>>>>>>> 7b179b8feba3 (x86/microcode: Correct CPU family related variable types)
  {
  	struct cpio_data cp;
  	void **data;
diff --cc arch/x86/kernel/cpu/microcode/core_early.c
index 2c017f242a78,8ebc421d6299..000000000000
--- a/arch/x86/kernel/cpu/microcode/core_early.c
+++ b/arch/x86/kernel/cpu/microcode/core_early.c
@@@ -94,9 -45,29 +94,14 @@@ static bool __init check_loader_disable
  	return *res;
  }
  
 -extern struct builtin_fw __start_builtin_fw[];
 -extern struct builtin_fw __end_builtin_fw[];
 -
 -bool get_builtin_firmware(struct cpio_data *cd, const char *name)
 -{
 -#ifdef CONFIG_FW_LOADER
 -	struct builtin_fw *b_fw;
 -
 -	for (b_fw = __start_builtin_fw; b_fw != __end_builtin_fw; b_fw++) {
 -		if (!strcmp(name, b_fw->name)) {
 -			cd->size = b_fw->size;
 -			cd->data = b_fw->data;
 -			return true;
 -		}
 -	}
 -#endif
 -	return false;
 -}
 -
  void __init load_ucode_bsp(void)
  {
++<<<<<<< HEAD
 +	int vendor, x86;
++=======
+ 	int vendor;
+ 	unsigned int family;
++>>>>>>> 7b179b8feba3 (x86/microcode: Correct CPU family related variable types)
  
  	if (check_loader_disabled_bsp())
  		return;
diff --cc arch/x86/kernel/cpu/microcode/intel_early.c
index f074fe1d5a06,8187b7247d1c..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel_early.c
+++ b/arch/x86/kernel/cpu/microcode/intel_early.c
@@@ -551,14 -521,33 +551,38 @@@ out
  EXPORT_SYMBOL_GPL(save_mc_for_early);
  #endif
  
++<<<<<<< HEAD
++=======
+ static bool __init load_builtin_intel_microcode(struct cpio_data *cp)
+ {
+ #ifdef CONFIG_X86_64
+ 	unsigned int eax = 0x00000001, ebx, ecx = 0, edx;
+ 	unsigned int family, model, stepping;
+ 	char name[30];
+ 
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);
+ 
+ 	family   = __x86_family(eax);
+ 	model    = x86_model(eax);
+ 	stepping = eax & 0xf;
+ 
+ 	sprintf(name, "intel-ucode/%02x-%02x-%02x", family, model, stepping);
+ 
+ 	return get_builtin_firmware(cp, name);
+ #else
+ 	return false;
+ #endif
+ }
+ 
++>>>>>>> 7b179b8feba3 (x86/microcode: Correct CPU family related variable types)
  static __initdata char ucode_name[] = "kernel/x86/microcode/GenuineIntel.bin";
  static __init enum ucode_state
 -scan_microcode(struct mc_saved_data *mc_saved_data, unsigned long *initrd,
 -	       unsigned long start, unsigned long size,
 -	       struct ucode_cpu_info *uci)
 +scan_microcode(unsigned long start, unsigned long end,
 +		struct mc_saved_data *mc_saved_data,
 +		unsigned long *mc_saved_in_initrd,
 +		struct ucode_cpu_info *uci)
  {
 +	unsigned int size = end - start + 1;
  	struct cpio_data cd;
  	long offset = 0;
  #ifdef CONFIG_X86_32
* Unmerged path arch/x86/include/asm/microcode_amd.h
* Unmerged path arch/x86/kernel/cpu/microcode/amd_early.c
* Unmerged path arch/x86/kernel/cpu/microcode/core_early.c
* Unmerged path arch/x86/kernel/cpu/microcode/intel_early.c
