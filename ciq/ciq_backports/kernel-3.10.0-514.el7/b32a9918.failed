KVM: x86: Remove redundant definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Nadav Amit <namit@cs.technion.ac.il>
commit b32a99180027ec980af971d548781eac1f6bb9b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b32a9918.failed

Some constants are redfined in emulate.c. Avoid it.

s/SELECTOR_RPL_MASK/SEGMENT_RPL_MASK
s/SELECTOR_TI_MASK/SEGMENT_TI_MASK

No functional change.

	Signed-off-by: Nadav Amit <namit@cs.technion.ac.il>
Message-Id: <1427635984-8113-3-git-send-email-namit@cs.technion.ac.il>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b32a99180027ec980af971d548781eac1f6bb9b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/kvm_host.h
#	arch/x86/kvm/emulate.c
diff --cc arch/x86/include/asm/kvm_host.h
index a9be00d2af59,30b28dc76411..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -83,11 -81,6 +83,14 @@@ static inline gfn_t gfn_to_index(gfn_t 
  		(base_gfn >> KVM_HPAGE_GFN_SHIFT(level));
  }
  
++<<<<<<< HEAD
 +#define SELECTOR_TI_MASK (1 << 2)
 +#define SELECTOR_RPL_MASK 0x03
 +
 +#define IOPL_SHIFT 12
 +
++=======
++>>>>>>> b32a99180027 (KVM: x86: Remove redundant definitions)
  #define KVM_PERMILLE_MMU_PAGES 20
  #define KVM_MIN_ALLOC_MMU_PAGES 64
  #define KVM_MMU_HASH_SHIFT 10
diff --cc arch/x86/kvm/emulate.c
index ed9520e66908,cf7d424b29d2..000000000000
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@@ -2640,8 -2434,8 +2640,13 @@@ static int em_sysenter(struct x86_emula
  	if ((msr_data & 0xfffc) == 0x0)
  		return emulate_gp(ctxt, 0);
  
++<<<<<<< HEAD
 +	ctxt->eflags &= ~(EFLG_VM | EFLG_IF);
 +	cs_sel = (u16)msr_data & ~SELECTOR_RPL_MASK;
++=======
+ 	ctxt->eflags &= ~(X86_EFLAGS_VM | X86_EFLAGS_IF);
+ 	cs_sel = (u16)msr_data & ~SEGMENT_RPL_MASK;
++>>>>>>> b32a99180027 (KVM: x86: Remove redundant definitions)
  	ss_sel = cs_sel + 8;
  	if (efer & EFER_LMA) {
  		cs.d = 0;
* Unmerged path arch/x86/include/asm/kvm_host.h
* Unmerged path arch/x86/kvm/emulate.c
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 925846182584..1708a4d6a83e 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -3144,8 +3144,8 @@ static void fix_pmode_seg(struct kvm_vcpu *vcpu, int seg,
 		 * default value.
 		 */
 		if (seg == VCPU_SREG_CS || seg == VCPU_SREG_SS)
-			save->selector &= ~SELECTOR_RPL_MASK;
-		save->dpl = save->selector & SELECTOR_RPL_MASK;
+			save->selector &= ~SEGMENT_RPL_MASK;
+		save->dpl = save->selector & SEGMENT_RPL_MASK;
 		save->s = 1;
 	}
 	vmx_set_segment(vcpu, save, seg);
@@ -3726,7 +3726,7 @@ static bool code_segment_valid(struct kvm_vcpu *vcpu)
 	unsigned int cs_rpl;
 
 	vmx_get_segment(vcpu, &cs, VCPU_SREG_CS);
-	cs_rpl = cs.selector & SELECTOR_RPL_MASK;
+	cs_rpl = cs.selector & SEGMENT_RPL_MASK;
 
 	if (cs.unusable)
 		return false;
@@ -3754,7 +3754,7 @@ static bool stack_segment_valid(struct kvm_vcpu *vcpu)
 	unsigned int ss_rpl;
 
 	vmx_get_segment(vcpu, &ss, VCPU_SREG_SS);
-	ss_rpl = ss.selector & SELECTOR_RPL_MASK;
+	ss_rpl = ss.selector & SEGMENT_RPL_MASK;
 
 	if (ss.unusable)
 		return true;
@@ -3776,7 +3776,7 @@ static bool data_segment_valid(struct kvm_vcpu *vcpu, int seg)
 	unsigned int rpl;
 
 	vmx_get_segment(vcpu, &var, seg);
-	rpl = var.selector & SELECTOR_RPL_MASK;
+	rpl = var.selector & SEGMENT_RPL_MASK;
 
 	if (var.unusable)
 		return true;
@@ -3803,7 +3803,7 @@ static bool tr_valid(struct kvm_vcpu *vcpu)
 
 	if (tr.unusable)
 		return false;
-	if (tr.selector & SELECTOR_TI_MASK)	/* TI = 1 */
+	if (tr.selector & SEGMENT_TI_MASK)	/* TI = 1 */
 		return false;
 	if (tr.type != 3 && tr.type != 11) /* TODO: Check if guest is in IA32e mode */
 		return false;
@@ -3821,7 +3821,7 @@ static bool ldtr_valid(struct kvm_vcpu *vcpu)
 
 	if (ldtr.unusable)
 		return true;
-	if (ldtr.selector & SELECTOR_TI_MASK)	/* TI = 1 */
+	if (ldtr.selector & SEGMENT_TI_MASK)	/* TI = 1 */
 		return false;
 	if (ldtr.type != 2)
 		return false;
@@ -3838,8 +3838,8 @@ static bool cs_ss_rpl_check(struct kvm_vcpu *vcpu)
 	vmx_get_segment(vcpu, &cs, VCPU_SREG_CS);
 	vmx_get_segment(vcpu, &ss, VCPU_SREG_SS);
 
-	return ((cs.selector & SELECTOR_RPL_MASK) ==
-		 (ss.selector & SELECTOR_RPL_MASK));
+	return ((cs.selector & SEGMENT_RPL_MASK) ==
+		 (ss.selector & SEGMENT_RPL_MASK));
 }
 
 /*
