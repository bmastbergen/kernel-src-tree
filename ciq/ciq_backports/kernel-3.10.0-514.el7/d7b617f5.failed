perf tools: Pass perf_hpp_list all the way through setup_sort_list

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@redhat.com>
commit d7b617f51be4fffa3cbb5adf6d4258e616dce294
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d7b617f5.failed

Pass perf_hpp_list all the way through setup_sort_list so that the sort
entry can be added on the arbitrary list.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/20160309100417.GA30910@krava.redhat.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d7b617f51be4fffa3cbb5adf6d4258e616dce294)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/sort.c
diff --cc tools/perf/util/sort.c
index 8f36c1d6fd38,59a101e43457..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -1479,14 -1577,48 +1479,51 @@@ __sort_dimension__alloc_hpp(struct sort
  	return hse;
  }
  
 -static void hpp_free(struct perf_hpp_fmt *fmt)
 +bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format)
  {
 -	free(fmt);
 +	return format->header == __sort__hpp_header;
  }
  
 -static struct perf_hpp_fmt *__hpp_dimension__alloc_hpp(struct hpp_dimension *hd,
 -						       int level)
 +static int __sort_dimension__add_hpp_sort(struct sort_dimension *sd)
  {
++<<<<<<< HEAD
 +	struct hpp_sort_entry *hse = __sort_dimension__alloc_hpp(sd);
++=======
+ 	struct perf_hpp_fmt *fmt;
+ 
+ 	fmt = memdup(hd->fmt, sizeof(*fmt));
+ 	if (fmt) {
+ 		INIT_LIST_HEAD(&fmt->list);
+ 		INIT_LIST_HEAD(&fmt->sort_list);
+ 		fmt->free = hpp_free;
+ 		fmt->level = level;
+ 	}
+ 
+ 	return fmt;
+ }
+ 
+ int hist_entry__filter(struct hist_entry *he, int type, const void *arg)
+ {
+ 	struct perf_hpp_fmt *fmt;
+ 	struct hpp_sort_entry *hse;
+ 
+ 	fmt = he->fmt;
+ 	if (fmt == NULL || !perf_hpp__is_sort_entry(fmt))
+ 		return -1;
+ 
+ 	hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 	if (hse->se->se_filter == NULL)
+ 		return -1;
+ 
+ 	return hse->se->se_filter(he, type, arg);
+ }
+ 
+ static int __sort_dimension__add_hpp_sort(struct sort_dimension *sd,
+ 					  struct perf_hpp_list *list,
+ 					  int level)
+ {
+ 	struct hpp_sort_entry *hse = __sort_dimension__alloc_hpp(sd, level);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  
  	if (hse == NULL)
  		return -1;
@@@ -1495,9 -1627,10 +1532,14 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int __sort_dimension__add_hpp_output(struct sort_dimension *sd)
++=======
+ static int __sort_dimension__add_hpp_output(struct sort_dimension *sd,
+ 					    struct perf_hpp_list *list)
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  {
 -	struct hpp_sort_entry *hse = __sort_dimension__alloc_hpp(sd, 0);
 +	struct hpp_sort_entry *hse = __sort_dimension__alloc_hpp(sd);
  
  	if (hse == NULL)
  		return -1;
@@@ -1811,12 -2149,14 +1853,22 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int __sort_dimension__add(struct sort_dimension *sd)
++=======
+ static int __sort_dimension__add(struct sort_dimension *sd,
+ 				 struct perf_hpp_list *list,
+ 				 int level)
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  {
  	if (sd->taken)
  		return 0;
  
++<<<<<<< HEAD
 +	if (__sort_dimension__add_hpp_sort(sd) < 0)
++=======
+ 	if (__sort_dimension__add_hpp_sort(sd, list, level) < 0)
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  		return -1;
  
  	if (sd->entry->se_collapse)
@@@ -1827,13 -2167,21 +1879,31 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int __hpp_dimension__add(struct hpp_dimension *hd)
++=======
+ static int __hpp_dimension__add(struct hpp_dimension *hd,
+ 				struct perf_hpp_list *list,
+ 				int level)
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  {
 -	struct perf_hpp_fmt *fmt;
 +	if (!hd->taken) {
 +		hd->taken = 1;
  
++<<<<<<< HEAD
 +		perf_hpp__register_sort_field(hd->fmt);
 +	}
++=======
+ 	if (hd->taken)
+ 		return 0;
+ 
+ 	fmt = __hpp_dimension__alloc_hpp(hd, level);
+ 	if (!fmt)
+ 		return -1;
+ 
+ 	hd->taken = 1;
+ 	perf_hpp_list__register_sort_field(list, fmt);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  	return 0;
  }
  
@@@ -1842,7 -2191,7 +1912,11 @@@ static int __sort_dimension__add_output
  	if (sd->taken)
  		return 0;
  
++<<<<<<< HEAD
 +	if (__sort_dimension__add_hpp_output(sd) < 0)
++=======
+ 	if (__sort_dimension__add_hpp_output(sd, list) < 0)
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  		return -1;
  
  	sd->taken = 1;
@@@ -1862,11 -2218,12 +1936,17 @@@ static int __hpp_dimension__add_output(
  int hpp_dimension__add_output(unsigned col)
  {
  	BUG_ON(col >= PERF_HPP__MAX_INDEX);
 -	return __hpp_dimension__add_output(&perf_hpp_list, &hpp_sort_dimensions[col]);
 +	return __hpp_dimension__add_output(&hpp_sort_dimensions[col]);
  }
  
++<<<<<<< HEAD
 +static int sort_dimension__add(const char *tok,
 +			       struct perf_evlist *evlist __maybe_unused)
++=======
+ static int sort_dimension__add(struct perf_hpp_list *list, const char *tok,
+ 			       struct perf_evlist *evlist __maybe_unused,
+ 			       int level)
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  {
  	unsigned int i;
  
@@@ -1899,9 -2256,13 +1979,13 @@@
  
  		} else if (sd->entry == &sort_dso) {
  			sort__has_dso = 1;
 -		} else if (sd->entry == &sort_socket) {
 -			sort__has_socket = 1;
 -		} else if (sd->entry == &sort_thread) {
 -			sort__has_thread = 1;
  		}
  
++<<<<<<< HEAD
 +		return __sort_dimension__add(sd);
++=======
+ 		return __sort_dimension__add(sd, list, level);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  	}
  
  	for (i = 0; i < ARRAY_SIZE(hpp_sort_dimensions); i++) {
@@@ -1910,7 -2271,7 +1994,11 @@@
  		if (strncasecmp(tok, hd->name, strlen(tok)))
  			continue;
  
++<<<<<<< HEAD
 +		return __hpp_dimension__add(hd);
++=======
+ 		return __hpp_dimension__add(hd, list, level);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  	}
  
  	for (i = 0; i < ARRAY_SIZE(bstack_sort_dimensions); i++) {
@@@ -1925,7 -2286,7 +2013,11 @@@
  		if (sd->entry == &sort_sym_from || sd->entry == &sort_sym_to)
  			sort__has_sym = 1;
  
++<<<<<<< HEAD
 +		__sort_dimension__add(sd);
++=======
+ 		__sort_dimension__add(sd, list, level);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  		return 0;
  	}
  
@@@ -1941,7 -2302,7 +2033,11 @@@
  		if (sd->entry == &sort_mem_daddr_sym)
  			sort__has_sym = 1;
  
++<<<<<<< HEAD
 +		__sort_dimension__add(sd);
++=======
+ 		__sort_dimension__add(sd, list, level);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  		return 0;
  	}
  
@@@ -1955,18 -2317,41 +2052,35 @@@ static int setup_sort_list(struct perf_
  {
  	char *tmp, *tok;
  	int ret = 0;
 -	int level = 0;
 -	int next_level = 1;
 -	bool in_group = false;
 -
 -	do {
 -		tok = str;
 -		tmp = strpbrk(str, "{}, ");
 -		if (tmp) {
 -			if (in_group)
 -				next_level = level;
 -			else
 -				next_level = level + 1;
 -
 -			if (*tmp == '{')
 -				in_group = true;
 -			else if (*tmp == '}')
 -				in_group = false;
 -
 -			*tmp = '\0';
 -			str = tmp + 1;
 +
 +	for (tok = strtok_r(str, ", ", &tmp);
 +			tok; tok = strtok_r(NULL, ", ", &tmp)) {
 +		ret = sort_dimension__add(tok, evlist);
 +		if (ret == -EINVAL) {
 +			error("Invalid --sort key: `%s'", tok);
 +			break;
 +		} else if (ret == -ESRCH) {
 +			error("Unknown --sort key: `%s'", tok);
 +			break;
  		}
++<<<<<<< HEAD
 +	}
++=======
+ 
+ 		if (*tok) {
+ 			ret = sort_dimension__add(list, tok, evlist, level);
+ 			if (ret == -EINVAL) {
+ 				error("Invalid --sort key: `%s'", tok);
+ 				break;
+ 			} else if (ret == -ESRCH) {
+ 				error("Unknown --sort key: `%s'", tok);
+ 				break;
+ 			}
+ 		}
+ 
+ 		level = next_level;
+ 	} while (tmp);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  
  	return ret;
  }
@@@ -2325,7 -2733,7 +2439,11 @@@ int setup_sorting(struct perf_evlist *e
  		return err;
  
  	if (parent_pattern != default_parent_pattern) {
++<<<<<<< HEAD
 +		err = sort_dimension__add("parent", evlist);
++=======
+ 		err = sort_dimension__add(&perf_hpp_list, "parent", evlist, -1);
++>>>>>>> d7b617f51be4 (perf tools: Pass perf_hpp_list all the way through setup_sort_list)
  		if (err < 0)
  			return err;
  	}
* Unmerged path tools/perf/util/sort.c
