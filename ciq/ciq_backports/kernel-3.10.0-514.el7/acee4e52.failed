dlm: replace BUG_ON with a less severe handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
commit acee4e527d5f069351f835602b23602d01de5e1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/acee4e52.failed

BUG_ON() is a severe action for this case, specially now that DLM with
SCTP will use 1 socket per association. Instead, we can just close the
socket on this error condition and return from the function.

Also move the check to an earlier stage as it won't change and thus we
can abort as soon as possible.

Although this issue was reported when still using SCTP with 1-to-many
API, this cleanup wouldn't be that simple back then because we couldn't
close the socket and making sure such event would cease would be hard.
And actually, previous code was closing the association, yet SCTP layer
is still raising the new data event. Probably a bug to be fixed in SCTP.

	Reported-by: <tan.hu@zte.com.cn>
	Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
	Signed-off-by: David Teigland <teigland@redhat.com>
(cherry picked from commit acee4e527d5f069351f835602b23602d01de5e1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dlm/lowcomms.c
diff --cc fs/dlm/lowcomms.c
index 07abd39b991a,4ea64e93e6b1..000000000000
--- a/fs/dlm/lowcomms.c
+++ b/fs/dlm/lowcomms.c
@@@ -871,21 -583,9 +875,24 @@@ static int receive_from_sock(struct con
  			       MSG_DONTWAIT | MSG_NOSIGNAL);
  	if (ret <= 0)
  		goto out_close;
 -	else if (ret == len)
 -		call_again_soon = 1;
  
++<<<<<<< HEAD
 +	/* Process SCTP notifications */
 +	if (msg.msg_flags & MSG_NOTIFICATION) {
 +		msg.msg_control = incmsg;
 +		msg.msg_controllen = sizeof(incmsg);
 +
 +		process_sctp_notification(con, &msg,
 +				page_address(con->rx_page) + con->cb.base);
 +		mutex_unlock(&con->sock_mutex);
 +		return 0;
 +	}
 +	BUG_ON(con->nodeid == 0);
 +
 +	if (ret == len)
 +		call_again_soon = 1;
++=======
++>>>>>>> acee4e527d5f (dlm: replace BUG_ON with a less severe handling)
  	cbuf_add(&con->cb, ret);
  	ret = dlm_process_incoming_buffer(con->nodeid,
  					  page_address(con->rx_page),
* Unmerged path fs/dlm/lowcomms.c
