mmc: core: Don't return an error for CD/WP GPIOs when GPIOLIB is unset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] core: Don't return an error for CD/WP GPIOs when GPIOLIB is unset (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 96.30%
commit-author Ulf Hansson <ulf.hansson@linaro.org>
commit 43934ece2ea72c1dd279c0b0478c1a036d5d77ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/43934ece.failed

When CONFIG_GPIOLIB is unset, its stubs will return -ENOSYS. That means
when the mmc core parses DT for CD/WP GPIOs via mmc_of_parse(), -ENOSYS
becomes propagated to the caller. Typically this means that the mmc host
driver fails to probe.

As the CD/WP GPIOs are already treated as optional, let's extend that to
cover the case when CONFIG_GPIOLIB is unset.

	Reported-by: Michal Simek <michal.simek@xilinx.com>
Fixes: 16b23787fc70 ("mmc: sdhci-of-arasan: Call OF parsing for MMC")
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Tested-by: Michal Simek <michal.simek@xilinx.com>
	Acked-by: Venu Byravarasu <vbyravarasu@nvidia.com>
(cherry picked from commit 43934ece2ea72c1dd279c0b0478c1a036d5d77ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/host.c
diff --cc drivers/mmc/core/host.c
index 1ef8c2a03585,5466f25f0281..000000000000
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@@ -360,99 -445,87 +360,116 @@@ int mmc_of_parse(struct mmc_host *host
  	 */
  
  	/* Parse Card Detection */
 -	if (of_property_read_bool(np, "non-removable")) {
 +	if (of_find_property(np, "non-removable", &len)) {
  		host->caps |= MMC_CAP_NONREMOVABLE;
  	} else {
 -		cd_cap_invert = of_property_read_bool(np, "cd-inverted");
 +		bool explicit_inv_cd, gpio_inv_cd = false;
  
 -		if (of_property_read_bool(np, "broken-cd"))
 +		explicit_inv_cd = of_property_read_bool(np, "cd-inverted");
 +
 +		if (of_find_property(np, "broken-cd", &len))
  			host->caps |= MMC_CAP_NEEDS_POLL;
  
++<<<<<<< HEAD
 +		gpio = of_get_named_gpio_flags(np, "cd-gpios", 0, &flags);
 +		if (gpio == -EPROBE_DEFER)
 +			return gpio;
 +		if (gpio_is_valid(gpio)) {
 +			if (!(flags & OF_GPIO_ACTIVE_LOW))
 +				gpio_inv_cd = true;
++=======
+ 		ret = mmc_gpiod_request_cd(host, "cd", 0, true,
+ 					   0, &cd_gpio_invert);
+ 		if (!ret)
+ 			dev_info(host->parent, "Got CD GPIO\n");
+ 		else if (ret != -ENOENT && ret != -ENOSYS)
+ 			return ret;
 -
 -		/*
 -		 * There are two ways to flag that the CD line is inverted:
 -		 * through the cd-inverted flag and by the GPIO line itself
 -		 * being inverted from the GPIO subsystem. This is a leftover
 -		 * from the times when the GPIO subsystem did not make it
 -		 * possible to flag a line as inverted.
 -		 *
 -		 * If the capability on the host AND the GPIO line are
 -		 * both inverted, the end result is that the CD line is
 -		 * not inverted.
 -		 */
 -		if (cd_cap_invert ^ cd_gpio_invert)
++>>>>>>> 43934ece2ea7 (mmc: core: Don't return an error for CD/WP GPIOs when GPIOLIB is unset)
 +
 +			ret = mmc_gpio_request_cd(host, gpio);
 +			if (ret < 0) {
 +				dev_err(host->parent,
 +					"Failed to request CD GPIO #%d: %d!\n",
 +					gpio, ret);
 +				return ret;
 +			} else {
 +				dev_info(host->parent, "Got CD GPIO #%d.\n",
 +					 gpio);
 +			}
 +		}
 +
 +		if (explicit_inv_cd ^ gpio_inv_cd)
  			host->caps2 |= MMC_CAP2_CD_ACTIVE_HIGH;
  	}
  
  	/* Parse Write Protection */
 -	ro_cap_invert = of_property_read_bool(np, "wp-inverted");
 +	explicit_inv_wp = of_property_read_bool(np, "wp-inverted");
  
++<<<<<<< HEAD
 +	gpio = of_get_named_gpio_flags(np, "wp-gpios", 0, &flags);
 +	if (gpio == -EPROBE_DEFER) {
 +		ret = -EPROBE_DEFER;
 +		goto out;
 +	}
 +	if (gpio_is_valid(gpio)) {
 +		if (!(flags & OF_GPIO_ACTIVE_LOW))
 +			gpio_inv_wp = true;
++=======
+ 	ret = mmc_gpiod_request_ro(host, "wp", 0, false, 0, &ro_gpio_invert);
+ 	if (!ret)
+ 		dev_info(host->parent, "Got WP GPIO\n");
+ 	else if (ret != -ENOENT && ret != -ENOSYS)
+ 		return ret;
++>>>>>>> 43934ece2ea7 (mmc: core: Don't return an error for CD/WP GPIOs when GPIOLIB is unset)
  
 -	if (of_property_read_bool(np, "disable-wp"))
 -		host->caps2 |= MMC_CAP2_NO_WRITE_PROTECT;
 -
 -	/* See the comment on CD inversion above */
 -	if (ro_cap_invert ^ ro_gpio_invert)
 +		ret = mmc_gpio_request_ro(host, gpio);
 +		if (ret < 0) {
 +			dev_err(host->parent,
 +				"Failed to request WP GPIO: %d!\n", ret);
 +			goto out;
 +		} else {
 +				dev_info(host->parent, "Got WP GPIO #%d.\n",
 +					 gpio);
 +		}
 +	}
 +	if (explicit_inv_wp ^ gpio_inv_wp)
  		host->caps2 |= MMC_CAP2_RO_ACTIVE_HIGH;
  
 -	if (of_property_read_bool(np, "cap-sd-highspeed"))
 +	if (of_find_property(np, "cap-sd-highspeed", &len))
  		host->caps |= MMC_CAP_SD_HIGHSPEED;
 -	if (of_property_read_bool(np, "cap-mmc-highspeed"))
 +	if (of_find_property(np, "cap-mmc-highspeed", &len))
  		host->caps |= MMC_CAP_MMC_HIGHSPEED;
 -	if (of_property_read_bool(np, "sd-uhs-sdr12"))
 +	if (of_find_property(np, "sd-uhs-sdr12", &len))
  		host->caps |= MMC_CAP_UHS_SDR12;
 -	if (of_property_read_bool(np, "sd-uhs-sdr25"))
 +	if (of_find_property(np, "sd-uhs-sdr25", &len))
  		host->caps |= MMC_CAP_UHS_SDR25;
 -	if (of_property_read_bool(np, "sd-uhs-sdr50"))
 +	if (of_find_property(np, "sd-uhs-sdr50", &len))
  		host->caps |= MMC_CAP_UHS_SDR50;
 -	if (of_property_read_bool(np, "sd-uhs-sdr104"))
 +	if (of_find_property(np, "sd-uhs-sdr104", &len))
  		host->caps |= MMC_CAP_UHS_SDR104;
 -	if (of_property_read_bool(np, "sd-uhs-ddr50"))
 +	if (of_find_property(np, "sd-uhs-ddr50", &len))
  		host->caps |= MMC_CAP_UHS_DDR50;
 -	if (of_property_read_bool(np, "cap-power-off-card"))
 +	if (of_find_property(np, "cap-power-off-card", &len))
  		host->caps |= MMC_CAP_POWER_OFF_CARD;
 -	if (of_property_read_bool(np, "cap-sdio-irq"))
 +	if (of_find_property(np, "cap-sdio-irq", &len))
  		host->caps |= MMC_CAP_SDIO_IRQ;
 -	if (of_property_read_bool(np, "full-pwr-cycle"))
 +	if (of_find_property(np, "full-pwr-cycle", &len))
  		host->caps2 |= MMC_CAP2_FULL_PWR_CYCLE;
 -	if (of_property_read_bool(np, "keep-power-in-suspend"))
 +	if (of_find_property(np, "keep-power-in-suspend", &len))
  		host->pm_caps |= MMC_PM_KEEP_POWER;
 -	if (of_property_read_bool(np, "enable-sdio-wakeup"))
 +	if (of_find_property(np, "enable-sdio-wakeup", &len))
  		host->pm_caps |= MMC_PM_WAKE_SDIO_IRQ;
 -	if (of_property_read_bool(np, "mmc-ddr-1_8v"))
 +	if (of_find_property(np, "mmc-ddr-1_8v", &len))
  		host->caps |= MMC_CAP_1_8V_DDR;
 -	if (of_property_read_bool(np, "mmc-ddr-1_2v"))
 +	if (of_find_property(np, "mmc-ddr-1_2v", &len))
  		host->caps |= MMC_CAP_1_2V_DDR;
 -	if (of_property_read_bool(np, "mmc-hs200-1_8v"))
 +	if (of_find_property(np, "mmc-hs200-1_8v", &len))
  		host->caps2 |= MMC_CAP2_HS200_1_8V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs200-1_2v"))
 +	if (of_find_property(np, "mmc-hs200-1_2v", &len))
  		host->caps2 |= MMC_CAP2_HS200_1_2V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs400-1_8v"))
 +	if (of_find_property(np, "mmc-hs400-1_8v", &len))
  		host->caps2 |= MMC_CAP2_HS400_1_8V | MMC_CAP2_HS200_1_8V_SDR;
 -	if (of_property_read_bool(np, "mmc-hs400-1_2v"))
 +	if (of_find_property(np, "mmc-hs400-1_2v", &len))
  		host->caps2 |= MMC_CAP2_HS400_1_2V | MMC_CAP2_HS200_1_2V_SDR;
  
  	host->dsr_req = !of_property_read_u32(np, "dsr", &host->dsr);
* Unmerged path drivers/mmc/core/host.c
