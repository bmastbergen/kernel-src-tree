gpiolib: rewrite gpiodev_add_to_list

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bamvor Jian Zhang <bamvor.zhangjian@linaro.org>
commit a961f9b472de93e770d53b7340a58dbff64b4075
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a961f9b4.failed

The original code of gpiodev_add_to_list is not very clear which
lead to bugs or compiling warning, reference the following patches:
Bugs:
1.  Commit ef7c7553039b ("gpiolib: improve overlap check of range of
    gpio").
2.  Commit 96098df125c0 ("gpiolib: fix chip order in gpio list")

Warning:
1.  Commit e28ecca6eac4 ("gpio: fix warning about iterator").
of gpio").

There is a off-list discussion about how to improve it consequently.
This commit try to follow this by rewriting the whole functions.

Tested pass with my gpio mockup driver and test scripts[1].

[1] http://www.spinics.net/lists/linux-gpio/msg09598.html

	Suggested-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Bamvor Jian Zhang <bamvor.zhangjian@linaro.org>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit a961f9b472de93e770d53b7340a58dbff64b4075)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpiolib.c
diff --cc drivers/gpio/gpiolib.c
index 9b50ed619d38,1c10bd8f021d..000000000000
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@@ -1125,27 -204,70 +1125,92 @@@ static inline void gpiochip_unexport(st
   * Return -EBUSY if the new chip overlaps with some other chip's integer
   * space.
   */
 -static int gpiodev_add_to_list(struct gpio_device *gdev)
 +static int gpiochip_add_to_list(struct gpio_chip *chip)
  {
++<<<<<<< HEAD
 +	struct list_head *pos = &gpio_chips;
 +	struct gpio_chip *_chip;
 +	int err = 0;
 +
 +	/* find where to insert our chip */
 +	list_for_each(pos, &gpio_chips) {
 +		_chip = list_entry(pos, struct gpio_chip, list);
 +		/* shall we insert before _chip? */
 +		if (_chip->base >= chip->base + chip->ngpio)
 +			break;
 +	}
 +
 +	/* are we stepping on the chip right before? */
 +	if (pos != &gpio_chips && pos->prev != &gpio_chips) {
 +		_chip = list_entry(pos->prev, struct gpio_chip, list);
 +		if (_chip->base + _chip->ngpio > chip->base) {
 +			dev_err(chip->dev,
 +			       "GPIO integer space overlap, cannot add chip\n");
 +			err = -EBUSY;
++=======
+ 	struct gpio_device *prev, *next;
+ 
+ 	if (list_empty(&gpio_devices)) {
+ 		/* initial entry in list */
+ 		list_add_tail(&gdev->list, &gpio_devices);
+ 		return 0;
+ 	}
+ 
+ 	next = list_entry(gpio_devices.next, struct gpio_device, list);
+ 	if (gdev->base + gdev->ngpio <= next->base) {
+ 		/* add before first entry */
+ 		list_add(&gdev->list, &gpio_devices);
+ 		return 0;
+ 	}
+ 
+ 	prev = list_entry(gpio_devices.prev, struct gpio_device, list);
+ 	if (prev->base + prev->ngpio <= gdev->base) {
+ 		/* add behind last entry */
+ 		list_add_tail(&gdev->list, &gpio_devices);
+ 		return 0;
+ 	}
+ 
+ 	list_for_each_entry_safe(prev, next, &gpio_devices, list) {
+ 		/* at the end of the list */
+ 		if (&next->list == &gpio_devices)
+ 			break;
+ 
+ 		/* add between prev and next */
+ 		if (prev->base + prev->ngpio <= gdev->base
+ 				&& gdev->base + gdev->ngpio <= next->base) {
+ 			list_add(&gdev->list, &prev->list);
+ 			return 0;
+ 		}
+ 	}
+ 
+ 	dev_err(&gdev->dev, "GPIO integer space overlap, cannot add chip\n");
+ 	return -EBUSY;
+ }
+ 
+ /**
+  * Convert a GPIO name to its descriptor
+  */
+ static struct gpio_desc *gpio_name_to_desc(const char * const name)
+ {
+ 	struct gpio_device *gdev;
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&gpio_lock, flags);
+ 
+ 	list_for_each_entry(gdev, &gpio_devices, list) {
+ 		int i;
+ 
+ 		for (i = 0; i != gdev->ngpio; ++i) {
+ 			struct gpio_desc *desc = &gdev->descs[i];
+ 
+ 			if (!desc->name || !name)
+ 				continue;
+ 
+ 			if (!strcmp(desc->name, name)) {
+ 				spin_unlock_irqrestore(&gpio_lock, flags);
+ 				return desc;
+ 			}
++>>>>>>> a961f9b472de (gpiolib: rewrite gpiodev_add_to_list)
  		}
  	}
  
* Unmerged path drivers/gpio/gpiolib.c
