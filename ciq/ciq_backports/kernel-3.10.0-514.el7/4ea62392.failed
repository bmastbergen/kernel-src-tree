i40e/i40evf: Fix casting in transmit code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jesse Brandeburg <jesse.brandeburg@intel.com>
commit 4ea623922d1d73c162da53e02cce1d0d3fd55893
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4ea62392.failed

Simple cast to fix a sparse warning.

Fixes: commit 5453205cd097 ("i40e/i40evf: Enable support for
SKB_GSO_UDP_TUNNEL_CSUM")

	Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 4ea623922d1d73c162da53e02cce1d0d3fd55893)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_txrx.c
#	drivers/net/ethernet/intel/i40evf/i40e_txrx.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 5a3abb58e191,5bef5b0f00d9..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@@ -2329,7 -2297,19 +2329,23 @@@ static int i40e_tso(struct i40e_ring *t
  		ip.v6->payload_len = 0;
  	}
  
++<<<<<<< HEAD
 +	if (skb_shinfo(skb)->gso_type & (SKB_GSO_UDP_TUNNEL | SKB_GSO_GRE)) {
++=======
+ 	if (skb_shinfo(skb)->gso_type & (SKB_GSO_UDP_TUNNEL | SKB_GSO_GRE |
+ 					 SKB_GSO_UDP_TUNNEL_CSUM)) {
+ 		if (skb_shinfo(skb)->gso_type & SKB_GSO_UDP_TUNNEL_CSUM) {
+ 			/* determine offset of outer transport header */
+ 			l4_offset = l4.hdr - skb->data;
+ 
+ 			/* remove payload length from outer checksum */
+ 			paylen = (__force u16)l4.udp->check;
+ 			paylen += ntohs((__force __be16)1) *
+ 					(u16)~(skb->len - l4_offset);
+ 			l4.udp->check = ~csum_fold((__force __wsum)paylen);
+ 		}
+ 
++>>>>>>> 4ea623922d1d (i40e/i40evf: Fix casting in transmit code)
  		/* reset pointers to inner headers */
  		ip.hdr = skb_inner_network_header(skb);
  		l4.hdr = skb_inner_transport_header(skb);
diff --cc drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index f6384b0c8220,570348d93e5d..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@@ -1580,7 -1564,19 +1580,23 @@@ static int i40e_tso(struct i40e_ring *t
  		ip.v6->payload_len = 0;
  	}
  
++<<<<<<< HEAD
 +	if (skb_shinfo(skb)->gso_type & (SKB_GSO_UDP_TUNNEL | SKB_GSO_GRE)) {
++=======
+ 	if (skb_shinfo(skb)->gso_type & (SKB_GSO_UDP_TUNNEL | SKB_GSO_GRE |
+ 					 SKB_GSO_UDP_TUNNEL_CSUM)) {
+ 		if (skb_shinfo(skb)->gso_type & SKB_GSO_UDP_TUNNEL_CSUM) {
+ 			/* determine offset of outer transport header */
+ 			l4_offset = l4.hdr - skb->data;
+ 
+ 			/* remove payload length from outer checksum */
+ 			paylen = (__force u16)l4.udp->check;
+ 			paylen += ntohs((__force __be16)1) *
+ 					(u16)~(skb->len - l4_offset);
+ 			l4.udp->check = ~csum_fold((__force __wsum)paylen);
+ 		}
+ 
++>>>>>>> 4ea623922d1d (i40e/i40evf: Fix casting in transmit code)
  		/* reset pointers to inner headers */
  		ip.hdr = skb_inner_network_header(skb);
  		l4.hdr = skb_inner_transport_header(skb);
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_txrx.c
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_txrx.c
