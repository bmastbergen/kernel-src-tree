GENEVE: Support outer IPv4 Tx checksums by default

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Alexander Duyck <aduyck@mirantis.com>
commit 14f1f724355206dea1cf3f23ee87993bfd47c70c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/14f1f724.failed

This change makes it so that if UDP CSUM is not specified we will default
to enabling it.  The main motivation behind this is the fact that with the
use of outer checksum we can greatly improve the performance for GENEVE
tunnels on hardware that doesn't know how to parse them.

	Signed-off-by: Alexander Duyck <aduyck@mirantis.com>
	Acked-by: Tom Herbert <tom@herbertland.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 14f1f724355206dea1cf3f23ee87993bfd47c70c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/geneve.c
diff --cc drivers/net/geneve.c
index d82906728571,8fa8388cc5d4..000000000000
--- a/drivers/net/geneve.c
+++ b/drivers/net/geneve.c
@@@ -60,8 -71,15 +60,16 @@@ struct geneve_dev 
  	__be16		   dst_port;
  	bool		   collect_md;
  	struct gro_cells   gro_cells;
 -	u32		   flags;
 -	struct dst_cache   dst_cache;
  };
  
++<<<<<<< HEAD
++=======
+ /* Geneve device flags */
+ #define GENEVE_F_UDP_ZERO_CSUM_TX	BIT(0)
+ #define GENEVE_F_UDP_ZERO_CSUM6_TX	BIT(1)
+ #define GENEVE_F_UDP_ZERO_CSUM6_RX	BIT(2)
+ 
++>>>>>>> 14f1f7243552 (GENEVE: Support outer IPv4 Tx checksums by default)
  struct geneve_sock {
  	bool			collect_md;
  	struct list_head	list;
@@@ -531,6 -703,9 +539,12 @@@ static int geneve_build_skb(struct rtab
  	struct genevehdr *gnvh;
  	int min_headroom;
  	int err;
++<<<<<<< HEAD
++=======
+ 	bool udp_sum = !(flags & GENEVE_F_UDP_ZERO_CSUM_TX);
+ 
+ 	skb_scrub_packet(skb, xnet);
++>>>>>>> 14f1f7243552 (GENEVE: Support outer IPv4 Tx checksums by default)
  
  	min_headroom = LL_RESERVED_SPACE(rt->dst.dev) + rt->dst.header_len
  			+ GENEVE_BASE_HLEN + opt_len + sizeof(struct iphdr);
@@@ -664,11 -941,15 +678,20 @@@ static netdev_tx_t geneve_xmit(struct s
  
  		tunnel_id_to_vni(key->tun_id, vni);
  		if (key->tun_flags & TUNNEL_GENEVE_OPT)
++<<<<<<< HEAD
 +			opts = ip_tunnel_info_opts(info, info->options_len);
++=======
+ 			opts = ip_tunnel_info_opts(info);
+ 
+ 		if (key->tun_flags & TUNNEL_CSUM)
+ 			flags &= ~GENEVE_F_UDP_ZERO_CSUM_TX;
+ 		else
+ 			flags |= GENEVE_F_UDP_ZERO_CSUM_TX;
++>>>>>>> 14f1f7243552 (GENEVE: Support outer IPv4 Tx checksums by default)
  
 +		udp_csum = !!(key->tun_flags & TUNNEL_CSUM);
  		err = geneve_build_skb(rt, skb, key->tun_flags, vni,
 -				       info->options_len, opts, flags, xnet);
 +				       info->options_len, opts, udp_csum);
  		if (unlikely(err))
  			goto err;
  
@@@ -689,12 -969,11 +712,19 @@@
  		ttl = ttl ? : ip4_dst_hoplimit(&rt->dst);
  		df = 0;
  	}
++<<<<<<< HEAD
 +	err = udp_tunnel_xmit_skb(rt, gs->sock->sk, skb, fl4.saddr, fl4.daddr,
 +				  tos, ttl, df, sport, geneve->dst_port,
 +				  !net_eq(geneve->net, dev_net(geneve->dev)),
 +				  !udp_csum);
++=======
+ 	udp_tunnel_xmit_skb(rt, gs4->sock->sk, skb, fl4.saddr, fl4.daddr,
+ 			    tos, ttl, df, sport, geneve->dst_port,
+ 			    !net_eq(geneve->net, dev_net(geneve->dev)),
+ 			    !!(flags & GENEVE_F_UDP_ZERO_CSUM_TX));
++>>>>>>> 14f1f7243552 (GENEVE: Support outer IPv4 Tx checksums by default)
  
 +	iptunnel_xmit_stats(err, &dev->stats, dev->tstats);
  	return NETDEV_TX_OK;
  
  tx_error:
@@@ -925,8 -1382,20 +955,25 @@@ static int geneve_newlink(struct net *n
  	if (data[IFLA_GENEVE_COLLECT_METADATA])
  		metadata = true;
  
++<<<<<<< HEAD
 +	return geneve_configure(net, dev, rem_addr, vni,
 +				ttl, tos, dst_port, metadata);
++=======
+ 	if (data[IFLA_GENEVE_UDP_CSUM] &&
+ 	    !nla_get_u8(data[IFLA_GENEVE_UDP_CSUM]))
+ 		flags |= GENEVE_F_UDP_ZERO_CSUM_TX;
+ 
+ 	if (data[IFLA_GENEVE_UDP_ZERO_CSUM6_TX] &&
+ 	    nla_get_u8(data[IFLA_GENEVE_UDP_ZERO_CSUM6_TX]))
+ 		flags |= GENEVE_F_UDP_ZERO_CSUM6_TX;
+ 
+ 	if (data[IFLA_GENEVE_UDP_ZERO_CSUM6_RX] &&
+ 	    nla_get_u8(data[IFLA_GENEVE_UDP_ZERO_CSUM6_RX]))
+ 		flags |= GENEVE_F_UDP_ZERO_CSUM6_RX;
+ 
+ 	return geneve_configure(net, dev, &remote, vni, ttl, tos, dst_port,
+ 				metadata, flags);
++>>>>>>> 14f1f7243552 (GENEVE: Support outer IPv4 Tx checksums by default)
  }
  
  static void geneve_dellink(struct net_device *dev, struct list_head *head)
@@@ -973,6 -1453,14 +1020,17 @@@ static int geneve_fill_info(struct sk_b
  			goto nla_put_failure;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (nla_put_u8(skb, IFLA_GENEVE_UDP_CSUM,
+ 		       !(geneve->flags & GENEVE_F_UDP_ZERO_CSUM_TX)) ||
+ 	    nla_put_u8(skb, IFLA_GENEVE_UDP_ZERO_CSUM6_TX,
+ 		       !!(geneve->flags & GENEVE_F_UDP_ZERO_CSUM6_TX)) ||
+ 	    nla_put_u8(skb, IFLA_GENEVE_UDP_ZERO_CSUM6_RX,
+ 		       !!(geneve->flags & GENEVE_F_UDP_ZERO_CSUM6_RX)))
+ 		goto nla_put_failure;
+ 
++>>>>>>> 14f1f7243552 (GENEVE: Support outer IPv4 Tx checksums by default)
  	return 0;
  
  nla_put_failure:
* Unmerged path drivers/net/geneve.c
