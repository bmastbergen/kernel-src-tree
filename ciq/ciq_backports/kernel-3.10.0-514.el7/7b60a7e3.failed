perf stat record: Synthesize event update events

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 7b60a7e3a687481553d2b6ec7e6390a6e82f1849
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7b60a7e3.failed

Synthesize other events stuff not carried within attr event - unit,
scale, name.

	Reported-by: Kan Liang <kan.liang@intel.com>
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1446734469-11352-11-git-send-email-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7b60a7e3a687481553d2b6ec7e6390a6e82f1849)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
diff --cc tools/perf/builtin-stat.c
index 473fc692d35a,575e2535ea03..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -283,6 -351,135 +283,138 @@@ static void workload_exec_failed_signal
  	workload_exec_errno = info->si_value.sival_int;
  }
  
++<<<<<<< HEAD
++=======
+ static bool has_unit(struct perf_evsel *counter)
+ {
+ 	return counter->unit && *counter->unit;
+ }
+ 
+ static bool has_scale(struct perf_evsel *counter)
+ {
+ 	return counter->scale != 1;
+ }
+ 
+ static int perf_stat_synthesize_config(bool is_pipe)
+ {
+ 	struct perf_evsel *counter;
+ 	int err;
+ 
+ 	if (is_pipe) {
+ 		err = perf_event__synthesize_attrs(NULL, perf_stat.session,
+ 						   process_synthesized_event);
+ 		if (err < 0) {
+ 			pr_err("Couldn't synthesize attrs.\n");
+ 			return err;
+ 		}
+ 	}
+ 
+ 	/*
+ 	 * Synthesize other events stuff not carried within
+ 	 * attr event - unit, scale, name
+ 	 */
+ 	evlist__for_each(evsel_list, counter) {
+ 		if (!counter->supported)
+ 			continue;
+ 
+ 		/*
+ 		 * Synthesize unit and scale only if it's defined.
+ 		 */
+ 		if (has_unit(counter)) {
+ 			err = perf_event__synthesize_event_update_unit(NULL, counter, process_synthesized_event);
+ 			if (err < 0) {
+ 				pr_err("Couldn't synthesize evsel unit.\n");
+ 				return err;
+ 			}
+ 		}
+ 
+ 		if (has_scale(counter)) {
+ 			err = perf_event__synthesize_event_update_scale(NULL, counter, process_synthesized_event);
+ 			if (err < 0) {
+ 				pr_err("Couldn't synthesize evsel scale.\n");
+ 				return err;
+ 			}
+ 		}
+ 
+ 		if (counter->own_cpus) {
+ 			err = perf_event__synthesize_event_update_cpus(NULL, counter, process_synthesized_event);
+ 			if (err < 0) {
+ 				pr_err("Couldn't synthesize evsel scale.\n");
+ 				return err;
+ 			}
+ 		}
+ 
+ 		/*
+ 		 * Name is needed only for pipe output,
+ 		 * perf.data carries event names.
+ 		 */
+ 		if (is_pipe) {
+ 			err = perf_event__synthesize_event_update_name(NULL, counter, process_synthesized_event);
+ 			if (err < 0) {
+ 				pr_err("Couldn't synthesize evsel name.\n");
+ 				return err;
+ 			}
+ 		}
+ 	}
+ 
+ 	err = perf_event__synthesize_thread_map2(NULL, evsel_list->threads,
+ 						process_synthesized_event,
+ 						NULL);
+ 	if (err < 0) {
+ 		pr_err("Couldn't synthesize thread map.\n");
+ 		return err;
+ 	}
+ 
+ 	err = perf_event__synthesize_cpu_map(NULL, evsel_list->cpus,
+ 					     process_synthesized_event, NULL);
+ 	if (err < 0) {
+ 		pr_err("Couldn't synthesize thread map.\n");
+ 		return err;
+ 	}
+ 
+ 	err = perf_event__synthesize_stat_config(NULL, &stat_config,
+ 						 process_synthesized_event, NULL);
+ 	if (err < 0) {
+ 		pr_err("Couldn't synthesize config.\n");
+ 		return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ #define FD(e, x, y) (*(int *)xyarray__entry(e->fd, x, y))
+ 
+ static int __store_counter_ids(struct perf_evsel *counter,
+ 			       struct cpu_map *cpus,
+ 			       struct thread_map *threads)
+ {
+ 	int cpu, thread;
+ 
+ 	for (cpu = 0; cpu < cpus->nr; cpu++) {
+ 		for (thread = 0; thread < threads->nr; thread++) {
+ 			int fd = FD(counter, cpu, thread);
+ 
+ 			if (perf_evlist__id_add_fd(evsel_list, counter,
+ 						   cpu, thread, fd) < 0)
+ 				return -1;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int store_counter_ids(struct perf_evsel *counter)
+ {
+ 	struct cpu_map *cpus = counter->cpus;
+ 	struct thread_map *threads = counter->threads;
+ 
+ 	if (perf_evsel__alloc_id(counter, cpus->nr, threads->nr))
+ 		return -ENOMEM;
+ 
+ 	return __store_counter_ids(counter, cpus, threads);
+ }
+ 
++>>>>>>> 7b60a7e3a687 (perf stat record: Synthesize event update events)
  static int __run_perf_stat(int argc, const char **argv)
  {
  	int interval = stat_config.interval;
* Unmerged path tools/perf/builtin-stat.c
