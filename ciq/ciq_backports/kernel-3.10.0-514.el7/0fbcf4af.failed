ipmi: Convert the IPMI SI ACPI handling to a platform device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Corey Minyard <cminyard@mvista.com>
commit 0fbcf4af7c8362d4691f9388efa57d0b14b34225
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0fbcf4af.failed

The IPMI SI driver was using direct PNP, but that was not really
ideal because the IPMI device is a platform device.  There was
some special handling in the acpi_pnp.c code for making this work,
but that was breaking ACPI handling for the IPMI SSIF driver.

So without this patch there were significant issues getting the
SSIF driver to work with ACPI.

So use a platform device for ACPI detection and remove the
entry from acpi_pnp.c.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
(cherry picked from commit 0fbcf4af7c8362d4691f9388efa57d0b14b34225)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpi_pnp.c
#	drivers/char/ipmi/ipmi_si_intf.c
diff --cc drivers/char/ipmi/ipmi_si_intf.c
index d35631e5625a,6443e762b426..000000000000
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@@ -303,10 -306,10 +302,15 @@@ struct smi_info 
  static int force_kipmid[SI_MAX_PARMS];
  static int num_force_kipmid;
  #ifdef CONFIG_PCI
 -static bool pci_registered;
 +static int pci_registered;
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_ACPI
 +static int pnp_registered;
++=======
+ #ifdef CONFIG_PARISC
+ static bool parisc_registered;
++>>>>>>> 0fbcf4af7c83 (ipmi: Convert the IPMI SI ACPI handling to a platform device)
  #endif
  
  static unsigned int kipmid_max_busy_us[SI_MAX_PARMS];
@@@ -2674,10 -2560,13 +2559,10 @@@ static int of_ipmi_probe(struct platfor
  
  	dev_info(&dev->dev, "probing via device tree\n");
  
- 	match = of_match_device(ipmi_match, &dev->dev);
+ 	match = of_match_device(of_ipmi_match, &dev->dev);
  	if (!match)
- 		return -EINVAL;
+ 		return -ENODEV;
  
 -	if (!of_device_is_available(np))
 -		return -EINVAL;
 -
  	ret = of_address_to_resource(np, 0, &resource);
  	if (ret) {
  		dev_warn(&dev->dev, PFX "invalid address from OF\n");
@@@ -3636,17 -3693,10 +3649,20 @@@ static int init_ipmi_si(void
  			printk(KERN_ERR PFX "Unable to register "
  			       "PCI driver: %d\n", rv);
  		else
 -			pci_registered = true;
 +			pci_registered = 1;
 +	}
 +#endif
 +
++<<<<<<< HEAD
 +#ifdef CONFIG_ACPI
 +	if (si_tryacpi) {
 +		pnp_register_driver(&ipmi_pnp_driver);
 +		pnp_registered = 1;
  	}
  #endif
  
++=======
++>>>>>>> 0fbcf4af7c83 (ipmi: Convert the IPMI SI ACPI handling to a platform device)
  #ifdef CONFIG_DMI
  	if (si_trydmi)
  		dmi_find_bmc();
@@@ -3791,9 -3848,9 +3807,15 @@@ static void cleanup_ipmi_si(void
  	if (pci_registered)
  		pci_unregister_driver(&ipmi_pci_driver);
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_ACPI
 +	if (pnp_registered)
 +		pnp_unregister_driver(&ipmi_pnp_driver);
++=======
+ #ifdef CONFIG_PARISC
+ 	if (parisc_registered)
+ 		unregister_parisc_driver(&ipmi_parisc_driver);
++>>>>>>> 0fbcf4af7c83 (ipmi: Convert the IPMI SI ACPI handling to a platform device)
  #endif
  
  	platform_driver_unregister(&ipmi_driver);
* Unmerged path drivers/acpi/acpi_pnp.c
* Unmerged path drivers/acpi/acpi_pnp.c
* Unmerged path drivers/char/ipmi/ipmi_si_intf.c
