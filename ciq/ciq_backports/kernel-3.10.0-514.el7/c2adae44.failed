hpsa: disable report lun data caching

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Scott Teel <scott.teel@pmcs.com>
commit c2adae44e9161612c89e52d233c83086195f454c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c2adae44.failed

When external target arrays are present, disable the firmware's
normal behavior of returning a cached copy of the report lun data,
and force it to collect new data each time we request a report luns.

This is necessary for external arrays, since there may be no
reliable signal from the external array to the smart array when
lun configuration changes, and thus when driver requests
report luns, it may be stale data.

Use diag options to turn off RPL data caching.

	Reviewed-by: Scott Teel <scott.teel@pmcs.com>
	Reviewed-by: Justin Lindley <justin.lindley@pmcs.com>
	Reviewed-by: Kevin Barnett <kevin.barnett@pmcs.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
	Signed-off-by: Don Brace <don.brace@pmcs.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit c2adae44e9161612c89e52d233c83086195f454c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hpsa.c
#	drivers/scsi/hpsa_cmd.h
diff --cc drivers/scsi/hpsa.c
index ef01b3ac8b79,91e7005811d6..000000000000
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@@ -282,6 -275,8 +282,11 @@@ static int hpsa_scsi_ioaccel_queue_comm
  static void hpsa_command_resubmit_worker(struct work_struct *work);
  static u32 lockup_detected(struct ctlr_info *h);
  static int detect_controller_lockup(struct ctlr_info *h);
++<<<<<<< HEAD
++=======
+ static void hpsa_disable_rld_caching(struct ctlr_info *h);
+ static int hpsa_luns_changed(struct ctlr_info *h);
++>>>>>>> c2adae44e916 (hpsa: disable report lun data caching)
  
  static inline struct ctlr_info *sdev_to_hba(struct scsi_device *sdev)
  {
@@@ -7947,6 -8098,19 +7970,22 @@@ static void hpsa_rescan_ctlr_worker(str
  		hpsa_ack_ctlr_events(h);
  		hpsa_scan_start(h->scsi_host);
  		scsi_host_put(h->scsi_host);
++<<<<<<< HEAD
++=======
+ 	} else if (h->discovery_polling) {
+ 		hpsa_disable_rld_caching(h);
+ 		if (hpsa_luns_changed(h)) {
+ 			struct Scsi_Host *sh = NULL;
+ 
+ 			dev_info(&h->pdev->dev,
+ 				"driver discovery polling rescan.\n");
+ 			sh = scsi_host_get(h->scsi_host);
+ 			if (sh != NULL) {
+ 				hpsa_scan_start(sh);
+ 				scsi_host_put(sh);
+ 			}
+ 		}
++>>>>>>> c2adae44e916 (hpsa: disable report lun data caching)
  	}
  	spin_lock_irqsave(&h->lock, flags);
  	if (!h->remove_in_progress)
diff --cc drivers/scsi/hpsa_cmd.h
index 47c756ba8dce,491034425132..000000000000
--- a/drivers/scsi/hpsa_cmd.h
+++ b/drivers/scsi/hpsa_cmd.h
@@@ -288,6 -286,10 +288,13 @@@ struct SenseSubsystem_info 
  #define BMIC_FLASH_FIRMWARE 0xF7
  #define BMIC_SENSE_CONTROLLER_PARAMETERS 0x64
  #define BMIC_IDENTIFY_PHYSICAL_DEVICE 0x15
++<<<<<<< HEAD
++=======
+ #define BMIC_IDENTIFY_CONTROLLER 0x11
+ #define BMIC_SET_DIAG_OPTIONS 0xF4
+ #define BMIC_SENSE_DIAG_OPTIONS 0xF5
+ #define HPSA_DIAG_OPTS_DISABLE_RLD_CACHING 0x40000000
++>>>>>>> c2adae44e916 (hpsa: disable report lun data caching)
  
  /* Command List Structure */
  union SCSI3Addr {
* Unmerged path drivers/scsi/hpsa.c
* Unmerged path drivers/scsi/hpsa_cmd.h
