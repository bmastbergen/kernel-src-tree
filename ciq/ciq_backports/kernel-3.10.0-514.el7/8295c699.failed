sched/core: Clear the root_domain cpumasks in init_rootdomain()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Xunlei Pang <xlpang@redhat.com>
commit 8295c69925ad53ec32ca54ac9fc194ff21bc40e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8295c699.failed

root_domain::rto_mask allocated through alloc_cpumask_var()
contains garbage data, this may cause problems. For instance,
When doing pull_rt_task(), it may do useless iterations if
rto_mask retains some extra garbage bits. Worse still, this
violates the isolated domain rule for clustered scheduling
using cpuset, because the tasks(with all the cpus allowed)
belongs to one root domain can be pulled away into another
root domain.

The patch cleans the garbage by using zalloc_cpumask_var()
instead of alloc_cpumask_var() for root_domain::rto_mask
allocation, thereby addressing the issues.

Do the same thing for root_domain's other cpumask memembers:
dlo_mask, span, and online.

	Signed-off-by: Xunlei Pang <xlpang@redhat.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: <stable@vger.kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1449057179-29321-1-git-send-email-xlpang@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 8295c69925ad53ec32ca54ac9fc194ff21bc40e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 04c5c65570ca,eee4ee655db2..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -5884,12 -5846,18 +5884,23 @@@ static int init_rootdomain(struct root_
  {
  	memset(rd, 0, sizeof(*rd));
  
- 	if (!alloc_cpumask_var(&rd->span, GFP_KERNEL))
+ 	if (!zalloc_cpumask_var(&rd->span, GFP_KERNEL))
  		goto out;
- 	if (!alloc_cpumask_var(&rd->online, GFP_KERNEL))
+ 	if (!zalloc_cpumask_var(&rd->online, GFP_KERNEL))
  		goto free_span;
++<<<<<<< HEAD
 +	if (!alloc_cpumask_var(&rd->rto_mask, GFP_KERNEL))
 +		goto free_online;
++=======
+ 	if (!zalloc_cpumask_var(&rd->dlo_mask, GFP_KERNEL))
+ 		goto free_online;
+ 	if (!zalloc_cpumask_var(&rd->rto_mask, GFP_KERNEL))
+ 		goto free_dlo_mask;
+ 
+ 	init_dl_bw(&rd->dl_bw);
+ 	if (cpudl_init(&rd->cpudl) != 0)
+ 		goto free_dlo_mask;
++>>>>>>> 8295c69925ad (sched/core: Clear the root_domain cpumasks in init_rootdomain())
  
  	if (cpupri_init(&rd->cpupri) != 0)
  		goto free_rto_mask;
* Unmerged path kernel/sched/core.c
