i2c: designware: add support of platform data to set I2C mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tan, Raymond <raymond.tan@intel.com>
commit 4bcfda09936da647b0a3b49d5dcb3c6c6ebb0395
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4bcfda09.failed

Use the platform data to set the clk_freq when there is no DT configuration
available. The clk_freq in turn will determine the I2C speed mode.

In Quark, there is currently no other configuration mechanism other than
board files.

	Signed-off-by: Raymond Tan <raymond.tan@intel.com>
	Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Reviewed-by: Hock Leong Kweh <hock.leong.kweh@intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit 4bcfda09936da647b0a3b49d5dcb3c6c6ebb0395)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-platdrv.c
diff --cc drivers/i2c/busses/i2c-designware-platdrv.c
index e11d47518747,4d6a6b94e2fa..000000000000
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@@ -120,7 -123,9 +121,8 @@@ static int dw_i2c_probe(struct platform
  	struct dw_i2c_dev *dev;
  	struct i2c_adapter *adap;
  	struct resource *mem;
+ 	struct dw_i2c_platform_data *pdata;
  	int irq, r;
 -	u32 clk_freq;
  
  	irq = platform_get_irq(pdev, 0);
  	if (irq < 0) {
@@@ -150,6 -155,41 +152,44 @@@
  		return PTR_ERR(dev->clk);
  	clk_prepare_enable(dev->clk);
  
++<<<<<<< HEAD
++=======
+ 	/* fast mode by default because of legacy reasons */
+ 	clk_freq = 400000;
+ 
+ 	if (pdev->dev.of_node) {
+ 		u32 ht = 0;
+ 		u32 ic_clk = dev->get_clk_rate_khz(dev);
+ 
+ 		of_property_read_u32(pdev->dev.of_node,
+ 					"i2c-sda-hold-time-ns", &ht);
+ 		dev->sda_hold_time = div_u64((u64)ic_clk * ht + 500000,
+ 					     1000000);
+ 
+ 		of_property_read_u32(pdev->dev.of_node,
+ 				     "i2c-sda-falling-time-ns",
+ 				     &dev->sda_falling_time);
+ 		of_property_read_u32(pdev->dev.of_node,
+ 				     "i2c-scl-falling-time-ns",
+ 				     &dev->scl_falling_time);
+ 
+ 		of_property_read_u32(pdev->dev.of_node, "clock-frequency",
+ 				     &clk_freq);
+ 
+ 		/* Only standard mode at 100kHz and fast mode at 400kHz
+ 		 * are supported.
+ 		 */
+ 		if (clk_freq != 100000 && clk_freq != 400000) {
+ 			dev_err(&pdev->dev, "Only 100kHz and 400kHz supported");
+ 			return -EINVAL;
+ 		}
+ 	} else {
+ 		pdata = dev_get_platdata(&pdev->dev);
+ 		if (pdata)
+ 			clk_freq = pdata->i2c_scl_freq;
+ 	}
+ 
++>>>>>>> 4bcfda09936d (i2c: designware: add support of platform data to set I2C mode)
  	dev->functionality =
  		I2C_FUNC_I2C |
  		I2C_FUNC_10BIT_ADDR |
* Unmerged path drivers/i2c/busses/i2c-designware-platdrv.c
diff --git a/include/linux/platform_data/i2c-designware.h b/include/linux/platform_data/i2c-designware.h
new file mode 100644
index 000000000000..7a61fb27c25b
--- /dev/null
+++ b/include/linux/platform_data/i2c-designware.h
@@ -0,0 +1,21 @@
+/*
+ * Copyright(c) 2014 Intel Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#ifndef I2C_DESIGNWARE_H
+#define I2C_DESIGNWARE_H
+
+struct dw_i2c_platform_data {
+	unsigned int i2c_scl_freq;
+};
+
+#endif
