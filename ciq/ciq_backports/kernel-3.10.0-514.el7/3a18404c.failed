iommu/amd: Propagate errors from amd_iommu_init_api

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] amd: Propagate errors from amd_iommu_init_api (Myron Stowe) [1050021]
Rebuild_FUZZ: 93.75%
commit-author Joerg Roedel <jroedel@suse.de>
commit 3a18404cd952ae529651f72a13e5d6ffee824c2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3a18404c.failed

This function can fail. Propagate any errors back to the
initialization state machine.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 3a18404cd952ae529651f72a13e5d6ffee824c2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
#	drivers/iommu/amd_iommu_init.c
diff --cc drivers/iommu/amd_iommu.c
index 9bce8cd33ccb,8bc6f40edf5e..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -3073,39 -2840,9 +3073,43 @@@ static struct dma_map_ops amd_iommu_dma
  	.dma_supported = amd_iommu_dma_supported,
  };
  
++<<<<<<< HEAD
 +static unsigned device_dma_ops_init(void)
 +{
 +	struct iommu_dev_data *dev_data;
 +	struct pci_dev *pdev = NULL;
 +	unsigned unhandled = 0;
 +
 +	for_each_pci_dev(pdev) {
 +		if (!check_device(&pdev->dev)) {
 +
 +			iommu_ignore_device(&pdev->dev);
 +
 +			unhandled += 1;
 +			continue;
 +		}
 +
 +		dev_data = get_dev_data(&pdev->dev);
 +
 +		if (!dev_data->passthrough)
 +			pdev->dev.archdata.dma_ops = &amd_iommu_dma_ops;
 +		else
 +			pdev->dev.archdata.dma_ops = &nommu_dma_ops;
 +	}
 +
 +	return unhandled;
 +}
 +
 +/*
 + * The function which clues the AMD IOMMU driver into dma_ops.
 + */
 +
 +void __init amd_iommu_init_api(void)
++=======
+ int __init amd_iommu_init_api(void)
++>>>>>>> 3a18404cd952 (iommu/amd: Propagate errors from amd_iommu_init_api)
  {
- 	bus_set_iommu(&pci_bus_type, &amd_iommu_ops);
+ 	return bus_set_iommu(&pci_bus_type, &amd_iommu_ops);
  }
  
  int __init amd_iommu_init_dma_ops(void)
diff --cc drivers/iommu/amd_iommu_init.c
index 8d6a15e2890d,dbac49cea7a1..000000000000
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@@ -1345,9 -1386,15 +1345,19 @@@ static int __init amd_iommu_init_pci(vo
  			break;
  	}
  
++<<<<<<< HEAD
 +	ret = amd_iommu_init_devices();
++=======
+ 	init_device_table_dma();
  
- 	print_iommu_info();
+ 	for_each_iommu(iommu)
+ 		iommu_flush_all_caches(iommu);
+ 
+ 	ret = amd_iommu_init_api();
++>>>>>>> 3a18404cd952 (iommu/amd: Propagate errors from amd_iommu_init_api)
+ 
+ 	if (!ret)
+ 		print_iommu_info();
  
  	return ret;
  }
* Unmerged path drivers/iommu/amd_iommu.c
* Unmerged path drivers/iommu/amd_iommu_init.c
diff --git a/drivers/iommu/amd_iommu_proto.h b/drivers/iommu/amd_iommu_proto.h
index 52ead171e0d8..78432463e21e 100644
--- a/drivers/iommu/amd_iommu_proto.h
+++ b/drivers/iommu/amd_iommu_proto.h
@@ -30,7 +30,7 @@ extern void amd_iommu_reset_cmd_buffer(struct amd_iommu *iommu);
 extern int amd_iommu_init_devices(void);
 extern void amd_iommu_uninit_devices(void);
 extern void amd_iommu_init_notifier(void);
-extern void amd_iommu_init_api(void);
+extern int amd_iommu_init_api(void);
 
 /* Needed for interrupt remapping */
 extern int amd_iommu_prepare(void);
