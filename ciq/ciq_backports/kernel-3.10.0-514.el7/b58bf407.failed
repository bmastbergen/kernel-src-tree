GFS2: Reduce size of incore inode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bob Peterson <rpeterso@redhat.com>
commit b58bf407ca4669a2dfcc00f5888ee719d9c34150
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b58bf407.failed

This patch makes no functional changes. Its goal is to reduce the
size of the gfs2 inode in memory by rearranging structures and
changing the size of some variables within the structure.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit b58bf407ca4669a2dfcc00f5888ee719d9c34150)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/glock.c
#	fs/gfs2/quota.c
diff --cc fs/gfs2/glock.c
index 976576dfa91d,68484ef89a2c..000000000000
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@@ -507,12 -441,12 +507,17 @@@ out_locked
   */
  
  static void do_xmote(struct gfs2_glock *gl, struct gfs2_holder *gh, unsigned int target)
 -__releases(&gl->gl_lockref.lock)
 -__acquires(&gl->gl_lockref.lock)
 +__releases(&gl->gl_spin)
 +__acquires(&gl->gl_spin)
  {
  	const struct gfs2_glock_operations *glops = gl->gl_ops;
++<<<<<<< HEAD
 +	struct gfs2_sbd *sdp = gl->gl_sbd;
 +	unsigned int lck_flags = gh ? gh->gh_flags : 0;
++=======
+ 	struct gfs2_sbd *sdp = gl->gl_name.ln_sbd;
+ 	unsigned int lck_flags = (unsigned int)(gh ? gh->gh_flags : 0);
++>>>>>>> b58bf407ca46 (GFS2: Reduce size of incore inode)
  	int ret;
  
  	lck_flags &= (LM_FLAG_TRY | LM_FLAG_TRY_1CB | LM_FLAG_NOEXP |
diff --cc fs/gfs2/quota.c
index 481208bbcaf7,be6d9c450b22..000000000000
--- a/fs/gfs2/quota.c
+++ b/fs/gfs2/quota.c
@@@ -575,9 -620,9 +575,9 @@@ out
  void gfs2_quota_unhold(struct gfs2_inode *ip)
  {
  	struct gfs2_sbd *sdp = GFS2_SB(&ip->i_inode);
- 	unsigned int x;
+ 	u32 x;
  
 -	if (ip->i_qadata == NULL)
 +	if (ip->i_res == NULL)
  		return;
  	gfs2_assert_warn(sdp, !test_bit(GIF_QD_LOCKED, &ip->i_flags));
  
@@@ -994,9 -1036,13 +994,9 @@@ int gfs2_quota_lock(struct gfs2_inode *
  {
  	struct gfs2_sbd *sdp = GFS2_SB(&ip->i_inode);
  	struct gfs2_quota_data *qd;
- 	unsigned int x;
+ 	u32 x;
  	int error = 0;
  
 -	if (capable(CAP_SYS_RESOURCE) ||
 -	    sdp->sd_args.ar_quota != GFS2_QUOTA_ON)
 -		return 0;
 -
  	error = gfs2_quota_hold(ip, uid, gid);
  	if (error)
  		return error;
@@@ -1207,9 -1249,11 +1207,14 @@@ void gfs2_quota_change(struct gfs2_inod
  		       kuid_t uid, kgid_t gid)
  {
  	struct gfs2_quota_data *qd;
++<<<<<<< HEAD
 +	unsigned int x;
++=======
+ 	u32 x;
+ 	struct gfs2_sbd *sdp = GFS2_SB(&ip->i_inode);
++>>>>>>> b58bf407ca46 (GFS2: Reduce size of incore inode)
  
 -	if (sdp->sd_args.ar_quota != GFS2_QUOTA_ON ||
 -	    gfs2_assert_warn(sdp, change))
 +	if (gfs2_assert_warn(GFS2_SB(&ip->i_inode), change))
  		return;
  	if (ip->i_diskflags & GFS2_DIF_SYSTEM)
  		return;
diff --git a/fs/gfs2/file.c b/fs/gfs2/file.c
index 96a7ba9500e8..a8acd45e2ddf 100644
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@ -1049,7 +1049,7 @@ static int do_flock(struct file *file, int cmd, struct file_lock *fl)
 	struct gfs2_inode *ip = GFS2_I(file_inode(file));
 	struct gfs2_glock *gl;
 	unsigned int state;
-	int flags;
+	u16 flags;
 	int error = 0;
 	int sleeptime;
 
* Unmerged path fs/gfs2/glock.c
diff --git a/fs/gfs2/glock.h b/fs/gfs2/glock.h
index 6647d77366ba..a23a83ae8e73 100644
--- a/fs/gfs2/glock.h
+++ b/fs/gfs2/glock.h
@@ -79,15 +79,15 @@ enum {
  * requested had acquired and released the lock.
  */
 
-#define LM_FLAG_TRY		0x00000001
-#define LM_FLAG_TRY_1CB		0x00000002
-#define LM_FLAG_NOEXP		0x00000004
-#define LM_FLAG_ANY		0x00000008
-#define LM_FLAG_PRIORITY	0x00000010
-#define GL_ASYNC		0x00000040
-#define GL_EXACT		0x00000080
-#define GL_SKIP			0x00000100
-#define GL_NOCACHE		0x00000400
+#define LM_FLAG_TRY		0x0001
+#define LM_FLAG_TRY_1CB		0x0002
+#define LM_FLAG_NOEXP		0x0004
+#define LM_FLAG_ANY		0x0008
+#define LM_FLAG_PRIORITY	0x0010
+#define GL_ASYNC		0x0040
+#define GL_EXACT		0x0080
+#define GL_SKIP			0x0100
+#define GL_NOCACHE		0x0400
   
 /*
  * lm_async_cb return flags
@@ -183,8 +183,8 @@ extern int gfs2_glock_get(struct gfs2_sbd *sdp, u64 number,
 			  int create, struct gfs2_glock **glp);
 extern void gfs2_glock_put(struct gfs2_glock *gl);
 extern void gfs2_holder_init(struct gfs2_glock *gl, unsigned int state,
-			     unsigned flags, struct gfs2_holder *gh);
-extern void gfs2_holder_reinit(unsigned int state, unsigned flags,
+			     u16 flags, struct gfs2_holder *gh);
+extern void gfs2_holder_reinit(unsigned int state, u16 flags,
 			       struct gfs2_holder *gh);
 extern void gfs2_holder_uninit(struct gfs2_holder *gh);
 extern int gfs2_glock_nq(struct gfs2_holder *gh);
@@ -195,7 +195,7 @@ extern void gfs2_glock_dq_wait(struct gfs2_holder *gh);
 extern void gfs2_glock_dq_uninit(struct gfs2_holder *gh);
 extern int gfs2_glock_nq_num(struct gfs2_sbd *sdp, u64 number,
 			     const struct gfs2_glock_operations *glops,
-			     unsigned int state, int flags,
+			     unsigned int state, u16 flags,
 			     struct gfs2_holder *gh);
 extern int gfs2_glock_nq_m(unsigned int num_gh, struct gfs2_holder *ghs);
 extern void gfs2_glock_dq_m(unsigned int num_gh, struct gfs2_holder *ghs);
@@ -215,7 +215,7 @@ void gfs2_print_dbg(struct seq_file *seq, const char *fmt, ...);
  */
 
 static inline int gfs2_glock_nq_init(struct gfs2_glock *gl,
-				     unsigned int state, int flags,
+				     unsigned int state, u16 flags,
 				     struct gfs2_holder *gh)
 {
 	int error;
diff --git a/fs/gfs2/incore.h b/fs/gfs2/incore.h
index 2caf75dc0244..687c0374a25e 100644
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@ -249,8 +249,8 @@ struct gfs2_holder {
 
 	struct gfs2_glock *gh_gl;
 	struct pid *gh_owner_pid;
-	unsigned int gh_state;
-	unsigned gh_flags;
+	u16 gh_flags;
+	u16 gh_state;
 
 	int gh_error;
 	unsigned long gh_iflags; /* HIF_... */
* Unmerged path fs/gfs2/quota.c
