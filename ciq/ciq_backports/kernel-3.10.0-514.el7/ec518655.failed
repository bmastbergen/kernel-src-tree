x86/asm: Add C versions of frame pointer macros

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] asm: Add C versions of frame pointer macros (Josh Poimboeuf) [1320250]
Rebuild_FUZZ: 95.56%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit ec5186557abbe711dfd34e1863735dfecb0602cc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ec518655.failed

Add C versions of the frame pointer macros which can be used to
create a stack frame in inline assembly.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Bernd Petrovitsch <bernd@petrovitsch.priv.at>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Chris J Arges <chris.j.arges@canonical.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Marek <mmarek@suse.cz>
	Cc: Namhyung Kim <namhyung@gmail.com>
	Cc: Pedro Alves <palves@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/f6786a282bf232ede3e2866414eae3cf02c7d662.1450442274.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit ec5186557abbe711dfd34e1863735dfecb0602cc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/frame.h
diff --cc arch/x86/include/asm/frame.h
index 3b629f47eb65,6e4d170726b7..000000000000
--- a/arch/x86/include/asm/frame.h
+++ b/arch/x86/include/asm/frame.h
@@@ -1,26 -1,44 +1,73 @@@
++<<<<<<< HEAD
 +#ifdef __ASSEMBLY__
++=======
+ #ifndef _ASM_X86_FRAME_H
+ #define _ASM_X86_FRAME_H
++>>>>>>> ec5186557abb (x86/asm: Add C versions of frame pointer macros)
  
  #include <asm/asm.h>
 +#include <asm/dwarf2.h>
 +
++<<<<<<< HEAD
 +/* The annotation hides the frame from the unwinder and makes it look
 +   like a ordinary ebp save/restore. This avoids some special cases for
 +   frame pointer later */
 +#ifdef CONFIG_FRAME_POINTER
 +	.macro FRAME
 +	__ASM_SIZE(push,_cfi)	%__ASM_REG(bp)
 +	CFI_REL_OFFSET		__ASM_REG(bp), 0
 +	__ASM_SIZE(mov)		%__ASM_REG(sp), %__ASM_REG(bp)
 +	.endm
 +	.macro ENDFRAME
 +	__ASM_SIZE(pop,_cfi)	%__ASM_REG(bp)
 +	CFI_RESTORE		__ASM_REG(bp)
 +	.endm
 +#else
 +	.macro FRAME
 +	.endm
 +	.macro ENDFRAME
 +	.endm
 +#endif
  
 +#endif  /*  __ASSEMBLY__  */
++=======
+ /*
+  * These are stack frame creation macros.  They should be used by every
+  * callable non-leaf asm function to make kernel stack traces more reliable.
+  */
+ 
+ #ifdef CONFIG_FRAME_POINTER
+ 
+ #ifdef __ASSEMBLY__
+ 
+ .macro FRAME_BEGIN
+ 	push %_ASM_BP
+ 	_ASM_MOV %_ASM_SP, %_ASM_BP
+ .endm
+ 
+ .macro FRAME_END
+ 	pop %_ASM_BP
+ .endm
+ 
+ #else /* !__ASSEMBLY__ */
+ 
+ #define FRAME_BEGIN				\
+ 	"push %" _ASM_BP "\n"			\
+ 	_ASM_MOV "%" _ASM_SP ", %" _ASM_BP "\n"
+ 
+ #define FRAME_END "pop %" _ASM_BP "\n"
+ 
+ #endif /* __ASSEMBLY__ */
+ 
+ #define FRAME_OFFSET __ASM_SEL(4, 8)
+ 
+ #else /* !CONFIG_FRAME_POINTER */
+ 
+ #define FRAME_BEGIN
+ #define FRAME_END
+ #define FRAME_OFFSET 0
+ 
+ #endif /* CONFIG_FRAME_POINTER */
+ 
+ #endif /* _ASM_X86_FRAME_H */
++>>>>>>> ec5186557abb (x86/asm: Add C versions of frame pointer macros)
* Unmerged path arch/x86/include/asm/frame.h
