memory-hotplug: add hot-added memory ranges to memblock before allocate node_data for a node.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mm] memory-hotplug: add hot-added memory ranges to memblock before allocate node_data for a node (Yasuaki Ishimatsu) [1365766]
Rebuild_FUZZ: 99.46%
commit-author Tang Chen <tangchen@cn.fujitsu.com>
commit 7f36e3e56db1ae75d1e157011b3cb2e0957f0a7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7f36e3e5.failed

Commit f9126ab9241f ("memory-hotplug: fix wrong edge when hot add a new
node") hot-added memory range to memblock, after creating pgdat for new
node.

But there is a problem:

  add_memory()
  |--> hotadd_new_pgdat()
       |--> free_area_init_node()
            |--> get_pfn_range_for_nid()
                 |--> find start_pfn and end_pfn in memblock
  |--> ......
  |--> memblock_add_node(start, size, nid)    --------    Here, just too late.

get_pfn_range_for_nid() will find that start_pfn and end_pfn are both 0.
As a result, when adding memory, dmesg will give the following wrong
message.

  Initmem setup node 5 [mem 0x0000000000000000-0xffffffffffffffff]
  On node 5 totalpages: 0
  Built 5 zonelists in Node order, mobility grouping on.  Total pages: 32588823
  Policy zone: Normal
  init_memory_mapping: [mem 0x60000000000-0x607ffffffff]

The solution is simple, just add the memory range to memblock a little
earlier, before hotadd_new_pgdat().

[akpm@linux-foundation.org: coding-style fixes]
	Signed-off-by: Tang Chen <tangchen@cn.fujitsu.com>
	Cc: Xishi Qiu <qiuxishi@huawei.com>
	Cc: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
	Cc: Kamezawa Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
	Cc: Taku Izumi <izumi.taku@jp.fujitsu.com>
	Cc: Gu Zheng <guz.fnst@cn.fujitsu.com>
	Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: David Rientjes <rientjes@google.com>
	Cc: <stable@vger.kernel.org>	[4.2.x]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 7f36e3e56db1ae75d1e157011b3cb2e0957f0a7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memory_hotplug.c
diff --cc mm/memory_hotplug.c
index e7bfdf837815,8fd97dac538a..000000000000
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@@ -1180,6 -1245,17 +1180,20 @@@ int __ref add_memory(int nid, u64 start
  		void *p = NODE_DATA(nid);
  		new_pgdat = !p;
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	mem_hotplug_begin();
+ 
+ 	/*
+ 	 * Add new range to memblock so that when hotadd_new_pgdat() is called
+ 	 * to allocate new pgdat, get_pfn_range_for_nid() will be able to find
+ 	 * this new range and calculate total pages correctly.  The range will
+ 	 * be removed at hot-remove time.
+ 	 */
+ 	memblock_add_node(start, size, nid);
+ 
++>>>>>>> 7f36e3e56db1 (memory-hotplug: add hot-added memory ranges to memblock before allocate node_data for a node.)
  	new_node = !node_online(nid);
  	if (new_node) {
  		pgdat = hotadd_new_pgdat(nid, start);
@@@ -1217,9 -1293,10 +1231,10 @@@ error
  	if (new_pgdat)
  		rollback_node_hotadd(nid, pgdat);
  	release_memory_resource(res);
+ 	memblock_remove(start, size);
  
  out:
 -	mem_hotplug_done();
 +	unlock_memory_hotplug();
  	return ret;
  }
  EXPORT_SYMBOL_GPL(add_memory);
* Unmerged path mm/memory_hotplug.c
