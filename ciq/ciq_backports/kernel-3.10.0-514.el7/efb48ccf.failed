rtnetlink.h: Remove extern from function prototypes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] rtnetlink: Remove extern from function prototypes (Lance Richardson) [1283886]
Rebuild_FUZZ: 98.00%
commit-author Joe Perches <joe@perches.com>
commit efb48ccfcda4dbb9fce39c5c8df19644a08121c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/efb48ccf.failed

There are a mix of function prototypes with and without extern
in the kernel sources.  Standardize on not using extern for
function prototypes.

Function prototypes don't need to be written with extern.
extern is assumed by the compiler.  Its use is as unnecessary as
using auto to declare automatic/local variables in a block.

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit efb48ccfcda4dbb9fce39c5c8df19644a08121c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/rtnetlink.h
diff --cc include/net/rtnetlink.h
index b09052b2d93b,bb13a182fba6..000000000000
--- a/include/net/rtnetlink.h
+++ b/include/net/rtnetlink.h
@@@ -83,42 -79,13 +81,42 @@@ struct rtnl_link_ops 
  					       const struct net_device *dev);
  	unsigned int		(*get_num_tx_queues)(void);
  	unsigned int		(*get_num_rx_queues)(void);
 +
 +	/* RHEL SPECIFIC
 +	 *
 +	 * The following padding has been inserted before ABI freeze to
 +	 * allow extending the structure while preserve ABI. Feel free
 +	 * to replace reserved slots with required structure field
 +	 * additions of your backport.
 +	 */
 +	RH_KABI_USE_P(1, struct net	*(*get_link_net)(const struct net_device *dev))
 +	RH_KABI_USE_P(2, int	slave_maxtype)
 +	RH_KABI_USE_P(3, const struct nla_policy *slave_policy)
 +	RH_KABI_USE_P(4, int	(*slave_validate)(struct nlattr *tb[], struct nlattr *data[]))
 +	RH_KABI_USE_P(5, int	(*slave_changelink)(struct net_device *dev,
 +						    struct net_device *slave_dev,
 +						    struct nlattr *tb[], struct nlattr *data[]))
 +	RH_KABI_USE_P(6, size_t	(*get_slave_size)(const struct net_device *dev,
 +						  const struct net_device *slave_dev))
 +	RH_KABI_USE_P(7, int	(*fill_slave_info)(struct sk_buff *skb,
 +						   const struct net_device *dev,
 +						   const struct net_device *slave_dev))
 +	RH_KABI_RESERVE_P(8)
 +	RH_KABI_RESERVE_P(9)
 +	RH_KABI_RESERVE_P(10)
 +	RH_KABI_RESERVE_P(11)
 +	RH_KABI_RESERVE_P(12)
 +	RH_KABI_RESERVE_P(13)
 +	RH_KABI_RESERVE_P(14)
 +	RH_KABI_RESERVE_P(15)
 +	RH_KABI_RESERVE_P(16)
  };
  
- extern int	__rtnl_link_register(struct rtnl_link_ops *ops);
- extern void	__rtnl_link_unregister(struct rtnl_link_ops *ops);
+ int __rtnl_link_register(struct rtnl_link_ops *ops);
+ void __rtnl_link_unregister(struct rtnl_link_ops *ops);
  
- extern int	rtnl_link_register(struct rtnl_link_ops *ops);
- extern void	rtnl_link_unregister(struct rtnl_link_ops *ops);
+ int rtnl_link_register(struct rtnl_link_ops *ops);
+ void rtnl_link_unregister(struct rtnl_link_ops *ops);
  
  /**
   * 	struct rtnl_af_ops - rtnetlink address family operations
@@@ -148,20 -115,19 +146,29 @@@ struct rtnl_af_ops 
  					       const struct nlattr *attr);
  };
  
- extern int	__rtnl_af_register(struct rtnl_af_ops *ops);
- extern void	__rtnl_af_unregister(struct rtnl_af_ops *ops);
+ int __rtnl_af_register(struct rtnl_af_ops *ops);
+ void __rtnl_af_unregister(struct rtnl_af_ops *ops);
  
- extern int	rtnl_af_register(struct rtnl_af_ops *ops);
- extern void	rtnl_af_unregister(struct rtnl_af_ops *ops);
+ int rtnl_af_register(struct rtnl_af_ops *ops);
+ void rtnl_af_unregister(struct rtnl_af_ops *ops);
  
+ struct net *rtnl_link_get_net(struct net *src_net, struct nlattr *tb[]);
+ struct net_device *rtnl_create_link(struct net *net, char *ifname,
+ 				    const struct rtnl_link_ops *ops,
+ 				    struct nlattr *tb[]);
+ int rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm);
  
++<<<<<<< HEAD
 +extern struct net *rtnl_link_get_net(struct net *src_net, struct nlattr *tb[]);
 +extern struct net_device *rtnl_create_link(struct net *net,
 +	char *ifname, const struct rtnl_link_ops *ops, struct nlattr *tb[]);
 +extern int rtnl_configure_link(struct net_device *dev,
 +			       const struct ifinfomsg *ifm);
 +
 +int rtnl_nla_parse_ifla(struct nlattr **tb, const struct nlattr *head, int len);
++=======
+ extern const struct nla_policy ifla_policy[IFLA_MAX+1];
++>>>>>>> efb48ccfcda4 (rtnetlink.h: Remove extern from function prototypes)
  
  #define MODULE_ALIAS_RTNL_LINK(kind) MODULE_ALIAS("rtnl-link-" kind)
  
* Unmerged path include/net/rtnetlink.h
