sfc: Add efx_nic member with fixed netdev features

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Andrew Rybchenko <Andrew.Rybchenko@oktetlabs.ru>
commit ebfcd0fd90b88088e4d3841c4be9a8c5753d3993
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ebfcd0fd.failed

It allows to change set of fixed features on datapath reset.

	Signed-off-by: Edward Cree <ecree@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ebfcd0fd90b88088e4d3841c4be9a8c5753d3993)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/efx.c
diff --cc drivers/net/ethernet/sfc/efx.c
index 273bd5c7bbec,2eecd2873c79..000000000000
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@@ -3126,17 -3157,17 +3136,23 @@@ static int efx_pci_probe(struct pci_de
  		return -ENOMEM;
  	efx = netdev_priv(net_dev);
  	efx->type = (const struct efx_nic_type *) entry->driver_data;
+ 	efx->fixed_features |= NETIF_F_HIGHDMA;
  	net_dev->features |= (efx->type->offload_features | NETIF_F_SG |
++<<<<<<< HEAD
 +			      NETIF_F_HIGHDMA | NETIF_F_TSO |
 +			      NETIF_F_RXCSUM);
 +	if (efx->type->offload_features & NETIF_F_V6_CSUM)
++=======
+ 			      NETIF_F_TSO | NETIF_F_RXCSUM);
+ 	if (efx->type->offload_features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))
++>>>>>>> ebfcd0fd90b8 (sfc: Add efx_nic member with fixed netdev features)
  		net_dev->features |= NETIF_F_TSO6;
  	/* Mask for features that also apply to VLAN devices */
 -	net_dev->vlan_features |= (NETIF_F_HW_CSUM | NETIF_F_SG |
 +	net_dev->vlan_features |= (NETIF_F_ALL_CSUM | NETIF_F_SG |
  				   NETIF_F_HIGHDMA | NETIF_F_ALL_TSO |
  				   NETIF_F_RXCSUM);
- 	/* All offloads can be toggled */
- 	net_dev->hw_features = net_dev->features & ~NETIF_F_HIGHDMA;
+ 	net_dev->features |= efx->fixed_features;
+ 	net_dev->hw_features = net_dev->features & ~efx->fixed_features;
  	pci_set_drvdata(pci_dev, efx);
  	SET_NETDEV_DEV(net_dev, &pci_dev->dev);
  	rc = efx_init_struct(efx, pci_dev, net_dev);
* Unmerged path drivers/net/ethernet/sfc/efx.c
diff --git a/drivers/net/ethernet/sfc/net_driver.h b/drivers/net/ethernet/sfc/net_driver.h
index 6c6ffc22ed12..abf19afcb4e3 100644
--- a/drivers/net/ethernet/sfc/net_driver.h
+++ b/drivers/net/ethernet/sfc/net_driver.h
@@ -864,6 +864,7 @@ struct vfdi_status;
  *	be held to modify it.
  * @port_initialized: Port initialized?
  * @net_dev: Operating system network device. Consider holding the rtnl lock
+ * @fixed_features: Features which cannot be turned off
  * @stats_buffer: DMA buffer for statistics
  * @phy_type: PHY type
  * @phy_op: PHY interface
@@ -1003,6 +1004,8 @@ struct efx_nic {
 	bool port_initialized;
 	struct net_device *net_dev;
 
+	netdev_features_t fixed_features;
+
 	struct efx_buffer stats_buffer;
 	u64 rx_nodesc_drops_total;
 	u64 rx_nodesc_drops_while_down;
