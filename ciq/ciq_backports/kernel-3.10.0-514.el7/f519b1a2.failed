timekeeping: Provide ktime_get_raw()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit f519b1a2e08c913375324a927992bb328387f169
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f519b1a2.failed

Provide a ktime_t based interface for raw monotonic time.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: John Stultz <john.stultz@linaro.org>
(cherry picked from commit f519b1a2e08c913375324a927992bb328387f169)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/timekeeper_internal.h
#	include/linux/timekeeping.h
diff --cc include/linux/timekeeper_internal.h
index a44b704da541,2e20275a7083..000000000000
--- a/include/linux/timekeeper_internal.h
+++ b/include/linux/timekeeper_internal.h
@@@ -18,6 -33,33 +18,36 @@@ struct timekeeper 
  	u32			mult;
  	/* The shift value of the current clocksource. */
  	u32			shift;
++<<<<<<< HEAD
++=======
+ 	/* Clock shifted nano seconds */
+ 	u64			xtime_nsec;
+ 
+ 	/* Monotonic base time */
+ 	ktime_t			base_mono;
+ 
+ 	/* Current CLOCK_REALTIME time in seconds */
+ 	u64			xtime_sec;
+ 	/* CLOCK_REALTIME to CLOCK_MONOTONIC offset */
+ 	struct timespec64	wall_to_monotonic;
+ 
+ 	/* Offset clock monotonic -> clock realtime */
+ 	ktime_t			offs_real;
+ 	/* Offset clock monotonic -> clock boottime */
+ 	ktime_t			offs_boot;
+ 	/* Offset clock monotonic -> clock tai */
+ 	ktime_t			offs_tai;
+ 
+ 	/* The current UTC to TAI offset in seconds */
+ 	s32			tai_offset;
+ 
+ 	/* Monotonic raw base time */
+ 	ktime_t			base_raw;
+ 
+ 	/* The raw monotonic time for the CLOCK_MONOTONIC_RAW posix clock. */
+ 	struct timespec64	raw_time;
+ 
++>>>>>>> f519b1a2e08c (timekeeping: Provide ktime_get_raw())
  	/* Number of clock cycles in one NTP interval. */
  	cycle_t			cycle_interval;
  	/* Last cycle value (also stored in clock->cycle_last) */
* Unmerged path include/linux/timekeeping.h
* Unmerged path include/linux/timekeeper_internal.h
* Unmerged path include/linux/timekeeping.h
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index 7251ed9665bf..1ff9af24c446 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -276,6 +276,9 @@ static inline void tk_update_ktime_data(struct timekeeper *tk)
 	nsec *= NSEC_PER_SEC;
 	nsec += tk->wall_to_monotonic.tv_nsec;
 	tk->base_mono = ns_to_ktime(nsec);
+
+	/* Update the monotonic raw base */
+	tk->base_raw = timespec64_to_ktime(tk->raw_time);
 }
 
 /* must hold timekeeper_lock */
@@ -396,6 +399,27 @@ ktime_t ktime_get(void)
 }
 EXPORT_SYMBOL_GPL(ktime_get);
 
+/**
+ * ktime_get_raw - Returns the raw monotonic time in ktime_t format
+ */
+ktime_t ktime_get_raw(void)
+{
+	struct timekeeper *tk = &tk_core.timekeeper;
+	unsigned int seq;
+	ktime_t base;
+	s64 nsecs;
+
+	do {
+		seq = read_seqcount_begin(&tk_core.seq);
+		base = tk->base_raw;
+		nsecs = timekeeping_get_ns_raw(tk);
+
+	} while (read_seqcount_retry(&tk_core.seq, seq));
+
+	return ktime_add_ns(base, nsecs);
+}
+EXPORT_SYMBOL_GPL(ktime_get_raw);
+
 /**
  * ktime_get_ts64 - get the monotonic clock in timespec64 format
  * @ts:		pointer to timespec variable
@@ -869,6 +893,7 @@ void __init timekeeping_init(void)
 	tk_set_xtime(tk, &now);
 	tk->raw_time.tv_sec = 0;
 	tk->raw_time.tv_nsec = 0;
+	tk->base_raw.tv64 = 0;
 	if (boot.tv_sec == 0 && boot.tv_nsec == 0)
 		boot = tk_xtime(tk);
 
