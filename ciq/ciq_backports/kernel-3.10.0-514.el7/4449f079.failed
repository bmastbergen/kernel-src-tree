PCI: Calculate maximum number of buses required for VFs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [pci] Calculate maximum number of buses required for VFs (Myron Stowe) [1332667]
Rebuild_FUZZ: 95.24%
commit-author Wei Yang <weiyang@linux.vnet.ibm.com>
commit 4449f079722c86d2f6925da039835acdd8e973a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4449f079.failed

An SR-IOV device can change its First VF Offset and VF Stride based on the
values of ARI Capable Hierarchy and NumVFs.  The number of buses required
for all VFs is determined by NumVFs, First VF Offset, and VF Stride (see
SR-IOV spec r1.1, sec 2.1.2).

Previously pci_iov_bus_range() computed how many buses would be required by
TotalVFs, but this was based on a single NumVFs value and may not have been
the maximum for all NumVFs configurations.

Iterate over all valid NumVFs and calculate the maximum number of bus
numbers that could ever be required for VFs of this device.

[bhelgaas: changelog, compute busnr of NumVFs, not TotalVFs, remove
kerenl-doc comment marker]
	Signed-off-by: Wei Yang <weiyang@linux.vnet.ibm.com>
	Acked-by: Bjorn Helgaas <bhelgaas@google.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 4449f079722c86d2f6925da039835acdd8e973a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/iov.c
diff --cc drivers/pci/iov.c
index d479fc488904,2ae921f84bd3..000000000000
--- a/drivers/pci/iov.c
+++ b/drivers/pci/iov.c
@@@ -566,9 -586,8 +590,14 @@@ int pci_iov_bus_range(struct pci_bus *b
  	list_for_each_entry(dev, &bus->devices, bus_list) {
  		if (!dev->is_physfn)
  			continue;
++<<<<<<< HEAD
 +		busnr = pci_iov_virtfn_bus(dev, dev->sriov->total_VFs - 1);
 +		if (busnr > max)
 +			max = busnr;
++=======
+ 		if (dev->sriov->max_VF_buses > max)
+ 			max = dev->sriov->max_VF_buses;
++>>>>>>> 4449f079722c (PCI: Calculate maximum number of buses required for VFs)
  	}
  
  	return max ? max - bus->number : 0;
* Unmerged path drivers/pci/iov.c
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index 8d738edfd967..a36abeef45f2 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -226,6 +226,7 @@ struct pci_sriov {
 	u16 stride;		/* following VF stride */
 	u32 pgsz;		/* page size for BAR alignment */
 	u8 link;		/* Function Dependency Link */
+	u8 max_VF_buses;	/* max buses consumed by VFs */
 	u16 driver_max_VFs;	/* max num VFs driver supports */
 	struct pci_dev *dev;	/* lowest numbered PF */
 	struct pci_dev *self;	/* this PF */
