xfs: invalidate cached acl if set directly via xattr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Brian Foster <bfoster@redhat.com>
commit 67d8e04e345eafcb2940066f435815032eec467d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/67d8e04e.failed

ACLs are stored as extended attributes of the inode to which they apply.
XFS converts the standard "system.posix_acl_[access|default]" attribute
names used to control ACLs to "trusted.SGI_ACL_[FILE|DEFAULT]" as stored
on-disk. These xattrs are directly exposed in on-disk format via
getxattr/setxattr, without any ACL aware code in the path to perform
validation, etc. This is partly historical and supports backup/restore
applications such as xfsdump to back up and restore the binary blob that
represents ACLs as-is.

Andreas reports that the ACLs observed via the getfacl interface is not
consistent when ACLs are set directly via the setxattr path. This occurs
because the ACLs are cached in-core against the inode and the xattr path
has no knowledge that the operation relates to ACLs.

Update the xattr set codepath to trap writes of the special XFS ACL
attributes and invalidate the associated cached ACL when this occurs.
This ensures that the correct ACLs are used on a subsequent operation
through the actual ACL interface.

Note that this does not update or add support for setting the ACL xattrs
directly beyond the restore use case that requires a correctly formatted
binary blob and to restore a consistent i_mode at the same time. It is
still possible for a root user to set an invalid or inconsistent (with
i_mode) ACL blob on-disk and potentially cause corruption.

[ With fixes from Andreas Gruenbacher. ]

	Reported-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 67d8e04e345eafcb2940066f435815032eec467d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_xattr.c
diff --cc fs/xfs/xfs_xattr.c
index a1dbcfdc89a5,1e08d3e85cd0..000000000000
--- a/fs/xfs/xfs_xattr.c
+++ b/fs/xfs/xfs_xattr.c
@@@ -57,7 -57,8 +57,12 @@@ static in
  xfs_xattr_set(struct dentry *dentry, const char *name, const void *value,
  		size_t size, int flags, int xflags)
  {
++<<<<<<< HEAD
 +	struct xfs_inode *ip = XFS_I(dentry->d_inode);
++=======
+ 	struct xfs_inode	*ip = XFS_I(d_inode(dentry));
+ 	int			error;
++>>>>>>> 67d8e04e345e (xfs: invalidate cached acl if set directly via xattr)
  
  	if (strcmp(name, "") == 0)
  		return -EINVAL;
* Unmerged path fs/xfs/xfs_xattr.c
