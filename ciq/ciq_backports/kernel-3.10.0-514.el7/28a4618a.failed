crypto: akcipher - add akcipher declarations needed by templates.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [include] crypto: akcipher - add akcipher declarations needed by templates (Neil Horman) [1274179]
Rebuild_FUZZ: 99.22%
commit-author Andrzej Zaborowski <andrew.zaborowski@intel.com>
commit 28a4618ad14cf17009a87d8b5718132a5d4ef852
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/28a4618a.failed

Add a struct akcipher_instance and struct akcipher_spawn similar to
how AEAD declares them and the macros for converting to/from
crypto_instance/crypto_spawn.  Also add register functions to
avoid exposing crypto_akcipher_type.

	Signed-off-by: Andrew Zaborowski <andrew.zaborowski@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 28a4618ad14cf17009a87d8b5718132a5d4ef852)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/akcipher.c
diff --cc crypto/akcipher.c
index d7986414814e,def301ed1288..000000000000
--- a/crypto/akcipher.c
+++ b/crypto/akcipher.c
@@@ -21,7 -21,7 +21,11 @@@
  #include <linux/cryptouser.h>
  #include <net/netlink.h>
  #include <crypto/akcipher.h>
++<<<<<<< HEAD
 +#include <crypto/public_key.h>
++=======
+ #include <crypto/internal/akcipher.h>
++>>>>>>> 28a4618ad14c (crypto: akcipher - add akcipher declarations needed by templates.)
  #include "internal.h"
  
  #ifdef CONFIG_NET
@@@ -113,5 -136,13 +140,13 @@@ void crypto_unregister_akcipher(struct 
  }
  EXPORT_SYMBOL_GPL(crypto_unregister_akcipher);
  
+ int akcipher_register_instance(struct crypto_template *tmpl,
+ 			       struct akcipher_instance *inst)
+ {
+ 	akcipher_prepare_alg(&inst->alg);
+ 	return crypto_register_instance(tmpl, akcipher_crypto_instance(inst));
+ }
+ EXPORT_SYMBOL_GPL(akcipher_register_instance);
+ 
  MODULE_LICENSE("GPL");
 -MODULE_DESCRIPTION("Generic public key cipher type");
 +MODULE_DESCRIPTION("Generic public key cihper type");
* Unmerged path crypto/akcipher.c
diff --git a/include/crypto/internal/akcipher.h b/include/crypto/internal/akcipher.h
index 9a2bda15e454..479a0078f0f7 100644
--- a/include/crypto/internal/akcipher.h
+++ b/include/crypto/internal/akcipher.h
@@ -13,6 +13,22 @@
 #ifndef _CRYPTO_AKCIPHER_INT_H
 #define _CRYPTO_AKCIPHER_INT_H
 #include <crypto/akcipher.h>
+#include <crypto/algapi.h>
+
+struct akcipher_instance {
+	void (*free)(struct akcipher_instance *inst);
+	union {
+		struct {
+			char head[offsetof(struct akcipher_alg, base)];
+			struct crypto_instance base;
+		} s;
+		struct akcipher_alg alg;
+	};
+};
+
+struct crypto_akcipher_spawn {
+	struct crypto_spawn base;
+};
 
 /*
  * Transform internal helpers.
@@ -38,6 +54,56 @@ static inline const char *akcipher_alg_name(struct crypto_akcipher *tfm)
 	return crypto_akcipher_tfm(tfm)->__crt_alg->cra_name;
 }
 
+static inline struct crypto_instance *akcipher_crypto_instance(
+		struct akcipher_instance *inst)
+{
+	return container_of(&inst->alg.base, struct crypto_instance, alg);
+}
+
+static inline struct akcipher_instance *akcipher_instance(
+		struct crypto_instance *inst)
+{
+	return container_of(&inst->alg, struct akcipher_instance, alg.base);
+}
+
+static inline struct akcipher_instance *akcipher_alg_instance(
+		struct crypto_akcipher *akcipher)
+{
+	return akcipher_instance(crypto_tfm_alg_instance(&akcipher->base));
+}
+
+static inline void *akcipher_instance_ctx(struct akcipher_instance *inst)
+{
+	return crypto_instance_ctx(akcipher_crypto_instance(inst));
+}
+
+static inline void crypto_set_akcipher_spawn(
+		struct crypto_akcipher_spawn *spawn,
+		struct crypto_instance *inst)
+{
+	crypto_set_spawn(&spawn->base, inst);
+}
+
+int crypto_grab_akcipher(struct crypto_akcipher_spawn *spawn, const char *name,
+		u32 type, u32 mask);
+
+static inline struct crypto_akcipher *crypto_spawn_akcipher(
+		struct crypto_akcipher_spawn *spawn)
+{
+	return crypto_spawn_tfm2(&spawn->base);
+}
+
+static inline void crypto_drop_akcipher(struct crypto_akcipher_spawn *spawn)
+{
+	crypto_drop_spawn(&spawn->base);
+}
+
+static inline struct akcipher_alg *crypto_spawn_akcipher_alg(
+		struct crypto_akcipher_spawn *spawn)
+{
+	return container_of(spawn->base.alg, struct akcipher_alg, base);
+}
+
 /**
  * crypto_register_akcipher() -- Register public key algorithm
  *
@@ -57,4 +123,16 @@ int crypto_register_akcipher(struct akcipher_alg *alg);
  * @alg:	algorithm definition
  */
 void crypto_unregister_akcipher(struct akcipher_alg *alg);
+
+/**
+ * akcipher_register_instance() -- Unregister public key template instance
+ *
+ * Function registers an implementation of an asymmetric key algorithm
+ * created from a template
+ *
+ * @tmpl:	the template from which the algorithm was created
+ * @inst:	the template instance
+ */
+int akcipher_register_instance(struct crypto_template *tmpl,
+		struct akcipher_instance *inst);
 #endif
