efi: Fix types in EFI calls to match EFI function definitions.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [firmware] efi: Fix types in EFI calls to match EFI function definitions (Lenny Szubowicz) [1310154]
Rebuild_FUZZ: 99.19%
commit-author Roy Franz <roy.franz@linaro.org>
commit 6a5fe770d32811ffacefaa2a430cc067ecc7336c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6a5fe770.failed

EFI calls can made directly on ARM, so the function pointers
are directly invoked.  This allows types to be checked at
compile time, so here we ensure that the parameters match
the function signature. The wrappers used by x86 prevent
any type checking.
Correct the type of chunksize to be based on native
width as specified by the EFI_FILE_PROTOCOL read()
function.

	Signed-off-by: Roy Franz <roy.franz@linaro.org>
	Signed-off-by: Matt Fleming <matt.fleming@intel.com>
(cherry picked from commit 6a5fe770d32811ffacefaa2a430cc067ecc7336c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/efi/efi-stub-helper.c
diff --cc drivers/firmware/efi/efi-stub-helper.c
index f4a83accac18,4252d01089b2..000000000000
--- a/drivers/firmware/efi/efi-stub-helper.c
+++ b/drivers/firmware/efi/efi-stub-helper.c
@@@ -298,10 -323,10 +298,15 @@@ static efi_status_t handle_ramdisks(efi
  
  	status = efi_call_phys3(sys_table_arg->boottime->allocate_pool,
  				EFI_LOADER_DATA,
++<<<<<<< HEAD
 +				nr_initrds * sizeof(*initrds),
 +				&initrds);
++=======
+ 				nr_files * sizeof(*files),
+ 				(void **)&files);
++>>>>>>> 6a5fe770d328 (efi: Fix types in EFI calls to match EFI function definitions.)
  	if (status != EFI_SUCCESS) {
 -		efi_printk(sys_table_arg, "Failed to alloc mem for file handle list\n");
 +		efi_printk(sys_table_arg, "Failed to alloc mem for initrds\n");
  		goto fail;
  	}
  
@@@ -350,10 -375,11 +355,11 @@@
  			boottime = sys_table_arg->boottime;
  
  			status = efi_call_phys3(boottime->handle_protocol,
- 					image->device_handle, &fs_proto, &io);
+ 					image->device_handle, &fs_proto,
+ 						(void **)&io);
  			if (status != EFI_SUCCESS) {
  				efi_printk(sys_table_arg, "Failed to handle fs_proto\n");
 -				goto free_files;
 +				goto free_initrds;
  			}
  
  			status = efi_call_phys2(io->open_volume, io, &fh);
@@@ -384,9 -410,10 +390,10 @@@
  
  grow:
  		status = efi_call_phys3(sys_table_arg->boottime->allocate_pool,
- 					EFI_LOADER_DATA, info_sz, &info);
+ 					EFI_LOADER_DATA, info_sz,
+ 					(void **)&info);
  		if (status != EFI_SUCCESS) {
 -			efi_printk(sys_table_arg, "Failed to alloc mem for file info\n");
 +			efi_printk(sys_table_arg, "Failed to alloc mem for initrd info\n");
  			goto close_handles;
  		}
  
@@@ -426,29 -453,30 +433,41 @@@
  		}
  
  		/* We've run out of free low memory. */
 -		if (file_addr > max_addr) {
 +		if (initrd_addr > hdr->initrd_addr_max) {
  			efi_printk(sys_table_arg, "We've run out of free low memory\n");
  			status = EFI_INVALID_PARAMETER;
 -			goto free_file_total;
 +			goto free_initrd_total;
  		}
  
++<<<<<<< HEAD
 +		addr = initrd_addr;
 +		for (j = 0; j < nr_initrds; j++) {
 +			u64 size;
++=======
+ 		addr = file_addr;
+ 		for (j = 0; j < nr_files; j++) {
+ 			unsigned long size;
++>>>>>>> 6a5fe770d328 (efi: Fix types in EFI calls to match EFI function definitions.)
  
 -			size = files[j].size;
 +			size = initrds[j].size;
  			while (size) {
- 				u64 chunksize;
+ 				unsigned long chunksize;
  				if (size > EFI_READ_CHUNK_SIZE)
  					chunksize = EFI_READ_CHUNK_SIZE;
  				else
  					chunksize = size;
  				status = efi_call_phys3(fh->read,
++<<<<<<< HEAD
 +							initrds[j].handle,
 +							&chunksize, addr);
++=======
+ 							files[j].handle,
+ 							&chunksize,
+ 							(void *)addr);
++>>>>>>> 6a5fe770d328 (efi: Fix types in EFI calls to match EFI function definitions.)
  				if (status != EFI_SUCCESS) {
 -					efi_printk(sys_table_arg, "Failed to read file\n");
 -					goto free_file_total;
 +					efi_printk(sys_table_arg, "Failed to read initrd\n");
 +					goto free_initrd_total;
  				}
  				addr += chunksize;
  				size -= chunksize;
* Unmerged path drivers/firmware/efi/efi-stub-helper.c
