regmap: Simplify the initiation of async I/O

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [sound] alsa: regmap: Simplify the initiation of async I/O (Jaroslav Kysela) [1220299]
Rebuild_FUZZ: 93.62%
commit-author Mark Brown <broonie@linaro.org>
commit 0a8198094da895c8d5db95812fe9de7027d808e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0a819809.failed

Rather than passing a flag around through the entire call stack store it
in the regmap struct and read it when required. This minimises the
visibility of the feature through the API, minimising the code updates
needed to use it more widely.

	Signed-off-by: Mark Brown <broonie@linaro.org>
(cherry picked from commit 0a8198094da895c8d5db95812fe9de7027d808e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/regmap/regmap.c
diff --cc drivers/base/regmap/regmap.c
index 655fa140fab1,268fb71891ee..000000000000
--- a/drivers/base/regmap/regmap.c
+++ b/drivers/base/regmap/regmap.c
@@@ -1023,10 -1126,8 +1023,15 @@@ int _regmap_raw_write(struct regmap *ma
  		val = work_val;
  	}
  
++<<<<<<< HEAD
 +	if (async && map->bus->async_write) {
 +		struct regmap_async *async = map->bus->async_alloc();
 +		if (!async)
 +			return -ENOMEM;
++=======
+ 	if (map->async && map->bus->async_write) {
+ 		struct regmap_async *async;
++>>>>>>> 0a8198094da8 (regmap: Simplify the initiation of async I/O)
  
  		trace_regmap_async_write_start(map->dev, reg, val_len);
  
diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 27eb7774ab20..80bc0b25526c 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -63,6 +63,7 @@ struct regmap {
 	void *bus_context;
 	const char *name;
 
+	bool async;
 	spinlock_t async_lock;
 	wait_queue_head_t async_waitq;
 	struct list_head async_list;
@@ -209,7 +210,7 @@ bool regcache_set_val(struct regmap *map, void *base, unsigned int idx,
 int regcache_lookup_reg(struct regmap *map, unsigned int reg);
 
 int _regmap_raw_write(struct regmap *map, unsigned int reg,
-		      const void *val, size_t val_len, bool async);
+		      const void *val, size_t val_len);
 
 void regmap_async_complete_cb(struct regmap_async *async, int ret);
 
diff --git a/drivers/base/regmap/regcache.c b/drivers/base/regmap/regcache.c
index 4c89da3abb50..23e49874d6da 100644
--- a/drivers/base/regmap/regcache.c
+++ b/drivers/base/regmap/regcache.c
@@ -596,8 +596,7 @@ static int regcache_sync_block_raw_flush(struct regmap *map, const void **data,
 
 	map->cache_bypass = 1;
 
-	ret = _regmap_raw_write(map, base, *data, count * val_bytes,
-				false);
+	ret = _regmap_raw_write(map, base, *data, count * val_bytes);
 
 	map->cache_bypass = 0;
 
* Unmerged path drivers/base/regmap/regmap.c
