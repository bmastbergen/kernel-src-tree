lib: add "on"/"off" support to kstrtobool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Kees Cook <keescook@chromium.org>
commit a81a5a17d44b26521fb1199f8ccf27f4af337a67
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a81a5a17.failed

Add support for "on" and "off" when converting to boolean.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Cc: Amitkumar Karwar <akarwar@marvell.com>
	Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Joe Perches <joe@perches.com>
	Cc: Kalle Valo <kvalo@codeaurora.org>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Nishant Sarmukadam <nishants@marvell.com>
	Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
	Cc: Steve French <sfrench@samba.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a81a5a17d44b26521fb1199f8ccf27f4af337a67)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/kstrtox.c
diff --cc lib/kstrtox.c
index f78ae0c0c4e2,d8a5cf66c316..000000000000
--- a/lib/kstrtox.c
+++ b/lib/kstrtox.c
@@@ -322,6 -321,70 +322,73 @@@ int kstrtos8(const char *s, unsigned in
  }
  EXPORT_SYMBOL(kstrtos8);
  
++<<<<<<< HEAD
++=======
+ /**
+  * kstrtobool - convert common user inputs into boolean values
+  * @s: input string
+  * @res: result
+  *
+  * This routine returns 0 iff the first character is one of 'Yy1Nn0', or
+  * [oO][NnFf] for "on" and "off". Otherwise it will return -EINVAL.  Value
+  * pointed to by res is updated upon finding a match.
+  */
+ int kstrtobool(const char *s, bool *res)
+ {
+ 	if (!s)
+ 		return -EINVAL;
+ 
+ 	switch (s[0]) {
+ 	case 'y':
+ 	case 'Y':
+ 	case '1':
+ 		*res = true;
+ 		return 0;
+ 	case 'n':
+ 	case 'N':
+ 	case '0':
+ 		*res = false;
+ 		return 0;
+ 	case 'o':
+ 	case 'O':
+ 		switch (s[1]) {
+ 		case 'n':
+ 		case 'N':
+ 			*res = true;
+ 			return 0;
+ 		case 'f':
+ 		case 'F':
+ 			*res = false;
+ 			return 0;
+ 		default:
+ 			break;
+ 		}
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return -EINVAL;
+ }
+ EXPORT_SYMBOL(kstrtobool);
+ 
+ /*
+  * Since "base" would be a nonsense argument, this open-codes the
+  * _from_user helper instead of using the helper macro below.
+  */
+ int kstrtobool_from_user(const char __user *s, size_t count, bool *res)
+ {
+ 	/* Longest string needed to differentiate, newline, terminator */
+ 	char buf[4];
+ 
+ 	count = min(count, sizeof(buf) - 1);
+ 	if (copy_from_user(buf, s, count))
+ 		return -EFAULT;
+ 	buf[count] = '\0';
+ 	return kstrtobool(buf, res);
+ }
+ EXPORT_SYMBOL(kstrtobool_from_user);
+ 
++>>>>>>> a81a5a17d44b (lib: add "on"/"off" support to kstrtobool)
  #define kstrto_from_user(f, g, type)					\
  int f(const char __user *s, size_t count, unsigned int base, type *res)	\
  {									\
* Unmerged path lib/kstrtox.c
