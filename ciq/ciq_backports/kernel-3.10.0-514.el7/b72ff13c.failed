sched/fair: Reduce local_group logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [kernel] sched: Reduce local_group logic (Jiri Olsa) [1211784]
Rebuild_FUZZ: 92.54%
commit-author Peter Zijlstra <peterz@infradead.org>
commit b72ff13ce6021b37459afacbccc0bc9b16989013
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/b72ff13c.failed

Try and reduce the local_group logic by pulling most of it into
update_sd_lb_stats.

	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/n/tip-mgezl354xgyhiyrte78fdkpd@git.kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b72ff13ce6021b37459afacbccc0bc9b16989013)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 3c2f426dff2b,f9f438530bee..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -5757,13 -4673,18 +5755,28 @@@ static inline void update_sd_lb_stats(s
  
  		local_group = cpumask_test_cpu(env->dst_cpu, sched_group_cpus(sg));
  		if (local_group) {
++<<<<<<< HEAD
 +			sds->this = sg;
 +			sgs = &sds->this_stat;
 +		}
 +
 +		memset(sgs, 0, sizeof(*sgs));
 +		update_sg_lb_stats(env, sg, load_idx, local_group, sgs,
 +						&overload);
++=======
+ 			sds->local = sg;
+ 			sgs = &sds->local_stat;
+ 
+ 			if (env->idle != CPU_NEWLY_IDLE ||
+ 			    time_after_eq(jiffies, sg->sgp->next_update))
+ 				update_group_power(env->sd, env->dst_cpu);
+ 		}
+ 
+ 		update_sg_lb_stats(env, sg, load_idx, local_group, sgs);
++>>>>>>> b72ff13ce602 (sched/fair: Reduce local_group logic)
+ 
+ 		if (local_group)
+ 			goto next_group;
  
  		/*
  		 * In case the child domain prefers tasks go to siblings
@@@ -5775,31 -4696,22 +5788,37 @@@
  		 * heaviest group when it is already under-utilized (possible
  		 * with a large weight task outweighs the tasks on the system).
  		 */
++<<<<<<< HEAD
 +		if (prefer_sibling && !local_group &&
 +				sds->this && sds->this_stat.group_has_capacity)
++=======
+ 		if (prefer_sibling && sds->local &&
+ 		    sds->local_stat.group_has_capacity)
++>>>>>>> b72ff13ce602 (sched/fair: Reduce local_group logic)
  			sgs->group_capacity = min(sgs->group_capacity, 1U);
  
- 		/* Now, start updating sd_lb_stats */
- 		sds->total_load += sgs->group_load;
- 		sds->total_pwr += sgs->group_power;
- 
- 		if (!local_group && update_sd_pick_busiest(env, sds, sg, sgs)) {
+ 		if (update_sd_pick_busiest(env, sds, sg, sgs)) {
  			sds->busiest = sg;
  			sds->busiest_stat = *sgs;
  		}
  
+ next_group:
+ 		/* Now, start updating sd_lb_stats */
+ 		sds->total_load += sgs->group_load;
+ 		sds->total_pwr += sgs->group_power;
+ 
  		sg = sg->next;
  	} while (sg != env->sd->groups);
 +
 +	if (env->sd->flags & SD_NUMA)
 +		env->fbq_type = fbq_classify_group(&sds->busiest_stat);
 +
 +	if (!env->sd->parent) {
 +		/* update overload indicator if we are at root domain */
 +		if (env->dst_rq->rd->overload != overload)
 +			env->dst_rq->rd->overload = overload;
 +	}
 +
  }
  
  /**
* Unmerged path kernel/sched/fair.c
