geneve: Add geneve udp port offload for ethernet devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Singhai, Anjali <anjali.singhai@intel.com>
commit a8170d2b9e8d38a1f3fa3b40b6f8cd34a87d5382
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/a8170d2b.failed

Add ndo_ops to add/del UDP ports to a device that supports geneve
offload.

v2: Comment fix.

	Signed-off-by: Anjali Singhai Jain <anjali.singhai@intel.com>
	Signed-off-by: Kiran Patil <kiran.patil@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a8170d2b9e8d38a1f3fa3b40b6f8cd34a87d5382)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index f42ad8e42b23,81b26a543a3c..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1145,40 -1230,32 +1158,53 @@@ struct net_device_ops 
  	void			(*ndo_del_vxlan_port)(struct  net_device *dev,
  						      sa_family_t sa_family,
  						      __be16 port);
++<<<<<<< HEAD
 +
 +	/* RHEL SPECIFIC
 +	 *
 +	 * The following padding has been inserted before ABI freeze to
 +	 * allow extending the structure while preserve ABI. Feel free
 +	 * to replace reserved slots with required structure field
 +	 * additions of your backport.
 +	 */
 +	RH_KABI_USE_P(1, int	(*ndo_get_iflink)(const struct net_device *dev))
 +	RH_KABI_USE_P(2, netdev_features_t
 +				(*ndo_features_check)(struct sk_buff *skb,
 +						      struct net_device *dev,
 +						      netdev_features_t features))
 +	RH_KABI_USE_P(3, int	(*ndo_set_vf_rate)(struct net_device *dev,
 +						   int vf, int min_tx_rate,
 +						   int max_tx_rate))
 +	RH_KABI_USE_P(4, int	(*ndo_get_vf_stats)(struct net_device *dev,
 +						    int vf,
 +						    struct ifla_vf_stats
 +						    *vf_stats))
 +	RH_KABI_USE_P(5, int    (*ndo_set_vf_rss_query_en)(struct net_device *dev,
 +							   int vf, bool setting))
++=======
+ 	void			(*ndo_add_geneve_port)(struct  net_device *dev,
+ 						       sa_family_t sa_family,
+ 						       __be16 port);
+ 	void			(*ndo_del_geneve_port)(struct  net_device *dev,
+ 						       sa_family_t sa_family,
+ 						       __be16 port);
+ 	void*			(*ndo_dfwd_add_station)(struct net_device *pdev,
+ 							struct net_device *dev);
+ 	void			(*ndo_dfwd_del_station)(struct net_device *pdev,
+ 							void *priv);
 -
 -	netdev_tx_t		(*ndo_dfwd_start_xmit) (struct sk_buff *skb,
 -							struct net_device *dev,
 -							void *priv);
 -	int			(*ndo_get_lock_subclass)(struct net_device *dev);
 -	netdev_features_t	(*ndo_features_check) (struct sk_buff *skb,
 -						       struct net_device *dev,
 -						       netdev_features_t features);
 -	int			(*ndo_set_tx_maxrate)(struct net_device *dev,
 -						      int queue_index,
 -						      u32 maxrate);
 -	int			(*ndo_get_iflink)(const struct net_device *dev);
 -	int			(*ndo_change_proto_down)(struct net_device *dev,
 -							 bool proto_down);
 -	int			(*ndo_fill_metadata_dst)(struct net_device *dev,
 -						       struct sk_buff *skb);
++>>>>>>> a8170d2b9e8d (geneve: Add geneve udp port offload for ethernet devices)
 +
 +	RH_KABI_RESERVE_P(6)
 +	RH_KABI_RESERVE_P(7)
 +	RH_KABI_RESERVE_P(8)
 +	RH_KABI_RESERVE_P(9)
 +	RH_KABI_RESERVE_P(10)
 +	RH_KABI_RESERVE_P(11)
 +	RH_KABI_RESERVE_P(12)
 +	RH_KABI_RESERVE_P(13)
 +	RH_KABI_RESERVE_P(14)
 +	RH_KABI_RESERVE_P(15)
 +	RH_KABI_RESERVE_P(16)
  };
  
  /**
diff --git a/drivers/net/geneve.c b/drivers/net/geneve.c
index 61619a003943..313eef5edea7 100644
--- a/drivers/net/geneve.c
+++ b/drivers/net/geneve.c
@@ -304,8 +304,11 @@ static struct socket *geneve_create_sock(struct net *net, bool ipv6,
 
 static void geneve_notify_add_rx_port(struct geneve_sock *gs)
 {
+	struct net_device *dev;
 	struct sock *sk = gs->sock->sk;
+	struct net *net = sock_net(sk);
 	sa_family_t sa_family = sk->sk_family;
+	__be16 port = inet_sk(sk)->inet_sport;
 	int err;
 
 	if (sa_family == AF_INET) {
@@ -314,6 +317,14 @@ static void geneve_notify_add_rx_port(struct geneve_sock *gs)
 			pr_warn("geneve: udp_add_offload failed with status %d\n",
 				err);
 	}
+
+	rcu_read_lock();
+	for_each_netdev_rcu(net, dev) {
+		if (dev->netdev_ops->ndo_add_geneve_port)
+			dev->netdev_ops->ndo_add_geneve_port(dev, sa_family,
+							     port);
+	}
+	rcu_read_unlock();
 }
 
 static int geneve_hlen(struct genevehdr *gh)
@@ -454,8 +465,20 @@ static struct geneve_sock *geneve_socket_create(struct net *net, __be16 port,
 
 static void geneve_notify_del_rx_port(struct geneve_sock *gs)
 {
+	struct net_device *dev;
 	struct sock *sk = gs->sock->sk;
+	struct net *net = sock_net(sk);
 	sa_family_t sa_family = sk->sk_family;
+	__be16 port = inet_sk(sk)->inet_sport;
+
+	rcu_read_lock();
+	for_each_netdev_rcu(net, dev) {
+		if (dev->netdev_ops->ndo_del_geneve_port)
+			dev->netdev_ops->ndo_del_geneve_port(dev, sa_family,
+							     port);
+	}
+
+	rcu_read_unlock();
 
 	if (sa_family == AF_INET)
 		udp_del_offload(&gs->udp_offloads);
* Unmerged path include/linux/netdevice.h
