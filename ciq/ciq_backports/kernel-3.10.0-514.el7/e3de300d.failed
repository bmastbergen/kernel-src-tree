sched: Preserve the nice level over sched_setscheduler() and sched_setparam() calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit e3de300d1212b42aa9d0d6031b12fca06ac00dd9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/e3de300d.failed

Previously sched_setscheduler() and sched_setparam() would not affect
the nice value of a task, restore this behaviour.

	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: raistlin@linux.it
	Cc: juri.lelli@gmail.com
	Cc: Michael wang <wangyun@linux.vnet.ibm.com>
	Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
Fixes: d50dde5a10f3 ("sched: Add new scheduler syscalls to support an extended scheduling parameters ABI")
Link: http://lkml.kernel.org/r/20140115113015.GB31570@twins.programming.kicks-ass.net
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e3de300d1212b42aa9d0d6031b12fca06ac00dd9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 04c5c65570ca,c1b3d7e04f0f..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -4290,7 -3449,12 +4290,16 @@@ recheck
  int sched_setscheduler(struct task_struct *p, int policy,
  		       const struct sched_param *param)
  {
++<<<<<<< HEAD
 +	return __sched_setscheduler(p, policy, param, true);
++=======
+ 	struct sched_attr attr = {
+ 		.sched_policy   = policy,
+ 		.sched_priority = param->sched_priority,
+ 		.sched_nice	= PRIO_TO_NICE(p->static_prio),
+ 	};
+ 	return __sched_setscheduler(p, &attr, true);
++>>>>>>> e3de300d1212 (sched: Preserve the nice level over sched_setscheduler() and sched_setparam() calls)
  }
  EXPORT_SYMBOL_GPL(sched_setscheduler);
  
@@@ -4310,7 -3480,12 +4319,16 @@@
  int sched_setscheduler_nocheck(struct task_struct *p, int policy,
  			       const struct sched_param *param)
  {
++<<<<<<< HEAD
 +	return __sched_setscheduler(p, policy, param, false);
++=======
+ 	struct sched_attr attr = {
+ 		.sched_policy   = policy,
+ 		.sched_priority = param->sched_priority,
+ 		.sched_nice	= PRIO_TO_NICE(p->static_prio),
+ 	};
+ 	return __sched_setscheduler(p, &attr, false);
++>>>>>>> e3de300d1212 (sched: Preserve the nice level over sched_setscheduler() and sched_setparam() calls)
  }
  
  static int
* Unmerged path kernel/sched/core.c
