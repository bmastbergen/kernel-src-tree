KVM: PPC: Implement kvm_arch_intc_initialized() for PPC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [powerpc] kvm: Implement kvm_arch_intc_initialized() for PPC (David Gibson) [1375778]
Rebuild_FUZZ: 95.24%
commit-author Paul Mackerras <paulus@ozlabs.org>
commit 34a75b0f63356097ae9f706d64a793934891002f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/34a75b0f.failed

It doesn't make sense to create irqfds for a VM that doesn't have
in-kernel interrupt controller emulation.  There is an existing
interface for architecture code to tell the irqfd code whether or
not any interrupt controller has been initialized, called
kvm_arch_intc_initialized(), so let's implement that for powerpc.

	Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
(cherry picked from commit 34a75b0f63356097ae9f706d64a793934891002f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/kvm_host.h
diff --cc arch/powerpc/include/asm/kvm_host.h
index 1914abac8635,e36ce0cff766..000000000000
--- a/arch/powerpc/include/asm/kvm_host.h
+++ b/arch/powerpc/include/asm/kvm_host.h
@@@ -40,6 -40,11 +40,14 @@@
  #define KVM_MAX_VCORES		NR_CPUS
  #define KVM_USER_MEM_SLOTS	512
  
++<<<<<<< HEAD
++=======
+ #include <asm/cputhreads.h>
+ #define KVM_MAX_VCPU_ID                (threads_per_subcore * KVM_MAX_VCORES)
+ 
+ #define __KVM_HAVE_ARCH_INTC_INITIALIZED
+ 
++>>>>>>> 34a75b0f6335 (KVM: PPC: Implement kvm_arch_intc_initialized() for PPC)
  #ifdef CONFIG_KVM_MMIO
  #define KVM_COALESCED_MMIO_PAGE_OFFSET 1
  #endif
* Unmerged path arch/powerpc/include/asm/kvm_host.h
diff --git a/arch/powerpc/kvm/powerpc.c b/arch/powerpc/kvm/powerpc.c
index 10ddb1001ec3..b34ea57ac9d3 100644
--- a/arch/powerpc/kvm/powerpc.c
+++ b/arch/powerpc/kvm/powerpc.c
@@ -1086,6 +1086,19 @@ static int kvm_vcpu_ioctl_enable_cap(struct kvm_vcpu *vcpu,
 	return r;
 }
 
+bool kvm_arch_intc_initialized(struct kvm *kvm)
+{
+#ifdef CONFIG_KVM_MPIC
+	if (kvm->arch.mpic)
+		return true;
+#endif
+#ifdef CONFIG_KVM_XICS
+	if (kvm->arch.xics)
+		return true;
+#endif
+	return false;
+}
+
 int kvm_arch_vcpu_ioctl_get_mpstate(struct kvm_vcpu *vcpu,
                                     struct kvm_mp_state *mp_state)
 {
