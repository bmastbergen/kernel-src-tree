mei: move mei_hbm_hdr function from hbm.h the hbm.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 2190fe2a3f4a4e76f6c5ebfc1070b86b34f0345c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2190fe2a.failed

mei_hbm_hder helper function is only used in hbm.c
so there is no need to define it in a header file

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2190fe2a3f4a4e76f6c5ebfc1070b86b34f0345c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/hbm.c
diff --cc drivers/misc/mei/hbm.c
index e04f10ba9aa2,271c24086729..000000000000
--- a/drivers/misc/mei/hbm.c
+++ b/drivers/misc/mei/hbm.c
@@@ -103,37 -119,34 +103,53 @@@ void mei_hbm_reset(struct mei_device *d
  }
  
  /**
 - * mei_hbm_reset - reset hbm counters and book keeping data structurs
++<<<<<<< HEAD
 + * mei_hbm_me_cl_allocate - allocates storage for me clients
   *
   * @dev: the device structure
 + *
 + * returns 0 on success -ENOMEM on allocation failure
   */
 -void mei_hbm_reset(struct mei_device *dev)
 +static int mei_hbm_me_cl_allocate(struct mei_device *dev)
  {
 -	dev->me_client_presentation_num = 0;
 -	dev->me_client_index = 0;
 +	struct mei_me_client *clients;
 +	int b;
  
 -	mei_me_cl_remove_all(dev);
 +	mei_hbm_reset(dev);
  
 -	mei_hbm_idle(dev);
 -}
 +	/* count how many ME clients we have */
 +	for_each_set_bit(b, dev->me_clients_map, MEI_CLIENTS_MAX)
 +		dev->me_clients_num++;
  
 -/**
 +	if (dev->me_clients_num == 0)
 +		return 0;
 +
 +	dev_dbg(&dev->pdev->dev, "memory allocation for ME clients size=%ld.\n",
 +		dev->me_clients_num * sizeof(struct mei_me_client));
 +	/* allocate storage for ME clients representation */
 +	clients = kcalloc(dev->me_clients_num,
 +			sizeof(struct mei_me_client), GFP_KERNEL);
 +	if (!clients) {
 +		dev_err(&dev->pdev->dev, "memory allocation for ME clients failed.\n");
 +		return -ENOMEM;
 +	}
 +	dev->me_clients = clients;
 +	return 0;
++=======
+  * mei_hbm_hdr - construct hbm header
+  *
+  * @hdr: hbm header
+  * @length: payload length
+  */
+ 
+ static inline void mei_hbm_hdr(struct mei_msg_hdr *hdr, size_t length)
+ {
+ 	hdr->host_addr = 0;
+ 	hdr->me_addr = 0;
+ 	hdr->length = length;
+ 	hdr->msg_complete = 1;
+ 	hdr->reserved = 0;
++>>>>>>> 2190fe2a3f4a (mei: move mei_hbm_hdr function from hbm.h the hbm.c)
  }
  
  /**
* Unmerged path drivers/misc/mei/hbm.c
diff --git a/drivers/misc/mei/hbm.h b/drivers/misc/mei/hbm.h
index efcb0d45bbe6..b7cd3d857fd5 100644
--- a/drivers/misc/mei/hbm.h
+++ b/drivers/misc/mei/hbm.h
@@ -44,15 +44,6 @@ const char *mei_hbm_state_str(enum mei_hbm_state state);
 
 int mei_hbm_dispatch(struct mei_device *dev, struct mei_msg_hdr *hdr);
 
-static inline void mei_hbm_hdr(struct mei_msg_hdr *hdr, size_t length)
-{
-	hdr->host_addr = 0;
-	hdr->me_addr = 0;
-	hdr->length = length;
-	hdr->msg_complete = 1;
-	hdr->reserved = 0;
-}
-
 void mei_hbm_idle(struct mei_device *dev);
 void mei_hbm_reset(struct mei_device *dev);
 int mei_hbm_start_req(struct mei_device *dev);
