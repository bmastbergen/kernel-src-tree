mpt3sas: Fix use sas_is_tlr_enabled API before enabling MPI2_SCSIIO_CONTROL_TLR_ON flag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sreekanth Reddy <sreekanth.reddy@avagotech.com>
commit 15de0de29f7ba5cce9699a8cc2344ca137beb25a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/15de0de2.failed

Before enabling MPI2_SCSIIO_CONTROL_TLR_ON flag in MPI SCSI IO request
message, check whether TLR is enabled on the drive using
'sas_is_tlr_enabled' API.

Actually in the driver code, driver is using below API's

1. sas_enable_tlr() - to enable the TLR
2. sas_disable_tlr() - to disable the TLR
3. sas_is_tlr_enabled() - to check whether TLR is enabled or not.

but in scsih_qcmd() we have missed to use sas_is_tlr_enabled() API,
instead we checking for TLR bit from flag field of driver's 'struct
MPT3SAS_DEVIC' structure. which is corrected with this patch.

	Signed-off-by: Sreekanth Reddy <Sreekanth.Reddy@avagotech.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 15de0de29f7ba5cce9699a8cc2344ca137beb25a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_scsih.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_scsih.c
index dab4affe7dc9,9ab77b06434d..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_scsih.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_scsih.c
@@@ -3759,19 -3899,13 +3759,27 @@@ _scsih_qcmd(struct Scsi_Host *shost, st
  		mpi_control = MPI2_SCSIIO_CONTROL_NODATATRANSFER;
  
  	/* set tags */
 -	mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
 +	if (!(sas_device_priv_data->flags & MPT_DEVICE_FLAGS_INIT)) {
 +		if (scmd->device->tagged_supported) {
 +			if (scmd->device->ordered_tags)
 +				mpi_control |= MPI2_SCSIIO_CONTROL_ORDEREDQ;
 +			else
 +				mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
 +		} else
 +			mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
 +	} else
 +		mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
  
++<<<<<<< HEAD
 +	if ((sas_device_priv_data->flags & MPT_DEVICE_TLR_ON) &&
 +	    scmd->cmd_len != 32)
++=======
+ 	/* Make sure Device is not raid volume.
+ 	 * We do not expose raid functionality to upper layer for warpdrive.
+ 	 */
+ 	if (!ioc->is_warpdrive && !scsih_is_raid(&scmd->device->sdev_gendev)
+ 	    && sas_is_tlr_enabled(scmd->device) && scmd->cmd_len != 32)
++>>>>>>> 15de0de29f7b (mpt3sas: Fix use sas_is_tlr_enabled API before enabling MPI2_SCSIIO_CONTROL_TLR_ON flag)
  		mpi_control |= MPI2_SCSIIO_CONTROL_TLR_ON;
  
  	smid = mpt3sas_base_get_smid_scsiio(ioc, ioc->scsi_io_cb_idx, scmd);
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_scsih.c
