mmc: tmio: add TMIO_MMC_SDIO_STATUS_QUIRK

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Shinobu Uehara <shinobu.uehara.xc@renesas.com>
commit 6b98757e53cb0e93b02db4067c14afcb32c90615
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/6b98757e.failed

Renesas R-Car SDHI should set reserved bits
on CTL_SDIO_STATUS register when writing.
This patch adds new TMIO_MMC_SDIO_STATUS_QUIRK flags
for this purpose

[Kuninori Morimoto: tidyuped for upstreaming
                    enabled this flags for all SH-Mobile/R-Car]

	Tested-by: Nguyen Xuan Nui <nx-nui@jinso.co.jp>
	Tested-by: Hiep Cao Minh <cm-hiep@jinso.co.jp>
	Signed-off-by: Shinobu Uehara <shinobu.uehara.xc@renesas.com>
	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 6b98757e53cb0e93b02db4067c14afcb32c90615)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sh_mobile_sdhi.c
#	include/linux/mfd/tmio.h
diff --cc drivers/mmc/host/sh_mobile_sdhi.c
index 79ee6f0c45bd,ebcfc659b799..000000000000
--- a/drivers/mmc/host/sh_mobile_sdhi.c
+++ b/drivers/mmc/host/sh_mobile_sdhi.c
@@@ -196,6 -225,16 +196,19 @@@ static int sh_mobile_sdhi_probe(struct 
  	 */
  	mmc_data->flags |= TMIO_MMC_SDIO_IRQ;
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * All SDHI have CMD12 controll bit
+ 	 */
+ 	mmc_data->flags |= TMIO_MMC_HAVE_CMD12_CTRL;
+ 
+ 	/*
+ 	 * All SDHI need SDIO_INFO1 reserved bit
+ 	 */
+ 	mmc_data->flags |= TMIO_MMC_SDIO_STATUS_QUIRK;
+ 
++>>>>>>> 6b98757e53cb (mmc: tmio: add TMIO_MMC_SDIO_STATUS_QUIRK)
  	if (of_id && of_id->data) {
  		const struct sh_mobile_sdhi_of_data *of_data = of_id->data;
  		mmc_data->flags |= of_data->tmio_flags;
diff --cc include/linux/mfd/tmio.h
index b22883d60500,a7493ae01b58..000000000000
--- a/include/linux/mfd/tmio.h
+++ b/include/linux/mfd/tmio.h
@@@ -76,6 -76,24 +76,27 @@@
   */
  #define TMIO_MMC_USE_GPIO_CD		(1 << 5)
  
++<<<<<<< HEAD
++=======
+ /*
+  * Some controllers doesn't have over 0x100 register.
+  * it is used to checking accessibility of
+  * CTL_SD_CARD_CLK_CTL / CTL_CLK_AND_WAIT_CTL
+  */
+ #define TMIO_MMC_HAVE_HIGH_REG		(1 << 6)
+ 
+ /*
+  * Some controllers have CMD12 automatically
+  * issue/non-issue register
+  */
+ #define TMIO_MMC_HAVE_CMD12_CTRL	(1 << 7)
+ 
+ /*
+  * Some controllers needs to set 1 on SDIO status reserved bits
+  */
+ #define TMIO_MMC_SDIO_STATUS_QUIRK	(1 << 8)
+ 
++>>>>>>> 6b98757e53cb (mmc: tmio: add TMIO_MMC_SDIO_STATUS_QUIRK)
  int tmio_core_mmc_enable(void __iomem *cnf, int shift, unsigned long base);
  int tmio_core_mmc_resume(void __iomem *cnf, int shift, unsigned long base);
  void tmio_core_mmc_pwr(void __iomem *cnf, int shift, int state);
* Unmerged path drivers/mmc/host/sh_mobile_sdhi.c
diff --git a/drivers/mmc/host/tmio_mmc_pio.c b/drivers/mmc/host/tmio_mmc_pio.c
index ff722d753e2f..cc8e97c7857d 100644
--- a/drivers/mmc/host/tmio_mmc_pio.c
+++ b/drivers/mmc/host/tmio_mmc_pio.c
@@ -643,6 +643,7 @@ irqreturn_t tmio_mmc_sdio_irq(int irq, void *devid)
 	struct mmc_host *mmc = host->mmc;
 	struct tmio_mmc_data *pdata = host->pdata;
 	unsigned int ireg, status;
+	unsigned int sdio_status;
 
 	if (!(pdata->flags & TMIO_MMC_SDIO_IRQ))
 		return IRQ_HANDLED;
@@ -650,7 +651,11 @@ irqreturn_t tmio_mmc_sdio_irq(int irq, void *devid)
 	status = sd_ctrl_read16(host, CTL_SDIO_STATUS);
 	ireg = status & TMIO_SDIO_MASK_ALL & ~host->sdcard_irq_mask;
 
-	sd_ctrl_write16(host, CTL_SDIO_STATUS, status & ~TMIO_SDIO_MASK_ALL);
+	sdio_status = status & ~TMIO_SDIO_MASK_ALL;
+	if (pdata->flags & TMIO_MMC_SDIO_STATUS_QUIRK)
+		sdio_status |= 6;
+
+	sd_ctrl_write16(host, CTL_SDIO_STATUS, sdio_status);
 
 	if (mmc->caps & MMC_CAP_SDIO_IRQ && ireg & TMIO_SDIO_STAT_IOIRQ)
 		mmc_signal_sdio_irq(mmc);
* Unmerged path include/linux/mfd/tmio.h
