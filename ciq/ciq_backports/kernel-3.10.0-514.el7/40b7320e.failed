mei: bus: export client protocol version

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit 40b7320ee413d0d1cc89c32c2a757fda56d27708
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/40b7320e.failed

export me client protocol version to sysfs and uevent

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 40b7320ee413d0d1cc89c32c2a757fda56d27708)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-bus-mei
#	drivers/misc/mei/bus.c
diff --cc Documentation/ABI/testing/sysfs-bus-mei
index 2066f0bbd453,6bd45346ac7e..000000000000
--- a/Documentation/ABI/testing/sysfs-bus-mei
+++ b/Documentation/ABI/testing/sysfs-bus-mei
@@@ -4,4 -4,25 +4,29 @@@ KernelVersion:	3.1
  Contact:	Samuel Ortiz <sameo@linux.intel.com>
  		linux-mei@linux.intel.com
  Description:	Stores the same MODALIAS value emitted by uevent
++<<<<<<< HEAD
 +		Format: mei:<mei device name>
++=======
+ 		Format: mei:<mei device name>:<device uuid>:
+ 
+ What:		/sys/bus/mei/devices/.../name
+ Date:		May 2015
+ KernelVersion:	4.2
+ Contact:	Tomas Winkler <tomas.winkler@intel.com>
+ Description:	Stores mei client device name
+ 		Format: string
+ 
+ What:		/sys/bus/mei/devices/.../uuid
+ Date:		May 2015
+ KernelVersion:	4.2
+ Contact:	Tomas Winkler <tomas.winkler@intel.com>
+ Description:	Stores mei client device uuid
+ 		Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
+ 
+ What:		/sys/bus/mei/devices/.../version
+ Date:		Aug 2015
+ KernelVersion:	4.3
+ Contact:	Tomas Winkler <tomas.winkler@intel.com>
+ Description:	Stores mei client protocol version
+ 		Format: %d
++>>>>>>> 40b7320ee413 (mei: bus: export client protocol version)
diff --cc drivers/misc/mei/bus.c
index 3365981198e7,d92017fa1630..000000000000
--- a/drivers/misc/mei/bus.c
+++ b/drivers/misc/mei/bus.c
@@@ -55,49 -473,136 +55,90 @@@ static int mei_cl_device_match(struct d
  	return 0;
  }
  
 -/**
 - * mei_cl_device_probe - bus probe function
 - *
 - * @dev: device
 - *
 - * Return:  0 on success; < 0 otherwise
 - */
  static int mei_cl_device_probe(struct device *dev)
  {
 -	struct mei_cl_device *cldev;
 -	struct mei_cl_driver *cldrv;
 -	const struct mei_cl_device_id *id;
 -
 -	cldev = to_mei_cl_device(dev);
 -	cldrv = to_mei_cl_driver(dev->driver);
 +	struct mei_cl_device *device = to_mei_cl_device(dev);
 +	struct mei_cl_driver *driver;
 +	struct mei_cl_device_id id;
  
 -	if (!cldev)
 +	if (!device)
  		return 0;
  
 -	if (!cldrv || !cldrv->probe)
 +	driver = to_mei_cl_driver(dev->driver);
 +	if (!driver || !driver->probe)
  		return -ENODEV;
  
 -	id = mei_cl_device_find(cldev, cldrv);
 -	if (!id)
 -		return -ENODEV;
 +	dev_dbg(dev, "Device probe\n");
  
 -	__module_get(THIS_MODULE);
 +	strlcpy(id.name, dev_name(dev), sizeof(id.name));
  
 -	return cldrv->probe(cldev, id);
 +	return driver->probe(device, &id);
  }
  
 -/**
 - * mei_cl_device_remove - remove device from the bus
 - *
 - * @dev: device
 - *
 - * Return:  0 on success; < 0 otherwise
 - */
  static int mei_cl_device_remove(struct device *dev)
  {
 -	struct mei_cl_device *cldev = to_mei_cl_device(dev);
 -	struct mei_cl_driver *cldrv;
 -	int ret = 0;
 +	struct mei_cl_device *device = to_mei_cl_device(dev);
 +	struct mei_cl_driver *driver;
  
 -	if (!cldev || !dev->driver)
 +	if (!device || !dev->driver)
  		return 0;
  
 -	if (cldev->event_cb) {
 -		cldev->event_cb = NULL;
 -		cancel_work_sync(&cldev->event_work);
 +	if (device->event_cb) {
 +		device->event_cb = NULL;
 +		cancel_work_sync(&device->event_work);
  	}
  
 -	cldrv = to_mei_cl_driver(dev->driver);
 -	if (cldrv->remove)
 -		ret = cldrv->remove(cldev);
 +	driver = to_mei_cl_driver(dev->driver);
 +	if (!driver->remove) {
 +		dev->driver = NULL;
  
 -	module_put(THIS_MODULE);
 -	dev->driver = NULL;
 -	return ret;
 +		return 0;
 +	}
  
 +	return driver->remove(device);
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t name_show(struct device *dev, struct device_attribute *a,
+ 			     char *buf)
+ {
+ 	struct mei_cl_device *cldev = to_mei_cl_device(dev);
+ 	size_t len;
+ 
+ 	len = snprintf(buf, PAGE_SIZE, "%s", cldev->name);
+ 
+ 	return (len >= PAGE_SIZE) ? (PAGE_SIZE - 1) : len;
+ }
+ static DEVICE_ATTR_RO(name);
+ 
+ static ssize_t uuid_show(struct device *dev, struct device_attribute *a,
+ 			     char *buf)
+ {
+ 	struct mei_cl_device *cldev = to_mei_cl_device(dev);
+ 	const uuid_le *uuid = mei_me_cl_uuid(cldev->me_cl);
+ 	size_t len;
+ 
+ 	len = snprintf(buf, PAGE_SIZE, "%pUl", uuid);
+ 
+ 	return (len >= PAGE_SIZE) ? (PAGE_SIZE - 1) : len;
+ }
+ static DEVICE_ATTR_RO(uuid);
+ 
+ static ssize_t version_show(struct device *dev, struct device_attribute *a,
+ 			     char *buf)
+ {
+ 	struct mei_cl_device *cldev = to_mei_cl_device(dev);
+ 	u8 version = mei_me_cl_ver(cldev->me_cl);
+ 	size_t len;
+ 
+ 	len = snprintf(buf, PAGE_SIZE, "%02X", version);
+ 
+ 	return (len >= PAGE_SIZE) ? (PAGE_SIZE - 1) : len;
+ }
+ static DEVICE_ATTR_RO(version);
+ 
++>>>>>>> 40b7320ee413 (mei: bus: export client protocol version)
  static ssize_t modalias_show(struct device *dev, struct device_attribute *a,
  			     char *buf)
  {
@@@ -110,6 -616,9 +151,12 @@@
  static DEVICE_ATTR_RO(modalias);
  
  static struct attribute *mei_cl_dev_attrs[] = {
++<<<<<<< HEAD
++=======
+ 	&dev_attr_name.attr,
+ 	&dev_attr_uuid.attr,
+ 	&dev_attr_version.attr,
++>>>>>>> 40b7320ee413 (mei: bus: export client protocol version)
  	&dev_attr_modalias.attr,
  	NULL,
  };
@@@ -125,7 -634,20 +172,24 @@@ ATTRIBUTE_GROUPS(mei_cl_dev)
   */
  static int mei_cl_device_uevent(struct device *dev, struct kobj_uevent_env *env)
  {
++<<<<<<< HEAD
 +	if (add_uevent_var(env, "MODALIAS=mei:%s", dev_name(dev)))
++=======
+ 	struct mei_cl_device *cldev = to_mei_cl_device(dev);
+ 	const uuid_le *uuid = mei_me_cl_uuid(cldev->me_cl);
+ 	u8 version = mei_me_cl_ver(cldev->me_cl);
+ 
+ 	if (add_uevent_var(env, "MEI_CL_VERSION=%d", version))
+ 		return -ENOMEM;
+ 
+ 	if (add_uevent_var(env, "MEI_CL_UUID=%pUl", uuid))
+ 		return -ENOMEM;
+ 
+ 	if (add_uevent_var(env, "MEI_CL_NAME=%s", cldev->name))
+ 		return -ENOMEM;
+ 
+ 	if (add_uevent_var(env, "MODALIAS=mei:%s:%pUl:", cldev->name, uuid))
++>>>>>>> 40b7320ee413 (mei: bus: export client protocol version)
  		return -ENOMEM;
  
  	return 0;
* Unmerged path Documentation/ABI/testing/sysfs-bus-mei
* Unmerged path drivers/misc/mei/bus.c
diff --git a/drivers/misc/mei/client.h b/drivers/misc/mei/client.h
index f2a130967f1e..2cce8b77ec06 100644
--- a/drivers/misc/mei/client.h
+++ b/drivers/misc/mei/client.h
@@ -27,6 +27,18 @@
 int mei_me_cl_by_uuid(const struct mei_device *dev, const uuid_le *cuuid);
 int mei_me_cl_by_id(struct mei_device *dev, u8 client_id);
 
+/**
+ * mei_me_cl_ver - return me client protocol version
+ *
+ * @me_cl: me client
+ *
+ * Return: me client protocol version
+ */
+static inline u8 mei_me_cl_ver(const struct mei_me_client *me_cl)
+{
+	return me_cl->props.protocol_version;
+}
+
 /*
  * MEI IO Functions
  */
