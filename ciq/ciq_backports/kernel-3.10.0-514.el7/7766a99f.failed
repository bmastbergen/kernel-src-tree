IB/core: Add ROCE_UDP_ENCAP (RoCE V2) type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Matan Barak <matanb@mellanox.com>
commit 7766a99fdcd30c78fc8299db9102e3624232007c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/7766a99f.failed

Adding RoCE v2 GID type and port type. Vendors
which support this type will get their GID table
populated with RoCE v2 GIDs automatically.

	Signed-off-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 7766a99fdcd30c78fc8299db9102e3624232007c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cache.c
#	drivers/infiniband/core/roce_gid_mgmt.c
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/core/cache.c
index 77177fb6d68f,4a2968b1cf56..000000000000
--- a/drivers/infiniband/core/cache.c
+++ b/drivers/infiniband/core/cache.c
@@@ -125,6 -126,24 +125,27 @@@ static void dispatch_gid_change_event(s
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static const char * const gid_type_str[] = {
+ 	[IB_GID_TYPE_IB]	= "IB/RoCE v1",
+ 	[IB_GID_TYPE_ROCE_UDP_ENCAP]	= "RoCE v2",
+ };
+ 
+ const char *ib_cache_gid_type_str(enum ib_gid_type gid_type)
+ {
+ 	if (gid_type < ARRAY_SIZE(gid_type_str) && gid_type_str[gid_type])
+ 		return gid_type_str[gid_type];
+ 
+ 	return "Invalid GID type";
+ }
+ EXPORT_SYMBOL(ib_cache_gid_type_str);
+ 
+ /* This function expects that rwlock will be write locked in all
+  * scenarios and that lock will be locked in sleep-able (RoCE)
+  * scenarios.
+  */
++>>>>>>> 7766a99fdcd3 (IB/core: Add ROCE_UDP_ENCAP (RoCE V2) type)
  static int write_gid(struct ib_device *ib_dev, u8 port,
  		     struct ib_gid_table *table, int ix,
  		     const union ib_gid *gid,
diff --cc drivers/infiniband/core/roce_gid_mgmt.c
index 154522c92174,1e3673f31dad..000000000000
--- a/drivers/infiniband/core/roce_gid_mgmt.c
+++ b/drivers/infiniband/core/roce_gid_mgmt.c
@@@ -67,6 -67,32 +67,35 @@@ struct netdev_event_work 
  	struct netdev_event_work_cmd	cmds[ROCE_NETDEV_CALLBACK_SZ];
  };
  
++<<<<<<< HEAD
++=======
+ static const struct {
+ 	bool (*is_supported)(const struct ib_device *device, u8 port_num);
+ 	enum ib_gid_type gid_type;
+ } PORT_CAP_TO_GID_TYPE[] = {
+ 	{rdma_protocol_roce_eth_encap, IB_GID_TYPE_ROCE},
+ 	{rdma_protocol_roce_udp_encap, IB_GID_TYPE_ROCE_UDP_ENCAP},
+ };
+ 
+ #define CAP_TO_GID_TABLE_SIZE	ARRAY_SIZE(PORT_CAP_TO_GID_TYPE)
+ 
+ unsigned long roce_gid_type_mask_support(struct ib_device *ib_dev, u8 port)
+ {
+ 	int i;
+ 	unsigned int ret_flags = 0;
+ 
+ 	if (!rdma_protocol_roce(ib_dev, port))
+ 		return 1UL << IB_GID_TYPE_IB;
+ 
+ 	for (i = 0; i < CAP_TO_GID_TABLE_SIZE; i++)
+ 		if (PORT_CAP_TO_GID_TYPE[i].is_supported(ib_dev, port))
+ 			ret_flags |= 1UL << PORT_CAP_TO_GID_TYPE[i].gid_type;
+ 
+ 	return ret_flags;
+ }
+ EXPORT_SYMBOL(roce_gid_type_mask_support);
+ 
++>>>>>>> 7766a99fdcd3 (IB/core: Add ROCE_UDP_ENCAP (RoCE V2) type)
  static void update_gid(enum gid_op_type gid_op, struct ib_device *ib_dev,
  		       u8 port, union ib_gid *gid,
  		       struct ib_gid_attr *gid_attr)
diff --cc include/rdma/ib_verbs.h
index 95d565250d0a,ab05ef695d63..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -69,7 -69,16 +69,18 @@@ union ib_gid 
  
  extern union ib_gid zgid;
  
++<<<<<<< HEAD
++=======
+ enum ib_gid_type {
+ 	/* If link layer is Ethernet, this is RoCE V1 */
+ 	IB_GID_TYPE_IB        = 0,
+ 	IB_GID_TYPE_ROCE      = 0,
+ 	IB_GID_TYPE_ROCE_UDP_ENCAP = 1,
+ 	IB_GID_TYPE_SIZE
+ };
+ 
++>>>>>>> 7766a99fdcd3 (IB/core: Add ROCE_UDP_ENCAP (RoCE V2) type)
  struct ib_gid_attr {
 -	enum ib_gid_type	gid_type;
  	struct net_device	*ndev;
  };
  
* Unmerged path drivers/infiniband/core/cache.c
* Unmerged path drivers/infiniband/core/roce_gid_mgmt.c
* Unmerged path include/rdma/ib_verbs.h
