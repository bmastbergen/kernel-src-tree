ovl: Switch to generic_removexattr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 0e585ccc13b3edbb187fb4f1b7cc9397f17d64a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0e585ccc.failed

Commit d837a49bd57f ("ovl: fix POSIX ACL setting") switches from
iop->setxattr from ovl_setxattr to generic_setxattr, so switch from
ovl_removexattr to generic_removexattr as well.  As far as permission
checking goes, the same rules should apply in either case.

While doing that, rename ovl_setxattr to ovl_xattr_set to indicate that
this is not an iop->setxattr implementation and remove the unused inode
argument.

Move ovl_other_xattr_set above ovl_own_xattr_set so that they match the
order of handlers in ovl_xattr_handlers.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
Fixes: d837a49bd57f ("ovl: fix POSIX ACL setting")
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 0e585ccc13b3edbb187fb4f1b7cc9397f17d64a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/dir.c
#	fs/overlayfs/inode.c
#	fs/overlayfs/overlayfs.h
diff --cc fs/overlayfs/dir.c
index 02a117bdec65,791c6a209656..000000000000
--- a/fs/overlayfs/dir.c
+++ b/fs/overlayfs/dir.c
@@@ -911,7 -1006,7 +911,13 @@@ const struct inode_operations_wrapper o
  	.setxattr	= generic_setxattr,
  	.getxattr	= ovl_getxattr,
  	.listxattr	= ovl_listxattr,
++<<<<<<< HEAD
 +	.removexattr	= ovl_removexattr,
 +	},
 +	.rename2	= ovl_rename2,
++=======
+ 	.removexattr	= generic_removexattr,
+ 	.get_acl	= ovl_get_acl,
+ 	.update_time	= ovl_update_time,
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  };
diff --cc fs/overlayfs/inode.c
index f3730d33febd,94bca710e6d2..000000000000
--- a/fs/overlayfs/inode.c
+++ b/fs/overlayfs/inode.c
@@@ -221,24 -186,25 +221,34 @@@ static int ovl_readlink(struct dentry *
  	if (!realinode->i_op->readlink)
  		return -EINVAL;
  
 -	old_cred = ovl_override_creds(dentry->d_sb);
 -	err = realinode->i_op->readlink(realpath.dentry, buf, bufsiz);
 -	revert_creds(old_cred);
 -	return err;
 +	touch_atime(&realpath);
 +
 +	return realinode->i_op->readlink(realpath.dentry, buf, bufsiz);
  }
  
 -bool ovl_is_private_xattr(const char *name)
 +
 +static bool ovl_is_private_xattr(const char *name)
  {
 -	return strncmp(name, OVL_XATTR_PREFIX,
 -		       sizeof(OVL_XATTR_PREFIX) - 1) == 0;
 +#define OVL_XATTR_PRE_NAME OVL_XATTR_PREFIX "."
 +	return strncmp(name, OVL_XATTR_PRE_NAME,
 +		       sizeof(OVL_XATTR_PRE_NAME) - 1) == 0;
  }
  
++<<<<<<< HEAD
 +int ovl_setxattr(struct dentry *dentry, const char *name,
 +		 const void *value, size_t size, int flags)
 +{
 +	int err;
 +	struct dentry *upperdentry;
++=======
+ int ovl_xattr_set(struct dentry *dentry, const char *name, const void *value,
+ 		  size_t size, int flags)
+ {
+ 	int err;
+ 	struct path realpath;
+ 	enum ovl_path_type type = ovl_path_real(dentry, &realpath);
+ 	const struct cred *old_cred;
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  
  	err = ovl_want_write(dentry);
  	if (err)
@@@ -248,8 -220,17 +264,22 @@@
  	if (err)
  		goto out_drop_write;
  
++<<<<<<< HEAD
 +	upperdentry = ovl_dentry_upper(dentry);
 +	err = vfs_setxattr(upperdentry, name, value, size, flags);
++=======
+ 	if (!OVL_TYPE_UPPER(type))
+ 		ovl_path_upper(dentry, &realpath);
+ 
+ 	old_cred = ovl_override_creds(dentry->d_sb);
+ 	if (value)
+ 		err = vfs_setxattr(realpath.dentry, name, value, size, flags);
+ 	else {
+ 		WARN_ON(flags != XATTR_REPLACE);
+ 		err = vfs_removexattr(realpath.dentry, name);
+ 	}
+ 	revert_creds(old_cred);
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  
  out_drop_write:
  	ovl_drop_write(dentry);
@@@ -310,37 -285,23 +340,57 @@@ ssize_t ovl_listxattr(struct dentry *de
  	return res;
  }
  
++<<<<<<< HEAD
 +int ovl_removexattr(struct dentry *dentry, const char *name)
 +{
 +	int err;
 +	struct path realpath;
 +	enum ovl_path_type type = ovl_path_real(dentry, &realpath);
 +
 +	err = ovl_want_write(dentry);
 +	if (err)
 +		goto out;
 +
 +	err = -ENODATA;
 +	if (ovl_need_xattr_filter(dentry, type) && ovl_is_private_xattr(name))
 +		goto out_drop_write;
 +
 +	if (!OVL_TYPE_UPPER(type)) {
 +		err = vfs_getxattr(realpath.dentry, name, NULL, 0);
 +		if (err < 0)
 +			goto out_drop_write;
 +
 +		err = ovl_copy_up(dentry);
 +		if (err)
 +			goto out_drop_write;
 +
 +		ovl_path_upper(dentry, &realpath);
 +	}
 +
 +	err = vfs_removexattr(realpath.dentry, name);
 +out_drop_write:
 +	ovl_drop_write(dentry);
 +out:
 +	return err;
++=======
+ struct posix_acl *ovl_get_acl(struct inode *inode, int type)
+ {
+ 	struct inode *realinode = ovl_inode_real(inode, NULL);
+ 	const struct cred *old_cred;
+ 	struct posix_acl *acl;
+ 
+ 	if (!IS_ENABLED(CONFIG_FS_POSIX_ACL) || !IS_POSIXACL(realinode))
+ 		return NULL;
+ 
+ 	if (!realinode->i_op->get_acl)
+ 		return NULL;
+ 
+ 	old_cred = ovl_override_creds(inode->i_sb);
+ 	acl = get_acl(realinode, type);
+ 	revert_creds(old_cred);
+ 
+ 	return acl;
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  }
  
  static bool ovl_open_need_copy_up(int flags, enum ovl_path_type type,
@@@ -396,9 -370,9 +446,15 @@@ static const struct inode_operations_wr
  	.setxattr	= generic_setxattr,
  	.getxattr	= ovl_getxattr,
  	.listxattr	= ovl_listxattr,
++<<<<<<< HEAD
 +	.removexattr	= ovl_removexattr,
 +	},
 +	.dentry_open	= ovl_dentry_open,
++=======
+ 	.removexattr	= generic_removexattr,
+ 	.get_acl	= ovl_get_acl,
+ 	.update_time	= ovl_update_time,
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  };
  
  static const struct inode_operations ovl_symlink_inode_operations = {
@@@ -410,21 -383,18 +466,26 @@@
  	.setxattr	= generic_setxattr,
  	.getxattr	= ovl_getxattr,
  	.listxattr	= ovl_listxattr,
++<<<<<<< HEAD
 +	.removexattr	= ovl_removexattr,
++=======
+ 	.removexattr	= generic_removexattr,
+ 	.update_time	= ovl_update_time,
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  };
  
 -static void ovl_fill_inode(struct inode *inode, umode_t mode)
 +struct inode *ovl_new_inode(struct super_block *sb, umode_t mode,
 +			    struct ovl_entry *oe)
  {
 +	struct inode *inode;
 +
 +	inode = new_inode(sb);
 +	if (!inode)
 +		return NULL;
 +
  	inode->i_ino = get_next_ino();
  	inode->i_mode = mode;
 -	inode->i_flags |= S_NOCMTIME;
 -#ifdef CONFIG_FS_POSIX_ACL
 -	inode->i_acl = inode->i_default_acl = ACL_DONT_CACHE;
 -#endif
 +	inode->i_flags |= S_NOATIME | S_NOCMTIME;
  
  	mode &= S_IFMT;
  	switch (mode) {
diff --cc fs/overlayfs/overlayfs.h
index 759da49141dd,5769aaf151a3..000000000000
--- a/fs/overlayfs/overlayfs.h
+++ b/fs/overlayfs/overlayfs.h
@@@ -172,15 -185,18 +172,27 @@@ int ovl_check_d_type_supported(struct p
  /* inode.c */
  int ovl_setattr(struct dentry *dentry, struct iattr *attr);
  int ovl_permission(struct inode *inode, int mask);
++<<<<<<< HEAD
 +int ovl_setxattr(struct dentry *dentry, const char *name,
 +		 const void *value, size_t size, int flags);
 +ssize_t ovl_getxattr(struct dentry *dentry, const char *name,
 +		     void *value, size_t size);
 +ssize_t ovl_listxattr(struct dentry *dentry, char *list, size_t size);
 +int ovl_removexattr(struct dentry *dentry, const char *name);
++=======
+ int ovl_xattr_set(struct dentry *dentry, const char *name, const void *value,
+ 		  size_t size, int flags);
+ ssize_t ovl_getxattr(struct dentry *dentry, struct inode *inode,
+ 		     const char *name, void *value, size_t size);
+ ssize_t ovl_listxattr(struct dentry *dentry, char *list, size_t size);
+ struct posix_acl *ovl_get_acl(struct inode *inode, int type);
+ int ovl_open_maybe_copy_up(struct dentry *dentry, unsigned int file_flags);
+ int ovl_update_time(struct inode *inode, struct timespec *ts, int flags);
+ bool ovl_is_private_xattr(const char *name);
++>>>>>>> 0e585ccc13b3 (ovl: Switch to generic_removexattr)
  
 -struct inode *ovl_new_inode(struct super_block *sb, umode_t mode);
 -struct inode *ovl_get_inode(struct super_block *sb, struct inode *realinode);
 +struct inode *ovl_new_inode(struct super_block *sb, umode_t mode,
 +			    struct ovl_entry *oe);
  static inline void ovl_copyattr(struct inode *from, struct inode *to)
  {
  	to->i_uid = from->i_uid;
* Unmerged path fs/overlayfs/dir.c
* Unmerged path fs/overlayfs/inode.c
* Unmerged path fs/overlayfs/overlayfs.h
diff --git a/fs/overlayfs/super.c b/fs/overlayfs/super.c
index 9a028682faee..39d49bc8a2a6 100644
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@ -957,21 +957,13 @@ ovl_posix_acl_xattr_set(const struct xattr_handler *handler,
 
 	posix_acl_release(acl);
 
-	return ovl_setxattr(dentry, inode, handler->name, value, size, flags);
+	return ovl_xattr_set(dentry, handler->name, value, size, flags);
 
 out_acl_release:
 	posix_acl_release(acl);
 	return err;
 }
 
-static int ovl_other_xattr_set(const struct xattr_handler *handler,
-			       struct dentry *dentry, struct inode *inode,
-			       const char *name, const void *value,
-			       size_t size, int flags)
-{
-	return ovl_setxattr(dentry, inode, name, value, size, flags);
-}
-
 static int ovl_own_xattr_set(const struct xattr_handler *handler,
 			     struct dentry *dentry, struct inode *inode,
 			     const char *name, const void *value,
@@ -980,6 +972,14 @@ static int ovl_own_xattr_set(const struct xattr_handler *handler,
 	return -EPERM;
 }
 
+static int ovl_other_xattr_set(const struct xattr_handler *handler,
+			       struct dentry *dentry, struct inode *inode,
+			       const char *name, const void *value,
+			       size_t size, int flags)
+{
+	return ovl_xattr_set(dentry, name, value, size, flags);
+}
+
 static const struct xattr_handler __maybe_unused
 ovl_posix_acl_access_xattr_handler = {
 	.name = XATTR_NAME_POSIX_ACL_ACCESS,
