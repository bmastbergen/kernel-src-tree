nvme: properly handle partially initialized queues in nvme_create_io_queues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 2659e57b906562bb020fb093b0c1b670b9700314
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2659e57b.failed

This avoids having to clean up later in a seemingly unrelated place.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 2659e57b906562bb020fb093b0c1b670b9700314)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index f5099f908371,01a6d1b2d7e5..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -2863,10 -3001,21 +2872,27 @@@ static int nvme_dev_start(struct nvme_d
  	if (result)
  		goto free_tags;
  
 +	nvme_set_irq_hints(dev);
 +
  	dev->event_limit = 1;
++<<<<<<< HEAD
 +	return result;
++=======
+ 
+ 	/*
+ 	 * Keep the controller around but remove all namespaces if we don't have
+ 	 * any working I/O queue.
+ 	 */
+ 	if (dev->online_queues < 2) {
+ 		dev_warn(dev->dev, "IO queues not created\n");
+ 		nvme_dev_remove(dev);
+ 	} else {
+ 		nvme_unfreeze_queues(dev);
+ 		nvme_dev_add(dev);
+ 	}
+ 
+ 	return;
++>>>>>>> 2659e57b9065 (nvme: properly handle partially initialized queues in nvme_create_io_queues)
  
   free_tags:
  	nvme_dev_remove_admin(dev);
* Unmerged path drivers/block/nvme-core.c
