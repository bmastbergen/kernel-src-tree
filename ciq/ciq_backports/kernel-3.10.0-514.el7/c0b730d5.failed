drm/i915/kbl: Add WaDisableDynamicCreditSharing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drm] i915/kbl: Add WaDisableDynamicCreditSharing (Rob Clark) [1348329 1349064]
Rebuild_FUZZ: 95.56%
commit-author Mika Kuoppala <mika.kuoppala@linux.intel.com>
commit c0b730d572ea00d427f6112b17982c6b9d5e97bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c0b730d5.failed

Bspec states that we need to turn off dynamic credit
sharing on kbl revid a0 and b0. This happens by writing bit 28
on 0x4ab8.

References: HSD#2225601, HSD#2226938, HSD#2225763
	Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
	Reviewed-by: Matthew Auld <matthew.auld@intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1465309159-30531-15-git-send-email-mika.kuoppala@intel.com
(cherry picked from commit c0b730d572ea00d427f6112b17982c6b9d5e97bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_ringbuffer.c
diff --cc drivers/gpu/drm/i915/intel_ringbuffer.c
index 005b5e04de4d,d1c02ed20f37..000000000000
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@@ -1024,28 -1116,138 +1024,123 @@@ static int skl_init_workarounds(struct 
  				  HDC_FENCE_DEST_SLM_DISABLE |
  				  HDC_BARRIER_PERFORMANCE_DISABLE);
  
 -	/* WaDisableSbeCacheDispatchPortSharing:skl */
 -	if (IS_SKL_REVID(dev_priv, 0, SKL_REVID_F0))
 -		WA_SET_BIT_MASKED(
 -			GEN7_HALF_SLICE_CHICKEN1,
 -			GEN7_SBE_SS_CACHE_DISPATCH_PORT_SHARING_DISABLE);
 -
 -	/* WaDisableGafsUnitClkGating:skl */
 -	WA_SET_BIT(GEN7_UCGCTL4, GEN8_EU_GAUNIT_CLOCK_GATE_DISABLE);
 -
 -	/* WaDisableLSQCROPERFforOCL:skl */
 -	ret = wa_ring_whitelist_reg(engine, GEN8_L3SQCREG4);
 -	if (ret)
 -		return ret;
 -
 -	return skl_tune_iz_hashing(engine);
 +	return skl_tune_iz_hashing(ring);
  }
  
 -static int bxt_init_workarounds(struct intel_engine_cs *engine)
 +int init_workarounds_ring(struct intel_engine_cs *ring)
  {
 -	struct drm_i915_private *dev_priv = engine->i915;
 -	int ret;
 +	struct drm_device *dev = ring->dev;
 +	struct drm_i915_private *dev_priv = dev->dev_private;
  
++<<<<<<< HEAD
 +	WARN_ON(ring->id != RCS);
++=======
+ 	ret = gen9_init_workarounds(engine);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* WaStoreMultiplePTEenable:bxt */
+ 	/* This is a requirement according to Hardware specification */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1))
+ 		I915_WRITE(TILECTL, I915_READ(TILECTL) | TILECTL_TLBPF);
+ 
+ 	/* WaSetClckGatingDisableMedia:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1)) {
+ 		I915_WRITE(GEN7_MISCCPCTL, (I915_READ(GEN7_MISCCPCTL) &
+ 					    ~GEN8_DOP_CLOCK_GATE_MEDIA_ENABLE));
+ 	}
+ 
+ 	/* WaDisableThreadStallDopClockGating:bxt */
+ 	WA_SET_BIT_MASKED(GEN8_ROW_CHICKEN,
+ 			  STALL_DOP_GATING_DISABLE);
+ 
+ 	/* WaDisableSbeCacheDispatchPortSharing:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_B0)) {
+ 		WA_SET_BIT_MASKED(
+ 			GEN7_HALF_SLICE_CHICKEN1,
+ 			GEN7_SBE_SS_CACHE_DISPATCH_PORT_SHARING_DISABLE);
+ 	}
+ 
+ 	/* WaDisableObjectLevelPreemptionForTrifanOrPolygon:bxt */
+ 	/* WaDisableObjectLevelPreemptionForInstancedDraw:bxt */
+ 	/* WaDisableObjectLevelPreemtionForInstanceId:bxt */
+ 	/* WaDisableLSQCROPERFforOCL:bxt */
+ 	if (IS_BXT_REVID(dev_priv, 0, BXT_REVID_A1)) {
+ 		ret = wa_ring_whitelist_reg(engine, GEN9_CS_DEBUG_MODE1);
+ 		if (ret)
+ 			return ret;
+ 
+ 		ret = wa_ring_whitelist_reg(engine, GEN8_L3SQCREG4);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* WaProgramL3SqcReg1DefaultForPerf:bxt */
+ 	if (IS_BXT_REVID(dev_priv, BXT_REVID_B0, REVID_FOREVER))
+ 		I915_WRITE(GEN8_L3SQCREG1, L3_GENERAL_PRIO_CREDITS(62) |
+ 					   L3_HIGH_PRIO_CREDITS(2));
+ 
+ 	return 0;
+ }
+ 
+ static int kbl_init_workarounds(struct intel_engine_cs *engine)
+ {
+ 	struct drm_i915_private *dev_priv = engine->i915;
+ 	int ret;
+ 
+ 	ret = gen9_init_workarounds(engine);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* WaEnableGapsTsvCreditFix:kbl */
+ 	I915_WRITE(GEN8_GARBCNTL, (I915_READ(GEN8_GARBCNTL) |
+ 				   GEN9_GAPS_TSV_CREDIT_DISABLE));
+ 
+ 	/* WaDisableDynamicCreditSharing:kbl */
+ 	if (IS_KBL_REVID(dev_priv, 0, KBL_REVID_B0))
+ 		WA_SET_BIT(GAMT_CHKN_BIT_REG,
+ 			   GAMT_CHKN_DISABLE_DYNAMIC_CREDIT_SHARING);
+ 
+ 	/* WaDisableFenceDestinationToSLM:kbl (pre-prod) */
+ 	if (IS_KBL_REVID(dev_priv, KBL_REVID_A0, KBL_REVID_A0))
+ 		WA_SET_BIT_MASKED(HDC_CHICKEN0,
+ 				  HDC_FENCE_DEST_SLM_DISABLE);
+ 
+ 	/* GEN8_L3SQCREG4 has a dependency with WA batch so any new changes
+ 	 * involving this register should also be added to WA batch as required.
+ 	 */
+ 	if (IS_KBL_REVID(dev_priv, 0, KBL_REVID_E0))
+ 		/* WaDisableLSQCROPERFforOCL:kbl */
+ 		I915_WRITE(GEN8_L3SQCREG4, I915_READ(GEN8_L3SQCREG4) |
+ 			   GEN8_LQSC_RO_PERF_DIS);
+ 
+ 	/* WaDisableLSQCROPERFforOCL:kbl */
+ 	ret = wa_ring_whitelist_reg(engine, GEN8_L3SQCREG4);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return 0;
+ }
+ 
+ int init_workarounds_ring(struct intel_engine_cs *engine)
+ {
+ 	struct drm_i915_private *dev_priv = engine->i915;
+ 
+ 	WARN_ON(engine->id != RCS);
++>>>>>>> c0b730d572ea (drm/i915/kbl: Add WaDisableDynamicCreditSharing)
  
  	dev_priv->workarounds.count = 0;
 -	dev_priv->workarounds.hw_whitelist_count[RCS] = 0;
 -
 -	if (IS_BROADWELL(dev_priv))
 -		return bdw_init_workarounds(engine);
 -
 -	if (IS_CHERRYVIEW(dev_priv))
 -		return chv_init_workarounds(engine);
  
 -	if (IS_SKYLAKE(dev_priv))
 -		return skl_init_workarounds(engine);
 +	if (IS_BROADWELL(dev))
 +		return bdw_init_workarounds(ring);
  
 -	if (IS_BROXTON(dev_priv))
 -		return bxt_init_workarounds(engine);
 +	if (IS_CHERRYVIEW(dev))
 +		return chv_init_workarounds(ring);
  
 -	if (IS_KABYLAKE(dev_priv))
 -		return kbl_init_workarounds(engine);
 +	if (IS_SKYLAKE(dev))
 +		return skl_init_workarounds(ring);
 +	else if (IS_GEN9(dev))
 +		return gen9_init_workarounds(ring);
  
  	return 0;
  }
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index bcce9fc478ee..862e35db2c3c 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -1249,6 +1249,9 @@ enum skl_disp_power_wells {
 
 #define GEN7_TLB_RD_ADDR	0x4700
 
+#define GAMT_CHKN_BIT_REG	_MMIO(0x4ab8)
+#define   GAMT_CHKN_DISABLE_DYNAMIC_CREDIT_SHARING	(1<<28)
+
 #if 0
 #define PRB0_TAIL	0x02030
 #define PRB0_HEAD	0x02034
* Unmerged path drivers/gpu/drm/i915/intel_ringbuffer.c
