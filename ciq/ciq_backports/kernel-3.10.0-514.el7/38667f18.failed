iommu: Ignore -ENODEV errors from add_device call-back

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [iommu] Ignore -ENODEV errors from add_device call-back (Myron Stowe) [1050021]
Rebuild_FUZZ: 93.07%
commit-author Joerg Roedel <jroedel@suse.de>
commit 38667f18900afe172a4fe44279b132b4140f920f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/38667f18.failed

The -ENODEV error just means that the device is not
translated by an IOMMU. We shouldn't bail out of iommu
driver initialization when that happens, as this is a common
scenario on ARM.

Not returning -ENODEV in the drivers would be a bad idea, as
the IOMMU core would have no indication whether a device is
translated or not. This indication is not used at the
moment, but will probably be in the future.

Fixes: 19762d7 ("iommu: Propagate error in add_iommu_group")
	Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
	Tested-by: Eric Auger <eric.auger@linaro.org>
	Tested-by: Heiko Stuebner <heiko@sntech.de>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 38667f18900afe172a4fe44279b132b4140f920f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/iommu.c
diff --cc drivers/iommu/iommu.c
index 70b9321d6ca7,f286090931cc..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -802,16 -845,39 +802,32 @@@ struct iommu_domain *iommu_group_defaul
  
  static int add_iommu_group(struct device *dev, void *data)
  {
++<<<<<<< HEAD
 +	struct iommu_ops *ops = data;
++=======
+ 	struct iommu_callback_data *cb = data;
+ 	const struct iommu_ops *ops = cb->ops;
+ 	int ret;
++>>>>>>> 38667f18900a (iommu: Ignore -ENODEV errors from add_device call-back)
  
  	if (!ops->add_device)
  		return 0;
  
  	WARN_ON(dev->iommu_group);
  
- 	return ops->add_device(dev);
+ 	ret = ops->add_device(dev);
+ 
+ 	/*
+ 	 * We ignore -ENODEV errors for now, as they just mean that the
+ 	 * device is not translated by an IOMMU. We still care about
+ 	 * other errors and fail to initialize when they happen.
+ 	 */
+ 	if (ret == -ENODEV)
+ 		ret = 0;
+ 
+ 	return ret;
  }
  
 -static int remove_iommu_group(struct device *dev, void *data)
 -{
 -	struct iommu_callback_data *cb = data;
 -	const struct iommu_ops *ops = cb->ops;
 -
 -	if (ops->remove_device && dev->iommu_group)
 -		ops->remove_device(dev);
 -
 -	return 0;
 -}
 -
  static int iommu_bus_notifier(struct notifier_block *nb,
  			      unsigned long action, void *data)
  {
* Unmerged path drivers/iommu/iommu.c
