x86/asm/tsc: Remove the rdtscp() and rdtscpll() macros

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] tsc: Remove the rdtscp() and rdtscpll() macros (Prarit Bhargava) [1302325]
Rebuild_FUZZ: 92.00%
commit-author Andy Lutomirski <luto@kernel.org>
commit ec69de52c648b1d9416a810943e68dbe9fe519f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/ec69de52.failed

They have no users. Leave native_read_tscp() which seems
potentially useful despite also having no callers.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Huang Rui <ray.huang@amd.com>
	Cc: John Stultz <john.stultz@linaro.org>
	Cc: Len Brown <lenb@kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: kvm ML <kvm@vger.kernel.org>
Link: http://lkml.kernel.org/r/6abfa3ef80534b5d73898a48c4d25e069303cbe5.1434501121.git.luto@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit ec69de52c648b1d9416a810943e68dbe9fe519f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/msr.h
diff --cc arch/x86/include/asm/msr.h
index de36f22eb0b9,626f78199665..000000000000
--- a/arch/x86/include/asm/msr.h
+++ b/arch/x86/include/asm/msr.h
@@@ -194,19 -187,18 +194,34 @@@ do {							
  
  #define rdpmcl(counter, val) ((val) = native_read_pmc(counter))
  
++<<<<<<< HEAD
 +#define rdtscp(low, high, aux)					\
 +do {                                                            \
 +	unsigned long long _val = native_read_tscp(&(aux));     \
 +	(low) = (u32)_val;                                      \
 +	(high) = (u32)(_val >> 32);                             \
 +} while (0)
 +
 +#define rdtscpll(val, aux) (val) = native_read_tscp(&(aux))
 +
 +#endif	/* !CONFIG_PARAVIRT */
 +
 +#define wrmsrl_safe(msr, val) wrmsr_safe((msr), (u32)(val),		\
 +					     (u32)((val) >> 32))
++=======
+ #endif	/* !CONFIG_PARAVIRT */
+ 
+ #define rdtscl(low)						\
+ 	((low) = (u32)native_read_tsc())
+ 
+ /*
+  * 64-bit version of wrmsr_safe():
+  */
+ static inline int wrmsrl_safe(u32 msr, u64 val)
+ {
+ 	return wrmsr_safe(msr, (u32)val,  (u32)(val >> 32));
+ }
++>>>>>>> ec69de52c648 (x86/asm/tsc: Remove the rdtscp() and rdtscpll() macros)
  
  #define write_tsc(low, high) wrmsr(MSR_IA32_TSC, (low), (high))
  
* Unmerged path arch/x86/include/asm/msr.h
