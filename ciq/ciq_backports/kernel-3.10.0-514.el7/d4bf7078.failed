x86/entry/64: Fix stack return address retrieval in thunk

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] revert "entry/64: Fix stack return address retrieval in thunk" (Josh Poimboeuf) [1347232]
Rebuild_FUZZ: 89.08%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit d4bf7078c43e11097e0d6f04d3fb999bf92c4fb0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d4bf7078.failed

With CONFIG_FRAME_POINTER enabled, a thunk can pass a bad return address
value to the called function.  '9*8(%rsp)' actually gets the frame
pointer, not the return address.

The only users of the 'put_ret_addr_in_rdi' option are two functions
which trace the enabling and disabling of interrupts, so this bug can
result in bad debug or tracing information with CONFIG_IRQSOFF_TRACER or
CONFIG_PROVE_LOCKING.

Fix this by implementing the suggestion of Linus: explicitly push
the frame pointer all the time and constify the stack offsets that
way. This is both correct and easier to read.

	Reported-by: Matt Fleming <matt@codeblueprint.co.uk>
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
[ Extended the changelog a bit. ]
	Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Alex Thorlton <athorlton@sgi.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Fixes: 058fb73274f9 ("x86/asm/entry: Create stack frames in thunk functions")
Link: http://lkml.kernel.org/r/20160517180606.v5o7wcgdni7443ol@treble
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d4bf7078c43e11097e0d6f04d3fb999bf92c4fb0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/lib/thunk_64.S
diff --cc arch/x86/lib/thunk_64.S
index a63efd6bb6a5,027aec4a74df..000000000000
--- a/arch/x86/lib/thunk_64.S
+++ b/arch/x86/lib/thunk_64.S
@@@ -6,20 -6,30 +6,44 @@@
   * Subject to the GNU public license, v.2. No warranty of any kind.
   */
  #include <linux/linkage.h>
++<<<<<<< HEAD:arch/x86/lib/thunk_64.S
 +#include <asm/dwarf2.h>
 +#include <asm/calling.h>
++=======
+ #include "calling.h"
+ #include <asm/asm.h>
++>>>>>>> d4bf7078c43e (x86/entry/64: Fix stack return address retrieval in thunk):arch/x86/entry/thunk_64.S
  
  	/* rdi:	arg1 ... normal C conventions. rax is saved/restored. */
  	.macro THUNK name, func, put_ret_addr_in_rdi=0
  	.globl \name
 -	.type \name, @function
  \name:
++<<<<<<< HEAD:arch/x86/lib/thunk_64.S
 +	CFI_STARTPROC
 +
 +	/* this one pushes 9 elems, the next one would be %rIP */
 +	SAVE_ARGS
 +
 +	.if \put_ret_addr_in_rdi
 +	movq_cfi_restore 9*8, rdi
++=======
+ 	pushq %rbp
+ 	movq %rsp, %rbp
+ 
+ 	pushq %rdi
+ 	pushq %rsi
+ 	pushq %rdx
+ 	pushq %rcx
+ 	pushq %rax
+ 	pushq %r8
+ 	pushq %r9
+ 	pushq %r10
+ 	pushq %r11
+ 
+ 	.if \put_ret_addr_in_rdi
+ 	/* 8(%rbp) is return addr on stack */
+ 	movq 8(%rbp), %rdi
++>>>>>>> d4bf7078c43e (x86/entry/64: Fix stack return address retrieval in thunk):arch/x86/entry/thunk_64.S
  	.endif
  
  	call \func
@@@ -36,10 -46,25 +60,23 @@@
  	THUNK lockdep_sys_exit_thunk,lockdep_sys_exit
  #endif
  
 -#ifdef CONFIG_PREEMPT
 -	THUNK ___preempt_schedule, preempt_schedule
 -	THUNK ___preempt_schedule_notrace, preempt_schedule_notrace
 -#endif
 -
 -#if defined(CONFIG_TRACE_IRQFLAGS) \
 - || defined(CONFIG_DEBUG_LOCK_ALLOC) \
 - || defined(CONFIG_PREEMPT)
 +	/* SAVE_ARGS below is used only for the .cfi directives it contains. */
 +	CFI_STARTPROC
 +	SAVE_ARGS
  restore:
++<<<<<<< HEAD:arch/x86/lib/thunk_64.S
 +	RESTORE_ARGS
++=======
+ 	popq %r11
+ 	popq %r10
+ 	popq %r9
+ 	popq %r8
+ 	popq %rax
+ 	popq %rcx
+ 	popq %rdx
+ 	popq %rsi
+ 	popq %rdi
+ 	popq %rbp
++>>>>>>> d4bf7078c43e (x86/entry/64: Fix stack return address retrieval in thunk):arch/x86/entry/thunk_64.S
  	ret
 -	_ASM_NOKPROBE(restore)
 -#endif
 +	CFI_ENDPROC
* Unmerged path arch/x86/lib/thunk_64.S
