rhashtable: Move masking back into key_hashfn

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 8d2b18793d16e4186f00b07d031a25537c4cefb9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/8d2b1879.failed

This patch reverts commit c88455ce50ae4224d84960ce2baa53e61580df27
("rhashtable: key_hashfn() must return full hash value") because
the only user of it always masks the hash value.

	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Acked-by: Thomas Graf <tgraf@suug.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8d2b18793d16e4186f00b07d031a25537c4cefb9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/rhashtable.c
diff --cc lib/rhashtable.c
index 6d0c4774001c,ff9cc3386fc9..000000000000
--- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@@ -59,25 -72,22 +59,30 @@@ static u32 obj_raw_hashfn(const struct 
  	u32 hash;
  
  	if (unlikely(!ht->p.key_len))
 -		hash = ht->p.obj_hashfn(ptr, tbl->hash_rnd);
 +		hash = ht->p.obj_hashfn(ptr, ht->p.hash_rnd);
  	else
  		hash = ht->p.hashfn(ptr + ht->p.key_offset, ht->p.key_len,
 -				    tbl->hash_rnd);
 +				    ht->p.hash_rnd);
  
 -	return hash >> HASH_RESERVED_SPACE;
 +	return hash;
  }
  
 -static u32 key_hashfn(struct rhashtable *ht, const struct bucket_table *tbl,
 -		      const void *key, u32 len)
 +static u32 key_hashfn(const struct rhashtable *ht, const void *key, u32 len)
  {
++<<<<<<< HEAD
 +	struct bucket_table *tbl = rht_dereference_rcu(ht->tbl, ht);
 +	u32 hash;
 +
 +	hash = ht->p.hashfn(key, len, ht->p.hash_rnd);
 +
 +	return rht_bucket_index(tbl, hash);
++=======
+ 	return rht_bucket_index(tbl, ht->p.hashfn(key, len, tbl->hash_rnd) >>
+ 				     HASH_RESERVED_SPACE);
++>>>>>>> 8d2b18793d16 (rhashtable: Move masking back into key_hashfn)
  }
  
 -static u32 head_hashfn(struct rhashtable *ht,
 +static u32 head_hashfn(const struct rhashtable *ht,
  		       const struct bucket_table *tbl,
  		       const struct rhash_head *he)
  {
@@@ -450,7 -618,11 +455,15 @@@ void *rhashtable_lookup_compare(const s
  	struct rhash_head *he;
  	u32 hash;
  
++<<<<<<< HEAD
 +	hash = key_hashfn(ht, key, ht->p.key_len);
++=======
+ 	rcu_read_lock();
+ 
+ 	tbl = rht_dereference_rcu(ht->tbl, ht);
+ 	hash = key_hashfn(ht, tbl, key, ht->p.key_len);
+ restart:
++>>>>>>> 8d2b18793d16 (rhashtable: Move masking back into key_hashfn)
  	rht_for_each_rcu(he, tbl, hash) {
  		if (!compare(rht_obj(ht, he), arg))
  			continue;
* Unmerged path lib/rhashtable.c
