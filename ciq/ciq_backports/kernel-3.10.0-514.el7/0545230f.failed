mmc: sdhci: Define ADMA descriptor structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [mmc] sdhci: Define ADMA descriptor structure (Don Zickus) [1127975 1277866 1280133 1286932 1297039]
Rebuild_FUZZ: 93.98%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 0545230f1764bc639e14eea3fe944d9d16e91a92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/0545230f.failed

Define the ADMA descriptor structure instead of
using manual offsets and casts.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 0545230f1764bc639e14eea3fe944d9d16e91a92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci.c
#	drivers/mmc/host/sdhci.h
diff --cc drivers/mmc/host/sdhci.c
index e2d27069abbd,ec093490a24f..000000000000
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@@ -491,9 -457,9 +486,13 @@@ static void sdhci_adma_write_desc(void 
  
  static void sdhci_adma_mark_end(void *desc)
  {
- 	u8 *dma_desc = desc;
+ 	struct sdhci_adma2_32_desc *dma_desc = desc;
  
++<<<<<<< HEAD
 +	dma_desc[0] |= 0x2; /* end */
++=======
+ 	dma_desc->cmd |= cpu_to_le16(ADMA2_END);
++>>>>>>> 0545230f1764 (mmc: sdhci: Define ADMA descriptor structure)
  }
  
  static int sdhci_adma_table_pre(struct sdhci_host *host,
@@@ -2311,16 -2296,16 +2307,20 @@@ static void sdhci_adma_show_error(struc
  	sdhci_dumpregs(host);
  
  	while (true) {
- 		dma = (__le32 *)(desc + 4);
- 		len = (__le16 *)(desc + 2);
- 		attr = *(u8 *)desc;
+ 		struct sdhci_adma2_32_desc *dma_desc = desc;
  
  		DBG("%s: %p: DMA 0x%08x, LEN 0x%04x, Attr=0x%02x\n",
- 		    name, desc, le32_to_cpu(*dma), le16_to_cpu(*len), attr);
+ 		    name, desc, le32_to_cpu(dma_desc->addr),
+ 		    le16_to_cpu(dma_desc->len),
+ 		    le16_to_cpu(dma_desc->cmd));
  
 -		desc += host->desc_sz;
 +		desc += 8;
  
++<<<<<<< HEAD
 +		if (attr & 2)
++=======
+ 		if (dma_desc->cmd & cpu_to_le16(ADMA2_END))
++>>>>>>> 0545230f1764 (mmc: sdhci: Define ADMA descriptor structure)
  			break;
  	}
  }
diff --cc drivers/mmc/host/sdhci.h
index 4dea27050ed1,14c8b6773dbb..000000000000
--- a/drivers/mmc/host/sdhci.h
+++ b/drivers/mmc/host/sdhci.h
@@@ -266,6 -266,29 +266,32 @@@
  #define SDHCI_DEFAULT_BOUNDARY_SIZE  (512 * 1024)
  #define SDHCI_DEFAULT_BOUNDARY_ARG   (ilog2(SDHCI_DEFAULT_BOUNDARY_SIZE) - 12)
  
++<<<<<<< HEAD
++=======
+ /* ADMA2 32-bit DMA descriptor size */
+ #define SDHCI_ADMA2_32_DESC_SZ	8
+ 
+ /* ADMA2 32-bit DMA alignment */
+ #define SDHCI_ADMA2_32_ALIGN	4
+ 
+ /* ADMA2 32-bit descriptor */
+ struct sdhci_adma2_32_desc {
+ 	__le16	cmd;
+ 	__le16	len;
+ 	__le32	addr;
+ }  __packed __aligned(SDHCI_ADMA2_32_ALIGN);
+ 
+ #define ADMA2_TRAN_VALID	0x21
+ #define ADMA2_NOP_END_VALID	0x3
+ #define ADMA2_END		0x2
+ 
+ /*
+  * Maximum segments assuming a 512KiB maximum requisition size and a minimum
+  * 4KiB page size.
+  */
+ #define SDHCI_MAX_SEGS		128
+ 
++>>>>>>> 0545230f1764 (mmc: sdhci: Define ADMA descriptor structure)
  struct sdhci_ops {
  #ifdef CONFIG_MMC_SDHCI_IO_ACCESSORS
  	u32		(*read_l)(struct sdhci_host *host, int reg);
* Unmerged path drivers/mmc/host/sdhci.c
* Unmerged path drivers/mmc/host/sdhci.h
