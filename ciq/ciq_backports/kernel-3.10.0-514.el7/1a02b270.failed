KVM: introduce kvm_arch functions for IRQ bypass

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Eric Auger <eric.auger@linaro.org>
commit 1a02b27035f82091d51ecafcb9ccaac1f31d4eb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/1a02b270.failed

This patch introduces
- kvm_arch_irq_bypass_add_producer
- kvm_arch_irq_bypass_del_producer
- kvm_arch_irq_bypass_stop
- kvm_arch_irq_bypass_start

They make possible to specialize the KVM IRQ bypass consumer in
case CONFIG_KVM_HAVE_IRQ_BYPASS is set.

	Signed-off-by: Eric Auger <eric.auger@linaro.org>
[Add weak implementations of the callbacks. - Feng]
	Signed-off-by: Feng Wu <feng.wu@intel.com>
	Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 1a02b27035f82091d51ecafcb9ccaac1f31d4eb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	virt/kvm/Kconfig
diff --cc virt/kvm/Kconfig
index 50d110654b42,9f8014dda2cf..000000000000
--- a/virt/kvm/Kconfig
+++ b/virt/kvm/Kconfig
@@@ -43,3 -43,10 +43,13 @@@ config HAVE_KVM_ARCH_TLB_FLUSH_AL
  
  config KVM_GENERIC_DIRTYLOG_READ_PROTECT
         bool
++<<<<<<< HEAD
++=======
+ 
+ config KVM_COMPAT
+        def_bool y
+        depends on COMPAT && !S390
+ 
+ config HAVE_KVM_IRQ_BYPASS
+        bool
++>>>>>>> 1a02b27035f8 (KVM: introduce kvm_arch functions for IRQ bypass)
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index fa2bee22c9da..482bd9c3fcd3 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -24,6 +24,7 @@
 #include <linux/err.h>
 #include <linux/irqflags.h>
 #include <linux/context_tracking.h>
+#include <linux/irqbypass.h>
 #include <asm/signal.h>
 
 #include <linux/kvm.h>
@@ -1097,5 +1098,14 @@ static inline void kvm_vcpu_set_dy_eligible(struct kvm_vcpu *vcpu, bool val)
 {
 }
 #endif /* CONFIG_HAVE_KVM_CPU_RELAX_INTERCEPT */
+
+#ifdef CONFIG_HAVE_KVM_IRQ_BYPASS
+int kvm_arch_irq_bypass_add_producer(struct irq_bypass_consumer *,
+			   struct irq_bypass_producer *);
+void kvm_arch_irq_bypass_del_producer(struct irq_bypass_consumer *,
+			   struct irq_bypass_producer *);
+void kvm_arch_irq_bypass_stop(struct irq_bypass_consumer *);
+void kvm_arch_irq_bypass_start(struct irq_bypass_consumer *);
+#endif /* CONFIG_HAVE_KVM_IRQ_BYPASS */
 #endif
 
* Unmerged path virt/kvm/Kconfig
diff --git a/virt/kvm/eventfd.c b/virt/kvm/eventfd.c
index cb9401dff95a..388f6b3b1682 100644
--- a/virt/kvm/eventfd.c
+++ b/virt/kvm/eventfd.c
@@ -252,6 +252,18 @@ static void irqfd_update(struct kvm *kvm, struct kvm_kernel_irqfd *irqfd)
 	write_seqcount_end(&irqfd->irq_entry_sc);
 }
 
+#ifdef CONFIG_HAVE_KVM_IRQ_BYPASS
+void __attribute__((weak)) kvm_arch_irq_bypass_stop(
+				struct irq_bypass_consumer *cons)
+{
+}
+
+void __attribute__((weak)) kvm_arch_irq_bypass_start(
+				struct irq_bypass_consumer *cons)
+{
+}
+#endif
+
 static int
 kvm_irqfd_assign(struct kvm *kvm, struct kvm_irqfd *args)
 {
