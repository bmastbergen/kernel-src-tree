sctp: remove macros sctp_local_bh_{disable|enable}

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author wangweidong <wangweidong1@huawei.com>
commit 79b91130a2679ea5063d49c021d97346a09eb0a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/79b91130.failed

Redefined local_bh_{disable|enable} to sctp_local_bh_{disable|enable}
for user space friendly code which we haven't use in years, so removing them.

	Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 79b91130a2679ea5063d49c021d97346a09eb0a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/socket.c
diff --cc net/sctp/socket.c
index 03e22d1d53de,f2e00059efdb..000000000000
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@@ -1548,10 -1509,8 +1548,14 @@@ SCTP_STATIC void sctp_close(struct soc
  
  	/* Supposedly, no process has access to the socket, but
  	 * the net layers still may.
 +	 * Also, sctp_destroy_sock() needs to be called with addr_wq_lock
 +	 * held and that should be grabbed before socket lock.
  	 */
++<<<<<<< HEAD
 +	spin_lock_bh(&net->sctp.addr_wq_lock);
++=======
+ 	local_bh_disable();
++>>>>>>> 79b91130a267 (sctp: remove macros sctp_local_bh_{disable|enable})
  	sctp_bh_lock_sock(sk);
  
  	/* Hold the sock, since sk_common_release() will put sock_put()
@@@ -1561,7 -1520,7 +1565,11 @@@
  	sk_common_release(sk);
  
  	sctp_bh_unlock_sock(sk);
++<<<<<<< HEAD
 +	spin_unlock_bh(&net->sctp.addr_wq_lock);
++=======
+ 	local_bh_enable();
++>>>>>>> 79b91130a267 (sctp: remove macros sctp_local_bh_{disable|enable})
  
  	sock_put(sk);
  
@@@ -6047,8 -5916,9 +6055,14 @@@ static long sctp_get_port_local(struct 
  
  	snum = ntohs(addr->v4.sin_port);
  
++<<<<<<< HEAD
 +	SCTP_DEBUG_PRINTK("sctp_get_port() begins, snum=%d\n", snum);
 +	sctp_local_bh_disable();
++=======
+ 	pr_debug("%s: begins, snum:%d\n", __func__, snum);
+ 
+ 	local_bh_disable();
++>>>>>>> 79b91130a267 (sctp: remove macros sctp_local_bh_{disable|enable})
  
  	if (snum == 0) {
  		/* Search for an available port. */
diff --git a/include/net/sctp/sctp.h b/include/net/sctp/sctp.h
index 1619519658e4..7b41e7f5e9f8 100644
--- a/include/net/sctp/sctp.h
+++ b/include/net/sctp/sctp.h
@@ -210,8 +210,6 @@ extern struct kmem_cache *sctp_bucket_cachep __read_mostly;
  */
 
 /* spin lock wrappers. */
-#define sctp_local_bh_disable() local_bh_disable()
-#define sctp_local_bh_enable()  local_bh_enable()
 #define sctp_spin_lock(lock)    spin_lock(lock)
 #define sctp_spin_unlock(lock)  spin_unlock(lock)
 #define sctp_write_lock(lock)   write_lock(lock)
diff --git a/net/sctp/endpointola.c b/net/sctp/endpointola.c
index 000d00e3ee2c..641e9062f576 100644
--- a/net/sctp/endpointola.c
+++ b/net/sctp/endpointola.c
@@ -372,9 +372,9 @@ struct sctp_association *sctp_endpoint_lookup_assoc(
 {
 	struct sctp_association *asoc;
 
-	sctp_local_bh_disable();
+	local_bh_disable();
 	asoc = __sctp_endpoint_lookup_assoc(ep, paddr, transport);
-	sctp_local_bh_enable();
+	local_bh_enable();
 
 	return asoc;
 }
diff --git a/net/sctp/input.c b/net/sctp/input.c
index f5c23efe96a7..a5bb180b4538 100644
--- a/net/sctp/input.c
+++ b/net/sctp/input.c
@@ -739,9 +739,9 @@ static void __sctp_hash_endpoint(struct sctp_endpoint *ep)
 /* Add an endpoint to the hash. Local BH-safe. */
 void sctp_hash_endpoint(struct sctp_endpoint *ep)
 {
-	sctp_local_bh_disable();
+	local_bh_disable();
 	__sctp_hash_endpoint(ep);
-	sctp_local_bh_enable();
+	local_bh_enable();
 }
 
 /* Remove endpoint from the hash table.  */
@@ -765,9 +765,9 @@ static void __sctp_unhash_endpoint(struct sctp_endpoint *ep)
 /* Remove endpoint from the hash.  Local BH-safe. */
 void sctp_unhash_endpoint(struct sctp_endpoint *ep)
 {
-	sctp_local_bh_disable();
+	local_bh_disable();
 	__sctp_unhash_endpoint(ep);
-	sctp_local_bh_enable();
+	local_bh_enable();
 }
 
 /* Look up an endpoint. */
@@ -961,9 +961,9 @@ void sctp_hash_established(struct sctp_association *asoc)
 	if (asoc->temp)
 		return;
 
-	sctp_local_bh_disable();
+	local_bh_disable();
 	__sctp_hash_established(asoc);
-	sctp_local_bh_enable();
+	local_bh_enable();
 }
 
 /* Remove association from the hash table.  */
@@ -991,9 +991,9 @@ void sctp_unhash_established(struct sctp_association *asoc)
 	if (asoc->temp)
 		return;
 
-	sctp_local_bh_disable();
+	local_bh_disable();
 	__sctp_unhash_established(asoc);
-	sctp_local_bh_enable();
+	local_bh_enable();
 }
 
 /* Look up an association. */
@@ -1043,9 +1043,9 @@ struct sctp_association *sctp_lookup_association(struct net *net,
 {
 	struct sctp_association *asoc;
 
-	sctp_local_bh_disable();
+	local_bh_disable();
 	asoc = __sctp_lookup_association(net, laddr, paddr, transportp);
-	sctp_local_bh_enable();
+	local_bh_enable();
 
 	return asoc;
 }
diff --git a/net/sctp/proc.c b/net/sctp/proc.c
index aaeecb033eeb..60d9fe00e7e7 100644
--- a/net/sctp/proc.c
+++ b/net/sctp/proc.c
@@ -225,7 +225,7 @@ static int sctp_eps_seq_show(struct seq_file *seq, void *v)
 		return -ENOMEM;
 
 	head = &sctp_ep_hashtable[hash];
-	sctp_local_bh_disable();
+	local_bh_disable();
 	read_lock(&head->lock);
 	sctp_for_each_hentry(epb, &head->chain) {
 		ep = sctp_ep(epb);
@@ -242,7 +242,7 @@ static int sctp_eps_seq_show(struct seq_file *seq, void *v)
 		seq_printf(seq, "\n");
 	}
 	read_unlock(&head->lock);
-	sctp_local_bh_enable();
+	local_bh_enable();
 
 	return 0;
 }
@@ -333,7 +333,7 @@ static int sctp_assocs_seq_show(struct seq_file *seq, void *v)
 		return -ENOMEM;
 
 	head = &sctp_assoc_hashtable[hash];
-	sctp_local_bh_disable();
+	local_bh_disable();
 	read_lock(&head->lock);
 	sctp_for_each_hentry(epb, &head->chain) {
 		assoc = sctp_assoc(epb);
@@ -369,7 +369,7 @@ static int sctp_assocs_seq_show(struct seq_file *seq, void *v)
 		seq_printf(seq, "\n");
 	}
 	read_unlock(&head->lock);
-	sctp_local_bh_enable();
+	local_bh_enable();
 
 	return 0;
 }
@@ -453,7 +453,7 @@ static int sctp_remaddr_seq_show(struct seq_file *seq, void *v)
 		return -ENOMEM;
 
 	head = &sctp_assoc_hashtable[hash];
-	sctp_local_bh_disable();
+	local_bh_disable();
 	read_lock(&head->lock);
 	rcu_read_lock();
 	sctp_for_each_hentry(epb, &head->chain) {
@@ -518,7 +518,7 @@ static int sctp_remaddr_seq_show(struct seq_file *seq, void *v)
 
 	rcu_read_unlock();
 	read_unlock(&head->lock);
-	sctp_local_bh_enable();
+	local_bh_enable();
 
 	return 0;
 
* Unmerged path net/sctp/socket.c
