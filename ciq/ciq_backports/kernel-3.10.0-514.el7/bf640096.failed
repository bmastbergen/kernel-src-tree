IB/hfi1: Move constant to the right in bitwise operations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Harish Chegondi <harish.chegondi@intel.com>
commit bf640096e670a35e3a7ba1336216664f89a2bcf1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bf640096.failed

Implement changes recommended by the Coccinelle tool to move constant to
the right in bitwise operations

-bash-4.2$ make coccicheck MODE=report M=drivers/infiniband/hw/hfi1/

drivers/infiniband/hw/hfi1/pio.c:765:4-16: Move constant to right.
drivers/infiniband/hw/hfi1/rc.c:2503:19-29: Move constant to right.
drivers/infiniband/hw/hfi1/chip.c:9813:11-22: Move constant to right.
drivers/infiniband/hw/hfi1/chip.c:14468:29-40: Move constant to right.

	Reviewed-by: Jubin John <jubin.john@intel.com>
	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Harish Chegondi <harish.chegondi@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit bf640096e670a35e3a7ba1336216664f89a2bcf1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/chip.c
#	drivers/staging/hfi1/pio.c
diff --cc drivers/staging/hfi1/chip.c
index 58d9816be5ce,263c88274514..000000000000
--- a/drivers/staging/hfi1/chip.c
+++ b/drivers/staging/hfi1/chip.c
@@@ -9786,7 -9810,7 +9786,11 @@@ static int goto_offline(struct hfi1_ppo
  
  	if (do_transition) {
  		ret = set_physical_link_state(dd,
++<<<<<<< HEAD:drivers/staging/hfi1/chip.c
 +			PLS_OFFLINE | (rem_reason << 8));
++=======
+ 					      (rem_reason << 8) | PLS_OFFLINE);
++>>>>>>> bf640096e670 (IB/hfi1: Move constant to the right in bitwise operations):drivers/staging/rdma/hfi1/chip.c
  
  		if (ret != HCMD_SUCCESS) {
  			dd_dev_err(dd,
diff --cc drivers/staging/hfi1/pio.c
index 1d987a3b7c8d,e888e214356b..000000000000
--- a/drivers/staging/hfi1/pio.c
+++ b/drivers/staging/hfi1/pio.c
@@@ -763,9 -762,9 +763,15 @@@ struct send_context *sc_alloc(struct hf
  
  	/* set the default partition key */
  	write_kctxt_csr(dd, hw_context, SC(CHECK_PARTITION_KEY),
++<<<<<<< HEAD:drivers/staging/hfi1/pio.c
 +		(DEFAULT_PKEY &
 +			SC(CHECK_PARTITION_KEY_VALUE_MASK))
 +		    << SC(CHECK_PARTITION_KEY_VALUE_SHIFT));
++=======
+ 			(SC(CHECK_PARTITION_KEY_VALUE_MASK) &
+ 			 DEFAULT_PKEY) <<
+ 			SC(CHECK_PARTITION_KEY_VALUE_SHIFT));
++>>>>>>> bf640096e670 (IB/hfi1: Move constant to the right in bitwise operations):drivers/staging/rdma/hfi1/pio.c
  
  	/* per context type checks */
  	if (type == SC_USER) {
* Unmerged path drivers/staging/hfi1/chip.c
* Unmerged path drivers/staging/hfi1/pio.c
diff --git a/drivers/staging/hfi1/rc.c b/drivers/staging/hfi1/rc.c
index dd57d65aa9b2..33cedfcc8472 100644
--- a/drivers/staging/hfi1/rc.c
+++ b/drivers/staging/hfi1/rc.c
@@ -2370,7 +2370,7 @@ send_last:
 	return;
 
 rnr_nak:
-	qp->r_nak_state = IB_RNR_NAK | qp->r_min_rnr_timer;
+	qp->r_nak_state = qp->r_min_rnr_timer | IB_RNR_NAK;
 	qp->r_ack_psn = qp->r_psn;
 	/* Queue RNR NAK for later */
 	rc_defered_ack(rcd, qp);
