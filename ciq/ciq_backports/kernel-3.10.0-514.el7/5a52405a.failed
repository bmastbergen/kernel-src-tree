bonding: convert first/last slave logic to use neighbours

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Veaceslav Falico <vfalico@redhat.com>
commit 5a52405a30abf70a60312ad4231385699f09cb85
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/5a52405a.failed

For that, use netdev_adjacent_get_private(list_head) on bond's lower
neighbour list members. Also, add a small macro - bond_slave_list(bond),
which returns the bond list via neighbour list.

CC: Jay Vosburgh <fubar@us.ibm.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5a52405a30abf70a60312ad4231385699f09cb85)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bonding.h
diff --cc include/net/bonding.h
index 5ee4c6c4e55d,3eb464cb8744..000000000000
--- a/include/net/bonding.h
+++ b/include/net/bonding.h
@@@ -54,26 -71,34 +54,36 @@@
  	set_fs(fs);			\
  	res; })
  
 +#define BOND_MODE(bond) ((bond)->params.mode)
 +
  /* slave list primitives */
- #define bond_has_slaves(bond) !list_empty(&(bond)->dev->adj_list.lower)
+ #define bond_slave_list(bond) (&(bond)->dev->adj_list.lower)
+ 
+ #define bond_has_slaves(bond) !list_empty(bond_slave_list(bond))
  
  #define bond_to_slave(ptr) list_entry(ptr, struct slave, list)
  
  /* IMPORTANT: bond_first/last_slave can return NULL in case of an empty list */
  #define bond_first_slave(bond) \
- 	list_first_entry_or_null(&(bond)->slave_list, struct slave, list)
+ 	(bond_has_slaves(bond) ? \
+ 		netdev_adjacent_get_private(bond_slave_list(bond)->next) : \
+ 		NULL)
  #define bond_last_slave(bond) \
- 	(list_empty(&(bond)->slave_list) ? NULL : \
- 					   bond_to_slave((bond)->slave_list.prev))
+ 	(bond_has_slaves(bond) ? \
+ 		netdev_adjacent_get_private(bond_slave_list(bond)->prev) : \
+ 		NULL)
  
++<<<<<<< HEAD:include/net/bonding.h
 +/* Caller must have rcu_read_lock */
 +#define bond_first_slave_rcu(bond) \
 +	list_first_entry_or_null(&(bond)->slave_list, struct slave, list)
 +
 +#define bond_is_first_slave(bond, pos) ((pos)->list.prev == &(bond)->slave_list)
 +#define bond_is_last_slave(bond, pos) ((pos)->list.next == &(bond)->slave_list)
++=======
+ #define bond_is_first_slave(bond, pos) (pos == bond_first_slave(bond))
+ #define bond_is_last_slave(bond, pos) (pos == bond_last_slave(bond))
 -
 -/* Since bond_first/last_slave can return NULL, these can return NULL too */
 -#define bond_next_slave(bond, pos) \
 -	(bond_is_last_slave(bond, pos) ? bond_first_slave(bond) : \
 -					 bond_to_slave((pos)->list.next))
 -
 -#define bond_prev_slave(bond, pos) \
 -	(bond_is_first_slave(bond, pos) ? bond_last_slave(bond) : \
 -					  bond_to_slave((pos)->list.prev))
++>>>>>>> 5a52405a30ab (bonding: convert first/last slave logic to use neighbours):drivers/net/bonding/bonding.h
  
  /**
   * bond_for_each_slave - iterate over all slaves
* Unmerged path include/net/bonding.h
