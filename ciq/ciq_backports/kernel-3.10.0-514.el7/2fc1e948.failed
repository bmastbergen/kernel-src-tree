fs/proc.c: use rb_entry_safe() instead of rb_entry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [fs] proc: use rb_entry_safe() instead of rb_entry() (Carlos Maiolino) [1210350]
Rebuild_FUZZ: 94.95%
commit-author Nicolas Dichtel <nicolas.dichtel@6wind.com>
commit 2fc1e948e820bddf8a686c6e2989219b471d7982
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2fc1e948.failed

Better to use existing macro that rewriting them.

	Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2fc1e948e820bddf8a686c6e2989219b471d7982)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/generic.c
diff --cc fs/proc/generic.c
index a2596afffae6,7fea13229f33..000000000000
--- a/fs/proc/generic.c
+++ b/fs/proc/generic.c
@@@ -31,9 -31,73 +31,79 @@@ DEFINE_SPINLOCK(proc_subdir_lock)
  
  static int proc_match(unsigned int len, const char *name, struct proc_dir_entry *de)
  {
++<<<<<<< HEAD
 +	if (de->namelen != len)
 +		return 0;
 +	return !memcmp(name, de->name, len);
++=======
+ 	if (len < de->namelen)
+ 		return -1;
+ 	if (len > de->namelen)
+ 		return 1;
+ 
+ 	return memcmp(name, de->name, len);
+ }
+ 
+ static struct proc_dir_entry *pde_subdir_first(struct proc_dir_entry *dir)
+ {
+ 	return rb_entry_safe(rb_first(&dir->subdir), struct proc_dir_entry,
+ 			     subdir_node);
+ }
+ 
+ static struct proc_dir_entry *pde_subdir_next(struct proc_dir_entry *dir)
+ {
+ 	return rb_entry_safe(rb_next(&dir->subdir_node), struct proc_dir_entry,
+ 			     subdir_node);
+ }
+ 
+ static struct proc_dir_entry *pde_subdir_find(struct proc_dir_entry *dir,
+ 					      const char *name,
+ 					      unsigned int len)
+ {
+ 	struct rb_node *node = dir->subdir.rb_node;
+ 
+ 	while (node) {
+ 		struct proc_dir_entry *de = container_of(node,
+ 							 struct proc_dir_entry,
+ 							 subdir_node);
+ 		int result = proc_match(len, name, de);
+ 
+ 		if (result < 0)
+ 			node = node->rb_left;
+ 		else if (result > 0)
+ 			node = node->rb_right;
+ 		else
+ 			return de;
+ 	}
+ 	return NULL;
+ }
+ 
+ static bool pde_subdir_insert(struct proc_dir_entry *dir,
+ 			      struct proc_dir_entry *de)
+ {
+ 	struct rb_root *root = &dir->subdir;
+ 	struct rb_node **new = &root->rb_node, *parent = NULL;
+ 
+ 	/* Figure out where to put new node */
+ 	while (*new) {
+ 		struct proc_dir_entry *this =
+ 			container_of(*new, struct proc_dir_entry, subdir_node);
+ 		int result = proc_match(de->namelen, de->name, this);
+ 
+ 		parent = *new;
+ 		if (result < 0)
+ 			new = &(*new)->rb_left;
+ 		else if (result > 0)
+ 			new = &(*new)->rb_right;
+ 		else
+ 			return false;
+ 	}
+ 
+ 	/* Add new node and rebalance tree. */
+ 	rb_link_node(&de->subdir_node, parent, new);
+ 	rb_insert_color(&de->subdir_node, root);
+ 	return true;
++>>>>>>> 2fc1e948e820 (fs/proc.c: use rb_entry_safe() instead of rb_entry())
  }
  
  static int proc_notify_change(struct dentry *dentry, struct iattr *iattr)
* Unmerged path fs/proc/generic.c
