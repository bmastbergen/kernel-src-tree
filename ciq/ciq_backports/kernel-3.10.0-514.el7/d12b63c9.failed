zram: report every added and removed device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
commit d12b63c927e0e90de4b55d5084f947707c6d8cf4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/d12b63c9.failed

With dynamic device creation/removal (which will be introduced later in
the series) printing num_devices in zram_init() will not make a lot of
sense, as well as printing the number of destroyed devices in
destroy_devices().  Print per-device action (added/removed) in zram_add()
and zram_remove() instead.

Example:

[ 3645.259652] zram: Added device: zram5
[ 3646.152074] zram: Added device: zram6
[ 3650.585012] zram: Removed device: zram5
[ 3655.845584] zram: Added device: zram8
[ 3660.975223] zram: Removed device: zram6

	Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d12b63c927e0e90de4b55d5084f947707c6d8cf4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/zram/zram_drv.c
diff --cc drivers/block/zram/zram_drv.c
index f4772ab5159f,4429f546b532..000000000000
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@@ -1013,15 -1254,35 +1015,37 @@@ out
  	return ret;
  }
  
 -static void zram_remove(struct zram *zram)
 +static void destroy_device(struct zram *zram)
  {
++<<<<<<< HEAD
++=======
+ 	pr_info("Removed device: %s\n", zram->disk->disk_name);
+ 	/*
+ 	 * Remove sysfs first, so no one will perform a disksize
+ 	 * store while we destroy the devices
+ 	 */
++>>>>>>> d12b63c927e0 (zram: report every added and removed device)
  	sysfs_remove_group(&disk_to_dev(zram->disk)->kobj,
  			&zram_disk_attr_group);
  
 -	zram_reset_device(zram);
 -	idr_remove(&zram_index_idr, zram->disk->first_minor);
 -	blk_cleanup_queue(zram->disk->queue);
  	del_gendisk(zram->disk);
  	put_disk(zram->disk);
 -	kfree(zram);
 -}
  
++<<<<<<< HEAD
 +	blk_cleanup_queue(zram->queue);
++=======
+ static int zram_remove_cb(int id, void *ptr, void *data)
+ {
+ 	zram_remove(ptr);
+ 	return 0;
+ }
+ 
+ static void destroy_devices(void)
+ {
+ 	idr_for_each(&zram_index_idr, &zram_remove_cb, NULL);
+ 	idr_destroy(&zram_index_idr);
+ 	unregister_blkdev(zram_major, "zram");
++>>>>>>> d12b63c927e0 (zram: report every added and removed device)
  }
  
  static int __init zram_init(void)
@@@ -1050,22 -1296,15 +1074,25 @@@
  	}
  
  	for (dev_id = 0; dev_id < num_devices; dev_id++) {
 -		ret = zram_add(dev_id);
 -		if (ret != 0)
 -			goto out_error;
 +		ret = create_device(&zram_devices[dev_id], dev_id);
 +		if (ret)
 +			goto free_devices;
  	}
  
++<<<<<<< HEAD
 +	pr_info("Created %u device(s) ...\n", num_devices);
 +
++=======
++>>>>>>> d12b63c927e0 (zram: report every added and removed device)
  	return 0;
  
 -out_error:
 -	destroy_devices();
 +free_devices:
 +	while (dev_id)
 +		destroy_device(&zram_devices[--dev_id]);
 +	kfree(zram_devices);
 +unregister:
 +	unregister_blkdev(zram_major, "zram");
 +out:
  	return ret;
  }
  
* Unmerged path drivers/block/zram/zram_drv.c
