drm/i915/gen9: implement WaEnableSamplerGPGPUPreemptionSupport

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [drm] i915/gen9: implement WaEnableSamplerGPGPUPreemptionSupport (Rob Clark) [1348329 1349064]
Rebuild_FUZZ: 96.67%
commit-author Tim Gore <tim.gore@intel.com>
commit bfd8ad4e4a180b95d500c76280ddc01f23f92b9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/bfd8ad4e.failed

WaEnableSamplerGPGPUPreemptionSupport fixes a problem
related to mid thread pre-emption.

	Signed-off-by: Tim Gore <tim.gore@intel.com>
	Reviewed-by: Dave Gordon <david.s.gordon@intel.com>
	Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Link: http://patchwork.freedesktop.org/patch/msgid/1461077152-31899-1-git-send-email-tim.gore@intel.com
(cherry picked from commit bfd8ad4e4a180b95d500c76280ddc01f23f92b9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_ringbuffer.c
diff --cc drivers/gpu/drm/i915/intel_ringbuffer.c
index 005b5e04de4d,444d30adf60d..000000000000
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@@ -917,47 -940,73 +917,55 @@@ static int gen9_init_workarounds(struc
  	WA_SET_BIT_MASKED(HALF_SLICE_CHICKEN3,
  			  GEN9_DISABLE_OCL_OOB_SUPPRESS_LOGIC);
  
 -	/* WaDisableDgMirrorFixInHalfSliceChicken5:skl,bxt */
 -	if (IS_SKL_REVID(dev, 0, SKL_REVID_B0) ||
 -	    IS_BXT_REVID(dev, 0, BXT_REVID_A1))
 +	if (INTEL_REVID(dev) == SKL_REVID_A0 ||
 +	    INTEL_REVID(dev) == SKL_REVID_B0) {
 +		/* WaDisableDgMirrorFixInHalfSliceChicken5:skl */
  		WA_CLR_BIT_MASKED(GEN9_HALF_SLICE_CHICKEN5,
  				  GEN9_DG_MIRROR_FIX_ENABLE);
 +	}
  
 -	/* WaSetDisablePixMaskCammingAndRhwoInCommonSliceChicken:skl,bxt */
 -	if (IS_SKL_REVID(dev, 0, SKL_REVID_B0) ||
 -	    IS_BXT_REVID(dev, 0, BXT_REVID_A1)) {
++<<<<<<< HEAD
 +	if (IS_SKYLAKE(dev) && INTEL_REVID(dev) <= SKL_REVID_B0) {
 +		/* WaSetDisablePixMaskCammingAndRhwoInCommonSliceChicken:skl */
  		WA_SET_BIT_MASKED(GEN7_COMMON_SLICE_CHICKEN1,
  				  GEN9_RHWO_OPTIMIZATION_DISABLE);
 -		/*
 -		 * WA also requires GEN9_SLICE_COMMON_ECO_CHICKEN0[14:14] to be set
 -		 * but we do that in per ctx batchbuffer as there is an issue
 -		 * with this register not getting restored on ctx restore
 -		 */
 +		WA_SET_BIT_MASKED(GEN9_SLICE_COMMON_ECO_CHICKEN0,
 +				  DISABLE_PIXEL_MASK_CAMMING);
  	}
  
 +	if (INTEL_REVID(dev) >= SKL_REVID_C0) {
 +		/* WaEnableYV12BugFixInHalfSliceChicken7:skl */
 +		WA_SET_BIT_MASKED(GEN9_HALF_SLICE_CHICKEN7,
 +				  GEN9_ENABLE_YV12_BUGFIX);
 +	}
++=======
+ 	/* WaEnableYV12BugFixInHalfSliceChicken7:skl,bxt */
+ 	/* WaEnableSamplerGPGPUPreemptionSupport:skl,bxt */
+ 	WA_SET_BIT_MASKED(GEN9_HALF_SLICE_CHICKEN7,
+ 			  GEN9_ENABLE_YV12_BUGFIX |
+ 			  GEN9_ENABLE_GPGPU_PREEMPTION);
++>>>>>>> bfd8ad4e4a18 (drm/i915/gen9: implement WaEnableSamplerGPGPUPreemptionSupport)
  
 -	/* Wa4x4STCOptimizationDisable:skl,bxt */
 -	/* WaDisablePartialResolveInVc:skl,bxt */
 -	WA_SET_BIT_MASKED(CACHE_MODE_1, (GEN8_4x4_STC_OPTIMIZATION_DISABLE |
 -					 GEN9_PARTIAL_RESOLVE_IN_VC_DISABLE));
 +	if (INTEL_REVID(dev) <= SKL_REVID_D0) {
 +		/*
 +		 *Use Force Non-Coherent whenever executing a 3D context. This
 +		 * is a workaround for a possible hang in the unlikely event
 +		 * a TLB invalidation occurs during a PSD flush.
 +		 */
 +		/* WaForceEnableNonCoherent:skl */
 +		WA_SET_BIT_MASKED(HDC_CHICKEN0,
 +				  HDC_FORCE_NON_COHERENT);
 +	}
  
 -	/* WaCcsTlbPrefetchDisable:skl,bxt */
 -	WA_CLR_BIT_MASKED(GEN9_HALF_SLICE_CHICKEN5,
 -			  GEN9_CCS_TLB_PREFETCH_ENABLE);
 +	/* Wa4x4STCOptimizationDisable:skl */
 +	WA_SET_BIT_MASKED(CACHE_MODE_1, GEN8_4x4_STC_OPTIMIZATION_DISABLE);
  
 -	/* WaDisableMaskBasedCammingInRCC:skl,bxt */
 -	if (IS_SKL_REVID(dev, SKL_REVID_C0, SKL_REVID_C0) ||
 -	    IS_BXT_REVID(dev, 0, BXT_REVID_A1))
 -		WA_SET_BIT_MASKED(SLICE_ECO_CHICKEN0,
 -				  PIXEL_MASK_CAMMING_DISABLE);
 -
 -	/* WaForceContextSaveRestoreNonCoherent:skl,bxt */
 -	tmp = HDC_FORCE_CONTEXT_SAVE_RESTORE_NON_COHERENT;
 -	if (IS_SKL_REVID(dev, SKL_REVID_F0, REVID_FOREVER) ||
 -	    IS_BXT_REVID(dev, BXT_REVID_B0, REVID_FOREVER))
 -		tmp |= HDC_FORCE_CSR_NON_COHERENT_OVR_DISABLE;
 -	WA_SET_BIT_MASKED(HDC_CHICKEN0, tmp);
 -
 -	/* WaDisableSamplerPowerBypassForSOPingPong:skl,bxt */
 -	if (IS_SKYLAKE(dev) || IS_BXT_REVID(dev, 0, BXT_REVID_B0))
 -		WA_SET_BIT_MASKED(HALF_SLICE_CHICKEN3,
 -				  GEN8_SAMPLER_POWER_BYPASS_DIS);
 -
 -	/* WaDisableSTUnitPowerOptimization:skl,bxt */
 -	WA_SET_BIT_MASKED(HALF_SLICE_CHICKEN2, GEN8_ST_PO_DISABLE);
 -
 -	/* WaOCLCoherentLineFlush:skl,bxt */
 -	I915_WRITE(GEN8_L3SQCREG4, (I915_READ(GEN8_L3SQCREG4) |
 -				    GEN8_LQSC_FLUSH_COHERENT_LINES));
 -
 -	/* WaEnablePreemptionGranularityControlByUMD:skl,bxt */
 -	ret= wa_ring_whitelist_reg(engine, GEN8_CS_CHICKEN1);
 -	if (ret)
 -		return ret;
 +	/* WaDisablePartialResolveInVc:skl */
 +	WA_SET_BIT_MASKED(CACHE_MODE_1, GEN9_PARTIAL_RESOLVE_IN_VC_DISABLE);
  
 -	/* WaAllowUMDToModifyHDCChicken1:skl,bxt */
 -	ret = wa_ring_whitelist_reg(engine, GEN8_HDC_CHICKEN1);
 -	if (ret)
 -		return ret;
 +	/* WaCcsTlbPrefetchDisable:skl */
 +	WA_CLR_BIT_MASKED(GEN9_HALF_SLICE_CHICKEN5,
 +			  GEN9_CCS_TLB_PREFETCH_ENABLE);
  
  	return 0;
  }
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index bcce9fc478ee..c9d84984814c 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -6343,6 +6343,7 @@ enum skl_disp_power_wells {
 
 #define GEN9_HALF_SLICE_CHICKEN7	0xe194
 #define   GEN9_ENABLE_YV12_BUGFIX	(1<<4)
+#define   GEN9_ENABLE_GPGPU_PREEMPTION	(1<<2)
 
 /* Audio */
 #define G4X_AUD_VID_DID			(dev_priv->info.display_mmio_offset + 0x62020)
* Unmerged path drivers/gpu/drm/i915/intel_ringbuffer.c
