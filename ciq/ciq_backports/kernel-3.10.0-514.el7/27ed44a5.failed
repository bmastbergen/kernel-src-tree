rhashtable: Add comment on choice of elasticity value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 27ed44a5d6d88897002b75f53004d4c565a5aab6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/27ed44a5.failed

This patch adds a comment on the choice of the value 16 as the
maximum chain length before we force a rehash.

	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 27ed44a5d6d88897002b75f53004d4c565a5aab6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/rhashtable.c
diff --cc lib/rhashtable.c
index 6d0c4774001c,8514f7c5f029..000000000000
--- a/lib/rhashtable.c
+++ b/lib/rhashtable.c
@@@ -528,7 -723,50 +528,54 @@@ int rhashtable_init(struct rhashtable *
  	if (params->nelem_hint)
  		size = rounded_hashtable_size(params);
  
++<<<<<<< HEAD
 +	tbl = bucket_table_alloc(size);
++=======
+ 	memset(ht, 0, sizeof(*ht));
+ 	mutex_init(&ht->mutex);
+ 	spin_lock_init(&ht->lock);
+ 	memcpy(&ht->p, params, sizeof(*params));
+ 
+ 	if (params->min_size)
+ 		ht->p.min_size = roundup_pow_of_two(params->min_size);
+ 
+ 	if (params->max_size)
+ 		ht->p.max_size = rounddown_pow_of_two(params->max_size);
+ 
+ 	ht->p.min_size = max(ht->p.min_size, HASH_MIN_SIZE);
+ 
+ 	/* The maximum (not average) chain length grows with the
+ 	 * size of the hash table, at a rate of (log N)/(log log N).
+ 	 * The value of 16 is selected so that even if the hash
+ 	 * table grew to 2^32 you would not expect the maximum
+ 	 * chain length to exceed it unless we are under attack
+ 	 * (or extremely unlucky).
+ 	 *
+ 	 * As this limit is only to detect attacks, we don't need
+ 	 * to set it to a lower value as you'd need the chain
+ 	 * length to vastly exceed 16 to have any real effect
+ 	 * on the system.
+ 	 */
+ 	if (!params->insecure_elasticity)
+ 		ht->elasticity = 16;
+ 
+ 	if (params->locks_mul)
+ 		ht->p.locks_mul = roundup_pow_of_two(params->locks_mul);
+ 	else
+ 		ht->p.locks_mul = BUCKET_LOCKS_PER_CPU;
+ 
+ 	ht->key_len = ht->p.key_len;
+ 	if (!params->hashfn) {
+ 		ht->p.hashfn = jhash;
+ 
+ 		if (!(ht->key_len & (sizeof(u32) - 1))) {
+ 			ht->key_len /= sizeof(u32);
+ 			ht->p.hashfn = rhashtable_jhash2;
+ 		}
+ 	}
+ 
+ 	tbl = bucket_table_alloc(ht, size, GFP_KERNEL);
++>>>>>>> 27ed44a5d6d8 (rhashtable: Add comment on choice of elasticity value)
  	if (tbl == NULL)
  		return -ENOMEM;
  
* Unmerged path lib/rhashtable.c
