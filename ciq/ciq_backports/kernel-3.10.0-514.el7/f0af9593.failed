PCI: Add pci_add_dma_alias() to abstract implementation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [pci] Add pci_add_dma_alias() to abstract implementation (Jerry Snitselaar) [1299853]
Rebuild_FUZZ: 95.24%
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit f0af9593372abfde34460aa1250e670cc535a7d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f0af9593.failed

Add a pci_add_dma_alias() interface to encapsulate the details of adding an
alias.  No functional change intended.

	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit f0af9593372abfde34460aa1250e670cc535a7d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/quirks.c
diff --cc drivers/pci/quirks.c
index 3f0d54b18af9,e45a7a8338bb..000000000000
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@@ -3478,11 -3610,8 +3478,16 @@@ int pci_dev_specific_reset(struct pci_d
  
  static void quirk_dma_func0_alias(struct pci_dev *dev)
  {
++<<<<<<< HEAD
 +	if (PCI_FUNC(dev->devfn) != 0) {
 +		dev->pci_dev_rh->dma_alias_devfn =
 +			PCI_DEVFN(PCI_SLOT(dev->devfn), 0);
 +		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
 +	}
++=======
+ 	if (PCI_FUNC(dev->devfn) != 0)
+ 		pci_add_dma_alias(dev, PCI_DEVFN(PCI_SLOT(dev->devfn), 0));
++>>>>>>> f0af9593372a (PCI: Add pci_add_dma_alias() to abstract implementation)
  }
  
  /*
@@@ -3495,11 -3624,8 +3500,16 @@@ DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_
  
  static void quirk_dma_func1_alias(struct pci_dev *dev)
  {
++<<<<<<< HEAD
 +	if (PCI_FUNC(dev->devfn) != 1) {
 +		dev->pci_dev_rh->dma_alias_devfn =
 +			PCI_DEVFN(PCI_SLOT(dev->devfn), 1);
 +		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
 +	}
++=======
+ 	if (PCI_FUNC(dev->devfn) != 1)
+ 		pci_add_dma_alias(dev, PCI_DEVFN(PCI_SLOT(dev->devfn), 1));
++>>>>>>> f0af9593372a (PCI: Add pci_add_dma_alias() to abstract implementation)
  }
  
  /*
@@@ -3562,11 -3692,10 +3572,18 @@@ static void quirk_fixed_dma_alias(struc
  
  	id = pci_match_id(fixed_dma_alias_tbl, dev);
  	if (id) {
++<<<<<<< HEAD
 +		dev->pci_dev_rh->dma_alias_devfn = id->driver_data;
 +		dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
 +		dev_info(&dev->dev, "Enabling fixed DMA alias to %02x.%d\n",
 +			 PCI_SLOT(dev->pci_dev_rh->dma_alias_devfn),
 +			 PCI_FUNC(dev->pci_dev_rh->dma_alias_devfn));
++=======
+ 		pci_add_dma_alias(dev, id->driver_data);
+ 		dev_info(&dev->dev, "Enabling fixed DMA alias to %02x.%d\n",
+ 			 PCI_SLOT(id->driver_data),
+ 			 PCI_FUNC(id->driver_data));
++>>>>>>> f0af9593372a (PCI: Add pci_add_dma_alias() to abstract implementation)
  	}
  }
  
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 1126474d9c49..de3c97a87920 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -4268,6 +4268,20 @@ int pci_set_vga_state(struct pci_dev *dev, bool decode,
 	return 0;
 }
 
+/**
+ * pci_add_dma_alias - Add a DMA devfn alias for a device
+ * @dev: the PCI device for which alias is added
+ * @devfn: alias slot and function
+ *
+ * This helper encodes 8-bit devfn as bit number in dma_alias_mask.
+ * It should be called early, preferably as PCI fixup header quirk.
+ */
+void pci_add_dma_alias(struct pci_dev *dev, u8 devfn)
+{
+	dev->dma_alias_devfn = devfn;
+	dev->dev_flags |= PCI_DEV_FLAGS_DMA_ALIAS_DEVFN;
+}
+
 bool pci_device_is_present(struct pci_dev *pdev)
 {
 	u32 v;
* Unmerged path drivers/pci/quirks.c
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 101751adcb61..28433bbddefd 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1907,6 +1907,7 @@ static inline struct eeh_dev *pci_dev_to_eeh_dev(struct pci_dev *pdev)
 }
 #endif
 
+void pci_add_dma_alias(struct pci_dev *dev, u8 devfn);
 int pci_for_each_dma_alias(struct pci_dev *pdev,
 			   int (*fn)(struct pci_dev *pdev,
 				     u16 alias, void *data), void *data);
