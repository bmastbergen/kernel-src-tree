cpufreq: intel_pstate: Minor cleanup for FRAC_BITS

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Minor cleanup for FRAC_BITS (Prarit Bhargava) [1283337]
Rebuild_FUZZ: 90.11%
commit-author Prarit Bhargava <prarit@redhat.com>
commit 88b7b7c0c2ba2c1f2c589ee883050717fe91af22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/88b7b7c0.failed

785ee27 ("cpufreq: intel_pstate: Fix limits->max_perf rounding error")
hardcodes the value of FRAC_BITS.  This patch fixes that minor issue.

Fixes: 785ee2788141 (cpufreq: intel_pstate: Fix limits->max_perf rounding error)
	Signed-off-by: Prarit Bhargava <prarit@redhat.com>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 88b7b7c0c2ba2c1f2c589ee883050717fe91af22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 07d88cb77cb6,98fb8821382d..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -995,14 -1106,32 +995,35 @@@ static int intel_pstate_set_policy(stru
  		return 0;
  	}
  
 -	pr_debug("intel_pstate: set powersave\n");
 -	limits = &powersave_limits;
 -	limits->min_policy_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
 -	limits->min_policy_pct = clamp_t(int, limits->min_policy_pct, 0 , 100);
 -	limits->max_policy_pct = DIV_ROUND_UP(policy->max * 100,
 -					      policy->cpuinfo.max_freq);
 -	limits->max_policy_pct = clamp_t(int, limits->max_policy_pct, 0 , 100);
 +	limits.min_perf_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
 +	limits.min_perf_pct = clamp_t(int, limits.min_perf_pct, 0 , 100);
 +	limits.min_perf = div_fp(int_tofp(limits.min_perf_pct), int_tofp(100));
  
++<<<<<<< HEAD
 +	limits.max_policy_pct = (policy->max * 100) / policy->cpuinfo.max_freq;
 +	limits.max_policy_pct = clamp_t(int, limits.max_policy_pct, 0 , 100);
 +	limits.max_perf_pct = min(limits.max_policy_pct, limits.max_sysfs_pct);
 +	limits.max_perf = div_fp(int_tofp(limits.max_perf_pct), int_tofp(100));
++=======
+ 	/* Normalize user input to [min_policy_pct, max_policy_pct] */
+ 	limits->min_perf_pct = max(limits->min_policy_pct,
+ 				   limits->min_sysfs_pct);
+ 	limits->min_perf_pct = min(limits->max_policy_pct,
+ 				   limits->min_perf_pct);
+ 	limits->max_perf_pct = min(limits->max_policy_pct,
+ 				   limits->max_sysfs_pct);
+ 	limits->max_perf_pct = max(limits->min_policy_pct,
+ 				   limits->max_perf_pct);
+ 	limits->max_perf = round_up(limits->max_perf, FRAC_BITS);
+ 
+ 	/* Make sure min_perf_pct <= max_perf_pct */
+ 	limits->min_perf_pct = min(limits->max_perf_pct, limits->min_perf_pct);
+ 
+ 	limits->min_perf = div_fp(int_tofp(limits->min_perf_pct),
+ 				  int_tofp(100));
+ 	limits->max_perf = div_fp(int_tofp(limits->max_perf_pct),
+ 				  int_tofp(100));
++>>>>>>> 88b7b7c0c2ba (cpufreq: intel_pstate: Minor cleanup for FRAC_BITS)
  
  	if (hwp_active)
  		intel_pstate_hwp_set();
* Unmerged path drivers/cpufreq/intel_pstate.c
