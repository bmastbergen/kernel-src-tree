USB: OHCI: make ohci-s3c2410 a separate driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [usb] ohci: make ohci-s3c2410 a separate driver (Don Zickus) [1303209]
Rebuild_FUZZ: 94.25%
commit-author Manjunath Goudar <manjunath.goudar@linaro.org>
commit f23b71f3fe63b760a665406f453fa479ff90aad5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/f23b71f3.failed

Separate the Samsung OHCI S3C24xx/S3C64xx host controller driver
from ohci-hcd host code so that it can be built as a separate
driver module.This work is part of enabling multi-platform.

	Signed-off-by: Manjunath Goudar <manjunath.goudar@linaro.org>
	Signed-off-by: Deepak Saxena <dsaxena@linaro.org>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Reviewed-by: Tomasz Figa <t.figa@samsung.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit f23b71f3fe63b760a665406f453fa479ff90aad5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/Kconfig
#	drivers/usb/host/Makefile
#	drivers/usb/host/ohci-hcd.c
diff --cc drivers/usb/host/Kconfig
index 14e3c49416bf,f0f9bf6e20de..000000000000
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@@ -379,8 -373,32 +379,35 @@@ config USB_OHCI_HCD_OMAP
  	---help---
  	  Enables support for the OHCI controller on OMAP1/2 chips.
  
++<<<<<<< HEAD
++=======
+ config USB_OHCI_HCD_SPEAR
+         tristate "Support for ST SPEAr on-chip OHCI USB controller"
+         depends on USB_OHCI_HCD && PLAT_SPEAR
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           ST SPEAr chips.
+ 
+ config USB_OHCI_HCD_S3C2410
+         tristate "OHCI support for Samsung S3C24xx/S3C64xx SoC series"
+         depends on USB_OHCI_HCD && (ARCH_S3C24XX || ARCH_S3C64XX)
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           S3C24xx/S3C64xx chips.
+ 
+ config USB_OHCI_HCD_AT91
+         tristate "Support for Atmel on-chip OHCI USB controller"
+         depends on USB_OHCI_HCD && ARCH_AT91
+         default y
+         ---help---
+           Enables support for the on-chip OHCI controller on
+           Atmel chips.
+ 
++>>>>>>> f23b71f3fe63 (USB: OHCI: make ohci-s3c2410 a separate driver)
  config USB_OHCI_HCD_OMAP3
 -	tristate "OHCI support for OMAP3 and later chips"
 +	bool "OHCI support for OMAP3 and later chips"
  	depends on (ARCH_OMAP3 || ARCH_OMAP4)
  	default y
  	---help---
diff --cc drivers/usb/host/Makefile
index 602b80e40777,96d18dde672c..000000000000
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@@ -44,6 -48,11 +44,14 @@@ obj-$(CONFIG_USB_OHCI_HCD)	+= ohci-hcd.
  obj-$(CONFIG_USB_OHCI_HCD_PCI)	+= ohci-pci.o
  obj-$(CONFIG_USB_OHCI_HCD_PLATFORM)	+= ohci-platform.o
  obj-$(CONFIG_USB_OHCI_EXYNOS)	+= ohci-exynos.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_USB_OHCI_HCD_OMAP1)	+= ohci-omap.o
+ obj-$(CONFIG_USB_OHCI_HCD_OMAP3)	+= ohci-omap3.o
+ obj-$(CONFIG_USB_OHCI_HCD_SPEAR)	+= ohci-spear.o
+ obj-$(CONFIG_USB_OHCI_HCD_AT91)	+= ohci-at91.o
+ obj-$(CONFIG_USB_OHCI_HCD_S3C2410)	+= ohci-s3c2410.o
++>>>>>>> f23b71f3fe63 (USB: OHCI: make ohci-s3c2410 a separate driver)
  
  obj-$(CONFIG_USB_UHCI_HCD)	+= uhci-hcd.o
  obj-$(CONFIG_USB_FHCI_HCD)	+= fhci.o
diff --cc drivers/usb/host/ohci-hcd.c
index 31d50d19b73d,fcfcab503250..000000000000
--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@@ -1212,21 -1177,6 +1212,24 @@@ MODULE_LICENSE ("GPL")
  #define SA1111_DRIVER		ohci_hcd_sa1111_driver
  #endif
  
++<<<<<<< HEAD
 +#if defined(CONFIG_ARCH_S3C24XX) || defined(CONFIG_ARCH_S3C64XX)
 +#include "ohci-s3c2410.c"
 +#define S3C2410_PLATFORM_DRIVER	ohci_hcd_s3c2410_driver
 +#endif
 +
 +#ifdef CONFIG_USB_OHCI_HCD_OMAP1
 +#include "ohci-omap.c"
 +#define OMAP1_PLATFORM_DRIVER	ohci_hcd_omap_driver
 +#endif
 +
 +#ifdef CONFIG_USB_OHCI_HCD_OMAP3
 +#include "ohci-omap3.c"
 +#define OMAP3_PLATFORM_DRIVER	ohci_hcd_omap3_driver
 +#endif
 +
++=======
++>>>>>>> f23b71f3fe63 (USB: OHCI: make ohci-s3c2410 a separate driver)
  #if defined(CONFIG_PXA27x) || defined(CONFIG_PXA3xx)
  #include "ohci-pxa27x.c"
  #define PLATFORM_DRIVER		ohci_hcd_pxa27x_driver
* Unmerged path drivers/usb/host/Kconfig
* Unmerged path drivers/usb/host/Makefile
* Unmerged path drivers/usb/host/ohci-hcd.c
diff --git a/drivers/usb/host/ohci-s3c2410.c b/drivers/usb/host/ohci-s3c2410.c
index e125770b893c..61f9aeaf4ab0 100644
--- a/drivers/usb/host/ohci-s3c2410.c
+++ b/drivers/usb/host/ohci-s3c2410.c
@@ -19,19 +19,36 @@
  * This file is licenced under the GPL.
 */
 
-#include <linux/platform_device.h>
 #include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
 #include <linux/platform_data/usb-ohci-s3c2410.h>
+#include <linux/usb.h>
+#include <linux/usb/hcd.h>
+
+#include "ohci.h"
+
 
 #define valid_port(idx) ((idx) == 1 || (idx) == 2)
 
 /* clock device associated with the hcd */
 
+
+#define DRIVER_DESC "OHCI S3C2410 driver"
+
+static const char hcd_name[] = "ohci-s3c2410";
+
 static struct clk *clk;
 static struct clk *usb_clk;
 
 /* forward definitions */
 
+static int (*orig_ohci_hub_control)(struct usb_hcd  *hcd, u16 typeReq,
+			u16 wValue, u16 wIndex, char *buf, u16 wLength);
+static int (*orig_ohci_hub_status_data)(struct usb_hcd *hcd, char *buf);
+
 static void s3c2410_hcd_oc(struct s3c2410_hcd_info *info, int port_oc);
 
 /* conversion functions */
@@ -93,7 +110,7 @@ ohci_s3c2410_hub_status_data(struct usb_hcd *hcd, char *buf)
 	int orig;
 	int portno;
 
-	orig  = ohci_hub_status_data(hcd, buf);
+	orig = orig_ohci_hub_status_data(hcd, buf);
 
 	if (info == NULL)
 		return orig;
@@ -164,7 +181,7 @@ static int ohci_s3c2410_hub_control(
 	 * process the request straight away and exit */
 
 	if (info == NULL) {
-		ret = ohci_hub_control(hcd, typeReq, wValue,
+		ret = orig_ohci_hub_control(hcd, typeReq, wValue,
 				       wIndex, buf, wLength);
 		goto out;
 	}
@@ -214,7 +231,7 @@ static int ohci_s3c2410_hub_control(
 		break;
 	}
 
-	ret = ohci_hub_control(hcd, typeReq, wValue, wIndex, buf, wLength);
+	ret = orig_ohci_hub_control(hcd, typeReq, wValue, wIndex, buf, wLength);
 	if (ret)
 		goto out;
 
@@ -373,8 +390,6 @@ static int usb_hcd_s3c2410_probe(const struct hc_driver *driver,
 
 	s3c2410_start_hc(dev, hcd);
 
-	ohci_hcd_init(hcd_to_ohci(hcd));
-
 	retval = usb_add_hcd(hcd, dev->resource[1].start, 0);
 	if (retval != 0)
 		goto err_ioremap;
@@ -391,71 +406,7 @@ static int usb_hcd_s3c2410_probe(const struct hc_driver *driver,
 
 /*-------------------------------------------------------------------------*/
 
-static int
-ohci_s3c2410_start(struct usb_hcd *hcd)
-{
-	struct ohci_hcd	*ohci = hcd_to_ohci(hcd);
-	int ret;
-
-	ret = ohci_init(ohci);
-	if (ret < 0)
-		return ret;
-
-	ret = ohci_run(ohci);
-	if (ret < 0) {
-		dev_err(hcd->self.controller, "can't start %s\n",
-			hcd->self.bus_name);
-		ohci_stop(hcd);
-		return ret;
-	}
-
-	return 0;
-}
-
-
-static const struct hc_driver ohci_s3c2410_hc_driver = {
-	.description =		hcd_name,
-	.product_desc =		"S3C24XX OHCI",
-	.hcd_priv_size =	sizeof(struct ohci_hcd),
-
-	/*
-	 * generic hardware linkage
-	 */
-	.irq =			ohci_irq,
-	.flags =		HCD_USB11 | HCD_MEMORY,
-
-	/*
-	 * basic lifecycle operations
-	 */
-	.start =		ohci_s3c2410_start,
-	.stop =			ohci_stop,
-	.shutdown =		ohci_shutdown,
-
-	/*
-	 * managing i/o requests and associated device resources
-	 */
-	.urb_enqueue =		ohci_urb_enqueue,
-	.urb_dequeue =		ohci_urb_dequeue,
-	.endpoint_disable =	ohci_endpoint_disable,
-
-	/*
-	 * scheduling support
-	 */
-	.get_frame_number =	ohci_get_frame,
-
-	/*
-	 * root hub support
-	 */
-	.hub_status_data =	ohci_s3c2410_hub_status_data,
-	.hub_control =		ohci_s3c2410_hub_control,
-#ifdef	CONFIG_PM
-	.bus_suspend =		ohci_bus_suspend,
-	.bus_resume =		ohci_bus_resume,
-#endif
-	.start_port_reset =	ohci_start_port_reset,
-};
-
-/* device driver */
+static struct hc_driver __read_mostly ohci_s3c2410_hc_driver;
 
 static int ohci_hcd_s3c2410_drv_probe(struct platform_device *pdev)
 {
@@ -532,4 +483,39 @@ static struct platform_driver ohci_hcd_s3c2410_driver = {
 	},
 };
 
+static int __init ohci_s3c2410_init(void)
+{
+	if (usb_disabled())
+		return -ENODEV;
+
+	pr_info("%s: " DRIVER_DESC "\n", hcd_name);
+	ohci_init_driver(&ohci_s3c2410_hc_driver, NULL);
+
+	/*
+	 * The Samsung HW has some unusual quirks, which require
+	 * Sumsung-specific workarounds. We override certain hc_driver
+	 * functions here to achieve that. We explicitly do not enhance
+	 * ohci_driver_overrides to allow this more easily, since this
+	 * is an unusual case, and we don't want to encourage others to
+	 * override these functions by making it too easy.
+	 */
+
+	orig_ohci_hub_control = ohci_s3c2410_hc_driver.hub_control;
+	orig_ohci_hub_status_data = ohci_s3c2410_hc_driver.hub_status_data;
+
+	ohci_s3c2410_hc_driver.hub_status_data	= ohci_s3c2410_hub_status_data;
+	ohci_s3c2410_hc_driver.hub_control	= ohci_s3c2410_hub_control;
+
+	return platform_driver_register(&ohci_hcd_s3c2410_driver);
+}
+module_init(ohci_s3c2410_init);
+
+static void __exit ohci_s3c2410_cleanup(void)
+{
+	platform_driver_unregister(&ohci_hcd_s3c2410_driver);
+}
+module_exit(ohci_s3c2410_cleanup);
+
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_LICENSE("GPL");
 MODULE_ALIAS("platform:s3c2410-ohci");
