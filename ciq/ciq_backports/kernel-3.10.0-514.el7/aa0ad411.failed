staging/rdma/hfi1: Fix header size calculation for RC/UC QPs with GRH enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [infiniband] rdma/hfi1: Fix header size calculation for RC/UC QPs with GRH enabled (Alex Estrin) [1272062 1273170]
Rebuild_FUZZ: 94.52%
commit-author Jianxin Xiong <jianxin.xiong@intel.com>
commit aa0ad411e51763f95afdae11d6ee684915faecef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/aa0ad411.failed

There is a header size counter in both the QP struture and the txreq
structure. The counter in the txreq structure is not updated properly
for RC and UC queue pairs with GRH enabled, and thus causing SDMA
send to fail. This patch fixes the RC and UC path.

	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Reviewed-by: Dean Luick <dean.luick@intel.com>
	Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
	Signed-off-by: Jianxin Xiong <jianxin.xiong@intel.com>
	Signed-off-by: Jubin John <jubin.john@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit aa0ad411e51763f95afdae11d6ee684915faecef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/hfi1/rc.c
#	drivers/staging/hfi1/uc.c
diff --cc drivers/staging/hfi1/rc.c
index dd57d65aa9b2,1ce0e08378b4..000000000000
--- a/drivers/staging/hfi1/rc.c
+++ b/drivers/staging/hfi1/rc.c
@@@ -234,8 -358,11 +234,16 @@@ normal
  	}
  	qp->s_rdma_ack_cnt++;
  	qp->s_hdrwords = hwords;
++<<<<<<< HEAD:drivers/staging/hfi1/rc.c
 +	qp->s_cur_size = len;
 +	hfi1_make_ruc_header(qp, ohdr, bth0, bth2, middle);
++=======
+ 	ps->s_txreq->sde = priv->s_sde;
+ 	qp->s_cur_size = len;
+ 	hfi1_make_ruc_header(qp, ohdr, bth0, bth2, middle, ps);
+ 	/* pbc */
+ 	ps->s_txreq->hdr_dwords = qp->s_hdrwords + 2;
++>>>>>>> aa0ad411e517 (staging/rdma/hfi1: Fix header size calculation for RC/UC QPs with GRH enabled):drivers/staging/rdma/hfi1/rc.c
  	return 1;
  
  bail:
@@@ -656,6 -763,7 +664,10 @@@ int hfi1_make_rc_req(struct hfi1_qp *qp
  	}
  	qp->s_len -= len;
  	qp->s_hdrwords = hwords;
++<<<<<<< HEAD:drivers/staging/hfi1/rc.c
++=======
+ 	ps->s_txreq->sde = priv->s_sde;
++>>>>>>> aa0ad411e517 (staging/rdma/hfi1: Fix header size calculation for RC/UC QPs with GRH enabled):drivers/staging/rdma/hfi1/rc.c
  	qp->s_cur_sge = ss;
  	qp->s_cur_size = len;
  	hfi1_make_ruc_header(
@@@ -663,16 -771,25 +675,29 @@@
  		ohdr,
  		bth0 | (qp->s_state << 24),
  		bth2,
++<<<<<<< HEAD:drivers/staging/hfi1/rc.c
 +		middle);
 +done:
 +	ret = 1;
 +	goto unlock;
++=======
+ 		middle,
+ 		ps);
+ 	/* pbc */
+ 	ps->s_txreq->hdr_dwords = qp->s_hdrwords + 2;
+ 	return 1;
+ 
+ done_free_tx:
+ 	hfi1_put_txreq(ps->s_txreq);
+ 	ps->s_txreq = NULL;
+ 	return 1;
++>>>>>>> aa0ad411e517 (staging/rdma/hfi1: Fix header size calculation for RC/UC QPs with GRH enabled):drivers/staging/rdma/hfi1/rc.c
  
  bail:
 -	hfi1_put_txreq(ps->s_txreq);
 -
 -bail_no_tx:
 -	ps->s_txreq = NULL;
 -	qp->s_flags &= ~RVT_S_BUSY;
 -	qp->s_hdrwords = 0;
 -	return 0;
 +	qp->s_flags &= ~HFI1_S_BUSY;
 +unlock:
 +	spin_unlock_irqrestore(&qp->s_lock, flags);
 +	return ret;
  }
  
  /**
diff --cc drivers/staging/hfi1/uc.c
index fc90d4f544e4,df773d433297..000000000000
--- a/drivers/staging/hfi1/uc.c
+++ b/drivers/staging/hfi1/uc.c
@@@ -232,19 -239,28 +232,35 @@@ int hfi1_make_uc_req(struct hfi1_qp *qp
  	}
  	qp->s_len -= len;
  	qp->s_hdrwords = hwords;
++<<<<<<< HEAD:drivers/staging/hfi1/uc.c
 +	qp->s_cur_sge = &qp->s_sge;
 +	qp->s_cur_size = len;
 +	hfi1_make_ruc_header(qp, ohdr, bth0 | (qp->s_state << 24),
 +			     mask_psn(qp->s_next_psn++), middle);
 +done:
 +	ret = 1;
 +	goto unlock;
++=======
+ 	ps->s_txreq->sde = priv->s_sde;
+ 	qp->s_cur_sge = &qp->s_sge;
+ 	qp->s_cur_size = len;
+ 	hfi1_make_ruc_header(qp, ohdr, bth0 | (qp->s_state << 24),
+ 			     mask_psn(qp->s_psn++), middle, ps);
+ 	/* pbc */
+ 	ps->s_txreq->hdr_dwords = qp->s_hdrwords + 2;
+ 	return 1;
+ 
+ done_free_tx:
+ 	hfi1_put_txreq(ps->s_txreq);
+ 	ps->s_txreq = NULL;
+ 	return 1;
++>>>>>>> aa0ad411e517 (staging/rdma/hfi1: Fix header size calculation for RC/UC QPs with GRH enabled):drivers/staging/rdma/hfi1/uc.c
  
  bail:
 -	hfi1_put_txreq(ps->s_txreq);
 -
 -bail_no_tx:
 -	ps->s_txreq = NULL;
 -	qp->s_flags &= ~RVT_S_BUSY;
 -	qp->s_hdrwords = 0;
 -	return 0;
 +	qp->s_flags &= ~HFI1_S_BUSY;
 +unlock:
 +	spin_unlock_irqrestore(&qp->s_lock, flags);
 +	return ret;
  }
  
  /**
* Unmerged path drivers/staging/hfi1/rc.c
* Unmerged path drivers/staging/hfi1/uc.c
