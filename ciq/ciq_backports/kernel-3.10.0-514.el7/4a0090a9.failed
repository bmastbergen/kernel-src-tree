geneve: change to use UDP socket GRO

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Tom Herbert <tom@herbertland.com>
commit 4a0090a98e5f6e7813d807c883abf362df4b0507
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/4a0090a9.failed

Adapt geneve_gro_receive, geneve_gro_complete to take a socket argument.
Set these functions in tunnel_config.  Don't set udp_offloads any more.

	Signed-off-by: Tom Herbert <tom@herbertland.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4a0090a98e5f6e7813d807c883abf362df4b0507)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/geneve.c
diff --cc drivers/net/geneve.c
index b60e3a33e381,a9fbf17eb256..000000000000
--- a/drivers/net/geneve.c
+++ b/drivers/net/geneve.c
@@@ -68,8 -87,8 +68,7 @@@ struct geneve_sock 
  	struct socket		*sock;
  	struct rcu_head		rcu;
  	int			refcnt;
- 	struct udp_offload	udp_offloads;
  	struct hlist_head	vni_list[VNI_HASH_SIZE];
 -	u32			flags;
  };
  
  static inline __u32 geneve_net_vni_hash(u8 vni[3])
@@@ -304,16 -403,19 +303,30 @@@ static struct socket *geneve_create_soc
  
  static void geneve_notify_add_rx_port(struct geneve_sock *gs)
  {
 -	struct net_device *dev;
  	struct sock *sk = gs->sock->sk;
++<<<<<<< HEAD
 +	sa_family_t sa_family = sk->sk_family;
 +	int err;
 +
 +	if (sa_family == AF_INET) {
 +		err = udp_add_offload(sock_net(sk), &gs->udp_offloads);
 +		if (err)
 +			pr_warn("geneve: udp_add_offload failed with status %d\n",
 +				err);
 +	}
++=======
+ 	struct net *net = sock_net(sk);
+ 	sa_family_t sa_family = geneve_get_sk_family(gs);
+ 	__be16 port = inet_sk(sk)->inet_sport;
+ 
+ 	rcu_read_lock();
+ 	for_each_netdev_rcu(net, dev) {
+ 		if (dev->netdev_ops->ndo_add_geneve_port)
+ 			dev->netdev_ops->ndo_add_geneve_port(dev, sa_family,
+ 							     port);
+ 	}
+ 	rcu_read_unlock();
++>>>>>>> 4a0090a98e5f (geneve: change to use UDP socket GRO)
  }
  
  static int geneve_hlen(struct genevehdr *gh)
@@@ -451,16 -553,25 +464,31 @@@ static struct geneve_sock *geneve_socke
  
  static void geneve_notify_del_rx_port(struct geneve_sock *gs)
  {
 -	struct net_device *dev;
  	struct sock *sk = gs->sock->sk;
++<<<<<<< HEAD
 +	sa_family_t sa_family = sk->sk_family;
 +
 +	if (sa_family == AF_INET)
 +		udp_del_offload(&gs->udp_offloads);
++=======
+ 	struct net *net = sock_net(sk);
+ 	sa_family_t sa_family = geneve_get_sk_family(gs);
+ 	__be16 port = inet_sk(sk)->inet_sport;
+ 
+ 	rcu_read_lock();
+ 	for_each_netdev_rcu(net, dev) {
+ 		if (dev->netdev_ops->ndo_del_geneve_port)
+ 			dev->netdev_ops->ndo_del_geneve_port(dev, sa_family,
+ 							     port);
+ 	}
+ 
+ 	rcu_read_unlock();
++>>>>>>> 4a0090a98e5f (geneve: change to use UDP socket GRO)
  }
  
 -static void __geneve_sock_release(struct geneve_sock *gs)
 +static void geneve_sock_release(struct geneve_sock *gs)
  {
 -	if (!gs || --gs->refcnt)
 +	if (--gs->refcnt)
  		return;
  
  	list_del(&gs->list);
* Unmerged path drivers/net/geneve.c
