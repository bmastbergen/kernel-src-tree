net: add RCU variant to search for netdev_adjacent link

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [net] add RCU variant to search for netdev_adjacent link (Ivan Vecera) [1268334]
Rebuild_FUZZ: 95.24%
commit-author Veaceslav Falico <vfalico@redhat.com>
commit 5249dec7380cb64928d2ae6201028b4da1dceb1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/5249dec7.failed

Currently we have only the RTNL flavour, however we can traverse it while
holding only RCU, so add the RCU search. Add an RCU variant that uses
list_head * as an argument, so that it can be universally used afterwards.

CC: "David S. Miller" <davem@davemloft.net>
CC: Eric Dumazet <edumazet@google.com>
CC: Jiri Pirko <jiri@resnulli.us>
CC: Alexander Duyck <alexander.h.duyck@intel.com>
CC: Cong Wang <amwang@redhat.com>
	Signed-off-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5249dec7380cb64928d2ae6201028b4da1dceb1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 004e3f31d664,9290f09cdf26..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -4498,53 -4369,39 +4498,72 @@@ softnet_break
  
  struct netdev_adjacent {
  	struct net_device *dev;
 -
 -	/* upper master flag, there can only be one master device per list */
  	bool master;
 -
 -	/* counter for the number of times this device was added to us */
 -	u16 ref_nr;
 -
  	struct list_head list;
  	struct rcu_head rcu;
 +	struct list_head search_list;
  };
  
++<<<<<<< HEAD
 +static void __append_search_uppers(struct list_head *search_list,
 +				   struct net_device *dev)
++=======
+ static struct netdev_adjacent *__netdev_find_adj_rcu(struct net_device *dev,
+ 						     struct net_device *adj_dev,
+ 						     struct list_head *adj_list)
+ {
+ 	struct netdev_adjacent *adj;
+ 
+ 	list_for_each_entry_rcu(adj, adj_list, list) {
+ 		if (adj->dev == adj_dev)
+ 			return adj;
+ 	}
+ 	return NULL;
+ }
+ 
+ static struct netdev_adjacent *__netdev_find_adj(struct net_device *dev,
+ 						 struct net_device *adj_dev,
+ 						 struct list_head *adj_list)
++>>>>>>> 5249dec7380c (net: add RCU variant to search for netdev_adjacent link)
  {
 -	struct netdev_adjacent *adj;
 +	struct netdev_adjacent *upper;
  
 -	list_for_each_entry(adj, adj_list, list) {
 -		if (adj->dev == adj_dev)
 -			return adj;
 +	list_for_each_entry(upper, &dev->upper_dev_list, list) {
 +		/* check if this upper is not already in search list */
 +		if (list_empty(&upper->search_list))
 +			list_add_tail(&upper->search_list, search_list);
 +	}
 +}
 +
 +static bool __netdev_search_upper_dev(struct net_device *dev,
 +				      struct net_device *upper_dev)
 +{
 +	LIST_HEAD(search_list);
 +	struct netdev_adjacent *upper;
 +	struct netdev_adjacent *tmp;
 +	bool ret = false;
 +
 +	__append_search_uppers(&search_list, dev);
 +	list_for_each_entry(upper, &search_list, search_list) {
 +		if (upper->dev == upper_dev) {
 +			ret = true;
 +			break;
 +		}
 +		__append_search_uppers(&search_list, upper->dev);
 +	}
 +	list_for_each_entry_safe(upper, tmp, &search_list, search_list)
 +		INIT_LIST_HEAD(&upper->search_list);
 +	return ret;
 +}
 +
 +static struct netdev_adjacent *__netdev_find_upper(struct net_device *dev,
 +						struct net_device *upper_dev)
 +{
 +	struct netdev_adjacent *upper;
 +
 +	list_for_each_entry(upper, &dev->upper_dev_list, list) {
 +		if (upper->dev == upper_dev)
 +			return upper;
  	}
  	return NULL;
  }
* Unmerged path net/core/dev.c
