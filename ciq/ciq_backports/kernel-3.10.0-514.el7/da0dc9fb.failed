megaraid_sas: fix whitespace errors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit da0dc9fb4e6b0ad5a947c27a3c48985f6a2377eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/da0dc9fb.failed

Fix whitespace and indentation errors.  No code change.

[jejb: checkpatch fixes]
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Acked-by: Sumit Saxena <sumit.saxena@avagotech.com>
	Signed-off-by: James Bottomley <JBottomley@Odin.com>
(cherry picked from commit da0dc9fb4e6b0ad5a947c27a3c48985f6a2377eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_base.c
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index c8956dd033bb,eaa81e552fd2..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -821,10 -835,10 +835,10 @@@ megasas_adp_reset_gen2(struct megasas_i
  
  	HostDiag = (u32)readl(hostdiag_offset);
  
- 	while ( !( HostDiag & DIAG_WRITE_ENABLE) ) {
+ 	while (!(HostDiag & DIAG_WRITE_ENABLE)) {
  		msleep(100);
  		HostDiag = (u32)readl(hostdiag_offset);
 -		dev_notice(&instance->pdev->dev, "RESETGEN2: retry=%x, hostdiag=%x\n",
 +		printk(KERN_NOTICE "RESETGEN2: retry=%x, hostdiag=%x\n",
  					retry, HostDiag);
  
  		if (retry++ >= 100)
@@@ -839,10 -853,10 +853,10 @@@
  	ssleep(10);
  
  	HostDiag = (u32)readl(hostdiag_offset);
- 	while ( ( HostDiag & DIAG_RESET_ADAPTER) ) {
+ 	while (HostDiag & DIAG_RESET_ADAPTER) {
  		msleep(100);
  		HostDiag = (u32)readl(hostdiag_offset);
 -		dev_notice(&instance->pdev->dev, "RESET_GEN2: retry=%x, hostdiag=%x\n",
 +		printk(KERN_NOTICE "RESET_GEN2: retry=%x, hostdiag=%x\n",
  				retry, HostDiag);
  
  		if (retry++ >= 1000)
@@@ -1449,19 -1463,19 +1463,19 @@@ megasas_dump_pending_frames(struct mega
  	u32 sgcount;
  	u32 max_cmd = instance->max_fw_cmds;
  
 -	dev_err(&instance->pdev->dev, "[%d]: Dumping Frame Phys Address of all pending cmds in FW\n",instance->host->host_no);
 -	dev_err(&instance->pdev->dev, "[%d]: Total OS Pending cmds : %d\n",instance->host->host_no,atomic_read(&instance->fw_outstanding));
 +	printk(KERN_ERR "\nmegasas[%d]: Dumping Frame Phys Address of all pending cmds in FW\n",instance->host->host_no);
 +	printk(KERN_ERR "megasas[%d]: Total OS Pending cmds : %d\n",instance->host->host_no,atomic_read(&instance->fw_outstanding));
  	if (IS_DMA64)
 -		dev_err(&instance->pdev->dev, "[%d]: 64 bit SGLs were sent to FW\n",instance->host->host_no);
 +		printk(KERN_ERR "\nmegasas[%d]: 64 bit SGLs were sent to FW\n",instance->host->host_no);
  	else
 -		dev_err(&instance->pdev->dev, "[%d]: 32 bit SGLs were sent to FW\n",instance->host->host_no);
 +		printk(KERN_ERR "\nmegasas[%d]: 32 bit SGLs were sent to FW\n",instance->host->host_no);
  
 -	dev_err(&instance->pdev->dev, "[%d]: Pending OS cmds in FW : \n",instance->host->host_no);
 +	printk(KERN_ERR "megasas[%d]: Pending OS cmds in FW : \n",instance->host->host_no);
  	for (i = 0; i < max_cmd; i++) {
  		cmd = instance->cmd_list[i];
- 		if(!cmd->scmd)
+ 		if (!cmd->scmd)
  			continue;
 -		dev_err(&instance->pdev->dev, "[%d]: Frame addr :0x%08lx : ",instance->host->host_no,(unsigned long)cmd->frame_phys_addr);
 +		printk(KERN_ERR "megasas[%d]: Frame addr :0x%08lx : ",instance->host->host_no,(unsigned long)cmd->frame_phys_addr);
  		if (megasas_cmd_type(cmd->scmd) == READ_WRITE_LDIO) {
  			ldio = (struct megasas_io_frame *)cmd->frame;
  			mfi_sgl = &ldio->sgl;
@@@ -1482,30 -1495,28 +1495,48 @@@
  			pthru->lun, pthru->cdb_len, le32_to_cpu(pthru->data_xfer_len),
  			le32_to_cpu(pthru->sense_buf_phys_addr_lo), sgcount);
  		}
++<<<<<<< HEAD
 +	if(megasas_dbg_lvl & MEGASAS_DBG_LVL){
 +		for (n = 0; n < sgcount; n++){
 +			if (IS_DMA64)
 +				printk(KERN_ERR "megasas: sgl len : 0x%x, sgl addr : 0x%llx ",
 +					le32_to_cpu(mfi_sgl->sge64[n].length),
 +					le64_to_cpu(mfi_sgl->sge64[n].phys_addr));
 +			else
 +				printk(KERN_ERR "megasas: sgl len : 0x%x, sgl addr : 0x%x ",
 +					le32_to_cpu(mfi_sgl->sge32[n].length),
 +					le32_to_cpu(mfi_sgl->sge32[n].phys_addr));
++=======
+ 		if (megasas_dbg_lvl & MEGASAS_DBG_LVL) {
+ 			for (n = 0; n < sgcount; n++) {
+ 				if (IS_DMA64)
+ 					dev_err(&instance->pdev->dev, "sgl len : 0x%x, sgl addr : 0x%llx\n",
+ 						le32_to_cpu(mfi_sgl->sge64[n].length),
+ 						le64_to_cpu(mfi_sgl->sge64[n].phys_addr));
+ 				else
+ 					dev_err(&instance->pdev->dev, "sgl len : 0x%x, sgl addr : 0x%x\n",
+ 						le32_to_cpu(mfi_sgl->sge32[n].length),
+ 						le32_to_cpu(mfi_sgl->sge32[n].phys_addr));
++>>>>>>> da0dc9fb4e6b (megaraid_sas: fix whitespace errors)
  			}
  		}
 +		printk(KERN_ERR "\n");
  	} /*for max_cmd*/
 -	dev_err(&instance->pdev->dev, "[%d]: Pending Internal cmds in FW : \n",instance->host->host_no);
 +	printk(KERN_ERR "\nmegasas[%d]: Pending Internal cmds in FW : \n",instance->host->host_no);
  	for (i = 0; i < max_cmd; i++) {
  
  		cmd = instance->cmd_list[i];
  
++<<<<<<< HEAD
 +		if(cmd->sync_cmd == 1){
 +			printk(KERN_ERR "0x%08lx : ", (unsigned long)cmd->frame_phys_addr);
 +		}
++=======
+ 		if (cmd->sync_cmd == 1)
+ 			dev_err(&instance->pdev->dev, "0x%08lx : ", (unsigned long)cmd->frame_phys_addr);
++>>>>>>> da0dc9fb4e6b (megaraid_sas: fix whitespace errors)
  	}
 -	dev_err(&instance->pdev->dev, "[%d]: Dumping Done\n\n",instance->host->host_no);
 +	printk(KERN_ERR "megasas[%d]: Dumping Done.\n\n",instance->host->host_no);
  }
  
  u32
@@@ -2290,9 -2295,9 +2321,9 @@@ static int megasas_wait_for_outstanding
  		}
  
  		if (adprecovery != MEGASAS_HBA_OPERATIONAL) {
 -			dev_notice(&instance->pdev->dev, "reset: Stopping HBA.\n");
 +			printk(KERN_NOTICE "megasas: reset: Stopping HBA.\n");
  			spin_lock_irqsave(&instance->hba_lock, flags);
- 			instance->adprecovery	= MEGASAS_HW_CRITICAL_ERROR;
+ 			instance->adprecovery = MEGASAS_HW_CRITICAL_ERROR;
  			spin_unlock_irqrestore(&instance->hba_lock, flags);
  			return FAILED;
  		}
@@@ -2389,11 -2391,11 +2417,11 @@@
  
  	if (atomic_read(&instance->fw_outstanding) ||
  					(kill_adapter_flag == 2)) {
 -		dev_notice(&instance->pdev->dev, "pending cmds after reset\n");
 +		printk(KERN_NOTICE "megaraid_sas: pending cmds after reset\n");
  		/*
- 		* Send signal to FW to stop processing any pending cmds.
- 		* The controller will be taken offline by the OS now.
- 		*/
+ 		 * Send signal to FW to stop processing any pending cmds.
+ 		 * The controller will be taken offline by the OS now.
+ 		 */
  		if ((instance->pdev->device ==
  			PCI_DEVICE_ID_LSI_SAS0073SKINNY) ||
  			(instance->pdev->device ==
@@@ -2600,9 -2600,10 +2627,10 @@@ megasas_service_aen(struct megasas_inst
  	if ((instance->unload == 0) &&
  		((instance->issuepend_done == 1))) {
  		struct megasas_aen_event *ev;
+ 
  		ev = kzalloc(sizeof(*ev), GFP_ATOMIC);
  		if (!ev) {
 -			dev_err(&instance->pdev->dev, "megasas_service_aen: out of memory\n");
 +			printk(KERN_ERR "megasas_service_aen: out of memory\n");
  		} else {
  			ev->instance = instance;
  			instance->ev = ev;
@@@ -3075,10 -3059,10 +3101,10 @@@ megasas_issue_pending_cmds_again(struc
  						"issue it again.\n", cmd);
  			cmd->cmd_status_drv = MFI_STAT_INVALID_STATUS;
  			instance->instancet->fire_cmd(instance,
- 							cmd->frame_phys_addr ,
+ 							cmd->frame_phys_addr,
  							0, instance->reg_set);
  		} else if (cmd->scmd) {
 -			dev_notice(&instance->pdev->dev, "%p scsi cmd [%02x]"
 +			printk(KERN_NOTICE "megasas: %p scsi cmd [%02x]"
  			"detected on the internal queue, issue again.\n",
  			cmd, cmd->scmd->cmnd[0]);
  
@@@ -3094,10 -3078,10 +3120,10 @@@
  	}
  
  	if (instance->aen_cmd) {
 -		dev_notice(&instance->pdev->dev, "aen_cmd in def process\n");
 +		printk(KERN_NOTICE "megaraid_sas: aen_cmd in def process\n");
  		megasas_return_cmd(instance, instance->aen_cmd);
  
- 		instance->aen_cmd	= NULL;
+ 		instance->aen_cmd = NULL;
  	}
  
  	/*
@@@ -3178,15 -3162,15 +3204,15 @@@ process_fw_state_change_wq(struct work_
  
  		atomic_set(&instance->fw_reset_no_pci_access, 1);
  		instance->instancet->adp_reset(instance, instance->reg_set);
- 		atomic_set(&instance->fw_reset_no_pci_access, 0 );
+ 		atomic_set(&instance->fw_reset_no_pci_access, 0);
  
 -		dev_notice(&instance->pdev->dev, "FW restarted successfully,"
 +		printk(KERN_NOTICE "megaraid_sas: FW restarted successfully,"
  					"initiating next stage...\n");
  
 -		dev_notice(&instance->pdev->dev, "HBA recovery state machine,"
 +		printk(KERN_NOTICE "megaraid_sas: HBA recovery state machine,"
  					"state 2 starting...\n");
  
- 		/*waitting for about 20 second before start the second init*/
+ 		/* waiting for about 20 second before start the second init */
  		for (wait = 0; wait < 30; wait++) {
  			msleep(1000);
  		}
@@@ -4669,18 -4646,20 +4691,17 @@@ static int megasas_init_fw(struct megas
  	if (instance->instancet->init_adapter(instance))
  		goto fail_init_adapter;
  
 -	tasklet_init(&instance->isr_tasklet, instance->instancet->tasklet,
 -		(unsigned long)instance);
 -
  	instance->instancet->enable_intr(instance);
  
 -	dev_err(&instance->pdev->dev, "INIT adapter done\n");
 +	printk(KERN_ERR "megasas: INIT adapter done\n");
  
  	/** for passthrough
- 	* the following function will get the PD LIST.
- 	*/
- 
- 	memset(instance->pd_list, 0 ,
+ 	 * the following function will get the PD LIST.
+ 	 */
+ 	memset(instance->pd_list, 0,
  		(MEGASAS_MAX_PD * sizeof(struct megasas_pd_list)));
  	if (megasas_get_pd_list(instance) < 0) {
 -		dev_err(&instance->pdev->dev, "failed to get PD list\n");
 +		printk(KERN_ERR "megasas: failed to get PD list\n");
  		goto fail_get_pd_list;
  	}
  
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
