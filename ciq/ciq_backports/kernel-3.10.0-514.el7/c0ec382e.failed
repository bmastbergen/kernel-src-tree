x86/RAS: Remove mce.usable_addr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] ras: Remove mce.usable_addr (Prarit Bhargava) [1301710]
Rebuild_FUZZ: 93.10%
commit-author Borislav Petkov <bp@suse.de>
commit c0ec382e1928402031e754ad0391ecbdabb18c43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/c0ec382e.failed

It is useless and we can use the function instead. Besides,
mcelog(8) hasn't managed to make use of it yet. So kill it.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Acked-by: Tony Luck <tony.luck@intel.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1448350880-5573-3-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit c0ec382e1928402031e754ad0391ecbdabb18c43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mcheck/mce.c
diff --cc arch/x86/kernel/cpu/mcheck/mce.c
index d16e95b8ee4c,fb8b1db7b150..000000000000
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@@ -549,9 -472,30 +549,33 @@@ static void mce_report_event(struct pt_
  		return;
  	}
  
 -	irq_work_queue(&mce_irq_work);
 +	irq_work_queue(&__get_cpu_var(mce_irq_work));
  }
  
++<<<<<<< HEAD
++=======
+ static int srao_decode_notifier(struct notifier_block *nb, unsigned long val,
+ 				void *data)
+ {
+ 	struct mce *mce = (struct mce *)data;
+ 	unsigned long pfn;
+ 
+ 	if (!mce)
+ 		return NOTIFY_DONE;
+ 
+ 	if (mce_usable_address(mce) && (mce->severity == MCE_AO_SEVERITY)) {
+ 		pfn = mce->addr >> PAGE_SHIFT;
+ 		memory_failure(pfn, MCE_VECTOR, 0);
+ 	}
+ 
+ 	return NOTIFY_OK;
+ }
+ static struct notifier_block mce_srao_nb = {
+ 	.notifier_call	= srao_decode_notifier,
+ 	.priority = INT_MAX,
+ };
+ 
++>>>>>>> c0ec382e1928 (x86/RAS: Remove mce.usable_addr)
  /*
   * Read ADDR and MISC registers.
   */
@@@ -664,24 -610,24 +688,41 @@@ bool machine_check_poll(enum mcp_flags 
  
  		severity = mce_severity(&m, mca_cfg.tolerant, NULL, false);
  
++<<<<<<< HEAD
 +		/*
 +		 * In the cases where we don't have a valid address after all,
 +		 * do not add it into the ring buffer.
 +		 */
 +		if (severity == MCE_DEFERRED_SEVERITY && memory_error(&m)) {
 +			if (m.status & MCI_STATUS_ADDRV) {
 +				mce_ring_add(m.addr >> PAGE_SHIFT);
 +				mce_schedule_work();
 +			}
 +		}
++=======
+ 		if (severity == MCE_DEFERRED_SEVERITY && memory_error(&m))
+ 			if (m.status & MCI_STATUS_ADDRV)
+ 				m.severity = severity;
++>>>>>>> c0ec382e1928 (x86/RAS: Remove mce.usable_addr)
  
  		/*
  		 * Don't get the IP here because it's unlikely to
  		 * have anything to do with the actual error location.
  		 */
 -		if (!(flags & MCP_DONTLOG) && !mca_cfg.dont_log_ce)
 +		if (!(flags & MCP_DONTLOG) && !mca_cfg.dont_log_ce) {
 +			error_logged = true;
  			mce_log(&m);
++<<<<<<< HEAD
++=======
+ 		else if (mce_usable_address(&m)) {
+ 			/*
+ 			 * Although we skipped logging this, we still want
+ 			 * to take action. Add to the pool so the registered
+ 			 * notifiers will see it.
+ 			 */
+ 			if (!mce_gen_pool_add(&m))
+ 				mce_schedule_work();
++>>>>>>> c0ec382e1928 (x86/RAS: Remove mce.usable_addr)
  		}
  
  		/*
@@@ -1138,15 -1086,8 +1179,20 @@@ void do_machine_check(struct pt_regs *r
  
  		mce_read_aux(&m, i);
  
++<<<<<<< HEAD
 +		/*
 +		 * Action optional error. Queue address for later processing.
 +		 * When the ring overflows we just ignore the AO error.
 +		 * RED-PEN add some logging mechanism when
 +		 * usable_address or mce_add_ring fails.
 +		 * RED-PEN don't ignore overflow for mca_cfg.tolerant == 0
 +		 */
 +		if (severity == MCE_AO_SEVERITY && mce_usable_address(&m))
 +			mce_ring_add(m.addr >> PAGE_SHIFT);
++=======
+ 		/* assuming valid severity level != 0 */
+ 		m.severity = severity;
++>>>>>>> c0ec382e1928 (x86/RAS: Remove mce.usable_addr)
  
  		mce_log(&m);
  
diff --git a/arch/x86/include/uapi/asm/mce.h b/arch/x86/include/uapi/asm/mce.h
index 76880ede9a35..c250700ab6b2 100644
--- a/arch/x86/include/uapi/asm/mce.h
+++ b/arch/x86/include/uapi/asm/mce.h
@@ -16,7 +16,7 @@ struct mce {
 	__u8  cpuvendor;	/* cpu vendor as encoded in system.h */
 	__u8  inject_flags;	/* software inject flags */
 	__u8  severity;
-	__u8  usable_addr;
+	__u8  pad;
 	__u32 cpuid;	/* CPUID 1 EAX */
 	__u8  cs;		/* code segment */
 	__u8  bank;	/* machine check bank */
* Unmerged path arch/x86/kernel/cpu/mcheck/mce.c
