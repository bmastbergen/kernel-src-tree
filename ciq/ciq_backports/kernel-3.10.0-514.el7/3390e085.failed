PCI: Export pci_find_host_bridge() for use inside PCI core

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [pci] Export pci_find_host_bridge() for use inside PCI core (Rui Wang) [1225272]
Rebuild_FUZZ: 95.50%
commit-author Aaron Lu <aaron.lu@intel.com>
commit 3390e0850b711d163b35508464cfbe0a4477dfe2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/3390e085.failed

The find_pci_host_bridge() function can be useful to other PCI code so
export it.  Change its name to pci_find_host_bridge().

	Signed-off-by: Aaron Lu <aaron.lu@intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 3390e0850b711d163b35508464cfbe0a4477dfe2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/host-bridge.c
diff --cc drivers/pci/host-bridge.c
index 0e5f3c95af5b,30211c617400..000000000000
--- a/drivers/pci/host-bridge.c
+++ b/drivers/pci/host-bridge.c
@@@ -34,11 -34,11 +34,16 @@@ void pci_set_host_bridge_release(struc
  void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
  			     struct resource *res)
  {
++<<<<<<< HEAD
 +	struct pci_host_bridge *bridge = find_pci_host_bridge(bus);
 +	struct pci_host_bridge_window *window;
++=======
+ 	struct pci_host_bridge *bridge = pci_find_host_bridge(bus);
+ 	struct resource_entry *window;
++>>>>>>> 3390e0850b71 (PCI: Export pci_find_host_bridge() for use inside PCI core)
  	resource_size_t offset = 0;
  
 -	resource_list_for_each_entry(window, &bridge->windows) {
 +	list_for_each_entry(window, &bridge->windows, list) {
  		if (resource_contains(window->res, res)) {
  			offset = window->offset;
  			break;
@@@ -59,11 -59,11 +64,16 @@@ static bool region_contains(struct pci_
  void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
  			     struct pci_bus_region *region)
  {
++<<<<<<< HEAD
 +	struct pci_host_bridge *bridge = find_pci_host_bridge(bus);
 +	struct pci_host_bridge_window *window;
++=======
+ 	struct pci_host_bridge *bridge = pci_find_host_bridge(bus);
+ 	struct resource_entry *window;
++>>>>>>> 3390e0850b71 (PCI: Export pci_find_host_bridge() for use inside PCI core)
  	resource_size_t offset = 0;
  
 -	resource_list_for_each_entry(window, &bridge->windows) {
 +	list_for_each_entry(window, &bridge->windows, list) {
  		struct pci_bus_region bus_region;
  
  		if (resource_type(res) != resource_type(window->res))
* Unmerged path drivers/pci/host-bridge.c
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index bf6df3e3800e..4a2a7a54cd91 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -305,4 +305,6 @@ static inline int pci_dev_specific_reset(struct pci_dev *dev, int probe)
 }
 #endif
 
+struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *bus);
+
 #endif /* DRIVERS_PCI_H */
