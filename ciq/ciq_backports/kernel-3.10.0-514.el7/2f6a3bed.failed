zram: export new 'io_stat' sysfs attrs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
commit 2f6a3bed7347ee94fe57b3501fddaa646a26d890
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/2f6a3bed.failed

Per-device `zram<id>/io_stat' file provides accumulated I/O statistics of
particular zram device in a format similar to block layer statistics.  The
file consists of a single line and represents the following stats
(separated by whitespace):

        failed_reads
        failed_writes
        invalid_io
        notify_free

	Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
	Cc: Nitin Gupta <ngupta@vflare.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2f6a3bed7347ee94fe57b3501fddaa646a26d890)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-block-zram
diff --cc Documentation/ABI/testing/sysfs-block-zram
index b13dc993291f,a7f622f9bcf6..000000000000
--- a/Documentation/ABI/testing/sysfs-block-zram
+++ b/Documentation/ABI/testing/sysfs-block-zram
@@@ -138,3 -141,20 +138,23 @@@ Description
  		amount of memory ZRAM can use to store the compressed data.  The
  		limit could be changed in run time and "0" means disable the
  		limit.  No limit is the initial state.  Unit: bytes
++<<<<<<< HEAD
++=======
+ 
+ What:		/sys/block/zram<id>/compact
+ Date:		August 2015
+ Contact:	Minchan Kim <minchan@kernel.org>
+ Description:
+ 		The compact file is write-only and trigger compaction for
+ 		allocator zrm uses. The allocator moves some objects so that
+ 		it could free fragment space.
+ 
+ What:		/sys/block/zram<id>/io_stat
+ Date:		August 2015
+ Contact:	Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
+ Description:
+ 		The io_stat file is read-only and accumulates device's I/O
+ 		statistics not accounted by block layer. For example,
+ 		failed_reads, failed_writes, etc. File format is similar to
+ 		block layer statistics file format.
++>>>>>>> 2f6a3bed7347 (zram: export new 'io_stat' sysfs attrs)
* Unmerged path Documentation/ABI/testing/sysfs-block-zram
diff --git a/Documentation/blockdev/zram.txt b/Documentation/blockdev/zram.txt
index 7fcf9c6592ec..fc94e1aa056e 100644
--- a/Documentation/blockdev/zram.txt
+++ b/Documentation/blockdev/zram.txt
@@ -113,6 +113,17 @@ size of the disk when not in use so a huge zram is wasteful.
 		mem_used_total
 		mem_used_max
 
+File /sys/block/zram<id>/io_stat
+
+The stat file represents device's I/O statistics not accounted by block
+layer and, thus, not available in zram<id>/stat file. It consists of a
+single line of text and contains the following stats separated by
+whitespace:
+	failed_reads
+	failed_writes
+	invalid_io
+	notify_free
+
 8) Deactivate:
 	swapoff /dev/zram0
 	umount /dev/zram1
diff --git a/drivers/block/zram/zram_drv.c b/drivers/block/zram/zram_drv.c
index b06bd0b2bf3d..ae2139ffab72 100644
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@ -896,6 +896,25 @@ static DEVICE_ATTR_RW(mem_used_max);
 static DEVICE_ATTR_RW(max_comp_streams);
 static DEVICE_ATTR_RW(comp_algorithm);
 
+static ssize_t io_stat_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct zram *zram = dev_to_zram(dev);
+	ssize_t ret;
+
+	down_read(&zram->init_lock);
+	ret = scnprintf(buf, PAGE_SIZE,
+			"%8llu %8llu %8llu %8llu\n",
+			(u64)atomic64_read(&zram->stats.failed_reads),
+			(u64)atomic64_read(&zram->stats.failed_writes),
+			(u64)atomic64_read(&zram->stats.invalid_io),
+			(u64)atomic64_read(&zram->stats.notify_free));
+	up_read(&zram->init_lock);
+
+	return ret;
+}
+
+static DEVICE_ATTR_RO(io_stat);
 ZRAM_ATTR_RO(num_reads);
 ZRAM_ATTR_RO(num_writes);
 ZRAM_ATTR_RO(failed_reads);
@@ -923,6 +942,7 @@ static struct attribute *zram_disk_attrs[] = {
 	&dev_attr_mem_used_max.attr,
 	&dev_attr_max_comp_streams.attr,
 	&dev_attr_comp_algorithm.attr,
+	&dev_attr_io_stat.attr,
 	NULL,
 };
 
