iser-target: Port to new memory registration API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Sagi Grimberg <sagig@mellanox.com>
commit 16c2d702f2c76892f47944a53d9e1ce42023046d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/16c2d702.failed

Remove fastreg page list allocation as the page vector
is now private to the provider. Instead of constructing
the page list and fast_req work request, call ib_map_mr_sg
and construct ib_reg_wr.

	Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
	Acked-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 16c2d702f2c76892f47944a53d9e1ce42023046d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/isert/ib_isert.c
diff --cc drivers/infiniband/ulp/isert/ib_isert.c
index 4c4377e82d94,dfbbbb28090b..000000000000
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@@ -538,11 -527,9 +527,15 @@@ isert_create_pi_ctx(struct fast_reg_des
  	return 0;
  
  err_prot_mr:
++<<<<<<< HEAD
 +	ib_dereg_mr(desc->pi_ctx->prot_mr);
 +err_prot_frpl:
 +	ib_free_fast_reg_page_list(desc->pi_ctx->prot_frpl);
++=======
+ 	ib_dereg_mr(pi_ctx->prot_mr);
++>>>>>>> 16c2d702f2c7 (iser-target: Port to new memory registration API)
  err_pi_ctx:
 -	kfree(pi_ctx);
 +	kfree(desc->pi_ctx);
  
  	return ret;
  }
@@@ -2602,11 -2530,9 +2540,17 @@@ isert_fast_reg_mr(struct isert_conn *is
  	struct isert_device *device = isert_conn->device;
  	struct ib_device *ib_dev = device->ib_device;
  	struct ib_mr *mr;
++<<<<<<< HEAD
 +	struct ib_fast_reg_page_list *frpl;
 +	struct ib_send_wr fr_wr, inv_wr;
 +	struct ib_send_wr *bad_wr, *wr = NULL;
 +	int ret, pagelist_len;
 +	u32 page_off;
++=======
+ 	struct ib_reg_wr reg_wr;
+ 	struct ib_send_wr inv_wr, *bad_wr, *wr = NULL;
+ 	int ret, n;
++>>>>>>> 16c2d702f2c7 (iser-target: Port to new memory registration API)
  
  	if (mem->dma_nents == 1) {
  		sge->lkey = device->pd->local_dma_lkey;
@@@ -2640,22 -2555,29 +2573,48 @@@
  		wr = &inv_wr;
  	}
  
++<<<<<<< HEAD
 +	/* Prepare FASTREG WR */
 +	memset(&fr_wr, 0, sizeof(fr_wr));
 +	fr_wr.wr_id = ISER_FASTREG_LI_WRID;
 +	fr_wr.opcode = IB_WR_FAST_REG_MR;
 +	fr_wr.wr.fast_reg.iova_start = frpl->page_list[0] + page_off;
 +	fr_wr.wr.fast_reg.page_list = frpl;
 +	fr_wr.wr.fast_reg.page_list_len = pagelist_len;
 +	fr_wr.wr.fast_reg.page_shift = PAGE_SHIFT;
 +	fr_wr.wr.fast_reg.length = mem->len;
 +	fr_wr.wr.fast_reg.rkey = mr->rkey;
 +	fr_wr.wr.fast_reg.access_flags = IB_ACCESS_LOCAL_WRITE;
 +
 +	if (!wr)
 +		wr = &fr_wr;
 +	else
 +		wr->next = &fr_wr;
++=======
+ 	n = ib_map_mr_sg(mr, mem->sg, mem->nents, PAGE_SIZE);
+ 	if (unlikely(n != mem->nents)) {
+ 		isert_err("failed to map mr sg (%d/%d)\n",
+ 			 n, mem->nents);
+ 		return n < 0 ? n : -EINVAL;
+ 	}
+ 
+ 	isert_dbg("Use fr_desc %p sg_nents %d offset %u\n",
+ 		  fr_desc, mem->nents, mem->offset);
+ 
+ 	reg_wr.wr.next = NULL;
+ 	reg_wr.wr.opcode = IB_WR_REG_MR;
+ 	reg_wr.wr.wr_id = ISER_FASTREG_LI_WRID;
+ 	reg_wr.wr.send_flags = 0;
+ 	reg_wr.wr.num_sge = 0;
+ 	reg_wr.mr = mr;
+ 	reg_wr.key = mr->lkey;
+ 	reg_wr.access = IB_ACCESS_LOCAL_WRITE;
+ 
+ 	if (!wr)
+ 		wr = &reg_wr.wr;
+ 	else
+ 		wr->next = &reg_wr.wr;
++>>>>>>> 16c2d702f2c7 (iser-target: Port to new memory registration API)
  
  	ret = ib_post_send(isert_conn->qp, wr, &bad_wr);
  	if (ret) {
* Unmerged path drivers/infiniband/ulp/isert/ib_isert.c
diff --git a/drivers/infiniband/ulp/isert/ib_isert.h b/drivers/infiniband/ulp/isert/ib_isert.h
index 6f7db3ebfd35..db94c27aef7d 100644
--- a/drivers/infiniband/ulp/isert/ib_isert.h
+++ b/drivers/infiniband/ulp/isert/ib_isert.h
@@ -84,14 +84,12 @@ enum isert_indicator {
 
 struct pi_context {
 	struct ib_mr		       *prot_mr;
-	struct ib_fast_reg_page_list   *prot_frpl;
 	struct ib_mr		       *sig_mr;
 };
 
 struct fast_reg_descriptor {
 	struct list_head		list;
 	struct ib_mr		       *data_mr;
-	struct ib_fast_reg_page_list   *data_frpl;
 	u8				ind;
 	struct pi_context	       *pi_ctx;
 };
