mmc: Consolidate emmc tuning blocks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Stephen Boyd <sboyd@codeaurora.org>
commit 48d11e067fc90ec9fc9c8f7ab982e5a83bf1887b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/48d11e06.failed

The same tuning block exists in the dw_mmc h.c and sdhci-msm.c
files. Move these into mmc.c so that they can be shared across
drivers.

	Reported-by: Jaehoon Chung <jh80.chung@samsung.com>
	Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 48d11e067fc90ec9fc9c8f7ab982e5a83bf1887b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/mmc.c
#	drivers/mmc/host/dw_mmc.c
#	drivers/mmc/host/sdhci-msm.c
diff --cc drivers/mmc/core/mmc.c
index b5e112ab86f3,6390787fb32a..000000000000
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@@ -910,6 -1142,106 +910,109 @@@ err
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Activate High Speed or HS200 mode if supported.
+  */
+ static int mmc_select_timing(struct mmc_card *card)
+ {
+ 	int err = 0;
+ 
+ 	if ((card->csd.mmca_vsn < CSD_SPEC_VER_4 &&
+ 	     card->ext_csd.hs_max_dtr == 0))
+ 		goto bus_speed;
+ 
+ 	if (card->mmc_avail_type & EXT_CSD_CARD_TYPE_HS200)
+ 		err = mmc_select_hs200(card);
+ 	else if (card->mmc_avail_type & EXT_CSD_CARD_TYPE_HS)
+ 		err = mmc_select_hs(card);
+ 
+ 	if (err && err != -EBADMSG)
+ 		return err;
+ 
+ 	if (err) {
+ 		pr_warn("%s: switch to %s failed\n",
+ 			mmc_card_hs(card) ? "high-speed" :
+ 			(mmc_card_hs200(card) ? "hs200" : ""),
+ 			mmc_hostname(card->host));
+ 		err = 0;
+ 	}
+ 
+ bus_speed:
+ 	/*
+ 	 * Set the bus speed to the selected bus timing.
+ 	 * If timing is not selected, backward compatible is the default.
+ 	 */
+ 	mmc_set_bus_speed(card);
+ 	return err;
+ }
+ 
+ const u8 tuning_blk_pattern_4bit[MMC_TUNING_BLK_PATTERN_4BIT_SIZE] = {
+ 	0xff, 0x0f, 0xff, 0x00, 0xff, 0xcc, 0xc3, 0xcc,
+ 	0xc3, 0x3c, 0xcc, 0xff, 0xfe, 0xff, 0xfe, 0xef,
+ 	0xff, 0xdf, 0xff, 0xdd, 0xff, 0xfb, 0xff, 0xfb,
+ 	0xbf, 0xff, 0x7f, 0xff, 0x77, 0xf7, 0xbd, 0xef,
+ 	0xff, 0xf0, 0xff, 0xf0, 0x0f, 0xfc, 0xcc, 0x3c,
+ 	0xcc, 0x33, 0xcc, 0xcf, 0xff, 0xef, 0xff, 0xee,
+ 	0xff, 0xfd, 0xff, 0xfd, 0xdf, 0xff, 0xbf, 0xff,
+ 	0xbb, 0xff, 0xf7, 0xff, 0xf7, 0x7f, 0x7b, 0xde,
+ };
+ EXPORT_SYMBOL(tuning_blk_pattern_4bit);
+ 
+ const u8 tuning_blk_pattern_8bit[MMC_TUNING_BLK_PATTERN_8BIT_SIZE] = {
+ 	0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00,
+ 	0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x33, 0xcc, 0xcc,
+ 	0xcc, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xff, 0xff,
+ 	0xff, 0xee, 0xff, 0xff, 0xff, 0xee, 0xee, 0xff,
+ 	0xff, 0xff, 0xdd, 0xff, 0xff, 0xff, 0xdd, 0xdd,
+ 	0xff, 0xff, 0xff, 0xbb, 0xff, 0xff, 0xff, 0xbb,
+ 	0xbb, 0xff, 0xff, 0xff, 0x77, 0xff, 0xff, 0xff,
+ 	0x77, 0x77, 0xff, 0x77, 0xbb, 0xdd, 0xee, 0xff,
+ 	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00,
+ 	0x00, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x33, 0xcc,
+ 	0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xff,
+ 	0xff, 0xff, 0xee, 0xff, 0xff, 0xff, 0xee, 0xee,
+ 	0xff, 0xff, 0xff, 0xdd, 0xff, 0xff, 0xff, 0xdd,
+ 	0xdd, 0xff, 0xff, 0xff, 0xbb, 0xff, 0xff, 0xff,
+ 	0xbb, 0xbb, 0xff, 0xff, 0xff, 0x77, 0xff, 0xff,
+ 	0xff, 0x77, 0x77, 0xff, 0x77, 0xbb, 0xdd, 0xee,
+ };
+ EXPORT_SYMBOL(tuning_blk_pattern_8bit);
+ 
+ /*
+  * Execute tuning sequence to seek the proper bus operating
+  * conditions for HS200 and HS400, which sends CMD21 to the device.
+  */
+ static int mmc_hs200_tuning(struct mmc_card *card)
+ {
+ 	struct mmc_host *host = card->host;
+ 	int err = 0;
+ 
+ 	/*
+ 	 * Timing should be adjusted to the HS400 target
+ 	 * operation frequency for tuning process
+ 	 */
+ 	if (card->mmc_avail_type & EXT_CSD_CARD_TYPE_HS400 &&
+ 	    host->ios.bus_width == MMC_BUS_WIDTH_8)
+ 		if (host->ops->prepare_hs400_tuning)
+ 			host->ops->prepare_hs400_tuning(host, &host->ios);
+ 
+ 	if (host->ops->execute_tuning) {
+ 		mmc_host_clk_hold(host);
+ 		err = host->ops->execute_tuning(host,
+ 				MMC_SEND_TUNING_BLOCK_HS200);
+ 		mmc_host_clk_release(host);
+ 
+ 		if (err)
+ 			pr_warn("%s: tuning execution failed\n",
+ 				mmc_hostname(host));
+ 	}
+ 
+ 	return err;
+ }
+ 
+ /*
++>>>>>>> 48d11e067fc9 (mmc: Consolidate emmc tuning blocks)
   * Handle the detection and initialisation of a card.
   *
   * In the case of a resume, "oldcard" will contain the card
diff --cc drivers/mmc/host/dw_mmc.c
index 1add727a3cc5,69f0cc68d5b2..000000000000
--- a/drivers/mmc/host/dw_mmc.c
+++ b/drivers/mmc/host/dw_mmc.c
@@@ -71,41 -82,7 +71,45 @@@ struct idmac_desc 
  };
  #endif /* CONFIG_MMC_DW_IDMAC */
  
++<<<<<<< HEAD
 +/**
 + * struct dw_mci_slot - MMC slot state
 + * @mmc: The mmc_host representing this slot.
 + * @host: The MMC controller this slot is using.
 + * @quirks: Slot-level quirks (DW_MCI_SLOT_QUIRK_XXX)
 + * @wp_gpio: If gpio_is_valid() we'll use this to read write protect.
 + * @ctype: Card type for this slot.
 + * @mrq: mmc_request currently being processed or waiting to be
 + *	processed, or NULL when the slot is idle.
 + * @queue_node: List node for placing this node in the @queue list of
 + *	&struct dw_mci.
 + * @clock: Clock rate configured by set_ios(). Protected by host->lock.
 + * @flags: Random state bits associated with the slot.
 + * @id: Number of this slot.
 + * @last_detect_state: Most recently observed card detect state.
 + */
 +struct dw_mci_slot {
 +	struct mmc_host		*mmc;
 +	struct dw_mci		*host;
 +
 +	int			quirks;
 +	int			wp_gpio;
 +
 +	u32			ctype;
 +
 +	struct mmc_request	*mrq;
 +	struct list_head	queue_node;
 +
 +	unsigned int		clock;
 +	unsigned long		flags;
 +#define DW_MMC_CARD_PRESENT	0
 +#define DW_MMC_CARD_NEED_INIT	1
 +	int			id;
 +	int			last_detect_state;
 +};
++=======
+ static bool dw_mci_reset(struct dw_mci *host);
++>>>>>>> 48d11e067fc9 (mmc: Consolidate emmc tuning blocks)
  
  #if defined(CONFIG_DEBUG_FS)
  static int dw_mci_req_show(struct seq_file *s, void *v)
diff --cc drivers/mmc/host/sdhci-msm.c
index 3b0606fe6891,30804385af6d..000000000000
--- a/drivers/mmc/host/sdhci-msm.c
+++ b/drivers/mmc/host/sdhci-msm.c
@@@ -26,6 -27,24 +26,27 @@@
  #define CORE_POWER		0x0
  #define CORE_SW_RST		BIT(7)
  
++<<<<<<< HEAD
++=======
+ #define MAX_PHASES		16
+ #define CORE_DLL_LOCK		BIT(7)
+ #define CORE_DLL_EN		BIT(16)
+ #define CORE_CDR_EN		BIT(17)
+ #define CORE_CK_OUT_EN		BIT(18)
+ #define CORE_CDR_EXT_EN		BIT(19)
+ #define CORE_DLL_PDN		BIT(29)
+ #define CORE_DLL_RST		BIT(30)
+ #define CORE_DLL_CONFIG		0x100
+ #define CORE_DLL_STATUS		0x108
+ 
+ #define CORE_VENDOR_SPEC	0x10c
+ #define CORE_CLK_PWRSAVE	BIT(1)
+ 
+ #define CDR_SELEXT_SHIFT	20
+ #define CDR_SELEXT_MASK		(0xf << CDR_SELEXT_SHIFT)
+ #define CMUX_SHIFT_PHASE_SHIFT	24
+ #define CMUX_SHIFT_PHASE_MASK	(7 << CMUX_SHIFT_PHASE_SHIFT)
++>>>>>>> 48d11e067fc9 (mmc: Consolidate emmc tuning blocks)
  
  struct sdhci_msm_host {
  	struct platform_device *pdev;
@@@ -38,15 -57,387 +59,117 @@@
  };
  
  /* Platform specific tuning */
 -static inline int msm_dll_poll_ck_out_en(struct sdhci_host *host, u8 poll)
 -{
 -	u32 wait_cnt = 50;
 -	u8 ck_out_en;
 -	struct mmc_host *mmc = host->mmc;
 -
 -	/* Poll for CK_OUT_EN bit.  max. poll time = 50us */
 -	ck_out_en = !!(readl_relaxed(host->ioaddr + CORE_DLL_CONFIG) &
 -			CORE_CK_OUT_EN);
 -
 -	while (ck_out_en != poll) {
 -		if (--wait_cnt == 0) {
 -			dev_err(mmc_dev(mmc), "%s: CK_OUT_EN bit is not %d\n",
 -			       mmc_hostname(mmc), poll);
 -			return -ETIMEDOUT;
 -		}
 -		udelay(1);
 -
 -		ck_out_en = !!(readl_relaxed(host->ioaddr + CORE_DLL_CONFIG) &
 -				CORE_CK_OUT_EN);
 -	}
 -
 -	return 0;
 -}
 -
 -static int msm_config_cm_dll_phase(struct sdhci_host *host, u8 phase)
 -{
 -	int rc;
 -	static const u8 grey_coded_phase_table[] = {
 -		0x0, 0x1, 0x3, 0x2, 0x6, 0x7, 0x5, 0x4,
 -		0xc, 0xd, 0xf, 0xe, 0xa, 0xb, 0x9, 0x8
 -	};
 -	unsigned long flags;
 -	u32 config;
 -	struct mmc_host *mmc = host->mmc;
 -
 -	spin_lock_irqsave(&host->lock, flags);
 -
 -	config = readl_relaxed(host->ioaddr + CORE_DLL_CONFIG);
 -	config &= ~(CORE_CDR_EN | CORE_CK_OUT_EN);
 -	config |= (CORE_CDR_EXT_EN | CORE_DLL_EN);
 -	writel_relaxed(config, host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Wait until CK_OUT_EN bit of DLL_CONFIG register becomes '0' */
 -	rc = msm_dll_poll_ck_out_en(host, 0);
 -	if (rc)
 -		goto err_out;
 -
 -	/*
 -	 * Write the selected DLL clock output phase (0 ... 15)
 -	 * to CDR_SELEXT bit field of DLL_CONFIG register.
 -	 */
 -	config = readl_relaxed(host->ioaddr + CORE_DLL_CONFIG);
 -	config &= ~CDR_SELEXT_MASK;
 -	config |= grey_coded_phase_table[phase] << CDR_SELEXT_SHIFT;
 -	writel_relaxed(config, host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Set CK_OUT_EN bit of DLL_CONFIG register to 1. */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			| CORE_CK_OUT_EN), host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Wait until CK_OUT_EN bit of DLL_CONFIG register becomes '1' */
 -	rc = msm_dll_poll_ck_out_en(host, 1);
 -	if (rc)
 -		goto err_out;
 -
 -	config = readl_relaxed(host->ioaddr + CORE_DLL_CONFIG);
 -	config |= CORE_CDR_EN;
 -	config &= ~CORE_CDR_EXT_EN;
 -	writel_relaxed(config, host->ioaddr + CORE_DLL_CONFIG);
 -	goto out;
 -
 -err_out:
 -	dev_err(mmc_dev(mmc), "%s: Failed to set DLL phase: %d\n",
 -	       mmc_hostname(mmc), phase);
 -out:
 -	spin_unlock_irqrestore(&host->lock, flags);
 -	return rc;
 -}
 -
 -/*
 - * Find out the greatest range of consecuitive selected
 - * DLL clock output phases that can be used as sampling
 - * setting for SD3.0 UHS-I card read operation (in SDR104
 - * timing mode) or for eMMC4.5 card read operation (in HS200
 - * timing mode).
 - * Select the 3/4 of the range and configure the DLL with the
 - * selected DLL clock output phase.
 - */
 -
 -static int msm_find_most_appropriate_phase(struct sdhci_host *host,
 -					   u8 *phase_table, u8 total_phases)
 -{
 -	int ret;
 -	u8 ranges[MAX_PHASES][MAX_PHASES] = { {0}, {0} };
 -	u8 phases_per_row[MAX_PHASES] = { 0 };
 -	int row_index = 0, col_index = 0, selected_row_index = 0, curr_max = 0;
 -	int i, cnt, phase_0_raw_index = 0, phase_15_raw_index = 0;
 -	bool phase_0_found = false, phase_15_found = false;
 -	struct mmc_host *mmc = host->mmc;
 -
 -	if (!total_phases || (total_phases > MAX_PHASES)) {
 -		dev_err(mmc_dev(mmc), "%s: Invalid argument: total_phases=%d\n",
 -		       mmc_hostname(mmc), total_phases);
 -		return -EINVAL;
 -	}
 -
 -	for (cnt = 0; cnt < total_phases; cnt++) {
 -		ranges[row_index][col_index] = phase_table[cnt];
 -		phases_per_row[row_index] += 1;
 -		col_index++;
 -
 -		if ((cnt + 1) == total_phases) {
 -			continue;
 -		/* check if next phase in phase_table is consecutive or not */
 -		} else if ((phase_table[cnt] + 1) != phase_table[cnt + 1]) {
 -			row_index++;
 -			col_index = 0;
 -		}
 -	}
 -
 -	if (row_index >= MAX_PHASES)
 -		return -EINVAL;
 -
 -	/* Check if phase-0 is present in first valid window? */
 -	if (!ranges[0][0]) {
 -		phase_0_found = true;
 -		phase_0_raw_index = 0;
 -		/* Check if cycle exist between 2 valid windows */
 -		for (cnt = 1; cnt <= row_index; cnt++) {
 -			if (phases_per_row[cnt]) {
 -				for (i = 0; i < phases_per_row[cnt]; i++) {
 -					if (ranges[cnt][i] == 15) {
 -						phase_15_found = true;
 -						phase_15_raw_index = cnt;
 -						break;
 -					}
 -				}
 -			}
 -		}
 -	}
 -
 -	/* If 2 valid windows form cycle then merge them as single window */
 -	if (phase_0_found && phase_15_found) {
 -		/* number of phases in raw where phase 0 is present */
 -		u8 phases_0 = phases_per_row[phase_0_raw_index];
 -		/* number of phases in raw where phase 15 is present */
 -		u8 phases_15 = phases_per_row[phase_15_raw_index];
 -
 -		if (phases_0 + phases_15 >= MAX_PHASES)
 -			/*
 -			 * If there are more than 1 phase windows then total
 -			 * number of phases in both the windows should not be
 -			 * more than or equal to MAX_PHASES.
 -			 */
 -			return -EINVAL;
 -
 -		/* Merge 2 cyclic windows */
 -		i = phases_15;
 -		for (cnt = 0; cnt < phases_0; cnt++) {
 -			ranges[phase_15_raw_index][i] =
 -			    ranges[phase_0_raw_index][cnt];
 -			if (++i >= MAX_PHASES)
 -				break;
 -		}
 -
 -		phases_per_row[phase_0_raw_index] = 0;
 -		phases_per_row[phase_15_raw_index] = phases_15 + phases_0;
 -	}
 -
 -	for (cnt = 0; cnt <= row_index; cnt++) {
 -		if (phases_per_row[cnt] > curr_max) {
 -			curr_max = phases_per_row[cnt];
 -			selected_row_index = cnt;
 -		}
 -	}
 -
 -	i = (curr_max * 3) / 4;
 -	if (i)
 -		i--;
 -
 -	ret = ranges[selected_row_index][i];
 -
 -	if (ret >= MAX_PHASES) {
 -		ret = -EINVAL;
 -		dev_err(mmc_dev(mmc), "%s: Invalid phase selected=%d\n",
 -		       mmc_hostname(mmc), ret);
 -	}
 -
 -	return ret;
 -}
 -
 -static inline void msm_cm_dll_set_freq(struct sdhci_host *host)
 -{
 -	u32 mclk_freq = 0, config;
 -
 -	/* Program the MCLK value to MCLK_FREQ bit field */
 -	if (host->clock <= 112000000)
 -		mclk_freq = 0;
 -	else if (host->clock <= 125000000)
 -		mclk_freq = 1;
 -	else if (host->clock <= 137000000)
 -		mclk_freq = 2;
 -	else if (host->clock <= 150000000)
 -		mclk_freq = 3;
 -	else if (host->clock <= 162000000)
 -		mclk_freq = 4;
 -	else if (host->clock <= 175000000)
 -		mclk_freq = 5;
 -	else if (host->clock <= 187000000)
 -		mclk_freq = 6;
 -	else if (host->clock <= 200000000)
 -		mclk_freq = 7;
 -
 -	config = readl_relaxed(host->ioaddr + CORE_DLL_CONFIG);
 -	config &= ~CMUX_SHIFT_PHASE_MASK;
 -	config |= mclk_freq << CMUX_SHIFT_PHASE_SHIFT;
 -	writel_relaxed(config, host->ioaddr + CORE_DLL_CONFIG);
 -}
 -
 -/* Initialize the DLL (Programmable Delay Line) */
 -static int msm_init_cm_dll(struct sdhci_host *host)
 -{
 -	struct mmc_host *mmc = host->mmc;
 -	int wait_cnt = 50;
 -	unsigned long flags;
 -
 -	spin_lock_irqsave(&host->lock, flags);
 -
 -	/*
 -	 * Make sure that clock is always enabled when DLL
 -	 * tuning is in progress. Keeping PWRSAVE ON may
 -	 * turn off the clock.
 -	 */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_VENDOR_SPEC)
 -			& ~CORE_CLK_PWRSAVE), host->ioaddr + CORE_VENDOR_SPEC);
 -
 -	/* Write 1 to DLL_RST bit of DLL_CONFIG register */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			| CORE_DLL_RST), host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Write 1 to DLL_PDN bit of DLL_CONFIG register */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			| CORE_DLL_PDN), host->ioaddr + CORE_DLL_CONFIG);
 -	msm_cm_dll_set_freq(host);
 -
 -	/* Write 0 to DLL_RST bit of DLL_CONFIG register */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			& ~CORE_DLL_RST), host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Write 0 to DLL_PDN bit of DLL_CONFIG register */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			& ~CORE_DLL_PDN), host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Set DLL_EN bit to 1. */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			| CORE_DLL_EN), host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Set CK_OUT_EN bit to 1. */
 -	writel_relaxed((readl_relaxed(host->ioaddr + CORE_DLL_CONFIG)
 -			| CORE_CK_OUT_EN), host->ioaddr + CORE_DLL_CONFIG);
 -
 -	/* Wait until DLL_LOCK bit of DLL_STATUS register becomes '1' */
 -	while (!(readl_relaxed(host->ioaddr + CORE_DLL_STATUS) &
 -		 CORE_DLL_LOCK)) {
 -		/* max. wait for 50us sec for LOCK bit to be set */
 -		if (--wait_cnt == 0) {
 -			dev_err(mmc_dev(mmc), "%s: DLL failed to LOCK\n",
 -			       mmc_hostname(mmc));
 -			spin_unlock_irqrestore(&host->lock, flags);
 -			return -ETIMEDOUT;
 -		}
 -		udelay(1);
 -	}
 -
 -	spin_unlock_irqrestore(&host->lock, flags);
 -	return 0;
 -}
 -
  static int sdhci_msm_execute_tuning(struct sdhci_host *host, u32 opcode)
  {
++<<<<<<< HEAD
++=======
+ 	int tuning_seq_cnt = 3;
+ 	u8 phase, *data_buf, tuned_phases[16], tuned_phase_cnt = 0;
+ 	const u8 *tuning_block_pattern = tuning_blk_pattern_4bit;
+ 	int size = sizeof(tuning_blk_pattern_4bit);
+ 	int rc;
+ 	struct mmc_host *mmc = host->mmc;
+ 	struct mmc_ios ios = host->mmc->ios;
+ 
++>>>>>>> 48d11e067fc9 (mmc: Consolidate emmc tuning blocks)
  	/*
 -	 * Tuning is required for SDR104, HS200 and HS400 cards and
 -	 * if clock frequency is greater than 100MHz in these modes.
 +	 * Tuning is required for SDR104, HS200 and HS400 cards and if the clock
 +	 * frequency greater than 100MHz in those modes. The standard tuning
 +	 * procedure should not be executed, but a custom implementation will be
 +	 * added here instead.
  	 */
++<<<<<<< HEAD
 +	return 0;
++=======
+ 	if (host->clock <= 100 * 1000 * 1000 ||
+ 	    !((ios.timing == MMC_TIMING_MMC_HS200) ||
+ 	      (ios.timing == MMC_TIMING_UHS_SDR104)))
+ 		return 0;
+ 
+ 	if ((opcode == MMC_SEND_TUNING_BLOCK_HS200) &&
+ 	    (mmc->ios.bus_width == MMC_BUS_WIDTH_8)) {
+ 		tuning_block_pattern = tuning_blk_pattern_8bit;
+ 		size = sizeof(tuning_blk_pattern_8bit);
+ 	}
+ 
+ 	data_buf = kmalloc(size, GFP_KERNEL);
+ 	if (!data_buf)
+ 		return -ENOMEM;
+ 
+ retry:
+ 	/* First of all reset the tuning block */
+ 	rc = msm_init_cm_dll(host);
+ 	if (rc)
+ 		goto out;
+ 
+ 	phase = 0;
+ 	do {
+ 		struct mmc_command cmd = { 0 };
+ 		struct mmc_data data = { 0 };
+ 		struct mmc_request mrq = {
+ 			.cmd = &cmd,
+ 			.data = &data
+ 		};
+ 		struct scatterlist sg;
+ 
+ 		/* Set the phase in delay line hw block */
+ 		rc = msm_config_cm_dll_phase(host, phase);
+ 		if (rc)
+ 			goto out;
+ 
+ 		cmd.opcode = opcode;
+ 		cmd.flags = MMC_RSP_R1 | MMC_CMD_ADTC;
+ 
+ 		data.blksz = size;
+ 		data.blocks = 1;
+ 		data.flags = MMC_DATA_READ;
+ 		data.timeout_ns = NSEC_PER_SEC;	/* 1 second */
+ 
+ 		data.sg = &sg;
+ 		data.sg_len = 1;
+ 		sg_init_one(&sg, data_buf, size);
+ 		memset(data_buf, 0, size);
+ 		mmc_wait_for_req(mmc, &mrq);
+ 
+ 		if (!cmd.error && !data.error &&
+ 		    !memcmp(data_buf, tuning_block_pattern, size)) {
+ 			/* Tuning is successful at this tuning point */
+ 			tuned_phases[tuned_phase_cnt++] = phase;
+ 			dev_dbg(mmc_dev(mmc), "%s: Found good phase = %d\n",
+ 				 mmc_hostname(mmc), phase);
+ 		}
+ 	} while (++phase < ARRAY_SIZE(tuned_phases));
+ 
+ 	if (tuned_phase_cnt) {
+ 		rc = msm_find_most_appropriate_phase(host, tuned_phases,
+ 						     tuned_phase_cnt);
+ 		if (rc < 0)
+ 			goto out;
+ 		else
+ 			phase = rc;
+ 
+ 		/*
+ 		 * Finally set the selected phase in delay
+ 		 * line hw block.
+ 		 */
+ 		rc = msm_config_cm_dll_phase(host, phase);
+ 		if (rc)
+ 			goto out;
+ 		dev_dbg(mmc_dev(mmc), "%s: Setting the tuning phase to %d\n",
+ 			 mmc_hostname(mmc), phase);
+ 	} else {
+ 		if (--tuning_seq_cnt)
+ 			goto retry;
+ 		/* Tuning failed */
+ 		dev_dbg(mmc_dev(mmc), "%s: No tuning point found\n",
+ 		       mmc_hostname(mmc));
+ 		rc = -EIO;
+ 	}
+ 
+ out:
+ 	kfree(data_buf);
+ 	return rc;
++>>>>>>> 48d11e067fc9 (mmc: Consolidate emmc tuning blocks)
  }
  
  static const struct of_device_id sdhci_msm_dt_match[] = {
* Unmerged path drivers/mmc/core/mmc.c
* Unmerged path drivers/mmc/host/dw_mmc.c
* Unmerged path drivers/mmc/host/sdhci-msm.c
diff --git a/include/linux/mmc/mmc.h b/include/linux/mmc/mmc.h
index 07b3cc9d7d7b..bcf5975a48b5 100644
--- a/include/linux/mmc/mmc.h
+++ b/include/linux/mmc/mmc.h
@@ -53,6 +53,11 @@
 #define MMC_SEND_TUNING_BLOCK    19   /* adtc                    R1  */
 #define MMC_SEND_TUNING_BLOCK_HS200	21	/* adtc R1  */
 
+#define MMC_TUNING_BLK_PATTERN_4BIT_SIZE	 64
+#define MMC_TUNING_BLK_PATTERN_8BIT_SIZE	128
+extern const u8 tuning_blk_pattern_4bit[MMC_TUNING_BLK_PATTERN_4BIT_SIZE];
+extern const u8 tuning_blk_pattern_8bit[MMC_TUNING_BLK_PATTERN_8BIT_SIZE];
+
   /* class 3 */
 #define MMC_WRITE_DAT_UNTIL_STOP 20   /* adtc [31:0] data addr   R1  */
 
