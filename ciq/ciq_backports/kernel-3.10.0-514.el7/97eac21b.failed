x86/setup: Cleanup crashkernel reservation functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
Rebuild_CHGLOG: - [x86] setup: Cleanup crashkernel reservation functions (Baoquan He) [1241236]
Rebuild_FUZZ: 96.00%
commit-author Borislav Petkov <bp@suse.de>
commit 97eac21babe47e1a8ed4cac4f8874c5746cf6e36
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/97eac21b.failed

* Shorten variable names
* Realign code, space out for better readability

No code changed:

  # arch/x86/kernel/setup.o:

   text    data     bss     dec     hex filename
   4543    3096   69904   77543   12ee7 setup.o.before
   4543    3096   69904   77543   12ee7 setup.o.after

md5:
   8a1b7c6738a553ca207b56bd84a8f359  setup.o.before.asm
   8a1b7c6738a553ca207b56bd84a8f359  setup.o.after.asm

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Dave Young <dyoung@redhat.com>
	Reviewed-by: Joerg Roedel <jroedel@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jiri Kosina <jkosina@suse.cz>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mark Salter <msalter@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: WANG Chao <chaowang@redhat.com>
	Cc: jerry_hoemann@hp.com
Link: http://lkml.kernel.org/r/1445246268-26285-4-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 97eac21babe47e1a8ed4cac4f8874c5746cf6e36)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/setup.c
diff --cc arch/x86/kernel/setup.c
index 41f53963b5ef,fd9e178aa890..000000000000
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@@ -609,25 -573,9 +608,31 @@@ static void __init reserve_crashkernel(
  		 *  kexec want bzImage is below CRASH_KERNEL_ADDR_MAX
  		 */
  		crash_base = memblock_find_in_range(alignment,
++<<<<<<< HEAD
 +					high ? CRASH_KERNEL_ADDR_HIGH_MAX :
 +					       CRASH_KERNEL_ADDR_LOW_MAX,
 +					crash_size, alignment);
 +#ifdef CONFIG_X86_64
 +		/*
 +		 * crashkernel=X reserve below 896M fails? Try below 4G
 +		 */
 +		if (!high && !crash_base)
 +			crash_base = memblock_find_in_range(alignment,
 +						(1ULL << 32),
 +						crash_size, alignment);
 +		/*
 +		 * crashkernel=X reserve below 4G fails? Try MAXMEM
 +		 */
 +		if (!high && !crash_base)
 +			crash_base = memblock_find_in_range(alignment,
 +						CRASH_KERNEL_ADDR_HIGH_MAX,
 +						crash_size, alignment);
 +#endif
++=======
+ 						    high ? CRASH_ADDR_HIGH_MAX
+ 							 : CRASH_ADDR_LOW_MAX,
+ 						    crash_size, alignment);
++>>>>>>> 97eac21babe4 (x86/setup: Cleanup crashkernel reservation functions)
  		if (!crash_base) {
  			pr_info("crashkernel reservation failed - No suitable area found.\n");
  			return;
* Unmerged path arch/x86/kernel/setup.c
