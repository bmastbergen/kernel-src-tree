ip_tunnel: Call ip_tunnel_core_init() from inet_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-514.el7
commit-author Thomas Graf <tgraf@suug.ch>
commit 045a0fa0c5f5ea0f16c009f924ea579634afbba8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-514.el7/045a0fa0.failed

Convert the module_init() to a invocation from inet_init() since
ip_tunnel_core is part of the INET built-in.

Fixes: 3093fbe7ff4 ("route: Per route IP tunnel metadata via lightweight tunnel")
	Signed-off-by: Thomas Graf <tgraf@suug.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 045a0fa0c5f5ea0f16c009f924ea579634afbba8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/ip_tunnels.h
#	net/ipv4/ip_tunnel_core.c
diff --cc include/net/ip_tunnels.h
index 1466fdbddeda,47984415f5d1..000000000000
--- a/include/net/ip_tunnels.h
+++ b/include/net/ip_tunnels.h
@@@ -296,6 -293,44 +296,47 @@@ static inline void iptunnel_xmit_stats(
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static inline void *ip_tunnel_info_opts(struct ip_tunnel_info *info, size_t n)
+ {
+ 	return info + 1;
+ }
+ 
+ static inline struct ip_tunnel_info *lwt_tun_info(struct lwtunnel_state *lwtstate)
+ {
+ 	return (struct ip_tunnel_info *)lwtstate->data;
+ }
+ 
+ extern struct static_key ip_tunnel_metadata_cnt;
+ 
+ /* Returns > 0 if metadata should be collected */
+ static inline int ip_tunnel_collect_metadata(void)
+ {
+ 	return static_key_false(&ip_tunnel_metadata_cnt);
+ }
+ 
+ void __init ip_tunnel_core_init(void);
+ 
+ void ip_tunnel_need_metadata(void);
+ void ip_tunnel_unneed_metadata(void);
+ 
+ #else /* CONFIG_INET */
+ 
+ static inline struct ip_tunnel_info *lwt_tun_info(struct lwtunnel_state *lwtstate)
+ {
+ 	return NULL;
+ }
+ 
+ static inline void ip_tunnel_need_metadata(void)
+ {
+ }
+ 
+ static inline void ip_tunnel_unneed_metadata(void)
+ {
+ }
+ 
++>>>>>>> 045a0fa0c5f5 (ip_tunnel: Call ip_tunnel_core_init() from inet_init())
  #endif /* CONFIG_INET */
  
  #endif /* __NET_IP_TUNNELS_H */
diff --cc net/ipv4/ip_tunnel_core.c
index 010b54caceed,5512f4e4ec1b..000000000000
--- a/net/ipv4/ip_tunnel_core.c
+++ b/net/ipv4/ip_tunnel_core.c
@@@ -188,3 -191,123 +188,126 @@@ struct rtnl_link_stats64 *ip_tunnel_get
  	return tot;
  }
  EXPORT_SYMBOL_GPL(ip_tunnel_get_stats64);
++<<<<<<< HEAD
++=======
+ 
+ static const struct nla_policy ip_tun_policy[IP_TUN_MAX + 1] = {
+ 	[IP_TUN_ID]		= { .type = NLA_U64 },
+ 	[IP_TUN_DST]		= { .type = NLA_U32 },
+ 	[IP_TUN_SRC]		= { .type = NLA_U32 },
+ 	[IP_TUN_TTL]		= { .type = NLA_U8 },
+ 	[IP_TUN_TOS]		= { .type = NLA_U8 },
+ 	[IP_TUN_SPORT]		= { .type = NLA_U16 },
+ 	[IP_TUN_DPORT]		= { .type = NLA_U16 },
+ 	[IP_TUN_FLAGS]		= { .type = NLA_U16 },
+ };
+ 
+ static int ip_tun_build_state(struct net_device *dev, struct nlattr *attr,
+ 			      struct lwtunnel_state **ts)
+ {
+ 	struct ip_tunnel_info *tun_info;
+ 	struct lwtunnel_state *new_state;
+ 	struct nlattr *tb[IP_TUN_MAX + 1];
+ 	int err;
+ 
+ 	err = nla_parse_nested(tb, IP_TUN_MAX, attr, ip_tun_policy);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	new_state = lwtunnel_state_alloc(sizeof(*tun_info));
+ 	if (!new_state)
+ 		return -ENOMEM;
+ 
+ 	new_state->type = LWTUNNEL_ENCAP_IP;
+ 
+ 	tun_info = lwt_tun_info(new_state);
+ 
+ 	if (tb[IP_TUN_ID])
+ 		tun_info->key.tun_id = nla_get_u64(tb[IP_TUN_ID]);
+ 
+ 	if (tb[IP_TUN_DST])
+ 		tun_info->key.ipv4_dst = nla_get_be32(tb[IP_TUN_DST]);
+ 
+ 	if (tb[IP_TUN_SRC])
+ 		tun_info->key.ipv4_src = nla_get_be32(tb[IP_TUN_SRC]);
+ 
+ 	if (tb[IP_TUN_TTL])
+ 		tun_info->key.ipv4_ttl = nla_get_u8(tb[IP_TUN_TTL]);
+ 
+ 	if (tb[IP_TUN_TOS])
+ 		tun_info->key.ipv4_tos = nla_get_u8(tb[IP_TUN_TOS]);
+ 
+ 	if (tb[IP_TUN_SPORT])
+ 		tun_info->key.tp_src = nla_get_be16(tb[IP_TUN_SPORT]);
+ 
+ 	if (tb[IP_TUN_DPORT])
+ 		tun_info->key.tp_dst = nla_get_be16(tb[IP_TUN_DPORT]);
+ 
+ 	if (tb[IP_TUN_FLAGS])
+ 		tun_info->key.tun_flags = nla_get_u16(tb[IP_TUN_FLAGS]);
+ 
+ 	tun_info->mode = IP_TUNNEL_INFO_TX;
+ 	tun_info->options = NULL;
+ 	tun_info->options_len = 0;
+ 
+ 	*ts = new_state;
+ 
+ 	return 0;
+ }
+ 
+ static int ip_tun_fill_encap_info(struct sk_buff *skb,
+ 				  struct lwtunnel_state *lwtstate)
+ {
+ 	struct ip_tunnel_info *tun_info = lwt_tun_info(lwtstate);
+ 
+ 	if (nla_put_u64(skb, IP_TUN_ID, tun_info->key.tun_id) ||
+ 	    nla_put_be32(skb, IP_TUN_DST, tun_info->key.ipv4_dst) ||
+ 	    nla_put_be32(skb, IP_TUN_SRC, tun_info->key.ipv4_src) ||
+ 	    nla_put_u8(skb, IP_TUN_TOS, tun_info->key.ipv4_tos) ||
+ 	    nla_put_u8(skb, IP_TUN_TTL, tun_info->key.ipv4_ttl) ||
+ 	    nla_put_u16(skb, IP_TUN_SPORT, tun_info->key.tp_src) ||
+ 	    nla_put_u16(skb, IP_TUN_DPORT, tun_info->key.tp_dst) ||
+ 	    nla_put_u16(skb, IP_TUN_FLAGS, tun_info->key.tun_flags))
+ 		return -ENOMEM;
+ 
+ 	return 0;
+ }
+ 
+ static int ip_tun_encap_nlsize(struct lwtunnel_state *lwtstate)
+ {
+ 	return nla_total_size(8)	/* IP_TUN_ID */
+ 		+ nla_total_size(4)	/* IP_TUN_DST */
+ 		+ nla_total_size(4)	/* IP_TUN_SRC */
+ 		+ nla_total_size(1)	/* IP_TUN_TOS */
+ 		+ nla_total_size(1)	/* IP_TUN_TTL */
+ 		+ nla_total_size(2)	/* IP_TUN_SPORT */
+ 		+ nla_total_size(2)	/* IP_TUN_DPORT */
+ 		+ nla_total_size(2);	/* IP_TUN_FLAGS */
+ }
+ 
+ static const struct lwtunnel_encap_ops ip_tun_lwt_ops = {
+ 	.build_state = ip_tun_build_state,
+ 	.fill_encap = ip_tun_fill_encap_info,
+ 	.get_encap_size = ip_tun_encap_nlsize,
+ };
+ 
+ void __init ip_tunnel_core_init(void)
+ {
+ 	lwtunnel_encap_add_ops(&ip_tun_lwt_ops, LWTUNNEL_ENCAP_IP);
+ }
+ 
+ struct static_key ip_tunnel_metadata_cnt = STATIC_KEY_INIT_FALSE;
+ EXPORT_SYMBOL(ip_tunnel_metadata_cnt);
+ 
+ void ip_tunnel_need_metadata(void)
+ {
+ 	static_key_slow_inc(&ip_tunnel_metadata_cnt);
+ }
+ EXPORT_SYMBOL_GPL(ip_tunnel_need_metadata);
+ 
+ void ip_tunnel_unneed_metadata(void)
+ {
+ 	static_key_slow_dec(&ip_tunnel_metadata_cnt);
+ }
+ EXPORT_SYMBOL_GPL(ip_tunnel_unneed_metadata);
++>>>>>>> 045a0fa0c5f5 (ip_tunnel: Call ip_tunnel_core_init() from inet_init())
* Unmerged path include/net/ip_tunnels.h
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 96cfb62894e8..6d69900d4c44 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -112,6 +112,7 @@
 #include <net/raw.h>
 #include <net/icmp.h>
 #include <net/inet_common.h>
+#include <net/ip_tunnels.h>
 #include <net/xfrm.h>
 #include <net/net_namespace.h>
 #include <net/secure_seq.h>
@@ -1758,6 +1759,8 @@ static int __init inet_init(void)
 
 	dev_add_pack(&ip_packet_type);
 
+	ip_tunnel_core_init();
+
 	rc = 0;
 out:
 	return rc;
* Unmerged path net/ipv4/ip_tunnel_core.c
