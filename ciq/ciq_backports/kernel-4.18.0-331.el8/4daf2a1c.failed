x86/sev: Drop redundant and potentially misleading 'sev_enabled'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Sean Christopherson <seanjc@google.com>
commit 4daf2a1c45ace29e3bacabdef0d4c7920e1f1ea4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/4daf2a1c.failed

Drop the sev_enabled flag and switch its one user over to sev_active().
sev_enabled was made redundant with the introduction of sev_status in
commit b57de6cd1639 ("x86/sev-es: Add SEV-ES Feature Detection").
sev_enabled and sev_active() are guaranteed to be equivalent, as each is
true iff 'sev_status & MSR_AMD64_SEV_ENABLED' is true, and are only ever
written in tandem (ignoring compressed boot's version of sev_status).

Removing sev_enabled avoids confusion over whether it refers to the guest
or the host, and will also allow KVM to usurp "sev_enabled" for its own
purposes.

No functional change intended.

	Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
	Reviewed-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20210422021125.3417167-7-seanjc@google.com>
	Acked-by: Borislav Petkov <bp@suse.de>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 4daf2a1c45ace29e3bacabdef0d4c7920e1f1ea4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/mem_encrypt.c
diff --cc arch/x86/mm/mem_encrypt.c
index 10d0f6040d01,a2d492595213..000000000000
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@@ -47,10 -44,8 +47,13 @@@ EXPORT_SYMBOL(sme_me_mask)
  DEFINE_STATIC_KEY_FALSE(sev_enable_key);
  EXPORT_SYMBOL_GPL(sev_enable_key);
  
++<<<<<<< HEAD
 +bool sev_enabled __section(.data);
 +
++=======
++>>>>>>> 4daf2a1c45ac (x86/sev: Drop redundant and potentially misleading 'sev_enabled')
  /* Buffer used for early in-place encryption by BSP, no locking needed */
 -static char sme_early_buffer[PAGE_SIZE] __initdata __aligned(PAGE_SIZE);
 +static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
  
  /*
   * This routine does not change the underlying encryption setting of the
@@@ -376,12 -371,6 +379,15 @@@ int __init early_set_memory_encrypted(u
   * up under SME the trampoline area cannot be encrypted, whereas under SEV
   * the trampoline area must be encrypted.
   */
++<<<<<<< HEAD
 +bool sme_active(void)
 +{
 +	return sme_me_mask && !sev_enabled;
 +}
 +EXPORT_SYMBOL(sme_active);
 +
++=======
++>>>>>>> 4daf2a1c45ac (x86/sev: Drop redundant and potentially misleading 'sev_enabled')
  bool sev_active(void)
  {
  	return sev_status & MSR_AMD64_SEV_ENABLED;
diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h
index 2c38419a612b..fd679b0543a3 100644
--- a/arch/x86/include/asm/mem_encrypt.h
+++ b/arch/x86/include/asm/mem_encrypt.h
@@ -23,7 +23,6 @@
 
 extern u64 sme_me_mask;
 extern u64 sev_status;
-extern bool sev_enabled;
 
 void sme_encrypt_execute(unsigned long encrypted_kernel_vaddr,
 			 unsigned long decrypted_kernel_vaddr,
* Unmerged path arch/x86/mm/mem_encrypt.c
diff --git a/arch/x86/mm/mem_encrypt_identity.c b/arch/x86/mm/mem_encrypt_identity.c
index 32ee5a03ce6a..cf1e81e9f2bd 100644
--- a/arch/x86/mm/mem_encrypt_identity.c
+++ b/arch/x86/mm/mem_encrypt_identity.c
@@ -547,7 +547,6 @@ void __init sme_enable(struct boot_params *bp)
 
 		/* SEV state cannot be controlled by a command line option */
 		sme_me_mask = me_mask;
-		sev_enabled = true;
 		physical_mask &= ~sme_me_mask;
 		return;
 	}
