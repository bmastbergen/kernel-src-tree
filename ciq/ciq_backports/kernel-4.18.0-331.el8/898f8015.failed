net: extract napi poll functionality to __napi_poll()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Felix Fietkau <nbd@nbd.name>
commit 898f8015ffe74118e7b461827451f2cc6e51035b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/898f8015.failed

This commit introduces a new function __napi_poll() which does the main
logic of the existing napi_poll() function, and will be called by other
functions in later commits.
This idea and implementation is done by Felix Fietkau <nbd@nbd.name> and
is proposed as part of the patch to move napi work to work_queue
context.
This commit by itself is a code restructure.

	Signed-off-by: Felix Fietkau <nbd@nbd.name>
	Signed-off-by: Wei Wang <weiwan@google.com>
	Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 898f8015ffe74118e7b461827451f2cc6e51035b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index a223efdd8606,59751a22d7c3..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -6397,26 -6776,10 +6397,25 @@@ void __netif_napi_del(struct napi_struc
  }
  EXPORT_SYMBOL(__netif_napi_del);
  
++<<<<<<< HEAD
 +/* RHEL: netif_napi_del was changed to be 'static inline' but this function
 + * is on KABI allowlist so we need to export it for older binary modules.
 + * Exporting of 'static inline' function seems to be confusing but it is
 + * working. Keyword 'inline' is just a hint for compiler and EXPORT_SYMBOL
 + * directive requires an adress of symbol so a compiler will generate
 + * function body. Although keyword 'static' causes that symbol has not
 + * external linkage this does not have an influence on modules that
 + * can use any symbol exported by EXPORT_SYMBOL.
 + */
 +EXPORT_SYMBOL(netif_napi_del);
 +
 +static int napi_poll(struct napi_struct *n, struct list_head *repoll)
++=======
+ static int __napi_poll(struct napi_struct *n, bool *repoll)
++>>>>>>> 898f8015ffe7 (net: extract napi poll functionality to __napi_poll())
  {
- 	void *have;
  	int work, weight;
  
- 	list_del_init(&n->poll_list);
- 
- 	have = netpoll_poll_lock(n);
- 
  	weight = n->weight;
  
  	/* This NAPI_STATE_SCHED test is for avoiding a race
@@@ -6431,10 -6794,12 +6430,10 @@@
  		trace_napi_poll(n, work, weight);
  	}
  
 -	if (unlikely(work > weight))
 -		pr_err_once("NAPI poll function %pS returned %d, exceeding its budget of %d.\n",
 -			    n->poll, work, weight);
 +	WARN_ON_ONCE(work > weight);
  
  	if (likely(work < weight))
- 		goto out_unlock;
+ 		return work;
  
  	/* Drivers must not modify the NAPI state if they
  	 * consume the entire weight.  In such cases this code
@@@ -6456,10 -6821,10 +6455,10 @@@
  			 */
  			napi_schedule(n);
  		}
- 		goto out_unlock;
+ 		return work;
  	}
  
 -	if (n->gro_bitmask) {
 +	if (!list_empty(&n->gro_list)) {
  		/* flush too old packets
  		 * If HZ < 1000, flush all packets.
  		 */
* Unmerged path net/core/dev.c
