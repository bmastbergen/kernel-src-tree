KVM: SVM: Drop redundant svm_sev_enabled() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Sean Christopherson <seanjc@google.com>
commit a5c1c5aad6cff0c64cc7911ad8b14cb59109c865
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/a5c1c5aa.failed

Replace calls to svm_sev_enabled() with direct checks on sev_enabled, or
in the case of svm_mem_enc_op, simply drop the call to svm_sev_enabled().
This effectively replaces checks against a valid max_sev_asid with checks
against sev_enabled.  sev_enabled is forced off by sev_hardware_setup()
if max_sev_asid is invalid, all call sites are guaranteed to run after
sev_hardware_setup(), and all of the checks care about SEV being fully
enabled (as opposed to intentionally handling the scenario where
max_sev_asid is valid but SEV enabling fails due to OOM).

Reviewed by: Tom Lendacky <thomas.lendacky@amd.com>
	Reviewed-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20210422021125.3417167-14-seanjc@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit a5c1c5aad6cff0c64cc7911ad8b14cb59109c865)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/sev.c
diff --cc arch/x86/kvm/svm/sev.c
index 413d1498fbf4,eedb5f60b27a..000000000000
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@@ -1440,7 -1500,7 +1440,11 @@@ int svm_mem_enc_op(struct kvm *kvm, voi
  	struct kvm_sev_cmd sev_cmd;
  	int r;
  
++<<<<<<< HEAD
 +	if (!svm_sev_enabled() || !sev)
++=======
+ 	if (!sev_enabled)
++>>>>>>> a5c1c5aad6cf (KVM: SVM: Drop redundant svm_sev_enabled() helper)
  		return -ENOTTY;
  
  	if (!argp)
* Unmerged path arch/x86/kvm/svm/sev.c
diff --git a/arch/x86/kvm/svm/svm.h b/arch/x86/kvm/svm/svm.h
index 29db3af16fc1..870c48938ffc 100644
--- a/arch/x86/kvm/svm/svm.h
+++ b/arch/x86/kvm/svm/svm.h
@@ -562,11 +562,6 @@ void svm_vcpu_unblocking(struct kvm_vcpu *vcpu);
 
 extern unsigned int max_sev_asid;
 
-static inline bool svm_sev_enabled(void)
-{
-	return IS_ENABLED(CONFIG_KVM_AMD_SEV) ? max_sev_asid : 0;
-}
-
 void sev_vm_destroy(struct kvm *kvm);
 int svm_mem_enc_op(struct kvm *kvm, void __user *argp);
 int svm_register_enc_region(struct kvm *kvm,
