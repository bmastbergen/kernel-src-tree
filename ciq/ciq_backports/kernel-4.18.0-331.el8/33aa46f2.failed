cpufreq: intel_pstate: Use passive mode by default without HWP

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 33aa46f252c703e42c81a76696cd0c240f2281e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/33aa46f2.failed

After recent changes allowing scale-invariant utilization to be
used on x86, the schedutil governor on top of intel_pstate in the
passive mode should be on par with (or better than) the active mode
"powersave" algorithm of intel_pstate on systems in which
hardware-managed P-states (HWP) are not used, so it should not be
necessary to use the internal scaling algorithm in those cases.

Accordingly, modify intel_pstate to start in the passive mode by
default if the processor at hand does not support HWP of if the driver
is requested to avoid using HWP through the kernel command line.

Among other things, that will allow utilization clamps and the
support for RT/DL tasks in the schedutil governor to be utilized on
systems in which intel_pstate is used.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 33aa46f252c703e42c81a76696cd0c240f2281e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/pm/intel_pstate.rst
#	drivers/cpufreq/intel_pstate.c
diff --cc Documentation/admin-guide/pm/intel_pstate.rst
index 5ff00bdcb03a,39d80bc29ccd..000000000000
--- a/Documentation/admin-guide/pm/intel_pstate.rst
+++ b/Documentation/admin-guide/pm/intel_pstate.rst
@@@ -193,16 -190,14 +195,27 @@@ is not set
  Passive Mode
  ------------
  
++<<<<<<< HEAD
 +This mode is used if the ``intel_pstate=passive`` argument is passed to the
 +kernel in the command line (it implies the ``intel_pstate=no_hwp`` setting too).
 +Like in the active mode without HWP support, in this mode ``intel_pstate`` may
 +refuse to work with the given processor if it does not recognize it. [Note that the
 +``intel_pstate=no_hwp`` setting causes the driver to start in the passive mode
 +if it is not combined with ``intel_pstate=active``.]  Like in the active mode
 +without HWP support, in this mode ``intel_pstate`` may refuse to work with
 +processors that are not recognized by it if HWP is prevented from being enabled
 +through the kernel command line.
 +
++=======
+ This is the default operation mode of ``intel_pstate`` for processors without
+ hardware-managed P-states (HWP) support.  It is always used if the
+ ``intel_pstate=passive`` argument is passed to the kernel in the command line
+ regardless of whether or not the given processor supports HWP.  [Note that the
+ ``intel_pstate=no_hwp`` setting implies ``intel_pstate=passive`` if it is used
+ without ``intel_pstate=active``.]  Like in the active mode without HWP support,
+ in this mode ``intel_pstate`` may refuse to work with processors that are not
+ recognized by it.
++>>>>>>> 33aa46f252c7 (cpufreq: intel_pstate: Use passive mode by default without HWP)
  
  If the driver works in this mode, the ``scaling_driver`` policy attribute in
  ``sysfs`` for all ``CPUFreq`` policies contains the string "intel_cpufreq".
diff --cc drivers/cpufreq/intel_pstate.c
index fa89e8c3e3fd,66ab6523c3eb..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -3146,12 -2815,12 +3148,16 @@@ static int __init intel_pstate_setup(ch
  	if (!str)
  		return -EINVAL;
  
 -	if (!strcmp(str, "disable")) {
 +	if (!strcmp(str, "disable"))
  		no_load = 1;
++<<<<<<< HEAD
 +	else if (!strcmp(str, "passive"))
 +		pr_info("Passive mode enabled\n");
++=======
+ 	} else if (!strcmp(str, "passive")) {
++>>>>>>> 33aa46f252c7 (cpufreq: intel_pstate: Use passive mode by default without HWP)
  		default_driver = &intel_cpufreq;
 -		no_hwp = 1;
 -	}
 +
  	if (!strcmp(str, "no_hwp")) {
  		pr_info("HWP disabled\n");
  		no_hwp = 1;
* Unmerged path Documentation/admin-guide/pm/intel_pstate.rst
* Unmerged path drivers/cpufreq/intel_pstate.c
