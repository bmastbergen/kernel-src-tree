gfs2: Replace gfs2_lblk_to_dblk with gfs2_get_extent

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 152f58c9af21abf913699e671b425fd38447b170
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/152f58c9.failed

We don't need two very similar functions for mapping logical blocks to physical
blocks.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 152f58c9af21abf913699e671b425fd38447b170)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/bmap.c
diff --cc fs/gfs2/bmap.c
index 43b2618706ac,bad5dc641bbd..000000000000
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@@ -965,32 -961,6 +965,35 @@@ hole_found
  	goto out;
  }
  
++<<<<<<< HEAD
 +/**
 + * gfs2_lblk_to_dblk - convert logical block to disk block
 + * @inode: the inode of the file we're mapping
 + * @lblock: the block relative to the start of the file
 + * @dblock: the returned dblock, if no error
 + *
 + * This function maps a single block from a file logical block (relative to
 + * the start of the file) to a file system absolute block using iomap.
 + *
 + * Returns: the absolute file system block, or an error
 + */
 +int gfs2_lblk_to_dblk(struct inode *inode, u32 lblock, u64 *dblock)
 +{
 +	struct iomap iomap = { };
 +	struct metapath mp = { .mp_aheight = 1, };
 +	loff_t pos = (loff_t)lblock << inode->i_blkbits;
 +	int ret;
 +
 +	ret = gfs2_iomap_get(inode, pos, i_blocksize(inode), 0, &iomap, &mp);
 +	release_metapath(&mp);
 +	if (ret == 0)
 +		*dblock = iomap.addr >> inode->i_blkbits;
 +
 +	return ret;
 +}
 +
++=======
++>>>>>>> 152f58c9af21 (gfs2: Replace gfs2_lblk_to_dblk with gfs2_get_extent)
  static int gfs2_write_lock(struct inode *inode)
  {
  	struct gfs2_inode *ip = GFS2_I(inode);
* Unmerged path fs/gfs2/bmap.c
diff --git a/fs/gfs2/bmap.h b/fs/gfs2/bmap.h
index 19a1fd772c61..6b18fb323f0a 100644
--- a/fs/gfs2/bmap.h
+++ b/fs/gfs2/bmap.h
@@ -64,6 +64,5 @@ extern int gfs2_write_alloc_required(struct gfs2_inode *ip, u64 offset,
 extern int gfs2_map_journal_extents(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd);
 extern void gfs2_free_journal_extents(struct gfs2_jdesc *jd);
 extern int __gfs2_punch_hole(struct file *file, loff_t offset, loff_t length);
-extern int gfs2_lblk_to_dblk(struct inode *inode, u32 lblock, u64 *dblock);
 
 #endif /* __BMAP_DOT_H__ */
diff --git a/fs/gfs2/log.c b/fs/gfs2/log.c
index 87ab5db19785..76bba4917029 100644
--- a/fs/gfs2/log.c
+++ b/fs/gfs2/log.c
@@ -762,7 +762,11 @@ void gfs2_write_log_header(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd,
 	if (!list_empty(&jd->extent_list))
 		dblock = gfs2_log_bmap(jd, lblock);
 	else {
-		int ret = gfs2_lblk_to_dblk(jd->jd_inode, lblock, &dblock);
+		unsigned int extlen;
+		int ret;
+
+		extlen = 1;
+		ret = gfs2_get_extent(jd->jd_inode, lblock, &dblock, &extlen);
 		if (gfs2_assert_withdraw(sdp, ret == 0))
 			return;
 	}
