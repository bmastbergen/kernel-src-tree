cifs: remove the devname argument to cifs_compose_mount_options

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Ronnie Sahlberg <lsahlber@redhat.com>
commit 4deb075985ec52961cf43666cd9e12af1241b3cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/4deb0759.failed

none of the callers use this argument any more.

	Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
	Signed-off-by: Steve French <stfrench@microsoft.com>
(cherry picked from commit 4deb075985ec52961cf43666cd9e12af1241b3cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/dfs_cache.c
diff --cc fs/cifs/dfs_cache.c
index 14029a7cec23,6bccff4596bf..000000000000
--- a/fs/cifs/dfs_cache.c
+++ b/fs/cifs/dfs_cache.c
@@@ -1452,8 -1452,7 +1451,12 @@@ static struct cifs_ses *find_root_ses(s
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	rc = cifs_setup_volume_info(&ctx, mdata, devname, false);
 +	kfree(devname);
++=======
+ 	rc = cifs_setup_volume_info(&ctx);
++>>>>>>> 4deb075985ec (cifs: remove the devname argument to cifs_compose_mount_options)
  
  	if (rc) {
  		ses = ERR_PTR(rc);
diff --git a/fs/cifs/cifs_dfs_ref.c b/fs/cifs/cifs_dfs_ref.c
index b57afa90dc46..6bba09a18e14 100644
--- a/fs/cifs/cifs_dfs_ref.c
+++ b/fs/cifs/cifs_dfs_ref.c
@@ -127,7 +127,6 @@ cifs_build_devname(char *nodename, const char *prepath)
  * @sb_mountdata:	parent/root DFS mount options (template)
  * @fullpath:		full path in UNC format
  * @ref:		optional server's referral
- * @devname:		optional pointer for saving device name
  *
  * creates mount options for submount based on template options sb_mountdata
  * and replacing unc,ip,prefixpath options with ones we've got form ref_unc.
@@ -137,8 +136,7 @@ cifs_build_devname(char *nodename, const char *prepath)
  */
 char *cifs_compose_mount_options(const char *sb_mountdata,
 				   const char *fullpath,
-				   const struct dfs_info3_param *ref,
-				   char **devname)
+				   const struct dfs_info3_param *ref)
 {
 	int rc;
 	char *name;
@@ -235,10 +233,7 @@ char *cifs_compose_mount_options(const char *sb_mountdata,
 	strcat(mountdata, "ip=");
 	strcat(mountdata, srvIP);
 
-	if (devname)
-		*devname = name;
-	else
-		kfree(name);
+	kfree(name);
 
 	/*cifs_dbg(FYI, "%s: parent mountdata: %s\n", __func__, sb_mountdata);*/
 	/*cifs_dbg(FYI, "%s: submount mountdata: %s\n", __func__, mountdata );*/
@@ -280,7 +275,7 @@ static struct vfsmount *cifs_dfs_do_mount(struct dentry *mntpt,
 
 	/* strip first '\' from fullpath */
 	mountdata = cifs_compose_mount_options(cifs_sb->mountdata,
-					       fullpath + 1, NULL, NULL);
+					       fullpath + 1, NULL);
 	if (IS_ERR(mountdata)) {
 		kfree(devname);
 		return (struct vfsmount *)mountdata;
diff --git a/fs/cifs/cifsproto.h b/fs/cifs/cifsproto.h
index aa66a6b9aaf5..979486bd3307 100644
--- a/fs/cifs/cifsproto.h
+++ b/fs/cifs/cifsproto.h
@@ -78,8 +78,7 @@ extern char *cifs_build_path_to_root(struct smb3_fs_context *ctx,
 				     int add_treename);
 extern char *build_wildcard_path_from_dentry(struct dentry *direntry);
 extern char *cifs_compose_mount_options(const char *sb_mountdata,
-		const char *fullpath, const struct dfs_info3_param *ref,
-		char **devname);
+		const char *fullpath, const struct dfs_info3_param *ref);
 /* extern void renew_parental_timestamps(struct dentry *direntry);*/
 extern struct mid_q_entry *AllocMidQEntry(const struct smb_hdr *smb_buffer,
 					struct TCP_Server_Info *server);
diff --git a/fs/cifs/connect.c b/fs/cifs/connect.c
index aef3c1f69972..f6f55b99488b 100644
--- a/fs/cifs/connect.c
+++ b/fs/cifs/connect.c
@@ -4122,11 +4122,8 @@ expand_dfs_referral(const unsigned int xid, struct cifs_ses *ses,
 	rc = dfs_cache_find(xid, ses, cifs_sb->local_nls, cifs_remap(cifs_sb),
 			    ref_path, &referral, NULL);
 	if (!rc) {
-		char *fake_devname = NULL;
-
 		mdata = cifs_compose_mount_options(cifs_sb->mountdata,
-						   full_path + 1, &referral,
-						   &fake_devname);
+						   full_path + 1, &referral);
 		free_dfs_info_param(&referral);
 
 		if (IS_ERR(mdata)) {
@@ -4137,7 +4134,6 @@ expand_dfs_referral(const unsigned int xid, struct cifs_ses *ses,
 			rc = cifs_setup_volume_info(ctx, mdata,
 						    fake_devname, false);
 		}
-		kfree(fake_devname);
 		kfree(cifs_sb->mountdata);
 		cifs_sb->mountdata = mdata;
 	}
@@ -4189,7 +4185,7 @@ static int setup_dfs_tgt_conn(const char *path, const char *full_path,
 {
 	int rc;
 	struct dfs_info3_param ref = {0};
-	char *mdata = NULL, *fake_devname = NULL;
+	char *mdata = NULL;
 	struct smb3_fs_context fake_ctx = {NULL};
 
 	cifs_dbg(FYI, "%s: dfs path: %s\n", __func__, path);
@@ -4198,7 +4194,7 @@ static int setup_dfs_tgt_conn(const char *path, const char *full_path,
 	if (rc)
 		return rc;
 
-	mdata = cifs_compose_mount_options(cifs_sb->mountdata, full_path + 1, &ref, &fake_devname);
+	mdata = cifs_compose_mount_options(cifs_sb->mountdata, full_path + 1, &ref);
 	free_dfs_info_param(&ref);
 
 	if (IS_ERR(mdata)) {
@@ -4210,7 +4206,6 @@ static int setup_dfs_tgt_conn(const char *path, const char *full_path,
 					    mdata, fake_devname, false);
 	}
 	kfree(mdata);
-	kfree(fake_devname);
 
 	if (!rc) {
 		/*
* Unmerged path fs/cifs/dfs_cache.c
