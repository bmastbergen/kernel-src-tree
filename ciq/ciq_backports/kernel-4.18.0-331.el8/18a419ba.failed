udp: annotate data races around unix_sk(sk)->gso_size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 18a419bad63b7f68a1979e28459782518e7b6bbe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/18a419ba.failed

Accesses to unix_sk(sk)->gso_size are lockless.
Add READ_ONCE()/WRITE_ONCE() around them.

BUG: KCSAN: data-race in udp_lib_setsockopt / udpv6_sendmsg

write to 0xffff88812d78f47c of 2 bytes by task 10849 on cpu 1:
 udp_lib_setsockopt+0x3b3/0x710 net/ipv4/udp.c:2696
 udpv6_setsockopt+0x63/0x90 net/ipv6/udp.c:1630
 sock_common_setsockopt+0x5d/0x70 net/core/sock.c:3265
 __sys_setsockopt+0x18f/0x200 net/socket.c:2104
 __do_sys_setsockopt net/socket.c:2115 [inline]
 __se_sys_setsockopt net/socket.c:2112 [inline]
 __x64_sys_setsockopt+0x62/0x70 net/socket.c:2112
 do_syscall_64+0x4a/0x90 arch/x86/entry/common.c:47
 entry_SYSCALL_64_after_hwframe+0x44/0xae

read to 0xffff88812d78f47c of 2 bytes by task 10852 on cpu 0:
 udpv6_sendmsg+0x161/0x16b0 net/ipv6/udp.c:1299
 inet6_sendmsg+0x5f/0x80 net/ipv6/af_inet6.c:642
 sock_sendmsg_nosec net/socket.c:654 [inline]
 sock_sendmsg net/socket.c:674 [inline]
 ____sys_sendmsg+0x360/0x4d0 net/socket.c:2337
 ___sys_sendmsg net/socket.c:2391 [inline]
 __sys_sendmmsg+0x315/0x4b0 net/socket.c:2477
 __do_sys_sendmmsg net/socket.c:2506 [inline]
 __se_sys_sendmmsg net/socket.c:2503 [inline]
 __x64_sys_sendmmsg+0x53/0x60 net/socket.c:2503
 do_syscall_64+0x4a/0x90 arch/x86/entry/common.c:47
 entry_SYSCALL_64_after_hwframe+0x44/0xae

value changed: 0x0000 -> 0x0005

Reported by Kernel Concurrency Sanitizer on:
CPU: 0 PID: 10852 Comm: syz-executor.0 Not tainted 5.13.0-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011

Fixes: bec1f6f69736 ("udp: generate gso with UDP_SEGMENT")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Willem de Bruijn <willemb@google.com>
	Reported-by: syzbot <syzkaller@googlegroups.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 18a419bad63b7f68a1979e28459782518e7b6bbe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/udp.c
#	net/ipv6/udp.c
diff --cc net/ipv4/udp.c
index 792b00229902,62cd4cd52e84..000000000000
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@@ -1077,10 -1101,8 +1077,15 @@@ int udp_sendmsg(struct sock *sk, struc
  		connected = 1;
  	}
  
++<<<<<<< HEAD
 +	ipc.sockc.tsflags = sk->sk_tsflags;
 +	ipc.addr = inet->inet_saddr;
 +	ipc.oif = sk->sk_bound_dev_if;
 +	ipc.gso_size = up->gso_size;
++=======
+ 	ipcm_init_sk(&ipc, inet);
+ 	ipc.gso_size = READ_ONCE(up->gso_size);
++>>>>>>> 18a419bad63b (udp: annotate data races around unix_sk(sk)->gso_size)
  
  	if (msg->msg_controllen) {
  		err = udp_cmsg_send(sk, msg, &ipc.gso_size);
diff --cc net/ipv6/udp.c
index 95b045e9a4aa,0cc7ba531b34..000000000000
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@@ -1269,14 -1294,11 +1269,21 @@@ int udpv6_sendmsg(struct sock *sk, stru
  	int err;
  	int is_udplite = IS_UDPLITE(sk);
  	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);
 -
 +	struct sockcm_cookie sockc;
 +
++<<<<<<< HEAD
 +	ipc6.hlimit = -1;
 +	ipc6.tclass = -1;
 +	ipc6.dontfrag = -1;
 +	ipc6.gso_size = up->gso_size;
 +	sockc.tsflags = sk->sk_tsflags;
 +	sockc.transmit_time = 0;
++=======
+ 	ipcm6_init(&ipc6);
+ 	ipc6.gso_size = READ_ONCE(up->gso_size);
+ 	ipc6.sockc.tsflags = sk->sk_tsflags;
+ 	ipc6.sockc.mark = sk->sk_mark;
++>>>>>>> 18a419bad63b (udp: annotate data races around unix_sk(sk)->gso_size)
  
  	/* destination address check */
  	if (sin6) {
* Unmerged path net/ipv4/udp.c
* Unmerged path net/ipv6/udp.c
