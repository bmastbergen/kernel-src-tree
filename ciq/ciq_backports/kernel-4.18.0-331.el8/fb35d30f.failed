x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX]

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Sean Christopherson <seanjc@google.com>
commit fb35d30fe5b06cc24444f0405da8fbe0be5330d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/fb35d30f.failed

Collect the scattered SME/SEV related feature flags into a dedicated
word.  There are now five recognized features in CPUID.0x8000001F.EAX,
with at least one more on the horizon (SEV-SNP).  Using a dedicated word
allows KVM to use its automagic CPUID adjustment logic when reporting
the set of supported features to userspace.

No functional change intended.

	Signed-off-by: Sean Christopherson <seanjc@google.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Brijesh Singh <brijesh.singh@amd.com>
Link: https://lkml.kernel.org/r/20210122204047.2860075-2-seanjc@google.com
(cherry picked from commit fb35d30fe5b06cc24444f0405da8fbe0be5330d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/include/asm/disabled-features.h
#	arch/x86/include/asm/required-features.h
diff --cc arch/x86/include/asm/cpufeature.h
index 83515625a8a5,1728d4ce5730..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -82,18 -90,8 +83,23 @@@ extern const char * const x86_bug_flags
  	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 17, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 18, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 19, feature_bit) ||	\
++<<<<<<< HEAD
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 20, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 21, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 22, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 23, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 24, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 25, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 26, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 27, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 28, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(REQUIRED_MASK, 29, feature_bit) ||	\
 +	   REQUIRED_MASK_CHECK					  ||	\
 +	   BUILD_BUG_ON_ZERO(NCAPINTS != 30))
++=======
+ 	   REQUIRED_MASK_CHECK					  ||	\
+ 	   BUILD_BUG_ON_ZERO(NCAPINTS != 20))
++>>>>>>> fb35d30fe5b0 (x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX])
  
  #define DISABLED_MASK_BIT_SET(feature_bit)				\
  	 ( CHECK_BIT_IN_MASK_WORD(DISABLED_MASK,  0, feature_bit) ||	\
@@@ -116,17 -114,8 +122,22 @@@
  	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 17, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 18, feature_bit) ||	\
  	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 19, feature_bit) ||	\
++<<<<<<< HEAD
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 20, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 21, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 22, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 24, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 25, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 26, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 27, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 28, feature_bit) ||	\
 +	   CHECK_BIT_IN_MASK_WORD(DISABLED_MASK, 29, feature_bit) ||	\
 +	   DISABLED_MASK_CHECK					  ||	\
 +	   BUILD_BUG_ON_ZERO(NCAPINTS != 30))
++=======
+ 	   DISABLED_MASK_CHECK					  ||	\
+ 	   BUILD_BUG_ON_ZERO(NCAPINTS != 20))
++>>>>>>> fb35d30fe5b0 (x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX])
  
  #define cpu_has(c, bit)							\
  	(__builtin_constant_p(bit) && REQUIRED_MASK_BIT_SET(bit) ? 1 :	\
diff --cc arch/x86/include/asm/cpufeatures.h
index 1f08b9193b8e,1feb6c089ba2..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -13,8 -13,8 +13,13 @@@
  /*
   * Defines x86 CPU feature bits
   */
++<<<<<<< HEAD
 +#define NCAPINTS			30	   /* N 32-bit words worth of info */
 +#define NBUGINTS			2	   /* N 32-bit bug flags */
++=======
+ #define NCAPINTS			20	   /* N 32-bit words worth of info */
+ #define NBUGINTS			1	   /* N 32-bit bug flags */
++>>>>>>> fb35d30fe5b0 (x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX])
  
  /*
   * Note: If the comment begins with a quoted string, that string is used
@@@ -387,11 -383,12 +390,20 @@@
  #define X86_FEATURE_CORE_CAPABILITIES	(18*32+30) /* "" IA32_CORE_CAPABILITIES MSR */
  #define X86_FEATURE_SPEC_CTRL_SSBD	(18*32+31) /* "" Speculative Store Bypass Disable */
  
++<<<<<<< HEAD
 +/* Words 19-21: reserved for future extension */
 +
 +/* RHEL specific auxillary flags, word 22 */
 +#define X86_FEATURE_SPEC_CTRL_ENTRY	(22*32+ 0) /* ""  Write SPEC_CTRL MSR on kernel entry */
 +#define X86_FEATURE_SPEC_CTRL_EXIT	(22*32+ 1) /* ""  Write SPEC_CTRL MSR on kernel exit */
++=======
+ /* AMD-defined memory encryption features, CPUID level 0x8000001f (EAX), word 19 */
+ #define X86_FEATURE_SME			(19*32+ 0) /* AMD Secure Memory Encryption */
+ #define X86_FEATURE_SEV			(19*32+ 1) /* AMD Secure Encrypted Virtualization */
+ #define X86_FEATURE_VM_PAGE_FLUSH	(19*32+ 2) /* "" VM Page Flush MSR is supported */
+ #define X86_FEATURE_SEV_ES		(19*32+ 3) /* AMD Secure Encrypted Virtualization - Encrypted State */
+ #define X86_FEATURE_SME_COHERENT	(19*32+10) /* "" AMD hardware-enforced cache coherency */
++>>>>>>> fb35d30fe5b0 (x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX])
  
  /*
   * BUG word(s)
diff --cc arch/x86/include/asm/disabled-features.h
index db1e1fa617c4,b7dd944dc867..000000000000
--- a/arch/x86/include/asm/disabled-features.h
+++ b/arch/x86/include/asm/disabled-features.h
@@@ -92,16 -92,6 +92,20 @@@
  #define DISABLED_MASK17	0
  #define DISABLED_MASK18	0
  #define DISABLED_MASK19	0
++<<<<<<< HEAD
 +#define DISABLED_MASK20	0
 +#define DISABLED_MASK21	0
 +#define DISABLED_MASK22	0
 +#define DISABLED_MASK23	0
 +#define DISABLED_MASK24	0
 +#define DISABLED_MASK25	0
 +#define DISABLED_MASK26	0
 +#define DISABLED_MASK27	0
 +#define DISABLED_MASK28	0
 +#define DISABLED_MASK29	0
 +#define DISABLED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 30)
++=======
+ #define DISABLED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 20)
++>>>>>>> fb35d30fe5b0 (x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX])
  
  #endif /* _ASM_X86_DISABLED_FEATURES_H */
diff --cc arch/x86/include/asm/required-features.h
index de8ada172d03,b2d504f11937..000000000000
--- a/arch/x86/include/asm/required-features.h
+++ b/arch/x86/include/asm/required-features.h
@@@ -102,16 -102,6 +102,20 @@@
  #define REQUIRED_MASK17	0
  #define REQUIRED_MASK18	0
  #define REQUIRED_MASK19	0
++<<<<<<< HEAD
 +#define REQUIRED_MASK20	0
 +#define REQUIRED_MASK21	0
 +#define REQUIRED_MASK22	0
 +#define REQUIRED_MASK23	0
 +#define REQUIRED_MASK24	0
 +#define REQUIRED_MASK25	0
 +#define REQUIRED_MASK26	0
 +#define REQUIRED_MASK27	0
 +#define REQUIRED_MASK28	0
 +#define REQUIRED_MASK29	0
 +#define REQUIRED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 30)
++=======
+ #define REQUIRED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 20)
++>>>>>>> fb35d30fe5b0 (x86/cpufeatures: Assign dedicated feature word for CPUID_0x8000001F[EAX])
  
  #endif /* _ASM_X86_REQUIRED_FEATURES_H */
* Unmerged path arch/x86/include/asm/cpufeature.h
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/include/asm/disabled-features.h
* Unmerged path arch/x86/include/asm/required-features.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index f9054edea5f0..2f830e0242fd 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -882,6 +882,9 @@ void get_cpu_cap(struct cpuinfo_x86 *c)
 	if (c->extended_cpuid_level >= 0x8000000a)
 		c->x86_capability[CPUID_8000_000A_EDX] = cpuid_edx(0x8000000a);
 
+	if (c->extended_cpuid_level >= 0x8000001f)
+		c->x86_capability[CPUID_8000_001F_EAX] = cpuid_eax(0x8000001f);
+
 	init_scattered_cpuid_features(c);
 	init_speculation_control(c);
 
diff --git a/arch/x86/kernel/cpu/scattered.c b/arch/x86/kernel/cpu/scattered.c
index 766a14866885..2a683fcece5e 100644
--- a/arch/x86/kernel/cpu/scattered.c
+++ b/arch/x86/kernel/cpu/scattered.c
@@ -40,11 +40,6 @@ static const struct cpuid_bit cpuid_bits[] = {
 	{ X86_FEATURE_CPB,		CPUID_EDX,  9, 0x80000007, 0 },
 	{ X86_FEATURE_PROC_FEEDBACK,    CPUID_EDX, 11, 0x80000007, 0 },
 	{ X86_FEATURE_MBA,		CPUID_EBX,  6, 0x80000008, 0 },
-	{ X86_FEATURE_SME,		CPUID_EAX,  0, 0x8000001f, 0 },
-	{ X86_FEATURE_SEV,		CPUID_EAX,  1, 0x8000001f, 0 },
-	{ X86_FEATURE_SEV_ES,		CPUID_EAX,  3, 0x8000001f, 0 },
-	{ X86_FEATURE_SME_COHERENT,	CPUID_EAX, 10, 0x8000001f, 0 },
-	{ X86_FEATURE_VM_PAGE_FLUSH,	CPUID_EAX,  2, 0x8000001f, 0 },
 	{ 0, 0, 0, 0, 0 }
 };
 
diff --git a/tools/arch/x86/include/asm/disabled-features.h b/tools/arch/x86/include/asm/disabled-features.h
index ee3e1be9b394..ed907e903f89 100644
--- a/tools/arch/x86/include/asm/disabled-features.h
+++ b/tools/arch/x86/include/asm/disabled-features.h
@@ -84,6 +84,7 @@
 #define DISABLED_MASK16	(DISABLE_PKU|DISABLE_OSPKE|DISABLE_LA57|DISABLE_UMIP)
 #define DISABLED_MASK17	0
 #define DISABLED_MASK18	0
-#define DISABLED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 19)
+#define DISABLED_MASK19	0
+#define DISABLED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 20)
 
 #endif /* _ASM_X86_DISABLED_FEATURES_H */
diff --git a/tools/arch/x86/include/asm/required-features.h b/tools/arch/x86/include/asm/required-features.h
index 6847d85400a8..fa5700097f64 100644
--- a/tools/arch/x86/include/asm/required-features.h
+++ b/tools/arch/x86/include/asm/required-features.h
@@ -101,6 +101,7 @@
 #define REQUIRED_MASK16	0
 #define REQUIRED_MASK17	0
 #define REQUIRED_MASK18	0
-#define REQUIRED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 19)
+#define REQUIRED_MASK19	0
+#define REQUIRED_MASK_CHECK BUILD_BUG_ON_ZERO(NCAPINTS != 20)
 
 #endif /* _ASM_X86_REQUIRED_FEATURES_H */
