vdpa_sim: use iova module to allocate IOVA addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Stefano Garzarella <sgarzare@redhat.com>
commit 4080fc1067501707b9693b8003feae7d50d14e35
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/4080fc10.failed

The identical mapping used until now created issues when mapping
different virtual pages with the same physical address.
To solve this issue, we can use the iova module, to handle the IOVA
allocation.
For simplicity we use an IOVA allocator with byte granularity.

We add two new functions, vdpasim_map_range() and vdpasim_unmap_range(),
to handle the IOVA allocation and the registration into the IOMMU/IOTLB.
These functions are used by dma_map_ops callbacks.

	Acked-by: Jason Wang <jasowang@redhat.com>
	Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
Link: https://lore.kernel.org/r/20210315163450.254396-2-sgarzare@redhat.com
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 4080fc1067501707b9693b8003feae7d50d14e35)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vdpa/Kconfig
#	drivers/vdpa/vdpa_sim/vdpa_sim.c
#	drivers/vdpa/vdpa_sim/vdpa_sim.h
diff --cc drivers/vdpa/Kconfig
index b79f29e3a95a,6e82a0e228c2..000000000000
--- a/drivers/vdpa/Kconfig
+++ b/drivers/vdpa/Kconfig
@@@ -14,11 -14,17 +14,22 @@@ config VDPA_SI
  	depends on RUNTIME_TESTING_MENU && HAS_DMA
  	select DMA_OPS
  	select VHOST_RING
++<<<<<<< HEAD
++=======
+ 	select IOMMU_IOVA
+ 	help
+ 	  Enable this module to support vDPA device simulators. These devices
+ 	  are used for testing, prototyping and development of vDPA.
+ 
+ config VDPA_SIM_NET
+ 	tristate "vDPA simulator for networking device"
+ 	depends on VDPA_SIM
++>>>>>>> 4080fc106750 (vdpa_sim: use iova module to allocate IOVA addresses)
  	select GENERIC_NET_UTILS
  	help
 -	  vDPA networking device simulator which loops TX traffic back to RX.
 +	  vDPA networking device simulator which loop TX traffic back
 +	  to RX. This device is used for testing, prototyping and
 +	  development of vDPA.
  
  config IFCVF
  	tristate "Intel IFC VF vDPA driver"
diff --cc drivers/vdpa/vdpa_sim/vdpa_sim.c
index ca1a82c76caa,fc2ec9599753..000000000000
--- a/drivers/vdpa/vdpa_sim/vdpa_sim.c
+++ b/drivers/vdpa/vdpa_sim/vdpa_sim.c
@@@ -11,23 -11,15 +11,29 @@@
  #include <linux/module.h>
  #include <linux/device.h>
  #include <linux/kernel.h>
 +#include <linux/fs.h>
 +#include <linux/poll.h>
  #include <linux/slab.h>
  #include <linux/sched.h>
 -#include <linux/dma-map-ops.h>
 +#include <linux/wait.h>
 +#include <linux/uuid.h>
 +#include <linux/iommu.h>
 +#include <linux/dma-mapping.h>
 +#include <linux/sysfs.h>
 +#include <linux/file.h>
 +#include <linux/etherdevice.h>
  #include <linux/vringh.h>
  #include <linux/vdpa.h>
 +#include <linux/virtio_byteorder.h>
  #include <linux/vhost_iotlb.h>
++<<<<<<< HEAD
 +#include <uapi/linux/virtio_config.h>
 +#include <uapi/linux/virtio_net.h>
++=======
+ #include <linux/iova.h>
+ 
+ #include "vdpa_sim.h"
++>>>>>>> 4080fc106750 (vdpa_sim: use iova module to allocate IOVA addresses)
  
  #define DRV_VERSION  "0.1"
  #define DRV_AUTHOR   "Jason Wang <jasowang@redhat.com>"
@@@ -444,10 -286,14 +464,17 @@@ static struct vdpasim *vdpasim_create(s
  	for (i = 0; i < dev_attr->nvqs; i++)
  		vringh_set_iotlb(&vdpasim->vqs[i].vring, vdpasim->iommu);
  
+ 	ret = iova_cache_get();
+ 	if (ret)
+ 		goto err_iommu;
+ 
+ 	/* For simplicity we use an IOVA allocator with byte granularity */
+ 	init_iova_domain(&vdpasim->iova, 1, 0);
+ 
  	vdpasim->vdpa.dma_dev = dev;
 +	ret = vdpa_register_device(&vdpasim->vdpa);
 +	if (ret)
 +		goto err_iommu;
  
  	return vdpasim;
  
* Unmerged path drivers/vdpa/vdpa_sim/vdpa_sim.h
* Unmerged path drivers/vdpa/Kconfig
* Unmerged path drivers/vdpa/vdpa_sim/vdpa_sim.c
* Unmerged path drivers/vdpa/vdpa_sim/vdpa_sim.h
