block: fix discard request merge

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 2705dfb2094777e405e065105e307074af8965c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/2705dfb2.failed

ll_new_hw_segment() is reached only in case of single range discard
merge, and we don't have max discard segment size limit actually, so
it is wrong to run the following check:

if (req->nr_phys_segments + nr_phys_segs > blk_rq_get_max_segments(req))

it may be always false since req->nr_phys_segments is initialized as
one, and bio's segment count is still 1, blk_rq_get_max_segments(reg)
is 1 too.

Fix the issue by not doing the check and bypassing the calculation of
discard request's nr_phys_segments.

Based on analysis from Wang Shanker.

	Cc: Christoph Hellwig <hch@lst.de>
	Reported-by: Wang Shanker <shankerwangmiao@gmail.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
Link: https://lore.kernel.org/r/20210628023312.1903255-1-ming.lei@redhat.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 2705dfb2094777e405e065105e307074af8965c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-merge.c
diff --cc block/blk-merge.c
index 5f179fffee82,a11b3b53717e..000000000000
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@@ -526,16 -556,17 +526,27 @@@ static inline unsigned int blk_rq_get_m
  	return queue_max_segments(rq->q);
  }
  
 -static inline int ll_new_hw_segment(struct request *req, struct bio *bio,
 -		unsigned int nr_phys_segs)
 +static inline int ll_new_hw_segment(struct request_queue *q,
 +				    struct request *req,
 +				    struct bio *bio)
  {
++<<<<<<< HEAD
 +	int nr_phys_segs = bio_phys_segments(q, bio);
 +
 +	if (req->nr_phys_segments + nr_phys_segs > blk_rq_get_max_segments(req))
 +		goto no_merge;
 +
 +	if (blk_integrity_merge_bio(q, req, bio) == false)
++=======
+ 	if (blk_integrity_merge_bio(req->q, req, bio) == false)
+ 		goto no_merge;
+ 
+ 	/* discard request merge won't add new segment */
+ 	if (req_op(req) == REQ_OP_DISCARD)
+ 		return 1;
+ 
+ 	if (req->nr_phys_segments + nr_phys_segs > blk_rq_get_max_segments(req))
++>>>>>>> 2705dfb20947 (block: fix discard request merge)
  		goto no_merge;
  
  	/*
* Unmerged path block/blk-merge.c
