mlxsw: spectrum_router: Update adjacency index more efficiently

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Ido Schimmel <idosch@nvidia.com>
commit ff47fa13c9916643501d4fad67e683cc9468ee94
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/ff47fa13.failed

The device supports an operation that allows the driver to issue one
request to update the adjacency index for all the routes in a given
virtual router (VR) from old index and size to new ones. This is useful
in case the configuration of a certain nexthop group is updated and its
adjacency index changes.

Currently, the driver does not use this operation in an efficient
manner. It iterates over all the routes using the nexthop group and
issues an update request for the VR if it is not the same as the
previous VR.

Instead, use the VR tracking added in the previous patch to update the
adjacency index once for each VR currently using the nexthop group.

Example:

8k IPv6 routes were added in an alternating manner to two VRFs. All the
routes are using the same nexthop object ('nhid 1').

Before:

# perf stat -e devlink:devlink_hwmsg --filter='incoming==0' -- ip nexthop replace id 1 via 2001:db8:1::2 dev swp3

 Performance counter stats for 'ip nexthop replace id 1 via 2001:db8:1::2 dev swp3':

            16,385      devlink:devlink_hwmsg

       4.255933213 seconds time elapsed

       0.000000000 seconds user
       0.666923000 seconds sys

Number of EMAD transactions corresponds to number of routes using the
nexthop group.

After:

# perf stat -e devlink:devlink_hwmsg --filter='incoming==0' -- ip nexthop replace id 1 via 2001:db8:1::2 dev swp3

 Performance counter stats for 'ip nexthop replace id 1 via 2001:db8:1::2 dev swp3':

                 3      devlink:devlink_hwmsg

       0.077655094 seconds time elapsed

       0.000000000 seconds user
       0.076698000 seconds sys

Number of EMAD transactions corresponds to number of VRFs / VRs.

	Signed-off-by: Ido Schimmel <idosch@nvidia.com>
	Reviewed-by: Jiri Pirko <jiri@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit ff47fa13c9916643501d4fad67e683cc9468ee94)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index cfa089299405,12b5d7fbe1e2..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -3238,20 -3366,18 +3238,27 @@@ static int mlxsw_sp_adj_index_mass_upda
  					  struct mlxsw_sp_nexthop_group *nh_grp,
  					  u32 old_adj_index, u16 old_ecmp_size)
  {
- 	struct mlxsw_sp_fib_entry *fib_entry;
- 	struct mlxsw_sp_fib *fib = NULL;
+ 	struct mlxsw_sp_nexthop_group_info *nhgi = nh_grp->nhgi;
+ 	struct mlxsw_sp_nexthop_group_vr_entry *vr_entry;
  	int err;
  
++<<<<<<< HEAD
 +	list_for_each_entry(fib_entry, &nh_grp->fib_list, nexthop_group_node) {
 +		if (fib == fib_entry->fib_node->fib)
 +			continue;
 +		fib = fib_entry->fib_node->fib;
 +		err = mlxsw_sp_adj_index_mass_update_vr(mlxsw_sp, fib->proto,
 +							fib->vr->id,
++=======
+ 	list_for_each_entry(vr_entry, &nh_grp->vr_list, list) {
+ 		err = mlxsw_sp_adj_index_mass_update_vr(mlxsw_sp,
+ 							vr_entry->key.proto,
+ 							vr_entry->key.vr_id,
++>>>>>>> ff47fa13c991 (mlxsw: spectrum_router: Update adjacency index more efficiently)
  							old_adj_index,
  							old_ecmp_size,
 -							nhgi->adj_index,
 -							nhgi->ecmp_size);
 +							nh_grp->adj_index,
 +							nh_grp->ecmp_size);
  		if (err)
  			goto err_mass_update_vr;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
