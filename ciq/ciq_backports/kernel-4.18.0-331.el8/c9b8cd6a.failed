cifs: fix mounts to subdirectories of target

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Steve French <stfrench@microsoft.com>
commit c9b8cd6a39c48b2827c0925b648b221b5f8ef25d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/c9b8cd6a.failed

The "prefixpath" mount option needs to be ignored
which was missed in the recent conversion to the
new mount API (prefixpath would be set by the mount
helper if mounting a subdirectory of the root of a
share e.g. //server/share/subdir)

Fixes: 24e0a1eff9e2 ("cifs: switch to new mount api")
	Suggested-by: Ronnie Sahlberg <lsahlber@redhat.com>
	Signed-off-by: Steve French <stfrench@microsoft.com>
	Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
(cherry picked from commit c9b8cd6a39c48b2827c0925b648b221b5f8ef25d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/fs_context.c
diff --cc fs/cifs/fs_context.c
index d19634975a18,818c413db82d..000000000000
--- a/fs/cifs/fs_context.c
+++ b/fs/cifs/fs_context.c
@@@ -113,7 -65,125 +113,129 @@@ static const match_table_t cifs_secflav
  	{ Opt_sec_err, NULL }
  };
  
++<<<<<<< HEAD
 +int cifs_parse_security_flavors(char *value, struct smb3_fs_context *ctx)
++=======
+ const struct fs_parameter_spec smb3_fs_parameters[] = {
+ 	/* Mount options that take no arguments */
+ 	fsparam_flag_no("user_xattr", Opt_user_xattr),
+ 	fsparam_flag_no("forceuid", Opt_forceuid),
+ 	fsparam_flag_no("multichannel", Opt_multichannel),
+ 	fsparam_flag_no("forcegid", Opt_forcegid),
+ 	fsparam_flag("noblocksend", Opt_noblocksend),
+ 	fsparam_flag("noautotune", Opt_noautotune),
+ 	fsparam_flag("nolease", Opt_nolease),
+ 	fsparam_flag_no("hard", Opt_hard),
+ 	fsparam_flag_no("soft", Opt_soft),
+ 	fsparam_flag_no("perm", Opt_perm),
+ 	fsparam_flag("nodelete", Opt_nodelete),
+ 	fsparam_flag_no("mapposix", Opt_mapposix),
+ 	fsparam_flag("mapchars", Opt_mapchars),
+ 	fsparam_flag("nomapchars", Opt_nomapchars),
+ 	fsparam_flag_no("sfu", Opt_sfu),
+ 	fsparam_flag("nodfs", Opt_nodfs),
+ 	fsparam_flag_no("posixpaths", Opt_posixpaths),
+ 	fsparam_flag_no("unix", Opt_unix),
+ 	fsparam_flag_no("linux", Opt_unix),
+ 	fsparam_flag_no("posix", Opt_unix),
+ 	fsparam_flag("nocase", Opt_nocase),
+ 	fsparam_flag("ignorecase", Opt_nocase),
+ 	fsparam_flag_no("brl", Opt_brl),
+ 	fsparam_flag_no("handlecache", Opt_handlecache),
+ 	fsparam_flag("forcemandatorylock", Opt_forcemandatorylock),
+ 	fsparam_flag("forcemand", Opt_forcemandatorylock),
+ 	fsparam_flag("setuidfromacl", Opt_setuidfromacl),
+ 	fsparam_flag("idsfromsid", Opt_setuidfromacl),
+ 	fsparam_flag_no("setuids", Opt_setuids),
+ 	fsparam_flag_no("dynperm", Opt_dynperm),
+ 	fsparam_flag_no("intr", Opt_intr),
+ 	fsparam_flag_no("strictsync", Opt_strictsync),
+ 	fsparam_flag_no("serverino", Opt_serverino),
+ 	fsparam_flag("rwpidforward", Opt_rwpidforward),
+ 	fsparam_flag("cifsacl", Opt_cifsacl),
+ 	fsparam_flag_no("acl", Opt_acl),
+ 	fsparam_flag("locallease", Opt_locallease),
+ 	fsparam_flag("sign", Opt_sign),
+ 	fsparam_flag("ignore_signature", Opt_ignore_signature),
+ 	fsparam_flag("signloosely", Opt_ignore_signature),
+ 	fsparam_flag("seal", Opt_seal),
+ 	fsparam_flag("noac", Opt_noac),
+ 	fsparam_flag("fsc", Opt_fsc),
+ 	fsparam_flag("mfsymlinks", Opt_mfsymlinks),
+ 	fsparam_flag("multiuser", Opt_multiuser),
+ 	fsparam_flag("sloppy", Opt_sloppy),
+ 	fsparam_flag("nosharesock", Opt_nosharesock),
+ 	fsparam_flag_no("persistenthandles", Opt_persistent),
+ 	fsparam_flag_no("resilienthandles", Opt_resilient),
+ 	fsparam_flag("domainauto", Opt_domainauto),
+ 	fsparam_flag("rdma", Opt_rdma),
+ 	fsparam_flag("modesid", Opt_modesid),
+ 	fsparam_flag("modefromsid", Opt_modesid),
+ 	fsparam_flag("rootfs", Opt_rootfs),
+ 	fsparam_flag("compress", Opt_compress),
+ 	fsparam_flag("witness", Opt_witness),
+ 
+ 	/* Mount options which take numeric value */
+ 	fsparam_u32("backupuid", Opt_backupuid),
+ 	fsparam_u32("backupgid", Opt_backupgid),
+ 	fsparam_u32("uid", Opt_uid),
+ 	fsparam_u32("cruid", Opt_cruid),
+ 	fsparam_u32("gid", Opt_gid),
+ 	fsparam_u32("file_mode", Opt_file_mode),
+ 	fsparam_u32("dirmode", Opt_dirmode),
+ 	fsparam_u32("dir_mode", Opt_dirmode),
+ 	fsparam_u32("port", Opt_port),
+ 	fsparam_u32("min_enc_offload", Opt_min_enc_offload),
+ 	fsparam_u32("esize", Opt_min_enc_offload),
+ 	fsparam_u32("bsize", Opt_blocksize),
+ 	fsparam_u32("rsize", Opt_rsize),
+ 	fsparam_u32("wsize", Opt_wsize),
+ 	fsparam_u32("actimeo", Opt_actimeo),
+ 	fsparam_u32("echo_interval", Opt_echo_interval),
+ 	fsparam_u32("max_credits", Opt_max_credits),
+ 	fsparam_u32("handletimeout", Opt_handletimeout),
+ 	fsparam_u32("snapshot", Opt_snapshot),
+ 	fsparam_u32("max_channels", Opt_max_channels),
+ 
+ 	/* Mount options which take string value */
+ 	fsparam_string("source", Opt_source),
+ 	fsparam_string("unc", Opt_source),
+ 	fsparam_string("user", Opt_user),
+ 	fsparam_string("username", Opt_user),
+ 	fsparam_string("pass", Opt_pass),
+ 	fsparam_string("password", Opt_pass),
+ 	fsparam_string("ip", Opt_ip),
+ 	fsparam_string("addr", Opt_ip),
+ 	fsparam_string("domain", Opt_domain),
+ 	fsparam_string("dom", Opt_domain),
+ 	fsparam_string("srcaddr", Opt_srcaddr),
+ 	fsparam_string("iocharset", Opt_iocharset),
+ 	fsparam_string("netbiosname", Opt_netbiosname),
+ 	fsparam_string("servern", Opt_servern),
+ 	fsparam_string("ver", Opt_ver),
+ 	fsparam_string("vers", Opt_vers),
+ 	fsparam_string("sec", Opt_sec),
+ 	fsparam_string("cache", Opt_cache),
+ 
+ 	/* Arguments that should be ignored */
+ 	fsparam_flag("guest", Opt_ignore),
+ 	fsparam_flag("noatime", Opt_ignore),
+ 	fsparam_flag("relatime", Opt_ignore),
+ 	fsparam_flag("_netdev", Opt_ignore),
+ 	fsparam_flag_no("suid", Opt_ignore),
+ 	fsparam_flag_no("exec", Opt_ignore),
+ 	fsparam_flag_no("dev", Opt_ignore),
+ 	fsparam_flag_no("mand", Opt_ignore),
+ 	fsparam_flag_no("auto", Opt_ignore),
+ 	fsparam_string("cred", Opt_ignore),
+ 	fsparam_string("credentials", Opt_ignore),
+ 	fsparam_string("prefixpath", Opt_ignore),
+ 	{}
+ };
+ 
+ int
+ cifs_parse_security_flavors(char *value, struct smb3_fs_context *ctx)
++>>>>>>> c9b8cd6a39c4 (cifs: fix mounts to subdirectories of target)
  {
  
  	substring_t args[MAX_OPT_ARGS];
* Unmerged path fs/cifs/fs_context.c
