net: phy: export phy_error and phy_trigger_machine

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Ioana Ciornei <ioana.ciornei@nxp.com>
commit 293e9a3d950dfebc76d9fa6931e6f91ef856b9ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/293e9a3d.failed

These functions are currently used by phy_interrupt() to either signal
an error condition or to trigger the link state machine. In an attempt
to actually support shared PHY IRQs, export these two functions so that
the actual PHY drivers can use them.

	Cc: Alexandru Ardelean <alexandru.ardelean@analog.com>
	Cc: Andre Edich <andre.edich@microchip.com>
	Cc: Antoine Tenart <atenart@kernel.org>
	Cc: Baruch Siach <baruch@tkos.co.il>
	Cc: Christophe Leroy <christophe.leroy@c-s.fr>
	Cc: Dan Murphy <dmurphy@ti.com>
	Cc: Divya Koppera <Divya.Koppera@microchip.com>
	Cc: Florian Fainelli <f.fainelli@gmail.com>
	Cc: Hauke Mehrtens <hauke@hauke-m.de>
	Cc: Heiner Kallweit <hkallweit1@gmail.com>
	Cc: Jerome Brunet <jbrunet@baylibre.com>
	Cc: Kavya Sree Kotagiri <kavyasree.kotagiri@microchip.com>
	Cc: Linus Walleij <linus.walleij@linaro.org>
	Cc: Marco Felsch <m.felsch@pengutronix.de>
	Cc: Marek Vasut <marex@denx.de>
	Cc: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
	Cc: Mathias Kresin <dev@kresin.me>
	Cc: Maxim Kochetkov <fido_max@inbox.ru>
	Cc: Michael Walle <michael@walle.cc>
	Cc: Neil Armstrong <narmstrong@baylibre.com>
	Cc: Nisar Sayed <Nisar.Sayed@microchip.com>
	Cc: Oleksij Rempel <o.rempel@pengutronix.de>
	Cc: Philippe Schenker <philippe.schenker@toradex.com>
	Cc: Willy Liu <willy.liu@realtek.com>
	Cc: Yuiko Oshino <yuiko.oshino@microchip.com>
	Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 293e9a3d950dfebc76d9fa6931e6f91ef856b9ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy.c
diff --cc drivers/net/phy/phy.c
index 8fe4dc634b0d,477bdf2f94df..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -473,7 -488,12 +473,16 @@@ void phy_queue_state_machine(struct phy
  }
  EXPORT_SYMBOL(phy_queue_state_machine);
  
++<<<<<<< HEAD
 +static void phy_trigger_machine(struct phy_device *phydev)
++=======
+ /**
+  * phy_queue_state_machine - Trigger the state machine to run now
+  *
+  * @phydev: the phy_device struct
+  */
+ void phy_trigger_machine(struct phy_device *phydev)
++>>>>>>> 293e9a3d950d (net: phy: export phy_error and phy_trigger_machine)
  {
  	phy_queue_state_machine(phydev, 0);
  }
* Unmerged path drivers/net/phy/phy.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 367498a0fd7f..29a5f4fb6f83 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -1505,8 +1505,10 @@ int phy_driver_register(struct phy_driver *new_driver, struct module *owner);
 RH_KABI_FORCE_CHANGE(5)
 int phy_drivers_register(struct phy_driver *new_driver, int n,
 			 struct module *owner);
+void phy_error(struct phy_device *phydev);
 void phy_state_machine(struct work_struct *work);
 void phy_queue_state_machine(struct phy_device *phydev, unsigned long jiffies);
+void phy_trigger_machine(struct phy_device *phydev);
 void phy_mac_interrupt(struct phy_device *phydev);
 void phy_start_machine(struct phy_device *phydev);
 void phy_stop_machine(struct phy_device *phydev);
