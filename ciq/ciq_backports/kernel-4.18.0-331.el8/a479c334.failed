KVM: SVM: Condition sev_enabled and sev_es_enabled on CONFIG_KVM_AMD_SEV=y

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Sean Christopherson <seanjc@google.com>
commit a479c334842279cc099c1f73b6bc04b1528c79b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/a479c334.failed

Define sev_enabled and sev_es_enabled as 'false' and explicitly #ifdef
out all of sev_hardware_setup() if CONFIG_KVM_AMD_SEV=n.  This kills
three birds at once:

  - Makes sev_enabled and sev_es_enabled off by default if
    CONFIG_KVM_AMD_SEV=n.  Previously, they could be on by default if
    CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT=y, regardless of KVM SEV
    support.

  - Hides the sev and sev_es modules params when CONFIG_KVM_AMD_SEV=n.

  - Resolves a false positive -Wnonnull in __sev_recycle_asids() that is
    currently masked by the equivalent IS_ENABLED(CONFIG_KVM_AMD_SEV)
    check in svm_sev_enabled(), which will be dropped in a future patch.

Reviewed by: Tom Lendacky <thomas.lendacky@amd.com>
	Reviewed-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20210422021125.3417167-9-seanjc@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit a479c334842279cc099c1f73b6bc04b1528c79b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/sev.c
diff --cc arch/x86/kvm/svm/sev.c
index da2ae8d080f3,bb514d5421d9..000000000000
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@@ -28,6 -29,34 +28,37 @@@
  
  #define __ex(x) __kvm_handle_fault_on_reboot(x)
  
++<<<<<<< HEAD
++=======
+ #ifndef CONFIG_KVM_AMD_SEV
+ /*
+  * When this config is not defined, SEV feature is not supported and APIs in
+  * this file are not used but this file still gets compiled into the KVM AMD
+  * module.
+  *
+  * We will not have MISC_CG_RES_SEV and MISC_CG_RES_SEV_ES entries in the enum
+  * misc_res_type {} defined in linux/misc_cgroup.h.
+  *
+  * Below macros allow compilation to succeed.
+  */
+ #define MISC_CG_RES_SEV MISC_CG_RES_TYPES
+ #define MISC_CG_RES_SEV_ES MISC_CG_RES_TYPES
+ #endif
+ 
+ #ifdef CONFIG_KVM_AMD_SEV
+ /* enable/disable SEV support */
+ static bool sev_enabled = IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT);
+ module_param_named(sev, sev_enabled, bool, 0444);
+ 
+ /* enable/disable SEV-ES support */
+ static bool sev_es_enabled = IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT_ACTIVE_BY_DEFAULT);
+ module_param_named(sev_es, sev_es_enabled, bool, 0444);
+ #else
+ #define sev_enabled false
+ #define sev_es_enabled false
+ #endif /* CONFIG_KVM_AMD_SEV */
+ 
++>>>>>>> a479c3348422 (KVM: SVM: Condition sev_enabled and sev_es_enabled on CONFIG_KVM_AMD_SEV=y)
  static u8 sev_enc_bit;
  static int sev_flush_asids(void);
  static DECLARE_RWSEM(sev_deactivate_lock);
@@@ -1677,10 -1822,14 +1708,21 @@@ void __init sev_set_cpu_caps(void
  
  void __init sev_hardware_setup(void)
  {
++<<<<<<< HEAD
 +	unsigned int eax, ebx, ecx, edx;
 +	bool sev_es_supported = false;
 +	bool sev_supported = false;
 +
++=======
+ #ifdef CONFIG_KVM_AMD_SEV
+ 	unsigned int eax, ebx, ecx, edx, sev_asid_count, sev_es_asid_count;
+ 	bool sev_es_supported = false;
+ 	bool sev_supported = false;
+ 
+ 	if (!sev_enabled || !npt_enabled)
+ 		goto out;
+ 
++>>>>>>> a479c3348422 (KVM: SVM: Condition sev_enabled and sev_es_enabled on CONFIG_KVM_AMD_SEV=y)
  	/* Does the CPU support SEV? */
  	if (!boot_cpu_has(X86_FEATURE_SEV))
  		goto out;
@@@ -1732,8 -1889,9 +1774,14 @@@
  	sev_es_supported = true;
  
  out:
++<<<<<<< HEAD
 +	sev = sev_supported;
 +	sev_es = sev_es_supported;
++=======
+ 	sev_enabled = sev_supported;
+ 	sev_es_enabled = sev_es_supported;
+ #endif
++>>>>>>> a479c3348422 (KVM: SVM: Condition sev_enabled and sev_es_enabled on CONFIG_KVM_AMD_SEV=y)
  }
  
  void sev_hardware_teardown(void)
* Unmerged path arch/x86/kvm/svm/sev.c
