cifs: add an smb3_fs_context to cifs_sb

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-331.el8
commit-author Ronnie Sahlberg <lsahlber@redhat.com>
commit d17abdf7566566fc402c31899b353044a7ff3cf4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-331.el8/d17abdf7.failed

and populate it during mount in cifs_smb3_do_mount()

	Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
	Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
	Signed-off-by: Steve French <stfrench@microsoft.com>
(cherry picked from commit d17abdf7566566fc402c31899b353044a7ff3cf4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/cifsfs.c
#	fs/cifs/connect.c
diff --cc fs/cifs/cifsfs.c
index bb1bb435a156,7fe6502e1672..000000000000
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@@ -800,33 -785,46 +799,58 @@@ cifs_smb3_do_mount(struct file_system_t
  	 *	If CIFS_DEBUG && cifs_FYI
  	 */
  	if (cifsFYI)
 -		cifs_dbg(FYI, "Devname: %s flags: %d\n", old_ctx->UNC, flags);
 +		cifs_dbg(FYI, "Devname: %s flags: %d\n", dev_name, flags);
  	else
 -		cifs_info("Attempting to mount %s\n", old_ctx->UNC);
 +		cifs_info("Attempting to mount %s\n", dev_name);
  
++<<<<<<< HEAD
 +	ctx = cifs_get_volume_info((char *)data, dev_name, is_smb3);
 +	if (IS_ERR(ctx))
 +		return ERR_CAST(ctx);
 +
++=======
++>>>>>>> d17abdf75665 (cifs: add an smb3_fs_context to cifs_sb)
  	cifs_sb = kzalloc(sizeof(struct cifs_sb_info), GFP_KERNEL);
  	if (cifs_sb == NULL) {
  		root = ERR_PTR(-ENOMEM);
- 		goto out_nls;
+ 		goto out;
  	}
  
++<<<<<<< HEAD
 +	cifs_sb->mountdata = kstrndup(data, PAGE_SIZE, GFP_KERNEL);
++	if (cifs_sb->mountdata == NULL) {
++=======
+ 	cifs_sb->ctx = kzalloc(sizeof(struct smb3_fs_context), GFP_KERNEL);
+ 	if (!cifs_sb->ctx) {
++>>>>>>> d17abdf75665 (cifs: add an smb3_fs_context to cifs_sb)
+ 		root = ERR_PTR(-ENOMEM);
+ 		goto out;
+ 	}
+ 	rc = smb3_fs_context_dup(cifs_sb->ctx, old_ctx);
+ 	if (rc) {
+ 		root = ERR_PTR(rc);
+ 		goto out;
+ 	}
+ 
+ 	rc = cifs_setup_volume_info(cifs_sb->ctx);
+ 	if (rc) {
+ 		root = ERR_PTR(rc);
+ 		goto out;
+ 	}
+ 
+ 	cifs_sb->mountdata = kstrndup(cifs_sb->ctx->mount_options, PAGE_SIZE, GFP_KERNEL);
  	if (cifs_sb->mountdata == NULL) {
  		root = ERR_PTR(-ENOMEM);
- 		goto out_free;
+ 		goto out;
  	}
  
- 	rc = cifs_setup_cifs_sb(ctx, cifs_sb);
+ 	rc = cifs_setup_cifs_sb(cifs_sb->ctx, cifs_sb);
  	if (rc) {
  		root = ERR_PTR(rc);
- 		goto out_free;
+ 		goto out;
  	}
  
- 	rc = cifs_mount(cifs_sb, ctx);
+ 	rc = cifs_mount(cifs_sb, cifs_sb->ctx);
  	if (rc) {
  		if (!(flags & SB_SILENT))
  			cifs_dbg(VFS, "cifs_mount failed w/return code = %d\n",
@@@ -872,31 -870,15 +896,28 @@@
  out_super:
  	deactivate_locked_super(sb);
  out:
- 	cifs_cleanup_volume_info(ctx);
+ 	if (cifs_sb) {
+ 		kfree(cifs_sb->prepath);
+ 		kfree(cifs_sb->mountdata);
+ 		cifs_cleanup_volume_info(cifs_sb->ctx);
+ 		kfree(cifs_sb);
+ 	}
  	return root;
- 
- out_free:
- 	kfree(cifs_sb->prepath);
- 	kfree(cifs_sb->mountdata);
- 	kfree(cifs_sb);
- out_nls:
- 	unload_nls(ctx->local_nls);
- 	goto out;
  }
  
 +static struct dentry *
 +smb3_do_mount(struct file_system_type *fs_type,
 +	      int flags, const char *dev_name, void *data)
 +{
 +	return cifs_smb3_do_mount(fs_type, flags, dev_name, data, true);
 +}
 +
 +static struct dentry *
 +cifs_do_mount(struct file_system_type *fs_type,
 +	      int flags, const char *dev_name, void *data)
 +{
 +	return cifs_smb3_do_mount(fs_type, flags, dev_name, data, false);
 +}
  
  static ssize_t
  cifs_loose_read_iter(struct kiocb *iocb, struct iov_iter *iter)
diff --cc fs/cifs/connect.c
index aef3c1f69972,5146c4645537..000000000000
--- a/fs/cifs/connect.c
+++ b/fs/cifs/connect.c
@@@ -3902,12 -2799,31 +3902,30 @@@ int cifs_setup_cifs_sb(struct smb3_fs_c
  void
  cifs_cleanup_volume_info_contents(struct smb3_fs_context *ctx)
  {
++<<<<<<< HEAD
++=======
+ 	if (ctx == NULL)
+ 		return;
+ 
+ 	/*
+ 	 * Make sure this stays in sync with smb3_fs_context_dup()
+ 	 */
+ 	kfree(ctx->mount_options);
+ 	ctx->mount_options = NULL;
++>>>>>>> d17abdf75665 (cifs: add an smb3_fs_context to cifs_sb)
  	kfree(ctx->username);
 -	ctx->username = NULL;
  	kfree_sensitive(ctx->password);
 -	ctx->password = NULL;
  	kfree(ctx->UNC);
 -	ctx->UNC = NULL;
  	kfree(ctx->domainname);
 -	ctx->domainname = NULL;
 -	kfree(ctx->nodename);
 -	ctx->nodename = NULL;
  	kfree(ctx->iocharset);
 -	ctx->iocharset = NULL;
  	kfree(ctx->prepath);
++<<<<<<< HEAD
++=======
+ 	ctx->prepath = NULL;
+ 
+ 	unload_nls(ctx->local_nls);
+ 	ctx->local_nls = NULL;
++>>>>>>> d17abdf75665 (cifs: add an smb3_fs_context to cifs_sb)
  }
  
  void
diff --git a/fs/cifs/cifs_fs_sb.h b/fs/cifs/cifs_fs_sb.h
index 6e7c4427369d..34d0229c0519 100644
--- a/fs/cifs/cifs_fs_sb.h
+++ b/fs/cifs/cifs_fs_sb.h
@@ -61,6 +61,7 @@ struct cifs_sb_info {
 	spinlock_t tlink_tree_lock;
 	struct tcon_link *master_tlink;
 	struct nls_table *local_nls;
+	struct smb3_fs_context *ctx;
 	unsigned int bsize;
 	unsigned int rsize;
 	unsigned int wsize;
* Unmerged path fs/cifs/cifsfs.c
* Unmerged path fs/cifs/connect.c
