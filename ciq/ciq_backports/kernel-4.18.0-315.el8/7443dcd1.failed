nl80211: Unsolicited broadcast probe response support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Aloka Dixit <alokad@codeaurora.org>
commit 7443dcd1f1718a355e9c4ebeb7e95c3f9f27bb5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/7443dcd1.failed

This patch adds new attributes to support unsolicited broadcast
probe response transmission used for in-band
discovery in 6GHz band (IEEE P802.11ax/D6.0 26.17.2.3.2, AP behavior for
fast passive scanning).
The new attribute, NL80211_ATTR_UNSOL_BCAST_PROBE_RESP, is nested which
supports following parameters:
(1) NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT - Packet interval
(2) NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL - Template data

	Signed-off-by: Aloka Dixit <alokad@codeaurora.org>
Link: https://lore.kernel.org/r/010101747a946698-aac263ae-2ed3-4dab-9590-0bc7131214e1-000000@us-west-2.amazonses.com
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 7443dcd1f1718a355e9c4ebeb7e95c3f9f27bb5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/cfg80211.h
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/net/cfg80211.h
index 26c5ec1fcbf8,93d666a571da..000000000000
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@@ -1083,6 -1083,39 +1083,42 @@@ struct cfg80211_acl_data 
  };
  
  /**
++<<<<<<< HEAD
++=======
+  * struct cfg80211_fils_discovery - FILS discovery parameters from
+  * IEEE Std 802.11ai-2016, Annex C.3 MIB detail.
+  *
+  * @min_interval: Minimum packet interval in TUs (0 - 10000)
+  * @max_interval: Maximum packet interval in TUs (0 - 10000)
+  * @tmpl_len: Template length
+  * @tmpl: Template data for FILS discovery frame including the action
+  *	frame headers.
+  */
+ struct cfg80211_fils_discovery {
+ 	u32 min_interval;
+ 	u32 max_interval;
+ 	size_t tmpl_len;
+ 	const u8 *tmpl;
+ };
+ 
+ /**
+  * struct cfg80211_unsol_bcast_probe_resp - Unsolicited broadcast probe
+  *	response parameters in 6GHz.
+  *
+  * @interval: Packet interval in TUs. Maximum allowed is 20 TU, as mentioned
+  *	in IEEE P802.11ax/D6.0 26.17.2.3.2 - AP behavior for fast passive
+  *	scanning
+  * @tmpl_len: Template length
+  * @tmpl: Template data for probe response
+  */
+ struct cfg80211_unsol_bcast_probe_resp {
+ 	u32 interval;
+ 	size_t tmpl_len;
+ 	const u8 *tmpl;
+ };
+ 
+ /**
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
   * enum cfg80211_ap_settings_flags - AP settings flags
   *
   * Used by cfg80211_ap_settings
@@@ -1129,6 -1162,8 +1165,11 @@@ enum cfg80211_ap_settings_flags 
   * @he_obss_pd: OBSS Packet Detection settings
   * @he_bss_color: BSS Color settings
   * @he_oper: HE operation IE (or %NULL if HE isn't enabled)
++<<<<<<< HEAD
++=======
+  * @fils_discovery: FILS discovery transmission parameters
+  * @unsol_bcast_probe_resp: Unsolicited broadcast probe response parameters
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
   */
  struct cfg80211_ap_settings {
  	struct cfg80211_chan_def chandef;
@@@ -1159,6 -1194,8 +1200,11 @@@
  	u32 flags;
  	struct ieee80211_he_obss_pd he_obss_pd;
  	struct cfg80211_he_bss_color he_bss_color;
++<<<<<<< HEAD
++=======
+ 	struct cfg80211_fils_discovery fils_discovery;
+ 	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  };
  
  /**
diff --cc include/uapi/linux/nl80211.h
index 6ed13383feb2,bdc90b8dfd24..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2503,6 -2513,14 +2503,17 @@@ enum nl80211_commands 
   * @NL80211_ATTR_HE_6GHZ_CAPABILITY: HE 6 GHz Band Capability element (from
   *	association request when used with NL80211_CMD_NEW_STATION).
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_ATTR_FILS_DISCOVERY: Optional parameter to configure FILS
+  *	discovery. It is a nested attribute, see
+  *	&enum nl80211_fils_discovery_attributes.
+  *
+  * @NL80211_ATTR_UNSOL_BCAST_PROBE_RESP: Optional parameter to configure
+  *	unsolicited broadcast probe response. It is a nested attribute, see
+  *	&enum nl80211_unsol_bcast_probe_resp_attributes.
+  *
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -2985,6 -3003,10 +2996,13 @@@ enum nl80211_attrs 
  
  	NL80211_ATTR_HE_6GHZ_CAPABILITY,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_FILS_DISCOVERY,
+ 
+ 	NL80211_ATTR_UNSOL_BCAST_PROBE_RESP,
+ 
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
@@@ -5857,6 -5879,12 +5875,15 @@@ enum nl80211_feature_flags 
   * @NL80211_EXT_FEATURE_SAE_OFFLOAD_AP: Device wants to do SAE authentication
   *	in AP mode (SAE password is passed as part of the start AP command).
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_EXT_FEATURE_FILS_DISCOVERY: Driver/device supports FILS discovery
+  *	frames transmission
+  *
+  * @NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP: Driver/device supports
+  *	unsolicited broadcast probe response transmission
+  *
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
   * @NUM_NL80211_EXT_FEATURES: number of extended features.
   * @MAX_NL80211_EXT_FEATURES: highest extended feature index.
   */
@@@ -5915,6 -5943,8 +5942,11 @@@ enum nl80211_ext_feature_index 
  	NL80211_EXT_FEATURE_OPERATING_CHANNEL_VALIDATION,
  	NL80211_EXT_FEATURE_4WAY_HANDSHAKE_AP_PSK,
  	NL80211_EXT_FEATURE_SAE_OFFLOAD_AP,
++<<<<<<< HEAD
++=======
+ 	NL80211_EXT_FEATURE_FILS_DISCOVERY,
+ 	NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP,
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  
  	/* add new features before the definition below */
  	NUM_NL80211_EXT_FEATURES,
@@@ -7012,4 -7039,64 +7044,67 @@@ enum nl80211_iftype_akm_attributes 
  	NL80211_IFTYPE_AKM_ATTR_MAX = __NL80211_IFTYPE_AKM_ATTR_LAST - 1,
  };
  
++<<<<<<< HEAD
++=======
+ /**
+  * enum nl80211_fils_discovery_attributes - FILS discovery configuration
+  * from IEEE Std 802.11ai-2016, Annex C.3 MIB detail.
+  *
+  * @__NL80211_FILS_DISCOVERY_ATTR_INVALID: Invalid
+  *
+  * @NL80211_FILS_DISCOVERY_ATTR_INT_MIN: Minimum packet interval (u32, TU).
+  *	Allowed range: 0..10000 (TU = Time Unit)
+  * @NL80211_FILS_DISCOVERY_ATTR_INT_MAX: Maximum packet interval (u32, TU).
+  *	Allowed range: 0..10000 (TU = Time Unit)
+  * @NL80211_FILS_DISCOVERY_ATTR_TMPL: Template data for FILS discovery action
+  *	frame including the headers.
+  *
+  * @__NL80211_FILS_DISCOVERY_ATTR_LAST: Internal
+  * @NL80211_FILS_DISCOVERY_ATTR_MAX: highest attribute
+  */
+ enum nl80211_fils_discovery_attributes {
+ 	__NL80211_FILS_DISCOVERY_ATTR_INVALID,
+ 
+ 	NL80211_FILS_DISCOVERY_ATTR_INT_MIN,
+ 	NL80211_FILS_DISCOVERY_ATTR_INT_MAX,
+ 	NL80211_FILS_DISCOVERY_ATTR_TMPL,
+ 
+ 	/* keep last */
+ 	__NL80211_FILS_DISCOVERY_ATTR_LAST,
+ 	NL80211_FILS_DISCOVERY_ATTR_MAX = __NL80211_FILS_DISCOVERY_ATTR_LAST - 1
+ };
+ 
+ /*
+  * FILS discovery template minimum length with action frame headers and
+  * mandatory fields.
+  */
+ #define NL80211_FILS_DISCOVERY_TMPL_MIN_LEN 42
+ 
+ /**
+  * enum nl80211_unsol_bcast_probe_resp_attributes - Unsolicited broadcast probe
+  *	response configuration. Applicable only in 6GHz.
+  *
+  * @__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID: Invalid
+  *
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT: Maximum packet interval (u32, TU).
+  *	Allowed range: 0..20 (TU = Time Unit). IEEE P802.11ax/D6.0
+  *	26.17.2.3.2 (AP behavior for fast passive scanning).
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL: Unsolicited broadcast probe response
+  *	frame template (binary).
+  *
+  * @__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST: Internal
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX: highest attribute
+  */
+ enum nl80211_unsol_bcast_probe_resp_attributes {
+ 	__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID,
+ 
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT,
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL,
+ 
+ 	/* keep last */
+ 	__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST,
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX =
+ 		__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST - 1
+ };
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  #endif /* __LINUX_NL80211_H */
diff --cc net/wireless/nl80211.c
index 3aa21ce8a956,1a212db7a300..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -376,6 -376,22 +376,25 @@@ nl80211_tid_config_attr_policy[NL80211_
  			NLA_POLICY_NESTED(nl80211_txattr_policy),
  };
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy
+ nl80211_fils_discovery_policy[NL80211_FILS_DISCOVERY_ATTR_MAX + 1] = {
+ 	[NL80211_FILS_DISCOVERY_ATTR_INT_MIN] = NLA_POLICY_MAX(NLA_U32, 10000),
+ 	[NL80211_FILS_DISCOVERY_ATTR_INT_MAX] = NLA_POLICY_MAX(NLA_U32, 10000),
+ 	NLA_POLICY_RANGE(NLA_BINARY,
+ 			 NL80211_FILS_DISCOVERY_TMPL_MIN_LEN,
+ 			 IEEE80211_MAX_DATA_LEN),
+ };
+ 
+ static const struct nla_policy
+ nl80211_unsol_bcast_probe_resp_policy[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX + 1] = {
+ 	[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT] = NLA_POLICY_MAX(NLA_U32, 20),
+ 	[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL] = { .type = NLA_BINARY,
+ 						       .len = IEEE80211_MAX_DATA_LEN }
+ };
+ 
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
  	[0] = { .strict_start_type = NL80211_ATTR_HE_OBSS_PD },
  	[NL80211_ATTR_WIPHY] = { .type = NLA_U32 },
@@@ -682,10 -698,12 +701,19 @@@
  	[NL80211_ATTR_RECEIVE_MULTICAST] = { .type = NLA_FLAG },
  	[NL80211_ATTR_WIPHY_FREQ_OFFSET] = NLA_POLICY_RANGE(NLA_U32, 0, 999),
  	[NL80211_ATTR_SCAN_FREQ_KHZ] = { .type = NLA_NESTED },
++<<<<<<< HEAD
 +	[NL80211_ATTR_HE_6GHZ_CAPABILITY] = {
 +		.type = NLA_EXACT_LEN,
 +		.len = sizeof(struct ieee80211_he_6ghz_capa),
 +	},
++=======
+ 	[NL80211_ATTR_HE_6GHZ_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(sizeof(struct ieee80211_he_6ghz_capa)),
+ 	[NL80211_ATTR_FILS_DISCOVERY] =
+ 		NLA_POLICY_NESTED(nl80211_fils_discovery_policy),
+ 	[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP] =
+ 		NLA_POLICY_NESTED(nl80211_unsol_bcast_probe_resp_policy),
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  };
  
  /* policy for the key attributes */
@@@ -4877,6 -4894,65 +4905,68 @@@ static int nl80211_parse_he_bss_color(s
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int nl80211_parse_fils_discovery(struct cfg80211_registered_device *rdev,
+ 					struct nlattr *attrs,
+ 					struct cfg80211_ap_settings *params)
+ {
+ 	struct nlattr *tb[NL80211_FILS_DISCOVERY_ATTR_MAX + 1];
+ 	int ret;
+ 	struct cfg80211_fils_discovery *fd = &params->fils_discovery;
+ 
+ 	if (!wiphy_ext_feature_isset(&rdev->wiphy,
+ 				     NL80211_EXT_FEATURE_FILS_DISCOVERY))
+ 		return -EINVAL;
+ 
+ 	ret = nla_parse_nested(tb, NL80211_FILS_DISCOVERY_ATTR_MAX, attrs,
+ 			       NULL, NULL);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (!tb[NL80211_FILS_DISCOVERY_ATTR_INT_MIN] ||
+ 	    !tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX] ||
+ 	    !tb[NL80211_FILS_DISCOVERY_ATTR_TMPL])
+ 		return -EINVAL;
+ 
+ 	fd->tmpl_len = nla_len(tb[NL80211_FILS_DISCOVERY_ATTR_TMPL]);
+ 	fd->tmpl = nla_data(tb[NL80211_FILS_DISCOVERY_ATTR_TMPL]);
+ 	fd->min_interval = nla_get_u32(tb[NL80211_FILS_DISCOVERY_ATTR_INT_MIN]);
+ 	fd->max_interval = nla_get_u32(tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX]);
+ 
+ 	return 0;
+ }
+ 
+ static int
+ nl80211_parse_unsol_bcast_probe_resp(struct cfg80211_registered_device *rdev,
+ 				     struct nlattr *attrs,
+ 				     struct cfg80211_ap_settings *params)
+ {
+ 	struct nlattr *tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX + 1];
+ 	int ret;
+ 	struct cfg80211_unsol_bcast_probe_resp *presp =
+ 					&params->unsol_bcast_probe_resp;
+ 
+ 	if (!wiphy_ext_feature_isset(&rdev->wiphy,
+ 				     NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP))
+ 		return -EINVAL;
+ 
+ 	ret = nla_parse_nested(tb, NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX,
+ 			       attrs, NULL, NULL);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (!tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT] ||
+ 	    !tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL])
+ 		return -EINVAL;
+ 
+ 	presp->tmpl = nla_data(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL]);
+ 	presp->tmpl_len = nla_len(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL]);
+ 	presp->interval = nla_get_u32(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT]);
+ 	return 0;
+ }
+ 
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  static void nl80211_check_ap_rate_selectors(struct cfg80211_ap_settings *params,
  					    const u8 *rates)
  {
@@@ -5185,6 -5261,22 +5275,25 @@@ static int nl80211_start_ap(struct sk_b
  			goto out;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (info->attrs[NL80211_ATTR_FILS_DISCOVERY]) {
+ 		err = nl80211_parse_fils_discovery(rdev,
+ 						   info->attrs[NL80211_ATTR_FILS_DISCOVERY],
+ 						   &params);
+ 		if (err)
+ 			goto out;
+ 	}
+ 
+ 	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
+ 		err = nl80211_parse_unsol_bcast_probe_resp(
+ 			rdev, info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
+ 			&params);
+ 		if (err)
+ 			return err;
+ 	}
+ 
++>>>>>>> 7443dcd1f171 (nl80211: Unsolicited broadcast probe response support)
  	nl80211_calculate_ap_params(&params);
  
  	if (info->attrs[NL80211_ATTR_EXTERNAL_AUTH_SUPPORT])
* Unmerged path include/net/cfg80211.h
* Unmerged path include/uapi/linux/nl80211.h
* Unmerged path net/wireless/nl80211.c
