bpf: Change bpf_sk_storage_*() to accept ARG_PTR_TO_BTF_ID_SOCK_COMMON

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 592a3498648af000e93dff2d36229ab11cd8c7f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/592a3498.failed

This patch changes the bpf_sk_storage_*() to take
ARG_PTR_TO_BTF_ID_SOCK_COMMON such that they will work with the pointer
returned by the bpf_skc_to_*() helpers also.

A micro benchmark has been done on a "cgroup_skb/egress" bpf program
which does a bpf_sk_storage_get().  It was driven by netperf doing
a 4096 connected UDP_STREAM test with 64bytes packet.
The stats from "kernel.bpf_stats_enabled" shows no meaningful difference.

The sk_storage_get_btf_proto, sk_storage_delete_btf_proto,
btf_sk_storage_get_proto, and btf_sk_storage_delete_proto are
no longer needed, so they are removed.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Lorenz Bauer <lmb@cloudflare.com>
Link: https://lore.kernel.org/bpf/20200925000402.3856307-1-kafai@fb.com
(cherry picked from commit 592a3498648af000e93dff2d36229ab11cd8c7f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/bpf_sk_storage.c
#	net/ipv4/bpf_tcp_ca.c
diff --cc net/core/bpf_sk_storage.c
index 9e9e9328f00b,c907f0dc7f87..000000000000
--- a/net/core/bpf_sk_storage.c
+++ b/net/core/bpf_sk_storage.c
@@@ -879,9 -267,9 +879,9 @@@ out
  BPF_CALL_4(bpf_sk_storage_get, struct bpf_map *, map, struct sock *, sk,
  	   void *, value, u64, flags)
  {
 -	struct bpf_local_storage_data *sdata;
 +	struct bpf_sk_storage_data *sdata;
  
- 	if (flags > BPF_SK_STORAGE_GET_F_CREATE)
+ 	if (!sk || !sk_fullsock(sk) || flags > BPF_SK_STORAGE_GET_F_CREATE)
  		return (unsigned long)NULL;
  
  	sdata = sk_storage_lookup(sk, map, true);
@@@ -959,31 -378,7 +962,35 @@@ const struct bpf_func_proto bpf_sk_stor
  	.gpl_only	= false,
  	.ret_type	= RET_INTEGER,
  	.arg1_type	= ARG_CONST_MAP_PTR,
++<<<<<<< HEAD
 +	.arg2_type	= ARG_PTR_TO_SOCKET,
 +};
 +
 +BTF_ID_LIST(sk_storage_btf_ids)
 +BTF_ID_UNUSED
 +BTF_ID(struct, sock)
 +
 +const struct bpf_func_proto sk_storage_get_btf_proto = {
 +	.func		= bpf_sk_storage_get,
 +	.gpl_only	= false,
 +	.ret_type	= RET_PTR_TO_MAP_VALUE_OR_NULL,
 +	.arg1_type	= ARG_CONST_MAP_PTR,
 +	.arg2_type	= ARG_PTR_TO_BTF_ID,
 +	.arg3_type	= ARG_PTR_TO_MAP_VALUE_OR_NULL,
 +	.arg4_type	= ARG_ANYTHING,
 +	.btf_id		= sk_storage_btf_ids,
 +};
 +
 +const struct bpf_func_proto sk_storage_delete_btf_proto = {
 +	.func		= bpf_sk_storage_delete,
 +	.gpl_only	= false,
 +	.ret_type	= RET_INTEGER,
 +	.arg1_type	= ARG_CONST_MAP_PTR,
 +	.arg2_type	= ARG_PTR_TO_BTF_ID,
 +	.btf_id		= sk_storage_btf_ids,
++=======
+ 	.arg2_type	= ARG_PTR_TO_BTF_ID_SOCK_COMMON,
++>>>>>>> 592a3498648a (bpf: Change bpf_sk_storage_*() to accept ARG_PTR_TO_BTF_ID_SOCK_COMMON)
  };
  
  struct bpf_sk_storage_diag {
diff --cc net/ipv4/bpf_tcp_ca.c
index e7cb7c3516a4,618954f82764..000000000000
--- a/net/ipv4/bpf_tcp_ca.c
+++ b/net/ipv4/bpf_tcp_ca.c
@@@ -30,27 -28,6 +30,30 @@@ static u32 unsupported_ops[] = 
  static const struct btf_type *tcp_sock_type;
  static u32 tcp_sock_id, sock_id;
  
++<<<<<<< HEAD
 +static int btf_sk_storage_get_ids[5];
 +static struct bpf_func_proto btf_sk_storage_get_proto __read_mostly;
 +
 +static int btf_sk_storage_delete_ids[5];
 +static struct bpf_func_proto btf_sk_storage_delete_proto __read_mostly;
 +
 +static void convert_sk_func_proto(struct bpf_func_proto *to, int *to_btf_ids,
 +				  const struct bpf_func_proto *from)
 +{
 +	int i;
 +
 +	*to = *from;
 +	to->btf_id = to_btf_ids;
 +	for (i = 0; i < ARRAY_SIZE(to->arg_type); i++) {
 +		if (to->arg_type[i] == ARG_PTR_TO_SOCKET) {
 +			to->arg_type[i] = ARG_PTR_TO_BTF_ID;
 +			to->btf_id[i] = tcp_sock_id;
 +		}
 +	}
 +}
 +
++=======
++>>>>>>> 592a3498648a (bpf: Change bpf_sk_storage_*() to accept ARG_PTR_TO_BTF_ID_SOCK_COMMON)
  static int bpf_tcp_ca_init(struct btf *btf)
  {
  	s32 type_id;
@@@ -66,13 -43,6 +69,16 @@@
  	tcp_sock_id = type_id;
  	tcp_sock_type = btf_type_by_id(btf, tcp_sock_id);
  
++<<<<<<< HEAD
 +	convert_sk_func_proto(&btf_sk_storage_get_proto,
 +			      btf_sk_storage_get_ids,
 +			      &bpf_sk_storage_get_proto);
 +	convert_sk_func_proto(&btf_sk_storage_delete_proto,
 +			      btf_sk_storage_delete_ids,
 +			      &bpf_sk_storage_delete_proto);
 +
++=======
++>>>>>>> 592a3498648a (bpf: Change bpf_sk_storage_*() to accept ARG_PTR_TO_BTF_ID_SOCK_COMMON)
  	return 0;
  }
  
diff --git a/include/net/bpf_sk_storage.h b/include/net/bpf_sk_storage.h
index d231da1b57ca..5036c94c0503 100644
--- a/include/net/bpf_sk_storage.h
+++ b/include/net/bpf_sk_storage.h
@@ -9,8 +9,6 @@ void bpf_sk_storage_free(struct sock *sk);
 
 extern const struct bpf_func_proto bpf_sk_storage_get_proto;
 extern const struct bpf_func_proto bpf_sk_storage_delete_proto;
-extern const struct bpf_func_proto sk_storage_get_btf_proto;
-extern const struct bpf_func_proto sk_storage_delete_btf_proto;
 
 struct bpf_sk_storage_diag;
 struct sk_buff;
diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 435bb5523e6b..8f93ab22360c 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -2870,6 +2870,7 @@ union bpf_attr {
  *		0 on success.
  *
  *		**-ENOENT** if the bpf-local-storage cannot be found.
+ *		**-EINVAL** if sk is not a fullsock (e.g. a request_sock).
  *
  * long bpf_send_signal(u32 sig)
  *	Description
diff --git a/kernel/bpf/bpf_lsm.c b/kernel/bpf/bpf_lsm.c
index 9cd1428c7199..78ea8a7bd27f 100644
--- a/kernel/bpf/bpf_lsm.c
+++ b/kernel/bpf/bpf_lsm.c
@@ -56,9 +56,9 @@ bpf_lsm_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 	case BPF_FUNC_inode_storage_delete:
 		return &bpf_inode_storage_delete_proto;
 	case BPF_FUNC_sk_storage_get:
-		return &sk_storage_get_btf_proto;
+		return &bpf_sk_storage_get_proto;
 	case BPF_FUNC_sk_storage_delete:
-		return &sk_storage_delete_btf_proto;
+		return &bpf_sk_storage_delete_proto;
 	default:
 		return tracing_prog_func_proto(func_id, prog);
 	}
* Unmerged path net/core/bpf_sk_storage.c
* Unmerged path net/ipv4/bpf_tcp_ca.c
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index e4376401002a..2cee708acba5 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -2850,6 +2850,7 @@ union bpf_attr {
  *		0 on success.
  *
  *		**-ENOENT** if the bpf-local-storage cannot be found.
+ *		**-EINVAL** if sk is not a fullsock (e.g. a request_sock).
  *
  * long bpf_send_signal(u32 sig)
  *	Description
