bpf: Use a table to drive helper arg type checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenz Bauer <lmb@cloudflare.com>
commit f79e7ea571732a6e16f15c6e2f000c347e2d7431
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/f79e7ea5.failed

The mapping between bpf_arg_type and bpf_reg_type is encoded in a big
hairy if statement that is hard to follow. The debug output also leaves
to be desired: if a reg_type doesn't match we only print one of the
options, instead printing all the valid ones.

Convert the if statement into a table which is then used to drive type
checking. If none of the reg_types match we print all options, e.g.:

    R2 type=rdonly_buf expected=fp, pkt, pkt_meta, map_value

	Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20200921121227.255763-12-lmb@cloudflare.com
(cherry picked from commit f79e7ea571732a6e16f15c6e2f000c347e2d7431)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 41ae364d39c2,15ab889b0a3f..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -3977,135 -4092,57 +4072,189 @@@ static int check_func_arg(struct bpf_ve
  			return err;
  	}
  
++<<<<<<< HEAD
 +	if (arg_type == ARG_PTR_TO_MAP_KEY ||
 +	    arg_type == ARG_PTR_TO_MAP_VALUE ||
 +	    arg_type == ARG_PTR_TO_UNINIT_MAP_VALUE ||
 +	    arg_type == ARG_PTR_TO_MAP_VALUE_OR_NULL) {
 +		expected_type = PTR_TO_STACK;
 +		if (register_is_null(reg) &&
 +		    arg_type == ARG_PTR_TO_MAP_VALUE_OR_NULL)
 +			/* final test in check_stack_boundary() */;
 +		else if (!type_is_pkt_pointer(type) &&
 +			 type != PTR_TO_MAP_VALUE &&
 +			 type != expected_type)
 +			goto err_type;
 +	} else if (arg_type == ARG_CONST_SIZE ||
 +		   arg_type == ARG_CONST_SIZE_OR_ZERO ||
 +		   arg_type == ARG_CONST_ALLOC_SIZE_OR_ZERO) {
 +		expected_type = SCALAR_VALUE;
 +		if (type != expected_type)
 +			goto err_type;
 +	} else if (arg_type == ARG_CONST_MAP_PTR) {
 +		expected_type = CONST_PTR_TO_MAP;
 +		if (type != expected_type)
 +			goto err_type;
 +	} else if (arg_type == ARG_PTR_TO_CTX ||
 +		   arg_type == ARG_PTR_TO_CTX_OR_NULL) {
 +		expected_type = PTR_TO_CTX;
 +		if (!(register_is_null(reg) &&
 +		      arg_type == ARG_PTR_TO_CTX_OR_NULL)) {
 +			if (type != expected_type)
 +				goto err_type;
 +			err = check_ctx_reg(env, reg, regno);
 +			if (err < 0)
 +				return err;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_SOCK_COMMON) {
 +		expected_type = PTR_TO_SOCK_COMMON;
 +		/* Any sk pointer can be ARG_PTR_TO_SOCK_COMMON */
 +		if (!type_is_sk_pointer(type))
 +			goto err_type;
 +		if (reg->ref_obj_id) {
 +			if (meta->ref_obj_id) {
 +				verbose(env, "verifier internal error: more than one arg with ref_obj_id R%d %u %u\n",
 +					regno, reg->ref_obj_id,
 +					meta->ref_obj_id);
 +				return -EFAULT;
 +			}
 +			meta->ref_obj_id = reg->ref_obj_id;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_SOCKET ||
 +		   arg_type == ARG_PTR_TO_SOCKET_OR_NULL) {
 +		expected_type = PTR_TO_SOCKET;
 +		if (!(register_is_null(reg) &&
 +		      arg_type == ARG_PTR_TO_SOCKET_OR_NULL)) {
 +			if (type != expected_type)
 +				goto err_type;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_BTF_ID) {
 +		bool ids_match = false;
 +
 +		expected_type = PTR_TO_BTF_ID;
 +		if (type != expected_type)
 +			goto err_type;
 +		if (!fn->check_btf_id) {
 +			if (reg->btf_id != meta->btf_id) {
 +				ids_match = btf_struct_ids_match(&env->log, reg->off, reg->btf_id,
 +								 meta->btf_id);
 +				if (!ids_match) {
 +					verbose(env, "Helper has type %s got %s in R%d\n",
 +						kernel_type_name(meta->btf_id),
 +						kernel_type_name(reg->btf_id), regno);
 +					return -EACCES;
 +				}
 +			}
 +		} else if (!fn->check_btf_id(reg->btf_id, arg)) {
 +			verbose(env, "Helper does not support %s in R%d\n",
 +				kernel_type_name(reg->btf_id), regno);
 +
 +			return -EACCES;
 +		}
 +		if ((reg->off && !ids_match) || !tnum_is_const(reg->var_off) || reg->var_off.value) {
 +			verbose(env, "R%d is a pointer to in-kernel struct with non-zero offset\n",
 +				regno);
 +			return -EACCES;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_SPIN_LOCK) {
 +		expected_type = PTR_TO_MAP_VALUE;
 +		if (type != expected_type)
 +			goto err_type;
 +	} else if (arg_type_is_mem_ptr(arg_type)) {
 +		expected_type = PTR_TO_STACK;
 +		/* One exception here. In case function allows for NULL to be
 +		 * passed in as argument, it's a SCALAR_VALUE type. Final test
 +		 * happens during stack boundary checking.
 +		 */
 +		if (register_is_null(reg) &&
 +		    (arg_type == ARG_PTR_TO_MEM_OR_NULL ||
 +		     arg_type == ARG_PTR_TO_ALLOC_MEM_OR_NULL))
 +			/* final test in check_stack_boundary() */;
 +		else if (!type_is_pkt_pointer(type) &&
 +			 type != PTR_TO_MAP_VALUE &&
 +			 type != PTR_TO_MEM &&
 +			 type != PTR_TO_RDONLY_BUF &&
 +			 type != PTR_TO_RDWR_BUF &&
 +			 type != expected_type)
 +			goto err_type;
 +	} else if (arg_type_is_alloc_mem_ptr(arg_type)) {
 +		expected_type = PTR_TO_MEM;
 +		if (register_is_null(reg) &&
 +		    arg_type == ARG_PTR_TO_ALLOC_MEM_OR_NULL)
 +			/* final test in check_stack_boundary() */;
 +		else if (type != expected_type)
 +			goto err_type;
 +		if (meta->ref_obj_id) {
 +			verbose(env, "verifier internal error: more than one arg with ref_obj_id R%d %u %u\n",
 +				regno, reg->ref_obj_id,
 +				meta->ref_obj_id);
 +			return -EFAULT;
 +		}
 +		meta->ref_obj_id = reg->ref_obj_id;
 +	} else if (arg_type_is_int_ptr(arg_type)) {
 +		expected_type = PTR_TO_STACK;
 +		if (!type_is_pkt_pointer(type) &&
 +		    type != PTR_TO_MAP_VALUE &&
 +		    type != expected_type)
 +			goto err_type;
 +	} else {
 +		verbose(env, "unsupported arg_type %d\n", arg_type);
 +		return -EFAULT;
 +	}
 +
++=======
+ 	if (register_is_null(reg) && arg_type_may_be_null(arg_type))
+ 		/* A NULL register has a SCALAR_VALUE type, so skip
+ 		 * type checking.
+ 		 */
+ 		goto skip_type_check;
+ 
+ 	compatible = compatible_reg_types[arg_type];
+ 	if (!compatible) {
+ 		verbose(env, "verifier internal error: unsupported arg type %d\n", arg_type);
+ 		return -EFAULT;
+ 	}
+ 
+ 	err = check_reg_type(env, regno, compatible);
+ 	if (err)
+ 		return err;
+ 
+ 	if (type == PTR_TO_BTF_ID) {
+ 		const u32 *btf_id = fn->arg_btf_id[arg];
+ 
+ 		if (!btf_id) {
+ 			verbose(env, "verifier internal error: missing BTF ID\n");
+ 			return -EFAULT;
+ 		}
+ 
+ 		if (!btf_struct_ids_match(&env->log, reg->off, reg->btf_id, *btf_id)) {
+ 			verbose(env, "R%d is of type %s but %s is expected\n",
+ 				regno, kernel_type_name(reg->btf_id), kernel_type_name(*btf_id));
+ 			return -EACCES;
+ 		}
+ 		if (!tnum_is_const(reg->var_off) || reg->var_off.value) {
+ 			verbose(env, "R%d is a pointer to in-kernel struct with non-zero offset\n",
+ 				regno);
+ 			return -EACCES;
+ 		}
+ 	} else if (type == PTR_TO_CTX) {
+ 		err = check_ctx_reg(env, reg, regno);
+ 		if (err < 0)
+ 			return err;
+ 	}
+ 
+ skip_type_check:
+ 	if (reg->ref_obj_id) {
+ 		if (meta->ref_obj_id) {
+ 			verbose(env, "verifier internal error: more than one arg with ref_obj_id R%d %u %u\n",
+ 				regno, reg->ref_obj_id,
+ 				meta->ref_obj_id);
+ 			return -EFAULT;
+ 		}
+ 		meta->ref_obj_id = reg->ref_obj_id;
+ 	}
+ 
++>>>>>>> f79e7ea57173 (bpf: Use a table to drive helper arg type checks)
  	if (arg_type == ARG_CONST_MAP_PTR) {
  		/* bpf_map_xxx(map_ptr) call: remember that map_ptr */
  		meta->map_ptr = reg->map_ptr;
diff --git a/include/linux/bpf.h b/include/linux/bpf.h
index 2d012bf2e765..d487c3feda0d 100644
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -278,6 +278,7 @@ enum bpf_arg_type {
 	ARG_PTR_TO_ALLOC_MEM,	/* pointer to dynamically allocated memory */
 	ARG_PTR_TO_ALLOC_MEM_OR_NULL,	/* pointer to dynamically allocated memory or NULL */
 	ARG_CONST_ALLOC_SIZE_OR_ZERO,	/* number of allocated bytes requested */
+	__BPF_ARG_TYPE_MAX,
 };
 
 /* type of values returned from helper functions */
* Unmerged path kernel/bpf/verifier.c
