bpf, x64: Drop "pop %rcx" instruction on BPF JIT epilogue

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
Rebuild_CHGLOG: - bpf, x64: Drop "pop rcx" instruction on BPF JIT epilogue (Yauheni Kaliuta) [1874006]
Rebuild_FUZZ: 99.12%
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit d207929d97ea028fd5f432c69d69df2f51c6b6c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/d207929d.failed

Back when all of the callee-saved registers where always pushed to stack
in x64 JIT prologue, tail call counter was placed at the bottom of the
BPF program's stack frame that had a following layout:

+-------------+
|  ret addr   |
+-------------+
|     rbp     | <- rbp
+-------------+
|             |
| free space  |
| from:       |
| sub $x,%rsp |
|             |
+-------------+
|     rbx     |
+-------------+
|     r13     |
+-------------+
|     r14     |
+-------------+
|     r15     |
+-------------+
|  tail call  | <- rsp
|   counter   |
+-------------+

In order to restore the callee saved registers, epilogue needed to
explicitly toss away the tail call counter via "pop %rbx" insn, so that
%rsp would be back at the place where %r15 was stored.

Currently, the tail call counter is placed on stack *before* the callee
saved registers (brackets on rbx through r15 mean that they are now
pushed to stack only if they are used):

+-------------+
|  ret addr   |
+-------------+
|     rbp     | <- rbp
+-------------+
|             |
| free space  |
| from:       |
| sub $x,%rsp |
|             |
+-------------+
|  tail call  |
|   counter   |
+-------------+
(     rbx     )
+-------------+
(     r13     )
+-------------+
(     r14     )
+-------------+
(     r15     ) <- rsp
+-------------+

For the record, the epilogue insns consist of (assuming all of the
callee saved registers are used by program):
pop    %r15
pop    %r14
pop    %r13
pop    %rbx
pop    %rcx
leaveq
retq

"pop %rbx" for getting rid of tail call counter was not an option
anymore as it would overwrite the restored value of %rbx register, so it
was changed to use the %rcx register.

Since epilogue can start popping the callee saved registers right away
without any additional work, the "pop %rcx" could be dropped altogether
as "leave" insn will simply move the %rbp to %rsp. IOW, tail call
counter does not need the explicit handling.

Having in mind the explanation above and the actual reason for that,
let's piggy back on "leave" insn for discarding the tail call counter
from stack and remove the "pop %rcx" from epilogue.

	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200929204653.4325-2-maciej.fijalkowski@intel.com
(cherry picked from commit d207929d97ea028fd5f432c69d69df2f51c6b6c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/net/bpf_jit_comp.c
diff --cc arch/x86/net/bpf_jit_comp.c
index 5a752b07597f,a263918043ce..000000000000
--- a/arch/x86/net/bpf_jit_comp.c
+++ b/arch/x86/net/bpf_jit_comp.c
@@@ -1300,12 -1440,7 +1300,16 @@@ emit_jmp
  			seen_exit = true;
  			/* Update cleanup_addr */
  			ctx->cleanup_addr = proglen;
++<<<<<<< HEAD
 +			if (!bpf_prog_was_classic(bpf_prog))
 +				EMIT1(0x5B); /* get rid of tail_call_cnt */
 +			EMIT2(0x41, 0x5F);   /* pop r15 */
 +			EMIT2(0x41, 0x5E);   /* pop r14 */
 +			EMIT2(0x41, 0x5D);   /* pop r13 */
 +			EMIT1(0x5B);         /* pop rbx */
++=======
+ 			pop_callee_regs(&prog, callee_regs_used);
++>>>>>>> d207929d97ea (bpf, x64: Drop "pop %rcx" instruction on BPF JIT epilogue)
  			EMIT1(0xC9);         /* leave */
  			EMIT1(0xC3);         /* ret */
  			break;
* Unmerged path arch/x86/net/bpf_jit_comp.c
