kbuild: introduce ccflags-remove-y and asflags-remove-y

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Masahiro Yamada <masahiroy@kernel.org>
commit 15d5761ad31dfb194ebe76554e6af0437eb20424
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/15d5761a.failed

CFLAGS_REMOVE_<file>.o filters out flags when compiling a particular
object, but there is no convenient way to do that for every object in
a directory.

Add ccflags-remove-y and asflags-remove-y to make it easily.

Use ccflags-remove-y to clean up some Makefiles.

The add/remove order works as follows:

 [1] KBUILD_CFLAGS specifies compiler flags used globally

 [2] ccflags-y adds compiler flags for all objects in the
     current Makefile

 [3] ccflags-remove-y removes compiler flags for all objects in the
     current Makefile (New feature)

 [4] CFLAGS_<file> adds compiler flags per file.

 [5] CFLAGS_REMOVE_<file> removes compiler flags per file.

Having [3] before [4] allows us to remove flags from most (but not all)
objects in the current Makefile.

For example, kernel/trace/Makefile removes $(CC_FLAGS_FTRACE)
from all objects in the directory, then adds it back to
trace_selftest_dynamic.o and CFLAGS_trace_kprobe_selftest.o

The same applies to lib/livepatch/Makefile.

Please note ccflags-remove-y has no effect to the sub-directories.
In contrast, the previous notation got rid of compiler flags also from
all the sub-directories.

The following are not affected because they have no sub-directories:

  arch/arm/boot/compressed/
  arch/powerpc/xmon/
  arch/sh/
  kernel/trace/

However, lib/ has several sub-directories.

To keep the behavior, I added ccflags-remove-y to all Makefiles
in subdirectories of lib/, except the following:

  lib/vdso/Makefile        - Kbuild does not descend into this Makefile
  lib/raid/test/Makefile   - This is not used for the kernel build

I think commit 2464a609ded0 ("ftrace: do not trace library functions")
excluded too much. In the next commit, I will remove ccflags-remove-y
from the sub-directories of lib/.

	Suggested-by: Sami Tolvanen <samitolvanen@google.com>
	Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
	Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
	Acked-by: Brendan Higgins <brendanhiggins@google.com> (KUnit)
	Tested-by: Anders Roxell <anders.roxell@linaro.org>
(cherry picked from commit 15d5761ad31dfb194ebe76554e6af0437eb20424)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/kbuild/makefiles.txt
#	arch/arm/boot/compressed/Makefile
#	arch/powerpc/xmon/Makefile
#	lib/842/Makefile
#	lib/crypto/Makefile
#	lib/lzo/Makefile
#	lib/math/Makefile
#	lib/xz/Makefile
diff --cc Documentation/kbuild/makefiles.txt
index 63655c1a3ad6,14d8e7d23c04..000000000000
--- a/Documentation/kbuild/makefiles.txt
+++ b/Documentation/kbuild/makefiles.txt
@@@ -330,18 -364,30 +330,34 @@@ more details, with real examples
  	Options specified using subdir-* are added to the commandline before
  	the options specified using the non-subdir variants.
  
 -	Example::
 -
 +	Example:
  		subdir-ccflags-y := -Werror
  
+     ccflags-remove-y, asflags-remove-y
+ 	These flags are used to remove particular flags for the compiler,
+ 	assembler invocations.
+ 
+ 	Example::
+ 
+ 		ccflags-remove-$(CONFIG_MCOUNT) += -pg
+ 
      CFLAGS_$@, AFLAGS_$@
 +
  	CFLAGS_$@ and AFLAGS_$@ only apply to commands in current
  	kbuild makefile.
  
  	$(CFLAGS_$@) specifies per-file options for $(CC).  The $@
  	part has a literal value which specifies the file that it is for.
  
++<<<<<<< HEAD:Documentation/kbuild/makefiles.txt
 +	Example:
++=======
+ 	CFLAGS_$@ has the higher priority than ccflags-remove-y; CFLAGS_$@
+ 	can re-add compiler flags that were removed by ccflags-remove-y.
+ 
+ 	Example::
+ 
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y):Documentation/kbuild/makefiles.rst
  		# drivers/scsi/Makefile
  		CFLAGS_aha152x.o =   -DAHA152X_STAT -DAUTOCONF
  		CFLAGS_gdth.o    = # -DDEBUG_GDTH=2 -D__SERIAL__ -D__COM2__ \
@@@ -352,7 -398,11 +368,15 @@@
  	$(AFLAGS_$@) is a similar feature for source files in assembly
  	languages.
  
++<<<<<<< HEAD:Documentation/kbuild/makefiles.txt
 +	Example:
++=======
+ 	AFLAGS_$@ has the higher priority than asflags-remove-y; AFLAGS_$@
+ 	can re-add assembler flags that were removed by asflags-remove-y.
+ 
+ 	Example::
+ 
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y):Documentation/kbuild/makefiles.rst
  		# arch/arm/kernel/Makefile
  		AFLAGS_head.o        := -DTEXT_OFFSET=$(TEXT_OFFSET)
  		AFLAGS_crunch-bits.o := -Wa,-mcpu=ep9312
diff --cc arch/arm/boot/compressed/Makefile
index 1f5a5ffe7fcf,b1147b7f2c8d..000000000000
--- a/arch/arm/boot/compressed/Makefile
+++ b/arch/arm/boot/compressed/Makefile
@@@ -102,21 -102,9 +102,27 @@@ clean-files += piggy_data lib1funcs.S a
  
  KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING
  
++<<<<<<< HEAD
 +ifeq ($(CONFIG_FUNCTION_TRACER),y)
 +ORIG_CFLAGS := $(KBUILD_CFLAGS)
 +KBUILD_CFLAGS = $(subst -pg, , $(ORIG_CFLAGS))
 +endif
 +
 +# -fstack-protector-strong triggers protection checks in this code,
 +# but it is being used too early to link to meaningful stack_chk logic.
 +nossp_flags := $(call cc-option, -fno-stack-protector)
 +CFLAGS_atags_to_fdt.o := $(nossp_flags)
 +CFLAGS_fdt.o := $(nossp_flags)
 +CFLAGS_fdt_ro.o := $(nossp_flags)
 +CFLAGS_fdt_rw.o := $(nossp_flags)
 +CFLAGS_fdt_wip.o := $(nossp_flags)
 +
 +ccflags-y := -fpic $(call cc-option,-mno-single-pic-base,) -fno-builtin -I$(obj)
++=======
+ ccflags-y := -fpic $(call cc-option,-mno-single-pic-base,) -fno-builtin \
+ 	     -I$(obj) $(DISABLE_ARM_SSP_PER_TASK_PLUGIN)
+ ccflags-remove-$(CONFIG_FUNCTION_TRACER) += -pg
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y)
  asflags-y := -DZIMAGE
  
  # Supply kernel BSS size to the decompressor via a linker symbol.
diff --cc arch/powerpc/xmon/Makefile
index bcb98018d43e,eb25d7554ffd..000000000000
--- a/arch/powerpc/xmon/Makefile
+++ b/arch/powerpc/xmon/Makefile
@@@ -1,14 -1,19 +1,24 @@@
  # SPDX-License-Identifier: GPL-2.0
  # Makefile for xmon
  
 +subdir-ccflags-$(CONFIG_PPC_WERROR) := -Werror
 +
  GCOV_PROFILE := n
 -KCOV_INSTRUMENT := n
  UBSAN_SANITIZE := n
 -KASAN_SANITIZE := n
  
  # Disable ftrace for the entire directory
++<<<<<<< HEAD
 +ORIG_CFLAGS := $(KBUILD_CFLAGS)
 +KBUILD_CFLAGS = $(subst -mno-sched-epilog,,$(subst $(CC_FLAGS_FTRACE),,$(ORIG_CFLAGS)))
++=======
+ ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+ 
+ ifdef CONFIG_CC_IS_CLANG
+ # clang stores addresses on the stack causing the frame size to blow
+ # out. See https://github.com/ClangBuiltLinux/linux/issues/252
+ KBUILD_CFLAGS += -Wframe-larger-than=4096
+ endif
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y)
  
  ccflags-$(CONFIG_PPC64) := $(NO_MINIMAL_TOC)
  
diff --cc lib/842/Makefile
index 5d24c0baff2e,b815e824ae37..000000000000
--- a/lib/842/Makefile
+++ b/lib/842/Makefile
@@@ -1,2 -1,6 +1,9 @@@
++<<<<<<< HEAD
++=======
+ # SPDX-License-Identifier: GPL-2.0-only
+ 
+ ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+ 
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y)
  obj-$(CONFIG_842_COMPRESS) += 842_compress.o
  obj-$(CONFIG_842_DECOMPRESS) += 842_decompress.o
diff --cc lib/crypto/Makefile
index f9ce824b2880,b557ef0b07c2..000000000000
--- a/lib/crypto/Makefile
+++ b/lib/crypto/Makefile
@@@ -1,7 -1,47 +1,15 @@@
  # SPDX-License-Identifier: GPL-2.0
  
++<<<<<<< HEAD
 +obj-$(CONFIG_CRYPTO_LIB_ARC4) += libarc4.o
 +libarc4-y := arc4.o
++=======
+ ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+ 
+ # chacha is used by the /dev/random driver which is always builtin
+ obj-y						+= chacha.o
+ obj-$(CONFIG_CRYPTO_LIB_CHACHA_GENERIC)		+= libchacha.o
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y)
  
 -obj-$(CONFIG_CRYPTO_LIB_AES)			+= libaes.o
 -libaes-y					:= aes.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_ARC4)			+= libarc4.o
 -libarc4-y					:= arc4.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC)	+= libblake2s-generic.o
 -libblake2s-generic-y				+= blake2s-generic.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_BLAKE2S)		+= libblake2s.o
 -libblake2s-y					+= blake2s.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_CHACHA20POLY1305)	+= libchacha20poly1305.o
 -libchacha20poly1305-y				+= chacha20poly1305.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_CURVE25519_GENERIC)	+= libcurve25519-generic.o
 -libcurve25519-generic-y				:= curve25519-fiat32.o
 -libcurve25519-generic-$(CONFIG_ARCH_SUPPORTS_INT128)	:= curve25519-hacl64.o
 -libcurve25519-generic-y				+= curve25519-generic.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_CURVE25519)		+= libcurve25519.o
 -libcurve25519-y					+= curve25519.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_DES)			+= libdes.o
 -libdes-y					:= des.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_POLY1305_GENERIC)	+= libpoly1305.o
 -libpoly1305-y					:= poly1305-donna32.o
 -libpoly1305-$(CONFIG_ARCH_SUPPORTS_INT128)	:= poly1305-donna64.o
 -libpoly1305-y					+= poly1305.o
 -
 -obj-$(CONFIG_CRYPTO_LIB_SHA256)			+= libsha256.o
 -libsha256-y					:= sha256.o
 -
 -ifneq ($(CONFIG_CRYPTO_MANAGER_DISABLE_TESTS),y)
 -libblake2s-y					+= blake2s-selftest.o
 -libchacha20poly1305-y				+= chacha20poly1305-selftest.o
 -libcurve25519-y					+= curve25519-selftest.o
 -endif
 +obj-$(CONFIG_CRYPTO_LIB_SHA256) += libsha256.o
 +libsha256-y := sha256.o
diff --cc lib/lzo/Makefile
index f0f7d7ca2b83,9565a555275b..000000000000
--- a/lib/lzo/Makefile
+++ b/lib/lzo/Makefile
@@@ -1,3 -1,6 +1,9 @@@
++<<<<<<< HEAD
++=======
+ # SPDX-License-Identifier: GPL-2.0-only
+ ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+ 
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y)
  lzo_compress-objs := lzo1x_compress.o
  lzo_decompress-objs := lzo1x_decompress_safe.o
  
diff --cc lib/xz/Makefile
index a7fa7693f0f3,fae9b6c7c389..000000000000
--- a/lib/xz/Makefile
+++ b/lib/xz/Makefile
@@@ -1,3 -1,7 +1,10 @@@
++<<<<<<< HEAD
++=======
+ # SPDX-License-Identifier: GPL-2.0-only
+ 
+ ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+ 
++>>>>>>> 15d5761ad31d (kbuild: introduce ccflags-remove-y and asflags-remove-y)
  obj-$(CONFIG_XZ_DEC) += xz_dec.o
  xz_dec-y := xz_dec_syms.o xz_dec_stream.o xz_dec_lzma2.o
  xz_dec-$(CONFIG_XZ_DEC_BCJ) += xz_dec_bcj.o
* Unmerged path lib/math/Makefile
* Unmerged path Documentation/kbuild/makefiles.txt
* Unmerged path arch/arm/boot/compressed/Makefile
* Unmerged path arch/powerpc/xmon/Makefile
diff --git a/arch/sh/boot/compressed/Makefile b/arch/sh/boot/compressed/Makefile
index f5e1bd779789..2bdcc0ac23ef 100644
--- a/arch/sh/boot/compressed/Makefile
+++ b/arch/sh/boot/compressed/Makefile
@@ -28,10 +28,7 @@ IMAGE_OFFSET	:= $(shell /bin/bash -c 'printf "0x%08x" \
 			$(CONFIG_BOOT_LINK_OFFSET)]')
 endif
 
-ifeq ($(CONFIG_MCOUNT),y)
-ORIG_CFLAGS := $(KBUILD_CFLAGS)
-KBUILD_CFLAGS = $(subst -pg, , $(ORIG_CFLAGS))
-endif
+ccflags-remove-$(CONFIG_MCOUNT) += -pg
 
 LDFLAGS_vmlinux := --oformat $(ld-bfd) -Ttext $(IMAGE_OFFSET) -e startup \
 		   -T $(obj)/../../kernel/vmlinux.lds
diff --git a/kernel/trace/Makefile b/kernel/trace/Makefile
index 70746e118ae0..6a771aaacac9 100644
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@ -2,9 +2,9 @@
 
 # Do not instrument the tracer itself:
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 ifdef CONFIG_FUNCTION_TRACER
-ORIG_CFLAGS := $(KBUILD_CFLAGS)
-KBUILD_CFLAGS = $(subst $(CC_FLAGS_FTRACE),,$(ORIG_CFLAGS))
 
 ifdef CONFIG_FTRACE_SELFTEST
 # selftest needs instrumentation
* Unmerged path lib/842/Makefile
diff --git a/lib/Makefile b/lib/Makefile
index a38ab674cad9..1cb90caafc00 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -3,10 +3,7 @@
 # Makefile for some libs needed in the kernel.
 #
 
-ifdef CONFIG_FUNCTION_TRACER
-ORIG_CFLAGS := $(KBUILD_CFLAGS)
-KBUILD_CFLAGS = $(subst $(CC_FLAGS_FTRACE),,$(ORIG_CFLAGS))
-endif
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
 
 # These files are disabled because they produce lots of non-interesting and/or
 # flaky coverage that is not a function of syscall inputs. For example,
* Unmerged path lib/crypto/Makefile
diff --git a/lib/dim/Makefile b/lib/dim/Makefile
index 1d6858a108cb..97fc3e89d34e 100644
--- a/lib/dim/Makefile
+++ b/lib/dim/Makefile
@@ -2,6 +2,8 @@
 # DIM Dynamic Interrupt Moderation library
 #
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_DIMLIB) += dim.o
 
 dim-y := dim.o net_dim.o rdma_dim.o
diff --git a/lib/fonts/Makefile b/lib/fonts/Makefile
index d56f02dea83a..f2af8e291918 100644
--- a/lib/fonts/Makefile
+++ b/lib/fonts/Makefile
@@ -1,6 +1,8 @@
 # SPDX-License-Identifier: GPL-2.0
 # Font handling
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 font-objs := fonts.o
 
 font-objs-$(CONFIG_FONT_SUN8x16)   += font_sun8x16.o
diff --git a/lib/kunit/Makefile b/lib/kunit/Makefile
index 724b94311ca3..8c847557ab24 100644
--- a/lib/kunit/Makefile
+++ b/lib/kunit/Makefile
@@ -1,3 +1,6 @@
+
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_KUNIT) +=			kunit.o
 
 kunit-objs +=				test.o \
diff --git a/lib/livepatch/Makefile b/lib/livepatch/Makefile
index 295b94bff370..9abdf615b088 100644
--- a/lib/livepatch/Makefile
+++ b/lib/livepatch/Makefile
@@ -2,6 +2,8 @@
 #
 # Makefile for livepatch test code.
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_TEST_LIVEPATCH) += test_klp_atomic_replace.o \
 				test_klp_callbacks_demo.o \
 				test_klp_callbacks_demo2.o \
diff --git a/lib/lz4/Makefile b/lib/lz4/Makefile
index f7b113271d13..9a516e7e07ae 100644
--- a/lib/lz4/Makefile
+++ b/lib/lz4/Makefile
@@ -1,4 +1,5 @@
 ccflags-y += -O3
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
 
 obj-$(CONFIG_LZ4_COMPRESS) += lz4_compress.o
 obj-$(CONFIG_LZ4HC_COMPRESS) += lz4hc_compress.o
* Unmerged path lib/lzo/Makefile
* Unmerged path lib/math/Makefile
diff --git a/lib/mpi/Makefile b/lib/mpi/Makefile
index 43b8fce14079..250ad4854031 100644
--- a/lib/mpi/Makefile
+++ b/lib/mpi/Makefile
@@ -3,6 +3,8 @@
 # MPI multiprecision maths library (from gpg)
 #
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_MPILIB) = mpi.o
 
 mpi-y = \
diff --git a/lib/raid6/Makefile b/lib/raid6/Makefile
index 2f8b61dfd9b0..69d025f27f7c 100644
--- a/lib/raid6/Makefile
+++ b/lib/raid6/Makefile
@@ -1,4 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
+
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_RAID6_PQ)	+= raid6_pq.o
 
 raid6_pq-y	+= algos.o recov.o tables.o int1.o int2.o int4.o \
diff --git a/lib/reed_solomon/Makefile b/lib/reed_solomon/Makefile
index c3d7136827ed..113c0f4e4fd8 100644
--- a/lib/reed_solomon/Makefile
+++ b/lib/reed_solomon/Makefile
@@ -2,5 +2,7 @@
 # This is a modified version of reed solomon lib,
 #
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_REED_SOLOMON) += reed_solomon.o
 
* Unmerged path lib/xz/Makefile
diff --git a/lib/zlib_deflate/Makefile b/lib/zlib_deflate/Makefile
index 86275e3fdcbc..603f3c85614f 100644
--- a/lib/zlib_deflate/Makefile
+++ b/lib/zlib_deflate/Makefile
@@ -6,6 +6,8 @@
 # decompression code.
 #
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_ZLIB_DEFLATE) += zlib_deflate.o
 
 zlib_deflate-objs := deflate.o deftree.o deflate_syms.o
diff --git a/lib/zlib_dfltcc/Makefile b/lib/zlib_dfltcc/Makefile
index 8e4d5afbbb10..7a8067f6e772 100644
--- a/lib/zlib_dfltcc/Makefile
+++ b/lib/zlib_dfltcc/Makefile
@@ -6,6 +6,8 @@
 # This is the code for s390 zlib hardware support.
 #
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_ZLIB_DFLTCC) += zlib_dfltcc.o
 
 zlib_dfltcc-objs := dfltcc.o dfltcc_deflate.o dfltcc_inflate.o dfltcc_syms.o
diff --git a/lib/zlib_inflate/Makefile b/lib/zlib_inflate/Makefile
index 49f8ce5774d2..2902c6fddd10 100644
--- a/lib/zlib_inflate/Makefile
+++ b/lib/zlib_inflate/Makefile
@@ -13,6 +13,8 @@
 # uncompression can be done without blocking on allocation).
 #
 
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
+
 obj-$(CONFIG_ZLIB_INFLATE) += zlib_inflate.o
 
 zlib_inflate-objs := inffast.o inflate.o infutil.o \
diff --git a/lib/zstd/Makefile b/lib/zstd/Makefile
index 7920cbbfeae9..3050c73abb7b 100644
--- a/lib/zstd/Makefile
+++ b/lib/zstd/Makefile
@@ -2,6 +2,7 @@ obj-$(CONFIG_ZSTD_COMPRESS) += zstd_compress.o
 obj-$(CONFIG_ZSTD_DECOMPRESS) += zstd_decompress.o
 
 ccflags-y += -O3
+ccflags-remove-$(CONFIG_FUNCTION_TRACER) += $(CC_FLAGS_FTRACE)
 
 zstd_compress-y := fse_compress.o huf_compress.o compress.o \
 		   entropy_common.o fse_decompress.o zstd_common.o
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index d6b423b75335..e16181669bdb 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -94,12 +94,14 @@ name-fix = $(squote)$(quote)$(subst $(comma),_,$(subst -,_,$1))$(quote)$(squote)
 basename_flags = -DKBUILD_BASENAME=$(call name-fix,$(basetarget))
 modname_flags  = -DKBUILD_MODNAME=$(call name-fix,$(modname))
 
-orig_c_flags   = $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) \
-                 $(ccflags-y) $(CFLAGS_$(target-stem).o)
-_c_flags       = $(filter-out $(CFLAGS_REMOVE_$(target-stem).o), $(orig_c_flags))
-orig_a_flags   = $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) \
-                 $(asflags-y) $(AFLAGS_$(target-stem).o)
-_a_flags       = $(filter-out $(AFLAGS_REMOVE_$(target-stem).o), $(orig_a_flags))
+_c_flags       = $(filter-out $(CFLAGS_REMOVE_$(target-stem).o), \
+                     $(filter-out $(ccflags-remove-y), \
+                         $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(ccflags-y)) \
+                     $(CFLAGS_$(target-stem).o))
+_a_flags       = $(filter-out $(AFLAGS_REMOVE_$(target-stem).o), \
+                     $(filter-out $(asflags-remove-y), \
+                         $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(asflags-y)) \
+                     $(AFLAGS_$(target-stem).o))
 _cpp_flags     = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(target-stem).lds)
 
 #
