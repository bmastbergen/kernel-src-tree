PCI/ERR: Avoid negated conditional for clarity

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Sean V Kelley <sean.v.kelley@intel.com>
commit 3d7d8fc78f4b504819882278fcfe10784eb985fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/3d7d8fc7.failed

Reverse the sense of the Root Port/Downstream Port conditional for clarity.
No functional change intended.

Link: https://lore.kernel.org/r/20201121001036.8560-9-sean.v.kelley@intel.com
	Tested-by: Jonathan Cameron <Jonathan.Cameron@huawei.com> # non-native/no RCEC
	Signed-off-by: Sean V Kelley <sean.v.kelley@intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
	Acked-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
(cherry picked from commit 3d7d8fc78f4b504819882278fcfe10784eb985fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pcie/err.c
diff --cc drivers/pci/pcie/err.c
index c74d622dbbc4,931e75f2549d..000000000000
--- a/drivers/pci/pcie/err.c
+++ b/drivers/pci/pcie/err.c
@@@ -147,28 -147,31 +147,36 @@@ out
  }
  
  pci_ers_result_t pcie_do_recovery(struct pci_dev *dev,
 -		pci_channel_state_t state,
 -		pci_ers_result_t (*reset_subordinates)(struct pci_dev *pdev))
 +			enum pci_channel_state state,
 +			pci_ers_result_t (*reset_link)(struct pci_dev *pdev))
  {
  	int type = pci_pcie_type(dev);
 -	struct pci_dev *bridge;
 -	struct pci_bus *bus;
  	pci_ers_result_t status = PCI_ERS_RESULT_CAN_RECOVER;
 +	struct pci_bus *bus;
  
  	/*
 -	 * Error recovery runs on all subordinates of the bridge.  If the
 -	 * bridge detected the error, it is cleared at the end.
 +	 * Error recovery runs on all subordinates of the first downstream port.
 +	 * If the downstream port detected the error, it is cleared at the end.
  	 */
++<<<<<<< HEAD
 +	if (!(type == PCI_EXP_TYPE_ROOT_PORT ||
 +	      type == PCI_EXP_TYPE_DOWNSTREAM))
 +		dev = pci_upstream_bridge(dev);
 +	bus = dev->subordinate;
++=======
+ 	if (type == PCI_EXP_TYPE_ROOT_PORT ||
+ 	    type == PCI_EXP_TYPE_DOWNSTREAM)
+ 		bridge = dev;
+ 	else
+ 		bridge = pci_upstream_bridge(dev);
++>>>>>>> 3d7d8fc78f4b (PCI/ERR: Avoid negated conditional for clarity)
  
 -	bus = bridge->subordinate;
 -	pci_dbg(bridge, "broadcast error_detected message\n");
 +	pci_dbg(dev, "broadcast error_detected message\n");
  	if (state == pci_channel_io_frozen) {
  		pci_walk_bus(bus, report_frozen_detected, &status);
 -		status = reset_subordinates(bridge);
 +		status = reset_link(dev);
  		if (status != PCI_ERS_RESULT_RECOVERED) {
 -			pci_warn(bridge, "subordinate device reset failed\n");
 +			pci_warn(dev, "link reset failed\n");
  			goto failed;
  		}
  	} else {
* Unmerged path drivers/pci/pcie/err.c
