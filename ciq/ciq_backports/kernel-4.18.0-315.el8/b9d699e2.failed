KVM: arm64: Rename __vgic_v3_get_ich_vtr_el2() to __vgic_v3_get_gic_config()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Marc Zyngier <maz@kernel.org>
commit b9d699e2694d032aa8ecc15141f698ccb050dc95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/b9d699e2.failed

As we are about to report a bit more information to the rest of
the kernel, rename __vgic_v3_get_ich_vtr_el2() to the more
explicit __vgic_v3_get_gic_config().

No functional change.

	Tested-by: Shameer Kolothum <shameerali.kolothum.thodi@huawei.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
Message-Id: <20210305185254.3730990-7-maz@kernel.org>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b9d699e2694d032aa8ecc15141f698ccb050dc95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/kvm_asm.h
#	arch/arm64/kvm/hyp/nvhe/hyp-main.c
diff --cc arch/arm64/include/asm/kvm_asm.h
index d35628abb113,9c0e396dd03f..000000000000
--- a/arch/arm64/include/asm/kvm_asm.h
+++ b/arch/arm64/include/asm/kvm_asm.h
@@@ -47,7 -34,29 +47,33 @@@
   */
  #define KVM_VECTOR_PREAMBLE	(2 * AARCH64_INSN_SIZE)
  
++<<<<<<< HEAD
 +#define __SMCCC_WORKAROUND_1_SMC_SZ 36
++=======
+ #define KVM_HOST_SMCCC_ID(id)						\
+ 	ARM_SMCCC_CALL_VAL(ARM_SMCCC_FAST_CALL,				\
+ 			   ARM_SMCCC_SMC_64,				\
+ 			   ARM_SMCCC_OWNER_VENDOR_HYP,			\
+ 			   (id))
+ 
+ #define KVM_HOST_SMCCC_FUNC(name) KVM_HOST_SMCCC_ID(__KVM_HOST_SMCCC_FUNC_##name)
+ 
+ #define __KVM_HOST_SMCCC_FUNC___kvm_hyp_init			0
+ #define __KVM_HOST_SMCCC_FUNC___kvm_vcpu_run			1
+ #define __KVM_HOST_SMCCC_FUNC___kvm_flush_vm_context		2
+ #define __KVM_HOST_SMCCC_FUNC___kvm_tlb_flush_vmid_ipa		3
+ #define __KVM_HOST_SMCCC_FUNC___kvm_tlb_flush_vmid		4
+ #define __KVM_HOST_SMCCC_FUNC___kvm_tlb_flush_local_vmid	5
+ #define __KVM_HOST_SMCCC_FUNC___kvm_timer_set_cntvoff		6
+ #define __KVM_HOST_SMCCC_FUNC___kvm_enable_ssbs			7
+ #define __KVM_HOST_SMCCC_FUNC___vgic_v3_get_gic_config		8
+ #define __KVM_HOST_SMCCC_FUNC___vgic_v3_read_vmcr		9
+ #define __KVM_HOST_SMCCC_FUNC___vgic_v3_write_vmcr		10
+ #define __KVM_HOST_SMCCC_FUNC___vgic_v3_init_lrs		11
+ #define __KVM_HOST_SMCCC_FUNC___kvm_get_mdcr_el2		12
+ #define __KVM_HOST_SMCCC_FUNC___vgic_v3_save_aprs		13
+ #define __KVM_HOST_SMCCC_FUNC___vgic_v3_restore_aprs		14
++>>>>>>> b9d699e2694d (KVM: arm64: Rename __vgic_v3_get_ich_vtr_el2() to __vgic_v3_get_gic_config())
  
  #ifndef __ASSEMBLY__
  
@@@ -127,9 -192,7 +153,13 @@@ extern void __kvm_timer_set_cntvoff(u6
  
  extern int __kvm_vcpu_run(struct kvm_vcpu *vcpu);
  
++<<<<<<< HEAD
 +extern void __kvm_enable_ssbs(void);
 +
 +extern u64 __vgic_v3_get_ich_vtr_el2(void);
++=======
+ extern u64 __vgic_v3_get_gic_config(void);
++>>>>>>> b9d699e2694d (KVM: arm64: Rename __vgic_v3_get_ich_vtr_el2() to __vgic_v3_get_gic_config())
  extern u64 __vgic_v3_read_vmcr(void);
  extern void __vgic_v3_write_vmcr(u32 vmcr);
  extern void __vgic_v3_init_lrs(void);
* Unmerged path arch/arm64/kvm/hyp/nvhe/hyp-main.c
* Unmerged path arch/arm64/include/asm/kvm_asm.h
* Unmerged path arch/arm64/kvm/hyp/nvhe/hyp-main.c
diff --git a/arch/arm64/kvm/hyp/vgic-v3-sr.c b/arch/arm64/kvm/hyp/vgic-v3-sr.c
index 48c15d8ffd04..dfd3c44b9a7e 100644
--- a/arch/arm64/kvm/hyp/vgic-v3-sr.c
+++ b/arch/arm64/kvm/hyp/vgic-v3-sr.c
@@ -414,7 +414,12 @@ void __vgic_v3_init_lrs(void)
 		__gic_v3_set_lr(0, i);
 }
 
-u64 __vgic_v3_get_ich_vtr_el2(void)
+/*
+ * Return the GIC CPU configuration:
+ * - [31:0]  ICH_VTR_EL2
+ * - [63:32] RES0
+ */
+u64 __vgic_v3_get_gic_config(void)
 {
 	return read_gicreg(ICH_VTR_EL2);
 }
diff --git a/arch/arm64/kvm/vgic/vgic-v3.c b/arch/arm64/kvm/vgic/vgic-v3.c
index 235d742ea9ec..e9ade4190510 100644
--- a/arch/arm64/kvm/vgic/vgic-v3.c
+++ b/arch/arm64/kvm/vgic/vgic-v3.c
@@ -595,9 +595,11 @@ early_param("kvm-arm.vgic_v4_enable", early_gicv4_enable);
  */
 int vgic_v3_probe(const struct gic_kvm_info *info)
 {
-	u32 ich_vtr_el2 = kvm_call_hyp_ret(__vgic_v3_get_ich_vtr_el2);
+	u64 ich_vtr_el2 = kvm_call_hyp_ret(__vgic_v3_get_gic_config);
 	int ret;
 
+	ich_vtr_el2 = (u32)ich_vtr_el2;
+
 	/*
 	 * The ListRegs field is 5 bits, but there is an architectural
 	 * maximum of 16 list registers. Just ignore bit 4...
