bpf: Move the PTR_TO_BTF_ID check to check_reg_type()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit a968d5e277f1a640a3184561ac2c39261ba79196
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/a968d5e2.failed

check_reg_type() checks whether a reg can be used as an arg of a
func_proto.  For PTR_TO_BTF_ID, the check is actually not
completely done until the reg->btf_id is pointing to a
kernel struct that is acceptable by the func_proto.

Thus, this patch moves the btf_id check into check_reg_type().
"arg_type" and "arg_btf_id" are passed to check_reg_type() instead of
"compatible".  The compatible_reg_types[] usage is localized in
check_reg_type() now.

The "if (!btf_id) verbose(...); " is also removed since it won't happen.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Lorenz Bauer <lmb@cloudflare.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20200925000344.3854828-1-kafai@fb.com
(cherry picked from commit a968d5e277f1a640a3184561ac2c39261ba79196)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 41ae364d39c2,945fa2b4d096..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -3937,14 -3951,140 +3937,147 @@@ static int resolve_map_arg_type(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ struct bpf_reg_types {
+ 	const enum bpf_reg_type types[10];
+ };
+ 
+ static const struct bpf_reg_types map_key_value_types = {
+ 	.types = {
+ 		PTR_TO_STACK,
+ 		PTR_TO_PACKET,
+ 		PTR_TO_PACKET_META,
+ 		PTR_TO_MAP_VALUE,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types sock_types = {
+ 	.types = {
+ 		PTR_TO_SOCK_COMMON,
+ 		PTR_TO_SOCKET,
+ 		PTR_TO_TCP_SOCK,
+ 		PTR_TO_XDP_SOCK,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types mem_types = {
+ 	.types = {
+ 		PTR_TO_STACK,
+ 		PTR_TO_PACKET,
+ 		PTR_TO_PACKET_META,
+ 		PTR_TO_MAP_VALUE,
+ 		PTR_TO_MEM,
+ 		PTR_TO_RDONLY_BUF,
+ 		PTR_TO_RDWR_BUF,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types int_ptr_types = {
+ 	.types = {
+ 		PTR_TO_STACK,
+ 		PTR_TO_PACKET,
+ 		PTR_TO_PACKET_META,
+ 		PTR_TO_MAP_VALUE,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types fullsock_types = { .types = { PTR_TO_SOCKET } };
+ static const struct bpf_reg_types scalar_types = { .types = { SCALAR_VALUE } };
+ static const struct bpf_reg_types context_types = { .types = { PTR_TO_CTX } };
+ static const struct bpf_reg_types alloc_mem_types = { .types = { PTR_TO_MEM } };
+ static const struct bpf_reg_types const_map_ptr_types = { .types = { CONST_PTR_TO_MAP } };
+ static const struct bpf_reg_types btf_ptr_types = { .types = { PTR_TO_BTF_ID } };
+ static const struct bpf_reg_types spin_lock_types = { .types = { PTR_TO_MAP_VALUE } };
+ 
+ static const struct bpf_reg_types *compatible_reg_types[__BPF_ARG_TYPE_MAX] = {
+ 	[ARG_PTR_TO_MAP_KEY]		= &map_key_value_types,
+ 	[ARG_PTR_TO_MAP_VALUE]		= &map_key_value_types,
+ 	[ARG_PTR_TO_UNINIT_MAP_VALUE]	= &map_key_value_types,
+ 	[ARG_PTR_TO_MAP_VALUE_OR_NULL]	= &map_key_value_types,
+ 	[ARG_CONST_SIZE]		= &scalar_types,
+ 	[ARG_CONST_SIZE_OR_ZERO]	= &scalar_types,
+ 	[ARG_CONST_ALLOC_SIZE_OR_ZERO]	= &scalar_types,
+ 	[ARG_CONST_MAP_PTR]		= &const_map_ptr_types,
+ 	[ARG_PTR_TO_CTX]		= &context_types,
+ 	[ARG_PTR_TO_CTX_OR_NULL]	= &context_types,
+ 	[ARG_PTR_TO_SOCK_COMMON]	= &sock_types,
+ 	[ARG_PTR_TO_SOCKET]		= &fullsock_types,
+ 	[ARG_PTR_TO_SOCKET_OR_NULL]	= &fullsock_types,
+ 	[ARG_PTR_TO_BTF_ID]		= &btf_ptr_types,
+ 	[ARG_PTR_TO_SPIN_LOCK]		= &spin_lock_types,
+ 	[ARG_PTR_TO_MEM]		= &mem_types,
+ 	[ARG_PTR_TO_MEM_OR_NULL]	= &mem_types,
+ 	[ARG_PTR_TO_UNINIT_MEM]		= &mem_types,
+ 	[ARG_PTR_TO_ALLOC_MEM]		= &alloc_mem_types,
+ 	[ARG_PTR_TO_ALLOC_MEM_OR_NULL]	= &alloc_mem_types,
+ 	[ARG_PTR_TO_INT]		= &int_ptr_types,
+ 	[ARG_PTR_TO_LONG]		= &int_ptr_types,
+ };
+ 
+ static int check_reg_type(struct bpf_verifier_env *env, u32 regno,
+ 			  enum bpf_arg_type arg_type,
+ 			  const u32 *arg_btf_id)
+ {
+ 	struct bpf_reg_state *regs = cur_regs(env), *reg = &regs[regno];
+ 	enum bpf_reg_type expected, type = reg->type;
+ 	const struct bpf_reg_types *compatible;
+ 	int i, j;
+ 
+ 	compatible = compatible_reg_types[arg_type];
+ 	if (!compatible) {
+ 		verbose(env, "verifier internal error: unsupported arg type %d\n", arg_type);
+ 		return -EFAULT;
+ 	}
+ 
+ 	for (i = 0; i < ARRAY_SIZE(compatible->types); i++) {
+ 		expected = compatible->types[i];
+ 		if (expected == NOT_INIT)
+ 			break;
+ 
+ 		if (type == expected)
+ 			goto found;
+ 	}
+ 
+ 	verbose(env, "R%d type=%s expected=", regno, reg_type_str[type]);
+ 	for (j = 0; j + 1 < i; j++)
+ 		verbose(env, "%s, ", reg_type_str[compatible->types[j]]);
+ 	verbose(env, "%s\n", reg_type_str[compatible->types[j]]);
+ 	return -EACCES;
+ 
+ found:
+ 	if (type == PTR_TO_BTF_ID) {
+ 		if (!btf_struct_ids_match(&env->log, reg->off, reg->btf_id,
+ 					  *arg_btf_id)) {
+ 			verbose(env, "R%d is of type %s but %s is expected\n",
+ 				regno, kernel_type_name(reg->btf_id),
+ 				kernel_type_name(*arg_btf_id));
+ 			return -EACCES;
+ 		}
+ 
+ 		if (!tnum_is_const(reg->var_off) || reg->var_off.value) {
+ 			verbose(env, "R%d is a pointer to in-kernel struct with non-zero offset\n",
+ 				regno);
+ 			return -EACCES;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> a968d5e277f1 (bpf: Move the PTR_TO_BTF_ID check to check_reg_type())
  static int check_func_arg(struct bpf_verifier_env *env, u32 arg,
  			  struct bpf_call_arg_meta *meta,
  			  const struct bpf_func_proto *fn)
  {
  	u32 regno = BPF_REG_1 + arg;
  	struct bpf_reg_state *regs = cur_regs(env), *reg = &regs[regno];
 +	enum bpf_reg_type expected_type, type = reg->type;
  	enum bpf_arg_type arg_type = fn->arg_type[arg];
++<<<<<<< HEAD
++=======
+ 	enum bpf_reg_type type = reg->type;
++>>>>>>> a968d5e277f1 (bpf: Move the PTR_TO_BTF_ID check to check_reg_type())
  	int err = 0;
  
  	if (arg_type == ARG_DONTCARE)
@@@ -3977,117 -4117,24 +4110,138 @@@
  			return err;
  	}
  
++<<<<<<< HEAD
 +	if (arg_type == ARG_PTR_TO_MAP_KEY ||
 +	    arg_type == ARG_PTR_TO_MAP_VALUE ||
 +	    arg_type == ARG_PTR_TO_UNINIT_MAP_VALUE ||
 +	    arg_type == ARG_PTR_TO_MAP_VALUE_OR_NULL) {
 +		expected_type = PTR_TO_STACK;
 +		if (register_is_null(reg) &&
 +		    arg_type == ARG_PTR_TO_MAP_VALUE_OR_NULL)
 +			/* final test in check_stack_boundary() */;
 +		else if (!type_is_pkt_pointer(type) &&
 +			 type != PTR_TO_MAP_VALUE &&
 +			 type != expected_type)
 +			goto err_type;
 +	} else if (arg_type == ARG_CONST_SIZE ||
 +		   arg_type == ARG_CONST_SIZE_OR_ZERO ||
 +		   arg_type == ARG_CONST_ALLOC_SIZE_OR_ZERO) {
 +		expected_type = SCALAR_VALUE;
 +		if (type != expected_type)
 +			goto err_type;
 +	} else if (arg_type == ARG_CONST_MAP_PTR) {
 +		expected_type = CONST_PTR_TO_MAP;
 +		if (type != expected_type)
 +			goto err_type;
 +	} else if (arg_type == ARG_PTR_TO_CTX ||
 +		   arg_type == ARG_PTR_TO_CTX_OR_NULL) {
 +		expected_type = PTR_TO_CTX;
 +		if (!(register_is_null(reg) &&
 +		      arg_type == ARG_PTR_TO_CTX_OR_NULL)) {
 +			if (type != expected_type)
 +				goto err_type;
 +			err = check_ctx_reg(env, reg, regno);
 +			if (err < 0)
 +				return err;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_SOCK_COMMON) {
 +		expected_type = PTR_TO_SOCK_COMMON;
 +		/* Any sk pointer can be ARG_PTR_TO_SOCK_COMMON */
 +		if (!type_is_sk_pointer(type))
 +			goto err_type;
 +		if (reg->ref_obj_id) {
 +			if (meta->ref_obj_id) {
 +				verbose(env, "verifier internal error: more than one arg with ref_obj_id R%d %u %u\n",
 +					regno, reg->ref_obj_id,
 +					meta->ref_obj_id);
 +				return -EFAULT;
 +			}
 +			meta->ref_obj_id = reg->ref_obj_id;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_SOCKET ||
 +		   arg_type == ARG_PTR_TO_SOCKET_OR_NULL) {
 +		expected_type = PTR_TO_SOCKET;
 +		if (!(register_is_null(reg) &&
 +		      arg_type == ARG_PTR_TO_SOCKET_OR_NULL)) {
 +			if (type != expected_type)
 +				goto err_type;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_BTF_ID) {
 +		bool ids_match = false;
 +
 +		expected_type = PTR_TO_BTF_ID;
 +		if (type != expected_type)
 +			goto err_type;
 +		if (!fn->check_btf_id) {
 +			if (reg->btf_id != meta->btf_id) {
 +				ids_match = btf_struct_ids_match(&env->log, reg->off, reg->btf_id,
 +								 meta->btf_id);
 +				if (!ids_match) {
 +					verbose(env, "Helper has type %s got %s in R%d\n",
 +						kernel_type_name(meta->btf_id),
 +						kernel_type_name(reg->btf_id), regno);
 +					return -EACCES;
 +				}
 +			}
 +		} else if (!fn->check_btf_id(reg->btf_id, arg)) {
 +			verbose(env, "Helper does not support %s in R%d\n",
 +				kernel_type_name(reg->btf_id), regno);
 +
 +			return -EACCES;
 +		}
 +		if ((reg->off && !ids_match) || !tnum_is_const(reg->var_off) || reg->var_off.value) {
 +			verbose(env, "R%d is a pointer to in-kernel struct with non-zero offset\n",
 +				regno);
 +			return -EACCES;
 +		}
 +	} else if (arg_type == ARG_PTR_TO_SPIN_LOCK) {
 +		expected_type = PTR_TO_MAP_VALUE;
 +		if (type != expected_type)
 +			goto err_type;
 +	} else if (arg_type_is_mem_ptr(arg_type)) {
 +		expected_type = PTR_TO_STACK;
 +		/* One exception here. In case function allows for NULL to be
 +		 * passed in as argument, it's a SCALAR_VALUE type. Final test
 +		 * happens during stack boundary checking.
 +		 */
 +		if (register_is_null(reg) &&
 +		    (arg_type == ARG_PTR_TO_MEM_OR_NULL ||
 +		     arg_type == ARG_PTR_TO_ALLOC_MEM_OR_NULL))
 +			/* final test in check_stack_boundary() */;
 +		else if (!type_is_pkt_pointer(type) &&
 +			 type != PTR_TO_MAP_VALUE &&
 +			 type != PTR_TO_MEM &&
 +			 type != PTR_TO_RDONLY_BUF &&
 +			 type != PTR_TO_RDWR_BUF &&
 +			 type != expected_type)
 +			goto err_type;
 +	} else if (arg_type_is_alloc_mem_ptr(arg_type)) {
 +		expected_type = PTR_TO_MEM;
 +		if (register_is_null(reg) &&
 +		    arg_type == ARG_PTR_TO_ALLOC_MEM_OR_NULL)
 +			/* final test in check_stack_boundary() */;
 +		else if (type != expected_type)
 +			goto err_type;
++=======
+ 	if (register_is_null(reg) && arg_type_may_be_null(arg_type))
+ 		/* A NULL register has a SCALAR_VALUE type, so skip
+ 		 * type checking.
+ 		 */
+ 		goto skip_type_check;
+ 
+ 	err = check_reg_type(env, regno, arg_type, fn->arg_btf_id[arg]);
+ 	if (err)
+ 		return err;
+ 
+ 	if (type == PTR_TO_CTX) {
+ 		err = check_ctx_reg(env, reg, regno);
+ 		if (err < 0)
+ 			return err;
+ 	}
+ 
+ skip_type_check:
+ 	if (reg->ref_obj_id) {
++>>>>>>> a968d5e277f1 (bpf: Move the PTR_TO_BTF_ID check to check_reg_type())
  		if (meta->ref_obj_id) {
  			verbose(env, "verifier internal error: more than one arg with ref_obj_id R%d %u %u\n",
  				regno, reg->ref_obj_id,
* Unmerged path kernel/bpf/verifier.c
