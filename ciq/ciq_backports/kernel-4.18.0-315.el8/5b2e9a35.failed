rtw88: coex: add feature to enhance HID coexistence performance

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Ching-Te Ku <ku920601@realtek.com>
commit 5b2e9a35e456619f9477eefb6aa029390b763f79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/5b2e9a35.failed

Add toggle table related function to enhance WL throughput when WL coexist
with 4/18 HID.
The toggle table feature will toggle WL/BT priority table during WL slot,
it can decrease the impact from HID's frequently packets and prevent HID
lag.

	Signed-off-by: Ching-Te Ku <ku920601@realtek.com>
	Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
	Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
Link: https://lore.kernel.org/r/20201126021059.11981-11-pkshih@realtek.com
(cherry picked from commit 5b2e9a35e456619f9477eefb6aa029390b763f79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/realtek/rtw88/coex.c
diff --cc drivers/net/wireless/realtek/rtw88/coex.c
index efd15821c4ab,c704c6885a18..000000000000
--- a/drivers/net/wireless/realtek/rtw88/coex.c
+++ b/drivers/net/wireless/realtek/rtw88/coex.c
@@@ -1748,8 -1850,8 +1823,12 @@@ static void rtw_coex_action_bt_hid(stru
  	struct rtw_efuse *efuse = &rtwdev->efuse;
  	struct rtw_chip_info *chip = rtwdev->chip;
  	u8 table_case, tdma_case;
 +	u32 wl_bw;
  	u32 slot_type = 0;
++<<<<<<< HEAD
++=======
+ 	bool bt_multi_link_remain = false, is_toggle_table = false;
++>>>>>>> 5b2e9a35e456 (rtw88: coex: add feature to enhance HID coexistence performance)
  
  	rtw_dbg(rtwdev, RTW_DBG_COEX, "[BTCoex], %s()\n", __func__);
  	rtw_coex_set_ant_path(rtwdev, false, COEX_SET_ANT_2G);
@@@ -1761,35 -1861,40 +1840,48 @@@
  		/* Shared-Ant */
  		if (coex_stat->bt_ble_exist) {
  			/* RCU */
 -			if (coex_stat->cnt_wl[COEX_CNT_WL_SCANAP] > 5) {
 -				table_case = 26;
 -				tdma_case = 2;
 -			} else {
 -				table_case = 27;
 -				tdma_case = 9;
 -			}
 -		} else {
 -			/* Legacy HID  */
 -			if (coex_stat->bt_profile_num == 1 &&
 -			    (coex_stat->bt_multi_link ||
 -			    (coex_stat->lo_pri_rx +
 -			     coex_stat->lo_pri_tx > 360) ||
 -			     coex_stat->bt_slave ||
 -			     bt_multi_link_remain)) {
 -				slot_type = TDMA_4SLOT;
 -				table_case = 12;
 -				tdma_case = 20;
 -			} else if (coex_stat->bt_a2dp_active) {
 -				table_case = 9;
 +			if (!coex_stat->wl_gl_busy)
 +				table_case = 14;
 +			else
 +				table_case = 15;
 +
 +			if (coex_stat->bt_a2dp_active || wl_bw == 0)
  				tdma_case = 18;
++<<<<<<< HEAD
 +			else if (coex_stat->wl_gl_busy)
 +				tdma_case = 8;
 +			else
 +				tdma_case = 4;
 +		} else {
 +			if (coex_stat->bt_a2dp_active || wl_bw == 0) {
 +				table_case = 8;
 +				tdma_case = 4;
++=======
+ 			} else if (coex_stat->bt_418_hid_exist &&
+ 				   coex_stat->wl_gl_busy) {
+ 				is_toggle_table = true;
+ 				slot_type = TDMA_4SLOT;
+ 				table_case = 9;
+ 				tdma_case = 24;
+ 			} else if (coex_stat->bt_ble_hid_exist &&
+ 				   coex_stat->wl_gl_busy) {
+ 				table_case = 32;
+ 				tdma_case = 9;
++>>>>>>> 5b2e9a35e456 (rtw88: coex: add feature to enhance HID coexistence performance)
  			} else {
 -				table_case = 9;
 -				tdma_case = 9;
 +				/* for 4/18 HID */
 +				if (coex_stat->bt_418_hid_exist &&
 +				    coex_stat->wl_gl_busy) {
 +					table_case = 12;
 +					tdma_case = 4;
 +				} else if (coex_stat->bt_ble_hid_exist &&
 +					   coex_stat->wl_gl_busy) {
 +					table_case = 32;
 +					tdma_case = 9;
 +				} else {
 +					table_case = 10;
 +					tdma_case = 4;
 +				}
  			}
  		}
  	} else {
@@@ -1940,26 -2051,35 +2037,46 @@@ static void rtw_coex_action_bt_a2dp_hid
  	struct rtw_coex_dm *coex_dm = &coex->dm;
  	struct rtw_efuse *efuse = &rtwdev->efuse;
  	struct rtw_chip_info *chip = rtwdev->chip;
- 	u8 table_case, tdma_case;
+ 	u8 table_case, tdma_case, interval;
  	u32 slot_type = 0;
+ 	bool is_toggle_table = false;
  
 -	slot_type = TDMA_4SLOT;
 -
  	rtw_dbg(rtwdev, RTW_DBG_COEX, "[BTCoex], %s()\n", __func__);
  	rtw_coex_set_ant_path(rtwdev, false, COEX_SET_ANT_2G);
  	rtw_coex_set_rf_para(rtwdev, chip->wl_rf_para_rx[0]);
  
  	if (efuse->share_ant) {
  		/* Shared-Ant */
++<<<<<<< HEAD
 +		slot_type = TDMA_4SLOT;
 +
 +		if (coex_stat->bt_ble_exist)
 +			table_case = 26;
 +		else
++=======
+ 		if (coex_stat->bt_ble_exist) {
+ 			table_case = 26; /* for RCU */
+ 		} else if (coex_stat->bt_418_hid_exist) {
++>>>>>>> 5b2e9a35e456 (rtw88: coex: add feature to enhance HID coexistence performance)
+ 			table_case = 9;
+ 			interval = 1;
+ 		} else {
  			table_case = 9;
+ 		}
  
++<<<<<<< HEAD
 +		if (coex_stat->wl_gl_busy)
++=======
+ 		if (coex_stat->wl_connecting || !coex_stat->wl_gl_busy) {
+ 			tdma_case = 14;
+ 		} else if (coex_stat->bt_418_hid_exist) {
+ 			is_toggle_table = true;
+ 			tdma_case = 23;
+ 		} else {
++>>>>>>> 5b2e9a35e456 (rtw88: coex: add feature to enhance HID coexistence performance)
  			tdma_case = 13;
 -		}
 +		else
 +			tdma_case = 14;
  	} else {
  		/* Non-Shared-Ant */
  		if (coex_stat->bt_ble_exist)
* Unmerged path drivers/net/wireless/realtek/rtw88/coex.c
diff --git a/drivers/net/wireless/realtek/rtw88/coex.h b/drivers/net/wireless/realtek/rtw88/coex.h
index c4898132702f..8ab9852ec9ed 100644
--- a/drivers/net/wireless/realtek/rtw88/coex.h
+++ b/drivers/net/wireless/realtek/rtw88/coex.h
@@ -25,6 +25,9 @@
 #define PARA1_H2C69_TBTT_TIMES	GENMASK(5, 0)
 #define PARA1_H2C69_TBTT_DIV100	BIT(7)
 
+#define COEX_H2C69_TOGGLE_TABLE_A 0xd
+#define COEX_H2C69_TOGGLE_TABLE_B 0x7
+
 #define TDMA_4SLOT	BIT(8)
 
 #define TDMA_TIMER_TYPE_2SLOT 0
diff --git a/drivers/net/wireless/realtek/rtw88/main.h b/drivers/net/wireless/realtek/rtw88/main.h
index d56a018adf07..d3a540882b18 100644
--- a/drivers/net/wireless/realtek/rtw88/main.h
+++ b/drivers/net/wireless/realtek/rtw88/main.h
@@ -1333,6 +1333,8 @@ struct rtw_coex_stat {
 	bool wl_cck_lock_pre;
 	bool wl_cck_lock_ever;
 	bool wl_connecting;
+	bool wl_slot_toggle;
+	bool wl_slot_toggle_change; /* if toggle to no-toggle */
 
 	u32 bt_supported_version;
 	u32 bt_supported_feature;
@@ -1369,6 +1371,9 @@ struct rtw_coex_stat {
 	u8 ampdu_max_time;
 	u8 wl_tput_dir;
 
+	u8 wl_toggle_para[6];
+	u8 wl_toggle_interval;
+
 	u16 score_board;
 	u16 retry_limit;
 
