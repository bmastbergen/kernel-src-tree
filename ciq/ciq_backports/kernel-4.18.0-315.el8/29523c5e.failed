bpf: Fix build without BPF_LSM.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit 29523c5e6716521f6e2fb59d7785e2bc0b1a993a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/29523c5e.failed

resolve_btfids doesn't like empty set. Add unused ID when BPF_LSM is off.

Fixes: 1e6c62a88215 ("bpf: Introduce sleepable BPF programs")
	Reported-by: Björn Töpel <bjorn.topel@gmail.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Tested-by: Song Liu <songliubraving@fb.com>
	Acked-by: KP Singh <kpsingh@google.com>
Link: https://lore.kernel.org/bpf/20200831163132.66521-1-alexei.starovoitov@gmail.com
(cherry picked from commit 29523c5e6716521f6e2fb59d7785e2bc0b1a993a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 543b6ee6fd97,b4c22b5ce5a2..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -10981,15 -11003,48 +10981,29 @@@ static int check_attach_modify_return(u
  	return -EINVAL;
  }
  
++<<<<<<< HEAD
 +int bpf_check_attach_target(struct bpf_verifier_log *log,
 +			    const struct bpf_prog *prog,
 +			    const struct bpf_prog *tgt_prog,
 +			    u32 btf_id,
 +			    struct bpf_attach_target_info *tgt_info)
++=======
+ /* non exhaustive list of sleepable bpf_lsm_*() functions */
+ BTF_SET_START(btf_sleepable_lsm_hooks)
+ #ifdef CONFIG_BPF_LSM
+ BTF_ID(func, bpf_lsm_file_mprotect)
+ BTF_ID(func, bpf_lsm_bprm_committed_creds)
+ #else
+ BTF_ID_UNUSED
+ #endif
+ BTF_SET_END(btf_sleepable_lsm_hooks)
+ 
+ static int check_sleepable_lsm_hook(u32 btf_id)
++>>>>>>> 29523c5e6716 (bpf: Fix build without BPF_LSM.)
  {
 -	return btf_id_set_contains(&btf_sleepable_lsm_hooks, btf_id);
 -}
 -
 -/* list of non-sleepable functions that are otherwise on
 - * ALLOW_ERROR_INJECTION list
 - */
 -BTF_SET_START(btf_non_sleepable_error_inject)
 -/* Three functions below can be called from sleepable and non-sleepable context.
 - * Assume non-sleepable from bpf safety point of view.
 - */
 -BTF_ID(func, __add_to_page_cache_locked)
 -BTF_ID(func, should_fail_alloc_page)
 -BTF_ID(func, should_failslab)
 -BTF_SET_END(btf_non_sleepable_error_inject)
 -
 -static int check_non_sleepable_error_inject(u32 btf_id)
 -{
 -	return btf_id_set_contains(&btf_non_sleepable_error_inject, btf_id);
 -}
 -
 -static int check_attach_btf_id(struct bpf_verifier_env *env)
 -{
 -	struct bpf_prog *prog = env->prog;
  	bool prog_extension = prog->type == BPF_PROG_TYPE_EXT;
 -	struct bpf_prog *tgt_prog = prog->aux->linked_prog;
 -	u32 btf_id = prog->aux->attach_btf_id;
  	const char prefix[] = "btf_trace_";
 -	struct btf_func_model fmodel;
  	int ret = 0, subprog = -1, i;
 -	struct bpf_trampoline *tr;
  	const struct btf_type *t;
  	bool conservative = true;
  	const char *tname;
* Unmerged path kernel/bpf/verifier.c
