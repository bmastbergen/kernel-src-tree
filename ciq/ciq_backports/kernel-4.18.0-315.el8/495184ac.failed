mt76: mt7915: add support for applying pre-calibration data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Ryder Lee <ryder.lee@mediatek.com>
commit 495184ac91bb866ad7d794ad6ceb064e191319d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/495184ac.failed

When the EEPROM data is read from flash, it can contain pre-calibration
data, which can save calibration time.

Note that group_cal can save 30% bootup calibration time, and dpd_cal can
save 75% channel switching time.

	Tested-by: Bo Jiao <bo.jiao@mediatek.com>
	Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 495184ac91bb866ad7d794ad6ceb064e191319d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt76.h
#	drivers/net/wireless/mediatek/mt76/mt7915/eeprom.c
#	drivers/net/wireless/mediatek/mt76/mt7915/eeprom.h
#	drivers/net/wireless/mediatek/mt76/mt7915/init.c
#	drivers/net/wireless/mediatek/mt76/mt7915/main.c
#	drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
diff --cc drivers/net/wireless/mediatek/mt76/mt76.h
index 402ba47d2d7c,289f195a7951..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt76.h
+++ b/drivers/net/wireless/mediatek/mt76/mt76.h
@@@ -799,7 -836,8 +799,12 @@@ void mt76_seq_puts_array(struct seq_fil
  			 s8 *val, int len);
  
  int mt76_eeprom_init(struct mt76_dev *dev, int len);
++<<<<<<< HEAD
 +void mt76_eeprom_override(struct mt76_dev *dev);
++=======
+ void mt76_eeprom_override(struct mt76_phy *phy);
+ int mt76_get_of_eeprom(struct mt76_dev *dev, void *data, int offset, int len);
++>>>>>>> 495184ac91bb (mt76: mt7915: add support for applying pre-calibration data)
  
  struct mt76_queue *
  mt76_init_queue(struct mt76_dev *dev, int qid, int idx, int n_desc,
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/eeprom.c
index 1b3e270b4f52,353f8d8497d5..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/eeprom.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/eeprom.c
@@@ -22,9 -39,14 +39,18 @@@ static int mt7915_eeprom_load(struct mt
  	if (ret < 0)
  		return ret;
  
++<<<<<<< HEAD
 +	memset(dev->mt76.eeprom.data, -1, MT7915_EEPROM_SIZE);
++=======
+ 	if (ret) {
+ 		dev->flash_mode = true;
+ 		ret = mt7915_eeprom_load_precal(dev);
+ 	} else {
+ 		memset(dev->mt76.eeprom.data, -1, MT7915_EEPROM_SIZE);
+ 	}
++>>>>>>> 495184ac91bb (mt76: mt7915: add support for applying pre-calibration data)
  
- 	return 0;
+ 	return ret;
  }
  
  static int mt7915_check_eeprom(struct mt7915_dev *dev)
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/eeprom.h
index 4e31d6ab4fa6,8ef5ebfad706..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/eeprom.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/eeprom.h
@@@ -15,26 -15,39 +15,46 @@@ enum mt7915_eeprom_field 
  	MT_EE_CHIP_ID =		0x000,
  	MT_EE_VERSION =		0x002,
  	MT_EE_MAC_ADDR =	0x004,
 -	MT_EE_MAC_ADDR2 =	0x00a,
  	MT_EE_DDIE_FT_VERSION =	0x050,
+ 	MT_EE_DO_PRE_CAL =	0x062,
  	MT_EE_WIFI_CONF =	0x190,
  	MT_EE_TX0_POWER_2G =	0x2fc,
  	MT_EE_TX0_POWER_5G =	0x34b,
  	MT_EE_ADIE_FT_VERSION =	0x9a0,
  
- 	__MT_EE_MAX =		0xe00
+ 	__MT_EE_MAX =		0xe00,
+ 	/* 0xe10 ~ 0x5780 used to save group cal data */
+ 	MT_EE_PRECAL =		0xe10
  };
  
++<<<<<<< HEAD
 +#define MT_EE_WIFI_CONF_TX_MASK			GENMASK(2, 0)
 +#define MT_EE_WIFI_CONF_BAND_SEL		GENMASK(7, 6)
 +#define MT_EE_WIFI_CONF_TSSI0_2G		BIT(0)
 +#define MT_EE_WIFI_CONF_TSSI0_5G		BIT(2)
 +#define MT_EE_WIFI_CONF_TSSI1_5G		BIT(4)
++=======
+ #define MT_EE_WIFI_CAL_GROUP			BIT(0)
+ #define MT_EE_WIFI_CAL_DPD			GENMASK(2, 1)
+ #define MT_EE_CAL_UNIT				1024
+ #define MT_EE_CAL_GROUP_SIZE			(44 * MT_EE_CAL_UNIT)
+ #define MT_EE_CAL_DPD_SIZE			(54 * MT_EE_CAL_UNIT)
+ 
+ #define MT_EE_WIFI_CONF0_TX_PATH		GENMASK(2, 0)
+ #define MT_EE_WIFI_CONF0_BAND_SEL		GENMASK(7, 6)
+ #define MT_EE_WIFI_CONF1_BAND_SEL		GENMASK(7, 6)
+ #define MT_EE_WIFI_CONF3_TX_PATH_B0		GENMASK(1, 0)
+ #define MT_EE_WIFI_CONF3_TX_PATH_B1		GENMASK(5, 4)
+ #define MT_EE_WIFI_CONF7_TSSI0_2G		BIT(0)
+ #define MT_EE_WIFI_CONF7_TSSI0_5G		BIT(2)
+ #define MT_EE_WIFI_CONF7_TSSI1_5G		BIT(4)
++>>>>>>> 495184ac91bb (mt76: mt7915: add support for applying pre-calibration data)
  
  enum mt7915_eeprom_band {
 -	MT_EE_BAND_SEL_DEFAULT,
 -	MT_EE_BAND_SEL_5GHZ,
 -	MT_EE_BAND_SEL_2GHZ,
 -	MT_EE_BAND_SEL_DUAL,
 +	MT_EE_DUAL_BAND,
 +	MT_EE_5GHZ,
 +	MT_EE_2GHZ,
 +	MT_EE_DBDC,
  };
  
  #define SKU_DELTA_VAL		GENMASK(5, 0)
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/init.c
index 49c09d0d8906,19fa9ad7d5d7..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/init.c
@@@ -267,6 -116,289 +267,291 @@@ mt7915_init_wiphy(struct ieee80211_hw *
  	ieee80211_hw_set(hw, WANT_MONITOR_VIF);
  
  	hw->max_tx_fragments = 4;
++<<<<<<< HEAD
++=======
+ 
+ 	if (phy->mt76->cap.has_2ghz)
+ 		phy->mt76->sband_2g.sband.ht_cap.cap |=
+ 			IEEE80211_HT_CAP_LDPC_CODING |
+ 			IEEE80211_HT_CAP_MAX_AMSDU;
+ 
+ 	if (phy->mt76->cap.has_5ghz) {
+ 		phy->mt76->sband_5g.sband.ht_cap.cap |=
+ 			IEEE80211_HT_CAP_LDPC_CODING |
+ 			IEEE80211_HT_CAP_MAX_AMSDU;
+ 		phy->mt76->sband_5g.sband.vht_cap.cap |=
+ 			IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_7991 |
+ 			IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MASK;
+ 	}
+ 
+ 	mt76_set_stream_caps(phy->mt76, true);
+ 	mt7915_set_stream_vht_txbf_caps(phy);
+ 	mt7915_set_stream_he_caps(phy);
+ }
+ 
+ static void
+ mt7915_mac_init_band(struct mt7915_dev *dev, u8 band)
+ {
+ 	u32 mask, set;
+ 
+ 	mt76_rmw_field(dev, MT_TMAC_CTCR0(band),
+ 		       MT_TMAC_CTCR0_INS_DDLMT_REFTIME, 0x3f);
+ 	mt76_set(dev, MT_TMAC_CTCR0(band),
+ 		 MT_TMAC_CTCR0_INS_DDLMT_VHT_SMPDU_EN |
+ 		 MT_TMAC_CTCR0_INS_DDLMT_EN);
+ 
+ 	mask = MT_MDP_RCFR0_MCU_RX_MGMT |
+ 	       MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR |
+ 	       MT_MDP_RCFR0_MCU_RX_CTL_BAR;
+ 	set = FIELD_PREP(MT_MDP_RCFR0_MCU_RX_MGMT, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_BAR, MT_MDP_TO_HIF);
+ 	mt76_rmw(dev, MT_MDP_BNRCFR0(band), mask, set);
+ 
+ 	mask = MT_MDP_RCFR1_MCU_RX_BYPASS |
+ 	       MT_MDP_RCFR1_RX_DROPPED_UCAST |
+ 	       MT_MDP_RCFR1_RX_DROPPED_MCAST;
+ 	set = FIELD_PREP(MT_MDP_RCFR1_MCU_RX_BYPASS, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_UCAST, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_MCAST, MT_MDP_TO_HIF);
+ 	mt76_rmw(dev, MT_MDP_BNRCFR1(band), mask, set);
+ 
+ 	mt76_set(dev, MT_WF_RMAC_MIB_TIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
+ 	mt76_set(dev, MT_WF_RMAC_MIB_AIRTIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
+ 
+ 	mt76_rmw_field(dev, MT_DMA_DCR0(band), MT_DMA_DCR0_MAX_RX_LEN, 1536);
+ 	/* disable rx rate report by default due to hw issues */
+ 	mt76_clear(dev, MT_DMA_DCR0(band), MT_DMA_DCR0_RXD_G5_EN);
+ }
+ 
+ static void mt7915_mac_init(struct mt7915_dev *dev)
+ {
+ 	int i;
+ 
+ 	mt76_rmw_field(dev, MT_MDP_DCR1, MT_MDP_DCR1_MAX_RX_LEN, 1536);
+ 	/* enable hardware de-agg */
+ 	mt76_set(dev, MT_MDP_DCR0, MT_MDP_DCR0_DAMSDU_EN);
+ 
+ 	for (i = 0; i < MT7915_WTBL_SIZE; i++)
+ 		mt7915_mac_wtbl_update(dev, i,
+ 				       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
+ 	for (i = 0; i < 2; i++)
+ 		mt7915_mac_init_band(dev, i);
+ }
+ 
+ static int mt7915_txbf_init(struct mt7915_dev *dev)
+ {
+ 	int ret;
+ 
+ 
+ 	if (dev->dbdc_support) {
+ 		ret = mt7915_mcu_set_txbf_module(dev);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* trigger sounding packets */
+ 	ret = mt7915_mcu_set_txbf_sounding(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* enable eBF */
+ 	return mt7915_mcu_set_txbf_type(dev);
+ }
+ 
+ static void
+ mt7915_init_txpower_band(struct mt7915_dev *dev,
+ 			 struct ieee80211_supported_band *sband)
+ {
+ 	int i, n_chains = hweight8(dev->mphy.antenna_mask);
+ 
+ 	for (i = 0; i < sband->n_channels; i++) {
+ 		struct ieee80211_channel *chan = &sband->channels[i];
+ 		u32 target_power = 0;
+ 		int j;
+ 
+ 		for (j = 0; j < n_chains; j++) {
+ 			u32 val;
+ 
+ 			val = mt7915_eeprom_get_target_power(dev, chan, j);
+ 			target_power = max(target_power, val);
+ 		}
+ 
+ 		chan->max_power = min_t(int, chan->max_reg_power,
+ 					target_power / 2);
+ 		chan->orig_mpwr = target_power / 2;
+ 	}
+ }
+ 
+ static void mt7915_init_txpower(struct mt7915_dev *dev)
+ {
+ 	mt7915_init_txpower_band(dev, &dev->mphy.sband_2g.sband);
+ 	mt7915_init_txpower_band(dev, &dev->mphy.sband_5g.sband);
+ 
+ 	mt7915_eeprom_init_sku(dev);
+ }
+ 
+ static int mt7915_register_ext_phy(struct mt7915_dev *dev)
+ {
+ 	struct mt7915_phy *phy = mt7915_ext_phy(dev);
+ 	struct mt76_phy *mphy;
+ 	int ret;
+ 
+ 	if (!dev->dbdc_support)
+ 		return 0;
+ 
+ 	if (phy)
+ 		return 0;
+ 
+ 	mphy = mt76_alloc_phy(&dev->mt76, sizeof(*phy), &mt7915_ops);
+ 	if (!mphy)
+ 		return -ENOMEM;
+ 
+ 	phy = mphy->priv;
+ 	phy->dev = dev;
+ 	phy->mt76 = mphy;
+ 	mphy->chainmask = dev->chainmask & ~dev->mphy.chainmask;
+ 	mphy->antenna_mask = BIT(hweight8(mphy->chainmask)) - 1;
+ 
+ 	INIT_LIST_HEAD(&phy->stats_list);
+ 	INIT_DELAYED_WORK(&mphy->mac_work, mt7915_mac_work);
+ 
+ 	mt7915_eeprom_parse_band_config(phy);
+ 	mt7915_init_wiphy(mphy->hw);
+ 
+ 	memcpy(mphy->macaddr, dev->mt76.eeprom.data + MT_EE_MAC_ADDR2,
+ 	       ETH_ALEN);
+ 	mt76_eeprom_override(mphy);
+ 
+ 	ret = mt7915_init_tx_queues(phy, MT7915_TXQ_BAND1,
+ 				    MT7915_TX_RING_SIZE);
+ 	if (ret)
+ 		goto error;
+ 
+ 	ret = mt76_register_phy(mphy, true, mt7915_rates,
+ 				ARRAY_SIZE(mt7915_rates));
+ 	if (ret)
+ 		goto error;
+ 
+ 	return 0;
+ 
+ error:
+ 	ieee80211_free_hw(mphy->hw);
+ 	return ret;
+ }
+ 
+ static void mt7915_init_work(struct work_struct *work)
+ {
+ 	struct mt7915_dev *dev = container_of(work, struct mt7915_dev,
+ 				 init_work);
+ 
+ 	mt7915_mcu_set_eeprom(dev);
+ 	mt7915_mac_init(dev);
+ 	mt7915_init_txpower(dev);
+ 	mt7915_txbf_init(dev);
+ }
+ 
+ static void mt7915_wfsys_reset(struct mt7915_dev *dev)
+ {
+ 	u32 val = MT_TOP_PWR_KEY | MT_TOP_PWR_SW_PWR_ON | MT_TOP_PWR_PWR_ON;
+ 
+ #define MT_MCU_DUMMY_RANDOM	GENMASK(15, 0)
+ #define MT_MCU_DUMMY_DEFAULT	GENMASK(31, 16)
+ 
+ 	mt76_wr(dev, MT_MCU_WFDMA0_DUMMY_CR, MT_MCU_DUMMY_RANDOM);
+ 
+ 	/* change to software control */
+ 	val |= MT_TOP_PWR_SW_RST;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* reset wfsys */
+ 	val &= ~MT_TOP_PWR_SW_RST;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* release wfsys then mcu re-excutes romcode */
+ 	val |= MT_TOP_PWR_SW_RST;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* switch to hw control */
+ 	val &= ~MT_TOP_PWR_SW_RST;
+ 	val |= MT_TOP_PWR_HW_CTRL;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* check whether mcu resets to default */
+ 	if (!mt76_poll_msec(dev, MT_MCU_WFDMA0_DUMMY_CR, MT_MCU_DUMMY_DEFAULT,
+ 			    MT_MCU_DUMMY_DEFAULT, 1000)) {
+ 		dev_err(dev->mt76.dev, "wifi subsystem reset failure\n");
+ 		return;
+ 	}
+ 
+ 	/* wfsys reset won't clear host registers */
+ 	mt76_clear(dev, MT_TOP_MISC, MT_TOP_MISC_FW_STATE);
+ 
+ 	msleep(100);
+ }
+ 
+ static int mt7915_init_hardware(struct mt7915_dev *dev)
+ {
+ 	int ret, idx;
+ 
+ 	mt76_wr(dev, MT_INT_SOURCE_CSR, ~0);
+ 
+ 	INIT_WORK(&dev->init_work, mt7915_init_work);
+ 	spin_lock_init(&dev->token_lock);
+ 	idr_init(&dev->token);
+ 
+ 	dev->dbdc_support = !!(mt76_rr(dev, MT_HW_BOUND) & BIT(5));
+ 
+ 	/* If MCU was already running, it is likely in a bad state */
+ 	if (mt76_get_field(dev, MT_TOP_MISC, MT_TOP_MISC_FW_STATE) >
+ 	    FW_STATE_FW_DOWNLOAD)
+ 		mt7915_wfsys_reset(dev);
+ 
+ 	ret = mt7915_dma_init(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	set_bit(MT76_STATE_INITIALIZED, &dev->mphy.state);
+ 
+ 	/*
+ 	 * force firmware operation mode into normal state,
+ 	 * which should be set before firmware download stage.
+ 	 */
+ 	mt76_wr(dev, MT_SWDEF_MODE, MT_SWDEF_NORMAL_MODE);
+ 
+ 	ret = mt7915_mcu_init(dev);
+ 	if (ret) {
+ 		/* Reset and try again */
+ 		mt7915_wfsys_reset(dev);
+ 
+ 		ret = mt7915_mcu_init(dev);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	ret = mt7915_eeprom_init(dev);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 
+ 	if (dev->flash_mode) {
+ 		ret = mt7915_mcu_apply_group_cal(dev);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* Beacon and mgmt frames should occupy wcid 0 */
+ 	idx = mt76_wcid_alloc(dev->mt76.wcid_mask, MT7915_WTBL_STA - 1);
+ 	if (idx)
+ 		return -ENOSPC;
+ 
+ 	dev->mt76.global_wcid.idx = idx;
+ 	dev->mt76.global_wcid.hw_key_idx = -1;
+ 	dev->mt76.global_wcid.tx_info |= MT_WCID_TX_INFO_SET;
+ 	rcu_assign_pointer(dev->mt76.wcid[idx], &dev->mt76.global_wcid);
+ 
+ 	return 0;
++>>>>>>> 495184ac91bb (mt76: mt7915: add support for applying pre-calibration data)
  }
  
  void mt7915_set_stream_vht_txbf_caps(struct mt7915_phy *phy)
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/main.c
index f1f58e854e08,413abbca3246..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/main.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/main.c
@@@ -284,7 -313,13 +284,17 @@@ int mt7915_set_channel(struct mt7915_ph
  	mt7915_init_dfs_state(phy);
  	mt76_set_channel(phy->mt76);
  
++<<<<<<< HEAD
 +	ret = mt7915_mcu_set_chan_info(phy, MCU_EXT_CMD_CHANNEL_SWITCH);
++=======
+ 	if (dev->flash_mode) {
+ 		ret = mt7915_mcu_apply_tx_dpd(phy);
+ 		if (ret)
+ 			goto out;
+ 	}
+ 
+ 	ret = mt7915_mcu_set_chan_info(phy, MCU_EXT_CMD(CHANNEL_SWITCH));
++>>>>>>> 495184ac91bb (mt76: mt7915: add support for applying pre-calibration data)
  	if (ret)
  		goto out;
  
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
index 2ffe7fd42d87,456daf3ad853..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
@@@ -174,21 -197,12 +174,27 @@@ struct mt7915_dev 
  
  	s8 **rate_power; /* TODO: use mt76_rate_power */
  
 -	bool dbdc_support;
 -	bool flash_mode;
  	bool fw_debug;
++<<<<<<< HEAD
 +
 +#ifdef CONFIG_NL80211_TESTMODE
 +	struct {
 +		u32 *reg_backup;
 +
 +		s32 last_freq_offset;
 +		u8 last_rcpi[4];
 +		s8 last_ib_rssi[4];
 +		s8 last_wb_rssi[4];
 +		u8 last_snr;
 +
 +		u8 spe_idx;
 +	} test;
 +#endif
++=======
+ 	bool ibf;
+ 
+ 	void *cal;
++>>>>>>> 495184ac91bb (mt76: mt7915: add support for applying pre-calibration data)
  };
  
  enum {
diff --git a/drivers/net/wireless/mediatek/mt76/eeprom.c b/drivers/net/wireless/mediatek/mt76/eeprom.c
index 6f2813de4aab..dc5ce9d8e271 100644
--- a/drivers/net/wireless/mediatek/mt76/eeprom.c
+++ b/drivers/net/wireless/mediatek/mt76/eeprom.c
@@ -9,8 +9,7 @@
 #include <linux/etherdevice.h>
 #include "mt76.h"
 
-static int
-mt76_get_of_eeprom(struct mt76_dev *dev, int len)
+int mt76_get_of_eeprom(struct mt76_dev *dev, void *eep, int offset, int len)
 {
 #if defined(CONFIG_OF) && defined(CONFIG_MTD)
 	struct device_node *np = dev->dev->of_node;
@@ -18,7 +17,6 @@ mt76_get_of_eeprom(struct mt76_dev *dev, int len)
 	const __be32 *list;
 	const char *part;
 	phandle phandle;
-	int offset = 0;
 	int size;
 	size_t retlen;
 	int ret;
@@ -54,7 +52,7 @@ mt76_get_of_eeprom(struct mt76_dev *dev, int len)
 	}
 
 	offset = be32_to_cpup(list);
-	ret = mtd_read(mtd, offset, len, &retlen, dev->eeprom.data);
+	ret = mtd_read(mtd, offset, len, &retlen, eep);
 	put_mtd_device(mtd);
 	if (ret)
 		goto out_put_node;
@@ -65,7 +63,7 @@ mt76_get_of_eeprom(struct mt76_dev *dev, int len)
 	}
 
 	if (of_property_read_bool(dev->dev->of_node, "big-endian")) {
-		u8 *data = (u8 *)dev->eeprom.data;
+		u8 *data = (u8 *)eep;
 		int i;
 
 		/* convert eeprom data in Little Endian */
@@ -86,6 +84,7 @@ mt76_get_of_eeprom(struct mt76_dev *dev, int len)
 	return -ENOENT;
 #endif
 }
+EXPORT_SYMBOL_GPL(mt76_get_of_eeprom);
 
 void
 mt76_eeprom_override(struct mt76_dev *dev)
@@ -337,6 +336,6 @@ mt76_eeprom_init(struct mt76_dev *dev, int len)
 	if (!dev->eeprom.data)
 		return -ENOMEM;
 
-	return !mt76_get_of_eeprom(dev, len);
+	return !mt76_get_of_eeprom(dev, dev->eeprom.data, 0, len);
 }
 EXPORT_SYMBOL_GPL(mt76_eeprom_init);
* Unmerged path drivers/net/wireless/mediatek/mt76/mt76.h
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/eeprom.c
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/eeprom.h
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/init.c
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/main.c
diff --git a/drivers/net/wireless/mediatek/mt76/mt7915/mcu.c b/drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
index ba80c55cb820..e02d5d5f48cf 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
@@ -3264,6 +3264,148 @@ int mt7915_mcu_get_eeprom(struct mt7915_dev *dev, u32 offset)
 	return 0;
 }
 
+static int mt7915_mcu_set_pre_cal(struct mt7915_dev *dev, u8 idx,
+				  u8 *data, u32 len, int cmd)
+{
+	struct {
+		u8 dir;
+		u8 valid;
+		__le16 bitmap;
+		s8 precal;
+		u8 action;
+		u8 band;
+		u8 idx;
+		u8 rsv[4];
+		__le32 len;
+	} req;
+	struct sk_buff *skb;
+
+	skb = mt76_mcu_msg_alloc(&dev->mt76, NULL, sizeof(req) + len);
+	if (!skb)
+		return -ENOMEM;
+
+	req.idx = idx;
+	req.len = cpu_to_le32(len);
+	skb_put_data(skb, &req, sizeof(req));
+	skb_put_data(skb, data, len);
+
+	return mt76_mcu_skb_send_msg(&dev->mt76, skb, cmd, false);
+}
+
+int mt7915_mcu_apply_group_cal(struct mt7915_dev *dev)
+{
+	u8 idx = 0, *cal = dev->cal, *eep = dev->mt76.eeprom.data;
+	u32 total = MT_EE_CAL_GROUP_SIZE;
+
+	if (!(eep[MT_EE_DO_PRE_CAL] & MT_EE_WIFI_CAL_GROUP))
+		return 0;
+
+	/*
+	 * Items: Rx DCOC, RSSI DCOC, Tx TSSI DCOC, Tx LPFG
+	 * Tx FDIQ, Tx DCIQ, Rx FDIQ, Rx FIIQ, ADCDCOC
+	 */
+	while (total > 0) {
+		int ret, len;
+
+		len = min_t(u32, total, MT_EE_CAL_UNIT);
+
+		ret = mt7915_mcu_set_pre_cal(dev, idx, cal, len,
+					     MCU_EXT_CMD(GROUP_PRE_CAL_INFO));
+		if (ret)
+			return ret;
+
+		total -= len;
+		cal += len;
+		idx++;
+	}
+
+	return 0;
+}
+
+static int mt7915_find_freq_idx(const u16 *freqs, int n_freqs, u16 cur)
+{
+	int i;
+
+	for (i = 0; i < n_freqs; i++)
+		if (cur == freqs[i])
+			return i;
+
+	return -1;
+}
+
+static int mt7915_dpd_freq_idx(u16 freq, u8 bw)
+{
+	static const u16 freq_list[] = {
+		5180, 5200, 5220, 5240,
+		5260, 5280, 5300, 5320,
+		5500, 5520, 5540, 5560,
+		5580, 5600, 5620, 5640,
+		5660, 5680, 5700, 5745,
+		5765, 5785, 5805, 5825
+	};
+	int offset_2g = ARRAY_SIZE(freq_list);
+	int idx;
+
+	if (freq < 4000) {
+		if (freq < 2432)
+			return offset_2g;
+		if (freq < 2457)
+			return offset_2g + 1;
+
+		return offset_2g + 2;
+	}
+
+	if (bw == NL80211_CHAN_WIDTH_80P80 || bw == NL80211_CHAN_WIDTH_160)
+		return -1;
+
+	if (bw != NL80211_CHAN_WIDTH_20) {
+		idx = mt7915_find_freq_idx(freq_list, ARRAY_SIZE(freq_list),
+					   freq + 10);
+		if (idx >= 0)
+			return idx;
+
+		idx = mt7915_find_freq_idx(freq_list, ARRAY_SIZE(freq_list),
+					   freq - 10);
+		if (idx >= 0)
+			return idx;
+	}
+
+	return mt7915_find_freq_idx(freq_list, ARRAY_SIZE(freq_list), freq);
+}
+
+int mt7915_mcu_apply_tx_dpd(struct mt7915_phy *phy)
+{
+	struct mt7915_dev *dev = phy->dev;
+	struct cfg80211_chan_def *chandef = &phy->mt76->chandef;
+	u16 total = 2, idx, center_freq = chandef->center_freq1;
+	u8 *cal = dev->cal, *eep = dev->mt76.eeprom.data;
+
+	if (!(eep[MT_EE_DO_PRE_CAL] & MT_EE_WIFI_CAL_DPD))
+		return 0;
+
+	idx = mt7915_dpd_freq_idx(center_freq, chandef->width);
+	if (idx < 0)
+		return -EINVAL;
+
+	/* Items: Tx DPD, Tx Flatness */
+	idx = idx * 2;
+	cal += MT_EE_CAL_GROUP_SIZE;
+
+	while (total--) {
+		int ret;
+
+		cal += (idx * MT_EE_CAL_UNIT);
+		ret = mt7915_mcu_set_pre_cal(dev, idx, cal, MT_EE_CAL_UNIT,
+					     MCU_EXT_CMD(DPD_PRE_CAL_INFO));
+		if (ret)
+			return ret;
+
+		idx++;
+	}
+
+	return 0;
+}
+
 int mt7915_mcu_get_temperature(struct mt7915_dev *dev, int index)
 {
 	struct {
diff --git a/drivers/net/wireless/mediatek/mt76/mt7915/mcu.h b/drivers/net/wireless/mediatek/mt76/mt7915/mcu.h
index 1ef6ed016179..d34143288745 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7915/mcu.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/mcu.h
@@ -268,6 +268,8 @@ enum {
 	MCU_EXT_CMD_FW_DBG_CTRL = 0x95,
 	MCU_EXT_CMD_SET_RDD_TH = 0x9d,
 	MCU_EXT_CMD_SET_SPR = 0xa8,
+	MCU_EXT_CMD_GROUP_PRE_CAL_INFO = 0xab,
+	MCU_EXT_CMD_DPD_PRE_CAL_INFO = 0xac,
 	MCU_EXT_CMD_PHY_STAT_INFO = 0xad,
 };
 
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
