cfg80211/mac80211: Support disabling HE mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Ben Greear <greearb@candelatech.com>
commit b6db0f899a16a23f5a9ea6c8b0fafc7bbd38e03d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/b6db0f89.failed

Allow user to disable HE mode, similar to how VHT and HT
can be disabled.  Useful for testing.

	Signed-off-by: Ben Greear <greearb@candelatech.com>
Link: https://lore.kernel.org/r/20210204144610.25971-1-greearb@candelatech.com
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit b6db0f899a16a23f5a9ea6c8b0fafc7bbd38e03d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/uapi/linux/nl80211.h
index dd7e80e66bfb,5188fe581efc..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2987,6 -3032,21 +2987,24 @@@ enum nl80211_attrs 
  
  	NL80211_ATTR_HE_6GHZ_CAPABILITY,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_FILS_DISCOVERY,
+ 
+ 	NL80211_ATTR_UNSOL_BCAST_PROBE_RESP,
+ 
+ 	NL80211_ATTR_S1G_CAPABILITY,
+ 	NL80211_ATTR_S1G_CAPABILITY_MASK,
+ 
+ 	NL80211_ATTR_SAE_PWE,
+ 
+ 	NL80211_ATTR_RECONNECT_REQUESTED,
+ 
+ 	NL80211_ATTR_SAR_SPEC,
+ 
+ 	NL80211_ATTR_DISABLE_HE,
+ 
++>>>>>>> b6db0f899a16 (cfg80211/mac80211: Support disabling HE mode)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
diff --cc net/wireless/nl80211.c
index 6ff26d687322,521d36bb0803..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -689,10 -737,22 +689,29 @@@ static const struct nla_policy nl80211_
  	[NL80211_ATTR_RECEIVE_MULTICAST] = { .type = NLA_FLAG },
  	[NL80211_ATTR_WIPHY_FREQ_OFFSET] = NLA_POLICY_RANGE(NLA_U32, 0, 999),
  	[NL80211_ATTR_SCAN_FREQ_KHZ] = { .type = NLA_NESTED },
++<<<<<<< HEAD
 +	[NL80211_ATTR_HE_6GHZ_CAPABILITY] = {
 +		.type = NLA_EXACT_LEN,
 +		.len = sizeof(struct ieee80211_he_6ghz_capa),
 +	},
++=======
+ 	[NL80211_ATTR_HE_6GHZ_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(sizeof(struct ieee80211_he_6ghz_capa)),
+ 	[NL80211_ATTR_FILS_DISCOVERY] =
+ 		NLA_POLICY_NESTED(nl80211_fils_discovery_policy),
+ 	[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP] =
+ 		NLA_POLICY_NESTED(nl80211_unsol_bcast_probe_resp_policy),
+ 	[NL80211_ATTR_S1G_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(IEEE80211_S1G_CAPABILITY_LEN),
+ 	[NL80211_ATTR_S1G_CAPABILITY_MASK] =
+ 		NLA_POLICY_EXACT_LEN(IEEE80211_S1G_CAPABILITY_LEN),
+ 	[NL80211_ATTR_SAE_PWE] =
+ 		NLA_POLICY_RANGE(NLA_U8, NL80211_SAE_PWE_HUNT_AND_PECK,
+ 				 NL80211_SAE_PWE_BOTH),
+ 	[NL80211_ATTR_RECONNECT_REQUESTED] = { .type = NLA_REJECT },
+ 	[NL80211_ATTR_SAR_SPEC] = NLA_POLICY_NESTED(sar_policy),
+ 	[NL80211_ATTR_DISABLE_HE] = { .type = NLA_FLAG },
++>>>>>>> b6db0f899a16 (cfg80211/mac80211: Support disabling HE mode)
  };
  
  /* policy for the key attributes */
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index adb3bb4b6816..9234cc46f426 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -2481,12 +2481,14 @@ struct cfg80211_auth_request {
  *	authentication capability. Drivers can offload authentication to
  *	userspace if this flag is set. Only applicable for cfg80211_connect()
  *	request (connect callback).
+ * @ASSOC_REQ_DISABLE_HE:  Disable HE
  */
 enum cfg80211_assoc_req_flags {
 	ASSOC_REQ_DISABLE_HT			= BIT(0),
 	ASSOC_REQ_DISABLE_VHT			= BIT(1),
 	ASSOC_REQ_USE_RRM			= BIT(2),
 	CONNECT_REQ_EXTERNAL_AUTH_SUPPORT	= BIT(3),
+	ASSOC_REQ_DISABLE_HE			= BIT(4),
 };
 
 /**
* Unmerged path include/uapi/linux/nl80211.h
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index c03a683e11a5..19a448ccd9fc 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -5720,6 +5720,9 @@ int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata,
 	if (req->flags & ASSOC_REQ_DISABLE_VHT)
 		ifmgd->flags |= IEEE80211_STA_DISABLE_VHT;
 
+	if (req->flags & ASSOC_REQ_DISABLE_HE)
+		ifmgd->flags |= IEEE80211_STA_DISABLE_HE;
+
 	err = ieee80211_prep_connection(sdata, req->bss, true, override);
 	if (err)
 		goto err_clear;
* Unmerged path net/wireless/nl80211.c
