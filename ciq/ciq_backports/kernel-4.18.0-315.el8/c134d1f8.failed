ath11k: Handle errors if peer creation fails

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Alex Dewar <alex.dewar90@gmail.com>
commit c134d1f8c436d96b3f62896c630278e3ec001280
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/c134d1f8.failed

ath11k_peer_create() is called without its return value being checked,
meaning errors will be unhandled. Add missing check and, as the mutex is
unconditionally unlocked on leaving this function, simplify the exit
path.

Addresses-Coverity-ID: 1497531 ("Code maintainability issues")
Fixes: 701e48a43e15 ("ath11k: add packet log support for QCA6390")
	Signed-off-by: Alex Dewar <alex.dewar90@gmail.com>
	Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
Link: https://lore.kernel.org/r/20201004100218.311653-1-alex.dewar90@gmail.com
(cherry picked from commit c134d1f8c436d96b3f62896c630278e3ec001280)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath11k/mac.c
diff --cc drivers/net/wireless/ath/ath11k/mac.c
index 101943b1eb72,f4aedd5aefaf..000000000000
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@@ -5265,17 -5271,32 +5265,33 @@@ ath11k_mac_op_assign_vif_chanctx(struc
  		   ctx, arvif->vdev_id);
  
  	/* for QCA6390 bss peer must be created before vdev_start */
 -	if (ab->hw_params.vdev_start_delay &&
 -	    arvif->vdev_type != WMI_VDEV_TYPE_AP &&
 -	    arvif->vdev_type != WMI_VDEV_TYPE_MONITOR) {
 +	if (ab->hw_params.vdev_start_delay) {
  		memcpy(&arvif->chanctx, ctx, sizeof(*ctx));
- 		mutex_unlock(&ar->conf_mutex);
- 		return 0;
+ 		ret = 0;
+ 		goto out;
  	}
  
  	if (WARN_ON(arvif->is_started)) {
- 		mutex_unlock(&ar->conf_mutex);
- 		return -EBUSY;
+ 		ret = -EBUSY;
+ 		goto out;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (ab->hw_params.vdev_start_delay) {
+ 		param.vdev_id = arvif->vdev_id;
+ 		param.peer_type = WMI_PEER_TYPE_DEFAULT;
+ 		param.peer_addr = ar->mac_addr;
+ 
+ 		ret = ath11k_peer_create(ar, arvif, NULL, &param);
+ 		if (ret) {
+ 			ath11k_warn(ab, "failed to create peer after vdev start delay: %d",
+ 				    ret);
+ 			goto out;
+ 		}
+ 	}
+ 
++>>>>>>> c134d1f8c436 (ath11k: Handle errors if peer creation fails)
  	ret = ath11k_mac_vdev_start(arvif, &ctx->def);
  	if (ret) {
  		ath11k_warn(ab, "failed to start vdev %i addr %pM on freq %d: %d\n",
* Unmerged path drivers/net/wireless/ath/ath11k/mac.c
