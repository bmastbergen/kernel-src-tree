locking/rtmutex: Decrapify __rt_mutex_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit f5a98866e506a816f6a855df1e7ed41e1891ec66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/f5a98866.failed

The conditional debug handling is just another layer of obfuscation. Split
the function so rt_mutex_init_proxy_locked() can invoke the inner init and
__rt_mutex_init() gets the full treatment.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lore.kernel.org/r/20210326153943.955697588@linutronix.de
(cherry picked from commit f5a98866e506a816f6a855df1e7ed41e1891ec66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/locking/rtmutex.c
diff --cc kernel/locking/rtmutex.c
index 285481c03e78,c9c2ab50c1d5..000000000000
--- a/kernel/locking/rtmutex.c
+++ b/kernel/locking/rtmutex.c
@@@ -1631,8 -1610,7 +1629,12 @@@ EXPORT_SYMBOL_GPL(__rt_mutex_init)
  void rt_mutex_init_proxy_locked(struct rt_mutex *lock,
  				struct task_struct *proxy_owner)
  {
++<<<<<<< HEAD
 +	__rt_mutex_init(lock, NULL, NULL);
 +	debug_rt_mutex_proxy_lock(lock, proxy_owner);
++=======
+ 	__rt_mutex_basic_init(lock);
++>>>>>>> f5a98866e506 (locking/rtmutex: Decrapify __rt_mutex_init())
  	rt_mutex_set_owner(lock, proxy_owner);
  }
  
* Unmerged path kernel/locking/rtmutex.c
diff --git a/kernel/locking/rtmutex_common.h b/kernel/locking/rtmutex_common.h
index e6913103d7ff..9947f24cbbdb 100644
--- a/kernel/locking/rtmutex_common.h
+++ b/kernel/locking/rtmutex_common.h
@@ -126,6 +126,13 @@ enum rtmutex_chainwalk {
 	RT_MUTEX_FULL_CHAINWALK,
 };
 
+static inline void __rt_mutex_basic_init(struct rt_mutex *lock)
+{
+	lock->owner = NULL;
+	raw_spin_lock_init(&lock->wait_lock);
+	lock->waiters = RB_ROOT_CACHED;
+}
+
 /*
  * PI-futex support (proxy locking functions, etc.):
  */
