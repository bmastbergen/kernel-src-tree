mt76: check return value of mt76_txq_send_burst in mt76_txq_schedule_list

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 57b8b57516c5108b0078051a31c68dc9dfcbf68f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/57b8b575.failed

Since mt76_txq_send_burst routine can report a negative error code,
check the returned value before incrementing the number of transmitted
frames in mt76_txq_schedule_list routine.
Return -EBUSY directly if the device is in reset or in power management.

Fixes: 90fdc1717b186 ("mt76: use mac80211 txq scheduling")
	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 57b8b57516c5108b0078051a31c68dc9dfcbf68f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/tx.c
diff --cc drivers/net/wireless/mediatek/mt76/tx.c
index 2d82e401427b,451ed60c6296..000000000000
--- a/drivers/net/wireless/mediatek/mt76/tx.c
+++ b/drivers/net/wireless/mediatek/mt76/tx.c
@@@ -454,16 -460,17 +454,16 @@@ mt76_txq_schedule_list(struct mt76_phy 
  	struct mt76_wcid *wcid;
  	int ret = 0;
  
 +	spin_lock_bh(&q->lock);
  	while (1) {
+ 		int n_frames = 0;
+ 
  		if (test_bit(MT76_STATE_PM, &phy->state) ||
- 		    test_bit(MT76_RESET, &phy->state)) {
- 			ret = -EBUSY;
- 			break;
- 		}
+ 		    test_bit(MT76_RESET, &phy->state))
+ 			return -EBUSY;
  
 -		if (dev->queue_ops->tx_cleanup &&
 -		    q->queued + 2 * MT_TXQ_FREE_THR >= q->ndesc) {
 -			dev->queue_ops->tx_cleanup(dev, q, false);
 -		}
 +		if (mt76_txq_stopped(q))
 +			break;
  
  		txq = ieee80211_next_txq(phy->hw, qid);
  		if (!txq)
@@@ -487,10 -496,18 +487,23 @@@
  			spin_lock_bh(&q->lock);
  		}
  
++<<<<<<< HEAD
 +		ret += mt76_txq_send_burst(phy, q, mtxq);
++=======
+ 		if (!mt76_txq_stopped(q))
+ 			n_frames = mt76_txq_send_burst(phy, q, mtxq);
+ 
+ 		spin_unlock_bh(&q->lock);
+ 
++>>>>>>> 57b8b57516c5 (mt76: check return value of mt76_txq_send_burst in mt76_txq_schedule_list)
  		ieee80211_return_txq(phy->hw, txq, false);
+ 
+ 		if (unlikely(n_frames < 0))
+ 			return n_frames;
+ 
+ 		ret += n_frames;
  	}
 +	spin_unlock_bh(&q->lock);
  
  	return ret;
  }
* Unmerged path drivers/net/wireless/mediatek/mt76/tx.c
