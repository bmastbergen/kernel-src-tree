net: ena: use constant value for net_device allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Shay Agroskin <shayagr@amazon.com>
commit ce74496a1575dc5364ad2aed99d3604269c7b645
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/ce74496a.failed

The patch changes the maximum number of RX/TX queues it advertises to
the kernel (via alloc_etherdev_mq()) from a value received from the
device to a constant value which is the minimum between 128 and the
number of CPUs in the system.

By allocating the net_device struct with a constant number of queues,
the driver is able to allocate it at a much earlier stage, before
calling any ena_com functions. This would allow to make all log prints
in ena_com to use netdev_* log functions instead or current pr_* ones.

Note:
netdev_* prints in ena_com functions that are called before
net_device registration in ena_probe() might print messages that are
a bit ugly (with strings like "(unnamed net_device) (uninitialized)").
However we decided to use netdev_* prints in these functions anyway,
for the sake of getting better messages later, when ena_com functions
are called after ena_probe() form other parts of the driver.
See discussion about this decision in [1].

[1] http://www.mail-archive.com/netdev@vger.kernel.org/msg353590.html

	Signed-off-by: Shay Agroskin <shayagr@amazon.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit ce74496a1575dc5364ad2aed99d3604269c7b645)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amazon/ena/ena_netdev.c
diff --cc drivers/net/ethernet/amazon/ena/ena_netdev.c
index a34982bbddb7,31c196c8c000..000000000000
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@@ -4173,18 -4178,34 +4175,39 @@@ static int ena_probe(struct pci_dev *pd
  
  	ena_dev->dmadev = &pdev->dev;
  
+ 	netdev = alloc_etherdev_mq(sizeof(struct ena_adapter), ENA_MAX_RINGS);
+ 	if (!netdev) {
+ 		dev_err(&pdev->dev, "alloc_etherdev_mq failed\n");
+ 		rc = -ENOMEM;
+ 		goto err_free_region;
+ 	}
+ 
+ 	SET_NETDEV_DEV(netdev, &pdev->dev);
+ 	adapter = netdev_priv(netdev);
+ 	adapter->ena_dev = ena_dev;
+ 	adapter->netdev = netdev;
+ 	adapter->pdev = pdev;
+ 	adapter->msg_enable = netif_msg_init(debug, DEFAULT_MSG_ENABLE);
+ 
+ 	pci_set_drvdata(pdev, adapter);
+ 
  	rc = ena_device_init(ena_dev, pdev, &get_feat_ctx, &wd_state);
  	if (rc) {
 -		dev_err(&pdev->dev, "ENA device init failed\n");
 +		dev_err(&pdev->dev, "ena device init failed\n");
  		if (rc == -ETIME)
  			rc = -EPROBE_DEFER;
- 		goto err_free_region;
+ 		goto err_netdev_destroy;
  	}
  
  	rc = ena_map_llq_mem_bar(pdev, ena_dev, bars);
  	if (rc) {
++<<<<<<< HEAD
 +		dev_err(&pdev->dev, "ena llq bar mapping failed\n");
 +		goto err_free_ena_dev;
++=======
+ 		dev_err(&pdev->dev, "ENA llq bar mapping failed\n");
+ 		goto err_device_destroy;
++>>>>>>> ce74496a1575 (net: ena: use constant value for net_device allocation)
  	}
  
  	calc_queue_ctx.ena_dev = ena_dev;
* Unmerged path drivers/net/ethernet/amazon/ena/ena_netdev.c
