net: ena: aggregate stats increase into a function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Shay Agroskin <shayagr@amazon.com>
commit 89dd735e8c1e58b9b0d39535c7c32261773cb495
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/89dd735e.failed

Introduce ena_increase_stat() function to increase statistics by a
certain number.
The function includes the
    - lock aquire (on 32bit machines)
    - stat increase
    - lock release (on 32bit machines)

line sequence that is ubiquitous across the driver.

The function increases a single stat at a time and several stats which
are increased together weren't put into a function to avoid
calling the function several times for each stat which looks bad and
might decrease performance.

	Signed-off-by: Shay Agroskin <shayagr@amazon.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 89dd735e8c1e58b9b0d39535c7c32261773cb495)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amazon/ena/ena_netdev.c
diff --cc drivers/net/ethernet/amazon/ena/ena_netdev.c
index a34982bbddb7,0c17e5b37fc4..000000000000
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@@ -153,10 -160,9 +160,16 @@@ static int ena_xmit_common(struct net_d
  	 */
  	if (unlikely(rc)) {
  		netif_err(adapter, tx_queued, dev,
++<<<<<<< HEAD
 +			  "failed to prepare tx bufs\n");
 +		u64_stats_update_begin(&ring->syncp);
 +		ring->tx_stats.prepare_ctx_err++;
 +		u64_stats_update_end(&ring->syncp);
++=======
+ 			  "Failed to prepare tx bufs\n");
+ 		ena_increase_stat(&ring->tx_stats.prepare_ctx_err, 1,
+ 				  &ring->syncp);
++>>>>>>> 89dd735e8c1e (net: ena: aggregate stats increase into a function)
  		if (rc != -ENOMEM) {
  			adapter->reset_reason =
  				ENA_REGS_RESET_DRIVER_INVALID_STATE;
@@@ -264,10 -270,9 +277,16 @@@ static int ena_xdp_tx_map_buff(struct e
  	return 0;
  
  error_report_dma_error:
++<<<<<<< HEAD
 +	u64_stats_update_begin(&xdp_ring->syncp);
 +	xdp_ring->tx_stats.dma_mapping_err++;
 +	u64_stats_update_end(&xdp_ring->syncp);
 +	netif_warn(adapter, tx_queued, adapter->netdev, "failed to map xdp buff\n");
++=======
+ 	ena_increase_stat(&xdp_ring->tx_stats.dma_mapping_err, 1,
+ 			  &xdp_ring->syncp);
+ 	netif_warn(adapter, tx_queued, adapter->netdev, "Failed to map xdp buff\n");
++>>>>>>> 89dd735e8c1e (net: ena: aggregate stats increase into a function)
  
  	xdp_return_frame_rx_napi(tx_info->xdpf);
  	tx_info->xdpf = NULL;
@@@ -1011,11 -1010,10 +1024,10 @@@ static int ena_refill_rx_bufs(struct en
  	}
  
  	if (unlikely(i < num)) {
- 		u64_stats_update_begin(&rx_ring->syncp);
- 		rx_ring->rx_stats.refil_partial++;
- 		u64_stats_update_end(&rx_ring->syncp);
+ 		ena_increase_stat(&rx_ring->rx_stats.refil_partial, 1,
+ 				  &rx_ring->syncp);
  		netif_warn(rx_ring->adapter, rx_err, rx_ring->netdev,
 -			   "Refilled rx qid %d with only %d buffers (from %d)\n",
 +			   "refilled rx qid %d with only %d buffers (from %d)\n",
  			   rx_ring->qid, i, num);
  	}
  
@@@ -1738,9 -1731,9 +1740,15 @@@ static void ena_unmask_interrupt(struc
  				tx_ring->smoothed_interval,
  				true);
  
++<<<<<<< HEAD
 +	u64_stats_update_begin(&tx_ring->syncp);
 +	tx_ring->tx_stats.unmask_interrupt++;
 +	u64_stats_update_end(&tx_ring->syncp);
++=======
+ 	ena_increase_stat(&tx_ring->tx_stats.unmask_interrupt, 1,
+ 			  &tx_ring->syncp);
+ 
++>>>>>>> 89dd735e8c1e (net: ena: aggregate stats increase into a function)
  	/* It is a shared MSI-X.
  	 * Tx and Rx CQ have pointer to it.
  	 * So we use one of them to reach the intr reg
@@@ -2923,10 -2910,9 +2925,16 @@@ static int ena_tx_map_skb(struct ena_ri
  	return 0;
  
  error_report_dma_error:
++<<<<<<< HEAD
 +	u64_stats_update_begin(&tx_ring->syncp);
 +	tx_ring->tx_stats.dma_mapping_err++;
 +	u64_stats_update_end(&tx_ring->syncp);
 +	netif_warn(adapter, tx_queued, adapter->netdev, "failed to map skb\n");
++=======
+ 	ena_increase_stat(&tx_ring->tx_stats.dma_mapping_err, 1,
+ 			  &tx_ring->syncp);
+ 	netif_warn(adapter, tx_queued, adapter->netdev, "Failed to map skb\n");
++>>>>>>> 89dd735e8c1e (net: ena: aggregate stats increase into a function)
  
  	tx_info->skb = NULL;
  
@@@ -3753,12 -3734,11 +3757,11 @@@ static void check_for_empty_rx_ring(str
  			rx_ring->empty_rx_queue++;
  
  			if (rx_ring->empty_rx_queue >= EMPTY_RX_REFILL) {
- 				u64_stats_update_begin(&rx_ring->syncp);
- 				rx_ring->rx_stats.empty_rx_ring++;
- 				u64_stats_update_end(&rx_ring->syncp);
+ 				ena_increase_stat(&rx_ring->rx_stats.empty_rx_ring, 1,
+ 						  &rx_ring->syncp);
  
  				netif_err(adapter, drv, adapter->netdev,
 -					  "Trigger refill for ring %d\n", i);
 +					  "trigger refill for ring %d\n", i);
  
  				napi_schedule(rx_ring->napi);
  				rx_ring->empty_rx_queue = 0;
* Unmerged path drivers/net/ethernet/amazon/ena/ena_netdev.c
