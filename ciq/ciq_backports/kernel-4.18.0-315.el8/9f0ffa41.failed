cfg80211: Add support to configure SAE PWE value to drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Rohan Dutta <drohan@codeaurora.org>
commit 9f0ffa418483938d25a15f6ad3891389f333bc59
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/9f0ffa41.failed

Add support to configure SAE PWE preference from userspace to drivers in
both AP and STA modes. This is needed for cases where the driver takes
care of Authentication frame processing (SME in the driver) so that
correct enforcement of the acceptable PWE derivation mechanism can be
performed.

The userspace applications can pass the sae_pwe value using the
NL80211_ATTR_SAE_PWE attribute in the NL80211_CMD_CONNECT and
NL80211_CMD_START_AP commands to the driver. This allows selection
between the hunting-and-pecking loop and hash-to-element options for PWE
derivation. For backwards compatibility, this new attribute is optional
and if not included, the driver is notified of the value being
unspecified.

	Signed-off-by: Rohan Dutta <drohan@codeaurora.org>
	Signed-off-by: Jouni Malinen <jouni@codeaurora.org>
Link: https://lore.kernel.org/r/20201027100910.22283-1-jouni@codeaurora.org
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 9f0ffa418483938d25a15f6ad3891389f333bc59)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/uapi/linux/nl80211.h
index dc94d21b6a61,2d733effcdaf..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2503,6 -2513,25 +2503,28 @@@ enum nl80211_commands 
   * @NL80211_ATTR_HE_6GHZ_CAPABILITY: HE 6 GHz Band Capability element (from
   *	association request when used with NL80211_CMD_NEW_STATION).
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_ATTR_FILS_DISCOVERY: Optional parameter to configure FILS
+  *	discovery. It is a nested attribute, see
+  *	&enum nl80211_fils_discovery_attributes.
+  *
+  * @NL80211_ATTR_UNSOL_BCAST_PROBE_RESP: Optional parameter to configure
+  *	unsolicited broadcast probe response. It is a nested attribute, see
+  *	&enum nl80211_unsol_bcast_probe_resp_attributes.
+  *
+  * @NL80211_ATTR_S1G_CAPABILITY: S1G Capability information element (from
+  *	association request when used with NL80211_CMD_NEW_STATION)
+  * @NL80211_ATTR_S1G_CAPABILITY_MASK: S1G Capability Information element
+  *	override mask. Used with NL80211_ATTR_S1G_CAPABILITY in
+  *	NL80211_CMD_ASSOCIATE or NL80211_CMD_CONNECT.
+  *
+  * @NL80211_ATTR_SAE_PWE: Indicates the mechanism(s) allowed for SAE PWE
+  *	derivation in WPA3-Personal networks which are using SAE authentication.
+  *	This is a u8 attribute that encapsulates one of the values from
+  *	&enum nl80211_sae_pwe_mechanism.
+  *
++>>>>>>> 9f0ffa418483 (cfg80211: Add support to configure SAE PWE value to drivers)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -2985,6 -3014,15 +3007,18 @@@ enum nl80211_attrs 
  
  	NL80211_ATTR_HE_6GHZ_CAPABILITY,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_FILS_DISCOVERY,
+ 
+ 	NL80211_ATTR_UNSOL_BCAST_PROBE_RESP,
+ 
+ 	NL80211_ATTR_S1G_CAPABILITY,
+ 	NL80211_ATTR_S1G_CAPABILITY_MASK,
+ 
+ 	NL80211_ATTR_SAE_PWE,
+ 
++>>>>>>> 9f0ffa418483 (cfg80211: Add support to configure SAE PWE value to drivers)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
@@@ -7025,4 -7071,83 +7059,86 @@@ enum nl80211_iftype_akm_attributes 
  	NL80211_IFTYPE_AKM_ATTR_MAX = __NL80211_IFTYPE_AKM_ATTR_LAST - 1,
  };
  
++<<<<<<< HEAD
++=======
+ /**
+  * enum nl80211_fils_discovery_attributes - FILS discovery configuration
+  * from IEEE Std 802.11ai-2016, Annex C.3 MIB detail.
+  *
+  * @__NL80211_FILS_DISCOVERY_ATTR_INVALID: Invalid
+  *
+  * @NL80211_FILS_DISCOVERY_ATTR_INT_MIN: Minimum packet interval (u32, TU).
+  *	Allowed range: 0..10000 (TU = Time Unit)
+  * @NL80211_FILS_DISCOVERY_ATTR_INT_MAX: Maximum packet interval (u32, TU).
+  *	Allowed range: 0..10000 (TU = Time Unit)
+  * @NL80211_FILS_DISCOVERY_ATTR_TMPL: Template data for FILS discovery action
+  *	frame including the headers.
+  *
+  * @__NL80211_FILS_DISCOVERY_ATTR_LAST: Internal
+  * @NL80211_FILS_DISCOVERY_ATTR_MAX: highest attribute
+  */
+ enum nl80211_fils_discovery_attributes {
+ 	__NL80211_FILS_DISCOVERY_ATTR_INVALID,
+ 
+ 	NL80211_FILS_DISCOVERY_ATTR_INT_MIN,
+ 	NL80211_FILS_DISCOVERY_ATTR_INT_MAX,
+ 	NL80211_FILS_DISCOVERY_ATTR_TMPL,
+ 
+ 	/* keep last */
+ 	__NL80211_FILS_DISCOVERY_ATTR_LAST,
+ 	NL80211_FILS_DISCOVERY_ATTR_MAX = __NL80211_FILS_DISCOVERY_ATTR_LAST - 1
+ };
+ 
+ /*
+  * FILS discovery template minimum length with action frame headers and
+  * mandatory fields.
+  */
+ #define NL80211_FILS_DISCOVERY_TMPL_MIN_LEN 42
+ 
+ /**
+  * enum nl80211_unsol_bcast_probe_resp_attributes - Unsolicited broadcast probe
+  *	response configuration. Applicable only in 6GHz.
+  *
+  * @__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID: Invalid
+  *
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT: Maximum packet interval (u32, TU).
+  *	Allowed range: 0..20 (TU = Time Unit). IEEE P802.11ax/D6.0
+  *	26.17.2.3.2 (AP behavior for fast passive scanning).
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL: Unsolicited broadcast probe response
+  *	frame template (binary).
+  *
+  * @__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST: Internal
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX: highest attribute
+  */
+ enum nl80211_unsol_bcast_probe_resp_attributes {
+ 	__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID,
+ 
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT,
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL,
+ 
+ 	/* keep last */
+ 	__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST,
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX =
+ 		__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST - 1
+ };
+ 
+ /**
+  * enum nl80211_sae_pwe_mechanism - The mechanism(s) allowed for SAE PWE
+  *	derivation. Applicable only when WPA3-Personal SAE authentication is
+  *	used.
+  *
+  * @NL80211_SAE_PWE_UNSPECIFIED: not specified, used internally to indicate that
+  *	attribute is not present from userspace.
+  * @NL80211_SAE_PWE_HUNT_AND_PECK: hunting-and-pecking loop only
+  * @NL80211_SAE_PWE_HASH_TO_ELEMENT: hash-to-element only
+  * @NL80211_SAE_PWE_BOTH: both hunting-and-pecking loop and hash-to-element
+  *	can be used.
+  */
+ enum nl80211_sae_pwe_mechanism {
+ 	NL80211_SAE_PWE_UNSPECIFIED,
+ 	NL80211_SAE_PWE_HUNT_AND_PECK,
+ 	NL80211_SAE_PWE_HASH_TO_ELEMENT,
+ 	NL80211_SAE_PWE_BOTH,
+ };
++>>>>>>> 9f0ffa418483 (cfg80211: Add support to configure SAE PWE value to drivers)
  #endif /* __LINUX_NL80211_H */
diff --cc net/wireless/nl80211.c
index f1131f8c805f,0928ecbe5bd6..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -689,10 -705,19 +689,26 @@@ static const struct nla_policy nl80211_
  	[NL80211_ATTR_RECEIVE_MULTICAST] = { .type = NLA_FLAG },
  	[NL80211_ATTR_WIPHY_FREQ_OFFSET] = NLA_POLICY_RANGE(NLA_U32, 0, 999),
  	[NL80211_ATTR_SCAN_FREQ_KHZ] = { .type = NLA_NESTED },
++<<<<<<< HEAD
 +	[NL80211_ATTR_HE_6GHZ_CAPABILITY] = {
 +		.type = NLA_EXACT_LEN,
 +		.len = sizeof(struct ieee80211_he_6ghz_capa),
 +	},
++=======
+ 	[NL80211_ATTR_HE_6GHZ_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(sizeof(struct ieee80211_he_6ghz_capa)),
+ 	[NL80211_ATTR_FILS_DISCOVERY] =
+ 		NLA_POLICY_NESTED(nl80211_fils_discovery_policy),
+ 	[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP] =
+ 		NLA_POLICY_NESTED(nl80211_unsol_bcast_probe_resp_policy),
+ 	[NL80211_ATTR_S1G_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(IEEE80211_S1G_CAPABILITY_LEN),
+ 	[NL80211_ATTR_S1G_CAPABILITY_MASK] =
+ 		NLA_POLICY_EXACT_LEN(IEEE80211_S1G_CAPABILITY_LEN),
+ 	[NL80211_ATTR_SAE_PWE] =
+ 		NLA_POLICY_RANGE(NLA_U8, NL80211_SAE_PWE_HUNT_AND_PECK,
+ 				 NL80211_SAE_PWE_BOTH),
++>>>>>>> 9f0ffa418483 (cfg80211: Add support to configure SAE PWE value to drivers)
  };
  
  /* policy for the key attributes */
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 876c01c891f9..f7cceded48ea 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1008,6 +1008,14 @@ struct survey_info {
  * @sae_pwd: password for SAE authentication (for devices supporting SAE
  *	offload)
  * @sae_pwd_len: length of SAE password (for devices supporting SAE offload)
+ * @sae_pwe: The mechanisms allowed for SAE PWE derivation
+ *	NL80211_SAE_PWE_UNSPECIFIED: Not-specified, used to indicate userspace
+ *		did not specify any preference. The driver should follow its
+ *		internal policy in such a scenario.
+ *	NL80211_SAE_PWE_HUNT_AND_PECK: Allow hunting-and-pecking loop only
+ *	NL80211_SAE_PWE_HASH_TO_ELEMENT: Allow hash-to-element only
+ *	NL80211_SAE_PWE_BOTH: Allow either hunting-and-pecking loop
+ *		or hash-to-element
  */
 struct cfg80211_crypto_settings {
 	u32 wpa_versions;
@@ -1026,6 +1034,7 @@ struct cfg80211_crypto_settings {
 	const u8 *psk;
 	const u8 *sae_pwd;
 	u8 sae_pwd_len;
+	enum nl80211_sae_pwe_mechanism sae_pwe;
 };
 
 /**
* Unmerged path include/uapi/linux/nl80211.h
* Unmerged path net/wireless/nl80211.c
