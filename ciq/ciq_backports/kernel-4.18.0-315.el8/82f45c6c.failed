bpf: tcp: Do not limit cb_flags when creating child sk from listen sk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 82f45c6c4a70622cc0585e3f4372e192a6491d26
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/82f45c6c.failed

The commit 0813a841566f ("bpf: tcp: Allow bpf prog to write and parse TCP header option")
unnecessarily introduced bpf_skops_init_child() which limited the child
sk from inheriting all bpf_sock_ops_cb_flags of the listen sk.  That
breaks existing user expectation.

This patch removes the bpf_skops_init_child() and just allows
sock_copy() to do its job to copy everything from listen sk to
the child sk.

Fixes: 0813a841566f ("bpf: tcp: Allow bpf prog to write and parse TCP header option")
	Reported-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20201002013448.2542025-1-kafai@fb.com
(cherry picked from commit 82f45c6c4a70622cc0585e3f4372e192a6491d26)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tcp.h
diff --cc include/net/tcp.h
index b92b04b1ecea,d4ef5bf94168..000000000000
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@@ -2194,6 -2227,22 +2194,25 @@@ int __tcp_bpf_recvmsg(struct sock *sk, 
  		      struct msghdr *msg, int len, int flags);
  #endif /* CONFIG_NET_SOCK_MSG */
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CGROUP_BPF
+ static inline void bpf_skops_init_skb(struct bpf_sock_ops_kern *skops,
+ 				      struct sk_buff *skb,
+ 				      unsigned int end_offset)
+ {
+ 	skops->skb = skb;
+ 	skops->skb_data_end = skb->data + end_offset;
+ }
+ #else
+ static inline void bpf_skops_init_skb(struct bpf_sock_ops_kern *skops,
+ 				      struct sk_buff *skb,
+ 				      unsigned int end_offset)
+ {
+ }
+ #endif
+ 
++>>>>>>> 82f45c6c4a70 (bpf: tcp: Do not limit cb_flags when creating child sk from listen sk)
  /* Call BPF_SOCK_OPS program that returns an int. If the return value
   * is < 0, then the BPF op failed (for example if the loaded BPF
   * program does not support the chosen operation or there is no BPF
* Unmerged path include/net/tcp.h
