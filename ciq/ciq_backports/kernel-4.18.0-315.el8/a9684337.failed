kbuild: explicitly specify the build id style

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Bill Wendling <morbo@google.com>
commit a968433723310f35898b4a2f635a7991aeef66b1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/a9684337.failed

ld's --build-id defaults to "sha1" style, while lld defaults to "fast".
The build IDs are very different between the two, which may confuse
programs that reference them.

	Signed-off-by: Bill Wendling <morbo@google.com>
	Acked-by: David S. Miller <davem@davemloft.net>
	Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
(cherry picked from commit a968433723310f35898b4a2f635a7991aeef66b1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Makefile
#	arch/arm/vdso/Makefile
#	arch/arm64/kernel/vdso/Makefile
#	arch/arm64/kernel/vdso32/Makefile
#	arch/mips/vdso/Makefile
#	arch/riscv/kernel/vdso/Makefile
#	arch/s390/kernel/vdso64/Makefile
#	arch/sparc/vdso/Makefile
#	arch/x86/entry/vdso/Makefile
diff --cc Makefile
index d748092236a2,088fb7d49dd7..000000000000
--- a/Makefile
+++ b/Makefile
@@@ -862,29 -957,34 +862,54 @@@ KBUILD_CFLAGS   += $(call cc-option,-We
  # change __FILE__ to the relative path from the srctree
  KBUILD_CFLAGS	+= $(call cc-option,-fmacro-prefix-map=$(srctree)/=)
  
 -# ensure -fcf-protection is disabled when using retpoline as it is
 -# incompatible with -mindirect-branch=thunk-extern
 -ifdef CONFIG_RETPOLINE
 -KBUILD_CFLAGS += $(call cc-option,-fcf-protection=none)
 +# use the deterministic mode of AR if available
 +KBUILD_ARFLAGS := $(call ar-option,D)
 +
 +include scripts/Makefile.kasan
 +include scripts/Makefile.extrawarn
 +include scripts/Makefile.ubsan
 +include scripts/Makefile.kcsan
 +
 +# Add any arch overrides and user supplied CPPFLAGS, AFLAGS and CFLAGS as the
 +# last assignments
 +KBUILD_CPPFLAGS += $(ARCH_CPPFLAGS) $(KCPPFLAGS)
 +KBUILD_AFLAGS   += $(ARCH_AFLAGS)   $(KAFLAGS)
 +KBUILD_CFLAGS   += $(ARCH_CFLAGS)   $(KCFLAGS)
 +
 +# Use --build-id when available.
 +LDFLAGS_BUILD_ID := $(call ld-option, --build-id)
 +KBUILD_LDFLAGS_MODULE += $(LDFLAGS_BUILD_ID)
 +LDFLAGS_vmlinux += $(LDFLAGS_BUILD_ID)
 +
 +ifdef CONFIG_LD_DEAD_CODE_DATA_ELIMINATION
 +LDFLAGS_vmlinux	+= $(call ld-option, --gc-sections,)
  endif
  
++<<<<<<< HEAD
++=======
+ # include additional Makefiles when needed
+ include-y			:= scripts/Makefile.extrawarn
+ include-$(CONFIG_KASAN)		+= scripts/Makefile.kasan
+ include-$(CONFIG_KCSAN)		+= scripts/Makefile.kcsan
+ include-$(CONFIG_UBSAN)		+= scripts/Makefile.ubsan
+ include-$(CONFIG_KCOV)		+= scripts/Makefile.kcov
+ include-$(CONFIG_GCC_PLUGINS)	+= scripts/Makefile.gcc-plugins
+ 
+ include $(addprefix $(srctree)/, $(include-y))
+ 
+ # scripts/Makefile.gcc-plugins is intentionally included last.
+ # Do not add $(call cc-option,...) below this line. When you build the kernel
+ # from the clean source tree, the GCC plugins do not exist at this point.
+ 
+ # Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments
+ KBUILD_CPPFLAGS += $(KCPPFLAGS)
+ KBUILD_AFLAGS   += $(KAFLAGS)
+ KBUILD_CFLAGS   += $(KCFLAGS)
+ 
+ KBUILD_LDFLAGS_MODULE += --build-id=sha1
+ LDFLAGS_vmlinux += --build-id=sha1
+ 
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  ifeq ($(CONFIG_STRIP_ASM_SYMS),y)
  LDFLAGS_vmlinux	+= $(call ld-option, -X,)
  endif
diff --cc arch/arm/vdso/Makefile
index f4efff9d3afb,150ce6e6a5d3..000000000000
--- a/arch/arm/vdso/Makefile
+++ b/arch/arm/vdso/Makefile
@@@ -8,14 -14,13 +8,22 @@@ targets := $(obj-vdso) vdso.so vdso.so.
  obj-vdso := $(addprefix $(obj)/, $(obj-vdso))
  
  ccflags-y := -fPIC -fno-common -fno-builtin -fno-stack-protector
 -ccflags-y += -DDISABLE_BRANCH_PROFILING -DBUILD_VDSO32
 -
 +ccflags-y += -DDISABLE_BRANCH_PROFILING
 +
++<<<<<<< HEAD
 +VDSO_LDFLAGS := -Wl,-Bsymbolic -Wl,--no-undefined -Wl,-soname=linux-vdso.so.1
 +VDSO_LDFLAGS += -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096
 +VDSO_LDFLAGS += -nostdlib -shared
 +VDSO_LDFLAGS += $(call cc-ldoption, -Wl$(comma)--hash-style=sysv)
 +VDSO_LDFLAGS += $(call cc-ldoption, -Wl$(comma)--build-id)
 +VDSO_LDFLAGS += $(call cc-ldoption, -fuse-ld=bfd)
++=======
+ ldflags-$(CONFIG_CPU_ENDIAN_BE8) := --be8
+ ldflags-y := -Bsymbolic --no-undefined -soname=linux-vdso.so.1 \
+ 	    -z max-page-size=4096 -nostdlib -shared $(ldflags-y) \
+ 	    --hash-style=sysv --build-id=sha1 \
+ 	    -T
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  
  obj-$(CONFIG_VDSO) += vdso.o
  extra-$(CONFIG_VDSO) += vdso.lds
diff --cc arch/arm64/kernel/vdso/Makefile
index 5b2695d31f0f,3dc4b65da99d..000000000000
--- a/arch/arm64/kernel/vdso/Makefile
+++ b/arch/arm64/kernel/vdso/Makefile
@@@ -21,8 -23,9 +21,14 @@@ obj-vdso := $(addprefix $(obj)/, $(obj-
  # potential future proofing if we end up with internal calls to the exported
  # routines, as x86 does (see 6f121e548f83 ("x86, vdso: Reimplement vdso.so
  # preparation in build-time C")).
++<<<<<<< HEAD
 +ldflags-y := -shared -nostdlib -soname=linux-vdso.so.1 --hash-style=sysv \
 +		-Bsymbolic --eh-frame-hdr --build-id -n -T
++=======
+ ldflags-y := -shared -nostdlib -soname=linux-vdso.so.1 --hash-style=sysv	\
+ 	     -Bsymbolic $(call ld-option, --no-eh-frame-hdr) --build-id=sha1 -n	\
+ 	     $(btildflags-y) -T
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  
  ccflags-y := -fno-common -fno-builtin -fno-stack-protector -ffixed-x18
  ccflags-y += -DDISABLE_BRANCH_PROFILING
diff --cc arch/arm64/kernel/vdso32/Makefile
index c8db859fdeb7,7f96a1a9f68c..000000000000
--- a/arch/arm64/kernel/vdso32/Makefile
+++ b/arch/arm64/kernel/vdso32/Makefile
@@@ -96,8 -127,8 +96,13 @@@ VDSO_LDFLAGS := $(VDSO_CPPFLAGS
  VDSO_LDFLAGS += -Wl,-Bsymbolic -Wl,--no-undefined -Wl,-soname=linux-vdso.so.1
  VDSO_LDFLAGS += -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096
  VDSO_LDFLAGS += -nostdlib -shared -mfloat-abi=soft
++<<<<<<< HEAD
 +VDSO_LDFLAGS += $(call cc32-ldoption,-Wl$(comma)--hash-style=sysv)
 +VDSO_LDFLAGS += $(call cc32-ldoption,-Wl$(comma)--build-id)
++=======
+ VDSO_LDFLAGS += -Wl,--hash-style=sysv
+ VDSO_LDFLAGS += -Wl,--build-id=sha1
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  VDSO_LDFLAGS += $(call cc32-ldoption,-fuse-ld=bfd)
  
  
diff --cc arch/mips/vdso/Makefile
index ce196046ac3e,5810cc12bc1d..000000000000
--- a/arch/mips/vdso/Makefile
+++ b/arch/mips/vdso/Makefile
@@@ -36,13 -58,22 +36,21 @@@ ifndef CONFIG_CPU_MIPSR
  endif
  
  # VDSO linker flags.
++<<<<<<< HEAD
 +VDSO_LDFLAGS := \
 +	-Wl,-Bsymbolic -Wl,--no-undefined -Wl,-soname=linux-vdso.so.1 \
 +	-nostdlib -shared \
 +	$(call cc-ldoption, -Wl$(comma)--hash-style=sysv) \
 +	$(call cc-ldoption, -Wl$(comma)--build-id)
++=======
+ ldflags-y := -Bsymbolic --no-undefined -soname=linux-vdso.so.1 \
+ 	$(filter -E%,$(KBUILD_CFLAGS)) -nostdlib -shared \
+ 	-G 0 --eh-frame-hdr --hash-style=sysv --build-id=sha1 -T
+ 
+ CFLAGS_REMOVE_vdso.o = -pg
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  
  GCOV_PROFILE := n
 -UBSAN_SANITIZE := n
 -KCOV_INSTRUMENT := n
 -
 -# Check that we don't have PIC 'jalr t9' calls left
 -quiet_cmd_vdso_mips_check = VDSOCHK $@
 -      cmd_vdso_mips_check = if $(OBJDUMP) --disassemble $@ | egrep -h "jalr.*t9" > /dev/null; \
 -		       then (echo >&2 "$@: PIC 'jalr t9' calls are not supported"; \
 -			     rm -f $@; /bin/false); fi
  
  #
  # Shared build commands.
diff --cc arch/riscv/kernel/vdso/Makefile
index f6561b783b61,7d6a94d45ec9..000000000000
--- a/arch/riscv/kernel/vdso/Makefile
+++ b/arch/riscv/kernel/vdso/Makefile
@@@ -30,11 -45,11 +30,15 @@@ $(obj)/vdso.so.dbg: $(src)/vdso.lds $(o
  	$(call if_changed,vdsold)
  
  # We also create a special relocatable object that should mirror the symbol
 -# table and layout of the linked DSO. With ld --just-symbols we can then
 -# refer to these symbols in the kernel code rather than hand-coded addresses.
 +# table and layout of the linked DSO.  With ld -R we can then refer to
 +# these symbols in the kernel code rather than hand-coded addresses.
  
  SYSCFLAGS_vdso.so.dbg = -shared -s -Wl,-soname=linux-vdso.so.1 \
++<<<<<<< HEAD
 +                            $(call cc-ldoption, -Wl$(comma)--hash-style=both)
++=======
+ 	-Wl,--build-id=sha1 -Wl,--hash-style=both
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  $(obj)/vdso-dummy.o: $(src)/vdso.lds $(obj)/rt_sigreturn.o FORCE
  	$(call if_changed,vdsold)
  
diff --cc arch/s390/kernel/vdso64/Makefile
index a22b2cf86eec,9acad762456d..000000000000
--- a/arch/s390/kernel/vdso64/Makefile
+++ b/arch/s390/kernel/vdso64/Makefile
@@@ -18,8 -18,8 +18,13 @@@ KBUILD_AFLAGS_64 += -m64 -
  
  KBUILD_CFLAGS_64 := $(filter-out -m64,$(KBUILD_CFLAGS))
  KBUILD_CFLAGS_64 += -m64 -fPIC -shared -fno-common -fno-builtin
++<<<<<<< HEAD
 +KBUILD_CFLAGS_64 += -nostdlib -Wl,-soname=linux-vdso64.so.1 \
 +			$(call cc-ldoption, -Wl$(comma)--hash-style=both)
++=======
+ ldflags-y := -fPIC -shared -nostdlib -soname=linux-vdso64.so.1 \
+ 	     --hash-style=both --build-id=sha1 -T
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  
  $(targets:%=$(obj)/%.dbg): KBUILD_CFLAGS = $(KBUILD_CFLAGS_64)
  $(targets:%=$(obj)/%.dbg): KBUILD_AFLAGS = $(KBUILD_AFLAGS_64)
diff --cc arch/sparc/vdso/Makefile
index dd0b5a92ffd0,469dd23887ab..000000000000
--- a/arch/sparc/vdso/Makefile
+++ b/arch/sparc/vdso/Makefile
@@@ -111,12 -110,12 +111,16 @@@ $(obj)/vdso32.so.dbg: FORCE 
  # The DSO images are built using a special linker script.
  #
  quiet_cmd_vdso = VDSO    $@
 -      cmd_vdso = $(LD) -nostdlib -o $@ \
 +      cmd_vdso = $(CC) -nostdlib -o $@ \
  		       $(VDSO_LDFLAGS) $(VDSO_LDFLAGS_$(filter %.lds,$(^F))) \
 -		       -T $(filter %.lds,$^) $(filter %.o,$^) && \
 -		sh $(srctree)/$(src)/checkundef.sh '$(OBJDUMP)' '$@'
 +		       -Wl,-T,$(filter %.lds,$^) $(filter %.o,$^)
  
++<<<<<<< HEAD
 +VDSO_LDFLAGS = -fPIC -shared $(call cc-ldoption, -Wl$(comma)--hash-style=sysv) \
 +	$(call cc-ldoption, -Wl$(comma)--build-id) -Wl,-Bsymbolic
++=======
+ VDSO_LDFLAGS = -shared --hash-style=both --build-id=sha1 -Bsymbolic
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  GCOV_PROFILE := n
  
  #
diff --cc arch/x86/entry/vdso/Makefile
index e86e36e6f659,ebba25ed9a38..000000000000
--- a/arch/x86/entry/vdso/Makefile
+++ b/arch/x86/entry/vdso/Makefile
@@@ -183,13 -171,13 +183,18 @@@ $(obj)/vdso32.so.dbg: FORCE 
  # The DSO images are built using a special linker script.
  #
  quiet_cmd_vdso = VDSO    $@
 -      cmd_vdso = $(LD) -nostdlib -o $@ \
 +      cmd_vdso = $(CC) -nostdlib -o $@ \
  		       $(VDSO_LDFLAGS) $(VDSO_LDFLAGS_$(filter %.lds,$(^F))) \
 -		       -T $(filter %.lds,$^) $(filter %.o,$^) && \
 +		       -Wl,-T,$(filter %.lds,$^) $(filter %.o,$^) && \
  		 sh $(srctree)/$(src)/checkundef.sh '$(NM)' '$@'
  
++<<<<<<< HEAD
 +VDSO_LDFLAGS = -fPIC -shared $(call cc-ldoption, -Wl$(comma)--hash-style=both) \
 +	$(call cc-ldoption, -Wl$(comma)--build-id) -Wl,-Bsymbolic $(LTO_CFLAGS)
++=======
+ VDSO_LDFLAGS = -shared --hash-style=both --build-id=sha1 \
+ 	$(call ld-option, --eh-frame-hdr) -Bsymbolic
++>>>>>>> a96843372331 (kbuild: explicitly specify the build id style)
  GCOV_PROFILE := n
  
  quiet_cmd_vdso_and_check = VDSO    $@
* Unmerged path Makefile
* Unmerged path arch/arm/vdso/Makefile
* Unmerged path arch/arm64/kernel/vdso/Makefile
* Unmerged path arch/arm64/kernel/vdso32/Makefile
* Unmerged path arch/mips/vdso/Makefile
* Unmerged path arch/riscv/kernel/vdso/Makefile
* Unmerged path arch/s390/kernel/vdso64/Makefile
* Unmerged path arch/sparc/vdso/Makefile
* Unmerged path arch/x86/entry/vdso/Makefile
diff --git a/tools/testing/selftests/bpf/Makefile b/tools/testing/selftests/bpf/Makefile
index 9ff07aa88aae..7402bf23a285 100644
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@ -134,7 +134,7 @@ $(OUTPUT)/%:%.c
 
 $(OUTPUT)/urandom_read: urandom_read.c
 	$(call msg,BINARY,,$@)
-	$(Q)$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS) -Wl,--build-id
+	$(Q)$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS) -Wl,--build-id=sha1
 
 $(OUTPUT)/test_stub.o: test_stub.c $(BPFOBJ)
 	$(call msg,CC,,$@)
