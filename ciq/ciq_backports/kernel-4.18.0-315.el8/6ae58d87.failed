x86/asm: Annotate movdir64b()'s dst argument with __iomem

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Dave Jiang <dave.jiang@intel.com>
commit 6ae58d871319dc22ef780baaacd393f8543a1e74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/6ae58d87.failed

Add a missing __iomem annotation to address a sparse warning. The caller
is expected to pass an __iomem annotated pointer to this function. The
current usages send a 64-bytes command descriptor to an MMIO location
(portal) on a device for consumption. When future usages for the
MOVDIR64B instruction warrant a separate variant of a memory to memory
operation, the argument annotation can be revisited.

Also, from the comment in movdir64b() @__dst must be supplied as an
lvalue because this tells the compiler what the object is (its size) the
instruction accesses. I.e., not the pointers but what they point to,
thus the deref'ing '*'."

The actual sparse warning is:

  sparse warnings: (new ones prefixed by >>)
     drivers/dma/idxd/submit.c: note: in included file (through include/linux/io.h, include/linux/pci.h):
  >> arch/x86/include/asm/io.h:422:27: sparse: sparse: incorrect type in \
     argument 1 (different address spaces)
		   @@     expected void *dst
		   @@     got void [noderef] __iomem *dst @@
     arch/x86/include/asm/io.h:422:27: sparse:     expected void *dst
     arch/x86/include/asm/io.h:422:27: sparse:     got void [noderef] __iomem *dst

 [ bp: Massage commit message. ]

Fixes: 0888e1030d3e ("x86/asm: Carve out a generic movdir64b() helper for general usage")
	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Dave Jiang <dave.jiang@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Ben Widawsky <ben.widawsky@intel.com>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
Link: https://lkml.kernel.org/r/161003787823.4062451.6564503265464317197.stgit@djiang5-desk3.ch.intel.com
(cherry picked from commit 6ae58d871319dc22ef780baaacd393f8543a1e74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/special_insns.h
diff --cc arch/x86/include/asm/special_insns.h
index 760aa68b5c88,4e234645f0c6..000000000000
--- a/arch/x86/include/asm/special_insns.h
+++ b/arch/x86/include/asm/special_insns.h
@@@ -258,6 -242,28 +258,31 @@@ static inline void serialize(void
  	asm volatile(".byte 0xf, 0x1, 0xe8" ::: "memory");
  }
  
++<<<<<<< HEAD
++=======
+ /* The dst parameter must be 64-bytes aligned */
+ static inline void movdir64b(void __iomem *dst, const void *src)
+ {
+ 	const struct { char _[64]; } *__src = src;
+ 	struct { char _[64]; } __iomem *__dst = dst;
+ 
+ 	/*
+ 	 * MOVDIR64B %(rdx), rax.
+ 	 *
+ 	 * Both __src and __dst must be memory constraints in order to tell the
+ 	 * compiler that no other memory accesses should be reordered around
+ 	 * this one.
+ 	 *
+ 	 * Also, both must be supplied as lvalues because this tells
+ 	 * the compiler what the object is (its size) the instruction accesses.
+ 	 * I.e., not the pointers but what they point to, thus the deref'ing '*'.
+ 	 */
+ 	asm volatile(".byte 0x66, 0x0f, 0x38, 0xf8, 0x02"
+ 		     : "+m" (*__dst)
+ 		     :  "m" (*__src), "a" (__dst), "d" (__src));
+ }
+ 
++>>>>>>> 6ae58d871319 (x86/asm: Annotate movdir64b()'s dst argument with __iomem)
  /**
   * enqcmds - Enqueue a command in supervisor (CPL0) mode
   * @dst: destination, in MMIO space (must be 512-bit aligned)
* Unmerged path arch/x86/include/asm/special_insns.h
