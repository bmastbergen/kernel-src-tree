net: ena: fix coding style nits

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Shay Agroskin <shayagr@amazon.com>
commit 1e5847395eebfc98e89558c9f5d0058b949ddc1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/1e584739.failed

This commit fixes two nits, but it does not generate any change to binary
because of the optimization of gcc.

  - use `count` instead of `channels->combined_count`
  - change return type from `int` to `bool`

Also add spaces and change macro order in OR assignment to make the code
easier to read.

	Signed-off-by: Sameeh Jubran <sameehj@amazon.com>
	Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.co.jp>
	Signed-off-by: Shay Agroskin <shayagr@amazon.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 1e5847395eebfc98e89558c9f5d0058b949ddc1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amazon/ena/ena_eth_com.c
diff --cc drivers/net/ethernet/amazon/ena/ena_eth_com.c
index 48576a99e52b,c3be751e7379..000000000000
--- a/drivers/net/ethernet/amazon/ena/ena_eth_com.c
+++ b/drivers/net/ethernet/amazon/ena/ena_eth_com.c
@@@ -555,13 -570,15 +555,14 @@@ int ena_com_rx_pkt(struct ena_com_io_c
  	/* Update SQ head ptr */
  	io_sq->next_to_comp += nb_hw_desc;
  
 -	netdev_dbg(ena_com_io_cq_to_ena_dev(io_cq)->net_device,
 -		   "[%s][QID#%d] Updating SQ head to: %d\n", __func__,
 -		   io_sq->qid, io_sq->next_to_comp);
 +	pr_debug("[%s][QID#%d] Updating SQ head to: %d\n", __func__, io_sq->qid,
 +		 io_sq->next_to_comp);
  
  	/* Get rx flags from the last pkt */
 -	ena_com_rx_set_flags(io_cq, ena_rx_ctx, cdesc);
 +	ena_com_rx_set_flags(ena_rx_ctx, cdesc);
  
  	ena_rx_ctx->descs = nb_hw_desc;
+ 
  	return 0;
  }
  
@@@ -585,9 -602,9 +586,15 @@@ int ena_com_add_single_rx_desc(struct e
  	desc->length = ena_buf->len;
  
  	desc->ctrl = ENA_ETH_IO_RX_DESC_FIRST_MASK |
++<<<<<<< HEAD
 +		ENA_ETH_IO_RX_DESC_LAST_MASK |
 +		(io_sq->phase & ENA_ETH_IO_RX_DESC_PHASE_MASK) |
 +		ENA_ETH_IO_RX_DESC_COMP_REQ_MASK;
++=======
+ 		     ENA_ETH_IO_RX_DESC_LAST_MASK |
+ 		     ENA_ETH_IO_RX_DESC_COMP_REQ_MASK |
+ 		     (io_sq->phase & ENA_ETH_IO_RX_DESC_PHASE_MASK);
++>>>>>>> 1e5847395eeb (net: ena: fix coding style nits)
  
  	desc->req_id = req_id;
  
* Unmerged path drivers/net/ethernet/amazon/ena/ena_eth_com.c
diff --git a/drivers/net/ethernet/amazon/ena/ena_ethtool.c b/drivers/net/ethernet/amazon/ena/ena_ethtool.c
index 91339c165ab4..01dd47471d1f 100644
--- a/drivers/net/ethernet/amazon/ena/ena_ethtool.c
+++ b/drivers/net/ethernet/amazon/ena/ena_ethtool.c
@@ -838,7 +838,7 @@ static int ena_set_channels(struct net_device *netdev,
 	/* The check for max value is already done in ethtool */
 	if (count < ENA_MIN_NUM_IO_QUEUES ||
 	    (ena_xdp_present(adapter) &&
-	    !ena_xdp_legal_queue_count(adapter, channels->combined_count)))
+	    !ena_xdp_legal_queue_count(adapter, count)))
 		return -EINVAL;
 
 	return ena_update_queue_count(adapter, count);
diff --git a/drivers/net/ethernet/amazon/ena/ena_netdev.h b/drivers/net/ethernet/amazon/ena/ena_netdev.h
index f43877889011..c6f5af0bee27 100644
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.h
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.h
@@ -439,8 +439,8 @@ static inline bool ena_xdp_present_ring(struct ena_ring *ring)
 	return !!ring->xdp_bpf_prog;
 }
 
-static inline int ena_xdp_legal_queue_count(struct ena_adapter *adapter,
-					    u32 queues)
+static inline bool ena_xdp_legal_queue_count(struct ena_adapter *adapter,
+					     u32 queues)
 {
 	return 2 * queues <= adapter->max_num_io_queues;
 }
