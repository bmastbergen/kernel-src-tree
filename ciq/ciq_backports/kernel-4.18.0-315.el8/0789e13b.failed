bpf: Explicitly size compatible_reg_types

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenz Bauer <lmb@cloudflare.com>
commit 0789e13bc3f84f0adafe1935af036956638950f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/0789e13b.failed

Arrays with designated initializers have an implicit length of the highest
initialized value plus one. I used this to ensure that newly added entries
in enum bpf_reg_type get a NULL entry in compatible_reg_types.

This is difficult to understand since it requires knowledge of the
peculiarities of designated initializers. Use __BPF_ARG_TYPE_MAX to size
the array instead.

	Suggested-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20200923160156.80814-1-lmb@cloudflare.com
(cherry picked from commit 0789e13bc3f84f0adafe1935af036956638950f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 41ae364d39c2,d7c993ded26a..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -3937,6 -3951,105 +3937,108 @@@ static int resolve_map_arg_type(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ struct bpf_reg_types {
+ 	const enum bpf_reg_type types[10];
+ };
+ 
+ static const struct bpf_reg_types map_key_value_types = {
+ 	.types = {
+ 		PTR_TO_STACK,
+ 		PTR_TO_PACKET,
+ 		PTR_TO_PACKET_META,
+ 		PTR_TO_MAP_VALUE,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types sock_types = {
+ 	.types = {
+ 		PTR_TO_SOCK_COMMON,
+ 		PTR_TO_SOCKET,
+ 		PTR_TO_TCP_SOCK,
+ 		PTR_TO_XDP_SOCK,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types mem_types = {
+ 	.types = {
+ 		PTR_TO_STACK,
+ 		PTR_TO_PACKET,
+ 		PTR_TO_PACKET_META,
+ 		PTR_TO_MAP_VALUE,
+ 		PTR_TO_MEM,
+ 		PTR_TO_RDONLY_BUF,
+ 		PTR_TO_RDWR_BUF,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types int_ptr_types = {
+ 	.types = {
+ 		PTR_TO_STACK,
+ 		PTR_TO_PACKET,
+ 		PTR_TO_PACKET_META,
+ 		PTR_TO_MAP_VALUE,
+ 	},
+ };
+ 
+ static const struct bpf_reg_types fullsock_types = { .types = { PTR_TO_SOCKET } };
+ static const struct bpf_reg_types scalar_types = { .types = { SCALAR_VALUE } };
+ static const struct bpf_reg_types context_types = { .types = { PTR_TO_CTX } };
+ static const struct bpf_reg_types alloc_mem_types = { .types = { PTR_TO_MEM } };
+ static const struct bpf_reg_types const_map_ptr_types = { .types = { CONST_PTR_TO_MAP } };
+ static const struct bpf_reg_types btf_ptr_types = { .types = { PTR_TO_BTF_ID } };
+ static const struct bpf_reg_types spin_lock_types = { .types = { PTR_TO_MAP_VALUE } };
+ 
+ static const struct bpf_reg_types *compatible_reg_types[__BPF_ARG_TYPE_MAX] = {
+ 	[ARG_PTR_TO_MAP_KEY]		= &map_key_value_types,
+ 	[ARG_PTR_TO_MAP_VALUE]		= &map_key_value_types,
+ 	[ARG_PTR_TO_UNINIT_MAP_VALUE]	= &map_key_value_types,
+ 	[ARG_PTR_TO_MAP_VALUE_OR_NULL]	= &map_key_value_types,
+ 	[ARG_CONST_SIZE]		= &scalar_types,
+ 	[ARG_CONST_SIZE_OR_ZERO]	= &scalar_types,
+ 	[ARG_CONST_ALLOC_SIZE_OR_ZERO]	= &scalar_types,
+ 	[ARG_CONST_MAP_PTR]		= &const_map_ptr_types,
+ 	[ARG_PTR_TO_CTX]		= &context_types,
+ 	[ARG_PTR_TO_CTX_OR_NULL]	= &context_types,
+ 	[ARG_PTR_TO_SOCK_COMMON]	= &sock_types,
+ 	[ARG_PTR_TO_SOCKET]		= &fullsock_types,
+ 	[ARG_PTR_TO_SOCKET_OR_NULL]	= &fullsock_types,
+ 	[ARG_PTR_TO_BTF_ID]		= &btf_ptr_types,
+ 	[ARG_PTR_TO_SPIN_LOCK]		= &spin_lock_types,
+ 	[ARG_PTR_TO_MEM]		= &mem_types,
+ 	[ARG_PTR_TO_MEM_OR_NULL]	= &mem_types,
+ 	[ARG_PTR_TO_UNINIT_MEM]		= &mem_types,
+ 	[ARG_PTR_TO_ALLOC_MEM]		= &alloc_mem_types,
+ 	[ARG_PTR_TO_ALLOC_MEM_OR_NULL]	= &alloc_mem_types,
+ 	[ARG_PTR_TO_INT]		= &int_ptr_types,
+ 	[ARG_PTR_TO_LONG]		= &int_ptr_types,
+ };
+ 
+ static int check_reg_type(struct bpf_verifier_env *env, u32 regno,
+ 			  const struct bpf_reg_types *compatible)
+ {
+ 	struct bpf_reg_state *regs = cur_regs(env), *reg = &regs[regno];
+ 	enum bpf_reg_type expected, type = reg->type;
+ 	int i, j;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(compatible->types); i++) {
+ 		expected = compatible->types[i];
+ 		if (expected == NOT_INIT)
+ 			break;
+ 
+ 		if (type == expected)
+ 			return 0;
+ 	}
+ 
+ 	verbose(env, "R%d type=%s expected=", regno, reg_type_str[type]);
+ 	for (j = 0; j + 1 < i; j++)
+ 		verbose(env, "%s, ", reg_type_str[compatible->types[j]]);
+ 	verbose(env, "%s\n", reg_type_str[compatible->types[j]]);
+ 	return -EACCES;
+ }
+ 
++>>>>>>> 0789e13bc3f8 (bpf: Explicitly size compatible_reg_types)
  static int check_func_arg(struct bpf_verifier_env *env, u32 arg,
  			  struct bpf_call_arg_meta *meta,
  			  const struct bpf_func_proto *fn)
* Unmerged path kernel/bpf/verifier.c
