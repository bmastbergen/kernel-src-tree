xsk: Add shared umem support between devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Magnus Karlsson <magnus.karlsson@intel.com>
commit a1132430c2c55af62d13e9fca752d46f14d548b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/a1132430.failed

Add support to share a umem between different devices. This mode
can be invoked with the XDP_SHARED_UMEM bind flag. Previously,
sharing was only supported within the same device. Note that when
sharing a umem between devices, just as in the case of sharing a
umem between queue ids, you need to create a fill ring and a
completion ring and tie them to the socket (with two setsockopts,
one for each ring) before you do the bind with the
XDP_SHARED_UMEM flag. This so that the single-producer
single-consumer semantics of the rings can be upheld.

	Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Björn Töpel <bjorn.topel@intel.com>
Link: https://lore.kernel.org/bpf/1598603189-32145-13-git-send-email-magnus.karlsson@intel.com
(cherry picked from commit a1132430c2c55af62d13e9fca752d46f14d548b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/xdp/xsk.c
diff --cc net/xdp/xsk.c
index 10c97cce9e3d,5eb6662f562a..000000000000
--- a/net/xdp/xsk.c
+++ b/net/xdp/xsk.c
@@@ -665,12 -701,38 +665,47 @@@ static int xsk_bind(struct socket *sock
  			sockfd_put(sock);
  			goto out_unlock;
  		}
++<<<<<<< HEAD
 +		if (umem_xs->dev != dev || umem_xs->queue_id != qid) {
 +			err = -EINVAL;
 +			sockfd_put(sock);
 +			goto out_unlock;
 +		}
 +
++=======
+ 
+ 		if (umem_xs->queue_id != qid || umem_xs->dev != dev) {
+ 			/* Share the umem with another socket on another qid
+ 			 * and/or device.
+ 			 */
+ 			xs->pool = xp_create_and_assign_umem(xs,
+ 							     umem_xs->umem);
+ 			if (!xs->pool) {
+ 				sockfd_put(sock);
+ 				goto out_unlock;
+ 			}
+ 
+ 			err = xp_assign_dev_shared(xs->pool, umem_xs->umem,
+ 						   dev, qid);
+ 			if (err) {
+ 				xp_destroy(xs->pool);
+ 				sockfd_put(sock);
+ 				goto out_unlock;
+ 			}
+ 		} else {
+ 			/* Share the buffer pool with the other socket. */
+ 			if (xs->fq_tmp || xs->cq_tmp) {
+ 				/* Do not allow setting your own fq or cq. */
+ 				err = -EINVAL;
+ 				sockfd_put(sock);
+ 				goto out_unlock;
+ 			}
+ 
+ 			xp_get_pool(umem_xs->pool);
+ 			xs->pool = umem_xs->pool;
+ 		}
+ 
++>>>>>>> a1132430c2c5 (xsk: Add shared umem support between devices)
  		xdp_get_umem(umem_xs->umem);
  		WRITE_ONCE(xs->umem, umem_xs->umem);
  		sockfd_put(sock);
* Unmerged path net/xdp/xsk.c
