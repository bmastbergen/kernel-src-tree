y2038: remove CONFIG_64BIT_TIME

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit 3ca47e958a64b1116a2c35e65dcf467fc53d52de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/3ca47e95.failed

The CONFIG_64BIT_TIME option is defined on all architectures, and can
be removed for simplicity now.

	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
(cherry picked from commit 3ca47e958a64b1116a2c35e65dcf467fc53d52de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/Kconfig
#	fs/aio.c
#	kernel/time/time.c
#	net/socket.c
diff --cc arch/Kconfig
index 1f63f9864075,0e1fded2940e..000000000000
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@@ -922,16 -796,8 +922,19 @@@ config OLD_SIGACTIO
  config COMPAT_OLD_SIGACTION
  	bool
  
++<<<<<<< HEAD
 +config 64BIT_TIME
 +	def_bool ARCH_HAS_64BIT_TIME
 +	help
 +	  This should be selected by all architectures that need to support
 +	  new system calls with a 64-bit time_t. This is relevant on all 32-bit
 +	  architectures, and 64-bit architectures as part of compat syscall
 +	  handling.
 +
++=======
++>>>>>>> 3ca47e958a64 (y2038: remove CONFIG_64BIT_TIME)
  config COMPAT_32BIT_TIME
 -	def_bool !64BIT || COMPAT
 +	def_bool (!64BIT && 64BIT_TIME) || COMPAT
  	help
  	  This enables 32 bit time_t support in addition to 64 bit time_t support.
  	  This is relevant on all 32-bit architectures, and 64-bit architectures
diff --cc fs/aio.c
index 2dca22123cc0,447e3a0c572c..000000000000
--- a/fs/aio.c
+++ b/fs/aio.c
@@@ -1868,6 -2056,8 +1868,11 @@@ static long do_io_getevents(aio_context
   *	specifies an infinite timeout. Note that the timeout pointed to by
   *	timeout is relative.  Will fail with -ENOSYS if not implemented.
   */
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_64BIT
+ 
++>>>>>>> 3ca47e958a64 (y2038: remove CONFIG_64BIT_TIME)
  SYSCALL_DEFINE5(io_getevents, aio_context_t, ctx_id,
  		long, min_nr,
  		long, nr,
diff --cc kernel/time/time.c
index cf5f3428433a,96b8c02657ed..000000000000
--- a/kernel/time/time.c
+++ b/kernel/time/time.c
@@@ -263,9 -267,10 +263,14 @@@ COMPAT_SYSCALL_DEFINE2(settimeofday, st
  }
  #endif
  
++<<<<<<< HEAD
 +SYSCALL_DEFINE1(adjtimex, struct timex __user *, txc_p)
++=======
+ #ifdef CONFIG_64BIT
+ SYSCALL_DEFINE1(adjtimex, struct __kernel_timex __user *, txc_p)
++>>>>>>> 3ca47e958a64 (y2038: remove CONFIG_64BIT_TIME)
  {
 -	struct __kernel_timex txc;		/* Local copy of parameter */
 +	struct timex txc;		/* Local copy of parameter */
  	int ret;
  
  	/* Copy the user data space into the kernel copy
@@@ -863,7 -881,7 +868,11 @@@ int get_timespec64(struct timespec64 *t
  	ts->tv_sec = kts.tv_sec;
  
  	/* Zero out the padding for 32 bit systems or in compat mode */
++<<<<<<< HEAD
 +	if (IS_ENABLED(CONFIG_64BIT_TIME) && (!IS_ENABLED(CONFIG_64BIT) || in_compat_syscall()))
++=======
+ 	if (in_compat_syscall())
++>>>>>>> 3ca47e958a64 (y2038: remove CONFIG_64BIT_TIME)
  		kts.tv_nsec &= 0xFFFFFFFFUL;
  
  	ts->tv_nsec = kts.tv_nsec;
diff --cc net/socket.c
index 5069b5c28927,98f6544b0096..000000000000
--- a/net/socket.c
+++ b/net/socket.c
@@@ -2896,8 -2833,15 +2896,20 @@@ SYSCALL_DEFINE2(socketcall, int, call, 
  				    a[2], true);
  		break;
  	case SYS_RECVMMSG:
++<<<<<<< HEAD
 +		err = do_sys_recvmmsg(a0, (struct mmsghdr __user *)a1, a[2],
 +				      a[3], (struct timespec __user *)a[4]);
++=======
+ 		if (IS_ENABLED(CONFIG_64BIT))
+ 			err = __sys_recvmmsg(a0, (struct mmsghdr __user *)a1,
+ 					     a[2], a[3],
+ 					     (struct __kernel_timespec __user *)a[4],
+ 					     NULL);
+ 		else
+ 			err = __sys_recvmmsg(a0, (struct mmsghdr __user *)a1,
+ 					     a[2], a[3], NULL,
+ 					     (struct old_timespec32 __user *)a[4]);
++>>>>>>> 3ca47e958a64 (y2038: remove CONFIG_64BIT_TIME)
  		break;
  	case SYS_ACCEPT4:
  		err = __sys_accept4(a0, (struct sockaddr __user *)a1,
* Unmerged path arch/Kconfig
* Unmerged path fs/aio.c
diff --git a/ipc/syscall.c b/ipc/syscall.c
index 65d405f1ba0c..e28028b6a51a 100644
--- a/ipc/syscall.c
+++ b/ipc/syscall.c
@@ -30,7 +30,7 @@ SYSCALL_DEFINE6(ipc, unsigned int, call, int, first, unsigned long, second,
 		return ksys_semtimedop(first, (struct sembuf __user *)ptr,
 				       second, NULL);
 	case SEMTIMEDOP:
-		if (IS_ENABLED(CONFIG_64BIT) || !IS_ENABLED(CONFIG_64BIT_TIME))
+		if (IS_ENABLED(CONFIG_64BIT))
 			return ksys_semtimedop(first, ptr, second,
 			        (const struct __kernel_timespec __user *)fifth);
 		else if (IS_ENABLED(CONFIG_COMPAT_32BIT_TIME))
diff --git a/kernel/time/hrtimer.c b/kernel/time/hrtimer.c
index 62e59ad72cb1..dfe81380ba0d 100644
--- a/kernel/time/hrtimer.c
+++ b/kernel/time/hrtimer.c
@@ -1959,7 +1959,7 @@ long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
 	return ret;
 }
 
-#if !defined(CONFIG_64BIT_TIME) || defined(CONFIG_64BIT)
+#ifdef CONFIG_64BIT
 
 SYSCALL_DEFINE2(nanosleep, struct __kernel_timespec __user *, rqtp,
 		struct __kernel_timespec __user *, rmtp)
* Unmerged path kernel/time/time.c
* Unmerged path net/socket.c
