bpf: Fix enum names for bpf_this_cpu_ptr() and bpf_per_cpu_ptr() helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Andrii Nakryiko <andrii@kernel.org>
commit b7906b70a2337e445b8dca3ce7ba8976b6ebd07d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/b7906b70.failed

Remove bpf_ prefix, which causes these helpers to be reported in verifier
dump as bpf_bpf_this_cpu_ptr() and bpf_bpf_per_cpu_ptr(), respectively. Lets
fix it as long as it is still possible before UAPI freezes on these helpers.

Fixes: eaa6bcb71ef6 ("bpf: Introduce bpf_per_cpu_ptr()")
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b7906b70a2337e445b8dca3ce7ba8976b6ebd07d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/bpf.h
#	kernel/bpf/helpers.c
#	kernel/trace/bpf_trace.c
#	tools/include/uapi/linux/bpf.h
diff --cc include/uapi/linux/bpf.h
index 82b8721bb07c,556216dc9703..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -3588,6 -3886,20 +3588,23 @@@ union bpf_attr 
  	FN(skc_to_tcp_request_sock),	\
  	FN(skc_to_udp6_sock),		\
  	FN(get_task_stack),		\
++<<<<<<< HEAD
++=======
+ 	FN(load_hdr_opt),		\
+ 	FN(store_hdr_opt),		\
+ 	FN(reserve_hdr_opt),		\
+ 	FN(inode_storage_get),		\
+ 	FN(inode_storage_delete),	\
+ 	FN(d_path),			\
+ 	FN(copy_from_user),		\
+ 	FN(snprintf_btf),		\
+ 	FN(seq_printf_btf),		\
+ 	FN(skb_cgroup_classid),		\
+ 	FN(redirect_neigh),		\
+ 	FN(per_cpu_ptr),		\
+ 	FN(this_cpu_ptr),		\
+ 	FN(redirect_peer),		\
++>>>>>>> b7906b70a233 (bpf: Fix enum names for bpf_this_cpu_ptr() and bpf_per_cpu_ptr() helpers)
  	/* */
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --cc kernel/bpf/helpers.c
index 558c98f4de99,deda1185237b..000000000000
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@@ -669,8 -711,16 +669,15 @@@ bpf_base_func_proto(enum bpf_func_id fu
  		if (!perfmon_capable())
  			return NULL;
  		return bpf_get_trace_printk_proto();
 -	case BPF_FUNC_snprintf_btf:
 -		if (!perfmon_capable())
 -			return NULL;
 -		return &bpf_snprintf_btf_proto;
  	case BPF_FUNC_jiffies64:
  		return &bpf_jiffies64_proto;
++<<<<<<< HEAD
++=======
+ 	case BPF_FUNC_per_cpu_ptr:
+ 		return &bpf_per_cpu_ptr_proto;
+ 	case BPF_FUNC_this_cpu_ptr:
+ 		return &bpf_this_cpu_ptr_proto;
++>>>>>>> b7906b70a233 (bpf: Fix enum names for bpf_this_cpu_ptr() and bpf_per_cpu_ptr() helpers)
  	default:
  		break;
  	}
diff --cc kernel/trace/bpf_trace.c
index fa9081cef38b,a125ea5e04cd..000000000000
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@@ -1170,6 -1333,14 +1170,17 @@@ bpf_tracing_func_proto(enum bpf_func_i
  		return &bpf_jiffies64_proto;
  	case BPF_FUNC_get_task_stack:
  		return &bpf_get_task_stack_proto;
++<<<<<<< HEAD
++=======
+ 	case BPF_FUNC_copy_from_user:
+ 		return prog->aux->sleepable ? &bpf_copy_from_user_proto : NULL;
+ 	case BPF_FUNC_snprintf_btf:
+ 		return &bpf_snprintf_btf_proto;
+ 	case BPF_FUNC_per_cpu_ptr:
+ 		return &bpf_per_cpu_ptr_proto;
+ 	case BPF_FUNC_this_cpu_ptr:
+ 		return &bpf_this_cpu_ptr_proto;
++>>>>>>> b7906b70a233 (bpf: Fix enum names for bpf_this_cpu_ptr() and bpf_per_cpu_ptr() helpers)
  	default:
  		return NULL;
  	}
diff --cc tools/include/uapi/linux/bpf.h
index bd2a7343ff30,556216dc9703..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -3568,6 -3886,20 +3568,23 @@@ union bpf_attr 
  	FN(skc_to_tcp_request_sock),	\
  	FN(skc_to_udp6_sock),		\
  	FN(get_task_stack),		\
++<<<<<<< HEAD
++=======
+ 	FN(load_hdr_opt),		\
+ 	FN(store_hdr_opt),		\
+ 	FN(reserve_hdr_opt),		\
+ 	FN(inode_storage_get),		\
+ 	FN(inode_storage_delete),	\
+ 	FN(d_path),			\
+ 	FN(copy_from_user),		\
+ 	FN(snprintf_btf),		\
+ 	FN(seq_printf_btf),		\
+ 	FN(skb_cgroup_classid),		\
+ 	FN(redirect_neigh),		\
+ 	FN(per_cpu_ptr),		\
+ 	FN(this_cpu_ptr),		\
+ 	FN(redirect_peer),		\
++>>>>>>> b7906b70a233 (bpf: Fix enum names for bpf_this_cpu_ptr() and bpf_per_cpu_ptr() helpers)
  	/* */
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path kernel/bpf/helpers.c
* Unmerged path kernel/trace/bpf_trace.c
* Unmerged path tools/include/uapi/linux/bpf.h
