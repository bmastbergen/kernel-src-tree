docs: vxlan: add info about device features

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Jakub Kicinski <kuba@kernel.org>
commit 33a1aaf82bcf41a9d23539f859c83daa385beca5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/33a1aaf8.failed

Add some information about VxLAN-related netdev features
and how to dump port table via ethtool.

	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 33a1aaf82bcf41a9d23539f859c83daa385beca5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/vxlan.txt
diff --cc Documentation/networking/vxlan.txt
index c28f4989c3f0,2759dc1cc525..000000000000
--- a/Documentation/networking/vxlan.txt
+++ b/Documentation/networking/vxlan.txt
@@@ -41,11 -47,42 +41,49 @@@ compatibility
  It is possible to create, destroy and display the vxlan
  forwarding table using the new bridge command.
  
 -1. Create forwarding table entry::
 +1. Create forwarding table entry
 +  # bridge fdb add to 00:17:42:8a:b4:05 dst 192.19.0.2 dev vxlan0
  
 -    # bridge fdb add to 00:17:42:8a:b4:05 dst 192.19.0.2 dev vxlan0
 +2. Delete forwarding table entry
 +  # bridge fdb delete 00:17:42:8a:b4:05 dev vxlan0
  
++<<<<<<< HEAD:Documentation/networking/vxlan.txt
 +3. Show forwarding table
 +  # bridge fdb show dev vxlan0
++=======
+ 2. Delete forwarding table entry::
+ 
+     # bridge fdb delete 00:17:42:8a:b4:05 dev vxlan0
+ 
+ 3. Show forwarding table::
+ 
+     # bridge fdb show dev vxlan0
+ 
+ The following NIC features may indicate support for UDP tunnel-related
+ offloads (most commonly VXLAN features, but support for a particular
+ encapsulation protocol is NIC specific):
+ 
+  - `tx-udp_tnl-segmentation`
+  - `tx-udp_tnl-csum-segmentation`
+     ability to perform TCP segmentation offload of UDP encapsulated frames
+ 
+  - `rx-udp_tunnel-port-offload`
+     receive side parsing of UDP encapsulated frames which allows NICs to
+     perform protocol-aware offloads, like checksum validation offload of
+     inner frames (only needed by NICs without protocol-agnostic offloads)
+ 
+ For devices supporting `rx-udp_tunnel-port-offload` the list of currently
+ offloaded ports can be interrogated with `ethtool`::
+ 
+   $ ethtool --show-tunnels eth0
+   Tunnel information for eth0:
+     UDP port table 0:
+       Size: 4
+       Types: vxlan
+       No entries
+     UDP port table 1:
+       Size: 4
+       Types: geneve, vxlan-gpe
+       Entries (1):
+           port 1230, vxlan-gpe
++>>>>>>> 33a1aaf82bcf (docs: vxlan: add info about device features):Documentation/networking/vxlan.rst
* Unmerged path Documentation/networking/vxlan.txt
