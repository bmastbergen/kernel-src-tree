net: sched: alias action flags with TCA_ACT_ prefix

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Vlad Buslov <vlad@buslov.dev>
commit f460019b4c9e0389b932e1ca2c01b598c7ae769e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/f460019b.failed

Currently both filter and action flags use same "TCA_" prefix which makes
them hard to distinguish to code and confusing for users. Create aliases
for existing action flags constants with "TCA_ACT_" prefix.

	Signed-off-by: Vlad Buslov <vlad@buslov.dev>
Link: https://lore.kernel.org/r/20201124164054.893168-1-vlad@buslov.dev
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit f460019b4c9e0389b932e1ca2c01b598c7ae769e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/rtnetlink.h
#	net/sched/act_api.c
diff --cc include/uapi/linux/rtnetlink.h
index d4d126e933a7,b841caa4657e..000000000000
--- a/include/uapi/linux/rtnetlink.h
+++ b/include/uapi/linux/rtnetlink.h
@@@ -749,12 -768,18 +749,23 @@@ enum 
  #define TA_PAYLOAD(n) NLMSG_PAYLOAD(n,sizeof(struct tcamsg))
  /* tcamsg flags stored in attribute TCA_ROOT_FLAGS
   *
-  * TCA_FLAG_LARGE_DUMP_ON user->kernel to request for larger than TCA_ACT_MAX_PRIO
-  * actions in a dump. All dump responses will contain the number of actions
-  * being dumped stored in for user app's consumption in TCA_ROOT_COUNT
+  * TCA_ACT_FLAG_LARGE_DUMP_ON user->kernel to request for larger than
+  * TCA_ACT_MAX_PRIO actions in a dump. All dump responses will contain the
+  * number of actions being dumped stored in for user app's consumption in
+  * TCA_ROOT_COUNT
   *
++<<<<<<< HEAD
 + */
 +#define TCA_FLAG_LARGE_DUMP_ON		(1 << 0)
++=======
+  * TCA_ACT_FLAG_TERSE_DUMP user->kernel to request terse (brief) dump that only
+  * includes essential action info (kind, index, etc.)
+  *
+  */
+ #define TCA_FLAG_LARGE_DUMP_ON		(1 << 0)
+ #define TCA_ACT_FLAG_LARGE_DUMP_ON	TCA_FLAG_LARGE_DUMP_ON
+ #define TCA_ACT_FLAG_TERSE_DUMP		(1 << 1)
++>>>>>>> f460019b4c9e (net: sched: alias action flags with TCA_ACT_ prefix)
  
  /* New extended info filters for IFLA_EXT_MASK */
  #define RTEXT_FILTER_VF		(1 << 0)
diff --cc net/sched/act_api.c
index 6d0d3345677e,99db1c77426b..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -270,7 -278,9 +270,13 @@@ static int tcf_dump_walker(struct tcf_i
  			index--;
  			goto nla_put_failure;
  		}
++<<<<<<< HEAD
 +		err = tcf_action_dump_1(skb, p, 0, 0);
++=======
+ 		err = (act_flags & TCA_ACT_FLAG_TERSE_DUMP) ?
+ 			tcf_action_dump_terse(skb, p, true) :
+ 			tcf_action_dump_1(skb, p, 0, 0);
++>>>>>>> f460019b4c9e (net: sched: alias action flags with TCA_ACT_ prefix)
  		if (err < 0) {
  			index--;
  			nlmsg_trim(skb, nest);
@@@ -1493,9 -1472,9 +1499,14 @@@ static int tcf_action_add(struct net *n
  	return ret;
  }
  
 +static u32 tcaa_root_flags_allowed = TCA_FLAG_LARGE_DUMP_ON;
  static const struct nla_policy tcaa_policy[TCA_ROOT_MAX + 1] = {
++<<<<<<< HEAD
 +	[TCA_ROOT_FLAGS] = NLA_POLICY_BITFIELD32_PTR(&tcaa_root_flags_allowed),
++=======
+ 	[TCA_ROOT_FLAGS] = NLA_POLICY_BITFIELD32(TCA_ACT_FLAG_LARGE_DUMP_ON |
+ 						 TCA_ACT_FLAG_TERSE_DUMP),
++>>>>>>> f460019b4c9e (net: sched: alias action flags with TCA_ACT_ prefix)
  	[TCA_ROOT_TIME_DELTA]      = { .type = NLA_U32 },
  };
  
* Unmerged path include/uapi/linux/rtnetlink.h
* Unmerged path net/sched/act_api.c
