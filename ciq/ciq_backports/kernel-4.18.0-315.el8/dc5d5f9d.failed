mt76: mt7921: enable sw interrupts

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit dc5d5f9d3fe4d0c26b4e4beb25d056ffcc5fbf02
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/dc5d5f9d.failed

Enable sw interrupts in order to wake the device from deep sleep
receiving packets

	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit dc5d5f9d3fe4d0c26b4e4beb25d056ffcc5fbf02)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt7921/mac.c
diff --cc drivers/net/wireless/mediatek/mt76/mt7921/mac.c
index bcbd59a23f9b,8770e0d93f45..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7921/mac.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/mac.c
@@@ -1178,29 -1215,68 +1178,40 @@@ mt7921_wait_reset_state(struct mt7921_d
  }
  
  static void
 -mt7921_dma_reset(struct mt7921_dev *dev)
 +mt7921_dma_reset(struct mt7921_phy *phy)
  {
 +	struct mt7921_dev *dev = phy->dev;
  	int i;
  
 -	/* reset */
 -	mt76_clear(dev, MT_WFDMA0_RST,
 -		   MT_WFDMA0_RST_DMASHDL_ALL_RST | MT_WFDMA0_RST_LOGIC_RST);
 -
 -	mt76_set(dev, MT_WFDMA0_RST,
 -		 MT_WFDMA0_RST_DMASHDL_ALL_RST | MT_WFDMA0_RST_LOGIC_RST);
 -
 -	/* disable WFDMA0 */
  	mt76_clear(dev, MT_WFDMA0_GLO_CFG,
 -		   MT_WFDMA0_GLO_CFG_TX_DMA_EN | MT_WFDMA0_GLO_CFG_RX_DMA_EN |
 -		   MT_WFDMA0_GLO_CFG_CSR_DISP_BASE_PTR_CHAIN_EN |
 -		   MT_WFDMA0_GLO_CFG_OMIT_TX_INFO |
 -		   MT_WFDMA0_GLO_CFG_OMIT_RX_INFO |
 -		   MT_WFDMA0_GLO_CFG_OMIT_RX_INFO_PFET2);
 +		   MT_WFDMA0_GLO_CFG_TX_DMA_EN | MT_WFDMA0_GLO_CFG_RX_DMA_EN);
  
 -	mt76_poll(dev, MT_WFDMA0_GLO_CFG,
 -		  MT_WFDMA0_GLO_CFG_TX_DMA_BUSY |
 -		  MT_WFDMA0_GLO_CFG_RX_DMA_BUSY, 0, 1000);
 +	usleep_range(1000, 2000);
  
 -	/* reset hw queues */
 +	mt76_queue_tx_cleanup(dev, dev->mt76.q_mcu[MT_MCUQ_WA], true);
  	for (i = 0; i < __MT_TXQ_MAX; i++)
 -		mt76_queue_reset(dev, dev->mphy.q_tx[i]);
 -
 -	for (i = 0; i < __MT_MCUQ_MAX; i++)
 -		mt76_queue_reset(dev, dev->mt76.q_mcu[i]);
 +		mt76_queue_tx_cleanup(dev, phy->mt76->q_tx[i], true);
  
 -	mt76_for_each_q_rx(&dev->mt76, i)
 -		mt76_queue_reset(dev, &dev->mt76.q_rx[i]);
 -
 -	mt76_tx_status_check(&dev->mt76, NULL, true);
 +	mt76_for_each_q_rx(&dev->mt76, i) {
 +		mt76_queue_rx_reset(dev, i);
 +	}
  
 -	/* configure perfetch settings */
 +	/* re-init prefetch settings after reset */
  	mt7921_dma_prefetch(dev);
  
 -	/* reset dma idx */
 -	mt76_wr(dev, MT_WFDMA0_RST_DTX_PTR, ~0);
 -
 -	/* configure delay interrupt */
 -	mt76_wr(dev, MT_WFDMA0_PRI_DLY_INT_CFG0, 0);
 -
 -	mt76_set(dev, MT_WFDMA0_GLO_CFG,
 -		 MT_WFDMA0_GLO_CFG_TX_WB_DDONE |
 -		 MT_WFDMA0_GLO_CFG_FIFO_LITTLE_ENDIAN |
 -		 MT_WFDMA0_GLO_CFG_CLK_GAT_DIS |
 -		 MT_WFDMA0_GLO_CFG_OMIT_TX_INFO |
 -		 MT_WFDMA0_GLO_CFG_CSR_DISP_BASE_PTR_CHAIN_EN |
 -		 MT_WFDMA0_GLO_CFG_OMIT_RX_INFO_PFET2);
 -
  	mt76_set(dev, MT_WFDMA0_GLO_CFG,
  		 MT_WFDMA0_GLO_CFG_TX_DMA_EN | MT_WFDMA0_GLO_CFG_RX_DMA_EN);
++<<<<<<< HEAD
++=======
+ 
+ 	mt76_set(dev, MT_WFDMA_DUMMY_CR, MT_WFDMA_NEED_REINIT);
+ 
+ 	/* enable interrupts for TX/RX rings */
+ 	mt7921_irq_enable(dev,
+ 			  MT_INT_RX_DONE_ALL | MT_INT_TX_DONE_ALL |
+ 			  MT_INT_MCU_CMD);
+ 	mt76_set(dev, MT_MCU2HOST_SW_INT_ENA, MT_MCU_CMD_WAKE_RX_PCIE);
++>>>>>>> dc5d5f9d3fe4 (mt76: mt7921: enable sw interrupts)
  }
  
  void mt7921_tx_token_put(struct mt7921_dev *dev)
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/dma.c b/drivers/net/wireless/mediatek/mt76/mt7921/dma.c
index cd9665610284..87557e077509 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/dma.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/dma.c
@@ -328,6 +328,7 @@ int mt7921_dma_init(struct mt7921_dev *dev)
 	/* enable interrupts for TX/RX rings */
 	mt7921_irq_enable(dev, MT_INT_RX_DONE_ALL | MT_INT_TX_DONE_ALL |
 			  MT_INT_MCU_CMD);
+	mt76_set(dev, MT_MCU2HOST_SW_INT_ENA, MT_MCU_CMD_WAKE_RX_PCIE);
 
 	return 0;
 }
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7921/mac.c
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/pci.c b/drivers/net/wireless/mediatek/mt76/mt7921/pci.c
index 67d7e863d855..f44570c727e4 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/pci.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/pci.c
@@ -60,6 +60,18 @@ static void mt7921_irq_tasklet(unsigned long data)
 	if (intr & MT_INT_TX_DONE_MCU)
 		mask |= MT_INT_TX_DONE_MCU;
 
+	if (intr & MT_INT_MCU_CMD) {
+		u32 intr_sw;
+
+		intr_sw = mt76_rr(dev, MT_MCU_CMD);
+		/* ack MCU2HOST_SW_INT_STA */
+		mt76_wr(dev, MT_MCU_CMD, intr_sw);
+		if (intr_sw & MT_MCU_CMD_WAKE_RX_PCIE) {
+			mask |= MT_INT_RX_DONE_DATA;
+			intr |= MT_INT_RX_DONE_DATA;
+		}
+	}
+
 	mt76_set_irq_mask(&dev->mt76, MT_WFDMA0_HOST_INT_ENA, mask, 0);
 
 	if (intr & MT_INT_TX_DONE_ALL)
@@ -240,6 +252,7 @@ static int mt7921_pci_resume(struct pci_dev *pdev)
 	mt76_wr(dev, MT_PCIE_MAC_INT_ENABLE, 0xff);
 	mt7921_irq_enable(dev, MT_INT_RX_DONE_ALL | MT_INT_TX_DONE_ALL |
 			  MT_INT_MCU_CMD);
+	mt76_set(dev, MT_MCU2HOST_SW_INT_ENA, MT_MCU_CMD_WAKE_RX_PCIE);
 
 	/* put dma enabled */
 	mt76_set(dev, MT_WFDMA0_GLO_CFG,
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/regs.h b/drivers/net/wireless/mediatek/mt76/mt7921/regs.h
index 28451c7d9573..78e14f9f682b 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/regs.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/regs.h
@@ -251,13 +251,16 @@
 #define MT_WFDMA0_BUSY_ENA_TX_FIFO1	BIT(1)
 #define MT_WFDMA0_BUSY_ENA_RX_FIFO	BIT(2)
 
-#define MT_MCU_CMD                     MT_WFDMA0(0x1f0)
-#define MT_MCU_CMD_STOP_DMA_FW_RELOAD  BIT(1)
-#define MT_MCU_CMD_STOP_DMA            BIT(2)
-#define MT_MCU_CMD_RESET_DONE          BIT(3)
-#define MT_MCU_CMD_RECOVERY_DONE       BIT(4)
-#define MT_MCU_CMD_NORMAL_STATE	       BIT(5)
-#define MT_MCU_CMD_ERROR_MASK          GENMASK(5, 1)
+#define MT_MCU_CMD			MT_WFDMA0(0x1f0)
+#define MT_MCU_CMD_WAKE_RX_PCIE		BIT(0)
+#define MT_MCU_CMD_STOP_DMA_FW_RELOAD	BIT(1)
+#define MT_MCU_CMD_STOP_DMA		BIT(2)
+#define MT_MCU_CMD_RESET_DONE		BIT(3)
+#define MT_MCU_CMD_RECOVERY_DONE	BIT(4)
+#define MT_MCU_CMD_NORMAL_STATE		BIT(5)
+#define MT_MCU_CMD_ERROR_MASK		GENMASK(5, 1)
+
+#define MT_MCU2HOST_SW_INT_ENA		MT_WFDMA0(0x1f4)
 
 #define MT_WFDMA0_HOST_INT_STA		MT_WFDMA0(0x200)
 #define HOST_RX_DONE_INT_STS0		BIT(0)	/* Rx mcu */
