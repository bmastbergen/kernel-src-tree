bpf: Make BTF pointer type checking generic

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenz Bauer <lmb@cloudflare.com>
commit d7b9454a4f6333bf145189b8e769011d15bdd50e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/d7b9454a.failed

Perform BTF type checks if the register we're working on contains a BTF
pointer, rather than if the argument is for a BTF pointer. This is easier
to understand, and allows removing the code from the arg_type checking
section of the function.

	Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20200921121227.255763-6-lmb@cloudflare.com
(cherry picked from commit d7b9454a4f6333bf145189b8e769011d15bdd50e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 7d8814dc0070,a0e919232968..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -4037,33 -4048,9 +4037,39 @@@ static int check_func_arg(struct bpf_ve
  				goto err_type;
  		}
  	} else if (arg_type == ARG_PTR_TO_BTF_ID) {
++<<<<<<< HEAD
 +		bool ids_match = false;
 +
  		expected_type = PTR_TO_BTF_ID;
  		if (type != expected_type)
  			goto err_type;
 +		if (!fn->check_btf_id) {
 +			if (reg->btf_id != meta->btf_id) {
 +				ids_match = btf_struct_ids_match(&env->log, reg->off, reg->btf_id,
 +								 meta->btf_id);
 +				if (!ids_match) {
 +					verbose(env, "Helper has type %s got %s in R%d\n",
 +						kernel_type_name(meta->btf_id),
 +						kernel_type_name(reg->btf_id), regno);
 +					return -EACCES;
 +				}
 +			}
 +		} else if (!fn->check_btf_id(reg->btf_id, arg)) {
 +			verbose(env, "Helper does not support %s in R%d\n",
 +				kernel_type_name(reg->btf_id), regno);
 +
 +			return -EACCES;
 +		}
 +		if ((reg->off && !ids_match) || !tnum_is_const(reg->var_off) || reg->var_off.value) {
 +			verbose(env, "R%d is a pointer to in-kernel struct with non-zero offset\n",
 +				regno);
 +			return -EACCES;
 +		}
++=======
++		expected_type = PTR_TO_BTF_ID;
++		if (type != expected_type)
++			goto err_type;
++>>>>>>> d7b9454a4f63 (bpf: Make BTF pointer type checking generic)
  	} else if (arg_type == ARG_PTR_TO_SPIN_LOCK) {
  		if (meta->func_id == BPF_FUNC_spin_lock) {
  			if (process_spin_lock(env, regno, true))
* Unmerged path kernel/bpf/verifier.c
