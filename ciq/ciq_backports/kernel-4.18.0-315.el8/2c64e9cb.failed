lib: Move mathematic helpers to separate folder

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 2c64e9cb0b6b858901e9a386860d7d929d1cbaeb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/2c64e9cb.failed

For better maintenance and expansion move the mathematic helpers to the
separate folder.

No functional change intended.

Note, the int_sqrt() is not used as a part of lib, so, moved to regular
obj.

Link: http://lkml.kernel.org/r/20190323172531.80025-1-andriy.shevchenko@linux.intel.com
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: Thierry Reding <thierry.reding@gmail.com>
	Cc: Lee Jones <lee.jones@linaro.org>
	Cc: Daniel Thompson <daniel.thompson@linaro.org>
	Cc: Ray Jui <rjui@broadcom.com>
[mchehab+samsung@kernel.org: fix broken doc references for div64.c and gcd.c]
  Link: http://lkml.kernel.org/r/734f49bae5d4052b3c25691dfefad59bea2e5843.1555580999.git.mchehab+samsung@kernel.org
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2c64e9cb0b6b858901e9a386860d7d929d1cbaeb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Kconfig
#	lib/Makefile
diff --cc lib/Kconfig
index 257c2297d46e,3577609b61be..000000000000
--- a/lib/Kconfig
+++ b/lib/Kconfig
@@@ -630,16 -621,6 +623,19 @@@ config SBITMA
  config PARMAN
  	tristate "parman" if COMPILE_TEST
  
++<<<<<<< HEAD
 +config PRIME_NUMBERS
 +	tristate
 +
 +config PLDMFW
 +	bool
 +	default n
 +
 +config OBJAGG
 +	tristate "objagg" if COMPILE_TEST
 +
++=======
++>>>>>>> 2c64e9cb0b6b (lib: Move mathematic helpers to separate folder)
  config STRING_SELFTEST
  	tristate "Test string functions"
  
diff --cc lib/Makefile
index 5cd3255b0bc3,fb7697031a79..000000000000
--- a/lib/Makefile
+++ b/lib/Makefile
@@@ -28,13 -28,10 +28,18 @@@ endi
  CFLAGS_string.o := $(call cc-option, -fno-stack-protector)
  endif
  
 +# Used by KCSAN while enabled, avoid recursion.
 +KCSAN_SANITIZE_random32.o := n
 +
  lib-y := ctype.o string.o vsprintf.o cmdline.o \
  	 rbtree.o radix-tree.o timerqueue.o xarray.o \
++<<<<<<< HEAD
 +	 idr.o int_sqrt.o extable.o \
 +	 sha1.o chacha20.o irq_regs.o argv_split.o \
++=======
+ 	 idr.o extable.o \
+ 	 sha1.o chacha.o irq_regs.o argv_split.o \
++>>>>>>> 2c64e9cb0b6b (lib: Move mathematic helpers to separate folder)
  	 flex_proportions.o ratelimit.o show_mem.o \
  	 is_single_threaded.o plist.o decompress.o kobject_uevent.o \
  	 earlycpio.o seq_buf.o siphash.o dec_and_lock.o \
@@@ -47,12 -44,13 +52,20 @@@ lib-$(CONFIG_SMP) += cpumask.
  lib-y	+= kobject.o klist.o
  obj-y	+= lockref.o
  
- obj-y += bcd.o div64.o sort.o parser.o debug_locks.o random32.o \
+ obj-y += bcd.o sort.o parser.o debug_locks.o random32.o \
  	 bust_spinlocks.o kasprintf.o bitmap.o scatterlist.o \
++<<<<<<< HEAD
 +	 gcd.o lcm.o list_sort.o uuid.o flex_array.o iov_iter.o clz_ctz.o \
 +	 bsearch.o find_bit.o llist.o memweight.o kfifo.o \
 +	 percpu-refcount.o rhashtable.o reciprocal_div.o \
 +	 once.o refcount.o usercopy.o errseq.o bucket_locks.o
++=======
+ 	 list_sort.o uuid.o iov_iter.o clz_ctz.o \
+ 	 bsearch.o find_bit.o llist.o memweight.o kfifo.o \
+ 	 percpu-refcount.o rhashtable.o \
+ 	 once.o refcount.o usercopy.o errseq.o bucket_locks.o \
+ 	 generic-radix-tree.o
++>>>>>>> 2c64e9cb0b6b (lib: Move mathematic helpers to separate folder)
  obj-$(CONFIG_STRING_SELFTEST) += test_string.o
  obj-y += string_helpers.o
  obj-$(CONFIG_TEST_STRING_HELPERS) += test-string_helpers.o
@@@ -100,7 -102,7 +113,11 @@@ endi
  obj-$(CONFIG_DEBUG_INFO_REDUCED) += debug_info.o
  CFLAGS_debug_info.o += $(call cc-option, -femit-struct-debug-detailed=any)
  
++<<<<<<< HEAD
 +obj-y += crypto/
++=======
+ obj-y += math/
++>>>>>>> 2c64e9cb0b6b (lib: Move mathematic helpers to separate folder)
  
  obj-$(CONFIG_GENERIC_IOMAP) += iomap.o
  obj-$(CONFIG_GENERIC_PCI_IOMAP) += pci_iomap.o
@@@ -120,7 -122,7 +137,11 @@@ obj-$(CONFIG_DEBUG_LIST) += list_debug.
  obj-$(CONFIG_DEBUG_OBJECTS) += debugobjects.o
  
  obj-$(CONFIG_BITREVERSE) += bitrev.o
++<<<<<<< HEAD
 +obj-$(CONFIG_RATIONAL)	+= rational.o
++=======
+ obj-$(CONFIG_PACKING)	+= packing.o
++>>>>>>> 2c64e9cb0b6b (lib: Move mathematic helpers to separate folder)
  obj-$(CONFIG_CRC_CCITT)	+= crc-ccitt.o
  obj-$(CONFIG_CRC16)	+= crc16.o
  obj-$(CONFIG_CRC_T10DIF)+= crc-t10dif.o
@@@ -240,10 -237,10 +259,8 @@@ obj-$(CONFIG_ASN1) += asn1_decoder.
  
  obj-$(CONFIG_FONT_SUPPORT) += fonts/
  
- obj-$(CONFIG_PRIME_NUMBERS) += prime_numbers.o
- 
  hostprogs-y	:= gen_crc32table
 -hostprogs-y	+= gen_crc64table
  clean-files	:= crc32table.h
 -clean-files	+= crc64table.h
  
  $(obj)/crc32.o: $(obj)/crc32table.h
  
diff --git a/Documentation/core-api/kernel-api.rst b/Documentation/core-api/kernel-api.rst
index 76fe2d0f5e7d..78bc3d5130a9 100644
--- a/Documentation/core-api/kernel-api.rst
+++ b/Documentation/core-api/kernel-api.rst
@@ -143,10 +143,10 @@ Division Functions
 .. kernel-doc:: include/linux/math64.h
    :internal:
 
-.. kernel-doc:: lib/div64.c
+.. kernel-doc:: lib/math/div64.c
    :functions: div_s64_rem div64_u64_rem div64_u64 div64_s64
 
-.. kernel-doc:: lib/gcd.c
+.. kernel-doc:: lib/math/gcd.c
    :export:
 
 UUID/GUID
* Unmerged path lib/Kconfig
* Unmerged path lib/Makefile
diff --git a/lib/math/Kconfig b/lib/math/Kconfig
new file mode 100644
index 000000000000..73bdf37178d1
--- /dev/null
+++ b/lib/math/Kconfig
@@ -0,0 +1,11 @@
+config CORDIC
+	tristate "CORDIC algorithm"
+	help
+	  This option provides an implementation of the CORDIC algorithm;
+	  calculations are in fixed point. Module will be called cordic.
+
+config PRIME_NUMBERS
+	tristate
+
+config RATIONAL
+	bool
diff --git a/lib/math/Makefile b/lib/math/Makefile
new file mode 100644
index 000000000000..b75878420da6
--- /dev/null
+++ b/lib/math/Makefile
@@ -0,0 +1,5 @@
+obj-y += div64.o gcd.o lcm.o int_sqrt.o reciprocal_div.o
+
+obj-$(CONFIG_CORDIC)		+= cordic.o
+obj-$(CONFIG_PRIME_NUMBERS)	+= prime_numbers.o
+obj-$(CONFIG_RATIONAL)		+= rational.o
diff --git a/lib/cordic.c b/lib/math/cordic.c
similarity index 100%
rename from lib/cordic.c
rename to lib/math/cordic.c
diff --git a/lib/div64.c b/lib/math/div64.c
similarity index 99%
rename from lib/div64.c
rename to lib/math/div64.c
index 262cc688066b..9bcf35b56db6 100644
--- a/lib/div64.c
+++ b/lib/math/div64.c
@@ -10,7 +10,7 @@
  * Generic C version of 64bit/32bit division and modulo, with
  * 64bit result and 32bit remainder.
  *
- * The fast case for (n>>32 == 0) is handled inline by do_div(). 
+ * The fast case for (n>>32 == 0) is handled inline by do_div().
  *
  * Code generated for this function might be very inefficient
  * for some CPUs. __div64_32() can be overridden by linking arch-specific
diff --git a/lib/gcd.c b/lib/math/gcd.c
similarity index 100%
rename from lib/gcd.c
rename to lib/math/gcd.c
diff --git a/lib/int_sqrt.c b/lib/math/int_sqrt.c
similarity index 100%
rename from lib/int_sqrt.c
rename to lib/math/int_sqrt.c
diff --git a/lib/lcm.c b/lib/math/lcm.c
similarity index 100%
rename from lib/lcm.c
rename to lib/math/lcm.c
diff --git a/lib/prime_numbers.c b/lib/math/prime_numbers.c
similarity index 100%
rename from lib/prime_numbers.c
rename to lib/math/prime_numbers.c
diff --git a/lib/rational.c b/lib/math/rational.c
similarity index 100%
rename from lib/rational.c
rename to lib/math/rational.c
diff --git a/lib/reciprocal_div.c b/lib/math/reciprocal_div.c
similarity index 100%
rename from lib/reciprocal_div.c
rename to lib/math/reciprocal_div.c
