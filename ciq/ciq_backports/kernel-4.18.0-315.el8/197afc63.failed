libbpf: Don't attempt to load unused subprog as an entry-point BPF program

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Andrii Nakryiko <andrii@kernel.org>
commit 197afc631413d96dc60acfc7970bdd4125d38cd3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/197afc63.failed

If BPF code contains unused BPF subprogram and there are no other subprogram
calls (which can realistically happen in real-world applications given
sufficiently smart Clang code optimizations), libbpf will erroneously assume
that subprograms are entry-point programs and will attempt to load them with
UNSPEC program type.

Fix by not relying on subcall instructions and rather detect it based on the
structure of BPF object's sections.

Fixes: 9a94f277c4fb ("tools: libbpf: restore the ability to load programs from .text section")
	Reported-by: Dmitrii Banshchikov <dbanschikov@fb.com>
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20201107000251.256821-1-andrii@kernel.org
(cherry picked from commit 197afc631413d96dc60acfc7970bdd4125d38cd3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index d0012191b50c,28baee7ba1ca..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -502,15 -545,24 +502,21 @@@ static char *__bpf_program__pin_name(st
  	return name;
  }
  
 -static bool insn_is_subprog_call(const struct bpf_insn *insn)
 -{
 -	return BPF_CLASS(insn->code) == BPF_JMP &&
 -	       BPF_OP(insn->code) == BPF_CALL &&
 -	       BPF_SRC(insn->code) == BPF_K &&
 -	       insn->src_reg == BPF_PSEUDO_CALL &&
 -	       insn->dst_reg == 0 &&
 -	       insn->off == 0;
 -}
 -
  static int
 -bpf_object__init_prog(struct bpf_object *obj, struct bpf_program *prog,
 -		      const char *name, size_t sec_idx, const char *sec_name,
 -		      size_t sec_off, void *insn_data, size_t insn_data_sz)
 +bpf_program__init(void *data, size_t size, char *section_name, int idx,
 +		  struct bpf_program *prog)
  {
++<<<<<<< HEAD
 +	const size_t bpf_insn_sz = sizeof(struct bpf_insn);
 +
 +	if (size == 0 || size % bpf_insn_sz) {
 +		pr_warn("corrupted section '%s', size: %zu\n",
 +			section_name, size);
++=======
+ 	if (insn_data_sz == 0 || insn_data_sz % BPF_INSN_SZ || sec_off % BPF_INSN_SZ) {
+ 		pr_warn("sec '%s': corrupted program '%s', offset %zu, size %zu\n",
+ 			sec_name, name, sec_off, insn_data_sz);
++>>>>>>> 197afc631413 (libbpf: Don't attempt to load unused subprog as an entry-point BPF program)
  		return -EINVAL;
  	}
  
@@@ -544,8 -578,29 +550,31 @@@
  	prog->type = BPF_PROG_TYPE_UNSPEC;
  	prog->load = true;
  
++<<<<<<< HEAD
++=======
+ 	prog->instances.fds = NULL;
+ 	prog->instances.nr = -1;
+ 
+ 	prog->sec_name = strdup(sec_name);
+ 	if (!prog->sec_name)
+ 		goto errout;
+ 
+ 	prog->name = strdup(name);
+ 	if (!prog->name)
+ 		goto errout;
+ 
+ 	prog->pin_name = __bpf_program__pin_name(prog);
+ 	if (!prog->pin_name)
+ 		goto errout;
+ 
+ 	prog->insns = malloc(insn_data_sz);
+ 	if (!prog->insns)
+ 		goto errout;
+ 	memcpy(prog->insns, insn_data, insn_data_sz);
+ 
++>>>>>>> 197afc631413 (libbpf: Don't attempt to load unused subprog as an entry-point BPF program)
  	return 0;
  errout:
 -	pr_warn("sec '%s': failed to allocate memory for prog '%s'\n", sec_name, name);
  	bpf_program__exit(prog);
  	return -ENOMEM;
  }
@@@ -3101,6 -3268,24 +3130,27 @@@ bpf_object__find_program_by_title(cons
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static bool prog_is_subprog(const struct bpf_object *obj,
+ 			    const struct bpf_program *prog)
+ {
+ 	/* For legacy reasons, libbpf supports an entry-point BPF programs
+ 	 * without SEC() attribute, i.e., those in the .text section. But if
+ 	 * there are 2 or more such programs in the .text section, they all
+ 	 * must be subprograms called from entry-point BPF programs in
+ 	 * designated SEC()'tions, otherwise there is no way to distinguish
+ 	 * which of those programs should be loaded vs which are a subprogram.
+ 	 * Similarly, if there is a function/program in .text and at least one
+ 	 * other BPF program with custom SEC() attribute, then we just assume
+ 	 * .text programs are subprograms (even if they are not called from
+ 	 * other programs), because libbpf never explicitly supported mixing
+ 	 * SEC()-designated BPF programs and .text entry-point BPF programs.
+ 	 */
+ 	return prog->sec_idx == obj->efile.text_shndx && obj->nr_programs > 1;
+ }
+ 
++>>>>>>> 197afc631413 (libbpf: Don't attempt to load unused subprog as an entry-point BPF program)
  struct bpf_program *
  bpf_object__find_program_by_name(const struct bpf_object *obj,
  				 const char *name)
* Unmerged path tools/lib/bpf/libbpf.c
diff --git a/tools/testing/selftests/bpf/prog_tests/subprogs.c b/tools/testing/selftests/bpf/prog_tests/subprogs.c
index a00abf58c037..3f3d2ac4dd57 100644
--- a/tools/testing/selftests/bpf/prog_tests/subprogs.c
+++ b/tools/testing/selftests/bpf/prog_tests/subprogs.c
@@ -3,12 +3,14 @@
 #include <test_progs.h>
 #include <time.h>
 #include "test_subprogs.skel.h"
+#include "test_subprogs_unused.skel.h"
 
 static int duration;
 
 void test_subprogs(void)
 {
 	struct test_subprogs *skel;
+	struct test_subprogs_unused *skel2;
 	int err;
 
 	skel = test_subprogs__open_and_load();
@@ -26,6 +28,10 @@ void test_subprogs(void)
 	CHECK(skel->bss->res3 != 19, "res3", "got %d, exp %d\n", skel->bss->res3, 19);
 	CHECK(skel->bss->res4 != 36, "res4", "got %d, exp %d\n", skel->bss->res4, 36);
 
+	skel2 = test_subprogs_unused__open_and_load();
+	ASSERT_OK_PTR(skel2, "unused_progs_skel");
+	test_subprogs_unused__destroy(skel2);
+
 cleanup:
 	test_subprogs__destroy(skel);
 }
diff --git a/tools/testing/selftests/bpf/progs/test_subprogs_unused.c b/tools/testing/selftests/bpf/progs/test_subprogs_unused.c
new file mode 100644
index 000000000000..75d975f8cf90
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/test_subprogs_unused.c
@@ -0,0 +1,21 @@
+#include "vmlinux.h"
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_core_read.h>
+
+const char LICENSE[] SEC("license") = "GPL";
+
+__attribute__((maybe_unused)) __noinline int unused1(int x)
+{
+	return x + 1;
+}
+
+static __attribute__((maybe_unused)) __noinline int unused2(int x)
+{
+	return x + 2;
+}
+
+SEC("raw_tp/sys_enter")
+int main_prog(void *ctx)
+{
+	return 0;
+}
