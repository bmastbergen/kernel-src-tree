mt76: mt7921: introduce __mt7921_start utility routine

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 1f7396acfef4691b8cf4a3e631fd3f59d779c0f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/1f7396ac.failed

This is a preliminary patch to introduce mt7921 chip reset support.

Co-developed-by: Sean Wang <sean.wang@mediatek.com>
	Signed-off-by: Sean Wang <sean.wang@mediatek.com>
	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 1f7396acfef4691b8cf4a3e631fd3f59d779c0f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt7921/main.c
diff --cc drivers/net/wireless/mediatek/mt76/mt7921/main.c
index 8d5583df8b4e,2b9fa4bbb21d..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7921/main.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/main.c
@@@ -169,25 -169,42 +169,57 @@@ void mt7921_set_stream_he_caps(struct m
  	}
  }
  
- static int mt7921_start(struct ieee80211_hw *hw)
+ int __mt7921_start(struct mt7921_phy *phy)
  {
++<<<<<<< HEAD
 +	struct mt7921_dev *dev = mt7921_hw_dev(hw);
 +	struct mt7921_phy *phy = mt7921_hw_phy(hw);
 +
 +	mutex_lock(&dev->mt76.mutex);
++=======
+ 	struct mt76_phy *mphy = phy->mt76;
+ 	int err;
+ 
+ 	err = mt76_connac_mcu_set_mac_enable(mphy->dev, 0, true, false);
+ 	if (err)
+ 		return err;
+ 
+ 	err = mt76_connac_mcu_set_channel_domain(mphy);
+ 	if (err)
+ 		return err;
+ 
+ 	err = mt7921_mcu_set_chan_info(phy, MCU_EXT_CMD_SET_RX_PATH);
+ 	if (err)
+ 		return err;
++>>>>>>> 1f7396acfef4 (mt76: mt7921: introduce __mt7921_start utility routine)
  
 +	mt7921_mcu_set_mac(dev, 0, true, false);
 +	mt7921_mcu_set_channel_domain(phy);
 +	mt7921_mcu_set_chan_info(phy, MCU_EXT_CMD_SET_RX_PATH);
  	mt7921_mac_reset_counters(phy);
- 	set_bit(MT76_STATE_RUNNING, &phy->mt76->state);
+ 	set_bit(MT76_STATE_RUNNING, &mphy->state);
  
- 	ieee80211_queue_delayed_work(hw, &phy->mt76->mac_work,
+ 	ieee80211_queue_delayed_work(mphy->hw, &mphy->mac_work,
  				     MT7921_WATCHDOG_TIME);
++<<<<<<< HEAD
++=======
+ 
+ 	return 0;
+ }
+ 
+ static int mt7921_start(struct ieee80211_hw *hw)
+ {
+ 	struct mt7921_phy *phy = mt7921_hw_phy(hw);
+ 	int err;
+ 
+ 	mt7921_mutex_acquire(phy->dev);
+ 	err = __mt7921_start(phy);
+ 	mt7921_mutex_release(phy->dev);
++>>>>>>> 1f7396acfef4 (mt76: mt7921: introduce __mt7921_start utility routine)
  
 -	return err;
 +	mutex_unlock(&dev->mt76.mutex);
 +
 +	return 0;
  }
  
  static void mt7921_stop(struct ieee80211_hw *hw)
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7921/main.c
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h b/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
index 2a7af97420c3..800ac6bceaf3 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
@@ -217,6 +217,7 @@ extern struct pci_driver mt7921_pci_driver;
 
 u32 mt7921_reg_map(struct mt7921_dev *dev, u32 addr);
 
+int __mt7921_start(struct mt7921_phy *phy);
 int mt7921_register_device(struct mt7921_dev *dev);
 void mt7921_unregister_device(struct mt7921_dev *dev);
 int mt7921_eeprom_init(struct mt7921_dev *dev);
