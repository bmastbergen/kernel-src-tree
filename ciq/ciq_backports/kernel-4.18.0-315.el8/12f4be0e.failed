mt76: mt7921: remove duplicated macros in mcu.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 12f4be0e6a68650dbc9b73a047748431b2253904
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/12f4be0e.failed

Remove mcu definitions already available in mt76_connac_mcu.h

	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 12f4be0e6a68650dbc9b73a047748431b2253904)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt7921/mcu.h
diff --cc drivers/net/wireless/mediatek/mt76/mt7921/mcu.h
index 6b3877959bd3,af8b42983a00..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7921/mcu.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/mcu.h
@@@ -367,292 -177,6 +367,295 @@@ enum 
  	MCU_PHY_STATE_OFDMLQ_CNINFO,
  };
  
++<<<<<<< HEAD
 +#define STA_TYPE_STA			BIT(0)
 +#define STA_TYPE_AP			BIT(1)
 +#define STA_TYPE_ADHOC			BIT(2)
 +#define STA_TYPE_WDS			BIT(4)
 +#define STA_TYPE_BC			BIT(5)
 +
 +#define NETWORK_INFRA			BIT(16)
 +#define NETWORK_P2P			BIT(17)
 +#define NETWORK_IBSS			BIT(18)
 +#define NETWORK_WDS			BIT(21)
 +
 +#define CONNECTION_INFRA_STA		(STA_TYPE_STA | NETWORK_INFRA)
 +#define CONNECTION_INFRA_AP		(STA_TYPE_AP | NETWORK_INFRA)
 +#define CONNECTION_P2P_GC		(STA_TYPE_STA | NETWORK_P2P)
 +#define CONNECTION_P2P_GO		(STA_TYPE_AP | NETWORK_P2P)
 +#define CONNECTION_IBSS_ADHOC		(STA_TYPE_ADHOC | NETWORK_IBSS)
 +#define CONNECTION_WDS			(STA_TYPE_WDS | NETWORK_WDS)
 +#define CONNECTION_INFRA_BC		(STA_TYPE_BC | NETWORK_INFRA)
 +
 +#define CONN_STATE_DISCONNECT		0
 +#define CONN_STATE_CONNECT		1
 +#define CONN_STATE_PORT_SECURE		2
 +
 +enum {
 +	DEV_INFO_ACTIVE,
 +	DEV_INFO_MAX_NUM
 +};
 +
 +enum {
 +	CMD_CBW_20MHZ = IEEE80211_STA_RX_BW_20,
 +	CMD_CBW_40MHZ = IEEE80211_STA_RX_BW_40,
 +	CMD_CBW_80MHZ = IEEE80211_STA_RX_BW_80,
 +	CMD_CBW_160MHZ = IEEE80211_STA_RX_BW_160,
 +	CMD_CBW_10MHZ,
 +	CMD_CBW_5MHZ,
 +	CMD_CBW_8080MHZ,
 +
 +	CMD_HE_MCS_BW80 = 0,
 +	CMD_HE_MCS_BW160,
 +	CMD_HE_MCS_BW8080,
 +	CMD_HE_MCS_BW_NUM
 +};
 +
 +struct tlv {
 +	__le16 tag;
 +	__le16 len;
 +} __packed;
 +
 +struct bss_info_uni_he {
 +	__le16 tag;
 +	__le16 len;
 +	__le16 he_rts_thres;
 +	u8 he_pe_duration;
 +	u8 su_disable;
 +	__le16 max_nss_mcs[CMD_HE_MCS_BW_NUM];
 +	u8 rsv[2];
 +} __packed;
 +
 +enum {
 +	WTBL_RESET_AND_SET = 1,
 +	WTBL_SET,
 +	WTBL_QUERY,
 +	WTBL_RESET_ALL
 +};
 +
 +struct wtbl_req_hdr {
 +	u8 wlan_idx_lo;
 +	u8 operation;
 +	__le16 tlv_num;
 +	u8 wlan_idx_hi;
 +	u8 rsv[3];
 +} __packed;
 +
 +struct wtbl_generic {
 +	__le16 tag;
 +	__le16 len;
 +	u8 peer_addr[ETH_ALEN];
 +	u8 muar_idx;
 +	u8 skip_tx;
 +	u8 cf_ack;
 +	u8 qos;
 +	u8 mesh;
 +	u8 adm;
 +	__le16 partial_aid;
 +	u8 baf_en;
 +	u8 aad_om;
 +} __packed;
 +
 +struct wtbl_rx {
 +	__le16 tag;
 +	__le16 len;
 +	u8 rcid;
 +	u8 rca1;
 +	u8 rca2;
 +	u8 rv;
 +	u8 rsv[4];
 +} __packed;
 +
 +struct wtbl_ht {
 +	__le16 tag;
 +	__le16 len;
 +	u8 ht;
 +	u8 ldpc;
 +	u8 af;
 +	u8 mm;
 +	u8 rsv[4];
 +} __packed;
 +
 +struct wtbl_vht {
 +	__le16 tag;
 +	__le16 len;
 +	u8 ldpc;
 +	u8 dyn_bw;
 +	u8 vht;
 +	u8 txop_ps;
 +	u8 rsv[4];
 +} __packed;
 +
 +struct wtbl_hdr_trans {
 +	__le16 tag;
 +	__le16 len;
 +	u8 to_ds;
 +	u8 from_ds;
 +	u8 no_rx_trans;
 +	u8 _rsv;
 +};
 +
 +enum {
 +	MT_BA_TYPE_INVALID,
 +	MT_BA_TYPE_ORIGINATOR,
 +	MT_BA_TYPE_RECIPIENT
 +};
 +
 +enum {
 +	RST_BA_MAC_TID_MATCH,
 +	RST_BA_MAC_MATCH,
 +	RST_BA_NO_MATCH
 +};
 +
 +struct wtbl_ba {
 +	__le16 tag;
 +	__le16 len;
 +	/* common */
 +	u8 tid;
 +	u8 ba_type;
 +	u8 rsv0[2];
 +	/* originator only */
 +	__le16 sn;
 +	u8 ba_en;
 +	u8 ba_winsize_idx;
 +	__le16 ba_winsize;
 +	/* recipient only */
 +	u8 peer_addr[ETH_ALEN];
 +	u8 rst_ba_tid;
 +	u8 rst_ba_sel;
 +	u8 rst_ba_sb;
 +	u8 band_idx;
 +	u8 rsv1[4];
 +} __packed;
 +
 +struct wtbl_smps {
 +	__le16 tag;
 +	__le16 len;
 +	u8 smps;
 +	u8 rsv[3];
 +} __packed;
 +
 +enum {
 +	WTBL_GENERIC,
 +	WTBL_RX,
 +	WTBL_HT,
 +	WTBL_VHT,
 +	WTBL_PEER_PS,		/* not used */
 +	WTBL_TX_PS,
 +	WTBL_HDR_TRANS,
 +	WTBL_SEC_KEY,
 +	WTBL_BA,
 +	WTBL_RDG,		/* obsoleted */
 +	WTBL_PROTECT,		/* not used */
 +	WTBL_CLEAR,		/* not used */
 +	WTBL_BF,
 +	WTBL_SMPS,
 +	WTBL_RAW_DATA,		/* debug only */
 +	WTBL_PN,
 +	WTBL_SPE,
 +	WTBL_MAX_NUM
 +};
 +
 +struct sta_ntlv_hdr {
 +	u8 rsv[2];
 +	__le16 tlv_num;
 +} __packed;
 +
 +struct sta_req_hdr {
 +	u8 bss_idx;
 +	u8 wlan_idx_lo;
 +	__le16 tlv_num;
 +	u8 is_tlv_append;
 +	u8 muar_idx;
 +	u8 wlan_idx_hi;
 +	u8 rsv;
 +} __packed;
 +
 +struct sta_rec_basic {
 +	__le16 tag;
 +	__le16 len;
 +	__le32 conn_type;
 +	u8 conn_state;
 +	u8 qos;
 +	__le16 aid;
 +	u8 peer_addr[ETH_ALEN];
 +	__le16 extra_info;
 +} __packed;
 +
 +struct sta_rec_ht {
 +	__le16 tag;
 +	__le16 len;
 +	__le16 ht_cap;
 +	u16 rsv;
 +} __packed;
 +
 +struct sta_rec_vht {
 +	__le16 tag;
 +	__le16 len;
 +	__le32 vht_cap;
 +	__le16 vht_rx_mcs_map;
 +	__le16 vht_tx_mcs_map;
 +	u8 rts_bw_sig;
 +	u8 rsv[3];
 +} __packed;
 +
 +struct sta_rec_uapsd {
 +	__le16 tag;
 +	__le16 len;
 +	u8 dac_map;
 +	u8 tac_map;
 +	u8 max_sp;
 +	u8 rsv0;
 +	__le16 listen_interval;
 +	u8 rsv1[2];
 +} __packed;
 +
 +struct sta_rec_he {
 +	__le16 tag;
 +	__le16 len;
 +
 +	__le32 he_cap;
 +
 +	u8 t_frame_dur;
 +	u8 max_ampdu_exp;
 +	u8 bw_set;
 +	u8 device_class;
 +	u8 dcm_tx_mode;
 +	u8 dcm_tx_max_nss;
 +	u8 dcm_rx_mode;
 +	u8 dcm_rx_max_nss;
 +	u8 dcm_max_ru;
 +	u8 punc_pream_rx;
 +	u8 pkt_ext;
 +	u8 rsv1;
 +
 +	__le16 max_nss_mcs[CMD_HE_MCS_BW_NUM];
 +
 +	u8 rsv2[2];
 +} __packed;
 +
 +struct sta_rec_ba {
 +	__le16 tag;
 +	__le16 len;
 +	u8 tid;
 +	u8 ba_type;
 +	u8 amsdu;
 +	u8 ba_en;
 +	__le16 ssn;
 +	__le16 winsize;
 +} __packed;
 +
 +struct sta_rec_amsdu {
 +	__le16 tag;
 +	__le16 len;
 +	u8 max_amsdu_num;
 +	u8 max_mpdu_size;
 +	u8 amsdu_en;
 +	u8 rsv;
 +} __packed;
 +
++=======
++>>>>>>> 12f4be0e6a68 (mt76: mt7921: remove duplicated macros in mcu.h)
  struct sec_key {
  	u8 cipher_id;
  	u8 cipher_len;
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7921/mcu.h
