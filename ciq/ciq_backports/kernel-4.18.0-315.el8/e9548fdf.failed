net: ena: store values in their appropriate variables types

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Shay Agroskin <shayagr@amazon.com>
commit e9548fdf93bc9e84f49fa272c74dc7cdaee793a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/e9548fdf.failed

This patch changes some of the variables types to match the values they
hold. These wrong types fail some of our static checkers that search for
accidental conversions in our driver.

	Signed-off-by: Ido Segev <idose@amazon.com>
	Signed-off-by: Igor Chauskin <igorch@amazon.com>
	Signed-off-by: Shay Agroskin <shayagr@amazon.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit e9548fdf93bc9e84f49fa272c74dc7cdaee793a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amazon/ena/ena_com.c
diff --cc drivers/net/ethernet/amazon/ena/ena_com.c
index d02aeb5b8e86,02087d443e73..000000000000
--- a/drivers/net/ethernet/amazon/ena/ena_com.c
+++ b/drivers/net/ethernet/amazon/ena/ena_com.c
@@@ -1320,14 -1360,15 +1320,24 @@@ int ena_com_execute_admin_command(struc
  	comp_ctx = ena_com_submit_admin_cmd(admin_queue, cmd, cmd_size,
  					    comp, comp_size);
  	if (IS_ERR(comp_ctx)) {
++<<<<<<< HEAD
 +		if (comp_ctx == ERR_PTR(-ENODEV))
 +			pr_debug("Failed to submit command [%ld]\n",
 +				 PTR_ERR(comp_ctx));
 +		else
 +			pr_err("Failed to submit command [%ld]\n",
 +			       PTR_ERR(comp_ctx));
++=======
+ 		ret = PTR_ERR(comp_ctx);
+ 		if (ret == -ENODEV)
+ 			netdev_dbg(admin_queue->ena_dev->net_device,
+ 				   "Failed to submit command [%d]\n", ret);
+ 		else
+ 			netdev_err(admin_queue->ena_dev->net_device,
+ 				   "Failed to submit command [%d]\n", ret);
++>>>>>>> e9548fdf93bc (net: ena: store values in their appropriate variables types)
  
- 		return PTR_ERR(comp_ctx);
+ 		return ret;
  	}
  
  	ret = ena_com_wait_and_process_admin_cq(comp_ctx, admin_queue);
@@@ -1545,10 -1594,10 +1555,10 @@@ int ena_com_set_aenq_config(struct ena_
  int ena_com_get_dma_width(struct ena_com_dev *ena_dev)
  {
  	u32 caps = ena_com_reg_bar_read32(ena_dev, ENA_REGS_CAPS_OFF);
- 	int width;
+ 	u32 width;
  
  	if (unlikely(caps == ENA_MMIO_READ_TIMEOUT)) {
 -		netdev_err(ena_dev->net_device, "Reg read timeout occurred\n");
 +		pr_err("Reg read timeout occurred\n");
  		return -ETIME;
  	}
  
* Unmerged path drivers/net/ethernet/amazon/ena/ena_com.c
diff --git a/drivers/net/ethernet/amazon/ena/ena_com.h b/drivers/net/ethernet/amazon/ena/ena_com.h
index fe60a5696d9e..6d9a167ef342 100644
--- a/drivers/net/ethernet/amazon/ena/ena_com.h
+++ b/drivers/net/ethernet/amazon/ena/ena_com.h
@@ -604,7 +604,7 @@ int ena_com_get_eni_stats(struct ena_com_dev *ena_dev,
  *
  * @return: 0 on Success and negative value otherwise.
  */
-int ena_com_set_dev_mtu(struct ena_com_dev *ena_dev, int mtu);
+int ena_com_set_dev_mtu(struct ena_com_dev *ena_dev, u32 mtu);
 
 /* ena_com_get_offload_settings - Retrieve the device offloads capabilities
  * @ena_dev: ENA communication layer struct
