mt76: mt7915: get rid of dbdc debugfs knob

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit af901eb4ab80e6398a79763a17d662234dab06b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/af901eb4.failed

mt7915 automatically detects dbdc feature so drop debugfs knob.
Move if_comb, mt7915_rates, if_limits structs and mt7915_regd_notifier(),
mt7915_init_wiphy() routines at the begging of init.c in order to make
mt7915_register_ext_phy routine static

Co-developed-by: Shayne Chen <shayne.chen@mediatek.com>
	Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
Co-developed-by: Ryder Lee <ryder.lee@mediatek.com>
	Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit af901eb4ab80e6398a79763a17d662234dab06b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt7915/init.c
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/init.c
index 53eec43135bb,ff29a8090739..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/init.c
@@@ -6,162 -6,6 +6,165 @@@
  #include "mac.h"
  #include "eeprom.h"
  
++<<<<<<< HEAD
 +static void
 +mt7915_mac_init_band(struct mt7915_dev *dev, u8 band)
 +{
 +	u32 mask, set;
 +
 +	mt76_rmw_field(dev, MT_TMAC_CTCR0(band),
 +		       MT_TMAC_CTCR0_INS_DDLMT_REFTIME, 0x3f);
 +	mt76_set(dev, MT_TMAC_CTCR0(band),
 +		 MT_TMAC_CTCR0_INS_DDLMT_VHT_SMPDU_EN |
 +		 MT_TMAC_CTCR0_INS_DDLMT_EN);
 +
 +	mask = MT_MDP_RCFR0_MCU_RX_MGMT |
 +	       MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR |
 +	       MT_MDP_RCFR0_MCU_RX_CTL_BAR;
 +	set = FIELD_PREP(MT_MDP_RCFR0_MCU_RX_MGMT, MT_MDP_TO_HIF) |
 +	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR, MT_MDP_TO_HIF) |
 +	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_BAR, MT_MDP_TO_HIF);
 +	mt76_rmw(dev, MT_MDP_BNRCFR0(band), mask, set);
 +
 +	mask = MT_MDP_RCFR1_MCU_RX_BYPASS |
 +	       MT_MDP_RCFR1_RX_DROPPED_UCAST |
 +	       MT_MDP_RCFR1_RX_DROPPED_MCAST;
 +	set = FIELD_PREP(MT_MDP_RCFR1_MCU_RX_BYPASS, MT_MDP_TO_HIF) |
 +	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_UCAST, MT_MDP_TO_HIF) |
 +	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_MCAST, MT_MDP_TO_HIF);
 +	mt76_rmw(dev, MT_MDP_BNRCFR1(band), mask, set);
 +
 +	mt76_set(dev, MT_WF_RMAC_MIB_TIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
 +	mt76_set(dev, MT_WF_RMAC_MIB_AIRTIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
 +}
 +
 +static void mt7915_mac_init(struct mt7915_dev *dev)
 +{
 +	int i;
 +
 +	mt76_rmw_field(dev, MT_DMA_DCR0, MT_DMA_DCR0_MAX_RX_LEN, 1536);
 +	mt76_rmw_field(dev, MT_MDP_DCR1, MT_MDP_DCR1_MAX_RX_LEN, 1536);
 +	/* disable rx rate report by default due to hw issues */
 +	mt76_clear(dev, MT_DMA_DCR0, MT_DMA_DCR0_RXD_G5_EN);
 +	/* disable hardware de-agg */
 +	mt76_clear(dev, MT_MDP_DCR0, MT_MDP_DCR0_DAMSDU_EN);
 +
 +	for (i = 0; i < MT7915_WTBL_SIZE; i++)
 +		mt7915_mac_wtbl_update(dev, i,
 +				       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
 +
 +	mt7915_mac_init_band(dev, 0);
 +	mt7915_mac_init_band(dev, 1);
 +	mt7915_mcu_set_rts_thresh(&dev->phy, 0x92b);
 +}
 +
 +static int mt7915_txbf_init(struct mt7915_dev *dev)
 +{
 +	int ret;
 +
 +	/*
 +	 * TODO: DBDC & check whether iBF phase calibration data has
 +	 * been stored in eeprom offset 0x651~0x7b8, then write down
 +	 * 0x1111 into 0x651 and 0x651 to trigger iBF.
 +	 */
 +
 +	/* trigger sounding packets */
 +	ret = mt7915_mcu_set_txbf_sounding(dev);
 +	if (ret)
 +		return ret;
 +
 +	/* enable iBF & eBF */
 +	return mt7915_mcu_set_txbf_type(dev);
 +}
 +
 +static void
 +mt7915_init_txpower_band(struct mt7915_dev *dev,
 +			 struct ieee80211_supported_band *sband)
 +{
 +	int i, n_chains = hweight8(dev->mphy.antenna_mask);
 +
 +	for (i = 0; i < sband->n_channels; i++) {
 +		struct ieee80211_channel *chan = &sband->channels[i];
 +		u32 target_power = 0;
 +		int j;
 +
 +		for (j = 0; j < n_chains; j++) {
 +			u32 val;
 +
 +			val = mt7915_eeprom_get_target_power(dev, chan, j);
 +			target_power = max(target_power, val);
 +		}
 +
 +		chan->max_power = min_t(int, chan->max_reg_power,
 +					target_power / 2);
 +		chan->orig_mpwr = target_power / 2;
 +	}
 +}
 +
 +static void mt7915_init_txpower(struct mt7915_dev *dev)
 +{
 +	mt7915_init_txpower_band(dev, &dev->mphy.sband_2g.sband);
 +	mt7915_init_txpower_band(dev, &dev->mphy.sband_5g.sband);
 +
 +	mt7915_eeprom_init_sku(dev);
 +}
 +
 +static void mt7915_init_work(struct work_struct *work)
 +{
 +	struct mt7915_dev *dev = container_of(work, struct mt7915_dev,
 +				 init_work);
 +
 +	mt7915_mcu_set_eeprom(dev);
 +	mt7915_mac_init(dev);
 +	mt7915_init_txpower(dev);
 +	mt7915_txbf_init(dev);
 +}
 +
 +static int mt7915_init_hardware(struct mt7915_dev *dev)
 +{
 +	int ret, idx;
 +
 +	mt76_wr(dev, MT_INT_SOURCE_CSR, ~0);
 +
 +	INIT_WORK(&dev->init_work, mt7915_init_work);
 +	spin_lock_init(&dev->token_lock);
 +	idr_init(&dev->token);
 +
 +	ret = mt7915_dma_init(dev);
 +	if (ret)
 +		return ret;
 +
 +	set_bit(MT76_STATE_INITIALIZED, &dev->mphy.state);
 +
 +	/*
 +	 * force firmware operation mode into normal state,
 +	 * which should be set before firmware download stage.
 +	 */
 +	mt76_wr(dev, MT_SWDEF_MODE, MT_SWDEF_NORMAL_MODE);
 +
 +	ret = mt7915_mcu_init(dev);
 +	if (ret)
 +		return ret;
 +
 +	ret = mt7915_eeprom_init(dev);
 +	if (ret < 0)
 +		return ret;
 +
 +	/* Beacon and mgmt frames should occupy wcid 0 */
 +	idx = mt76_wcid_alloc(dev->mt76.wcid_mask, MT7915_WTBL_STA - 1);
 +	if (idx)
 +		return -ENOSPC;
 +
 +	dev->mt76.global_wcid.idx = idx;
 +	dev->mt76.global_wcid.hw_key_idx = -1;
 +	dev->mt76.global_wcid.tx_info |= MT_WCID_TX_INFO_SET;
 +	rcu_assign_pointer(dev->mt76.wcid[idx], &dev->mt76.global_wcid);
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> af901eb4ab80 (mt76: mt7915: get rid of dbdc debugfs knob)
  #define CCK_RATE(_idx, _rate) {						\
  	.bitrate = _rate,						\
  	.flags = IEEE80211_RATE_SHORT_PREAMBLE,				\
@@@ -542,92 -600,7 +759,96 @@@ void mt7915_set_stream_he_caps(struct m
  	}
  }
  
++<<<<<<< HEAD
 +static void
 +mt7915_cap_dbdc_enable(struct mt7915_dev *dev)
 +{
 +	dev->mphy.sband_5g.sband.vht_cap.cap &=
 +			~(IEEE80211_VHT_CAP_SHORT_GI_160 |
 +			  IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ);
 +
 +	if (dev->chainmask == 0xf)
 +		dev->mphy.antenna_mask = dev->chainmask >> 2;
 +	else
 +		dev->mphy.antenna_mask = dev->chainmask >> 1;
 +
 +	dev->phy.chainmask = dev->mphy.antenna_mask;
 +	dev->mphy.hw->wiphy->available_antennas_rx = dev->phy.chainmask;
 +	dev->mphy.hw->wiphy->available_antennas_tx = dev->phy.chainmask;
 +
 +	mt76_set_stream_caps(&dev->mphy, true);
 +	mt7915_set_stream_vht_txbf_caps(&dev->phy);
 +	mt7915_set_stream_he_caps(&dev->phy);
 +}
 +
 +static void
 +mt7915_cap_dbdc_disable(struct mt7915_dev *dev)
 +{
 +	dev->mphy.sband_5g.sband.vht_cap.cap |=
 +			IEEE80211_VHT_CAP_SHORT_GI_160 |
 +			IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ;
 +
 +	dev->mphy.antenna_mask = dev->chainmask;
 +	dev->phy.chainmask = dev->chainmask;
 +	dev->mphy.hw->wiphy->available_antennas_rx = dev->chainmask;
 +	dev->mphy.hw->wiphy->available_antennas_tx = dev->chainmask;
 +
 +	mt76_set_stream_caps(&dev->mphy, true);
 +	mt7915_set_stream_vht_txbf_caps(&dev->phy);
 +	mt7915_set_stream_he_caps(&dev->phy);
 +}
 +
 +int mt7915_register_ext_phy(struct mt7915_dev *dev)
 +{
 +	struct mt7915_phy *phy = mt7915_ext_phy(dev);
 +	struct mt76_phy *mphy;
 +	int ret;
 +	bool bound;
 +
 +	/* TODO: enble DBDC */
 +	bound = mt7915_l1_rr(dev, MT_HW_BOUND) & BIT(5);
 +	if (!bound)
 +		return -EINVAL;
 +
 +	if (test_bit(MT76_STATE_RUNNING, &dev->mphy.state))
 +		return -EINVAL;
 +
 +	if (phy)
 +		return 0;
 +
 +	mt7915_cap_dbdc_enable(dev);
 +	mphy = mt76_alloc_phy(&dev->mt76, sizeof(*phy), &mt7915_ops);
 +	if (!mphy)
 +		return -ENOMEM;
 +
 +	phy = mphy->priv;
 +	phy->dev = dev;
 +	phy->mt76 = mphy;
 +	phy->chainmask = dev->chainmask & ~dev->phy.chainmask;
 +	mphy->antenna_mask = BIT(hweight8(phy->chainmask)) - 1;
 +	mt7915_init_wiphy(mphy->hw);
 +
 +	INIT_LIST_HEAD(&phy->stats_list);
 +	INIT_DELAYED_WORK(&phy->mac_work, mt7915_mac_work);
 +
 +	/*
 +	 * Make the secondary PHY MAC address local without overlapping with
 +	 * the usual MAC address allocation scheme on multiple virtual interfaces
 +	 */
 +	mphy->hw->wiphy->perm_addr[0] |= 2;
 +	mphy->hw->wiphy->perm_addr[0] ^= BIT(7);
 +
 +	ret = mt76_register_phy(mphy);
 +	if (ret)
 +		ieee80211_free_hw(mphy->hw);
 +
 +	return ret;
 +}
 +
 +void mt7915_unregister_ext_phy(struct mt7915_dev *dev)
++=======
+ static void mt7915_unregister_ext_phy(struct mt7915_dev *dev)
++>>>>>>> af901eb4ab80 (mt76: mt7915: get rid of dbdc debugfs knob)
  {
  	struct mt7915_phy *phy = mt7915_ext_phy(dev);
  	struct mt76_phy *mphy = dev->mt76.phy2;
diff --git a/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c b/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c
index ac2c5997b22f..b8cbce9b30f5 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c
@@ -47,32 +47,6 @@ mt7915_radar_trigger(void *data, u64 val)
 DEFINE_DEBUGFS_ATTRIBUTE(fops_radar_trigger, NULL,
 			 mt7915_radar_trigger, "%lld\n");
 
-static int
-mt7915_dbdc_set(void *data, u64 val)
-{
-	struct mt7915_dev *dev = data;
-
-	if (val)
-		mt7915_register_ext_phy(dev);
-	else
-		mt7915_unregister_ext_phy(dev);
-
-	return 0;
-}
-
-static int
-mt7915_dbdc_get(void *data, u64 *val)
-{
-	struct mt7915_dev *dev = data;
-
-	*val = !!mt7915_ext_phy(dev);
-
-	return 0;
-}
-
-DEFINE_DEBUGFS_ATTRIBUTE(fops_dbdc, mt7915_dbdc_get,
-			 mt7915_dbdc_set, "%lld\n");
-
 static int
 mt7915_fw_debug_set(void *data, u64 val)
 {
@@ -373,7 +347,6 @@ int mt7915_init_debugfs(struct mt7915_dev *dev)
 	debugfs_create_devm_seqfile(dev->mt76.dev, "acq", dir,
 				    mt7915_queues_acq);
 	debugfs_create_file("tx_stats", 0400, dir, dev, &fops_tx_stats);
-	debugfs_create_file("dbdc", 0600, dir, dev, &fops_dbdc);
 	debugfs_create_file("fw_debug", 0600, dir, dev, &fops_fw_debug);
 	debugfs_create_u32("dfs_hw_pattern", 0400, dir, &dev->hw_pattern);
 	/* test knobs */
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/init.c
diff --git a/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h b/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
index b4ca22ce435c..27073624fa6b 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
@@ -275,8 +275,6 @@ u32 mt7915_reg_map(struct mt7915_dev *dev, u32 addr);
 
 int mt7915_register_device(struct mt7915_dev *dev);
 void mt7915_unregister_device(struct mt7915_dev *dev);
-int mt7915_register_ext_phy(struct mt7915_dev *dev);
-void mt7915_unregister_ext_phy(struct mt7915_dev *dev);
 int mt7915_eeprom_init(struct mt7915_dev *dev);
 int mt7915_eeprom_get_target_power(struct mt7915_dev *dev,
 				   struct ieee80211_channel *chan,
