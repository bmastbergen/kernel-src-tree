mac80211_hwsim: calculate if_combination.max_interfaces

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 45fcef8b727b6f171bc5443e8153181a367d7a15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/45fcef8b.failed

If we just set this to 2048, and have multiple limits you
can select from, the total number might run over and cause
a warning in cfg80211. This doesn't make sense, so we just
calculate the total max_interfaces now.

	Reported-by: syzbot+8f91bd563bbff230d0ee@syzkaller.appspotmail.com
Fixes: 99e3a44bac37 ("mac80211_hwsim: allow setting iftype support")
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 45fcef8b727b6f171bc5443e8153181a367d7a15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mac80211_hwsim.c
diff --cc drivers/net/wireless/mac80211_hwsim.c
index d0a6c7958422,524eb5805995..000000000000
--- a/drivers/net/wireless/mac80211_hwsim.c
+++ b/drivers/net/wireless/mac80211_hwsim.c
@@@ -2523,7 -2644,8 +2523,12 @@@ static int mac80211_hwsim_new_radio(str
  	enum nl80211_band band;
  	const struct ieee80211_ops *ops = &mac80211_hwsim_ops;
  	struct net *net;
++<<<<<<< HEAD
 +	int idx;
++=======
+ 	int idx, i;
+ 	int n_limits = 0;
++>>>>>>> 45fcef8b727b (mac80211_hwsim: calculate if_combination.max_interfaces)
  
  	if (WARN_ON(param->channels > 1 && !param->use_chanctx))
  		return -EINVAL;
@@@ -2603,22 -2751,46 +2608,62 @@@
  		hw->wiphy->max_scan_ssids = 255;
  		hw->wiphy->max_scan_ie_len = IEEE80211_MAX_DATA_LEN;
  		hw->wiphy->max_remain_on_channel_duration = 1000;
 +		hw->wiphy->iface_combinations = &data->if_combination;
 +		if (param->p2p_device)
 +			data->if_combination = hwsim_if_comb_p2p_dev[0];
 +		else
 +			data->if_combination = hwsim_if_comb[0];
 +		hw->wiphy->n_iface_combinations = 1;
 +		/* For channels > 1 DFS is not allowed */
  		data->if_combination.radar_detect_widths = 0;
  		data->if_combination.num_different_channels = data->channels;
 +	} else if (param->p2p_device) {
 +		hw->wiphy->iface_combinations = hwsim_if_comb_p2p_dev;
 +		hw->wiphy->n_iface_combinations =
 +			ARRAY_SIZE(hwsim_if_comb_p2p_dev);
  	} else {
++<<<<<<< HEAD
 +		hw->wiphy->iface_combinations = hwsim_if_comb;
 +		hw->wiphy->n_iface_combinations = ARRAY_SIZE(hwsim_if_comb);
++=======
+ 		data->if_combination.num_different_channels = 1;
+ 		data->if_combination.radar_detect_widths =
+ 					BIT(NL80211_CHAN_WIDTH_20_NOHT) |
+ 					BIT(NL80211_CHAN_WIDTH_20) |
+ 					BIT(NL80211_CHAN_WIDTH_40) |
+ 					BIT(NL80211_CHAN_WIDTH_80) |
+ 					BIT(NL80211_CHAN_WIDTH_160);
+ 	}
+ 
+ 	if (!n_limits) {
+ 		err = -EINVAL;
+ 		goto failed_hw;
+ 	}
+ 
+ 	data->if_combination.max_interfaces = 0;
+ 	for (i = 0; i < n_limits; i++)
+ 		data->if_combination.max_interfaces +=
+ 			data->if_limits[i].max;
+ 
+ 	data->if_combination.n_limits = n_limits;
+ 	data->if_combination.limits = data->if_limits;
+ 
+ 	/*
+ 	 * If we actually were asked to support combinations,
+ 	 * advertise them - if there's only a single thing like
+ 	 * only IBSS then don't advertise it as combinations.
+ 	 */
+ 	if (data->if_combination.max_interfaces > 1) {
+ 		hw->wiphy->iface_combinations = &data->if_combination;
+ 		hw->wiphy->n_iface_combinations = 1;
+ 	}
+ 
+ 	if (param->ciphers) {
+ 		memcpy(data->ciphers, param->ciphers,
+ 		       param->n_ciphers * sizeof(u32));
+ 		hw->wiphy->cipher_suites = data->ciphers;
+ 		hw->wiphy->n_cipher_suites = param->n_ciphers;
++>>>>>>> 45fcef8b727b (mac80211_hwsim: calculate if_combination.max_interfaces)
  	}
  
  	INIT_DELAYED_WORK(&data->roc_start, hw_roc_start);
* Unmerged path drivers/net/wireless/mac80211_hwsim.c
