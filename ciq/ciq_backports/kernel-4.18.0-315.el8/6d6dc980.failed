mt76: mt7915: add implicit Tx beamforming support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Ryder Lee <ryder.lee@mediatek.com>
commit 6d6dc980e07d1f891cff4fbf7beedc81af800ff5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/6d6dc980.failed

Add ht/vht implicit Tx beamforming support and enable it via debugfs.

	Tested-by: Shayne Chen <shayne.chen@mediatek.com>
	Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 6d6dc980e07d1f891cff4fbf7beedc81af800ff5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt7915/init.c
#	drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
#	drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/init.c
index 49c09d0d8906,5e21646865a6..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/init.c
@@@ -269,9 -113,217 +269,220 @@@ mt7915_init_wiphy(struct ieee80211_hw *
  	hw->max_tx_fragments = 4;
  }
  
++<<<<<<< HEAD
++=======
+ static void
+ mt7915_mac_init_band(struct mt7915_dev *dev, u8 band)
+ {
+ 	u32 mask, set;
+ 
+ 	mt76_rmw_field(dev, MT_TMAC_CTCR0(band),
+ 		       MT_TMAC_CTCR0_INS_DDLMT_REFTIME, 0x3f);
+ 	mt76_set(dev, MT_TMAC_CTCR0(band),
+ 		 MT_TMAC_CTCR0_INS_DDLMT_VHT_SMPDU_EN |
+ 		 MT_TMAC_CTCR0_INS_DDLMT_EN);
+ 
+ 	mask = MT_MDP_RCFR0_MCU_RX_MGMT |
+ 	       MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR |
+ 	       MT_MDP_RCFR0_MCU_RX_CTL_BAR;
+ 	set = FIELD_PREP(MT_MDP_RCFR0_MCU_RX_MGMT, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_BAR, MT_MDP_TO_HIF);
+ 	mt76_rmw(dev, MT_MDP_BNRCFR0(band), mask, set);
+ 
+ 	mask = MT_MDP_RCFR1_MCU_RX_BYPASS |
+ 	       MT_MDP_RCFR1_RX_DROPPED_UCAST |
+ 	       MT_MDP_RCFR1_RX_DROPPED_MCAST;
+ 	set = FIELD_PREP(MT_MDP_RCFR1_MCU_RX_BYPASS, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_UCAST, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_MCAST, MT_MDP_TO_HIF);
+ 	mt76_rmw(dev, MT_MDP_BNRCFR1(band), mask, set);
+ 
+ 	mt76_set(dev, MT_WF_RMAC_MIB_TIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
+ 	mt76_set(dev, MT_WF_RMAC_MIB_AIRTIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
+ 
+ 	mt76_rmw_field(dev, MT_DMA_DCR0(band), MT_DMA_DCR0_MAX_RX_LEN, 1536);
+ 	/* disable rx rate report by default due to hw issues */
+ 	mt76_clear(dev, MT_DMA_DCR0(band), MT_DMA_DCR0_RXD_G5_EN);
+ }
+ 
+ static void mt7915_mac_init(struct mt7915_dev *dev)
+ {
+ 	int i;
+ 
+ 	mt76_rmw_field(dev, MT_MDP_DCR1, MT_MDP_DCR1_MAX_RX_LEN, 1536);
+ 	/* disable hardware de-agg */
+ 	mt76_clear(dev, MT_MDP_DCR0, MT_MDP_DCR0_DAMSDU_EN);
+ 
+ 	for (i = 0; i < MT7915_WTBL_SIZE; i++)
+ 		mt7915_mac_wtbl_update(dev, i,
+ 				       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
+ 	for (i = 0; i < 2; i++)
+ 		mt7915_mac_init_band(dev, i);
+ 
+ 	mt7915_mcu_set_rts_thresh(&dev->phy, 0x92b);
+ }
+ 
+ static int mt7915_txbf_init(struct mt7915_dev *dev)
+ {
+ 	int ret;
+ 
+ 	/* trigger sounding packets */
+ 	ret = mt7915_mcu_set_txbf_sounding(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* enable eBF */
+ 	return mt7915_mcu_set_txbf_type(dev);
+ }
+ 
+ static void
+ mt7915_init_txpower_band(struct mt7915_dev *dev,
+ 			 struct ieee80211_supported_band *sband)
+ {
+ 	int i, n_chains = hweight8(dev->mphy.antenna_mask);
+ 
+ 	for (i = 0; i < sband->n_channels; i++) {
+ 		struct ieee80211_channel *chan = &sband->channels[i];
+ 		u32 target_power = 0;
+ 		int j;
+ 
+ 		for (j = 0; j < n_chains; j++) {
+ 			u32 val;
+ 
+ 			val = mt7915_eeprom_get_target_power(dev, chan, j);
+ 			target_power = max(target_power, val);
+ 		}
+ 
+ 		chan->max_power = min_t(int, chan->max_reg_power,
+ 					target_power / 2);
+ 		chan->orig_mpwr = target_power / 2;
+ 	}
+ }
+ 
+ static void mt7915_init_txpower(struct mt7915_dev *dev)
+ {
+ 	mt7915_init_txpower_band(dev, &dev->mphy.sband_2g.sband);
+ 	mt7915_init_txpower_band(dev, &dev->mphy.sband_5g.sband);
+ 
+ 	mt7915_eeprom_init_sku(dev);
+ }
+ 
+ static int mt7915_register_ext_phy(struct mt7915_dev *dev)
+ {
+ 	struct mt7915_phy *phy = mt7915_ext_phy(dev);
+ 	struct mt76_phy *mphy;
+ 	int ret;
+ 
+ 	if (!dev->dbdc_support)
+ 		return 0;
+ 
+ 	if (phy)
+ 		return 0;
+ 
+ 	mphy = mt76_alloc_phy(&dev->mt76, sizeof(*phy), &mt7915_ops);
+ 	if (!mphy)
+ 		return -ENOMEM;
+ 
+ 	phy = mphy->priv;
+ 	phy->dev = dev;
+ 	phy->mt76 = mphy;
+ 	mphy->chainmask = dev->chainmask & ~dev->mphy.chainmask;
+ 	mphy->antenna_mask = BIT(hweight8(mphy->chainmask)) - 1;
+ 	mt7915_init_wiphy(mphy->hw);
+ 
+ 	INIT_LIST_HEAD(&phy->stats_list);
+ 	INIT_DELAYED_WORK(&mphy->mac_work, mt7915_mac_work);
+ 
+ 	mt7915_eeprom_parse_band_config(phy);
+ 	mt7915_set_stream_vht_txbf_caps(phy);
+ 	mt7915_set_stream_he_caps(phy);
+ 
+ 	memcpy(mphy->macaddr, dev->mt76.eeprom.data + MT_EE_MAC_ADDR2,
+ 	       ETH_ALEN);
+ 	mt76_eeprom_override(mphy);
+ 
+ 	/* The second interface does not get any packets unless it has a vif */
+ 	ieee80211_hw_set(mphy->hw, WANT_MONITOR_VIF);
+ 
+ 	ret = mt7915_init_tx_queues(phy, MT7915_TXQ_BAND1,
+ 				    MT7915_TX_RING_SIZE);
+ 	if (ret)
+ 		goto error;
+ 
+ 	ret = mt76_register_phy(mphy, true, mt7915_rates,
+ 				ARRAY_SIZE(mt7915_rates));
+ 	if (ret)
+ 		goto error;
+ 
+ 	return 0;
+ 
+ error:
+ 	ieee80211_free_hw(mphy->hw);
+ 	return ret;
+ }
+ 
+ static void mt7915_init_work(struct work_struct *work)
+ {
+ 	struct mt7915_dev *dev = container_of(work, struct mt7915_dev,
+ 				 init_work);
+ 
+ 	mt7915_mcu_set_eeprom(dev);
+ 	mt7915_mac_init(dev);
+ 	mt7915_init_txpower(dev);
+ 	mt7915_txbf_init(dev);
+ 	mt7915_register_ext_phy(dev);
+ }
+ 
+ static int mt7915_init_hardware(struct mt7915_dev *dev)
+ {
+ 	int ret, idx;
+ 
+ 	mt76_wr(dev, MT_INT_SOURCE_CSR, ~0);
+ 
+ 	INIT_WORK(&dev->init_work, mt7915_init_work);
+ 	spin_lock_init(&dev->token_lock);
+ 	idr_init(&dev->token);
+ 
+ 	dev->dbdc_support = !!(mt7915_l1_rr(dev, MT_HW_BOUND) & BIT(5));
+ 
+ 	ret = mt7915_dma_init(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	set_bit(MT76_STATE_INITIALIZED, &dev->mphy.state);
+ 
+ 	/*
+ 	 * force firmware operation mode into normal state,
+ 	 * which should be set before firmware download stage.
+ 	 */
+ 	mt76_wr(dev, MT_SWDEF_MODE, MT_SWDEF_NORMAL_MODE);
+ 
+ 	ret = mt7915_mcu_init(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = mt7915_eeprom_init(dev);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	/* Beacon and mgmt frames should occupy wcid 0 */
+ 	idx = mt76_wcid_alloc(dev->mt76.wcid_mask, MT7915_WTBL_STA - 1);
+ 	if (idx)
+ 		return -ENOSPC;
+ 
+ 	dev->mt76.global_wcid.idx = idx;
+ 	dev->mt76.global_wcid.hw_key_idx = -1;
+ 	dev->mt76.global_wcid.tx_info |= MT_WCID_TX_INFO_SET;
+ 	rcu_assign_pointer(dev->mt76.wcid[idx], &dev->mt76.global_wcid);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 6d6dc980e07d (mt76: mt7915: add implicit Tx beamforming support)
  void mt7915_set_stream_vht_txbf_caps(struct mt7915_phy *phy)
  {
 -	int nss = hweight8(phy->mt76->chainmask);
 +	int nss = hweight8(phy->chainmask);
  	u32 *cap = &phy->mt76->sband_5g.sband.vht_cap.cap;
  
  	*cap |= IEEE80211_VHT_CAP_SU_BEAMFORMEE_CAPABLE |
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
index 77de38525b60,6d4c5b7dfd56..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
@@@ -1773,30 -1768,35 +1773,40 @@@ mt7915_mcu_sta_bfer_vht(struct ieee8021
  {
  	struct ieee80211_sta_vht_cap *pc = &sta->vht_cap;
  	struct ieee80211_sta_vht_cap *vc = &phy->mt76->sband_5g.sband.vht_cap;
++<<<<<<< HEAD
 +	u8 bfee_nr, bfer_nr, n, tx_ant = hweight8(phy->chainmask) - 1;
 +	u16 mcs_map;
++=======
+ 	u16 mcs_map = le16_to_cpu(pc->vht_mcs.rx_mcs_map);
+ 	u8 nss_mcs = mt7915_mcu_get_sta_nss(mcs_map);
+ 	u8 tx_ant = hweight8(phy->mt76->chainmask) - 1;
++>>>>>>> 6d6dc980e07d (mt76: mt7915: add implicit Tx beamforming support)
  
  	bf->tx_mode = MT_PHY_TYPE_VHT;
- 	bf->bf_cap |= MT_EBF;
  
- 	mt7915_mcu_sta_sounding_rate(bf);
+ 	if (explicit) {
+ 		u8 bfee_nr, bfer_nr;
  
- 	bfee_nr = FIELD_GET(IEEE80211_VHT_CAP_BEAMFORMEE_STS_MASK,
- 			    pc->cap);
- 	bfer_nr = FIELD_GET(IEEE80211_VHT_CAP_SOUNDING_DIMENSIONS_MASK,
- 			    vc->cap);
- 	mcs_map = le16_to_cpu(pc->vht_mcs.rx_mcs_map);
+ 		mt7915_mcu_sta_sounding_rate(bf);
+ 		bfee_nr = FIELD_GET(IEEE80211_VHT_CAP_BEAMFORMEE_STS_MASK,
+ 				    pc->cap);
+ 		bfer_nr = FIELD_GET(IEEE80211_VHT_CAP_SOUNDING_DIMENSIONS_MASK,
+ 				    vc->cap);
+ 		bf->nr = min_t(u8, min_t(u8, bfer_nr, bfee_nr), tx_ant);
+ 		bf->nc = min_t(u8, nss_mcs, bf->nr);
+ 		bf->ibf_ncol = bf->nc;
  
- 	n = min_t(u8, bfer_nr, bfee_nr);
- 	bf->nr = min_t(u8, n, tx_ant);
- 	n = mt7915_mcu_get_sta_nss(mcs_map);
- 
- 	bf->nc = min_t(u8, n, bf->nr);
- 	bf->ibf_ncol = bf->nc;
+ 		if (sta->bandwidth == IEEE80211_STA_RX_BW_160)
+ 			bf->nr = 1;
+ 	} else {
+ 		bf->bf_cap = MT_IBF;
+ 		bf->nr = tx_ant;
+ 		bf->nc = min_t(u8, nss_mcs, bf->nr);
+ 		bf->ibf_ncol = nss_mcs;
  
- 	/* force nr from 4 to 2 */
- 	if (sta->bandwidth == IEEE80211_STA_RX_BW_160)
- 		bf->nr = 1;
+ 		if (sta->bandwidth == IEEE80211_STA_RX_BW_160)
+ 			bf->ibf_nrow = 1;
+ 	}
  }
  
  static void
@@@ -1868,11 -1859,11 +1869,11 @@@ mt7915_mcu_sta_bfer_he(struct ieee80211
  static void
  mt7915_mcu_sta_bfer_tlv(struct sk_buff *skb, struct ieee80211_sta *sta,
  			struct ieee80211_vif *vif, struct mt7915_phy *phy,
- 			bool enable)
+ 			bool enable, bool explicit)
  {
 -	int tx_ant = hweight8(phy->mt76->chainmask) - 1;
  	struct sta_rec_bf *bf;
  	struct tlv *tlv;
 +	int tx_ant = hweight8(phy->chainmask) - 1;
  	const u8 matrix[4][4] = {
  		{0, 0, 0, 0},
  		{1, 1, 0, 0},	/* 2x1, 2x2, 2x3, 2x4 */
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
index 925c97e4a517,b5954bae139b..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
@@@ -174,21 -185,10 +174,25 @@@ struct mt7915_dev 
  
  	s8 **rate_power; /* TODO: use mt76_rate_power */
  
 -	bool dbdc_support;
 -	bool flash_mode;
  	bool fw_debug;
++<<<<<<< HEAD
 +
 +#ifdef CONFIG_NL80211_TESTMODE
 +	struct {
 +		u32 *reg_backup;
 +
 +		s32 last_freq_offset;
 +		u8 last_rcpi[4];
 +		s8 last_ib_rssi[4];
 +		s8 last_wb_rssi[4];
 +		u8 last_snr;
 +
 +		u8 spe_idx;
 +	} test;
 +#endif
++=======
+ 	bool ibf;
++>>>>>>> 6d6dc980e07d (mt76: mt7915: add implicit Tx beamforming support)
  };
  
  enum {
diff --git a/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c b/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c
index ac2c5997b22f..8ccbb3e71e3b 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/debugfs.c
@@ -6,6 +6,32 @@
 
 /** global debugfs **/
 
+static int
+mt7915_implicit_txbf_set(void *data, u64 val)
+{
+	struct mt7915_dev *dev = data;
+
+	if (test_bit(MT76_STATE_RUNNING, &dev->mphy.state))
+		return -EBUSY;
+
+	dev->ibf = !!val;
+
+	return mt7915_mcu_set_txbf_type(dev);
+}
+
+static int
+mt7915_implicit_txbf_get(void *data, u64 *val)
+{
+	struct mt7915_dev *dev = data;
+
+	*val = dev->ibf;
+
+	return 0;
+}
+
+DEFINE_DEBUGFS_ATTRIBUTE(fops_implicit_txbf, mt7915_implicit_txbf_get,
+			 mt7915_implicit_txbf_set, "%lld\n");
+
 /* test knob of system layer 1/2 error recovery */
 static int mt7915_ser_trigger_set(void *data, u64 val)
 {
@@ -375,6 +401,8 @@ int mt7915_init_debugfs(struct mt7915_dev *dev)
 	debugfs_create_file("tx_stats", 0400, dir, dev, &fops_tx_stats);
 	debugfs_create_file("dbdc", 0600, dir, dev, &fops_dbdc);
 	debugfs_create_file("fw_debug", 0600, dir, dev, &fops_fw_debug);
+	debugfs_create_file("implicit_txbf", 0600, dir, dev,
+			    &fops_implicit_txbf);
 	debugfs_create_u32("dfs_hw_pattern", 0400, dir, &dev->hw_pattern);
 	/* test knobs */
 	debugfs_create_file("radar_trigger", 0200, dir, dev,
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/init.c
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/mcu.c
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/mt7915.h
