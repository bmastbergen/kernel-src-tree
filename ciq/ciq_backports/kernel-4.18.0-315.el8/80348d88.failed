libbpf: Fix compatibility problem in xsk_socket__create

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Magnus Karlsson <magnus.karlsson@intel.com>
commit 80348d8867c65e2c64ca78d82326e889550a24b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/80348d88.failed

Fix a compatibility problem when the old XDP_SHARED_UMEM mode is used
together with the xsk_socket__create() call. In the old XDP_SHARED_UMEM
mode, only sharing of the same device and queue id was allowed, and
in this mode, the fill ring and completion ring were shared between
the AF_XDP sockets.

Therefore, it was perfectly fine to call the xsk_socket__create() API
for each socket and not use the new xsk_socket__create_shared() API.
This behavior was ruined by the commit introducing XDP_SHARED_UMEM
support between different devices and/or queue ids. This patch restores
the ability to use xsk_socket__create in these circumstances so that
backward compatibility is not broken.

Fixes: 2f6324a3937f ("libbpf: Support shared umems between queues and devices")
	Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/1602070946-11154-1-git-send-email-magnus.karlsson@gmail.com
(cherry picked from commit 80348d8867c65e2c64ca78d82326e889550a24b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/xsk.c
diff --cc tools/lib/bpf/xsk.c
index a9b02103767b,e3c98c007825..000000000000
--- a/tools/lib/bpf/xsk.c
+++ b/tools/lib/bpf/xsk.c
@@@ -623,16 -733,21 +623,32 @@@ int xsk_socket__create(struct xsk_socke
  		xsk->fd = umem->fd;
  	}
  
++<<<<<<< HEAD
 +	xsk->outstanding_tx = 0;
 +	xsk->queue_id = queue_id;
 +	xsk->umem = umem;
 +	xsk->ifindex = if_nametoindex(ifname);
 +	if (!xsk->ifindex) {
 +		err = -errno;
 +		goto out_socket;
++=======
+ 	ctx = xsk_get_ctx(umem, ifindex, queue_id);
+ 	if (!ctx) {
+ 		if (!fill || !comp) {
+ 			err = -EFAULT;
+ 			goto out_socket;
+ 		}
+ 
+ 		ctx = xsk_create_ctx(xsk, umem, ifindex, ifname, queue_id,
+ 				     fill, comp);
+ 		if (!ctx) {
+ 			err = -ENOMEM;
+ 			goto out_socket;
+ 		}
++>>>>>>> 80348d8867c6 (libbpf: Fix compatibility problem in xsk_socket__create)
  	}
 -	xsk->ctx = ctx;
 +	memcpy(xsk->ifname, ifname, IFNAMSIZ - 1);
 +	xsk->ifname[IFNAMSIZ - 1] = '\0';
  
  	if (rx) {
  		err = setsockopt(xsk->fd, SOL_XDP, XDP_RX_RING,
* Unmerged path tools/lib/bpf/xsk.c
