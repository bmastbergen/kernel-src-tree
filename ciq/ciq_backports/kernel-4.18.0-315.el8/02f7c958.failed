bpf: Make reference tracking generic

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenz Bauer <lmb@cloudflare.com>
commit 02f7c9585d1e2d5d76cac497bd5ced8ecf9d6f56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/02f7c958.failed

Instead of dealing with reg->ref_obj_id individually for every arg type that
needs it, rely on the fact that ref_obj_id is zero if the register is not
reference tracked.

	Signed-off-by: Lorenz Bauer <lmb@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20200921121227.255763-7-lmb@cloudflare.com
(cherry picked from commit 02f7c9585d1e2d5d76cac497bd5ced8ecf9d6f56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 7d8814dc0070,a4549b2656ad..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -4118,6 -4089,36 +4102,39 @@@ static int check_func_arg(struct bpf_ve
  		return -EFAULT;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (type == PTR_TO_BTF_ID) {
+ 		const u32 *btf_id = fn->arg_btf_id[arg];
+ 
+ 		if (!btf_id) {
+ 			verbose(env, "verifier internal error: missing BTF ID\n");
+ 			return -EFAULT;
+ 		}
+ 
+ 		if (!btf_struct_ids_match(&env->log, reg->off, reg->btf_id, *btf_id)) {
+ 			verbose(env, "R%d is of type %s but %s is expected\n",
+ 				regno, kernel_type_name(reg->btf_id), kernel_type_name(*btf_id));
+ 			return -EACCES;
+ 		}
+ 		if (!tnum_is_const(reg->var_off) || reg->var_off.value) {
+ 			verbose(env, "R%d is a pointer to in-kernel struct with non-zero offset\n",
+ 				regno);
+ 			return -EACCES;
+ 		}
+ 	}
+ 
+ 	if (reg->ref_obj_id) {
+ 		if (meta->ref_obj_id) {
+ 			verbose(env, "verifier internal error: more than one arg with ref_obj_id R%d %u %u\n",
+ 				regno, reg->ref_obj_id,
+ 				meta->ref_obj_id);
+ 			return -EFAULT;
+ 		}
+ 		meta->ref_obj_id = reg->ref_obj_id;
+ 	}
+ 
++>>>>>>> 02f7c9585d1e (bpf: Make reference tracking generic)
  	if (arg_type == ARG_CONST_MAP_PTR) {
  		/* bpf_map_xxx(map_ptr) call: remember that map_ptr */
  		meta->map_ptr = reg->map_ptr;
* Unmerged path kernel/bpf/verifier.c
