mm/error_inject: Fix allow_error_inject function signatures.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit 76cd61739fd107a7f7ec4c24a045e98d8ee150f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/76cd6173.failed

'static' and 'static noinline' function attributes make no guarantees that
gcc/clang won't optimize them. The compiler may decide to inline 'static'
function and in such case ALLOW_ERROR_INJECT becomes meaningless. The compiler
could have inlined __add_to_page_cache_locked() in one callsite and didn't
inline in another. In such case injecting errors into it would cause
unpredictable behavior. It's worse with 'static noinline' which won't be
inlined, but it still can be optimized. Like the compiler may decide to remove
one argument or constant propagate the value depending on the callsite.

To avoid such issues make sure that these functions are global noinline.

Fixes: af3b854492f3 ("mm/page_alloc.c: allow error injection")
Fixes: cfcbfb1382db ("mm/filemap.c: enable error injection at add_to_page_cache()")
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
Link: https://lore.kernel.org/bpf/20200827220114.69225-2-alexei.starovoitov@gmail.com
(cherry picked from commit 76cd61739fd107a7f7ec4c24a045e98d8ee150f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/filemap.c
diff --cc mm/filemap.c
index bddcedfed4c4,054d93a86f8a..000000000000
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@@ -840,10 -825,12 +840,17 @@@ void replace_page_cache_page(struct pag
  }
  EXPORT_SYMBOL_GPL(replace_page_cache_page);
  
++<<<<<<< HEAD
 +static int __add_to_page_cache_locked(struct page *page,
 +				      struct address_space *mapping,
 +				      pgoff_t offset, gfp_t gfp,
 +				      void **shadowp)
++=======
+ noinline int __add_to_page_cache_locked(struct page *page,
+ 					struct address_space *mapping,
+ 					pgoff_t offset, gfp_t gfp_mask,
+ 					void **shadowp)
++>>>>>>> 76cd61739fd1 (mm/error_inject: Fix allow_error_inject function signatures.)
  {
  	XA_STATE(xas, &mapping->i_pages, offset);
  	int huge = PageHuge(page);
* Unmerged path mm/filemap.c
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 186043bdd975..33b72f9b2ec4 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -3521,7 +3521,7 @@ static inline bool __should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)
 
 #endif /* CONFIG_FAIL_PAGE_ALLOC */
 
-static noinline bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)
+noinline bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)
 {
 	return __should_fail_alloc_page(gfp_mask, order);
 }
