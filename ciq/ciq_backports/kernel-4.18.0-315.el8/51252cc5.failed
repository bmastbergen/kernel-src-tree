mt76: move mt76_token_init in mt76_alloc_device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 51252cc56ec9aaac71445e849c75b40b17277d7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/51252cc5.failed

In order to remove duplicated code, move mt76_token_init in
mt76_alloc_device routine

	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit 51252cc56ec9aaac71445e849c75b40b17277d7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt76.h
#	drivers/net/wireless/mediatek/mt76/mt7615/pci_init.c
#	drivers/net/wireless/mediatek/mt76/mt7915/init.c
#	drivers/net/wireless/mediatek/mt76/mt7921/init.c
#	drivers/net/wireless/mediatek/mt76/tx.c
diff --cc drivers/net/wireless/mediatek/mt76/mt76.h
index 735923bb204f,36ede65919f8..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt76.h
+++ b/drivers/net/wireless/mediatek/mt76/mt76.h
@@@ -1153,4 -1217,40 +1153,43 @@@ s8 mt76_get_rate_power_limits(struct mt
  			      struct mt76_power_limits *dest,
  			      s8 target_power);
  
++<<<<<<< HEAD
++=======
+ struct mt76_txwi_cache *
+ mt76_token_release(struct mt76_dev *dev, int token, bool *wake);
+ int mt76_token_consume(struct mt76_dev *dev, struct mt76_txwi_cache **ptxwi);
+ void __mt76_set_tx_blocked(struct mt76_dev *dev, bool blocked);
+ 
+ static inline void mt76_set_tx_blocked(struct mt76_dev *dev, bool blocked)
+ {
+ 	spin_lock_bh(&dev->token_lock);
+ 	__mt76_set_tx_blocked(dev, blocked);
+ 	spin_unlock_bh(&dev->token_lock);
+ }
+ 
+ static inline int
+ mt76_token_get(struct mt76_dev *dev, struct mt76_txwi_cache **ptxwi)
+ {
+ 	int token;
+ 
+ 	spin_lock_bh(&dev->token_lock);
+ 	token = idr_alloc(&dev->token, *ptxwi, 0, dev->drv->token_size,
+ 			  GFP_ATOMIC);
+ 	spin_unlock_bh(&dev->token_lock);
+ 
+ 	return token;
+ }
+ 
+ static inline struct mt76_txwi_cache *
+ mt76_token_put(struct mt76_dev *dev, int token)
+ {
+ 	struct mt76_txwi_cache *txwi;
+ 
+ 	spin_lock_bh(&dev->token_lock);
+ 	txwi = idr_remove(&dev->token, token);
+ 	spin_unlock_bh(&dev->token_lock);
+ 
+ 	return txwi;
+ }
++>>>>>>> 51252cc56ec9 (mt76: move mt76_token_init in mt76_alloc_device)
  #endif
diff --cc drivers/net/wireless/mediatek/mt76/mt7615/pci_init.c
index 08d3dd375ce7,ec8ec1a2033f..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7615/pci_init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7615/pci_init.c
@@@ -40,9 -40,6 +40,12 @@@ static int mt7615_init_hardware(struct 
  	mt76_wr(dev, MT_INT_SOURCE_CSR, ~0);
  
  	INIT_WORK(&dev->mcu_work, mt7615_pci_init_work);
++<<<<<<< HEAD
 +	spin_lock_init(&dev->token_lock);
 +	idr_init(&dev->token);
 +
++=======
++>>>>>>> 51252cc56ec9 (mt76: move mt76_token_init in mt76_alloc_device)
  	ret = mt7615_eeprom_init(dev, addr);
  	if (ret < 0)
  		return ret;
diff --cc drivers/net/wireless/mediatek/mt76/mt7915/init.c
index 49c09d0d8906,822f3aa6bb8b..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7915/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7915/init.c
@@@ -267,6 -153,255 +267,257 @@@ mt7915_init_wiphy(struct ieee80211_hw *
  	ieee80211_hw_set(hw, WANT_MONITOR_VIF);
  
  	hw->max_tx_fragments = 4;
++<<<<<<< HEAD
++=======
+ 
+ 	if (phy->mt76->cap.has_2ghz)
+ 		phy->mt76->sband_2g.sband.ht_cap.cap |=
+ 			IEEE80211_HT_CAP_LDPC_CODING |
+ 			IEEE80211_HT_CAP_MAX_AMSDU;
+ 
+ 	if (phy->mt76->cap.has_5ghz) {
+ 		phy->mt76->sband_5g.sband.ht_cap.cap |=
+ 			IEEE80211_HT_CAP_LDPC_CODING |
+ 			IEEE80211_HT_CAP_MAX_AMSDU;
+ 		phy->mt76->sband_5g.sband.vht_cap.cap |=
+ 			IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_7991 |
+ 			IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MASK;
+ 	}
+ 
+ 	mt76_set_stream_caps(phy->mt76, true);
+ 	mt7915_set_stream_vht_txbf_caps(phy);
+ 	mt7915_set_stream_he_caps(phy);
+ }
+ 
+ static void
+ mt7915_mac_init_band(struct mt7915_dev *dev, u8 band)
+ {
+ 	u32 mask, set;
+ 
+ 	mt76_rmw_field(dev, MT_TMAC_CTCR0(band),
+ 		       MT_TMAC_CTCR0_INS_DDLMT_REFTIME, 0x3f);
+ 	mt76_set(dev, MT_TMAC_CTCR0(band),
+ 		 MT_TMAC_CTCR0_INS_DDLMT_VHT_SMPDU_EN |
+ 		 MT_TMAC_CTCR0_INS_DDLMT_EN);
+ 
+ 	mask = MT_MDP_RCFR0_MCU_RX_MGMT |
+ 	       MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR |
+ 	       MT_MDP_RCFR0_MCU_RX_CTL_BAR;
+ 	set = FIELD_PREP(MT_MDP_RCFR0_MCU_RX_MGMT, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_NON_BAR, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR0_MCU_RX_CTL_BAR, MT_MDP_TO_HIF);
+ 	mt76_rmw(dev, MT_MDP_BNRCFR0(band), mask, set);
+ 
+ 	mask = MT_MDP_RCFR1_MCU_RX_BYPASS |
+ 	       MT_MDP_RCFR1_RX_DROPPED_UCAST |
+ 	       MT_MDP_RCFR1_RX_DROPPED_MCAST;
+ 	set = FIELD_PREP(MT_MDP_RCFR1_MCU_RX_BYPASS, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_UCAST, MT_MDP_TO_HIF) |
+ 	      FIELD_PREP(MT_MDP_RCFR1_RX_DROPPED_MCAST, MT_MDP_TO_HIF);
+ 	mt76_rmw(dev, MT_MDP_BNRCFR1(band), mask, set);
+ 
+ 	mt76_set(dev, MT_WF_RMAC_MIB_TIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
+ 	mt76_set(dev, MT_WF_RMAC_MIB_AIRTIME0(band), MT_WF_RMAC_MIB_RXTIME_EN);
+ 
+ 	mt76_rmw_field(dev, MT_DMA_DCR0(band), MT_DMA_DCR0_MAX_RX_LEN, 1536);
+ 	/* disable rx rate report by default due to hw issues */
+ 	mt76_clear(dev, MT_DMA_DCR0(band), MT_DMA_DCR0_RXD_G5_EN);
+ }
+ 
+ static void mt7915_mac_init(struct mt7915_dev *dev)
+ {
+ 	int i;
+ 
+ 	mt76_rmw_field(dev, MT_MDP_DCR1, MT_MDP_DCR1_MAX_RX_LEN, 1536);
+ 	/* enable hardware de-agg */
+ 	mt76_set(dev, MT_MDP_DCR0, MT_MDP_DCR0_DAMSDU_EN);
+ 
+ 	for (i = 0; i < MT7915_WTBL_SIZE; i++)
+ 		mt7915_mac_wtbl_update(dev, i,
+ 				       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
+ 	for (i = 0; i < 2; i++)
+ 		mt7915_mac_init_band(dev, i);
+ }
+ 
+ static int mt7915_txbf_init(struct mt7915_dev *dev)
+ {
+ 	int ret;
+ 
+ 
+ 	if (dev->dbdc_support) {
+ 		ret = mt7915_mcu_set_txbf_module(dev);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* trigger sounding packets */
+ 	ret = mt7915_mcu_set_txbf_sounding(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* enable eBF */
+ 	return mt7915_mcu_set_txbf_type(dev);
+ }
+ 
+ static int mt7915_register_ext_phy(struct mt7915_dev *dev)
+ {
+ 	struct mt7915_phy *phy = mt7915_ext_phy(dev);
+ 	struct mt76_phy *mphy;
+ 	int ret;
+ 
+ 	if (!dev->dbdc_support)
+ 		return 0;
+ 
+ 	if (phy)
+ 		return 0;
+ 
+ 	mphy = mt76_alloc_phy(&dev->mt76, sizeof(*phy), &mt7915_ops);
+ 	if (!mphy)
+ 		return -ENOMEM;
+ 
+ 	phy = mphy->priv;
+ 	phy->dev = dev;
+ 	phy->mt76 = mphy;
+ 	mphy->chainmask = dev->chainmask & ~dev->mphy.chainmask;
+ 	mphy->antenna_mask = BIT(hweight8(mphy->chainmask)) - 1;
+ 
+ 	INIT_LIST_HEAD(&phy->stats_list);
+ 	INIT_DELAYED_WORK(&mphy->mac_work, mt7915_mac_work);
+ 
+ 	mt7915_eeprom_parse_band_config(phy);
+ 	mt7915_init_wiphy(mphy->hw);
+ 
+ 	memcpy(mphy->macaddr, dev->mt76.eeprom.data + MT_EE_MAC_ADDR2,
+ 	       ETH_ALEN);
+ 	mt76_eeprom_override(mphy);
+ 
+ 	ret = mt7915_init_tx_queues(phy, MT7915_TXQ_BAND1,
+ 				    MT7915_TX_RING_SIZE);
+ 	if (ret)
+ 		goto error;
+ 
+ 	ret = mt76_register_phy(mphy, true, mt7915_rates,
+ 				ARRAY_SIZE(mt7915_rates));
+ 	if (ret)
+ 		goto error;
+ 
+ 	return 0;
+ 
+ error:
+ 	ieee80211_free_hw(mphy->hw);
+ 	return ret;
+ }
+ 
+ static void mt7915_init_work(struct work_struct *work)
+ {
+ 	struct mt7915_dev *dev = container_of(work, struct mt7915_dev,
+ 				 init_work);
+ 
+ 	mt7915_mcu_set_eeprom(dev);
+ 	mt7915_mac_init(dev);
+ 	mt7915_init_txpower(dev, &dev->mphy.sband_2g.sband);
+ 	mt7915_init_txpower(dev, &dev->mphy.sband_5g.sband);
+ 	mt7915_txbf_init(dev);
+ }
+ 
+ static void mt7915_wfsys_reset(struct mt7915_dev *dev)
+ {
+ 	u32 val = MT_TOP_PWR_KEY | MT_TOP_PWR_SW_PWR_ON | MT_TOP_PWR_PWR_ON;
+ 
+ #define MT_MCU_DUMMY_RANDOM	GENMASK(15, 0)
+ #define MT_MCU_DUMMY_DEFAULT	GENMASK(31, 16)
+ 
+ 	mt76_wr(dev, MT_MCU_WFDMA0_DUMMY_CR, MT_MCU_DUMMY_RANDOM);
+ 
+ 	/* change to software control */
+ 	val |= MT_TOP_PWR_SW_RST;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* reset wfsys */
+ 	val &= ~MT_TOP_PWR_SW_RST;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* release wfsys then mcu re-excutes romcode */
+ 	val |= MT_TOP_PWR_SW_RST;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* switch to hw control */
+ 	val &= ~MT_TOP_PWR_SW_RST;
+ 	val |= MT_TOP_PWR_HW_CTRL;
+ 	mt76_wr(dev, MT_TOP_PWR_CTRL, val);
+ 
+ 	/* check whether mcu resets to default */
+ 	if (!mt76_poll_msec(dev, MT_MCU_WFDMA0_DUMMY_CR, MT_MCU_DUMMY_DEFAULT,
+ 			    MT_MCU_DUMMY_DEFAULT, 1000)) {
+ 		dev_err(dev->mt76.dev, "wifi subsystem reset failure\n");
+ 		return;
+ 	}
+ 
+ 	/* wfsys reset won't clear host registers */
+ 	mt76_clear(dev, MT_TOP_MISC, MT_TOP_MISC_FW_STATE);
+ 
+ 	msleep(100);
+ }
+ 
+ static int mt7915_init_hardware(struct mt7915_dev *dev)
+ {
+ 	int ret, idx;
+ 
+ 	mt76_wr(dev, MT_INT_SOURCE_CSR, ~0);
+ 
+ 	INIT_WORK(&dev->init_work, mt7915_init_work);
+ 	dev->dbdc_support = !!(mt76_rr(dev, MT_HW_BOUND) & BIT(5));
+ 
+ 	/* If MCU was already running, it is likely in a bad state */
+ 	if (mt76_get_field(dev, MT_TOP_MISC, MT_TOP_MISC_FW_STATE) >
+ 	    FW_STATE_FW_DOWNLOAD)
+ 		mt7915_wfsys_reset(dev);
+ 
+ 	ret = mt7915_dma_init(dev);
+ 	if (ret)
+ 		return ret;
+ 
+ 	set_bit(MT76_STATE_INITIALIZED, &dev->mphy.state);
+ 
+ 	/*
+ 	 * force firmware operation mode into normal state,
+ 	 * which should be set before firmware download stage.
+ 	 */
+ 	mt76_wr(dev, MT_SWDEF_MODE, MT_SWDEF_NORMAL_MODE);
+ 
+ 	ret = mt7915_mcu_init(dev);
+ 	if (ret) {
+ 		/* Reset and try again */
+ 		mt7915_wfsys_reset(dev);
+ 
+ 		ret = mt7915_mcu_init(dev);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	ret = mt7915_eeprom_init(dev);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 
+ 	if (dev->flash_mode) {
+ 		ret = mt7915_mcu_apply_group_cal(dev);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/* Beacon and mgmt frames should occupy wcid 0 */
+ 	idx = mt76_wcid_alloc(dev->mt76.wcid_mask, MT7915_WTBL_STA - 1);
+ 	if (idx)
+ 		return -ENOSPC;
+ 
+ 	dev->mt76.global_wcid.idx = idx;
+ 	dev->mt76.global_wcid.hw_key_idx = -1;
+ 	dev->mt76.global_wcid.tx_info |= MT_WCID_TX_INFO_SET;
+ 	rcu_assign_pointer(dev->mt76.wcid[idx], &dev->mt76.global_wcid);
+ 
+ 	return 0;
++>>>>>>> 51252cc56ec9 (mt76: move mt76_token_init in mt76_alloc_device)
  }
  
  void mt7915_set_stream_vht_txbf_caps(struct mt7915_phy *phy)
diff --cc drivers/net/wireless/mediatek/mt76/mt7921/init.c
index a1cf9d52fcea,fe28bf4050c4..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7921/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/init.c
@@@ -163,9 -170,6 +163,12 @@@ static int mt7921_init_hardware(struct 
  {
  	int ret, idx;
  
++<<<<<<< HEAD
 +	spin_lock_init(&dev->token_lock);
 +	idr_init(&dev->token);
 +
++=======
++>>>>>>> 51252cc56ec9 (mt76: move mt76_token_init in mt76_alloc_device)
  	ret = mt7921_dma_init(dev);
  	if (ret)
  		return ret;
diff --cc drivers/net/wireless/mediatek/mt76/tx.c
index a3689d8e2307,53ea8de82df0..000000000000
--- a/drivers/net/wireless/mediatek/mt76/tx.c
+++ b/drivers/net/wireless/mediatek/mt76/tx.c
@@@ -631,3 -648,64 +631,67 @@@ void mt76_queue_tx_complete(struct mt76
  	spin_unlock_bh(&q->lock);
  }
  EXPORT_SYMBOL_GPL(mt76_queue_tx_complete);
++<<<<<<< HEAD
++=======
+ 
+ void __mt76_set_tx_blocked(struct mt76_dev *dev, bool blocked)
+ {
+ 	struct mt76_phy *phy = &dev->phy, *phy2 = dev->phy2;
+ 	struct mt76_queue *q, *q2 = NULL;
+ 
+ 	q = phy->q_tx[0];
+ 	if (blocked == q->blocked)
+ 		return;
+ 
+ 	q->blocked = blocked;
+ 	if (phy2) {
+ 		q2 = phy2->q_tx[0];
+ 		q2->blocked = blocked;
+ 	}
+ 
+ 	if (!blocked)
+ 		mt76_worker_schedule(&dev->tx_worker);
+ }
+ EXPORT_SYMBOL_GPL(__mt76_set_tx_blocked);
+ 
+ int mt76_token_consume(struct mt76_dev *dev, struct mt76_txwi_cache **ptxwi)
+ {
+ 	int token;
+ 
+ 	spin_lock_bh(&dev->token_lock);
+ 
+ 	token = idr_alloc(&dev->token, *ptxwi, 0, dev->drv->token_size,
+ 			  GFP_ATOMIC);
+ 	if (token >= 0)
+ 		dev->token_count++;
+ 
+ 	if (dev->token_count >= dev->drv->token_size - MT76_TOKEN_FREE_THR)
+ 		__mt76_set_tx_blocked(dev, true);
+ 
+ 	spin_unlock_bh(&dev->token_lock);
+ 
+ 	return token;
+ }
+ EXPORT_SYMBOL_GPL(mt76_token_consume);
+ 
+ struct mt76_txwi_cache *
+ mt76_token_release(struct mt76_dev *dev, int token, bool *wake)
+ {
+ 	struct mt76_txwi_cache *txwi;
+ 
+ 	spin_lock_bh(&dev->token_lock);
+ 
+ 	txwi = idr_remove(&dev->token, token);
+ 	if (txwi)
+ 		dev->token_count--;
+ 
+ 	if (dev->token_count < dev->drv->token_size - MT76_TOKEN_FREE_THR &&
+ 	    dev->phy.q_tx[0]->blocked)
+ 		*wake = true;
+ 
+ 	spin_unlock_bh(&dev->token_lock);
+ 
+ 	return txwi;
+ }
+ EXPORT_SYMBOL_GPL(mt76_token_release);
++>>>>>>> 51252cc56ec9 (mt76: move mt76_token_init in mt76_alloc_device)
diff --git a/drivers/net/wireless/mediatek/mt76/mac80211.c b/drivers/net/wireless/mediatek/mt76/mac80211.c
index 29af1c0cb76f..796c917d129a 100644
--- a/drivers/net/wireless/mediatek/mt76/mac80211.c
+++ b/drivers/net/wireless/mediatek/mt76/mac80211.c
@@ -435,6 +435,9 @@ mt76_alloc_device(struct device *pdev, unsigned int size,
 	mutex_init(&dev->mcu.mutex);
 	dev->tx_worker.fn = mt76_tx_worker;
 
+	spin_lock_init(&dev->token_lock);
+	idr_init(&dev->token);
+
 	INIT_LIST_HEAD(&dev->txwi_cache);
 
 	for (i = 0; i < ARRAY_SIZE(dev->q_rx); i++)
* Unmerged path drivers/net/wireless/mediatek/mt76/mt76.h
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7615/pci_init.c
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7915/init.c
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7921/init.c
* Unmerged path drivers/net/wireless/mediatek/mt76/tx.c
