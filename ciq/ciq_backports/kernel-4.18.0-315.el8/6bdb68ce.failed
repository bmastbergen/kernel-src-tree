nl80211: add common API to configure SAR power limitations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Carl Huang <cjhuang@codeaurora.org>
commit 6bdb68cef7bf57cdb3f8d1498623556d6823ff3a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/6bdb68ce.failed

NL80211_CMD_SET_SAR_SPECS is added to configure SAR from
user space. NL80211_ATTR_SAR_SPEC is used to pass the SAR
power specification when used with NL80211_CMD_SET_SAR_SPECS.

Wireless driver needs to register SAR type, supported frequency
ranges to wiphy, so user space can query it. The index in
frequency range is used to specify which sub band the power
limitation applies to. The SAR type is for compatibility, so later
other SAR mechanism can be implemented without breaking the user
space SAR applications.

Normal process is user space queries the SAR capability, and
gets the index of supported frequency ranges and associates the
power limitation with this index and sends to kernel.

Here is an example of message send to kernel:
8c 00 00 00 08 00 01 00 00 00 00 00 38 00 2b 81
08 00 01 00 00 00 00 00 2c 00 02 80 14 00 00 80
08 00 02 00 00 00 00 00 08 00 01 00 38 00 00 00
14 00 01 80 08 00 02 00 01 00 00 00 08 00 01 00
48 00 00 00

NL80211_CMD_SET_SAR_SPECS:  0x8c
NL80211_ATTR_WIPHY:     0x01(phy idx is 0)
NL80211_ATTR_SAR_SPEC:  0x812b (NLA_NESTED)
NL80211_SAR_ATTR_TYPE:  0x00 (NL80211_SAR_TYPE_POWER)
NL80211_SAR_ATTR_SPECS: 0x8002 (NLA_NESTED)
freq range 0 power: 0x38 in 0.25dbm unit (14dbm)
freq range 1 power: 0x48 in 0.25dbm unit (18dbm)

	Signed-off-by: Carl Huang <cjhuang@codeaurora.org>
	Reviewed-by: Brian Norris <briannorris@chromium.org>
	Reviewed-by: Abhishek Kumar <kuabhs@chromium.org>
Link: https://lore.kernel.org/r/20201203103728.3034-2-cjhuang@codeaurora.org
[minor edits, NLA parse cleanups]
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 6bdb68cef7bf57cdb3f8d1498623556d6823ff3a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/nl80211.h
#	net/wireless/nl80211.c
diff --cc include/uapi/linux/nl80211.h
index dd7e80e66bfb,40832d13c2f1..000000000000
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@@ -2505,6 -2522,34 +2511,37 @@@ enum nl80211_commands 
   * @NL80211_ATTR_HE_6GHZ_CAPABILITY: HE 6 GHz Band Capability element (from
   *	association request when used with NL80211_CMD_NEW_STATION).
   *
++<<<<<<< HEAD
++=======
+  * @NL80211_ATTR_FILS_DISCOVERY: Optional parameter to configure FILS
+  *	discovery. It is a nested attribute, see
+  *	&enum nl80211_fils_discovery_attributes.
+  *
+  * @NL80211_ATTR_UNSOL_BCAST_PROBE_RESP: Optional parameter to configure
+  *	unsolicited broadcast probe response. It is a nested attribute, see
+  *	&enum nl80211_unsol_bcast_probe_resp_attributes.
+  *
+  * @NL80211_ATTR_S1G_CAPABILITY: S1G Capability information element (from
+  *	association request when used with NL80211_CMD_NEW_STATION)
+  * @NL80211_ATTR_S1G_CAPABILITY_MASK: S1G Capability Information element
+  *	override mask. Used with NL80211_ATTR_S1G_CAPABILITY in
+  *	NL80211_CMD_ASSOCIATE or NL80211_CMD_CONNECT.
+  *
+  * @NL80211_ATTR_SAE_PWE: Indicates the mechanism(s) allowed for SAE PWE
+  *	derivation in WPA3-Personal networks which are using SAE authentication.
+  *	This is a u8 attribute that encapsulates one of the values from
+  *	&enum nl80211_sae_pwe_mechanism.
+  *
+  * @NL80211_ATTR_SAR_SPEC: SAR power limitation specification when
+  *	used with %NL80211_CMD_SET_SAR_SPECS. The message contains fields
+  *	of %nl80211_sar_attrs which specifies the sar type and related
+  *	sar specs. Sar specs contains array of %nl80211_sar_specs_attrs.
+  *
+  * @NL80211_ATTR_RECONNECT_REQUESTED: flag attribute, used with deauth and
+  *	disassoc events to indicate that an immediate reconnect to the AP
+  *	is desired.
+  *
++>>>>>>> 6bdb68cef7bf (nl80211: add common API to configure SAR power limitations)
   * @NUM_NL80211_ATTR: total number of nl80211_attrs available
   * @NL80211_ATTR_MAX: highest attribute number currently defined
   * @__NL80211_ATTR_AFTER_LAST: internal use
@@@ -2987,6 -3032,19 +3024,22 @@@ enum nl80211_attrs 
  
  	NL80211_ATTR_HE_6GHZ_CAPABILITY,
  
++<<<<<<< HEAD
++=======
+ 	NL80211_ATTR_FILS_DISCOVERY,
+ 
+ 	NL80211_ATTR_UNSOL_BCAST_PROBE_RESP,
+ 
+ 	NL80211_ATTR_S1G_CAPABILITY,
+ 	NL80211_ATTR_S1G_CAPABILITY_MASK,
+ 
+ 	NL80211_ATTR_SAE_PWE,
+ 
+ 	NL80211_ATTR_RECONNECT_REQUESTED,
+ 
+ 	NL80211_ATTR_SAR_SPEC,
+ 
++>>>>>>> 6bdb68cef7bf (nl80211: add common API to configure SAR power limitations)
  	/* add attributes here, update the policy in nl80211.c */
  
  	__NL80211_ATTR_AFTER_LAST,
@@@ -7027,4 -7097,175 +7080,178 @@@ enum nl80211_iftype_akm_attributes 
  	NL80211_IFTYPE_AKM_ATTR_MAX = __NL80211_IFTYPE_AKM_ATTR_LAST - 1,
  };
  
++<<<<<<< HEAD
++=======
+ /**
+  * enum nl80211_fils_discovery_attributes - FILS discovery configuration
+  * from IEEE Std 802.11ai-2016, Annex C.3 MIB detail.
+  *
+  * @__NL80211_FILS_DISCOVERY_ATTR_INVALID: Invalid
+  *
+  * @NL80211_FILS_DISCOVERY_ATTR_INT_MIN: Minimum packet interval (u32, TU).
+  *	Allowed range: 0..10000 (TU = Time Unit)
+  * @NL80211_FILS_DISCOVERY_ATTR_INT_MAX: Maximum packet interval (u32, TU).
+  *	Allowed range: 0..10000 (TU = Time Unit)
+  * @NL80211_FILS_DISCOVERY_ATTR_TMPL: Template data for FILS discovery action
+  *	frame including the headers.
+  *
+  * @__NL80211_FILS_DISCOVERY_ATTR_LAST: Internal
+  * @NL80211_FILS_DISCOVERY_ATTR_MAX: highest attribute
+  */
+ enum nl80211_fils_discovery_attributes {
+ 	__NL80211_FILS_DISCOVERY_ATTR_INVALID,
+ 
+ 	NL80211_FILS_DISCOVERY_ATTR_INT_MIN,
+ 	NL80211_FILS_DISCOVERY_ATTR_INT_MAX,
+ 	NL80211_FILS_DISCOVERY_ATTR_TMPL,
+ 
+ 	/* keep last */
+ 	__NL80211_FILS_DISCOVERY_ATTR_LAST,
+ 	NL80211_FILS_DISCOVERY_ATTR_MAX = __NL80211_FILS_DISCOVERY_ATTR_LAST - 1
+ };
+ 
+ /*
+  * FILS discovery template minimum length with action frame headers and
+  * mandatory fields.
+  */
+ #define NL80211_FILS_DISCOVERY_TMPL_MIN_LEN 42
+ 
+ /**
+  * enum nl80211_unsol_bcast_probe_resp_attributes - Unsolicited broadcast probe
+  *	response configuration. Applicable only in 6GHz.
+  *
+  * @__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID: Invalid
+  *
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT: Maximum packet interval (u32, TU).
+  *	Allowed range: 0..20 (TU = Time Unit). IEEE P802.11ax/D6.0
+  *	26.17.2.3.2 (AP behavior for fast passive scanning).
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL: Unsolicited broadcast probe response
+  *	frame template (binary).
+  *
+  * @__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST: Internal
+  * @NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX: highest attribute
+  */
+ enum nl80211_unsol_bcast_probe_resp_attributes {
+ 	__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID,
+ 
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT,
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL,
+ 
+ 	/* keep last */
+ 	__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST,
+ 	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX =
+ 		__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST - 1
+ };
+ 
+ /**
+  * enum nl80211_sae_pwe_mechanism - The mechanism(s) allowed for SAE PWE
+  *	derivation. Applicable only when WPA3-Personal SAE authentication is
+  *	used.
+  *
+  * @NL80211_SAE_PWE_UNSPECIFIED: not specified, used internally to indicate that
+  *	attribute is not present from userspace.
+  * @NL80211_SAE_PWE_HUNT_AND_PECK: hunting-and-pecking loop only
+  * @NL80211_SAE_PWE_HASH_TO_ELEMENT: hash-to-element only
+  * @NL80211_SAE_PWE_BOTH: both hunting-and-pecking loop and hash-to-element
+  *	can be used.
+  */
+ enum nl80211_sae_pwe_mechanism {
+ 	NL80211_SAE_PWE_UNSPECIFIED,
+ 	NL80211_SAE_PWE_HUNT_AND_PECK,
+ 	NL80211_SAE_PWE_HASH_TO_ELEMENT,
+ 	NL80211_SAE_PWE_BOTH,
+ };
+ 
+ /**
+  * enum nl80211_sar_type - type of SAR specs
+  *
+  * @NL80211_SAR_TYPE_POWER: power limitation specified in 0.25dBm unit
+  *
+  */
+ enum nl80211_sar_type {
+ 	NL80211_SAR_TYPE_POWER,
+ 
+ 	/* add new type here */
+ 
+ 	/* Keep last */
+ 	NUM_NL80211_SAR_TYPE,
+ };
+ 
+ /**
+  * enum nl80211_sar_attrs - Attributes for SAR spec
+  *
+  * @NL80211_SAR_ATTR_TYPE: the SAR type as defined in &enum nl80211_sar_type.
+  *
+  * @NL80211_SAR_ATTR_SPECS: Nested array of SAR power
+  *	limit specifications. Each specification contains a set
+  *	of %nl80211_sar_specs_attrs.
+  *
+  *	For SET operation, it contains array of %NL80211_SAR_ATTR_SPECS_POWER
+  *	and %NL80211_SAR_ATTR_SPECS_RANGE_INDEX.
+  *
+  *	For sar_capa dump, it contains array of
+  *	%NL80211_SAR_ATTR_SPECS_START_FREQ
+  *	and %NL80211_SAR_ATTR_SPECS_END_FREQ.
+  *
+  * @__NL80211_SAR_ATTR_LAST: Internal
+  * @NL80211_SAR_ATTR_MAX: highest sar attribute
+  *
+  * These attributes are used with %NL80211_CMD_SET_SAR_SPEC
+  */
+ enum nl80211_sar_attrs {
+ 	__NL80211_SAR_ATTR_INVALID,
+ 
+ 	NL80211_SAR_ATTR_TYPE,
+ 	NL80211_SAR_ATTR_SPECS,
+ 
+ 	__NL80211_SAR_ATTR_LAST,
+ 	NL80211_SAR_ATTR_MAX = __NL80211_SAR_ATTR_LAST - 1,
+ };
+ 
+ /**
+  * enum nl80211_sar_specs_attrs - Attributes for SAR power limit specs
+  *
+  * @NL80211_SAR_ATTR_SPECS_POWER: Required (s32)value to specify the actual
+  *	power limit value in units of 0.25 dBm if type is
+  *	NL80211_SAR_TYPE_POWER. (i.e., a value of 44 represents 11 dBm).
+  *	0 means userspace doesn't have SAR limitation on this associated range.
+  *
+  * @NL80211_SAR_ATTR_SPECS_RANGE_INDEX: Required (u32) value to specify the
+  *	index of exported freq range table and the associated power limitation
+  *	is applied to this range.
+  *
+  *	Userspace isn't required to set all the ranges advertised by WLAN driver,
+  *	and userspace can skip some certain ranges. These skipped ranges don't
+  *	have SAR limitations, and they are same as setting the
+  *	%NL80211_SAR_ATTR_SPECS_POWER to any unreasonable high value because any
+  *	value higher than regulatory allowed value just means SAR power
+  *	limitation is removed, but it's required to set at least one range.
+  *	It's not allowed to set duplicated range in one SET operation.
+  *
+  *	Every SET operation overwrites previous SET operation.
+  *
+  * @NL80211_SAR_ATTR_SPECS_START_FREQ: Required (u32) value to specify the start
+  *	frequency of this range edge when registering SAR capability to wiphy.
+  *	It's not a channel center frequency. The unit is kHz.
+  *
+  * @NL80211_SAR_ATTR_SPECS_END_FREQ: Required (u32) value to specify the end
+  *	frequency of this range edge when registering SAR capability to wiphy.
+  *	It's not a channel center frequency. The unit is kHz.
+  *
+  * @__NL80211_SAR_ATTR_SPECS_LAST: Internal
+  * @NL80211_SAR_ATTR_SPECS_MAX: highest sar specs attribute
+  */
+ enum nl80211_sar_specs_attrs {
+ 	__NL80211_SAR_ATTR_SPECS_INVALID,
+ 
+ 	NL80211_SAR_ATTR_SPECS_POWER,
+ 	NL80211_SAR_ATTR_SPECS_RANGE_INDEX,
+ 	NL80211_SAR_ATTR_SPECS_START_FREQ,
+ 	NL80211_SAR_ATTR_SPECS_END_FREQ,
+ 
+ 	__NL80211_SAR_ATTR_SPECS_LAST,
+ 	NL80211_SAR_ATTR_SPECS_MAX = __NL80211_SAR_ATTR_SPECS_LAST - 1,
+ };
+ 
++>>>>>>> 6bdb68cef7bf (nl80211: add common API to configure SAR power limitations)
  #endif /* __LINUX_NL80211_H */
diff --cc net/wireless/nl80211.c
index 6ff26d687322,7db6079fab04..000000000000
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@@ -383,6 -383,34 +383,37 @@@ nl80211_tid_config_attr_policy[NL80211_
  			NLA_POLICY_NESTED(nl80211_txattr_policy),
  };
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy
+ nl80211_fils_discovery_policy[NL80211_FILS_DISCOVERY_ATTR_MAX + 1] = {
+ 	[NL80211_FILS_DISCOVERY_ATTR_INT_MIN] = NLA_POLICY_MAX(NLA_U32, 10000),
+ 	[NL80211_FILS_DISCOVERY_ATTR_INT_MAX] = NLA_POLICY_MAX(NLA_U32, 10000),
+ 	NLA_POLICY_RANGE(NLA_BINARY,
+ 			 NL80211_FILS_DISCOVERY_TMPL_MIN_LEN,
+ 			 IEEE80211_MAX_DATA_LEN),
+ };
+ 
+ static const struct nla_policy
+ nl80211_unsol_bcast_probe_resp_policy[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX + 1] = {
+ 	[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT] = NLA_POLICY_MAX(NLA_U32, 20),
+ 	[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL] = { .type = NLA_BINARY,
+ 						       .len = IEEE80211_MAX_DATA_LEN }
+ };
+ 
+ static const struct nla_policy
+ sar_specs_policy[NL80211_SAR_ATTR_SPECS_MAX + 1] = {
+ 	[NL80211_SAR_ATTR_SPECS_POWER] = { .type = NLA_S32 },
+ 	[NL80211_SAR_ATTR_SPECS_RANGE_INDEX] = {.type = NLA_U32 },
+ };
+ 
+ static const struct nla_policy
+ sar_policy[NL80211_SAR_ATTR_MAX + 1] = {
+ 	[NL80211_SAR_ATTR_TYPE] = NLA_POLICY_MAX(NLA_U32, NUM_NL80211_SAR_TYPE),
+ 	[NL80211_SAR_ATTR_SPECS] = NLA_POLICY_NESTED_ARRAY(sar_specs_policy),
+ };
+ 
++>>>>>>> 6bdb68cef7bf (nl80211: add common API to configure SAR power limitations)
  static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
  	[0] = { .strict_start_type = NL80211_ATTR_HE_OBSS_PD },
  	[NL80211_ATTR_WIPHY] = { .type = NLA_U32 },
@@@ -689,10 -717,21 +720,28 @@@
  	[NL80211_ATTR_RECEIVE_MULTICAST] = { .type = NLA_FLAG },
  	[NL80211_ATTR_WIPHY_FREQ_OFFSET] = NLA_POLICY_RANGE(NLA_U32, 0, 999),
  	[NL80211_ATTR_SCAN_FREQ_KHZ] = { .type = NLA_NESTED },
++<<<<<<< HEAD
 +	[NL80211_ATTR_HE_6GHZ_CAPABILITY] = {
 +		.type = NLA_EXACT_LEN,
 +		.len = sizeof(struct ieee80211_he_6ghz_capa),
 +	},
++=======
+ 	[NL80211_ATTR_HE_6GHZ_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(sizeof(struct ieee80211_he_6ghz_capa)),
+ 	[NL80211_ATTR_FILS_DISCOVERY] =
+ 		NLA_POLICY_NESTED(nl80211_fils_discovery_policy),
+ 	[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP] =
+ 		NLA_POLICY_NESTED(nl80211_unsol_bcast_probe_resp_policy),
+ 	[NL80211_ATTR_S1G_CAPABILITY] =
+ 		NLA_POLICY_EXACT_LEN(IEEE80211_S1G_CAPABILITY_LEN),
+ 	[NL80211_ATTR_S1G_CAPABILITY_MASK] =
+ 		NLA_POLICY_EXACT_LEN(IEEE80211_S1G_CAPABILITY_LEN),
+ 	[NL80211_ATTR_SAE_PWE] =
+ 		NLA_POLICY_RANGE(NLA_U8, NL80211_SAE_PWE_HUNT_AND_PECK,
+ 				 NL80211_SAE_PWE_BOTH),
+ 	[NL80211_ATTR_RECONNECT_REQUESTED] = { .type = NLA_REJECT },
+ 	[NL80211_ATTR_SAR_SPEC] = NLA_POLICY_NESTED(sar_policy),
++>>>>>>> 6bdb68cef7bf (nl80211: add common API to configure SAR power limitations)
  };
  
  /* policy for the key attributes */
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index c155b0a486b6..dbe9a8348850 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1678,6 +1678,54 @@ struct station_info {
 	u8 connected_to_as;
 };
 
+/**
+ * struct cfg80211_sar_sub_specs - sub specs limit
+ * @power: power limitation in 0.25dbm
+ * @freq_range_index: index the power limitation applies to
+ */
+struct cfg80211_sar_sub_specs {
+	s32 power;
+	u32 freq_range_index;
+};
+
+/**
+ * struct cfg80211_sar_specs - sar limit specs
+ * @type: it's set with power in 0.25dbm or other types
+ * @num_sub_specs: number of sar sub specs
+ * @sub_specs: memory to hold the sar sub specs
+ */
+struct cfg80211_sar_specs {
+	enum nl80211_sar_type type;
+	u32 num_sub_specs;
+	struct cfg80211_sar_sub_specs sub_specs[];
+};
+
+
+/**
+ * @struct cfg80211_sar_chan_ranges - sar frequency ranges
+ * @start_freq:  start range edge frequency
+ * @end_freq:    end range edge frequency
+ */
+struct cfg80211_sar_freq_ranges {
+	u32 start_freq;
+	u32 end_freq;
+};
+
+/**
+ * struct cfg80211_sar_capa - sar limit capability
+ * @type: it's set via power in 0.25dbm or other types
+ * @num_freq_ranges: number of frequency ranges
+ * @freq_ranges: memory to hold the freq ranges.
+ *
+ * Note: WLAN driver may append new ranges or split an existing
+ * range to small ones and then append them.
+ */
+struct cfg80211_sar_capa {
+	enum nl80211_sar_type type;
+	u32 num_freq_ranges;
+	const struct cfg80211_sar_freq_ranges *freq_ranges;
+};
+
 #if IS_ENABLED(CONFIG_CFG80211)
 /**
  * cfg80211_get_station - retrieve information about a given station
@@ -4192,6 +4240,8 @@ struct cfg80211_ops {
 				  struct cfg80211_tid_config *tid_conf);
 	int	(*reset_tid_config)(struct wiphy *wiphy, struct net_device *dev,
 				    const u8 *peer, u8 tids);
+	int	(*set_sar_specs)(struct wiphy *wiphy,
+				 struct cfg80211_sar_specs *sar);
 };
 
 /*
@@ -4960,6 +5010,8 @@ struct wiphy {
 
 	u8 max_data_retry_count;
 
+	const struct cfg80211_sar_capa *sar_capa;
+
 	char priv[] __aligned(NETDEV_ALIGN);
 };
 
* Unmerged path include/uapi/linux/nl80211.h
* Unmerged path net/wireless/nl80211.c
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index 5e2f349c92a8..8b1358d04ca2 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -1346,4 +1346,16 @@ static inline int rdev_reset_tid_config(struct cfg80211_registered_device *rdev,
 	return ret;
 }
 
+static inline int rdev_set_sar_specs(struct cfg80211_registered_device *rdev,
+				     struct cfg80211_sar_specs *sar)
+{
+	int ret;
+
+	trace_rdev_set_sar_specs(&rdev->wiphy, sar);
+	ret = rdev->ops->set_sar_specs(&rdev->wiphy, sar);
+	trace_rdev_return_int(&rdev->wiphy, ret);
+
+	return ret;
+}
+
 #endif /* __CFG80211_RDEV_OPS */
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index 7b81c9e85e66..55b45b13199e 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -3542,6 +3542,25 @@ TRACE_EVENT(rdev_reset_tid_config,
 	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", peer: " MAC_PR_FMT ", tids: 0x%x",
 		  WIPHY_PR_ARG, NETDEV_PR_ARG, MAC_PR_ARG(peer), __entry->tids)
 );
+
+TRACE_EVENT(rdev_set_sar_specs,
+	TP_PROTO(struct wiphy *wiphy, struct cfg80211_sar_specs *sar),
+	TP_ARGS(wiphy, sar),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		__field(u16, type)
+		__field(u16, num)
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		__entry->type = sar->type;
+		__entry->num = sar->num_sub_specs;
+
+	),
+	TP_printk(WIPHY_PR_FMT ", Set type:%d, num_specs:%d",
+		  WIPHY_PR_ARG, __entry->type, __entry->num)
+);
+
 #endif /* !__RDEV_OPS_TRACE || TRACE_HEADER_MULTI_READ */
 
 #undef TRACE_INCLUDE_PATH
