libbpf: Normalize and improve logging across few functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 9c0f8cbdc0e9cf8a2a3a96045778b8d759f172c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/9c0f8cbd.failed

Make libbpf logs follow similar pattern and provide more context like section
name or program name, where appropriate. Also, add BPF_INSN_SZ constant and
use it throughout to clean up code a little bit. This commit doesn't have any
functional changes and just removes some code changes out of the way before
bigger refactoring in libbpf internals.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200820231250.1293069-6-andriin@fb.com
(cherry picked from commit 9c0f8cbdc0e9cf8a2a3a96045778b8d759f172c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index e8a159519d3d,fb7b8fb1d3fa..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -3289,25 -3395,24 +3304,35 @@@ bpf_program__collect_reloc(struct bpf_p
  			return -LIBBPF_ERRNO__FORMAT;
  		}
  		if (!gelf_getsym(symbols, GELF_R_SYM(rel.r_info), &sym)) {
++<<<<<<< HEAD
 +			pr_warn("relocation: symbol %"PRIx64" not found\n",
 +				GELF_R_SYM(rel.r_info));
++=======
+ 			pr_warn("sec '%s': symbol 0x%zx not found for relo #%d\n",
+ 				relo_sec_name, (size_t)GELF_R_SYM(rel.r_info), i);
++>>>>>>> 9c0f8cbdc0e9 (libbpf: Normalize and improve logging across few functions)
  			return -LIBBPF_ERRNO__FORMAT;
  		}
- 		if (rel.r_offset % sizeof(struct bpf_insn))
+ 		if (rel.r_offset % BPF_INSN_SZ) {
+ 			pr_warn("sec '%s': invalid offset 0x%zx for relo #%d\n",
+ 				relo_sec_name, (size_t)GELF_R_SYM(rel.r_info), i);
  			return -LIBBPF_ERRNO__FORMAT;
+ 		}
  
++<<<<<<< HEAD
 +		insn_idx = rel.r_offset / sizeof(struct bpf_insn);
 +		name = elf_strptr(obj->efile.elf, obj->efile.strtabidx,
 +				  sym.st_name) ? : "<?>";
++=======
+ 		insn_idx = rel.r_offset / BPF_INSN_SZ;
+ 		sym_name = elf_sym_str(obj, sym.st_name) ?: "<?>";
++>>>>>>> 9c0f8cbdc0e9 (libbpf: Normalize and improve logging across few functions)
  
- 		pr_debug("relo for shdr %u, symb %zu, value %zu, type %d, bind %d, name %d (\'%s\'), insn %u\n",
- 			 (__u32)sym.st_shndx, (size_t)GELF_R_SYM(rel.r_info),
- 			 (size_t)sym.st_value, GELF_ST_TYPE(sym.st_info),
- 			 GELF_ST_BIND(sym.st_info), sym.st_name, name,
- 			 insn_idx);
+ 		pr_debug("sec '%s': relo #%d: insn #%u against '%s'\n",
+ 			 relo_sec_name, i, insn_idx, sym_name);
  
  		err = bpf_program__record_reloc(prog, &prog->reloc_desc[i],
- 						insn_idx, name, &sym, &rel);
+ 						insn_idx, sym_name, &sym, &rel);
  		if (err)
  			return err;
  	}
@@@ -7253,9 -7358,9 +7280,9 @@@ int bpf_program__fd(const struct bpf_pr
  	return bpf_program__nth_fd(prog, 0);
  }
  
 -size_t bpf_program__size(const struct bpf_program *prog)
 +size_t bpf_program__size_v0_0_4(const struct bpf_program *prog)
  {
- 	return prog->insns_cnt * sizeof(struct bpf_insn);
+ 	return prog->insns_cnt * BPF_INSN_SZ;
  }
  
  int bpf_program__set_prep(struct bpf_program *prog, int nr_instances,
* Unmerged path tools/lib/bpf/libbpf.c
