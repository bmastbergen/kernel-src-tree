md: add md_submit_discard_bio() for submitting discard bio

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Xiao Ni <xni@redhat.com>
commit 2628089b74d5a64bd0bcb5d247a18f78d7b6f4d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/2628089b.failed

Move these logic from raid0.c to md.c, so that we can also use it in
raid10.c.

	Reviewed-by: Coly Li <colyli@suse.de>
	Reviewed-by: Guoqing Jiang <guoqing.jiang@cloud.ionos.com>
	Signed-off-by: Xiao Ni <xni@redhat.com>
	Signed-off-by: Song Liu <songliubraving@fb.com>
(cherry picked from commit 2628089b74d5a64bd0bcb5d247a18f78d7b6f4d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid0.c
diff --cc drivers/md/raid0.c
index 0b088168c90c,e2de0cced707..000000000000
--- a/drivers/md/raid0.c
+++ b/drivers/md/raid0.c
@@@ -522,18 -516,9 +521,22 @@@ static void raid0_handle_discard(struc
  
  		rdev = conf->devlist[(zone - conf->strip_zone) *
  			conf->strip_zone[0].nb_dev + disk];
- 		if (__blkdev_issue_discard(rdev->bdev,
+ 		md_submit_discard_bio(mddev, rdev, bio,
  			dev_start + zone->dev_start + rdev->data_offset,
++<<<<<<< HEAD
 +			dev_end - dev_start, GFP_NOIO, 0, &discard_bio) ||
 +		    !discard_bio)
 +			continue;
 +		bio_chain(discard_bio, bio);
 +		bio_clone_blkg_association(discard_bio, bio);
 +		if (mddev->gendisk)
 +			trace_block_bio_remap(bdev_get_queue(rdev->bdev),
 +				discard_bio, disk_devt(mddev->gendisk),
 +				bio->bi_iter.bi_sector);
 +		generic_make_request(discard_bio);
++=======
+ 			dev_end - dev_start);
++>>>>>>> 2628089b74d5 (md: add md_submit_discard_bio() for submitting discard bio)
  	}
  	bio_endio(bio);
  }
diff --git a/drivers/md/md.c b/drivers/md/md.c
index 8d9d1e36dc69..2862d3bbf9ba 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -8614,6 +8614,26 @@ void md_write_end(struct mddev *mddev)
 
 EXPORT_SYMBOL(md_write_end);
 
+/* This is used by raid0 and raid10 */
+void md_submit_discard_bio(struct mddev *mddev, struct md_rdev *rdev,
+			struct bio *bio, sector_t start, sector_t size)
+{
+	struct bio *discard_bio = NULL;
+
+	if (__blkdev_issue_discard(rdev->bdev, start, size,
+		GFP_NOIO, 0, &discard_bio) || !discard_bio)
+		return;
+
+	bio_chain(discard_bio, bio);
+	bio_clone_blkg_association(discard_bio, bio);
+	if (mddev->gendisk)
+		trace_block_bio_remap(bdev_get_queue(rdev->bdev),
+			discard_bio, disk_devt(mddev->gendisk),
+			bio->bi_iter.bi_sector);
+	submit_bio_noacct(discard_bio);
+}
+EXPORT_SYMBOL(md_submit_discard_bio);
+
 /* md_allow_write(mddev)
  * Calling this ensures that the array is marked 'active' so that writes
  * may proceed without blocking.  It is important to call this before
diff --git a/drivers/md/md.h b/drivers/md/md.h
index 4920ff4aceff..7afc47054ce7 100644
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@ -722,6 +722,8 @@ extern void md_write_end(struct mddev *mddev);
 extern void md_done_sync(struct mddev *mddev, int blocks, int ok);
 extern void md_error(struct mddev *mddev, struct md_rdev *rdev);
 extern void md_finish_reshape(struct mddev *mddev);
+extern void md_submit_discard_bio(struct mddev *mddev, struct md_rdev *rdev,
+			struct bio *bio, sector_t start, sector_t size);
 
 extern int mddev_congested(struct mddev *mddev, int bits);
 extern bool __must_check md_flush_request(struct mddev *mddev, struct bio *bio);
* Unmerged path drivers/md/raid0.c
