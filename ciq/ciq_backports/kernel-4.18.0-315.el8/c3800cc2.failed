mt76: mt7615: check mcu returned values in mt7615_ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-315.el8
commit-author Ryder Lee <ryder.lee@mediatek.com>
commit c3800cc2919721640021c00e5845c32c2e7ad24d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-315.el8/c3800cc2.failed

Properly check returned values from mcu utility routines in
mt7615_ops.

	Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
(cherry picked from commit c3800cc2919721640021c00e5845c32c2e7ad24d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/mediatek/mt76/mt7615/main.c
diff --cc drivers/net/wireless/mediatek/mt76/mt7615/main.c
index f8409002c8b6,4caf2b6b39b1..000000000000
--- a/drivers/net/wireless/mediatek/mt76/mt7615/main.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7615/main.c
@@@ -54,19 -39,38 +55,53 @@@ static int mt7615_start(struct ieee8021
  	running = mt7615_dev_running(dev);
  
  	if (!running) {
++<<<<<<< HEAD
 +		mt7615_mcu_set_pm(dev, 0, 0);
 +		mt7615_mcu_set_mac_enable(dev, 0, true);
++=======
+ 		ret = mt7615_mcu_set_pm(dev, 0, 0);
+ 		if (ret)
+ 			goto out;
+ 
+ 		ret = mt76_connac_mcu_set_mac_enable(&dev->mt76, 0, true, false);
+ 		if (ret)
+ 			goto out;
+ 
++>>>>>>> c3800cc29197 (mt76: mt7615: check mcu returned values in mt7615_ops)
  		mt7615_mac_enable_nf(dev, 0);
  	}
  
  	if (phy != &dev->phy) {
++<<<<<<< HEAD
 +		mt7615_mcu_set_pm(dev, 1, 0);
 +		mt7615_mcu_set_mac_enable(dev, 1, true);
 +		mt7615_mac_enable_nf(dev, 1);
 +	}
 +
 +	mt7615_mcu_set_channel_domain(phy);
 +	mt7615_mcu_set_chan_info(phy, MCU_EXT_CMD_SET_RX_PATH);
++=======
+ 		ret = mt7615_mcu_set_pm(dev, 1, 0);
+ 		if (ret)
+ 			goto out;
+ 
+ 		ret = mt76_connac_mcu_set_mac_enable(&dev->mt76, 1, true, false);
+ 		if (ret)
+ 			goto out;
+ 
+ 		mt7615_mac_enable_nf(dev, 1);
+ 	}
+ 
+ 	if (mt7615_firmware_offload(dev)) {
+ 		ret = mt76_connac_mcu_set_channel_domain(phy->mt76);
+ 		if (ret)
+ 			goto out;
+ 	}
+ 
+ 	ret = mt7615_mcu_set_chan_info(phy, MCU_EXT_CMD_SET_RX_PATH);
+ 	if (ret)
+ 		goto out;
++>>>>>>> c3800cc29197 (mt76: mt7615: check mcu returned values in mt7615_ops)
  
  	set_bit(MT76_STATE_RUNNING, &phy->mt76->state);
  
@@@ -198,22 -203,24 +234,24 @@@ static int mt7615_add_interface(struct 
  		ret = -ENOSPC;
  		goto out;
  	}
 -	mvif->mt76.omac_idx = idx;
 +	mvif->omac_idx = idx;
  
 -	mvif->mt76.band_idx = ext_phy;
 +	mvif->band_idx = ext_phy;
  	if (mt7615_ext_phy(dev))
 -		mvif->mt76.wmm_idx = ext_phy * (MT7615_MAX_WMM_SETS / 2) +
 -				mvif->mt76.idx % (MT7615_MAX_WMM_SETS / 2);
 +		mvif->wmm_idx = ext_phy * (MT7615_MAX_WMM_SETS / 2) +
 +				mvif->idx % (MT7615_MAX_WMM_SETS / 2);
  	else
 -		mvif->mt76.wmm_idx = mvif->mt76.idx % MT7615_MAX_WMM_SETS;
 +		mvif->wmm_idx = mvif->idx % MT7615_MAX_WMM_SETS;
  
 -	dev->mt76.vif_mask |= BIT(mvif->mt76.idx);
 -	dev->omac_mask |= BIT_ULL(mvif->mt76.omac_idx);
 -	phy->omac_mask |= BIT_ULL(mvif->mt76.omac_idx);
 +	dev->mphy.vif_mask |= BIT(mvif->idx);
 +	dev->omac_mask |= BIT_ULL(mvif->omac_idx);
 +	phy->omac_mask |= BIT_ULL(mvif->omac_idx);
  
- 	mt7615_mcu_set_dbdc(dev);
+ 	ret = mt7615_mcu_set_dbdc(dev);
+ 	if (ret)
+ 		goto out;
  
 -	idx = MT7615_WTBL_RESERVED - mvif->mt76.idx;
 +	idx = MT7615_WTBL_RESERVED - mvif->idx;
  
  	INIT_LIST_HEAD(&mvif->sta.poll_list);
  	mvif->sta.wcid.idx = idx;
@@@ -320,8 -332,13 +363,17 @@@ int mt7615_set_channel(struct mt7615_ph
  
  	mt7615_mac_set_timing(phy);
  	ret = mt7615_dfs_init_radar_detector(phy);
+ 	if (ret)
+ 		goto out;
+ 
  	mt7615_mac_cca_stats_reset(phy);
++<<<<<<< HEAD
 +	mt7615_mcu_set_sku_en(phy, !mt76_testmode_enabled(&dev->mt76));
++=======
+ 	ret = mt7615_mcu_set_sku_en(phy, true);
+ 	if (ret)
+ 		goto out;
++>>>>>>> c3800cc29197 (mt76: mt7615: check mcu returned values in mt7615_ops)
  
  	mt7615_mac_reset_counters(dev);
  	phy->noise = 0;
@@@ -599,18 -619,20 +651,31 @@@ int mt7615_mac_sta_add(struct mt76_dev 
  		return err;
  
  	if (vif->type == NL80211_IFTYPE_STATION && !sta->tdls) {
++<<<<<<< HEAD
 +		struct mt7615_phy *phy;
 +
 +		phy = mvif->band_idx ? mt7615_ext_phy(dev) : &dev->phy;
 +		mt7615_mcu_add_bss_info(phy, vif, sta, true);
 +	}
 +	mt7615_mac_wtbl_update(dev, idx,
 +			       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
 +	mt7615_mcu_sta_add(dev, vif, sta, true);
++=======
+ 		err = mt7615_mcu_add_bss_info(phy, vif, sta, true);
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	mt7615_mac_wtbl_update(dev, idx,
+ 			       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
+ 	err = mt7615_mcu_sta_add(&dev->phy, vif, sta, true);
+ 	if (err)
+ 		return err;
++>>>>>>> c3800cc29197 (mt76: mt7615: check mcu returned values in mt7615_ops)
  
 -	mt76_connac_power_save_sched(phy->mt76, &dev->pm);
 +	mt7615_pm_power_save_sched(dev);
  
- 	return 0;
+ 	return err;
  }
  EXPORT_SYMBOL_GPL(mt7615_mac_sta_add);
  
@@@ -740,12 -752,13 +805,19 @@@ static int mt7615_set_rts_threshold(str
  {
  	struct mt7615_dev *dev = mt7615_hw_dev(hw);
  	struct mt7615_phy *phy = mt7615_hw_phy(hw);
++<<<<<<< HEAD
 +
 +	mt7615_mutex_acquire(dev);
 +	mt7615_mcu_set_rts_thresh(phy, val);
++=======
+ 	int err, band = phy != &dev->phy;
+ 
+ 	mt7615_mutex_acquire(dev);
+ 	err = mt76_connac_mcu_set_rts_thresh(&dev->mt76, val, band);
++>>>>>>> c3800cc29197 (mt76: mt7615: check mcu returned values in mt7615_ops)
  	mt7615_mutex_release(dev);
  
- 	return 0;
+ 	return err;
  }
  
  static int
@@@ -1113,12 -1137,28 +1186,12 @@@ static int mt7615_cancel_remain_on_chan
  	cancel_work_sync(&phy->roc_work);
  
  	mt7615_mutex_acquire(phy->dev);
- 	mt7615_mcu_set_roc(phy, vif, NULL, 0);
+ 	err = mt7615_mcu_set_roc(phy, vif, NULL, 0);
  	mt7615_mutex_release(phy->dev);
  
- 	return 0;
+ 	return err;
  }
  
 -static void mt7615_sta_set_decap_offload(struct ieee80211_hw *hw,
 -				 struct ieee80211_vif *vif,
 -				 struct ieee80211_sta *sta,
 -				 bool enabled)
 -{
 -	struct mt7615_dev *dev = mt7615_hw_dev(hw);
 -	struct mt7615_sta *msta = (struct mt7615_sta *)sta->drv_priv;
 -
 -	if (enabled)
 -		set_bit(MT_WCID_FLAG_HDR_TRANS, &msta->wcid.flags);
 -	else
 -		clear_bit(MT_WCID_FLAG_HDR_TRANS, &msta->wcid.flags);
 -
 -	mt7615_mcu_sta_update_hdr_trans(dev, vif, sta);
 -}
 -
  #ifdef CONFIG_PM
  static int mt7615_suspend(struct ieee80211_hw *hw,
  			  struct cfg80211_wowlan *wowlan)
* Unmerged path drivers/net/wireless/mediatek/mt76/mt7615/main.c
