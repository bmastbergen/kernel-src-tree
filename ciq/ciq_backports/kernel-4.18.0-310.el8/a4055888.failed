mm/memcg: warning on !memcg after readahead page charged

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Alex Shi <alex.shi@linux.alibaba.com>
commit a4055888629bc0467d12d912cd7c90acdf3d9b12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/a4055888.failed

Add VM_WARN_ON_ONCE_PAGE() macro.

Since readahead page is charged on memcg too, in theory we don't have to
check this exception now.  Before safely remove them all, add a warning
for the unexpected !memcg.

Link: https://lkml.kernel.org/r/1604283436-18880-3-git-send-email-alex.shi@linux.alibaba.com
	Signed-off-by: Alex Shi <alex.shi@linux.alibaba.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Acked-by: Hugh Dickins <hughd@google.com>
	Acked-by: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a4055888629bc0467d12d912cd7c90acdf3d9b12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memcontrol.c
diff --cc mm/memcontrol.c
index 4d65b541b4a3,7b9766789a27..000000000000
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@@ -1333,11 -1361,8 +1333,16 @@@ struct lruvec *mem_cgroup_page_lruvec(s
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	memcg = page->mem_cgroup;
 +	/*
 +	 * Swapcache readahead pages are added to the LRU - and
 +	 * possibly migrated - before they are charged.
 +	 */
++=======
+ 	memcg = page_memcg(page);
+ 	VM_WARN_ON_ONCE_PAGE(!memcg, page);
++>>>>>>> a4055888629b (mm/memcg: warning on !memcg after readahead page charged)
  	if (!memcg)
  		memcg = root_mem_cgroup;
  
@@@ -6951,10 -6980,11 +6956,15 @@@ void mem_cgroup_migrate(struct page *ol
  		return;
  
  	/* Page cache replacement: new page already charged? */
 -	if (page_memcg(newpage))
 +	if (newpage->mem_cgroup)
  		return;
  
++<<<<<<< HEAD
 +	memcg = oldpage->mem_cgroup;
++=======
+ 	memcg = page_memcg(oldpage);
+ 	VM_WARN_ON_ONCE_PAGE(!memcg, oldpage);
++>>>>>>> a4055888629b (mm/memcg: warning on !memcg after readahead page charged)
  	if (!memcg)
  		return;
  
@@@ -7162,9 -7182,9 +7172,9 @@@ void mem_cgroup_swapout(struct page *pa
  	if (cgroup_subsys_on_dfl(memory_cgrp_subsys))
  		return;
  
 -	memcg = page_memcg(page);
 +	memcg = page->mem_cgroup;
  
- 	/* Readahead page, never charged */
+ 	VM_WARN_ON_ONCE_PAGE(!memcg, page);
  	if (!memcg)
  		return;
  
@@@ -7229,9 -7249,9 +7239,9 @@@ int mem_cgroup_try_charge_swap(struct p
  	if (!cgroup_subsys_on_dfl(memory_cgrp_subsys))
  		return 0;
  
 -	memcg = page_memcg(page);
 +	memcg = page->mem_cgroup;
  
- 	/* Readahead page, never charged */
+ 	VM_WARN_ON_ONCE_PAGE(!memcg, page);
  	if (!memcg)
  		return 0;
  
diff --git a/include/linux/mmdebug.h b/include/linux/mmdebug.h
index 2ad72d2c8cc5..5d0767cb424a 100644
--- a/include/linux/mmdebug.h
+++ b/include/linux/mmdebug.h
@@ -37,6 +37,18 @@ void dump_mm(const struct mm_struct *mm);
 			BUG();						\
 		}							\
 	} while (0)
+#define VM_WARN_ON_ONCE_PAGE(cond, page)	({			\
+	static bool __section(".data.once") __warned;			\
+	int __ret_warn_once = !!(cond);					\
+									\
+	if (unlikely(__ret_warn_once && !__warned)) {			\
+		dump_page(page, "VM_WARN_ON_ONCE_PAGE(" __stringify(cond)")");\
+		__warned = true;					\
+		WARN_ON(1);						\
+	}								\
+	unlikely(__ret_warn_once);					\
+})
+
 #define VM_WARN_ON(cond) (void)WARN_ON(cond)
 #define VM_WARN_ON_ONCE(cond) (void)WARN_ON_ONCE(cond)
 #define VM_WARN_ONCE(cond, format...) (void)WARN_ONCE(cond, format)
@@ -48,6 +60,7 @@ void dump_mm(const struct mm_struct *mm);
 #define VM_BUG_ON_MM(cond, mm) VM_BUG_ON(cond)
 #define VM_WARN_ON(cond) BUILD_BUG_ON_INVALID(cond)
 #define VM_WARN_ON_ONCE(cond) BUILD_BUG_ON_INVALID(cond)
+#define VM_WARN_ON_ONCE_PAGE(cond, page)  BUILD_BUG_ON_INVALID(cond)
 #define VM_WARN_ONCE(cond, format...) BUILD_BUG_ON_INVALID(cond)
 #define VM_WARN(cond, format...) BUILD_BUG_ON_INVALID(cond)
 #endif
* Unmerged path mm/memcontrol.c
