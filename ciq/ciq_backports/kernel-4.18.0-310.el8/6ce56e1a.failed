powerpc/pseries: export LPAR security flavor in lparcfg

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Laurent Dufour <ldufour@linux.ibm.com>
commit 6ce56e1ac380eaa088d3f4c01446e15e195bd541
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/6ce56e1a.failed

This is helpful to read the security flavor from inside the LPAR.

In /sys/kernel/debug/powerpc/security_features it can be seen if
mitigations are on or off but not the level set through the ASMI menu.
Furthermore, reporting it through /proc/powerpc/lparcfg allows an easy
processing by the lparstat command [1].

Export it like this in /proc/powerpc/lparcfg:

  $ grep security_flavor /proc/powerpc/lparcfg
  security_flavor=1

Value follows what is documented on the IBM support page [2]:

  0 Speculative execution fully enabled
  1 Speculative execution controls to mitigate user-to-kernel attacks
  2 Speculative execution controls to mitigate user-to-kernel and
    user-to-user side-channel attacks

[1] https://groups.google.com/g/powerpc-utils-devel/c/NaKXvdyl_UI/m/wa2stpIDAQAJ
[2] https://www.ibm.com/support/pages/node/715841

	Signed-off-by: Laurent Dufour <ldufour@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20210305125554.5165-1-ldufour@linux.ibm.com
(cherry picked from commit 6ce56e1ac380eaa088d3f4c01446e15e195bd541)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/pseries.h
#	arch/powerpc/platforms/pseries/setup.c
diff --cc arch/powerpc/platforms/pseries/pseries.h
index 7dee8c5d3363,8925a0fac15f..000000000000
--- a/arch/powerpc/platforms/pseries/pseries.h
+++ b/arch/powerpc/platforms/pseries/pseries.h
@@@ -115,6 -108,8 +115,12 @@@ static inline unsigned long cmo_get_pag
  
  int dlpar_workqueue_init(void);
  
++<<<<<<< HEAD
 +void pseries_setup_rfi_flush(void);
++=======
+ extern u32 pseries_security_flavor;
+ void pseries_setup_security_mitigations(void);
+ void pseries_lpar_read_hblkrm_characteristics(void);
++>>>>>>> 6ce56e1ac380 (powerpc/pseries: export LPAR security flavor in lparcfg)
  
  #endif /* _PSERIES_PSERIES_H */
diff --cc arch/powerpc/platforms/pseries/setup.c
index 56017d906fde,754e493b7c05..000000000000
--- a/arch/powerpc/platforms/pseries/setup.c
+++ b/arch/powerpc/platforms/pseries/setup.c
@@@ -88,6 -85,8 +88,11 @@@ unsigned long CMO_PageSize = (ASM_CONST
  EXPORT_SYMBOL(CMO_PageSize);
  
  int fwnmi_active;  /* TRUE if an FWNMI handler is present */
++<<<<<<< HEAD
++=======
+ int ibm_nmi_interlock_token;
+ u32 pseries_security_flavor;
++>>>>>>> 6ce56e1ac380 (powerpc/pseries: export LPAR security flavor in lparcfg)
  
  static void pSeries_show_cpuinfo(struct seq_file *m)
  {
diff --git a/arch/powerpc/include/asm/hvcall.h b/arch/powerpc/include/asm/hvcall.h
index ca6840239f90..6a84df65d316 100644
--- a/arch/powerpc/include/asm/hvcall.h
+++ b/arch/powerpc/include/asm/hvcall.h
@@ -380,6 +380,7 @@
 #define H_CPU_BEHAV_FAVOUR_SECURITY	(1ull << 63) // IBM bit 0
 #define H_CPU_BEHAV_L1D_FLUSH_PR	(1ull << 62) // IBM bit 1
 #define H_CPU_BEHAV_BNDS_CHK_SPEC_BAR	(1ull << 61) // IBM bit 2
+#define H_CPU_BEHAV_FAVOUR_SECURITY_H	(1ull << 60) // IBM bit 3
 #define H_CPU_BEHAV_FLUSH_COUNT_CACHE	(1ull << 58) // IBM bit 5
 #define H_CPU_BEHAV_FLUSH_LINK_STACK	(1ull << 57) // IBM bit 6
 
diff --git a/arch/powerpc/platforms/pseries/lparcfg.c b/arch/powerpc/platforms/pseries/lparcfg.c
index 6d17d6084258..488524efc065 100644
--- a/arch/powerpc/platforms/pseries/lparcfg.c
+++ b/arch/powerpc/platforms/pseries/lparcfg.c
@@ -540,6 +540,8 @@ static int pseries_lparcfg_data(struct seq_file *m, void *v)
 	parse_em_data(m);
 	maxmem_data(m);
 
+	seq_printf(m, "security_flavor=%u\n", pseries_security_flavor);
+
 	return 0;
 }
 
* Unmerged path arch/powerpc/platforms/pseries/pseries.h
* Unmerged path arch/powerpc/platforms/pseries/setup.c
