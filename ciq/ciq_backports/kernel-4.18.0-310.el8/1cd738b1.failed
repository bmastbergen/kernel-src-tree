xfs: consider shutdown in bmapbt cursor delete assert

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Brian Foster <bfoster@redhat.com>
commit 1cd738b13ae9b29e03d6149f0246c61f76e81fcf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/1cd738b1.failed

The assert in xfs_btree_del_cursor() checks that the bmapbt block
allocation field has been handled correctly before the cursor is
freed. This field is used for accurate calculation of indirect block
reservation requirements (for delayed allocations), for example.
generic/019 reproduces a scenario where this assert fails because
the filesystem has shutdown while in the middle of a bmbt record
insertion. This occurs after a bmbt block has been allocated via the
cursor but before the higher level bmap function (i.e.
xfs_bmap_add_extent_hole_real()) completes and resets the field.

Update the assert to accommodate the transient state if the
filesystem has shutdown. While here, clean up the indentation and
comments in the function.

	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
(cherry picked from commit 1cd738b13ae9b29e03d6149f0246c61f76e81fcf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_btree.c
diff --cc fs/xfs/libxfs/xfs_btree.c
index fd300dc93ca4,b56ff451adce..000000000000
--- a/fs/xfs/libxfs/xfs_btree.c
+++ b/fs/xfs/libxfs/xfs_btree.c
@@@ -373,15 -371,11 +370,23 @@@ xfs_btree_del_cursor
  		else if (!error)
  			break;
  	}
++<<<<<<< HEAD
 +	/*
 +	 * Can't free a bmap cursor without having dealt with the
 +	 * allocated indirect blocks' accounting.
 +	 */
 +	ASSERT(cur->bc_btnum != XFS_BTNUM_BMAP ||
 +	       cur->bc_private.b.allocated == 0);
 +	/*
 +	 * Free the cursor.
 +	 */
++=======
+ 
+ 	ASSERT(cur->bc_btnum != XFS_BTNUM_BMAP || cur->bc_ino.allocated == 0 ||
+ 	       XFS_FORCED_SHUTDOWN(cur->bc_mp));
+ 	if (unlikely(cur->bc_flags & XFS_BTREE_STAGING))
+ 		kmem_free(cur->bc_ops);
++>>>>>>> 1cd738b13ae9 (xfs: consider shutdown in bmapbt cursor delete assert)
  	kmem_cache_free(xfs_btree_cur_zone, cur);
  }
  
* Unmerged path fs/xfs/libxfs/xfs_btree.c
