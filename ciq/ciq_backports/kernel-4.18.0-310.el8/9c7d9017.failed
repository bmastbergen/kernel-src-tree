x86: PM: Register syscore_ops for scale invariance

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 9c7d9017a49fb8516c13b7bff59b7da2abed23e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/9c7d9017.failed

On x86 scale invariace tends to be disabled during resume from
suspend-to-RAM, because the MPERF or APERF MSR values are not as
expected then due to updates taking place after the platform
firmware has been invoked to complete the suspend transition.

That, of course, is not desirable, especially if the schedutil
scaling governor is in use, because the lack of scale invariance
causes it to be less reliable.

To counter that effect, modify init_freq_invariance() to register
a syscore_ops object for scale invariance with the ->resume callback
pointing to init_counter_refs() which will run on the CPU starting
the resume transition (the other CPUs will be taken care of the
"online" operations taking place later).

Fixes: e2b0d619b400 ("x86, sched: check for counters overflow in frequency invariant accounting")
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Giovanni Gherdovich <ggherdovich@suse.cz>
Link: https://lkml.kernel.org/r/1803209.Mvru99baaF@kreacher
(cherry picked from commit 9c7d9017a49fb8516c13b7bff59b7da2abed23e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/smpboot.c
diff --cc arch/x86/kernel/smpboot.c
index b002c0933ab8,117e24fbfd8a..000000000000
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@@ -57,6 -54,9 +57,12 @@@
  #include <linux/gfp.h>
  #include <linux/cpuidle.h>
  #include <linux/numa.h>
++<<<<<<< HEAD
++=======
+ #include <linux/pgtable.h>
+ #include <linux/overflow.h>
+ #include <linux/syscore_ops.h>
++>>>>>>> 9c7d9017a49f (x86: PM: Register syscore_ops for scale invariance)
  
  #include <asm/acpi.h>
  #include <asm/desc.h>
@@@ -2034,7 -2084,24 +2040,28 @@@ static void init_counter_refs(void
  	this_cpu_write(arch_prev_mperf, mperf);
  }
  
++<<<<<<< HEAD
 +static void init_freq_invariance(bool secondary)
++=======
+ #ifdef CONFIG_PM_SLEEP
+ static struct syscore_ops freq_invariance_syscore_ops = {
+ 	.resume = init_counter_refs,
+ };
+ 
+ static void register_freq_invariance_syscore_ops(void)
+ {
+ 	/* Bail out if registered already. */
+ 	if (freq_invariance_syscore_ops.node.prev)
+ 		return;
+ 
+ 	register_syscore_ops(&freq_invariance_syscore_ops);
+ }
+ #else
+ static inline void register_freq_invariance_syscore_ops(void) {}
+ #endif
+ 
+ static void init_freq_invariance(bool secondary, bool cppc_ready)
++>>>>>>> 9c7d9017a49f (x86: PM: Register syscore_ops for scale invariance)
  {
  	bool ret = false;
  
* Unmerged path arch/x86/kernel/smpboot.c
