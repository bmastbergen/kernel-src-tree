block: remove revalidate_disk()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit de09077c89183cbc627d9393706343662da7f5a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/de09077c.failed

Remove the now unused helper.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Acked-by: Song Liu <song@kernel.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit de09077c89183cbc627d9393706343662da7f5a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
#	include/linux/genhd.h
diff --cc fs/block_dev.c
index f19cc879b480,9cb205405f9d..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -1408,38 -1312,32 +1408,67 @@@ static void check_disk_size_change(stru
  }
  
  /**
++<<<<<<< HEAD
 + * revalidate_disk - wrapper for lower-level driver's revalidate_disk call-back
 + * @disk: struct gendisk to be revalidated
 + *
 + * This routine is a wrapper for lower-level driver's revalidate_disk
 + * call-backs.  It is used to do common pre and post operations needed
 + * for all revalidate_disk operations.
 + */
 +int revalidate_disk(struct gendisk *disk)
 +{
 +	int ret = 0;
 +
 +	if (disk->fops->revalidate_disk)
 +		ret = disk->fops->revalidate_disk(disk);
 +
 +	/*
 +	 * Hidden disks don't have associated bdev so there's no point in
 +	 * revalidating it.
 +	 */
 +	if (!(disk->flags & GENHD_FL_HIDDEN)) {
 +		struct block_device *bdev = bdget_disk(disk, 0);
 +
 +		if (!bdev)
 +			return ret;
 +
 +		mutex_lock(&bdev->bd_mutex);
 +		check_disk_size_change(disk, bdev, ret == 0);
 +		mutex_unlock(&bdev->bd_mutex);
 +		bdput(bdev);
 +	}
 +	return ret;
 +}
 +EXPORT_SYMBOL(revalidate_disk);
++=======
+  * revalidate_disk_size - checks for disk size change and adjusts bdev size.
+  * @disk: struct gendisk to check
+  * @verbose: if %true log a message about a size change if there is any
+  *
+  * This routine checks to see if the bdev size does not match the disk size
+  * and adjusts it if it differs. When shrinking the bdev size, its all caches
+  * are freed.
+  */
+ void revalidate_disk_size(struct gendisk *disk, bool verbose)
+ {
+ 	struct block_device *bdev;
+ 
+ 	/*
+ 	 * Hidden disks don't have associated bdev so there's no point in
+ 	 * revalidating them.
+ 	 */
+ 	if (disk->flags & GENHD_FL_HIDDEN)
+ 		return;
+ 
+ 	bdev = bdget_disk(disk, 0);
+ 	if (bdev) {
+ 		check_disk_size_change(disk, bdev, verbose);
+ 		bdput(bdev);
+ 	}
+ }
+ EXPORT_SYMBOL(revalidate_disk_size);
++>>>>>>> de09077c8918 (block: remove revalidate_disk())
  
  /*
   * This routine checks whether a removable media has been changed,
diff --cc include/linux/genhd.h
index 0fcca343e13b,c618b27292fc..000000000000
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@@ -498,10 -367,40 +498,43 @@@ extern void blk_unregister_region(dev_
  
  #define alloc_disk(minors) alloc_disk_node(minors, NUMA_NO_NODE)
  
++<<<<<<< HEAD
++=======
+ int register_blkdev(unsigned int major, const char *name);
+ void unregister_blkdev(unsigned int major, const char *name);
+ 
+ void revalidate_disk_size(struct gendisk *disk, bool verbose);
+ int check_disk_change(struct block_device *bdev);
+ int __invalidate_device(struct block_device *bdev, bool kill_dirty);
+ void bd_set_nr_sectors(struct block_device *bdev, sector_t sectors);
+ 
+ /* for drivers/char/raw.c: */
+ int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
+ long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
+ 
+ #ifdef CONFIG_SYSFS
+ int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
+ void bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk);
+ #else
+ static inline int bd_link_disk_holder(struct block_device *bdev,
+ 				      struct gendisk *disk)
+ {
+ 	return 0;
+ }
+ static inline void bd_unlink_disk_holder(struct block_device *bdev,
+ 					 struct gendisk *disk)
+ {
+ }
+ #endif /* CONFIG_SYSFS */
+ 
+ #ifdef CONFIG_BLOCK
+ void printk_all_partitions(void);
+ dev_t blk_lookup_devt(const char *name, int partno);
++>>>>>>> de09077c8918 (block: remove revalidate_disk())
  #else /* CONFIG_BLOCK */
 -static inline void printk_all_partitions(void)
 -{
 -}
 +
 +static inline void printk_all_partitions(void) { }
 +
  static inline dev_t blk_lookup_devt(const char *name, int partno)
  {
  	dev_t devt = MKDEV(0, 0);
diff --git a/drivers/md/md.h b/drivers/md/md.h
index b4bcf0d8b1a0..4920ff4aceff 100644
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@ -404,7 +404,7 @@ struct mddev {
 	 * These locks are separate due to conflicting interactions
 	 * with bdev->bd_mutex.
 	 * Lock ordering is:
-	 *  reconfig_mutex -> bd_mutex : e.g. do_md_run -> revalidate_disk
+	 *  reconfig_mutex -> bd_mutex
 	 *  bd_mutex -> open_mutex:  e.g. __blkdev_get -> md_open
 	 */
 	struct mutex			open_mutex;
* Unmerged path fs/block_dev.c
* Unmerged path include/linux/genhd.h
