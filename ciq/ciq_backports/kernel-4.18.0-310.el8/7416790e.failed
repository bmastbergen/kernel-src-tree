RDMA/core: Introduce and use API to read port immutable data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Parav Pandit <parav@nvidia.com>
commit 7416790e22452bfa86de6b55638eacf7780c8f6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/7416790e.failed

Currently mlx5 driver caches port GID table length for 2 ports.  It is
also cached by IB core as port immutable data.

When mlx5 representor ports are present, which are usually more than 2,
invalid access to port_caps array can happen while validating the GID
table length which is only for 2 ports.

To avoid this, take help of the IB cores port immutable data by exposing
an API to read the port immutable fields.

Remove mlx5 driver's internal cache, thereby reduce code and data.

Link: https://lore.kernel.org/r/20210203130133.4057329-5-leon@kernel.org
	Signed-off-by: Parav Pandit <parav@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 7416790e22452bfa86de6b55638eacf7780c8f6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index 97d5f414e693,1e1e3edcb1d5..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -2973,57 -2964,6 +2973,60 @@@ static void get_ext_port_caps(struct ml
  		mlx5_query_ext_port_caps(dev, port);
  }
  
++<<<<<<< HEAD
 +static int __get_port_caps(struct mlx5_ib_dev *dev, u8 port)
 +{
 +	struct ib_device_attr *dprops = NULL;
 +	struct ib_port_attr *pprops = NULL;
 +	int err = -ENOMEM;
 +
 +	pprops = kzalloc(sizeof(*pprops), GFP_KERNEL);
 +	if (!pprops)
 +		goto out;
 +
 +	dprops = kmalloc(sizeof(*dprops), GFP_KERNEL);
 +	if (!dprops)
 +		goto out;
 +
 +	err = mlx5_ib_query_device(&dev->ib_dev, dprops, NULL);
 +	if (err) {
 +		mlx5_ib_warn(dev, "query_device failed %d\n", err);
 +		goto out;
 +	}
 +
 +	err = mlx5_ib_query_port(&dev->ib_dev, port, pprops);
 +	if (err) {
 +		mlx5_ib_warn(dev, "query_port %d failed %d\n",
 +			     port, err);
 +		goto out;
 +	}
 +
 +	dev->mdev->port_caps[port - 1].pkey_table_len =
 +					dprops->max_pkeys;
 +	dev->mdev->port_caps[port - 1].gid_table_len =
 +					pprops->gid_tbl_len;
 +	mlx5_ib_dbg(dev, "port %d: pkey_table_len %d, gid_table_len %d\n",
 +		    port, dprops->max_pkeys, pprops->gid_tbl_len);
 +
 +out:
 +	kfree(pprops);
 +	kfree(dprops);
 +
 +	return err;
 +}
 +
 +static int get_port_caps(struct mlx5_ib_dev *dev, u8 port)
 +{
 +	/* For representors use port 1, is this is the only native
 +	 * port
 +	 */
 +	if (dev->is_rep)
 +		return __get_port_caps(dev, 1);
 +	return __get_port_caps(dev, port);
 +}
 +
++=======
++>>>>>>> 7416790e2245 (RDMA/core: Introduce and use API to read port immutable data)
  static u8 mlx5_get_umr_fence(u8 umr_fence_cap)
  {
  	switch (umr_fence_cap) {
@@@ -3965,15 -3899,7 +3962,19 @@@ static int mlx5_ib_stage_init_init(stru
  	if (err)
  		goto err_mp;
  
++<<<<<<< HEAD
 +	if (!mlx5_core_mp_enabled(mdev)) {
 +		for (i = 1; i <= dev->num_ports; i++) {
 +			err = get_port_caps(dev, i);
 +			if (err)
 +				break;
 +		}
 +	} else {
 +		err = get_port_caps(dev, mlx5_core_native_port_num(mdev));
 +	}
++=======
+ 	err = mlx5_query_max_pkeys(&dev->ib_dev, &dev->pkey_table_len);
++>>>>>>> 7416790e2245 (RDMA/core: Introduce and use API to read port immutable data)
  	if (err)
  		goto err_mp;
  
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index 2c6dfd189e0c,0f567d570230..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -949,6 -1036,11 +949,14 @@@ struct mlx5_var_table 
  	u64 num_var_hw_entries;
  };
  
++<<<<<<< HEAD
++=======
+ struct mlx5_port_caps {
+ 	bool has_smi;
+ 	u8 ext_port_cap;
+ };
+ 
++>>>>>>> 7416790e2245 (RDMA/core: Introduce and use API to read port immutable data)
  struct mlx5_ib_dev {
  	struct ib_device		ib_dev;
  	struct mlx5_core_dev		*mdev;
diff --cc drivers/infiniband/hw/mlx5/qp.c
index c24f039600da,358c44c5a8fc..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -3180,11 -3176,13 +3180,21 @@@ static int mlx5_set_path(struct mlx5_ib
  			 alt ? attr->alt_pkey_index : attr->pkey_index);
  
  	if (ah_flags & IB_AH_GRH) {
++<<<<<<< HEAD
 +		if (grh->sgid_index >=
 +		    dev->mdev->port_caps[port - 1].gid_table_len) {
 +			pr_err("sgid_index (%u) too large. max is %d\n",
 +			       grh->sgid_index,
 +			       dev->mdev->port_caps[port - 1].gid_table_len);
++=======
+ 		const struct ib_port_immutable *immutable;
+ 
+ 		immutable = ib_port_immutable_read(&dev->ib_dev, port);
+ 		if (grh->sgid_index >= immutable->gid_tbl_len) {
+ 			pr_err("sgid_index (%u) too large. max is %d\n",
+ 			       grh->sgid_index,
+ 			       immutable->gid_tbl_len);
++>>>>>>> 7416790e2245 (RDMA/core: Introduce and use API to read port immutable data)
  			return -EINVAL;
  		}
  	}
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index 029ab93ea856..af52c8b9dfd3 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -816,6 +816,20 @@ static int setup_port_data(struct ib_device *device)
 	return 0;
 }
 
+/**
+ * ib_port_immutable_read() - Read rdma port's immutable data
+ * @dev - IB device
+ * @port - port number whose immutable data to read. It starts with index 1 and
+ *         valid upto including rdma_end_port().
+ */
+const struct ib_port_immutable*
+ib_port_immutable_read(struct ib_device *dev, unsigned int port)
+{
+	WARN_ON(!rdma_is_port_valid(dev, port));
+	return &dev->port_data[port].immutable;
+}
+EXPORT_SYMBOL(ib_port_immutable_read);
+
 void ib_get_device_fw_str(struct ib_device *dev, char *str)
 {
 	if (dev->ops.get_dev_fw_str)
* Unmerged path drivers/infiniband/hw/mlx5/main.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index 4f2a3eeb85db..0641780daadc 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -4662,4 +4662,7 @@ static inline u32 rdma_calc_flow_label(u32 lqpn, u32 rqpn)
 
 	return (u32)(v & IB_GRH_FLOWLABEL_MASK);
 }
+
+const struct ib_port_immutable*
+ib_port_immutable_read(struct ib_device *dev, unsigned int port);
 #endif /* IB_VERBS_H */
