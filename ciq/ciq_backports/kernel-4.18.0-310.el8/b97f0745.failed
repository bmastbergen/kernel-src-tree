KVM: x86: determine if an exception has an error code only when injecting it.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Maxim Levitsky <mlevitsk@redhat.com>
commit b97f074583736c42fb36f2da1164e28c73758912
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/b97f0745.failed

A page fault can be queued while vCPU is in real paged mode on AMD, and
AMD manual asks the user to always intercept it
(otherwise result is undefined).
The resulting VM exit, does have an error code.

	Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
Message-Id: <20210225154135.405125-2-mlevitsk@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b97f074583736c42fb36f2da1164e28c73758912)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index 703d0876830f,f5bc55254e2e..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -8227,7 -8362,28 +8225,32 @@@ static void update_cr8_intercept(struc
  
  	tpr = kvm_lapic_get_cr8(vcpu);
  
++<<<<<<< HEAD
 +	kvm_x86_ops.update_cr8_intercept(vcpu, tpr, max_irr);
++=======
+ 	static_call(kvm_x86_update_cr8_intercept)(vcpu, tpr, max_irr);
+ }
+ 
+ 
+ int kvm_check_nested_events(struct kvm_vcpu *vcpu)
+ {
+ 	if (WARN_ON_ONCE(!is_guest_mode(vcpu)))
+ 		return -EIO;
+ 
+ 	if (kvm_check_request(KVM_REQ_TRIPLE_FAULT, vcpu)) {
+ 		kvm_x86_ops.nested_ops->triple_fault(vcpu);
+ 		return 1;
+ 	}
+ 
+ 	return kvm_x86_ops.nested_ops->check_events(vcpu);
++>>>>>>> b97f07458373 (KVM: x86: determine if an exception has an error code only when injecting it.)
+ }
+ 
+ static void kvm_inject_exception(struct kvm_vcpu *vcpu)
+ {
+ 	if (vcpu->arch.exception.error_code && !is_protmode(vcpu))
+ 		vcpu->arch.exception.error_code = false;
+ 	static_call(kvm_x86_queue_exception)(vcpu);
  }
  
  static void inject_pending_event(struct kvm_vcpu *vcpu, bool *req_immediate_exit)
@@@ -8238,7 -8394,7 +8261,11 @@@
  	/* try to reinject previous events if any */
  
  	if (vcpu->arch.exception.injected) {
++<<<<<<< HEAD
 +		kvm_x86_ops.queue_exception(vcpu);
++=======
+ 		kvm_inject_exception(vcpu);
++>>>>>>> b97f07458373 (KVM: x86: determine if an exception has an error code only when injecting it.)
  		can_inject = false;
  	}
  	/*
@@@ -8301,7 -8457,7 +8328,11 @@@
  			}
  		}
  
++<<<<<<< HEAD
 +		kvm_x86_ops.queue_exception(vcpu);
++=======
+ 		kvm_inject_exception(vcpu);
++>>>>>>> b97f07458373 (KVM: x86: determine if an exception has an error code only when injecting it.)
  		can_inject = false;
  	}
  
* Unmerged path arch/x86/kvm/x86.c
