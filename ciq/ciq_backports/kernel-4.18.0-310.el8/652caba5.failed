RDMA: Check srq_type during create_srq

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jason Gunthorpe <jgg@nvidia.com>
commit 652caba5b5501258a46d4b9279e0dbb6e5d42d75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/652caba5.failed

uverbs was blocking srq_types the driver doesn't support based on the
CREATE_XSRQ cmd_mask. Fix all drivers to check for supported srq_types
during create_srq and move CREATE_XSRQ to the core code.

Link: https://lore.kernel.org/r/5-v1-caa70ba3d1ab+1436e-ucmd_mask_jgg@nvidia.com
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 652caba5b5501258a46d4b9279e0dbb6e5d42d75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/device.c
#	drivers/infiniband/hw/hns/hns_roce_srq.c
#	drivers/infiniband/hw/mlx4/main.c
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/qedr/main.c
diff --cc drivers/infiniband/core/device.c
index 30a7bf1c3b41,efcadbda4409..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -601,9 -601,46 +601,52 @@@ struct ib_device *_ib_alloc_device(size
  	init_completion(&device->unreg_completion);
  	INIT_WORK(&device->unregistration_work, ib_unregister_work);
  
++<<<<<<< HEAD
 +	spin_lock_init(&device->cq_pools_lock);
 +	for (i = 0; i < ARRAY_SIZE(device->cq_pools); i++)
 +		INIT_LIST_HEAD(&device->cq_pools[i]);
++=======
+ 	device->uverbs_cmd_mask =
+ 		BIT_ULL(IB_USER_VERBS_CMD_ALLOC_MW) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_ALLOC_PD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_ATTACH_MCAST) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CLOSE_XRCD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_XSRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEALLOC_MW) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEALLOC_PD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEREG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DETACH_MCAST) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_GET_CONTEXT) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_MODIFY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_MODIFY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_OPEN_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_OPEN_XRCD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_DEVICE) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_PORT) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_REG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_REREG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_RESIZE_CQ);
+ 
+ 	device->uverbs_ex_cmd_mask =
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_FLOW) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_RWQ_IND_TBL) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_WQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_DESTROY_FLOW) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_DESTROY_RWQ_IND_TBL) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_DESTROY_WQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_MODIFY_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_MODIFY_WQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_QUERY_DEVICE);
++>>>>>>> 652caba5b550 (RDMA: Check srq_type during create_srq)
  
  	return device;
  }
diff --cc drivers/infiniband/hw/mlx4/main.c
index 83d23bae44ad,355c8268d195..000000000000
--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@@ -2655,36 -2657,8 +2655,39 @@@ static void *mlx4_ib_add(struct mlx4_de
  	ibdev->ib_dev.num_comp_vectors	= dev->caps.num_comp_vectors;
  	ibdev->ib_dev.dev.parent	= &dev->persist->pdev->dev;
  
++<<<<<<< HEAD
 +	ibdev->ib_dev.uverbs_cmd_mask	=
 +		(1ull << IB_USER_VERBS_CMD_GET_CONTEXT)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_DEVICE)	|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_PORT)		|
 +		(1ull << IB_USER_VERBS_CMD_ALLOC_PD)		|
 +		(1ull << IB_USER_VERBS_CMD_DEALLOC_PD)		|
 +		(1ull << IB_USER_VERBS_CMD_REG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_REREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_DEREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_RESIZE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_ATTACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_DETACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_XSRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_OPEN_QP);
 +
++=======
++>>>>>>> 652caba5b550 (RDMA: Check srq_type during create_srq)
  	ib_set_device_ops(&ibdev->ib_dev, &mlx4_ib_dev_ops);
  	ibdev->ib_dev.uverbs_ex_cmd_mask |=
 +		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_CQ) |
 +		(1ull << IB_USER_VERBS_EX_CMD_QUERY_DEVICE) |
  		(1ull << IB_USER_VERBS_EX_CMD_CREATE_CQ) |
  		(1ull << IB_USER_VERBS_EX_CMD_CREATE_QP);
  
diff --cc drivers/infiniband/hw/mlx5/main.c
index 97d5f414e693,ab469bc835dc..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -4150,41 -4139,13 +4150,46 @@@ static int mlx5_ib_stage_caps_init(stru
  	struct mlx5_core_dev *mdev = dev->mdev;
  	int err;
  
 -	dev->ib_dev.uverbs_cmd_mask |=
 +	dev->ib_dev.uverbs_cmd_mask	=
 +		(1ull << IB_USER_VERBS_CMD_GET_CONTEXT)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_DEVICE)	|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_PORT)		|
 +		(1ull << IB_USER_VERBS_CMD_ALLOC_PD)		|
 +		(1ull << IB_USER_VERBS_CMD_DEALLOC_PD)		|
  		(1ull << IB_USER_VERBS_CMD_CREATE_AH)		|
++<<<<<<< HEAD
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_AH)		|
 +		(1ull << IB_USER_VERBS_CMD_REG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_REREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_DEREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_RESIZE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_ATTACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_DETACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_XSRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_OPEN_QP);
 +	dev->ib_dev.uverbs_ex_cmd_mask =
 +		(1ull << IB_USER_VERBS_EX_CMD_QUERY_DEVICE)	|
++=======
+ 		(1ull << IB_USER_VERBS_CMD_DESTROY_AH);
+ 	dev->ib_dev.uverbs_ex_cmd_mask |=
++>>>>>>> 652caba5b550 (RDMA: Check srq_type during create_srq)
  		(1ull << IB_USER_VERBS_EX_CMD_CREATE_CQ)	|
  		(1ull << IB_USER_VERBS_EX_CMD_CREATE_QP)	|
 -		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_QP);
 +		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_QP)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_CQ)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_CREATE_FLOW)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_DESTROY_FLOW);
  
  	if (MLX5_CAP_GEN(mdev, ipoib_enhanced_offloads) &&
  	    IS_ENABLED(CONFIG_MLX5_CORE_IPOIB))
diff --cc drivers/infiniband/hw/qedr/main.c
index bf098224e118,f3a5946fe93e..000000000000
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@@ -188,10 -188,6 +188,13 @@@ static void qedr_roce_register_device(s
  	dev->ibdev.node_type = RDMA_NODE_IB_CA;
  
  	ib_set_device_ops(&dev->ibdev, &qedr_roce_dev_ops);
++<<<<<<< HEAD
 +
 +	dev->ibdev.uverbs_cmd_mask |= QEDR_UVERBS(OPEN_XRCD) |
 +		QEDR_UVERBS(CLOSE_XRCD) |
 +		QEDR_UVERBS(CREATE_XSRQ);
++=======
++>>>>>>> 652caba5b550 (RDMA: Check srq_type during create_srq)
  }
  
  static const struct ib_device_ops qedr_dev_ops = {
* Unmerged path drivers/infiniband/hw/hns/hns_roce_srq.c
* Unmerged path drivers/infiniband/core/device.c
diff --git a/drivers/infiniband/hw/cxgb4/qp.c b/drivers/infiniband/hw/cxgb4/qp.c
index 4d7acd7576eb..bbf812d8a0ef 100644
--- a/drivers/infiniband/hw/cxgb4/qp.c
+++ b/drivers/infiniband/hw/cxgb4/qp.c
@@ -2685,6 +2685,9 @@ int c4iw_create_srq(struct ib_srq *ib_srq, struct ib_srq_init_attr *attrs,
 	int ret;
 	int wr_len;
 
+	if (attrs->srq_type != IB_SRQT_BASIC)
+		return -EOPNOTSUPP;
+
 	pr_debug("%s ib_pd %p\n", __func__, pd);
 
 	php = to_c4iw_pd(pd);
* Unmerged path drivers/infiniband/hw/hns/hns_roce_srq.c
* Unmerged path drivers/infiniband/hw/mlx4/main.c
diff --git a/drivers/infiniband/hw/mlx4/srq.c b/drivers/infiniband/hw/mlx4/srq.c
index 82450cae77ad..6149292d2cd3 100644
--- a/drivers/infiniband/hw/mlx4/srq.c
+++ b/drivers/infiniband/hw/mlx4/srq.c
@@ -86,6 +86,10 @@ int mlx4_ib_create_srq(struct ib_srq *ib_srq,
 	int err;
 	int i;
 
+	if (init_attr->srq_type != IB_SRQT_BASIC &&
+	    init_attr->srq_type != IB_SRQT_XRC)
+		return -EOPNOTSUPP;
+
 	/* Sanity check SRQ size before proceeding */
 	if (init_attr->attr.max_wr  >= dev->dev->caps.max_srq_wqes ||
 	    init_attr->attr.max_sge >  dev->dev->caps.max_srq_sge)
* Unmerged path drivers/infiniband/hw/mlx5/main.c
diff --git a/drivers/infiniband/hw/mlx5/srq.c b/drivers/infiniband/hw/mlx5/srq.c
index caae9501fb79..b857666218af 100644
--- a/drivers/infiniband/hw/mlx5/srq.c
+++ b/drivers/infiniband/hw/mlx5/srq.c
@@ -226,6 +226,11 @@ int mlx5_ib_create_srq(struct ib_srq *ib_srq,
 	struct mlx5_srq_attr in = {};
 	__u32 max_srq_wqes = 1 << MLX5_CAP_GEN(dev->mdev, log_max_srq_sz);
 
+	if (init_attr->srq_type != IB_SRQT_BASIC &&
+	    init_attr->srq_type != IB_SRQT_XRC &&
+	    init_attr->srq_type != IB_SRQT_TM)
+		return -EOPNOTSUPP;
+
 	/* Sanity check SRQ size before proceeding */
 	if (init_attr->attr.max_wr >= max_srq_wqes) {
 		mlx5_ib_dbg(dev, "max_wr %d, cap %d\n",
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
index bbeb7234154f..30b727226d03 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
@@ -1783,6 +1783,9 @@ int ocrdma_create_srq(struct ib_srq *ibsrq, struct ib_srq_init_attr *init_attr,
 	struct ocrdma_dev *dev = get_ocrdma_dev(ibsrq->device);
 	struct ocrdma_srq *srq = get_ocrdma_srq(ibsrq);
 
+	if (init_attr->srq_type != IB_SRQT_BASIC)
+		return -EOPNOTSUPP;
+
 	if (init_attr->attr.max_sge > dev->attr.max_recv_sge)
 		return -EINVAL;
 	if (init_attr->attr.max_wr > dev->attr.max_rqe)
* Unmerged path drivers/infiniband/hw/qedr/main.c
diff --git a/drivers/infiniband/hw/qedr/verbs.c b/drivers/infiniband/hw/qedr/verbs.c
index b1278a5a7205..894f82326b8b 100644
--- a/drivers/infiniband/hw/qedr/verbs.c
+++ b/drivers/infiniband/hw/qedr/verbs.c
@@ -1554,6 +1554,10 @@ int qedr_create_srq(struct ib_srq *ibsrq, struct ib_srq_init_attr *init_attr,
 		 "create SRQ called from %s (pd %p)\n",
 		 (udata) ? "User lib" : "kernel", pd);
 
+	if (init_attr->srq_type != IB_SRQT_BASIC &&
+	    init_attr->srq_type != IB_SRQT_XRC)
+		return -EOPNOTSUPP;
+
 	rc = qedr_check_srq_params(dev, init_attr, udata);
 	if (rc)
 		return -EINVAL;
diff --git a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
index 51b7f3fda2e3..4413ff8af962 100644
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_srq.c
@@ -121,7 +121,7 @@ int pvrdma_create_srq(struct ib_srq *ibsrq, struct ib_srq_init_attr *init_attr,
 		dev_warn(&dev->pdev->dev,
 			 "shared receive queue type %d not supported\n",
 			 init_attr->srq_type);
-		return -EINVAL;
+		return -EOPNOTSUPP;
 	}
 
 	if (init_attr->attr.max_wr  > dev->dsr->caps.max_srq_wr ||
diff --git a/drivers/infiniband/sw/rxe/rxe_verbs.c b/drivers/infiniband/sw/rxe/rxe_verbs.c
index 6f655b55dded..c118a747a472 100644
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@ -265,6 +265,9 @@ static int rxe_create_srq(struct ib_srq *ibsrq, struct ib_srq_init_attr *init,
 	struct rxe_srq *srq = to_rsrq(ibsrq);
 	struct rxe_create_srq_resp __user *uresp = NULL;
 
+	if (init->srq_type != IB_SRQT_BASIC)
+		return -EOPNOTSUPP;
+
 	if (udata) {
 		if (udata->outlen < sizeof(*uresp))
 			return -EINVAL;
diff --git a/drivers/infiniband/sw/siw/siw_verbs.c b/drivers/infiniband/sw/siw/siw_verbs.c
index db44999ac086..eda93f574354 100644
--- a/drivers/infiniband/sw/siw/siw_verbs.c
+++ b/drivers/infiniband/sw/siw/siw_verbs.c
@@ -1562,6 +1562,9 @@ int siw_create_srq(struct ib_srq *base_srq,
 					  base_ucontext);
 	int rv;
 
+	if (init_attrs->srq_type != IB_SRQT_BASIC)
+		return -EOPNOTSUPP;
+
 	if (atomic_inc_return(&sdev->num_srq) > SIW_MAX_SRQ) {
 		siw_dbg_pd(base_srq->pd, "too many SRQ's\n");
 		rv = -ENOMEM;
