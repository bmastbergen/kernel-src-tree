mm: memcontrol: remove unused mod_memcg_obj_state()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Muchun Song <songmuchun@bytedance.com>
commit 1a984c4e8200e0e58bb316f14a4bebb28d32d15a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/1a984c4e.failed

Since commit 991e7673859e ("mm: memcontrol: account kernel stack per
node") there is no user of the mod_memcg_obj_state().  So just remove
it.

Also rework type of the idx parameter of the mod_objcg_state() from int
to enum node_stat_item.

Link: https://lkml.kernel.org/r/20201013153504.92602-1-songmuchun@bytedance.com
	Signed-off-by: Muchun Song <songmuchun@bytedance.com>
	Acked-by: Roman Gushchin <guro@fb.com>
	Acked-by: David Rientjes <rientjes@google.com>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
	Cc: Christopher Lameter <cl@linux.com>
	Cc: Pekka Enberg <penberg@kernel.org>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Yafang Shao <laoar.shao@gmail.com>
	Cc: Chris Down <chris@chrisdown.name>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1a984c4e8200e0e58bb316f14a4bebb28d32d15a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/memcontrol.h
diff --cc include/linux/memcontrol.h
index 748026eb20df,28bf65560084..000000000000
--- a/include/linux/memcontrol.h
+++ b/include/linux/memcontrol.h
@@@ -834,7 -797,16 +834,20 @@@ void __mod_memcg_lruvec_state(struct lr
  void __mod_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
  			int val);
  void __mod_lruvec_slab_state(void *p, enum node_stat_item idx, int val);
++<<<<<<< HEAD
 +void mod_memcg_obj_state(void *p, int idx, int val);
++=======
+ 
+ static inline void mod_lruvec_slab_state(void *p, enum node_stat_item idx,
+ 					 int val)
+ {
+ 	unsigned long flags;
+ 
+ 	local_irq_save(flags);
+ 	__mod_lruvec_slab_state(p, idx, val);
+ 	local_irq_restore(flags);
+ }
++>>>>>>> 1a984c4e8200 (mm: memcontrol: remove unused mod_memcg_obj_state())
  
  static inline void mod_memcg_lruvec_state(struct lruvec *lruvec,
  					  enum node_stat_item idx, int val)
@@@ -1264,8 -1245,12 +1277,17 @@@ static inline void __mod_lruvec_slab_st
  	__mod_node_page_state(page_pgdat(page), idx, val);
  }
  
++<<<<<<< HEAD
 +static inline void mod_memcg_obj_state(void *p, int idx, int val)
 +{
++=======
+ static inline void mod_lruvec_slab_state(void *p, enum node_stat_item idx,
+ 					 int val)
+ {
+ 	struct page *page = virt_to_head_page(p);
+ 
+ 	mod_node_page_state(page_pgdat(page), idx, val);
++>>>>>>> 1a984c4e8200 (mm: memcontrol: remove unused mod_memcg_obj_state())
  }
  
  static inline
* Unmerged path include/linux/memcontrol.h
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index e4ee0600b869..02006b056aa1 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -896,17 +896,6 @@ void __mod_lruvec_slab_state(void *p, enum node_stat_item idx, int val)
 	rcu_read_unlock();
 }
 
-void mod_memcg_obj_state(void *p, int idx, int val)
-{
-	struct mem_cgroup *memcg;
-
-	rcu_read_lock();
-	memcg = mem_cgroup_from_obj(p);
-	if (memcg)
-		mod_memcg_state(memcg, idx, val);
-	rcu_read_unlock();
-}
-
 /**
  * __count_memcg_events - account VM events in a cgroup
  * @memcg: the memory cgroup
diff --git a/mm/slab.h b/mm/slab.h
index 830ef5b0d4de..d619fff01c05 100644
--- a/mm/slab.h
+++ b/mm/slab.h
@@ -234,7 +234,7 @@ ssize_t slabinfo_write(struct file *file, const char __user *buffer,
 void __kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
 int __kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
 
-static inline int cache_vmstat_idx(struct kmem_cache *s)
+static inline enum node_stat_item cache_vmstat_idx(struct kmem_cache *s)
 {
 	return (s->flags & SLAB_RECLAIM_ACCOUNT) ?
 		NR_SLAB_RECLAIMABLE_B : NR_SLAB_UNRECLAIMABLE_B;
@@ -334,7 +334,7 @@ static inline bool memcg_slab_pre_alloc_hook(struct kmem_cache *s,
 
 static inline void mod_objcg_state(struct obj_cgroup *objcg,
 				   struct pglist_data *pgdat,
-				   int idx, int nr)
+				   enum node_stat_item idx, int nr)
 {
 	struct mem_cgroup *memcg;
 	struct lruvec *lruvec;
