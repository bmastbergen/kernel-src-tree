RDMA/rxe: Make pool lookup and alloc APIs type safe

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit 2622aa718a6a774ba302ca002adc62eeab9cdf28
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/2622aa71.failed

The allocate, lookup index, lookup key and cleanup routines in rxe_pool.c
currently are not type safe against relocating the pelem field in the
objects. Planned changes to move allocation of objects into rdma-core make
addressing this a requirement.

Use the elem_offset field in rxe_type_info make these APIs safe against
moving the pelem field.

Link: https://lore.kernel.org/r/20201216231550.27224-5-rpearson@hpe.com
	Signed-off-by: Bob Pearson <rpearson@hpe.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 2622aa718a6a774ba302ca002adc62eeab9cdf28)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_pool.c
diff --cc drivers/infiniband/sw/rxe/rxe_pool.c
index cfafc00cfe7e,2873ecfb84c2..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_pool.c
+++ b/drivers/infiniband/sw/rxe/rxe_pool.c
@@@ -390,12 -336,13 +392,20 @@@ void *rxe_alloc(struct rxe_pool *pool
  	if (atomic_inc_return(&pool->num_elem) > pool->max_elem)
  		goto out_cnt;
  
++<<<<<<< HEAD
 +	elem = kmem_cache_zalloc(pool_cache(pool),
 +				 (pool->flags & RXE_POOL_ATOMIC) ?
 +				 GFP_ATOMIC : GFP_KERNEL);
 +	if (!elem)
++=======
+ 	obj = kzalloc(info->size, (pool->flags & RXE_POOL_ATOMIC) ?
+ 		      GFP_ATOMIC : GFP_KERNEL);
+ 	if (!obj)
++>>>>>>> 2622aa718a6a (RDMA/rxe: Make pool lookup and alloc APIs type safe)
  		goto out_cnt;
  
+ 	elem = (struct rxe_pool_entry *)(obj + info->elem_offset);
+ 
  	elem->pool = pool;
  	kref_init(&elem->ref_cnt);
  
@@@ -451,8 -400,11 +463,16 @@@ void rxe_elem_release(struct kref *kref
  	if (pool->cleanup)
  		pool->cleanup(elem);
  
++<<<<<<< HEAD
 +	if (!(pool->flags & RXE_POOL_NO_ALLOC))
 +		kmem_cache_free(pool_cache(pool), elem);
++=======
+ 	if (!(pool->flags & RXE_POOL_NO_ALLOC)) {
+ 		obj = (u8 *)elem - info->elem_offset;
+ 		kfree(obj);
+ 	}
+ 
++>>>>>>> 2622aa718a6a (RDMA/rxe: Make pool lookup and alloc APIs type safe)
  	atomic_dec(&pool->num_elem);
  	ib_device_put(&pool->rxe->ib_dev);
  	rxe_pool_put(pool);
* Unmerged path drivers/infiniband/sw/rxe/rxe_pool.c
