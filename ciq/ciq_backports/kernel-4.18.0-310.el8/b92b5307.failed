block: remove check_disk_change

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit b92b53079aedbfb56bbb9ea360e5119fb563a2a1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/b92b5307.failed

Remove the now unused check_disk_change helper.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b92b53079aedbfb56bbb9ea360e5119fb563a2a1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
#	include/linux/genhd.h
diff --cc fs/block_dev.c
index f19cc879b480,0b34955b9e36..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -1424,61 -1355,26 +1424,65 @@@ int revalidate_disk(struct gendisk *dis
  
  	/*
  	 * Hidden disks don't have associated bdev so there's no point in
 -	 * revalidating them.
 +	 * revalidating it.
  	 */
 -	if (disk->flags & GENHD_FL_HIDDEN)
 -		return;
 +	if (!(disk->flags & GENHD_FL_HIDDEN)) {
 +		struct block_device *bdev = bdget_disk(disk, 0);
  
 -	bdev = bdget_disk(disk, 0);
 -	if (bdev) {
 -		check_disk_size_change(disk, bdev, verbose);
 +		if (!bdev)
 +			return ret;
 +
 +		mutex_lock(&bdev->bd_mutex);
 +		check_disk_size_change(disk, bdev, ret == 0);
 +		mutex_unlock(&bdev->bd_mutex);
  		bdput(bdev);
  	}
 +	return ret;
  }
 -EXPORT_SYMBOL(revalidate_disk_size);
 +EXPORT_SYMBOL(revalidate_disk);
 +
++<<<<<<< HEAD
 +/*
 + * This routine checks whether a removable media has been changed,
 + * and invalidates all buffer-cache-entries in that case. This
 + * is a relatively slow routine, so we have to try to minimize using
 + * it. Thus it is called only upon a 'mount' or 'open'. This
 + * is the best way of combining speed and utility, I think.
 + * People changing diskettes in the middle of an operation deserve
 + * to lose :-)
 + */
 +int check_disk_change(struct block_device *bdev)
 +{
 +	struct gendisk *disk = bdev->bd_disk;
 +	const struct block_device_operations *bdops = disk->fops;
 +	unsigned int events;
  
 +	events = disk_clear_events(disk, DISK_EVENT_MEDIA_CHANGE |
 +				   DISK_EVENT_EJECT_REQUEST);
 +	if (!(events & DISK_EVENT_MEDIA_CHANGE))
 +		return 0;
 +
 +	if (__invalidate_device(bdev, true))
 +		pr_warn("VFS: busy inodes on changed media %s\n",
 +			disk->disk_name);
 +	bdev->bd_invalidated = 1;
 +	if (bdops->revalidate_disk)
 +		bdops->revalidate_disk(bdev->bd_disk);
 +	return 1;
 +}
 +
 +EXPORT_SYMBOL(check_disk_change);
 +
 +void bd_set_size(struct block_device *bdev, loff_t size)
++=======
+ void bd_set_nr_sectors(struct block_device *bdev, sector_t sectors)
++>>>>>>> b92b53079aed (block: remove check_disk_change)
  {
 -	spin_lock(&bdev->bd_size_lock);
 -	i_size_write(bdev->bd_inode, (loff_t)sectors << SECTOR_SHIFT);
 -	spin_unlock(&bdev->bd_size_lock);
 +	inode_lock(bdev->bd_inode);
 +	i_size_write(bdev->bd_inode, size);
 +	inode_unlock(bdev->bd_inode);
  }
 -EXPORT_SYMBOL(bd_set_nr_sectors);
 +EXPORT_SYMBOL(bd_set_size);
  
  static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part);
  
diff --cc include/linux/genhd.h
index 0fcca343e13b,1c97cf84f011..000000000000
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@@ -498,10 -366,40 +498,43 @@@ extern void blk_unregister_region(dev_
  
  #define alloc_disk(minors) alloc_disk_node(minors, NUMA_NO_NODE)
  
++<<<<<<< HEAD
++=======
+ int register_blkdev(unsigned int major, const char *name);
+ void unregister_blkdev(unsigned int major, const char *name);
+ 
+ void revalidate_disk_size(struct gendisk *disk, bool verbose);
+ bool bdev_check_media_change(struct block_device *bdev);
+ int __invalidate_device(struct block_device *bdev, bool kill_dirty);
+ void bd_set_nr_sectors(struct block_device *bdev, sector_t sectors);
+ 
+ /* for drivers/char/raw.c: */
+ int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
+ long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
+ 
+ #ifdef CONFIG_SYSFS
+ int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
+ void bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk);
+ #else
+ static inline int bd_link_disk_holder(struct block_device *bdev,
+ 				      struct gendisk *disk)
+ {
+ 	return 0;
+ }
+ static inline void bd_unlink_disk_holder(struct block_device *bdev,
+ 					 struct gendisk *disk)
+ {
+ }
+ #endif /* CONFIG_SYSFS */
+ 
+ #ifdef CONFIG_BLOCK
+ void printk_all_partitions(void);
+ dev_t blk_lookup_devt(const char *name, int partno);
++>>>>>>> b92b53079aed (block: remove check_disk_change)
  #else /* CONFIG_BLOCK */
 -static inline void printk_all_partitions(void)
 -{
 -}
 +
 +static inline void printk_all_partitions(void) { }
 +
  static inline dev_t blk_lookup_devt(const char *name, int partno)
  {
  	dev_t devt = MKDEV(0, 0);
* Unmerged path fs/block_dev.c
* Unmerged path include/linux/genhd.h
