drivers core: Miscellaneous changes for sysfs_emit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Joe Perches <joe@perches.com>
commit 948b3edba8988306b635578a72b0dab6091a5eb0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/948b3edb.failed

Change additional instances that could use sysfs_emit and sysfs_emit_at
that the coccinelle script could not convert.

o macros creating show functions with ## concatenation
o unbound sprintf uses with buf+len for start of output to sysfs_emit_at
o returns with ?: tests and sprintf to sysfs_emit
o sysfs output with struct class * not struct device * arguments

Miscellanea:

o remove unnecessary initializations around these changes
o consistently use int len for return length of show functions
o use octal permissions and not S_<FOO>
o rename a few show function names so DEVICE_ATTR_<FOO> can be used
o use DEVICE_ATTR_ADMIN_RO where appropriate
o consistently use const char *output for strings
o checkpatch/style neatening

	Signed-off-by: Joe Perches <joe@perches.com>
Link: https://lore.kernel.org/r/8bc24444fe2049a9b2de6127389b57edfdfe324d.1600285923.git.joe@perches.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 948b3edba8988306b635578a72b0dab6091a5eb0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
#	drivers/base/cpu.c
#	drivers/base/dd.c
#	drivers/base/memory.c
#	drivers/base/node.c
#	drivers/base/power/sysfs.c
#	drivers/base/power/wakeup_stats.c
#	drivers/base/soc.c
diff --cc drivers/base/core.c
index 6c57235d97e1,398f8bb04412..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -233,21 -246,29 +233,33 @@@ static ssize_t status_show(struct devic
  
  	switch (to_devlink(dev)->status) {
  	case DL_STATE_NONE:
- 		status = "not tracked"; break;
+ 		output = "not tracked";
+ 		break;
  	case DL_STATE_DORMANT:
- 		status = "dormant"; break;
+ 		output = "dormant";
+ 		break;
  	case DL_STATE_AVAILABLE:
- 		status = "available"; break;
+ 		output = "available";
+ 		break;
  	case DL_STATE_CONSUMER_PROBE:
- 		status = "consumer probing"; break;
+ 		output = "consumer probing";
+ 		break;
  	case DL_STATE_ACTIVE:
- 		status = "active"; break;
+ 		output = "active";
+ 		break;
  	case DL_STATE_SUPPLIER_UNBIND:
- 		status = "supplier unbinding"; break;
+ 		output = "supplier unbinding";
+ 		break;
  	default:
- 		status = "unknown"; break;
+ 		output = "unknown";
+ 		break;
  	}
++<<<<<<< HEAD
 +	return sprintf(buf, "%s\n", status);
++=======
+ 
+ 	return sysfs_emit(buf, "%s\n", output);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  static DEVICE_ATTR_RO(status);
  
diff --cc drivers/base/cpu.c
index 1027e8476201,8f1d6569564c..000000000000
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@@ -156,21 -156,18 +156,32 @@@ static ssize_t crash_notes_show(struct 
  	 * operation should be safe. No locking required.
  	 */
  	addr = per_cpu_ptr_to_phys(per_cpu_ptr(crash_notes, cpunum));
++<<<<<<< HEAD
 +	rc = sprintf(buf, "%Lx\n", addr);
 +	return rc;
 +}
 +static DEVICE_ATTR(crash_notes, 0400, show_crash_notes, NULL);
++=======
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
+ 
+ 	return sysfs_emit(buf, "%llx\n", addr);
+ }
+ static DEVICE_ATTR_ADMIN_RO(crash_notes);
  
- static ssize_t show_crash_notes_size(struct device *dev,
+ static ssize_t crash_notes_size_show(struct device *dev,
  				     struct device_attribute *attr,
  				     char *buf)
  {
++<<<<<<< HEAD
 +	ssize_t rc;
 +
 +	rc = sprintf(buf, "%zu\n", sizeof(note_buf_t));
 +	return rc;
++=======
+ 	return sysfs_emit(buf, "%zu\n", sizeof(note_buf_t));
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
- static DEVICE_ATTR(crash_notes_size, 0400, show_crash_notes_size, NULL);
+ static DEVICE_ATTR_ADMIN_RO(crash_notes_size);
  
  static struct attribute *crash_note_cpu_attrs[] = {
  	&dev_attr_crash_notes.attr,
@@@ -279,7 -276,7 +290,11 @@@ static ssize_t print_cpus_isolated(stru
  
  	cpumask_andnot(isolated, cpu_possible_mask,
  		       housekeeping_cpumask(HK_FLAG_DOMAIN));
++<<<<<<< HEAD
 +	n = sprintf(buf, "%*pbl\n", cpumask_pr_args(isolated));
++=======
+ 	len = sysfs_emit(buf, "%*pbl\n", cpumask_pr_args(isolated));
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  
  	free_cpumask_var(isolated);
  
@@@ -289,9 -286,9 +304,9 @@@ static DEVICE_ATTR(isolated, 0444, prin
  
  #ifdef CONFIG_NO_HZ_FULL
  static ssize_t print_cpus_nohz_full(struct device *dev,
- 				  struct device_attribute *attr, char *buf)
+ 				    struct device_attribute *attr, char *buf)
  {
 -	return sysfs_emit(buf, "%*pbl\n", cpumask_pr_args(tick_nohz_full_mask));
 +	return sprintf(buf, "%*pbl\n", cpumask_pr_args(tick_nohz_full_mask));
  }
  static DEVICE_ATTR(nohz_full, 0444, print_cpus_nohz_full, NULL);
  #endif
@@@ -320,11 -317,12 +335,17 @@@ static ssize_t print_cpu_modalias(struc
  				  struct device_attribute *attr,
  				  char *buf)
  {
- 	ssize_t n;
+ 	int len = 0;
  	u32 i;
  
++<<<<<<< HEAD
 +	n = sprintf(buf, "cpu:type:" CPU_FEATURE_TYPEFMT ":feature:",
 +		    CPU_FEATURE_TYPEVAL);
++=======
+ 	len += sysfs_emit_at(buf, len,
+ 			     "cpu:type:" CPU_FEATURE_TYPEFMT ":feature:",
+ 			     CPU_FEATURE_TYPEVAL);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  
  	for (i = 0; i < MAX_CPU_FEATURES; i++)
  		if (cpu_have_feature(i)) {
@@@ -556,9 -555,9 +577,9 @@@ ssize_t __weak cpu_show_tsx_async_abort
  }
  
  ssize_t __weak cpu_show_itlb_multihit(struct device *dev,
- 			    struct device_attribute *attr, char *buf)
+ 				      struct device_attribute *attr, char *buf)
  {
 -	return sysfs_emit(buf, "Not affected\n");
 +	return sprintf(buf, "Not affected\n");
  }
  
  ssize_t __weak cpu_show_srbds(struct device *dev,
diff --cc drivers/base/dd.c
index 076202225c34,b52d69eb4e71..000000000000
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@@ -514,7 -486,8 +514,12 @@@ static ssize_t state_synced_show(struc
  	device_lock(dev);
  	val = dev->state_synced;
  	device_unlock(dev);
++<<<<<<< HEAD
 +	return sprintf(buf, "%u\n", val);
++=======
+ 
+ 	return sysfs_emit(buf, "%u\n", val);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  static DEVICE_ATTR_RO(state_synced);
  
diff --cc drivers/base/memory.c
index b9d6d0595d49,adf828dfccf0..000000000000
--- a/drivers/base/memory.c
+++ b/drivers/base/memory.c
@@@ -120,7 -119,8 +120,12 @@@ static ssize_t phys_index_show(struct d
  	unsigned long phys_index;
  
  	phys_index = mem->start_section_nr / sections_per_block;
++<<<<<<< HEAD
 +	return sprintf(buf, "%08lx\n", phys_index);
++=======
+ 
+ 	return sysfs_emit(buf, "%08lx\n", phys_index);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  /*
@@@ -364,7 -302,8 +369,12 @@@ static ssize_t phys_device_show(struct 
  				struct device_attribute *attr, char *buf)
  {
  	struct memory_block *mem = to_memory_block(dev);
++<<<<<<< HEAD
 +	return sprintf(buf, "%d\n", mem->phys_device);
++=======
+ 
+ 	return sysfs_emit(buf, "%d\n", mem->phys_device);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  #ifdef CONFIG_MEMORY_HOTREMOVE
@@@ -375,10 -314,10 +385,17 @@@ static void print_allowed_zone(char *bu
  	struct zone *zone;
  
  	zone = zone_for_pfn_range(online_type, nid, start_pfn, nr_pages);
++<<<<<<< HEAD
 +	if (zone != default_zone) {
 +		strcat(buf, " ");
 +		strcat(buf, zone->name);
 +	}
++=======
+ 	if (zone == default_zone)
+ 		return 0;
+ 
+ 	return sysfs_emit_at(buf, len, " %s", zone->name);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  static ssize_t valid_zones_show(struct device *dev,
@@@ -410,16 -350,15 +427,21 @@@
  	nid = mem->nid;
  	default_zone = zone_for_pfn_range(MMOP_ONLINE, nid, start_pfn,
  					  nr_pages);
 +	strcat(buf, default_zone->name);
  
 -	len += sysfs_emit_at(buf, len, "%s", default_zone->name);
 -	len += print_allowed_zone(buf, len, nid, start_pfn, nr_pages,
 -				  MMOP_ONLINE_KERNEL, default_zone);
 -	len += print_allowed_zone(buf, len, nid, start_pfn, nr_pages,
 -				  MMOP_ONLINE_MOVABLE, default_zone);
 +	print_allowed_zone(buf, nid, start_pfn, nr_pages, MMOP_ONLINE_KERNEL,
 +			default_zone);
 +	print_allowed_zone(buf, nid, start_pfn, nr_pages, MMOP_ONLINE_MOVABLE,
 +			default_zone);
  out:
++<<<<<<< HEAD
 +	strcat(buf, "\n");
 +
 +	return strlen(buf);
++=======
+ 	len += sysfs_emit_at(buf, len, "\n");
+ 	return len;
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  static DEVICE_ATTR_RO(valid_zones);
  #endif
diff --cc drivers/base/node.c
index 8633d5d90a7d,96d820f979a2..000000000000
--- a/drivers/base/node.c
+++ b/drivers/base/node.c
@@@ -369,122 -376,128 +375,195 @@@ static ssize_t node_read_meminfo(struc
  	si_meminfo_node(&i, nid);
  	sreclaimable = node_page_state_pages(pgdat, NR_SLAB_RECLAIMABLE_B);
  	sunreclaimable = node_page_state_pages(pgdat, NR_SLAB_UNRECLAIMABLE_B);
++<<<<<<< HEAD
 +	n = sprintf(buf,
 +		       "Node %d MemTotal:       %8lu kB\n"
 +		       "Node %d MemFree:        %8lu kB\n"
 +		       "Node %d MemUsed:        %8lu kB\n"
 +		       "Node %d Active:         %8lu kB\n"
 +		       "Node %d Inactive:       %8lu kB\n"
 +		       "Node %d Active(anon):   %8lu kB\n"
 +		       "Node %d Inactive(anon): %8lu kB\n"
 +		       "Node %d Active(file):   %8lu kB\n"
 +		       "Node %d Inactive(file): %8lu kB\n"
 +		       "Node %d Unevictable:    %8lu kB\n"
 +		       "Node %d Mlocked:        %8lu kB\n",
 +		       nid, K(i.totalram),
 +		       nid, K(i.freeram),
 +		       nid, K(i.totalram - i.freeram),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_ANON) +
 +				node_page_state(pgdat, NR_ACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_ANON) +
 +				node_page_state(pgdat, NR_INACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_ANON)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_ANON)),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_UNEVICTABLE)),
 +		       nid, K(sum_zone_node_page_state(nid, NR_MLOCK)));
++=======
+ 	len = sysfs_emit_at(buf, len,
+ 			    "Node %d MemTotal:       %8lu kB\n"
+ 			    "Node %d MemFree:        %8lu kB\n"
+ 			    "Node %d MemUsed:        %8lu kB\n"
+ 			    "Node %d Active:         %8lu kB\n"
+ 			    "Node %d Inactive:       %8lu kB\n"
+ 			    "Node %d Active(anon):   %8lu kB\n"
+ 			    "Node %d Inactive(anon): %8lu kB\n"
+ 			    "Node %d Active(file):   %8lu kB\n"
+ 			    "Node %d Inactive(file): %8lu kB\n"
+ 			    "Node %d Unevictable:    %8lu kB\n"
+ 			    "Node %d Mlocked:        %8lu kB\n",
+ 			    nid, K(i.totalram),
+ 			    nid, K(i.freeram),
+ 			    nid, K(i.totalram - i.freeram),
+ 			    nid, K(node_page_state(pgdat, NR_ACTIVE_ANON) +
+ 				   node_page_state(pgdat, NR_ACTIVE_FILE)),
+ 			    nid, K(node_page_state(pgdat, NR_INACTIVE_ANON) +
+ 				   node_page_state(pgdat, NR_INACTIVE_FILE)),
+ 			    nid, K(node_page_state(pgdat, NR_ACTIVE_ANON)),
+ 			    nid, K(node_page_state(pgdat, NR_INACTIVE_ANON)),
+ 			    nid, K(node_page_state(pgdat, NR_ACTIVE_FILE)),
+ 			    nid, K(node_page_state(pgdat, NR_INACTIVE_FILE)),
+ 			    nid, K(node_page_state(pgdat, NR_UNEVICTABLE)),
+ 			    nid, K(sum_zone_node_page_state(nid, NR_MLOCK)));
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  
  #ifdef CONFIG_HIGHMEM
- 	n += sprintf(buf + n,
- 		       "Node %d HighTotal:      %8lu kB\n"
- 		       "Node %d HighFree:       %8lu kB\n"
- 		       "Node %d LowTotal:       %8lu kB\n"
- 		       "Node %d LowFree:        %8lu kB\n",
- 		       nid, K(i.totalhigh),
- 		       nid, K(i.freehigh),
- 		       nid, K(i.totalram - i.totalhigh),
- 		       nid, K(i.freeram - i.freehigh));
+ 	len += sysfs_emit_at(buf, len,
+ 			     "Node %d HighTotal:      %8lu kB\n"
+ 			     "Node %d HighFree:       %8lu kB\n"
+ 			     "Node %d LowTotal:       %8lu kB\n"
+ 			     "Node %d LowFree:        %8lu kB\n",
+ 			     nid, K(i.totalhigh),
+ 			     nid, K(i.freehigh),
+ 			     nid, K(i.totalram - i.totalhigh),
+ 			     nid, K(i.freeram - i.freehigh));
  #endif
++<<<<<<< HEAD
 +	n += sprintf(buf + n,
 +		       "Node %d Dirty:          %8lu kB\n"
 +		       "Node %d Writeback:      %8lu kB\n"
 +		       "Node %d FilePages:      %8lu kB\n"
 +		       "Node %d Mapped:         %8lu kB\n"
 +		       "Node %d AnonPages:      %8lu kB\n"
 +		       "Node %d Shmem:          %8lu kB\n"
 +		       "Node %d KernelStack:    %8lu kB\n"
 +		       "Node %d PageTables:     %8lu kB\n"
 +		       "Node %d NFS_Unstable:   %8lu kB\n"
 +		       "Node %d Bounce:         %8lu kB\n"
 +		       "Node %d WritebackTmp:   %8lu kB\n"
 +		       "Node %d KReclaimable:   %8lu kB\n"
 +		       "Node %d Slab:           %8lu kB\n"
 +		       "Node %d SReclaimable:   %8lu kB\n"
 +		       "Node %d SUnreclaim:     %8lu kB\n"
++=======
+ 	len += sysfs_emit_at(buf, len,
+ 			     "Node %d Dirty:          %8lu kB\n"
+ 			     "Node %d Writeback:      %8lu kB\n"
+ 			     "Node %d FilePages:      %8lu kB\n"
+ 			     "Node %d Mapped:         %8lu kB\n"
+ 			     "Node %d AnonPages:      %8lu kB\n"
+ 			     "Node %d Shmem:          %8lu kB\n"
+ 			     "Node %d KernelStack:    %8lu kB\n"
+ #ifdef CONFIG_SHADOW_CALL_STACK
+ 			     "Node %d ShadowCallStack:%8lu kB\n"
+ #endif
+ 			     "Node %d PageTables:     %8lu kB\n"
+ 			     "Node %d NFS_Unstable:   %8lu kB\n"
+ 			     "Node %d Bounce:         %8lu kB\n"
+ 			     "Node %d WritebackTmp:   %8lu kB\n"
+ 			     "Node %d KReclaimable:   %8lu kB\n"
+ 			     "Node %d Slab:           %8lu kB\n"
+ 			     "Node %d SReclaimable:   %8lu kB\n"
+ 			     "Node %d SUnreclaim:     %8lu kB\n"
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
- 		       "Node %d AnonHugePages:  %8lu kB\n"
- 		       "Node %d ShmemHugePages: %8lu kB\n"
- 		       "Node %d ShmemPmdMapped: %8lu kB\n"
- 		       "Node %d FileHugePages: %8lu kB\n"
- 		       "Node %d FilePmdMapped: %8lu kB\n"
+ 			     "Node %d AnonHugePages:  %8lu kB\n"
+ 			     "Node %d ShmemHugePages: %8lu kB\n"
+ 			     "Node %d ShmemPmdMapped: %8lu kB\n"
+ 			     "Node %d FileHugePages: %8lu kB\n"
+ 			     "Node %d FilePmdMapped: %8lu kB\n"
  #endif
++<<<<<<< HEAD
 +			,
 +		       nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),
 +		       nid, K(node_page_state(pgdat, NR_WRITEBACK)),
 +		       nid, K(node_page_state(pgdat, NR_FILE_PAGES)),
 +		       nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),
 +		       nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),
 +		       nid, K(i.sharedram),
 +		       nid, sum_zone_node_page_state(nid, NR_KERNEL_STACK_KB),
 +		       nid, K(sum_zone_node_page_state(nid, NR_PAGETABLE)),
 +		       nid, 0UL,
 +		       nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),
 +		       nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),
 +		       nid, K(sreclaimable +
 +			      node_page_state(pgdat, NR_KERNEL_MISC_RECLAIMABLE)),
 +		       nid, K(sreclaimable + sunreclaimable),
 +		       nid, K(sreclaimable),
 +		       nid, K(sunreclaimable)
++=======
+ 			     ,
+ 			     nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),
+ 			     nid, K(node_page_state(pgdat, NR_WRITEBACK)),
+ 			     nid, K(node_page_state(pgdat, NR_FILE_PAGES)),
+ 			     nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),
+ 			     nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),
+ 			     nid, K(i.sharedram),
+ 			     nid, node_page_state(pgdat, NR_KERNEL_STACK_KB),
+ #ifdef CONFIG_SHADOW_CALL_STACK
+ 			     nid, node_page_state(pgdat, NR_KERNEL_SCS_KB),
+ #endif
+ 			     nid, K(sum_zone_node_page_state(nid, NR_PAGETABLE)),
+ 			     nid, 0UL,
+ 			     nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),
+ 			     nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),
+ 			     nid, K(sreclaimable +
+ 				    node_page_state(pgdat, NR_KERNEL_MISC_RECLAIMABLE)),
+ 			     nid, K(sreclaimable + sunreclaimable),
+ 			     nid, K(sreclaimable),
+ 			     nid, K(sunreclaimable)
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
- 		       ,
- 		       nid, K(node_page_state(pgdat, NR_ANON_THPS) *
- 				       HPAGE_PMD_NR),
- 		       nid, K(node_page_state(pgdat, NR_SHMEM_THPS) *
- 				       HPAGE_PMD_NR),
- 		       nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *
- 				       HPAGE_PMD_NR),
- 		       nid, K(node_page_state(pgdat, NR_FILE_THPS) *
- 				       HPAGE_PMD_NR),
- 		       nid, K(node_page_state(pgdat, NR_FILE_PMDMAPPED) *
- 				       HPAGE_PMD_NR)
+ 			     ,
+ 			     nid, K(node_page_state(pgdat, NR_ANON_THPS) *
+ 				    HPAGE_PMD_NR),
+ 			     nid, K(node_page_state(pgdat, NR_SHMEM_THPS) *
+ 				    HPAGE_PMD_NR),
+ 			     nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *
+ 				    HPAGE_PMD_NR),
+ 			     nid, K(node_page_state(pgdat, NR_FILE_THPS) *
+ 				    HPAGE_PMD_NR),
+ 			     nid, K(node_page_state(pgdat, NR_FILE_PMDMAPPED) *
+ 				    HPAGE_PMD_NR)
  #endif
- 		       );
- 	n += hugetlb_report_node_meminfo(nid, buf + n);
- 	return n;
+ 			    );
+ 	len += hugetlb_report_node_meminfo(nid, buf + len);
+ 	return len;
  }
  
  #undef K
- static DEVICE_ATTR(meminfo, S_IRUGO, node_read_meminfo, NULL);
+ static DEVICE_ATTR(meminfo, 0444, node_read_meminfo, NULL);
  
  static ssize_t node_read_numastat(struct device *dev,
- 				struct device_attribute *attr, char *buf)
+ 				  struct device_attribute *attr, char *buf)
  {
 -	return sysfs_emit(buf,
 -			  "numa_hit %lu\n"
 -			  "numa_miss %lu\n"
 -			  "numa_foreign %lu\n"
 -			  "interleave_hit %lu\n"
 -			  "local_node %lu\n"
 -			  "other_node %lu\n",
 -			  sum_zone_numa_state(dev->id, NUMA_HIT),
 -			  sum_zone_numa_state(dev->id, NUMA_MISS),
 -			  sum_zone_numa_state(dev->id, NUMA_FOREIGN),
 -			  sum_zone_numa_state(dev->id, NUMA_INTERLEAVE_HIT),
 -			  sum_zone_numa_state(dev->id, NUMA_LOCAL),
 -			  sum_zone_numa_state(dev->id, NUMA_OTHER));
 +	return sprintf(buf,
 +		       "numa_hit %lu\n"
 +		       "numa_miss %lu\n"
 +		       "numa_foreign %lu\n"
 +		       "interleave_hit %lu\n"
 +		       "local_node %lu\n"
 +		       "other_node %lu\n",
 +		       sum_zone_numa_state(dev->id, NUMA_HIT),
 +		       sum_zone_numa_state(dev->id, NUMA_MISS),
 +		       sum_zone_numa_state(dev->id, NUMA_FOREIGN),
 +		       sum_zone_numa_state(dev->id, NUMA_INTERLEAVE_HIT),
 +		       sum_zone_numa_state(dev->id, NUMA_LOCAL),
 +		       sum_zone_numa_state(dev->id, NUMA_OTHER));
  }
- static DEVICE_ATTR(numastat, S_IRUGO, node_read_numastat, NULL);
+ static DEVICE_ATTR(numastat, 0444, node_read_numastat, NULL);
  
  static ssize_t node_read_vmstat(struct device *dev,
  				struct device_attribute *attr, char *buf)
diff --cc drivers/base/power/sysfs.c
index 1c98f76a805a,a1474fb67db9..000000000000
--- a/drivers/base/power/sysfs.c
+++ b/drivers/base/power/sysfs.c
@@@ -123,25 -122,27 +123,37 @@@ static ssize_t control_store(struct dev
  static DEVICE_ATTR_RW(control);
  
  static ssize_t runtime_active_time_show(struct device *dev,
- 				struct device_attribute *attr, char *buf)
+ 					struct device_attribute *attr,
+ 					char *buf)
  {
- 	int ret;
  	u64 tmp = pm_runtime_active_time(dev);
+ 
  	do_div(tmp, NSEC_PER_MSEC);
++<<<<<<< HEAD
 +	ret = sprintf(buf, "%llu\n", tmp);
 +	return ret;
++=======
+ 
+ 	return sysfs_emit(buf, "%llu\n", tmp);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  static DEVICE_ATTR_RO(runtime_active_time);
  
  static ssize_t runtime_suspended_time_show(struct device *dev,
- 				struct device_attribute *attr, char *buf)
+ 					   struct device_attribute *attr,
+ 					   char *buf)
  {
- 	int ret;
  	u64 tmp = pm_runtime_suspended_time(dev);
+ 
  	do_div(tmp, NSEC_PER_MSEC);
++<<<<<<< HEAD
 +	ret = sprintf(buf, "%llu\n", tmp);
 +	return ret;
++=======
+ 
+ 	return sysfs_emit(buf, "%llu\n", tmp);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  static DEVICE_ATTR_RO(runtime_suspended_time);
@@@ -173,7 -174,7 +185,11 @@@ static ssize_t runtime_status_show(stru
  			return -EIO;
  		}
  	}
++<<<<<<< HEAD
 +	return sprintf(buf, p);
++=======
+ 	return sysfs_emit(buf, "%s\n", output);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  static DEVICE_ATTR_RO(runtime_status);
@@@ -183,7 -185,8 +200,12 @@@ static ssize_t autosuspend_delay_ms_sho
  {
  	if (!dev->power.use_autosuspend)
  		return -EIO;
++<<<<<<< HEAD
 +	return sprintf(buf, "%d\n", dev->power.autosuspend_delay);
++=======
+ 
+ 	return sysfs_emit(buf, "%d\n", dev->power.autosuspend_delay);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  
  static ssize_t autosuspend_delay_ms_store(struct device *dev,
@@@ -479,9 -503,20 +522,12 @@@ static ssize_t wakeup_last_time_ms_show
  		enabled = true;
  	}
  	spin_unlock_irq(&dev->power.lock);
- 	return enabled ? sprintf(buf, "%lld\n", msec) : sprintf(buf, "\n");
+ 
+ 	if (!enabled)
+ 		return sysfs_emit(buf, "\n");
+ 	return sysfs_emit(buf, "%lld\n", msec);
  }
  
 -static inline int dpm_sysfs_wakeup_change_owner(struct device *dev, kuid_t kuid,
 -						kgid_t kgid)
 -{
 -	if (dev->power.wakeup && dev->power.wakeup->dev)
 -		return device_change_owner(dev->power.wakeup->dev, kuid, kgid);
 -	return 0;
 -}
 -
  static DEVICE_ATTR_RO(wakeup_last_time_ms);
  
  #ifdef CONFIG_PM_AUTOSLEEP
diff --cc drivers/base/power/wakeup_stats.c
index c7734914d914,d638259b829a..000000000000
--- a/drivers/base/power/wakeup_stats.c
+++ b/drivers/base/power/wakeup_stats.c
@@@ -57,7 -57,8 +57,12 @@@ static ssize_t total_time_ms_show(struc
  		active_time = ktime_sub(ktime_get(), ws->last_time);
  		total_time = ktime_add(total_time, active_time);
  	}
++<<<<<<< HEAD
 +	return sprintf(buf, "%lld\n", ktime_to_ms(total_time));
++=======
+ 
+ 	return sysfs_emit(buf, "%lld\n", ktime_to_ms(total_time));
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  static DEVICE_ATTR_RO(total_time_ms);
  
@@@ -73,7 -74,8 +78,12 @@@ static ssize_t max_time_ms_show(struct 
  		if (active_time > max_time)
  			max_time = active_time;
  	}
++<<<<<<< HEAD
 +	return sprintf(buf, "%lld\n", ktime_to_ms(max_time));
++=======
+ 
+ 	return sysfs_emit(buf, "%lld\n", ktime_to_ms(max_time));
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  static DEVICE_ATTR_RO(max_time_ms);
  
@@@ -106,7 -108,8 +116,12 @@@ static ssize_t prevent_suspend_time_ms_
  		prevent_sleep_time = ktime_add(prevent_sleep_time,
  			ktime_sub(ktime_get(), ws->start_prevent_time));
  	}
++<<<<<<< HEAD
 +	return sprintf(buf, "%lld\n", ktime_to_ms(prevent_sleep_time));
++=======
+ 
+ 	return sysfs_emit(buf, "%lld\n", ktime_to_ms(prevent_sleep_time));
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  }
  static DEVICE_ATTR_RO(prevent_suspend_time_ms);
  
diff --cc drivers/base/soc.c
index 10b280f30217,d34609bb7386..000000000000
--- a/drivers/base/soc.c
+++ b/drivers/base/soc.c
@@@ -31,10 -31,11 +31,18 @@@ static struct bus_type soc_bus_type = 
  	.name  = "soc",
  };
  
++<<<<<<< HEAD
 +static DEVICE_ATTR(machine,  S_IRUGO, soc_info_get,  NULL);
 +static DEVICE_ATTR(family,   S_IRUGO, soc_info_get,  NULL);
 +static DEVICE_ATTR(soc_id,   S_IRUGO, soc_info_get,  NULL);
 +static DEVICE_ATTR(revision, S_IRUGO, soc_info_get,  NULL);
++=======
+ static DEVICE_ATTR(machine,		0444, soc_info_show,  NULL);
+ static DEVICE_ATTR(family,		0444, soc_info_show,  NULL);
+ static DEVICE_ATTR(serial_number,	0444, soc_info_show,  NULL);
+ static DEVICE_ATTR(soc_id,		0444, soc_info_show,  NULL);
+ static DEVICE_ATTR(revision,		0444, soc_info_show,  NULL);
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  
  struct device *soc_device_to_device(struct soc_device *soc_dev)
  {
@@@ -45,43 -46,44 +53,61 @@@ static umode_t soc_attribute_mode(struc
  				struct attribute *attr,
  				int index)
  {
 -	struct device *dev = kobj_to_dev(kobj);
 +	struct device *dev = container_of(kobj, struct device, kobj);
  	struct soc_device *soc_dev = container_of(dev, struct soc_device, dev);
  
- 	if ((attr == &dev_attr_machine.attr)
- 	    && (soc_dev->attr->machine != NULL))
+ 	if ((attr == &dev_attr_machine.attr) && soc_dev->attr->machine)
  		return attr->mode;
- 	if ((attr == &dev_attr_family.attr)
- 	    && (soc_dev->attr->family != NULL))
+ 	if ((attr == &dev_attr_family.attr) && soc_dev->attr->family)
  		return attr->mode;
- 	if ((attr == &dev_attr_revision.attr)
- 	    && (soc_dev->attr->revision != NULL))
+ 	if ((attr == &dev_attr_revision.attr) && soc_dev->attr->revision)
  		return attr->mode;
++<<<<<<< HEAD
 +	if ((attr == &dev_attr_soc_id.attr)
 +	    && (soc_dev->attr->soc_id != NULL))
++=======
+ 	if ((attr == &dev_attr_serial_number.attr) && soc_dev->attr->serial_number)
+ 		return attr->mode;
+ 	if ((attr == &dev_attr_soc_id.attr) && soc_dev->attr->soc_id)
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  		return attr->mode;
  
- 	/* Unknown or unfilled attribute. */
+ 	/* Unknown or unfilled attribute */
  	return 0;
  }
  
- static ssize_t soc_info_get(struct device *dev,
- 			    struct device_attribute *attr,
- 			    char *buf)
+ static ssize_t soc_info_show(struct device *dev, struct device_attribute *attr,
+ 			     char *buf)
  {
  	struct soc_device *soc_dev = container_of(dev, struct soc_device, dev);
+ 	const char *output;
  
  	if (attr == &dev_attr_machine)
++<<<<<<< HEAD
 +		return sprintf(buf, "%s\n", soc_dev->attr->machine);
 +	if (attr == &dev_attr_family)
 +		return sprintf(buf, "%s\n", soc_dev->attr->family);
 +	if (attr == &dev_attr_revision)
 +		return sprintf(buf, "%s\n", soc_dev->attr->revision);
 +	if (attr == &dev_attr_soc_id)
 +		return sprintf(buf, "%s\n", soc_dev->attr->soc_id);
 +
 +	return -EINVAL;
++=======
+ 		output = soc_dev->attr->machine;
+ 	else if (attr == &dev_attr_family)
+ 		output = soc_dev->attr->family;
+ 	else if (attr == &dev_attr_revision)
+ 		output = soc_dev->attr->revision;
+ 	else if (attr == &dev_attr_serial_number)
+ 		output = soc_dev->attr->serial_number;
+ 	else if (attr == &dev_attr_soc_id)
+ 		output = soc_dev->attr->soc_id;
+ 	else
+ 		return -EINVAL;
++>>>>>>> 948b3edba898 (drivers core: Miscellaneous changes for sysfs_emit)
  
+ 	return sysfs_emit(buf, "%s\n", output);
  }
  
  static struct attribute *soc_attr[] = {
diff --git a/drivers/base/bus.c b/drivers/base/bus.c
index a1d1e8256324..3469c00c238f 100644
--- a/drivers/base/bus.c
+++ b/drivers/base/bus.c
@@ -228,7 +228,7 @@ static DRIVER_ATTR_IGNORE_LOCKDEP(bind, S_IWUSR, NULL, bind_store);
 
 static ssize_t drivers_autoprobe_show(struct bus_type *bus, char *buf)
 {
-	return sprintf(buf, "%d\n", bus->p->drivers_autoprobe);
+	return sysfs_emit(buf, "%d\n", bus->p->drivers_autoprobe);
 }
 
 static ssize_t drivers_autoprobe_store(struct bus_type *bus,
diff --git a/drivers/base/cacheinfo.c b/drivers/base/cacheinfo.c
index dbd7c00c9b7a..0f79e3786241 100644
--- a/drivers/base/cacheinfo.c
+++ b/drivers/base/cacheinfo.c
@@ -368,7 +368,7 @@ static ssize_t file_name##_show(struct device *dev,		\
 		struct device_attribute *attr, char *buf)	\
 {								\
 	struct cacheinfo *this_leaf = dev_get_drvdata(dev);	\
-	return sprintf(buf, "%u\n", this_leaf->object);		\
+	return sysfs_emit(buf, "%u\n", this_leaf->object);	\
 }
 
 show_one(id, id);
diff --git a/drivers/base/class.c b/drivers/base/class.c
index 54def4e02f00..4c103bd8d525 100644
--- a/drivers/base/class.c
+++ b/drivers/base/class.c
@@ -471,7 +471,7 @@ ssize_t show_class_attr_string(struct class *class,
 	struct class_attribute_string *cs;
 
 	cs = container_of(attr, struct class_attribute_string, attr);
-	return snprintf(buf, PAGE_SIZE, "%s\n", cs->str);
+	return sysfs_emit(buf, "%s\n", cs->str);
 }
 
 EXPORT_SYMBOL_GPL(show_class_attr_string);
* Unmerged path drivers/base/core.c
* Unmerged path drivers/base/cpu.c
* Unmerged path drivers/base/dd.c
diff --git a/drivers/base/devcoredump.c b/drivers/base/devcoredump.c
index f1a3353f3494..22deb0dd8a8c 100644
--- a/drivers/base/devcoredump.c
+++ b/drivers/base/devcoredump.c
@@ -123,7 +123,7 @@ static int devcd_free(struct device *dev, void *data)
 static ssize_t disabled_show(struct class *class, struct class_attribute *attr,
 			     char *buf)
 {
-	return sprintf(buf, "%d\n", devcd_disabled);
+	return sysfs_emit(buf, "%d\n", devcd_disabled);
 }
 
 static ssize_t disabled_store(struct class *class, struct class_attribute *attr,
diff --git a/drivers/base/firmware_loader/fallback.c b/drivers/base/firmware_loader/fallback.c
index ccd6212d3b91..502070c48a1b 100644
--- a/drivers/base/firmware_loader/fallback.c
+++ b/drivers/base/firmware_loader/fallback.c
@@ -121,7 +121,7 @@ void kill_pending_fw_fallback_reqs(bool only_kill_custom)
 static ssize_t timeout_show(struct class *class, struct class_attribute *attr,
 			    char *buf)
 {
-	return sprintf(buf, "%d\n", __firmware_loading_timeout());
+	return sysfs_emit(buf, "%d\n", __firmware_loading_timeout());
 }
 
 /**
* Unmerged path drivers/base/memory.c
* Unmerged path drivers/base/node.c
diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index e9e976b429fc..ea8132911d6a 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -918,10 +918,10 @@ EXPORT_SYMBOL_GPL(platform_unregister_drivers);
  * (b) sysfs attribute lets new-style coldplug recover from hotplug events
  *     mishandled before system is fully running:  "modprobe $(cat modalias)"
  */
-static ssize_t modalias_show(struct device *dev, struct device_attribute *a,
-			     char *buf)
+static ssize_t modalias_show(struct device *dev,
+			     struct device_attribute *attr, char *buf)
 {
-	struct platform_device	*pdev = to_platform_device(dev);
+	struct platform_device *pdev = to_platform_device(dev);
 	int len;
 
 	len = of_device_modalias(dev, buf, PAGE_SIZE);
@@ -932,9 +932,7 @@ static ssize_t modalias_show(struct device *dev, struct device_attribute *a,
 	if (len != -ENODEV)
 		return len;
 
-	len = snprintf(buf, PAGE_SIZE, "platform:%s\n", pdev->name);
-
-	return (len >= PAGE_SIZE) ? (PAGE_SIZE - 1) : len;
+	return sysfs_emit(buf, "platform:%s\n", pdev->name);
 }
 static DEVICE_ATTR_RO(modalias);
 
@@ -981,12 +979,13 @@ static ssize_t driver_override_show(struct device *dev,
 	device_lock(dev);
 	len = sprintf(buf, "%s\n", pdev->driver_override);
 	device_unlock(dev);
+
 	return len;
 }
 static DEVICE_ATTR_RW(driver_override);
 
 static ssize_t numa_node_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
+			      struct device_attribute *attr, char *buf)
 {
 	return sprintf(buf, "%d\n", dev_to_node(dev));
 }
* Unmerged path drivers/base/power/sysfs.c
* Unmerged path drivers/base/power/wakeup_stats.c
* Unmerged path drivers/base/soc.c
diff --git a/drivers/base/topology.c b/drivers/base/topology.c
index 4e033d4cc0dc..40961c8ff723 100644
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@ -14,11 +14,11 @@
 #include <linux/hardirq.h>
 #include <linux/topology.h>
 
-#define define_id_show_func(name)				\
-static ssize_t name##_show(struct device *dev,			\
-		struct device_attribute *attr, char *buf)	\
-{								\
-	return sprintf(buf, "%d\n", topology_##name(dev->id));	\
+#define define_id_show_func(name)					\
+static ssize_t name##_show(struct device *dev,				\
+			   struct device_attribute *attr, char *buf)	\
+{									\
+	return sysfs_emit(buf, "%d\n", topology_##name(dev->id));	\
 }
 
 #define define_siblings_show_map(name, mask)				\
