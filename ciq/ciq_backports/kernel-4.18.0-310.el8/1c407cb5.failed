RDMA: Check flags during create_cq

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jason Gunthorpe <jgg@nvidia.com>
commit 1c407cb5d70568a57a32a0e6f5aee27c5083ef37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/1c407cb5.failed

Each driver should check that the CQ attrs is supported. Unfortuantely
when flags was added to the CQ attrs the drivers were not updated,
uverbs_ex_cmd_mask was used to block it. This was missed when create CQ
was converted to ioctl, so non-zero flags could have been passed into
drivers.

Check that flags is zero in all drivers that don't use it, remove
IB_USER_VERBS_EX_CMD_CREATE_CQ from uverbs_ex_cmd_mask.

Fixes: 41b2a71fc848 ("IB/uverbs: Move ioctl path of create_cq and destroy_cq to a new file")
Link: https://lore.kernel.org/r/7-v1-caa70ba3d1ab+1436e-ucmd_mask_jgg@nvidia.com
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 1c407cb5d70568a57a32a0e6f5aee27c5083ef37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/device.c
#	drivers/infiniband/hw/mlx4/main.c
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/core/device.c
index 30a7bf1c3b41,64129646f6a6..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -601,9 -601,48 +601,54 @@@ struct ib_device *_ib_alloc_device(size
  	init_completion(&device->unreg_completion);
  	INIT_WORK(&device->unregistration_work, ib_unregister_work);
  
++<<<<<<< HEAD
 +	spin_lock_init(&device->cq_pools_lock);
 +	for (i = 0; i < ARRAY_SIZE(device->cq_pools); i++)
 +		INIT_LIST_HEAD(&device->cq_pools[i]);
++=======
+ 	device->uverbs_cmd_mask =
+ 		BIT_ULL(IB_USER_VERBS_CMD_ALLOC_MW) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_ALLOC_PD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_ATTACH_MCAST) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CLOSE_XRCD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_XSRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEALLOC_MW) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEALLOC_PD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEREG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DETACH_MCAST) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_GET_CONTEXT) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_MODIFY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_MODIFY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_OPEN_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_OPEN_XRCD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_DEVICE) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_PORT) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_REG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_REREG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_RESIZE_CQ);
+ 
+ 	device->uverbs_ex_cmd_mask =
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_FLOW) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_RWQ_IND_TBL) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_CREATE_WQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_DESTROY_FLOW) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_DESTROY_RWQ_IND_TBL) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_DESTROY_WQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_MODIFY_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_MODIFY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_MODIFY_WQ) |
+ 		BIT_ULL(IB_USER_VERBS_EX_CMD_QUERY_DEVICE);
++>>>>>>> 1c407cb5d705 (RDMA: Check flags during create_cq)
  
  	return device;
  }
diff --cc drivers/infiniband/hw/mlx4/main.c
index 83d23bae44ad,c2c66b958b83..000000000000
--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@@ -2655,37 -2657,8 +2655,40 @@@ static void *mlx4_ib_add(struct mlx4_de
  	ibdev->ib_dev.num_comp_vectors	= dev->caps.num_comp_vectors;
  	ibdev->ib_dev.dev.parent	= &dev->persist->pdev->dev;
  
 +	ibdev->ib_dev.uverbs_cmd_mask	=
 +		(1ull << IB_USER_VERBS_CMD_GET_CONTEXT)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_DEVICE)	|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_PORT)		|
 +		(1ull << IB_USER_VERBS_CMD_ALLOC_PD)		|
 +		(1ull << IB_USER_VERBS_CMD_DEALLOC_PD)		|
 +		(1ull << IB_USER_VERBS_CMD_REG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_REREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_DEREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_RESIZE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_ATTACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_DETACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_XSRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_OPEN_QP);
 +
  	ib_set_device_ops(&ibdev->ib_dev, &mlx4_ib_dev_ops);
  	ibdev->ib_dev.uverbs_ex_cmd_mask |=
++<<<<<<< HEAD
 +		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_CQ) |
 +		(1ull << IB_USER_VERBS_EX_CMD_QUERY_DEVICE) |
 +		(1ull << IB_USER_VERBS_EX_CMD_CREATE_CQ) |
++=======
++>>>>>>> 1c407cb5d705 (RDMA: Check flags during create_cq)
  		(1ull << IB_USER_VERBS_EX_CMD_CREATE_QP);
  
  	if ((dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_RSS) &&
diff --cc drivers/infiniband/hw/mlx5/main.c
index 97d5f414e693,261cc669aaf1..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -4150,41 -4139,11 +4150,47 @@@ static int mlx5_ib_stage_caps_init(stru
  	struct mlx5_core_dev *mdev = dev->mdev;
  	int err;
  
 -	dev->ib_dev.uverbs_cmd_mask |=
 +	dev->ib_dev.uverbs_cmd_mask	=
 +		(1ull << IB_USER_VERBS_CMD_GET_CONTEXT)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_DEVICE)	|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_PORT)		|
 +		(1ull << IB_USER_VERBS_CMD_ALLOC_PD)		|
 +		(1ull << IB_USER_VERBS_CMD_DEALLOC_PD)		|
  		(1ull << IB_USER_VERBS_CMD_CREATE_AH)		|
++<<<<<<< HEAD
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_AH)		|
 +		(1ull << IB_USER_VERBS_CMD_REG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_REREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_DEREG_MR)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_RESIZE_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_CQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_QP)		|
 +		(1ull << IB_USER_VERBS_CMD_ATTACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_DETACH_MCAST)	|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_MODIFY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_QUERY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_DESTROY_SRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_CREATE_XSRQ)		|
 +		(1ull << IB_USER_VERBS_CMD_OPEN_QP);
 +	dev->ib_dev.uverbs_ex_cmd_mask =
 +		(1ull << IB_USER_VERBS_EX_CMD_QUERY_DEVICE)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_CREATE_CQ)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_CREATE_QP)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_QP)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_MODIFY_CQ)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_CREATE_FLOW)	|
 +		(1ull << IB_USER_VERBS_EX_CMD_DESTROY_FLOW);
++=======
+ 		(1ull << IB_USER_VERBS_CMD_DESTROY_AH);
+ 	dev->ib_dev.uverbs_ex_cmd_mask |=
+ 		(1ull << IB_USER_VERBS_EX_CMD_CREATE_QP);
++>>>>>>> 1c407cb5d705 (RDMA: Check flags during create_cq)
  
  	if (MLX5_CAP_GEN(mdev, ipoib_enhanced_offloads) &&
  	    IS_ENABLED(CONFIG_MLX5_CORE_IPOIB))
* Unmerged path drivers/infiniband/core/device.c
diff --git a/drivers/infiniband/hw/bnxt_re/ib_verbs.c b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
index f9705083f078..45e37f5d6a7d 100644
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.c
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
@@ -2831,6 +2831,9 @@ int bnxt_re_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 	struct bnxt_qplib_nq *nq = NULL;
 	unsigned int nq_alloc_cnt;
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	/* Validate CQ fields */
 	if (cqe < 1 || cqe > dev_attr->max_cq_wqes) {
 		ibdev_err(&rdev->ibdev, "Failed to create CQ -max exceeded");
diff --git a/drivers/infiniband/hw/cxgb4/cq.c b/drivers/infiniband/hw/cxgb4/cq.c
index eeac14ea20e5..35fd1d227b00 100644
--- a/drivers/infiniband/hw/cxgb4/cq.c
+++ b/drivers/infiniband/hw/cxgb4/cq.c
@@ -1005,7 +1005,7 @@ int c4iw_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 
 	pr_debug("ib_dev %p entries %d\n", ibdev, entries);
 	if (attr->flags)
-		return -EINVAL;
+		return -EOPNOTSUPP;
 
 	if (entries < 1 || entries > ibdev->attrs.max_cqe)
 		return -EINVAL;
diff --git a/drivers/infiniband/hw/efa/efa_verbs.c b/drivers/infiniband/hw/efa/efa_verbs.c
index f5dd28c29cff..21555f9c8e80 100644
--- a/drivers/infiniband/hw/efa/efa_verbs.c
+++ b/drivers/infiniband/hw/efa/efa_verbs.c
@@ -1028,6 +1028,9 @@ int efa_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 
 	ibdev_dbg(ibdev, "create_cq entries %d\n", entries);
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	if (entries < 1 || entries > dev->dev_attr.max_cq_depth) {
 		ibdev_dbg(ibdev,
 			  "cq: requested entries[%u] non-positive or greater than max[%u]\n",
diff --git a/drivers/infiniband/hw/hns/hns_roce_cq.c b/drivers/infiniband/hw/hns/hns_roce_cq.c
index 1e37a8dee784..265712a87cea 100644
--- a/drivers/infiniband/hw/hns/hns_roce_cq.c
+++ b/drivers/infiniband/hw/hns/hns_roce_cq.c
@@ -323,6 +323,9 @@ int hns_roce_ib_create_cq(struct ib_cq *ib_cq,
 	struct hns_roce_ucontext *context = rdma_udata_to_drv_context(
 		udata, struct hns_roce_ucontext, ibucontext);
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	if (cq_entries < 1 || cq_entries > hr_dev->caps.max_cqes) {
 		dev_err(dev, "Creat CQ failed. entries=%d, max=%d\n",
 			cq_entries, hr_dev->caps.max_cqes);
diff --git a/drivers/infiniband/hw/i40iw/i40iw_verbs.c b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
index f03d9769941c..33a99bf9a25e 100644
--- a/drivers/infiniband/hw/i40iw/i40iw_verbs.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
@@ -1106,6 +1106,9 @@ static int i40iw_create_cq(struct ib_cq *ibcq,
 	int err_code;
 	int entries = attr->cqe;
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	if (iwdev->closing)
 		return -ENODEV;
 
* Unmerged path drivers/infiniband/hw/mlx4/main.c
* Unmerged path drivers/infiniband/hw/mlx5/main.c
diff --git a/drivers/infiniband/hw/mthca/mthca_provider.c b/drivers/infiniband/hw/mthca/mthca_provider.c
index 368e0268177f..24804749f20b 100644
--- a/drivers/infiniband/hw/mthca/mthca_provider.c
+++ b/drivers/infiniband/hw/mthca/mthca_provider.c
@@ -608,7 +608,7 @@ static int mthca_create_cq(struct ib_cq *ibcq,
 		udata, struct mthca_ucontext, ibucontext);
 
 	if (attr->flags)
-		return -EINVAL;
+		return -EOPNOTSUPP;
 
 	if (entries < 1 || entries > to_mdev(ibdev)->limits.max_cqes)
 		return -EINVAL;
diff --git a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
index bbeb7234154f..c2c44c5e254a 100644
--- a/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_verbs.c
@@ -988,7 +988,7 @@ int ocrdma_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 	struct ocrdma_create_cq_ureq ureq;
 
 	if (attr->flags)
-		return -EINVAL;
+		return -EOPNOTSUPP;
 
 	if (udata) {
 		if (ib_copy_from_udata(&ureq, udata, sizeof(ureq)))
diff --git a/drivers/infiniband/hw/qedr/verbs.c b/drivers/infiniband/hw/qedr/verbs.c
index b1278a5a7205..75d361581d9d 100644
--- a/drivers/infiniband/hw/qedr/verbs.c
+++ b/drivers/infiniband/hw/qedr/verbs.c
@@ -928,6 +928,9 @@ int qedr_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 		 "create_cq: called from %s. entries=%d, vector=%d\n",
 		 udata ? "User Lib" : "Kernel", entries, vector);
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	if (entries > QEDR_MAX_CQES) {
 		DP_ERR(dev,
 		       "create cq: the number of entries %d is too high. Must be equal or below %d.\n",
diff --git a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
index b8dca2ea9769..4097470b38a2 100644
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
@@ -602,7 +602,7 @@ int usnic_ib_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 		       struct ib_udata *udata)
 {
 	if (attr->flags)
-		return -EINVAL;
+		return -EOPNOTSUPP;
 
 	return 0;
 }
diff --git a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
index 84aa587eac24..a092af8ef3f2 100644
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_cq.c
@@ -119,6 +119,9 @@ int pvrdma_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 
 	BUILD_BUG_ON(sizeof(struct pvrdma_cqe) != 64);
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	entries = roundup_pow_of_two(entries);
 	if (entries < 1 || entries > dev->dsr->caps.max_cqe)
 		return -EINVAL;
diff --git a/drivers/infiniband/sw/rdmavt/cq.c b/drivers/infiniband/sw/rdmavt/cq.c
index 04d2e72017fe..498aaaf022d2 100644
--- a/drivers/infiniband/sw/rdmavt/cq.c
+++ b/drivers/infiniband/sw/rdmavt/cq.c
@@ -211,7 +211,7 @@ int rvt_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 	int err;
 
 	if (attr->flags)
-		return -EINVAL;
+		return -EOPNOTSUPP;
 
 	if (entries < 1 || entries > rdi->dparms.props.max_cqe)
 		return -EINVAL;
diff --git a/drivers/infiniband/sw/rxe/rxe_verbs.c b/drivers/infiniband/sw/rxe/rxe_verbs.c
index 6f655b55dded..912142b9d527 100644
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@ -764,7 +764,7 @@ static int rxe_create_cq(struct ib_cq *ibcq, const struct ib_cq_init_attr *attr,
 	}
 
 	if (attr->flags)
-		return -EINVAL;
+		return -EOPNOTSUPP;
 
 	err = rxe_cq_chk_attr(rxe, NULL, attr->cqe, attr->comp_vector);
 	if (err)
diff --git a/drivers/infiniband/sw/siw/siw_verbs.c b/drivers/infiniband/sw/siw/siw_verbs.c
index db44999ac086..44e18743d077 100644
--- a/drivers/infiniband/sw/siw/siw_verbs.c
+++ b/drivers/infiniband/sw/siw/siw_verbs.c
@@ -1101,6 +1101,9 @@ int siw_create_cq(struct ib_cq *base_cq, const struct ib_cq_init_attr *attr,
 	struct siw_cq *cq = to_siw_cq(base_cq);
 	int rv, size = attr->cqe;
 
+	if (attr->flags)
+		return -EOPNOTSUPP;
+
 	if (atomic_inc_return(&sdev->num_cq) > SIW_MAX_CQ) {
 		siw_dbg(base_cq->device, "too many CQ's\n");
 		rv = -ENOMEM;
