scsi: sd: sd_zbc: Fix handling of host-aware ZBC disks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit 27ba3e8ff3ab86449e63d38a8d623053591e65fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/27ba3e8f.failed

When CONFIG_BLK_DEV_ZONED is disabled, allow using host-aware ZBC disks as
regular disks. In this case, ensure that command completion is correctly
executed by changing sd_zbc_complete() to return good_bytes instead of 0
and causing a hang during device probe (endless retries).

When CONFIG_BLK_DEV_ZONED is enabled and a host-aware disk is detected to
have partitions, it will be used as a regular disk. In this case, make sure
to not do anything in sd_zbc_revalidate_zones() as that triggers warnings.

Since all these different cases result in subtle settings of the disk queue
zoned model, introduce the block layer helper function
blk_queue_set_zoned() to generically implement setting up the effective
zoned model according to the disk type, the presence of partitions on the
disk and CONFIG_BLK_DEV_ZONED configuration.

Link: https://lore.kernel.org/r/20200915073347.832424-2-damien.lemoal@wdc.com
Fixes: b72053072c0b ("block: allow partitions on host aware zone devices")
	Cc: <stable@vger.kernel.org>
	Reported-by: Borislav Petkov <bp@alien8.de>
	Suggested-by: Christoph Hellwig <hch@infradead.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 27ba3e8ff3ab86449e63d38a8d623053591e65fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-settings.c
#	drivers/scsi/sd_zbc.c
diff --cc block/blk-settings.c
index 2100536d6588,34b721a2743a..000000000000
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@@ -905,6 -779,74 +905,77 @@@ void blk_queue_required_elevator_featur
  }
  EXPORT_SYMBOL_GPL(blk_queue_required_elevator_features);
  
++<<<<<<< HEAD
++=======
+ /**
+  * blk_queue_can_use_dma_map_merging - configure queue for merging segments.
+  * @q:		the request queue for the device
+  * @dev:	the device pointer for dma
+  *
+  * Tell the block layer about merging the segments by dma map of @q.
+  */
+ bool blk_queue_can_use_dma_map_merging(struct request_queue *q,
+ 				       struct device *dev)
+ {
+ 	unsigned long boundary = dma_get_merge_boundary(dev);
+ 
+ 	if (!boundary)
+ 		return false;
+ 
+ 	/* No need to update max_segment_size. see blk_queue_virt_boundary() */
+ 	blk_queue_virt_boundary(q, boundary);
+ 
+ 	return true;
+ }
+ EXPORT_SYMBOL_GPL(blk_queue_can_use_dma_map_merging);
+ 
+ /**
+  * blk_queue_set_zoned - configure a disk queue zoned model.
+  * @disk:	the gendisk of the queue to configure
+  * @model:	the zoned model to set
+  *
+  * Set the zoned model of the request queue of @disk according to @model.
+  * When @model is BLK_ZONED_HM (host managed), this should be called only
+  * if zoned block device support is enabled (CONFIG_BLK_DEV_ZONED option).
+  * If @model specifies BLK_ZONED_HA (host aware), the effective model used
+  * depends on CONFIG_BLK_DEV_ZONED settings and on the existence of partitions
+  * on the disk.
+  */
+ void blk_queue_set_zoned(struct gendisk *disk, enum blk_zoned_model model)
+ {
+ 	switch (model) {
+ 	case BLK_ZONED_HM:
+ 		/*
+ 		 * Host managed devices are supported only if
+ 		 * CONFIG_BLK_DEV_ZONED is enabled.
+ 		 */
+ 		WARN_ON_ONCE(!IS_ENABLED(CONFIG_BLK_DEV_ZONED));
+ 		break;
+ 	case BLK_ZONED_HA:
+ 		/*
+ 		 * Host aware devices can be treated either as regular block
+ 		 * devices (similar to drive managed devices) or as zoned block
+ 		 * devices to take advantage of the zone command set, similarly
+ 		 * to host managed devices. We try the latter if there are no
+ 		 * partitions and zoned block device support is enabled, else
+ 		 * we do nothing special as far as the block layer is concerned.
+ 		 */
+ 		if (!IS_ENABLED(CONFIG_BLK_DEV_ZONED) ||
+ 		    disk_has_partitions(disk))
+ 			model = BLK_ZONED_NONE;
+ 		break;
+ 	case BLK_ZONED_NONE:
+ 	default:
+ 		if (WARN_ON_ONCE(model != BLK_ZONED_NONE))
+ 			model = BLK_ZONED_NONE;
+ 		break;
+ 	}
+ 
+ 	disk->queue->limits.zoned = model;
+ }
+ EXPORT_SYMBOL_GPL(blk_queue_set_zoned);
+ 
++>>>>>>> 27ba3e8ff3ab (scsi: sd: sd_zbc: Fix handling of host-aware ZBC disks)
  static int __init blk_settings_init(void)
  {
  	blk_max_low_pfn = max_low_pfn - 1;
diff --cc drivers/scsi/sd_zbc.c
index 03ce186ae933,a739456dea02..000000000000
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@@ -674,17 -664,15 +674,25 @@@ static int sd_zbc_revalidate_zones(stru
  	int ret = 0;
  
  	/*
++<<<<<<< HEAD
 +	 * For all zoned disks, initialize zone append emulation data if not
 +	 * already done. This is necessary also for host-aware disks used as
 +	 * regular disks due to the presence of partitions as these partitions
 +	 * may be deleted and the disk zoned model changed back from
 +	 * BLK_ZONED_NONE to BLK_ZONED_HA.
 +	 */
 +	if (sd_is_zoned(sdkp) && !sdkp->aux->zone_wp_update_buf) {
 +		ret = sd_zbc_init_disk(sdkp);
 +		if (ret)
 +			return ret;
 +	}
++=======
+ 	 * There is nothing to do for regular disks, including host-aware disks
+ 	 * that have partitions.
+ 	 */
+ 	if (!blk_queue_is_zoned(q))
+ 		return 0;
++>>>>>>> 27ba3e8ff3ab (scsi: sd: sd_zbc: Fix handling of host-aware ZBC disks)
  
  	/*
  	 * Make sure revalidate zones are serialized to ensure exclusive
* Unmerged path block/blk-settings.c
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index f45fe25d06c5..51c7db80e557 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -2911,26 +2911,32 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 
 	if (sdkp->device->type == TYPE_ZBC) {
 		/* Host-managed */
-		q->limits.zoned = BLK_ZONED_HM;
+		blk_queue_set_zoned(sdkp->disk, BLK_ZONED_HM);
 	} else {
 		sdkp->zoned = (buffer[8] >> 4) & 3;
-		if (sdkp->zoned == 1 && !disk_has_partitions(sdkp->disk)) {
+		if (sdkp->zoned == 1) {
 			/* Host-aware */
-			q->limits.zoned = BLK_ZONED_HA;
+			blk_queue_set_zoned(sdkp->disk, BLK_ZONED_HA);
 		} else {
-			/*
-			 * Treat drive-managed devices and host-aware devices
-			 * with partitions as regular block devices.
-			 */
-			q->limits.zoned = BLK_ZONED_NONE;
-			if (sdkp->zoned == 2 && sdkp->first_scan)
-				sd_printk(KERN_NOTICE, sdkp,
-					  "Drive-managed SMR disk\n");
+			/* Regular disk or drive managed disk */
+			blk_queue_set_zoned(sdkp->disk, BLK_ZONED_NONE);
 		}
 	}
-	if (blk_queue_is_zoned(q) && sdkp->first_scan)
+
+	if (!sdkp->first_scan)
+		goto out;
+
+	if (blk_queue_is_zoned(q)) {
 		sd_printk(KERN_NOTICE, sdkp, "Host-%s zoned block device\n",
 		      q->limits.zoned == BLK_ZONED_HM ? "managed" : "aware");
+	} else {
+		if (sdkp->zoned == 1)
+			sd_printk(KERN_NOTICE, sdkp,
+				  "Host-aware SMR disk used as regular disk\n");
+		else if (sdkp->zoned == 2)
+			sd_printk(KERN_NOTICE, sdkp,
+				  "Drive-managed SMR disk\n");
+	}
 
  out:
 	kfree(buffer);
diff --git a/drivers/scsi/sd.h b/drivers/scsi/sd.h
index 73f7cc3828fe..f288a2b0f480 100644
--- a/drivers/scsi/sd.h
+++ b/drivers/scsi/sd.h
@@ -331,7 +331,7 @@ static inline blk_status_t sd_zbc_setup_zone_mgmt_cmnd(struct scsi_cmnd *cmd,
 static inline unsigned int sd_zbc_complete(struct scsi_cmnd *cmd,
 			unsigned int good_bytes, struct scsi_sense_hdr *sshdr)
 {
-	return 0;
+	return good_bytes;
 }
 
 static inline blk_status_t sd_zbc_prepare_zone_append(struct scsi_cmnd *cmd,
* Unmerged path drivers/scsi/sd_zbc.c
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index df87e1e4e5b0..fbc878a430d9 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -366,6 +366,8 @@ struct queue_limits {
 typedef int (*report_zones_cb)(struct blk_zone *zone, unsigned int idx,
 			       void *data);
 
+void blk_queue_set_zoned(struct gendisk *disk, enum blk_zoned_model model);
+
 #ifdef CONFIG_BLK_DEV_ZONED
 
 #define BLK_ALL_ZONES  ((unsigned int)-1)
