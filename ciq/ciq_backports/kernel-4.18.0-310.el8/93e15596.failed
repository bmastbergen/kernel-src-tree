drop_monitor: Filter control packets in drop monitor

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Ido Schimmel <idosch@mellanox.com>
commit 93e155967ccc053b71d408edf8c0142199df5c8c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/93e15596.failed

Previously, devlink called into drop monitor in order to report hardware
originated drops / exceptions. devlink intentionally filtered control
packets and did not pass them to drop monitor as they were not dropped
by the underlying hardware.

Now drop monitor registers its probe on a generic 'devlink_trap_report'
tracepoint and should therefore perform this filtering itself instead of
having devlink do that.

Add the trap type as metadata and have drop monitor ignore control
packets.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Reviewed-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 93e155967ccc053b71d408edf8c0142199df5c8c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/devlink.c
diff --cc net/core/devlink.c
index 9643e59cc6c1,6f2863e717a9..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -9322,17 -9295,6 +9323,20 @@@ void devlink_trap_report(struct devlin
  	devlink_trap_stats_update(trap_item->stats, skb->len);
  	devlink_trap_stats_update(trap_item->group_item->stats, skb->len);
  
++<<<<<<< HEAD
 +	/* Control packets were not dropped by the device or encountered an
 +	 * exception during forwarding and therefore should not be reported to
 +	 * the kernel's drop monitor.
 +	 */
 +	if (trap_item->trap->type == DEVLINK_TRAP_TYPE_CONTROL)
 +		return;
 +
 +	devlink_trap_report_metadata_fill(&hw_metadata, trap_item,
 +					  in_devlink_port, fa_cookie);
 +	net_dm_hw_report(skb, &hw_metadata);
 +
++=======
++>>>>>>> 93e155967ccc (drop_monitor: Filter control packets in drop monitor)
  	if (trace_devlink_trap_report_enabled()) {
  		struct devlink_trap_metadata metadata = {};
  
diff --git a/include/net/devlink.h b/include/net/devlink.h
index ff2ed9e91408..02164734f370 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -612,12 +612,14 @@ struct devlink_health_reporter_ops {
  * @trap_group_name: Trap group name.
  * @input_dev: Input netdevice.
  * @fa_cookie: Flow action user cookie.
+ * @trap_type: Trap type.
  */
 struct devlink_trap_metadata {
 	const char *trap_name;
 	const char *trap_group_name;
 	struct net_device *input_dev;
 	const struct flow_action_cookie *fa_cookie;
+	enum devlink_trap_type trap_type;
 };
 
 /**
* Unmerged path net/core/devlink.c
diff --git a/net/core/drop_monitor.c b/net/core/drop_monitor.c
index 2b82eea80180..fdb19665442c 100644
--- a/net/core/drop_monitor.c
+++ b/net/core/drop_monitor.c
@@ -440,6 +440,9 @@ net_dm_hw_trap_summary_probe(void *ignore, const struct devlink *devlink,
 	unsigned long flags;
 	int i;
 
+	if (metadata->trap_type == DEVLINK_TRAP_TYPE_CONTROL)
+		return;
+
 	hw_data = this_cpu_ptr(&dm_hw_cpu_data);
 	spin_lock_irqsave(&hw_data->lock, flags);
 	hw_entries = hw_data->hw_entries;
@@ -933,6 +936,9 @@ net_dm_hw_trap_packet_probe(void *ignore, const struct devlink *devlink,
 	struct sk_buff *nskb;
 	unsigned long flags;
 
+	if (metadata->trap_type == DEVLINK_TRAP_TYPE_CONTROL)
+		return;
+
 	if (!skb_mac_header_was_set(skb))
 		return;
 
