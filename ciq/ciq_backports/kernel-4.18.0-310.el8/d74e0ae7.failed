Bluetooth: btusb: Fix detection of some fake CSR controllers with a bcdDevice val of 0x0134

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit d74e0ae7e03032b47b8631cc1e52a7ae1ce988c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/d74e0ae7.failed

Commit cde1a8a99287 ("Bluetooth: btusb: Fix and detect most of the
Chinese Bluetooth controllers") made the detection of fake controllers
more generic fixing it for much of the newer fakes / clones.

But this does not work for a fake CSR controller with a bcdDevice
value of 0x0134, which was correctly identified as fake before
this change.

Add an extra check for this special case, checking for a combination
of a bcdDevice value of 0x0134, together with a lmp_subver of 0x0c5c
and a hci_ver of BLUETOOTH_VER_2_0.

The chip inside this fake dongle is marked as with "clockwise cw6629d".

Fixes: cde1a8a99287 ("Bluetooth: btusb: Fix and detect most of the Chinese Bluetooth controllers")
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
	Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
(cherry picked from commit d74e0ae7e03032b47b8631cc1e52a7ae1ce988c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btusb.c
diff --cc drivers/bluetooth/btusb.c
index fa942ef1d752,82ea7b230b17..000000000000
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@@ -1798,8 -1789,11 +1798,10 @@@ static int btusb_setup_bcm92035(struct 
  
  static int btusb_setup_csr(struct hci_dev *hdev)
  {
+ 	struct btusb_data *data = hci_get_drvdata(hdev);
+ 	u16 bcdDevice = le16_to_cpu(data->udev->descriptor.bcdDevice);
  	struct hci_rp_read_local_version *rp;
  	struct sk_buff *skb;
 -	bool is_fake = false;
  
  	BT_DBG("%s", hdev->name);
  
@@@ -1819,9 -1813,70 +1821,63 @@@
  
  	rp = (struct hci_rp_read_local_version *)skb->data;
  
 -	/* Detect a wide host of Chinese controllers that aren't CSR.
 -	 *
 -	 * Known fake bcdDevices: 0x0100, 0x0134, 0x1915, 0x2520, 0x7558, 0x8891
 -	 *
 -	 * The main thing they have in common is that these are really popular low-cost
 -	 * options that support newer Bluetooth versions but rely on heavy VID/PID
 -	 * squatting of this poor old Bluetooth 1.1 device. Even sold as such.
 -	 *
 -	 * We detect actual CSR devices by checking that the HCI manufacturer code
 -	 * is Cambridge Silicon Radio (10) and ensuring that LMP sub-version and
 -	 * HCI rev values always match. As they both store the firmware number.
 -	 */
 +	/* Detect controllers which aren't real CSR ones. */
  	if (le16_to_cpu(rp->manufacturer) != 10 ||
++<<<<<<< HEAD
 +	    le16_to_cpu(rp->lmp_subver) == 0x0c5c) {
++=======
+ 	    le16_to_cpu(rp->hci_rev) != le16_to_cpu(rp->lmp_subver))
+ 		is_fake = true;
+ 
+ 	/* Known legit CSR firmware build numbers and their supported BT versions:
+ 	 * - 1.1 (0x1) -> 0x0073, 0x020d, 0x033c, 0x034e
+ 	 * - 1.2 (0x2) ->                 0x04d9, 0x0529
+ 	 * - 2.0 (0x3) ->         0x07a6, 0x07ad, 0x0c5c
+ 	 * - 2.1 (0x4) ->         0x149c, 0x1735, 0x1899 (0x1899 is a BlueCore4-External)
+ 	 * - 4.0 (0x6) ->         0x1d86, 0x2031, 0x22bb
+ 	 *
+ 	 * e.g. Real CSR dongles with LMP subversion 0x73 are old enough that
+ 	 *      support BT 1.1 only; so it's a dead giveaway when some
+ 	 *      third-party BT 4.0 dongle reuses it.
+ 	 */
+ 	else if (le16_to_cpu(rp->lmp_subver) <= 0x034e &&
+ 		 le16_to_cpu(rp->hci_ver) > BLUETOOTH_VER_1_1)
+ 		is_fake = true;
+ 
+ 	else if (le16_to_cpu(rp->lmp_subver) <= 0x0529 &&
+ 		 le16_to_cpu(rp->hci_ver) > BLUETOOTH_VER_1_2)
+ 		is_fake = true;
+ 
+ 	else if (le16_to_cpu(rp->lmp_subver) <= 0x0c5c &&
+ 		 le16_to_cpu(rp->hci_ver) > BLUETOOTH_VER_2_0)
+ 		is_fake = true;
+ 
+ 	else if (le16_to_cpu(rp->lmp_subver) <= 0x1899 &&
+ 		 le16_to_cpu(rp->hci_ver) > BLUETOOTH_VER_2_1)
+ 		is_fake = true;
+ 
+ 	else if (le16_to_cpu(rp->lmp_subver) <= 0x22bb &&
+ 		 le16_to_cpu(rp->hci_ver) > BLUETOOTH_VER_4_0)
+ 		is_fake = true;
+ 
+ 	/* Other clones which beat all the above checks */
+ 	else if (bcdDevice == 0x0134 &&
+ 		 le16_to_cpu(rp->lmp_subver) == 0x0c5c &&
+ 		 le16_to_cpu(rp->hci_ver) == BLUETOOTH_VER_2_0)
+ 		is_fake = true;
+ 
+ 	if (is_fake) {
+ 		bt_dev_warn(hdev, "CSR: Unbranded CSR clone detected; adding workarounds...");
+ 
+ 		/* Generally these clones have big discrepancies between
+ 		 * advertised features and what's actually supported.
+ 		 * Probably will need to be expanded in the future;
+ 		 * without these the controller will lock up.
+ 		 */
+ 		set_bit(HCI_QUIRK_BROKEN_STORED_LINK_KEY, &hdev->quirks);
+ 		set_bit(HCI_QUIRK_BROKEN_ERR_DATA_REPORTING, &hdev->quirks);
+ 
++>>>>>>> d74e0ae7e030 (Bluetooth: btusb: Fix detection of some fake CSR controllers with a bcdDevice val of 0x0134)
  		/* Clear the reset quirk since this is not an actual
  		 * early Bluetooth 1.1 device from CSR.
  		 */
* Unmerged path drivers/bluetooth/btusb.c
