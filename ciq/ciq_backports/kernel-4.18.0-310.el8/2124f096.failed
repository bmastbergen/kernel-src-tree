nvme: rename _nvme_revalidate_disk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 2124f096fb4521d8efdf2412e9102d475ff5cd36
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/2124f096.failed

Rename _nvme_revalidate_disk to nvme_validate_ns to better describe
what the function does, and pass the struct nvme_ns instead of the
gendisk to better match the call chain.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
(cherry picked from commit 2124f096fb4521d8efdf2412e9102d475ff5cd36)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index d026ba361d0c,c04043a94e64..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -89,7 -89,7 +89,11 @@@ static dev_t nvme_chr_devt
  static struct class *nvme_class;
  static struct class *nvme_subsys_class;
  
++<<<<<<< HEAD
 +static int nvme_revalidate_disk(struct gendisk *disk);
++=======
+ static int nvme_validate_ns(struct nvme_ns *ns);
++>>>>>>> 2124f096fb45 (nvme: rename _nvme_revalidate_disk)
  static void nvme_put_subsystem(struct nvme_subsystem *subsys);
  static void nvme_remove_invalid_namespaces(struct nvme_ctrl *ctrl,
  					   unsigned nsid);
@@@ -1022,7 -1026,7 +1026,11 @@@ static void nvme_update_formats(struct 
  
  	down_read(&ctrl->namespaces_rwsem);
  	list_for_each_entry(ns, &ctrl->namespaces, list)
++<<<<<<< HEAD
 +		if (nvme_revalidate_disk(ns->disk))
++=======
+ 		if (nvme_validate_ns(ns))
++>>>>>>> 2124f096fb45 (nvme: rename _nvme_revalidate_disk)
  			nvme_set_queue_dying(ns);
  		else if (blk_queue_is_zoned(ns->disk->queue)) {
  			/*
@@@ -2137,9 -2154,8 +2145,12 @@@ static int __nvme_revalidate_disk(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int nvme_revalidate_disk(struct gendisk *disk)
++=======
+ static int nvme_validate_ns(struct nvme_ns *ns)
++>>>>>>> 2124f096fb45 (nvme: rename _nvme_revalidate_disk)
  {
- 	struct nvme_ns *ns = disk->private_data;
  	struct nvme_ctrl *ctrl = ns->ctrl;
  	struct nvme_id_ns *id;
  	struct nvme_ns_ids ids;
@@@ -4030,14 -4023,21 +4041,27 @@@ static void nvme_ns_remove_by_nsid(stru
  static void nvme_validate_or_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid)
  {
  	struct nvme_ns *ns;
 -	int ret;
  
  	ns = nvme_find_get_ns(ctrl, nsid);
 -	if (!ns) {
 +	if (ns) {
 +		if (revalidate_disk(ns->disk))
 +			nvme_ns_remove(ns);
 +		nvme_put_ns(ns);
 +	} else
  		nvme_alloc_ns(ctrl, nsid);
++<<<<<<< HEAD
++=======
+ 		return;
+ 	}
+ 
+ 	ret = nvme_validate_ns(ns);
+ 	if (!ret && blk_queue_is_zoned(ns->queue))
+ 		ret = nvme_revalidate_zones(ns);
+ 	revalidate_disk_size(ns->disk, ret == 0);
+ 	if (ret)
+ 		nvme_ns_remove(ns);
+ 	nvme_put_ns(ns);
++>>>>>>> 2124f096fb45 (nvme: rename _nvme_revalidate_disk)
  }
  
  static void nvme_remove_invalid_namespaces(struct nvme_ctrl *ctrl,
* Unmerged path drivers/nvme/host/core.c
