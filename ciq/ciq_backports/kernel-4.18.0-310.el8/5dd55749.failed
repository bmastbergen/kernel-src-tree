nvme: let set_capacity_revalidate_and_notify update the bdev size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 5dd55749b79cdf471ca0966ad91541daebac3e2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/5dd55749.failed

There is no good reason to call revalidate_disk_size separately.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 5dd55749b79cdf471ca0966ad91541daebac3e2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 2960a671dc7f,f6c6479da0e9..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -2080,66 -2099,42 +2080,73 @@@ static void nvme_set_chunk_sectors(stru
  	blk_queue_chunk_sectors(ns->queue, iob);
  }
  
 -static int nvme_update_ns_info(struct nvme_ns *ns, struct nvme_id_ns *id)
 +static int __nvme_revalidate_disk(struct gendisk *disk, struct nvme_id_ns *id)
  {
 -	unsigned lbaf = id->flbas & NVME_NS_FLBAS_LBA_MASK;
 -	int ret;
 +	struct nvme_ns *ns = disk->private_data;
 +	struct nvme_ctrl *ctrl = ns->ctrl;
  
 -	blk_mq_freeze_queue(ns->disk->queue);
 -	ns->lba_shift = id->lbaf[lbaf].ds;
 -	nvme_set_queue_limits(ns->ctrl, ns->queue);
 +	/*
 +	 * If identify namespace failed, use default 512 byte block size so
 +	 * block layer can use before failing read/write for 0 capacity.
 +	 */
 +	ns->lba_shift = id->lbaf[id->flbas & NVME_NS_FLBAS_LBA_MASK].ds;
 +	if (ns->lba_shift == 0)
 +		ns->lba_shift = 9;
  
 -	if (ns->head->ids.csi == NVME_CSI_ZNS) {
 -		ret = nvme_update_zone_info(ns, lbaf);
 -		if (ret)
 -			goto out_unfreeze;
 +	switch (ns->head->ids.csi) {
 +	case NVME_CSI_NVM:
 +		break;
 +	default:
 +		dev_warn(ctrl->device, "unknown csi:%d ns:%d\n",
 +			ns->head->ids.csi, ns->head->ns_id);
 +		return -ENODEV;
  	}
  
 -	ret = nvme_configure_metadata(ns, id);
 -	if (ret)
 -		goto out_unfreeze;
 -	nvme_set_chunk_sectors(ns, id);
 -	nvme_update_disk_info(ns->disk, ns, id);
 -	blk_mq_unfreeze_queue(ns->disk->queue);
 +	ns->features = 0;
 +	ns->ms = le16_to_cpu(id->lbaf[id->flbas & NVME_NS_FLBAS_LBA_MASK].ms);
 +	/* the PI implementation requires metadata equal t10 pi tuple size */
 +	if (ns->ms == sizeof(struct t10_pi_tuple))
 +		ns->pi_type = id->dps & NVME_NS_DPS_PI_MASK;
 +	else
 +		ns->pi_type = 0;
  
 -	if (blk_queue_is_zoned(ns->queue)) {
 -		ret = nvme_revalidate_zones(ns);
 -		if (ret && !nvme_first_scan(ns->disk))
 -			return ret;
 +	if (ns->ms) {
 +		/*
 +		 * For PCIe only the separate metadata pointer is supported,
 +		 * as the block layer supplies metadata in a separate bio_vec
 +		 * chain. For Fabrics, only metadata as part of extended data
 +		 * LBA is supported on the wire per the Fabrics specification,
 +		 * but the HBA/HCA will do the remapping from the separate
 +		 * metadata buffers for us.
 +		 */
 +		if (id->flbas & NVME_NS_FLBAS_META_EXT) {
 +			ns->features |= NVME_NS_EXT_LBAS;
 +			if ((ctrl->ops->flags & NVME_F_FABRICS) &&
 +			    (ctrl->ops->flags & NVME_F_METADATA_SUPPORTED) &&
 +			    ctrl->max_integrity_segments)
 +				ns->features |= NVME_NS_METADATA_SUPPORTED;
 +		} else {
 +			if (WARN_ON_ONCE(ctrl->ops->flags & NVME_F_FABRICS))
 +				return -EINVAL;
 +			if (ctrl->ops->flags & NVME_F_METADATA_SUPPORTED)
 +				ns->features |= NVME_NS_METADATA_SUPPORTED;
 +		}
  	}
  
 +	nvme_set_chunk_sectors(ns, id);
 +	nvme_update_disk_info(disk, ns, id);
  #ifdef CONFIG_NVME_MULTIPATH
  	if (ns->head->disk) {
 -		blk_mq_freeze_queue(ns->head->disk->queue);
  		nvme_update_disk_info(ns->head->disk, ns, id);
++<<<<<<< HEAD
 +		blk_queue_stack_limits(ns->head->disk->queue, ns->queue);
 +		nvme_mpath_update_disk_size(ns->head->disk);
++=======
+ 		blk_stack_limits(&ns->head->disk->queue->limits,
+ 				 &ns->queue->limits, 0);
+ 		blk_queue_update_readahead(ns->head->disk->queue);
+ 		blk_mq_unfreeze_queue(ns->head->disk->queue);
++>>>>>>> 5dd55749b79c (nvme: let set_capacity_revalidate_and_notify update the bdev size)
  	}
  #endif
  	return 0;
@@@ -4025,17 -3930,73 +4032,54 @@@ static void nvme_ns_remove_by_nsid(stru
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void nvme_validate_ns(struct nvme_ns *ns, struct nvme_ns_ids *ids)
+ {
+ 	struct nvme_id_ns *id;
+ 	int ret = -ENODEV;
+ 
+ 	if (test_bit(NVME_NS_DEAD, &ns->flags))
+ 		goto out;
+ 
+ 	ret = nvme_identify_ns(ns->ctrl, ns->head->ns_id, ids, &id);
+ 	if (ret)
+ 		goto out;
+ 
+ 	ret = -ENODEV;
+ 	if (!nvme_ns_ids_equal(&ns->head->ids, ids)) {
+ 		dev_err(ns->ctrl->device,
+ 			"identifiers changed for nsid %d\n", ns->head->ns_id);
+ 		goto out_free_id;
+ 	}
+ 
+ 	ret = nvme_update_ns_info(ns, id);
+ 
+ out_free_id:
+ 	kfree(id);
+ out:
+ 	/*
+ 	 * Only remove the namespace if we got a fatal error back from the
+ 	 * device, otherwise ignore the error and just move on.
+ 	 *
+ 	 * TODO: we should probably schedule a delayed retry here.
+ 	 */
+ 	if (ret && ret != -ENOMEM && !(ret > 0 && !(ret & NVME_SC_DNR)))
+ 		nvme_ns_remove(ns);
+ }
+ 
++>>>>>>> 5dd55749b79c (nvme: let set_capacity_revalidate_and_notify update the bdev size)
  static void nvme_validate_or_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid)
  {
 -	struct nvme_ns_ids ids = { };
  	struct nvme_ns *ns;
  
 -	if (nvme_identify_ns_descs(ctrl, nsid, &ids))
 -		return;
 -
  	ns = nvme_find_get_ns(ctrl, nsid);
  	if (ns) {
 -		nvme_validate_ns(ns, &ids);
 +		if (revalidate_disk(ns->disk))
 +			nvme_ns_remove(ns);
  		nvme_put_ns(ns);
 -		return;
 -	}
 -
 -	switch (ids.csi) {
 -	case NVME_CSI_NVM:
 -		nvme_alloc_ns(ctrl, nsid, &ids);
 -		break;
 -	case NVME_CSI_ZNS:
 -		if (!IS_ENABLED(CONFIG_BLK_DEV_ZONED)) {
 -			dev_warn(ctrl->device,
 -				"nsid %u not supported without CONFIG_BLK_DEV_ZONED\n",
 -				nsid);
 -			break;
 -		}
 -		nvme_alloc_ns(ctrl, nsid, &ids);
 -		break;
 -	default:
 -		dev_warn(ctrl->device, "unknown csi %u for nsid %u\n",
 -			ids.csi, nsid);
 -		break;
 -	}
 +	} else
 +		nvme_alloc_ns(ctrl, nsid);
  }
  
  static void nvme_remove_invalid_namespaces(struct nvme_ctrl *ctrl,
* Unmerged path drivers/nvme/host/core.c
