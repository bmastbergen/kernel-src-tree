KVM: SVM: Enhance and clean up the vmcb tracking comment in pre_svm_run()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Sean Christopherson <seanjc@google.com>
commit 44f1b5586df03b044704f3c57f529ea4120f406b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/44f1b558.failed

Explicitly document why a vmcb must be marked dirty and assigned a new
asid when it will be run on a different cpu.  The "what" is relatively
obvious, whereas the "why" requires reading the APM and/or KVM code.

Opportunistically remove a spurious period and several unnecessary
newlines in the comment.

No functional change intended.

	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20210406171811.4043363-5-seanjc@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 44f1b5586df03b044704f3c57f529ea4120f406b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/svm.c
diff --cc arch/x86/kvm/svm/svm.c
index b60ae08fb034,5f1af4163251..000000000000
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@@ -3328,15 -3330,27 +3328,31 @@@ static void reload_tss(struct kvm_vcpu 
  	load_TR_desc();
  }
  
 -static void pre_svm_run(struct kvm_vcpu *vcpu)
 +static void pre_svm_run(struct vcpu_svm *svm)
  {
 -	struct svm_cpu_data *sd = per_cpu(svm_data, vcpu->cpu);
 -	struct vcpu_svm *svm = to_svm(vcpu);
 +	struct svm_cpu_data *sd = per_cpu(svm_data, svm->vcpu.cpu);
  
++<<<<<<< HEAD
 +	if (sev_guest(svm->vcpu.kvm))
 +		return pre_sev_run(svm, svm->vcpu.cpu);
++=======
+ 	/*
+ 	 * If the previous vmrun of the vmcb occurred on a different physical
+ 	 * cpu, then mark the vmcb dirty and assign a new asid.  Hardware's
+ 	 * vmcb clean bits are per logical CPU, as are KVM's asid assignments.
+ 	 */
+ 	if (unlikely(svm->current_vmcb->cpu != vcpu->cpu)) {
+ 		svm->current_vmcb->asid_generation = 0;
+ 		vmcb_mark_all_dirty(svm->vmcb);
+ 		svm->current_vmcb->cpu = vcpu->cpu;
+         }
+ 
+ 	if (sev_guest(vcpu->kvm))
+ 		return pre_sev_run(svm, vcpu->cpu);
++>>>>>>> 44f1b5586df0 (KVM: SVM: Enhance and clean up the vmcb tracking comment in pre_svm_run())
  
  	/* FIXME: handle wraparound of asid_generation */
 -	if (svm->current_vmcb->asid_generation != sd->asid_generation)
 +	if (svm->asid_generation != sd->asid_generation)
  		new_asid(svm, sd);
  }
  
* Unmerged path arch/x86/kvm/svm/svm.c
