KVM: x86/xen: register vcpu info

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Joao Martins <joao.m.martins@oracle.com>
commit 73e69a86347afe8156aa50c436fc192b280b0cd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/73e69a86.failed

The vcpu info supersedes the per vcpu area of the shared info page and
the guest vcpus will use this instead.

	Signed-off-by: Joao Martins <joao.m.martins@oracle.com>
	Signed-off-by: Ankur Arora <ankur.a.arora@oracle.com>
	Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
(cherry picked from commit 73e69a86347afe8156aa50c436fc192b280b0cd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/kvm_host.h
#	arch/x86/kvm/xen.c
#	include/uapi/linux/kvm.h
diff --cc arch/x86/include/asm/kvm_host.h
index 3e713240c995,4e864f2bd59a..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -531,6 -531,13 +531,16 @@@ struct kvm_vcpu_hv 
  	cpumask_t tlb_flush;
  };
  
++<<<<<<< HEAD
++=======
+ /* Xen HVM per vcpu emulation context */
+ struct kvm_vcpu_xen {
+ 	u64 hypercall_rip;
+ 	bool vcpu_info_set;
+ 	struct gfn_to_hva_cache vcpu_info_cache;
+ };
+ 
++>>>>>>> 73e69a86347a (KVM: x86/xen: register vcpu info)
  struct kvm_vcpu_arch {
  	/*
  	 * rip and regs accesses must go through
diff --cc include/uapi/linux/kvm.h
index a9fa79abd23a,2db0657b3337..000000000000
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@@ -1556,6 -1584,43 +1556,46 @@@ struct kvm_pv_cmd 
  /* Available with KVM_CAP_X86_MSR_FILTER */
  #define KVM_X86_SET_MSR_FILTER	_IOW(KVMIO,  0xc6, struct kvm_msr_filter)
  
++<<<<<<< HEAD
++=======
+ /* Available with KVM_CAP_DIRTY_LOG_RING */
+ #define KVM_RESET_DIRTY_RINGS		_IO(KVMIO, 0xc7)
+ 
+ /* Per-VM Xen attributes */
+ #define KVM_XEN_HVM_GET_ATTR	_IOWR(KVMIO, 0xc8, struct kvm_xen_hvm_attr)
+ #define KVM_XEN_HVM_SET_ATTR	_IOW(KVMIO,  0xc9, struct kvm_xen_hvm_attr)
+ 
+ struct kvm_xen_hvm_attr {
+ 	__u16 type;
+ 	__u16 pad[3];
+ 	union {
+ 		__u8 long_mode;
+ 		struct {
+ 			__u64 gfn;
+ 		} shared_info;
+ 		__u64 pad[8];
+ 	} u;
+ };
+ 
+ #define KVM_XEN_ATTR_TYPE_LONG_MODE		0x0
+ #define KVM_XEN_ATTR_TYPE_SHARED_INFO		0x1
+ 
+ /* Per-vCPU Xen attributes */
+ #define KVM_XEN_VCPU_GET_ATTR	_IOWR(KVMIO, 0xca, struct kvm_xen_vcpu_attr)
+ #define KVM_XEN_VCPU_SET_ATTR	_IOW(KVMIO,  0xcb, struct kvm_xen_vcpu_attr)
+ 
+ struct kvm_xen_vcpu_attr {
+ 	__u16 type;
+ 	__u16 pad[3];
+ 	union {
+ 		__u64 gpa;
+ 		__u64 pad[8];
+ 	} u;
+ };
+ 
+ #define KVM_XEN_VCPU_ATTR_TYPE_VCPU_INFO	0x0
+ 
++>>>>>>> 73e69a86347a (KVM: x86/xen: register vcpu info)
  /* Secure Encrypted Virtualization command */
  enum sev_cmd_id {
  	/* Guest initialization commands */
* Unmerged path arch/x86/kvm/xen.c
* Unmerged path arch/x86/include/asm/kvm_host.h
* Unmerged path arch/x86/kvm/xen.c
* Unmerged path include/uapi/linux/kvm.h
