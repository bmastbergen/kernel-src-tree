mm: memcontrol: convert NR_SHMEM_THPS account to pages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Muchun Song <songmuchun@bytedance.com>
commit 57b2847d3c1dc154923578efb47a12302a57d700
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/57b2847d.failed

Currently we use struct per_cpu_nodestat to cache the vmstat counters,
which leads to inaccurate statistics especially THP vmstat counters.  In
the systems with hundreds of processors it can be GBs of memory.  For
example, for a 96 CPUs system, the threshold is the maximum number of 125.
And the per cpu counters can cache 23.4375 GB in total.

The THP page is already a form of batched addition (it will add 512 worth
of memory in one go) so skipping the batching seems like sensible.
Although every THP stats update overflows the per-cpu counter, resorting
to atomic global updates.  But it can make the statistics more accuracy
for the THP vmstat counters.

So we convert the NR_SHMEM_THPS account to pages.  This patch is
consistent with 8f182270dfec ("mm/swap.c: flush lru pvecs on compound page
arrival").  Doing this also can make the unit of vmstat counters more
unified.  Finally, the unit of the vmstat counters are pages, kB and
bytes.  The B/KB suffix can tell us that the unit is bytes or kB.  The
rest which is without suffix are pages.

Link: https://lkml.kernel.org/r/20201228164110.2838-5-songmuchun@bytedance.com
	Signed-off-by: Muchun Song <songmuchun@bytedance.com>
	Cc: Alexey Dobriyan <adobriyan@gmail.com>
	Cc: Feng Tang <feng.tang@intel.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: NeilBrown <neilb@suse.de>
	Cc: Pankaj Gupta <pankaj.gupta@cloud.ionos.com>
	Cc: Rafael. J. Wysocki <rafael@kernel.org>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: Roman Gushchin <guro@fb.com>
	Cc: Sami Tolvanen <samitolvanen@google.com>
	Cc: Shakeel Butt <shakeelb@google.com>
	Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 57b2847d3c1dc154923578efb47a12302a57d700)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/node.c
#	include/linux/mmzone.h
#	mm/filemap.c
#	mm/huge_memory.c
#	mm/khugepaged.c
#	mm/memcontrol.c
#	mm/shmem.c
diff --cc drivers/base/node.c
index 8633d5d90a7d,6d5ac6ffb6e1..000000000000
--- a/drivers/base/node.c
+++ b/drivers/base/node.c
@@@ -369,99 -376,102 +369,110 @@@ static ssize_t node_read_meminfo(struc
  	si_meminfo_node(&i, nid);
  	sreclaimable = node_page_state_pages(pgdat, NR_SLAB_RECLAIMABLE_B);
  	sunreclaimable = node_page_state_pages(pgdat, NR_SLAB_UNRECLAIMABLE_B);
 -	len = sysfs_emit_at(buf, len,
 -			    "Node %d MemTotal:       %8lu kB\n"
 -			    "Node %d MemFree:        %8lu kB\n"
 -			    "Node %d MemUsed:        %8lu kB\n"
 -			    "Node %d Active:         %8lu kB\n"
 -			    "Node %d Inactive:       %8lu kB\n"
 -			    "Node %d Active(anon):   %8lu kB\n"
 -			    "Node %d Inactive(anon): %8lu kB\n"
 -			    "Node %d Active(file):   %8lu kB\n"
 -			    "Node %d Inactive(file): %8lu kB\n"
 -			    "Node %d Unevictable:    %8lu kB\n"
 -			    "Node %d Mlocked:        %8lu kB\n",
 -			    nid, K(i.totalram),
 -			    nid, K(i.freeram),
 -			    nid, K(i.totalram - i.freeram),
 -			    nid, K(node_page_state(pgdat, NR_ACTIVE_ANON) +
 -				   node_page_state(pgdat, NR_ACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_INACTIVE_ANON) +
 -				   node_page_state(pgdat, NR_INACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_ACTIVE_ANON)),
 -			    nid, K(node_page_state(pgdat, NR_INACTIVE_ANON)),
 -			    nid, K(node_page_state(pgdat, NR_ACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_INACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_UNEVICTABLE)),
 -			    nid, K(sum_zone_node_page_state(nid, NR_MLOCK)));
 +	n = sprintf(buf,
 +		       "Node %d MemTotal:       %8lu kB\n"
 +		       "Node %d MemFree:        %8lu kB\n"
 +		       "Node %d MemUsed:        %8lu kB\n"
 +		       "Node %d Active:         %8lu kB\n"
 +		       "Node %d Inactive:       %8lu kB\n"
 +		       "Node %d Active(anon):   %8lu kB\n"
 +		       "Node %d Inactive(anon): %8lu kB\n"
 +		       "Node %d Active(file):   %8lu kB\n"
 +		       "Node %d Inactive(file): %8lu kB\n"
 +		       "Node %d Unevictable:    %8lu kB\n"
 +		       "Node %d Mlocked:        %8lu kB\n",
 +		       nid, K(i.totalram),
 +		       nid, K(i.freeram),
 +		       nid, K(i.totalram - i.freeram),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_ANON) +
 +				node_page_state(pgdat, NR_ACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_ANON) +
 +				node_page_state(pgdat, NR_INACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_ANON)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_ANON)),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_UNEVICTABLE)),
 +		       nid, K(sum_zone_node_page_state(nid, NR_MLOCK)));
  
  #ifdef CONFIG_HIGHMEM
 -	len += sysfs_emit_at(buf, len,
 -			     "Node %d HighTotal:      %8lu kB\n"
 -			     "Node %d HighFree:       %8lu kB\n"
 -			     "Node %d LowTotal:       %8lu kB\n"
 -			     "Node %d LowFree:        %8lu kB\n",
 -			     nid, K(i.totalhigh),
 -			     nid, K(i.freehigh),
 -			     nid, K(i.totalram - i.totalhigh),
 -			     nid, K(i.freeram - i.freehigh));
 +	n += sprintf(buf + n,
 +		       "Node %d HighTotal:      %8lu kB\n"
 +		       "Node %d HighFree:       %8lu kB\n"
 +		       "Node %d LowTotal:       %8lu kB\n"
 +		       "Node %d LowFree:        %8lu kB\n",
 +		       nid, K(i.totalhigh),
 +		       nid, K(i.freehigh),
 +		       nid, K(i.totalram - i.totalhigh),
 +		       nid, K(i.freeram - i.freehigh));
  #endif
 -	len += sysfs_emit_at(buf, len,
 -			     "Node %d Dirty:          %8lu kB\n"
 -			     "Node %d Writeback:      %8lu kB\n"
 -			     "Node %d FilePages:      %8lu kB\n"
 -			     "Node %d Mapped:         %8lu kB\n"
 -			     "Node %d AnonPages:      %8lu kB\n"
 -			     "Node %d Shmem:          %8lu kB\n"
 -			     "Node %d KernelStack:    %8lu kB\n"
 -#ifdef CONFIG_SHADOW_CALL_STACK
 -			     "Node %d ShadowCallStack:%8lu kB\n"
 -#endif
 -			     "Node %d PageTables:     %8lu kB\n"
 -			     "Node %d NFS_Unstable:   %8lu kB\n"
 -			     "Node %d Bounce:         %8lu kB\n"
 -			     "Node %d WritebackTmp:   %8lu kB\n"
 -			     "Node %d KReclaimable:   %8lu kB\n"
 -			     "Node %d Slab:           %8lu kB\n"
 -			     "Node %d SReclaimable:   %8lu kB\n"
 -			     "Node %d SUnreclaim:     %8lu kB\n"
 +	n += sprintf(buf + n,
 +		       "Node %d Dirty:          %8lu kB\n"
 +		       "Node %d Writeback:      %8lu kB\n"
 +		       "Node %d FilePages:      %8lu kB\n"
 +		       "Node %d Mapped:         %8lu kB\n"
 +		       "Node %d AnonPages:      %8lu kB\n"
 +		       "Node %d Shmem:          %8lu kB\n"
 +		       "Node %d KernelStack:    %8lu kB\n"
 +		       "Node %d PageTables:     %8lu kB\n"
 +		       "Node %d NFS_Unstable:   %8lu kB\n"
 +		       "Node %d Bounce:         %8lu kB\n"
 +		       "Node %d WritebackTmp:   %8lu kB\n"
 +		       "Node %d KReclaimable:   %8lu kB\n"
 +		       "Node %d Slab:           %8lu kB\n"
 +		       "Node %d SReclaimable:   %8lu kB\n"
 +		       "Node %d SUnreclaim:     %8lu kB\n"
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
 -			     "Node %d AnonHugePages:  %8lu kB\n"
 -			     "Node %d ShmemHugePages: %8lu kB\n"
 -			     "Node %d ShmemPmdMapped: %8lu kB\n"
 -			     "Node %d FileHugePages: %8lu kB\n"
 -			     "Node %d FilePmdMapped: %8lu kB\n"
 -#endif
 -			     ,
 -			     nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),
 -			     nid, K(node_page_state(pgdat, NR_WRITEBACK)),
 -			     nid, K(node_page_state(pgdat, NR_FILE_PAGES)),
 -			     nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),
 -			     nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),
 -			     nid, K(i.sharedram),
 -			     nid, node_page_state(pgdat, NR_KERNEL_STACK_KB),
 -#ifdef CONFIG_SHADOW_CALL_STACK
 -			     nid, node_page_state(pgdat, NR_KERNEL_SCS_KB),
 +		       "Node %d AnonHugePages:  %8lu kB\n"
 +		       "Node %d ShmemHugePages: %8lu kB\n"
 +		       "Node %d ShmemPmdMapped: %8lu kB\n"
 +		       "Node %d FileHugePages: %8lu kB\n"
 +		       "Node %d FilePmdMapped: %8lu kB\n"
  #endif
 -			     nid, K(node_page_state(pgdat, NR_PAGETABLE)),
 -			     nid, 0UL,
 -			     nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),
 -			     nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),
 -			     nid, K(sreclaimable +
 -				    node_page_state(pgdat, NR_KERNEL_MISC_RECLAIMABLE)),
 -			     nid, K(sreclaimable + sunreclaimable),
 -			     nid, K(sreclaimable),
 -			     nid, K(sunreclaimable)
 +			,
 +		       nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),
 +		       nid, K(node_page_state(pgdat, NR_WRITEBACK)),
 +		       nid, K(node_page_state(pgdat, NR_FILE_PAGES)),
 +		       nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),
 +		       nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),
 +		       nid, K(i.sharedram),
 +		       nid, sum_zone_node_page_state(nid, NR_KERNEL_STACK_KB),
 +		       nid, K(sum_zone_node_page_state(nid, NR_PAGETABLE)),
 +		       nid, 0UL,
 +		       nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),
 +		       nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),
 +		       nid, K(sreclaimable +
 +			      node_page_state(pgdat, NR_KERNEL_MISC_RECLAIMABLE)),
 +		       nid, K(sreclaimable + sunreclaimable),
 +		       nid, K(sreclaimable),
 +		       nid, K(sunreclaimable)
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
++<<<<<<< HEAD
 +		       ,
 +		       nid, K(node_page_state(pgdat, NR_ANON_THPS) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_SHMEM_THPS) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_FILE_THPS) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_FILE_PMDMAPPED) *
 +				       HPAGE_PMD_NR)
++=======
+ 			     ,
+ 			     nid, K(node_page_state(pgdat, NR_ANON_THPS)),
+ 			     nid, K(node_page_state(pgdat, NR_SHMEM_THPS)),
+ 			     nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *
+ 				    HPAGE_PMD_NR),
+ 			     nid, K(node_page_state(pgdat, NR_FILE_THPS)),
+ 			     nid, K(node_page_state(pgdat, NR_FILE_PMDMAPPED) *
+ 				    HPAGE_PMD_NR)
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
  #endif
 -			    );
 -	len += hugetlb_report_node_meminfo(buf, len, nid);
 -	return len;
 +		       );
 +	n += hugetlb_report_node_meminfo(nid, buf + n);
 +	return n;
  }
  
  #undef K
diff --cc include/linux/mmzone.h
index ae118ed2cb9b,788837f40b38..000000000000
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@@ -213,6 -210,21 +213,24 @@@ enum node_stat_item 
  };
  
  /*
++<<<<<<< HEAD
++=======
+  * Returns true if the item should be printed in THPs (/proc/vmstat
+  * currently prints number of anon, file and shmem THPs. But the item
+  * is charged in pages).
+  */
+ static __always_inline bool vmstat_item_print_in_thp(enum node_stat_item item)
+ {
+ 	if (!IS_ENABLED(CONFIG_TRANSPARENT_HUGEPAGE))
+ 		return false;
+ 
+ 	return item == NR_ANON_THPS ||
+ 	       item == NR_FILE_THPS ||
+ 	       item == NR_SHMEM_THPS;
+ }
+ 
+ /*
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
   * Returns true if the value is measured in bytes (most vmstat values are
   * measured in pages). This defines the API part, the internal representation
   * might be different.
diff --cc mm/filemap.c
index 43e3b7ebb660,46a8b9e82434..000000000000
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@@ -202,9 -206,9 +202,13 @@@ static void unaccount_page_cache_page(s
  	if (PageSwapBacked(page)) {
  		__mod_lruvec_page_state(page, NR_SHMEM, -nr);
  		if (PageTransHuge(page))
++<<<<<<< HEAD
 +			__dec_node_page_state(page, NR_SHMEM_THPS);
++=======
+ 			__mod_lruvec_page_state(page, NR_SHMEM_THPS, -nr);
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
  	} else if (PageTransHuge(page)) {
 -		__mod_lruvec_page_state(page, NR_FILE_THPS, -nr);
 +		__dec_node_page_state(page, NR_FILE_THPS);
  		filemap_nr_thps_dec(mapping);
  	}
  
diff --cc mm/huge_memory.c
index f8f2e337b025,86a3015ba54f..000000000000
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@@ -2635,13 -2752,17 +2635,18 @@@ int split_huge_page_to_list(struct pag
  		}
  		spin_unlock(&ds_queue->split_queue_lock);
  		if (mapping) {
 -			int nr = thp_nr_pages(head);
 -
  			if (PageSwapBacked(head))
++<<<<<<< HEAD
 +				__dec_node_page_state(head, NR_SHMEM_THPS);
++=======
+ 				__mod_lruvec_page_state(head, NR_SHMEM_THPS,
+ 							-nr);
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
  			else
 -				__mod_lruvec_page_state(head, NR_FILE_THPS,
 -							-nr);
 +				__dec_node_page_state(head, NR_FILE_THPS);
  		}
  
 -		__split_huge_page(page, list, end);
 +		__split_huge_page(page, list, end, flags);
  		ret = 0;
  	} else {
  		if (IS_ENABLED(CONFIG_DEBUG_VM) && mapcount) {
diff --cc mm/khugepaged.c
index 2f68c8fcd2bc,75e246f680f4..000000000000
--- a/mm/khugepaged.c
+++ b/mm/khugepaged.c
@@@ -1582,11 -1855,12 +1582,15 @@@ out_unlock
  		put_page(page);
  		goto xa_unlocked;
  	}
 -	nr = thp_nr_pages(new_page);
  
  	if (is_shmem)
++<<<<<<< HEAD
 +		__inc_node_page_state(new_page, NR_SHMEM_THPS);
++=======
+ 		__mod_lruvec_page_state(new_page, NR_SHMEM_THPS, nr);
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
  	else {
 -		__mod_lruvec_page_state(new_page, NR_FILE_THPS, nr);
 +		__inc_node_page_state(new_page, NR_FILE_THPS);
  		filemap_nr_thps_inc(mapping);
  	}
  
diff --cc mm/memcontrol.c
index 4d65b541b4a3,d3a0c59210e7..000000000000
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@@ -1468,6 -1510,51 +1468,54 @@@ static bool mem_cgroup_wait_acct_move(s
  	return false;
  }
  
++<<<<<<< HEAD
++=======
+ struct memory_stat {
+ 	const char *name;
+ 	unsigned int ratio;
+ 	unsigned int idx;
+ };
+ 
+ static const struct memory_stat memory_stats[] = {
+ 	{ "anon", PAGE_SIZE, NR_ANON_MAPPED },
+ 	{ "file", PAGE_SIZE, NR_FILE_PAGES },
+ 	{ "kernel_stack", 1024, NR_KERNEL_STACK_KB },
+ 	{ "pagetables", PAGE_SIZE, NR_PAGETABLE },
+ 	{ "percpu", 1, MEMCG_PERCPU_B },
+ 	{ "sock", PAGE_SIZE, MEMCG_SOCK },
+ 	{ "shmem", PAGE_SIZE, NR_SHMEM },
+ 	{ "file_mapped", PAGE_SIZE, NR_FILE_MAPPED },
+ 	{ "file_dirty", PAGE_SIZE, NR_FILE_DIRTY },
+ 	{ "file_writeback", PAGE_SIZE, NR_WRITEBACK },
+ #ifdef CONFIG_TRANSPARENT_HUGEPAGE
+ 	{ "anon_thp", PAGE_SIZE, NR_ANON_THPS },
+ 	{ "file_thp", PAGE_SIZE, NR_FILE_THPS },
+ 	{ "shmem_thp", PAGE_SIZE, NR_SHMEM_THPS },
+ #endif
+ 	{ "inactive_anon", PAGE_SIZE, NR_INACTIVE_ANON },
+ 	{ "active_anon", PAGE_SIZE, NR_ACTIVE_ANON },
+ 	{ "inactive_file", PAGE_SIZE, NR_INACTIVE_FILE },
+ 	{ "active_file", PAGE_SIZE, NR_ACTIVE_FILE },
+ 	{ "unevictable", PAGE_SIZE, NR_UNEVICTABLE },
+ 
+ 	/*
+ 	 * Note: The slab_reclaimable and slab_unreclaimable must be
+ 	 * together and slab_reclaimable must be in front.
+ 	 */
+ 	{ "slab_reclaimable", 1, NR_SLAB_RECLAIMABLE_B },
+ 	{ "slab_unreclaimable", 1, NR_SLAB_UNRECLAIMABLE_B },
+ 
+ 	/* The memory events */
+ 	{ "workingset_refault_anon", 1, WORKINGSET_REFAULT_ANON },
+ 	{ "workingset_refault_file", 1, WORKINGSET_REFAULT_FILE },
+ 	{ "workingset_activate_anon", 1, WORKINGSET_ACTIVATE_ANON },
+ 	{ "workingset_activate_file", 1, WORKINGSET_ACTIVATE_FILE },
+ 	{ "workingset_restore_anon", 1, WORKINGSET_RESTORE_ANON },
+ 	{ "workingset_restore_file", 1, WORKINGSET_RESTORE_FILE },
+ 	{ "workingset_nodereclaim", 1, WORKINGSET_NODERECLAIM },
+ };
+ 
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
  static char *memory_stat_format(struct mem_cgroup *memcg)
  {
  	struct seq_buf s;
diff --cc mm/shmem.c
index 743eb238d81e,ff741d229701..000000000000
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@@ -649,7 -713,7 +649,11 @@@ next
  		}
  		if (PageTransHuge(page)) {
  			count_vm_event(THP_FILE_ALLOC);
++<<<<<<< HEAD
 +			__inc_node_page_state(page, NR_SHMEM_THPS);
++=======
+ 			__mod_lruvec_page_state(page, NR_SHMEM_THPS, nr);
++>>>>>>> 57b2847d3c1d (mm: memcontrol: convert NR_SHMEM_THPS account to pages)
  		}
  		mapping->nrpages += nr;
  		__mod_lruvec_page_state(page, NR_FILE_PAGES, nr);
* Unmerged path drivers/base/node.c
diff --git a/fs/proc/meminfo.c b/fs/proc/meminfo.c
index 89a6b114397f..cc55237656c8 100644
--- a/fs/proc/meminfo.c
+++ b/fs/proc/meminfo.c
@@ -132,7 +132,7 @@ static int meminfo_proc_show(struct seq_file *m, void *v)
 	show_val_kb(m, "AnonHugePages:  ",
 		    global_node_page_state(NR_ANON_THPS) * HPAGE_PMD_NR);
 	show_val_kb(m, "ShmemHugePages: ",
-		    global_node_page_state(NR_SHMEM_THPS) * HPAGE_PMD_NR);
+		    global_node_page_state(NR_SHMEM_THPS));
 	show_val_kb(m, "ShmemPmdMapped: ",
 		    global_node_page_state(NR_SHMEM_PMDMAPPED) * HPAGE_PMD_NR);
 	show_val_kb(m, "FileHugePages:  ",
* Unmerged path include/linux/mmzone.h
* Unmerged path mm/filemap.c
* Unmerged path mm/huge_memory.c
* Unmerged path mm/khugepaged.c
* Unmerged path mm/memcontrol.c
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 8c7425895151..77aba25205ee 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -5405,7 +5405,7 @@ void show_free_areas(unsigned int filter, nodemask_t *nodemask)
 			K(node_page_state(pgdat, NR_WRITEBACK)),
 			K(node_page_state(pgdat, NR_SHMEM)),
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
-			K(node_page_state(pgdat, NR_SHMEM_THPS) * HPAGE_PMD_NR),
+			K(node_page_state(pgdat, NR_SHMEM_THPS)),
 			K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED)
 					* HPAGE_PMD_NR),
 			K(node_page_state(pgdat, NR_ANON_THPS) * HPAGE_PMD_NR),
* Unmerged path mm/shmem.c
