net: core: add dev_get_tstats64 as a ndo_get_stats64 implementation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Heiner Kallweit <hkallweit1@gmail.com>
commit a18394269fc87276963e8d965c730900178d7e4b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/a1839426.failed

It's a frequent pattern to use netdev->stats for the less frequently
accessed counters and per-cpu counters for the frequently accessed
counters (rx/tx bytes/packets). Add a default ndo_get_stats64()
implementation for this use case.

	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit a18394269fc87276963e8d965c730900178d7e4b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index b5b855b6fd10,7ce648a564f7..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -4571,6 -4525,9 +4571,12 @@@ struct rtnl_link_stats64 *dev_get_stats
  					struct rtnl_link_stats64 *storage);
  void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
  			     const struct net_device_stats *netdev_stats);
++<<<<<<< HEAD
++=======
+ void dev_fetch_sw_netstats(struct rtnl_link_stats64 *s,
+ 			   const struct pcpu_sw_netstats __percpu *netstats);
+ void dev_get_tstats64(struct net_device *dev, struct rtnl_link_stats64 *s);
++>>>>>>> a18394269fc8 (net: core: add dev_get_tstats64 as a ndo_get_stats64 implementation)
  
  extern int		netdev_max_backlog;
  extern int		netdev_tstamp_prequeue;
diff --cc net/core/dev.c
index c41240820296,60d325bda0d7..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -9783,6 -10332,55 +9783,58 @@@ struct rtnl_link_stats64 *dev_get_stats
  }
  EXPORT_SYMBOL(dev_get_stats);
  
++<<<<<<< HEAD
++=======
+ /**
+  *	dev_fetch_sw_netstats - get per-cpu network device statistics
+  *	@s: place to store stats
+  *	@netstats: per-cpu network stats to read from
+  *
+  *	Read per-cpu network statistics and populate the related fields in @s.
+  */
+ void dev_fetch_sw_netstats(struct rtnl_link_stats64 *s,
+ 			   const struct pcpu_sw_netstats __percpu *netstats)
+ {
+ 	int cpu;
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		const struct pcpu_sw_netstats *stats;
+ 		struct pcpu_sw_netstats tmp;
+ 		unsigned int start;
+ 
+ 		stats = per_cpu_ptr(netstats, cpu);
+ 		do {
+ 			start = u64_stats_fetch_begin_irq(&stats->syncp);
+ 			tmp.rx_packets = stats->rx_packets;
+ 			tmp.rx_bytes   = stats->rx_bytes;
+ 			tmp.tx_packets = stats->tx_packets;
+ 			tmp.tx_bytes   = stats->tx_bytes;
+ 		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
+ 
+ 		s->rx_packets += tmp.rx_packets;
+ 		s->rx_bytes   += tmp.rx_bytes;
+ 		s->tx_packets += tmp.tx_packets;
+ 		s->tx_bytes   += tmp.tx_bytes;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(dev_fetch_sw_netstats);
+ 
+ /**
+  *	dev_get_tstats64 - ndo_get_stats64 implementation
+  *	@dev: device to get statistics from
+  *	@s: place to store stats
+  *
+  *	Populate @s from dev->stats and dev->tstats. Can be used as
+  *	ndo_get_stats64() callback.
+  */
+ void dev_get_tstats64(struct net_device *dev, struct rtnl_link_stats64 *s)
+ {
+ 	netdev_stats_to_stats64(s, &dev->stats);
+ 	dev_fetch_sw_netstats(s, dev->tstats);
+ }
+ EXPORT_SYMBOL_GPL(dev_get_tstats64);
+ 
++>>>>>>> a18394269fc8 (net: core: add dev_get_tstats64 as a ndo_get_stats64 implementation)
  struct netdev_queue *dev_ingress_queue_create(struct net_device *dev)
  {
  	struct netdev_queue *queue = dev_ingress_queue(dev);
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev.c
