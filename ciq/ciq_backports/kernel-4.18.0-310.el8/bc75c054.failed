devlink: convert flash_update to use params structure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit bc75c054f04048517e0b153ab38d973bbcdcef59
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/bc75c054.failed

The devlink core recently gained support for checking whether the driver
supports a flash_update parameter, via `supported_flash_update_params`.
However, parameters are specified as function arguments. Adding a new
parameter still requires modifying the signature of the .flash_update
callback in all drivers.

Convert the .flash_update function to take a new `struct
devlink_flash_update_params` instead. By using this structure, and the
`supported_flash_update_params` bit field, a new parameter to
flash_update can be added without requiring modification to existing
drivers.

As before, all parameters except file_name will require driver opt-in.
Because file_name is a necessary field to for the flash_update to make
sense, no "SUPPORTED" bitflag is provided and it is always considered
valid. All future additional parameters will require a new bit in the
supported_flash_update_params bitfield.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Jakub Kicinski <kuba@kernel.org>
	Cc: Jiri Pirko <jiri@mellanox.com>
	Cc: Jakub Kicinski <kuba@kernel.org>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Michael Chan <michael.chan@broadcom.com>
	Cc: Bin Luo <luobin9@huawei.com>
	Cc: Saeed Mahameed <saeedm@mellanox.com>
	Cc: Leon Romanovsky <leon@kernel.org>
	Cc: Ido Schimmel <idosch@mellanox.com>
	Cc: Danielle Ratson <danieller@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bc75c054f04048517e0b153ab38d973bbcdcef59)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
#	drivers/net/ethernet/huawei/hinic/hinic_devlink.c
#	drivers/net/ethernet/mellanox/mlx5/core/devlink.c
#	drivers/net/ethernet/mellanox/mlxsw/core.c
#	drivers/net/ethernet/netronome/nfp/nfp_devlink.c
#	drivers/net/ethernet/pensando/ionic/ionic_devlink.c
#	include/net/devlink.h
#	net/core/devlink.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index 3a854195d5b0,d436134bdc40..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -33,15 -31,12 +34,20 @@@ bnxt_dl_flash_update(struct devlink *dl
  	}
  
  	devlink_flash_update_begin_notify(dl);
++<<<<<<< HEAD
 +	devlink_flash_update_status_notify(dl, "Preparing to flash", region, 0,
 +					   0);
 +	rc = bnxt_flash_package_from_file(bp->dev, filename, 0);
++=======
+ 	devlink_flash_update_status_notify(dl, "Preparing to flash", NULL, 0, 0);
+ 	rc = bnxt_flash_package_from_file(bp->dev, params->file_name, 0);
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  	if (!rc)
 -		devlink_flash_update_status_notify(dl, "Flashing done", NULL, 0, 0);
 +		devlink_flash_update_status_notify(dl, "Flashing done", region,
 +						   0, 0);
  	else
 -		devlink_flash_update_status_notify(dl, "Flashing failed", NULL, 0, 0);
 +		devlink_flash_update_status_notify(dl, "Flashing failed",
 +						   region, 0, 0);
  	devlink_flash_update_end_notify(dl);
  	return rc;
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/devlink.c
index fcd4875639de,9b14e3f805a2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@@ -16,10 -15,7 +15,14 @@@ static int mlx5_devlink_flash_update(st
  	const struct firmware *fw;
  	int err;
  
++<<<<<<< HEAD
 +	if (component)
 +		return -EOPNOTSUPP;
 +
 +	err = request_firmware_direct(&fw, file_name, &dev->pdev->dev);
++=======
+ 	err = request_firmware_direct(&fw, params->file_name, &dev->pdev->dev);
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  	if (err)
  		return err;
  
diff --cc drivers/net/ethernet/mellanox/mlxsw/core.c
index 4238bb46a635,f8dddcf461f5..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@@ -1120,10 -1108,7 +1120,14 @@@ static int mlxsw_core_fw_flash_update(s
  	const struct firmware *firmware;
  	int err;
  
++<<<<<<< HEAD
 +	if (component)
 +		return -EOPNOTSUPP;
 +
 +	err = request_firmware_direct(&firmware, file_name, mlxsw_core->bus_info->dev);
++=======
+ 	err = request_firmware_direct(&firmware, params->file_name, mlxsw_core->bus_info->dev);
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  	if (err)
  		return err;
  	err = mlxsw_core_fw_flash(mlxsw_core, firmware, extack);
diff --cc drivers/net/ethernet/netronome/nfp/nfp_devlink.c
index be52510d446b,97d2b03208de..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_devlink.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_devlink.c
@@@ -329,12 -329,11 +329,17 @@@ err_close_nsp
  }
  
  static int
- nfp_devlink_flash_update(struct devlink *devlink, const char *path,
- 			 const char *component, struct netlink_ext_ack *extack)
+ nfp_devlink_flash_update(struct devlink *devlink,
+ 			 struct devlink_flash_update_params *params,
+ 			 struct netlink_ext_ack *extack)
  {
++<<<<<<< HEAD
 +	if (component)
 +		return -EOPNOTSUPP;
 +	return nfp_flash_update_common(devlink_priv(devlink), path, extack);
++=======
+ 	return nfp_flash_update_common(devlink_priv(devlink), params->file_name, extack);
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  }
  
  const struct devlink_ops nfp_devlink_ops = {
diff --cc drivers/net/ethernet/pensando/ionic/ionic_devlink.c
index 5348f05ebc32,51d64718ed9f..000000000000
--- a/drivers/net/ethernet/pensando/ionic/ionic_devlink.c
+++ b/drivers/net/ethernet/pensando/ionic/ionic_devlink.c
@@@ -16,10 -15,7 +15,14 @@@ static int ionic_dl_flash_update(struc
  {
  	struct ionic *ionic = devlink_priv(dl);
  
++<<<<<<< HEAD
 +	if (component)
 +		return -EOPNOTSUPP;
 +
 +	return ionic_firmware_update(ionic->lif, fwname, extack);
++=======
+ 	return ionic_firmware_update(ionic->lif, params->file_name, extack);
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  }
  
  static int ionic_dl_info_get(struct devlink *dl, struct devlink_info_req *req,
diff --cc include/net/devlink.h
index 5414aff70555,7794e1601772..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -546,6 -550,22 +546,25 @@@ enum devlink_param_generic_id 
  /* Firmware bundle identifier */
  #define DEVLINK_INFO_VERSION_GENERIC_FW_BUNDLE_ID	"fw.bundle_id"
  
++<<<<<<< HEAD
++=======
+ /**
+  * struct devlink_flash_update_params - Flash Update parameters
+  * @file_name: the name of the flash firmware file to update from
+  * @component: the flash component to update
+  *
+  * With the exception of file_name, drivers must opt-in to parameters by
+  * setting the appropriate bit in the supported_flash_update_params field in
+  * their devlink_ops structure.
+  */
+ struct devlink_flash_update_params {
+ 	const char *file_name;
+ 	const char *component;
+ };
+ 
+ #define DEVLINK_SUPPORT_FLASH_UPDATE_COMPONENT	BIT(0)
+ 
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  struct devlink_region;
  struct devlink_info_req;
  
@@@ -1093,8 -1119,15 +1112,20 @@@ struct devlink_ops 
  				      struct netlink_ext_ack *extack);
  	int (*info_get)(struct devlink *devlink, struct devlink_info_req *req,
  			struct netlink_ext_ack *extack);
++<<<<<<< HEAD
 +	int (*flash_update)(struct devlink *devlink, const char *file_name,
 +			    const char *component,
++=======
+ 	/**
+ 	 * @flash_update: Device flash update function
+ 	 *
+ 	 * Used to perform a flash update for the device. The set of
+ 	 * parameters supported by the driver should be set in
+ 	 * supported_flash_update_params.
+ 	 */
+ 	int (*flash_update)(struct devlink *devlink,
+ 			    struct devlink_flash_update_params *params,
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  			    struct netlink_ext_ack *extack);
  	/**
  	 * @trap_init: Trap initialization function.
diff --cc net/core/devlink.c
index 26026761598e,6766f9ef3152..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -3153,22 -3147,32 +3153,42 @@@ EXPORT_SYMBOL_GPL(devlink_flash_update_
  static int devlink_nl_cmd_flash_update(struct sk_buff *skb,
  				       struct genl_info *info)
  {
+ 	struct devlink_flash_update_params params = {};
  	struct devlink *devlink = info->user_ptr[0];
++<<<<<<< HEAD
 +	const char *file_name, *component;
++=======
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
  	struct nlattr *nla_component;
 -	u32 supported_params;
  
  	if (!devlink->ops->flash_update)
  		return -EOPNOTSUPP;
  
  	if (!info->attrs[DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME])
  		return -EINVAL;
++<<<<<<< HEAD
 +	file_name = nla_data(info->attrs[DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME]);
 +
 +	nla_component = info->attrs[DEVLINK_ATTR_FLASH_UPDATE_COMPONENT];
 +	component = nla_component ? nla_data(nla_component) : NULL;
++=======
  
- 	return devlink->ops->flash_update(devlink, file_name, component,
- 					  info->extack);
+ 	supported_params = devlink->ops->supported_flash_update_params;
+ 
+ 	params.file_name = nla_data(info->attrs[DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME]);
+ 
+ 	nla_component = info->attrs[DEVLINK_ATTR_FLASH_UPDATE_COMPONENT];
+ 	if (nla_component) {
+ 		if (!(supported_params & DEVLINK_SUPPORT_FLASH_UPDATE_COMPONENT)) {
+ 			NL_SET_ERR_MSG_ATTR(info->extack, nla_component,
+ 					    "component update is not supported by this device");
+ 			return -EOPNOTSUPP;
+ 		}
+ 		params.component = nla_data(nla_component);
+ 	}
++>>>>>>> bc75c054f040 (devlink: convert flash_update to use params structure)
+ 
+ 	return devlink->ops->flash_update(devlink, &params, info->extack);
  }
  
  static const struct devlink_param devlink_param_generic[] = {
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_devlink.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_devlink.c
diff --git a/drivers/net/ethernet/intel/ice/ice_devlink.c b/drivers/net/ethernet/intel/ice/ice_devlink.c
index fcaf121d9ee1..f25c889c63bc 100644
--- a/drivers/net/ethernet/intel/ice/ice_devlink.c
+++ b/drivers/net/ethernet/intel/ice/ice_devlink.c
@@ -233,8 +233,7 @@ static int ice_devlink_info_get(struct devlink *devlink,
 /**
  * ice_devlink_flash_update - Update firmware stored in flash on the device
  * @devlink: pointer to devlink associated with device to update
- * @path: the path of the firmware file to use via request_firmware
- * @component: name of the component to update, or NULL
+ * @params: flash update parameters
  * @extack: netlink extended ACK structure
  *
  * Perform a device flash update. The bulk of the update logic is contained
@@ -243,8 +242,9 @@ static int ice_devlink_info_get(struct devlink *devlink,
  * Returns: zero on success, or an error code on failure.
  */
 static int
-ice_devlink_flash_update(struct devlink *devlink, const char *path,
-			 const char *component, struct netlink_ext_ack *extack)
+ice_devlink_flash_update(struct devlink *devlink,
+			 struct devlink_flash_update_params *params,
+			 struct netlink_ext_ack *extack)
 {
 	struct ice_pf *pf = devlink_priv(devlink);
 	struct device *dev = &pf->pdev->dev;
@@ -265,7 +265,7 @@ ice_devlink_flash_update(struct devlink *devlink, const char *path,
 	if (err)
 		return err;
 
-	err = request_firmware(&fw, path, dev);
+	err = request_firmware(&fw, params->file_name, dev);
 	if (err) {
 		NL_SET_ERR_MSG_MOD(extack, "Unable to read file from disk");
 		return err;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/core.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_devlink.c
* Unmerged path drivers/net/ethernet/pensando/ionic/ionic_devlink.c
diff --git a/drivers/net/netdevsim/dev.c b/drivers/net/netdevsim/dev.c
index e665efd760f8..16b26f2dfbf6 100644
--- a/drivers/net/netdevsim/dev.c
+++ b/drivers/net/netdevsim/dev.c
@@ -742,8 +742,8 @@ static int nsim_dev_info_get(struct devlink *devlink,
 #define NSIM_DEV_FLASH_CHUNK_SIZE 1000
 #define NSIM_DEV_FLASH_CHUNK_TIME_MS 10
 
-static int nsim_dev_flash_update(struct devlink *devlink, const char *file_name,
-				 const char *component,
+static int nsim_dev_flash_update(struct devlink *devlink,
+				 struct devlink_flash_update_params *params,
 				 struct netlink_ext_ack *extack)
 {
 	struct nsim_dev *nsim_dev = devlink_priv(devlink);
@@ -753,13 +753,13 @@ static int nsim_dev_flash_update(struct devlink *devlink, const char *file_name,
 		devlink_flash_update_begin_notify(devlink);
 		devlink_flash_update_status_notify(devlink,
 						   "Preparing to flash",
-						   component, 0, 0);
+						   params->component, 0, 0);
 	}
 
 	for (i = 0; i < NSIM_DEV_FLASH_SIZE / NSIM_DEV_FLASH_CHUNK_SIZE; i++) {
 		if (nsim_dev->fw_update_status)
 			devlink_flash_update_status_notify(devlink, "Flashing",
-							   component,
+							   params->component,
 							   i * NSIM_DEV_FLASH_CHUNK_SIZE,
 							   NSIM_DEV_FLASH_SIZE);
 		msleep(NSIM_DEV_FLASH_CHUNK_TIME_MS);
@@ -767,13 +767,13 @@ static int nsim_dev_flash_update(struct devlink *devlink, const char *file_name,
 
 	if (nsim_dev->fw_update_status) {
 		devlink_flash_update_status_notify(devlink, "Flashing",
-						   component,
+						   params->component,
 						   NSIM_DEV_FLASH_SIZE,
 						   NSIM_DEV_FLASH_SIZE);
 		devlink_flash_update_timeout_notify(devlink, "Flash select",
-						    component, 81);
+						    params->component, 81);
 		devlink_flash_update_status_notify(devlink, "Flashing done",
-						   component, 0, 0);
+						   params->component, 0, 0);
 		devlink_flash_update_end_notify(devlink);
 	}
 
* Unmerged path include/net/devlink.h
* Unmerged path net/core/devlink.c
diff --git a/tools/testing/selftests/drivers/net/netdevsim/devlink.sh b/tools/testing/selftests/drivers/net/netdevsim/devlink.sh
index de4b32fc4223..1e7541688978 100755
--- a/tools/testing/selftests/drivers/net/netdevsim/devlink.sh
+++ b/tools/testing/selftests/drivers/net/netdevsim/devlink.sh
@@ -23,6 +23,9 @@ fw_flash_test()
 	devlink dev flash $DL_HANDLE file dummy
 	check_err $? "Failed to flash with status updates on"
 
+	devlink dev flash $DL_HANDLE file dummy component fw.mgmt
+	check_err $? "Failed to flash with component attribute"
+
 	echo "n"> $DEBUGFS_DIR/fw_update_status
 	check_err $? "Failed to disable status updates"
 
