RDMA/core Remove uverbs_ex_cmd_mask

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jason Gunthorpe <jgg@nvidia.com>
commit bd2a40cc2463766ed1a55d94a4ccbdcd621da323
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/bd2a40cc.failed

No driver sets it, and the core code sets a maximum mask, simply remove
it.

Disabled operations are now handled either by having a NULL ops pointer,
or by having the common driver callbacks check for unsupported extended
attributes.

Link: https://lore.kernel.org/r/9-v1-caa70ba3d1ab+1436e-ucmd_mask_jgg@nvidia.com
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit bd2a40cc2463766ed1a55d94a4ccbdcd621da323)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/device.c
diff --cc drivers/infiniband/core/device.c
index 30a7bf1c3b41,939664765536..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -601,10 -601,35 +601,42 @@@ struct ib_device *_ib_alloc_device(size
  	init_completion(&device->unreg_completion);
  	INIT_WORK(&device->unregistration_work, ib_unregister_work);
  
++<<<<<<< HEAD
 +	spin_lock_init(&device->cq_pools_lock);
 +	for (i = 0; i < ARRAY_SIZE(device->cq_pools); i++)
 +		INIT_LIST_HEAD(&device->cq_pools[i]);
 +
++=======
+ 	device->uverbs_cmd_mask =
+ 		BIT_ULL(IB_USER_VERBS_CMD_ALLOC_MW) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_ALLOC_PD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_ATTACH_MCAST) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CLOSE_XRCD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_CREATE_XSRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEALLOC_MW) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEALLOC_PD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DEREG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_CQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DESTROY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_DETACH_MCAST) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_GET_CONTEXT) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_MODIFY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_MODIFY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_OPEN_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_OPEN_XRCD) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_DEVICE) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_PORT) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_QP) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_QUERY_SRQ) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_REG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_REREG_MR) |
+ 		BIT_ULL(IB_USER_VERBS_CMD_RESIZE_CQ);
++>>>>>>> bd2a40cc2463 (RDMA/core Remove uverbs_ex_cmd_mask)
  	return device;
  }
  EXPORT_SYMBOL(_ib_alloc_device);
* Unmerged path drivers/infiniband/core/device.c
diff --git a/drivers/infiniband/core/uverbs_uapi.c b/drivers/infiniband/core/uverbs_uapi.c
index 5addc8fae3f3..62f5bcb712cf 100644
--- a/drivers/infiniband/core/uverbs_uapi.c
+++ b/drivers/infiniband/core/uverbs_uapi.c
@@ -79,10 +79,7 @@ static int uapi_create_write(struct uverbs_api *uapi,
 
 	method_elm->is_ex = def->write.is_ex;
 	method_elm->handler = def->func_write;
-	if (def->write.is_ex)
-		method_elm->disabled = !(ibdev->uverbs_ex_cmd_mask &
-					 BIT_ULL(def->write.command_num));
-	else
+	if (!def->write.is_ex)
 		method_elm->disabled = !(ibdev->uverbs_cmd_mask &
 					 BIT_ULL(def->write.command_num));
 
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index a63d25a22e2f..e94c7d99cc6b 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -2668,7 +2668,6 @@ struct ib_device {
 	const struct attribute_group	*groups[3];
 
 	u64			     uverbs_cmd_mask;
-	u64			     uverbs_ex_cmd_mask;
 
 	char			     node_desc[IB_DEVICE_NODE_DESC_MAX];
 	__be64			     node_guid;
