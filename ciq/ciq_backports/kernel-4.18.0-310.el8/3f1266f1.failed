block: move block-related definitions out of fs.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 3f1266f1f82d7b8c72472a8921e80aa3e611fb62
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/3f1266f1.failed

Move most of the block related definition out of fs.h into more suitable
headers.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 3f1266f1f82d7b8c72472a8921e80aa3e611fb62)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/fs.h
diff --cc include/linux/fs.h
index b2e860e780cf,add30c3bdf9a..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -2625,37 -2567,6 +2586,40 @@@ void emergency_thaw_all(void)
  extern int sync_filesystem(struct super_block *);
  extern const struct file_operations def_blk_fops;
  extern const struct file_operations def_chr_fops;
++<<<<<<< HEAD
 +#ifdef CONFIG_BLOCK
 +extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
 +extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
 +extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
 +extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
 +extern struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
 +					       void *holder);
 +extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
 +					      void *holder);
 +extern struct block_device *bd_start_claiming(struct block_device *bdev,
 +					      void *holder);
 +extern void bd_abort_claiming(struct block_device *bdev,
 +			      struct block_device *whole, void *holder);
 +extern void blkdev_put(struct block_device *bdev, fmode_t mode);
 +
 +#ifdef CONFIG_SYSFS
 +extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
 +extern void bd_unlink_disk_holder(struct block_device *bdev,
 +				  struct gendisk *disk);
 +#else
 +static inline int bd_link_disk_holder(struct block_device *bdev,
 +				      struct gendisk *disk)
 +{
 +	return 0;
 +}
 +static inline void bd_unlink_disk_holder(struct block_device *bdev,
 +					 struct gendisk *disk)
 +{
 +}
 +#endif
 +#endif
++=======
++>>>>>>> 3f1266f1f82d (block: move block-related definitions out of fs.h)
  
  /* fs/char_dev.c */
  #define CHRDEV_MAJOR_MAX 512
@@@ -2706,12 -2603,6 +2656,15 @@@ extern void init_special_inode(struct i
  extern void make_bad_inode(struct inode *);
  extern bool is_bad_inode(struct inode *);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_BLOCK
 +extern int revalidate_disk(struct gendisk *);
 +extern int check_disk_change(struct block_device *);
 +extern int __invalidate_device(struct block_device *, bool);
 +extern int invalidate_partition(struct gendisk *, int);
 +#endif
++=======
++>>>>>>> 3f1266f1f82d (block: move block-related definitions out of fs.h)
  unsigned long invalidate_mapping_pages(struct address_space *mapping,
  					pgoff_t start, pgoff_t end);
  
diff --git a/fs/affs/file.c b/fs/affs/file.c
index a85817f54483..a26a0f96c119 100644
--- a/fs/affs/file.c
+++ b/fs/affs/file.c
@@ -14,6 +14,7 @@
  */
 
 #include <linux/uio.h>
+#include <linux/blkdev.h>
 #include "affs.h"
 
 static struct buffer_head *affs_get_extblock_slow(struct inode *inode, u32 ext);
diff --git a/fs/hfs/inode.c b/fs/hfs/inode.c
index 2a16111d312f..d7d6cbbcb0cb 100644
--- a/fs/hfs/inode.c
+++ b/fs/hfs/inode.c
@@ -17,6 +17,7 @@
 #include <linux/cred.h>
 #include <linux/uio.h>
 #include <linux/xattr.h>
+#include <linux/blkdev.h>
 
 #include "hfs_fs.h"
 #include "btree.h"
diff --git a/fs/internal.h b/fs/internal.h
index 7a46c633ddaf..83cb0f6421cc 100644
--- a/fs/internal.h
+++ b/fs/internal.h
@@ -27,7 +27,9 @@ struct user_namespace;
 extern void __init bdev_cache_init(void);
 
 extern int __sync_blockdev(struct block_device *bdev, int wait);
-
+void iterate_bdevs(void (*)(struct block_device *, void *), void *);
+void emergency_thaw_bdev(struct super_block *sb);
+void bd_forget(struct inode *inode);
 #else
 static inline void bdev_cache_init(void)
 {
@@ -37,7 +39,18 @@ static inline int __sync_blockdev(struct block_device *bdev, int wait)
 {
 	return 0;
 }
-#endif
+static inline void iterate_bdevs(void (*f)(struct block_device *, void *),
+		void *arg)
+{
+}
+static inline int emergency_thaw_bdev(struct super_block *sb)
+{
+	return 0;
+}
+static inline void bd_forget(struct inode *inode)
+{
+}
+#endif /* CONFIG_BLOCK */
 
 /*
  * buffer.c
diff --git a/fs/ntfs/dir.c b/fs/ntfs/dir.c
index 1a24be9e8405..bb5014f08f9d 100644
--- a/fs/ntfs/dir.c
+++ b/fs/ntfs/dir.c
@@ -22,6 +22,7 @@
 
 #include <linux/buffer_head.h>
 #include <linux/slab.h>
+#include <linux/blkdev.h>
 
 #include "dir.h"
 #include "aops.h"
diff --git a/fs/proc/devices.c b/fs/proc/devices.c
index 37d38697eaf8..837971e74109 100644
--- a/fs/proc/devices.c
+++ b/fs/proc/devices.c
@@ -3,6 +3,7 @@
 #include <linux/init.h>
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/blkdev.h>
 
 static int devinfo_show(struct seq_file *f, void *v)
 {
diff --git a/fs/quota/dquot.c b/fs/quota/dquot.c
index 0f28273eb703..425aa3b3918b 100644
--- a/fs/quota/dquot.c
+++ b/fs/quota/dquot.c
@@ -78,6 +78,7 @@
 #include <linux/namei.h>
 #include <linux/capability.h>
 #include <linux/quotaops.h>
+#include <linux/blkdev.h>
 #include "../internal.h" /* ugh */
 
 #include <linux/uaccess.h>
diff --git a/fs/reiserfs/procfs.c b/fs/reiserfs/procfs.c
index e39b3910d24d..592b526683b6 100644
--- a/fs/reiserfs/procfs.c
+++ b/fs/reiserfs/procfs.c
@@ -15,6 +15,7 @@
 #include "reiserfs.h"
 #include <linux/init.h>
 #include <linux/proc_fs.h>
+#include <linux/blkdev.h>
 
 /*
  * LOCKING:
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index d2fea581dcca..d11e5526c43a 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1943,4 +1943,50 @@ static inline void bio_end_io_acct(struct bio *bio, unsigned long start_time)
 }
 #endif /* CONFIG_BLOCK */
 
+int bdev_read_only(struct block_device *bdev);
+int set_blocksize(struct block_device *bdev, int size);
+
+const char *bdevname(struct block_device *bdev, char *buffer);
+struct block_device *lookup_bdev(const char *);
+
+void blkdev_show(struct seq_file *seqf, off_t offset);
+
+#define BDEVNAME_SIZE	32	/* Largest string for a blockdev identifier */
+#define BDEVT_SIZE	10	/* Largest string for MAJ:MIN for blkdev */
+#ifdef CONFIG_BLOCK
+#define BLKDEV_MAJOR_MAX	512
+#else
+#define BLKDEV_MAJOR_MAX	0
+#endif
+
+int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
+struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
+		void *holder);
+struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode, void *holder);
+struct block_device *bd_start_claiming(struct block_device *bdev, void *holder);
+void bd_abort_claiming(struct block_device *bdev, struct block_device *whole,
+		void *holder);
+void blkdev_put(struct block_device *bdev, fmode_t mode);
+
+struct block_device *bdget(dev_t);
+struct block_device *bdgrab(struct block_device *bdev);
+void bdput(struct block_device *);
+
+#ifdef CONFIG_BLOCK
+void invalidate_bdev(struct block_device *bdev);
+int sync_blockdev(struct block_device *bdev);
+#else
+static inline void invalidate_bdev(struct block_device *bdev)
+{
+}
+static inline int sync_blockdev(struct block_device *bdev)
+{
+	return 0;
+}
 #endif
+int fsync_bdev(struct block_device *bdev);
+
+struct super_block *freeze_bdev(struct block_device *bdev);
+int thaw_bdev(struct block_device *bdev, struct super_block *sb);
+
+#endif /* _LINUX_BLKDEV_H */
* Unmerged path include/linux/fs.h
diff --git a/include/linux/genhd.h b/include/linux/genhd.h
index 0fcca343e13b..85ef9a18b094 100644
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@ -498,6 +498,33 @@ extern void blk_unregister_region(dev_t devt, unsigned long range);
 
 #define alloc_disk(minors) alloc_disk_node(minors, NUMA_NO_NODE)
 
+int register_blkdev(unsigned int major, const char *name);
+void unregister_blkdev(unsigned int major, const char *name);
+
+int revalidate_disk(struct gendisk *disk);
+int check_disk_change(struct block_device *bdev);
+int __invalidate_device(struct block_device *bdev, bool kill_dirty);
+void bd_set_size(struct block_device *bdev, loff_t size);
+
+/* for drivers/char/raw.c: */
+int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
+long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
+
+#ifdef CONFIG_SYSFS
+int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
+void bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk);
+#else
+static inline int bd_link_disk_holder(struct block_device *bdev,
+				      struct gendisk *disk)
+{
+	return 0;
+}
+static inline void bd_unlink_disk_holder(struct block_device *bdev,
+					 struct gendisk *disk)
+{
+}
+#endif /* CONFIG_SYSFS */
+
 #else /* CONFIG_BLOCK */
 
 static inline void printk_all_partitions(void) { }
diff --git a/include/linux/jbd2.h b/include/linux/jbd2.h
index decd0850395d..05f8a2cd7938 100644
--- a/include/linux/jbd2.h
+++ b/include/linux/jbd2.h
@@ -30,6 +30,7 @@
 #include <linux/timer.h>
 #include <linux/slab.h>
 #include <linux/bit_spinlock.h>
+#include <linux/blkdev.h>
 #include <crypto/hash.h>
 #endif
 
diff --git a/security/loadpin/loadpin.c b/security/loadpin/loadpin.c
index 56a57f4b1949..acbaaaf778cd 100644
--- a/security/loadpin/loadpin.c
+++ b/security/loadpin/loadpin.c
@@ -21,6 +21,7 @@
 #include <linux/fs.h>
 #include <linux/lsm_hooks.h>
 #include <linux/mount.h>
+#include <linux/blkdev.h>
 #include <linux/path.h>
 #include <linux/sched.h>	/* current */
 #include <linux/string_helpers.h>
