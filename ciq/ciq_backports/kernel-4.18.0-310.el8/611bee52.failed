block: replace bd_set_size with bd_set_nr_sectors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 611bee526b4a89d49f1b9914a770bfdc101d5fb5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/611bee52.failed

Replace bd_set_size with a version that takes the number of sectors
instead, as that fits most of the current and future callers much better.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 611bee526b4a89d49f1b9914a770bfdc101d5fb5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nbd.c
#	include/linux/genhd.h
diff --cc drivers/block/nbd.c
index d393d6149779,a54f2d155a31..000000000000
--- a/drivers/block/nbd.c
+++ b/drivers/block/nbd.c
@@@ -306,12 -309,11 +307,17 @@@ static void nbd_size_update(struct nbd_
  	}
  	blk_queue_logical_block_size(nbd->disk->queue, config->blksize);
  	blk_queue_physical_block_size(nbd->disk->queue, config->blksize);
- 	set_capacity(nbd->disk, config->bytesize >> 9);
+ 	set_capacity(nbd->disk, nr_sectors);
  	if (bdev) {
  		if (bdev->bd_disk) {
++<<<<<<< HEAD
 +			bd_set_size(bdev, config->bytesize);
 +			if (start)
 +				set_blocksize(bdev, config->blksize);
++=======
+ 			bd_set_nr_sectors(bdev, nr_sectors);
+ 			set_blocksize(bdev, config->blksize);
++>>>>>>> 611bee526b4a (block: replace bd_set_size with bd_set_nr_sectors)
  		} else
  			bdev->bd_invalidated = 1;
  		bdput(bdev);
diff --cc include/linux/genhd.h
index 0fcca343e13b,39025dc0397c..000000000000
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@@ -498,10 -369,40 +498,43 @@@ extern void blk_unregister_region(dev_
  
  #define alloc_disk(minors) alloc_disk_node(minors, NUMA_NO_NODE)
  
++<<<<<<< HEAD
++=======
+ int register_blkdev(unsigned int major, const char *name);
+ void unregister_blkdev(unsigned int major, const char *name);
+ 
+ int revalidate_disk(struct gendisk *disk);
+ int check_disk_change(struct block_device *bdev);
+ int __invalidate_device(struct block_device *bdev, bool kill_dirty);
+ void bd_set_nr_sectors(struct block_device *bdev, sector_t sectors);
+ 
+ /* for drivers/char/raw.c: */
+ int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
+ long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
+ 
+ #ifdef CONFIG_SYSFS
+ int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
+ void bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk);
+ #else
+ static inline int bd_link_disk_holder(struct block_device *bdev,
+ 				      struct gendisk *disk)
+ {
+ 	return 0;
+ }
+ static inline void bd_unlink_disk_holder(struct block_device *bdev,
+ 					 struct gendisk *disk)
+ {
+ }
+ #endif /* CONFIG_SYSFS */
+ 
+ #ifdef CONFIG_BLOCK
+ void printk_all_partitions(void);
+ dev_t blk_lookup_devt(const char *name, int partno);
++>>>>>>> 611bee526b4a (block: replace bd_set_size with bd_set_nr_sectors)
  #else /* CONFIG_BLOCK */
 -static inline void printk_all_partitions(void)
 -{
 -}
 +
 +static inline void printk_all_partitions(void) { }
 +
  static inline dev_t blk_lookup_devt(const char *name, int partno)
  {
  	dev_t devt = MKDEV(0, 0);
diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index 1628cb73fbe1..6b5ca762d682 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -253,7 +253,7 @@ static void loop_set_size(struct loop_device *lo, loff_t size)
 {
 	struct block_device *bdev = lo->lo_device;
 
-	bd_set_size(bdev, size << SECTOR_SHIFT);
+	bd_set_nr_sectors(bdev, size);
 
 	if (!set_capacity_revalidate_and_notify(lo->lo_disk, size, false))
 		kobject_uevent(&disk_to_dev(bdev->bd_disk)->kobj, KOBJ_CHANGE);
@@ -1263,7 +1263,7 @@ static int __loop_clr_fd(struct loop_device *lo, bool release)
 	set_capacity(lo->lo_disk, 0);
 	loop_sysfs_exit(lo);
 	if (bdev) {
-		bd_set_size(bdev, 0);
+		bd_set_nr_sectors(bdev, 0);
 		/* let user-space know about this change */
 		kobject_uevent(&disk_to_dev(bdev->bd_disk)->kobj, KOBJ_CHANGE);
 	}
* Unmerged path drivers/block/nbd.c
diff --git a/drivers/block/pktcdvd.c b/drivers/block/pktcdvd.c
index f58bc6abed63..5ebc510598be 100644
--- a/drivers/block/pktcdvd.c
+++ b/drivers/block/pktcdvd.c
@@ -2192,7 +2192,7 @@ static int pkt_open_dev(struct pktcdvd_device *pd, fmode_t write)
 
 	set_capacity(pd->disk, lba << 2);
 	set_capacity(pd->bdev->bd_disk, lba << 2);
-	bd_set_size(pd->bdev, (loff_t)lba << 11);
+	bd_set_nr_sectors(pd->bdev, lba << 2);
 
 	q = bdev_get_queue(pd->bdev);
 	if (write) {
diff --git a/drivers/nvme/host/nvme.h b/drivers/nvme/host/nvme.h
index 27291260757b..1f1aa0d3dacb 100644
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@ -668,7 +668,7 @@ static inline void nvme_mpath_update_disk_size(struct gendisk *disk)
 	struct block_device *bdev = bdget_disk(disk, 0);
 
 	if (bdev) {
-		bd_set_size(bdev, get_capacity(disk) << SECTOR_SHIFT);
+		bd_set_nr_sectors(bdev, get_capacity(disk));
 		bdput(bdev);
 	}
 }
diff --git a/fs/block_dev.c b/fs/block_dev.c
index f19cc879b480..fd0e022e9e1a 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -1472,13 +1472,13 @@ int check_disk_change(struct block_device *bdev)
 
 EXPORT_SYMBOL(check_disk_change);
 
-void bd_set_size(struct block_device *bdev, loff_t size)
+void bd_set_nr_sectors(struct block_device *bdev, sector_t sectors)
 {
 	inode_lock(bdev->bd_inode);
-	i_size_write(bdev->bd_inode, size);
+	i_size_write(bdev->bd_inode, (loff_t)sectors << SECTOR_SHIFT);
 	inode_unlock(bdev->bd_inode);
 }
-EXPORT_SYMBOL(bd_set_size);
+EXPORT_SYMBOL(bd_set_nr_sectors);
 
 static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part);
 
@@ -1603,7 +1603,7 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 			}
 
 			if (!ret) {
-				bd_set_size(bdev,(loff_t)get_capacity(disk)<<9);
+				bd_set_nr_sectors(bdev, get_capacity(disk));
 				set_init_blocksize(bdev);
 			}
 
@@ -1638,7 +1638,7 @@ static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)
 				ret = -ENXIO;
 				goto out_clear;
 			}
-			bd_set_size(bdev, (loff_t)bdev->bd_part->nr_sects << 9);
+			bd_set_nr_sectors(bdev, bdev->bd_part->nr_sects);
 			set_init_blocksize(bdev);
 		}
 
* Unmerged path include/linux/genhd.h
