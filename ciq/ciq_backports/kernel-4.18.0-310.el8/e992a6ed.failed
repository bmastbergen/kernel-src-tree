genetlink: allow dumping command-specific policy

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jakub Kicinski <kuba@kernel.org>
commit e992a6eda9a1eeeab73a8d2792464e4a2b1ebc3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/e992a6ed.failed

Right now CTRL_CMD_GETPOLICY can only dump the family-wide
policy. Support dumping policy of a specific op.

v3:
 - rebase after per-op policy export and handle that
v2:
 - make cmd U32, just in case.
v1:
 - don't echo op in the output in a naive way, this should
   make it cleaner to extend the output format for dumping
   policies for all the commands at once in the future.

	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
Link: https://lore.kernel.org/r/20201001225933.1373426-11-kuba@kernel.org
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e992a6eda9a1eeeab73a8d2792464e4a2b1ebc3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netlink/genetlink.c
diff --cc net/netlink/genetlink.c
index 3d222b22f604,c992424e4d63..000000000000
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@@ -107,16 -107,83 +107,90 @@@ static const struct genl_family *genl_f
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static const struct genl_ops *genl_get_cmd(u8 cmd,
 +					   const struct genl_family *family)
++=======
+ static int genl_get_cmd_cnt(const struct genl_family *family)
+ {
+ 	return family->n_ops + family->n_small_ops;
+ }
+ 
+ static void genl_op_from_full(const struct genl_family *family,
+ 			      unsigned int i, struct genl_ops *op)
+ {
+ 	*op = family->ops[i];
+ 
+ 	if (!op->maxattr)
+ 		op->maxattr = family->maxattr;
+ 	if (!op->policy)
+ 		op->policy = family->policy;
+ }
+ 
+ static int genl_get_cmd_full(u32 cmd, const struct genl_family *family,
+ 			     struct genl_ops *op)
++>>>>>>> e992a6eda9a1 (genetlink: allow dumping command-specific policy)
  {
  	int i;
  
  	for (i = 0; i < family->n_ops; i++)
 -		if (family->ops[i].cmd == cmd) {
 -			genl_op_from_full(family, i, op);
 -			return 0;
 -		}
 +		if (family->ops[i].cmd == cmd)
 +			return &family->ops[i];
  
++<<<<<<< HEAD
 +	return NULL;
++=======
+ 	return -ENOENT;
+ }
+ 
+ static void genl_op_from_small(const struct genl_family *family,
+ 			       unsigned int i, struct genl_ops *op)
+ {
+ 	memset(op, 0, sizeof(*op));
+ 	op->doit	= family->small_ops[i].doit;
+ 	op->dumpit	= family->small_ops[i].dumpit;
+ 	op->cmd		= family->small_ops[i].cmd;
+ 	op->internal_flags = family->small_ops[i].internal_flags;
+ 	op->flags	= family->small_ops[i].flags;
+ 	op->validate	= family->small_ops[i].validate;
+ 
+ 	op->maxattr = family->maxattr;
+ 	op->policy = family->policy;
+ }
+ 
+ static int genl_get_cmd_small(u32 cmd, const struct genl_family *family,
+ 			      struct genl_ops *op)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < family->n_small_ops; i++)
+ 		if (family->small_ops[i].cmd == cmd) {
+ 			genl_op_from_small(family, i, op);
+ 			return 0;
+ 		}
+ 
+ 	return -ENOENT;
+ }
+ 
+ static int genl_get_cmd(u32 cmd, const struct genl_family *family,
+ 			struct genl_ops *op)
+ {
+ 	if (!genl_get_cmd_full(cmd, family, op))
+ 		return 0;
+ 	return genl_get_cmd_small(cmd, family, op);
+ }
+ 
+ static void genl_get_cmd_by_index(unsigned int i,
+ 				  const struct genl_family *family,
+ 				  struct genl_ops *op)
+ {
+ 	if (i < family->n_ops)
+ 		genl_op_from_full(family, i, op);
+ 	else if (i < family->n_ops + family->n_small_ops)
+ 		genl_op_from_small(family, i - family->n_ops, op);
+ 	else
+ 		WARN_ON_ONCE(1);
++>>>>>>> e992a6eda9a1 (genetlink: allow dumping command-specific policy)
  }
  
  static int genl_allocate_reserve_groups(int n_groups, int *first_id)
diff --git a/include/uapi/linux/genetlink.h b/include/uapi/linux/genetlink.h
index bc9c98e84828..d83f214b4134 100644
--- a/include/uapi/linux/genetlink.h
+++ b/include/uapi/linux/genetlink.h
@@ -65,6 +65,7 @@ enum {
 	CTRL_ATTR_MCAST_GROUPS,
 	CTRL_ATTR_POLICY,
 	CTRL_ATTR_OP_POLICY,
+	CTRL_ATTR_OP,
 	__CTRL_ATTR_MAX,
 };
 
* Unmerged path net/netlink/genetlink.c
