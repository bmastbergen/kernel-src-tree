RDMA/rxe: Replace missing rxe_pool_get_index_locked

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Bob Pearson <rpearsonhpe@gmail.com>
commit ce2063e3872b849421c6135881b1a6fb16d9eab7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/ce2063e3.failed

One of the pool APIs for when caller is holding lock was not defined but
is declared in rxe_pool.h. This patch adds the definition.

Link: https://lore.kernel.org/r/20210125211641.2694-7-rpearson@hpe.com
	Signed-off-by: Bob Pearson <rpearson@hpe.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit ce2063e3872b849421c6135881b1a6fb16d9eab7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/sw/rxe/rxe_pool.c
diff --cc drivers/infiniband/sw/rxe/rxe_pool.c
index 3727f20dbe87,307d8986e7c9..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_pool.c
+++ b/drivers/infiniband/sw/rxe/rxe_pool.c
@@@ -447,23 -390,20 +447,30 @@@ void rxe_elem_release(struct kref *kref
  	if (pool->cleanup)
  		pool->cleanup(elem);
  
 -	if (!(pool->flags & RXE_POOL_NO_ALLOC)) {
 -		obj = (u8 *)elem - info->elem_offset;
 -		kfree(obj);
 -	}
 -
 +	if (!(pool->flags & RXE_POOL_NO_ALLOC))
 +		kmem_cache_free(pool_cache(pool), elem);
  	atomic_dec(&pool->num_elem);
 +	ib_device_put(&pool->rxe->ib_dev);
 +	rxe_pool_put(pool);
  }
  
- void *rxe_pool_get_index(struct rxe_pool *pool, u32 index)
+ void *rxe_pool_get_index_locked(struct rxe_pool *pool, u32 index)
  {
++<<<<<<< HEAD
 +	struct rb_node *node = NULL;
 +	struct rxe_pool_entry *elem = NULL;
 +	unsigned long flags;
 +
 +	read_lock_irqsave(&pool->pool_lock, flags);
++=======
+ 	struct rxe_type_info *info = &rxe_type_info[pool->type];
+ 	struct rb_node *node;
+ 	struct rxe_pool_entry *elem;
+ 	u8 *obj;
++>>>>>>> ce2063e3872b (RDMA/rxe: Replace missing rxe_pool_get_index_locked)
 +
 +	if (pool->state != RXE_POOL_STATE_VALID)
 +		goto out;
  
  	node = pool->index.tree.rb_node;
  
@@@ -474,28 -414,39 +481,55 @@@
  			node = node->rb_left;
  		else if (elem->index < index)
  			node = node->rb_right;
 -		else
 +		else {
 +			kref_get(&elem->ref_cnt);
  			break;
 +		}
  	}
  
++<<<<<<< HEAD
 +out:
++=======
+ 	if (node) {
+ 		kref_get(&elem->ref_cnt);
+ 		obj = (u8 *)elem - info->elem_offset;
+ 	} else {
+ 		obj = NULL;
+ 	}
+ 
+ 	return obj;
+ }
+ 
+ void *rxe_pool_get_index(struct rxe_pool *pool, u32 index)
+ {
+ 	u8 *obj;
+ 	unsigned long flags;
+ 
+ 	read_lock_irqsave(&pool->pool_lock, flags);
+ 	obj = rxe_pool_get_index_locked(pool, index);
++>>>>>>> ce2063e3872b (RDMA/rxe: Replace missing rxe_pool_get_index_locked)
  	read_unlock_irqrestore(&pool->pool_lock, flags);
 -
 -	return obj;
 +	return node ? elem : NULL;
  }
  
 -void *rxe_pool_get_key_locked(struct rxe_pool *pool, void *key)
 +void *rxe_pool_get_key(struct rxe_pool *pool, void *key)
  {
++<<<<<<< HEAD
 +	struct rb_node *node = NULL;
 +	struct rxe_pool_entry *elem = NULL;
++=======
+ 	struct rxe_type_info *info = &rxe_type_info[pool->type];
+ 	struct rb_node *node;
+ 	struct rxe_pool_entry *elem;
+ 	u8 *obj;
++>>>>>>> ce2063e3872b (RDMA/rxe: Replace missing rxe_pool_get_index_locked)
  	int cmp;
 +	unsigned long flags;
 +
 +	read_lock_irqsave(&pool->pool_lock, flags);
 +
 +	if (pool->state != RXE_POOL_STATE_VALID)
 +		goto out;
  
  	node = pool->key.tree.rb_node;
  
@@@ -513,10 -464,24 +547,23 @@@
  			break;
  	}
  
 -	if (node) {
 +	if (node)
  		kref_get(&elem->ref_cnt);
 -		obj = (u8 *)elem - info->elem_offset;
 -	} else {
 -		obj = NULL;
 -	}
  
++<<<<<<< HEAD
 +out:
++=======
+ 	return obj;
+ }
+ 
+ void *rxe_pool_get_key(struct rxe_pool *pool, void *key)
+ {
+ 	u8 *obj;
+ 	unsigned long flags;
+ 
+ 	read_lock_irqsave(&pool->pool_lock, flags);
+ 	obj = rxe_pool_get_key_locked(pool, key);
++>>>>>>> ce2063e3872b (RDMA/rxe: Replace missing rxe_pool_get_index_locked)
  	read_unlock_irqrestore(&pool->pool_lock, flags);
 -
 -	return obj;
 +	return node ? elem : NULL;
  }
* Unmerged path drivers/infiniband/sw/rxe/rxe_pool.c
