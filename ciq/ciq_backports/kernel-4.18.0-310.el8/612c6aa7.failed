block: change the hash used for looking up block devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 612c6aa7817f1c89b6a92fc724331aa7c9d77f6e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/612c6aa7.failed

Adding the minor to the major creates tons of pointless conflicts. Just
use the dev_t itself, which is 32-bits and thus is guaranteed to fit
into ino_t.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Acked-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 612c6aa7817f1c89b6a92fc724331aa7c9d77f6e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
diff --cc fs/block_dev.c
index f19cc879b480,d707ab376da8..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -872,30 -863,7 +872,34 @@@ void __init bdev_cache_init(void
  	blockdev_superblock = bd_mnt->mnt_sb;   /* For writeback */
  }
  
++<<<<<<< HEAD
 +/*
 + * Most likely _very_ bad one - but then it's hardly critical for small
 + * /dev and can be fixed when somebody will need really large one.
 + * Keep in mind that it will be fed through icache hash function too.
 + */
 +static inline unsigned long hash(dev_t dev)
 +{
 +	return MAJOR(dev)+MINOR(dev);
 +}
 +
 +static int bdev_test(struct inode *inode, void *data)
 +{
 +	return BDEV_I(inode)->bdev.bd_dev == *(dev_t *)data;
 +}
 +
 +static int bdev_set(struct inode *inode, void *data)
 +{
 +	BDEV_I(inode)->bdev.bd_dev = *(dev_t *)data;
 +	return 0;
 +}
 +
 +static LIST_HEAD(all_bdevs);
 +
 +struct block_device *bdget(dev_t dev)
++=======
+ static struct block_device *bdget(dev_t dev)
++>>>>>>> 612c6aa7817f (block: change the hash used for looking up block devices)
  {
  	struct block_device *bdev;
  	struct inode *inode;
@@@ -912,9 -878,9 +914,13 @@@
  		bdev->bd_contains = NULL;
  		bdev->bd_super = NULL;
  		bdev->bd_inode = inode;
 +		bdev->bd_block_size = i_blocksize(inode);
  		bdev->bd_part_count = 0;
++<<<<<<< HEAD
 +		bdev->bd_invalidated = 0;
++=======
+ 		bdev->bd_dev = dev;
++>>>>>>> 612c6aa7817f (block: change the hash used for looking up block devices)
  		inode->i_mode = S_IFBLK;
  		inode->i_rdev = dev;
  		inode->i_bdev = bdev;
* Unmerged path fs/block_dev.c
