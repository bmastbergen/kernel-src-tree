docs: kvm: add documentation for KVM_CAP_S390_DIAG318

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Collin Walling <walling@linux.ibm.com>
commit f20d4e924b4465822c4a35290b85aadf88ddf466
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/f20d4e92.failed

Documentation for the s390 DIAGNOSE 0x318 instruction handling.

	Signed-off-by: Collin Walling <walling@linux.ibm.com>
	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
Link: https://lore.kernel.org/kvm/20200625150724.10021-2-walling@linux.ibm.com/
Message-Id: <20200625150724.10021-2-walling@linux.ibm.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit f20d4e924b4465822c4a35290b85aadf88ddf466)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/virt/kvm/api.rst
diff --cc Documentation/virt/kvm/api.rst
index 3ace9a7b536b,51191b56e61c..000000000000
--- a/Documentation/virt/kvm/api.rst
+++ b/Documentation/virt/kvm/api.rst
@@@ -6343,38 -6174,22 +6343,60 @@@ is supported, than the other should as 
  see Documentation/virt/kvm/devices/vcpu.rst "KVM_ARM_VCPU_PVTIME_CTRL".
  For x86 see Documentation/virt/kvm/msr.rst "MSR_KVM_STEAL_TIME".
  
++<<<<<<< HEAD
 +8.26 KVM_CAP_X86_USER_SPACE_MSR
 +-------------------------------
 +
 +:Architectures: x86
 +
 +This capability indicates that KVM supports deflection of MSR reads and
 +writes to user space. It can be enabled on a VM level. If enabled, MSR
 +accesses that would usually trigger a #GP by KVM into the guest will
 +instead get bounced to user space through the KVM_EXIT_X86_RDMSR and
 +KVM_EXIT_X86_WRMSR exit notifications.
 +
 +8.25 KVM_X86_SET_MSR_FILTER
 +---------------------------
 +
 +:Architectures: x86
 +
 +This capability indicates that KVM supports that accesses to user defined MSRs
 +may be rejected. With this capability exposed, KVM exports new VM ioctl
 +KVM_X86_SET_MSR_FILTER which user space can call to specify bitmaps of MSR
 +ranges that KVM should reject access to.
 +
 +In combination with KVM_CAP_X86_USER_SPACE_MSR, this allows user space to
 +trap and emulate MSRs that are outside of the scope of KVM as well as
 +limit the attack surface on KVM's MSR emulation code.
 +
 +
 +8.26 KVM_CAP_ENFORCE_PV_CPUID
 +-----------------------------
 +
 +Architectures: x86
 +
 +When enabled, KVM will disable paravirtual features provided to the
 +guest according to the bits in the KVM_CPUID_FEATURES CPUID leaf
 +(0x40000001). Otherwise, a guest may use the paravirtual features
 +regardless of what has actually been exposed through the CPUID leaf.
++=======
+ 8.25 KVM_CAP_S390_DIAG318
+ -------------------------
+ 
+ :Architectures: s390
+ 
+ This capability enables a guest to set information about its control program
+ (i.e. guest kernel type and version). The information is helpful during
+ system/firmware service events, providing additional data about the guest
+ environments running on the machine.
+ 
+ The information is associated with the DIAGNOSE 0x318 instruction, which sets
+ an 8-byte value consisting of a one-byte Control Program Name Code (CPNC) and
+ a 7-byte Control Program Version Code (CPVC). The CPNC determines what
+ environment the control program is running in (e.g. Linux, z/VM...), and the
+ CPVC is used for information specific to OS (e.g. Linux version, Linux
+ distribution...)
+ 
+ If this capability is available, then the CPNC and CPVC can be synchronized
+ between KVM and userspace via the sync regs mechanism (KVM_SYNC_DIAG318).
++>>>>>>> f20d4e924b44 (docs: kvm: add documentation for KVM_CAP_S390_DIAG318)
* Unmerged path Documentation/virt/kvm/api.rst
