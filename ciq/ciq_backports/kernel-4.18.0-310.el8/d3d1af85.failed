KVM: SVM: Add KVM_SEND_UPDATE_DATA command

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Brijesh Singh <brijesh.singh@amd.com>
commit d3d1af85e2c75bb57da51535a6e182c7c45eceb0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/d3d1af85.failed

The command is used for encrypting the guest memory region using the encryption
context created with KVM_SEV_SEND_START.

	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Joerg Roedel <joro@8bytes.org>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Tom Lendacky <thomas.lendacky@amd.com>
	Cc: x86@kernel.org
	Cc: kvm@vger.kernel.org
	Cc: linux-kernel@vger.kernel.org
	Reviewed-by : Steve Rutherford <srutherford@google.com>
	Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
Message-Id: <d6a6ea740b0c668b30905ae31eac5ad7da048bb3.1618498113.git.ashish.kalra@amd.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit d3d1af85e2c75bb57da51535a6e182c7c45eceb0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/sev.c
diff --cc arch/x86/kvm/svm/sev.c
index fbe9a30eb1a6,a534ec9ae172..000000000000
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@@ -1435,16 -1659,31 +1559,21 @@@ void sev_vm_destroy(struct kvm *kvm
  	sev_asid_free(sev->asid);
  }
  
 -void __init sev_hardware_setup(void)
 +int __init sev_hardware_setup(void)
  {
 -	unsigned int eax, ebx, ecx, edx;
 -	bool sev_es_supported = false;
 -	bool sev_supported = false;
 -
 -	/* Does the CPU support SEV? */
 -	if (!boot_cpu_has(X86_FEATURE_SEV))
 -		goto out;
 -
 -	/* Retrieve SEV CPUID information */
 -	cpuid(0x8000001f, &eax, &ebx, &ecx, &edx);
 -
 -	/* Set encryption bit location for SEV-ES guests */
 -	sev_enc_bit = ebx & 0x3f;
 -
  	/* Maximum number of encrypted guests supported simultaneously */
 -	max_sev_asid = ecx;
 +	max_sev_asid = cpuid_ecx(0x8000001F);
  
  	if (!svm_sev_enabled())
 -		goto out;
 +		return 1;
  
  	/* Minimum ASID value that should be used for SEV guest */
++<<<<<<< HEAD
 +	min_sev_asid = cpuid_edx(0x8000001F);
++=======
+ 	min_sev_asid = edx;
+ 	sev_me_mask = 1UL << (ebx & 0x3f);
++>>>>>>> d3d1af85e2c7 (KVM: SVM: Add KVM_SEND_UPDATE_DATA command)
  
  	/* Initialize SEV ASID bitmaps */
  	sev_asid_bitmap = bitmap_zalloc(max_sev_asid, GFP_KERNEL);
diff --git a/Documentation/virt/kvm/amd-memory-encryption.rst b/Documentation/virt/kvm/amd-memory-encryption.rst
index 625ce89c7706..3b387f8ec017 100644
--- a/Documentation/virt/kvm/amd-memory-encryption.rst
+++ b/Documentation/virt/kvm/amd-memory-encryption.rst
@@ -314,6 +314,34 @@ Returns: 0 on success, -negative on error
                 __u32 session_len;
         };
 
+12. KVM_SEV_SEND_UPDATE_DATA
+----------------------------
+
+The KVM_SEV_SEND_UPDATE_DATA command can be used by the hypervisor to encrypt the
+outgoing guest memory region with the encryption context creating using
+KVM_SEV_SEND_START.
+
+If hdr_len or trans_len are zero on entry, the length of the packet header and
+transport region are written to hdr_len and trans_len respectively, and all
+other fields are not used.
+
+Parameters (in): struct kvm_sev_send_update_data
+
+Returns: 0 on success, -negative on error
+
+::
+
+        struct kvm_sev_launch_send_update_data {
+                __u64 hdr_uaddr;        /* userspace address containing the packet header */
+                __u32 hdr_len;
+
+                __u64 guest_uaddr;      /* the source memory region to be encrypted */
+                __u32 guest_len;
+
+                __u64 trans_uaddr;      /* the destination memory region  */
+                __u32 trans_len;
+        };
+
 References
 ==========
 
* Unmerged path arch/x86/kvm/svm/sev.c
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index 2c1b8b5e90f0..940757b1dc09 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -1656,6 +1656,15 @@ struct kvm_sev_send_start {
 	__u32 session_len;
 };
 
+struct kvm_sev_send_update_data {
+	__u64 hdr_uaddr;
+	__u32 hdr_len;
+	__u64 guest_uaddr;
+	__u32 guest_len;
+	__u64 trans_uaddr;
+	__u32 trans_len;
+};
+
 #define KVM_DEV_ASSIGN_ENABLE_IOMMU	(1 << 0)
 #define KVM_DEV_ASSIGN_PCI_2_3		(1 << 1)
 #define KVM_DEV_ASSIGN_MASK_INTX	(1 << 2)
