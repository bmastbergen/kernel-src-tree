Revert "block: simplify set_init_blocksize" to regain lost performance

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Maxim Mikityanskiy <maxtram95@gmail.com>
commit 8dc932d3e8afb65e12eba7495f046c83884c49bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/8dc932d3.failed

The cited commit introduced a serious regression with SATA write speed,
as found by bisecting. This patch reverts this commit, which restores
write speed back to the values observed before this commit.

The performance tests were done on a Helios4 NAS (2nd batch) with 4 HDDs
(WD8003FFBX) using dd (bs=1M count=2000). "Direct" is a test with a
single HDD, the rest are different RAID levels built over the first
partitions of 4 HDDs. Test results are in MB/s, R is read, W is write.

                | Direct | RAID0 | RAID10 f2 | RAID10 n2 | RAID6
----------------+--------+-------+-----------+-----------+--------
9011495c9466    | R:256  | R:313 | R:276     | R:313     | R:323
(before faulty) | W:254  | W:253 | W:195     | W:204     | W:117
----------------+--------+-------+-----------+-----------+--------
5ff9f19231a0    | R:257  | R:398 | R:312     | R:344     | R:391
(faulty commit) | W:154  | W:122 | W:67.7    | W:66.6    | W:67.2
----------------+--------+-------+-----------+-----------+--------
5.10.10         | R:256  | R:401 | R:312     | R:356     | R:375
unpatched       | W:149  | W:123 | W:64      | W:64.1    | W:61.5
----------------+--------+-------+-----------+-----------+--------
5.10.10         | R:255  | R:396 | R:312     | R:340     | R:393
patched         | W:247  | W:274 | W:220     | W:225     | W:121

Applying this patch doesn't hurt read performance, while improves the
write speed by 1.5x - 3.5x (more impact on RAID tests). The write speed
is restored back to the state before the faulty commit, and even a bit
higher in RAID tests (which aren't HDD-bound on this device) - that is
likely related to other optimizations done between the faulty commit and
5.10.10 which also improved the read speed.

	Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
Fixes: 5ff9f19231a0 ("block: simplify set_init_blocksize")
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Jens Axboe <axboe@kernel.dk>
	Acked-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 8dc932d3e8afb65e12eba7495f046c83884c49bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/block_dev.c
diff --cc fs/block_dev.c
index d19c1a4a405b,235b5042672e..000000000000
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@@ -104,11 -103,41 +104,22 @@@ void invalidate_bdev(struct block_devic
  }
  EXPORT_SYMBOL(invalidate_bdev);
  
 -/*
 - * Drop all buffers & page cache for given bdev range. This function bails
 - * with error if bdev has other exclusive owner (such as filesystem).
 - */
 -int truncate_bdev_range(struct block_device *bdev, fmode_t mode,
 -			loff_t lstart, loff_t lend)
 -{
 -	/*
 -	 * If we don't hold exclusive handle for the device, upgrade to it
 -	 * while we discard the buffer cache to avoid discarding buffers
 -	 * under live filesystem.
 -	 */
 -	if (!(mode & FMODE_EXCL)) {
 -		int err = bd_prepare_to_claim(bdev, truncate_bdev_range);
 -		if (err)
 -			return err;
 -	}
 -
 -	truncate_inode_pages_range(bdev->bd_inode->i_mapping, lstart, lend);
 -	if (!(mode & FMODE_EXCL))
 -		bd_abort_claiming(bdev, truncate_bdev_range);
 -	return 0;
 -}
 -EXPORT_SYMBOL(truncate_bdev_range);
 -
  static void set_init_blocksize(struct block_device *bdev)
  {
++<<<<<<< HEAD
 +	unsigned bsize = bdev_logical_block_size(bdev);
 +
 +	bdev->bd_block_size = bsize;
++=======
+ 	unsigned int bsize = bdev_logical_block_size(bdev);
+ 	loff_t size = i_size_read(bdev->bd_inode);
+ 
+ 	while (bsize < PAGE_SIZE) {
+ 		if (size & bsize)
+ 			break;
+ 		bsize <<= 1;
+ 	}
++>>>>>>> 8dc932d3e8af (Revert "block: simplify set_init_blocksize" to regain lost performance)
  	bdev->bd_inode->i_blkbits = blksize_bits(bsize);
  }
  
* Unmerged path fs/block_dev.c
