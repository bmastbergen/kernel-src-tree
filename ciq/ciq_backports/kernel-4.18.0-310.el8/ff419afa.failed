ethtool: trim policy tables

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jakub Kicinski <kuba@kernel.org>
commit ff419afa43109e05d42d75629f21d9fd87f635ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/ff419afa.failed

Since ethtool uses strict attribute validation there's no need
to initialize all attributes in policy tables. 0 is NLA_UNSPEC
which is going to be rejected. Remove the NLA_REJECTs.

Similarly attributes above maxattrs are rejected, so there's
no need to always size the policy tables to ETHTOOL_A_..._MAX.

v2: - new patch

	Suggested-by: Johannes Berg <johannes@sipsolutions.net>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ff419afa43109e05d42d75629f21d9fd87f635ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ethtool/cabletest.c
#	net/ethtool/channels.c
#	net/ethtool/coalesce.c
#	net/ethtool/debug.c
#	net/ethtool/eee.c
#	net/ethtool/features.c
#	net/ethtool/linkinfo.c
#	net/ethtool/linkmodes.c
#	net/ethtool/netlink.h
#	net/ethtool/pause.c
#	net/ethtool/privflags.c
#	net/ethtool/rings.c
#	net/ethtool/wol.c
diff --cc net/ethtool/cabletest.c
index eef9d9ffdd1e,6f3328be6592..000000000000
--- a/net/ethtool/cabletest.c
+++ b/net/ethtool/cabletest.c
@@@ -11,9 -11,7 +11,13 @@@
   */
  #define MAX_CABLE_LENGTH_CM (150 * 100)
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +cable_test_act_policy[ETHTOOL_A_CABLE_TEST_MAX + 1] = {
 +	[ETHTOOL_A_CABLE_TEST_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_cable_test_act_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_CABLE_TEST_HEADER]		= { .type = NLA_NESTED },
  };
  
@@@ -219,19 -217,17 +222,23 @@@ static const struct nla_policy cable_te
  	[ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR]	= { .type = NLA_U8 },
  };
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +cable_test_tdr_act_policy[ETHTOOL_A_CABLE_TEST_TDR_MAX + 1] = {
 +	[ETHTOOL_A_CABLE_TEST_TDR_UNSPEC]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_cable_test_tdr_act_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_CABLE_TEST_TDR_HEADER]	= { .type = NLA_NESTED },
  	[ETHTOOL_A_CABLE_TEST_TDR_CFG]		= { .type = NLA_NESTED },
  };
  
  /* CABLE_TEST_TDR_ACT */
 -static int ethnl_act_cable_test_tdr_cfg(const struct nlattr *nest,
 -					struct genl_info *info,
 -					struct phy_tdr_config *cfg)
 +int ethnl_act_cable_test_tdr_cfg(const struct nlattr *nest,
 +				 struct genl_info *info,
 +				 struct phy_tdr_config *cfg)
  {
- 	struct nlattr *tb[ETHTOOL_A_CABLE_TEST_TDR_CFG_MAX + 1];
+ 	struct nlattr *tb[ARRAY_SIZE(cable_test_tdr_act_cfg_policy)];
  	int ret;
  
  	cfg->first = 100;
diff --cc net/ethtool/channels.c
index f40728d119d2,2a0cea0ad648..000000000000
--- a/net/ethtool/channels.c
+++ b/net/ethtool/channels.c
@@@ -109,14 -99,8 +99,14 @@@ const struct ethnl_request_ops ethnl_ch
  
  /* CHANNELS_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +channels_set_policy[ETHTOOL_A_CHANNELS_MAX + 1] = {
 +	[ETHTOOL_A_CHANNELS_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_channels_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_CHANNELS_HEADER]		= { .type = NLA_NESTED },
- 	[ETHTOOL_A_CHANNELS_RX_MAX]		= { .type = NLA_REJECT },
- 	[ETHTOOL_A_CHANNELS_TX_MAX]		= { .type = NLA_REJECT },
- 	[ETHTOOL_A_CHANNELS_OTHER_MAX]		= { .type = NLA_REJECT },
- 	[ETHTOOL_A_CHANNELS_COMBINED_MAX]	= { .type = NLA_REJECT },
  	[ETHTOOL_A_CHANNELS_RX_COUNT]		= { .type = NLA_U32 },
  	[ETHTOOL_A_CHANNELS_TX_COUNT]		= { .type = NLA_U32 },
  	[ETHTOOL_A_CHANNELS_OTHER_COUNT]	= { .type = NLA_U32 },
diff --cc net/ethtool/coalesce.c
index 58a2eb375135,c46d4247403a..000000000000
--- a/net/ethtool/coalesce.c
+++ b/net/ethtool/coalesce.c
@@@ -213,9 -189,7 +189,13 @@@ const struct ethnl_request_ops ethnl_co
  
  /* COALESCE_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +coalesce_set_policy[ETHTOOL_A_COALESCE_MAX + 1] = {
 +	[ETHTOOL_A_COALESCE_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_coalesce_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_COALESCE_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_COALESCE_RX_USECS]		= { .type = NLA_U32 },
  	[ETHTOOL_A_COALESCE_RX_MAX_FRAMES]	= { .type = NLA_U32 },
diff --cc net/ethtool/debug.c
index 67623ae94d41,dbd3243ccae5..000000000000
--- a/net/ethtool/debug.c
+++ b/net/ethtool/debug.c
@@@ -78,9 -76,7 +76,13 @@@ const struct ethnl_request_ops ethnl_de
  
  /* DEBUG_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +debug_set_policy[ETHTOOL_A_DEBUG_MAX + 1] = {
 +	[ETHTOOL_A_DEBUG_UNSPEC]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_debug_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_DEBUG_HEADER]	= { .type = NLA_NESTED },
  	[ETHTOOL_A_DEBUG_MSGMASK]	= { .type = NLA_NESTED },
  };
diff --cc net/ethtool/eee.c
index 860e482533ba,d40a573d1eba..000000000000
--- a/net/ethtool/eee.c
+++ b/net/ethtool/eee.c
@@@ -128,13 -121,9 +121,15 @@@ const struct ethnl_request_ops ethnl_ee
  
  /* EEE_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +eee_set_policy[ETHTOOL_A_EEE_MAX + 1] = {
 +	[ETHTOOL_A_EEE_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_eee_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_EEE_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_EEE_MODES_OURS]	= { .type = NLA_NESTED },
- 	[ETHTOOL_A_EEE_MODES_PEER]	= { .type = NLA_REJECT },
- 	[ETHTOOL_A_EEE_ACTIVE]		= { .type = NLA_REJECT },
  	[ETHTOOL_A_EEE_ENABLED]		= { .type = NLA_U8 },
  	[ETHTOOL_A_EEE_TX_LPI_ENABLED]	= { .type = NLA_U8 },
  	[ETHTOOL_A_EEE_TX_LPI_TIMER]	= { .type = NLA_U32 },
diff --cc net/ethtool/features.c
index bc1b1c74b1f5,920386cf7d0a..000000000000
--- a/net/ethtool/features.c
+++ b/net/ethtool/features.c
@@@ -130,14 -124,9 +124,15 @@@ const struct ethnl_request_ops ethnl_fe
  
  /* FEATURES_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +features_set_policy[ETHTOOL_A_FEATURES_MAX + 1] = {
 +	[ETHTOOL_A_FEATURES_UNSPEC]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_features_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_FEATURES_HEADER]	= { .type = NLA_NESTED },
- 	[ETHTOOL_A_FEATURES_HW]		= { .type = NLA_REJECT },
  	[ETHTOOL_A_FEATURES_WANTED]	= { .type = NLA_NESTED },
- 	[ETHTOOL_A_FEATURES_ACTIVE]	= { .type = NLA_REJECT },
- 	[ETHTOOL_A_FEATURES_NOCHANGE]	= { .type = NLA_REJECT },
  };
  
  static void ethnl_features_to_bitmap(unsigned long *dest, netdev_features_t val)
diff --cc net/ethtool/linkinfo.c
index a60619282569,0c9161801bc7..000000000000
--- a/net/ethtool/linkinfo.c
+++ b/net/ethtool/linkinfo.c
@@@ -94,9 -86,7 +87,13 @@@ const struct ethnl_request_ops ethnl_li
  
  /* LINKINFO_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +linkinfo_set_policy[ETHTOOL_A_LINKINFO_MAX + 1] = {
 +	[ETHTOOL_A_LINKINFO_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_linkinfo_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_LINKINFO_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_LINKINFO_PORT]		= { .type = NLA_U8 },
  	[ETHTOOL_A_LINKINFO_PHYADDR]		= { .type = NLA_U8 },
diff --cc net/ethtool/linkmodes.c
index 46b18c74eaf5,dcef79b6a2d2..000000000000
--- a/net/ethtool/linkmodes.c
+++ b/net/ethtool/linkmodes.c
@@@ -271,11 -261,11 +262,15 @@@ static const struct link_mode_info link
  	__DEFINE_LINK_MODE_PARAMS(400000, LR4_ER4_FR4, Full),
  	__DEFINE_LINK_MODE_PARAMS(400000, DR4, Full),
  	__DEFINE_LINK_MODE_PARAMS(400000, CR4, Full),
 -	__DEFINE_LINK_MODE_PARAMS(100, FX, Half),
 -	__DEFINE_LINK_MODE_PARAMS(100, FX, Full),
  };
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +linkmodes_set_policy[ETHTOOL_A_LINKMODES_MAX + 1] = {
 +	[ETHTOOL_A_LINKMODES_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_linkmodes_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_LINKMODES_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_LINKMODES_AUTONEG]		= { .type = NLA_U8 },
  	[ETHTOOL_A_LINKMODES_OURS]		= { .type = NLA_NESTED },
diff --cc net/ethtool/netlink.h
index d150f5f5e92b,2cfbc016393c..000000000000
--- a/net/ethtool/netlink.h
+++ b/net/ethtool/netlink.h
@@@ -345,21 -345,34 +345,52 @@@ extern const struct ethnl_request_ops e
  extern const struct ethnl_request_ops ethnl_eee_request_ops;
  extern const struct ethnl_request_ops ethnl_tsinfo_request_ops;
  
++<<<<<<< HEAD
 +extern const struct nla_policy ethnl_strset_get_policy[ETHTOOL_A_STRSET_MAX + 1];
 +extern const struct nla_policy ethnl_linkinfo_get_policy[ETHTOOL_A_LINKINFO_MAX + 1];
 +extern const struct nla_policy ethnl_linkmodes_get_policy[ETHTOOL_A_LINKMODES_MAX + 1];
 +extern const struct nla_policy ethnl_linkstate_get_policy[ETHTOOL_A_LINKSTATE_MAX + 1];
 +extern const struct nla_policy ethnl_debug_get_policy[ETHTOOL_A_DEBUG_MAX + 1];
 +extern const struct nla_policy ethnl_wol_get_policy[ETHTOOL_A_WOL_MAX + 1];
 +extern const struct nla_policy ethnl_features_get_policy[ETHTOOL_A_FEATURES_MAX + 1];
 +extern const struct nla_policy ethnl_privflags_get_policy[ETHTOOL_A_PRIVFLAGS_MAX + 1];
 +extern const struct nla_policy ethnl_rings_get_policy[ETHTOOL_A_RINGS_MAX + 1];
 +extern const struct nla_policy ethnl_channels_get_policy[ETHTOOL_A_CHANNELS_MAX + 1];
 +extern const struct nla_policy ethnl_coalesce_get_policy[ETHTOOL_A_COALESCE_MAX + 1];
 +extern const struct nla_policy ethnl_pause_get_policy[ETHTOOL_A_PAUSE_MAX + 1];
 +extern const struct nla_policy ethnl_eee_get_policy[ETHTOOL_A_EEE_MAX + 1];
 +extern const struct nla_policy ethnl_tsinfo_get_policy[ETHTOOL_A_TSINFO_MAX + 1];
 +extern const struct nla_policy ethnl_tunnel_info_get_policy[ETHTOOL_A_TUNNEL_INFO_MAX + 1];
++=======
+ extern const struct nla_policy ethnl_strset_get_policy[ETHTOOL_A_STRSET_STRINGSETS + 1];
+ extern const struct nla_policy ethnl_linkinfo_get_policy[ETHTOOL_A_LINKINFO_HEADER + 1];
+ extern const struct nla_policy ethnl_linkinfo_set_policy[ETHTOOL_A_LINKINFO_TP_MDIX_CTRL + 1];
+ extern const struct nla_policy ethnl_linkmodes_get_policy[ETHTOOL_A_LINKMODES_HEADER + 1];
+ extern const struct nla_policy ethnl_linkmodes_set_policy[ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG + 1];
+ extern const struct nla_policy ethnl_linkstate_get_policy[ETHTOOL_A_LINKSTATE_HEADER + 1];
+ extern const struct nla_policy ethnl_debug_get_policy[ETHTOOL_A_DEBUG_HEADER + 1];
+ extern const struct nla_policy ethnl_debug_set_policy[ETHTOOL_A_DEBUG_MSGMASK + 1];
+ extern const struct nla_policy ethnl_wol_get_policy[ETHTOOL_A_WOL_HEADER + 1];
+ extern const struct nla_policy ethnl_wol_set_policy[ETHTOOL_A_WOL_SOPASS + 1];
+ extern const struct nla_policy ethnl_features_get_policy[ETHTOOL_A_FEATURES_HEADER + 1];
+ extern const struct nla_policy ethnl_features_set_policy[ETHTOOL_A_FEATURES_WANTED + 1];
+ extern const struct nla_policy ethnl_privflags_get_policy[ETHTOOL_A_PRIVFLAGS_HEADER + 1];
+ extern const struct nla_policy ethnl_privflags_set_policy[ETHTOOL_A_PRIVFLAGS_FLAGS + 1];
+ extern const struct nla_policy ethnl_rings_get_policy[ETHTOOL_A_RINGS_HEADER + 1];
+ extern const struct nla_policy ethnl_rings_set_policy[ETHTOOL_A_RINGS_TX + 1];
+ extern const struct nla_policy ethnl_channels_get_policy[ETHTOOL_A_CHANNELS_HEADER + 1];
+ extern const struct nla_policy ethnl_channels_set_policy[ETHTOOL_A_CHANNELS_COMBINED_COUNT + 1];
+ extern const struct nla_policy ethnl_coalesce_get_policy[ETHTOOL_A_COALESCE_HEADER + 1];
+ extern const struct nla_policy ethnl_coalesce_set_policy[ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL + 1];
+ extern const struct nla_policy ethnl_pause_get_policy[ETHTOOL_A_PAUSE_HEADER + 1];
+ extern const struct nla_policy ethnl_pause_set_policy[ETHTOOL_A_PAUSE_TX + 1];
+ extern const struct nla_policy ethnl_eee_get_policy[ETHTOOL_A_EEE_HEADER + 1];
+ extern const struct nla_policy ethnl_eee_set_policy[ETHTOOL_A_EEE_TX_LPI_TIMER + 1];
+ extern const struct nla_policy ethnl_tsinfo_get_policy[ETHTOOL_A_TSINFO_HEADER + 1];
+ extern const struct nla_policy ethnl_cable_test_act_policy[ETHTOOL_A_CABLE_TEST_HEADER + 1];
+ extern const struct nla_policy ethnl_cable_test_tdr_act_policy[ETHTOOL_A_CABLE_TEST_TDR_CFG + 1];
+ extern const struct nla_policy ethnl_tunnel_info_get_policy[ETHTOOL_A_TUNNEL_INFO_HEADER + 1];
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  
  int ethnl_set_linkinfo(struct sk_buff *skb, struct genl_info *info);
  int ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info);
diff --cc net/ethtool/pause.c
index 8df854266d33,084798d629a8..000000000000
--- a/net/ethtool/pause.c
+++ b/net/ethtool/pause.c
@@@ -15,14 -16,16 +15,16 @@@ struct pause_reply_data 
  #define PAUSE_REPDATA(__reply_base) \
  	container_of(__reply_base, struct pause_reply_data, base)
  
- const struct nla_policy ethnl_pause_get_policy[ETHTOOL_A_PAUSE_MAX + 1] = {
- 	[ETHTOOL_A_PAUSE_UNSPEC]		= { .type = NLA_REJECT },
+ const struct nla_policy ethnl_pause_get_policy[] = {
  	[ETHTOOL_A_PAUSE_HEADER]		= { .type = NLA_NESTED },
++<<<<<<< HEAD
 +	[ETHTOOL_A_PAUSE_AUTONEG]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PAUSE_RX]			= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PAUSE_TX]			= { .type = NLA_REJECT },
++=======
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  };
  
 -static void ethtool_stats_init(u64 *stats, unsigned int n)
 -{
 -	while (n--)
 -		stats[n] = ETHTOOL_STAT_NOT_SET;
 -}
 -
  static int pause_prepare_data(const struct ethnl_req_info *req_base,
  			      struct ethnl_reply_data *reply_base,
  			      struct genl_info *info)
@@@ -79,9 -134,7 +81,13 @@@ const struct ethnl_request_ops ethnl_pa
  
  /* PAUSE_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +pause_set_policy[ETHTOOL_A_PAUSE_MAX + 1] = {
 +	[ETHTOOL_A_PAUSE_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_pause_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_PAUSE_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_PAUSE_AUTONEG]		= { .type = NLA_U8 },
  	[ETHTOOL_A_PAUSE_RX]			= { .type = NLA_U8 },
diff --cc net/ethtool/privflags.c
index 9dfdd9b3a19c,050d3d428a59..000000000000
--- a/net/ethtool/privflags.c
+++ b/net/ethtool/privflags.c
@@@ -135,9 -132,7 +132,13 @@@ const struct ethnl_request_ops ethnl_pr
  
  /* PRIVFLAGS_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +privflags_set_policy[ETHTOOL_A_PRIVFLAGS_MAX + 1] = {
 +	[ETHTOOL_A_PRIVFLAGS_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_privflags_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_PRIVFLAGS_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_PRIVFLAGS_FLAGS]		= { .type = NLA_NESTED },
  };
diff --cc net/ethtool/rings.c
index 006b70f54dd7,da5d9041b2b1..000000000000
--- a/net/ethtool/rings.c
+++ b/net/ethtool/rings.c
@@@ -106,14 -97,8 +97,14 @@@ const struct ethnl_request_ops ethnl_ri
  
  /* RINGS_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +rings_set_policy[ETHTOOL_A_RINGS_MAX + 1] = {
 +	[ETHTOOL_A_RINGS_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_rings_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_RINGS_HEADER]		= { .type = NLA_NESTED },
- 	[ETHTOOL_A_RINGS_RX_MAX]		= { .type = NLA_REJECT },
- 	[ETHTOOL_A_RINGS_RX_MINI_MAX]		= { .type = NLA_REJECT },
- 	[ETHTOOL_A_RINGS_RX_JUMBO_MAX]		= { .type = NLA_REJECT },
- 	[ETHTOOL_A_RINGS_TX_MAX]		= { .type = NLA_REJECT },
  	[ETHTOOL_A_RINGS_RX]			= { .type = NLA_U32 },
  	[ETHTOOL_A_RINGS_RX_MINI]		= { .type = NLA_U32 },
  	[ETHTOOL_A_RINGS_RX_JUMBO]		= { .type = NLA_U32 },
diff --cc net/ethtool/wol.c
index 5bc38e2f5f61,7671089c119d..000000000000
--- a/net/ethtool/wol.c
+++ b/net/ethtool/wol.c
@@@ -98,9 -95,7 +95,13 @@@ const struct ethnl_request_ops ethnl_wo
  
  /* WOL_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +wol_set_policy[ETHTOOL_A_WOL_MAX + 1] = {
 +	[ETHTOOL_A_WOL_UNSPEC]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_wol_set_policy[] = {
++>>>>>>> ff419afa4310 (ethtool: trim policy tables)
  	[ETHTOOL_A_WOL_HEADER]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_WOL_MODES]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_WOL_SOPASS]		= { .type = NLA_BINARY,
diff --git a/net/ethtool/bitset.c b/net/ethtool/bitset.c
index dae7402eaca3..1fb3603d92ad 100644
--- a/net/ethtool/bitset.c
+++ b/net/ethtool/bitset.c
@@ -302,8 +302,7 @@ int ethnl_put_bitset32(struct sk_buff *skb, int attrtype, const u32 *val,
 	return -EMSGSIZE;
 }
 
-static const struct nla_policy bitset_policy[ETHTOOL_A_BITSET_MAX + 1] = {
-	[ETHTOOL_A_BITSET_UNSPEC]	= { .type = NLA_REJECT },
+static const struct nla_policy bitset_policy[] = {
 	[ETHTOOL_A_BITSET_NOMASK]	= { .type = NLA_FLAG },
 	[ETHTOOL_A_BITSET_SIZE]		= NLA_POLICY_MAX(NLA_U32,
 							 ETHNL_MAX_BITSET_SIZE),
@@ -312,8 +311,7 @@ static const struct nla_policy bitset_policy[ETHTOOL_A_BITSET_MAX + 1] = {
 	[ETHTOOL_A_BITSET_MASK]		= { .type = NLA_BINARY },
 };
 
-static const struct nla_policy bit_policy[ETHTOOL_A_BITSET_BIT_MAX + 1] = {
-	[ETHTOOL_A_BITSET_BIT_UNSPEC]	= { .type = NLA_REJECT },
+static const struct nla_policy bit_policy[] = {
 	[ETHTOOL_A_BITSET_BIT_INDEX]	= { .type = NLA_U32 },
 	[ETHTOOL_A_BITSET_BIT_NAME]	= { .type = NLA_NUL_STRING },
 	[ETHTOOL_A_BITSET_BIT_VALUE]	= { .type = NLA_FLAG },
@@ -329,10 +327,10 @@ static const struct nla_policy bit_policy[ETHTOOL_A_BITSET_BIT_MAX + 1] = {
  */
 int ethnl_bitset_is_compact(const struct nlattr *bitset, bool *compact)
 {
-	struct nlattr *tb[ETHTOOL_A_BITSET_MAX + 1];
+	struct nlattr *tb[ARRAY_SIZE(bitset_policy)];
 	int ret;
 
-	ret = nla_parse_nested(tb, ETHTOOL_A_BITSET_MAX, bitset,
+	ret = nla_parse_nested(tb, ARRAY_SIZE(bitset_policy) - 1, bitset,
 			       bitset_policy, NULL);
 	if (ret < 0)
 		return ret;
@@ -381,10 +379,10 @@ static int ethnl_parse_bit(unsigned int *index, bool *val, unsigned int nbits,
 			   ethnl_string_array_t names,
 			   struct netlink_ext_ack *extack)
 {
-	struct nlattr *tb[ETHTOOL_A_BITSET_BIT_MAX + 1];
+	struct nlattr *tb[ARRAY_SIZE(bit_policy)];
 	int ret, idx;
 
-	ret = nla_parse_nested(tb, ETHTOOL_A_BITSET_BIT_MAX, bit_attr,
+	ret = nla_parse_nested(tb, ARRAY_SIZE(bit_policy) - 1, bit_attr,
 			       bit_policy, extack);
 	if (ret < 0)
 		return ret;
@@ -555,15 +553,15 @@ int ethnl_update_bitset32(u32 *bitmap, unsigned int nbits,
 			  const struct nlattr *attr, ethnl_string_array_t names,
 			  struct netlink_ext_ack *extack, bool *mod)
 {
-	struct nlattr *tb[ETHTOOL_A_BITSET_MAX + 1];
+	struct nlattr *tb[ARRAY_SIZE(bitset_policy)];
 	unsigned int change_bits;
 	bool no_mask;
 	int ret;
 
 	if (!attr)
 		return 0;
-	ret = nla_parse_nested(tb, ETHTOOL_A_BITSET_MAX, attr, bitset_policy,
-			       extack);
+	ret = nla_parse_nested(tb, ARRAY_SIZE(bitset_policy) - 1, attr,
+			       bitset_policy, extack);
 	if (ret < 0)
 		return ret;
 
@@ -608,7 +606,7 @@ int ethnl_parse_bitset(unsigned long *val, unsigned long *mask,
 		       ethnl_string_array_t names,
 		       struct netlink_ext_ack *extack)
 {
-	struct nlattr *tb[ETHTOOL_A_BITSET_MAX + 1];
+	struct nlattr *tb[ARRAY_SIZE(bitset_policy)];
 	const struct nlattr *bit_attr;
 	bool no_mask;
 	int rem;
@@ -616,8 +614,8 @@ int ethnl_parse_bitset(unsigned long *val, unsigned long *mask,
 
 	if (!attr)
 		return 0;
-	ret = nla_parse_nested(tb, ETHTOOL_A_BITSET_MAX, attr, bitset_policy,
-			       extack);
+	ret = nla_parse_nested(tb, ARRAY_SIZE(bitset_policy) - 1, attr,
+			       bitset_policy, extack);
 	if (ret < 0)
 		return ret;
 	no_mask = tb[ETHTOOL_A_BITSET_NOMASK];
* Unmerged path net/ethtool/cabletest.c
* Unmerged path net/ethtool/channels.c
* Unmerged path net/ethtool/coalesce.c
* Unmerged path net/ethtool/debug.c
* Unmerged path net/ethtool/eee.c
* Unmerged path net/ethtool/features.c
* Unmerged path net/ethtool/linkinfo.c
* Unmerged path net/ethtool/linkmodes.c
diff --git a/net/ethtool/linkstate.c b/net/ethtool/linkstate.c
index ebd6dcff1dad..fc36e73d8b7f 100644
--- a/net/ethtool/linkstate.c
+++ b/net/ethtool/linkstate.c
@@ -20,15 +20,8 @@ struct linkstate_reply_data {
 #define LINKSTATE_REPDATA(__reply_base) \
 	container_of(__reply_base, struct linkstate_reply_data, base)
 
-const struct nla_policy
-ethnl_linkstate_get_policy[ETHTOOL_A_LINKSTATE_MAX + 1] = {
-	[ETHTOOL_A_LINKSTATE_UNSPEC]		= { .type = NLA_REJECT },
+const struct nla_policy ethnl_linkstate_get_policy[] = {
 	[ETHTOOL_A_LINKSTATE_HEADER]		= { .type = NLA_NESTED },
-	[ETHTOOL_A_LINKSTATE_LINK]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_LINKSTATE_SQI]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_LINKSTATE_SQI_MAX]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_LINKSTATE_EXT_STATE]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_LINKSTATE_EXT_SUBSTATE]	= { .type = NLA_REJECT },
 };
 
 static int linkstate_get_sqi(struct net_device *dev)
diff --git a/net/ethtool/netlink.c b/net/ethtool/netlink.c
index 9efa14e1ec40..b42f69d8f1be 100644
--- a/net/ethtool/netlink.c
+++ b/net/ethtool/netlink.c
@@ -14,8 +14,7 @@ static struct genl_family ethtool_genl_family;
 static bool ethnl_ok __read_mostly;
 static u32 ethnl_bcast_seq;
 
-static const struct nla_policy ethnl_header_policy[ETHTOOL_A_HEADER_MAX + 1] = {
-	[ETHTOOL_A_HEADER_UNSPEC]	= { .type = NLA_REJECT },
+static const struct nla_policy ethnl_header_policy[] = {
 	[ETHTOOL_A_HEADER_DEV_INDEX]	= { .type = NLA_U32 },
 	[ETHTOOL_A_HEADER_DEV_NAME]	= { .type = NLA_NUL_STRING,
 					    .len = ALTIFNAMSIZ - 1 },
@@ -42,7 +41,7 @@ int ethnl_parse_header_dev_get(struct ethnl_req_info *req_info,
 			       const struct nlattr *header, struct net *net,
 			       struct netlink_ext_ack *extack, bool require_dev)
 {
-	struct nlattr *tb[ETHTOOL_A_HEADER_MAX + 1];
+	struct nlattr *tb[ARRAY_SIZE(ethnl_header_policy)];
 	const struct nlattr *devname_attr;
 	struct net_device *dev = NULL;
 	u32 flags = 0;
@@ -52,7 +51,7 @@ int ethnl_parse_header_dev_get(struct ethnl_req_info *req_info,
 		NL_SET_ERR_MSG(extack, "request header missing");
 		return -EINVAL;
 	}
-	ret = nla_parse_nested(tb, ETHTOOL_A_HEADER_MAX, header,
+	ret = nla_parse_nested(tb, ARRAY_SIZE(ethnl_header_policy) - 1, header,
 			       ethnl_header_policy, extack);
 	if (ret < 0)
 		return ret;
* Unmerged path net/ethtool/netlink.h
* Unmerged path net/ethtool/pause.c
* Unmerged path net/ethtool/privflags.c
* Unmerged path net/ethtool/rings.c
diff --git a/net/ethtool/strset.c b/net/ethtool/strset.c
index 57cdb9cff92f..c9333ce476a7 100644
--- a/net/ethtool/strset.c
+++ b/net/ethtool/strset.c
@@ -99,18 +99,13 @@ struct strset_reply_data {
 #define STRSET_REPDATA(__reply_base) \
 	container_of(__reply_base, struct strset_reply_data, base)
 
-const struct nla_policy ethnl_strset_get_policy[ETHTOOL_A_STRSET_MAX + 1] = {
-	[ETHTOOL_A_STRSET_UNSPEC]	= { .type = NLA_REJECT },
+const struct nla_policy ethnl_strset_get_policy[] = {
 	[ETHTOOL_A_STRSET_HEADER]	= { .type = NLA_NESTED },
 	[ETHTOOL_A_STRSET_STRINGSETS]	= { .type = NLA_NESTED },
 };
 
-static const struct nla_policy
-get_stringset_policy[ETHTOOL_A_STRINGSET_MAX + 1] = {
-	[ETHTOOL_A_STRINGSET_UNSPEC]	= { .type = NLA_REJECT },
+static const struct nla_policy get_stringset_policy[] = {
 	[ETHTOOL_A_STRINGSET_ID]	= { .type = NLA_U32 },
-	[ETHTOOL_A_STRINGSET_COUNT]	= { .type = NLA_REJECT },
-	[ETHTOOL_A_STRINGSET_STRINGS]	= { .type = NLA_REJECT },
 };
 
 /**
@@ -138,10 +133,10 @@ static bool strset_include(const struct strset_req_info *info,
 static int strset_get_id(const struct nlattr *nest, u32 *val,
 			 struct netlink_ext_ack *extack)
 {
-	struct nlattr *tb[ETHTOOL_A_STRINGSET_MAX + 1];
+	struct nlattr *tb[ARRAY_SIZE(get_stringset_policy)];
 	int ret;
 
-	ret = nla_parse_nested(tb, ETHTOOL_A_STRINGSET_MAX, nest,
+	ret = nla_parse_nested(tb, ARRAY_SIZE(get_stringset_policy) - 1, nest,
 			       get_stringset_policy, extack);
 	if (ret < 0)
 		return ret;
@@ -152,9 +147,7 @@ static int strset_get_id(const struct nlattr *nest, u32 *val,
 	return 0;
 }
 
-static const struct nla_policy
-strset_stringsets_policy[ETHTOOL_A_STRINGSETS_MAX + 1] = {
-	[ETHTOOL_A_STRINGSETS_UNSPEC]		= { .type = NLA_REJECT },
+static const struct nla_policy strset_stringsets_policy[] = {
 	[ETHTOOL_A_STRINGSETS_STRINGSET]	= { .type = NLA_NESTED },
 };
 
@@ -169,7 +162,8 @@ static int strset_parse_request(struct ethnl_req_info *req_base,
 
 	if (!nest)
 		return 0;
-	ret = nla_validate_nested(nest, ETHTOOL_A_STRINGSETS_MAX,
+	ret = nla_validate_nested(nest,
+				  ARRAY_SIZE(strset_stringsets_policy) - 1,
 				  strset_stringsets_policy, extack);
 	if (ret < 0)
 		return ret;
diff --git a/net/ethtool/tsinfo.c b/net/ethtool/tsinfo.c
index 21f0dc08cead..6f050b81b77c 100644
--- a/net/ethtool/tsinfo.c
+++ b/net/ethtool/tsinfo.c
@@ -18,13 +18,8 @@ struct tsinfo_reply_data {
 #define TSINFO_REPDATA(__reply_base) \
 	container_of(__reply_base, struct tsinfo_reply_data, base)
 
-const struct nla_policy ethnl_tsinfo_get_policy[ETHTOOL_A_TSINFO_MAX + 1] = {
-	[ETHTOOL_A_TSINFO_UNSPEC]		= { .type = NLA_REJECT },
+const struct nla_policy ethnl_tsinfo_get_policy[] = {
 	[ETHTOOL_A_TSINFO_HEADER]		= { .type = NLA_NESTED },
-	[ETHTOOL_A_TSINFO_TIMESTAMPING]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_TSINFO_TX_TYPES]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_TSINFO_RX_FILTERS]		= { .type = NLA_REJECT },
-	[ETHTOOL_A_TSINFO_PHC_INDEX]		= { .type = NLA_REJECT },
 };
 
 static int tsinfo_prepare_data(const struct ethnl_req_info *req_base,
diff --git a/net/ethtool/tunnels.c b/net/ethtool/tunnels.c
index 330817adcf62..48a52951917e 100644
--- a/net/ethtool/tunnels.c
+++ b/net/ethtool/tunnels.c
@@ -8,9 +8,7 @@
 #include "common.h"
 #include "netlink.h"
 
-const struct nla_policy
-ethnl_tunnel_info_get_policy[ETHTOOL_A_TUNNEL_INFO_MAX + 1] = {
-	[ETHTOOL_A_TUNNEL_INFO_UNSPEC]		= { .type = NLA_REJECT },
+const struct nla_policy ethnl_tunnel_info_get_policy[] = {
 	[ETHTOOL_A_TUNNEL_INFO_HEADER]		= { .type = NLA_NESTED },
 };
 
* Unmerged path net/ethtool/wol.c
