nvme: fix initialization of the zone bitmaps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 7fad20dd7c0ab1d2c224755a574576be25f13e03
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/7fad20dd.failed

The removal of the ->revalidate_disk method broke the initialization of
the zone bitmaps, as nvme_revalidate_disk now never gets called during
initialization.

Move the zone related code from nvme_revalidate_disk into a new helper in
zns.c, and call it from nvme_alloc_ns in addition to nvme_validate_ns to
ensure the zone bitmaps are initialized during probe.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
(cherry picked from commit 7fad20dd7c0ab1d2c224755a574576be25f13e03)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/nvme.h
#	drivers/nvme/host/zns.c
diff --cc drivers/nvme/host/core.c
index 1cc409f7b4e8,400d995f95fe..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -4030,14 -4024,21 +4032,27 @@@ static void nvme_ns_remove_by_nsid(stru
  static void nvme_validate_ns(struct nvme_ctrl *ctrl, unsigned nsid)
  {
  	struct nvme_ns *ns;
 -	int ret;
  
  	ns = nvme_find_get_ns(ctrl, nsid);
 -	if (!ns) {
 +	if (ns) {
 +		if (revalidate_disk(ns->disk))
 +			nvme_ns_remove(ns);
 +		nvme_put_ns(ns);
 +	} else
  		nvme_alloc_ns(ctrl, nsid);
++<<<<<<< HEAD
++=======
+ 		return;
+ 	}
+ 
+ 	ret = _nvme_revalidate_disk(ns->disk);
+ 	if (!ret && blk_queue_is_zoned(ns->queue))
+ 		ret = nvme_revalidate_zones(ns);
+ 	revalidate_disk_size(ns->disk, ret == 0);
+ 	if (ret)
+ 		nvme_ns_remove(ns);
+ 	nvme_put_ns(ns);
++>>>>>>> 7fad20dd7c0a (nvme: fix initialization of the zone bitmaps)
  }
  
  static void nvme_remove_invalid_namespaces(struct nvme_ctrl *ctrl,
diff --cc drivers/nvme/host/nvme.h
index efa4f4700780,6cbbd1597ae6..000000000000
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@@ -751,11 -756,39 +751,45 @@@ static inline void nvme_mpath_wait_free
  static inline void nvme_mpath_start_freeze(struct nvme_subsystem *subsys)
  {
  }
 +static inline void nvme_mpath_update_disk_size(struct gendisk *disk)
 +{
 +}
  #endif /* CONFIG_NVME_MULTIPATH */
  
++<<<<<<< HEAD
++=======
+ int nvme_revalidate_zones(struct nvme_ns *ns);
+ #ifdef CONFIG_BLK_DEV_ZONED
+ int nvme_update_zone_info(struct gendisk *disk, struct nvme_ns *ns,
+ 			  unsigned lbaf);
+ 
+ int nvme_report_zones(struct gendisk *disk, sector_t sector,
+ 		      unsigned int nr_zones, report_zones_cb cb, void *data);
+ 
+ blk_status_t nvme_setup_zone_mgmt_send(struct nvme_ns *ns, struct request *req,
+ 				       struct nvme_command *cmnd,
+ 				       enum nvme_zone_mgmt_action action);
+ #else
+ #define nvme_report_zones NULL
+ 
+ static inline blk_status_t nvme_setup_zone_mgmt_send(struct nvme_ns *ns,
+ 		struct request *req, struct nvme_command *cmnd,
+ 		enum nvme_zone_mgmt_action action)
+ {
+ 	return BLK_STS_NOTSUPP;
+ }
+ 
+ static inline int nvme_update_zone_info(struct gendisk *disk,
+ 					struct nvme_ns *ns,
+ 					unsigned lbaf)
+ {
+ 	dev_warn(ns->ctrl->device,
+ 		 "Please enable CONFIG_BLK_DEV_ZONED to support ZNS devices\n");
+ 	return -EPROTONOSUPPORT;
+ }
+ #endif
+ 
++>>>>>>> 7fad20dd7c0a (nvme: fix initialization of the zone bitmaps)
  #ifdef CONFIG_NVM
  int nvme_nvm_register(struct nvme_ns *ns, char *disk_name, int node);
  void nvme_nvm_unregister(struct nvme_ns *ns);
* Unmerged path drivers/nvme/host/zns.c
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/nvme.h
* Unmerged path drivers/nvme/host/zns.c
