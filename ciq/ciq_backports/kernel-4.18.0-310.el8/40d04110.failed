x86, kcsan: Enable KCSAN for x86

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Marco Elver <elver@google.com>
commit 40d04110f87940b6a03bf0aa19cd29e84f465f20
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/40d04110.failed

This patch enables KCSAN for x86, with updates to build rules to not use
KCSAN for several incompatible compilation units.

	Signed-off-by: Marco Elver <elver@google.com>
	Acked-by: Paul E. McKenney <paulmck@kernel.org>
	Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
(cherry picked from commit 40d04110f87940b6a03bf0aa19cd29e84f465f20)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/purgatory/Makefile
diff --cc arch/x86/Kconfig
index 22ffe71d1139,81859be4a005..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -221,7 -225,8 +221,12 @@@ config X8
  	select USER_STACKTRACE_SUPPORT
  	select VIRT_TO_BUS
  	select X86_FEATURE_NAMES		if PROC_FS
++<<<<<<< HEAD
 +	imply IMA_SECURE_AND_OR_TRUSTED_BOOT    if EFI
++=======
+ 	select PROC_PID_ARCH_STATUS		if PROC_FS
+ 	select HAVE_ARCH_KCSAN if X86_64
++>>>>>>> 40d04110f879 (x86, kcsan: Enable KCSAN for x86)
  
  config INSTRUCTION_DECODER
  	def_bool y
diff --cc arch/x86/purgatory/Makefile
index a95a519b6330,69379bce9574..000000000000
--- a/arch/x86/purgatory/Makefile
+++ b/arch/x86/purgatory/Makefile
@@@ -14,28 -14,48 +14,34 @@@ $(obj)/sha256.o: $(srctree)/lib/crypto/
  
  CFLAGS_sha256.o := -D__DISABLE_EXPORTS
  
 -LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib -z nodefaultlib
 -targets += purgatory.ro
 -
 +# When linking purgatory.ro with -r unresolved symbols are not checked,
 +# also link a purgatory.chk binary without -r to check for unresolved symbols.
 +PURGATORY_LDFLAGS := -e purgatory_start -nostdlib -z nodefaultlib
 +LDFLAGS_purgatory.ro := -r $(PURGATORY_LDFLAGS)
 +LDFLAGS_purgatory.chk := $(PURGATORY_LDFLAGS)
 +targets += purgatory.ro purgatory.chk
 +
++<<<<<<< HEAD
 +# Sanitizer, etc. runtimes are unavailable and cannot be linked here.
 +GCOV_PROFILE   := n
 +KASAN_SANITIZE	:= n
 +UBSAN_SANITIZE := n
++=======
+ # Sanitizer runtimes are unavailable and cannot be linked here.
+ KASAN_SANITIZE	:= n
+ KCSAN_SANITIZE	:= n
++>>>>>>> 40d04110f879 (x86, kcsan: Enable KCSAN for x86)
  KCOV_INSTRUMENT := n
  
 -# These are adjustments to the compiler flags used for objects that
 -# make up the standalone purgatory.ro
 -
 -PURGATORY_CFLAGS_REMOVE := -mcmodel=kernel
 -PURGATORY_CFLAGS := -mcmodel=large -ffreestanding -fno-zero-initialized-in-bss
 -PURGATORY_CFLAGS += $(DISABLE_STACKLEAK_PLUGIN)
 -
  # Default KBUILD_CFLAGS can have -pg option set when FTRACE is enabled. That
  # in turn leaves some undefined symbols like __fentry__ in purgatory and not
 -# sure how to relocate those.
 -ifdef CONFIG_FUNCTION_TRACER
 -PURGATORY_CFLAGS_REMOVE		+= $(CC_FLAGS_FTRACE)
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR_STRONG
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector-strong
 -endif
 +# sure how to relocate those. Like kexec-tools, use custom flags.
  
 -ifdef CONFIG_RETPOLINE
 -PURGATORY_CFLAGS_REMOVE		+= $(RETPOLINE_CFLAGS)
 -endif
 -
 -CFLAGS_REMOVE_purgatory.o	+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_purgatory.o		+= $(PURGATORY_CFLAGS)
 -
 -CFLAGS_REMOVE_sha256.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_sha256.o			+= $(PURGATORY_CFLAGS)
 -
 -CFLAGS_REMOVE_string.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_string.o			+= $(PURGATORY_CFLAGS)
 +KBUILD_CFLAGS := -fno-strict-aliasing -Wall -Wstrict-prototypes -fno-zero-initialized-in-bss -fno-builtin -ffreestanding -c -Os -mcmodel=large
 +KBUILD_CFLAGS += -m$(BITS)
 +KBUILD_CFLAGS += $(call cc-option,-fno-PIE)
 +KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING
 +KBUILD_CFLAGS += $(call cc-option,-fno-stack-protector)
  
  $(obj)/purgatory.ro: $(PURGATORY_OBJS) FORCE
  		$(call if_changed,ld)
* Unmerged path arch/x86/Kconfig
diff --git a/arch/x86/boot/Makefile b/arch/x86/boot/Makefile
index 9b5adae9cc40..e47ccf98cfb0 100644
--- a/arch/x86/boot/Makefile
+++ b/arch/x86/boot/Makefile
@@ -9,7 +9,9 @@
 # Changed by many, many contributors over the years.
 #
 
+# Sanitizer runtimes are unavailable and cannot be linked for early boot code.
 KASAN_SANITIZE			:= n
+KCSAN_SANITIZE			:= n
 OBJECT_FILES_NON_STANDARD	:= y
 
 # Kernel does not boot with kcov instrumentation here.
diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile
index 08c4830d715d..6a5dcd214507 100644
--- a/arch/x86/boot/compressed/Makefile
+++ b/arch/x86/boot/compressed/Makefile
@@ -17,7 +17,9 @@
 #	(see scripts/Makefile.lib size_append)
 #	compressed vmlinux.bin.all + u32 size of vmlinux.bin.all
 
+# Sanitizer runtimes are unavailable and cannot be linked for early boot code.
 KASAN_SANITIZE			:= n
+KCSAN_SANITIZE			:= n
 OBJECT_FILES_NON_STANDARD	:= y
 
 # Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.
diff --git a/arch/x86/entry/vdso/Makefile b/arch/x86/entry/vdso/Makefile
index 67df6cb0fdef..e86e36e6f659 100644
--- a/arch/x86/entry/vdso/Makefile
+++ b/arch/x86/entry/vdso/Makefile
@@ -10,8 +10,11 @@ ARCH_REL_TYPE_ABS += R_386_GLOB_DAT|R_386_JMP_SLOT|R_386_RELATIVE
 include $(srctree)/lib/vdso/Makefile
 
 KBUILD_CFLAGS += $(DISABLE_LTO)
+
+# Sanitizer runtimes are unavailable and cannot be linked here.
 KASAN_SANITIZE			:= n
 UBSAN_SANITIZE			:= n
+KCSAN_SANITIZE			:= n
 OBJECT_FILES_NON_STANDARD	:= y
 
 # Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.
diff --git a/arch/x86/include/asm/bitops.h b/arch/x86/include/asm/bitops.h
index 124f9195eb3e..50db25803634 100644
--- a/arch/x86/include/asm/bitops.h
+++ b/arch/x86/include/asm/bitops.h
@@ -319,8 +319,12 @@ static __always_inline bool test_and_change_bit(long nr, volatile unsigned long
 	return GEN_BINARY_RMWcc(LOCK_PREFIX __ASM_SIZE(btc), *addr, c, "Ir", nr);
 }
 
-static __always_inline bool constant_test_bit(long nr, const volatile unsigned long *addr)
+static __no_kcsan_or_inline bool constant_test_bit(long nr, const volatile unsigned long *addr)
 {
+	/*
+	 * Because this is a plain access, we need to disable KCSAN here to
+	 * avoid double instrumentation via instrumented bitops.
+	 */
 	return ((1UL << (nr & (BITS_PER_LONG-1))) &
 		(addr[nr >> _BITOPS_LONG_SHIFT])) != 0;
 }
diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index 83f1291a6641..94646e3b13c4 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -30,6 +30,10 @@ KASAN_SANITIZE_stacktrace.o				:= n
 KASAN_SANITIZE_paravirt.o				:= n
 KASAN_SANITIZE_sev-es.o					:= n
 
+# With some compiler versions the generated code results in boot hangs, caused
+# by several compilation units. To be safe, disable all instrumentation.
+KCSAN_SANITIZE := n
+
 OBJECT_FILES_NON_STANDARD_relocate_kernel_$(BITS).o	:= y
 OBJECT_FILES_NON_STANDARD_test_nx.o			:= y
 OBJECT_FILES_NON_STANDARD_paravirt_patch_$(BITS).o	:= y
diff --git a/arch/x86/kernel/cpu/Makefile b/arch/x86/kernel/cpu/Makefile
index 87667899cfbd..cf642382ed51 100644
--- a/arch/x86/kernel/cpu/Makefile
+++ b/arch/x86/kernel/cpu/Makefile
@@ -13,6 +13,9 @@ endif
 KCOV_INSTRUMENT_common.o := n
 KCOV_INSTRUMENT_perf_event.o := n
 
+# As above, instrumenting secondary CPU boot code causes boot hangs.
+KCSAN_SANITIZE_common.o := n
+
 # Make sure load_percpu_segment has no stackprotector
 nostackp := $(call cc-option, -fno-stack-protector)
 CFLAGS_common.o		:= $(nostackp)
diff --git a/arch/x86/lib/Makefile b/arch/x86/lib/Makefile
index 970fdf1db7ab..96aea7cf5ed2 100644
--- a/arch/x86/lib/Makefile
+++ b/arch/x86/lib/Makefile
@@ -6,10 +6,14 @@
 # Produces uninteresting flaky coverage.
 KCOV_INSTRUMENT_delay.o	:= n
 
+# KCSAN uses udelay for introducing watchpoint delay; avoid recursion.
+KCSAN_SANITIZE_delay.o := n
+
 # Early boot use of cmdline; don't instrument it
 ifdef CONFIG_AMD_MEM_ENCRYPT
 KCOV_INSTRUMENT_cmdline.o := n
 KASAN_SANITIZE_cmdline.o  := n
+KCSAN_SANITIZE_cmdline.o  := n
 
 ifdef CONFIG_FUNCTION_TRACER
 CFLAGS_REMOVE_cmdline.o = -pg
diff --git a/arch/x86/mm/Makefile b/arch/x86/mm/Makefile
index 14623619df2e..065a333e0ba0 100644
--- a/arch/x86/mm/Makefile
+++ b/arch/x86/mm/Makefile
@@ -7,6 +7,10 @@ KCOV_INSTRUMENT_mem_encrypt_identity.o	:= n
 KASAN_SANITIZE_mem_encrypt.o		:= n
 KASAN_SANITIZE_mem_encrypt_identity.o	:= n
 
+# Disable KCSAN entirely, because otherwise we get warnings that some functions
+# reference __initdata sections.
+KCSAN_SANITIZE := n
+
 ifdef CONFIG_FUNCTION_TRACER
 CFLAGS_REMOVE_mem_encrypt.o		= -pg
 CFLAGS_REMOVE_mem_encrypt_identity.o	= -pg
* Unmerged path arch/x86/purgatory/Makefile
diff --git a/arch/x86/realmode/Makefile b/arch/x86/realmode/Makefile
index 682c895753d9..6b1f3a4eeb44 100644
--- a/arch/x86/realmode/Makefile
+++ b/arch/x86/realmode/Makefile
@@ -6,7 +6,10 @@
 # for more details.
 #
 #
+
+# Sanitizer runtimes are unavailable and cannot be linked here.
 KASAN_SANITIZE			:= n
+KCSAN_SANITIZE			:= n
 OBJECT_FILES_NON_STANDARD	:= y
 
 subdir- := rm
diff --git a/arch/x86/realmode/rm/Makefile b/arch/x86/realmode/rm/Makefile
index 4463fa72db94..25ad9cd4c46f 100644
--- a/arch/x86/realmode/rm/Makefile
+++ b/arch/x86/realmode/rm/Makefile
@@ -6,7 +6,10 @@
 # for more details.
 #
 #
+
+# Sanitizer runtimes are unavailable and cannot be linked here.
 KASAN_SANITIZE			:= n
+KCSAN_SANITIZE			:= n
 OBJECT_FILES_NON_STANDARD	:= y
 
 # Prevents link failures: __sanitizer_cov_trace_pc() is not linked in.
