ethtool: link up ethnl_header_policy as a nested policy

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jakub Kicinski <kuba@kernel.org>
commit 329d9c333ee4a904341d555b72cd6218f4104d53
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/329d9c33.failed

To get the most out of parsing by the core, and to allow dumping
full policies we need to specify which policy applies to nested
attrs. For headers it's ethnl_header_policy.

$ sed -i 's@\(ETHTOOL_A_.*HEADER\].*=\) { .type = NLA_NESTED },@\1\n\t\tNLA_POLICY_NESTED(ethnl_header_policy),@' net/ethtool/*

	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 329d9c333ee4a904341d555b72cd6218f4104d53)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ethtool/cabletest.c
#	net/ethtool/channels.c
#	net/ethtool/coalesce.c
#	net/ethtool/debug.c
#	net/ethtool/eee.c
#	net/ethtool/features.c
#	net/ethtool/linkinfo.c
#	net/ethtool/linkmodes.c
#	net/ethtool/linkstate.c
#	net/ethtool/netlink.c
#	net/ethtool/netlink.h
#	net/ethtool/pause.c
#	net/ethtool/privflags.c
#	net/ethtool/rings.c
#	net/ethtool/strset.c
#	net/ethtool/tsinfo.c
#	net/ethtool/tunnels.c
#	net/ethtool/wol.c
diff --cc net/ethtool/cabletest.c
index eef9d9ffdd1e,63560bbb7d1f..000000000000
--- a/net/ethtool/cabletest.c
+++ b/net/ethtool/cabletest.c
@@@ -11,10 -11,9 +11,16 @@@
   */
  #define MAX_CABLE_LENGTH_CM (150 * 100)
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +cable_test_act_policy[ETHTOOL_A_CABLE_TEST_MAX + 1] = {
 +	[ETHTOOL_A_CABLE_TEST_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CABLE_TEST_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_cable_test_act_policy[] = {
+ 	[ETHTOOL_A_CABLE_TEST_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int ethnl_cable_test_started(struct phy_device *phydev, u8 cmd)
@@@ -219,10 -218,9 +225,16 @@@ cable_test_tdr_act_cfg_policy[ETHTOOL_A
  	[ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR]	= { .type = NLA_U8 },
  };
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +cable_test_tdr_act_policy[ETHTOOL_A_CABLE_TEST_TDR_MAX + 1] = {
 +	[ETHTOOL_A_CABLE_TEST_TDR_UNSPEC]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CABLE_TEST_TDR_HEADER]	= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_cable_test_tdr_act_policy[] = {
+ 	[ETHTOOL_A_CABLE_TEST_TDR_HEADER]	=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_CABLE_TEST_TDR_CFG]		= { .type = NLA_NESTED },
  };
  
diff --cc net/ethtool/channels.c
index f40728d119d2,5635604cb9ba..000000000000
--- a/net/ethtool/channels.c
+++ b/net/ethtool/channels.c
@@@ -17,18 -17,9 +17,24 @@@ struct channels_reply_data 
  #define CHANNELS_REPDATA(__reply_base) \
  	container_of(__reply_base, struct channels_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_channels_get_policy[ETHTOOL_A_CHANNELS_MAX + 1] = {
 +	[ETHTOOL_A_CHANNELS_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_CHANNELS_RX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_TX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_OTHER_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_COMBINED_MAX]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_RX_COUNT]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_TX_COUNT]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_OTHER_COUNT]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_COMBINED_COUNT]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_channels_get_policy[] = {
+ 	[ETHTOOL_A_CHANNELS_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int channels_prepare_data(const struct ethnl_req_info *req_base,
@@@ -109,14 -100,9 +115,20 @@@ const struct ethnl_request_ops ethnl_ch
  
  /* CHANNELS_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +channels_set_policy[ETHTOOL_A_CHANNELS_MAX + 1] = {
 +	[ETHTOOL_A_CHANNELS_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_CHANNELS_RX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_TX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_OTHER_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_CHANNELS_COMBINED_MAX]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_channels_set_policy[] = {
+ 	[ETHTOOL_A_CHANNELS_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_CHANNELS_RX_COUNT]		= { .type = NLA_U32 },
  	[ETHTOOL_A_CHANNELS_TX_COUNT]		= { .type = NLA_U32 },
  	[ETHTOOL_A_CHANNELS_OTHER_COUNT]	= { .type = NLA_U32 },
diff --cc net/ethtool/coalesce.c
index 58a2eb375135,1d6bc132aa4d..000000000000
--- a/net/ethtool/coalesce.c
+++ b/net/ethtool/coalesce.c
@@@ -51,32 -51,9 +51,38 @@@ __CHECK_SUPPORTED_OFFSET(COALESCE_TX_US
  __CHECK_SUPPORTED_OFFSET(COALESCE_TX_MAX_FRAMES_HIGH);
  __CHECK_SUPPORTED_OFFSET(COALESCE_RATE_SAMPLE_INTERVAL);
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_coalesce_get_policy[ETHTOOL_A_COALESCE_MAX + 1] = {
 +	[ETHTOOL_A_COALESCE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_COALESCE_RX_USECS]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_MAX_FRAMES]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_USECS_IRQ]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_USECS]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_MAX_FRAMES]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_USECS_IRQ]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_STATS_BLOCK_USECS]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_PKT_RATE_LOW]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_USECS_LOW]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_USECS_LOW]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_PKT_RATE_HIGH]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_USECS_HIGH]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_USECS_HIGH]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL] = { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_coalesce_get_policy[] = {
+ 	[ETHTOOL_A_COALESCE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int coalesce_prepare_data(const struct ethnl_req_info *req_base,
@@@ -213,10 -190,9 +219,16 @@@ const struct ethnl_request_ops ethnl_co
  
  /* COALESCE_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +coalesce_set_policy[ETHTOOL_A_COALESCE_MAX + 1] = {
 +	[ETHTOOL_A_COALESCE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_COALESCE_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_coalesce_set_policy[] = {
+ 	[ETHTOOL_A_COALESCE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_COALESCE_RX_USECS]		= { .type = NLA_U32 },
  	[ETHTOOL_A_COALESCE_RX_MAX_FRAMES]	= { .type = NLA_U32 },
  	[ETHTOOL_A_COALESCE_RX_USECS_IRQ]	= { .type = NLA_U32 },
diff --cc net/ethtool/debug.c
index 67623ae94d41,f99912d7957e..000000000000
--- a/net/ethtool/debug.c
+++ b/net/ethtool/debug.c
@@@ -16,10 -16,9 +16,16 @@@ struct debug_reply_data 
  #define DEBUG_REPDATA(__reply_base) \
  	container_of(__reply_base, struct debug_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_debug_get_policy[ETHTOOL_A_DEBUG_MAX + 1] = {
 +	[ETHTOOL_A_DEBUG_UNSPEC]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_DEBUG_HEADER]	= { .type = NLA_NESTED },
 +	[ETHTOOL_A_DEBUG_MSGMASK]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_debug_get_policy[] = {
+ 	[ETHTOOL_A_DEBUG_HEADER]	=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int debug_prepare_data(const struct ethnl_req_info *req_base,
@@@ -78,10 -77,9 +84,16 @@@ const struct ethnl_request_ops ethnl_de
  
  /* DEBUG_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +debug_set_policy[ETHTOOL_A_DEBUG_MAX + 1] = {
 +	[ETHTOOL_A_DEBUG_UNSPEC]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_DEBUG_HEADER]	= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_debug_set_policy[] = {
+ 	[ETHTOOL_A_DEBUG_HEADER]	=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_DEBUG_MSGMASK]	= { .type = NLA_NESTED },
  };
  
diff --cc net/ethtool/eee.c
index 860e482533ba,901b7de941ab..000000000000
--- a/net/ethtool/eee.c
+++ b/net/ethtool/eee.c
@@@ -19,15 -19,9 +19,21 @@@ struct eee_reply_data 
  #define EEE_REPDATA(__reply_base) \
  	container_of(__reply_base, struct eee_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_eee_get_policy[ETHTOOL_A_EEE_MAX + 1] = {
 +	[ETHTOOL_A_EEE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_EEE_MODES_OURS]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_MODES_PEER]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_ACTIVE]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_ENABLED]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_TX_LPI_ENABLED]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_TX_LPI_TIMER]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_eee_get_policy[] = {
+ 	[ETHTOOL_A_EEE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int eee_prepare_data(const struct ethnl_req_info *req_base,
@@@ -128,13 -122,10 +134,19 @@@ const struct ethnl_request_ops ethnl_ee
  
  /* EEE_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +eee_set_policy[ETHTOOL_A_EEE_MAX + 1] = {
 +	[ETHTOOL_A_EEE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_eee_set_policy[] = {
+ 	[ETHTOOL_A_EEE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_EEE_MODES_OURS]	= { .type = NLA_NESTED },
 +	[ETHTOOL_A_EEE_MODES_PEER]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_EEE_ACTIVE]		= { .type = NLA_REJECT },
  	[ETHTOOL_A_EEE_ENABLED]		= { .type = NLA_U8 },
  	[ETHTOOL_A_EEE_TX_LPI_ENABLED]	= { .type = NLA_U8 },
  	[ETHTOOL_A_EEE_TX_LPI_TIMER]	= { .type = NLA_U32 },
diff --cc net/ethtool/features.c
index bc1b1c74b1f5,8ee4cdbd6b82..000000000000
--- a/net/ethtool/features.c
+++ b/net/ethtool/features.c
@@@ -20,14 -20,9 +20,20 @@@ struct features_reply_data 
  #define FEATURES_REPDATA(__reply_base) \
  	container_of(__reply_base, struct features_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_features_get_policy[ETHTOOL_A_FEATURES_MAX + 1] = {
 +	[ETHTOOL_A_FEATURES_UNSPEC]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_FEATURES_HEADER]	= { .type = NLA_NESTED },
 +	[ETHTOOL_A_FEATURES_HW]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_FEATURES_WANTED]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_FEATURES_ACTIVE]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_FEATURES_NOCHANGE]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_features_get_policy[] = {
+ 	[ETHTOOL_A_FEATURES_HEADER]	=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static void ethnl_features_to_bitmap32(u32 *dest, netdev_features_t src)
@@@ -130,14 -125,10 +136,20 @@@ const struct ethnl_request_ops ethnl_fe
  
  /* FEATURES_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +features_set_policy[ETHTOOL_A_FEATURES_MAX + 1] = {
 +	[ETHTOOL_A_FEATURES_UNSPEC]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_FEATURES_HEADER]	= { .type = NLA_NESTED },
 +	[ETHTOOL_A_FEATURES_HW]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_features_set_policy[] = {
+ 	[ETHTOOL_A_FEATURES_HEADER]	=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_FEATURES_WANTED]	= { .type = NLA_NESTED },
 +	[ETHTOOL_A_FEATURES_ACTIVE]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_FEATURES_NOCHANGE]	= { .type = NLA_REJECT },
  };
  
  static void ethnl_features_to_bitmap(unsigned long *dest, netdev_features_t val)
diff --cc net/ethtool/linkinfo.c
index a60619282569,b91839870efc..000000000000
--- a/net/ethtool/linkinfo.c
+++ b/net/ethtool/linkinfo.c
@@@ -17,15 -16,9 +17,21 @@@ struct linkinfo_reply_data 
  #define LINKINFO_REPDATA(__reply_base) \
  	container_of(__reply_base, struct linkinfo_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_linkinfo_get_policy[ETHTOOL_A_LINKINFO_MAX + 1] = {
 +	[ETHTOOL_A_LINKINFO_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKINFO_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_LINKINFO_PORT]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKINFO_PHYADDR]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKINFO_TP_MDIX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKINFO_TP_MDIX_CTRL]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKINFO_TRANSCEIVER]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_linkinfo_get_policy[] = {
+ 	[ETHTOOL_A_LINKINFO_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int linkinfo_prepare_data(const struct ethnl_req_info *req_base,
@@@ -94,15 -87,12 +100,21 @@@ const struct ethnl_request_ops ethnl_li
  
  /* LINKINFO_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +linkinfo_set_policy[ETHTOOL_A_LINKINFO_MAX + 1] = {
 +	[ETHTOOL_A_LINKINFO_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKINFO_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_linkinfo_set_policy[] = {
+ 	[ETHTOOL_A_LINKINFO_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_LINKINFO_PORT]		= { .type = NLA_U8 },
  	[ETHTOOL_A_LINKINFO_PHYADDR]		= { .type = NLA_U8 },
 +	[ETHTOOL_A_LINKINFO_TP_MDIX]		= { .type = NLA_REJECT },
  	[ETHTOOL_A_LINKINFO_TP_MDIX_CTRL]	= { .type = NLA_U8 },
 +	[ETHTOOL_A_LINKINFO_TRANSCEIVER]	= { .type = NLA_REJECT },
  };
  
  int ethnl_set_linkinfo(struct sk_buff *skb, struct genl_info *info)
diff --cc net/ethtool/linkmodes.c
index 46b18c74eaf5,c5bcb9abc8b9..000000000000
--- a/net/ethtool/linkmodes.c
+++ b/net/ethtool/linkmodes.c
@@@ -19,17 -18,9 +19,23 @@@ struct linkmodes_reply_data 
  #define LINKMODES_REPDATA(__reply_base) \
  	container_of(__reply_base, struct linkmodes_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_linkmodes_get_policy[ETHTOOL_A_LINKMODES_MAX + 1] = {
 +	[ETHTOOL_A_LINKMODES_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_LINKMODES_AUTONEG]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_OURS]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_PEER]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_SPEED]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_DUPLEX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_MASTER_SLAVE_STATE]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_linkmodes_get_policy[] = {
+ 	[ETHTOOL_A_LINKMODES_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int linkmodes_prepare_data(const struct ethnl_req_info *req_base,
@@@ -271,15 -262,15 +277,21 @@@ static const struct link_mode_info link
  	__DEFINE_LINK_MODE_PARAMS(400000, LR4_ER4_FR4, Full),
  	__DEFINE_LINK_MODE_PARAMS(400000, DR4, Full),
  	__DEFINE_LINK_MODE_PARAMS(400000, CR4, Full),
 -	__DEFINE_LINK_MODE_PARAMS(100, FX, Half),
 -	__DEFINE_LINK_MODE_PARAMS(100, FX, Full),
  };
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +linkmodes_set_policy[ETHTOOL_A_LINKMODES_MAX + 1] = {
 +	[ETHTOOL_A_LINKMODES_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKMODES_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_linkmodes_set_policy[] = {
+ 	[ETHTOOL_A_LINKMODES_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_LINKMODES_AUTONEG]		= { .type = NLA_U8 },
  	[ETHTOOL_A_LINKMODES_OURS]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_LINKMODES_PEER]		= { .type = NLA_REJECT },
  	[ETHTOOL_A_LINKMODES_SPEED]		= { .type = NLA_U32 },
  	[ETHTOOL_A_LINKMODES_DUPLEX]		= { .type = NLA_U8 },
  	[ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG]	= { .type = NLA_U8 },
diff --cc net/ethtool/linkstate.c
index ebd6dcff1dad,fb676f349455..000000000000
--- a/net/ethtool/linkstate.c
+++ b/net/ethtool/linkstate.c
@@@ -20,15 -20,9 +20,21 @@@ struct linkstate_reply_data 
  #define LINKSTATE_REPDATA(__reply_base) \
  	container_of(__reply_base, struct linkstate_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_linkstate_get_policy[ETHTOOL_A_LINKSTATE_MAX + 1] = {
 +	[ETHTOOL_A_LINKSTATE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKSTATE_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_LINKSTATE_LINK]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKSTATE_SQI]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKSTATE_SQI_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKSTATE_EXT_STATE]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_LINKSTATE_EXT_SUBSTATE]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_linkstate_get_policy[] = {
+ 	[ETHTOOL_A_LINKSTATE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int linkstate_get_sqi(struct net_device *dev)
diff --cc net/ethtool/netlink.c
index 9efa14e1ec40,10567e6ec034..000000000000
--- a/net/ethtool/netlink.c
+++ b/net/ethtool/netlink.c
@@@ -14,8 -9,7 +14,12 @@@ static struct genl_family ethtool_genl_
  static bool ethnl_ok __read_mostly;
  static u32 ethnl_bcast_seq;
  
++<<<<<<< HEAD
 +static const struct nla_policy ethnl_header_policy[ETHTOOL_A_HEADER_MAX + 1] = {
 +	[ETHTOOL_A_HEADER_UNSPEC]	= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_header_policy[] = {
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_HEADER_DEV_INDEX]	= { .type = NLA_U32 },
  	[ETHTOOL_A_HEADER_DEV_NAME]	= { .type = NLA_NUL_STRING,
  					    .len = ALTIFNAMSIZ - 1 },
diff --cc net/ethtool/netlink.h
index d150f5f5e92b,281d793d4557..000000000000
--- a/net/ethtool/netlink.h
+++ b/net/ethtool/netlink.h
@@@ -345,21 -345,35 +345,53 @@@ extern const struct ethnl_request_ops e
  extern const struct ethnl_request_ops ethnl_eee_request_ops;
  extern const struct ethnl_request_ops ethnl_tsinfo_request_ops;
  
++<<<<<<< HEAD
 +extern const struct nla_policy ethnl_strset_get_policy[ETHTOOL_A_STRSET_MAX + 1];
 +extern const struct nla_policy ethnl_linkinfo_get_policy[ETHTOOL_A_LINKINFO_MAX + 1];
 +extern const struct nla_policy ethnl_linkmodes_get_policy[ETHTOOL_A_LINKMODES_MAX + 1];
 +extern const struct nla_policy ethnl_linkstate_get_policy[ETHTOOL_A_LINKSTATE_MAX + 1];
 +extern const struct nla_policy ethnl_debug_get_policy[ETHTOOL_A_DEBUG_MAX + 1];
 +extern const struct nla_policy ethnl_wol_get_policy[ETHTOOL_A_WOL_MAX + 1];
 +extern const struct nla_policy ethnl_features_get_policy[ETHTOOL_A_FEATURES_MAX + 1];
 +extern const struct nla_policy ethnl_privflags_get_policy[ETHTOOL_A_PRIVFLAGS_MAX + 1];
 +extern const struct nla_policy ethnl_rings_get_policy[ETHTOOL_A_RINGS_MAX + 1];
 +extern const struct nla_policy ethnl_channels_get_policy[ETHTOOL_A_CHANNELS_MAX + 1];
 +extern const struct nla_policy ethnl_coalesce_get_policy[ETHTOOL_A_COALESCE_MAX + 1];
 +extern const struct nla_policy ethnl_pause_get_policy[ETHTOOL_A_PAUSE_MAX + 1];
 +extern const struct nla_policy ethnl_eee_get_policy[ETHTOOL_A_EEE_MAX + 1];
 +extern const struct nla_policy ethnl_tsinfo_get_policy[ETHTOOL_A_TSINFO_MAX + 1];
 +extern const struct nla_policy ethnl_tunnel_info_get_policy[ETHTOOL_A_TUNNEL_INFO_MAX + 1];
++=======
+ extern const struct nla_policy ethnl_header_policy[ETHTOOL_A_HEADER_FLAGS + 1];
+ extern const struct nla_policy ethnl_strset_get_policy[ETHTOOL_A_STRSET_STRINGSETS + 1];
+ extern const struct nla_policy ethnl_linkinfo_get_policy[ETHTOOL_A_LINKINFO_HEADER + 1];
+ extern const struct nla_policy ethnl_linkinfo_set_policy[ETHTOOL_A_LINKINFO_TP_MDIX_CTRL + 1];
+ extern const struct nla_policy ethnl_linkmodes_get_policy[ETHTOOL_A_LINKMODES_HEADER + 1];
+ extern const struct nla_policy ethnl_linkmodes_set_policy[ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG + 1];
+ extern const struct nla_policy ethnl_linkstate_get_policy[ETHTOOL_A_LINKSTATE_HEADER + 1];
+ extern const struct nla_policy ethnl_debug_get_policy[ETHTOOL_A_DEBUG_HEADER + 1];
+ extern const struct nla_policy ethnl_debug_set_policy[ETHTOOL_A_DEBUG_MSGMASK + 1];
+ extern const struct nla_policy ethnl_wol_get_policy[ETHTOOL_A_WOL_HEADER + 1];
+ extern const struct nla_policy ethnl_wol_set_policy[ETHTOOL_A_WOL_SOPASS + 1];
+ extern const struct nla_policy ethnl_features_get_policy[ETHTOOL_A_FEATURES_HEADER + 1];
+ extern const struct nla_policy ethnl_features_set_policy[ETHTOOL_A_FEATURES_WANTED + 1];
+ extern const struct nla_policy ethnl_privflags_get_policy[ETHTOOL_A_PRIVFLAGS_HEADER + 1];
+ extern const struct nla_policy ethnl_privflags_set_policy[ETHTOOL_A_PRIVFLAGS_FLAGS + 1];
+ extern const struct nla_policy ethnl_rings_get_policy[ETHTOOL_A_RINGS_HEADER + 1];
+ extern const struct nla_policy ethnl_rings_set_policy[ETHTOOL_A_RINGS_TX + 1];
+ extern const struct nla_policy ethnl_channels_get_policy[ETHTOOL_A_CHANNELS_HEADER + 1];
+ extern const struct nla_policy ethnl_channels_set_policy[ETHTOOL_A_CHANNELS_COMBINED_COUNT + 1];
+ extern const struct nla_policy ethnl_coalesce_get_policy[ETHTOOL_A_COALESCE_HEADER + 1];
+ extern const struct nla_policy ethnl_coalesce_set_policy[ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL + 1];
+ extern const struct nla_policy ethnl_pause_get_policy[ETHTOOL_A_PAUSE_HEADER + 1];
+ extern const struct nla_policy ethnl_pause_set_policy[ETHTOOL_A_PAUSE_TX + 1];
+ extern const struct nla_policy ethnl_eee_get_policy[ETHTOOL_A_EEE_HEADER + 1];
+ extern const struct nla_policy ethnl_eee_set_policy[ETHTOOL_A_EEE_TX_LPI_TIMER + 1];
+ extern const struct nla_policy ethnl_tsinfo_get_policy[ETHTOOL_A_TSINFO_HEADER + 1];
+ extern const struct nla_policy ethnl_cable_test_act_policy[ETHTOOL_A_CABLE_TEST_HEADER + 1];
+ extern const struct nla_policy ethnl_cable_test_tdr_act_policy[ETHTOOL_A_CABLE_TEST_TDR_CFG + 1];
+ extern const struct nla_policy ethnl_tunnel_info_get_policy[ETHTOOL_A_TUNNEL_INFO_HEADER + 1];
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  
  int ethnl_set_linkinfo(struct sk_buff *skb, struct genl_info *info);
  int ethnl_set_linkmodes(struct sk_buff *skb, struct genl_info *info);
diff --cc net/ethtool/pause.c
index 8df854266d33,bf4013afd8b2..000000000000
--- a/net/ethtool/pause.c
+++ b/net/ethtool/pause.c
@@@ -15,14 -16,17 +15,20 @@@ struct pause_reply_data 
  #define PAUSE_REPDATA(__reply_base) \
  	container_of(__reply_base, struct pause_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_pause_get_policy[ETHTOOL_A_PAUSE_MAX + 1] = {
 +	[ETHTOOL_A_PAUSE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PAUSE_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_PAUSE_AUTONEG]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PAUSE_RX]			= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PAUSE_TX]			= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_pause_get_policy[] = {
+ 	[ETHTOOL_A_PAUSE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
 -static void ethtool_stats_init(u64 *stats, unsigned int n)
 -{
 -	while (n--)
 -		stats[n] = ETHTOOL_STAT_NOT_SET;
 -}
 -
  static int pause_prepare_data(const struct ethnl_req_info *req_base,
  			      struct ethnl_reply_data *reply_base,
  			      struct genl_info *info)
@@@ -79,10 -135,9 +85,16 @@@ const struct ethnl_request_ops ethnl_pa
  
  /* PAUSE_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +pause_set_policy[ETHTOOL_A_PAUSE_MAX + 1] = {
 +	[ETHTOOL_A_PAUSE_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PAUSE_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_pause_set_policy[] = {
+ 	[ETHTOOL_A_PAUSE_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_PAUSE_AUTONEG]		= { .type = NLA_U8 },
  	[ETHTOOL_A_PAUSE_RX]			= { .type = NLA_U8 },
  	[ETHTOOL_A_PAUSE_TX]			= { .type = NLA_U8 },
diff --cc net/ethtool/privflags.c
index 9dfdd9b3a19c,fc9f3be23a19..000000000000
--- a/net/ethtool/privflags.c
+++ b/net/ethtool/privflags.c
@@@ -18,11 -18,9 +18,17 @@@ struct privflags_reply_data 
  #define PRIVFLAGS_REPDATA(__reply_base) \
  	container_of(__reply_base, struct privflags_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_privflags_get_policy[ETHTOOL_A_PRIVFLAGS_MAX + 1] = {
 +	[ETHTOOL_A_PRIVFLAGS_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PRIVFLAGS_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_PRIVFLAGS_FLAGS]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_privflags_get_policy[] = {
+ 	[ETHTOOL_A_PRIVFLAGS_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int ethnl_get_priv_flags_info(struct net_device *dev,
@@@ -135,10 -133,9 +141,16 @@@ const struct ethnl_request_ops ethnl_pr
  
  /* PRIVFLAGS_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +privflags_set_policy[ETHTOOL_A_PRIVFLAGS_MAX + 1] = {
 +	[ETHTOOL_A_PRIVFLAGS_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_PRIVFLAGS_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_privflags_set_policy[] = {
+ 	[ETHTOOL_A_PRIVFLAGS_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_PRIVFLAGS_FLAGS]		= { .type = NLA_NESTED },
  };
  
diff --cc net/ethtool/rings.c
index 006b70f54dd7,4e097812a967..000000000000
--- a/net/ethtool/rings.c
+++ b/net/ethtool/rings.c
@@@ -15,17 -15,9 +15,23 @@@ struct rings_reply_data 
  #define RINGS_REPDATA(__reply_base) \
  	container_of(__reply_base, struct rings_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_rings_get_policy[ETHTOOL_A_RINGS_MAX + 1] = {
 +	[ETHTOOL_A_RINGS_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_RINGS_RX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX_MINI_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX_JUMBO_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_TX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX]			= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX_MINI]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX_JUMBO]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_TX]			= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_rings_get_policy[] = {
+ 	[ETHTOOL_A_RINGS_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int rings_prepare_data(const struct ethnl_req_info *req_base,
@@@ -106,14 -98,9 +112,20 @@@ const struct ethnl_request_ops ethnl_ri
  
  /* RINGS_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +rings_set_policy[ETHTOOL_A_RINGS_MAX + 1] = {
 +	[ETHTOOL_A_RINGS_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_RINGS_RX_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX_MINI_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_RX_JUMBO_MAX]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_RINGS_TX_MAX]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_rings_set_policy[] = {
+ 	[ETHTOOL_A_RINGS_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_RINGS_RX]			= { .type = NLA_U32 },
  	[ETHTOOL_A_RINGS_RX_MINI]		= { .type = NLA_U32 },
  	[ETHTOOL_A_RINGS_RX_JUMBO]		= { .type = NLA_U32 },
diff --cc net/ethtool/strset.c
index 57cdb9cff92f,0734e83c674c..000000000000
--- a/net/ethtool/strset.c
+++ b/net/ethtool/strset.c
@@@ -99,9 -99,9 +99,15 @@@ struct strset_reply_data 
  #define STRSET_REPDATA(__reply_base) \
  	container_of(__reply_base, struct strset_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_strset_get_policy[ETHTOOL_A_STRSET_MAX + 1] = {
 +	[ETHTOOL_A_STRSET_UNSPEC]	= { .type = NLA_REJECT },
 +	[ETHTOOL_A_STRSET_HEADER]	= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_strset_get_policy[] = {
+ 	[ETHTOOL_A_STRSET_HEADER]	=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_STRSET_STRINGSETS]	= { .type = NLA_NESTED },
  };
  
diff --cc net/ethtool/tsinfo.c
index 21f0dc08cead,63b5814bd460..000000000000
--- a/net/ethtool/tsinfo.c
+++ b/net/ethtool/tsinfo.c
@@@ -18,13 -18,9 +18,19 @@@ struct tsinfo_reply_data 
  #define TSINFO_REPDATA(__reply_base) \
  	container_of(__reply_base, struct tsinfo_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_tsinfo_get_policy[ETHTOOL_A_TSINFO_MAX + 1] = {
 +	[ETHTOOL_A_TSINFO_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_TSINFO_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_TSINFO_TIMESTAMPING]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_TSINFO_TX_TYPES]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_TSINFO_RX_FILTERS]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_TSINFO_PHC_INDEX]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_tsinfo_get_policy[] = {
+ 	[ETHTOOL_A_TSINFO_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int tsinfo_prepare_data(const struct ethnl_req_info *req_base,
diff --cc net/ethtool/tunnels.c
index 330817adcf62,e7f2ee0d2471..000000000000
--- a/net/ethtool/tunnels.c
+++ b/net/ethtool/tunnels.c
@@@ -8,10 -8,9 +8,16 @@@
  #include "common.h"
  #include "netlink.h"
  
++<<<<<<< HEAD
 +const struct nla_policy
 +ethnl_tunnel_info_get_policy[ETHTOOL_A_TUNNEL_INFO_MAX + 1] = {
 +	[ETHTOOL_A_TUNNEL_INFO_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_TUNNEL_INFO_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_tunnel_info_get_policy[] = {
+ 	[ETHTOOL_A_TUNNEL_INFO_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static_assert(ETHTOOL_UDP_TUNNEL_TYPE_VXLAN == ilog2(UDP_TUNNEL_TYPE_VXLAN));
diff --cc net/ethtool/wol.c
index 5bc38e2f5f61,ada7df2331d2..000000000000
--- a/net/ethtool/wol.c
+++ b/net/ethtool/wol.c
@@@ -17,11 -17,9 +17,17 @@@ struct wol_reply_data 
  #define WOL_REPDATA(__reply_base) \
  	container_of(__reply_base, struct wol_reply_data, base)
  
++<<<<<<< HEAD
 +const struct nla_policy ethnl_wol_get_policy[ETHTOOL_A_WOL_MAX + 1] = {
 +	[ETHTOOL_A_WOL_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_WOL_HEADER]		= { .type = NLA_NESTED },
 +	[ETHTOOL_A_WOL_MODES]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_WOL_SOPASS]		= { .type = NLA_REJECT },
++=======
+ const struct nla_policy ethnl_wol_get_policy[] = {
+ 	[ETHTOOL_A_WOL_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  };
  
  static int wol_prepare_data(const struct ethnl_req_info *req_base,
@@@ -98,10 -96,9 +104,16 @@@ const struct ethnl_request_ops ethnl_wo
  
  /* WOL_SET */
  
++<<<<<<< HEAD
 +static const struct nla_policy
 +wol_set_policy[ETHTOOL_A_WOL_MAX + 1] = {
 +	[ETHTOOL_A_WOL_UNSPEC]		= { .type = NLA_REJECT },
 +	[ETHTOOL_A_WOL_HEADER]		= { .type = NLA_NESTED },
++=======
+ const struct nla_policy ethnl_wol_set_policy[] = {
+ 	[ETHTOOL_A_WOL_HEADER]		=
+ 		NLA_POLICY_NESTED(ethnl_header_policy),
++>>>>>>> 329d9c333ee4 (ethtool: link up ethnl_header_policy as a nested policy)
  	[ETHTOOL_A_WOL_MODES]		= { .type = NLA_NESTED },
  	[ETHTOOL_A_WOL_SOPASS]		= { .type = NLA_BINARY,
  					    .len = SOPASS_MAX },
* Unmerged path net/ethtool/cabletest.c
* Unmerged path net/ethtool/channels.c
* Unmerged path net/ethtool/coalesce.c
* Unmerged path net/ethtool/debug.c
* Unmerged path net/ethtool/eee.c
* Unmerged path net/ethtool/features.c
* Unmerged path net/ethtool/linkinfo.c
* Unmerged path net/ethtool/linkmodes.c
* Unmerged path net/ethtool/linkstate.c
* Unmerged path net/ethtool/netlink.c
* Unmerged path net/ethtool/netlink.h
* Unmerged path net/ethtool/pause.c
* Unmerged path net/ethtool/privflags.c
* Unmerged path net/ethtool/rings.c
* Unmerged path net/ethtool/strset.c
* Unmerged path net/ethtool/tsinfo.c
* Unmerged path net/ethtool/tunnels.c
* Unmerged path net/ethtool/wol.c
