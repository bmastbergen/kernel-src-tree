KVM: selftests: Add a helper to get system configured THP page size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Yanan Wang <wangyanan55@huawei.com>
commit 3b70c4d128a7781f507fa072d60ce5df3fdfcaa6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/3b70c4d1.failed

If we want to have some tests about transparent hugepages, the system
configured THP hugepage size should better be known by the tests, which
can be used for kinds of alignment or guest memory accessing of vcpus...
So it makes sense to add a helper to get the transparent hugepage size.

With VM_MEM_SRC_ANONYMOUS_THP specified in vm_userspace_mem_region_add(),
we now stat /sys/kernel/mm/transparent_hugepage to check whether THP is
configured in the host kernel before madvise(). Based on this, we can also
read file /sys/kernel/mm/transparent_hugepage/hpage_pmd_size to get THP
hugepage size.

	Signed-off-by: Yanan Wang <wangyanan55@huawei.com>
	Reviewed-by: Ben Gardon <bgardon@google.com>
	Reviewed-by: Andrew Jones <drjones@redhat.com>
Message-Id: <20210330080856.14940-7-wangyanan55@huawei.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 3b70c4d128a7781f507fa072d60ce5df3fdfcaa6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/include/test_util.h
#	tools/testing/selftests/kvm/lib/test_util.c
diff --cc tools/testing/selftests/kvm/include/test_util.h
index 1cc036ddb0c5,ef24c76ba89a..000000000000
--- a/tools/testing/selftests/kvm/include/test_util.h
+++ b/tools/testing/selftests/kvm/include/test_util.h
@@@ -64,6 -64,23 +64,27 @@@ int64_t timespec_to_ns(struct timespec 
  struct timespec timespec_add_ns(struct timespec ts, int64_t ns);
  struct timespec timespec_add(struct timespec ts1, struct timespec ts2);
  struct timespec timespec_sub(struct timespec ts1, struct timespec ts2);
++<<<<<<< HEAD
 +struct timespec timespec_diff_now(struct timespec start);
++=======
+ struct timespec timespec_elapsed(struct timespec start);
+ struct timespec timespec_div(struct timespec ts, int divisor);
+ 
+ enum vm_mem_backing_src_type {
+ 	VM_MEM_SRC_ANONYMOUS,
+ 	VM_MEM_SRC_ANONYMOUS_THP,
+ 	VM_MEM_SRC_ANONYMOUS_HUGETLB,
+ };
+ 
+ struct vm_mem_backing_src_alias {
+ 	const char *name;
+ 	enum vm_mem_backing_src_type type;
+ };
+ 
+ bool thp_configured(void);
+ size_t get_trans_hugepagesz(void);
+ void backing_src_help(void);
+ enum vm_mem_backing_src_type parse_backing_src_type(const char *type_name);
++>>>>>>> 3b70c4d128a7 (KVM: selftests: Add a helper to get system configured THP page size)
  
  #endif /* SELFTEST_KVM_TEST_UTIL_H */
diff --cc tools/testing/selftests/kvm/lib/test_util.c
index 1a46c2c48c7c,9830b2bcd068..000000000000
--- a/tools/testing/selftests/kvm/lib/test_util.c
+++ b/tools/testing/selftests/kvm/lib/test_util.c
@@@ -10,6 -10,8 +10,11 @@@
  #include <limits.h>
  #include <stdlib.h>
  #include <time.h>
++<<<<<<< HEAD
++=======
+ #include <sys/stat.h>
+ #include "linux/kernel.h"
++>>>>>>> 3b70c4d128a7 (KVM: selftests: Add a helper to get system configured THP page size)
  
  #include "test_util.h"
  
@@@ -102,3 -111,59 +107,62 @@@ void print_skip(const char *fmt, ...
  	va_end(ap);
  	puts(", skipping test");
  }
++<<<<<<< HEAD
++=======
+ 
+ const struct vm_mem_backing_src_alias backing_src_aliases[] = {
+ 	{"anonymous", VM_MEM_SRC_ANONYMOUS,},
+ 	{"anonymous_thp", VM_MEM_SRC_ANONYMOUS_THP,},
+ 	{"anonymous_hugetlb", VM_MEM_SRC_ANONYMOUS_HUGETLB,},
+ };
+ 
+ bool thp_configured(void)
+ {
+ 	int ret;
+ 	struct stat statbuf;
+ 
+ 	ret = stat("/sys/kernel/mm/transparent_hugepage", &statbuf);
+ 	TEST_ASSERT(ret == 0 || (ret == -1 && errno == ENOENT),
+ 		    "Error in stating /sys/kernel/mm/transparent_hugepage");
+ 
+ 	return ret == 0;
+ }
+ 
+ size_t get_trans_hugepagesz(void)
+ {
+ 	size_t size;
+ 	FILE *f;
+ 
+ 	TEST_ASSERT(thp_configured(), "THP is not configured in host kernel");
+ 
+ 	f = fopen("/sys/kernel/mm/transparent_hugepage/hpage_pmd_size", "r");
+ 	TEST_ASSERT(f != NULL, "Error in opening transparent_hugepage/hpage_pmd_size");
+ 
+ 	fscanf(f, "%ld", &size);
+ 	fclose(f);
+ 
+ 	return size;
+ }
+ 
+ void backing_src_help(void)
+ {
+ 	int i;
+ 
+ 	printf("Available backing src types:\n");
+ 	for (i = 0; i < ARRAY_SIZE(backing_src_aliases); i++)
+ 		printf("\t%s\n", backing_src_aliases[i].name);
+ }
+ 
+ enum vm_mem_backing_src_type parse_backing_src_type(const char *type_name)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(backing_src_aliases); i++)
+ 		if (!strcmp(type_name, backing_src_aliases[i].name))
+ 			return backing_src_aliases[i].type;
+ 
+ 	backing_src_help();
+ 	TEST_FAIL("Unknown backing src type: %s", type_name);
+ 	return -1;
+ }
++>>>>>>> 3b70c4d128a7 (KVM: selftests: Add a helper to get system configured THP page size)
* Unmerged path tools/testing/selftests/kvm/include/test_util.h
* Unmerged path tools/testing/selftests/kvm/lib/test_util.c
