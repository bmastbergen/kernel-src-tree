KVM: selftests: Make a generic helper to get vm guest mode strings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Yanan Wang <wangyanan55@huawei.com>
commit 6436430e29fb250c140c94a8fcc218a832dcaf74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/6436430e.failed

For generality and conciseness, make an API which can be used in all
kvm libs and selftests to get vm guest mode strings. And the index i
is checked in the API in case of possiable faults.

	Suggested-by: Sean Christopherson <seanjc@google.com>
	Signed-off-by: Yanan Wang <wangyanan55@huawei.com>
	Reviewed-by: Ben Gardon <bgardon@google.com>
	Reviewed-by: Andrew Jones <drjones@redhat.com>
Message-Id: <20210330080856.14940-6-wangyanan55@huawei.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6436430e29fb250c140c94a8fcc218a832dcaf74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/include/kvm_util.h
diff --cc tools/testing/selftests/kvm/include/kvm_util.h
index 480a703e4a2d,f52a7492f47f..000000000000
--- a/tools/testing/selftests/kvm/include/kvm_util.h
+++ b/tools/testing/selftests/kvm/include/kvm_util.h
@@@ -67,14 -68,13 +67,22 @@@ enum vm_guest_mode 
  #define MIN_PAGE_SIZE		(1U << MIN_PAGE_SHIFT)
  #define PTES_PER_MIN_PAGE	ptes_per_page(MIN_PAGE_SIZE)
  
++<<<<<<< HEAD
 +#define vm_guest_mode_string(m) vm_guest_mode_string[m]
 +extern const char * const vm_guest_mode_string[];
 +
 +enum vm_mem_backing_src_type {
 +	VM_MEM_SRC_ANONYMOUS,
 +	VM_MEM_SRC_ANONYMOUS_THP,
 +	VM_MEM_SRC_ANONYMOUS_HUGETLB,
++=======
+ struct vm_guest_mode_params {
+ 	unsigned int pa_bits;
+ 	unsigned int va_bits;
+ 	unsigned int page_size;
+ 	unsigned int page_shift;
++>>>>>>> 6436430e29fb (KVM: selftests: Make a generic helper to get vm guest mode strings)
  };
 -extern const struct vm_guest_mode_params vm_guest_mode_params[];
  
  int kvm_check_cap(long cap);
  int vm_enable_cap(struct kvm_vm *vm, struct kvm_enable_cap *cap);
* Unmerged path tools/testing/selftests/kvm/include/kvm_util.h
diff --git a/tools/testing/selftests/kvm/lib/kvm_util.c b/tools/testing/selftests/kvm/lib/kvm_util.c
index a84de7ef2cbb..64ffd87a5e4d 100644
--- a/tools/testing/selftests/kvm/lib/kvm_util.c
+++ b/tools/testing/selftests/kvm/lib/kvm_util.c
@@ -143,17 +143,24 @@ static void vm_open(struct kvm_vm *vm, int perm)
 		"rc: %i errno: %i", vm->fd, errno);
 }
 
-const char * const vm_guest_mode_string[] = {
-	"PA-bits:52,  VA-bits:48,  4K pages",
-	"PA-bits:52,  VA-bits:48, 64K pages",
-	"PA-bits:48,  VA-bits:48,  4K pages",
-	"PA-bits:48,  VA-bits:48, 64K pages",
-	"PA-bits:40,  VA-bits:48,  4K pages",
-	"PA-bits:40,  VA-bits:48, 64K pages",
-	"PA-bits:ANY, VA-bits:48,  4K pages",
-};
-_Static_assert(sizeof(vm_guest_mode_string)/sizeof(char *) == NUM_VM_MODES,
-	       "Missing new mode strings?");
+const char *vm_guest_mode_string(uint32_t i)
+{
+	static const char * const strings[] = {
+		[VM_MODE_P52V48_4K]	= "PA-bits:52,  VA-bits:48,  4K pages",
+		[VM_MODE_P52V48_64K]	= "PA-bits:52,  VA-bits:48, 64K pages",
+		[VM_MODE_P48V48_4K]	= "PA-bits:48,  VA-bits:48,  4K pages",
+		[VM_MODE_P48V48_64K]	= "PA-bits:48,  VA-bits:48, 64K pages",
+		[VM_MODE_P40V48_4K]	= "PA-bits:40,  VA-bits:48,  4K pages",
+		[VM_MODE_P40V48_64K]	= "PA-bits:40,  VA-bits:48, 64K pages",
+		[VM_MODE_PXXV48_4K]	= "PA-bits:ANY, VA-bits:48,  4K pages",
+	};
+	_Static_assert(sizeof(strings)/sizeof(char *) == NUM_VM_MODES,
+		       "Missing new mode strings?");
+
+	TEST_ASSERT(i < NUM_VM_MODES, "Guest mode ID %d too big", i);
+
+	return strings[i];
+}
 
 struct vm_guest_mode_params {
 	unsigned int pa_bits;
