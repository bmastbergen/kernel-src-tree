block: add zone specific block statuses

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Keith Busch <kbusch@kernel.org>
commit 3b481d91356e5693d8358d4ef9c383bdb92c8da0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/3b481d91.failed

A zoned device with limited resources to open or activate zones may
return an error when the host exceeds those limits. The same command may
be successful if retried later, but the host needs to wait for specific
zone states before it should expect a retry to succeed. Have the block
layer provide an appropriate status for these conditions so applications
can distinuguish this error for special handling.

	Cc: linux-api@vger.kernel.org
	Cc: Niklas Cassel <niklas.cassel@wdc.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
	Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Signed-off-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 3b481d91356e5693d8358d4ef9c383bdb92c8da0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/block/queue-sysfs.txt
diff --cc Documentation/block/queue-sysfs.txt
index 2c1e67058fd3,2638d3446b79..000000000000
--- a/Documentation/block/queue-sysfs.txt
+++ b/Documentation/block/queue-sysfs.txt
@@@ -82,8 -113,31 +82,36 @@@ This is the maximum number of kilobyte
  
  max_integrity_segments (RO)
  ---------------------------
++<<<<<<< HEAD:Documentation/block/queue-sysfs.txt
 +When read, this file shows the max limit of integrity segments as
 +set by block layer which a hardware controller can handle.
++=======
+ Maximum number of elements in a DMA scatter/gather list with integrity
+ data that will be submitted by the block layer core to the associated
+ block driver.
+ 
+ max_active_zones (RO)
+ ---------------------
+ For zoned block devices (zoned attribute indicating "host-managed" or
+ "host-aware"), the sum of zones belonging to any of the zone states:
+ EXPLICIT OPEN, IMPLICIT OPEN or CLOSED, is limited by this value.
+ If this value is 0, there is no limit.
+ 
+ If the host attempts to exceed this limit, the driver should report this error
+ with BLK_STS_ZONE_ACTIVE_RESOURCE, which user space may see as the EOVERFLOW
+ errno.
+ 
+ max_open_zones (RO)
+ -------------------
+ For zoned block devices (zoned attribute indicating "host-managed" or
+ "host-aware"), the sum of zones belonging to any of the zone states:
+ EXPLICIT OPEN or IMPLICIT OPEN, is limited by this value.
+ If this value is 0, there is no limit.
++>>>>>>> 3b481d91356e (block: add zone specific block statuses):Documentation/block/queue-sysfs.rst
+ 
+ If the host attempts to exceed this limit, the driver should report this error
+ with BLK_STS_ZONE_OPEN_RESOURCE, which user space may see as the ETOOMANYREFS
+ errno.
  
  max_sectors_kb (RW)
  -------------------
* Unmerged path Documentation/block/queue-sysfs.txt
diff --git a/block/blk-core.c b/block/blk-core.c
index 7080256c78df..6b6dce426023 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -181,6 +181,10 @@ static const struct {
 	/* device mapper special case, should not leak out: */
 	[BLK_STS_DM_REQUEUE]	= { -EREMCHG, "dm internal retry" },
 
+	/* zone device specific errors */
+	[BLK_STS_ZONE_OPEN_RESOURCE]	= { -ETOOMANYREFS, "open zones exceeded" },
+	[BLK_STS_ZONE_ACTIVE_RESOURCE]	= { -EOVERFLOW, "active zones exceeded" },
+
 	/* everything else not covered above: */
 	[BLK_STS_IOERR]		= { -EIO,	"I/O" },
 };
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index 01eb143dd5ae..2c351b9027ed 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -76,6 +76,24 @@ typedef u8 __bitwise blk_status_t;
  */
 #define BLK_STS_ZONE_RESOURCE	((__force blk_status_t)14)
 
+/*
+ * BLK_STS_ZONE_OPEN_RESOURCE is returned from the driver in the completion
+ * path if the device returns a status indicating that too many zone resources
+ * are currently open. The same command should be successful if resubmitted
+ * after the number of open zones decreases below the device's limits, which is
+ * reported in the request_queue's max_open_zones.
+ */
+#define BLK_STS_ZONE_OPEN_RESOURCE	((__force blk_status_t)15)
+
+/*
+ * BLK_STS_ZONE_ACTIVE_RESOURCE is returned from the driver in the completion
+ * path if the device returns a status indicating that too many zone resources
+ * are currently active. The same command should be successful if resubmitted
+ * after the number of active zones decreases below the device's limits, which
+ * is reported in the request_queue's max_active_zones.
+ */
+#define BLK_STS_ZONE_ACTIVE_RESOURCE	((__force blk_status_t)16)
+
 /**
  * blk_path_error - returns true if error may be path related
  * @error: status the request was completed with
