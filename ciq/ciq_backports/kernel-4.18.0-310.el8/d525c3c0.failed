nvme: remove the disk argument to nvme_update_zone_info

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit d525c3c023221619748d1e758e5a26daa775f822
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/d525c3c0.failed

The queue can trivially be derived from the nvme_ns structure.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
(cherry picked from commit d525c3c023221619748d1e758e5a26daa775f822)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/nvme.h
#	drivers/nvme/host/zns.c
diff --cc drivers/nvme/host/core.c
index d026ba361d0c,d4b503208497..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -2088,8 -2094,17 +2088,20 @@@ static int __nvme_revalidate_disk(struc
  	switch (ns->head->ids.csi) {
  	case NVME_CSI_NVM:
  		break;
++<<<<<<< HEAD
++=======
+ 	case NVME_CSI_ZNS:
+ 		ret = nvme_update_zone_info(ns, lbaf);
+ 		if (ret) {
+ 			dev_warn(ctrl->device,
+ 				"failed to add zoned namespace:%u ret:%d\n",
+ 				ns->head->ns_id, ret);
+ 			return ret;
+ 		}
+ 		break;
++>>>>>>> d525c3c02322 (nvme: remove the disk argument to nvme_update_zone_info)
  	default:
 -		dev_warn(ctrl->device, "unknown csi:%u ns:%u\n",
 +		dev_warn(ctrl->device, "unknown csi:%d ns:%d\n",
  			ns->head->ids.csi, ns->head->ns_id);
  		return -ENODEV;
  	}
diff --cc drivers/nvme/host/nvme.h
index efa4f4700780,566776100126..000000000000
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@@ -751,11 -756,35 +751,41 @@@ static inline void nvme_mpath_wait_free
  static inline void nvme_mpath_start_freeze(struct nvme_subsystem *subsys)
  {
  }
 +static inline void nvme_mpath_update_disk_size(struct gendisk *disk)
 +{
 +}
  #endif /* CONFIG_NVME_MULTIPATH */
  
++<<<<<<< HEAD
++=======
+ int nvme_revalidate_zones(struct nvme_ns *ns);
+ #ifdef CONFIG_BLK_DEV_ZONED
+ int nvme_update_zone_info(struct nvme_ns *ns, unsigned lbaf);
+ int nvme_report_zones(struct gendisk *disk, sector_t sector,
+ 		      unsigned int nr_zones, report_zones_cb cb, void *data);
+ 
+ blk_status_t nvme_setup_zone_mgmt_send(struct nvme_ns *ns, struct request *req,
+ 				       struct nvme_command *cmnd,
+ 				       enum nvme_zone_mgmt_action action);
+ #else
+ #define nvme_report_zones NULL
+ 
+ static inline blk_status_t nvme_setup_zone_mgmt_send(struct nvme_ns *ns,
+ 		struct request *req, struct nvme_command *cmnd,
+ 		enum nvme_zone_mgmt_action action)
+ {
+ 	return BLK_STS_NOTSUPP;
+ }
+ 
+ static inline int nvme_update_zone_info(struct nvme_ns *ns, unsigned lbaf)
+ {
+ 	dev_warn(ns->ctrl->device,
+ 		 "Please enable CONFIG_BLK_DEV_ZONED to support ZNS devices\n");
+ 	return -EPROTONOSUPPORT;
+ }
+ #endif
+ 
++>>>>>>> d525c3c02322 (nvme: remove the disk argument to nvme_update_zone_info)
  #ifdef CONFIG_NVM
  int nvme_nvm_register(struct nvme_ns *ns, char *disk_name, int node);
  void nvme_nvm_unregister(struct nvme_ns *ns);
* Unmerged path drivers/nvme/host/zns.c
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/nvme.h
* Unmerged path drivers/nvme/host/zns.c
