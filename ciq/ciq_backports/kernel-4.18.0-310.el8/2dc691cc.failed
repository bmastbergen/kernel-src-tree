nbd: refactor size updates

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 2dc691cc4ac259f8b5bb0bd8670645af894d30eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/2dc691cc.failed

Merge nbd_size_set and nbd_size_update into a single function that also
updates the nbd_config fields.  This new function takes the device size
in bytes as the first argument, and the blocksize as the second argument,
simplifying the calculations required in most callers.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 2dc691cc4ac259f8b5bb0bd8670645af894d30eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nbd.c
diff --cc drivers/block/nbd.c
index d393d6149779,6e8f2ff715c6..000000000000
--- a/drivers/block/nbd.c
+++ b/drivers/block/nbd.c
@@@ -294,41 -296,37 +294,70 @@@ static void nbd_size_clear(struct nbd_d
  	}
  }
  
++<<<<<<< HEAD
 +static void nbd_size_update(struct nbd_device *nbd, bool start)
 +{
 +	struct nbd_config *config = nbd->config;
 +	struct block_device *bdev = bdget_disk(nbd->disk, 0);
++=======
+ static void nbd_set_size(struct nbd_device *nbd, loff_t bytesize,
+ 		loff_t blksize)
+ {
+ 	struct block_device *bdev;
+ 
+ 	nbd->config->bytesize = bytesize;
+ 	nbd->config->blksize = blksize;
+ 
+ 	if (!nbd->task_recv)
+ 		return;
++>>>>>>> 2dc691cc4ac2 (nbd: refactor size updates)
  
- 	if (config->flags & NBD_FLAG_SEND_TRIM) {
- 		nbd->disk->queue->limits.discard_granularity = config->blksize;
- 		nbd->disk->queue->limits.discard_alignment = config->blksize;
+ 	if (nbd->config->flags & NBD_FLAG_SEND_TRIM) {
+ 		nbd->disk->queue->limits.discard_granularity = blksize;
+ 		nbd->disk->queue->limits.discard_alignment = blksize;
  		blk_queue_max_discard_sectors(nbd->disk->queue, UINT_MAX);
  	}
++<<<<<<< HEAD
 +	blk_queue_logical_block_size(nbd->disk->queue, config->blksize);
 +	blk_queue_physical_block_size(nbd->disk->queue, config->blksize);
 +	set_capacity(nbd->disk, config->bytesize >> 9);
 +	if (bdev) {
 +		if (bdev->bd_disk) {
 +			bd_set_size(bdev, config->bytesize);
 +			if (start)
 +				set_blocksize(bdev, config->blksize);
 +		} else
 +			bdev->bd_invalidated = 1;
++=======
+ 	blk_queue_logical_block_size(nbd->disk->queue, blksize);
+ 	blk_queue_physical_block_size(nbd->disk->queue, blksize);
+ 
+ 	set_capacity(nbd->disk, bytesize >> 9);
+ 	bdev = bdget_disk(nbd->disk, 0);
+ 	if (bdev) {
+ 		if (bdev->bd_disk)
+ 			bd_set_nr_sectors(bdev, bytesize >> 9);
+ 		else
+ 			set_bit(GD_NEED_PART_SCAN, &nbd->disk->state);
++>>>>>>> 2dc691cc4ac2 (nbd: refactor size updates)
  		bdput(bdev);
  	}
  	kobject_uevent(&nbd_to_dev(nbd)->kobj, KOBJ_CHANGE);
  }
  
++<<<<<<< HEAD
 +static void nbd_size_set(struct nbd_device *nbd, loff_t blocksize,
 +			 loff_t nr_blocks)
 +{
 +	struct nbd_config *config = nbd->config;
 +	config->blksize = blocksize;
 +	config->bytesize = blocksize * nr_blocks;
 +	if (nbd->task_recv != NULL)
 +		nbd_size_update(nbd, false);
 +}
 +
++=======
++>>>>>>> 2dc691cc4ac2 (nbd: refactor size updates)
  static void nbd_complete_rq(struct request *req)
  {
  	struct nbd_cmd *cmd = blk_mq_rq_to_pdu(req);
@@@ -1321,7 -1304,7 +1350,11 @@@ static int nbd_start_device(struct nbd_
  		args->index = i;
  		queue_work(nbd->recv_workq, &args->work);
  	}
++<<<<<<< HEAD
 +	nbd_size_update(nbd, true);
++=======
+ 	nbd_set_size(nbd, config->bytesize, config->blksize);
++>>>>>>> 2dc691cc4ac2 (nbd: refactor size updates)
  	return error;
  }
  
* Unmerged path drivers/block/nbd.c
