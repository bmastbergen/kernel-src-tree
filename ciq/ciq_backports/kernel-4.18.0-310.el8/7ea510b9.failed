mm/memcontrol: fix warning in mem_cgroup_page_lruvec()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Hugh Dickins <hughd@google.com>
commit 7ea510b92c7c9b4eb5ff72e6b4bbad4b0407a914
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/7ea510b9.failed

Boot a CONFIG_MEMCG=y kernel with "cgroup_disabled=memory" and you are
met by a series of warnings from the VM_WARN_ON_ONCE_PAGE(!memcg, page)
recently added to the inline mem_cgroup_page_lruvec().

An earlier attempt to place that warning, in mem_cgroup_lruvec(), had
been careful to do so after weeding out the mem_cgroup_disabled() case;
but was itself invalid because of the mem_cgroup_lruvec(NULL, pgdat) in
clear_pgdat_congested() and age_active_anon().

Warning in mem_cgroup_page_lruvec() was once useful in detecting a KSM
charge bug, so may be worth keeping: but skip if mem_cgroup_disabled().

Link: https://lkml.kernel.org/r/alpine.LSU.2.11.2101032056260.1093@eggly.anvils
Fixes: 9a1ac2288cf1 ("mm/memcontrol:rewrite mem_cgroup_page_lruvec()")
	Signed-off-by: Hugh Dickins <hughd@google.com>
	Reviewed-by: Alex Shi <alex.shi@linux.alibaba.com>
	Acked-by: Roman Gushchin <guro@fb.com>
	Acked-by: Chris Down <chris@chrisdown.name>
	Reviewed-by: Baoquan He <bhe@redhat.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Hui Su <sh_def@163.com>
	Cc: Lorenzo Stoakes <lstoakes@gmail.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Shakeel Butt <shakeelb@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 7ea510b92c7c9b4eb5ff72e6b4bbad4b0407a914)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/memcontrol.h
diff --cc include/linux/memcontrol.h
index da9b4f3ccbfd,eeb0b52203e9..000000000000
--- a/include/linux/memcontrol.h
+++ b/include/linux/memcontrol.h
@@@ -525,7 -653,37 +525,41 @@@ out
  	return lruvec;
  }
  
++<<<<<<< HEAD
 +struct lruvec *mem_cgroup_page_lruvec(struct page *, struct pglist_data *);
++=======
+ /**
+  * mem_cgroup_page_lruvec - return lruvec for isolating/putting an LRU page
+  * @page: the page
+  * @pgdat: pgdat of the page
+  *
+  * This function relies on page->mem_cgroup being stable.
+  */
+ static inline struct lruvec *mem_cgroup_page_lruvec(struct page *page,
+ 						struct pglist_data *pgdat)
+ {
+ 	struct mem_cgroup *memcg = page_memcg(page);
+ 
+ 	VM_WARN_ON_ONCE_PAGE(!memcg && !mem_cgroup_disabled(), page);
+ 	return mem_cgroup_lruvec(memcg, pgdat);
+ }
+ 
+ static inline bool lruvec_holds_page_lru_lock(struct page *page,
+ 					      struct lruvec *lruvec)
+ {
+ 	pg_data_t *pgdat = page_pgdat(page);
+ 	const struct mem_cgroup *memcg;
+ 	struct mem_cgroup_per_node *mz;
+ 
+ 	if (mem_cgroup_disabled())
+ 		return lruvec == &pgdat->__lruvec;
+ 
+ 	mz = container_of(lruvec, struct mem_cgroup_per_node, lruvec);
+ 	memcg = page_memcg(page) ? : root_mem_cgroup;
+ 
+ 	return lruvec->pgdat == pgdat && mz->memcg == memcg;
+ }
++>>>>>>> 7ea510b92c7c (mm/memcontrol: fix warning in mem_cgroup_page_lruvec())
  
  struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p);
  
* Unmerged path include/linux/memcontrol.h
