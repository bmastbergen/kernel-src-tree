NFSD: MKNOD should return NFSERR_BADTYPE instead of NFSERR_INVAL

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 66d60e3ad1e44d42d940767f62bf265f107fb628
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/66d60e3a.failed

A late paragraph of RFC 1813 Section 3.3.11 states:

| ... if the server does not support the target type or the
| target type is illegal, the error, NFS3ERR_BADTYPE, should
| be returned. Note that NF3REG, NF3DIR, and NF3LNK are
| illegal types for MKNOD.

The Linux NFS server incorrectly returns NFSERR_INVAL in these
cases.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit 66d60e3ad1e44d42d940767f62bf265f107fb628)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs3proc.c
diff --cc fs/nfsd/nfs3proc.c
index 18ff6c873ee5,a633044b0dc1..000000000000
--- a/fs/nfsd/nfs3proc.c
+++ b/fs/nfsd/nfs3proc.c
@@@ -323,22 -316,24 +323,36 @@@ nfsd3_proc_mknod(struct svc_rqst *rqstp
  	fh_copy(&resp->dirfh, &argp->fh);
  	fh_init(&resp->fh, NFS3_FHSIZE);
  
++<<<<<<< HEAD
 +	if (argp->ftype == 0 || argp->ftype >= NF3BAD)
 +		RETURN_STATUS(nfserr_inval);
 +	if (argp->ftype == NF3CHR || argp->ftype == NF3BLK) {
 +		rdev = MKDEV(argp->major, argp->minor);
 +		if (MAJOR(rdev) != argp->major ||
 +		    MINOR(rdev) != argp->minor)
 +			RETURN_STATUS(nfserr_inval);
 +	} else
 +		if (argp->ftype != NF3SOCK && argp->ftype != NF3FIFO)
 +			RETURN_STATUS(nfserr_inval);
++=======
+ 	if (argp->ftype == NF3CHR || argp->ftype == NF3BLK) {
+ 		rdev = MKDEV(argp->major, argp->minor);
+ 		if (MAJOR(rdev) != argp->major ||
+ 		    MINOR(rdev) != argp->minor) {
+ 			resp->status = nfserr_inval;
+ 			goto out;
+ 		}
+ 	} else if (argp->ftype != NF3SOCK && argp->ftype != NF3FIFO) {
+ 		resp->status = nfserr_badtype;
+ 		goto out;
+ 	}
++>>>>>>> 66d60e3ad1e4 (NFSD: MKNOD should return NFSERR_BADTYPE instead of NFSERR_INVAL)
  
  	type = nfs3_ftypes[argp->ftype];
 -	resp->status = nfsd_create(rqstp, &resp->dirfh, argp->name, argp->len,
 -				   &argp->attrs, type, rdev, &resp->fh);
 +	nfserr = nfsd_create(rqstp, &resp->dirfh, argp->name, argp->len,
 +				    &argp->attrs, type, rdev, &resp->fh);
  	fh_unlock(&resp->dirfh);
 -out:
 -	return rpc_success;
 +	RETURN_STATUS(nfserr);
  }
  
  /*
* Unmerged path fs/nfsd/nfs3proc.c
