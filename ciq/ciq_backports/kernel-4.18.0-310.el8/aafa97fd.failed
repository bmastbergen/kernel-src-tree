KVM: x86: hyper-v: Rename vcpu_to_stimer()/stimer_to_vcpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit aafa97fd1c01bc82c1f288bf1f27e8e1bdc36a3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/aafa97fd.failed

vcpu_to_stimers()'s argument is almost always 'vcpu' so there's no need to
have an additional prefix. Also, this makes the naming more consistent with
to_hv_vcpu()/to_hv_synic().

Rename stimer_to_vcpu() to hv_stimer_to_vcpu() for consitency.

No functional change intended.

	Suggested-by: Sean Christopherson <seanjc@google.com>
	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
Message-Id: <20210126134816.1880136-7-vkuznets@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit aafa97fd1c01bc82c1f288bf1f27e8e1bdc36a3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/hyperv.c
diff --cc arch/x86/kvm/hyperv.c
index 22363dbea4b4,b02adaa0bb53..000000000000
--- a/arch/x86/kvm/hyperv.c
+++ b/arch/x86/kvm/hyperv.c
@@@ -633,8 -634,8 +633,13 @@@ static int stimer_set_config(struct kvm
  {
  	union hv_stimer_config new_config = {.as_uint64 = config},
  		old_config = {.as_uint64 = stimer->config.as_uint64};
++<<<<<<< HEAD
 +	struct kvm_vcpu *vcpu = stimer_to_vcpu(stimer);
 +	struct kvm_vcpu_hv_synic *synic = vcpu_to_synic(vcpu);
++=======
+ 	struct kvm_vcpu *vcpu = hv_stimer_to_vcpu(stimer);
+ 	struct kvm_vcpu_hv_synic *synic = to_hv_synic(vcpu);
++>>>>>>> aafa97fd1c01 (KVM: x86: hyper-v: Rename vcpu_to_stimer()/stimer_to_vcpu())
  
  	if (!synic->active && !host)
  		return 1;
@@@ -657,8 -658,8 +662,13 @@@
  static int stimer_set_count(struct kvm_vcpu_hv_stimer *stimer, u64 count,
  			    bool host)
  {
++<<<<<<< HEAD
 +	struct kvm_vcpu *vcpu = stimer_to_vcpu(stimer);
 +	struct kvm_vcpu_hv_synic *synic = vcpu_to_synic(vcpu);
++=======
+ 	struct kvm_vcpu *vcpu = hv_stimer_to_vcpu(stimer);
+ 	struct kvm_vcpu_hv_synic *synic = to_hv_synic(vcpu);
++>>>>>>> aafa97fd1c01 (KVM: x86: hyper-v: Rename vcpu_to_stimer()/stimer_to_vcpu())
  
  	if (!synic->active && !host)
  		return 1;
* Unmerged path arch/x86/kvm/hyperv.c
diff --git a/arch/x86/kvm/hyperv.h b/arch/x86/kvm/hyperv.h
index 79c2bd01304d..df1058b7c04e 100644
--- a/arch/x86/kvm/hyperv.h
+++ b/arch/x86/kvm/hyperv.h
@@ -97,13 +97,13 @@ bool kvm_hv_assist_page_enabled(struct kvm_vcpu *vcpu);
 bool kvm_hv_get_assist_page(struct kvm_vcpu *vcpu,
 			    struct hv_vp_assist_page *assist_page);
 
-static inline struct kvm_vcpu_hv_stimer *vcpu_to_stimer(struct kvm_vcpu *vcpu,
-							int timer_index)
+static inline struct kvm_vcpu_hv_stimer *to_hv_stimer(struct kvm_vcpu *vcpu,
+						      int timer_index)
 {
 	return &to_hv_vcpu(vcpu)->stimer[timer_index];
 }
 
-static inline struct kvm_vcpu *stimer_to_vcpu(struct kvm_vcpu_hv_stimer *stimer)
+static inline struct kvm_vcpu *hv_stimer_to_vcpu(struct kvm_vcpu_hv_stimer *stimer)
 {
 	struct kvm_vcpu_hv *hv_vcpu;
 
