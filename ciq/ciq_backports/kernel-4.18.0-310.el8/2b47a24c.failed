mm/vmscan: drop unneeded assignment in kswapd()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Lukas Bulwahn <lukas.bulwahn@gmail.com>
commit 2b47a24cee0eedbb9b106ef3e992db0ddf48f740
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/2b47a24c.failed

The refactoring to kswapd() in commit e716f2eb24de ("mm, vmscan: prevent
kswapd sleeping prematurely due to mismatched classzone_idx") turned an
assignment to reclaim_order into a dead store, as in all further paths,
reclaim_order will be assigned again before it is used.

make clang-analyzer on x86_64 tinyconfig caught my attention with:

  mm/vmscan.c: warning: Although the value stored to 'reclaim_order' is used in the enclosing expression, the value is never actually read from 'reclaim_order' [clang-analyzer-deadcode.DeadStores]

Compilers will detect this unneeded assignment and optimize this anyway.
So, the resulting binary is identical before and after this change.

Simplify the code and remove unneeded assignment to make clang-analyzer
happy.

No functional change. No change in binary code.

Link: https://lkml.kernel.org/r/20201004125827.17679-1-lukas.bulwahn@gmail.com
	Signed-off-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
	Acked-by: Mel Gorman <mgorman@techsingularity.net>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Nathan Chancellor <natechancellor@gmail.com>
	Cc: Nick Desaulniers <ndesaulniers@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2b47a24cee0eedbb9b106ef3e992db0ddf48f740)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmscan.c
diff --cc mm/vmscan.c
index 78909cbd70f5,e71b563cda7b..000000000000
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@@ -3904,13 -3892,14 +3904,20 @@@ static int kswapd(void *p
  
  kswapd_try_sleep:
  		kswapd_try_to_sleep(pgdat, alloc_order, reclaim_order,
 -					highest_zoneidx);
 +					classzone_idx);
  
++<<<<<<< HEAD
 +		/* Read the new order and classzone_idx */
 +		alloc_order = reclaim_order = READ_ONCE(pgdat->kswapd_order);
 +		classzone_idx = kswapd_classzone_idx(pgdat, classzone_idx);
++=======
+ 		/* Read the new order and highest_zoneidx */
+ 		alloc_order = READ_ONCE(pgdat->kswapd_order);
+ 		highest_zoneidx = kswapd_highest_zoneidx(pgdat,
+ 							highest_zoneidx);
++>>>>>>> 2b47a24cee0e (mm/vmscan: drop unneeded assignment in kswapd())
  		WRITE_ONCE(pgdat->kswapd_order, 0);
 -		WRITE_ONCE(pgdat->kswapd_highest_zoneidx, MAX_NR_ZONES);
 +		WRITE_ONCE(pgdat->kswapd_classzone_idx, MAX_NR_ZONES);
  
  		ret = try_to_freeze();
  		if (kthread_should_stop())
* Unmerged path mm/vmscan.c
