nbd: validate the block size in nbd_set_size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit dcbddf541f18e367ac9cdad8e223d382cd303161
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/dcbddf54.failed

Move the validation of the block from the callers into nbd_set_size.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit dcbddf541f18e367ac9cdad8e223d382cd303161)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nbd.c
diff --cc drivers/block/nbd.c
index d393d6149779,7478a5e02bc1..000000000000
--- a/drivers/block/nbd.c
+++ b/drivers/block/nbd.c
@@@ -294,41 -296,43 +294,64 @@@ static void nbd_size_clear(struct nbd_d
  	}
  }
  
++<<<<<<< HEAD
 +static void nbd_size_update(struct nbd_device *nbd, bool start)
++=======
+ static int nbd_set_size(struct nbd_device *nbd, loff_t bytesize,
+ 		loff_t blksize)
++>>>>>>> dcbddf541f18 (nbd: validate the block size in nbd_set_size)
  {
 -	struct block_device *bdev;
 +	struct nbd_config *config = nbd->config;
 +	struct block_device *bdev = bdget_disk(nbd->disk, 0);
  
++<<<<<<< HEAD
 +	if (config->flags & NBD_FLAG_SEND_TRIM) {
 +		nbd->disk->queue->limits.discard_granularity = config->blksize;
 +		nbd->disk->queue->limits.discard_alignment = config->blksize;
++=======
+ 	if (!blksize)
+ 		blksize = NBD_DEF_BLKSIZE;
+ 	if (blksize < 512 || blksize > PAGE_SIZE || !is_power_of_2(blksize))
+ 		return -EINVAL;
+ 
+ 	nbd->config->bytesize = bytesize;
+ 	nbd->config->blksize = blksize;
+ 
+ 	if (!nbd->task_recv)
+ 		return 0;
+ 
+ 	if (nbd->config->flags & NBD_FLAG_SEND_TRIM) {
+ 		nbd->disk->queue->limits.discard_granularity = blksize;
+ 		nbd->disk->queue->limits.discard_alignment = blksize;
++>>>>>>> dcbddf541f18 (nbd: validate the block size in nbd_set_size)
  		blk_queue_max_discard_sectors(nbd->disk->queue, UINT_MAX);
  	}
 -	blk_queue_logical_block_size(nbd->disk->queue, blksize);
 -	blk_queue_physical_block_size(nbd->disk->queue, blksize);
 -
 -	set_capacity(nbd->disk, bytesize >> 9);
 -	bdev = bdget_disk(nbd->disk, 0);
 +	blk_queue_logical_block_size(nbd->disk->queue, config->blksize);
 +	blk_queue_physical_block_size(nbd->disk->queue, config->blksize);
 +	set_capacity(nbd->disk, config->bytesize >> 9);
  	if (bdev) {
 -		if (bdev->bd_disk)
 -			bd_set_nr_sectors(bdev, bytesize >> 9);
 -		else
 -			set_bit(GD_NEED_PART_SCAN, &nbd->disk->state);
 +		if (bdev->bd_disk) {
 +			bd_set_size(bdev, config->bytesize);
 +			if (start)
 +				set_blocksize(bdev, config->blksize);
 +		} else
 +			bdev->bd_invalidated = 1;
  		bdput(bdev);
  	}
  	kobject_uevent(&nbd_to_dev(nbd)->kobj, KOBJ_CHANGE);
+ 	return 0;
  }
  
 +static void nbd_size_set(struct nbd_device *nbd, loff_t blocksize,
 +			 loff_t nr_blocks)
 +{
 +	struct nbd_config *config = nbd->config;
 +	config->blksize = blocksize;
 +	config->bytesize = blocksize * nr_blocks;
 +	if (nbd->task_recv != NULL)
 +		nbd_size_update(nbd, false);
 +}
 +
  static void nbd_complete_rq(struct request *req)
  {
  	struct nbd_cmd *cmd = blk_mq_rq_to_pdu(req);
@@@ -1321,8 -1310,7 +1344,12 @@@ static int nbd_start_device(struct nbd_
  		args->index = i;
  		queue_work(nbd->recv_workq, &args->work);
  	}
++<<<<<<< HEAD
 +	nbd_size_update(nbd, true);
 +	return error;
++=======
+ 	return nbd_set_size(nbd, config->bytesize, config->blksize);
++>>>>>>> dcbddf541f18 (nbd: validate the block size in nbd_set_size)
  }
  
  static int nbd_start_device_ioctl(struct nbd_device *nbd, struct block_device *bdev)
@@@ -1396,20 -1376,12 +1415,29 @@@ static int __nbd_ioctl(struct block_dev
  	case NBD_SET_SOCK:
  		return nbd_add_socket(nbd, arg, false);
  	case NBD_SET_BLKSIZE:
++<<<<<<< HEAD
 +		if (!arg)
 +			arg = NBD_DEF_BLKSIZE;
 +		if (!nbd_is_valid_blksize(arg))
 +			return -EINVAL;
 +		nbd_size_set(nbd, arg,
 +			     div_s64(config->bytesize, arg));
 +		return 0;
 +	case NBD_SET_SIZE:
 +		nbd_size_set(nbd, config->blksize,
 +			     div_s64(arg, config->blksize));
 +		return 0;
 +	case NBD_SET_SIZE_BLOCKS:
 +		nbd_size_set(nbd, config->blksize, arg);
 +		return 0;
++=======
+ 		return nbd_set_size(nbd, config->bytesize, arg);
+ 	case NBD_SET_SIZE:
+ 		return nbd_set_size(nbd, arg, config->blksize);
+ 	case NBD_SET_SIZE_BLOCKS:
+ 		return nbd_set_size(nbd, arg * config->blksize,
+ 				    config->blksize);
++>>>>>>> dcbddf541f18 (nbd: validate the block size in nbd_set_size)
  	case NBD_SET_TIMEOUT:
  		nbd_set_cmd_timeout(nbd, arg);
  		return 0;
@@@ -1827,18 -1799,11 +1855,15 @@@ static int nbd_genl_size_set(struct gen
  	if (info->attrs[NBD_ATTR_SIZE_BYTES])
  		bytes = nla_get_u64(info->attrs[NBD_ATTR_SIZE_BYTES]);
  
- 	if (info->attrs[NBD_ATTR_BLOCK_SIZE_BYTES]) {
+ 	if (info->attrs[NBD_ATTR_BLOCK_SIZE_BYTES])
  		bsize = nla_get_u64(info->attrs[NBD_ATTR_BLOCK_SIZE_BYTES]);
- 		if (!bsize)
- 			bsize = NBD_DEF_BLKSIZE;
- 		if (!nbd_is_valid_blksize(bsize)) {
- 			printk(KERN_ERR "Invalid block size %llu\n", bsize);
- 			return -EINVAL;
- 		}
- 	}
  
  	if (bytes != config->bytesize || bsize != config->blksize)
++<<<<<<< HEAD
 +		nbd_size_set(nbd, bsize, div64_u64(bytes, bsize));
++=======
+ 		return nbd_set_size(nbd, bytes, bsize);
++>>>>>>> dcbddf541f18 (nbd: validate the block size in nbd_set_size)
  	return 0;
  }
  
* Unmerged path drivers/block/nbd.c
