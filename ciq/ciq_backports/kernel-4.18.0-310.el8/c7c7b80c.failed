mm/swap.c: fold vm event PGROTATED into pagevec_move_tail_fn

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Alex Shi <alex.shi@linux.alibaba.com>
commit c7c7b80c39a18d99a0a34534ed8b82e020da6131
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/c7c7b80c.failed

Fold the PGROTATED event collection into pagevec_move_tail_fn call back
func like other funcs does in pagevec_lru_move_fn.  Thus we could save
func call pagevec_move_tail().  Now all usage of pagevec_lru_move_fn are
same and no needs of its 3rd parameter.

It's just simply the calling. No functional change.

[lkp@intel.com: found a build issue in the original patch, thanks]

Link: https://lkml.kernel.org/r/1604566549-62481-10-git-send-email-alex.shi@linux.alibaba.com
	Signed-off-by: Alex Shi <alex.shi@linux.alibaba.com>
	Acked-by: Hugh Dickins <hughd@google.com>
	Acked-by: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Alexander Duyck <alexander.duyck@gmail.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: "Chen, Rong A" <rong.a.chen@intel.com>
	Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
	Cc: "Huang, Ying" <ying.huang@intel.com>
	Cc: Jann Horn <jannh@google.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Kirill A. Shutemov <kirill@shutemov.name>
	Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
	Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Mika Penttil√§ <mika.penttila@nextfour.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Shakeel Butt <shakeelb@google.com>
	Cc: Tejun Heo <tj@kernel.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Wei Yang <richard.weiyang@gmail.com>
	Cc: Yang Shi <yang.shi@linux.alibaba.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c7c7b80c39a18d99a0a34534ed8b82e020da6131)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swap.c
diff --cc mm/swap.c
index cb800c9dc782,b4ca5b965838..000000000000
--- a/mm/swap.c
+++ b/mm/swap.c
@@@ -917,41 -959,7 +899,45 @@@ void __pagevec_release(struct pagevec *
  }
  EXPORT_SYMBOL(__pagevec_release);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_TRANSPARENT_HUGEPAGE
 +/* used by __split_huge_page_refcount() */
 +void lru_add_page_tail(struct page *page, struct page *page_tail,
 +		       struct lruvec *lruvec, struct list_head *list)
 +{
 +	VM_BUG_ON_PAGE(!PageHead(page), page);
 +	VM_BUG_ON_PAGE(PageCompound(page_tail), page);
 +	VM_BUG_ON_PAGE(PageLRU(page_tail), page);
 +	lockdep_assert_held(&lruvec_pgdat(lruvec)->lru_lock);
 +
 +	if (!list)
 +		SetPageLRU(page_tail);
 +
 +	if (likely(PageLRU(page)))
 +		list_add_tail(&page_tail->lru, &page->lru);
 +	else if (list) {
 +		/* page reclaim is reclaiming a huge page */
 +		get_page(page_tail);
 +		list_add_tail(&page_tail->lru, list);
 +	} else {
 +		/*
 +		 * Head page has not yet been counted, as an hpage,
 +		 * so we must account for each subpage individually.
 +		 *
 +		 * Put page_tail on the list at the correct position
 +		 * so they all end up in order.
 +		 */
 +		add_page_to_lru_list_tail(page_tail, lruvec,
 +					  page_lru(page_tail));
 +	}
 +}
 +#endif /* CONFIG_TRANSPARENT_HUGEPAGE */
 +
 +static void __pagevec_lru_add_fn(struct page *page, struct lruvec *lruvec,
 +				 void *arg)
++=======
+ static void __pagevec_lru_add_fn(struct page *page, struct lruvec *lruvec)
++>>>>>>> c7c7b80c39a1 (mm/swap.c: fold vm event PGROTATED into pagevec_move_tail_fn)
  {
  	enum lru_list lru;
  	int was_unevictable = TestClearPageUnevictable(page);
* Unmerged path mm/swap.c
