dm table: remove needless request_queue NULL pointer checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Jeffle Xu <jefflexu@linux.alibaba.com>
commit cccb493cdae76a51e1258c0738e2b43869655d39
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/cccb493c.failed

Since commit ff9ea323816d ("block, bdi: an active gendisk always has a
request_queue associated with it") the request_queue pointer returned
from bdev_get_queue() shall never be NULL.

	Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit cccb493cdae76a51e1258c0738e2b43869655d39)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-table.c
diff --cc drivers/md/dm-table.c
index 27df037ce2ef,2bc256d61550..000000000000
--- a/drivers/md/dm-table.c
+++ b/drivers/md/dm-table.c
@@@ -1387,7 -1377,7 +1387,11 @@@ static int device_is_zoned_model(struc
  	struct request_queue *q = bdev_get_queue(dev->bdev);
  	enum blk_zoned_model *zoned_model = data;
  
++<<<<<<< HEAD
 +	return q && blk_queue_zoned_model(q) == *zoned_model;
++=======
+ 	return blk_queue_zoned_model(q) != *zoned_model;
++>>>>>>> cccb493cdae7 (dm table: remove needless request_queue NULL pointer checks)
  }
  
  static bool dm_table_supports_zoned_model(struct dm_table *t,
@@@ -1417,24 -1407,7 +1421,28 @@@ static int device_matches_zone_sectors(
  	struct request_queue *q = bdev_get_queue(dev->bdev);
  	unsigned int *zone_sectors = data;
  
++<<<<<<< HEAD
 +	return q && blk_queue_zone_sectors(q) == *zone_sectors;
 +}
 +
 +static bool dm_table_matches_zone_sectors(struct dm_table *t,
 +					  unsigned int zone_sectors)
 +{
 +	struct dm_target *ti;
 +	unsigned i;
 +
 +	for (i = 0; i < dm_table_get_num_targets(t); i++) {
 +		ti = dm_table_get_target(t, i);
 +
 +		if (!ti->type->iterate_devices ||
 +		    !ti->type->iterate_devices(ti, device_matches_zone_sectors, &zone_sectors))
 +			return false;
 +	}
 +
 +	return true;
++=======
+ 	return blk_queue_zone_sectors(q) != *zone_sectors;
++>>>>>>> cccb493cdae7 (dm table: remove needless request_queue NULL pointer checks)
  }
  
  static int validate_hardware_zoned_model(struct dm_table *table,
@@@ -1808,7 -1765,7 +1816,11 @@@ static int device_requires_stable_pages
  {
  	struct request_queue *q = bdev_get_queue(dev->bdev);
  
++<<<<<<< HEAD
 +	return q && bdi_cap_stable_pages_required(q->backing_dev_info);
++=======
+ 	return blk_queue_stable_writes(q);
++>>>>>>> cccb493cdae7 (dm table: remove needless request_queue NULL pointer checks)
  }
  
  void dm_table_set_restrictions(struct dm_table *t, struct request_queue *q,
* Unmerged path drivers/md/dm-table.c
