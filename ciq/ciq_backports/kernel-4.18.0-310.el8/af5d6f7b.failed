nvme-core: remove extra variable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
commit af5d6f7ba5f99f8316473557240ae9acdd20a6bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/af5d6f7b.failed

In nvme_validate_ns() the exra variable ctrl is used only twice.
Using ns->ctrl directly still maintains the redability and original
length of the lines in the code. Get rid of the extra variable ctrl &
use ns->ctrl directly.

	Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit af5d6f7ba5f99f8316473557240ae9acdd20a6bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 61e952b9cd65,2e505cdf051e..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -4022,17 -3926,75 +4022,56 @@@ static void nvme_ns_remove_by_nsid(stru
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void nvme_validate_ns(struct nvme_ns *ns, struct nvme_ns_ids *ids)
+ {
+ 	struct nvme_id_ns *id;
+ 	int ret = -ENODEV;
+ 
+ 	if (test_bit(NVME_NS_DEAD, &ns->flags))
+ 		goto out;
+ 
+ 	ret = nvme_identify_ns(ns->ctrl, ns->head->ns_id, ids, &id);
+ 	if (ret)
+ 		goto out;
+ 
+ 	ret = -ENODEV;
+ 	if (!nvme_ns_ids_equal(&ns->head->ids, ids)) {
+ 		dev_err(ns->ctrl->device,
+ 			"identifiers changed for nsid %d\n", ns->head->ns_id);
+ 		goto out_free_id;
+ 	}
+ 
+ 	ret = nvme_update_ns_info(ns, id);
+ 
+ out_free_id:
+ 	kfree(id);
+ out:
+ 	/*
+ 	 * Only remove the namespace if we got a fatal error back from the
+ 	 * device, otherwise ignore the error and just move on.
+ 	 *
+ 	 * TODO: we should probably schedule a delayed retry here.
+ 	 */
+ 	if (ret && ret != -ENOMEM && !(ret > 0 && !(ret & NVME_SC_DNR)))
+ 		nvme_ns_remove(ns);
+ 	else
+ 		revalidate_disk_size(ns->disk, true);
+ }
+ 
++>>>>>>> af5d6f7ba5f9 (nvme-core: remove extra variable)
  static void nvme_validate_or_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid)
  {
 -	struct nvme_ns_ids ids = { };
  	struct nvme_ns *ns;
  
 -	if (nvme_identify_ns_descs(ctrl, nsid, &ids))
 -		return;
 -
  	ns = nvme_find_get_ns(ctrl, nsid);
  	if (ns) {
 -		nvme_validate_ns(ns, &ids);
 +		if (revalidate_disk(ns->disk))
 +			nvme_ns_remove(ns);
  		nvme_put_ns(ns);
 -		return;
 -	}
 -
 -	switch (ids.csi) {
 -	case NVME_CSI_NVM:
 -		nvme_alloc_ns(ctrl, nsid, &ids);
 -		break;
 -	case NVME_CSI_ZNS:
 -		if (!IS_ENABLED(CONFIG_BLK_DEV_ZONED)) {
 -			dev_warn(ctrl->device,
 -				"nsid %u not supported without CONFIG_BLK_DEV_ZONED\n",
 -				nsid);
 -			break;
 -		}
 -		nvme_alloc_ns(ctrl, nsid, &ids);
 -		break;
 -	default:
 -		dev_warn(ctrl->device, "unknown csi %u for nsid %u\n",
 -			ids.csi, nsid);
 -		break;
 -	}
 +	} else
 +		nvme_alloc_ns(ctrl, nsid);
  }
  
  static void nvme_remove_invalid_namespaces(struct nvme_ctrl *ctrl,
* Unmerged path drivers/nvme/host/core.c
