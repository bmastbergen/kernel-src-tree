mm: and drivers core: Convert hugetlb_report_node_meminfo to sysfs_emit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Joe Perches <joe@perches.com>
commit 7981593bf083801035b1f1377661849805acb216
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/7981593b.failed

Convert the unbound sprintf in hugetlb_report_node_meminfo to use
sysfs_emit_at so that no possible overrun of a PAGE_SIZE buf can occur.

	Signed-off-by: Joe Perches <joe@perches.com>
	Acked-by: Mike Kravetz <mike.kravetz@oracle.com>
Link: https://lore.kernel.org/r/894b351b82da6013cde7f36ff4b5493cd0ec30d0.1600285923.git.joe@perches.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 7981593bf083801035b1f1377661849805acb216)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/node.c
diff --cc drivers/base/node.c
index 8633d5d90a7d,6366f94f8afb..000000000000
--- a/drivers/base/node.c
+++ b/drivers/base/node.c
@@@ -369,99 -376,105 +369,105 @@@ static ssize_t node_read_meminfo(struc
  	si_meminfo_node(&i, nid);
  	sreclaimable = node_page_state_pages(pgdat, NR_SLAB_RECLAIMABLE_B);
  	sunreclaimable = node_page_state_pages(pgdat, NR_SLAB_UNRECLAIMABLE_B);
 -	len = sysfs_emit_at(buf, len,
 -			    "Node %d MemTotal:       %8lu kB\n"
 -			    "Node %d MemFree:        %8lu kB\n"
 -			    "Node %d MemUsed:        %8lu kB\n"
 -			    "Node %d Active:         %8lu kB\n"
 -			    "Node %d Inactive:       %8lu kB\n"
 -			    "Node %d Active(anon):   %8lu kB\n"
 -			    "Node %d Inactive(anon): %8lu kB\n"
 -			    "Node %d Active(file):   %8lu kB\n"
 -			    "Node %d Inactive(file): %8lu kB\n"
 -			    "Node %d Unevictable:    %8lu kB\n"
 -			    "Node %d Mlocked:        %8lu kB\n",
 -			    nid, K(i.totalram),
 -			    nid, K(i.freeram),
 -			    nid, K(i.totalram - i.freeram),
 -			    nid, K(node_page_state(pgdat, NR_ACTIVE_ANON) +
 -				   node_page_state(pgdat, NR_ACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_INACTIVE_ANON) +
 -				   node_page_state(pgdat, NR_INACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_ACTIVE_ANON)),
 -			    nid, K(node_page_state(pgdat, NR_INACTIVE_ANON)),
 -			    nid, K(node_page_state(pgdat, NR_ACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_INACTIVE_FILE)),
 -			    nid, K(node_page_state(pgdat, NR_UNEVICTABLE)),
 -			    nid, K(sum_zone_node_page_state(nid, NR_MLOCK)));
 +	n = sprintf(buf,
 +		       "Node %d MemTotal:       %8lu kB\n"
 +		       "Node %d MemFree:        %8lu kB\n"
 +		       "Node %d MemUsed:        %8lu kB\n"
 +		       "Node %d Active:         %8lu kB\n"
 +		       "Node %d Inactive:       %8lu kB\n"
 +		       "Node %d Active(anon):   %8lu kB\n"
 +		       "Node %d Inactive(anon): %8lu kB\n"
 +		       "Node %d Active(file):   %8lu kB\n"
 +		       "Node %d Inactive(file): %8lu kB\n"
 +		       "Node %d Unevictable:    %8lu kB\n"
 +		       "Node %d Mlocked:        %8lu kB\n",
 +		       nid, K(i.totalram),
 +		       nid, K(i.freeram),
 +		       nid, K(i.totalram - i.freeram),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_ANON) +
 +				node_page_state(pgdat, NR_ACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_ANON) +
 +				node_page_state(pgdat, NR_INACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_ANON)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_ANON)),
 +		       nid, K(node_page_state(pgdat, NR_ACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_INACTIVE_FILE)),
 +		       nid, K(node_page_state(pgdat, NR_UNEVICTABLE)),
 +		       nid, K(sum_zone_node_page_state(nid, NR_MLOCK)));
  
  #ifdef CONFIG_HIGHMEM
 -	len += sysfs_emit_at(buf, len,
 -			     "Node %d HighTotal:      %8lu kB\n"
 -			     "Node %d HighFree:       %8lu kB\n"
 -			     "Node %d LowTotal:       %8lu kB\n"
 -			     "Node %d LowFree:        %8lu kB\n",
 -			     nid, K(i.totalhigh),
 -			     nid, K(i.freehigh),
 -			     nid, K(i.totalram - i.totalhigh),
 -			     nid, K(i.freeram - i.freehigh));
 -#endif
 -	len += sysfs_emit_at(buf, len,
 -			     "Node %d Dirty:          %8lu kB\n"
 -			     "Node %d Writeback:      %8lu kB\n"
 -			     "Node %d FilePages:      %8lu kB\n"
 -			     "Node %d Mapped:         %8lu kB\n"
 -			     "Node %d AnonPages:      %8lu kB\n"
 -			     "Node %d Shmem:          %8lu kB\n"
 -			     "Node %d KernelStack:    %8lu kB\n"
 -#ifdef CONFIG_SHADOW_CALL_STACK
 -			     "Node %d ShadowCallStack:%8lu kB\n"
 +	n += sprintf(buf + n,
 +		       "Node %d HighTotal:      %8lu kB\n"
 +		       "Node %d HighFree:       %8lu kB\n"
 +		       "Node %d LowTotal:       %8lu kB\n"
 +		       "Node %d LowFree:        %8lu kB\n",
 +		       nid, K(i.totalhigh),
 +		       nid, K(i.freehigh),
 +		       nid, K(i.totalram - i.totalhigh),
 +		       nid, K(i.freeram - i.freehigh));
  #endif
 -			     "Node %d PageTables:     %8lu kB\n"
 -			     "Node %d NFS_Unstable:   %8lu kB\n"
 -			     "Node %d Bounce:         %8lu kB\n"
 -			     "Node %d WritebackTmp:   %8lu kB\n"
 -			     "Node %d KReclaimable:   %8lu kB\n"
 -			     "Node %d Slab:           %8lu kB\n"
 -			     "Node %d SReclaimable:   %8lu kB\n"
 -			     "Node %d SUnreclaim:     %8lu kB\n"
 +	n += sprintf(buf + n,
 +		       "Node %d Dirty:          %8lu kB\n"
 +		       "Node %d Writeback:      %8lu kB\n"
 +		       "Node %d FilePages:      %8lu kB\n"
 +		       "Node %d Mapped:         %8lu kB\n"
 +		       "Node %d AnonPages:      %8lu kB\n"
 +		       "Node %d Shmem:          %8lu kB\n"
 +		       "Node %d KernelStack:    %8lu kB\n"
 +		       "Node %d PageTables:     %8lu kB\n"
 +		       "Node %d NFS_Unstable:   %8lu kB\n"
 +		       "Node %d Bounce:         %8lu kB\n"
 +		       "Node %d WritebackTmp:   %8lu kB\n"
 +		       "Node %d KReclaimable:   %8lu kB\n"
 +		       "Node %d Slab:           %8lu kB\n"
 +		       "Node %d SReclaimable:   %8lu kB\n"
 +		       "Node %d SUnreclaim:     %8lu kB\n"
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
 -			     "Node %d AnonHugePages:  %8lu kB\n"
 -			     "Node %d ShmemHugePages: %8lu kB\n"
 -			     "Node %d ShmemPmdMapped: %8lu kB\n"
 -			     "Node %d FileHugePages: %8lu kB\n"
 -			     "Node %d FilePmdMapped: %8lu kB\n"
 +		       "Node %d AnonHugePages:  %8lu kB\n"
 +		       "Node %d ShmemHugePages: %8lu kB\n"
 +		       "Node %d ShmemPmdMapped: %8lu kB\n"
 +		       "Node %d FileHugePages: %8lu kB\n"
 +		       "Node %d FilePmdMapped: %8lu kB\n"
  #endif
 -			     ,
 -			     nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),
 -			     nid, K(node_page_state(pgdat, NR_WRITEBACK)),
 -			     nid, K(node_page_state(pgdat, NR_FILE_PAGES)),
 -			     nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),
 -			     nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),
 -			     nid, K(i.sharedram),
 -			     nid, node_page_state(pgdat, NR_KERNEL_STACK_KB),
 -#ifdef CONFIG_SHADOW_CALL_STACK
 -			     nid, node_page_state(pgdat, NR_KERNEL_SCS_KB),
 -#endif
 -			     nid, K(sum_zone_node_page_state(nid, NR_PAGETABLE)),
 -			     nid, 0UL,
 -			     nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),
 -			     nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),
 -			     nid, K(sreclaimable +
 -				    node_page_state(pgdat, NR_KERNEL_MISC_RECLAIMABLE)),
 -			     nid, K(sreclaimable + sunreclaimable),
 -			     nid, K(sreclaimable),
 -			     nid, K(sunreclaimable)
 +			,
 +		       nid, K(node_page_state(pgdat, NR_FILE_DIRTY)),
 +		       nid, K(node_page_state(pgdat, NR_WRITEBACK)),
 +		       nid, K(node_page_state(pgdat, NR_FILE_PAGES)),
 +		       nid, K(node_page_state(pgdat, NR_FILE_MAPPED)),
 +		       nid, K(node_page_state(pgdat, NR_ANON_MAPPED)),
 +		       nid, K(i.sharedram),
 +		       nid, sum_zone_node_page_state(nid, NR_KERNEL_STACK_KB),
 +		       nid, K(sum_zone_node_page_state(nid, NR_PAGETABLE)),
 +		       nid, 0UL,
 +		       nid, K(sum_zone_node_page_state(nid, NR_BOUNCE)),
 +		       nid, K(node_page_state(pgdat, NR_WRITEBACK_TEMP)),
 +		       nid, K(sreclaimable +
 +			      node_page_state(pgdat, NR_KERNEL_MISC_RECLAIMABLE)),
 +		       nid, K(sreclaimable + sunreclaimable),
 +		       nid, K(sreclaimable),
 +		       nid, K(sunreclaimable)
  #ifdef CONFIG_TRANSPARENT_HUGEPAGE
 -			     ,
 -			     nid, K(node_page_state(pgdat, NR_ANON_THPS) *
 -				    HPAGE_PMD_NR),
 -			     nid, K(node_page_state(pgdat, NR_SHMEM_THPS) *
 -				    HPAGE_PMD_NR),
 -			     nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *
 -				    HPAGE_PMD_NR),
 -			     nid, K(node_page_state(pgdat, NR_FILE_THPS) *
 -				    HPAGE_PMD_NR),
 -			     nid, K(node_page_state(pgdat, NR_FILE_PMDMAPPED) *
 -				    HPAGE_PMD_NR)
 +		       ,
 +		       nid, K(node_page_state(pgdat, NR_ANON_THPS) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_SHMEM_THPS) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_SHMEM_PMDMAPPED) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_FILE_THPS) *
 +				       HPAGE_PMD_NR),
 +		       nid, K(node_page_state(pgdat, NR_FILE_PMDMAPPED) *
 +				       HPAGE_PMD_NR)
  #endif
++<<<<<<< HEAD
 +		       );
 +	n += hugetlb_report_node_meminfo(nid, buf + n);
 +	return n;
++=======
+ 			    );
+ 	len += hugetlb_report_node_meminfo(buf, len, nid);
+ 	return len;
++>>>>>>> 7981593bf083 (mm: and drivers core: Convert hugetlb_report_node_meminfo to sysfs_emit)
  }
  
  #undef K
* Unmerged path drivers/base/node.c
diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h
index cd86e23fcb9f..9cc3cf163bc8 100644
--- a/include/linux/hugetlb.h
+++ b/include/linux/hugetlb.h
@@ -84,7 +84,7 @@ void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,
 				unsigned long start, unsigned long end,
 				struct page *ref_page);
 void hugetlb_report_meminfo(struct seq_file *);
-int hugetlb_report_node_meminfo(int, char *);
+int hugetlb_report_node_meminfo(char *buf, int len, int nid);
 void hugetlb_show_meminfo(void);
 unsigned long hugetlb_total_pages(void);
 vm_fault_t hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,
@@ -190,7 +190,7 @@ static inline void hugetlb_report_meminfo(struct seq_file *m)
 {
 }
 
-static inline int hugetlb_report_node_meminfo(int nid, char *buf)
+static inline int hugetlb_report_node_meminfo(char *buf, int len, int nid)
 {
 	return 0;
 }
diff --git a/mm/hugetlb.c b/mm/hugetlb.c
index 5899c1f83920..82e683ae0454 100644
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -3265,18 +3265,20 @@ void hugetlb_report_meminfo(struct seq_file *m)
 	seq_printf(m, "Hugetlb:        %8lu kB\n", total / 1024);
 }
 
-int hugetlb_report_node_meminfo(int nid, char *buf)
+int hugetlb_report_node_meminfo(char *buf, int len, int nid)
 {
 	struct hstate *h = &default_hstate;
+
 	if (!hugepages_supported())
 		return 0;
-	return sprintf(buf,
-		"Node %d HugePages_Total: %5u\n"
-		"Node %d HugePages_Free:  %5u\n"
-		"Node %d HugePages_Surp:  %5u\n",
-		nid, h->nr_huge_pages_node[nid],
-		nid, h->free_huge_pages_node[nid],
-		nid, h->surplus_huge_pages_node[nid]);
+
+	return sysfs_emit_at(buf, len,
+			     "Node %d HugePages_Total: %5u\n"
+			     "Node %d HugePages_Free:  %5u\n"
+			     "Node %d HugePages_Surp:  %5u\n",
+			     nid, h->nr_huge_pages_node[nid],
+			     nid, h->free_huge_pages_node[nid],
+			     nid, h->surplus_huge_pages_node[nid]);
 }
 
 void hugetlb_show_meminfo(void)
