nvme: allow revalidate to set a namespace read-only

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Christoph Hellwig <hch@lst.de>
commit d11cd28998e9d25389d8c20e7cce0e4b4f17bee1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/d11cd289.failed

Unconditionally call set_disk_ro now that it only updates the hardware
state.  This allows to properly set up the Linux devices read-only when
the controller turns a previously writable namespace read-only.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit d11cd28998e9d25389d8c20e7cce0e4b4f17bee1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 034e74d36e10,566788ba4e7d..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -2113,12 -2125,8 +2113,17 @@@ static void nvme_update_disk_info(struc
  	nvme_config_discard(disk, ns);
  	nvme_config_write_zeroes(disk, ns);
  
++<<<<<<< HEAD
 +	if (id->nsattr & NVME_NS_ATTR_RO)
 +		set_disk_ro(disk, true);
 +	else
 +		set_disk_ro(disk, false);
 +
 +	blk_mq_unfreeze_queue(disk->queue);
++=======
+ 	set_disk_ro(disk, (id->nsattr & NVME_NS_ATTR_RO) ||
+ 		test_bit(NVME_NS_FORCE_RO, &ns->flags));
++>>>>>>> d11cd28998e9 (nvme: allow revalidate to set a namespace read-only)
  }
  
  static inline bool nvme_first_scan(struct gendisk *disk)
* Unmerged path drivers/nvme/host/core.c
