sysfs: Add sysfs_emit and sysfs_emit_at to format sysfs output

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Joe Perches <joe@perches.com>
commit 2efc459d06f1630001e3984854848a5647086232
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/2efc459d.failed

Output defects can exist in sysfs content using sprintf and snprintf.

sprintf does not know the PAGE_SIZE maximum of the temporary buffer
used for outputting sysfs content and it's possible to overrun the
PAGE_SIZE buffer length.

Add a generic sysfs_emit function that knows that the size of the
temporary buffer and ensures that no overrun is done.

Add a generic sysfs_emit_at function that can be used in multiple
call situations that also ensures that no overrun is done.

Validate the output buffer argument to be page aligned.
Validate the offset len argument to be within the PAGE_SIZE buf.

	Signed-off-by: Joe Perches <joe@perches.com>
Link: https://lore.kernel.org/r/884235202216d464d61ee975f7465332c86f76b2.1600285923.git.joe@perches.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2efc459d06f1630001e3984854848a5647086232)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/file.c
#	include/linux/sysfs.h
diff --cc fs/sysfs/file.c
index 0b432666bf49,96d0da65e088..000000000000
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@@ -15,9 -15,9 +15,10 @@@
  #include <linux/list.h>
  #include <linux/mutex.h>
  #include <linux/seq_file.h>
+ #include <linux/mm.h>
  
  #include "sysfs.h"
 +#include "../kernfs/kernfs-internal.h"
  
  /*
   * Determine ktype->sysfs_ops for the given kernfs_node.  This function
@@@ -636,3 -648,117 +637,120 @@@ int sysfs_file_change_owner(struct kobj
  	return error;
  }
  EXPORT_SYMBOL_GPL(sysfs_file_change_owner);
++<<<<<<< HEAD
++=======
+ 
+ /**
+  *	sysfs_change_owner - change owner of the given object.
+  *	@kobj:	object.
+  *	@kuid:	new owner's kuid
+  *	@kgid:	new owner's kgid
+  *
+  * Change the owner of the default directory, files, groups, and attributes of
+  * @kobj to @kuid/@kgid. Note that sysfs_change_owner mirrors how the sysfs
+  * entries for a kobject are added by driver core. In summary,
+  * sysfs_change_owner() takes care of the default directory entry for @kobj,
+  * the default attributes associated with the ktype of @kobj and the default
+  * attributes associated with the ktype of @kobj.
+  * Additional properties not added by driver core have to be changed by the
+  * driver or subsystem which created them. This is similar to how
+  * driver/subsystem specific entries are removed.
+  *
+  * Returns 0 on success or error code on failure.
+  */
+ int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid)
+ {
+ 	int error;
+ 	const struct kobj_type *ktype;
+ 
+ 	if (!kobj->state_in_sysfs)
+ 		return -EINVAL;
+ 
+ 	/* Change the owner of the kobject itself. */
+ 	error = internal_change_owner(kobj->sd, kuid, kgid);
+ 	if (error)
+ 		return error;
+ 
+ 	ktype = get_ktype(kobj);
+ 	if (ktype) {
+ 		struct attribute **kattr;
+ 
+ 		/*
+ 		 * Change owner of the default attributes associated with the
+ 		 * ktype of @kobj.
+ 		 */
+ 		for (kattr = ktype->default_attrs; kattr && *kattr; kattr++) {
+ 			error = sysfs_file_change_owner(kobj, (*kattr)->name,
+ 							kuid, kgid);
+ 			if (error)
+ 				return error;
+ 		}
+ 
+ 		/*
+ 		 * Change owner of the default groups associated with the
+ 		 * ktype of @kobj.
+ 		 */
+ 		error = sysfs_groups_change_owner(kobj, ktype->default_groups,
+ 						  kuid, kgid);
+ 		if (error)
+ 			return error;
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(sysfs_change_owner);
+ 
+ /**
+  *	sysfs_emit - scnprintf equivalent, aware of PAGE_SIZE buffer.
+  *	@buf:	start of PAGE_SIZE buffer.
+  *	@fmt:	format
+  *	@...:	optional arguments to @format
+  *
+  *
+  * Returns number of characters written to @buf.
+  */
+ int sysfs_emit(char *buf, const char *fmt, ...)
+ {
+ 	va_list args;
+ 	int len;
+ 
+ 	if (WARN(!buf || offset_in_page(buf),
+ 		 "invalid sysfs_emit: buf:%p\n", buf))
+ 		return 0;
+ 
+ 	va_start(args, fmt);
+ 	len = vscnprintf(buf, PAGE_SIZE, fmt, args);
+ 	va_end(args);
+ 
+ 	return len;
+ }
+ EXPORT_SYMBOL_GPL(sysfs_emit);
+ 
+ /**
+  *	sysfs_emit_at - scnprintf equivalent, aware of PAGE_SIZE buffer.
+  *	@buf:	start of PAGE_SIZE buffer.
+  *	@at:	offset in @buf to start write in bytes
+  *		@at must be >= 0 && < PAGE_SIZE
+  *	@fmt:	format
+  *	@...:	optional arguments to @fmt
+  *
+  *
+  * Returns number of characters written starting at &@buf[@at].
+  */
+ int sysfs_emit_at(char *buf, int at, const char *fmt, ...)
+ {
+ 	va_list args;
+ 	int len;
+ 
+ 	if (WARN(!buf || offset_in_page(buf) || at < 0 || at >= PAGE_SIZE,
+ 		 "invalid sysfs_emit_at: buf:%p at:%d\n", buf, at))
+ 		return 0;
+ 
+ 	va_start(args, fmt);
+ 	len = vscnprintf(buf + at, PAGE_SIZE - at, fmt, args);
+ 	va_end(args);
+ 
+ 	return len;
+ }
+ EXPORT_SYMBOL_GPL(sysfs_emit_at);
++>>>>>>> 2efc459d06f1 (sysfs: Add sysfs_emit and sysfs_emit_at to format sysfs output)
diff --cc include/linux/sysfs.h
index 4cf71d5eb0b3,2caa34c1ca1a..000000000000
--- a/include/linux/sysfs.h
+++ b/include/linux/sysfs.h
@@@ -323,8 -320,19 +323,21 @@@ static inline void sysfs_enable_ns(stru
  
  int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
  			    kgid_t kgid);
 -int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
  int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
  			    const char *name, kuid_t kuid, kgid_t kgid);
++<<<<<<< HEAD
++=======
+ int sysfs_groups_change_owner(struct kobject *kobj,
+ 			      const struct attribute_group **groups,
+ 			      kuid_t kuid, kgid_t kgid);
+ int sysfs_group_change_owner(struct kobject *kobj,
+ 			     const struct attribute_group *groups, kuid_t kuid,
+ 			     kgid_t kgid);
+ __printf(2, 3)
+ int sysfs_emit(char *buf, const char *fmt, ...);
+ __printf(3, 4)
+ int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
++>>>>>>> 2efc459d06f1 (sysfs: Add sysfs_emit and sysfs_emit_at to format sysfs output)
  
  #else /* CONFIG_SYSFS */
  
@@@ -561,6 -561,36 +574,39 @@@ static inline int sysfs_link_change_own
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static inline int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid)
+ {
+ 	return 0;
+ }
+ 
+ static inline int sysfs_groups_change_owner(struct kobject *kobj,
+ 			  const struct attribute_group **groups,
+ 			  kuid_t kuid, kgid_t kgid)
+ {
+ 	return 0;
+ }
+ 
+ static inline int sysfs_group_change_owner(struct kobject *kobj,
+ 					   const struct attribute_group *groups,
+ 					   kuid_t kuid, kgid_t kgid)
+ {
+ 	return 0;
+ }
+ 
+ __printf(2, 3)
+ static inline int sysfs_emit(char *buf, const char *fmt, ...)
+ {
+ 	return 0;
+ }
+ 
+ __printf(3, 4)
+ static inline int sysfs_emit_at(char *buf, int at, const char *fmt, ...)
+ {
+ 	return 0;
+ }
++>>>>>>> 2efc459d06f1 (sysfs: Add sysfs_emit and sysfs_emit_at to format sysfs output)
  #endif /* CONFIG_SYSFS */
  
  static inline int __must_check sysfs_create_file(struct kobject *kobj,
diff --git a/Documentation/filesystems/sysfs.txt b/Documentation/filesystems/sysfs.txt
index a1426cabcef1..2e38fafc1b63 100644
--- a/Documentation/filesystems/sysfs.txt
+++ b/Documentation/filesystems/sysfs.txt
@@ -211,12 +211,10 @@ Other notes:
   is 4096. 
 
 - show() methods should return the number of bytes printed into the
-  buffer. This is the return value of scnprintf().
+  buffer.
 
-- show() must not use snprintf() when formatting the value to be
-  returned to user space. If you can guarantee that an overflow
-  will never happen you can use sprintf() otherwise you must use
-  scnprintf().
+- show() should only use sysfs_emit() or sysfs_emit_at() when formatting
+  the value to be returned to user space.
 
 - store() should return the number of bytes used from the buffer. If the
   entire buffer has been used, just return the count argument.
* Unmerged path fs/sysfs/file.c
* Unmerged path include/linux/sysfs.h
