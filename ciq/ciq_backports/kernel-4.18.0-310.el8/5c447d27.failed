mm: fix numa stats for thp migration

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-310.el8
commit-author Shakeel Butt <shakeelb@google.com>
commit 5c447d274f3746fbed6e695e7b9a2d7bd8b31b71
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-310.el8/5c447d27.failed

Currently the kernel is not correctly updating the numa stats for
NR_FILE_PAGES and NR_SHMEM on THP migration.  Fix that.

For NR_FILE_DIRTY and NR_ZONE_WRITE_PENDING, although at the moment
there is no need to handle THP migration as kernel still does not have
write support for file THP but to be more future proof, this patch adds
the THP support for those stats as well.

Link: https://lkml.kernel.org/r/20210108155813.2914586-2-shakeelb@google.com
Fixes: e71769ae52609 ("mm: enable thp migration for shmem thp")
	Signed-off-by: Shakeel Butt <shakeelb@google.com>
	Acked-by: Yang Shi <shy828301@gmail.com>
	Reviewed-by: Roman Gushchin <guro@fb.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Muchun Song <songmuchun@bytedance.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5c447d274f3746fbed6e695e7b9a2d7bd8b31b71)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/migrate.c
diff --cc mm/migrate.c
index 357768f2aa73,c0efe921bca5..000000000000
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@@ -494,17 -494,17 +495,25 @@@ int migrate_page_move_mapping(struct ad
  		old_lruvec = mem_cgroup_lruvec(memcg, oldzone->zone_pgdat);
  		new_lruvec = mem_cgroup_lruvec(memcg, newzone->zone_pgdat);
  
- 		__dec_lruvec_state(old_lruvec, NR_FILE_PAGES);
- 		__inc_lruvec_state(new_lruvec, NR_FILE_PAGES);
+ 		__mod_lruvec_state(old_lruvec, NR_FILE_PAGES, -nr);
+ 		__mod_lruvec_state(new_lruvec, NR_FILE_PAGES, nr);
  		if (PageSwapBacked(page) && !PageSwapCache(page)) {
- 			__dec_lruvec_state(old_lruvec, NR_SHMEM);
- 			__inc_lruvec_state(new_lruvec, NR_SHMEM);
+ 			__mod_lruvec_state(old_lruvec, NR_SHMEM, -nr);
+ 			__mod_lruvec_state(new_lruvec, NR_SHMEM, nr);
  		}
++<<<<<<< HEAD
 +		if (dirty && mapping_cap_account_dirty(mapping)) {
 +			__dec_node_state(oldzone->zone_pgdat, NR_FILE_DIRTY);
 +			__dec_zone_state(oldzone, NR_ZONE_WRITE_PENDING);
 +			__inc_node_state(newzone->zone_pgdat, NR_FILE_DIRTY);
 +			__inc_zone_state(newzone, NR_ZONE_WRITE_PENDING);
++=======
+ 		if (dirty && mapping_can_writeback(mapping)) {
+ 			__mod_lruvec_state(old_lruvec, NR_FILE_DIRTY, -nr);
+ 			__mod_zone_page_state(oldzone, NR_ZONE_WRITE_PENDING, -nr);
+ 			__mod_lruvec_state(new_lruvec, NR_FILE_DIRTY, nr);
+ 			__mod_zone_page_state(newzone, NR_ZONE_WRITE_PENDING, nr);
++>>>>>>> 5c447d274f37 (mm: fix numa stats for thp migration)
  		}
  	}
  	local_irq_enable();
* Unmerged path mm/migrate.c
