usb: uas: add support for more quirk flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [usb] uas: add support for more quirk flags (Torez Smith) [1657401]
Rebuild_FUZZ: 93.67%
commit-author Oliver Neukum <oneukum@suse.com>
commit 42d1c6d4a06a77b3ab206a919b9050c3080f3a71
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/42d1c6d4.failed

The hope that UAS devices would be less broken than old style storage
devices has turned out to be unfounded. Make UAS support more of the
quirk flags of the old driver.

	Signed-off-by: Oliver Neukum <oneukum@suse.com>
	Cc: stable <stable@vger.kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 42d1c6d4a06a77b3ab206a919b9050c3080f3a71)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/storage/uas.c
diff --cc drivers/usb/storage/uas.c
index 9f2151ae6180,1f7b401c4d04..000000000000
--- a/drivers/usb/storage/uas.c
+++ b/drivers/usb/storage/uas.c
@@@ -836,7 -836,34 +836,38 @@@ static int uas_slave_configure(struct s
  	if (devinfo->flags & US_FL_BROKEN_FUA)
  		sdev->broken_fua = 1;
  
++<<<<<<< HEAD
 +	scsi_adjust_queue_depth(sdev, MSG_ORDERED_TAG, devinfo->qdepth - 2);
++=======
+ 	/* UAS also needs to support FL_ALWAYS_SYNC */
+ 	if (devinfo->flags & US_FL_ALWAYS_SYNC) {
+ 		sdev->skip_ms_page_3f = 1;
+ 		sdev->skip_ms_page_8 = 1;
+ 		sdev->wce_default_on = 1;
+ 	}
+ 
+ 	/*
+ 	 * Some disks return the total number of blocks in response
+ 	 * to READ CAPACITY rather than the highest block number.
+ 	 * If this device makes that mistake, tell the sd driver.
+ 	 */
+ 	if (devinfo->flags & US_FL_FIX_CAPACITY)
+ 		sdev->fix_capacity = 1;
+ 
+ 	/*
+ 	 * Some devices don't like MODE SENSE with page=0x3f,
+ 	 * which is the command used for checking if a device
+ 	 * is write-protected.  Now that we tell the sd driver
+ 	 * to do a 192-byte transfer with this command the
+ 	 * majority of devices work fine, but a few still can't
+ 	 * handle it.  The sd driver will simply assume those
+ 	 * devices are write-enabled.
+ 	 */
+ 	if (devinfo->flags & US_FL_NO_WP_DETECT)
+ 		sdev->skip_ms_page_3f = 1;
+ 
+ 	scsi_change_queue_depth(sdev, devinfo->qdepth - 2);
++>>>>>>> 42d1c6d4a06a (usb: uas: add support for more quirk flags)
  	return 0;
  }
  
* Unmerged path drivers/usb/storage/uas.c
