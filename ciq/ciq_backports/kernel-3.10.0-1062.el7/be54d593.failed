perf stat: Propagate 'struct target' arg to sort_aggr_thread()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit be54d59325314be9d4d53852cbfbeeaebc3b9239
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/be54d593.failed

Propagate the 'struct target' arg to sort_aggr_thread() so that the
function does not depend on the 'perf stat' command object local
variable 'target' and can be moved out.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20180830063252.23729-41-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit be54d59325314be9d4d53852cbfbeeaebc3b9239)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
diff --cc tools/perf/builtin-stat.c
index 13693124ed08,486b0cf7818d..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1402,13 -1275,25 +1402,27 @@@ static void print_aggr(char *prefix
  	}
  }
  
 -static int cmp_val(const void *a, const void *b)
 +static void print_aggr_thread(struct perf_evsel *counter, char *prefix)
  {
++<<<<<<< HEAD
 +	FILE *output = stat_config.output;
 +	int nthreads = thread_map__nr(counter->threads);
 +	int ncpus = cpu_map__nr(counter->cpus);
 +	int cpu, thread;
++=======
+ 	return ((struct perf_aggr_thread_value *)b)->val -
+ 		((struct perf_aggr_thread_value *)a)->val;
+ }
+ 
+ static struct perf_aggr_thread_value *sort_aggr_thread(
+ 					struct perf_evsel *counter,
+ 					int nthreads, int ncpus,
+ 					int *ret,
+ 					struct target *_target)
+ {
+ 	int cpu, thread, i = 0;
++>>>>>>> be54d5932531 (perf stat: Propagate 'struct target' arg to sort_aggr_thread())
  	double uval;
 -	struct perf_aggr_thread_value *buf;
 -
 -	buf = calloc(nthreads, sizeof(struct perf_aggr_thread_value));
 -	if (!buf)
 -		return NULL;
  
  	for (thread = 0; thread < nthreads; thread++) {
  		u64 ena = 0, run = 0, val = 0;
@@@ -1419,6 -1304,49 +1433,52 @@@
  			run += perf_counts(counter->counts, cpu, thread)->run;
  		}
  
++<<<<<<< HEAD
++=======
+ 		uval = val * counter->scale;
+ 
+ 		/*
+ 		 * Skip value 0 when enabling --per-thread globally,
+ 		 * otherwise too many 0 output.
+ 		 */
+ 		if (uval == 0.0 && target__has_per_thread(_target))
+ 			continue;
+ 
+ 		buf[i].counter = counter;
+ 		buf[i].id = thread;
+ 		buf[i].uval = uval;
+ 		buf[i].val = val;
+ 		buf[i].run = run;
+ 		buf[i].ena = ena;
+ 		i++;
+ 	}
+ 
+ 	qsort(buf, i, sizeof(struct perf_aggr_thread_value), cmp_val);
+ 
+ 	if (ret)
+ 		*ret = i;
+ 
+ 	return buf;
+ }
+ 
+ static void print_aggr_thread(struct perf_stat_config *config,
+ 			      struct target *_target,
+ 			      struct perf_evsel *counter, char *prefix)
+ {
+ 	FILE *output = config->output;
+ 	int nthreads = thread_map__nr(counter->threads);
+ 	int ncpus = cpu_map__nr(counter->cpus);
+ 	int thread, sorted_threads, id;
+ 	struct perf_aggr_thread_value *buf;
+ 
+ 	buf = sort_aggr_thread(counter, nthreads, ncpus, &sorted_threads, _target);
+ 	if (!buf) {
+ 		perror("cannot sort aggr thread");
+ 		return;
+ 	}
+ 
+ 	for (thread = 0; thread < sorted_threads; thread++) {
++>>>>>>> be54d5932531 (perf stat: Propagate 'struct target' arg to sort_aggr_thread())
  		if (prefix)
  			fprintf(output, "%s", prefix);
  
@@@ -1798,7 -1756,7 +1858,11 @@@ perf_evlist__print_counters(struct perf
  		evlist__for_each_entry(evlist, counter) {
  			if (is_duration_time(counter))
  				continue;
++<<<<<<< HEAD
 +			print_aggr_thread(counter, prefix);
++=======
+ 			print_aggr_thread(config, _target, counter, prefix);
++>>>>>>> be54d5932531 (perf stat: Propagate 'struct target' arg to sort_aggr_thread())
  		}
  		break;
  	case AGGR_GLOBAL:
* Unmerged path tools/perf/builtin-stat.c
