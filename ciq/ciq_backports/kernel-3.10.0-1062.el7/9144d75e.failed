include/linux/bitops.h: introduce BITS_PER_TYPE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [kernel] linux/bitops.h: introduce BITS_PER_TYPE (Rob Clark) [1655767]
Rebuild_FUZZ: 90.70%
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit 9144d75e22cad3c89e6b2ccab551db9ee28d250a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9144d75e.failed

net_dim.h has a rather useful extension to BITS_PER_BYTE to compute the
number of bits in a type (BITS_PER_BYTE * sizeof(T)), so promote the macro
to bitops.h, alongside BITS_PER_BYTE, for wider usage.

Link: http://lkml.kernel.org/r/20180706094458.14116-1-chris@chris-wilson.co.uk
	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: Andy Gospodarek <gospo@broadcom.com>
	Cc: David S. Miller <davem@davemloft.net>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9144d75e22cad3c89e6b2ccab551db9ee28d250a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bitops.h
diff --cc include/linux/bitops.h
index d375548e3c03,7ddb1349394d..000000000000
--- a/include/linux/bitops.h
+++ b/include/linux/bitops.h
@@@ -1,28 -1,11 +1,33 @@@
  #ifndef _LINUX_BITOPS_H
  #define _LINUX_BITOPS_H
  #include <asm/types.h>
 -#include <linux/bits.h>
  
++<<<<<<< HEAD
 +#ifdef	__KERNEL__
 +#define BIT(nr)			(1UL << (nr))
 +#define BIT_ULL(nr)		(1ULL << (nr))
 +#define BIT_MASK(nr)		(1UL << ((nr) % BITS_PER_LONG))
 +#define BIT_WORD(nr)		((nr) / BITS_PER_LONG)
 +#define BIT_ULL_MASK(nr)	(1ULL << ((nr) % BITS_PER_LONG_LONG))
 +#define BIT_ULL_WORD(nr)	((nr) / BITS_PER_LONG_LONG)
 +#define BITS_PER_BYTE		8
 +#define BITS_TO_LONGS(nr)	DIV_ROUND_UP(nr, BITS_PER_BYTE * sizeof(long))
 +#endif
 +
 +/*
 + * Create a contiguous bitmask starting at bit position @l and ending at
 + * position @h. For example
 + * GENMASK_ULL(39, 21) gives us the 64bit vector 0x000000ffffe00000.
 + */
 +#define GENMASK(h, l) \
 +	(((~0UL) << (l)) & (~0UL >> (BITS_PER_LONG - 1 - (h))))
 +
 +#define GENMASK_ULL(h, l) \
 +	(((~0ULL) << (l)) & (~0ULL >> (BITS_PER_LONG_LONG - 1 - (h))))
++=======
+ #define BITS_PER_TYPE(type) (sizeof(type) * BITS_PER_BYTE)
+ #define BITS_TO_LONGS(nr)	DIV_ROUND_UP(nr, BITS_PER_TYPE(long))
++>>>>>>> 9144d75e22ca (include/linux/bitops.h: introduce BITS_PER_TYPE)
  
  extern unsigned int __sw_hweight8(unsigned int w);
  extern unsigned int __sw_hweight16(unsigned int w);
* Unmerged path include/linux/bitops.h
diff --git a/include/linux/net_dim.h b/include/linux/net_dim.h
index 761fdf79ecbe..fd458389f7d1 100644
--- a/include/linux/net_dim.h
+++ b/include/linux/net_dim.h
@@ -363,7 +363,6 @@ static inline void net_dim_sample(u16 event_ctr,
 }
 
 #define NET_DIM_NEVENTS 64
-#define BITS_PER_TYPE(type) (sizeof(type) * BITS_PER_BYTE)
 #define BIT_GAP(bits, end, start) ((((end) - (start)) + BIT_ULL(bits)) & (BIT_ULL(bits) - 1))
 
 static inline void net_dim_calc_stats(struct net_dim_sample *start,
