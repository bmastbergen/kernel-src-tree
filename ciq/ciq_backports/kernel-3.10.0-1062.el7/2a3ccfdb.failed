RDMA/uverbs: Get rid of ucontext->tgid

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit 2a3ccfdbeb6a5f832d7203e230799f1ffa46e0fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/2a3ccfdb.failed

Nothing uses this now, just delete it.

	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 2a3ccfdbeb6a5f832d7203e230799f1ffa46e0fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/rdma_core.c
#	drivers/infiniband/core/uverbs_cmd.c
diff --cc drivers/infiniband/core/rdma_core.c
index 586f179a9de6,752a55c6bdce..000000000000
--- a/drivers/infiniband/core/rdma_core.c
+++ b/drivers/infiniband/core/rdma_core.c
@@@ -623,105 -768,154 +623,110 @@@ const struct uverbs_obj_type_class uver
  	 */
  	.needs_kfree_rcu = true,
  };
 -EXPORT_SYMBOL(uverbs_idr_class);
  
 -void uverbs_close_fd(struct file *f)
 +static void _uverbs_close_fd(struct ib_uobject_file *uobj_file)
  {
 -	struct ib_uobject *uobj = f->private_data;
 -	struct ib_uverbs_file *ufile = uobj->ufile;
 +	struct ib_ucontext *ucontext;
 +	struct ib_uverbs_file *ufile = uobj_file->ufile;
 +	int ret;
  
 -	if (down_read_trylock(&ufile->hw_destroy_rwsem)) {
 -		/*
 -		 * lookup_get_fd_uobject holds the kref on the struct file any
 -		 * time a FD uobj is locked, which prevents this release
 -		 * method from being invoked. Meaning we can always get the
 -		 * write lock here, or we have a kernel bug.
 -		 */
 -		WARN_ON(uverbs_try_lock_object(uobj, UVERBS_LOOKUP_WRITE));
 -		uverbs_destroy_uobject(uobj, RDMA_REMOVE_CLOSE);
 -		up_read(&ufile->hw_destroy_rwsem);
 -	}
 +	mutex_lock(&uobj_file->ufile->cleanup_mutex);
  
 -	/* Matches the get in alloc_begin_fd_uobject */
 -	kref_put(&ufile->ref, ib_uverbs_release_file);
 +	/* uobject was either already cleaned up or is cleaned up right now anyway */
 +	if (!uobj_file->uobj.context ||
 +	    !down_read_trylock(&uobj_file->uobj.context->cleanup_rwsem))
 +		goto unlock;
  
 -	/* Pairs with filp->private_data in alloc_begin_fd_uobject */
 -	uverbs_uobject_put(uobj);
 +	ucontext = uobj_file->uobj.context;
 +	ret = _rdma_remove_commit_uobject(&uobj_file->uobj, RDMA_REMOVE_CLOSE);
 +	up_read(&ucontext->cleanup_rwsem);
 +	if (ret)
 +		pr_warn("uverbs: unable to clean up uobject file in uverbs_close_fd.\n");
 +unlock:
 +	mutex_unlock(&ufile->cleanup_mutex);
  }
  
 -/*
 - * Drop the ucontext off the ufile and completely disconnect it from the
 - * ib_device
 - */
 -static void ufile_destroy_ucontext(struct ib_uverbs_file *ufile,
 -				   enum rdma_remove_reason reason)
 +void uverbs_close_fd(struct file *f)
  {
 -	struct ib_ucontext *ucontext = ufile->ucontext;
 -	struct ib_device *ib_dev = ucontext->device;
 -	int ret;
 -
 -	/*
 -	 * If we are closing the FD then the user mmap VMAs must have
 -	 * already been destroyed as they hold on to the filep, otherwise
 -	 * they need to be zap'd.
 -	 */
 -	if (reason == RDMA_REMOVE_DRIVER_REMOVE) {
 -		uverbs_user_mmap_disassociate(ufile);
 -		if (ib_dev->disassociate_ucontext)
 -			ib_dev->disassociate_ucontext(ucontext);
 -	}
 -
 -	ib_rdmacg_uncharge(&ucontext->cg_obj, ib_dev,
 -			   RDMACG_RESOURCE_HCA_HANDLE);
 +	struct ib_uobject_file *uobj_file = f->private_data;
 +	struct kref *uverbs_file_ref = &uobj_file->ufile->ref;
  
 -	/*
 -	 * FIXME: Drivers are not permitted to fail dealloc_ucontext, remove
 -	 * the error return.
 -	 */
 -	ret = ib_dev->dealloc_ucontext(ucontext);
 -	WARN_ON(ret);
 -
 -	ufile->ucontext = NULL;
 +	_uverbs_close_fd(uobj_file);
 +	uverbs_uobject_put(&uobj_file->uobj);
 +	kref_put(uverbs_file_ref, ib_uverbs_release_file);
  }
  
 -static int __uverbs_cleanup_ufile(struct ib_uverbs_file *ufile,
 -				  enum rdma_remove_reason reason)
 +void uverbs_cleanup_ucontext(struct ib_ucontext *ucontext, bool device_removed)
  {
 -	struct ib_uobject *obj, *next_obj;
 -	int ret = -EINVAL;
 +	enum rdma_remove_reason reason = device_removed ?
 +		RDMA_REMOVE_DRIVER_REMOVE : RDMA_REMOVE_CLOSE;
 +	unsigned int cur_order = 0;
  
 +	ucontext->cleanup_reason = reason;
  	/*
 -	 * This shouldn't run while executing other commands on this
 -	 * context. Thus, the only thing we should take care of is
 -	 * releasing a FD while traversing this list. The FD could be
 -	 * closed and released from the _release fop of this FD.
 -	 * In order to mitigate this, we add a lock.
 -	 * We take and release the lock per traversal in order to let
 -	 * other threads (which might still use the FDs) chance to run.
 +	 * Waits for all remove_commit and alloc_commit to finish. Logically, We
 +	 * want to hold this forever as the context is going to be destroyed,
 +	 * but we'll release it since it causes a "held lock freed" BUG message.
  	 */
 -	list_for_each_entry_safe(obj, next_obj, &ufile->uobjects, list) {
 +	down_write(&ucontext->cleanup_rwsem);
 +
++<<<<<<< HEAD
 +	while (!list_empty(&ucontext->uobjects)) {
 +		struct ib_uobject *obj, *next_obj;
 +		unsigned int next_order = UINT_MAX;
++=======
++	ib_rdmacg_uncharge(&ucontext->cg_obj, ib_dev,
++			   RDMACG_RESOURCE_HCA_HANDLE);
++>>>>>>> 2a3ccfdbeb6a (RDMA/uverbs: Get rid of ucontext->tgid)
 +
  		/*
 -		 * if we hit this WARN_ON, that means we are
 -		 * racing with a lookup_get.
 +		 * This shouldn't run while executing other commands on this
 +		 * context. Thus, the only thing we should take care of is
 +		 * releasing a FD while traversing this list. The FD could be
 +		 * closed and released from the _release fop of this FD.
 +		 * In order to mitigate this, we add a lock.
 +		 * We take and release the lock per order traversal in order
 +		 * to let other threads (which might still use the FDs) chance
 +		 * to run.
  		 */
 -		WARN_ON(uverbs_try_lock_object(obj, UVERBS_LOOKUP_WRITE));
 -		if (!uverbs_destroy_uobject(obj, reason))
 -			ret = 0;
 -		else
 -			atomic_set(&obj->usecnt, 0);
 +		mutex_lock(&ucontext->uobjects_lock);
 +		list_for_each_entry_safe(obj, next_obj, &ucontext->uobjects,
 +					 list) {
 +			if (obj->type->destroy_order == cur_order) {
 +				int ret;
 +
 +				/*
 +				 * if we hit this WARN_ON, that means we are
 +				 * racing with a lookup_get.
 +				 */
 +				WARN_ON(uverbs_try_lock_object(obj, true));
 +				ret = obj->type->type_class->remove_commit(obj,
 +									   reason);
 +				list_del(&obj->list);
 +				if (ret)
 +					pr_warn("ib_uverbs: failed to remove uobject id %d order %u\n",
 +						obj->id, cur_order);
 +				/* put the ref we took when we created the object */
 +				uverbs_uobject_put(obj);
 +			} else {
 +				next_order = min(next_order,
 +						 obj->type->destroy_order);
 +			}
 +		}
 +		mutex_unlock(&ucontext->uobjects_lock);
 +		cur_order = next_order;
  	}
 -	return ret;
 +	up_write(&ucontext->cleanup_rwsem);
  }
  
 -/*
 - * Destroy the uncontext and every uobject associated with it. If called with
 - * reason != RDMA_REMOVE_CLOSE this will not return until the destruction has
 - * been completed and ufile->ucontext is NULL.
 - *
 - * This is internally locked and can be called in parallel from multiple
 - * contexts.
 - */
 -void uverbs_destroy_ufile_hw(struct ib_uverbs_file *ufile,
 -			     enum rdma_remove_reason reason)
 +void uverbs_initialize_ucontext(struct ib_ucontext *ucontext)
  {
 -	if (reason == RDMA_REMOVE_CLOSE) {
 -		/*
 -		 * During destruction we might trigger something that
 -		 * synchronously calls release on any file descriptor. For
 -		 * this reason all paths that come from file_operations
 -		 * release must use try_lock. They can progress knowing that
 -		 * there is an ongoing uverbs_destroy_ufile_hw that will clean
 -		 * up the driver resources.
 -		 */
 -		if (!mutex_trylock(&ufile->ucontext_lock))
 -			return;
 -
 -	} else {
 -		mutex_lock(&ufile->ucontext_lock);
 -	}
 -
 -	down_write(&ufile->hw_destroy_rwsem);
 -
 -	/*
 -	 * If a ucontext was never created then we can't have any uobjects to
 -	 * cleanup, nothing to do.
 -	 */
 -	if (!ufile->ucontext)
 -		goto done;
 -
 -	ufile->ucontext->closing = true;
 -	ufile->ucontext->cleanup_retryable = true;
 -	while (!list_empty(&ufile->uobjects))
 -		if (__uverbs_cleanup_ufile(ufile, reason)) {
 -			/*
 -			 * No entry was cleaned-up successfully during this
 -			 * iteration
 -			 */
 -			break;
 -		}
 -
 -	ufile->ucontext->cleanup_retryable = false;
 -	if (!list_empty(&ufile->uobjects))
 -		__uverbs_cleanup_ufile(ufile, reason);
 -
 -	ufile_destroy_ucontext(ufile, reason);
 -
 -done:
 -	up_write(&ufile->hw_destroy_rwsem);
 -	mutex_unlock(&ufile->ucontext_lock);
 +	ucontext->cleanup_reason = 0;
 +	mutex_init(&ucontext->uobjects_lock);
 +	INIT_LIST_HEAD(&ucontext->uobjects);
 +	init_rwsem(&ucontext->cleanup_rwsem);
  }
 -
 + 
  const struct uverbs_obj_type_class uverbs_fd_class = {
  	.alloc_begin = alloc_begin_fd_uobject,
  	.lookup_get = lookup_get_fd_uobject,
diff --cc drivers/infiniband/core/uverbs_cmd.c
index 507521d53e3f,91d3e4029cd5..000000000000
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@@ -102,21 -113,16 +102,26 @@@ ssize_t ib_uverbs_get_context(struct ib
  	}
  
  	ucontext->device = ib_dev;
 -	ucontext->cg_obj = cg_obj;
  	/* ufile is required when some objects are released */
  	ucontext->ufile = file;
 -
 +	uverbs_initialize_ucontext(ucontext);
 +
++<<<<<<< HEAD
 +	rcu_read_lock();
 +	ucontext->tgid = get_task_pid(current->group_leader, PIDTYPE_PID);
 +	rcu_read_unlock();
 +	ucontext->closing = 0;
++=======
+ 	ucontext->closing = false;
+ 	ucontext->cleanup_retryable = false;
++>>>>>>> 2a3ccfdbeb6a (RDMA/uverbs: Get rid of ucontext->tgid)
  
  #ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
 -	mutex_init(&ucontext->per_mm_list_lock);
 -	INIT_LIST_HEAD(&ucontext->per_mm_list);
 +	ucontext->umem_tree = RB_ROOT;
 +	init_rwsem(&ucontext->umem_rwsem);
 +	ucontext->odp_mrs_count = 0;
 +	INIT_LIST_HEAD(&ucontext->no_private_counters);
 +
  	if (!(ib_dev->attrs.device_cap_flags & IB_DEVICE_ON_DEMAND_PAGING))
  		ucontext->invalidate_range = NULL;
  
@@@ -156,11 -166,13 +161,10 @@@ err_fd
  	put_unused_fd(resp.async_fd);
  
  err_free:
- 	put_pid(ucontext->tgid);
  	ib_dev->dealloc_ucontext(ucontext);
  
 -err_alloc:
 -	ib_rdmacg_uncharge(&cg_obj, ib_dev, RDMACG_RESOURCE_HCA_HANDLE);
 -
  err:
 -	mutex_unlock(&file->ucontext_lock);
 +	mutex_unlock(&file->mutex);
  	return ret;
  }
  
* Unmerged path drivers/infiniband/core/rdma_core.c
* Unmerged path drivers/infiniband/core/uverbs_cmd.c
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index b950ea239071..551ba9270596 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -1476,7 +1476,6 @@ struct ib_ucontext {
 	struct rw_semaphore	cleanup_rwsem;
 	enum rdma_remove_reason cleanup_reason;
 
-	struct pid             *tgid;
 #ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
 	struct rb_root      umem_tree;
 	/*
