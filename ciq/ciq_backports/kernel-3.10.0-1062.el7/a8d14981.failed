ALSA: pcm: Remove superfluous snd_info_register() calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit a8d149813b4456b689effb1f10accdc937566703
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/a8d14981.failed

The calls of snd_info_register() are superfluous and should be avoided
at the procfs creation time.  They are called at the end of the whole
initialization via snd_card_register().  This patch drops such
superfluous calls, as well as cleaning up the calls of substream proc
entries with a common helper.

	Reviewed-by: Jaroslav Kysela <perex@perex.cz>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit a8d149813b4456b689effb1f10accdc937566703)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/pcm.c
#	sound/core/pcm_memory.c
diff --cc sound/core/pcm.c
index cdf41c403763,7b63aee124af..000000000000
--- a/sound/core/pcm.c
+++ b/sound/core/pcm.c
@@@ -527,36 -527,19 +527,47 @@@ static int snd_pcm_stream_proc_init(str
  					   pcm->card->proc_root);
  	if (!entry)
  		return -ENOMEM;
++<<<<<<< HEAD
 +	entry->mode = S_IFDIR | S_IRUGO | S_IXUGO;
 +	if (snd_info_register(entry) < 0) {
 +		snd_info_free_entry(entry);
 +		return -ENOMEM;
 +	}
++=======
+ 	entry->mode = S_IFDIR | 0555;
++>>>>>>> a8d149813b44 (ALSA: pcm: Remove superfluous snd_info_register() calls)
  	pstr->proc_root = entry;
  	entry = snd_info_create_card_entry(pcm->card, "info", pstr->proc_root);
- 	if (entry) {
+ 	if (entry)
  		snd_info_set_text_ops(entry, pstr, snd_pcm_stream_proc_info_read);
++<<<<<<< HEAD
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	pstr->proc_info_entry = entry;
 +
++=======
++>>>>>>> a8d149813b44 (ALSA: pcm: Remove superfluous snd_info_register() calls)
  #ifdef CONFIG_SND_PCM_XRUN_DEBUG
  	entry = snd_info_create_card_entry(pcm->card, "xrun_debug",
  					   pstr->proc_root);
  	if (entry) {
- 		entry->c.text.read = snd_pcm_xrun_debug_read;
+ 		snd_info_set_text_ops(entry, pstr, snd_pcm_xrun_debug_read);
  		entry->c.text.write = snd_pcm_xrun_debug_write;
++<<<<<<< HEAD
 +		entry->mode |= S_IWUSR;
 +		entry->private_data = pstr;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
++=======
+ 		entry->mode |= 0200;
++>>>>>>> a8d149813b44 (ALSA: pcm: Remove superfluous snd_info_register() calls)
  	}
 +	pstr->proc_xrun_debug_entry = entry;
  #endif
  	return 0;
  }
@@@ -587,70 -579,24 +613,85 @@@ static int snd_pcm_substream_proc_init(
  					   substream->pstr->proc_root);
  	if (!entry)
  		return -ENOMEM;
++<<<<<<< HEAD
 +	entry->mode = S_IFDIR | S_IRUGO | S_IXUGO;
 +	if (snd_info_register(entry) < 0) {
 +		snd_info_free_entry(entry);
 +		return -ENOMEM;
 +	}
 +	substream->proc_root = entry;
 +	entry = snd_info_create_card_entry(card, "info", substream->proc_root);
 +	if (entry) {
 +		snd_info_set_text_ops(entry, substream,
 +				      snd_pcm_substream_proc_info_read);
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	substream->proc_info_entry = entry;
 +	entry = snd_info_create_card_entry(card, "hw_params",
 +					   substream->proc_root);
 +	if (entry) {
 +		snd_info_set_text_ops(entry, substream,
 +				      snd_pcm_substream_proc_hw_params_read);
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	substream->proc_hw_params_entry = entry;
 +	entry = snd_info_create_card_entry(card, "sw_params",
 +					   substream->proc_root);
 +	if (entry) {
 +		snd_info_set_text_ops(entry, substream,
 +				      snd_pcm_substream_proc_sw_params_read);
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	substream->proc_sw_params_entry = entry;
 +	entry = snd_info_create_card_entry(card, "status",
 +					   substream->proc_root);
 +	if (entry) {
 +		snd_info_set_text_ops(entry, substream,
 +				      snd_pcm_substream_proc_status_read);
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	substream->proc_status_entry = entry;
++=======
+ 	entry->mode = S_IFDIR | 0555;
+ 	substream->proc_root = entry;
+ 
+ 	create_substream_info_entry(substream, "info",
+ 				    snd_pcm_substream_proc_info_read);
+ 	create_substream_info_entry(substream, "hw_params",
+ 				    snd_pcm_substream_proc_hw_params_read);
+ 	create_substream_info_entry(substream, "sw_params",
+ 				    snd_pcm_substream_proc_sw_params_read);
+ 	create_substream_info_entry(substream, "status",
+ 				    snd_pcm_substream_proc_status_read);
++>>>>>>> a8d149813b44 (ALSA: pcm: Remove superfluous snd_info_register() calls)
  
  #ifdef CONFIG_SND_PCM_XRUN_DEBUG
- 	entry = snd_info_create_card_entry(card, "xrun_injection",
- 					   substream->proc_root);
+ 	entry = create_substream_info_entry(substream, "xrun_injection", NULL);
  	if (entry) {
- 		entry->private_data = substream;
- 		entry->c.text.read = NULL;
  		entry->c.text.write = snd_pcm_xrun_injection_write;
++<<<<<<< HEAD
 +		entry->mode = S_IFREG | S_IWUSR;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
++=======
+ 		entry->mode = S_IFREG | 0200;
++>>>>>>> a8d149813b44 (ALSA: pcm: Remove superfluous snd_info_register() calls)
  	}
 +	substream->proc_xrun_injection_entry = entry;
  #endif /* CONFIG_SND_PCM_XRUN_DEBUG */
  
  	return 0;
diff --cc sound/core/pcm_memory.c
index ae33e456708c,4012a3a01de1..000000000000
--- a/sound/core/pcm_memory.c
+++ b/sound/core/pcm_memory.c
@@@ -198,26 -192,19 +198,39 @@@ static inline void preallocate_info_ini
  {
  	struct snd_info_entry *entry;
  
- 	if ((entry = snd_info_create_card_entry(substream->pcm->card, "prealloc", substream->proc_root)) != NULL) {
- 		entry->c.text.read = snd_pcm_lib_preallocate_proc_read;
+ 	entry = snd_info_create_card_entry(substream->pcm->card, "prealloc",
+ 					   substream->proc_root);
+ 	if (entry) {
+ 		snd_info_set_text_ops(entry, substream,
+ 				      snd_pcm_lib_preallocate_proc_read);
  		entry->c.text.write = snd_pcm_lib_preallocate_proc_write;
++<<<<<<< HEAD
 +		entry->mode |= S_IWUSR;
 +		entry->private_data = substream;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	substream->proc_prealloc_entry = entry;
 +	if ((entry = snd_info_create_card_entry(substream->pcm->card, "prealloc_max", substream->proc_root)) != NULL) {
 +		entry->c.text.read = snd_pcm_lib_preallocate_max_proc_read;
 +		entry->private_data = substream;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	substream->proc_prealloc_max_entry = entry;
++=======
+ 		entry->mode |= 0200;
+ 	}
+ 	entry = snd_info_create_card_entry(substream->pcm->card, "prealloc_max",
+ 					   substream->proc_root);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, substream,
+ 				      snd_pcm_lib_preallocate_max_proc_read);
++>>>>>>> a8d149813b44 (ALSA: pcm: Remove superfluous snd_info_register() calls)
  }
  
  #else /* !CONFIG_SND_VERBOSE_PROCFS */
* Unmerged path sound/core/pcm.c
* Unmerged path sound/core/pcm_memory.c
