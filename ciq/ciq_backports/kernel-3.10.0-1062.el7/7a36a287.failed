perf bpf: Fix NULL return handling in bpf__prepare_load()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author YueHaibing <yuehaibing@huawei.com>
commit 7a36a287de9fbb1ba906e70573d3f2315f7fd609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/7a36a287.failed

bpf_object__open()/bpf_object__open_buffer can return error pointer or
NULL, check the return values with IS_ERR_OR_NULL() in bpf__prepare_load
and bpf__prepare_load_buffer

	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Acked-by: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: netdev@vger.kernel.org
Link: https://lkml.kernel.org/n/tip-psf4xwc09n62al2cb9s33v9h@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7a36a287de9fbb1ba906e70573d3f2315f7fd609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/bpf-loader.c
diff --cc tools/perf/util/bpf-loader.c
index 39bf9252ae96,cee658733e2c..000000000000
--- a/tools/perf/util/bpf-loader.c
+++ b/tools/perf/util/bpf-loader.c
@@@ -39,10 -65,53 +39,58 @@@ struct bpf_object *bpf__prepare_load(co
  		libbpf_initialized = true;
  	}
  
++<<<<<<< HEAD
 +	obj = bpf_object__open(filename);
 +	if (!obj) {
++=======
+ 	obj = bpf_object__open_buffer(obj_buf, obj_buf_sz, name);
+ 	if (IS_ERR_OR_NULL(obj)) {
+ 		pr_debug("bpf: failed to load buffer\n");
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	return obj;
+ }
+ 
+ struct bpf_object *bpf__prepare_load(const char *filename, bool source)
+ {
+ 	struct bpf_object *obj;
+ 
+ 	if (!libbpf_initialized) {
+ 		libbpf_set_print(libbpf_warning,
+ 				 libbpf_info,
+ 				 libbpf_debug);
+ 		libbpf_initialized = true;
+ 	}
+ 
+ 	if (source) {
+ 		int err;
+ 		void *obj_buf;
+ 		size_t obj_buf_sz;
+ 
+ 		perf_clang__init();
+ 		err = perf_clang__compile_bpf(filename, &obj_buf, &obj_buf_sz);
+ 		perf_clang__cleanup();
+ 		if (err) {
+ 			pr_debug("bpf: builtin compilation failed: %d, try external compiler\n", err);
+ 			err = llvm__compile_bpf(filename, &obj_buf, &obj_buf_sz);
+ 			if (err)
+ 				return ERR_PTR(-BPF_LOADER_ERRNO__COMPILE);
+ 		} else
+ 			pr_debug("bpf: successfull builtin compilation\n");
+ 		obj = bpf_object__open_buffer(obj_buf, obj_buf_sz, filename);
+ 
+ 		if (!IS_ERR_OR_NULL(obj) && llvm_param.dump_obj)
+ 			llvm__dump_obj(filename, obj_buf, obj_buf_sz);
+ 
+ 		free(obj_buf);
+ 	} else
+ 		obj = bpf_object__open(filename);
+ 
+ 	if (IS_ERR_OR_NULL(obj)) {
++>>>>>>> 7a36a287de9f (perf bpf: Fix NULL return handling in bpf__prepare_load())
  		pr_debug("bpf: failed to load %s\n", filename);
 -		return obj;
 +		return ERR_PTR(-EINVAL);
  	}
  
  	return obj;
* Unmerged path tools/perf/util/bpf-loader.c
