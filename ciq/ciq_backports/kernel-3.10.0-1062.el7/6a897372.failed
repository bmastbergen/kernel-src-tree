net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes (Alaa Hleihel) [1590191]
Rebuild_FUZZ: 97.01%
commit-author Aya Levin <ayal@mellanox.com>
commit 6a897372417e8c9e0e03c4c438fc1f48dd096ea9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/6a897372.failed

In previous patch, driver added new speed modes: 50Gbps per lane support
for 50G/100G/200G.  This patch modifies mlx5e_get_link_ksettings and
mlx5e_set_link_ksettings to set and get these link modes via ethtool.
In order to do so, added mapping of new HW bits to ethtool bitmap and
enforce mutual exclusion between extended link modes and previously
defined link modes.

	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 6a897372417e8c9e0e03c4c438fc1f48dd096ea9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 889e7668b711,ee5dc8e354d6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -59,18 -61,19 +59,30 @@@ static void mlx5e_get_drvinfo(struct ne
  struct ptys2ethtool_config {
  	__ETHTOOL_DECLARE_LINK_MODE_MASK(supported);
  	__ETHTOOL_DECLARE_LINK_MODE_MASK(advertised);
 +	u32 speed;
  };
  
- static struct ptys2ethtool_config ptys2ethtool_table[MLX5E_LINK_MODES_NUMBER];
+ static
+ struct ptys2ethtool_config ptys2legacy_ethtool_table[MLX5E_LINK_MODES_NUMBER];
+ static
+ struct ptys2ethtool_config ptys2ext_ethtool_table[MLX5E_EXT_LINK_MODES_NUMBER];
  
++<<<<<<< HEAD
 +#define MLX5_BUILD_PTYS2ETHTOOL_CONFIG(reg_, speed_, ...)               \
 +	({                                                              \
 +		struct ptys2ethtool_config *cfg;                        \
 +		const unsigned int modes[] = { __VA_ARGS__ };           \
 +		unsigned int i;                                         \
 +		cfg = &ptys2ethtool_table[reg_];                        \
 +		cfg->speed = speed_;                                    \
++=======
+ #define MLX5_BUILD_PTYS2ETHTOOL_CONFIG(reg_, table, ...)                  \
+ 	({                                                              \
+ 		struct ptys2ethtool_config *cfg;                        \
+ 		const unsigned int modes[] = { __VA_ARGS__ };           \
+ 		unsigned int i, bit, idx;                               \
+ 		cfg = &ptys2##table##_ethtool_table[reg_];		\
++>>>>>>> 6a897372417e (net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes)
  		bitmap_zero(cfg->supported,                             \
  			    __ETHTOOL_LINK_MODE_MASK_NBITS);            \
  		bitmap_zero(cfg->advertised,                            \
@@@ -83,65 -88,133 +97,183 @@@
  
  void mlx5e_build_ptys2ethtool_map(void)
  {
++<<<<<<< HEAD
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_1000BASE_CX_SGMII, SPEED_1000,
 +				       ETHTOOL_LINK_MODE_1000baseKX_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_1000BASE_KX, SPEED_1000,
 +				       ETHTOOL_LINK_MODE_1000baseKX_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_CX4, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_KX4, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_KR, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_20GBASE_KR2, SPEED_20000,
 +				       ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_CR4, SPEED_40000,
 +				       ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_KR4, SPEED_40000,
 +				       ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_56GBASE_R4, SPEED_56000,
 +				       ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_CR, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_SR, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_ER, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_SR4, SPEED_40000,
 +				       ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_LR4, SPEED_40000,
 +				       ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GBASE_SR2, SPEED_50000,
 +				       ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_CR4, SPEED_100000,
 +				       ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_SR4, SPEED_100000,
 +				       ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_KR4, SPEED_100000,
 +				       ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_LR4, SPEED_100000,
 +				       ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_T, SPEED_10000,
 +				       ETHTOOL_LINK_MODE_10000baseT_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GBASE_CR, SPEED_25000,
 +				       ETHTOOL_LINK_MODE_25000baseCR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GBASE_KR, SPEED_25000,
 +				       ETHTOOL_LINK_MODE_25000baseKR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GBASE_SR, SPEED_25000,
 +				       ETHTOOL_LINK_MODE_25000baseSR_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GBASE_CR2, SPEED_50000,
 +				       ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT);
 +	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GBASE_KR2, SPEED_50000,
++=======
+ 	memset(ptys2legacy_ethtool_table, 0, sizeof(ptys2legacy_ethtool_table));
+ 	memset(ptys2ext_ethtool_table, 0, sizeof(ptys2ext_ethtool_table));
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_1000BASE_CX_SGMII, legacy,
+ 				       ETHTOOL_LINK_MODE_1000baseKX_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_1000BASE_KX, legacy,
+ 				       ETHTOOL_LINK_MODE_1000baseKX_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_CX4, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_KX4, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_KR, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_20GBASE_KR2, legacy,
+ 				       ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_CR4, legacy,
+ 				       ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_KR4, legacy,
+ 				       ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_56GBASE_R4, legacy,
+ 				       ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_CR, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_SR, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_ER, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_SR4, legacy,
+ 				       ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_LR4, legacy,
+ 				       ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GBASE_SR2, legacy,
+ 				       ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_CR4, legacy,
+ 				       ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_SR4, legacy,
+ 				       ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_KR4, legacy,
+ 				       ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GBASE_LR4, legacy,
+ 				       ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_T, legacy,
+ 				       ETHTOOL_LINK_MODE_10000baseT_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GBASE_CR, legacy,
+ 				       ETHTOOL_LINK_MODE_25000baseCR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GBASE_KR, legacy,
+ 				       ETHTOOL_LINK_MODE_25000baseKR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GBASE_SR, legacy,
+ 				       ETHTOOL_LINK_MODE_25000baseSR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GBASE_CR2, legacy,
+ 				       ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GBASE_KR2, legacy,
++>>>>>>> 6a897372417e (net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes)
  				       ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_SGMII_100M, ext,
+ 				       ETHTOOL_LINK_MODE_100baseT_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_1000BASE_X_SGMII, ext,
+ 				       ETHTOOL_LINK_MODE_1000baseT_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_1000baseKX_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_1000baseX_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_5GBASE_R, ext,
+ 				       ETHTOOL_LINK_MODE_5000baseT_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_10GBASE_XFI_XAUI_1, ext,
+ 				       ETHTOOL_LINK_MODE_10000baseT_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_10000baseKR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_10000baseR_FEC_BIT,
+ 				       ETHTOOL_LINK_MODE_10000baseCR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_10000baseSR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_10000baseLR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_10000baseER_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_40GBASE_XLAUI_4_XLPPI_4, ext,
+ 				       ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_25GAUI_1_25GBASE_CR_KR, ext,
+ 				       ETHTOOL_LINK_MODE_25000baseCR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_25000baseKR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_25000baseSR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GAUI_2_LAUI_2_50GBASE_CR2_KR2,
+ 				       ext,
+ 				       ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_50GAUI_1_LAUI_1_50GBASE_CR_KR, ext,
+ 				       ETHTOOL_LINK_MODE_50000baseKR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_50000baseSR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_50000baseCR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_50000baseLR_ER_FR_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_50000baseDR_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_CAUI_4_100GBASE_CR4_KR4, ext,
+ 				       ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_100GAUI_2_100GBASE_CR2_KR2, ext,
+ 				       ETHTOOL_LINK_MODE_100000baseKR2_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseSR2_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseCR2_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseLR2_ER2_FR2_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_100000baseDR2_Full_BIT);
+ 	MLX5_BUILD_PTYS2ETHTOOL_CONFIG(MLX5E_200GAUI_4_200GBASE_CR4_KR4, ext,
+ 				       ETHTOOL_LINK_MODE_200000baseKR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_200000baseSR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_200000baseLR4_ER4_FR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_200000baseDR4_Full_BIT,
+ 				       ETHTOOL_LINK_MODE_200000baseCR4_Full_BIT);
+ }
+ 
+ static void mlx5e_ethtool_get_speed_arr(struct mlx5_core_dev *mdev,
+ 					struct ptys2ethtool_config **arr,
+ 					u32 *size)
+ {
+ 	bool ext = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+ 
+ 	*arr = ext ? ptys2ext_ethtool_table : ptys2legacy_ethtool_table;
+ 	*size = ext ? ARRAY_SIZE(ptys2ext_ethtool_table) :
+ 		      ARRAY_SIZE(ptys2legacy_ethtool_table);
  }
  
 -typedef int (*mlx5e_pflag_handler)(struct net_device *netdev, bool enable);
 -
 -struct pflag_desc {
 -	char name[ETH_GSTRING_LEN];
 -	mlx5e_pflag_handler handler;
 +static const char mlx5e_priv_flags[][ETH_GSTRING_LEN] = {
 +	"rx_cqe_moder",
 +	"tx_cqe_moder",
 +	"rx_cqe_compress",
 +	"rx_striding_rq",
  };
  
 -static const struct pflag_desc mlx5e_priv_flags[MLX5E_NUM_PFLAGS];
 -
  int mlx5e_ethtool_get_sset_count(struct mlx5e_priv *priv, int sset)
  {
  	int i, num_stats = 0;
@@@ -852,13 -865,12 +992,13 @@@ static void get_lp_advertising(struct m
  {
  	unsigned long *lp_advertising = link_ksettings->link_modes.lp_advertising;
  
- 	ptys2ethtool_adver_link(lp_advertising, eth_proto_lp);
+ 	ptys2ethtool_adver_link(mdev, lp_advertising, eth_proto_lp);
  }
  
 -int mlx5e_ethtool_get_link_ksettings(struct mlx5e_priv *priv,
 -				     struct ethtool_link_ksettings *link_ksettings)
 +static int mlx5e_get_link_ksettings(struct net_device *netdev,
 +				    struct ethtool_link_ksettings *link_ksettings)
  {
 +	struct mlx5e_priv *priv    = netdev_priv(netdev);
  	struct mlx5_core_dev *mdev = priv->mdev;
  	u32 out[MLX5_ST_SZ_DW(ptys_reg)] = {0};
  	u32 rx_pause = 0;
@@@ -892,9 -908,9 +1036,15 @@@
  	ethtool_link_ksettings_zero_link_mode(link_ksettings, supported);
  	ethtool_link_ksettings_zero_link_mode(link_ksettings, advertising);
  
++<<<<<<< HEAD
 +	get_supported(eth_proto_cap, link_ksettings);
 +	get_advertising(eth_proto_admin, tx_pause, rx_pause, link_ksettings);
 +	get_speed_duplex(netdev, eth_proto_oper, link_ksettings);
++=======
+ 	get_supported(mdev, eth_proto_cap, link_ksettings);
+ 	get_advertising(mdev, eth_proto_admin, tx_pause, rx_pause, link_ksettings);
+ 	get_speed_duplex(priv->netdev, eth_proto_oper, link_ksettings);
++>>>>>>> 6a897372417e (net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes)
  
  	eth_proto_oper = eth_proto_oper ? eth_proto_oper : eth_proto_cap;
  
@@@ -939,26 -968,34 +1091,52 @@@ static u32 mlx5e_ethtool2ptys_adver_lin
  	return ptys_modes;
  }
  
++<<<<<<< HEAD
 +static u32 mlx5e_ethtool2ptys_speed_link(u32 speed)
++=======
+ static u32 mlx5e_ethtool2ptys_ext_adver_link(const unsigned long *link_modes)
+ {
+ 	u32 i, ptys_modes = 0;
+ 	unsigned long modes[2];
+ 
+ 	for (i = 0; i < MLX5E_EXT_LINK_MODES_NUMBER; ++i) {
+ 		if (*ptys2ext_ethtool_table[i].advertised == 0)
+ 			continue;
+ 		memset(modes, 0, sizeof(modes));
+ 		bitmap_and(modes, ptys2ext_ethtool_table[i].advertised,
+ 			   link_modes, __ETHTOOL_LINK_MODE_MASK_NBITS);
+ 
+ 		if (modes[0] == ptys2ext_ethtool_table[i].advertised[0] &&
+ 		    modes[1] == ptys2ext_ethtool_table[i].advertised[1])
+ 			ptys_modes |= MLX5E_PROT_MASK(i);
+ 	}
+ 	return ptys_modes;
+ }
+ 
+ int mlx5e_ethtool_set_link_ksettings(struct mlx5e_priv *priv,
+ 				     const struct ethtool_link_ksettings *link_ksettings)
++>>>>>>> 6a897372417e (net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes)
 +{
 +	u32 i, speed_links = 0;
 +
 +	for (i = 0; i < MLX5E_LINK_MODES_NUMBER; ++i) {
 +		if (ptys2ethtool_table[i].speed == speed)
 +			speed_links |= MLX5E_PROT_MASK(i);
 +	}
 +
 +	return speed_links;
 +}
 +
 +static int mlx5e_set_link_ksettings(struct net_device *netdev,
 +				    const struct ethtool_link_ksettings *link_ksettings)
  {
 +	struct mlx5e_priv *priv    = netdev_priv(netdev);
  	struct mlx5_core_dev *mdev = priv->mdev;
 -	struct mlx5e_port_eth_proto eproto;
 +	u32 eth_proto_cap, eth_proto_admin;
  	bool an_changes = false;
  	u8 an_disable_admin;
+ 	bool ext_supported;
+ 	bool ext_requested;
  	u8 an_disable_cap;
  	bool an_disable;
  	u32 link_modes;
@@@ -966,22 -1003,35 +1144,44 @@@
  	u32 speed;
  	int err;
  
+ 	u32 (*ethtool2ptys_adver_func)(const unsigned long *adver);
+ 
+ #define MLX5E_PTYS_EXT ((1ULL << ETHTOOL_LINK_MODE_50000baseKR_Full_BIT) - 1)
+ 
+ 	ext_requested = (link_ksettings->link_modes.advertising[0] >
+ 			MLX5E_PTYS_EXT);
+ 	ext_supported = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+ 
+ 	/*when ptys_extended_ethernet is set legacy link modes are deprecated */
+ 	if (ext_requested != ext_supported)
+ 		return -EPROTONOSUPPORT;
+ 
  	speed = link_ksettings->base.speed;
++<<<<<<< HEAD
 +
 +	link_modes = link_ksettings->base.autoneg == AUTONEG_ENABLE ?
 +		mlx5e_ethtool2ptys_adver_link(link_ksettings->link_modes.advertising) :
 +		mlx5e_ethtool2ptys_speed_link(speed);
 +
 +	err = mlx5_query_port_proto_cap(mdev, &eth_proto_cap, MLX5_PTYS_EN);
++=======
+ 	ethtool2ptys_adver_func = ext_requested ?
+ 				  mlx5e_ethtool2ptys_ext_adver_link :
+ 				  mlx5e_ethtool2ptys_adver_link;
+ 	err = mlx5_port_query_eth_proto(mdev, 1, ext_supported, &eproto);
++>>>>>>> 6a897372417e (net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes)
  	if (err) {
 -		netdev_err(priv->netdev, "%s: query port eth proto failed: %d\n",
 +		netdev_err(netdev, "%s: query port eth proto cap failed: %d\n",
  			   __func__, err);
  		goto out;
  	}
+ 	link_modes = link_ksettings->base.autoneg == AUTONEG_ENABLE ?
+ 		ethtool2ptys_adver_func(link_ksettings->link_modes.advertising) :
+ 		mlx5e_port_speed2linkmodes(mdev, speed);
  
 -	link_modes = link_modes & eproto.cap;
 +	link_modes = link_modes & eth_proto_cap;
  	if (!link_modes) {
 -		netdev_err(priv->netdev, "%s: Not supported link mode(s) requested",
 +		netdev_err(netdev, "%s: Not supported link mode(s) requested",
  			   __func__);
  		err = -EINVAL;
  		goto out;
@@@ -1001,10 -1044,10 +1201,14 @@@
  	an_changes = ((!an_disable && an_disable_admin) ||
  		      (an_disable && !an_disable_admin));
  
 -	if (!an_changes && link_modes == eproto.admin)
 +	if (!an_changes && link_modes == eth_proto_admin)
  		goto out;
  
++<<<<<<< HEAD
 +	mlx5_set_port_ptys(mdev, an_disable, link_modes, MLX5_PTYS_EN);
++=======
+ 	mlx5_port_set_eth_ptys(mdev, an_disable, link_modes, ext_supported);
++>>>>>>> 6a897372417e (net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes)
  	mlx5_toggle_port_link(mdev);
  
  out:
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
