net: use skb_to_full_sk() in skb_update_prio()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [net] use skb_to_full_sk() in skb_update_prio() (Flavio Leitner) [1554261]
Rebuild_FUZZ: 94.25%
commit-author Eric Dumazet <edumazet@google.com>
commit 4dcb31d4649df36297296b819437709f5407059c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4dcb31d4.failed

Andrei Vagin reported a KASAN: slab-out-of-bounds error in
skb_update_prio()

Since SYNACK might be attached to a request socket, we need to
get back to the listener socket.
Since this listener is manipulated without locks, add const
qualifiers to sock_cgroup_prioidx() so that the const can also
be used in skb_update_prio()

Also add the const qualifier to sock_cgroup_classid() for consistency.

Fixes: ca6fb0651883 ("tcp: attach SYNACK messages to request sockets instead of listener")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Andrei Vagin <avagin@virtuozzo.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4dcb31d4649df36297296b819437709f5407059c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/cgroup-defs.h
#	net/core/dev.c
diff --cc net/core/dev.c
index 8e4fb78a977c,12be20535714..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -3240,17 -3275,26 +3240,31 @@@ static inline int __dev_xmit_skb(struc
  	return rc;
  }
  
 -#if IS_ENABLED(CONFIG_CGROUP_NET_PRIO)
 +#if IS_ENABLED(CONFIG_NETPRIO_CGROUP)
  static void skb_update_prio(struct sk_buff *skb)
  {
- 	struct netprio_map *map = rcu_dereference_bh(skb->dev->priomap);
+ 	const struct netprio_map *map;
+ 	const struct sock *sk;
+ 	unsigned int prioidx;
  
++<<<<<<< HEAD
 +	if (!skb->priority && skb->sk && map) {
 +		unsigned int prioidx = skb->sk->sk_cgrp_prioidx;
++=======
+ 	if (skb->priority)
+ 		return;
+ 	map = rcu_dereference_bh(skb->dev->priomap);
+ 	if (!map)
+ 		return;
+ 	sk = skb_to_full_sk(skb);
+ 	if (!sk)
+ 		return;
++>>>>>>> 4dcb31d4649d (net: use skb_to_full_sk() in skb_update_prio())
  
- 		if (prioidx < map->priomap_len)
- 			skb->priority = map->priomap[prioidx];
- 	}
+ 	prioidx = sock_cgroup_prioidx(&sk->sk_cgrp_data);
+ 
+ 	if (prioidx < map->priomap_len)
+ 		skb->priority = map->priomap[prioidx];
  }
  #else
  #define skb_update_prio(skb)
* Unmerged path include/linux/cgroup-defs.h
* Unmerged path include/linux/cgroup-defs.h
* Unmerged path net/core/dev.c
