EDAC/amd64: Support more than two Unified Memory Controllers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [edac] amd64: Support more than two Unified Memory Controllers (Gary Hook) [1705210]
Rebuild_FUZZ: 95.65%
commit-author Yazen Ghannam <yazen.ghannam@amd.com>
commit bdcee7747f5c490297665af0e1e0fbeb4368804d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bdcee774.failed

The first few models of Family 17h all had 2 Unified Memory Controllers
per Die, so this was treated as a fixed value. However, future systems
may have more Unified Memory Controllers per Die.

Related to this, the channel number and base address of a Unified Memory
Controller were found by matching on fixed, known values. However,
current and future systems follow this pattern for the channel number
and base address of a Unified Memory Controller: 0xYXXXXX, where Y is
the channel number. So matching on hardcoded values is not necessary.

Set the number of Unified Memory Controllers at driver init time based
on the family/model. Also, update the functions that find the channel
number and base address of a Unified Memory Controller to support more
than two.

 [ bp: Move num_umcs into the .c file and simplify comment. ]

	Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Tested-by: Kim Phillips <kim.phillips@amd.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
	Cc: linux-edac <linux-edac@vger.kernel.org>
Link: https://lkml.kernel.org/r/20190228153558.127292-3-Yazen.Ghannam@amd.com
(cherry picked from commit bdcee7747f5c490297665af0e1e0fbeb4368804d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/amd64_edac.c
diff --cc drivers/edac/amd64_edac.c
index 9e4b9d87501a,81dca957fce0..000000000000
--- a/drivers/edac/amd64_edac.c
+++ b/drivers/edac/amd64_edac.c
@@@ -15,10 -15,12 +15,13 @@@ module_param(ecc_enable_override, int, 
  
  static struct msr __percpu *msrs;
  
 -/* Per-node stuff */
 +/* Per-node driver instances */
 +static struct mem_ctl_info **mcis;
  static struct ecc_settings **ecc_stngs;
  
+ /* Number of Unified Memory Controllers */
+ static u8 num_umcs;
+ 
  /*
   * Valid scrub rates for the K8 hardware memory scrubber. We map the scrubbing
   * bandwidth to a valid bit pattern. The 'set' operation finds the 'matching-
@@@ -3206,6 -3237,32 +3201,35 @@@ static struct amd64_family_type *per_fa
  	return fam_type;
  }
  
++<<<<<<< HEAD
++=======
+ static const struct attribute_group *amd64_edac_attr_groups[] = {
+ #ifdef CONFIG_EDAC_DEBUG
+ 	&amd64_edac_dbg_group,
+ #endif
+ #ifdef CONFIG_EDAC_AMD64_ERROR_INJECTION
+ 	&amd64_edac_inj_group,
+ #endif
+ 	NULL
+ };
+ 
+ /* Set the number of Unified Memory Controllers in the system. */
+ static void compute_num_umcs(void)
+ {
+ 	u8 model = boot_cpu_data.x86_model;
+ 
+ 	if (boot_cpu_data.x86 < 0x17)
+ 		return;
+ 
+ 	if (model >= 0x30 && model <= 0x3f)
+ 		num_umcs = 8;
+ 	else
+ 		num_umcs = 2;
+ 
+ 	edac_dbg(1, "Number of UMCs: %x", num_umcs);
+ }
+ 
++>>>>>>> bdcee7747f5c (EDAC/amd64: Support more than two Unified Memory Controllers)
  static int init_one_instance(unsigned int nid)
  {
  	struct pci_dev *F3 = node_to_amd_nb(nid)->misc;
@@@ -3470,8 -3508,11 +3494,16 @@@ static int __init amd64_edac_init(void
  	if (!msrs)
  		goto err_free;
  
++<<<<<<< HEAD
 +	for (i = 0; i < amd_nb_num(); i++)
 +		if (probe_one_instance(i)) {
++=======
+ 	compute_num_umcs();
+ 
+ 	for (i = 0; i < amd_nb_num(); i++) {
+ 		err = probe_one_instance(i);
+ 		if (err) {
++>>>>>>> bdcee7747f5c (EDAC/amd64: Support more than two Unified Memory Controllers)
  			/* unwind properly */
  			while (--i >= 0)
  				remove_one_instance(i);
* Unmerged path drivers/edac/amd64_edac.c
diff --git a/drivers/edac/amd64_edac.h b/drivers/edac/amd64_edac.h
index e705afd47cb1..3038246cc2d0 100644
--- a/drivers/edac/amd64_edac.h
+++ b/drivers/edac/amd64_edac.h
@@ -326,8 +326,6 @@
 
 #define UMC_SDP_INIT			BIT(31)
 
-#define NUM_UMCS			2
-
 enum amd_families {
 	K8_CPUS = 0,
 	F10_CPUS,
@@ -448,8 +446,8 @@ struct err_info {
 
 static inline u32 get_umc_base(u8 channel)
 {
-	/* ch0: 0x50000, ch1: 0x150000 */
-	return 0x50000 + (!!channel << 20);
+	/* chY: 0xY50000 */
+	return 0x50000 + (channel << 20);
 }
 
 static inline u64 get_dram_base(struct amd64_pvt *pvt, u8 i)
