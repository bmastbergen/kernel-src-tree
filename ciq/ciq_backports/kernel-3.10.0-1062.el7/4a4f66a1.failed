perf llvm: Pass LINUX_VERSION_CODE to BPF program when compiling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit 4a4f66a1a7031675745812729ade94ad1caf1db6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4a4f66a1.failed

Arnaldo suggests to make LINUX_VERSION_CODE works like __func__ and
__FILE__ so user don't need to care setting right linux version too
much. In this patch, perf llvm transfers LINUX_VERSION_CODE macro
through clang cmdline.

[1] http://lkml.kernel.org/r/20151029223744.GK2923@kernel.org

Committer notes:

Before, forgetting to update the version:

  # uname -r
  4.3.0-rc1+
  # cat bpf.c
  __attribute__((section("fork=_do_fork"), used))
  int fork(void *ctx)
  {
          return 1;
  }

  char _license[] __attribute__((section("license"), used)) = "GPL";
  int _version __attribute__((section("version"), used)) = 0x40200;
  #
  # perf record -e bpf.c sleep 1
  event syntax error: 'bpf.c'
                       \___ Invalid argument: Are you root and runing a CONFIG_BPF_SYSCALL kernel?

  (add -v to see detail)
  Run 'perf list' for a list of valid events

   Usage: perf record [<options>] [<command>]
      or: perf record [<options>] -- <command> [<options>]

      -e, --event <event>   event selector. use 'perf list' to list available events
 #

After:

  # grep version bpf.c
  int _version __attribute__((section("version"), used)) = LINUX_VERSION_CODE;
  # perf record -e bpf.c sleep 1
  [ perf record: Woken up 1 times to write data ]
  [ perf record: Captured and wrote 0.017 MB perf.data ]
  # perf evlist -v
  perf_bpf_probe:fork: type: 2, size: 112, config: 0x5ee, { sample_period,
  sample_freq }: 1, sample_type: IP|TID|TIME|CPU|PERIOD|RAW, disabled: 1,
  inherit: 1, mmap: 1, comm: 1, enable_on_exec: 1, task: 1, sample_id_all:
  1, exclude_guest: 1, mmap2: 1, comm_exec: 1
  #

Suggested-and-Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1446636007-239722-3-git-send-email-wangnan0@huawei.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 4a4f66a1a7031675745812729ade94ad1caf1db6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/llvm-utils.c
diff --cc tools/perf/util/llvm-utils.c
index 1094f8780b7a,8ee25bea1b24..000000000000
--- a/tools/perf/util/llvm-utils.c
+++ b/tools/perf/util/llvm-utils.c
@@@ -3,22 -3,20 +3,31 @@@
   * Copyright (C) 2015, Huawei Inc.
   */
  
 +#include <errno.h>
 +#include <limits.h>
  #include <stdio.h>
  #include <sys/utsname.h>
 -#include "util.h"
  #include "debug.h"
  #include "llvm-utils.h"
 -#include "cache.h"
 +#include "config.h"
 +#include <stdlib.h>
 +#include "util.h"
 +#include <sys/wait.h>
  
  #define CLANG_BPF_CMD_DEFAULT_TEMPLATE				\
++<<<<<<< HEAD
 +		"$CLANG_EXEC -D__KERNEL__ $CLANG_OPTIONS "	\
 +		"$KERNEL_INC_OPTIONS -Wno-unused-value "	\
 +		"-Wno-pointer-sign -working-directory "		\
 +		"$WORKING_DIR -c \"$CLANG_SOURCE\" -target bpf -O2 -o -"
++=======
+ 		"$CLANG_EXEC -D__KERNEL__ -D__NR_CPUS__=$NR_CPUS "\
+ 		"-DLINUX_VERSION_CODE=$LINUX_VERSION_CODE "	\
+ 		"$CLANG_OPTIONS $KERNEL_INC_OPTIONS "		\
+ 		"-Wno-unused-value -Wno-pointer-sign "		\
+ 		"-working-directory $WORKING_DIR "		\
+ 		"-c \"$CLANG_SOURCE\" -target bpf -O2 -o -"
++>>>>>>> 4a4f66a1a703 (perf llvm: Pass LINUX_VERSION_CODE to BPF program when compiling)
  
  struct llvm_param llvm_param = {
  	.clang_path = "clang",
@@@ -330,10 -349,10 +360,16 @@@ fetch_kernel_version(void
  int llvm__compile_bpf(const char *path, void **p_obj_buf,
  		      size_t *p_obj_buf_sz)
  {
++<<<<<<< HEAD
 +	int err;
++=======
+ 	int err, nr_cpus_avail;
+ 	char clang_path[PATH_MAX], nr_cpus_avail_str[64];
+ 	char linux_version_code_str[64];
++>>>>>>> 4a4f66a1a703 (perf llvm: Pass LINUX_VERSION_CODE to BPF program when compiling)
  	const char *clang_opt = llvm_param.clang_opt;
 +	char clang_path[PATH_MAX], abspath[PATH_MAX];
 +	char serr[STRERR_BUFSIZE];
  	const char *template = llvm_param.clang_bpf_cmd_template;
  	char *kbuild_dir = NULL, *kbuild_include_opts = NULL;
  	void *obj_buf = NULL;
@@@ -366,6 -378,21 +402,24 @@@
  	 */
  	get_kbuild_opts(&kbuild_dir, &kbuild_include_opts);
  
++<<<<<<< HEAD
++=======
+ 	nr_cpus_avail = sysconf(_SC_NPROCESSORS_CONF);
+ 	if (nr_cpus_avail <= 0) {
+ 		pr_err(
+ "WARNING:\tunable to get available CPUs in this system: %s\n"
+ "        \tUse 128 instead.\n", strerror(errno));
+ 		nr_cpus_avail = 128;
+ 	}
+ 	snprintf(nr_cpus_avail_str, sizeof(nr_cpus_avail_str), "%d",
+ 		 nr_cpus_avail);
+ 
+ 	snprintf(linux_version_code_str, sizeof(linux_version_code_str),
+ 		 "0x%lx", fetch_kernel_version());
+ 
+ 	force_set_env("NR_CPUS", nr_cpus_avail_str);
+ 	force_set_env("LINUX_VERSION_CODE", linux_version_code_str);
++>>>>>>> 4a4f66a1a703 (perf llvm: Pass LINUX_VERSION_CODE to BPF program when compiling)
  	force_set_env("CLANG_EXEC", clang_path);
  	force_set_env("CLANG_OPTIONS", clang_opt);
  	force_set_env("KERNEL_INC_OPTIONS", kbuild_include_opts);
* Unmerged path tools/perf/util/llvm-utils.c
