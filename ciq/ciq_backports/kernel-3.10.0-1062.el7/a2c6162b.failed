net/mlx5: Support extended destination format in flow steering command

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Support extended destination format in flow steering command (Alaa Hleihel) [1642383 1642498]
Rebuild_FUZZ: 97.06%
commit-author Eli Britstein <elibr@mellanox.com>
commit a2c6162b12f15fbbbe38d0eb3a38186bcfc79c0f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/a2c6162b.failed

Update the flow steering command formatting according to the extended
destination API.
Note that the FW dictates that multi destination FTEs that involve at
least one encap must use the extended destination format, while single
destination ones must use the legacy format.
Using extended destination format requires FW support. Check for its
capabilities and return error if not supported.

	Signed-off-by: Eli Britstein <elibr@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit a2c6162b12f15fbbbe38d0eb3a38186bcfc79c0f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
#	include/linux/mlx5/fs.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
index 684c8251931c,c44ccb67c4a3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
@@@ -343,8 -389,20 +389,25 @@@ static int mlx5_cmd_set_fte(struct mlx5
  	MLX5_SET(flow_context, in_flow_context, group_id, group_id);
  
  	MLX5_SET(flow_context, in_flow_context, flow_tag, fte->action.flow_tag);
++<<<<<<< HEAD
 +	MLX5_SET(flow_context, in_flow_context, action, fte->action.action);
 +	MLX5_SET(flow_context, in_flow_context, encap_id, fte->action.encap_id);
++=======
+ 	MLX5_SET(flow_context, in_flow_context, extended_destination,
+ 		 extended_dest);
+ 	if (extended_dest) {
+ 		u32 action;
+ 
+ 		action = fte->action.action &
+ 			~MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT;
+ 		MLX5_SET(flow_context, in_flow_context, action, action);
+ 	} else {
+ 		MLX5_SET(flow_context, in_flow_context, action,
+ 			 fte->action.action);
+ 		MLX5_SET(flow_context, in_flow_context, packet_reformat_id,
+ 			 fte->action.reformat_id);
+ 	}
++>>>>>>> a2c6162b12f1 (net/mlx5: Support extended destination format in flow steering command)
  	MLX5_SET(flow_context, in_flow_context, modify_header_id,
  		 fte->action.modify_id);
  
@@@ -412,8 -486,8 +484,13 @@@
  				continue;
  
  			MLX5_SET(flow_counter_list, in_dests, flow_counter_id,
++<<<<<<< HEAD
 +				 dst->dest_attr.counter->id);
 +			in_dests += MLX5_ST_SZ_BYTES(dest_format_struct);
++=======
+ 				 dst->dest_attr.counter_id);
+ 			in_dests += dst_cnt_size;
++>>>>>>> a2c6162b12f1 (net/mlx5: Support extended destination format in flow steering command)
  			list_size++;
  		}
  		if (list_size > max_list_size) {
diff --cc include/linux/mlx5/fs.h
index 7035fec2adf8,9df51da04621..000000000000
--- a/include/linux/mlx5/fs.h
+++ b/include/linux/mlx5/fs.h
@@@ -84,6 -86,11 +84,14 @@@ struct mlx5_flow_spec 
  	u32  match_value[MLX5_ST_SZ_DW(fte_match_param)];
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	MLX5_FLOW_DEST_VPORT_VHCA_ID      = BIT(0),
+ 	MLX5_FLOW_DEST_VPORT_REFORMAT_ID  = BIT(1),
+ };
+ 
++>>>>>>> a2c6162b12f1 (net/mlx5: Support extended destination format in flow steering command)
  struct mlx5_flow_destination {
  	enum mlx5_flow_destination_type	type;
  	union {
@@@ -94,7 -101,8 +102,12 @@@
  		struct {
  			u16		num;
  			u16		vhca_id;
++<<<<<<< HEAD
 +			bool		vhca_id_valid;
++=======
+ 			u32		reformat_id;
+ 			u8		flags;
++>>>>>>> a2c6162b12f1 (net/mlx5: Support extended destination format in flow steering command)
  		} vport;
  	};
  };
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
* Unmerged path include/linux/mlx5/fs.h
