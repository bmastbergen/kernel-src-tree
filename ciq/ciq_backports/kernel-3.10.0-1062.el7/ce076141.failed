powerpc/bpf: Implement support for tail calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powerpc] bpf: Implement support for tail calls (Yauheni Kaliuta) [1637441]
Rebuild_FUZZ: 90.24%
commit-author Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
commit ce0761419faefbe9e450749ccc879ff88843af12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ce076141.failed

Tail calls allow JIT'ed eBPF programs to call into other JIT'ed eBPF
programs. This can be achieved either by:
(1) retaining the stack setup by the first eBPF program and having all
subsequent eBPF programs re-using it, or,
(2) by unwinding/tearing down the stack and having each eBPF program
deal with its own stack as it sees fit.

To ensure that this does not create loops, there is a limit to how many
tail calls can be done (currently 32). This requires the JIT'ed code to
maintain a count of the number of tail calls done so far.

Approach (1) is simple, but requires every eBPF program to have (almost)
the same prologue/epilogue, regardless of whether they need it. This is
inefficient for small eBPF programs which may not sometimes need a
prologue at all. As such, to minimize impact of tail call
implementation, we use approach (2) here which needs each eBPF program
in the chain to use its own prologue/epilogue. This is not ideal when
many tail calls are involved and when all the eBPF programs in the chain
have similar prologue/epilogue. However, the impact is restricted to
programs that do tail calls. Individual eBPF programs are not affected.

We maintain the tail call count in a fixed location on the stack and
updated tail call count values are passed in through this. The very
first eBPF program in a chain sets this up to 0 (the first 2
instructions). Subsequent tail calls skip the first two eBPF JIT
instructions to maintain the count. For programs that don't do tail
calls themselves, the first two instructions are NOPs.

	Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit ce0761419faefbe9e450749ccc879ff88843af12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/ppc-opcode.h
#	arch/powerpc/net/bpf_jit64.h
#	arch/powerpc/net/bpf_jit_comp64.c
diff --cc arch/powerpc/include/asm/ppc-opcode.h
index 98bb411db342,54ff8ce7fa96..000000000000
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@@ -215,16 -236,23 +215,22 @@@
  #define PPC_INST_STWU			0x94000000
  #define PPC_INST_MFLR			0x7c0802a6
  #define PPC_INST_MTLR			0x7c0803a6
+ #define PPC_INST_MTCTR			0x7c0903a6
  #define PPC_INST_CMPWI			0x2c000000
  #define PPC_INST_CMPDI			0x2c200000
 -#define PPC_INST_CMPW			0x7c000000
 -#define PPC_INST_CMPD			0x7c200000
  #define PPC_INST_CMPLW			0x7c000040
 -#define PPC_INST_CMPLD			0x7c200040
  #define PPC_INST_CMPLWI			0x28000000
 -#define PPC_INST_CMPLDI			0x28200000
  #define PPC_INST_ADDI			0x38000000
  #define PPC_INST_ADDIS			0x3c000000
  #define PPC_INST_ADD			0x7c000214
  #define PPC_INST_SUB			0x7c000050
  #define PPC_INST_BLR			0x4e800020
  #define PPC_INST_BLRL			0x4e800021
++<<<<<<< HEAD
++=======
+ #define PPC_INST_BCTR			0x4e800420
+ #define PPC_INST_MULLD			0x7c0001d2
++>>>>>>> ce0761419fae (powerpc/bpf: Implement support for tail calls)
  #define PPC_INST_MULLW			0x7c0001d6
  #define PPC_INST_MULHWU			0x7c000016
  #define PPC_INST_MULLI			0x1c000000
* Unmerged path arch/powerpc/net/bpf_jit64.h
* Unmerged path arch/powerpc/net/bpf_jit_comp64.c
* Unmerged path arch/powerpc/include/asm/ppc-opcode.h
diff --git a/arch/powerpc/net/bpf_jit.h b/arch/powerpc/net/bpf_jit.h
index 676a310e1761..8efcaa31949c 100644
--- a/arch/powerpc/net/bpf_jit.h
+++ b/arch/powerpc/net/bpf_jit.h
@@ -77,6 +77,8 @@ DECLARE_LOAD_FUNC(sk_load_byte_msh);
 #define PPC_BLR()		EMIT(PPC_INST_BLR)
 #define PPC_BLRL()		EMIT(PPC_INST_BLRL)
 #define PPC_MTLR(r)		EMIT(PPC_INST_MTLR | ___PPC_RT(r))
+#define PPC_BCTR()		EMIT(PPC_INST_BCTR)
+#define PPC_MTCTR(r)		EMIT(PPC_INST_MTCTR | ___PPC_RT(r))
 #define PPC_ADDI(d, a, i)	EMIT(PPC_INST_ADDI | ___PPC_RT(d) |	      \
 				     ___PPC_RA(a) | IMM_L(i))
 #define PPC_MR(d, a)		PPC_OR(d, a, a)
* Unmerged path arch/powerpc/net/bpf_jit64.h
* Unmerged path arch/powerpc/net/bpf_jit_comp64.c
