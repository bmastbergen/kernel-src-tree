RDMA/mlx5: Add new flow action verb - packet reformat

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Mark Bloch <markb@mellanox.com>
commit 08aeb97cb82483192bd8ad8e60d1b73ce1b75923
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/08aeb97c.failed

For now, only add L2_TUNNEL_TO_L2 option. This will allow to perform
generic decap operation if the encapsulating protocol is L2 based, and the
inner packet is also L2 based. For example this can be used to decap VXLAN
packets.

	Signed-off-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 08aeb97cb82483192bd8ad8e60d1b73ce1b75923)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/flow.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
#	include/uapi/rdma/mlx5_user_ioctl_cmds.h
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index 71b1991d86b3,8ac84cc00fd5..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -137,6 -151,11 +137,14 @@@ struct mlx5_ib_pd 
  	u32			pdn;
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	MLX5_IB_FLOW_ACTION_MODIFY_HEADER,
+ 	MLX5_IB_FLOW_ACTION_DECAP,
+ };
+ 
++>>>>>>> 08aeb97cb824 (RDMA/mlx5: Add new flow action verb - packet reformat)
  #define MLX5_IB_FLOW_MCAST_PRIO		(MLX5_BY_PASS_NUM_PRIOS - 1)
  #define MLX5_IB_FLOW_LAST_PRIO		(MLX5_BY_PASS_NUM_REGULAR_PRIOS - 1)
  #if (MLX5_IB_FLOW_LAST_PRIO <= 0)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
index 6b38b6fbd030,b5fda0fcd484..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
@@@ -29,24 -29,24 +29,37 @@@
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
 +#ifndef __MLX5_VXLAN_H__
 +#define __MLX5_VXLAN_H__
  
 -#ifndef MLX5_USER_IOCTL_VERBS_H
 -#define MLX5_USER_IOCTL_VERBS_H
 +#include <linux/mlx5/driver.h>
 +#include "en.h"
  
 -#include <linux/types.h>
 +struct mlx5_vxlan_port;
  
 -enum mlx5_ib_uapi_flow_action_flags {
 -	MLX5_IB_UAPI_FLOW_ACTION_FLAGS_REQUIRE_METADATA	= 1 << 0,
 -};
 +static inline bool mlx5e_vxlan_allowed(struct mlx5_core_dev *mdev)
 +{
 +	return (MLX5_CAP_ETH(mdev, tunnel_stateless_vxlan) &&
 +		mlx5_core_is_pf(mdev));
 +}
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
 +void mlx5e_vxlan_init(struct mlx5e_priv *priv);
 +void mlx5e_vxlan_cleanup(struct mlx5e_priv *priv);
 +void mlx5e_vxlan_add_port(struct mlx5e_priv *priv, u16 port);
 +void mlx5e_vxlan_del_port(struct mlx5e_priv *priv, u16 port);
 +struct mlx5_vxlan_port *mlx5e_vxlan_lookup_port(struct mlx5e_priv *priv, u16 port);
++=======
+ enum mlx5_ib_uapi_flow_table_type {
+ 	MLX5_IB_UAPI_FLOW_TABLE_TYPE_NIC_RX     = 0x0,
+ 	MLX5_IB_UAPI_FLOW_TABLE_TYPE_NIC_TX	= 0x1,
+ };
+ 
+ enum mlx5_ib_uapi_flow_action_packet_reformat_type {
+ 	MLX5_IB_UAPI_FLOW_ACTION_PACKET_REFORMAT_TYPE_L2_TUNNEL_TO_L2 = 0x0,
+ };
+ 
+ #endif
++>>>>>>> 08aeb97cb824 (RDMA/mlx5: Add new flow action verb - packet reformat):include/uapi/rdma/mlx5_user_ioctl_verbs.h
  
 +#endif /* __MLX5_VXLAN_H__ */
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path include/uapi/rdma/mlx5_user_ioctl_cmds.h
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
* Unmerged path include/uapi/rdma/mlx5_user_ioctl_cmds.h
