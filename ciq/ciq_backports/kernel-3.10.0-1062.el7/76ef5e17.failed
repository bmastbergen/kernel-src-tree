keys: Export lookup_user_key to external users

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Dave Jiang <dave.jiang@intel.com>
commit 76ef5e17252789da79db78341851922af0c16181
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/76ef5e17.failed

Export lookup_user_key() symbol in order to allow nvdimm passphrase
update to retrieve user injected keys.

	Signed-off-by: Dave Jiang <dave.jiang@intel.com>
	Acked-by: David Howells <dhowells@redhat.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 76ef5e17252789da79db78341851922af0c16181)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/key.h
#	security/keys/internal.h
diff --cc include/linux/key.h
index bbc61bd8191d,7099985e35a9..000000000000
--- a/include/linux/key.h
+++ b/include/linux/key.h
@@@ -321,6 -346,20 +321,23 @@@ static inline key_serial_t key_serial(c
  
  extern void key_set_timeout(struct key *, unsigned);
  
++<<<<<<< HEAD
++=======
+ extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
+ 				 key_perm_t perm);
+ 
+ /*
+  * The permissions required on a key that we're looking up.
+  */
+ #define	KEY_NEED_VIEW	0x01	/* Require permission to view attributes */
+ #define	KEY_NEED_READ	0x02	/* Require permission to read content */
+ #define	KEY_NEED_WRITE	0x04	/* Require permission to update / modify */
+ #define	KEY_NEED_SEARCH	0x08	/* Require permission to search (keyring) or find (key) */
+ #define	KEY_NEED_LINK	0x10	/* Require permission to link */
+ #define	KEY_NEED_SETATTR 0x20	/* Require permission to change attributes */
+ #define	KEY_NEED_ALL	0x3f	/* All the above permissions */
+ 
++>>>>>>> 76ef5e172527 (keys: Export lookup_user_key to external users)
  static inline short key_read_state(const struct key *key)
  {
  	/* Barrier versus mark_key_instantiated(). */
diff --cc security/keys/internal.h
index 8859fcff15bc,479909b858c7..000000000000
--- a/security/keys/internal.h
+++ b/security/keys/internal.h
@@@ -153,9 -156,8 +153,14 @@@ extern struct key *request_key_and_link
  					struct key *dest_keyring,
  					unsigned long flags);
  
++<<<<<<< HEAD
 +extern int lookup_user_key_possessed(const struct key *key, const void *target);
 +extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
 +				 key_perm_t perm);
++=======
+ extern bool lookup_user_key_possessed(const struct key *key,
+ 				      const struct key_match_data *match_data);
++>>>>>>> 76ef5e172527 (keys: Export lookup_user_key to external users)
  #define KEY_LOOKUP_CREATE	0x01
  #define KEY_LOOKUP_PARTIAL	0x02
  #define KEY_LOOKUP_FOR_UNLINK	0x04
* Unmerged path include/linux/key.h
* Unmerged path security/keys/internal.h
diff --git a/security/keys/process_keys.c b/security/keys/process_keys.c
index f65416770924..6b26c19ca1e0 100644
--- a/security/keys/process_keys.c
+++ b/security/keys/process_keys.c
@@ -751,6 +751,7 @@ reget_creds:
 	put_cred(ctx.cred);
 	goto try_again;
 }
+EXPORT_SYMBOL(lookup_user_key);
 
 /*
  * Join the named keyring as the session keyring if possible else attempt to
