slub: extend slub debug to handle multiple slabs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Aaron Tomlin <atomlin@redhat.com>
commit c5fd3ca06b4699e251b4a1fb808c2d5124494101
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/c5fd3ca0.failed

Extend the slub_debug syntax to "slub_debug=<flags>[,<slub>]*", where
<slub> may contain an asterisk at the end.  For example, the following
would poison all kmalloc slabs:

	slub_debug=P,kmalloc*

and the following would apply the default flags to all kmalloc and all
block IO slabs:

	slub_debug=,bio*,kmalloc*

Please note that a similar patch was posted by Iliyan Malchev some time
ago but was never merged:

	https://marc.info/?l=linux-mm&m=131283905330474&w=2

Link: http://lkml.kernel.org/r/20180928111139.27962-1-atomlin@redhat.com
	Signed-off-by: Aaron Tomlin <atomlin@redhat.com>
	Acked-by: Christoph Lameter <cl@linux.com>
	Cc: Pekka Enberg <penberg@kernel.org>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Iliyan Malchev <malchev@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c5fd3ca06b4699e251b4a1fb808c2d5124494101)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/vm/slub.rst
#	mm/slub.c
diff --cc mm/slub.c
index f19ffe7aff38,18bd07daf4e4..000000000000
--- a/mm/slub.c
+++ b/mm/slub.c
@@@ -1280,16 -1276,54 +1280,59 @@@ out
  
  __setup("slub_debug", setup_slub_debug);
  
++<<<<<<< HEAD
 +static unsigned long kmem_cache_flags(unsigned long object_size,
 +	unsigned long flags, const char *name,
++=======
+ /*
+  * kmem_cache_flags - apply debugging options to the cache
+  * @object_size:	the size of an object without meta data
+  * @flags:		flags to set
+  * @name:		name of the cache
+  * @ctor:		constructor function
+  *
+  * Debug option(s) are applied to @flags. In addition to the debug
+  * option(s), if a slab name (or multiple) is specified i.e.
+  * slub_debug=<Debug-Options>,<slab name1>,<slab name2> ...
+  * then only the select slabs will receive the debug option(s).
+  */
+ slab_flags_t kmem_cache_flags(unsigned int object_size,
+ 	slab_flags_t flags, const char *name,
++>>>>>>> c5fd3ca06b46 (slub: extend slub debug to handle multiple slabs)
  	void (*ctor)(void *))
  {
- 	/*
- 	 * Enable debugging if selected on the kernel commandline.
- 	 */
- 	if (slub_debug && (!slub_debug_slabs || (name &&
- 		!strncmp(slub_debug_slabs, name, strlen(slub_debug_slabs)))))
- 		flags |= slub_debug;
+ 	char *iter;
+ 	size_t len;
+ 
+ 	/* If slub_debug = 0, it folds into the if conditional. */
+ 	if (!slub_debug_slabs)
+ 		return flags | slub_debug;
+ 
+ 	len = strlen(name);
+ 	iter = slub_debug_slabs;
+ 	while (*iter) {
+ 		char *end, *glob;
+ 		size_t cmplen;
+ 
+ 		end = strchr(iter, ',');
+ 		if (!end)
+ 			end = iter + strlen(iter);
+ 
+ 		glob = strnchr(iter, end - iter, '*');
+ 		if (glob)
+ 			cmplen = glob - iter;
+ 		else
+ 			cmplen = max_t(size_t, len, (end - iter));
+ 
+ 		if (!strncmp(name, iter, cmplen)) {
+ 			flags |= slub_debug;
+ 			break;
+ 		}
+ 
+ 		if (!*end)
+ 			break;
+ 		iter = end + 1;
+ 	}
  
  	return flags;
  }
* Unmerged path Documentation/vm/slub.rst
* Unmerged path Documentation/vm/slub.rst
* Unmerged path mm/slub.c
