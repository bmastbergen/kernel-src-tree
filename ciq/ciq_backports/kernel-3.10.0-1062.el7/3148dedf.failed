r8169: fix powering up RTL8168h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Heiner Kallweit <hkallweit1@gmail.com>
commit 3148dedfe79e422f448a10250d3e2cdf8b7ee617
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/3148dedf.failed

Since commit a92a08499b1f "r8169: improve runtime pm in general and
suspend unused ports" interfaces w/o link are runtime-suspended after
10s. On systems where drivers take longer to load this can lead to the
situation that the interface is runtime-suspended already when it's
initially brought up.
This shouldn't be a problem because rtl_open() resumes MAC/PHY.
However with at least one chip version the interface doesn't properly
come up, as reported here:
https://bugzilla.kernel.org/show_bug.cgi?id=199549

The vendor driver uses a delay to give certain chip versions some
time to resume before starting the PHY configuration. So let's do
the same. I don't know which chip versions may be affected,
therefore apply this delay always.

This patch was reported to fix the issue for RTL8168h.
I was able to reproduce the issue on an Asus H310I-Plus which also
uses a RTL8168h. Also in my case the patch fixed the issue.

	Reported-by: Slava Kardakov <ojab@ojab.ru>
	Tested-by: Slava Kardakov <ojab@ojab.ru>
	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3148dedfe79e422f448a10250d3e2cdf8b7ee617)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/realtek/r8169.c
diff --cc drivers/net/ethernet/realtek/r8169.c
index 00931b73304b,c7aac1fc99e8..000000000000
--- a/drivers/net/ethernet/realtek/r8169.c
+++ b/drivers/net/ethernet/realtek/r8169.c
@@@ -4767,12 -4980,71 +4767,25 @@@ static void rtl_pll_power_down(struct r
  
  static void rtl_pll_power_up(struct rtl8169_private *tp)
  {
++<<<<<<< HEAD
++=======
+ 	rtl_generic_op(tp, tp->pll_power_ops.up);
+ 
+ 	/* give MAC/PHY some time to resume */
+ 	msleep(20);
+ }
+ 
+ static void rtl_init_pll_power_ops(struct rtl8169_private *tp)
+ {
+ 	struct pll_power_ops *ops = &tp->pll_power_ops;
+ 
++>>>>>>> 3148dedfe79e (r8169: fix powering up RTL8168h)
  	switch (tp->mac_version) {
 -	case RTL_GIGA_MAC_VER_07:
 -	case RTL_GIGA_MAC_VER_08:
 -	case RTL_GIGA_MAC_VER_09:
 -	case RTL_GIGA_MAC_VER_10:
 -	case RTL_GIGA_MAC_VER_16:
 -	case RTL_GIGA_MAC_VER_29:
 -	case RTL_GIGA_MAC_VER_30:
 -	case RTL_GIGA_MAC_VER_37:
 -	case RTL_GIGA_MAC_VER_39:
 -	case RTL_GIGA_MAC_VER_43:
 -	case RTL_GIGA_MAC_VER_47:
 -	case RTL_GIGA_MAC_VER_48:
 -		ops->down	= r810x_pll_power_down;
 -		ops->up		= r810x_pll_power_up;
 -		break;
 -
 -	case RTL_GIGA_MAC_VER_11:
 -	case RTL_GIGA_MAC_VER_12:
 -	case RTL_GIGA_MAC_VER_17:
 -	case RTL_GIGA_MAC_VER_18:
 -	case RTL_GIGA_MAC_VER_19:
 -	case RTL_GIGA_MAC_VER_20:
 -	case RTL_GIGA_MAC_VER_21:
 -	case RTL_GIGA_MAC_VER_22:
 -	case RTL_GIGA_MAC_VER_23:
 -	case RTL_GIGA_MAC_VER_24:
 -	case RTL_GIGA_MAC_VER_25:
 -	case RTL_GIGA_MAC_VER_26:
 -	case RTL_GIGA_MAC_VER_27:
 -	case RTL_GIGA_MAC_VER_28:
 -	case RTL_GIGA_MAC_VER_31:
 -	case RTL_GIGA_MAC_VER_32:
 -	case RTL_GIGA_MAC_VER_33:
 -	case RTL_GIGA_MAC_VER_34:
 -	case RTL_GIGA_MAC_VER_35:
 -	case RTL_GIGA_MAC_VER_36:
 -	case RTL_GIGA_MAC_VER_38:
 -	case RTL_GIGA_MAC_VER_40:
 -	case RTL_GIGA_MAC_VER_41:
 -	case RTL_GIGA_MAC_VER_42:
 -	case RTL_GIGA_MAC_VER_44:
 -	case RTL_GIGA_MAC_VER_45:
 -	case RTL_GIGA_MAC_VER_46:
 -	case RTL_GIGA_MAC_VER_49:
 -	case RTL_GIGA_MAC_VER_50:
 -	case RTL_GIGA_MAC_VER_51:
 -		ops->down	= r8168_pll_power_down;
 -		ops->up		= r8168_pll_power_up;
 +	case RTL_GIGA_MAC_VER_01 ... RTL_GIGA_MAC_VER_06:
 +	case RTL_GIGA_MAC_VER_13 ... RTL_GIGA_MAC_VER_15:
  		break;
 -
  	default:
 -		ops->down	= NULL;
 -		ops->up		= NULL;
 -		break;
 +		r8168_pll_power_up(tp);
  	}
  }
  
* Unmerged path drivers/net/ethernet/realtek/r8169.c
