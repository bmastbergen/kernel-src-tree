RDMA/uverbs: Fix error unwind in ib_uverbs_add_one

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit 0099103926b68e6675a1be4644848f5b1c1b6f97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/00991039.failed

The error path has several mistakes

- cdev_del should not be called if cdev_device_add fails
- We must call put_device on all the goto exit paths as that is what frees
  the uapi, SRCU and the struct itself.

While we are here consolidate all the uvdev_dev init that cannot fail at
the top.

Fixes: c5c4d92e70f3 ("RDMA/uverbs: Use cdev_device_add() instead of cdev_add()")
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Reviewed-by: Parav Pandit <parav@mellanox.com>
(cherry picked from commit 0099103926b68e6675a1be4644848f5b1c1b6f97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_main.c
diff --cc drivers/infiniband/core/uverbs_main.c
index 8cc3600913c7,db6de9157668..000000000000
--- a/drivers/infiniband/core/uverbs_main.c
+++ b/drivers/infiniband/core/uverbs_main.c
@@@ -1046,56 -1054,30 +1054,80 @@@ static void ib_uverbs_add_one(struct ib
  	else
  		base = IB_UVERBS_BASE_DEV + devnum;
  
++<<<<<<< HEAD
 +	rcu_assign_pointer(uverbs_dev->ib_dev, device);
 +	uverbs_dev->num_comp_vectors = device->num_comp_vectors;
 +
 +	cdev_init(&uverbs_dev->cdev, NULL);
 +	uverbs_dev->cdev.owner = THIS_MODULE;
 +	uverbs_dev->cdev.ops = device->mmap ? &uverbs_mmap_fops : &uverbs_fops;
 +	cdev_set_parent(&uverbs_dev->cdev, &uverbs_dev->kobj);
 +	kobject_set_name(&uverbs_dev->cdev.kobj, "uverbs%d", uverbs_dev->devnum);
 +	if (cdev_add(&uverbs_dev->cdev, base, 1))
 +		goto err_cdev;
++=======
+ 	if (ib_uverbs_create_uapi(device, uverbs_dev))
+ 		goto err_uapi;
+ 
+ 	uverbs_dev->dev.devt = base;
+ 	dev_set_name(&uverbs_dev->dev, "uverbs%d", uverbs_dev->devnum);
+ 
+ 	cdev_init(&uverbs_dev->cdev,
+ 		  device->mmap ? &uverbs_mmap_fops : &uverbs_fops);
+ 	uverbs_dev->cdev.owner = THIS_MODULE;
+ 
+ 	ret = cdev_device_add(&uverbs_dev->cdev, &uverbs_dev->dev);
+ 	if (ret)
+ 		goto err_uapi;
++>>>>>>> 0099103926b6 (RDMA/uverbs: Fix error unwind in ib_uverbs_add_one)
 +
 +	uverbs_dev->dev = device_create(uverbs_class, device->dev.parent,
 +					uverbs_dev->cdev.dev, uverbs_dev,
 +					"uverbs%d", uverbs_dev->devnum);
 +	if (IS_ERR(uverbs_dev->dev))
 +		goto err_cdev;
 +
 +	if (device_create_file(uverbs_dev->dev, &dev_attr_ibdev))
 +		goto err_class;
 +	if (device_create_file(uverbs_dev->dev, &dev_attr_abi_version))
 +		goto err_class;
 +
 +	if (!device->specs_root) {
 +		const struct uverbs_object_tree_def *default_root[] = {
 +			uverbs_default_get_objects()};
 +
 +		uverbs_dev->specs_root = uverbs_alloc_spec_tree(1,
 +								default_root);
 +		if (IS_ERR(uverbs_dev->specs_root))
 +			goto err_class;
 +
 +		device->specs_root = uverbs_dev->specs_root;
 +	}
  
  	ib_set_client_data(device, &uverbs_client, uverbs_dev);
 +
  	return;
  
++<<<<<<< HEAD
 +err_class:
 +	device_destroy(uverbs_class, uverbs_dev->cdev.dev);
 +
 +err_cdev:
 +	cdev_del(&uverbs_dev->cdev);
++=======
+ err_uapi:
++>>>>>>> 0099103926b6 (RDMA/uverbs: Fix error unwind in ib_uverbs_add_one)
  	clear_bit(devnum, dev_map);
 +
  err:
  	if (atomic_dec_and_test(&uverbs_dev->refcount))
  		ib_uverbs_comp_dev(uverbs_dev);
  	wait_for_completion(&uverbs_dev->comp);
++<<<<<<< HEAD
 +	kobject_put(&uverbs_dev->kobj);
++=======
+ 	put_device(&uverbs_dev->dev);
++>>>>>>> 0099103926b6 (RDMA/uverbs: Fix error unwind in ib_uverbs_add_one)
  	return;
  }
  
* Unmerged path drivers/infiniband/core/uverbs_main.c
