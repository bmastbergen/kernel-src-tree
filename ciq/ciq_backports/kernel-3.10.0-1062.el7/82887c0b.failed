ALSA: hda/i915: Associate audio component with devres

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit 82887c0beb1ee6b33eed8318d8e8d41c5b3eddae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/82887c0b.failed

The HD-audio i915 binding code contains a single pointer, hdac_acomp,
for allowing the access to audio component from the master bind/unbind
callbacks.  This was needed because the callbacks pass only the device
pointer and we can't guarantee the object type assigned to the drvdata
(which is free for each controller driver implementation).
And this implementation will be a problem if we support multiple
components for different DRM drivers, not only i915.

As a solution, allocate the audio component object via devres and
associate it with the given device, so that the component callbacks
can refer to it via devres_find().

The removal of the object is still done half-manually via
devres_destroy() to make the code consistent (although it may work
without the explicit call).

Also, the snd_hda_i915_register_notifier() had the reference to
hdac_acomp as well.  In this patch, the corresponding code is removed
by passing hdac_bus object to the function, too.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 82887c0beb1ee6b33eed8318d8e8d41c5b3eddae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/hda_i915.h
#	sound/hda/hdac_i915.c
#	sound/pci/hda/patch_hdmi.c
#	sound/soc/codecs/hdac_hdmi.c
diff --cc include/sound/hda_i915.h
index c4368bd51aed,648263791559..000000000000
--- a/include/sound/hda_i915.h
+++ b/include/sound/hda_i915.h
@@@ -16,9 -17,10 +16,14 @@@ int snd_hdac_acomp_get_eld(struct hdac_
  			   bool *audio_enabled, char *buffer, int max_bytes);
  int snd_hdac_i915_init(struct hdac_bus *bus);
  int snd_hdac_i915_exit(struct hdac_bus *bus);
++<<<<<<< HEAD
 +int snd_hdac_i915_register_notifier(const struct i915_audio_component_audio_ops *);
++=======
+ int snd_hdac_i915_register_notifier(struct hdac_bus *bus,
+ 				    const struct drm_audio_component_audio_ops *ops);
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  #else
 -static inline int snd_hdac_set_codec_wakeup(struct hdac_bus *bus, bool enable)
 +static int snd_hdac_set_codec_wakeup(struct hdac_bus *bus, bool enable)
  {
  	return 0;
  }
@@@ -48,7 -50,8 +53,12 @@@ static inline int snd_hdac_i915_exit(st
  {
  	return 0;
  }
++<<<<<<< HEAD
 +static inline int snd_hdac_i915_register_notifier(const struct i915_audio_component_audio_ops *ops)
++=======
+ static inline int snd_hdac_i915_register_notifier(struct hdac_bus *bus,
+ 						  const struct drm_audio_component_audio_ops *ops)
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  {
  	return -ENODEV;
  }
diff --cc sound/hda/hdac_i915.c
index 6ecc8d650ee7,861b77bbc7df..000000000000
--- a/sound/hda/hdac_i915.c
+++ b/sound/hda/hdac_i915.c
@@@ -22,7 -22,14 +22,18 @@@
  #include <sound/hda_i915.h>
  #include <sound/hda_register.h>
  
++<<<<<<< HEAD
 +static struct i915_audio_component *hdac_acomp;
++=======
+ static void hdac_acomp_release(struct device *dev, void *res)
+ {
+ }
+ 
+ static struct drm_audio_component *hdac_get_acomp(struct device *dev)
+ {
+ 	return devres_find(dev, hdac_acomp_release, NULL, NULL);
+ }
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  
  /**
   * snd_hdac_set_codec_wakeup - Enable / disable HDMI/DP codec wakeup
@@@ -262,7 -269,7 +273,11 @@@ EXPORT_SYMBOL_GPL(snd_hdac_acomp_get_el
  
  static int hdac_component_master_bind(struct device *dev)
  {
++<<<<<<< HEAD
 +	struct i915_audio_component *acomp = hdac_acomp;
++=======
+ 	struct drm_audio_component *acomp = hdac_get_acomp(dev);
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  	int ret;
  
  	ret = component_bind_all(dev, acomp);
@@@ -294,7 -301,7 +309,11 @@@ out_unbind
  
  static void hdac_component_master_unbind(struct device *dev)
  {
++<<<<<<< HEAD
 +	struct i915_audio_component *acomp = hdac_acomp;
++=======
+ 	struct drm_audio_component *acomp = hdac_get_acomp(dev);
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  
  	module_put(acomp->ops->owner);
  	component_unbind_all(dev, acomp);
@@@ -323,12 -331,13 +343,17 @@@ static int hdac_component_master_match(
   *
   * Returns zero for success or a negative error code.
   */
++<<<<<<< HEAD
 +int snd_hdac_i915_register_notifier(const struct i915_audio_component_audio_ops *aops)
++=======
+ int snd_hdac_i915_register_notifier(struct hdac_bus *bus,
+ 				    const struct drm_audio_component_audio_ops *aops)
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  {
- 	if (!hdac_acomp)
+ 	if (!bus->audio_component)
  		return -ENODEV;
  
- 	hdac_acomp->audio_ops = aops;
+ 	bus->audio_component->audio_ops = aops;
  	return 0;
  }
  EXPORT_SYMBOL_GPL(snd_hdac_i915_register_notifier);
@@@ -361,20 -370,23 +386,32 @@@ int snd_hdac_i915_init(struct hdac_bus 
  {
  	struct component_match *match = NULL;
  	struct device *dev = bus->dev;
 -	struct i915_audio_component *i915_acomp;
 -	struct drm_audio_component *acomp;
 +	struct i915_audio_component *acomp;
  	int ret;
  
++<<<<<<< HEAD
 +	if (!i915_gfx_present())
 +		return -ENODEV;
 +
 +	if (WARN_ON(hdac_acomp))
 +		return -EBUSY;
 +
 +	acomp = kzalloc(sizeof(*acomp), GFP_KERNEL);
 +	if (!acomp)
++=======
+ 	if (WARN_ON(hdac_get_acomp(dev)))
+ 		return -EBUSY;
+ 
+ 	if (!i915_gfx_present())
+ 		return -ENODEV;
+ 
+ 	i915_acomp = devres_alloc(hdac_acomp_release, sizeof(*i915_acomp),
+ 				  GFP_KERNEL);
+ 	if (!i915_acomp)
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  		return -ENOMEM;
 -	acomp = &i915_acomp->base;
  	bus->audio_component = acomp;
- 	hdac_acomp = acomp;
+ 	devres_add(dev, acomp);
  
  	component_match_add(dev, &match, hdac_component_master_match, bus);
  	ret = component_master_add_with_match(dev, &hdac_component_master_ops,
diff --cc sound/pci/hda/patch_hdmi.c
index 4648c40d4484,bf174a013f2d..000000000000
--- a/sound/pci/hda/patch_hdmi.c
+++ b/sound/pci/hda/patch_hdmi.c
@@@ -2524,8 -2517,9 +2524,14 @@@ static void register_i915_notifier(stru
  	 * We need make sure audio_ptr is really setup
  	 */
  	wmb();
++<<<<<<< HEAD
 +	spec->i915_audio_ops.pin_eld_notify = intel_pin_eld_notify;
 +	snd_hdac_i915_register_notifier(&spec->i915_audio_ops);
++=======
+ 	spec->drm_audio_ops.pin_eld_notify = intel_pin_eld_notify;
+ 	snd_hdac_i915_register_notifier(&codec->bus->core,
+ 					&spec->drm_audio_ops);
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  }
  
  /* setup_stream ops override for HSW+ */
diff --cc sound/soc/codecs/hdac_hdmi.c
index 84f7a7a36e4b,2b7c33db4ded..000000000000
--- a/sound/soc/codecs/hdac_hdmi.c
+++ b/sound/soc/codecs/hdac_hdmi.c
@@@ -1823,11 -1811,10 +1823,16 @@@ static int hdmi_codec_probe(struct snd_
  	if (ret < 0)
  		return ret;
  
++<<<<<<< HEAD
 +	aops.audio_ptr = edev;
 +	ret = snd_hdac_i915_register_notifier(&aops);
++=======
+ 	aops.audio_ptr = hdev;
+ 	ret = snd_hdac_i915_register_notifier(hdev->bus, &aops);
++>>>>>>> 82887c0beb1e (ALSA: hda/i915: Associate audio component with devres)
  	if (ret < 0) {
 -		dev_err(&hdev->dev, "notifier register failed: err: %d\n", ret);
 +		dev_err(&edev->hdev.dev, "notifier register failed: err: %d\n",
 +				ret);
  		return ret;
  	}
  
* Unmerged path include/sound/hda_i915.h
* Unmerged path sound/hda/hdac_i915.c
* Unmerged path sound/pci/hda/patch_hdmi.c
* Unmerged path sound/soc/codecs/hdac_hdmi.c
