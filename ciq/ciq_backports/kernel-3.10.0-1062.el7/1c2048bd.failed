scsi: mpt3sas: switch to generic DMA API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: switch to generic DMA API (Tomas Henzl) [1642370]
Rebuild_FUZZ: 91.89%
commit-author Christoph Hellwig <hch@lst.de>
commit 1c2048bdc3f4ff3337613c27519cf608916e95a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/1c2048bd.failed

Switch from the legacy PCI DMA API to the generic DMA API.

Also simplify setting the DMA mask a bit.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 1c2048bdc3f4ff3337613c27519cf608916e95a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.c
index 909e8d966528,2500377d0723..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@@ -1883,40 -2552,41 +1883,58 @@@ _base_build_sg_ieee(struct MPT3SAS_ADAP
  static int
  _base_config_dma_addressing(struct MPT3SAS_ADAPTER *ioc, struct pci_dev *pdev)
  {
+ 	u64 required_mask, coherent_mask;
  	struct sysinfo s;
- 	u64 consistent_dma_mask;
  
++<<<<<<< HEAD
 +	if (ioc->dma_mask)
 +		consistent_dma_mask = DMA_BIT_MASK(64);
 +	else
 +		consistent_dma_mask = DMA_BIT_MASK(32);
++=======
+ 	if (ioc->is_mcpu_endpoint)
+ 		goto try_32bit;
  
- 	if (sizeof(dma_addr_t) > 4) {
- 		const uint64_t required_mask =
- 		    dma_get_required_mask(&pdev->dev);
- 		if ((required_mask > DMA_BIT_MASK(32)) &&
- 		    !pci_set_dma_mask(pdev, DMA_BIT_MASK(64)) &&
- 		    !pci_set_consistent_dma_mask(pdev, consistent_dma_mask)) {
- 			ioc->base_add_sg_single = &_base_add_sg_single_64;
- 			ioc->sge_size = sizeof(Mpi2SGESimple64_t);
- 			ioc->dma_mask = 64;
- 			goto out;
- 		}
- 	}
+ 	required_mask = dma_get_required_mask(&pdev->dev);
+ 	if (sizeof(dma_addr_t) == 4 || required_mask == 32)
+ 		goto try_32bit;
++>>>>>>> 1c2048bdc3f4 (scsi: mpt3sas: switch to generic DMA API)
+ 
+ 	if (ioc->dma_mask)
+ 		coherent_mask = DMA_BIT_MASK(64);
+ 	else
+ 		coherent_mask = DMA_BIT_MASK(32);
+ 
+ 	if (dma_set_mask(&pdev->dev, DMA_BIT_MASK(64)) ||
+ 	    dma_set_coherent_mask(&pdev->dev, coherent_mask))
+ 		goto try_32bit;
+ 
+ 	ioc->base_add_sg_single = &_base_add_sg_single_64;
+ 	ioc->sge_size = sizeof(Mpi2SGESimple64_t);
+ 	ioc->dma_mask = 64;
+ 	goto out;
  
++<<<<<<< HEAD
 +	if (!pci_set_dma_mask(pdev, DMA_BIT_MASK(32))
 +	    && !pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(32))) {
 +		ioc->base_add_sg_single = &_base_add_sg_single_32;
 +		ioc->sge_size = sizeof(Mpi2SGESimple32_t);
 +		ioc->dma_mask = 32;
 +	} else
++=======
+  try_32bit:
+ 	if (dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32)))
++>>>>>>> 1c2048bdc3f4 (scsi: mpt3sas: switch to generic DMA API)
  		return -ENODEV;
  
+ 	ioc->base_add_sg_single = &_base_add_sg_single_32;
+ 	ioc->sge_size = sizeof(Mpi2SGESimple32_t);
+ 	ioc->dma_mask = 32;
   out:
  	si_meminfo(&s);
 -	ioc_info(ioc, "%d BIT PCI BUS DMA ADDRESSING SUPPORTED, total mem (%ld kB)\n",
 -		 ioc->dma_mask, convert_to_kb(s.totalram));
 +	pr_info(MPT3SAS_FMT
 +		"%d BIT PCI BUS DMA ADDRESSING SUPPORTED, total mem (%ld kB)\n",
 +		ioc->name, ioc->dma_mask, convert_to_kb(s.totalram));
  
  	return 0;
  }
@@@ -3013,11 -3775,11 +3031,11 @@@ _base_display_fwpkg_version(struct MPT3
  	}
  
  	data_length = sizeof(Mpi2FWImageHeader_t);
- 	fwpkg_data = pci_alloc_consistent(ioc->pdev, data_length,
- 			&fwpkg_data_dma);
+ 	fwpkg_data = dma_alloc_coherent(&ioc->pdev->dev, data_length,
+ 			&fwpkg_data_dma, GFP_KERNEL);
  	if (!fwpkg_data) {
 -		ioc_err(ioc, "failure at %s:%d/%s()!\n",
 -			__FILE__, __LINE__, __func__);
 +		pr_err(MPT3SAS_FMT "failure at %s:%d/%s()!\n",
 +				ioc->name, __FILE__, __LINE__, __func__);
  		return -ENOMEM;
  	}
  
@@@ -3352,17 -4137,18 +3370,17 @@@ static voi
  _base_release_memory_pools(struct MPT3SAS_ADAPTER *ioc)
  {
  	int i = 0;
 -	int j = 0;
 -	struct chain_tracker *ct;
  	struct reply_post_struct *rps;
  
 -	dexitprintk(ioc, ioc_info(ioc, "%s\n", __func__));
 +	dexitprintk(ioc, pr_info(MPT3SAS_FMT "%s\n", ioc->name,
 +	    __func__));
  
  	if (ioc->request) {
- 		pci_free_consistent(ioc->pdev, ioc->request_dma_sz,
+ 		dma_free_coherent(&ioc->pdev->dev, ioc->request_dma_sz,
  		    ioc->request,  ioc->request_dma);
 -		dexitprintk(ioc,
 -			    ioc_info(ioc, "request_pool(0x%p): free\n",
 -				     ioc->request));
 +		dexitprintk(ioc, pr_info(MPT3SAS_FMT
 +			"request_pool(0x%p): free\n",
 +			ioc->name, ioc->request));
  		ioc->request = NULL;
  	}
  
@@@ -3421,11 -4207,21 +3439,18 @@@
  		kfree(ioc->reply_post);
  	}
  
 -	if (ioc->pcie_sgl_dma_pool) {
 -		for (i = 0; i < ioc->scsiio_depth; i++) {
 -			dma_pool_free(ioc->pcie_sgl_dma_pool,
 -					ioc->pcie_sg_lookup[i].pcie_sgl,
 -					ioc->pcie_sg_lookup[i].pcie_sgl_dma);
 -		}
 -		if (ioc->pcie_sgl_dma_pool)
 -			dma_pool_destroy(ioc->pcie_sgl_dma_pool);
 -	}
 -
  	if (ioc->config_page) {
++<<<<<<< HEAD
 +		dexitprintk(ioc, pr_info(MPT3SAS_FMT
 +		    "config_page(0x%p): free\n", ioc->name,
 +		    ioc->config_page));
 +		pci_free_consistent(ioc->pdev, ioc->config_page_sz,
++=======
+ 		dexitprintk(ioc,
+ 			    ioc_info(ioc, "config_page(0x%p): free\n",
+ 				     ioc->config_page));
+ 		dma_free_coherent(&ioc->pdev->dev, ioc->config_page_sz,
++>>>>>>> 1c2048bdc3f4 (scsi: mpt3sas: switch to generic DMA API)
  		    ioc->config_page, ioc->config_page_dma);
  	}
  
@@@ -3718,12 -4512,12 +3743,19 @@@ _base_allocate_memory_pools(struct MPT3
  	sz += (ioc->internal_depth * ioc->request_sz);
  
  	ioc->request_dma_sz = sz;
- 	ioc->request = pci_alloc_consistent(ioc->pdev, sz, &ioc->request_dma);
+ 	ioc->request = dma_alloc_coherent(&ioc->pdev->dev, sz,
+ 			&ioc->request_dma, GFP_KERNEL);
  	if (!ioc->request) {
++<<<<<<< HEAD
 +		pr_err(MPT3SAS_FMT "request pool: pci_alloc_consistent " \
 +		    "failed: hba_depth(%d), chains_per_io(%d), frame_sz(%d), "
 +		    "total(%d kB)\n", ioc->name, ioc->hba_queue_depth,
 +		    ioc->chains_needed_per_io, ioc->request_sz, sz/1024);
++=======
+ 		ioc_err(ioc, "request pool: dma_alloc_coherent failed: hba_depth(%d), chains_per_io(%d), frame_sz(%d), total(%d kB)\n",
+ 			ioc->hba_queue_depth, ioc->chains_needed_per_io,
+ 			ioc->request_sz, sz / 1024);
++>>>>>>> 1c2048bdc3f4 (scsi: mpt3sas: switch to generic DMA API)
  		if (ioc->scsiio_depth < MPT3SAS_SAS_QUEUE_DEPTH)
  			goto out;
  		retry_sz = 64;
@@@ -3733,10 -4527,9 +3765,16 @@@
  	}
  
  	if (retry_sz)
++<<<<<<< HEAD
 +		pr_err(MPT3SAS_FMT "request pool: pci_alloc_consistent " \
 +		    "succeed: hba_depth(%d), chains_per_io(%d), frame_sz(%d), "
 +		    "total(%d kb)\n", ioc->name, ioc->hba_queue_depth,
 +		    ioc->chains_needed_per_io, ioc->request_sz, sz/1024);
++=======
+ 		ioc_err(ioc, "request pool: dma_alloc_coherent succeed: hba_depth(%d), chains_per_io(%d), frame_sz(%d), total(%d kb)\n",
+ 			ioc->hba_queue_depth, ioc->chains_needed_per_io,
+ 			ioc->request_sz, sz / 1024);
++>>>>>>> 1c2048bdc3f4 (scsi: mpt3sas: switch to generic DMA API)
  
  	/* hi-priority queue */
  	ioc->hi_priority = ioc->request + ((ioc->scsiio_depth + 1) *
@@@ -3962,28 -4815,26 +4000,28 @@@
  		}
  	}
  	ioc->config_page_sz = 512;
- 	ioc->config_page = pci_alloc_consistent(ioc->pdev,
- 	    ioc->config_page_sz, &ioc->config_page_dma);
+ 	ioc->config_page = dma_alloc_coherent(&ioc->pdev->dev,
+ 			ioc->config_page_sz, &ioc->config_page_dma, GFP_KERNEL);
  	if (!ioc->config_page) {
 -		ioc_err(ioc, "config page: dma_pool_alloc failed\n");
 +		pr_err(MPT3SAS_FMT
 +			"config page: dma_pool_alloc failed\n",
 +			ioc->name);
  		goto out;
  	}
 -	dinitprintk(ioc,
 -		    ioc_info(ioc, "config page(0x%p): size(%d)\n",
 -			     ioc->config_page, ioc->config_page_sz));
 -	dinitprintk(ioc,
 -		    ioc_info(ioc, "config_page_dma(0x%llx)\n",
 -			     (unsigned long long)ioc->config_page_dma));
 +	dinitprintk(ioc, pr_info(MPT3SAS_FMT
 +		"config page(0x%p): size(%d)\n",
 +		ioc->name, ioc->config_page, ioc->config_page_sz));
 +	dinitprintk(ioc, pr_info(MPT3SAS_FMT "config_page_dma(0x%llx)\n",
 +		ioc->name, (unsigned long long)ioc->config_page_dma));
  	total_sz += ioc->config_page_sz;
  
 -	ioc_info(ioc, "Allocated physical memory: size(%d kB)\n",
 -		 total_sz / 1024);
 -	ioc_info(ioc, "Current Controller Queue Depth(%d),Max Controller Queue Depth(%d)\n",
 -		 ioc->shost->can_queue, facts->RequestCredit);
 -	ioc_info(ioc, "Scatter Gather Elements per IO(%d)\n",
 -		 ioc->shost->sg_tablesize);
 +	pr_info(MPT3SAS_FMT "Allocated physical memory: size(%d kB)\n",
 +	    ioc->name, total_sz/1024);
 +	pr_info(MPT3SAS_FMT
 +		"Current Controller Queue Depth(%d),Max Controller Queue Depth(%d)\n",
 +	    ioc->name, ioc->shost->can_queue, facts->RequestCredit);
 +	pr_info(MPT3SAS_FMT "Scatter Gather Elements per IO(%d)\n",
 +	    ioc->name, ioc->shost->sg_tablesize);
  	return 0;
  
   out:
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.c
diff --git a/drivers/scsi/mpt3sas/mpt3sas_ctl.c b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
index bdd5dacbbbc9..3c9f15dffcdc 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_ctl.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
@@ -738,8 +738,8 @@ _ctl_do_mpt_command(struct MPT3SAS_ADAPTER *ioc, struct mpt3_ioctl_command karg,
 
 	/* obtain dma-able memory for data transfer */
 	if (data_out_sz) /* WRITE */ {
-		data_out = pci_alloc_consistent(ioc->pdev, data_out_sz,
-		    &data_out_dma);
+		data_out = dma_alloc_coherent(&ioc->pdev->dev, data_out_sz,
+				&data_out_dma, GFP_KERNEL);
 		if (!data_out) {
 			pr_err("failure at %s:%d/%s()!\n", __FILE__,
 			    __LINE__, __func__);
@@ -758,8 +758,8 @@ _ctl_do_mpt_command(struct MPT3SAS_ADAPTER *ioc, struct mpt3_ioctl_command karg,
 	}
 
 	if (data_in_sz) /* READ */ {
-		data_in = pci_alloc_consistent(ioc->pdev, data_in_sz,
-		    &data_in_dma);
+		data_in = dma_alloc_coherent(&ioc->pdev->dev, data_in_sz,
+				&data_in_dma, GFP_KERNEL);
 		if (!data_in) {
 			pr_err("failure at %s:%d/%s()!\n", __FILE__,
 			    __LINE__, __func__);
@@ -1027,11 +1027,11 @@ _ctl_do_mpt_command(struct MPT3SAS_ADAPTER *ioc, struct mpt3_ioctl_command karg,
 
 	/* free memory associated with sg buffers */
 	if (data_in)
-		pci_free_consistent(ioc->pdev, data_in_sz, data_in,
+		dma_free_coherent(&ioc->pdev->dev, data_in_sz, data_in,
 		    data_in_dma);
 
 	if (data_out)
-		pci_free_consistent(ioc->pdev, data_out_sz, data_out,
+		dma_free_coherent(&ioc->pdev->dev, data_out_sz, data_out,
 		    data_out_dma);
 
 	kfree(mpi_request);
@@ -1501,9 +1501,9 @@ _ctl_diag_register_2(struct MPT3SAS_ADAPTER *ioc,
 	if (request_data) {
 		request_data_dma = ioc->diag_buffer_dma[buffer_type];
 		if (request_data_sz != ioc->diag_buffer_sz[buffer_type]) {
-			pci_free_consistent(ioc->pdev,
-			    ioc->diag_buffer_sz[buffer_type],
-			    request_data, request_data_dma);
+			dma_free_coherent(&ioc->pdev->dev,
+					ioc->diag_buffer_sz[buffer_type],
+					request_data, request_data_dma);
 			request_data = NULL;
 		}
 	}
@@ -1511,8 +1511,8 @@ _ctl_diag_register_2(struct MPT3SAS_ADAPTER *ioc,
 	if (request_data == NULL) {
 		ioc->diag_buffer_sz[buffer_type] = 0;
 		ioc->diag_buffer_dma[buffer_type] = 0;
-		request_data = pci_alloc_consistent(
-			ioc->pdev, request_data_sz, &request_data_dma);
+		request_data = dma_alloc_coherent(&ioc->pdev->dev,
+				request_data_sz, &request_data_dma, GFP_KERNEL);
 		if (request_data == NULL) {
 			pr_err(MPT3SAS_FMT "%s: failed allocating memory" \
 			    " for diag buffers, requested size(%d)\n",
@@ -1587,7 +1587,7 @@ _ctl_diag_register_2(struct MPT3SAS_ADAPTER *ioc,
  out:
 
 	if (rc && request_data)
-		pci_free_consistent(ioc->pdev, request_data_sz,
+		dma_free_coherent(&ioc->pdev->dev, request_data_sz,
 		    request_data, request_data_dma);
 
 	ioc->ctl_cmds.status = MPT3_CMD_NOT_USED;
@@ -1732,8 +1732,8 @@ _ctl_diag_unregister(struct MPT3SAS_ADAPTER *ioc, void __user *arg)
 
 	request_data_sz = ioc->diag_buffer_sz[buffer_type];
 	request_data_dma = ioc->diag_buffer_dma[buffer_type];
-	pci_free_consistent(ioc->pdev, request_data_sz,
-	    request_data, request_data_dma);
+	dma_free_coherent(&ioc->pdev->dev, request_data_sz,
+			request_data, request_data_dma);
 	ioc->diag_buffer[buffer_type] = NULL;
 	ioc->diag_buffer_status[buffer_type] = 0;
 	return 0;
@@ -3503,8 +3503,10 @@ mpt3sas_ctl_exit(ushort hbas_to_enumerate)
 			if ((ioc->diag_buffer_status[i] &
 			    MPT3_DIAG_BUFFER_IS_RELEASED))
 				continue;
-			pci_free_consistent(ioc->pdev, ioc->diag_buffer_sz[i],
-			ioc->diag_buffer[i], ioc->diag_buffer_dma[i]);
+			dma_free_coherent(&ioc->pdev->dev,
+					  ioc->diag_buffer_sz[i],
+					  ioc->diag_buffer[i],
+					  ioc->diag_buffer_dma[i]);
 			ioc->diag_buffer[i] = NULL;
 			ioc->diag_buffer_status[i] = 0;
 		}
diff --git a/drivers/scsi/mpt3sas/mpt3sas_transport.c b/drivers/scsi/mpt3sas/mpt3sas_transport.c
index 2bfb87b6c163..a27d6a4bcfb5 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_transport.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_transport.c
@@ -359,9 +359,8 @@ _transport_expander_report_manufacture(struct MPT3SAS_ADAPTER *ioc,
 
 	data_out_sz = sizeof(struct rep_manu_request);
 	data_in_sz = sizeof(struct rep_manu_reply);
-	data_out = pci_alloc_consistent(ioc->pdev, data_out_sz + data_in_sz,
-	    &data_out_dma);
-
+	data_out = dma_alloc_coherent(&ioc->pdev->dev, data_out_sz + data_in_sz,
+			&data_out_dma, GFP_KERNEL);
 	if (!data_out) {
 		pr_err("failure at %s:%d/%s()!\n", __FILE__,
 		    __LINE__, __func__);
@@ -448,7 +447,7 @@ _transport_expander_report_manufacture(struct MPT3SAS_ADAPTER *ioc,
  out:
 	ioc->transport_cmds.status = MPT3_CMD_NOT_USED;
 	if (data_out)
-		pci_free_consistent(ioc->pdev, data_out_sz + data_in_sz,
+		dma_free_coherent(&ioc->pdev->dev, data_out_sz + data_in_sz,
 		    data_out, data_out_dma);
 
 	mutex_unlock(&ioc->transport_cmds.mutex);
@@ -1160,7 +1159,8 @@ _transport_get_expander_phy_error_log(struct MPT3SAS_ADAPTER *ioc,
 
 	sz = sizeof(struct phy_error_log_request) +
 	    sizeof(struct phy_error_log_reply);
-	data_out = pci_alloc_consistent(ioc->pdev, sz, &data_out_dma);
+	data_out = dma_alloc_coherent(&ioc->pdev->dev, sz, &data_out_dma,
+			GFP_KERNEL);
 	if (!data_out) {
 		pr_err("failure at %s:%d/%s()!\n", __FILE__,
 		    __LINE__, __func__);
@@ -1252,7 +1252,7 @@ _transport_get_expander_phy_error_log(struct MPT3SAS_ADAPTER *ioc,
  out:
 	ioc->transport_cmds.status = MPT3_CMD_NOT_USED;
 	if (data_out)
-		pci_free_consistent(ioc->pdev, sz, data_out, data_out_dma);
+		dma_free_coherent(&ioc->pdev->dev, sz, data_out, data_out_dma);
 
 	mutex_unlock(&ioc->transport_cmds.mutex);
 	return rc;
@@ -1471,7 +1471,8 @@ _transport_expander_phy_control(struct MPT3SAS_ADAPTER *ioc,
 
 	sz = sizeof(struct phy_control_request) +
 	    sizeof(struct phy_control_reply);
-	data_out = pci_alloc_consistent(ioc->pdev, sz, &data_out_dma);
+	data_out = dma_alloc_coherent(&ioc->pdev->dev, sz, &data_out_dma,
+			GFP_KERNEL);
 	if (!data_out) {
 		pr_err("failure at %s:%d/%s()!\n", __FILE__,
 		    __LINE__, __func__);
@@ -1560,7 +1561,8 @@ _transport_expander_phy_control(struct MPT3SAS_ADAPTER *ioc,
  out:
 	ioc->transport_cmds.status = MPT3_CMD_NOT_USED;
 	if (data_out)
-		pci_free_consistent(ioc->pdev, sz, data_out, data_out_dma);
+		dma_free_coherent(&ioc->pdev->dev, sz, data_out,
+				data_out_dma);
 
 	mutex_unlock(&ioc->transport_cmds.mutex);
 	return rc;
