perf stat: Update or print per-thread stats

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jin Yao <yao.jin@linux.intel.com>
commit 14e72a21c783654ca7b6c897b6d6508c1abccd7d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/14e72a21.failed

If the stats pointer in stat_config structure is not null, it will
update the per-thread stats or print the per-thread stats on this
buffer.

	Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1512482591-4646-9-git-send-email-yao.jin@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 14e72a21c783654ca7b6c897b6d6508c1abccd7d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
#	tools/perf/util/stat.c
diff --cc tools/perf/builtin-stat.c
index e0a98b6f0769,f4129a5fbb01..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1369,7 -1372,13 +1369,17 @@@ static void print_aggr_thread(struct pe
  			fprintf(output, "%s", prefix);
  
  		uval = val * counter->scale;
++<<<<<<< HEAD
 +		printout(thread, 0, counter, uval, prefix, run, ena, 1.0);
++=======
+ 
+ 		if (stat_config.stats)
+ 			printout(thread, 0, counter, uval, prefix, run, ena,
+ 				 1.0, &stat_config.stats[thread]);
+ 		else
+ 			printout(thread, 0, counter, uval, prefix, run, ena,
+ 				 1.0, &rt_stat);
++>>>>>>> 14e72a21c783 (perf stat: Update or print per-thread stats)
  		fputc('\n', output);
  	}
  }
diff --cc tools/perf/util/stat.c
index 203f5d8d11d1,32235657c1ac..000000000000
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@@ -277,9 -278,16 +277,22 @@@ process_counter_values(struct perf_stat
  			perf_evsel__compute_deltas(evsel, cpu, thread, count);
  		perf_counts_values__scale(count, config->scale, NULL);
  		if (config->aggr_mode == AGGR_NONE)
++<<<<<<< HEAD
 +			perf_stat__update_shadow_stats(evsel, count->val, cpu);
 +		if (config->aggr_mode == AGGR_THREAD)
 +			perf_stat__update_shadow_stats(evsel, count->val, 0);
++=======
+ 			perf_stat__update_shadow_stats(evsel, count->val, cpu,
+ 						       &rt_stat);
+ 		if (config->aggr_mode == AGGR_THREAD) {
+ 			if (config->stats)
+ 				perf_stat__update_shadow_stats(evsel,
+ 					count->val, 0, &config->stats[thread]);
+ 			else
+ 				perf_stat__update_shadow_stats(evsel,
+ 					count->val, 0, &rt_stat);
+ 		}
++>>>>>>> 14e72a21c783 (perf stat: Update or print per-thread stats)
  		break;
  	case AGGR_GLOBAL:
  		aggr->val += count->val;
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/util/stat.c
