cpuset: use trialcs->mems_allowed as a temp variable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Alban Crequy <alban.crequy@gmail.com>
commit 24ee3cf89bef04e8bc23788aca4e029a3f0f06d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/24ee3cf8.failed

The comment says it's using trialcs->mems_allowed as a temp variable but
it didn't match the code. Change the code to match the comment.

This fixes an issue when writing in cpuset.mems when a sub-directory
exists: we need to write several times for the information to persist:

| root@alban:/sys/fs/cgroup/cpuset# mkdir footest9
| root@alban:/sys/fs/cgroup/cpuset# cd footest9
| root@alban:/sys/fs/cgroup/cpuset/footest9# mkdir aa
| root@alban:/sys/fs/cgroup/cpuset/footest9# cat cpuset.mems
|
| root@alban:/sys/fs/cgroup/cpuset/footest9# echo 0 > cpuset.mems
| root@alban:/sys/fs/cgroup/cpuset/footest9# cat cpuset.mems
|
| root@alban:/sys/fs/cgroup/cpuset/footest9# echo 0 > cpuset.mems
| root@alban:/sys/fs/cgroup/cpuset/footest9# cat cpuset.mems
| 0
| root@alban:/sys/fs/cgroup/cpuset/footest9# cat aa/cpuset.mems
|
| root@alban:/sys/fs/cgroup/cpuset/footest9# echo 0 > aa/cpuset.mems
| root@alban:/sys/fs/cgroup/cpuset/footest9# cat aa/cpuset.mems
| 0
| root@alban:/sys/fs/cgroup/cpuset/footest9#

This should help to fix the following issue in Docker:
https://github.com/opencontainers/runc/issues/133
In some conditions, a Docker container needs to be started twice in
order to work.

	Signed-off-by: Alban Crequy <alban@endocode.com>
	Tested-by: Iago LÃ³pez Galeiras <iago@endocode.com>
	Cc: <stable@vger.kernel.org> # 3.17+
	Acked-by: Li Zefan <lizefan@huawei.com>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit 24ee3cf89bef04e8bc23788aca4e029a3f0f06d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/cpuset.c
diff --cc kernel/cpuset.c
index 13ab000c5f37,f0acff0f66c9..000000000000
--- a/kernel/cpuset.c
+++ b/kernel/cpuset.c
@@@ -1359,18 -1218,12 +1359,22 @@@ static int update_nodemask(struct cpuse
  	if (retval < 0)
  		goto done;
  
 -	spin_lock_irq(&callback_lock);
 +	retval = heap_init(&heap, PAGE_SIZE, GFP_KERNEL, NULL);
 +	if (retval < 0)
 +		goto done;
 +
 +	mutex_lock(&callback_mutex);
  	cs->mems_allowed = trialcs->mems_allowed;
 -	spin_unlock_irq(&callback_lock);
 +	mutex_unlock(&callback_mutex);
  
  	/* use trialcs->mems_allowed as a temp variable */
++<<<<<<< HEAD
 +	update_nodemasks_hier(cs, &cs->mems_allowed, &heap);
 +
 +	heap_free(&heap);
++=======
+ 	update_nodemasks_hier(cs, &trialcs->mems_allowed);
++>>>>>>> 24ee3cf89bef (cpuset: use trialcs->mems_allowed as a temp variable)
  done:
  	return retval;
  }
* Unmerged path kernel/cpuset.c
