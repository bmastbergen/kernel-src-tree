x86/cpu: Sanitize FAM6_ATOM naming

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit f2c4db1bd80720cd8cb2a5aa220d9bc9f374f04e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f2c4db1b.failed

Going primarily by:

  https://en.wikipedia.org/wiki/List_of_Intel_Atom_microprocessors

with additional information gleaned from other related pages; notably:

 - Bonnell shrink was called Saltwell
 - Moorefield is the Merriefield refresh which makes it Airmont

The general naming scheme is: FAM6_ATOM_UARCH_SOCTYPE

  for i in `git grep -l FAM6_ATOM` ; do
	sed -i  -e 's/ATOM_PINEVIEW/ATOM_BONNELL/g'		\
		-e 's/ATOM_LINCROFT/ATOM_BONNELL_MID/'		\
		-e 's/ATOM_PENWELL/ATOM_SALTWELL_MID/g'		\
		-e 's/ATOM_CLOVERVIEW/ATOM_SALTWELL_TABLET/g'	\
		-e 's/ATOM_CEDARVIEW/ATOM_SALTWELL/g'		\
		-e 's/ATOM_SILVERMONT1/ATOM_SILVERMONT/g'	\
		-e 's/ATOM_SILVERMONT2/ATOM_SILVERMONT_X/g'	\
		-e 's/ATOM_MERRIFIELD/ATOM_SILVERMONT_MID/g'	\
		-e 's/ATOM_MOOREFIELD/ATOM_AIRMONT_MID/g'	\
		-e 's/ATOM_DENVERTON/ATOM_GOLDMONT_X/g'		\
		-e 's/ATOM_GEMINI_LAKE/ATOM_GOLDMONT_PLUS/g' ${i}
  done

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Cc: dave.hansen@linux.intel.com
	Cc: len.brown@intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f2c4db1bd80720cd8cb2a5aa220d9bc9f374f04e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/cstate.c
#	arch/x86/include/asm/intel-family.h
#	arch/x86/kernel/cpu/intel_rdt_pseudo_lock.c
#	arch/x86/kernel/tsc.c
#	arch/x86/kernel/tsc_msr.c
#	arch/x86/platform/atom/punit_atom_debug.c
#	arch/x86/platform/intel-mid/device_libs/platform_bt.c
#	drivers/acpi/acpi_lpss.c
#	drivers/acpi/x86/utils.c
#	drivers/cpufreq/intel_pstate.c
#	drivers/idle/intel_idle.c
#	drivers/pci/pci-mid.c
#	drivers/platform/x86/intel_int0002_vgpio.c
#	drivers/platform/x86/intel_mid_powerbtn.c
#	drivers/platform/x86/intel_telemetry_debugfs.c
#	drivers/platform/x86/intel_telemetry_pltdrv.c
#	drivers/thermal/intel_soc_dts_thermal.c
#	sound/soc/intel/boards/bytcr_rt5651.c
diff --cc arch/x86/include/asm/intel-family.h
index 64904c15c5ce,0dd6b0f4000e..000000000000
--- a/arch/x86/include/asm/intel-family.h
+++ b/arch/x86/include/asm/intel-family.h
@@@ -7,9 -8,6 +7,12 @@@
   * The "_X" parts are generally the EP and EX Xeons, or the
   * "Extreme" ones, like Broadwell-E.
   *
++<<<<<<< HEAD
 + * Things ending in "2" are usually because we have no better
 + * name for them.  There's no processor called "WESTMERE2".
 + *
++=======
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
   * While adding a new CPUID for a new microarchitecture, add a new
   * group to keep logically sorted out in chronological order. Within
   * that group keep the CPUID for the variants sorted by model number.
@@@ -52,23 -52,25 +55,43 @@@
  
  #define INTEL_FAM6_CANNONLAKE_MOBILE	0x66
  
 +#define INTEL_FAM6_ICELAKE_MOBILE	0x7E
 +
  /* "Small Core" Processors (Atom) */
  
++<<<<<<< HEAD
 +#define INTEL_FAM6_ATOM_PINEVIEW	0x1C
 +#define INTEL_FAM6_ATOM_LINCROFT	0x26
 +#define INTEL_FAM6_ATOM_PENWELL		0x27
 +#define INTEL_FAM6_ATOM_CLOVERVIEW	0x35
 +#define INTEL_FAM6_ATOM_CEDARVIEW	0x36
 +#define INTEL_FAM6_ATOM_SILVERMONT1	0x37 /* BayTrail/BYT / Valleyview */
 +#define INTEL_FAM6_ATOM_SILVERMONT2	0x4D /* Avaton/Rangely */
 +#define INTEL_FAM6_ATOM_AIRMONT		0x4C /* CherryTrail / Braswell */
 +#define INTEL_FAM6_ATOM_MERRIFIELD	0x4A /* Tangier */
 +#define INTEL_FAM6_ATOM_MOOREFIELD	0x5A /* Annidale */
 +#define INTEL_FAM6_ATOM_GOLDMONT	0x5C
 +#define INTEL_FAM6_ATOM_GEMINI_LAKE	0x7A
 +#define INTEL_FAM6_ATOM_DENVERTON	0x5F /* Goldmont Microserver */
++=======
+ #define INTEL_FAM6_ATOM_BONNELL		0x1C /* Diamondville, Pineview */
+ #define INTEL_FAM6_ATOM_BONNELL_MID	0x26 /* Silverthorne, Lincroft */
+ 
+ #define INTEL_FAM6_ATOM_SALTWELL	0x36 /* Cedarview */
+ #define INTEL_FAM6_ATOM_SALTWELL_MID	0x27 /* Penwell */
+ #define INTEL_FAM6_ATOM_SALTWELL_TABLET	0x35 /* Cloverview */
+ 
+ #define INTEL_FAM6_ATOM_SILVERMONT	0x37 /* Bay Trail, Valleyview */
+ #define INTEL_FAM6_ATOM_SILVERMONT_X	0x4D /* Avaton, Rangely */
+ #define INTEL_FAM6_ATOM_SILVERMONT_MID	0x4A /* Merriefield */
+ 
+ #define INTEL_FAM6_ATOM_AIRMONT		0x4C /* Cherry Trail, Braswell */
+ #define INTEL_FAM6_ATOM_AIRMONT_MID	0x5A /* Moorefield */
+ 
+ #define INTEL_FAM6_ATOM_GOLDMONT	0x5C /* Apollo Lake */
+ #define INTEL_FAM6_ATOM_GOLDMONT_X	0x5F /* Denverton */
+ #define INTEL_FAM6_ATOM_GOLDMONT_PLUS	0x7A /* Gemini Lake */
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  
  /* Xeon Phi */
  
diff --cc arch/x86/kernel/tsc.c
index 73931e5f78a3,dd6b564f65e3..000000000000
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@@ -713,6 -635,9 +713,12 @@@ unsigned long native_calibrate_tsc(void
  		case INTEL_FAM6_KABYLAKE_DESKTOP:
  			crystal_khz = 24000;	/* 24.0 MHz */
  			break;
++<<<<<<< HEAD
++=======
+ 		case INTEL_FAM6_ATOM_GOLDMONT_X:
+ 			crystal_khz = 25000;	/* 25.0 MHz */
+ 			break;
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  		case INTEL_FAM6_ATOM_GOLDMONT:
  			crystal_khz = 19200;	/* 19.2 MHz */
  			break;
diff --cc arch/x86/kernel/tsc_msr.c
index 92ae6acac8a7,3d0e9aeea7c8..000000000000
--- a/arch/x86/kernel/tsc_msr.c
+++ b/arch/x86/kernel/tsc_msr.c
@@@ -45,54 -29,66 +45,94 @@@ struct freq_desc 
  	u32 freqs[MAX_NUM_FREQS];
  };
  
 -/*
 - * Penwell and Clovertrail use spread spectrum clock,
 - * so the freq number is not exactly the same as reported
 - * by MSR based on SDM.
 - */
 -static const struct freq_desc freq_desc_pnw = {
 -	0, { 0, 0, 0, 0, 0, 99840, 0, 83200 }
 +static struct freq_desc freq_desc_tables[] = {
 +	/* PNW */
 +	{ 6, 0x27, 0, { 0, 0, 0, 0, 0, FREQ_100, 0, FREQ_83 } },
 +	/* CLV+ */
 +	{ 6, 0x35, 0, { 0, FREQ_133, 0, 0, 0, FREQ_100, 0, FREQ_83 } },
 +	/* TNG */
 +	{ 6, 0x4a, 1, { 0, FREQ_100, FREQ_133, 0, 0, 0, 0, 0 } },
 +	/* VLV2 */
 +	{ 6, 0x37, 1, { FREQ_83, FREQ_100, FREQ_133, FREQ_166, 0, 0, 0, 0 } },
 +	/* ANN */
 +	{ 6, 0x5a, 1, { FREQ_83, FREQ_100, FREQ_133, FREQ_100, 0, 0, 0, 0 } },
  };
  
++<<<<<<< HEAD
 +static int match_cpu(u8 family, u8 model)
++=======
+ static const struct freq_desc freq_desc_clv = {
+ 	0, { 0, 133200, 0, 0, 0, 99840, 0, 83200 }
+ };
+ 
+ static const struct freq_desc freq_desc_byt = {
+ 	1, { 83300, 100000, 133300, 116700, 80000, 0, 0, 0 }
+ };
+ 
+ static const struct freq_desc freq_desc_cht = {
+ 	1, { 83300, 100000, 133300, 116700, 80000, 93300, 90000, 88900, 87500 }
+ };
+ 
+ static const struct freq_desc freq_desc_tng = {
+ 	1, { 0, 100000, 133300, 0, 0, 0, 0, 0 }
+ };
+ 
+ static const struct freq_desc freq_desc_ann = {
+ 	1, { 83300, 100000, 133300, 100000, 0, 0, 0, 0 }
+ };
+ 
+ static const struct x86_cpu_id tsc_msr_cpu_ids[] = {
+ 	INTEL_CPU_FAM6(ATOM_SALTWELL_MID,	freq_desc_pnw),
+ 	INTEL_CPU_FAM6(ATOM_SALTWELL_TABLET,	freq_desc_clv),
+ 	INTEL_CPU_FAM6(ATOM_SILVERMONT,		freq_desc_byt),
+ 	INTEL_CPU_FAM6(ATOM_SILVERMONT_MID,	freq_desc_tng),
+ 	INTEL_CPU_FAM6(ATOM_AIRMONT,		freq_desc_cht),
+ 	INTEL_CPU_FAM6(ATOM_AIRMONT_MID,	freq_desc_ann),
+ 	{}
+ };
+ 
+ /*
+  * MSR-based CPU/TSC frequency discovery for certain CPUs.
+  *
+  * Set global "lapic_timer_frequency" to bus_clock_cycles/jiffy
+  * Return processor base frequency in KHz, or 0 on failure.
+  */
+ unsigned long cpu_khz_from_msr(void)
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
 +{
 +	int i;
 +
 +	for (i = 0; i < ARRAY_SIZE(freq_desc_tables); i++) {
 +		if ((family == freq_desc_tables[i].x86_family) &&
 +			(model == freq_desc_tables[i].x86_model))
 +			return i;
 +	}
 +
 +	return -1;
 +}
 +
 +/* Map CPU reference clock freq ID(0-7) to CPU reference clock freq(KHz) */
 +#define id_to_freq(cpu_index, freq_id) \
 +	(freq_desc_tables[cpu_index].freqs[freq_id])
 +
 +/*
 + * Do MSR calibration only for known/supported CPUs.
 + *
 + * Returns the calibration value or 0 if MSR calibration failed.
 + */
 +unsigned long try_msr_calibrate_tsc(void)
  {
 -	u32 lo, hi, ratio, freq;
 -	const struct freq_desc *freq_desc;
 -	const struct x86_cpu_id *id;
 +	u32 lo, hi, ratio, freq_id, freq;
  	unsigned long res;
 +	int cpu_index;
  
 -	id = x86_match_cpu(tsc_msr_cpu_ids);
 -	if (!id)
 +	cpu_index = match_cpu(boot_cpu_data.x86, boot_cpu_data.x86_model);
 +	if (cpu_index < 0)
  		return 0;
  
 -	freq_desc = (struct freq_desc *)id->driver_data;
 -	if (freq_desc->msr_plat) {
 +	if (freq_desc_tables[cpu_index].msr_plat) {
  		rdmsr(MSR_PLATFORM_INFO, lo, hi);
 -		ratio = (lo >> 8) & 0xff;
 +		ratio = (lo >> 8) & 0x1f;
  	} else {
  		rdmsr(MSR_IA32_PERF_STATUS, lo, hi);
  		ratio = (hi >> 8) & 0x1f;
diff --cc drivers/acpi/acpi_lpss.c
index 50d806769a44,9efa3a588620..000000000000
--- a/drivers/acpi/acpi_lpss.c
+++ b/drivers/acpi/acpi_lpss.c
@@@ -173,6 -276,27 +173,30 @@@ static struct lpss_device_desc byt_i2c_
  	.setup = byt_i2c_setup,
  };
  
++<<<<<<< HEAD
++=======
+ static const struct lpss_device_desc bsw_i2c_dev_desc = {
+ 	.flags = LPSS_CLK | LPSS_SAVE_CTX | LPSS_NO_D3_DELAY,
+ 	.prv_offset = 0x800,
+ 	.setup = byt_i2c_setup,
+ };
+ 
+ static const struct lpss_device_desc bsw_spi_dev_desc = {
+ 	.flags = LPSS_CLK | LPSS_CLK_GATE | LPSS_CLK_DIVIDER | LPSS_SAVE_CTX
+ 			| LPSS_NO_D3_DELAY,
+ 	.prv_offset = 0x400,
+ 	.setup = lpss_deassert_reset,
+ };
+ 
+ #define ICPU(model)	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, }
+ 
+ static const struct x86_cpu_id lpss_cpu_ids[] = {
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT),	/* Valleyview, Bay Trail */
+ 	ICPU(INTEL_FAM6_ATOM_AIRMONT),	/* Braswell, Cherry Trail */
+ 	{}
+ };
+ 
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  #else
  
  #define LPSS_ADDR(desc) (0UL)
diff --cc drivers/cpufreq/intel_pstate.c
index 0cb77ef18c9c,75140dd07037..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1829,7 -1778,7 +1829,11 @@@ static void intel_pstate_update_util(st
  static const struct x86_cpu_id intel_pstate_cpu_ids[] = {
  	ICPU(INTEL_FAM6_SANDYBRIDGE, 		core_funcs),
  	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		core_funcs),
++<<<<<<< HEAD
 +	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	atom_funcs),
++=======
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT,	silvermont_funcs),
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  	ICPU(INTEL_FAM6_IVYBRIDGE,		core_funcs),
  	ICPU(INTEL_FAM6_HASWELL_CORE,		core_funcs),
  	ICPU(INTEL_FAM6_BROADWELL_CORE,		core_funcs),
@@@ -1844,8 -1794,9 +1848,14 @@@
  	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	core_funcs),
  	ICPU(INTEL_FAM6_XEON_PHI_KNL,		knl_funcs),
  	ICPU(INTEL_FAM6_XEON_PHI_KNM,		knl_funcs),
++<<<<<<< HEAD
 +	ICPU(INTEL_FAM6_ATOM_GOLDMONT,		bxt_funcs),
 +	ICPU(INTEL_FAM6_ATOM_GEMINI_LAKE,       bxt_funcs),
++=======
+ 	ICPU(INTEL_FAM6_ATOM_GOLDMONT,		core_funcs),
+ 	ICPU(INTEL_FAM6_ATOM_GOLDMONT_PLUS,     core_funcs),
+ 	ICPU(INTEL_FAM6_SKYLAKE_X,		core_funcs),
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  	{}
  };
  MODULE_DEVICE_TABLE(x86cpu, intel_pstate_cpu_ids);
diff --cc drivers/idle/intel_idle.c
index 6c9abd1fbe2c,c4bb67ed8da3..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -921,8 -1081,10 +921,15 @@@ static const struct x86_cpu_id intel_id
  	ICPU(INTEL_FAM6_WESTMERE_EX,		idle_cpu_nehalem),
  	ICPU(INTEL_FAM6_SANDYBRIDGE,		idle_cpu_snb),
  	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		idle_cpu_snb),
++<<<<<<< HEAD
 +	ICPU(INTEL_FAM6_ATOM_CEDARVIEW,		idle_cpu_atom),
 +	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	idle_cpu_byt),
++=======
+ 	ICPU(INTEL_FAM6_ATOM_SALTWELL,		idle_cpu_atom),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT,	idle_cpu_byt),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT_MID,	idle_cpu_tangier),
+ 	ICPU(INTEL_FAM6_ATOM_AIRMONT,		idle_cpu_cht),
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  	ICPU(INTEL_FAM6_IVYBRIDGE,		idle_cpu_ivb),
  	ICPU(INTEL_FAM6_IVYBRIDGE_X,		idle_cpu_ivt),
  	ICPU(INTEL_FAM6_HASWELL_CORE,		idle_cpu_hsw),
diff --cc drivers/platform/x86/intel_mid_powerbtn.c
index f59683aa13d5,5ad44204a9c3..000000000000
--- a/drivers/platform/x86/intel_mid_powerbtn.c
+++ b/drivers/platform/x86/intel_mid_powerbtn.c
@@@ -56,8 -107,33 +56,34 @@@ static irqreturn_t mfld_pb_isr(int irq
  	return IRQ_HANDLED;
  }
  
++<<<<<<< HEAD
 +static int mfld_pb_probe(struct platform_device *pdev)
++=======
+ static const struct mid_pb_ddata mfld_ddata = {
+ 	.mirqlvl1_addr	= INTEL_MSIC_IRQLVL1MSK,
+ 	.pbstat_addr	= INTEL_MSIC_PBSTATUS,
+ 	.pbstat_mask	= MSIC_PB_LEVEL,
+ };
+ 
+ static const struct mid_pb_ddata mrfld_ddata = {
+ 	.mirqlvl1_addr	= BCOVE_IRQLVL1MSK,
+ 	.pbstat_addr	= BCOVE_PBSTATUS,
+ 	.pbstat_mask	= BCOVE_PB_LEVEL,
+ 	.setup	= mrfld_setup,
+ };
+ 
+ #define ICPU(model, ddata)	\
+ 	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (kernel_ulong_t)&ddata }
+ 
+ static const struct x86_cpu_id mid_pb_cpu_ids[] = {
+ 	ICPU(INTEL_FAM6_ATOM_SALTWELL_MID,		mfld_ddata),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT_MID,	mrfld_ddata),
+ 	{}
+ };
+ 
+ static int mid_pb_probe(struct platform_device *pdev)
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  {
 -	const struct x86_cpu_id *id;
 -	struct mid_pb_ddata *ddata;
  	struct input_dev *input;
  	int irq = platform_get_irq(pdev, 0);
  	int error;
diff --cc sound/soc/intel/boards/bytcr_rt5651.c
index 8b1528e8ea46,6af02bf879ac..000000000000
--- a/sound/soc/intel/boards/bytcr_rt5651.c
+++ b/sound/soc/intel/boards/bytcr_rt5651.c
@@@ -701,22 -782,86 +701,29 @@@ static struct snd_soc_card byt_rt5651_c
  	.dapm_routes = byt_rt5651_audio_map,
  	.num_dapm_routes = ARRAY_SIZE(byt_rt5651_audio_map),
  	.fully_routed = true,
 -	.suspend_pre = byt_rt5651_suspend,
 -	.resume_post = byt_rt5651_resume,
  };
  
++<<<<<<< HEAD
 +static char byt_rt5651_codec_name[SND_ACPI_I2C_ID_LEN];
 +static char byt_rt5651_codec_aif_name[12]; /*  = "rt5651-aif[1|2]" */
 +static char byt_rt5651_cpu_dai_name[10]; /*  = "ssp[0|2]-port" */
++=======
+ static const struct x86_cpu_id baytrail_cpu_ids[] = {
+ 	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_SILVERMONT }, /* Valleyview */
+ 	{}
+ };
++>>>>>>> f2c4db1bd807 (x86/cpu: Sanitize FAM6_ATOM naming)
  
 -static const struct x86_cpu_id cherrytrail_cpu_ids[] = {
 -	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_AIRMONT },     /* Braswell */
 -	{}
 -};
 -
 -static const struct acpi_gpio_params first_gpio = { 0, 0, false };
 -static const struct acpi_gpio_params second_gpio = { 1, 0, false };
 -
 -static const struct acpi_gpio_mapping byt_rt5651_amp_en_first[] = {
 -	{ "ext-amp-enable-gpios", &first_gpio, 1 },
 -	{ },
 -};
 -
 -static const struct acpi_gpio_mapping byt_rt5651_amp_en_second[] = {
 -	{ "ext-amp-enable-gpios", &second_gpio, 1 },
 -	{ },
 -};
 -
 -/*
 - * Some boards have I2cSerialBusV2, GpioIo, GpioInt as ACPI resources, other
 - * boards may  have I2cSerialBusV2, GpioInt, GpioIo instead. We want the
 - * GpioIo one for the ext-amp-enable-gpio and both count for the index in
 - * acpi_gpio_params index.  So we have 2 different mappings and the code
 - * below figures out which one to use.
 - */
 -struct byt_rt5651_acpi_resource_data {
 -	int gpio_count;
 -	int gpio_int_idx;
 -};
 -
 -static int snd_byt_rt5651_acpi_resource(struct acpi_resource *ares, void *arg)
 +static bool is_valleyview(void)
  {
 -	struct byt_rt5651_acpi_resource_data *data = arg;
 -
 -	if (ares->type != ACPI_RESOURCE_TYPE_GPIO)
 -		return 0;
 -
 -	if (ares->data.gpio.connection_type == ACPI_RESOURCE_GPIO_TYPE_INT)
 -		data->gpio_int_idx = data->gpio_count;
 -
 -	data->gpio_count++;
 -	return 0;
 -}
 -
 -static void snd_byt_rt5651_mc_add_amp_en_gpio_mapping(struct device *codec)
 -{
 -	struct byt_rt5651_acpi_resource_data data = { 0, -1 };
 -	LIST_HEAD(resources);
 -	int ret;
 -
 -	ret = acpi_dev_get_resources(ACPI_COMPANION(codec), &resources,
 -				     snd_byt_rt5651_acpi_resource, &data);
 -	if (ret < 0) {
 -		dev_warn(codec, "Failed to get ACPI resources, not adding external amplifier GPIO mapping\n");
 -		return;
 -	}
 -
 -	/* All info we need is gathered during the walk */
 -	acpi_dev_free_resource_list(&resources);
 -
 -	switch (data.gpio_int_idx) {
 -	case 0:
 -		devm_acpi_dev_add_driver_gpios(codec, byt_rt5651_amp_en_second);
 -		break;
 -	case 1:
 -		devm_acpi_dev_add_driver_gpios(codec, byt_rt5651_amp_en_first);
 -		break;
 -	default:
 -		dev_warn(codec, "Unknown GpioInt index %d, not adding external amplifier GPIO mapping\n",
 -			 data.gpio_int_idx);
 -	}
 +	static const struct x86_cpu_id cpu_ids[] = {
 +		{ X86_VENDOR_INTEL, 6, 55 }, /* Valleyview, Bay Trail */
 +		{}
 +	};
 +
 +	if (!x86_match_cpu(cpu_ids))
 +		return false;
 +	return true;
  }
  
  struct acpi_chan_package {   /* ACPICA seems to require 64 bit integers */
* Unmerged path arch/x86/events/intel/cstate.c
* Unmerged path arch/x86/kernel/cpu/intel_rdt_pseudo_lock.c
* Unmerged path arch/x86/platform/atom/punit_atom_debug.c
* Unmerged path arch/x86/platform/intel-mid/device_libs/platform_bt.c
* Unmerged path drivers/acpi/x86/utils.c
* Unmerged path drivers/pci/pci-mid.c
* Unmerged path drivers/platform/x86/intel_int0002_vgpio.c
* Unmerged path drivers/platform/x86/intel_telemetry_debugfs.c
* Unmerged path drivers/platform/x86/intel_telemetry_pltdrv.c
* Unmerged path drivers/thermal/intel_soc_dts_thermal.c
diff --git a/arch/x86/events/intel/core.c b/arch/x86/events/intel/core.c
index f0d6acdd6b07..6a7897dd2600 100644
--- a/arch/x86/events/intel/core.c
+++ b/arch/x86/events/intel/core.c
@@ -3966,11 +3966,11 @@ __init int intel_pmu_init(void)
 		name = "nehalem";
 		break;
 
-	case INTEL_FAM6_ATOM_PINEVIEW:
-	case INTEL_FAM6_ATOM_LINCROFT:
-	case INTEL_FAM6_ATOM_PENWELL:
-	case INTEL_FAM6_ATOM_CLOVERVIEW:
-	case INTEL_FAM6_ATOM_CEDARVIEW:
+	case INTEL_FAM6_ATOM_BONNELL:
+	case INTEL_FAM6_ATOM_BONNELL_MID:
+	case INTEL_FAM6_ATOM_SALTWELL:
+	case INTEL_FAM6_ATOM_SALTWELL_MID:
+	case INTEL_FAM6_ATOM_SALTWELL_TABLET:
 		memcpy(hw_cache_event_ids, atom_hw_cache_event_ids,
 		       sizeof(hw_cache_event_ids));
 
@@ -3983,9 +3983,11 @@ __init int intel_pmu_init(void)
 		name = "bonnell";
 		break;
 
-	case INTEL_FAM6_ATOM_SILVERMONT1:
-	case INTEL_FAM6_ATOM_SILVERMONT2:
+	case INTEL_FAM6_ATOM_SILVERMONT:
+	case INTEL_FAM6_ATOM_SILVERMONT_X:
+	case INTEL_FAM6_ATOM_SILVERMONT_MID:
 	case INTEL_FAM6_ATOM_AIRMONT:
+	case INTEL_FAM6_ATOM_AIRMONT_MID:
 		memcpy(hw_cache_event_ids, slm_hw_cache_event_ids,
 			sizeof(hw_cache_event_ids));
 		memcpy(hw_cache_extra_regs, slm_hw_cache_extra_regs,
@@ -4003,7 +4005,7 @@ __init int intel_pmu_init(void)
 		break;
 
 	case INTEL_FAM6_ATOM_GOLDMONT:
-	case INTEL_FAM6_ATOM_DENVERTON:
+	case INTEL_FAM6_ATOM_GOLDMONT_X:
 		memcpy(hw_cache_event_ids, glm_hw_cache_event_ids,
 		       sizeof(hw_cache_event_ids));
 		memcpy(hw_cache_extra_regs, glm_hw_cache_extra_regs,
@@ -4029,7 +4031,7 @@ __init int intel_pmu_init(void)
 		name = "goldmont";
 		break;
 
-	case INTEL_FAM6_ATOM_GEMINI_LAKE:
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
 		memcpy(hw_cache_event_ids, glp_hw_cache_event_ids,
 		       sizeof(hw_cache_event_ids));
 		memcpy(hw_cache_extra_regs, glp_hw_cache_extra_regs,
* Unmerged path arch/x86/events/intel/cstate.c
diff --git a/arch/x86/events/intel/rapl.c b/arch/x86/events/intel/rapl.c
index aa3b14cfacb1..0d78c5c1a06e 100644
--- a/arch/x86/events/intel/rapl.c
+++ b/arch/x86/events/intel/rapl.c
@@ -825,9 +825,9 @@ static const struct x86_cpu_id rapl_cpu_match[] __initconst = {
 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_CANNONLAKE_MOBILE,  skl_rapl_init),
 
 	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT, hsw_rapl_init),
-	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_DENVERTON, hsw_rapl_init),
+	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_X, hsw_rapl_init),
 
-	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GEMINI_LAKE, hsw_rapl_init),
+	X86_RAPL_MODEL_MATCH(INTEL_FAM6_ATOM_GOLDMONT_PLUS, hsw_rapl_init),
 	{},
 };
 
diff --git a/arch/x86/events/msr.c b/arch/x86/events/msr.c
index 2626c5d7f60d..9c8209c2f6b5 100644
--- a/arch/x86/events/msr.c
+++ b/arch/x86/events/msr.c
@@ -55,14 +55,14 @@ static bool test_intel(int idx)
 	case INTEL_FAM6_BROADWELL_GT3E:
 	case INTEL_FAM6_BROADWELL_X:
 
-	case INTEL_FAM6_ATOM_SILVERMONT1:
-	case INTEL_FAM6_ATOM_SILVERMONT2:
+	case INTEL_FAM6_ATOM_SILVERMONT:
+	case INTEL_FAM6_ATOM_SILVERMONT_X:
 	case INTEL_FAM6_ATOM_AIRMONT:
 
 	case INTEL_FAM6_ATOM_GOLDMONT:
-	case INTEL_FAM6_ATOM_DENVERTON:
+	case INTEL_FAM6_ATOM_GOLDMONT_X:
 
-	case INTEL_FAM6_ATOM_GEMINI_LAKE:
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
 
 	case INTEL_FAM6_XEON_PHI_KNL:
 	case INTEL_FAM6_XEON_PHI_KNM:
* Unmerged path arch/x86/include/asm/intel-family.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index dcd159d0c4dc..97b18909cc1d 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -895,11 +895,11 @@ static void identify_cpu_without_cpuid(struct cpuinfo_x86 *c)
 }
 
 static const __initconst struct x86_cpu_id cpu_no_speculation[] = {
-	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_CEDARVIEW,	X86_FEATURE_ANY },
-	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_CLOVERVIEW,	X86_FEATURE_ANY },
-	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_LINCROFT,	X86_FEATURE_ANY },
-	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_PENWELL,	X86_FEATURE_ANY },
-	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_PINEVIEW,	X86_FEATURE_ANY },
+	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_SALTWELL,	X86_FEATURE_ANY },
+	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_SALTWELL_TABLET,	X86_FEATURE_ANY },
+	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_BONNELL_MID,	X86_FEATURE_ANY },
+	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_SALTWELL_MID,	X86_FEATURE_ANY },
+	{ X86_VENDOR_INTEL,	6, INTEL_FAM6_ATOM_BONNELL,	X86_FEATURE_ANY },
 	{ X86_VENDOR_CENTAUR,	5 },
 	{ X86_VENDOR_INTEL,	5 },
 	{ X86_VENDOR_NSC,	5 },
@@ -914,10 +914,10 @@ static const __initconst struct x86_cpu_id cpu_no_meltdown[] = {
 
 /* Only list CPUs which speculate but are non susceptible to SSB */
 static const __initconst struct x86_cpu_id cpu_no_spec_store_bypass[] = {
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT1	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT	},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_AIRMONT		},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT2	},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_MERRIFIELD	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT_X	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT_MID	},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_CORE_YONAH		},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_XEON_PHI_KNL		},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_XEON_PHI_KNM		},
@@ -930,14 +930,14 @@ static const __initconst struct x86_cpu_id cpu_no_spec_store_bypass[] = {
 
 static const __initconst struct x86_cpu_id cpu_no_l1tf[] = {
 	/* in addition to cpu_no_speculation */
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT1	},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT2	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT_X	},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_AIRMONT		},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_MERRIFIELD	},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_MOOREFIELD	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_SILVERMONT_MID	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_AIRMONT_MID	},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_GOLDMONT	},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_DENVERTON	},
-	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_GEMINI_LAKE	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_GOLDMONT_X	},
+	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_ATOM_GOLDMONT_PLUS	},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_XEON_PHI_KNL		},
 	{ X86_VENDOR_INTEL,	6,	INTEL_FAM6_XEON_PHI_KNM		},
 	{}
* Unmerged path arch/x86/kernel/cpu/intel_rdt_pseudo_lock.c
* Unmerged path arch/x86/kernel/tsc.c
* Unmerged path arch/x86/kernel/tsc_msr.c
* Unmerged path arch/x86/platform/atom/punit_atom_debug.c
* Unmerged path arch/x86/platform/intel-mid/device_libs/platform_bt.c
* Unmerged path drivers/acpi/acpi_lpss.c
* Unmerged path drivers/acpi/x86/utils.c
* Unmerged path drivers/cpufreq/intel_pstate.c
diff --git a/drivers/edac/pnd2_edac.c b/drivers/edac/pnd2_edac.c
index 506a3a6f34c4..ccc6807037aa 100644
--- a/drivers/edac/pnd2_edac.c
+++ b/drivers/edac/pnd2_edac.c
@@ -1540,7 +1540,7 @@ static struct dunit_ops dnv_ops = {
 
 static const struct x86_cpu_id pnd2_cpuids[] = {
 	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_GOLDMONT, 0, (kernel_ulong_t)&apl_ops },
-	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_DENVERTON, 0, (kernel_ulong_t)&dnv_ops },
+	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_GOLDMONT_X, 0, (kernel_ulong_t)&dnv_ops },
 	{ }
 };
 MODULE_DEVICE_TABLE(x86cpu, pnd2_cpuids);
* Unmerged path drivers/idle/intel_idle.c
diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
index d7d025e2fd2e..3f4f9e211dfd 100644
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -135,7 +135,7 @@ static const struct sdhci_acpi_chip sdhci_acpi_chip_int = {
 static bool sdhci_acpi_byt(void)
 {
 	static const struct x86_cpu_id byt[] = {
-		{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_SILVERMONT1 },
+		{ X86_VENDOR_INTEL, 6, INTEL_FAM6_ATOM_SILVERMONT },
 		{}
 	};
 
* Unmerged path drivers/pci/pci-mid.c
* Unmerged path drivers/platform/x86/intel_int0002_vgpio.c
* Unmerged path drivers/platform/x86/intel_mid_powerbtn.c
* Unmerged path drivers/platform/x86/intel_telemetry_debugfs.c
* Unmerged path drivers/platform/x86/intel_telemetry_pltdrv.c
diff --git a/drivers/powercap/intel_rapl.c b/drivers/powercap/intel_rapl.c
index c8f43b659cc1..a572733ac2b9 100644
--- a/drivers/powercap/intel_rapl.c
+++ b/drivers/powercap/intel_rapl.c
@@ -1162,13 +1162,13 @@ static const struct x86_cpu_id rapl_ids[] __initconst = {
 	RAPL_CPU(INTEL_FAM6_KABYLAKE_DESKTOP,	rapl_defaults_core),
 	RAPL_CPU(INTEL_FAM6_CANNONLAKE_MOBILE,	rapl_defaults_core),
 
-	RAPL_CPU(INTEL_FAM6_ATOM_SILVERMONT1,	rapl_defaults_byt),
+	RAPL_CPU(INTEL_FAM6_ATOM_SILVERMONT,	rapl_defaults_byt),
 	RAPL_CPU(INTEL_FAM6_ATOM_AIRMONT,	rapl_defaults_cht),
-	RAPL_CPU(INTEL_FAM6_ATOM_MERRIFIELD,	rapl_defaults_tng),
-	RAPL_CPU(INTEL_FAM6_ATOM_MOOREFIELD,	rapl_defaults_ann),
+	RAPL_CPU(INTEL_FAM6_ATOM_SILVERMONT_MID,	rapl_defaults_tng),
+	RAPL_CPU(INTEL_FAM6_ATOM_AIRMONT_MID,	rapl_defaults_ann),
 	RAPL_CPU(INTEL_FAM6_ATOM_GOLDMONT,	rapl_defaults_core),
-	RAPL_CPU(INTEL_FAM6_ATOM_GEMINI_LAKE,	rapl_defaults_core),
-	RAPL_CPU(INTEL_FAM6_ATOM_DENVERTON,	rapl_defaults_core),
+	RAPL_CPU(INTEL_FAM6_ATOM_GOLDMONT_PLUS,	rapl_defaults_core),
+	RAPL_CPU(INTEL_FAM6_ATOM_GOLDMONT_X,	rapl_defaults_core),
 
 	RAPL_CPU(INTEL_FAM6_XEON_PHI_KNL,	rapl_defaults_hsw_server),
 	RAPL_CPU(INTEL_FAM6_XEON_PHI_KNM,	rapl_defaults_hsw_server),
* Unmerged path drivers/thermal/intel_soc_dts_thermal.c
* Unmerged path sound/soc/intel/boards/bytcr_rt5651.c
diff --git a/tools/power/x86/turbostat/turbostat.c b/tools/power/x86/turbostat/turbostat.c
index 68b0aa712e91..68e57647ba5c 100644
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@ -2117,7 +2117,7 @@ int has_turbo_ratio_group_limits(int family, int model)
 	switch (model) {
 	case INTEL_FAM6_ATOM_GOLDMONT:
 	case INTEL_FAM6_SKYLAKE_X:
-	case INTEL_FAM6_ATOM_DENVERTON:
+	case INTEL_FAM6_ATOM_GOLDMONT_X:
 		return 1;
 	}
 	return 0;
@@ -3188,9 +3188,9 @@ int probe_nhm_msrs(unsigned int family, unsigned int model)
 		pkg_cstate_limits = skx_pkg_cstate_limits;
 		has_misc_feature_control = 1;
 		break;
-	case INTEL_FAM6_ATOM_SILVERMONT1:	/* BYT */
+	case INTEL_FAM6_ATOM_SILVERMONT:	/* BYT */
 		no_MSR_MISC_PWR_MGMT = 1;
-	case INTEL_FAM6_ATOM_SILVERMONT2:	/* AVN */
+	case INTEL_FAM6_ATOM_SILVERMONT_X:	/* AVN */
 		pkg_cstate_limits = slv_pkg_cstate_limits;
 		break;
 	case INTEL_FAM6_ATOM_AIRMONT:	/* AMT */
@@ -3201,8 +3201,8 @@ int probe_nhm_msrs(unsigned int family, unsigned int model)
 		pkg_cstate_limits = phi_pkg_cstate_limits;
 		break;
 	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
-	case INTEL_FAM6_ATOM_GEMINI_LAKE:
-	case INTEL_FAM6_ATOM_DENVERTON:	/* DNV */
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
+	case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
 		pkg_cstate_limits = bxt_pkg_cstate_limits;
 		break;
 	default:
@@ -3231,9 +3231,9 @@ int has_slv_msrs(unsigned int family, unsigned int model)
 		return 0;
 
 	switch (model) {
-	case INTEL_FAM6_ATOM_SILVERMONT1:
-	case INTEL_FAM6_ATOM_MERRIFIELD:
-	case INTEL_FAM6_ATOM_MOOREFIELD:
+	case INTEL_FAM6_ATOM_SILVERMONT:
+	case INTEL_FAM6_ATOM_SILVERMONT_MID:
+	case INTEL_FAM6_ATOM_AIRMONT_MID:
 		return 1;
 	}
 	return 0;
@@ -3245,7 +3245,7 @@ int is_dnv(unsigned int family, unsigned int model)
 		return 0;
 
 	switch (model) {
-	case INTEL_FAM6_ATOM_DENVERTON:
+	case INTEL_FAM6_ATOM_GOLDMONT_X:
 		return 1;
 	}
 	return 0;
@@ -3752,8 +3752,8 @@ double get_tdp(unsigned int model)
 			return ((msr >> 0) & RAPL_POWER_GRANULARITY) * rapl_power_units;
 
 	switch (model) {
-	case INTEL_FAM6_ATOM_SILVERMONT1:
-	case INTEL_FAM6_ATOM_SILVERMONT2:
+	case INTEL_FAM6_ATOM_SILVERMONT:
+	case INTEL_FAM6_ATOM_SILVERMONT_X:
 		return 30.0;
 	default:
 		return 135.0;
@@ -3816,7 +3816,7 @@ void rapl_probe(unsigned int family, unsigned int model)
 		}
 		break;
 	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
-	case INTEL_FAM6_ATOM_GEMINI_LAKE:
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
 		do_rapl = RAPL_PKG | RAPL_PKG_POWER_INFO;
 		if (rapl_joules)
 			BIC_PRESENT(BIC_Pkg_J);
@@ -3870,8 +3870,8 @@ void rapl_probe(unsigned int family, unsigned int model)
 			BIC_PRESENT(BIC_RAMWatt);
 		}
 		break;
-	case INTEL_FAM6_ATOM_SILVERMONT1:	/* BYT */
-	case INTEL_FAM6_ATOM_SILVERMONT2:	/* AVN */
+	case INTEL_FAM6_ATOM_SILVERMONT:	/* BYT */
+	case INTEL_FAM6_ATOM_SILVERMONT_X:	/* AVN */
 		do_rapl = RAPL_PKG | RAPL_CORES;
 		if (rapl_joules) {
 			BIC_PRESENT(BIC_Pkg_J);
@@ -3881,7 +3881,7 @@ void rapl_probe(unsigned int family, unsigned int model)
 			BIC_PRESENT(BIC_CorWatt);
 		}
 		break;
-	case INTEL_FAM6_ATOM_DENVERTON:	/* DNV */
+	case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
 		do_rapl = RAPL_PKG | RAPL_DRAM | RAPL_DRAM_POWER_INFO | RAPL_DRAM_PERF_STATUS | RAPL_PKG_PERF_STATUS | RAPL_PKG_POWER_INFO | RAPL_CORES_ENERGY_STATUS;
 		BIC_PRESENT(BIC_PKG__);
 		BIC_PRESENT(BIC_RAM__);
@@ -3904,7 +3904,7 @@ void rapl_probe(unsigned int family, unsigned int model)
 		return;
 
 	rapl_power_units = 1.0 / (1 << (msr & 0xF));
-	if (model == INTEL_FAM6_ATOM_SILVERMONT1)
+	if (model == INTEL_FAM6_ATOM_SILVERMONT)
 		rapl_energy_units = 1.0 * (1 << (msr >> 8 & 0x1F)) / 1000000;
 	else
 		rapl_energy_units = 1.0 / (1 << (msr >> 8 & 0x1F));
@@ -4155,8 +4155,8 @@ int has_snb_msrs(unsigned int family, unsigned int model)
 	case INTEL_FAM6_CANNONLAKE_MOBILE:	/* CNL */
 	case INTEL_FAM6_SKYLAKE_X:	/* SKX */
 	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
-	case INTEL_FAM6_ATOM_GEMINI_LAKE:
-	case INTEL_FAM6_ATOM_DENVERTON:	/* DNV */
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
+	case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
 		return 1;
 	}
 	return 0;
@@ -4185,7 +4185,7 @@ int has_hsw_msrs(unsigned int family, unsigned int model)
 	case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
 	case INTEL_FAM6_CANNONLAKE_MOBILE:	/* CNL */
 	case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
-	case INTEL_FAM6_ATOM_GEMINI_LAKE:
+	case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
 		return 1;
 	}
 	return 0;
@@ -4217,8 +4217,8 @@ int is_slm(unsigned int family, unsigned int model)
 	if (!genuine_intel)
 		return 0;
 	switch (model) {
-	case INTEL_FAM6_ATOM_SILVERMONT1:	/* BYT */
-	case INTEL_FAM6_ATOM_SILVERMONT2:	/* AVN */
+	case INTEL_FAM6_ATOM_SILVERMONT:	/* BYT */
+	case INTEL_FAM6_ATOM_SILVERMONT_X:	/* AVN */
 		return 1;
 	}
 	return 0;
@@ -4631,11 +4631,11 @@ void process_cpuid()
 				case INTEL_FAM6_SKYLAKE_MOBILE:	/* SKL */
 					crystal_hz = 24000000;	/* 24.0 MHz */
 					break;
-				case INTEL_FAM6_ATOM_DENVERTON:	/* DNV */
+				case INTEL_FAM6_ATOM_GOLDMONT_X:	/* DNV */
 					crystal_hz = 25000000;	/* 25.0 MHz */
 					break;
 				case INTEL_FAM6_ATOM_GOLDMONT:	/* BXT */
-				case INTEL_FAM6_ATOM_GEMINI_LAKE:
+				case INTEL_FAM6_ATOM_GOLDMONT_PLUS:
 					crystal_hz = 19200000;	/* 19.2 MHz */
 					break;
 				default:
