powerpc/rtas: Fix a potential race between CPU-Offline & Migration

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powerpc] rtas: Fix a potential race between CPU-Offline & Migration (Steve Best) [1650249]
Rebuild_FUZZ: 93.55%
commit-author Gautham R. Shenoy <ego@linux.vnet.ibm.com>
commit dfd718a2ed1f678e66749ffe41bdeafedf3f4314
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/dfd718a2.failed

Live Partition Migrations require all the present CPUs to execute the
H_JOIN call, and hence rtas_ibm_suspend_me() onlines any offline CPUs
before initiating the migration for this purpose.

The commit 85a88cabad57
("powerpc/pseries: Disable CPU hotplug across migrations")
disables any CPU-hotplug operations once all the offline CPUs are
brought online to prevent any further state change. Once the
CPU-Hotplug operation is disabled, the code assumes that all the CPUs
are online.

However, there is a minor window in rtas_ibm_suspend_me() between
onlining the offline CPUs and disabling CPU-Hotplug when a concurrent
CPU-offline operations initiated by the userspace can succeed thereby
nullifying the the aformentioned assumption. In this unlikely case
these offlined CPUs will not call H_JOIN, resulting in a system hang.

Fix this by verifying that all the present CPUs are actually online
after CPU-Hotplug has been disabled, failing which we restore the
state of the offline CPUs in rtas_ibm_suspend_me() and return an
-EBUSY.

	Cc: Nathan Fontenot <nfont@linux.vnet.ibm.com>
	Cc: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
	Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
	Signed-off-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
	Reviewed-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit dfd718a2ed1f678e66749ffe41bdeafedf3f4314)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/rtas.c
diff --cc arch/powerpc/kernel/rtas.c
index 83cb36cf4632,de35bd8f047f..000000000000
--- a/arch/powerpc/kernel/rtas.c
+++ b/arch/powerpc/kernel/rtas.c
@@@ -962,8 -982,15 +962,16 @@@ int rtas_ibm_suspend_me(u64 handle
  	}
  
  	cpu_hotplug_disable();
 +	stop_topology_update();
  
+ 	/* Check if we raced with a CPU-Offline Operation */
+ 	if (unlikely(!cpumask_equal(cpu_present_mask, cpu_online_mask))) {
+ 		pr_err("%s: Raced against a concurrent CPU-Offline\n",
+ 		       __func__);
+ 		atomic_set(&data.error, -EBUSY);
+ 		goto out_hotplug_enable;
+ 	}
+ 
  	/* Call function on all CPUs.  One of us will make the
  	 * rtas call
  	 */
@@@ -975,7 -1002,7 +983,11 @@@
  	if (atomic_read(&data.error) != 0)
  		printk(KERN_ERR "Error doing global join\n");
  
++<<<<<<< HEAD
 +	start_topology_update();
++=======
+ out_hotplug_enable:
++>>>>>>> dfd718a2ed1f (powerpc/rtas: Fix a potential race between CPU-Offline & Migration)
  	cpu_hotplug_enable();
  
  	/* Take down CPUs not online prior to suspend */
* Unmerged path arch/powerpc/kernel/rtas.c
