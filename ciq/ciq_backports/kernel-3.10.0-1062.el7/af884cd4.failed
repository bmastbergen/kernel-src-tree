proc: report no_new_privs state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Kees Cook <keescook@chromium.org>
commit af884cd4a5ae62fcf5e321fecf0ec1014730353d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/af884cd4.failed

Similar to being able to examine if a process has been correctly
confined with seccomp, the state of no_new_privs is equally interesting,
so this adds it to /proc/$pid/status.

Link: http://lkml.kernel.org/r/20161103214041.GA58566@beast
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Jann Horn <jann@thejh.net>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Konstantin Khlebnikov <koct9i@gmail.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Cc: Rodrigo Freire <rfreire@redhat.com>
	Cc: John Stultz <john.stultz@linaro.org>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Cc: Robert Ho <robert.hu@intel.com>
	Cc: Jerome Marchand <jmarchan@redhat.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Alexey Dobriyan <adobriyan@gmail.com>
	Cc: "Richard W.M. Jones" <rjones@redhat.com>
	Cc: Joe Perches <joe@perches.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit af884cd4a5ae62fcf5e321fecf0ec1014730353d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/array.c
diff --cc fs/proc/array.c
index 39684c79e8e2,082676ab4878..000000000000
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@@ -364,33 -342,10 +364,39 @@@ static inline void task_cap(struct seq_
  
  static inline void task_seccomp(struct seq_file *m, struct task_struct *p)
  {
+ 	seq_put_decimal_ull(m, "NoNewPrivs:\t", task_no_new_privs(p));
  #ifdef CONFIG_SECCOMP
++<<<<<<< HEAD
 +	seq_printf(m, "Seccomp:\t%d\n", p->seccomp.mode);
 +#endif
 +	seq_printf(m, "Speculation_Store_Bypass:\t");
 +	switch (arch_prctl_spec_ctrl_get(p, PR_SPEC_STORE_BYPASS)) {
 +	case -EINVAL:
 +		seq_printf(m, "unknown");
 +		break;
 +	case PR_SPEC_NOT_AFFECTED:
 +		seq_printf(m, "not vulnerable");
 +		break;
 +	case PR_SPEC_PRCTL | PR_SPEC_FORCE_DISABLE:
 +		seq_printf(m, "thread force mitigated");
 +		break;
 +	case PR_SPEC_PRCTL | PR_SPEC_DISABLE:
 +		seq_printf(m, "thread mitigated");
 +		break;
 +	case PR_SPEC_PRCTL | PR_SPEC_ENABLE:
 +		seq_printf(m, "thread vulnerable");
 +		break;
 +	case PR_SPEC_DISABLE:
 +		seq_printf(m, "globally mitigated");
 +		break;
 +	default:
 +		seq_printf(m, "vulnerable");
 +		break;
 +	}
++=======
+ 	seq_put_decimal_ull(m, "\nSeccomp:\t", p->seccomp.mode);
+ #endif
++>>>>>>> af884cd4a5ae (proc: report no_new_privs state)
  	seq_putc(m, '\n');
  }
  
diff --git a/Documentation/filesystems/proc.txt b/Documentation/filesystems/proc.txt
index be37ea03745b..683c178d8854 100644
--- a/Documentation/filesystems/proc.txt
+++ b/Documentation/filesystems/proc.txt
@@ -188,6 +188,7 @@ read the file /proc/PID/status:
   CapPrm: 0000000000000000
   CapEff: 0000000000000000
   CapBnd: ffffffffffffffff
+  NoNewPrivs:     0
   Seccomp:        0
   voluntary_ctxt_switches:        0
   nonvoluntary_ctxt_switches:     1
@@ -252,6 +253,7 @@ Table 1-2: Contents of the status files (as of 2.6.30-rc7)
  CapPrm                      bitmap of permitted capabilities
  CapEff                      bitmap of effective capabilities
  CapBnd                      bitmap of capabilities bounding set
+ NoNewPrivs                  no_new_privs, like prctl(PR_GET_NO_NEW_PRIV, ...)
  Seccomp                     seccomp mode, like prctl(PR_GET_SECCOMP, ...)
  Cpus_allowed                mask of CPUs on which this process may run
  Cpus_allowed_list           Same as previous, but in "list format"
* Unmerged path fs/proc/array.c
