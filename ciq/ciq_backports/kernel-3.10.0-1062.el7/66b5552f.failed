netpoll: Rename netpoll_rx_enable/disable to netpoll_poll_disable/enable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 66b5552fc2dfbaa6445b1bdadd10c9305ce261bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/66b5552f.failed

The netpoll_rx_enable and netpoll_rx_disable functions have always
controlled polling the network drivers transmit and receive queues.

Rename them to netpoll_poll_enable and netpoll_poll_disable to make
their functionality clear.

	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 66b5552fc2dfbaa6445b1bdadd10c9305ce261bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 3f9b51053da7,778b2036a9e7..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -1411,6 -1313,9 +1411,12 @@@ static int __dev_close_many(struct list
  	might_sleep();
  
  	list_for_each_entry(dev, head, close_list) {
++<<<<<<< HEAD
++=======
+ 		/* Temporarily disable netpoll until the interface is down */
+ 		netpoll_poll_disable(dev);
+ 
++>>>>>>> 66b5552fc2df (netpoll: Rename netpoll_rx_enable/disable to netpoll_poll_disable/enable)
  		call_netdevice_notifiers(NETDEV_GOING_DOWN, dev);
  
  		clear_bit(__LINK_STATE_START, &dev->state);
@@@ -1440,6 -1345,8 +1446,11 @@@
  			ops->ndo_stop(dev);
  
  		dev->flags &= ~IFF_UP;
++<<<<<<< HEAD
++=======
+ 		net_dmaengine_put();
+ 		netpoll_poll_enable(dev);
++>>>>>>> 66b5552fc2df (netpoll: Rename netpoll_rx_enable/disable to netpoll_poll_disable/enable)
  	}
  
  	return 0;
diff --git a/include/linux/netpoll.h b/include/linux/netpoll.h
index 099faed9459c..f234ac050a38 100644
--- a/include/linux/netpoll.h
+++ b/include/linux/netpoll.h
@@ -53,11 +53,11 @@ struct netpoll_info {
 };
 
 #ifdef CONFIG_NETPOLL
-extern void netpoll_rx_disable(struct net_device *dev);
-extern void netpoll_rx_enable(struct net_device *dev);
+extern void netpoll_poll_disable(struct net_device *dev);
+extern void netpoll_poll_enable(struct net_device *dev);
 #else
-static inline void netpoll_rx_disable(struct net_device *dev) { return; }
-static inline void netpoll_rx_enable(struct net_device *dev) { return; }
+static inline void netpoll_poll_disable(struct net_device *dev) { return; }
+static inline void netpoll_poll_enable(struct net_device *dev) { return; }
 #endif
 
 void netpoll_send_udp(struct netpoll *np, const char *msg, int len);
* Unmerged path net/core/dev.c
diff --git a/net/core/netpoll.c b/net/core/netpoll.c
index 1265f6cf8d30..84ccf834a871 100644
--- a/net/core/netpoll.c
+++ b/net/core/netpoll.c
@@ -213,7 +213,7 @@ static void netpoll_poll_dev(struct net_device *dev)
 	zap_completion_queue();
 }
 
-void netpoll_rx_disable(struct net_device *dev)
+void netpoll_poll_disable(struct net_device *dev)
 {
 	struct netpoll_info *ni;
 	int idx;
@@ -224,9 +224,9 @@ void netpoll_rx_disable(struct net_device *dev)
 		down(&ni->dev_lock);
 	srcu_read_unlock(&netpoll_srcu, idx);
 }
-EXPORT_SYMBOL(netpoll_rx_disable);
+EXPORT_SYMBOL(netpoll_poll_disable);
 
-void netpoll_rx_enable(struct net_device *dev)
+void netpoll_poll_enable(struct net_device *dev)
 {
 	struct netpoll_info *ni;
 	rcu_read_lock();
@@ -235,7 +235,7 @@ void netpoll_rx_enable(struct net_device *dev)
 		up(&ni->dev_lock);
 	rcu_read_unlock();
 }
-EXPORT_SYMBOL(netpoll_rx_enable);
+EXPORT_SYMBOL(netpoll_poll_enable);
 
 static void refill_skbs(void)
 {
