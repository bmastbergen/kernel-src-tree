IB/core: Change filter function return type from int to bool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Parav Pandit <parav@mellanox.com>
commit dd81b2c8a3339c813568d07091fcd0d97dd0cf41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/dd81b2c8.failed

Filter functions returns either 0 or 1, therefore better change their
return type from int to bool to reflect the same.  Additionally some
filter functions have suffix of _filter some doesn't.  Make all filter
function consistent to have __filter suffix to improve code readability.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit dd81b2c8a3339c813568d07091fcd0d97dd0cf41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/roce_gid_mgmt.c
diff --cc drivers/infiniband/core/roce_gid_mgmt.c
index b256bfb111ea,ee366199b169..000000000000
--- a/drivers/infiniband/core/roce_gid_mgmt.c
+++ b/drivers/infiniband/core/roce_gid_mgmt.c
@@@ -184,22 -186,59 +186,64 @@@ is_eth_port_inactive_slave_filter(struc
  	return res;
  }
  
++<<<<<<< HEAD
 +static int pass_all_filter(struct ib_device *ib_dev, u8 port,
 +			   struct net_device *rdma_ndev, void *cookie)
++=======
+ /** is_ndev_for_default_gid_filter - Check if a given netdevice
+  * can be considered for default GIDs or not.
+  * @ib_dev:		IB device to check
+  * @port:		Port to consider for adding default GID
+  * @rdma_ndev:		rdma netdevice pointer
+  * @cookie_ndev:	Netdevice to consider to form a default GID
+  *
+  * is_ndev_for_default_gid_filter() returns true if a given netdevice can be
+  * considered for deriving default RoCE GID, returns false otherwise.
+  */
+ static bool
+ is_ndev_for_default_gid_filter(struct ib_device *ib_dev, u8 port,
+ 			       struct net_device *rdma_ndev, void *cookie)
  {
- 	return 1;
+ 	struct net_device *cookie_ndev = cookie;
+ 	bool res;
+ 
+ 	if (!rdma_ndev)
+ 		return false;
+ 
+ 	rcu_read_lock();
+ 
+ 	/*
+ 	 * When rdma netdevice is used in bonding, bonding master netdevice
+ 	 * should be considered for default GIDs. Therefore, ignore slave rdma
+ 	 * netdevices when bonding is considered.
+ 	 * Additionally when event(cookie) netdevice is bond master device,
+ 	 * make sure that it the upper netdevice of rdma netdevice.
+ 	 */
+ 	res = ((cookie_ndev == rdma_ndev && !netif_is_bond_slave(rdma_ndev)) ||
+ 	       (netif_is_bond_master(cookie_ndev) &&
+ 		rdma_is_upper_dev_rcu(rdma_ndev, cookie_ndev)));
+ 
+ 	rcu_read_unlock();
+ 	return res;
  }
  
- static int upper_device_filter(struct ib_device *ib_dev, u8 port,
- 			       struct net_device *rdma_ndev, void *cookie)
+ static bool pass_all_filter(struct ib_device *ib_dev, u8 port,
+ 			    struct net_device *rdma_ndev, void *cookie)
++>>>>>>> dd81b2c8a333 (IB/core: Change filter function return type from int to bool)
+ {
+ 	return true;
+ }
+ 
+ static bool upper_device_filter(struct ib_device *ib_dev, u8 port,
+ 				struct net_device *rdma_ndev, void *cookie)
  {
- 	int res;
+ 	bool res;
  
  	if (!rdma_ndev)
- 		return 0;
+ 		return false;
  
  	if (rdma_ndev == cookie)
- 		return 1;
+ 		return true;
  
  	rcu_read_lock();
  	res = rdma_is_upper_dev_rcu(rdma_ndev, cookie);
@@@ -461,10 -477,23 +505,28 @@@ static void enum_all_gids_of_dev_cb(str
  	 * our feet
  	 */
  	rtnl_lock();
 -	down_read(&net_rwsem);
  	for_each_net(net)
++<<<<<<< HEAD
 +		for_each_netdev(net, ndev)
 +			if (is_eth_port_of_netdev(ib_dev, port, rdma_ndev, ndev))
 +				add_netdev_ips(ib_dev, port, rdma_ndev, ndev);
++=======
+ 		for_each_netdev(net, ndev) {
+ 			/*
+ 			 * Filter and add default GIDs of the primary netdevice
+ 			 * when not in bonding mode, or add default GIDs
+ 			 * of bond master device, when in bonding mode.
+ 			 */
+ 			if (is_ndev_for_default_gid_filter(ib_dev, port,
+ 							   rdma_ndev, ndev))
+ 				add_default_gids(ib_dev, port, rdma_ndev, ndev);
+ 
+ 			if (is_eth_port_of_netdev_filter(ib_dev, port,
+ 							 rdma_ndev, ndev))
+ 				_add_netdev_ips(ib_dev, port, ndev);
+ 		}
+ 	up_read(&net_rwsem);
++>>>>>>> dd81b2c8a333 (IB/core: Change filter function return type from int to bool)
  	rtnl_unlock();
  }
  
diff --git a/drivers/infiniband/core/core_priv.h b/drivers/infiniband/core/core_priv.h
index 7655943ecf62..dfb60b3006c6 100644
--- a/drivers/infiniband/core/core_priv.h
+++ b/drivers/infiniband/core/core_priv.h
@@ -90,8 +90,8 @@ void ib_device_unregister_sysfs(struct ib_device *device);
 typedef void (*roce_netdev_callback)(struct ib_device *device, u8 port,
 	      struct net_device *idev, void *cookie);
 
-typedef int (*roce_netdev_filter)(struct ib_device *device, u8 port,
-	     struct net_device *idev, void *cookie);
+typedef bool (*roce_netdev_filter)(struct ib_device *device, u8 port,
+				   struct net_device *idev, void *cookie);
 
 void ib_enum_roce_netdev(struct ib_device *ib_dev,
 			 roce_netdev_filter filter,
* Unmerged path drivers/infiniband/core/roce_gid_mgmt.c
