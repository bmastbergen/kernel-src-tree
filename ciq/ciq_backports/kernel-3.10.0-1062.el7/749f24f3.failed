xfs: Fix bool initialization/comparison

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Thomas Meyer <thomas@m3y3r.de>
commit 749f24f33e87c1706d716c283027595b72a034f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/749f24f3.failed

Bool initializations should use true and false. Bool tests don't need
comparisons.

	Signed-off-by: Thomas Meyer <thomas@m3y3r.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 749f24f33e87c1706d716c283027595b72a034f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_file.c
diff --cc fs/xfs/xfs_file.c
index 374d446488ef,56d0e526870c..000000000000
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@@ -978,8 -762,9 +978,12 @@@ xfs_file_fallocate
  	struct xfs_inode	*ip = XFS_I(inode);
  	long			error;
  	enum xfs_prealloc_flags	flags = 0;
 -	uint			iolock = XFS_IOLOCK_EXCL;
 +	uint			iolock = XFS_IOLOCK_EXCL | XFS_MMAPLOCK_EXCL;
  	loff_t			new_size = 0;
++<<<<<<< HEAD
++=======
+ 	bool			do_file_insert = false;
++>>>>>>> 749f24f33e87 (xfs: Fix bool initialization/comparison)
  
  	if (!S_ISREG(inode->i_mode))
  		return -EINVAL;
@@@ -1018,6 -805,27 +1022,30 @@@
  		error = xfs_collapse_file_space(ip, offset, len);
  		if (error)
  			goto out_unlock;
++<<<<<<< HEAD
++=======
+ 	} else if (mode & FALLOC_FL_INSERT_RANGE) {
+ 		unsigned int blksize_mask = i_blocksize(inode) - 1;
+ 
+ 		new_size = i_size_read(inode) + len;
+ 		if (offset & blksize_mask || len & blksize_mask) {
+ 			error = -EINVAL;
+ 			goto out_unlock;
+ 		}
+ 
+ 		/* check the new inode size does not wrap through zero */
+ 		if (new_size > inode->i_sb->s_maxbytes) {
+ 			error = -EFBIG;
+ 			goto out_unlock;
+ 		}
+ 
+ 		/* Offset should be less than i_size */
+ 		if (offset >= i_size_read(inode)) {
+ 			error = -EINVAL;
+ 			goto out_unlock;
+ 		}
+ 		do_file_insert = true;
++>>>>>>> 749f24f33e87 (xfs: Fix bool initialization/comparison)
  	} else {
  		flags |= XFS_PREALLOC_SET;
  
diff --git a/fs/xfs/libxfs/xfs_bmap.c b/fs/xfs/libxfs/xfs_bmap.c
index 5a4d012516f2..e6eb07963c8c 100644
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@ -1452,14 +1452,14 @@ xfs_bmap_isaeof(
 	int			is_empty;
 	int			error;
 
-	bma->aeof = 0;
+	bma->aeof = false;
 	error = xfs_bmap_last_extent(NULL, bma->ip, whichfork, &rec,
 				     &is_empty);
 	if (error)
 		return error;
 
 	if (is_empty) {
-		bma->aeof = 1;
+		bma->aeof = true;
 		return 0;
 	}
 
diff --git a/fs/xfs/libxfs/xfs_ialloc.c b/fs/xfs/libxfs/xfs_ialloc.c
index 35550ad97cb9..6f249fedc675 100644
--- a/fs/xfs/libxfs/xfs_ialloc.c
+++ b/fs/xfs/libxfs/xfs_ialloc.c
@@ -1958,7 +1958,7 @@ xfs_difree_inobt(
 	if (!(mp->m_flags & XFS_MOUNT_IKEEP) &&
 	    rec.ir_free == XFS_INOBT_ALL_FREE &&
 	    mp->m_sb.sb_inopblock <= XFS_INODES_PER_CHUNK) {
-		xic->deleted = 1;
+		xic->deleted = true;
 		xic->first_ino = XFS_AGINO_TO_INO(mp, agno, rec.ir_startino);
 		xic->alloc = xfs_inobt_irec_to_allocmask(&rec);
 
@@ -1985,7 +1985,7 @@ xfs_difree_inobt(
 
 		xfs_difree_inode_chunk(mp, agno, &rec, dfops);
 	} else {
-		xic->deleted = 0;
+		xic->deleted = false;
 
 		error = xfs_inobt_update(cur, &rec);
 		if (error) {
* Unmerged path fs/xfs/xfs_file.c
diff --git a/fs/xfs/xfs_log.c b/fs/xfs/xfs_log.c
index 5366503ca51e..c72abe798866 100644
--- a/fs/xfs/xfs_log.c
+++ b/fs/xfs/xfs_log.c
@@ -2506,7 +2506,7 @@ next_lv:
 				if (lv)
 					vecp = lv->lv_iovecp;
 			}
-			if (record_cnt == 0 && ordered == false) {
+			if (record_cnt == 0 && !ordered) {
 				if (!lv)
 					return 0;
 				break;
diff --git a/fs/xfs/xfs_mount.c b/fs/xfs/xfs_mount.c
index ecfc11aa6709..eae955a7b92d 100644
--- a/fs/xfs/xfs_mount.c
+++ b/fs/xfs/xfs_mount.c
@@ -698,7 +698,7 @@ xfs_mountfs(
 	xfs_set_maxicount(mp);
 
 	/* enable fail_at_unmount as default */
-	mp->m_fail_unmount = 1;
+	mp->m_fail_unmount = true;
 
 	error = xfs_sysfs_init(&mp->m_kobj, &xfs_mp_ktype, NULL, mp->m_fsname);
 	if (error)
