x86/speculation/mds: Add mds=full,nosmt cmdline option

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] speculation/mds: Add mds=full, nosmt cmdline option (Waiman Long) [1709296 1690358 1690348 1690335] {CVE-2018-12126 CVE-2018-12127 CVE-2018-12130 CVE-2019-11091}
Rebuild_FUZZ: 95.24%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit d71eb0ce109a124b0fa714832823b9452f2762cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/d71eb0ce.failed

Add the mds=full,nosmt cmdline option.  This is like mds=full, but with
SMT disabled if the CPU is vulnerable.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
	Acked-by: Jiri Kosina <jkosina@suse.cz>

(cherry picked from commit d71eb0ce109a124b0fa714832823b9452f2762cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/hw-vuln/mds.rst
#	Documentation/kernel-parameters.txt
#	arch/x86/kernel/cpu/bugs.c
diff --cc Documentation/kernel-parameters.txt
index f6852ae416ce,8f04985d3122..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -1855,6 -2356,32 +1855,35 @@@ bytes respectively. Such letter suffixe
  			Format: <first>,<last>
  			Specifies range of consoles to be captured by the MDA.
  
++<<<<<<< HEAD:Documentation/kernel-parameters.txt
++=======
+ 	mds=		[X86,INTEL]
+ 			Control mitigation for the Micro-architectural Data
+ 			Sampling (MDS) vulnerability.
+ 
+ 			Certain CPUs are vulnerable to an exploit against CPU
+ 			internal buffers which can forward information to a
+ 			disclosure gadget under certain conditions.
+ 
+ 			In vulnerable processors, the speculatively
+ 			forwarded data can be used in a cache side channel
+ 			attack, to access data to which the attacker does
+ 			not have direct access.
+ 
+ 			This parameter controls the MDS mitigation. The
+ 			options are:
+ 
+ 			full       - Enable MDS mitigation on vulnerable CPUs
+ 			full,nosmt - Enable MDS mitigation and disable
+ 				     SMT on vulnerable CPUs
+ 			off        - Unconditionally disable MDS mitigation
+ 
+ 			Not specifying this option is equivalent to
+ 			mds=full.
+ 
+ 			For details see: Documentation/admin-guide/hw-vuln/mds.rst
+ 
++>>>>>>> d71eb0ce109a (x86/speculation/mds: Add mds=full,nosmt cmdline option):Documentation/admin-guide/kernel-parameters.txt
  	mem=nn[KMG]	[KNL,BOOT] Force usage of a specific amount of memory
  			Amount of memory to be used when the kernel is not able
  			to see the whole system memory or for test.
diff --cc arch/x86/kernel/cpu/bugs.c
index 6ec1d2da76d1,9f252082a83b..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -111,32 -216,59 +111,82 @@@ void x86_amd_ssbd_enable(void
  		wrmsrl(MSR_AMD64_LS_CFG, msrval);
  }
  
++<<<<<<< HEAD
 +/* The kernel command line selection */
 +enum spectre_v2_mitigation_cmd {
 +	SPECTRE_V2_CMD_NONE,
 +	SPECTRE_V2_CMD_FORCE,
 +	SPECTRE_V2_CMD_AUTO,
 +	SPECTRE_V2_CMD_RETPOLINE,
 +	SPECTRE_V2_CMD_RETPOLINE_IBRS_USER,
 +	SPECTRE_V2_CMD_IBRS,
 +	SPECTRE_V2_CMD_IBRS_ALWAYS,
++=======
+ #undef pr_fmt
+ #define pr_fmt(fmt)	"MDS: " fmt
+ 
+ /* Default mitigation for L1TF-affected CPUs */
+ static enum mds_mitigations mds_mitigation __ro_after_init = MDS_MITIGATION_FULL;
+ static bool mds_nosmt __ro_after_init = false;
+ 
+ static const char * const mds_strings[] = {
+ 	[MDS_MITIGATION_OFF]	= "Vulnerable",
+ 	[MDS_MITIGATION_FULL]	= "Mitigation: Clear CPU buffers",
+ 	[MDS_MITIGATION_VMWERV]	= "Vulnerable: Clear CPU buffers attempted, no microcode",
++>>>>>>> d71eb0ce109a (x86/speculation/mds: Add mds=full,nosmt cmdline option)
  };
  
 -static void __init mds_select_mitigation(void)
 -{
 -	if (!boot_cpu_has_bug(X86_BUG_MDS)) {
 -		mds_mitigation = MDS_MITIGATION_OFF;
 -		return;
 -	}
 +static const char *spectre_v2_strings[] = {
 +	[SPECTRE_V2_NONE]			= "Vulnerable",
 +	[SPECTRE_V2_RETPOLINE_MINIMAL]		= "Vulnerable: Minimal ASM retpoline",
 +	[SPECTRE_V2_RETPOLINE_NO_IBPB]		= "Vulnerable: Retpoline without IBPB",
 +	[SPECTRE_V2_RETPOLINE_SKYLAKE]		= "Vulnerable: Retpoline on Skylake+",
 +	[SPECTRE_V2_RETPOLINE_UNSAFE_MODULE]	= "Vulnerable: Retpoline with unsafe module(s)",
 +	[SPECTRE_V2_RETPOLINE]			= "Mitigation: Full retpoline",
 +	[SPECTRE_V2_RETPOLINE_IBRS_USER]	= "Mitigation: Full retpoline and IBRS (user space)",
 +	[SPECTRE_V2_IBRS]			= "Mitigation: IBRS (kernel)",
 +	[SPECTRE_V2_IBRS_ALWAYS]		= "Mitigation: IBRS (kernel and user space)",
 +	[SPECTRE_V2_IBP_DISABLED]		= "Mitigation: IBP disabled",
 +	[SPECTRE_V2_IBRS_ENHANCED]		= "Mitigation: Enhanced IBRS",
 +};
  
++<<<<<<< HEAD
 +enum spectre_v2_mitigation_cmd spectre_v2_cmd = SPECTRE_V2_CMD_AUTO;
++=======
+ 	if (mds_mitigation == MDS_MITIGATION_FULL) {
+ 		if (!boot_cpu_has(X86_FEATURE_MD_CLEAR))
+ 			mds_mitigation = MDS_MITIGATION_VMWERV;
+ 
+ 		static_branch_enable(&mds_user_clear);
+ 
+ 		if (mds_nosmt && !boot_cpu_has(X86_BUG_MSBDS_ONLY))
+ 			cpu_smt_disable(false);
+ 	}
+ 
+ 	pr_info("%s\n", mds_strings[mds_mitigation]);
+ }
+ 
+ static int __init mds_cmdline(char *str)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_MDS))
+ 		return 0;
+ 
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!strcmp(str, "off"))
+ 		mds_mitigation = MDS_MITIGATION_OFF;
+ 	else if (!strcmp(str, "full"))
+ 		mds_mitigation = MDS_MITIGATION_FULL;
+ 	else if (!strcmp(str, "full,nosmt")) {
+ 		mds_mitigation = MDS_MITIGATION_FULL;
+ 		mds_nosmt = true;
+ 	}
+ 
+ 	return 0;
+ }
+ early_param("mds", mds_cmdline);
++>>>>>>> d71eb0ce109a (x86/speculation/mds: Add mds=full,nosmt cmdline option)
  
  #undef pr_fmt
  #define pr_fmt(fmt)     "Spectre V2 : " fmt
* Unmerged path Documentation/admin-guide/hw-vuln/mds.rst
* Unmerged path Documentation/admin-guide/hw-vuln/mds.rst
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path arch/x86/kernel/cpu/bugs.c
