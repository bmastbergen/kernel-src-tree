watchdog: hpwdt: remove allow_kdump module parameter.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [watchdog] hpwdt: remove allow_kdump module parameter (Joseph Szczypek) [1665272]
Rebuild_FUZZ: 88.42%
commit-author Jerry Hoemann <jerry.hoemann@hpe.com>
commit 703fc3df91eacdaee8bf63996fb3a76de55dbb5e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/703fc3df.failed

The intent of this parameter is unclear and it sets up a
race between the reset of the system by ASR and crashdump.

The length of time between receipt of the pretimeout NMI
and the ASR reset of the system is fixed by hardware.

Turning the parameter off doesn't necessairly prevent a crash dump.
Also, having the ASR reset occur while the system is crash dumping
doesn't imply that the dump was hung given the short duration
between the NMI and the reset.

This parameter is not a substitute for having a architected watchdog
crashdump hang detection paridigm.

	Signed-off-by: Jerry Hoemann <jerry.hoemann@hpe.com>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit 703fc3df91eacdaee8bf63996fb3a76de55dbb5e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/hpwdt.c
diff --cc drivers/watchdog/hpwdt.c
index a7db4c1c73e8,68e84a212d00..000000000000
--- a/drivers/watchdog/hpwdt.c
+++ b/drivers/watchdog/hpwdt.c
@@@ -41,11 -36,6 +41,14 @@@ static bool ilo5
  static unsigned int soft_margin = DEFAULT_MARGIN;	/* in seconds */
  static unsigned int reload;			/* the computed soft_margin */
  static bool nowayout = WATCHDOG_NOWAYOUT;
++<<<<<<< HEAD
 +#ifdef CONFIG_HPWDT_NMI_DECODING
 +static unsigned int allow_kdump = 1;
 +#endif
 +static char expect_release;
 +static unsigned long hpwdt_is_open;
++=======
++>>>>>>> 703fc3df91ea (watchdog: hpwdt: remove allow_kdump module parameter.)
  
  static void __iomem *pci_mem_addr;		/* the PCI-memory address */
  static unsigned long __iomem *hpwdt_nmistat;
@@@ -115,19 -109,22 +118,18 @@@ static int hpwdt_my_nmi(void
   */
  static int hpwdt_pretimeout(unsigned int ulReason, struct pt_regs *regs)
  {
 -	unsigned int mynmi = hpwdt_my_nmi();
 -	static char panic_msg[] =
 -		"00: An NMI occurred. Depending on your system the reason "
 -		"for the NMI is logged in any one of the following resources:\n"
 -		"1. Integrated Management Log (IML)\n"
 -		"2. OA Syslog\n"
 -		"3. OA Forward Progress Log\n"
 -		"4. iLO Event Log";
 -
 -	if (ilo5 && ulReason == NMI_UNKNOWN && mynmi)
 +	if (ilo5 && ulReason == NMI_UNKNOWN && !hpwdt_my_nmi())
  		return NMI_DONE;
  
- 	if (allow_kdump)
- 		hpwdt_stop();
+ 	hpwdt_stop();
  
 -	hex_byte_pack(panic_msg, mynmi);
 -	nmi_panic(regs, panic_msg);
 +	nmi_panic(regs, "An NMI occurred. Depending on your system the reason "
 +		"for the NMI is logged in any one of the following "
 +		"resources:\n"
 +		"1. Integrated Management Log (IML)\n"
 +		"2. OA Syslog\n"
 +		"3. OA Forward Progress Log\n"
 +		"4. iLO Event Log");
  
  	return NMI_HANDLED;
  }
* Unmerged path drivers/watchdog/hpwdt.c
