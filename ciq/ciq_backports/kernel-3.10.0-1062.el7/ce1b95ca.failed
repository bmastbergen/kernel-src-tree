watchdog: iTCO_wdt: Use allocated data structures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [watchdog] itco_wdt: Use allocated data structures (David Arcari) [1645537]
Rebuild_FUZZ: 88.64%
commit-author Guenter Roeck <linux@roeck-us.net>
commit ce1b95ca23c1265d63746e72f37ea8e546687361
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ce1b95ca.failed

Allocate private data and the watchdog device to avoid having
to clear it on remove and to enable subsequent simplifications.

	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
(cherry picked from commit ce1b95ca23c1265d63746e72f37ea8e546687361)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/iTCO_wdt.c
diff --cc drivers/watchdog/iTCO_wdt.c
index 247fd1d7ca0d,a35a9164ccd0..000000000000
--- a/drivers/watchdog/iTCO_wdt.c
+++ b/drivers/watchdog/iTCO_wdt.c
@@@ -389,11 -397,6 +399,14 @@@ static const struct watchdog_ops iTCO_w
  	.get_timeleft =		iTCO_wdt_get_timeleft,
  };
  
++<<<<<<< HEAD
 +static struct watchdog_device iTCO_wdt_watchdog_dev = {
 +	.info =		&ident,
 +	.ops = 		&iTCO_wdt_ops,
 +};
 +
++=======
++>>>>>>> ce1b95ca23c1 (watchdog: iTCO_wdt: Use allocated data structures)
  /*
   *	Init & exit routines
   */
@@@ -426,28 -424,31 +434,37 @@@ static void iTCO_wdt_cleanup(struct iTC
  
  static int iTCO_wdt_probe(struct platform_device *dev)
  {
++<<<<<<< HEAD
 +	int ret = -ENODEV;
 +	unsigned long val32;
 +	struct itco_wdt_platform_data *pdata = dev->dev.platform_data;
++=======
+ 	struct itco_wdt_platform_data *pdata = dev_get_platdata(&dev->dev);
+ 	struct iTCO_wdt_private *p;
+ 	unsigned long val32;
+ 	int ret;
++>>>>>>> ce1b95ca23c1 (watchdog: iTCO_wdt: Use allocated data structures)
  
  	if (!pdata)
- 		goto out;
+ 		return -ENODEV;
+ 
+ 	p = devm_kzalloc(&dev->dev, sizeof(*p), GFP_KERNEL);
+ 	if (!p)
+ 		return -ENOMEM;
  
- 	spin_lock_init(&iTCO_wdt_private.io_lock);
+ 	spin_lock_init(&p->io_lock);
  
- 	iTCO_wdt_private.tco_res =
- 		platform_get_resource(dev, IORESOURCE_IO, ICH_RES_IO_TCO);
- 	if (!iTCO_wdt_private.tco_res)
- 		goto out;
+ 	p->tco_res = platform_get_resource(dev, IORESOURCE_IO, ICH_RES_IO_TCO);
+ 	if (!p->tco_res)
+ 		return -ENODEV;
  
- 	iTCO_wdt_private.smi_res =
- 		platform_get_resource(dev, IORESOURCE_IO, ICH_RES_IO_SMI);
- 	if (!iTCO_wdt_private.smi_res)
- 		goto out;
+ 	p->smi_res = platform_get_resource(dev, IORESOURCE_IO, ICH_RES_IO_SMI);
+ 	if (!p->smi_res)
+ 		return -ENODEV;
  
- 	iTCO_wdt_private.iTCO_version = pdata->version;
- 	iTCO_wdt_private.dev = dev;
- 	iTCO_wdt_private.pdev = to_pci_dev(dev->dev.parent);
+ 	p->iTCO_version = pdata->version;
+ 	p->dev = dev;
+ 	p->pdev = to_pci_dev(dev->dev.parent);
  
  	/*
  	 * Get the Memory-Mapped GCS or PMC register, we need it for the
* Unmerged path drivers/watchdog/iTCO_wdt.c
