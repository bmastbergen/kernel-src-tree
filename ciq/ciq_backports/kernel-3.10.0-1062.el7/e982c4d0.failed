virtio-blk: modernize sysfs attribute creation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Hannes Reinecke <hare@suse.de>
commit e982c4d0a29b1d61fbe7716a8dcf8984936d6730
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e982c4d0.failed

Use new-style DEVICE_ATTR_RO/DEVICE_ATTR_RW to create the sysfs attributes
and register the disk with default sysfs attribute groups.

	Signed-off-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e982c4d0a29b1d61fbe7716a8dcf8984936d6730)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/virtio_blk.c
diff --cc drivers/block/virtio_blk.c
index d71d1da44f3e,086c6bb12baa..000000000000
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@@ -332,7 -371,7 +332,11 @@@ static ssize_t serial_show(struct devic
  	return err;
  }
  
++<<<<<<< HEAD
 +static DEVICE_ATTR(serial, S_IRUGO, virtblk_serial_show, NULL);
++=======
+ static DEVICE_ATTR_RO(serial);
++>>>>>>> e982c4d0a29b (virtio-blk: modernize sysfs attribute creation)
  
  /* The queue's logical block size must be set before calling this */
  static void virtblk_update_capacity(struct virtio_blk *vblk, bool resize)
@@@ -547,12 -574,38 +550,47 @@@ cache_type_show(struct device *dev, str
  	return snprintf(buf, 40, "%s\n", virtblk_cache_types[writeback]);
  }
  
++<<<<<<< HEAD
 +static const struct device_attribute dev_attr_cache_type_ro =
 +	__ATTR(cache_type, S_IRUGO,
 +	       virtblk_cache_type_show, NULL);
 +static const struct device_attribute dev_attr_cache_type_rw =
 +	__ATTR(cache_type, S_IRUGO|S_IWUSR,
 +	       virtblk_cache_type_show, virtblk_cache_type_store);
++=======
+ static DEVICE_ATTR_RW(cache_type);
+ 
+ static struct attribute *virtblk_attrs[] = {
+ 	&dev_attr_serial.attr,
+ 	&dev_attr_cache_type.attr,
+ 	NULL,
+ };
+ 
+ static umode_t virtblk_attrs_are_visible(struct kobject *kobj,
+ 		struct attribute *a, int n)
+ {
+ 	struct device *dev = container_of(kobj, struct device, kobj);
+ 	struct gendisk *disk = dev_to_disk(dev);
+ 	struct virtio_blk *vblk = disk->private_data;
+ 	struct virtio_device *vdev = vblk->vdev;
+ 
+ 	if (a == &dev_attr_cache_type.attr &&
+ 	    !virtio_has_feature(vdev, VIRTIO_BLK_F_CONFIG_WCE))
+ 		return S_IRUGO;
+ 
+ 	return a->mode;
+ }
+ 
+ static const struct attribute_group virtblk_attr_group = {
+ 	.attrs = virtblk_attrs,
+ 	.is_visible = virtblk_attrs_are_visible,
+ };
+ 
+ static const struct attribute_group *virtblk_attr_groups[] = {
+ 	&virtblk_attr_group,
+ 	NULL,
+ };
++>>>>>>> e982c4d0a29b (virtio-blk: modernize sysfs attribute creation)
  
  static int virtblk_init_request(struct blk_mq_tag_set *set, struct request *rq,
  		unsigned int hctx_idx, unsigned int numa_node)
@@@ -732,24 -805,9 +770,25 @@@ static int virtblk_probe(struct virtio_
  	virtblk_update_capacity(vblk, false);
  	virtio_device_ready(vdev);
  
++<<<<<<< HEAD
 +	add_disk(vblk->disk);
 +	err = device_create_file(disk_to_dev(vblk->disk), &dev_attr_serial);
 +	if (err)
 +		goto out_del_disk;
 +
 +	if (virtio_has_feature(vdev, VIRTIO_BLK_F_CONFIG_WCE))
 +		err = device_create_file(disk_to_dev(vblk->disk),
 +					 &dev_attr_cache_type_rw);
 +	else
 +		err = device_create_file(disk_to_dev(vblk->disk),
 +					 &dev_attr_cache_type_ro);
 +	if (err)
 +		goto out_del_disk;
++=======
+ 	device_add_disk(&vdev->dev, vblk->disk, virtblk_attr_groups);
++>>>>>>> e982c4d0a29b (virtio-blk: modernize sysfs attribute creation)
  	return 0;
  
- out_del_disk:
- 	del_gendisk(vblk->disk);
- 	blk_cleanup_queue(vblk->disk->queue);
  out_free_tags:
  	blk_mq_free_tag_set(&vblk->tag_set);
  out_put_disk:
* Unmerged path drivers/block/virtio_blk.c
