x86/cpu: Add workaround for MONITOR instruction erratum on Goldmont based CPUs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] cpu: Add workaround for MONITOR instruction erratum on Goldmont based CPUs (David Arcari) [1594329]
Rebuild_FUZZ: 97.37%
commit-author Peter Zijlstra <peterz@infradead.org>
commit 08e237fa56a1d95c1372033bc29c4a2517b3c0fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/08e237fa.failed

Monitored cached line may not wake up from mwait on certain
Goldmont based CPUs. This patch will avoid calling
current_set_polling_and_test() and thereby not set the TIF_ flag.
The result is that we'll always send IPIs for wakeups.

	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arjan van de Ven <arjan@linux.intel.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Len Brown <lenb@kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1468867270-18493-1-git-send-email-jacob.jun.pan@linux.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 08e237fa56a1d95c1372033bc29c4a2517b3c0fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/include/asm/mwait.h
#	arch/x86/kernel/cpu/intel.c
#	arch/x86/kernel/process.c
diff --cc arch/x86/include/asm/cpufeatures.h
index d66cb6775904,19ecc6e11f4f..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -336,17 -290,25 +336,39 @@@
  /*
   * BUG word(s)
   */
 -#define X86_BUG(x)		(NCAPINTS*32 + (x))
 +#define X86_BUG(x)			(NCAPINTS*32 + (x))
 +
++<<<<<<< HEAD
 +#define X86_BUG_F00F			X86_BUG(0) /* Intel F00F */
 +#define X86_BUG_FDIV			X86_BUG(1) /* FPU FDIV */
 +#define X86_BUG_COMA			X86_BUG(2) /* Cyrix 6x86 coma */
 +#define X86_BUG_AMD_TLB_MMATCH		X86_BUG(3) /* AMD Erratum 383 */
 +#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* AMD Erratum 400 */
 +#define X86_BUG_CPU_MELTDOWN		X86_BUG(14) /* CPU is affected by meltdown attack and needs kernel page table isolation */
 +#define X86_BUG_SPECTRE_V1		X86_BUG(15) /* CPU is affected by Spectre variant 1 attack with conditional branches */
 +#define X86_BUG_SPECTRE_V2		X86_BUG(16) /* CPU is affected by Spectre variant 2 attack with indirect branches */
 +#define X86_BUG_SPEC_STORE_BYPASS	X86_BUG(17) /* CPU is affected by speculative store bypass attack */
 +#define X86_BUG_L1TF			X86_BUG(18) /* CPU is affected by L1 Terminal Fault */
  
++=======
+ #define X86_BUG_F00F		X86_BUG(0) /* Intel F00F */
+ #define X86_BUG_FDIV		X86_BUG(1) /* FPU FDIV */
+ #define X86_BUG_COMA		X86_BUG(2) /* Cyrix 6x86 coma */
+ #define X86_BUG_AMD_TLB_MMATCH	X86_BUG(3) /* "tlb_mmatch" AMD Erratum 383 */
+ #define X86_BUG_AMD_APIC_C1E	X86_BUG(4) /* "apic_c1e" AMD Erratum 400 */
+ #define X86_BUG_11AP		X86_BUG(5) /* Bad local APIC aka 11AP */
+ #define X86_BUG_FXSAVE_LEAK	X86_BUG(6) /* FXSAVE leaks FOP/FIP/FOP */
+ #define X86_BUG_CLFLUSH_MONITOR	X86_BUG(7) /* AAI65, CLFLUSH required before MONITOR */
+ #define X86_BUG_SYSRET_SS_ATTRS	X86_BUG(8) /* SYSRET doesn't fix up SS attrs */
+ #ifdef CONFIG_X86_32
+ /*
+  * 64-bit kernels don't use X86_BUG_ESPFIX.  Make the define conditional
+  * to avoid confusion.
+  */
+ #define X86_BUG_ESPFIX		X86_BUG(9) /* "" IRET to 16-bit SS corrupts ESP/RSP high bits */
+ #endif
+ #define X86_BUG_NULL_SEG	X86_BUG(10) /* Nulling a selector preserves the base */
+ #define X86_BUG_SWAPGS_FENCE	X86_BUG(11) /* SWAPGS without input dep on GS */
+ #define X86_BUG_MONITOR		X86_BUG(12) /* IPI required to wake up remote CPU */
++>>>>>>> 08e237fa56a1 (x86/cpu: Add workaround for MONITOR instruction erratum on Goldmont based CPUs)
  #endif /* _ASM_X86_CPUFEATURES_H */
diff --cc arch/x86/include/asm/mwait.h
index 6b1502523c80,f37f2d8a2989..000000000000
--- a/arch/x86/include/asm/mwait.h
+++ b/arch/x86/include/asm/mwait.h
@@@ -45,16 -97,13 +45,22 @@@ static __always_inline void __mwait(uns
   */
  static inline void mwait_idle_with_hints(unsigned long eax, unsigned long ecx)
  {
++<<<<<<< HEAD
 +	if (!current_set_polling_and_test()) {
 +		if (this_cpu_has(X86_FEATURE_CLFLUSH_MONITOR))
++=======
+ 	if (static_cpu_has_bug(X86_BUG_MONITOR) || !current_set_polling_and_test()) {
+ 		if (static_cpu_has_bug(X86_BUG_CLFLUSH_MONITOR)) {
+ 			mb();
++>>>>>>> 08e237fa56a1 (x86/cpu: Add workaround for MONITOR instruction erratum on Goldmont based CPUs)
  			clflush((void *)&current_thread_info()->flags);
 -			mb();
 -		}
  
 +		/*
 +		 * IRQs must be disabled here and nmi uses the
 +		 * save_paranoid model which always enables ibrs on
 +		 * exception entry before any indirect jump can run.
 +		 */
 +		spec_ctrl_ibrs_off();
  		__monitor((void *)&current_thread_info()->flags, 0, 0);
  		if (!need_resched())
  			__mwait(eax, ecx);
diff --cc arch/x86/kernel/cpu/intel.c
index efaa3c425535,abf601235b29..000000000000
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@@ -14,9 -14,6 +14,12 @@@
  #include <asm/bugs.h>
  #include <asm/cpu.h>
  #include <asm/intel-family.h>
++<<<<<<< HEAD
 +#include <asm/microcode_intel.h>
 +#include <asm/hwcap2.h>
 +#include <asm/elf.h>
++=======
++>>>>>>> 08e237fa56a1 (x86/cpu: Add workaround for MONITOR instruction erratum on Goldmont based CPUs)
  
  #ifdef CONFIG_X86_64
  #include <linux/topology.h>
@@@ -481,10 -505,14 +484,14 @@@ static void init_intel(struct cpuinfo_x
  			set_cpu_cap(c, X86_FEATURE_PEBS);
  	}
  
 -	if (c->x86 == 6 && boot_cpu_has(X86_FEATURE_CLFLUSH) &&
 +	if (c->x86 == 6 && cpu_has_clflush &&
  	    (c->x86_model == 29 || c->x86_model == 46 || c->x86_model == 47))
 -		set_cpu_bug(c, X86_BUG_CLFLUSH_MONITOR);
 +		set_cpu_cap(c, X86_FEATURE_CLFLUSH_MONITOR);
  
+ 	if (c->x86 == 6 && boot_cpu_has(X86_FEATURE_MWAIT) &&
+ 		((c->x86_model == INTEL_FAM6_ATOM_GOLDMONT)))
+ 		set_cpu_bug(c, X86_BUG_MONITOR);
+ 
  #ifdef CONFIG_X86_64
  	if (c->x86 == 15)
  		c->x86_cache_alignment = c->x86_clflush_size * 2;
diff --cc arch/x86/kernel/process.c
index 5ad9710f0312,59f68f1d734b..000000000000
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@@ -573,6 -389,54 +573,57 @@@ static void amd_e400_idle(void
  		default_idle();
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Intel Core2 and older machines prefer MWAIT over HALT for C1.
+  * We can't rely on cpuidle installing MWAIT, because it will not load
+  * on systems that support only C1 -- so the boot default must be MWAIT.
+  *
+  * Some AMD machines are the opposite, they depend on using HALT.
+  *
+  * So for default C1, which is used during boot until cpuidle loads,
+  * use MWAIT-C1 on Intel HW that has it, else use HALT.
+  */
+ static int prefer_mwait_c1_over_halt(const struct cpuinfo_x86 *c)
+ {
+ 	if (c->x86_vendor != X86_VENDOR_INTEL)
+ 		return 0;
+ 
+ 	if (!cpu_has(c, X86_FEATURE_MWAIT) || static_cpu_has_bug(X86_BUG_MONITOR))
+ 		return 0;
+ 
+ 	return 1;
+ }
+ 
+ /*
+  * MONITOR/MWAIT with no hints, used for default C1 state. This invokes MWAIT
+  * with interrupts enabled and no flags, which is backwards compatible with the
+  * original MWAIT implementation.
+  */
+ static void mwait_idle(void)
+ {
+ 	if (!current_set_polling_and_test()) {
+ 		trace_cpu_idle_rcuidle(1, smp_processor_id());
+ 		if (this_cpu_has(X86_BUG_CLFLUSH_MONITOR)) {
+ 			mb(); /* quirk */
+ 			clflush((void *)&current_thread_info()->flags);
+ 			mb(); /* quirk */
+ 		}
+ 
+ 		__monitor((void *)&current_thread_info()->flags, 0, 0);
+ 		if (!need_resched())
+ 			__sti_mwait(0, 0);
+ 		else
+ 			local_irq_enable();
+ 		trace_cpu_idle_rcuidle(PWR_EVENT_EXIT, smp_processor_id());
+ 	} else {
+ 		local_irq_enable();
+ 	}
+ 	__current_clr_polling();
+ }
+ 
++>>>>>>> 08e237fa56a1 (x86/cpu: Add workaround for MONITOR instruction erratum on Goldmont based CPUs)
  void select_idle_routine(const struct cpuinfo_x86 *c)
  {
  #ifdef CONFIG_SMP
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/include/asm/mwait.h
* Unmerged path arch/x86/kernel/cpu/intel.c
* Unmerged path arch/x86/kernel/process.c
