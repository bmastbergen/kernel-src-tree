net/mlx5e: RX, Generalise name of non-linear SKB head size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: RX, Generalise name of non-linear SKB head size (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 96.43%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 75aa889fb9112874171dcb55b97302293dcd581e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/75aa889f.failed

Make name more generic by dropping MPWRQ from it, as it will be
used also in Legacy RQ in a downstream patch.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 75aa889fb9112874171dcb55b97302293dcd581e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 13394c230883,9b4ed83783e4..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -95,12 -89,30 +95,16 @@@
  #define MLX5_MPWRQ_PAGES_PER_WQE		BIT(MLX5_MPWRQ_WQE_PAGE_ORDER)
  
  #define MLX5_MTT_OCTW(npages) (ALIGN(npages, 8) / 2)
 -#define MLX5E_REQUIRED_WQE_MTTS		(ALIGN(MLX5_MPWRQ_PAGES_PER_WQE, 8))
 -#define MLX5E_LOG_ALIGNED_MPWQE_PPW	(ilog2(MLX5E_REQUIRED_WQE_MTTS))
 -#define MLX5E_REQUIRED_MTTS(wqes)	(wqes * MLX5E_REQUIRED_WQE_MTTS)
 -#define MLX5E_MAX_RQ_NUM_MTTS	\
 -	((1 << 16) * 2) /* So that MLX5_MTT_OCTW(num_mtts) fits into u16 */
 -#define MLX5E_ORDER2_MAX_PACKET_MTU (order_base_2(10 * 1024))
 -#define MLX5E_PARAMS_MAXIMUM_LOG_RQ_SIZE_MPW	\
 -		(ilog2(MLX5E_MAX_RQ_NUM_MTTS / MLX5E_REQUIRED_WQE_MTTS))
 -#define MLX5E_LOG_MAX_RQ_NUM_PACKETS_MPW \
 -	(MLX5E_PARAMS_MAXIMUM_LOG_RQ_SIZE_MPW + \
 -	 (MLX5_MPWRQ_LOG_WQE_SZ - MLX5E_ORDER2_MAX_PACKET_MTU))
 -
 -#define MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE                0x6
 -#define MLX5E_PARAMS_DEFAULT_LOG_SQ_SIZE                0xa
 -#define MLX5E_PARAMS_MAXIMUM_LOG_SQ_SIZE                0xd
 -
 -#define MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE                0x1
 -#define MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE                0xa
 -#define MLX5E_PARAMS_MAXIMUM_LOG_RQ_SIZE min_t(u8, 0xd,	\
 -					       MLX5E_LOG_MAX_RQ_NUM_PACKETS_MPW)
 -
 -#define MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE_MPW            0x2
 -
 +#define MLX5E_REQUIRED_MTTS(wqes)		\
 +	(wqes * ALIGN(MLX5_MPWRQ_PAGES_PER_WQE, 8))
 +#define MLX5E_VALID_NUM_MTTS(num_mtts) (MLX5_MTT_OCTW(num_mtts) - 1 <= U16_MAX)
 +
++<<<<<<< HEAD
 +#define MLX5_UMR_ALIGN				(2048)
 +#define MLX5_MPWRQ_SMALL_PACKET_THRESHOLD	(256)
++=======
+ #define MLX5E_RX_MAX_HEAD (256)
++>>>>>>> 75aa889fb911 (net/mlx5e: RX, Generalise name of non-linear SKB head size)
  
  #define MLX5E_PARAMS_DEFAULT_LRO_WQE_SZ                 (64 * 1024)
  #define MLX5E_DEFAULT_LRO_TIMEOUT                       32
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 29331bf7aa1d,61a76faa2779..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -1007,23 -1066,28 +1007,41 @@@ wq_ll_pop
  }
  #endif
  
 -struct sk_buff *
 -mlx5e_skb_from_cqe_mpwrq_nonlinear(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi,
 -				   u16 cqe_bcnt, u32 head_offset, u32 page_idx)
 +static inline void mlx5e_mpwqe_fill_rx_skb(struct mlx5e_rq *rq,
 +					   struct mlx5_cqe64 *cqe,
 +					   struct mlx5e_mpw_info *wi,
 +					   u32 cqe_bcnt,
 +					   struct sk_buff *skb)
  {
++<<<<<<< HEAD
 +	u16 stride_ix      = mpwrq_get_cqe_stride_index(cqe);
 +	u32 wqe_offset     = stride_ix << rq->mpwqe.log_stride_sz;
 +	u32 head_offset    = wqe_offset & (PAGE_SIZE - 1);
 +	u32 page_idx       = wqe_offset >> PAGE_SHIFT;
 +	u32 head_page_idx  = page_idx;
 +	u16 headlen = min_t(u16, MLX5_MPWRQ_SMALL_PACKET_THRESHOLD, cqe_bcnt);
 +	u32 frag_offset    = head_offset + headlen;
 +	u16 byte_cnt       = cqe_bcnt - headlen;
++=======
+ 	u16 headlen = min_t(u16, MLX5E_RX_MAX_HEAD, cqe_bcnt);
+ 	struct mlx5e_dma_info *di = &wi->umr.dma_info[page_idx];
+ 	u32 frag_offset    = head_offset + headlen;
+ 	u32 byte_cnt       = cqe_bcnt - headlen;
+ 	struct mlx5e_dma_info *head_di = di;
+ 	struct sk_buff *skb;
+ 
+ 	skb = napi_alloc_skb(rq->cq.napi,
+ 			     ALIGN(MLX5E_RX_MAX_HEAD, sizeof(long)));
+ 	if (unlikely(!skb)) {
+ 		rq->stats->buff_alloc_err++;
+ 		return NULL;
+ 	}
+ 
+ 	prefetchw(skb->data);
++>>>>>>> 75aa889fb911 (net/mlx5e: RX, Generalise name of non-linear SKB head size)
  
  	if (unlikely(frag_offset >= PAGE_SIZE)) {
 -		di++;
 +		page_idx++;
  		frag_offset -= PAGE_SIZE;
  	}
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_selftest.c b/drivers/net/ethernet/mellanox/mlx5/core/en_selftest.c
index bfc713e92c42..4b34ba91c90d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_selftest.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_selftest.c
@@ -100,7 +100,7 @@ static int mlx5e_test_link_speed(struct mlx5e_priv *priv)
 
 #ifdef CONFIG_INET
 /* loopback test */
-#define MLX5E_TEST_PKT_SIZE (MLX5_MPWRQ_SMALL_PACKET_THRESHOLD - NET_IP_ALIGN)
+#define MLX5E_TEST_PKT_SIZE (MLX5E_RX_MAX_HEAD - NET_IP_ALIGN)
 static const char mlx5e_test_text[ETH_GSTRING_LEN] = "MLX5E SELF TEST";
 #define MLX5E_TEST_MAGIC 0x5AEED15C001ULL
 
