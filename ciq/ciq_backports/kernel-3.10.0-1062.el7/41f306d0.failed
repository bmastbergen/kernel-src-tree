sunrpc: Simplify trace_svc_recv

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 41f306d0c287e0cc04054135f9f4ceb003ad6795
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/41f306d0.failed

There doesn't seem to be a lot of value in calling trace_svc_recv
in the failing case.

1. There are two very common cases: one is the transport is not
ready, and the other is shutdown. Neither is terribly interesting.

2. The trace record for the failing case contains nothing but
the status code.

Therefore the trace point call site in the error exit is removed.
Since the trace point is now recording a length instead of a
status, rename the status field and remove the case that records a
zero XID.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit 41f306d0c287e0cc04054135f9f4ceb003ad6795)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/trace/events/sunrpc.h
diff --cc include/trace/events/sunrpc.h
index 46a50fef6e62,5849bfb3ece2..000000000000
--- a/include/trace/events/sunrpc.h
+++ b/include/trace/events/sunrpc.h
@@@ -424,28 -485,28 +424,44 @@@ TRACE_EVENT(xs_tcp_data_recv
  		{ (1UL << RQ_BUSY),		"RQ_BUSY"})
  
  TRACE_EVENT(svc_recv,
- 	TP_PROTO(struct svc_rqst *rqst, int status),
+ 	TP_PROTO(struct svc_rqst *rqst, int len),
  
- 	TP_ARGS(rqst, status),
+ 	TP_ARGS(rqst, len),
  
  	TP_STRUCT__entry(
++<<<<<<< HEAD
 +		__field(__be32, xid)
 +		__field(int, status)
++=======
+ 		__field(u32, xid)
+ 		__field(int, len)
++>>>>>>> 41f306d0c287 (sunrpc: Simplify trace_svc_recv)
  		__field(unsigned long, flags)
  		__dynamic_array(unsigned char, addr, rqst->rq_addrlen)
  	),
  
  	TP_fast_assign(
++<<<<<<< HEAD
 +		__entry->xid = status > 0 ? rqst->rq_xid : 0;
 +		__entry->status = status;
++=======
+ 		__entry->xid = be32_to_cpu(rqst->rq_xid);
+ 		__entry->len = len;
++>>>>>>> 41f306d0c287 (sunrpc: Simplify trace_svc_recv)
  		__entry->flags = rqst->rq_flags;
  		memcpy(__get_dynamic_array(addr),
  			&rqst->rq_addr, rqst->rq_addrlen);
  	),
  
++<<<<<<< HEAD
 +	TP_printk("addr=%pIScp xid=0x%x status=%d flags=%s",
 +			(struct sockaddr *)__get_dynamic_array(addr),
 +			be32_to_cpu(__entry->xid), __entry->status,
++=======
+ 	TP_printk("addr=%pIScp xid=0x%08x len=%d flags=%s",
+ 			(struct sockaddr *)__get_dynamic_array(addr),
+ 			__entry->xid, __entry->len,
++>>>>>>> 41f306d0c287 (sunrpc: Simplify trace_svc_recv)
  			show_rqstp_flags(__entry->flags))
  );
  
* Unmerged path include/trace/events/sunrpc.h
diff --git a/net/sunrpc/svc_xprt.c b/net/sunrpc/svc_xprt.c
index 1ea60f3bc68f..319bcf7c85ee 100644
--- a/net/sunrpc/svc_xprt.c
+++ b/net/sunrpc/svc_xprt.c
@@ -855,7 +855,6 @@ out_release:
 	rqstp->rq_res.len = 0;
 	svc_xprt_release(rqstp);
 out:
-	trace_svc_recv(rqstp, err);
 	return err;
 }
 EXPORT_SYMBOL_GPL(svc_recv);
