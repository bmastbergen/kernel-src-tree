wlcore: no need to check return value of debugfs_create functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [usb] core: no need to check return value of debugfs_create functions (Torez Smith) [1657401]
Rebuild_FUZZ: 98.44%
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit ad2106ca00dfce85ccae7dea28168c3d9e6cc800
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ad2106ca.failed

When calling debugfs functions, there is no need to ever check the
return value.  The function can work or not, but the code logic should
never do something different based on this.

	Cc: Kalle Valo <kvalo@codeaurora.org>
	Cc: Tony Lindgren <tony@atomide.com>
	Cc: linux-wireless@vger.kernel.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Acked-by: Tony Lindgren <tony@atomide.com>
	Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
(cherry picked from commit ad2106ca00dfce85ccae7dea28168c3d9e6cc800)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ti/wlcore/debugfs.c
#	drivers/net/wireless/ti/wlcore/debugfs.h
diff --cc drivers/net/wireless/ti/wlcore/debugfs.c
index ad14984c17de,68acd901d384..000000000000
--- a/drivers/net/wireless/ti/wlcore/debugfs.c
+++ b/drivers/net/wireless/ti/wlcore/debugfs.c
@@@ -1210,11 -1240,71 +1210,76 @@@ static const struct file_operations dev
  	.llseek = dev_mem_seek,
  };
  
++<<<<<<< HEAD
 +static int wl1271_debugfs_add_files(struct wl1271 *wl,
 +				    struct dentry *rootdir)
++=======
+ static ssize_t fw_logger_read(struct file *file, char __user *user_buf,
+ 			      size_t count, loff_t *ppos)
  {
- 	int ret = 0;
- 	struct dentry *entry, *streaming;
+ 	struct wl1271 *wl = file->private_data;
+ 
+ 	return wl1271_format_buffer(user_buf, count,
+ 					ppos, "%d\n",
+ 					wl->conf.fwlog.output);
+ }
+ 
+ static ssize_t fw_logger_write(struct file *file,
+ 			       const char __user *user_buf,
+ 			       size_t count, loff_t *ppos)
+ {
+ 	struct wl1271 *wl = file->private_data;
+ 	unsigned long value;
+ 	int ret;
+ 
+ 	ret = kstrtoul_from_user(user_buf, count, 0, &value);
+ 	if (ret < 0) {
+ 		wl1271_warning("illegal value in fw_logger");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if ((value > 2) || (value == 0)) {
+ 		wl1271_warning("fw_logger value must be 1-UART 2-SDIO");
+ 		return -ERANGE;
+ 	}
+ 
+ 	if (wl->conf.fwlog.output == 0) {
+ 		wl1271_warning("invalid operation - fw logger disabled by default, please change mode via wlconf");
+ 		return -EINVAL;
+ 	}
+ 
+ 	mutex_lock(&wl->mutex);
+ 	ret = pm_runtime_get_sync(wl->dev);
+ 	if (ret < 0) {
+ 		pm_runtime_put_noidle(wl->dev);
+ 		count = ret;
+ 		goto out;
+ 	}
+ 
+ 	wl->conf.fwlog.output = value;
+ 
+ 	ret = wl12xx_cmd_config_fwlog(wl);
+ 
+ 	pm_runtime_mark_last_busy(wl->dev);
+ 	pm_runtime_put_autosuspend(wl->dev);
+ 
+ out:
+ 	mutex_unlock(&wl->mutex);
+ 	return count;
+ }
+ 
+ static const struct file_operations fw_logger_ops = {
+ 	.open = simple_open,
+ 	.read = fw_logger_read,
+ 	.write = fw_logger_write,
+ 	.llseek = default_llseek,
+ };
+ 
+ static void wl1271_debugfs_add_files(struct wl1271 *wl,
+ 				     struct dentry *rootdir)
++>>>>>>> ad2106ca00df (wlcore: no need to check return value of debugfs_create functions)
+ {
+ 	struct dentry *streaming;
  
  	DEBUGFS_ADD(tx_queue_len, rootdir);
  	DEBUGFS_ADD(retry_count, rootdir);
@@@ -1236,10 -1326,9 +1301,8 @@@
  	DEBUGFS_ADD(irq_timeout, rootdir);
  	DEBUGFS_ADD(fw_stats_raw, rootdir);
  	DEBUGFS_ADD(sleep_auth, rootdir);
 -	DEBUGFS_ADD(fw_logger, rootdir);
  
  	streaming = debugfs_create_dir("rx_streaming", rootdir);
- 	if (!streaming || IS_ERR(streaming))
- 		goto err;
  
  	DEBUGFS_ADD_PREFIX(rx_streaming, interval, streaming);
  	DEBUGFS_ADD_PREFIX(rx_streaming, always, streaming);
diff --cc drivers/net/wireless/ti/wlcore/debugfs.h
index f7381dd69009,a4952c4f587e..000000000000
--- a/drivers/net/wireless/ti/wlcore/debugfs.h
+++ b/drivers/net/wireless/ti/wlcore/debugfs.h
@@@ -53,20 -53,16 +53,30 @@@ static const struct file_operations nam
  
  #define DEBUGFS_ADD(name, parent)					\
  	do {								\
++<<<<<<< HEAD
 +		entry = debugfs_create_file(#name, 0400, parent,	\
 +					    wl, &name## _ops);		\
 +		if (!entry || IS_ERR(entry))				\
 +			goto err;					\
 +	} while (0);
++=======
+ 		debugfs_create_file(#name, 0400, parent,		\
+ 				    wl, &name## _ops);			\
+ 	} while (0)
++>>>>>>> ad2106ca00df (wlcore: no need to check return value of debugfs_create functions)
  
  
  #define DEBUGFS_ADD_PREFIX(prefix, name, parent)			\
  	do {								\
- 		entry = debugfs_create_file(#name, 0400, parent,	\
+ 		debugfs_create_file(#name, 0400, parent,		\
  				    wl, &prefix## _## name## _ops);	\
++<<<<<<< HEAD
 +		if (!entry || IS_ERR(entry))				\
 +			goto err;					\
 +	} while (0);
++=======
+ 	} while (0)
++>>>>>>> ad2106ca00df (wlcore: no need to check return value of debugfs_create functions)
  
  #define DEBUGFS_FWSTATS_FILE(sub, name, fmt, struct_type)		\
  static ssize_t sub## _ ##name## _read(struct file *file,		\
* Unmerged path drivers/net/wireless/ti/wlcore/debugfs.c
* Unmerged path drivers/net/wireless/ti/wlcore/debugfs.h
