nvme-pci: remove cq check after submission

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jens Axboe <axboe@kernel.dk>
commit f9dde187fa921c12a8680089a77595b866e65455
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f9dde187.failed

We always check the completion queue after submitting, but in my testing
this isn't a win even on DRAM/xpoint devices. In some cases it's
actually worse. Kill it.

	Signed-off-by: Jens Axboe <axboe@kernel.dk>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit f9dde187fa921c12a8680089a77595b866e65455)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 555634b3136a,577570d3e1f4..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -59,7 -69,6 +59,10 @@@ MODULE_PARM_DESC(io_queue_depth, "set i
  struct nvme_dev;
  struct nvme_queue;
  
++<<<<<<< HEAD
 +static int nvme_process_cq(struct nvme_queue *nvmeq);
++=======
++>>>>>>> f9dde187fa92 (nvme-pci: remove cq check after submission)
  static void nvme_dev_disable(struct nvme_dev *dev, bool shutdown);
  
  /*
@@@ -687,16 -890,17 +690,15 @@@ static int nvme_queue_rq(struct blk_mq_
  
  	spin_lock_irq(&nvmeq->q_lock);
  	if (unlikely(nvmeq->cq_vector < 0)) {
 -		ret = BLK_STS_IOERR;
 +		ret = BLK_MQ_RQ_QUEUE_ERROR;
  		spin_unlock_irq(&nvmeq->q_lock);
 -		goto out_cleanup_iod;
 +		goto out;
  	}
  	__nvme_submit_cmd(nvmeq, &cmnd);
- 	nvme_process_cq(nvmeq);
  	spin_unlock_irq(&nvmeq->q_lock);
 -	return BLK_STS_OK;
 -out_cleanup_iod:
 +	return BLK_MQ_RQ_QUEUE_OK;
 +out:
  	nvme_free_iod(dev, req);
 -out_free_cmd:
 -	nvme_cleanup_cmd(req);
  	return ret;
  }
  
* Unmerged path drivers/nvme/host/pci.c
