ALSA: cs46xx: Clean up proc file creations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit 0b2338a9bf36b5ac6ed43425e2f1357fb3d3841b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0b2338a9.failed

Again no functional changes, but only code clean up.
Use a standard macro for initializing the procfs entries, also drop
the info entries stored in dsp_spos_instance, as they are removed
recursively by a single snd_info_free_entry() calls.

	Reviewed-by: Jaroslav Kysela <perex@perex.cz>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 0b2338a9bf36b5ac6ed43425e2f1357fb3d3841b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/cs46xx/dsp_spos.c
#	sound/pci/cs46xx/dsp_spos_scb_lib.c
diff --cc sound/pci/cs46xx/dsp_spos.c
index f03bbd0eb027,c28e58602679..000000000000
--- a/sound/pci/cs46xx/dsp_spos.c
+++ b/sound/pci/cs46xx/dsp_spos.c
@@@ -811,77 -807,41 +811,115 @@@ int cs46xx_dsp_proc_init (struct snd_ca
  	if (!ins->proc_dsp_dir)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	if ((entry = snd_info_create_card_entry(card, "spos_symbols", ins->proc_dsp_dir)) != NULL) {
 +		entry->content = SNDRV_INFO_CONTENT_TEXT;
 +		entry->private_data = chip;
 +		entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +		entry->c.text.read = cs46xx_dsp_proc_symbol_table_read;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	ins->proc_sym_info_entry = entry;
 +    
 +	if ((entry = snd_info_create_card_entry(card, "spos_modules", ins->proc_dsp_dir)) != NULL) {
 +		entry->content = SNDRV_INFO_CONTENT_TEXT;
 +		entry->private_data = chip;
 +		entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +		entry->c.text.read = cs46xx_dsp_proc_modules_read;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	ins->proc_modules_info_entry = entry;
 +
 +	if ((entry = snd_info_create_card_entry(card, "parameter", ins->proc_dsp_dir)) != NULL) {
 +		entry->content = SNDRV_INFO_CONTENT_TEXT;
 +		entry->private_data = chip;
 +		entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +		entry->c.text.read = cs46xx_dsp_proc_parameter_dump_read;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	ins->proc_parameter_dump_info_entry = entry;
 +
 +	if ((entry = snd_info_create_card_entry(card, "sample", ins->proc_dsp_dir)) != NULL) {
 +		entry->content = SNDRV_INFO_CONTENT_TEXT;
 +		entry->private_data = chip;
 +		entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +		entry->c.text.read = cs46xx_dsp_proc_sample_dump_read;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	ins->proc_sample_dump_info_entry = entry;
 +
 +	if ((entry = snd_info_create_card_entry(card, "task_tree", ins->proc_dsp_dir)) != NULL) {
 +		entry->content = SNDRV_INFO_CONTENT_TEXT;
 +		entry->private_data = chip;
 +		entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +		entry->c.text.read = cs46xx_dsp_proc_task_tree_read;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	ins->proc_task_info_entry = entry;
 +
 +	if ((entry = snd_info_create_card_entry(card, "scb_info", ins->proc_dsp_dir)) != NULL) {
 +		entry->content = SNDRV_INFO_CONTENT_TEXT;
 +		entry->private_data = chip;
 +		entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +		entry->c.text.read = cs46xx_dsp_proc_scb_read;
 +		if (snd_info_register(entry) < 0) {
 +			snd_info_free_entry(entry);
 +			entry = NULL;
 +		}
 +	}
 +	ins->proc_scb_info_entry = entry;
++=======
+ 	entry = snd_info_create_card_entry(card, "spos_symbols",
+ 					   ins->proc_dsp_dir);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, chip,
+ 				      cs46xx_dsp_proc_symbol_table_read);
+     
+ 	entry = snd_info_create_card_entry(card, "spos_modules",
+ 					   ins->proc_dsp_dir);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, chip,
+ 				      cs46xx_dsp_proc_modules_read);
+ 
+ 	entry = snd_info_create_card_entry(card, "parameter",
+ 					   ins->proc_dsp_dir);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, chip,
+ 				      cs46xx_dsp_proc_parameter_dump_read);
+ 
+ 	entry = snd_info_create_card_entry(card, "sample",
+ 					   ins->proc_dsp_dir);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, chip,
+ 				      cs46xx_dsp_proc_sample_dump_read);
+ 
+ 	entry = snd_info_create_card_entry(card, "task_tree",
+ 					   ins->proc_dsp_dir);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, chip,
+ 				      cs46xx_dsp_proc_task_tree_read);
+ 
+ 	entry = snd_info_create_card_entry(card, "scb_info",
+ 					   ins->proc_dsp_dir);
+ 	if (entry)
+ 		snd_info_set_text_ops(entry, chip,
+ 				      cs46xx_dsp_proc_scb_read);
++>>>>>>> 0b2338a9bf36 (ALSA: cs46xx: Clean up proc file creations)
  
  	mutex_lock(&chip->spos_mutex);
  	/* register/update SCB's entries on proc */
diff --cc sound/pci/cs46xx/dsp_spos_scb_lib.c
index 7488e1b7a770,1d9d610262de..000000000000
--- a/sound/pci/cs46xx/dsp_spos_scb_lib.c
+++ b/sound/pci/cs46xx/dsp_spos_scb_lib.c
@@@ -268,18 -266,8 +269,23 @@@ void cs46xx_dsp_proc_register_scb_desc 
  
  			scb_info->chip = chip;
  			scb_info->scb_desc = scb;
++<<<<<<< HEAD
 +      
 +			entry->content = SNDRV_INFO_CONTENT_TEXT;
 +			entry->private_data = scb_info;
 +			entry->mode = S_IFREG | S_IRUGO | S_IWUSR;
 +      
 +			entry->c.text.read = cs46xx_dsp_proc_scb_info_read;
 +      
 +			if (snd_info_register(entry) < 0) {
 +				snd_info_free_entry(entry);
 +				kfree (scb_info);
 +				entry = NULL;
 +			}
++=======
+ 			snd_info_set_text_ops(entry, scb_info,
+ 					      cs46xx_dsp_proc_scb_info_read);
++>>>>>>> 0b2338a9bf36 (ALSA: cs46xx: Clean up proc file creations)
  		}
  out:
  		scb->proc_info = entry;
diff --git a/sound/pci/cs46xx/cs46xx_dsp_spos.h b/sound/pci/cs46xx/cs46xx_dsp_spos.h
index 8008c59288a6..a02e1e19c021 100644
--- a/sound/pci/cs46xx/cs46xx_dsp_spos.h
+++ b/sound/pci/cs46xx/cs46xx_dsp_spos.h
@@ -177,22 +177,16 @@ struct dsp_spos_instance {
 	/* proc fs */  
 	struct snd_card *snd_card;
 	struct snd_info_entry * proc_dsp_dir;
-	struct snd_info_entry * proc_sym_info_entry;
-	struct snd_info_entry * proc_modules_info_entry;
-	struct snd_info_entry * proc_parameter_dump_info_entry;
-	struct snd_info_entry * proc_sample_dump_info_entry;
 
 	/* SCB's descriptors */
 	int nscb;
 	int scb_highest_frag_index;
 	struct dsp_scb_descriptor scbs[DSP_MAX_SCB_DESC];
-	struct snd_info_entry * proc_scb_info_entry;
 	struct dsp_scb_descriptor * the_null_scb;
 
 	/* Task's descriptors */
 	int ntask;
 	struct dsp_task_descriptor tasks[DSP_MAX_TASK_DESC];
-	struct snd_info_entry * proc_task_info_entry;
 
 	/* SPDIF status */
 	int spdif_status_out;
* Unmerged path sound/pci/cs46xx/dsp_spos.c
* Unmerged path sound/pci/cs46xx/dsp_spos_scb_lib.c
