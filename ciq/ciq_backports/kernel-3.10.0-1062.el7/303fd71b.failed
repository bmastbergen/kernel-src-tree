vhost_net: keep private_data and rx_ring synced

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Wang <jasowang@redhat.com>
commit 303fd71b37fb710b26f5ff5444029d62cfd627bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/303fd71b.failed

We get pointer ring from the exported sock, this means we should keep
rx_ring and vq->private synced during both vq stop and backend set,
otherwise we may see stale rx_ring.

Fixes: c67df11f6e480 ("vhost_net: try batch dequing from skb array")
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: Jason Wang <jasowang@redhat.com>
	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 303fd71b37fb710b26f5ff5444029d62cfd627bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vhost/net.c
diff --cc drivers/vhost/net.c
index baf5b225a11a,efb93063fda1..000000000000
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@@ -912,6 -972,8 +912,11 @@@ static struct socket *vhost_net_stop_vq
  	sock = vq->private_data;
  	vhost_net_disable_vq(n, vq);
  	vq->private_data = NULL;
++<<<<<<< HEAD
++=======
+ 	vhost_net_buf_unproduce(nvq);
+ 	nvq->rx_ring = NULL;
++>>>>>>> 303fd71b37fb (vhost_net: keep private_data and rx_ring synced)
  	mutex_unlock(&vq->mutex);
  	return sock;
  }
@@@ -1080,7 -1162,8 +1085,12 @@@ static long vhost_net_set_backend(struc
  
  		vhost_net_disable_vq(n, vq);
  		vq->private_data = sock;
++<<<<<<< HEAD
 +		r = vhost_init_used(vq);
++=======
+ 		vhost_net_buf_unproduce(nvq);
+ 		r = vhost_vq_init_access(vq);
++>>>>>>> 303fd71b37fb (vhost_net: keep private_data and rx_ring synced)
  		if (r)
  			goto err_used;
  		r = vhost_net_enable_vq(n, vq);
* Unmerged path drivers/vhost/net.c
