scsi: target: replace fabric_ops.name with fabric_alias

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author David Disseldorp <ddiss@suse.de>
commit 59a206b4499edf4c54fd53983f0e366eef052b05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/59a206b4.failed

iscsi_target_mod is the only LIO fabric where fabric_ops.name differs from
the fabric_ops.fabric_name string.  fabric_ops.name is used when matching
target/$fabric ConfigFS create paths, so rename it .fabric_alias and
fallback to target/$fabric vs .fabric_name comparison if .fabric_alias
isn't initialised.  iscsi_target_mod is the only fabric module to set
.fabric_alias . All other fabric modules rely on .fabric_name matching and
can drop the duplicate string.

	Signed-off-by: David Disseldorp <ddiss@suse.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 59a206b4499edf4c54fd53983f0e366eef052b05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/srpt/ib_srpt.c
#	drivers/scsi/ibmvscsi_tgt/ibmvscsi_tgt.c
#	drivers/scsi/qla2xxx/tcm_qla2xxx.c
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/loopback/tcm_loop.c
#	drivers/target/sbp/sbp_target.c
#	drivers/target/tcm_fc/tfc_conf.c
#	drivers/usb/gadget/tcm_usb_gadget.c
#	drivers/vhost/scsi.c
#	drivers/xen/xen-scsiback.c
#	include/target/target_core_fabric.h
diff --cc drivers/infiniband/ulp/srpt/ib_srpt.c
index 4b79fbb1ec2b,41ee1f263bd6..000000000000
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@@ -3680,9 -3673,7 +3680,13 @@@ static struct configfs_attribute *srpt_
  
  static const struct target_core_fabric_ops srpt_template = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD
 +	.name				= "srpt",
 +	.node_acl_size			= sizeof(struct srpt_node_acl),
 +	.get_fabric_name		= srpt_get_fabric_name,
++=======
+ 	.fabric_name			= "srpt",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.tpg_get_wwn			= srpt_get_fabric_wwn,
  	.tpg_get_tag			= srpt_get_tag,
  	.tpg_check_demo_mode		= srpt_check_false,
diff --cc drivers/scsi/qla2xxx/tcm_qla2xxx.c
index 5b48ab343bc7,fc312a5eab75..000000000000
--- a/drivers/scsi/qla2xxx/tcm_qla2xxx.c
+++ b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
@@@ -1891,7 -1910,7 +1891,11 @@@ static struct configfs_attribute *tcm_q
  
  static const struct target_core_fabric_ops tcm_qla2xxx_ops = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD
 +	.name				= "qla2xxx",
++=======
+ 	.fabric_name			= "qla2xxx",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.node_acl_size			= sizeof(struct tcm_qla2xxx_nacl),
  	/*
  	 * XXX: Limit assumes single page per scatter-gather-list entry.
@@@ -1940,9 -1958,8 +1944,13 @@@
  
  static const struct target_core_fabric_ops tcm_qla2xxx_npiv_ops = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD
 +	.name				= "qla2xxx_npiv",
++=======
+ 	.fabric_name			= "qla2xxx_npiv",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.node_acl_size			= sizeof(struct tcm_qla2xxx_nacl),
 +	.get_fabric_name		= tcm_qla2xxx_npiv_get_fabric_name,
  	.tpg_get_wwn			= tcm_qla2xxx_get_fabric_wwn,
  	.tpg_get_tag			= tcm_qla2xxx_get_tag,
  	.tpg_check_demo_mode		= tcm_qla2xxx_check_demo_mode,
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index 42b8bcfc3711,39a700a41f6e..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -1687,9 -1544,9 +1687,14 @@@ static void lio_release_cmd(struct se_c
  
  const struct target_core_fabric_ops iscsi_ops = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD
 +	.name				= "iscsi",
++=======
+ 	.fabric_alias			= "iscsi",
+ 	.fabric_name			= "iSCSI",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.node_acl_size			= sizeof(struct iscsi_node_acl),
 +	.get_fabric_name		= iscsi_get_fabric_name,
  	.tpg_get_wwn			= lio_tpg_get_endpoint_wwn,
  	.tpg_get_tag			= lio_tpg_get_tag,
  	.tpg_get_default_depth		= lio_tpg_get_default_depth,
diff --cc drivers/target/loopback/tcm_loop.c
index 9c89c28a7bc3,b0991e86587f..000000000000
--- a/drivers/target/loopback/tcm_loop.c
+++ b/drivers/target/loopback/tcm_loop.c
@@@ -1216,8 -1144,7 +1216,12 @@@ static struct configfs_attribute *tcm_l
  
  static const struct target_core_fabric_ops loop_ops = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD
 +	.name				= "loopback",
 +	.get_fabric_name		= tcm_loop_get_fabric_name,
++=======
+ 	.fabric_name			= "loopback",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.tpg_get_wwn			= tcm_loop_get_endpoint_wwn,
  	.tpg_get_tag			= tcm_loop_get_tag,
  	.tpg_check_demo_mode		= tcm_loop_check_demo_mode,
diff --cc drivers/target/sbp/sbp_target.c
index 2c0296913a29,08cee13dfb9a..000000000000
--- a/drivers/target/sbp/sbp_target.c
+++ b/drivers/target/sbp/sbp_target.c
@@@ -2330,8 -2318,7 +2330,12 @@@ static struct configfs_attribute *sbp_t
  
  static const struct target_core_fabric_ops sbp_ops = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD
 +	.name				= "sbp",
 +	.get_fabric_name		= sbp_get_fabric_name,
++=======
+ 	.fabric_name			= "sbp",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.tpg_get_wwn			= sbp_get_fabric_wwn,
  	.tpg_get_tag			= sbp_get_tag,
  	.tpg_check_demo_mode		= sbp_check_true,
diff --cc drivers/target/tcm_fc/tfc_conf.c
index e1fa47bf3a58,1ce49518d440..000000000000
--- a/drivers/target/tcm_fc/tfc_conf.c
+++ b/drivers/target/tcm_fc/tfc_conf.c
@@@ -434,9 -422,8 +434,13 @@@ static u32 ft_tpg_get_inst_index(struc
  
  static const struct target_core_fabric_ops ft_fabric_ops = {
  	.module =			THIS_MODULE,
++<<<<<<< HEAD
 +	.name =				"fc",
++=======
+ 	.fabric_name =			"fc",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.node_acl_size =		sizeof(struct ft_node_acl),
 +	.get_fabric_name =		ft_get_fabric_name,
  	.tpg_get_wwn =			ft_get_fabric_wwn,
  	.tpg_get_tag =			ft_get_tag,
  	.tpg_check_demo_mode =		ft_check_false,
diff --cc drivers/usb/gadget/tcm_usb_gadget.c
index 9891e23fa6cb,34f5982cab78..000000000000
--- a/drivers/usb/gadget/tcm_usb_gadget.c
+++ b/drivers/usb/gadget/tcm_usb_gadget.c
@@@ -1829,13 -1713,9 +1829,17 @@@ static int usbg_check_stop_free(struct 
  
  static const struct target_core_fabric_ops usbg_ops = {
  	.module				= THIS_MODULE,
++<<<<<<< HEAD:drivers/usb/gadget/tcm_usb_gadget.c
 +	.name				= "usb_gadget",
 +	.get_fabric_name		= usbg_get_fabric_name,
++=======
+ 	.fabric_name			= "usb_gadget",
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias):drivers/usb/gadget/function/f_tcm.c
  	.tpg_get_wwn			= usbg_get_fabric_wwn,
  	.tpg_get_tag			= usbg_get_tag,
 +	.tpg_get_pr_transport_id	= usbg_get_pr_transport_id,
 +	.tpg_get_pr_transport_id_len	= usbg_get_pr_transport_id_len,
 +	.tpg_parse_pr_out_transport_id	= usbg_parse_pr_out_transport_id,
  	.tpg_check_demo_mode		= usbg_check_true,
  	.tpg_check_demo_mode_cache	= usbg_check_false,
  	.tpg_check_demo_mode_write_protect = usbg_check_false,
diff --cc drivers/vhost/scsi.c
index 2b14ae4c9782,a08472ae5b1b..000000000000
--- a/drivers/vhost/scsi.c
+++ b/drivers/vhost/scsi.c
@@@ -1815,28 -2282,29 +1815,45 @@@ static struct configfs_attribute *tcm_v
  	NULL,
  };
  
++<<<<<<< HEAD
 +static struct target_core_fabric_ops tcm_vhost_ops = {
 +	.module                         = THIS_MODULE,
 +	.name                           = "vhost",
 +	.get_fabric_name		= tcm_vhost_get_fabric_name,
 +	.tpg_get_wwn			= tcm_vhost_get_fabric_wwn,
 +	.tpg_get_tag			= tcm_vhost_get_tag,
 +	.tpg_parse_pr_out_transport_id	= tcm_vhost_parse_pr_out_transport_id,
 +	.tpg_check_demo_mode		= tcm_vhost_check_true,
 +	.tpg_check_demo_mode_cache	= tcm_vhost_check_true,
 +	.tpg_check_demo_mode_write_protect = tcm_vhost_check_false,
 +	.tpg_check_prod_mode_write_protect = tcm_vhost_check_false,
 +	.tpg_get_inst_index		= tcm_vhost_tpg_get_inst_index,
 +	.release_cmd			= tcm_vhost_release_cmd,
 +	.sess_get_index			= tcm_vhost_sess_get_index,
++=======
+ static const struct target_core_fabric_ops vhost_scsi_ops = {
+ 	.module				= THIS_MODULE,
+ 	.fabric_name			= "vhost",
+ 	.tpg_get_wwn			= vhost_scsi_get_fabric_wwn,
+ 	.tpg_get_tag			= vhost_scsi_get_tpgt,
+ 	.tpg_check_demo_mode		= vhost_scsi_check_true,
+ 	.tpg_check_demo_mode_cache	= vhost_scsi_check_true,
+ 	.tpg_check_demo_mode_write_protect = vhost_scsi_check_false,
+ 	.tpg_check_prod_mode_write_protect = vhost_scsi_check_false,
+ 	.tpg_check_prot_fabric_only	= vhost_scsi_check_prot_fabric_only,
+ 	.tpg_get_inst_index		= vhost_scsi_tpg_get_inst_index,
+ 	.release_cmd			= vhost_scsi_release_cmd,
+ 	.check_stop_free		= vhost_scsi_check_stop_free,
+ 	.sess_get_index			= vhost_scsi_sess_get_index,
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	.sess_get_initiator_sid		= NULL,
 -	.write_pending			= vhost_scsi_write_pending,
 -	.write_pending_status		= vhost_scsi_write_pending_status,
 -	.set_default_node_attributes	= vhost_scsi_set_default_node_attrs,
 -	.get_cmd_state			= vhost_scsi_get_cmd_state,
 -	.queue_data_in			= vhost_scsi_queue_data_in,
 -	.queue_status			= vhost_scsi_queue_status,
 -	.queue_tm_rsp			= vhost_scsi_queue_tm_rsp,
 -	.aborted_task			= vhost_scsi_aborted_task,
 +	.write_pending			= tcm_vhost_write_pending,
 +	.write_pending_status		= tcm_vhost_write_pending_status,
 +	.set_default_node_attributes	= tcm_vhost_set_default_node_attrs,
 +	.get_cmd_state			= tcm_vhost_get_cmd_state,
 +	.queue_data_in			= tcm_vhost_queue_data_in,
 +	.queue_status			= tcm_vhost_queue_status,
 +	.queue_tm_rsp			= tcm_vhost_queue_tm_rsp,
  	/*
  	 * Setup callers for generic logic in target_core_fabric_configfs.c
  	 */
diff --cc include/target/target_core_fabric.h
index aa45c977ba53,0a1595f3c5a1..000000000000
--- a/include/target/target_core_fabric.h
+++ b/include/target/target_core_fabric.h
@@@ -1,9 -1,25 +1,24 @@@
  #ifndef TARGET_CORE_FABRIC_H
  #define TARGET_CORE_FABRIC_H
  
 -#include <linux/configfs.h>
 -#include <linux/types.h>
 -#include <target/target_core_base.h>
 -
  struct target_core_fabric_ops {
  	struct module *module;
++<<<<<<< HEAD
 +	const char *name;
++=======
+ 	/*
+ 	 * XXX: Special case for iscsi/iSCSI...
+ 	 * If non-null, fabric_alias is used for matching target/$fabric
+ 	 * ConfigFS paths. If null, fabric_name is used for this (see below).
+ 	 */
+ 	const char *fabric_alias;
+ 	/*
+ 	 * fabric_name is used for matching target/$fabric ConfigFS paths
+ 	 * without a fabric_alias (see above). It's also used for the ALUA state
+ 	 * path and is stored on disk with PR state.
+ 	 */
+ 	const char *fabric_name;
++>>>>>>> 59a206b4499e (scsi: target: replace fabric_ops.name with fabric_alias)
  	size_t node_acl_size;
  	/*
  	 * Limits number of scatterlist entries per SCF_SCSI_DATA_CDB payload.
* Unmerged path drivers/scsi/ibmvscsi_tgt/ibmvscsi_tgt.c
* Unmerged path drivers/xen/xen-scsiback.c
* Unmerged path drivers/infiniband/ulp/srpt/ib_srpt.c
* Unmerged path drivers/scsi/ibmvscsi_tgt/ibmvscsi_tgt.c
* Unmerged path drivers/scsi/qla2xxx/tcm_qla2xxx.c
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
* Unmerged path drivers/target/loopback/tcm_loop.c
* Unmerged path drivers/target/sbp/sbp_target.c
diff --git a/drivers/target/target_core_configfs.c b/drivers/target/target_core_configfs.c
index ae58e9a484ab..0127c73376e3 100644
--- a/drivers/target/target_core_configfs.c
+++ b/drivers/target/target_core_configfs.c
@@ -109,7 +109,10 @@ static struct target_fabric_configfs *target_core_get_fabric(
 
 	mutex_lock(&g_tf_lock);
 	list_for_each_entry(tf, &g_tf_list, tf_list) {
-		if (!strcmp(tf->tf_ops->name, name)) {
+		const char *cmp_name = tf->tf_ops->fabric_alias;
+		if (!cmp_name)
+			cmp_name = tf->tf_ops->fabric_name;
+		if (!strcmp(cmp_name, name)) {
 			atomic_inc(&tf->tf_access_cnt);
 			mutex_unlock(&g_tf_lock);
 			return tf;
@@ -186,7 +189,7 @@ static struct config_group *target_core_register_fabric(
 		return ERR_PTR(-EINVAL);
 	}
 	pr_debug("Target_Core_ConfigFS: REGISTER -> Located fabric:"
-			" %s\n", tf->tf_ops->name);
+			" %s\n", tf->tf_ops->fabric_name);
 	/*
 	 * On a successful target_core_get_fabric() look, the returned
 	 * struct target_fabric_configfs *tf will contain a usage reference.
@@ -219,7 +222,7 @@ static void target_core_deregister_fabric(
 		" tf list\n", config_item_name(item));
 
 	pr_debug("Target_Core_ConfigFS: DEREGISTER -> located fabric:"
-			" %s\n", tf->tf_ops->name);
+			" %s\n", tf->tf_ops->fabric_name);
 	atomic_dec(&tf->tf_access_cnt);
 
 	pr_debug("Target_Core_ConfigFS: DEREGISTER -> Releasing ci"
@@ -278,19 +281,22 @@ EXPORT_SYMBOL(target_undepend_item);
 
 static int target_fabric_tf_ops_check(const struct target_core_fabric_ops *tfo)
 {
-	if (!tfo->name) {
-		pr_err("Missing tfo->name\n");
-		return -EINVAL;
-	}
-	if (strlen(tfo->name) >= TARGET_FABRIC_NAME_SIZE) {
-		pr_err("Passed name: %s exceeds TARGET_FABRIC"
-			"_NAME_SIZE\n", tfo->name);
-		return -EINVAL;
+	if (tfo->fabric_alias) {
+		if (strlen(tfo->fabric_alias) >= TARGET_FABRIC_NAME_SIZE) {
+			pr_err("Passed alias: %s exceeds "
+				"TARGET_FABRIC_NAME_SIZE\n", tfo->fabric_alias);
+			return -EINVAL;
+		}
 	}
 	if (!tfo->get_fabric_name) {
 		pr_err("Missing tfo->get_fabric_name()\n");
 		return -EINVAL;
 	}
+	if (strlen(tfo->fabric_name) >= TARGET_FABRIC_NAME_SIZE) {
+		pr_err("Passed name: %s exceeds "
+			"TARGET_FABRIC_NAME_SIZE\n", tfo->fabric_name);
+		return -EINVAL;
+	}
 	if (!tfo->tpg_get_wwn) {
 		pr_err("Missing tfo->tpg_get_wwn()\n");
 		return -EINVAL;
@@ -422,7 +428,7 @@ void target_unregister_template(const struct target_core_fabric_ops *fo)
 
 	mutex_lock(&g_tf_lock);
 	list_for_each_entry(t, &g_tf_list, tf_list) {
-		if (!strcmp(t->tf_ops->name, fo->name)) {
+		if (!strcmp(t->tf_ops->fabric_name, fo->fabric_name)) {
 			BUG_ON(atomic_read(&t->tf_access_cnt));
 			list_del(&t->tf_list);
 			mutex_unlock(&g_tf_lock);
* Unmerged path drivers/target/tcm_fc/tfc_conf.c
* Unmerged path drivers/usb/gadget/tcm_usb_gadget.c
* Unmerged path drivers/vhost/scsi.c
* Unmerged path drivers/xen/xen-scsiback.c
* Unmerged path include/target/target_core_fabric.h
