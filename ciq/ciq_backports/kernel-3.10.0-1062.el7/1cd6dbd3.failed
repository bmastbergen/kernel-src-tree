IB/mlx5: Set uid as part of TIS commands

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 1cd6dbd32f986fe05fef90249996f6ba394dfc78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/1cd6dbd3.failed

Set uid as part of TIS commands so that the firmware can manage the
TIS object in a secured way.

That will enable using a TIS that was created by verbs application
to be used by the DEVX flow in case the uid is equal.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 1cd6dbd32f986fe05fef90249996f6ba394dfc78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/cmd.c
#	drivers/infiniband/hw/mlx5/cmd.h
diff --cc drivers/infiniband/hw/mlx5/cmd.c
index 20fa395e65e0,40f7299dbb1d..000000000000
--- a/drivers/infiniband/hw/mlx5/cmd.c
+++ b/drivers/infiniband/hw/mlx5/cmd.c
@@@ -81,3 -81,182 +81,185 @@@ int mlx5_cmd_modify_cong_params(struct 
  
  	return mlx5_cmd_exec(dev, in, in_size, out, sizeof(out));
  }
++<<<<<<< HEAD
++=======
+ 
+ int mlx5_cmd_alloc_memic(struct mlx5_memic *memic, phys_addr_t *addr,
+ 			  u64 length, u32 alignment)
+ {
+ 	struct mlx5_core_dev *dev = memic->dev;
+ 	u64 num_memic_hw_pages = MLX5_CAP_DEV_MEM(dev, memic_bar_size)
+ 					>> PAGE_SHIFT;
+ 	u64 hw_start_addr = MLX5_CAP64_DEV_MEM(dev, memic_bar_start_addr);
+ 	u32 max_alignment = MLX5_CAP_DEV_MEM(dev, log_max_memic_addr_alignment);
+ 	u32 num_pages = DIV_ROUND_UP(length, PAGE_SIZE);
+ 	u32 out[MLX5_ST_SZ_DW(alloc_memic_out)] = {};
+ 	u32 in[MLX5_ST_SZ_DW(alloc_memic_in)] = {};
+ 	u32 mlx5_alignment;
+ 	u64 page_idx = 0;
+ 	int ret = 0;
+ 
+ 	if (!length || (length & MLX5_MEMIC_ALLOC_SIZE_MASK))
+ 		return -EINVAL;
+ 
+ 	/* mlx5 device sets alignment as 64*2^driver_value
+ 	 * so normalizing is needed.
+ 	 */
+ 	mlx5_alignment = (alignment < MLX5_MEMIC_BASE_ALIGN) ? 0 :
+ 			 alignment - MLX5_MEMIC_BASE_ALIGN;
+ 	if (mlx5_alignment > max_alignment)
+ 		return -EINVAL;
+ 
+ 	MLX5_SET(alloc_memic_in, in, opcode, MLX5_CMD_OP_ALLOC_MEMIC);
+ 	MLX5_SET(alloc_memic_in, in, range_size, num_pages * PAGE_SIZE);
+ 	MLX5_SET(alloc_memic_in, in, memic_size, length);
+ 	MLX5_SET(alloc_memic_in, in, log_memic_addr_alignment,
+ 		 mlx5_alignment);
+ 
+ 	while (page_idx < num_memic_hw_pages) {
+ 		spin_lock(&memic->memic_lock);
+ 		page_idx = bitmap_find_next_zero_area(memic->memic_alloc_pages,
+ 						      num_memic_hw_pages,
+ 						      page_idx,
+ 						      num_pages, 0);
+ 
+ 		if (page_idx < num_memic_hw_pages)
+ 			bitmap_set(memic->memic_alloc_pages,
+ 				   page_idx, num_pages);
+ 
+ 		spin_unlock(&memic->memic_lock);
+ 
+ 		if (page_idx >= num_memic_hw_pages)
+ 			break;
+ 
+ 		MLX5_SET64(alloc_memic_in, in, range_start_addr,
+ 			   hw_start_addr + (page_idx * PAGE_SIZE));
+ 
+ 		ret = mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ 		if (ret) {
+ 			spin_lock(&memic->memic_lock);
+ 			bitmap_clear(memic->memic_alloc_pages,
+ 				     page_idx, num_pages);
+ 			spin_unlock(&memic->memic_lock);
+ 
+ 			if (ret == -EAGAIN) {
+ 				page_idx++;
+ 				continue;
+ 			}
+ 
+ 			return ret;
+ 		}
+ 
+ 		*addr = pci_resource_start(dev->pdev, 0) +
+ 			MLX5_GET64(alloc_memic_out, out, memic_start_addr);
+ 
+ 		return 0;
+ 	}
+ 
+ 	return -ENOMEM;
+ }
+ 
+ int mlx5_cmd_dealloc_memic(struct mlx5_memic *memic, u64 addr, u64 length)
+ {
+ 	struct mlx5_core_dev *dev = memic->dev;
+ 	u64 hw_start_addr = MLX5_CAP64_DEV_MEM(dev, memic_bar_start_addr);
+ 	u32 num_pages = DIV_ROUND_UP(length, PAGE_SIZE);
+ 	u32 out[MLX5_ST_SZ_DW(dealloc_memic_out)] = {0};
+ 	u32 in[MLX5_ST_SZ_DW(dealloc_memic_in)] = {0};
+ 	u64 start_page_idx;
+ 	int err;
+ 
+ 	addr -= pci_resource_start(dev->pdev, 0);
+ 	start_page_idx = (addr - hw_start_addr) >> PAGE_SHIFT;
+ 
+ 	MLX5_SET(dealloc_memic_in, in, opcode, MLX5_CMD_OP_DEALLOC_MEMIC);
+ 	MLX5_SET64(dealloc_memic_in, in, memic_start_addr, addr);
+ 	MLX5_SET(dealloc_memic_in, in, memic_size, length);
+ 
+ 	err =  mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ 
+ 	if (!err) {
+ 		spin_lock(&memic->memic_lock);
+ 		bitmap_clear(memic->memic_alloc_pages,
+ 			     start_page_idx, num_pages);
+ 		spin_unlock(&memic->memic_lock);
+ 	}
+ 
+ 	return err;
+ }
+ 
+ int mlx5_cmd_query_ext_ppcnt_counters(struct mlx5_core_dev *dev, void *out)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(ppcnt_reg)] = {};
+ 	int sz = MLX5_ST_SZ_BYTES(ppcnt_reg);
+ 
+ 	MLX5_SET(ppcnt_reg, in, local_port, 1);
+ 
+ 	MLX5_SET(ppcnt_reg, in, grp, MLX5_ETHERNET_EXTENDED_COUNTERS_GROUP);
+ 	return  mlx5_core_access_reg(dev, in, sz, out, sz, MLX5_REG_PPCNT,
+ 				     0, 0);
+ }
+ 
+ void mlx5_cmd_destroy_tir(struct mlx5_core_dev *dev, u32 tirn, u16 uid)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(destroy_tir_in)]   = {};
+ 	u32 out[MLX5_ST_SZ_DW(destroy_tir_out)] = {};
+ 
+ 	MLX5_SET(destroy_tir_in, in, opcode, MLX5_CMD_OP_DESTROY_TIR);
+ 	MLX5_SET(destroy_tir_in, in, tirn, tirn);
+ 	MLX5_SET(destroy_tir_in, in, uid, uid);
+ 	mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ }
+ 
+ void mlx5_cmd_destroy_tis(struct mlx5_core_dev *dev, u32 tisn, u16 uid)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(destroy_tis_in)]   = {0};
+ 	u32 out[MLX5_ST_SZ_DW(destroy_tis_out)] = {0};
+ 
+ 	MLX5_SET(destroy_tis_in, in, opcode, MLX5_CMD_OP_DESTROY_TIS);
+ 	MLX5_SET(destroy_tis_in, in, tisn, tisn);
+ 	MLX5_SET(destroy_tis_in, in, uid, uid);
+ 	mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ }
+ 
+ void mlx5_cmd_dealloc_pd(struct mlx5_core_dev *dev, u32 pdn, u16 uid)
+ {
+ 	u32 out[MLX5_ST_SZ_DW(dealloc_pd_out)] = {};
+ 	u32 in[MLX5_ST_SZ_DW(dealloc_pd_in)]   = {};
+ 
+ 	MLX5_SET(dealloc_pd_in, in, opcode, MLX5_CMD_OP_DEALLOC_PD);
+ 	MLX5_SET(dealloc_pd_in, in, pd, pdn);
+ 	MLX5_SET(dealloc_pd_in, in, uid, uid);
+ 	mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ }
+ 
+ int mlx5_cmd_attach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid,
+ 			u32 qpn, u16 uid)
+ {
+ 	u32 out[MLX5_ST_SZ_DW(attach_to_mcg_out)] = {};
+ 	u32 in[MLX5_ST_SZ_DW(attach_to_mcg_in)]   = {};
+ 	void *gid;
+ 
+ 	MLX5_SET(attach_to_mcg_in, in, opcode, MLX5_CMD_OP_ATTACH_TO_MCG);
+ 	MLX5_SET(attach_to_mcg_in, in, qpn, qpn);
+ 	MLX5_SET(attach_to_mcg_in, in, uid, uid);
+ 	gid = MLX5_ADDR_OF(attach_to_mcg_in, in, multicast_gid);
+ 	memcpy(gid, mgid, sizeof(*mgid));
+ 	return mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ }
+ 
+ int mlx5_cmd_detach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid,
+ 			u32 qpn, u16 uid)
+ {
+ 	u32 out[MLX5_ST_SZ_DW(detach_from_mcg_out)] = {};
+ 	u32 in[MLX5_ST_SZ_DW(detach_from_mcg_in)]   = {};
+ 	void *gid;
+ 
+ 	MLX5_SET(detach_from_mcg_in, in, opcode, MLX5_CMD_OP_DETACH_FROM_MCG);
+ 	MLX5_SET(detach_from_mcg_in, in, qpn, qpn);
+ 	MLX5_SET(detach_from_mcg_in, in, uid, uid);
+ 	gid = MLX5_ADDR_OF(detach_from_mcg_in, in, multicast_gid);
+ 	memcpy(gid, mgid, sizeof(*mgid));
+ 	return mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+ }
++>>>>>>> 1cd6dbd32f98 (IB/mlx5: Set uid as part of TIS commands)
diff --cc drivers/infiniband/hw/mlx5/cmd.h
index 802f939e52b9,f7722d7b92a3..000000000000
--- a/drivers/infiniband/hw/mlx5/cmd.h
+++ b/drivers/infiniband/hw/mlx5/cmd.h
@@@ -40,6 -41,17 +40,19 @@@ int mlx5_cmd_dump_fill_mkey(struct mlx5
  int mlx5_cmd_null_mkey(struct mlx5_core_dev *dev, u32 *null_mkey);
  int mlx5_cmd_query_cong_params(struct mlx5_core_dev *dev, int cong_point,
  			       void *out, int out_size);
 -int mlx5_cmd_query_ext_ppcnt_counters(struct mlx5_core_dev *dev, void *out);
  int mlx5_cmd_modify_cong_params(struct mlx5_core_dev *mdev,
  				void *in, int in_size);
++<<<<<<< HEAD
++=======
+ int mlx5_cmd_alloc_memic(struct mlx5_memic *memic, phys_addr_t *addr,
+ 			 u64 length, u32 alignment);
+ int mlx5_cmd_dealloc_memic(struct mlx5_memic *memic, u64 addr, u64 length);
+ void mlx5_cmd_dealloc_pd(struct mlx5_core_dev *dev, u32 pdn, u16 uid);
+ void mlx5_cmd_destroy_tir(struct mlx5_core_dev *dev, u32 tirn, u16 uid);
+ void mlx5_cmd_destroy_tis(struct mlx5_core_dev *dev, u32 tisn, u16 uid);
+ int mlx5_cmd_attach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid,
+ 			u32 qpn, u16 uid);
+ int mlx5_cmd_detach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid,
+ 			u32 qpn, u16 uid);
++>>>>>>> 1cd6dbd32f98 (IB/mlx5: Set uid as part of TIS commands)
  #endif /* MLX5_IB_CMD_H */
* Unmerged path drivers/infiniband/hw/mlx5/cmd.c
* Unmerged path drivers/infiniband/hw/mlx5/cmd.h
diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index 2f4c89bb2628..6152ef18dfe2 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -1056,11 +1056,13 @@ static int is_connected(enum ib_qp_type qp_type)
 
 static int create_raw_packet_qp_tis(struct mlx5_ib_dev *dev,
 				    struct mlx5_ib_qp *qp,
-				    struct mlx5_ib_sq *sq, u32 tdn)
+				    struct mlx5_ib_sq *sq, u32 tdn,
+				    struct ib_pd *pd)
 {
 	u32 in[MLX5_ST_SZ_DW(create_tis_in)] = {0};
 	void *tisc = MLX5_ADDR_OF(create_tis_in, in, ctx);
 
+	MLX5_SET(create_tis_in, in, uid, to_mpd(pd)->uid);
 	MLX5_SET(tisc, tisc, transport_domain, tdn);
 	if (qp->flags & MLX5_IB_QP_UNDERLAY)
 		MLX5_SET(tisc, tisc, underlay_qpn, qp->underlay_qpn);
@@ -1069,9 +1071,9 @@ static int create_raw_packet_qp_tis(struct mlx5_ib_dev *dev,
 }
 
 static void destroy_raw_packet_qp_tis(struct mlx5_ib_dev *dev,
-				      struct mlx5_ib_sq *sq)
+				      struct mlx5_ib_sq *sq, struct ib_pd *pd)
 {
-	mlx5_core_destroy_tis(dev->mdev, sq->tisn);
+	mlx5_cmd_destroy_tis(dev->mdev, sq->tisn, to_mpd(pd)->uid);
 }
 
 static void destroy_flow_rule_vport_sq(struct mlx5_ib_dev *dev,
@@ -1317,7 +1319,7 @@ static int create_raw_packet_qp(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 	u32 tdn = mucontext->tdn;
 
 	if (qp->sq.wqe_cnt) {
-		err = create_raw_packet_qp_tis(dev, qp, sq, tdn);
+		err = create_raw_packet_qp_tis(dev, qp, sq, tdn, pd);
 		if (err)
 			return err;
 
@@ -1358,7 +1360,7 @@ err_destroy_sq:
 		return err;
 	destroy_raw_packet_qp_sq(dev, sq);
 err_destroy_tis:
-	destroy_raw_packet_qp_tis(dev, sq);
+	destroy_raw_packet_qp_tis(dev, sq, pd);
 
 	return err;
 }
@@ -1377,7 +1379,7 @@ static void destroy_raw_packet_qp(struct mlx5_ib_dev *dev,
 
 	if (qp->sq.wqe_cnt) {
 		destroy_raw_packet_qp_sq(dev, sq);
-		destroy_raw_packet_qp_tis(dev, sq);
+		destroy_raw_packet_qp_tis(dev, sq, qp->ibqp.pd);
 	}
 }
 
@@ -2494,7 +2496,8 @@ static int ib_rate_to_mlx5(struct mlx5_ib_dev *dev, u8 rate)
 }
 
 static int modify_raw_packet_eth_prio(struct mlx5_core_dev *dev,
-				      struct mlx5_ib_sq *sq, u8 sl)
+				      struct mlx5_ib_sq *sq, u8 sl,
+				      struct ib_pd *pd)
 {
 	void *in;
 	void *tisc;
@@ -2507,6 +2510,7 @@ static int modify_raw_packet_eth_prio(struct mlx5_core_dev *dev,
 		return -ENOMEM;
 
 	MLX5_SET(modify_tis_in, in, bitmask.prio, 1);
+	MLX5_SET(modify_tis_in, in, uid, to_mpd(pd)->uid);
 
 	tisc = MLX5_ADDR_OF(modify_tis_in, in, ctx);
 	MLX5_SET(tisc, tisc, prio, ((sl & 0x7) << 1));
@@ -2519,7 +2523,8 @@ static int modify_raw_packet_eth_prio(struct mlx5_core_dev *dev,
 }
 
 static int modify_raw_packet_tx_affinity(struct mlx5_core_dev *dev,
-					 struct mlx5_ib_sq *sq, u8 tx_affinity)
+					 struct mlx5_ib_sq *sq, u8 tx_affinity,
+					 struct ib_pd *pd)
 {
 	void *in;
 	void *tisc;
@@ -2532,6 +2537,7 @@ static int modify_raw_packet_tx_affinity(struct mlx5_core_dev *dev,
 		return -ENOMEM;
 
 	MLX5_SET(modify_tis_in, in, bitmask.lag_tx_port_affinity, 1);
+	MLX5_SET(modify_tis_in, in, uid, to_mpd(pd)->uid);
 
 	tisc = MLX5_ADDR_OF(modify_tis_in, in, ctx);
 	MLX5_SET(tisc, tisc, lag_tx_port_affinity, tx_affinity);
@@ -2618,7 +2624,7 @@ static int mlx5_set_path(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 	if ((qp->ibqp.qp_type == IB_QPT_RAW_PACKET) && qp->sq.wqe_cnt)
 		return modify_raw_packet_eth_prio(dev->mdev,
 						  &qp->raw_packet_qp.sq,
-						  sl & 0xf);
+						  sl & 0xf, qp->ibqp.pd);
 
 	return 0;
 }
@@ -2939,7 +2945,8 @@ static int modify_raw_packet_qp(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 	if (modify_sq) {
 		if (tx_affinity) {
 			err = modify_raw_packet_tx_affinity(dev->mdev, sq,
-							    tx_affinity);
+							    tx_affinity,
+							    qp->ibqp.pd);
 			if (err)
 				return err;
 		}
