perf test: Add libbpf relocation checker

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit 7b6982ce4b38ecc3f63be46beb7bd079aa290fd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/7b6982ce.failed

There's a bug in LLVM that it can generate unneeded relocation
information. See [1] and [2]. Libbpf should check the target section of
a relocation symbol.

This patch adds a testcase which references a global variable (BPF
doesn't support global variables). Before fixing libbpf, the new test
case can be loaded into kernel, the global variable acts like the first
map. It is incorrect.

Result:

  # ~/perf test BPF
  37: Test BPF filter                                          :
  37.1: Test basic BPF filtering                               : Ok
  37.2: Test BPF prologue generation                           : Ok
  37.3: Test BPF relocation checker                            : FAILED!

  # ~/perf test -v BPF
  ...
  libbpf: loading object '[bpf_relocation_test]' from buffer
  libbpf: section .strtab, size 126, link 0, flags 0, type=3
  libbpf: section .text, size 0, link 0, flags 6, type=1
  libbpf: section .data, size 0, link 0, flags 3, type=1
  libbpf: section .bss, size 0, link 0, flags 3, type=8
  libbpf: section func=sys_write, size 104, link 0, flags 6, type=1
  libbpf: found program func=sys_write
  libbpf: section .relfunc=sys_write, size 16, link 10, flags 0, type=9
  libbpf: section maps, size 16, link 0, flags 3, type=1
  libbpf: maps in [bpf_relocation_test]: 16 bytes
  libbpf: section license, size 4, link 0, flags 3, type=1
  libbpf: license of [bpf_relocation_test] is GPL
  libbpf: section version, size 4, link 0, flags 3, type=1
  libbpf: kernel version of [bpf_relocation_test] is 40400
  libbpf: section .symtab, size 144, link 1, flags 0, type=2
  libbpf: map 0 is "my_table"
  libbpf: collecting relocating info for: 'func=sys_write'
  libbpf: relocation: insn_idx=7
  Success unexpectedly: libbpf error when dealing with relocation
  test child finished with -1
  ---- end ----
  Test BPF filter subtest 2: FAILED!

[1] https://llvm.org/bugs/show_bug.cgi?id=26243
[2] https://patchwork.ozlabs.org/patch/571385/

	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: "David S. Miller" <davem@davemloft.net>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Li Zefan <lizefan@huawei.com>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1453715801-7732-2-git-send-email-wangnan0@huawei.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7b6982ce4b38ecc3f63be46beb7bd079aa290fd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
#	tools/perf/tests/.gitignore
#	tools/perf/tests/Build
#	tools/perf/tests/bpf.c
#	tools/perf/tests/llvm.c
#	tools/perf/tests/llvm.h
diff --cc tools/perf/Makefile.perf
index 16b2e660571f,97ce8695199e..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -823,21 -615,12 +823,26 @@@ clean:: $(LIBTRACEEVENT)-clean $(LIBAPI
  	$(call QUIET_CLEAN, core-objs)  $(RM) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf-with-kcore $(LANG_BINDINGS)
  	$(Q)find $(if $(OUTPUT),$(OUTPUT),.) -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete
  	$(Q)$(RM) $(OUTPUT).config-detected
 -	$(call QUIET_CLEAN, core-progs) $(RM) $(ALL_PROGRAMS) perf perf-read-vdso32 perf-read-vdsox32
 +	$(call QUIET_CLEAN, core-progs) $(RM) $(ALL_PROGRAMS) perf perf-read-vdso32 perf-read-vdsox32 $(OUTPUT)pmu-events/jevents $(OUTPUT)$(LIBJVMTI).so
  	$(call QUIET_CLEAN, core-gen)   $(RM)  *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope* $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)FEATURE-DUMP $(OUTPUT)util/*-bison* $(OUTPUT)util/*-flex* \
++<<<<<<< HEAD
 +		$(OUTPUT)util/intel-pt-decoder/inat-tables.c \
 +		$(OUTPUT)tests/llvm-src-{base,kbuild,prologue}.c \
 +		$(OUTPUT)pmu-events/pmu-events.c \
 +		$(OUTPUT)$(madvise_behavior_array) \
 +		$(OUTPUT)$(drm_ioctl_array) \
 +		$(OUTPUT)$(pkey_alloc_access_rights_array) \
 +		$(OUTPUT)$(sndrv_ctl_ioctl_array) \
 +		$(OUTPUT)$(sndrv_pcm_ioctl_array) \
 +		$(OUTPUT)$(kvm_ioctl_array) \
 +		$(OUTPUT)$(vhost_virtio_ioctl_array) \
 +		$(OUTPUT)$(perf_ioctl_array) \
 +		$(OUTPUT)$(prctl_option_array)
++=======
+ 		$(OUTPUT)util/intel-pt-decoder/inat-tables.c $(OUTPUT)fixdep \
+ 		$(OUTPUT)tests/llvm-src-{base,kbuild,prologue,relocation}.c
++>>>>>>> 7b6982ce4b38 (perf test: Add libbpf relocation checker)
  	$(QUIET_SUBDIR0)Documentation $(QUIET_SUBDIR1) clean
 -	$(python-clean)
  
  #
  # To provide FEATURE-DUMP into $(FEATURE_DUMP_COPY)
diff --cc tools/perf/tests/Build
index 40bdfc01aafe,1ba628ed049a..000000000000
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@@ -31,21 -31,42 +31,58 @@@ perf-y += sample-parsing.
  perf-y += parse-no-sample-id-all.o
  perf-y += kmod-path.o
  perf-y += thread-map.o
++<<<<<<< HEAD
++=======
+ perf-y += llvm.o llvm-src-base.o llvm-src-kbuild.o llvm-src-prologue.o llvm-src-relocation.o
+ perf-y += bpf.o
++>>>>>>> 7b6982ce4b38 (perf test: Add libbpf relocation checker)
  perf-y += topology.o
 +perf-y += mem.o
  perf-y += cpumap.o
  perf-y += stat.o
  perf-y += event_update.o
 +perf-y += event-times.o
 +perf-y += expr.o
 +perf-y += backward-ring-buffer.o
 +perf-y += sdt.o
 +perf-y += is_printable_array.o
 +perf-y += bitmap.o
 +perf-y += perf-hooks.o
 +perf-y += unit_number__scnprintf.o
  
++<<<<<<< HEAD
 +ifeq ($(SRCARCH),$(filter $(SRCARCH),x86 arm arm64 powerpc))
++=======
+ $(OUTPUT)tests/llvm-src-base.c: tests/bpf-script-example.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_base_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-kbuild.c: tests/bpf-script-test-kbuild.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_kbuild_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-prologue.c: tests/bpf-script-test-prologue.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_prologue_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-relocation.c: tests/bpf-script-test-relocation.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_relocation[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ ifeq ($(ARCH),$(filter $(ARCH),x86 arm arm64))
++>>>>>>> 7b6982ce4b38 (perf test: Add libbpf relocation checker)
  perf-$(CONFIG_DWARF_UNWIND) += dwarf-unwind.o
  endif
  
* Unmerged path tools/perf/tests/.gitignore
* Unmerged path tools/perf/tests/bpf.c
* Unmerged path tools/perf/tests/llvm.c
* Unmerged path tools/perf/tests/llvm.h
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/tests/.gitignore
* Unmerged path tools/perf/tests/Build
diff --git a/tools/perf/tests/bpf-script-test-relocation.c b/tools/perf/tests/bpf-script-test-relocation.c
new file mode 100644
index 000000000000..93af77421816
--- /dev/null
+++ b/tools/perf/tests/bpf-script-test-relocation.c
@@ -0,0 +1,50 @@
+/*
+ * bpf-script-test-relocation.c
+ * Test BPF loader checking relocation
+ */
+#ifndef LINUX_VERSION_CODE
+# error Need LINUX_VERSION_CODE
+# error Example: for 4.2 kernel, put 'clang-opt="-DLINUX_VERSION_CODE=0x40200" into llvm section of ~/.perfconfig'
+#endif
+#define BPF_ANY 0
+#define BPF_MAP_TYPE_ARRAY 2
+#define BPF_FUNC_map_lookup_elem 1
+#define BPF_FUNC_map_update_elem 2
+
+static void *(*bpf_map_lookup_elem)(void *map, void *key) =
+	(void *) BPF_FUNC_map_lookup_elem;
+static void *(*bpf_map_update_elem)(void *map, void *key, void *value, int flags) =
+	(void *) BPF_FUNC_map_update_elem;
+
+struct bpf_map_def {
+	unsigned int type;
+	unsigned int key_size;
+	unsigned int value_size;
+	unsigned int max_entries;
+};
+
+#define SEC(NAME) __attribute__((section(NAME), used))
+struct bpf_map_def SEC("maps") my_table = {
+	.type = BPF_MAP_TYPE_ARRAY,
+	.key_size = sizeof(int),
+	.value_size = sizeof(int),
+	.max_entries = 1,
+};
+
+int this_is_a_global_val;
+
+SEC("func=sys_write")
+int bpf_func__sys_write(void *ctx)
+{
+	int key = 0;
+	int value = 0;
+
+	/*
+	 * Incorrect relocation. Should not allow this program be
+	 * loaded into kernel.
+	 */
+	bpf_map_update_elem(&this_is_a_global_val, &key, &value, 0);
+	return 0;
+}
+char _license[] SEC("license") = "GPL";
+int _version SEC("version") = LINUX_VERSION_CODE;
* Unmerged path tools/perf/tests/bpf.c
* Unmerged path tools/perf/tests/llvm.c
* Unmerged path tools/perf/tests/llvm.h
