x86/speculation/mds: Add mitigation mode VMWERV

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 22dd8365088b6403630b82423cf906491859b65e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/22dd8365.failed

In virtualized environments it can happen that the host has the microcode
update which utilizes the VERW instruction to clear CPU buffers, but the
hypervisor is not yet updated to expose the X86_FEATURE_MD_CLEAR CPUID bit
to guests.

Introduce an internal mitigation mode VMWERV which enables the invocation
of the CPU buffer clearing even if X86_FEATURE_MD_CLEAR is not set. If the
system has no updated microcode this results in a pointless execution of
the VERW instruction wasting a few CPU cycles. If the microcode is updated,
but not exposed to a guest then the CPU buffers will be cleared.

That said: Virtual Machines Will Eventually Receive Vaccine

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Jon Masters <jcm@redhat.com>
	Tested-by: Jon Masters <jcm@redhat.com>
(cherry picked from commit 22dd8365088b6403630b82423cf906491859b65e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/x86/mds.rst
#	arch/x86/include/asm/processor.h
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/include/asm/processor.h
index 1cec5508cffb,aca1ef8cc79f..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -1101,4 -992,10 +1101,13 @@@ enum l1tf_mitigations 
  
  extern enum l1tf_mitigations l1tf_mitigation;
  
++<<<<<<< HEAD
++=======
+ enum mds_mitigations {
+ 	MDS_MITIGATION_OFF,
+ 	MDS_MITIGATION_FULL,
+ 	MDS_MITIGATION_VMWERV,
+ };
+ 
++>>>>>>> 22dd8365088b (x86/speculation/mds: Add mitigation mode VMWERV)
  #endif /* _ASM_X86_PROCESSOR_H */
diff --cc arch/x86/kernel/cpu/bugs.c
index 6ec1d2da76d1,95cda38c8785..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -111,32 -216,49 +111,72 @@@ void x86_amd_ssbd_enable(void
  		wrmsrl(MSR_AMD64_LS_CFG, msrval);
  }
  
++<<<<<<< HEAD
 +/* The kernel command line selection */
 +enum spectre_v2_mitigation_cmd {
 +	SPECTRE_V2_CMD_NONE,
 +	SPECTRE_V2_CMD_FORCE,
 +	SPECTRE_V2_CMD_AUTO,
 +	SPECTRE_V2_CMD_RETPOLINE,
 +	SPECTRE_V2_CMD_RETPOLINE_IBRS_USER,
 +	SPECTRE_V2_CMD_IBRS,
 +	SPECTRE_V2_CMD_IBRS_ALWAYS,
++=======
+ #undef pr_fmt
+ #define pr_fmt(fmt)	"MDS: " fmt
+ 
+ /* Default mitigation for L1TF-affected CPUs */
+ static enum mds_mitigations mds_mitigation __ro_after_init = MDS_MITIGATION_FULL;
+ 
+ static const char * const mds_strings[] = {
+ 	[MDS_MITIGATION_OFF]	= "Vulnerable",
+ 	[MDS_MITIGATION_FULL]	= "Mitigation: Clear CPU buffers",
+ 	[MDS_MITIGATION_VMWERV]	= "Vulnerable: Clear CPU buffers attempted, no microcode",
++>>>>>>> 22dd8365088b (x86/speculation/mds: Add mitigation mode VMWERV)
  };
  
 -static void __init mds_select_mitigation(void)
 -{
 -	if (!boot_cpu_has_bug(X86_BUG_MDS)) {
 -		mds_mitigation = MDS_MITIGATION_OFF;
 -		return;
 -	}
 +static const char *spectre_v2_strings[] = {
 +	[SPECTRE_V2_NONE]			= "Vulnerable",
 +	[SPECTRE_V2_RETPOLINE_MINIMAL]		= "Vulnerable: Minimal ASM retpoline",
 +	[SPECTRE_V2_RETPOLINE_NO_IBPB]		= "Vulnerable: Retpoline without IBPB",
 +	[SPECTRE_V2_RETPOLINE_SKYLAKE]		= "Vulnerable: Retpoline on Skylake+",
 +	[SPECTRE_V2_RETPOLINE_UNSAFE_MODULE]	= "Vulnerable: Retpoline with unsafe module(s)",
 +	[SPECTRE_V2_RETPOLINE]			= "Mitigation: Full retpoline",
 +	[SPECTRE_V2_RETPOLINE_IBRS_USER]	= "Mitigation: Full retpoline and IBRS (user space)",
 +	[SPECTRE_V2_IBRS]			= "Mitigation: IBRS (kernel)",
 +	[SPECTRE_V2_IBRS_ALWAYS]		= "Mitigation: IBRS (kernel and user space)",
 +	[SPECTRE_V2_IBP_DISABLED]		= "Mitigation: IBP disabled",
 +	[SPECTRE_V2_IBRS_ENHANCED]		= "Mitigation: Enhanced IBRS",
 +};
  
++<<<<<<< HEAD
 +enum spectre_v2_mitigation_cmd spectre_v2_cmd = SPECTRE_V2_CMD_AUTO;
++=======
+ 	if (mds_mitigation == MDS_MITIGATION_FULL) {
+ 		if (!boot_cpu_has(X86_FEATURE_MD_CLEAR))
+ 			mds_mitigation = MDS_MITIGATION_VMWERV;
+ 		static_branch_enable(&mds_user_clear);
+ 	}
+ 	pr_info("%s\n", mds_strings[mds_mitigation]);
+ }
+ 
+ static int __init mds_cmdline(char *str)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_MDS))
+ 		return 0;
+ 
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!strcmp(str, "off"))
+ 		mds_mitigation = MDS_MITIGATION_OFF;
+ 	else if (!strcmp(str, "full"))
+ 		mds_mitigation = MDS_MITIGATION_FULL;
+ 
+ 	return 0;
+ }
+ early_param("mds", mds_cmdline);
++>>>>>>> 22dd8365088b (x86/speculation/mds: Add mitigation mode VMWERV)
  
  #undef pr_fmt
  #define pr_fmt(fmt)     "Spectre V2 : " fmt
@@@ -225,26 -705,16 +265,37 @@@ void __spectre_v2_select_mitigation(voi
  		break;
  	}
  
++<<<<<<< HEAD
 +	if (spec_ctrl_cond_enable_ibrs(full_retpoline))
 +		return;
++=======
+ 	switch (mds_mitigation) {
+ 	case MDS_MITIGATION_FULL:
+ 	case MDS_MITIGATION_VMWERV:
+ 		update_mds_branch_idle();
+ 		break;
+ 	case MDS_MITIGATION_OFF:
+ 		break;
+ 	}
++>>>>>>> 22dd8365088b (x86/speculation/mds: Add mitigation mode VMWERV)
 +
 +	if (spec_ctrl_cond_enable_ibp_disabled())
 +		return;
  
 -	mutex_unlock(&spec_ctrl_mutex);
 +	spec_ctrl_enable_retpoline();
 +}
 +
 +void spectre_v2_print_mitigation(void)
 +{
 +
 +	pr_info("%s\n", spectre_v2_strings[spec_ctrl_get_mitigation()]);
 +}
 +
 +static void __init spectre_v2_select_mitigation(void)
 +{
 +	spectre_v2_cmd = spectre_v2_parse_cmdline();
 +	__spectre_v2_select_mitigation();
 +	spectre_v2_print_mitigation();
  }
  
  #undef pr_fmt
* Unmerged path Documentation/x86/mds.rst
* Unmerged path Documentation/x86/mds.rst
* Unmerged path arch/x86/include/asm/processor.h
* Unmerged path arch/x86/kernel/cpu/bugs.c
