scsi: mpt3sas: Recognize and act on iopriority info

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: Recognize and act on iopriority info (Tomas Henzl) [1513855]
Rebuild_FUZZ: 93.75%
commit-author Adam Manzanares <adam.manzanares@wdc.com>
commit 307d9075a02b696e817b775c565e45c4fa3c32f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/307d9075.failed

This patch adds support for request iopriority handling in the mpt3sas
layer. This works only when a ATA device is behind the SATL. The ATA
device also has to indicate that it supports command priorities in the
identify information that is pulled from the SATL.

	Signed-off-by: Adam Manzanares <adam.manzanares@wdc.com>
	Acked-by: Sreekanth Reddy <Sreekanth.Reddy@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 307d9075a02b696e817b775c565e45c4fa3c32f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.h
#	drivers/scsi/mpt3sas/mpt3sas_scsih.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.h
index 6bb7690fe4c6,394fe1338d09..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.h
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.h
@@@ -408,17 -402,8 +408,22 @@@ struct MPT3SAS_DEVICE 
  	u8	block;
  	u8	tlr_snoop_check;
  	u8	ignore_delay_remove;
++<<<<<<< HEAD
 +	/*
 +	 * Bug workaround for SATL handling: the mpt2/3sas firmware
 +	 * doesn't return BUSY or TASK_SET_FULL for subsequent
 +	 * commands while a SATL pass through is in operation as the
 +	 * spec requires, it simply does nothing with them until the
 +	 * pass through completes, causing them possibly to timeout if
 +	 * the passthrough is a long executing command (like format or
 +	 * secure erase).  This variable allows us to do the right
 +	 * thing while a SATL command is pending.
 +	 */
 +	unsigned long ata_command_pending;
++=======
+ 	/* Iopriority Command Handling */
+ 	u8	ncq_prio_enable;
++>>>>>>> 307d9075a02b (scsi: mpt3sas: Recognize and act on iopriority info)
  
  };
  
diff --cc drivers/scsi/mpt3sas/mpt3sas_scsih.c
index 503675c93398,b5c966e319d3..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_scsih.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_scsih.c
@@@ -4465,17 -4116,13 +4467,27 @@@ scsih_qcmd(struct Scsi_Host *shost, str
  		mpi_control = MPI2_SCSIIO_CONTROL_NODATATRANSFER;
  
  	/* set tags */
++<<<<<<< HEAD
 +	if (!(sas_device_priv_data->flags & MPT_DEVICE_FLAGS_INIT)) {
 +		if (scmd->device->tagged_supported) {
 +			if (scmd->device->ordered_tags)
 +				mpi_control |= MPI2_SCSIIO_CONTROL_ORDEREDQ;
 +			else
 +				mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
 +		} else
 +			mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
 +	} else
 +		mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
 +
++=======
+ 	mpi_control |= MPI2_SCSIIO_CONTROL_SIMPLEQ;
+ 	/* NCQ Prio supported, make sure control indicated high priority */
+ 	if (sas_device_priv_data->ncq_prio_enable) {
+ 		class = IOPRIO_PRIO_CLASS(req_get_ioprio(rq));
+ 		if (class == IOPRIO_CLASS_RT)
+ 			mpi_control |= 1 << MPI2_SCSIIO_CONTROL_CMDPRI_SHIFT;
+ 	}
++>>>>>>> 307d9075a02b (scsi: mpt3sas: Recognize and act on iopriority info)
  	/* Make sure Device is not raid volume.
  	 * We do not expose raid functionality to upper layer for warpdrive.
  	 */
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.h
diff --git a/drivers/scsi/mpt3sas/mpt3sas_ctl.c b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
index 12f5bde69b88..ea072a8a94d9 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_ctl.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
@@ -3321,8 +3321,6 @@ static DEVICE_ATTR(diag_trigger_mpi, S_IRUGO | S_IWUSR,
 
 /*********** diagnostic trigger suppport *** END ****************************/
 
-
-
 /*****************************************/
 
 struct device_attribute *mpt3sas_host_attrs[] = {
@@ -3398,9 +3396,50 @@ _ctl_device_handle_show(struct device *dev, struct device_attribute *attr,
 }
 static DEVICE_ATTR(sas_device_handle, S_IRUGO, _ctl_device_handle_show, NULL);
 
+/**
+ * _ctl_device_ncq_io_prio_show - send prioritized io commands to device
+ * @dev - pointer to embedded device
+ * @buf - the buffer returned
+ *
+ * A sysfs 'read/write' sdev attribute, only works with SATA
+ */
+static ssize_t
+_ctl_device_ncq_prio_enable_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)
+{
+	struct scsi_device *sdev = to_scsi_device(dev);
+	struct MPT3SAS_DEVICE *sas_device_priv_data = sdev->hostdata;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n",
+			sas_device_priv_data->ncq_prio_enable);
+}
+
+static ssize_t
+_ctl_device_ncq_prio_enable_store(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	struct scsi_device *sdev = to_scsi_device(dev);
+	struct MPT3SAS_DEVICE *sas_device_priv_data = sdev->hostdata;
+	bool ncq_prio_enable = 0;
+
+	if (kstrtobool(buf, &ncq_prio_enable))
+		return -EINVAL;
+
+	if (!scsih_ncq_prio_supp(sdev))
+		return -EINVAL;
+
+	sas_device_priv_data->ncq_prio_enable = ncq_prio_enable;
+	return strlen(buf);
+}
+static DEVICE_ATTR(sas_ncq_prio_enable, S_IRUGO | S_IWUSR,
+		   _ctl_device_ncq_prio_enable_show,
+		   _ctl_device_ncq_prio_enable_store);
+
 struct device_attribute *mpt3sas_dev_attrs[] = {
 	&dev_attr_sas_address,
 	&dev_attr_sas_device_handle,
+	&dev_attr_sas_ncq_prio_enable,
 	NULL,
 };
 
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_scsih.c
