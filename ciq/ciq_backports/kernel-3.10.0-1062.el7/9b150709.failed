xfs: remove all xfs_bmbt_set_* helpers except for xfs_bmbt_set_all

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 9b150709b3190719e5edf5f0ea35245cb8ae0a1a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9b150709.failed

Unused after the big bmap refactor.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 9b150709b3190719e5edf5f0ea35245cb8ae0a1a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_bmap_btree.c
diff --cc fs/xfs/libxfs/xfs_bmap_btree.c
index da7cd00747be,e66ebd982cfb..000000000000
--- a/fs/xfs/libxfs/xfs_bmap_btree.c
+++ b/fs/xfs/libxfs/xfs_bmap_btree.c
@@@ -187,64 -188,43 +187,47 @@@ xfs_bmbt_disk_get_startoff
  		 xfs_mask64lo(64 - BMBT_EXNTFLAG_BITLEN)) >> 9;
  }
  
- 
  /*
-  * Set all the fields in a bmap extent record from the arguments.
+  * Set all the fields in a bmap extent record from the uncompressed form.
   */
  void
- xfs_bmbt_set_allf(
- 	xfs_bmbt_rec_host_t	*r,
- 	xfs_fileoff_t		startoff,
- 	xfs_fsblock_t		startblock,
- 	xfs_filblks_t		blockcount,
- 	xfs_exntst_t		state)
+ xfs_bmbt_set_all(
+ 	struct xfs_bmbt_rec_host *r,
+ 	struct xfs_bmbt_irec	*s)
  {
- 	int		extent_flag = (state == XFS_EXT_NORM) ? 0 : 1;
+ 	int			extent_flag = (s->br_state != XFS_EXT_NORM);
  
- 	ASSERT(state == XFS_EXT_NORM || state == XFS_EXT_UNWRITTEN);
- 	ASSERT((startoff & xfs_mask64hi(64-BMBT_STARTOFF_BITLEN)) == 0);
- 	ASSERT((blockcount & xfs_mask64hi(64-BMBT_BLOCKCOUNT_BITLEN)) == 0);
- 
- 	ASSERT((startblock & xfs_mask64hi(64-BMBT_STARTBLOCK_BITLEN)) == 0);
+ 	ASSERT(s->br_state == XFS_EXT_NORM || s->br_state == XFS_EXT_UNWRITTEN);
+ 	ASSERT(!(s->br_startoff & xfs_mask64hi(64-BMBT_STARTOFF_BITLEN)));
+ 	ASSERT(!(s->br_blockcount & xfs_mask64hi(64-BMBT_BLOCKCOUNT_BITLEN)));
+ 	ASSERT(!(s->br_startblock & xfs_mask64hi(64-BMBT_STARTBLOCK_BITLEN)));
  
  	r->l0 = ((xfs_bmbt_rec_base_t)extent_flag << 63) |
- 		((xfs_bmbt_rec_base_t)startoff << 9) |
- 		((xfs_bmbt_rec_base_t)startblock >> 43);
- 	r->l1 = ((xfs_bmbt_rec_base_t)startblock << 21) |
- 		((xfs_bmbt_rec_base_t)blockcount &
- 		(xfs_bmbt_rec_base_t)xfs_mask64lo(21));
- }
- 
- /*
-  * Set all the fields in a bmap extent record from the uncompressed form.
-  */
- void
- xfs_bmbt_set_all(
- 	xfs_bmbt_rec_host_t *r,
- 	xfs_bmbt_irec_t	*s)
- {
- 	xfs_bmbt_set_allf(r, s->br_startoff, s->br_startblock,
- 			     s->br_blockcount, s->br_state);
+ 		 ((xfs_bmbt_rec_base_t)s->br_startoff << 9) |
+ 		 ((xfs_bmbt_rec_base_t)s->br_startblock >> 43);
+ 	r->l1 = ((xfs_bmbt_rec_base_t)s->br_startblock << 21) |
+ 		 ((xfs_bmbt_rec_base_t)s->br_blockcount &
+ 		  (xfs_bmbt_rec_base_t)xfs_mask64lo(21));
  }
  
 +
  /*
 - * Set all the fields in a bmap extent record from the uncompressed form.
 + * Set all the fields in a disk format bmap extent record from the arguments.
   */
  void
 -xfs_bmbt_disk_set_all(
 -	struct xfs_bmbt_rec	*r,
 -	struct xfs_bmbt_irec	*s)
 +xfs_bmbt_disk_set_allf(
 +	xfs_bmbt_rec_t		*r,
 +	xfs_fileoff_t		startoff,
 +	xfs_fsblock_t		startblock,
 +	xfs_filblks_t		blockcount,
 +	xfs_exntst_t		state)
  {
 -	int			extent_flag = (s->br_state != XFS_EXT_NORM);
 +	int			extent_flag = (state == XFS_EXT_NORM) ? 0 : 1;
  
 -	ASSERT(s->br_state == XFS_EXT_NORM || s->br_state == XFS_EXT_UNWRITTEN);
 -	ASSERT(!(s->br_startoff & xfs_mask64hi(64-BMBT_STARTOFF_BITLEN)));
 -	ASSERT(!(s->br_blockcount & xfs_mask64hi(64-BMBT_BLOCKCOUNT_BITLEN)));
 -	ASSERT(!(s->br_startblock & xfs_mask64hi(64-BMBT_STARTBLOCK_BITLEN)));
 +	ASSERT(state == XFS_EXT_NORM || state == XFS_EXT_UNWRITTEN);
 +	ASSERT((startoff & xfs_mask64hi(64-BMBT_STARTOFF_BITLEN)) == 0);
 +	ASSERT((blockcount & xfs_mask64hi(64-BMBT_BLOCKCOUNT_BITLEN)) == 0);
 +	ASSERT((startblock & xfs_mask64hi(64-BMBT_STARTBLOCK_BITLEN)) == 0);
  
  	r->l0 = cpu_to_be64(
  		((xfs_bmbt_rec_base_t)extent_flag << 63) |
@@@ -257,75 -237,6 +240,78 @@@
  }
  
  /*
++<<<<<<< HEAD
 + * Set all the fields in a bmap extent record from the uncompressed form.
 + */
 +STATIC void
 +xfs_bmbt_disk_set_all(
 +	xfs_bmbt_rec_t	*r,
 +	xfs_bmbt_irec_t *s)
 +{
 +	xfs_bmbt_disk_set_allf(r, s->br_startoff, s->br_startblock,
 +				  s->br_blockcount, s->br_state);
 +}
 +
 +/*
 + * Set the blockcount field in a bmap extent record.
 + */
 +void
 +xfs_bmbt_set_blockcount(
 +	xfs_bmbt_rec_host_t *r,
 +	xfs_filblks_t	v)
 +{
 +	ASSERT((v & xfs_mask64hi(43)) == 0);
 +	r->l1 = (r->l1 & (xfs_bmbt_rec_base_t)xfs_mask64hi(43)) |
 +		  (xfs_bmbt_rec_base_t)(v & xfs_mask64lo(21));
 +}
 +
 +/*
 + * Set the startblock field in a bmap extent record.
 + */
 +void
 +xfs_bmbt_set_startblock(
 +	xfs_bmbt_rec_host_t *r,
 +	xfs_fsblock_t	v)
 +{
 +	ASSERT((v & xfs_mask64hi(12)) == 0);
 +	r->l0 = (r->l0 & (xfs_bmbt_rec_base_t)xfs_mask64hi(55)) |
 +		  (xfs_bmbt_rec_base_t)(v >> 43);
 +	r->l1 = (r->l1 & (xfs_bmbt_rec_base_t)xfs_mask64lo(21)) |
 +		  (xfs_bmbt_rec_base_t)(v << 21);
 +}
 +
 +/*
 + * Set the startoff field in a bmap extent record.
 + */
 +void
 +xfs_bmbt_set_startoff(
 +	xfs_bmbt_rec_host_t *r,
 +	xfs_fileoff_t	v)
 +{
 +	ASSERT((v & xfs_mask64hi(9)) == 0);
 +	r->l0 = (r->l0 & (xfs_bmbt_rec_base_t) xfs_mask64hi(1)) |
 +		((xfs_bmbt_rec_base_t)v << 9) |
 +		  (r->l0 & (xfs_bmbt_rec_base_t)xfs_mask64lo(9));
 +}
 +
 +/*
 + * Set the extent state field in a bmap extent record.
 + */
 +void
 +xfs_bmbt_set_state(
 +	xfs_bmbt_rec_host_t *r,
 +	xfs_exntst_t	v)
 +{
 +	ASSERT(v == XFS_EXT_NORM || v == XFS_EXT_UNWRITTEN);
 +	if (v == XFS_EXT_NORM)
 +		r->l0 &= xfs_mask64lo(64 - BMBT_EXNTFLAG_BITLEN);
 +	else
 +		r->l0 |= xfs_mask64hi(BMBT_EXNTFLAG_BITLEN);
 +}
 +
 +/*
++=======
++>>>>>>> 9b150709b319 (xfs: remove all xfs_bmbt_set_* helpers except for xfs_bmbt_set_all)
   * Convert in-memory form of btree root to on-disk form.
   */
  void
* Unmerged path fs/xfs/libxfs/xfs_bmap_btree.c
diff --git a/fs/xfs/libxfs/xfs_bmap_btree.h b/fs/xfs/libxfs/xfs_bmap_btree.h
index e1de4743151d..6934fc52018b 100644
--- a/fs/xfs/libxfs/xfs_bmap_btree.h
+++ b/fs/xfs/libxfs/xfs_bmap_btree.h
@@ -110,12 +110,6 @@ extern xfs_filblks_t xfs_bmbt_disk_get_blockcount(xfs_bmbt_rec_t *r);
 extern xfs_fileoff_t xfs_bmbt_disk_get_startoff(xfs_bmbt_rec_t *r);
 
 extern void xfs_bmbt_set_all(xfs_bmbt_rec_host_t *r, xfs_bmbt_irec_t *s);
-extern void xfs_bmbt_set_allf(xfs_bmbt_rec_host_t *r, xfs_fileoff_t o,
-			xfs_fsblock_t b, xfs_filblks_t c, xfs_exntst_t v);
-extern void xfs_bmbt_set_blockcount(xfs_bmbt_rec_host_t *r, xfs_filblks_t v);
-extern void xfs_bmbt_set_startblock(xfs_bmbt_rec_host_t *r, xfs_fsblock_t v);
-extern void xfs_bmbt_set_startoff(xfs_bmbt_rec_host_t *r, xfs_fileoff_t v);
-extern void xfs_bmbt_set_state(xfs_bmbt_rec_host_t *r, xfs_exntst_t v);
 
 extern void xfs_bmbt_disk_set_allf(xfs_bmbt_rec_t *r, xfs_fileoff_t o,
 			xfs_fsblock_t b, xfs_filblks_t c, xfs_exntst_t v);
