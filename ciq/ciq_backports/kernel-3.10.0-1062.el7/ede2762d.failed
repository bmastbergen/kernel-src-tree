net: Make NETDEV_XXX commands enum { }

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [net] Make NETDEV_XXX commands enum { } (Ivan Vecera) [1654965]
Rebuild_FUZZ: 92.96%
commit-author Kirill Tkhai <ktkhai@virtuozzo.com>
commit ede2762d93ff16e0974f7446516b46b1022db213
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ede2762d.failed

This patch is preparation to drop NETDEV_UNREGISTER_FINAL.
Since the cmd is used in usnic_ib_netdev_event_to_string()
to get cmd name, after plain removing NETDEV_UNREGISTER_FINAL
from everywhere, we'd have holes in event2str[] in this
function.

Instead of that, let's make NETDEV_XXX commands names
available for everyone, and to define netdev_cmd_to_name()
in the way we won't have to shaffle names after their
numbers are changed.

	Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ede2762d93ff16e0974f7446516b46b1022db213)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index 63a3866ea81e,dd5a04c971d5..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2435,39 -2323,36 +2436,71 @@@ enum netdev_cmd 
  				   detected a hardware crash and restarted
  				   - we can use this eg to kick tcp sessions
  				   once done */
++<<<<<<< HEAD
 +#define NETDEV_CHANGE	0x0004	/* Notify device state change */
 +#define NETDEV_REGISTER 0x0005
 +#define NETDEV_UNREGISTER	0x0006
 +#define NETDEV_CHANGEMTU	0x0007 /* notify after mtu change happened */
 +#define NETDEV_CHANGEADDR	0x0008
 +#define NETDEV_GOING_DOWN	0x0009
 +#define NETDEV_CHANGENAME	0x000A
 +#define NETDEV_FEAT_CHANGE	0x000B
 +#define NETDEV_BONDING_FAILOVER 0x000C
 +#define NETDEV_PRE_UP		0x000D
 +#define NETDEV_PRE_TYPE_CHANGE	0x000E
 +#define NETDEV_POST_TYPE_CHANGE	0x000F
 +#define NETDEV_POST_INIT	0x0010
 +#define NETDEV_UNREGISTER_FINAL 0x0011
 +#define NETDEV_RELEASE		0x0012
 +#define NETDEV_NOTIFY_PEERS	0x0013
 +#define NETDEV_JOIN		0x0014
 +#define NETDEV_CHANGEUPPER	0x0015
 +#define NETDEV_RESEND_IGMP	0x0016
 +#define NETDEV_PRECHANGEMTU	0x0017 /* notify before mtu change happened */
 +#define NETDEV_CHANGEINFODATA	0x0018
 +#define NETDEV_BONDING_INFO	0x0019
 +#define NETDEV_PRECHANGEUPPER	0x001A
 +#define NETDEV_CHANGELOWERSTATE	0x001B
 +#define NETDEV_OFFLOAD_PUSH_VXLAN	0x001C
 +#define NETDEV_OFFLOAD_PUSH_GENEVE	0x001D
 +#define NETDEV_UDP_TUNNEL_PUSH_INFO	0x001E
 +#define NETDEV_CHANGE_TX_QUEUE_LEN	0x001F
 +#define NETDEV_UDP_TUNNEL_DROP_INFO	0x0020
++=======
+ 	NETDEV_CHANGE,		/* Notify device state change */
+ 	NETDEV_REGISTER,
+ 	NETDEV_UNREGISTER,
+ 	NETDEV_CHANGEMTU,	/* notify after mtu change happened */
+ 	NETDEV_CHANGEADDR,
+ 	NETDEV_GOING_DOWN,
+ 	NETDEV_CHANGENAME,
+ 	NETDEV_FEAT_CHANGE,
+ 	NETDEV_BONDING_FAILOVER,
+ 	NETDEV_PRE_UP,
+ 	NETDEV_PRE_TYPE_CHANGE,
+ 	NETDEV_POST_TYPE_CHANGE,
+ 	NETDEV_POST_INIT,
+ 	NETDEV_UNREGISTER_FINAL,
+ 	NETDEV_RELEASE,
+ 	NETDEV_NOTIFY_PEERS,
+ 	NETDEV_JOIN,
+ 	NETDEV_CHANGEUPPER,
+ 	NETDEV_RESEND_IGMP,
+ 	NETDEV_PRECHANGEMTU,	/* notify before mtu change happened */
+ 	NETDEV_CHANGEINFODATA,
+ 	NETDEV_BONDING_INFO,
+ 	NETDEV_PRECHANGEUPPER,
+ 	NETDEV_CHANGELOWERSTATE,
+ 	NETDEV_UDP_TUNNEL_PUSH_INFO,
+ 	NETDEV_UDP_TUNNEL_DROP_INFO,
+ 	NETDEV_CHANGE_TX_QUEUE_LEN,
+ };
+ const char *netdev_cmd_to_name(enum netdev_cmd cmd);
++>>>>>>> ede2762d93ff (net: Make NETDEV_XXX commands enum { })
  
 +/* (Un)registration functions for the notifiers that takes
 + * 'struct net_device *' as parameter
 + */
  int register_netdevice_notifier(struct notifier_block *nb);
  int unregister_netdevice_notifier(struct notifier_block *nb);
  
diff --cc net/core/dev.c
index a59a7fdbf3a9,055e7ae12759..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -1540,6 -1554,43 +1540,46 @@@ void dev_disable_lro(struct net_device 
  }
  EXPORT_SYMBOL(dev_disable_lro);
  
++<<<<<<< HEAD
++=======
+ /**
+  *	dev_disable_gro_hw - disable HW Generic Receive Offload on a device
+  *	@dev: device
+  *
+  *	Disable HW Generic Receive Offload (GRO_HW) on a net device.  Must be
+  *	called under RTNL.  This is needed if Generic XDP is installed on
+  *	the device.
+  */
+ static void dev_disable_gro_hw(struct net_device *dev)
+ {
+ 	dev->wanted_features &= ~NETIF_F_GRO_HW;
+ 	netdev_update_features(dev);
+ 
+ 	if (unlikely(dev->features & NETIF_F_GRO_HW))
+ 		netdev_WARN(dev, "failed to disable GRO_HW!\n");
+ }
+ 
+ const char *netdev_cmd_to_name(enum netdev_cmd cmd)
+ {
+ #define N(val) 						\
+ 	case NETDEV_##val:				\
+ 		return "NETDEV_" __stringify(val);
+ 	switch (cmd) {
+ 	N(UP) N(DOWN) N(REBOOT) N(CHANGE) N(REGISTER) N(UNREGISTER)
+ 	N(CHANGEMTU) N(CHANGEADDR) N(GOING_DOWN) N(CHANGENAME) N(FEAT_CHANGE)
+ 	N(BONDING_FAILOVER) N(PRE_UP) N(PRE_TYPE_CHANGE) N(POST_TYPE_CHANGE)
+ 	N(POST_INIT) N(RELEASE) N(NOTIFY_PEERS) N(JOIN) N(CHANGEUPPER)
+ 	N(RESEND_IGMP) N(PRECHANGEMTU) N(CHANGEINFODATA) N(BONDING_INFO)
+ 	N(PRECHANGEUPPER) N(CHANGELOWERSTATE) N(UDP_TUNNEL_PUSH_INFO)
+ 	N(UDP_TUNNEL_DROP_INFO) N(CHANGE_TX_QUEUE_LEN)
+ 	N(UNREGISTER_FINAL)
+ 	};
+ #undef N
+ 	return "UNKNOWN_NETDEV_EVENT";
+ }
+ EXPORT_SYMBOL_GPL(netdev_cmd_to_name);
+ 
++>>>>>>> ede2762d93ff (net: Make NETDEV_XXX commands enum { })
  static int call_netdevice_notifier(struct notifier_block *nb, unsigned long val,
  				   struct net_device *dev)
  {
diff --git a/drivers/infiniband/hw/usnic/usnic_ib_main.c b/drivers/infiniband/hw/usnic/usnic_ib_main.c
index bcca4bd599ef..5534632362d1 100644
--- a/drivers/infiniband/hw/usnic/usnic_ib_main.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_main.c
@@ -97,20 +97,7 @@ void usnic_ib_log_vf(struct usnic_ib_vf *vf)
 /* Start of netdev section */
 static inline const char *usnic_ib_netdev_event_to_string(unsigned long event)
 {
-	const char *event2str[] = {"NETDEV_NONE", "NETDEV_UP", "NETDEV_DOWN",
-		"NETDEV_REBOOT", "NETDEV_CHANGE",
-		"NETDEV_REGISTER", "NETDEV_UNREGISTER", "NETDEV_CHANGEMTU",
-		"NETDEV_CHANGEADDR", "NETDEV_GOING_DOWN", "NETDEV_FEAT_CHANGE",
-		"NETDEV_BONDING_FAILOVER", "NETDEV_PRE_UP",
-		"NETDEV_PRE_TYPE_CHANGE", "NETDEV_POST_TYPE_CHANGE",
-		"NETDEV_POST_INT", "NETDEV_UNREGISTER_FINAL", "NETDEV_RELEASE",
-		"NETDEV_NOTIFY_PEERS", "NETDEV_JOIN"
-	};
-
-	if (event >= ARRAY_SIZE(event2str))
-		return "UNKNOWN_NETDEV_EVENT";
-	else
-		return event2str[event];
+	return netdev_cmd_to_name(event);
 }
 
 static void usnic_ib_qp_grp_modify_active_to_err(struct usnic_ib_dev *us_ibdev)
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev.c
