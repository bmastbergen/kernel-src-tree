powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powerpc] 64: Add CONFIG_PPC_BARRIER_NOSPEC (Gustavo Duarte) [1694459]
Rebuild_FUZZ: 89.19%
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 179ab1cbf883575c3a585bcfc0f2160f1d22a149
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/179ab1cb.failed

Add a config symbol to encode which platforms support the
barrier_nospec speculation barrier. Currently this is just Book3S 64
but we will add Book3E in a future patch.

	Signed-off-by: Diana Craciun <diana.craciun@nxp.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 179ab1cbf883575c3a585bcfc0f2160f1d22a149)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/Kconfig
#	arch/powerpc/include/asm/barrier.h
#	arch/powerpc/include/asm/setup.h
#	arch/powerpc/kernel/Makefile
#	arch/powerpc/kernel/module.c
#	arch/powerpc/kernel/vmlinux.lds.S
#	arch/powerpc/lib/feature-fixups.c
diff --cc arch/powerpc/Kconfig
index 0d35864e333d,846c89ed7fa3..000000000000
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@@ -126,76 -125,128 +126,159 @@@ config ARCH_HAS_DMA_SET_COHERENT_MAS
  config PPC
  	bool
  	default y
 -	#
 -	# Please keep this list sorted alphabetically.
 -	#
 -	select ARCH_HAS_DEVMEM_IS_ALLOWED
 -	select ARCH_HAS_DMA_SET_COHERENT_MASK
 -	select ARCH_HAS_ELF_RANDOMIZE
 -	select ARCH_HAS_FORTIFY_SOURCE
 -	select ARCH_HAS_GCOV_PROFILE_ALL
 -	select ARCH_HAS_PHYS_TO_DMA
 -	select ARCH_HAS_PMEM_API                if PPC64
 -	select ARCH_HAS_PTE_SPECIAL
 -	select ARCH_HAS_MEMBARRIER_CALLBACKS
 -	select ARCH_HAS_SCALED_CPUTIME		if VIRT_CPU_ACCOUNTING_NATIVE
 -	select ARCH_HAS_SG_CHAIN
 -	select ARCH_HAS_STRICT_KERNEL_RWX	if ((PPC_BOOK3S_64 || PPC32) && !RELOCATABLE && !HIBERNATION)
 -	select ARCH_HAS_TICK_BROADCAST		if GENERIC_CLOCKEVENTS_BROADCAST
 -	select ARCH_HAS_UACCESS_FLUSHCACHE	if PPC64
 -	select ARCH_HAS_UBSAN_SANITIZE_ALL
 -	select ARCH_HAS_ZONE_DEVICE		if PPC_BOOK3S_64
 -	select ARCH_HAVE_NMI_SAFE_CMPXCHG
  	select ARCH_MIGHT_HAVE_PC_PARPORT
 -	select ARCH_MIGHT_HAVE_PC_SERIO
 -	select ARCH_OPTIONAL_KERNEL_RWX		if ARCH_HAS_STRICT_KERNEL_RWX
 -	select ARCH_SUPPORTS_ATOMIC_RMW
 -	select ARCH_USE_BUILTIN_BSWAP
 -	select ARCH_USE_CMPXCHG_LOCKREF		if PPC64
 -	select ARCH_WANT_IPC_PARSE_VERSION
 -	select ARCH_WEAK_RELEASE_ACQUIRE
  	select BINFMT_ELF
++<<<<<<< HEAD
 +	select ARCH_HAS_ELF_RANDOMIZE
++=======
+ 	select BUILDTIME_EXTABLE_SORT
+ 	select CLONE_BACKWARDS
+ 	select DCACHE_WORD_ACCESS		if PPC64 && CPU_LITTLE_ENDIAN
+ 	select DYNAMIC_FTRACE			if FUNCTION_TRACER
+ 	select EDAC_ATOMIC_SCRUB
+ 	select EDAC_SUPPORT
+ 	select GENERIC_ATOMIC64			if PPC32
+ 	select GENERIC_CLOCKEVENTS
+ 	select GENERIC_CLOCKEVENTS_BROADCAST	if SMP
+ 	select GENERIC_CMOS_UPDATE
+ 	select GENERIC_CPU_AUTOPROBE
+ 	select GENERIC_CPU_VULNERABILITIES	if PPC_BARRIER_NOSPEC
+ 	select GENERIC_IRQ_SHOW
+ 	select GENERIC_IRQ_SHOW_LEVEL
+ 	select GENERIC_SMP_IDLE_THREAD
+ 	select GENERIC_STRNCPY_FROM_USER
+ 	select GENERIC_STRNLEN_USER
+ 	select GENERIC_TIME_VSYSCALL
+ 	select HAVE_ARCH_AUDITSYSCALL
+ 	select HAVE_ARCH_JUMP_LABEL
+ 	select HAVE_ARCH_KGDB
+ 	select HAVE_ARCH_MMAP_RND_BITS
+ 	select HAVE_ARCH_MMAP_RND_COMPAT_BITS	if COMPAT
+ 	select HAVE_ARCH_SECCOMP_FILTER
+ 	select HAVE_ARCH_TRACEHOOK
+ 	select HAVE_CBPF_JIT			if !PPC64
+ 	select HAVE_CONTEXT_TRACKING		if PPC64
+ 	select HAVE_DEBUG_KMEMLEAK
+ 	select HAVE_DEBUG_STACKOVERFLOW
+ 	select HAVE_DYNAMIC_FTRACE
+ 	select HAVE_DYNAMIC_FTRACE_WITH_REGS	if MPROFILE_KERNEL
+ 	select HAVE_EBPF_JIT			if PPC64
+ 	select HAVE_EFFICIENT_UNALIGNED_ACCESS	if !(CPU_LITTLE_ENDIAN && POWER7_CPU)
+ 	select HAVE_FTRACE_MCOUNT_RECORD
+ 	select HAVE_FUNCTION_GRAPH_TRACER
+ 	select HAVE_FUNCTION_TRACER
+ 	select HAVE_GCC_PLUGINS			if GCC_VERSION >= 50200   # plugin support on gcc <= 5.1 is buggy on PPC
+ 	select HAVE_GENERIC_GUP
+ 	select HAVE_HW_BREAKPOINT		if PERF_EVENTS && (PPC_BOOK3S || PPC_8xx)
+ 	select HAVE_IDE
+ 	select HAVE_IOREMAP_PROT
+ 	select HAVE_IRQ_EXIT_ON_IRQ_STACK
+ 	select HAVE_KERNEL_GZIP
+ 	select HAVE_KERNEL_XZ			if PPC_BOOK3S
+ 	select HAVE_KPROBES
+ 	select HAVE_KPROBES_ON_FTRACE
+ 	select HAVE_KRETPROBES
+ 	select HAVE_LD_DEAD_CODE_DATA_ELIMINATION
+ 	select HAVE_LIVEPATCH			if HAVE_DYNAMIC_FTRACE_WITH_REGS
+ 	select HAVE_MEMBLOCK
+ 	select HAVE_MEMBLOCK_NODE_MAP
+ 	select HAVE_MOD_ARCH_SPECIFIC
+ 	select HAVE_NMI				if PERF_EVENTS || (PPC64 && PPC_BOOK3S)
+ 	select HAVE_HARDLOCKUP_DETECTOR_ARCH	if (PPC64 && PPC_BOOK3S)
+ 	select HAVE_OPROFILE
+ 	select HAVE_OPTPROBES			if PPC64
+ 	select HAVE_PERF_EVENTS
+ 	select HAVE_PERF_EVENTS_NMI		if PPC64
+ 	select HAVE_HARDLOCKUP_DETECTOR_PERF	if PERF_EVENTS && HAVE_PERF_EVENTS_NMI && !HAVE_HARDLOCKUP_DETECTOR_ARCH
+ 	select HAVE_PERF_REGS
+ 	select HAVE_PERF_USER_STACK_DUMP
+ 	select HAVE_RCU_TABLE_FREE		if SMP
+ 	select HAVE_REGS_AND_STACK_ACCESS_API
+ 	select HAVE_RELIABLE_STACKTRACE		if PPC64 && CPU_LITTLE_ENDIAN
+ 	select HAVE_SYSCALL_TRACEPOINTS
+ 	select HAVE_VIRT_CPU_ACCOUNTING
+ 	select HAVE_IRQ_TIME_ACCOUNTING
+ 	select HAVE_RSEQ
+ 	select IOMMU_HELPER			if PPC64
+ 	select IRQ_DOMAIN
+ 	select IRQ_FORCED_THREADING
+ 	select MODULES_USE_ELF_RELA
+ 	select NEED_DMA_MAP_STATE		if PPC64 || NOT_COHERENT_CACHE
+ 	select NEED_SG_DMA_LENGTH
+ 	select NO_BOOTMEM
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  	select OF
  	select OF_EARLY_FLATTREE
 -	select OF_RESERVED_MEM
 -	select OLD_SIGACTION			if PPC32
 -	select OLD_SIGSUSPEND
 -	select RTC_LIB
 -	select SPARSE_IRQ
 +	select HAVE_FTRACE_MCOUNT_RECORD
 +	select HAVE_ARCH_MMAP_RND_BITS
 +	select HAVE_ARCH_MMAP_RND_COMPAT_BITS	if COMPAT
 +	select HAVE_DYNAMIC_FTRACE
 +	select HAVE_DYNAMIC_FTRACE_WITH_REGS if MPROFILE_KERNEL
 +	select HAVE_FUNCTION_TRACER
 +	select HAVE_FUNCTION_GRAPH_TRACER
  	select SYSCTL_EXCEPTION_TRACE
 -	select VIRT_TO_BUS			if !PPC64
 -	#
 -	# Please keep this list sorted alphabetically.
 -	#
 +	select ARCH_WANT_OPTIONAL_GPIOLIB
 +	select VIRT_TO_BUS if !PPC64
 +	select HAVE_IDE
 +	select HAVE_IOREMAP_PROT
 +	select HAVE_EFFICIENT_UNALIGNED_ACCESS if !(CPU_LITTLE_ENDIAN && POWER7_CPU)
 +	select HAVE_KPROBES
 +	select HAVE_ARCH_KGDB
 +	select HAVE_KRETPROBES
 +	select HAVE_ARCH_TRACEHOOK
 +	select HAVE_MEMBLOCK
 +	select HAVE_MEMBLOCK_NODE_MAP
 +	select HAVE_DMA_API_DEBUG
 +	select USE_GENERIC_SMP_HELPERS if SMP
 +	select HAVE_OPROFILE
 +	select HAVE_DEBUG_KMEMLEAK
 +	select GENERIC_ATOMIC64 if PPC32
 +	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
 +	select HAVE_PERF_EVENTS
 +	select HAVE_PERF_REGS
 +	select HAVE_PERF_USER_STACK_DUMP
 +	select HAVE_REGS_AND_STACK_ACCESS_API
 +	select HAVE_HW_BREAKPOINT if PERF_EVENTS && PPC_BOOK3S_64
 +	select HAVE_GENERIC_HARDIRQS
 +	select ARCH_WANT_IPC_PARSE_VERSION
 +	select SPARSE_IRQ
 +	select HAVE_RELIABLE_STACKTRACE		if PPC64 && CPU_LITTLE_ENDIAN
 +	select IRQ_DOMAIN
 +	select GENERIC_IRQ_SHOW
 +	select GENERIC_IRQ_SHOW_LEVEL
 +	select IRQ_FORCED_THREADING
 +	select HAVE_RCU_TABLE_FREE if SMP
 +	select HAVE_SYSCALL_TRACEPOINTS
 +	select HAVE_CBPF_JIT if (PPC64 && CPU_BIG_ENDIAN)
 +	select HAVE_ARCH_JUMP_LABEL
 +	select ARCH_HAVE_NMI_SAFE_CMPXCHG
 +	select GENERIC_SMP_IDLE_THREAD
 +	select GENERIC_CMOS_UPDATE
 +	select GENERIC_TIME_VSYSCALL_OLD
 +	select GENERIC_CLOCKEVENTS
 +	select GENERIC_CLOCKEVENTS_BROADCAST if SMP
 +	select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST
 +	select GENERIC_STRNCPY_FROM_USER
 +	select GENERIC_STRNLEN_USER
 +	select HAVE_MOD_ARCH_SPECIFIC
 +	select MODULES_USE_ELF_RELA
 +	select CLONE_BACKWARDS
 +	select ARCH_USE_BUILTIN_BSWAP
 +	select OLD_SIGSUSPEND
 +	select OLD_SIGACTION if PPC32
 +	select HAVE_IRQ_EXIT_ON_IRQ_STACK
 +	select ARCH_USE_CMPXCHG_LOCKREF if PPC64
 +	select ARCH_HAS_DMA_SET_COHERENT_MASK
 +	select HAVE_ARCH_SECCOMP_FILTER
 +	select HAVE_PERF_EVENTS_NMI if PPC64
 +	select GENERIC_CPU_VULNERABILITIES	if PPC_BOOK3S_64
 +	select HAVE_LIVEPATCH if HAVE_DYNAMIC_FTRACE_WITH_REGS
  
+ config PPC_BARRIER_NOSPEC
+     bool
+     default y
+     depends on PPC_BOOK3S_64
+ 
  config GENERIC_CSUM
  	def_bool n
  
diff --cc arch/powerpc/include/asm/barrier.h
index df6b7335588b,cdc6960506e2..000000000000
--- a/arch/powerpc/include/asm/barrier.h
+++ b/arch/powerpc/include/asm/barrier.h
@@@ -90,7 -78,21 +90,26 @@@ do {									
  	___p1;								\
  })
  
++<<<<<<< HEAD
 +#define smp_mb__before_atomic()     smp_mb()
 +#define smp_mb__after_atomic()      smp_mb()
++=======
+ #ifdef CONFIG_PPC_BARRIER_NOSPEC
+ /*
+  * Prevent execution of subsequent instructions until preceding branches have
+  * been fully resolved and are no longer executing speculatively.
+  */
+ #define barrier_nospec_asm NOSPEC_BARRIER_FIXUP_SECTION; nop
+ 
+ // This also acts as a compiler barrier due to the memory clobber.
+ #define barrier_nospec() asm (stringify_in_c(barrier_nospec_asm) ::: "memory")
+ 
+ #else /* !CONFIG_PPC_BARRIER_NOSPEC */
+ #define barrier_nospec_asm
+ #define barrier_nospec()
+ #endif /* CONFIG_PPC_BARRIER_NOSPEC */
+ 
+ #include <asm-generic/barrier.h>
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  
  #endif /* _ASM_POWERPC_BARRIER_H */
diff --cc arch/powerpc/include/asm/setup.h
index cb1e56079d12,8205f9fdfd67..000000000000
--- a/arch/powerpc/include/asm/setup.h
+++ b/arch/powerpc/include/asm/setup.h
@@@ -40,6 -52,15 +40,18 @@@ enum l1d_flush_type 
  
  void setup_rfi_flush(enum l1d_flush_type, bool enable);
  void do_rfi_flush_fixups(enum l1d_flush_type types);
++<<<<<<< HEAD
++=======
+ void setup_barrier_nospec(void);
+ void do_barrier_nospec_fixups(bool enable);
+ extern bool barrier_nospec_enabled;
+ 
+ #ifdef CONFIG_PPC_BARRIER_NOSPEC
+ void do_barrier_nospec_fixups_range(bool enable, void *start, void *end);
+ #else
+ static inline void do_barrier_nospec_fixups_range(bool enable, void *start, void *end) { };
+ #endif
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  
  #endif /* !__ASSEMBLY__ */
  
diff --cc arch/powerpc/kernel/Makefile
index 0b54242e0bcb,dbe2cf04b406..000000000000
--- a/arch/powerpc/kernel/Makefile
+++ b/arch/powerpc/kernel/Makefile
@@@ -37,13 -38,14 +37,20 @@@ obj-y				:= cputable.o ptrace.o syscall
  obj-$(CONFIG_PPC64)		+= setup_64.o sys_ppc32.o \
  				   signal_64.o ptrace32.o \
  				   paca.o nvram_64.o firmware.o
 -obj-$(CONFIG_VDSO32)		+= vdso32/
 -obj-$(CONFIG_PPC_WATCHDOG)	+= watchdog.o
  obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
  obj-$(CONFIG_PPC_BOOK3S_64)	+= cpu_setup_ppc970.o cpu_setup_pa6t.o
++<<<<<<< HEAD
 +obj-$(CONFIG_PPC_BOOK3S_64)	+= cpu_setup_power.o security.o
 +obj-$(CONFIG_PPC_BOOK3S_64)	+= mce.o mce_power.o hmi.o
 +obj64-$(CONFIG_RELOCATABLE)	+= reloc_64.o
 +obj-$(CONFIG_PPC_BOOK3E_64)	+= exceptions-64e.o idle_book3e.o
 +obj-$(CONFIG_PPC_A2)		+= cpu_setup_a2.o
++=======
+ obj-$(CONFIG_PPC_BOOK3S_64)	+= cpu_setup_power.o
+ obj-$(CONFIG_PPC_BOOK3S_64)	+= mce.o mce_power.o
+ obj-$(CONFIG_PPC_BOOK3E_64)	+= exceptions-64e.o idle_book3e.o
+ obj-$(CONFIG_PPC_BARRIER_NOSPEC) += security.o
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  obj-$(CONFIG_PPC64)		+= vdso64/
  obj-$(CONFIG_ALTIVEC)		+= vecemu.o
  obj-$(CONFIG_PPC_970_NAP)	+= idle_power4.o
diff --cc arch/powerpc/kernel/module.c
index 30b89d5cbb03,77371c9ef3d8..000000000000
--- a/arch/powerpc/kernel/module.c
+++ b/arch/powerpc/kernel/module.c
@@@ -72,7 -72,15 +72,19 @@@ int module_finalize(const Elf_Ehdr *hdr
  		do_feature_fixups(powerpc_firmware_features,
  				  (void *)sect->sh_addr,
  				  (void *)sect->sh_addr + sect->sh_size);
++<<<<<<< HEAD
 +#endif
++=======
+ #endif /* CONFIG_PPC64 */
+ 
+ #ifdef CONFIG_PPC_BARRIER_NOSPEC
+ 	sect = find_section(hdr, sechdrs, "__spec_barrier_fixup");
+ 	if (sect != NULL)
+ 		do_barrier_nospec_fixups_range(barrier_nospec_enabled,
+ 				  (void *)sect->sh_addr,
+ 				  (void *)sect->sh_addr + sect->sh_size);
+ #endif /* CONFIG_PPC_BARRIER_NOSPEC */
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  
  	sect = find_section(hdr, sechdrs, "__lwsync_fixup");
  	if (sect != NULL)
diff --cc arch/powerpc/kernel/vmlinux.lds.S
index 08f3ea1f3d67,07ae018e550e..000000000000
--- a/arch/powerpc/kernel/vmlinux.lds.S
+++ b/arch/powerpc/kernel/vmlinux.lds.S
@@@ -94,7 -153,16 +94,20 @@@ SECTION
  		*(__rfi_flush_fixup)
  		__stop___rfi_flush_fixup = .;
  	}
++<<<<<<< HEAD
 +#endif
++=======
+ #endif /* CONFIG_PPC64 */
+ 
+ #ifdef CONFIG_PPC_BARRIER_NOSPEC
+ 	. = ALIGN(8);
+ 	__spec_barrier_fixup : AT(ADDR(__spec_barrier_fixup) - LOAD_OFFSET) {
+ 		__start___barrier_nospec_fixup = .;
+ 		*(__barrier_nospec_fixup)
+ 		__stop___barrier_nospec_fixup = .;
+ 	}
+ #endif /* CONFIG_PPC_BARRIER_NOSPEC */
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  
  	EXCEPTION_TABLE(0)
  
diff --cc arch/powerpc/lib/feature-fixups.c
index bf84e37263b5,0e604b41b5d1..000000000000
--- a/arch/powerpc/lib/feature-fixups.c
+++ b/arch/powerpc/lib/feature-fixups.c
@@@ -275,7 -277,46 +275,50 @@@ void do_rfi_flush_fixups(enum l1d_flush
  		(types &  L1D_FLUSH_MTTRIG)     ? "mttrig type"
  						: "unknown");
  }
++<<<<<<< HEAD
 +#endif /* CONFIG_PPC_BOOK3S_64 */
++=======
+ 
+ void do_barrier_nospec_fixups_range(bool enable, void *fixup_start, void *fixup_end)
+ {
+ 	unsigned int instr, *dest;
+ 	long *start, *end;
+ 	int i;
+ 
+ 	start = fixup_start;
+ 	end = fixup_end;
+ 
+ 	instr = 0x60000000; /* nop */
+ 
+ 	if (enable) {
+ 		pr_info("barrier-nospec: using ORI speculation barrier\n");
+ 		instr = 0x63ff0000; /* ori 31,31,0 speculation barrier */
+ 	}
+ 
+ 	for (i = 0; start < end; start++, i++) {
+ 		dest = (void *)start + *start;
+ 
+ 		pr_devel("patching dest %lx\n", (unsigned long)dest);
+ 		patch_instruction(dest, instr);
+ 	}
+ 
+ 	printk(KERN_DEBUG "barrier-nospec: patched %d locations\n", i);
+ }
+ 
+ #endif /* CONFIG_PPC_BOOK3S_64 */
+ 
+ #ifdef CONFIG_PPC_BARRIER_NOSPEC
+ void do_barrier_nospec_fixups(bool enable)
+ {
+ 	void *start, *end;
+ 
+ 	start = PTRRELOC(&__start___barrier_nospec_fixup),
+ 	end = PTRRELOC(&__stop___barrier_nospec_fixup);
+ 
+ 	do_barrier_nospec_fixups_range(enable, start, end);
+ }
+ #endif /* CONFIG_PPC_BARRIER_NOSPEC */
++>>>>>>> 179ab1cbf883 (powerpc/64: Add CONFIG_PPC_BARRIER_NOSPEC)
  
  void do_lwsync_fixups(unsigned long value, void *fixup_start, void *fixup_end)
  {
* Unmerged path arch/powerpc/Kconfig
* Unmerged path arch/powerpc/include/asm/barrier.h
* Unmerged path arch/powerpc/include/asm/setup.h
* Unmerged path arch/powerpc/kernel/Makefile
* Unmerged path arch/powerpc/kernel/module.c
* Unmerged path arch/powerpc/kernel/vmlinux.lds.S
* Unmerged path arch/powerpc/lib/feature-fixups.c
