net/mlx5e: TLS, refactor variable names

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: TLS, refactor variable names (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 94.59%
commit-author Boris Pismenny <borisp@mellanox.com>
commit 0aadb2fc092910b6db0038b377e130b905ba17e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0aadb2fc.failed

For symmetry, we rename mlx5e_tls_offload_context to
mlx5e_tls_offload_context_tx before we add mlx5e_tls_offload_context_rx.

	Signed-off-by: Boris Pismenny <borisp@mellanox.com>
	Reviewed-by: Aviad Yehezkel <aviadye@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0aadb2fc092910b6db0038b377e130b905ba17e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
index f7216b9b98e2,e26222ab26a6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
@@@ -38,19 -38,30 +38,42 @@@
  #include <net/tls.h>
  #include "en.h"
  
++<<<<<<< HEAD
 +struct mlx5e_tls_offload_context {
 +	struct tls_offload_context base;
++=======
+ struct mlx5e_tls_sw_stats {
+ 	atomic64_t tx_tls_drop_metadata;
+ 	atomic64_t tx_tls_drop_resync_alloc;
+ 	atomic64_t tx_tls_drop_no_sync_data;
+ 	atomic64_t tx_tls_drop_bypass_required;
+ };
+ 
+ struct mlx5e_tls {
+ 	struct mlx5e_tls_sw_stats sw_stats;
+ };
+ 
+ struct mlx5e_tls_offload_context_tx {
+ 	struct tls_offload_context_tx base;
++>>>>>>> 0aadb2fc0929 (net/mlx5e: TLS, refactor variable names)
  	u32 expected_seq;
  	__be32 swid;
  };
  
- static inline struct mlx5e_tls_offload_context *
+ static inline struct mlx5e_tls_offload_context_tx *
  mlx5e_get_tls_tx_context(struct tls_context *tls_ctx)
  {
++<<<<<<< HEAD
 +	BUILD_BUG_ON(sizeof(struct mlx5e_tls_offload_context) >
 +		     TLS_OFFLOAD_CONTEXT_SIZE);
 +	return container_of(tls_offload_ctx(tls_ctx),
 +			    struct mlx5e_tls_offload_context,
++=======
+ 	BUILD_BUG_ON(sizeof(struct mlx5e_tls_offload_context_tx) >
+ 		     TLS_OFFLOAD_CONTEXT_SIZE_TX);
+ 	return container_of(tls_offload_ctx_tx(tls_ctx),
+ 			    struct mlx5e_tls_offload_context_tx,
++>>>>>>> 0aadb2fc0929 (net/mlx5e: TLS, refactor variable names)
  			    base);
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c
index 38d88108a55a..e9bb0bddcf6b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c
@@ -123,7 +123,7 @@ static int mlx5e_tls_add(struct net_device *netdev, struct sock *sk,
 		goto free_flow;
 
 	if (direction == TLS_OFFLOAD_CTX_DIR_TX) {
-		struct mlx5e_tls_offload_context *tx_ctx =
+		struct mlx5e_tls_offload_context_tx *tx_ctx =
 		    mlx5e_get_tls_tx_context(tls_ctx);
 		u32 swid;
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c
