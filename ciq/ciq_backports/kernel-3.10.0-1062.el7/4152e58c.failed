nfp: make RTsym users handle absolute symbols correctly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 4152e58cb8c5cd390989f1e96092bce92c27c67a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4152e58c.failed

Make the RTsym users access the size via the helper, which
takes care of special handling of absolute symbols.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Francois H. Theron <francois.theron@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4152e58cb8c5cd390989f1e96092bce92c27c67a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/abm/ctrl.c
#	drivers/net/ethernet/netronome/nfp/nfp_main.c
#	drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
diff --cc drivers/net/ethernet/netronome/nfp/abm/ctrl.c
index e40f6f06417b,5b06f07c78cd..000000000000
--- a/drivers/net/ethernet/netronome/nfp/abm/ctrl.c
+++ b/drivers/net/ethernet/netronome/nfp/abm/ctrl.c
@@@ -46,6 -270,33 +46,36 @@@ void nfp_abm_ctrl_read_params(struct nf
  	alink->queue_base /= alink->vnic->stride_rx;
  }
  
++<<<<<<< HEAD
++=======
+ static const struct nfp_rtsym *
+ nfp_abm_ctrl_find_rtsym(struct nfp_pf *pf, const char *name, unsigned int size)
+ {
+ 	const struct nfp_rtsym *sym;
+ 
+ 	sym = nfp_rtsym_lookup(pf->rtbl, name);
+ 	if (!sym) {
+ 		nfp_err(pf->cpp, "Symbol '%s' not found\n", name);
+ 		return ERR_PTR(-ENOENT);
+ 	}
+ 	if (nfp_rtsym_size(sym) != size) {
+ 		nfp_err(pf->cpp,
+ 			"Symbol '%s' wrong size: expected %u got %llu\n",
+ 			name, size, nfp_rtsym_size(sym));
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	return sym;
+ }
+ 
+ static const struct nfp_rtsym *
+ nfp_abm_ctrl_find_q_rtsym(struct nfp_pf *pf, const char *name,
+ 			  unsigned int size)
+ {
+ 	return nfp_abm_ctrl_find_rtsym(pf, name, size * NFP_NET_MAX_RX_RINGS);
+ }
+ 
++>>>>>>> 4152e58cb8c5 (nfp: make RTsym users handle absolute symbols correctly)
  int nfp_abm_ctrl_find_addrs(struct nfp_abm *abm)
  {
  	struct nfp_pf *pf = abm->app->pf;
diff --cc drivers/net/ethernet/netronome/nfp/nfp_main.c
index cbb34f018556,9474a4eed8ce..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_main.c
@@@ -121,13 -124,10 +121,17 @@@ int nfp_mbox_cmd(struct nfp_pf *pf, u3
  	if (!pf->mbox)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	cpp_id = NFP_CPP_ISLAND_ID(pf->mbox->target, NFP_CPP_ACTION_RW, 0,
 +				   pf->mbox->domain);
 +	addr = pf->mbox->addr;
 +	max_data_sz = pf->mbox->size - NFP_MBOX_SYM_MIN_SIZE;
++=======
+ 	max_data_sz = nfp_rtsym_size(pf->mbox) - NFP_MBOX_SYM_MIN_SIZE;
++>>>>>>> 4152e58cb8c5 (nfp: make RTsym users handle absolute symbols correctly)
  
  	/* Check if cmd field is clear */
 -	err = nfp_rtsym_readl(pf->cpp, pf->mbox, NFP_MBOX_CMD, &val);
 +	err = nfp_cpp_readl(pf->cpp, cpp_id, addr + NFP_MBOX_CMD, &val);
  	if (err || val) {
  		nfp_warn(pf->cpp, "failed to issue command (%u): %u, err: %d\n",
  			 cmd, val, err);
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
index bb8ed460086e,b6b897840ac5..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
@@@ -188,25 -188,21 +188,36 @@@ nfp_net_dump_load_dumpspec(struct nfp_c
  	const struct nfp_rtsym *specsym;
  	struct nfp_dumpspec *dumpspec;
  	int bytes_read;
++<<<<<<< HEAD
 +	u32 cpp_id;
++=======
+ 	u64 sym_size;
++>>>>>>> 4152e58cb8c5 (nfp: make RTsym users handle absolute symbols correctly)
  
  	specsym = nfp_rtsym_lookup(rtbl, NFP_DUMP_SPEC_RTSYM);
  	if (!specsym)
  		return NULL;
+ 	sym_size = nfp_rtsym_size(specsym);
  
  	/* expected size of this buffer is in the order of tens of kilobytes */
- 	dumpspec = vmalloc(sizeof(*dumpspec) + specsym->size);
+ 	dumpspec = vmalloc(sizeof(*dumpspec) + sym_size);
  	if (!dumpspec)
  		return NULL;
+ 	dumpspec->size = sym_size;
  
++<<<<<<< HEAD
 +	dumpspec->size = specsym->size;
 +
 +	cpp_id = NFP_CPP_ISLAND_ID(specsym->target, NFP_CPP_ACTION_RW, 0,
 +				   specsym->domain);
 +
 +	bytes_read = nfp_cpp_read(cpp, cpp_id, specsym->addr, dumpspec->data,
 +				  specsym->size);
 +	if (bytes_read != specsym->size) {
++=======
+ 	bytes_read = nfp_rtsym_read(cpp, specsym, 0, dumpspec->data, sym_size);
+ 	if (bytes_read != sym_size) {
++>>>>>>> 4152e58cb8c5 (nfp: make RTsym users handle absolute symbols correctly)
  		vfree(dumpspec);
  		nfp_warn(cpp, "Debug dump specification read failed.\n");
  		return NULL;
@@@ -683,16 -666,15 +682,26 @@@ nfp_dump_single_rtsym(struct nfp_pf *pf
  		cpp_params.action = NFP_CPP_ACTION_RW;
  		cpp_params.token  = 0;
  		cpp_params.island = sym->domain;
 +		cpp_id = nfp_get_numeric_cpp_id(&cpp_params);
  		dump_header->cpp.cpp_id = cpp_params;
  		dump_header->cpp.offset = cpu_to_be32(sym->addr);
++<<<<<<< HEAD
 +		bytes_read = nfp_cpp_read(pf->cpp, cpp_id, sym->addr, dest,
 +					  sym_size);
 +		if (bytes_read != sym_size) {
 +			if (bytes_read >= 0)
 +				bytes_read = -EIO;
 +			dump_header->error = cpu_to_be32(bytes_read);
 +		}
++=======
+ 	}
+ 
+ 	bytes_read = nfp_rtsym_read(pf->cpp, sym, 0, dest, sym_size);
+ 	if (bytes_read != sym_size) {
+ 		if (bytes_read >= 0)
+ 			bytes_read = -EIO;
+ 		dump_header->error = cpu_to_be32(bytes_read);
++>>>>>>> 4152e58cb8c5 (nfp: make RTsym users handle absolute symbols correctly)
  	}
  
  	return 0;
* Unmerged path drivers/net/ethernet/netronome/nfp/abm/ctrl.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_main.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
