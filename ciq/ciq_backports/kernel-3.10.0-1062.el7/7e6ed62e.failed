ALSA: hda/ca0132: Add dsp setup + gpio functions for r3di

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Connor McAdams <conmanx360@gmail.com>
commit 7e6ed62ebedb352be3a6f0907bcab25789db7914
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/7e6ed62e.failed

Adds dsp setup functions for Recon3Di as well as the GPIO functions
specific to it.

	Signed-off-by: Connor McAdams <conmanx360@gmail.com>
	Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 7e6ed62ebedb352be3a6f0907bcab25789db7914)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,dd98b7731dc4..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -2733,6 -2855,129 +2733,132 @@@ static bool dspload_wait_loaded(struct 
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Setup GPIO for the other variants of Core3D.
+  */
+ 
+ /*
+  * Sets up the GPIO pins so that they are discoverable. If this isn't done,
+  * the card shows as having no GPIO pins.
+  */
+ static void ca0132_gpio_init(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		snd_hda_codec_write(codec, 0x01, 0, 0x793, 0x00);
+ 		snd_hda_codec_write(codec, 0x01, 0, 0x794, 0x53);
+ 		snd_hda_codec_write(codec, 0x01, 0, 0x790, 0x23);
+ 		break;
+ 	case QUIRK_R3DI:
+ 		snd_hda_codec_write(codec, 0x01, 0, 0x793, 0x00);
+ 		snd_hda_codec_write(codec, 0x01, 0, 0x794, 0x5B);
+ 		break;
+ 	}
+ 
+ }
+ 
+ /* Sets the GPIO for audio output. */
+ static void ca0132_gpio_setup(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_DIRECTION, 0x07);
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_MASK, 0x07);
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_DATA, 0x04);
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_DATA, 0x06);
+ 		break;
+ 	case QUIRK_R3DI:
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_DIRECTION, 0x1E);
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_MASK, 0x1F);
+ 		snd_hda_codec_write(codec, 0x01, 0,
+ 				AC_VERB_SET_GPIO_DATA, 0x0C);
+ 		break;
+ 	}
+ }
+ 
+ /*
+  * GPIO control functions for the Recon3D integrated.
+  */
+ 
+ enum r3di_gpio_bit {
+ 	/* Bit 1 - Switch between front/rear mic. 0 = rear, 1 = front */
+ 	R3DI_MIC_SELECT_BIT = 1,
+ 	/* Bit 2 - Switch between headphone/line out. 0 = Headphone, 1 = Line */
+ 	R3DI_OUT_SELECT_BIT = 2,
+ 	/*
+ 	 * I dunno what this actually does, but it stays on until the dsp
+ 	 * is downloaded.
+ 	 */
+ 	R3DI_GPIO_DSP_DOWNLOADING = 3,
+ 	/*
+ 	 * Same as above, no clue what it does, but it comes on after the dsp
+ 	 * is downloaded.
+ 	 */
+ 	R3DI_GPIO_DSP_DOWNLOADED = 4
+ };
+ 
+ enum r3di_mic_select {
+ 	/* Set GPIO bit 1 to 0 for rear mic */
+ 	R3DI_REAR_MIC = 0,
+ 	/* Set GPIO bit 1 to 1 for front microphone*/
+ 	R3DI_FRONT_MIC = 1
+ };
+ 
+ enum r3di_out_select {
+ 	/* Set GPIO bit 2 to 0 for headphone */
+ 	R3DI_HEADPHONE_OUT = 0,
+ 	/* Set GPIO bit 2 to 1 for speaker */
+ 	R3DI_LINE_OUT = 1
+ };
+ enum r3di_dsp_status {
+ 	/* Set GPIO bit 3 to 1 until DSP is downloaded */
+ 	R3DI_DSP_DOWNLOADING = 0,
+ 	/* Set GPIO bit 4 to 1 once DSP is downloaded */
+ 	R3DI_DSP_DOWNLOADED = 1
+ };
+ 
+ static void r3di_gpio_dsp_status_set(struct hda_codec *codec,
+ 		enum r3di_dsp_status dsp_status)
+ {
+ 	unsigned int cur_gpio;
+ 
+ 	/* Get the current GPIO Data setup */
+ 	cur_gpio = snd_hda_codec_read(codec, 0x01, 0, AC_VERB_GET_GPIO_DATA, 0);
+ 
+ 	switch (dsp_status) {
+ 	case R3DI_DSP_DOWNLOADING:
+ 		cur_gpio |= (1 << R3DI_GPIO_DSP_DOWNLOADING);
+ 		snd_hda_codec_write(codec, codec->core.afg, 0,
+ 				AC_VERB_SET_GPIO_DATA, cur_gpio);
+ 		break;
+ 	case R3DI_DSP_DOWNLOADED:
+ 		/* Set DOWNLOADING bit to 0. */
+ 		cur_gpio &= ~(1 << R3DI_GPIO_DSP_DOWNLOADING);
+ 
+ 		snd_hda_codec_write(codec, codec->core.afg, 0,
+ 				AC_VERB_SET_GPIO_DATA, cur_gpio);
+ 
+ 		cur_gpio |= (1 << R3DI_GPIO_DSP_DOWNLOADED);
+ 		break;
+ 	}
+ 
+ 	snd_hda_codec_write(codec, codec->core.afg, 0,
+ 			    AC_VERB_SET_GPIO_DATA, cur_gpio);
+ }
+ 
+ /*
++>>>>>>> 7e6ed62ebedb (ALSA: hda/ca0132: Add dsp setup + gpio functions for r3di)
   * PCM callbacks
   */
  static int ca0132_playback_pcm_prepare(struct hda_pcm_stream *hinfo,
@@@ -4331,6 -4613,147 +4457,150 @@@ static void ca0132_refresh_widget_caps(
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Recon3Di r3di_setup_defaults sub functions.
+  */
+ 
+ static void r3di_dsp_initial_mic_setup(struct hda_codec *codec)
+ {
+ 	unsigned int tmp;
+ 
+ 	/* Mic 1 Setup */
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICIN1, SR_96_000);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICOUT1, SR_96_000);
+ 	/* This ConnPointID is unique to Recon3Di. Haven't seen it elsewhere */
+ 	chipio_set_conn_rate(codec, 0x0F, SR_96_000);
+ 	tmp = FLOAT_ONE;
+ 	dspio_set_uint_param(codec, 0x80, 0x00, tmp);
+ 
+ 	/* Mic 2 Setup, even though it isn't connected on SBZ */
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICIN2, SR_96_000);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICOUT2, SR_96_000);
+ 	chipio_set_conn_rate(codec, 0x0F, SR_96_000);
+ 	tmp = FLOAT_ZERO;
+ 	dspio_set_uint_param(codec, 0x80, 0x01, tmp);
+ }
+ 
+ /*
+  * Initialize Sound Blaster Z analog microphones.
+  */
+ static void sbz_init_analog_mics(struct hda_codec *codec)
+ {
+ 	unsigned int tmp;
+ 
+ 	/* Mic 1 Setup */
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICIN1, SR_96_000);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICOUT1, SR_96_000);
+ 	tmp = FLOAT_THREE;
+ 	dspio_set_uint_param(codec, 0x80, 0x00, tmp);
+ 
+ 	/* Mic 2 Setup, even though it isn't connected on SBZ */
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICIN2, SR_96_000);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICOUT2, SR_96_000);
+ 	tmp = FLOAT_ZERO;
+ 	dspio_set_uint_param(codec, 0x80, 0x01, tmp);
+ 
+ }
+ 
+ /*
+  * Sets the source of stream 0x14 to connpointID 0x48, and the destination
+  * connpointID to 0x91. If this isn't done, the destination is 0x71, and
+  * you get no sound. I'm guessing this has to do with the Sound Blaster Z
+  * having an updated DAC, which changes the destination to that DAC.
+  */
+ static void sbz_connect_streams(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	mutex_lock(&spec->chipio_mutex);
+ 
+ 	codec_dbg(codec, "Connect Streams entered, mutex locked and loaded.\n");
+ 
+ 	chipio_set_stream_channels(codec, 0x0C, 6);
+ 	chipio_set_stream_control(codec, 0x0C, 1);
+ 
+ 	/* This value is 0x43 for 96khz, and 0x83 for 192khz. */
+ 	chipio_write_no_mutex(codec, 0x18a020, 0x00000043);
+ 
+ 	/* Setup stream 0x14 with it's source and destination points */
+ 	chipio_set_stream_source_dest(codec, 0x14, 0x48, 0x91);
+ 	chipio_set_conn_rate_no_mutex(codec, 0x48, SR_96_000);
+ 	chipio_set_conn_rate_no_mutex(codec, 0x91, SR_96_000);
+ 	chipio_set_stream_channels(codec, 0x14, 2);
+ 	chipio_set_stream_control(codec, 0x14, 1);
+ 
+ 	codec_dbg(codec, "Connect Streams exited, mutex released.\n");
+ 
+ 	mutex_unlock(&spec->chipio_mutex);
+ 
+ }
+ 
+ /*
+  * Write data through ChipIO to setup proper stream destinations.
+  * Not sure how it exactly works, but it seems to direct data
+  * to different destinations. Example is f8 to c0, e0 to c0.
+  * All I know is, if you don't set these, you get no sound.
+  */
+ static void sbz_chipio_startup_data(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	mutex_lock(&spec->chipio_mutex);
+ 	codec_dbg(codec, "Startup Data entered, mutex locked and loaded.\n");
+ 
+ 	/* These control audio output */
+ 	chipio_write_no_mutex(codec, 0x190060, 0x0001f8c0);
+ 	chipio_write_no_mutex(codec, 0x190064, 0x0001f9c1);
+ 	chipio_write_no_mutex(codec, 0x190068, 0x0001fac6);
+ 	chipio_write_no_mutex(codec, 0x19006c, 0x0001fbc7);
+ 	/* Signal to update I think */
+ 	chipio_write_no_mutex(codec, 0x19042c, 0x00000001);
+ 
+ 	chipio_set_stream_channels(codec, 0x0C, 6);
+ 	chipio_set_stream_control(codec, 0x0C, 1);
+ 	/* No clue what these control */
+ 	chipio_write_no_mutex(codec, 0x190030, 0x0001e0c0);
+ 	chipio_write_no_mutex(codec, 0x190034, 0x0001e1c1);
+ 	chipio_write_no_mutex(codec, 0x190038, 0x0001e4c2);
+ 	chipio_write_no_mutex(codec, 0x19003c, 0x0001e5c3);
+ 	chipio_write_no_mutex(codec, 0x190040, 0x0001e2c4);
+ 	chipio_write_no_mutex(codec, 0x190044, 0x0001e3c5);
+ 	chipio_write_no_mutex(codec, 0x190048, 0x0001e8c6);
+ 	chipio_write_no_mutex(codec, 0x19004c, 0x0001e9c7);
+ 	chipio_write_no_mutex(codec, 0x190050, 0x0001ecc8);
+ 	chipio_write_no_mutex(codec, 0x190054, 0x0001edc9);
+ 	chipio_write_no_mutex(codec, 0x190058, 0x0001eaca);
+ 	chipio_write_no_mutex(codec, 0x19005c, 0x0001ebcb);
+ 
+ 	chipio_write_no_mutex(codec, 0x19042c, 0x00000001);
+ 
+ 	codec_dbg(codec, "Startup Data exited, mutex released.\n");
+ 	mutex_unlock(&spec->chipio_mutex);
+ }
+ 
+ static void sbz_dsp_initial_mic_setup(struct hda_codec *codec)
+ {
+ 	unsigned int tmp;
+ 
+ 	chipio_set_stream_control(codec, 0x03, 0);
+ 	chipio_set_stream_control(codec, 0x04, 0);
+ 
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICIN1, SR_96_000);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_MICOUT1, SR_96_000);
+ 
+ 	tmp = FLOAT_THREE;
+ 	dspio_set_uint_param(codec, 0x80, 0x00, tmp);
+ 
+ 	chipio_set_stream_control(codec, 0x03, 1);
+ 	chipio_set_stream_control(codec, 0x04, 1);
+ 
+ 	chipio_write(codec, 0x18b098, 0x0000000c);
+ 	chipio_write(codec, 0x18b09C, 0x0000000c);
+ }
+ 
+ /*
++>>>>>>> 7e6ed62ebedb (ALSA: hda/ca0132: Add dsp setup + gpio functions for r3di)
   * Setup default parameters for DSP
   */
  static void ca0132_setup_defaults(struct hda_codec *codec)
@@@ -4375,6 -4798,127 +4645,130 @@@
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Setup default parameters for Recon3Di DSP.
+  */
+ 
+ static void r3di_setup_defaults(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 	unsigned int tmp;
+ 	int num_fx;
+ 	int idx, i;
+ 
+ 	if (spec->dsp_state != DSP_DOWNLOADED)
+ 		return;
+ 
+ 
+ 	r3di_dsp_initial_mic_setup(codec);
+ 
+ 	/*remove DSP headroom*/
+ 	tmp = FLOAT_ZERO;
+ 	dspio_set_uint_param(codec, 0x96, 0x3C, tmp);
+ 
+ 	/* set WUH source */
+ 	tmp = FLOAT_TWO;
+ 	dspio_set_uint_param(codec, 0x31, 0x00, tmp);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_WUH, SR_48_000);
+ 
+ 	/* Set speaker source? */
+ 	dspio_set_uint_param(codec, 0x32, 0x00, tmp);
+ 
+ 	r3di_gpio_dsp_status_set(codec, R3DI_DSP_DOWNLOADED);
+ 
+ 	/* Setup effect defaults */
+ 	num_fx = OUT_EFFECTS_COUNT + IN_EFFECTS_COUNT + 1;
+ 	for (idx = 0; idx < num_fx; idx++) {
+ 		for (i = 0; i <= ca0132_effects[idx].params; i++) {
+ 			dspio_set_uint_param(codec,
+ 					ca0132_effects[idx].mid,
+ 					ca0132_effects[idx].reqs[i],
+ 					ca0132_effects[idx].def_vals[i]);
+ 		}
+ 	}
+ 
+ }
+ 
+ /*
+  * Setup default parameters for the Sound Blaster Z DSP. A lot more going on
+  * than the Chromebook setup.
+  */
+ static void sbz_setup_defaults(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 	unsigned int tmp, stream_format;
+ 	int num_fx;
+ 	int idx, i;
+ 
+ 	if (spec->dsp_state != DSP_DOWNLOADED)
+ 		return;
+ 
+ 
+ 	sbz_init_analog_mics(codec);
+ 
+ 	sbz_connect_streams(codec);
+ 
+ 	sbz_chipio_startup_data(codec);
+ 
+ 	chipio_set_stream_control(codec, 0x03, 1);
+ 	chipio_set_stream_control(codec, 0x04, 1);
+ 
+ 	/*
+ 	 * Sets internal input loopback to off, used to have a switch to
+ 	 * enable input loopback, but turned out to be way too buggy.
+ 	 */
+ 	tmp = FLOAT_ONE;
+ 	dspio_set_uint_param(codec, 0x37, 0x08, tmp);
+ 	dspio_set_uint_param(codec, 0x37, 0x10, tmp);
+ 
+ 	/*remove DSP headroom*/
+ 	tmp = FLOAT_ZERO;
+ 	dspio_set_uint_param(codec, 0x96, 0x3C, tmp);
+ 
+ 	/* set WUH source */
+ 	tmp = FLOAT_TWO;
+ 	dspio_set_uint_param(codec, 0x31, 0x00, tmp);
+ 	chipio_set_conn_rate(codec, MEM_CONNID_WUH, SR_48_000);
+ 
+ 	/* Set speaker source? */
+ 	dspio_set_uint_param(codec, 0x32, 0x00, tmp);
+ 
+ 	sbz_dsp_initial_mic_setup(codec);
+ 
+ 
+ 	/* out, in effects + voicefx */
+ 	num_fx = OUT_EFFECTS_COUNT + IN_EFFECTS_COUNT + 1;
+ 	for (idx = 0; idx < num_fx; idx++) {
+ 		for (i = 0; i <= ca0132_effects[idx].params; i++) {
+ 			dspio_set_uint_param(codec,
+ 					ca0132_effects[idx].mid,
+ 					ca0132_effects[idx].reqs[i],
+ 					ca0132_effects[idx].def_vals[i]);
+ 		}
+ 	}
+ 
+ 	/*
+ 	 * Have to make a stream to bind the sound output to, otherwise
+ 	 * you'll get dead audio. Before I did this, it would bind to an
+ 	 * audio input, and would never work
+ 	 */
+ 	stream_format = snd_hdac_calc_stream_format(48000, 2,
+ 			SNDRV_PCM_FORMAT_S32_LE, 32, 0);
+ 
+ 	snd_hda_codec_setup_stream(codec, spec->dacs[0], spec->dsp_stream_id,
+ 					0, stream_format);
+ 
+ 	snd_hda_codec_cleanup_stream(codec, spec->dacs[0]);
+ 
+ 	snd_hda_codec_setup_stream(codec, spec->dacs[0], spec->dsp_stream_id,
+ 					0, stream_format);
+ 
+ 	snd_hda_codec_cleanup_stream(codec, spec->dacs[0]);
+ }
+ 
+ /*
++>>>>>>> 7e6ed62ebedb (ALSA: hda/ca0132: Add dsp setup + gpio functions for r3di)
   * Initialization of flags in chip
   */
  static void ca0132_init_flags(struct hda_codec *codec)
@@@ -4713,6 -5354,199 +5107,202 @@@ static void ca0132_exit_chip(struct hda
  		dsp_reset(codec);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * This fixes a problem that was hard to reproduce. Very rarely, I would
+  * boot up, and there would be no sound, but the DSP indicated it had loaded
+  * properly. I did a few memory dumps to see if anything was different, and
+  * there were a few areas of memory uninitialized with a1a2a3a4. This function
+  * checks if those areas are uninitialized, and if they are, it'll attempt to
+  * reload the card 3 times. Usually it fixes by the second.
+  */
+ static void sbz_dsp_startup_check(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 	unsigned int dsp_data_check[4];
+ 	unsigned int cur_address = 0x390;
+ 	unsigned int i;
+ 	unsigned int failure = 0;
+ 	unsigned int reload = 3;
+ 
+ 	if (spec->startup_check_entered)
+ 		return;
+ 
+ 	spec->startup_check_entered = true;
+ 
+ 	for (i = 0; i < 4; i++) {
+ 		chipio_read(codec, cur_address, &dsp_data_check[i]);
+ 		cur_address += 0x4;
+ 	}
+ 	for (i = 0; i < 4; i++) {
+ 		if (dsp_data_check[i] == 0xa1a2a3a4)
+ 			failure = 1;
+ 	}
+ 
+ 	codec_dbg(codec, "Startup Check: %d ", failure);
+ 	if (failure)
+ 		codec_info(codec, "DSP not initialized properly. Attempting to fix.");
+ 	/*
+ 	 * While the failure condition is true, and we haven't reached our
+ 	 * three reload limit, continue trying to reload the driver and
+ 	 * fix the issue.
+ 	 */
+ 	while (failure && (reload != 0)) {
+ 		codec_info(codec, "Reloading... Tries left: %d", reload);
+ 		sbz_exit_chip(codec);
+ 		spec->dsp_state = DSP_DOWNLOAD_INIT;
+ 		codec->patch_ops.init(codec);
+ 		failure = 0;
+ 		for (i = 0; i < 4; i++) {
+ 			chipio_read(codec, cur_address, &dsp_data_check[i]);
+ 			cur_address += 0x4;
+ 		}
+ 		for (i = 0; i < 4; i++) {
+ 			if (dsp_data_check[i] == 0xa1a2a3a4)
+ 				failure = 1;
+ 		}
+ 		reload--;
+ 	}
+ 
+ 	if (!failure && reload < 3)
+ 		codec_info(codec, "DSP fixed.");
+ 
+ 	if (!failure)
+ 		return;
+ 
+ 	codec_info(codec, "DSP failed to initialize properly. Either try a full shutdown or a suspend to clear the internal memory.");
+ }
+ 
+ /*
+  * This is for the extra volume verbs 0x797 (left) and 0x798 (right). These add
+  * extra precision for decibel values. If you had the dB value in floating point
+  * you would take the value after the decimal point, multiply by 64, and divide
+  * by 2. So for 8.59, it's (59 * 64) / 100. Useful if someone wanted to
+  * implement fixed point or floating point dB volumes. For now, I'll set them
+  * to 0 just incase a value has lingered from a boot into Windows.
+  */
+ static void ca0132_alt_vol_setup(struct hda_codec *codec)
+ {
+ 	snd_hda_codec_write(codec, 0x02, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x02, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x03, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x03, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x04, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x04, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x07, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x07, 0, 0x798, 0x00);
+ }
+ 
+ /*
+  * Extra commands that don't really fit anywhere else.
+  */
+ static void sbz_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	writel(0x00820680, spec->mem_base + 0x01C);
+ 	writel(0x00820680, spec->mem_base + 0x01C);
+ 
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfc);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfd);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfe);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xff);
+ 
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x44);
+ }
+ 
+ /*
+  * Extra commands that don't really fit anywhere else.
+  */
+ static void r3di_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x1E);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x1C);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x5B);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x20);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x19);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x00);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x40);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x04);
+ }
+ 
+ 
+ /*
+  * These are sent before the DSP is downloaded. Not sure
+  * what they do, or if they're necessary. Could possibly
+  * be removed. Figure they're better to leave in.
+  */
+ static void sbz_region2_startup(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	writel(0x00000000, spec->mem_base + 0x400);
+ 	writel(0x00000000, spec->mem_base + 0x408);
+ 	writel(0x00000000, spec->mem_base + 0x40C);
+ 	writel(0x00880680, spec->mem_base + 0x01C);
+ 	writel(0x00000083, spec->mem_base + 0xC0C);
+ 	writel(0x00000030, spec->mem_base + 0xC00);
+ 	writel(0x00000000, spec->mem_base + 0xC04);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x000000C1, spec->mem_base + 0xC08);
+ 	writel(0x000000F1, spec->mem_base + 0xC08);
+ 	writel(0x00000001, spec->mem_base + 0xC08);
+ 	writel(0x000000C7, spec->mem_base + 0xC08);
+ 	writel(0x000000C1, spec->mem_base + 0xC08);
+ 	writel(0x00000080, spec->mem_base + 0xC04);
+ }
+ 
+ /*
+  * Extra init functions for alternative ca0132 codecs. Done
+  * here so they don't clutter up the main ca0132_init function
+  * anymore than they have to.
+  */
+ static void ca0132_alt_init(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	ca0132_alt_vol_setup(codec);
+ 
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		codec_dbg(codec, "SBZ alt_init");
+ 		ca0132_gpio_init(codec);
+ 		sbz_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_sequence_write(codec, spec->sbz_init_verbs);
+ 		break;
+ 	case QUIRK_R3DI:
+ 		codec_dbg(codec, "R3DI alt_init");
+ 		ca0132_gpio_init(codec);
+ 		ca0132_gpio_setup(codec);
+ 		r3di_gpio_dsp_status_set(codec, R3DI_DSP_DOWNLOADING);
+ 		r3di_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0, 0x6FF, 0xC4);
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 7e6ed62ebedb (ALSA: hda/ca0132: Add dsp setup + gpio functions for r3di)
  static int ca0132_init(struct hda_codec *codec)
  {
  	struct ca0132_spec *spec = codec->spec;
@@@ -4726,15 -5583,35 +5316,35 @@@
  	snd_hda_power_up_pm(codec);
  
  	ca0132_init_unsol(codec);
 +
  	ca0132_init_params(codec);
  	ca0132_init_flags(codec);
+ 
  	snd_hda_sequence_write(codec, spec->base_init_verbs);
 -
 -	if (spec->quirk != QUIRK_NONE)
 -		ca0132_alt_init(codec);
 -
  	ca0132_download_dsp(codec);
+ 
  	ca0132_refresh_widget_caps(codec);
++<<<<<<< HEAD
 +	ca0132_setup_defaults(codec);
 +	ca0132_init_analog_mic2(codec);
 +	ca0132_init_dmic(codec);
++=======
+ 
+ 	if (spec->quirk == QUIRK_SBZ)
+ 		writew(0x0107, spec->mem_base + 0x320);
+ 
+ 	switch (spec->quirk) {
+ 	case QUIRK_R3DI:
+ 		r3di_setup_defaults(codec);
+ 		break;
+ 	case QUIRK_NONE:
+ 	case QUIRK_ALIENWARE:
+ 		ca0132_setup_defaults(codec);
+ 		ca0132_init_analog_mic2(codec);
+ 		ca0132_init_dmic(codec);
+ 		break;
+ 	}
++>>>>>>> 7e6ed62ebedb (ALSA: hda/ca0132: Add dsp setup + gpio functions for r3di)
  
  	for (i = 0; i < spec->num_outputs; i++)
  		init_output(codec, spec->out_pins[i], spec->dacs[0]);
* Unmerged path sound/pci/hda/patch_ca0132.c
