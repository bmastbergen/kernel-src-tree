scsi: megaraid_sas: NULL check before some freeing functions is not needed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: NULL check before some freeing functions is not needed (Tomas Henzl) [1660289]
Rebuild_FUZZ: 95.77%
commit-author Thomas Meyer <thomas@m3y3r.de>
commit 19c0507252c977ba8b3d2e2fe99afd2c176a993b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/19c05072.failed

NULL check before some freeing functions is not needed.

	Signed-off-by: Thomas Meyer <thomas@m3y3r.de>
	Acked-by: Sumit Saxena <sumit.saxena@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 19c0507252c977ba8b3d2e2fe99afd2c176a993b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_mbox.c
#	drivers/scsi/megaraid/megaraid_mm.c
diff --cc drivers/scsi/megaraid/megaraid_mbox.c
index 3316d8031e82,7f9ba88d1c2d..000000000000
--- a/drivers/scsi/megaraid/megaraid_mbox.c
+++ b/drivers/scsi/megaraid/megaraid_mbox.c
@@@ -1277,29 -1240,26 +1277,41 @@@ megaraid_mbox_teardown_dma_pools(adapte
  
  	sg_pci_blk = raid_dev->sg_pool;
  	for (i = 0; i < MBOX_MAX_SCSI_CMDS && sg_pci_blk[i].vaddr; i++) {
 -		dma_pool_free(raid_dev->sg_pool_handle, sg_pci_blk[i].vaddr,
 +		pci_pool_free(raid_dev->sg_pool_handle, sg_pci_blk[i].vaddr,
  			sg_pci_blk[i].dma_addr);
  	}
++<<<<<<< HEAD
 +	if (raid_dev->sg_pool_handle)
 +		pci_pool_destroy(raid_dev->sg_pool_handle);
++=======
+ 	dma_pool_destroy(raid_dev->sg_pool_handle);
++>>>>>>> 19c0507252c9 (scsi: megaraid_sas: NULL check before some freeing functions is not needed)
  
  
  	epthru_pci_blk = raid_dev->epthru_pool;
  	for (i = 0; i < MBOX_MAX_SCSI_CMDS && epthru_pci_blk[i].vaddr; i++) {
 -		dma_pool_free(raid_dev->epthru_pool_handle,
 +		pci_pool_free(raid_dev->epthru_pool_handle,
  			epthru_pci_blk[i].vaddr, epthru_pci_blk[i].dma_addr);
  	}
++<<<<<<< HEAD
 +	if (raid_dev->epthru_pool_handle)
 +		pci_pool_destroy(raid_dev->epthru_pool_handle);
++=======
+ 	dma_pool_destroy(raid_dev->epthru_pool_handle);
++>>>>>>> 19c0507252c9 (scsi: megaraid_sas: NULL check before some freeing functions is not needed)
  
  
  	mbox_pci_blk = raid_dev->mbox_pool;
  	for (i = 0; i < MBOX_MAX_SCSI_CMDS && mbox_pci_blk[i].vaddr; i++) {
 -		dma_pool_free(raid_dev->mbox_pool_handle,
 +		pci_pool_free(raid_dev->mbox_pool_handle,
  			mbox_pci_blk[i].vaddr, mbox_pci_blk[i].dma_addr);
  	}
++<<<<<<< HEAD
 +	if (raid_dev->mbox_pool_handle)
 +		pci_pool_destroy(raid_dev->mbox_pool_handle);
++=======
+ 	dma_pool_destroy(raid_dev->mbox_pool_handle);
++>>>>>>> 19c0507252c9 (scsi: megaraid_sas: NULL check before some freeing functions is not needed)
  
  	return;
  }
diff --cc drivers/scsi/megaraid/megaraid_mm.c
index 25506c777381,3ce837e4b24c..000000000000
--- a/drivers/scsi/megaraid/megaraid_mm.c
+++ b/drivers/scsi/megaraid/megaraid_mm.c
@@@ -1010,8 -1017,7 +1010,12 @@@ memalloc_error
  	kfree(adapter->kioc_list);
  	kfree(adapter->mbox_list);
  
++<<<<<<< HEAD
 +	if (adapter->pthru_dma_pool)
 +		pci_pool_destroy(adapter->pthru_dma_pool);
++=======
+ 	dma_pool_destroy(adapter->pthru_dma_pool);
++>>>>>>> 19c0507252c9 (scsi: megaraid_sas: NULL check before some freeing functions is not needed)
  
  	kfree(adapter);
  
* Unmerged path drivers/scsi/megaraid/megaraid_mbox.c
* Unmerged path drivers/scsi/megaraid/megaraid_mm.c
diff --git a/drivers/scsi/megaraid/megaraid_sas_fusion.c b/drivers/scsi/megaraid/megaraid_sas_fusion.c
index 12cd8908d521..7ec706fe298c 100644
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@ -810,10 +810,8 @@ megasas_free_rdpq_fusion(struct megasas_instance *instance) {
 
 	}
 
-	if (fusion->reply_frames_desc_pool)
-		dma_pool_destroy(fusion->reply_frames_desc_pool);
-	if (fusion->reply_frames_desc_pool_align)
-		dma_pool_destroy(fusion->reply_frames_desc_pool_align);
+	dma_pool_destroy(fusion->reply_frames_desc_pool);
+	dma_pool_destroy(fusion->reply_frames_desc_pool_align);
 
 	if (fusion->rdpq_virt)
 		dma_free_coherent(&instance->pdev->dev,
@@ -833,8 +831,7 @@ megasas_free_reply_fusion(struct megasas_instance *instance) {
 			fusion->reply_frames_desc[0],
 			fusion->reply_frames_desc_phys[0]);
 
-	if (fusion->reply_frames_desc_pool)
-		dma_pool_destroy(fusion->reply_frames_desc_pool);
+	dma_pool_destroy(fusion->reply_frames_desc_pool);
 
 }
 
@@ -1626,8 +1623,7 @@ static inline void megasas_free_ioc_init_cmd(struct megasas_instance *instance)
 				  fusion->ioc_init_cmd->frame,
 				  fusion->ioc_init_cmd->frame_phys_addr);
 
-	if (fusion->ioc_init_cmd)
-		kfree(fusion->ioc_init_cmd);
+	kfree(fusion->ioc_init_cmd);
 }
 
 /**
