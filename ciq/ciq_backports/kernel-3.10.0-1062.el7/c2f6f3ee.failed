r8169: Get and enable optional ether_clk clock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Hans de Goede <hdegoede@redhat.com>
commit c2f6f3ee7f22521fabc3295f51149bc3f4dd9202
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/c2f6f3ee.failed

On some boards a platform clock is used as clock for the r8169 chip,
this commit adds support for getting and enabling this clock (assuming
it has an "ether_clk" alias set on it).

This is related to commit d31fd43c0f9a ("clk: x86: Do not gate clocks
enabled by the firmware") which is a previous attempt to fix this for some
x86 boards, but this causes all Cherry Trail SoC using boards to not reach
there lowest power states when suspending.

This commit (together with an atom-pmc-clk driver commit adding the alias)
fixes things properly by making the r8169 get the clock and enable it when
it needs it.

Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=193891#c102
Buglink: https://bugzilla.kernel.org/show_bug.cgi?id=196861
	Cc: Johannes Stezenbach <js@sig21.net>
	Cc: Carlo Caione <carlo@endlessm.com>
	Reported-by: Johannes Stezenbach <js@sig21.net>
	Acked-by: Stephen Boyd <sboyd@kernel.org>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c2f6f3ee7f22521fabc3295f51149bc3f4dd9202)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/realtek/r8169.c
diff --cc drivers/net/ethernet/realtek/r8169.c
index 1908db1a470d,bb529ff2ca81..000000000000
--- a/drivers/net/ethernet/realtek/r8169.c
+++ b/drivers/net/ethernet/realtek/r8169.c
@@@ -13,9 -13,10 +13,10 @@@
  #include <linux/pci.h>
  #include <linux/netdevice.h>
  #include <linux/etherdevice.h>
+ #include <linux/clk.h>
  #include <linux/delay.h>
  #include <linux/ethtool.h>
 -#include <linux/phy.h>
 +#include <linux/mii.h>
  #include <linux/if_vlan.h>
  #include <linux/crc32.h>
  #include <linux/in.h>
@@@ -7409,6 -7241,34 +7411,37 @@@ static bool rtl_chip_supports_csum_v2(s
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int rtl_jumbo_max(struct rtl8169_private *tp)
+ {
+ 	/* Non-GBit versions don't support jumbo frames */
+ 	if (!tp->supports_gmii)
+ 		return JUMBO_1K;
+ 
+ 	switch (tp->mac_version) {
+ 	/* RTL8169 */
+ 	case RTL_GIGA_MAC_VER_01 ... RTL_GIGA_MAC_VER_06:
+ 		return JUMBO_7K;
+ 	/* RTL8168b */
+ 	case RTL_GIGA_MAC_VER_11:
+ 	case RTL_GIGA_MAC_VER_12:
+ 	case RTL_GIGA_MAC_VER_17:
+ 		return JUMBO_4K;
+ 	/* RTL8168c */
+ 	case RTL_GIGA_MAC_VER_18 ... RTL_GIGA_MAC_VER_24:
+ 		return JUMBO_6K;
+ 	default:
+ 		return JUMBO_9K;
+ 	}
+ }
+ 
+ static void rtl_disable_clk(void *data)
+ {
+ 	clk_disable_unprepare(data);
+ }
+ 
++>>>>>>> c2f6f3ee7f22 (r8169: Get and enable optional ether_clk clock)
  static int rtl_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
  {
  	const struct rtl_cfg_info *cfg = rtl_cfg_infos + ent->driver_data;
@@@ -7428,15 -7287,34 +7461,41 @@@
  	tp->dev = dev;
  	tp->pci_dev = pdev;
  	tp->msg_enable = netif_msg_init(debug.msg_enable, R8169_MSG_DEFAULT);
 -	tp->supports_gmii = cfg->has_gmii;
 +
 +	mii = &tp->mii;
 +	mii->dev = dev;
 +	mii->mdio_read = rtl_mdio_read;
 +	mii->mdio_write = rtl_mdio_write;
 +	mii->phy_id_mask = 0x1f;
 +	mii->reg_num_mask = 0x1f;
 +	mii->supports_gmii = cfg->has_gmii;
  
+ 	/* Get the *optional* external "ether_clk" used on some boards */
+ 	tp->clk = devm_clk_get(&pdev->dev, "ether_clk");
+ 	if (IS_ERR(tp->clk)) {
+ 		rc = PTR_ERR(tp->clk);
+ 		if (rc == -ENOENT) {
+ 			/* clk-core allows NULL (for suspend / resume) */
+ 			tp->clk = NULL;
+ 		} else if (rc == -EPROBE_DEFER) {
+ 			return rc;
+ 		} else {
+ 			dev_err(&pdev->dev, "failed to get clk: %d\n", rc);
+ 			return rc;
+ 		}
+ 	} else {
+ 		rc = clk_prepare_enable(tp->clk);
+ 		if (rc) {
+ 			dev_err(&pdev->dev, "failed to enable clk: %d\n", rc);
+ 			return rc;
+ 		}
+ 
+ 		rc = devm_add_action_or_reset(&pdev->dev, rtl_disable_clk,
+ 					      tp->clk);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 
  	/* enable device (incl. PCI PM wakeup and hotplug setup) */
  	rc = pcim_enable_device(pdev);
  	if (rc < 0) {
* Unmerged path drivers/net/ethernet/realtek/r8169.c
