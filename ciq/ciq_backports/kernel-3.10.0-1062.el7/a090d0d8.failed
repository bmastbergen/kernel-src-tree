RDMA/mlx5: Extend packet reformat verbs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Mark Bloch <markb@mellanox.com>
commit a090d0d859ff88dd4c34614d01cee9b0603f4313
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/a090d0d8.failed

We expose new actions:

L2_TO_L2_TUNNEL - A generic encap from L2 to L2, the data passed should
		  be the encapsulating headers.

L3_TUNNEL_TO_L2 - Will do decap where the inner packet starts from L3,
		  the data should be mac or mac + vlan (14 or 18 bytes).

L2_TO_L3_TUNNEL - Will do encap where is L2 of the original packet will
		  not be included, the data should be the encapsulating
		  header.

	Signed-off-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit a090d0d859ff88dd4c34614d01cee9b0603f4313)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/flow.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
#	include/uapi/rdma/mlx5_user_ioctl_cmds.h
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index 71b1991d86b3,eb6a0ca0247f..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -137,6 -151,12 +137,15 @@@ struct mlx5_ib_pd 
  	u32			pdn;
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	MLX5_IB_FLOW_ACTION_MODIFY_HEADER,
+ 	MLX5_IB_FLOW_ACTION_PACKET_REFORMAT,
+ 	MLX5_IB_FLOW_ACTION_DECAP,
+ };
+ 
++>>>>>>> a090d0d859ff (RDMA/mlx5: Extend packet reformat verbs)
  #define MLX5_IB_FLOW_MCAST_PRIO		(MLX5_BY_PASS_NUM_PRIOS - 1)
  #define MLX5_IB_FLOW_LAST_PRIO		(MLX5_BY_PASS_NUM_REGULAR_PRIOS - 1)
  #if (MLX5_IB_FLOW_LAST_PRIO <= 0)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
index 6b38b6fbd030,4ef62c0e8452..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
@@@ -29,24 -29,27 +29,40 @@@
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
 +#ifndef __MLX5_VXLAN_H__
 +#define __MLX5_VXLAN_H__
  
 -#ifndef MLX5_USER_IOCTL_VERBS_H
 -#define MLX5_USER_IOCTL_VERBS_H
 +#include <linux/mlx5/driver.h>
 +#include "en.h"
  
 -#include <linux/types.h>
 +struct mlx5_vxlan_port;
  
 -enum mlx5_ib_uapi_flow_action_flags {
 -	MLX5_IB_UAPI_FLOW_ACTION_FLAGS_REQUIRE_METADATA	= 1 << 0,
 -};
 +static inline bool mlx5e_vxlan_allowed(struct mlx5_core_dev *mdev)
 +{
 +	return (MLX5_CAP_ETH(mdev, tunnel_stateless_vxlan) &&
 +		mlx5_core_is_pf(mdev));
 +}
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
 +void mlx5e_vxlan_init(struct mlx5e_priv *priv);
 +void mlx5e_vxlan_cleanup(struct mlx5e_priv *priv);
 +void mlx5e_vxlan_add_port(struct mlx5e_priv *priv, u16 port);
 +void mlx5e_vxlan_del_port(struct mlx5e_priv *priv, u16 port);
 +struct mlx5_vxlan_port *mlx5e_vxlan_lookup_port(struct mlx5e_priv *priv, u16 port);
++=======
+ enum mlx5_ib_uapi_flow_table_type {
+ 	MLX5_IB_UAPI_FLOW_TABLE_TYPE_NIC_RX     = 0x0,
+ 	MLX5_IB_UAPI_FLOW_TABLE_TYPE_NIC_TX	= 0x1,
+ };
+ 
+ enum mlx5_ib_uapi_flow_action_packet_reformat_type {
+ 	MLX5_IB_UAPI_FLOW_ACTION_PACKET_REFORMAT_TYPE_L2_TUNNEL_TO_L2 = 0x0,
+ 	MLX5_IB_UAPI_FLOW_ACTION_PACKET_REFORMAT_TYPE_L2_TO_L2_TUNNEL = 0x1,
+ 	MLX5_IB_UAPI_FLOW_ACTION_PACKET_REFORMAT_TYPE_L3_TUNNEL_TO_L2 = 0x2,
+ 	MLX5_IB_UAPI_FLOW_ACTION_PACKET_REFORMAT_TYPE_L2_TO_L3_TUNNEL = 0x3,
+ };
+ 
+ #endif
++>>>>>>> a090d0d859ff (RDMA/mlx5: Extend packet reformat verbs):include/uapi/rdma/mlx5_user_ioctl_verbs.h
  
 +#endif /* __MLX5_VXLAN_H__ */
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path include/uapi/rdma/mlx5_user_ioctl_cmds.h
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
* Unmerged path include/uapi/rdma/mlx5_user_ioctl_cmds.h
