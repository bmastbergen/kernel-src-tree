xfrm: Fix transport mode skb control buffer usage.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Steffen Klassert <steffen.klassert@secunet.com>
commit 9a3fb9fb84cc30577c1b012a6a3efda944684291
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9a3fb9fb.failed

A recent commit introduced a new struct xfrm_trans_cb
that is used with the sk_buff control buffer. Unfortunately
it placed the structure in front of the control buffer and
overlooked that the IPv4/IPv6 control buffer is still needed
for some layer 4 protocols. As a result the IPv4/IPv6 control
buffer is overwritten with this structure. Fix this by setting
a apropriate header in front of the structure.

Fixes acf568ee859f ("xfrm: Reinject transport-mode packets ...")
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit 9a3fb9fb84cc30577c1b012a6a3efda944684291)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/xfrm/xfrm_input.c
diff --cc net/xfrm/xfrm_input.c
index f7368e09f8ad,81788105c164..000000000000
--- a/net/xfrm/xfrm_input.c
+++ b/net/xfrm/xfrm_input.c
@@@ -16,6 -20,23 +16,26 @@@
  #include <net/ip_tunnels.h>
  #include <net/ip6_tunnel.h>
  
++<<<<<<< HEAD
++=======
+ struct xfrm_trans_tasklet {
+ 	struct tasklet_struct tasklet;
+ 	struct sk_buff_head queue;
+ };
+ 
+ struct xfrm_trans_cb {
+ 	union {
+ 		struct inet_skb_parm	h4;
+ #if IS_ENABLED(CONFIG_IPV6)
+ 		struct inet6_skb_parm	h6;
+ #endif
+ 	} header;
+ 	int (*finish)(struct net *net, struct sock *sk, struct sk_buff *skb);
+ };
+ 
+ #define XFRM_TRANS_SKB_CB(__skb) ((struct xfrm_trans_cb *)&((__skb)->cb[0]))
+ 
++>>>>>>> 9a3fb9fb84cc (xfrm: Fix transport mode skb control buffer usage.)
  static struct kmem_cache *secpath_cachep __read_mostly;
  
  static DEFINE_SPINLOCK(xfrm_input_afinfo_lock);
* Unmerged path net/xfrm/xfrm_input.c
