net/rds: Simplify ib_post_(send|recv|srq_recv)() calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [net] rds: Simplify ib_post_(send|recv|srq_recv)() calls (Kamal Heib) [1655920]
Rebuild_FUZZ: 96.15%
commit-author Bart Van Assche <bart.vanassche@wdc.com>
commit f112d53b435692331a50a3780e3ad365b66b1a69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f112d53b.failed

Instead of declaring and passing a dummy 'bad_wr' pointer, pass NULL
as third argument to ib_post_(send|recv|srq_recv)().

	Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
	Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit f112d53b435692331a50a3780e3ad365b66b1a69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/rds/ib_recv.c
diff --cc net/rds/ib_recv.c
index 630c2d4f9a42,4c5a937304b2..000000000000
--- a/net/rds/ib_recv.c
+++ b/net/rds/ib_recv.c
@@@ -377,10 -383,9 +377,9 @@@ void rds_ib_recv_refill(struct rds_conn
  {
  	struct rds_ib_connection *ic = conn->c_transport_data;
  	struct rds_ib_recv_work *recv;
- 	struct ib_recv_wr *failed_wr;
  	unsigned int posted = 0;
  	int ret = 0;
 -	bool can_wait = !!(gfp & __GFP_DIRECT_RECLAIM);
 +	bool can_wait = !!(gfp & __GFP_WAIT);
  	u32 pos;
  
  	/* the goal here is to just make sure that someone, somewhere
@@@ -410,8 -413,10 +409,15 @@@
  			 recv->r_ibinc, sg_page(&recv->r_frag->f_sg),
  			 (long) ib_sg_dma_address(
  				ic->i_cm_id->device,
++<<<<<<< HEAD
 +				&recv->r_frag->f_sg),
 +			ret);
++=======
+ 				&recv->r_frag->f_sg));
+ 
+ 		/* XXX when can this fail? */
+ 		ret = ib_post_recv(ic->i_cm_id->qp, &recv->r_wr, NULL);
++>>>>>>> f112d53b4356 (net/rds: Simplify ib_post_(send|recv|srq_recv)() calls)
  		if (ret) {
  			rds_ib_conn_error(conn, "recv post on "
  			       "%pI4 returned %d, disconnecting and "
diff --git a/net/rds/ib_frmr.c b/net/rds/ib_frmr.c
index 59b6d3204e3a..0f1a091ae519 100644
--- a/net/rds/ib_frmr.c
+++ b/net/rds/ib_frmr.c
@@ -102,7 +102,6 @@ static void rds_ib_free_frmr(struct rds_ib_mr *ibmr, bool drop)
 static int rds_ib_post_reg_frmr(struct rds_ib_mr *ibmr)
 {
 	struct rds_ib_frmr *frmr = &ibmr->u.frmr;
-	struct ib_send_wr *failed_wr;
 	struct ib_reg_wr reg_wr;
 	int ret;
 
@@ -134,8 +133,7 @@ static int rds_ib_post_reg_frmr(struct rds_ib_mr *ibmr)
 			IB_ACCESS_REMOTE_WRITE;
 	reg_wr.wr.send_flags = IB_SEND_SIGNALED;
 
-	failed_wr = &reg_wr.wr;
-	ret = ib_post_send(ibmr->ic->i_cm_id->qp, &reg_wr.wr, &failed_wr);
+	ret = ib_post_send(ibmr->ic->i_cm_id->qp, &reg_wr.wr, NULL);
 	if (unlikely(ret)) {
 		/* Failure here can be because of -ENOMEM as well */
 		frmr->fr_state = FRMR_IS_STALE;
@@ -228,7 +226,7 @@ out_unmap:
 
 static int rds_ib_post_inv(struct rds_ib_mr *ibmr)
 {
-	struct ib_send_wr *s_wr, *failed_wr;
+	struct ib_send_wr *s_wr;
 	struct rds_ib_frmr *frmr = &ibmr->u.frmr;
 	struct rdma_cm_id *i_cm_id = ibmr->ic->i_cm_id;
 	int ret = -EINVAL;
@@ -253,8 +251,7 @@ static int rds_ib_post_inv(struct rds_ib_mr *ibmr)
 	s_wr->ex.invalidate_rkey = frmr->mr->rkey;
 	s_wr->send_flags = IB_SEND_SIGNALED;
 
-	failed_wr = s_wr;
-	ret = ib_post_send(i_cm_id->qp, s_wr, &failed_wr);
+	ret = ib_post_send(i_cm_id->qp, s_wr, NULL);
 	if (unlikely(ret)) {
 		frmr->fr_state = FRMR_IS_STALE;
 		frmr->fr_inv = false;
* Unmerged path net/rds/ib_recv.c
