RDMA/core: Remove unused ib cache functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit ea8c2d8f6014b74921dd5a9654a623a725d79608
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ea8c2d8f.failed

Now that all users have been converted to use the version of these APIs
that returns a gid_attr pointer we can delete the old entry points.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit ea8c2d8f6014b74921dd5a9654a623a725d79608)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cache.c
diff --cc drivers/infiniband/core/cache.c
index 36d3478f5cc1,357a5cb328c7..000000000000
--- a/drivers/infiniband/core/cache.c
+++ b/drivers/infiniband/core/cache.c
@@@ -421,29 -643,6 +421,32 @@@ int ib_cache_gid_del_all_netdev_gids(st
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int __ib_cache_gid_get(struct ib_device *ib_dev, u8 port, int index,
 +			      union ib_gid *gid, struct ib_gid_attr *attr)
 +{
 +	struct ib_gid_table *table;
 +
 +	table = ib_dev->cache.ports[port - rdma_start_port(ib_dev)].gid;
 +
 +	if (index < 0 || index >= table->sz)
 +		return -EINVAL;
 +
 +	if (table->data_vec[index].props & GID_TABLE_ENTRY_INVALID)
 +		return -EINVAL;
 +
 +	memcpy(gid, &table->data_vec[index].gid, sizeof(*gid));
 +	if (attr) {
 +		memcpy(attr, &table->data_vec[index].attr, sizeof(*attr));
 +		if (attr->ndev)
 +			dev_hold(attr->ndev);
 +	}
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> ea8c2d8f6014 (RDMA/core: Remove unused ib cache functions)
  /**
   * rdma_find_gid_by_port - Returns the GID entry attributes when it finds
   * a valid GID entry for given search parameters. It searches for the specified
@@@ -781,28 -949,6 +784,31 @@@ static int gid_table_setup_one(struct i
  	return err;
  }
  
++<<<<<<< HEAD
 +int ib_get_cached_gid(struct ib_device *device,
 +		      u8                port_num,
 +		      int               index,
 +		      union ib_gid     *gid,
 +		      struct ib_gid_attr *gid_attr)
 +{
 +	int res;
 +	unsigned long flags;
 +	struct ib_gid_table *table;
 +
 +	if (!rdma_is_port_valid(device, port_num))
 +		return -EINVAL;
 +
 +	table = device->cache.ports[port_num - rdma_start_port(device)].gid;
 +	read_lock_irqsave(&table->rwlock, flags);
 +	res = __ib_cache_gid_get(device, port_num, index, gid, gid_attr);
 +	read_unlock_irqrestore(&table->rwlock, flags);
 +
 +	return res;
 +}
 +EXPORT_SYMBOL(ib_get_cached_gid);
 +
++=======
++>>>>>>> ea8c2d8f6014 (RDMA/core: Remove unused ib cache functions)
  /**
   * rdma_query_gid - Read the GID content from the GID software cache
   * @device:		Device to query the GID
@@@ -910,32 -1056,6 +916,35 @@@ int ib_find_cached_gid(struct ib_devic
  }
  EXPORT_SYMBOL(ib_find_cached_gid);
  
++<<<<<<< HEAD
 +int ib_find_gid_by_filter(struct ib_device *device,
 +			  const union ib_gid *gid,
 +			  u8 port_num,
 +			  bool (*filter)(const union ib_gid *gid,
 +					 const struct ib_gid_attr *,
 +					 void *),
 +			  void *context, u16 *index)
 +{
 +	const struct ib_gid_attr *res;
 +
 +	/* Only RoCE GID table supports filter function */
 +	if (!rdma_cap_roce_gid_table(device, port_num) && filter)
 +		return -EPROTONOSUPPORT;
 +
 +	res = rdma_find_gid_by_filter(device, gid, port_num, filter,
 +				      context);
 +	if (IS_ERR(res))
 +		return PTR_ERR(res);
 +
 +	if (index)
 +		*index = res->index;
 +
 +	rdma_put_gid_attr(res);
 +	return 0;
 +}
 +
++=======
++>>>>>>> ea8c2d8f6014 (RDMA/core: Remove unused ib cache functions)
  int ib_get_cached_pkey(struct ib_device *device,
  		       u8                port_num,
  		       int               index,
* Unmerged path drivers/infiniband/core/cache.c
diff --git a/include/rdma/ib_cache.h b/include/rdma/ib_cache.h
index 8ee33847c513..8e195a4cb239 100644
--- a/include/rdma/ib_cache.h
+++ b/include/rdma/ib_cache.h
@@ -37,56 +37,17 @@
 
 #include <rdma/ib_verbs.h>
 
-/**
- * ib_get_cached_gid - Returns a cached GID table entry
- * @device: The device to query.
- * @port_num: The port number of the device to query.
- * @index: The index into the cached GID table to query.
- * @gid: The GID value found at the specified index.
- * @attr: The GID attribute found at the specified index (only in RoCE).
- *   NULL means ignore (output parameter).
- *
- * ib_get_cached_gid() fetches the specified GID table entry stored in
- * the local software cache.
- */
-int ib_get_cached_gid(struct ib_device    *device,
-		      u8                   port_num,
-		      int                  index,
-		      union ib_gid        *gid,
-		      struct ib_gid_attr  *attr);
 int rdma_query_gid(struct ib_device *device, u8 port_num, int index,
 		   union ib_gid *gid);
-
-int ib_find_cached_gid(struct ib_device *device,
-		       const union ib_gid *gid,
-		       enum ib_gid_type gid_type,
-		       struct net_device *ndev,
-		       u8               *port_num,
-		       u16              *index);
 const struct ib_gid_attr *rdma_find_gid(struct ib_device *device,
 					const union ib_gid *gid,
 					enum ib_gid_type gid_type,
 					struct net_device *ndev);
-
-int ib_find_cached_gid_by_port(struct ib_device *device,
-			       const union ib_gid *gid,
-			       enum ib_gid_type gid_type,
-			       u8               port_num,
-			       struct net_device *ndev,
-			       u16              *index);
 const struct ib_gid_attr *rdma_find_gid_by_port(struct ib_device *ib_dev,
 						const union ib_gid *gid,
 						enum ib_gid_type gid_type,
 						u8 port,
 						struct net_device *ndev);
-
-int ib_find_gid_by_filter(struct ib_device *device,
-			  const union ib_gid *gid,
-			  u8 port_num,
-			  bool (*filter)(const union ib_gid *gid,
-					 const struct ib_gid_attr *,
-					 void *),
-			  void *context, u16 *index);
 const struct ib_gid_attr *rdma_find_gid_by_filter(
 	struct ib_device *device, const union ib_gid *gid, u8 port_num,
 	bool (*filter)(const union ib_gid *gid, const struct ib_gid_attr *,
