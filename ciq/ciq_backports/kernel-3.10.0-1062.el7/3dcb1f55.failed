efi: Do variable name validation tests in utf8

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Peter Jones <pjones@redhat.com>
commit 3dcb1f55dfc7631695e69df4a0d589ce5274bd07
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/3dcb1f55.failed

Actually translate from ucs2 to utf8 before doing the test, and then
test against our other utf8 data, instead of fudging it.

	Signed-off-by: Peter Jones <pjones@redhat.com>
	Acked-by: Matthew Garrett <mjg59@coreos.com>
	Tested-by: Lee, Chun-Yi <jlee@suse.com>
	Signed-off-by: Matt Fleming <matt@codeblueprint.co.uk>
(cherry picked from commit 3dcb1f55dfc7631695e69df4a0d589ce5274bd07)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/efi/vars.c
diff --cc drivers/firmware/efi/vars.c
index caf5f9efc1c2,5c5fde3e6c37..000000000000
--- a/drivers/firmware/efi/vars.c
+++ b/drivers/firmware/efi/vars.c
@@@ -189,10 -189,19 +189,26 @@@ static const struct variable_validate v
  };
  
  bool
++<<<<<<< HEAD
 +efivar_validate(struct efi_variable *var, u8 *data, unsigned long len)
 +{
 +	int i;
 +	u16 *unicode_name = var->VariableName;
++=======
+ efivar_validate(efi_char16_t *var_name, u8 *data, unsigned long data_size)
+ {
+ 	int i;
+ 	unsigned long utf8_size;
+ 	u8 *utf8_name;
+ 
+ 	utf8_size = ucs2_utf8size(var_name);
+ 	utf8_name = kmalloc(utf8_size + 1, GFP_KERNEL);
+ 	if (!utf8_name)
+ 		return false;
+ 
+ 	ucs2_as_utf8(utf8_name, var_name, utf8_size);
+ 	utf8_name[utf8_size] = '\0';
++>>>>>>> 3dcb1f55dfc7 (efi: Do variable name validation tests in utf8)
  
  	for (i = 0; variable_validate[i].validate != NULL; i++) {
  		const char *name = variable_validate[i].name;
@@@ -200,25 -209,25 +216,37 @@@
  
  		for (match = 0; ; match++) {
  			char c = name[match];
- 			u16 u = unicode_name[match];
- 
- 			/* All special variables are plain ascii */
- 			if (u > 127)
- 				return true;
+ 			char u = utf8_name[match];
  
  			/* Wildcard in the matching name means we've matched */
++<<<<<<< HEAD
 +			if (c == '*')
 +				return variable_validate[i].validate(var,
 +							     match, data, len);
++=======
+ 			if (c == '*') {
+ 				kfree(utf8_name);
+ 				return variable_validate[i].validate(var_name,
+ 							match, data, data_size);
+ 			}
++>>>>>>> 3dcb1f55dfc7 (efi: Do variable name validation tests in utf8)
  
  			/* Case sensitive match */
  			if (c != u)
  				break;
  
  			/* Reached the end of the string while matching */
++<<<<<<< HEAD
 +			if (!c)
 +				return variable_validate[i].validate(var,
 +							     match, data, len);
++=======
+ 			if (!c) {
+ 				kfree(utf8_name);
+ 				return variable_validate[i].validate(var_name,
+ 							match, data, data_size);
+ 			}
++>>>>>>> 3dcb1f55dfc7 (efi: Do variable name validation tests in utf8)
  		}
  	}
  
* Unmerged path drivers/firmware/efi/vars.c
