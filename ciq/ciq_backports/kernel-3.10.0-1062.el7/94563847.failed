net/mlx5e: Add new counter for aRFS rule insertion failures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add new counter for aRFS rule insertion failures (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 96.49%
commit-author Eran Ben Elisha <eranbe@mellanox.com>
commit 94563847a8733c27b2f56ac82bad4c78e074e244
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/94563847.failed

Count aRFS rules insertion failure for ethtool output. In addition, move
the error print into debug prints mechanism, as it could flood the dmesg
and reduce system BW dramatically.

	Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 94563847a8733c27b2f56ac82bad4c78e074e244)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 525df44c9b3c,b7d4896c7c7b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -74,8 -92,13 +74,17 @@@ static const struct counter_desc sw_sta
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_empty) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_busy) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_waive) },
++<<<<<<< HEAD
++=======
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_congst_umr) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_arfs_err) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_events) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_poll) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_arm) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_aff_change) },
++>>>>>>> 94563847a873 (net/mlx5e: Add new counter for aRFS rule insertion failures)
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_eq_rearm) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, link_down_events_phy) },
  };
  
  #define NUM_SW_COUNTERS			ARRAY_SIZE(sw_stats_desc)
@@@ -141,7 -170,18 +150,22 @@@ static void mlx5e_grp_sw_update_stats(s
  		s->rx_cache_empty += rq_stats->cache_empty;
  		s->rx_cache_busy  += rq_stats->cache_busy;
  		s->rx_cache_waive += rq_stats->cache_waive;
++<<<<<<< HEAD
 +		s->ch_eq_rearm += ch_stats->eq_rearm;
++=======
+ 		s->rx_congst_umr  += rq_stats->congst_umr;
+ 		s->rx_arfs_err    += rq_stats->arfs_err;
+ 		s->ch_events      += ch_stats->events;
+ 		s->ch_poll        += ch_stats->poll;
+ 		s->ch_arm         += ch_stats->arm;
+ 		s->ch_aff_change  += ch_stats->aff_change;
+ 		s->ch_eq_rearm    += ch_stats->eq_rearm;
+ 		/* xdp redirect */
+ 		s->tx_xdp_xmit    += xdpsq_red_stats->xmit;
+ 		s->tx_xdp_full    += xdpsq_red_stats->full;
+ 		s->tx_xdp_err     += xdpsq_red_stats->err;
+ 		s->tx_xdp_cqes    += xdpsq_red_stats->cqes;
++>>>>>>> 94563847a873 (net/mlx5e: Add new counter for aRFS rule insertion failures)
  
  		for (j = 0; j < priv->max_opened_tc; j++) {
  			struct mlx5e_sq_stats *sq_stats = &channel_stats->sq[j];
@@@ -1091,6 -1162,8 +1115,11 @@@ static const struct counter_desc rq_sta
  	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, cache_empty) },
  	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, cache_busy) },
  	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, cache_waive) },
++<<<<<<< HEAD
++=======
+ 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, congst_umr) },
+ 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, arfs_err) },
++>>>>>>> 94563847a873 (net/mlx5e: Add new counter for aRFS rule insertion failures)
  };
  
  static const struct counter_desc sq_stats_desc[] = {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 9c603217203a,77f74ce11280..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -92,10 -105,18 +92,19 @@@ struct mlx5e_sw_stats 
  	u64 rx_cache_empty;
  	u64 rx_cache_busy;
  	u64 rx_cache_waive;
++<<<<<<< HEAD
++=======
+ 	u64 rx_congst_umr;
+ 	u64 rx_arfs_err;
+ 	u64 ch_events;
+ 	u64 ch_poll;
+ 	u64 ch_arm;
+ 	u64 ch_aff_change;
++>>>>>>> 94563847a873 (net/mlx5e: Add new counter for aRFS rule insertion failures)
  	u64 ch_eq_rearm;
  
 -#ifdef CONFIG_MLX5_EN_TLS
 -	u64 tx_tls_ooo;
 -	u64 tx_tls_resync_bytes;
 -#endif
 +	/* Special handling counters */
 +	u64 link_down_events_phy;
  };
  
  struct mlx5e_qcounter_stats {
@@@ -182,6 -202,8 +191,11 @@@ struct mlx5e_rq_stats 
  	u64 cache_empty;
  	u64 cache_busy;
  	u64 cache_waive;
++<<<<<<< HEAD
++=======
+ 	u64 congst_umr;
+ 	u64 arfs_err;
++>>>>>>> 94563847a873 (net/mlx5e: Add new counter for aRFS rule insertion failures)
  };
  
  struct mlx5e_sq_stats {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c b/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
index d258bb679271..18488a48ee54 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
@@ -545,8 +545,11 @@ static struct mlx5_flow_handle *arfs_add_rule(struct mlx5e_priv *priv,
 	rule = mlx5_add_flow_rules(ft, spec, &flow_act, &dest, 1);
 	if (IS_ERR(rule)) {
 		err = PTR_ERR(rule);
-		netdev_err(priv->netdev, "%s: add rule(filter id=%d, rq idx=%d) failed, err=%d\n",
-			   __func__, arfs_rule->filter_id, arfs_rule->rxq, err);
+		priv->channel_stats[arfs_rule->rxq].rq.arfs_err++;
+		mlx5e_dbg(HW, priv,
+			  "%s: add rule(filter id=%d, rq idx=%d, ip proto=0x%x) failed,err=%d\n",
+			  __func__, arfs_rule->filter_id, arfs_rule->rxq,
+			  tuple->ip_proto, err);
 	}
 
 out:
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
