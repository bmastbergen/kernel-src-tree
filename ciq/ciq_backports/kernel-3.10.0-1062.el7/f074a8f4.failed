proc: export idle flag via kpageflags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [fs] kernel: proc: export idle flag via kpageflags (Rafael Aquini) [1560020]
Rebuild_FUZZ: 90.24%
commit-author Vladimir Davydov <vdavydov@parallels.com>
commit f074a8f49eb87cde95ac9d040ad5e7ea4f029738
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f074a8f4.failed

As noted by Minchan, a benefit of reading idle flag from /proc/kpageflags
is that one can easily filter dirty and/or unevictable pages while
estimating the size of unused memory.

Note that idle flag read from /proc/kpageflags may be stale in case the
page was accessed via a PTE, because it would be too costly to iterate
over all page mappings on each /proc/kpageflags read to provide an
up-to-date value.  To make sure the flag is up-to-date one has to read
/sys/kernel/mm/page_idle/bitmap first.

	Signed-off-by: Vladimir Davydov <vdavydov@parallels.com>
	Reviewed-by: Andres Lagar-Cavilla <andreslc@google.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Michal Hocko <mhocko@suse.cz>
	Cc: Greg Thelen <gthelen@google.com>
	Cc: Michel Lespinasse <walken@google.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Pavel Emelyanov <xemul@parallels.com>
	Cc: Cyrill Gorcunov <gorcunov@openvz.org>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f074a8f49eb87cde95ac9d040ad5e7ea4f029738)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/vm/pagemap.txt
#	include/uapi/linux/kernel-page-flags.h
diff --cc Documentation/vm/pagemap.txt
index fd7c3cfddd8e,0e1e55588b59..000000000000
--- a/Documentation/vm/pagemap.txt
+++ b/Documentation/vm/pagemap.txt
@@@ -62,6 -68,13 +62,16 @@@ There are three components to pagemap
      20. NOPAGE
      21. KSM
      22. THP
++<<<<<<< HEAD
++=======
+     23. BALLOON
+     24. ZERO_PAGE
+     25. IDLE
+ 
+  * /proc/kpagecgroup.  This file contains a 64-bit inode number of the
+    memory cgroup each page is charged to, indexed by PFN. Only available when
+    CONFIG_MEMCG is set.
++>>>>>>> f074a8f49eb8 (proc: export idle flag via kpageflags)
  
  Short descriptions to the page flags:
  
@@@ -102,6 -115,18 +112,21 @@@
  22. THP
      contiguous pages which construct transparent hugepages
  
++<<<<<<< HEAD
++=======
+ 23. BALLOON
+     balloon compaction page
+ 
+ 24. ZERO_PAGE
+     zero page for pfn_zero or huge_zero page
+ 
+ 25. IDLE
+     page has not been accessed since it was marked idle (see
+     Documentation/vm/idle_page_tracking.txt). Note that this flag may be
+     stale in case the page was accessed via a PTE. To make sure the flag
+     is up-to-date one has to read /sys/kernel/mm/page_idle/bitmap first.
+ 
++>>>>>>> f074a8f49eb8 (proc: export idle flag via kpageflags)
      [IO related page flags]
   1. ERROR     IO error occurred
   3. UPTODATE  page has up-to-date data
diff --cc include/uapi/linux/kernel-page-flags.h
index 2f96d233c980,5da5f8751ce7..000000000000
--- a/include/uapi/linux/kernel-page-flags.h
+++ b/include/uapi/linux/kernel-page-flags.h
@@@ -32,6 -32,8 +32,11 @@@
  #define KPF_KSM			21
  #define KPF_THP			22
  #define KPF_BALLOON		23
++<<<<<<< HEAD
++=======
+ #define KPF_ZERO_PAGE		24
+ #define KPF_IDLE		25
++>>>>>>> f074a8f49eb8 (proc: export idle flag via kpageflags)
  
  
  #endif /* _UAPILINUX_KERNEL_PAGE_FLAGS_H */
* Unmerged path Documentation/vm/pagemap.txt
diff --git a/fs/proc/page.c b/fs/proc/page.c
index 4bb8e0142f7a..977c115094a1 100644
--- a/fs/proc/page.c
+++ b/fs/proc/page.c
@@ -136,6 +136,9 @@ u64 stable_page_flags(struct page *page)
 	if (PageBalloon(page))
 		u |= 1 << KPF_BALLOON;
 
+	if (page_is_idle(page))
+		u |= 1 << KPF_IDLE;
+
 	u |= kpf_copy_bit(k, KPF_LOCKED,	PG_locked);
 
 	u |= kpf_copy_bit(k, KPF_SLAB,		PG_slab);
* Unmerged path include/uapi/linux/kernel-page-flags.h
