phylib: Add phy_set_max_speed helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Simon Horman <horms+renesas@verge.net.au>
commit f3a6bd393c2c5d0e6b16624ba99a1c5fa07bdb0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f3a6bd39.failed

Add a helper to allow ethernet drivers to limit the speed of a phy
(that they are attached to).

This mainly involves factoring out the business-end of
of_set_phy_supported() and exporting a new symbol.

This code seems to be open coded in several places, in several different
variants.

It is is envisaged that this will be used in situations where setting the
"max-speed" property in DT is not appropriate, e.g. because the maximum
speed is not a property of the phy hardware.

	Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f3a6bd393c2c5d0e6b16624ba99a1c5fa07bdb0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy_device.c
diff --cc drivers/net/phy/phy_device.c
index 8dd3432c8c20,383389146099..000000000000
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@@ -1204,6 -1239,59 +1204,62 @@@ static int gen10g_resume(struct phy_dev
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int __set_phy_supported(struct phy_device *phydev, u32 max_speed)
+ {
+ 	/* The default values for phydev->supported are provided by the PHY
+ 	 * driver "features" member, we want to reset to sane defaults first
+ 	 * before supporting higher speeds.
+ 	 */
+ 	phydev->supported &= PHY_DEFAULT_FEATURES;
+ 
+ 	switch (max_speed) {
+ 	default:
+ 		return -ENOTSUPP;
+ 	case SPEED_1000:
+ 		phydev->supported |= PHY_1000BT_FEATURES;
+ 		/* fall through */
+ 	case SPEED_100:
+ 		phydev->supported |= PHY_100BT_FEATURES;
+ 		/* fall through */
+ 	case SPEED_10:
+ 		phydev->supported |= PHY_10BT_FEATURES;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int phy_set_max_speed(struct phy_device *phydev, u32 max_speed)
+ {
+ 	int err;
+ 
+ 	err = __set_phy_supported(phydev, max_speed);
+ 	if (err)
+ 		return err;
+ 
+ 	phydev->advertising = phydev->supported;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL(phy_set_max_speed);
+ 
+ static void of_set_phy_supported(struct phy_device *phydev)
+ {
+ 	struct device_node *node = phydev->dev.of_node;
+ 	u32 max_speed;
+ 
+ 	if (!IS_ENABLED(CONFIG_OF_MDIO))
+ 		return;
+ 
+ 	if (!node)
+ 		return;
+ 
+ 	if (!of_property_read_u32(node, "max-speed", &max_speed))
+ 		__set_phy_supported(phydev, max_speed);
+ }
+ 
++>>>>>>> f3a6bd393c2c (phylib: Add phy_set_max_speed helper)
  /**
   * phy_probe - probe and init a PHY device
   * @dev: device to probe and init
* Unmerged path drivers/net/phy/phy_device.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 409a4c0faf98..d2a4491617d5 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -692,6 +692,7 @@ int phy_mii_ioctl(struct phy_device *phydev, struct ifreq *ifr, int cmd);
 int phy_start_interrupts(struct phy_device *phydev);
 void phy_print_status(struct phy_device *phydev);
 void phy_device_free(struct phy_device *phydev);
+int phy_set_max_speed(struct phy_device *phydev, u32 max_speed);
 
 int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
 		       int (*run)(struct phy_device *));
