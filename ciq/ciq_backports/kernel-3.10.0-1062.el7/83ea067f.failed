net: phy: avoid setting unsupported EEE advertisments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] phy: avoid setting unsupported EEE advertisments (Ivan Vecera) [1655590]
Rebuild_FUZZ: 95.05%
commit-author Russell King <rmk+kernel@armlinux.org.uk>
commit 83ea067fe2eae9a67c172aede6e11b9f194b1d52
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/83ea067f.failed

We currently allow userspace to set any EEE advertisments it desires,
whether or not the PHY supports them.  For example:

 # ethtool --set-eee eth1 advertise 0xffffffff
 # ethtool --show-eee eth1
 EEE Settings for eth1:
        EEE status: disabled
        Tx LPI: disabled
        Supported EEE link modes:  100baseT/Full
                                   1000baseT/Full
                                   10000baseT/Full
        Advertised EEE link modes:  100baseT/Full
                                    1000baseT/Full
                                    1000baseKX/Full
                                    10000baseT/Full
                                    10000baseKX4/Full
                                    10000baseKR/Full

Clearly, this is not sane, we should only allow link modes that are
supported to be advertised (as we do elsewhere.)  Ensure that we mask
the MDIO_AN_EEE_ADV value with the capabilities retrieved from the
MDIO_PCS_EEE_ABLE register.

	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 83ea067fe2eae9a67c172aede6e11b9f194b1d52)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy.c
diff --cc drivers/net/phy/phy.c
index f64de02dbd2e,7b1c93b0233a..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -1196,12 -1332,22 +1196,29 @@@ EXPORT_SYMBOL(phy_ethtool_get_eee)
   */
  int phy_ethtool_set_eee(struct phy_device *phydev, struct ethtool_eee *data)
  {
- 	int val = ethtool_adv_to_mmd_eee_adv_t(data->advertised);
+ 	int cap, adv;
  
++<<<<<<< HEAD
 +	phy_write_mmd_indirect(phydev->bus, MDIO_AN_EEE_ADV, MDIO_MMD_AN,
 +			       phydev->addr, val);
 +
 +	return 0;
++=======
+ 	if (!phydev->drv)
+ 		return -EIO;
+ 
+ 	/* Get Supported EEE */
+ 	cap = phy_read_mmd(phydev, MDIO_MMD_PCS, MDIO_PCS_EEE_ABLE);
+ 	if (cap < 0)
+ 		return cap;
+ 
+ 	adv = ethtool_adv_to_mmd_eee_adv_t(data->advertised) & cap;
+ 
+ 	/* Mask prohibited EEE modes */
+ 	adv &= ~phydev->eee_broken_modes;
+ 
+ 	return phy_write_mmd(phydev, MDIO_MMD_AN, MDIO_AN_EEE_ADV, adv);
++>>>>>>> 83ea067fe2ea (net: phy: avoid setting unsupported EEE advertisments)
  }
  EXPORT_SYMBOL(phy_ethtool_set_eee);
  
* Unmerged path drivers/net/phy/phy.c
