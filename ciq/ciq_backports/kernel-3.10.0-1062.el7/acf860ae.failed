bpf tools: New API to get name from a BPF object

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit acf860ae7c53cc8b0c5d372c218332aac3eeba4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/acf860ae.failed

Before this patch there's no way to connect a loaded bpf object
to its source file. However, during applying perf's '--filter' to BPF
object, without this connection makes things harder, because perf loads
all programs together, but '--filter' setting is for each object.

The API of bpf_object__open_buffer() is changed to allow passing a name.
Fortunately, at this time there's only one user of it (perf test LLVM),
so we change it together.

	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@plumgrid.com>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kaixu Xia <xiakaixu@huawei.com>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1440742821-44548-2-git-send-email-wangnan0@huawei.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit acf860ae7c53cc8b0c5d372c218332aac3eeba4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
#	tools/perf/tests/llvm.c
diff --cc tools/lib/bpf/libbpf.c
index 5bbbf285af74,4252fc22f78f..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -1669,30 -986,12 +1669,39 @@@ bpf_object__next(struct bpf_object *pre
  	return next;
  }
  
++<<<<<<< HEAD
 +const char *bpf_object__name(struct bpf_object *obj)
 +{
 +	return obj ? obj->path : ERR_PTR(-EINVAL);
 +}
 +
 +unsigned int bpf_object__kversion(struct bpf_object *obj)
 +{
 +	return obj ? obj->kern_version : 0;
 +}
 +
 +int bpf_object__set_priv(struct bpf_object *obj, void *priv,
 +			 bpf_object_clear_priv_t clear_priv)
 +{
 +	if (obj->priv && obj->clear_priv)
 +		obj->clear_priv(obj, obj->priv);
 +
 +	obj->priv = priv;
 +	obj->clear_priv = clear_priv;
 +	return 0;
 +}
 +
 +void *bpf_object__priv(struct bpf_object *obj)
 +{
 +	return obj ? obj->priv : ERR_PTR(-EINVAL);
++=======
+ const char *
+ bpf_object__get_name(struct bpf_object *obj)
+ {
+ 	if (!obj)
+ 		return NULL;
+ 	return obj->path;
++>>>>>>> acf860ae7c53 (bpf tools: New API to get name from a BPF object)
  }
  
  struct bpf_program *
diff --cc tools/lib/bpf/libbpf.h
index f85906533cdd,f16170c95ffd..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -70,14 -30,12 +70,21 @@@ struct bpf_object *bpf_object__open(con
  struct bpf_object *bpf_object__open_buffer(void *obj_buf,
  					   size_t obj_buf_sz,
  					   const char *name);
++<<<<<<< HEAD
 +int bpf_object__pin(struct bpf_object *object, const char *path);
++=======
++>>>>>>> acf860ae7c53 (bpf tools: New API to get name from a BPF object)
  void bpf_object__close(struct bpf_object *object);
  
  /* Load/unload object into/from kernel */
  int bpf_object__load(struct bpf_object *obj);
  int bpf_object__unload(struct bpf_object *obj);
++<<<<<<< HEAD
 +const char *bpf_object__name(struct bpf_object *obj);
 +unsigned int bpf_object__kversion(struct bpf_object *obj);
++=======
+ const char *bpf_object__get_name(struct bpf_object *obj);
++>>>>>>> acf860ae7c53 (bpf tools: New API to get name from a BPF object)
  
  struct bpf_object *bpf_object__next(struct bpf_object *prev);
  #define bpf_object__for_each_safe(pos, tmp)			\
* Unmerged path tools/perf/tests/llvm.c
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/perf/tests/llvm.c
