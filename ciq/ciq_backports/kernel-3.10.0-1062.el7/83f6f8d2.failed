IB/core: Make rdma_find_gid_by_filter support all protocols

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit 83f6f8d29dd3079b278791ebf14e87802f91b6bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/83f6f8d2.failed

There is no reason to restrict this function to roce only these days,
allow the filter function to be called on any protocol.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 83f6f8d29dd3079b278791ebf14e87802f91b6bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cache.c
diff --cc drivers/infiniband/core/cache.c
index 36d3478f5cc1,9846373c5cbc..000000000000
--- a/drivers/infiniband/core/cache.c
+++ b/drivers/infiniband/core/cache.c
@@@ -524,27 -728,24 +523,38 @@@ const struct ib_gid_attr *rdma_find_gid
  	unsigned long flags;
  	unsigned int i;
  
- 	if (!rdma_is_port_valid(ib_dev, port) ||
- 	    !rdma_protocol_roce(ib_dev, port))
- 		return ERR_PTR(-EPROTONOSUPPORT);
+ 	if (!rdma_is_port_valid(ib_dev, port))
+ 		return ERR_PTR(-EINVAL);
  
 -	table = rdma_gid_table(ib_dev, port);
 +	table = ib_dev->cache.ports[port - rdma_start_port(ib_dev)].gid;
  
  	read_lock_irqsave(&table->rwlock, flags);
  	for (i = 0; i < table->sz; i++) {
- 		struct ib_gid_attr attr;
+ 		struct ib_gid_table_entry *entry = table->data_vec[i];
  
++<<<<<<< HEAD
 +		if (table->data_vec[i].props & GID_TABLE_ENTRY_INVALID)
 +			continue;
 +
 +		if (memcmp(gid, &table->data_vec[i].gid, sizeof(*gid)))
 +			continue;
 +
 +		memcpy(&attr, &table->data_vec[i].attr, sizeof(attr));
 +
 +		if (filter(gid, &attr, context)) {
 +			get_gid_entry(table->data_vec[i]);
 +			res = &table->data_vec[i]->attr;
++=======
+ 		if (!is_gid_entry_valid(entry))
+ 			continue;
+ 
+ 		if (memcmp(gid, &entry->attr.gid, sizeof(*gid)))
+ 			continue;
+ 
+ 		if (filter(gid, &entry->attr, context)) {
+ 			get_gid_entry(entry);
+ 			res = &entry->attr;
++>>>>>>> 83f6f8d29dd3 (IB/core: Make rdma_find_gid_by_filter support all protocols)
  			break;
  		}
  	}
@@@ -920,10 -1094,6 +930,13 @@@ int ib_find_gid_by_filter(struct ib_dev
  {
  	const struct ib_gid_attr *res;
  
++<<<<<<< HEAD
 +	/* Only RoCE GID table supports filter function */
 +	if (!rdma_cap_roce_gid_table(device, port_num) && filter)
 +		return -EPROTONOSUPPORT;
 +
++=======
++>>>>>>> 83f6f8d29dd3 (IB/core: Make rdma_find_gid_by_filter support all protocols)
  	res = rdma_find_gid_by_filter(device, gid, port_num, filter,
  				      context);
  	if (IS_ERR(res))
* Unmerged path drivers/infiniband/core/cache.c
