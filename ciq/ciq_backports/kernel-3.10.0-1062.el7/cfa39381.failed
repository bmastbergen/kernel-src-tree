kvm: fix kvm_ioctl_create_device() reference counting (CVE-2019-6974)

jira LE-1907
cve CVE-2019-6974
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [kvm] kvm: fix kvm_ioctl_create_device() reference counting (Paolo Bonzini) [1671923] {CVE-2019-6974}
Rebuild_FUZZ: 86.89%
commit-author Jann Horn <jannh@google.com>
commit cfa39381173d5f969daf43582c95ad679189cbc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/cfa39381.failed

kvm_ioctl_create_device() does the following:

1. creates a device that holds a reference to the VM object (with a borrowed
   reference, the VM's refcount has not been bumped yet)
2. initializes the device
3. transfers the reference to the device to the caller's file descriptor table
4. calls kvm_get_kvm() to turn the borrowed reference to the VM into a real
   reference

The ownership transfer in step 3 must not happen before the reference to the VM
becomes a proper, non-borrowed reference, which only happens in step 4.
After step 3, an attacker can close the file descriptor and drop the borrowed
reference, which can cause the refcount of the kvm object to drop to zero.

This means that we need to grab a reference for the device before
anon_inode_getfd(), otherwise the VM can disappear from under us.

Fixes: 852b6d57dc7f ("kvm: add device control API")
	Cc: stable@kernel.org
	Signed-off-by: Jann Horn <jannh@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit cfa39381173d5f969daf43582c95ad679189cbc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	virt/kvm/kvm_main.c
diff --cc virt/kvm/kvm_main.c
index 365126b76acd,585845203db8..000000000000
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@@ -2823,15 -2993,24 +2823,26 @@@ static int kvm_ioctl_create_device(stru
  		kfree(dev);
  		return ret;
  	}
 -	list_add(&dev->vm_node, &kvm->devices);
 -	mutex_unlock(&kvm->lock);
 -
 -	if (ops->init)
 -		ops->init(dev);
  
+ 	kvm_get_kvm(kvm);
  	ret = anon_inode_getfd(ops->name, &kvm_device_fops, dev, O_RDWR | O_CLOEXEC);
  	if (ret < 0) {
++<<<<<<< HEAD
++=======
+ 		kvm_put_kvm(kvm);
+ 		mutex_lock(&kvm->lock);
+ 		list_del(&dev->vm_node);
+ 		mutex_unlock(&kvm->lock);
++>>>>>>> cfa39381173d (kvm: fix kvm_ioctl_create_device() reference counting (CVE-2019-6974))
  		ops->destroy(dev);
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	list_add(&dev->vm_node, &kvm->devices);
 +	kvm_get_kvm(kvm);
++=======
++>>>>>>> cfa39381173d (kvm: fix kvm_ioctl_create_device() reference counting (CVE-2019-6974))
  	cd->fd = ret;
  	return 0;
  }
* Unmerged path virt/kvm/kvm_main.c
