libcxgb,cxgb4: use __skb_put_zero to simplfy code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] libcxgb, cxgb4: use __skb_put_zero to simplfy code (Arjun Vynipadath) [1642412]
Rebuild_FUZZ: 98.99%
commit-author YueHaibing <yuehaibing@huawei.com>
commit a6a188e48959829fc6d64a1b52762314bcaf6417
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/a6a188e4.failed

use helper __skb_put_zero to replace the pattern of __skb_put() && memset()

	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a6a188e48959829fc6d64a1b52762314bcaf6417)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/libcxgb/libcxgb_cm.h
diff --cc drivers/net/ethernet/chelsio/libcxgb/libcxgb_cm.h
index 515b94ff9080,240ba9d4c399..000000000000
--- a/drivers/net/ethernet/chelsio/libcxgb/libcxgb_cm.h
+++ b/drivers/net/ethernet/chelsio/libcxgb/libcxgb_cm.h
@@@ -90,8 -90,7 +90,12 @@@ cxgb_mk_tid_release(struct sk_buff *skb
  {
  	struct cpl_tid_release *req;
  
++<<<<<<< HEAD
 +	req = (struct cpl_tid_release *)__skb_put(skb, len);
 +	memset(req, 0, len);
++=======
+ 	req = __skb_put_zero(skb, len);
++>>>>>>> a6a188e48959 (libcxgb,cxgb4: use __skb_put_zero to simplfy code)
  
  	INIT_TP_WR(req, tid);
  	OPCODE_TID(req) = cpu_to_be32(MK_OPCODE_TID(CPL_TID_RELEASE, tid));
@@@ -104,8 -103,7 +108,12 @@@ cxgb_mk_close_con_req(struct sk_buff *s
  {
  	struct cpl_close_con_req *req;
  
++<<<<<<< HEAD
 +	req = (struct cpl_close_con_req *)__skb_put(skb, len);
 +	memset(req, 0, len);
++=======
+ 	req = __skb_put_zero(skb, len);
++>>>>>>> a6a188e48959 (libcxgb,cxgb4: use __skb_put_zero to simplfy code)
  
  	INIT_TP_WR(req, tid);
  	OPCODE_TID(req) = cpu_to_be32(MK_OPCODE_TID(CPL_CLOSE_CON_REQ, tid));
@@@ -119,8 -117,7 +127,12 @@@ cxgb_mk_abort_req(struct sk_buff *skb, 
  {
  	struct cpl_abort_req *req;
  
++<<<<<<< HEAD
 +	req = (struct cpl_abort_req *)__skb_put(skb, len);
 +	memset(req, 0, len);
++=======
+ 	req = __skb_put_zero(skb, len);
++>>>>>>> a6a188e48959 (libcxgb,cxgb4: use __skb_put_zero to simplfy code)
  
  	INIT_TP_WR(req, tid);
  	OPCODE_TID(req) = cpu_to_be32(MK_OPCODE_TID(CPL_ABORT_REQ, tid));
@@@ -134,8 -131,7 +146,12 @@@ cxgb_mk_abort_rpl(struct sk_buff *skb, 
  {
  	struct cpl_abort_rpl *rpl;
  
++<<<<<<< HEAD
 +	rpl = (struct cpl_abort_rpl *)__skb_put(skb, len);
 +	memset(rpl, 0, len);
++=======
+ 	rpl = __skb_put_zero(skb, len);
++>>>>>>> a6a188e48959 (libcxgb,cxgb4: use __skb_put_zero to simplfy code)
  
  	INIT_TP_WR(rpl, tid);
  	OPCODE_TID(rpl) = cpu_to_be32(MK_OPCODE_TID(CPL_ABORT_RPL, tid));
@@@ -149,8 -145,7 +165,12 @@@ cxgb_mk_rx_data_ack(struct sk_buff *skb
  {
  	struct cpl_rx_data_ack *req;
  
++<<<<<<< HEAD
 +	req = (struct cpl_rx_data_ack *)__skb_put(skb, len);
 +	memset(req, 0, len);
++=======
+ 	req = __skb_put_zero(skb, len);
++>>>>>>> a6a188e48959 (libcxgb,cxgb4: use __skb_put_zero to simplfy code)
  
  	INIT_TP_WR(req, tid);
  	OPCODE_TID(req) = cpu_to_be32(MK_OPCODE_TID(CPL_RX_DATA_ACK, tid));
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_filter.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_filter.c
index b76447baccaf..1e0e2979f2dd 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_filter.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_filter.c
@@ -64,8 +64,7 @@ static int set_tcb_field(struct adapter *adap, struct filter_entry *f,
 	if (!skb)
 		return -ENOMEM;
 
-	req = (struct cpl_set_tcb_field *)__skb_put(skb, sizeof(*req));
-	memset(req, 0, sizeof(*req));
+	req = (struct cpl_set_tcb_field *)__skb_put_zero(skb, sizeof(*req));
 	INIT_TP_WR_CPL(req, CPL_SET_TCB_FIELD, ftid);
 	req->reply_ctrl = htons(REPLY_CHAN_V(0) |
 				QUEUENO_V(adap->sge.fw_evtq.abs_id) |
diff --git a/drivers/net/ethernet/chelsio/cxgb4/srq.c b/drivers/net/ethernet/chelsio/cxgb4/srq.c
index 6228a5708307..82b70a565e24 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/srq.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/srq.c
@@ -84,8 +84,7 @@ int cxgb4_get_srq_entry(struct net_device *dev,
 	if (!skb)
 		return -ENOMEM;
 	req = (struct cpl_srq_table_req *)
-		__skb_put(skb, sizeof(*req));
-	memset(req, 0, sizeof(*req));
+		__skb_put_zero(skb, sizeof(*req));
 	INIT_TP_WR(req, 0);
 	OPCODE_TID(req) = htonl(MK_OPCODE_TID(CPL_SRQ_TABLE_REQ,
 					      TID_TID_V(srq_idx) |
* Unmerged path drivers/net/ethernet/chelsio/libcxgb/libcxgb_cm.h
