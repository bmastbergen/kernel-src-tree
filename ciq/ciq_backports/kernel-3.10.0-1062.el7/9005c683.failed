x86/spectre: Simplify spectre_v2 command line parsing

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] spectre: Simplify spectre_v2 command line parsing (Waiman Long) [1709296 1690358 1690348 1690335] {CVE-2018-12126 CVE-2018-12127 CVE-2018-12130 CVE-2019-11091}
Rebuild_FUZZ: 96.08%
commit-author KarimAllah Ahmed <karahmed@amazon.de>
commit 9005c6834c0ffdfe46afa76656bd9276cca864f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9005c683.failed

[dwmw2: Use ARRAY_SIZE]

	Signed-off-by: KarimAllah Ahmed <karahmed@amazon.de>
	Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: peterz@infradead.org
	Cc: bp@alien8.de
Link: https://lkml.kernel.org/r/1517484441-1420-3-git-send-email-dwmw@amazon.co.uk

(cherry picked from commit 9005c6834c0ffdfe46afa76656bd9276cca864f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index 6ec1d2da76d1,71949bf2de5a..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -141,6 -93,46 +141,49 @@@ enum spectre_v2_mitigation_cmd spectre_
  #undef pr_fmt
  #define pr_fmt(fmt)     "Spectre V2 : " fmt
  
++<<<<<<< HEAD
++=======
+ static enum spectre_v2_mitigation spectre_v2_enabled = SPECTRE_V2_NONE;
+ 
+ #ifdef RETPOLINE
+ static bool spectre_v2_bad_module;
+ 
+ bool retpoline_module_ok(bool has_retpoline)
+ {
+ 	if (spectre_v2_enabled == SPECTRE_V2_NONE || has_retpoline)
+ 		return true;
+ 
+ 	pr_err("System may be vulnerable to spectre v2\n");
+ 	spectre_v2_bad_module = true;
+ 	return false;
+ }
+ 
+ static inline const char *spectre_v2_module_string(void)
+ {
+ 	return spectre_v2_bad_module ? " - vulnerable module loaded" : "";
+ }
+ #else
+ static inline const char *spectre_v2_module_string(void) { return ""; }
+ #endif
+ 
+ static void __init spec2_print_if_insecure(const char *reason)
+ {
+ 	if (boot_cpu_has_bug(X86_BUG_SPECTRE_V2))
+ 		pr_info("%s selected on command line.\n", reason);
+ }
+ 
+ static void __init spec2_print_if_secure(const char *reason)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2))
+ 		pr_info("%s selected on command line.\n", reason);
+ }
+ 
+ static inline bool retp_compiler(void)
+ {
+ 	return __is_defined(RETPOLINE);
+ }
+ 
++>>>>>>> 9005c6834c0f (x86/spectre: Simplify spectre_v2 command line parsing)
  static inline bool match_option(const char *arg, int arglen, const char *opt)
  {
  	int len = strlen(opt);
@@@ -148,41 -140,91 +191,102 @@@
  	return len == arglen && !strncmp(arg, opt, len);
  }
  
++<<<<<<< HEAD
 +static enum spectre_v2_mitigation_cmd spectre_v2_parse_cmdline(void)
++=======
+ static const struct {
+ 	const char *option;
+ 	enum spectre_v2_mitigation_cmd cmd;
+ 	bool secure;
+ } mitigation_options[] = {
+ 	{ "off",               SPECTRE_V2_CMD_NONE,              false },
+ 	{ "on",                SPECTRE_V2_CMD_FORCE,             true },
+ 	{ "retpoline",         SPECTRE_V2_CMD_RETPOLINE,         false },
+ 	{ "retpoline,amd",     SPECTRE_V2_CMD_RETPOLINE_AMD,     false },
+ 	{ "retpoline,generic", SPECTRE_V2_CMD_RETPOLINE_GENERIC, false },
+ 	{ "auto",              SPECTRE_V2_CMD_AUTO,              false },
+ };
+ 
+ static enum spectre_v2_mitigation_cmd __init spectre_v2_parse_cmdline(void)
++>>>>>>> 9005c6834c0f (x86/spectre: Simplify spectre_v2 command line parsing)
  {
  	char arg[20];
- 	int ret;
+ 	int ret, i;
+ 	enum spectre_v2_mitigation_cmd cmd = SPECTRE_V2_CMD_AUTO;
  
++<<<<<<< HEAD
 +	ret = cmdline_find_option(boot_command_line, "spectre_v2", arg,
 +				  sizeof(arg));
 +	if (ret > 0)  {
 +		if (match_option(arg, ret, "off")) {
 +			goto disable;
 +		} else if (match_option(arg, ret, "on")) {
 +			return SPECTRE_V2_CMD_FORCE;
 +		} else if (match_option(arg, ret, "retpoline")) {
 +			return SPECTRE_V2_CMD_RETPOLINE;
 +		} else if (match_option(arg, ret, "retpoline,ibrs_user")) {
 +			return SPECTRE_V2_CMD_RETPOLINE_IBRS_USER;
 +		} else if (match_option(arg, ret, "ibrs")) {
 +			return SPECTRE_V2_CMD_IBRS;
 +		} else if (match_option(arg, ret, "ibrs_always")) {
 +			return SPECTRE_V2_CMD_IBRS_ALWAYS;
 +		} else if (match_option(arg, ret, "auto")) {
++=======
+ 	if (cmdline_find_option_bool(boot_command_line, "nospectre_v2"))
+ 		return SPECTRE_V2_CMD_NONE;
+ 	else {
+ 		ret = cmdline_find_option(boot_command_line, "spectre_v2", arg,
+ 					  sizeof(arg));
+ 		if (ret < 0)
+ 			return SPECTRE_V2_CMD_AUTO;
+ 
+ 		for (i = 0; i < ARRAY_SIZE(mitigation_options); i++) {
+ 			if (!match_option(arg, ret, mitigation_options[i].option))
+ 				continue;
+ 			cmd = mitigation_options[i].cmd;
+ 			break;
+ 		}
+ 
+ 		if (i >= ARRAY_SIZE(mitigation_options)) {
+ 			pr_err("unknown option (%s). Switching to AUTO select\n",
+ 			       mitigation_options[i].option);
++>>>>>>> 9005c6834c0f (x86/spectre: Simplify spectre_v2 command line parsing)
  			return SPECTRE_V2_CMD_AUTO;
  		}
  	}
  
- 	if (!cmdline_find_option_bool(boot_command_line, "nospectre_v2"))
+ 	if ((cmd == SPECTRE_V2_CMD_RETPOLINE ||
+ 	     cmd == SPECTRE_V2_CMD_RETPOLINE_AMD ||
+ 	     cmd == SPECTRE_V2_CMD_RETPOLINE_GENERIC) &&
+ 	    !IS_ENABLED(CONFIG_RETPOLINE)) {
+ 		pr_err("%s selected but not compiled in. Switching to AUTO select\n",
+ 		       mitigation_options[i].option);
  		return SPECTRE_V2_CMD_AUTO;
++<<<<<<< HEAD
 +disable:
 +	return SPECTRE_V2_CMD_NONE;
++=======
+ 	}
+ 
+ 	if (cmd == SPECTRE_V2_CMD_RETPOLINE_AMD &&
+ 	    boot_cpu_data.x86_vendor != X86_VENDOR_AMD) {
+ 		pr_err("retpoline,amd selected but CPU is not AMD. Switching to AUTO select\n");
+ 		return SPECTRE_V2_CMD_AUTO;
+ 	}
+ 
+ 	if (mitigation_options[i].secure)
+ 		spec2_print_if_secure(mitigation_options[i].option);
+ 	else
+ 		spec2_print_if_insecure(mitigation_options[i].option);
+ 
+ 	return cmd;
++>>>>>>> 9005c6834c0f (x86/spectre: Simplify spectre_v2 command line parsing)
  }
  
 -/* Check for Skylake-like CPUs (for RSB handling) */
 -static bool __init is_skylake_era(void)
 -{
 -	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL &&
 -	    boot_cpu_data.x86 == 6) {
 -		switch (boot_cpu_data.x86_model) {
 -		case INTEL_FAM6_SKYLAKE_MOBILE:
 -		case INTEL_FAM6_SKYLAKE_DESKTOP:
 -		case INTEL_FAM6_SKYLAKE_X:
 -		case INTEL_FAM6_KABYLAKE_MOBILE:
 -		case INTEL_FAM6_KABYLAKE_DESKTOP:
 -			return true;
 -		}
 -	}
 -	return false;
 -}
 -
 -static void __init spectre_v2_select_mitigation(void)
 +void __spectre_v2_select_mitigation(void)
  {
 -	enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();
 -	enum spectre_v2_mitigation mode = SPECTRE_V2_NONE;
 +	const bool full_retpoline = IS_ENABLED(CONFIG_RETPOLINE) && retp_compiler();
 +	enum spectre_v2_mitigation_cmd cmd = spectre_v2_cmd;
  
  	/*
  	 * If the CPU is not affected and the command line mode is NONE or AUTO
* Unmerged path arch/x86/kernel/cpu/bugs.c
