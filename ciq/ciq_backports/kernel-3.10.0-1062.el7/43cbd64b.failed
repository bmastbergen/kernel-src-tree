IB/usnic: Update with bug fixes from core code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit 43cbd64b1fdc1da89abdad88a022d9e87a98e9c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/43cbd64b.failed

usnic has a modified version of the core codes' ib_umem_get() and
related, and the copy misses many of the bug fixes done over the years:

Commit bc3e53f682d9 ("mm: distinguish between mlocked and pinned pages")
Commit 87773dd56d54 ("IB: ib_umem_release() should decrement mm->pinned_vm
                      from ib_umem_get")
Commit 8494057ab5e4 ("IB/uverbs: Prevent integer overflow in ib_umem_get
                      address arithmetic")
Commit 8abaae62f3fd ("IB/core: disallow registering 0-sized memory region")
Commit 66578b0b2f69 ("IB/core: don't disallow registering region starting
                      at 0x0")
Commit 53376fedb9da ("RDMA/core: not to set page dirty bit if it's already
                      set.")
Commit 8e907ed48827 ("IB/umem: Use the correct mm during ib_umem_release")

	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 43cbd64b1fdc1da89abdad88a022d9e87a98e9c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/usnic/usnic_uiom.c
diff --cc drivers/infiniband/hw/usnic/usnic_uiom.c
index b500d8d322ba,9dd39daa602b..000000000000
--- a/drivers/infiniband/hw/usnic/usnic_uiom.c
+++ b/drivers/infiniband/hw/usnic/usnic_uiom.c
@@@ -111,7 -113,18 +112,17 @@@ static int usnic_uiom_get_pages(unsigne
  	int i;
  	int flags;
  	dma_addr_t pa;
 -	unsigned int gup_flags;
  
+ 	/*
+ 	 * If the combination of the addr and size requested for this memory
+ 	 * region causes an integer overflow, return error.
+ 	 */
+ 	if (((addr + size) < addr) || PAGE_ALIGN(addr + size) < (addr + size))
+ 		return -EINVAL;
+ 
+ 	if (!size)
+ 		return -EINVAL;
+ 
  	if (!can_do_mlock())
  		return -EPERM;
  
@@@ -139,10 -154,10 +150,14 @@@
  	ret = 0;
  
  	while (npages) {
++<<<<<<< HEAD
 +		ret = get_user_pages(current, current->mm, cur_base,
++=======
+ 		ret = get_user_pages_longterm(cur_base,
++>>>>>>> 43cbd64b1fdc (IB/usnic: Update with bug fixes from core code)
  					min_t(unsigned long, npages,
  					PAGE_SIZE / sizeof(struct page *)),
 -					gup_flags, page_list, NULL);
 +					1, !writable, page_list, NULL);
  
  		if (ret < 0)
  			goto out;
diff --git a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
index a688a5669168..9524524fade4 100644
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
@@ -666,7 +666,7 @@ int usnic_ib_dereg_mr(struct ib_mr *ibmr)
 
 	usnic_dbg("va 0x%lx length 0x%zx\n", mr->umem->va, mr->umem->length);
 
-	usnic_uiom_reg_release(mr->umem, ibmr->pd->uobject->context->closing);
+	usnic_uiom_reg_release(mr->umem, ibmr->uobject->context);
 	kfree(mr);
 	return 0;
 }
* Unmerged path drivers/infiniband/hw/usnic/usnic_uiom.c
diff --git a/drivers/infiniband/hw/usnic/usnic_uiom.h b/drivers/infiniband/hw/usnic/usnic_uiom.h
index 45ca7c1613a7..624a56c7dd16 100644
--- a/drivers/infiniband/hw/usnic/usnic_uiom.h
+++ b/drivers/infiniband/hw/usnic/usnic_uiom.h
@@ -39,6 +39,8 @@
 
 #include "usnic_uiom_interval_tree.h"
 
+struct ib_ucontext;
+
 #define USNIC_UIOM_READ			(1)
 #define USNIC_UIOM_WRITE		(2)
 
@@ -89,7 +91,8 @@ void usnic_uiom_free_dev_list(struct device **devs);
 struct usnic_uiom_reg *usnic_uiom_reg_get(struct usnic_uiom_pd *pd,
 						unsigned long addr, size_t size,
 						int access, int dmasync);
-void usnic_uiom_reg_release(struct usnic_uiom_reg *uiomr, int closing);
+void usnic_uiom_reg_release(struct usnic_uiom_reg *uiomr,
+			    struct ib_ucontext *ucontext);
 int usnic_uiom_init(char *drv_name);
 void usnic_uiom_fini(void);
 #endif /* USNIC_UIOM_H_ */
