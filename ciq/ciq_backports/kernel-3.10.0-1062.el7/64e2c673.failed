io: define several IO & PIO barrier types for the asm-generic version

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Sinan Kaya <okaya@codeaurora.org>
commit 64e2c6738b4d49d69d697b5887f72ad07c206ab3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/64e2c673.failed

Getting ready to harden readX()/writeX() and inX()/outX() semantics for the
generic implementation.

Defining two set of macros as __io_br() and __io_ar() to indicate actions
to be taken before and after MMIO read.

Defining two set of macros as __io_bw() and __io_aw() to indicate actions
to be taken before and after MMIO write.

Defining two set of macros as __io_pbw() and __io_paw() to indicate actions
to be taken before and after Port IO write.

Defining two set of macros as __io_pbr() and __io_par() to indicate actions
to be taken before and after Port IO read.

If rmb() is available for the architecture, prefer rmb() as the default
implementation of __io_ar()/__io_par().

If wmb() is available for the architecture, prefer wmb() as the default
implementation of __io_bw()/__io_pbw().

	Signed-off-by: Sinan Kaya <okaya@codeaurora.org>
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
(cherry picked from commit 64e2c6738b4d49d69d697b5887f72ad07c206ab3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/asm-generic/io.h
diff --cc include/asm-generic/io.h
index 66a3fecbf792,570433b34180..000000000000
--- a/include/asm-generic/io.h
+++ b/include/asm-generic/io.h
@@@ -24,17 -25,63 +24,64 @@@
  #define mmiowb() do {} while (0)
  #endif
  
++<<<<<<< HEAD
 +/*****************************************************************************/
++=======
+ #ifndef __io_br
+ #define __io_br()      barrier()
+ #endif
+ 
+ /* prevent prefetching of coherent DMA data ahead of a dma-complete */
+ #ifndef __io_ar
+ #ifdef rmb
+ #define __io_ar()      rmb()
+ #else
+ #define __io_ar()      barrier()
+ #endif
+ #endif
+ 
+ /* flush writes to coherent DMA data before possibly triggering a DMA read */
+ #ifndef __io_bw
+ #ifdef wmb
+ #define __io_bw()      wmb()
+ #else
+ #define __io_bw()      barrier()
+ #endif
+ #endif
+ 
+ /* serialize device access against a spin_unlock, usually handled there. */
+ #ifndef __io_aw
+ #define __io_aw()      barrier()
+ #endif
+ 
+ #ifndef __io_pbw
+ #define __io_pbw()     __io_bw()
+ #endif
+ 
+ #ifndef __io_paw
+ #define __io_paw()     __io_aw()
+ #endif
+ 
+ #ifndef __io_pbr
+ #define __io_pbr()     __io_br()
+ #endif
+ 
+ #ifndef __io_par
+ #define __io_par()     __io_ar()
+ #endif
+ 
+ 
++>>>>>>> 64e2c6738b4d (io: define several IO & PIO barrier types for the asm-generic version)
  /*
 - * __raw_{read,write}{b,w,l,q}() access memory in native endianness.
 - *
 - * On some architectures memory mapped IO needs to be accessed differently.
 - * On the simple architectures, we just read/write the memory location
 - * directly.
 + * readX/writeX() are used to access memory mapped devices. On some
 + * architectures the memory mapped IO stuff needs to be accessed
 + * differently. On the simple architectures, we just read/write the
 + * memory location directly.
   */
 -
  #ifndef __raw_readb
 -#define __raw_readb __raw_readb
  static inline u8 __raw_readb(const volatile void __iomem *addr)
  {
 -	return *(const volatile u8 __force *)addr;
 +	return *(const volatile u8 __force *) addr;
  }
  #endif
  
* Unmerged path include/asm-generic/io.h
