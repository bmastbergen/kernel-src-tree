thp: fix MADV_DONTNEED vs. MADV_FREE race

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit 58ceeb6bec86d9140f9d91d71a710e963523d063
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/58ceeb6b.failed

Both MADV_DONTNEED and MADV_FREE handled with down_read(mmap_sem).

It's critical to not clear pmd intermittently while handling MADV_FREE
to avoid race with MADV_DONTNEED:

	CPU0:				CPU1:
				madvise_free_huge_pmd()
				 pmdp_huge_get_and_clear_full()
madvise_dontneed()
 zap_pmd_range()
  pmd_trans_huge(*pmd) == 0 (without ptl)
  // skip the pmd
				 set_pmd_at();
				 // pmd is re-established

It results in MADV_DONTNEED skipping the pmd, leaving it not cleared.
It violates MADV_DONTNEED interface and can result is userspace
misbehaviour.

Basically it's the same race as with numa balancing in
change_huge_pmd(), but a bit simpler to mitigate: we don't need to
preserve dirty/young flags here due to MADV_FREE functionality.

[kirill.shutemov@linux.intel.com: Urgh... Power is special again]
  Link: http://lkml.kernel.org/r/20170303102636.bhd2zhtpds4mt62a@black.fi.intel.com
Link: http://lkml.kernel.org/r/20170302151034.27829-4-kirill.shutemov@linux.intel.com
	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 58ceeb6bec86d9140f9d91d71a710e963523d063)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/huge_memory.c
diff --cc mm/huge_memory.c
index 5d69a0fbfd2c,f3c4f9d22821..000000000000
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@@ -1808,7 -1568,7 +1808,11 @@@ int madvise_free_huge_pmd(struct mmu_ga
  		deactivate_page(page);
  
  	if (pmd_young(orig_pmd) || pmd_dirty(orig_pmd)) {
++<<<<<<< HEAD
 +		orig_pmd = pmdp_get_and_clear(tlb->mm, addr, pmd);
++=======
+ 		pmdp_invalidate(vma, addr, pmd);
++>>>>>>> 58ceeb6bec86 (thp: fix MADV_DONTNEED vs. MADV_FREE race)
  		orig_pmd = pmd_mkold(orig_pmd);
  		orig_pmd = pmd_mkclean(orig_pmd);
  
* Unmerged path mm/huge_memory.c
