perf stat: Move 'metric_only' to 'struct perf_stat_config'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 0ce5aa0266604c77ee64882b70c980e843629177
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0ce5aa02.failed

Move the static 'metric_only' variable to 'struct perf_stat_config', so
it can be passed around and used outside the 'perf stat' command.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20180830063252.23729-23-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0ce5aa0266604c77ee64882b70c980e843629177)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
#	tools/perf/util/stat.h
diff --cc tools/perf/builtin-stat.c
index a3a835604d08,397cb4f28d7f..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1133,18 -1010,18 +1132,22 @@@ static void printout(int id, int nr, st
  		.evsel = counter,
  	};
  	print_metric_t pm = print_metric_std;
 -	new_line_t nl;
 +	void (*nl)(void *);
  
- 	if (metric_only) {
+ 	if (config->metric_only) {
  		nl = new_line_metric;
 -		if (config->csv_output)
 +		if (csv_output)
  			pm = print_metric_only_csv;
  		else
  			pm = print_metric_only;
  	} else
  		nl = new_line_std;
  
++<<<<<<< HEAD
 +	if (csv_output && !metric_only) {
++=======
+ 	if (config->csv_output && !config->metric_only) {
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  		static int aggr_fields[] = {
  			[AGGR_GLOBAL] = 0,
  			[AGGR_THREAD] = 1,
@@@ -1161,16 -1038,16 +1164,21 @@@
  			os.nfields++;
  	}
  	if (run == 0 || ena == 0 || counter->counts->scaled == -1) {
++<<<<<<< HEAD
 +		if (metric_only) {
 +			pm(&os, NULL, "", "", 0);
++=======
+ 		if (config->metric_only) {
+ 			pm(config, &os, NULL, "", "", 0);
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  			return;
  		}
 -		aggr_printout(config, counter, id, nr);
 +		aggr_printout(counter, id, nr);
  
 -		fprintf(config->output, "%*s%s",
 -			config->csv_output ? 0 : 18,
 +		fprintf(stat_config.output, "%*s%s",
 +			csv_output ? 0 : 18,
  			counter->supported ? CNTR_NOT_COUNTED : CNTR_NOT_SUPPORTED,
 -			config->csv_sep);
 +			csv_sep);
  
  		if (counter->supported) {
  			print_free_counters_hint = 1;
@@@ -1199,29 -1076,25 +1207,47 @@@
  		return;
  	}
  
++<<<<<<< HEAD
 +	if (metric_only)
 +		/* nothing */;
 +	else if (nsec_counter(counter))
 +		nsec_printout(id, nr, counter, uval);
 +	else
 +		abs_printout(id, nr, counter, uval);
++=======
+ 	if (!config->metric_only)
+ 		abs_printout(config, id, nr, counter, uval);
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  
  	out.print_metric = pm;
  	out.new_line = nl;
  	out.ctx = &os;
  	out.force_header = false;
  
++<<<<<<< HEAD
 +	if (csv_output && !metric_only) {
 +		print_noise(counter, noise);
 +		print_running(run, ena);
++=======
+ 	if (config->csv_output && !config->metric_only) {
+ 		print_noise(config, counter, noise);
+ 		print_running(config, run, ena);
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  	}
  
 -	perf_stat__print_shadow_stats(config, counter, uval,
 +	perf_stat__print_shadow_stats(counter, uval,
  				first_shadow_cpu(counter, id),
++<<<<<<< HEAD
 +				&out, &metric_events);
 +	if (!csv_output && !metric_only) {
 +		print_noise(counter, noise);
 +		print_running(run, ena);
++=======
+ 				&out, &metric_events, st);
+ 	if (!config->csv_output && !config->metric_only) {
+ 		print_noise(config, counter, noise);
+ 		print_running(config, run, ena);
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  	}
  }
  
@@@ -1347,9 -1221,11 +1373,14 @@@ static void aggr_cb(struct perf_evsel *
  	}
  }
  
 -static void print_aggr(struct perf_stat_config *config,
 -		       char *prefix)
 +static void print_aggr(char *prefix)
  {
++<<<<<<< HEAD
 +	FILE *output = stat_config.output;
++=======
+ 	bool metric_only = config->metric_only;
+ 	FILE *output = config->output;
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  	struct perf_evsel *counter;
  	int s, id, nr;
  	double uval;
@@@ -1446,9 -1385,11 +1477,14 @@@ static void counter_aggr_cb(struct perf
   * Print out the results of a single counter:
   * aggregated counts in system-wide mode
   */
 -static void print_counter_aggr(struct perf_stat_config *config,
 -			       struct perf_evsel *counter, char *prefix)
 +static void print_counter_aggr(struct perf_evsel *counter, char *prefix)
  {
++<<<<<<< HEAD
 +	FILE *output = stat_config.output;
++=======
+ 	bool metric_only = config->metric_only;
+ 	FILE *output = config->output;
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  	double uval;
  	struct caggr_data cd = { .avg = 0.0 };
  
@@@ -1583,26 -1529,29 +1619,31 @@@ static void print_metric_headers(const 
  		out.new_line = new_line_metric;
  		out.force_header = true;
  		os.evsel = counter;
 -		perf_stat__print_shadow_stats(config, counter, 0,
 +		perf_stat__print_shadow_stats(counter, 0,
  					      0,
  					      &out,
 -					      &metric_events,
 -					      &rt_stat);
 +					      &metric_events);
  	}
 -	fputc('\n', config->output);
 +	fputc('\n', stat_config.output);
  }
  
 -static void print_interval(struct perf_stat_config *config,
 -			   char *prefix, struct timespec *ts)
 +static void print_interval(char *prefix, struct timespec *ts)
  {
++<<<<<<< HEAD
 +	FILE *output = stat_config.output;
++=======
+ 	bool metric_only = config->metric_only;
+ 	FILE *output = config->output;
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  	static int num_print_interval;
  
 -	if (config->interval_clear)
 +	if (interval_clear)
  		puts(CONSOLE_CLEAR);
  
 -	sprintf(prefix, "%6lu.%09lu%s", ts->tv_sec, ts->tv_nsec, config->csv_sep);
 +	sprintf(prefix, "%6lu.%09lu%s", ts->tv_sec, ts->tv_nsec, csv_sep);
  
 -	if ((num_print_interval == 0 && !config->csv_output) || config->interval_clear) {
 -		switch (config->aggr_mode) {
 +	if ((num_print_interval == 0 && !csv_output) || interval_clear) {
 +		switch (stat_config.aggr_mode) {
  		case AGGR_SOCKET:
  			fprintf(output, "#           time socket cpus");
  			if (!metric_only)
diff --cc tools/perf/util/stat.h
index 4b88aef959fb,da838182b99c..000000000000
--- a/tools/perf/util/stat.h
+++ b/tools/perf/util/stat.h
@@@ -89,6 -91,9 +89,12 @@@ struct perf_stat_config 
  	bool			 scale;
  	bool			 no_inherit;
  	bool			 identifier;
++<<<<<<< HEAD
++=======
+ 	bool			 csv_output;
+ 	bool			 interval_clear;
+ 	bool			 metric_only;
++>>>>>>> 0ce5aa026660 (perf stat: Move 'metric_only' to 'struct perf_stat_config')
  	FILE			*output;
  	unsigned int		 interval;
  	unsigned int		 timeout;
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/util/stat.h
