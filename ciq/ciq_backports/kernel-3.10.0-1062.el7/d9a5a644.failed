IB/uverbs: Add create/destroy counters support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Raed Salem <raeds@mellanox.com>
commit d9a5a6441e9dde080e9d69e736c623f7369472ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/d9a5a644.failed

User space application which uses counters functionality, is expected to
allocate/release the counters resources by calling create/destroy verbs
and in turn get a unique handle that can be used to attach the counters to
its counted type.

	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Raed Salem <raeds@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit d9a5a6441e9dde080e9d69e736c623f7369472ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/Makefile
#	drivers/infiniband/core/uverbs.h
#	drivers/infiniband/core/uverbs_std_types.c
#	include/uapi/rdma/ib_user_ioctl_cmds.h
diff --cc drivers/infiniband/core/Makefile
index a4e902560c36,589d3b744b1e..000000000000
--- a/drivers/infiniband/core/Makefile
+++ b/drivers/infiniband/core/Makefile
@@@ -33,4 -34,6 +33,10 @@@ ib_ucm-y :=			ucm.
  
  ib_uverbs-y :=			uverbs_main.o uverbs_cmd.o uverbs_marshall.o \
  				rdma_core.o uverbs_std_types.o uverbs_ioctl.o \
++<<<<<<< HEAD
 +				uverbs_ioctl_merge.o uverbs_std_types_cq.o
++=======
+ 				uverbs_ioctl_merge.o uverbs_std_types_cq.o \
+ 				uverbs_std_types_flow_action.o uverbs_std_types_dm.o \
+ 				uverbs_std_types_mr.o uverbs_std_types_counters.o
++>>>>>>> d9a5a6441e9d (IB/uverbs: Add create/destroy counters support)
diff --cc drivers/infiniband/core/uverbs.h
index 1be43bf189de,5b2461fa634d..000000000000
--- a/drivers/infiniband/core/uverbs.h
+++ b/drivers/infiniband/core/uverbs.h
@@@ -282,6 -285,9 +282,12 @@@ extern const struct uverbs_object_def U
  extern const struct uverbs_object_def UVERBS_OBJECT(UVERBS_OBJECT_WQ);
  extern const struct uverbs_object_def UVERBS_OBJECT(UVERBS_OBJECT_RWQ_IND_TBL);
  extern const struct uverbs_object_def UVERBS_OBJECT(UVERBS_OBJECT_XRCD);
++<<<<<<< HEAD
++=======
+ extern const struct uverbs_object_def UVERBS_OBJECT(UVERBS_OBJECT_FLOW_ACTION);
+ extern const struct uverbs_object_def UVERBS_OBJECT(UVERBS_OBJECT_DM);
+ extern const struct uverbs_object_def UVERBS_OBJECT(UVERBS_OBJECT_COUNTERS);
++>>>>>>> d9a5a6441e9d (IB/uverbs: Add create/destroy counters support)
  
  #define IB_UVERBS_DECLARE_CMD(name)					\
  	ssize_t ib_uverbs_##name(struct ib_uverbs_file *file,		\
diff --cc drivers/infiniband/core/uverbs_std_types.c
index bd10e94819b9,b570acbd94af..000000000000
--- a/drivers/infiniband/core/uverbs_std_types.c
+++ b/drivers/infiniband/core/uverbs_std_types.c
@@@ -303,7 -300,10 +303,14 @@@ static DECLARE_UVERBS_OBJECT_TREE(uverb
  				  &UVERBS_OBJECT(UVERBS_OBJECT_FLOW),
  				  &UVERBS_OBJECT(UVERBS_OBJECT_WQ),
  				  &UVERBS_OBJECT(UVERBS_OBJECT_RWQ_IND_TBL),
++<<<<<<< HEAD
 +				  &UVERBS_OBJECT(UVERBS_OBJECT_XRCD));
++=======
+ 				  &UVERBS_OBJECT(UVERBS_OBJECT_XRCD),
+ 				  &UVERBS_OBJECT(UVERBS_OBJECT_FLOW_ACTION),
+ 				  &UVERBS_OBJECT(UVERBS_OBJECT_DM),
+ 				  &UVERBS_OBJECT(UVERBS_OBJECT_COUNTERS));
++>>>>>>> d9a5a6441e9d (IB/uverbs: Add create/destroy counters support)
  
  const struct uverbs_object_tree_def *uverbs_default_get_objects(void)
  {
diff --cc include/uapi/rdma/ib_user_ioctl_cmds.h
index 77bbbed17ed5,c28ce62d2e40..000000000000
--- a/include/uapi/rdma/ib_user_ioctl_cmds.h
+++ b/include/uapi/rdma/ib_user_ioctl_cmds.h
@@@ -53,6 -53,9 +53,12 @@@ enum uverbs_default_objects 
  	UVERBS_OBJECT_XRCD,
  	UVERBS_OBJECT_RWQ_IND_TBL,
  	UVERBS_OBJECT_WQ,
++<<<<<<< HEAD
++=======
+ 	UVERBS_OBJECT_FLOW_ACTION,
+ 	UVERBS_OBJECT_DM,
+ 	UVERBS_OBJECT_COUNTERS,
++>>>>>>> d9a5a6441e9d (IB/uverbs: Add create/destroy counters support)
  };
  
  enum {
@@@ -80,4 -96,53 +86,56 @@@ enum uverbs_methods_cq 
  	UVERBS_METHOD_CQ_DESTROY,
  };
  
++<<<<<<< HEAD
++=======
+ enum uverbs_methods_actions_flow_action_ops {
+ 	UVERBS_METHOD_FLOW_ACTION_ESP_CREATE,
+ 	UVERBS_METHOD_FLOW_ACTION_DESTROY,
+ 	UVERBS_METHOD_FLOW_ACTION_ESP_MODIFY,
+ };
+ 
+ enum uverbs_attrs_alloc_dm_cmd_attr_ids {
+ 	UVERBS_ATTR_ALLOC_DM_HANDLE,
+ 	UVERBS_ATTR_ALLOC_DM_LENGTH,
+ 	UVERBS_ATTR_ALLOC_DM_ALIGNMENT,
+ };
+ 
+ enum uverbs_attrs_free_dm_cmd_attr_ids {
+ 	UVERBS_ATTR_FREE_DM_HANDLE,
+ };
+ 
+ enum uverbs_methods_dm {
+ 	UVERBS_METHOD_DM_ALLOC,
+ 	UVERBS_METHOD_DM_FREE,
+ };
+ 
+ enum uverbs_attrs_reg_dm_mr_cmd_attr_ids {
+ 	UVERBS_ATTR_REG_DM_MR_HANDLE,
+ 	UVERBS_ATTR_REG_DM_MR_OFFSET,
+ 	UVERBS_ATTR_REG_DM_MR_LENGTH,
+ 	UVERBS_ATTR_REG_DM_MR_PD_HANDLE,
+ 	UVERBS_ATTR_REG_DM_MR_ACCESS_FLAGS,
+ 	UVERBS_ATTR_REG_DM_MR_DM_HANDLE,
+ 	UVERBS_ATTR_REG_DM_MR_RESP_LKEY,
+ 	UVERBS_ATTR_REG_DM_MR_RESP_RKEY,
+ };
+ 
+ enum uverbs_methods_mr {
+ 	UVERBS_METHOD_DM_MR_REG,
+ };
+ 
+ enum uverbs_attrs_create_counters_cmd_attr_ids {
+ 	UVERBS_ATTR_CREATE_COUNTERS_HANDLE,
+ };
+ 
+ enum uverbs_attrs_destroy_counters_cmd_attr_ids {
+ 	UVERBS_ATTR_DESTROY_COUNTERS_HANDLE,
+ };
+ 
+ enum uverbs_methods_actions_counters_ops {
+ 	UVERBS_METHOD_COUNTERS_CREATE,
+ 	UVERBS_METHOD_COUNTERS_DESTROY,
+ };
+ 
++>>>>>>> d9a5a6441e9d (IB/uverbs: Add create/destroy counters support)
  #endif
* Unmerged path drivers/infiniband/core/Makefile
* Unmerged path drivers/infiniband/core/uverbs.h
* Unmerged path drivers/infiniband/core/uverbs_std_types.c
diff --git a/drivers/infiniband/core/uverbs_std_types_counters.c b/drivers/infiniband/core/uverbs_std_types_counters.c
new file mode 100644
index 000000000000..4b6a985aad97
--- /dev/null
+++ b/drivers/infiniband/core/uverbs_std_types_counters.c
@@ -0,0 +1,100 @@
+// SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB
+/*
+ * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * OpenIB.org BSD license below:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      - Redistributions of source code must retain the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer.
+ *
+ *      - Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials
+ *        provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "uverbs.h"
+#include <rdma/uverbs_std_types.h>
+
+static int uverbs_free_counters(struct ib_uobject *uobject,
+				enum rdma_remove_reason why)
+{
+	struct ib_counters *counters = uobject->object;
+
+	if (why == RDMA_REMOVE_DESTROY &&
+	    atomic_read(&counters->usecnt))
+		return -EBUSY;
+
+	return counters->device->destroy_counters(counters);
+}
+
+static int UVERBS_HANDLER(UVERBS_METHOD_COUNTERS_CREATE)(struct ib_device *ib_dev,
+							 struct ib_uverbs_file *file,
+							 struct uverbs_attr_bundle *attrs)
+{
+	struct ib_counters *counters;
+	struct ib_uobject *uobj;
+	int ret;
+
+	/*
+	 * This check should be removed once the infrastructure
+	 * have the ability to remove methods from parse tree once
+	 * such condition is met.
+	 */
+	if (!ib_dev->create_counters)
+		return -EOPNOTSUPP;
+
+	uobj = uverbs_attr_get_uobject(attrs, UVERBS_ATTR_CREATE_COUNTERS_HANDLE);
+	counters = ib_dev->create_counters(ib_dev, attrs);
+	if (IS_ERR(counters)) {
+		ret = PTR_ERR(counters);
+		goto err_create_counters;
+	}
+
+	counters->device = ib_dev;
+	counters->uobject = uobj;
+	uobj->object = counters;
+	atomic_set(&counters->usecnt, 0);
+
+	return 0;
+
+err_create_counters:
+	return ret;
+}
+
+static DECLARE_UVERBS_NAMED_METHOD(UVERBS_METHOD_COUNTERS_CREATE,
+	&UVERBS_ATTR_IDR(UVERBS_ATTR_CREATE_COUNTERS_HANDLE,
+			 UVERBS_OBJECT_COUNTERS,
+			 UVERBS_ACCESS_NEW,
+			 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
+
+static DECLARE_UVERBS_NAMED_METHOD_WITH_HANDLER(UVERBS_METHOD_COUNTERS_DESTROY,
+	uverbs_destroy_def_handler,
+	&UVERBS_ATTR_IDR(UVERBS_ATTR_DESTROY_COUNTERS_HANDLE,
+			 UVERBS_OBJECT_COUNTERS,
+			 UVERBS_ACCESS_DESTROY,
+			 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
+
+DECLARE_UVERBS_NAMED_OBJECT(UVERBS_OBJECT_COUNTERS,
+			    &UVERBS_TYPE_ALLOC_IDR(0, uverbs_free_counters),
+			    &UVERBS_METHOD(UVERBS_METHOD_COUNTERS_CREATE),
+			    &UVERBS_METHOD(UVERBS_METHOD_COUNTERS_DESTROY));
+
* Unmerged path include/uapi/rdma/ib_user_ioctl_cmds.h
