ext4, dax: set ext4_dax_aops for dax files

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Toshi Kani <toshi.kani@hpe.com>
commit cce6c9f7e6029caee45c459db5b3e78fec6973cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/cce6c9f7.failed

Sync syscall to DAX file needs to flush processor cache, but it
currently does not flush to existing DAX files.  This is because
'ext4_da_aops' is set to address_space_operations of existing DAX
files, instead of 'ext4_dax_aops', since S_DAX flag is set after
ext4_set_aops() in the open path.

  New file
  --------
  lookup_open
    ext4_create
      __ext4_new_inode
        ext4_set_inode_flags   // Set S_DAX flag
      ext4_set_aops            // Set aops to ext4_dax_aops

  Existing file
  -------------
  lookup_open
    ext4_lookup
      ext4_iget
        ext4_set_aops          // Set aops to ext4_da_aops
        ext4_set_inode_flags   // Set S_DAX flag

Change ext4_iget() to initialize i_flags before ext4_set_aops().

Fixes: 5f0663bb4a64 ("ext4, dax: introduce ext4_dax_aops")
	Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Suggested-by: Jan Kara <jack@suse.cz>
	Cc: stable@vger.kernel.org
(cherry picked from commit cce6c9f7e6029caee45c459db5b3e78fec6973cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 30b44b54cee7,f73f18a68165..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -4448,12 -4896,13 +4448,13 @@@ struct inode *ext4_iget(struct super_bl
  		 * not initialized on a new filesystem. */
  	}
  	ei->i_flags = le32_to_cpu(raw_inode->i_flags);
+ 	ext4_set_inode_flags(inode);
  	inode->i_blocks = ext4_inode_blocks(raw_inode, ei);
  	ei->i_file_acl = le32_to_cpu(raw_inode->i_file_acl_lo);
 -	if (ext4_has_feature_64bit(sb))
 +	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_64BIT))
  		ei->i_file_acl |=
  			((__u64)le16_to_cpu(raw_inode->i_file_acl_high)) << 32;
 -	inode->i_size = ext4_isize(sb, raw_inode);
 +	inode->i_size = ext4_isize(raw_inode);
  	if ((size = i_size_read(inode)) < 0) {
  		EXT4_ERROR_INODE(inode, "bad i_size value: %lld", size);
  		ret = -EFSCORRUPTED;
@@@ -4581,7 -5043,7 +4582,11 @@@
  		goto bad_inode;
  	}
  	brelse(iloc.bh);
++<<<<<<< HEAD
 +	ext4_set_inode_flags(inode);
++=======
+ 
++>>>>>>> cce6c9f7e602 (ext4, dax: set ext4_dax_aops for dax files)
  	unlock_new_inode(inode);
  	return inode;
  
* Unmerged path fs/ext4/inode.c
