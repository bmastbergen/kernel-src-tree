bnxt_en: Refactor bnxt_poll_work().

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Refactor bnxt_poll_work() (Jonathan Toppins) [1643317]
Rebuild_FUZZ: 98.55%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 3675b92fa70ece4c9263b812fc8cbf3bd606398c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/3675b92f.failed

Separate the CP ring polling logic in bnxt_poll_work() into 2 separate
functions __bnxt_poll_work() and __bnxt_poll_work_done().  Since the logic
is separated, we need to add tx_pkts and events fields to struct bnxt_napi
to keep track of the events to handle between the 2 functions.  We also
add had_work_done field to struct bnxt_cp_ring_info to indicate whether
some work was performed on the CP ring.

This is needed to better support the 57500 chips.  We need to poll up to
2 separate CP rings before we update or ARM the CP rings on the 57500 chips.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3675b92fa70ece4c9263b812fc8cbf3bd606398c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 2f3daee54c81,10d713aa76ee..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -1854,9 -1889,10 +1854,14 @@@ static irqreturn_t bnxt_inta(int irq, v
  	return IRQ_HANDLED;
  }
  
++<<<<<<< HEAD
 +static int bnxt_poll_work(struct bnxt *bp, struct bnxt_napi *bnapi, int budget)
++=======
+ static int __bnxt_poll_work(struct bnxt *bp, struct bnxt_cp_ring_info *cpr,
+ 			    int budget)
++>>>>>>> 3675b92fa70e (bnxt_en: Refactor bnxt_poll_work().)
  {
 -	struct bnxt_napi *bnapi = cpr->bnapi;
 +	struct bnxt_cp_ring_info *cpr = &bnapi->cp_ring;
  	u32 raw_cons = cpr->cp_raw_cons;
  	u32 cons;
  	int tx_pkts = 0;
@@@ -1932,19 -1998,9 +1968,23 @@@ static int bnxt_poll_work(struct bnxt *
  	 * buffers in rx/agg rings to prevent overflowing the completion
  	 * ring.
  	 */
 -	bnxt_db_cq(bp, &cpr->cp_db, cpr->cp_raw_cons);
 +	BNXT_CP_DB(cpr->cp_doorbell, cpr->cp_raw_cons);
 +
++<<<<<<< HEAD
 +	if (tx_pkts)
 +		bnapi->tx_int(bp, bnapi, tx_pkts);
 +
 +	if (event & BNXT_RX_EVENT) {
 +		struct bnxt_rx_ring_info *rxr = bnapi->rx_ring;
  
 +		bnxt_db_write(bp, rxr->rx_doorbell, DB_KEY_RX | rxr->rx_prod);
 +		if (event & BNXT_AGG_EVENT)
 +			bnxt_db_write(bp, rxr->rx_agg_doorbell,
 +				      DB_KEY_RX | rxr->rx_agg_prod);
 +	}
++=======
+ 	__bnxt_poll_work_done(bp, bnapi);
++>>>>>>> 3675b92fa70e (bnxt_en: Refactor bnxt_poll_work().)
  	return rx_pkts;
  }
  
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.h b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
index c891e4805623..fa15456aec63 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@ -783,6 +783,8 @@ struct bnxt_cp_ring_info {
 	u32			cp_raw_cons;
 	void __iomem		*cp_doorbell;
 
+	u8			had_work_done:1;
+
 	struct bnxt_coal	rx_ring_coal;
 	u64			rx_packets;
 	u64			rx_bytes;
@@ -820,6 +822,9 @@ struct bnxt_napi {
 
 	void			(*tx_int)(struct bnxt *, struct bnxt_napi *,
 					  int);
+	int			tx_pkts;
+	u8			events;
+
 	u32			flags;
 #define BNXT_NAPI_FLAG_XDP	0x1
 
