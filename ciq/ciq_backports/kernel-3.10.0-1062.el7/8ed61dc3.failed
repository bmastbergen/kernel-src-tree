ovl: split out ovl_get_workdir() from ovl_fill_super()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit 8ed61dc37ee0a33c7581d38d16977a5d1897de9f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/8ed61dc3.failed

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 8ed61dc37ee0a33c7581d38d16977a5d1897de9f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/super.c
diff --cc fs/overlayfs/super.c
index 19e9eb0f1d4f,aadd07a1e9c1..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -870,6 -827,217 +870,220 @@@ static const struct xattr_handler *ovl_
  	NULL
  };
  
++<<<<<<< HEAD
++=======
+ static int ovl_get_upperpath(struct ovl_fs *ufs, struct path *upperpath)
+ {
+ 	int err;
+ 
+ 	err = ovl_mount_dir(ufs->config.upperdir, upperpath);
+ 	if (err)
+ 		goto out;
+ 
+ 	/* Upper fs should not be r/o */
+ 	if (sb_rdonly(upperpath->mnt->mnt_sb)) {
+ 		pr_err("overlayfs: upper fs is r/o, try multi-lower layers mount\n");
+ 		err = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	err = ovl_check_namelen(upperpath, ufs, ufs->config.upperdir);
+ 	if (err)
+ 		goto out;
+ 
+ 	err = -EBUSY;
+ 	if (ovl_inuse_trylock(upperpath->dentry)) {
+ 		ufs->upperdir_locked = true;
+ 	} else if (ufs->config.index) {
+ 		pr_err("overlayfs: upperdir is in-use by another mount, mount with '-o index=off' to override exclusive upperdir protection.\n");
+ 		goto out;
+ 	} else {
+ 		pr_warn("overlayfs: upperdir is in-use by another mount, accessing files from both mounts will result in undefined behavior.\n");
+ 	}
+ 	err = 0;
+ out:
+ 	return err;
+ }
+ 
+ static int ovl_get_workpath(struct ovl_fs *ufs, struct path *upperpath,
+ 			    struct path *workpath)
+ {
+ 	int err;
+ 
+ 	err = ovl_mount_dir(ufs->config.workdir, workpath);
+ 	if (err)
+ 		goto out;
+ 
+ 	err = -EINVAL;
+ 	if (upperpath->mnt != workpath->mnt) {
+ 		pr_err("overlayfs: workdir and upperdir must reside under the same mount\n");
+ 		goto out;
+ 	}
+ 	if (!ovl_workdir_ok(workpath->dentry, upperpath->dentry)) {
+ 		pr_err("overlayfs: workdir and upperdir must be separate subtrees\n");
+ 		goto out;
+ 	}
+ 
+ 	err = -EBUSY;
+ 	if (ovl_inuse_trylock(workpath->dentry)) {
+ 		ufs->workdir_locked = true;
+ 	} else if (ufs->config.index) {
+ 		pr_err("overlayfs: workdir is in-use by another mount, mount with '-o index=off' to override exclusive workdir protection.\n");
+ 		goto out;
+ 	} else {
+ 		pr_warn("overlayfs: workdir is in-use by another mount, accessing files from both mounts will result in undefined behavior.\n");
+ 	}
+ 
+ 	ufs->workbasedir = workpath->dentry;
+ 	err = 0;
+ out:
+ 	return err;
+ }
+ 
+ static int ovl_get_upper(struct ovl_fs *ufs, struct path *upperpath)
+ {
+ 	struct vfsmount *upper_mnt;
+ 
+ 	upper_mnt = clone_private_mount(upperpath);
+ 	if (IS_ERR(upper_mnt)) {
+ 		pr_err("overlayfs: failed to clone upperpath\n");
+ 		return PTR_ERR(upper_mnt);
+ 	}
+ 
+ 	/* Don't inherit atime flags */
+ 	upper_mnt->mnt_flags &= ~(MNT_NOATIME | MNT_NODIRATIME | MNT_RELATIME);
+ 	ufs->upper_mnt = upper_mnt;
+ 
+ 	return 0;
+ }
+ 
+ static int ovl_get_workdir(struct super_block *sb, struct ovl_fs *ufs,
+ 			   struct path *workpath)
+ {
+ 	struct dentry *temp;
+ 	int err;
+ 
+ 	ufs->workdir = ovl_workdir_create(sb, ufs, workpath->dentry,
+ 					  OVL_WORKDIR_NAME, false);
+ 	if (!ufs->workdir)
+ 		return 0;
+ 
+ 	/*
+ 	 * Upper should support d_type, else whiteouts are visible.  Given
+ 	 * workdir and upper are on same fs, we can do iterate_dir() on
+ 	 * workdir. This check requires successful creation of workdir in
+ 	 * previous step.
+ 	 */
+ 	err = ovl_check_d_type_supported(workpath);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	/*
+ 	 * We allowed this configuration and don't want to break users over
+ 	 * kernel upgrade. So warn instead of erroring out.
+ 	 */
+ 	if (!err)
+ 		pr_warn("overlayfs: upper fs needs to support d_type.\n");
+ 
+ 	/* Check if upper/work fs supports O_TMPFILE */
+ 	temp = ovl_do_tmpfile(ufs->workdir, S_IFREG | 0);
+ 	ufs->tmpfile = !IS_ERR(temp);
+ 	if (ufs->tmpfile)
+ 		dput(temp);
+ 	else
+ 		pr_warn("overlayfs: upper fs does not support tmpfile.\n");
+ 
+ 	/*
+ 	 * Check if upper/work fs supports trusted.overlay.* xattr
+ 	 */
+ 	err = ovl_do_setxattr(ufs->workdir, OVL_XATTR_OPAQUE, "0", 1, 0);
+ 	if (err) {
+ 		ufs->noxattr = true;
+ 		pr_warn("overlayfs: upper fs does not support xattr.\n");
+ 	} else {
+ 		vfs_removexattr(ufs->workdir, OVL_XATTR_OPAQUE);
+ 	}
+ 
+ 	/* Check if upper/work fs supports file handles */
+ 	if (ufs->config.index &&
+ 	    !ovl_can_decode_fh(ufs->workdir->d_sb)) {
+ 		ufs->config.index = false;
+ 		pr_warn("overlayfs: upper fs does not support file handles, falling back to index=off.\n");
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int ovl_get_lowerstack(struct super_block *sb, struct ovl_fs *ufs,
+ 			      struct path **stackp, unsigned int *stacklenp)
+ {
+ 	int err;
+ 	char *lowertmp, *lower;
+ 	struct path *stack;
+ 	unsigned int stacklen, numlower, i;
+ 	bool remote = false;
+ 
+ 	err = -ENOMEM;
+ 	lowertmp = kstrdup(ufs->config.lowerdir, GFP_KERNEL);
+ 	if (!lowertmp)
+ 		goto out;
+ 
+ 	err = -EINVAL;
+ 	stacklen = ovl_split_lowerdirs(lowertmp);
+ 	if (stacklen > OVL_MAX_STACK) {
+ 		pr_err("overlayfs: too many lower directories, limit is %d\n",
+ 		       OVL_MAX_STACK);
+ 		goto out;
+ 	} else if (!ufs->config.upperdir && stacklen == 1) {
+ 		pr_err("overlayfs: at least 2 lowerdir are needed while upperdir nonexistent\n");
+ 		goto out;
+ 	}
+ 
+ 	err = -ENOMEM;
+ 	stack = kcalloc(stacklen, sizeof(struct path), GFP_KERNEL);
+ 	if (!stack)
+ 		goto out;
+ 
+ 	err = -EINVAL;
+ 	lower = lowertmp;
+ 	for (numlower = 0; numlower < stacklen; numlower++) {
+ 		err = ovl_lower_dir(lower, &stack[numlower], ufs,
+ 				    &sb->s_stack_depth, &remote);
+ 		if (err)
+ 			goto out_free_stack;
+ 
+ 		lower = strchr(lower, '\0') + 1;
+ 	}
+ 
+ 	err = -EINVAL;
+ 	sb->s_stack_depth++;
+ 	if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
+ 		pr_err("overlayfs: maximum fs stacking depth exceeded\n");
+ 		goto out_free_stack;
+ 	}
+ 
+ 	*stackp = stack;
+ 	*stacklenp = numlower;
+ 
+ 	if (remote)
+ 		sb->s_d_op = &ovl_reval_dentry_operations;
+ 	else
+ 		sb->s_d_op = &ovl_dentry_operations;
+ 
+ 	err = 0;
+ 
+ out:
+ 	kfree(lowertmp);
+ 	return err;
+ 
+ out_free_stack:
+ 	for (i = 0; i < numlower; i++)
+ 		path_put(&stack[i]);
+ 	kfree(stack);
+ 	goto out;
+ }
+ 
++>>>>>>> 8ed61dc37ee0 (ovl: split out ovl_get_workdir() from ovl_fill_super())
  static int ovl_fill_super(struct super_block *sb, void *data, int silent)
  {
  	struct path upperpath = { };
@@@ -1010,79 -1096,11 +1224,85 @@@
  		if (err)
  			goto out_put_lowerpath;
  
 +		lower = strchr(lower, '\0') + 1;
 +	}
 +
 +	err = -EINVAL;
 +	*overlay_stack_depth += 1;
 +	if (*overlay_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
 +		pr_err("overlayfs: maximum fs stacking depth exceeded\n");
 +		goto out_put_lowerpath;
 +	}
 +
 +	if (ufs->config.upperdir) {
 +		ufs->upper_mnt = clone_private_mount(&upperpath);
 +		err = PTR_ERR(ufs->upper_mnt);
 +		if (IS_ERR(ufs->upper_mnt)) {
 +			pr_err("overlayfs: failed to clone upperpath\n");
 +			goto out_put_lowerpath;
 +		}
 +
 +		/* Don't inherit atime flags */
 +		ufs->upper_mnt->mnt_flags &= ~(MNT_NOATIME | MNT_NODIRATIME | MNT_RELATIME);
 +
  		sb->s_time_gran = ufs->upper_mnt->mnt_sb->s_time_gran;
  
++<<<<<<< HEAD
 +		ufs->workdir = ovl_workdir_create(sb, ufs, workpath.dentry,
 +						  OVL_WORKDIR_NAME, false);
 +		/*
 +		 * Upper should support d_type, else whiteouts are visible.
 +		 * Given workdir and upper are on same fs, we can do
 +		 * iterate_dir() on workdir. This check requires successful
 +		 * creation of workdir in previous step.
 +		 */
 +		if (ufs->workdir) {
 +			struct dentry *temp;
 +
 +			err = ovl_check_d_type_supported(&workpath);
 +			if (err < 0)
 +				goto out_put_workdir;
 +
 +			/*
 +			 * Warn instead of error to avoid breaking previously
 +			 * working configurations over upgrade. If d_type
 +			 * is not supported, whiteouts will become visible
 +			 * to user space.
 +			 */
 +			if (!err)
 +				pr_warn("overlayfs: upper fs needs to support d_type. This is an invalid configuration.\n");
 +
 +			/* Check if upper/work fs supports O_TMPFILE */
 +			temp = ovl_do_tmpfile(ufs->workdir, S_IFREG | 0);
 +			ufs->tmpfile = !IS_ERR(temp);
 +			if (ufs->tmpfile)
 +				dput(temp);
 +
 +			/*
 +			 * Check if upper/work fs supports trusted.overlay.*
 +			 * xattr
 +			 */
 +			err = ovl_do_setxattr(ufs->workdir, OVL_XATTR_OPAQUE,
 +					      "0", 1, 0);
 +			if (err) {
 +				ufs->noxattr = true;
 +				pr_warn("overlayfs: upper fs does not support xattr.\n");
 +			} else {
 +				vfs_removexattr(ufs->workdir, OVL_XATTR_OPAQUE);
 +			}
 +
 +			/* Check if upper/work fs supports file handles */
 +			if (ufs->config.index &&
 +			    !ovl_can_decode_fh(ufs->workdir->d_sb)) {
 +				ufs->config.index = false;
 +				pr_warn("overlayfs: upper fs does not support file handles, falling back to index=off.\n");
 +			}
 +		}
++=======
+ 		err = ovl_get_workdir(sb, ufs, &workpath);
+ 		if (err)
+ 			goto out_put_workdir;
++>>>>>>> 8ed61dc37ee0 (ovl: split out ovl_get_workdir() from ovl_fill_super())
  	}
  
  	err = -ENOMEM;
* Unmerged path fs/overlayfs/super.c
