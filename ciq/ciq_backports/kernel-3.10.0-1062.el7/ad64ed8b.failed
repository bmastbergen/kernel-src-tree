iavf: tracing infrastructure rename

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jesse Brandeburg <jesse.brandeburg@intel.com>
commit ad64ed8bf908d7d8261256031039b1589386c609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ad64ed8b.failed

Rename the i40e_trace file and fix up all the callers
to the new names inside the iavf_trace.h file.

	Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit ad64ed8bf908d7d8261256031039b1589386c609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40evf/i40e_trace.h
#	drivers/net/ethernet/intel/i40evf/i40e_txrx.c
#	drivers/net/ethernet/intel/i40evf/iavf_trace.h
#	drivers/net/ethernet/intel/iavf/i40e_trace.h
diff --cc drivers/net/ethernet/intel/i40evf/i40e_txrx.c
index 800d621606e8,7a33a783b80c..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.c
@@@ -4,8 -4,8 +4,13 @@@
  #include <linux/prefetch.h>
  #include <net/busy_poll.h>
  
++<<<<<<< HEAD:drivers/net/ethernet/intel/i40evf/i40e_txrx.c
 +#include "i40evf.h"
 +#include "i40e_trace.h"
++=======
+ #include "iavf.h"
+ #include "iavf_trace.h"
++>>>>>>> ad64ed8bf908 (iavf: tracing infrastructure rename):drivers/net/ethernet/intel/iavf/iavf_txrx.c
  #include "i40e_prototype.h"
  
  static inline __le64 build_ctob(u32 td_cmd, u32 td_offset, unsigned int size,
@@@ -211,10 -211,10 +216,10 @@@ static bool i40e_clean_tx_irq(struct i4
  		/* prevent any other reads prior to eop_desc */
  		smp_rmb();
  
- 		i40e_trace(clean_tx_irq, tx_ring, tx_desc, tx_buf);
+ 		iavf_trace(clean_tx_irq, tx_ring, tx_desc, tx_buf);
  		/* if the descriptor isn't done, no work yet to do */
  		if (!(eop_desc->cmd_type_offset_bsz &
 -		      cpu_to_le64(IAVF_TX_DESC_DTYPE_DESC_DONE)))
 +		      cpu_to_le64(I40E_TX_DESC_DTYPE_DESC_DONE)))
  			break;
  
  		/* clear next_to_watch to prevent false hangs */
@@@ -1561,13 -1551,13 +1566,13 @@@ static int i40e_clean_rx_irq(struct i40
  			   I40E_RXD_QW1_PTYPE_SHIFT;
  
  		/* populate checksum, VLAN, and protocol */
 -		iavf_process_skb_fields(rx_ring, rx_desc, skb, rx_ptype);
 +		i40evf_process_skb_fields(rx_ring, rx_desc, skb, rx_ptype);
  
  
 -		vlan_tag = (qword & BIT(IAVF_RX_DESC_STATUS_L2TAG1P_SHIFT)) ?
 +		vlan_tag = (qword & BIT(I40E_RX_DESC_STATUS_L2TAG1P_SHIFT)) ?
  			   le16_to_cpu(rx_desc->wb.qword0.lo_dword.l2tag1) : 0;
  
- 		i40e_trace(clean_rx_irq_rx, rx_ring, rx_desc, skb);
+ 		iavf_trace(clean_rx_irq_rx, rx_ring, rx_desc, skb);
  		i40e_receive_skb(rx_ring, skb, vlan_tag);
  		skb = NULL;
  
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_trace.h
* Unmerged path drivers/net/ethernet/intel/i40evf/iavf_trace.h
* Unmerged path drivers/net/ethernet/intel/iavf/i40e_trace.h
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_trace.h
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_txrx.c
diff --git a/drivers/net/ethernet/intel/i40evf/i40evf_main.c b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
index 950c8aeb0fc9..dd734f74d729 100644
--- a/drivers/net/ethernet/intel/i40evf/i40evf_main.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
@@ -9,7 +9,7 @@
  * CREATE_TRACE_POINTS defined
  */
 #define CREATE_TRACE_POINTS
-#include "i40e_trace.h"
+#include "iavf_trace.h"
 
 static int i40evf_setup_all_tx_resources(struct i40evf_adapter *adapter);
 static int i40evf_setup_all_rx_resources(struct i40evf_adapter *adapter);
* Unmerged path drivers/net/ethernet/intel/i40evf/iavf_trace.h
* Unmerged path drivers/net/ethernet/intel/iavf/i40e_trace.h
