x86/efi: Only load initrd above 4g on second try

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] efi: Only load initrd above 4g on second try (Lenny Szubowicz) [1608955]
Rebuild_FUZZ: 95.65%
commit-author Yinghai Lu <yinghai@kernel.org>
commit 47226ad4f4cfd1e91ded7f2ec42f83ff1c624663
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/47226ad4.failed

Mantas found that after commit 4bf7111f5016 ("x86/efi: Support initrd
loaded above 4G"), the kernel freezes at the earliest possible moment
when trying to boot via UEFI on Asus laptop.

Revert to old way to load initrd under 4G on first try, second try will
use above 4G buffer when initrd is too big and does not fit under 4G.

[ The cause of the freeze appears to be a firmware bug when reading
  file data into buffers above 4GB, though the exact reason is unknown.
  Mantas reports that the hang can be avoid if the file size is a
  multiple of 512 bytes, but I've seen some ASUS firmware simply
  corrupting the file data rather than freezing.

  Laszlo fixed an issue in the upstream EDK2 DiskIO code in Aug 2013
  which may possibly be related, commit 4e39b75e ("MdeModulePkg/DiskIoDxe:
  fix source/destination pointer of overrun transfer").

  Whatever the cause, it's unlikely that a fix will be forthcoming
  from the vendor, hence the workaround - Matt ]

	Cc: Laszlo Ersek <lersek@redhat.com>
	Reported-by: Mantas MikulÄ—nas <grawity@gmail.com>
	Reported-by: Harald Hoyer <harald@redhat.com>
	Tested-by: Anders Darander <anders@chargestorm.se>
	Tested-by: Calvin Walton <calvin.walton@kepstin.ca>
	Signed-off-by: Yinghai Lu <yinghai@kernel.org>
	Signed-off-by: Matt Fleming <matt.fleming@intel.com>
(cherry picked from commit 47226ad4f4cfd1e91ded7f2ec42f83ff1c624663)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/eboot.c
diff --cc arch/x86/boot/compressed/eboot.c
index 79174181d150,dca9842d8f91..000000000000
--- a/arch/x86/boot/compressed/eboot.c
+++ b/arch/x86/boot/compressed/eboot.c
@@@ -1106,6 -1030,8 +1106,11 @@@ struct boot_params *make_boot_params(st
  	u16 *s2;
  	u8 *s1;
  	int i;
++<<<<<<< HEAD
++=======
+ 	unsigned long ramdisk_addr;
+ 	unsigned long ramdisk_size;
++>>>>>>> 47226ad4f4cf (x86/efi: Only load initrd above 4g on second try)
  
  	efi_early = c;
  	sys_table = (efi_system_table_t *)(unsigned long)efi_early->table;
@@@ -1169,9 -1094,26 +1174,26 @@@
  
  	memset(sdt, 0, sizeof(*sdt));
  
++<<<<<<< HEAD
 +	status = handle_ramdisks(sys_table, image, hdr);
++=======
+ 	status = handle_cmdline_files(sys_table, image,
+ 				      (char *)(unsigned long)hdr->cmd_line_ptr,
+ 				      "initrd=", hdr->initrd_addr_max,
+ 				      &ramdisk_addr, &ramdisk_size);
+ 
+ 	if (status != EFI_SUCCESS &&
+ 	    hdr->xloadflags & XLF_CAN_BE_LOADED_ABOVE_4G) {
+ 		efi_printk(sys_table, "Trying to load files to higher address\n");
+ 		status = handle_cmdline_files(sys_table, image,
+ 				      (char *)(unsigned long)hdr->cmd_line_ptr,
+ 				      "initrd=", -1UL,
+ 				      &ramdisk_addr, &ramdisk_size);
+ 	}
+ 
++>>>>>>> 47226ad4f4cf (x86/efi: Only load initrd above 4g on second try)
  	if (status != EFI_SUCCESS)
  		goto fail2;
 -	hdr->ramdisk_image = ramdisk_addr & 0xffffffff;
 -	hdr->ramdisk_size  = ramdisk_size & 0xffffffff;
 -	boot_params->ext_ramdisk_image = (u64)ramdisk_addr >> 32;
 -	boot_params->ext_ramdisk_size  = (u64)ramdisk_size >> 32;
  
  	return boot_params;
  fail2:
* Unmerged path arch/x86/boot/compressed/eboot.c
