vhost: correctly check the return value of translate_desc() in log_used()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [vhost] correctly check the return value of translate_desc() in log_used() (Jason Wang) [1657577]
Rebuild_FUZZ: 94.96%
commit-author Jason Wang <jasowang@redhat.com>
commit 816db7663565cd23f74ed3d5c9240522e3fb0dda
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/816db766.failed

When fail, translate_desc() returns negative value, otherwise the
number of iovs. So we should fail when the return value is negative
instead of a blindly check against zero.

Detected by CoverityScan, CID# 1442593:  Control flow issues  (DEADCODE)

Fixes: cc5e71075947 ("vhost: log dirty page correctly")
	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Reported-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: Jason Wang <jasowang@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 816db7663565cd23f74ed3d5c9240522e3fb0dda)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vhost/vhost.c
diff --cc drivers/vhost/vhost.c
index 56c68f4f484c,a2e5dc7716e2..000000000000
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@@ -1700,8 -1738,71 +1700,74 @@@ static int log_write(void __user *log_b
  	return r;
  }
  
++<<<<<<< HEAD
++=======
+ static int log_write_hva(struct vhost_virtqueue *vq, u64 hva, u64 len)
+ {
+ 	struct vhost_umem *umem = vq->umem;
+ 	struct vhost_umem_node *u;
+ 	u64 start, end, l, min;
+ 	int r;
+ 	bool hit = false;
+ 
+ 	while (len) {
+ 		min = len;
+ 		/* More than one GPAs can be mapped into a single HVA. So
+ 		 * iterate all possible umems here to be safe.
+ 		 */
+ 		list_for_each_entry(u, &umem->umem_list, link) {
+ 			if (u->userspace_addr > hva - 1 + len ||
+ 			    u->userspace_addr - 1 + u->size < hva)
+ 				continue;
+ 			start = max(u->userspace_addr, hva);
+ 			end = min(u->userspace_addr - 1 + u->size,
+ 				  hva - 1 + len);
+ 			l = end - start + 1;
+ 			r = log_write(vq->log_base,
+ 				      u->start + start - u->userspace_addr,
+ 				      l);
+ 			if (r < 0)
+ 				return r;
+ 			hit = true;
+ 			min = min(l, min);
+ 		}
+ 
+ 		if (!hit)
+ 			return -EFAULT;
+ 
+ 		len -= min;
+ 		hva += min;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int log_used(struct vhost_virtqueue *vq, u64 used_offset, u64 len)
+ {
+ 	struct iovec iov[64];
+ 	int i, ret;
+ 
+ 	if (!vq->iotlb)
+ 		return log_write(vq->log_base, vq->log_addr + used_offset, len);
+ 
+ 	ret = translate_desc(vq, (uintptr_t)vq->used + used_offset,
+ 			     len, iov, 64, VHOST_ACCESS_WO);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	for (i = 0; i < ret; i++) {
+ 		ret = log_write_hva(vq,	(uintptr_t)iov[i].iov_base,
+ 				    iov[i].iov_len);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 816db7663565 (vhost: correctly check the return value of translate_desc() in log_used())
  int vhost_log_write(struct vhost_virtqueue *vq, struct vhost_log *log,
 -		    unsigned int log_num, u64 len, struct iovec *iov, int count)
 +		    unsigned int log_num, u64 len)
  {
  	int i, r;
  
* Unmerged path drivers/vhost/vhost.c
