perf script: Add support to display sample misc field

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 28a0b39877f5ed64ae9fadf95dddb90999309dee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/28a0b398.failed

Adding support to display sample misc field in form
of letter for each bit:

  # perf script -F +misc ...
   sched-messaging  1414 K     28690.636582:       4590 cycles ...
   sched-messaging  1407 U     28690.636600:     325620 cycles ...
   sched-messaging  1414 K     28690.636608:      19473 cycles ...
  misc field  __________/

The misc bits are assigned to following letters:

  PERF_RECORD_MISC_KERNEL        K
  PERF_RECORD_MISC_USER          U
  PERF_RECORD_MISC_HYPERVISOR    H
  PERF_RECORD_MISC_GUEST_KERNEL  G
  PERF_RECORD_MISC_GUEST_USER    g
  PERF_RECORD_MISC_MMAP_DATA*    M
  PERF_RECORD_MISC_COMM_EXEC     E
  PERF_RECORD_MISC_SWITCH_OUT    S

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20180107160356.28203-9-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 28a0b39877f5ed64ae9fadf95dddb90999309dee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-script.txt
#	tools/perf/builtin-script.c
diff --cc tools/perf/Documentation/perf-script.txt
index d682d995e0c3,93ae8d60e3d3..000000000000
--- a/tools/perf/Documentation/perf-script.txt
+++ b/tools/perf/Documentation/perf-script.txt
@@@ -116,8 -116,8 +116,13 @@@ OPTION
  --fields::
          Comma separated list of fields to print. Options are:
          comm, tid, pid, time, cpu, event, trace, ip, sym, dso, addr, symoff,
++<<<<<<< HEAD
 +	srcline, period, iregs, uregs, brstack, brstacksym, flags, brstackinsn, brstackoff, insn, insnlen,
 +	synth, phys_addr.
++=======
+         srcline, period, iregs, uregs, brstack, brstacksym, flags, bpf-output, brstackinsn,
+         brstackoff, callindent, insn, insnlen, synth, phys_addr, metric, misc.
++>>>>>>> 28a0b39877f5 (perf script: Add support to display sample misc field)
          Field list can be prepended with the type, trace, sw or hw,
          to indicate to which event type the field list applies.
          e.g., -F sw:comm,tid,time,ip,sym  and -F trace:time,cpu,trace
@@@ -217,6 -217,32 +222,35 @@@
  
  	The brstackoff field will print an offset into a specific dso/binary.
  
++<<<<<<< HEAD
++=======
+ 	With the metric option perf script can compute metrics for
+ 	sampling periods, similar to perf stat. This requires
+ 	specifying a group with multiple metrics with the :S option
+ 	for perf record. perf will sample on the first event, and
+ 	compute metrics for all the events in the group. Please note
+ 	that the metric computed is averaged over the whole sampling
+ 	period, not just for the sample point.
+ 
+ 	For sample events it's possible to display misc field with -F +misc option,
+ 	following letters are displayed for each bit:
+ 
+ 	  PERF_RECORD_MISC_KERNEL        K
+ 	  PERF_RECORD_MISC_USER          U
+ 	  PERF_RECORD_MISC_HYPERVISOR    H
+ 	  PERF_RECORD_MISC_GUEST_KERNEL  G
+ 	  PERF_RECORD_MISC_GUEST_USER    g
+ 	  PERF_RECORD_MISC_MMAP_DATA*    M
+ 	  PERF_RECORD_MISC_COMM_EXEC     E
+ 	  PERF_RECORD_MISC_SWITCH_OUT    S
+ 
+ 	  $ perf script -F +misc ...
+ 	   sched-messaging  1414 K     28690.636582:       4590 cycles ...
+ 	   sched-messaging  1407 U     28690.636600:     325620 cycles ...
+ 	   sched-messaging  1414 K     28690.636608:      19473 cycles ...
+ 	  misc field ___________/
+ 
++>>>>>>> 28a0b39877f5 (perf script: Add support to display sample misc field)
  -k::
  --vmlinux=<file>::
          vmlinux pathname
diff --cc tools/perf/builtin-script.c
index 13ce738785df,bb603495cf4a..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -89,6 -92,8 +89,11 @@@ enum perf_output_field 
  	PERF_OUTPUT_SYNTH           = 1U << 25,
  	PERF_OUTPUT_PHYS_ADDR       = 1U << 26,
  	PERF_OUTPUT_UREGS	    = 1U << 27,
++<<<<<<< HEAD
++=======
+ 	PERF_OUTPUT_METRIC	    = 1U << 28,
+ 	PERF_OUTPUT_MISC            = 1U << 29,
++>>>>>>> 28a0b39877f5 (perf script: Add support to display sample misc field)
  };
  
  struct output_option {
@@@ -122,6 -128,8 +127,11 @@@
  	{.str = "brstackoff", .field = PERF_OUTPUT_BRSTACKOFF},
  	{.str = "synth", .field = PERF_OUTPUT_SYNTH},
  	{.str = "phys_addr", .field = PERF_OUTPUT_PHYS_ADDR},
++<<<<<<< HEAD
++=======
+ 	{.str = "metric", .field = PERF_OUTPUT_METRIC},
+ 	{.str = "misc", .field = PERF_OUTPUT_MISC},
++>>>>>>> 28a0b39877f5 (perf script: Add support to display sample misc field)
  };
  
  enum {
@@@ -1392,6 -1530,88 +1444,91 @@@ static int data_src__fprintf(u64 data_s
  	return fprintf(fp, "%-*s", maxlen, out);
  }
  
++<<<<<<< HEAD
++=======
+ struct metric_ctx {
+ 	struct perf_sample	*sample;
+ 	struct thread		*thread;
+ 	struct perf_evsel	*evsel;
+ 	FILE 			*fp;
+ };
+ 
+ static void script_print_metric(void *ctx, const char *color,
+ 			        const char *fmt,
+ 			        const char *unit, double val)
+ {
+ 	struct metric_ctx *mctx = ctx;
+ 
+ 	if (!fmt)
+ 		return;
+ 	perf_sample__fprintf_start(mctx->sample, mctx->thread, mctx->evsel,
+ 				   PERF_RECORD_SAMPLE, mctx->fp);
+ 	fputs("\tmetric: ", mctx->fp);
+ 	if (color)
+ 		color_fprintf(mctx->fp, color, fmt, val);
+ 	else
+ 		printf(fmt, val);
+ 	fprintf(mctx->fp, " %s\n", unit);
+ }
+ 
+ static void script_new_line(void *ctx)
+ {
+ 	struct metric_ctx *mctx = ctx;
+ 
+ 	perf_sample__fprintf_start(mctx->sample, mctx->thread, mctx->evsel,
+ 				   PERF_RECORD_SAMPLE, mctx->fp);
+ 	fputs("\tmetric: ", mctx->fp);
+ }
+ 
+ static void perf_sample__fprint_metric(struct perf_script *script,
+ 				       struct thread *thread,
+ 				       struct perf_evsel *evsel,
+ 				       struct perf_sample *sample,
+ 				       FILE *fp)
+ {
+ 	struct perf_stat_output_ctx ctx = {
+ 		.print_metric = script_print_metric,
+ 		.new_line = script_new_line,
+ 		.ctx = &(struct metric_ctx) {
+ 				.sample = sample,
+ 				.thread = thread,
+ 				.evsel  = evsel,
+ 				.fp     = fp,
+ 			 },
+ 		.force_header = false,
+ 	};
+ 	struct perf_evsel *ev2;
+ 	static bool init;
+ 	u64 val;
+ 
+ 	if (!init) {
+ 		perf_stat__init_shadow_stats();
+ 		init = true;
+ 	}
+ 	if (!evsel->stats)
+ 		perf_evlist__alloc_stats(script->session->evlist, false);
+ 	if (evsel_script(evsel->leader)->gnum++ == 0)
+ 		perf_stat__reset_shadow_stats();
+ 	val = sample->period * evsel->scale;
+ 	perf_stat__update_shadow_stats(evsel,
+ 				       val,
+ 				       sample->cpu,
+ 				       &rt_stat);
+ 	evsel_script(evsel)->val = val;
+ 	if (evsel_script(evsel->leader)->gnum == evsel->leader->nr_members) {
+ 		for_each_group_member (ev2, evsel->leader) {
+ 			perf_stat__print_shadow_stats(ev2,
+ 						      evsel_script(ev2)->val,
+ 						      sample->cpu,
+ 						      &ctx,
+ 						      NULL,
+ 						      &rt_stat);
+ 		}
+ 		evsel_script(evsel->leader)->gnum = 0;
+ 	}
+ }
+ 
++>>>>>>> 28a0b39877f5 (perf script: Add support to display sample misc field)
  static void process_event(struct perf_script *script,
  			  struct perf_sample *sample, struct perf_evsel *evsel,
  			  struct addr_location *al,
@@@ -1652,7 -1878,44 +1790,46 @@@ static int process_comm_event(struct pe
  		sample->tid = event->comm.tid;
  		sample->pid = event->comm.pid;
  	}
- 	perf_sample__fprintf_start(sample, thread, evsel, stdout);
+ 	perf_sample__fprintf_start(sample, thread, evsel,
+ 				   PERF_RECORD_COMM, stdout);
+ 	perf_event__fprintf(event, stdout);
+ 	ret = 0;
+ out:
+ 	thread__put(thread);
+ 	return ret;
+ }
+ 
++<<<<<<< HEAD
++=======
+ static int process_namespaces_event(struct perf_tool *tool,
+ 				    union perf_event *event,
+ 				    struct perf_sample *sample,
+ 				    struct machine *machine)
+ {
+ 	struct thread *thread;
+ 	struct perf_script *script = container_of(tool, struct perf_script, tool);
+ 	struct perf_session *session = script->session;
+ 	struct perf_evsel *evsel = perf_evlist__id2evsel(session->evlist, sample->id);
+ 	int ret = -1;
+ 
+ 	thread = machine__findnew_thread(machine, event->namespaces.pid,
+ 					 event->namespaces.tid);
+ 	if (thread == NULL) {
+ 		pr_debug("problem processing NAMESPACES event, skipping it.\n");
+ 		return -1;
+ 	}
+ 
+ 	if (perf_event__process_namespaces(tool, event, sample, machine) < 0)
+ 		goto out;
+ 
+ 	if (!evsel->attr.sample_id_all) {
+ 		sample->cpu = 0;
+ 		sample->time = 0;
+ 		sample->tid = event->namespaces.tid;
+ 		sample->pid = event->namespaces.pid;
+ 	}
+ 	perf_sample__fprintf_start(sample, thread, evsel,
+ 				   PERF_RECORD_NAMESPACES, stdout);
  	perf_event__fprintf(event, stdout);
  	ret = 0;
  out:
@@@ -1660,6 -1923,6 +1837,7 @@@
  	return ret;
  }
  
++>>>>>>> 28a0b39877f5 (perf script: Add support to display sample misc field)
  static int process_fork_event(struct perf_tool *tool,
  			      union perf_event *event,
  			      struct perf_sample *sample,
* Unmerged path tools/perf/Documentation/perf-script.txt
* Unmerged path tools/perf/builtin-script.c
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index 78cf4eba2f01..e27e6058df18 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -197,6 +197,7 @@ struct perf_sample {
 	u32 flags;
 	u16 insn_len;
 	u8  cpumode;
+	u16 misc;
 	char insn[MAX_INSN];
 	void *raw_data;
 	struct ip_callchain *callchain;
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index c361a8c96c46..2de7bf306ea4 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -1994,6 +1994,7 @@ int perf_evsel__parse_sample(struct perf_evsel *evsel, union perf_event *event,
 	data->stream_id = data->id = data->time = -1ULL;
 	data->period = evsel->attr.sample_period;
 	data->cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
+	data->misc    = event->header.misc;
 	data->id = -1ULL;
 	data->data_src = PERF_MEM_DATA_SRC_NONE;
 
