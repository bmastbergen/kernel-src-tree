perf tools: Make perf depend on libbpf

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit ed63f34c026e9a60d17fa750ecdfe3f600d49393
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ed63f34c.failed

By adding libbpf into perf's Makefile, this patch enables perf to build
libbpf if libelf is found and neither NO_LIBELF nor NO_LIBBPF is set.

The newly introduced code is similar to how libapi and libtraceevent
are wired into Makefile.perf.

MANIFEST is also updated for 'make perf-*-src-pkg'.

Append make_no_libbpf to tools/perf/tests/make.

The 'bpf' feature check is appended into default FEATURE_TESTS and
FEATURE_DISPLAY, so perf will check the API version of bpf in
/path/to/kernel/include/uapi/linux/bpf.h. Which should not fail except
when we are trying to port this code to an old kernel.

Error messages are also updated to notify users about the lack of BPF
support in 'perf record' if libelf is missing or the BPF API check
failed.

tools/lib/bpf is added to TAG_FOLDERS to allow us to navigate libbpf
files when working on perf using tools/perf/tags.

	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Acked-by: Alexei Starovoitov <ast@plumgrid.com>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kaixu Xia <xiakaixu@huawei.com>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1444826502-49291-2-git-send-email-wangnan0@huawei.com
[ Document NO_LIBBPF in Makefile.perf, noted by Jiri Olsa ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ed63f34c026e9a60d17fa750ecdfe3f600d49393)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/build/Makefile.feature
#	tools/perf/MANIFEST
#	tools/perf/Makefile.config
#	tools/perf/Makefile.perf
#	tools/perf/tests/make
diff --cc tools/build/Makefile.feature
index 5e1fc2b77bc8,37ff4c9f92f1..000000000000
--- a/tools/build/Makefile.feature
+++ b/tools/build/Makefile.feature
@@@ -27,85 -27,53 +27,135 @@@ ende
  #   the rule that uses them - an example for that is the 'bionic'
  #   feature check. ]
  #
++<<<<<<< HEAD
 +FEATURE_TESTS_BASIC :=                  \
 +        backtrace                       \
 +        dwarf                           \
 +        dwarf_getlocations              \
 +        fortify-source                  \
 +        sync-compare-and-swap           \
 +        glibc                           \
 +        gtk2                            \
 +        gtk2-infobar                    \
 +        libaudit                        \
 +        libbfd                          \
 +        libelf                          \
 +        libelf-getphdrnum               \
 +        libelf-gelf_getnote             \
 +        libelf-getshdrstrndx            \
 +        libelf-mmap                     \
 +        libnuma                         \
 +        numa_num_possible_cpus          \
 +        libperl                         \
 +        libpython                       \
 +        libpython-version               \
 +        libslang                        \
 +        libcrypto                       \
 +        libunwind                       \
 +        libunwind-x86                   \
 +        libunwind-x86_64                \
 +        libunwind-arm                   \
 +        libunwind-aarch64               \
 +        pthread-attr-setaffinity-np     \
 +        stackprotector-all              \
 +        timerfd                         \
 +        libdw-dwarf-unwind              \
 +        zlib                            \
 +        lzma                            \
 +        get_cpuid                       \
 +        sched_getcpu			\
 +        sdt				\
 +        setns
 +
 +# FEATURE_TESTS_BASIC + FEATURE_TESTS_EXTRA is the complete list
 +# of all feature tests
 +FEATURE_TESTS_EXTRA :=                  \
 +         bionic                         \
 +         compile-32                     \
 +         compile-x32                    \
 +         cplus-demangle                 \
 +         hello                          \
 +         libbabeltrace                  \
 +         liberty                        \
 +         liberty-z                      \
 +         libunwind-debug-frame          \
 +         libunwind-debug-frame-arm      \
 +         libunwind-debug-frame-aarch64
 +
 +FEATURE_TESTS ?= $(FEATURE_TESTS_BASIC)
 +
 +ifeq ($(FEATURE_TESTS),all)
 +  FEATURE_TESTS := $(FEATURE_TESTS_BASIC) $(FEATURE_TESTS_EXTRA)
 +endif
 +
 +FEATURE_DISPLAY ?=              \
 +        dwarf                   \
 +        dwarf_getlocations      \
 +        glibc                   \
 +        gtk2                    \
 +        libaudit                \
 +        libbfd                  \
 +        libelf                  \
 +        libnuma                 \
 +        numa_num_possible_cpus  \
 +        libperl                 \
 +        libpython               \
 +        libslang                \
 +        libcrypto               \
 +        libunwind               \
 +        libdw-dwarf-unwind      \
 +        zlib                    \
 +        lzma                    \
 +        get_cpuid
++=======
+ FEATURE_TESTS ?=			\
+ 	backtrace			\
+ 	dwarf				\
+ 	fortify-source			\
+ 	sync-compare-and-swap		\
+ 	glibc				\
+ 	gtk2				\
+ 	gtk2-infobar			\
+ 	libaudit			\
+ 	libbfd				\
+ 	libelf				\
+ 	libelf-getphdrnum		\
+ 	libelf-mmap			\
+ 	libnuma				\
+ 	numa_num_possible_cpus		\
+ 	libperl				\
+ 	libpython			\
+ 	libpython-version		\
+ 	libslang			\
+ 	libunwind			\
+ 	pthread-attr-setaffinity-np	\
+ 	stackprotector-all		\
+ 	timerfd				\
+ 	libdw-dwarf-unwind		\
+ 	zlib				\
+ 	lzma				\
+ 	get_cpuid			\
+ 	bpf
+ 
+ FEATURE_DISPLAY ?=			\
+ 	dwarf				\
+ 	glibc				\
+ 	gtk2				\
+ 	libaudit			\
+ 	libbfd				\
+ 	libelf				\
+ 	libnuma				\
+ 	numa_num_possible_cpus		\
+ 	libperl				\
+ 	libpython			\
+ 	libslang			\
+ 	libunwind			\
+ 	libdw-dwarf-unwind		\
+ 	zlib				\
+ 	lzma				\
+ 	get_cpuid			\
+ 	bpf
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  
  # Set FEATURE_CHECK_(C|LD)FLAGS-all for all FEATURE_TESTS features.
  # If in the future we need per-feature checks/flags for features not
diff --cc tools/perf/MANIFEST
index a668348ae289,39c38cb45b00..000000000000
--- a/tools/perf/MANIFEST
+++ b/tools/perf/MANIFEST
@@@ -1,17 -1,86 +1,81 @@@
  tools/perf
 -tools/arch/alpha/include/asm/barrier.h
 -tools/arch/arm/include/asm/barrier.h
 -tools/arch/ia64/include/asm/barrier.h
 -tools/arch/mips/include/asm/barrier.h
 -tools/arch/powerpc/include/asm/barrier.h
 -tools/arch/s390/include/asm/barrier.h
 -tools/arch/sh/include/asm/barrier.h
 -tools/arch/sparc/include/asm/barrier.h
 -tools/arch/sparc/include/asm/barrier_32.h
 -tools/arch/sparc/include/asm/barrier_64.h
 -tools/arch/tile/include/asm/barrier.h
 -tools/arch/x86/include/asm/barrier.h
 -tools/arch/xtensa/include/asm/barrier.h
 +tools/arch
  tools/scripts
  tools/build
 -tools/arch/x86/include/asm/atomic.h
 -tools/arch/x86/include/asm/rmwcc.h
 +tools/include
  tools/lib/traceevent
+ tools/lib/bpf
  tools/lib/api
 -tools/lib/bpf
 +tools/lib/subcmd
  tools/lib/hweight.c
  tools/lib/rbtree.c
 +tools/lib/string.c
  tools/lib/symbol/kallsyms.c
  tools/lib/symbol/kallsyms.h
++<<<<<<< HEAD
 +tools/lib/find_bit.c
 +tools/lib/bitmap.c
 +tools/lib/str_error_r.c
 +tools/lib/vsprintf.c
++=======
+ tools/lib/util/find_next_bit.c
+ tools/include/asm/atomic.h
+ tools/include/asm/barrier.h
+ tools/include/asm/bug.h
+ tools/include/asm-generic/barrier.h
+ tools/include/asm-generic/bitops/arch_hweight.h
+ tools/include/asm-generic/bitops/atomic.h
+ tools/include/asm-generic/bitops/const_hweight.h
+ tools/include/asm-generic/bitops/__ffs.h
+ tools/include/asm-generic/bitops/__fls.h
+ tools/include/asm-generic/bitops/find.h
+ tools/include/asm-generic/bitops/fls64.h
+ tools/include/asm-generic/bitops/fls.h
+ tools/include/asm-generic/bitops/hweight.h
+ tools/include/asm-generic/bitops.h
+ tools/include/linux/atomic.h
+ tools/include/linux/bitops.h
+ tools/include/linux/compiler.h
+ tools/include/linux/filter.h
+ tools/include/linux/hash.h
+ tools/include/linux/kernel.h
+ tools/include/linux/list.h
+ tools/include/linux/log2.h
+ tools/include/linux/poison.h
+ tools/include/linux/rbtree.h
+ tools/include/linux/rbtree_augmented.h
+ tools/include/linux/types.h
+ tools/include/linux/err.h
+ include/asm-generic/bitops/arch_hweight.h
+ include/asm-generic/bitops/const_hweight.h
+ include/asm-generic/bitops/fls64.h
+ include/asm-generic/bitops/__fls.h
+ include/asm-generic/bitops/fls.h
+ include/linux/perf_event.h
+ include/linux/list.h
+ include/linux/hash.h
+ include/linux/stringify.h
+ include/linux/swab.h
+ arch/*/include/asm/unistd*.h
+ arch/*/include/uapi/asm/unistd*.h
+ arch/*/include/uapi/asm/perf_regs.h
+ arch/*/lib/memcpy*.S
+ arch/*/lib/memset*.S
+ include/linux/poison.h
+ include/linux/hw_breakpoint.h
+ include/uapi/linux/perf_event.h
+ include/uapi/linux/bpf.h
+ include/uapi/linux/bpf_common.h
+ include/uapi/linux/const.h
+ include/uapi/linux/swab.h
+ include/uapi/linux/hw_breakpoint.h
+ arch/x86/include/asm/svm.h
+ arch/x86/include/asm/vmx.h
+ arch/x86/include/asm/kvm_host.h
+ arch/x86/include/uapi/asm/svm.h
+ arch/x86/include/uapi/asm/vmx.h
+ arch/x86/include/uapi/asm/kvm.h
+ arch/x86/include/uapi/asm/kvm_perf.h
+ arch/s390/include/uapi/asm/sie.h
+ arch/s390/include/uapi/asm/kvm_perf.h
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
diff --cc tools/perf/Makefile.config
index ccc7effe29cb,de89ec574361..000000000000
--- a/tools/perf/Makefile.config
+++ b/tools/perf/Makefile.config
@@@ -101,30 -84,31 +101,31 @@@ ifeq ($(NO_PERF_REGS),0
    CFLAGS += -DHAVE_PERF_REGS_SUPPORT
  endif
  
 -ifndef NO_LIBELF
 -  # for linking with debug library, run like:
 -  # make DEBUG=1 LIBDW_DIR=/opt/libdw/
 -  ifdef LIBDW_DIR
 -    LIBDW_CFLAGS  := -I$(LIBDW_DIR)/include
 -    LIBDW_LDFLAGS := -L$(LIBDW_DIR)/lib
 -  endif
 -  FEATURE_CHECK_CFLAGS-libdw-dwarf-unwind := $(LIBDW_CFLAGS)
 -  FEATURE_CHECK_LDFLAGS-libdw-dwarf-unwind := $(LIBDW_LDFLAGS) -ldw
 +# for linking with debug library, run like:
 +# make DEBUG=1 LIBDW_DIR=/opt/libdw/
 +ifdef LIBDW_DIR
 +  LIBDW_CFLAGS  := -I$(LIBDW_DIR)/include
 +  LIBDW_LDFLAGS := -L$(LIBDW_DIR)/lib
 +endif
 +DWARFLIBS := -ldw
 +ifeq ($(findstring -static,${LDFLAGS}),-static)
 +  DWARFLIBS += -lelf -lebl -ldl -lz -llzma -lbz2
  endif
 +FEATURE_CHECK_CFLAGS-libdw-dwarf-unwind := $(LIBDW_CFLAGS)
 +FEATURE_CHECK_LDFLAGS-libdw-dwarf-unwind := $(LIBDW_LDFLAGS) $(DWARFLIBS)
  
 -ifdef LIBBABELTRACE
 -  # for linking with debug library, run like:
 -  # make DEBUG=1 LIBBABELTRACE_DIR=/opt/libbabeltrace/
 -  ifdef LIBBABELTRACE_DIR
 -    LIBBABELTRACE_CFLAGS  := -I$(LIBBABELTRACE_DIR)/include
 -    LIBBABELTRACE_LDFLAGS := -L$(LIBBABELTRACE_DIR)/lib
 -  endif
 -  FEATURE_CHECK_CFLAGS-libbabeltrace := $(LIBBABELTRACE_CFLAGS)
 -  FEATURE_CHECK_LDFLAGS-libbabeltrace := $(LIBBABELTRACE_LDFLAGS) -lbabeltrace-ctf
 +# for linking with debug library, run like:
 +# make DEBUG=1 LIBBABELTRACE_DIR=/opt/libbabeltrace/
 +ifdef LIBBABELTRACE_DIR
 +  LIBBABELTRACE_CFLAGS  := -I$(LIBBABELTRACE_DIR)/include
 +  LIBBABELTRACE_LDFLAGS := -L$(LIBBABELTRACE_DIR)/lib
  endif
 +FEATURE_CHECK_CFLAGS-libbabeltrace := $(LIBBABELTRACE_CFLAGS)
 +FEATURE_CHECK_LDFLAGS-libbabeltrace := $(LIBBABELTRACE_LDFLAGS) -lbabeltrace-ctf
  
+ FEATURE_CHECK_CFLAGS-bpf = -I. -I$(srctree)/tools/include -I$(srctree)/arch/$(ARCH)/include/uapi -I$(srctree)/include/uapi
  # include ARCH specific config
 --include $(src-perf)/arch/$(ARCH)/Makefile
 +-include $(src-perf)/arch/$(SRCARCH)/Makefile
  
  ifdef PERF_HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET
    CFLAGS += -DHAVE_ARCH_REGS_QUERY_REGISTER_OFFSET
@@@ -278,7 -238,7 +279,11 @@@ ifdef NO_LIBEL
    NO_DEMANGLE := 1
    NO_LIBUNWIND := 1
    NO_LIBDW_DWARF_UNWIND := 1
++<<<<<<< HEAD:tools/perf/Makefile.config
 +  NO_JVMTI := 1
++=======
+   NO_LIBBPF := 1
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf):tools/perf/config/Makefile
  else
    ifeq ($(feature-libelf), 0)
      ifeq ($(feature-glibc), 1)
@@@ -288,14 -248,14 +293,22 @@@
        LIBC_SUPPORT := 1
      endif
      ifeq ($(LIBC_SUPPORT),1)
++<<<<<<< HEAD:tools/perf/Makefile.config
 +      msg := $(warning No libelf found, disables 'probe' tool, jvmti please install elfutils-libelf-devel/libelf-dev);
++=======
+       msg := $(warning No libelf found, disables 'probe' tool and BPF support in 'perf record', please install elfutils-libelf-devel/libelf-dev);
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf):tools/perf/config/Makefile
  
        NO_LIBELF := 1
        NO_DWARF := 1
        NO_DEMANGLE := 1
        NO_LIBUNWIND := 1
        NO_LIBDW_DWARF_UNWIND := 1
++<<<<<<< HEAD:tools/perf/Makefile.config
 +      NO_JVMTI := 1
++=======
+       NO_LIBBPF := 1
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf):tools/perf/config/Makefile
      else
        ifneq ($(filter s% -static%,$(LDFLAGS),),)
          msg := $(error No static glibc found, please install glibc-static);
@@@ -372,70 -312,35 +385,84 @@@ ifndef NO_LIBEL
        $(call detected,CONFIG_DWARF)
      endif # PERF_HAVE_DWARF_REGS
    endif # NO_DWARF
+ 
+   ifndef NO_LIBBPF
+     ifeq ($(feature-bpf), 1)
+       CFLAGS += -DHAVE_LIBBPF_SUPPORT
+       $(call detected,CONFIG_LIBBPF)
+     endif
+   endif # NO_LIBBPF
  endif # NO_LIBELF
  
 -ifeq ($(ARCH),powerpc)
 +ifndef NO_SDT
 +  ifneq ($(feature-sdt), 1)
 +    msg := $(warning No sys/sdt.h found, no SDT events are defined, please install systemtap-sdt-devel or systemtap-sdt-dev);
 +    NO_SDT := 1;
 +  else
 +    CFLAGS += -DHAVE_SDT_EVENT
 +    $(call detected,CONFIG_SDT_EVENT)
 +  endif
 +endif
 +
 +ifdef PERF_HAVE_JITDUMP
 +  ifndef NO_LIBELF
 +    $(call detected,CONFIG_JITDUMP)
 +    CFLAGS += -DHAVE_JITDUMP
 +  endif
 +endif
 +
 +ifeq ($(SRCARCH),powerpc)
    ifndef NO_DWARF
      CFLAGS += -DHAVE_SKIP_CALLCHAIN_IDX
    endif
  endif
  
  ifndef NO_LIBUNWIND
 +  have_libunwind :=
 +
 +  ifeq ($(feature-libunwind-x86), 1)
 +    $(call detected,CONFIG_LIBUNWIND_X86)
 +    CFLAGS += -DHAVE_LIBUNWIND_X86_SUPPORT
 +    LDFLAGS += -lunwind-x86
 +    EXTLIBS_LIBUNWIND += -lunwind-x86
 +    have_libunwind = 1
 +  endif
 +
 +  ifeq ($(feature-libunwind-aarch64), 1)
 +    $(call detected,CONFIG_LIBUNWIND_AARCH64)
 +    CFLAGS += -DHAVE_LIBUNWIND_AARCH64_SUPPORT
 +    LDFLAGS += -lunwind-aarch64
 +    EXTLIBS_LIBUNWIND += -lunwind-aarch64
 +    have_libunwind = 1
 +    $(call feature_check,libunwind-debug-frame-aarch64)
 +    ifneq ($(feature-libunwind-debug-frame-aarch64), 1)
 +      msg := $(warning No debug_frame support found in libunwind-aarch64);
 +      CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME_AARCH64
 +    endif
 +  endif
 +
    ifneq ($(feature-libunwind), 1)
      msg := $(warning No libunwind found. Please install libunwind-dev[el] >= 1.1 and/or set LIBUNWIND_DIR);
 +    NO_LOCAL_LIBUNWIND := 1
 +  else
 +    have_libunwind := 1
 +    $(call detected,CONFIG_LOCAL_LIBUNWIND)
 +  endif
 +
 +  ifneq ($(have_libunwind), 1)
      NO_LIBUNWIND := 1
    endif
 +else
 +  NO_LOCAL_LIBUNWIND := 1
  endif
  
+ ifndef NO_LIBBPF
+   ifneq ($(feature-bpf), 1)
+     msg := $(warning BPF API too old. Please install recent kernel headers. BPF support in 'perf record' is disabled.)
+     NO_LIBBPF := 1
+   endif
+ endif
+ 
  dwarf-post-unwind := 1
  dwarf-post-unwind-text := BUG
  
diff --cc tools/perf/Makefile.perf
index 16b2e660571f,1e2e2d1d26b7..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -84,17 -76,7 +84,21 @@@ include ../scripts/utilities.ma
  #
  # Define NO_AUXTRACE if you do not want AUX area tracing support
  #
++<<<<<<< HEAD
 +# Define NO_SDT if you do not want to define SDT event in perf tools,
 +# note that it doesn't disable SDT scanning support.
 +#
 +# Define FEATURES_DUMP to provide features detection dump file
 +# and bypass the feature detection
 +#
 +# Define NO_JVMTI if you do not want jvmti agent built
 +#
 +# Define LIBCLANGLLVM if you DO want builtin clang and llvm support.
 +# When selected, pass LLVM_CONFIG=/path/to/llvm-config to `make' if
 +# llvm-config is not in $PATH.
++=======
+ # Define NO_LIBBPF if you do not want BPF support
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  
  # As per kernel Makefile, avoid funny character set dependencies
  unexport LC_ALL
@@@ -167,7 -145,11 +171,15 @@@ BISON   ?= biso
  STRIP   = strip
  AWK     = awk
  
++<<<<<<< HEAD
 +# include Makefile.config by default and rule out
++=======
+ LIB_DIR          = $(srctree)/tools/lib/api/
+ TRACE_EVENT_DIR = $(srctree)/tools/lib/traceevent/
+ BPF_DIR = $(srctree)/tools/lib/bpf/
+ 
+ # include config/Makefile by default and rule out
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  # non-config cases
  config := 1
  
@@@ -258,34 -183,28 +270,47 @@@ strip-libs = $(filter-out -l%,$(1)
  
  ifneq ($(OUTPUT),)
    TE_PATH=$(OUTPUT)
++<<<<<<< HEAD
 +  SUBCMD_PATH=$(OUTPUT)
++=======
+   BPF_PATH=$(OUTPUT)
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  ifneq ($(subdir),)
 -  LIB_PATH=$(OUTPUT)/../lib/api/
 +  API_PATH=$(OUTPUT)/../lib/api/
  else
 -  LIB_PATH=$(OUTPUT)
 +  API_PATH=$(OUTPUT)
  endif
  else
    TE_PATH=$(TRACE_EVENT_DIR)
++<<<<<<< HEAD
 +  API_PATH=$(LIB_DIR)
 +  SUBCMD_PATH=$(SUBCMD_DIR)
++=======
+   LIB_PATH=$(LIB_DIR)
+   BPF_PATH=$(BPF_DIR)
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  endif
  
  LIBTRACEEVENT = $(TE_PATH)libtraceevent.a
  export LIBTRACEEVENT
  
  LIBTRACEEVENT_DYNAMIC_LIST = $(TE_PATH)libtraceevent-dynamic-list
 -LIBTRACEEVENT_DYNAMIC_LIST_LDFLAGS = -Xlinker --dynamic-list=$(LIBTRACEEVENT_DYNAMIC_LIST)
  
 -LIBAPI = $(LIB_PATH)libapi.a
 +#
 +# The static build has no dynsym table, so this does not work for
 +# static build. Looks like linker starts to scream about that now
 +# (in Fedora 26) so we need to switch it off for static build.
 +DYNAMIC_LIST_LDFLAGS               = -Xlinker --dynamic-list=$(LIBTRACEEVENT_DYNAMIC_LIST)
 +LIBTRACEEVENT_DYNAMIC_LIST_LDFLAGS = $(if $(findstring -static,$(LDFLAGS)),,$(DYNAMIC_LIST_LDFLAGS))
 +
 +LIBAPI = $(API_PATH)libapi.a
  export LIBAPI
  
++<<<<<<< HEAD
 +LIBSUBCMD = $(SUBCMD_PATH)libsubcmd.a
++=======
+ LIBBPF = $(BPF_PATH)libbpf.a
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  
  # python extension build directories
  PYTHON_EXTBUILD     := $(OUTPUT)python_ext_build/
@@@ -334,7 -257,10 +359,14 @@@ export PERL_PAT
  
  LIB_FILE=$(OUTPUT)libperf.a
  
++<<<<<<< HEAD
 +PERFLIBS = $(LIB_FILE) $(LIBAPI) $(LIBTRACEEVENT) $(LIBSUBCMD)
++=======
+ PERFLIBS = $(LIB_FILE) $(LIBAPI) $(LIBTRACEEVENT)
+ ifndef NO_LIBBPF
+   PERFLIBS += $(LIBBPF)
+ endif
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  
  # We choose to avoid "if .. else if .. else .. endif endif"
  # because maintaining the nesting to match is a pain.  If
@@@ -643,12 -430,12 +675,21 @@@ $(LIBAPI)-clean
  	$(call QUIET_CLEAN, libapi)
  	$(Q)$(MAKE) -C $(LIB_DIR) O=$(OUTPUT) clean >/dev/null
  
++<<<<<<< HEAD
 +$(LIBSUBCMD): FORCE
 +	$(Q)$(MAKE) -C $(SUBCMD_DIR) O=$(OUTPUT) $(OUTPUT)libsubcmd.a
 +
 +$(LIBSUBCMD)-clean:
 +	$(call QUIET_CLEAN, libsubcmd)
 +	$(Q)$(MAKE) -C $(SUBCMD_DIR) O=$(OUTPUT) clean
++=======
+ $(LIBBPF): FORCE
+ 	$(Q)$(MAKE) -C $(BPF_DIR) O=$(OUTPUT) $(OUTPUT)libbpf.a
+ 
+ $(LIBBPF)-clean:
+ 	$(call QUIET_CLEAN, libbpf)
+ 	$(Q)$(MAKE) -C $(BPF_DIR) O=$(OUTPUT) clean >/dev/null
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  
  help:
  	@echo 'Perf make targets:'
@@@ -689,7 -476,7 +730,11 @@@ INSTALL_DOC_TARGETS += quick-install-do
  $(DOC_TARGETS):
  	$(QUIET_SUBDIR0)Documentation $(QUIET_SUBDIR1) $(@:doc=all)
  
++<<<<<<< HEAD
 +TAG_FOLDERS= . ../lib ../include
++=======
+ TAG_FOLDERS= . ../lib/traceevent ../lib/api ../lib/symbol ../include ../lib/bpf
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  TAG_FILES= ../../include/uapi/linux/perf_event.h
  
  TAGS:
@@@ -814,42 -582,18 +859,53 @@@ $(INSTALL_DOC_TARGETS)
  #
  config-clean:
  	$(call QUIET_CLEAN, config)
 -	$(Q)$(MAKE) -C $(srctree)/tools/build/feature/ clean >/dev/null
 +	$(Q)$(MAKE) -C $(srctree)/tools/build/feature/ $(if $(OUTPUT),OUTPUT=$(OUTPUT)feature/,) clean >/dev/null
  
++<<<<<<< HEAD
 +python-clean:
++=======
+ clean: $(LIBTRACEEVENT)-clean $(LIBAPI)-clean $(LIBBPF)-clean config-clean
+ 	$(call QUIET_CLEAN, core-objs)  $(RM) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf-with-kcore $(LANG_BINDINGS)
+ 	$(Q)find . -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete
+ 	$(Q)$(RM) $(OUTPUT).config-detected
+ 	$(call QUIET_CLEAN, core-progs) $(RM) $(ALL_PROGRAMS) perf perf-read-vdso32 perf-read-vdsox32
+ 	$(call QUIET_CLEAN, core-gen)   $(RM)  *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope* $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)FEATURE-DUMP $(OUTPUT)util/*-bison* $(OUTPUT)util/*-flex* \
+ 		$(OUTPUT)util/intel-pt-decoder/inat-tables.c
+ 	$(QUIET_SUBDIR0)Documentation $(QUIET_SUBDIR1) clean
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  	$(python-clean)
  
 +clean:: $(LIBTRACEEVENT)-clean $(LIBAPI)-clean $(LIBSUBCMD)-clean config-clean fixdep-clean python-clean
 +	$(call QUIET_CLEAN, core-objs)  $(RM) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf-with-kcore $(LANG_BINDINGS)
 +	$(Q)find $(if $(OUTPUT),$(OUTPUT),.) -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete
 +	$(Q)$(RM) $(OUTPUT).config-detected
 +	$(call QUIET_CLEAN, core-progs) $(RM) $(ALL_PROGRAMS) perf perf-read-vdso32 perf-read-vdsox32 $(OUTPUT)pmu-events/jevents $(OUTPUT)$(LIBJVMTI).so
 +	$(call QUIET_CLEAN, core-gen)   $(RM)  *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope* $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)FEATURE-DUMP $(OUTPUT)util/*-bison* $(OUTPUT)util/*-flex* \
 +		$(OUTPUT)util/intel-pt-decoder/inat-tables.c \
 +		$(OUTPUT)tests/llvm-src-{base,kbuild,prologue}.c \
 +		$(OUTPUT)pmu-events/pmu-events.c \
 +		$(OUTPUT)$(madvise_behavior_array) \
 +		$(OUTPUT)$(drm_ioctl_array) \
 +		$(OUTPUT)$(pkey_alloc_access_rights_array) \
 +		$(OUTPUT)$(sndrv_ctl_ioctl_array) \
 +		$(OUTPUT)$(sndrv_pcm_ioctl_array) \
 +		$(OUTPUT)$(kvm_ioctl_array) \
 +		$(OUTPUT)$(vhost_virtio_ioctl_array) \
 +		$(OUTPUT)$(perf_ioctl_array) \
 +		$(OUTPUT)$(prctl_option_array)
 +	$(QUIET_SUBDIR0)Documentation $(QUIET_SUBDIR1) clean
 +
 +#
 +# To provide FEATURE-DUMP into $(FEATURE_DUMP_COPY)
 +# file if defined, with no further action.
 +feature-dump:
 +ifdef FEATURE_DUMP_COPY
 +	@cp $(OUTPUT)FEATURE-DUMP $(FEATURE_DUMP_COPY)
 +	@echo "FEATURE-DUMP file copied into $(FEATURE_DUMP_COPY)"
 +else
 +	@echo "FEATURE-DUMP file available in $(OUTPUT)FEATURE-DUMP"
 +endif
 +
  #
  # Trick: if ../../.git does not exist - we are building out of tree for example,
  # then force version regeneration:
diff --cc tools/perf/tests/make
index a4d4f22b726e,2cbd0c6901e3..000000000000
--- a/tools/perf/tests/make
+++ b/tools/perf/tests/make
@@@ -79,10 -44,7 +79,14 @@@ make_no_libnuma     := NO_LIBNUMA=
  make_no_libaudit    := NO_LIBAUDIT=1
  make_no_libbionic   := NO_LIBBIONIC=1
  make_no_auxtrace    := NO_AUXTRACE=1
++<<<<<<< HEAD
 +make_no_libcrypto   := NO_LIBCRYPTO=1
 +make_with_babeltrace:= LIBBABELTRACE=1
 +make_no_sdt	    := NO_SDT=1
 +make_with_clangllvm := LIBCLANGLLVM=1
++=======
+ make_no_libbpf	    := NO_LIBBPF=1
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  make_tags           := tags
  make_cscope         := cscope
  make_help           := help
@@@ -105,8 -67,7 +109,12 @@@ make_static         := LDFLAGS=-stati
  make_minimal        := NO_LIBPERL=1 NO_LIBPYTHON=1 NO_NEWT=1 NO_GTK2=1
  make_minimal        += NO_DEMANGLE=1 NO_LIBELF=1 NO_LIBUNWIND=1 NO_BACKTRACE=1
  make_minimal        += NO_LIBNUMA=1 NO_LIBAUDIT=1 NO_LIBBIONIC=1
++<<<<<<< HEAD
 +make_minimal        += NO_LIBDW_DWARF_UNWIND=1 NO_AUXTRACE=1
 +make_minimal        += NO_LIBCRYPTO=1 NO_SDT=1 NO_JVMTI=1
++=======
+ make_minimal        += NO_LIBDW_DWARF_UNWIND=1 NO_AUXTRACE=1 NO_LIBBPF=1
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  
  # $(run) contains all available tests
  run := make_pure
@@@ -137,8 -95,7 +145,12 @@@ run += make_no_libnum
  run += make_no_libaudit
  run += make_no_libbionic
  run += make_no_auxtrace
++<<<<<<< HEAD
 +run += make_with_babeltrace
 +run += make_with_clangllvm
++=======
+ run += make_no_libbpf
++>>>>>>> ed63f34c026e (perf tools: Make perf depend on libbpf)
  run += make_help
  run += make_doc
  run += make_perf_o
* Unmerged path tools/build/Makefile.feature
* Unmerged path tools/perf/MANIFEST
* Unmerged path tools/perf/Makefile.config
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/tests/make
