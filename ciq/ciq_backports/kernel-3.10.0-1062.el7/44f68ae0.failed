net/mlx5e: Move flow steering declarations into en/fs.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Move flow steering declarations into en/fs.h (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 96.23%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 44f68ae0cad6afbd72d3de1c7b0e149c1655b626
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/44f68ae0.failed

Move flow steering declarations and definitions into the dedicated
en/fs.h header file

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Moshe Shemesh <moshe@mellanox.com>
(cherry picked from commit 44f68ae0cad6afbd72d3de1c7b0e149c1655b626)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index ee98e9d6de41,db2cfcd21d43..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -579,161 -623,16 +579,142 @@@ struct mlx5e_channel_stats 
  	struct mlx5e_ch_stats ch;
  	struct mlx5e_sq_stats sq[MLX5E_MAX_NUM_TC];
  	struct mlx5e_rq_stats rq;
 -	struct mlx5e_xdpsq_stats rq_xdpsq;
 -	struct mlx5e_xdpsq_stats xdpsq;
  } ____cacheline_aligned_in_smp;
  
- enum mlx5e_traffic_types {
- 	MLX5E_TT_IPV4_TCP,
- 	MLX5E_TT_IPV6_TCP,
- 	MLX5E_TT_IPV4_UDP,
- 	MLX5E_TT_IPV6_UDP,
- 	MLX5E_TT_IPV4_IPSEC_AH,
- 	MLX5E_TT_IPV6_IPSEC_AH,
- 	MLX5E_TT_IPV4_IPSEC_ESP,
- 	MLX5E_TT_IPV6_IPSEC_ESP,
- 	MLX5E_TT_IPV4,
- 	MLX5E_TT_IPV6,
- 	MLX5E_TT_ANY,
- 	MLX5E_NUM_TT,
- 	MLX5E_NUM_INDIR_TIRS = MLX5E_TT_ANY,
- };
- 
- enum mlx5e_tunnel_types {
- 	MLX5E_TT_IPV4_GRE,
- 	MLX5E_TT_IPV6_GRE,
- 	MLX5E_NUM_TUNNEL_TT,
- };
- 
  enum {
  	MLX5E_STATE_ASYNC_EVENTS_ENABLED,
  	MLX5E_STATE_OPENED,
  	MLX5E_STATE_DESTROYING,
  };
  
++<<<<<<< HEAD
 +struct mlx5e_vxlan_db {
 +	spinlock_t			lock; /* protect vxlan table */
 +	/* max_num_ports is usuallly 4, 16 buckets is more than enough */
 +	DECLARE_HASHTABLE(htable, 4);
 +	int				num_ports;
 +};
 +
 +struct mlx5e_l2_rule {
 +	u8  addr[ETH_ALEN + 2];
 +	struct mlx5_flow_handle *rule;
 +};
 +
 +struct mlx5e_flow_table {
 +	int num_groups;
 +	struct mlx5_flow_table *t;
 +	struct mlx5_flow_group **g;
 +};
 +
 +#define MLX5E_L2_ADDR_HASH_SIZE BIT(BITS_PER_BYTE)
 +
 +struct mlx5e_tc_table {
 +	struct mlx5_flow_table		*t;
 +
 +	struct rhashtable               ht;
 +
 +	DECLARE_HASHTABLE(mod_hdr_tbl, 8);
 +	DECLARE_HASHTABLE(hairpin_tbl, 8);
 +};
 +
 +struct mlx5e_vlan_table {
 +	struct mlx5e_flow_table		ft;
 +	DECLARE_BITMAP(active_cvlans, VLAN_N_VID);
 +	DECLARE_BITMAP(active_svlans, VLAN_N_VID);
 +	struct mlx5_flow_handle	*active_cvlans_rule[VLAN_N_VID];
 +	struct mlx5_flow_handle	*active_svlans_rule[VLAN_N_VID];
 +	struct mlx5_flow_handle	*untagged_rule;
 +	struct mlx5_flow_handle	*any_cvlan_rule;
 +	struct mlx5_flow_handle	*any_svlan_rule;
 +	bool			cvlan_filter_disabled;
 +};
 +
 +struct mlx5e_l2_table {
 +	struct mlx5e_flow_table    ft;
 +	struct hlist_head          netdev_uc[MLX5E_L2_ADDR_HASH_SIZE];
 +	struct hlist_head          netdev_mc[MLX5E_L2_ADDR_HASH_SIZE];
 +	struct mlx5e_l2_rule	   broadcast;
 +	struct mlx5e_l2_rule	   allmulti;
 +	struct mlx5e_l2_rule	   promisc;
 +	bool                       broadcast_enabled;
 +	bool                       allmulti_enabled;
 +	bool                       promisc_enabled;
 +};
 +
 +/* L3/L4 traffic type classifier */
 +struct mlx5e_ttc_table {
 +	struct mlx5e_flow_table  ft;
 +	struct mlx5_flow_handle	 *rules[MLX5E_NUM_TT];
 +	struct mlx5_flow_handle  *tunnel_rules[MLX5E_NUM_TUNNEL_TT];
 +};
 +
 +#define ARFS_HASH_SHIFT BITS_PER_BYTE
 +#define ARFS_HASH_SIZE BIT(BITS_PER_BYTE)
 +struct arfs_table {
 +	struct mlx5e_flow_table  ft;
 +	struct mlx5_flow_handle	 *default_rule;
 +	struct hlist_head	 rules_hash[ARFS_HASH_SIZE];
 +};
 +
 +enum  arfs_type {
 +	ARFS_IPV4_TCP,
 +	ARFS_IPV6_TCP,
 +	ARFS_IPV4_UDP,
 +	ARFS_IPV6_UDP,
 +	ARFS_NUM_TYPES,
 +};
 +
 +struct mlx5e_arfs_tables {
 +	struct arfs_table arfs_tables[ARFS_NUM_TYPES];
 +	/* Protect aRFS rules list */
 +	spinlock_t                     arfs_lock;
 +	struct list_head               rules;
 +	int                            last_filter_id;
 +	struct workqueue_struct        *wq;
 +};
 +
 +/* NIC prio FTS */
 +enum {
 +	MLX5E_VLAN_FT_LEVEL = 0,
 +	MLX5E_L2_FT_LEVEL,
 +	MLX5E_TTC_FT_LEVEL,
 +	MLX5E_INNER_TTC_FT_LEVEL,
 +	MLX5E_ARFS_FT_LEVEL
 +};
 +
 +enum {
 +	MLX5E_TC_FT_LEVEL = 0,
 +	MLX5E_TC_TTC_FT_LEVEL,
 +};
 +
 +struct mlx5e_ethtool_table {
 +	struct mlx5_flow_table *ft;
 +	int                    num_rules;
 +};
 +
 +#define ETHTOOL_NUM_L3_L4_FTS 7
 +#define ETHTOOL_NUM_L2_FTS 4
 +
 +struct mlx5e_ethtool_steering {
 +	struct mlx5e_ethtool_table      l3_l4_ft[ETHTOOL_NUM_L3_L4_FTS];
 +	struct mlx5e_ethtool_table      l2_ft[ETHTOOL_NUM_L2_FTS];
 +	struct list_head                rules;
 +	int                             tot_num_rules;
 +};
 +
 +struct mlx5e_flow_steering {
 +	struct mlx5_flow_namespace      *ns;
 +	struct mlx5e_ethtool_steering   ethtool;
 +	struct mlx5e_tc_table           tc;
 +	struct mlx5e_vlan_table         vlan;
 +	struct mlx5e_l2_table           l2;
 +	struct mlx5e_ttc_table          ttc;
 +	struct mlx5e_ttc_table          inner_ttc;
 +	struct mlx5e_arfs_tables        arfs;
 +};
 +
++=======
++>>>>>>> 44f68ae0cad6 (net/mlx5e: Move flow steering declarations into en/fs.h)
  struct mlx5e_rqt {
  	u32              rqtn;
  	bool		 enabled;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
