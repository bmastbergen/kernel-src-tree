ip6mr: Fix potential Spectre v1 vulnerability

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Gustavo A. R. Silva <gustavo@embeddedor.com>
commit 69d2c86766da2ded2b70281f1bf242cb0d58a778
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/69d2c867.failed

vr.mifi is indirectly controlled by user-space, hence leading to
a potential exploitation of the Spectre variant 1 vulnerability.

This issue was detected with the help of Smatch:

net/ipv6/ip6mr.c:1845 ip6mr_ioctl() warn: potential spectre issue 'mrt->vif_table' [r] (local cap)
net/ipv6/ip6mr.c:1919 ip6mr_compat_ioctl() warn: potential spectre issue 'mrt->vif_table' [r] (local cap)

Fix this by sanitizing vr.mifi before using it to index mrt->vif_table'

Notice that given that speculation windows are large, the policy is
to kill the speculation on the first load and not worry if it can be
completed with a dependent load/store [1].

[1] https://marc.info/?l=linux-kernel&m=152449131114778&w=2

	Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 69d2c86766da2ded2b70281f1bf242cb0d58a778)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6mr.c
diff --cc net/ipv6/ip6mr.c
index dc9b65c6505f,377a2ee5d9ad..000000000000
--- a/net/ipv6/ip6mr.c
+++ b/net/ipv6/ip6mr.c
@@@ -54,23 -52,7 +54,27 @@@
  #include <net/ip6_checksum.h>
  #include <linux/netconf.h>
  
++<<<<<<< HEAD
 +struct mr6_table {
 +	struct list_head	list;
 +	possible_net_t		net;
 +	u32			id;
 +	struct sock		*mroute6_sk;
 +	struct timer_list	ipmr_expire_timer;
 +	struct list_head	mfc6_unres_queue;
 +	struct list_head	mfc6_cache_array[MFC6_LINES];
 +	struct mif_device	vif6_table[MAXMIFS];
 +	int			maxvif;
 +	atomic_t		cache_resolve_queue_len;
 +	bool			mroute_do_assert;
 +	bool			mroute_do_pim;
 +#ifdef CONFIG_IPV6_PIMSM_V2
 +	int			mroute_reg_vif_num;
 +#endif
 +};
++=======
+ #include <linux/nospec.h>
++>>>>>>> 69d2c86766da (ip6mr: Fix potential Spectre v1 vulnerability)
  
  struct ip6mr_rule {
  	struct fib_rule		common;
@@@ -1873,9 -1843,10 +1877,10 @@@ int ip6mr_ioctl(struct sock *sk, int cm
  			return -EFAULT;
  		if (vr.mifi >= mrt->maxvif)
  			return -EINVAL;
+ 		vr.mifi = array_index_nospec(vr.mifi, mrt->maxvif);
  		read_lock(&mrt_lock);
 -		vif = &mrt->vif_table[vr.mifi];
 -		if (VIF_EXISTS(mrt, vr.mifi)) {
 +		vif = &mrt->vif6_table[vr.mifi];
 +		if (MIF_EXISTS(mrt, vr.mifi)) {
  			vr.icount = vif->pkt_in;
  			vr.ocount = vif->pkt_out;
  			vr.ibytes = vif->bytes_in;
@@@ -1947,9 -1918,10 +1952,10 @@@ int ip6mr_compat_ioctl(struct sock *sk
  			return -EFAULT;
  		if (vr.mifi >= mrt->maxvif)
  			return -EINVAL;
+ 		vr.mifi = array_index_nospec(vr.mifi, mrt->maxvif);
  		read_lock(&mrt_lock);
 -		vif = &mrt->vif_table[vr.mifi];
 -		if (VIF_EXISTS(mrt, vr.mifi)) {
 +		vif = &mrt->vif6_table[vr.mifi];
 +		if (MIF_EXISTS(mrt, vr.mifi)) {
  			vr.icount = vif->pkt_in;
  			vr.ocount = vif->pkt_out;
  			vr.ibytes = vif->bytes_in;
* Unmerged path net/ipv6/ip6mr.c
