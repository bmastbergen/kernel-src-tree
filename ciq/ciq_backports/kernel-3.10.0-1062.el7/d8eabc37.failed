x86/msr-index: Cleanup bit defines

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] msr-index: Cleanup bit defines (Waiman Long) [1709296 1690358 1690348 1690335] {CVE-2018-12126 CVE-2018-12127 CVE-2018-12130 CVE-2019-11091}
Rebuild_FUZZ: 93.75%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit d8eabc37310a92df40d07c5a8afc53cebf996716
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/d8eabc37.failed

Greg pointed out that speculation related bit defines are using (1 << N)
format instead of BIT(N). Aside of that (1 << N) is wrong as it should use
1UL at least.

Clean it up.

[ Josh Poimboeuf: Fix tools build ]

	Reported-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Frederic Weisbecker <frederic@kernel.org>
	Reviewed-by: Jon Masters <jcm@redhat.com>
	Tested-by: Jon Masters <jcm@redhat.com>
(cherry picked from commit d8eabc37310a92df40d07c5a8afc53cebf996716)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/msr-index.h
#	tools/power/x86/turbostat/Makefile
#	tools/power/x86/x86_energy_perf_policy/Makefile
diff --cc arch/x86/include/asm/msr-index.h
index 49b8d668bfc1,e4074556c37b..000000000000
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@@ -1,7 -1,15 +1,18 @@@
  #ifndef _ASM_X86_MSR_INDEX_H
  #define _ASM_X86_MSR_INDEX_H
  
++<<<<<<< HEAD
 +/* CPU model specific register (MSR) numbers */
++=======
+ #include <linux/bits.h>
+ 
+ /*
+  * CPU model specific register (MSR) numbers.
+  *
+  * Do not add new entries to this file unless the definitions are shared
+  * between multiple compilation units.
+  */
++>>>>>>> d8eabc37310a (x86/msr-index: Cleanup bit defines)
  
  /* x86-64 specific MSRs */
  #define MSR_EFER		0xc0000080 /* extended feature register */
@@@ -34,13 -42,14 +45,21 @@@
  /* Intel MSRs. Some also available on other CPUs */
  
  #define MSR_IA32_SPEC_CTRL		0x00000048 /* Speculation Control */
++<<<<<<< HEAD
 +#define SPEC_CTRL_IBRS			(1 << 0)   /* Indirect Branch Restricted Speculation */
 +#define SPEC_CTRL_STIBP 		(1 << 1)   /* Single Thread Indirect Branch Predictors */
 +#define SPEC_CTRL_SSBD_SHIFT		2	   /* Speculative Store Bypass Disable bit */
 +#define SPEC_CTRL_SSBD			(1 << SPEC_CTRL_SSBD_SHIFT)   /* Speculative Store Bypass Disable */
++=======
+ #define SPEC_CTRL_IBRS			BIT(0)	   /* Indirect Branch Restricted Speculation */
+ #define SPEC_CTRL_STIBP_SHIFT		1	   /* Single Thread Indirect Branch Predictor (STIBP) bit */
+ #define SPEC_CTRL_STIBP			BIT(SPEC_CTRL_STIBP_SHIFT)	/* STIBP mask */
+ #define SPEC_CTRL_SSBD_SHIFT		2	   /* Speculative Store Bypass Disable bit */
+ #define SPEC_CTRL_SSBD			BIT(SPEC_CTRL_SSBD_SHIFT)	/* Speculative Store Bypass Disable */
++>>>>>>> d8eabc37310a (x86/msr-index: Cleanup bit defines)
  
  #define MSR_IA32_PRED_CMD		0x00000049 /* Prediction Command */
- #define PRED_CMD_IBPB			(1 << 0)   /* Indirect Branch Prediction Barrier */
+ #define PRED_CMD_IBPB			BIT(0)	   /* Indirect Branch Prediction Barrier */
  
  #define MSR_PPIN_CTL			0x0000004e
  #define MSR_PPIN			0x0000004f
@@@ -62,20 -71,20 +81,31 @@@
  #define MSR_MTRRcap			0x000000fe
  
  #define MSR_IA32_ARCH_CAPABILITIES	0x0000010a
++<<<<<<< HEAD
 +#define ARCH_CAP_RDCL_NO		(1 << 0)   /* Not susceptible to Meltdown */
 +#define ARCH_CAP_IBRS_ALL		(1 << 1)   /* Enhanced IBRS support */
 +#define ARCH_CAP_SKIP_VMENTRY_L1DFLUSH	(1 << 3)   /* Skip L1D flush on vmentry */
 +#define ARCH_CAP_SSB_NO 		(1 << 4)   /*
 +						    * Not susceptible to Speculative Store Bypass
 +						    * attack, so no Reduced Data Speculation control
 +						    * required.
 +						    */
++=======
+ #define ARCH_CAP_RDCL_NO		BIT(0)	/* Not susceptible to Meltdown */
+ #define ARCH_CAP_IBRS_ALL		BIT(1)	/* Enhanced IBRS support */
+ #define ARCH_CAP_SKIP_VMENTRY_L1DFLUSH	BIT(3)	/* Skip L1D flush on vmentry */
+ #define ARCH_CAP_SSB_NO			BIT(4)	/*
+ 						 * Not susceptible to Speculative Store Bypass
+ 						 * attack, so no Speculative Store Bypass
+ 						 * control required.
+ 						 */
++>>>>>>> d8eabc37310a (x86/msr-index: Cleanup bit defines)
  
  #define MSR_IA32_FLUSH_CMD		0x0000010b
- #define L1D_FLUSH			(1 << 0)   /*
- 						    * Writeback and invalidate the
- 						    * L1 data cache.
- 						    */
+ #define L1D_FLUSH			BIT(0)	/*
+ 						 * Writeback and invalidate the
+ 						 * L1 data cache.
+ 						 */
  
  #define MSR_IA32_BBL_CR_CTL		0x00000119
  #define MSR_IA32_BBL_CR_CTL3		0x0000011e
diff --cc tools/power/x86/turbostat/Makefile
index c6c1aa107355,045f5f7d68ab..000000000000
--- a/tools/power/x86/turbostat/Makefile
+++ b/tools/power/x86/turbostat/Makefile
@@@ -8,9 -9,9 +8,15 @@@ ifeq ("$(origin O)", "command line"
  endif
  
  turbostat : turbostat.c
++<<<<<<< HEAD
 +CFLAGS +=	-Wall
 +CFLAGS +=	-DMSRHEADER='"../../../../arch/x86/include/asm/msr-index.h"'
 +CFLAGS +=	-DINTEL_FAMILY_HEADER='"../../../../arch/x86/include/asm/intel-family.h"'
++=======
+ override CFLAGS +=	-Wall -I../../../include
+ override CFLAGS +=	-DMSRHEADER='"../../../../arch/x86/include/asm/msr-index.h"'
+ override CFLAGS +=	-DINTEL_FAMILY_HEADER='"../../../../arch/x86/include/asm/intel-family.h"'
++>>>>>>> d8eabc37310a (x86/msr-index: Cleanup bit defines)
  
  %: %.c
  	@mkdir -p $(BUILD_OUTPUT)
diff --cc tools/power/x86/x86_energy_perf_policy/Makefile
index b0c17876ad4b,1fdeef864e7c..000000000000
--- a/tools/power/x86/x86_energy_perf_policy/Makefile
+++ b/tools/power/x86/x86_energy_perf_policy/Makefile
@@@ -1,10 -1,28 +1,15 @@@
 -# SPDX-License-Identifier: GPL-2.0
 -CC		= $(CROSS_COMPILE)gcc
 -BUILD_OUTPUT    := $(CURDIR)
 -PREFIX		:= /usr
 -DESTDIR		:=
 -
 -ifeq ("$(origin O)", "command line")
 -	BUILD_OUTPUT := $(O)
 -endif
 +DESTDIR ?=
  
  x86_energy_perf_policy : x86_energy_perf_policy.c
++<<<<<<< HEAD
++=======
+ override CFLAGS +=	-Wall -I../../../include
+ override CFLAGS +=	-DMSRHEADER='"../../../../arch/x86/include/asm/msr-index.h"'
++>>>>>>> d8eabc37310a (x86/msr-index: Cleanup bit defines)
  
 -%: %.c
 -	@mkdir -p $(BUILD_OUTPUT)
 -	$(CC) $(CFLAGS) $< -o $(BUILD_OUTPUT)/$@ $(LDFLAGS)
 -
 -.PHONY : clean
  clean :
 -	@rm -f $(BUILD_OUTPUT)/x86_energy_perf_policy
 -
 -install : x86_energy_perf_policy
 -	install -d  $(DESTDIR)$(PREFIX)/bin
 -	install $(BUILD_OUTPUT)/x86_energy_perf_policy $(DESTDIR)$(PREFIX)/bin/x86_energy_perf_policy
 -	install -d  $(DESTDIR)$(PREFIX)/share/man/man8
 -	install -m 644 x86_energy_perf_policy.8 $(DESTDIR)$(PREFIX)/share/man/man8
 +	rm -f x86_energy_perf_policy
  
 +install :
 +	install x86_energy_perf_policy ${DESTDIR}/usr/bin/
 +	install -m 644 x86_energy_perf_policy.8 $(DESTDIR)/usr//share/man/man8
* Unmerged path arch/x86/include/asm/msr-index.h
* Unmerged path tools/power/x86/turbostat/Makefile
* Unmerged path tools/power/x86/x86_energy_perf_policy/Makefile
