module: fix ddebug_remove_module()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Zhou Chengming <zhouchengming1@huawei.com>
commit 5279631271b32201243c60308a8987bd585e4460
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/52796312.failed

ddebug_remove_module() use mod->name to find the ddebug_table of the
module and remove it. But dynamic_debug_setup() use the first
_ddebug->modname to create ddebug_table for the module. It's ok when
the _ddebug->modname is the same with the mod->name.

But livepatch module is special, it may contain _ddebugs of other
modules, the modname of which is different from the name of livepatch
module. So ddebug_remove_module() can't use mod->name to find the
right ddebug_table and remove it. It can cause kernel crash when we cat
the file <debugfs>/dynamic_debug/control.

	Signed-off-by: Zhou Chengming <zhouchengming1@huawei.com>
	Signed-off-by: Jessica Yu <jeyu@kernel.org>
(cherry picked from commit 5279631271b32201243c60308a8987bd585e4460)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/module.c
diff --cc kernel/module.c
index 0d9ef67fd99a,de66ec825992..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -2617,9 -2712,9 +2617,15 @@@ static void dynamic_debug_setup(struct 
  	if (!debug)
  		return;
  #ifdef CONFIG_DYNAMIC_DEBUG
++<<<<<<< HEAD
 +	if (ddebug_add_module(debug, num, debug->modname))
 +		printk(KERN_ERR "dynamic debug error adding module: %s\n",
 +					debug->modname);
++=======
+ 	if (ddebug_add_module(debug, num, mod->name))
+ 		pr_err("dynamic debug error adding module: %s\n",
+ 			debug->modname);
++>>>>>>> 5279631271b3 (module: fix ddebug_remove_module())
  #endif
  }
  
@@@ -3698,11 -3775,11 +3704,11 @@@ static int load_module(struct load_inf
  	mutex_unlock(&module_mutex);
  
  	/* we can't deallocate the module until we clear memory protection */
 -	module_disable_ro(mod);
 -	module_disable_nx(mod);
 +	unset_module_init_ro_nx(mod);
 +	unset_module_core_ro_nx(mod);
  
   ddebug_cleanup:
- 	dynamic_debug_remove(info->debug);
+ 	dynamic_debug_remove(mod, info->debug);
  	synchronize_sched();
  	kfree(mod->args);
   free_arch_cleanup:
* Unmerged path kernel/module.c
