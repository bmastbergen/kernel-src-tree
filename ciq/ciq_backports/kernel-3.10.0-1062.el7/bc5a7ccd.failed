net/mlx5e: Add UDP GSO remaining counter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add UDP GSO remaining counter (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 94.74%
commit-author Boris Pismenny <borisp@mellanox.com>
commit bc5a7ccd9a6025e2ba555ab7dcd5043e2bfde315
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bc5a7ccd.failed

This patch adds a counter for tx UDP GSO packets that contain a segment
that is not aligned to MSS - remaining segment.

	Signed-off-by: Boris Pismenny <borisp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit bc5a7ccd9a6025e2ba555ab7dcd5043e2bfde315)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/rxtx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 8721ed97ba96,7e7155b4e0f0..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -57,9 -64,11 +57,15 @@@ static const struct counter_desc sw_sta
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial_inner) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_stopped) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_dropped) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xmit_more) },
++<<<<<<< HEAD
++=======
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_recover) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_udp_seg_rem) },
++>>>>>>> bc5a7ccd9a60 (net/mlx5e: Add UDP GSO remaining counter)
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqe_err) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_wqe_err) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_mpwqe_filler) },
@@@ -151,8 -160,10 +157,9 @@@ static void mlx5e_grp_sw_update_stats(s
  			s->tx_added_vlan_packets += sq_stats->added_vlan_packets;
  			s->tx_queue_stopped	+= sq_stats->stopped;
  			s->tx_queue_wake	+= sq_stats->wake;
+ 			s->tx_udp_seg_rem	+= sq_stats->udp_seg_rem;
  			s->tx_queue_dropped	+= sq_stats->dropped;
  			s->tx_cqe_err		+= sq_stats->cqe_err;
 -			s->tx_recover		+= sq_stats->recover;
  			s->tx_xmit_more		+= sq_stats->xmit_more;
  			s->tx_csum_partial_inner += sq_stats->csum_partial_inner;
  			s->tx_csum_none		+= sq_stats->csum_none;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 43dc808684c9,d416bb86e747..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -75,9 -75,11 +75,15 @@@ struct mlx5e_sw_stats 
  	u64 tx_csum_partial;
  	u64 tx_csum_partial_inner;
  	u64 tx_queue_stopped;
 +	u64 tx_queue_wake;
  	u64 tx_queue_dropped;
  	u64 tx_xmit_more;
++<<<<<<< HEAD
++=======
+ 	u64 tx_recover;
+ 	u64 tx_queue_wake;
+ 	u64 tx_udp_seg_rem;
++>>>>>>> bc5a7ccd9a60 (net/mlx5e: Add UDP GSO remaining counter)
  	u64 tx_cqe_err;
  	u64 rx_wqe_err;
  	u64 rx_mpwqe_filler;
@@@ -193,6 -197,11 +199,14 @@@ struct mlx5e_sq_stats 
  	u64 csum_partial_inner;
  	u64 added_vlan_packets;
  	u64 nop;
++<<<<<<< HEAD
++=======
+ 	u64 udp_seg_rem;
+ #ifdef CONFIG_MLX5_EN_TLS
+ 	u64 tls_ooo;
+ 	u64 tls_resync_bytes;
+ #endif
++>>>>>>> bc5a7ccd9a60 (net/mlx5e: Add UDP GSO remaining counter)
  	/* less likely accessed in data path */
  	u64 csum_none;
  	u64 stopped;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/rxtx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/rxtx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
