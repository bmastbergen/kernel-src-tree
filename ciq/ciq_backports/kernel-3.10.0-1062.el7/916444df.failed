ptp: deprecate gettime64() in favor of gettimex64()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Miroslav Lichvar <mlichvar@redhat.com>
commit 916444df305ef5b8a7d824aac7dd2aeba3a4db3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/916444df.failed

When a driver provides gettimex64(), use it in the PTP_SYS_OFFSET ioctl
and POSIX clock's gettime() instead of gettime64(). Drivers should
provide only one of the functions.

	Cc: Richard Cochran <richardcochran@gmail.com>
	Cc: Jacob Keller <jacob.e.keller@intel.com>
	Signed-off-by: Miroslav Lichvar <mlichvar@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 916444df305ef5b8a7d824aac7dd2aeba3a4db3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ptp/ptp_chardev.c
#	drivers/ptp/ptp_clock.c
diff --cc drivers/ptp/ptp_chardev.c
index ddd1acf31245,797fab33bb98..000000000000
--- a/drivers/ptp/ptp_chardev.c
+++ b/drivers/ptp/ptp_chardev.c
@@@ -234,12 -260,12 +234,21 @@@ long ptp_ioctl(struct posix_clock *pc, 
  			pct->sec = ts.tv_sec;
  			pct->nsec = ts.tv_nsec;
  			pct++;
++<<<<<<< HEAD
 +			if (ptp->info->gettime64) {
 +				ptp->info->gettime64(ptp->info, &ts);
 +			} else {
 +				ptp->info->gettime(ptp->info, &t2);
 +				ts = timespec_to_timespec64(t2);
 +			}
++=======
+ 			if (ops->gettimex64)
+ 				err = ops->gettimex64(ops, &ts, NULL);
+ 			else
+ 				err = ops->gettime64(ops, &ts);
+ 			if (err)
+ 				goto out;
++>>>>>>> 916444df305e (ptp: deprecate gettime64() in favor of gettimex64())
  			pct->sec = ts.tv_sec;
  			pct->nsec = ts.tv_nsec;
  			pct++;
diff --cc drivers/ptp/ptp_clock.c
index 4e83d1e7a593,40fda23e4b05..000000000000
--- a/drivers/ptp/ptp_clock.c
+++ b/drivers/ptp/ptp_clock.c
@@@ -104,30 -105,22 +104,37 @@@ static int ptp_clock_getres(struct posi
  	return 0;
  }
  
 -static int ptp_clock_settime(struct posix_clock *pc, const struct timespec64 *tp)
 +static int ptp_clock_settime(struct posix_clock *pc, const struct timespec *tp)
  {
  	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 +	struct timespec64 ts = timespec_to_timespec64(*tp);
  
 -	return  ptp->info->settime64(ptp->info, tp);
 +	return  ptp->info->settime64 ?
 +		ptp->info->settime64(ptp->info, &ts) :
 +		ptp->info->settime(ptp->info, tp);
  }
  
 -static int ptp_clock_gettime(struct posix_clock *pc, struct timespec64 *tp)
 +static int ptp_clock_gettime(struct posix_clock *pc, struct timespec *tp)
  {
  	struct ptp_clock *ptp = container_of(pc, struct ptp_clock, clock);
 +	struct timespec64 ts;
  	int err;
  
++<<<<<<< HEAD
 +	if (ptp->info->gettime64) {
 +		err = ptp->info->gettime64(ptp->info, &ts);
 +		if (!err)
 +			*tp = timespec64_to_timespec(ts);
 +	} else {
 +		err = ptp->info->gettime(ptp->info, tp);
 +	}
 +
++=======
+ 	if (ptp->info->gettimex64)
+ 		err = ptp->info->gettimex64(ptp->info, tp, NULL);
+ 	else
+ 		err = ptp->info->gettime64(ptp->info, tp);
++>>>>>>> 916444df305e (ptp: deprecate gettime64() in favor of gettimex64())
  	return err;
  }
  
* Unmerged path drivers/ptp/ptp_chardev.c
* Unmerged path drivers/ptp/ptp_clock.c
diff --git a/include/linux/ptp_clock_kernel.h b/include/linux/ptp_clock_kernel.h
index 1b632477a4e5..09a98a4ba18d 100644
--- a/include/linux/ptp_clock_kernel.h
+++ b/include/linux/ptp_clock_kernel.h
@@ -79,6 +79,8 @@ struct system_device_crosststamp;
  *            parameter ts: Time value to set.
  *
  * @gettime64:  Reads the current time from the hardware clock.
+ *              This method is deprecated.  New drivers should implement
+ *              the @gettimex64 method instead.
  *              parameter ts: Holds the result.
  *
  * @getcrosststamp:  Reads the current time from the hardware clock and
