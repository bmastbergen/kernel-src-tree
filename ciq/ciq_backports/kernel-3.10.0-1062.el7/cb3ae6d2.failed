fuse: listxattr: verify xattr list

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit cb3ae6d25a5471be62bfe6ac1fccc0e91edeaba0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/cb3ae6d2.failed

Make sure userspace filesystem is returning a well formed list of xattr
names (zero or more nonzero length, null terminated strings).

[Michael Theall: only verify in the nonzero size case]

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
	Cc: <stable@vger.kernel.org>
(cherry picked from commit cb3ae6d25a5471be62bfe6ac1fccc0e91edeaba0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/fuse/dir.c
diff --cc fs/fuse/dir.c
index 3e1c8cd01fea,b87c9bcd6306..000000000000
--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@@ -1882,11 -1801,28 +1882,28 @@@ static ssize_t fuse_getxattr(struct den
  	return ret;
  }
  
+ static int fuse_verify_xattr_list(char *list, size_t size)
+ {
+ 	size_t origsize = size;
+ 
+ 	while (size) {
+ 		size_t thislen = strnlen(list, size);
+ 
+ 		if (!thislen || thislen == size)
+ 			return -EIO;
+ 
+ 		size -= thislen + 1;
+ 		list += thislen + 1;
+ 	}
+ 
+ 	return origsize;
+ }
+ 
  static ssize_t fuse_listxattr(struct dentry *entry, char *list, size_t size)
  {
 -	struct inode *inode = d_inode(entry);
 +	struct inode *inode = entry->d_inode;
  	struct fuse_conn *fc = get_fuse_conn(inode);
 -	FUSE_ARGS(args);
 +	struct fuse_req *req;
  	struct fuse_getxattr_in inarg;
  	struct fuse_getxattr_out outarg;
  	ssize_t ret;
@@@ -1897,38 -1833,32 +1914,49 @@@
  	if (fc->no_listxattr)
  		return -EOPNOTSUPP;
  
 +	req = fuse_get_req_nopages(fc);
 +	if (IS_ERR(req))
 +		return PTR_ERR(req);
 +
  	memset(&inarg, 0, sizeof(inarg));
  	inarg.size = size;
 -	args.in.h.opcode = FUSE_LISTXATTR;
 -	args.in.h.nodeid = get_node_id(inode);
 -	args.in.numargs = 1;
 -	args.in.args[0].size = sizeof(inarg);
 -	args.in.args[0].value = &inarg;
 +	req->in.h.opcode = FUSE_LISTXATTR;
 +	req->in.h.nodeid = get_node_id(inode);
 +	req->in.numargs = 1;
 +	req->in.args[0].size = sizeof(inarg);
 +	req->in.args[0].value = &inarg;
  	/* This is really two different operations rolled into one */
 -	args.out.numargs = 1;
 +	req->out.numargs = 1;
  	if (size) {
 -		args.out.argvar = 1;
 -		args.out.args[0].size = size;
 -		args.out.args[0].value = list;
 +		req->out.argvar = 1;
 +		req->out.args[0].size = size;
 +		req->out.args[0].value = list;
  	} else {
 -		args.out.args[0].size = sizeof(outarg);
 -		args.out.args[0].value = &outarg;
 +		req->out.args[0].size = sizeof(outarg);
 +		req->out.args[0].value = &outarg;
  	}
++<<<<<<< HEAD
 +	fuse_request_send(fc, req);
 +	ret = req->out.h.error;
 +	if (!ret)
 +		ret = size ? req->out.args[0].size : outarg.size;
 +	else {
 +		if (ret == -ENOSYS) {
 +			fc->no_listxattr = 1;
 +			ret = -EOPNOTSUPP;
 +		}
++=======
+ 	ret = fuse_simple_request(fc, &args);
+ 	if (!ret && !size)
+ 		ret = outarg.size;
+ 	if (ret > 0 && size)
+ 		ret = fuse_verify_xattr_list(list, ret);
+ 	if (ret == -ENOSYS) {
+ 		fc->no_listxattr = 1;
+ 		ret = -EOPNOTSUPP;
++>>>>>>> cb3ae6d25a54 (fuse: listxattr: verify xattr list)
  	}
 +	fuse_put_request(fc, req);
  	return ret;
  }
  
* Unmerged path fs/fuse/dir.c
