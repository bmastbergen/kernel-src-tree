ALSA: hda/ca0132: constify templates for control element set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit b0eaa0721df31d4a7c47989a1ac6faedd8495ba1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/b0eaa072.failed

An array of templates for control element set is passed as an
argument for snd_hda_add_new_ctls(). This argument has 'const'
qualifier therefore the passed array can have the qualifier.

This commit adds this optimization.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit b0eaa0721df31d4a7c47989a1ac6faedd8495ba1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,d18022d72e83..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -703,9 -892,7 +703,13 @@@ enum dsp_download_state 
   */
  
  struct ca0132_spec {
++<<<<<<< HEAD
 +	struct hda_gen_spec gen; /* must be at head */
 +
 +	struct snd_kcontrol_new *mixers[5];
++=======
+ 	const struct snd_kcontrol_new *mixers[5];
++>>>>>>> b0eaa0721df3 (ALSA: hda/ca0132: constify templates for control element set)
  	unsigned int num_mixers;
  	const struct hda_verb *base_init_verbs;
  	const struct hda_verb *base_exit_verbs;
@@@ -3998,6 -5727,51 +4002,54 @@@ static const struct snd_kcontrol_new ca
  	{ } /* end */
  };
  
++<<<<<<< HEAD
++=======
+ /*
+  * SBZ specific control mixer. Removes auto-detect for mic, and adds surround
+  * controls. Also sets both the Front Playback and Capture Volume controls to
+  * alt so they set the DSP's decibel level.
+  */
+ static const struct snd_kcontrol_new sbz_mixer[] = {
+ 	CA0132_ALT_CODEC_VOL("Front Playback Volume", 0x02, HDA_OUTPUT),
+ 	CA0132_CODEC_MUTE("Front Playback Switch", VNID_SPK, HDA_OUTPUT),
+ 	HDA_CODEC_VOLUME("Surround Playback Volume", 0x04, 0, HDA_OUTPUT),
+ 	HDA_CODEC_MUTE("Surround Playback Switch", 0x04, 0, HDA_OUTPUT),
+ 	HDA_CODEC_VOLUME_MONO("Center Playback Volume", 0x03, 1, 0, HDA_OUTPUT),
+ 	HDA_CODEC_MUTE_MONO("Center Playback Switch", 0x03, 1, 0, HDA_OUTPUT),
+ 	HDA_CODEC_VOLUME_MONO("LFE Playback Volume", 0x03, 2, 0, HDA_OUTPUT),
+ 	HDA_CODEC_MUTE_MONO("LFE Playback Switch", 0x03, 2, 0, HDA_OUTPUT),
+ 	CA0132_ALT_CODEC_VOL("Capture Volume", 0x07, HDA_INPUT),
+ 	CA0132_CODEC_MUTE("Capture Switch", VNID_MIC, HDA_INPUT),
+ 	HDA_CODEC_VOLUME("What U Hear Capture Volume", 0x0a, 0, HDA_INPUT),
+ 	HDA_CODEC_MUTE("What U Hear Capture Switch", 0x0a, 0, HDA_INPUT),
+ 	CA0132_CODEC_MUTE_MONO("HP/Speaker Auto Detect Playback Switch",
+ 				VNID_HP_ASEL, 1, HDA_OUTPUT),
+ 	{ } /* end */
+ };
+ 
+ /*
+  * Same as the Sound Blaster Z, except doesn't use the alt volume for capture
+  * because it doesn't set decibel levels for the DSP for capture.
+  */
+ static const struct snd_kcontrol_new r3di_mixer[] = {
+ 	CA0132_ALT_CODEC_VOL("Front Playback Volume", 0x02, HDA_OUTPUT),
+ 	CA0132_CODEC_MUTE("Front Playback Switch", VNID_SPK, HDA_OUTPUT),
+ 	HDA_CODEC_VOLUME("Surround Playback Volume", 0x04, 0, HDA_OUTPUT),
+ 	HDA_CODEC_MUTE("Surround Playback Switch", 0x04, 0, HDA_OUTPUT),
+ 	HDA_CODEC_VOLUME_MONO("Center Playback Volume", 0x03, 1, 0, HDA_OUTPUT),
+ 	HDA_CODEC_MUTE_MONO("Center Playback Switch", 0x03, 1, 0, HDA_OUTPUT),
+ 	HDA_CODEC_VOLUME_MONO("LFE Playback Volume", 0x03, 2, 0, HDA_OUTPUT),
+ 	HDA_CODEC_MUTE_MONO("LFE Playback Switch", 0x03, 2, 0, HDA_OUTPUT),
+ 	CA0132_CODEC_VOL("Capture Volume", VNID_MIC, HDA_INPUT),
+ 	CA0132_CODEC_MUTE("Capture Switch", VNID_MIC, HDA_INPUT),
+ 	HDA_CODEC_VOLUME("What U Hear Capture Volume", 0x0a, 0, HDA_INPUT),
+ 	HDA_CODEC_MUTE("What U Hear Capture Switch", 0x0a, 0, HDA_INPUT),
+ 	CA0132_CODEC_MUTE_MONO("HP/Speaker Auto Detect Playback Switch",
+ 				VNID_HP_ASEL, 1, HDA_OUTPUT),
+ 	{ } /* end */
+ };
+ 
++>>>>>>> b0eaa0721df3 (ALSA: hda/ca0132: constify templates for control element set)
  static int ca0132_build_controls(struct hda_codec *codec)
  {
  	struct ca0132_spec *spec = codec->spec;
* Unmerged path sound/pci/hda/patch_ca0132.c
