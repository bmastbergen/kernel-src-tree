ALSA: rawmidi: Minor code refactoring

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit f5beb598b0c4dd023833ae1a7c188ecd987b7125
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f5beb598.failed

Unify a few open codes with helper functions to improve the
readability.  Minor behavior changes (rather fixes) are:
- runtime->drain clearance is done within lock
- active_sensing is updated before resizing buffer in
  SNDRV_RAWMIDI_IOCTL_PARAMS ioctl.
Other than that, simply code cleanups.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit f5beb598b0c4dd023833ae1a7c188ecd987b7125)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/rawmidi.c
diff --cc sound/core/rawmidi.c
index edf6ff52bbea,cc944a3637a2..000000000000
--- a/sound/core/rawmidi.c
+++ b/sound/core/rawmidi.c
@@@ -632,21 -643,16 +636,31 @@@ static int snd_rawmidi_info_select_user
  	return 0;
  }
  
++<<<<<<< HEAD
 +int snd_rawmidi_output_params(struct snd_rawmidi_substream *substream,
 +			      struct snd_rawmidi_params * params)
 +{
 +	char *newbuf, *oldbuf;
 +	struct snd_rawmidi_runtime *runtime = substream->runtime;
 +	
 +	if (substream->append && substream->use_count > 1)
 +		return -EBUSY;
 +	snd_rawmidi_drain_output(substream);
 +	if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {
++=======
+ static int resize_runtime_buffer(struct snd_rawmidi_runtime *runtime,
+ 				 struct snd_rawmidi_params *params,
+ 				 bool is_input)
+ {
+ 	char *newbuf, *oldbuf;
+ 
+ 	if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)
++>>>>>>> f5beb598b0c4 (ALSA: rawmidi: Minor code refactoring)
  		return -EINVAL;
 -	if (params->avail_min < 1 || params->avail_min > params->buffer_size)
 +	}
 +	if (params->avail_min < 1 || params->avail_min > params->buffer_size) {
  		return -EINVAL;
 +	}
  	if (params->buffer_size != runtime->buffer_size) {
  		newbuf = kmalloc(params->buffer_size, GFP_KERNEL);
  		if (!newbuf)
@@@ -667,32 -681,10 +689,33 @@@ int snd_rawmidi_output_params(struct sn
  EXPORT_SYMBOL(snd_rawmidi_output_params);
  
  int snd_rawmidi_input_params(struct snd_rawmidi_substream *substream,
 -			     struct snd_rawmidi_params *params)
 +			     struct snd_rawmidi_params * params)
  {
- 	char *newbuf, *oldbuf;
- 	struct snd_rawmidi_runtime *runtime = substream->runtime;
- 
  	snd_rawmidi_drain_input(substream);
++<<<<<<< HEAD
 +	if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {
 +		return -EINVAL;
 +	}
 +	if (params->avail_min < 1 || params->avail_min > params->buffer_size) {
 +		return -EINVAL;
 +	}
 +	if (params->buffer_size != runtime->buffer_size) {
 +		newbuf = kmalloc(params->buffer_size, GFP_KERNEL);
 +		if (!newbuf)
 +			return -ENOMEM;
 +		spin_lock_irq(&runtime->lock);
 +		oldbuf = runtime->buffer;
 +		runtime->buffer = newbuf;
 +		runtime->buffer_size = params->buffer_size;
 +		runtime->appl_ptr = runtime->hw_ptr = 0;
 +		spin_unlock_irq(&runtime->lock);
 +		kfree(oldbuf);
 +	}
 +	runtime->avail_min = params->avail_min;
 +	return 0;
++=======
+ 	return resize_runtime_buffer(substream->runtime, params, true);
++>>>>>>> f5beb598b0c4 (ALSA: rawmidi: Minor code refactoring)
  }
  EXPORT_SYMBOL(snd_rawmidi_input_params);
  
* Unmerged path sound/core/rawmidi.c
