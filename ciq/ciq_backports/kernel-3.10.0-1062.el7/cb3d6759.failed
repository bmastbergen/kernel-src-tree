powerpc/64s: Enable barrier_nospec based on firmware settings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powerpc] 64s: Enable barrier_nospec based on firmware settings (Gustavo Duarte) [1694459]
Rebuild_FUZZ: 92.98%
commit-author Michal Suchanek <msuchanek@suse.de>
commit cb3d6759a93c6d0aea1c10deb6d00e111c29c19c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/cb3d6759.failed

Check what firmware told us and enable/disable the barrier_nospec as
appropriate.

We err on the side of enabling the barrier, as it's no-op on older
systems, see the comment for more detail.

	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit cb3d6759a93c6d0aea1c10deb6d00e111c29c19c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/setup.h
#	arch/powerpc/kernel/security.c
diff --cc arch/powerpc/include/asm/setup.h
index cb1e56079d12,8721fd004291..000000000000
--- a/arch/powerpc/include/asm/setup.h
+++ b/arch/powerpc/include/asm/setup.h
@@@ -40,6 -52,15 +40,18 @@@ enum l1d_flush_type 
  
  void setup_rfi_flush(enum l1d_flush_type, bool enable);
  void do_rfi_flush_fixups(enum l1d_flush_type types);
++<<<<<<< HEAD
++=======
+ void setup_barrier_nospec(void);
+ void do_barrier_nospec_fixups(bool enable);
+ extern bool barrier_nospec_enabled;
+ 
+ #ifdef CONFIG_PPC_BOOK3S_64
+ void do_barrier_nospec_fixups_range(bool enable, void *start, void *end);
+ #else
+ static inline void do_barrier_nospec_fixups_range(bool enable, void *start, void *end) { };
+ #endif
++>>>>>>> cb3d6759a93c (powerpc/64s: Enable barrier_nospec based on firmware settings)
  
  #endif /* !__ASSEMBLY__ */
  
diff --cc arch/powerpc/kernel/security.c
index 43a3b9750483,06d5195f6729..000000000000
--- a/arch/powerpc/kernel/security.c
+++ b/arch/powerpc/kernel/security.c
@@@ -7,13 -7,81 +7,84 @@@
  #include <linux/kernel.h>
  #include <linux/device.h>
  #include <linux/seq_buf.h>
 +#include <linux/debugfs.h>
  
+ #include <asm/debugfs.h>
  #include <asm/security_features.h>
 -#include <asm/setup.h>
  
  
  unsigned long powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;
  
++<<<<<<< HEAD
++=======
+ bool barrier_nospec_enabled;
+ 
+ static void enable_barrier_nospec(bool enable)
+ {
+ 	barrier_nospec_enabled = enable;
+ 	do_barrier_nospec_fixups(enable);
+ }
+ 
+ void setup_barrier_nospec(void)
+ {
+ 	bool enable;
+ 
+ 	/*
+ 	 * It would make sense to check SEC_FTR_SPEC_BAR_ORI31 below as well.
+ 	 * But there's a good reason not to. The two flags we check below are
+ 	 * both are enabled by default in the kernel, so if the hcall is not
+ 	 * functional they will be enabled.
+ 	 * On a system where the host firmware has been updated (so the ori
+ 	 * functions as a barrier), but on which the hypervisor (KVM/Qemu) has
+ 	 * not been updated, we would like to enable the barrier. Dropping the
+ 	 * check for SEC_FTR_SPEC_BAR_ORI31 achieves that. The only downside is
+ 	 * we potentially enable the barrier on systems where the host firmware
+ 	 * is not updated, but that's harmless as it's a no-op.
+ 	 */
+ 	enable = security_ftr_enabled(SEC_FTR_FAVOUR_SECURITY) &&
+ 		 security_ftr_enabled(SEC_FTR_BNDS_CHK_SPEC_BAR);
+ 
+ 	enable_barrier_nospec(enable);
+ }
+ 
+ #ifdef CONFIG_DEBUG_FS
+ static int barrier_nospec_set(void *data, u64 val)
+ {
+ 	switch (val) {
+ 	case 0:
+ 	case 1:
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (!!val == !!barrier_nospec_enabled)
+ 		return 0;
+ 
+ 	enable_barrier_nospec(!!val);
+ 
+ 	return 0;
+ }
+ 
+ static int barrier_nospec_get(void *data, u64 *val)
+ {
+ 	*val = barrier_nospec_enabled ? 1 : 0;
+ 	return 0;
+ }
+ 
+ DEFINE_SIMPLE_ATTRIBUTE(fops_barrier_nospec,
+ 			barrier_nospec_get, barrier_nospec_set, "%llu\n");
+ 
+ static __init int barrier_nospec_debugfs_init(void)
+ {
+ 	debugfs_create_file("barrier_nospec", 0600, powerpc_debugfs_root, NULL,
+ 			    &fops_barrier_nospec);
+ 	return 0;
+ }
+ device_initcall(barrier_nospec_debugfs_init);
+ #endif /* CONFIG_DEBUG_FS */
+ 
++>>>>>>> cb3d6759a93c (powerpc/64s: Enable barrier_nospec based on firmware settings)
  ssize_t cpu_show_meltdown(struct device *dev, struct device_attribute *attr, char *buf)
  {
  	bool thread_priv;
* Unmerged path arch/powerpc/include/asm/setup.h
* Unmerged path arch/powerpc/kernel/security.c
diff --git a/arch/powerpc/platforms/powernv/setup.c b/arch/powerpc/platforms/powernv/setup.c
index acf292f8a307..0eb404330c1f 100644
--- a/arch/powerpc/platforms/powernv/setup.c
+++ b/arch/powerpc/platforms/powernv/setup.c
@@ -127,6 +127,7 @@ static void pnv_setup_rfi_flush(void)
 		  security_ftr_enabled(SEC_FTR_L1D_FLUSH_HV));
 
 	setup_rfi_flush(type, enable);
+	setup_barrier_nospec();
 }
 
 static void __init pnv_setup_arch(void)
diff --git a/arch/powerpc/platforms/pseries/setup.c b/arch/powerpc/platforms/pseries/setup.c
index 23e279d772f3..c76dc7daf86a 100644
--- a/arch/powerpc/platforms/pseries/setup.c
+++ b/arch/powerpc/platforms/pseries/setup.c
@@ -597,6 +597,7 @@ void pseries_setup_rfi_flush(void)
 		 security_ftr_enabled(SEC_FTR_L1D_FLUSH_PR);
 
 	setup_rfi_flush(types, enable);
+	setup_barrier_nospec();
 }
 
 static void __init pSeries_setup_arch(void)
