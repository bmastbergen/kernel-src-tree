crypto: qat - move temp buffers off the stack

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [crypto] qat - move temp buffers off the stack (Neil Horman) [1641143]
Rebuild_FUZZ: 90.24%
commit-author Ard Biesheuvel <ard.biesheuvel@linaro.org>
commit cfa1d74495aa3cf240fd2b1fb45d43cc2a754a46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/cfa1d744.failed

Arnd reports that with Kees's latest VLA patches applied, the HMAC
handling in the QAT driver uses a worst case estimate of 160 bytes
for the SHA blocksize, allowing the compiler to determine the size
of the stack frame at compile time and throw a warning:

  drivers/crypto/qat/qat_common/qat_algs.c: In function 'qat_alg_do_precomputes':
  drivers/crypto/qat/qat_common/qat_algs.c:257:1: error: the frame size
  of 1112 bytes is larger than 1024 bytes [-Werror=frame-larger-than=]

Given that this worst case estimate is only 32 bytes larger than the
actual block size of SHA-512, the use of a VLA here was hiding the
excessive size of the stack frame from the compiler, and so we should
try to move these buffers off the stack.

So move the ipad/opad buffers and the various SHA state descriptors
into the tfm context struct. Since qat_alg_do_precomputes() is only
called in the context of a setkey() operation, this should be safe.
Using SHA512_BLOCK_SIZE for the size of the ipad/opad buffers allows
them to be used by SHA-1/SHA-256 as well.

	Reported-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit cfa1d74495aa3cf240fd2b1fb45d43cc2a754a46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/qat/qat_common/qat_algs.c
diff --cc drivers/crypto/qat/qat_common/qat_algs.c
index c6d52ba29a2e,d2698299896f..000000000000
--- a/drivers/crypto/qat/qat_common/qat_algs.c
+++ b/drivers/crypto/qat/qat_common/qat_algs.c
@@@ -114,9 -113,13 +114,19 @@@ struct qat_alg_aead_ctx 
  	struct crypto_shash *hash_tfm;
  	enum icp_qat_hw_auth_algo qat_hash_alg;
  	struct qat_crypto_instance *inst;
++<<<<<<< HEAD
 +	struct crypto_tfm *tfm;
 +	uint8_t salt[AES_BLOCK_SIZE];
 +	spinlock_t lock;	/* protects qat_alg_aead_ctx struct */
++=======
+ 	union {
+ 		struct sha1_state sha1;
+ 		struct sha256_state sha256;
+ 		struct sha512_state sha512;
+ 	};
+ 	char ipad[SHA512_BLOCK_SIZE]; /* sufficient for SHA-1/SHA-256 as well */
+ 	char opad[SHA512_BLOCK_SIZE];
++>>>>>>> cfa1d74495aa (crypto: qat - move temp buffers off the stack)
  };
  
  struct qat_alg_ablkcipher_ctx {
@@@ -152,13 -155,8 +162,13 @@@ static int qat_alg_do_precomputes(struc
  				  unsigned int auth_keylen)
  {
  	SHASH_DESC_ON_STACK(shash, ctx->hash_tfm);
- 	struct sha1_state sha1;
- 	struct sha256_state sha256;
- 	struct sha512_state sha512;
  	int block_size = crypto_shash_blocksize(ctx->hash_tfm);
  	int digest_size = crypto_shash_digestsize(ctx->hash_tfm);
++<<<<<<< HEAD
 +	char ipad[block_size];
 +	char opad[block_size];
++=======
++>>>>>>> cfa1d74495aa (crypto: qat - move temp buffers off the stack)
  	__be32 *hash_state_out;
  	__be64 *hash512_state_out;
  	int i, offset;
* Unmerged path drivers/crypto/qat/qat_common/qat_algs.c
