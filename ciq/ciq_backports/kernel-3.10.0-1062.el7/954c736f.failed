ovl: fix may_write_real() for overlayfs directories

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Amir Goldstein <amir73il@gmail.com>
commit 954c736f865d6c0c68ae4263a2f3502ee7c447a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/954c736f.failed

Overlayfs directory file_inode() is the overlay inode whether the real
inode is upper or lower.

This fixes a regression in xfstest generic/158.

Fixes: 7c6893e3c9ab ("ovl: don't allow writing ioctl on lower layer")
	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 954c736f865d6c0c68ae4263a2f3502ee7c447a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/namespace.c
diff --cc fs/namespace.c
index 9350eca3d061,3b601f115b6c..000000000000
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@@ -431,6 -431,53 +431,56 @@@ int __mnt_want_write_file(struct file *
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * mnt_want_write_file_path - get write access to a file's mount
+  * @file: the file who's mount on which to take a write
+  *
+  * This is like mnt_want_write, but it takes a file and can
+  * do some optimisations if the file is open for write already
+  *
+  * Called by the vfs for cases when we have an open file at hand, but will do an
+  * inode operation on it (important distinction for files opened on overlayfs,
+  * since the file operations will come from the real underlying file, while
+  * inode operations come from the overlay).
+  */
+ int mnt_want_write_file_path(struct file *file)
+ {
+ 	int ret;
+ 
+ 	sb_start_write(file->f_path.mnt->mnt_sb);
+ 	ret = __mnt_want_write_file(file);
+ 	if (ret)
+ 		sb_end_write(file->f_path.mnt->mnt_sb);
+ 	return ret;
+ }
+ 
+ static inline int may_write_real(struct file *file)
+ {
+ 	struct dentry *dentry = file->f_path.dentry;
+ 	struct dentry *upperdentry;
+ 
+ 	/* Writable file? */
+ 	if (file->f_mode & FMODE_WRITER)
+ 		return 0;
+ 
+ 	/* Not overlayfs? */
+ 	if (likely(!(dentry->d_flags & DCACHE_OP_REAL)))
+ 		return 0;
+ 
+ 	/* File refers to upper, writable layer? */
+ 	upperdentry = d_real(dentry, NULL, 0, D_REAL_UPPER);
+ 	if (upperdentry &&
+ 	    (file_inode(file) == d_inode(upperdentry) ||
+ 	     file_inode(file) == d_inode(dentry)))
+ 		return 0;
+ 
+ 	/* Lower layer: can't write to real file, sorry... */
+ 	return -EPERM;
+ }
+ 
+ /**
++>>>>>>> 954c736f865d (ovl: fix may_write_real() for overlayfs directories)
   * mnt_want_write_file - get write access to a file's mount
   * @file: the file who's mount on which to take a write
   *
* Unmerged path fs/namespace.c
