ext4: clean up error handling when orphan list is corrupted

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit 7827a7f6ebfcb7f388dc47fddd48567a314701ba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/7827a7f6.failed

Instead of just printing warning messages, if the orphan list is
corrupted, declare the file system is corrupted.  If there are any
reserved inodes in the orphaned inode list, declare the file system
corrupted and stop right away to avoid doing more potential damage to
the file system.

	Cc: stable@vger.kernel.org
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 7827a7f6ebfcb7f388dc47fddd48567a314701ba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/ialloc.c
diff --cc fs/ext4/ialloc.c
index c7d4e7a65b6b,3da4cf8d18b6..000000000000
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@@ -1069,22 -1150,20 +1069,34 @@@ struct inode *ext4_orphan_get(struct su
  	unsigned long max_ino = le32_to_cpu(EXT4_SB(sb)->s_es->s_inodes_count);
  	ext4_group_t block_group;
  	int bit;
- 	struct buffer_head *bitmap_bh;
+ 	struct buffer_head *bitmap_bh = NULL;
  	struct inode *inode = NULL;
- 	long err = -EIO;
+ 	int err = -EFSCORRUPTED;
  
++<<<<<<< HEAD
 +	/* Error cases - e2fsck has already cleaned up for us */
 +	if (ino > max_ino) {
 +		ext4_warning(sb, "bad orphan ino %lu!  e2fsck was run?", ino);
 +		goto error;
 +	}
++=======
+ 	if (ino < EXT4_FIRST_INO(sb) || ino > max_ino)
+ 		goto bad_orphan;
++>>>>>>> 7827a7f6ebfc (ext4: clean up error handling when orphan list is corrupted)
  
  	block_group = (ino - 1) / EXT4_INODES_PER_GROUP(sb);
  	bit = (ino - 1) % EXT4_INODES_PER_GROUP(sb);
  	bitmap_bh = ext4_read_inode_bitmap(sb, block_group);
++<<<<<<< HEAD
 +	if (!bitmap_bh) {
 +		ext4_warning(sb, "inode bitmap error for orphan %lu", ino);
 +		goto error;
++=======
+ 	if (IS_ERR(bitmap_bh)) {
+ 		ext4_error(sb, "inode bitmap error %ld for orphan %lu",
+ 			   ino, PTR_ERR(bitmap_bh));
+ 		return (struct inode *) bitmap_bh;
++>>>>>>> 7827a7f6ebfc (ext4: clean up error handling when orphan list is corrupted)
  	}
  
  	/* Having the inode bit set should be a 100% indicator that this
* Unmerged path fs/ext4/ialloc.c
