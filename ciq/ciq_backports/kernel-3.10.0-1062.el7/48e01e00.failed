ixgbe/ixgbevf: fix XFRM_ALGO dependency

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jeff Kirsher <jeffrey.t.kirsher@intel.com>
commit 48e01e001da31d5a40e31ed5f8cea83a18823cc1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/48e01e00.failed

Based on the original work from Arnd Bergmann.

When XFRM_ALGO is not enabled, the new ixgbe IPsec code produces a
link error:

drivers/net/ethernet/intel/ixgbe/ixgbe_ipsec.o: In function `ixgbe_ipsec_vf_add_sa':
ixgbe_ipsec.c:(.text+0x1266): undefined reference to `xfrm_aead_get_byname'

Simply selecting XFRM_ALGO from here causes circular dependencies, so
to fix it, we probably want this slightly more complex solution that is
similar to what other drivers with XFRM offload do:

A separate Kconfig symbol now controls whether we include the IPsec
offload code. To keep the old behavior, this is left as 'default y'. The
dependency in XFRM_OFFLOAD still causes a circular dependency but is
not actually needed because this symbol is not user visible, so removing
that dependency on top makes it all work.

CC: Arnd Bergmann <arnd@arndb.de>
CC: Shannon Nelson <shannon.nelson@oracle.com>
Fixes: eda0333ac293 ("ixgbe: add VF IPsec management")
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
(cherry picked from commit 48e01e001da31d5a40e31ed5f8cea83a18823cc1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe.h
#	drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
#	drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
#	net/xfrm/Kconfig
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe.h
index ba3f7581de16,143bdd5ee2a0..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@@ -765,9 -769,14 +765,18 @@@ struct ixgbe_adapter 
  #define IXGBE_RSS_KEY_SIZE     40  /* size of RSS Hash Key in bytes */
  	u32 *rss_key;
  
- #ifdef CONFIG_XFRM_OFFLOAD
+ #ifdef CONFIG_IXGBE_IPSEC
  	struct ixgbe_ipsec *ipsec;
++<<<<<<< HEAD
 +#endif /* CONFIG_XFRM_OFFLOAD */
++=======
+ #endif /* CONFIG_IXGBE_IPSEC */
+ 
+ 	/* AF_XDP zero-copy */
+ 	struct xdp_umem **xsk_umems;
+ 	u16 num_xsk_umems_used;
+ 	u16 num_xsk_umems;
++>>>>>>> 48e01e001da3 (ixgbe/ixgbevf: fix XFRM_ALGO dependency)
  };
  
  static inline u8 ixgbe_max_rss_indices(struct ixgbe_adapter *adapter)
diff --cc drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
index d4b33607bb93,ecab686574b6..000000000000
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
@@@ -483,6 -459,31 +483,34 @@@ int ethtool_ioctl(struct ifreq *ifr)
  
  extern void ixgbevf_write_eitr(struct ixgbevf_q_vector *q_vector);
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_IXGBEVF_IPSEC
+ void ixgbevf_init_ipsec_offload(struct ixgbevf_adapter *adapter);
+ void ixgbevf_stop_ipsec_offload(struct ixgbevf_adapter *adapter);
+ void ixgbevf_ipsec_restore(struct ixgbevf_adapter *adapter);
+ void ixgbevf_ipsec_rx(struct ixgbevf_ring *rx_ring,
+ 		      union ixgbe_adv_rx_desc *rx_desc,
+ 		      struct sk_buff *skb);
+ int ixgbevf_ipsec_tx(struct ixgbevf_ring *tx_ring,
+ 		     struct ixgbevf_tx_buffer *first,
+ 		     struct ixgbevf_ipsec_tx_data *itd);
+ #else
+ static inline void ixgbevf_init_ipsec_offload(struct ixgbevf_adapter *adapter)
+ { }
+ static inline void ixgbevf_stop_ipsec_offload(struct ixgbevf_adapter *adapter)
+ { }
+ static inline void ixgbevf_ipsec_restore(struct ixgbevf_adapter *adapter) { }
+ static inline void ixgbevf_ipsec_rx(struct ixgbevf_ring *rx_ring,
+ 				    union ixgbe_adv_rx_desc *rx_desc,
+ 				    struct sk_buff *skb) { }
+ static inline int ixgbevf_ipsec_tx(struct ixgbevf_ring *tx_ring,
+ 				   struct ixgbevf_tx_buffer *first,
+ 				   struct ixgbevf_ipsec_tx_data *itd)
+ { return 0; }
+ #endif /* CONFIG_IXGBEVF_IPSEC */
+ 
++>>>>>>> 48e01e001da3 (ixgbe/ixgbevf: fix XFRM_ALGO dependency)
  void ixgbe_napi_add_all(struct ixgbevf_adapter *adapter);
  void ixgbe_napi_del_all(struct ixgbevf_adapter *adapter);
  
diff --cc drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index 6b2b21af5680,5e47ede7e832..000000000000
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@@ -4134,7 -4150,11 +4134,15 @@@ static int ixgbevf_xmit_frame_ring(stru
  	first->tx_flags = tx_flags;
  	first->protocol = vlan_get_protocol(skb);
  
++<<<<<<< HEAD
 +	tso = ixgbevf_tso(tx_ring, first, &hdr_len);
++=======
+ #ifdef CONFIG_IXGBEVF_IPSEC
+ 	if (skb->sp && !ixgbevf_ipsec_tx(tx_ring, first, &ipsec_tx))
+ 		goto out_drop;
+ #endif
+ 	tso = ixgbevf_tso(tx_ring, first, &hdr_len, &ipsec_tx);
++>>>>>>> 48e01e001da3 (ixgbe/ixgbevf: fix XFRM_ALGO dependency)
  	if (tso < 0)
  		goto out_drop;
  	else if (!tso)
diff --cc net/xfrm/Kconfig
index bda1a13628a8,140270a13d54..000000000000
--- a/net/xfrm/Kconfig
+++ b/net/xfrm/Kconfig
@@@ -4,6 -4,10 +4,13 @@@
  config XFRM
         bool
         depends on NET
++<<<<<<< HEAD
++=======
+        select GRO_CELLS
+ 
+ config XFRM_OFFLOAD
+        bool
++>>>>>>> 48e01e001da3 (ixgbe/ixgbevf: fix XFRM_ALGO dependency)
  
  config XFRM_ALGO
  	tristate
diff --git a/drivers/net/ethernet/intel/Kconfig b/drivers/net/ethernet/intel/Kconfig
index 22551eef3498..a40964b2903b 100644
--- a/drivers/net/ethernet/intel/Kconfig
+++ b/drivers/net/ethernet/intel/Kconfig
@@ -229,6 +229,15 @@ config IXGBE_DCB
 
 	  If unsure, say N.
 
+config IXGBE_IPSEC
+	bool "IPSec XFRM cryptography-offload acceleration"
+	depends on IXGBE
+	depends on XFRM_OFFLOAD
+	default y
+	select XFRM_ALGO
+	---help---
+	  Enable support for IPSec offload in ixgbe.ko
+
 config IXGBEVF
 	tristate "Intel(R) 82599 Virtual Function Ethernet support"
 	depends on PCI_MSI
@@ -251,6 +260,15 @@ config IXGBEVF
 	  will be called ixgbevf.  MSI-X interrupt support is required
 	  for this driver to work correctly.
 
+config IXGBEVF_IPSEC
+	bool "IPSec XFRM cryptography-offload acceleration"
+	depends on IXGBEVF
+	depends on XFRM_OFFLOAD
+	default y
+	select XFRM_ALGO
+	---help---
+	  Enable support for IPSec offload in ixgbevf.ko
+
 config I40E
 	tristate "Intel(R) Ethernet Controller XL710 Family support"
 	select PTP_1588_CLOCK
diff --git a/drivers/net/ethernet/intel/ixgbe/Makefile b/drivers/net/ethernet/intel/ixgbe/Makefile
index 5414685189ce..b9e1f78a5eff 100644
--- a/drivers/net/ethernet/intel/ixgbe/Makefile
+++ b/drivers/net/ethernet/intel/ixgbe/Makefile
@@ -16,4 +16,4 @@ ixgbe-$(CONFIG_IXGBE_DCB) +=  ixgbe_dcb.o ixgbe_dcb_82598.o \
 ixgbe-$(CONFIG_IXGBE_HWMON) += ixgbe_sysfs.o
 ixgbe-$(CONFIG_DEBUG_FS) += ixgbe_debugfs.o
 ixgbe-$(CONFIG_FCOE:m=y) += ixgbe_fcoe.o
-ixgbe-$(CONFIG_XFRM_OFFLOAD) += ixgbe_ipsec.o
+ixgbe-$(CONFIG_IXGBE_IPSEC) += ixgbe_ipsec.o
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe.h
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 266c62550acb..616211ddf5a3 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -8648,7 +8648,7 @@ netdev_tx_t ixgbe_xmit_frame_ring(struct sk_buff *skb,
 
 #endif /* IXGBE_FCOE */
 
-#ifdef CONFIG_XFRM_OFFLOAD
+#ifdef CONFIG_IXGBE_IPSEC
 	if (skb->sp && !ixgbe_ipsec_tx(tx_ring, first, &ipsec_tx))
 		goto out_drop;
 #endif
@@ -10104,7 +10104,7 @@ ixgbe_features_check(struct sk_buff *skb, struct net_device *dev,
 	 * the TSO, so it's the exception.
 	 */
 	if (skb->encapsulation && !(features & NETIF_F_TSO_MANGLEID)) {
-#ifdef CONFIG_XFRM_OFFLOAD
+#ifdef CONFIG_IXGBE_IPSEC
 		if (!skb->sp)
 #endif
 			features &= ~NETIF_F_TSO;
@@ -10590,7 +10590,7 @@ skip_sriov:
 	if (hw->mac.type >= ixgbe_mac_82599EB)
 		netdev->features |= NETIF_F_SCTP_CRC;
 
-#ifdef CONFIG_XFRM_OFFLOAD
+#ifdef CONFIG_IXGBE_IPSEC
 #define IXGBE_ESP_FEATURES	(NETIF_F_HW_ESP | \
 				 NETIF_F_HW_ESP_TX_CSUM | \
 				 NETIF_F_GSO_ESP)
diff --git a/drivers/net/ethernet/intel/ixgbevf/Makefile b/drivers/net/ethernet/intel/ixgbevf/Makefile
index 505f226a6489..ac6ea802f351 100644
--- a/drivers/net/ethernet/intel/ixgbevf/Makefile
+++ b/drivers/net/ethernet/intel/ixgbevf/Makefile
@@ -36,5 +36,5 @@ ixgbevf-objs := vf.o \
                 mbx.o \
                 ethtool.o \
                 ixgbevf_main.o
-ixgbevf-$(CONFIG_XFRM_OFFLOAD) += ipsec.o
+ixgbevf-$(CONFIG_IXGBEVF_IPSEC) += ipsec.o
 
* Unmerged path drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
* Unmerged path drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
* Unmerged path net/xfrm/Kconfig
