l2tp: pass tunnel pointer to ->session_create()

jira LE-1907
cve CVE-2018-9517
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Guillaume Nault <g.nault@alphalink.fr>
commit f026bc29a8e093edfbb2a77700454b285c97e8ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f026bc29.failed

Using l2tp_tunnel_find() in pppol2tp_session_create() and
l2tp_eth_create() is racy, because no reference is held on the
returned session. These functions are only used to implement the
->session_create callback which is run by l2tp_nl_cmd_session_create().
Therefore searching for the parent tunnel isn't necessary because
l2tp_nl_cmd_session_create() already has a pointer to it and holds a
reference.

This patch modifies ->session_create()'s prototype to directly pass the
the parent tunnel as parameter, thus avoiding searching for it in
pppol2tp_session_create() and l2tp_eth_create().

Since we have to touch the ->session_create() call in
l2tp_nl_cmd_session_create(), let's also remove the useless conditional:
we know that ->session_create isn't NULL at this point because it's
already been checked earlier in this same function.

Finally, one might be tempted to think that the removed
l2tp_tunnel_find() calls were harmless because they would return the
same tunnel as the one held by l2tp_nl_cmd_session_create() anyway.
But that tunnel might be removed and a new one created with same tunnel
Id before the l2tp_tunnel_find() call. In this case l2tp_tunnel_find()
would return the new tunnel which wouldn't be protected by the
reference held by l2tp_nl_cmd_session_create().

Fixes: 309795f4bec2 ("l2tp: Add netlink control API for L2TP")
Fixes: d9e31d17ceba ("l2tp: Add L2TP ethernet pseudowire support")
	Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f026bc29a8e093edfbb2a77700454b285c97e8ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/l2tp/l2tp_eth.c
diff --cc net/l2tp/l2tp_eth.c
index b534da52848f,87da9ef61860..000000000000
--- a/net/l2tp/l2tp_eth.c
+++ b/net/l2tp/l2tp_eth.c
@@@ -204,33 -213,75 +204,81 @@@ static void l2tp_eth_show(struct seq_fi
  }
  #endif
  
++<<<<<<< HEAD
 +static int l2tp_eth_create(struct net *net, u32 tunnel_id, u32 session_id, u32 peer_session_id, struct l2tp_session_cfg *cfg)
++=======
+ static void l2tp_eth_adjust_mtu(struct l2tp_tunnel *tunnel,
+ 				struct l2tp_session *session,
+ 				struct net_device *dev)
+ {
+ 	unsigned int overhead = 0;
+ 	struct dst_entry *dst;
+ 	u32 l3_overhead = 0;
+ 
+ 	/* if the encap is UDP, account for UDP header size */
+ 	if (tunnel->encap == L2TP_ENCAPTYPE_UDP) {
+ 		overhead += sizeof(struct udphdr);
+ 		dev->needed_headroom += sizeof(struct udphdr);
+ 	}
+ 	if (session->mtu != 0) {
+ 		dev->mtu = session->mtu;
+ 		dev->needed_headroom += session->hdr_len;
+ 		return;
+ 	}
+ 	lock_sock(tunnel->sock);
+ 	l3_overhead = kernel_sock_ip_overhead(tunnel->sock);
+ 	release_sock(tunnel->sock);
+ 	if (l3_overhead == 0) {
+ 		/* L3 Overhead couldn't be identified, this could be
+ 		 * because tunnel->sock was NULL or the socket's
+ 		 * address family was not IPv4 or IPv6,
+ 		 * dev mtu stays at 1500.
+ 		 */
+ 		return;
+ 	}
+ 	/* Adjust MTU, factor overhead - underlay L3, overlay L2 hdr
+ 	 * UDP overhead, if any, was already factored in above.
+ 	 */
+ 	overhead += session->hdr_len + ETH_HLEN + l3_overhead;
+ 
+ 	/* If PMTU discovery was enabled, use discovered MTU on L2TP device */
+ 	dst = sk_dst_get(tunnel->sock);
+ 	if (dst) {
+ 		/* dst_mtu will use PMTU if found, else fallback to intf MTU */
+ 		u32 pmtu = dst_mtu(dst);
+ 
+ 		if (pmtu != 0)
+ 			dev->mtu = pmtu;
+ 		dst_release(dst);
+ 	}
+ 	session->mtu = dev->mtu - overhead;
+ 	dev->mtu = session->mtu;
+ 	dev->needed_headroom += session->hdr_len;
+ }
+ 
+ static int l2tp_eth_create(struct net *net, struct l2tp_tunnel *tunnel,
+ 			   u32 session_id, u32 peer_session_id,
+ 			   struct l2tp_session_cfg *cfg)
++>>>>>>> f026bc29a8e0 (l2tp: pass tunnel pointer to ->session_create())
  {
 -	unsigned char name_assign_type;
  	struct net_device *dev;
  	char name[IFNAMSIZ];
- 	struct l2tp_tunnel *tunnel;
  	struct l2tp_session *session;
  	struct l2tp_eth *priv;
  	struct l2tp_eth_sess *spriv;
  	int rc;
  	struct l2tp_eth_net *pn;
  
- 	tunnel = l2tp_tunnel_find(net, tunnel_id);
- 	if (!tunnel) {
- 		rc = -ENODEV;
- 		goto out;
- 	}
- 
  	if (cfg->ifname) {
 +		dev = dev_get_by_name(net, cfg->ifname);
 +		if (dev) {
 +			dev_put(dev);
 +			rc = -EEXIST;
 +			goto out;
 +		}
  		strlcpy(name, cfg->ifname, IFNAMSIZ);
 -		name_assign_type = NET_NAME_USER;
 -	} else {
 +	} else
  		strcpy(name, L2TP_ETH_DEV_NAME);
 -		name_assign_type = NET_NAME_ENUM;
 -	}
  
  	session = l2tp_session_create(sizeof(*spriv), tunnel, session_id,
  				      peer_session_id, cfg);
diff --git a/net/l2tp/l2tp_core.h b/net/l2tp/l2tp_core.h
index 6890ccd7397e..5f46cd6f96ca 100644
--- a/net/l2tp/l2tp_core.h
+++ b/net/l2tp/l2tp_core.h
@@ -213,7 +213,9 @@ struct l2tp_tunnel {
 };
 
 struct l2tp_nl_cmd_ops {
-	int (*session_create)(struct net *net, u32 tunnel_id, u32 session_id, u32 peer_session_id, struct l2tp_session_cfg *cfg);
+	int (*session_create)(struct net *net, struct l2tp_tunnel *tunnel,
+			      u32 session_id, u32 peer_session_id,
+			      struct l2tp_session_cfg *cfg);
 	int (*session_delete)(struct l2tp_session *session);
 };
 
* Unmerged path net/l2tp/l2tp_eth.c
diff --git a/net/l2tp/l2tp_netlink.c b/net/l2tp/l2tp_netlink.c
index 45ec3b9220cd..b2e780aafcee 100644
--- a/net/l2tp/l2tp_netlink.c
+++ b/net/l2tp/l2tp_netlink.c
@@ -553,10 +553,10 @@ static int l2tp_nl_cmd_session_create(struct sk_buff *skb, struct genl_info *inf
 		break;
 	}
 
-	ret = -EPROTONOSUPPORT;
-	if (l2tp_nl_cmd_ops[cfg.pw_type]->session_create)
-		ret = (*l2tp_nl_cmd_ops[cfg.pw_type]->session_create)(net, tunnel_id,
-			session_id, peer_session_id, &cfg);
+	ret = l2tp_nl_cmd_ops[cfg.pw_type]->session_create(net, tunnel,
+							   session_id,
+							   peer_session_id,
+							   &cfg);
 
 out:
 	return ret;
diff --git a/net/l2tp/l2tp_ppp.c b/net/l2tp/l2tp_ppp.c
index 1277fa973d54..6cea045f4f4c 100644
--- a/net/l2tp/l2tp_ppp.c
+++ b/net/l2tp/l2tp_ppp.c
@@ -805,25 +805,20 @@ end:
 
 #ifdef CONFIG_L2TP_V3
 
-/* Called when creating sessions via the netlink interface.
- */
-static int pppol2tp_session_create(struct net *net, u32 tunnel_id, u32 session_id, u32 peer_session_id, struct l2tp_session_cfg *cfg)
+/* Called when creating sessions via the netlink interface. */
+static int pppol2tp_session_create(struct net *net, struct l2tp_tunnel *tunnel,
+				   u32 session_id, u32 peer_session_id,
+				   struct l2tp_session_cfg *cfg)
 {
 	int error;
-	struct l2tp_tunnel *tunnel;
 	struct l2tp_session *session;
 	struct pppol2tp_session *ps;
 
-	tunnel = l2tp_tunnel_find(net, tunnel_id);
-
-	/* Error if we can't find the tunnel */
-	error = -ENOENT;
-	if (tunnel == NULL)
-		goto out;
-
 	/* Error if tunnel socket is not prepped */
-	if (tunnel->sock == NULL)
+	if (!tunnel->sock) {
+		error = -ENOENT;
 		goto out;
+	}
 
 	/* Default MTU values. */
 	if (cfg->mtu == 0)
