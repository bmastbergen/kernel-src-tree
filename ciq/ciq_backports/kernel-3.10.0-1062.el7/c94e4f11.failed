net/mlx5e: Make XDP xmit functions more generic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Make XDP xmit functions more generic (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 95.56%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit c94e4f117e473dec11c7b9395b4d88cae2ba27c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/c94e4f11.failed

Convert the XDP xmit functions to use the generic xdp_frame API
in XDP_TX flow.
Same functions will be used later in this series to transmit
the XDP redirect-out packets as well.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit c94e4f117e473dec11c7b9395b4d88cae2ba27c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,81739aad0188..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -29,34 -29,33 +29,45 @@@
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
 -#ifndef __MLX5_EN_XDP_H__
 -#define __MLX5_EN_XDP_H__
  
 -#include "en.h"
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
  
 -#define MLX5E_XDP_MAX_MTU ((int)(PAGE_SIZE - \
 -				 MLX5_SKB_FRAG_SZ(XDP_PACKET_HEADROOM)))
 -#define MLX5E_XDP_MIN_INLINE (ETH_HLEN + VLAN_HLEN)
 -#define MLX5E_XDP_TX_DS_COUNT \
 -	((sizeof(struct mlx5e_tx_wqe) / MLX5_SEND_WQE_DS) + 1 /* SG DS */)
 +#include "ipath_kernel.h"
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
++=======
+ bool mlx5e_xdp_handle(struct mlx5e_rq *rq, struct mlx5e_dma_info *di,
+ 		      void *va, u16 *rx_headroom, u32 *len);
+ bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq);
+ void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq);
+ 
+ bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi);
+ 
+ static inline void mlx5e_xmit_xdp_doorbell(struct mlx5e_xdpsq *sq)
++>>>>>>> c94e4f117e47 (net/mlx5e: Make XDP xmit functions more generic):drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
  {
 -	struct mlx5_wq_cyc *wq = &sq->wq;
 -	struct mlx5e_tx_wqe *wqe;
 -	u16 pi = mlx5_wq_cyc_ctr2ix(wq, sq->pc - 1); /* last pi */
 -
 -	wqe  = mlx5_wq_cyc_get_wqe(wq, pi);
 -
 -	mlx5e_notify_hw(wq, sq->pc, sq->uar_map, &wqe->ctrl);
 +	return 0;
  }
  
 -#endif
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
 +}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 6cb0654a5d0a,7ed71db9b32f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -833,16 -968,16 +832,26 @@@ static void mlx5e_close_rq(struct mlx5e
  
  static void mlx5e_free_xdpsq_db(struct mlx5e_xdpsq *sq)
  {
++<<<<<<< HEAD
 +	kfree(sq->db.di);
++=======
+ 	kvfree(sq->db.xdpi);
++>>>>>>> c94e4f117e47 (net/mlx5e: Make XDP xmit functions more generic)
  }
  
  static int mlx5e_alloc_xdpsq_db(struct mlx5e_xdpsq *sq, int numa)
  {
  	int wq_sz = mlx5_wq_cyc_get_size(&sq->wq);
  
++<<<<<<< HEAD
 +	sq->db.di = kzalloc_node(sizeof(*sq->db.di) * wq_sz,
 +				     GFP_KERNEL, numa);
 +	if (!sq->db.di) {
++=======
+ 	sq->db.xdpi = kvzalloc_node(array_size(wq_sz, sizeof(*sq->db.xdpi)),
+ 				    GFP_KERNEL, numa);
+ 	if (!sq->db.xdpi) {
++>>>>>>> c94e4f117e47 (net/mlx5e: Make XDP xmit functions more generic)
  		mlx5e_free_xdpsq_db(sq);
  		return -ENOMEM;
  	}
@@@ -864,12 -1000,13 +873,13 @@@ static int mlx5e_alloc_xdpsq(struct mlx
  	sq->channel   = c;
  	sq->uar_map   = mdev->mlx5e_res.bfreg.map;
  	sq->min_inline_mode = params->tx_min_inline_mode;
+ 	sq->hw_mtu    = MLX5E_SW2HW_MTU(params, params->sw_mtu);
  
  	param->wq.db_numa_node = cpu_to_node(c->cpu);
 -	err = mlx5_wq_cyc_create(mdev, &param->wq, sqc_wq, wq, &sq->wq_ctrl);
 +	err = mlx5_wq_cyc_create(mdev, &param->wq, sqc_wq, &sq->wq, &sq->wq_ctrl);
  	if (err)
  		return err;
 -	wq->db = &wq->db[MLX5_SND_DBR];
 +	sq->wq.db = &sq->wq.db[MLX5_SND_DBR];
  
  	err = mlx5e_alloc_xdpsq_db(sq, cpu_to_node(c->cpu));
  	if (err)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index d500f9aa1bd7..e71f9343be60 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -382,6 +382,17 @@ struct mlx5e_txqsq {
 	u32                        rate_limit;
 } ____cacheline_aligned_in_smp;
 
+struct mlx5e_dma_info {
+	struct page     *page;
+	dma_addr_t      addr;
+};
+
+struct mlx5e_xdp_info {
+	struct xdp_frame      *xdpf;
+	dma_addr_t            dma_addr;
+	struct mlx5e_dma_info di;
+};
+
 struct mlx5e_xdpsq {
 	/* data path */
 
@@ -393,7 +404,7 @@ struct mlx5e_xdpsq {
 
 	/* write@xmit, read@completion */
 	struct {
-		struct mlx5e_dma_info     *di;
+		struct mlx5e_xdp_info     *xdpi;
 		bool                       doorbell;
 		bool                       redirect_flush;
 	} db;
@@ -406,6 +417,7 @@ struct mlx5e_xdpsq {
 	__be32                     mkey_be;
 	u8                         min_inline_mode;
 	unsigned long              state;
+	unsigned int               hw_mtu;
 
 	/* control path */
 	struct mlx5_wq_ctrl        wq_ctrl;
@@ -444,11 +456,6 @@ mlx5e_wqc_has_room_for(struct mlx5_wq_cyc *wq, u16 cc, u16 pc, u16 n)
 	return (((wq->sz_m1 & (cc - pc)) >= n) || (cc == pc));
 }
 
-struct mlx5e_dma_info {
-	struct page	*page;
-	dma_addr_t	addr;
-};
-
 struct mlx5e_wqe_frag_info {
 	struct mlx5e_dma_info di;
 	u32 offset;
@@ -534,7 +541,6 @@ struct mlx5e_rq {
 
 	/* XDP */
 	struct bpf_prog       *xdp_prog;
-	unsigned int           hw_mtu;
 	struct mlx5e_xdpsq     xdpsq;
 	DECLARE_BITMAP(flags, 8);
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
