nfp: protect from theoretical size overflows on HW descriptor ring

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 5ea14712d7a22703645217c5296e72cb5adba0a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/5ea14712.failed

Use array_size() and store the size as full size_t to protect from
theoretical size overflow when handling HW descriptor rings.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5ea14712d7a22703645217c5296e72cb5adba0a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 94881f4ab34d,7c1a921d178d..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -55,6 -53,8 +55,11 @@@
  #include <linux/interrupt.h>
  #include <linux/ip.h>
  #include <linux/ipv6.h>
++<<<<<<< HEAD
++=======
+ #include <linux/mm.h>
+ #include <linux/overflow.h>
++>>>>>>> 5ea14712d7a2 (nfp: protect from theoretical size overflows on HW descriptor ring)
  #include <linux/page_ref.h>
  #include <linux/pci.h>
  #include <linux/pci_regs.h>
@@@ -2317,10 -2299,17 +2322,10 @@@ static void nfp_net_rx_ring_free(struc
  static int
  nfp_net_rx_ring_alloc(struct nfp_net_dp *dp, struct nfp_net_rx_ring *rx_ring)
  {
 -	int err;
 -
 -	if (dp->netdev) {
 -		err = xdp_rxq_info_reg(&rx_ring->xdp_rxq, dp->netdev,
 -				       rx_ring->idx);
 -		if (err < 0)
 -			return err;
 -	}
 +	int sz;
  
  	rx_ring->cnt = dp->rxd_cnt;
- 	rx_ring->size = sizeof(*rx_ring->rxds) * rx_ring->cnt;
+ 	rx_ring->size = array_size(rx_ring->cnt, sizeof(*rx_ring->rxds));
  	rx_ring->rxds = dma_zalloc_coherent(dp->dev, rx_ring->size,
  					    &rx_ring->dma, GFP_KERNEL);
  	if (!rx_ring->rxds)
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net.h b/drivers/net/ethernet/netronome/nfp/nfp_net.h
index 401d705a5802..b1f963227098 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@ -249,7 +249,7 @@ struct nfp_net_tx_ring {
 	struct nfp_net_tx_desc *txds;
 
 	dma_addr_t dma;
-	unsigned int size;
+	size_t size;
 	bool is_xdp;
 } ____cacheline_aligned;
 
@@ -368,7 +368,7 @@ struct nfp_net_rx_ring {
 	struct nfp_net_rx_desc *rxds;
 
 	dma_addr_t dma;
-	unsigned int size;
+	size_t size;
 } ____cacheline_aligned;
 
 /**
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
