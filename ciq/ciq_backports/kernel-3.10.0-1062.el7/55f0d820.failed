autofs: improve ioctl sbi checks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Ian Kent <raven@themaw.net>
commit 55f0d8205dc6399826332c21bc56626868cd453d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/55f0d820.failed

Al Viro made some suggestions to improve the implementation of commit
0633da48f0 ("fix autofs_sbi() does not check super block type").

The check is unnecessary in all cases except for ioctl usage so placing
the check in the super block accessor function adds a small overhead to
the common case where it isn't needed.

So it's sufficient to do this in the ioctl code only.

Also the check in the ioctl code is needlessly complex.

[akpm@linux-foundation.org: declare autofs_fs_type in .h, not .c]
Link: http://lkml.kernel.org/r/154296970987.9889.1597442413573683096.stgit@pluto-themaw-net
	Signed-off-by: Ian Kent <raven@themaw.net>
	Cc: Al Viro <viro@ZenIV.linux.org.uk>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 55f0d8205dc6399826332c21bc56626868cd453d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/autofs4/dev-ioctl.c
diff --cc fs/autofs4/dev-ioctl.c
index 64cab87d7825,752983aafb84..000000000000
--- a/fs/autofs4/dev-ioctl.c
+++ b/fs/autofs4/dev-ioctl.c
@@@ -154,22 -151,6 +154,25 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD:fs/autofs4/dev-ioctl.c
 +/*
 + * Get the autofs super block info struct from the file opened on
 + * the autofs mount point.
 + */
 +static struct autofs_sb_info *autofs_dev_ioctl_sbi(struct file *f)
 +{
 +	struct autofs_sb_info *sbi = NULL;
 +	struct inode *inode;
 +
 +	if (f) {
 +		inode = file_inode(f);
 +		sbi = autofs4_sbi(inode->i_sb);
 +	}
 +	return sbi;
 +}
 +
++=======
++>>>>>>> 55f0d8205dc6 (autofs: improve ioctl sbi checks):fs/autofs/dev-ioctl.c
  /* Return autofs dev ioctl version */
  static int autofs_dev_ioctl_version(struct file *fp,
  				    struct autofs_sb_info *sbi,
@@@ -675,14 -652,8 +680,19 @@@ static int _autofs_dev_ioctl(unsigned i
  			goto out;
  		}
  
++<<<<<<< HEAD:fs/autofs4/dev-ioctl.c
 +		if (!fp->f_op) {
 +			err = -ENOTTY;
 +			fput(fp);
 +			goto out;
 +		}
 +
 +		sbi = autofs_dev_ioctl_sbi(fp);
 +		if (!sbi || sbi->magic != AUTOFS_SBI_MAGIC) {
++=======
+ 		sb = file_inode(fp)->i_sb;
+ 		if (sb->s_type != &autofs_fs_type) {
++>>>>>>> 55f0d8205dc6 (autofs: improve ioctl sbi checks):fs/autofs/dev-ioctl.c
  			err = -EINVAL;
  			fput(fp);
  			goto out;
diff --git a/fs/autofs4/autofs_i.h b/fs/autofs4/autofs_i.h
index 7e44fa72be46..241e42a26e6d 100644
--- a/fs/autofs4/autofs_i.h
+++ b/fs/autofs4/autofs_i.h
@@ -39,6 +39,8 @@
 #endif
 #define pr_fmt(fmt) KBUILD_MODNAME ":pid:%d:%s: " fmt, current->pid, __func__
 
+extern struct file_system_type autofs_fs_type;
+
 /*
  * Unified info structure.  This is pointed to by both the dentry and
  * inode structures.  Each file in the filesystem has an instance of this
* Unmerged path fs/autofs4/dev-ioctl.c
diff --git a/fs/autofs4/init.c b/fs/autofs4/init.c
index 8cf0e63389ae..affc4ddeae7f 100644
--- a/fs/autofs4/init.c
+++ b/fs/autofs4/init.c
@@ -16,7 +16,7 @@ static struct dentry *autofs_mount(struct file_system_type *fs_type,
 	return mount_nodev(fs_type, flags, data, autofs4_fill_super);
 }
 
-static struct file_system_type autofs_fs_type = {
+struct file_system_type autofs_fs_type = {
 	.owner		= THIS_MODULE,
 	.name		= "autofs",
 	.mount		= autofs_mount,
