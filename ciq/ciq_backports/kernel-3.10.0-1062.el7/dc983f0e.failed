net/mlx5e: Add a counter for congested UMRs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add a counter for congested UMRs (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 95.12%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit dc983f0e2b6e2b514cdb1c687fdf7b5a007f8ea4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/dc983f0e.failed

Add per-ring and global ethtool counters for congested UMR requests.
These events indicate congestion in UMR handlers in HW.

Such event is concluded when there's an outstanding UMR post,
yet the SW consumed at least two additional MPWQEs in the meanwhile.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit dc983f0e2b6e2b514cdb1c687fdf7b5a007f8ea4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 96dab53d64cc,dd3b5a028a97..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -73,8 -83,11 +73,15 @@@ static const struct counter_desc sw_sta
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_empty) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_busy) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_waive) },
++<<<<<<< HEAD
++=======
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_congst_umr) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_poll) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_arm) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_aff_change) },
++>>>>>>> dc983f0e2b6e (net/mlx5e: Add a counter for congested UMRs)
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_eq_rearm) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, link_down_events_phy) },
  };
  
  #define NUM_SW_COUNTERS			ARRAY_SIZE(sw_stats_desc)
@@@ -139,6 -153,10 +146,13 @@@ static void mlx5e_grp_sw_update_stats(s
  		s->rx_cache_empty += rq_stats->cache_empty;
  		s->rx_cache_busy  += rq_stats->cache_busy;
  		s->rx_cache_waive += rq_stats->cache_waive;
++<<<<<<< HEAD
++=======
+ 		s->rx_congst_umr  += rq_stats->congst_umr;
+ 		s->ch_poll        += ch_stats->poll;
+ 		s->ch_arm         += ch_stats->arm;
+ 		s->ch_aff_change  += ch_stats->aff_change;
++>>>>>>> dc983f0e2b6e (net/mlx5e: Add a counter for congested UMRs)
  		s->ch_eq_rearm += ch_stats->eq_rearm;
  
  		for (j = 0; j < priv->max_opened_tc; j++) {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 2036ba733d42,4e54cb86fece..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -91,10 -94,16 +91,17 @@@ struct mlx5e_sw_stats 
  	u64 rx_cache_empty;
  	u64 rx_cache_busy;
  	u64 rx_cache_waive;
++<<<<<<< HEAD
++=======
+ 	u64 rx_congst_umr;
+ 	u64 ch_poll;
+ 	u64 ch_arm;
+ 	u64 ch_aff_change;
++>>>>>>> dc983f0e2b6e (net/mlx5e: Add a counter for congested UMRs)
  	u64 ch_eq_rearm;
  
 -#ifdef CONFIG_MLX5_EN_TLS
 -	u64 tx_tls_ooo;
 -	u64 tx_tls_resync_bytes;
 -#endif
 +	/* Special handling counters */
 +	u64 link_down_events_phy;
  };
  
  struct mlx5e_qcounter_stats {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 2e99e2b79b34..5374cc434af1 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -551,6 +551,8 @@ bool mlx5e_post_rx_mpwqes(struct mlx5e_rq *rq)
 
 	if (!rq->mpwqe.umr_in_progress)
 		mlx5e_alloc_rx_mpwqe(rq, wq->head);
+	else
+		rq->stats->congst_umr += mlx5_wq_ll_missing(wq) > 2;
 
 	return false;
 }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/wq.h b/drivers/net/ethernet/mellanox/mlx5/core/wq.h
index f3dfa0ca3c5d..ccd3cbea75b7 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/wq.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/wq.h
@@ -174,6 +174,11 @@ static inline int mlx5_wq_ll_is_empty(struct mlx5_wq_ll *wq)
 	return !wq->cur_sz;
 }
 
+static inline int mlx5_wq_ll_missing(struct mlx5_wq_ll *wq)
+{
+	return wq->fbc.sz_m1 - wq->cur_sz;
+}
+
 static inline void *mlx5_wq_ll_get_wqe(struct mlx5_wq_ll *wq, u16 ix)
 {
 	return wq->buf + (ix << wq->log_stride);
