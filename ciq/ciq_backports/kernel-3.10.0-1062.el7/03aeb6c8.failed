perf trace beauty: Add beautifiers for 'socket''s 'protocol' arg

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 03aeb6c818b608a2b344e21bb978030c41158045
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/03aeb6c8.failed

It'll be wired to 'perf trace' in the next cset.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: https://lkml.kernel.org/n/tip-2i9vkvm1ik8yu4hgjmxhsyjv@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 03aeb6c818b608a2b344e21bb978030c41158045)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
#	tools/perf/trace/beauty/Build
diff --cc tools/perf/Makefile.perf
index 0cc0905bf965,b3d1b12a5081..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -566,7 -572,9 +574,8 @@@ prepare: $(OUTPUT)PERF-VERSION-FILE $(O
  	$(pkey_alloc_access_rights_array) \
  	$(sndrv_pcm_ioctl_array) \
  	$(sndrv_ctl_ioctl_array) \
 -	$(kcmp_type_array) \
  	$(kvm_ioctl_array) \
+ 	$(socket_ipproto_array) \
  	$(vhost_virtio_ioctl_array) \
  	$(madvise_behavior_array) \
  	$(perf_ioctl_array) \
@@@ -843,6 -868,8 +852,11 @@@ clean:: $(LIBTRACEEVENT)-clean $(LIBAPI
  		$(OUTPUT)$(sndrv_ctl_ioctl_array) \
  		$(OUTPUT)$(sndrv_pcm_ioctl_array) \
  		$(OUTPUT)$(kvm_ioctl_array) \
++<<<<<<< HEAD
++=======
+ 		$(OUTPUT)$(kcmp_type_array) \
+ 		$(OUTPUT)$(socket_ipproto_array) \
++>>>>>>> 03aeb6c818b6 (perf trace beauty: Add beautifiers for 'socket''s 'protocol' arg)
  		$(OUTPUT)$(vhost_virtio_ioctl_array) \
  		$(OUTPUT)$(perf_ioctl_array) \
  		$(OUTPUT)$(prctl_option_array) \
diff --cc tools/perf/trace/beauty/Build
index 3e2b322bfc1d,f528ba35e140..000000000000
--- a/tools/perf/trace/beauty/Build
+++ b/tools/perf/trace/beauty/Build
@@@ -5,5 -3,9 +5,10 @@@ libperf-y += fcntl.
  ifeq ($(SRCARCH),$(filter $(SRCARCH),x86))
  libperf-y += ioctl.o
  endif
 -libperf-y += kcmp.o
  libperf-y += pkey_alloc.o
  libperf-y += prctl.o
++<<<<<<< HEAD
++=======
+ libperf-y += socket.o
+ libperf-y += statx.o
++>>>>>>> 03aeb6c818b6 (perf trace beauty: Add beautifiers for 'socket''s 'protocol' arg)
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/trace/beauty/Build
diff --git a/tools/perf/trace/beauty/beauty.h b/tools/perf/trace/beauty/beauty.h
index 192080ba2acd..2e102c771797 100644
--- a/tools/perf/trace/beauty/beauty.h
+++ b/tools/perf/trace/beauty/beauty.h
@@ -96,6 +96,9 @@ size_t syscall_arg__scnprintf_prctl_arg2(char *bf, size_t size, struct syscall_a
 size_t syscall_arg__scnprintf_prctl_arg3(char *bf, size_t size, struct syscall_arg *arg);
 #define SCA_PRCTL_ARG3 syscall_arg__scnprintf_prctl_arg3
 
+size_t syscall_arg__scnprintf_socket_protocol(char *bf, size_t size, struct syscall_arg *arg);
+#define SCA_SK_PROTO syscall_arg__scnprintf_socket_protocol
+
 size_t syscall_arg__scnprintf_statx_flags(char *bf, size_t size, struct syscall_arg *arg);
 #define SCA_STATX_FLAGS syscall_arg__scnprintf_statx_flags
 
diff --git a/tools/perf/trace/beauty/socket.c b/tools/perf/trace/beauty/socket.c
new file mode 100644
index 000000000000..65227269384b
--- /dev/null
+++ b/tools/perf/trace/beauty/socket.c
@@ -0,0 +1,28 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * trace/beauty/socket.c
+ *
+ *  Copyright (C) 2018, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ */
+
+#include "trace/beauty/beauty.h"
+#include <sys/types.h>
+#include <sys/socket.h>
+
+static size_t socket__scnprintf_ipproto(int protocol, char *bf, size_t size)
+{
+#include "trace/beauty/generated/socket_ipproto_array.c"
+	static DEFINE_STRARRAY(socket_ipproto);
+
+	return strarray__scnprintf(&strarray__socket_ipproto, bf, size, "%d", protocol);
+}
+
+size_t syscall_arg__scnprintf_socket_protocol(char *bf, size_t size, struct syscall_arg *arg)
+{
+	int domain = syscall_arg__val(arg, 0);
+
+	if (domain == AF_INET || domain == AF_INET6)
+		return socket__scnprintf_ipproto(arg->val, bf, size);
+
+	return syscall_arg__scnprintf_int(bf, size, arg);
+}
