powerpc/64s: Add support for ori barrier_nospec patching

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powerpc] 64s: Add support for ori barrier_nospec patching (Gustavo Duarte) [1694459]
Rebuild_FUZZ: 92.31%
commit-author Michal Suchanek <msuchanek@suse.de>
commit 2eea7f067f495e33b8b116b35b5988ab2b8aec55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/2eea7f06.failed

Based on the RFI patching. This is required to be able to disable the
speculation barrier.

Only one barrier type is supported and it does nothing when the
firmware does not enable it. Also re-patching modules is not supported
So the only meaningful thing that can be done is patching out the
speculation barrier at boot when the user says it is not wanted.

	Signed-off-by: Michal Suchanek <msuchanek@suse.de>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 2eea7f067f495e33b8b116b35b5988ab2b8aec55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/barrier.h
#	arch/powerpc/include/asm/feature-fixups.h
diff --cc arch/powerpc/include/asm/barrier.h
index df6b7335588b,f67b3f6e36be..000000000000
--- a/arch/powerpc/include/asm/barrier.h
+++ b/arch/powerpc/include/asm/barrier.h
@@@ -90,7 -76,21 +90,26 @@@ do {									
  	___p1;								\
  })
  
++<<<<<<< HEAD
 +#define smp_mb__before_atomic()     smp_mb()
 +#define smp_mb__after_atomic()      smp_mb()
++=======
+ #ifdef CONFIG_PPC_BOOK3S_64
+ /*
+  * Prevent execution of subsequent instructions until preceding branches have
+  * been fully resolved and are no longer executing speculatively.
+  */
+ #define barrier_nospec_asm NOSPEC_BARRIER_FIXUP_SECTION; nop
+ 
+ // This also acts as a compiler barrier due to the memory clobber.
+ #define barrier_nospec() asm (stringify_in_c(barrier_nospec_asm) ::: "memory")
+ 
+ #else /* !CONFIG_PPC_BOOK3S_64 */
+ #define barrier_nospec_asm
+ #define barrier_nospec()
+ #endif
+ 
+ #include <asm-generic/barrier.h>
++>>>>>>> 2eea7f067f49 (powerpc/64s: Add support for ori barrier_nospec patching)
  
  #endif /* _ASM_POWERPC_BARRIER_H */
diff --cc arch/powerpc/include/asm/feature-fixups.h
index 6f5a996d8ddb,86ac59e75f36..000000000000
--- a/arch/powerpc/include/asm/feature-fixups.h
+++ b/arch/powerpc/include/asm/feature-fixups.h
@@@ -215,4 -187,31 +215,34 @@@ label##3:					       	
  	FTR_ENTRY_OFFSET label##1b-label##3b;		\
  	.popsection;
  
++<<<<<<< HEAD
++=======
+ #define RFI_FLUSH_FIXUP_SECTION				\
+ 951:							\
+ 	.pushsection __rfi_flush_fixup,"a";		\
+ 	.align 2;					\
+ 952:							\
+ 	FTR_ENTRY_OFFSET 951b-952b;			\
+ 	.popsection;
+ 
+ #define NOSPEC_BARRIER_FIXUP_SECTION			\
+ 953:							\
+ 	.pushsection __barrier_nospec_fixup,"a";	\
+ 	.align 2;					\
+ 954:							\
+ 	FTR_ENTRY_OFFSET 953b-954b;			\
+ 	.popsection;
+ 
+ 
+ #ifndef __ASSEMBLY__
+ #include <linux/types.h>
+ 
+ extern long __start___rfi_flush_fixup, __stop___rfi_flush_fixup;
+ extern long __start___barrier_nospec_fixup, __stop___barrier_nospec_fixup;
+ 
+ void apply_feature_fixups(void);
+ void setup_feature_keys(void);
+ #endif
+ 
++>>>>>>> 2eea7f067f49 (powerpc/64s: Add support for ori barrier_nospec patching)
  #endif /* __ASM_POWERPC_FEATURE_FIXUPS_H */
* Unmerged path arch/powerpc/include/asm/barrier.h
* Unmerged path arch/powerpc/include/asm/feature-fixups.h
diff --git a/arch/powerpc/include/asm/setup.h b/arch/powerpc/include/asm/setup.h
index cb1e56079d12..bda0391cb690 100644
--- a/arch/powerpc/include/asm/setup.h
+++ b/arch/powerpc/include/asm/setup.h
@@ -40,6 +40,7 @@ enum l1d_flush_type {
 
 void setup_rfi_flush(enum l1d_flush_type, bool enable);
 void do_rfi_flush_fixups(enum l1d_flush_type types);
+void do_barrier_nospec_fixups(bool enable);
 
 #endif /* !__ASSEMBLY__ */
 
diff --git a/arch/powerpc/kernel/security.c b/arch/powerpc/kernel/security.c
index 43a3b9750483..53f9df6f7012 100644
--- a/arch/powerpc/kernel/security.c
+++ b/arch/powerpc/kernel/security.c
@@ -10,10 +10,19 @@
 #include <linux/debugfs.h>
 
 #include <asm/security_features.h>
+#include <asm/setup.h>
 
 
 unsigned long powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;
 
+static bool barrier_nospec_enabled;
+
+static void enable_barrier_nospec(bool enable)
+{
+	barrier_nospec_enabled = enable;
+	do_barrier_nospec_fixups(enable);
+}
+
 ssize_t cpu_show_meltdown(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	bool thread_priv;
diff --git a/arch/powerpc/kernel/vmlinux.lds.S b/arch/powerpc/kernel/vmlinux.lds.S
index 08f3ea1f3d67..a8029314b3de 100644
--- a/arch/powerpc/kernel/vmlinux.lds.S
+++ b/arch/powerpc/kernel/vmlinux.lds.S
@@ -94,6 +94,13 @@ SECTIONS
 		*(__rfi_flush_fixup)
 		__stop___rfi_flush_fixup = .;
 	}
+
+	. = ALIGN(8);
+	__spec_barrier_fixup : AT(ADDR(__spec_barrier_fixup) - LOAD_OFFSET) {
+		__start___barrier_nospec_fixup = .;
+		*(__barrier_nospec_fixup)
+		__stop___barrier_nospec_fixup = .;
+	}
 #endif
 
 	EXCEPTION_TABLE(0)
diff --git a/arch/powerpc/lib/feature-fixups.c b/arch/powerpc/lib/feature-fixups.c
index bf84e37263b5..c8d202c7518a 100644
--- a/arch/powerpc/lib/feature-fixups.c
+++ b/arch/powerpc/lib/feature-fixups.c
@@ -275,6 +275,33 @@ void do_rfi_flush_fixups(enum l1d_flush_type types)
 		(types &  L1D_FLUSH_MTTRIG)     ? "mttrig type"
 						: "unknown");
 }
+
+void do_barrier_nospec_fixups(bool enable)
+{
+	unsigned int instr, *dest;
+	long *start, *end;
+	int i;
+
+	start = PTRRELOC(&__start___barrier_nospec_fixup),
+	end = PTRRELOC(&__stop___barrier_nospec_fixup);
+
+	instr = 0x60000000; /* nop */
+
+	if (enable) {
+		pr_info("barrier-nospec: using ORI speculation barrier\n");
+		instr = 0x63ff0000; /* ori 31,31,0 speculation barrier */
+	}
+
+	for (i = 0; start < end; start++, i++) {
+		dest = (void *)start + *start;
+
+		pr_devel("patching dest %lx\n", (unsigned long)dest);
+		patch_instruction(dest, instr);
+	}
+
+	printk(KERN_DEBUG "barrier-nospec: patched %d locations\n", i);
+}
+
 #endif /* CONFIG_PPC_BOOK3S_64 */
 
 void do_lwsync_fixups(unsigned long value, void *fixup_start, void *fixup_end)
