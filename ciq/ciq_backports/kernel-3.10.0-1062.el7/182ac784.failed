scsi: mpt3sas: Introduce Base function for cloning.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: Introduce Base function for cloning (Tomas Henzl) [1513855]
Rebuild_FUZZ: 92.63%
commit-author Suganath Prabu Subramani <suganath-prabu.subramani@broadcom.com>
commit 182ac784b41faee02e8b44cd7149575258ad6858
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/182ac784.failed

All scsi IO's and config request's data buffer and sgl are cloned to
system memory in _clone_sg_entries before submitting it to firmware.

	Signed-off-by: Suganath Prabu S <suganath-prabu.subramani@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 182ac784b41faee02e8b44cd7149575258ad6858)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.c
index 2d5e2fd11ddb,484bb987afb4..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@@ -2699,6 -3418,116 +2912,119 @@@ mpt3sas_base_put_smid_default(struct MP
  }
  
  /**
++<<<<<<< HEAD
++=======
+ * _base_put_smid_scsi_io_atomic - send SCSI_IO request to firmware using
+ *   Atomic Request Descriptor
+ * @ioc: per adapter object
+ * @smid: system request message index
+ * @handle: device handle, unused in this function, for function type match
+ *
+ * Return nothing.
+ */
+ static void
+ _base_put_smid_scsi_io_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid,
+ 	u16 handle)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_SCSI_IO;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_fast_path_atomic - send fast path request to firmware
+  * using Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  * @handle: device handle, unused in this function, for function type match
+  * Return nothing
+  */
+ static void
+ _base_put_smid_fast_path_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid,
+ 	u16 handle)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI25_REQ_DESCRIPT_FLAGS_FAST_PATH_SCSI_IO;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_hi_priority_atomic - send Task Management request to
+  * firmware using Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  * @msix_task: msix_task will be same as msix of IO incase of task abort else 0
+  *
+  * Return nothing.
+  */
+ static void
+ _base_put_smid_hi_priority_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid,
+ 	u16 msix_task)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_HIGH_PRIORITY;
+ 	descriptor.MSIxIndex = msix_task;
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_nvme_encap_atomic - send NVMe encapsulated request to
+  *   firmware using Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  *
+  * Return nothing.
+  */
+ static void
+ _base_put_smid_nvme_encap_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI26_REQ_DESCRIPT_FLAGS_PCIE_ENCAPSULATED;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_default - Default, primarily used for config pages
+  *				use Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  *
+  * Return nothing.
+  */
+ static void
+ _base_put_smid_default_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_DEFAULT_TYPE;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
++>>>>>>> 182ac784b41f (scsi: mpt3sas: Introduce Base function for cloning.)
   * _base_display_OEMs_branding - Display branding string
   * @ioc: per adapter object
   *
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.c
diff --git a/drivers/scsi/mpt3sas/mpt3sas_base.h b/drivers/scsi/mpt3sas/mpt3sas_base.h
index ad008c86cc10..dd28463d4c15 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_base.h
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.h
@@ -94,6 +94,8 @@
 #define MPT_MIN_PHYS_SEGMENTS	16
 #define MPT_KDUMP_MIN_PHYS_SEGMENTS	32
 
+#define MCPU_MAX_CHAINS_PER_IO	3
+
 #ifdef CONFIG_SCSI_MPT3SAS_MAX_SGE
 #define MPT3SAS_SG_DEPTH		CONFIG_SCSI_MPT3SAS_MAX_SGE
 #else
@@ -1207,6 +1209,7 @@ struct MPT3SAS_ADAPTER {
 	u16		config_page_sz;
 	void		*config_page;
 	dma_addr_t	config_page_dma;
+	void		*config_vaddr;
 
 	/* scsiio request */
 	u16		hba_queue_depth;
diff --git a/drivers/scsi/mpt3sas/mpt3sas_config.c b/drivers/scsi/mpt3sas/mpt3sas_config.c
index 8dec73c419b6..e87c76a832f6 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_config.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_config.c
@@ -219,6 +219,7 @@ _config_alloc_config_dma_memory(struct MPT3SAS_ADAPTER *ioc,
 		mem->page = ioc->config_page;
 		mem->page_dma = ioc->config_page_dma;
 	}
+	ioc->config_vaddr = mem->page;
 	return r;
 }
 
