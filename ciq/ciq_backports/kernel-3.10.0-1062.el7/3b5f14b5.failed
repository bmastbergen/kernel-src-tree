ixgbe: Reorder Tx/Rx shutdown to reduce time needed to stop device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Alexander Duyck <alexander.h.duyck@intel.com>
commit 3b5f14b50ee2079190ae6cfe7477e74676651665
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/3b5f14b5.failed

This change is meant to help reduce the time needed to shutdown the
transmit and receive paths for the device. Specifically what we now do
after this patch is disable the transmit path first at the netdev level,
and then work on disabling the Rx. This way while we are waiting on the Rx
queues to be disabled the Tx queues have an opportunity to drain out.

In addition I have dropped the 10ms timeout that was left in the ixgbe_down
function that seems to have been carried through from back in e1000 as far
as I can tell. We shouldn't need it since we don't actually disable the Tx
until much later and we have additional logic in place for verifying the Tx
queues have been disabled.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Tested-by: Don Buchholz <donald.buchholz@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 3b5f14b50ee2079190ae6cfe7477e74676651665)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index cdde016a403b,aa4f05c36260..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@@ -5825,8 -5811,16 +5825,15 @@@ void ixgbe_down(struct ixgbe_adapter *a
  	int i;
  
  	/* signal that we are down to the interrupt handler */
 -	if (test_and_set_bit(__IXGBE_DOWN, &adapter->state))
 -		return; /* do nothing if already down */
 +	set_bit(__IXGBE_DOWN, &adapter->state);
  
+ 	/* Shut off incoming Tx traffic */
+ 	netif_tx_stop_all_queues(netdev);
+ 
+ 	/* call carrier off first to avoid false dev_watchdog timeouts */
+ 	netif_carrier_off(netdev);
+ 	netif_tx_disable(netdev);
+ 
  	/* disable receives */
  	hw->mac.ops.disable_rx(hw);
  
@@@ -5835,13 -5829,9 +5842,19 @@@
  		/* this call also flushes the previous write */
  		ixgbe_disable_rx_queue(adapter, adapter->rx_ring[i]);
  
++<<<<<<< HEAD
 +	usleep_range(10000, 20000);
 +
 +	netif_tx_stop_all_queues(netdev);
 +
 +	/* call carrier off first to avoid false dev_watchdog timeouts */
 +	netif_carrier_off(netdev);
 +	netif_tx_disable(netdev);
++=======
+ 	/* synchronize_sched() needed for pending XDP buffers to drain */
+ 	if (adapter->xdp_ring[0])
+ 		synchronize_sched();
++>>>>>>> 3b5f14b50ee2 (ixgbe: Reorder Tx/Rx shutdown to reduce time needed to stop device)
  
  	ixgbe_irq_disable(adapter);
  
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
