x86/hyperv: Stop suppressing X86_FEATURE_PCID

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] hyperv: Stop suppressing X86_FEATURE_PCID (Vitaly Kuznetsov) [1691421]
Rebuild_FUZZ: 95.35%
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit 617ab45c9a8900e64a78b43696c02598b8cad68b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/617ab45c.failed

When hypercall-based TLB flush was enabled for Hyper-V guests PCID feature
was deliberately suppressed as a precaution: back then PCID was never
exposed to Hyper-V guests and it wasn't clear what will happen if some day
it becomes available. The day came and PCID/INVPCID features are already
exposed on certain Hyper-V hosts.

From TLFS (as of 5.0b) it is unclear how TLB flush hypercalls combine with
PCID. In particular the usage of PCID is per-cpu based: the same mm gets
different CR3 values on different CPUs. If the hypercall does exact
matching this will fail. However, this is not the case. David Zhang
explains:

 "In practice, the AddressSpace argument is ignored on any VM that supports
  PCIDs.

  Architecturally, the AddressSpace argument must match the CR3 with PCID
  bits stripped out (i.e., the low 12 bits of AddressSpace should be 0 in
  long mode). The flush hypercalls flush all PCIDs for the specified
  AddressSpace."

With this, PCID can be enabled.

	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: David Zhang <dazhan@microsoft.com>
	Cc: Stephen Hemminger <sthemmin@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: "Michael Kelley (EOSG)" <Michael.H.Kelley@microsoft.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: devel@linuxdriverproject.org
	Cc: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Aditya Bhandari <adityabh@microsoft.com>
Link: https://lkml.kernel.org/r/20180124103629.29980-1-vkuznets@redhat.com

(cherry picked from commit 617ab45c9a8900e64a78b43696c02598b8cad68b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/hyperv/mmu.c
diff --cc arch/x86/hyperv/mmu.c
index 456304ec28bd,56c9ebac946f..000000000000
--- a/arch/x86/hyperv/mmu.c
+++ b/arch/x86/hyperv/mmu.c
@@@ -137,8 -136,13 +137,18 @@@ static void hyperv_flush_tlb_others(con
  		goto do_native;
  	}
  
++<<<<<<< HEAD
 +	if (mm) {
 +		flush->address_space = virt_to_phys(mm->pgd);
++=======
+ 	if (info->mm) {
+ 		/*
+ 		 * AddressSpace argument must match the CR3 with PCID bits
+ 		 * stripped out.
+ 		 */
+ 		flush->address_space = virt_to_phys(info->mm->pgd);
+ 		flush->address_space &= CR3_ADDR_MASK;
++>>>>>>> 617ab45c9a89 (x86/hyperv: Stop suppressing X86_FEATURE_PCID)
  		flush->flags = 0;
  	} else {
  		flush->address_space = 0;
@@@ -221,8 -223,13 +231,18 @@@ static void hyperv_flush_tlb_others_ex(
  		goto do_native;
  	}
  
++<<<<<<< HEAD
 +	if (mm) {
 +		flush->address_space = virt_to_phys(mm->pgd);
++=======
+ 	if (info->mm) {
+ 		/*
+ 		 * AddressSpace argument must match the CR3 with PCID bits
+ 		 * stripped out.
+ 		 */
+ 		flush->address_space = virt_to_phys(info->mm->pgd);
+ 		flush->address_space &= CR3_ADDR_MASK;
++>>>>>>> 617ab45c9a89 (x86/hyperv: Stop suppressing X86_FEATURE_PCID)
  		flush->flags = 0;
  	} else {
  		flush->address_space = 0;
* Unmerged path arch/x86/hyperv/mmu.c
