PCI: Add pcie_print_link_status() to log link speed and whether it's limited

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [pci] Add pcie_print_link_status() to log link speed and whether it's limited (Myron Stowe) [1647773]
Rebuild_FUZZ: 96.60%
commit-author Tal Gilboa <talgi@mellanox.com>
commit 9e506a7b51474241f0c900e53e85512780275c05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9e506a7b.failed

Add pcie_print_link_status().  This logs the current settings of the link
(speed, width, and total available bandwidth).

If the device is capable of more bandwidth but is limited by a slower
upstream link, we include information about the link that limits the
device's performance.

The user may be able to move the device to a different slot for better
performance.

This provides a unified method for all PCI devices to report status and
issues, instead of each device reporting in a different way, using
different code.

	Signed-off-by: Tal Gilboa <talgi@mellanox.com>
[bhelgaas: changelog, reword log messages, print device capabilities when
not limited, print bandwidth in Gb/s]
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 9e506a7b51474241f0c900e53e85512780275c05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index c15ba17e49e7,38f7957121ef..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -1069,9 -1083,11 +1069,16 @@@ int pcie_get_mps(struct pci_dev *dev)
  int pcie_set_mps(struct pci_dev *dev, int mps);
  int pcie_get_minimum_link(struct pci_dev *dev, enum pci_bus_speed *speed,
  			  enum pcie_link_width *width);
++<<<<<<< HEAD
 +bool pcie_has_flr(struct pci_dev *dev);
++=======
+ u32 pcie_bandwidth_available(struct pci_dev *dev, struct pci_dev **limiting_dev,
+ 			     enum pci_bus_speed *speed,
+ 			     enum pcie_link_width *width);
+ void pcie_print_link_status(struct pci_dev *dev);
++>>>>>>> 9e506a7b5147 (PCI: Add pcie_print_link_status() to log link speed and whether it's limited)
  void pcie_flr(struct pci_dev *dev);
 +int __pci_reset_function(struct pci_dev *dev);
  int __pci_reset_function_locked(struct pci_dev *dev);
  int pci_reset_function(struct pci_dev *dev);
  int pci_reset_function_locked(struct pci_dev *dev);
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 3a64c5971cef..63f344d7f016 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -4900,6 +4900,38 @@ u32 pcie_bandwidth_capable(struct pci_dev *dev, enum pci_bus_speed *speed,
 	return *width * PCIE_SPEED2MBS_ENC(*speed);
 }
 
+/**
+ * pcie_print_link_status - Report the PCI device's link speed and width
+ * @dev: PCI device to query
+ *
+ * Report the available bandwidth at the device.  If this is less than the
+ * device is capable of, report the device's maximum possible bandwidth and
+ * the upstream link that limits its performance to less than that.
+ */
+void pcie_print_link_status(struct pci_dev *dev)
+{
+	enum pcie_link_width width, width_cap;
+	enum pci_bus_speed speed, speed_cap;
+	struct pci_dev *limiting_dev = NULL;
+	u32 bw_avail, bw_cap;
+
+	bw_cap = pcie_bandwidth_capable(dev, &speed_cap, &width_cap);
+	bw_avail = pcie_bandwidth_available(dev, &limiting_dev, &speed, &width);
+
+	if (bw_avail >= bw_cap)
+		pci_info(dev, "%u.%03u Gb/s available bandwidth (%s x%d link)\n",
+			 bw_cap / 1000, bw_cap % 1000,
+			 PCIE_SPEED2STR(speed_cap), width_cap);
+	else
+		pci_info(dev, "%u.%03u Gb/s available bandwidth, limited by %s x%d link at %s (capable of %u.%03u Gb/s with %s x%d link)\n",
+			 bw_avail / 1000, bw_avail % 1000,
+			 PCIE_SPEED2STR(speed), width,
+			 limiting_dev ? pci_name(limiting_dev) : "<unknown>",
+			 bw_cap / 1000, bw_cap % 1000,
+			 PCIE_SPEED2STR(speed_cap), width_cap);
+}
+EXPORT_SYMBOL(pcie_print_link_status);
+
 /**
  * pci_select_bars - Make BAR mask from the type of resource
  * @dev: the PCI device for which BAR mask is made
* Unmerged path include/linux/pci.h
