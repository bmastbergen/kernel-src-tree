net/mlx5: Fix build break when CONFIG_SMP=n

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [kernel] mlx5: Fix build break when CONFIG_SMP=n (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 95.12%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit e3ca34880652250f524022ad89e516f8ba9a805b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e3ca3488.failed

Avoid using the kernel's irq_descriptor and return IRQ vector affinity
directly from the driver.

This fixes the following build break when CONFIG_SMP=n

include/linux/mlx5/driver.h: In function ‘mlx5_get_vector_affinity_hint’:
include/linux/mlx5/driver.h:1299:13: error:
        ‘struct irq_desc’ has no member named ‘affinity_hint’

Fixes: 6082d9c9c94a ("net/mlx5: Fix mlx5_get_vector_affinity function")
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
CC: Randy Dunlap <rdunlap@infradead.org>
CC: Guenter Roeck <linux@roeck-us.net>
CC: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Israel Rukshin <israelr@mellanox.com>
	Reported-by: kbuild test robot <lkp@intel.com>
	Reported-by: Randy Dunlap <rdunlap@infradead.org>
	Tested-by: Randy Dunlap <rdunlap@infradead.org>
	Acked-by: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e3ca34880652250f524022ad89e516f8ba9a805b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mlx5/driver.h
diff --cc include/linux/mlx5/driver.h
index 4e54981203eb,d703774982ca..000000000000
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@@ -1281,30 -1284,9 +1281,34 @@@ enum 
  };
  
  static inline const struct cpumask *
 -mlx5_get_vector_affinity_hint(struct mlx5_core_dev *dev, int vector)
 +mlx5_get_vector_affinity(struct mlx5_core_dev *dev, int vector)
  {
++<<<<<<< HEAD
 +/* calling irq_to_desc will result to undefinded irq_desc symbol */
 +#ifndef CONFIG_GENERIC_HARDIRQS
 +	return cpu_possible_mask;
 +#else
 +	const struct cpumask *mask;
 +	struct irq_desc *desc;
 +	unsigned int irq;
 +	int eqn;
 +	int err;
 +
 +	err = mlx5_vector2eqn(dev, MLX5_EQ_VEC_COMP_BASE + vector, &eqn, &irq);
 +	if (err)
 +		return NULL;
 +
 +	desc = irq_to_desc(irq);
 +#ifdef CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK
 +	mask = irq_data_get_effective_affinity_mask(&desc->irq_data);
 +#else
 +	mask = desc->irq_data.affinity;
 +#endif
 +	return mask;
 +#endif
++=======
+ 	return dev->priv.irq_info[vector].mask;
++>>>>>>> e3ca34880652 (net/mlx5: Fix build break when CONFIG_SMP=n)
  }
  
  #endif /* MLX5_DRIVER_H */
* Unmerged path include/linux/mlx5/driver.h
