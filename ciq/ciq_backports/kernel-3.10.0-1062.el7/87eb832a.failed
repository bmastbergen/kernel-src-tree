mfd: lpc_ich: Add support for Intel Apollo Lake SoC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [mfd] lpc_ich: Add support for Intel Apollo Lake SoC (David Arcari) [1643267]
Rebuild_FUZZ: 94.85%
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 87eb832ae9748fab00588b98c2e33e89de065438
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/87eb832a.failed

Intel Apollo Lake SoC exposes serial SPI flash through the LPC device. The
SPI flash host controller is not discoverable through PCI config cycles
because P2SB (function 0 of the device 13) is hidden by the BIOS. We unhide
the device briefly in order to read BAR 0 of the SPI host controller.

	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Acked-by: Lee Jones <lee.jones@linaro.org>
	Acked-by: Marek Vasut <marek.vasut@gmail.com>
	Signed-off-by: Lee Jones <lee.jones@linaro.org>
(cherry picked from commit 87eb832ae9748fab00588b98c2e33e89de065438)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mfd/lpc_ich.c
diff --cc drivers/mfd/lpc_ich.c
index f66a713ffb6b,be42957a78e1..000000000000
--- a/drivers/mfd/lpc_ich.c
+++ b/drivers/mfd/lpc_ich.c
@@@ -54,7 -54,9 +54,8 @@@
   *	document number TBD : Avoton SoC
   *	document number TBD : Coleto Creek
   *	document number TBD : Wildcat Point-LP
 - *	document number TBD : 9 Series
   *	document number TBD : Lewisburg
+  *	document number TBD : Apollo Lake SoC
   */
  
  #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
@@@ -83,6 -84,17 +84,20 @@@
  #define ACPIBASE_GCS_OFF	0x3410
  #define ACPIBASE_GCS_END	0x3414
  
++<<<<<<< HEAD
++=======
+ #define SPIBASE_BYT		0x54
+ #define SPIBASE_BYT_SZ		512
+ #define SPIBASE_BYT_EN		BIT(1)
+ 
+ #define SPIBASE_LPT		0x3800
+ #define SPIBASE_LPT_SZ		512
+ #define BCR			0xdc
+ #define BCR_WPD			BIT(0)
+ 
+ #define SPIBASE_APL_SZ		4096
+ 
++>>>>>>> 87eb832ae974 (mfd: lpc_ich: Add support for Intel Apollo Lake SoC)
  #define GPIOBASE_ICH0		0x58
  #define GPIOCTRL_ICH0		0x5C
  #define GPIOBASE_ICH6		0x48
@@@ -219,10 -239,13 +234,15 @@@ enum lpc_chipsets 
  	LPC_BAYTRAIL,   /* Bay Trail SoC */
  	LPC_COLETO,	/* Coleto Creek */
  	LPC_WPT_LP,	/* Wildcat Point-LP */
 -	LPC_BRASWELL,	/* Braswell SoC */
  	LPC_LEWISBURG,	/* Lewisburg */
++<<<<<<< HEAD
++=======
+ 	LPC_9S,		/* 9 Series */
+ 	LPC_APL,	/* Apollo Lake SoC */
++>>>>>>> 87eb832ae974 (mfd: lpc_ich: Add support for Intel Apollo Lake SoC)
  };
  
 -static struct lpc_ich_info lpc_chipset_info[] = {
 +struct lpc_ich_info lpc_chipset_info[] = {
  	[LPC_ICH] = {
  		.name = "ICH",
  		.iTCO_version = 1,
@@@ -525,6 -560,15 +545,18 @@@
  		.name = "Lewisburg",
  		.iTCO_version = 2,
  	},
++<<<<<<< HEAD
++=======
+ 	[LPC_9S] = {
+ 		.name = "9 Series",
+ 		.iTCO_version = 2,
+ 		.gpio_version = ICH_V5_GPIO,
+ 	},
+ 	[LPC_APL] = {
+ 		.name = "Apollo Lake SoC",
+ 		.spi_type = INTEL_SPI_BXT,
+ 	},
++>>>>>>> 87eb832ae974 (mfd: lpc_ich: Add support for Intel Apollo Lake SoC)
  };
  
  /*
@@@ -666,6 -644,80 +698,83 @@@ static const struct pci_device_id lpc_i
  	{ PCI_VDEVICE(INTEL, 0x1e5d), LPC_PPT},
  	{ PCI_VDEVICE(INTEL, 0x1e5e), LPC_PPT},
  	{ PCI_VDEVICE(INTEL, 0x1e5f), LPC_PPT},
++<<<<<<< HEAD
++=======
+ 	{ PCI_VDEVICE(INTEL, 0x1f38), LPC_AVN},
+ 	{ PCI_VDEVICE(INTEL, 0x1f39), LPC_AVN},
+ 	{ PCI_VDEVICE(INTEL, 0x1f3a), LPC_AVN},
+ 	{ PCI_VDEVICE(INTEL, 0x1f3b), LPC_AVN},
+ 	{ PCI_VDEVICE(INTEL, 0x229c), LPC_BRASWELL},
+ 	{ PCI_VDEVICE(INTEL, 0x2310), LPC_DH89XXCC},
+ 	{ PCI_VDEVICE(INTEL, 0x2390), LPC_COLETO},
+ 	{ PCI_VDEVICE(INTEL, 0x2410), LPC_ICH},
+ 	{ PCI_VDEVICE(INTEL, 0x2420), LPC_ICH0},
+ 	{ PCI_VDEVICE(INTEL, 0x2440), LPC_ICH2},
+ 	{ PCI_VDEVICE(INTEL, 0x244c), LPC_ICH2M},
+ 	{ PCI_VDEVICE(INTEL, 0x2450), LPC_CICH},
+ 	{ PCI_VDEVICE(INTEL, 0x2480), LPC_ICH3},
+ 	{ PCI_VDEVICE(INTEL, 0x248c), LPC_ICH3M},
+ 	{ PCI_VDEVICE(INTEL, 0x24c0), LPC_ICH4},
+ 	{ PCI_VDEVICE(INTEL, 0x24cc), LPC_ICH4M},
+ 	{ PCI_VDEVICE(INTEL, 0x24d0), LPC_ICH5},
+ 	{ PCI_VDEVICE(INTEL, 0x25a1), LPC_6300ESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2640), LPC_ICH6},
+ 	{ PCI_VDEVICE(INTEL, 0x2641), LPC_ICH6M},
+ 	{ PCI_VDEVICE(INTEL, 0x2642), LPC_ICH6W},
+ 	{ PCI_VDEVICE(INTEL, 0x2670), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2671), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2672), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2673), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2674), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2675), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2676), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2677), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2678), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x2679), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x267a), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x267b), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x267c), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x267d), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x267e), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x267f), LPC_631XESB},
+ 	{ PCI_VDEVICE(INTEL, 0x27b0), LPC_ICH7DH},
+ 	{ PCI_VDEVICE(INTEL, 0x27b8), LPC_ICH7},
+ 	{ PCI_VDEVICE(INTEL, 0x27b9), LPC_ICH7M},
+ 	{ PCI_VDEVICE(INTEL, 0x27bc), LPC_NM10},
+ 	{ PCI_VDEVICE(INTEL, 0x27bd), LPC_ICH7MDH},
+ 	{ PCI_VDEVICE(INTEL, 0x2810), LPC_ICH8},
+ 	{ PCI_VDEVICE(INTEL, 0x2811), LPC_ICH8ME},
+ 	{ PCI_VDEVICE(INTEL, 0x2812), LPC_ICH8DH},
+ 	{ PCI_VDEVICE(INTEL, 0x2814), LPC_ICH8DO},
+ 	{ PCI_VDEVICE(INTEL, 0x2815), LPC_ICH8M},
+ 	{ PCI_VDEVICE(INTEL, 0x2912), LPC_ICH9DH},
+ 	{ PCI_VDEVICE(INTEL, 0x2914), LPC_ICH9DO},
+ 	{ PCI_VDEVICE(INTEL, 0x2916), LPC_ICH9R},
+ 	{ PCI_VDEVICE(INTEL, 0x2917), LPC_ICH9ME},
+ 	{ PCI_VDEVICE(INTEL, 0x2918), LPC_ICH9},
+ 	{ PCI_VDEVICE(INTEL, 0x2919), LPC_ICH9M},
+ 	{ PCI_VDEVICE(INTEL, 0x3a14), LPC_ICH10DO},
+ 	{ PCI_VDEVICE(INTEL, 0x3a16), LPC_ICH10R},
+ 	{ PCI_VDEVICE(INTEL, 0x3a18), LPC_ICH10},
+ 	{ PCI_VDEVICE(INTEL, 0x3a1a), LPC_ICH10D},
+ 	{ PCI_VDEVICE(INTEL, 0x3b00), LPC_PCH},
+ 	{ PCI_VDEVICE(INTEL, 0x3b01), LPC_PCHM},
+ 	{ PCI_VDEVICE(INTEL, 0x3b02), LPC_P55},
+ 	{ PCI_VDEVICE(INTEL, 0x3b03), LPC_PM55},
+ 	{ PCI_VDEVICE(INTEL, 0x3b06), LPC_H55},
+ 	{ PCI_VDEVICE(INTEL, 0x3b07), LPC_QM57},
+ 	{ PCI_VDEVICE(INTEL, 0x3b08), LPC_H57},
+ 	{ PCI_VDEVICE(INTEL, 0x3b09), LPC_HM55},
+ 	{ PCI_VDEVICE(INTEL, 0x3b0a), LPC_Q57},
+ 	{ PCI_VDEVICE(INTEL, 0x3b0b), LPC_HM57},
+ 	{ PCI_VDEVICE(INTEL, 0x3b0d), LPC_PCHMSFF},
+ 	{ PCI_VDEVICE(INTEL, 0x3b0f), LPC_QS57},
+ 	{ PCI_VDEVICE(INTEL, 0x3b12), LPC_3400},
+ 	{ PCI_VDEVICE(INTEL, 0x3b14), LPC_3420},
+ 	{ PCI_VDEVICE(INTEL, 0x3b16), LPC_3450},
+ 	{ PCI_VDEVICE(INTEL, 0x5031), LPC_EP80579},
+ 	{ PCI_VDEVICE(INTEL, 0x5ae8), LPC_APL},
++>>>>>>> 87eb832ae974 (mfd: lpc_ich: Add support for Intel Apollo Lake SoC)
  	{ PCI_VDEVICE(INTEL, 0x8c40), LPC_LPT},
  	{ PCI_VDEVICE(INTEL, 0x8c41), LPC_LPT},
  	{ PCI_VDEVICE(INTEL, 0x8c42), LPC_LPT},
@@@ -1038,6 -1093,94 +1147,97 @@@ wdt_done
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static int lpc_ich_init_spi(struct pci_dev *dev)
+ {
+ 	struct lpc_ich_priv *priv = pci_get_drvdata(dev);
+ 	struct resource *res = &intel_spi_res[0];
+ 	struct intel_spi_boardinfo *info;
+ 	u32 spi_base, rcba, bcr;
+ 
+ 	info = devm_kzalloc(&dev->dev, sizeof(*info), GFP_KERNEL);
+ 	if (!info)
+ 		return -ENOMEM;
+ 
+ 	info->type = lpc_chipset_info[priv->chipset].spi_type;
+ 
+ 	switch (info->type) {
+ 	case INTEL_SPI_BYT:
+ 		pci_read_config_dword(dev, SPIBASE_BYT, &spi_base);
+ 		if (spi_base & SPIBASE_BYT_EN) {
+ 			res->start = spi_base & ~(SPIBASE_BYT_SZ - 1);
+ 			res->end = res->start + SPIBASE_BYT_SZ - 1;
+ 		}
+ 		break;
+ 
+ 	case INTEL_SPI_LPT:
+ 		pci_read_config_dword(dev, RCBABASE, &rcba);
+ 		if (rcba & 1) {
+ 			spi_base = round_down(rcba, SPIBASE_LPT_SZ);
+ 			res->start = spi_base + SPIBASE_LPT;
+ 			res->end = res->start + SPIBASE_LPT_SZ - 1;
+ 
+ 			/*
+ 			 * Try to make the flash chip writeable now by
+ 			 * setting BCR_WPD. It it fails we tell the driver
+ 			 * that it can only read the chip.
+ 			 */
+ 			pci_read_config_dword(dev, BCR, &bcr);
+ 			if (!(bcr & BCR_WPD)) {
+ 				bcr |= BCR_WPD;
+ 				pci_write_config_dword(dev, BCR, bcr);
+ 				pci_read_config_dword(dev, BCR, &bcr);
+ 			}
+ 			info->writeable = !!(bcr & BCR_WPD);
+ 		}
+ 		break;
+ 
+ 	case INTEL_SPI_BXT: {
+ 		unsigned int p2sb = PCI_DEVFN(13, 0);
+ 		unsigned int spi = PCI_DEVFN(13, 2);
+ 		struct pci_bus *bus = dev->bus;
+ 
+ 		/*
+ 		 * The P2SB is hidden by BIOS and we need to unhide it in
+ 		 * order to read BAR of the SPI flash device. Once that is
+ 		 * done we hide it again.
+ 		 */
+ 		pci_bus_write_config_byte(bus, p2sb, 0xe1, 0x0);
+ 		pci_bus_read_config_dword(bus, spi, PCI_BASE_ADDRESS_0,
+ 					  &spi_base);
+ 		if (spi_base != ~0) {
+ 			res->start = spi_base & 0xfffffff0;
+ 			res->end = res->start + SPIBASE_APL_SZ - 1;
+ 
+ 			pci_bus_read_config_dword(bus, spi, BCR, &bcr);
+ 			if (!(bcr & BCR_WPD)) {
+ 				bcr |= BCR_WPD;
+ 				pci_bus_write_config_dword(bus, spi, BCR, bcr);
+ 				pci_bus_read_config_dword(bus, spi, BCR, &bcr);
+ 			}
+ 			info->writeable = !!(bcr & BCR_WPD);
+ 		}
+ 
+ 		pci_bus_write_config_byte(bus, p2sb, 0xe1, 0x1);
+ 		break;
+ 	}
+ 
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (!res->start)
+ 		return -ENODEV;
+ 
+ 	lpc_ich_spi_cell.platform_data = info;
+ 	lpc_ich_spi_cell.pdata_size = sizeof(*info);
+ 
+ 	return mfd_add_devices(&dev->dev, PLATFORM_DEVID_NONE,
+ 			       &lpc_ich_spi_cell, 1, NULL, 0, NULL);
+ }
+ 
++>>>>>>> 87eb832ae974 (mfd: lpc_ich: Add support for Intel Apollo Lake SoC)
  static int lpc_ich_probe(struct pci_dev *dev,
  				const struct pci_device_id *id)
  {
* Unmerged path drivers/mfd/lpc_ich.c
