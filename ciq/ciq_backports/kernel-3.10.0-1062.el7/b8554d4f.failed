net: phy: add register modifying helpers returning 1 on change

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] phy: add register modifying helpers returning 1 on change (Ivan Vecera) [1685646]
Rebuild_FUZZ: 95.80%
commit-author Heiner Kallweit <hkallweit1@gmail.com>
commit b8554d4f7288f86fb278e0bc7b5b19579bf16b69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/b8554d4f.failed

When modifying registers there are scenarios where we need to know
whether the register content actually changed. This patch adds
new helpers to not break users of the current ones, phy_modify() etc.

	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b8554d4f7288f86fb278e0bc7b5b19579bf16b69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy-core.c
#	include/linux/phy.h
diff --cc include/linux/phy.h
index 2a7a15321caa,378da9a6165e..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -590,7 -736,192 +590,196 @@@ static inline int phy_read(struct phy_d
   */
  static inline int phy_write(struct phy_device *phydev, u32 regnum, u16 val)
  {
++<<<<<<< HEAD
 +	return mdiobus_write(phydev->bus, phydev->addr, regnum, val);
++=======
+ 	return mdiobus_write(phydev->mdio.bus, phydev->mdio.addr, regnum, val);
+ }
+ 
+ /**
+  * __phy_write - Convenience function for writing a given PHY register
+  * @phydev: the phy_device struct
+  * @regnum: register number to write
+  * @val: value to write to @regnum
+  *
+  * The caller must have taken the MDIO bus lock.
+  */
+ static inline int __phy_write(struct phy_device *phydev, u32 regnum, u16 val)
+ {
+ 	return __mdiobus_write(phydev->mdio.bus, phydev->mdio.addr, regnum,
+ 			       val);
+ }
+ 
+ /**
+  * phy_read_mmd - Convenience function for reading a register
+  * from an MMD on a given PHY.
+  * @phydev: The phy_device struct
+  * @devad: The MMD to read from
+  * @regnum: The register on the MMD to read
+  *
+  * Same rules as for phy_read();
+  */
+ int phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum);
+ 
+ /**
+  * __phy_read_mmd - Convenience function for reading a register
+  * from an MMD on a given PHY.
+  * @phydev: The phy_device struct
+  * @devad: The MMD to read from
+  * @regnum: The register on the MMD to read
+  *
+  * Same rules as for __phy_read();
+  */
+ int __phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum);
+ 
+ /**
+  * phy_write_mmd - Convenience function for writing a register
+  * on an MMD on a given PHY.
+  * @phydev: The phy_device struct
+  * @devad: The MMD to write to
+  * @regnum: The register on the MMD to read
+  * @val: value to write to @regnum
+  *
+  * Same rules as for phy_write();
+  */
+ int phy_write_mmd(struct phy_device *phydev, int devad, u32 regnum, u16 val);
+ 
+ /**
+  * __phy_write_mmd - Convenience function for writing a register
+  * on an MMD on a given PHY.
+  * @phydev: The phy_device struct
+  * @devad: The MMD to write to
+  * @regnum: The register on the MMD to read
+  * @val: value to write to @regnum
+  *
+  * Same rules as for __phy_write();
+  */
+ int __phy_write_mmd(struct phy_device *phydev, int devad, u32 regnum, u16 val);
+ 
+ int __phy_modify_changed(struct phy_device *phydev, u32 regnum, u16 mask,
+ 			 u16 set);
+ int phy_modify_changed(struct phy_device *phydev, u32 regnum, u16 mask,
+ 		       u16 set);
+ int __phy_modify(struct phy_device *phydev, u32 regnum, u16 mask, u16 set);
+ int phy_modify(struct phy_device *phydev, u32 regnum, u16 mask, u16 set);
+ 
+ int __phy_modify_mmd_changed(struct phy_device *phydev, int devad, u32 regnum,
+ 			     u16 mask, u16 set);
+ int phy_modify_mmd_changed(struct phy_device *phydev, int devad, u32 regnum,
+ 			   u16 mask, u16 set);
+ int __phy_modify_mmd(struct phy_device *phydev, int devad, u32 regnum,
+ 		     u16 mask, u16 set);
+ int phy_modify_mmd(struct phy_device *phydev, int devad, u32 regnum,
+ 		   u16 mask, u16 set);
+ 
+ /**
+  * __phy_set_bits - Convenience function for setting bits in a PHY register
+  * @phydev: the phy_device struct
+  * @regnum: register number to write
+  * @val: bits to set
+  *
+  * The caller must have taken the MDIO bus lock.
+  */
+ static inline int __phy_set_bits(struct phy_device *phydev, u32 regnum, u16 val)
+ {
+ 	return __phy_modify(phydev, regnum, 0, val);
+ }
+ 
+ /**
+  * __phy_clear_bits - Convenience function for clearing bits in a PHY register
+  * @phydev: the phy_device struct
+  * @regnum: register number to write
+  * @val: bits to clear
+  *
+  * The caller must have taken the MDIO bus lock.
+  */
+ static inline int __phy_clear_bits(struct phy_device *phydev, u32 regnum,
+ 				   u16 val)
+ {
+ 	return __phy_modify(phydev, regnum, val, 0);
+ }
+ 
+ /**
+  * phy_set_bits - Convenience function for setting bits in a PHY register
+  * @phydev: the phy_device struct
+  * @regnum: register number to write
+  * @val: bits to set
+  */
+ static inline int phy_set_bits(struct phy_device *phydev, u32 regnum, u16 val)
+ {
+ 	return phy_modify(phydev, regnum, 0, val);
+ }
+ 
+ /**
+  * phy_clear_bits - Convenience function for clearing bits in a PHY register
+  * @phydev: the phy_device struct
+  * @regnum: register number to write
+  * @val: bits to clear
+  */
+ static inline int phy_clear_bits(struct phy_device *phydev, u32 regnum, u16 val)
+ {
+ 	return phy_modify(phydev, regnum, val, 0);
+ }
+ 
+ /**
+  * __phy_set_bits_mmd - Convenience function for setting bits in a register
+  * on MMD
+  * @phydev: the phy_device struct
+  * @devad: the MMD containing register to modify
+  * @regnum: register number to modify
+  * @val: bits to set
+  *
+  * The caller must have taken the MDIO bus lock.
+  */
+ static inline int __phy_set_bits_mmd(struct phy_device *phydev, int devad,
+ 		u32 regnum, u16 val)
+ {
+ 	return __phy_modify_mmd(phydev, devad, regnum, 0, val);
+ }
+ 
+ /**
+  * __phy_clear_bits_mmd - Convenience function for clearing bits in a register
+  * on MMD
+  * @phydev: the phy_device struct
+  * @devad: the MMD containing register to modify
+  * @regnum: register number to modify
+  * @val: bits to clear
+  *
+  * The caller must have taken the MDIO bus lock.
+  */
+ static inline int __phy_clear_bits_mmd(struct phy_device *phydev, int devad,
+ 		u32 regnum, u16 val)
+ {
+ 	return __phy_modify_mmd(phydev, devad, regnum, val, 0);
+ }
+ 
+ /**
+  * phy_set_bits_mmd - Convenience function for setting bits in a register
+  * on MMD
+  * @phydev: the phy_device struct
+  * @devad: the MMD containing register to modify
+  * @regnum: register number to modify
+  * @val: bits to set
+  */
+ static inline int phy_set_bits_mmd(struct phy_device *phydev, int devad,
+ 		u32 regnum, u16 val)
+ {
+ 	return phy_modify_mmd(phydev, devad, regnum, 0, val);
+ }
+ 
+ /**
+  * phy_clear_bits_mmd - Convenience function for clearing bits in a register
+  * on MMD
+  * @phydev: the phy_device struct
+  * @devad: the MMD containing register to modify
+  * @regnum: register number to modify
+  * @val: bits to clear
+  */
+ static inline int phy_clear_bits_mmd(struct phy_device *phydev, int devad,
+ 		u32 regnum, u16 val)
+ {
+ 	return phy_modify_mmd(phydev, devad, regnum, val, 0);
++>>>>>>> b8554d4f7288 (net: phy: add register modifying helpers returning 1 on change)
  }
  
  /**
* Unmerged path drivers/net/phy/phy-core.c
* Unmerged path drivers/net/phy/phy-core.c
* Unmerged path include/linux/phy.h
