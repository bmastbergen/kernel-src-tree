net: sched: act_csum: Fix csum calc for tagged packets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [net] sched: act_csum: Fix csum calc for tagged packets (Ivan Vecera) [1676462]
Rebuild_FUZZ: 95.15%
commit-author Eli Britstein <elibr@mellanox.com>
commit 2ecba2d1e45b24620a7c3df9531895cf68d5dec6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/2ecba2d1.failed

The csum calculation is different for IPv4/6. For VLAN packets,
tc_skb_protocol returns the VLAN protocol rather than the packet's one
(e.g. IPv4/6), so csum is not calculated. Furthermore, VLAN may not be
stripped so csum is not calculated in this case too. Calculate the
csum for those cases.

Fixes: d8b9605d2697 ("net: sched: fix skb->protocol use in case of accelerated vlan path")
	Signed-off-by: Eli Britstein <elibr@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2ecba2d1e45b24620a7c3df9531895cf68d5dec6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_csum.c
diff --cc net/sched/act_csum.c
index a897ed04f30c,c79aca29505e..000000000000
--- a/net/sched/act_csum.c
+++ b/net/sched/act_csum.c
@@@ -534,24 -555,30 +534,39 @@@ fail
  	return 0;
  }
  
 -static int tcf_csum_act(struct sk_buff *skb, const struct tc_action *a,
 -			struct tcf_result *res)
 +static int tcf_csum(struct sk_buff *skb, const struct tc_action *a,
 +		    struct tcf_result *res)
  {
  	struct tcf_csum *p = to_tcf_csum(a);
++<<<<<<< HEAD
++=======
+ 	bool orig_vlan_tag_present = false;
+ 	unsigned int vlan_hdr_count = 0;
+ 	struct tcf_csum_params *params;
+ 	u32 update_flags;
+ 	__be16 protocol;
++>>>>>>> 2ecba2d1e45b (net: sched: act_csum: Fix csum calc for tagged packets)
  	int action;
 +	u32 update_flags;
  
 -	params = rcu_dereference_bh(p->params);
 -
 +	spin_lock(&p->tcf_lock);
  	tcf_lastuse_update(&p->tcf_tm);
 -	bstats_cpu_update(this_cpu_ptr(p->common.cpu_bstats), skb);
 +	bstats_update(&p->tcf_bstats, skb);
 +	action = p->tcf_action;
 +	update_flags = p->update_flags;
 +	spin_unlock(&p->tcf_lock);
  
 -	action = READ_ONCE(p->tcf_action);
  	if (unlikely(action == TC_ACT_SHOT))
  		goto drop;
  
++<<<<<<< HEAD
 +	switch (tc_skb_protocol(skb)) {
++=======
+ 	update_flags = params->update_flags;
+ 	protocol = tc_skb_protocol(skb);
+ again:
+ 	switch (protocol) {
++>>>>>>> 2ecba2d1e45b (net: sched: act_csum: Fix csum calc for tagged packets)
  	case cpu_to_be16(ETH_P_IP):
  		if (!tcf_csum_ipv4(skb, update_flags))
  			goto drop;
@@@ -565,10 -613,9 +601,16 @@@ out
  	return action;
  
  drop:
++<<<<<<< HEAD
 +	spin_lock(&p->tcf_lock);
 +	p->tcf_qstats.drops++;
 +	spin_unlock(&p->tcf_lock);
 +	return TC_ACT_SHOT;
++=======
+ 	qstats_drop_inc(this_cpu_ptr(p->common.cpu_qstats));
+ 	action = TC_ACT_SHOT;
+ 	goto out;
++>>>>>>> 2ecba2d1e45b (net: sched: act_csum: Fix csum calc for tagged packets)
  }
  
  static int tcf_csum_dump(struct sk_buff *skb, struct tc_action *a, int bind,
* Unmerged path net/sched/act_csum.c
