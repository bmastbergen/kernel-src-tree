crypto: chelsio - Use same value for both channel in single WR

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [crypto] chelsio - Use same value for both channel in single WR (Arjun Vynipadath) [1642432]
Rebuild_FUZZ: 93.10%
commit-author Harsh Jain <harsh@chelsio.com>
commit d5a4dfbdaf54cbd845755a5415cff57688bb983c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/d5a4dfbd.failed

Use tx_channel_id instead of rx_channel_id.

	Signed-off-by: Harsh Jain <harsh@chelsio.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit d5a4dfbdaf54cbd845755a5415cff57688bb983c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chcr_algo.c
diff --cc drivers/crypto/chelsio/chcr_algo.c
index 8a76dcf1a215,ee985ad69039..000000000000
--- a/drivers/crypto/chelsio/chcr_algo.c
+++ b/drivers/crypto/chelsio/chcr_algo.c
@@@ -713,10 -717,10 +713,10 @@@ static inline void create_wreq(struct c
  		htonl(FW_CRYPTO_LOOKASIDE_WR_LEN16_V(DIV_ROUND_UP(len16, 16)));
  	chcr_req->wreq.cookie = cpu_to_be64((uintptr_t)req);
  	chcr_req->wreq.rx_chid_to_rx_q_id =
- 		FILL_WR_RX_Q_ID(ctx->dev->rx_channel_id, qid,
+ 		FILL_WR_RX_Q_ID(ctx->tx_chan_id, qid,
  				!!lcb, ctx->tx_qidx);
  
 -	chcr_req->ulptx.cmd_dest = FILL_ULPTX_CMD_DEST(ctx->tx_chan_id,
 +	chcr_req->ulptx.cmd_dest = FILL_ULPTX_CMD_DEST(ctx->dev->tx_channel_id,
  						       qid);
  	chcr_req->ulptx.len = htonl((DIV_ROUND_UP(len16, 16) -
  				     ((sizeof(chcr_req->wreq)) >> 4)));
@@@ -1342,16 -1341,22 +1342,15 @@@ static int chcr_device_init(struct chcr
  		ntxq = u_ctx->lldi.ntxq;
  		rxq_perchan = u_ctx->lldi.nrxq / u_ctx->lldi.nchan;
  		txq_perchan = ntxq / u_ctx->lldi.nchan;
 -		spin_lock(&ctx->dev->lock_chcr_dev);
 -		ctx->tx_chan_id = ctx->dev->tx_channel_id;
 -		ctx->dev->tx_channel_id = !ctx->dev->tx_channel_id;
 -		spin_unlock(&ctx->dev->lock_chcr_dev);
 -		rxq_idx = ctx->tx_chan_id * rxq_perchan;
 +		rxq_idx = ctx->dev->tx_channel_id * rxq_perchan;
  		rxq_idx += id % rxq_perchan;
 -		txq_idx = ctx->tx_chan_id * txq_perchan;
 +		txq_idx = ctx->dev->tx_channel_id * txq_perchan;
  		txq_idx += id % txq_perchan;
 +		spin_lock(&ctx->dev->lock_chcr_dev);
  		ctx->rx_qidx = rxq_idx;
  		ctx->tx_qidx = txq_idx;
 -		/* Channel Id used by SGE to forward packet to Host.
 -		 * Same value should be used in cpl_fw6_pld RSS_CH field
 -		 * by FW. Driver programs PCI channel ID to be used in fw
 -		 * at the time of queue allocation with value "pi->tx_chan"
 -		 */
 -		ctx->pci_chan_id = txq_idx / txq_perchan;
 +		ctx->dev->tx_channel_id = !ctx->dev->tx_channel_id;
- 		ctx->dev->rx_channel_id = 0;
 +		spin_unlock(&ctx->dev->lock_chcr_dev);
  	}
  out:
  	return err;
@@@ -2326,12 -2323,12 +2325,17 @@@ static struct sk_buff *create_authenc_w
  	 * to the hardware spec
  	 */
  	chcr_req->sec_cpl.op_ivinsrtofst =
++<<<<<<< HEAD
 +		FILL_SEC_CPL_OP_IVINSR(a_ctx(tfm)->dev->rx_channel_id, 2,
 +				       assoclen + 1);
 +	chcr_req->sec_cpl.pldlen = htonl(assoclen + IV + req->cryptlen);
++=======
+ 		FILL_SEC_CPL_OP_IVINSR(a_ctx(tfm)->tx_chan_id, 2, 1);
+ 	chcr_req->sec_cpl.pldlen = htonl(req->assoclen + IV + req->cryptlen);
++>>>>>>> d5a4dfbdaf54 (crypto: chelsio - Use same value for both channel in single WR)
  	chcr_req->sec_cpl.aadstart_cipherstop_hi = FILL_SEC_CPL_CIPHERSTOP_HI(
 -					null ? 0 : 1 + IV,
 -					null ? 0 : IV + req->assoclen,
 -					req->assoclen + IV + 1,
 +					assoclen ? 1 : 0, assoclen,
 +					assoclen + IV + 1,
  					(temp & 0x1F0) >> 4);
  	chcr_req->sec_cpl.cipherstop_lo_authinsert = FILL_SEC_CPL_AUTHINSERT(
  					temp & 0xF,
@@@ -2771,12 -2745,17 +2775,12 @@@ static void fill_sec_cpl_for_aead(struc
  	struct chcr_aead_ctx *aeadctx = AEAD_CTX(a_ctx(tfm));
  	unsigned int cipher_mode = CHCR_SCMD_CIPHER_MODE_AES_CCM;
  	unsigned int mac_mode = CHCR_SCMD_AUTH_MODE_CBCMAC;
- 	unsigned int c_id = a_ctx(tfm)->dev->rx_channel_id;
+ 	unsigned int c_id = a_ctx(tfm)->tx_chan_id;
  	unsigned int ccm_xtra;
  	unsigned char tag_offset = 0, auth_offset = 0;
 -	unsigned int assoclen;
  
 -	if (get_aead_subtype(tfm) == CRYPTO_ALG_SUB_TYPE_AEAD_RFC4309)
 -		assoclen = req->assoclen - 8;
 -	else
 -		assoclen = req->assoclen;
  	ccm_xtra = CCM_B0_SIZE +
 -		((assoclen) ? CCM_AAD_FIELD_SIZE : 0);
 +		((req->assoclen) ? CCM_AAD_FIELD_SIZE : 0);
  
  	auth_offset = req->cryptlen ?
  		(req->assoclen + IV + 1 + ccm_xtra) : 0;
@@@ -2973,15 -2966,15 +2977,19 @@@ static struct sk_buff *create_gcm_wr(st
  	//Offset of tag from end
  	temp = (reqctx->op == CHCR_ENCRYPT_OP) ? 0 : authsize;
  	chcr_req->sec_cpl.op_ivinsrtofst = FILL_SEC_CPL_OP_IVINSR(
++<<<<<<< HEAD
 +					a_ctx(tfm)->dev->rx_channel_id, 2,
 +					(assoclen + 1));
++=======
+ 					a_ctx(tfm)->tx_chan_id, 2, 1);
++>>>>>>> d5a4dfbdaf54 (crypto: chelsio - Use same value for both channel in single WR)
  	chcr_req->sec_cpl.pldlen =
 -		htonl(req->assoclen + IV + req->cryptlen);
 +		htonl(assoclen + IV + req->cryptlen);
  	chcr_req->sec_cpl.aadstart_cipherstop_hi = FILL_SEC_CPL_CIPHERSTOP_HI(
 -					assoclen ? 1 + IV : 0,
 -					assoclen ? IV + assoclen : 0,
 -					req->assoclen + IV + 1, 0);
 +					assoclen ? 1 : 0, assoclen,
 +					assoclen + IV + 1, 0);
  	chcr_req->sec_cpl.cipherstop_lo_authinsert =
 -			FILL_SEC_CPL_AUTHINSERT(0, req->assoclen + IV + 1,
 +			FILL_SEC_CPL_AUTHINSERT(0, assoclen + IV + 1,
  						temp, temp);
  	chcr_req->sec_cpl.seqno_numivs =
  			FILL_SEC_CPL_SCMD0_SEQNO(reqctx->op, (reqctx->op ==
* Unmerged path drivers/crypto/chelsio/chcr_algo.c
diff --git a/drivers/crypto/chelsio/chcr_core.h b/drivers/crypto/chelsio/chcr_core.h
index 1e83b5dec34f..3e639662edd2 100644
--- a/drivers/crypto/chelsio/chcr_core.h
+++ b/drivers/crypto/chelsio/chcr_core.h
@@ -85,7 +85,6 @@ struct chcr_dev {
 	spinlock_t lock_chcr_dev;
 	struct uld_ctx *u_ctx;
 	unsigned char tx_channel_id;
-	unsigned char rx_channel_id;
 };
 
 struct uld_ctx {
