RDMA: Convert drivers to use sgid_attr instead of sgid_index

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Parav Pandit <parav@mellanox.com>
commit 47ec38666210485de860ab24675acb3d2e7d4954
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/47ec3866.failed

The core code now ensures that all driver callbacks that receive an
rdma_ah_attrs will have a sgid_attr's pointer if there is a GRH present.

Drivers can use this pointer instead of calling a query function with
sgid_index. This simplifies the drivers and also avoids races where a
gid_index lookup may return different data if it is changed.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit 47ec38666210485de860ab24675acb3d2e7d4954)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/bnxt_re/ib_verbs.c
#	drivers/infiniband/hw/hns/hns_roce_ah.c
#	drivers/infiniband/hw/mlx4/ah.c
#	drivers/infiniband/hw/mlx4/qp.c
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/ocrdma/ocrdma_ah.c
#	drivers/infiniband/hw/ocrdma/ocrdma_hw.c
#	drivers/infiniband/hw/qedr/verbs.c
#	drivers/infiniband/sw/rxe/rxe_verbs.c
diff --cc drivers/infiniband/hw/bnxt_re/ib_verbs.c
index 8301d7e5fa8c,134360236c2c..000000000000
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.c
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
@@@ -707,21 -702,11 +705,25 @@@ struct ib_ah *bnxt_re_create_ah(struct 
  				    grh->dgid.raw) &&
  	    !rdma_link_local_addr((struct in6_addr *)
  				  grh->dgid.raw)) {
- 		union ib_gid sgid;
+ 		const struct ib_gid_attr *sgid_attr;
  
++<<<<<<< HEAD
 +		rc = ib_get_cached_gid(&rdev->ibdev, 1,
 +				       grh->sgid_index, &sgid,
 +				       &sgid_attr);
 +		if (rc) {
 +			dev_err(rdev_to_dev(rdev),
 +				"Failed to query gid at index %d",
 +				grh->sgid_index);
 +			goto fail;
 +		}
 +		if (sgid_attr.ndev)
 +			dev_put(sgid_attr.ndev);
++=======
+ 		sgid_attr = grh->sgid_attr;
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  		/* Get network header type for this GID */
- 		nw_type = ib_gid_to_network_type(sgid_attr.gid_type, &sgid);
+ 		nw_type = rdma_gid_attr_network_type(sgid_attr);
  		switch (nw_type) {
  		case RDMA_NETWORK_IPV4:
  			ah->qplib_ah.nw_type = CMDQ_CREATE_AH_TYPE_V2IPV4;
@@@ -1695,29 -1677,23 +1695,49 @@@ int bnxt_re_modify_qp(struct ib_qp *ib_
  		ether_addr_copy(qp->qplib_qp.ah.dmac,
  				qp_attr->ah_attr.roce.dmac);
  
++<<<<<<< HEAD
 +		status = ib_get_cached_gid(&rdev->ibdev, 1,
 +					   grh->sgid_index,
 +					   &sgid, &sgid_attr);
 +		if (!status && sgid_attr.ndev) {
 +			memcpy(qp->qplib_qp.smac, sgid_attr.ndev->dev_addr,
 +			       ETH_ALEN);
 +			dev_put(sgid_attr.ndev);
 +			nw_type = ib_gid_to_network_type(sgid_attr.gid_type,
 +							 &sgid);
 +			switch (nw_type) {
 +			case RDMA_NETWORK_IPV4:
 +				qp->qplib_qp.nw_type =
 +					CMDQ_MODIFY_QP_NETWORK_TYPE_ROCEV2_IPV4;
 +				break;
 +			case RDMA_NETWORK_IPV6:
 +				qp->qplib_qp.nw_type =
 +					CMDQ_MODIFY_QP_NETWORK_TYPE_ROCEV2_IPV6;
 +				break;
 +			default:
 +				qp->qplib_qp.nw_type =
 +					CMDQ_MODIFY_QP_NETWORK_TYPE_ROCEV1;
 +				break;
 +			}
++=======
+ 		sgid_attr = qp_attr->ah_attr.grh.sgid_attr;
+ 		memcpy(qp->qplib_qp.smac, sgid_attr->ndev->dev_addr,
+ 		       ETH_ALEN);
+ 		nw_type = rdma_gid_attr_network_type(sgid_attr);
+ 		switch (nw_type) {
+ 		case RDMA_NETWORK_IPV4:
+ 			qp->qplib_qp.nw_type =
+ 				CMDQ_MODIFY_QP_NETWORK_TYPE_ROCEV2_IPV4;
+ 			break;
+ 		case RDMA_NETWORK_IPV6:
+ 			qp->qplib_qp.nw_type =
+ 				CMDQ_MODIFY_QP_NETWORK_TYPE_ROCEV2_IPV6;
+ 			break;
+ 		default:
+ 			qp->qplib_qp.nw_type =
+ 				CMDQ_MODIFY_QP_NETWORK_TYPE_ROCEV1;
+ 			break;
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  		}
  	}
  
diff --cc drivers/infiniband/hw/mlx4/ah.c
index 6dee4fdc5d67,1ab3681acdcd..000000000000
--- a/drivers/infiniband/hw/mlx4/ah.c
+++ b/drivers/infiniband/hw/mlx4/ah.c
@@@ -96,17 -95,12 +95,21 @@@ static struct ib_ah *create_iboe_ah(str
  		is_mcast = 1;
  
  	memcpy(ah->av.eth.mac, ah_attr->roce.dmac, ETH_ALEN);
- 	ret = ib_get_cached_gid(pd->device, rdma_ah_get_port_num(ah_attr),
- 				grh->sgid_index, &sgid, &gid_attr);
- 	if (ret)
- 		return ERR_PTR(ret);
  	eth_zero_addr(ah->av.eth.s_mac);
++<<<<<<< HEAD
 +	if (gid_attr.ndev) {
 +		if (is_vlan_dev(gid_attr.ndev))
 +			vlan_tag = vlan_dev_vlan_id(gid_attr.ndev);
 +		memcpy(ah->av.eth.s_mac, gid_attr.ndev->dev_addr, ETH_ALEN);
 +		dev_put(gid_attr.ndev);
 +	}
++=======
+ 	gid_attr = ah_attr->grh.sgid_attr;
+ 	if (is_vlan_dev(gid_attr->ndev))
+ 		vlan_tag = vlan_dev_vlan_id(gid_attr->ndev);
+ 	memcpy(ah->av.eth.s_mac, gid_attr->ndev->dev_addr, ETH_ALEN);
+ 
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  	if (vlan_tag < 0x1000)
  		vlan_tag |= (rdma_ah_get_sl(ah_attr) & 7) << 13;
  	ah->av.eth.port_pd = cpu_to_be32(to_mpd(pd)->pdn |
diff --cc drivers/infiniband/hw/mlx4/qp.c
index 353e43ad2e95,1538ce6e9dac..000000000000
--- a/drivers/infiniband/hw/mlx4/qp.c
+++ b/drivers/infiniband/hw/mlx4/qp.c
@@@ -2351,19 -2364,10 +2349,23 @@@ static int __mlx4_ib_modify_qp(void *sr
  			rdma_ah_get_ah_flags(&attr->ah_attr) & IB_AH_GRH;
  
  		if (is_eth) {
++<<<<<<< HEAD
 +			int index =
 +				rdma_ah_read_grh(&attr->ah_attr)->sgid_index;
 +
 +			status = ib_get_cached_gid(&dev->ib_dev, port_num,
 +						   index, &gid, &gid_attr);
 +			if (!status && gid_attr.ndev) {
 +				vlan = rdma_vlan_dev_vlan_id(gid_attr.ndev);
 +				memcpy(smac, gid_attr.ndev->dev_addr, ETH_ALEN);
 +				dev_put(gid_attr.ndev);
 +			}
++=======
+ 			gid_attr = attr->ah_attr.grh.sgid_attr;
+ 			vlan = rdma_vlan_dev_vlan_id(gid_attr->ndev);
+ 			memcpy(smac, gid_attr->ndev->dev_addr, ETH_ALEN);
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  		}
- 		if (status)
- 			goto out;
  
  		if (mlx4_set_path(dev, attr, attr_mask, qp, &context->pri_path,
  				  port_num, vlan, smac))
diff --cc drivers/infiniband/hw/mlx5/main.c
index caab7cc36fbe,e6d88f32391b..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -483,61 -510,29 +483,68 @@@ static int set_roce_addr(struct mlx5_ib
  				      vlan_id, port_num);
  }
  
 -static int mlx5_ib_add_gid(const struct ib_gid_attr *attr,
 +static int mlx5_ib_add_gid(struct ib_device *device, u8 port_num,
 +			   unsigned int index, const union ib_gid *gid,
 +			   const struct ib_gid_attr *attr,
  			   __always_unused void **context)
  {
 -	return set_roce_addr(to_mdev(attr->device), attr->port_num,
 -			     attr->index, &attr->gid, attr);
 +	return set_roce_addr(to_mdev(device), port_num, index, gid, attr);
  }
  
 -static int mlx5_ib_del_gid(const struct ib_gid_attr *attr,
 -			   __always_unused void **context)
 +static int mlx5_ib_del_gid(struct ib_device *device, u8 port_num,
 +			   unsigned int index, __always_unused void **context)
  {
 -	return set_roce_addr(to_mdev(attr->device), attr->port_num,
 -			     attr->index, NULL, NULL);
 +	return set_roce_addr(to_mdev(device), port_num, index, NULL, NULL);
  }
  
- __be16 mlx5_get_roce_udp_sport(struct mlx5_ib_dev *dev, u8 port_num,
- 			       int index)
+ __be16 mlx5_get_roce_udp_sport(struct mlx5_ib_dev *dev,
+ 			       const struct ib_gid_attr *attr)
  {
++<<<<<<< HEAD
 +	struct ib_gid_attr attr;
 +	union ib_gid gid;
 +
 +	if (ib_get_cached_gid(&dev->ib_dev, port_num, index, &gid, &attr))
 +		return 0;
 +
 +	if (!attr.ndev)
 +		return 0;
 +
 +	dev_put(attr.ndev);
 +
 +	if (attr.gid_type != IB_GID_TYPE_ROCE_UDP_ENCAP)
++=======
+ 	if (attr->gid_type != IB_GID_TYPE_ROCE_UDP_ENCAP)
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  		return 0;
  
  	return cpu_to_be16(MLX5_CAP_ROCE(dev->mdev, r_roce_min_src_udp_port));
  }
  
++<<<<<<< HEAD
 +int mlx5_get_roce_gid_type(struct mlx5_ib_dev *dev, u8 port_num,
 +			   int index, enum ib_gid_type *gid_type)
 +{
 +	struct ib_gid_attr attr;
 +	union ib_gid gid;
 +	int ret;
 +
 +	ret = ib_get_cached_gid(&dev->ib_dev, port_num, index, &gid, &attr);
 +	if (ret)
 +		return ret;
 +
 +	if (!attr.ndev)
 +		return -ENODEV;
 +
 +	dev_put(attr.ndev);
 +
 +	*gid_type = attr.gid_type;
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  static int mlx5_use_mad_ifc(struct mlx5_ib_dev *dev)
  {
  	if (MLX5_CAP_GEN(dev->mdev, port_type) == MLX5_CAP_PORT_TYPE_IB)
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_ah.c
index 9dfed759b0f2,a51b80bfadb3..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_ah.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_ah.c
@@@ -186,22 -185,15 +185,32 @@@ struct ib_ah *ocrdma_create_ah(struct i
  	if (status)
  		goto av_err;
  
++<<<<<<< HEAD
 +	status = ib_get_cached_gid(&dev->ibdev, 1, grh->sgid_index, &sgid,
 +				   &sgid_attr);
 +	if (status) {
 +		pr_err("%s(): Failed to query sgid, status = %d\n",
 +		       __func__, status);
 +		goto av_conf_err;
 +	}
 +	if (sgid_attr.ndev) {
 +		if (is_vlan_dev(sgid_attr.ndev))
 +			vlan_tag = vlan_dev_vlan_id(sgid_attr.ndev);
 +		dev_put(sgid_attr.ndev);
 +	}
 +	/* Get network header type for this GID */
 +	ah->hdr_type = ib_gid_to_network_type(sgid_attr.gid_type, &sgid);
++=======
+ 	sgid_attr = attr->grh.sgid_attr;
+ 	if (is_vlan_dev(sgid_attr->ndev))
+ 		vlan_tag = vlan_dev_vlan_id(sgid_attr->ndev);
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  
- 	status = set_av_attr(dev, ah, attr, &sgid, pd->id, &isvlan, vlan_tag);
+ 	/* Get network header type for this GID */
+ 	ah->hdr_type = rdma_gid_attr_network_type(sgid_attr);
+ 
+ 	status = set_av_attr(dev, ah, attr, &sgid_attr->gid, pd->id,
+ 			     &isvlan, vlan_tag);
  	if (status)
  		goto av_conf_err;
  
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_hw.c
index 12783262eb75,c6c87cba943b..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_hw.c
@@@ -2525,16 -2524,13 +2524,23 @@@ static int ocrdma_set_av_params(struct 
  	memcpy(&cmd->params.dgid[0], &grh->dgid.raw[0],
  	       sizeof(cmd->params.dgid));
  
++<<<<<<< HEAD
 +	status = ib_get_cached_gid(&dev->ibdev, 1, grh->sgid_index,
 +				   &sgid, &sgid_attr);
 +	if (!status && sgid_attr.ndev) {
 +		vlan_id = rdma_vlan_dev_vlan_id(sgid_attr.ndev);
 +		memcpy(mac_addr, sgid_attr.ndev->dev_addr, ETH_ALEN);
 +		dev_put(sgid_attr.ndev);
 +	}
++=======
+ 	sgid_attr = ah_attr->grh.sgid_attr;
+ 	vlan_id = rdma_vlan_dev_vlan_id(sgid_attr->ndev);
+ 	memcpy(mac_addr, sgid_attr->ndev->dev_addr, ETH_ALEN);
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  
  	qp->sgid_idx = grh->sgid_index;
- 	memcpy(&cmd->params.sgid[0], &sgid.raw[0], sizeof(cmd->params.sgid));
+ 	memcpy(&cmd->params.sgid[0], &sgid_attr->gid.raw[0],
+ 	       sizeof(cmd->params.sgid));
  	status = ocrdma_resolve_dmac(dev, ah_attr, &mac_addr[0]);
  	if (status)
  		return status;
diff --cc drivers/infiniband/hw/qedr/verbs.c
index 7a90bdd4b979,10d8f4134ec0..000000000000
--- a/drivers/infiniband/hw/qedr/verbs.c
+++ b/drivers/infiniband/hw/qedr/verbs.c
@@@ -1100,57 -1075,47 +1100,87 @@@ static inline int get_gid_info_from_tab
  					  struct qed_rdma_modify_qp_in_params
  					  *qp_params)
  {
+ 	const struct ib_gid_attr *gid_attr;
  	enum rdma_network_type nw_type;
- 	struct ib_gid_attr gid_attr;
  	const struct ib_global_route *grh = rdma_ah_read_grh(&attr->ah_attr);
- 	union ib_gid gid;
  	u32 ipv4_addr;
- 	int rc = 0;
  	int i;
  
- 	rc = ib_get_cached_gid(ibqp->device,
- 			       rdma_ah_get_port_num(&attr->ah_attr),
- 			       grh->sgid_index, &gid, &gid_attr);
- 	if (rc)
- 		return rc;
+ 	gid_attr = grh->sgid_attr;
+ 	qp_params->vlan_id = rdma_vlan_dev_vlan_id(gid_attr->ndev);
  
++<<<<<<< HEAD
 +	if (gid_attr.ndev) {
 +		qp_params->vlan_id = rdma_vlan_dev_vlan_id(gid_attr.ndev);
 +
 +		dev_put(gid_attr.ndev);
 +		nw_type = ib_gid_to_network_type(gid_attr.gid_type, &gid);
 +		switch (nw_type) {
 +		case RDMA_NETWORK_IPV6:
 +			memcpy(&qp_params->sgid.bytes[0], &gid.raw[0],
 +			       sizeof(qp_params->sgid));
 +			memcpy(&qp_params->dgid.bytes[0],
 +			       &grh->dgid,
 +			       sizeof(qp_params->dgid));
 +			qp_params->roce_mode = ROCE_V2_IPV6;
 +			SET_FIELD(qp_params->modify_flags,
 +				  QED_ROCE_MODIFY_QP_VALID_ROCE_MODE, 1);
 +			break;
 +		case RDMA_NETWORK_IB:
 +			memcpy(&qp_params->sgid.bytes[0], &gid.raw[0],
 +			       sizeof(qp_params->sgid));
 +			memcpy(&qp_params->dgid.bytes[0],
 +			       &grh->dgid,
 +			       sizeof(qp_params->dgid));
 +			qp_params->roce_mode = ROCE_V1;
 +			break;
 +		case RDMA_NETWORK_IPV4:
 +			memset(&qp_params->sgid, 0, sizeof(qp_params->sgid));
 +			memset(&qp_params->dgid, 0, sizeof(qp_params->dgid));
 +			ipv4_addr = qedr_get_ipv4_from_gid(gid.raw);
 +			qp_params->sgid.ipv4_addr = ipv4_addr;
 +			ipv4_addr =
 +			    qedr_get_ipv4_from_gid(grh->dgid.raw);
 +			qp_params->dgid.ipv4_addr = ipv4_addr;
 +			SET_FIELD(qp_params->modify_flags,
 +				  QED_ROCE_MODIFY_QP_VALID_ROCE_MODE, 1);
 +			qp_params->roce_mode = ROCE_V2_IPV4;
 +			break;
 +		}
++=======
+ 	nw_type = rdma_gid_attr_network_type(gid_attr);
+ 	switch (nw_type) {
+ 	case RDMA_NETWORK_IPV6:
+ 		memcpy(&qp_params->sgid.bytes[0], &gid_attr->gid.raw[0],
+ 		       sizeof(qp_params->sgid));
+ 		memcpy(&qp_params->dgid.bytes[0],
+ 		       &grh->dgid,
+ 		       sizeof(qp_params->dgid));
+ 		qp_params->roce_mode = ROCE_V2_IPV6;
+ 		SET_FIELD(qp_params->modify_flags,
+ 			  QED_ROCE_MODIFY_QP_VALID_ROCE_MODE, 1);
+ 		break;
+ 	case RDMA_NETWORK_IB:
+ 		memcpy(&qp_params->sgid.bytes[0], &gid_attr->gid.raw[0],
+ 		       sizeof(qp_params->sgid));
+ 		memcpy(&qp_params->dgid.bytes[0],
+ 		       &grh->dgid,
+ 		       sizeof(qp_params->dgid));
+ 		qp_params->roce_mode = ROCE_V1;
+ 		break;
+ 	case RDMA_NETWORK_IPV4:
+ 		memset(&qp_params->sgid, 0, sizeof(qp_params->sgid));
+ 		memset(&qp_params->dgid, 0, sizeof(qp_params->dgid));
+ 		ipv4_addr = qedr_get_ipv4_from_gid(gid_attr->gid.raw);
+ 		qp_params->sgid.ipv4_addr = ipv4_addr;
+ 		ipv4_addr =
+ 		    qedr_get_ipv4_from_gid(grh->dgid.raw);
+ 		qp_params->dgid.ipv4_addr = ipv4_addr;
+ 		SET_FIELD(qp_params->modify_flags,
+ 			  QED_ROCE_MODIFY_QP_VALID_ROCE_MODE, 1);
+ 		qp_params->roce_mode = ROCE_V2_IPV4;
+ 		break;
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  	}
  
  	for (i = 0; i < 4; i++) {
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.c
index 39cef3e024df,9cfd440cebe1..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@@ -256,27 -222,11 +256,19 @@@ static int rxe_dealloc_pd(struct ib_pd 
  	return 0;
  }
  
- static int rxe_init_av(struct rxe_dev *rxe, struct rdma_ah_attr *attr,
- 		       struct rxe_av *av)
+ static void rxe_init_av(struct rxe_dev *rxe, struct rdma_ah_attr *attr,
+ 			struct rxe_av *av)
  {
- 	int err;
- 	union ib_gid sgid;
- 	struct ib_gid_attr sgid_attr;
- 
- 	err = ib_get_cached_gid(&rxe->ib_dev, rdma_ah_get_port_num(attr),
- 				rdma_ah_read_grh(attr)->sgid_index, &sgid,
- 				&sgid_attr);
- 	if (err) {
- 		pr_err("Failed to query sgid. err = %d\n", err);
- 		return err;
- 	}
- 
  	rxe_av_from_attr(rdma_ah_get_port_num(attr), av, attr);
++<<<<<<< HEAD
 +	rxe_av_fill_ip_info(av, attr, &sgid_attr, &sgid);
 +
 +	if (sgid_attr.ndev)
 +		dev_put(sgid_attr.ndev);
 +	return 0;
++=======
+ 	rxe_av_fill_ip_info(av, attr);
++>>>>>>> 47ec38666210 (RDMA: Convert drivers to use sgid_attr instead of sgid_index)
  }
  
  static struct ib_ah *rxe_create_ah(struct ib_pd *ibpd,
* Unmerged path drivers/infiniband/hw/hns/hns_roce_ah.c
* Unmerged path drivers/infiniband/hw/bnxt_re/ib_verbs.c
* Unmerged path drivers/infiniband/hw/hns/hns_roce_ah.c
* Unmerged path drivers/infiniband/hw/mlx4/ah.c
* Unmerged path drivers/infiniband/hw/mlx4/qp.c
diff --git a/drivers/infiniband/hw/mlx5/ah.c b/drivers/infiniband/hw/mlx5/ah.c
index e6bde32a83f3..ffd03bf1a71e 100644
--- a/drivers/infiniband/hw/mlx5/ah.c
+++ b/drivers/infiniband/hw/mlx5/ah.c
@@ -37,7 +37,6 @@ static struct ib_ah *create_ib_ah(struct mlx5_ib_dev *dev,
 				  struct rdma_ah_attr *ah_attr)
 {
 	enum ib_gid_type gid_type;
-	int err;
 
 	if (rdma_ah_get_ah_flags(ah_attr) & IB_AH_GRH) {
 		const struct ib_global_route *grh = rdma_ah_read_grh(ah_attr);
@@ -53,18 +52,12 @@ static struct ib_ah *create_ib_ah(struct mlx5_ib_dev *dev,
 	ah->av.stat_rate_sl = (rdma_ah_get_static_rate(ah_attr) << 4);
 
 	if (ah_attr->type == RDMA_AH_ATTR_TYPE_ROCE) {
-		err = mlx5_get_roce_gid_type(dev, ah_attr->port_num,
-					     ah_attr->grh.sgid_index,
-					     &gid_type);
-		if (err)
-			return ERR_PTR(err);
+		gid_type = ah_attr->grh.sgid_attr->gid_type;
 
 		memcpy(ah->av.rmac, ah_attr->roce.dmac,
 		       sizeof(ah_attr->roce.dmac));
 		ah->av.udp_sport =
-		mlx5_get_roce_udp_sport(dev,
-					rdma_ah_get_port_num(ah_attr),
-					rdma_ah_read_grh(ah_attr)->sgid_index);
+			mlx5_get_roce_udp_sport(dev, ah_attr->grh.sgid_attr);
 		ah->av.stat_rate_sl |= (rdma_ah_get_sl(ah_attr) & 0x7) << 1;
 		if (gid_type == IB_GID_TYPE_ROCE_UDP_ENCAP)
 #define MLX5_ECN_ENABLED BIT(1)
* Unmerged path drivers/infiniband/hw/mlx5/main.c
diff --git a/drivers/infiniband/hw/mlx5/mlx5_ib.h b/drivers/infiniband/hw/mlx5/mlx5_ib.h
index 035431ee36ed..5ad919453e90 100644
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@ -1059,10 +1059,8 @@ int mlx5_ib_get_vf_stats(struct ib_device *device, int vf,
 int mlx5_ib_set_vf_guid(struct ib_device *device, int vf, u8 port,
 			u64 guid, int type);
 
-__be16 mlx5_get_roce_udp_sport(struct mlx5_ib_dev *dev, u8 port_num,
-			       int index);
-int mlx5_get_roce_gid_type(struct mlx5_ib_dev *dev, u8 port_num,
-			   int index, enum ib_gid_type *gid_type);
+__be16 mlx5_get_roce_udp_sport(struct mlx5_ib_dev *dev,
+			       const struct ib_gid_attr *attr);
 
 void mlx5_ib_cleanup_cong_debugfs(struct mlx5_ib_dev *dev, u8 port_num);
 int mlx5_ib_init_cong_debugfs(struct mlx5_ib_dev *dev, u8 port_num);
diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index c20624f72c20..ee126ed132ba 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -2513,18 +2513,16 @@ static int mlx5_set_path(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 	if (ah->type == RDMA_AH_ATTR_TYPE_ROCE) {
 		if (!(ah_flags & IB_AH_GRH))
 			return -EINVAL;
-		err = mlx5_get_roce_gid_type(dev, port, grh->sgid_index,
-					     &gid_type);
-		if (err)
-			return err;
+
 		memcpy(path->rmac, ah->roce.dmac, sizeof(ah->roce.dmac));
 		if (qp->ibqp.qp_type == IB_QPT_RC ||
 		    qp->ibqp.qp_type == IB_QPT_UC ||
 		    qp->ibqp.qp_type == IB_QPT_XRC_INI ||
 		    qp->ibqp.qp_type == IB_QPT_XRC_TGT)
-			path->udp_sport = mlx5_get_roce_udp_sport(dev, port,
-								  grh->sgid_index);
+			path->udp_sport =
+				mlx5_get_roce_udp_sport(dev, ah->grh.sgid_attr);
 		path->dci_cfi_prio_sl = (sl & 0x7) << 4;
+		gid_type = ah->grh.sgid_attr->gid_type;
 		if (gid_type == IB_GID_TYPE_ROCE_UDP_ENCAP)
 			path->ecn_dscp = (grh->traffic_class >> 2) & 0x3f;
 	} else {
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_ah.c
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_hw.c
* Unmerged path drivers/infiniband/hw/qedr/verbs.c
diff --git a/drivers/infiniband/sw/rxe/rxe_av.c b/drivers/infiniband/sw/rxe/rxe_av.c
index c0f972c58d55..26fe8d7dbc55 100644
--- a/drivers/infiniband/sw/rxe/rxe_av.c
+++ b/drivers/infiniband/sw/rxe/rxe_av.c
@@ -82,15 +82,14 @@ void rxe_av_to_attr(struct rxe_av *av, struct rdma_ah_attr *attr)
 	rdma_ah_set_port_num(attr, av->port_num);
 }
 
-void rxe_av_fill_ip_info(struct rxe_av *av,
-			struct rdma_ah_attr *attr,
-			struct ib_gid_attr *sgid_attr,
-			union ib_gid *sgid)
+void rxe_av_fill_ip_info(struct rxe_av *av, struct rdma_ah_attr *attr)
 {
-	rdma_gid2ip((struct sockaddr *)&av->sgid_addr, sgid);
+	const struct ib_gid_attr *sgid_attr = attr->grh.sgid_attr;
+
+	rdma_gid2ip((struct sockaddr *)&av->sgid_addr, &sgid_attr->gid);
 	rdma_gid2ip((struct sockaddr *)&av->dgid_addr,
 		    &rdma_ah_read_grh(attr)->dgid);
-	av->network_type = ib_gid_to_network_type(sgid_attr->gid_type, sgid);
+	av->network_type = rdma_gid_attr_network_type(sgid_attr);
 }
 
 struct rxe_av *rxe_get_av(struct rxe_pkt_info *pkt)
diff --git a/drivers/infiniband/sw/rxe/rxe_loc.h b/drivers/infiniband/sw/rxe/rxe_loc.h
index a51ece596c43..87d14f7ef21b 100644
--- a/drivers/infiniband/sw/rxe/rxe_loc.h
+++ b/drivers/infiniband/sw/rxe/rxe_loc.h
@@ -43,10 +43,7 @@ void rxe_av_from_attr(u8 port_num, struct rxe_av *av,
 
 void rxe_av_to_attr(struct rxe_av *av, struct rdma_ah_attr *attr);
 
-void rxe_av_fill_ip_info(struct rxe_av *av,
-			struct rdma_ah_attr *attr,
-			struct ib_gid_attr *sgid_attr,
-			union ib_gid *sgid);
+void rxe_av_fill_ip_info(struct rxe_av *av, struct rdma_ah_attr *attr);
 
 struct rxe_av *rxe_get_av(struct rxe_pkt_info *pkt);
 
diff --git a/drivers/infiniband/sw/rxe/rxe_qp.c b/drivers/infiniband/sw/rxe/rxe_qp.c
index 0175864ade6f..aacd92d55ad1 100644
--- a/drivers/infiniband/sw/rxe/rxe_qp.c
+++ b/drivers/infiniband/sw/rxe/rxe_qp.c
@@ -580,9 +580,6 @@ int rxe_qp_from_attr(struct rxe_qp *qp, struct ib_qp_attr *attr, int mask,
 		     struct ib_udata *udata)
 {
 	int err;
-	struct rxe_dev *rxe = to_rdev(qp->ibqp.device);
-	union ib_gid sgid;
-	struct ib_gid_attr sgid_attr;
 
 	if (mask & IB_QP_MAX_QP_RD_ATOMIC) {
 		int max_rd_atomic = __roundup_pow_of_two(attr->max_rd_atomic);
@@ -623,30 +620,14 @@ int rxe_qp_from_attr(struct rxe_qp *qp, struct ib_qp_attr *attr, int mask,
 		qp->attr.qkey = attr->qkey;
 
 	if (mask & IB_QP_AV) {
-		ib_get_cached_gid(&rxe->ib_dev, 1,
-				  rdma_ah_read_grh(&attr->ah_attr)->sgid_index,
-				  &sgid, &sgid_attr);
 		rxe_av_from_attr(attr->port_num, &qp->pri_av, &attr->ah_attr);
-		rxe_av_fill_ip_info(&qp->pri_av, &attr->ah_attr,
-				    &sgid_attr, &sgid);
-		if (sgid_attr.ndev)
-			dev_put(sgid_attr.ndev);
+		rxe_av_fill_ip_info(&qp->pri_av, &attr->ah_attr);
 	}
 
 	if (mask & IB_QP_ALT_PATH) {
-		u8 sgid_index =
-			rdma_ah_read_grh(&attr->alt_ah_attr)->sgid_index;
-
-		ib_get_cached_gid(&rxe->ib_dev, 1, sgid_index,
-				  &sgid, &sgid_attr);
-
 		rxe_av_from_attr(attr->alt_port_num, &qp->alt_av,
 				 &attr->alt_ah_attr);
-		rxe_av_fill_ip_info(&qp->alt_av, &attr->alt_ah_attr,
-				    &sgid_attr, &sgid);
-		if (sgid_attr.ndev)
-			dev_put(sgid_attr.ndev);
-
+		rxe_av_fill_ip_info(&qp->alt_av, &attr->alt_ah_attr);
 		qp->attr.alt_port_num = attr->alt_port_num;
 		qp->attr.alt_pkey_index = attr->alt_pkey_index;
 		qp->attr.alt_timeout = attr->alt_timeout;
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.c
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index 5c5a1aac8824..dba7d9f1f0e4 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -142,13 +142,13 @@ static inline enum ib_gid_type ib_network_to_gid_type(enum rdma_network_type net
 	return IB_GID_TYPE_IB;
 }
 
-static inline enum rdma_network_type ib_gid_to_network_type(enum ib_gid_type gid_type,
-							    union ib_gid *gid)
+static inline enum rdma_network_type
+rdma_gid_attr_network_type(const struct ib_gid_attr *attr)
 {
-	if (gid_type == IB_GID_TYPE_IB)
+	if (attr->gid_type == IB_GID_TYPE_IB)
 		return RDMA_NETWORK_IB;
 
-	if (ipv6_addr_v4mapped((struct in6_addr *)gid))
+	if (ipv6_addr_v4mapped((struct in6_addr *)&attr->gid))
 		return RDMA_NETWORK_IPV4;
 	else
 		return RDMA_NETWORK_IPV6;
