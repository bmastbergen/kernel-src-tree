qed: Fix overriding offload_tc by protocols without APP TLV

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Denis Bolotin <denis.bolotin@cavium.com>
commit e90202ed1cf9672c48a363c84a929932ebfe6fc0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e90202ed.failed

The TC received from APP TLV is stored in offload_tc, and should not be
set by protocols which did not receive an APP TLV. Fixed the condition
when overriding the offload_tc.

	Signed-off-by: Denis Bolotin <denis.bolotin@cavium.com>
	Signed-off-by: Michal Kalderon <michal.kalderon@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e90202ed1cf9672c48a363c84a929932ebfe6fc0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qed/qed_dcbx.c
diff --cc drivers/net/ethernet/qlogic/qed/qed_dcbx.c
index 35f1a60c009b,69966dfc6e3d..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_dcbx.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_dcbx.c
@@@ -190,11 -190,8 +190,16 @@@ qed_dcbx_dp_protocol(struct qed_hwfn *p
  
  static void
  qed_dcbx_set_params(struct qed_dcbx_results *p_data,
++<<<<<<< HEAD
 +		    struct qed_hwfn *p_hwfn,
 +		    struct qed_hw_info *p_info,
 +		    bool enable,
 +		    u8 prio,
 +		    u8 tc,
++=======
+ 		    struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt,
+ 		    bool app_tlv, bool enable, u8 prio, u8 tc,
++>>>>>>> e90202ed1cf9 (qed: Fix overriding offload_tc by protocols without APP TLV)
  		    enum dcbx_protocol_type type,
  		    enum qed_pci_personality personality)
  {
@@@ -213,18 -210,24 +218,36 @@@
  		p_data->arr[type].dont_add_vlan0 = true;
  
  	/* QM reconf data */
++<<<<<<< HEAD
 +	if (p_info->personality == personality)
 +		qed_hw_info_set_offload_tc(p_info, tc);
++=======
+ 	if (app_tlv && p_hwfn->hw_info.personality == personality)
+ 		qed_hw_info_set_offload_tc(&p_hwfn->hw_info, tc);
+ 
+ 	/* Configure dcbx vlan priority in doorbell block for roce EDPM */
+ 	if (test_bit(QED_MF_UFP_SPECIFIC, &p_hwfn->cdev->mf_bits) &&
+ 	    type == DCBX_PROTOCOL_ROCE) {
+ 		qed_wr(p_hwfn, p_ptt, DORQ_REG_TAG1_OVRD_MODE, 1);
+ 		qed_wr(p_hwfn, p_ptt, DORQ_REG_PF_PCP_BB_K2, prio << 1);
+ 	}
++>>>>>>> e90202ed1cf9 (qed: Fix overriding offload_tc by protocols without APP TLV)
  }
  
  /* Update app protocol data and hw_info fields with the TLV info */
  static void
  qed_dcbx_update_app_info(struct qed_dcbx_results *p_data,
++<<<<<<< HEAD
 +			 struct qed_hwfn *p_hwfn,
 +			 bool enable,
 +			 u8 prio, u8 tc, enum dcbx_protocol_type type)
++=======
+ 			 struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt,
+ 			 bool app_tlv, bool enable, u8 prio, u8 tc,
+ 			 enum dcbx_protocol_type type)
++>>>>>>> e90202ed1cf9 (qed: Fix overriding offload_tc by protocols without APP TLV)
  {
 +	struct qed_hw_info *p_info = &p_hwfn->hw_info;
  	enum qed_pci_personality personality;
  	enum dcbx_protocol_type id;
  	int i;
@@@ -237,7 -240,7 +260,11 @@@
  
  		personality = qed_dcbx_app_update[i].personality;
  
++<<<<<<< HEAD
 +		qed_dcbx_set_params(p_data, p_hwfn, p_info, enable,
++=======
+ 		qed_dcbx_set_params(p_data, p_hwfn, p_ptt, app_tlv, enable,
++>>>>>>> e90202ed1cf9 (qed: Fix overriding offload_tc by protocols without APP TLV)
  				    prio, tc, type, personality);
  	}
  }
@@@ -316,8 -319,8 +343,13 @@@ qed_dcbx_process_tlv(struct qed_hwfn *p
  				enable = true;
  			}
  
++<<<<<<< HEAD
 +			qed_dcbx_update_app_info(p_data, p_hwfn, enable,
 +						 priority, tc, type);
++=======
+ 			qed_dcbx_update_app_info(p_data, p_hwfn, p_ptt, true,
+ 						 enable, priority, tc, type);
++>>>>>>> e90202ed1cf9 (qed: Fix overriding offload_tc by protocols without APP TLV)
  		}
  	}
  
@@@ -338,7 -341,7 +370,11 @@@
  			continue;
  
  		enable = (type == DCBX_PROTOCOL_ETH) ? false : !!dcbx_version;
++<<<<<<< HEAD
 +		qed_dcbx_update_app_info(p_data, p_hwfn, enable,
++=======
+ 		qed_dcbx_update_app_info(p_data, p_hwfn, p_ptt, false, enable,
++>>>>>>> e90202ed1cf9 (qed: Fix overriding offload_tc by protocols without APP TLV)
  					 priority, tc, type);
  	}
  
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_dcbx.c
