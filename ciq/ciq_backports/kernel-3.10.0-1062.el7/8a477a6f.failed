net: phy: keep track of the PHY suspend state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] phy: keep track of the PHY suspend state (Ivan Vecera) [1655590]
Rebuild_FUZZ: 94.12%
commit-author Florian Fainelli <f.fainelli@gmail.com>
commit 8a477a6fb6a33651adda772360b85fd813569743
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/8a477a6f.failed

In order to avoid double calls to phydev->drv->suspend and resume, keep
track of whether the PHY has already been suspended as a consequence of
a successful call to phy_suspend(). We will use this in our MDIO bus
suspend/resume hooks to avoid a double suspend call.

	Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8a477a6fb6a33651adda772360b85fd813569743)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/phy.h
diff --cc include/linux/phy.h
index d740e3ea3614,685809835b5c..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -319,6 -327,8 +319,11 @@@ struct phy_c45_device_ids 
   * c45_ids: 802.3-c45 Device Identifers if is_c45.
   * is_c45:  Set to true if this phy uses clause 45 addressing.
   * is_internal: Set to true if this phy is internal to a MAC.
++<<<<<<< HEAD
++=======
+  * has_fixups: Set to true if this phy has fixups/quirks.
+  * suspended: Set to true if this phy has been suspended successfully.
++>>>>>>> 8a477a6fb6a3 (net: phy: keep track of the PHY suspend state)
   * state: state of the PHY for management purposes
   * dev_flags: Device-specific flags used by the PHY driver.
   * addr: Bus address of PHY
@@@ -354,8 -364,9 +359,14 @@@ struct phy_device 
  
  	struct phy_c45_device_ids c45_ids;
  	bool is_c45;
++<<<<<<< HEAD
 +	RH_KABI_FILL_HOLE(bool is_internal)
 +	/* there is 2-bytes hole on all platforms */
++=======
+ 	bool is_internal;
+ 	bool has_fixups;
+ 	bool suspended;
++>>>>>>> 8a477a6fb6a3 (net: phy: keep track of the PHY suspend state)
  
  	enum phy_state state;
  
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 8dd3432c8c20..09f051a157ed 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -737,6 +737,7 @@ int phy_suspend(struct phy_device *phydev)
 {
 	struct phy_driver *phydrv = to_phy_driver(phydev->dev.driver);
 	struct ethtool_wolinfo wol = { .cmd = ETHTOOL_GWOL };
+	int ret = 0;
 
 	/* If the device has WOL enabled, we cannot suspend the PHY */
 	phy_ethtool_get_wol(phydev, &wol);
@@ -744,18 +745,31 @@ int phy_suspend(struct phy_device *phydev)
 		return -EBUSY;
 
 	if (phydrv->suspend)
-		return phydrv->suspend(phydev);
-	return 0;
+		ret = phydrv->suspend(phydev);
+
+	if (ret)
+		return ret;
+
+	phydev->suspended = true;
+
+	return ret;
 }
 EXPORT_SYMBOL(phy_suspend);
 
 int phy_resume(struct phy_device *phydev)
 {
 	struct phy_driver *phydrv = to_phy_driver(phydev->dev.driver);
+	int ret = 0;
 
 	if (phydrv->resume)
-		return phydrv->resume(phydev);
-	return 0;
+		ret = phydrv->resume(phydev);
+
+	if (ret)
+		return ret;
+
+	phydev->suspended = false;
+
+	return ret;
 }
 EXPORT_SYMBOL(phy_resume);
 
* Unmerged path include/linux/phy.h
