io: change readX_relaxed() to remove barriers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Sinan Kaya <okaya@codeaurora.org>
commit 8875c55437617fa4351070656bd78e17ed8284a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/8875c554.failed

Now that we hardened readX() API in asm-generic version, readX_relaxed()
API is violating the rules when readX_relaxed() == readX() in the default
implementation.

The relaxed API shouldn't have any barriers in it and it doesn't provide
any ordering with respect to the memory transactions. The only requirement
is for reads to be ordered with respect to each other. This is achieved
by the volatile in the __raw_readX() API.

Open code the relaxed API and remove any barriers in it.

	Signed-off-by: Sinan Kaya <okaya@codeaurora.org>
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
(cherry picked from commit 8875c55437617fa4351070656bd78e17ed8284a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/asm-generic/io.h
diff --cc include/asm-generic/io.h
index 66a3fecbf792,fa0975da0cec..000000000000
--- a/include/asm-generic/io.h
+++ b/include/asm-generic/io.h
@@@ -52,33 -101,65 +52,53 @@@ static inline u32 __raw_readl(const vol
  }
  #endif
  
 -#ifdef CONFIG_64BIT
 -#ifndef __raw_readq
 -#define __raw_readq __raw_readq
 -static inline u64 __raw_readq(const volatile void __iomem *addr)
 +#define readb __raw_readb
 +#ifndef readb_relaxed
- #define readb_relaxed readb
++#define readb_relaxed readb_relaxed
++static inline u8 readb_relaxed(const volatile void __iomem *addr)
+ {
 -	return *(const volatile u64 __force *)addr;
++	return __raw_readb(addr);
+ }
  #endif
 -#endif /* CONFIG_64BIT */
  
 -#ifndef __raw_writeb
 -#define __raw_writeb __raw_writeb
 -static inline void __raw_writeb(u8 value, volatile void __iomem *addr)
 +#define readw readw
 +static inline u16 readw(const volatile void __iomem *addr)
  {
 -	*(volatile u8 __force *)addr = value;
 +	return __le16_to_cpu(__raw_readw(addr));
  }
 -#endif
 -
 -#ifndef __raw_writew
 -#define __raw_writew __raw_writew
 -static inline void __raw_writew(u16 value, volatile void __iomem *addr)
 +#ifndef readw_relaxed
- #define readw_relaxed readw
++#define readw_relaxed readw_relaxed
++static inline u16 readw_relaxed(const volatile void __iomem *addr)
+ {
 -	*(volatile u16 __force *)addr = value;
++	return __le16_to_cpu(__raw_readw(addr));
+ }
  #endif
  
 -#ifndef __raw_writel
 -#define __raw_writel __raw_writel
 -static inline void __raw_writel(u32 value, volatile void __iomem *addr)
 +#define readl readl
 +static inline u32 readl(const volatile void __iomem *addr)
  {
 -	*(volatile u32 __force *)addr = value;
 +	return __le32_to_cpu(__raw_readl(addr));
  }
 -#endif
 -
 -#ifdef CONFIG_64BIT
 -#ifndef __raw_writeq
 -#define __raw_writeq __raw_writeq
 -static inline void __raw_writeq(u64 value, volatile void __iomem *addr)
 +#ifndef readl_relaxed
- #define readl_relaxed readl
++#define readl_relaxed readl_relaxed
++static inline u32 readl_relaxed(const volatile void __iomem *addr)
+ {
 -	*(volatile u64 __force *)addr = value;
++	return __le32_to_cpu(__raw_readl(addr));
+ }
  #endif
 -#endif /* CONFIG_64BIT */
  
 -/*
 - * {read,write}{b,w,l,q}() access little endian memory and return result in
 - * native endianness.
 - */
 -
 -#ifndef readb
 -#define readb readb
 -static inline u8 readb(const volatile void __iomem *addr)
++<<<<<<< HEAD
 +#ifndef __raw_writeb
 +static inline void __raw_writeb(u8 b, volatile void __iomem *addr)
  {
 -	u8 val;
 -
 -	__io_br();
 -	val = __raw_readb(addr);
 -	__io_ar();
 -	return val;
 +	*(volatile u8 __force *) addr = b;
++=======
++#if defined(readq) && !defined(readq_relaxed)
++#define readq_relaxed readq_relaxed
++static inline u64 readq_relaxed(const volatile void __iomem *addr)
++{
++	return __le64_to_cpu(__raw_readq(addr));
++>>>>>>> 8875c5543761 (io: change readX_relaxed() to remove barriers)
  }
  #endif
  
* Unmerged path include/asm-generic/io.h
