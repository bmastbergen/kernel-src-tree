RDMA: Fully setup the device name in ib_register_device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit e349f858d29f300ad9ad327fd57735a1d15e147f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e349f858.failed

The current code has two copies of the device name, ibdev->dev and
dev_name(&ibdev->dev), and they are setup at different times, which is
very confusing.

Set them both up at the same time and make dev_name() the lead name, which
is the proper use of the driver core APIs. To make it very clear that the
name is not valid until registration pass it in to the
ib_register_device() call rather than messing with ibdev->name directly.

Also the reorganization now checks that dev_name is unique even if it does
not contain a %.

	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Acked-by: Adit Ranadive <aditr@vmware.com>
	Reviewed-by: Steve Wise <swise@opengridcomputing.com>
	Acked-by: Devesh Sharma <devesh.sharma@broadcom.com>
	Reviewed-by: Shiraz Saleem <shiraz.saleem@intel.com>
	Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
(cherry picked from commit e349f858d29f300ad9ad327fd57735a1d15e147f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/sysfs.c
#	drivers/infiniband/hw/bnxt_re/main.c
#	drivers/infiniband/hw/cxgb3/iwch_provider.c
#	drivers/infiniband/hw/cxgb4/provider.c
#	drivers/infiniband/hw/hns/hns_roce_main.c
#	drivers/infiniband/hw/i40iw/i40iw_verbs.c
#	drivers/infiniband/hw/mlx4/main.c
#	drivers/infiniband/hw/mthca/mthca_provider.c
#	drivers/infiniband/hw/nes/nes_verbs.c
#	drivers/infiniband/hw/ocrdma/ocrdma_main.c
#	drivers/infiniband/hw/qedr/main.c
#	drivers/infiniband/hw/usnic/usnic_ib_main.c
#	drivers/infiniband/sw/rxe/rxe_verbs.c
diff --cc drivers/infiniband/core/sysfs.c
index fe1f5546419a,bc947a863b34..000000000000
--- a/drivers/infiniband/core/sysfs.c
+++ b/drivers/infiniband/core/sysfs.c
@@@ -1299,9 -1311,8 +1299,14 @@@ int ib_device_register_sysfs(struct ib_
  	int ret;
  	int i;
  
++<<<<<<< HEAD
 +	ret = dev_set_name(class_dev, "%s", device->name);
 +	if (ret)
 +		return ret;
++=======
+ 	device->groups[0] = &dev_attr_group;
+ 	class_dev->groups = device->groups;
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  
  	ret = device_add(class_dev);
  	if (ret)
diff --cc drivers/infiniband/hw/bnxt_re/main.c
index cfda52b195f7,73632e5b819f..000000000000
--- a/drivers/infiniband/hw/bnxt_re/main.c
+++ b/drivers/infiniband/hw/bnxt_re/main.c
@@@ -672,7 -670,8 +671,12 @@@ static int bnxt_re_register_ib(struct b
  	ibdev->get_hw_stats             = bnxt_re_ib_get_hw_stats;
  	ibdev->alloc_hw_stats           = bnxt_re_ib_alloc_hw_stats;
  
++<<<<<<< HEAD
 +	return ib_register_device(ibdev, NULL);
++=======
+ 	ibdev->driver_id = RDMA_DRIVER_BNXT_RE;
+ 	return ib_register_device(ibdev, "bnxt_re%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  }
  
  static ssize_t show_rev(struct device *device, struct device_attribute *attr,
diff --cc drivers/infiniband/hw/cxgb3/iwch_provider.c
index a723ed67a705,39530cc15f95..000000000000
--- a/drivers/infiniband/hw/cxgb3/iwch_provider.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_provider.c
@@@ -1443,7 -1400,8 +1442,12 @@@ int iwch_register_device(struct iwch_de
  	memcpy(dev->ibdev.iwcm->ifname, dev->rdev.t3cdev_p->lldev->name,
  	       sizeof(dev->ibdev.iwcm->ifname));
  
++<<<<<<< HEAD
 +	ret = ib_register_device(&dev->ibdev, NULL);
++=======
+ 	dev->ibdev.driver_id = RDMA_DRIVER_CXGB3;
+ 	ret = ib_register_device(&dev->ibdev, "cxgb3_%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  	if (ret)
  		goto bail1;
  
diff --cc drivers/infiniband/hw/cxgb4/provider.c
index 596ceaefacf4,416f8d1af610..000000000000
--- a/drivers/infiniband/hw/cxgb4/provider.c
+++ b/drivers/infiniband/hw/cxgb4/provider.c
@@@ -648,7 -624,9 +647,12 @@@ void c4iw_register_device(struct work_s
  	memcpy(dev->ibdev.iwcm->ifname, dev->rdev.lldi.ports[0]->name,
  	       sizeof(dev->ibdev.iwcm->ifname));
  
++<<<<<<< HEAD
 +	ret = ib_register_device(&dev->ibdev, NULL);
++=======
+ 	dev->ibdev.driver_id = RDMA_DRIVER_CXGB4;
+ 	ret = ib_register_device(&dev->ibdev, "cxgb4_%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  	if (ret)
  		goto err_kfree_iwcm;
  
diff --cc drivers/infiniband/hw/i40iw/i40iw_verbs.c
index 60e004d2100e,cb2aef874ca8..000000000000
--- a/drivers/infiniband/hw/i40iw/i40iw_verbs.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
@@@ -2927,7 -2895,8 +2926,12 @@@ int i40iw_register_rdma_device(struct i
  		return -ENOMEM;
  	iwibdev = iwdev->iwibdev;
  
++<<<<<<< HEAD
 +	ret = ib_register_device(&iwibdev->ibdev, NULL);
++=======
+ 	iwibdev->ibdev.driver_id = RDMA_DRIVER_I40IW;
+ 	ret = ib_register_device(&iwibdev->ibdev, "i40iw%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  	if (ret)
  		goto error;
  
diff --cc drivers/infiniband/hw/mlx4/main.c
index 4d672cfcddd2,fa5d20eccc21..000000000000
--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@@ -2892,7 -2801,8 +2891,12 @@@ static void *mlx4_ib_add(struct mlx4_de
  	if (mlx4_ib_alloc_diag_counters(ibdev))
  		goto err_steer_free_bitmap;
  
++<<<<<<< HEAD
 +	if (ib_register_device(&ibdev->ib_dev, NULL))
++=======
+ 	ibdev->ib_dev.driver_id = RDMA_DRIVER_MLX4;
+ 	if (ib_register_device(&ibdev->ib_dev, "mlx4_%d", NULL))
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  		goto err_diag_counters;
  
  	if (mlx4_ib_mad_init(ibdev))
diff --cc drivers/infiniband/hw/mthca/mthca_provider.c
index 7759795f66ff,7bd7e2ad17e4..000000000000
--- a/drivers/infiniband/hw/mthca/mthca_provider.c
+++ b/drivers/infiniband/hw/mthca/mthca_provider.c
@@@ -1295,7 -1295,8 +1294,12 @@@ int mthca_register_device(struct mthca_
  
  	mutex_init(&dev->cap_mask_mutex);
  
++<<<<<<< HEAD
 +	ret = ib_register_device(&dev->ib_dev, NULL);
++=======
+ 	dev->ib_dev.driver_id = RDMA_DRIVER_MTHCA;
+ 	ret = ib_register_device(&dev->ib_dev, "mthca%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  	if (ret)
  		return ret;
  
diff --cc drivers/infiniband/hw/nes/nes_verbs.c
index 989ad9f44435,2127cd2f4bec..000000000000
--- a/drivers/infiniband/hw/nes/nes_verbs.c
+++ b/drivers/infiniband/hw/nes/nes_verbs.c
@@@ -3856,7 -3796,8 +3855,12 @@@ int nes_register_ofa_device(struct nes_
  	struct nes_adapter *nesadapter = nesdev->nesadapter;
  	int i, ret;
  
++<<<<<<< HEAD
 +	ret = ib_register_device(&nesvnic->nesibdev->ibdev, NULL);
++=======
+ 	nesvnic->nesibdev->ibdev.driver_id = RDMA_DRIVER_NES;
+ 	ret = ib_register_device(&nesvnic->nesibdev->ibdev, "nes%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  	if (ret) {
  		return ret;
  	}
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_main.c
index 72c190ee9ffd,4d3c27613351..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_main.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_main.c
@@@ -215,7 -212,8 +214,12 @@@ static int ocrdma_register_device(struc
  		dev->ibdev.destroy_srq = ocrdma_destroy_srq;
  		dev->ibdev.post_srq_recv = ocrdma_post_srq_recv;
  	}
++<<<<<<< HEAD
 +	return ib_register_device(&dev->ibdev, NULL);
++=======
+ 	dev->ibdev.driver_id = RDMA_DRIVER_OCRDMA;
+ 	return ib_register_device(&dev->ibdev, "ocrdma%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  }
  
  static int ocrdma_alloc_resources(struct ocrdma_dev *dev)
diff --cc drivers/infiniband/hw/qedr/main.c
index 8f791881e4cb,cd7b8b39a129..000000000000
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@@ -254,7 -261,8 +252,12 @@@ static int qedr_register_device(struct 
  	dev->ibdev.get_link_layer = qedr_link_layer;
  	dev->ibdev.get_dev_fw_str = qedr_get_dev_fw_str;
  
++<<<<<<< HEAD
 +	return ib_register_device(&dev->ibdev, NULL);
++=======
+ 	dev->ibdev.driver_id = RDMA_DRIVER_QEDR;
+ 	return ib_register_device(&dev->ibdev, "qedr%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  }
  
  /* This function allocates fast-path status block memory */
diff --cc drivers/infiniband/hw/usnic/usnic_ib_main.c
index bcca4bd599ef,3b9f12928314..000000000000
--- a/drivers/infiniband/hw/usnic/usnic_ib_main.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_main.c
@@@ -433,7 -414,8 +432,12 @@@ static void *usnic_ib_device_add(struc
  	us_ibdev->ib_dev.get_dev_fw_str     = usnic_get_dev_fw_str;
  
  
++<<<<<<< HEAD
 +	if (ib_register_device(&us_ibdev->ib_dev, NULL))
++=======
+ 	us_ibdev->ib_dev.driver_id = RDMA_DRIVER_USNIC;
+ 	if (ib_register_device(&us_ibdev->ib_dev, "usnic_%d", NULL))
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  		goto err_fwd_dealloc;
  
  	usnic_fwd_set_mtu(us_ibdev->ufdev, us_ibdev->netdev->mtu);
diff --cc drivers/infiniband/sw/rxe/rxe_verbs.c
index 39cef3e024df,e4da5b671e4a..000000000000
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@@ -1327,7 -1259,8 +1326,12 @@@ int rxe_register_device(struct rxe_dev 
  	}
  	rxe->tfm = tfm;
  
++<<<<<<< HEAD
 +	err = ib_register_device(dev, NULL);
++=======
+ 	dev->driver_id = RDMA_DRIVER_RXE;
+ 	err = ib_register_device(dev, "rxe%d", NULL);
++>>>>>>> e349f858d29f (RDMA: Fully setup the device name in ib_register_device)
  	if (err) {
  		pr_warn("%s failed with error %d\n", __func__, err);
  		goto err1;
* Unmerged path drivers/infiniband/hw/hns/hns_roce_main.c
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index 910f35ee49f7..0ecb9408410a 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -171,10 +171,9 @@ static struct ib_device *__ib_device_get_by_name(const char *name)
 	return NULL;
 }
 
-static int alloc_name(char *name)
+static int alloc_name(struct ib_device *ibdev, const char *name)
 {
 	unsigned long *inuse;
-	char buf[IB_DEVICE_NAME_MAX];
 	struct ib_device *device;
 	int i;
 
@@ -183,24 +182,21 @@ static int alloc_name(char *name)
 		return -ENOMEM;
 
 	list_for_each_entry(device, &device_list, core_list) {
-		if (!sscanf(device->name, name, &i))
+		char buf[IB_DEVICE_NAME_MAX];
+
+		if (sscanf(device->name, name, &i) != 1)
 			continue;
 		if (i < 0 || i >= PAGE_SIZE * 8)
 			continue;
 		snprintf(buf, sizeof buf, name, i);
-		if (!strncmp(buf, device->name, IB_DEVICE_NAME_MAX))
+		if (!strcmp(buf, dev_name(&device->dev)))
 			set_bit(i, inuse);
 	}
 
 	i = find_first_zero_bit(inuse, PAGE_SIZE * 8);
 	free_page((unsigned long) inuse);
-	snprintf(buf, sizeof buf, name, i);
-
-	if (__ib_device_get_by_name(buf))
-		return -ENFILE;
 
-	strlcpy(name, buf, IB_DEVICE_NAME_MAX);
-	return 0;
+	return dev_set_name(&ibdev->dev, name, i);
 }
 
 static void ib_device_release(struct device *device)
@@ -455,9 +451,9 @@ static u32 __dev_new_index(void)
  * callback for each device that is added. @device must be allocated
  * with ib_alloc_device().
  */
-int ib_register_device(struct ib_device *device,
-		       int (*port_callback)(struct ib_device *,
-					    u8, struct kobject *))
+int ib_register_device(struct ib_device *device, const char *name,
+		       int (*port_callback)(struct ib_device *, u8,
+					    struct kobject *))
 {
 	int ret;
 	struct ib_client *client;
@@ -496,11 +492,20 @@ int ib_register_device(struct ib_device *device,
 
 	mutex_lock(&device_mutex);
 
-	if (strchr(device->name, '%')) {
-		ret = alloc_name(device->name);
+	if (strchr(name, '%')) {
+		ret = alloc_name(device, name);
+		if (ret)
+			goto out;
+	} else {
+		ret = dev_set_name(&device->dev, name);
 		if (ret)
 			goto out;
 	}
+	if (__ib_device_get_by_name(dev_name(&device->dev))) {
+		ret = -ENFILE;
+		goto out;
+	}
+	strlcpy(device->name, dev_name(&device->dev), IB_DEVICE_NAME_MAX);
 
 	if (ib_device_check_mandatory(device)) {
 		ret = -EINVAL;
* Unmerged path drivers/infiniband/core/sysfs.c
* Unmerged path drivers/infiniband/hw/bnxt_re/main.c
* Unmerged path drivers/infiniband/hw/cxgb3/iwch_provider.c
* Unmerged path drivers/infiniband/hw/cxgb4/provider.c
* Unmerged path drivers/infiniband/hw/hns/hns_roce_main.c
* Unmerged path drivers/infiniband/hw/i40iw/i40iw_verbs.c
* Unmerged path drivers/infiniband/hw/mlx4/main.c
diff --git a/drivers/infiniband/hw/mlx5/main.c b/drivers/infiniband/hw/mlx5/main.c
index 7e6f22b16875..ccbbd9f18308 100644
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@ -4487,7 +4487,6 @@ static void mlx5_ib_stage_init_cleanup(struct mlx5_ib_dev *dev)
 static int mlx5_ib_stage_init_init(struct mlx5_ib_dev *dev)
 {
 	struct mlx5_core_dev *mdev = dev->mdev;
-	const char *name;
 	int err;
 	int i;
 
@@ -4522,12 +4521,6 @@ static int mlx5_ib_stage_init_init(struct mlx5_ib_dev *dev)
 	if (mlx5_use_mad_ifc(dev))
 		get_ext_port_caps(dev);
 
-	if (!mlx5_lag_is_active(mdev))
-		name = "mlx5_%d";
-	else
-		name = "mlx5_bond_%d";
-
-	strlcpy(dev->ib_dev.name, name, IB_DEVICE_NAME_MAX);
 	dev->ib_dev.owner		= THIS_MODULE;
 	dev->ib_dev.node_type		= RDMA_NODE_IB_CA;
 	dev->ib_dev.local_dma_lkey	= 0 /* not supported for now */;
@@ -4834,7 +4827,13 @@ static void mlx5_ib_stage_bfrag_cleanup(struct mlx5_ib_dev *dev)
 
 static int mlx5_ib_stage_ib_reg_init(struct mlx5_ib_dev *dev)
 {
-	return ib_register_device(&dev->ib_dev, NULL);
+	const char *name;
+
+	if (!mlx5_lag_is_active(dev->mdev))
+		name = "mlx5_%d";
+	else
+		name = "mlx5_bond_%d";
+	return ib_register_device(&dev->ib_dev, name, NULL);
 }
 
 static void mlx5_ib_stage_pre_ib_reg_umr_cleanup(struct mlx5_ib_dev *dev)
* Unmerged path drivers/infiniband/hw/mthca/mthca_provider.c
* Unmerged path drivers/infiniband/hw/nes/nes_verbs.c
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_main.c
* Unmerged path drivers/infiniband/hw/qedr/main.c
* Unmerged path drivers/infiniband/hw/usnic/usnic_ib_main.c
diff --git a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
index f493046158a6..985997a7737f 100644
--- a/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
+++ b/drivers/infiniband/hw/vmw_pvrdma/pvrdma_main.c
@@ -171,7 +171,6 @@ static int pvrdma_register_device(struct pvrdma_dev *dev)
 	int ret = -1;
 	int i = 0;
 
-	strlcpy(dev->ib_dev.name, "vmw_pvrdma%d", IB_DEVICE_NAME_MAX);
 	dev->ib_dev.node_guid = dev->dsr->caps.node_guid;
 	dev->sys_image_guid = dev->dsr->caps.sys_image_guid;
 	dev->flags = 0;
@@ -278,7 +277,7 @@ static int pvrdma_register_device(struct pvrdma_dev *dev)
 	}
 	spin_lock_init(&dev->srq_tbl_lock);
 
-	ret = ib_register_device(&dev->ib_dev, NULL);
+	ret = ib_register_device(&dev->ib_dev, "vmw_pvrdma%d", NULL);
 	if (ret)
 		goto err_srq_free;
 
diff --git a/drivers/infiniband/sw/rdmavt/vt.c b/drivers/infiniband/sw/rdmavt/vt.c
index 1dd5bf2fe602..2f2f75e2d87b 100644
--- a/drivers/infiniband/sw/rdmavt/vt.c
+++ b/drivers/infiniband/sw/rdmavt/vt.c
@@ -832,7 +832,8 @@ int rvt_register_device(struct rvt_dev_info *rdi)
 	rdi->ibdev.num_comp_vectors = 1;
 
 	/* We are now good to announce we exist */
-	ret =  ib_register_device(&rdi->ibdev, rdi->driver_f.port_callback);
+	ret = ib_register_device(&rdi->ibdev, dev_name(&rdi->ibdev.dev),
+				 rdi->driver_f.port_callback);
 	if (ret) {
 		rvt_pr_err(rdi, "Failed to register driver with ib core.\n");
 		goto bail_cq;
* Unmerged path drivers/infiniband/sw/rxe/rxe_verbs.c
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index b950ea239071..dad30574db6f 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -2545,9 +2545,9 @@ void ib_dealloc_device(struct ib_device *device);
 
 void ib_get_device_fw_str(struct ib_device *device, char *str);
 
-int ib_register_device(struct ib_device *device,
-		       int (*port_callback)(struct ib_device *,
-					    u8, struct kobject *));
+int ib_register_device(struct ib_device *device, const char *name,
+		       int (*port_callback)(struct ib_device *, u8,
+					    struct kobject *));
 void ib_unregister_device(struct ib_device *device);
 
 int ib_register_client   (struct ib_client *client);
diff --git a/include/rdma/rdma_vt.h b/include/rdma/rdma_vt.h
index 4118324a0310..237b9118cb69 100644
--- a/include/rdma/rdma_vt.h
+++ b/include/rdma/rdma_vt.h
@@ -422,7 +422,14 @@ static inline void rvt_set_ibdev_name(struct rvt_dev_info *rdi,
 				      const char *fmt, const char *name,
 				      const int unit)
 {
-	snprintf(rdi->ibdev.name, sizeof(rdi->ibdev.name), fmt, name, unit);
+	/*
+	 * FIXME: rvt and its users want to touch the ibdev before
+	 * registration and have things like the name work. We don't have the
+	 * infrastructure in the core to support this directly today, hack it
+	 * to work by setting the name manually here.
+	 */
+	dev_set_name(&rdi->ibdev.dev, fmt, name, unit);
+	strlcpy(rdi->ibdev.name, dev_name(&rdi->ibdev.dev), IB_DEVICE_NAME_MAX);
 }
 
 /**
