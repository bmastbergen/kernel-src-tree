net/mlx5e: IPOIB, Fix overflowing SQ WQE memset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: IPOIB, Fix overflowing SQ WQE memset (Alaa Hleihel) [1641354 1642498]
Rebuild_FUZZ: 95.56%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 4b3e85a52ae4ea516fe297acad32872bc13bf620
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4b3e85a5.failed

IPoIB WQE size is larger than a single WQEBB.  Must not fetch the WQE,
and surely not memset it, until it is guaranteed that there are enough
WQEBBs available before getting to SQ/frag edge.

Fixes: 043dc78ecf07 ("net/mlx5e: TX, Use actual WQE size for SQ edge fill")
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 4b3e85a52ae4ea516fe297acad32872bc13bf620)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index 31cc86df395a,9829ee02de31..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@@ -604,25 -646,25 +604,30 @@@ netdev_tx_t mlx5i_sq_xmit(struct mlx5e_
  	struct mlx5e_sq_stats *stats = sq->stats;
  	unsigned char *skb_data = skb->data;
  	unsigned int skb_len = skb->len;
 -	u16 headlen, ihs, pi, frag_pi;
 -	u16 ds_cnt, ds_cnt_inl = 0;
 -	u8 num_wqebbs, opcode;
 -	u32 num_bytes;
 +	u8  opcode = MLX5_OPCODE_SEND;
 +	unsigned int num_bytes;
  	int num_dma;
 -	__be16 mss;
 +	u16 headlen;
 +	u16 ds_cnt;
 +	u16 ihs;
  
++<<<<<<< HEAD
 +	memset(wqe, 0, sizeof(*wqe));
 +
 +	mlx5i_txwqe_build_datagram(av, dqpn, dqkey, datagram);
 +
 +	mlx5e_txwqe_build_eseg_csum(sq, skb, eseg);
 +
++=======
+ 	/* Calc ihs and ds cnt, no writes to wqe yet */
+ 	ds_cnt = sizeof(*wqe) / MLX5_SEND_WQE_DS;
++>>>>>>> 4b3e85a52ae4 (net/mlx5e: IPOIB, Fix overflowing SQ WQE memset)
  	if (skb_is_gso(skb)) {
 -		opcode    = MLX5_OPCODE_LSO;
 -		mss       = cpu_to_be16(skb_shinfo(skb)->gso_size);
 -		ihs       = mlx5e_tx_get_gso_ihs(sq, skb);
 -		num_bytes = skb->len + (skb_shinfo(skb)->gso_segs - 1) * ihs;
 +		opcode = MLX5_OPCODE_LSO;
 +		ihs = mlx5e_txwqe_build_eseg_gso(sq, skb, eseg, &num_bytes);
  		stats->packets += skb_shinfo(skb)->gso_segs;
  	} else {
 -		opcode    = MLX5_OPCODE_SEND;
 -		mss       = 0;
 -		ihs       = mlx5e_calc_min_inline(sq->min_inline_mode, skb);
 +		ihs = mlx5e_calc_min_inline(sq->min_inline_mode, skb);
  		num_bytes = max_t(unsigned int, skb->len, ETH_ZLEN);
  		stats->packets++;
  	}
@@@ -630,22 -672,49 +635,56 @@@
  	stats->bytes     += num_bytes;
  	stats->xmit_more += skb->xmit_more;
  
++<<<<<<< HEAD
 +	ds_cnt = sizeof(*wqe) / MLX5_SEND_WQE_DS;
++=======
+ 	headlen = skb_len - ihs - skb->data_len;
+ 	ds_cnt += !!headlen;
+ 	ds_cnt += skb_shinfo(skb)->nr_frags;
+ 
+ 	if (ihs) {
+ 		ds_cnt_inl = DIV_ROUND_UP(ihs - INL_HDR_START_SZ, MLX5_SEND_WQE_DS);
+ 		ds_cnt += ds_cnt_inl;
+ 	}
+ 
+ 	num_wqebbs = DIV_ROUND_UP(ds_cnt, MLX5_SEND_WQEBB_NUM_DS);
+ 	frag_pi = mlx5_wq_cyc_ctr2fragix(wq, sq->pc);
+ 	if (unlikely(frag_pi + num_wqebbs > mlx5_wq_cyc_get_frag_size(wq))) {
+ 		pi = mlx5_wq_cyc_ctr2ix(wq, sq->pc);
+ 		mlx5e_fill_sq_frag_edge(sq, wq, pi, frag_pi);
+ 	}
+ 
+ 	mlx5i_sq_fetch_wqe(sq, &wqe, &pi);
+ 
+ 	/* fill wqe */
+ 	wi       = &sq->db.wqe_info[pi];
+ 	cseg     = &wqe->ctrl;
+ 	datagram = &wqe->datagram;
+ 	eseg     = &wqe->eth;
+ 	dseg     =  wqe->data;
+ 
+ 	mlx5i_txwqe_build_datagram(av, dqpn, dqkey, datagram);
+ 
+ 	mlx5e_txwqe_build_eseg_csum(sq, skb, eseg);
+ 
+ 	eseg->mss = mss;
+ 
++>>>>>>> 4b3e85a52ae4 (net/mlx5e: IPOIB, Fix overflowing SQ WQE memset)
  	if (ihs) {
  		memcpy(eseg->inline_hdr.start, skb_data, ihs);
 +		mlx5e_tx_skb_pull_inline(&skb_data, &skb_len, ihs);
  		eseg->inline_hdr.sz = cpu_to_be16(ihs);
 -		dseg += ds_cnt_inl;
 +		ds_cnt += DIV_ROUND_UP(ihs - sizeof(eseg->inline_hdr.start), MLX5_SEND_WQE_DS);
  	}
  
 -	num_dma = mlx5e_txwqe_build_dsegs(sq, skb, skb_data, headlen, dseg);
 +	headlen = skb_len - skb->data_len;
 +	num_dma = mlx5e_txwqe_build_dsegs(sq, skb, skb_data, headlen,
 +					  (struct mlx5_wqe_data_seg *)cseg + ds_cnt);
  	if (unlikely(num_dma < 0))
 -		goto err_drop;
 +		goto dma_unmap_wqe_err;
  
 -	mlx5e_txwqe_complete(sq, skb, opcode, ds_cnt, num_wqebbs, num_bytes,
 -			     num_dma, wi, cseg);
 +	mlx5e_txwqe_complete(sq, skb, opcode, ds_cnt + num_dma,
 +			     num_bytes, num_dma, wi, cseg);
  
  	return NETDEV_TX_OK;
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
