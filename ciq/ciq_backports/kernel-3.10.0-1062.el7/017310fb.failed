ALSA: hda/ca0132: Add DSP Volume set and New mixers for SBZ + R3Di

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Connor McAdams <conmanx360@gmail.com>
commit 017310fbe7670f522cdde4e68d4e1859f16d2757
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/017310fb.failed

Adds lookup table for floating point decibel volume, and new functions
to allow for setting the decibel level on the DSP.

	Signed-off-by: Connor McAdams <conmanx360@gmail.com>
	Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 017310fbe7670f522cdde4e68d4e1859f16d2757)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,394e604c3787..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -477,6 -498,74 +477,77 @@@ static struct ct_voicefx_preset ca0132_
  	}
  };
  
++<<<<<<< HEAD
++=======
+ /* DSP command sequences for ca0132_alt_select_out */
+ #define ALT_OUT_SET_MAX_COMMANDS 9 /* Max number of commands in sequence */
+ struct ca0132_alt_out_set {
+ 	char *name; /*preset name*/
+ 	unsigned char commands;
+ 	unsigned int mids[ALT_OUT_SET_MAX_COMMANDS];
+ 	unsigned int reqs[ALT_OUT_SET_MAX_COMMANDS];
+ 	unsigned int vals[ALT_OUT_SET_MAX_COMMANDS];
+ };
+ 
+ static const struct ca0132_alt_out_set alt_out_presets[] = {
+ 	{ .name = "Line Out",
+ 	  .commands = 7,
+ 	  .mids = { 0x96, 0x96, 0x96, 0x8F,
+ 		    0x96, 0x96, 0x96 },
+ 	  .reqs = { 0x19, 0x17, 0x18, 0x01,
+ 		    0x1F, 0x15, 0x3A },
+ 	  .vals = { 0x3F000000, 0x42A00000, 0x00000000,
+ 		    0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000 }
+ 	},
+ 	{ .name = "Headphone",
+ 	  .commands = 7,
+ 	  .mids = { 0x96, 0x96, 0x96, 0x8F,
+ 		    0x96, 0x96, 0x96 },
+ 	  .reqs = { 0x19, 0x17, 0x18, 0x01,
+ 		    0x1F, 0x15, 0x3A },
+ 	  .vals = { 0x3F000000, 0x42A00000, 0x00000000,
+ 		    0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000 }
+ 	},
+ 	{ .name = "Surround",
+ 	  .commands = 8,
+ 	  .mids = { 0x96, 0x8F, 0x96, 0x96,
+ 		    0x96, 0x96, 0x96, 0x96 },
+ 	  .reqs = { 0x18, 0x01, 0x1F, 0x15,
+ 		    0x3A, 0x1A, 0x1B, 0x1C },
+ 	  .vals = { 0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000, 0x00000000 }
+ 	}
+ };
+ 
+ /*
+  * DSP volume setting structs. Req 1 is left volume, req 2 is right volume,
+  * and I don't know what the third req is, but it's always zero. I assume it's
+  * some sort of update or set command to tell the DSP there's new volume info.
+  */
+ #define DSP_VOL_OUT 0
+ #define DSP_VOL_IN  1
+ 
+ struct ct_dsp_volume_ctl {
+ 	hda_nid_t vnid;
+ 	int mid; /* module ID*/
+ 	unsigned int reqs[3]; /* scp req ID */
+ };
+ 
+ static struct ct_dsp_volume_ctl ca0132_alt_vol_ctls[] = {
+ 	{ .vnid = VNID_SPK,
+ 	  .mid = 0x32,
+ 	  .reqs = {3, 4, 2}
+ 	},
+ 	{ .vnid = VNID_MIC,
+ 	  .mid = 0x37,
+ 	  .reqs = {2, 3, 1}
+ 	}
+ };
+ 
++>>>>>>> 017310fbe767 (ALSA: hda/ca0132: Add DSP Volume set and New mixers for SBZ + R3Di)
  enum hda_cmd_vendor_io {
  	/* for DspIO node */
  	VENDOR_DSPIO_SCP_WRITE_DATA_LOW      = 0x000,
@@@ -2910,7 -3312,36 +3001,40 @@@ static unsigned int ca0132_capture_pcm_
  #define CA0132_CODEC_MUTE(xname, nid, dir) \
  	CA0132_CODEC_MUTE_MONO(xname, nid, 3, dir)
  
++<<<<<<< HEAD
 +/* The followings are for tuning of products */
++=======
+ /* lookup tables */
+ /*
+  * Lookup table with decibel values for the DSP. When volume is changed in
+  * Windows, the DSP is also sent the dB value in floating point. In Windows,
+  * these values have decimal points, probably because the Windows driver
+  * actually uses floating point. We can't here, so I made a lookup table of
+  * values -90 to 9. -90 is the lowest decibel value for both the ADC's and the
+  * DAC's, and 9 is the maximum.
+  */
+ static const unsigned int float_vol_db_lookup[] = {
+ 0xC2B40000, 0xC2B20000, 0xC2B00000, 0xC2AE0000, 0xC2AC0000, 0xC2AA0000,
+ 0xC2A80000, 0xC2A60000, 0xC2A40000, 0xC2A20000, 0xC2A00000, 0xC29E0000,
+ 0xC29C0000, 0xC29A0000, 0xC2980000, 0xC2960000, 0xC2940000, 0xC2920000,
+ 0xC2900000, 0xC28E0000, 0xC28C0000, 0xC28A0000, 0xC2880000, 0xC2860000,
+ 0xC2840000, 0xC2820000, 0xC2800000, 0xC27C0000, 0xC2780000, 0xC2740000,
+ 0xC2700000, 0xC26C0000, 0xC2680000, 0xC2640000, 0xC2600000, 0xC25C0000,
+ 0xC2580000, 0xC2540000, 0xC2500000, 0xC24C0000, 0xC2480000, 0xC2440000,
+ 0xC2400000, 0xC23C0000, 0xC2380000, 0xC2340000, 0xC2300000, 0xC22C0000,
+ 0xC2280000, 0xC2240000, 0xC2200000, 0xC21C0000, 0xC2180000, 0xC2140000,
+ 0xC2100000, 0xC20C0000, 0xC2080000, 0xC2040000, 0xC2000000, 0xC1F80000,
+ 0xC1F00000, 0xC1E80000, 0xC1E00000, 0xC1D80000, 0xC1D00000, 0xC1C80000,
+ 0xC1C00000, 0xC1B80000, 0xC1B00000, 0xC1A80000, 0xC1A00000, 0xC1980000,
+ 0xC1900000, 0xC1880000, 0xC1800000, 0xC1700000, 0xC1600000, 0xC1500000,
+ 0xC1400000, 0xC1300000, 0xC1200000, 0xC1100000, 0xC1000000, 0xC0E00000,
+ 0xC0C00000, 0xC0A00000, 0xC0800000, 0xC0400000, 0xC0000000, 0xBF800000,
+ 0x00000000, 0x3F800000, 0x40000000, 0x40400000, 0x40800000, 0x40A00000,
+ 0x40C00000, 0x40E00000, 0x41000000, 0x41100000
+ };
+ 
+ /* The following are for tuning of products */
++>>>>>>> 017310fbe767 (ALSA: hda/ca0132: Add DSP Volume set and New mixers for SBZ + R3Di)
  #ifdef ENABLE_TUNING_CONTROLS
  
  static unsigned int voice_focus_vals_lookup[] = {
@@@ -5086,8 -6753,33 +5323,22 @@@ static int patch_ca0132(struct hda_code
  
  	spec->dsp_state = DSP_DOWNLOAD_INIT;
  	spec->num_mixers = 1;
- 	spec->mixers[0] = ca0132_mixer;
+ 
+ 	/* Set which mixers each quirk uses. */
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		spec->mixers[0] = sbz_mixer;
+ 		snd_hda_codec_set_name(codec, "Sound Blaster Z");
+ 		break;
+ 	case QUIRK_R3DI:
+ 		spec->mixers[0] = r3di_mixer;
+ 		snd_hda_codec_set_name(codec, "Recon3Di");
+ 		break;
+ 	default:
+ 		spec->mixers[0] = ca0132_mixer;
+ 		break;
+ 	}
  
 -	/* Setup whether or not to use alt functions */
 -	switch (spec->quirk) {
 -	case QUIRK_SBZ:
 -	case QUIRK_R3DI:
 -		spec->use_alt_functions = true;
 -		break;
 -	default:
 -		spec->use_alt_functions = false;
 -		break;
 -	}
 -
  	spec->base_init_verbs = ca0132_base_init_verbs;
  	spec->base_exit_verbs = ca0132_base_exit_verbs;
  
* Unmerged path sound/pci/hda/patch_ca0132.c
