scsi: mpt3sas: Introduce function to clone mpi request.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: Introduce function to clone mpi request (Tomas Henzl) [1513855]
Rebuild_FUZZ: 93.20%
commit-author Suganath Prabu Subramani <suganath-prabu.subramani@broadcom.com>
commit e5747439366c1079257083f231f5dd9a84bf0fd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e5747439.failed

1) Added function _base_clone_mpi_to_sys_mem to clone
MPI request into system BAR0 mapped region.

2) Separate out MPI Endpoint IO submissions to function
_base_put_smid_mpi_ep_scsi_io.

3) MPI EP requests are submitted in two 32 bit MMIO writes.
from _base_mpi_ep_writeq.

 For 32 bit Arch,_base_writeq function is identical
to _base_mpi_ep_writeq, Removed duplicate code as suggested.

	Signed-off-by: Suganath Prabu S <suganath-prabu.subramani@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e5747439366c1079257083f231f5dd9a84bf0fd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.c
index 2d5e2fd11ddb,bb2f2a4156a9..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@@ -125,6 -126,43 +125,46 @@@ module_param_call(mpt3sas_fwfault_debug
  	param_get_int, &mpt3sas_fwfault_debug, 0644);
  
  /**
++<<<<<<< HEAD
++=======
+  * _base_clone_mpi_to_sys_mem - Writes/copies MPI frames
+  *				to system/BAR0 region.
+  *
+  * @dst_iomem: Pointer to the destinaltion location in BAR0 space.
+  * @src: Pointer to the Source data.
+  * @size: Size of data to be copied.
+  */
+ static void
+ _base_clone_mpi_to_sys_mem(void *dst_iomem, void *src, u32 size)
+ {
+ 	int i;
+ 	u32 *src_virt_mem = (u32 *)src;
+ 
+ 	for (i = 0; i < size/4; i++)
+ 		writel((u32)src_virt_mem[i],
+ 				(void __iomem *)dst_iomem + (i * 4));
+ }
+ 
+ /**
+  * _base_clone_to_sys_mem - Writes/copies data to system/BAR0 region
+  *
+  * @dst_iomem: Pointer to the destination location in BAR0 space.
+  * @src: Pointer to the Source data.
+  * @size: Size of data to be copied.
+  */
+ static void
+ _base_clone_to_sys_mem(void __iomem *dst_iomem, void *src, u32 size)
+ {
+ 	int i;
+ 	u32 *src_virt_mem = (u32 *)(src);
+ 
+ 	for (i = 0; i < size/4; i++)
+ 		writel((u32)src_virt_mem[i],
+ 			(void __iomem *)dst_iomem + (i * 4));
+ }
+ 
+ /**
++>>>>>>> e5747439366c (scsi: mpt3sas: Introduce function to clone mpi request.)
   * _base_get_chain - Calculates and Returns virtual chain address
   *			 for the provided smid in BAR0 space.
   *
@@@ -2683,12 -3466,50 +2791,27 @@@ mpt3sas_base_put_smid_hi_priority(struc
   *
   * Return nothing.
   */
 -static void
 -_base_put_smid_nvme_encap(struct MPT3SAS_ADAPTER *ioc, u16 smid)
 -{
 -	Mpi2RequestDescriptorUnion_t descriptor;
 -	u64 *request = (u64 *)&descriptor;
 -
 -	descriptor.Default.RequestFlags =
 -		MPI26_REQ_DESCRIPT_FLAGS_PCIE_ENCAPSULATED;
 -	descriptor.Default.MSIxIndex =  _base_get_msix_index(ioc);
 -	descriptor.Default.SMID = cpu_to_le16(smid);
 -	descriptor.Default.LMID = 0;
 -	descriptor.Default.DescriptorTypeDependent = 0;
 -	_base_writeq(*request, &ioc->chip->RequestDescriptorPostLow,
 -	    &ioc->scsi_lookup_lock);
 -}
 -
 -/**
 - * _base_put_smid_default - Default, primarily used for config pages
 - * @ioc: per adapter object
 - * @smid: system request message index
 - *
 - * Return nothing.
 - */
 -static void
 -_base_put_smid_default(struct MPT3SAS_ADAPTER *ioc, u16 smid)
 +void
 +mpt3sas_base_put_smid_default(struct MPT3SAS_ADAPTER *ioc, u16 smid)
  {
  	Mpi2RequestDescriptorUnion_t descriptor;
- 	u64 *request = (u64 *)&descriptor;
+ 	void *mpi_req_iomem;
+ 	u64 *request;
+ 	MPI2RequestHeader_t *request_hdr;
+ 
+ 	if (ioc->is_mcpu_endpoint) {
+ 		__le32 *mfp = (__le32 *)mpt3sas_base_get_msg_frame(ioc, smid);
+ 
+ 		request_hdr = (MPI2RequestHeader_t *)mfp;
  
+ 		_clone_sg_entries(ioc, (void *) mfp, smid);
+ 		/* TBD 256 is offset within sys register */
+ 		mpi_req_iomem = (void *)ioc->chip +
+ 			MPI_FRAME_START_OFFSET + (smid * ioc->request_sz);
+ 		_base_clone_mpi_to_sys_mem(mpi_req_iomem, (void *)mfp,
+ 							ioc->request_sz);
+ 	}
+ 	request = (u64 *)&descriptor;
  	descriptor.Default.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_DEFAULT_TYPE;
  	descriptor.Default.MSIxIndex =  _base_get_msix_index(ioc);
  	descriptor.Default.SMID = cpu_to_le16(smid);
@@@ -2699,6 -3525,116 +2827,119 @@@
  }
  
  /**
++<<<<<<< HEAD
++=======
+ * _base_put_smid_scsi_io_atomic - send SCSI_IO request to firmware using
+ *   Atomic Request Descriptor
+ * @ioc: per adapter object
+ * @smid: system request message index
+ * @handle: device handle, unused in this function, for function type match
+ *
+ * Return nothing.
+ */
+ static void
+ _base_put_smid_scsi_io_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid,
+ 	u16 handle)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_SCSI_IO;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_fast_path_atomic - send fast path request to firmware
+  * using Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  * @handle: device handle, unused in this function, for function type match
+  * Return nothing
+  */
+ static void
+ _base_put_smid_fast_path_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid,
+ 	u16 handle)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI25_REQ_DESCRIPT_FLAGS_FAST_PATH_SCSI_IO;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_hi_priority_atomic - send Task Management request to
+  * firmware using Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  * @msix_task: msix_task will be same as msix of IO incase of task abort else 0
+  *
+  * Return nothing.
+  */
+ static void
+ _base_put_smid_hi_priority_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid,
+ 	u16 msix_task)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_HIGH_PRIORITY;
+ 	descriptor.MSIxIndex = msix_task;
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_nvme_encap_atomic - send NVMe encapsulated request to
+  *   firmware using Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  *
+  * Return nothing.
+  */
+ static void
+ _base_put_smid_nvme_encap_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI26_REQ_DESCRIPT_FLAGS_PCIE_ENCAPSULATED;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
+  * _base_put_smid_default - Default, primarily used for config pages
+  * use Atomic Request Descriptor
+  * @ioc: per adapter object
+  * @smid: system request message index
+  *
+  * Return nothing.
+  */
+ static void
+ _base_put_smid_default_atomic(struct MPT3SAS_ADAPTER *ioc, u16 smid)
+ {
+ 	Mpi26AtomicRequestDescriptor_t descriptor;
+ 	u32 *request = (u32 *)&descriptor;
+ 
+ 	descriptor.RequestFlags = MPI2_REQ_DESCRIPT_FLAGS_DEFAULT_TYPE;
+ 	descriptor.MSIxIndex = _base_get_msix_index(ioc);
+ 	descriptor.SMID = cpu_to_le16(smid);
+ 
+ 	writel(cpu_to_le32(*request), &ioc->chip->AtomicRequestDescriptorPost);
+ }
+ 
+ /**
++>>>>>>> e5747439366c (scsi: mpt3sas: Introduce function to clone mpi request.)
   * _base_display_OEMs_branding - Display branding string
   * @ioc: per adapter object
   *
@@@ -5432,7 -6432,23 +5673,27 @@@ mpt3sas_base_attach(struct MPT3SAS_ADAP
  		break;
  	}
  
++<<<<<<< HEAD
 +	ioc->put_smid_scsi_io = &_base_put_smid_scsi_io;
++=======
+ 	if (ioc->atomic_desc_capable) {
+ 		ioc->put_smid_default = &_base_put_smid_default_atomic;
+ 		ioc->put_smid_scsi_io = &_base_put_smid_scsi_io_atomic;
+ 		ioc->put_smid_fast_path = &_base_put_smid_fast_path_atomic;
+ 		ioc->put_smid_hi_priority = &_base_put_smid_hi_priority_atomic;
+ 		ioc->put_smid_nvme_encap = &_base_put_smid_nvme_encap_atomic;
+ 	} else {
+ 		ioc->put_smid_default = &_base_put_smid_default;
+ 		if (ioc->is_mcpu_endpoint)
+ 			ioc->put_smid_scsi_io = &_base_put_smid_mpi_ep_scsi_io;
+ 		else
+ 			ioc->put_smid_scsi_io = &_base_put_smid_scsi_io;
+ 		ioc->put_smid_fast_path = &_base_put_smid_fast_path;
+ 		ioc->put_smid_hi_priority = &_base_put_smid_hi_priority;
+ 		ioc->put_smid_nvme_encap = &_base_put_smid_nvme_encap;
+ 	}
+ 
++>>>>>>> e5747439366c (scsi: mpt3sas: Introduce function to clone mpi request.)
  
  	/*
  	 * These function pointers for other requests that don't
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.c
