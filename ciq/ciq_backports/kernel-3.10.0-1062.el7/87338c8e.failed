bpf, ppc64: do not reload skb pointers in non-skb context

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 87338c8e2cbb317b5f757e6172f94e2e3799cd20
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/87338c8e.failed

The assumption of unconditionally reloading skb pointers on
BPF helper calls where bpf_helper_changes_pkt_data() holds
true is wrong. There can be different contexts where the helper
would enforce a reload such as in case of XDP. Here, we do
have a struct xdp_buff instead of struct sk_buff as context,
thus this will access garbage.

JITs only ever need to deal with cached skb pointer reload
when ld_abs/ind was seen, therefore guard the reload behind
SEEN_SKB.

Fixes: 156d0e290e96 ("powerpc/ebpf/jit: Implement JIT compiler for extended BPF")
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Tested-by: Sandipan Das <sandipan@linux.vnet.ibm.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 87338c8e2cbb317b5f757e6172f94e2e3799cd20)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/net/bpf_jit_comp64.c
* Unmerged path arch/powerpc/net/bpf_jit_comp64.c
* Unmerged path arch/powerpc/net/bpf_jit_comp64.c
