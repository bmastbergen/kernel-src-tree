net: Add netif_is_gretap()/netif_is_ip6gretap()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [net] Add netif_is_gretap()/netif_is_ip6gretap() (Petr Oros) [1660901]
Rebuild_FUZZ: 94.38%
commit-author Oz Shlomo <ozsh@mellanox.com>
commit 0621e6fc5ed2b6e58a2ba6904074e366f290b1d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0621e6fc.failed

Changed the is_gretap_dev and is_ip6gretap_dev logic from structure
comparison to string comparison of the rtnl_link_ops kind field.

This approach aligns with the current identification methods and function
names of vxlan and geneve network devices.

Convert mlxsw to use these helpers and use them in downstream mlx5 patch.

	Signed-off-by: Oz Shlomo <ozsh@mellanox.com>
	Reviewed-by: Eli Britstein <elibr@mellanox.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 0621e6fc5ed2b6e58a2ba6904074e366f290b1d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_gre.c
diff --cc net/ipv6/ip6_gre.c
index 6d65f9b02d00,229e55c99021..000000000000
--- a/net/ipv6/ip6_gre.c
+++ b/net/ipv6/ip6_gre.c
@@@ -1296,18 -1885,45 +1296,57 @@@ static void ip6gre_tap_setup(struct net
  	netif_keep_dst(dev);
  }
  
++<<<<<<< HEAD
 +bool is_ip6gretap_dev(const struct net_device *dev)
 +{
 +	return dev->netdev_ops == &ip6gre_tap_netdev_ops;
 +}
 +EXPORT_SYMBOL_GPL(is_ip6gretap_dev);
 +
 +static int ip6gre_newlink(struct net *src_net, struct net_device *dev,
 +	struct nlattr *tb[], struct nlattr *data[])
++=======
+ static bool ip6gre_netlink_encap_parms(struct nlattr *data[],
+ 				       struct ip_tunnel_encap *ipencap)
+ {
+ 	bool ret = false;
+ 
+ 	memset(ipencap, 0, sizeof(*ipencap));
+ 
+ 	if (!data)
+ 		return ret;
+ 
+ 	if (data[IFLA_GRE_ENCAP_TYPE]) {
+ 		ret = true;
+ 		ipencap->type = nla_get_u16(data[IFLA_GRE_ENCAP_TYPE]);
+ 	}
+ 
+ 	if (data[IFLA_GRE_ENCAP_FLAGS]) {
+ 		ret = true;
+ 		ipencap->flags = nla_get_u16(data[IFLA_GRE_ENCAP_FLAGS]);
+ 	}
+ 
+ 	if (data[IFLA_GRE_ENCAP_SPORT]) {
+ 		ret = true;
+ 		ipencap->sport = nla_get_be16(data[IFLA_GRE_ENCAP_SPORT]);
+ 	}
+ 
+ 	if (data[IFLA_GRE_ENCAP_DPORT]) {
+ 		ret = true;
+ 		ipencap->dport = nla_get_be16(data[IFLA_GRE_ENCAP_DPORT]);
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int ip6gre_newlink_common(struct net *src_net, struct net_device *dev,
+ 				 struct nlattr *tb[], struct nlattr *data[],
+ 				 struct netlink_ext_ack *extack)
++>>>>>>> 0621e6fc5ed2 (net: Add netif_is_gretap()/netif_is_ip6gretap())
  {
  	struct ip6_tnl *nt;
 -	struct ip_tunnel_encap ipencap;
 +	struct net *net = dev_net(dev);
 +	struct ip6gre_net *ign = net_generic(net, ip6gre_net_id);
  	int err;
  
  	nt = netdev_priv(dev);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
index 976da8fc30e9..e35caa864f3e 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_span.c
@@ -287,7 +287,7 @@ mlxsw_sp_span_entry_gretap4_deconfigure(struct mlxsw_sp_span_entry *span_entry)
 }
 
 static const struct mlxsw_sp_span_entry_ops mlxsw_sp_span_entry_ops_gretap4 = {
-	.can_handle = is_gretap_dev,
+	.can_handle = netif_is_gretap,
 	.parms = mlxsw_sp_span_entry_gretap4_parms,
 	.configure = mlxsw_sp_span_entry_gretap4_configure,
 	.deconfigure = mlxsw_sp_span_entry_gretap4_deconfigure,
@@ -386,7 +386,7 @@ mlxsw_sp_span_entry_gretap6_deconfigure(struct mlxsw_sp_span_entry *span_entry)
 
 static const
 struct mlxsw_sp_span_entry_ops mlxsw_sp_span_entry_ops_gretap6 = {
-	.can_handle = is_ip6gretap_dev,
+	.can_handle = netif_is_ip6gretap,
 	.parms = mlxsw_sp_span_entry_gretap6_parms,
 	.configure = mlxsw_sp_span_entry_gretap6_configure,
 	.deconfigure = mlxsw_sp_span_entry_gretap6_deconfigure,
diff --git a/include/net/gre.h b/include/net/gre.h
index 67403a1f566c..bcdcc7b93097 100644
--- a/include/net/gre.h
+++ b/include/net/gre.h
@@ -35,8 +35,17 @@ struct net_device *gretap_fb_dev_create(struct net *net, const char *name);
 int gre_parse_header(struct sk_buff *skb, struct tnl_ptk_info *tpi,
 		     bool *csum_err, __be16 proto, int nhs);
 
-bool is_gretap_dev(const struct net_device *dev);
-bool is_ip6gretap_dev(const struct net_device *dev);
+static inline bool netif_is_gretap(const struct net_device *dev)
+{
+	return dev->rtnl_link_ops &&
+	       !strcmp(dev->rtnl_link_ops->kind, "gretap");
+}
+
+static inline bool netif_is_ip6gretap(const struct net_device *dev)
+{
+	return dev->rtnl_link_ops &&
+	       !strcmp(dev->rtnl_link_ops->kind, "ip6gretap");
+}
 
 static inline int gre_calc_hlen(__be16 o_flags)
 {
diff --git a/net/ipv4/ip_gre.c b/net/ipv4/ip_gre.c
index e1878d74a2e6..4ffb155faf7c 100644
--- a/net/ipv4/ip_gre.c
+++ b/net/ipv4/ip_gre.c
@@ -977,12 +977,6 @@ static void ipgre_tap_setup(struct net_device *dev)
 	ip_tunnel_setup(dev, gre_tap_net_id);
 }
 
-bool is_gretap_dev(const struct net_device *dev)
-{
-	return dev->netdev_ops == &gre_tap_netdev_ops;
-}
-EXPORT_SYMBOL_GPL(is_gretap_dev);
-
 static int ipgre_newlink(struct net *src_net, struct net_device *dev,
 			 struct nlattr *tb[], struct nlattr *data[])
 {
* Unmerged path net/ipv6/ip6_gre.c
