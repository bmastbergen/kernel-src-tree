RDMA/core: Constify dst_addr argument

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Parav Pandit <parav@mellanox.com>
commit 2df7dba855e10cca8eddcd38bca825446ea10e1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/2df7dba8.failed

Following APIs are not supposed to modify addr or dest_addr contents.
Therefore make those function argument const for better code
readability.

1. rdma_resolve_ip()
2. rdma_addr_size()
3. rdma_resolve_addr()

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 2df7dba855e10cca8eddcd38bca825446ea10e1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/addr.c
#	include/rdma/ib_addr.h
diff --cc drivers/infiniband/core/addr.c
index 1858d68cc98f,46b855a42884..000000000000
--- a/drivers/infiniband/core/addr.c
+++ b/drivers/infiniband/core/addr.c
@@@ -609,8 -585,7 +609,12 @@@ static void process_one_req(struct work
  	spin_unlock_bh(&lock);
  }
  
++<<<<<<< HEAD
 +int rdma_resolve_ip(struct rdma_addr_client *client,
 +		    struct sockaddr *src_addr, struct sockaddr *dst_addr,
++=======
+ int rdma_resolve_ip(struct sockaddr *src_addr, const struct sockaddr *dst_addr,
++>>>>>>> 2df7dba855e1 (RDMA/core: Constify dst_addr argument)
  		    struct rdma_dev_addr *addr, int timeout_ms,
  		    void (*callback)(int status, struct sockaddr *src_addr,
  				     struct rdma_dev_addr *addr, void *context),
diff --cc include/rdma/ib_addr.h
index acab7b5dca8b,77c7908b7d73..000000000000
--- a/include/rdma/ib_addr.h
+++ b/include/rdma/ib_addr.h
@@@ -114,8 -97,7 +114,12 @@@ int rdma_translate_ip(const struct sock
   *   or been canceled.  A status of 0 indicates success.
   * @context: User-specified context associated with the call.
   */
++<<<<<<< HEAD
 +int rdma_resolve_ip(struct rdma_addr_client *client,
 +		    struct sockaddr *src_addr, struct sockaddr *dst_addr,
++=======
+ int rdma_resolve_ip(struct sockaddr *src_addr, const struct sockaddr *dst_addr,
++>>>>>>> 2df7dba855e1 (RDMA/core: Constify dst_addr argument)
  		    struct rdma_dev_addr *addr, int timeout_ms,
  		    void (*callback)(int status, struct sockaddr *src_addr,
  				     struct rdma_dev_addr *addr, void *context),
* Unmerged path drivers/infiniband/core/addr.c
diff --git a/drivers/infiniband/core/cma.c b/drivers/infiniband/core/cma.c
index b1cbf8d58b87..eed85bf74613 100644
--- a/drivers/infiniband/core/cma.c
+++ b/drivers/infiniband/core/cma.c
@@ -1041,7 +1041,7 @@ int rdma_init_qp_attr(struct rdma_cm_id *id, struct ib_qp_attr *qp_attr,
 }
 EXPORT_SYMBOL(rdma_init_qp_attr);
 
-static inline int cma_zero_addr(struct sockaddr *addr)
+static inline int cma_zero_addr(const struct sockaddr *addr)
 {
 	switch (addr->sa_family) {
 	case AF_INET:
@@ -1055,7 +1055,7 @@ static inline int cma_zero_addr(struct sockaddr *addr)
 	}
 }
 
-static inline int cma_loopback_addr(struct sockaddr *addr)
+static inline int cma_loopback_addr(const struct sockaddr *addr)
 {
 	switch (addr->sa_family) {
 	case AF_INET:
@@ -1069,7 +1069,7 @@ static inline int cma_loopback_addr(struct sockaddr *addr)
 	}
 }
 
-static inline int cma_any_addr(struct sockaddr *addr)
+static inline int cma_any_addr(const struct sockaddr *addr)
 {
 	return cma_zero_addr(addr) || cma_loopback_addr(addr);
 }
@@ -1092,7 +1092,7 @@ static int cma_addr_cmp(struct sockaddr *src, struct sockaddr *dst)
 	}
 }
 
-static __be16 cma_port(struct sockaddr *addr)
+static __be16 cma_port(const struct sockaddr *addr)
 {
 	struct sockaddr_ib *sib;
 
@@ -1110,7 +1110,7 @@ static __be16 cma_port(struct sockaddr *addr)
 	}
 }
 
-static inline int cma_any_port(struct sockaddr *addr)
+static inline int cma_any_port(const struct sockaddr *addr)
 {
 	return !cma_port(addr);
 }
@@ -2931,7 +2931,7 @@ err:
 }
 
 static int cma_bind_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
-			 struct sockaddr *dst_addr)
+			 const struct sockaddr *dst_addr)
 {
 	if (!src_addr || !src_addr->sa_family) {
 		src_addr = (struct sockaddr *) &id->route.addr.src_addr;
@@ -2952,7 +2952,7 @@ static int cma_bind_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
 }
 
 int rdma_resolve_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
-		      struct sockaddr *dst_addr, int timeout_ms)
+		      const struct sockaddr *dst_addr, int timeout_ms)
 {
 	struct rdma_id_private *id_priv;
 	int ret;
* Unmerged path include/rdma/ib_addr.h
diff --git a/include/rdma/rdma_cm.h b/include/rdma/rdma_cm.h
index 43b4680706ce..58cbe6240143 100644
--- a/include/rdma/rdma_cm.h
+++ b/include/rdma/rdma_cm.h
@@ -193,7 +193,7 @@ int rdma_bind_addr(struct rdma_cm_id *id, struct sockaddr *addr);
  * @timeout_ms: Time to wait for resolution to complete.
  */
 int rdma_resolve_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
-		      struct sockaddr *dst_addr, int timeout_ms);
+		      const struct sockaddr *dst_addr, int timeout_ms);
 
 /**
  * rdma_resolve_route - Resolve the RDMA address bound to the RDMA identifier
