Turn gfs2_block_truncate_page into gfs2_block_zero_range

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit bdba0d5ec13ed48420a4f85a69317c963c0de67e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bdba0d5e.failed

Turn gfs2_block_truncate_page into a function that zeroes a range within
a block rather than only the end of a block.  This will be used for
cleaning the end of the first partial block and the start of the last
partial block when punching a hole in a file.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit bdba0d5ec13ed48420a4f85a69317c963c0de67e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/bmap.c
diff --cc fs/gfs2/bmap.c
index fe514d9cb90e,c4a297e87512..000000000000
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@@ -893,13 -908,14 +893,20 @@@ int gfs2_extent_map(struct inode *inode
   *
   * This is partly borrowed from ext3.
   */
- static int gfs2_block_truncate_page(struct address_space *mapping, loff_t from)
+ static int gfs2_block_zero_range(struct inode *inode, loff_t from,
+ 				 unsigned int length)
  {
- 	struct inode *inode = mapping->host;
+ 	struct address_space *mapping = inode->i_mapping;
  	struct gfs2_inode *ip = GFS2_I(inode);
++<<<<<<< HEAD
 +	unsigned long index = from >> PAGE_CACHE_SHIFT;
 +	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 +	unsigned blocksize, iblock, length, pos;
++=======
+ 	unsigned long index = from >> PAGE_SHIFT;
+ 	unsigned offset = from & (PAGE_SIZE-1);
+ 	unsigned blocksize, iblock, pos;
++>>>>>>> bdba0d5ec13e (Turn gfs2_block_truncate_page into gfs2_block_zero_range)
  	struct buffer_head *bh;
  	struct page *page;
  	int err;
@@@ -909,8 -925,7 +916,12 @@@
  		return 0;
  
  	blocksize = inode->i_sb->s_blocksize;
++<<<<<<< HEAD
 +	length = blocksize - (offset & (blocksize - 1));
 +	iblock = index << (PAGE_CACHE_SHIFT - inode->i_sb->s_blocksize_bits);
++=======
+ 	iblock = index << (PAGE_SHIFT - inode->i_sb->s_blocksize_bits);
++>>>>>>> bdba0d5ec13e (Turn gfs2_block_truncate_page into gfs2_block_zero_range)
  
  	if (!page_has_buffers(page))
  		create_empty_buffers(page, blocksize, 0);
* Unmerged path fs/gfs2/bmap.c
