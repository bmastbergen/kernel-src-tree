watchdog: hpwdt: Initialize pretimeout from module parameter.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [watchdog] hpwdt: Initialize pretimeout from module parameter (Joseph Szczypek) [1665272]
Rebuild_FUZZ: 90.09%
commit-author Jerry Hoemann <jerry.hoemann@hpe.com>
commit 4d9186d01e7a6af1c02fcb639632fb97a8e140a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4d9186d0.failed

When the pretimeout is specified as a module parameter, the
value should be reflected in hpwdt_dev.pretimeout.  The default
(on) case is correct.  But, when disabling pretimeout, the value
should be set to zero in hpwdt_dev.

When compiling w/o CONFIG_HPWDT_NMI_DECODING defined, the pretimeout
module parameter is ignored and the value internally will be 0.

	Signed-off-by: Jerry Hoemann <jerry.hoemann@hpe.com>
	Reviewed-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
(cherry picked from commit 4d9186d01e7a6af1c02fcb639632fb97a8e140a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/hpwdt.c
diff --cc drivers/watchdog/hpwdt.c
index a7db4c1c73e8,fae93643beab..000000000000
--- a/drivers/watchdog/hpwdt.c
+++ b/drivers/watchdog/hpwdt.c
@@@ -267,21 -186,29 +267,31 @@@ static long hpwdt_ioctl(struct file *fi
  /*
   *	Kernel interfaces
   */
 -
 -static const struct watchdog_ops hpwdt_ops = {
 -	.owner		= THIS_MODULE,
 -	.start		= hpwdt_start,
 -	.stop		= hpwdt_stop_core,
 -	.ping		= hpwdt_ping,
 -	.set_timeout	= hpwdt_settimeout,
 -	.get_timeleft	= hpwdt_gettimeleft,
 -#ifdef CONFIG_HPWDT_NMI_DECODING
 -	.set_pretimeout	= hpwdt_set_pretimeout,
 -#endif
 +static const struct file_operations hpwdt_fops = {
 +	.owner = THIS_MODULE,
 +	.llseek = no_llseek,
 +	.write = hpwdt_write,
 +	.unlocked_ioctl = hpwdt_ioctl,
 +	.open = hpwdt_open,
 +	.release = hpwdt_release,
  };
  
++<<<<<<< HEAD
 +static struct miscdevice hpwdt_miscdev = {
 +	.minor = WATCHDOG_MINOR,
 +	.name = "watchdog",
 +	.fops = &hpwdt_fops,
++=======
+ static struct watchdog_device hpwdt_dev = {
+ 	.info		= &ident,
+ 	.ops		= &hpwdt_ops,
+ 	.min_timeout	= 1,
+ 	.max_timeout	= HPWDT_MAX_TIMER,
+ 	.timeout	= DEFAULT_MARGIN,
+ 	.pretimeout	= PRETIMEOUT_SEC,
++>>>>>>> 4d9186d01e7a (watchdog: hpwdt: Initialize pretimeout from module parameter.)
  };
  
 -
  /*
   *	Init & Exit
   */
@@@ -386,12 -307,17 +396,23 @@@ static int hpwdt_init_one(struct pci_de
  	if (retval != 0)
  		goto error_init_nmi_decoding;
  
++<<<<<<< HEAD
 +	retval = misc_register(&hpwdt_miscdev);
++=======
+ 	watchdog_set_nowayout(&hpwdt_dev, nowayout);
+ 	if (watchdog_init_timeout(&hpwdt_dev, soft_margin, NULL))
+ 		dev_warn(&dev->dev, "Invalid soft_margin: %d.\n", soft_margin);
+ 
+ 	hpwdt_dev.pretimeout = pretimeout ? PRETIMEOUT_SEC : 0;
+ 
+ 	hpwdt_dev.parent = &dev->dev;
+ 	retval = watchdog_register_device(&hpwdt_dev);
++>>>>>>> 4d9186d01e7a (watchdog: hpwdt: Initialize pretimeout from module parameter.)
  	if (retval < 0) {
 -		dev_err(&dev->dev, "watchdog register failed: %d.\n", retval);
 -		goto error_wd_register;
 +		dev_warn(&dev->dev,
 +			"Unable to register miscdev on minor=%d (err=%d).\n",
 +			WATCHDOG_MINOR, retval);
 +		goto error_misc_register;
  	}
  
  	dev_info(&dev->dev, "HPE Watchdog Timer Driver: %s"
* Unmerged path drivers/watchdog/hpwdt.c
