perf stat: Pass 'struct perf_stat_config' to first_shadow_cpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit ae2d7da554f0dda837b6639d247665f6df90e41f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ae2d7da5.failed

Pass a 'struct perf_stat_config' arg to first_shadow_cpu(), so that the
function does not depend on the 'perf stat' command object local
'stat_config' variable and can then be moved out.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20180830063252.23729-30-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ae2d7da554f0dda837b6639d247665f6df90e41f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
diff --cc tools/perf/builtin-stat.c
index 13693124ed08,f5ac6545af34..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1011,41 -913,14 +1011,42 @@@ static void print_metric_header(void *c
  	if (!valid_only_metric(unit))
  		return;
  	unit = fixunit(tbuf, os->evsel, unit);
 -	if (config->csv_output)
 -		fprintf(os->fh, "%s%s", unit, config->csv_sep);
 +	if (csv_output)
 +		fprintf(os->fh, "%s%s", unit, csv_sep);
  	else
 -		fprintf(os->fh, "%*s ", config->metric_only_len, unit);
 +		fprintf(os->fh, "%*s ", metric_only_len, unit);
 +}
 +
 +static void nsec_printout(int id, int nr, struct perf_evsel *evsel, double avg)
 +{
 +	FILE *output = stat_config.output;
 +	double msecs = avg / NSEC_PER_MSEC;
 +	const char *fmt_v, *fmt_n;
 +	char name[25];
 +
 +	fmt_v = csv_output ? "%.6f%s" : "%18.6f%s";
 +	fmt_n = csv_output ? "%s" : "%-25s";
 +
 +	aggr_printout(evsel, id, nr);
 +
 +	scnprintf(name, sizeof(name), "%s%s",
 +		  perf_evsel__name(evsel), csv_output ? "" : " (msec)");
 +
 +	fprintf(output, fmt_v, msecs, csv_sep);
 +
 +	if (csv_output)
 +		fprintf(output, "%s%s", evsel->unit, csv_sep);
 +	else
 +		fprintf(output, "%-*s%s", unit_width, evsel->unit, csv_sep);
 +
 +	fprintf(output, fmt_n, name);
 +
 +	if (evsel->cgrp)
 +		fprintf(output, "%s%s", csv_sep, evsel->cgrp->name);
  }
  
- static int first_shadow_cpu(struct perf_evsel *evsel, int id)
+ static int first_shadow_cpu(struct perf_stat_config *config,
+ 			    struct perf_evsel *evsel, int id)
  {
  	int i;
  
@@@ -1211,17 -1085,17 +1212,26 @@@ static void printout(int id, int nr, st
  	out.ctx = &os;
  	out.force_header = false;
  
 -	if (config->csv_output && !config->metric_only) {
 -		print_noise(config, counter, noise);
 -		print_running(config, run, ena);
 +	if (csv_output && !metric_only) {
 +		print_noise(counter, noise);
 +		print_running(run, ena);
  	}
  
++<<<<<<< HEAD
 +	perf_stat__print_shadow_stats(counter, uval,
 +				first_shadow_cpu(counter, id),
 +				&out, &metric_events);
 +	if (!csv_output && !metric_only) {
 +		print_noise(counter, noise);
 +		print_running(run, ena);
++=======
+ 	perf_stat__print_shadow_stats(config, counter, uval,
+ 				first_shadow_cpu(config, counter, id),
+ 				&out, &metric_events, st);
+ 	if (!config->csv_output && !config->metric_only) {
+ 		print_noise(config, counter, noise);
+ 		print_running(config, run, ena);
++>>>>>>> ae2d7da554f0 (perf stat: Pass 'struct perf_stat_config' to first_shadow_cpu())
  	}
  }
  
@@@ -1242,7 -1116,8 +1252,12 @@@ static void aggr_update_shadow(struct p
  				val += perf_counts(counter->counts, cpu, 0)->val;
  			}
  			perf_stat__update_shadow_stats(counter, val,
++<<<<<<< HEAD
 +						       first_shadow_cpu(counter, id));
++=======
+ 					first_shadow_cpu(config, counter, id),
+ 					&rt_stat);
++>>>>>>> ae2d7da554f0 (perf stat: Pass 'struct perf_stat_config' to first_shadow_cpu())
  		}
  	}
  }
* Unmerged path tools/perf/builtin-stat.c
