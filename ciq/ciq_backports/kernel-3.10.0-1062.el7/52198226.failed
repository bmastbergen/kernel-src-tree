scsi: smartpqi: switch to pci_alloc_irq_vectors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] smartpqi: switch to pci_alloc_irq_vectors (Don Brace) [1641112]
Rebuild_FUZZ: 93.18%
commit-author Christoph Hellwig <hch@lst.de>
commit 5219822687be40d89bfc30d4040f6a3bb6d17d1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/52198226.failed

Which cleans up a lot of the MSI-X handling, and allows us to use the
PCI IRQ layer provided vector mapping, which we can then expose to
blk-mq.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Acked-by: Don Brace <don.brace@microsemi.com>
	Tested-by: Don Brace <don.brace@microsemi.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 5219822687be40d89bfc30d4040f6a3bb6d17d1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/smartpqi/smartpqi_init.c
diff --cc drivers/scsi/smartpqi/smartpqi_init.c
index f1ff0ea2819f,8702d9cf8040..000000000000
--- a/drivers/scsi/smartpqi/smartpqi_init.c
+++ b/drivers/scsi/smartpqi/smartpqi_init.c
@@@ -24,11 -24,10 +24,12 @@@
  #include <linux/sched.h>
  #include <linux/rtc.h>
  #include <linux/bcd.h>
 +#include <linux/reboot.h>
  #include <linux/cciss_ioctl.h>
+ #include <linux/blk-mq-pci.h>
  #include <scsi/scsi_host.h>
  #include <scsi/scsi_cmnd.h>
 +#include <scsi/scsi_tcq.h>
  #include <scsi/scsi_device.h>
  #include <scsi/scsi_eh.h>
  #include <scsi/scsi_transport_sas.h>
@@@ -3124,46 -2909,20 +3125,38 @@@ static int pqi_request_irqs(struct pqi_
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void pqi_free_irqs(struct pqi_ctrl_info *ctrl_info)
 +{
 +	int i;
 +
 +	for (i = 0; i < ctrl_info->num_msix_vectors_initialized; i++)
 +		free_irq(ctrl_info->msix_vectors[i],
 +			ctrl_info->intr_data[i]);
 +
 +	ctrl_info->num_msix_vectors_initialized = 0;
 +}
 +
++=======
++>>>>>>> 5219822687be (scsi: smartpqi: switch to pci_alloc_irq_vectors)
  static int pqi_enable_msix_interrupts(struct pqi_ctrl_info *ctrl_info)
  {
- 	unsigned int i;
- 	int max_vectors;
- 	int num_vectors_enabled;
- 	struct msix_entry msix_entries[PQI_MAX_MSIX_VECTORS];
- 
- 	max_vectors = ctrl_info->num_queue_groups;
+ 	int ret;
  
- 	for (i = 0; i < max_vectors; i++)
- 		msix_entries[i].entry = i;
- 
- 	num_vectors_enabled = pci_enable_msix_range(ctrl_info->pci_dev,
- 		msix_entries, PQI_MIN_MSIX_VECTORS, max_vectors);
- 
- 	if (num_vectors_enabled < 0) {
+ 	ret = pci_alloc_irq_vectors(ctrl_info->pci_dev,
+ 			PQI_MIN_MSIX_VECTORS, ctrl_info->num_queue_groups,
+ 			PCI_IRQ_MSIX | PCI_IRQ_AFFINITY);
+ 	if (ret < 0) {
  		dev_err(&ctrl_info->pci_dev->dev,
- 			"MSI-X init failed with error %d\n",
- 			num_vectors_enabled);
- 		return num_vectors_enabled;
- 	}
- 
- 	ctrl_info->num_msix_vectors_enabled = num_vectors_enabled;
- 	for (i = 0; i < num_vectors_enabled; i++) {
- 		ctrl_info->msix_vectors[i] = msix_entries[i].vector;
- 		ctrl_info->intr_data[i] = &ctrl_info->queue_groups[i];
+ 			"MSI-X init failed with error %d\n", ret);
+ 		return ret;
  	}
  
++<<<<<<< HEAD
 +	ctrl_info->irq_mode = IRQ_MODE_MSIX;
++=======
+ 	ctrl_info->num_msix_vectors_enabled = ret;
++>>>>>>> 5219822687be (scsi: smartpqi: switch to pci_alloc_irq_vectors)
  	return 0;
  }
  
@@@ -5351,6 -4684,24 +5318,27 @@@ static int pqi_slave_alloc(struct scsi_
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int pqi_slave_configure(struct scsi_device *sdev)
+ {
+ 	struct pqi_scsi_dev *device;
+ 
+ 	device = sdev->hostdata;
+ 	if (!device->expose_device)
+ 		sdev->no_uld_attach = true;
+ 
+ 	return 0;
+ }
+ 
+ static int pqi_map_queues(struct Scsi_Host *shost)
+ {
+ 	struct pqi_ctrl_info *ctrl_info = shost_to_hba(shost);
+ 
+ 	return blk_mq_pci_map_queues(&shost->tag_set, ctrl_info->pci_dev);
+ }
+ 
++>>>>>>> 5219822687be (scsi: smartpqi: switch to pci_alloc_irq_vectors)
  static int pqi_getpciinfo_ioctl(struct pqi_ctrl_info *ctrl_info,
  	void __user *arg)
  {
@@@ -5812,6 -5088,8 +5800,11 @@@ static struct scsi_host_template pqi_dr
  	.eh_device_reset_handler = pqi_eh_device_reset_handler,
  	.ioctl = pqi_ioctl,
  	.slave_alloc = pqi_slave_alloc,
++<<<<<<< HEAD
++=======
+ 	.slave_configure = pqi_slave_configure,
+ 	.map_queues = pqi_map_queues,
++>>>>>>> 5219822687be (scsi: smartpqi: switch to pci_alloc_irq_vectors)
  	.sdev_attrs = pqi_sdev_attrs,
  	.shost_attrs = pqi_shost_attrs,
  };
@@@ -5841,8 -5119,9 +5834,8 @@@ static int pqi_register_scsi(struct pqi
  	shost->cmd_per_lun = shost->can_queue;
  	shost->sg_tablesize = ctrl_info->sg_tablesize;
  	shost->transportt = pqi_sas_transport_template;
- 	shost->irq = ctrl_info->msix_vectors[0];
+ 	shost->irq = pci_irq_vector(ctrl_info->pci_dev, 0);
  	shost->unique_id = shost->irq;
 -	shost->nr_hw_queues = ctrl_info->num_queue_groups;
  	shost->hostdata[0] = (unsigned long)ctrl_info;
  
  	rc = scsi_add_host(shost, &ctrl_info->pci_dev->dev);
diff --git a/drivers/scsi/smartpqi/smartpqi.h b/drivers/scsi/smartpqi/smartpqi.h
index 1c3af4f22a00..21d1a8174c18 100644
--- a/drivers/scsi/smartpqi/smartpqi.h
+++ b/drivers/scsi/smartpqi/smartpqi.h
@@ -1005,8 +1005,6 @@ struct pqi_ctrl_info {
 	int		max_msix_vectors;
 	int		num_msix_vectors_enabled;
 	int		num_msix_vectors_initialized;
-	u32		msix_vectors[PQI_MAX_MSIX_VECTORS];
-	void		*intr_data[PQI_MAX_MSIX_VECTORS];
 	int		event_irq;
 	struct Scsi_Host *scsi_host;
 
* Unmerged path drivers/scsi/smartpqi/smartpqi_init.c
