x86: reuse asm-generic/barrier.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] reuse asm-generic/barrier.h (Waiman Long) [1522387]
Rebuild_FUZZ: 91.53%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 300b06d4555305dc227748674f75970f2f84c224
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/300b06d4.failed

As on most architectures, on x86 read_barrier_depends and
smp_read_barrier_depends are empty.  Drop the local definitions and pull
the generic ones from asm-generic/barrier.h instead: they are identical.

This is in preparation to refactoring this code area.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Acked-by: Arnd Bergmann <arnd@arndb.de>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 300b06d4555305dc227748674f75970f2f84c224)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/barrier.h
diff --cc arch/x86/include/asm/barrier.h
index f9d27d30d9b4,cc4c2a77bd01..000000000000
--- a/arch/x86/include/asm/barrier.h
+++ b/arch/x86/include/asm/barrier.h
@@@ -66,12 -40,9 +66,9 @@@ static inline unsigned long array_index
  #define smp_mb()	barrier()
  #define smp_rmb()	barrier()
  #define smp_wmb()	barrier()
 -#define smp_store_mb(var, value) do { WRITE_ONCE(var, value); barrier(); } while (0)
 +#define set_mb(var, value) do { var = value; barrier(); } while (0)
  #endif /* SMP */
  
- #define read_barrier_depends()		do { } while (0)
- #define smp_read_barrier_depends()	do { } while (0)
- 
  #if defined(CONFIG_X86_PPRO_FENCE)
  
  /*
@@@ -117,16 -88,6 +114,20 @@@ do {									
  #define smp_mb__before_atomic()	barrier()
  #define smp_mb__after_atomic()	barrier()
  
++<<<<<<< HEAD
 +/*
 + * Stop RDTSC speculation. This is needed when you need to use RDTSC
 + * (or get_cycles or vread that possibly accesses the TSC) in a defined
 + * code region.
 + *
 + * (Could use an alternative three way for this if there was one.)
 + */
 +static __always_inline void rdtsc_barrier(void)
 +{
 +	alternative(ASM_NOP3, "lfence", X86_FEATURE_LFENCE_RDTSC);
 +}
++=======
+ #include <asm-generic/barrier.h>
++>>>>>>> 300b06d45553 (x86: reuse asm-generic/barrier.h)
  
  #endif /* _ASM_X86_BARRIER_H */
* Unmerged path arch/x86/include/asm/barrier.h
