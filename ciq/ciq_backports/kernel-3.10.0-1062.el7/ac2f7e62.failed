RDMA/mlx5: Fix function name typo 'fileds' -> 'fields'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Gal Pressman <galpress@amazon.com>
commit ac2f7e623d47fd68d2517f191696fbc96a5d7270
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ac2f7e62.failed

Fix typo in 'set_mr_fileds' -> 'set_mr_fields'.

	Signed-off-by: Gal Pressman <galpress@amazon.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit ac2f7e623d47fd68d2517f191696fbc96a5d7270)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/mr.c
diff --cc drivers/infiniband/hw/mlx5/mr.c
index 2db72c34ceab,8e072f84a323..000000000000
--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@@ -1233,6 -1222,80 +1233,83 @@@ static void set_mr_fields(struct mlx5_i
  	mr->access_flags = access_flags;
  }
  
++<<<<<<< HEAD
++=======
+ static struct ib_mr *mlx5_ib_get_memic_mr(struct ib_pd *pd, u64 memic_addr,
+ 					  u64 length, int acc)
+ {
+ 	struct mlx5_ib_dev *dev = to_mdev(pd->device);
+ 	int inlen = MLX5_ST_SZ_BYTES(create_mkey_in);
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 	struct mlx5_ib_mr *mr;
+ 	void *mkc;
+ 	u32 *in;
+ 	int err;
+ 
+ 	mr = kzalloc(sizeof(*mr), GFP_KERNEL);
+ 	if (!mr)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	in = kzalloc(inlen, GFP_KERNEL);
+ 	if (!in) {
+ 		err = -ENOMEM;
+ 		goto err_free;
+ 	}
+ 
+ 	mkc = MLX5_ADDR_OF(create_mkey_in, in, memory_key_mkey_entry);
+ 
+ 	MLX5_SET(mkc, mkc, access_mode_1_0, MLX5_MKC_ACCESS_MODE_MEMIC & 0x3);
+ 	MLX5_SET(mkc, mkc, access_mode_4_2,
+ 		 (MLX5_MKC_ACCESS_MODE_MEMIC >> 2) & 0x7);
+ 	MLX5_SET(mkc, mkc, a, !!(acc & IB_ACCESS_REMOTE_ATOMIC));
+ 	MLX5_SET(mkc, mkc, rw, !!(acc & IB_ACCESS_REMOTE_WRITE));
+ 	MLX5_SET(mkc, mkc, rr, !!(acc & IB_ACCESS_REMOTE_READ));
+ 	MLX5_SET(mkc, mkc, lw, !!(acc & IB_ACCESS_LOCAL_WRITE));
+ 	MLX5_SET(mkc, mkc, lr, 1);
+ 
+ 	MLX5_SET64(mkc, mkc, len, length);
+ 	MLX5_SET(mkc, mkc, pd, to_mpd(pd)->pdn);
+ 	MLX5_SET(mkc, mkc, qpn, 0xffffff);
+ 	MLX5_SET64(mkc, mkc, start_addr,
+ 		   memic_addr - pci_resource_start(dev->mdev->pdev, 0));
+ 
+ 	err = mlx5_core_create_mkey(mdev, &mr->mmkey, in, inlen);
+ 	if (err)
+ 		goto err_in;
+ 
+ 	kfree(in);
+ 
+ 	mr->umem = NULL;
+ 	set_mr_fields(dev, mr, 0, length, acc);
+ 
+ 	return &mr->ibmr;
+ 
+ err_in:
+ 	kfree(in);
+ 
+ err_free:
+ 	kfree(mr);
+ 
+ 	return ERR_PTR(err);
+ }
+ 
+ struct ib_mr *mlx5_ib_reg_dm_mr(struct ib_pd *pd, struct ib_dm *dm,
+ 				struct ib_dm_mr_attr *attr,
+ 				struct uverbs_attr_bundle *attrs)
+ {
+ 	struct mlx5_ib_dm *mdm = to_mdm(dm);
+ 	u64 memic_addr;
+ 
+ 	if (attr->access_flags & ~MLX5_IB_DM_ALLOWED_ACCESS)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	memic_addr = mdm->dev_addr + attr->offset;
+ 
+ 	return mlx5_ib_get_memic_mr(pd, memic_addr, attr->length,
+ 				    attr->access_flags);
+ }
+ 
++>>>>>>> ac2f7e623d47 (RDMA/mlx5: Fix function name typo 'fileds' -> 'fields')
  struct ib_mr *mlx5_ib_reg_user_mr(struct ib_pd *pd, u64 start, u64 length,
  				  u64 virt_addr, int access_flags,
  				  struct ib_udata *udata)
* Unmerged path drivers/infiniband/hw/mlx5/mr.c
