xfs: remove XFS_BMAP_TRACE_EXLIST

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Christoph Hellwig <hch@lst.de>
commit e8e0e170e2e17b601b86edb86f58dbf7c599e4b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e8e0e170.failed

Instead of looping over all extents in some debug-only helper just
insert trace points into the loops that already exist in the calling
functions.

Also split the xfs_extlist trace point into one each for reading and
writing extents from disk.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit e8e0e170e2e17b601b86edb86f58dbf7c599e4b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_bmap.c
#	fs/xfs/libxfs/xfs_bmap.h
diff --cc fs/xfs/libxfs/xfs_bmap.c
index b9959d9eb265,30e5a358dd90..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@@ -491,29 -488,6 +491,32 @@@ error_norelse
  }
  
  /*
++<<<<<<< HEAD
 + * Add bmap trace insert entries for all the contents of the extent records.
 + */
 +void
 +xfs_bmap_trace_exlist(
 +	xfs_inode_t	*ip,		/* incore inode pointer */
 +	xfs_extnum_t	cnt,		/* count of entries in the list */
 +	int		whichfork,	/* data or attr fork */
 +	unsigned long	caller_ip)
 +{
 +	xfs_extnum_t	idx;		/* extent record index */
 +	xfs_ifork_t	*ifp;		/* inode fork pointer */
 +	int		state = 0;
 +
 +	if (whichfork == XFS_ATTR_FORK)
 +		state |= BMAP_ATTRFORK;
 +
 +	ifp = XFS_IFORK_PTR(ip, whichfork);
 +	ASSERT(cnt == xfs_iext_count(ifp));
 +	for (idx = 0; idx < cnt; idx++)
 +		trace_xfs_extlist(ip, idx, state, caller_ip);
 +}
 +
 +/*
++=======
++>>>>>>> e8e0e170e2e1 (xfs: remove XFS_BMAP_TRACE_EXLIST)
   * Validate that the bmbt_irecs being returned from bmapi are valid
   * given the caller's original parameters.  Specifically check the
   * ranges of the returned irecs to ensure that they only extend beyond
diff --cc fs/xfs/libxfs/xfs_bmap.h
index bbb72c6ceb86,50b8977163ec..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.h
+++ b/fs/xfs/libxfs/xfs_bmap.h
@@@ -152,14 -192,10 +152,21 @@@ static inline int xfs_bmapi_aflag(int w
   */
  #define XFS_BMAP_MAX_SHIFT_EXTENTS	1
  
++<<<<<<< HEAD
 +#ifdef DEBUG
 +void	xfs_bmap_trace_exlist(struct xfs_inode *ip, xfs_extnum_t cnt,
 +		int whichfork, unsigned long caller_ip);
 +#define	XFS_BMAP_TRACE_EXLIST(ip,c,w)	\
 +	xfs_bmap_trace_exlist(ip,c,w, _THIS_IP_)
 +#else
 +#define	XFS_BMAP_TRACE_EXLIST(ip,c,w)
 +#endif
++=======
+ enum shift_direction {
+ 	SHIFT_LEFT = 0,
+ 	SHIFT_RIGHT,
+ };
++>>>>>>> e8e0e170e2e1 (xfs: remove XFS_BMAP_TRACE_EXLIST)
  
  void	xfs_trim_extent(struct xfs_bmbt_irec *irec, xfs_fileoff_t bno,
  		xfs_filblks_t len);
* Unmerged path fs/xfs/libxfs/xfs_bmap.c
* Unmerged path fs/xfs/libxfs/xfs_bmap.h
diff --git a/fs/xfs/libxfs/xfs_inode_fork.c b/fs/xfs/libxfs/xfs_inode_fork.c
index e4a2be82a920..669dd0c8c008 100644
--- a/fs/xfs/libxfs/xfs_inode_fork.c
+++ b/fs/xfs/libxfs/xfs_inode_fork.c
@@ -227,6 +227,7 @@ xfs_iformat_extents(
 {
 	struct xfs_mount	*mp = ip->i_mount;
 	struct xfs_ifork	*ifp = XFS_IFORK_PTR(ip, whichfork);
+	int			state = xfs_bmap_fork_to_state(whichfork);
 	int			nex = XFS_DFORK_NEXTENTS(dip, whichfork);
 	int			size = nex * sizeof(xfs_bmbt_rec_t);
 	struct xfs_bmbt_rec	*dp;
@@ -264,8 +265,8 @@ xfs_iformat_extents(
 						 XFS_ERRLEVEL_LOW, mp);
 				return -EFSCORRUPTED;
 			}
+			trace_xfs_read_extent(ip, i, state, _THIS_IP_);
 		}
-		XFS_BMAP_TRACE_EXLIST(ip, nex, whichfork);
 	}
 	ifp->if_flags |= XFS_IFEXTENTS;
 	return 0;
@@ -658,6 +659,7 @@ xfs_iextents_copy(
 	xfs_bmbt_rec_t		*dp,
 	int			whichfork)
 {
+	int			state = xfs_bmap_fork_to_state(whichfork);
 	int			copied;
 	int			i;
 	xfs_ifork_t		*ifp;
@@ -669,7 +671,6 @@ xfs_iextents_copy(
 	ASSERT(ifp->if_bytes > 0);
 
 	nrecs = xfs_iext_count(ifp);
-	XFS_BMAP_TRACE_EXLIST(ip, nrecs, whichfork);
 	ASSERT(nrecs > 0);
 
 	/*
@@ -692,9 +693,12 @@ xfs_iextents_copy(
 			continue;
 		}
 
+		trace_xfs_write_extent(ip, i, state, _RET_IP_);
+
 		/* Translate to on disk format */
 		put_unaligned_be64(ep->l0, &dp->l0);
 		put_unaligned_be64(ep->l1, &dp->l1);
+
 		dp++;
 		copied++;
 	}
diff --git a/fs/xfs/xfs_trace.h b/fs/xfs/xfs_trace.h
index b153cae60c34..ead914591b60 100644
--- a/fs/xfs/xfs_trace.h
+++ b/fs/xfs/xfs_trace.h
@@ -303,7 +303,8 @@ DEFINE_EVENT(xfs_bmap_class, name, \
 DEFINE_BMAP_EVENT(xfs_iext_remove);
 DEFINE_BMAP_EVENT(xfs_bmap_pre_update);
 DEFINE_BMAP_EVENT(xfs_bmap_post_update);
-DEFINE_BMAP_EVENT(xfs_extlist);
+DEFINE_BMAP_EVENT(xfs_read_extent);
+DEFINE_BMAP_EVENT(xfs_write_extent);
 
 DECLARE_EVENT_CLASS(xfs_buf_class,
 	TP_PROTO(struct xfs_buf *bp, unsigned long caller_ip),
