net/mlx5: Query device memory capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [kernel] mlx5: Query device memory capabilities (Alaa Hleihel) [1641349 1642498]
Rebuild_FUZZ: 95.00%
commit-author Ariel Levkovich <lariel@mellanox.com>
commit e72bd817aee2bd867a90aac68aca07d99addcb55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e72bd817.failed

This patch adds querying of device memory capabilities by the mlx5_core
driver during initialization.

Device memory capabilities is a new capability type and structure
which contains the necessary data that is needed for future device
memory allocation.

The presence of this new capabilities struct is indicated in the
general capabilities struct which is queried first by the driver.
If the presence bit is set, the driver will also query the new
capabilities struct and save it in the device context.

	Signed-off-by: Ariel Levkovich <lariel@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit e72bd817aee2bd867a90aac68aca07d99addcb55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mlx5/device.h
#	include/linux/mlx5/mlx5_ifc.h
diff --cc include/linux/mlx5/device.h
index 38ace22b52ae,2651691c05fb..000000000000
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@@ -1014,6 -1014,8 +1014,11 @@@ enum mlx5_cap_type 
  	MLX5_CAP_VECTOR_CALC,
  	MLX5_CAP_QOS,
  	MLX5_CAP_DEBUG,
++<<<<<<< HEAD
++=======
+ 	MLX5_CAP_RESERVED_14,
+ 	MLX5_CAP_DEV_MEM,
++>>>>>>> e72bd817aee2 (net/mlx5: Query device memory capabilities)
  	/* NUM OF CAP Types */
  	MLX5_CAP_NUM
  };
diff --cc include/linux/mlx5/mlx5_ifc.h
index 4a01909336e7,13c3bf25753b..000000000000
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@@ -881,11 -886,11 +899,16 @@@ struct mlx5_ifc_cmd_hca_cap_bits 
  	u8         vhca_group_manager[0x1];
  	u8         ib_virt[0x1];
  	u8         eth_virt[0x1];
 -	u8         reserved_at_1a4[0x1];
 +	u8         vnic_env_queue_counters[0x1];
  	u8         ets[0x1];
  	u8         nic_flow_table[0x1];
++<<<<<<< HEAD
 +	u8         eswitch_manager[0x1];
 +	u8	   early_vf_enable[0x1];
++=======
+ 	u8         eswitch_flow_table[0x1];
+ 	u8         device_memory[0x1];
++>>>>>>> e72bd817aee2 (net/mlx5: Query device memory capabilities)
  	u8         mcam_reg[0x1];
  	u8         pcam_reg[0x1];
  	u8         local_ca_ack_delay[0x5];
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fw.c b/drivers/net/ethernet/mellanox/mlx5/core/fw.c
index adca24ccdce5..d537e62e868a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fw.c
@@ -196,6 +196,12 @@ int mlx5_query_hca_caps(struct mlx5_core_dev *dev)
 	if (MLX5_CAP_GEN(dev, qcam_reg))
 		mlx5_get_qcam_reg(dev);
 
+	if (MLX5_CAP_GEN(dev, device_memory)) {
+		err = mlx5_core_get_caps(dev, MLX5_CAP_DEV_MEM);
+		if (err)
+			return err;
+	}
+
 	return 0;
 }
 
* Unmerged path include/linux/mlx5/device.h
* Unmerged path include/linux/mlx5/mlx5_ifc.h
