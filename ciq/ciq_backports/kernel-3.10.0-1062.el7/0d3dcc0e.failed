perf callchains: Ask for PERF_RECORD_MMAP for data mmaps for DWARF unwinding

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 0d3dcc0ef13d9d78132d7d6ae068c17ed858e65e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0d3dcc0e.failed

When we use a global DWARF setting as in:

	perf record --call-graph dwarf

According to 5c0cf22477ea ("perf record: Store data mmaps for dwarf unwind") we need
to set up some extra perf_event_attr bits.

But when we instead do a per event dwarf setting:

	perf record -e cycles/call-graph=dwarf/

This was not being done, make them equivalent.

This didn't produce any output changes in my tests while fixing up loose
ends in the per-event settings, I found it just by comparing the
perf_event_attr fields trying to find an explanation for those problems.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Hendrick Brueckner <brueckner@linux.vnet.ibm.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Noel Grandin <noelgrandin@gmail.com>
	Cc: Thomas Richter <tmricht@linux.vnet.ibm.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: https://lkml.kernel.org/n/tip-6476r53h2o38skbs9qa4ust4@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0d3dcc0ef13d9d78132d7d6ae068c17ed858e65e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.c
diff --cc tools/perf/util/evsel.c
index 5a3251e1d7cb,85eb84dfdf91..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -773,7 -796,14 +773,18 @@@ static void apply_config_terms(struct p
  	}
  
  	/* User explicitly set per-event callgraph, clear the old setting and reset. */
++<<<<<<< HEAD
 +	if ((callgraph_buf != NULL) || (dump_size > 0)) {
++=======
+ 	if ((callgraph_buf != NULL) || (dump_size > 0) || max_stack) {
+ 		bool sample_address = false;
+ 
+ 		if (max_stack) {
+ 			param.max_stack = max_stack;
+ 			if (callgraph_buf == NULL)
+ 				callgraph_buf = "fp";
+ 		}
++>>>>>>> 0d3dcc0ef13d (perf callchains: Ask for PERF_RECORD_MMAP for data mmaps for DWARF unwinding)
  
  		/* parse callgraph parameters */
  		if (callgraph_buf != NULL) {
* Unmerged path tools/perf/util/evsel.c
