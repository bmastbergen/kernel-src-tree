swap: add a simple detector for inappropriate swapin readahead

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Shaohua Li <shli@kernel.org>
commit 579f82901f6f41256642936d7e632f3979ad76d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/579f8290.failed

This is a patch to improve swap readahead algorithm.  It's from Hugh and
I slightly changed it.

Hugh's original changelog:

swapin readahead does a blind readahead, whether or not the swapin is
sequential.  This may be ok on harddisk, because large reads have
relatively small costs, and if the readahead pages are unneeded they can
be reclaimed easily - though, what if their allocation forced reclaim of
useful pages? But on SSD devices large reads are more expensive than
small ones: if the readahead pages are unneeded, reading them in caused
significant overhead.

This patch adds very simplistic random read detection.  Stealing the
PageReadahead technique from Konstantin Khlebnikov's patch, avoiding the
vma/anon_vma sophistications of Shaohua Li's patch, swapin_nr_pages()
simply looks at readahead's current success rate, and narrows or widens
its readahead window accordingly.  There is little science to its
heuristic: it's about as stupid as can be whilst remaining effective.

The table below shows elapsed times (in centiseconds) when running a
single repetitive swapping load across a 1000MB mapping in 900MB ram
with 1GB swap (the harddisk tests had taken painfully too long when I
used mem=500M, but SSD shows similar results for that).

Vanilla is the 3.6-rc7 kernel on which I started; Shaohua denotes his
Sep 3 patch in mmotm and linux-next; HughOld denotes my Oct 1 patch
which Shaohua showed to be defective; HughNew this Nov 14 patch, with
page_cluster as usual at default of 3 (8-page reads); HughPC4 this same
patch with page_cluster 4 (16-page reads); HughPC0 with page_cluster 0
(1-page reads: no readahead).

HDD for swapping to harddisk, SSD for swapping to VertexII SSD.  Seq for
sequential access to the mapping, cycling five times around; Rand for
the same number of random touches.  Anon for a MAP_PRIVATE anon mapping;
Shmem for a MAP_SHARED anon mapping, equivalent to tmpfs.

One weakness of Shaohua's vma/anon_vma approach was that it did not
optimize Shmem: seen below.  Konstantin's approach was perhaps mistuned,
50% slower on Seq: did not compete and is not shown below.

HDD        Vanilla Shaohua HughOld HughNew HughPC4 HughPC0
Seq Anon     73921   76210   75611   76904   78191  121542
Seq Shmem    73601   73176   73855   72947   74543  118322
Rand Anon   895392  831243  871569  845197  846496  841680
Rand Shmem 1058375 1053486  827935  764955  764376  756489

SSD        Vanilla Shaohua HughOld HughNew HughPC4 HughPC0
Seq Anon     24634   24198   24673   25107   21614   70018
Seq Shmem    24959   24932   25052   25703   22030   69678
Rand Anon    43014   26146   28075   25989   26935   25901
Rand Shmem   45349   45215   28249   24268   24138   24332

These tests are, of course, two extremes of a very simple case: under
heavier mixed loads I've not yet observed any consistent improvement or
degradation, and wider testing would be welcome.

Shaohua Li:

Test shows Vanilla is slightly better in sequential workload than Hugh's
patch.  I observed with Hugh's patch sometimes the readahead size is
shrinked too fast (from 8 to 1 immediately) in sequential workload if
there is no hit.  And in such case, continuing doing readahead is good
actually.

I don't prepare a sophisticated algorithm for the sequential workload
because so far we can't guarantee sequential accessed pages are swap out
sequentially.  So I slightly change Hugh's heuristic - don't shrink
readahead size too fast.

Here is my test result (unit second, 3 runs average):
	Vanilla		Hugh		New
Seq	356		370		360
Random	4525		2447		2444

Attached graph is the swapin/swapout throughput I collected with 'vmstat
2'.  The first part is running a random workload (till around 1200 of
the x-axis) and the second part is running a sequential workload.
swapin and swapout throughput are almost identical in steady state in
both workloads.  These are expected behavior.  while in Vanilla, swapin
is much bigger than swapout especially in random workload (because wrong
readahead).

Original patches by: Shaohua Li and Konstantin Khlebnikov.

[fengguang.wu@intel.com: swapin_nr_pages() can be static]
	Signed-off-by: Hugh Dickins <hughd@google.com>
	Signed-off-by: Shaohua Li <shli@fusionio.com>
	Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Wu Fengguang <fengguang.wu@intel.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Konstantin Khlebnikov <khlebnikov@openvz.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 579f82901f6f41256642936d7e632f3979ad76d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swap_state.c
diff --cc mm/swap_state.c
index bbce650716cb,e76ace30d436..000000000000
--- a/mm/swap_state.c
+++ b/mm/swap_state.c
@@@ -419,23 -394,48 +424,68 @@@ struct page *__read_swap_cache_async(sw
  	return found_page;
  }
  
++<<<<<<< HEAD
 +/*
 + * Locate a page of swap in physical memory, reserving swap cache space
 + * and reading the disk if it is not already cached.
 + * A failure return means that either the page allocation failed or that
 + * the swap entry is no longer in use.
 + */
 +struct page *read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,
 +			struct vm_area_struct *vma, unsigned long addr)
 +{
 +	bool page_was_allocated;
 +	struct page *retpage = __read_swap_cache_async(entry, gfp_mask,
 +			vma, addr, &page_was_allocated);
 +
 +	if (page_was_allocated)
 +		swap_readpage(retpage);
 +
 +	return retpage;
++=======
+ static unsigned long swapin_nr_pages(unsigned long offset)
+ {
+ 	static unsigned long prev_offset;
+ 	unsigned int pages, max_pages, last_ra;
+ 	static atomic_t last_readahead_pages;
+ 
+ 	max_pages = 1 << ACCESS_ONCE(page_cluster);
+ 	if (max_pages <= 1)
+ 		return 1;
+ 
+ 	/*
+ 	 * This heuristic has been found to work well on both sequential and
+ 	 * random loads, swapping to hard disk or to SSD: please don't ask
+ 	 * what the "+ 2" means, it just happens to work well, that's all.
+ 	 */
+ 	pages = atomic_xchg(&swapin_readahead_hits, 0) + 2;
+ 	if (pages == 2) {
+ 		/*
+ 		 * We can have no readahead hits to judge by: but must not get
+ 		 * stuck here forever, so check for an adjacent offset instead
+ 		 * (and don't even bother to check whether swap type is same).
+ 		 */
+ 		if (offset != prev_offset + 1 && offset != prev_offset - 1)
+ 			pages = 1;
+ 		prev_offset = offset;
+ 	} else {
+ 		unsigned int roundup = 4;
+ 		while (roundup < pages)
+ 			roundup <<= 1;
+ 		pages = roundup;
+ 	}
+ 
+ 	if (pages > max_pages)
+ 		pages = max_pages;
+ 
+ 	/* Don't shrink readahead too fast */
+ 	last_ra = atomic_read(&last_readahead_pages) / 2;
+ 	if (pages < last_ra)
+ 		pages = last_ra;
+ 	atomic_set(&last_readahead_pages, pages);
+ 
+ 	return pages;
++>>>>>>> 579f82901f6f (swap: add a simple detector for inappropriate swapin readahead)
  }
  
  /**
@@@ -461,12 -461,16 +511,21 @@@ struct page *swapin_readahead(swp_entry
  			struct vm_area_struct *vma, unsigned long addr)
  {
  	struct page *page;
- 	unsigned long offset = swp_offset(entry);
+ 	unsigned long entry_offset = swp_offset(entry);
+ 	unsigned long offset = entry_offset;
  	unsigned long start_offset, end_offset;
++<<<<<<< HEAD
 +	unsigned long mask = (1UL << page_cluster) - 1;
 +	struct swap_info_struct *si = swp_swap_info(entry);
++=======
+ 	unsigned long mask;
++>>>>>>> 579f82901f6f (swap: add a simple detector for inappropriate swapin readahead)
  	struct blk_plug plug;
  
+ 	mask = swapin_nr_pages(offset) - 1;
+ 	if (!mask)
+ 		goto skip;
+ 
  	/* Read a page_cluster sized and aligned cluster around offset. */
  	start_offset = offset & ~mask;
  	end_offset = offset | mask;
@@@ -487,43 -491,6 +548,44 @@@
  	blk_finish_plug(&plug);
  
  	lru_add_drain();	/* Push any new pages onto the LRU now */
+ skip:
  	return read_swap_cache_async(entry, gfp_mask, vma, addr);
  }
 +
 +int init_swap_address_space(unsigned int type, unsigned long nr_pages)
 +{
 +	struct address_space *spaces, *space;
 +	unsigned int i, nr;
 +
 +	nr = DIV_ROUND_UP(nr_pages, SWAP_ADDRESS_SPACE_PAGES);
 +	spaces = kvzalloc(sizeof(struct address_space) * nr, GFP_KERNEL);
 +	if (!spaces)
 +		return -ENOMEM;
 +
 +	for (i = 0; i < nr; i++) {
 +		space = spaces + i;
 +		INIT_RADIX_TREE(&space->page_tree, GFP_ATOMIC|__GFP_NOWARN);
 +		atomic_set(&space->i_mmap_writable, 0);
 +		space->a_ops = &swap_aops;
 +		space->backing_dev_info = &swap_backing_dev_info;
 +		/* swap cache doesn't use writeback related tags */
 +		mapping_set_no_writeback_tags(space);
 +		spin_lock_init(&space->tree_lock);
 +		INIT_LIST_HEAD(&space->i_mmap_nonlinear);
 +	}
 +	nr_swapper_spaces[type] = nr;
 +	rcu_assign_pointer(swapper_spaces[type], spaces);
 +
 +	return 0;
 +}
 +
 +void exit_swap_address_space(unsigned int type)
 +{
 +	struct address_space *spaces;
 +
 +	spaces = swapper_spaces[type];
 +	nr_swapper_spaces[type] = 0;
 +	rcu_assign_pointer(swapper_spaces[type], NULL);
 +	synchronize_rcu();
 +	kvfree(spaces);
 +}
diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h
index 020292b536bf..6931bbcf74ff 100644
--- a/include/linux/page-flags.h
+++ b/include/linux/page-flags.h
@@ -229,9 +229,9 @@ PAGEFLAG(OwnerPriv1, owner_priv_1) TESTCLEARFLAG(OwnerPriv1, owner_priv_1)
 TESTPAGEFLAG(Writeback, writeback) TESTSCFLAG(Writeback, writeback)
 PAGEFLAG(MappedToDisk, mappedtodisk)
 
-/* PG_readahead is only used for file reads; PG_reclaim is only for writes */
+/* PG_readahead is only used for reads; PG_reclaim is only for writes */
 PAGEFLAG(Reclaim, reclaim) TESTCLEARFLAG(Reclaim, reclaim)
-PAGEFLAG(Readahead, reclaim)		/* Reminder to do async read-ahead */
+PAGEFLAG(Readahead, reclaim) TESTCLEARFLAG(Readahead, reclaim)
 
 #ifdef CONFIG_HIGHMEM
 /*
* Unmerged path mm/swap_state.c
