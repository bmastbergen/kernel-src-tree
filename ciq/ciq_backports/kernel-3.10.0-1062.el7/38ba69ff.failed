ALSA: hda/ca0132: add dsp setup related commands for the sbz

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Connor McAdams <conmanx360@gmail.com>
commit 38ba69ffcea397010a0887af28b495167dbf6f39
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/38ba69ff.failed

Add dsp setup related functions for the Sound Blaster Z, along with
other helper functions.

Also, add sbz_dsp_startup_check, which fixes a bug where the card
sometimes starts up and has no sound.

	Signed-off-by: Connor McAdams <conmanx360@gmail.com>
	Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 38ba69ffcea397010a0887af28b495167dbf6f39)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,bd7b30a43d4f..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -741,6 -748,9 +742,12 @@@ struct ca0132_spec 
  	unsigned int scp_resp_header;
  	unsigned int scp_resp_data[4];
  	unsigned int scp_resp_count;
++<<<<<<< HEAD
++=======
+ 	bool alt_firmware_present;
+ 	bool startup_check_entered;
+ 	bool dsp_reload;
++>>>>>>> 38ba69ffcea3 (ALSA: hda/ca0132: add dsp setup related commands for the sbz)
  
  	/* mixer and effects related */
  	unsigned char dmic_ctl;
@@@ -1101,6 -1146,81 +1131,84 @@@ static void chipio_set_control_param(st
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Set chip parameters through the chip I/O widget. NO MUTEX.
+  */
+ static void chipio_set_control_param_no_mutex(struct hda_codec *codec,
+ 		enum control_param_id param_id, int param_val)
+ {
+ 	int val;
+ 
+ 	if ((param_id < 32) && (param_val < 8)) {
+ 		val = (param_val << 5) | (param_id);
+ 		snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 				    VENDOR_CHIPIO_PARAM_SET, val);
+ 	} else {
+ 		if (chipio_send(codec, VENDOR_CHIPIO_STATUS, 0) == 0) {
+ 			snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 					    VENDOR_CHIPIO_PARAM_EX_ID_SET,
+ 					    param_id);
+ 			snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 					    VENDOR_CHIPIO_PARAM_EX_VALUE_SET,
+ 					    param_val);
+ 		}
+ 	}
+ }
+ /*
+  * Connect stream to a source point, and then connect
+  * that source point to a destination point.
+  */
+ static void chipio_set_stream_source_dest(struct hda_codec *codec,
+ 				int streamid, int source_point, int dest_point)
+ {
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAM_ID, streamid);
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAM_SOURCE_CONN_POINT, source_point);
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAM_DEST_CONN_POINT, dest_point);
+ }
+ 
+ /*
+  * Set number of channels in the selected stream.
+  */
+ static void chipio_set_stream_channels(struct hda_codec *codec,
+ 				int streamid, unsigned int channels)
+ {
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAM_ID, streamid);
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAMS_CHANNELS, channels);
+ }
+ 
+ /*
+  * Enable/Disable audio stream.
+  */
+ static void chipio_set_stream_control(struct hda_codec *codec,
+ 				int streamid, int enable)
+ {
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAM_ID, streamid);
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_STREAM_CONTROL, enable);
+ }
+ 
+ 
+ /*
+  * Set sampling rate of the connection point. NO MUTEX.
+  */
+ static void chipio_set_conn_rate_no_mutex(struct hda_codec *codec,
+ 				int connid, enum ca0132_sample_rate rate)
+ {
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_CONN_POINT_ID, connid);
+ 	chipio_set_control_param_no_mutex(codec,
+ 			CONTROL_PARAM_CONN_POINT_SAMPLE_RATE, rate);
+ }
+ 
+ /*
++>>>>>>> 38ba69ffcea3 (ALSA: hda/ca0132: add dsp setup related commands for the sbz)
   * Set sampling rate of the connection point.
   */
  static void chipio_set_conn_rate(struct hda_codec *codec,
@@@ -4713,11 -5216,226 +5015,232 @@@ static void ca0132_exit_chip(struct hda
  		dsp_reset(codec);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * This fixes a problem that was hard to reproduce. Very rarely, I would
+  * boot up, and there would be no sound, but the DSP indicated it had loaded
+  * properly. I did a few memory dumps to see if anything was different, and
+  * there were a few areas of memory uninitialized with a1a2a3a4. This function
+  * checks if those areas are uninitialized, and if they are, it'll attempt to
+  * reload the card 3 times. Usually it fixes by the second.
+  */
+ static void sbz_dsp_startup_check(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 	unsigned int dsp_data_check[4];
+ 	unsigned int cur_address = 0x390;
+ 	unsigned int i;
+ 	unsigned int failure = 0;
+ 	unsigned int reload = 3;
+ 
+ 	if (spec->startup_check_entered)
+ 		return;
+ 
+ 	spec->startup_check_entered = true;
+ 
+ 	for (i = 0; i < 4; i++) {
+ 		chipio_read(codec, cur_address, &dsp_data_check[i]);
+ 		cur_address += 0x4;
+ 	}
+ 	for (i = 0; i < 4; i++) {
+ 		if (dsp_data_check[i] == 0xa1a2a3a4)
+ 			failure = 1;
+ 	}
+ 
+ 	codec_dbg(codec, "Startup Check: %d ", failure);
+ 	if (failure)
+ 		codec_info(codec, "DSP not initialized properly. Attempting to fix.");
+ 	/*
+ 	 * While the failure condition is true, and we haven't reached our
+ 	 * three reload limit, continue trying to reload the driver and
+ 	 * fix the issue.
+ 	 */
+ 	while (failure && (reload != 0)) {
+ 		codec_info(codec, "Reloading... Tries left: %d", reload);
+ 		sbz_exit_chip(codec);
+ 		spec->dsp_state = DSP_DOWNLOAD_INIT;
+ 		codec->patch_ops.init(codec);
+ 		failure = 0;
+ 		for (i = 0; i < 4; i++) {
+ 			chipio_read(codec, cur_address, &dsp_data_check[i]);
+ 			cur_address += 0x4;
+ 		}
+ 		for (i = 0; i < 4; i++) {
+ 			if (dsp_data_check[i] == 0xa1a2a3a4)
+ 				failure = 1;
+ 		}
+ 		reload--;
+ 	}
+ 
+ 	if (!failure && reload < 3)
+ 		codec_info(codec, "DSP fixed.");
+ 
+ 	if (!failure)
+ 		return;
+ 
+ 	codec_info(codec, "DSP failed to initialize properly. Either try a full shutdown or a suspend to clear the internal memory.");
+ }
+ 
+ /*
+  * This is for the extra volume verbs 0x797 (left) and 0x798 (right). These add
+  * extra precision for decibel values. If you had the dB value in floating point
+  * you would take the value after the decimal point, multiply by 64, and divide
+  * by 2. So for 8.59, it's (59 * 64) / 100. Useful if someone wanted to
+  * implement fixed point or floating point dB volumes. For now, I'll set them
+  * to 0 just incase a value has lingered from a boot into Windows.
+  */
+ static void ca0132_alt_vol_setup(struct hda_codec *codec)
+ {
+ 	snd_hda_codec_write(codec, 0x02, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x02, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x03, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x03, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x04, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x04, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x07, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x07, 0, 0x798, 0x00);
+ }
+ 
+ /*
+  * Extra commands that don't really fit anywhere else.
+  */
+ static void sbz_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	writel(0x00820680, spec->mem_base + 0x01C);
+ 	writel(0x00820680, spec->mem_base + 0x01C);
+ 
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfc);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfd);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfe);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xff);
+ 
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x44);
+ }
+ 
+ /*
+  * Extra commands that don't really fit anywhere else.
+  */
+ static void r3di_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x1E);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x1C);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x5B);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x20);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x19);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x00);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x40);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x04);
+ }
+ 
+ 
+ /*
+  * These are sent before the DSP is downloaded. Not sure
+  * what they do, or if they're necessary. Could possibly
+  * be removed. Figure they're better to leave in.
+  */
+ static void sbz_region2_startup(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	writel(0x00000000, spec->mem_base + 0x400);
+ 	writel(0x00000000, spec->mem_base + 0x408);
+ 	writel(0x00000000, spec->mem_base + 0x40C);
+ 	writel(0x00880680, spec->mem_base + 0x01C);
+ 	writel(0x00000083, spec->mem_base + 0xC0C);
+ 	writel(0x00000030, spec->mem_base + 0xC00);
+ 	writel(0x00000000, spec->mem_base + 0xC04);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x000000C1, spec->mem_base + 0xC08);
+ 	writel(0x000000F1, spec->mem_base + 0xC08);
+ 	writel(0x00000001, spec->mem_base + 0xC08);
+ 	writel(0x000000C7, spec->mem_base + 0xC08);
+ 	writel(0x000000C1, spec->mem_base + 0xC08);
+ 	writel(0x00000080, spec->mem_base + 0xC04);
+ }
+ 
+ /*
+  * Extra init functions for alternative ca0132 codecs. Done
+  * here so they don't clutter up the main ca0132_init function
+  * anymore than they have to.
+  */
+ static void ca0132_alt_init(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	ca0132_alt_vol_setup(codec);
+ 
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		codec_dbg(codec, "SBZ alt_init");
+ 		ca0132_gpio_init(codec);
+ 		sbz_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_sequence_write(codec, spec->sbz_init_verbs);
+ 		break;
+ 	case QUIRK_R3DI:
+ 		codec_dbg(codec, "R3DI alt_init");
+ 		ca0132_gpio_init(codec);
+ 		ca0132_gpio_setup(codec);
+ 		r3di_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0, 0x6FF, 0xC4);
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 38ba69ffcea3 (ALSA: hda/ca0132: add dsp setup related commands for the sbz)
  static int ca0132_init(struct hda_codec *codec)
  {
  	struct ca0132_spec *spec = codec->spec;
 -	struct auto_pin_cfg *cfg = &spec->autocfg;
 +	struct auto_pin_cfg *cfg = &spec->gen.autocfg;
  	int i;
++<<<<<<< HEAD
++=======
+ 	bool dsp_loaded;
+ 
+ 	/*
+ 	 * If the DSP is already downloaded, and init has been entered again,
+ 	 * there's only two reasons for it. One, the codec has awaken from a
+ 	 * suspended state, and in that case dspload_is_loaded will return
+ 	 * false, and the init will be ran again. The other reason it gets
+ 	 * re entered is on startup for some reason it triggers a suspend and
+ 	 * resume state. In this case, it will check if the DSP is downloaded,
+ 	 * and not run the init function again. For codecs using alt_functions,
+ 	 * it will check if the DSP is loaded properly.
+ 	 */
+ 	if (spec->dsp_state == DSP_DOWNLOADED) {
+ 		dsp_loaded = dspload_is_loaded(codec);
+ 		if (!dsp_loaded) {
+ 			spec->dsp_reload = true;
+ 			spec->dsp_state = DSP_DOWNLOAD_INIT;
+ 		} else {
+ 			if (spec->quirk == QUIRK_SBZ)
+ 				sbz_dsp_startup_check(codec);
+ 			return 0;
+ 		}
+ 	}
++>>>>>>> 38ba69ffcea3 (ALSA: hda/ca0132: add dsp setup related commands for the sbz)
  
  	if (spec->dsp_state != DSP_DOWNLOAD_FAILED)
  		spec->dsp_state = DSP_DOWNLOAD_INIT;
@@@ -4729,12 -5450,21 +5252,23 @@@
  	ca0132_init_params(codec);
  	ca0132_init_flags(codec);
  	snd_hda_sequence_write(codec, spec->base_init_verbs);
 -
 -	if (spec->quirk != QUIRK_NONE)
 -		ca0132_alt_init(codec);
 -
  	ca0132_download_dsp(codec);
  	ca0132_refresh_widget_caps(codec);
++<<<<<<< HEAD
 +	ca0132_setup_defaults(codec);
 +	ca0132_init_analog_mic2(codec);
 +	ca0132_init_dmic(codec);
++=======
+ 
+ 	if (spec->quirk == QUIRK_SBZ)
+ 		writew(0x0107, spec->mem_base + 0x320);
+ 
+ 	if (spec->quirk != QUIRK_SBZ) {
+ 		ca0132_setup_defaults(codec);
+ 		ca0132_init_analog_mic2(codec);
+ 		ca0132_init_dmic(codec);
+ 	}
++>>>>>>> 38ba69ffcea3 (ALSA: hda/ca0132: add dsp setup related commands for the sbz)
  
  	for (i = 0; i < spec->num_outputs; i++)
  		init_output(codec, spec->out_pins[i], spec->dacs[0]);
@@@ -4746,7 -5476,19 +5280,23 @@@
  
  	init_input(codec, cfg->dig_in_pin, spec->dig_in);
  
++<<<<<<< HEAD
 +	snd_hda_sequence_write(codec, spec->chip_init_verbs);
++=======
+ 	if (!spec->use_alt_functions) {
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_PARAM_EX_ID_SET, 0x0D);
+ 		snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_PARAM_EX_VALUE_SET, 0x20);
+ 	}
+ 
+ 	if (spec->quirk == QUIRK_SBZ) {
+ 		ca0132_gpio_setup(codec);
+ 		sbz_setup_defaults(codec);
+ 	}
+ 
++>>>>>>> 38ba69ffcea3 (ALSA: hda/ca0132: add dsp setup related commands for the sbz)
  	snd_hda_sequence_write(codec, spec->spec_init_verbs);
  
  	ca0132_select_out(codec);
* Unmerged path sound/pci/hda/patch_ca0132.c
