tools lib bpf: Add libbpf_get_error()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Joe Stringer <joe@ovn.org>
commit e28ff1a8382ee02b10cf11cf3b48541dc3d14a58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e28ff1a8.failed

This function will turn a libbpf pointer into a standard error code (or
0 if the pointer is valid).

This also allows removal of the dependency on linux/err.h in the public
header file, which causes problems in userspace programs built against
libbpf.

	Signed-off-by: Joe Stringer <joe@ovn.org>
	Acked-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@fb.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: netdev@vger.kernel.org
Link: http://lkml.kernel.org/r/20170123011128.26534-5-joe@ovn.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e28ff1a8382ee02b10cf11cf3b48541dc3d14a58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
#	tools/perf/tests/llvm.c
diff --cc tools/lib/bpf/libbpf.c
index 5bbbf285af74,e6cd62b1264b..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -1972,49 -1550,3 +1972,52 @@@ long libbpf_get_error(const void *ptr
  		return PTR_ERR(ptr);
  	return 0;
  }
++<<<<<<< HEAD
 +
 +int bpf_prog_load(const char *file, enum bpf_prog_type type,
 +		  struct bpf_object **pobj, int *prog_fd)
 +{
 +	struct bpf_program *prog, *first_prog = NULL;
 +	struct bpf_object *obj;
 +	int err;
 +
 +	obj = bpf_object__open(file);
 +	if (IS_ERR(obj))
 +		return -ENOENT;
 +
 +	bpf_object__for_each_program(prog, obj) {
 +		/*
 +		 * If type is not specified, try to guess it based on
 +		 * section name.
 +		 */
 +		if (type == BPF_PROG_TYPE_UNSPEC) {
 +			type = bpf_program__guess_type(prog);
 +			if (type == BPF_PROG_TYPE_UNSPEC) {
 +				bpf_object__close(obj);
 +				return -EINVAL;
 +			}
 +		}
 +
 +		bpf_program__set_type(prog, type);
 +		if (prog->idx != obj->efile.text_shndx && !first_prog)
 +			first_prog = prog;
 +	}
 +
 +	if (!first_prog) {
 +		pr_warning("object file doesn't contain bpf program\n");
 +		bpf_object__close(obj);
 +		return -ENOENT;
 +	}
 +
 +	err = bpf_object__load(obj);
 +	if (err) {
 +		bpf_object__close(obj);
 +		return -EINVAL;
 +	}
 +
 +	*pobj = obj;
 +	*prog_fd = bpf_program__fd(first_prog);
 +	return 0;
 +}
++=======
++>>>>>>> e28ff1a8382e (tools lib bpf: Add libbpf_get_error())
diff --cc tools/lib/bpf/libbpf.h
index f85906533cdd,4014d1ba5e3d..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -248,8 -236,4 +248,11 @@@ int bpf_map__pin(struct bpf_map *map, c
  
  long libbpf_get_error(const void *ptr);
  
++<<<<<<< HEAD
 +int bpf_prog_load(const char *file, enum bpf_prog_type type,
 +		  struct bpf_object **pobj, int *prog_fd);
 +
 +int bpf_set_link_xdp_fd(int ifindex, int fd, __u32 flags);
++=======
++>>>>>>> e28ff1a8382e (tools lib bpf: Add libbpf_get_error())
  #endif
* Unmerged path tools/perf/tests/llvm.c
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/perf/tests/llvm.c
