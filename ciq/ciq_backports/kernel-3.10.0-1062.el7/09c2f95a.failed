scsi: mpt3sas: Swap I/O memory read value back to cpu endianness

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: Swap I/O memory read value back to cpu endianness (Tomas Henzl) [1513855]
Rebuild_FUZZ: 95.08%
commit-author Sreekanth Reddy <sreekanth.reddy@broadcom.com>
commit 09c2f95ad404bc6e9995f5bce04ae85d0fffc534
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/09c2f95a.failed

Swap the I/O memory read value back to cpu endianness before storing it in
a data structures which are defined in the MPI headers where u8 components
are not defined in the endianness order.

In this area from day one mpt3sas driver is using le32_to_cpu() &
cpu_to_le32() APIs. But in commit cf6bf9710c
(mpt3sas: Bug fix for big endian systems) we have removed these APIs
before reading I/O memory which we should haven't done it. So
in this patch I am correcting it by adding these APIs back
before accessing I/O memory.

	Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 09c2f95ad404bc6e9995f5bce04ae85d0fffc534)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.c
index 3f49dd06aaac,e44c91edf92d..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@@ -2576,6 -3329,29 +2576,32 @@@ mpt3sas_base_free_smid(struct MPT3SAS_A
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * _base_mpi_ep_writeq - 32 bit write to MMIO
+  * @b: data payload
+  * @addr: address in MMIO space
+  * @writeq_lock: spin lock
+  *
+  * This special handling for MPI EP to take care of 32 bit
+  * environment where its not quarenteed to send the entire word
+  * in one transfer.
+  */
+ static inline void
+ _base_mpi_ep_writeq(__u64 b, volatile void __iomem *addr,
+ 					spinlock_t *writeq_lock)
+ {
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(writeq_lock, flags);
+ 	__raw_writel((u32)(b), addr);
+ 	__raw_writel((u32)(b >> 32), (addr + 4));
+ 	mmiowb();
+ 	spin_unlock_irqrestore(writeq_lock, flags);
+ }
+ 
+ /**
++>>>>>>> 09c2f95ad404 (scsi: mpt3sas: Swap I/O memory read value back to cpu endianness)
   * _base_writeq - 64 bit write to MMIO
   * @ioc: per adapter object
   * @b: data payload
@@@ -2590,7 -3366,8 +2616,12 @@@
  static inline void
  _base_writeq(__u64 b, volatile void __iomem *addr, spinlock_t *writeq_lock)
  {
++<<<<<<< HEAD
 +	writeq(cpu_to_le64(b), addr);
++=======
+ 	__raw_writeq(b, addr);
+ 	mmiowb();
++>>>>>>> 09c2f95ad404 (scsi: mpt3sas: Swap I/O memory read value back to cpu endianness)
  }
  #else
  static inline void
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.c
