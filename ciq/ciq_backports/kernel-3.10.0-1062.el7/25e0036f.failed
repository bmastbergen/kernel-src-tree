nfp: abm: add helpers for configuring queue marking levels

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 25e0036fcd241fcb4541522e511168871d7c8bed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/25e0036f.failed

Queue levels for simple ECN marking are stored in _abi_nfd_out_q_lvls_X
symbol, where X is the PCIe PF id.  Find out the location of that symbol
and add helpers for modifying it.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 25e0036fcd241fcb4541522e511168871d7c8bed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/abm/ctrl.c
#	drivers/net/ethernet/netronome/nfp/abm/main.h
diff --cc drivers/net/ethernet/netronome/nfp/abm/ctrl.c
index e40f6f06417b,978884a0be19..000000000000
--- a/drivers/net/ethernet/netronome/nfp/abm/ctrl.c
+++ b/drivers/net/ethernet/netronome/nfp/abm/ctrl.c
@@@ -35,11 -35,69 +35,71 @@@
  #include <linux/kernel.h>
  
  #include "../nfpcore/nfp_cpp.h"
+ #include "../nfpcore/nfp_nffw.h"
  #include "../nfp_app.h"
 -#include "../nfp_abi.h"
  #include "../nfp_main.h"
  #include "../nfp_net.h"
  #include "main.h"
  
++<<<<<<< HEAD
++=======
+ #define NFP_QLVL_SYM_NAME	"_abi_nfd_out_q_lvls_%u"
+ #define NFP_QLVL_STRIDE		16
+ #define NFP_QLVL_THRS		8
+ 
+ static unsigned long long
+ nfp_abm_q_lvl_thrs(struct nfp_abm_link *alink, unsigned int queue)
+ {
+ 	return alink->abm->q_lvls->addr +
+ 		(alink->queue_base + queue) * NFP_QLVL_STRIDE + NFP_QLVL_THRS;
+ }
+ 
+ static int
+ nfp_abm_ctrl_set_q_lvl(struct nfp_abm_link *alink, unsigned int i, u32 val)
+ {
+ 	struct nfp_cpp *cpp = alink->abm->app->cpp;
+ 	u32 muw;
+ 	int err;
+ 
+ 	muw = NFP_CPP_ATOMIC_WR(alink->abm->q_lvls->target,
+ 				alink->abm->q_lvls->domain);
+ 
+ 	err = nfp_cpp_writel(cpp, muw, nfp_abm_q_lvl_thrs(alink, i), val);
+ 	if (err) {
+ 		nfp_err(cpp, "RED offload setting level failed on vNIC %d queue %d\n",
+ 			alink->id, i);
+ 		return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int nfp_abm_ctrl_set_all_q_lvls(struct nfp_abm_link *alink, u32 val)
+ {
+ 	int i, err;
+ 
+ 	for (i = 0; i < alink->vnic->max_rx_rings; i++) {
+ 		err = nfp_abm_ctrl_set_q_lvl(alink, i, val);
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int nfp_abm_ctrl_qm_enable(struct nfp_abm *abm)
+ {
+ 	return nfp_mbox_cmd(abm->app->pf, NFP_MBOX_PCIE_ABM_ENABLE,
+ 			    NULL, 0, NULL, 0);
+ }
+ 
+ int nfp_abm_ctrl_qm_disable(struct nfp_abm *abm)
+ {
+ 	return nfp_mbox_cmd(abm->app->pf, NFP_MBOX_PCIE_ABM_DISABLE,
+ 			    NULL, 0, NULL, 0);
+ }
+ 
++>>>>>>> 25e0036fcd24 (nfp: abm: add helpers for configuring queue marking levels)
  void nfp_abm_ctrl_read_params(struct nfp_abm_link *alink)
  {
  	alink->queue_base = nn_readl(alink->vnic, NFP_NET_CFG_START_RXQ);
diff --cc drivers/net/ethernet/netronome/nfp/abm/main.h
index 5938b69b8a84,1ac651cdc140..000000000000
--- a/drivers/net/ethernet/netronome/nfp/abm/main.h
+++ b/drivers/net/ethernet/netronome/nfp/abm/main.h
@@@ -72,4 -74,7 +74,10 @@@ struct nfp_abm_link 
  
  void nfp_abm_ctrl_read_params(struct nfp_abm_link *alink);
  int nfp_abm_ctrl_find_addrs(struct nfp_abm *abm);
++<<<<<<< HEAD
++=======
+ int nfp_abm_ctrl_set_all_q_lvls(struct nfp_abm_link *alink, u32 val);
+ int nfp_abm_ctrl_qm_enable(struct nfp_abm *abm);
+ int nfp_abm_ctrl_qm_disable(struct nfp_abm *abm);
++>>>>>>> 25e0036fcd24 (nfp: abm: add helpers for configuring queue marking levels)
  #endif
* Unmerged path drivers/net/ethernet/netronome/nfp/abm/ctrl.c
* Unmerged path drivers/net/ethernet/netronome/nfp/abm/main.h
diff --git a/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cpp.h b/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cpp.h
index 6b36c7eff1fd..e199b0caaa7e 100644
--- a/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cpp.h
+++ b/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cpp.h
@@ -88,6 +88,11 @@ struct resource;
 
 #define NFP_CPP_TARGET_ID_MASK          0x1f
 
+#define NFP_CPP_ATOMIC_RD(target, island) \
+	NFP_CPP_ISLAND_ID((target), 3, 0, (island))
+#define NFP_CPP_ATOMIC_WR(target, island) \
+	NFP_CPP_ISLAND_ID((target), 4, 0, (island))
+
 /**
  * NFP_CPP_ID() - pack target, token, and action into a CPP ID.
  * @target:     NFP CPP target id
