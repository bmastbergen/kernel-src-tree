caif: no need to check return value of debugfs_create functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [usb] ohci: no need to check return value of debugfs_create functions (Torez Smith) [1657401]
Rebuild_FUZZ: 96.83%
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 53f6f391786e01bf2050c03d8a36d9defdcc2831
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/53f6f391.failed

When calling debugfs functions, there is no need to ever check the
return value.  The function can work or not, but the code logic should
never do something different based on this.

	Cc: Richard Fontana <rfontana@redhat.com>
	Cc: Steve Winslow <swinslow@gmail.com>
	Cc: netdev@vger.kernel.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 53f6f391786e01bf2050c03d8a36d9defdcc2831)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/caif/caif_serial.c
diff --cc drivers/net/caif/caif_serial.c
index 77be3cb0b5fe,40b079162804..000000000000
--- a/drivers/net/caif/caif_serial.c
+++ b/drivers/net/caif/caif_serial.c
@@@ -94,26 -94,20 +94,41 @@@ static inline void update_tty_status(st
  }
  static inline void debugfs_init(struct ser_device *ser, struct tty_struct *tty)
  {
++<<<<<<< HEAD
 +	ser->debugfs_tty_dir =
 +			debugfs_create_dir(tty->name, debugfsdir);
 +	if (!IS_ERR(ser->debugfs_tty_dir)) {
 +		debugfs_create_blob("last_tx_msg", S_IRUSR,
 +				ser->debugfs_tty_dir,
 +				&ser->tx_blob);
 +
 +		debugfs_create_blob("last_rx_msg", S_IRUSR,
 +				ser->debugfs_tty_dir,
 +				&ser->rx_blob);
 +
 +		debugfs_create_x32("ser_state", S_IRUSR,
 +				ser->debugfs_tty_dir,
 +				(u32 *)&ser->state);
 +
 +		debugfs_create_x8("tty_status", S_IRUSR,
 +				ser->debugfs_tty_dir,
 +				&ser->tty_status);
++=======
+ 	ser->debugfs_tty_dir = debugfs_create_dir(tty->name, debugfsdir);
+ 
+ 	debugfs_create_blob("last_tx_msg", 0400, ser->debugfs_tty_dir,
+ 			    &ser->tx_blob);
+ 
+ 	debugfs_create_blob("last_rx_msg", 0400, ser->debugfs_tty_dir,
+ 			    &ser->rx_blob);
+ 
+ 	debugfs_create_x32("ser_state", 0400, ser->debugfs_tty_dir,
+ 			   (u32 *)&ser->state);
+ 
+ 	debugfs_create_x8("tty_status", 0400, ser->debugfs_tty_dir,
+ 			  &ser->tty_status);
++>>>>>>> 53f6f391786e (caif: no need to check return value of debugfs_create functions)
  
- 	}
  	ser->tx_blob.data = ser->tx_data;
  	ser->tx_blob.size = 0;
  	ser->rx_blob.data = ser->rx_data;
* Unmerged path drivers/net/caif/caif_serial.c
diff --git a/drivers/net/caif/caif_virtio.c b/drivers/net/caif/caif_virtio.c
index 7d899f19da0b..b42afc8265a9 100644
--- a/drivers/net/caif/caif_virtio.c
+++ b/drivers/net/caif/caif_virtio.c
@@ -623,11 +623,7 @@ static void cfv_netdev_setup(struct net_device *netdev)
 /* Create debugfs counters for the device */
 static inline void debugfs_init(struct cfv_info *cfv)
 {
-	cfv->debugfs =
-		debugfs_create_dir(netdev_name(cfv->ndev), NULL);
-
-	if (IS_ERR(cfv->debugfs))
-		return;
+	cfv->debugfs = debugfs_create_dir(netdev_name(cfv->ndev), NULL);
 
 	debugfs_create_u32("rx-napi-complete", S_IRUSR, cfv->debugfs,
 			   &cfv->stats.rx_napi_complete);
