svcrdma: Remove post_send_wr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 986b78894b268f605e9ea055b99959bdce0e5945
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/986b7889.failed

Clean up: Now that the send_wr is part of the svc_rdma_send_ctxt,
svc_rdma_post_send_wr is nearly empty.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit 986b78894b268f605e9ea055b99959bdce0e5945)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/svc_rdma.h
#	net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
#	net/sunrpc/xprtrdma/svc_rdma_sendto.c
diff --cc include/linux/sunrpc/svc_rdma.h
index e1e3c42bedad,a8bfc214614b..000000000000
--- a/include/linux/sunrpc/svc_rdma.h
+++ b/include/linux/sunrpc/svc_rdma.h
@@@ -169,12 -193,15 +169,15 @@@ extern int svc_rdma_send_reply_chunk(st
  				     struct xdr_buf *xdr);
  
  /* svc_rdma_sendto.c */
 -extern void svc_rdma_send_ctxts_destroy(struct svcxprt_rdma *rdma);
 -extern struct svc_rdma_send_ctxt *
 -		svc_rdma_send_ctxt_get(struct svcxprt_rdma *rdma);
 -extern void svc_rdma_send_ctxt_put(struct svcxprt_rdma *rdma,
 -				   struct svc_rdma_send_ctxt *ctxt);
 -extern int svc_rdma_send(struct svcxprt_rdma *rdma, struct ib_send_wr *wr);
  extern int svc_rdma_map_reply_hdr(struct svcxprt_rdma *rdma,
 -				  struct svc_rdma_send_ctxt *ctxt,
 +				  struct svc_rdma_op_ctxt *ctxt,
  				  __be32 *rdma_resp, unsigned int len);
++<<<<<<< HEAD
 +extern int svc_rdma_post_send_wr(struct svcxprt_rdma *rdma,
 +				 struct svc_rdma_op_ctxt *ctxt,
 +				 u32 inv_rkey);
++=======
++>>>>>>> 986b78894b26 (svcrdma: Remove post_send_wr)
  extern int svc_rdma_sendto(struct svc_rqst *);
  
  /* svc_rdma_transport.c */
diff --cc net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
index 2eed6e104513,68648e6c5be2..000000000000
--- a/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
+++ b/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
@@@ -430,11 -642,10 +430,18 @@@ static void svc_rdma_send_error(struct 
  		return;
  	}
  
++<<<<<<< HEAD
 +	ret = svc_rdma_post_send_wr(xprt, ctxt, 0);
 +	if (ret) {
 +		svc_rdma_unmap_dma(ctxt);
 +		svc_rdma_put_context(ctxt, 1);
 +	}
++=======
+ 	ctxt->sc_send_wr.opcode = IB_WR_SEND;
+ 	ret = svc_rdma_send(xprt, &ctxt->sc_send_wr);
+ 	if (ret)
+ 		svc_rdma_send_ctxt_put(xprt, ctxt);
++>>>>>>> 986b78894b26 (svcrdma: Remove post_send_wr)
  }
  
  /* By convention, backchannel calls arrive via rdma_msg type
diff --cc net/sunrpc/xprtrdma/svc_rdma_sendto.c
index 00a497c70989,0ebdc0c76483..000000000000
--- a/net/sunrpc/xprtrdma/svc_rdma_sendto.c
+++ b/net/sunrpc/xprtrdma/svc_rdma_sendto.c
@@@ -464,46 -630,9 +464,49 @@@ static void svc_rdma_save_io_pages(stru
  	rqstp->rq_next_page = rqstp->rq_respages + 1;
  }
  
++<<<<<<< HEAD
 +/**
 + * svc_rdma_post_send_wr - Set up and post one Send Work Request
 + * @rdma: controlling transport
 + * @ctxt: op_ctxt for transmitting the Send WR
 + * @inv_rkey: R_key argument to Send With Invalidate, or zero
 + *
 + * Returns:
 + *	%0 if the Send* was posted successfully,
 + *	%-ENOTCONN if the connection was lost or dropped,
 + *	%-EINVAL if there was a problem with the Send we built,
 + *	%-ENOMEM if ib_post_send failed.
 + */
 +int svc_rdma_post_send_wr(struct svcxprt_rdma *rdma,
 +			  struct svc_rdma_op_ctxt *ctxt,
 +			  u32 inv_rkey)
 +{
 +	struct ib_send_wr *send_wr = &ctxt->send_wr;
 +
 +	dprintk("svcrdma: posting Send WR with %u sge(s)\n",
 +		ctxt->mapped_sges);
 +
 +	send_wr->next = NULL;
 +	ctxt->cqe.done = svc_rdma_wc_send;
 +	send_wr->wr_cqe = &ctxt->cqe;
 +	send_wr->sg_list = ctxt->sge;
 +	send_wr->num_sge = ctxt->mapped_sges;
 +	send_wr->send_flags = IB_SEND_SIGNALED;
 +	if (inv_rkey) {
 +		send_wr->opcode = IB_WR_SEND_WITH_INV;
 +		send_wr->ex.invalidate_rkey = inv_rkey;
 +	} else {
 +		send_wr->opcode = IB_WR_SEND;
 +	}
 +
 +	return svc_rdma_send(rdma, send_wr);
 +}
 +
++=======
++>>>>>>> 986b78894b26 (svcrdma: Remove post_send_wr)
  /* Prepare the portion of the RPC Reply that will be transmitted
   * via RDMA Send. The RPC-over-RDMA transport header is prepared
 - * in sc_sges[0], and the RPC xdr_buf is prepared in following sges.
 + * in sge[0], and the RPC xdr_buf is prepared in following sges.
   *
   * Depending on whether a Write list or Reply chunk is present,
   * the server may send all, a portion of, or none of the xdr_buf.
@@@ -524,11 -653,12 +527,15 @@@ static int svc_rdma_send_reply_msg(stru
  				   struct svc_rqst *rqstp,
  				   __be32 *wr_lst, __be32 *rp_ch)
  {
++<<<<<<< HEAD
 +	struct svc_rdma_op_ctxt *ctxt;
 +	u32 inv_rkey;
++=======
+ 	struct svc_rdma_send_ctxt *ctxt;
++>>>>>>> 986b78894b26 (svcrdma: Remove post_send_wr)
  	int ret;
  
 -	ctxt = svc_rdma_send_ctxt_get(rdma);
 -	if (!ctxt)
 -		return -ENOMEM;
 +	ctxt = svc_rdma_get_context(rdma);
  
  	ret = svc_rdma_map_reply_hdr(rdma, ctxt, rdma_resp,
  				     svc_rdma_reply_hdr_len(rdma_resp));
* Unmerged path include/linux/sunrpc/svc_rdma.h
diff --git a/net/sunrpc/xprtrdma/svc_rdma_backchannel.c b/net/sunrpc/xprtrdma/svc_rdma_backchannel.c
index 855b0740ad11..6f6f8d612207 100644
--- a/net/sunrpc/xprtrdma/svc_rdma_backchannel.c
+++ b/net/sunrpc/xprtrdma/svc_rdma_backchannel.c
@@ -134,7 +134,8 @@ static int svc_rdma_bc_sendto(struct svcxprt_rdma *rdma,
 	 * the rq_buffer before all retransmits are complete.
 	 */
 	get_page(virt_to_page(rqst->rq_buffer));
-	ret = svc_rdma_post_send_wr(rdma, ctxt, 0);
+	ctxt->sc_send_wr.opcode = IB_WR_SEND;
+	ret = svc_rdma_send(rdma, &ctxt->sc_send_wr);
 	if (ret)
 		goto out_unmap;
 
* Unmerged path net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
* Unmerged path net/sunrpc/xprtrdma/svc_rdma_sendto.c
