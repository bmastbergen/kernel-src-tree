net/mlx5e: Add port FEC get/set functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add port FEC get/set functions (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 94.87%
commit-author Shay Agroskin <shayag@mellanox.com>
commit 2095b264147753eee0f122b8c0c9f035a32f0a25
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/2095b264.failed

Added functions to query and set link FEC policy.
To get/set FEC capabilities in PPLM reg we need to query
current link speed.
'mlx5_get_fec_speed_field' queries current link speed and returns
correct field offset.

FEC Query's return value is divided into 'active FEC policy', which is
the FEC policy used by the link, and 'configured FEC policy', which
is the FEC policy requested by the user.
The two values may differ if:
1) FEC policy was configured to 'auto',
   in which case the active FEC policy would be the default FEC policy
   for current link speed.

2) FEC policy was changed, but no link reset is performed. In which case,
   the active FEC policy would become the configured one after a link
   reset.

FEC set function sets FEC policy for all link speeds and perform link
reset.
1) If current link speed doesn't support requested FEC policy,
   the function fails.
2) If a different link speed doesn't support requested FEC policy,
   FEC capbilities for this speed are turned off and a warning message
   is printed.

	Signed-off-by: Shay Agroskin <shayag@mellanox.com>
	Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 2095b264147753eee0f122b8c0c9f035a32f0a25)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/port.c
#	drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
index 6b38b6fbd030,cd2160b8c9bf..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
@@@ -35,18 -36,25 +35,38 @@@
  #include <linux/mlx5/driver.h>
  #include "en.h"
  
 -u32 mlx5e_port_ptys2speed(u32 eth_proto_oper);
 -int mlx5e_port_linkspeed(struct mlx5_core_dev *mdev, u32 *speed);
 -int mlx5e_port_max_linkspeed(struct mlx5_core_dev *mdev, u32 *speed);
 -u32 mlx5e_port_speed2linkmodes(u32 speed);
 +struct mlx5_vxlan_port;
 +
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
 +static inline bool mlx5e_vxlan_allowed(struct mlx5_core_dev *mdev)
 +{
 +	return (MLX5_CAP_ETH(mdev, tunnel_stateless_vxlan) &&
 +		mlx5_core_is_pf(mdev));
 +}
 +
 +void mlx5e_vxlan_init(struct mlx5e_priv *priv);
 +void mlx5e_vxlan_cleanup(struct mlx5e_priv *priv);
 +void mlx5e_vxlan_add_port(struct mlx5e_priv *priv, u16 port);
 +void mlx5e_vxlan_del_port(struct mlx5e_priv *priv, u16 port);
 +struct mlx5_vxlan_port *mlx5e_vxlan_lookup_port(struct mlx5e_priv *priv, u16 port);
  
 +#endif /* __MLX5_VXLAN_H__ */
++=======
+ int mlx5e_port_query_pbmc(struct mlx5_core_dev *mdev, void *out);
+ int mlx5e_port_set_pbmc(struct mlx5_core_dev *mdev, void *in);
+ int mlx5e_port_query_priority2buffer(struct mlx5_core_dev *mdev, u8 *buffer);
+ int mlx5e_port_set_priority2buffer(struct mlx5_core_dev *mdev, u8 *buffer);
+ 
+ int mlx5e_get_fec_caps(struct mlx5_core_dev *dev, u8 *fec_caps);
+ int mlx5e_get_fec_mode(struct mlx5_core_dev *dev, u32 *fec_mode_active,
+ 		       u8 *fec_configured_mode);
+ int mlx5e_set_fec_mode(struct mlx5_core_dev *dev, u8 fec_policy);
+ 
+ enum {
+ 	MLX5E_FEC_NOFEC,
+ 	MLX5E_FEC_FIRECODE,
+ 	MLX5E_FEC_RS_528_514,
+ };
+ 
+ #endif
++>>>>>>> 2095b2641477 (net/mlx5e: Add port FEC get/set functions):drivers/net/ethernet/mellanox/mlx5/core/en/port.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/port.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/port.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/vxlan.h
