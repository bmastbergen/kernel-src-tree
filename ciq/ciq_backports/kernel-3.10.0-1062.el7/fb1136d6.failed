s390/pkey: Introduce new API for transforming key blobs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [s390] pkey: Introduce new API for transforming key blobs (Hendrik Brueckner) [1641030]
Rebuild_FUZZ: 95.24%
commit-author Ingo Franzki <ifranzki@linux.ibm.com>
commit fb1136d6580c93af3ec33bf7a5621d980a711f24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/fb1136d6.failed

Introduce a new ioctl API and in-kernel API to transform
a variable length key blob of any supported type into a
protected key.

Transforming a secure key blob uses the already existing
function pkey_sec2protk().
Transforming a protected key blob also verifies if the
protected key is still valid. If not, -ENODEV is returned.

Both APIs are described in detail in the header files
arch/s390/include/asm/pkey.h and arch/s390/include/uapi/asm/pkey.h.

	Signed-off-by: Ingo Franzki <ifranzki@linux.ibm.com>
	Reviewed-by: Harald Freudenberger <freude@linux.ibm.com>
	Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit fb1136d6580c93af3ec33bf7a5621d980a711f24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/crypto/pkey_api.c
diff --cc drivers/s390/crypto/pkey_api.c
index dae0c82dffdd,683ff72ae977..000000000000
--- a/drivers/s390/crypto/pkey_api.c
+++ b/drivers/s390/crypto/pkey_api.c
@@@ -61,6 -57,24 +61,27 @@@ static void __exit pkey_debug_exit(void
  	debug_unregister(debug_info);
  }
  
++<<<<<<< HEAD
++=======
+ /* Key token types */
+ #define TOKTYPE_NON_CCA		0x00 /* Non-CCA key token */
+ #define TOKTYPE_CCA_INTERNAL	0x01 /* CCA internal key token */
+ 
+ /* For TOKTYPE_NON_CCA: */
+ #define TOKVER_PROTECTED_KEY	0x01 /* Protected key token */
+ 
+ /* For TOKTYPE_CCA_INTERNAL: */
+ #define TOKVER_CCA_AES		0x04 /* CCA AES key token */
+ 
+ /* header part of a key token */
+ struct keytoken_header {
+ 	u8  type;     /* one of the TOKTYPE values */
+ 	u8  res0[3];
+ 	u8  version;  /* one of the TOKVER values */
+ 	u8  res1[3];
+ } __packed;
+ 
++>>>>>>> fb1136d6580c (s390/pkey: Introduce new API for transforming key blobs)
  /* inside view of a secure key token (only type 0x01 version 0x04) */
  struct secaeskeytoken {
  	u8  type;     /* 0x01 for internal key token */
diff --git a/arch/s390/include/asm/pkey.h b/arch/s390/include/asm/pkey.h
index 9cbdf1ab6255..9a890e1c7144 100644
--- a/arch/s390/include/asm/pkey.h
+++ b/arch/s390/include/asm/pkey.h
@@ -124,4 +124,14 @@ int pkey_genprotkey(__u32 keytype, struct pkey_protkey *protkey);
  */
 int pkey_verifyprotkey(const struct pkey_protkey *protkey);
 
+/*
+ * In-kernel API: Transform an key blob (of any type) into a protected key.
+ * @param key pointer to a buffer containing the key blob
+ * @param keylen size of the key blob in bytes
+ * @param protkey pointer to buffer receiving the protected key
+ * @return 0 on success, negative errno value on failure
+ */
+int pkey_keyblob2pkey(const __u8 *key, __u32 keylen,
+		      struct pkey_protkey *protkey);
+
 #endif /* _KAPI_PKEY_H */
diff --git a/arch/s390/include/uapi/asm/pkey.h b/arch/s390/include/uapi/asm/pkey.h
index 5eebfef6e888..066baf9979da 100644
--- a/arch/s390/include/uapi/asm/pkey.h
+++ b/arch/s390/include/uapi/asm/pkey.h
@@ -20,9 +20,13 @@
 #define PKEY_IOCTL_MAGIC 'p'
 
 #define SECKEYBLOBSIZE	64     /* secure key blob size is always 64 bytes */
+#define PROTKEYBLOBSIZE 80  /* protected key blob size is always 80 bytes */
 #define MAXPROTKEYSIZE	64  /* a protected key blob may be up to 64 bytes */
 #define MAXCLRKEYSIZE	32     /* a clear key value may be up to 32 bytes */
 
+#define MINKEYBLOBSIZE	SECKEYBLOBSIZE	    /* Minimum size of a key blob */
+#define MAXKEYBLOBSIZE	PROTKEYBLOBSIZE     /* Maximum size of a key blob */
+
 /* defines for the type field within the pkey_protkey struct */
 #define PKEY_KEYTYPE_AES_128  1
 #define PKEY_KEYTYPE_AES_192  2
@@ -147,4 +151,15 @@ struct pkey_verifyprotk {
 
 #define PKEY_VERIFYPROTK _IOW(PKEY_IOCTL_MAGIC, 0x09, struct pkey_verifyprotk)
 
+/*
+ * Transform an key blob (of any type) into a protected key
+ */
+struct pkey_kblob2pkey {
+	__u8 __user *key;		/* in: the key blob	   */
+	__u32 keylen;			/* in: the key blob length */
+	struct pkey_protkey protkey;	/* out: the protected key  */
+};
+
+#define PKEY_KBLOB2PROTK _IOWR(PKEY_IOCTL_MAGIC, 0x0A, struct pkey_kblob2pkey)
+
 #endif /* _UAPI_PKEY_H */
* Unmerged path drivers/s390/crypto/pkey_api.c
