net/mlx5e: Use test bit in en accel xmit flow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Use test bit in en accel xmit flow (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 95.35%
commit-author Gal Pressman <galp@mellanox.com>
commit bfbe2057531026ac20bba9f45d3a21a98f3c592a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bfbe2057.failed

Replace (mask & bit) check with test_bit.

	Signed-off-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit bfbe2057531026ac20bba9f45d3a21a98f3c592a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,f20074dbef32..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -28,35 -28,45 +28,55 @@@
   * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
 - *
   */
  
 -#ifndef __MLX5E_EN_ACCEL_H__
 -#define __MLX5E_EN_ACCEL_H__
 -
 -#ifdef CONFIG_MLX5_ACCEL
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
  
 -#include <linux/skbuff.h>
 -#include <linux/netdevice.h>
 -#include "en_accel/ipsec_rxtx.h"
 -#include "en_accel/tls_rxtx.h"
 -#include "en.h"
 +#include "ipath_kernel.h"
  
 -static inline struct sk_buff *mlx5e_accel_handle_tx(struct sk_buff *skb,
 -						    struct mlx5e_txqsq *sq,
 -						    struct net_device *dev,
 -						    struct mlx5e_tx_wqe **wqe,
 -						    u16 *pi)
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
  {
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +	return 0;
++=======
+ #ifdef CONFIG_MLX5_EN_TLS
+ 	if (test_bit(MLX5E_SQ_STATE_TLS, &sq->state)) {
+ 		skb = mlx5e_tls_handle_tx_skb(dev, sq, skb, wqe, pi);
+ 		if (unlikely(!skb))
+ 			return NULL;
+ 	}
+ #endif
+ 
+ #ifdef CONFIG_MLX5_EN_IPSEC
+ 	if (test_bit(MLX5E_SQ_STATE_IPSEC, &sq->state)) {
+ 		skb = mlx5e_ipsec_handle_tx_skb(dev, *wqe, skb);
+ 		if (unlikely(!skb))
+ 			return NULL;
+ 	}
+ #endif
+ 
+ 	return skb;
++>>>>>>> bfbe20575310 (net/mlx5e: Use test bit in en accel xmit flow):drivers/net/ethernet/mellanox/mlx5/core/en_accel/en_accel.h
  }
  
 -#endif /* CONFIG_MLX5_ACCEL */
 -
 -#endif /* __MLX5E_EN_ACCEL_H__ */
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
 +}
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
