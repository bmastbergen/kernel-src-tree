ALSA: rawmidi: Use kvmalloc() for buffers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit ef4db239cda2d74f53120e223643b0f5bbf947c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ef4db239.failed

The size of in-kernel rawmidi buffers may be big up to 1MB, and it can
be specified freely by user-space; which implies that user-space may
trigger kmalloc() errors frequently.

This patch replaces the buffer allocation via kvmalloc() for dealing
with bigger buffers gracefully.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit ef4db239cda2d74f53120e223643b0f5bbf947c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/rawmidi.c
diff --cc sound/core/rawmidi.c
index edf6ff52bbea,69517e18ef07..000000000000
--- a/sound/core/rawmidi.c
+++ b/sound/core/rawmidi.c
@@@ -124,7 -129,8 +125,12 @@@ static int snd_rawmidi_runtime_create(s
  		runtime->avail = 0;
  	else
  		runtime->avail = runtime->buffer_size;
++<<<<<<< HEAD
 +	if ((runtime->buffer = kmalloc(runtime->buffer_size, GFP_KERNEL)) == NULL) {
++=======
+ 	runtime->buffer = kvmalloc(runtime->buffer_size, GFP_KERNEL);
+ 	if (!runtime->buffer) {
++>>>>>>> ef4db239cda2 (ALSA: rawmidi: Use kvmalloc() for buffers)
  		kfree(runtime);
  		return -ENOMEM;
  	}
@@@ -632,23 -644,18 +638,23 @@@ static int snd_rawmidi_info_select_user
  	return 0;
  }
  
 -static int resize_runtime_buffer(struct snd_rawmidi_runtime *runtime,
 -				 struct snd_rawmidi_params *params,
 -				 bool is_input)
 +int snd_rawmidi_output_params(struct snd_rawmidi_substream *substream,
 +			      struct snd_rawmidi_params * params)
  {
  	char *newbuf, *oldbuf;
 -
 -	if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)
 +	struct snd_rawmidi_runtime *runtime = substream->runtime;
 +	
 +	if (substream->append && substream->use_count > 1)
 +		return -EBUSY;
 +	snd_rawmidi_drain_output(substream);
 +	if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {
  		return -EINVAL;
 -	if (params->avail_min < 1 || params->avail_min > params->buffer_size)
 +	}
 +	if (params->avail_min < 1 || params->avail_min > params->buffer_size) {
  		return -EINVAL;
 +	}
  	if (params->buffer_size != runtime->buffer_size) {
- 		newbuf = kmalloc(params->buffer_size, GFP_KERNEL);
+ 		newbuf = kvmalloc(params->buffer_size, GFP_KERNEL);
  		if (!newbuf)
  			return -ENOMEM;
  		spin_lock_irq(&runtime->lock);
@@@ -667,32 -682,10 +673,32 @@@
  EXPORT_SYMBOL(snd_rawmidi_output_params);
  
  int snd_rawmidi_input_params(struct snd_rawmidi_substream *substream,
 -			     struct snd_rawmidi_params *params)
 +			     struct snd_rawmidi_params * params)
  {
 +	char *newbuf, *oldbuf;
 +	struct snd_rawmidi_runtime *runtime = substream->runtime;
 +
  	snd_rawmidi_drain_input(substream);
 -	return resize_runtime_buffer(substream->runtime, params, true);
 +	if (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {
 +		return -EINVAL;
 +	}
 +	if (params->avail_min < 1 || params->avail_min > params->buffer_size) {
 +		return -EINVAL;
 +	}
 +	if (params->buffer_size != runtime->buffer_size) {
 +		newbuf = kmalloc(params->buffer_size, GFP_KERNEL);
 +		if (!newbuf)
 +			return -ENOMEM;
 +		spin_lock_irq(&runtime->lock);
 +		oldbuf = runtime->buffer;
 +		runtime->buffer = newbuf;
 +		runtime->buffer_size = params->buffer_size;
 +		runtime->appl_ptr = runtime->hw_ptr = 0;
 +		spin_unlock_irq(&runtime->lock);
- 		kfree(oldbuf);
++		kvfree(oldbuf);
 +	}
 +	runtime->avail_min = params->avail_min;
 +	return 0;
  }
  EXPORT_SYMBOL(snd_rawmidi_input_params);
  
* Unmerged path sound/core/rawmidi.c
