xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 0d045540ed57e68b9ddcf5c325279a7e5ede7bbf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0d045540.failed

Stop poking before and after the index and just increment or decrement
it while doing our operations on it to prepare for a new extent list
implementation.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 0d045540ed57e68b9ddcf5c325279a7e5ede7bbf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_bmap.c
diff --cc fs/xfs/libxfs/xfs_bmap.c
index 905742f2f1f9,c0216e9e2af8..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@@ -1651,15 -1648,13 +1651,25 @@@ xfs_bmap_add_extent_delay_real
  		 * Filling in all of a previously delayed allocation extent.
  		 * The left and right neighbors are both contiguous with new.
  		 */
++<<<<<<< HEAD
 +		bma->idx--;
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
 +		xfs_bmbt_set_blockcount(xfs_iext_get_ext(ifp, bma->idx),
 +			LEFT.br_blockcount + PREV.br_blockcount +
 +			RIGHT.br_blockcount);
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
 +
 +		xfs_iext_remove(bma->ip, bma->idx + 1, 2, state);
 +		bma->ip->i_d.di_nextents--;
++=======
+ 		LEFT.br_blockcount += PREV.br_blockcount + RIGHT.br_blockcount;
+ 
+ 		xfs_iext_remove(bma->ip, bma->idx, 2, state);
+ 		bma->idx--;
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &LEFT);
+ 		(*nextents)--;
+ 
++>>>>>>> 0d045540ed57 (xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real)
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_CORE | XFS_ILOG_DEXT;
  		else {
@@@ -1693,14 -1682,13 +1703,22 @@@
  		 * Filling in all of a previously delayed allocation extent.
  		 * The left neighbor is contiguous, the right is not.
  		 */
++<<<<<<< HEAD
 +		bma->idx--;
 +
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
 +		xfs_bmbt_set_blockcount(xfs_iext_get_ext(ifp, bma->idx),
 +			LEFT.br_blockcount + PREV.br_blockcount);
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
++=======
+ 		old = LEFT;
+ 		LEFT.br_blockcount += PREV.br_blockcount;
+ 
+ 		xfs_iext_remove(bma->ip, bma->idx, 1, state);
+ 		bma->idx--;
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &LEFT);
++>>>>>>> 0d045540ed57 (xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real)
  
- 		xfs_iext_remove(bma->ip, bma->idx + 1, 1, state);
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_DEXT;
  		else {
@@@ -1725,13 -1708,14 +1743,22 @@@
  		 * Filling in all of a previously delayed allocation extent.
  		 * The right neighbor is contiguous, the left is not.
  		 */
++<<<<<<< HEAD
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
 +		xfs_bmbt_set_startblock(ep, new->br_startblock);
 +		xfs_bmbt_set_blockcount(ep,
 +			PREV.br_blockcount + RIGHT.br_blockcount);
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
++=======
+ 		PREV.br_startblock = new->br_startblock;
+ 		PREV.br_blockcount += RIGHT.br_blockcount;
+ 
+ 		bma->idx++;
+ 		xfs_iext_remove(bma->ip, bma->idx, 1, state);
+ 		bma->idx--;
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &PREV);
++>>>>>>> 0d045540ed57 (xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real)
  
- 		xfs_iext_remove(bma->ip, bma->idx + 1, 1, state);
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_DEXT;
  		else {
@@@ -1786,16 -1761,21 +1813,32 @@@
  		 * Filling in the first part of a previous delayed allocation.
  		 * The left neighbor is contiguous.
  		 */
 -		old = LEFT;
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx - 1, state, _THIS_IP_);
 +		xfs_bmbt_set_blockcount(xfs_iext_get_ext(ifp, bma->idx - 1),
 +			LEFT.br_blockcount + new->br_blockcount);
 +		xfs_bmbt_set_startoff(ep,
 +			PREV.br_startoff + new->br_blockcount);
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx - 1, state, _THIS_IP_);
 +
  		temp = PREV.br_blockcount - new->br_blockcount;
++<<<<<<< HEAD
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
 +		xfs_bmbt_set_blockcount(ep, temp);
++=======
+ 		da_new = XFS_FILBLKS_MIN(xfs_bmap_worst_indlen(bma->ip, temp),
+ 				startblockval(PREV.br_startblock));
+ 
+ 		LEFT.br_blockcount += new->br_blockcount;
+ 
+ 		PREV.br_blockcount = temp;
+ 		PREV.br_startoff += new->br_blockcount;
+ 		PREV.br_startblock = nullstartblock(da_new);
+ 
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &PREV);
+ 		bma->idx--;
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &LEFT);
+ 
++>>>>>>> 0d045540ed57 (xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real)
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_DEXT;
  		else {
@@@ -1814,12 -1788,7 +1857,11 @@@
  			if (error)
  				goto done;
  		}
 +		da_new = XFS_FILBLKS_MIN(xfs_bmap_worst_indlen(bma->ip, temp),
 +			startblockval(PREV.br_startblock));
 +		xfs_bmbt_set_startblock(ep, nullstartblock(da_new));
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
  
- 		bma->idx--;
  		break;
  
  	case BMAP_LEFT_FILLING:
@@@ -1871,14 -1837,11 +1913,22 @@@
  		 * Filling in the last part of a previous delayed allocation.
  		 * The right neighbor is contiguous with the new allocation.
  		 */
++<<<<<<< HEAD
 +		temp = PREV.br_blockcount - new->br_blockcount;
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx + 1, state, _THIS_IP_);
 +		xfs_bmbt_set_blockcount(ep, temp);
 +		xfs_bmbt_set_allf(xfs_iext_get_ext(ifp, bma->idx + 1),
 +			new->br_startoff, new->br_startblock,
 +			new->br_blockcount + RIGHT.br_blockcount,
 +			RIGHT.br_state);
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx + 1, state, _THIS_IP_);
++=======
+ 		old = RIGHT;
+ 		RIGHT.br_startoff = new->br_startoff;
+ 		RIGHT.br_startblock = new->br_startblock;
+ 		RIGHT.br_blockcount += new->br_blockcount;
+ 
++>>>>>>> 0d045540ed57 (xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real)
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_DEXT;
  		else {
@@@ -1898,13 -1855,16 +1948,21 @@@
  				goto done;
  		}
  
 -		temp = PREV.br_blockcount - new->br_blockcount;
  		da_new = XFS_FILBLKS_MIN(xfs_bmap_worst_indlen(bma->ip, temp),
  			startblockval(PREV.br_startblock));
++<<<<<<< HEAD
 +		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
 +		xfs_bmbt_set_startblock(ep, nullstartblock(da_new));
 +		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
++=======
+ 
+ 		PREV.br_blockcount = temp;
+ 		PREV.br_startblock = nullstartblock(da_new);
++>>>>>>> 0d045540ed57 (xfs: treat idx as a cursor in xfs_bmap_add_extent_delay_real)
  
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &PREV);
  		bma->idx++;
+ 		xfs_iext_update_extent(bma->ip, state, bma->idx, &RIGHT);
  		break;
  
  	case BMAP_RIGHT_FILLING:
* Unmerged path fs/xfs/libxfs/xfs_bmap.c
