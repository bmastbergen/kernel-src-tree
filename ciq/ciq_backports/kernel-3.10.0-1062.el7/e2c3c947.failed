x86/speculation/mds: Print SMT vulnerable on MSBDS with mitigations off

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] speculation/mds: Print SMT vulnerable on MSBDS with mitigations off (Waiman Long) [1709296 1690358 1690348 1690335] {CVE-2018-12126 CVE-2018-12127 CVE-2018-12130 CVE-2019-11091}
Rebuild_FUZZ: 97.10%
commit-author Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
commit e2c3c94788b08891dcf3dbe608f9880523ecd71b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e2c3c947.failed

This code is only for CPUs which are affected by MSBDS, but are *not*
affected by the other two MDS issues.

For such CPUs, enabling the mds_idle_clear mitigation is enough to
mitigate SMT.

However if user boots with 'mds=off' and still has SMT enabled, we should
not report that SMT is mitigated:

$cat /sys//devices/system/cpu/vulnerabilities/mds
Vulnerable; SMT mitigated

But rather:
Vulnerable; SMT vulnerable

	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
	Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
Link: https://lkml.kernel.org/r/20190412215118.294906495@localhost.localdomain

(cherry picked from commit e2c3c94788b08891dcf3dbe608f9880523ecd71b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index 6ec1d2da76d1,6b8a55c7cebc..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -611,8 -1195,57 +611,60 @@@ static ssize_t l1tf_show_state(char *bu
  }
  #endif
  
++<<<<<<< HEAD
++=======
+ static ssize_t mds_show_state(char *buf)
+ {
+ 	if (!hypervisor_is_type(X86_HYPER_NATIVE)) {
+ 		return sprintf(buf, "%s; SMT Host state unknown\n",
+ 			       mds_strings[mds_mitigation]);
+ 	}
+ 
+ 	if (boot_cpu_has(X86_BUG_MSBDS_ONLY)) {
+ 		return sprintf(buf, "%s; SMT %s\n", mds_strings[mds_mitigation],
+ 			       (mds_mitigation == MDS_MITIGATION_OFF ? "vulnerable" :
+ 			        sched_smt_active() ? "mitigated" : "disabled"));
+ 	}
+ 
+ 	return sprintf(buf, "%s; SMT %s\n", mds_strings[mds_mitigation],
+ 		       sched_smt_active() ? "vulnerable" : "disabled");
+ }
+ 
+ static char *stibp_state(void)
+ {
+ 	if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)
+ 		return "";
+ 
+ 	switch (spectre_v2_user) {
+ 	case SPECTRE_V2_USER_NONE:
+ 		return ", STIBP: disabled";
+ 	case SPECTRE_V2_USER_STRICT:
+ 		return ", STIBP: forced";
+ 	case SPECTRE_V2_USER_STRICT_PREFERRED:
+ 		return ", STIBP: always-on";
+ 	case SPECTRE_V2_USER_PRCTL:
+ 	case SPECTRE_V2_USER_SECCOMP:
+ 		if (static_key_enabled(&switch_to_cond_stibp))
+ 			return ", STIBP: conditional";
+ 	}
+ 	return "";
+ }
+ 
+ static char *ibpb_state(void)
+ {
+ 	if (boot_cpu_has(X86_FEATURE_IBPB)) {
+ 		if (static_key_enabled(&switch_mm_always_ibpb))
+ 			return ", IBPB: always-on";
+ 		if (static_key_enabled(&switch_mm_cond_ibpb))
+ 			return ", IBPB: conditional";
+ 		return ", IBPB: disabled";
+ 	}
+ 	return "";
+ }
+ 
++>>>>>>> e2c3c94788b0 (x86/speculation/mds: Print SMT vulnerable on MSBDS with mitigations off)
  static ssize_t cpu_show_common(struct device *dev, struct device_attribute *attr,
 -			       char *buf, unsigned int bug)
 +			char *buf, unsigned int bug)
  {
  	if (!boot_cpu_has_bug(bug))
  		return sprintf(buf, "Not affected\n");
* Unmerged path arch/x86/kernel/cpu/bugs.c
