gfs2: Implement fallocate(FALLOC_FL_PUNCH_HOLE)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 4e56a6411fbce6f859566e17298114c2434391a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4e56a641.failed

Implement the top-level bits of punching a hole into a file.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 4e56a6411fbce6f859566e17298114c2434391a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/bmap.c
#	fs/gfs2/bmap.h
#	fs/gfs2/file.c
diff --cc fs/gfs2/bmap.c
index fe514d9cb90e,2ec11981e694..000000000000
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@@ -1297,9 -1348,10 +1297,16 @@@ static int trunc_dealloc(struct gfs2_in
  	struct buffer_head *dibh, *bh;
  	struct gfs2_holder rd_gh;
  	unsigned int bsize_shift = sdp->sd_sb.sb_bsize_shift;
++<<<<<<< HEAD
 +	u64 lblock = (newsize + (1 << bsize_shift) - 1) >> bsize_shift;
 +	__u16 start_list[GFS2_MAX_META_HEIGHT]; /* new beginning of truncation */
 +	unsigned int start_aligned;
++=======
+ 	u64 lblock = (offset + (1 << bsize_shift) - 1) >> bsize_shift;
+ 	__u16 start_list[GFS2_MAX_META_HEIGHT];
+ 	__u16 __end_list[GFS2_MAX_META_HEIGHT], *end_list = NULL;
+ 	unsigned int start_aligned, uninitialized_var(end_aligned);
++>>>>>>> 4e56a6411fbc (gfs2: Implement fallocate(FALLOC_FL_PUNCH_HOLE))
  	unsigned int strip_h = ip->i_height - 1;
  	u32 btotal = 0;
  	int ret, state;
diff --cc fs/gfs2/bmap.h
index ae77fbf8b45f,c3402fe00653..000000000000
--- a/fs/gfs2/bmap.h
+++ b/fs/gfs2/bmap.h
@@@ -59,5 -59,8 +59,11 @@@ extern int gfs2_truncatei_resume(struc
  extern int gfs2_file_dealloc(struct gfs2_inode *ip);
  extern int gfs2_write_alloc_required(struct gfs2_inode *ip, u64 offset,
  				     unsigned int len);
++<<<<<<< HEAD
++=======
+ extern int gfs2_map_journal_extents(struct gfs2_sbd *sdp, struct gfs2_jdesc *jd);
+ extern void gfs2_free_journal_extents(struct gfs2_jdesc *jd);
+ extern int __gfs2_punch_hole(struct file *file, loff_t offset, loff_t length);
++>>>>>>> 4e56a6411fbc (gfs2: Implement fallocate(FALLOC_FL_PUNCH_HOLE))
  
  #endif /* __BMAP_DOT_H__ */
diff --cc fs/gfs2/file.c
index 8ac5e297cd6d,bd60dc682676..000000000000
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@@ -929,8 -924,7 +929,12 @@@ static long gfs2_fallocate(struct file 
  	struct gfs2_holder gh;
  	int ret;
  
++<<<<<<< HEAD
 +	/* We only support the FALLOC_FL_KEEP_SIZE mode */
 +	if (mode & ~FALLOC_FL_KEEP_SIZE)
++=======
+ 	if (mode & ~(FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE))
++>>>>>>> 4e56a6411fbc (gfs2: Implement fallocate(FALLOC_FL_PUNCH_HOLE))
  		return -EOPNOTSUPP;
  	/* fallocate is needed by gfs2_grow to reserve space in the rindex */
  	if (gfs2_is_jdata(ip) && inode != sdp->sd_rindex)
* Unmerged path fs/gfs2/bmap.c
* Unmerged path fs/gfs2/bmap.h
* Unmerged path fs/gfs2/file.c
