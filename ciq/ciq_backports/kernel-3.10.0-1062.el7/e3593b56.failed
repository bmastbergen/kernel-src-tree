RDMA/device: Check that the rename is nop under the lock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit e3593b568a68b0e1a434b80fd6eaebfb655e839d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e3593b56.failed

Since another rename could be running in parallel it is safer to check
that the name is not changing inside the lock, where we already know the
device name will not change.

Fixes: d21943dd19b5 ("RDMA/core: Implement IB device rename function")
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Reviewed-by: Parav Pandit <parav@mellanox.com>
(cherry picked from commit e3593b568a68b0e1a434b80fd6eaebfb655e839d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/device.c
diff --cc drivers/infiniband/core/device.c
index 0df20870c5f9,60083bde3e39..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -171,10 -187,33 +171,38 @@@ static struct ib_device *__ib_device_ge
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static int alloc_name(char *name)
++=======
+ int ib_device_rename(struct ib_device *ibdev, const char *name)
+ {
+ 	int ret;
+ 
+ 	mutex_lock(&device_mutex);
+ 	if (!strcmp(name, dev_name(&ibdev->dev))) {
+ 		ret = 0;
+ 		goto out;
+ 	}
+ 
+ 	if (__ib_device_get_by_name(name)) {
+ 		ret = -EEXIST;
+ 		goto out;
+ 	}
+ 
+ 	ret = device_rename(&ibdev->dev, name);
+ 	if (ret)
+ 		goto out;
+ 	strlcpy(ibdev->name, name, IB_DEVICE_NAME_MAX);
+ out:
+ 	mutex_unlock(&device_mutex);
+ 	return ret;
+ }
+ 
+ static int alloc_name(struct ib_device *ibdev, const char *name)
++>>>>>>> e3593b568a68 (RDMA/device: Check that the rename is nop under the lock)
  {
  	unsigned long *inuse;
 +	char buf[IB_DEVICE_NAME_MAX];
  	struct ib_device *device;
  	int i;
  
* Unmerged path drivers/infiniband/core/device.c
