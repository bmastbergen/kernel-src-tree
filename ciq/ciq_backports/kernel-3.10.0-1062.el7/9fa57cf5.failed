sched/cputime: Always set tsk->vtime_snap_whence after accounting vtime

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Frederic Weisbecker <fweisbec@gmail.com>
commit 9fa57cf5a5c4aed1e45879b335fe433048709327
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9fa57cf5.failed

Even though it doesn't have functional consequences, setting
the task's new context state after we actually accounted the pending
vtime from the old context state makes more sense from a review
perspective.

vtime_user_exit() is the only function that doesn't follow that rule
and that can bug the reviewer for a little while until he realizes there
is no reason for this special case.

	Tested-by: Luiz Capitulino <lcapitulino@redhat.com>
	Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Rik van Riel <riel@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Wanpeng Li <kernellwp@gmail.com>
Link: http://lkml.kernel.org/r/1498756511-11714-3-git-send-email-fweisbec@gmail.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 9fa57cf5a5c4aed1e45879b335fe433048709327)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/cputime.c
diff --cc kernel/sched/cputime.c
index 06db9d91b54b,ab68927e8e94..000000000000
--- a/kernel/sched/cputime.c
+++ b/kernel/sched/cputime.c
@@@ -737,7 -730,16 +737,20 @@@ void vtime_user_enter(struct task_struc
  	if (vtime_delta(tsk))
  		__vtime_account_system(tsk);
  	tsk->vtime_snap_whence = VTIME_USER;
++<<<<<<< HEAD
 +	write_seqcount_end(&tsk->vtime_seqlock.seqcount);
++=======
+ 	write_seqcount_end(&tsk->vtime_seqcount);
+ }
+ 
+ void vtime_user_exit(struct task_struct *tsk)
+ {
+ 	write_seqcount_begin(&tsk->vtime_seqcount);
+ 	if (vtime_delta(tsk))
+ 		account_user_time(tsk, get_vtime_delta(tsk));
+ 	tsk->vtime_snap_whence = VTIME_SYS;
+ 	write_seqcount_end(&tsk->vtime_seqcount);
++>>>>>>> 9fa57cf5a5c4 (sched/cputime: Always set tsk->vtime_snap_whence after accounting vtime)
  }
  
  void vtime_guest_enter(struct task_struct *tsk)
* Unmerged path kernel/sched/cputime.c
