perf thread: Make thread__find_map() return the map

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 71a84b5aedf5023f4009c3bbf28ecba256201f87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/71a84b5a.failed

It was returning the searched map just on the addr_location passed, with
the function itself returning void.

Make it return the map so that we can make the code more compact.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: https://lkml.kernel.org/n/tip-tzlrrzdeoof4i6ktyqv1t6ks@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 71a84b5aedf5023f4009c3bbf28ecba256201f87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-inject.c
#	tools/perf/builtin-script.c
#	tools/perf/tests/code-reading.c
#	tools/perf/util/build-id.c
#	tools/perf/util/cs-etm.c
#	tools/perf/util/event.c
#	tools/perf/util/intel-bts.c
#	tools/perf/util/intel-pt.c
#	tools/perf/util/thread.h
#	tools/perf/util/unwind-libdw.c
#	tools/perf/util/unwind-libunwind-local.c
diff --cc tools/perf/builtin-inject.c
index 3f4e8484576d,a3b346359ba0..000000000000
--- a/tools/perf/builtin-inject.c
+++ b/tools/perf/builtin-inject.c
@@@ -427,9 -440,7 +427,13 @@@ static int perf_event__inject_buildid(s
  		goto repipe;
  	}
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, sample->cpumode, MAP__FUNCTION, sample->ip, &al);
 +
 +	if (al.map != NULL) {
++=======
+ 	if (thread__find_map(thread, sample->cpumode, sample->ip, &al)) {
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		if (!al.map->dso->hit) {
  			al.map->dso->hit = 1;
  			if (map__load(al.map) >= 0) {
diff --cc tools/perf/builtin-script.c
index a9b367022c45,07cb083ac89c..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -753,12 -809,12 +753,21 @@@ static int perf_sample__fprintf_brstack
  		from = br->entries[i].from;
  		to   = br->entries[i].to;
  
++<<<<<<< HEAD
 +		thread__find_addr_map(thread, sample->cpumode, MAP__FUNCTION, from, &alf);
 +		if (alf.map && !alf.map->dso->adjust_symbols)
 +			from = map__map_ip(alf.map, from);
 +
 +		thread__find_addr_map(thread, sample->cpumode, MAP__FUNCTION, to, &alt);
 +		if (alt.map && !alt.map->dso->adjust_symbols)
++=======
+ 		if (thread__find_map(thread, sample->cpumode, from, &alf) &&
+ 		    !alf.map->dso->adjust_symbols)
+ 			from = map__map_ip(alf.map, from);
+ 
+ 		if (thread__find_map(thread, sample->cpumode, to, &alt) &&
+ 		    !alt.map->dso->adjust_symbols)
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  			to = map__map_ip(alt.map, to);
  
  		printed += fprintf(fp, " 0x%"PRIx64, from);
@@@ -821,8 -877,7 +830,12 @@@ static int grab_bb(u8 *buffer, u64 star
  		return 0;
  	}
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, *cpumode, MAP__FUNCTION, start, &al);
 +	if (!al.map || !al.map->dso) {
++=======
+ 	if (!thread__find_map(thread, *cpumode, start, &al) || !al.map->dso) {
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		pr_debug("\tcannot resolve %" PRIx64 "-%" PRIx64 "\n", start, end);
  		return 0;
  	}
@@@ -872,10 -927,8 +885,15 @@@ static int ip__fprintf_sym(uint64_t add
  
  	memset(&al, 0, sizeof(al));
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, cpumode, MAP__FUNCTION, addr, &al);
 +	if (!al.map)
 +		thread__find_addr_map(thread, cpumode, MAP__VARIABLE,
 +				      addr, &al);
++=======
+ 	if (!thread__find_map(thread, cpumode, addr, &al))
+ 		__thread__find_map(thread, cpumode, MAP__VARIABLE, addr, &al);
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  	if ((*lastsym) && al.addr >= (*lastsym)->start && al.addr < (*lastsym)->end)
  		return 0;
  
diff --cc tools/perf/tests/code-reading.c
index 68209c366936,afa4ce21ba7c..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -235,8 -236,7 +235,12 @@@ static int read_object_code(u64 addr, s
  
  	pr_debug("Reading object code for memory address: %#"PRIx64"\n", addr);
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, cpumode, MAP__FUNCTION, addr, &al);
 +	if (!al.map || !al.map->dso) {
++=======
+ 	if (!thread__find_map(thread, cpumode, addr, &al) || !al.map->dso) {
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		if (cpumode == PERF_RECORD_MISC_HYPERVISOR) {
  			pr_debug("Hypervisor address can not be resolved - skipping\n");
  			return 0;
diff --cc tools/perf/util/build-id.c
index 60495cdcf595,04b1d53e4bf9..000000000000
--- a/tools/perf/util/build-id.c
+++ b/tools/perf/util/build-id.c
@@@ -46,9 -47,7 +46,13 @@@ int build_id__mark_dso_hit(struct perf_
  		return -1;
  	}
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, sample->cpumode, MAP__FUNCTION, sample->ip, &al);
 +
 +	if (al.map != NULL)
++=======
+ 	if (thread__find_map(thread, sample->cpumode, sample->ip, &al))
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		al.map->dso->hit = 1;
  
  	thread__put(thread);
diff --cc tools/perf/util/event.c
index e9c7fd1b5a4e,48e4b252f6ff..000000000000
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@@ -1343,9 -1489,8 +1343,14 @@@ int perf_event__process(struct perf_too
  	return machine__process_event(machine, event, sample);
  }
  
++<<<<<<< HEAD
 +void thread__find_addr_map(struct thread *thread, u8 cpumode,
 +			   enum map_type type, u64 addr,
 +			   struct addr_location *al)
++=======
+ struct map *__thread__find_map(struct thread *thread, u8 cpumode, enum map_type type,
+ 			       u64 addr, struct addr_location *al)
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  {
  	struct map_groups *mg = thread->mg;
  	struct machine *machine = mg->machine;
@@@ -1423,8 -1570,7 +1430,12 @@@ void __thread__find_symbol(struct threa
  			   enum map_type type, u64 addr,
  			   struct addr_location *al)
  {
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, cpumode, type, addr, al);
 +	if (al->map != NULL)
++=======
+ 	if (__thread__find_map(thread, cpumode, type, addr, al))
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		al->sym = map__find_symbol(al->map, al->addr);
  	else
  		al->sym = NULL;
@@@ -1523,10 -1669,10 +1534,17 @@@ bool sample_addr_correlates_sym(struct 
  void thread__resolve(struct thread *thread, struct addr_location *al,
  		     struct perf_sample *sample)
  {
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, sample->cpumode, MAP__FUNCTION, sample->addr, al);
 +	if (!al->map)
 +		thread__find_addr_map(thread, sample->cpumode, MAP__VARIABLE,
 +				      sample->addr, al);
++=======
+ 	if (!thread__find_map(thread, sample->cpumode, sample->addr, al)) {
+ 		__thread__find_map(thread, sample->cpumode, MAP__VARIABLE,
+ 				   sample->addr, al);
+ 	}
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  
  	al->cpu = sample->cpu;
  	al->sym = NULL;
diff --cc tools/perf/util/intel-bts.c
index 72db2744876d,7f0c83b6332b..000000000000
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@@ -335,8 -335,7 +335,12 @@@ static int intel_bts_get_next_insn(stru
  	if (!thread)
  		return -1;
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, cpumode, MAP__FUNCTION, ip, &al);
 +	if (!al.map || !al.map->dso)
++=======
+ 	if (!thread__find_map(thread, cpumode, ip, &al) || !al.map->dso)
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		goto out_put;
  
  	len = dso__data_read_addr(al.map->dso, al.map, machine, ip, buf,
diff --cc tools/perf/util/intel-pt.c
index 0effaff57020,a272b35f6c5a..000000000000
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@@ -442,8 -442,7 +442,12 @@@ static int intel_pt_walk_next_insn(stru
  	}
  
  	while (1) {
++<<<<<<< HEAD
 +		thread__find_addr_map(thread, cpumode, MAP__FUNCTION, *ip, &al);
 +		if (!al.map || !al.map->dso)
++=======
+ 		if (!thread__find_map(thread, cpumode, *ip, &al) || !al.map->dso)
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  			return -EINVAL;
  
  		if (al.map->dso->data.status == DSO_DATA_STATUS_ERROR &&
@@@ -596,8 -595,7 +600,12 @@@ static int __intel_pt_pgd_ip(uint64_t i
  	if (!thread)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	thread__find_addr_map(thread, cpumode, MAP__FUNCTION, ip, &al);
 +	if (!al.map || !al.map->dso)
++=======
+ 	if (!thread__find_map(thread, cpumode, ip, &al) || !al.map->dso)
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		return -EINVAL;
  
  	offset = al.map->map_ip(al.map, ip);
diff --cc tools/perf/util/thread.h
index 4c0d3984bed4,1961e4bc1c2c..000000000000
--- a/tools/perf/util/thread.h
+++ b/tools/perf/util/thread.h
@@@ -83,9 -92,14 +83,20 @@@ size_t thread__fprintf(struct thread *t
  
  struct thread *thread__main_thread(struct machine *machine, struct thread *thread);
  
++<<<<<<< HEAD
 +void thread__find_addr_map(struct thread *thread,
 +			   u8 cpumode, enum map_type type, u64 addr,
 +			   struct addr_location *al);
++=======
+ struct map *__thread__find_map(struct thread *thread, u8 cpumode, enum map_type type,
+ 			       u64 addr, struct addr_location *al);
+ 
+ static inline struct map *thread__find_map(struct thread *thread, u8 cpumode,
+ 					   u64 addr, struct addr_location *al)
+ {
+ 	return __thread__find_map(thread, cpumode, MAP__FUNCTION, addr, al);
+ }
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  
  void __thread__find_symbol(struct thread *thread, u8 cpumode, enum map_type type,
  			   u64 addr, struct addr_location *al);
diff --cc tools/perf/util/unwind-libdw.c
index 6d9d8927c469,17401922cd42..000000000000
--- a/tools/perf/util/unwind-libdw.c
+++ b/tools/perf/util/unwind-libdw.c
@@@ -103,9 -104,7 +103,13 @@@ static int access_dso_mem(struct unwind
  	struct addr_location al;
  	ssize_t size;
  
++<<<<<<< HEAD
 +	thread__find_addr_map(ui->thread, PERF_RECORD_MISC_USER,
 +			      MAP__FUNCTION, addr, &al);
 +	if (!al.map) {
++=======
+ 	if (!thread__find_map(ui->thread, PERF_RECORD_MISC_USER, addr, &al)) {
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		/*
  		 * We've seen cases (softice) where DWARF unwinder went
  		 * through non executable mmaps, which we need to lookup
diff --cc tools/perf/util/unwind-libunwind-local.c
index 1e7f7f1b7fec,4662590ef091..000000000000
--- a/tools/perf/util/unwind-libunwind-local.c
+++ b/tools/perf/util/unwind-libunwind-local.c
@@@ -366,9 -367,7 +366,13 @@@ static struct map *find_map(unw_word_t 
  {
  	struct addr_location al;
  
++<<<<<<< HEAD
 +	thread__find_addr_map(ui->thread, PERF_RECORD_MISC_USER,
 +			      MAP__FUNCTION, ip, &al);
 +	if (!al.map) {
++=======
+ 	if (!thread__find_map(ui->thread, PERF_RECORD_MISC_USER, ip, &al)) {
++>>>>>>> 71a84b5aedf5 (perf thread: Make thread__find_map() return the map)
  		/*
  		 * We've seen cases (softice) where DWARF unwinder went
  		 * through non executable mmaps, which we need to lookup
* Unmerged path tools/perf/util/cs-etm.c
* Unmerged path tools/perf/builtin-inject.c
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/tests/code-reading.c
* Unmerged path tools/perf/util/build-id.c
* Unmerged path tools/perf/util/cs-etm.c
* Unmerged path tools/perf/util/event.c
* Unmerged path tools/perf/util/intel-bts.c
* Unmerged path tools/perf/util/intel-pt.c
* Unmerged path tools/perf/util/thread.h
* Unmerged path tools/perf/util/unwind-libdw.c
* Unmerged path tools/perf/util/unwind-libunwind-local.c
