inet: constify ip_route_output_flow() socket argument

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 6f9c961546699ff8bc5e1c1c52200616867ec68a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/6f9c9615.failed

Very soon, TCP stack might call inet_csk_route_req(), which
calls inet_csk_route_req() with an unlocked listener socket,
so we need to make sure ip_route_output_flow() is not trying to
change any field from its socket argument.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6f9c961546699ff8bc5e1c1c52200616867ec68a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/dst.h
#	include/net/route.h
#	net/xfrm/xfrm_policy.c
diff --cc include/net/dst.h
index c7e9ba7e97b4,779206c15f8b..000000000000
--- a/include/net/dst.h
+++ b/include/net/dst.h
@@@ -573,12 -511,12 +574,18 @@@ static inline struct xfrm_state *dst_xf
  }
  
  #else
++<<<<<<< HEAD
 +extern struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
 +				     const struct flowi *fl, struct sock *sk,
 +				     int flags);
++=======
+ struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
+ 			      const struct flowi *fl, const struct sock *sk,
+ 			      int flags);
++>>>>>>> 6f9c96154669 (inet: constify ip_route_output_flow() socket argument)
  
  struct dst_entry *xfrm_lookup_route(struct net *net, struct dst_entry *dst_orig,
- 				    const struct flowi *fl, struct sock *sk,
+ 				    const struct flowi *fl, const struct sock *sk,
  				    int flags);
  
  /* skb attached with this dst needs transformation if dst->xfrm is valid */
diff --cc include/net/route.h
index 22c736f20f23,414beadc619f..000000000000
--- a/include/net/route.h
+++ b/include/net/route.h
@@@ -109,21 -108,15 +109,32 @@@ struct rt_cache_stat 
  extern struct ip_rt_acct __percpu *ip_rt_acct;
  
  struct in_device;
 +extern int		ip_rt_init(void);
 +extern void		rt_cache_flush(struct net *net);
 +extern void		rt_flush_dev(struct net_device *dev);
 +struct rtable *__ip_route_output_key_hash(struct net *net, struct flowi4 *flp,
 +					  const struct sk_buff *skb);
 +
++<<<<<<< HEAD
 +static inline struct rtable *__ip_route_output_key(struct net *net,
 +						   struct flowi4 *flp)
 +{
 +	return __ip_route_output_key_hash(net, flp, NULL);
 +}
  
 +extern struct rtable *ip_route_output_flow(struct net *, struct flowi4 *flp,
 +					   struct sock *sk);
 +extern struct dst_entry *ipv4_blackhole_route(struct net *net, struct dst_entry *dst_orig);
++=======
+ int ip_rt_init(void);
+ void rt_cache_flush(struct net *net);
+ void rt_flush_dev(struct net_device *dev);
+ struct rtable *__ip_route_output_key(struct net *, struct flowi4 *flp);
+ struct rtable *ip_route_output_flow(struct net *, struct flowi4 *flp,
+ 				    const struct sock *sk);
+ struct dst_entry *ipv4_blackhole_route(struct net *net,
+ 				       struct dst_entry *dst_orig);
++>>>>>>> 6f9c96154669 (inet: constify ip_route_output_flow() socket argument)
  
  static inline struct rtable *ip_route_output_key(struct net *net, struct flowi4 *flp)
  {
diff --cc net/xfrm/xfrm_policy.c
index ea07a18efdad,418daa038edf..000000000000
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@@ -1214,8 -1208,8 +1214,13 @@@ static inline int policy_to_flow_dir(in
  	}
  }
  
++<<<<<<< HEAD
 +static struct xfrm_policy *xfrm_sk_policy_lookup(struct sock *sk, int dir,
 +						 const struct flowi *fl, u16 family)
++=======
+ static struct xfrm_policy *xfrm_sk_policy_lookup(const struct sock *sk, int dir,
+ 						 const struct flowi *fl)
++>>>>>>> 6f9c96154669 (inet: constify ip_route_output_flow() socket argument)
  {
  	struct xfrm_policy *pol;
  	struct net *net = sock_net(sk);
* Unmerged path include/net/dst.h
* Unmerged path include/net/route.h
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 1ca3ee23b3a6..e98ea0ccee79 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -2454,7 +2454,7 @@ struct dst_entry *ipv4_blackhole_route(struct net *net, struct dst_entry *dst_or
 }
 
 struct rtable *ip_route_output_flow(struct net *net, struct flowi4 *flp4,
-				    struct sock *sk)
+				    const struct sock *sk)
 {
 	struct rtable *rt = __ip_route_output_key(net, flp4);
 
* Unmerged path net/xfrm/xfrm_policy.c
