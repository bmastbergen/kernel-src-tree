perf test: Print result for each BPF subtest

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit 77a0cf682f7979554e10a6c605a1fef4f4197654
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/77a0cf68.failed

This patch prints each sub-tests results for BPF testcases.

Before:

  # ./perf test BPF
  37: Test BPF filter                                          : Ok

After:

  # ./perf test BPF
  37: Test BPF filter                                          :
  37.1: Test basic BPF filtering                               : Ok
  37.2: Test BPF prologue generation                           : Ok

When a failure happens:

  # cat ~/.perfconfig
  [llvm]
      clang-path = "/bin/false"
  # ./perf test BPF
  37: Test BPF filter                                          :
  37.1: Test basic BPF filtering                               : Skip
  37.2: Test BPF prologue generation                           : Skip

Suggested-and-Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1447749170-175898-5-git-send-email-wangnan0@huawei.com
[ Fixed up not to use .func in an anonymous union ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 77a0cf682f7979554e10a6c605a1fef4f4197654)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/bpf.c
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/tests.h
diff --cc tools/perf/tests/builtin-test.c
index dd7415008b34,146ae9821c00..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -179,68 -158,26 +179,78 @@@ static struct test generic_tests[] = 
  		.func = test__thread_map,
  	},
  	{
 -		.desc = "Test LLVM searching and compiling",
 -		.func = test__llvm,
 -		.subtest = {
 -			.skip_if_fail	= true,
 -			.get_nr		= test__llvm_subtest_get_nr,
 -			.get_desc	= test__llvm_subtest_get_desc,
 -		},
 +		.desc = "Session topology",
 +		.func = test__session_topology,
 +	},
 +	{
 +		.desc = "Synthesize thread map",
 +		.func = test__thread_map_synthesize,
 +	},
 +	{
++<<<<<<< HEAD
 +		.desc = "Remove thread map",
 +		.func = test__thread_map_remove,
 +	},
 +	{
 +		.desc = "Synthesize cpu map",
 +		.func = test__cpu_map_synthesize,
 +	},
 +	{
 +		.desc = "Synthesize stat config",
 +		.func = test__synthesize_stat_config,
 +	},
 +	{
 +		.desc = "Synthesize stat",
 +		.func = test__synthesize_stat,
 +	},
 +	{
 +		.desc = "Synthesize stat round",
 +		.func = test__synthesize_stat_round,
 +	},
 +	{
 +		.desc = "Synthesize attr update",
 +		.func = test__event_update,
 +	},
 +	{
 +		.desc = "Event times",
 +		.func = test__event_times,
 +	},
 +	{
 +		.desc = "Read backward ring buffer",
 +		.func = test__backward_ring_buffer,
 +	},
 +	{
 +		.desc = "Print cpu map",
 +		.func = test__cpu_map_print,
 +	},
 +	{
 +		.desc = "Test SDT event probing",
 +		.func = test__sdt_event,
 +	},
 +	{
 +		.desc = "is_printable_array",
 +		.func = test__is_printable_array,
 +	},
 +	{
 +		.desc = "Print bitmap",
 +		.func = test__bitmap_print,
  	},
  	{
 -		.desc = "Test topology in session",
 -		.func = test_session_topology,
 +		.desc = "perf hooks",
 +		.func = test__perf_hooks,
  	},
  	{
 +		.desc = "unit_number__scnprintf",
 +		.func = test__unit_number__scnprint,
++=======
+ 		.desc = "Test BPF filter",
+ 		.func = test__bpf,
+ 		.subtest = {
+ 			.skip_if_fail	= true,
+ 			.get_nr		= test__bpf_subtest_get_nr,
+ 			.get_desc	= test__bpf_subtest_get_desc,
+ 		},
++>>>>>>> 77a0cf682f79 (perf test: Print result for each BPF subtest)
  	},
  	{
  		.func = NULL,
diff --cc tools/perf/tests/tests.h
index ebc72c7359d4,a0733aaad081..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -39,61 -37,48 +39,106 @@@ struct test 
  };
  
  /* Tests */
++<<<<<<< HEAD
 +int test__vmlinux_matches_kallsyms(struct test *test, int subtest);
 +int test__openat_syscall_event(struct test *test, int subtest);
 +int test__openat_syscall_event_on_all_cpus(struct test *test, int subtest);
 +int test__basic_mmap(struct test *test, int subtest);
 +int test__PERF_RECORD(struct test *test, int subtest);
 +int test__perf_evsel__roundtrip_name_test(struct test *test, int subtest);
 +int test__perf_evsel__tp_sched_test(struct test *test, int subtest);
 +int test__syscall_openat_tp_fields(struct test *test, int subtest);
 +int test__pmu(struct test *test, int subtest);
 +int test__attr(struct test *test, int subtest);
 +int test__dso_data(struct test *test, int subtest);
 +int test__dso_data_cache(struct test *test, int subtest);
 +int test__dso_data_reopen(struct test *test, int subtest);
 +int test__parse_events(struct test *test, int subtest);
 +int test__hists_link(struct test *test, int subtest);
 +int test__python_use(struct test *test, int subtest);
 +int test__bp_signal(struct test *test, int subtest);
 +int test__bp_signal_overflow(struct test *test, int subtest);
 +int test__task_exit(struct test *test, int subtest);
 +int test__mem(struct test *test, int subtest);
 +int test__sw_clock_freq(struct test *test, int subtest);
 +int test__code_reading(struct test *test, int subtest);
 +int test__sample_parsing(struct test *test, int subtest);
 +int test__keep_tracking(struct test *test, int subtest);
 +int test__parse_no_sample_id_all(struct test *test, int subtest);
 +int test__dwarf_unwind(struct test *test, int subtest);
 +int test__expr(struct test *test, int subtest);
 +int test__hists_filter(struct test *test, int subtest);
 +int test__mmap_thread_lookup(struct test *test, int subtest);
 +int test__thread_mg_share(struct test *test, int subtest);
 +int test__hists_output(struct test *test, int subtest);
 +int test__hists_cumulate(struct test *test, int subtest);
 +int test__switch_tracking(struct test *test, int subtest);
 +int test__fdarray__filter(struct test *test, int subtest);
 +int test__fdarray__add(struct test *test, int subtest);
 +int test__kmod_path__parse(struct test *test, int subtest);
 +int test__thread_map(struct test *test, int subtest);
 +int test__session_topology(struct test *test, int subtest);
 +int test__thread_map_synthesize(struct test *test, int subtest);
 +int test__thread_map_remove(struct test *test, int subtest);
 +int test__cpu_map_synthesize(struct test *test, int subtest);
 +int test__synthesize_stat_config(struct test *test, int subtest);
 +int test__synthesize_stat(struct test *test, int subtest);
 +int test__synthesize_stat_round(struct test *test, int subtest);
 +int test__event_update(struct test *test, int subtest);
 +int test__event_times(struct test *test, int subtest);
 +int test__backward_ring_buffer(struct test *test, int subtest);
 +int test__cpu_map_print(struct test *test, int subtest);
 +int test__sdt_event(struct test *test, int subtest);
 +int test__is_printable_array(struct test *test, int subtest);
 +int test__bitmap_print(struct test *test, int subtest);
 +int test__perf_hooks(struct test *test, int subtest);
 +int test__unit_number__scnprint(struct test *test, int subtest);
 +
 +bool test__bp_signal_is_supported(void);
++=======
+ int test__vmlinux_matches_kallsyms(int subtest);
+ int test__openat_syscall_event(int subtest);
+ int test__openat_syscall_event_on_all_cpus(int subtest);
+ int test__basic_mmap(int subtest);
+ int test__PERF_RECORD(int subtest);
+ int test__perf_evsel__roundtrip_name_test(int subtest);
+ int test__perf_evsel__tp_sched_test(int subtest);
+ int test__syscall_openat_tp_fields(int subtest);
+ int test__pmu(int subtest);
+ int test__attr(int subtest);
+ int test__dso_data(int subtest);
+ int test__dso_data_cache(int subtest);
+ int test__dso_data_reopen(int subtest);
+ int test__parse_events(int subtest);
+ int test__hists_link(int subtest);
+ int test__python_use(int subtest);
+ int test__bp_signal(int subtest);
+ int test__bp_signal_overflow(int subtest);
+ int test__task_exit(int subtest);
+ int test__sw_clock_freq(int subtest);
+ int test__code_reading(int subtest);
+ int test__sample_parsing(int subtest);
+ int test__keep_tracking(int subtest);
+ int test__parse_no_sample_id_all(int subtest);
+ int test__dwarf_unwind(int subtest);
+ int test__hists_filter(int subtest);
+ int test__mmap_thread_lookup(int subtest);
+ int test__thread_mg_share(int subtest);
+ int test__hists_output(int subtest);
+ int test__hists_cumulate(int subtest);
+ int test__switch_tracking(int subtest);
+ int test__fdarray__filter(int subtest);
+ int test__fdarray__add(int subtest);
+ int test__kmod_path__parse(int subtest);
+ int test__thread_map(int subtest);
+ int test__llvm(int subtest);
+ const char *test__llvm_subtest_get_desc(int subtest);
+ int test__llvm_subtest_get_nr(void);
+ int test__bpf(int subtest);
+ const char *test__bpf_subtest_get_desc(int subtest);
+ int test__bpf_subtest_get_nr(void);
+ int test_session_topology(int subtest);
++>>>>>>> 77a0cf682f79 (perf test: Print result for each BPF subtest)
  
  #if defined(__arm__) || defined(__aarch64__)
  #ifdef HAVE_DWARF_UNWIND_SUPPORT
* Unmerged path tools/perf/tests/bpf.c
* Unmerged path tools/perf/tests/bpf.c
* Unmerged path tools/perf/tests/builtin-test.c
* Unmerged path tools/perf/tests/tests.h
