ALSA: hda/ca0132: merge strings just for printk

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit 0cc1aa716226abf9c52e920fc04999fcafa17c67
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/0cc1aa71.failed

This module has some function-local strings just for printk therefore
it can be merged into format string.

This commit applies this optimization.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 0cc1aa716226abf9c52e920fc04999fcafa17c67)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,08a08dd16eab..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -3950,14 -5502,59 +3950,69 @@@ static int ca0132_volume_tlv(struct snd
  	return err;
  }
  
++<<<<<<< HEAD
 +static int add_fx_switch(struct hda_codec *codec, hda_nid_t nid,
 +			 const char *pfx, int dir)
 +{
++=======
+ /* Add volume slider control for effect level */
+ static int ca0132_alt_add_effect_slider(struct hda_codec *codec, hda_nid_t nid,
+ 					const char *pfx, int dir)
+ {
+ 	char namestr[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];
+ 	int type = dir ? HDA_INPUT : HDA_OUTPUT;
+ 	struct snd_kcontrol_new knew =
+ 		HDA_CODEC_VOLUME_MONO(namestr, nid, 1, 0, type);
+ 
+ 	sprintf(namestr, "FX: %s %s Volume", pfx, dirstr[dir]);
+ 
+ 	knew.tlv.c = 0;
+ 	knew.tlv.p = 0;
+ 
+ 	switch (nid) {
+ 	case XBASS_XOVER:
+ 		knew.info = ca0132_alt_xbass_xover_slider_info;
+ 		knew.get = ca0132_alt_xbass_xover_slider_ctl_get;
+ 		knew.put = ca0132_alt_xbass_xover_slider_put;
+ 		break;
+ 	default:
+ 		knew.info = ca0132_alt_effect_slider_info;
+ 		knew.get = ca0132_alt_slider_ctl_get;
+ 		knew.put = ca0132_alt_effect_slider_put;
+ 		knew.private_value =
+ 			HDA_COMPOSE_AMP_VAL(nid, 1, 0, type);
+ 		break;
+ 	}
+ 
+ 	return snd_hda_ctl_add(codec, nid, snd_ctl_new1(&knew, codec));
+ }
+ 
+ /*
+  * Added FX: prefix for the alternative codecs, because otherwise the surround
+  * effect would conflict with the Surround sound volume control. Also seems more
+  * clear as to what the switches do. Left alone for others.
+  */
+ static int add_fx_switch(struct hda_codec *codec, hda_nid_t nid,
+ 			 const char *pfx, int dir)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
++>>>>>>> 0cc1aa716226 (ALSA: hda/ca0132: merge strings just for printk)
  	char namestr[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];
  	int type = dir ? HDA_INPUT : HDA_OUTPUT;
  	struct snd_kcontrol_new knew =
  		CA0132_CODEC_MUTE_MONO(namestr, nid, 1, type);
++<<<<<<< HEAD
 +	sprintf(namestr, "%s %s Switch", pfx, dirstr[dir]);
++=======
+ 	/* If using alt_controls, add FX: prefix. But, don't add FX:
+ 	 * prefix to OutFX or InFX enable controls.
+ 	 */
+ 	if ((spec->use_alt_controls) && (nid <= IN_EFFECT_END_NID))
+ 		sprintf(namestr, "FX: %s %s Switch", pfx, dirstr[dir]);
+ 	else
+ 		sprintf(namestr, "%s %s Switch", pfx, dirstr[dir]);
+ 
++>>>>>>> 0cc1aa716226 (ALSA: hda/ca0132: merge strings just for printk)
  	return snd_hda_ctl_add(codec, nid, snd_ctl_new1(&knew, codec));
  }
  
* Unmerged path sound/pci/hda/patch_ca0132.c
