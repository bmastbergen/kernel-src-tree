xfs: pass an on-disk extent to xfs_bmbt_validate_extent

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Christoph Hellwig <hch@lst.de>
commit f36bc228e1b94d9994915cba67588104ebe763ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f36bc228.failed

This prepares for getting rid of the current in-memory extent format.
At the end of the series we will change the calling convention again
to pass the xfs_bmbt_irec structure once it is available everywhere.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit f36bc228e1b94d9994915cba67588104ebe763ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_bmap.c
#	fs/xfs/libxfs/xfs_inode_fork.c
diff --cc fs/xfs/libxfs/xfs_bmap.c
index 905742f2f1f9,8ce7bf19916f..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@@ -1263,13 -1260,15 +1263,17 @@@ xfs_bmap_read_extents
  		frp = XFS_BMBT_REC_ADDR(mp, block, 1);
  		for (j = 0; j < num_recs; j++, i++, frp++) {
  			xfs_bmbt_rec_host_t *trp = xfs_iext_get_ext(ifp, i);
- 			trp->l0 = be64_to_cpu(frp->l0);
- 			trp->l1 = be64_to_cpu(frp->l1);
- 			if (!xfs_bmbt_validate_extent(mp, whichfork, trp)) {
+ 			if (!xfs_bmbt_validate_extent(mp, whichfork, frp)) {
  				XFS_ERROR_REPORT("xfs_bmap_read_extents(2)",
  						 XFS_ERRLEVEL_LOW, mp);
 -				error = -EFSCORRUPTED;
 -				goto out_brelse;
 +				goto error0;
  			}
++<<<<<<< HEAD
++=======
+ 			trp->l0 = be64_to_cpu(frp->l0);
+ 			trp->l1 = be64_to_cpu(frp->l1);
+ 			trace_xfs_read_extent(ip, i, state, _THIS_IP_);
++>>>>>>> f36bc228e1b9 (xfs: pass an on-disk extent to xfs_bmbt_validate_extent)
  		}
  		xfs_trans_brelse(tp, bp);
  		bno = nextbno;
diff --cc fs/xfs/libxfs/xfs_inode_fork.c
index f83028029221,abe601b48c9c..000000000000
--- a/fs/xfs/libxfs/xfs_inode_fork.c
+++ b/fs/xfs/libxfs/xfs_inode_fork.c
@@@ -264,8 -376,10 +262,14 @@@ xfs_iformat_extents
  						 XFS_ERRLEVEL_LOW, mp);
  				return -EFSCORRUPTED;
  			}
++<<<<<<< HEAD
++=======
+ 			ep->l0 = get_unaligned_be64(&dp->l0);
+ 			ep->l1 = get_unaligned_be64(&dp->l1);
+ 			trace_xfs_read_extent(ip, i, state, _THIS_IP_);
++>>>>>>> f36bc228e1b9 (xfs: pass an on-disk extent to xfs_bmbt_validate_extent)
  		}
 +		XFS_BMAP_TRACE_EXLIST(ip, nex, whichfork);
  	}
  	ifp->if_flags |= XFS_IFEXTENTS;
  	return 0;
@@@ -695,6 -775,10 +697,11 @@@ xfs_iextents_copy
  		/* Translate to on disk format */
  		put_unaligned_be64(ep->l0, &dp->l0);
  		put_unaligned_be64(ep->l1, &dp->l1);
++<<<<<<< HEAD
++=======
+ 		ASSERT(xfs_bmbt_validate_extent(ip->i_mount, whichfork, dp));
+ 
++>>>>>>> f36bc228e1b9 (xfs: pass an on-disk extent to xfs_bmbt_validate_extent)
  		dp++;
  		copied++;
  	}
* Unmerged path fs/xfs/libxfs/xfs_bmap.c
diff --git a/fs/xfs/libxfs/xfs_bmap_btree.h b/fs/xfs/libxfs/xfs_bmap_btree.h
index 64437f0f7a7e..7b78ea1a7cfe 100644
--- a/fs/xfs/libxfs/xfs_bmap_btree.h
+++ b/fs/xfs/libxfs/xfs_bmap_btree.h
@@ -137,9 +137,9 @@ extern struct xfs_btree_cur *xfs_bmbt_init_cursor(struct xfs_mount *,
  * Check that the extent does not contain an invalid unwritten extent flag.
  */
 static inline bool xfs_bmbt_validate_extent(struct xfs_mount *mp, int whichfork,
-		struct xfs_bmbt_rec_host *ep)
+		struct xfs_bmbt_rec *ep)
 {
-	if (ep->l0 >> (64 - BMBT_EXNTFLAG_BITLEN) == 0)
+	if (get_unaligned_be64(&ep->l0) >> (64 - BMBT_EXNTFLAG_BITLEN) == 0)
 		return true;
 	if (whichfork == XFS_DATA_FORK &&
 	    xfs_sb_version_hasextflgbit(&mp->m_sb))
* Unmerged path fs/xfs/libxfs/xfs_inode_fork.c
