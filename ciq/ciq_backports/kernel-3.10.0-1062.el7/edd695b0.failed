perf clang: Compile BPF script using builtin clang support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit edd695b032ba3a90c3bb07d934500b2c390a61ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/edd695b0.failed

After this patch, perf utilizes builtin clang support to build BPF
script, no longer depend on external clang, but fallbacking to it
if for some reason the builtin compiling framework fails.

Test:

  $ type clang
  -bash: type: clang: not found
  $ cat ~/.perfconfig
  $ echo '#define LINUX_VERSION_CODE 0x040700' > ./test.c
  $ cat ./tools/perf/tests/bpf-script-example.c >> ./test.c
  $ ./perf record -v --dry-run -e ./test.c 2>&1 | grep builtin
  bpf: successfull builtin compilation
  $

Can't pass cflags so unable to include kernel headers now. Will be fixed
by following commits.

Committer notes:

Make sure '-v' comes before the '-e ./test.c' in the command line otherwise the
'verbose' variable will not be set when the bpf event is parsed and thus the
pr_debug indicating a 'successfull builtin compilation' will not be output, as
the debug level (1) will be less than what 'verbose' has at that point (0).

	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Alexei Starovoitov <ast@fb.com>
	Cc: He Kuang <hekuang@huawei.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Joe Stringer <joe@ovn.org>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/20161126070354.141764-16-wangnan0@huawei.com
[ Spell check/reflow successfull pr_debug string ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit edd695b032ba3a90c3bb07d934500b2c390a61ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/bpf-loader.c
#	tools/perf/util/c++/clang-c.h
#	tools/perf/util/c++/clang.cpp
diff --cc tools/perf/util/bpf-loader.c
index 39bf9252ae96,36c861103291..000000000000
--- a/tools/perf/util/bpf-loader.c
+++ b/tools/perf/util/bpf-loader.c
@@@ -10,6 -12,13 +10,15 @@@
  #include "perf.h"
  #include "debug.h"
  #include "bpf-loader.h"
++<<<<<<< HEAD
++=======
+ #include "bpf-prologue.h"
+ #include "probe-event.h"
+ #include "probe-finder.h" // for MAX_PROBES
+ #include "parse-events.h"
+ #include "llvm-utils.h"
+ #include "c++/clang-c.h"
++>>>>>>> edd695b032ba (perf clang: Compile BPF script using builtin clang support)
  
  #define DEFINE_PRINT_FN(name, level) \
  static int libbpf_##name(const char *fmt, ...)	\
@@@ -39,10 -61,53 +48,58 @@@ struct bpf_object *bpf__prepare_load(co
  		libbpf_initialized = true;
  	}
  
++<<<<<<< HEAD
 +	obj = bpf_object__open(filename);
 +	if (!obj) {
++=======
+ 	obj = bpf_object__open_buffer(obj_buf, obj_buf_sz, name);
+ 	if (IS_ERR(obj)) {
+ 		pr_debug("bpf: failed to load buffer\n");
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	return obj;
+ }
+ 
+ struct bpf_object *bpf__prepare_load(const char *filename, bool source)
+ {
+ 	struct bpf_object *obj;
+ 
+ 	if (!libbpf_initialized) {
+ 		libbpf_set_print(libbpf_warning,
+ 				 libbpf_info,
+ 				 libbpf_debug);
+ 		libbpf_initialized = true;
+ 	}
+ 
+ 	if (source) {
+ 		int err;
+ 		void *obj_buf;
+ 		size_t obj_buf_sz;
+ 
+ 		perf_clang__init();
+ 		err = perf_clang__compile_bpf(filename, &obj_buf, &obj_buf_sz);
+ 		perf_clang__cleanup();
+ 		if (err) {
+ 			pr_warning("bpf: builtin compilation failed: %d, try external compiler\n", err);
+ 			err = llvm__compile_bpf(filename, &obj_buf, &obj_buf_sz);
+ 			if (err)
+ 				return ERR_PTR(-BPF_LOADER_ERRNO__COMPILE);
+ 		} else
+ 			pr_debug("bpf: successfull builtin compilation\n");
+ 		obj = bpf_object__open_buffer(obj_buf, obj_buf_sz, filename);
+ 
+ 		if (!IS_ERR(obj) && llvm_param.dump_obj)
+ 			llvm__dump_obj(filename, obj_buf, obj_buf_sz);
+ 
+ 		free(obj_buf);
+ 	} else
+ 		obj = bpf_object__open(filename);
+ 
+ 	if (IS_ERR(obj)) {
++>>>>>>> edd695b032ba (perf clang: Compile BPF script using builtin clang support)
  		pr_debug("bpf: failed to load %s\n", filename);
 -		return obj;
 +		return ERR_PTR(-EINVAL);
  	}
  
  	return obj;
* Unmerged path tools/perf/util/c++/clang-c.h
* Unmerged path tools/perf/util/c++/clang.cpp
* Unmerged path tools/perf/util/bpf-loader.c
* Unmerged path tools/perf/util/c++/clang-c.h
* Unmerged path tools/perf/util/c++/clang.cpp
