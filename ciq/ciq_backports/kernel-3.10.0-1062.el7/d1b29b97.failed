ipmi:watchdog: Rework locking and handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Corey Minyard <cminyard@mvista.com>
commit d1b29b9742a2a9a7931dcd59615a27ee9cf2c804
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/d1b29b97.failed

Simplify things by creating one set of message handling data for
setting the watchdog and doing a heartbeat.  Rework the locking
to avoid some (probably not very important) races and to avoid
a fairly unlikely infinite recursion.

Get rid of ipmi_ignore_heartbeat, it wasn't used, and use
watchdog_user to tell if we have a working IPMI device below
us.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
(cherry picked from commit d1b29b9742a2a9a7931dcd59615a27ee9cf2c804)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/ipmi/ipmi_watchdog.c
diff --cc drivers/char/ipmi/ipmi_watchdog.c
index ba78d51b98bb,d903096f882d..000000000000
--- a/drivers/char/ipmi/ipmi_watchdog.c
+++ b/drivers/char/ipmi/ipmi_watchdog.c
@@@ -896,10 -851,10 +874,15 @@@ static unsigned int ipmi_poll(struct fi
  
  	poll_wait(file, &read_q, wait);
  
- 	spin_lock(&ipmi_read_lock);
+ 	spin_lock_irq(&ipmi_read_lock);
  	if (data_to_read)
++<<<<<<< HEAD
 +		mask |= (POLLIN | POLLRDNORM);
 +	spin_unlock(&ipmi_read_lock);
++=======
+ 		mask |= (EPOLLIN | EPOLLRDNORM);
+ 	spin_unlock_irq(&ipmi_read_lock);
++>>>>>>> d1b29b9742a2 (ipmi:watchdog: Rework locking and handling)
  
  	return mask;
  }
@@@ -986,10 -944,10 +972,10 @@@ static void ipmi_wdog_pretimeout_handle
  	 * On some machines, the heartbeat will give an error and not
  	 * work unless we re-enable the timer.  So do so.
  	 */
- 	pretimeout_since_last_heartbeat = 1;
+ 	atomic_set(&pretimeout_since_last_heartbeat, 1);
  }
  
 -static const struct ipmi_user_hndl ipmi_hndlrs = {
 +static RH_KABI_CONST struct ipmi_user_hndl ipmi_hndlrs = {
  	.ipmi_recv_hndl           = ipmi_wdog_msg_handler,
  	.ipmi_watchdog_pretimeout = ipmi_wdog_pretimeout_handler
  };
* Unmerged path drivers/char/ipmi/ipmi_watchdog.c
