net/mlx5e: Add support for XDP_REDIRECT in device-out side

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add support for XDP_REDIRECT in device-out side (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 96.43%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 58b99ee3e3ebecfaccc5641a4014d92a818494a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/58b99ee3.failed

Add implementation for the ndo_xdp_xmit callback.

Dedicate a new set of XDP-SQ instances to satisfy the XDP_REDIRECT
requests.  These instances are totally separated from the existing
XDP-SQ objects that satisfy local XDP_TX actions.

Performance tests:

xdp_redirect_map from ConnectX-5 to ConnectX-5.
CPU: Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz
Packet-rate of 64B packets.

Single queue: 7 Mpps.
Multi queue: 55 Mpps.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 58b99ee3e3ebecfaccc5641a4014d92a818494a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,6dfab045925f..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -29,34 -29,35 +29,47 @@@
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
 -#ifndef __MLX5_EN_XDP_H__
 -#define __MLX5_EN_XDP_H__
  
 -#include "en.h"
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
  
 -#define MLX5E_XDP_MAX_MTU ((int)(PAGE_SIZE - \
 -				 MLX5_SKB_FRAG_SZ(XDP_PACKET_HEADROOM)))
 -#define MLX5E_XDP_MIN_INLINE (ETH_HLEN + VLAN_HLEN)
 -#define MLX5E_XDP_TX_DS_COUNT \
 -	((sizeof(struct mlx5e_tx_wqe) / MLX5_SEND_WQE_DS) + 1 /* SG DS */)
 +#include "ipath_kernel.h"
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
++=======
+ bool mlx5e_xdp_handle(struct mlx5e_rq *rq, struct mlx5e_dma_info *di,
+ 		      void *va, u16 *rx_headroom, u32 *len);
+ bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq);
+ void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq);
+ 
+ bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi);
+ int mlx5e_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames,
+ 		   u32 flags);
+ 
+ static inline void mlx5e_xmit_xdp_doorbell(struct mlx5e_xdpsq *sq)
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side):drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
  {
 -	struct mlx5_wq_cyc *wq = &sq->wq;
 -	struct mlx5e_tx_wqe *wqe;
 -	u16 pi = mlx5_wq_cyc_ctr2ix(wq, sq->pc - 1); /* last pi */
 -
 -	wqe  = mlx5_wq_cyc_get_wqe(wq, pi);
 -
 -	mlx5e_notify_hw(wq, sq->pc, sq->uar_map, &wqe->ctrl);
 +	return 0;
  }
  
 -#endif
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
 +}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index d500f9aa1bd7,3f21cafe6be3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -334,7 -340,11 +334,13 @@@ struct mlx5e_sq_dma 
  
  enum {
  	MLX5E_SQ_STATE_ENABLED,
 -	MLX5E_SQ_STATE_RECOVERING,
  	MLX5E_SQ_STATE_IPSEC,
++<<<<<<< HEAD
++=======
+ 	MLX5E_SQ_STATE_AM,
+ 	MLX5E_SQ_STATE_TLS,
+ 	MLX5E_SQ_STATE_REDIRECT,
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  };
  
  struct mlx5e_sq_wqe_info {
@@@ -581,6 -624,8 +590,11 @@@ struct mlx5e_channel_stats 
  	struct mlx5e_ch_stats ch;
  	struct mlx5e_sq_stats sq[MLX5E_MAX_NUM_TC];
  	struct mlx5e_rq_stats rq;
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_xdpsq_stats rq_xdpsq;
+ 	struct mlx5e_xdpsq_stats xdpsq;
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  } ____cacheline_aligned_in_smp;
  
  enum mlx5e_traffic_types {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 6cb0654a5d0a,fad947079a43..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -864,12 -1001,16 +865,19 @@@ static int mlx5e_alloc_xdpsq(struct mlx
  	sq->channel   = c;
  	sq->uar_map   = mdev->mlx5e_res.bfreg.map;
  	sq->min_inline_mode = params->tx_min_inline_mode;
++<<<<<<< HEAD
++=======
+ 	sq->hw_mtu    = MLX5E_SW2HW_MTU(params, params->sw_mtu);
+ 	sq->stats     = is_redirect ?
+ 		&c->priv->channel_stats[c->ix].xdpsq :
+ 		&c->priv->channel_stats[c->ix].rq_xdpsq;
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  
  	param->wq.db_numa_node = cpu_to_node(c->cpu);
 -	err = mlx5_wq_cyc_create(mdev, &param->wq, sqc_wq, wq, &sq->wq_ctrl);
 +	err = mlx5_wq_cyc_create(mdev, &param->wq, sqc_wq, &sq->wq, &sq->wq_ctrl);
  	if (err)
  		return err;
 -	wq->db = &wq->db[MLX5_SND_DBR];
 +	sq->wq.db = &sq->wq.db[MLX5_SND_DBR];
  
  	err = mlx5e_alloc_xdpsq_db(sq, cpu_to_node(c->cpu));
  	if (err)
@@@ -3887,7 -4300,8 +3915,12 @@@ static const struct net_device_ops mlx5
  	.ndo_rx_flow_steer	 = mlx5e_rx_flow_steer,
  #endif
  	.ndo_tx_timeout          = mlx5e_tx_timeout,
++<<<<<<< HEAD
 +	.extended.ndo_xdp	 = mlx5e_xdp,
++=======
+ 	.ndo_bpf		 = mlx5e_xdp,
+ 	.ndo_xdp_xmit            = mlx5e_xdp_xmit,
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  #ifdef CONFIG_NET_POLL_CONTROLLER
  	.ndo_poll_controller     = mlx5e_netpoll,
  #endif
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 764a2db65154,12fdf5c92b67..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -58,10 -68,17 +58,14 @@@ static const struct counter_desc sw_sta
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial_inner) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_stopped) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_dropped) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xmit_more) },
 -	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_recover) },
 -	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqes) },
 -	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
 -	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_udp_seg_rem) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqe_err) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_xmit) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_full) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_err) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_cqes) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_wqe_err) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_mpwqe_filler_cqes) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_mpwqe_filler_strides) },
@@@ -112,6 -133,9 +116,11 @@@ static void mlx5e_grp_sw_update_stats(s
  	for (i = 0; i < priv->profile->max_nch(priv->mdev); i++) {
  		struct mlx5e_channel_stats *channel_stats =
  			&priv->channel_stats[i];
++<<<<<<< HEAD
++=======
+ 		struct mlx5e_xdpsq_stats *xdpsq_red_stats = &channel_stats->xdpsq;
+ 		struct mlx5e_xdpsq_stats *xdpsq_stats = &channel_stats->rq_xdpsq;
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  		struct mlx5e_rq_stats *rq_stats = &channel_stats->rq;
  		struct mlx5e_ch_stats *ch_stats = &channel_stats->ch;
  		int j;
@@@ -141,7 -167,17 +150,21 @@@
  		s->rx_cache_empty += rq_stats->cache_empty;
  		s->rx_cache_busy  += rq_stats->cache_busy;
  		s->rx_cache_waive += rq_stats->cache_waive;
++<<<<<<< HEAD
 +		s->ch_eq_rearm += ch_stats->eq_rearm;
++=======
+ 		s->rx_congst_umr  += rq_stats->congst_umr;
+ 		s->ch_events      += ch_stats->events;
+ 		s->ch_poll        += ch_stats->poll;
+ 		s->ch_arm         += ch_stats->arm;
+ 		s->ch_aff_change  += ch_stats->aff_change;
+ 		s->ch_eq_rearm    += ch_stats->eq_rearm;
+ 		/* xdp redirect */
+ 		s->tx_xdp_xmit    += xdpsq_red_stats->xmit;
+ 		s->tx_xdp_full    += xdpsq_red_stats->full;
+ 		s->tx_xdp_err     += xdpsq_red_stats->err;
+ 		s->tx_xdp_cqes    += xdpsq_red_stats->cqes;
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  
  		for (j = 0; j < priv->max_opened_tc; j++) {
  			struct mlx5e_sq_stats *sq_stats = &channel_stats->sq[j];
@@@ -1112,12 -1178,35 +1135,34 @@@ static const struct counter_desc sq_sta
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, cqe_err) },
  };
  
++<<<<<<< HEAD
++=======
+ static const struct counter_desc rq_xdpsq_stats_desc[] = {
+ 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, xmit) },
+ 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, full) },
+ 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, err) },
+ 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, cqes) },
+ };
+ 
+ static const struct counter_desc xdpsq_stats_desc[] = {
+ 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, xmit) },
+ 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, full) },
+ 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, err) },
+ 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, cqes) },
+ };
+ 
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  static const struct counter_desc ch_stats_desc[] = {
 -	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, events) },
 -	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, poll) },
 -	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, arm) },
 -	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, aff_change) },
  	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, eq_rearm) },
  };
  
  #define NUM_RQ_STATS			ARRAY_SIZE(rq_stats_desc)
  #define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
++<<<<<<< HEAD
++=======
+ #define NUM_XDPSQ_STATS			ARRAY_SIZE(xdpsq_stats_desc)
+ #define NUM_RQ_XDPSQ_STATS		ARRAY_SIZE(rq_xdpsq_stats_desc)
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  #define NUM_CH_STATS			ARRAY_SIZE(ch_stats_desc)
  
  static int mlx5e_grp_channels_get_num_stats(struct mlx5e_priv *priv)
@@@ -1126,7 -1215,9 +1171,13 @@@
  
  	return (NUM_RQ_STATS * max_nch) +
  	       (NUM_CH_STATS * max_nch) +
++<<<<<<< HEAD
 +	       (NUM_SQ_STATS * max_nch * priv->max_opened_tc);
++=======
+ 	       (NUM_SQ_STATS * max_nch * priv->max_opened_tc) +
+ 	       (NUM_RQ_XDPSQ_STATS * max_nch) +
+ 	       (NUM_XDPSQ_STATS * max_nch);
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  }
  
  static int mlx5e_grp_channels_fill_strings(struct mlx5e_priv *priv, u8 *data,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 9c603217203a,a4c035aedd46..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -44,6 -44,8 +44,11 @@@
  #define MLX5E_DECLARE_STAT(type, fld) #fld, offsetof(type, fld)
  #define MLX5E_DECLARE_RX_STAT(type, fld) "rx%d_"#fld, offsetof(type, fld)
  #define MLX5E_DECLARE_TX_STAT(type, fld) "tx%d_"#fld, offsetof(type, fld)
++<<<<<<< HEAD
++=======
+ #define MLX5E_DECLARE_XDPSQ_STAT(type, fld) "tx%d_xdp_"#fld, offsetof(type, fld)
+ #define MLX5E_DECLARE_RQ_XDPSQ_STAT(type, fld) "rx%d_xdp_tx_"#fld, offsetof(type, fld)
++>>>>>>> 58b99ee3e3eb (net/mlx5e: Add support for XDP_REDIRECT in device-out side)
  #define MLX5E_DECLARE_CH_STAT(type, fld) "ch%d_"#fld, offsetof(type, fld)
  
  struct counter_desc {
@@@ -76,10 -81,17 +81,14 @@@ struct mlx5e_sw_stats 
  	u64 tx_csum_partial;
  	u64 tx_csum_partial_inner;
  	u64 tx_queue_stopped;
 +	u64 tx_queue_wake;
  	u64 tx_queue_dropped;
  	u64 tx_xmit_more;
 -	u64 tx_recover;
 -	u64 tx_cqes;
 -	u64 tx_queue_wake;
 -	u64 tx_udp_seg_rem;
  	u64 tx_cqe_err;
+ 	u64 tx_xdp_xmit;
+ 	u64 tx_xdp_full;
+ 	u64 tx_xdp_err;
+ 	u64 tx_xdp_cqes;
  	u64 rx_wqe_err;
  	u64 rx_mpwqe_filler_cqes;
  	u64 rx_mpwqe_filler_strides;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
index b54d059b5bf3..253416671506 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
@@ -55,6 +55,8 @@ int mlx5e_napi_poll(struct napi_struct *napi, int budget)
 	for (i = 0; i < c->num_tc; i++)
 		busy |= mlx5e_poll_tx_cq(&c->sq[i].cq, budget);
 
+	busy |= mlx5e_poll_xdpsq_cq(&c->xdpsq.cq);
+
 	if (c->xdp)
 		busy |= mlx5e_poll_xdpsq_cq(&c->rq.xdpsq.cq);
 
@@ -91,6 +93,7 @@ int mlx5e_napi_poll(struct napi_struct *napi, int budget)
 
 	mlx5e_cq_arm(&c->rq.cq);
 	mlx5e_cq_arm(&c->icosq.cq);
+	mlx5e_cq_arm(&c->xdpsq.cq);
 
 	return work_done;
 }
