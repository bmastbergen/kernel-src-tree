x86/microcode: Update the new microcode revision unconditionally

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] microcode: Update the new microcode revision unconditionally (Prarit Bhargava) [1599273]
Rebuild_FUZZ: 96.77%
commit-author Filippo Sironi <sironi@amazon.de>
commit 8da38ebaad23fe1b0c4a205438676f6356607cfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/8da38eba.failed

Handle the case where microcode gets loaded on the BSP's hyperthread
sibling first and the boot_cpu_data's microcode revision doesn't get
updated because of early exit due to the siblings sharing a microcode
engine.

For that, simply write the updated revision on all CPUs unconditionally.

	Signed-off-by: Filippo Sironi <sironi@amazon.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: prarit@redhat.com
	Cc: stable@vger.kernel.org
Link: http://lkml.kernel.org/r/1533050970-14385-1-git-send-email-sironi@amazon.de
(cherry picked from commit 8da38ebaad23fe1b0c4a205438676f6356607cfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/microcode/amd.c
#	arch/x86/kernel/cpu/microcode/intel.c
diff --cc arch/x86/kernel/cpu/microcode/amd.c
index ccea10795c1b,07b5fc00b188..000000000000
--- a/arch/x86/kernel/cpu/microcode/amd.c
+++ b/arch/x86/kernel/cpu/microcode/amd.c
@@@ -708,7 -504,8 +708,12 @@@ static enum ucode_state apply_microcode
  	struct microcode_amd *mc_amd;
  	struct ucode_cpu_info *uci;
  	struct ucode_patch *p;
++<<<<<<< HEAD
 +	u32 rev;
++=======
+ 	enum ucode_state ret;
+ 	u32 rev, dummy;
++>>>>>>> 8da38ebaad23 (x86/microcode: Update the new microcode revision unconditionally)
  
  	BUG_ON(raw_smp_processor_id() != cpu);
  
diff --cc arch/x86/kernel/cpu/microcode/intel.c
index 2bc876d4a5bb,16936a24795c..000000000000
--- a/arch/x86/kernel/cpu/microcode/intel.c
+++ b/arch/x86/kernel/cpu/microcode/intel.c
@@@ -886,29 -790,12 +886,33 @@@ static int collect_cpu_info(int cpu_num
  	return 0;
  }
  
 +/*
 + * return 0 - no update found
 + * return 1 - found update
 + */
 +static int get_matching_mc(struct microcode_intel *mc, int cpu)
 +{
 +	struct cpu_signature cpu_sig;
 +	unsigned int csig, cpf, crev;
 +
 +	collect_cpu_info(cpu, &cpu_sig);
 +
 +	csig = cpu_sig.sig;
 +	cpf = cpu_sig.pf;
 +	crev = cpu_sig.rev;
 +
 +	return has_newer_microcode(mc, csig, cpf, crev);
 +}
 +
  static enum ucode_state apply_microcode_intel(int cpu)
  {
 -	struct ucode_cpu_info *uci = ucode_cpu_info + cpu;
 -	struct cpuinfo_x86 *c = &cpu_data(cpu);
  	struct microcode_intel *mc;
++<<<<<<< HEAD
 +	struct ucode_cpu_info *uci;
 +	struct cpuinfo_x86 *c = &cpu_data(cpu);
++=======
+ 	enum ucode_state ret;
++>>>>>>> 8da38ebaad23 (x86/microcode: Update the new microcode revision unconditionally)
  	static int prev_rev;
  	u32 rev;
  
* Unmerged path arch/x86/kernel/cpu/microcode/amd.c
* Unmerged path arch/x86/kernel/cpu/microcode/intel.c
