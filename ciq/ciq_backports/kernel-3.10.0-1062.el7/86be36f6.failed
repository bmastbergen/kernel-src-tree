powerpc: bpf: Fix generation of load/store DW instructions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powerpc] bpf: Fix generation of load/store DW instructions (Yauheni Kaliuta) [1684367]
Rebuild_FUZZ: 91.59%
commit-author Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
commit 86be36f6502c52ddb4b85938145324fd07332da1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/86be36f6.failed

Yauheni Kaliuta pointed out that PTR_TO_STACK store/load verifier test
was failing on powerpc64 BE, and rightfully indicated that the PPC_LD()
macro is not masking away the last two bits of the offset per the ISA,
resulting in the generation of 'lwa' instruction instead of the intended
'ld' instruction.

Segher also pointed out that we can't simply mask away the last two bits
as that will result in loading/storing from/to a memory location that
was not intended.

This patch addresses this by using ldx/stdx if the offset is not
word-aligned. We load the offset into a temporary register (TMP_REG_2)
and use that as the index register in a subsequent ldx/stdx. We fix
PPC_LD() macro to mask off the last two bits, but enhance PPC_BPF_LL()
and PPC_BPF_STL() to factor in the offset value and generate the proper
instruction sequence. We also convert all existing users of PPC_LD() and
PPC_STD() to use these macros. All existing uses of these macros have
been audited to ensure that TMP_REG_2 can be clobbered.

Fixes: 156d0e290e96 ("powerpc/ebpf/jit: Implement JIT compiler for extended BPF")
	Cc: stable@vger.kernel.org # v4.9+

	Reported-by: Yauheni Kaliuta <yauheni.kaliuta@redhat.com>
	Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 86be36f6502c52ddb4b85938145324fd07332da1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/net/bpf_jit.h
#	arch/powerpc/net/bpf_jit32.h
#	arch/powerpc/net/bpf_jit64.h
#	arch/powerpc/net/bpf_jit_comp64.c
diff --cc arch/powerpc/net/bpf_jit.h
index 676a310e1761,dcac37745b05..000000000000
--- a/arch/powerpc/net/bpf_jit.h
+++ b/arch/powerpc/net/bpf_jit.h
@@@ -86,32 -51,56 +86,62 @@@ DECLARE_LOAD_FUNC(sk_load_byte_msh)
  #define PPC_LIS(r, i)		PPC_ADDIS(r, 0, i)
  #define PPC_STD(r, base, i)	EMIT(PPC_INST_STD | ___PPC_RS(r) |	      \
  				     ___PPC_RA(base) | ((i) & 0xfffc))
++<<<<<<< HEAD
++=======
+ #define PPC_STDX(r, base, b)	EMIT(PPC_INST_STDX | ___PPC_RS(r) |	      \
+ 				     ___PPC_RA(base) | ___PPC_RB(b))
+ #define PPC_STDU(r, base, i)	EMIT(PPC_INST_STDU | ___PPC_RS(r) |	      \
+ 				     ___PPC_RA(base) | ((i) & 0xfffc))
+ #define PPC_STW(r, base, i)	EMIT(PPC_INST_STW | ___PPC_RS(r) |	      \
+ 				     ___PPC_RA(base) | IMM_L(i))
+ #define PPC_STWU(r, base, i)	EMIT(PPC_INST_STWU | ___PPC_RS(r) |	      \
+ 				     ___PPC_RA(base) | IMM_L(i))
+ #define PPC_STH(r, base, i)	EMIT(PPC_INST_STH | ___PPC_RS(r) |	      \
+ 				     ___PPC_RA(base) | IMM_L(i))
+ #define PPC_STB(r, base, i)	EMIT(PPC_INST_STB | ___PPC_RS(r) |	      \
+ 				     ___PPC_RA(base) | IMM_L(i))
++>>>>>>> 86be36f6502c (powerpc: bpf: Fix generation of load/store DW instructions)
  
 -#define PPC_LBZ(r, base, i)	EMIT(PPC_INST_LBZ | ___PPC_RT(r) |	      \
 -				     ___PPC_RA(base) | IMM_L(i))
  #define PPC_LD(r, base, i)	EMIT(PPC_INST_LD | ___PPC_RT(r) |	      \
- 				     ___PPC_RA(base) | IMM_L(i))
+ 				     ___PPC_RA(base) | ((i) & 0xfffc))
+ #define PPC_LDX(r, base, b)	EMIT(PPC_INST_LDX | ___PPC_RT(r) |	      \
+ 				     ___PPC_RA(base) | ___PPC_RB(b))
  #define PPC_LWZ(r, base, i)	EMIT(PPC_INST_LWZ | ___PPC_RT(r) |	      \
  				     ___PPC_RA(base) | IMM_L(i))
  #define PPC_LHZ(r, base, i)	EMIT(PPC_INST_LHZ | ___PPC_RT(r) |	      \
  				     ___PPC_RA(base) | IMM_L(i))
  #define PPC_LHBRX(r, base, b)	EMIT(PPC_INST_LHBRX | ___PPC_RT(r) |	      \
  				     ___PPC_RA(base) | ___PPC_RB(b))
 -#define PPC_LDBRX(r, base, b)	EMIT(PPC_INST_LDBRX | ___PPC_RT(r) |	      \
 -				     ___PPC_RA(base) | ___PPC_RB(b))
 +/* Convenience helpers for the above with 'far' offsets: */
 +#define PPC_LD_OFFS(r, base, i) do { if ((i) < 32768) PPC_LD(r, base, i);     \
 +		else {	PPC_ADDIS(r, base, IMM_HA(i));			      \
 +			PPC_LD(r, r, IMM_L(i)); } } while(0)
 +
++<<<<<<< HEAD
 +#define PPC_LWZ_OFFS(r, base, i) do { if ((i) < 32768) PPC_LWZ(r, base, i);   \
 +		else {	PPC_ADDIS(r, base, IMM_HA(i));			      \
 +			PPC_LWZ(r, r, IMM_L(i)); } } while(0)
  
 +#define PPC_LHZ_OFFS(r, base, i) do { if ((i) < 32768) PPC_LHZ(r, base, i);   \
 +		else {	PPC_ADDIS(r, base, IMM_HA(i));			      \
 +			PPC_LHZ(r, r, IMM_L(i)); } } while(0)
 +
++=======
+ #define PPC_BPF_LDARX(t, a, b, eh) EMIT(PPC_INST_LDARX | ___PPC_RT(t) |	      \
+ 					___PPC_RA(a) | ___PPC_RB(b) |	      \
+ 					__PPC_EH(eh))
+ #define PPC_BPF_LWARX(t, a, b, eh) EMIT(PPC_INST_LWARX | ___PPC_RT(t) |	      \
+ 					___PPC_RA(a) | ___PPC_RB(b) |	      \
+ 					__PPC_EH(eh))
+ #define PPC_BPF_STWCX(s, a, b)	EMIT(PPC_INST_STWCX | ___PPC_RS(s) |	      \
+ 					___PPC_RA(a) | ___PPC_RB(b))
+ #define PPC_BPF_STDCX(s, a, b)	EMIT(PPC_INST_STDCX | ___PPC_RS(s) |	      \
+ 					___PPC_RA(a) | ___PPC_RB(b))
++>>>>>>> 86be36f6502c (powerpc: bpf: Fix generation of load/store DW instructions)
  #define PPC_CMPWI(a, i)		EMIT(PPC_INST_CMPWI | ___PPC_RA(a) | IMM_L(i))
  #define PPC_CMPDI(a, i)		EMIT(PPC_INST_CMPDI | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_CMPW(a, b)		EMIT(PPC_INST_CMPW | ___PPC_RA(a) |	      \
 -					___PPC_RB(b))
 -#define PPC_CMPD(a, b)		EMIT(PPC_INST_CMPD | ___PPC_RA(a) |	      \
 -					___PPC_RB(b))
  #define PPC_CMPLWI(a, i)	EMIT(PPC_INST_CMPLWI | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_CMPLDI(a, i)	EMIT(PPC_INST_CMPLDI | ___PPC_RA(a) | IMM_L(i))
 -#define PPC_CMPLW(a, b)		EMIT(PPC_INST_CMPLW | ___PPC_RA(a) |	      \
 -					___PPC_RB(b))
 -#define PPC_CMPLD(a, b)		EMIT(PPC_INST_CMPLD | ___PPC_RA(a) |	      \
 -					___PPC_RB(b))
 +#define PPC_CMPLW(a, b)		EMIT(PPC_INST_CMPLW | ___PPC_RA(a) | ___PPC_RB(b))
  
  #define PPC_SUB(d, a, b)	EMIT(PPC_INST_SUB | ___PPC_RT(d) |	      \
  				     ___PPC_RB(a) | ___PPC_RA(b))
* Unmerged path arch/powerpc/net/bpf_jit32.h
* Unmerged path arch/powerpc/net/bpf_jit64.h
* Unmerged path arch/powerpc/net/bpf_jit_comp64.c
diff --git a/arch/powerpc/include/asm/ppc-opcode.h b/arch/powerpc/include/asm/ppc-opcode.h
index 98bb411db342..35fc1a6542ce 100644
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@ -206,10 +206,12 @@
 
 /* Misc instructions for BPF compiler */
 #define PPC_INST_LD			0xe8000000
+#define PPC_INST_LDX			0x7c00002a
 #define PPC_INST_LHZ			0xa0000000
 #define PPC_INST_LHBRX			0x7c00062c
 #define PPC_INST_LWZ			0x80000000
 #define PPC_INST_STD			0xf8000000
+#define PPC_INST_STDX			0x7c00012a
 #define PPC_INST_STDU			0xf8000001
 #define PPC_INST_STW			0x90000000
 #define PPC_INST_STWU			0x94000000
* Unmerged path arch/powerpc/net/bpf_jit.h
* Unmerged path arch/powerpc/net/bpf_jit32.h
* Unmerged path arch/powerpc/net/bpf_jit64.h
* Unmerged path arch/powerpc/net/bpf_jit_comp64.c
