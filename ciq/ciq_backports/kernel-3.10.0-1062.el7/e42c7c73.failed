ALSA: hda/ca0132 - Add Recon3D startup functions and setup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Connor McAdams <conmanx360@gmail.com>
commit e42c7c7313e41f121d252711e35deae7964c95ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e42c7c73.failed

This patch adds functions for Recon3D startup, and sets values for
things such as use_pci_mmio. It also renames some functions and tables
from the sbz prefix into ca0132, as the Recon3D uses them as well.

	Signed-off-by: Connor McAdams <conmanx360@gmail.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit e42c7c7313e41f121d252711e35deae7964c95ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 7b95f49cd688,c938298cb103..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -710,7 -897,9 +710,11 @@@ struct ca0132_spec 
  	const struct hda_verb *base_init_verbs;
  	const struct hda_verb *base_exit_verbs;
  	const struct hda_verb *chip_init_verbs;
++<<<<<<< HEAD
++=======
+ 	const struct hda_verb *desktop_init_verbs;
++>>>>>>> e42c7c7313e4 (ALSA: hda/ca0132 - Add Recon3D startup functions and setup)
  	struct hda_verb *spec_init_verbs;
 -	struct auto_pin_cfg autocfg;
  
  	/* Nodes configurations */
  	struct hda_multi_out multiout;
@@@ -4573,8 -6836,27 +4577,32 @@@ static struct hda_verb ca0132_init_verb
  	{0x15, 0x546, 0xC9},
  	{0x15, 0x53B, 0xCE},
  	{0x15, 0x5E8, 0xC9},
++<<<<<<< HEAD
 +	{0x15, 0x717, 0x0D},
 +	{0x15, 0x718, 0x20},
++=======
+ 	{}
+ };
+ 
+ /* Extra init verbs for desktop cards. */
+ static struct hda_verb ca0132_init_verbs1[] = {
+ 	{0x15, 0x70D, 0x20},
+ 	{0x15, 0x70E, 0x19},
+ 	{0x15, 0x707, 0x00},
+ 	{0x15, 0x539, 0xCE},
+ 	{0x15, 0x546, 0xC9},
+ 	{0x15, 0x70D, 0xB7},
+ 	{0x15, 0x70E, 0x09},
+ 	{0x15, 0x707, 0x10},
+ 	{0x15, 0x70D, 0xAF},
+ 	{0x15, 0x70E, 0x09},
+ 	{0x15, 0x707, 0x01},
+ 	{0x15, 0x707, 0x05},
+ 	{0x15, 0x70D, 0x73},
+ 	{0x15, 0x70E, 0x09},
+ 	{0x15, 0x707, 0x14},
+ 	{0x15, 0x6FF, 0xC4},
++>>>>>>> e42c7c7313e4 (ALSA: hda/ca0132 - Add Recon3D startup functions and setup)
  	{}
  };
  
@@@ -4733,6 -7029,221 +4761,224 @@@ static void ca0132_exit_chip(struct hda
  		dsp_reset(codec);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * This fixes a problem that was hard to reproduce. Very rarely, I would
+  * boot up, and there would be no sound, but the DSP indicated it had loaded
+  * properly. I did a few memory dumps to see if anything was different, and
+  * there were a few areas of memory uninitialized with a1a2a3a4. This function
+  * checks if those areas are uninitialized, and if they are, it'll attempt to
+  * reload the card 3 times. Usually it fixes by the second.
+  */
+ static void sbz_dsp_startup_check(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 	unsigned int dsp_data_check[4];
+ 	unsigned int cur_address = 0x390;
+ 	unsigned int i;
+ 	unsigned int failure = 0;
+ 	unsigned int reload = 3;
+ 
+ 	if (spec->startup_check_entered)
+ 		return;
+ 
+ 	spec->startup_check_entered = true;
+ 
+ 	for (i = 0; i < 4; i++) {
+ 		chipio_read(codec, cur_address, &dsp_data_check[i]);
+ 		cur_address += 0x4;
+ 	}
+ 	for (i = 0; i < 4; i++) {
+ 		if (dsp_data_check[i] == 0xa1a2a3a4)
+ 			failure = 1;
+ 	}
+ 
+ 	codec_dbg(codec, "Startup Check: %d ", failure);
+ 	if (failure)
+ 		codec_info(codec, "DSP not initialized properly. Attempting to fix.");
+ 	/*
+ 	 * While the failure condition is true, and we haven't reached our
+ 	 * three reload limit, continue trying to reload the driver and
+ 	 * fix the issue.
+ 	 */
+ 	while (failure && (reload != 0)) {
+ 		codec_info(codec, "Reloading... Tries left: %d", reload);
+ 		sbz_exit_chip(codec);
+ 		spec->dsp_state = DSP_DOWNLOAD_INIT;
+ 		codec->patch_ops.init(codec);
+ 		failure = 0;
+ 		for (i = 0; i < 4; i++) {
+ 			chipio_read(codec, cur_address, &dsp_data_check[i]);
+ 			cur_address += 0x4;
+ 		}
+ 		for (i = 0; i < 4; i++) {
+ 			if (dsp_data_check[i] == 0xa1a2a3a4)
+ 				failure = 1;
+ 		}
+ 		reload--;
+ 	}
+ 
+ 	if (!failure && reload < 3)
+ 		codec_info(codec, "DSP fixed.");
+ 
+ 	if (!failure)
+ 		return;
+ 
+ 	codec_info(codec, "DSP failed to initialize properly. Either try a full shutdown or a suspend to clear the internal memory.");
+ }
+ 
+ /*
+  * This is for the extra volume verbs 0x797 (left) and 0x798 (right). These add
+  * extra precision for decibel values. If you had the dB value in floating point
+  * you would take the value after the decimal point, multiply by 64, and divide
+  * by 2. So for 8.59, it's (59 * 64) / 100. Useful if someone wanted to
+  * implement fixed point or floating point dB volumes. For now, I'll set them
+  * to 0 just incase a value has lingered from a boot into Windows.
+  */
+ static void ca0132_alt_vol_setup(struct hda_codec *codec)
+ {
+ 	snd_hda_codec_write(codec, 0x02, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x02, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x03, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x03, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x04, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x04, 0, 0x798, 0x00);
+ 	snd_hda_codec_write(codec, 0x07, 0, 0x797, 0x00);
+ 	snd_hda_codec_write(codec, 0x07, 0, 0x798, 0x00);
+ }
+ 
+ /*
+  * Extra commands that don't really fit anywhere else.
+  */
+ static void sbz_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	writel(0x00820680, spec->mem_base + 0x01C);
+ 	writel(0x00820680, spec->mem_base + 0x01C);
+ 
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfc);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfd);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfe);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xff);
+ 
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x44);
+ }
+ 
+ static void r3d_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfc);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfd);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xfe);
+ 	snd_hda_codec_write(codec, 0x15, 0, 0xd00, 0xff);
+ 
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x1E);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x1C);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x5B);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x44);
+ }
+ 
+ static void r3di_pre_dsp_setup(struct hda_codec *codec)
+ {
+ 	chipio_write(codec, 0x18b0a4, 0x000000c2);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x1E);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x1C);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x5B);
+ 
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_LOW, 0x20);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_ADDRESS_HIGH, 0x19);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x00);
+ 	snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0,
+ 			    VENDOR_CHIPIO_8051_DATA_WRITE, 0x40);
+ 
+ 	snd_hda_codec_write(codec, 0x11, 0,
+ 			AC_VERB_SET_PIN_WIDGET_CONTROL, 0x04);
+ }
+ 
+ /*
+  * These are sent before the DSP is downloaded. Not sure
+  * what they do, or if they're necessary. Could possibly
+  * be removed. Figure they're better to leave in.
+  */
+ static void ca0132_mmio_init(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	writel(0x00000000, spec->mem_base + 0x400);
+ 	writel(0x00000000, spec->mem_base + 0x408);
+ 	writel(0x00000000, spec->mem_base + 0x40C);
+ 	writel(0x00880680, spec->mem_base + 0x01C);
+ 	writel(0x00000083, spec->mem_base + 0xC0C);
+ 	writel(0x00000030, spec->mem_base + 0xC00);
+ 	writel(0x00000000, spec->mem_base + 0xC04);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x00000003, spec->mem_base + 0xC0C);
+ 	writel(0x000000C1, spec->mem_base + 0xC08);
+ 	writel(0x000000F1, spec->mem_base + 0xC08);
+ 	writel(0x00000001, spec->mem_base + 0xC08);
+ 	writel(0x000000C7, spec->mem_base + 0xC08);
+ 	writel(0x000000C1, spec->mem_base + 0xC08);
+ 	writel(0x00000080, spec->mem_base + 0xC04);
+ }
+ 
+ /*
+  * Extra init functions for alternative ca0132 codecs. Done
+  * here so they don't clutter up the main ca0132_init function
+  * anymore than they have to.
+  */
+ static void ca0132_alt_init(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 
+ 	ca0132_alt_vol_setup(codec);
+ 
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		codec_dbg(codec, "SBZ alt_init");
+ 		ca0132_gpio_init(codec);
+ 		sbz_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_sequence_write(codec, spec->desktop_init_verbs);
+ 		break;
+ 	case QUIRK_R3DI:
+ 		codec_dbg(codec, "R3DI alt_init");
+ 		ca0132_gpio_init(codec);
+ 		ca0132_gpio_setup(codec);
+ 		r3di_gpio_dsp_status_set(codec, R3DI_DSP_DOWNLOADING);
+ 		r3di_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_codec_write(codec, WIDGET_CHIP_CTRL, 0, 0x6FF, 0xC4);
+ 		break;
+ 	case QUIRK_R3D:
+ 		r3d_pre_dsp_setup(codec);
+ 		snd_hda_sequence_write(codec, spec->chip_init_verbs);
+ 		snd_hda_sequence_write(codec, spec->desktop_init_verbs);
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> e42c7c7313e4 (ALSA: hda/ca0132 - Add Recon3D startup functions and setup)
  static int ca0132_init(struct hda_codec *codec)
  {
  	struct ca0132_spec *spec = codec->spec;
@@@ -4743,6 -7277,9 +4989,12 @@@
  		spec->dsp_state = DSP_DOWNLOAD_INIT;
  	spec->curr_chip_addx = INVALID_CHIP_ADDRESS;
  
++<<<<<<< HEAD
++=======
+ 	if (spec->use_pci_mmio)
+ 		ca0132_mmio_init(codec);
+ 
++>>>>>>> e42c7c7313e4 (ALSA: hda/ca0132 - Add Recon3D startup functions and setup)
  	snd_hda_power_up_pm(codec);
  
  	ca0132_init_unsol(codec);
@@@ -4965,7 -7529,11 +5217,15 @@@ static int ca0132_prepare_verbs(struct 
  	struct ca0132_spec *spec = codec->spec;
  
  	spec->chip_init_verbs = ca0132_init_verbs0;
++<<<<<<< HEAD
 +	spec->spec_init_verbs = kzalloc(sizeof(struct hda_verb) * NUM_SPEC_VERBS, GFP_KERNEL);
++=======
+ 	if (spec->quirk == QUIRK_SBZ || spec->quirk == QUIRK_R3D)
+ 		spec->desktop_init_verbs = ca0132_init_verbs1;
+ 	spec->spec_init_verbs = kcalloc(NUM_SPEC_VERBS,
+ 					sizeof(struct hda_verb),
+ 					GFP_KERNEL);
++>>>>>>> e42c7c7313e4 (ALSA: hda/ca0132 - Add Recon3D startup functions and setup)
  	if (!spec->spec_init_verbs)
  		return -ENOMEM;
  
@@@ -5096,14 -7586,51 +5356,60 @@@ static int patch_ca0132(struct hda_code
  	else
  		spec->quirk = QUIRK_NONE;
  
 +	if (spec->quirk == QUIRK_GENERIC_PARSER)
 +		return parse_ca0132_generic(codec);
 +
 +	codec->patch_ops = ca0132_patch_ops;
 +
  	spec->dsp_state = DSP_DOWNLOAD_INIT;
  	spec->num_mixers = 1;
++<<<<<<< HEAD
 +	spec->mixers[0] = ca0132_mixer;
++=======
+ 
+ 	/* Set which mixers each quirk uses. */
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 		spec->mixers[0] = sbz_mixer;
+ 		snd_hda_codec_set_name(codec, "Sound Blaster Z");
+ 		break;
+ 	case QUIRK_R3DI:
+ 		spec->mixers[0] = r3di_mixer;
+ 		snd_hda_codec_set_name(codec, "Recon3Di");
+ 		break;
+ 	default:
+ 		spec->mixers[0] = ca0132_mixer;
+ 		break;
+ 	}
+ 
+ 	/* Setup whether or not to use alt functions/controls/pci_mmio */
+ 	switch (spec->quirk) {
+ 	case QUIRK_SBZ:
+ 	case QUIRK_R3D:
+ 		spec->use_alt_controls = true;
+ 		spec->use_alt_functions = true;
+ 		spec->use_pci_mmio = true;
+ 		break;
+ 	case QUIRK_R3DI:
+ 		spec->use_alt_controls = true;
+ 		spec->use_alt_functions = true;
+ 		spec->use_pci_mmio = false;
+ 		break;
+ 	default:
+ 		spec->use_alt_controls = false;
+ 		spec->use_alt_functions = false;
+ 		spec->use_pci_mmio = false;
+ 		break;
+ 	}
+ 
+ 	if (spec->use_pci_mmio) {
+ 		spec->mem_base = pci_iomap(codec->bus->pci, 2, 0xC20);
+ 		if (spec->mem_base == NULL) {
+ 			codec_warn(codec, "pci_iomap failed! Setting quirk to QUIRK_NONE.");
+ 			spec->quirk = QUIRK_NONE;
+ 		}
+ 	}
++>>>>>>> e42c7c7313e4 (ALSA: hda/ca0132 - Add Recon3D startup functions and setup)
  
  	spec->base_init_verbs = ca0132_base_init_verbs;
  	spec->base_exit_verbs = ca0132_base_exit_verbs;
* Unmerged path sound/pci/hda/patch_ca0132.c
