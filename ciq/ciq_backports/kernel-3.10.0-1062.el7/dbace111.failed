RDMA/core: Annotate timeout as unsigned long

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Leon Romanovsky <leonro@mellanox.com>
commit dbace111e5b320682eee63d7173959a2b2bd9ccb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/dbace111.failed

The ucma users supply timeout in u32 format, it means that any number
with most significant bit set will be converted to negative value
by various rdma_*, cma_* and sa_query functions, which treat timeout
as int.

In the lowest level, the timeout is converted back to be unsigned long.
Remove this ambiguous conversion by updating all function signatures to
receive unsigned long.

	Reported-by: Noa Osherovich <noaos@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit dbace111e5b320682eee63d7173959a2b2bd9ccb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/addr.c
#	drivers/infiniband/core/cma.c
#	drivers/infiniband/core/sa.h
#	include/rdma/ib_addr.h
#	include/rdma/ib_sa.h
#	include/rdma/rdma_cm.h
diff --cc drivers/infiniband/core/addr.c
index f539cd007a75,0dce94e3c495..000000000000
--- a/drivers/infiniband/core/addr.c
+++ b/drivers/infiniband/core/addr.c
@@@ -594,12 -658,11 +594,17 @@@ static void process_one_req(struct work
  	spin_unlock_bh(&lock);
  }
  
++<<<<<<< HEAD
 +int rdma_resolve_ip(struct rdma_addr_client *client,
 +		    struct sockaddr *src_addr, struct sockaddr *dst_addr,
 +		    struct rdma_dev_addr *addr, int timeout_ms,
++=======
+ int rdma_resolve_ip(struct sockaddr *src_addr, const struct sockaddr *dst_addr,
+ 		    struct rdma_dev_addr *addr, unsigned long timeout_ms,
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  		    void (*callback)(int status, struct sockaddr *src_addr,
  				     struct rdma_dev_addr *addr, void *context),
 -		    bool resolve_by_gid_attr, void *context)
 +		    void *context)
  {
  	struct sockaddr *src_in, *dst_in;
  	struct addr_req *req;
diff --cc drivers/infiniband/core/cma.c
index ba6ba35990d5,15d5bb7bf6bb..000000000000
--- a/drivers/infiniband/core/cma.c
+++ b/drivers/infiniband/core/cma.c
@@@ -3014,7 -3073,7 +3015,11 @@@ static int cma_bind_addr(struct rdma_cm
  }
  
  int rdma_resolve_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
++<<<<<<< HEAD
 +		      struct sockaddr *dst_addr, int timeout_ms)
++=======
+ 		      const struct sockaddr *dst_addr, unsigned long timeout_ms)
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  {
  	struct rdma_id_private *id_priv;
  	int ret;
diff --cc drivers/infiniband/core/sa.h
index b1d4bbf4ce5c,cbaaaa92fff3..000000000000
--- a/drivers/infiniband/core/sa.h
+++ b/drivers/infiniband/core/sa.h
@@@ -49,11 -49,10 +49,15 @@@ static inline void ib_sa_client_put(str
  }
  
  int ib_sa_mcmember_rec_query(struct ib_sa_client *client,
 -			     struct ib_device *device, u8 port_num, u8 method,
 +			     struct ib_device *device, u8 port_num,
 +			     u8 method,
  			     struct ib_sa_mcmember_rec *rec,
  			     ib_sa_comp_mask comp_mask,
++<<<<<<< HEAD
 +			     int timeout_ms, gfp_t gfp_mask,
++=======
+ 			     unsigned long timeout_ms, gfp_t gfp_mask,
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  			     void (*callback)(int status,
  					      struct ib_sa_mcmember_rec *resp,
  					      void *context),
diff --cc include/rdma/ib_addr.h
index 5d8f2137681f,2734c895c1bf..000000000000
--- a/include/rdma/ib_addr.h
+++ b/include/rdma/ib_addr.h
@@@ -111,14 -94,15 +111,19 @@@ int rdma_translate_ip(const struct sock
   * @timeout_ms: Amount of time to wait for the address resolution to complete.
   * @callback: Call invoked once address resolution has completed, timed out,
   *   or been canceled.  A status of 0 indicates success.
 - * @resolve_by_gid_attr:	Resolve the ip based on the GID attribute from
 - *				rdma_dev_addr.
   * @context: User-specified context associated with the call.
   */
++<<<<<<< HEAD
 +int rdma_resolve_ip(struct rdma_addr_client *client,
 +		    struct sockaddr *src_addr, struct sockaddr *dst_addr,
 +		    struct rdma_dev_addr *addr, int timeout_ms,
++=======
+ int rdma_resolve_ip(struct sockaddr *src_addr, const struct sockaddr *dst_addr,
+ 		    struct rdma_dev_addr *addr, unsigned long timeout_ms,
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  		    void (*callback)(int status, struct sockaddr *src_addr,
  				     struct rdma_dev_addr *addr, void *context),
 -		    bool resolve_by_gid_attr, void *context);
 +		    void *context);
  
  void rdma_addr_cancel(struct rdma_dev_addr *addr);
  
diff --cc include/rdma/ib_sa.h
index b6ddf2a1b9d8,19520979b84c..000000000000
--- a/include/rdma/ib_sa.h
+++ b/include/rdma/ib_sa.h
@@@ -449,28 -449,23 +449,47 @@@ struct ib_sa_query
  
  void ib_sa_cancel_query(int id, struct ib_sa_query *query);
  
++<<<<<<< HEAD
 +int ib_sa_path_rec_get(struct ib_sa_client *client,
 +		       struct ib_device *device, u8 port_num,
 +		       struct sa_path_rec *rec,
 +		       ib_sa_comp_mask comp_mask,
 +		       int timeout_ms, gfp_t gfp_mask,
 +		       void (*callback)(int status,
 +					struct sa_path_rec *resp,
++=======
+ int ib_sa_path_rec_get(struct ib_sa_client *client, struct ib_device *device,
+ 		       u8 port_num, struct sa_path_rec *rec,
+ 		       ib_sa_comp_mask comp_mask, unsigned long timeout_ms,
+ 		       gfp_t gfp_mask,
+ 		       void (*callback)(int status, struct sa_path_rec *resp,
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  					void *context),
 -		       void *context, struct ib_sa_query **query);
 +		       void *context,
 +		       struct ib_sa_query **query);
  
  int ib_sa_service_rec_query(struct ib_sa_client *client,
++<<<<<<< HEAD
 +			 struct ib_device *device, u8 port_num,
 +			 u8 method,
 +			 struct ib_sa_service_rec *rec,
 +			 ib_sa_comp_mask comp_mask,
 +			 int timeout_ms, gfp_t gfp_mask,
 +			 void (*callback)(int status,
 +					  struct ib_sa_service_rec *resp,
 +					  void *context),
 +			 void *context,
 +			 struct ib_sa_query **sa_query);
++=======
+ 			    struct ib_device *device, u8 port_num, u8 method,
+ 			    struct ib_sa_service_rec *rec,
+ 			    ib_sa_comp_mask comp_mask, unsigned long timeout_ms,
+ 			    gfp_t gfp_mask,
+ 			    void (*callback)(int status,
+ 					     struct ib_sa_service_rec *resp,
+ 					     void *context),
+ 			    void *context, struct ib_sa_query **sa_query);
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  
  struct ib_sa_multicast {
  	struct ib_sa_mcmember_rec rec;
diff --cc include/rdma/rdma_cm.h
index d7498d44124f,60987a5903b7..000000000000
--- a/include/rdma/rdma_cm.h
+++ b/include/rdma/rdma_cm.h
@@@ -197,7 -196,8 +197,12 @@@ int rdma_bind_addr(struct rdma_cm_id *i
   * @timeout_ms: Time to wait for resolution to complete.
   */
  int rdma_resolve_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
++<<<<<<< HEAD
 +		      struct sockaddr *dst_addr, int timeout_ms);
++=======
+ 		      const struct sockaddr *dst_addr,
+ 		      unsigned long timeout_ms);
++>>>>>>> dbace111e5b3 (RDMA/core: Annotate timeout as unsigned long)
  
  /**
   * rdma_resolve_route - Resolve the RDMA address bound to the RDMA identifier
* Unmerged path drivers/infiniband/core/addr.c
* Unmerged path drivers/infiniband/core/cma.c
diff --git a/drivers/infiniband/core/mad.c b/drivers/infiniband/core/mad.c
index 81a0c54ccc27..22fd4f60369c 100644
--- a/drivers/infiniband/core/mad.c
+++ b/drivers/infiniband/core/mad.c
@@ -2414,7 +2414,7 @@ static void wait_for_response(struct ib_mad_send_wr_private *mad_send_wr)
 }
 
 void ib_reset_mad_timeout(struct ib_mad_send_wr_private *mad_send_wr,
-			  int timeout_ms)
+			  unsigned long timeout_ms)
 {
 	mad_send_wr->timeout = msecs_to_jiffies(timeout_ms);
 	wait_for_response(mad_send_wr);
diff --git a/drivers/infiniband/core/mad_priv.h b/drivers/infiniband/core/mad_priv.h
index d84ae1671898..216509036aa8 100644
--- a/drivers/infiniband/core/mad_priv.h
+++ b/drivers/infiniband/core/mad_priv.h
@@ -221,6 +221,6 @@ void ib_mad_complete_send_wr(struct ib_mad_send_wr_private *mad_send_wr,
 void ib_mark_mad_done(struct ib_mad_send_wr_private *mad_send_wr);
 
 void ib_reset_mad_timeout(struct ib_mad_send_wr_private *mad_send_wr,
-			  int timeout_ms);
+			  unsigned long timeout_ms);
 
 #endif	/* __IB_MAD_PRIV_H__ */
* Unmerged path drivers/infiniband/core/sa.h
diff --git a/drivers/infiniband/core/sa_query.c b/drivers/infiniband/core/sa_query.c
index 8107a7755e5e..46e6376563d6 100644
--- a/drivers/infiniband/core/sa_query.c
+++ b/drivers/infiniband/core/sa_query.c
@@ -1359,7 +1359,8 @@ static void init_mad(struct ib_sa_query *query, struct ib_mad_agent *agent)
 	spin_unlock_irqrestore(&tid_lock, flags);
 }
 
-static int send_mad(struct ib_sa_query *query, int timeout_ms, gfp_t gfp_mask)
+static int send_mad(struct ib_sa_query *query, unsigned long timeout_ms,
+		    gfp_t gfp_mask)
 {
 	bool preload = !!(gfp_mask & __GFP_WAIT);
 	unsigned long flags;
@@ -1549,7 +1550,7 @@ int ib_sa_path_rec_get(struct ib_sa_client *client,
 		       struct ib_device *device, u8 port_num,
 		       struct sa_path_rec *rec,
 		       ib_sa_comp_mask comp_mask,
-		       int timeout_ms, gfp_t gfp_mask,
+		       unsigned long timeout_ms, gfp_t gfp_mask,
 		       void (*callback)(int status,
 					struct sa_path_rec *resp,
 					void *context),
@@ -1703,7 +1704,7 @@ int ib_sa_service_rec_query(struct ib_sa_client *client,
 			    struct ib_device *device, u8 port_num, u8 method,
 			    struct ib_sa_service_rec *rec,
 			    ib_sa_comp_mask comp_mask,
-			    int timeout_ms, gfp_t gfp_mask,
+			    unsigned long timeout_ms, gfp_t gfp_mask,
 			    void (*callback)(int status,
 					     struct ib_sa_service_rec *resp,
 					     void *context),
@@ -1800,7 +1801,7 @@ int ib_sa_mcmember_rec_query(struct ib_sa_client *client,
 			     u8 method,
 			     struct ib_sa_mcmember_rec *rec,
 			     ib_sa_comp_mask comp_mask,
-			     int timeout_ms, gfp_t gfp_mask,
+			     unsigned long timeout_ms, gfp_t gfp_mask,
 			     void (*callback)(int status,
 					      struct ib_sa_mcmember_rec *resp,
 					      void *context),
@@ -1891,7 +1892,7 @@ int ib_sa_guid_info_rec_query(struct ib_sa_client *client,
 			      struct ib_device *device, u8 port_num,
 			      struct ib_sa_guidinfo_rec *rec,
 			      ib_sa_comp_mask comp_mask, u8 method,
-			      int timeout_ms, gfp_t gfp_mask,
+			      unsigned long timeout_ms, gfp_t gfp_mask,
 			      void (*callback)(int status,
 					       struct ib_sa_guidinfo_rec *resp,
 					       void *context),
@@ -2058,7 +2059,7 @@ static void ib_sa_classport_info_rec_release(struct ib_sa_query *sa_query)
 }
 
 static int ib_sa_classport_info_rec_query(struct ib_sa_port *port,
-					  int timeout_ms,
+					  unsigned long timeout_ms,
 					  void (*callback)(void *context),
 					  void *context,
 					  struct ib_sa_query **sa_query)
* Unmerged path include/rdma/ib_addr.h
diff --git a/include/rdma/ib_cm.h b/include/rdma/ib_cm.h
index 568708a87239..6d7319a002ab 100644
--- a/include/rdma/ib_cm.h
+++ b/include/rdma/ib_cm.h
@@ -583,7 +583,7 @@ struct ib_cm_sidr_req_param {
 	struct sa_path_rec	*path;
 	const struct ib_gid_attr *sgid_attr;
 	__be64			service_id;
-	int			timeout_ms;
+	unsigned long		timeout_ms;
 	const void		*private_data;
 	u8			private_data_len;
 	u8			max_cm_retries;
* Unmerged path include/rdma/ib_sa.h
* Unmerged path include/rdma/rdma_cm.h
