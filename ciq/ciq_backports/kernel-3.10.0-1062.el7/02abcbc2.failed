scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT (Tomas Henzl) [1642370]
Rebuild_FUZZ: 95.38%
commit-author Suganath Prabu <suganath-prabu.subramani@broadcom.com>
commit 02abcbc25a06cdbb93bd60ceeb062b8445dae0ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/02abcbc2.failed

Added new #define variable IOC_OPERATIONAL_WAIT_COUNT and it replaces hard
coded value '10' in all the places where driver is waiting for the IOC to
become operational.

	Signed-off-by: Suganath Prabu <suganath-prabu.subramani@broadcom.com>
	Reviewed-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 02abcbc25a06cdbb93bd60ceeb062b8445dae0ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.c
#	drivers/scsi/mpt3sas/mpt3sas_ctl.c
#	drivers/scsi/mpt3sas/mpt3sas_transport.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.c
index 909e8d966528,f6c7afa24ea1..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@@ -4395,10 -5230,9 +4395,16 @@@ mpt3sas_base_sas_iounit_control(struct 
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			rc = -EFAULT;
  			goto out;
  		}
@@@ -4495,10 -5325,9 +4501,16 @@@ mpt3sas_base_scsi_enclosure_processor(s
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			rc = -EFAULT;
  			goto out;
  		}
diff --cc drivers/scsi/mpt3sas/mpt3sas_ctl.c
index bdd5dacbbbc9,a285e95c9ae4..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_ctl.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
@@@ -658,10 -669,9 +658,16 @@@ _ctl_do_mpt_command(struct MPT3SAS_ADAP
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			ret = -EFAULT;
  			goto out;
  		}
diff --cc drivers/scsi/mpt3sas/mpt3sas_transport.c
index 2bfb87b6c163,f446c05e99f4..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_transport.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_transport.c
@@@ -328,10 -323,9 +328,16 @@@ _transport_expander_report_manufacture(
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			rc = -EFAULT;
  			goto out;
  		}
@@@ -1130,10 -1101,9 +1136,16 @@@ _transport_get_expander_phy_error_log(s
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			rc = -EFAULT;
  			goto out;
  		}
@@@ -1441,10 -1406,9 +1453,16 @@@ _transport_expander_phy_control(struct 
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			rc = -EFAULT;
  			goto out;
  		}
@@@ -1982,12 -1927,11 +2000,18 @@@ _transport_smp_handler(struct Scsi_Hos
  	wait_state_count = 0;
  	ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
  	while (ioc_state != MPI2_IOC_STATE_OPERATIONAL) {
++<<<<<<< HEAD
 +		if (wait_state_count++ == 10) {
 +			pr_err(MPT3SAS_FMT
 +			    "%s: failed due to ioc not operational\n",
 +			    ioc->name, __func__);
++=======
+ 		if (wait_state_count++ == IOC_OPERATIONAL_WAIT_COUNT) {
+ 			ioc_err(ioc, "%s: failed due to ioc not operational\n",
+ 				__func__);
++>>>>>>> 02abcbc25a06 (scsi: mpt3sas: Added new #define variable IOC_OPERATIONAL_WAIT_COUNT)
  			rc = -EFAULT;
 -			goto unmap_in;
 +			goto unmap;
  		}
  		ssleep(1);
  		ioc_state = mpt3sas_base_get_iocstate(ioc, 1);
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.c
diff --git a/drivers/scsi/mpt3sas/mpt3sas_base.h b/drivers/scsi/mpt3sas/mpt3sas_base.h
index 1cadd2c700a9..f44c55ab2db4 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_base.h
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.h
@@ -135,6 +135,9 @@
 #define DEFAULT_NUM_FWCHAIN_ELEMTS	8
 
 #define FW_IMG_HDR_READ_TIMEOUT	15
+
+#define IOC_OPERATIONAL_WAIT_COUNT	10
+
 /*
  * reset phases
  */
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_ctl.c
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_transport.c
