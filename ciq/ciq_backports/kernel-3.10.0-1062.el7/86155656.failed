net/mlx5e: Add TX completions statistics

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add TX completions statistics (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 94.74%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 861556569645f907d50b70b663196291cf65cd34
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/86155656.failed

Add per-ring and global ethtool counters for TX completions.
This helps us monitor and analyze TX flow performance.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 861556569645f907d50b70b663196291cf65cd34)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 8721ed97ba96,d35361b1b3fe..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@@ -57,9 -64,12 +57,16 @@@ static const struct counter_desc sw_sta
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial_inner) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_stopped) },
 +	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_dropped) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xmit_more) },
++<<<<<<< HEAD
++=======
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_recover) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqes) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
+ 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_udp_seg_rem) },
++>>>>>>> 861556569645 (net/mlx5e: Add TX completions statistics)
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqe_err) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_wqe_err) },
  	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_mpwqe_filler) },
@@@ -157,6 -169,11 +164,14 @@@ static void mlx5e_grp_sw_update_stats(s
  			s->tx_csum_partial_inner += sq_stats->csum_partial_inner;
  			s->tx_csum_none		+= sq_stats->csum_none;
  			s->tx_csum_partial	+= sq_stats->csum_partial;
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_MLX5_EN_TLS
+ 			s->tx_tls_ooo		+= sq_stats->tls_ooo;
+ 			s->tx_tls_resync_bytes	+= sq_stats->tls_resync_bytes;
+ #endif
+ 			s->tx_cqes		+= sq_stats->cqes;
++>>>>>>> 861556569645 (net/mlx5e: Add TX completions statistics)
  		}
  	}
  
@@@ -1100,9 -1141,11 +1115,15 @@@ static const struct counter_desc sq_sta
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, nop) },
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, csum_none) },
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, stopped) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, wake) },
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, dropped) },
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, xmit_more) },
++<<<<<<< HEAD
++=======
+ 	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, recover) },
+ 	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, cqes) },
+ 	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, wake) },
++>>>>>>> 861556569645 (net/mlx5e: Add TX completions statistics)
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, cqe_err) },
  };
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 43dc808684c9,8f2dfe56fdef..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -75,9 -75,12 +75,16 @@@ struct mlx5e_sw_stats 
  	u64 tx_csum_partial;
  	u64 tx_csum_partial_inner;
  	u64 tx_queue_stopped;
 +	u64 tx_queue_wake;
  	u64 tx_queue_dropped;
  	u64 tx_xmit_more;
++<<<<<<< HEAD
++=======
+ 	u64 tx_recover;
+ 	u64 tx_cqes;
+ 	u64 tx_queue_wake;
+ 	u64 tx_udp_seg_rem;
++>>>>>>> 861556569645 (net/mlx5e: Add TX completions statistics)
  	u64 tx_cqe_err;
  	u64 rx_wqe_err;
  	u64 rx_mpwqe_filler;
@@@ -196,8 -201,16 +203,15 @@@ struct mlx5e_sq_stats 
  	/* less likely accessed in data path */
  	u64 csum_none;
  	u64 stopped;
 +	u64 wake;
  	u64 dropped;
++<<<<<<< HEAD
++=======
+ 	u64 recover;
+ 	/* dirtied @completion */
+ 	u64 cqes ____cacheline_aligned_in_smp;
+ 	u64 wake;
++>>>>>>> 861556569645 (net/mlx5e: Add TX completions statistics)
  	u64 cqe_err;
  };
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index 31cc86df395a,f0739dae7b56..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@@ -471,10 -509,14 +474,17 @@@ bool mlx5e_poll_tx_cq(struct mlx5e_cq *
  		wqe_counter = be16_to_cpu(cqe->wqe_counter);
  
  		if (unlikely(cqe->op_own >> 4 == MLX5_CQE_REQ_ERR)) {
 -			if (!test_and_set_bit(MLX5E_SQ_STATE_RECOVERING,
 -					      &sq->state)) {
 +			if (!sq->stats.cqe_err)
  				mlx5e_dump_error_cqe(sq,
  						     (struct mlx5_err_cqe *)cqe);
++<<<<<<< HEAD
 +			sq->stats.cqe_err++;
++=======
+ 				queue_work(cq->channel->priv->wq,
+ 					   &sq->recover.recover_work);
+ 			}
+ 			stats->cqe_err++;
++>>>>>>> 861556569645 (net/mlx5e: Add TX completions statistics)
  		}
  
  		do {
@@@ -530,9 -574,11 +542,9 @@@
  	netdev_tx_completed_queue(sq->txq, npkts, nbytes);
  
  	if (netif_tx_queue_stopped(sq->txq) &&
 -	    mlx5e_wqc_has_room_for(&sq->wq, sq->cc, sq->pc,
 -				   MLX5E_SQ_STOP_ROOM) &&
 -	    !test_bit(MLX5E_SQ_STATE_RECOVERING, &sq->state)) {
 +	    mlx5e_wqc_has_room_for(&sq->wq, sq->cc, sq->pc, MLX5E_SQ_STOP_ROOM)) {
  		netif_tx_wake_queue(sq->txq);
- 		sq->stats->wake++;
+ 		stats->wake++;
  	}
  
  	return (i == MLX5E_TX_CQ_POLL_BUDGET);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
