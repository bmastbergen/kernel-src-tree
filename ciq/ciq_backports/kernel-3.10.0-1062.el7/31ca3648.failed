net/mlx5: Pass a namespace for packet reformat ID allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Pass a namespace for packet reformat ID allocation (Alaa Hleihel) [1641361 1642498]
Rebuild_FUZZ: 96.55%
commit-author Mark Bloch <markb@mellanox.com>
commit 31ca3648f01bf19ae64618521ce539615cc0d5a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/31ca3648.failed

Currently we attach packet reformat actions only to the FDB namespace.
In preparation to be able to use that for NIC steering, pass the actual
namespace as a parameter.

	Signed-off-by: Mark Bloch <markb@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit 31ca3648f01bf19ae64618521ce539615cc0d5a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
#	drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
#	drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 979acc7660df,8cac8e9c8c63..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -909,9 -923,10 +909,16 @@@ void mlx5e_tc_encap_flows_add(struct ml
  	struct mlx5e_tc_flow *flow;
  	int err;
  
++<<<<<<< HEAD
 +	err = mlx5_encap_alloc(priv->mdev, e->tunnel_type,
 +			       e->encap_size, e->encap_header,
 +			       &e->encap_id);
++=======
+ 	err = mlx5_packet_reformat_alloc(priv->mdev, e->tunnel_type,
+ 					 e->encap_size, e->encap_header,
+ 					 MLX5_FLOW_NAMESPACE_FDB,
+ 					 &e->encap_id);
++>>>>>>> 31ca3648f01b (net/mlx5: Pass a namespace for packet reformat ID allocation)
  	if (err) {
  		mlx5_core_warn(priv->mdev, "Failed to offload cached encapsulation header, %d\n",
  			       err);
@@@ -2349,8 -2388,10 +2356,15 @@@ static int mlx5e_create_encap_header_ip
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	err = mlx5_encap_alloc(priv->mdev, e->tunnel_type,
 +			       ipv4_encap_size, encap_header, &e->encap_id);
++=======
+ 	err = mlx5_packet_reformat_alloc(priv->mdev, e->tunnel_type,
+ 					 ipv4_encap_size, encap_header,
+ 					 MLX5_FLOW_NAMESPACE_FDB,
+ 					 &e->encap_id);
++>>>>>>> 31ca3648f01b (net/mlx5: Pass a namespace for packet reformat ID allocation)
  	if (err)
  		goto destroy_neigh_entry;
  
@@@ -2459,8 -2500,10 +2473,15 @@@ static int mlx5e_create_encap_header_ip
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	err = mlx5_encap_alloc(priv->mdev, e->tunnel_type,
 +			       ipv6_encap_size, encap_header, &e->encap_id);
++=======
+ 	err = mlx5_packet_reformat_alloc(priv->mdev, e->tunnel_type,
+ 					 ipv6_encap_size, encap_header,
+ 					 MLX5_FLOW_NAMESPACE_FDB,
+ 					 &e->encap_id);
++>>>>>>> 31ca3648f01b (net/mlx5: Pass a namespace for packet reformat ID allocation)
  	if (err)
  		goto destroy_neigh_entry;
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
index 684c8251931c,cc9537891e39..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
@@@ -589,16 -596,17 +589,30 @@@ void mlx5_cmd_fc_bulk_get(struct mlx5_c
  	*bytes = MLX5_GET64(traffic_counter, stats, octets);
  }
  
++<<<<<<< HEAD
 +int mlx5_encap_alloc(struct mlx5_core_dev *dev,
 +		     int header_type,
 +		     size_t size,
 +		     void *encap_header,
 +		     u32 *encap_id)
 +{
 +	int max_encap_size = MLX5_CAP_ESW(dev, max_encap_header_size);
 +	u32 out[MLX5_ST_SZ_DW(alloc_encap_header_out)];
 +	void *encap_header_in;
 +	void *header;
++=======
+ int mlx5_packet_reformat_alloc(struct mlx5_core_dev *dev,
+ 			       int reformat_type,
+ 			       size_t size,
+ 			       void *reformat_data,
+ 			       enum mlx5_flow_namespace_type namespace,
+ 			       u32 *packet_reformat_id)
+ {
+ 	u32 out[MLX5_ST_SZ_DW(alloc_packet_reformat_context_out)];
+ 	void *packet_reformat_context_in;
+ 	int max_encap_size;
+ 	void *reformat;
++>>>>>>> 31ca3648f01b (net/mlx5: Pass a namespace for packet reformat ID allocation)
  	int inlen;
  	int err;
  	u32 *in;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
index 2ac07968015d,66a5dd5a6cbe..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
@@@ -167,12 -170,14 +168,23 @@@ struct mlx5_core_dev *mlx5_get_next_phy
  void mlx5_dev_list_lock(void);
  void mlx5_dev_list_unlock(void);
  int mlx5_dev_list_trylock(void);
++<<<<<<< HEAD
 +int mlx5_encap_alloc(struct mlx5_core_dev *dev,
 +		     int header_type,
 +		     size_t size,
 +		     void *encap_header,
 +		     u32 *encap_id);
 +void mlx5_encap_dealloc(struct mlx5_core_dev *dev, u32 encap_id);
++=======
+ int mlx5_packet_reformat_alloc(struct mlx5_core_dev *dev,
+ 			       int reformat_type,
+ 			       size_t size,
+ 			       void *reformat_data,
+ 			       enum mlx5_flow_namespace_type namespace,
+ 			       u32 *packet_reformat_id);
+ void mlx5_packet_reformat_dealloc(struct mlx5_core_dev *dev,
+ 				  u32 packet_reformat_id);
++>>>>>>> 31ca3648f01b (net/mlx5: Pass a namespace for packet reformat ID allocation)
  
  bool mlx5_lag_intf_add(struct mlx5_interface *intf, struct mlx5_priv *priv);
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
