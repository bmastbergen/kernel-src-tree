net/mlx5: ethtool, Fix type analysis of advertised link-mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5: ethtool, Fix type analysis of advertised link-mode (Alaa Hleihel) [1695493]
Rebuild_FUZZ: 96.55%
commit-author Aya Levin <ayal@mellanox.com>
commit 8d047bf56a2cc13d90e6a5074015d65045fd43e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/8d047bf5.failed

Ethtool option set_link_ksettings allows setting of legacy link-modes
or extended link-modes. Refine the decision of which type of link-modes
is set.

Fixes: 6a897372417e ("net/mlx5: ethtool, Add ethtool support for 50Gbps per lane link modes")
	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 8d047bf56a2cc13d90e6a5074015d65045fd43e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 889e7668b711,561e36af8e77..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -966,15 -993,26 +966,31 @@@ static int mlx5e_set_link_ksettings(str
  	u32 speed;
  	int err;
  
++<<<<<<< HEAD
++=======
+ 	u32 (*ethtool2ptys_adver_func)(const unsigned long *adver);
+ 
+ #define MLX5E_PTYS_EXT ((1ULL << ETHTOOL_LINK_MODE_50000baseKR_Full_BIT) - 1)
+ 
+ 	ext_requested = !!(link_ksettings->link_modes.advertising[0] >
+ 			MLX5E_PTYS_EXT ||
+ 			link_ksettings->link_modes.advertising[1]);
+ 	ext_supported = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+ 
+ 	/*when ptys_extended_ethernet is set legacy link modes are deprecated */
+ 	if (ext_requested != ext_supported)
+ 		return -EPROTONOSUPPORT;
+ 
++>>>>>>> 8d047bf56a2c (net/mlx5: ethtool, Fix type analysis of advertised link-mode)
  	speed = link_ksettings->base.speed;
 -	ethtool2ptys_adver_func = ext_requested ?
 -				  mlx5e_ethtool2ptys_ext_adver_link :
 -				  mlx5e_ethtool2ptys_adver_link;
 -	err = mlx5_port_query_eth_proto(mdev, 1, ext_supported, &eproto);
 +
 +	link_modes = link_ksettings->base.autoneg == AUTONEG_ENABLE ?
 +		mlx5e_ethtool2ptys_adver_link(link_ksettings->link_modes.advertising) :
 +		mlx5e_ethtool2ptys_speed_link(speed);
 +
 +	err = mlx5_query_port_proto_cap(mdev, &eth_proto_cap, MLX5_PTYS_EN);
  	if (err) {
 -		netdev_err(priv->netdev, "%s: query port eth proto failed: %d\n",
 +		netdev_err(netdev, "%s: query port eth proto cap failed: %d\n",
  			   __func__, err);
  		goto out;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
