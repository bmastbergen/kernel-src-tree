bnxt_en: Disable interrupts when allocating CP rings or NQs.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Disable interrupts when allocating CP rings or NQs (Jonathan Toppins) [1643317]
Rebuild_FUZZ: 99.16%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 5e66e35aab335b83d9ffb220d8a3a13986a7a60e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/5e66e35a.failed

When calling firmware to allocate a CP ring or NQ, an interrupt associated
with that ring may be generated immediately before the doorbell is even
setup after the firmware call returns.  When servicing the interrupt, the
driver may crash when trying to access the doorbell.

Fix it by disabling interrupt on that vector until the doorbell is
set up.

Fixes: 697197e5a173 ("bnxt_en: Re-structure doorbells.")
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5e66e35aab335b83d9ffb220d8a3a13986a7a60e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 178f4c0452c9,8bc7e495b027..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -4699,13 -4973,18 +4699,27 @@@ static int bnxt_hwrm_ring_alloc(struct 
  		struct bnxt_cp_ring_info *cpr = &bnapi->cp_ring;
  		struct bnxt_ring_struct *ring = &cpr->cp_ring_struct;
  		u32 map_idx = ring->map_idx;
+ 		unsigned int vector;
  
++<<<<<<< HEAD
 +		cpr->cp_doorbell = bp->bar1 + map_idx * 0x80;
 +		rc = hwrm_ring_alloc_send_msg(bp, ring, HWRM_RING_ALLOC_CMPL,
 +					      map_idx);
 +		if (rc)
 +			goto err_out;
 +		BNXT_CP_DB(cpr->cp_doorbell, cpr->cp_raw_cons);
++=======
+ 		vector = bp->irq_tbl[map_idx].vector;
+ 		disable_irq_nosync(vector);
+ 		rc = hwrm_ring_alloc_send_msg(bp, ring, type, map_idx);
+ 		if (rc) {
+ 			enable_irq(vector);
+ 			goto err_out;
+ 		}
+ 		bnxt_set_db(bp, &cpr->cp_db, type, map_idx, ring->fw_ring_id);
+ 		bnxt_db_nq(bp, &cpr->cp_db, cpr->cp_raw_cons);
+ 		enable_irq(vector);
++>>>>>>> 5e66e35aab33 (bnxt_en: Disable interrupts when allocating CP rings or NQs.)
  		bp->grp_info[i].cp_fw_ring_id = ring->fw_ring_id;
  
  		if (!i) {
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
