perf llvm: Pass number of configured CPUs to clang compiler

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit 59f41af980f95cbd556a6dc2e064b412abc439cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/59f41af9.failed

This patch introduces a new macro "__NR_CPUS__" to perf's embedded clang
compiler, which represent the number of configured CPUs in this system.
BPF programs can use this macro to create a map with the same number of
system CPUs. For example:

 struct bpf_map_def SEC("maps") pmu_map = {
     .type = BPF_MAP_TYPE_PERF_EVENT_ARRAY,
     .key_size = sizeof(int),
     .value_size = sizeof(u32),
     .max_entries = __NR_CPUS__,
 };

	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1446636007-239722-2-git-send-email-wangnan0@huawei.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 59f41af980f95cbd556a6dc2e064b412abc439cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/llvm-utils.c
diff --cc tools/perf/util/llvm-utils.c
index 1094f8780b7a,80eecefc604f..000000000000
--- a/tools/perf/util/llvm-utils.c
+++ b/tools/perf/util/llvm-utils.c
@@@ -3,22 -3,19 +3,23 @@@
   * Copyright (C) 2015, Huawei Inc.
   */
  
 +#include <errno.h>
 +#include <limits.h>
  #include <stdio.h>
  #include <sys/utsname.h>
 -#include "util.h"
  #include "debug.h"
  #include "llvm-utils.h"
 -#include "cache.h"
 +#include "config.h"
 +#include <stdlib.h>
 +#include "util.h"
 +#include <sys/wait.h>
  
  #define CLANG_BPF_CMD_DEFAULT_TEMPLATE				\
- 		"$CLANG_EXEC -D__KERNEL__ $CLANG_OPTIONS "	\
- 		"$KERNEL_INC_OPTIONS -Wno-unused-value "	\
- 		"-Wno-pointer-sign -working-directory "		\
- 		"$WORKING_DIR -c \"$CLANG_SOURCE\" -target bpf -O2 -o -"
+ 		"$CLANG_EXEC -D__KERNEL__ -D__NR_CPUS__=$NR_CPUS "\
+ 		"$CLANG_OPTIONS $KERNEL_INC_OPTIONS "		\
+ 		"-Wno-unused-value -Wno-pointer-sign "		\
+ 		"-working-directory $WORKING_DIR "		\
+ 		"-c \"$CLANG_SOURCE\" -target bpf -O2 -o -"
  
  struct llvm_param llvm_param = {
  	.clang_path = "clang",
@@@ -330,10 -327,9 +331,15 @@@ get_kbuild_opts(char **kbuild_dir, cha
  int llvm__compile_bpf(const char *path, void **p_obj_buf,
  		      size_t *p_obj_buf_sz)
  {
++<<<<<<< HEAD
 +	int err;
++=======
+ 	int err, nr_cpus_avail;
+ 	char clang_path[PATH_MAX], nr_cpus_avail_str[64];
++>>>>>>> 59f41af980f9 (perf llvm: Pass number of configured CPUs to clang compiler)
  	const char *clang_opt = llvm_param.clang_opt;
 +	char clang_path[PATH_MAX], abspath[PATH_MAX];
 +	char serr[STRERR_BUFSIZE];
  	const char *template = llvm_param.clang_bpf_cmd_template;
  	char *kbuild_dir = NULL, *kbuild_include_opts = NULL;
  	void *obj_buf = NULL;
* Unmerged path tools/perf/util/llvm-utils.c
