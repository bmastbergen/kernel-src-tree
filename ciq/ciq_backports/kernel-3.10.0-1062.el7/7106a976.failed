RDMA/uverbs: Make write() handlers return 0 on success

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit 7106a9769715bb4c0448927a29aa3b505855871c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/7106a976.failed

Currently they return the command length, while all other handlers return
0. This makes the write path closer to the write_ex and ioctl path.

	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit 7106a9769715bb4c0448927a29aa3b505855871c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/rdma_core.c
#	drivers/infiniband/core/rdma_core.h
#	drivers/infiniband/core/uverbs_cmd.c
#	drivers/infiniband/core/uverbs_main.c
#	drivers/infiniband/core/uverbs_uapi.c
#	include/rdma/uverbs_ioctl.h
#	include/rdma/uverbs_std_types.h
diff --cc drivers/infiniband/core/rdma_core.c
index 586f179a9de6,efa292489271..000000000000
--- a/drivers/infiniband/core/rdma_core.c
+++ b/drivers/infiniband/core/rdma_core.c
@@@ -129,32 -190,89 +129,64 @@@ static int uverbs_try_lock_object(struc
  }
  
  /*
 - * This calls uverbs_destroy_uobject() using the RDMA_REMOVE_DESTROY
 - * sequence. It should only be used from command callbacks. On success the
 - * caller must pair this with rdma_lookup_put_uobject(LOOKUP_WRITE). This
 - * version requires the caller to have already obtained an
 - * LOOKUP_DESTROY uobject kref.
 + * Does both rdma_lookup_get_uobject() and rdma_remove_commit_uobject(), then
 + * returns success_res on success (negative errno on failure). For use by
 + * callers that do not need the uobj.
   */
 -int uobj_destroy(struct ib_uobject *uobj)
 +int __uobj_perform_destroy(const struct uverbs_obj_type *type, int id,
 +			   struct ib_uverbs_file *ufile, int success_res)
  {
 -	struct ib_uverbs_file *ufile = uobj->ufile;
 +	struct ib_uobject *uobj;
  	int ret;
  
 -	down_read(&ufile->hw_destroy_rwsem);
++<<<<<<< HEAD
 +	uobj = rdma_lookup_get_uobject(type, ufile->ucontext, id, true);
 +	if (IS_ERR(uobj))
 +		return PTR_ERR(uobj);
  
 -	ret = uverbs_try_lock_object(uobj, UVERBS_LOOKUP_WRITE);
 +	ret = rdma_remove_commit_uobject(uobj);
  	if (ret)
 -		goto out_unlock;
 -
 -	ret = uverbs_destroy_uobject(uobj, RDMA_REMOVE_DESTROY);
 -	if (ret) {
 -		atomic_set(&uobj->usecnt, 0);
 -		goto out_unlock;
 -	}
 -
 -out_unlock:
 -	up_read(&ufile->hw_destroy_rwsem);
 -	return ret;
 -}
 -
 -/*
 - * uobj_get_destroy destroys the HW object and returns a handle to the uobj
 - * with a NULL object pointer. The caller must pair this with
 - * uverbs_put_destroy.
 - */
 -struct ib_uobject *__uobj_get_destroy(const struct uverbs_api_object *obj,
 -				      u32 id,
 -				      const struct uverbs_attr_bundle *attrs)
 -{
 -	struct ib_uobject *uobj;
 -	int ret;
 +		return ret;
  
 +	return success_res;
++=======
+ 	uobj = rdma_lookup_get_uobject(obj, attrs->ufile, id,
+ 				       UVERBS_LOOKUP_DESTROY);
+ 	if (IS_ERR(uobj))
+ 		return uobj;
+ 
+ 	ret = uobj_destroy(uobj);
+ 	if (ret) {
+ 		rdma_lookup_put_uobject(uobj, UVERBS_LOOKUP_DESTROY);
+ 		return ERR_PTR(ret);
+ 	}
+ 
+ 	return uobj;
+ }
+ 
+ /*
+  * Does both uobj_get_destroy() and uobj_put_destroy().  Returns 0 on success
+  * (negative errno on failure). For use by callers that do not need the uobj.
+  */
+ int __uobj_perform_destroy(const struct uverbs_api_object *obj, u32 id,
+ 			   const struct uverbs_attr_bundle *attrs)
+ {
+ 	struct ib_uobject *uobj;
+ 
+ 	uobj = __uobj_get_destroy(obj, id, attrs);
+ 	if (IS_ERR(uobj))
+ 		return PTR_ERR(uobj);
+ 
+ 	rdma_lookup_put_uobject(uobj, UVERBS_LOOKUP_WRITE);
+ 	return 0;
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
 -/* alloc_uobj must be undone by uverbs_destroy_uobject() */
 -static struct ib_uobject *alloc_uobj(struct ib_uverbs_file *ufile,
 -				     const struct uverbs_api_object *obj)
 +static struct ib_uobject *alloc_uobj(struct ib_ucontext *context,
 +				     const struct uverbs_obj_type *type)
  {
 -	struct ib_uobject *uobj;
 -	struct ib_ucontext *ucontext;
 +	struct ib_uobject *uobj = kzalloc(type->obj_size, GFP_KERNEL);
  
 -	ucontext = ib_uverbs_get_ucontext_file(ufile);
 -	if (IS_ERR(ucontext))
 -		return ERR_CAST(ucontext);
 -
 -	uobj = kzalloc(obj->type_attrs->obj_size, GFP_KERNEL);
  	if (!uobj)
  		return ERR_PTR(-ENOMEM);
  	/*
diff --cc drivers/infiniband/core/rdma_core.h
index a243cc2a59f7,59edd7514095..000000000000
--- a/drivers/infiniband/core/rdma_core.h
+++ b/drivers/infiniband/core/rdma_core.h
@@@ -113,4 -106,102 +113,105 @@@ int uverbs_finalize_object(struct ib_uo
  			   enum uverbs_obj_access access,
  			   bool commit);
  
++<<<<<<< HEAD
++=======
+ void setup_ufile_idr_uobject(struct ib_uverbs_file *ufile);
+ void release_ufile_idr_uobject(struct ib_uverbs_file *ufile);
+ 
+ /*
+  * This is the runtime description of the uverbs API, used by the syscall
+  * machinery to validate and dispatch calls.
+  */
+ 
+ /*
+  * Depending on ID the slot pointer in the radix tree points at one of these
+  * structs.
+  */
+ struct uverbs_api_object {
+ 	const struct uverbs_obj_type *type_attrs;
+ 	const struct uverbs_obj_type_class *type_class;
+ 	u8 disabled:1;
+ };
+ 
+ struct uverbs_api_ioctl_method {
+ 	int (__rcu *handler)(struct ib_uverbs_file *ufile,
+ 			     struct uverbs_attr_bundle *ctx);
+ 	DECLARE_BITMAP(attr_mandatory, UVERBS_API_ATTR_BKEY_LEN);
+ 	u16 bundle_size;
+ 	u8 use_stack:1;
+ 	u8 driver_method:1;
+ 	u8 disabled:1;
+ 	u8 key_bitmap_len;
+ 	u8 destroy_bkey;
+ };
+ 
+ struct uverbs_api_write_method {
+ 	int (*handler)(struct uverbs_attr_bundle *attrs, const char __user *buf,
+ 		       int in_len, int out_len);
+ 	int (*handler_ex)(struct uverbs_attr_bundle *attrs,
+ 			  struct ib_udata *ucore, struct ib_udata *uhw);
+ 	u8 disabled:1;
+ 	u8 is_ex:1;
+ };
+ 
+ struct uverbs_api_attr {
+ 	struct uverbs_attr_spec spec;
+ };
+ 
+ struct uverbs_api {
+ 	/* radix tree contains struct uverbs_api_* pointers */
+ 	struct radix_tree_root radix;
+ 	enum rdma_driver_id driver_id;
+ 
+ 	unsigned int num_write;
+ 	unsigned int num_write_ex;
+ 	struct uverbs_api_write_method notsupp_method;
+ 	const struct uverbs_api_write_method **write_methods;
+ 	const struct uverbs_api_write_method **write_ex_methods;
+ };
+ 
+ static inline const struct uverbs_api_object *
+ uapi_get_object(struct uverbs_api *uapi, u16 object_id)
+ {
+ 	return radix_tree_lookup(&uapi->radix, uapi_key_obj(object_id));
+ }
+ 
+ char *uapi_key_format(char *S, unsigned int key);
+ struct uverbs_api *uverbs_alloc_api(struct ib_device *ibdev);
+ void uverbs_disassociate_api_pre(struct ib_uverbs_device *uverbs_dev);
+ void uverbs_disassociate_api(struct uverbs_api *uapi);
+ void uverbs_destroy_api(struct uverbs_api *uapi);
+ void uapi_compute_bundle_size(struct uverbs_api_ioctl_method *method_elm,
+ 			      unsigned int num_attrs);
+ void uverbs_user_mmap_disassociate(struct ib_uverbs_file *ufile);
+ 
+ extern const struct uapi_definition uverbs_def_obj_counters[];
+ extern const struct uapi_definition uverbs_def_obj_cq[];
+ extern const struct uapi_definition uverbs_def_obj_dm[];
+ extern const struct uapi_definition uverbs_def_obj_flow_action[];
+ extern const struct uapi_definition uverbs_def_obj_intf[];
+ extern const struct uapi_definition uverbs_def_obj_mr[];
+ extern const struct uapi_definition uverbs_def_write_intf[];
+ 
+ static inline const struct uverbs_api_write_method *
+ uapi_get_method(const struct uverbs_api *uapi, u32 command)
+ {
+ 	u32 cmd_idx = command & IB_USER_VERBS_CMD_COMMAND_MASK;
+ 
+ 	if (command & ~(u32)(IB_USER_VERBS_CMD_FLAG_EXTENDED |
+ 			     IB_USER_VERBS_CMD_COMMAND_MASK))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	if (command & IB_USER_VERBS_CMD_FLAG_EXTENDED) {
+ 		if (cmd_idx >= uapi->num_write_ex)
+ 			return ERR_PTR(-EOPNOTSUPP);
+ 		return uapi->write_ex_methods[cmd_idx];
+ 	}
+ 
+ 	if (cmd_idx >= uapi->num_write)
+ 		return ERR_PTR(-EOPNOTSUPP);
+ 	return uapi->write_methods[cmd_idx];
+ }
+ 
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  #endif /* RDMA_CORE_H */
diff --cc drivers/infiniband/core/uverbs_cmd.c
index 507521d53e3f,d058b86dbc43..000000000000
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@@ -60,16 -59,17 +60,22 @@@ ib_uverbs_lookup_comp_file(int fd, stru
  	uverbs_uobject_get(uobj);
  	uobj_put_read(uobj);
  
 -	return container_of(uobj, struct ib_uverbs_completion_event_file,
 -			    uobj);
 +	uobj_file = container_of(uobj, struct ib_uobject_file, uobj);
 +	return container_of(uobj_file, struct ib_uverbs_completion_event_file,
 +			    uobj_file);
  }
 -#define ib_uverbs_lookup_comp_file(_fd, _ufile)                                \
 -	_ib_uverbs_lookup_comp_file((_fd)*typecheck(s32, _fd), _ufile)
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_get_context(struct ib_uverbs_file *file,
 +			      struct ib_device *ib_dev,
 +			      const char __user *buf,
 +			      int in_len, int out_len)
++=======
+ static int ib_uverbs_get_context(struct uverbs_attr_bundle *attrs,
+ 				 const char __user *buf, int in_len,
+ 				 int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
 -	struct ib_uverbs_file *file = attrs->ufile;
  	struct ib_uverbs_get_context      cmd;
  	struct ib_uverbs_get_context_resp resp;
  	struct ib_udata                   udata;
@@@ -140,13 -147,17 +146,13 @@@
  		goto err_file;
  	}
  
 -	fd_install(resp.async_fd, filp);
 +	file->ucontext = ucontext;
  
 -	/*
 -	 * Make sure that ib_uverbs_get_ucontext() sees the pointer update
 -	 * only after all writes to setup the ucontext have completed
 -	 */
 -	smp_store_release(&file->ucontext, ucontext);
 +	fd_install(resp.async_fd, filp);
  
 -	mutex_unlock(&file->ucontext_lock);
 +	mutex_unlock(&file->mutex);
  
- 	return in_len;
+ 	return 0;
  
  err_file:
  	ib_uverbs_free_async_event_file(file);
@@@ -211,10 -225,9 +217,16 @@@ static void copy_query_dev_fields(struc
  	resp->phys_port_cnt		= ib_dev->phys_port_cnt;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_query_device(struct ib_uverbs_file *file,
 +			       struct ib_device *ib_dev,
 +			       const char __user *buf,
 +			       int in_len, int out_len)
++=======
+ static int ib_uverbs_query_device(struct uverbs_attr_bundle *attrs,
+ 				  const char __user *buf, int in_len,
+ 				  int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_query_device      cmd;
  	struct ib_uverbs_query_device_resp resp;
@@@ -231,13 -249,32 +243,39 @@@
  	if (copy_to_user(u64_to_user_ptr(cmd.response), &resp, sizeof resp))
  		return -EFAULT;
  
- 	return in_len;
+ 	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_query_port(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf,
 +			     int in_len, int out_len)
++=======
+ /*
+  * ib_uverbs_query_port_resp.port_cap_flags started out as just a copy of the
+  * PortInfo CapabilityMask, but was extended with unique bits.
+  */
+ static u32 make_port_cap_flags(const struct ib_port_attr *attr)
+ {
+ 	u32 res;
+ 
+ 	/* All IBA CapabilityMask bits are passed through here, except bit 26,
+ 	 * which is overridden with IP_BASED_GIDS. This is due to a historical
+ 	 * mistake in the implementation of IP_BASED_GIDS. Otherwise all other
+ 	 * bits match the IBA definition across all kernel versions.
+ 	 */
+ 	res = attr->port_cap_flags & ~(u32)IB_UVERBS_PCF_IP_BASED_GIDS;
+ 
+ 	if (attr->ip_gids)
+ 		res |= IB_UVERBS_PCF_IP_BASED_GIDS;
+ 
+ 	return res;
+ }
+ 
+ static int ib_uverbs_query_port(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_query_port      cmd;
  	struct ib_uverbs_query_port_resp resp;
@@@ -287,13 -334,11 +325,18 @@@
  	if (copy_to_user(u64_to_user_ptr(cmd.response), &resp, sizeof resp))
  		return -EFAULT;
  
- 	return in_len;
+ 	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_alloc_pd(struct ib_uverbs_file *file,
 +			   struct ib_device *ib_dev,
 +			   const char __user *buf,
 +			   int in_len, int out_len)
++=======
+ static int ib_uverbs_alloc_pd(struct uverbs_attr_bundle *attrs,
+ 			      const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_alloc_pd      cmd;
  	struct ib_uverbs_alloc_pd_resp resp;
@@@ -339,9 -385,7 +382,13 @@@
  		goto err_copy;
  	}
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(uobj);
 +
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	ib_dealloc_pd(pd);
@@@ -351,18 -395,15 +398,27 @@@ err
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_dealloc_pd(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf,
 +			     int in_len, int out_len)
++=======
+ static int ib_uverbs_dealloc_pd(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_dealloc_pd cmd;
  
  	if (copy_from_user(&cmd, buf, sizeof cmd))
  		return -EFAULT;
  
++<<<<<<< HEAD
 +	return uobj_perform_destroy(UVERBS_OBJECT_PD, cmd.pd_handle, file,
 +				    in_len);
++=======
+ 	return uobj_perform_destroy(UVERBS_OBJECT_PD, cmd.pd_handle, attrs);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
  struct xrcd_table_entry {
@@@ -450,11 -491,10 +506,16 @@@ static void xrcd_table_delete(struct ib
  	}
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_open_xrcd(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_open_xrcd(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
 -	struct ib_uverbs_device *ibudev = attrs->ufile->device;
  	struct ib_uverbs_open_xrcd	cmd;
  	struct ib_uverbs_open_xrcd_resp	resp;
  	struct ib_udata			udata;
@@@ -545,11 -586,9 +606,15 @@@
  	if (f.file)
  		fdput(f);
  
 -	mutex_unlock(&ibudev->xrcd_tree_mutex);
 +	mutex_unlock(&file->device->xrcd_tree_mutex);
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(&obj->uobject);
 +
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(&obj->uobject);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	if (inode) {
@@@ -573,21 -612,18 +638,30 @@@ err_tree_mutex_unlock
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_close_xrcd(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len,
 +			     int out_len)
++=======
+ static int ib_uverbs_close_xrcd(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_close_xrcd cmd;
  
  	if (copy_from_user(&cmd, buf, sizeof cmd))
  		return -EFAULT;
  
++<<<<<<< HEAD
 +	return uobj_perform_destroy(UVERBS_OBJECT_XRCD, cmd.xrcd_handle, file,
 +				    in_len);
++=======
+ 	return uobj_perform_destroy(UVERBS_OBJECT_XRCD, cmd.xrcd_handle, attrs);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
 -int ib_uverbs_dealloc_xrcd(struct ib_uobject *uobject,
 +int ib_uverbs_dealloc_xrcd(struct ib_uverbs_device *dev,
  			   struct ib_xrcd *xrcd,
  			   enum rdma_remove_reason why)
  {
@@@ -608,10 -648,8 +682,15 @@@
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_reg_mr(struct ib_uverbs_file *file,
 +			 struct ib_device *ib_dev,
 +			 const char __user *buf, int in_len,
 +			 int out_len)
++=======
+ static int ib_uverbs_reg_mr(struct uverbs_attr_bundle *attrs,
+ 			    const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_reg_mr      cmd;
  	struct ib_uverbs_reg_mr_resp resp;
@@@ -685,9 -726,7 +764,13 @@@
  
  	uobj_put_obj_read(pd);
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(uobj);
 +
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	ib_dereg_mr(mr);
@@@ -700,10 -739,8 +783,15 @@@ err_free
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_rereg_mr(struct ib_uverbs_file *file,
 +			   struct ib_device *ib_dev,
 +			   const char __user *buf, int in_len,
 +			   int out_len)
++=======
+ static int ib_uverbs_rereg_mr(struct uverbs_attr_bundle *attrs,
+ 			      const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_rereg_mr      cmd;
  	struct ib_uverbs_rereg_mr_resp resp;
@@@ -792,24 -829,19 +880,37 @@@ put_uobjs
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_dereg_mr(struct ib_uverbs_file *file,
 +			   struct ib_device *ib_dev,
 +			   const char __user *buf, int in_len,
 +			   int out_len)
++=======
+ static int ib_uverbs_dereg_mr(struct uverbs_attr_bundle *attrs,
+ 			      const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_dereg_mr cmd;
  
  	if (copy_from_user(&cmd, buf, sizeof cmd))
  		return -EFAULT;
  
++<<<<<<< HEAD
 +	return uobj_perform_destroy(UVERBS_OBJECT_MR, cmd.mr_handle, file,
 +				    in_len);
 +}
 +
 +ssize_t ib_uverbs_alloc_mw(struct ib_uverbs_file *file,
 +			   struct ib_device *ib_dev,
 +			   const char __user *buf, int in_len,
 +			   int out_len)
++=======
+ 	return uobj_perform_destroy(UVERBS_OBJECT_MR, cmd.mr_handle, attrs);
+ }
+ 
+ static int ib_uverbs_alloc_mw(struct uverbs_attr_bundle *attrs,
+ 			      const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_alloc_mw      cmd;
  	struct ib_uverbs_alloc_mw_resp resp;
@@@ -863,9 -896,7 +964,13 @@@
  	}
  
  	uobj_put_obj_read(pd);
++<<<<<<< HEAD
 +	uobj_alloc_commit(uobj);
 +
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	uverbs_dealloc_mw(mw);
@@@ -876,24 -907,20 +981,38 @@@ err_free
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_dealloc_mw(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len,
 +			     int out_len)
++=======
+ static int ib_uverbs_dealloc_mw(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_dealloc_mw cmd;
  
  	if (copy_from_user(&cmd, buf, sizeof(cmd)))
  		return -EFAULT;
  
++<<<<<<< HEAD
 +	return uobj_perform_destroy(UVERBS_OBJECT_MW, cmd.mw_handle, file,
 +				    in_len);
 +}
 +
 +ssize_t ib_uverbs_create_comp_channel(struct ib_uverbs_file *file,
 +				      struct ib_device *ib_dev,
 +				      const char __user *buf, int in_len,
 +				      int out_len)
++=======
+ 	return uobj_perform_destroy(UVERBS_OBJECT_MW, cmd.mw_handle, attrs);
+ }
+ 
+ static int ib_uverbs_create_comp_channel(struct uverbs_attr_bundle *attrs,
+ 					 const char __user *buf, int in_len,
+ 					 int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_create_comp_channel	   cmd;
  	struct ib_uverbs_create_comp_channel_resp  resp;
@@@ -921,12 -949,10 +1040,16 @@@
  		return -EFAULT;
  	}
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(uobj);
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
 -static struct ib_ucq_object *create_cq(struct uverbs_attr_bundle *attrs,
 +static struct ib_ucq_object *create_cq(struct ib_uverbs_file *file,
 +					struct ib_device *ib_dev,
  				       struct ib_udata *ucore,
  				       struct ib_udata *uhw,
  				       struct ib_uverbs_ex_create_cq *cmd,
@@@ -1006,7 -1028,9 +1129,13 @@@
  	if (ret)
  		goto err_cb;
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(&obj->uobject);
++=======
+ 	ret = uobj_alloc_commit(&obj->uobject);
+ 	if (ret)
+ 		return ERR_PTR(ret);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  	return obj;
  
  err_cb:
@@@ -1033,10 -1057,8 +1162,15 @@@ static int ib_uverbs_create_cq_cb(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_create_cq(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_create_cq(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_create_cq      cmd;
  	struct ib_uverbs_ex_create_cq	cmd_ex;
@@@ -1073,10 -1095,10 +1207,10 @@@
  	if (IS_ERR(obj))
  		return PTR_ERR(obj);
  
- 	return in_len;
+ 	return 0;
  }
  
 -static int ib_uverbs_ex_create_cq_cb(struct uverbs_attr_bundle *attrs,
 +static int ib_uverbs_ex_create_cq_cb(struct ib_uverbs_file *file,
  				     struct ib_ucq_object *obj,
  				     struct ib_uverbs_ex_create_cq_resp *resp,
  				     struct ib_udata *ucore, void *context)
@@@ -1121,10 -1141,8 +1255,15 @@@ int ib_uverbs_ex_create_cq(struct ib_uv
  	return PTR_ERR_OR_ZERO(obj);
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_resize_cq(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_resize_cq(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_resize_cq	cmd;
  	struct ib_uverbs_resize_cq_resp	resp = {};
@@@ -1189,10 -1207,8 +1328,15 @@@ static int copy_wc_to_user(struct ib_de
  	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_poll_cq(struct ib_uverbs_file *file,
 +			  struct ib_device *ib_dev,
 +			  const char __user *buf, int in_len,
 +			  int out_len)
++=======
+ static int ib_uverbs_poll_cq(struct uverbs_attr_bundle *attrs,
+ 			     const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_poll_cq       cmd;
  	struct ib_uverbs_poll_cq_resp  resp;
@@@ -1241,10 -1257,9 +1385,16 @@@ out_put
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_req_notify_cq(struct ib_uverbs_file *file,
 +				struct ib_device *ib_dev,
 +				const char __user *buf, int in_len,
 +				int out_len)
++=======
+ static int ib_uverbs_req_notify_cq(struct uverbs_attr_bundle *attrs,
+ 				   const char __user *buf, int in_len,
+ 				   int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_req_notify_cq cmd;
  	struct ib_cq                  *cq;
@@@ -1261,13 -1276,11 +1411,18 @@@
  
  	uobj_put_obj_read(cq);
  
- 	return in_len;
+ 	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_destroy_cq(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len,
 +			     int out_len)
++=======
+ static int ib_uverbs_destroy_cq(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_destroy_cq      cmd;
  	struct ib_uverbs_destroy_cq_resp resp;
@@@ -1307,10 -1304,10 +1462,10 @@@
  	if (copy_to_user(u64_to_user_ptr(cmd.response), &resp, sizeof resp))
  		return -EFAULT;
  
- 	return in_len;
+ 	return 0;
  }
  
 -static int create_qp(struct uverbs_attr_bundle *attrs,
 +static int create_qp(struct ib_uverbs_file *file,
  		     struct ib_udata *ucore,
  		     struct ib_udata *uhw,
  		     struct ib_uverbs_ex_create_qp *cmd,
@@@ -1561,9 -1561,7 +1716,13 @@@
  	if (ind_tbl)
  		uobj_put_obj_read(ind_tbl);
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(&obj->uevent.uobject);
 +
 +	return 0;
++=======
+ 	return uobj_alloc_commit(&obj->uevent.uobject);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  err_cb:
  	ib_destroy_qp(qp);
  
@@@ -1595,10 -1593,8 +1754,15 @@@ static int ib_uverbs_create_qp_cb(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_create_qp(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_create_qp(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_create_qp      cmd;
  	struct ib_uverbs_ex_create_qp	cmd_ex;
@@@ -1643,10 -1639,10 +1807,10 @@@
  	if (err)
  		return err;
  
- 	return in_len;
+ 	return 0;
  }
  
 -static int ib_uverbs_ex_create_qp_cb(struct uverbs_attr_bundle *attrs,
 +static int ib_uverbs_ex_create_qp_cb(struct ib_uverbs_file *file,
  				     struct ib_uverbs_ex_create_qp_resp *resp,
  				     struct ib_udata *ucore)
  {
@@@ -1693,9 -1687,8 +1857,14 @@@ int ib_uverbs_ex_create_qp(struct ib_uv
  	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_open_qp(struct ib_uverbs_file *file,
 +			  struct ib_device *ib_dev,
 +			  const char __user *buf, int in_len, int out_len)
++=======
+ static int ib_uverbs_open_qp(struct uverbs_attr_bundle *attrs,
+ 			     const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_open_qp        cmd;
  	struct ib_uverbs_create_qp_resp resp;
@@@ -1768,10 -1761,7 +1937,14 @@@
  	qp->uobject = &obj->uevent.uobject;
  	uobj_put_read(xrcd_uobj);
  
++<<<<<<< HEAD
 +
 +	uobj_alloc_commit(&obj->uevent.uobject);
 +
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(&obj->uevent.uobject);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_destroy:
  	ib_destroy_qp(qp);
@@@ -1804,10 -1794,8 +1977,15 @@@ static void copy_ah_attr_to_uverbs(stru
  	uverb_attr->port_num          = rdma_ah_get_port_num(rdma_attr);
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_query_qp(struct ib_uverbs_file *file,
 +			   struct ib_device *ib_dev,
 +			   const char __user *buf, int in_len,
 +			   int out_len)
++=======
+ static int ib_uverbs_query_qp(struct uverbs_attr_bundle *attrs,
+ 			      const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_query_qp      cmd;
  	struct ib_uverbs_query_qp_resp resp;
@@@ -2078,10 -2067,8 +2256,15 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_modify_qp(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_modify_qp(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_ex_modify_qp cmd = {};
  	struct ib_udata udata;
@@@ -2098,17 -2084,11 +2280,21 @@@
  		   in_len - sizeof(cmd.base) - sizeof(struct ib_uverbs_cmd_hdr),
  		   out_len);
  
++<<<<<<< HEAD
 +	ret = modify_qp(file, &cmd, &udata);
 +	if (ret)
 +		return ret;
 +
 +	return in_len;
++=======
+ 	return modify_qp(attrs, &cmd, &udata);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
 -static int ib_uverbs_ex_modify_qp(struct uverbs_attr_bundle *attrs,
 -				  struct ib_udata *ucore, struct ib_udata *uhw)
 +int ib_uverbs_ex_modify_qp(struct ib_uverbs_file *file,
 +			   struct ib_device *ib_dev,
 +			   struct ib_udata *ucore,
 +			   struct ib_udata *uhw)
  {
  	struct ib_uverbs_ex_modify_qp cmd = {};
  	int ret;
@@@ -2141,10 -2121,8 +2327,15 @@@
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_destroy_qp(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len,
 +			     int out_len)
++=======
+ static int ib_uverbs_destroy_qp(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_destroy_qp      cmd;
  	struct ib_uverbs_destroy_qp_resp resp;
@@@ -2194,10 -2158,8 +2385,15 @@@ static void *alloc_wr(size_t wr_size, _
  			 num_sge * sizeof (struct ib_sge), GFP_KERNEL);
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_post_send(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_post_send(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_post_send      cmd;
  	struct ib_uverbs_post_send_resp resp;
@@@ -2474,10 -2437,8 +2670,15 @@@ err
  	return ERR_PTR(ret);
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_post_recv(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_post_recv(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_post_recv      cmd;
  	struct ib_uverbs_post_recv_resp resp;
@@@ -2520,13 -2482,12 +2721,19 @@@ out
  		wr = next;
  	}
  
- 	return ret ? ret : in_len;
+ 	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_post_srq_recv(struct ib_uverbs_file *file,
 +				struct ib_device *ib_dev,
 +				const char __user *buf, int in_len,
 +				int out_len)
++=======
+ static int ib_uverbs_post_srq_recv(struct uverbs_attr_bundle *attrs,
+ 				   const char __user *buf, int in_len,
+ 				   int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_post_srq_recv      cmd;
  	struct ib_uverbs_post_srq_recv_resp resp;
@@@ -2570,13 -2531,11 +2777,18 @@@ out
  		wr = next;
  	}
  
- 	return ret ? ret : in_len;
+ 	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_create_ah(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf, int in_len,
 +			    int out_len)
++=======
+ static int ib_uverbs_create_ah(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_create_ah	 cmd;
  	struct ib_uverbs_create_ah_resp	 resp;
@@@ -2647,9 -2609,7 +2859,13 @@@
  	}
  
  	uobj_put_obj_read(pd);
++<<<<<<< HEAD
 +	uobj_alloc_commit(uobj);
 +
 +	return in_len;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	rdma_destroy_ah(ah);
@@@ -2662,23 -2622,20 +2878,37 @@@ err
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_destroy_ah(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len, int out_len)
++=======
+ static int ib_uverbs_destroy_ah(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_destroy_ah cmd;
  
  	if (copy_from_user(&cmd, buf, sizeof cmd))
  		return -EFAULT;
  
++<<<<<<< HEAD
 +	return uobj_perform_destroy(UVERBS_OBJECT_AH, cmd.ah_handle, file,
 +				    in_len);
 +}
 +
 +ssize_t ib_uverbs_attach_mcast(struct ib_uverbs_file *file,
 +			       struct ib_device *ib_dev,
 +			       const char __user *buf, int in_len,
 +			       int out_len)
++=======
+ 	return uobj_perform_destroy(UVERBS_OBJECT_AH, cmd.ah_handle, attrs);
+ }
+ 
+ static int ib_uverbs_attach_mcast(struct uverbs_attr_bundle *attrs,
+ 				  const char __user *buf, int in_len,
+ 				  int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_attach_mcast cmd;
  	struct ib_qp                 *qp;
@@@ -2722,13 -2679,12 +2952,19 @@@ out_put
  	mutex_unlock(&obj->mcast_lock);
  	uobj_put_obj_read(qp);
  
- 	return ret ? ret : in_len;
+ 	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_detach_mcast(struct ib_uverbs_file *file,
 +			       struct ib_device *ib_dev,
 +			       const char __user *buf, int in_len,
 +			       int out_len)
++=======
+ static int ib_uverbs_detach_mcast(struct uverbs_attr_bundle *attrs,
+ 				  const char __user *buf, int in_len,
+ 				  int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_detach_mcast cmd;
  	struct ib_uqp_object         *obj;
@@@ -2766,19 -2722,10 +3002,19 @@@
  out_put:
  	mutex_unlock(&obj->mcast_lock);
  	uobj_put_obj_read(qp);
- 	return ret ? ret : in_len;
+ 	return ret;
  }
  
 -struct ib_uflow_resources *flow_resources_alloc(size_t num_specs)
 +struct ib_uflow_resources {
 +	size_t			max;
 +	size_t			num;
 +	size_t			collection_num;
 +	size_t			counters_num;
 +	struct ib_counters	**counters;
 +	struct ib_flow_action	**collection;
 +};
 +
 +static struct ib_uflow_resources *flow_resources_alloc(size_t num_specs)
  {
  	struct ib_uflow_resources *resources;
  
@@@ -3196,8 -3141,7 +3432,12 @@@ int ib_uverbs_ex_create_wq(struct ib_uv
  
  	uobj_put_obj_read(pd);
  	uobj_put_obj_read(cq);
++<<<<<<< HEAD
 +	uobj_alloc_commit(&obj->uevent.uobject);
 +	return 0;
++=======
+ 	return uobj_alloc_commit(&obj->uevent.uobject);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	ib_destroy_wq(wq);
@@@ -3445,8 -3367,7 +3685,12 @@@ int ib_uverbs_ex_create_rwq_ind_table(s
  	for (j = 0; j < num_read_wqs; j++)
  		uobj_put_obj_read(wqs[j]);
  
++<<<<<<< HEAD
 +	uobj_alloc_commit(uobj);
 +	return 0;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	ib_destroy_rwq_ind_table(rwq_ind_tbl);
@@@ -3488,13 -3408,12 +3732,17 @@@ int ib_uverbs_ex_destroy_rwq_ind_table(
  		return -EOPNOTSUPP;
  
  	return uobj_perform_destroy(UVERBS_OBJECT_RWQ_IND_TBL,
++<<<<<<< HEAD
 +				    cmd.ind_tbl_handle, file, 0);
++=======
+ 				    cmd.ind_tbl_handle, attrs);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
 -static int ib_uverbs_ex_create_flow(struct uverbs_attr_bundle *attrs,
 -				    struct ib_udata *ucore,
 -				    struct ib_udata *uhw)
 +int ib_uverbs_ex_create_flow(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     struct ib_udata *ucore,
 +			     struct ib_udata *uhw)
  {
  	struct ib_uverbs_create_flow	  cmd;
  	struct ib_uverbs_create_flow_resp resp;
@@@ -3653,7 -3566,7 +3901,11 @@@
  	kfree(flow_attr);
  	if (cmd.flow_attr.num_of_specs)
  		kfree(kern_flow_attr);
++<<<<<<< HEAD
 +	return 0;
++=======
+ 	return uobj_alloc_commit(uobj);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  err_copy:
  	if (!qp->device->destroy_flow(flow_id))
  		atomic_dec(&qp->usecnt);
@@@ -3689,12 -3601,10 +3941,16 @@@ int ib_uverbs_ex_destroy_flow(struct ib
  	if (cmd.comp_mask)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	return uobj_perform_destroy(UVERBS_OBJECT_FLOW, cmd.flow_handle, file,
 +				    0);
++=======
+ 	return uobj_perform_destroy(UVERBS_OBJECT_FLOW, cmd.flow_handle, attrs);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
 -static int __uverbs_create_xsrq(struct uverbs_attr_bundle *attrs,
 +static int __uverbs_create_xsrq(struct ib_uverbs_file *file,
 +				struct ib_device *ib_dev,
  				struct ib_uverbs_create_xsrq *cmd,
  				struct ib_udata *udata)
  {
@@@ -3806,9 -3717,7 +4062,13 @@@
  		uobj_put_obj_read(attr.ext.cq);
  
  	uobj_put_obj_read(pd);
++<<<<<<< HEAD
 +	uobj_alloc_commit(&obj->uevent.uobject);
 +
 +	return 0;
++=======
+ 	return uobj_alloc_commit(&obj->uevent.uobject);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  
  err_copy:
  	ib_destroy_srq(srq);
@@@ -3831,10 -3740,8 +4091,15 @@@ err
  	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_create_srq(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len,
 +			     int out_len)
++=======
+ static int ib_uverbs_create_srq(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_create_srq      cmd;
  	struct ib_uverbs_create_xsrq     xcmd;
@@@ -3862,16 -3768,12 +4126,25 @@@
  		   in_len - sizeof(cmd) - sizeof(struct ib_uverbs_cmd_hdr),
  		   out_len - sizeof(resp));
  
++<<<<<<< HEAD
 +	ret = __uverbs_create_xsrq(file, ib_dev, &xcmd, &udata);
 +	if (ret)
 +		return ret;
 +
 +	return in_len;
 +}
 +
 +ssize_t ib_uverbs_create_xsrq(struct ib_uverbs_file *file,
 +			      struct ib_device *ib_dev,
 +			      const char __user *buf, int in_len, int out_len)
++=======
+ 	return __uverbs_create_xsrq(attrs, &xcmd, &udata);
+ }
+ 
+ static int ib_uverbs_create_xsrq(struct uverbs_attr_bundle *attrs,
+ 				 const char __user *buf, int in_len,
+ 				 int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_create_xsrq     cmd;
  	struct ib_uverbs_create_srq_resp resp;
@@@ -3889,17 -3790,11 +4161,25 @@@
  		   in_len - sizeof(cmd) - sizeof(struct ib_uverbs_cmd_hdr),
  		   out_len - sizeof(resp));
  
++<<<<<<< HEAD
 +	ret = __uverbs_create_xsrq(file, ib_dev, &cmd, &udata);
 +	if (ret)
 +		return ret;
 +
 +	return in_len;
 +}
 +
 +ssize_t ib_uverbs_modify_srq(struct ib_uverbs_file *file,
 +			     struct ib_device *ib_dev,
 +			     const char __user *buf, int in_len,
 +			     int out_len)
++=======
+ 	return __uverbs_create_xsrq(attrs, &cmd, &udata);
+ }
+ 
+ static int ib_uverbs_modify_srq(struct uverbs_attr_bundle *attrs,
+ 				const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_modify_srq cmd;
  	struct ib_udata             udata;
@@@ -3924,13 -3819,11 +4204,18 @@@
  
  	uobj_put_obj_read(srq);
  
- 	return ret ? ret : in_len;
+ 	return ret;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_query_srq(struct ib_uverbs_file *file,
 +			    struct ib_device *ib_dev,
 +			    const char __user *buf,
 +			    int in_len, int out_len)
++=======
+ static int ib_uverbs_query_srq(struct uverbs_attr_bundle *attrs,
+ 			       const char __user *buf, int in_len, int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_query_srq      cmd;
  	struct ib_uverbs_query_srq_resp resp;
@@@ -3964,13 -3857,12 +4249,19 @@@
  	if (copy_to_user(u64_to_user_ptr(cmd.response), &resp, sizeof resp))
  		return -EFAULT;
  
- 	return in_len;
+ 	return 0;
  }
  
++<<<<<<< HEAD
 +ssize_t ib_uverbs_destroy_srq(struct ib_uverbs_file *file,
 +			      struct ib_device *ib_dev,
 +			      const char __user *buf, int in_len,
 +			      int out_len)
++=======
+ static int ib_uverbs_destroy_srq(struct uverbs_attr_bundle *attrs,
+ 				 const char __user *buf, int in_len,
+ 				 int out_len)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
  	struct ib_uverbs_destroy_srq      cmd;
  	struct ib_uverbs_destroy_srq_resp resp;
@@@ -4005,13 -3885,12 +4296,13 @@@
  	if (copy_to_user(u64_to_user_ptr(cmd.response), &resp, sizeof(resp)))
  		return -EFAULT;
  
- 	return in_len;
+ 	return 0;
  }
  
 -static int ib_uverbs_ex_query_device(struct uverbs_attr_bundle *attrs,
 -				     struct ib_udata *ucore,
 -				     struct ib_udata *uhw)
 +int ib_uverbs_ex_query_device(struct ib_uverbs_file *file,
 +			      struct ib_device *ib_dev,
 +			      struct ib_udata *ucore,
 +			      struct ib_udata *uhw)
  {
  	struct ib_uverbs_ex_query_device_resp resp = { {0} };
  	struct ib_uverbs_ex_query_device  cmd;
diff --cc drivers/infiniband/core/uverbs_main.c
index 8cc3600913c7,ac830735f45b..000000000000
--- a/drivers/infiniband/core/uverbs_main.c
+++ b/drivers/infiniband/core/uverbs_main.c
@@@ -796,13 -687,11 +796,17 @@@ static ssize_t ib_uverbs_write(struct f
  					ex_hdr.provider_in_words * 8,
  					ex_hdr.provider_out_words * 8);
  
++<<<<<<< HEAD
 +		ret = uverbs_ex_cmd_table[command](file, ib_dev, &ucore, &uhw);
 +		ret = (ret) ? : count;
++=======
+ 		ret = method_elm->handler_ex(&bundle, &ucore, &uhw);
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  	}
  
 +out:
  	srcu_read_unlock(&file->device->disassociate_srcu, srcu_key);
- 	return ret;
+ 	return (ret) ? : count;
  }
  
  static int ib_uverbs_mmap(struct file *filp, struct vm_area_struct *vma)
diff --cc include/rdma/uverbs_ioctl.h
index 2cc45699a237,2a59d6ad9f62..000000000000
--- a/include/rdma/uverbs_ioctl.h
+++ b/include/rdma/uverbs_ioctl.h
@@@ -187,137 -338,266 +187,265 @@@ struct uverbs_object_def 
  	const struct uverbs_method_def * const (*methods)[];
  };
  
 -enum uapi_definition_kind {
 -	UAPI_DEF_END = 0,
 -	UAPI_DEF_OBJECT_START,
 -	UAPI_DEF_WRITE,
 -	UAPI_DEF_CHAIN_OBJ_TREE,
 -	UAPI_DEF_CHAIN,
 -	UAPI_DEF_IS_SUPPORTED_FUNC,
 -	UAPI_DEF_IS_SUPPORTED_DEV_FN,
 -};
 -
 -enum uapi_definition_scope {
 -	UAPI_SCOPE_OBJECT = 1,
 -	UAPI_SCOPE_METHOD = 2,
 +struct uverbs_object_tree_def {
 +	size_t					 num_objects;
 +	const struct uverbs_object_def * const (*objects)[];
  };
  
 +#define UA_FLAGS(_flags)  .flags = _flags
 +#define __UVERBS_ATTR0(_id, _type, _fld, _attr, ...)              \
 +	((const struct uverbs_attr_def)				  \
 +	 {.id = _id, .attr = {{._fld = {.type = _type, _attr, .flags = 0, } }, } })
 +#define __UVERBS_ATTR1(_id, _type, _fld, _attr, _extra1, ...)      \
 +	((const struct uverbs_attr_def)				  \
 +	 {.id = _id, .attr = {{._fld = {.type = _type, _attr, _extra1 } },} })
 +#define __UVERBS_ATTR2(_id, _type, _fld, _attr, _extra1, _extra2)    \
 +	((const struct uverbs_attr_def)				  \
 +	 {.id = _id, .attr = {{._fld = {.type = _type, _attr, _extra1, _extra2 } },} })
 +#define __UVERBS_ATTR(_id, _type, _fld, _attr, _extra1, _extra2, _n, ...)	\
 +	__UVERBS_ATTR##_n(_id, _type, _fld, _attr, _extra1, _extra2)
 +
++<<<<<<< HEAD
++=======
+ struct uapi_definition {
+ 	u8 kind;
+ 	u8 scope;
+ 	union {
+ 		struct {
+ 			u16 object_id;
+ 		} object_start;
+ 		struct {
+ 			u8 is_ex;
+ 			u16 command_num;
+ 		} write;
+ 	};
+ 
+ 	union {
+ 		bool (*func_is_supported)(struct ib_device *device);
+ 		int (*func_write)(struct uverbs_attr_bundle *attrs,
+ 				  const char __user *buf, int in_len,
+ 				  int out_len);
+ 		int (*func_write_ex)(struct uverbs_attr_bundle *attrs,
+ 				     struct ib_udata *ucore,
+ 				     struct ib_udata *uhw);
+ 		const struct uapi_definition *chain;
+ 		const struct uverbs_object_def *chain_obj_tree;
+ 		size_t needs_fn_offset;
+ 	};
+ };
+ 
+ /* Define things connected to object_id */
+ #define DECLARE_UVERBS_OBJECT(_object_id, ...)                                 \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_OBJECT_START,                                 \
+ 		.object_start = { .object_id = _object_id },                   \
+ 	},                                                                     \
+ 		##__VA_ARGS__
+ 
+ /* Use in a var_args of DECLARE_UVERBS_OBJECT */
+ #define DECLARE_UVERBS_WRITE(_command_num, _func, ...)                         \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_WRITE,                                        \
+ 		.scope = UAPI_SCOPE_OBJECT,                                    \
+ 		.write = { .is_ex = 0, .command_num = _command_num },          \
+ 		.func_write = _func,                                           \
+ 	},                                                                     \
+ 		##__VA_ARGS__
+ 
+ /* Use in a var_args of DECLARE_UVERBS_OBJECT */
+ #define DECLARE_UVERBS_WRITE_EX(_command_num, _func, ...)                      \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_WRITE,                                        \
+ 		.scope = UAPI_SCOPE_OBJECT,                                    \
+ 		.write = { .is_ex = 1, .command_num = _command_num },          \
+ 		.func_write_ex = _func,                                        \
+ 	},                                                                     \
+ 		##__VA_ARGS__
+ 
+ /*
+  * Object is only supported if the function pointer named ibdev_fn in struct
+  * ib_device is not NULL.
+  */
+ #define UAPI_DEF_OBJ_NEEDS_FN(ibdev_fn)                                        \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_IS_SUPPORTED_DEV_FN,                          \
+ 		.scope = UAPI_SCOPE_OBJECT,                                    \
+ 		.needs_fn_offset =                                             \
+ 			offsetof(struct ib_device, ibdev_fn) +                 \
+ 			BUILD_BUG_ON_ZERO(                                     \
+ 				sizeof(((struct ib_device *)0)->ibdev_fn) !=   \
+ 				sizeof(void *)),                               \
+ 	}
+ 
+ /*
+  * Method is only supported if the function pointer named ibdev_fn in struct
+  * ib_device is not NULL.
+  */
+ #define UAPI_DEF_METHOD_NEEDS_FN(ibdev_fn)                                     \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_IS_SUPPORTED_DEV_FN,                          \
+ 		.scope = UAPI_SCOPE_METHOD,                                    \
+ 		.needs_fn_offset =                                             \
+ 			offsetof(struct ib_device, ibdev_fn) +                 \
+ 			BUILD_BUG_ON_ZERO(                                     \
+ 				sizeof(((struct ib_device *)0)->ibdev_fn) !=   \
+ 				sizeof(void *)),                               \
+ 	}
+ 
+ /* Call a function to determine if the entire object is supported or not */
+ #define UAPI_DEF_IS_OBJ_SUPPORTED(_func)                                       \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_IS_SUPPORTED_FUNC,                            \
+ 		.scope = UAPI_SCOPE_OBJECT, .func_is_supported = _func,        \
+ 	}
+ 
+ /* Include another struct uapi_definition in this one */
+ #define UAPI_DEF_CHAIN(_def_var)                                               \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_CHAIN, .chain = _def_var,                     \
+ 	}
+ 
+ /* Temporary until the tree base description is replaced */
+ #define UAPI_DEF_CHAIN_OBJ_TREE(_object_enum, _object_ptr)                     \
+ 	{                                                                      \
+ 		.kind = UAPI_DEF_CHAIN_OBJ_TREE,                               \
+ 		.object_start = { .object_id = _object_enum },                 \
+ 		.chain_obj_tree = _object_ptr,                                 \
+ 	}
+ #define UAPI_DEF_CHAIN_OBJ_TREE_NAMED(_object_enum, ...)                       \
+ 	UAPI_DEF_CHAIN_OBJ_TREE(_object_enum, &UVERBS_OBJECT(_object_enum)),   \
+ 		##__VA_ARGS__
+ 
+ /*
+  * =======================================
+  *	Attribute Specifications
+  * =======================================
+  */
+ 
+ #define UVERBS_ATTR_SIZE(_min_len, _len)			\
+ 	.u.ptr.min_len = _min_len, .u.ptr.len = _len
+ 
+ #define UVERBS_ATTR_NO_DATA() UVERBS_ATTR_SIZE(0, 0)
+ 
+ /*
+  * Specifies a uapi structure that cannot be extended. The user must always
+  * supply the whole structure and nothing more. The structure must be declared
+  * in a header under include/uapi/rdma.
+  */
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  #define UVERBS_ATTR_TYPE(_type)					\
 -	.u.ptr.min_len = sizeof(_type), .u.ptr.len = sizeof(_type)
 -/*
 - * Specifies a uapi structure where the user must provide at least up to
 - * member 'last'.  Anything after last and up until the end of the structure
 - * can be non-zero, anything longer than the end of the structure must be
 - * zero. The structure must be declared in a header under include/uapi/rdma.
 - */
 -#define UVERBS_ATTR_STRUCT(_type, _last)                                       \
 -	.zero_trailing = 1,                                                    \
 -	UVERBS_ATTR_SIZE(((uintptr_t)(&((_type *)0)->_last + 1)),              \
 -			 sizeof(_type))
 -/*
 - * Specifies at least min_len bytes must be passed in, but the amount can be
 - * larger, up to the protocol maximum size. No check for zeroing is done.
 - */
 -#define UVERBS_ATTR_MIN_SIZE(_min_len) UVERBS_ATTR_SIZE(_min_len, USHRT_MAX)
 -
 -/* Must be used in the '...' of any UVERBS_ATTR */
 -#define UA_ALLOC_AND_COPY .alloc_and_copy = 1
 -#define UA_MANDATORY .mandatory = 1
 -#define UA_OPTIONAL .mandatory = 0
 -
 -/*
 - * min_len must be bigger than 0 and _max_len must be smaller than 4095.  Only
 - * READ\WRITE accesses are supported.
 - */
 -#define UVERBS_ATTR_IDRS_ARR(_attr_id, _idr_type, _access, _min_len, _max_len, \
 -			     ...)                                              \
 -	(&(const struct uverbs_attr_def){                                      \
 -		.id = (_attr_id) +                                             \
 -		      BUILD_BUG_ON_ZERO((_min_len) == 0 ||                     \
 -					(_max_len) >                           \
 -						PAGE_SIZE / sizeof(void *) ||  \
 -					(_min_len) > (_max_len) ||             \
 -					(_access) == UVERBS_ACCESS_NEW ||      \
 -					(_access) == UVERBS_ACCESS_DESTROY),   \
 -		.attr = { .type = UVERBS_ATTR_TYPE_IDRS_ARRAY,                 \
 -			  .u2.objs_arr.obj_type = _idr_type,                   \
 -			  .u2.objs_arr.access = _access,                       \
 -			  .u2.objs_arr.min_len = _min_len,                     \
 -			  .u2.objs_arr.max_len = _max_len,                     \
 -			  __VA_ARGS__ } })
 -
 -#define UVERBS_ATTR_IDR(_attr_id, _idr_type, _access, ...)                     \
 -	(&(const struct uverbs_attr_def){                                      \
 -		.id = _attr_id,                                                \
 -		.attr = { .type = UVERBS_ATTR_TYPE_IDR,                        \
 -			  .u.obj.obj_type = _idr_type,                         \
 -			  .u.obj.access = _access,                             \
 -			  __VA_ARGS__ } })
 -
 -#define UVERBS_ATTR_FD(_attr_id, _fd_type, _access, ...)                       \
 -	(&(const struct uverbs_attr_def){                                      \
 -		.id = (_attr_id) +                                             \
 -		      BUILD_BUG_ON_ZERO((_access) != UVERBS_ACCESS_NEW &&      \
 -					(_access) != UVERBS_ACCESS_READ),      \
 -		.attr = { .type = UVERBS_ATTR_TYPE_FD,                         \
 -			  .u.obj.obj_type = _fd_type,                          \
 -			  .u.obj.access = _access,                             \
 -			  __VA_ARGS__ } })
 -
 -#define UVERBS_ATTR_PTR_IN(_attr_id, _type, ...)                               \
 -	(&(const struct uverbs_attr_def){                                      \
 -		.id = _attr_id,                                                \
 -		.attr = { .type = UVERBS_ATTR_TYPE_PTR_IN,                     \
 -			  _type,                                               \
 -			  __VA_ARGS__ } })
 -
 -#define UVERBS_ATTR_PTR_OUT(_attr_id, _type, ...)                              \
 -	(&(const struct uverbs_attr_def){                                      \
 -		.id = _attr_id,                                                \
 -		.attr = { .type = UVERBS_ATTR_TYPE_PTR_OUT,                    \
 -			  _type,                                               \
 -			  __VA_ARGS__ } })
 -
 -/* _enum_arry should be a 'static const union uverbs_attr_spec[]' */
 -#define UVERBS_ATTR_ENUM_IN(_attr_id, _enum_arr, ...)                          \
 -	(&(const struct uverbs_attr_def){                                      \
 -		.id = _attr_id,                                                \
 -		.attr = { .type = UVERBS_ATTR_TYPE_ENUM_IN,                    \
 -			  .u2.enum_def.ids = _enum_arr,                        \
 -			  .u.enum_def.num_elems = ARRAY_SIZE(_enum_arr),       \
 -			  __VA_ARGS__ },                                       \
 -	})
 -
 -/* An input value that is a member in the enum _enum_type. */
 -#define UVERBS_ATTR_CONST_IN(_attr_id, _enum_type, ...)                        \
 -	UVERBS_ATTR_PTR_IN(                                                    \
 -		_attr_id,                                                      \
 -		UVERBS_ATTR_SIZE(                                              \
 -			sizeof(u64) + BUILD_BUG_ON_ZERO(!sizeof(_enum_type)),  \
 -			sizeof(u64)),                                          \
 -		__VA_ARGS__)
 +	.min_len = sizeof(_type), .len = sizeof(_type)
 +#define UVERBS_ATTR_STRUCT(_type, _last)			\
 +	.min_len = ((uintptr_t)(&((_type *)0)->_last + 1)), .len = sizeof(_type)
 +#define UVERBS_ATTR_SIZE(_min_len, _len)			\
 +	.min_len = _min_len, .len = _len
 +#define UVERBS_ATTR_MIN_SIZE(_min_len)				\
 +	UVERBS_ATTR_SIZE(_min_len, USHRT_MAX)
  
  /*
 - * An input value that is a bitwise combination of values of _enum_type.
 - * This permits the flag value to be passed as either a u32 or u64, it must
 - * be retrieved via uverbs_get_flag().
 + * In new compiler, UVERBS_ATTR could be simplified by declaring it as
 + * [_id] = {.type = _type, .len = _len, ##__VA_ARGS__}
 + * But since we support older compilers too, we need the more complex code.
   */
 -#define UVERBS_ATTR_FLAGS_IN(_attr_id, _enum_type, ...)                        \
 -	UVERBS_ATTR_PTR_IN(                                                    \
 -		_attr_id,                                                      \
 -		UVERBS_ATTR_SIZE(sizeof(u32) + BUILD_BUG_ON_ZERO(              \
 -						       !sizeof(_enum_type *)), \
 -				 sizeof(u64)),                                 \
 -		__VA_ARGS__)
 +#define UVERBS_ATTR(_id, _type, _fld, _attr, ...)			\
 +	__UVERBS_ATTR(_id, _type, _fld, _attr, ##__VA_ARGS__, 2, 1, 0)
 +#define UVERBS_ATTR_PTR_IN_SZ(_id, _len, ...)				\
 +	UVERBS_ATTR(_id, UVERBS_ATTR_TYPE_PTR_IN, ptr, _len, ##__VA_ARGS__)
 +/* If sizeof(_type) <= sizeof(u64), this will be inlined rather than a pointer */
 +#define UVERBS_ATTR_PTR_IN(_id, _type, ...)				\
 +	UVERBS_ATTR_PTR_IN_SZ(_id, _type, ##__VA_ARGS__)
 +#define UVERBS_ATTR_PTR_OUT_SZ(_id, _len, ...)				\
 +	UVERBS_ATTR(_id, UVERBS_ATTR_TYPE_PTR_OUT, ptr, _len, ##__VA_ARGS__)
 +#define UVERBS_ATTR_PTR_OUT(_id, _type, ...)				\
 +	UVERBS_ATTR_PTR_OUT_SZ(_id, _type, ##__VA_ARGS__)
 +#define UVERBS_ATTR_ENUM_IN(_id, _enum_arr, ...)			\
 +	UVERBS_ATTR(_id, UVERBS_ATTR_TYPE_ENUM_IN, enum_def,		\
 +		    .ids = (_enum_arr),					\
 +		    .num_elems = ARRAY_SIZE(_enum_arr), ##__VA_ARGS__)
  
  /*
 - * This spec is used in order to pass information to the hardware driver in a
 - * legacy way. Every verb that could get driver specific data should get this
 - * spec.
 + * In new compiler, UVERBS_ATTR_IDR (and FD) could be simplified by declaring
 + * it as
 + * {.id = _id,								\
 + *  .attr {.type = __obj_class,						\
 + *         .obj = {.obj_type = _idr_type,				\
 + *                       .access = _access                              \
 + *                }, ##__VA_ARGS__ } }
 + * But since we support older compilers too, we need the more complex code.
   */
 -#define UVERBS_ATTR_UHW()                                                      \
 -	UVERBS_ATTR_PTR_IN(UVERBS_ATTR_UHW_IN,                                 \
 -			   UVERBS_ATTR_MIN_SIZE(0),			       \
 -			   UA_OPTIONAL),				       \
 -	UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_UHW_OUT,                               \
 -			    UVERBS_ATTR_MIN_SIZE(0),			       \
 -			    UA_OPTIONAL)
 +#define ___UVERBS_ATTR_OBJ0(_id, _obj_class, _obj_type, _access, ...)\
 +	((const struct uverbs_attr_def)					\
 +	{.id = _id,							\
 +	 .attr = { {.obj = {.type = _obj_class, .obj_type = _obj_type,	\
 +			    .access = _access, .flags = 0 } }, } })
 +#define ___UVERBS_ATTR_OBJ1(_id, _obj_class, _obj_type, _access, _flags)\
 +	((const struct uverbs_attr_def)					\
 +	{.id = _id,							\
 +	.attr = { {.obj = {.type = _obj_class, .obj_type = _obj_type,	\
 +			   .access = _access, _flags} }, } })
 +#define ___UVERBS_ATTR_OBJ(_id, _obj_class, _obj_type, _access, _flags, \
 +			   _n, ...)					\
 +	___UVERBS_ATTR_OBJ##_n(_id, _obj_class, _obj_type, _access, _flags)
 +#define __UVERBS_ATTR_OBJ(_id, _obj_class, _obj_type, _access, ...)	\
 +	___UVERBS_ATTR_OBJ(_id, _obj_class, _obj_type, _access,		\
 +			   ##__VA_ARGS__, 1, 0)
 +#define UVERBS_ATTR_IDR(_id, _idr_type, _access, ...)			 \
 +	__UVERBS_ATTR_OBJ(_id, UVERBS_ATTR_TYPE_IDR, _idr_type, _access,\
 +			  ##__VA_ARGS__)
 +#define UVERBS_ATTR_FD(_id, _fd_type, _access, ...)			\
 +	__UVERBS_ATTR_OBJ(_id, UVERBS_ATTR_TYPE_FD, _fd_type,		\
 +			  (_access) + BUILD_BUG_ON_ZERO(		\
 +				(_access) != UVERBS_ACCESS_NEW &&	\
 +				(_access) != UVERBS_ACCESS_READ),	\
 +			  ##__VA_ARGS__)
 +#define DECLARE_UVERBS_ATTR_SPEC(_name, ...)				\
 +	const struct uverbs_attr_def _name = __VA_ARGS__
 +
 +#define DECLARE_UVERBS_ENUM(_name, ...)					\
 +	const struct uverbs_enum_spec _name = {				\
 +		.len = ARRAY_SIZE(((struct uverbs_attr_spec[]){__VA_ARGS__})),\
 +		.ids = {__VA_ARGS__},					\
 +	}
 +#define _UVERBS_METHOD_ATTRS_SZ(...)					\
 +	(sizeof((const struct uverbs_attr_def * const []){__VA_ARGS__}) /\
 +	 sizeof(const struct uverbs_attr_def *))
 +#define _UVERBS_METHOD(_id, _handler, _flags, ...)			\
 +	((const struct uverbs_method_def) {				\
 +	 .id = _id,							\
 +	 .flags = _flags,						\
 +	 .handler = _handler,						\
 +	 .num_attrs = _UVERBS_METHOD_ATTRS_SZ(__VA_ARGS__),		\
 +	 .attrs = &(const struct uverbs_attr_def * const []){__VA_ARGS__} })
 +#define DECLARE_UVERBS_METHOD(_name, _id, _handler, ...)		\
 +	const struct uverbs_method_def _name =				\
 +		_UVERBS_METHOD(_id, _handler, 0, ##__VA_ARGS__)
 +#define DECLARE_UVERBS_CTX_METHOD(_name, _id, _handler, _flags, ...)	\
 +	const struct uverbs_method_def _name =				\
 +		_UVERBS_METHOD(_id, _handler,				\
 +			       UVERBS_ACTION_FLAG_CREATE_ROOT,		\
 +			       ##__VA_ARGS__)
 +#define _UVERBS_OBJECT_METHODS_SZ(...)					\
 +	(sizeof((const struct uverbs_method_def * const []){__VA_ARGS__}) / \
 +	 sizeof(const struct uverbs_method_def *))
 +#define _UVERBS_OBJECT(_id, _type_attrs, ...)				\
 +	((const struct uverbs_object_def) {				\
 +	 .id = _id,							\
 +	 .type_attrs = _type_attrs,					\
 +	 .num_methods = _UVERBS_OBJECT_METHODS_SZ(__VA_ARGS__),		\
 +	 .methods = &(const struct uverbs_method_def * const []){__VA_ARGS__} })
 +#define DECLARE_UVERBS_OBJECT(_name, _id, _type_attrs, ...)		\
 +	const struct uverbs_object_def _name =				\
 +		_UVERBS_OBJECT(_id, _type_attrs, ##__VA_ARGS__)
 +#define _UVERBS_TREE_OBJECTS_SZ(...)					\
 +	(sizeof((const struct uverbs_object_def * const []){__VA_ARGS__}) / \
 +	 sizeof(const struct uverbs_object_def *))
 +#define _UVERBS_OBJECT_TREE(...)					\
 +	((const struct uverbs_object_tree_def) {			\
 +	 .num_objects = _UVERBS_TREE_OBJECTS_SZ(__VA_ARGS__),		\
 +	 .objects = &(const struct uverbs_object_def * const []){__VA_ARGS__} })
 +#define DECLARE_UVERBS_OBJECT_TREE(_name, ...)				\
 +	const struct uverbs_object_tree_def _name =			\
 +		_UVERBS_OBJECT_TREE(__VA_ARGS__)
  
  /* =================================================
   *              Parsing infrastructure
diff --cc include/rdma/uverbs_std_types.h
index 6e389a6b0382,df878ce02c94..000000000000
--- a/include/rdma/uverbs_std_types.h
+++ b/include/rdma/uverbs_std_types.h
@@@ -37,48 -37,62 +37,70 @@@
  #include <rdma/uverbs_ioctl.h>
  #include <rdma/ib_user_ioctl_verbs.h>
  
 -/* Returns _id, or causes a compile error if _id is not a u32.
 - *
 - * The uobj APIs should only be used with the write based uAPI to access
 - * object IDs. The write API must use a u32 for the object handle, which is
 - * checked by this macro.
 - */
 -#define _uobj_check_id(_id) ((_id) * typecheck(u32, _id))
 -
 -#define uobj_get_type(_attrs, _object)                                         \
 -	uapi_get_object((_attrs)->ufile->device->uapi, _object)
 -
 -#define uobj_get_read(_type, _id, _attrs)                                      \
 -	rdma_lookup_get_uobject(uobj_get_type(_attrs, _type), (_attrs)->ufile, \
 -				_uobj_check_id(_id), UVERBS_LOOKUP_READ)
 -
 -#define ufd_get_read(_type, _fdnum, _attrs)                                    \
 -	rdma_lookup_get_uobject(uobj_get_type(_attrs, _type), (_attrs)->ufile, \
 -				(_fdnum)*typecheck(s32, _fdnum),               \
 -				UVERBS_LOOKUP_READ)
 -
 -static inline void *_uobj_get_obj_read(struct ib_uobject *uobj)
 +#if IS_ENABLED(CONFIG_INFINIBAND_USER_ACCESS)
 +const struct uverbs_object_tree_def *uverbs_default_get_objects(void);
 +#else
 +static inline const struct uverbs_object_tree_def *uverbs_default_get_objects(void)
  {
 -	if (IS_ERR(uobj))
 -		return NULL;
 -	return uobj->object;
 +	return NULL;
  }
 -#define uobj_get_obj_read(_object, _type, _id, _attrs)                         \
 -	((struct ib_##_object *)_uobj_get_obj_read(                            \
 -		uobj_get_read(_type, _id, _attrs)))
 +#endif
  
++<<<<<<< HEAD
 +static inline struct ib_uobject *__uobj_get(const struct uverbs_obj_type *type,
 +					    bool write,
 +					    struct ib_ucontext *ucontext,
 +					    int id)
++=======
+ #define uobj_get_write(_type, _id, _attrs)                                     \
+ 	rdma_lookup_get_uobject(uobj_get_type(_attrs, _type), (_attrs)->ufile, \
+ 				_uobj_check_id(_id), UVERBS_LOOKUP_WRITE)
+ 
+ int __uobj_perform_destroy(const struct uverbs_api_object *obj, u32 id,
+ 			   const struct uverbs_attr_bundle *attrs);
+ #define uobj_perform_destroy(_type, _id, _attrs)                               \
+ 	__uobj_perform_destroy(uobj_get_type(_attrs, _type),                   \
+ 			       _uobj_check_id(_id), _attrs)
+ 
+ struct ib_uobject *__uobj_get_destroy(const struct uverbs_api_object *obj,
+ 				      u32 id,
+ 				      const struct uverbs_attr_bundle *attrs);
+ 
+ #define uobj_get_destroy(_type, _id, _attrs)                                   \
+ 	__uobj_get_destroy(uobj_get_type(_attrs, _type), _uobj_check_id(_id),  \
+ 			   _attrs)
+ 
+ static inline void uobj_put_destroy(struct ib_uobject *uobj)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
 -	rdma_lookup_put_uobject(uobj, UVERBS_LOOKUP_WRITE);
 +	return rdma_lookup_get_uobject(type, ucontext, id, write);
  }
  
 +#define uobj_get_type(_object) UVERBS_OBJECT(_object).type_attrs
 +
 +#define uobj_get_read(_type, _id, _ucontext)				\
 +	 __uobj_get(uobj_get_type(_type), false, _ucontext, _id)
 +
 +#define uobj_get_obj_read(_object, _type, _id, _ucontext)		\
 +({									\
 +	struct ib_uobject *__uobj =					\
 +		__uobj_get(uobj_get_type(_type),			\
 +			   false, _ucontext, _id);			\
 +									\
 +	(struct ib_##_object *)(IS_ERR(__uobj) ? NULL : __uobj->object);\
 +})
 +
 +#define uobj_get_write(_type, _id, _ucontext)				\
 +	 __uobj_get(uobj_get_type(_type), true, _ucontext, _id)
 +
 +int __uobj_perform_destroy(const struct uverbs_obj_type *type, int id,
 +			   struct ib_uverbs_file *ufile, int success_res);
 +#define uobj_perform_destroy(_type, _id, _ufile, _success_res)                 \
 +	__uobj_perform_destroy(uobj_get_type(_type), _id, _ufile, _success_res)
 +
  static inline void uobj_put_read(struct ib_uobject *uobj)
  {
 -	rdma_lookup_put_uobject(uobj, UVERBS_LOOKUP_READ);
 +	rdma_lookup_put_uobject(uobj, false);
  }
  
  #define uobj_put_obj_read(_obj)					\
@@@ -86,17 -100,16 +108,27 @@@
  
  static inline void uobj_put_write(struct ib_uobject *uobj)
  {
 -	rdma_lookup_put_uobject(uobj, UVERBS_LOOKUP_WRITE);
 +	rdma_lookup_put_uobject(uobj, true);
  }
  
++<<<<<<< HEAD
 +static inline int __must_check uobj_remove_commit(struct ib_uobject *uobj)
++=======
+ static inline int __must_check uobj_alloc_commit(struct ib_uobject *uobj)
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  {
 -	int ret = rdma_alloc_commit_uobject(uobj);
 +	return rdma_remove_commit_uobject(uobj);
 +}
  
++<<<<<<< HEAD
 +static inline void uobj_alloc_commit(struct ib_uobject *uobj)
 +{
 +	rdma_alloc_commit_uobject(uobj);
++=======
+ 	if (ret)
+ 		return ret;
+ 	return 0;
++>>>>>>> 7106a9769715 (RDMA/uverbs: Make write() handlers return 0 on success)
  }
  
  static inline void uobj_alloc_abort(struct ib_uobject *uobj)
* Unmerged path drivers/infiniband/core/uverbs_uapi.c
* Unmerged path drivers/infiniband/core/rdma_core.c
* Unmerged path drivers/infiniband/core/rdma_core.h
* Unmerged path drivers/infiniband/core/uverbs_cmd.c
* Unmerged path drivers/infiniband/core/uverbs_main.c
* Unmerged path drivers/infiniband/core/uverbs_uapi.c
* Unmerged path include/rdma/uverbs_ioctl.h
* Unmerged path include/rdma/uverbs_std_types.h
