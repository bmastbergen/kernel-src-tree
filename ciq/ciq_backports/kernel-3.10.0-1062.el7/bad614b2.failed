iommu: Enable debugfs exposure of IOMMU driver internals

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [iommu] Enable debugfs exposure of IOMMU driver internals (Jerry Snitselaar) [1457023]
Rebuild_FUZZ: 93.33%
commit-author Gary R Hook <gary.hook@amd.com>
commit bad614b24293ae463e74d2465685f0e4e229baca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bad614b2.failed

Provide base enablement for using debugfs to expose internal data of an
IOMMU driver. When called, create the /sys/kernel/debug/iommu directory.

Emit a strong warning at boot time to indicate that this feature is
enabled.

This function is called from iommu_init, and creates the initial DebugFS
directory. Drivers may then call iommu_debugfs_new_driver_dir() to
instantiate a device-specific directory to expose internal data.
It will return a pointer to the new dentry structure created in
/sys/kernel/debug/iommu, or NULL in the event of a failure.

Since the IOMMU driver can not be removed from the running system, there
is no need for an "off" function.

	Signed-off-by: Gary R Hook <gary.hook@amd.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit bad614b24293ae463e74d2465685f0e4e229baca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/Kconfig
#	drivers/iommu/Makefile
diff --cc drivers/iommu/Kconfig
index 57de38552ecb,ab9181d8af3b..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -14,6 -14,62 +14,65 @@@ menuconfig IOMMU_SUPPOR
  
  if IOMMU_SUPPORT
  
++<<<<<<< HEAD
++=======
+ menu "Generic IOMMU Pagetable Support"
+ 
+ # Selected by the actual pagetable implementations
+ config IOMMU_IO_PGTABLE
+ 	bool
+ 
+ config IOMMU_IO_PGTABLE_LPAE
+ 	bool "ARMv7/v8 Long Descriptor Format"
+ 	select IOMMU_IO_PGTABLE
+ 	depends on ARM || ARM64 || (COMPILE_TEST && !GENERIC_ATOMIC64)
+ 	help
+ 	  Enable support for the ARM long descriptor pagetable format.
+ 	  This allocator supports 4K/2M/1G, 16K/32M and 64K/512M page
+ 	  sizes at both stage-1 and stage-2, as well as address spaces
+ 	  up to 48-bits in size.
+ 
+ config IOMMU_IO_PGTABLE_LPAE_SELFTEST
+ 	bool "LPAE selftests"
+ 	depends on IOMMU_IO_PGTABLE_LPAE
+ 	help
+ 	  Enable self-tests for LPAE page table allocator. This performs
+ 	  a series of page-table consistency checks during boot.
+ 
+ 	  If unsure, say N here.
+ 
+ config IOMMU_IO_PGTABLE_ARMV7S
+ 	bool "ARMv7/v8 Short Descriptor Format"
+ 	select IOMMU_IO_PGTABLE
+ 	depends on ARM || ARM64 || COMPILE_TEST
+ 	help
+ 	  Enable support for the ARM Short-descriptor pagetable format.
+ 	  This supports 32-bit virtual and physical addresses mapped using
+ 	  2-level tables with 4KB pages/1MB sections, and contiguous entries
+ 	  for 64KB pages/16MB supersections if indicated by the IOMMU driver.
+ 
+ config IOMMU_IO_PGTABLE_ARMV7S_SELFTEST
+ 	bool "ARMv7s selftests"
+ 	depends on IOMMU_IO_PGTABLE_ARMV7S
+ 	help
+ 	  Enable self-tests for ARMv7s page table allocator. This performs
+ 	  a series of page-table consistency checks during boot.
+ 
+ 	  If unsure, say N here.
+ 
+ endmenu
+ 
+ config IOMMU_DEBUGFS
+ 	bool "Export IOMMU internals in DebugFS"
+ 	depends on DEBUG_FS
+ 	help
+ 	  Allows exposure of IOMMU device internals. This option enables
+ 	  the use of debugfs by IOMMU drivers as required. Devices can,
+ 	  at initialization time, cause the IOMMU code to create a top-level
+ 	  debug/iommu directory, and then populate a subdirectory with
+ 	  entries as required.
+ 
++>>>>>>> bad614b24293 (iommu: Enable debugfs exposure of IOMMU driver internals)
  config IOMMU_IOVA
  	tristate
  
diff --cc drivers/iommu/Makefile
index 8c20a3a114fe,74cfbc392862..000000000000
--- a/drivers/iommu/Makefile
+++ b/drivers/iommu/Makefile
@@@ -1,18 -1,29 +1,26 @@@
  obj-$(CONFIG_IOMMU_API) += iommu.o
  obj-$(CONFIG_IOMMU_API) += iommu-traces.o
  obj-$(CONFIG_IOMMU_API) += iommu-sysfs.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_IOMMU_DEBUGFS) += iommu-debugfs.o
+ obj-$(CONFIG_IOMMU_DMA) += dma-iommu.o
+ obj-$(CONFIG_IOMMU_IO_PGTABLE) += io-pgtable.o
+ obj-$(CONFIG_IOMMU_IO_PGTABLE_ARMV7S) += io-pgtable-arm-v7s.o
+ obj-$(CONFIG_IOMMU_IO_PGTABLE_LPAE) += io-pgtable-arm.o
++>>>>>>> bad614b24293 (iommu: Enable debugfs exposure of IOMMU driver internals)
  obj-$(CONFIG_IOMMU_IOVA) += iova.o
  obj-$(CONFIG_OF_IOMMU)	+= of_iommu.o
 -obj-$(CONFIG_MSM_IOMMU) += msm_iommu.o
 +obj-$(CONFIG_MSM_IOMMU) += msm_iommu.o msm_iommu_dev.o
  obj-$(CONFIG_AMD_IOMMU) += amd_iommu.o amd_iommu_init.o
  obj-$(CONFIG_AMD_IOMMU_V2) += amd_iommu_v2.o
 -obj-$(CONFIG_ARM_SMMU) += arm-smmu.o
 -obj-$(CONFIG_ARM_SMMU_V3) += arm-smmu-v3.o
  obj-$(CONFIG_DMAR_TABLE) += dmar.o
  obj-$(CONFIG_INTEL_IOMMU) += intel-iommu.o
 -obj-$(CONFIG_INTEL_IOMMU_SVM) += intel-svm.o
 -obj-$(CONFIG_IPMMU_VMSA) += ipmmu-vmsa.o
  obj-$(CONFIG_IRQ_REMAP) += intel_irq_remapping.o irq_remapping.o
 -obj-$(CONFIG_MTK_IOMMU) += mtk_iommu.o
 -obj-$(CONFIG_MTK_IOMMU_V1) += mtk_iommu_v1.o
  obj-$(CONFIG_OMAP_IOMMU) += omap-iommu.o
 +obj-$(CONFIG_OMAP_IOMMU) += omap-iommu2.o
 +obj-$(CONFIG_OMAP_IOVMM) += omap-iovmm.o
  obj-$(CONFIG_OMAP_IOMMU_DEBUG) += omap-iommu-debug.o
 -obj-$(CONFIG_ROCKCHIP_IOMMU) += rockchip-iommu.o
  obj-$(CONFIG_TEGRA_IOMMU_GART) += tegra-gart.o
  obj-$(CONFIG_TEGRA_IOMMU_SMMU) += tegra-smmu.o
  obj-$(CONFIG_EXYNOS_IOMMU) += exynos-iommu.o
* Unmerged path drivers/iommu/Kconfig
* Unmerged path drivers/iommu/Makefile
diff --git a/drivers/iommu/iommu-debugfs.c b/drivers/iommu/iommu-debugfs.c
new file mode 100644
index 000000000000..3b1bf88fd1b0
--- /dev/null
+++ b/drivers/iommu/iommu-debugfs.c
@@ -0,0 +1,66 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * IOMMU debugfs core infrastructure
+ *
+ * Copyright (C) 2018 Advanced Micro Devices, Inc.
+ *
+ * Author: Gary R Hook <gary.hook@amd.com>
+ */
+
+#include <linux/pci.h>
+#include <linux/iommu.h>
+#include <linux/debugfs.h>
+
+struct dentry *iommu_debugfs_dir;
+
+/**
+ * iommu_debugfs_setup - create the top-level iommu directory in debugfs
+ *
+ * Provide base enablement for using debugfs to expose internal data of an
+ * IOMMU driver. When called, this function creates the
+ * /sys/kernel/debug/iommu directory.
+ *
+ * Emit a strong warning at boot time to indicate that this feature is
+ * enabled.
+ *
+ * This function is called from iommu_init; drivers may then call
+ * iommu_debugfs_new_driver_dir() to instantiate a vendor-specific
+ * directory to be used to expose internal data.
+ */
+void iommu_debugfs_setup(void)
+{
+	if (!iommu_debugfs_dir) {
+		iommu_debugfs_dir = debugfs_create_dir("iommu", NULL);
+		pr_warn("\n");
+		pr_warn("*************************************************************\n");
+		pr_warn("**     NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE    **\n");
+		pr_warn("**                                                         **\n");
+		pr_warn("**  IOMMU DebugFS SUPPORT HAS BEEN ENABLED IN THIS KERNEL  **\n");
+		pr_warn("**                                                         **\n");
+		pr_warn("** This means that this kernel is built to expose internal **\n");
+		pr_warn("** IOMMU data structures, which may compromise security on **\n");
+		pr_warn("** your system.                                            **\n");
+		pr_warn("**                                                         **\n");
+		pr_warn("** If you see this message and you are not debugging the   **\n");
+		pr_warn("** kernel, report this immediately to your vendor!         **\n");
+		pr_warn("**                                                         **\n");
+		pr_warn("**     NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE    **\n");
+		pr_warn("*************************************************************\n");
+	}
+}
+
+/**
+ * iommu_debugfs_new_driver_dir - create a vendor directory under debugfs/iommu
+ * @vendor: name of the vendor-specific subdirectory to create
+ *
+ * This function is called by an IOMMU driver to create the top-level debugfs
+ * directory for that driver.
+ *
+ * Return: upon success, a pointer to the dentry for the new directory.
+ *         NULL in case of failure.
+ */
+struct dentry *iommu_debugfs_new_driver_dir(const char *vendor)
+{
+	return debugfs_create_dir(vendor, iommu_debugfs_dir);
+}
+EXPORT_SYMBOL_GPL(iommu_debugfs_new_driver_dir);
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index fd3f2c62efee..76ae5f79483a 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -1501,6 +1501,8 @@ static int __init iommu_init(void)
 					       NULL, kernel_kobj);
 	BUG_ON(!iommu_group_kset);
 
+	iommu_debugfs_setup();
+
 	return 0;
 }
 core_initcall(iommu_init);
diff --git a/include/linux/iommu.h b/include/linux/iommu.h
index cf2419d45e0f..4d3d31e51fe3 100644
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@ -527,4 +527,11 @@ static inline void iommu_device_unlink(struct device *dev, struct device *link)
 
 #endif /* CONFIG_IOMMU_API */
 
+#ifdef CONFIG_IOMMU_DEBUGFS
+extern	struct dentry *iommu_debugfs_dir;
+void iommu_debugfs_setup(void);
+#else
+static inline void iommu_debugfs_setup(void) {}
+#endif
+
 #endif /* __LINUX_IOMMU_H */
