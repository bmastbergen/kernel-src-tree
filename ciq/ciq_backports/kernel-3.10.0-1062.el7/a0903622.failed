net/mlx5: Use u16 for Work Queue buffer strides offset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [kernel] mlx5: Use u16 for Work Queue buffer strides offset (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 96.15%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit a09036221092989b88c55d24d1f12ceb1d7d361f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/a0903622.failed

Minimal stride size is 16.
Hence, the number of strides in a fragment (of PAGE_SIZE)
is <= PAGE_SIZE / 16 <= 4K.

u16 is sufficient to represent this.

Fixes: d7037ad73daa ("net/mlx5: Fix QP fragmented buffer allocation")
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit a09036221092989b88c55d24d1f12ceb1d7d361f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/wq.c
#	include/linux/mlx5/driver.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/wq.c
index ea66448ba365,68e7f8df2a6d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/wq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/wq.c
@@@ -109,13 -138,21 +109,18 @@@ int mlx5_wq_qp_create(struct mlx5_core_
  		      void *qpc, struct mlx5_wq_qp *wq,
  		      struct mlx5_wq_ctrl *wq_ctrl)
  {
++<<<<<<< HEAD
++=======
+ 	u16 sq_strides_offset;
+ 	u32 rq_pg_remainder;
++>>>>>>> a09036221092 (net/mlx5: Use u16 for Work Queue buffer strides offset)
  	int err;
  
 -	mlx5_fill_fbc(MLX5_GET(qpc, qpc, log_rq_stride) + 4,
 -		      MLX5_GET(qpc, qpc, log_rq_size),
 -		      &wq->rq.fbc);
 +	wq->rq.log_stride = MLX5_GET(qpc, qpc, log_rq_stride) + 4;
 +	wq->rq.sz_m1 = (1 << MLX5_GET(qpc, qpc, log_rq_size)) - 1;
  
 -	rq_pg_remainder   = mlx5_wq_cyc_get_byte_size(&wq->rq) % PAGE_SIZE;
 -	sq_strides_offset = rq_pg_remainder / MLX5_SEND_WQE_BB;
 -
 -	mlx5_fill_fbc_offset(ilog2(MLX5_SEND_WQE_BB),
 -			     MLX5_GET(qpc, qpc, log_sq_size),
 -			     sq_strides_offset,
 -			     &wq->sq.fbc);
 +	wq->sq.log_stride = ilog2(MLX5_SEND_WQE_BB);
 +	wq->sq.sz_m1 = (1 << MLX5_GET(qpc, qpc, log_sq_size)) - 1;
  
  	err = mlx5_db_alloc_node(mdev, &wq_ctrl->db, param->db_numa_node);
  	if (err) {
diff --cc include/linux/mlx5/driver.h
index 35545005ad03,66d94b4557cf..000000000000
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@@ -355,7 -362,8 +355,12 @@@ struct mlx5_frag_buf 
  struct mlx5_frag_buf_ctrl {
  	struct mlx5_frag_buf	frag_buf;
  	u32			sz_m1;
++<<<<<<< HEAD
 +	u32			frag_sz_m1;
++=======
+ 	u16			frag_sz_m1;
+ 	u16			strides_offset;
++>>>>>>> a09036221092 (net/mlx5: Use u16 for Work Queue buffer strides offset)
  	u8			log_sz;
  	u8			log_stride;
  	u8			log_frag_strides;
@@@ -983,6 -994,24 +988,27 @@@ static inline u32 mlx5_base_mkey(const 
  	return key & 0xffffff00u;
  }
  
++<<<<<<< HEAD
++=======
+ static inline void mlx5_fill_fbc_offset(u8 log_stride, u8 log_sz,
+ 					u16 strides_offset,
+ 					struct mlx5_frag_buf_ctrl *fbc)
+ {
+ 	fbc->log_stride = log_stride;
+ 	fbc->log_sz     = log_sz;
+ 	fbc->sz_m1	= (1 << fbc->log_sz) - 1;
+ 	fbc->log_frag_strides = PAGE_SHIFT - fbc->log_stride;
+ 	fbc->frag_sz_m1	= (1 << fbc->log_frag_strides) - 1;
+ 	fbc->strides_offset = strides_offset;
+ }
+ 
+ static inline void mlx5_fill_fbc(u8 log_stride, u8 log_sz,
+ 				 struct mlx5_frag_buf_ctrl *fbc)
+ {
+ 	mlx5_fill_fbc_offset(log_stride, log_sz, 0, fbc);
+ }
+ 
++>>>>>>> a09036221092 (net/mlx5: Use u16 for Work Queue buffer strides offset)
  static inline void mlx5_core_init_cq_frag_buf(struct mlx5_frag_buf_ctrl *fbc,
  					      void *cqc)
  {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/wq.c
* Unmerged path include/linux/mlx5/driver.h
