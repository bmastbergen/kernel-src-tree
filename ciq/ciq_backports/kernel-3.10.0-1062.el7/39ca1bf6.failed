nfsd: store stat times in fill_pre_wcc() instead of inode times

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Amir Goldstein <amir73il@gmail.com>
commit 39ca1bf624b6b82cc895b0217889eaaf572a7913
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/39ca1bf6.failed

The time values in stat and inode may differ for overlayfs and stat time
values are the correct ones to use. This is also consistent with the fact
that fill_post_wcc() also stores stat time values.

This means introducing a stat call that could fail, where previously we
were just copying values out of the inode.  To be conservative about
changing behavior, we fall back to copying values out of the inode in
the error case.  It might be better just to clear fh_pre_saved (though
note the BUG_ON in set_change_info).

	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit 39ca1bf624b6b82cc895b0217889eaaf572a7913)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs3xdr.c
#	fs/nfsd/nfs4xdr.c
#	fs/nfsd/nfsfh.h
diff --cc fs/nfsd/nfs3xdr.c
index 6a1a7aed90cf,1a70581e1cb2..000000000000
--- a/fs/nfsd/nfs3xdr.c
+++ b/fs/nfsd/nfs3xdr.c
@@@ -260,7 -289,8 +288,12 @@@ void fill_post_wcc(struct svc_fh *fhp
  		printk("nfsd: inode locked twice during operation.\n");
  
  	err = fh_getattr(fhp, &fhp->fh_post_attr);
++<<<<<<< HEAD
 +	fhp->fh_post_change = fhp->fh_dentry->d_inode->i_version;
++=======
+ 	fhp->fh_post_change = nfsd4_change_attribute(&fhp->fh_post_attr,
+ 						     d_inode(fhp->fh_dentry));
++>>>>>>> 39ca1bf624b6 (nfsd: store stat times in fill_pre_wcc() instead of inode times)
  	if (err) {
  		fhp->fh_post_saved = false;
  		/* Grab the ctime anyway - set_change_info might use it */
diff --cc fs/nfsd/nfs4xdr.c
index b0bea0b59d4b,e4395abd0f2b..000000000000
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@@ -1987,10 -1989,14 +1987,18 @@@ nfsd4_decode_compound(struct nfsd4_comp
  	DECODE_TAIL;
  }
  
 -static __be32 *encode_change(__be32 *p, struct kstat *stat, struct inode *inode,
 -			     struct svc_export *exp)
 +static __be32 *encode_change(__be32 *p, struct kstat *stat, struct inode *inode)
  {
++<<<<<<< HEAD
 +	if (IS_I_VERSION(inode)) {
 +		p = xdr_encode_hyper(p, inode->i_version);
++=======
+ 	if (exp->ex_flags & NFSEXP_V4ROOT) {
+ 		*p++ = cpu_to_be32(convert_to_wallclock(exp->cd->flush_time));
+ 		*p++ = 0;
+ 	} else if (IS_I_VERSION(inode)) {
+ 		p = xdr_encode_hyper(p, nfsd4_change_attribute(stat, inode));
++>>>>>>> 39ca1bf624b6 (nfsd: store stat times in fill_pre_wcc() instead of inode times)
  	} else {
  		*p++ = cpu_to_be32(stat->ctime.tv_sec);
  		*p++ = cpu_to_be32(stat->ctime.tv_nsec);
diff --cc fs/nfsd/nfsfh.h
index be650f8686be,99be87b50ebe..000000000000
--- a/fs/nfsd/nfsfh.h
+++ b/fs/nfsd/nfsfh.h
@@@ -241,24 -242,30 +241,51 @@@ fh_clear_wcc(struct svc_fh *fhp
  }
  
  /*
++<<<<<<< HEAD
 + * Fill in the pre_op attr for the wcc data
 + */
 +static inline void
 +fill_pre_wcc(struct svc_fh *fhp)
 +{
 +	struct inode    *inode;
 +
 +	inode = fhp->fh_dentry->d_inode;
 +	if (!fhp->fh_pre_saved) {
 +		fhp->fh_pre_mtime = inode->i_mtime;
 +		fhp->fh_pre_ctime = inode->i_ctime;
 +		fhp->fh_pre_size  = inode->i_size;
 +		fhp->fh_pre_change = inode->i_version;
 +		fhp->fh_pre_saved = true;
 +	}
 +}
 +
 +extern void fill_post_wcc(struct svc_fh *);
++=======
+  * We could use i_version alone as the change attribute.  However,
+  * i_version can go backwards after a reboot.  On its own that doesn't
+  * necessarily cause a problem, but if i_version goes backwards and then
+  * is incremented again it could reuse a value that was previously used
+  * before boot, and a client who queried the two values might
+  * incorrectly assume nothing changed.
+  *
+  * By using both ctime and the i_version counter we guarantee that as
+  * long as time doesn't go backwards we never reuse an old value.
+  */
+ static inline u64 nfsd4_change_attribute(struct kstat *stat,
+ 					 struct inode *inode)
+ {
+ 	u64 chattr;
+ 
+ 	chattr =  stat->ctime.tv_sec;
+ 	chattr <<= 30;
+ 	chattr += stat->ctime.tv_nsec;
+ 	chattr += inode->i_version;
+ 	return chattr;
+ }
+ 
+ extern void fill_pre_wcc(struct svc_fh *fhp);
+ extern void fill_post_wcc(struct svc_fh *fhp);
++>>>>>>> 39ca1bf624b6 (nfsd: store stat times in fill_pre_wcc() instead of inode times)
  #else
  #define fh_clear_wcc(ignored)
  #define fill_pre_wcc(ignored)
* Unmerged path fs/nfsd/nfs3xdr.c
* Unmerged path fs/nfsd/nfs4xdr.c
* Unmerged path fs/nfsd/nfsfh.h
