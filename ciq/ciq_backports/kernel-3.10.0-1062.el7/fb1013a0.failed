intel_idle: Convert to hotplug state machine

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [powercap] intel rapl: Convert to hotplug state machine (David Arcari) [1700822]
Rebuild_FUZZ: 90.91%
commit-author Sebastian Andrzej Siewior <bigeasy@linutronix.de>
commit fb1013a01673acf7e94e38cda169828ac76b345a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/fb1013a0.failed

Install the callbacks via the state machine and let the core invoke the
callbacks on the already online CPUs.

The two smp_call_function_single() invocations in intel_idle_cpu_init() have
been removed because intel_idle_cpu_init() is now invoked via the hotplug
callback which runs on the target CPU. The IRQ-off calling convention for
auto_demotion_disable() and c1e_promotion_disable() has not been preserved
because only those two modify the MSR during CPU intialization.

	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Acked-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit fb1013a01673acf7e94e38cda169828ac76b345a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index 6c9abd1fbe2c,7d8ea3d5fda6..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -96,8 -96,8 +96,13 @@@ static const struct idle_cpu *icpu
  static struct cpuidle_device __percpu *intel_idle_cpuidle_devices;
  static int intel_idle(struct cpuidle_device *dev,
  			struct cpuidle_driver *drv, int index);
++<<<<<<< HEAD
 +static int intel_idle_cpu_init(int cpu);
 +
++=======
+ static void intel_idle_freeze(struct cpuidle_device *dev,
+ 			      struct cpuidle_driver *drv, int index);
++>>>>>>> fb1013a01673 (intel_idle: Convert to hotplug state machine)
  static struct cpuidle_state *cpuidle_state_table;
  
  /*
@@@ -769,52 -934,30 +774,79 @@@ static __cpuidle int intel_idle(struct 
  	return index;
  }
  
++<<<<<<< HEAD
 +static void __setup_broadcast_timer(void *arg)
 +{
 +	unsigned long reason = (unsigned long)arg;
 +	int cpu = smp_processor_id();
 +
 +	reason = reason ?
 +		CLOCK_EVT_NOTIFY_BROADCAST_ON : CLOCK_EVT_NOTIFY_BROADCAST_OFF;
 +
 +	clockevents_notify(reason, &cpu);
 +}
 +
 +static int cpu_hotplug_notify(struct notifier_block *n,
 +			      unsigned long action, void *hcpu)
 +{
 +	int hotcpu = (unsigned long)hcpu;
 +	struct cpuidle_device *dev;
 +
 +	switch (action & ~CPU_TASKS_FROZEN) {
 +	case CPU_ONLINE:
 +
 +		if (lapic_timer_reliable_states != LAPIC_TIMER_ALWAYS_RELIABLE)
 +			smp_call_function_single(hotcpu, __setup_broadcast_timer,
 +						 (void *)true, 1);
 +
 +		/*
 +		 * Some systems can hotplug a cpu at runtime after
 +		 * the kernel has booted, we have to initialize the
 +		 * driver in this case
 +		 */
 +		dev = per_cpu_ptr(intel_idle_cpuidle_devices, hotcpu);
 +		if (dev->registered)
 +			break;
 +
 +		if (intel_idle_cpu_init(hotcpu))
 +			return NOTIFY_BAD;
 +
 +		break;
 +	}
 +	return NOTIFY_OK;
 +}
 +
 +static struct notifier_block cpu_hotplug_notifier = {
 +	.notifier_call = cpu_hotplug_notify,
 +};
 +
 +static void auto_demotion_disable(void *dummy)
++=======
+ /**
+  * intel_idle_freeze - simplified "enter" callback routine for suspend-to-idle
+  * @dev: cpuidle_device
+  * @drv: cpuidle driver
+  * @index: state index
+  */
+ static void intel_idle_freeze(struct cpuidle_device *dev,
+ 			     struct cpuidle_driver *drv, int index)
+ {
+ 	unsigned long ecx = 1; /* break on interrupt flag */
+ 	unsigned long eax = flg2MWAIT(drv->states[index].flags);
+ 
+ 	mwait_idle_with_hints(eax, ecx);
+ }
+ 
+ static void __setup_broadcast_timer(bool on)
+ {
+ 	if (on)
+ 		tick_broadcast_enable();
+ 	else
+ 		tick_broadcast_disable();
+ }
+ 
+ static void auto_demotion_disable(void)
++>>>>>>> fb1013a01673 (intel_idle: Convert to hotplug state machine)
  {
  	unsigned long long msr_bits;
  
* Unmerged path drivers/idle/intel_idle.c
