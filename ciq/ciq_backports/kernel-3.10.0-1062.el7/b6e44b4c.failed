nvme-pci: fix memory leak on probe failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Keith Busch <keith.busch@intel.com>
commit b6e44b4c74ef75f729f0147d43d189173fe463c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/b6e44b4c.failed

The nvme driver specific structures need to be initialized prior to
enabling the generic controller so we can unwind on failure with out
using the reference counting callbacks so that 'probe' and 'remove'
can be symmetric.

The newly added iod_mempool is the only resource that was being
allocated out of order, and a failure there would leak the generic
controller memory. This patch just moves that allocation above the
controller initialization.

Fixes: 943e942e6266f ("nvme-pci: limit max IO size and segments to avoid high order allocations")
	Reported-by: Weiping Zhang <zwp10758@gmail.com>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit b6e44b4c74ef75f729f0147d43d189173fe463c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 35f7a153bd5e,ddd441b1516a..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -2278,10 -2556,27 +2278,34 @@@ static int nvme_probe(struct pci_dev *p
  
  	quirks |= check_vendor_combination_bug(pdev);
  
++<<<<<<< HEAD
 +	result = nvme_init_ctrl(&dev->ctrl, &pdev->dev, &nvme_pci_ctrl_ops,
 +			quirks);
 +	if (result)
 +		goto release_pools;
++=======
+ 	/*
+ 	 * Double check that our mempool alloc size will cover the biggest
+ 	 * command we support.
+ 	 */
+ 	alloc_size = nvme_pci_iod_alloc_size(dev, NVME_MAX_KB_SZ,
+ 						NVME_MAX_SEGS, true);
+ 	WARN_ON_ONCE(alloc_size > PAGE_SIZE);
+ 
+ 	dev->iod_mempool = mempool_create_node(1, mempool_kmalloc,
+ 						mempool_kfree,
+ 						(void *) alloc_size,
+ 						GFP_KERNEL, node);
+ 	if (!dev->iod_mempool) {
+ 		result = -ENOMEM;
+ 		goto release_pools;
+ 	}
+ 
+ 	result = nvme_init_ctrl(&dev->ctrl, &pdev->dev, &nvme_pci_ctrl_ops,
+ 			quirks);
+ 	if (result)
+ 		goto release_mempool;
++>>>>>>> b6e44b4c74ef (nvme-pci: fix memory leak on probe failure)
  
  	dev_info(dev->ctrl.device, "pci function %s\n", dev_name(&pdev->dev));
  
* Unmerged path drivers/nvme/host/pci.c
