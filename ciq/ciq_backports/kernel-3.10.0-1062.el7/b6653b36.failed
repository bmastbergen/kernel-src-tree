tcp: refine memory limit test in tcp_fragment()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Eric Dumazet <edumazet@google.com>
commit b6653b3629e5b88202be3c9abc44713973f5c4b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/b6653b36.failed

tcp_fragment() might be called for skbs in the write queue.

Memory limits might have been exceeded because tcp_sendmsg() only
checks limits at full skb (64KB) boundaries.

Therefore, we need to make sure tcp_fragment() wont punish applications
that might have setup very low SO_SNDBUF values.

Fixes: f070ef2ac667 ("tcp: tcp_fragment() should apply sane memory limits")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Christoph Paasch <cpaasch@apple.com>
	Tested-by: Christoph Paasch <cpaasch@apple.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b6653b3629e5b88202be3c9abc44713973f5c4b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_output.c
diff --cc net/ipv4/tcp_output.c
index 52f0e3183733,0ebc33d1c9e5..000000000000
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@@ -1129,7 -1296,13 +1129,17 @@@ int tcp_fragment(struct sock *sk, struc
  	if (nsize < 0)
  		nsize = 0;
  
++<<<<<<< HEAD
 +	if (skb_unclone(skb, GFP_ATOMIC))
++=======
+ 	if (unlikely((sk->sk_wmem_queued >> 1) > sk->sk_sndbuf &&
+ 		     tcp_queue != TCP_FRAG_IN_WRITE_QUEUE)) {
+ 		NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPWQUEUETOOBIG);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	if (skb_unclone(skb, gfp))
++>>>>>>> b6653b3629e5 (tcp: refine memory limit test in tcp_fragment())
  		return -ENOMEM;
  
  	/* Get a new skb... force flag on. */
* Unmerged path net/ipv4/tcp_output.c
