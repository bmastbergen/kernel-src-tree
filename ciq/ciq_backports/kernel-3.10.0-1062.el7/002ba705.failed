net: phy: hook up clause 45 autonegotiation restart

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] phy: hook up clause 45 autonegotiation restart (Ivan Vecera) [1655590]
Rebuild_FUZZ: 94.85%
commit-author Russell King <rmk+kernel@armlinux.org.uk>
commit 002ba7058a7f141cf22d37967a4ef78239c50e9e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/002ba705.failed

genphy_restart_aneg() can only restart autonegotiation on clause 22
PHYs.  Add a phy_restart_aneg() function which selects between the
clause 22 and clause 45 restart functionality depending on the PHY
type and whether the Clause 45 PHY supports the Clause 22 register set.

	Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 002ba7058a7f141cf22d37967a4ef78239c50e9e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy.c
diff --cc drivers/net/phy/phy.c
index d19462495618,12548e5b6037..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -1202,10 -1389,37 +1221,42 @@@ EXPORT_SYMBOL(phy_ethtool_get_eee)
   */
  int phy_ethtool_set_eee(struct phy_device *phydev, struct ethtool_eee *data)
  {
 -	int cap, old_adv, adv, ret;
 +	int val = ethtool_adv_to_mmd_eee_adv_t(data->advertised);
  
++<<<<<<< HEAD
 +	phy_write_mmd_indirect(phydev->bus, MDIO_AN_EEE_ADV, MDIO_MMD_AN,
 +			       phydev->addr, val);
++=======
+ 	if (!phydev->drv)
+ 		return -EIO;
+ 
+ 	/* Get Supported EEE */
+ 	cap = phy_read_mmd(phydev, MDIO_MMD_PCS, MDIO_PCS_EEE_ABLE);
+ 	if (cap < 0)
+ 		return cap;
+ 
+ 	old_adv = phy_read_mmd(phydev, MDIO_MMD_AN, MDIO_AN_EEE_ADV);
+ 	if (old_adv < 0)
+ 		return old_adv;
+ 
+ 	adv = ethtool_adv_to_mmd_eee_adv_t(data->advertised) & cap;
+ 
+ 	/* Mask prohibited EEE modes */
+ 	adv &= ~phydev->eee_broken_modes;
+ 
+ 	if (old_adv != adv) {
+ 		ret = phy_write_mmd(phydev, MDIO_MMD_AN, MDIO_AN_EEE_ADV, adv);
+ 		if (ret < 0)
+ 			return ret;
+ 
+ 		/* Restart autonegotiation so the new modes get sent to the
+ 		 * link partner.
+ 		 */
+ 		ret = phy_restart_aneg(phydev);
+ 		if (ret < 0)
+ 			return ret;
+ 	}
++>>>>>>> 002ba7058a7f (net: phy: hook up clause 45 autonegotiation restart)
  
  	return 0;
  }
@@@ -1258,6 -1472,9 +1309,13 @@@ int phy_ethtool_nway_reset(struct net_d
  	if (!phydev)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	return genphy_restart_aneg(phydev);
++=======
+ 	if (!phydev->drv)
+ 		return -EIO;
+ 
+ 	return phy_restart_aneg(phydev);
++>>>>>>> 002ba7058a7f (net: phy: hook up clause 45 autonegotiation restart)
  }
  EXPORT_SYMBOL(phy_ethtool_nway_reset);
* Unmerged path drivers/net/phy/phy.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 9542c61131f8..3f279fd17d97 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -663,6 +663,7 @@ int phy_start_aneg(struct phy_device *phydev);
 int phy_aneg_done(struct phy_device *phydev);
 
 int phy_stop_interrupts(struct phy_device *phydev);
+int phy_restart_aneg(struct phy_device *phydev);
 
 static inline int phy_read_status(struct phy_device *phydev)
 {
