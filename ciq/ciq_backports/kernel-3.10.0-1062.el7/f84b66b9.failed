net/mlx5: Fix DCT creation bad flow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Fix DCT creation bad flow (Alaa Hleihel) [1688717]
Rebuild_FUZZ: 93.94%
commit-author Yishai Hadas <yishaih@mellanox.com>
commit f84b66b9cce78e8f9d38204fdaa75f07c75f4911
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f84b66b9.failed

In case the DCT creation command has succeeded a DRAIN must be issued
before calling DESTROY.

In addition, the original code used the wrong parameter for the DESTROY
command, 'in' instead of 'din', which caused another creation try instead
of destroying.

	Cc: <stable@vger.kernel.org> # 4.15
Fixes: 57cda166bbe0 ("net/mlx5: Add DCT command interface")
	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Reviewed-by: Artemy Kovalyov <artemyko@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit f84b66b9cce78e8f9d38204fdaa75f07c75f4911)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/qp.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/qp.c
index 4f0182154934,c7c2920c05c4..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/qp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/qp.c
@@@ -38,11 -38,14 +38,19 @@@
  #include <linux/mlx5/transobj.h>
  
  #include "mlx5_core.h"
 -#include "lib/eq.h"
  
++<<<<<<< HEAD
 +static struct mlx5_core_rsc_common *mlx5_get_rsc(struct mlx5_core_dev *dev,
 +						 u32 rsn)
++=======
+ static int mlx5_core_drain_dct(struct mlx5_core_dev *dev,
+ 			       struct mlx5_core_dct *dct);
+ 
+ static struct mlx5_core_rsc_common *
+ mlx5_get_rsc(struct mlx5_qp_table *table, u32 rsn)
++>>>>>>> f84b66b9cce7 (net/mlx5: Fix DCT creation bad flow)
  {
 +	struct mlx5_qp_table *table = &dev->priv.qp_table;
  	struct mlx5_core_rsc_common *common;
  	unsigned long flags;
  
@@@ -218,10 -286,7 +255,14 @@@ int mlx5_core_create_dct(struct mlx5_co
  
  	return 0;
  err_cmd:
++<<<<<<< HEAD
 +	MLX5_SET(destroy_dct_in, din, opcode, MLX5_CMD_OP_DESTROY_DCT);
 +	MLX5_SET(destroy_dct_in, din, dctn, qp->qpn);
 +	mlx5_cmd_exec(dev, (void *)&in, sizeof(din),
 +		      (void *)&out, sizeof(dout));
++=======
+ 	_mlx5_core_destroy_dct(dev, dct, false);
++>>>>>>> f84b66b9cce7 (net/mlx5: Fix DCT creation bad flow)
  	return err;
  }
  EXPORT_SYMBOL_GPL(mlx5_core_create_dct);
@@@ -285,28 -351,7 +326,32 @@@ static int mlx5_core_drain_dct(struct m
  int mlx5_core_destroy_dct(struct mlx5_core_dev *dev,
  			  struct mlx5_core_dct *dct)
  {
++<<<<<<< HEAD
 +	u32 out[MLX5_ST_SZ_DW(destroy_dct_out)] = {0};
 +	u32 in[MLX5_ST_SZ_DW(destroy_dct_in)]   = {0};
 +	struct mlx5_core_qp *qp = &dct->mqp;
 +	int err;
 +
 +	err = mlx5_core_drain_dct(dev, dct);
 +	if (err) {
 +		if (dev->state == MLX5_DEVICE_STATE_INTERNAL_ERROR) {
 +			goto destroy;
 +		} else {
 +			mlx5_core_warn(dev, "failed drain DCT 0x%x with error 0x%x\n", qp->qpn, err);
 +			return err;
 +		}
 +	}
 +	wait_for_completion(&dct->drained);
 +destroy:
 +	destroy_resource_common(dev, &dct->mqp);
 +	MLX5_SET(destroy_dct_in, in, opcode, MLX5_CMD_OP_DESTROY_DCT);
 +	MLX5_SET(destroy_dct_in, in, dctn, qp->qpn);
 +	err = mlx5_cmd_exec(dev, (void *)&in, sizeof(in),
 +			    (void *)&out, sizeof(out));
 +	return err;
++=======
+ 	return _mlx5_core_destroy_dct(dev, dct, true);
++>>>>>>> f84b66b9cce7 (net/mlx5: Fix DCT creation bad flow)
  }
  EXPORT_SYMBOL_GPL(mlx5_core_destroy_dct);
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/qp.c
