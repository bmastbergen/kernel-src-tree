n_tty: Access termios values safely

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Peter Hurley <peter@hurleysoftware.com>
commit 9356b535fcb71db494fc434acceb79f56d15bda2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9356b535.failed

Use termios_rwsem to guarantee safe access to the termios values.
This is particularly important for N_TTY as changing certain termios
settings alters the mode of operation.

termios_rwsem must be dropped across throttle/unthrottle since
those functions claim the termios_rwsem exclusively (to guarantee
safe access to the termios and for mutual exclusion).

	Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 9356b535fcb71db494fc434acceb79f56d15bda2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/n_tty.c
diff --cc drivers/tty/n_tty.c
index 4181bb27f72e,0599b583d21e..000000000000
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@@ -1492,15 -1491,47 +1492,50 @@@ static void n_tty_receive_buf(struct tt
  	 * canonical mode and don't have a newline yet!
  	 */
  	while (1) {
+ 		int throttled;
  		tty_set_flow_change(tty, TTY_THROTTLE_SAFE);
 -		if (receive_room(tty) >= TTY_THRESHOLD_THROTTLE)
 +		if (tty->receive_room >= TTY_THRESHOLD_THROTTLE)
  			break;
- 		if (!tty_throttle_safe(tty))
+ 		up_read(&tty->termios_rwsem);
+ 		throttled = tty_throttle_safe(tty);
+ 		down_read(&tty->termios_rwsem);
+ 		if (!throttled)
  			break;
  	}
  	__tty_set_flow_change(tty, 0);
  }
  
++<<<<<<< HEAD
++=======
+ static void n_tty_receive_buf(struct tty_struct *tty, const unsigned char *cp,
+ 			      char *fp, int count)
+ {
+ 	down_read(&tty->termios_rwsem);
+ 	__receive_buf(tty, cp, fp, count);
+ 	up_read(&tty->termios_rwsem);
+ }
+ 
+ static int n_tty_receive_buf2(struct tty_struct *tty, const unsigned char *cp,
+ 			      char *fp, int count)
+ {
+ 	struct n_tty_data *ldata = tty->disc_data;
+ 	int room;
+ 
+ 	down_read(&tty->termios_rwsem);
+ 
+ 	tty->receive_room = room = receive_room(tty);
+ 	if (!room)
+ 		ldata->no_room = 1;
+ 	count = min(count, room);
+ 	if (count)
+ 		__receive_buf(tty, cp, fp, count);
+ 
+ 	up_read(&tty->termios_rwsem);
+ 
+ 	return count;
+ }
+ 
++>>>>>>> 9356b535fcb7 (n_tty: Access termios values safely)
  int is_ignored(int sig)
  {
  	return (sigismember(&current->blocked, sig) ||
* Unmerged path drivers/tty/n_tty.c
