net/mlx5e: Set ECN for received packets using CQE indication

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Set ECN for received packets using CQE indication (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 96.55%
commit-author Natali Shechtman <natali@mellanox.com>
commit f007c13d4ad62f494c83897eda96437005df4a91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f007c13d.failed

In multi-host (MH) NIC scheme, a single HW port serves multiple hosts
or sockets on the same host.
The HW uses a mechanism in the PCIe buffer which monitors
the amount of consumed PCIe buffers per host.
On a certain configuration, under congestion,
the HW emulates a switch doing ECN marking on packets using ECN
indication on the completion descriptor (CQE).

The driver needs to set the ECN bits on the packet SKB,
such that the network stack can react on that, this commit does that.

	Signed-off-by: Natali Shechtman <natali@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit f007c13d4ad62f494c83897eda96437005df4a91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 3631c4f3022b,2175d6972dc3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -34,9 -34,10 +34,14 @@@
  #include <linux/ip.h>
  #include <linux/ipv6.h>
  #include <linux/tcp.h>
 +#include <linux/bpf_trace.h>
  #include <net/busy_poll.h>
  #include <net/ip6_checksum.h>
++<<<<<<< HEAD
++=======
+ #include <net/page_pool.h>
+ #include <net/inet_ecn.h>
++>>>>>>> f007c13d4ad6 (net/mlx5e: Set ECN for received packets using CQE indication)
  #include "en.h"
  #include "en_tc.h"
  #include "eswitch.h"
@@@ -635,14 -691,70 +640,31 @@@ static inline void mlx5e_skb_set_hash(s
  	skb_set_hash(skb, be32_to_cpu(cqe->rss_hash_result), ht);
  }
  
- static inline bool is_last_ethertype_ip(struct sk_buff *skb, int *network_depth)
+ static inline bool is_last_ethertype_ip(struct sk_buff *skb, int *network_depth,
+ 					__be16 *proto)
  {
- 	__be16 ethertype = ((struct ethhdr *)skb->data)->h_proto;
+ 	*proto = ((struct ethhdr *)skb->data)->h_proto;
+ 	*proto = __vlan_get_protocol(skb, *proto, network_depth);
+ 	return (*proto == htons(ETH_P_IP) || *proto == htons(ETH_P_IPV6));
+ }
+ 
+ static inline void mlx5e_enable_ecn(struct mlx5e_rq *rq, struct sk_buff *skb)
+ {
+ 	int network_depth = 0;
+ 	__be16 proto;
+ 	void *ip;
+ 	int rc;
  
- 	ethertype = __vlan_get_protocol(skb, ethertype, network_depth);
- 	return (ethertype == htons(ETH_P_IP) || ethertype == htons(ETH_P_IPV6));
+ 	if (unlikely(!is_last_ethertype_ip(skb, &network_depth, &proto)))
+ 		return;
+ 
+ 	ip = skb->data + network_depth;
+ 	rc = ((proto == htons(ETH_P_IP)) ? IP_ECN_set_ce((struct iphdr *)ip) :
+ 					 IP6_ECN_set_ce(skb, (struct ipv6hdr *)ip));
+ 
+ 	rq->stats->ecn_mark += !!rc;
  }
  
 -static __be32 mlx5e_get_fcs(struct sk_buff *skb)
 -{
 -	int last_frag_sz, bytes_in_prev, nr_frags;
 -	u8 *fcs_p1, *fcs_p2;
 -	skb_frag_t *last_frag;
 -	__be32 fcs_bytes;
 -
 -	if (!skb_is_nonlinear(skb))
 -		return *(__be32 *)(skb->data + skb->len - ETH_FCS_LEN);
 -
 -	nr_frags = skb_shinfo(skb)->nr_frags;
 -	last_frag = &skb_shinfo(skb)->frags[nr_frags - 1];
 -	last_frag_sz = skb_frag_size(last_frag);
 -
 -	/* If all FCS data is in last frag */
 -	if (last_frag_sz >= ETH_FCS_LEN)
 -		return *(__be32 *)(skb_frag_address(last_frag) +
 -				   last_frag_sz - ETH_FCS_LEN);
 -
 -	fcs_p2 = (u8 *)skb_frag_address(last_frag);
 -	bytes_in_prev = ETH_FCS_LEN - last_frag_sz;
 -
 -	/* Find where the other part of the FCS is - Linear or another frag */
 -	if (nr_frags == 1) {
 -		fcs_p1 = skb_tail_pointer(skb);
 -	} else {
 -		skb_frag_t *prev_frag = &skb_shinfo(skb)->frags[nr_frags - 2];
 -
 -		fcs_p1 = skb_frag_address(prev_frag) +
 -			    skb_frag_size(prev_frag);
 -	}
 -	fcs_p1 -= bytes_in_prev;
 -
 -	memcpy(&fcs_bytes, fcs_p1, bytes_in_prev);
 -	memcpy(((u8 *)&fcs_bytes) + bytes_in_prev, fcs_p2, last_frag_sz);
 -
 -	return fcs_bytes;
 -}
 -
  static inline void mlx5e_handle_csum(struct net_device *netdev,
  				     struct mlx5_cqe64 *cqe,
  				     struct mlx5e_rq *rq,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 525df44c9b3c..6c183d5fa3dd 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@ -45,6 +45,7 @@ static const struct counter_desc sw_stats_desc[] = {
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_added_vlan_packets) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_lro_packets) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_lro_bytes) },
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_ecn_mark) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_removed_vlan_packets) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_csum_unnecessary) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_csum_none) },
@@ -120,6 +121,7 @@ static void mlx5e_grp_sw_update_stats(struct mlx5e_priv *priv)
 		s->rx_bytes	+= rq_stats->bytes;
 		s->rx_lro_packets += rq_stats->lro_packets;
 		s->rx_lro_bytes	+= rq_stats->lro_bytes;
+		s->rx_ecn_mark	+= rq_stats->ecn_mark;
 		s->rx_removed_vlan_packets += rq_stats->removed_vlan_packets;
 		s->rx_csum_none	+= rq_stats->csum_none;
 		s->rx_csum_complete += rq_stats->csum_complete;
@@ -1078,6 +1080,7 @@ static const struct counter_desc rq_stats_desc[] = {
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, xdp_tx_full) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, lro_packets) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, lro_bytes) },
+	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, ecn_mark) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, removed_vlan_packets) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, wqe_err) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, mpwqe_filler_cqes) },
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 9c603217203a..f56e07a960d9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@ -63,6 +63,7 @@ struct mlx5e_sw_stats {
 	u64 tx_added_vlan_packets;
 	u64 rx_lro_packets;
 	u64 rx_lro_bytes;
+	u64 rx_ecn_mark;
 	u64 rx_removed_vlan_packets;
 	u64 rx_csum_unnecessary;
 	u64 rx_csum_none;
@@ -165,6 +166,7 @@ struct mlx5e_rq_stats {
 	u64 csum_none;
 	u64 lro_packets;
 	u64 lro_bytes;
+	u64 ecn_mark;
 	u64 removed_vlan_packets;
 	u64 xdp_drop;
 	u64 xdp_tx;
