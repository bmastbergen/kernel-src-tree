net: phy: add an option to disable EEE advertisement

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] phy: add an option to disable EEE advertisement (Ivan Vecera) [1685646]
Rebuild_FUZZ: 94.95%
commit-author jbrunet <jbrunet@baylibre.com>
commit d853d145ea3e63387a2ac759aa41d5e43876e561
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/d853d145.failed

This patch adds an option to disable EEE advertisement in the generic PHY
by providing a mask of prohibited modes corresponding to the value found in
the MDIO_AN_EEE_ADV register.

On some platforms, PHY Low power idle seems to be causing issues, even
breaking the link some cases. The patch provides a convenient way for these
platforms to disable EEE advertisement and work around the issue.

	Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
	Tested-by: Yegor Yefremov <yegorslists@googlemail.com>
	Tested-by: Andreas FÃ¤rber <afaerber@suse.de>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d853d145ea3e63387a2ac759aa41d5e43876e561)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy.c
#	drivers/net/phy/phy_device.c
diff --cc drivers/net/phy/phy.c
index 8515a441224e,a3981cc6448a..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -1304,8 -1396,10 +1304,15 @@@ int phy_ethtool_set_eee(struct phy_devi
  {
  	int val = ethtool_adv_to_mmd_eee_adv_t(data->advertised);
  
++<<<<<<< HEAD
 +	phy_write_mmd_indirect(phydev->bus, MDIO_AN_EEE_ADV, MDIO_MMD_AN,
 +			       phydev->addr, val);
++=======
+ 	/* Mask prohibited EEE modes */
+ 	val &= ~phydev->eee_broken_modes;
+ 
+ 	phy_write_mmd_indirect(phydev, MDIO_AN_EEE_ADV, MDIO_MMD_AN, val);
++>>>>>>> d853d145ea3e (net: phy: add an option to disable EEE advertisement)
  
  	return 0;
  }
diff --cc drivers/net/phy/phy_device.c
index f7f4abfd4a6f,83e52f1b80f2..000000000000
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@@ -1214,6 -1552,74 +1256,77 @@@ static int gen10g_resume(struct phy_dev
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int __set_phy_supported(struct phy_device *phydev, u32 max_speed)
+ {
+ 	/* The default values for phydev->supported are provided by the PHY
+ 	 * driver "features" member, we want to reset to sane defaults first
+ 	 * before supporting higher speeds.
+ 	 */
+ 	phydev->supported &= PHY_DEFAULT_FEATURES;
+ 
+ 	switch (max_speed) {
+ 	default:
+ 		return -ENOTSUPP;
+ 	case SPEED_1000:
+ 		phydev->supported |= PHY_1000BT_FEATURES;
+ 		/* fall through */
+ 	case SPEED_100:
+ 		phydev->supported |= PHY_100BT_FEATURES;
+ 		/* fall through */
+ 	case SPEED_10:
+ 		phydev->supported |= PHY_10BT_FEATURES;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int phy_set_max_speed(struct phy_device *phydev, u32 max_speed)
+ {
+ 	int err;
+ 
+ 	err = __set_phy_supported(phydev, max_speed);
+ 	if (err)
+ 		return err;
+ 
+ 	phydev->advertising = phydev->supported;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL(phy_set_max_speed);
+ 
+ static void of_set_phy_supported(struct phy_device *phydev)
+ {
+ 	struct device_node *node = phydev->mdio.dev.of_node;
+ 	u32 max_speed;
+ 
+ 	if (!IS_ENABLED(CONFIG_OF_MDIO))
+ 		return;
+ 
+ 	if (!node)
+ 		return;
+ 
+ 	if (!of_property_read_u32(node, "max-speed", &max_speed))
+ 		__set_phy_supported(phydev, max_speed);
+ }
+ 
+ static void of_set_phy_eee_broken(struct phy_device *phydev)
+ {
+ 	struct device_node *node = phydev->mdio.dev.of_node;
+ 	u32 broken;
+ 
+ 	if (!IS_ENABLED(CONFIG_OF_MDIO))
+ 		return;
+ 
+ 	if (!node)
+ 		return;
+ 
+ 	if (!of_property_read_u32(node, "eee-broken-modes", &broken))
+ 		phydev->eee_broken_modes = broken;
+ }
+ 
++>>>>>>> d853d145ea3e (net: phy: add an option to disable EEE advertisement)
  /**
   * phy_probe - probe and init a PHY device
   * @dev: device to probe and init
@@@ -1248,8 -1654,14 +1361,13 @@@ static int phy_probe(struct device *dev
  	 * or both of these values
  	 */
  	phydev->supported = phydrv->features;
 -	of_set_phy_supported(phydev);
 -	phydev->advertising = phydev->supported;
 +	phydev->advertising = phydrv->features;
  
+ 	/* Get the EEE modes we want to prohibit. We will ask
+ 	 * the PHY stop advertising these mode later on
+ 	 */
+ 	of_set_phy_eee_broken(phydev);
+ 
  	/* Set the state to READY by default */
  	phydev->state = PHY_READY;
  
* Unmerged path drivers/net/phy/phy.c
* Unmerged path drivers/net/phy/phy_device.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 2a7a15321caa..0dad7c4de7c0 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -387,6 +387,9 @@ struct phy_device {
 	u32 advertising;
 	u32 lp_advertising;
 
+	/* Energy efficient ethernet modes which should be prohibited */
+	u32 eee_broken_modes;
+
 	int autoneg;
 
 	int link_timeout;
