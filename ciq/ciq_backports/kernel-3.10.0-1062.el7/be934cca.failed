IB/uverbs: Add device memory registration ioctl support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Ariel Levkovich <lariel@mellanox.com>
commit be934cca9e987e73eb20e3c80731a9580d5acc79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/be934cca.failed

Adding new ioctl method for the MR object - REG_DM_MR.

This command can be used by users to register an allocated
device memory buffer as an MR and receive lkey and rkey
to be used within work requests.

It is added as a new method under the MR object and using a new
ib_device callback - reg_dm_mr.
The command creates a standard ib_mr object which represents the
registered memory.

	Signed-off-by: Ariel Levkovich <lariel@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit be934cca9e987e73eb20e3c80731a9580d5acc79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/Makefile
#	include/rdma/ib_verbs.h
#	include/uapi/rdma/ib_user_ioctl_cmds.h
diff --cc drivers/infiniband/core/Makefile
index c38d78c3c3ce,dda9e856e3fa..000000000000
--- a/drivers/infiniband/core/Makefile
+++ b/drivers/infiniband/core/Makefile
@@@ -32,4 -34,6 +32,10 @@@ ib_ucm-y :=			ucm.
  
  ib_uverbs-y :=			uverbs_main.o uverbs_cmd.o uverbs_marshall.o \
  				rdma_core.o uverbs_std_types.o uverbs_ioctl.o \
++<<<<<<< HEAD
 +				uverbs_ioctl_merge.o uverbs_std_types_cq.o
++=======
+ 				uverbs_ioctl_merge.o uverbs_std_types_cq.o \
+ 				uverbs_std_types_flow_action.o uverbs_std_types_dm.o \
+ 				uverbs_std_types_mr.o
++>>>>>>> be934cca9e98 (IB/uverbs: Add device memory registration ioctl support)
diff --cc include/rdma/ib_verbs.h
index e4a3f200edb0,4bd24c48b1ad..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -315,6 -321,18 +315,21 @@@ struct ib_cq_caps 
  	u16     max_cq_moderation_period;
  };
  
++<<<<<<< HEAD
++=======
+ struct ib_dm_mr_attr {
+ 	u64		length;
+ 	u64		offset;
+ 	u32		access_flags;
+ };
+ 
+ struct ib_dm_alloc_attr {
+ 	u64	length;
+ 	u32	alignment;
+ 	u32	flags;
+ };
+ 
++>>>>>>> be934cca9e98 (IB/uverbs: Add device memory registration ioctl support)
  struct ib_device_attr {
  	u64			fw_ver;
  	__be64			sys_image_guid;
@@@ -1763,6 -1802,13 +1778,16 @@@ struct ib_mr 
  		struct ib_uobject	*uobject;	/* user */
  		struct list_head	qp_entry;	/* FR */
  	};
++<<<<<<< HEAD
++=======
+ 
+ 	struct ib_dm      *dm;
+ 
+ 	/*
+ 	 * Implementation details of the RDMA core, don't use in drivers:
+ 	 */
+ 	struct rdma_restrack_entry res;
++>>>>>>> be934cca9e98 (IB/uverbs: Add device memory registration ioctl support)
  };
  
  struct ib_mw {
@@@ -2384,6 -2440,21 +2409,24 @@@ struct ib_device 
  							   struct ib_rwq_ind_table_init_attr *init_attr,
  							   struct ib_udata *udata);
  	int                        (*destroy_rwq_ind_table)(struct ib_rwq_ind_table *wq_ind_table);
++<<<<<<< HEAD
++=======
+ 	struct ib_flow_action *	   (*create_flow_action_esp)(struct ib_device *device,
+ 							     const struct ib_flow_action_attrs_esp *attr,
+ 							     struct uverbs_attr_bundle *attrs);
+ 	int			   (*destroy_flow_action)(struct ib_flow_action *action);
+ 	int			   (*modify_flow_action_esp)(struct ib_flow_action *action,
+ 							     const struct ib_flow_action_attrs_esp *attr,
+ 							     struct uverbs_attr_bundle *attrs);
+ 	struct ib_dm *             (*alloc_dm)(struct ib_device *device,
+ 					       struct ib_ucontext *context,
+ 					       struct ib_dm_alloc_attr *attr,
+ 					       struct uverbs_attr_bundle *attrs);
+ 	int                        (*dealloc_dm)(struct ib_dm *dm);
+ 	struct ib_mr *             (*reg_dm_mr)(struct ib_pd *pd, struct ib_dm *dm,
+ 						struct ib_dm_mr_attr *attr,
+ 						struct uverbs_attr_bundle *attrs);
++>>>>>>> be934cca9e98 (IB/uverbs: Add device memory registration ioctl support)
  	/**
  	 * rdma netdev operation
  	 *
diff --cc include/uapi/rdma/ib_user_ioctl_cmds.h
index 77bbbed17ed5,83e3890eef20..000000000000
--- a/include/uapi/rdma/ib_user_ioctl_cmds.h
+++ b/include/uapi/rdma/ib_user_ioctl_cmds.h
@@@ -80,4 -95,40 +80,43 @@@ enum uverbs_methods_cq 
  	UVERBS_METHOD_CQ_DESTROY,
  };
  
++<<<<<<< HEAD
++=======
+ enum uverbs_methods_actions_flow_action_ops {
+ 	UVERBS_METHOD_FLOW_ACTION_ESP_CREATE,
+ 	UVERBS_METHOD_FLOW_ACTION_DESTROY,
+ 	UVERBS_METHOD_FLOW_ACTION_ESP_MODIFY,
+ };
+ 
+ enum uverbs_attrs_alloc_dm_cmd_attr_ids {
+ 	UVERBS_ATTR_ALLOC_DM_HANDLE,
+ 	UVERBS_ATTR_ALLOC_DM_LENGTH,
+ 	UVERBS_ATTR_ALLOC_DM_ALIGNMENT,
+ };
+ 
+ enum uverbs_attrs_free_dm_cmd_attr_ids {
+ 	UVERBS_ATTR_FREE_DM_HANDLE,
+ };
+ 
+ enum uverbs_methods_dm {
+ 	UVERBS_METHOD_DM_ALLOC,
+ 	UVERBS_METHOD_DM_FREE,
+ };
+ 
+ enum uverbs_attrs_reg_dm_mr_cmd_attr_ids {
+ 	UVERBS_ATTR_REG_DM_MR_HANDLE,
+ 	UVERBS_ATTR_REG_DM_MR_OFFSET,
+ 	UVERBS_ATTR_REG_DM_MR_LENGTH,
+ 	UVERBS_ATTR_REG_DM_MR_PD_HANDLE,
+ 	UVERBS_ATTR_REG_DM_MR_ACCESS_FLAGS,
+ 	UVERBS_ATTR_REG_DM_MR_DM_HANDLE,
+ 	UVERBS_ATTR_REG_DM_MR_RESP_LKEY,
+ 	UVERBS_ATTR_REG_DM_MR_RESP_RKEY,
+ };
+ 
+ enum uverbs_methods_mr {
+ 	UVERBS_METHOD_DM_MR_REG,
+ };
+ 
++>>>>>>> be934cca9e98 (IB/uverbs: Add device memory registration ioctl support)
  #endif
* Unmerged path drivers/infiniband/core/Makefile
diff --git a/drivers/infiniband/core/uverbs_std_types.c b/drivers/infiniband/core/uverbs_std_types.c
index bd10e94819b9..e8005d4c5a89 100644
--- a/drivers/infiniband/core/uverbs_std_types.c
+++ b/drivers/infiniband/core/uverbs_std_types.c
@@ -144,12 +144,6 @@ static int uverbs_free_srq(struct ib_uobject *uobject,
 	return ret;
 }
 
-static int uverbs_free_mr(struct ib_uobject *uobject,
-			  enum rdma_remove_reason why)
-{
-	return ib_dereg_mr((struct ib_mr *)uobject->object);
-}
-
 static int uverbs_free_xrcd(struct ib_uobject *uobject,
 			    enum rdma_remove_reason why)
 {
@@ -258,10 +252,6 @@ DECLARE_UVERBS_NAMED_OBJECT(UVERBS_OBJECT_QP,
 DECLARE_UVERBS_NAMED_OBJECT(UVERBS_OBJECT_MW,
 			    &UVERBS_TYPE_ALLOC_IDR(0, uverbs_free_mw));
 
-DECLARE_UVERBS_NAMED_OBJECT(UVERBS_OBJECT_MR,
-			    /* 1 is used in order to free the MR after all the MWs */
-			    &UVERBS_TYPE_ALLOC_IDR(1, uverbs_free_mr));
-
 DECLARE_UVERBS_NAMED_OBJECT(UVERBS_OBJECT_SRQ,
 			    &UVERBS_TYPE_ALLOC_IDR_SZ(sizeof(struct ib_usrq_object), 0,
 						      uverbs_free_srq));
diff --git a/drivers/infiniband/core/uverbs_std_types_mr.c b/drivers/infiniband/core/uverbs_std_types_mr.c
new file mode 100644
index 000000000000..68f7cadf088f
--- /dev/null
+++ b/drivers/infiniband/core/uverbs_std_types_mr.c
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * OpenIB.org BSD license below:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      - Redistributions of source code must retain the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer.
+ *
+ *      - Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials
+ *        provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "uverbs.h"
+#include <rdma/uverbs_std_types.h>
+
+static int uverbs_free_mr(struct ib_uobject *uobject,
+			  enum rdma_remove_reason why)
+{
+	return ib_dereg_mr((struct ib_mr *)uobject->object);
+}
+
+static int UVERBS_HANDLER(UVERBS_METHOD_DM_MR_REG)(struct ib_device *ib_dev,
+						   struct ib_uverbs_file *file,
+						   struct uverbs_attr_bundle *attrs)
+{
+	struct ib_dm_mr_attr attr = {};
+	struct ib_uobject *uobj;
+	struct ib_dm *dm;
+	struct ib_pd *pd;
+	struct ib_mr *mr;
+	int ret;
+
+	if (!ib_dev->reg_dm_mr)
+		return -EOPNOTSUPP;
+
+	ret = uverbs_copy_from(&attr.offset, attrs, UVERBS_ATTR_REG_DM_MR_OFFSET);
+	if (ret)
+		return ret;
+
+	ret = uverbs_copy_from(&attr.length, attrs,
+			       UVERBS_ATTR_REG_DM_MR_LENGTH);
+	if (ret)
+		return ret;
+
+	ret = uverbs_copy_from(&attr.access_flags, attrs,
+			       UVERBS_ATTR_REG_DM_MR_ACCESS_FLAGS);
+	if (ret)
+		return ret;
+
+	if (!(attr.access_flags & IB_ZERO_BASED))
+		return -EINVAL;
+
+	ret = ib_check_mr_access(attr.access_flags);
+	if (ret)
+		return ret;
+
+	pd = uverbs_attr_get_obj(attrs, UVERBS_ATTR_REG_DM_MR_PD_HANDLE);
+
+	dm = uverbs_attr_get_obj(attrs, UVERBS_ATTR_REG_DM_MR_DM_HANDLE);
+
+	uobj = uverbs_attr_get(attrs, UVERBS_ATTR_REG_DM_MR_HANDLE)->obj_attr.uobject;
+
+	if (attr.offset > dm->length || attr.length > dm->length ||
+	    attr.length > dm->length - attr.offset)
+		return -EINVAL;
+
+	mr = pd->device->reg_dm_mr(pd, dm, &attr, attrs);
+	if (IS_ERR(mr))
+		return PTR_ERR(mr);
+
+	mr->device  = pd->device;
+	mr->pd      = pd;
+	mr->dm      = dm;
+	mr->uobject = uobj;
+	atomic_inc(&pd->usecnt);
+	atomic_inc(&dm->usecnt);
+
+	uobj->object = mr;
+
+	ret = uverbs_copy_to(attrs, UVERBS_ATTR_REG_DM_MR_RESP_LKEY, &mr->lkey,
+			     sizeof(mr->lkey));
+	if (ret)
+		goto err_dereg;
+
+	ret = uverbs_copy_to(attrs, UVERBS_ATTR_REG_DM_MR_RESP_RKEY,
+			     &mr->rkey, sizeof(mr->rkey));
+	if (ret)
+		goto err_dereg;
+
+	return 0;
+
+err_dereg:
+	ib_dereg_mr(mr);
+
+	return ret;
+}
+
+static DECLARE_UVERBS_NAMED_METHOD(UVERBS_METHOD_DM_MR_REG,
+	&UVERBS_ATTR_IDR(UVERBS_ATTR_REG_DM_MR_HANDLE, UVERBS_OBJECT_MR,
+			 UVERBS_ACCESS_NEW,
+			 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_PTR_IN(UVERBS_ATTR_REG_DM_MR_OFFSET,
+			    UVERBS_ATTR_TYPE(u64),
+			    UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_PTR_IN(UVERBS_ATTR_REG_DM_MR_LENGTH,
+			    UVERBS_ATTR_TYPE(u64),
+			    UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_IDR(UVERBS_ATTR_REG_DM_MR_PD_HANDLE, UVERBS_OBJECT_PD,
+			 UVERBS_ACCESS_READ,
+			 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_PTR_IN(UVERBS_ATTR_REG_DM_MR_ACCESS_FLAGS,
+			    UVERBS_ATTR_TYPE(u32),
+			    UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_IDR(UVERBS_ATTR_REG_DM_MR_DM_HANDLE, UVERBS_OBJECT_DM,
+			 UVERBS_ACCESS_READ,
+			 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_REG_DM_MR_RESP_LKEY,
+			     UVERBS_ATTR_TYPE(u32),
+			     UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
+	&UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_REG_DM_MR_RESP_RKEY,
+			     UVERBS_ATTR_TYPE(u32),
+			     UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
+
+DECLARE_UVERBS_NAMED_OBJECT(UVERBS_OBJECT_MR,
+			    /* 1 is used in order to free the MR after all the MWs */
+			    &UVERBS_TYPE_ALLOC_IDR(1, uverbs_free_mr),
+			    &UVERBS_METHOD(UVERBS_METHOD_DM_MR_REG));
diff --git a/drivers/infiniband/core/verbs.c b/drivers/infiniband/core/verbs.c
index 1b819efc90bd..373554a1c037 100644
--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@ -1617,11 +1617,15 @@ EXPORT_SYMBOL(ib_resize_cq);
 int ib_dereg_mr(struct ib_mr *mr)
 {
 	struct ib_pd *pd = mr->pd;
+	struct ib_dm *dm = mr->dm;
 	int ret;
 
 	ret = mr->device->dereg_mr(mr);
-	if (!ret)
+	if (!ret) {
 		atomic_dec(&pd->usecnt);
+		if (dm)
+			atomic_dec(&dm->usecnt);
+	}
 
 	return ret;
 }
* Unmerged path include/rdma/ib_verbs.h
diff --git a/include/rdma/uverbs_ioctl.h b/include/rdma/uverbs_ioctl.h
index 3d6ac684b8f0..4a4201d997a7 100644
--- a/include/rdma/uverbs_ioctl.h
+++ b/include/rdma/uverbs_ioctl.h
@@ -408,6 +408,18 @@ static inline int uverbs_attr_get_enum_id(const struct uverbs_attr_bundle *attrs
 	return attr->ptr_attr.enum_id;
 }
 
+static inline void *uverbs_attr_get_obj(const struct uverbs_attr_bundle *attrs_bundle,
+					u16 idx)
+{
+	struct ib_uobject *uobj =
+		uverbs_attr_get(attrs_bundle, idx)->obj_attr.uobject;
+
+	if (IS_ERR(uobj))
+		return uobj;
+
+	return uobj->object;
+}
+
 static inline int uverbs_copy_to(const struct uverbs_attr_bundle *attrs_bundle,
 				 size_t idx, const void *from, size_t size)
 {
* Unmerged path include/uapi/rdma/ib_user_ioctl_cmds.h
