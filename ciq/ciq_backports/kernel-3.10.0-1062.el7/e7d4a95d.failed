bitfield: fix *_encode_bits()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Johannes Berg <johannes@sipsolutions.net>
commit e7d4a95da86e0b048702765bbdcdc968aaf312e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e7d4a95d.failed

There's a bug in *_encode_bits() in using ~field_multiplier() for
the check whether or not the constant value fits into the field,
this is wrong and clearly ~field_mask() was intended. This was
triggering for me for both constant and non-constant values.

Additionally, make this case actually into an compile error.
Declaring the extern function that will never exist with just a
warning is pointless as then later we'll just get a link error.

While at it, also fix the indentation in those lines I'm touching.

Finally, as suggested by Andy Shevchenko, add some tests and for
that introduce also u8 helpers. The tests don't compile without
the fix, showing that it's necessary.

Fixes: 00b0c9b82663 ("Add primitives for manipulating bitfields both in host- and fixed-endian.")
	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
	Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
(cherry picked from commit e7d4a95da86e0b048702765bbdcdc968aaf312e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bitfield.h
diff --cc include/linux/bitfield.h
index 8b9d6fff002d,147a7bb341dd..000000000000
--- a/include/linux/bitfield.h
+++ b/include/linux/bitfield.h
@@@ -103,4 -104,49 +103,52 @@@
  		(typeof(_mask))(((_reg) & (_mask)) >> __bf_shf(_mask));	\
  	})
  
++<<<<<<< HEAD
++=======
+ extern void __compiletime_error("value doesn't fit into mask")
+ __field_overflow(void);
+ extern void __compiletime_error("bad bitfield mask")
+ __bad_mask(void);
+ static __always_inline u64 field_multiplier(u64 field)
+ {
+ 	if ((field | (field - 1)) & ((field | (field - 1)) + 1))
+ 		__bad_mask();
+ 	return field & -field;
+ }
+ static __always_inline u64 field_mask(u64 field)
+ {
+ 	return field / field_multiplier(field);
+ }
+ #define ____MAKE_OP(type,base,to,from)					\
+ static __always_inline __##type type##_encode_bits(base v, base field)	\
+ {									\
+ 	if (__builtin_constant_p(v) && (v & ~field_mask(field)))	\
+ 		__field_overflow();					\
+ 	return to((v & field_mask(field)) * field_multiplier(field));	\
+ }									\
+ static __always_inline __##type type##_replace_bits(__##type old,	\
+ 					base val, base field)		\
+ {									\
+ 	return (old & ~to(field)) | type##_encode_bits(val, field);	\
+ }									\
+ static __always_inline void type##p_replace_bits(__##type *p,		\
+ 					base val, base field)		\
+ {									\
+ 	*p = (*p & ~to(field)) | type##_encode_bits(val, field);	\
+ }									\
+ static __always_inline base type##_get_bits(__##type v, base field)	\
+ {									\
+ 	return (from(v) & field)/field_multiplier(field);		\
+ }
+ #define __MAKE_OP(size)							\
+ 	____MAKE_OP(le##size,u##size,cpu_to_le##size,le##size##_to_cpu)	\
+ 	____MAKE_OP(be##size,u##size,cpu_to_be##size,be##size##_to_cpu)	\
+ 	____MAKE_OP(u##size,u##size,,)
+ __MAKE_OP(16)
+ __MAKE_OP(32)
+ __MAKE_OP(64)
+ #undef __MAKE_OP
+ #undef ____MAKE_OP
+ 
++>>>>>>> e7d4a95da86e (bitfield: fix *_encode_bits())
  #endif
* Unmerged path include/linux/bitfield.h
