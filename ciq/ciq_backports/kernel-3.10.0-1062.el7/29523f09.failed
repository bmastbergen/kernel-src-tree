ACPI / CPPC: Add support for guaranteed performance

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [acpi] cppc: Add support for guaranteed performance (Prarit Bhargava) [1648208]
Rebuild_FUZZ: 92.63%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit 29523f095397637edca60c627bc3e5c25a02c40f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/29523f09.failed

The Continuous Performance Control package may contain an optional
guaranteed performance field.

Add support to read guaranteed performance from _CPC.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 29523f095397637edca60c627bc3e5c25a02c40f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/cppc_acpi.c
diff --cc drivers/acpi/cppc_acpi.c
index e5b47f032d9a,217a782c3e55..000000000000
--- a/drivers/acpi/cppc_acpi.c
+++ b/drivers/acpi/cppc_acpi.c
@@@ -978,8 -1061,11 +978,16 @@@ int cppc_get_perf_caps(int cpunum, stru
  {
  	struct cpc_desc *cpc_desc = per_cpu(cpc_desc_ptr, cpunum);
  	struct cpc_register_resource *highest_reg, *lowest_reg,
++<<<<<<< HEAD
 +		*lowest_non_linear_reg, *nominal_reg;
 +	u64 high, low, nom, min_nonlinear;
++=======
+ 		*lowest_non_linear_reg, *nominal_reg, *guaranteed_reg,
+ 		*low_freq_reg = NULL, *nom_freq_reg = NULL;
+ 	u64 high, low, guaranteed, nom, min_nonlinear, low_f = 0, nom_f = 0;
+ 	int pcc_ss_id = per_cpu(cpu_pcc_subspace_idx, cpunum);
+ 	struct cppc_pcc_data *pcc_ss_data = NULL;
++>>>>>>> 29523f095397 (ACPI / CPPC: Add support for guaranteed performance)
  	int ret = 0, regs_in_pcc = 0;
  
  	if (!cpc_desc) {
@@@ -991,6 -1077,9 +999,12 @@@
  	lowest_reg = &cpc_desc->cpc_regs[LOWEST_PERF];
  	lowest_non_linear_reg = &cpc_desc->cpc_regs[LOW_NON_LINEAR_PERF];
  	nominal_reg = &cpc_desc->cpc_regs[NOMINAL_PERF];
++<<<<<<< HEAD
++=======
+ 	low_freq_reg = &cpc_desc->cpc_regs[LOWEST_FREQ];
+ 	nom_freq_reg = &cpc_desc->cpc_regs[NOMINAL_FREQ];
+ 	guaranteed_reg = &cpc_desc->cpc_regs[GUARANTEED_PERF];
++>>>>>>> 29523f095397 (ACPI / CPPC: Add support for guaranteed performance)
  
  	/* Are any of the regs PCC ?*/
  	if (CPC_IN_PCC(highest_reg) || CPC_IN_PCC(lowest_reg) ||
* Unmerged path drivers/acpi/cppc_acpi.c
diff --git a/include/acpi/cppc_acpi.h b/include/acpi/cppc_acpi.h
index 0954a8e8cad2..9b718fb8aae6 100644
--- a/include/acpi/cppc_acpi.h
+++ b/include/acpi/cppc_acpi.h
@@ -101,6 +101,7 @@ enum cppc_regs {
  * today.
  */
 struct cppc_perf_caps {
+	u32 guaranteed_perf;
 	u32 highest_perf;
 	u32 nominal_perf;
 	u32 lowest_perf;
