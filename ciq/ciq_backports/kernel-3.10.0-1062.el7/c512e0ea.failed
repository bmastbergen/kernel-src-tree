perf stat: Add 'target' argument to perf_evlist__print_counters()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit c512e0eae4c63be8c5964c3942b2e9c04dcd459e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/c512e0ea.failed

Add 'struct target' argument to perf_evlist__print_counters(), so the
function does not depend on the 'perf stat' command object local target
and can be moved out.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20180830063252.23729-25-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit c512e0eae4c63be8c5964c3942b2e9c04dcd459e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
diff --cc tools/perf/builtin-stat.c
index a3a835604d08,528f85146b59..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1639,21 -1589,23 +1639,27 @@@ static void print_interval(char *prefix
  		num_print_interval = 0;
  }
  
++<<<<<<< HEAD
 +static void print_header(int argc, const char **argv)
++=======
+ static void print_header(struct perf_stat_config *config,
+ 			 struct target *_target,
+ 			 int argc, const char **argv)
++>>>>>>> c512e0eae4c6 (perf stat: Add 'target' argument to perf_evlist__print_counters())
  {
 -	FILE *output = config->output;
 +	FILE *output = stat_config.output;
  	int i;
  
  	fflush(stdout);
  
 -	if (!config->csv_output) {
 +	if (!csv_output) {
  		fprintf(output, "\n");
  		fprintf(output, " Performance counter stats for ");
- 		if (target.system_wide)
+ 		if (_target->system_wide)
  			fprintf(output, "\'system wide");
- 		else if (target.cpu_list)
- 			fprintf(output, "\'CPU(s) %s", target.cpu_list);
- 		else if (!target__has_task(&target)) {
+ 		else if (_target->cpu_list)
+ 			fprintf(output, "\'CPU(s) %s", _target->cpu_list);
+ 		else if (!target__has_task(_target)) {
  			fprintf(output, "\'%s", argv ? argv[0] : "pipe");
  			for (i = 1; argv && (i < argc); i++)
  				fprintf(output, " %s", argv[i]);
@@@ -1773,9 -1727,9 +1780,13 @@@ perf_evlist__print_counters(struct perf
  	char buf[64], *prefix = NULL;
  
  	if (interval)
 -		print_interval(config, prefix = buf, ts);
 +		print_interval(prefix = buf, ts);
  	else
++<<<<<<< HEAD
 +		print_header(argc, argv);
++=======
+ 		print_header(config, _target, argc, argv);
++>>>>>>> c512e0eae4c6 (perf stat: Add 'target' argument to perf_evlist__print_counters())
  
  	if (metric_only) {
  		static int num_print_iv;
* Unmerged path tools/perf/builtin-stat.c
