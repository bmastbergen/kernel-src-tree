aoe: register default groups with device_add_disk()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Hannes Reinecke <hare@suse.de>
commit 95cf7809bf9169fec4e4b7bb24b8069d8f354f96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/95cf7809.failed

Register default sysfs groups during device_add_disk() to avoid a
race condition with udev during startup.

	Signed-off-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Ed L. Cachin <ed.cashin@acm.org>
	Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 95cf7809bf9169fec4e4b7bb24b8069d8f354f96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/aoe/aoe.h
#	drivers/block/aoe/aoeblk.c
#	drivers/block/aoe/aoedev.c
diff --cc drivers/block/aoe/aoe.h
index 175649468c95,015c68017a1c..000000000000
--- a/drivers/block/aoe/aoe.h
+++ b/drivers/block/aoe/aoe.h
@@@ -204,7 -200,7 +204,11 @@@ struct ktstate 
  int aoeblk_init(void);
  void aoeblk_exit(void);
  void aoeblk_gdalloc(void *);
++<<<<<<< HEAD
 +void aoedisk_rm_sysfs(struct aoedev *d);
++=======
+ void aoedisk_rm_debugfs(struct aoedev *d);
++>>>>>>> 95cf7809bf91 (aoe: register default groups with device_add_disk())
  
  int aoechr_init(void);
  void aoechr_exit(void);
diff --cc drivers/block/aoe/aoeblk.c
index 916d9ed5c8aa,ff770e7d9e52..000000000000
--- a/drivers/block/aoe/aoeblk.c
+++ b/drivers/block/aoe/aoeblk.c
@@@ -130,17 -181,49 +130,52 @@@ static const struct attribute_group aoe
  	.attrs = aoe_attrs,
  };
  
- static int
- aoedisk_add_sysfs(struct aoedev *d)
++<<<<<<< HEAD
++=======
+ static const struct attribute_group *aoe_attr_groups[] = {
+ 	&aoe_attr_group,
+ 	NULL,
+ };
+ 
+ static const struct file_operations aoe_debugfs_fops = {
+ 	.open = aoe_debugfs_open,
+ 	.read = seq_read,
+ 	.llseek = seq_lseek,
+ 	.release = single_release,
+ };
+ 
+ static void
+ aoedisk_add_debugfs(struct aoedev *d)
  {
- 	return sysfs_create_group(&disk_to_dev(d->gd)->kobj, &attr_group);
+ 	struct dentry *entry;
+ 	char *p;
+ 
+ 	if (aoe_debugfs_dir == NULL)
+ 		return;
+ 	p = strchr(d->gd->disk_name, '/');
+ 	if (p == NULL)
+ 		p = d->gd->disk_name;
+ 	else
+ 		p++;
+ 	BUG_ON(*p == '\0');
+ 	entry = debugfs_create_file(p, 0444, aoe_debugfs_dir, d,
+ 				    &aoe_debugfs_fops);
+ 	if (IS_ERR_OR_NULL(entry)) {
+ 		pr_info("aoe: cannot create debugfs file for %s\n",
+ 			d->gd->disk_name);
+ 		return;
+ 	}
+ 	BUG_ON(d->debugfs);
+ 	d->debugfs = entry;
  }
  void
- aoedisk_rm_sysfs(struct aoedev *d)
+ aoedisk_rm_debugfs(struct aoedev *d)
  {
- 	sysfs_remove_group(&disk_to_dev(d->gd)->kobj, &attr_group);
+ 	debugfs_remove(d->debugfs);
+ 	d->debugfs = NULL;
  }
  
++>>>>>>> 95cf7809bf91 (aoe: register default groups with device_add_disk())
  static int
  aoeblk_open(struct block_device *bdev, fmode_t mode)
  {
@@@ -328,8 -411,8 +363,13 @@@ aoeblk_gdalloc(void *vp
  
  	spin_unlock_irqrestore(&d->lock, flags);
  
++<<<<<<< HEAD
 +	add_disk(gd);
 +	aoedisk_add_sysfs(d);
++=======
+ 	device_add_disk(NULL, gd, aoe_attr_groups);
+ 	aoedisk_add_debugfs(d);
++>>>>>>> 95cf7809bf91 (aoe: register default groups with device_add_disk())
  
  	spin_lock_irqsave(&d->lock, flags);
  	WARN_ON(!(d->flags & DEVFL_GD_NOW));
diff --cc drivers/block/aoe/aoedev.c
index 98f2965778b9,f29a140cdbc1..000000000000
--- a/drivers/block/aoe/aoedev.c
+++ b/drivers/block/aoe/aoedev.c
@@@ -278,7 -274,7 +278,11 @@@ freedev(struct aoedev *d
  
  	del_timer_sync(&d->timer);
  	if (d->gd) {
++<<<<<<< HEAD
 +		aoedisk_rm_sysfs(d);
++=======
+ 		aoedisk_rm_debugfs(d);
++>>>>>>> 95cf7809bf91 (aoe: register default groups with device_add_disk())
  		del_gendisk(d->gd);
  		put_disk(d->gd);
  		blk_cleanup_queue(d->blkq);
* Unmerged path drivers/block/aoe/aoe.h
* Unmerged path drivers/block/aoe/aoeblk.c
* Unmerged path drivers/block/aoe/aoedev.c
