IB/mlx5: Fix mapping of link-mode to IB width and speed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Aya Levin <ayal@mellanox.com>
commit cd27287562d69629c5f007c6f64c27b6ff15f3e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/cd272875.failed

Add mapping of link mode: CAUI4 100Gbps CR4/KR4 with 4 lines and 25Gbps.
Fix mapping of link mode: GAUI2 50Gbps CR2/KR2 to be 2 lines with 25Gbps.

Fixes: 08e8676f1607 ("IB/mlx5: Add support for 50Gbps per lane link modes")
	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit cd27287562d69629c5f007c6f64c27b6ff15f3e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index db7406c6b74d,531ff20b32ad..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -371,6 -389,68 +371,71 @@@ static int translate_eth_proto_oper(u3
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int translate_eth_ext_proto_oper(u32 eth_proto_oper, u8 *active_speed,
+ 					u8 *active_width)
+ {
+ 	switch (eth_proto_oper) {
+ 	case MLX5E_PROT_MASK(MLX5E_SGMII_100M):
+ 	case MLX5E_PROT_MASK(MLX5E_1000BASE_X_SGMII):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_SDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_5GBASE_R):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_DDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_XFI_XAUI_1):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_QDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_40GBASE_XLAUI_4_XLPPI_4):
+ 		*active_width = IB_WIDTH_4X;
+ 		*active_speed = IB_SPEED_QDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_25GAUI_1_25GBASE_CR_KR):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_EDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_50GAUI_2_LAUI_2_50GBASE_CR2_KR2):
+ 		*active_width = IB_WIDTH_2X;
+ 		*active_speed = IB_SPEED_EDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_50GAUI_1_LAUI_1_50GBASE_CR_KR):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_HDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_CAUI_4_100GBASE_CR4_KR4):
+ 		*active_width = IB_WIDTH_4X;
+ 		*active_speed = IB_SPEED_EDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_100GAUI_2_100GBASE_CR2_KR2):
+ 		*active_width = IB_WIDTH_2X;
+ 		*active_speed = IB_SPEED_HDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_200GAUI_4_200GBASE_CR4_KR4):
+ 		*active_width = IB_WIDTH_4X;
+ 		*active_speed = IB_SPEED_HDR;
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int translate_eth_proto_oper(u32 eth_proto_oper, u8 *active_speed,
+ 				    u8 *active_width, bool ext)
+ {
+ 	return ext ?
+ 		translate_eth_ext_proto_oper(eth_proto_oper, active_speed,
+ 					     active_width) :
+ 		translate_eth_legacy_proto_oper(eth_proto_oper, active_speed,
+ 						active_width);
+ }
+ 
++>>>>>>> cd27287562d6 (IB/mlx5: Fix mapping of link-mode to IB width and speed)
  static int mlx5_query_port_roce(struct ib_device *device, u8 port_num,
  				struct ib_port_attr *props)
  {
* Unmerged path drivers/infiniband/hw/mlx5/main.c
