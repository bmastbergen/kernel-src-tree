x86/cpu/AMD: Apply the Erratum 688 fix when the BIOS doesn't

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] cpu/amd: Apply the Erratum 688 fix when the BIOS doesn't (Gary Hook) [1643292]
Rebuild_FUZZ: 96.55%
commit-author Borislav Petkov <bp@suse.de>
commit bfc1168de949cd3e9ca18c3480b5085deff1ea7c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bfc1168d.failed

Some F14h machines have an erratum which, "under a highly specific
and detailed set of internal timing conditions" can lead to skipping
instructions and RIP corruption.

Add the fix for those machines when their BIOS doesn't apply it or
there simply isn't BIOS update for them.

	Tested-by: <mirh@protonmail.ch>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: <stable@vger.kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sherry Hurwitz <sherry.hurwitz@amd.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Yazen Ghannam <Yazen.Ghannam@amd.com>
Link: http://lkml.kernel.org/r/20171022104731.28249-1-bp@alien8.de
Link: https://bugzilla.kernel.org/show_bug.cgi?id=197285
[ Added pr_info() that we activated the workaround. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit bfc1168de949cd3e9ca18c3480b5085deff1ea7c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/amd_nb.c
diff --cc arch/x86/kernel/amd_nb.c
index ac0d5a024b19,6db28f17ff28..000000000000
--- a/arch/x86/kernel/amd_nb.c
+++ b/arch/x86/kernel/amd_nb.c
@@@ -35,7 -37,9 +37,8 @@@ const struct pci_device_id amd_nb_misc_
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_15H_M30H_NB_F3) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_15H_M60H_NB_F3) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_16H_NB_F3) },
 -	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_16H_M30H_NB_F3) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_17H_DF_F3) },
+ 	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_CNB17H_F3) },
  	{}
  };
  EXPORT_SYMBOL_GPL(amd_nb_misc_ids);
@@@ -45,7 -49,9 +48,8 @@@ static const struct pci_device_id amd_n
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_15H_M30H_NB_F4) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_15H_M60H_NB_F4) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_16H_NB_F4) },
 -	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_16H_M30H_NB_F4) },
  	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_17H_DF_F4) },
+ 	{ PCI_DEVICE(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_CNB17H_F4) },
  	{}
  };
  
@@@ -400,19 -406,49 +404,60 @@@ void amd_flush_garts(void
  }
  EXPORT_SYMBOL_GPL(amd_flush_garts);
  
+ static void __fix_erratum_688(void *info)
+ {
+ #define MSR_AMD64_IC_CFG 0xC0011021
+ 
+ 	msr_set_bit(MSR_AMD64_IC_CFG, 3);
+ 	msr_set_bit(MSR_AMD64_IC_CFG, 14);
+ }
+ 
+ /* Apply erratum 688 fix so machines without a BIOS fix work. */
+ static __init void fix_erratum_688(void)
+ {
+ 	struct pci_dev *F4;
+ 	u32 val;
+ 
+ 	if (boot_cpu_data.x86 != 0x14)
+ 		return;
+ 
+ 	if (!amd_northbridges.num)
+ 		return;
+ 
+ 	F4 = node_to_amd_nb(0)->link;
+ 	if (!F4)
+ 		return;
+ 
+ 	if (pci_read_config_dword(F4, 0x164, &val))
+ 		return;
+ 
+ 	if (val & BIT(2))
+ 		return;
+ 
+ 	on_each_cpu(__fix_erratum_688, NULL, 0);
+ 
+ 	pr_info("x86/cpu/AMD: CPU erratum 688 worked around\n");
+ }
+ 
  static __init int init_amd_nbs(void)
  {
 -	amd_cache_northbridges();
 -	amd_cache_gart();
 +	int err = 0;
  
++<<<<<<< HEAD
 +	err = amd_cache_northbridges();
 +
 +	if (err < 0)
 +		pr_notice("Cannot enumerate AMD northbridges\n");
 +
 +	if (amd_cache_gart() < 0)
 +		pr_notice("Cannot initialize GART flush words, GART support disabled\n");
 +
 +	return err;
++=======
+ 	fix_erratum_688();
+ 
+ 	return 0;
++>>>>>>> bfc1168de949 (x86/cpu/AMD: Apply the Erratum 688 fix when the BIOS doesn't)
  }
  
  /* This has to go after the PCI subsystem */
* Unmerged path arch/x86/kernel/amd_nb.c
