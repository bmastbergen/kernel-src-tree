io: change writeX_relaxed() to remove barriers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Sinan Kaya <okaya@codeaurora.org>
commit a71e7c44ffb7baea0c0795824afc34cc0bc1a301
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/a71e7c44.failed

Now that we hardened writeX() API in asm-generic version, writeX_relaxed()
API is violating the rules when writeX_relaxed() == writeX() in the default
implementation.

The relaxed API shouldn't have any barriers in it and it doesn't provide
any ordering with respect to the memory transactions. The only requirement
is for writes to be ordered with respect to each other. This is achieved
by the volatile in the __raw_writeX() API.

Open code the relaxed API and remove any barriers in it.

	Signed-off-by: Sinan Kaya <okaya@codeaurora.org>
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
(cherry picked from commit a71e7c44ffb7baea0c0795824afc34cc0bc1a301)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/asm-generic/io.h
diff --cc include/asm-generic/io.h
index 66a3fecbf792,f4a149403be9..000000000000
--- a/include/asm-generic/io.h
+++ b/include/asm-generic/io.h
@@@ -96,26 -163,54 +96,39 @@@ static inline void __raw_writel(u32 b, 
  }
  #endif
  
 -#ifndef readw
 -#define readw readw
 -static inline u16 readw(const volatile void __iomem *addr)
 +#define writeb __raw_writeb
 +#ifndef writeb_relaxed
- #define writeb_relaxed writeb
++#define writeb_relaxed writeb_relaxed
++static inline void writeb_relaxed(u8 value, volatile void __iomem *addr)
+ {
 -	u16 val;
 -
 -	__io_br();
 -	val = __le16_to_cpu(__raw_readw(addr));
 -	__io_ar();
 -	return val;
++	__raw_writeb(value, addr);
+ }
  #endif
  
 -#ifndef readl
 -#define readl readl
 -static inline u32 readl(const volatile void __iomem *addr)
 +#define writew(b,addr) __raw_writew(__cpu_to_le16(b),addr)
 +#ifndef writew_relaxed
- #define writew_relaxed writew
++#define writew_relaxed writew_relaxed
++static inline void writew_relaxed(u16 value, volatile void __iomem *addr)
+ {
 -	u32 val;
 -
 -	__io_br();
 -	val = __le32_to_cpu(__raw_readl(addr));
 -	__io_ar();
 -	return val;
++	__raw_writew(cpu_to_le16(value), addr);
+ }
  #endif
  
 -#ifdef CONFIG_64BIT
 -#ifndef readq
 -#define readq readq
 -static inline u64 readq(const volatile void __iomem *addr)
 +#define writel(b,addr) __raw_writel(__cpu_to_le32(b),addr)
 +#ifndef writel_relaxed
- #define writel_relaxed writel
++#define writel_relaxed writel_relaxed
++static inline void writel_relaxed(u32 value, volatile void __iomem *addr)
+ {
 -	u64 val;
 -
 -	__io_br();
 -	val = __le64_to_cpu(__raw_readq(addr));
 -	__io_ar();
 -	return val;
++	__raw_writel(__cpu_to_le32(value), addr);
+ }
  #endif
 -#endif /* CONFIG_64BIT */
  
 -#ifndef writeb
 -#define writeb writeb
 -static inline void writeb(u8 value, volatile void __iomem *addr)
++<<<<<<< HEAD
 +#ifdef CONFIG_64BIT
 +#ifndef __raw_readq
 +static inline u64 __raw_readq(const volatile void __iomem *addr)
  {
 -	__io_bw();
 -	__raw_writeb(value, addr);
 -	__io_aw();
 +	return *(const volatile u64 __force *) addr;
  }
  #endif
  
@@@ -135,9 -234,15 +148,17 @@@ static inline void __raw_writeq(u64 b, 
  }
  #endif
  
 -#ifdef CONFIG_64BIT
 -#ifndef writeq
 -#define writeq writeq
 -static inline void writeq(u64 value, volatile void __iomem *addr)
 +#define writeq(b, addr) __raw_writeq(__cpu_to_le64(b), addr)
 +#ifndef writeq_relaxed
 +#define writeq_relaxed writeq
++=======
++#if defined(writeq) && !defined(writeq_relaxed)
++#define writeq_relaxed writeq_relaxed
++static inline void writeq_relaxed(u64 value, volatile void __iomem *addr)
+ {
 -	__io_bw();
+ 	__raw_writeq(__cpu_to_le64(value), addr);
 -	__io_aw();
+ }
++>>>>>>> a71e7c44ffb7 (io: change writeX_relaxed() to remove barriers)
  #endif
  #endif /* CONFIG_64BIT */
  
* Unmerged path include/asm-generic/io.h
