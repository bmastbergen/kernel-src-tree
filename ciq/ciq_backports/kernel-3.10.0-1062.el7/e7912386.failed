KVM: x86: reintroduce pte_list_remove, but including mmu_spte_clear_track_bits

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Wei Yang <richard.weiyang@gmail.com>
commit e7912386ede89d2aa1f72ebb74969e48e9d5f56c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e7912386.failed

rmap_remove() removes the sptep after locating the correct rmap_head but,
in several cases, the caller has already known the correct rmap_head.

This patch introduces a new pte_list_remove(); because it is known that
the spte is present (or it would not have an rmap_head), it is safe
to remove the tracking bits without any previous check.

	Signed-off-by: Wei Yang <richard.weiyang@gmail.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit e7912386ede89d2aa1f72ebb74969e48e9d5f56c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/mmu.c
diff --cc arch/x86/kvm/mmu.c
index f625cbbdbd62,4cf43ce42959..000000000000
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@@ -5180,8 -5687,8 +5186,13 @@@ restart
  		 */
  		if (sp->role.direct &&
  			!kvm_is_reserved_pfn(pfn) &&
++<<<<<<< HEAD
 +			PageTransCompound(pfn_to_page(pfn))) {
 +			drop_spte(kvm, sptep);
++=======
+ 			PageTransCompoundMap(pfn_to_page(pfn))) {
+ 			pte_list_remove(rmap_head, sptep);
++>>>>>>> e7912386ede8 (KVM: x86: reintroduce pte_list_remove, but including mmu_spte_clear_track_bits)
  			need_tlb_flush = 1;
  			goto restart;
  		}
* Unmerged path arch/x86/kvm/mmu.c
