perf machine: Ditch find_kernel_function variants

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 107cad95ffd81afad295ed5c29d006e525f1f80f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/107cad95.failed

Since we do not have split symtabs anymore, no need to have explicit
find_kernel_function variants, use the find_kernel_symbol ones.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: https://lkml.kernel.org/n/tip-hiw2ryflju000f6wl62128it@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 107cad95ffd81afad295ed5c29d006e525f1f80f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/machine.h
#	tools/perf/util/map.h
diff --cc tools/perf/util/machine.h
index c732fc485595,388fb4741c54..000000000000
--- a/tools/perf/util/machine.h
+++ b/tools/perf/util/machine.h
@@@ -207,28 -204,12 +207,31 @@@ struct symbol *machine__find_kernel_sym
  
  static inline
  struct symbol *machine__find_kernel_symbol_by_name(struct machine *machine,
 -						   const char *name,
 +						   enum map_type type, const char *name,
  						   struct map **mapp)
  {
 -	return map_groups__find_symbol_by_name(&machine->kmaps, name, mapp);
 +	return map_groups__find_symbol_by_name(&machine->kmaps, type, name, mapp);
 +}
 +
++<<<<<<< HEAD
 +static inline
 +struct symbol *machine__find_kernel_function(struct machine *machine, u64 addr,
 +					     struct map **mapp)
 +{
 +	return machine__find_kernel_symbol(machine, MAP__FUNCTION, addr,
 +					   mapp);
  }
  
 +static inline
 +struct symbol *machine__find_kernel_function_by_name(struct machine *machine,
 +						     const char *name,
 +						     struct map **mapp)
 +{
 +	return map_groups__find_function_by_name(&machine->kmaps, name, mapp);
 +}
 +
++=======
++>>>>>>> 107cad95ffd8 (perf machine: Ditch find_kernel_function variants)
  struct map *machine__findnew_module_map(struct machine *machine, u64 start,
  					const char *filename);
  int arch__fix_module_text_start(u64 *start, const char *name);
diff --cc tools/perf/util/map.h
index d3d56f345d1b,f1afe1ab6ff7..000000000000
--- a/tools/perf/util/map.h
+++ b/tools/perf/util/map.h
@@@ -241,13 -225,6 +241,16 @@@ struct addr_map_symbol
  
  int map_groups__find_ams(struct addr_map_symbol *ams);
  
++<<<<<<< HEAD
 +static inline
 +struct symbol *map_groups__find_function_by_name(struct map_groups *mg,
 +						 const char *name, struct map **mapp)
 +{
 +	return map_groups__find_symbol_by_name(mg, MAP__FUNCTION, name, mapp);
 +}
 +
++=======
++>>>>>>> 107cad95ffd8 (perf machine: Ditch find_kernel_function variants)
  int map_groups__fixup_overlappings(struct map_groups *mg, struct map *map,
  				   FILE *fp);
  
diff --git a/tools/perf/builtin-kallsyms.c b/tools/perf/builtin-kallsyms.c
index bcfb363112d3..90d1a2305b72 100644
--- a/tools/perf/builtin-kallsyms.c
+++ b/tools/perf/builtin-kallsyms.c
@@ -27,7 +27,7 @@ static int __cmd_kallsyms(int argc, const char **argv)
 
 	for (i = 0; i < argc; ++i) {
 		struct map *map;
-		struct symbol *symbol = machine__find_kernel_function_by_name(machine, argv[i], &map);
+		struct symbol *symbol = machine__find_kernel_symbol_by_name(machine, argv[i], &map);
 
 		if (symbol == NULL) {
 			printf("%s: not found\n", argv[i]);
diff --git a/tools/perf/builtin-kmem.c b/tools/perf/builtin-kmem.c
index 2cbed8b5c8c1..a10668fe1c69 100644
--- a/tools/perf/builtin-kmem.c
+++ b/tools/perf/builtin-kmem.c
@@ -1005,7 +1005,7 @@ static void __print_slab_result(struct rb_root *root,
 		if (is_caller) {
 			addr = data->call_site;
 			if (!raw_ip)
-				sym = machine__find_kernel_function(machine, addr, &map);
+				sym = machine__find_kernel_symbol(machine, addr, &map);
 		} else
 			addr = data->ptr;
 
@@ -1069,7 +1069,7 @@ static void __print_page_alloc_result(struct perf_session *session, int n_lines)
 		char *caller = buf;
 
 		data = rb_entry(next, struct page_stat, node);
-		sym = machine__find_kernel_function(machine, data->callsite, &map);
+		sym = machine__find_kernel_symbol(machine, data->callsite, &map);
 		if (sym)
 			caller = sym->name;
 		else
@@ -1111,7 +1111,7 @@ static void __print_page_caller_result(struct perf_session *session, int n_lines
 		char *caller = buf;
 
 		data = rb_entry(next, struct page_stat, node);
-		sym = machine__find_kernel_function(machine, data->callsite, &map);
+		sym = machine__find_kernel_symbol(machine, data->callsite, &map);
 		if (sym)
 			caller = sym->name;
 		else
diff --git a/tools/perf/tests/vmlinux-kallsyms.c b/tools/perf/tests/vmlinux-kallsyms.c
index f731e8128ae8..f77defb72b93 100644
--- a/tools/perf/tests/vmlinux-kallsyms.c
+++ b/tools/perf/tests/vmlinux-kallsyms.c
@@ -117,7 +117,7 @@ int test__vmlinux_matches_kallsyms(struct test *test __maybe_unused, int subtest
 		mem_start = vmlinux_map->unmap_ip(vmlinux_map, sym->start);
 		mem_end = vmlinux_map->unmap_ip(vmlinux_map, sym->end);
 
-		first_pair = machine__find_kernel_function(&kallsyms, mem_start, NULL);
+		first_pair = machine__find_kernel_symbol(&kallsyms, mem_start, NULL);
 		pair = first_pair;
 
 		if (pair && UM(pair->start) == mem_start) {
@@ -146,7 +146,7 @@ next_pair:
 				 */
 				continue;
 			} else {
-				pair = machine__find_kernel_function_by_name(&kallsyms, sym->name, NULL);
+				pair = machine__find_kernel_symbol_by_name(&kallsyms, sym->name, NULL);
 				if (pair) {
 					if (UM(pair->start) == mem_start)
 						goto next_pair;
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index 80114c951119..58b084d77a8c 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -2338,7 +2338,7 @@ char *machine__resolve_kernel_addr(void *vmachine, unsigned long long *addrp, ch
 {
 	struct machine *machine = vmachine;
 	struct map *map;
-	struct symbol *sym = machine__find_kernel_function(machine, *addrp, &map);
+	struct symbol *sym = machine__find_kernel_symbol(machine, *addrp, &map);
 
 	if (sym == NULL)
 		return NULL;
* Unmerged path tools/perf/util/machine.h
* Unmerged path tools/perf/util/map.h
diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index 901920248046..b093da954cbd 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -111,17 +111,6 @@ void exit_probe_symbol_maps(void)
 	symbol__exit();
 }
 
-static struct symbol *__find_kernel_function_by_name(const char *name,
-						     struct map **mapp)
-{
-	return machine__find_kernel_function_by_name(host_machine, name, mapp);
-}
-
-static struct symbol *__find_kernel_function(u64 addr, struct map **mapp)
-{
-	return machine__find_kernel_function(host_machine, addr, mapp);
-}
-
 static struct ref_reloc_sym *kernel_get_ref_reloc_sym(void)
 {
 	/* kmap->ref_reloc_sym should be set if host_machine is initialized */
@@ -149,7 +138,7 @@ static int kernel_get_symbol_address_by_name(const char *name, u64 *addr,
 	if (reloc_sym && strcmp(name, reloc_sym->name) == 0)
 		*addr = (reloc) ? reloc_sym->addr : reloc_sym->unrelocated_addr;
 	else {
-		sym = __find_kernel_function_by_name(name, &map);
+		sym = machine__find_kernel_symbol_by_name(host_machine, name, &map);
 		if (!sym)
 			return -ENOENT;
 		*addr = map->unmap_ip(map, sym->start) -
@@ -2071,7 +2060,7 @@ static int find_perf_probe_point_from_map(struct probe_trace_point *tp,
 		}
 		if (addr) {
 			addr += tp->offset;
-			sym = __find_kernel_function(addr, &map);
+			sym = machine__find_kernel_symbol(host_machine, addr, &map);
 		}
 	}
 
