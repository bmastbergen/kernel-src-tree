iommu/vt-d: Enable base Intel IOMMU debugfs support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [iommu] vt-d: Enable base Intel IOMMU debugfs support (Jerry Snitselaar) [1457023]
Rebuild_FUZZ: 93.75%
commit-author Sohil Mehta <sohil.mehta@intel.com>
commit ee2636b8670b1ab2a02a65923a9bef59e9199c37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/ee2636b8.failed

Add a new config option CONFIG_INTEL_IOMMU_DEBUGFS and do the base
enabling for Intel IOMMU debugfs.

	Cc: Lu Baolu <baolu.lu@linux.intel.com>
	Cc: Fenghua Yu <fenghua.yu@intel.com>
	Cc: Ashok Raj <ashok.raj@intel.com>
	Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
Co-Developed-by: Gayatri Kammela <gayatri.kammela@intel.com>
	Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Lu Baolu <baolu.lu@linux.intel.com>
	Signed-off-by: Sohil Mehta <sohil.mehta@intel.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit ee2636b8670b1ab2a02a65923a9bef59e9199c37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/Kconfig
#	drivers/iommu/Makefile
#	include/linux/intel-iommu.h
diff --cc drivers/iommu/Kconfig
index 57de38552ecb,51ba19c8847b..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -85,6 -186,29 +85,32 @@@ config INTEL_IOMM
  	  and include PCI device scope covered by these DMA
  	  remapping devices.
  
++<<<<<<< HEAD
++=======
+ config INTEL_IOMMU_DEBUGFS
+ 	bool "Export Intel IOMMU internals in Debugfs"
+ 	depends on INTEL_IOMMU && IOMMU_DEBUGFS
+ 	help
+ 	  !!!WARNING!!!
+ 
+ 	  DO NOT ENABLE THIS OPTION UNLESS YOU REALLY KNOW WHAT YOU ARE DOING!!!
+ 
+ 	  Expose Intel IOMMU internals in Debugfs.
+ 
+ 	  This option is -NOT- intended for production environments, and should
+ 	  only be enabled for debugging Intel IOMMU.
+ 
+ config INTEL_IOMMU_SVM
+ 	bool "Support for Shared Virtual Memory with Intel IOMMU"
+ 	depends on INTEL_IOMMU && X86
+ 	select PCI_PASID
+ 	select MMU_NOTIFIER
+ 	help
+ 	  Shared Virtual Memory (SVM) provides a facility for devices
+ 	  to access DMA resources through process address space by
+ 	  means of a Process Address Space ID (PASID).
+ 
++>>>>>>> ee2636b8670b (iommu/vt-d: Enable base Intel IOMMU debugfs support)
  config INTEL_IOMMU_DEFAULT_ON
  	def_bool y
  	prompt "Enable Intel DMA Remapping Devices by default"
diff --cc drivers/iommu/Makefile
index 8c20a3a114fe,a158a68c8ea8..000000000000
--- a/drivers/iommu/Makefile
+++ b/drivers/iommu/Makefile
@@@ -1,18 -1,31 +1,25 @@@
  obj-$(CONFIG_IOMMU_API) += iommu.o
  obj-$(CONFIG_IOMMU_API) += iommu-traces.o
  obj-$(CONFIG_IOMMU_API) += iommu-sysfs.o
 -obj-$(CONFIG_IOMMU_DEBUGFS) += iommu-debugfs.o
 -obj-$(CONFIG_IOMMU_DMA) += dma-iommu.o
 -obj-$(CONFIG_IOMMU_IO_PGTABLE) += io-pgtable.o
 -obj-$(CONFIG_IOMMU_IO_PGTABLE_ARMV7S) += io-pgtable-arm-v7s.o
 -obj-$(CONFIG_IOMMU_IO_PGTABLE_LPAE) += io-pgtable-arm.o
  obj-$(CONFIG_IOMMU_IOVA) += iova.o
  obj-$(CONFIG_OF_IOMMU)	+= of_iommu.o
 -obj-$(CONFIG_MSM_IOMMU) += msm_iommu.o
 +obj-$(CONFIG_MSM_IOMMU) += msm_iommu.o msm_iommu_dev.o
  obj-$(CONFIG_AMD_IOMMU) += amd_iommu.o amd_iommu_init.o
 -obj-$(CONFIG_AMD_IOMMU_DEBUGFS) += amd_iommu_debugfs.o
  obj-$(CONFIG_AMD_IOMMU_V2) += amd_iommu_v2.o
 -obj-$(CONFIG_ARM_SMMU) += arm-smmu.o
 -obj-$(CONFIG_ARM_SMMU_V3) += arm-smmu-v3.o
  obj-$(CONFIG_DMAR_TABLE) += dmar.o
++<<<<<<< HEAD
 +obj-$(CONFIG_INTEL_IOMMU) += intel-iommu.o
++=======
+ obj-$(CONFIG_INTEL_IOMMU) += intel-iommu.o intel-pasid.o
+ obj-$(CONFIG_INTEL_IOMMU_DEBUGFS) += intel-iommu-debugfs.o
+ obj-$(CONFIG_INTEL_IOMMU_SVM) += intel-svm.o
+ obj-$(CONFIG_IPMMU_VMSA) += ipmmu-vmsa.o
++>>>>>>> ee2636b8670b (iommu/vt-d: Enable base Intel IOMMU debugfs support)
  obj-$(CONFIG_IRQ_REMAP) += intel_irq_remapping.o irq_remapping.o
 -obj-$(CONFIG_MTK_IOMMU) += mtk_iommu.o
 -obj-$(CONFIG_MTK_IOMMU_V1) += mtk_iommu_v1.o
  obj-$(CONFIG_OMAP_IOMMU) += omap-iommu.o
 +obj-$(CONFIG_OMAP_IOMMU) += omap-iommu2.o
 +obj-$(CONFIG_OMAP_IOVMM) += omap-iovmm.o
  obj-$(CONFIG_OMAP_IOMMU_DEBUG) += omap-iommu-debug.o
 -obj-$(CONFIG_ROCKCHIP_IOMMU) += rockchip-iommu.o
  obj-$(CONFIG_TEGRA_IOMMU_GART) += tegra-gart.o
  obj-$(CONFIG_TEGRA_IOMMU_SMMU) += tegra-smmu.o
  obj-$(CONFIG_EXYNOS_IOMMU) += exynos-iommu.o
diff --cc include/linux/intel-iommu.h
index 446226a5cddb,b0ae25837361..000000000000
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@@ -386,6 -581,55 +386,55 @@@ extern int qi_submit_sync(struct qi_des
  
  extern int dmar_ir_support(void);
  
++<<<<<<< HEAD
++=======
+ struct dmar_domain *get_valid_domain_for_dev(struct device *dev);
+ void *alloc_pgtable_page(int node);
+ void free_pgtable_page(void *vaddr);
+ struct intel_iommu *domain_get_iommu(struct dmar_domain *domain);
+ int for_each_device_domain(int (*fn)(struct device_domain_info *info,
+ 				     void *data), void *data);
+ 
+ #ifdef CONFIG_INTEL_IOMMU_SVM
+ int intel_svm_init(struct intel_iommu *iommu);
+ int intel_svm_exit(struct intel_iommu *iommu);
+ extern int intel_svm_enable_prq(struct intel_iommu *iommu);
+ extern int intel_svm_finish_prq(struct intel_iommu *iommu);
+ 
+ struct svm_dev_ops;
+ 
+ struct intel_svm_dev {
+ 	struct list_head list;
+ 	struct rcu_head rcu;
+ 	struct device *dev;
+ 	struct svm_dev_ops *ops;
+ 	int users;
+ 	u16 did;
+ 	u16 dev_iotlb:1;
+ 	u16 sid, qdep;
+ };
+ 
+ struct intel_svm {
+ 	struct mmu_notifier notifier;
+ 	struct mm_struct *mm;
+ 	struct intel_iommu *iommu;
+ 	int flags;
+ 	int pasid;
+ 	struct list_head devs;
+ 	struct list_head list;
+ };
+ 
+ extern int intel_iommu_enable_pasid(struct intel_iommu *iommu, struct intel_svm_dev *sdev);
+ extern struct intel_iommu *intel_svm_device_to_iommu(struct device *dev);
+ #endif
+ 
+ #ifdef CONFIG_INTEL_IOMMU_DEBUGFS
+ void intel_iommu_debugfs_init(void);
+ #else
+ static inline void intel_iommu_debugfs_init(void) {}
+ #endif /* CONFIG_INTEL_IOMMU_DEBUGFS */
+ 
++>>>>>>> ee2636b8670b (iommu/vt-d: Enable base Intel IOMMU debugfs support)
  extern const struct attribute_group *intel_iommu_groups[];
 -bool context_present(struct context_entry *context);
 -struct context_entry *iommu_context_addr(struct intel_iommu *iommu, u8 bus,
 -					 u8 devfn, int alloc);
  
  #endif
* Unmerged path drivers/iommu/Kconfig
* Unmerged path drivers/iommu/Makefile
diff --git a/drivers/iommu/intel-iommu-debugfs.c b/drivers/iommu/intel-iommu-debugfs.c
new file mode 100644
index 000000000000..33e0a6c12d92
--- /dev/null
+++ b/drivers/iommu/intel-iommu-debugfs.c
@@ -0,0 +1,20 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright Â© 2018 Intel Corporation.
+ *
+ * Authors: Gayatri Kammela <gayatri.kammela@intel.com>
+ *	    Sohil Mehta <sohil.mehta@intel.com>
+ *	    Jacob Pan <jacob.jun.pan@linux.intel.com>
+ */
+
+#include <linux/debugfs.h>
+#include <linux/dmar.h>
+#include <linux/intel-iommu.h>
+#include <linux/pci.h>
+
+#include <asm/irq_remapping.h>
+
+void __init intel_iommu_debugfs_init(void)
+{
+	debugfs_create_dir("intel", iommu_debugfs_dir);
+}
diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index f2592de41396..12fc420f1d60 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -4720,6 +4720,7 @@ int __init intel_iommu_init(void)
 	register_hotcpu_notifier(&intel_iommu_cpu_nb);
 
 	intel_iommu_enabled = 1;
+	intel_iommu_debugfs_init();
 
 	return 0;
 
* Unmerged path include/linux/intel-iommu.h
