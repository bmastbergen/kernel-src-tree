x86/speculation/mds: Add 'mitigations=' support for MDS

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [x86] speculation/mds: Add 'mitigations=' support for MDS (Waiman Long) [1709296 1690358 1690348 1690335] {CVE-2018-12126 CVE-2018-12127 CVE-2018-12130 CVE-2019-11091}
Rebuild_FUZZ: 96.23%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 5c14068f87d04adc73ba3f41c2a303d3c3d1fa12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/5c14068f.failed

Add MDS to the new 'mitigations=' cmdline option.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit 5c14068f87d04adc73ba3f41c2a303d3c3d1fa12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/kernel-parameters.txt
#	arch/x86/kernel/cpu/bugs.c
diff --cc Documentation/kernel-parameters.txt
index f6852ae416ce,18cad2b0392a..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -1989,6 -2539,40 +1989,43 @@@ bytes respectively. Such letter suffixe
  			in the "bleeding edge" mini2440 support kernel at
  			http://repo.or.cz/w/linux-2.6/mini2440.git
  
++<<<<<<< HEAD:Documentation/kernel-parameters.txt
++=======
+ 	mitigations=
+ 			[X86,PPC,S390] Control optional mitigations for CPU
+ 			vulnerabilities.  This is a set of curated,
+ 			arch-independent options, each of which is an
+ 			aggregation of existing arch-specific options.
+ 
+ 			off
+ 				Disable all optional CPU mitigations.  This
+ 				improves system performance, but it may also
+ 				expose users to several CPU vulnerabilities.
+ 				Equivalent to: nopti [X86,PPC]
+ 					       nospectre_v1 [PPC]
+ 					       nobp=0 [S390]
+ 					       nospectre_v2 [X86,PPC,S390]
+ 					       spectre_v2_user=off [X86]
+ 					       spec_store_bypass_disable=off [X86,PPC]
+ 					       l1tf=off [X86]
+ 					       mds=off [X86]
+ 
+ 			auto (default)
+ 				Mitigate all CPU vulnerabilities, but leave SMT
+ 				enabled, even if it's vulnerable.  This is for
+ 				users who don't want to be surprised by SMT
+ 				getting disabled across kernel upgrades, or who
+ 				have other ways of avoiding SMT-based attacks.
+ 				Equivalent to: (default behavior)
+ 
+ 			auto,nosmt
+ 				Mitigate all CPU vulnerabilities, disabling SMT
+ 				if needed.  This is for users who always want to
+ 				be fully mitigated, even if it means losing SMT.
+ 				Equivalent to: l1tf=flush,nosmt [X86]
+ 					       mds=full,nosmt [X86]
+ 
++>>>>>>> 5c14068f87d0 (x86/speculation/mds: Add 'mitigations=' support for MDS):Documentation/admin-guide/kernel-parameters.txt
  	mminit_loglevel=
  			[KNL] When CONFIG_DEBUG_MEMORY_INIT is set, this
  			parameter allows control of the logging verbosity for
diff --cc arch/x86/kernel/cpu/bugs.c
index 6ec1d2da76d1,667c273a66d7..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -111,32 -218,60 +111,76 @@@ void x86_amd_ssbd_enable(void
  		wrmsrl(MSR_AMD64_LS_CFG, msrval);
  }
  
 -#undef pr_fmt
 -#define pr_fmt(fmt)	"MDS: " fmt
 -
 -/* Default mitigation for MDS-affected CPUs */
 -static enum mds_mitigations mds_mitigation __ro_after_init = MDS_MITIGATION_FULL;
 -static bool mds_nosmt __ro_after_init = false;
 +/* The kernel command line selection */
 +enum spectre_v2_mitigation_cmd {
 +	SPECTRE_V2_CMD_NONE,
 +	SPECTRE_V2_CMD_FORCE,
 +	SPECTRE_V2_CMD_AUTO,
 +	SPECTRE_V2_CMD_RETPOLINE,
 +	SPECTRE_V2_CMD_RETPOLINE_IBRS_USER,
 +	SPECTRE_V2_CMD_IBRS,
 +	SPECTRE_V2_CMD_IBRS_ALWAYS,
 +};
  
 -static const char * const mds_strings[] = {
 -	[MDS_MITIGATION_OFF]	= "Vulnerable",
 -	[MDS_MITIGATION_FULL]	= "Mitigation: Clear CPU buffers",
 -	[MDS_MITIGATION_VMWERV]	= "Vulnerable: Clear CPU buffers attempted, no microcode",
++<<<<<<< HEAD
 +static const char *spectre_v2_strings[] = {
 +	[SPECTRE_V2_NONE]			= "Vulnerable",
 +	[SPECTRE_V2_RETPOLINE_MINIMAL]		= "Vulnerable: Minimal ASM retpoline",
 +	[SPECTRE_V2_RETPOLINE_NO_IBPB]		= "Vulnerable: Retpoline without IBPB",
 +	[SPECTRE_V2_RETPOLINE_SKYLAKE]		= "Vulnerable: Retpoline on Skylake+",
 +	[SPECTRE_V2_RETPOLINE_UNSAFE_MODULE]	= "Vulnerable: Retpoline with unsafe module(s)",
 +	[SPECTRE_V2_RETPOLINE]			= "Mitigation: Full retpoline",
 +	[SPECTRE_V2_RETPOLINE_IBRS_USER]	= "Mitigation: Full retpoline and IBRS (user space)",
 +	[SPECTRE_V2_IBRS]			= "Mitigation: IBRS (kernel)",
 +	[SPECTRE_V2_IBRS_ALWAYS]		= "Mitigation: IBRS (kernel and user space)",
 +	[SPECTRE_V2_IBP_DISABLED]		= "Mitigation: IBP disabled",
 +	[SPECTRE_V2_IBRS_ENHANCED]		= "Mitigation: Enhanced IBRS",
  };
  
 +enum spectre_v2_mitigation_cmd spectre_v2_cmd = SPECTRE_V2_CMD_AUTO;
++=======
+ static void __init mds_select_mitigation(void)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_MDS) || cpu_mitigations_off()) {
+ 		mds_mitigation = MDS_MITIGATION_OFF;
+ 		return;
+ 	}
+ 
+ 	if (mds_mitigation == MDS_MITIGATION_FULL) {
+ 		if (!boot_cpu_has(X86_FEATURE_MD_CLEAR))
+ 			mds_mitigation = MDS_MITIGATION_VMWERV;
+ 
+ 		static_branch_enable(&mds_user_clear);
+ 
+ 		if (!boot_cpu_has(X86_BUG_MSBDS_ONLY) &&
+ 		    (mds_nosmt || cpu_mitigations_auto_nosmt()))
+ 			cpu_smt_disable(false);
+ 	}
+ 
+ 	pr_info("%s\n", mds_strings[mds_mitigation]);
+ }
+ 
+ static int __init mds_cmdline(char *str)
+ {
+ 	if (!boot_cpu_has_bug(X86_BUG_MDS))
+ 		return 0;
+ 
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	if (!strcmp(str, "off"))
+ 		mds_mitigation = MDS_MITIGATION_OFF;
+ 	else if (!strcmp(str, "full"))
+ 		mds_mitigation = MDS_MITIGATION_FULL;
+ 	else if (!strcmp(str, "full,nosmt")) {
+ 		mds_mitigation = MDS_MITIGATION_FULL;
+ 		mds_nosmt = true;
+ 	}
+ 
+ 	return 0;
+ }
+ early_param("mds", mds_cmdline);
++>>>>>>> 5c14068f87d0 (x86/speculation/mds: Add 'mitigations=' support for MDS)
  
  #undef pr_fmt
  #define pr_fmt(fmt)     "Spectre V2 : " fmt
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path arch/x86/kernel/cpu/bugs.c
