s390/qeth: report 25Gbit link speed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [s390] qeth: report 25Gbit link speed (Hendrik Brueckner) [1640651]
Rebuild_FUZZ: 92.31%
commit-author Julian Wiedmann <jwi@linux.ibm.com>
commit 54e049c227d9968ff6a7d80aae5fec27b54d39da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/54e049c2.failed

This adds the various identifiers for 25Gbit cards, and wires them up
into sysfs and ethtool.

	Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 54e049c227d9968ff6a7d80aae5fec27b54d39da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/net/qeth_core_main.c
diff --cc drivers/s390/net/qeth_core_main.c
index 2a175c0e1f6b,4bce5ae65a55..000000000000
--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@@ -5902,20 -6169,46 +5905,26 @@@ static void qeth_set_ecmd_adv_sup(struc
  		WARN_ON_ONCE(1);
  	}
  
- 	/* fallthrough from high to low, to select all legal speeds: */
+ 	/* partially does fall through, to also select lower speeds */
  	switch (maxspeed) {
+ 	case SPEED_25000:
+ 		ethtool_link_ksettings_add_link_mode(cmd, supported,
+ 						     25000baseSR_Full);
+ 		ethtool_link_ksettings_add_link_mode(cmd, advertising,
+ 						     25000baseSR_Full);
+ 		break;
  	case SPEED_10000:
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     10000baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     10000baseT_Full);
 +		sup |= SUPPORTED_10000baseT_Full;
 +		adv |= ADVERTISED_10000baseT_Full;
  	case SPEED_1000:
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     1000baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     1000baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     1000baseT_Half);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     1000baseT_Half);
 +		sup |= SUPPORTED_1000baseT_Half | SUPPORTED_1000baseT_Full;
 +		adv |= ADVERTISED_1000baseT_Half | ADVERTISED_1000baseT_Full;
  	case SPEED_100:
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     100baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     100baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     100baseT_Half);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     100baseT_Half);
 +		sup |= SUPPORTED_100baseT_Half | SUPPORTED_100baseT_Full;
 +		adv |= ADVERTISED_100baseT_Half | ADVERTISED_100baseT_Full;
  	case SPEED_10:
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     10baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     10baseT_Full);
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     10baseT_Half);
 -		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 -						     10baseT_Half);
 +		sup |= SUPPORTED_10baseT_Half | SUPPORTED_10baseT_Full;
 +		adv |= ADVERTISED_10baseT_Half | ADVERTISED_10baseT_Full;
  		/* end fallthrough */
  		break;
  	default:
@@@ -5948,30 -6247,27 +5957,37 @@@ int qeth_core_ethtool_get_settings(stru
  	switch (link_type) {
  	case QETH_LINK_TYPE_FAST_ETH:
  	case QETH_LINK_TYPE_LANE_ETH100:
 -		cmd->base.speed = SPEED_100;
 -		cmd->base.port = PORT_TP;
 +		qeth_set_ecmd_adv_sup(ecmd, SPEED_100, PORT_TP);
 +		speed = SPEED_100;
 +		ecmd->port = PORT_TP;
  		break;
 +
  	case QETH_LINK_TYPE_GBIT_ETH:
  	case QETH_LINK_TYPE_LANE_ETH1000:
 -		cmd->base.speed = SPEED_1000;
 -		cmd->base.port = PORT_FIBRE;
 +		qeth_set_ecmd_adv_sup(ecmd, SPEED_1000, PORT_FIBRE);
 +		speed = SPEED_1000;
 +		ecmd->port = PORT_FIBRE;
  		break;
 +
  	case QETH_LINK_TYPE_10GBIT_ETH:
 -		cmd->base.speed = SPEED_10000;
 -		cmd->base.port = PORT_FIBRE;
 +		qeth_set_ecmd_adv_sup(ecmd, SPEED_10000, PORT_FIBRE);
 +		speed = SPEED_10000;
 +		ecmd->port = PORT_FIBRE;
  		break;
++<<<<<<< HEAD
 +
++=======
+ 	case QETH_LINK_TYPE_25GBIT_ETH:
+ 		cmd->base.speed = SPEED_25000;
+ 		cmd->base.port = PORT_FIBRE;
+ 		break;
++>>>>>>> 54e049c227d9 (s390/qeth: report 25Gbit link speed)
  	default:
 -		cmd->base.speed = SPEED_10;
 -		cmd->base.port = PORT_TP;
 +		qeth_set_ecmd_adv_sup(ecmd, SPEED_10, PORT_TP);
 +		speed = SPEED_10;
 +		ecmd->port = PORT_TP;
  	}
 -	qeth_set_cmd_adv_sup(cmd, cmd->base.speed, cmd->base.port);
 +	ethtool_cmd_speed_set(ecmd, speed);
  
  	/* Check if we can obtain more accurate information.	 */
  	/* If QUERY_CARD_INFO command is not supported or fails, */
@@@ -6023,19 -6318,21 +6039,22 @@@
  
  	switch (carrier_info.port_speed) {
  	case CARD_INFO_PORTS_10M:
 -		cmd->base.speed = SPEED_10;
 +		speed = SPEED_10;
  		break;
  	case CARD_INFO_PORTS_100M:
 -		cmd->base.speed = SPEED_100;
 +		speed = SPEED_100;
  		break;
  	case CARD_INFO_PORTS_1G:
 -		cmd->base.speed = SPEED_1000;
 +		speed = SPEED_1000;
  		break;
  	case CARD_INFO_PORTS_10G:
 -		cmd->base.speed = SPEED_10000;
 +		speed = SPEED_10000;
  		break;
+ 	case CARD_INFO_PORTS_25G:
+ 		cmd->base.speed = SPEED_25000;
+ 		break;
  	}
 +	ethtool_cmd_speed_set(ecmd, speed);
  
  	return 0;
  }
* Unmerged path drivers/s390/net/qeth_core_main.c
diff --git a/drivers/s390/net/qeth_core_mpc.h b/drivers/s390/net/qeth_core_mpc.h
index 5f06f9906e61..d5000cab9158 100644
--- a/drivers/s390/net/qeth_core_mpc.h
+++ b/drivers/s390/net/qeth_core_mpc.h
@@ -61,6 +61,7 @@ enum qeth_link_types {
 	QETH_LINK_TYPE_GBIT_ETH     = 0x03,
 	QETH_LINK_TYPE_OSN          = 0x04,
 	QETH_LINK_TYPE_10GBIT_ETH   = 0x10,
+	QETH_LINK_TYPE_25GBIT_ETH   = 0x12,
 	QETH_LINK_TYPE_LANE_ETH100  = 0x81,
 	QETH_LINK_TYPE_LANE_TR      = 0x82,
 	QETH_LINK_TYPE_LANE_ETH1000 = 0x83,
@@ -295,6 +296,7 @@ enum qeth_card_info_port_speed {
 	CARD_INFO_PORTS_100M		= 0x00000006,
 	CARD_INFO_PORTS_1G		= 0x00000007,
 	CARD_INFO_PORTS_10G		= 0x00000008,
+	CARD_INFO_PORTS_25G		= 0x0000000A,
 };
 
 /* (SET)DELIP(M) IPA stuff ***************************************************/
