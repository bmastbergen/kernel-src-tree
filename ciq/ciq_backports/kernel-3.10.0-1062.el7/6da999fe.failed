scsi: mpt3sas: simplify mpt3sas_scsi_issue_tm()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: simplify mpt3sas_scsi_issue_tm() (Tomas Henzl) [1513855]
Rebuild_FUZZ: 93.18%
commit-author Hannes Reinecke <hare@suse.de>
commit 6da999fe5a9285c2a78f3cf1e768abcd48d7607e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/6da999fe.failed

Move the check for outstanding commands out of the function allowing us
to simplify the overall code.

	Signed-off-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Suganath Prabu S <suganath-prabu.subramani@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 6da999fe5a9285c2a78f3cf1e768abcd48d7607e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_scsih.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_scsih.c
index 79c41385bced,e6c8dec9c7d7..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_scsih.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_scsih.c
@@@ -2820,13 -2722,7 +2809,17 @@@ mpt3sas_scsih_issue_tm(struct MPT3SAS_A
  	int_to_scsilun(lun, (struct scsi_lun *)mpi_request->LUN);
  	mpt3sas_scsih_set_tm_flag(ioc, handle);
  	init_completion(&ioc->tm_cmds.done);
++<<<<<<< HEAD
 +	if ((type == MPI2_SCSITASKMGMT_TASKTYPE_ABORT_TASK) &&
 +	    scsi_lookup &&
 +	    (scsi_lookup->msix_io < ioc->reply_queue_count))
 +		msix_task = scsi_lookup->msix_io;
 +	else
 +		msix_task = 0;
 +	mpt3sas_base_put_smid_hi_priority(ioc, smid, msix_task);
++=======
+ 	ioc->put_smid_hi_priority(ioc, smid, msix_task);
++>>>>>>> 6da999fe5a92 (scsi: mpt3sas: simplify mpt3sas_scsi_issue_tm())
  	wait_for_completion_timeout(&ioc->tm_cmds.done, timeout*HZ);
  	if (!(ioc->tm_cmds.status & MPT3_CMD_COMPLETE)) {
  		pr_err(MPT3SAS_FMT "%s: timeout\n",
@@@ -2859,35 -2755,7 +2852,39 @@@
  				    sizeof(Mpi2SCSITaskManagementRequest_t)/4);
  		}
  	}
++<<<<<<< HEAD
 +
 +	switch (type) {
 +	case MPI2_SCSITASKMGMT_TASKTYPE_ABORT_TASK:
 +		rc = SUCCESS;
 +		if (scsi_lookup && scsi_lookup->scmd == NULL)
 +			break;
 +		rc = FAILED;
 +		break;
 +
 +	case MPI2_SCSITASKMGMT_TASKTYPE_TARGET_RESET:
 +		if (_scsih_scsi_lookup_find_by_target(ioc, id, channel))
 +			rc = FAILED;
 +		else
 +			rc = SUCCESS;
 +		break;
 +	case MPI2_SCSITASKMGMT_TASKTYPE_ABRT_TASK_SET:
 +	case MPI2_SCSITASKMGMT_TASKTYPE_LOGICAL_UNIT_RESET:
 +		if (_scsih_scsi_lookup_find_by_lun(ioc, id, lun, channel))
 +			rc = FAILED;
 +		else
 +			rc = SUCCESS;
 +		break;
 +	case MPI2_SCSITASKMGMT_TASKTYPE_QUERY_TASK:
 +		rc = SUCCESS;
 +		break;
 +	default:
 +		rc = FAILED;
 +		break;
 +	}
++=======
+ 	rc = SUCCESS;
++>>>>>>> 6da999fe5a92 (scsi: mpt3sas: simplify mpt3sas_scsi_issue_tm())
  
  out:
  	mpt3sas_scsih_clear_tm_flag(ioc, handle);
@@@ -3098,10 -2968,11 +3097,18 @@@ scsih_dev_reset(struct scsi_cmnd *scmd
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	r = mpt3sas_scsih_issue_locked_tm(ioc, handle, scmd->device->channel,
 +	    scmd->device->id, scmd->device->lun,
 +	    MPI2_SCSITASKMGMT_TASKTYPE_LOGICAL_UNIT_RESET, 0, 30);
 +
++=======
+ 	r = mpt3sas_scsih_issue_locked_tm(ioc, handle, scmd->device->lun,
+ 		MPI2_SCSITASKMGMT_TASKTYPE_LOGICAL_UNIT_RESET, 0, 0, 30);
+ 	/* Check for busy commands after reset */
+ 	if (r == SUCCESS && atomic_read(&scmd->device->device_busy))
+ 		r = FAILED;
++>>>>>>> 6da999fe5a92 (scsi: mpt3sas: simplify mpt3sas_scsi_issue_tm())
   out:
  	sdev_printk(KERN_INFO, scmd->device, "device reset: %s scmd(%p)\n",
  	    ((r == SUCCESS) ? "SUCCESS" : "FAILED"), scmd);
@@@ -3160,10 -3031,11 +3167,18 @@@ scsih_target_reset(struct scsi_cmnd *sc
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	r = mpt3sas_scsih_issue_locked_tm(ioc, handle, scmd->device->channel,
 +	    scmd->device->id, 0, MPI2_SCSITASKMGMT_TASKTYPE_TARGET_RESET, 0,
 +	    30);
 +
++=======
+ 	r = mpt3sas_scsih_issue_locked_tm(ioc, handle, 0,
+ 		MPI2_SCSITASKMGMT_TASKTYPE_TARGET_RESET, 0, 0, 30);
+ 	/* Check for busy commands after reset */
+ 	if (r == SUCCESS && atomic_read(&starget->target_busy))
+ 		r = FAILED;
++>>>>>>> 6da999fe5a92 (scsi: mpt3sas: simplify mpt3sas_scsi_issue_tm())
   out:
  	starget_printk(KERN_INFO, starget, "target reset: %s scmd(%p)\n",
  	    ((r == SUCCESS) ? "SUCCESS" : "FAILED"), scmd);
diff --git a/drivers/scsi/mpt3sas/mpt3sas_base.h b/drivers/scsi/mpt3sas/mpt3sas_base.h
index d5220e9570ad..2d74626fc547 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_base.h
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.h
@@ -1405,11 +1405,9 @@ u8 mpt3sas_scsih_event_callback(struct MPT3SAS_ADAPTER *ioc, u8 msix_index,
 void mpt3sas_scsih_reset_handler(struct MPT3SAS_ADAPTER *ioc, int reset_phase);
 
 int mpt3sas_scsih_issue_tm(struct MPT3SAS_ADAPTER *ioc, u16 handle,
-	uint channel, uint id, uint lun, u8 type, u16 smid_task,
-	ulong timeout);
+	u64 lun, u8 type, u16 smid_task, u16 msix_task, ulong timeout);
 int mpt3sas_scsih_issue_locked_tm(struct MPT3SAS_ADAPTER *ioc, u16 handle,
-	uint channel, uint id, uint lun, u8 type, u16 smid_task,
-	ulong timeout);
+	u64 lun, u8 type, u16 smid_task, u16 msix_task, ulong timeout);
 
 void mpt3sas_scsih_set_tm_flag(struct MPT3SAS_ADAPTER *ioc, u16 handle);
 void mpt3sas_scsih_clear_tm_flag(struct MPT3SAS_ADAPTER *ioc, u16 handle);
diff --git a/drivers/scsi/mpt3sas/mpt3sas_ctl.c b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
index a6a5ecb79a3a..b63f4c421161 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_ctl.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
@@ -1017,8 +1017,8 @@ _ctl_do_mpt_command(struct MPT3SAS_ADAPTER *ioc, struct mpt3_ioctl_command karg,
 				le16_to_cpu(mpi_request->FunctionDependent1));
 			mpt3sas_halt_firmware(ioc);
 			mpt3sas_scsih_issue_locked_tm(ioc,
-			    le16_to_cpu(mpi_request->FunctionDependent1), 0, 0,
-			    0, MPI2_SCSITASKMGMT_TASKTYPE_TARGET_RESET, 0, 30);
+			    le16_to_cpu(mpi_request->FunctionDependent1), 0,
+			    MPI2_SCSITASKMGMT_TASKTYPE_TARGET_RESET, 0, 0, 30);
 		} else
 			mpt3sas_base_hard_reset_handler(ioc, FORCE_BIG_HAMMER);
 	}
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_scsih.c
