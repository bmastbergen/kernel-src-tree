usb: typec: add API to get typec basic port power and data config

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [usb] typec: add API to get typec basic port power and data config (Torez Smith) [1657401]
Rebuild_FUZZ: 96.00%
commit-author Li Jun <jun.li@nxp.com>
commit 9c90e02434b66f9bcfc5c9a91a808eee5b7aa21b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/9c90e024.failed

This patch adds 3 APIs to get the typec port power and data type,
and preferred power role by its name string.

	Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Li Jun <jun.li@nxp.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 9c90e02434b66f9bcfc5c9a91a808eee5b7aa21b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/typec.c
#	include/linux/usb/typec.h
diff --cc drivers/usb/typec/typec.c
index a0a95ac4685a,633105917fa6..000000000000
--- a/drivers/usb/typec/typec.c
+++ b/drivers/usb/typec/typec.c
@@@ -793,15 -796,21 +793,27 @@@ static const char * const typec_data_ro
  	[TYPEC_HOST]	= "host",
  };
  
++<<<<<<< HEAD:drivers/usb/typec/typec.c
 +static const char * const typec_port_types[] = {
 +	[TYPEC_PORT_DFP] = "source",
 +	[TYPEC_PORT_UFP] = "sink",
++=======
+ static const char * const typec_port_power_roles[] = {
+ 	[TYPEC_PORT_SRC] = "source",
+ 	[TYPEC_PORT_SNK] = "sink",
++>>>>>>> 9c90e02434b6 (usb: typec: add API to get typec basic port power and data config):drivers/usb/typec/class.c
  	[TYPEC_PORT_DRP] = "dual",
  };
  
+ static const char * const typec_port_data_roles[] = {
+ 	[TYPEC_PORT_DFP] = "host",
+ 	[TYPEC_PORT_UFP] = "device",
+ 	[TYPEC_PORT_DRD] = "dual",
+ };
+ 
  static const char * const typec_port_types_drp[] = {
 -	[TYPEC_PORT_SRC] = "dual [source] sink",
 -	[TYPEC_PORT_SNK] = "dual source [sink]",
 +	[TYPEC_PORT_DFP] = "dual [source] sink",
 +	[TYPEC_PORT_UFP] = "dual source [sink]",
  	[TYPEC_PORT_DRP] = "[dual] source sink",
  };
  
@@@ -1249,6 -1258,91 +1261,94 @@@ void typec_set_pwr_opmode(struct typec_
  }
  EXPORT_SYMBOL_GPL(typec_set_pwr_opmode);
  
++<<<<<<< HEAD:drivers/usb/typec/typec.c
++=======
+ /**
+  * typec_find_port_power_role - Get the typec port power capability
+  * @name: port power capability string
+  *
+  * This routine is used to find the typec_port_type by its string name.
+  *
+  * Returns typec_port_type if success, otherwise negative error code.
+  */
+ int typec_find_port_power_role(const char *name)
+ {
+ 	return match_string(typec_port_power_roles,
+ 			    ARRAY_SIZE(typec_port_power_roles), name);
+ }
+ EXPORT_SYMBOL_GPL(typec_find_port_power_role);
+ 
+ /**
+  * typec_find_power_role - Find the typec one specific power role
+  * @name: power role string
+  *
+  * This routine is used to find the typec_role by its string name.
+  *
+  * Returns typec_role if success, otherwise negative error code.
+  */
+ int typec_find_power_role(const char *name)
+ {
+ 	return match_string(typec_roles, ARRAY_SIZE(typec_roles), name);
+ }
+ EXPORT_SYMBOL_GPL(typec_find_power_role);
+ 
+ /**
+  * typec_find_port_data_role - Get the typec port data capability
+  * @name: port data capability string
+  *
+  * This routine is used to find the typec_port_data by its string name.
+  *
+  * Returns typec_port_data if success, otherwise negative error code.
+  */
+ int typec_find_port_data_role(const char *name)
+ {
+ 	return match_string(typec_port_data_roles,
+ 			    ARRAY_SIZE(typec_port_data_roles), name);
+ }
+ EXPORT_SYMBOL_GPL(typec_find_port_data_role);
+ 
+ /* ------------------------------------------ */
+ /* API for Multiplexer/DeMultiplexer Switches */
+ 
+ /**
+  * typec_set_orientation - Set USB Type-C cable plug orientation
+  * @port: USB Type-C Port
+  * @orientation: USB Type-C cable plug orientation
+  *
+  * Set cable plug orientation for @port.
+  */
+ int typec_set_orientation(struct typec_port *port,
+ 			  enum typec_orientation orientation)
+ {
+ 	int ret;
+ 
+ 	if (port->sw) {
+ 		ret = port->sw->set(port->sw, orientation);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	port->orientation = orientation;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(typec_set_orientation);
+ 
+ /**
+  * typec_set_mode - Set mode of operation for USB Type-C connector
+  * @port: USB Type-C port for the connector
+  * @mode: Operation mode for the connector
+  *
+  * Set mode @mode for @port. This function will configure the muxes needed to
+  * enter @mode.
+  */
+ int typec_set_mode(struct typec_port *port, int mode)
+ {
+ 	return port->mux ? port->mux->set(port->mux, mode) : 0;
+ }
+ EXPORT_SYMBOL_GPL(typec_set_mode);
+ 
++>>>>>>> 9c90e02434b6 (usb: typec: add API to get typec basic port power and data config):drivers/usb/typec/class.c
  /* --------------------------------------- */
  
  /**
diff --cc include/linux/usb/typec.h
index 0d44ce6af08f,15f8d9a50b31..000000000000
--- a/include/linux/usb/typec.h
+++ b/include/linux/usb/typec.h
@@@ -245,4 -263,11 +245,14 @@@ void typec_set_pwr_role(struct typec_po
  void typec_set_vconn_role(struct typec_port *port, enum typec_role role);
  void typec_set_pwr_opmode(struct typec_port *port, enum typec_pwr_opmode mode);
  
++<<<<<<< HEAD
++=======
+ int typec_set_orientation(struct typec_port *port,
+ 			  enum typec_orientation orientation);
+ int typec_set_mode(struct typec_port *port, int mode);
+ 
+ int typec_find_port_power_role(const char *name);
+ int typec_find_power_role(const char *name);
+ int typec_find_port_data_role(const char *name);
++>>>>>>> 9c90e02434b6 (usb: typec: add API to get typec basic port power and data config)
  #endif /* __LINUX_USB_TYPEC_H */
* Unmerged path drivers/usb/typec/typec.c
* Unmerged path include/linux/usb/typec.h
