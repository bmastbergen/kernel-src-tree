xfs: kill meaningless variable 'zero'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Eryu Guan <eguan@redhat.com>
commit 64671bafbdd984535aa382bccadd91fbe7be0e80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/64671baf.failed

In xfs_file_aio_write_checks(), variable 'zero' is there only to
satisfy xfs_zero_eof(), the result of it is ignored. Now, with
iomap_zero_range() based xfs_zero_eof(), we can safely pass NULL as
the last param of it and kill 'zero'.

	Signed-off-by: Eryu Guan <eguan@redhat.com>
	Reviewed-by: Carlos Maiolino <cmaiolino@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 64671bafbdd984535aa382bccadd91fbe7be0e80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_file.c
diff --cc fs/xfs/xfs_file.c
index 374d446488ef,261d83f1db76..000000000000
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@@ -564,16 -375,15 +564,22 @@@ restart
  	 * XFS_IOLOCK_EXCL so we are guaranteed to see the latest EOF value
  	 * and hence be able to correctly determine if we need to run zeroing.
  	 */
++<<<<<<< HEAD
 +	spin_lock_irqsave(&ip->i_size_lock, flags);
 +	if (*pos > i_size_read(inode)) {
 +		bool	zero = false;
 +
 +		spin_unlock_irqrestore(&ip->i_size_lock, flags);
++=======
+ 	spin_lock(&ip->i_flags_lock);
+ 	if (iocb->ki_pos > i_size_read(inode)) {
+ 		spin_unlock(&ip->i_flags_lock);
++>>>>>>> 64671bafbdd9 (xfs: kill meaningless variable 'zero')
  		if (!drained_dio) {
  			if (*iolock == XFS_IOLOCK_SHARED) {
 -				xfs_iunlock(ip, *iolock);
 +				xfs_rw_iunlock(ip, *iolock);
  				*iolock = XFS_IOLOCK_EXCL;
 -				xfs_ilock(ip, *iolock);
 -				iov_iter_reexpand(from, count);
 +				xfs_rw_ilock(ip, *iolock);
  			}
  			/*
  			 * We now have an IO submission barrier in place, but
@@@ -587,7 -397,7 +593,11 @@@
  			drained_dio = true;
  			goto restart;
  		}
++<<<<<<< HEAD
 +		error = xfs_zero_eof(ip, *pos, i_size_read(inode), &zero);
++=======
+ 		error = xfs_zero_eof(ip, iocb->ki_pos, i_size_read(inode), NULL);
++>>>>>>> 64671bafbdd9 (xfs: kill meaningless variable 'zero')
  		if (error)
  			return error;
  	} else
* Unmerged path fs/xfs/xfs_file.c
