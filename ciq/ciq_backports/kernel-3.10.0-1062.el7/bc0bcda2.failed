perf stat: Pass 'evlist' argument to print functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit bc0bcda201e87d62f0922fa664376355b0fc77ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bc0bcda2.failed

Add 'evlist' argument to print functions to get rid of the global
'evsel_list' variable dependency.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20180830063252.23729-26-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit bc0bcda201e87d62f0922fa664376355b0fc77ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
diff --cc tools/perf/builtin-stat.c
index a3a835604d08,46181ac492c5..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -1347,9 -1221,12 +1347,15 @@@ static void aggr_cb(struct perf_evsel *
  	}
  }
  
++<<<<<<< HEAD
 +static void print_aggr(char *prefix)
++=======
+ static void print_aggr(struct perf_stat_config *config,
+ 		       struct perf_evlist *evlist,
+ 		       char *prefix)
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  {
 -	bool metric_only = config->metric_only;
 -	FILE *output = config->output;
 +	FILE *output = stat_config.output;
  	struct perf_evsel *counter;
  	int s, id, nr;
  	double uval;
@@@ -1504,7 -1449,9 +1510,13 @@@ static void print_counter(struct perf_e
  	}
  }
  
++<<<<<<< HEAD
 +static void print_no_aggr_metric(char *prefix)
++=======
+ static void print_no_aggr_metric(struct perf_stat_config *config,
+ 				 struct perf_evlist *evlist,
+ 				 char *prefix)
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  {
  	int cpu;
  	int nrcpus = 0;
@@@ -1517,8 -1464,8 +1529,13 @@@
  		bool first = true;
  
  		if (prefix)
++<<<<<<< HEAD
 +			fputs(prefix, stat_config.output);
 +		evlist__for_each_entry(evsel_list, counter) {
++=======
+ 			fputs(prefix, config->output);
+ 		evlist__for_each_entry(evlist, counter) {
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  			if (is_duration_time(counter))
  				continue;
  			if (first) {
@@@ -1552,7 -1500,9 +1569,13 @@@ static const char *aggr_header_csv[] = 
  	[AGGR_GLOBAL] 	=	""
  };
  
++<<<<<<< HEAD
 +static void print_metric_headers(const char *prefix, bool no_indent)
++=======
+ static void print_metric_headers(struct perf_stat_config *config,
+ 				 struct perf_evlist *evlist,
+ 				 const char *prefix, bool no_indent)
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  {
  	struct perf_stat_output_ctx out;
  	struct perf_evsel *counter;
@@@ -1583,26 -1532,31 +1606,32 @@@
  		out.new_line = new_line_metric;
  		out.force_header = true;
  		os.evsel = counter;
 -		perf_stat__print_shadow_stats(config, counter, 0,
 +		perf_stat__print_shadow_stats(counter, 0,
  					      0,
  					      &out,
 -					      &metric_events,
 -					      &rt_stat);
 +					      &metric_events);
  	}
 -	fputc('\n', config->output);
 +	fputc('\n', stat_config.output);
  }
  
++<<<<<<< HEAD
 +static void print_interval(char *prefix, struct timespec *ts)
++=======
+ static void print_interval(struct perf_stat_config *config,
+ 			   struct perf_evlist *evlist,
+ 			   char *prefix, struct timespec *ts)
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  {
 -	bool metric_only = config->metric_only;
 -	unsigned int unit_width = config->unit_width;
 -	FILE *output = config->output;
 +	FILE *output = stat_config.output;
  	static int num_print_interval;
  
 -	if (config->interval_clear)
 +	if (interval_clear)
  		puts(CONSOLE_CLEAR);
  
 -	sprintf(prefix, "%6lu.%09lu%s", ts->tv_sec, ts->tv_nsec, config->csv_sep);
 +	sprintf(prefix, "%6lu.%09lu%s", ts->tv_sec, ts->tv_nsec, csv_sep);
  
 -	if ((num_print_interval == 0 && !config->csv_output) || config->interval_clear) {
 -		switch (config->aggr_mode) {
 +	if ((num_print_interval == 0 && !csv_output) || interval_clear) {
 +		switch (stat_config.aggr_mode) {
  		case AGGR_SOCKET:
  			fprintf(output, "#           time socket cpus");
  			if (!metric_only)
@@@ -1633,8 -1587,8 +1662,13 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	if ((num_print_interval == 0 || interval_clear) && metric_only)
 +		print_metric_headers(" ", true);
++=======
+ 	if ((num_print_interval == 0 || config->interval_clear) && metric_only)
+ 		print_metric_headers(config, evlist, " ", true);
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  	if (++num_print_interval == 25)
  		num_print_interval = 0;
  }
@@@ -1773,15 -1731,15 +1807,23 @@@ perf_evlist__print_counters(struct perf
  	char buf[64], *prefix = NULL;
  
  	if (interval)
++<<<<<<< HEAD
 +		print_interval(prefix = buf, ts);
++=======
+ 		print_interval(config, evlist, prefix = buf, ts);
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  	else
 -		print_header(config, _target, argc, argv);
 +		print_header(argc, argv);
  
  	if (metric_only) {
  		static int num_print_iv;
  
  		if (num_print_iv == 0 && !interval)
++<<<<<<< HEAD
 +			print_metric_headers(prefix, false);
++=======
+ 			print_metric_headers(config, evlist, prefix, false);
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  		if (num_print_iv++ == 25)
  			num_print_iv = 0;
  		if (config->aggr_mode == AGGR_GLOBAL && prefix)
@@@ -1791,7 -1749,7 +1833,11 @@@
  	switch (config->aggr_mode) {
  	case AGGR_CORE:
  	case AGGR_SOCKET:
++<<<<<<< HEAD
 +		print_aggr(prefix);
++=======
+ 		print_aggr(config, evlist, prefix);
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  		break;
  	case AGGR_THREAD:
  		evlist__for_each_entry(evlist, counter) {
@@@ -1811,7 -1769,7 +1857,11 @@@
  		break;
  	case AGGR_NONE:
  		if (metric_only)
++<<<<<<< HEAD
 +			print_no_aggr_metric(prefix);
++=======
+ 			print_no_aggr_metric(config, evlist, prefix);
++>>>>>>> bc0bcda201e8 (perf stat: Pass 'evlist' argument to print functions)
  		else {
  			evlist__for_each_entry(evlist, counter) {
  				if (is_duration_time(counter))
* Unmerged path tools/perf/builtin-stat.c
