ext4: avoid arithemetic overflow that can trigger a BUG

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit bcd8e91f98c156f4b1ebcfacae675f9cfd962441
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/bcd8e91f.failed

A maliciously crafted file system can cause an overflow when the
results of a 64-bit calculation is stored into a 32-bit length
parameter.

https://bugzilla.kernel.org/show_bug.cgi?id=200623

	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Reported-by: Wen Xu <wen.xu@gatech.edu>
	Cc: stable@vger.kernel.org
(cherry picked from commit bcd8e91f98c156f4b1ebcfacae675f9cfd962441)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 30b44b54cee7,694f31364206..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -3090,8 -3417,25 +3089,30 @@@ static int ext4_iomap_begin(struct inod
  	bool delalloc = false;
  	int ret;
  
++<<<<<<< HEAD
 +	if (WARN_ON_ONCE(ext4_has_inline_data(inode)))
 +		return -ERANGE;
++=======
+ 	if ((offset >> blkbits) > EXT4_MAX_LOGICAL_BLOCK)
+ 		return -EINVAL;
+ 	first_block = offset >> blkbits;
+ 	last_block = min_t(loff_t, (offset + length - 1) >> blkbits,
+ 			   EXT4_MAX_LOGICAL_BLOCK);
+ 
+ 	if (flags & IOMAP_REPORT) {
+ 		if (ext4_has_inline_data(inode)) {
+ 			ret = ext4_inline_data_iomap(inode, iomap);
+ 			if (ret != -EAGAIN) {
+ 				if (ret == 0 && offset >= iomap->length)
+ 					ret = -ENOENT;
+ 				return ret;
+ 			}
+ 		}
+ 	} else {
+ 		if (WARN_ON_ONCE(ext4_has_inline_data(inode)))
+ 			return -ERANGE;
+ 	}
++>>>>>>> bcd8e91f98c1 (ext4: avoid arithemetic overflow that can trigger a BUG)
  
  	map.m_lblk = first_block;
  	map.m_len = last_block - first_block + 1;
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 7d97ec136014..e49442fa8931 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -626,6 +626,9 @@ enum {
 /* Max physical block we can address w/o extents */
 #define EXT4_MAX_BLOCK_FILE_PHYS	0xFFFFFFFF
 
+/* Max logical block we can support */
+#define EXT4_MAX_LOGICAL_BLOCK		0xFFFFFFFF
+
 /*
  * Structure of an inode on the disk
  */
* Unmerged path fs/ext4/inode.c
