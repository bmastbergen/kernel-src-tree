drm/virtio: do NOT reuse resource ids

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Gerd Hoffmann <kraxel@redhat.com>
commit 16065fcdd19ddb9e093192914ac863884f308766
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/16065fcd.failed

Bisected guest kernel changes crashing qemu.  Landed at
"6c1cd97bda drm/virtio: fix resource id handling".  Looked again, and
noticed we where not only leaking *some* ids, but *all* ids.  The old
code never ever called virtio_gpu_resource_id_put().

So, commit 6c1cd97bda effectively makes the linux kernel starting
re-using IDs after releasing them, and apparently virglrenderer can't
deal with that.  Oops.

This patch puts a temporary stopgap into place for the 5.0 release.

	Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
	Reviewed-by: Dave Airlie <airlied@redhat.com>
	Signed-off-by: Dave Airlie <airlied@redhat.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190208140409.15280-1-kraxel@redhat.com
(cherry picked from commit 16065fcdd19ddb9e093192914ac863884f308766)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/virtio/virtgpu_object.c
diff --cc drivers/gpu/drm/virtio/virtgpu_object.c
index 9f2f470efd9b,e7e946035027..000000000000
--- a/drivers/gpu/drm/virtio/virtgpu_object.c
+++ b/drivers/gpu/drm/virtio/virtgpu_object.c
@@@ -25,6 -25,36 +25,39 @@@
  
  #include "virtgpu_drv.h"
  
++<<<<<<< HEAD
++=======
+ static int virtio_gpu_resource_id_get(struct virtio_gpu_device *vgdev,
+ 				       uint32_t *resid)
+ {
+ #if 0
+ 	int handle = ida_alloc(&vgdev->resource_ida, GFP_KERNEL);
+ 
+ 	if (handle < 0)
+ 		return handle;
+ #else
+ 	static int handle;
+ 
+ 	/*
+ 	 * FIXME: dirty hack to avoid re-using IDs, virglrenderer
+ 	 * can't deal with that.  Needs fixing in virglrenderer, also
+ 	 * should figure a better way to handle that in the guest.
+ 	 */
+ 	handle++;
+ #endif
+ 
+ 	*resid = handle + 1;
+ 	return 0;
+ }
+ 
+ static void virtio_gpu_resource_id_put(struct virtio_gpu_device *vgdev, uint32_t id)
+ {
+ #if 0
+ 	ida_free(&vgdev->resource_ida, id - 1);
+ #endif
+ }
+ 
++>>>>>>> 16065fcdd19d (drm/virtio: do NOT reuse resource ids)
  static void virtio_gpu_ttm_bo_destroy(struct ttm_buffer_object *tbo)
  {
  	struct virtio_gpu_object *bo;
* Unmerged path drivers/gpu/drm/virtio/virtgpu_object.c
