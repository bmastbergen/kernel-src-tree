ALSA: hda/ca0132: constify parameter table for effects

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Takashi Sakamoto <o-takashi@sakamocchi.jp>
commit 862154bbd7d7f9c70eabd0e72b00a39673df71e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/862154bb.failed

This module has a table for parameters of each effects. This table is
read-only and can have 'const' qualifier.

This commit adds this optimization.

	Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 862154bbd7d7f9c70eabd0e72b00a39673df71e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,292e2c592c17..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -477,6 -511,161 +477,164 @@@ static const struct ct_voicefx_preset c
  	}
  };
  
++<<<<<<< HEAD
++=======
+ /* ca0132 EQ presets, taken from Windows Sound Blaster Z Driver */
+ 
+ #define EQ_PRESET_MAX_PARAM_COUNT 11
+ 
+ struct ct_eq {
+ 	char *name;
+ 	hda_nid_t nid;
+ 	int mid;
+ 	int reqs[EQ_PRESET_MAX_PARAM_COUNT]; /*effect module request*/
+ };
+ 
+ struct ct_eq_preset {
+ 	char *name; /*preset name*/
+ 	unsigned int vals[EQ_PRESET_MAX_PARAM_COUNT];
+ };
+ 
+ static const struct ct_eq ca0132_alt_eq_enum = {
+ 	.name = "FX: Equalizer Preset Switch",
+ 	.nid = EQ_PRESET_ENUM,
+ 	.mid = 0x96,
+ 	.reqs = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}
+ };
+ 
+ 
+ static const struct ct_eq_preset ca0132_alt_eq_presets[] = {
+ 	{ .name = "Flat",
+ 	 .vals = { 0x00000000, 0x00000000, 0x00000000,
+ 		   0x00000000, 0x00000000, 0x00000000,
+ 		   0x00000000, 0x00000000, 0x00000000,
+ 		   0x00000000, 0x00000000	     }
+ 	},
+ 	{ .name = "Acoustic",
+ 	 .vals = { 0x00000000, 0x00000000, 0x3F8CCCCD,
+ 		   0x40000000, 0x00000000, 0x00000000,
+ 		   0x00000000, 0x00000000, 0x40000000,
+ 		   0x40000000, 0x40000000	     }
+ 	},
+ 	{ .name = "Classical",
+ 	 .vals = { 0x00000000, 0x00000000, 0x40C00000,
+ 		   0x40C00000, 0x40466666, 0x00000000,
+ 		   0x00000000, 0x00000000, 0x00000000,
+ 		   0x40466666, 0x40466666	     }
+ 	},
+ 	{ .name = "Country",
+ 	 .vals = { 0x00000000, 0xBF99999A, 0x00000000,
+ 		   0x3FA66666, 0x3FA66666, 0x3F8CCCCD,
+ 		   0x00000000, 0x00000000, 0x40000000,
+ 		   0x40466666, 0x40800000	     }
+ 	},
+ 	{ .name = "Dance",
+ 	 .vals = { 0x00000000, 0xBF99999A, 0x40000000,
+ 		   0x40466666, 0x40866666, 0xBF99999A,
+ 		   0xBF99999A, 0x00000000, 0x00000000,
+ 		   0x40800000, 0x40800000	     }
+ 	},
+ 	{ .name = "Jazz",
+ 	 .vals = { 0x00000000, 0x00000000, 0x00000000,
+ 		   0x3F8CCCCD, 0x40800000, 0x40800000,
+ 		   0x40800000, 0x00000000, 0x3F8CCCCD,
+ 		   0x40466666, 0x40466666	     }
+ 	},
+ 	{ .name = "New Age",
+ 	 .vals = { 0x00000000, 0x00000000, 0x40000000,
+ 		   0x40000000, 0x00000000, 0x00000000,
+ 		   0x00000000, 0x3F8CCCCD, 0x40000000,
+ 		   0x40000000, 0x40000000	     }
+ 	},
+ 	{ .name = "Pop",
+ 	 .vals = { 0x00000000, 0xBFCCCCCD, 0x00000000,
+ 		   0x40000000, 0x40000000, 0x00000000,
+ 		   0xBF99999A, 0xBF99999A, 0x00000000,
+ 		   0x40466666, 0x40C00000	     }
+ 	},
+ 	{ .name = "Rock",
+ 	 .vals = { 0x00000000, 0xBF99999A, 0xBF99999A,
+ 		   0x3F8CCCCD, 0x40000000, 0xBF99999A,
+ 		   0xBF99999A, 0x00000000, 0x00000000,
+ 		   0x40800000, 0x40800000	     }
+ 	},
+ 	{ .name = "Vocal",
+ 	 .vals = { 0x00000000, 0xC0000000, 0xBF99999A,
+ 		   0xBF99999A, 0x00000000, 0x40466666,
+ 		   0x40800000, 0x40466666, 0x00000000,
+ 		   0x00000000, 0x3F8CCCCD	     }
+ 	}
+ };
+ 
+ /* DSP command sequences for ca0132_alt_select_out */
+ #define ALT_OUT_SET_MAX_COMMANDS 9 /* Max number of commands in sequence */
+ struct ca0132_alt_out_set {
+ 	char *name; /*preset name*/
+ 	unsigned char commands;
+ 	unsigned int mids[ALT_OUT_SET_MAX_COMMANDS];
+ 	unsigned int reqs[ALT_OUT_SET_MAX_COMMANDS];
+ 	unsigned int vals[ALT_OUT_SET_MAX_COMMANDS];
+ };
+ 
+ static const struct ca0132_alt_out_set alt_out_presets[] = {
+ 	{ .name = "Line Out",
+ 	  .commands = 7,
+ 	  .mids = { 0x96, 0x96, 0x96, 0x8F,
+ 		    0x96, 0x96, 0x96 },
+ 	  .reqs = { 0x19, 0x17, 0x18, 0x01,
+ 		    0x1F, 0x15, 0x3A },
+ 	  .vals = { 0x3F000000, 0x42A00000, 0x00000000,
+ 		    0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000 }
+ 	},
+ 	{ .name = "Headphone",
+ 	  .commands = 7,
+ 	  .mids = { 0x96, 0x96, 0x96, 0x8F,
+ 		    0x96, 0x96, 0x96 },
+ 	  .reqs = { 0x19, 0x17, 0x18, 0x01,
+ 		    0x1F, 0x15, 0x3A },
+ 	  .vals = { 0x3F000000, 0x42A00000, 0x00000000,
+ 		    0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000 }
+ 	},
+ 	{ .name = "Surround",
+ 	  .commands = 8,
+ 	  .mids = { 0x96, 0x8F, 0x96, 0x96,
+ 		    0x96, 0x96, 0x96, 0x96 },
+ 	  .reqs = { 0x18, 0x01, 0x1F, 0x15,
+ 		    0x3A, 0x1A, 0x1B, 0x1C },
+ 	  .vals = { 0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000, 0x00000000, 0x00000000,
+ 		    0x00000000, 0x00000000 }
+ 	}
+ };
+ 
+ /*
+  * DSP volume setting structs. Req 1 is left volume, req 2 is right volume,
+  * and I don't know what the third req is, but it's always zero. I assume it's
+  * some sort of update or set command to tell the DSP there's new volume info.
+  */
+ #define DSP_VOL_OUT 0
+ #define DSP_VOL_IN  1
+ 
+ struct ct_dsp_volume_ctl {
+ 	hda_nid_t vnid;
+ 	int mid; /* module ID*/
+ 	unsigned int reqs[3]; /* scp req ID */
+ };
+ 
+ static const struct ct_dsp_volume_ctl ca0132_alt_vol_ctls[] = {
+ 	{ .vnid = VNID_SPK,
+ 	  .mid = 0x32,
+ 	  .reqs = {3, 4, 2}
+ 	},
+ 	{ .vnid = VNID_MIC,
+ 	  .mid = 0x37,
+ 	  .reqs = {2, 3, 1}
+ 	}
+ };
+ 
++>>>>>>> 862154bbd7d7 (ALSA: hda/ca0132: constify parameter table for effects)
  enum hda_cmd_vendor_io {
  	/* for DspIO node */
  	VENDOR_DSPIO_SCP_WRITE_DATA_LOW      = 0x000,
* Unmerged path sound/pci/hda/patch_ca0132.c
