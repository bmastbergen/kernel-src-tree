cputopology.txt: standardize document format

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Mauro Carvalho Chehab <mchehab@s-opensource.com>
commit e8cb6f1edc57e5c729ce4e37a54a5f84fac0c6a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e8cb6f1e.failed

Each text file under Documentation follows a different
format. Some doesn't even have titles!

Change its representation to follow the adopted standard,
using ReST markups for it to be parseable by Sphinx:

- Add a title for the document;
- mark literals;
- use table markup for existing table.

	Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
	Signed-off-by: Jonathan Corbet <corbet@lwn.net>
(cherry picked from commit e8cb6f1edc57e5c729ce4e37a54a5f84fac0c6a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/cputopology.txt
diff --cc Documentation/cputopology.txt
index 97b985b50ce7,c6e7e9196a8b..000000000000
--- a/Documentation/cputopology.txt
+++ b/Documentation/cputopology.txt
@@@ -1,6 -1,9 +1,9 @@@
+ ===========================================
+ How CPU topology info is exported via sysfs
+ ===========================================
  
  Export CPU topology info via sysfs. Items (attributes) are similar
 -to /proc/cpuinfo output of some architectures:
 +to /proc/cpuinfo.
  
  1) /sys/devices/system/cpu/cpuX/topology/physical_package_id:
  
@@@ -41,31 -54,54 +44,40 @@@
  	internal kernel map of cpuX's hardware threads within the same
  	book_id.
  
 -10) /sys/devices/system/cpu/cpuX/topology/book_siblings_list:
 -
 -	human-readable list of cpuX's hardware threads within the same
 -	book_id.
 -
 -11) /sys/devices/system/cpu/cpuX/topology/drawer_siblings:
 -
 -	internal kernel map of cpuX's hardware threads within the same
 -	drawer_id.
 -
 -12) /sys/devices/system/cpu/cpuX/topology/drawer_siblings_list:
 -
 -	human-readable list of cpuX's hardware threads within the same
 -	drawer_id.
 -
  To implement it in an architecture-neutral way, a new source file,
 -drivers/base/topology.c, is to export the 6 to 12 attributes. The book
 -and drawer related sysfs files will only be created if CONFIG_SCHED_BOOK
 -and CONFIG_SCHED_DRAWER are selected.
 -
 -CONFIG_SCHED_BOOK and CONFIG_DRAWER are currently only used on s390, where
 -they reflect the cpu and cache hierarchy.
 +drivers/base/topology.c, is to export the 4 or 6 attributes. The two book
 +related sysfs files will only be created if CONFIG_SCHED_BOOK is selected.
  
  For an architecture to support this feature, it must define some of
- these macros in include/asm-XXX/topology.h:
- #define topology_physical_package_id(cpu)
- #define topology_core_id(cpu)
- #define topology_book_id(cpu)
- #define topology_drawer_id(cpu)
- #define topology_sibling_cpumask(cpu)
- #define topology_core_cpumask(cpu)
- #define topology_book_cpumask(cpu)
- #define topology_drawer_cpumask(cpu)
+ these macros in include/asm-XXX/topology.h::
  
++<<<<<<< HEAD
 +The type of **_id is int.
 +The type of siblings is (const) struct cpumask *.
++=======
+ 	#define topology_physical_package_id(cpu)
+ 	#define topology_core_id(cpu)
+ 	#define topology_book_id(cpu)
+ 	#define topology_drawer_id(cpu)
+ 	#define topology_sibling_cpumask(cpu)
+ 	#define topology_core_cpumask(cpu)
+ 	#define topology_book_cpumask(cpu)
+ 	#define topology_drawer_cpumask(cpu)
+ 
+ The type of ``**_id macros`` is int.
+ The type of ``**_cpumask macros`` is ``(const) struct cpumask *``. The latter
+ correspond with appropriate ``**_siblings`` sysfs attributes (except for
+ topology_sibling_cpumask() which corresponds with thread_siblings).
++>>>>>>> e8cb6f1edc57 (cputopology.txt: standardize document format)
  
  To be consistent on all architectures, include/linux/topology.h
  provides default definitions for any of the above macros that are
  not defined by include/asm-XXX/topology.h:
+ 
  1) physical_package_id: -1
  2) core_id: 0
 -3) sibling_cpumask: just the given CPU
 -4) core_cpumask: just the given CPU
 +3) thread_siblings: just the given CPU
 +4) core_siblings: just the given CPU
  
  For architectures that don't support books (CONFIG_SCHED_BOOK) there are no
  default definitions for topology_book_id() and topology_book_cpumask().
* Unmerged path Documentation/cputopology.txt
