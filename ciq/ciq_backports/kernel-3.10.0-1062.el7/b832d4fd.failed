net/mlx5e: Reuse fold sw stats in representors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Reuse fold sw stats in representors (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 95.45%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit b832d4fdf105b5464d786e321e3c9e012e67cdfb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/b832d4fd.failed

Representors software stats are basic, this patch is reusing the
mlx5e_fold_sw_stats in representors, which sums up the basic stats64 for a
mlx5e netdevice.

Fixes: 8bfaf07f7806 ("net/mlx5e: Present SW stats when state is not opened")
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit b832d4fdf105b5464d786e321e3c9e012e67cdfb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 4a9c2819d01c,6dd74ef69389..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -841,19 -789,24 +841,24 @@@ bool mlx5e_post_rx_wqes(struct mlx5e_r
  bool mlx5e_post_rx_mpwqes(struct mlx5e_rq *rq);
  void mlx5e_dealloc_rx_wqe(struct mlx5e_rq *rq, u16 ix);
  void mlx5e_dealloc_rx_mpwqe(struct mlx5e_rq *rq, u16 ix);
 -struct sk_buff *
 -mlx5e_skb_from_cqe_mpwrq_linear(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi,
 -				u16 cqe_bcnt, u32 head_offset, u32 page_idx);
 -struct sk_buff *
 -mlx5e_skb_from_cqe_mpwrq_nonlinear(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi,
 -				   u16 cqe_bcnt, u32 head_offset, u32 page_idx);
 -struct sk_buff *
 -mlx5e_skb_from_cqe_linear(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 -			  struct mlx5e_wqe_frag_info *wi, u32 cqe_bcnt);
 -struct sk_buff *
 -mlx5e_skb_from_cqe_nonlinear(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 -			     struct mlx5e_wqe_frag_info *wi, u32 cqe_bcnt);
 +void mlx5e_free_rx_mpwqe(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi);
 +
 +u8 mlx5e_mpwqe_get_log_stride_size(struct mlx5_core_dev *mdev,
 +				   struct mlx5e_params *params);
 +u8 mlx5e_mpwqe_get_log_num_strides(struct mlx5_core_dev *mdev,
 +				   struct mlx5e_params *params);
  
  void mlx5e_update_stats(struct mlx5e_priv *priv);
++<<<<<<< HEAD
++=======
+ void mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats);
+ void mlx5e_fold_sw_stats64(struct mlx5e_priv *priv, struct rtnl_link_stats64 *s);
++>>>>>>> b832d4fdf105 (net/mlx5e: Reuse fold sw stats in representors)
  
 +int mlx5e_create_flow_steering(struct mlx5e_priv *priv);
 +void mlx5e_destroy_flow_steering(struct mlx5e_priv *priv);
  void mlx5e_init_l2_addr(struct mlx5e_priv *priv);
 +void mlx5e_destroy_flow_table(struct mlx5e_flow_table *ft);
  int mlx5e_self_test_num(struct mlx5e_priv *priv);
  void mlx5e_self_test(struct net_device *ndev, struct ethtool_test *etest,
  		     u64 *buf);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 48dde39aa588,17b6babbed8a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3064,7 -3521,29 +3064,33 @@@ static int mlx5e_setup_tc(struct net_de
  	}
  }
  
++<<<<<<< HEAD
 +static void
++=======
+ void mlx5e_fold_sw_stats64(struct mlx5e_priv *priv, struct rtnl_link_stats64 *s)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < mlx5e_get_netdev_max_channels(priv->netdev); i++) {
+ 		struct mlx5e_channel_stats *channel_stats = &priv->channel_stats[i];
+ 		struct mlx5e_rq_stats *rq_stats = &channel_stats->rq;
+ 		int j;
+ 
+ 		s->rx_packets   += rq_stats->packets;
+ 		s->rx_bytes     += rq_stats->bytes;
+ 
+ 		for (j = 0; j < priv->max_opened_tc; j++) {
+ 			struct mlx5e_sq_stats *sq_stats = &channel_stats->sq[j];
+ 
+ 			s->tx_packets    += sq_stats->packets;
+ 			s->tx_bytes      += sq_stats->bytes;
+ 			s->tx_dropped    += sq_stats->dropped;
+ 		}
+ 	}
+ }
+ 
+ void
++>>>>>>> b832d4fdf105 (net/mlx5e: Reuse fold sw stats in representors)
  mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
  {
  	struct mlx5e_priv *priv = netdev_priv(dev);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index f72c1fb5c81b,edb34b397c53..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -136,33 -136,44 +136,24 @@@ static void mlx5e_rep_update_hw_counter
  static void mlx5e_rep_update_sw_counters(struct mlx5e_priv *priv)
  {
  	struct mlx5e_sw_stats *s = &priv->stats.sw;
- 	int i, j;
+ 	struct rtnl_link_stats64 stats64 = {};
  
  	memset(s, 0, sizeof(*s));
- 	for (i = 0; i < mlx5e_get_netdev_max_channels(priv->netdev); i++) {
- 		struct mlx5e_channel_stats *channel_stats =
- 			&priv->channel_stats[i];
- 		struct mlx5e_rq_stats *rq_stats = &channel_stats->rq;
- 
- 		s->rx_packets	+= rq_stats->packets;
- 		s->rx_bytes	+= rq_stats->bytes;
- 
- 		for (j = 0; j < priv->max_opened_tc; j++) {
- 			struct mlx5e_sq_stats *sq_stats = &channel_stats->sq[j];
+ 	mlx5e_fold_sw_stats64(priv, &stats64);
  
- 			s->tx_packets		+= sq_stats->packets;
- 			s->tx_bytes		+= sq_stats->bytes;
- 			s->tx_queue_dropped	+= sq_stats->dropped;
- 		}
- 	}
+ 	s->rx_packets = stats64.rx_packets;
+ 	s->rx_bytes   = stats64.rx_bytes;
+ 	s->tx_packets = stats64.tx_packets;
+ 	s->tx_bytes   = stats64.tx_bytes;
+ 	s->tx_queue_dropped = stats64.tx_dropped;
  }
  
 +static void mlx5e_rep_update_stats(struct mlx5e_priv *priv)
 +{
 +	mlx5e_rep_update_sw_counters(priv);
 +	mlx5e_rep_update_hw_counters(priv);
 +}
 +
  static void mlx5e_rep_get_ethtool_stats(struct net_device *dev,
  					struct ethtool_stats *stats, u64 *data)
  {
@@@ -1043,15 -1217,8 +1034,19 @@@ mlx5e_get_sw_stats64(const struct net_d
  		     struct rtnl_link_stats64 *stats)
  {
  	struct mlx5e_priv *priv = netdev_priv(dev);
++<<<<<<< HEAD
 +	struct mlx5e_sw_stats *sstats = &priv->stats.sw;
 +
 +	stats->rx_packets = sstats->rx_packets;
 +	stats->rx_bytes   = sstats->rx_bytes;
 +	stats->tx_packets = sstats->tx_packets;
 +	stats->tx_bytes   = sstats->tx_bytes;
 +
 +	stats->tx_dropped = sstats->tx_queue_dropped;
++=======
++>>>>>>> b832d4fdf105 (net/mlx5e: Reuse fold sw stats in representors)
  
+ 	mlx5e_fold_sw_stats64(priv, stats);
  	return 0;
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
