ACPI / CPPC: Fix guaranteed performance handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [acpi] cppc: Fix guaranteed performance handling (Prarit Bhargava) [1696122]
Rebuild_FUZZ: 92.13%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit edef1ef134180149694b86386277076f566d165c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/edef1ef1.failed

As per the ACPI specification, "Guaranteed Performance Register" is
a "Buffer" field and it cannot be "Integer", so treat the "Integer"
type for "Guaranteed Performance Register" field as invalid and
ignore its value in that case.

Also save one cpc_read() call when "Guaranteed Performance Register"
is not present, which means a register defined as:
"Register(SystemMemory, 0, 0, 0, 0)".

Fixes: 29523f095397 ("ACPI / CPPC: Add support for guaranteed performance")
	Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Cc: 4.20+ <stable@vger.kernel.org> # 4.20+
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit edef1ef134180149694b86386277076f566d165c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/cppc_acpi.c
diff --cc drivers/acpi/cppc_acpi.c
index e5b47f032d9a,d4244e7d0e38..000000000000
--- a/drivers/acpi/cppc_acpi.c
+++ b/drivers/acpi/cppc_acpi.c
@@@ -1013,6 -1150,14 +1013,17 @@@ int cppc_get_perf_caps(int cpunum, stru
  	cpc_read(cpunum, nominal_reg, &nom);
  	perf_caps->nominal_perf = nom;
  
++<<<<<<< HEAD
++=======
+ 	if (guaranteed_reg->type != ACPI_TYPE_BUFFER  ||
+ 	    IS_NULL_REG(&guaranteed_reg->cpc_entry.reg)) {
+ 		perf_caps->guaranteed_perf = 0;
+ 	} else {
+ 		cpc_read(cpunum, guaranteed_reg, &guaranteed);
+ 		perf_caps->guaranteed_perf = guaranteed;
+ 	}
+ 
++>>>>>>> edef1ef13418 (ACPI / CPPC: Fix guaranteed performance handling)
  	cpc_read(cpunum, lowest_non_linear_reg, &min_nonlinear);
  	perf_caps->lowest_nonlinear_perf = min_nonlinear;
  
* Unmerged path drivers/acpi/cppc_acpi.c
