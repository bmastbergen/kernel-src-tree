scsi: mpt3sas: simplify task management functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: simplify task management functions (Tomas Henzl) [1513855]
Rebuild_FUZZ: 93.48%
commit-author Hannes Reinecke <hare@suse.de>
commit 74fcfa5371b7a681e864d3a9d3b9ecfd5737d8ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/74fcfa53.failed

No functional change. Code optimization.

One can simply check 'target_busy' or 'device_busy' when figuring out if
there are outstanding commands; no need to painstakingly count them by
hand.

[mkp: tweaked patch description]

	Signed-off-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Suganath Prabu S <suganath-prabu.subramani@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 74fcfa5371b7a681e864d3a9d3b9ecfd5737d8ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_scsih.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_scsih.c
index 79c41385bced,c6cbadc9f242..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_scsih.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_scsih.c
@@@ -1541,75 -1517,14 +1541,86 @@@ _scsih_scsi_lookup_find_by_scmd(struct 
  }
  
  /**
++<<<<<<< HEAD
 + * _scsih_scsi_lookup_find_by_target - search for matching channel:id
 + * @ioc: per adapter object
 + * @id: target id
 + * @channel: channel
 + * Context: This function will acquire ioc->scsi_lookup_lock.
 + *
 + * This will search for a matching channel:id in the scsi_lookup array,
 + * returning 1 if found.
 + */
 +static u8
 +_scsih_scsi_lookup_find_by_target(struct MPT3SAS_ADAPTER *ioc, int id,
 +	int channel)
 +{
 +	u8 found;
 +	unsigned long	flags;
 +	int i;
 +
 +	spin_lock_irqsave(&ioc->scsi_lookup_lock, flags);
 +	found = 0;
 +	for (i = 0 ; i < ioc->scsiio_depth; i++) {
 +		if (ioc->scsi_lookup[i].scmd &&
 +		    (ioc->scsi_lookup[i].scmd->device->id == id &&
 +		    ioc->scsi_lookup[i].scmd->device->channel == channel)) {
 +			found = 1;
 +			goto out;
 +		}
 +	}
 + out:
 +	spin_unlock_irqrestore(&ioc->scsi_lookup_lock, flags);
 +	return found;
 +}
 +
 +/**
 + * _scsih_scsi_lookup_find_by_lun - search for matching channel:id:lun
 + * @ioc: per adapter object
 + * @id: target id
 + * @lun: lun number
 + * @channel: channel
 + * Context: This function will acquire ioc->scsi_lookup_lock.
 + *
 + * This will search for a matching channel:id:lun in the scsi_lookup array,
 + * returning 1 if found.
 + */
 +static u8
 +_scsih_scsi_lookup_find_by_lun(struct MPT3SAS_ADAPTER *ioc, int id,
 +	unsigned int lun, int channel)
 +{
 +	u8 found;
 +	unsigned long	flags;
 +	int i;
 +
 +	spin_lock_irqsave(&ioc->scsi_lookup_lock, flags);
 +	found = 0;
 +	for (i = 0 ; i < ioc->scsiio_depth; i++) {
 +		if (ioc->scsi_lookup[i].scmd &&
 +		    (ioc->scsi_lookup[i].scmd->device->id == id &&
 +		    ioc->scsi_lookup[i].scmd->device->channel == channel &&
 +		    ioc->scsi_lookup[i].scmd->device->lun == lun)) {
 +			found = 1;
 +			goto out;
 +		}
 +	}
 + out:
 +	spin_unlock_irqrestore(&ioc->scsi_lookup_lock, flags);
 +	return found;
 +}
 +
 +static void
 +_scsih_adjust_queue_depth(struct scsi_device *sdev, int qdepth)
++=======
+  * scsih_change_queue_depth - setting device queue depth
+  * @sdev: scsi device struct
+  * @qdepth: requested queue depth
+  *
+  * Returns queue depth.
+  */
+ static int
+ scsih_change_queue_depth(struct scsi_device *sdev, int qdepth)
++>>>>>>> 74fcfa5371b7 (scsi: mpt3sas: simplify task management functions)
  {
  	struct Scsi_Host *shost = sdev->host;
  	int max_depth;
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_scsih.c
