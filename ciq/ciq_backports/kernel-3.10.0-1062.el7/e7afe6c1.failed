sunrpc: fix 4 more call sites that were using stack memory with a scatterlist

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Scott Mayhew <smayhew@redhat.com>
commit e7afe6c1d486b516ed586dcc10b3e7e3e85a9c2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e7afe6c1.failed

While trying to reproduce a reported kernel panic on arm64, I discovered
that AUTH_GSS basically doesn't work at all with older enctypes on arm64
systems with CONFIG_VMAP_STACK enabled.  It turns out there still a few
places using stack memory with scatterlists, causing krb5_encrypt() and
krb5_decrypt() to produce incorrect results (or a BUG if CONFIG_DEBUG_SG
is enabled).

Tested with cthon on v4.0/v4.1/v4.2 with krb5/krb5i/krb5p using
des3-cbc-sha1 and arcfour-hmac-md5.

	Signed-off-by: Scott Mayhew <smayhew@redhat.com>
	Cc: stable@vger.kernel.org
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit e7afe6c1d486b516ed586dcc10b3e7e3e85a9c2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/auth_gss/gss_krb5_seqnum.c
diff --cc net/sunrpc/auth_gss/gss_krb5_seqnum.c
index 20d55c793eb6,507105127095..000000000000
--- a/net/sunrpc/auth_gss/gss_krb5_seqnum.c
+++ b/net/sunrpc/auth_gss/gss_krb5_seqnum.c
@@@ -43,8 -43,8 +43,13 @@@ static s3
  krb5_make_rc4_seq_num(struct krb5_ctx *kctx, int direction, s32 seqnum,
  		      unsigned char *cksum, unsigned char *buf)
  {
++<<<<<<< HEAD
 +	struct crypto_blkcipher *cipher;
 +	unsigned char plain[8];
++=======
+ 	struct crypto_sync_skcipher *cipher;
+ 	unsigned char *plain;
++>>>>>>> e7afe6c1d486 (sunrpc: fix 4 more call sites that were using stack memory with a scatterlist)
  	s32 code;
  
  	dprintk("RPC:       %s:\n", __func__);
@@@ -68,7 -71,8 +77,12 @@@
  
  	code = krb5_encrypt(cipher, cksum, plain, buf, 8);
  out:
++<<<<<<< HEAD
 +	crypto_free_blkcipher(cipher);
++=======
+ 	kfree(plain);
+ 	crypto_free_sync_skcipher(cipher);
++>>>>>>> e7afe6c1d486 (sunrpc: fix 4 more call sites that were using stack memory with a scatterlist)
  	return code;
  }
  s32
@@@ -101,8 -112,8 +122,13 @@@ static s3
  krb5_get_rc4_seq_num(struct krb5_ctx *kctx, unsigned char *cksum,
  		     unsigned char *buf, int *direction, s32 *seqnum)
  {
++<<<<<<< HEAD
 +	struct crypto_blkcipher *cipher;
 +	unsigned char plain[8];
++=======
+ 	struct crypto_sync_skcipher *cipher;
+ 	unsigned char *plain;
++>>>>>>> e7afe6c1d486 (sunrpc: fix 4 more call sites that were using stack memory with a scatterlist)
  	s32 code;
  
  	dprintk("RPC:       %s:\n", __func__);
@@@ -129,8 -145,10 +161,10 @@@
  
  	*seqnum = ((plain[0] << 24) | (plain[1] << 16) |
  					(plain[2] << 8) | (plain[3]));
+ out_plain:
+ 	kfree(plain);
  out:
 -	crypto_free_sync_skcipher(cipher);
 +	crypto_free_blkcipher(cipher);
  	return code;
  }
  
@@@ -141,8 -159,8 +175,13 @@@ krb5_get_seq_num(struct krb5_ctx *kctx
  	       int *direction, u32 *seqnum)
  {
  	s32 code;
++<<<<<<< HEAD
 +	unsigned char plain[8];
 +	struct crypto_blkcipher *key = kctx->seq;
++=======
+ 	unsigned char *plain;
+ 	struct crypto_sync_skcipher *key = kctx->seq;
++>>>>>>> e7afe6c1d486 (sunrpc: fix 4 more call sites that were using stack memory with a scatterlist)
  
  	dprintk("RPC:       krb5_get_seq_num:\n");
  
* Unmerged path net/sunrpc/auth_gss/gss_krb5_seqnum.c
