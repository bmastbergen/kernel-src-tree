net/mlx5e: IPsec, fix byte count in CQE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: IPsec, fix byte count in CQE (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 94.59%
commit-author Boris Pismenny <borisp@mellanox.com>
commit b3ccf978132ed7d0add45ca56e810a36ce7febf3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/b3ccf978.failed

This patch fixes the byte count indication in CQE for processed IPsec
packets that contain a metadata header.

	Signed-off-by: Boris Pismenny <borisp@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b3ccf978132ed7d0add45ca56e810a36ce7febf3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
index c245d8e78509,128a82b1dbfc..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
@@@ -369,12 -363,8 +369,17 @@@ struct sk_buff *mlx5e_ipsec_handle_rx_s
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	/* Remove the metadata from the buffer */
 +	old_eth = (struct ethhdr *)skb->data;
 +	new_eth = (struct ethhdr *)(skb->data + MLX5E_METADATA_ETHER_LEN);
 +	memmove(new_eth, old_eth, 2 * ETH_ALEN);
 +	/* Ethertype is already in its new place */
 +	skb_pull_inline(skb, MLX5E_METADATA_ETHER_LEN);
++=======
+ 	remove_metadata_hdr(skb);
+ 	*cqe_bcnt -= MLX5E_METADATA_ETHER_LEN;
++>>>>>>> b3ccf978132e (net/mlx5e: IPsec, fix byte count in CQE)
  
  	return skb;
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h
index 2bfbbef1b054..ca47c0540904 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h
@@ -41,7 +41,7 @@
 #include "en.h"
 
 struct sk_buff *mlx5e_ipsec_handle_rx_skb(struct net_device *netdev,
-					  struct sk_buff *skb);
+					  struct sk_buff *skb, u32 *cqe_bcnt);
 void mlx5e_ipsec_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
 
 void mlx5e_ipsec_inverse_table_init(void);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 3631c4f3022b..bea305913e72 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -1355,7 +1355,7 @@ void mlx5e_ipsec_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe)
 		mlx5e_free_rx_wqe(rq, wi);
 		goto wq_ll_pop;
 	}
-	skb = mlx5e_ipsec_handle_rx_skb(rq->netdev, skb);
+	skb = mlx5e_ipsec_handle_rx_skb(rq->netdev, skb, &cqe_bcnt);
 	if (unlikely(!skb)) {
 		mlx5e_free_rx_wqe(rq, wi);
 		goto wq_ll_pop;
