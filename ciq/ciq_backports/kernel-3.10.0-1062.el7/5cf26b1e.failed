gfs2: Generalize truncate code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 5cf26b1e88c9eef76a1e8bdedbad48db925bbdd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/5cf26b1e.failed

Pull the code for computing the range of metapointers to iterate out of
gfs2_metapath_ra (for readahead), sweep_bh_for_rgrps (for deallocating
metapointers within a block), and trunc_dealloc (for walking the
metadata tree).

In sweep_bh_for_rgrps, move the code for looking up the resource group
descriptor of the current resource group out of the inner loop.  The
metatype check moves to trunc_dealloc.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 5cf26b1e88c9eef76a1e8bdedbad48db925bbdd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/bmap.c
diff --cc fs/gfs2/bmap.c
index fe514d9cb90e,8fd42ae026dd..000000000000
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@@ -1113,12 -1120,18 +1103,25 @@@ more_rgrps
  		if (!*p)
  			continue;
  		bn = be64_to_cpu(*p);
++<<<<<<< HEAD
 +		if (gfs2_holder_initialized(rd_gh)) {
 +			rgd = (struct gfs2_rgrpd *)rd_gh->gh_gl->gl_object;
 +			gfs2_assert_withdraw(sdp,
 +				     gfs2_glock_is_locked_by_me(rd_gh->gh_gl));
++=======
+ 
+ 		if (rgd) {
+ 			if (!rgrp_contains_block(rgd, bn)) {
+ 				blks_outside_rgrp++;
+ 				continue;
+ 			}
++>>>>>>> 5cf26b1e88c9 (gfs2: Generalize truncate code)
  		} else {
  			rgd = gfs2_blk2rgrpd(sdp, bn, true);
+ 			if (unlikely(!rgd)) {
+ 				ret = -EIO;
+ 				goto out;
+ 			}
  			ret = gfs2_glock_nq_init(rgd->rd_gl, LM_ST_EXCLUSIVE,
  						 0, rd_gh);
  			if (ret)
@@@ -1216,9 -1228,10 +1218,10 @@@ out_unlock
  			/* Every transaction boundary, we rewrite the dinode
  			   to keep its di_blocks current in case of failure. */
  			ip->i_inode.i_mtime = ip->i_inode.i_ctime =
 -				current_time(&ip->i_inode);
 +				CURRENT_TIME;
  			gfs2_trans_add_meta(ip->i_gl, dibh);
  			gfs2_dinode_out(ip, dibh->b_data);
+ 			brelse(dibh);
  			up_write(&ip->i_rw_mutex);
  			gfs2_trans_end(sdp);
  		}
@@@ -1305,15 -1334,8 +1325,15 @@@ static int trunc_dealloc(struct gfs2_in
  	int ret, state;
  	int mp_h; /* metapath buffers are read in to this height */
  	u64 prev_bnr = 0;
- 	bool keep_start; /* need to preserve the first meta pointer? */
+ 	__be64 *start, *end;
  
 +	if ((lblock + 1) * sdp->sd_sb.sb_bsize > arr[ip->i_height]) {
 +		/*
 +		 * The truncate point lies beyond the allocated meta-data;
 +		 * there is nothing to truncate.
 +		 */
 +		return 0;
 +	}
  	memset(&mp, 0, sizeof(mp));
  	find_metapath(sdp, lblock, &mp, ip->i_height);
  
* Unmerged path fs/gfs2/bmap.c
